
APPS_ENDDEVICE_DEMO2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000209b0  00000000  00000000  00010000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  000209b0  000209b0  000309b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     000009c8  20000000  000209b8  00040000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .lpram        00000000  30000000  30000000  000409c8  2**0
                  CONTENTS
  4 .bss          00002620  200009c8  00021380  000409c8  2**3
                  ALLOC
  5 .stack        00002000  20002fe8  000239a0  000409c8  2**0
                  ALLOC
  6 .ARM.attributes 00000028  00000000  00000000  000409c8  2**0
                  CONTENTS, READONLY
  7 .comment      0000008c  00000000  00000000  000409f0  2**0
                  CONTENTS, READONLY
  8 .debug_info   000a5901  00000000  00000000  00040a7c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00010463  00000000  00000000  000e637d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00027e98  00000000  00000000  000f67e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00002120  00000000  00000000  0011e678  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00002810  00000000  00000000  00120798  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0003530e  00000000  00000000  00122fa8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0003b54a  00000000  00000000  001582b6  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000ba309  00000000  00000000  00193800  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  000070ac  00000000  00000000  0024db0c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	e8 4f 00 20 31 79 00 00 2d 79 00 00 2d 79 00 00     .O. 1y..-y..-y..
	...
      2c:	2d 79 00 00 00 00 00 00 00 00 00 00 2d 79 00 00     -y..........-y..
      3c:	2d 79 00 00 2d 79 00 00 2d 79 00 00 41 52 00 00     -y..-y..-y..AR..
      4c:	d9 49 00 00 2d 79 00 00 2d 79 00 00 2d 79 00 00     .I..-y..-y..-y..
      5c:	2d 79 00 00 71 60 00 00 81 60 00 00 91 60 00 00     -y..q`...`...`..
      6c:	a1 60 00 00 b1 60 00 00 c1 60 00 00 2d 79 00 00     .`...`...`..-y..
      7c:	2d 79 00 00 2d 79 00 00 e9 74 00 00 f9 74 00 00     -y..-y...t...t..
      8c:	09 75 00 00 19 75 00 00 29 75 00 00 25 47 00 00     .u...u..)u..%G..
      9c:	2d 79 00 00 2d 79 00 00 2d 79 00 00 2d 79 00 00     -y..-y..-y..-y..
      ac:	2d 79 00 00 00 00 00 00                             -y......

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	200009c8 	.word	0x200009c8
      d4:	00000000 	.word	0x00000000
      d8:	000209b8 	.word	0x000209b8

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	200009cc 	.word	0x200009cc
     108:	000209b8 	.word	0x000209b8
     10c:	000209b8 	.word	0x000209b8
     110:	00000000 	.word	0x00000000

00000114 <atcab_release>:
/** \brief release (free) the global ATCADevice instance.
 *  This must be called in order to release or free up the interface.
 *  \return Returns ATCA_SUCCESS .
 */
ATCA_STATUS atcab_release(void)
{
     114:	b510      	push	{r4, lr}
    {
        return status;
    }
    _gDevice = NULL;
#else
    deleteATCADevice(&_gDevice);
     116:	4802      	ldr	r0, [pc, #8]	; (120 <atcab_release+0xc>)
     118:	4b02      	ldr	r3, [pc, #8]	; (124 <atcab_release+0x10>)
     11a:	4798      	blx	r3
#endif
    return ATCA_SUCCESS;
}
     11c:	2000      	movs	r0, #0
     11e:	bd10      	pop	{r4, pc}
     120:	200009e4 	.word	0x200009e4
     124:	00000cb9 	.word	0x00000cb9

00000128 <atcab_init>:
{
     128:	b510      	push	{r4, lr}
     12a:	b082      	sub	sp, #8
     12c:	0004      	movs	r4, r0
    if (_gDevice)
     12e:	4b14      	ldr	r3, [pc, #80]	; (180 <atcab_init+0x58>)
     130:	681b      	ldr	r3, [r3, #0]
     132:	2b00      	cmp	r3, #0
     134:	d001      	beq.n	13a <atcab_init+0x12>
        atcab_release();
     136:	4b13      	ldr	r3, [pc, #76]	; (184 <atcab_init+0x5c>)
     138:	4798      	blx	r3
    _gDevice = newATCADevice(cfg);
     13a:	0020      	movs	r0, r4
     13c:	4b12      	ldr	r3, [pc, #72]	; (188 <atcab_init+0x60>)
     13e:	4798      	blx	r3
     140:	4b0f      	ldr	r3, [pc, #60]	; (180 <atcab_init+0x58>)
     142:	6018      	str	r0, [r3, #0]
    if (_gDevice == NULL)
     144:	2800      	cmp	r0, #0
     146:	d019      	beq.n	17c <atcab_init+0x54>
    if (cfg->devtype == ATECC608A)
     148:	7862      	ldrb	r2, [r4, #1]
    return ATCA_SUCCESS;
     14a:	2300      	movs	r3, #0
    if (cfg->devtype == ATECC608A)
     14c:	2a03      	cmp	r2, #3
     14e:	d002      	beq.n	156 <atcab_init+0x2e>
}
     150:	0018      	movs	r0, r3
     152:	b002      	add	sp, #8
     154:	bd10      	pop	{r4, pc}
        if ((status = atcab_read_bytes_zone(ATCA_ZONE_CONFIG, 0, ATCA_CHIPMODE_OFFSET, &_gDevice->mCommands->clock_divider, 1)) != ATCA_SUCCESS)
     156:	6803      	ldr	r3, [r0, #0]
     158:	3301      	adds	r3, #1
     15a:	3a02      	subs	r2, #2
     15c:	9200      	str	r2, [sp, #0]
     15e:	3212      	adds	r2, #18
     160:	2100      	movs	r1, #0
     162:	2000      	movs	r0, #0
     164:	4c09      	ldr	r4, [pc, #36]	; (18c <atcab_init+0x64>)
     166:	47a0      	blx	r4
     168:	1e03      	subs	r3, r0, #0
     16a:	d1f1      	bne.n	150 <atcab_init+0x28>
        _gDevice->mCommands->clock_divider &= ATCA_CHIPMODE_CLOCK_DIV_MASK;
     16c:	4a04      	ldr	r2, [pc, #16]	; (180 <atcab_init+0x58>)
     16e:	6812      	ldr	r2, [r2, #0]
     170:	6811      	ldr	r1, [r2, #0]
     172:	784a      	ldrb	r2, [r1, #1]
     174:	2007      	movs	r0, #7
     176:	4382      	bics	r2, r0
     178:	704a      	strb	r2, [r1, #1]
     17a:	e7e9      	b.n	150 <atcab_init+0x28>
        return ATCA_GEN_FAIL;
     17c:	23e1      	movs	r3, #225	; 0xe1
     17e:	e7e7      	b.n	150 <atcab_init+0x28>
     180:	200009e4 	.word	0x200009e4
     184:	00000115 	.word	0x00000115
     188:	00000c2d 	.word	0x00000c2d
     18c:	0000077d 	.word	0x0000077d

00000190 <atcab_get_addr>:
 *  \param[in] offset Offset Number within the block of data or configuration or OTP zone.
 *  \param[out] addr  Pointer to the address of data or configuration or OTP zone.
 *  \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS atcab_get_addr(uint8_t zone, uint16_t slot, uint8_t block, uint8_t offset, uint16_t* addr)
{
     190:	b510      	push	{r4, lr}
    ATCA_STATUS status = ATCA_SUCCESS;
    uint8_t mem_zone = zone & 0x03;

    if (addr == NULL)
     192:	9c02      	ldr	r4, [sp, #8]
     194:	2c00      	cmp	r4, #0
     196:	d008      	beq.n	1aa <atcab_get_addr+0x1a>
    uint8_t mem_zone = zone & 0x03;
     198:	2403      	movs	r4, #3
     19a:	4020      	ands	r0, r4
    {
        return ATCA_BAD_PARAM;
    }
    if ((mem_zone != ATCA_ZONE_CONFIG) && (mem_zone != ATCA_ZONE_DATA) && (mem_zone != ATCA_ZONE_OTP))
     19c:	d007      	beq.n	1ae <atcab_get_addr+0x1e>
     19e:	2802      	cmp	r0, #2
     1a0:	d00d      	beq.n	1be <atcab_get_addr+0x2e>
     1a2:	2801      	cmp	r0, #1
     1a4:	d003      	beq.n	1ae <atcab_get_addr+0x1e>
    {
        return ATCA_BAD_PARAM;
     1a6:	20e2      	movs	r0, #226	; 0xe2
     1a8:	e012      	b.n	1d0 <atcab_get_addr+0x40>
        return ATCA_BAD_PARAM;
     1aa:	20e2      	movs	r0, #226	; 0xe2
     1ac:	e010      	b.n	1d0 <atcab_get_addr+0x40>
        *addr = 0;
        // Mask the offset
        offset = offset & (uint8_t)0x07;
        if ((mem_zone == ATCA_ZONE_CONFIG) || (mem_zone == ATCA_ZONE_OTP))
        {
            *addr = block << 3;
     1ae:	00d2      	lsls	r2, r2, #3
            *addr |= offset;
     1b0:	2007      	movs	r0, #7
     1b2:	4003      	ands	r3, r0
     1b4:	431a      	orrs	r2, r3
     1b6:	9b02      	ldr	r3, [sp, #8]
     1b8:	801a      	strh	r2, [r3, #0]
            *addr |= block << 8;
        }
    }
    while (0);

    return status;
     1ba:	2000      	movs	r0, #0
     1bc:	e008      	b.n	1d0 <atcab_get_addr+0x40>
            *addr = slot << 3;
     1be:	00c9      	lsls	r1, r1, #3
            *addr  |= offset;
     1c0:	2007      	movs	r0, #7
     1c2:	4003      	ands	r3, r0
     1c4:	430b      	orrs	r3, r1
            *addr |= block << 8;
     1c6:	0212      	lsls	r2, r2, #8
     1c8:	431a      	orrs	r2, r3
     1ca:	9b02      	ldr	r3, [sp, #8]
     1cc:	801a      	strh	r2, [r3, #0]
    return status;
     1ce:	2000      	movs	r0, #0
}
     1d0:	bd10      	pop	{r4, pc}
	...

000001d4 <atcab_get_zone_size>:
 */
ATCA_STATUS atcab_get_zone_size(uint8_t zone, uint16_t slot, size_t* size)
{
    ATCA_STATUS status = ATCA_SUCCESS;

    if (size == NULL)
     1d4:	2a00      	cmp	r2, #0
     1d6:	d03e      	beq.n	256 <atcab_get_zone_size+0x82>
    {
        return ATCA_BAD_PARAM;
    }

    if (_gDevice->mIface->mIfaceCFG->devtype == ATSHA204A)
     1d8:	4b20      	ldr	r3, [pc, #128]	; (25c <atcab_get_zone_size+0x88>)
     1da:	681b      	ldr	r3, [r3, #0]
     1dc:	685b      	ldr	r3, [r3, #4]
     1de:	685b      	ldr	r3, [r3, #4]
     1e0:	785b      	ldrb	r3, [r3, #1]
     1e2:	2b00      	cmp	r3, #0
     1e4:	d113      	bne.n	20e <atcab_get_zone_size+0x3a>
    {
        switch (zone)
     1e6:	2801      	cmp	r0, #1
     1e8:	d009      	beq.n	1fe <atcab_get_zone_size+0x2a>
     1ea:	2800      	cmp	r0, #0
     1ec:	d003      	beq.n	1f6 <atcab_get_zone_size+0x22>
     1ee:	2802      	cmp	r0, #2
     1f0:	d009      	beq.n	206 <atcab_get_zone_size+0x32>
        {
        case ATCA_ZONE_CONFIG: *size = 88; break;
        case ATCA_ZONE_OTP:    *size = 64; break;
        case ATCA_ZONE_DATA:   *size = 32; break;
        default: status = ATCA_BAD_PARAM; break;
     1f2:	20e2      	movs	r0, #226	; 0xe2
     1f4:	e030      	b.n	258 <atcab_get_zone_size+0x84>
        case ATCA_ZONE_CONFIG: *size = 88; break;
     1f6:	2358      	movs	r3, #88	; 0x58
     1f8:	6013      	str	r3, [r2, #0]
    ATCA_STATUS status = ATCA_SUCCESS;
     1fa:	2000      	movs	r0, #0
        case ATCA_ZONE_CONFIG: *size = 88; break;
     1fc:	e02c      	b.n	258 <atcab_get_zone_size+0x84>
        case ATCA_ZONE_OTP:    *size = 64; break;
     1fe:	2340      	movs	r3, #64	; 0x40
     200:	6013      	str	r3, [r2, #0]
    ATCA_STATUS status = ATCA_SUCCESS;
     202:	2000      	movs	r0, #0
        case ATCA_ZONE_OTP:    *size = 64; break;
     204:	e028      	b.n	258 <atcab_get_zone_size+0x84>
        case ATCA_ZONE_DATA:   *size = 32; break;
     206:	2320      	movs	r3, #32
     208:	6013      	str	r3, [r2, #0]
    ATCA_STATUS status = ATCA_SUCCESS;
     20a:	2000      	movs	r0, #0
        case ATCA_ZONE_DATA:   *size = 32; break;
     20c:	e024      	b.n	258 <atcab_get_zone_size+0x84>
        }
    }
    else
    {
        switch (zone)
     20e:	2801      	cmp	r0, #1
     210:	d009      	beq.n	226 <atcab_get_zone_size+0x52>
     212:	2800      	cmp	r0, #0
     214:	d003      	beq.n	21e <atcab_get_zone_size+0x4a>
     216:	2802      	cmp	r0, #2
     218:	d009      	beq.n	22e <atcab_get_zone_size+0x5a>
            else
            {
                status = ATCA_BAD_PARAM;
            }
            break;
        default: status = ATCA_BAD_PARAM; break;
     21a:	20e2      	movs	r0, #226	; 0xe2
     21c:	e01c      	b.n	258 <atcab_get_zone_size+0x84>
        case ATCA_ZONE_CONFIG: *size = 128; break;
     21e:	2380      	movs	r3, #128	; 0x80
     220:	6013      	str	r3, [r2, #0]
    ATCA_STATUS status = ATCA_SUCCESS;
     222:	2000      	movs	r0, #0
        case ATCA_ZONE_CONFIG: *size = 128; break;
     224:	e018      	b.n	258 <atcab_get_zone_size+0x84>
        case ATCA_ZONE_OTP:    *size = 64; break;
     226:	2340      	movs	r3, #64	; 0x40
     228:	6013      	str	r3, [r2, #0]
    ATCA_STATUS status = ATCA_SUCCESS;
     22a:	2000      	movs	r0, #0
        case ATCA_ZONE_OTP:    *size = 64; break;
     22c:	e014      	b.n	258 <atcab_get_zone_size+0x84>
            if (slot < 8)
     22e:	2907      	cmp	r1, #7
     230:	d908      	bls.n	244 <atcab_get_zone_size+0x70>
            else if (slot == 8)
     232:	2908      	cmp	r1, #8
     234:	d00a      	beq.n	24c <atcab_get_zone_size+0x78>
                status = ATCA_BAD_PARAM;
     236:	20e2      	movs	r0, #226	; 0xe2
            else if (slot < 16)
     238:	290f      	cmp	r1, #15
     23a:	d80d      	bhi.n	258 <atcab_get_zone_size+0x84>
                *size = 72;
     23c:	2348      	movs	r3, #72	; 0x48
     23e:	6013      	str	r3, [r2, #0]
    ATCA_STATUS status = ATCA_SUCCESS;
     240:	2000      	movs	r0, #0
     242:	e009      	b.n	258 <atcab_get_zone_size+0x84>
                *size = 36;
     244:	2324      	movs	r3, #36	; 0x24
     246:	6013      	str	r3, [r2, #0]
    ATCA_STATUS status = ATCA_SUCCESS;
     248:	2000      	movs	r0, #0
     24a:	e005      	b.n	258 <atcab_get_zone_size+0x84>
                *size = 416;
     24c:	23d0      	movs	r3, #208	; 0xd0
     24e:	005b      	lsls	r3, r3, #1
     250:	6013      	str	r3, [r2, #0]
    ATCA_STATUS status = ATCA_SUCCESS;
     252:	2000      	movs	r0, #0
     254:	e000      	b.n	258 <atcab_get_zone_size+0x84>
        return ATCA_BAD_PARAM;
     256:	20e2      	movs	r0, #226	; 0xe2
        }
    }

    return status;
}
     258:	4770      	bx	lr
     25a:	46c0      	nop			; (mov r8, r8)
     25c:	200009e4 	.word	0x200009e4

00000260 <atcab_aes>:
 *  \param[out] aes_out  Output data from the AES command is returned here (16
 *                       bytes).
 *  \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS atcab_aes(uint8_t mode, uint16_t key_id, const uint8_t* aes_in, uint8_t* aes_out)
{
     260:	b570      	push	{r4, r5, r6, lr}
     262:	b0b2      	sub	sp, #200	; 0xc8
     264:	0014      	movs	r4, r2
     266:	001d      	movs	r5, r3
    ATCACommand ca_cmd = _gDevice->mCommands;
    ATCA_STATUS status = ATCA_GEN_FAIL;

    do
    {
        if (aes_in == NULL)
     268:	2a00      	cmp	r2, #0
     26a:	d032      	beq.n	2d2 <atcab_aes+0x72>
    ATCACommand ca_cmd = _gDevice->mCommands;
     26c:	4b1a      	ldr	r3, [pc, #104]	; (2d8 <atcab_aes+0x78>)
     26e:	681b      	ldr	r3, [r3, #0]
     270:	681e      	ldr	r6, [r3, #0]
            status = ATCA_BAD_PARAM;
            break;
        }

        // build a AES command
        packet.param1 = mode;
     272:	466b      	mov	r3, sp
     274:	70d8      	strb	r0, [r3, #3]
        packet.param2 = key_id;
     276:	8099      	strh	r1, [r3, #4]
        if (AES_MODE_GFM == (mode & AES_MODE_GFM))
     278:	43c0      	mvns	r0, r0
     27a:	0783      	lsls	r3, r0, #30
     27c:	d00e      	beq.n	29c <atcab_aes+0x3c>
        {
            memcpy(packet.data, aes_in, ATCA_AES_GFM_SIZE);
        }
        else
        {
            memcpy(packet.data, aes_in, AES_DATA_SIZE);
     27e:	2210      	movs	r2, #16
     280:	0021      	movs	r1, r4
     282:	466b      	mov	r3, sp
     284:	1d98      	adds	r0, r3, #6
     286:	4b15      	ldr	r3, [pc, #84]	; (2dc <atcab_aes+0x7c>)
     288:	4798      	blx	r3
        }

        if ((status = atAES(ca_cmd, &packet)) != ATCA_SUCCESS)
     28a:	4669      	mov	r1, sp
     28c:	0030      	movs	r0, r6
     28e:	4b14      	ldr	r3, [pc, #80]	; (2e0 <atcab_aes+0x80>)
     290:	4798      	blx	r3
     292:	1e04      	subs	r4, r0, #0
     294:	d009      	beq.n	2aa <atcab_aes+0x4a>

    }
    while (0);

    return status;
}
     296:	0020      	movs	r0, r4
     298:	b032      	add	sp, #200	; 0xc8
     29a:	bd70      	pop	{r4, r5, r6, pc}
            memcpy(packet.data, aes_in, ATCA_AES_GFM_SIZE);
     29c:	2220      	movs	r2, #32
     29e:	0021      	movs	r1, r4
     2a0:	466b      	mov	r3, sp
     2a2:	1d98      	adds	r0, r3, #6
     2a4:	4b0d      	ldr	r3, [pc, #52]	; (2dc <atcab_aes+0x7c>)
     2a6:	4798      	blx	r3
     2a8:	e7ef      	b.n	28a <atcab_aes+0x2a>
        if ((status = atca_execute_command(&packet, _gDevice)) != ATCA_SUCCESS)
     2aa:	4b0b      	ldr	r3, [pc, #44]	; (2d8 <atcab_aes+0x78>)
     2ac:	6819      	ldr	r1, [r3, #0]
     2ae:	4668      	mov	r0, sp
     2b0:	4b0c      	ldr	r3, [pc, #48]	; (2e4 <atcab_aes+0x84>)
     2b2:	4798      	blx	r3
     2b4:	1e04      	subs	r4, r0, #0
     2b6:	d1ee      	bne.n	296 <atcab_aes+0x36>
        if (aes_out && packet.data[ATCA_COUNT_IDX] >= (3 + AES_DATA_SIZE))
     2b8:	2d00      	cmp	r5, #0
     2ba:	d0ec      	beq.n	296 <atcab_aes+0x36>
     2bc:	466b      	mov	r3, sp
     2be:	799b      	ldrb	r3, [r3, #6]
     2c0:	2b12      	cmp	r3, #18
     2c2:	d9e8      	bls.n	296 <atcab_aes+0x36>
            memcpy(aes_out, &packet.data[ATCA_RSP_DATA_IDX], AES_DATA_SIZE);
     2c4:	2210      	movs	r2, #16
     2c6:	466b      	mov	r3, sp
     2c8:	1dd9      	adds	r1, r3, #7
     2ca:	0028      	movs	r0, r5
     2cc:	4b03      	ldr	r3, [pc, #12]	; (2dc <atcab_aes+0x7c>)
     2ce:	4798      	blx	r3
     2d0:	e7e1      	b.n	296 <atcab_aes+0x36>
            status = ATCA_BAD_PARAM;
     2d2:	24e2      	movs	r4, #226	; 0xe2
     2d4:	e7df      	b.n	296 <atcab_aes+0x36>
     2d6:	46c0      	nop			; (mov r8, r8)
     2d8:	200009e4 	.word	0x200009e4
     2dc:	00019da5 	.word	0x00019da5
     2e0:	00000af1 	.word	0x00000af1
     2e4:	00000cf5 	.word	0x00000cf5

000002e8 <atcab_aes_encrypt>:
 * \param[out] ciphertext  Output ciphertext is returned here (16 bytes).
 *
 * \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS  atcab_aes_encrypt(uint16_t key_id, uint8_t key_block, const uint8_t* plaintext, uint8_t* ciphertext)
{
     2e8:	b510      	push	{r4, lr}
     2ea:	0004      	movs	r4, r0
    uint8_t mode;

    mode = AES_MODE_ENCRYPT | (AES_MODE_KEY_BLOCK_MASK & (key_block << AES_MODE_KEY_BLOCK_POS));
     2ec:	0189      	lsls	r1, r1, #6
    return atcab_aes(mode, key_id, plaintext, ciphertext);
     2ee:	b2c8      	uxtb	r0, r1
     2f0:	0021      	movs	r1, r4
     2f2:	4c01      	ldr	r4, [pc, #4]	; (2f8 <atcab_aes_encrypt+0x10>)
     2f4:	47a0      	blx	r4
}
     2f6:	bd10      	pop	{r4, pc}
     2f8:	00000261 	.word	0x00000261

000002fc <atcab_gendig>:
 *                              "Shared Nonce" mode, otherwise ignored (can be NULL).
 *  \param[in] other_data_size  Size of other_data in bytes.
 *  \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS atcab_gendig(uint8_t zone, uint16_t key_id, const uint8_t *other_data, uint8_t other_data_size)
{
     2fc:	b530      	push	{r4, r5, lr}
     2fe:	b0b3      	sub	sp, #204	; 0xcc
     300:	0014      	movs	r4, r2
    ATCAPacket packet;
    ATCACommand ca_cmd = _gDevice->mCommands;
     302:	4a1e      	ldr	r2, [pc, #120]	; (37c <atcab_gendig+0x80>)
     304:	6812      	ldr	r2, [r2, #0]
     306:	6815      	ldr	r5, [r2, #0]
    ATCA_STATUS status = ATCA_GEN_FAIL;
    bool is_no_mac_key = false;

    if (other_data_size > 0 && other_data == NULL)
     308:	2b00      	cmp	r3, #0
     30a:	d026      	beq.n	35a <atcab_gendig+0x5e>
     30c:	2c00      	cmp	r4, #0
     30e:	d022      	beq.n	356 <atcab_gendig+0x5a>
    }

    do
    {
        // build gendig command
        packet.param1 = zone;
     310:	466a      	mov	r2, sp
     312:	70d0      	strb	r0, [r2, #3]
        packet.param2 = key_id;
     314:	8091      	strh	r1, [r2, #4]

        if (packet.param1 == GENDIG_ZONE_SHARED_NONCE && other_data_size >= ATCA_BLOCK_SIZE)
     316:	2803      	cmp	r0, #3
     318:	d124      	bne.n	364 <atcab_gendig+0x68>
     31a:	2b1f      	cmp	r3, #31
     31c:	d911      	bls.n	342 <atcab_gendig+0x46>
        {
            memcpy(&packet.data[0], &other_data[0], ATCA_BLOCK_SIZE);
     31e:	2220      	movs	r2, #32
     320:	0021      	movs	r1, r4
     322:	466b      	mov	r3, sp
     324:	1d98      	adds	r0, r3, #6
     326:	4b16      	ldr	r3, [pc, #88]	; (380 <atcab_gendig+0x84>)
     328:	4798      	blx	r3
    bool is_no_mac_key = false;
     32a:	2200      	movs	r2, #0
            memcpy(&packet.data[0], &other_data[0], ATCA_BLOCK_SIZE);
     32c:	e01d      	b.n	36a <atcab_gendig+0x6e>
        }
        else if (packet.param1 == GENDIG_ZONE_DATA && other_data_size >= ATCA_WORD_SIZE)
     32e:	2b03      	cmp	r3, #3
     330:	d91b      	bls.n	36a <atcab_gendig+0x6e>
        {
            memcpy(&packet.data[0], &other_data[0], ATCA_WORD_SIZE);
     332:	3204      	adds	r2, #4
     334:	0021      	movs	r1, r4
     336:	466b      	mov	r3, sp
     338:	1d98      	adds	r0, r3, #6
     33a:	4b11      	ldr	r3, [pc, #68]	; (380 <atcab_gendig+0x84>)
     33c:	4798      	blx	r3
            is_no_mac_key = true;
     33e:	2201      	movs	r2, #1
     340:	e013      	b.n	36a <atcab_gendig+0x6e>
    bool is_no_mac_key = false;
     342:	2200      	movs	r2, #0
     344:	e011      	b.n	36a <atcab_gendig+0x6e>
     346:	2200      	movs	r2, #0
     348:	e00f      	b.n	36a <atcab_gendig+0x6e>
        if ((status = atGenDig(ca_cmd, &packet, is_no_mac_key)) != ATCA_SUCCESS)
        {
            break;
        }

        if ((status = atca_execute_command(&packet, _gDevice)) != ATCA_SUCCESS)
     34a:	4b0c      	ldr	r3, [pc, #48]	; (37c <atcab_gendig+0x80>)
     34c:	6819      	ldr	r1, [r3, #0]
     34e:	4668      	mov	r0, sp
     350:	4b0c      	ldr	r3, [pc, #48]	; (384 <atcab_gendig+0x88>)
     352:	4798      	blx	r3
     354:	e00f      	b.n	376 <atcab_gendig+0x7a>
        return ATCA_BAD_PARAM;
     356:	20e2      	movs	r0, #226	; 0xe2
     358:	e00d      	b.n	376 <atcab_gendig+0x7a>
        packet.param1 = zone;
     35a:	466a      	mov	r2, sp
     35c:	70d0      	strb	r0, [r2, #3]
        packet.param2 = key_id;
     35e:	8091      	strh	r1, [r2, #4]
        if (packet.param1 == GENDIG_ZONE_SHARED_NONCE && other_data_size >= ATCA_BLOCK_SIZE)
     360:	2803      	cmp	r0, #3
     362:	d0f0      	beq.n	346 <atcab_gendig+0x4a>
    bool is_no_mac_key = false;
     364:	2200      	movs	r2, #0
        else if (packet.param1 == GENDIG_ZONE_DATA && other_data_size >= ATCA_WORD_SIZE)
     366:	2802      	cmp	r0, #2
     368:	d0e1      	beq.n	32e <atcab_gendig+0x32>
        if ((status = atGenDig(ca_cmd, &packet, is_no_mac_key)) != ATCA_SUCCESS)
     36a:	4669      	mov	r1, sp
     36c:	0028      	movs	r0, r5
     36e:	4b06      	ldr	r3, [pc, #24]	; (388 <atcab_gendig+0x8c>)
     370:	4798      	blx	r3
     372:	2800      	cmp	r0, #0
     374:	d0e9      	beq.n	34a <atcab_gendig+0x4e>

    }
    while (0);

    return status;
}
     376:	b033      	add	sp, #204	; 0xcc
     378:	bd30      	pop	{r4, r5, pc}
     37a:	46c0      	nop			; (mov r8, r8)
     37c:	200009e4 	.word	0x200009e4
     380:	00019da5 	.word	0x00019da5
     384:	00000cf5 	.word	0x00000cf5
     388:	00000a21 	.word	0x00000a21

0000038c <atcab_kdf>:
 *                        encryption is not used, this can be NULL.
 *
 * \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS atcab_kdf(uint8_t mode, uint16_t key_id, const uint32_t details, const uint8_t* message, uint8_t* out_data, uint8_t* out_nonce)
{
     38c:	b5f0      	push	{r4, r5, r6, r7, lr}
     38e:	b0b3      	sub	sp, #204	; 0xcc
     390:	0015      	movs	r5, r2
    ATCA_STATUS status = ATCA_GEN_FAIL;
    uint16_t out_data_size = 0;

    do
    {
        if (message == NULL)
     392:	2b00      	cmp	r3, #0
     394:	d053      	beq.n	43e <atcab_kdf+0xb2>
    ATCACommand ca_cmd = _gDevice->mCommands;
     396:	4a2b      	ldr	r2, [pc, #172]	; (444 <atcab_kdf+0xb8>)
     398:	6812      	ldr	r2, [r2, #0]
     39a:	6814      	ldr	r4, [r2, #0]
        {
            return ATCA_BAD_PARAM;
        }

        // Build the KDF command
        packet.param1 = mode;
     39c:	466a      	mov	r2, sp
     39e:	70d0      	strb	r0, [r2, #3]
        packet.param2 = key_id;
     3a0:	8091      	strh	r1, [r2, #4]

        // Add details parameter
        packet.data[0] = details;
     3a2:	7195      	strb	r5, [r2, #6]
        packet.data[1] = details >> 8;
     3a4:	0a2a      	lsrs	r2, r5, #8
     3a6:	4669      	mov	r1, sp
     3a8:	71ca      	strb	r2, [r1, #7]
        packet.data[2] = details >> 16;
     3aa:	0c2a      	lsrs	r2, r5, #16
     3ac:	720a      	strb	r2, [r1, #8]
        packet.data[3] = details >> 24;
     3ae:	0e2a      	lsrs	r2, r5, #24
     3b0:	724a      	strb	r2, [r1, #9]
     3b2:	2660      	movs	r6, #96	; 0x60
     3b4:	4006      	ands	r6, r0

        // Add input message
        if ((mode & KDF_MODE_ALG_MASK) == KDF_MODE_ALG_AES)
     3b6:	2e20      	cmp	r6, #32
     3b8:	d00d      	beq.n	3d6 <atcab_kdf+0x4a>
            memcpy(&packet.data[KDF_DETAILS_SIZE], message, AES_DATA_SIZE);
        }
        else
        {
            // All other algorithms encode message size in the last byte of details
            memcpy(&packet.data[KDF_DETAILS_SIZE], message, packet.data[3]);
     3ba:	0019      	movs	r1, r3
     3bc:	200a      	movs	r0, #10
     3be:	4468      	add	r0, sp
     3c0:	4b21      	ldr	r3, [pc, #132]	; (448 <atcab_kdf+0xbc>)
     3c2:	4798      	blx	r3
        }

        // Build command
        if ((status = atKDF(ca_cmd, &packet)) != ATCA_SUCCESS)
     3c4:	4669      	mov	r1, sp
     3c6:	0020      	movs	r0, r4
     3c8:	4b20      	ldr	r3, [pc, #128]	; (44c <atcab_kdf+0xc0>)
     3ca:	4798      	blx	r3
     3cc:	1e04      	subs	r4, r0, #0
     3ce:	d009      	beq.n	3e4 <atcab_kdf+0x58>
        }
    }
    while (false);

    return status;
}
     3d0:	0020      	movs	r0, r4
     3d2:	b033      	add	sp, #204	; 0xcc
     3d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
            memcpy(&packet.data[KDF_DETAILS_SIZE], message, AES_DATA_SIZE);
     3d6:	2210      	movs	r2, #16
     3d8:	0019      	movs	r1, r3
     3da:	200a      	movs	r0, #10
     3dc:	4468      	add	r0, sp
     3de:	4b1a      	ldr	r3, [pc, #104]	; (448 <atcab_kdf+0xbc>)
     3e0:	4798      	blx	r3
     3e2:	e7ef      	b.n	3c4 <atcab_kdf+0x38>
        if ((status = atca_execute_command(&packet, _gDevice)) != ATCA_SUCCESS)
     3e4:	4b17      	ldr	r3, [pc, #92]	; (444 <atcab_kdf+0xb8>)
     3e6:	6819      	ldr	r1, [r3, #0]
     3e8:	4668      	mov	r0, sp
     3ea:	4b19      	ldr	r3, [pc, #100]	; (450 <atcab_kdf+0xc4>)
     3ec:	4798      	blx	r3
     3ee:	1e04      	subs	r4, r0, #0
     3f0:	d1ee      	bne.n	3d0 <atcab_kdf+0x44>
            out_data_size = 32;
     3f2:	2720      	movs	r7, #32
        if (((mode & KDF_MODE_ALG_MASK) == KDF_MODE_ALG_PRF) && (details & KDF_DETAILS_PRF_TARGET_LEN_64))
     3f4:	2e00      	cmp	r6, #0
     3f6:	d102      	bne.n	3fe <atcab_kdf+0x72>
     3f8:	05eb      	lsls	r3, r5, #23
     3fa:	d500      	bpl.n	3fe <atcab_kdf+0x72>
            out_data_size = 64;
     3fc:	3720      	adds	r7, #32
        if (out_data != NULL && packet.data[ATCA_COUNT_IDX] >= (ATCA_PACKET_OVERHEAD + out_data_size))
     3fe:	9b38      	ldr	r3, [sp, #224]	; 0xe0
     400:	2b00      	cmp	r3, #0
     402:	d004      	beq.n	40e <atcab_kdf+0x82>
     404:	466b      	mov	r3, sp
     406:	799a      	ldrb	r2, [r3, #6]
     408:	1cfb      	adds	r3, r7, #3
     40a:	429a      	cmp	r2, r3
     40c:	da10      	bge.n	430 <atcab_kdf+0xa4>
        if (out_nonce != NULL && packet.data[ATCA_COUNT_IDX] >= (ATCA_PACKET_OVERHEAD + out_data_size + 32))
     40e:	9b39      	ldr	r3, [sp, #228]	; 0xe4
     410:	2b00      	cmp	r3, #0
     412:	d0dd      	beq.n	3d0 <atcab_kdf+0x44>
     414:	466b      	mov	r3, sp
     416:	799a      	ldrb	r2, [r3, #6]
     418:	003b      	movs	r3, r7
     41a:	3323      	adds	r3, #35	; 0x23
     41c:	429a      	cmp	r2, r3
     41e:	dbd7      	blt.n	3d0 <atcab_kdf+0x44>
            memcpy(out_nonce, &packet.data[ATCA_RSP_DATA_IDX + out_data_size], 32);
     420:	ab32      	add	r3, sp, #200	; 0xc8
     422:	19d9      	adds	r1, r3, r7
     424:	39c1      	subs	r1, #193	; 0xc1
     426:	2220      	movs	r2, #32
     428:	9839      	ldr	r0, [sp, #228]	; 0xe4
     42a:	4b07      	ldr	r3, [pc, #28]	; (448 <atcab_kdf+0xbc>)
     42c:	4798      	blx	r3
     42e:	e7cf      	b.n	3d0 <atcab_kdf+0x44>
            memcpy(out_data, &packet.data[ATCA_RSP_DATA_IDX], out_data_size);
     430:	003a      	movs	r2, r7
     432:	466b      	mov	r3, sp
     434:	1dd9      	adds	r1, r3, #7
     436:	9838      	ldr	r0, [sp, #224]	; 0xe0
     438:	4b03      	ldr	r3, [pc, #12]	; (448 <atcab_kdf+0xbc>)
     43a:	4798      	blx	r3
     43c:	e7e7      	b.n	40e <atcab_kdf+0x82>
            return ATCA_BAD_PARAM;
     43e:	24e2      	movs	r4, #226	; 0xe2
     440:	e7c6      	b.n	3d0 <atcab_kdf+0x44>
     442:	46c0      	nop			; (mov r8, r8)
     444:	200009e4 	.word	0x200009e4
     448:	00019da5 	.word	0x00019da5
     44c:	00000b1d 	.word	0x00000b1d
     450:	00000cf5 	.word	0x00000cf5

00000454 <atcab_nonce_base>:
 *                          needed.
 *
 * \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS atcab_nonce_base(uint8_t mode, uint16_t zero, const uint8_t *num_in, uint8_t* rand_out)
{
     454:	b5f0      	push	{r4, r5, r6, r7, lr}
     456:	b0b3      	sub	sp, #204	; 0xcc
     458:	0016      	movs	r6, r2
     45a:	001d      	movs	r5, r3
    ATCAPacket packet;
    ATCACommand ca_cmd = _gDevice->mCommands;
     45c:	4b1f      	ldr	r3, [pc, #124]	; (4dc <atcab_nonce_base+0x88>)
     45e:	681b      	ldr	r3, [r3, #0]
     460:	681f      	ldr	r7, [r3, #0]
    ATCA_STATUS status = ATCA_GEN_FAIL;
    uint8_t nonce_mode = mode & NONCE_MODE_MASK;
     462:	2303      	movs	r3, #3
     464:	4003      	ands	r3, r0

    do
    {
        // build a nonce command
        packet.param1 = mode;
     466:	466a      	mov	r2, sp
     468:	70d0      	strb	r0, [r2, #3]
        packet.param2 = zero;
     46a:	8091      	strh	r1, [r2, #4]

        // Copy the right amount of NumIn data
        if ((nonce_mode == NONCE_MODE_SEED_UPDATE || nonce_mode == NONCE_MODE_NO_SEED_UPDATE))
     46c:	2b01      	cmp	r3, #1
     46e:	d905      	bls.n	47c <atcab_nonce_base+0x28>
                memcpy(packet.data, num_in, 32);
            }
        }
        else
        {
            return ATCA_BAD_PARAM;
     470:	24e2      	movs	r4, #226	; 0xe2
        else if (nonce_mode == NONCE_MODE_PASSTHROUGH)
     472:	2b03      	cmp	r3, #3
     474:	d022      	beq.n	4bc <atcab_nonce_base+0x68>

    }
    while (0);

    return status;
}
     476:	0020      	movs	r0, r4
     478:	b033      	add	sp, #204	; 0xcc
     47a:	bdf0      	pop	{r4, r5, r6, r7, pc}
            memcpy(packet.data, num_in, NONCE_NUMIN_SIZE);
     47c:	2214      	movs	r2, #20
     47e:	0031      	movs	r1, r6
     480:	466b      	mov	r3, sp
     482:	1d98      	adds	r0, r3, #6
     484:	4b16      	ldr	r3, [pc, #88]	; (4e0 <atcab_nonce_base+0x8c>)
     486:	4798      	blx	r3
        if ((status = atNonce(ca_cmd, &packet)) != ATCA_SUCCESS)
     488:	4669      	mov	r1, sp
     48a:	0038      	movs	r0, r7
     48c:	4b15      	ldr	r3, [pc, #84]	; (4e4 <atcab_nonce_base+0x90>)
     48e:	4798      	blx	r3
     490:	1e04      	subs	r4, r0, #0
     492:	d1f0      	bne.n	476 <atcab_nonce_base+0x22>
        if ((status = atca_execute_command(&packet, _gDevice)) != ATCA_SUCCESS)
     494:	4b11      	ldr	r3, [pc, #68]	; (4dc <atcab_nonce_base+0x88>)
     496:	6819      	ldr	r1, [r3, #0]
     498:	4668      	mov	r0, sp
     49a:	4b13      	ldr	r3, [pc, #76]	; (4e8 <atcab_nonce_base+0x94>)
     49c:	4798      	blx	r3
     49e:	1e04      	subs	r4, r0, #0
     4a0:	d1e9      	bne.n	476 <atcab_nonce_base+0x22>
        if ((rand_out != NULL) && (packet.data[ATCA_COUNT_IDX] >= 35))
     4a2:	2d00      	cmp	r5, #0
     4a4:	d0e7      	beq.n	476 <atcab_nonce_base+0x22>
     4a6:	466b      	mov	r3, sp
     4a8:	799b      	ldrb	r3, [r3, #6]
     4aa:	2b22      	cmp	r3, #34	; 0x22
     4ac:	d9e3      	bls.n	476 <atcab_nonce_base+0x22>
            memcpy(&rand_out[0], &packet.data[ATCA_RSP_DATA_IDX], 32);
     4ae:	2220      	movs	r2, #32
     4b0:	466b      	mov	r3, sp
     4b2:	1dd9      	adds	r1, r3, #7
     4b4:	0028      	movs	r0, r5
     4b6:	4b0a      	ldr	r3, [pc, #40]	; (4e0 <atcab_nonce_base+0x8c>)
     4b8:	4798      	blx	r3
     4ba:	e7dc      	b.n	476 <atcab_nonce_base+0x22>
            if ((mode & NONCE_MODE_INPUT_LEN_MASK) == NONCE_MODE_INPUT_LEN_64)
     4bc:	0683      	lsls	r3, r0, #26
     4be:	d506      	bpl.n	4ce <atcab_nonce_base+0x7a>
                memcpy(packet.data, num_in, 64);
     4c0:	2240      	movs	r2, #64	; 0x40
     4c2:	0031      	movs	r1, r6
     4c4:	466b      	mov	r3, sp
     4c6:	1d98      	adds	r0, r3, #6
     4c8:	4b05      	ldr	r3, [pc, #20]	; (4e0 <atcab_nonce_base+0x8c>)
     4ca:	4798      	blx	r3
     4cc:	e7dc      	b.n	488 <atcab_nonce_base+0x34>
                memcpy(packet.data, num_in, 32);
     4ce:	2220      	movs	r2, #32
     4d0:	0031      	movs	r1, r6
     4d2:	466b      	mov	r3, sp
     4d4:	1d98      	adds	r0, r3, #6
     4d6:	4b02      	ldr	r3, [pc, #8]	; (4e0 <atcab_nonce_base+0x8c>)
     4d8:	4798      	blx	r3
     4da:	e7d5      	b.n	488 <atcab_nonce_base+0x34>
     4dc:	200009e4 	.word	0x200009e4
     4e0:	00019da5 	.word	0x00019da5
     4e4:	00000a51 	.word	0x00000a51
     4e8:	00000cf5 	.word	0x00000cf5

000004ec <atcab_nonce_rand>:
 *                        here. Can be NULL if not needed.
 *
 *  \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS atcab_nonce_rand(const uint8_t *num_in, uint8_t* rand_out)
{
     4ec:	b510      	push	{r4, lr}
     4ee:	0002      	movs	r2, r0
     4f0:	000b      	movs	r3, r1
    return atcab_nonce_base(NONCE_MODE_SEED_UPDATE, 0, num_in, rand_out);
     4f2:	2100      	movs	r1, #0
     4f4:	2000      	movs	r0, #0
     4f6:	4c01      	ldr	r4, [pc, #4]	; (4fc <atcab_nonce_rand+0x10>)
     4f8:	47a0      	blx	r4
}
     4fa:	bd10      	pop	{r4, pc}
     4fc:	00000455 	.word	0x00000455

00000500 <atcab_random>:
 * \param[out] rand_out  32 bytes of random data is returned here.
 *
 * \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS atcab_random(uint8_t *rand_out)
{
     500:	b530      	push	{r4, r5, lr}
     502:	b0b3      	sub	sp, #204	; 0xcc
     504:	0005      	movs	r5, r0
    ATCAPacket packet;
    ATCACommand ca_cmd = _gDevice->mCommands;
     506:	4b12      	ldr	r3, [pc, #72]	; (550 <atcab_random+0x50>)
     508:	681b      	ldr	r3, [r3, #0]
     50a:	6818      	ldr	r0, [r3, #0]
    ATCA_STATUS status = ATCA_GEN_FAIL;

    do
    {
        // build an random command
        packet.param1 = RANDOM_SEED_UPDATE;
     50c:	2300      	movs	r3, #0
     50e:	466a      	mov	r2, sp
     510:	70d3      	strb	r3, [r2, #3]
        packet.param2 = 0x0000;
     512:	8093      	strh	r3, [r2, #4]

        if ((status = atRandom(ca_cmd, &packet)) != ATCA_SUCCESS)
     514:	4669      	mov	r1, sp
     516:	4b0f      	ldr	r3, [pc, #60]	; (554 <atcab_random+0x54>)
     518:	4798      	blx	r3
     51a:	1e04      	subs	r4, r0, #0
     51c:	d002      	beq.n	524 <atcab_random+0x24>
    }
    while (0);


    return status;
}
     51e:	0020      	movs	r0, r4
     520:	b033      	add	sp, #204	; 0xcc
     522:	bd30      	pop	{r4, r5, pc}
        if ((status = atca_execute_command(&packet, _gDevice)) != ATCA_SUCCESS)
     524:	4b0a      	ldr	r3, [pc, #40]	; (550 <atcab_random+0x50>)
     526:	6819      	ldr	r1, [r3, #0]
     528:	4668      	mov	r0, sp
     52a:	4b0b      	ldr	r3, [pc, #44]	; (558 <atcab_random+0x58>)
     52c:	4798      	blx	r3
     52e:	1e04      	subs	r4, r0, #0
     530:	d1f5      	bne.n	51e <atcab_random+0x1e>
        if (packet.data[ATCA_COUNT_IDX] != RANDOM_RSP_SIZE)
     532:	466b      	mov	r3, sp
     534:	799b      	ldrb	r3, [r3, #6]
     536:	2b23      	cmp	r3, #35	; 0x23
     538:	d001      	beq.n	53e <atcab_random+0x3e>
            status = ATCA_RX_FAIL;
     53a:	24e6      	movs	r4, #230	; 0xe6
     53c:	e7ef      	b.n	51e <atcab_random+0x1e>
        if (rand_out)
     53e:	2d00      	cmp	r5, #0
     540:	d0ed      	beq.n	51e <atcab_random+0x1e>
            memcpy(rand_out, &packet.data[ATCA_RSP_DATA_IDX], RANDOM_NUM_SIZE);
     542:	2220      	movs	r2, #32
     544:	466b      	mov	r3, sp
     546:	1dd9      	adds	r1, r3, #7
     548:	0028      	movs	r0, r5
     54a:	4b04      	ldr	r3, [pc, #16]	; (55c <atcab_random+0x5c>)
     54c:	4798      	blx	r3
     54e:	e7e6      	b.n	51e <atcab_random+0x1e>
     550:	200009e4 	.word	0x200009e4
     554:	00000a8d 	.word	0x00000a8d
     558:	00000cf5 	.word	0x00000cf5
     55c:	00019da5 	.word	0x00019da5

00000560 <atcab_read_zone>:
 *  \param[in]  len     Length of the data to be read. Must be either 4 or 32.
 *
 *  returns ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS atcab_read_zone(uint8_t zone, uint16_t slot, uint8_t block, uint8_t offset, uint8_t *data, uint8_t len)
{
     560:	b5f0      	push	{r4, r5, r6, r7, lr}
     562:	b0b9      	sub	sp, #228	; 0xe4
     564:	9003      	str	r0, [sp, #12]
     566:	a83e      	add	r0, sp, #248	; 0xf8
     568:	c880      	ldmia	r0!, {r7}
     56a:	7805      	ldrb	r5, [r0, #0]
    uint16_t addr;

    do
    {
        // Check the input parameters
        if (data == NULL)
     56c:	2f00      	cmp	r7, #0
     56e:	d00a      	beq.n	586 <atcab_read_zone+0x26>
    ATCACommand ca_cmd = _gDevice->mCommands;
     570:	4822      	ldr	r0, [pc, #136]	; (5fc <atcab_read_zone+0x9c>)
     572:	6800      	ldr	r0, [r0, #0]
     574:	6806      	ldr	r6, [r0, #0]
        {
            return ATCA_BAD_PARAM;
        }

        if (len != 4 && len != 32)
     576:	2d04      	cmp	r5, #4
     578:	d016      	beq.n	5a8 <atcab_read_zone+0x48>
        {
            return ATCA_BAD_PARAM;
     57a:	24e2      	movs	r4, #226	; 0xe2
        if (len != 4 && len != 32)
     57c:	2d20      	cmp	r5, #32
     57e:	d004      	beq.n	58a <atcab_read_zone+0x2a>
        memcpy(data, &packet.data[1], len);
    }
    while (0);

    return status;
}
     580:	0020      	movs	r0, r4
     582:	b039      	add	sp, #228	; 0xe4
     584:	bdf0      	pop	{r4, r5, r6, r7, pc}
            return ATCA_BAD_PARAM;
     586:	24e2      	movs	r4, #226	; 0xe2
     588:	e7fa      	b.n	580 <atcab_read_zone+0x20>
        if ((status = atcab_get_addr(zone, slot, block, offset, &addr)) != ATCA_SUCCESS)
     58a:	200e      	movs	r0, #14
     58c:	ac02      	add	r4, sp, #8
     58e:	46a4      	mov	ip, r4
     590:	4460      	add	r0, ip
     592:	9000      	str	r0, [sp, #0]
     594:	9803      	ldr	r0, [sp, #12]
     596:	4c1a      	ldr	r4, [pc, #104]	; (600 <atcab_read_zone+0xa0>)
     598:	47a0      	blx	r4
     59a:	1e04      	subs	r4, r0, #0
     59c:	d1f0      	bne.n	580 <atcab_read_zone+0x20>
            zone = zone | ATCA_ZONE_READWRITE_32;
     59e:	2380      	movs	r3, #128	; 0x80
     5a0:	9a03      	ldr	r2, [sp, #12]
     5a2:	431a      	orrs	r2, r3
     5a4:	9203      	str	r2, [sp, #12]
     5a6:	e009      	b.n	5bc <atcab_read_zone+0x5c>
        if ((status = atcab_get_addr(zone, slot, block, offset, &addr)) != ATCA_SUCCESS)
     5a8:	200e      	movs	r0, #14
     5aa:	ac02      	add	r4, sp, #8
     5ac:	46a4      	mov	ip, r4
     5ae:	4460      	add	r0, ip
     5b0:	9000      	str	r0, [sp, #0]
     5b2:	9803      	ldr	r0, [sp, #12]
     5b4:	4c12      	ldr	r4, [pc, #72]	; (600 <atcab_read_zone+0xa0>)
     5b6:	47a0      	blx	r4
     5b8:	1e04      	subs	r4, r0, #0
     5ba:	d1e1      	bne.n	580 <atcab_read_zone+0x20>
        packet.param1 = zone;
     5bc:	a906      	add	r1, sp, #24
     5be:	466b      	mov	r3, sp
     5c0:	7b1b      	ldrb	r3, [r3, #12]
     5c2:	70cb      	strb	r3, [r1, #3]
        packet.param2 = addr;
     5c4:	230e      	movs	r3, #14
     5c6:	aa02      	add	r2, sp, #8
     5c8:	4694      	mov	ip, r2
     5ca:	4463      	add	r3, ip
     5cc:	881b      	ldrh	r3, [r3, #0]
     5ce:	808b      	strh	r3, [r1, #4]
        if ((status = atRead(ca_cmd, &packet)) != ATCA_SUCCESS)
     5d0:	0030      	movs	r0, r6
     5d2:	4b0c      	ldr	r3, [pc, #48]	; (604 <atcab_read_zone+0xa4>)
     5d4:	4798      	blx	r3
     5d6:	1e04      	subs	r4, r0, #0
     5d8:	d1d2      	bne.n	580 <atcab_read_zone+0x20>
        if ((status = atca_execute_command(&packet, _gDevice)) != ATCA_SUCCESS)
     5da:	4b08      	ldr	r3, [pc, #32]	; (5fc <atcab_read_zone+0x9c>)
     5dc:	6819      	ldr	r1, [r3, #0]
     5de:	a806      	add	r0, sp, #24
     5e0:	4b09      	ldr	r3, [pc, #36]	; (608 <atcab_read_zone+0xa8>)
     5e2:	4798      	blx	r3
     5e4:	1e04      	subs	r4, r0, #0
     5e6:	d1cb      	bne.n	580 <atcab_read_zone+0x20>
        memcpy(data, &packet.data[1], len);
     5e8:	002a      	movs	r2, r5
     5ea:	2117      	movs	r1, #23
     5ec:	ab02      	add	r3, sp, #8
     5ee:	469c      	mov	ip, r3
     5f0:	4461      	add	r1, ip
     5f2:	0038      	movs	r0, r7
     5f4:	4b05      	ldr	r3, [pc, #20]	; (60c <atcab_read_zone+0xac>)
     5f6:	4798      	blx	r3
     5f8:	e7c2      	b.n	580 <atcab_read_zone+0x20>
     5fa:	46c0      	nop			; (mov r8, r8)
     5fc:	200009e4 	.word	0x200009e4
     600:	00000191 	.word	0x00000191
     604:	00000aa5 	.word	0x00000aa5
     608:	00000cf5 	.word	0x00000cf5
     60c:	00019da5 	.word	0x00019da5

00000610 <atcab_read_serial_number>:
 *  \param[out] serial_number  9 byte serial number is returned here.
 *
 *  \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS atcab_read_serial_number(uint8_t* serial_number)
{
     610:	b570      	push	{r4, r5, r6, lr}
     612:	b08a      	sub	sp, #40	; 0x28
     614:	0005      	movs	r5, r0
    ATCA_STATUS status = ATCA_GEN_FAIL;
    uint8_t read_buf[ATCA_BLOCK_SIZE];

    if (!serial_number)
    {
        return ATCA_BAD_PARAM;
     616:	24e2      	movs	r4, #226	; 0xe2
    if (!serial_number)
     618:	2800      	cmp	r0, #0
     61a:	d00b      	beq.n	634 <atcab_read_serial_number+0x24>
    }

    do
    {
        if ((status = atcab_read_zone(ATCA_ZONE_CONFIG, 0, 0, 0, read_buf, ATCA_BLOCK_SIZE)) != ATCA_SUCCESS)
     61c:	2320      	movs	r3, #32
     61e:	9301      	str	r3, [sp, #4]
     620:	ab02      	add	r3, sp, #8
     622:	9300      	str	r3, [sp, #0]
     624:	2300      	movs	r3, #0
     626:	2200      	movs	r2, #0
     628:	2100      	movs	r1, #0
     62a:	2000      	movs	r0, #0
     62c:	4c08      	ldr	r4, [pc, #32]	; (650 <atcab_read_serial_number+0x40>)
     62e:	47a0      	blx	r4
     630:	1e04      	subs	r4, r0, #0
     632:	d002      	beq.n	63a <atcab_read_serial_number+0x2a>
        memcpy(&serial_number[4], &read_buf[8], 5);
    }
    while (0);

    return status;
}
     634:	0020      	movs	r0, r4
     636:	b00a      	add	sp, #40	; 0x28
     638:	bd70      	pop	{r4, r5, r6, pc}
        memcpy(&serial_number[0], &read_buf[0], 4);
     63a:	2204      	movs	r2, #4
     63c:	a902      	add	r1, sp, #8
     63e:	0028      	movs	r0, r5
     640:	4e04      	ldr	r6, [pc, #16]	; (654 <atcab_read_serial_number+0x44>)
     642:	47b0      	blx	r6
        memcpy(&serial_number[4], &read_buf[8], 5);
     644:	1d28      	adds	r0, r5, #4
     646:	2205      	movs	r2, #5
     648:	a904      	add	r1, sp, #16
     64a:	47b0      	blx	r6
     64c:	e7f2      	b.n	634 <atcab_read_serial_number+0x24>
     64e:	46c0      	nop			; (mov r8, r8)
     650:	00000561 	.word	0x00000561
     654:	00019da5 	.word	0x00019da5

00000658 <atcab_read_enc>:
 *  \param[in]  enc_key_id  KeyID of the ReadKey being used.
 *
 *  returns ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS atcab_read_enc(uint16_t key_id, uint8_t block, uint8_t *data, const uint8_t* enc_key, const uint16_t enc_key_id)
{
     658:	b5f0      	push	{r4, r5, r6, r7, lr}
     65a:	46d6      	mov	lr, sl
     65c:	b500      	push	{lr}
     65e:	b0b6      	sub	sp, #216	; 0xd8
     660:	9002      	str	r0, [sp, #8]
     662:	9103      	str	r1, [sp, #12]
     664:	0015      	movs	r5, r2
     666:	001c      	movs	r4, r3
     668:	ab3c      	add	r3, sp, #240	; 0xf0
     66a:	881e      	ldrh	r6, [r3, #0]
    uint8_t zone = ATCA_ZONE_DATA | ATCA_ZONE_READWRITE_32;
    atca_nonce_in_out_t nonce_params;
    atca_gen_dig_in_out_t gen_dig_param;
    atca_temp_key_t temp_key;
    uint8_t serial_num[32];
    uint8_t num_in[NONCE_NUMIN_SIZE] = { 0 };
     66c:	2214      	movs	r2, #20
     66e:	2100      	movs	r1, #0
     670:	a80e      	add	r0, sp, #56	; 0x38
     672:	4f3b      	ldr	r7, [pc, #236]	; (760 <atcab_read_enc+0x108>)
     674:	47b8      	blx	r7
    uint8_t rand_out[RANDOM_NUM_SIZE] = { 0 };
     676:	2220      	movs	r2, #32
     678:	2100      	movs	r1, #0
     67a:	a806      	add	r0, sp, #24
     67c:	47b8      	blx	r7
    uint8_t other_data[4] = { 0 };
     67e:	2300      	movs	r3, #0
     680:	9305      	str	r3, [sp, #20]
    int i = 0;

    do
    {
        // Verify inputs parameters
        if (data == NULL || enc_key == NULL)
     682:	2d00      	cmp	r5, #0
     684:	d067      	beq.n	756 <atcab_read_enc+0xfe>
        {
            status = ATCA_BAD_PARAM;
     686:	20e2      	movs	r0, #226	; 0xe2
        if (data == NULL || enc_key == NULL)
     688:	2c00      	cmp	r4, #0
     68a:	d065      	beq.n	758 <atcab_read_enc+0x100>
            break;
        }

        // Read the device SN
        if ((status = atcab_read_zone(ATCA_ZONE_CONFIG, 0, 0, 0, serial_num, 32)) != ATCA_SUCCESS)
     68c:	3320      	adds	r3, #32
     68e:	9301      	str	r3, [sp, #4]
     690:	ab13      	add	r3, sp, #76	; 0x4c
     692:	9300      	str	r3, [sp, #0]
     694:	2300      	movs	r3, #0
     696:	2200      	movs	r2, #0
     698:	2100      	movs	r1, #0
     69a:	2000      	movs	r0, #0
     69c:	4f31      	ldr	r7, [pc, #196]	; (764 <atcab_read_enc+0x10c>)
     69e:	47b8      	blx	r7
     6a0:	2800      	cmp	r0, #0
     6a2:	d159      	bne.n	758 <atcab_read_enc+0x100>
        {
            break;
        }
        // Make the SN continuous by moving SN[4:8] right after SN[0:3]
        memmove(&serial_num[4], &serial_num[8], 5);
     6a4:	2205      	movs	r2, #5
     6a6:	a915      	add	r1, sp, #84	; 0x54
     6a8:	a814      	add	r0, sp, #80	; 0x50
     6aa:	4b2f      	ldr	r3, [pc, #188]	; (768 <atcab_read_enc+0x110>)
     6ac:	4798      	blx	r3

        // Send the random Nonce command
        if ((status = atcab_nonce_rand(num_in, rand_out)) != ATCA_SUCCESS)
     6ae:	a906      	add	r1, sp, #24
     6b0:	a80e      	add	r0, sp, #56	; 0x38
     6b2:	4b2e      	ldr	r3, [pc, #184]	; (76c <atcab_read_enc+0x114>)
     6b4:	4798      	blx	r3
     6b6:	2800      	cmp	r0, #0
     6b8:	d14e      	bne.n	758 <atcab_read_enc+0x100>
        {
            BREAK(status, "Nonce failed");
        }

        // Calculate Tempkey
        memset(&temp_key, 0, sizeof(temp_key));
     6ba:	af1b      	add	r7, sp, #108	; 0x6c
     6bc:	2244      	movs	r2, #68	; 0x44
     6be:	2100      	movs	r1, #0
     6c0:	0038      	movs	r0, r7
     6c2:	4b27      	ldr	r3, [pc, #156]	; (760 <atcab_read_enc+0x108>)
     6c4:	469a      	mov	sl, r3
     6c6:	4798      	blx	r3
        memset(&nonce_params, 0, sizeof(nonce_params));
     6c8:	2210      	movs	r2, #16
     6ca:	2100      	movs	r1, #0
     6cc:	a832      	add	r0, sp, #200	; 0xc8
     6ce:	47d0      	blx	sl
        nonce_params.mode = NONCE_MODE_SEED_UPDATE;
        nonce_params.zero = 0;
        nonce_params.num_in = (uint8_t*)&num_in;
     6d0:	ab0e      	add	r3, sp, #56	; 0x38
     6d2:	9333      	str	r3, [sp, #204]	; 0xcc
        nonce_params.rand_out = (uint8_t*)&rand_out;
     6d4:	ab06      	add	r3, sp, #24
     6d6:	9334      	str	r3, [sp, #208]	; 0xd0
        nonce_params.temp_key = &temp_key;
     6d8:	9735      	str	r7, [sp, #212]	; 0xd4
        if ((status = atcah_nonce(&nonce_params)) != ATCA_SUCCESS)
     6da:	a832      	add	r0, sp, #200	; 0xc8
     6dc:	4b24      	ldr	r3, [pc, #144]	; (770 <atcab_read_enc+0x118>)
     6de:	4798      	blx	r3
     6e0:	2800      	cmp	r0, #0
     6e2:	d139      	bne.n	758 <atcab_read_enc+0x100>
        {
            BREAK(status, "Calc TempKey failed");
        }

        // Supply OtherData so GenDig behavior is the same for keys with SlotConfig.NoMac set
        other_data[0] = ATCA_GENDIG;
     6e4:	aa05      	add	r2, sp, #20
     6e6:	2315      	movs	r3, #21
     6e8:	7013      	strb	r3, [r2, #0]
        other_data[1] = GENDIG_ZONE_DATA;
     6ea:	3b13      	subs	r3, #19
     6ec:	7053      	strb	r3, [r2, #1]
        other_data[2] = (uint8_t)(enc_key_id);
     6ee:	7096      	strb	r6, [r2, #2]
        other_data[3] = (uint8_t)(enc_key_id >> 8);
     6f0:	0a33      	lsrs	r3, r6, #8
     6f2:	70d3      	strb	r3, [r2, #3]

        // Send the GenDig command
        if ((status = atcab_gendig(GENDIG_ZONE_DATA, enc_key_id, other_data, sizeof(other_data))) != ATCA_SUCCESS)
     6f4:	2304      	movs	r3, #4
     6f6:	0031      	movs	r1, r6
     6f8:	3002      	adds	r0, #2
     6fa:	4f1e      	ldr	r7, [pc, #120]	; (774 <atcab_read_enc+0x11c>)
     6fc:	47b8      	blx	r7
     6fe:	2800      	cmp	r0, #0
     700:	d12a      	bne.n	758 <atcab_read_enc+0x100>
        }

        // Calculate Tempkey
        // NoMac bit isn't being considered here on purpose to remove having to read SlotConfig.
        // OtherData is built to get the same result regardless of the NoMac bit.
        memset(&gen_dig_param, 0, sizeof(gen_dig_param));
     702:	af2c      	add	r7, sp, #176	; 0xb0
     704:	2218      	movs	r2, #24
     706:	2100      	movs	r1, #0
     708:	0038      	movs	r0, r7
     70a:	4b15      	ldr	r3, [pc, #84]	; (760 <atcab_read_enc+0x108>)
     70c:	4798      	blx	r3
        gen_dig_param.key_id = enc_key_id;
     70e:	807e      	strh	r6, [r7, #2]
        gen_dig_param.is_key_nomac = false;
        gen_dig_param.sn = serial_num;
     710:	ab13      	add	r3, sp, #76	; 0x4c
     712:	60bb      	str	r3, [r7, #8]
        gen_dig_param.stored_value = enc_key;
     714:	60fc      	str	r4, [r7, #12]
        gen_dig_param.zone = GENDIG_ZONE_DATA;
     716:	2302      	movs	r3, #2
     718:	703b      	strb	r3, [r7, #0]
        gen_dig_param.other_data = other_data;
     71a:	ab05      	add	r3, sp, #20
     71c:	613b      	str	r3, [r7, #16]
        gen_dig_param.temp_key = &temp_key;
     71e:	ab1b      	add	r3, sp, #108	; 0x6c
     720:	617b      	str	r3, [r7, #20]
        if ((status = atcah_gen_dig(&gen_dig_param)) != ATCA_SUCCESS)
     722:	0038      	movs	r0, r7
     724:	4b14      	ldr	r3, [pc, #80]	; (778 <atcab_read_enc+0x120>)
     726:	4798      	blx	r3
     728:	2800      	cmp	r0, #0
     72a:	d115      	bne.n	758 <atcab_read_enc+0x100>
        {
            BREAK(status, "");
        }

        // Read Encrypted
        if ((status = atcab_read_zone(zone, key_id, block, 0, data, ATCA_BLOCK_SIZE)) != ATCA_SUCCESS)
     72c:	2320      	movs	r3, #32
     72e:	9301      	str	r3, [sp, #4]
     730:	9500      	str	r5, [sp, #0]
     732:	2300      	movs	r3, #0
     734:	9a03      	ldr	r2, [sp, #12]
     736:	9902      	ldr	r1, [sp, #8]
     738:	3082      	adds	r0, #130	; 0x82
     73a:	4c0a      	ldr	r4, [pc, #40]	; (764 <atcab_read_enc+0x10c>)
     73c:	47a0      	blx	r4
     73e:	2800      	cmp	r0, #0
     740:	d10a      	bne.n	758 <atcab_read_enc+0x100>
     742:	2300      	movs	r3, #0
        }

        // Decrypt
        for (i = 0; i < ATCA_BLOCK_SIZE; i++)
        {
            data[i] = data[i] ^ temp_key.value[i];
     744:	ac1b      	add	r4, sp, #108	; 0x6c
     746:	5cea      	ldrb	r2, [r5, r3]
     748:	5d19      	ldrb	r1, [r3, r4]
     74a:	404a      	eors	r2, r1
     74c:	54ea      	strb	r2, [r5, r3]
        for (i = 0; i < ATCA_BLOCK_SIZE; i++)
     74e:	3301      	adds	r3, #1
     750:	2b20      	cmp	r3, #32
     752:	d1f8      	bne.n	746 <atcab_read_enc+0xee>
     754:	e000      	b.n	758 <atcab_read_enc+0x100>
            status = ATCA_BAD_PARAM;
     756:	20e2      	movs	r0, #226	; 0xe2
    }
    while (0);


    return status;
}
     758:	b036      	add	sp, #216	; 0xd8
     75a:	bc04      	pop	{r2}
     75c:	4692      	mov	sl, r2
     75e:	bdf0      	pop	{r4, r5, r6, r7, pc}
     760:	00019ec9 	.word	0x00019ec9
     764:	00000561 	.word	0x00000561
     768:	00019e29 	.word	0x00019e29
     76c:	000004ed 	.word	0x000004ed
     770:	0000197d 	.word	0x0000197d
     774:	000002fd 	.word	0x000002fd
     778:	00001a45 	.word	0x00001a45

0000077c <atcab_read_bytes_zone>:
 *  \param[in]  length  Number of bytes to read starting from the offset.
 *
 *  \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS atcab_read_bytes_zone(uint8_t zone, uint16_t slot, size_t offset, uint8_t *data, size_t length)
{
     77c:	b5f0      	push	{r4, r5, r6, r7, lr}
     77e:	46de      	mov	lr, fp
     780:	4657      	mov	r7, sl
     782:	464e      	mov	r6, r9
     784:	4645      	mov	r5, r8
     786:	b5e0      	push	{r5, r6, r7, lr}
     788:	b091      	sub	sp, #68	; 0x44
     78a:	0005      	movs	r5, r0
     78c:	9102      	str	r1, [sp, #8]
     78e:	0017      	movs	r7, r2
     790:	9303      	str	r3, [sp, #12]
    ATCA_STATUS status = ATCA_GEN_FAIL;
    size_t zone_size = 0;
     792:	2300      	movs	r3, #0
     794:	930f      	str	r3, [sp, #60]	; 0x3c
    size_t copy_length = 0;
    size_t read_offset = 0;

    if (zone != ATCA_ZONE_CONFIG && zone != ATCA_ZONE_OTP && zone != ATCA_ZONE_DATA)
    {
        return ATCA_BAD_PARAM;
     796:	24e2      	movs	r4, #226	; 0xe2
    if (zone != ATCA_ZONE_CONFIG && zone != ATCA_ZONE_OTP && zone != ATCA_ZONE_DATA)
     798:	2802      	cmp	r0, #2
     79a:	d907      	bls.n	7ac <atcab_read_bytes_zone+0x30>
        }
    }
    while (false);

    return status;
}
     79c:	0020      	movs	r0, r4
     79e:	b011      	add	sp, #68	; 0x44
     7a0:	bc3c      	pop	{r2, r3, r4, r5}
     7a2:	4690      	mov	r8, r2
     7a4:	4699      	mov	r9, r3
     7a6:	46a2      	mov	sl, r4
     7a8:	46ab      	mov	fp, r5
     7aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (zone == ATCA_ZONE_DATA && slot > 15)
     7ac:	2802      	cmp	r0, #2
     7ae:	d01f      	beq.n	7f0 <atcab_read_bytes_zone+0x74>
        return ATCA_SUCCESS;  // Always succeed reading 0 bytes
     7b0:	2400      	movs	r4, #0
    if (length == 0)
     7b2:	9b1a      	ldr	r3, [sp, #104]	; 0x68
     7b4:	2b00      	cmp	r3, #0
     7b6:	d0f1      	beq.n	79c <atcab_read_bytes_zone+0x20>
        return ATCA_BAD_PARAM;
     7b8:	34e2      	adds	r4, #226	; 0xe2
    if (data == NULL)
     7ba:	9b03      	ldr	r3, [sp, #12]
     7bc:	2b00      	cmp	r3, #0
     7be:	d0ed      	beq.n	79c <atcab_read_bytes_zone+0x20>
        status = atcab_get_zone_size(zone, slot, &zone_size);
     7c0:	aa0f      	add	r2, sp, #60	; 0x3c
     7c2:	9902      	ldr	r1, [sp, #8]
     7c4:	0028      	movs	r0, r5
     7c6:	4b2e      	ldr	r3, [pc, #184]	; (880 <atcab_read_bytes_zone+0x104>)
     7c8:	4798      	blx	r3
     7ca:	1e04      	subs	r4, r0, #0
        if (status != ATCA_SUCCESS)
     7cc:	d1e6      	bne.n	79c <atcab_read_bytes_zone+0x20>
        if (offset + length > zone_size)
     7ce:	9b1a      	ldr	r3, [sp, #104]	; 0x68
     7d0:	19db      	adds	r3, r3, r7
            return ATCA_BAD_PARAM; // Can't read past the end of a zone
     7d2:	34e2      	adds	r4, #226	; 0xe2
        if (offset + length > zone_size)
     7d4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
     7d6:	4293      	cmp	r3, r2
     7d8:	d8e0      	bhi.n	79c <atcab_read_bytes_zone+0x20>
        cur_block = offset / ATCA_BLOCK_SIZE;
     7da:	097b      	lsrs	r3, r7, #5
     7dc:	4698      	mov	r8, r3
     7de:	2320      	movs	r3, #32
     7e0:	469a      	mov	sl, r3
     7e2:	2300      	movs	r3, #0
     7e4:	2600      	movs	r6, #0
            memcpy(&data[data_idx], &read_buf[read_buf_idx], copy_length);
     7e6:	46a9      	mov	r9, r5
     7e8:	001d      	movs	r5, r3
     7ea:	9705      	str	r7, [sp, #20]
     7ec:	4657      	mov	r7, sl
     7ee:	e01e      	b.n	82e <atcab_read_bytes_zone+0xb2>
    if (zone == ATCA_ZONE_DATA && slot > 15)
     7f0:	290f      	cmp	r1, #15
     7f2:	d8d3      	bhi.n	79c <atcab_read_bytes_zone+0x20>
     7f4:	e7dc      	b.n	7b0 <atcab_read_bytes_zone+0x34>
            if (read_size == ATCA_BLOCK_SIZE && zone_size - cur_block * ATCA_BLOCK_SIZE < ATCA_BLOCK_SIZE)
     7f6:	4643      	mov	r3, r8
     7f8:	015b      	lsls	r3, r3, #5
     7fa:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
     7fc:	1ad3      	subs	r3, r2, r3
     7fe:	2b1f      	cmp	r3, #31
     800:	d817      	bhi.n	832 <atcab_read_bytes_zone+0xb6>
                cur_offset = ((data_idx + offset) / ATCA_WORD_SIZE) % (ATCA_BLOCK_SIZE / ATCA_WORD_SIZE);
     802:	9b05      	ldr	r3, [sp, #20]
     804:	199b      	adds	r3, r3, r6
     806:	089b      	lsrs	r3, r3, #2
     808:	2507      	movs	r5, #7
     80a:	401d      	ands	r5, r3
                read_size = ATCA_WORD_SIZE;
     80c:	3f1c      	subs	r7, #28
     80e:	e010      	b.n	832 <atcab_read_bytes_zone+0xb6>
            memcpy(&data[data_idx], &read_buf[read_buf_idx], copy_length);
     810:	9b03      	ldr	r3, [sp, #12]
     812:	1998      	adds	r0, r3, r6
     814:	ab07      	add	r3, sp, #28
     816:	469c      	mov	ip, r3
     818:	4461      	add	r1, ip
     81a:	0022      	movs	r2, r4
     81c:	4b19      	ldr	r3, [pc, #100]	; (884 <atcab_read_bytes_zone+0x108>)
     81e:	4798      	blx	r3
            data_idx += copy_length;
     820:	1936      	adds	r6, r6, r4
            if (read_size == ATCA_BLOCK_SIZE)
     822:	2f20      	cmp	r7, #32
     824:	d024      	beq.n	870 <atcab_read_bytes_zone+0xf4>
                cur_offset += 1;
     826:	3501      	adds	r5, #1
        while (data_idx < length)
     828:	9b1a      	ldr	r3, [sp, #104]	; 0x68
     82a:	42b3      	cmp	r3, r6
     82c:	d924      	bls.n	878 <atcab_read_bytes_zone+0xfc>
            if (read_size == ATCA_BLOCK_SIZE && zone_size - cur_block * ATCA_BLOCK_SIZE < ATCA_BLOCK_SIZE)
     82e:	2f20      	cmp	r7, #32
     830:	d0e1      	beq.n	7f6 <atcab_read_bytes_zone+0x7a>
            status = atcab_read_zone(
     832:	b2eb      	uxtb	r3, r5
     834:	4642      	mov	r2, r8
     836:	4669      	mov	r1, sp
     838:	740a      	strb	r2, [r1, #16]
     83a:	7c0a      	ldrb	r2, [r1, #16]
     83c:	9701      	str	r7, [sp, #4]
     83e:	a907      	add	r1, sp, #28
     840:	9100      	str	r1, [sp, #0]
     842:	9902      	ldr	r1, [sp, #8]
     844:	4648      	mov	r0, r9
     846:	4c10      	ldr	r4, [pc, #64]	; (888 <atcab_read_bytes_zone+0x10c>)
     848:	47a0      	blx	r4
     84a:	9004      	str	r0, [sp, #16]
            if (status != ATCA_SUCCESS)
     84c:	2800      	cmp	r0, #0
     84e:	d115      	bne.n	87c <atcab_read_bytes_zone+0x100>
            read_offset = cur_block * ATCA_BLOCK_SIZE + cur_offset * ATCA_WORD_SIZE;
     850:	4643      	mov	r3, r8
     852:	00db      	lsls	r3, r3, #3
     854:	195b      	adds	r3, r3, r5
     856:	009b      	lsls	r3, r3, #2
                read_buf_idx = 0;                     // Read data is within the requested chunk
     858:	2100      	movs	r1, #0
            if (read_offset < offset)
     85a:	9805      	ldr	r0, [sp, #20]
     85c:	4298      	cmp	r0, r3
     85e:	d900      	bls.n	862 <atcab_read_bytes_zone+0xe6>
                read_buf_idx = offset - read_offset;  // Read data starts before the requested chunk
     860:	1ac1      	subs	r1, r0, r3
            if (length - data_idx < read_size - read_buf_idx)
     862:	1a7b      	subs	r3, r7, r1
     864:	9a1a      	ldr	r2, [sp, #104]	; 0x68
     866:	1b94      	subs	r4, r2, r6
     868:	429c      	cmp	r4, r3
     86a:	d9d1      	bls.n	810 <atcab_read_bytes_zone+0x94>
     86c:	001c      	movs	r4, r3
     86e:	e7cf      	b.n	810 <atcab_read_bytes_zone+0x94>
                cur_block += 1;
     870:	2301      	movs	r3, #1
     872:	469c      	mov	ip, r3
     874:	44e0      	add	r8, ip
     876:	e7d7      	b.n	828 <atcab_read_bytes_zone+0xac>
     878:	9c04      	ldr	r4, [sp, #16]
     87a:	e78f      	b.n	79c <atcab_read_bytes_zone+0x20>
     87c:	9c04      	ldr	r4, [sp, #16]
     87e:	e78d      	b.n	79c <atcab_read_bytes_zone+0x20>
     880:	000001d5 	.word	0x000001d5
     884:	00019da5 	.word	0x00019da5
     888:	00000561 	.word	0x00000561

0000088c <atcab_write>:
 *                     if not required.
 *
 * \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS atcab_write(uint8_t zone, uint16_t address, const uint8_t *value, const uint8_t *mac)
{
     88c:	b570      	push	{r4, r5, r6, lr}
     88e:	b0b2      	sub	sp, #200	; 0xc8
     890:	0014      	movs	r4, r2
     892:	001d      	movs	r5, r3
    ATCAPacket packet;
    ATCACommand ca_cmd = _gDevice->mCommands;
    ATCA_STATUS status = ATCA_GEN_FAIL;

    if (value == NULL)
     894:	2a00      	cmp	r2, #0
     896:	d02e      	beq.n	8f6 <atcab_write+0x6a>
    ATCACommand ca_cmd = _gDevice->mCommands;
     898:	4b18      	ldr	r3, [pc, #96]	; (8fc <atcab_write+0x70>)
     89a:	681b      	ldr	r3, [r3, #0]
     89c:	681e      	ldr	r6, [r3, #0]
    }

    do
    {
        // Build the write command
        packet.param1 = zone;
     89e:	466b      	mov	r3, sp
     8a0:	70d8      	strb	r0, [r3, #3]
        packet.param2 = address;
     8a2:	8099      	strh	r1, [r3, #4]
        if (zone & ATCA_ZONE_READWRITE_32)
     8a4:	b240      	sxtb	r0, r0
     8a6:	2800      	cmp	r0, #0
     8a8:	db0e      	blt.n	8c8 <atcab_write+0x3c>
            }
        }
        else
        {
            // 4-byte write
            memcpy(packet.data, value, 4);
     8aa:	2204      	movs	r2, #4
     8ac:	0021      	movs	r1, r4
     8ae:	466b      	mov	r3, sp
     8b0:	1d98      	adds	r0, r3, #6
     8b2:	4b13      	ldr	r3, [pc, #76]	; (900 <atcab_write+0x74>)
     8b4:	4798      	blx	r3
        }

        if ((status = atWrite(ca_cmd, &packet, mac && (zone & ATCA_ZONE_READWRITE_32))) != ATCA_SUCCESS)
     8b6:	2200      	movs	r2, #0
     8b8:	4669      	mov	r1, sp
     8ba:	0030      	movs	r0, r6
     8bc:	4b11      	ldr	r3, [pc, #68]	; (904 <atcab_write+0x78>)
     8be:	4798      	blx	r3
     8c0:	2800      	cmp	r0, #0
     8c2:	d012      	beq.n	8ea <atcab_write+0x5e>

    }
    while (0);

    return status;
}
     8c4:	b032      	add	sp, #200	; 0xc8
     8c6:	bd70      	pop	{r4, r5, r6, pc}
            memcpy(packet.data, value, 32);
     8c8:	2220      	movs	r2, #32
     8ca:	0021      	movs	r1, r4
     8cc:	1d98      	adds	r0, r3, #6
     8ce:	4b0c      	ldr	r3, [pc, #48]	; (900 <atcab_write+0x74>)
     8d0:	4798      	blx	r3
            if (mac)
     8d2:	2d00      	cmp	r5, #0
     8d4:	d007      	beq.n	8e6 <atcab_write+0x5a>
                memcpy(&packet.data[32], mac, 32);
     8d6:	2220      	movs	r2, #32
     8d8:	0029      	movs	r1, r5
     8da:	2026      	movs	r0, #38	; 0x26
     8dc:	4468      	add	r0, sp
     8de:	4b08      	ldr	r3, [pc, #32]	; (900 <atcab_write+0x74>)
     8e0:	4798      	blx	r3
        if ((status = atWrite(ca_cmd, &packet, mac && (zone & ATCA_ZONE_READWRITE_32))) != ATCA_SUCCESS)
     8e2:	2201      	movs	r2, #1
     8e4:	e7e8      	b.n	8b8 <atcab_write+0x2c>
     8e6:	2200      	movs	r2, #0
     8e8:	e7e6      	b.n	8b8 <atcab_write+0x2c>
        if ((status = atca_execute_command(&packet, _gDevice)) != ATCA_SUCCESS)
     8ea:	4b04      	ldr	r3, [pc, #16]	; (8fc <atcab_write+0x70>)
     8ec:	6819      	ldr	r1, [r3, #0]
     8ee:	4668      	mov	r0, sp
     8f0:	4b05      	ldr	r3, [pc, #20]	; (908 <atcab_write+0x7c>)
     8f2:	4798      	blx	r3
     8f4:	e7e6      	b.n	8c4 <atcab_write+0x38>
        return ATCA_BAD_PARAM;
     8f6:	20e2      	movs	r0, #226	; 0xe2
     8f8:	e7e4      	b.n	8c4 <atcab_write+0x38>
     8fa:	46c0      	nop			; (mov r8, r8)
     8fc:	200009e4 	.word	0x200009e4
     900:	00019da5 	.word	0x00019da5
     904:	00000abd 	.word	0x00000abd
     908:	00000cf5 	.word	0x00000cf5

0000090c <atcab_write_zone>:
 *  \param[in] len     Number of bytes to be written. Must be either 4 or 32.
 *
 *  \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS atcab_write_zone(uint8_t zone, uint16_t slot, uint8_t block, uint8_t offset, const uint8_t *data, uint8_t len)
{
     90c:	b570      	push	{r4, r5, r6, lr}
     90e:	b084      	sub	sp, #16
     910:	0004      	movs	r4, r0
     912:	a808      	add	r0, sp, #32
     914:	c840      	ldmia	r0!, {r6}
     916:	7805      	ldrb	r5, [r0, #0]
    ATCA_STATUS status = ATCA_GEN_FAIL;
    uint16_t addr;

    // Check the input parameters
    if (data == NULL)
     918:	2e00      	cmp	r6, #0
     91a:	d006      	beq.n	92a <atcab_write_zone+0x1e>
    {
        return ATCA_BAD_PARAM;
    }

    if (len != 4 && len != 32)
     91c:	2d04      	cmp	r5, #4
     91e:	d011      	beq.n	944 <atcab_write_zone+0x38>
    {
        return ATCA_BAD_PARAM;
     920:	20e2      	movs	r0, #226	; 0xe2
    if (len != 4 && len != 32)
     922:	2d20      	cmp	r5, #32
     924:	d003      	beq.n	92e <atcab_write_zone+0x22>

    }
    while (0);

    return status;
}
     926:	b004      	add	sp, #16
     928:	bd70      	pop	{r4, r5, r6, pc}
        return ATCA_BAD_PARAM;
     92a:	20e2      	movs	r0, #226	; 0xe2
     92c:	e7fb      	b.n	926 <atcab_write_zone+0x1a>
        if ((status = atcab_get_addr(zone, slot, block, offset, &addr)) != ATCA_SUCCESS)
     92e:	200e      	movs	r0, #14
     930:	4468      	add	r0, sp
     932:	9000      	str	r0, [sp, #0]
     934:	0020      	movs	r0, r4
     936:	4d0c      	ldr	r5, [pc, #48]	; (968 <atcab_write_zone+0x5c>)
     938:	47a8      	blx	r5
     93a:	2800      	cmp	r0, #0
     93c:	d1f3      	bne.n	926 <atcab_write_zone+0x1a>
            zone = zone | ATCA_ZONE_READWRITE_32;
     93e:	2380      	movs	r3, #128	; 0x80
     940:	431c      	orrs	r4, r3
     942:	e007      	b.n	954 <atcab_write_zone+0x48>
        if ((status = atcab_get_addr(zone, slot, block, offset, &addr)) != ATCA_SUCCESS)
     944:	200e      	movs	r0, #14
     946:	4468      	add	r0, sp
     948:	9000      	str	r0, [sp, #0]
     94a:	0020      	movs	r0, r4
     94c:	4d06      	ldr	r5, [pc, #24]	; (968 <atcab_write_zone+0x5c>)
     94e:	47a8      	blx	r5
     950:	2800      	cmp	r0, #0
     952:	d1e8      	bne.n	926 <atcab_write_zone+0x1a>
        status = atcab_write(zone, addr, data, NULL);
     954:	230e      	movs	r3, #14
     956:	446b      	add	r3, sp
     958:	8819      	ldrh	r1, [r3, #0]
     95a:	2300      	movs	r3, #0
     95c:	0032      	movs	r2, r6
     95e:	0020      	movs	r0, r4
     960:	4c02      	ldr	r4, [pc, #8]	; (96c <atcab_write_zone+0x60>)
     962:	47a0      	blx	r4
     964:	e7df      	b.n	926 <atcab_write_zone+0x1a>
     966:	46c0      	nop			; (mov r8, r8)
     968:	00000191 	.word	0x00000191
     96c:	0000088d 	.word	0x0000088d

00000970 <initATCACommand>:
 * \param[in] ca_cmd       Pre-allocated command structure to initialize.
 * \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS initATCACommand(ATCADeviceType device_type, ATCACommand ca_cmd)
{
    if (ca_cmd == NULL)
     970:	2900      	cmp	r1, #0
     972:	d004      	beq.n	97e <initATCACommand+0xe>
    {
        return ATCA_BAD_PARAM;
    }

    ca_cmd->dt = device_type;
     974:	7008      	strb	r0, [r1, #0]
    ca_cmd->clock_divider = 0;
     976:	2300      	movs	r3, #0
     978:	704b      	strb	r3, [r1, #1]

    return ATCA_SUCCESS;
     97a:	2000      	movs	r0, #0
}
     97c:	4770      	bx	lr
        return ATCA_BAD_PARAM;
     97e:	20e2      	movs	r0, #226	; 0xe2
     980:	e7fc      	b.n	97c <initATCACommand+0xc>
	...

00000984 <deleteATCACommand>:
#ifndef ATCA_NO_HEAP
/** \brief ATCACommand destructor
 * \param[in] ca_cmd instance of a command object
 */
void deleteATCACommand(ATCACommand *ca_cmd)
{
     984:	b510      	push	{r4, lr}
     986:	1e04      	subs	r4, r0, #0
    if (ca_cmd == NULL)
     988:	d004      	beq.n	994 <deleteATCACommand+0x10>
    {
        return;
    }

    free(*ca_cmd);
     98a:	6800      	ldr	r0, [r0, #0]
     98c:	4b02      	ldr	r3, [pc, #8]	; (998 <deleteATCACommand+0x14>)
     98e:	4798      	blx	r3
    *ca_cmd = NULL;
     990:	2300      	movs	r3, #0
     992:	6023      	str	r3, [r4, #0]
}
     994:	bd10      	pop	{r4, pc}
     996:	46c0      	nop			; (mov r8, r8)
     998:	000197b1 	.word	0x000197b1

0000099c <atCRC>:
 * \param[in]  data    Pointer to the data over which to compute the CRC
 * \param[out] crc_le  Pointer to the place where the two-bytes of CRC will be
 *                     returned in little-endian byte order.
 */
void atCRC(size_t length, const uint8_t *data, uint8_t *crc_le)
{
     99c:	b5f0      	push	{r4, r5, r6, r7, lr}
     99e:	46d6      	mov	lr, sl
     9a0:	464f      	mov	r7, r9
     9a2:	4646      	mov	r6, r8
     9a4:	b5c0      	push	{r6, r7, lr}
     9a6:	4694      	mov	ip, r2
    uint16_t crc_register = 0;
    uint16_t polynom = 0x8005;
    uint8_t shift_register;
    uint8_t data_bit, crc_bit;

    for (counter = 0; counter < length; counter++)
     9a8:	2800      	cmp	r0, #0
     9aa:	d021      	beq.n	9f0 <atCRC+0x54>
     9ac:	4689      	mov	r9, r1
     9ae:	4688      	mov	r8, r1
     9b0:	4480      	add	r8, r0
     9b2:	2300      	movs	r3, #0
            data_bit = (data[counter] & shift_register) ? 1 : 0;
            crc_bit = crc_register >> 15;
            crc_register <<= 1;
            if (data_bit != crc_bit)
            {
                crc_register ^= polynom;
     9b4:	4813      	ldr	r0, [pc, #76]	; (a04 <atCRC+0x68>)
     9b6:	e016      	b.n	9e6 <atCRC+0x4a>
        for (shift_register = 0x01; shift_register > 0x00; shift_register <<= 1)
     9b8:	006d      	lsls	r5, r5, #1
     9ba:	b2ed      	uxtb	r5, r5
     9bc:	3e01      	subs	r6, #1
     9be:	2e00      	cmp	r6, #0
     9c0:	d00c      	beq.n	9dc <atCRC+0x40>
            crc_bit = crc_register >> 15;
     9c2:	0bdf      	lsrs	r7, r3, #15
            crc_register <<= 1;
     9c4:	005b      	lsls	r3, r3, #1
     9c6:	b29b      	uxth	r3, r3
            data_bit = (data[counter] & shift_register) ? 1 : 0;
     9c8:	002c      	movs	r4, r5
     9ca:	400c      	ands	r4, r1
     9cc:	1e62      	subs	r2, r4, #1
     9ce:	4194      	sbcs	r4, r2
            if (data_bit != crc_bit)
     9d0:	b2e4      	uxtb	r4, r4
     9d2:	42bc      	cmp	r4, r7
     9d4:	d0f0      	beq.n	9b8 <atCRC+0x1c>
                crc_register ^= polynom;
     9d6:	4043      	eors	r3, r0
     9d8:	b29b      	uxth	r3, r3
     9da:	e7ed      	b.n	9b8 <atCRC+0x1c>
     9dc:	2201      	movs	r2, #1
     9de:	4692      	mov	sl, r2
     9e0:	44d1      	add	r9, sl
    for (counter = 0; counter < length; counter++)
     9e2:	45c1      	cmp	r9, r8
     9e4:	d005      	beq.n	9f2 <atCRC+0x56>
            data_bit = (data[counter] & shift_register) ? 1 : 0;
     9e6:	464a      	mov	r2, r9
     9e8:	7811      	ldrb	r1, [r2, #0]
     9ea:	2608      	movs	r6, #8
     9ec:	2501      	movs	r5, #1
     9ee:	e7e8      	b.n	9c2 <atCRC+0x26>
    uint16_t crc_register = 0;
     9f0:	2300      	movs	r3, #0
            }
        }
    }
    crc_le[0] = (uint8_t)(crc_register & 0x00FF);
     9f2:	4662      	mov	r2, ip
     9f4:	7013      	strb	r3, [r2, #0]
    crc_le[1] = (uint8_t)(crc_register >> 8);
     9f6:	0a1b      	lsrs	r3, r3, #8
     9f8:	7053      	strb	r3, [r2, #1]
}
     9fa:	bc1c      	pop	{r2, r3, r4}
     9fc:	4690      	mov	r8, r2
     9fe:	4699      	mov	r9, r3
     a00:	46a2      	mov	sl, r4
     a02:	bdf0      	pop	{r4, r5, r6, r7, pc}
     a04:	ffff8005 	.word	0xffff8005

00000a08 <atCalcCrc>:
/** \brief This function calculates CRC and adds it to the correct offset in the packet data
 * \param[in] packet Packet to calculate CRC data for
 */

void atCalcCrc(ATCAPacket *packet)
{
     a08:	b510      	push	{r4, lr}
    uint8_t length, *crc;

    length = packet->txsize - ATCA_CRC_SIZE;
    // computer pointer to CRC in the packet
    crc = &(packet->txsize) + length;
     a0a:	1c41      	adds	r1, r0, #1
    length = packet->txsize - ATCA_CRC_SIZE;
     a0c:	7840      	ldrb	r0, [r0, #1]
     a0e:	3802      	subs	r0, #2
    crc = &(packet->txsize) + length;
     a10:	b2c0      	uxtb	r0, r0
     a12:	180a      	adds	r2, r1, r0

    // stuff CRC into packet
    atCRC(length, &(packet->txsize), crc);
     a14:	4b01      	ldr	r3, [pc, #4]	; (a1c <atCalcCrc+0x14>)
     a16:	4798      	blx	r3
}
     a18:	bd10      	pop	{r4, pc}
     a1a:	46c0      	nop			; (mov r8, r8)
     a1c:	0000099d 	.word	0x0000099d

00000a20 <atGenDig>:
{
     a20:	b510      	push	{r4, lr}
    packet->opcode = ATCA_GENDIG;
     a22:	2315      	movs	r3, #21
     a24:	708b      	strb	r3, [r1, #2]
    if (packet->param1 == GENDIG_ZONE_SHARED_NONCE) // shared nonce mode
     a26:	78cb      	ldrb	r3, [r1, #3]
     a28:	2b03      	cmp	r3, #3
     a2a:	d008      	beq.n	a3e <atGenDig+0x1e>
    else if (is_no_mac_key)
     a2c:	2a00      	cmp	r2, #0
     a2e:	d109      	bne.n	a44 <atGenDig+0x24>
        packet->txsize = GENDIG_COUNT;
     a30:	2307      	movs	r3, #7
     a32:	704b      	strb	r3, [r1, #1]
    atCalcCrc(packet);
     a34:	0008      	movs	r0, r1
     a36:	4b05      	ldr	r3, [pc, #20]	; (a4c <atGenDig+0x2c>)
     a38:	4798      	blx	r3
}
     a3a:	2000      	movs	r0, #0
     a3c:	bd10      	pop	{r4, pc}
        packet->txsize = GENDIG_COUNT + 32;
     a3e:	3324      	adds	r3, #36	; 0x24
     a40:	704b      	strb	r3, [r1, #1]
     a42:	e7f7      	b.n	a34 <atGenDig+0x14>
        packet->txsize = GENDIG_COUNT + 4;  // noMac keys use 4 bytes of OtherData in calculation
     a44:	230b      	movs	r3, #11
     a46:	704b      	strb	r3, [r1, #1]
     a48:	e7f4      	b.n	a34 <atGenDig+0x14>
     a4a:	46c0      	nop			; (mov r8, r8)
     a4c:	00000a09 	.word	0x00000a09

00000a50 <atNonce>:
{
     a50:	b510      	push	{r4, lr}
    uint8_t calc_mode = packet->param1 & NONCE_MODE_MASK;
     a52:	78ca      	ldrb	r2, [r1, #3]
     a54:	2303      	movs	r3, #3
     a56:	4013      	ands	r3, r2
    packet->opcode = ATCA_NONCE;
     a58:	2016      	movs	r0, #22
     a5a:	7088      	strb	r0, [r1, #2]
    if ((calc_mode == NONCE_MODE_SEED_UPDATE || calc_mode == NONCE_MODE_NO_SEED_UPDATE))
     a5c:	2b01      	cmp	r3, #1
     a5e:	d903      	bls.n	a68 <atNonce+0x18>
        return ATCA_BAD_PARAM;
     a60:	20e2      	movs	r0, #226	; 0xe2
    else if (calc_mode == NONCE_MODE_PASSTHROUGH)
     a62:	2b03      	cmp	r3, #3
     a64:	d007      	beq.n	a76 <atNonce+0x26>
}
     a66:	bd10      	pop	{r4, pc}
        packet->txsize = NONCE_COUNT_SHORT;
     a68:	231b      	movs	r3, #27
     a6a:	704b      	strb	r3, [r1, #1]
    atCalcCrc(packet);
     a6c:	0008      	movs	r0, r1
     a6e:	4b06      	ldr	r3, [pc, #24]	; (a88 <atNonce+0x38>)
     a70:	4798      	blx	r3
    return ATCA_SUCCESS;
     a72:	2000      	movs	r0, #0
     a74:	e7f7      	b.n	a66 <atNonce+0x16>
        if ((packet->param1 & NONCE_MODE_INPUT_LEN_MASK) == NONCE_MODE_INPUT_LEN_64)
     a76:	0693      	lsls	r3, r2, #26
     a78:	d502      	bpl.n	a80 <atNonce+0x30>
            packet->txsize = NONCE_COUNT_LONG_64;
     a7a:	2347      	movs	r3, #71	; 0x47
     a7c:	704b      	strb	r3, [r1, #1]
     a7e:	e7f5      	b.n	a6c <atNonce+0x1c>
            packet->txsize = NONCE_COUNT_LONG;
     a80:	2327      	movs	r3, #39	; 0x27
     a82:	704b      	strb	r3, [r1, #1]
     a84:	e7f2      	b.n	a6c <atNonce+0x1c>
     a86:	46c0      	nop			; (mov r8, r8)
     a88:	00000a09 	.word	0x00000a09

00000a8c <atRandom>:
{
     a8c:	b510      	push	{r4, lr}
    packet->opcode = ATCA_RANDOM;
     a8e:	231b      	movs	r3, #27
     a90:	708b      	strb	r3, [r1, #2]
    packet->txsize = RANDOM_COUNT;
     a92:	3b14      	subs	r3, #20
     a94:	704b      	strb	r3, [r1, #1]
    atCalcCrc(packet);
     a96:	0008      	movs	r0, r1
     a98:	4b01      	ldr	r3, [pc, #4]	; (aa0 <atRandom+0x14>)
     a9a:	4798      	blx	r3
}
     a9c:	2000      	movs	r0, #0
     a9e:	bd10      	pop	{r4, pc}
     aa0:	00000a09 	.word	0x00000a09

00000aa4 <atRead>:
{
     aa4:	b510      	push	{r4, lr}
    packet->opcode = ATCA_READ;
     aa6:	2302      	movs	r3, #2
     aa8:	708b      	strb	r3, [r1, #2]
    packet->txsize = READ_COUNT;
     aaa:	3305      	adds	r3, #5
     aac:	704b      	strb	r3, [r1, #1]
    atCalcCrc(packet);
     aae:	0008      	movs	r0, r1
     ab0:	4b01      	ldr	r3, [pc, #4]	; (ab8 <atRead+0x14>)
     ab2:	4798      	blx	r3
}
     ab4:	2000      	movs	r0, #0
     ab6:	bd10      	pop	{r4, pc}
     ab8:	00000a09 	.word	0x00000a09

00000abc <atWrite>:
{
     abc:	b510      	push	{r4, lr}
    packet->opcode = ATCA_WRITE;
     abe:	2312      	movs	r3, #18
     ac0:	708b      	strb	r3, [r1, #2]
    packet->txsize = 7;
     ac2:	3b0b      	subs	r3, #11
     ac4:	704b      	strb	r3, [r1, #1]
    if (packet->param1 & ATCA_ZONE_READWRITE_32)
     ac6:	78cb      	ldrb	r3, [r1, #3]
     ac8:	2b7f      	cmp	r3, #127	; 0x7f
     aca:	d80b      	bhi.n	ae4 <atWrite+0x28>
        packet->txsize += ATCA_WORD_SIZE;
     acc:	230b      	movs	r3, #11
     ace:	704b      	strb	r3, [r1, #1]
    if (has_mac)
     ad0:	2a00      	cmp	r2, #0
     ad2:	d002      	beq.n	ada <atWrite+0x1e>
        packet->txsize += WRITE_MAC_SIZE;
     ad4:	784b      	ldrb	r3, [r1, #1]
     ad6:	3320      	adds	r3, #32
     ad8:	704b      	strb	r3, [r1, #1]
    atCalcCrc(packet);
     ada:	0008      	movs	r0, r1
     adc:	4b03      	ldr	r3, [pc, #12]	; (aec <atWrite+0x30>)
     ade:	4798      	blx	r3
}
     ae0:	2000      	movs	r0, #0
     ae2:	bd10      	pop	{r4, pc}
        packet->txsize += ATCA_BLOCK_SIZE;
     ae4:	2327      	movs	r3, #39	; 0x27
     ae6:	704b      	strb	r3, [r1, #1]
     ae8:	e7f2      	b.n	ad0 <atWrite+0x14>
     aea:	46c0      	nop			; (mov r8, r8)
     aec:	00000a09 	.word	0x00000a09

00000af0 <atAES>:
{
     af0:	b510      	push	{r4, lr}
    packet->opcode = ATCA_AES;
     af2:	2351      	movs	r3, #81	; 0x51
     af4:	708b      	strb	r3, [r1, #2]
    packet->txsize = ATCA_CMD_SIZE_MIN;
     af6:	3b4a      	subs	r3, #74	; 0x4a
     af8:	704b      	strb	r3, [r1, #1]
    if ((packet->param1 & AES_MODE_OP_MASK) == AES_MODE_GFM)
     afa:	78ca      	ldrb	r2, [r1, #3]
     afc:	4013      	ands	r3, r2
     afe:	2b03      	cmp	r3, #3
     b00:	d006      	beq.n	b10 <atAES+0x20>
        packet->txsize += AES_DATA_SIZE;
     b02:	2317      	movs	r3, #23
     b04:	704b      	strb	r3, [r1, #1]
    atCalcCrc(packet);
     b06:	0008      	movs	r0, r1
     b08:	4b03      	ldr	r3, [pc, #12]	; (b18 <atAES+0x28>)
     b0a:	4798      	blx	r3
}
     b0c:	2000      	movs	r0, #0
     b0e:	bd10      	pop	{r4, pc}
        packet->txsize += ATCA_AES_GFM_SIZE;
     b10:	3324      	adds	r3, #36	; 0x24
     b12:	704b      	strb	r3, [r1, #1]
     b14:	e7f7      	b.n	b06 <atAES+0x16>
     b16:	46c0      	nop			; (mov r8, r8)
     b18:	00000a09 	.word	0x00000a09

00000b1c <atKDF>:
{
     b1c:	b510      	push	{r4, lr}
    packet->opcode = ATCA_KDF;
     b1e:	2356      	movs	r3, #86	; 0x56
     b20:	708b      	strb	r3, [r1, #2]
    if ((packet->param1 & KDF_MODE_ALG_MASK) == KDF_MODE_ALG_AES)
     b22:	78ca      	ldrb	r2, [r1, #3]
     b24:	330a      	adds	r3, #10
     b26:	4013      	ands	r3, r2
     b28:	2b20      	cmp	r3, #32
     b2a:	d007      	beq.n	b3c <atKDF+0x20>
        packet->txsize = ATCA_CMD_SIZE_MIN + KDF_DETAILS_SIZE + packet->data[3];
     b2c:	7a4b      	ldrb	r3, [r1, #9]
     b2e:	330b      	adds	r3, #11
     b30:	704b      	strb	r3, [r1, #1]
    atCalcCrc(packet);
     b32:	0008      	movs	r0, r1
     b34:	4b03      	ldr	r3, [pc, #12]	; (b44 <atKDF+0x28>)
     b36:	4798      	blx	r3
}
     b38:	2000      	movs	r0, #0
     b3a:	bd10      	pop	{r4, pc}
        packet->txsize = ATCA_CMD_SIZE_MIN + KDF_DETAILS_SIZE + AES_DATA_SIZE;
     b3c:	3b05      	subs	r3, #5
     b3e:	704b      	strb	r3, [r1, #1]
     b40:	e7f7      	b.n	b32 <atKDF+0x16>
     b42:	46c0      	nop			; (mov r8, r8)
     b44:	00000a09 	.word	0x00000a09

00000b48 <atCheckCrc>:
 * \param[in] response pointer to response
 * \return ATCA_SUCCESS on success, otherwise ATCA_RX_CRC_ERROR
 */

ATCA_STATUS atCheckCrc(const uint8_t *response)
{
     b48:	b570      	push	{r4, r5, r6, lr}
     b4a:	b082      	sub	sp, #8
     b4c:	0005      	movs	r5, r0
    uint8_t crc[ATCA_CRC_SIZE];
    uint8_t count = response[ATCA_COUNT_IDX];
     b4e:	7804      	ldrb	r4, [r0, #0]

    count -= ATCA_CRC_SIZE;
     b50:	3c02      	subs	r4, #2
    atCRC(count, response, crc);
     b52:	b2e4      	uxtb	r4, r4
     b54:	ae01      	add	r6, sp, #4
     b56:	0032      	movs	r2, r6
     b58:	0001      	movs	r1, r0
     b5a:	0020      	movs	r0, r4
     b5c:	4b08      	ldr	r3, [pc, #32]	; (b80 <atCheckCrc+0x38>)
     b5e:	4798      	blx	r3

    return (crc[0] == response[count] && crc[1] == response[count + 1]) ? ATCA_SUCCESS : ATCA_RX_CRC_ERROR;
     b60:	7832      	ldrb	r2, [r6, #0]
     b62:	5d2b      	ldrb	r3, [r5, r4]
     b64:	20e5      	movs	r0, #229	; 0xe5
     b66:	429a      	cmp	r2, r3
     b68:	d001      	beq.n	b6e <atCheckCrc+0x26>
}
     b6a:	b002      	add	sp, #8
     b6c:	bd70      	pop	{r4, r5, r6, pc}
    return (crc[0] == response[count] && crc[1] == response[count + 1]) ? ATCA_SUCCESS : ATCA_RX_CRC_ERROR;
     b6e:	192c      	adds	r4, r5, r4
     b70:	ab01      	add	r3, sp, #4
     b72:	785a      	ldrb	r2, [r3, #1]
     b74:	7863      	ldrb	r3, [r4, #1]
     b76:	429a      	cmp	r2, r3
     b78:	d1f7      	bne.n	b6a <atCheckCrc+0x22>
     b7a:	2000      	movs	r0, #0
     b7c:	e7f5      	b.n	b6a <atCheckCrc+0x22>
     b7e:	46c0      	nop			; (mov r8, r8)
     b80:	0000099d 	.word	0x0000099d

00000b84 <isATCAError>:
 * \return ATCA_SUCCESS on success, otherwise an error code.
 */

ATCA_STATUS isATCAError(uint8_t *data)
{
    if (data[0] == 0x04)        // error packets are always 4 bytes long
     b84:	7802      	ldrb	r2, [r0, #0]
            break;
        }
    }
    else
    {
        return ATCA_SUCCESS;
     b86:	2300      	movs	r3, #0
    if (data[0] == 0x04)        // error packets are always 4 bytes long
     b88:	2a04      	cmp	r2, #4
     b8a:	d001      	beq.n	b90 <isATCAError+0xc>
    }
}
     b8c:	0018      	movs	r0, r3
     b8e:	4770      	bx	lr
        switch (data[1])
     b90:	7842      	ldrb	r2, [r0, #1]
     b92:	2a07      	cmp	r2, #7
     b94:	d021      	beq.n	bda <isATCAError+0x56>
     b96:	b2d3      	uxtb	r3, r2
     b98:	2b07      	cmp	r3, #7
     b9a:	d80b      	bhi.n	bb4 <isATCAError+0x30>
     b9c:	2a01      	cmp	r2, #1
     b9e:	d01a      	beq.n	bd6 <isATCAError+0x52>
     ba0:	2a00      	cmp	r2, #0
     ba2:	d01e      	beq.n	be2 <isATCAError+0x5e>
            return ATCA_PARSE_ERROR;
     ba4:	23d2      	movs	r3, #210	; 0xd2
        switch (data[1])
     ba6:	2a03      	cmp	r2, #3
     ba8:	d0f0      	beq.n	b8c <isATCAError+0x8>
            return ATCA_STATUS_ECC;
     baa:	3304      	adds	r3, #4
        switch (data[1])
     bac:	2a05      	cmp	r2, #5
     bae:	d0ed      	beq.n	b8c <isATCAError+0x8>
            return ATCA_GEN_FAIL;
     bb0:	23e1      	movs	r3, #225	; 0xe1
     bb2:	e7eb      	b.n	b8c <isATCAError+0x8>
        switch (data[1])
     bb4:	2a0f      	cmp	r2, #15
     bb6:	d012      	beq.n	bde <isATCAError+0x5a>
     bb8:	b2d3      	uxtb	r3, r2
     bba:	2b0f      	cmp	r3, #15
     bbc:	d907      	bls.n	bce <isATCAError+0x4a>
            return ATCA_WAKE_SUCCESS;
     bbe:	23f3      	movs	r3, #243	; 0xf3
        switch (data[1])
     bc0:	2a11      	cmp	r2, #17
     bc2:	d0e3      	beq.n	b8c <isATCAError+0x8>
     bc4:	b2d2      	uxtb	r2, r2
            return ATCA_STATUS_CRC;
     bc6:	3b1f      	subs	r3, #31
        switch (data[1])
     bc8:	2aff      	cmp	r2, #255	; 0xff
     bca:	d0df      	beq.n	b8c <isATCAError+0x8>
     bcc:	e7f0      	b.n	bb0 <isATCAError+0x2c>
            return ATCA_HEALTH_TEST_ERROR;
     bce:	23fa      	movs	r3, #250	; 0xfa
        switch (data[1])
     bd0:	2a08      	cmp	r2, #8
     bd2:	d0db      	beq.n	b8c <isATCAError+0x8>
     bd4:	e7ec      	b.n	bb0 <isATCAError+0x2c>
            return ATCA_CHECKMAC_VERIFY_FAILED;
     bd6:	23d1      	movs	r3, #209	; 0xd1
     bd8:	e7d8      	b.n	b8c <isATCAError+0x8>
            return ATCA_STATUS_SELFTEST_ERROR;
     bda:	23d7      	movs	r3, #215	; 0xd7
     bdc:	e7d6      	b.n	b8c <isATCAError+0x8>
            return ATCA_EXECUTION_ERROR;
     bde:	23f4      	movs	r3, #244	; 0xf4
     be0:	e7d4      	b.n	b8c <isATCAError+0x8>
            return ATCA_SUCCESS;
     be2:	2300      	movs	r3, #0
     be4:	e7d2      	b.n	b8c <isATCAError+0x8>
	...

00000be8 <initATCADevice>:
 *                       mCommands and mIface members should point to existing
 *                       structures to be initialized.
 * \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS initATCADevice(ATCAIfaceCfg *cfg, ATCADevice ca_dev)
{
     be8:	b570      	push	{r4, r5, r6, lr}
     bea:	0005      	movs	r5, r0
     bec:	000c      	movs	r4, r1
    ATCA_STATUS status;

    if (cfg == NULL || ca_dev == NULL || ca_dev->mCommands == NULL || ca_dev->mIface == NULL)
     bee:	2800      	cmp	r0, #0
     bf0:	d012      	beq.n	c18 <initATCADevice+0x30>
     bf2:	2900      	cmp	r1, #0
     bf4:	d012      	beq.n	c1c <initATCADevice+0x34>
     bf6:	6809      	ldr	r1, [r1, #0]
     bf8:	2900      	cmp	r1, #0
     bfa:	d011      	beq.n	c20 <initATCADevice+0x38>
    {
        return ATCA_BAD_PARAM;
     bfc:	20e2      	movs	r0, #226	; 0xe2
    if (cfg == NULL || ca_dev == NULL || ca_dev->mCommands == NULL || ca_dev->mIface == NULL)
     bfe:	6863      	ldr	r3, [r4, #4]
     c00:	2b00      	cmp	r3, #0
     c02:	d00a      	beq.n	c1a <initATCADevice+0x32>
    }

    status = initATCACommand(cfg->devtype, ca_dev->mCommands);
     c04:	7868      	ldrb	r0, [r5, #1]
     c06:	4b07      	ldr	r3, [pc, #28]	; (c24 <initATCADevice+0x3c>)
     c08:	4798      	blx	r3
    if (status != ATCA_SUCCESS)
     c0a:	2800      	cmp	r0, #0
     c0c:	d105      	bne.n	c1a <initATCADevice+0x32>
    {
        return status;
    }

    status = initATCAIface(cfg, ca_dev->mIface);
     c0e:	6861      	ldr	r1, [r4, #4]
     c10:	0028      	movs	r0, r5
     c12:	4b05      	ldr	r3, [pc, #20]	; (c28 <initATCADevice+0x40>)
     c14:	4798      	blx	r3
     c16:	e000      	b.n	c1a <initATCADevice+0x32>
        return ATCA_BAD_PARAM;
     c18:	20e2      	movs	r0, #226	; 0xe2
    {
        return status;
    }

    return ATCA_SUCCESS;
}
     c1a:	bd70      	pop	{r4, r5, r6, pc}
        return ATCA_BAD_PARAM;
     c1c:	20e2      	movs	r0, #226	; 0xe2
     c1e:	e7fc      	b.n	c1a <initATCADevice+0x32>
     c20:	20e2      	movs	r0, #226	; 0xe2
     c22:	e7fa      	b.n	c1a <initATCADevice+0x32>
     c24:	00000971 	.word	0x00000971
     c28:	00000f99 	.word	0x00000f99

00000c2c <newATCADevice>:
{
     c2c:	b570      	push	{r4, r5, r6, lr}
     c2e:	1e05      	subs	r5, r0, #0
    if (cfg == NULL)
     c30:	d02d      	beq.n	c8e <newATCADevice+0x62>
    ca_dev = (ATCADevice)malloc(sizeof(*ca_dev));
     c32:	2008      	movs	r0, #8
     c34:	4b17      	ldr	r3, [pc, #92]	; (c94 <newATCADevice+0x68>)
     c36:	4798      	blx	r3
     c38:	1e04      	subs	r4, r0, #0
    if (ca_dev == NULL)
     c3a:	d011      	beq.n	c60 <newATCADevice+0x34>
    ca_dev->mCommands = (ATCACommand)malloc(sizeof(*(ca_dev->mCommands)));
     c3c:	2004      	movs	r0, #4
     c3e:	4b15      	ldr	r3, [pc, #84]	; (c94 <newATCADevice+0x68>)
     c40:	4798      	blx	r3
     c42:	1e06      	subs	r6, r0, #0
     c44:	6020      	str	r0, [r4, #0]
    if (ca_dev->mCommands == NULL)
     c46:	d00d      	beq.n	c64 <newATCADevice+0x38>
    ca_dev->mIface = (ATCAIface)malloc(sizeof(*(ca_dev->mIface)));
     c48:	2028      	movs	r0, #40	; 0x28
     c4a:	4b12      	ldr	r3, [pc, #72]	; (c94 <newATCADevice+0x68>)
     c4c:	4798      	blx	r3
     c4e:	6060      	str	r0, [r4, #4]
    if (ca_dev->mIface == NULL)
     c50:	2800      	cmp	r0, #0
     c52:	d00c      	beq.n	c6e <newATCADevice+0x42>
    status = initATCADevice(cfg, ca_dev);
     c54:	0021      	movs	r1, r4
     c56:	0028      	movs	r0, r5
     c58:	4b0f      	ldr	r3, [pc, #60]	; (c98 <newATCADevice+0x6c>)
     c5a:	4798      	blx	r3
    if (status != ATCA_SUCCESS)
     c5c:	2800      	cmp	r0, #0
     c5e:	d10d      	bne.n	c7c <newATCADevice+0x50>
}
     c60:	0020      	movs	r0, r4
     c62:	bd70      	pop	{r4, r5, r6, pc}
        free(ca_dev);
     c64:	0020      	movs	r0, r4
     c66:	4b0d      	ldr	r3, [pc, #52]	; (c9c <newATCADevice+0x70>)
     c68:	4798      	blx	r3
        return NULL;
     c6a:	2400      	movs	r4, #0
     c6c:	e7f8      	b.n	c60 <newATCADevice+0x34>
        free(ca_dev->mCommands);
     c6e:	0030      	movs	r0, r6
     c70:	4d0a      	ldr	r5, [pc, #40]	; (c9c <newATCADevice+0x70>)
     c72:	47a8      	blx	r5
        free(ca_dev);
     c74:	0020      	movs	r0, r4
     c76:	47a8      	blx	r5
        return NULL;
     c78:	2400      	movs	r4, #0
     c7a:	e7f1      	b.n	c60 <newATCADevice+0x34>
        free(ca_dev->mIface);
     c7c:	6860      	ldr	r0, [r4, #4]
     c7e:	4d07      	ldr	r5, [pc, #28]	; (c9c <newATCADevice+0x70>)
     c80:	47a8      	blx	r5
        free(ca_dev->mCommands);
     c82:	6820      	ldr	r0, [r4, #0]
     c84:	47a8      	blx	r5
        free(ca_dev);
     c86:	0020      	movs	r0, r4
     c88:	47a8      	blx	r5
        return NULL;
     c8a:	2400      	movs	r4, #0
     c8c:	e7e8      	b.n	c60 <newATCADevice+0x34>
        return NULL;
     c8e:	2400      	movs	r4, #0
     c90:	e7e6      	b.n	c60 <newATCADevice+0x34>
     c92:	46c0      	nop			; (mov r8, r8)
     c94:	0001979d 	.word	0x0001979d
     c98:	00000be9 	.word	0x00000be9
     c9c:	000197b1 	.word	0x000197b1

00000ca0 <releaseATCADevice>:
/** \brief Release any resources associated with the device.
 *  \param[in] ca_dev  Device to release
 *  \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS releaseATCADevice(ATCADevice ca_dev)
{
     ca0:	b510      	push	{r4, lr}
    if (ca_dev == NULL)
    {
        return ATCA_BAD_PARAM;
     ca2:	23e2      	movs	r3, #226	; 0xe2
    if (ca_dev == NULL)
     ca4:	2800      	cmp	r0, #0
     ca6:	d003      	beq.n	cb0 <releaseATCADevice+0x10>
    }

    return releaseATCAIface(ca_dev->mIface);
     ca8:	6840      	ldr	r0, [r0, #4]
     caa:	4b02      	ldr	r3, [pc, #8]	; (cb4 <releaseATCADevice+0x14>)
     cac:	4798      	blx	r3
     cae:	0003      	movs	r3, r0
}
     cb0:	0018      	movs	r0, r3
     cb2:	bd10      	pop	{r4, pc}
     cb4:	00000f1d 	.word	0x00000f1d

00000cb8 <deleteATCADevice>:
{
     cb8:	b510      	push	{r4, lr}
     cba:	1e04      	subs	r4, r0, #0
    if (ca_dev == NULL)
     cbc:	d013      	beq.n	ce6 <deleteATCADevice+0x2e>
    releaseATCADevice(*ca_dev);
     cbe:	6800      	ldr	r0, [r0, #0]
     cc0:	4b09      	ldr	r3, [pc, #36]	; (ce8 <deleteATCADevice+0x30>)
     cc2:	4798      	blx	r3
    deleteATCACommand(&(*ca_dev)->mCommands);
     cc4:	6820      	ldr	r0, [r4, #0]
     cc6:	4b09      	ldr	r3, [pc, #36]	; (cec <deleteATCADevice+0x34>)
     cc8:	4798      	blx	r3
    if ((*ca_dev)->mIface)
     cca:	6823      	ldr	r3, [r4, #0]
     ccc:	6858      	ldr	r0, [r3, #4]
     cce:	2800      	cmp	r0, #0
     cd0:	d004      	beq.n	cdc <deleteATCADevice+0x24>
        free((*ca_dev)->mIface);
     cd2:	4b07      	ldr	r3, [pc, #28]	; (cf0 <deleteATCADevice+0x38>)
     cd4:	4798      	blx	r3
        (*ca_dev)->mIface = NULL;
     cd6:	6823      	ldr	r3, [r4, #0]
     cd8:	2200      	movs	r2, #0
     cda:	605a      	str	r2, [r3, #4]
    free(*ca_dev);
     cdc:	6820      	ldr	r0, [r4, #0]
     cde:	4b04      	ldr	r3, [pc, #16]	; (cf0 <deleteATCADevice+0x38>)
     ce0:	4798      	blx	r3
    *ca_dev = NULL;
     ce2:	2300      	movs	r3, #0
     ce4:	6023      	str	r3, [r4, #0]
}
     ce6:	bd10      	pop	{r4, pc}
     ce8:	00000ca1 	.word	0x00000ca1
     cec:	00000985 	.word	0x00000985
     cf0:	000197b1 	.word	0x000197b1

00000cf4 <atca_execute_command>:
 * \param[in]    device  CryptoAuthentication device to send the command to.
 *
 * \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS atca_execute_command(ATCAPacket* packet, ATCADevice device)
{
     cf4:	b5f0      	push	{r4, r5, r6, r7, lr}
     cf6:	46de      	mov	lr, fp
     cf8:	4657      	mov	r7, sl
     cfa:	464e      	mov	r6, r9
     cfc:	4645      	mov	r5, r8
     cfe:	b5e0      	push	{r5, r6, r7, lr}
     d00:	b083      	sub	sp, #12
     d02:	4681      	mov	r9, r0
     d04:	000f      	movs	r7, r1
#else
        execution_or_wait_time = ATCA_POLLING_INIT_TIME_MSEC;
        max_delay_count = ATCA_POLLING_MAX_TIME_MSEC / ATCA_POLLING_FREQUENCY_TIME_MSEC;
#endif

        if ((status = atwake(device->mIface)) != ATCA_SUCCESS)
     d06:	6848      	ldr	r0, [r1, #4]
     d08:	4b24      	ldr	r3, [pc, #144]	; (d9c <atca_execute_command+0xa8>)
     d0a:	4798      	blx	r3
     d0c:	1e04      	subs	r4, r0, #0
     d0e:	d00a      	beq.n	d26 <atca_execute_command+0x32>
            break;
        }
    }
    while (0);

    atidle(device->mIface);
     d10:	6878      	ldr	r0, [r7, #4]
     d12:	4b23      	ldr	r3, [pc, #140]	; (da0 <atca_execute_command+0xac>)
     d14:	4798      	blx	r3
    return status;
}
     d16:	0020      	movs	r0, r4
     d18:	b003      	add	sp, #12
     d1a:	bc3c      	pop	{r2, r3, r4, r5}
     d1c:	4690      	mov	r8, r2
     d1e:	4699      	mov	r9, r3
     d20:	46a2      	mov	sl, r4
     d22:	46ab      	mov	fp, r5
     d24:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if ((status = atsend(device->mIface, (uint8_t*)packet, packet->txsize)) != ATCA_SUCCESS)
     d26:	464b      	mov	r3, r9
     d28:	785a      	ldrb	r2, [r3, #1]
     d2a:	4649      	mov	r1, r9
     d2c:	6878      	ldr	r0, [r7, #4]
     d2e:	4b1d      	ldr	r3, [pc, #116]	; (da4 <atca_execute_command+0xb0>)
     d30:	4798      	blx	r3
     d32:	1e04      	subs	r4, r0, #0
     d34:	d1ec      	bne.n	d10 <atca_execute_command+0x1c>
        atca_delay_ms(execution_or_wait_time);
     d36:	2001      	movs	r0, #1
     d38:	4b1b      	ldr	r3, [pc, #108]	; (da8 <atca_execute_command+0xb4>)
     d3a:	4798      	blx	r3
     d3c:	4e1b      	ldr	r6, [pc, #108]	; (dac <atca_execute_command+0xb8>)
            memset(packet->data, 0, sizeof(packet->data));
     d3e:	23c0      	movs	r3, #192	; 0xc0
     d40:	4698      	mov	r8, r3
     d42:	4b1b      	ldr	r3, [pc, #108]	; (db0 <atca_execute_command+0xbc>)
     d44:	469b      	mov	fp, r3
            if ((status = atreceive(device->mIface, packet->data, &rxsize)) == ATCA_SUCCESS)
     d46:	4b1b      	ldr	r3, [pc, #108]	; (db4 <atca_execute_command+0xc0>)
     d48:	469a      	mov	sl, r3
            memset(packet->data, 0, sizeof(packet->data));
     d4a:	464b      	mov	r3, r9
     d4c:	1d9d      	adds	r5, r3, #6
     d4e:	4642      	mov	r2, r8
     d50:	2100      	movs	r1, #0
     d52:	0028      	movs	r0, r5
     d54:	47d8      	blx	fp
            rxsize = sizeof(packet->data);
     d56:	466b      	mov	r3, sp
     d58:	1d9a      	adds	r2, r3, #6
     d5a:	4643      	mov	r3, r8
     d5c:	8013      	strh	r3, [r2, #0]
            if ((status = atreceive(device->mIface, packet->data, &rxsize)) == ATCA_SUCCESS)
     d5e:	0029      	movs	r1, r5
     d60:	6878      	ldr	r0, [r7, #4]
     d62:	47d0      	blx	sl
     d64:	1e04      	subs	r4, r0, #0
     d66:	d010      	beq.n	d8a <atca_execute_command+0x96>
            atca_delay_ms(ATCA_POLLING_FREQUENCY_TIME_MSEC);
     d68:	2002      	movs	r0, #2
     d6a:	4b0f      	ldr	r3, [pc, #60]	; (da8 <atca_execute_command+0xb4>)
     d6c:	4798      	blx	r3
     d6e:	3e01      	subs	r6, #1
        while (max_delay_count-- > 0);
     d70:	2e00      	cmp	r6, #0
     d72:	d1ea      	bne.n	d4a <atca_execute_command+0x56>
     d74:	e7cc      	b.n	d10 <atca_execute_command+0x1c>
        if ((status = atCheckCrc(packet->data)) != ATCA_SUCCESS)
     d76:	0028      	movs	r0, r5
     d78:	4b0f      	ldr	r3, [pc, #60]	; (db8 <atca_execute_command+0xc4>)
     d7a:	4798      	blx	r3
     d7c:	1e04      	subs	r4, r0, #0
     d7e:	d1c7      	bne.n	d10 <atca_execute_command+0x1c>
        if ((status = isATCAError(packet->data)) != ATCA_SUCCESS)
     d80:	0028      	movs	r0, r5
     d82:	4b0e      	ldr	r3, [pc, #56]	; (dbc <atca_execute_command+0xc8>)
     d84:	4798      	blx	r3
     d86:	0004      	movs	r4, r0
     d88:	e7c2      	b.n	d10 <atca_execute_command+0x1c>
        if (rxsize < 4)
     d8a:	466b      	mov	r3, sp
     d8c:	88dc      	ldrh	r4, [r3, #6]
     d8e:	2c03      	cmp	r4, #3
     d90:	d8f1      	bhi.n	d76 <atca_execute_command+0x82>
                status = ATCA_RX_NO_RESPONSE;
     d92:	4260      	negs	r0, r4
     d94:	4160      	adcs	r0, r4
     d96:	30e6      	adds	r0, #230	; 0xe6
     d98:	0004      	movs	r4, r0
     d9a:	e7b9      	b.n	d10 <atca_execute_command+0x1c>
     d9c:	00000ee1 	.word	0x00000ee1
     da0:	00000f01 	.word	0x00000f01
     da4:	00000ed1 	.word	0x00000ed1
     da8:	00001961 	.word	0x00001961
     dac:	000004e3 	.word	0x000004e3
     db0:	00019ec9 	.word	0x00019ec9
     db4:	00000ed9 	.word	0x00000ed9
     db8:	00000b49 	.word	0x00000b49
     dbc:	00000b85 	.word	0x00000b85

00000dc0 <isHexAlpha>:
 * \param[in] c  character to check
 * \return True if the character is a hex
 */
bool isHexAlpha(char c)
{
    return ((c >= 'A') && (c <= 'F')) || ((c >= 'a') && (c <= 'f'));
     dc0:	0002      	movs	r2, r0
     dc2:	3a41      	subs	r2, #65	; 0x41
     dc4:	2301      	movs	r3, #1
     dc6:	2a05      	cmp	r2, #5
     dc8:	d906      	bls.n	dd8 <isHexAlpha+0x18>
     dca:	3861      	subs	r0, #97	; 0x61
     dcc:	b2c0      	uxtb	r0, r0
     dce:	2300      	movs	r3, #0
     dd0:	2205      	movs	r2, #5
     dd2:	4282      	cmp	r2, r0
     dd4:	415b      	adcs	r3, r3
     dd6:	b2db      	uxtb	r3, r3
}
     dd8:	0018      	movs	r0, r3
     dda:	4770      	bx	lr

00000ddc <isHexDigit>:
 * \brief Returns true if this character is a valid hex character.
 * \param[in] c  character to check
 * \return True if the character can be included in a valid hexstring
 */
bool isHexDigit(char c)
{
     ddc:	b510      	push	{r4, lr}
    return isDigit(c) || isHexAlpha(c);
     dde:	0002      	movs	r2, r0
     de0:	3a30      	subs	r2, #48	; 0x30
     de2:	2301      	movs	r3, #1
     de4:	2a09      	cmp	r2, #9
     de6:	d902      	bls.n	dee <isHexDigit+0x12>
     de8:	4b02      	ldr	r3, [pc, #8]	; (df4 <isHexDigit+0x18>)
     dea:	4798      	blx	r3
     dec:	0003      	movs	r3, r0
}
     dee:	0018      	movs	r0, r3
     df0:	bd10      	pop	{r4, pc}
     df2:	46c0      	nop			; (mov r8, r8)
     df4:	00000dc1 	.word	0x00000dc1

00000df8 <atcab_hex2bin>:
{
     df8:	b5f0      	push	{r4, r5, r6, r7, lr}
     dfa:	46de      	mov	lr, fp
     dfc:	4657      	mov	r7, sl
     dfe:	464e      	mov	r6, r9
     e00:	4645      	mov	r5, r8
     e02:	b5e0      	push	{r5, r6, r7, lr}
     e04:	b083      	sub	sp, #12
     e06:	1e0f      	subs	r7, r1, #0
     e08:	9201      	str	r2, [sp, #4]
     e0a:	469a      	mov	sl, r3
    for (hex_index = 0; hex_index < hex_size; hex_index++)
     e0c:	d057      	beq.n	ebe <atcab_hex2bin+0xc6>
     e0e:	0004      	movs	r4, r0
     e10:	4680      	mov	r8, r0
     e12:	4488      	add	r8, r1
     e14:	2601      	movs	r6, #1
     e16:	2700      	movs	r7, #0
        if (!isHexDigit(hex[hex_index]))
     e18:	4b2c      	ldr	r3, [pc, #176]	; (ecc <atcab_hex2bin+0xd4>)
     e1a:	4699      	mov	r9, r3
        is_upper_nibble = !is_upper_nibble;
     e1c:	2301      	movs	r3, #1
     e1e:	469b      	mov	fp, r3
     e20:	e00e      	b.n	e40 <atcab_hex2bin+0x48>
    return 16;
     e22:	2310      	movs	r3, #16
    if (c >= 'A' && c <= 'F')
     e24:	0029      	movs	r1, r5
     e26:	3941      	subs	r1, #65	; 0x41
     e28:	2905      	cmp	r1, #5
     e2a:	d801      	bhi.n	e30 <atcab_hex2bin+0x38>
        return (uint8_t)(c - 'A') + 10;
     e2c:	3d37      	subs	r5, #55	; 0x37
     e2e:	b2eb      	uxtb	r3, r5
            bin[bin_index] = hex_digit_to_num(hex[hex_index]) << 4;
     e30:	011b      	lsls	r3, r3, #4
     e32:	7013      	strb	r3, [r2, #0]
        is_upper_nibble = !is_upper_nibble;
     e34:	465b      	mov	r3, fp
     e36:	405e      	eors	r6, r3
     e38:	b2f6      	uxtb	r6, r6
     e3a:	3401      	adds	r4, #1
    for (hex_index = 0; hex_index < hex_size; hex_index++)
     e3c:	4544      	cmp	r4, r8
     e3e:	d034      	beq.n	eaa <atcab_hex2bin+0xb2>
        if (!isHexDigit(hex[hex_index]))
     e40:	7825      	ldrb	r5, [r4, #0]
     e42:	0028      	movs	r0, r5
     e44:	47c8      	blx	r9
     e46:	2800      	cmp	r0, #0
     e48:	d0f7      	beq.n	e3a <atcab_hex2bin+0x42>
        if (bin_index >= *bin_size)
     e4a:	4653      	mov	r3, sl
     e4c:	681b      	ldr	r3, [r3, #0]
     e4e:	42bb      	cmp	r3, r7
     e50:	d939      	bls.n	ec6 <atcab_hex2bin+0xce>
        if (is_upper_nibble)
     e52:	2e00      	cmp	r6, #0
     e54:	d00e      	beq.n	e74 <atcab_hex2bin+0x7c>
            bin[bin_index] = hex_digit_to_num(hex[hex_index]) << 4;
     e56:	9b01      	ldr	r3, [sp, #4]
     e58:	19da      	adds	r2, r3, r7
    if (c >= '0' && c <= '9')
     e5a:	0029      	movs	r1, r5
     e5c:	3930      	subs	r1, #48	; 0x30
     e5e:	b2c9      	uxtb	r1, r1
        return (uint8_t)(c - '0');
     e60:	000b      	movs	r3, r1
    if (c >= '0' && c <= '9')
     e62:	2909      	cmp	r1, #9
     e64:	d9e4      	bls.n	e30 <atcab_hex2bin+0x38>
    if (c >= 'a' && c <= 'f')
     e66:	002b      	movs	r3, r5
     e68:	3b61      	subs	r3, #97	; 0x61
     e6a:	2b05      	cmp	r3, #5
     e6c:	d8d9      	bhi.n	e22 <atcab_hex2bin+0x2a>
        return (uint8_t)(c - 'a') + 10;
     e6e:	3d57      	subs	r5, #87	; 0x57
     e70:	b2eb      	uxtb	r3, r5
     e72:	e7dd      	b.n	e30 <atcab_hex2bin+0x38>
    if (c >= '0' && c <= '9')
     e74:	002a      	movs	r2, r5
     e76:	3a30      	subs	r2, #48	; 0x30
     e78:	b2d2      	uxtb	r2, r2
        return (uint8_t)(c - '0');
     e7a:	0013      	movs	r3, r2
    if (c >= '0' && c <= '9')
     e7c:	2a09      	cmp	r2, #9
     e7e:	d905      	bls.n	e8c <atcab_hex2bin+0x94>
    if (c >= 'a' && c <= 'f')
     e80:	002b      	movs	r3, r5
     e82:	3b61      	subs	r3, #97	; 0x61
     e84:	2b05      	cmp	r3, #5
     e86:	d808      	bhi.n	e9a <atcab_hex2bin+0xa2>
        return (uint8_t)(c - 'a') + 10;
     e88:	3d57      	subs	r5, #87	; 0x57
     e8a:	b2eb      	uxtb	r3, r5
            bin[bin_index] += hex_digit_to_num(hex[hex_index]);
     e8c:	9a01      	ldr	r2, [sp, #4]
     e8e:	19d2      	adds	r2, r2, r7
     e90:	7815      	ldrb	r5, [r2, #0]
     e92:	195d      	adds	r5, r3, r5
     e94:	7015      	strb	r5, [r2, #0]
            bin_index++;
     e96:	3701      	adds	r7, #1
     e98:	e7cc      	b.n	e34 <atcab_hex2bin+0x3c>
    return 16;
     e9a:	2310      	movs	r3, #16
    if (c >= 'A' && c <= 'F')
     e9c:	002a      	movs	r2, r5
     e9e:	3a41      	subs	r2, #65	; 0x41
     ea0:	2a05      	cmp	r2, #5
     ea2:	d8f3      	bhi.n	e8c <atcab_hex2bin+0x94>
        return (uint8_t)(c - 'A') + 10;
     ea4:	3d37      	subs	r5, #55	; 0x37
     ea6:	b2eb      	uxtb	r3, r5
     ea8:	e7f0      	b.n	e8c <atcab_hex2bin+0x94>
        return ATCA_BAD_PARAM;
     eaa:	20e2      	movs	r0, #226	; 0xe2
    if (!is_upper_nibble)
     eac:	2e00      	cmp	r6, #0
     eae:	d106      	bne.n	ebe <atcab_hex2bin+0xc6>
}
     eb0:	b003      	add	sp, #12
     eb2:	bc3c      	pop	{r2, r3, r4, r5}
     eb4:	4690      	mov	r8, r2
     eb6:	4699      	mov	r9, r3
     eb8:	46a2      	mov	sl, r4
     eba:	46ab      	mov	fp, r5
     ebc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    *bin_size = bin_index;
     ebe:	4653      	mov	r3, sl
     ec0:	601f      	str	r7, [r3, #0]
    return ATCA_SUCCESS;
     ec2:	2000      	movs	r0, #0
     ec4:	e7f4      	b.n	eb0 <atcab_hex2bin+0xb8>
            return ATCA_SMALL_BUFFER;
     ec6:	20ed      	movs	r0, #237	; 0xed
     ec8:	e7f2      	b.n	eb0 <atcab_hex2bin+0xb8>
     eca:	46c0      	nop			; (mov r8, r8)
     ecc:	00000ddd 	.word	0x00000ddd

00000ed0 <atsend>:
 * \param[in] txdata    Data to be transmitted to the device.
 * \param[in] txlength  Number of bytes to be transmitted to the device.
 * \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS atsend(ATCAIface ca_iface, uint8_t *txdata, int txlength)
{
     ed0:	b510      	push	{r4, lr}
    return ca_iface->atsend(ca_iface, txdata, txlength);
     ed2:	6903      	ldr	r3, [r0, #16]
     ed4:	4798      	blx	r3
}
     ed6:	bd10      	pop	{r4, pc}

00000ed8 <atreceive>:
 * \param[inout] rxlength  As input, the size of the rxdata buffer.
 *                         As output, the number of bytes received.
 * \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS atreceive(ATCAIface ca_iface, uint8_t *rxdata, uint16_t *rxlength)
{
     ed8:	b510      	push	{r4, lr}
    return ca_iface->atreceive(ca_iface, rxdata, rxlength);
     eda:	6943      	ldr	r3, [r0, #20]
     edc:	4798      	blx	r3
}
     ede:	bd10      	pop	{r4, pc}

00000ee0 <atwake>:
 *         instead.
 * \param[in] ca_iface  Device to interact with.
 * \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS atwake(ATCAIface ca_iface)
{
     ee0:	b510      	push	{r4, lr}
     ee2:	0004      	movs	r4, r0
    ATCA_STATUS status = ca_iface->atwake(ca_iface);
     ee4:	6983      	ldr	r3, [r0, #24]
     ee6:	4798      	blx	r3

    if (status == ATCA_WAKE_FAILED)
     ee8:	28d0      	cmp	r0, #208	; 0xd0
     eea:	d000      	beq.n	eee <atwake+0xe>

        status = ca_iface->atwake(ca_iface);
    }

    return status;
}
     eec:	bd10      	pop	{r4, pc}
        atca_delay_ms(ATCA_POST_DELAY_MSEC);
     eee:	38b7      	subs	r0, #183	; 0xb7
     ef0:	4b02      	ldr	r3, [pc, #8]	; (efc <atwake+0x1c>)
     ef2:	4798      	blx	r3
        status = ca_iface->atwake(ca_iface);
     ef4:	69a3      	ldr	r3, [r4, #24]
     ef6:	0020      	movs	r0, r4
     ef8:	4798      	blx	r3
     efa:	e7f7      	b.n	eec <atwake+0xc>
     efc:	00001961 	.word	0x00001961

00000f00 <atidle>:
 *         be used instead.
 * \param[in] ca_iface  Device to interact with.
 * \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS atidle(ATCAIface ca_iface)
{
     f00:	b510      	push	{r4, lr}
    ATCA_STATUS status;

    status = ca_iface->atidle(ca_iface);
     f02:	69c3      	ldr	r3, [r0, #28]
     f04:	4798      	blx	r3
     f06:	0004      	movs	r4, r0
    atca_delay_ms(1);
     f08:	2001      	movs	r0, #1
     f0a:	4b02      	ldr	r3, [pc, #8]	; (f14 <atidle+0x14>)
     f0c:	4798      	blx	r3
    return status;
}
     f0e:	0020      	movs	r0, r4
     f10:	bd10      	pop	{r4, pc}
     f12:	46c0      	nop			; (mov r8, r8)
     f14:	00001961 	.word	0x00001961

00000f18 <atgetifacecfg>:
 * \param[in] ca_iface  Device interface.
 * \return Logical interface configuration.
 */
ATCAIfaceCfg * atgetifacecfg(ATCAIface ca_iface)
{
    return ca_iface->mIfaceCFG;
     f18:	6840      	ldr	r0, [r0, #4]
}
     f1a:	4770      	bx	lr

00000f1c <releaseATCAIface>:
 *         this interface.
 *  \param[in] ca_iface  Device interface.
 *  \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS releaseATCAIface(ATCAIface ca_iface)
{
     f1c:	b510      	push	{r4, lr}
    if (ca_iface == NULL)
    {
        return ATCA_BAD_PARAM;
     f1e:	23e2      	movs	r3, #226	; 0xe2
    if (ca_iface == NULL)
     f20:	2800      	cmp	r0, #0
     f22:	d004      	beq.n	f2e <releaseATCAIface+0x12>
    }

    return hal_iface_release(ca_iface->mType, ca_iface->hal_data);
     f24:	6a41      	ldr	r1, [r0, #36]	; 0x24
     f26:	7800      	ldrb	r0, [r0, #0]
     f28:	4b02      	ldr	r3, [pc, #8]	; (f34 <releaseATCAIface+0x18>)
     f2a:	4798      	blx	r3
     f2c:	0003      	movs	r3, r0
}
     f2e:	0018      	movs	r0, r3
     f30:	bd10      	pop	{r4, pc}
     f32:	46c0      	nop			; (mov r8, r8)
     f34:	00001369 	.word	0x00001369

00000f38 <_atinit>:
    *ca_iface = NULL;
}
#endif

ATCA_STATUS _atinit(ATCAIface ca_iface, ATCAHAL_t *hal)
{
     f38:	b570      	push	{r4, r5, r6, lr}
     f3a:	0004      	movs	r4, r0
     f3c:	000d      	movs	r5, r1
    // get method mapping to HAL methods for this interface
    hal_iface_init(ca_iface->mIfaceCFG, hal);
     f3e:	6840      	ldr	r0, [r0, #4]
     f40:	4b09      	ldr	r3, [pc, #36]	; (f68 <_atinit+0x30>)
     f42:	4798      	blx	r3
    ca_iface->atinit     = hal->halinit;
     f44:	682b      	ldr	r3, [r5, #0]
     f46:	60a3      	str	r3, [r4, #8]
    ca_iface->atpostinit = hal->halpostinit;
     f48:	686b      	ldr	r3, [r5, #4]
     f4a:	60e3      	str	r3, [r4, #12]
    ca_iface->atsend     = hal->halsend;
     f4c:	68ab      	ldr	r3, [r5, #8]
     f4e:	6123      	str	r3, [r4, #16]
    ca_iface->atreceive  = hal->halreceive;
     f50:	68eb      	ldr	r3, [r5, #12]
     f52:	6163      	str	r3, [r4, #20]
    ca_iface->atwake     = hal->halwake;
     f54:	692b      	ldr	r3, [r5, #16]
     f56:	61a3      	str	r3, [r4, #24]
    ca_iface->atsleep    = hal->halsleep;
     f58:	69ab      	ldr	r3, [r5, #24]
     f5a:	6223      	str	r3, [r4, #32]
    ca_iface->atidle     = hal->halidle;
     f5c:	696b      	ldr	r3, [r5, #20]
     f5e:	61e3      	str	r3, [r4, #28]
    ca_iface->hal_data   = hal->hal_data;
     f60:	6a2b      	ldr	r3, [r5, #32]
     f62:	6263      	str	r3, [r4, #36]	; 0x24

    return ATCA_SUCCESS;
}
     f64:	2000      	movs	r0, #0
     f66:	bd70      	pop	{r4, r5, r6, pc}
     f68:	00001315 	.word	0x00001315

00000f6c <atinit>:
{
     f6c:	b510      	push	{r4, lr}
     f6e:	b08a      	sub	sp, #40	; 0x28
     f70:	0004      	movs	r4, r0
    _atinit(ca_iface, &hal);
     f72:	a901      	add	r1, sp, #4
     f74:	4b07      	ldr	r3, [pc, #28]	; (f94 <atinit+0x28>)
     f76:	4798      	blx	r3
    status = ca_iface->atinit(&hal, ca_iface->mIfaceCFG);
     f78:	6861      	ldr	r1, [r4, #4]
     f7a:	a801      	add	r0, sp, #4
     f7c:	68a3      	ldr	r3, [r4, #8]
     f7e:	4798      	blx	r3
    if (status == ATCA_SUCCESS)
     f80:	2800      	cmp	r0, #0
     f82:	d001      	beq.n	f88 <atinit+0x1c>
}
     f84:	b00a      	add	sp, #40	; 0x28
     f86:	bd10      	pop	{r4, pc}
        ca_iface->hal_data = hal.hal_data;
     f88:	9b09      	ldr	r3, [sp, #36]	; 0x24
     f8a:	6263      	str	r3, [r4, #36]	; 0x24
        status = ca_iface->atpostinit(ca_iface);
     f8c:	68e3      	ldr	r3, [r4, #12]
     f8e:	0020      	movs	r0, r4
     f90:	4798      	blx	r3
     f92:	e7f7      	b.n	f84 <atinit+0x18>
     f94:	00000f39 	.word	0x00000f39

00000f98 <initATCAIface>:
{
     f98:	b510      	push	{r4, lr}
    if (cfg == NULL || ca_iface == NULL)
     f9a:	2800      	cmp	r0, #0
     f9c:	d00b      	beq.n	fb6 <initATCAIface+0x1e>
        return ATCA_BAD_PARAM;
     f9e:	23e2      	movs	r3, #226	; 0xe2
    if (cfg == NULL || ca_iface == NULL)
     fa0:	2900      	cmp	r1, #0
     fa2:	d006      	beq.n	fb2 <initATCAIface+0x1a>
    ca_iface->mType = cfg->iface_type;
     fa4:	7803      	ldrb	r3, [r0, #0]
     fa6:	700b      	strb	r3, [r1, #0]
    ca_iface->mIfaceCFG = cfg;
     fa8:	6048      	str	r0, [r1, #4]
    status = atinit(ca_iface);
     faa:	0008      	movs	r0, r1
     fac:	4b03      	ldr	r3, [pc, #12]	; (fbc <initATCAIface+0x24>)
     fae:	4798      	blx	r3
     fb0:	0003      	movs	r3, r0
}
     fb2:	0018      	movs	r0, r3
     fb4:	bd10      	pop	{r4, pc}
        return ATCA_BAD_PARAM;
     fb6:	23e2      	movs	r3, #226	; 0xe2
     fb8:	e7fb      	b.n	fb2 <initATCAIface+0x1a>
     fba:	46c0      	nop			; (mov r8, r8)
     fbc:	00000f6d 	.word	0x00000f6d

00000fc0 <atcac_sw_sha2_256>:
 * \param[out] digest     result
 * \return ATCA_SUCCESS on success, otherwise an error code.
 */

int atcac_sw_sha2_256(const uint8_t* data, size_t data_size, uint8_t digest[ATCA_SHA2_256_DIGEST_SIZE])
{
     fc0:	b570      	push	{r4, r5, r6, lr}
     fc2:	b0b0      	sub	sp, #192	; 0xc0
     fc4:	0005      	movs	r5, r0
     fc6:	000e      	movs	r6, r1
     fc8:	0014      	movs	r4, r2
    sw_sha256_init((sw_sha256_ctx*)ctx);
     fca:	4668      	mov	r0, sp
     fcc:	4b06      	ldr	r3, [pc, #24]	; (fe8 <atcac_sw_sha2_256+0x28>)
     fce:	4798      	blx	r3
    sw_sha256_update((sw_sha256_ctx*)ctx, data, (uint32_t)data_size);
     fd0:	0032      	movs	r2, r6
     fd2:	0029      	movs	r1, r5
     fd4:	4668      	mov	r0, sp
     fd6:	4b05      	ldr	r3, [pc, #20]	; (fec <atcac_sw_sha2_256+0x2c>)
     fd8:	4798      	blx	r3
    sw_sha256_final((sw_sha256_ctx*)ctx, digest);
     fda:	0021      	movs	r1, r4
     fdc:	4668      	mov	r0, sp
     fde:	4b04      	ldr	r3, [pc, #16]	; (ff0 <atcac_sw_sha2_256+0x30>)
     fe0:	4798      	blx	r3
    {
        return ret;
    }

    return ATCA_SUCCESS;
     fe2:	2000      	movs	r0, #0
     fe4:	b030      	add	sp, #192	; 0xc0
     fe6:	bd70      	pop	{r4, r5, r6, pc}
     fe8:	000011a1 	.word	0x000011a1
     fec:	00001205 	.word	0x00001205
     ff0:	00001291 	.word	0x00001291

00000ff4 <sw_sha256_process>:
 * \param[in] ctx          SHA256 hash context
 * \param[in] blocks       Raw blocks to be processed
 * \param[in] block_count  Number of 64-byte blocks to process
 */
static void sw_sha256_process(sw_sha256_ctx* ctx, const uint8_t* blocks, uint32_t block_count)
{
     ff4:	b5f0      	push	{r4, r5, r6, r7, lr}
     ff6:	46de      	mov	lr, fp
     ff8:	4657      	mov	r7, sl
     ffa:	464e      	mov	r6, r9
     ffc:	4645      	mov	r5, r8
     ffe:	b5e0      	push	{r5, r6, r7, lr}
    1000:	b0d5      	sub	sp, #340	; 0x154
    1002:	900b      	str	r0, [sp, #44]	; 0x2c
        0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,
        0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2
    };

    // Loop through all the blocks to process
    for (block = 0; block < block_count; block++)
    1004:	2a00      	cmp	r2, #0
    1006:	d100      	bne.n	100a <sw_sha256_process+0x16>
    1008:	e0c0      	b.n	118c <sw_sha256_process+0x198>
    100a:	000b      	movs	r3, r1
    100c:	0192      	lsls	r2, r2, #6
    100e:	1889      	adds	r1, r1, r2
    1010:	910a      	str	r1, [sp, #40]	; 0x28
    1012:	0002      	movs	r2, r0
    1014:	32a8      	adds	r2, #168	; 0xa8
    1016:	9209      	str	r2, [sp, #36]	; 0x24
            s1 = rotate_right(rotate_register[4], 6)
                 ^ rotate_right(rotate_register[4], 11)
                 ^ rotate_right(rotate_register[4], 25);
            ch = (rotate_register[4] & rotate_register[5])
                 ^ (~rotate_register[4] & rotate_register[6]);
            t1 = rotate_register[7] + s1 + ch + k[i] + w_union.w_word[i];
    1018:	4a60      	ldr	r2, [pc, #384]	; (119c <sw_sha256_process+0x1a8>)
    101a:	4691      	mov	r9, r2
    101c:	e05c      	b.n	10d8 <sw_sha256_process+0xe4>

            rotate_register[7] = rotate_register[6];
            rotate_register[6] = rotate_register[5];
    101e:	9d02      	ldr	r5, [sp, #8]
    1020:	9501      	str	r5, [sp, #4]
            rotate_register[5] = rotate_register[4];
    1022:	9002      	str	r0, [sp, #8]
            rotate_register[4] = rotate_register[3] + t1;
    1024:	4658      	mov	r0, fp
            rotate_register[3] = rotate_register[2];
            rotate_register[2] = rotate_register[1];
    1026:	46bc      	mov	ip, r7
            rotate_register[1] = rotate_register[0];
    1028:	0027      	movs	r7, r4
            rotate_register[0] = t1 + t2;
    102a:	0014      	movs	r4, r2
                 ^ rotate_right(rotate_register[4], 11)
    102c:	0002      	movs	r2, r0
    102e:	250b      	movs	r5, #11
    1030:	41ea      	rors	r2, r5
    1032:	0005      	movs	r5, r0
    1034:	2606      	movs	r6, #6
    1036:	41f5      	rors	r5, r6
    1038:	4055      	eors	r5, r2
                 ^ rotate_right(rotate_register[4], 25);
    103a:	0002      	movs	r2, r0
    103c:	3613      	adds	r6, #19
    103e:	41f2      	rors	r2, r6
            s1 = rotate_right(rotate_register[4], 6)
    1040:	4055      	eors	r5, r2
            t1 = rotate_register[7] + s1 + ch + k[i] + w_union.w_word[i];
    1042:	464a      	mov	r2, r9
    1044:	588a      	ldr	r2, [r1, r2]
    1046:	9e04      	ldr	r6, [sp, #16]
    1048:	598e      	ldr	r6, [r1, r6]
    104a:	46b0      	mov	r8, r6
    104c:	4442      	add	r2, r8
    104e:	18ad      	adds	r5, r5, r2
            ch = (rotate_register[4] & rotate_register[5])
    1050:	9a02      	ldr	r2, [sp, #8]
    1052:	4002      	ands	r2, r0
    1054:	4690      	mov	r8, r2
    1056:	9a01      	ldr	r2, [sp, #4]
    1058:	4382      	bics	r2, r0
    105a:	4646      	mov	r6, r8
    105c:	4072      	eors	r2, r6
            t1 = rotate_register[7] + s1 + ch + k[i] + w_union.w_word[i];
    105e:	18aa      	adds	r2, r5, r2
    1060:	18d3      	adds	r3, r2, r3
            rotate_register[4] = rotate_register[3] + t1;
    1062:	9d03      	ldr	r5, [sp, #12]
    1064:	46ab      	mov	fp, r5
    1066:	449b      	add	fp, r3
                 ^ rotate_right(rotate_register[0], 13)
    1068:	0025      	movs	r5, r4
    106a:	260d      	movs	r6, #13
    106c:	41f5      	rors	r5, r6
    106e:	0022      	movs	r2, r4
    1070:	3e0b      	subs	r6, #11
    1072:	41f2      	rors	r2, r6
    1074:	406a      	eors	r2, r5
                 ^ rotate_right(rotate_register[0], 22);
    1076:	0025      	movs	r5, r4
    1078:	4656      	mov	r6, sl
    107a:	41f5      	rors	r5, r6
            s0 = rotate_right(rotate_register[0], 2)
    107c:	406a      	eors	r2, r5
                  ^ (rotate_register[0] & rotate_register[2])
    107e:	4665      	mov	r5, ip
    1080:	407d      	eors	r5, r7
    1082:	4025      	ands	r5, r4
                  ^ (rotate_register[1] & rotate_register[2]);
    1084:	4666      	mov	r6, ip
    1086:	403e      	ands	r6, r7
            maj = (rotate_register[0] & rotate_register[1])
    1088:	4075      	eors	r5, r6
            t2 = s0 + maj;
    108a:	1952      	adds	r2, r2, r5
            rotate_register[0] = t1 + t2;
    108c:	18d2      	adds	r2, r2, r3
    108e:	3104      	adds	r1, #4
            rotate_register[7] = rotate_register[6];
    1090:	9b01      	ldr	r3, [sp, #4]
            rotate_register[3] = rotate_register[2];
    1092:	4665      	mov	r5, ip
    1094:	9503      	str	r5, [sp, #12]
        for (i = 0; i < SHA256_BLOCK_SIZE; i++)
    1096:	2580      	movs	r5, #128	; 0x80
    1098:	006d      	lsls	r5, r5, #1
    109a:	42a9      	cmp	r1, r5
    109c:	d1bf      	bne.n	101e <sw_sha256_process+0x2a>
    109e:	003d      	movs	r5, r7
    10a0:	4667      	mov	r7, ip
    10a2:	9b08      	ldr	r3, [sp, #32]
    10a4:	469c      	mov	ip, r3
    10a6:	4659      	mov	r1, fp
    10a8:	920c      	str	r2, [sp, #48]	; 0x30
    10aa:	940d      	str	r4, [sp, #52]	; 0x34
    10ac:	950e      	str	r5, [sp, #56]	; 0x38
    10ae:	9110      	str	r1, [sp, #64]	; 0x40
    10b0:	9011      	str	r0, [sp, #68]	; 0x44
    10b2:	9b02      	ldr	r3, [sp, #8]
    10b4:	9312      	str	r3, [sp, #72]	; 0x48
    10b6:	9b01      	ldr	r3, [sp, #4]
    10b8:	9313      	str	r3, [sp, #76]	; 0x4c
    10ba:	970f      	str	r7, [sp, #60]	; 0x3c
    10bc:	4663      	mov	r3, ip
    10be:	9905      	ldr	r1, [sp, #20]
    10c0:	9807      	ldr	r0, [sp, #28]
        }

        // Add the hash of this block to current result.
        for (i = 0; i < 8; i++)
        {
            ctx->hash[i] += rotate_register[i];
    10c2:	c904      	ldmia	r1!, {r2}
    10c4:	681c      	ldr	r4, [r3, #0]
    10c6:	46a4      	mov	ip, r4
    10c8:	4462      	add	r2, ip
    10ca:	c304      	stmia	r3!, {r2}
        for (i = 0; i < 8; i++)
    10cc:	4283      	cmp	r3, r0
    10ce:	d1f8      	bne.n	10c2 <sw_sha256_process+0xce>
    10d0:	9b06      	ldr	r3, [sp, #24]
    for (block = 0; block < block_count; block++)
    10d2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    10d4:	429a      	cmp	r2, r3
    10d6:	d059      	beq.n	118c <sw_sha256_process+0x198>
    10d8:	a814      	add	r0, sp, #80	; 0x50
    10da:	2240      	movs	r2, #64	; 0x40
    10dc:	4694      	mov	ip, r2
    10de:	449c      	add	ip, r3
    10e0:	4662      	mov	r2, ip
    10e2:	4664      	mov	r4, ip
    10e4:	9206      	str	r2, [sp, #24]
{
    10e6:	0002      	movs	r2, r0
            w_union.w_byte[i + 3] = cur_msg_block[i + 0];
    10e8:	7819      	ldrb	r1, [r3, #0]
    10ea:	70d1      	strb	r1, [r2, #3]
            w_union.w_byte[i + 2] = cur_msg_block[i + 1];
    10ec:	7859      	ldrb	r1, [r3, #1]
    10ee:	7091      	strb	r1, [r2, #2]
            w_union.w_byte[i + 1] = cur_msg_block[i + 2];
    10f0:	7899      	ldrb	r1, [r3, #2]
    10f2:	7051      	strb	r1, [r2, #1]
            w_union.w_byte[i + 0] = cur_msg_block[i + 3];
    10f4:	78d9      	ldrb	r1, [r3, #3]
    10f6:	7011      	strb	r1, [r2, #0]
    10f8:	3304      	adds	r3, #4
    10fa:	3204      	adds	r2, #4
        for (i = 0; i < SHA256_BLOCK_SIZE; i += 4)
    10fc:	42a3      	cmp	r3, r4
    10fe:	d1f3      	bne.n	10e8 <sw_sha256_process+0xf4>
            word_value = w_union.w_word[w_index - 15];
    1100:	6842      	ldr	r2, [r0, #4]
            word_value = w_union.w_word[w_index - 2];
    1102:	6b81      	ldr	r1, [r0, #56]	; 0x38
            s0 = rotate_right(word_value, 7) ^ rotate_right(word_value, 18) ^ (word_value >> 3);
    1104:	0013      	movs	r3, r2
    1106:	2407      	movs	r4, #7
    1108:	41e3      	rors	r3, r4
    110a:	0014      	movs	r4, r2
    110c:	2512      	movs	r5, #18
    110e:	41ec      	rors	r4, r5
    1110:	4063      	eors	r3, r4
    1112:	08d2      	lsrs	r2, r2, #3
    1114:	4053      	eors	r3, r2
            w_union.w_word[w_index] = w_union.w_word[w_index - 16] + s0 + w_union.w_word[w_index - 7] + s1;
    1116:	6802      	ldr	r2, [r0, #0]
    1118:	6a44      	ldr	r4, [r0, #36]	; 0x24
    111a:	46a4      	mov	ip, r4
    111c:	4462      	add	r2, ip
    111e:	189b      	adds	r3, r3, r2
            s1 = rotate_right(word_value, 17) ^ rotate_right(word_value, 19) ^ (word_value >> 10);
    1120:	000a      	movs	r2, r1
    1122:	2411      	movs	r4, #17
    1124:	41e2      	rors	r2, r4
    1126:	000c      	movs	r4, r1
    1128:	3501      	adds	r5, #1
    112a:	41ec      	rors	r4, r5
    112c:	4062      	eors	r2, r4
    112e:	0a89      	lsrs	r1, r1, #10
    1130:	404a      	eors	r2, r1
            w_union.w_word[w_index] = w_union.w_word[w_index - 16] + s0 + w_union.w_word[w_index - 7] + s1;
    1132:	189b      	adds	r3, r3, r2
    1134:	6403      	str	r3, [r0, #64]	; 0x40
    1136:	3004      	adds	r0, #4
        while (w_index < SHA256_BLOCK_SIZE)
    1138:	ab44      	add	r3, sp, #272	; 0x110
    113a:	4298      	cmp	r0, r3
    113c:	d1e0      	bne.n	1100 <sw_sha256_process+0x10c>
    113e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    1140:	2288      	movs	r2, #136	; 0x88
    1142:	4690      	mov	r8, r2
    1144:	4443      	add	r3, r8
    1146:	469c      	mov	ip, r3
    1148:	ab0c      	add	r3, sp, #48	; 0x30
    114a:	9305      	str	r3, [sp, #20]
    114c:	4662      	mov	r2, ip
    114e:	9809      	ldr	r0, [sp, #36]	; 0x24
            rotate_register[i] = ctx->hash[i];
    1150:	ca02      	ldmia	r2!, {r1}
    1152:	c302      	stmia	r3!, {r1}
        for (i = 0; i < 8; i++)
    1154:	4282      	cmp	r2, r0
    1156:	d1fb      	bne.n	1150 <sw_sha256_process+0x15c>
    1158:	9207      	str	r2, [sp, #28]
    115a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    115c:	9b12      	ldr	r3, [sp, #72]	; 0x48
    115e:	9301      	str	r3, [sp, #4]
    1160:	9b11      	ldr	r3, [sp, #68]	; 0x44
    1162:	9302      	str	r3, [sp, #8]
    1164:	9810      	ldr	r0, [sp, #64]	; 0x40
    1166:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    1168:	4698      	mov	r8, r3
    116a:	9f0e      	ldr	r7, [sp, #56]	; 0x38
    116c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    116e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    1170:	2500      	movs	r5, #0
            t1 = rotate_register[7] + s1 + ch + k[i] + w_union.w_word[i];
    1172:	a914      	add	r1, sp, #80	; 0x50
    1174:	9104      	str	r1, [sp, #16]
                 ^ rotate_right(rotate_register[0], 22);
    1176:	2116      	movs	r1, #22
    1178:	468a      	mov	sl, r1
    117a:	4661      	mov	r1, ip
    117c:	9108      	str	r1, [sp, #32]
    117e:	46bc      	mov	ip, r7
    1180:	001f      	movs	r7, r3
    1182:	0013      	movs	r3, r2
    1184:	0029      	movs	r1, r5
    1186:	4642      	mov	r2, r8
    1188:	9203      	str	r2, [sp, #12]
    118a:	e74f      	b.n	102c <sw_sha256_process+0x38>
        }
    }
}
    118c:	b055      	add	sp, #340	; 0x154
    118e:	bc3c      	pop	{r2, r3, r4, r5}
    1190:	4690      	mov	r8, r2
    1192:	4699      	mov	r9, r3
    1194:	46a2      	mov	sl, r4
    1196:	46ab      	mov	fp, r5
    1198:	bdf0      	pop	{r4, r5, r6, r7, pc}
    119a:	46c0      	nop			; (mov r8, r8)
    119c:	0001eaa0 	.word	0x0001eaa0

000011a0 <sw_sha256_init>:
 *
 * \param[in] ctx          SHA256 hash context
 */

void sw_sha256_init(sw_sha256_ctx* ctx)
{
    11a0:	b510      	push	{r4, lr}
    11a2:	0004      	movs	r4, r0
        0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a,
        0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19
    };
    int i;

    memset(ctx, 0, sizeof(*ctx));
    11a4:	22a8      	movs	r2, #168	; 0xa8
    11a6:	2100      	movs	r1, #0
    11a8:	4b0d      	ldr	r3, [pc, #52]	; (11e0 <sw_sha256_init+0x40>)
    11aa:	4798      	blx	r3
    for (i = 0; i < 8; i++)
    {
        ctx->hash[i] = hash_init[i];
    11ac:	4a0d      	ldr	r2, [pc, #52]	; (11e4 <sw_sha256_init+0x44>)
    11ae:	2388      	movs	r3, #136	; 0x88
    11b0:	50e2      	str	r2, [r4, r3]
    11b2:	4a0d      	ldr	r2, [pc, #52]	; (11e8 <sw_sha256_init+0x48>)
    11b4:	3304      	adds	r3, #4
    11b6:	50e2      	str	r2, [r4, r3]
    11b8:	4a0c      	ldr	r2, [pc, #48]	; (11ec <sw_sha256_init+0x4c>)
    11ba:	3304      	adds	r3, #4
    11bc:	50e2      	str	r2, [r4, r3]
    11be:	4a0c      	ldr	r2, [pc, #48]	; (11f0 <sw_sha256_init+0x50>)
    11c0:	3304      	adds	r3, #4
    11c2:	50e2      	str	r2, [r4, r3]
    11c4:	4a0b      	ldr	r2, [pc, #44]	; (11f4 <sw_sha256_init+0x54>)
    11c6:	3304      	adds	r3, #4
    11c8:	50e2      	str	r2, [r4, r3]
    11ca:	4a0b      	ldr	r2, [pc, #44]	; (11f8 <sw_sha256_init+0x58>)
    11cc:	3304      	adds	r3, #4
    11ce:	50e2      	str	r2, [r4, r3]
    11d0:	4a0a      	ldr	r2, [pc, #40]	; (11fc <sw_sha256_init+0x5c>)
    11d2:	3304      	adds	r3, #4
    11d4:	50e2      	str	r2, [r4, r3]
    11d6:	4a0a      	ldr	r2, [pc, #40]	; (1200 <sw_sha256_init+0x60>)
    11d8:	3304      	adds	r3, #4
    11da:	50e2      	str	r2, [r4, r3]
    }
}
    11dc:	bd10      	pop	{r4, pc}
    11de:	46c0      	nop			; (mov r8, r8)
    11e0:	00019ec9 	.word	0x00019ec9
    11e4:	6a09e667 	.word	0x6a09e667
    11e8:	bb67ae85 	.word	0xbb67ae85
    11ec:	3c6ef372 	.word	0x3c6ef372
    11f0:	a54ff53a 	.word	0xa54ff53a
    11f4:	510e527f 	.word	0x510e527f
    11f8:	9b05688c 	.word	0x9b05688c
    11fc:	1f83d9ab 	.word	0x1f83d9ab
    1200:	5be0cd19 	.word	0x5be0cd19

00001204 <sw_sha256_update>:
 * \param[in] ctx          SHA256 hash context
 * \param[in] msg          Raw blocks to be processed
 * \param[in] msg_size     The size of the message passed
 */
void sw_sha256_update(sw_sha256_ctx* ctx, const uint8_t* msg, uint32_t msg_size)
{
    1204:	b5f0      	push	{r4, r5, r6, r7, lr}
    1206:	46d6      	mov	lr, sl
    1208:	464f      	mov	r7, r9
    120a:	b580      	push	{r7, lr}
    120c:	b083      	sub	sp, #12
    120e:	0006      	movs	r6, r0
    1210:	000d      	movs	r5, r1
    1212:	0014      	movs	r4, r2
    uint32_t block_count;
    uint32_t rem_size = SHA256_BLOCK_SIZE - ctx->block_size;
    1214:	6840      	ldr	r0, [r0, #4]
    1216:	2740      	movs	r7, #64	; 0x40
    1218:	1a3f      	subs	r7, r7, r0
    uint32_t copy_size = msg_size > rem_size ? rem_size : msg_size;
    121a:	4297      	cmp	r7, r2
    121c:	d900      	bls.n	1220 <sw_sha256_update+0x1c>
    121e:	0017      	movs	r7, r2

    // Copy data into current block
    memcpy(&ctx->block[ctx->block_size], msg, copy_size);
    1220:	3008      	adds	r0, #8
    1222:	1830      	adds	r0, r6, r0
    1224:	003a      	movs	r2, r7
    1226:	0029      	movs	r1, r5
    1228:	4b17      	ldr	r3, [pc, #92]	; (1288 <sw_sha256_update+0x84>)
    122a:	4798      	blx	r3

    if (ctx->block_size + msg_size < SHA256_BLOCK_SIZE)
    122c:	6873      	ldr	r3, [r6, #4]
    122e:	18e3      	adds	r3, r4, r3
    1230:	2b3f      	cmp	r3, #63	; 0x3f
    1232:	d805      	bhi.n	1240 <sw_sha256_update+0x3c>
    {
        // Not enough data to finish off the current block
        ctx->block_size += msg_size;
    1234:	6073      	str	r3, [r6, #4]

    // Save any remaining data
    ctx->total_msg_size += (block_count + 1) * SHA256_BLOCK_SIZE;
    ctx->block_size = msg_size % SHA256_BLOCK_SIZE;
    memcpy(ctx->block, &msg[copy_size + block_count * SHA256_BLOCK_SIZE], ctx->block_size);
}
    1236:	b003      	add	sp, #12
    1238:	bc0c      	pop	{r2, r3}
    123a:	4691      	mov	r9, r2
    123c:	469a      	mov	sl, r3
    123e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    sw_sha256_process(ctx, ctx->block, 1);
    1240:	2308      	movs	r3, #8
    1242:	469c      	mov	ip, r3
    1244:	44b4      	add	ip, r6
    1246:	4663      	mov	r3, ip
    1248:	2201      	movs	r2, #1
    124a:	9301      	str	r3, [sp, #4]
    124c:	4661      	mov	r1, ip
    124e:	0030      	movs	r0, r6
    1250:	4b0e      	ldr	r3, [pc, #56]	; (128c <sw_sha256_update+0x88>)
    1252:	469a      	mov	sl, r3
    1254:	4798      	blx	r3
    msg_size -= copy_size; // Adjust to the remaining message bytes
    1256:	1be4      	subs	r4, r4, r7
    block_count = msg_size / SHA256_BLOCK_SIZE;
    1258:	09a2      	lsrs	r2, r4, #6
    125a:	4691      	mov	r9, r2
    sw_sha256_process(ctx, &msg[copy_size], block_count);
    125c:	19e9      	adds	r1, r5, r7
    125e:	0030      	movs	r0, r6
    1260:	47d0      	blx	sl
    ctx->total_msg_size += (block_count + 1) * SHA256_BLOCK_SIZE;
    1262:	464a      	mov	r2, r9
    1264:	1c53      	adds	r3, r2, #1
    1266:	019b      	lsls	r3, r3, #6
    1268:	6832      	ldr	r2, [r6, #0]
    126a:	4694      	mov	ip, r2
    126c:	4463      	add	r3, ip
    126e:	6033      	str	r3, [r6, #0]
    ctx->block_size = msg_size % SHA256_BLOCK_SIZE;
    1270:	233f      	movs	r3, #63	; 0x3f
    1272:	001a      	movs	r2, r3
    1274:	4022      	ands	r2, r4
    1276:	6072      	str	r2, [r6, #4]
    memcpy(ctx->block, &msg[copy_size + block_count * SHA256_BLOCK_SIZE], ctx->block_size);
    1278:	0021      	movs	r1, r4
    127a:	4399      	bics	r1, r3
    127c:	19c9      	adds	r1, r1, r7
    127e:	1869      	adds	r1, r5, r1
    1280:	9801      	ldr	r0, [sp, #4]
    1282:	4b01      	ldr	r3, [pc, #4]	; (1288 <sw_sha256_update+0x84>)
    1284:	4798      	blx	r3
    1286:	e7d6      	b.n	1236 <sw_sha256_update+0x32>
    1288:	00019da5 	.word	0x00019da5
    128c:	00000ff5 	.word	0x00000ff5

00001290 <sw_sha256_final>:
/** \brief completes the final SHA256 calculation and returns the final digest/hash
 * \param[in]  ctx     ptr to context data structure
 * \param[out] digest  receives the computed digest of the SHA 256
 */
void sw_sha256_final(sw_sha256_ctx* ctx, uint8_t digest[SHA256_DIGEST_SIZE])
{
    1290:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1292:	0005      	movs	r5, r0
    1294:	000c      	movs	r4, r1
    int i, j;
    uint32_t msg_size_bits;
    uint32_t pad_zero_count;

    // Calculate the total message size in bits
    ctx->total_msg_size += ctx->block_size;
    1296:	6840      	ldr	r0, [r0, #4]
    1298:	682b      	ldr	r3, [r5, #0]
    129a:	18c7      	adds	r7, r0, r3
    129c:	602f      	str	r7, [r5, #0]
    msg_size_bits = ctx->total_msg_size * 8;
    129e:	00ff      	lsls	r7, r7, #3

    // Calculate the number of padding zero bytes required between the 1 bit byte and the 64 bit message size in bits.
    pad_zero_count = (SHA256_BLOCK_SIZE - ((ctx->block_size + 9) % SHA256_BLOCK_SIZE)) % SHA256_BLOCK_SIZE;
    12a0:	2309      	movs	r3, #9
    12a2:	425b      	negs	r3, r3
    12a4:	1a1b      	subs	r3, r3, r0
    12a6:	263f      	movs	r6, #63	; 0x3f
    12a8:	401e      	ands	r6, r3

    // Append a single 1 bit
    ctx->block[ctx->block_size++] = 0x80;
    12aa:	1c43      	adds	r3, r0, #1
    12ac:	606b      	str	r3, [r5, #4]
    12ae:	182b      	adds	r3, r5, r0
    12b0:	2280      	movs	r2, #128	; 0x80
    12b2:	721a      	strb	r2, [r3, #8]

    // Add padding zeros plus upper 4 bytes of total msg size in bits (only supporting 32bit message bit counts)
    memset(&ctx->block[ctx->block_size], 0, pad_zero_count + 4);
    12b4:	1d32      	adds	r2, r6, #4
    12b6:	3009      	adds	r0, #9
    12b8:	1828      	adds	r0, r5, r0
    12ba:	2100      	movs	r1, #0
    12bc:	4b13      	ldr	r3, [pc, #76]	; (130c <sw_sha256_final+0x7c>)
    12be:	4798      	blx	r3
    ctx->block_size += pad_zero_count + 4;
    12c0:	686b      	ldr	r3, [r5, #4]
    12c2:	469c      	mov	ip, r3
    12c4:	4466      	add	r6, ip

    // Add the total message size in bits to the end of the current block. Technically this is
    // supposed to be 8 bytes. This shortcut will reduce the max message size to 536,870,911 bytes.
    ctx->block[ctx->block_size++] = (uint8_t)(msg_size_bits >> 24);
    12c6:	19ab      	adds	r3, r5, r6
    12c8:	0e3a      	lsrs	r2, r7, #24
    12ca:	731a      	strb	r2, [r3, #12]
    ctx->block[ctx->block_size++] = (uint8_t)(msg_size_bits >> 16);
    12cc:	0c3a      	lsrs	r2, r7, #16
    12ce:	735a      	strb	r2, [r3, #13]
    ctx->block[ctx->block_size++] = (uint8_t)(msg_size_bits >> 8);
    12d0:	0a3a      	lsrs	r2, r7, #8
    12d2:	739a      	strb	r2, [r3, #14]
    ctx->block[ctx->block_size++] = (uint8_t)(msg_size_bits >> 0);
    12d4:	0032      	movs	r2, r6
    12d6:	3208      	adds	r2, #8
    12d8:	606a      	str	r2, [r5, #4]
    12da:	73df      	strb	r7, [r3, #15]

    sw_sha256_process(ctx, ctx->block, ctx->block_size / SHA256_BLOCK_SIZE);
    12dc:	0992      	lsrs	r2, r2, #6
    12de:	0029      	movs	r1, r5
    12e0:	3108      	adds	r1, #8
    12e2:	0028      	movs	r0, r5
    12e4:	4b0a      	ldr	r3, [pc, #40]	; (1310 <sw_sha256_final+0x80>)
    12e6:	4798      	blx	r3
    12e8:	0028      	movs	r0, r5
    12ea:	3088      	adds	r0, #136	; 0x88
    12ec:	35a8      	adds	r5, #168	; 0xa8
    12ee:	e003      	b.n	12f8 <sw_sha256_final+0x68>
    12f0:	3004      	adds	r0, #4
    12f2:	3404      	adds	r4, #4

    // All blocks have been processed.
    // Concatenate the hashes to produce digest, MSB of every hash first.
    for (i = 0; i < 8; i++)
    12f4:	42a8      	cmp	r0, r5
    12f6:	d008      	beq.n	130a <sw_sha256_final+0x7a>
{
    12f8:	2303      	movs	r3, #3
    {
        for (j = sizeof(int32_t) - 1; j >= 0; j--, ctx->hash[i] >>= 8)
        {
            digest[i * sizeof(int32_t) + j] = ctx->hash[i] & 0xFF;
    12fa:	7802      	ldrb	r2, [r0, #0]
    12fc:	54e2      	strb	r2, [r4, r3]
        for (j = sizeof(int32_t) - 1; j >= 0; j--, ctx->hash[i] >>= 8)
    12fe:	6802      	ldr	r2, [r0, #0]
    1300:	0a12      	lsrs	r2, r2, #8
    1302:	6002      	str	r2, [r0, #0]
    1304:	3b01      	subs	r3, #1
    1306:	d2f8      	bcs.n	12fa <sw_sha256_final+0x6a>
    1308:	e7f2      	b.n	12f0 <sw_sha256_final+0x60>
        }
    }
}
    130a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    130c:	00019ec9 	.word	0x00019ec9
    1310:	00000ff5 	.word	0x00000ff5

00001314 <hal_iface_init>:
    // The key here is to provide the flexibility to include just the types of interfaces you want/need without breaking the
    // object model.  The former is needed so in an embedded, constrained memory environment, you don't have to pay the price
    // (in terms of memory) for interfaces you don't use in your application.
    ATCA_STATUS status = ATCA_COMM_FAIL;

    switch (cfg->iface_type)
    1314:	7803      	ldrb	r3, [r0, #0]
    ATCA_STATUS status = ATCA_COMM_FAIL;
    1316:	20f0      	movs	r0, #240	; 0xf0
    switch (cfg->iface_type)
    1318:	2b00      	cmp	r3, #0
    131a:	d000      	beq.n	131e <hal_iface_init+0xa>
        break;
    default:
        break;
    }
    return status;
}
    131c:	4770      	bx	lr
        hal->halinit = &hal_i2c_init;
    131e:	4b0a      	ldr	r3, [pc, #40]	; (1348 <hal_iface_init+0x34>)
    1320:	600b      	str	r3, [r1, #0]
        hal->halpostinit = &hal_i2c_post_init;
    1322:	4b0a      	ldr	r3, [pc, #40]	; (134c <hal_iface_init+0x38>)
    1324:	604b      	str	r3, [r1, #4]
        hal->halreceive = &hal_i2c_receive;
    1326:	4b0a      	ldr	r3, [pc, #40]	; (1350 <hal_iface_init+0x3c>)
    1328:	60cb      	str	r3, [r1, #12]
        hal->halsend = &hal_i2c_send;
    132a:	4b0a      	ldr	r3, [pc, #40]	; (1354 <hal_iface_init+0x40>)
    132c:	608b      	str	r3, [r1, #8]
        hal->halsleep = &hal_i2c_sleep;
    132e:	4b0a      	ldr	r3, [pc, #40]	; (1358 <hal_iface_init+0x44>)
    1330:	618b      	str	r3, [r1, #24]
        hal->halwake = &hal_i2c_wake;
    1332:	4b0a      	ldr	r3, [pc, #40]	; (135c <hal_iface_init+0x48>)
    1334:	610b      	str	r3, [r1, #16]
        hal->halidle = &hal_i2c_idle;
    1336:	4b0a      	ldr	r3, [pc, #40]	; (1360 <hal_iface_init+0x4c>)
    1338:	614b      	str	r3, [r1, #20]
        hal->halrelease = &hal_i2c_release;
    133a:	4b0a      	ldr	r3, [pc, #40]	; (1364 <hal_iface_init+0x50>)
    133c:	61cb      	str	r3, [r1, #28]
        hal->hal_data = NULL;
    133e:	2300      	movs	r3, #0
    1340:	620b      	str	r3, [r1, #32]
        status = ATCA_SUCCESS;
    1342:	2000      	movs	r0, #0
        break;
    1344:	e7ea      	b.n	131c <hal_iface_init+0x8>
    1346:	46c0      	nop			; (mov r8, r8)
    1348:	000013d9 	.word	0x000013d9
    134c:	00001585 	.word	0x00001585
    1350:	000015dd 	.word	0x000015dd
    1354:	00001589 	.word	0x00001589
    1358:	000018d1 	.word	0x000018d1
    135c:	00001799 	.word	0x00001799
    1360:	0000187d 	.word	0x0000187d
    1364:	00001925 	.word	0x00001925

00001368 <hal_iface_release>:
 * \param[in] hal_data - pointer to opaque hal data maintained by HAL implementation for this interface type
 *  \return ATCA_SUCCESS on success, otherwise an error code.
 */

ATCA_STATUS hal_iface_release(ATCAIfaceType iface_type, void *hal_data)
{
    1368:	b510      	push	{r4, lr}
    ATCA_STATUS status = ATCA_GEN_FAIL;

    switch (iface_type)
    136a:	2800      	cmp	r0, #0
    136c:	d001      	beq.n	1372 <hal_iface_release+0xa>
    ATCA_STATUS status = ATCA_GEN_FAIL;
    136e:	20e1      	movs	r0, #225	; 0xe1
    default:
        break;
    }

    return status;
}
    1370:	bd10      	pop	{r4, pc}
        status = hal_i2c_release(hal_data);
    1372:	0008      	movs	r0, r1
    1374:	4b01      	ldr	r3, [pc, #4]	; (137c <hal_iface_release+0x14>)
    1376:	4798      	blx	r3
        break;
    1378:	e7fa      	b.n	1370 <hal_iface_release+0x8>
    137a:	46c0      	nop			; (mov r8, r8)
    137c:	00001925 	.word	0x00001925

00001380 <hal_check_wake>:
 * \param[in] response_size  Size of the response to check.
 * \return ATCA_SUCCESS for expected wake, ATCA_STATUS_SELFTEST_ERROR if the
 *         power on self test failed, ATCA_WAKE_FAILED for other failures.
 */
ATCA_STATUS hal_check_wake(const uint8_t* response, int response_size)
{
    1380:	b510      	push	{r4, lr}
    1382:	b082      	sub	sp, #8
    1384:	0004      	movs	r4, r0
    const uint8_t expected_response[4] = { 0x04, 0x11, 0x33, 0x43 };
    1386:	4b0f      	ldr	r3, [pc, #60]	; (13c4 <hal_check_wake+0x44>)
    1388:	681a      	ldr	r2, [r3, #0]
    138a:	9201      	str	r2, [sp, #4]
    uint8_t selftest_fail_resp[4] = { 0x04, 0x07, 0xC4, 0x40 };
    138c:	685b      	ldr	r3, [r3, #4]
    138e:	9300      	str	r3, [sp, #0]

    if (response_size != 4)
    {
        return ATCA_WAKE_FAILED;
    1390:	20d0      	movs	r0, #208	; 0xd0
    if (response_size != 4)
    1392:	2904      	cmp	r1, #4
    1394:	d001      	beq.n	139a <hal_check_wake+0x1a>
    if (memcmp(response, selftest_fail_resp, 4) == 0)
    {
        return ATCA_STATUS_SELFTEST_ERROR;
    }
    return ATCA_WAKE_FAILED;
    1396:	b002      	add	sp, #8
    1398:	bd10      	pop	{r4, pc}
    if (memcmp(response, expected_response, 4) == 0)
    139a:	2204      	movs	r2, #4
    139c:	a901      	add	r1, sp, #4
    139e:	0020      	movs	r0, r4
    13a0:	4b09      	ldr	r3, [pc, #36]	; (13c8 <hal_check_wake+0x48>)
    13a2:	4798      	blx	r3
    13a4:	0003      	movs	r3, r0
        return ATCA_SUCCESS;
    13a6:	2000      	movs	r0, #0
    if (memcmp(response, expected_response, 4) == 0)
    13a8:	2b00      	cmp	r3, #0
    13aa:	d0f4      	beq.n	1396 <hal_check_wake+0x16>
    if (memcmp(response, selftest_fail_resp, 4) == 0)
    13ac:	2204      	movs	r2, #4
    13ae:	4669      	mov	r1, sp
    13b0:	0020      	movs	r0, r4
    13b2:	4b05      	ldr	r3, [pc, #20]	; (13c8 <hal_check_wake+0x48>)
    13b4:	4798      	blx	r3
    13b6:	0003      	movs	r3, r0
        return ATCA_STATUS_SELFTEST_ERROR;
    13b8:	20d7      	movs	r0, #215	; 0xd7
    if (memcmp(response, selftest_fail_resp, 4) == 0)
    13ba:	2b00      	cmp	r3, #0
    13bc:	d0eb      	beq.n	1396 <hal_check_wake+0x16>
    return ATCA_WAKE_FAILED;
    13be:	3807      	subs	r0, #7
    13c0:	e7e9      	b.n	1396 <hal_check_wake+0x16>
    13c2:	46c0      	nop			; (mov r8, r8)
    13c4:	0001eba0 	.word	0x0001eba0
    13c8:	00019d59 	.word	0x00019d59

000013cc <_i2c_master_wait_for_sync>:
{
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
    13cc:	6801      	ldr	r1, [r0, #0]

#if defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_1)
	return (i2c_hw->STATUS.reg & SERCOM_I2CM_STATUS_SYNCBUSY);
#elif defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_2)
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
    13ce:	2207      	movs	r2, #7
    13d0:	69cb      	ldr	r3, [r1, #28]
		const struct i2c_master_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (i2c_master_is_syncing(module)) {
    13d2:	421a      	tst	r2, r3
    13d4:	d1fc      	bne.n	13d0 <_i2c_master_wait_for_sync+0x4>
		/* Wait for I2C module to sync. */
	}
}
    13d6:	4770      	bx	lr

000013d8 <hal_i2c_init>:
 * \param[in] hal - opaque ptr to HAL data
 * \param[in] cfg - interface configuration
 * \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS hal_i2c_init(void *hal, ATCAIfaceCfg *cfg)
{
    13d8:	b5f0      	push	{r4, r5, r6, r7, lr}
    13da:	46de      	mov	lr, fp
    13dc:	464f      	mov	r7, r9
    13de:	4646      	mov	r6, r8
    13e0:	b5c0      	push	{r6, r7, lr}
    13e2:	b082      	sub	sp, #8
    13e4:	4681      	mov	r9, r0
    13e6:	000d      	movs	r5, r1
    if (cfg->atcai2c.bus >= MAX_I2C_BUSES)
    13e8:	794c      	ldrb	r4, [r1, #5]
    {
        return ATCA_COMM_FAIL;
    13ea:	20f0      	movs	r0, #240	; 0xf0
    if (cfg->atcai2c.bus >= MAX_I2C_BUSES)
    13ec:	2c05      	cmp	r4, #5
    13ee:	d905      	bls.n	13fc <hal_i2c_init+0x24>
    }

    ((ATCAHAL_t*)hal)->hal_data = data;

    return ATCA_SUCCESS;
}
    13f0:	b002      	add	sp, #8
    13f2:	bc1c      	pop	{r2, r3, r4}
    13f4:	4690      	mov	r8, r2
    13f6:	4699      	mov	r9, r3
    13f8:	46a3      	mov	fp, r4
    13fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ATCAI2CMaster_t* data = &i2c_hal_data[cfg->atcai2c.bus];
    13fc:	9400      	str	r4, [sp, #0]
    13fe:	2734      	movs	r7, #52	; 0x34
    1400:	4367      	muls	r7, r4
    1402:	4b50      	ldr	r3, [pc, #320]	; (1544 <hal_i2c_init+0x16c>)
    1404:	4698      	mov	r8, r3
    1406:	44b8      	add	r8, r7
    if (data->ref_ct <= 0)
    1408:	4643      	mov	r3, r8
    140a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    140c:	2b00      	cmp	r3, #0
    140e:	dd0a      	ble.n	1426 <hal_i2c_init+0x4e>
        data->ref_ct++;
    1410:	2234      	movs	r2, #52	; 0x34
    1412:	4362      	muls	r2, r4
    1414:	4c4b      	ldr	r4, [pc, #300]	; (1544 <hal_i2c_init+0x16c>)
    1416:	18a4      	adds	r4, r4, r2
    1418:	3301      	adds	r3, #1
    141a:	62e3      	str	r3, [r4, #44]	; 0x2c
    ((ATCAHAL_t*)hal)->hal_data = data;
    141c:	464b      	mov	r3, r9
    141e:	4642      	mov	r2, r8
    1420:	621a      	str	r2, [r3, #32]
    return ATCA_SUCCESS;
    1422:	2000      	movs	r0, #0
    1424:	e7e4      	b.n	13f0 <hal_i2c_init+0x18>
{
	/*Sanity check argument */
	Assert(config);
	config->baud_rate        = I2C_MASTER_BAUD_RATE_100KHZ;
#ifdef FEATURE_I2C_FAST_MODE_PLUS_AND_HIGH_SPEED
	config->baud_rate_high_speed = I2C_MASTER_BAUD_RATE_3400KHZ;
    1426:	4e48      	ldr	r6, [pc, #288]	; (1548 <hal_i2c_init+0x170>)
    1428:	4b48      	ldr	r3, [pc, #288]	; (154c <hal_i2c_init+0x174>)
    142a:	6073      	str	r3, [r6, #4]
	config->transfer_speed       = I2C_MASTER_SPEED_STANDARD_AND_FAST;
    142c:	2300      	movs	r3, #0
    142e:	60b3      	str	r3, [r6, #8]
#endif
	config->generator_source = GCLK_GENERATOR_0;
    1430:	7333      	strb	r3, [r6, #12]
	config->run_in_standby   = false;
    1432:	7633      	strb	r3, [r6, #24]
	config->start_hold_time  = I2C_MASTER_START_HOLD_TIME_300NS_600NS;
    1434:	2280      	movs	r2, #128	; 0x80
    1436:	0392      	lsls	r2, r2, #14
    1438:	6132      	str	r2, [r6, #16]
	config->buffer_timeout   = 65535;
    143a:	2201      	movs	r2, #1
    143c:	4252      	negs	r2, r2
    143e:	82f2      	strh	r2, [r6, #22]
	config->unknown_bus_state_timeout = 65535;
	config->pinmux_pad0      = PINMUX_DEFAULT;
    1440:	61f3      	str	r3, [r6, #28]
	config->pinmux_pad1      = PINMUX_DEFAULT;
    1442:	6233      	str	r3, [r6, #32]
	config->scl_low_timeout  = false;
    1444:	3225      	adds	r2, #37	; 0x25
    1446:	54b3      	strb	r3, [r6, r2]
	config->inactive_timeout = I2C_MASTER_INACTIVE_TIMEOUT_DISABLED;
    1448:	62b3      	str	r3, [r6, #40]	; 0x28
#ifdef FEATURE_I2C_SCL_STRETCH_MODE
	config->scl_stretch_only_after_ack_bit = false;
    144a:	3208      	adds	r2, #8
    144c:	54b3      	strb	r3, [r6, r2]
#endif
#ifdef FEATURE_I2C_SCL_EXTEND_TIMEOUT
	config->slave_scl_low_extend_timeout   = false;
    144e:	3201      	adds	r2, #1
    1450:	54b3      	strb	r3, [r6, r2]
	config->master_scl_low_extend_timeout  = false;
    1452:	3201      	adds	r2, #1
    1454:	54b3      	strb	r3, [r6, r2]
#endif
	/* The typical value is 215ns */
	config->sda_scl_rise_time_ns = 215;
    1456:	33d7      	adds	r3, #215	; 0xd7
    1458:	8633      	strh	r3, [r6, #48]	; 0x30
        config_i2c_master.unknown_bus_state_timeout = 500;
    145a:	331e      	adds	r3, #30
    145c:	33ff      	adds	r3, #255	; 0xff
    145e:	82b3      	strh	r3, [r6, #20]
        config_i2c_master.baud_rate = cfg->atcai2c.baud / 1000;
    1460:	21fa      	movs	r1, #250	; 0xfa
    1462:	0089      	lsls	r1, r1, #2
    1464:	68a8      	ldr	r0, [r5, #8]
    1466:	4b3a      	ldr	r3, [pc, #232]	; (1550 <hal_i2c_init+0x178>)
    1468:	4798      	blx	r3
    146a:	6030      	str	r0, [r6, #0]
        switch (cfg->atcai2c.bus)
    146c:	796b      	ldrb	r3, [r5, #5]
    146e:	2b05      	cmp	r3, #5
    1470:	d866      	bhi.n	1540 <hal_i2c_init+0x168>
    1472:	009b      	lsls	r3, r3, #2
    1474:	4a37      	ldr	r2, [pc, #220]	; (1554 <hal_i2c_init+0x17c>)
    1476:	58d3      	ldr	r3, [r2, r3]
    1478:	469f      	mov	pc, r3
            data->i2c_sercom = SERCOM0;
    147a:	2334      	movs	r3, #52	; 0x34
    147c:	4363      	muls	r3, r4
    147e:	2184      	movs	r1, #132	; 0x84
    1480:	05c9      	lsls	r1, r1, #23
    1482:	4a30      	ldr	r2, [pc, #192]	; (1544 <hal_i2c_init+0x16c>)
    1484:	5099      	str	r1, [r3, r2]
		config_i2c_master.pinmux_pad0 = ATCAD_HOST_I2C_SERCOM_PINMUX_PAD0;
    1486:	4a30      	ldr	r2, [pc, #192]	; (1548 <hal_i2c_init+0x170>)
    1488:	4b33      	ldr	r3, [pc, #204]	; (1558 <hal_i2c_init+0x180>)
    148a:	61d3      	str	r3, [r2, #28]
		config_i2c_master.pinmux_pad1 = ATCAD_HOST_I2C_SERCOM_PINMUX_PAD1;
    148c:	4b33      	ldr	r3, [pc, #204]	; (155c <hal_i2c_init+0x184>)
    148e:	6213      	str	r3, [r2, #32]
        i2c_master_init(&data->i2c_master_instance, data->i2c_sercom, &config_i2c_master);
    1490:	4e2c      	ldr	r6, [pc, #176]	; (1544 <hal_i2c_init+0x16c>)
    1492:	3704      	adds	r7, #4
    1494:	19f3      	adds	r3, r6, r7
    1496:	2734      	movs	r7, #52	; 0x34
    1498:	4367      	muls	r7, r4
    149a:	59b9      	ldr	r1, [r7, r6]
    149c:	9301      	str	r3, [sp, #4]
    149e:	0018      	movs	r0, r3
    14a0:	4b2f      	ldr	r3, [pc, #188]	; (1560 <hal_i2c_init+0x188>)
    14a2:	4798      	blx	r3
{
	/* Sanity check of arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    14a4:	46b3      	mov	fp, r6
    14a6:	44bb      	add	fp, r7
    14a8:	465a      	mov	r2, fp
    14aa:	6857      	ldr	r7, [r2, #4]

	/* Timeout counter used to force bus state */
	uint32_t timeout_counter = 0;

	/* Wait for module to sync */
	_i2c_master_wait_for_sync(module);
    14ac:	9801      	ldr	r0, [sp, #4]
    14ae:	4b2d      	ldr	r3, [pc, #180]	; (1564 <hal_i2c_init+0x18c>)
    14b0:	4798      	blx	r3

	/* Enable module */
	i2c_module->CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
    14b2:	683b      	ldr	r3, [r7, #0]
    14b4:	2202      	movs	r2, #2
    14b6:	4313      	orrs	r3, r2
    14b8:	603b      	str	r3, [r7, #0]

#if I2C_MASTER_CALLBACK_MODE == true
	/* Enable module interrupts */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    14ba:	465b      	mov	r3, fp
    14bc:	6858      	ldr	r0, [r3, #4]
    14be:	4b2a      	ldr	r3, [pc, #168]	; (1568 <hal_i2c_init+0x190>)
    14c0:	4798      	blx	r3
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    14c2:	231f      	movs	r3, #31
    14c4:	4018      	ands	r0, r3
    14c6:	3b1e      	subs	r3, #30
    14c8:	4083      	lsls	r3, r0
    14ca:	4a28      	ldr	r2, [pc, #160]	; (156c <hal_i2c_init+0x194>)
    14cc:	6013      	str	r3, [r2, #0]
	uint32_t timeout_counter = 0;
    14ce:	2300      	movs	r3, #0
#endif
	/* Start timeout if bus state is unknown */
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
    14d0:	2110      	movs	r1, #16
		timeout_counter++;
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
    14d2:	2234      	movs	r2, #52	; 0x34
    14d4:	9e00      	ldr	r6, [sp, #0]
    14d6:	4356      	muls	r6, r2
    14d8:	4a1a      	ldr	r2, [pc, #104]	; (1544 <hal_i2c_init+0x16c>)
    14da:	4694      	mov	ip, r2
    14dc:	4466      	add	r6, ip
    14de:	360a      	adds	r6, #10
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
    14e0:	8b7a      	ldrh	r2, [r7, #26]
    14e2:	420a      	tst	r2, r1
    14e4:	d105      	bne.n	14f2 <hal_i2c_init+0x11a>
		timeout_counter++;
    14e6:	3301      	adds	r3, #1
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
    14e8:	8832      	ldrh	r2, [r6, #0]
    14ea:	4293      	cmp	r3, r2
    14ec:	d3f8      	bcc.n	14e0 <hal_i2c_init+0x108>
			/* Timeout, force bus state to idle */
			i2c_module->STATUS.reg = SERCOM_I2CM_STATUS_BUSSTATE(1);
    14ee:	2310      	movs	r3, #16
    14f0:	837b      	strh	r3, [r7, #26]
        data->bus_index = cfg->atcai2c.bus;
    14f2:	2334      	movs	r3, #52	; 0x34
    14f4:	4363      	muls	r3, r4
    14f6:	4c13      	ldr	r4, [pc, #76]	; (1544 <hal_i2c_init+0x16c>)
    14f8:	18e4      	adds	r4, r4, r3
    14fa:	796b      	ldrb	r3, [r5, #5]
    14fc:	6323      	str	r3, [r4, #48]	; 0x30
        data->ref_ct = 1;
    14fe:	2301      	movs	r3, #1
    1500:	62e3      	str	r3, [r4, #44]	; 0x2c
    1502:	e78b      	b.n	141c <hal_i2c_init+0x44>
            data->i2c_sercom = SERCOM1;
    1504:	2334      	movs	r3, #52	; 0x34
    1506:	4363      	muls	r3, r4
    1508:	4919      	ldr	r1, [pc, #100]	; (1570 <hal_i2c_init+0x198>)
    150a:	4a0e      	ldr	r2, [pc, #56]	; (1544 <hal_i2c_init+0x16c>)
    150c:	5099      	str	r1, [r3, r2]
            break;
    150e:	e7ba      	b.n	1486 <hal_i2c_init+0xae>
            data->i2c_sercom = SERCOM2;
    1510:	2334      	movs	r3, #52	; 0x34
    1512:	4363      	muls	r3, r4
    1514:	4917      	ldr	r1, [pc, #92]	; (1574 <hal_i2c_init+0x19c>)
    1516:	4a0b      	ldr	r2, [pc, #44]	; (1544 <hal_i2c_init+0x16c>)
    1518:	5099      	str	r1, [r3, r2]
            break;
    151a:	e7b4      	b.n	1486 <hal_i2c_init+0xae>
            data->i2c_sercom = SERCOM3;
    151c:	2334      	movs	r3, #52	; 0x34
    151e:	4363      	muls	r3, r4
    1520:	4915      	ldr	r1, [pc, #84]	; (1578 <hal_i2c_init+0x1a0>)
    1522:	4a08      	ldr	r2, [pc, #32]	; (1544 <hal_i2c_init+0x16c>)
    1524:	5099      	str	r1, [r3, r2]
            break;
    1526:	e7ae      	b.n	1486 <hal_i2c_init+0xae>
            data->i2c_sercom = SERCOM4;
    1528:	2334      	movs	r3, #52	; 0x34
    152a:	4363      	muls	r3, r4
    152c:	4913      	ldr	r1, [pc, #76]	; (157c <hal_i2c_init+0x1a4>)
    152e:	4a05      	ldr	r2, [pc, #20]	; (1544 <hal_i2c_init+0x16c>)
    1530:	5099      	str	r1, [r3, r2]
            break;
    1532:	e7a8      	b.n	1486 <hal_i2c_init+0xae>
            data->i2c_sercom = SERCOM5;
    1534:	2334      	movs	r3, #52	; 0x34
    1536:	4363      	muls	r3, r4
    1538:	4911      	ldr	r1, [pc, #68]	; (1580 <hal_i2c_init+0x1a8>)
    153a:	4a02      	ldr	r2, [pc, #8]	; (1544 <hal_i2c_init+0x16c>)
    153c:	5099      	str	r1, [r3, r2]
            break;
    153e:	e7a2      	b.n	1486 <hal_i2c_init+0xae>
            return ATCA_COMM_FAIL;
    1540:	20f0      	movs	r0, #240	; 0xf0
    1542:	e755      	b.n	13f0 <hal_i2c_init+0x18>
    1544:	20000a1c 	.word	0x20000a1c
    1548:	200009e8 	.word	0x200009e8
    154c:	00000d48 	.word	0x00000d48
    1550:	00016641 	.word	0x00016641
    1554:	0001eba8 	.word	0x0001eba8
    1558:	00100002 	.word	0x00100002
    155c:	00110002 	.word	0x00110002
    1560:	00005311 	.word	0x00005311
    1564:	000013cd 	.word	0x000013cd
    1568:	00006041 	.word	0x00006041
    156c:	e000e100 	.word	0xe000e100
    1570:	42000400 	.word	0x42000400
    1574:	42000800 	.word	0x42000800
    1578:	42000c00 	.word	0x42000c00
    157c:	42001000 	.word	0x42001000
    1580:	43000400 	.word	0x43000400

00001584 <hal_i2c_post_init>:
 * \return ATCA_SUCCESS
 */
ATCA_STATUS hal_i2c_post_init(ATCAIface iface)
{
    return ATCA_SUCCESS;
}
    1584:	2000      	movs	r0, #0
    1586:	4770      	bx	lr

00001588 <hal_i2c_send>:
 * \param[in] txlength  number of bytes to send
 * \return ATCA_SUCCESS on success, otherwise an error code.
 */

ATCA_STATUS hal_i2c_send(ATCAIface iface, uint8_t *txdata, int txlength)
{
    1588:	b530      	push	{r4, r5, lr}
    158a:	b085      	sub	sp, #20
    158c:	000d      	movs	r5, r1
    158e:	0014      	movs	r4, r2
    ATCAIfaceCfg *cfg = atgetifacecfg(iface);
    1590:	4b0f      	ldr	r3, [pc, #60]	; (15d0 <hal_i2c_send+0x48>)
    1592:	4798      	blx	r3

    struct i2c_master_packet packet = {
    1594:	a901      	add	r1, sp, #4
    1596:	7903      	ldrb	r3, [r0, #4]
    1598:	085b      	lsrs	r3, r3, #1
    159a:	800b      	strh	r3, [r1, #0]
    159c:	604d      	str	r5, [r1, #4]
    159e:	2300      	movs	r3, #0
    15a0:	720b      	strb	r3, [r1, #8]
    15a2:	724b      	strb	r3, [r1, #9]
    15a4:	728b      	strb	r3, [r1, #10]

    // for this implementation of I2C with CryptoAuth chips, txdata is assumed to have ATCAPacket format
    // other device types that don't require i/o tokens on the front end of a command need a different hal_i2c_send and wire it up instead of this one
    // this covers devices such as ATSHA204A and ATECCx08A that require a word address value pre-pended to the packet
    // txdata[0] is using _reserved byte of the ATCAPacket
    txdata[0] = 0x03;   // insert the Word Address Value, Command token
    15a6:	3303      	adds	r3, #3
    15a8:	702b      	strb	r3, [r5, #0]
    txlength++;         // account for word address value byte.
    15aa:	3401      	adds	r4, #1
    packet.data_length = txlength;
    15ac:	804c      	strh	r4, [r1, #2]

    if (i2c_master_write_packet_wait(&i2c_hal_data[cfg->atcai2c.bus].i2c_master_instance, &packet) != STATUS_OK)
    15ae:	7943      	ldrb	r3, [r0, #5]
    15b0:	2034      	movs	r0, #52	; 0x34
    15b2:	4358      	muls	r0, r3
    15b4:	3004      	adds	r0, #4
    15b6:	4b07      	ldr	r3, [pc, #28]	; (15d4 <hal_i2c_send+0x4c>)
    15b8:	1818      	adds	r0, r3, r0
    15ba:	4b07      	ldr	r3, [pc, #28]	; (15d8 <hal_i2c_send+0x50>)
    15bc:	4798      	blx	r3
    15be:	0003      	movs	r3, r0
    {
        return ATCA_COMM_FAIL;
    15c0:	20f0      	movs	r0, #240	; 0xf0
    }

    return ATCA_SUCCESS;
    15c2:	1e5a      	subs	r2, r3, #1
    15c4:	4193      	sbcs	r3, r2
    15c6:	425b      	negs	r3, r3
    15c8:	4018      	ands	r0, r3
}
    15ca:	b005      	add	sp, #20
    15cc:	bd30      	pop	{r4, r5, pc}
    15ce:	46c0      	nop			; (mov r8, r8)
    15d0:	00000f19 	.word	0x00000f19
    15d4:	20000a1c 	.word	0x20000a1c
    15d8:	000059c9 	.word	0x000059c9

000015dc <hal_i2c_receive>:
 * \param[inout] rxlength  As input, the size of the rxdata buffer.
 *                         As output, the number of bytes received.
 * \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS hal_i2c_receive(ATCAIface iface, uint8_t *rxdata, uint16_t *rxlength)
{
    15dc:	b5f0      	push	{r4, r5, r6, r7, lr}
    15de:	46d6      	mov	lr, sl
    15e0:	464f      	mov	r7, r9
    15e2:	4646      	mov	r6, r8
    15e4:	b5c0      	push	{r6, r7, lr}
    15e6:	b084      	sub	sp, #16
    15e8:	4689      	mov	r9, r1
    15ea:	4690      	mov	r8, r2
    ATCAIfaceCfg *cfg = atgetifacecfg(iface);
    15ec:	4b2c      	ldr	r3, [pc, #176]	; (16a0 <hal_i2c_receive+0xc4>)
    15ee:	4798      	blx	r3
    15f0:	0005      	movs	r5, r0
    int retries = cfg->rx_retries;
    15f2:	6a84      	ldr	r4, [r0, #40]	; 0x28
    int status = !ATCA_SUCCESS;
    uint16_t rxdata_max_size = *rxlength;
    15f4:	4643      	mov	r3, r8
    15f6:	881b      	ldrh	r3, [r3, #0]
    15f8:	469a      	mov	sl, r3

    struct i2c_master_packet packet = {
    15fa:	ab01      	add	r3, sp, #4
    15fc:	7902      	ldrb	r2, [r0, #4]
    15fe:	0852      	lsrs	r2, r2, #1
    1600:	801a      	strh	r2, [r3, #0]
    1602:	2201      	movs	r2, #1
    1604:	805a      	strh	r2, [r3, #2]
    1606:	464a      	mov	r2, r9
    1608:	9202      	str	r2, [sp, #8]
    160a:	2200      	movs	r2, #0
    160c:	721a      	strb	r2, [r3, #8]
    160e:	725a      	strb	r2, [r3, #9]
    1610:	729a      	strb	r2, [r3, #10]
        .ten_bit_address    = false,
        .high_speed         = false,
        .hs_master_code     = 0x0,
    };

    *rxlength = 0;
    1612:	4643      	mov	r3, r8
    1614:	801a      	strh	r2, [r3, #0]
    if (rxdata_max_size < 1)
    {
        return ATCA_SMALL_BUFFER;
    1616:	20ed      	movs	r0, #237	; 0xed
    if (rxdata_max_size < 1)
    1618:	4653      	mov	r3, sl
    161a:	2b00      	cmp	r3, #0
    161c:	d105      	bne.n	162a <hal_i2c_receive+0x4e>
    }

    *rxlength = rxdata[0];

    return ATCA_SUCCESS;
}
    161e:	b004      	add	sp, #16
    1620:	bc1c      	pop	{r2, r3, r4}
    1622:	4690      	mov	r8, r2
    1624:	4699      	mov	r9, r3
    1626:	46a2      	mov	sl, r4
    1628:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (rxdata_max_size < 1)
    162a:	2301      	movs	r3, #1
        if (i2c_master_read_packet_wait(&i2c_hal_data[cfg->atcai2c.bus].i2c_master_instance, &packet) != STATUS_OK)
    162c:	4f1d      	ldr	r7, [pc, #116]	; (16a4 <hal_i2c_receive+0xc8>)
    162e:	4e1e      	ldr	r6, [pc, #120]	; (16a8 <hal_i2c_receive+0xcc>)
    1630:	e00c      	b.n	164c <hal_i2c_receive+0x70>
    1632:	796b      	ldrb	r3, [r5, #5]
    1634:	2034      	movs	r0, #52	; 0x34
    1636:	4358      	muls	r0, r3
    1638:	3004      	adds	r0, #4
    163a:	1838      	adds	r0, r7, r0
    163c:	a901      	add	r1, sp, #4
    163e:	47b0      	blx	r6
            status = ATCA_COMM_FAIL;
    1640:	23f0      	movs	r3, #240	; 0xf0
            status = ATCA_SUCCESS;
    1642:	1e42      	subs	r2, r0, #1
    1644:	4190      	sbcs	r0, r2
    1646:	4240      	negs	r0, r0
    1648:	4003      	ands	r3, r0
    164a:	3c01      	subs	r4, #1
    while (retries-- > 0 && status != ATCA_SUCCESS)
    164c:	2c00      	cmp	r4, #0
    164e:	dd1c      	ble.n	168a <hal_i2c_receive+0xae>
    1650:	2b00      	cmp	r3, #0
    1652:	d1ee      	bne.n	1632 <hal_i2c_receive+0x56>
    if (rxdata[0] < ATCA_RSP_SIZE_MIN)
    1654:	464b      	mov	r3, r9
    1656:	781b      	ldrb	r3, [r3, #0]
        return ATCA_INVALID_SIZE;
    1658:	20e4      	movs	r0, #228	; 0xe4
    if (rxdata[0] < ATCA_RSP_SIZE_MIN)
    165a:	2b03      	cmp	r3, #3
    165c:	d9df      	bls.n	161e <hal_i2c_receive+0x42>
    if (rxdata[0] > rxdata_max_size)
    165e:	b29b      	uxth	r3, r3
        return ATCA_SMALL_BUFFER;
    1660:	3009      	adds	r0, #9
    if (rxdata[0] > rxdata_max_size)
    1662:	459a      	cmp	sl, r3
    1664:	d3db      	bcc.n	161e <hal_i2c_receive+0x42>
    packet.data_length = rxdata[0] - 1;
    1666:	a901      	add	r1, sp, #4
    1668:	3b01      	subs	r3, #1
    166a:	804b      	strh	r3, [r1, #2]
    packet.data = &rxdata[1];
    166c:	464b      	mov	r3, r9
    166e:	3301      	adds	r3, #1
    1670:	604b      	str	r3, [r1, #4]
    if (i2c_master_read_packet_wait(&i2c_hal_data[cfg->atcai2c.bus].i2c_master_instance, &packet) != STATUS_OK)
    1672:	796b      	ldrb	r3, [r5, #5]
    1674:	38b9      	subs	r0, #185	; 0xb9
    1676:	4358      	muls	r0, r3
    1678:	3004      	adds	r0, #4
    167a:	4b0a      	ldr	r3, [pc, #40]	; (16a4 <hal_i2c_receive+0xc8>)
    167c:	1818      	adds	r0, r3, r0
    167e:	4b0a      	ldr	r3, [pc, #40]	; (16a8 <hal_i2c_receive+0xcc>)
    1680:	4798      	blx	r3
    1682:	2800      	cmp	r0, #0
    1684:	d005      	beq.n	1692 <hal_i2c_receive+0xb6>
        return status;
    1686:	20f0      	movs	r0, #240	; 0xf0
    1688:	e7c9      	b.n	161e <hal_i2c_receive+0x42>
    if (status != ATCA_SUCCESS)
    168a:	2b00      	cmp	r3, #0
    168c:	d0e2      	beq.n	1654 <hal_i2c_receive+0x78>
        return status;
    168e:	b2d8      	uxtb	r0, r3
    1690:	e7c5      	b.n	161e <hal_i2c_receive+0x42>
    *rxlength = rxdata[0];
    1692:	464b      	mov	r3, r9
    1694:	781b      	ldrb	r3, [r3, #0]
    1696:	4642      	mov	r2, r8
    1698:	8013      	strh	r3, [r2, #0]
    return ATCA_SUCCESS;
    169a:	2000      	movs	r0, #0
    169c:	e7bf      	b.n	161e <hal_i2c_receive+0x42>
    169e:	46c0      	nop			; (mov r8, r8)
    16a0:	00000f19 	.word	0x00000f19
    16a4:	20000a1c 	.word	0x20000a1c
    16a8:	000059a5 	.word	0x000059a5

000016ac <change_i2c_speed>:
 * \param[in] iface  interface on which to change bus speed
 * \param[in] speed  baud rate (typically 100000 or 400000)
 */

void change_i2c_speed(ATCAIface iface, uint32_t speed)
{
    16ac:	b5f0      	push	{r4, r5, r6, r7, lr}
    16ae:	46de      	mov	lr, fp
    16b0:	4657      	mov	r7, sl
    16b2:	464e      	mov	r6, r9
    16b4:	4645      	mov	r5, r8
    16b6:	b5e0      	push	{r5, r6, r7, lr}
    16b8:	b085      	sub	sp, #20
    16ba:	9103      	str	r1, [sp, #12]
    ATCAIfaceCfg *cfg = atgetifacecfg(iface);
    16bc:	4b2d      	ldr	r3, [pc, #180]	; (1774 <change_i2c_speed+0xc8>)
    16be:	4798      	blx	r3
    ATCAI2CMaster_t* data = &i2c_hal_data[cfg->atcai2c.bus];
    16c0:	7943      	ldrb	r3, [r0, #5]

    i2c_master_disable(&data->i2c_master_instance);
    16c2:	4a2d      	ldr	r2, [pc, #180]	; (1778 <change_i2c_speed+0xcc>)
    16c4:	4690      	mov	r8, r2
    16c6:	2534      	movs	r5, #52	; 0x34
    16c8:	9302      	str	r3, [sp, #8]
    16ca:	435d      	muls	r5, r3
    16cc:	1d2c      	adds	r4, r5, #4
    16ce:	4444      	add	r4, r8
    16d0:	9401      	str	r4, [sp, #4]
{
	/* Sanity check of arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    16d2:	1957      	adds	r7, r2, r5
    16d4:	687e      	ldr	r6, [r7, #4]

#if I2C_MASTER_CALLBACK_MODE == true
		/* Disable module interrupts */
		system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
    16d6:	0030      	movs	r0, r6
    16d8:	4c28      	ldr	r4, [pc, #160]	; (177c <change_i2c_speed+0xd0>)
    16da:	46a2      	mov	sl, r4
    16dc:	47a0      	blx	r4
 * \param[in] vector  Interrupt vector to disable
 */
static inline void system_interrupt_disable(
		const enum system_interrupt_vector vector)
{
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    16de:	241f      	movs	r4, #31
    16e0:	4020      	ands	r0, r4
    16e2:	3c1e      	subs	r4, #30
    16e4:	0022      	movs	r2, r4
    16e6:	4082      	lsls	r2, r0
    16e8:	4925      	ldr	r1, [pc, #148]	; (1780 <change_i2c_speed+0xd4>)
    16ea:	4689      	mov	r9, r1
    16ec:	2380      	movs	r3, #128	; 0x80
    16ee:	50ca      	str	r2, [r1, r3]
#endif

	/* Wait for module to sync */
	_i2c_master_wait_for_sync(module);
    16f0:	9801      	ldr	r0, [sp, #4]
    16f2:	4a24      	ldr	r2, [pc, #144]	; (1784 <change_i2c_speed+0xd8>)
    16f4:	4693      	mov	fp, r2
    16f6:	4790      	blx	r2

	/* Disbale interrupt */
	i2c_module->INTENCLR.reg = SERCOM_I2CM_INTENCLR_MASK;
    16f8:	2383      	movs	r3, #131	; 0x83
    16fa:	7533      	strb	r3, [r6, #20]
	/* Clear interrupt flag */
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_MASK;
    16fc:	7633      	strb	r3, [r6, #24]

	/* Disable module */
	i2c_module->CTRLA.reg &= ~SERCOM_I2CM_CTRLA_ENABLE;
    16fe:	6833      	ldr	r3, [r6, #0]
    1700:	2202      	movs	r2, #2
    1702:	4393      	bics	r3, r2
    1704:	6033      	str	r3, [r6, #0]
    config_i2c_master.buffer_timeout = 10000;
    1706:	4e20      	ldr	r6, [pc, #128]	; (1788 <change_i2c_speed+0xdc>)
    1708:	4b20      	ldr	r3, [pc, #128]	; (178c <change_i2c_speed+0xe0>)
    170a:	82f3      	strh	r3, [r6, #22]
    config_i2c_master.baud_rate = speed / 1000;
    170c:	21fa      	movs	r1, #250	; 0xfa
    170e:	0089      	lsls	r1, r1, #2
    1710:	9803      	ldr	r0, [sp, #12]
    1712:	4b1f      	ldr	r3, [pc, #124]	; (1790 <change_i2c_speed+0xe4>)
    1714:	4798      	blx	r3
    1716:	6030      	str	r0, [r6, #0]
    i2c_master_init(&data->i2c_master_instance, data->i2c_sercom, &config_i2c_master);
    1718:	4641      	mov	r1, r8
    171a:	5869      	ldr	r1, [r5, r1]
    171c:	0032      	movs	r2, r6
    171e:	9e01      	ldr	r6, [sp, #4]
    1720:	0030      	movs	r0, r6
    1722:	4b1c      	ldr	r3, [pc, #112]	; (1794 <change_i2c_speed+0xe8>)
    1724:	4798      	blx	r3
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    1726:	687d      	ldr	r5, [r7, #4]
	_i2c_master_wait_for_sync(module);
    1728:	0030      	movs	r0, r6
    172a:	47d8      	blx	fp
	i2c_module->CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
    172c:	682b      	ldr	r3, [r5, #0]
    172e:	2102      	movs	r1, #2
    1730:	430b      	orrs	r3, r1
    1732:	602b      	str	r3, [r5, #0]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    1734:	6878      	ldr	r0, [r7, #4]
    1736:	47d0      	blx	sl
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    1738:	211f      	movs	r1, #31
    173a:	4008      	ands	r0, r1
    173c:	4084      	lsls	r4, r0
    173e:	4649      	mov	r1, r9
    1740:	600c      	str	r4, [r1, #0]
	uint32_t timeout_counter = 0;
    1742:	2300      	movs	r3, #0
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
    1744:	2010      	movs	r0, #16
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
    1746:	2134      	movs	r1, #52	; 0x34
    1748:	9a02      	ldr	r2, [sp, #8]
    174a:	4351      	muls	r1, r2
    174c:	4a0a      	ldr	r2, [pc, #40]	; (1778 <change_i2c_speed+0xcc>)
    174e:	4694      	mov	ip, r2
    1750:	4461      	add	r1, ip
    1752:	310a      	adds	r1, #10
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
    1754:	8b6a      	ldrh	r2, [r5, #26]
    1756:	4202      	tst	r2, r0
    1758:	d105      	bne.n	1766 <change_i2c_speed+0xba>
		timeout_counter++;
    175a:	3301      	adds	r3, #1
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
    175c:	880a      	ldrh	r2, [r1, #0]
    175e:	4293      	cmp	r3, r2
    1760:	d3f8      	bcc.n	1754 <change_i2c_speed+0xa8>
			i2c_module->STATUS.reg = SERCOM_I2CM_STATUS_BUSSTATE(1);
    1762:	2310      	movs	r3, #16
    1764:	836b      	strh	r3, [r5, #26]
    i2c_master_enable(&data->i2c_master_instance);
}
    1766:	b005      	add	sp, #20
    1768:	bc3c      	pop	{r2, r3, r4, r5}
    176a:	4690      	mov	r8, r2
    176c:	4699      	mov	r9, r3
    176e:	46a2      	mov	sl, r4
    1770:	46ab      	mov	fp, r5
    1772:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1774:	00000f19 	.word	0x00000f19
    1778:	20000a1c 	.word	0x20000a1c
    177c:	00006041 	.word	0x00006041
    1780:	e000e100 	.word	0xe000e100
    1784:	000013cd 	.word	0x000013cd
    1788:	200009e8 	.word	0x200009e8
    178c:	00002710 	.word	0x00002710
    1790:	00016641 	.word	0x00016641
    1794:	00005311 	.word	0x00005311

00001798 <hal_i2c_wake>:
 * \param[in] iface  interface to logical device to wakeup
 * \return ATCA_SUCCESS on success, otherwise an error code.
 */

ATCA_STATUS hal_i2c_wake(ATCAIface iface)
{
    1798:	b5f0      	push	{r4, r5, r6, r7, lr}
    179a:	46ce      	mov	lr, r9
    179c:	4647      	mov	r7, r8
    179e:	b580      	push	{r7, lr}
    17a0:	b087      	sub	sp, #28
    17a2:	0004      	movs	r4, r0
    17a4:	9001      	str	r0, [sp, #4]
    ATCAIfaceCfg *cfg = atgetifacecfg(iface);
    17a6:	4b2d      	ldr	r3, [pc, #180]	; (185c <hal_i2c_wake+0xc4>)
    17a8:	4798      	blx	r3
    17aa:	0006      	movs	r6, r0
    int retries = cfg->rx_retries;
    17ac:	6a87      	ldr	r7, [r0, #40]	; 0x28
    uint32_t bdrt = cfg->atcai2c.baud;
    17ae:	6883      	ldr	r3, [r0, #8]
    17b0:	4699      	mov	r9, r3
    int status = !STATUS_OK;
    uint8_t data[4];

    if (bdrt != 100000)    // if not already at 100KHz, change it
    17b2:	4b2b      	ldr	r3, [pc, #172]	; (1860 <hal_i2c_wake+0xc8>)
    17b4:	4599      	cmp	r9, r3
    17b6:	d003      	beq.n	17c0 <hal_i2c_wake+0x28>
    {
        change_i2c_speed(iface, 100000);
    17b8:	0019      	movs	r1, r3
    17ba:	0020      	movs	r0, r4
    17bc:	4b29      	ldr	r3, [pc, #164]	; (1864 <hal_i2c_wake+0xcc>)
    17be:	4798      	blx	r3
    }

    // Send the wake by writing to an address of 0x00
    struct i2c_master_packet packet = {
    17c0:	2200      	movs	r2, #0
    17c2:	2300      	movs	r3, #0
    17c4:	a902      	add	r1, sp, #8
    17c6:	800a      	strh	r2, [r1, #0]
    17c8:	804a      	strh	r2, [r1, #2]
    17ca:	ac05      	add	r4, sp, #20
    17cc:	9403      	str	r4, [sp, #12]
    17ce:	720b      	strb	r3, [r1, #8]
    17d0:	724b      	strb	r3, [r1, #9]
    17d2:	728b      	strb	r3, [r1, #10]
        .hs_master_code     = 0x0,
    };

    // Send the 00 address as the wake pulse
    // part will NACK, so don't check for status
    i2c_master_write_packet_wait(&i2c_hal_data[cfg->atcai2c.bus].i2c_master_instance, &packet);
    17d4:	7973      	ldrb	r3, [r6, #5]
    17d6:	2034      	movs	r0, #52	; 0x34
    17d8:	4358      	muls	r0, r3
    17da:	3004      	adds	r0, #4
    17dc:	4b22      	ldr	r3, [pc, #136]	; (1868 <hal_i2c_wake+0xd0>)
    17de:	1818      	adds	r0, r3, r0
    17e0:	4b22      	ldr	r3, [pc, #136]	; (186c <hal_i2c_wake+0xd4>)
    17e2:	4798      	blx	r3

    // wait tWHI + tWLO which is configured based on device type and configuration structure
    atca_delay_us(cfg->wake_delay);
    17e4:	8cb0      	ldrh	r0, [r6, #36]	; 0x24
    17e6:	4b22      	ldr	r3, [pc, #136]	; (1870 <hal_i2c_wake+0xd8>)
    17e8:	4798      	blx	r3

    packet.address = cfg->atcai2c.slave_address >> 1;
    17ea:	7933      	ldrb	r3, [r6, #4]
    17ec:	085b      	lsrs	r3, r3, #1
    17ee:	aa02      	add	r2, sp, #8
    17f0:	8013      	strh	r3, [r2, #0]
    packet.data_length = 4;
    17f2:	2304      	movs	r3, #4
    17f4:	8053      	strh	r3, [r2, #2]
    packet.data = data;
    17f6:	9403      	str	r4, [sp, #12]

    while (retries-- > 0 && status != STATUS_OK)
    17f8:	1e7c      	subs	r4, r7, #1
    17fa:	2f00      	cmp	r7, #0
    17fc:	dd28      	ble.n	1850 <hal_i2c_wake+0xb8>
    {
        status = i2c_master_read_packet_wait(&i2c_hal_data[cfg->atcai2c.bus].i2c_master_instance, &packet);
    17fe:	4b1a      	ldr	r3, [pc, #104]	; (1868 <hal_i2c_wake+0xd0>)
    1800:	4698      	mov	r8, r3
    1802:	4f1c      	ldr	r7, [pc, #112]	; (1874 <hal_i2c_wake+0xdc>)
    1804:	7973      	ldrb	r3, [r6, #5]
    1806:	2034      	movs	r0, #52	; 0x34
    1808:	4358      	muls	r0, r3
    180a:	3004      	adds	r0, #4
    180c:	4440      	add	r0, r8
    180e:	a902      	add	r1, sp, #8
    1810:	47b8      	blx	r7
    1812:	0005      	movs	r5, r0
    while (retries-- > 0 && status != STATUS_OK)
    1814:	3c01      	subs	r4, #1
    1816:	d310      	bcc.n	183a <hal_i2c_wake+0xa2>
    1818:	2800      	cmp	r0, #0
    181a:	d1f3      	bne.n	1804 <hal_i2c_wake+0x6c>
    }

    // if necessary, revert baud rate to what came in.
    if (bdrt != 100000)
    181c:	4b10      	ldr	r3, [pc, #64]	; (1860 <hal_i2c_wake+0xc8>)
    181e:	4599      	cmp	r9, r3
    1820:	d011      	beq.n	1846 <hal_i2c_wake+0xae>
    {
        change_i2c_speed(iface, bdrt);
    1822:	4649      	mov	r1, r9
    1824:	9801      	ldr	r0, [sp, #4]
    1826:	4b0f      	ldr	r3, [pc, #60]	; (1864 <hal_i2c_wake+0xcc>)
    1828:	4798      	blx	r3
    }

    if (status != STATUS_OK)
    {
        return ATCA_COMM_FAIL;
    182a:	20f0      	movs	r0, #240	; 0xf0
    if (status != STATUS_OK)
    182c:	2d00      	cmp	r5, #0
    182e:	d00a      	beq.n	1846 <hal_i2c_wake+0xae>
    }

    return hal_check_wake(data, 4);
}
    1830:	b007      	add	sp, #28
    1832:	bc0c      	pop	{r2, r3}
    1834:	4690      	mov	r8, r2
    1836:	4699      	mov	r9, r3
    1838:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (bdrt != 100000)
    183a:	4b09      	ldr	r3, [pc, #36]	; (1860 <hal_i2c_wake+0xc8>)
    183c:	4599      	cmp	r9, r3
    183e:	d0f4      	beq.n	182a <hal_i2c_wake+0x92>
    1840:	e7ef      	b.n	1822 <hal_i2c_wake+0x8a>
    int status = !STATUS_OK;
    1842:	2501      	movs	r5, #1
    1844:	e7ed      	b.n	1822 <hal_i2c_wake+0x8a>
    return hal_check_wake(data, 4);
    1846:	2104      	movs	r1, #4
    1848:	a805      	add	r0, sp, #20
    184a:	4b0b      	ldr	r3, [pc, #44]	; (1878 <hal_i2c_wake+0xe0>)
    184c:	4798      	blx	r3
    184e:	e7ef      	b.n	1830 <hal_i2c_wake+0x98>
    if (bdrt != 100000)
    1850:	4b03      	ldr	r3, [pc, #12]	; (1860 <hal_i2c_wake+0xc8>)
    1852:	4599      	cmp	r9, r3
    1854:	d1f5      	bne.n	1842 <hal_i2c_wake+0xaa>
        return ATCA_COMM_FAIL;
    1856:	20f0      	movs	r0, #240	; 0xf0
    1858:	e7ea      	b.n	1830 <hal_i2c_wake+0x98>
    185a:	46c0      	nop			; (mov r8, r8)
    185c:	00000f19 	.word	0x00000f19
    1860:	000186a0 	.word	0x000186a0
    1864:	000016ad 	.word	0x000016ad
    1868:	20000a1c 	.word	0x20000a1c
    186c:	000059c9 	.word	0x000059c9
    1870:	00001949 	.word	0x00001949
    1874:	000059a5 	.word	0x000059a5
    1878:	00001381 	.word	0x00001381

0000187c <hal_i2c_idle>:
 * \param[in] iface  interface to logical device to idle
 * \return ATCA_SUCCESS on success, otherwise an error code.
 */

ATCA_STATUS hal_i2c_idle(ATCAIface iface)
{
    187c:	b500      	push	{lr}
    187e:	b085      	sub	sp, #20
    ATCAIfaceCfg *cfg = atgetifacecfg(iface);
    1880:	4b10      	ldr	r3, [pc, #64]	; (18c4 <hal_i2c_idle+0x48>)
    1882:	4798      	blx	r3
    uint8_t data[4];

    struct i2c_master_packet packet = {
    1884:	7903      	ldrb	r3, [r0, #4]
    1886:	085b      	lsrs	r3, r3, #1
    1888:	466a      	mov	r2, sp
    188a:	8013      	strh	r3, [r2, #0]
    188c:	2301      	movs	r3, #1
    188e:	8053      	strh	r3, [r2, #2]
    1890:	aa03      	add	r2, sp, #12
    1892:	9201      	str	r2, [sp, #4]
    1894:	2300      	movs	r3, #0
    1896:	4669      	mov	r1, sp
    1898:	720b      	strb	r3, [r1, #8]
    189a:	724b      	strb	r3, [r1, #9]
    189c:	728b      	strb	r3, [r1, #10]
        .ten_bit_address    = false,
        .high_speed         = false,
        .hs_master_code     = 0x0,
    };

    data[0] = 0x02;  // idle word address value
    189e:	3302      	adds	r3, #2
    18a0:	7013      	strb	r3, [r2, #0]
    if (i2c_master_write_packet_wait(&i2c_hal_data[cfg->atcai2c.bus].i2c_master_instance, &packet) != STATUS_OK)
    18a2:	7943      	ldrb	r3, [r0, #5]
    18a4:	2034      	movs	r0, #52	; 0x34
    18a6:	4358      	muls	r0, r3
    18a8:	3004      	adds	r0, #4
    18aa:	4b07      	ldr	r3, [pc, #28]	; (18c8 <hal_i2c_idle+0x4c>)
    18ac:	1818      	adds	r0, r3, r0
    18ae:	4b07      	ldr	r3, [pc, #28]	; (18cc <hal_i2c_idle+0x50>)
    18b0:	4798      	blx	r3
    18b2:	0003      	movs	r3, r0
    {
        return ATCA_COMM_FAIL;
    18b4:	20f0      	movs	r0, #240	; 0xf0
    }

    return ATCA_SUCCESS;
    18b6:	1e5a      	subs	r2, r3, #1
    18b8:	4193      	sbcs	r3, r2
    18ba:	425b      	negs	r3, r3
    18bc:	4018      	ands	r0, r3

}
    18be:	b005      	add	sp, #20
    18c0:	bd00      	pop	{pc}
    18c2:	46c0      	nop			; (mov r8, r8)
    18c4:	00000f19 	.word	0x00000f19
    18c8:	20000a1c 	.word	0x20000a1c
    18cc:	000059c9 	.word	0x000059c9

000018d0 <hal_i2c_sleep>:
 * \param[in] iface  interface to logical device to sleep
 * \return ATCA_SUCCESS on success, otherwise an error code.
 */

ATCA_STATUS hal_i2c_sleep(ATCAIface iface)
{
    18d0:	b500      	push	{lr}
    18d2:	b085      	sub	sp, #20
    ATCAIfaceCfg *cfg = atgetifacecfg(iface);
    18d4:	4b10      	ldr	r3, [pc, #64]	; (1918 <hal_i2c_sleep+0x48>)
    18d6:	4798      	blx	r3
    uint8_t data[4];

    struct i2c_master_packet packet = {
    18d8:	7903      	ldrb	r3, [r0, #4]
    18da:	085b      	lsrs	r3, r3, #1
    18dc:	466a      	mov	r2, sp
    18de:	8013      	strh	r3, [r2, #0]
    18e0:	2301      	movs	r3, #1
    18e2:	8053      	strh	r3, [r2, #2]
    18e4:	aa03      	add	r2, sp, #12
    18e6:	9201      	str	r2, [sp, #4]
    18e8:	2300      	movs	r3, #0
    18ea:	4669      	mov	r1, sp
    18ec:	720b      	strb	r3, [r1, #8]
    18ee:	724b      	strb	r3, [r1, #9]
    18f0:	728b      	strb	r3, [r1, #10]
        .ten_bit_address    = false,
        .high_speed         = false,
        .hs_master_code     = 0x0,
    };

    data[0] = 0x01;  // sleep word address value
    18f2:	2301      	movs	r3, #1
    18f4:	7013      	strb	r3, [r2, #0]
    if (i2c_master_write_packet_wait(&i2c_hal_data[cfg->atcai2c.bus].i2c_master_instance, &packet) != STATUS_OK)
    18f6:	7943      	ldrb	r3, [r0, #5]
    18f8:	2034      	movs	r0, #52	; 0x34
    18fa:	4358      	muls	r0, r3
    18fc:	3004      	adds	r0, #4
    18fe:	4b07      	ldr	r3, [pc, #28]	; (191c <hal_i2c_sleep+0x4c>)
    1900:	1818      	adds	r0, r3, r0
    1902:	4b07      	ldr	r3, [pc, #28]	; (1920 <hal_i2c_sleep+0x50>)
    1904:	4798      	blx	r3
    1906:	0003      	movs	r3, r0
    {
        return ATCA_COMM_FAIL;
    1908:	20f0      	movs	r0, #240	; 0xf0
    }

    return ATCA_SUCCESS;
    190a:	1e5a      	subs	r2, r3, #1
    190c:	4193      	sbcs	r3, r2
    190e:	425b      	negs	r3, r3
    1910:	4018      	ands	r0, r3
}
    1912:	b005      	add	sp, #20
    1914:	bd00      	pop	{pc}
    1916:	46c0      	nop			; (mov r8, r8)
    1918:	00000f19 	.word	0x00000f19
    191c:	20000a1c 	.word	0x20000a1c
    1920:	000059c9 	.word	0x000059c9

00001924 <hal_i2c_release>:
 * \param[in] hal_data - opaque pointer to hal data structure - known only to the HAL implementation
 * return ATCA_SUCCESS
 */

ATCA_STATUS hal_i2c_release(void *hal_data)
{
    1924:	b510      	push	{r4, lr}
    1926:	1e04      	subs	r4, r0, #0
    ATCAI2CMaster_t *hal = (ATCAI2CMaster_t*)hal_data;

    // if the use count for this bus has gone to 0 references, disable it.  protect against an unbracketed release
    if (hal && --(hal->ref_ct) <= 0)
    1928:	d004      	beq.n	1934 <hal_i2c_release+0x10>
    192a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    192c:	3b01      	subs	r3, #1
    192e:	62c3      	str	r3, [r0, #44]	; 0x2c
    1930:	2b00      	cmp	r3, #0
    1932:	dd01      	ble.n	1938 <hal_i2c_release+0x14>
        i2c_master_reset(&(hal->i2c_master_instance));
        hal->ref_ct = 0;
    }

    return ATCA_SUCCESS;
}
    1934:	2000      	movs	r0, #0
    1936:	bd10      	pop	{r4, pc}
        i2c_master_reset(&(hal->i2c_master_instance));
    1938:	3004      	adds	r0, #4
    193a:	4b02      	ldr	r3, [pc, #8]	; (1944 <hal_i2c_release+0x20>)
    193c:	4798      	blx	r3
        hal->ref_ct = 0;
    193e:	2300      	movs	r3, #0
    1940:	62e3      	str	r3, [r4, #44]	; 0x2c
    1942:	e7f7      	b.n	1934 <hal_i2c_release+0x10>
    1944:	0000561d 	.word	0x0000561d

00001948 <atca_delay_us>:
/** \brief This function delays for a number of microseconds.
 *
 * \param[in] delay number of 0.001 milliseconds to delay
 */
void atca_delay_us(uint32_t delay)
{
    1948:	b510      	push	{r4, lr}
    // use ASF supplied delay
    delay_us(delay);
    194a:	2800      	cmp	r0, #0
    194c:	d103      	bne.n	1956 <atca_delay_us+0xe>
    194e:	2001      	movs	r0, #1
    1950:	4b02      	ldr	r3, [pc, #8]	; (195c <atca_delay_us+0x14>)
    1952:	4798      	blx	r3
}
    1954:	bd10      	pop	{r4, pc}
    delay_us(delay);
    1956:	4b01      	ldr	r3, [pc, #4]	; (195c <atca_delay_us+0x14>)
    1958:	4798      	blx	r3
    195a:	e7fb      	b.n	1954 <atca_delay_us+0xc>
    195c:	000045a9 	.word	0x000045a9

00001960 <atca_delay_ms>:
 * \param[in] delay number of milliseconds to delay
 */

/* ASF already has delay_ms - see delay.h */
void atca_delay_ms(uint32_t delay)
{
    1960:	b510      	push	{r4, lr}
    // use ASF supplied delay
    delay_ms(delay);
    1962:	2800      	cmp	r0, #0
    1964:	d103      	bne.n	196e <atca_delay_ms+0xe>
    1966:	2001      	movs	r0, #1
    1968:	4b02      	ldr	r3, [pc, #8]	; (1974 <atca_delay_ms+0x14>)
    196a:	4798      	blx	r3
}
    196c:	bd10      	pop	{r4, pc}
    delay_ms(delay);
    196e:	4b02      	ldr	r3, [pc, #8]	; (1978 <atca_delay_ms+0x18>)
    1970:	4798      	blx	r3
    1972:	e7fb      	b.n	196c <atca_delay_ms+0xc>
    1974:	000045a9 	.word	0x000045a9
    1978:	000045d5 	.word	0x000045d5

0000197c <atcah_nonce>:
/** \brief This function calculates host side nonce with the parameters passed.
 *    \param[in, out] param pointer to parameter structure
 *   \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS atcah_nonce(struct atca_nonce_in_out *param)
{
    197c:	b5f0      	push	{r4, r5, r6, r7, lr}
    197e:	46c6      	mov	lr, r8
    1980:	b500      	push	{lr}
    1982:	b08e      	sub	sp, #56	; 0x38
    1984:	0004      	movs	r4, r0
    uint8_t temporary[ATCA_MSG_SIZE_NONCE];
    uint8_t *p_temp;
    uint8_t calc_mode = param->mode & NONCE_MODE_MASK;

    // Check parameters
    if (param->temp_key == NULL || param->num_in == NULL)
    1986:	68c5      	ldr	r5, [r0, #12]
    1988:	2d00      	cmp	r5, #0
    198a:	d050      	beq.n	1a2e <atcah_nonce+0xb2>
    198c:	6846      	ldr	r6, [r0, #4]
    198e:	2e00      	cmp	r6, #0
    1990:	d04f      	beq.n	1a32 <atcah_nonce+0xb6>
    uint8_t calc_mode = param->mode & NONCE_MODE_MASK;
    1992:	7807      	ldrb	r7, [r0, #0]
    {
        return ATCA_BAD_PARAM;
    }

    // Calculate or pass-through the nonce to TempKey->Value
    if ((calc_mode == NONCE_MODE_SEED_UPDATE) || (calc_mode == NONCE_MODE_NO_SEED_UPDATE))
    1994:	2303      	movs	r3, #3
    1996:	403b      	ands	r3, r7
        param->temp_key->gen_dig_data = 0;
        param->temp_key->no_mac_flag = 0;
        param->temp_key->valid = 1;
    }

    return ATCA_SUCCESS;
    1998:	2000      	movs	r0, #0
    if ((calc_mode == NONCE_MODE_SEED_UPDATE) || (calc_mode == NONCE_MODE_NO_SEED_UPDATE))
    199a:	2b01      	cmp	r3, #1
    199c:	d903      	bls.n	19a6 <atcah_nonce+0x2a>
}
    199e:	b00e      	add	sp, #56	; 0x38
    19a0:	bc04      	pop	{r2}
    19a2:	4690      	mov	r8, r2
    19a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if (param->rand_out == NULL)
    19a6:	68a1      	ldr	r1, [r4, #8]
    19a8:	2900      	cmp	r1, #0
    19aa:	d044      	beq.n	1a36 <atcah_nonce+0xba>
        if ((param->zero & NONCE_ZERO_CALC_MASK) == NONCE_ZERO_CALC_TEMPKEY)
    19ac:	2202      	movs	r2, #2
    19ae:	5ea3      	ldrsh	r3, [r4, r2]
    19b0:	2b00      	cmp	r3, #0
    19b2:	db37      	blt.n	1a24 <atcah_nonce+0xa8>
            memcpy(p_temp, param->rand_out, RANDOM_NUM_SIZE);
    19b4:	2220      	movs	r2, #32
    19b6:	4668      	mov	r0, sp
    19b8:	4b20      	ldr	r3, [pc, #128]	; (1a3c <atcah_nonce+0xc0>)
    19ba:	4698      	mov	r8, r3
    19bc:	4798      	blx	r3
            memcpy(p_temp, param->num_in, NONCE_NUMIN_SIZE);
    19be:	2214      	movs	r2, #20
    19c0:	0031      	movs	r1, r6
    19c2:	a808      	add	r0, sp, #32
    19c4:	47c0      	blx	r8
            *p_temp++ = ATCA_NONCE;
    19c6:	2216      	movs	r2, #22
    19c8:	2334      	movs	r3, #52	; 0x34
    19ca:	4669      	mov	r1, sp
    19cc:	54ca      	strb	r2, [r1, r3]
            *p_temp++ = param->mode;
    19ce:	3301      	adds	r3, #1
    19d0:	54cf      	strb	r7, [r1, r3]
            *p_temp++ = 0x00;
    19d2:	2200      	movs	r2, #0
    19d4:	3301      	adds	r3, #1
    19d6:	54ca      	strb	r2, [r1, r3]
            atcac_sw_sha2_256(temporary, ATCA_MSG_SIZE_NONCE, param->temp_key->value);
    19d8:	002a      	movs	r2, r5
    19da:	2137      	movs	r1, #55	; 0x37
    19dc:	4668      	mov	r0, sp
    19de:	4b18      	ldr	r3, [pc, #96]	; (1a40 <atcah_nonce+0xc4>)
    19e0:	4798      	blx	r3
            param->temp_key->source_flag = 0; // Random
    19e2:	68e1      	ldr	r1, [r4, #12]
    19e4:	2340      	movs	r3, #64	; 0x40
    19e6:	5cca      	ldrb	r2, [r1, r3]
    19e8:	2010      	movs	r0, #16
    19ea:	4382      	bics	r2, r0
    19ec:	54ca      	strb	r2, [r1, r3]
            param->temp_key->key_id = 0;
    19ee:	68e1      	ldr	r1, [r4, #12]
    19f0:	5cca      	ldrb	r2, [r1, r3]
    19f2:	3801      	subs	r0, #1
    19f4:	4382      	bics	r2, r0
    19f6:	54ca      	strb	r2, [r1, r3]
            param->temp_key->gen_dig_data = 0;
    19f8:	68e1      	ldr	r1, [r4, #12]
    19fa:	5cca      	ldrb	r2, [r1, r3]
    19fc:	3011      	adds	r0, #17
    19fe:	4382      	bics	r2, r0
    1a00:	54ca      	strb	r2, [r1, r3]
            param->temp_key->no_mac_flag = 0;
    1a02:	68e1      	ldr	r1, [r4, #12]
    1a04:	5cc8      	ldrb	r0, [r1, r3]
    1a06:	227f      	movs	r2, #127	; 0x7f
    1a08:	4002      	ands	r2, r0
    1a0a:	54ca      	strb	r2, [r1, r3]
            param->temp_key->valid = 1;
    1a0c:	68e3      	ldr	r3, [r4, #12]
    1a0e:	3340      	adds	r3, #64	; 0x40
    1a10:	785a      	ldrb	r2, [r3, #1]
    1a12:	2101      	movs	r1, #1
    1a14:	430a      	orrs	r2, r1
    1a16:	705a      	strb	r2, [r3, #1]
        param->temp_key->is_64 = 0;
    1a18:	68e2      	ldr	r2, [r4, #12]
    1a1a:	2100      	movs	r1, #0
    1a1c:	2342      	movs	r3, #66	; 0x42
    1a1e:	54d1      	strb	r1, [r2, r3]
    return ATCA_SUCCESS;
    1a20:	2000      	movs	r0, #0
    1a22:	e7bc      	b.n	199e <atcah_nonce+0x22>
            memcpy(param->temp_key->value, param->rand_out, 32);
    1a24:	2220      	movs	r2, #32
    1a26:	0028      	movs	r0, r5
    1a28:	4b04      	ldr	r3, [pc, #16]	; (1a3c <atcah_nonce+0xc0>)
    1a2a:	4798      	blx	r3
    1a2c:	e7f4      	b.n	1a18 <atcah_nonce+0x9c>
        return ATCA_BAD_PARAM;
    1a2e:	20e2      	movs	r0, #226	; 0xe2
    1a30:	e7b5      	b.n	199e <atcah_nonce+0x22>
    1a32:	20e2      	movs	r0, #226	; 0xe2
    1a34:	e7b3      	b.n	199e <atcah_nonce+0x22>
            return ATCA_BAD_PARAM;
    1a36:	20e2      	movs	r0, #226	; 0xe2
    1a38:	e7b1      	b.n	199e <atcah_nonce+0x22>
    1a3a:	46c0      	nop			; (mov r8, r8)
    1a3c:	00019da5 	.word	0x00019da5
    1a40:	00000fc1 	.word	0x00000fc1

00001a44 <atcah_gen_dig>:

 * \param[in, out] param pointer to parameter structure
 * \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS atcah_gen_dig(struct atca_gen_dig_in_out *param)
{
    1a44:	b530      	push	{r4, r5, lr}
    1a46:	b099      	sub	sp, #100	; 0x64
    1a48:	0004      	movs	r4, r0
    uint8_t temporary[ATCA_MSG_SIZE_GEN_DIG];
    uint8_t *p_temp;

    // Check parameters
    if (param->sn == NULL || param->temp_key == NULL)
    1a4a:	6883      	ldr	r3, [r0, #8]
    1a4c:	2b00      	cmp	r3, #0
    1a4e:	d100      	bne.n	1a52 <atcah_gen_dig+0xe>
    1a50:	e093      	b.n	1b7a <atcah_gen_dig+0x136>
    1a52:	6943      	ldr	r3, [r0, #20]
    1a54:	2b00      	cmp	r3, #0
    1a56:	d100      	bne.n	1a5a <atcah_gen_dig+0x16>
    1a58:	e092      	b.n	1b80 <atcah_gen_dig+0x13c>
    {
        return ATCA_BAD_PARAM;
    }
    if (param->zone != GENDIG_ZONE_SHARED_NONCE && param->stored_value == NULL)
    1a5a:	7805      	ldrb	r5, [r0, #0]
    1a5c:	2d03      	cmp	r5, #3
    1a5e:	d01c      	beq.n	1a9a <atcah_gen_dig+0x56>
    1a60:	68c3      	ldr	r3, [r0, #12]
    1a62:	2b00      	cmp	r3, #0
    1a64:	d100      	bne.n	1a68 <atcah_gen_dig+0x24>
    1a66:	e08d      	b.n	1b84 <atcah_gen_dig+0x140>
    {
        return ATCA_BAD_PARAM;  // Stored value can only be null with the shared_nonce mode
    }
    if ((param->zone == GENDIG_ZONE_SHARED_NONCE || (param->zone == GENDIG_ZONE_DATA && param->is_key_nomac)) && param->other_data == NULL)
    1a68:	2d02      	cmp	r5, #2
    1a6a:	d004      	beq.n	1a76 <atcah_gen_dig+0x32>
    {
        return ATCA_BAD_PARAM;  // Other data is required in these cases
    }
    if (param->zone > 5)
    {
        return ATCA_BAD_PARAM;  // Unknown zone
    1a6c:	20e2      	movs	r0, #226	; 0xe2
    if (param->zone > 5)
    1a6e:	2d05      	cmp	r5, #5
    1a70:	d900      	bls.n	1a74 <atcah_gen_dig+0x30>
    1a72:	e083      	b.n	1b7c <atcah_gen_dig+0x138>
    1a74:	e019      	b.n	1aaa <atcah_gen_dig+0x66>
    if ((param->zone == GENDIG_ZONE_SHARED_NONCE || (param->zone == GENDIG_ZONE_DATA && param->is_key_nomac)) && param->other_data == NULL)
    1a76:	7903      	ldrb	r3, [r0, #4]
    1a78:	2b00      	cmp	r3, #0
    1a7a:	d000      	beq.n	1a7e <atcah_gen_dig+0x3a>
    1a7c:	e086      	b.n	1b8c <atcah_gen_dig+0x148>
    {
        memcpy(p_temp, param->other_data, ATCA_KEY_SIZE);
    }
    else
    {
        memcpy(p_temp, param->stored_value, ATCA_KEY_SIZE);
    1a7e:	2220      	movs	r2, #32
    1a80:	68e1      	ldr	r1, [r4, #12]
    1a82:	4668      	mov	r0, sp
    1a84:	4b44      	ldr	r3, [pc, #272]	; (1b98 <atcah_gen_dig+0x154>)
    1a86:	4798      	blx	r3
    }
    p_temp += ATCA_KEY_SIZE;

    if (param->zone == GENDIG_ZONE_DATA && param->is_key_nomac)
    1a88:	7923      	ldrb	r3, [r4, #4]
    1a8a:	2b00      	cmp	r3, #0
    1a8c:	d012      	beq.n	1ab4 <atcah_gen_dig+0x70>
    {
        // If a key has the SlotConfig.NoMac bit set, then opcode and parameters come from OtherData
        memcpy(p_temp, param->other_data, 4);
    1a8e:	2204      	movs	r2, #4
    1a90:	6921      	ldr	r1, [r4, #16]
    1a92:	a808      	add	r0, sp, #32
    1a94:	4b40      	ldr	r3, [pc, #256]	; (1b98 <atcah_gen_dig+0x154>)
    1a96:	4798      	blx	r3
        p_temp += 4;
    1a98:	e018      	b.n	1acc <atcah_gen_dig+0x88>
    if ((param->zone == GENDIG_ZONE_SHARED_NONCE || (param->zone == GENDIG_ZONE_DATA && param->is_key_nomac)) && param->other_data == NULL)
    1a9a:	6901      	ldr	r1, [r0, #16]
    1a9c:	2900      	cmp	r1, #0
    1a9e:	d100      	bne.n	1aa2 <atcah_gen_dig+0x5e>
    1aa0:	e072      	b.n	1b88 <atcah_gen_dig+0x144>
    if (param->zone == GENDIG_ZONE_SHARED_NONCE && param->key_id & 0x8000)
    1aa2:	2202      	movs	r2, #2
    1aa4:	5e83      	ldrsh	r3, [r0, r2]
    1aa6:	2b00      	cmp	r3, #0
    1aa8:	db44      	blt.n	1b34 <atcah_gen_dig+0xf0>
        memcpy(p_temp, param->stored_value, ATCA_KEY_SIZE);
    1aaa:	2220      	movs	r2, #32
    1aac:	68e1      	ldr	r1, [r4, #12]
    1aae:	4668      	mov	r0, sp
    1ab0:	4b39      	ldr	r3, [pc, #228]	; (1b98 <atcah_gen_dig+0x154>)
    1ab2:	4798      	blx	r3
    }
    else
    {
        // (2) 1 byte Opcode
        *p_temp++ = ATCA_GENDIG;
    1ab4:	2215      	movs	r2, #21
    1ab6:	2320      	movs	r3, #32
    1ab8:	4669      	mov	r1, sp
    1aba:	54ca      	strb	r2, [r1, r3]

        // (3) 1 byte Param1 (zone)
        *p_temp++ = param->zone;
    1abc:	3301      	adds	r3, #1
    1abe:	54cd      	strb	r5, [r1, r3]

        // (4) 2 bytes Param2 (keyID)
        *p_temp++ = (uint8_t)(param->key_id & 0xFF);
    1ac0:	8863      	ldrh	r3, [r4, #2]
    1ac2:	2222      	movs	r2, #34	; 0x22
    1ac4:	548b      	strb	r3, [r1, r2]
        *p_temp++ = (uint8_t)(param->key_id >> 8);
    1ac6:	0a1b      	lsrs	r3, r3, #8
    1ac8:	3201      	adds	r2, #1
    1aca:	548b      	strb	r3, [r1, r2]
    }

    // (5) 1 byte SN[8]
    *p_temp++ = param->sn[8];
    1acc:	68a3      	ldr	r3, [r4, #8]
    1ace:	7a19      	ldrb	r1, [r3, #8]
    1ad0:	2224      	movs	r2, #36	; 0x24
    1ad2:	4668      	mov	r0, sp
    1ad4:	5481      	strb	r1, [r0, r2]

    // (6) 2 bytes SN[0:1]
    *p_temp++ = param->sn[0];
    1ad6:	7819      	ldrb	r1, [r3, #0]
    1ad8:	3201      	adds	r2, #1
    1ada:	5481      	strb	r1, [r0, r2]
    *p_temp++ = param->sn[1];
    1adc:	785a      	ldrb	r2, [r3, #1]
    1ade:	2326      	movs	r3, #38	; 0x26
    1ae0:	54c2      	strb	r2, [r0, r3]

    // (7) 25 zeros
    memset(p_temp, 0, ATCA_GENDIG_ZEROS_SIZE);
    1ae2:	2219      	movs	r2, #25
    1ae4:	2100      	movs	r1, #0
    1ae6:	2027      	movs	r0, #39	; 0x27
    1ae8:	4468      	add	r0, sp
    1aea:	4b2c      	ldr	r3, [pc, #176]	; (1b9c <atcah_gen_dig+0x158>)
    1aec:	4798      	blx	r3
    p_temp += ATCA_GENDIG_ZEROS_SIZE;

    if (param->zone == GENDIG_ZONE_SHARED_NONCE && !(param->key_id & 0x8000))
    1aee:	7823      	ldrb	r3, [r4, #0]
    1af0:	2b03      	cmp	r3, #3
    1af2:	d024      	beq.n	1b3e <atcah_gen_dig+0xfa>
    {
        memcpy(p_temp, param->other_data, ATCA_KEY_SIZE);       // (8) 32 bytes OtherData
    }
    else
    {
        memcpy(p_temp, param->temp_key->value, ATCA_KEY_SIZE);  // (8) 32 bytes TempKey
    1af4:	2220      	movs	r2, #32
    1af6:	6961      	ldr	r1, [r4, #20]
    1af8:	a810      	add	r0, sp, #64	; 0x40
    1afa:	4b27      	ldr	r3, [pc, #156]	; (1b98 <atcah_gen_dig+0x154>)
    1afc:	4798      	blx	r3

    }
    // Calculate SHA256 to get the new TempKey
    atcac_sw_sha2_256(temporary, ATCA_MSG_SIZE_GEN_DIG, param->temp_key->value);
    1afe:	6962      	ldr	r2, [r4, #20]
    1b00:	2160      	movs	r1, #96	; 0x60
    1b02:	4668      	mov	r0, sp
    1b04:	4b26      	ldr	r3, [pc, #152]	; (1ba0 <atcah_gen_dig+0x15c>)
    1b06:	4798      	blx	r3

    // Update TempKey fields
    param->temp_key->valid = 1;
    1b08:	6963      	ldr	r3, [r4, #20]
    1b0a:	3340      	adds	r3, #64	; 0x40
    1b0c:	785a      	ldrb	r2, [r3, #1]
    1b0e:	2101      	movs	r1, #1
    1b10:	430a      	orrs	r2, r1
    1b12:	705a      	strb	r2, [r3, #1]

    if ((param->zone == GENDIG_ZONE_DATA) && (param->key_id <= 15))
    1b14:	7823      	ldrb	r3, [r4, #0]
    1b16:	2b02      	cmp	r3, #2
    1b18:	d01b      	beq.n	1b52 <atcah_gen_dig+0x10e>
        param->temp_key->gen_dig_data = 1;
        param->temp_key->key_id = (param->key_id & 0xF);    // mask lower 4-bit only
    }
    else
    {
        param->temp_key->gen_dig_data = 0;
    1b1a:	6961      	ldr	r1, [r4, #20]
    1b1c:	2340      	movs	r3, #64	; 0x40
    1b1e:	5cca      	ldrb	r2, [r1, r3]
    1b20:	2020      	movs	r0, #32
    1b22:	4382      	bics	r2, r0
    1b24:	54ca      	strb	r2, [r1, r3]
        param->temp_key->key_id = 0;
    1b26:	6961      	ldr	r1, [r4, #20]
    1b28:	5cca      	ldrb	r2, [r1, r3]
    1b2a:	3811      	subs	r0, #17
    1b2c:	4382      	bics	r2, r0
    1b2e:	54ca      	strb	r2, [r1, r3]
    }

    return ATCA_SUCCESS;
    1b30:	2000      	movs	r0, #0
    1b32:	e023      	b.n	1b7c <atcah_gen_dig+0x138>
        memcpy(p_temp, param->other_data, ATCA_KEY_SIZE);
    1b34:	2220      	movs	r2, #32
    1b36:	4668      	mov	r0, sp
    1b38:	4b17      	ldr	r3, [pc, #92]	; (1b98 <atcah_gen_dig+0x154>)
    1b3a:	4798      	blx	r3
    1b3c:	e7ba      	b.n	1ab4 <atcah_gen_dig+0x70>
    if (param->zone == GENDIG_ZONE_SHARED_NONCE && !(param->key_id & 0x8000))
    1b3e:	2202      	movs	r2, #2
    1b40:	5ea3      	ldrsh	r3, [r4, r2]
    1b42:	2b00      	cmp	r3, #0
    1b44:	dbd6      	blt.n	1af4 <atcah_gen_dig+0xb0>
        memcpy(p_temp, param->other_data, ATCA_KEY_SIZE);       // (8) 32 bytes OtherData
    1b46:	2220      	movs	r2, #32
    1b48:	6921      	ldr	r1, [r4, #16]
    1b4a:	a810      	add	r0, sp, #64	; 0x40
    1b4c:	4b12      	ldr	r3, [pc, #72]	; (1b98 <atcah_gen_dig+0x154>)
    1b4e:	4798      	blx	r3
    1b50:	e7d5      	b.n	1afe <atcah_gen_dig+0xba>
    if ((param->zone == GENDIG_ZONE_DATA) && (param->key_id <= 15))
    1b52:	8863      	ldrh	r3, [r4, #2]
    1b54:	2b0f      	cmp	r3, #15
    1b56:	d8e0      	bhi.n	1b1a <atcah_gen_dig+0xd6>
        param->temp_key->gen_dig_data = 1;
    1b58:	6961      	ldr	r1, [r4, #20]
    1b5a:	2240      	movs	r2, #64	; 0x40
    1b5c:	5c8b      	ldrb	r3, [r1, r2]
    1b5e:	2020      	movs	r0, #32
    1b60:	4303      	orrs	r3, r0
    1b62:	548b      	strb	r3, [r1, r2]
        param->temp_key->key_id = (param->key_id & 0xF);    // mask lower 4-bit only
    1b64:	6960      	ldr	r0, [r4, #20]
    1b66:	8861      	ldrh	r1, [r4, #2]
    1b68:	230f      	movs	r3, #15
    1b6a:	4019      	ands	r1, r3
    1b6c:	5c83      	ldrb	r3, [r0, r2]
    1b6e:	240f      	movs	r4, #15
    1b70:	43a3      	bics	r3, r4
    1b72:	430b      	orrs	r3, r1
    1b74:	5483      	strb	r3, [r0, r2]
    return ATCA_SUCCESS;
    1b76:	2000      	movs	r0, #0
        param->temp_key->key_id = (param->key_id & 0xF);    // mask lower 4-bit only
    1b78:	e000      	b.n	1b7c <atcah_gen_dig+0x138>
        return ATCA_BAD_PARAM;
    1b7a:	20e2      	movs	r0, #226	; 0xe2
}
    1b7c:	b019      	add	sp, #100	; 0x64
    1b7e:	bd30      	pop	{r4, r5, pc}
        return ATCA_BAD_PARAM;
    1b80:	20e2      	movs	r0, #226	; 0xe2
    1b82:	e7fb      	b.n	1b7c <atcah_gen_dig+0x138>
        return ATCA_BAD_PARAM;  // Stored value can only be null with the shared_nonce mode
    1b84:	20e2      	movs	r0, #226	; 0xe2
    1b86:	e7f9      	b.n	1b7c <atcah_gen_dig+0x138>
        return ATCA_BAD_PARAM;  // Other data is required in these cases
    1b88:	20e2      	movs	r0, #226	; 0xe2
    1b8a:	e7f7      	b.n	1b7c <atcah_gen_dig+0x138>
    if ((param->zone == GENDIG_ZONE_SHARED_NONCE || (param->zone == GENDIG_ZONE_DATA && param->is_key_nomac)) && param->other_data == NULL)
    1b8c:	6903      	ldr	r3, [r0, #16]
    1b8e:	2b00      	cmp	r3, #0
    1b90:	d000      	beq.n	1b94 <atcah_gen_dig+0x150>
    1b92:	e774      	b.n	1a7e <atcah_gen_dig+0x3a>
        return ATCA_BAD_PARAM;  // Other data is required in these cases
    1b94:	20e2      	movs	r0, #226	; 0xe2
    1b96:	e7f1      	b.n	1b7c <atcah_gen_dig+0x138>
    1b98:	00019da5 	.word	0x00019da5
    1b9c:	00019ec9 	.word	0x00019ec9
    1ba0:	00000fc1 	.word	0x00000fc1

00001ba4 <parser_serial_data_handler>:
};

char aParserData[PARSER_MAX_DATA_LEN];

void parser_serial_data_handler(void)
{
    1ba4:	b510      	push	{r4, lr}
    int rxChar;
   /* verify if there was any character received*/
    if((-1) != (rxChar = sio2host_getchar_nowait()))
    1ba6:	4b05      	ldr	r3, [pc, #20]	; (1bbc <parser_serial_data_handler+0x18>)
    1ba8:	4798      	blx	r3
    1baa:	1c43      	adds	r3, r0, #1
    1bac:	d005      	beq.n	1bba <parser_serial_data_handler+0x16>
    {
        Parser_RxAddChar( (uint8_t)rxChar );
    1bae:	b2c0      	uxtb	r0, r0
    1bb0:	4b03      	ldr	r3, [pc, #12]	; (1bc0 <parser_serial_data_handler+0x1c>)
    1bb2:	4798      	blx	r3
        SYSTEM_PostTask(APP_TASK_ID);
    1bb4:	2010      	movs	r0, #16
    1bb6:	4b03      	ldr	r3, [pc, #12]	; (1bc4 <parser_serial_data_handler+0x20>)
    1bb8:	4798      	blx	r3
    }
}
    1bba:	bd10      	pop	{r4, pc}
    1bbc:	00007db5 	.word	0x00007db5
    1bc0:	0000403d 	.word	0x0000403d
    1bc4:	0000f4bd 	.word	0x0000f4bd

00001bc8 <Parser_Init>:

void Parser_Init(void)
{
    1bc8:	b510      	push	{r4, lr}
    1bca:	b086      	sub	sp, #24
    Parser_RxClearBuffer();
    1bcc:	4b08      	ldr	r3, [pc, #32]	; (1bf0 <Parser_Init+0x28>)
    1bce:	4798      	blx	r3
    /* Initialize LoRaWAN stack */
    Parser_LorawanInit();
    1bd0:	4b08      	ldr	r3, [pc, #32]	; (1bf4 <Parser_Init+0x2c>)
    1bd2:	4798      	blx	r3
	
	{
		PdsFileMarks_t appFileMarks;
		appFileMarks.fileMarkListAddr = appPdsFileOps;
    1bd4:	ab02      	add	r3, sp, #8
		appFileMarks.numItems = (uint8_t)(PDS_APP_FILEID_MAX_VALUE & 0x00FF);
    1bd6:	2201      	movs	r2, #1
    1bd8:	711a      	strb	r2, [r3, #4]
		appFileMarks.itemListAddr = appPdsFileItemList;
		appFileMarks.fIDcb = NULL;
    1bda:	2200      	movs	r2, #0
		PDS_RegFile(PDS_FILE_APP_DATA1_13_IDX, appFileMarks);
    1bdc:	9200      	str	r2, [sp, #0]
    1bde:	4906      	ldr	r1, [pc, #24]	; (1bf8 <Parser_Init+0x30>)
    1be0:	9a03      	ldr	r2, [sp, #12]
    1be2:	4b06      	ldr	r3, [pc, #24]	; (1bfc <Parser_Init+0x34>)
    1be4:	200c      	movs	r0, #12
    1be6:	4c06      	ldr	r4, [pc, #24]	; (1c00 <Parser_Init+0x38>)
    1be8:	47a0      	blx	r4
	}
}
    1bea:	b006      	add	sp, #24
    1bec:	bd10      	pop	{r4, pc}
    1bee:	46c0      	nop			; (mov r8, r8)
    1bf0:	00003fb5 	.word	0x00003fb5
    1bf4:	000022c5 	.word	0x000022c5
    1bf8:	20001384 	.word	0x20001384
    1bfc:	20000000 	.word	0x20000000
    1c00:	0000e3dd 	.word	0x0000e3dd

00001c04 <Parser_Main>:

void Parser_Main (void)
{
    1c04:	b5f0      	push	{r4, r5, r6, r7, lr}
    1c06:	46de      	mov	lr, fp
    1c08:	4657      	mov	r7, sl
    1c0a:	464e      	mov	r6, r9
    1c0c:	4645      	mov	r5, r8
    1c0e:	b5e0      	push	{r5, r6, r7, lr}
    1c10:	b08b      	sub	sp, #44	; 0x2c
    uint8_t cmdTotalNb;
    uint8_t startCmdSize = gParserStartCmdSize;
    1c12:	4b83      	ldr	r3, [pc, #524]	; (1e20 <Parser_Main+0x21c>)
    1c14:	781b      	ldrb	r3, [r3, #0]
    1c16:	4698      	mov	r8, r3
    const parserCmdEntry_t* pStartCmd = gpParserStartCmd;
    1c18:	4b82      	ldr	r3, [pc, #520]	; (1e24 <Parser_Main+0x220>)
    1c1a:	681b      	ldr	r3, [r3, #0]
    1c1c:	9301      	str	r3, [sp, #4]
    uint8_t savedCmdIdx;
    parserCmdEntry_t tempCmd;

    /* verify if there was any character received */
    int rxChar;
    while((-1) != (rxChar = sio2host_getchar_nowait()))
    1c1e:	4c82      	ldr	r4, [pc, #520]	; (1e28 <Parser_Main+0x224>)
    {
        Parser_RxAddChar( (uint8_t)rxChar );
    1c20:	4d82      	ldr	r5, [pc, #520]	; (1e2c <Parser_Main+0x228>)
    while((-1) != (rxChar = sio2host_getchar_nowait()))
    1c22:	e001      	b.n	1c28 <Parser_Main+0x24>
        Parser_RxAddChar( (uint8_t)rxChar );
    1c24:	b2c0      	uxtb	r0, r0
    1c26:	47a8      	blx	r5
    while((-1) != (rxChar = sio2host_getchar_nowait()))
    1c28:	47a0      	blx	r4
    1c2a:	1c43      	adds	r3, r0, #1
    1c2c:	d1fa      	bne.n	1c24 <Parser_Main+0x20>
    }

    /* Verify if an entire command is received */
    if(mRxParserCmd.bCmdStatus)
    1c2e:	4b80      	ldr	r3, [pc, #512]	; (1e30 <Parser_Main+0x22c>)
    1c30:	4a80      	ldr	r2, [pc, #512]	; (1e34 <Parser_Main+0x230>)
    1c32:	5cd3      	ldrb	r3, [r2, r3]
    1c34:	2b00      	cmp	r3, #0
    1c36:	d100      	bne.n	1c3a <Parser_Main+0x36>
    1c38:	e0d7      	b.n	1dea <Parser_Main+0x1e6>
    {
        cmdTotalNb = mRxParserCmd.crtWordIdx + 1;
    1c3a:	4b7f      	ldr	r3, [pc, #508]	; (1e38 <Parser_Main+0x234>)
    1c3c:	5cd3      	ldrb	r3, [r2, r3]
    1c3e:	3301      	adds	r3, #1
    1c40:	b2db      	uxtb	r3, r3
    1c42:	469a      	mov	sl, r3
        crtWordIdx = 0;

        while(cmdTotalNb)
    1c44:	2b00      	cmp	r3, #0
    1c46:	d100      	bne.n	1c4a <Parser_Main+0x46>
    1c48:	e0cd      	b.n	1de6 <Parser_Main+0x1e2>
    1c4a:	2300      	movs	r3, #0
    1c4c:	469b      	mov	fp, r3

    /* Validate and find the group command */
    for(cmdCtr = 0; cmdCtr < nbParserCmd; cmdCtr ++)
    {
        parserCmdEntry = *(pParserCmd + cmdCtr);
        if(strcmp(parserCmdEntry.pCommand, (char*)&mRxParserCmd.cmd[mRxParserCmd.wordStartPos[rxCmdIdx]]) == 0U)
    1c4e:	4691      	mov	r9, r2
    1c50:	4f7a      	ldr	r7, [pc, #488]	; (1e3c <Parser_Main+0x238>)
    1c52:	4646      	mov	r6, r8
    1c54:	46d8      	mov	r8, fp
    1c56:	46d3      	mov	fp, sl
    1c58:	e01b      	b.n	1c92 <Parser_Main+0x8e>
    1c5a:	4656      	mov	r6, sl
            /* Command found */
            break;
        }
    }

    if(cmdCtr < nbParserCmd)
    1c5c:	42a6      	cmp	r6, r4
    1c5e:	d800      	bhi.n	1c62 <Parser_Main+0x5e>
    1c60:	e0c1      	b.n	1de6 <Parser_Main+0x1e2>
    {
        if(parserCmdEntry.pNextParserCmd == NULL)
    1c62:	9b00      	ldr	r3, [sp, #0]
    1c64:	685b      	ldr	r3, [r3, #4]
    1c66:	9303      	str	r3, [sp, #12]
    1c68:	2b00      	cmp	r3, #0
    1c6a:	d02f      	beq.n	1ccc <Parser_Main+0xc8>
                tempCmd = *(pStartCmd + savedCmdIdx);
    1c6c:	0124      	lsls	r4, r4, #4
    1c6e:	9b01      	ldr	r3, [sp, #4]
    1c70:	469c      	mov	ip, r3
    1c72:	4464      	add	r4, ip
                crtWordIdx ++;
    1c74:	4643      	mov	r3, r8
    1c76:	3301      	adds	r3, #1
    1c78:	b2db      	uxtb	r3, r3
    1c7a:	4698      	mov	r8, r3
                cmdTotalNb --;
    1c7c:	465b      	mov	r3, fp
    1c7e:	3b01      	subs	r3, #1
    1c80:	b2db      	uxtb	r3, r3
    1c82:	469b      	mov	fp, r3
                startCmdSize = tempCmd.nextParserCmdSize;
    1c84:	7b26      	ldrb	r6, [r4, #12]
                pStartCmd = tempCmd.pNextParserCmd;
    1c86:	6863      	ldr	r3, [r4, #4]
    1c88:	9301      	str	r3, [sp, #4]
        while(cmdTotalNb)
    1c8a:	465b      	mov	r3, fp
    1c8c:	2b00      	cmp	r3, #0
    1c8e:	d100      	bne.n	1c92 <Parser_Main+0x8e>
    1c90:	e0a9      	b.n	1de6 <Parser_Main+0x1e2>
    parserCmdInfo.pReplyCmd = NULL; // (char*)gapParserStatus[INVALID_PARAM_IDX]; /* Reply with error by default */;
    1c92:	2300      	movs	r3, #0
    1c94:	9309      	str	r3, [sp, #36]	; 0x24
    for(cmdCtr = 0; cmdCtr < nbParserCmd; cmdCtr ++)
    1c96:	2e00      	cmp	r6, #0
    1c98:	d100      	bne.n	1c9c <Parser_Main+0x98>
    1c9a:	e0a4      	b.n	1de6 <Parser_Main+0x1e2>
    1c9c:	9d01      	ldr	r5, [sp, #4]
    1c9e:	2400      	movs	r4, #0
        if(strcmp(parserCmdEntry.pCommand, (char*)&mRxParserCmd.cmd[mRxParserCmd.wordStartPos[rxCmdIdx]]) == 0U)
    1ca0:	4643      	mov	r3, r8
    1ca2:	9302      	str	r3, [sp, #8]
    1ca4:	331d      	adds	r3, #29
    1ca6:	33ff      	adds	r3, #255	; 0xff
    1ca8:	005b      	lsls	r3, r3, #1
    1caa:	444b      	add	r3, r9
    1cac:	3302      	adds	r3, #2
    1cae:	46b2      	mov	sl, r6
    1cb0:	001e      	movs	r6, r3
        parserCmdEntry = *(pParserCmd + cmdCtr);
    1cb2:	9500      	str	r5, [sp, #0]
        if(strcmp(parserCmdEntry.pCommand, (char*)&mRxParserCmd.cmd[mRxParserCmd.wordStartPos[rxCmdIdx]]) == 0U)
    1cb4:	8831      	ldrh	r1, [r6, #0]
    1cb6:	4449      	add	r1, r9
    1cb8:	6828      	ldr	r0, [r5, #0]
    1cba:	47b8      	blx	r7
    1cbc:	2800      	cmp	r0, #0
    1cbe:	d0cc      	beq.n	1c5a <Parser_Main+0x56>
    for(cmdCtr = 0; cmdCtr < nbParserCmd; cmdCtr ++)
    1cc0:	3401      	adds	r4, #1
    1cc2:	b2e4      	uxtb	r4, r4
    1cc4:	3510      	adds	r5, #16
    1cc6:	4554      	cmp	r4, sl
    1cc8:	d1f3      	bne.n	1cb2 <Parser_Main+0xae>
    1cca:	e08c      	b.n	1de6 <Parser_Main+0x1e2>
    1ccc:	46c3      	mov	fp, r8
        parserCmdEntry = *(pParserCmd + cmdCtr);
    1cce:	9b00      	ldr	r3, [sp, #0]
    1cd0:	689c      	ldr	r4, [r3, #8]
        {
            /* No other commands, just execute the callback */
            if(parserCmdEntry.pActionCbFct)
    1cd2:	2c00      	cmp	r4, #0
    1cd4:	d100      	bne.n	1cd8 <Parser_Main+0xd4>
    1cd6:	e086      	b.n	1de6 <Parser_Main+0x1e2>
        parserCmdEntry = *(pParserCmd + cmdCtr);
    1cd8:	7b5a      	ldrb	r2, [r3, #13]
            {
                if((mRxParserCmd.crtWordIdx - rxCmdIdx) == parserCmdEntry.flags)
    1cda:	4b57      	ldr	r3, [pc, #348]	; (1e38 <Parser_Main+0x234>)
    1cdc:	4955      	ldr	r1, [pc, #340]	; (1e34 <Parser_Main+0x230>)
    1cde:	5ccb      	ldrb	r3, [r1, r3]
    1ce0:	9902      	ldr	r1, [sp, #8]
    1ce2:	1a5b      	subs	r3, r3, r1
    1ce4:	4293      	cmp	r3, r2
    1ce6:	d000      	beq.n	1cea <Parser_Main+0xe6>
    1ce8:	e07d      	b.n	1de6 <Parser_Main+0x1e2>
                {
                    uint8_t iCtr = rxCmdIdx + 1;
                    bool bInvalidParam = false;
                    if(parserCmdEntry.flags > 0)
    1cea:	2a00      	cmp	r2, #0
    1cec:	d014      	beq.n	1d18 <Parser_Main+0x114>
                    uint8_t iCtr = rxCmdIdx + 1;
    1cee:	4643      	mov	r3, r8
    1cf0:	3301      	adds	r3, #1
    1cf2:	b2db      	uxtb	r3, r3
                    {
                        do
                        {
                            //Make sure that the parameters are not empty
                            if(mRxParserCmd.wordLen[iCtr ++] == 0)
    1cf4:	4e4f      	ldr	r6, [pc, #316]	; (1e34 <Parser_Main+0x230>)
                            {
                                bInvalidParam = true;
                                break;
                            }
                        }while(iCtr <= mRxParserCmd.crtWordIdx);
    1cf6:	0035      	movs	r5, r6
    1cf8:	484f      	ldr	r0, [pc, #316]	; (1e38 <Parser_Main+0x234>)
                            if(mRxParserCmd.wordLen[iCtr ++] == 0)
    1cfa:	1c59      	adds	r1, r3, #1
    1cfc:	b2c9      	uxtb	r1, r1
    1cfe:	3311      	adds	r3, #17
    1d00:	33ff      	adds	r3, #255	; 0xff
    1d02:	005b      	lsls	r3, r3, #1
    1d04:	18f3      	adds	r3, r6, r3
    1d06:	88db      	ldrh	r3, [r3, #6]
    1d08:	b29b      	uxth	r3, r3
    1d0a:	2b00      	cmp	r3, #0
    1d0c:	d06b      	beq.n	1de6 <Parser_Main+0x1e2>
                        }while(iCtr <= mRxParserCmd.crtWordIdx);
    1d0e:	5c2a      	ldrb	r2, [r5, r0]
    1d10:	b2d2      	uxtb	r2, r2
                            if(mRxParserCmd.wordLen[iCtr ++] == 0)
    1d12:	000b      	movs	r3, r1
                        }while(iCtr <= mRxParserCmd.crtWordIdx);
    1d14:	4291      	cmp	r1, r2
    1d16:	d9f0      	bls.n	1cfa <Parser_Main+0xf6>
                    }

                    if(bInvalidParam == false)
                    {
                        memset(&parserCmdInfo, 0, sizeof(parserCmdInfo_t));
    1d18:	2218      	movs	r2, #24
    1d1a:	2100      	movs	r1, #0
    1d1c:	a804      	add	r0, sp, #16
    1d1e:	4b48      	ldr	r3, [pc, #288]	; (1e40 <Parser_Main+0x23c>)
    1d20:	4798      	blx	r3

                        if((rxCmdIdx + 1U < PARSER_DEF_CMD_MAX_IDX) && (mRxParserCmd.wordLen[rxCmdIdx + 1U] > 0U))
    1d22:	465a      	mov	r2, fp
    1d24:	465b      	mov	r3, fp
    1d26:	3301      	adds	r3, #1
    1d28:	2b09      	cmp	r3, #9
    1d2a:	d965      	bls.n	1df8 <Parser_Main+0x1f4>
                        {
                            parserCmdInfo.pParam1 = (char*)(&mRxParserCmd.cmd[mRxParserCmd.wordStartPos[rxCmdIdx + 1]]);
                        }

                        if((rxCmdIdx + 2U < PARSER_DEF_CMD_MAX_IDX) && (mRxParserCmd.wordLen[rxCmdIdx + 2U] > 0U))
    1d2c:	1c93      	adds	r3, r2, #2
    1d2e:	2b09      	cmp	r3, #9
    1d30:	d810      	bhi.n	1d54 <Parser_Main+0x150>
    1d32:	3311      	adds	r3, #17
    1d34:	33ff      	adds	r3, #255	; 0xff
    1d36:	005b      	lsls	r3, r3, #1
    1d38:	493e      	ldr	r1, [pc, #248]	; (1e34 <Parser_Main+0x230>)
    1d3a:	18cb      	adds	r3, r1, r3
    1d3c:	88db      	ldrh	r3, [r3, #6]
    1d3e:	b29b      	uxth	r3, r3
    1d40:	2b00      	cmp	r3, #0
    1d42:	d007      	beq.n	1d54 <Parser_Main+0x150>
                        {
                            parserCmdInfo.pParam2 = (char*)(&mRxParserCmd.cmd[mRxParserCmd.wordStartPos[rxCmdIdx + 2]]);
    1d44:	9b02      	ldr	r3, [sp, #8]
    1d46:	331f      	adds	r3, #31
    1d48:	33ff      	adds	r3, #255	; 0xff
    1d4a:	005b      	lsls	r3, r3, #1
    1d4c:	18cb      	adds	r3, r1, r3
    1d4e:	885b      	ldrh	r3, [r3, #2]
    1d50:	18c9      	adds	r1, r1, r3
    1d52:	9105      	str	r1, [sp, #20]
                        }

                        if((rxCmdIdx + 3U < PARSER_DEF_CMD_MAX_IDX) && (mRxParserCmd.wordLen[rxCmdIdx + 3U] > 0U))
    1d54:	1cd3      	adds	r3, r2, #3
    1d56:	2b09      	cmp	r3, #9
    1d58:	d810      	bhi.n	1d7c <Parser_Main+0x178>
    1d5a:	3311      	adds	r3, #17
    1d5c:	33ff      	adds	r3, #255	; 0xff
    1d5e:	005b      	lsls	r3, r3, #1
    1d60:	4934      	ldr	r1, [pc, #208]	; (1e34 <Parser_Main+0x230>)
    1d62:	18cb      	adds	r3, r1, r3
    1d64:	88db      	ldrh	r3, [r3, #6]
    1d66:	b29b      	uxth	r3, r3
    1d68:	2b00      	cmp	r3, #0
    1d6a:	d007      	beq.n	1d7c <Parser_Main+0x178>
                        {
                            parserCmdInfo.pParam3 = (char*)(&mRxParserCmd.cmd[mRxParserCmd.wordStartPos[rxCmdIdx + 3]]);
    1d6c:	9b02      	ldr	r3, [sp, #8]
    1d6e:	3320      	adds	r3, #32
    1d70:	33ff      	adds	r3, #255	; 0xff
    1d72:	005b      	lsls	r3, r3, #1
    1d74:	18cb      	adds	r3, r1, r3
    1d76:	885b      	ldrh	r3, [r3, #2]
    1d78:	18c9      	adds	r1, r1, r3
    1d7a:	9106      	str	r1, [sp, #24]
                        }

                        if((rxCmdIdx + 4U < PARSER_DEF_CMD_MAX_IDX) && (mRxParserCmd.wordLen[rxCmdIdx + 4U] > 0U))
    1d7c:	1d13      	adds	r3, r2, #4
    1d7e:	2b09      	cmp	r3, #9
    1d80:	d810      	bhi.n	1da4 <Parser_Main+0x1a0>
    1d82:	3311      	adds	r3, #17
    1d84:	33ff      	adds	r3, #255	; 0xff
    1d86:	005b      	lsls	r3, r3, #1
    1d88:	492a      	ldr	r1, [pc, #168]	; (1e34 <Parser_Main+0x230>)
    1d8a:	18cb      	adds	r3, r1, r3
    1d8c:	88db      	ldrh	r3, [r3, #6]
    1d8e:	b29b      	uxth	r3, r3
    1d90:	2b00      	cmp	r3, #0
    1d92:	d007      	beq.n	1da4 <Parser_Main+0x1a0>
                        {
                            parserCmdInfo.pParam4 = (char*)(&mRxParserCmd.cmd[mRxParserCmd.wordStartPos[rxCmdIdx + 4]]);
    1d94:	9b02      	ldr	r3, [sp, #8]
    1d96:	3321      	adds	r3, #33	; 0x21
    1d98:	33ff      	adds	r3, #255	; 0xff
    1d9a:	005b      	lsls	r3, r3, #1
    1d9c:	18cb      	adds	r3, r1, r3
    1d9e:	885b      	ldrh	r3, [r3, #2]
    1da0:	18c9      	adds	r1, r1, r3
    1da2:	9107      	str	r1, [sp, #28]
                        }

                        if((rxCmdIdx + 5U < PARSER_DEF_CMD_MAX_IDX) && (mRxParserCmd.wordLen[rxCmdIdx + 5U] > 0U))
    1da4:	3205      	adds	r2, #5
    1da6:	2a09      	cmp	r2, #9
    1da8:	d811      	bhi.n	1dce <Parser_Main+0x1ca>
    1daa:	3211      	adds	r2, #17
    1dac:	32ff      	adds	r2, #255	; 0xff
    1dae:	0052      	lsls	r2, r2, #1
    1db0:	4b20      	ldr	r3, [pc, #128]	; (1e34 <Parser_Main+0x230>)
    1db2:	189a      	adds	r2, r3, r2
    1db4:	88d3      	ldrh	r3, [r2, #6]
    1db6:	b29b      	uxth	r3, r3
    1db8:	2b00      	cmp	r3, #0
    1dba:	d008      	beq.n	1dce <Parser_Main+0x1ca>
                        {
                            parserCmdInfo.pParam5 = (char*)(&mRxParserCmd.cmd[mRxParserCmd.wordStartPos[rxCmdIdx + 5]]);
    1dbc:	4a1d      	ldr	r2, [pc, #116]	; (1e34 <Parser_Main+0x230>)
    1dbe:	9b02      	ldr	r3, [sp, #8]
    1dc0:	3322      	adds	r3, #34	; 0x22
    1dc2:	33ff      	adds	r3, #255	; 0xff
    1dc4:	005b      	lsls	r3, r3, #1
    1dc6:	18d3      	adds	r3, r2, r3
    1dc8:	885b      	ldrh	r3, [r3, #2]
    1dca:	18d2      	adds	r2, r2, r3
    1dcc:	9208      	str	r2, [sp, #32]
                        }

                        /* Execute callback */
                        parserCmdEntry.pActionCbFct(&parserCmdInfo);
    1dce:	a804      	add	r0, sp, #16
    1dd0:	47a0      	blx	r4
            /* DO not send a reply yet */
            parserCmdInfo.pReplyCmd = NULL;
        }
    }

    if(parserCmdInfo.pReplyCmd)
    1dd2:	9c09      	ldr	r4, [sp, #36]	; 0x24
    1dd4:	2c00      	cmp	r4, #0
    1dd6:	d006      	beq.n	1de6 <Parser_Main+0x1e2>
    {
        Parser_TxAddReply(parserCmdInfo.pReplyCmd, strlen(parserCmdInfo.pReplyCmd));
    1dd8:	0020      	movs	r0, r4
    1dda:	4b1a      	ldr	r3, [pc, #104]	; (1e44 <Parser_Main+0x240>)
    1ddc:	4798      	blx	r3
    1dde:	b281      	uxth	r1, r0
    1de0:	0020      	movs	r0, r4
    1de2:	4b19      	ldr	r3, [pc, #100]	; (1e48 <Parser_Main+0x244>)
    1de4:	4798      	blx	r3
        Parser_RxClearBuffer();
    1de6:	4b19      	ldr	r3, [pc, #100]	; (1e4c <Parser_Main+0x248>)
    1de8:	4798      	blx	r3
}
    1dea:	b00b      	add	sp, #44	; 0x2c
    1dec:	bc3c      	pop	{r2, r3, r4, r5}
    1dee:	4690      	mov	r8, r2
    1df0:	4699      	mov	r9, r3
    1df2:	46a2      	mov	sl, r4
    1df4:	46ab      	mov	fp, r5
    1df6:	bdf0      	pop	{r4, r5, r6, r7, pc}
                        if((rxCmdIdx + 1U < PARSER_DEF_CMD_MAX_IDX) && (mRxParserCmd.wordLen[rxCmdIdx + 1U] > 0U))
    1df8:	3311      	adds	r3, #17
    1dfa:	33ff      	adds	r3, #255	; 0xff
    1dfc:	005b      	lsls	r3, r3, #1
    1dfe:	490d      	ldr	r1, [pc, #52]	; (1e34 <Parser_Main+0x230>)
    1e00:	18cb      	adds	r3, r1, r3
    1e02:	88db      	ldrh	r3, [r3, #6]
    1e04:	b29b      	uxth	r3, r3
    1e06:	2b00      	cmp	r3, #0
    1e08:	d100      	bne.n	1e0c <Parser_Main+0x208>
    1e0a:	e78f      	b.n	1d2c <Parser_Main+0x128>
                            parserCmdInfo.pParam1 = (char*)(&mRxParserCmd.cmd[mRxParserCmd.wordStartPos[rxCmdIdx + 1]]);
    1e0c:	9b02      	ldr	r3, [sp, #8]
    1e0e:	331e      	adds	r3, #30
    1e10:	33ff      	adds	r3, #255	; 0xff
    1e12:	005b      	lsls	r3, r3, #1
    1e14:	18cb      	adds	r3, r1, r3
    1e16:	885b      	ldrh	r3, [r3, #2]
    1e18:	18c9      	adds	r1, r1, r3
    1e1a:	9104      	str	r1, [sp, #16]
    1e1c:	e786      	b.n	1d2c <Parser_Main+0x128>
    1e1e:	46c0      	nop			; (mov r8, r8)
    1e20:	0001ebf1 	.word	0x0001ebf1
    1e24:	20000008 	.word	0x20000008
    1e28:	00007db5 	.word	0x00007db5
    1e2c:	0000403d 	.word	0x0000403d
    1e30:	0000024e 	.word	0x0000024e
    1e34:	20001f98 	.word	0x20001f98
    1e38:	0000024f 	.word	0x0000024f
    1e3c:	0001a275 	.word	0x0001a275
    1e40:	00019ec9 	.word	0x00019ec9
    1e44:	0001a2fd 	.word	0x0001a2fd
    1e48:	00004001 	.word	0x00004001
    1e4c:	00003fb5 	.word	0x00003fb5

00001e50 <Parser_GetCustomID>:
{
    1e50:	b5f0      	push	{r4, r5, r6, r7, lr}
    1e52:	46ce      	mov	lr, r9
    1e54:	4647      	mov	r7, r8
    1e56:	b580      	push	{r7, lr}
		const uint8_t gpio_pin)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	return (port_base->IN.reg & pin_mask);
    1e58:	4b2a      	ldr	r3, [pc, #168]	; (1f04 <Parser_GetCustomID+0xb4>)
    1e5a:	6a1a      	ldr	r2, [r3, #32]
    1e5c:	2380      	movs	r3, #128	; 0x80
    1e5e:	4013      	ands	r3, r2
	if(port_pin_get_input_level(PIN_PA07))AddressPins[1]='0';
    1e60:	425a      	negs	r2, r3
    1e62:	4153      	adcs	r3, r2
    1e64:	2230      	movs	r2, #48	; 0x30
    1e66:	4694      	mov	ip, r2
    1e68:	449c      	add	ip, r3
    1e6a:	4b26      	ldr	r3, [pc, #152]	; (1f04 <Parser_GetCustomID+0xb4>)
    1e6c:	6a1f      	ldr	r7, [r3, #32]
    1e6e:	2380      	movs	r3, #128	; 0x80
    1e70:	005b      	lsls	r3, r3, #1
    1e72:	401f      	ands	r7, r3
	if(port_pin_get_input_level(PIN_PA08))AddressPins[2]='0';
    1e74:	427b      	negs	r3, r7
    1e76:	415f      	adcs	r7, r3
    1e78:	3730      	adds	r7, #48	; 0x30
    1e7a:	4b22      	ldr	r3, [pc, #136]	; (1f04 <Parser_GetCustomID+0xb4>)
    1e7c:	6a1e      	ldr	r6, [r3, #32]
    1e7e:	2380      	movs	r3, #128	; 0x80
    1e80:	051b      	lsls	r3, r3, #20
    1e82:	401e      	ands	r6, r3
	if(port_pin_get_input_level(PIN_PA27))AddressPins[3]='0';
    1e84:	4273      	negs	r3, r6
    1e86:	415e      	adcs	r6, r3
    1e88:	3630      	adds	r6, #48	; 0x30
    1e8a:	4b1e      	ldr	r3, [pc, #120]	; (1f04 <Parser_GetCustomID+0xb4>)
    1e8c:	6a1d      	ldr	r5, [r3, #32]
    1e8e:	2380      	movs	r3, #128	; 0x80
    1e90:	02db      	lsls	r3, r3, #11
    1e92:	401d      	ands	r5, r3
	if(port_pin_get_input_level(PIN_PA18))AddressPins[4]='0';
    1e94:	426b      	negs	r3, r5
    1e96:	415d      	adcs	r5, r3
    1e98:	3530      	adds	r5, #48	; 0x30
    1e9a:	4b1a      	ldr	r3, [pc, #104]	; (1f04 <Parser_GetCustomID+0xb4>)
    1e9c:	6a1c      	ldr	r4, [r3, #32]
    1e9e:	2380      	movs	r3, #128	; 0x80
    1ea0:	031b      	lsls	r3, r3, #12
    1ea2:	401c      	ands	r4, r3
	if(port_pin_get_input_level(PIN_PA19))AddressPins[5]='0';
    1ea4:	4263      	negs	r3, r4
    1ea6:	415c      	adcs	r4, r3
    1ea8:	3430      	adds	r4, #48	; 0x30
    1eaa:	4b16      	ldr	r3, [pc, #88]	; (1f04 <Parser_GetCustomID+0xb4>)
    1eac:	6a19      	ldr	r1, [r3, #32]
    1eae:	2380      	movs	r3, #128	; 0x80
    1eb0:	021b      	lsls	r3, r3, #8
    1eb2:	4019      	ands	r1, r3
	if(port_pin_get_input_level(PIN_PA15))AddressPins[6]='0';
    1eb4:	424b      	negs	r3, r1
    1eb6:	4159      	adcs	r1, r3
    1eb8:	3130      	adds	r1, #48	; 0x30
    1eba:	4b12      	ldr	r3, [pc, #72]	; (1f04 <Parser_GetCustomID+0xb4>)
    1ebc:	6a1a      	ldr	r2, [r3, #32]
    1ebe:	2380      	movs	r3, #128	; 0x80
    1ec0:	055b      	lsls	r3, r3, #21
    1ec2:	401a      	ands	r2, r3
	if(port_pin_get_input_level(PIN_PA28))AddressPins[7]='0';
    1ec4:	4253      	negs	r3, r2
    1ec6:	415a      	adcs	r2, r3
    1ec8:	2330      	movs	r3, #48	; 0x30
    1eca:	4699      	mov	r9, r3
    1ecc:	4491      	add	r9, r2
    1ece:	4b0d      	ldr	r3, [pc, #52]	; (1f04 <Parser_GetCustomID+0xb4>)
    1ed0:	6a1b      	ldr	r3, [r3, #32]
    1ed2:	2280      	movs	r2, #128	; 0x80
    1ed4:	01d2      	lsls	r2, r2, #7
    1ed6:	4013      	ands	r3, r2
	if(port_pin_get_input_level(PIN_PA14))AddressPins[8]='0';
    1ed8:	425a      	negs	r2, r3
    1eda:	415a      	adcs	r2, r3
    1edc:	0013      	movs	r3, r2
    1ede:	3330      	adds	r3, #48	; 0x30
	memcpy(pBuffData, AddressPins, sizeof(AddressPins));
    1ee0:	2239      	movs	r2, #57	; 0x39
    1ee2:	7002      	strb	r2, [r0, #0]
    1ee4:	4662      	mov	r2, ip
    1ee6:	7042      	strb	r2, [r0, #1]
    1ee8:	7087      	strb	r7, [r0, #2]
    1eea:	70c6      	strb	r6, [r0, #3]
    1eec:	7105      	strb	r5, [r0, #4]
    1eee:	7144      	strb	r4, [r0, #5]
    1ef0:	7181      	strb	r1, [r0, #6]
    1ef2:	464a      	mov	r2, r9
    1ef4:	71c2      	strb	r2, [r0, #7]
    1ef6:	7203      	strb	r3, [r0, #8]
    1ef8:	2300      	movs	r3, #0
    1efa:	7243      	strb	r3, [r0, #9]
}
    1efc:	bc0c      	pop	{r2, r3}
    1efe:	4690      	mov	r8, r2
    1f00:	4699      	mov	r9, r3
    1f02:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1f04:	40002800 	.word	0x40002800

00001f08 <Parser_GetSwVersion>:
{
    1f08:	b570      	push	{r4, r5, r6, lr}
    1f0a:	0004      	movs	r4, r0
    memcpy(pBuffData, HW_STR, sizeof(HW_STR));
    1f0c:	220b      	movs	r2, #11
    1f0e:	490d      	ldr	r1, [pc, #52]	; (1f44 <Parser_GetSwVersion+0x3c>)
    1f10:	4d0d      	ldr	r5, [pc, #52]	; (1f48 <Parser_GetSwVersion+0x40>)
    1f12:	47a8      	blx	r5
    pBuffData[sizeof(HW_STR) - 1] = ' ';
    1f14:	2620      	movs	r6, #32
    1f16:	72a6      	strb	r6, [r4, #10]
    memcpy(&pBuffData[sizeof(HW_STR)], VER_STR, sizeof(VER_STR));
    1f18:	0020      	movs	r0, r4
    1f1a:	300b      	adds	r0, #11
    1f1c:	2210      	movs	r2, #16
    1f1e:	490b      	ldr	r1, [pc, #44]	; (1f4c <Parser_GetSwVersion+0x44>)
    1f20:	47a8      	blx	r5
    pBuffData[sizeof(HW_STR) + sizeof(VER_STR) - 1] = ' ';
    1f22:	76a6      	strb	r6, [r4, #26]
    memcpy(&pBuffData[sizeof(HW_STR) + sizeof(VER_STR)], __DATE__, sizeof(__DATE__));
    1f24:	0020      	movs	r0, r4
    1f26:	301b      	adds	r0, #27
    1f28:	220c      	movs	r2, #12
    1f2a:	4909      	ldr	r1, [pc, #36]	; (1f50 <Parser_GetSwVersion+0x48>)
    1f2c:	47a8      	blx	r5
    pBuffData[sizeof(HW_STR) + sizeof(VER_STR) + sizeof(__DATE__) - 1] = ' ';
    1f2e:	2326      	movs	r3, #38	; 0x26
    1f30:	54e6      	strb	r6, [r4, r3]
    memcpy(&pBuffData[sizeof(HW_STR) + sizeof(VER_STR) + sizeof(__DATE__)], __TIME__, sizeof(__TIME__));
    1f32:	0020      	movs	r0, r4
    1f34:	3027      	adds	r0, #39	; 0x27
    1f36:	2209      	movs	r2, #9
    1f38:	4906      	ldr	r1, [pc, #24]	; (1f54 <Parser_GetSwVersion+0x4c>)
    1f3a:	47a8      	blx	r5
    pBuffData[sizeof(HW_STR) + sizeof(VER_STR) + sizeof(__DATE__) + sizeof(__TIME__)] = '\0';
    1f3c:	2200      	movs	r2, #0
    1f3e:	2330      	movs	r3, #48	; 0x30
    1f40:	54e2      	strb	r2, [r4, r3]
}
    1f42:	bd70      	pop	{r4, r5, r6, pc}
    1f44:	0001ebc0 	.word	0x0001ebc0
    1f48:	00019da5 	.word	0x00019da5
    1f4c:	0001ebcc 	.word	0x0001ebcc
    1f50:	0001ebdc 	.word	0x0001ebdc
    1f54:	0001ebe8 	.word	0x0001ebe8

00001f58 <ParserJoinData>:
	
	appHandle = NULL;
}

static void ParserJoinData(StackRetStatus_t status)
{
    1f58:	b510      	push	{r4, lr}
    uint8_t statusIdx = JOIN_DENY_STR_IDX;

    //TODO: make sure this does not interfere with the receiving commands

    //This is called every time the join process is finished
    if(LORAWAN_SUCCESS == status)
    1f5a:	2808      	cmp	r0, #8
    1f5c:	d012      	beq.n	1f84 <ParserJoinData+0x2c>
    {
        //Sucessful join
        statusIdx = JOIN_ACCEPT_STR_IDX;
    }
	else if (LORAWAN_NO_CHANNELS_FOUND == status)
    1f5e:	2810      	cmp	r0, #16
    1f60:	d012      	beq.n	1f88 <ParserJoinData+0x30>
	{
		statusIdx = JOIN_NO_FREE_CHANNEL_STR_IDX;
	}
	else if (LORAWAN_TX_TIMEOUT == status)
    1f62:	281b      	cmp	r0, #27
    1f64:	d012      	beq.n	1f8c <ParserJoinData+0x34>
	{
		statusIdx = JOIN_TX_TIMEOUT_STR_IDX;
	}
	else if (LORAWAN_MIC_ERROR == status)
	{
		statusIdx = JOIN_MIC_ERROR_STR_IDX;
    1f66:	3818      	subs	r0, #24
    1f68:	4243      	negs	r3, r0
    1f6a:	4158      	adcs	r0, r3
    1f6c:	0080      	lsls	r0, r0, #2
	}
				
    Parser_TxAddReply((char*)gapParseJoinStatus[statusIdx], strlen((char*)gapParseJoinStatus[statusIdx]));
    1f6e:	0080      	lsls	r0, r0, #2
    1f70:	4b07      	ldr	r3, [pc, #28]	; (1f90 <ParserJoinData+0x38>)
    1f72:	58c4      	ldr	r4, [r0, r3]
    1f74:	0020      	movs	r0, r4
    1f76:	4b07      	ldr	r3, [pc, #28]	; (1f94 <ParserJoinData+0x3c>)
    1f78:	4798      	blx	r3
    1f7a:	b281      	uxth	r1, r0
    1f7c:	0020      	movs	r0, r4
    1f7e:	4b06      	ldr	r3, [pc, #24]	; (1f98 <ParserJoinData+0x40>)
    1f80:	4798      	blx	r3
}
    1f82:	bd10      	pop	{r4, pc}
        statusIdx = JOIN_ACCEPT_STR_IDX;
    1f84:	2001      	movs	r0, #1
    1f86:	e7f2      	b.n	1f6e <ParserJoinData+0x16>
		statusIdx = JOIN_NO_FREE_CHANNEL_STR_IDX;
    1f88:	2002      	movs	r0, #2
    1f8a:	e7f0      	b.n	1f6e <ParserJoinData+0x16>
		statusIdx = JOIN_TX_TIMEOUT_STR_IDX;
    1f8c:	2003      	movs	r0, #3
    1f8e:	e7ee      	b.n	1f6e <ParserJoinData+0x16>
    1f90:	0001f89c 	.word	0x0001f89c
    1f94:	0001a2fd 	.word	0x0001a2fd
    1f98:	00004001 	.word	0x00004001

00001f9c <ParserAppData>:
{
    1f9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (data->evt == LORAWAN_EVT_RX_DATA_AVAILABLE)
    1f9e:	780b      	ldrb	r3, [r1, #0]
    1fa0:	2b02      	cmp	r3, #2
    1fa2:	d003      	beq.n	1fac <ParserAppData+0x10>
    else if(data->evt == LORAWAN_EVT_TRANSACTION_COMPLETE)
    1fa4:	2b04      	cmp	r3, #4
    1fa6:	d100      	bne.n	1faa <ParserAppData+0xe>
    1fa8:	e09c      	b.n	20e4 <STACK_SIZE+0xe4>
}
    1faa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        switch(status)
    1fac:	7b4b      	ldrb	r3, [r1, #13]
    1fae:	3b08      	subs	r3, #8
    1fb0:	b2da      	uxtb	r2, r3
    1fb2:	2a16      	cmp	r2, #22
    1fb4:	d8f9      	bhi.n	1faa <ParserAppData+0xe>
    1fb6:	0093      	lsls	r3, r2, #2
    1fb8:	4a97      	ldr	r2, [pc, #604]	; (2218 <STACK_SIZE+0x218>)
    1fba:	58d3      	ldr	r3, [r2, r3]
    1fbc:	469f      	mov	pc, r3
        uint8_t dataLength = data->param.rxData.dataLength;
    1fbe:	7b0d      	ldrb	r5, [r1, #12]
                if((dataLength > 0U) && (NULL != pData))
    1fc0:	2d00      	cmp	r5, #0
    1fc2:	d030      	beq.n	2026 <STACK_SIZE+0x26>
        uint8_t *pData = data->param.rxData.pData;
    1fc4:	688e      	ldr	r6, [r1, #8]
                if((dataLength > 0U) && (NULL != pData))
    1fc6:	2e00      	cmp	r6, #0
    1fc8:	d02d      	beq.n	2026 <STACK_SIZE+0x26>
                    strcpy(aParserData, gapParserRxStatus[MAC_RX_DATA_STR_IDX]);
    1fca:	4c94      	ldr	r4, [pc, #592]	; (221c <STACK_SIZE+0x21c>)
    1fcc:	2208      	movs	r2, #8
    1fce:	4994      	ldr	r1, [pc, #592]	; (2220 <STACK_SIZE+0x220>)
    1fd0:	0020      	movs	r0, r4
    1fd2:	4b94      	ldr	r3, [pc, #592]	; (2224 <STACK_SIZE+0x224>)
    1fd4:	4798      	blx	r3
                    dataLen = strlen(aParserData);
    1fd6:	0020      	movs	r0, r4
    1fd8:	4f93      	ldr	r7, [pc, #588]	; (2228 <STACK_SIZE+0x228>)
    1fda:	47b8      	blx	r7
                    itoa( *pData, &aParserData[dataLen],10);
    1fdc:	0401      	lsls	r1, r0, #16
    1fde:	0c09      	lsrs	r1, r1, #16
    1fe0:	1909      	adds	r1, r1, r4
    1fe2:	7830      	ldrb	r0, [r6, #0]
    1fe4:	220a      	movs	r2, #10
    1fe6:	4b91      	ldr	r3, [pc, #580]	; (222c <STACK_SIZE+0x22c>)
    1fe8:	4798      	blx	r3
                    dataLen = strlen(aParserData);
    1fea:	0020      	movs	r0, r4
    1fec:	47b8      	blx	r7
                    aParserData[dataLen] = ' ';
    1fee:	0403      	lsls	r3, r0, #16
    1ff0:	0c1b      	lsrs	r3, r3, #16
    1ff2:	2220      	movs	r2, #32
    1ff4:	54e2      	strb	r2, [r4, r3]
                    dataLen ++;
    1ff6:	3001      	adds	r0, #1
    1ff8:	b280      	uxth	r0, r0
                    Parser_IntArrayToHexAscii(maxDataLenToTx, &pData[1],  &aParserData[dataLen]);
    1ffa:	1902      	adds	r2, r0, r4
    1ffc:	1c71      	adds	r1, r6, #1
                    maxDataLenToTx = ((dataLength - 1) <= ((uint16_t)((PARSER_MAX_DATA_LEN - dataLen) >> 1))) ? (dataLength - 1) : ((uint16_t)((PARSER_MAX_DATA_LEN - dataLen) >> 1));
    1ffe:	4b8c      	ldr	r3, [pc, #560]	; (2230 <STACK_SIZE+0x230>)
    2000:	1a1b      	subs	r3, r3, r0
    2002:	03db      	lsls	r3, r3, #15
    2004:	3d01      	subs	r5, #1
    2006:	0c1b      	lsrs	r3, r3, #16
    2008:	42ab      	cmp	r3, r5
    200a:	dd00      	ble.n	200e <STACK_SIZE+0xe>
    200c:	002b      	movs	r3, r5
                    Parser_IntArrayToHexAscii(maxDataLenToTx, &pData[1],  &aParserData[dataLen]);
    200e:	b2d8      	uxtb	r0, r3
    2010:	4b88      	ldr	r3, [pc, #544]	; (2234 <STACK_SIZE+0x234>)
    2012:	4798      	blx	r3
                    Parser_TxAddReply(aParserData, strlen(aParserData));
    2014:	4c81      	ldr	r4, [pc, #516]	; (221c <STACK_SIZE+0x21c>)
    2016:	0020      	movs	r0, r4
    2018:	4b83      	ldr	r3, [pc, #524]	; (2228 <STACK_SIZE+0x228>)
    201a:	4798      	blx	r3
    201c:	b281      	uxth	r1, r0
    201e:	0020      	movs	r0, r4
    2020:	4b85      	ldr	r3, [pc, #532]	; (2238 <STACK_SIZE+0x238>)
    2022:	4798      	blx	r3
    2024:	e7c1      	b.n	1faa <ParserAppData+0xe>
                    Parser_TxAddReply((char*)gapParserRxStatus[MAC_ACK_RXED_STR_IDX], strlen((char*)gapParserRxStatus[MAC_ACK_RXED_STR_IDX]));
    2026:	210c      	movs	r1, #12
    2028:	4884      	ldr	r0, [pc, #528]	; (223c <STACK_SIZE+0x23c>)
    202a:	4b83      	ldr	r3, [pc, #524]	; (2238 <STACK_SIZE+0x238>)
    202c:	4798      	blx	r3
    202e:	e7bc      	b.n	1faa <ParserAppData+0xe>
				Parser_TxAddReply((char*)gapParserLorawanStatus[NOT_JOINED_STR_IDX], strlen((char*)gapParserRxStatus[RADIO_ERR_STR_IDX]));
    2030:	2109      	movs	r1, #9
    2032:	4883      	ldr	r0, [pc, #524]	; (2240 <STACK_SIZE+0x240>)
    2034:	4b80      	ldr	r3, [pc, #512]	; (2238 <STACK_SIZE+0x238>)
    2036:	4798      	blx	r3
				break;
    2038:	e7b7      	b.n	1faa <ParserAppData+0xe>
				Parser_TxAddReply((char*)gapParserLorawanStatus[INVALID_PARAM_STR_IDX], strlen((char*)gapParserLorawanStatus[INVALID_PARAM_STR_IDX]));
    203a:	210d      	movs	r1, #13
    203c:	4881      	ldr	r0, [pc, #516]	; (2244 <STACK_SIZE+0x244>)
    203e:	4b7e      	ldr	r3, [pc, #504]	; (2238 <STACK_SIZE+0x238>)
    2040:	4798      	blx	r3
				break;
    2042:	e7b2      	b.n	1faa <ParserAppData+0xe>
				Parser_TxAddReply((char*)gapParserLorawanStatus[KEYS_NOT_INIT_STR_IDX], strlen((char*)gapParserLorawanStatus[KEYS_NOT_INIT_STR_IDX]));
    2044:	210d      	movs	r1, #13
    2046:	4880      	ldr	r0, [pc, #512]	; (2248 <STACK_SIZE+0x248>)
    2048:	4b7b      	ldr	r3, [pc, #492]	; (2238 <STACK_SIZE+0x238>)
    204a:	4798      	blx	r3
				break;
    204c:	e7ad      	b.n	1faa <ParserAppData+0xe>
				Parser_TxAddReply((char*)gapParserLorawanStatus[SILENT_STR_IDX], strlen((char*)gapParserLorawanStatus[SILENT_STR_IDX]));
    204e:	2106      	movs	r1, #6
    2050:	487e      	ldr	r0, [pc, #504]	; (224c <STACK_SIZE+0x24c>)
    2052:	4b79      	ldr	r3, [pc, #484]	; (2238 <STACK_SIZE+0x238>)
    2054:	4798      	blx	r3
				break;
    2056:	e7a8      	b.n	1faa <ParserAppData+0xe>
				Parser_TxAddReply((char*)gapParserLorawanStatus[FRAME_CNTR_ERR_REJOIN_NEEDED_STR_IDX], strlen((char*)gapParserLorawanStatus[FRAME_CNTR_ERR_REJOIN_NEEDED_STR_IDX]));
    2058:	211e      	movs	r1, #30
    205a:	487d      	ldr	r0, [pc, #500]	; (2250 <STACK_SIZE+0x250>)
    205c:	4b76      	ldr	r3, [pc, #472]	; (2238 <STACK_SIZE+0x238>)
    205e:	4798      	blx	r3
				break;
    2060:	e7a3      	b.n	1faa <ParserAppData+0xe>
				Parser_TxAddReply((char*)gapParserRxStatus[INVALID_FCNTR_STR_IDX], strlen((char*)gapParserRxStatus[INVALID_FCNTR_STR_IDX]));
    2062:	210d      	movs	r1, #13
    2064:	487b      	ldr	r0, [pc, #492]	; (2254 <STACK_SIZE+0x254>)
    2066:	4b74      	ldr	r3, [pc, #464]	; (2238 <STACK_SIZE+0x238>)
    2068:	4798      	blx	r3
				break;
    206a:	e79e      	b.n	1faa <ParserAppData+0xe>
				Parser_TxAddReply((char*)gapParserRxStatus[MIC_ERROR_STR_IDX], strlen((char*)gapParserRxStatus[MIC_ERROR_STR_IDX]));
    206c:	2109      	movs	r1, #9
    206e:	487a      	ldr	r0, [pc, #488]	; (2258 <STACK_SIZE+0x258>)
    2070:	4b71      	ldr	r3, [pc, #452]	; (2238 <STACK_SIZE+0x238>)
    2072:	4798      	blx	r3
				break;
    2074:	e799      	b.n	1faa <ParserAppData+0xe>
				Parser_TxAddReply((char*)gapParserRxStatus[INVALID_MTYPE_STR_IDX], strlen((char*)gapParserRxStatus[INVALID_MTYPE_STR_IDX]));
    2076:	210d      	movs	r1, #13
    2078:	4878      	ldr	r0, [pc, #480]	; (225c <STACK_SIZE+0x25c>)
    207a:	4b6f      	ldr	r3, [pc, #444]	; (2238 <STACK_SIZE+0x238>)
    207c:	4798      	blx	r3
				break;
    207e:	e794      	b.n	1faa <ParserAppData+0xe>
				Parser_TxAddReply((char*)gapParserRxStatus[INVALID_BUFFER_LEN_STR_IDX], strlen((char*)gapParserRxStatus[INVALID_BUFFER_LEN_STR_IDX]));
    2080:	2115      	movs	r1, #21
    2082:	4877      	ldr	r0, [pc, #476]	; (2260 <STACK_SIZE+0x260>)
    2084:	4b6c      	ldr	r3, [pc, #432]	; (2238 <STACK_SIZE+0x238>)
    2086:	4798      	blx	r3
				break;
    2088:	e78f      	b.n	1faa <ParserAppData+0xe>
				Parser_TxAddReply((char*)gapParserLorawanStatus[MAC_PAUSED_STR_IDX], strlen((char*)gapParserLorawanStatus[MAC_PAUSED_STR_IDX]));
    208a:	210a      	movs	r1, #10
    208c:	4875      	ldr	r0, [pc, #468]	; (2264 <STACK_SIZE+0x264>)
    208e:	4b6a      	ldr	r3, [pc, #424]	; (2238 <STACK_SIZE+0x238>)
    2090:	4798      	blx	r3
				break;
    2092:	e78a      	b.n	1faa <ParserAppData+0xe>
				Parser_TxAddReply((char*)gapParserRxStatus[MCAST_HDR_INVALID_STR_IDX], strlen((char*)gapParserRxStatus[MCAST_HDR_INVALID_STR_IDX]));
    2094:	2111      	movs	r1, #17
    2096:	4874      	ldr	r0, [pc, #464]	; (2268 <STACK_SIZE+0x268>)
    2098:	4b67      	ldr	r3, [pc, #412]	; (2238 <STACK_SIZE+0x238>)
    209a:	4798      	blx	r3
				break;
    209c:	e785      	b.n	1faa <ParserAppData+0xe>
				Parser_TxAddReply((char*)gapParserLorawanStatus[NO_FREE_CHANNEL_STR_IDX], strlen((char*)gapParserLorawanStatus[NO_FREE_CHANNEL_STR_IDX]));
    209e:	210a      	movs	r1, #10
    20a0:	4872      	ldr	r0, [pc, #456]	; (226c <STACK_SIZE+0x26c>)
    20a2:	4b65      	ldr	r3, [pc, #404]	; (2238 <STACK_SIZE+0x238>)
    20a4:	4798      	blx	r3
				break;
    20a6:	e780      	b.n	1faa <ParserAppData+0xe>
				Parser_TxAddReply((char*)gapParserLorawanStatus[BUSY_STR_IDX], strlen((char*)gapParserLorawanStatus[BUSY_STR_IDX]));
    20a8:	2104      	movs	r1, #4
    20aa:	4871      	ldr	r0, [pc, #452]	; (2270 <STACK_SIZE+0x270>)
    20ac:	4b62      	ldr	r3, [pc, #392]	; (2238 <STACK_SIZE+0x238>)
    20ae:	4798      	blx	r3
				break;
    20b0:	e77b      	b.n	1faa <ParserAppData+0xe>
				Parser_TxAddReply((char*)gapParserRxStatus[NO_ACK_STR_IDX], strlen((char*)gapParserRxStatus[NO_ACK_STR_IDX]));
    20b2:	2107      	movs	r1, #7
    20b4:	486f      	ldr	r0, [pc, #444]	; (2274 <STACK_SIZE+0x274>)
    20b6:	4b60      	ldr	r3, [pc, #384]	; (2238 <STACK_SIZE+0x238>)
    20b8:	4798      	blx	r3
				break;
    20ba:	e776      	b.n	1faa <ParserAppData+0xe>
				Parser_TxAddReply((char*)gapParserLorawanStatus[JOIN_IN_PROGRESS_STR_IDX], strlen((char*)gapParserLorawanStatus[JOIN_IN_PROGRESS_STR_IDX]));
    20bc:	2110      	movs	r1, #16
    20be:	486e      	ldr	r0, [pc, #440]	; (2278 <STACK_SIZE+0x278>)
    20c0:	4b5d      	ldr	r3, [pc, #372]	; (2238 <STACK_SIZE+0x238>)
    20c2:	4798      	blx	r3
				break;
    20c4:	e771      	b.n	1faa <ParserAppData+0xe>
				Parser_TxAddReply((char*)gapParserLorawanStatus[RESOURCE_UNAVAILABLE_STR_IDX], strlen((char*)gapParserLorawanStatus[RESOURCE_UNAVAILABLE_STR_IDX]));
    20c6:	2114      	movs	r1, #20
    20c8:	486c      	ldr	r0, [pc, #432]	; (227c <STACK_SIZE+0x27c>)
    20ca:	4b5b      	ldr	r3, [pc, #364]	; (2238 <STACK_SIZE+0x238>)
    20cc:	4798      	blx	r3
				break;
    20ce:	e76c      	b.n	1faa <ParserAppData+0xe>
				Parser_TxAddReply((char*)gapParserLorawanStatus[INVALID_REQ_STR_IDX], strlen((char*)gapParserLorawanStatus[INVALID_REQ_STR_IDX]));
    20d0:	210f      	movs	r1, #15
    20d2:	486b      	ldr	r0, [pc, #428]	; (2280 <STACK_SIZE+0x280>)
    20d4:	4b58      	ldr	r3, [pc, #352]	; (2238 <STACK_SIZE+0x238>)
    20d6:	4798      	blx	r3
				break;	
    20d8:	e767      	b.n	1faa <ParserAppData+0xe>
           		Parser_TxAddReply((char*)gapParserLorawanStatus[INVALID_PACKET_STR_IDX], strlen((char*)gapParserLorawanStatus[INVALID_PACKET_STR_IDX]));
    20da:	210e      	movs	r1, #14
    20dc:	4869      	ldr	r0, [pc, #420]	; (2284 <STACK_SIZE+0x284>)
    20de:	4b56      	ldr	r3, [pc, #344]	; (2238 <STACK_SIZE+0x238>)
    20e0:	4798      	blx	r3
           		break;
    20e2:	e762      	b.n	1faa <ParserAppData+0xe>
        switch(data->param.transCmpl.status)
    20e4:	790b      	ldrb	r3, [r1, #4]
    20e6:	2b1e      	cmp	r3, #30
    20e8:	d900      	bls.n	20ec <STACK_SIZE+0xec>
    20ea:	e75e      	b.n	1faa <ParserAppData+0xe>
    20ec:	009b      	lsls	r3, r3, #2
    20ee:	4a66      	ldr	r2, [pc, #408]	; (2288 <STACK_SIZE+0x288>)
    20f0:	58d3      	ldr	r3, [r2, r3]
    20f2:	469f      	mov	pc, r3
		        Parser_TxAddReply((char*)gapParserTxStatus[MAC_TX_OK_STR_IDX], strlen((char*)gapParserTxStatus[MAC_TX_OK_STR_IDX]));
    20f4:	2109      	movs	r1, #9
    20f6:	4865      	ldr	r0, [pc, #404]	; (228c <STACK_SIZE+0x28c>)
    20f8:	4b4f      	ldr	r3, [pc, #316]	; (2238 <STACK_SIZE+0x238>)
    20fa:	4798      	blx	r3
	        break;
    20fc:	e755      	b.n	1faa <ParserAppData+0xe>
		        Parser_TxAddReply((char*)gapParserTxStatus[RADIO_TX_OK_STR_IDX], strlen((char*)gapParserTxStatus[RADIO_TX_OK_STR_IDX]));
    20fe:	210b      	movs	r1, #11
    2100:	4863      	ldr	r0, [pc, #396]	; (2290 <STACK_SIZE+0x290>)
    2102:	4b4d      	ldr	r3, [pc, #308]	; (2238 <STACK_SIZE+0x238>)
    2104:	4798      	blx	r3
	        break;
    2106:	e750      	b.n	1faa <ParserAppData+0xe>
				Parser_TxAddReply((char*)gapParserLorawanStatus[RADIO_NO_DATA_STR_IDX], strlen((char*)gapParserLorawanStatus[RADIO_NO_DATA_STR_IDX]));
    2108:	210d      	movs	r1, #13
    210a:	4862      	ldr	r0, [pc, #392]	; (2294 <STACK_SIZE+0x294>)
    210c:	4b4a      	ldr	r3, [pc, #296]	; (2238 <STACK_SIZE+0x238>)
    210e:	4798      	blx	r3
			    break;
    2110:	e74b      	b.n	1faa <ParserAppData+0xe>
				Parser_TxAddReply((char*)gapParserLorawanStatus[RADIO_TX_TIMEOUT_IDX], strlen((char*)gapParserLorawanStatus[RADIO_TX_TIMEOUT_IDX]));
    2112:	2110      	movs	r1, #16
    2114:	4860      	ldr	r0, [pc, #384]	; (2298 <STACK_SIZE+0x298>)
    2116:	4b48      	ldr	r3, [pc, #288]	; (2238 <STACK_SIZE+0x238>)
    2118:	4798      	blx	r3
				break;
    211a:	e746      	b.n	1faa <ParserAppData+0xe>
				Parser_TxAddReply((char*)gapParserLorawanStatus[TX_TIMEOUT_IDX], strlen((char*)gapParserLorawanStatus[TX_TIMEOUT_IDX]));
    211c:	210a      	movs	r1, #10
    211e:	485f      	ldr	r0, [pc, #380]	; (229c <STACK_SIZE+0x29c>)
    2120:	4b45      	ldr	r3, [pc, #276]	; (2238 <STACK_SIZE+0x238>)
    2122:	4798      	blx	r3
				break;				
    2124:	e741      	b.n	1faa <ParserAppData+0xe>
				Parser_TxAddReply((char*)gapParserLorawanStatus[RADIO_DATA_SIZE_STR_IDX], strlen((char*)gapParserLorawanStatus[RADIO_DATA_SIZE_STR_IDX]));
    2126:	210f      	movs	r1, #15
    2128:	485d      	ldr	r0, [pc, #372]	; (22a0 <STACK_SIZE+0x2a0>)
    212a:	4b43      	ldr	r3, [pc, #268]	; (2238 <STACK_SIZE+0x238>)
    212c:	4798      	blx	r3
				break;
    212e:	e73c      	b.n	1faa <ParserAppData+0xe>
				Parser_TxAddReply((char*)gapParserLorawanStatus[RADIO_INVALID_REQ_STR_IDX], strlen((char*)gapParserLorawanStatus[RADIO_INVALID_REQ_STR_IDX]));
    2130:	2111      	movs	r1, #17
    2132:	485c      	ldr	r0, [pc, #368]	; (22a4 <STACK_SIZE+0x2a4>)
    2134:	4b40      	ldr	r3, [pc, #256]	; (2238 <STACK_SIZE+0x238>)
    2136:	4798      	blx	r3
				break;
    2138:	e737      	b.n	1faa <ParserAppData+0xe>
				Parser_TxAddReply((char*)gapParserLorawanStatus[LORAWAN_RADIO_BUSY_STR_IDX], strlen((char*)gapParserLorawanStatus[LORAWAN_RADIO_BUSY_STR_IDX]));
    213a:	210a      	movs	r1, #10
    213c:	485a      	ldr	r0, [pc, #360]	; (22a8 <STACK_SIZE+0x2a8>)
    213e:	4b3e      	ldr	r3, [pc, #248]	; (2238 <STACK_SIZE+0x238>)
    2140:	4798      	blx	r3
				break;
    2142:	e732      	b.n	1faa <ParserAppData+0xe>
				Parser_TxAddReply((char*)gapParserLorawanStatus[RADIO_OUT_OF_RANGE_STR_IDX], strlen((char*)gapParserLorawanStatus[RADIO_OUT_OF_RANGE_STR_IDX]));
    2144:	2112      	movs	r1, #18
    2146:	4859      	ldr	r0, [pc, #356]	; (22ac <STACK_SIZE+0x2ac>)
    2148:	4b3b      	ldr	r3, [pc, #236]	; (2238 <STACK_SIZE+0x238>)
    214a:	4798      	blx	r3
				break;
    214c:	e72d      	b.n	1faa <ParserAppData+0xe>
				Parser_TxAddReply((char*)gapParserLorawanStatus[RADIO_UNSUP_ATTR_STR_IDX], strlen((char*)gapParserLorawanStatus[RADIO_UNSUP_ATTR_STR_IDX]));
    214e:	2110      	movs	r1, #16
    2150:	4857      	ldr	r0, [pc, #348]	; (22b0 <STACK_SIZE+0x2b0>)
    2152:	4b39      	ldr	r3, [pc, #228]	; (2238 <STACK_SIZE+0x238>)
    2154:	4798      	blx	r3
				break;
    2156:	e728      	b.n	1faa <ParserAppData+0xe>
				Parser_TxAddReply((char*)gapParserLorawanStatus[RADIO_CHANNEL_BUSY_STR_IDX], strlen((char*)gapParserLorawanStatus[RADIO_CHANNEL_BUSY_STR_IDX]));
    2158:	2112      	movs	r1, #18
    215a:	4856      	ldr	r0, [pc, #344]	; (22b4 <STACK_SIZE+0x2b4>)
    215c:	4b36      	ldr	r3, [pc, #216]	; (2238 <STACK_SIZE+0x238>)
    215e:	4798      	blx	r3
				break;
    2160:	e723      	b.n	1faa <ParserAppData+0xe>
				Parser_TxAddReply((char*)gapParserLorawanStatus[NOT_JOINED_STR_IDX], strlen((char*)gapParserRxStatus[RADIO_ERR_STR_IDX]));
    2162:	2109      	movs	r1, #9
    2164:	4836      	ldr	r0, [pc, #216]	; (2240 <STACK_SIZE+0x240>)
    2166:	4b34      	ldr	r3, [pc, #208]	; (2238 <STACK_SIZE+0x238>)
    2168:	4798      	blx	r3
				break;
    216a:	e71e      	b.n	1faa <ParserAppData+0xe>
				Parser_TxAddReply((char*)gapParserLorawanStatus[INVALID_PARAM_STR_IDX], strlen((char*)gapParserLorawanStatus[INVALID_PARAM_STR_IDX]));
    216c:	210d      	movs	r1, #13
    216e:	4835      	ldr	r0, [pc, #212]	; (2244 <STACK_SIZE+0x244>)
    2170:	4b31      	ldr	r3, [pc, #196]	; (2238 <STACK_SIZE+0x238>)
    2172:	4798      	blx	r3
				break;
    2174:	e719      	b.n	1faa <ParserAppData+0xe>
				Parser_TxAddReply((char*)gapParserLorawanStatus[KEYS_NOT_INIT_STR_IDX], strlen((char*)gapParserLorawanStatus[KEYS_NOT_INIT_STR_IDX]));
    2176:	210d      	movs	r1, #13
    2178:	4833      	ldr	r0, [pc, #204]	; (2248 <STACK_SIZE+0x248>)
    217a:	4b2f      	ldr	r3, [pc, #188]	; (2238 <STACK_SIZE+0x238>)
    217c:	4798      	blx	r3
				break;
    217e:	e714      	b.n	1faa <ParserAppData+0xe>
				Parser_TxAddReply((char*)gapParserLorawanStatus[SILENT_STR_IDX], strlen((char*)gapParserLorawanStatus[SILENT_STR_IDX]));
    2180:	2106      	movs	r1, #6
    2182:	4832      	ldr	r0, [pc, #200]	; (224c <STACK_SIZE+0x24c>)
    2184:	4b2c      	ldr	r3, [pc, #176]	; (2238 <STACK_SIZE+0x238>)
    2186:	4798      	blx	r3
				break;
    2188:	e70f      	b.n	1faa <ParserAppData+0xe>
				Parser_TxAddReply((char*)gapParserLorawanStatus[FRAME_CNTR_ERR_REJOIN_NEEDED_STR_IDX], strlen((char*)gapParserLorawanStatus[FRAME_CNTR_ERR_REJOIN_NEEDED_STR_IDX]));
    218a:	211e      	movs	r1, #30
    218c:	4830      	ldr	r0, [pc, #192]	; (2250 <STACK_SIZE+0x250>)
    218e:	4b2a      	ldr	r3, [pc, #168]	; (2238 <STACK_SIZE+0x238>)
    2190:	4798      	blx	r3
				break;
    2192:	e70a      	b.n	1faa <ParserAppData+0xe>
				Parser_TxAddReply((char*)gapParserRxStatus[INVALID_FCNTR_STR_IDX], strlen((char*)gapParserRxStatus[INVALID_FCNTR_STR_IDX]));
    2194:	210d      	movs	r1, #13
    2196:	482f      	ldr	r0, [pc, #188]	; (2254 <STACK_SIZE+0x254>)
    2198:	4b27      	ldr	r3, [pc, #156]	; (2238 <STACK_SIZE+0x238>)
    219a:	4798      	blx	r3
				break;
    219c:	e705      	b.n	1faa <ParserAppData+0xe>
				Parser_TxAddReply((char*)gapParserRxStatus[MIC_ERROR_STR_IDX], strlen((char*)gapParserRxStatus[MIC_ERROR_STR_IDX]));
    219e:	2109      	movs	r1, #9
    21a0:	482d      	ldr	r0, [pc, #180]	; (2258 <STACK_SIZE+0x258>)
    21a2:	4b25      	ldr	r3, [pc, #148]	; (2238 <STACK_SIZE+0x238>)
    21a4:	4798      	blx	r3
				break;
    21a6:	e700      	b.n	1faa <ParserAppData+0xe>
				Parser_TxAddReply((char*)gapParserRxStatus[INVALID_MTYPE_STR_IDX], strlen((char*)gapParserRxStatus[INVALID_MTYPE_STR_IDX]));
    21a8:	210d      	movs	r1, #13
    21aa:	482c      	ldr	r0, [pc, #176]	; (225c <STACK_SIZE+0x25c>)
    21ac:	4b22      	ldr	r3, [pc, #136]	; (2238 <STACK_SIZE+0x238>)
    21ae:	4798      	blx	r3
				break;
    21b0:	e6fb      	b.n	1faa <ParserAppData+0xe>
				Parser_TxAddReply((char*)gapParserRxStatus[INVALID_BUFFER_LEN_STR_IDX], strlen((char*)gapParserRxStatus[INVALID_BUFFER_LEN_STR_IDX]));
    21b2:	2115      	movs	r1, #21
    21b4:	482a      	ldr	r0, [pc, #168]	; (2260 <STACK_SIZE+0x260>)
    21b6:	4b20      	ldr	r3, [pc, #128]	; (2238 <STACK_SIZE+0x238>)
    21b8:	4798      	blx	r3
				break;
    21ba:	e6f6      	b.n	1faa <ParserAppData+0xe>
				Parser_TxAddReply((char*)gapParserLorawanStatus[MAC_PAUSED_STR_IDX], strlen((char*)gapParserLorawanStatus[MAC_PAUSED_STR_IDX]));
    21bc:	210a      	movs	r1, #10
    21be:	4829      	ldr	r0, [pc, #164]	; (2264 <STACK_SIZE+0x264>)
    21c0:	4b1d      	ldr	r3, [pc, #116]	; (2238 <STACK_SIZE+0x238>)
    21c2:	4798      	blx	r3
				break;
    21c4:	e6f1      	b.n	1faa <ParserAppData+0xe>
				Parser_TxAddReply((char*)gapParserRxStatus[MCAST_HDR_INVALID_STR_IDX], strlen((char*)gapParserRxStatus[MCAST_HDR_INVALID_STR_IDX]));
    21c6:	2111      	movs	r1, #17
    21c8:	4827      	ldr	r0, [pc, #156]	; (2268 <STACK_SIZE+0x268>)
    21ca:	4b1b      	ldr	r3, [pc, #108]	; (2238 <STACK_SIZE+0x238>)
    21cc:	4798      	blx	r3
				break;
    21ce:	e6ec      	b.n	1faa <ParserAppData+0xe>
				Parser_TxAddReply((char*)gapParserLorawanStatus[NO_FREE_CHANNEL_STR_IDX], strlen((char*)gapParserLorawanStatus[NO_FREE_CHANNEL_STR_IDX]));
    21d0:	210a      	movs	r1, #10
    21d2:	4826      	ldr	r0, [pc, #152]	; (226c <STACK_SIZE+0x26c>)
    21d4:	4b18      	ldr	r3, [pc, #96]	; (2238 <STACK_SIZE+0x238>)
    21d6:	4798      	blx	r3
				break;
    21d8:	e6e7      	b.n	1faa <ParserAppData+0xe>
				Parser_TxAddReply((char*)gapParserLorawanStatus[BUSY_STR_IDX], strlen((char*)gapParserLorawanStatus[BUSY_STR_IDX]));
    21da:	2104      	movs	r1, #4
    21dc:	4824      	ldr	r0, [pc, #144]	; (2270 <STACK_SIZE+0x270>)
    21de:	4b16      	ldr	r3, [pc, #88]	; (2238 <STACK_SIZE+0x238>)
    21e0:	4798      	blx	r3
				break;
    21e2:	e6e2      	b.n	1faa <ParserAppData+0xe>
				Parser_TxAddReply((char*)gapParserRxStatus[NO_ACK_STR_IDX], strlen((char*)gapParserRxStatus[NO_ACK_STR_IDX]));
    21e4:	2107      	movs	r1, #7
    21e6:	4823      	ldr	r0, [pc, #140]	; (2274 <STACK_SIZE+0x274>)
    21e8:	4b13      	ldr	r3, [pc, #76]	; (2238 <STACK_SIZE+0x238>)
    21ea:	4798      	blx	r3
				break;
    21ec:	e6dd      	b.n	1faa <ParserAppData+0xe>
				Parser_TxAddReply((char*)gapParserLorawanStatus[JOIN_IN_PROGRESS_STR_IDX], strlen((char*)gapParserLorawanStatus[JOIN_IN_PROGRESS_STR_IDX]));
    21ee:	2110      	movs	r1, #16
    21f0:	4821      	ldr	r0, [pc, #132]	; (2278 <STACK_SIZE+0x278>)
    21f2:	4b11      	ldr	r3, [pc, #68]	; (2238 <STACK_SIZE+0x238>)
    21f4:	4798      	blx	r3
				break;
    21f6:	e6d8      	b.n	1faa <ParserAppData+0xe>
				Parser_TxAddReply((char*)gapParserLorawanStatus[RESOURCE_UNAVAILABLE_STR_IDX], strlen((char*)gapParserLorawanStatus[RESOURCE_UNAVAILABLE_STR_IDX]));
    21f8:	2114      	movs	r1, #20
    21fa:	4820      	ldr	r0, [pc, #128]	; (227c <STACK_SIZE+0x27c>)
    21fc:	4b0e      	ldr	r3, [pc, #56]	; (2238 <STACK_SIZE+0x238>)
    21fe:	4798      	blx	r3
				break;
    2200:	e6d3      	b.n	1faa <ParserAppData+0xe>
				Parser_TxAddReply((char*)gapParserLorawanStatus[INVALID_REQ_STR_IDX], strlen((char*)gapParserLorawanStatus[INVALID_REQ_STR_IDX]));
    2202:	210f      	movs	r1, #15
    2204:	481e      	ldr	r0, [pc, #120]	; (2280 <STACK_SIZE+0x280>)
    2206:	4b0c      	ldr	r3, [pc, #48]	; (2238 <STACK_SIZE+0x238>)
    2208:	4798      	blx	r3
				break;
    220a:	e6ce      	b.n	1faa <ParserAppData+0xe>
				Parser_TxAddReply((char*)gapParserLorawanStatus[INVALID_PACKET_STR_IDX], strlen((char*)gapParserLorawanStatus[INVALID_PACKET_STR_IDX]));
    220c:	210e      	movs	r1, #14
    220e:	481d      	ldr	r0, [pc, #116]	; (2284 <STACK_SIZE+0x284>)
    2210:	4b09      	ldr	r3, [pc, #36]	; (2238 <STACK_SIZE+0x238>)
    2212:	4798      	blx	r3
}
    2214:	e6c9      	b.n	1faa <ParserAppData+0xe>
    2216:	46c0      	nop			; (mov r8, r8)
    2218:	0001f564 	.word	0x0001f564
    221c:	2000116c 	.word	0x2000116c
    2220:	0001f63c 	.word	0x0001f63c
    2224:	00019da5 	.word	0x00019da5
    2228:	0001a2fd 	.word	0x0001a2fd
    222c:	00019751 	.word	0x00019751
    2230:	00000212 	.word	0x00000212
    2234:	000041f9 	.word	0x000041f9
    2238:	00004001 	.word	0x00004001
    223c:	0001f644 	.word	0x0001f644
    2240:	0001f654 	.word	0x0001f654
    2244:	0001f660 	.word	0x0001f660
    2248:	0001f670 	.word	0x0001f670
    224c:	0001f680 	.word	0x0001f680
    2250:	0001f688 	.word	0x0001f688
    2254:	0001f6a8 	.word	0x0001f6a8
    2258:	0001f6b8 	.word	0x0001f6b8
    225c:	0001f6c4 	.word	0x0001f6c4
    2260:	0001f6d4 	.word	0x0001f6d4
    2264:	0001f6ec 	.word	0x0001f6ec
    2268:	0001f6f8 	.word	0x0001f6f8
    226c:	0001f70c 	.word	0x0001f70c
    2270:	0001f718 	.word	0x0001f718
    2274:	0001f720 	.word	0x0001f720
    2278:	0001f728 	.word	0x0001f728
    227c:	0001f73c 	.word	0x0001f73c
    2280:	0001f754 	.word	0x0001f754
    2284:	0001f764 	.word	0x0001f764
    2288:	0001f5c0 	.word	0x0001f5c0
    228c:	0001f774 	.word	0x0001f774
    2290:	0001f780 	.word	0x0001f780
    2294:	0001f78c 	.word	0x0001f78c
    2298:	0001f79c 	.word	0x0001f79c
    229c:	0001f7b0 	.word	0x0001f7b0
    22a0:	0001f7bc 	.word	0x0001f7bc
    22a4:	0001f7cc 	.word	0x0001f7cc
    22a8:	0001f7e0 	.word	0x0001f7e0
    22ac:	0001f7ec 	.word	0x0001f7ec
    22b0:	0001f800 	.word	0x0001f800
    22b4:	0001f814 	.word	0x0001f814

000022b8 <Parser_SetConfiguredJoinParameters>:
    gParserConfiguredJoinParameters.value = val;
    22b8:	4b01      	ldr	r3, [pc, #4]	; (22c0 <Parser_SetConfiguredJoinParameters+0x8>)
    22ba:	8018      	strh	r0, [r3, #0]
}
    22bc:	4770      	bx	lr
    22be:	46c0      	nop			; (mov r8, r8)
    22c0:	20001f88 	.word	0x20001f88

000022c4 <Parser_LorawanInit>:
{
    22c4:	b510      	push	{r4, lr}
    LORAWAN_Init(ParserAppData, ParserJoinData);
    22c6:	4904      	ldr	r1, [pc, #16]	; (22d8 <Parser_LorawanInit+0x14>)
    22c8:	4804      	ldr	r0, [pc, #16]	; (22dc <Parser_LorawanInit+0x18>)
    22ca:	4b05      	ldr	r3, [pc, #20]	; (22e0 <Parser_LorawanInit+0x1c>)
    22cc:	4798      	blx	r3
    gParserConfiguredJoinParameters.value = 0x00;
    22ce:	2200      	movs	r2, #0
    22d0:	4b04      	ldr	r3, [pc, #16]	; (22e4 <Parser_LorawanInit+0x20>)
    22d2:	801a      	strh	r2, [r3, #0]
}
    22d4:	bd10      	pop	{r4, pc}
    22d6:	46c0      	nop			; (mov r8, r8)
    22d8:	00001f59 	.word	0x00001f59
    22dc:	00001f9d 	.word	0x00001f9d
    22e0:	00010389 	.word	0x00010389
    22e4:	20001f88 	.word	0x20001f88

000022e8 <Parser_LoraReset>:
{
    22e8:	b5f0      	push	{r4, r5, r6, r7, lr}
    22ea:	46d6      	mov	lr, sl
    22ec:	4647      	mov	r7, r8
    22ee:	b580      	push	{r7, lr}
    22f0:	b085      	sub	sp, #20
    22f2:	0007      	movs	r7, r0
    22f4:	4d2f      	ldr	r5, [pc, #188]	; (23b4 <Parser_LoraReset+0xcc>)
    22f6:	2400      	movs	r4, #0
	    if(0 == stricmp(pParserCmdInfo->pParam1, gapParseIsmBand[iCount]))
    22f8:	4b2f      	ldr	r3, [pc, #188]	; (23b8 <Parser_LoraReset+0xd0>)
    22fa:	469a      	mov	sl, r3
    22fc:	b2e3      	uxtb	r3, r4
    22fe:	4698      	mov	r8, r3
    2300:	9401      	str	r4, [sp, #4]
    2302:	682e      	ldr	r6, [r5, #0]
    2304:	0031      	movs	r1, r6
    2306:	6838      	ldr	r0, [r7, #0]
    2308:	47d0      	blx	sl
    230a:	2800      	cmp	r0, #0
    230c:	d00d      	beq.n	232a <Parser_LoraReset+0x42>
    230e:	3401      	adds	r4, #1
    2310:	3504      	adds	r5, #4
    for(iCount = 0; iCount < sizeof(gapParseIsmBand)/sizeof(gapParseIsmBand[0]); iCount++)
    2312:	2c10      	cmp	r4, #16
    2314:	d1f2      	bne.n	22fc <Parser_LoraReset+0x14>
    StackRetStatus_t status = LORAWAN_INVALID_PARAMETER;
    2316:	3c06      	subs	r4, #6
    pParserCmdInfo->pReplyCmd = (char*)gapParserLorawanStatus[status];
    2318:	00a4      	lsls	r4, r4, #2
    231a:	4b28      	ldr	r3, [pc, #160]	; (23bc <Parser_LoraReset+0xd4>)
    231c:	58e3      	ldr	r3, [r4, r3]
    231e:	617b      	str	r3, [r7, #20]
}
    2320:	b005      	add	sp, #20
    2322:	bc0c      	pop	{r2, r3}
    2324:	4690      	mov	r8, r2
    2326:	469a      	mov	sl, r3
    2328:	bdf0      	pop	{r4, r5, r6, r7, pc}
			uint16_t supportedBands = 0;
    232a:	ab02      	add	r3, sp, #8
    232c:	1d9c      	adds	r4, r3, #6
    232e:	2300      	movs	r3, #0
    2330:	8023      	strh	r3, [r4, #0]
			LORAWAN_GetAttr(SUPPORTED_BANDS,NULL,&supportedBands);
    2332:	0022      	movs	r2, r4
    2334:	2100      	movs	r1, #0
    2336:	3034      	adds	r0, #52	; 0x34
    2338:	4b21      	ldr	r3, [pc, #132]	; (23c0 <Parser_LoraReset+0xd8>)
    233a:	4798      	blx	r3
			if(((1 << iCount) & supportedBands) == 0)
    233c:	8823      	ldrh	r3, [r4, #0]
    233e:	9a01      	ldr	r2, [sp, #4]
    2340:	4113      	asrs	r3, r2
    2342:	07db      	lsls	r3, r3, #31
    2344:	d405      	bmi.n	2352 <Parser_LoraReset+0x6a>
				printf("Band %s not supported\r\n",gapParseIsmBand[iCount]);
    2346:	0031      	movs	r1, r6
    2348:	481e      	ldr	r0, [pc, #120]	; (23c4 <Parser_LoraReset+0xdc>)
    234a:	4b1f      	ldr	r3, [pc, #124]	; (23c8 <Parser_LoraReset+0xe0>)
    234c:	4798      	blx	r3
				status = LORAWAN_UNSUPPORTED_BAND;
    234e:	2416      	movs	r4, #22
				break;
    2350:	e7e2      	b.n	2318 <Parser_LoraReset+0x30>
			if(PDS_IsRestorable())
    2352:	4b1e      	ldr	r3, [pc, #120]	; (23cc <Parser_LoraReset+0xe4>)
    2354:	4798      	blx	r3
    2356:	2800      	cmp	r0, #0
    2358:	d018      	beq.n	238c <Parser_LoraReset+0xa4>
				uint8_t prevBand = 0xFF;
    235a:	ab02      	add	r3, sp, #8
    235c:	1d5c      	adds	r4, r3, #5
    235e:	23ff      	movs	r3, #255	; 0xff
    2360:	7023      	strb	r3, [r4, #0]
				PDS_RestoreAll();
    2362:	4b1b      	ldr	r3, [pc, #108]	; (23d0 <Parser_LoraReset+0xe8>)
    2364:	4798      	blx	r3
				LORAWAN_GetAttr(ISMBAND,NULL,&prevBand);
    2366:	0022      	movs	r2, r4
    2368:	2100      	movs	r1, #0
    236a:	2023      	movs	r0, #35	; 0x23
    236c:	4b14      	ldr	r3, [pc, #80]	; (23c0 <Parser_LoraReset+0xd8>)
    236e:	4798      	blx	r3
				if(prevBand != iCount)
    2370:	7823      	ldrb	r3, [r4, #0]
    2372:	4543      	cmp	r3, r8
    2374:	d013      	beq.n	239e <Parser_LoraReset+0xb6>
					PDS_DeleteAll();
    2376:	4b17      	ldr	r3, [pc, #92]	; (23d4 <Parser_LoraReset+0xec>)
    2378:	4798      	blx	r3
				status = LORAWAN_Reset(iCount);
    237a:	4640      	mov	r0, r8
    237c:	4b16      	ldr	r3, [pc, #88]	; (23d8 <Parser_LoraReset+0xf0>)
    237e:	4798      	blx	r3
    2380:	0004      	movs	r4, r0
				if(isSwitchReq == true && status == LORAWAN_SUCCESS)
    2382:	2808      	cmp	r0, #8
    2384:	d10f      	bne.n	23a6 <Parser_LoraReset+0xbe>
					PDS_StoreAll();
    2386:	4b15      	ldr	r3, [pc, #84]	; (23dc <Parser_LoraReset+0xf4>)
    2388:	4798      	blx	r3
    238a:	e00e      	b.n	23aa <Parser_LoraReset+0xc2>
				status = LORAWAN_Reset(iCount);
    238c:	4640      	mov	r0, r8
    238e:	4b12      	ldr	r3, [pc, #72]	; (23d8 <Parser_LoraReset+0xf0>)
    2390:	4798      	blx	r3
    2392:	0004      	movs	r4, r0
				if(status == LORAWAN_SUCCESS)
    2394:	2808      	cmp	r0, #8
    2396:	d108      	bne.n	23aa <Parser_LoraReset+0xc2>
				    PDS_StoreAll();					
    2398:	4b10      	ldr	r3, [pc, #64]	; (23dc <Parser_LoraReset+0xf4>)
    239a:	4798      	blx	r3
    239c:	e005      	b.n	23aa <Parser_LoraReset+0xc2>
				status = LORAWAN_Reset(iCount);
    239e:	4640      	mov	r0, r8
    23a0:	4b0d      	ldr	r3, [pc, #52]	; (23d8 <Parser_LoraReset+0xf0>)
    23a2:	4798      	blx	r3
    23a4:	0004      	movs	r4, r0
					PDS_RestoreAll();
    23a6:	4b0a      	ldr	r3, [pc, #40]	; (23d0 <Parser_LoraReset+0xe8>)
    23a8:	4798      	blx	r3
		    gParserConfiguredJoinParameters.value = 0x00;		    
    23aa:	2200      	movs	r2, #0
    23ac:	4b0c      	ldr	r3, [pc, #48]	; (23e0 <Parser_LoraReset+0xf8>)
    23ae:	801a      	strh	r2, [r3, #0]
		    break;
    23b0:	e7b2      	b.n	2318 <Parser_LoraReset+0x30>
    23b2:	46c0      	nop			; (mov r8, r8)
    23b4:	0001f85c 	.word	0x0001f85c
    23b8:	00004371 	.word	0x00004371
    23bc:	0001f8d0 	.word	0x0001f8d0
    23c0:	000119bd 	.word	0x000119bd
    23c4:	0001f834 	.word	0x0001f834
    23c8:	00019f7d 	.word	0x00019f7d
    23cc:	0000e229 	.word	0x0000e229
    23d0:	0000e28d 	.word	0x0000e28d
    23d4:	0000e271 	.word	0x0000e271
    23d8:	00013f39 	.word	0x00013f39
    23dc:	0000e379 	.word	0x0000e379
    23e0:	20001f88 	.word	0x20001f88

000023e4 <Parser_LoraJoin>:
{
    23e4:	b510      	push	{r4, lr}
    23e6:	0004      	movs	r4, r0
    validationVal = Validate_Str1Str2AsciiValue(pParserCmdInfo->pParam1, gapParseJoinMode[OTAA_STR_IDX], gapParseJoinMode[ABP_STR_IDX]);
    23e8:	4a08      	ldr	r2, [pc, #32]	; (240c <Parser_LoraJoin+0x28>)
    23ea:	4909      	ldr	r1, [pc, #36]	; (2410 <Parser_LoraJoin+0x2c>)
    23ec:	6800      	ldr	r0, [r0, #0]
    23ee:	4b09      	ldr	r3, [pc, #36]	; (2414 <Parser_LoraJoin+0x30>)
    23f0:	4798      	blx	r3
    StackRetStatus_t status = LORAWAN_INVALID_PARAMETER;
    23f2:	230a      	movs	r3, #10
    if(validationVal < 2U)
    23f4:	2801      	cmp	r0, #1
    23f6:	d904      	bls.n	2402 <Parser_LoraJoin+0x1e>
	pParserCmdInfo->pReplyCmd = (char*)gapParserLorawanStatus[status];
    23f8:	009b      	lsls	r3, r3, #2
    23fa:	4a07      	ldr	r2, [pc, #28]	; (2418 <Parser_LoraJoin+0x34>)
    23fc:	589b      	ldr	r3, [r3, r2]
    23fe:	6163      	str	r3, [r4, #20]
}
    2400:	bd10      	pop	{r4, pc}
        status = LORAWAN_Join(validationVal);
    2402:	4b06      	ldr	r3, [pc, #24]	; (241c <Parser_LoraJoin+0x38>)
    2404:	4798      	blx	r3
    2406:	0003      	movs	r3, r0
    2408:	e7f6      	b.n	23f8 <Parser_LoraJoin+0x14>
    240a:	46c0      	nop			; (mov r8, r8)
    240c:	0001f828 	.word	0x0001f828
    2410:	0001f82c 	.word	0x0001f82c
    2414:	00004435 	.word	0x00004435
    2418:	0001f8d0 	.word	0x0001f8d0
    241c:	000112f1 	.word	0x000112f1

00002420 <Parser_LoraSend>:
{    
    2420:	b5f0      	push	{r4, r5, r6, r7, lr}
    2422:	b085      	sub	sp, #20
    2424:	0007      	movs	r7, r0
    uint16_t asciiDataLen = strlen(pParserCmdInfo->pParam3);
    2426:	6880      	ldr	r0, [r0, #8]
    2428:	4b1d      	ldr	r3, [pc, #116]	; (24a0 <Parser_LoraSend+0x80>)
    242a:	4798      	blx	r3
    242c:	0004      	movs	r4, r0
    validationVal = Validate_Str1Str2AsciiValue(pParserCmdInfo->pParam1, gapParserSendMode[UNCNF_STR_IDX], gapParserSendMode[CNF_STR_IDX]);
    242e:	4a1d      	ldr	r2, [pc, #116]	; (24a4 <Parser_LoraSend+0x84>)
    2430:	491d      	ldr	r1, [pc, #116]	; (24a8 <Parser_LoraSend+0x88>)
    2432:	6838      	ldr	r0, [r7, #0]
    2434:	4b1d      	ldr	r3, [pc, #116]	; (24ac <Parser_LoraSend+0x8c>)
    2436:	4798      	blx	r3
    2438:	9001      	str	r0, [sp, #4]
    243a:	0006      	movs	r6, r0
    if(Validate_Uint8DecAsciiValue(pParserCmdInfo->pParam2, &portValue) && (dataLen <= 255) &&
    243c:	ab02      	add	r3, sp, #8
    243e:	1dd9      	adds	r1, r3, #7
    2440:	6878      	ldr	r0, [r7, #4]
    2442:	4b1b      	ldr	r3, [pc, #108]	; (24b0 <Parser_LoraSend+0x90>)
    2444:	4798      	blx	r3
    StackRetStatus_t status = LORAWAN_INVALID_PARAMETER;
    2446:	230a      	movs	r3, #10
    if(Validate_Uint8DecAsciiValue(pParserCmdInfo->pParam2, &portValue) && (dataLen <= 255) &&
    2448:	2800      	cmp	r0, #0
    244a:	d005      	beq.n	2458 <Parser_LoraSend+0x38>
    uint16_t asciiDataLen = strlen(pParserCmdInfo->pParam3);
    244c:	b2a4      	uxth	r4, r4
    uint16_t  dataLen = asciiDataLen >> 1;
    244e:	0865      	lsrs	r5, r4, #1
    if(Validate_Uint8DecAsciiValue(pParserCmdInfo->pParam2, &portValue) && (dataLen <= 255) &&
    2450:	2dff      	cmp	r5, #255	; 0xff
    2452:	d801      	bhi.n	2458 <Parser_LoraSend+0x38>
    2454:	2e01      	cmp	r6, #1
    2456:	d905      	bls.n	2464 <Parser_LoraSend+0x44>
        pParserCmdInfo->pReplyCmd = (char*)gapParserLorawanStatus[status];
    2458:	009b      	lsls	r3, r3, #2
    245a:	4a16      	ldr	r2, [pc, #88]	; (24b4 <Parser_LoraSend+0x94>)
    245c:	589b      	ldr	r3, [r3, r2]
    245e:	617b      	str	r3, [r7, #20]
}
    2460:	b005      	add	sp, #20
    2462:	bdf0      	pop	{r4, r5, r6, r7, pc}
       (validationVal < 2U) && Validate_HexValue(pParserCmdInfo->pParam3))
    2464:	68b8      	ldr	r0, [r7, #8]
    2466:	4b14      	ldr	r3, [pc, #80]	; (24b8 <Parser_LoraSend+0x98>)
    2468:	4798      	blx	r3
    StackRetStatus_t status = LORAWAN_INVALID_PARAMETER;
    246a:	230a      	movs	r3, #10
       (validationVal < 2U) && Validate_HexValue(pParserCmdInfo->pParam3))
    246c:	2800      	cmp	r0, #0
    246e:	d0f3      	beq.n	2458 <Parser_LoraSend+0x38>
        Parser_HexAsciiToInt(asciiDataLen, pParserCmdInfo->pParam3, (uint8_t *)aParserData);
    2470:	4a12      	ldr	r2, [pc, #72]	; (24bc <Parser_LoraSend+0x9c>)
    2472:	68b9      	ldr	r1, [r7, #8]
    2474:	0020      	movs	r0, r4
    2476:	4b12      	ldr	r3, [pc, #72]	; (24c0 <Parser_LoraSend+0xa0>)
    2478:	4798      	blx	r3
        if(asciiDataLen % 2 == 1)
    247a:	07e3      	lsls	r3, r4, #31
    247c:	d500      	bpl.n	2480 <Parser_LoraSend+0x60>
            dataLen += 1;
    247e:	3501      	adds	r5, #1
        parser_data.confirmed = validationVal;
    2480:	4810      	ldr	r0, [pc, #64]	; (24c4 <Parser_LoraSend+0xa4>)
    2482:	466b      	mov	r3, sp
    2484:	791b      	ldrb	r3, [r3, #4]
    2486:	7003      	strb	r3, [r0, #0]
        parser_data.port = portValue;
    2488:	ab02      	add	r3, sp, #8
    248a:	3307      	adds	r3, #7
    248c:	781b      	ldrb	r3, [r3, #0]
    248e:	7043      	strb	r3, [r0, #1]
        parser_data.buffer = aParserData;
    2490:	4b0a      	ldr	r3, [pc, #40]	; (24bc <Parser_LoraSend+0x9c>)
    2492:	6043      	str	r3, [r0, #4]
        parser_data.bufferLength = (uint8_t)dataLen;
    2494:	7205      	strb	r5, [r0, #8]
        status = LORAWAN_Send(&parser_data);
    2496:	4b0c      	ldr	r3, [pc, #48]	; (24c8 <Parser_LoraSend+0xa8>)
    2498:	4798      	blx	r3
    249a:	0003      	movs	r3, r0
    249c:	e7dc      	b.n	2458 <Parser_LoraSend+0x38>
    249e:	46c0      	nop			; (mov r8, r8)
    24a0:	0001a2fd 	.word	0x0001a2fd
    24a4:	0001f850 	.word	0x0001f850
    24a8:	0001f854 	.word	0x0001f854
    24ac:	00004435 	.word	0x00004435
    24b0:	00004259 	.word	0x00004259
    24b4:	0001f8d0 	.word	0x0001f8d0
    24b8:	000041c5 	.word	0x000041c5
    24bc:	2000116c 	.word	0x2000116c
    24c0:	000044cd 	.word	0x000044cd
    24c4:	20001f8c 	.word	0x20001f8c
    24c8:	00010561 	.word	0x00010561

000024cc <Parser_LoraSetCrtDataRate>:
{
    24cc:	b510      	push	{r4, lr}
    24ce:	b082      	sub	sp, #8
    24d0:	0004      	movs	r4, r0
    if(Validate_Uint8DecAsciiValue(pParserCmdInfo->pParam1, &datarate))
    24d2:	466b      	mov	r3, sp
    24d4:	1dd9      	adds	r1, r3, #7
    24d6:	6800      	ldr	r0, [r0, #0]
    24d8:	4b08      	ldr	r3, [pc, #32]	; (24fc <Parser_LoraSetCrtDataRate+0x30>)
    24da:	4798      	blx	r3
    StackRetStatus_t status = LORAWAN_INVALID_PARAMETER;
    24dc:	230a      	movs	r3, #10
    if(Validate_Uint8DecAsciiValue(pParserCmdInfo->pParam1, &datarate))
    24de:	2800      	cmp	r0, #0
    24e0:	d105      	bne.n	24ee <Parser_LoraSetCrtDataRate+0x22>
    pParserCmdInfo->pReplyCmd = (char*)gapParserLorawanStatus[status];
    24e2:	009b      	lsls	r3, r3, #2
    24e4:	4a06      	ldr	r2, [pc, #24]	; (2500 <Parser_LoraSetCrtDataRate+0x34>)
    24e6:	589b      	ldr	r3, [r3, r2]
    24e8:	6163      	str	r3, [r4, #20]
}
    24ea:	b002      	add	sp, #8
    24ec:	bd10      	pop	{r4, pc}
        status = LORAWAN_SetAttr(CURRENT_DATARATE,&datarate);
    24ee:	466b      	mov	r3, sp
    24f0:	1dd9      	adds	r1, r3, #7
    24f2:	2007      	movs	r0, #7
    24f4:	4b03      	ldr	r3, [pc, #12]	; (2504 <Parser_LoraSetCrtDataRate+0x38>)
    24f6:	4798      	blx	r3
    24f8:	0003      	movs	r3, r0
    24fa:	e7f2      	b.n	24e2 <Parser_LoraSetCrtDataRate+0x16>
    24fc:	00004259 	.word	0x00004259
    2500:	0001f8d0 	.word	0x0001f8d0
    2504:	00013a01 	.word	0x00013a01

00002508 <Parser_LoraGetCrtDataRate>:
{
    2508:	b570      	push	{r4, r5, r6, lr}
    250a:	b082      	sub	sp, #8
    250c:	0006      	movs	r6, r0
	LORAWAN_GetAttr(CURRENT_DATARATE,NULL,&crtDatarate);
    250e:	466b      	mov	r3, sp
    2510:	1ddd      	adds	r5, r3, #7
    2512:	002a      	movs	r2, r5
    2514:	2100      	movs	r1, #0
    2516:	2007      	movs	r0, #7
    2518:	4b05      	ldr	r3, [pc, #20]	; (2530 <Parser_LoraGetCrtDataRate+0x28>)
    251a:	4798      	blx	r3
 	itoa(crtDatarate, aParserData, 10U);
    251c:	4c05      	ldr	r4, [pc, #20]	; (2534 <Parser_LoraGetCrtDataRate+0x2c>)
    251e:	7828      	ldrb	r0, [r5, #0]
    2520:	220a      	movs	r2, #10
    2522:	0021      	movs	r1, r4
    2524:	4b04      	ldr	r3, [pc, #16]	; (2538 <Parser_LoraGetCrtDataRate+0x30>)
    2526:	4798      	blx	r3
	pParserCmdInfo->pReplyCmd = aParserData;
    2528:	6174      	str	r4, [r6, #20]
}
    252a:	b002      	add	sp, #8
    252c:	bd70      	pop	{r4, r5, r6, pc}
    252e:	46c0      	nop			; (mov r8, r8)
    2530:	000119bd 	.word	0x000119bd
    2534:	2000116c 	.word	0x2000116c
    2538:	00019751 	.word	0x00019751

0000253c <Parser_LoraSetAdr>:
{
    253c:	b510      	push	{r4, lr}
    253e:	b082      	sub	sp, #8
    2540:	0004      	movs	r4, r0
    validationVal = Validate_OnOffAsciiValue(pParserCmdInfo->pParam1);
    2542:	6800      	ldr	r0, [r0, #0]
    2544:	4b09      	ldr	r3, [pc, #36]	; (256c <Parser_LoraSetAdr+0x30>)
    2546:	4798      	blx	r3
    2548:	466b      	mov	r3, sp
    254a:	71d8      	strb	r0, [r3, #7]
    StackRetStatus_t status = LORAWAN_INVALID_PARAMETER;
    254c:	230a      	movs	r3, #10
    if(validationVal < 2U)
    254e:	2801      	cmp	r0, #1
    2550:	d905      	bls.n	255e <Parser_LoraSetAdr+0x22>
    pParserCmdInfo->pReplyCmd = (char*)gapParserLorawanStatus[status];
    2552:	009b      	lsls	r3, r3, #2
    2554:	4a06      	ldr	r2, [pc, #24]	; (2570 <Parser_LoraSetAdr+0x34>)
    2556:	589b      	ldr	r3, [r3, r2]
    2558:	6163      	str	r3, [r4, #20]
}
    255a:	b002      	add	sp, #8
    255c:	bd10      	pop	{r4, pc}
        status = LORAWAN_SetAttr(ADR,&validationVal);
    255e:	466b      	mov	r3, sp
    2560:	1dd9      	adds	r1, r3, #7
    2562:	2006      	movs	r0, #6
    2564:	4b03      	ldr	r3, [pc, #12]	; (2574 <Parser_LoraSetAdr+0x38>)
    2566:	4798      	blx	r3
    2568:	0003      	movs	r3, r0
    256a:	e7f2      	b.n	2552 <Parser_LoraSetAdr+0x16>
    256c:	00004401 	.word	0x00004401
    2570:	0001f8d0 	.word	0x0001f8d0
    2574:	00013a01 	.word	0x00013a01

00002578 <Parser_LoraGetAdr>:
{
    2578:	b530      	push	{r4, r5, lr}
    257a:	b083      	sub	sp, #12
    257c:	0005      	movs	r5, r0
    LORAWAN_GetAttr(ADR,NULL,&adrEnabled);
    257e:	466b      	mov	r3, sp
    2580:	1ddc      	adds	r4, r3, #7
    2582:	0022      	movs	r2, r4
    2584:	2100      	movs	r1, #0
    2586:	2006      	movs	r0, #6
    2588:	4b04      	ldr	r3, [pc, #16]	; (259c <Parser_LoraGetAdr+0x24>)
    258a:	4798      	blx	r3
    pParserCmdInfo->pReplyCmd = (char*)gapParseOnOff[adrEnabled];
    258c:	7823      	ldrb	r3, [r4, #0]
    258e:	009b      	lsls	r3, r3, #2
    2590:	4a03      	ldr	r2, [pc, #12]	; (25a0 <Parser_LoraGetAdr+0x28>)
    2592:	589b      	ldr	r3, [r3, r2]
    2594:	616b      	str	r3, [r5, #20]
}
    2596:	b003      	add	sp, #12
    2598:	bd30      	pop	{r4, r5, pc}
    259a:	46c0      	nop			; (mov r8, r8)
    259c:	000119bd 	.word	0x000119bd
    25a0:	0001f8b0 	.word	0x0001f8b0

000025a4 <Parser_LoraSetDevAddr>:
{
    25a4:	b510      	push	{r4, lr}
    25a6:	b082      	sub	sp, #8
    25a8:	0004      	movs	r4, r0
    if(Validate_HexValue(pParserCmdInfo->pParam1))
    25aa:	6800      	ldr	r0, [r0, #0]
    25ac:	4b14      	ldr	r3, [pc, #80]	; (2600 <Parser_LoraSetDevAddr+0x5c>)
    25ae:	4798      	blx	r3
    StackRetStatus_t statusIdx = LORAWAN_INVALID_PARAMETER;
    25b0:	230a      	movs	r3, #10
    if(Validate_HexValue(pParserCmdInfo->pParam1))
    25b2:	2800      	cmp	r0, #0
    25b4:	d105      	bne.n	25c2 <Parser_LoraSetDevAddr+0x1e>
    pParserCmdInfo->pReplyCmd = (char*)gapParserLorawanStatus[statusIdx];
    25b6:	009b      	lsls	r3, r3, #2
    25b8:	4a12      	ldr	r2, [pc, #72]	; (2604 <Parser_LoraSetDevAddr+0x60>)
    25ba:	589b      	ldr	r3, [r3, r2]
    25bc:	6163      	str	r3, [r4, #20]
}
    25be:	b002      	add	sp, #8
    25c0:	bd10      	pop	{r4, pc}
        if(Parser_HexAsciiToInt(sizeof(devAddr) << 1, pParserCmdInfo->pParam1, tempBuff))
    25c2:	aa01      	add	r2, sp, #4
    25c4:	6821      	ldr	r1, [r4, #0]
    25c6:	2008      	movs	r0, #8
    25c8:	4b0f      	ldr	r3, [pc, #60]	; (2608 <Parser_LoraSetDevAddr+0x64>)
    25ca:	4798      	blx	r3
    StackRetStatus_t statusIdx = LORAWAN_INVALID_PARAMETER;
    25cc:	230a      	movs	r3, #10
        if(Parser_HexAsciiToInt(sizeof(devAddr) << 1, pParserCmdInfo->pParam1, tempBuff))
    25ce:	2800      	cmp	r0, #0
    25d0:	d0f1      	beq.n	25b6 <Parser_LoraSetDevAddr+0x12>
            devAddr += ((uint32_t)tempBuff[2]) << 8;
    25d2:	aa01      	add	r2, sp, #4
    25d4:	7893      	ldrb	r3, [r2, #2]
    25d6:	021b      	lsls	r3, r3, #8
            devAddr += ((uint32_t)tempBuff[1]) << 16;
    25d8:	7851      	ldrb	r1, [r2, #1]
    25da:	0409      	lsls	r1, r1, #16
    25dc:	185b      	adds	r3, r3, r1
            devAddr = (uint32_t)tempBuff[3];
    25de:	78d1      	ldrb	r1, [r2, #3]
            devAddr += ((uint32_t)tempBuff[1]) << 16;
    25e0:	185b      	adds	r3, r3, r1
            devAddr += ((uint32_t)tempBuff[0]) << 24;
    25e2:	7812      	ldrb	r2, [r2, #0]
    25e4:	0612      	lsls	r2, r2, #24
    25e6:	189b      	adds	r3, r3, r2
    25e8:	9300      	str	r3, [sp, #0]
            statusIdx = LORAWAN_SetAttr (DEV_ADDR,&devAddr);
    25ea:	4669      	mov	r1, sp
    25ec:	2002      	movs	r0, #2
    25ee:	4b07      	ldr	r3, [pc, #28]	; (260c <Parser_LoraSetDevAddr+0x68>)
    25f0:	4798      	blx	r3
    25f2:	0003      	movs	r3, r0
            gParserConfiguredJoinParameters.flags.devaddr = 1;
    25f4:	4906      	ldr	r1, [pc, #24]	; (2610 <Parser_LoraSetDevAddr+0x6c>)
    25f6:	780a      	ldrb	r2, [r1, #0]
    25f8:	2008      	movs	r0, #8
    25fa:	4302      	orrs	r2, r0
    25fc:	700a      	strb	r2, [r1, #0]
    25fe:	e7da      	b.n	25b6 <Parser_LoraSetDevAddr+0x12>
    2600:	000041c5 	.word	0x000041c5
    2604:	0001f8d0 	.word	0x0001f8d0
    2608:	000044cd 	.word	0x000044cd
    260c:	00013a01 	.word	0x00013a01
    2610:	20001f88 	.word	0x20001f88

00002614 <Parser_LoraGetDevAddr>:
{
    2614:	b530      	push	{r4, r5, lr}
    2616:	b083      	sub	sp, #12
    2618:	0005      	movs	r5, r0
    LORAWAN_GetAttr(DEV_ADDR, NULL, &devAddr);
    261a:	aa01      	add	r2, sp, #4
    261c:	2100      	movs	r1, #0
    261e:	2002      	movs	r0, #2
    2620:	4b09      	ldr	r3, [pc, #36]	; (2648 <Parser_LoraGetDevAddr+0x34>)
    2622:	4798      	blx	r3
    tempBuff[3] = (uint8_t)devAddr;
    2624:	9b01      	ldr	r3, [sp, #4]
    2626:	466a      	mov	r2, sp
    2628:	70d3      	strb	r3, [r2, #3]
    tempBuff[2] = (uint8_t)(devAddr >> 8);
    262a:	0a1a      	lsrs	r2, r3, #8
    262c:	4669      	mov	r1, sp
    262e:	708a      	strb	r2, [r1, #2]
    tempBuff[1] = (uint8_t)(devAddr >> 16);
    2630:	0c1a      	lsrs	r2, r3, #16
    2632:	704a      	strb	r2, [r1, #1]
    tempBuff[0] = (uint8_t)(devAddr >> 24);
    2634:	0e1b      	lsrs	r3, r3, #24
    2636:	700b      	strb	r3, [r1, #0]
    Parser_IntArrayToHexAscii(4, tempBuff, aParserData);
    2638:	4c04      	ldr	r4, [pc, #16]	; (264c <Parser_LoraGetDevAddr+0x38>)
    263a:	0022      	movs	r2, r4
    263c:	2004      	movs	r0, #4
    263e:	4b04      	ldr	r3, [pc, #16]	; (2650 <Parser_LoraGetDevAddr+0x3c>)
    2640:	4798      	blx	r3
    pParserCmdInfo->pReplyCmd = aParserData;
    2642:	616c      	str	r4, [r5, #20]
}
    2644:	b003      	add	sp, #12
    2646:	bd30      	pop	{r4, r5, pc}
    2648:	000119bd 	.word	0x000119bd
    264c:	2000116c 	.word	0x2000116c
    2650:	000041f9 	.word	0x000041f9

00002654 <Parser_LoraSetDevEui>:
{
    2654:	b510      	push	{r4, lr}
    2656:	0004      	movs	r4, r0
    if(Validate_HexValue(pParserCmdInfo->pParam1))
    2658:	6800      	ldr	r0, [r0, #0]
    265a:	4b0e      	ldr	r3, [pc, #56]	; (2694 <Parser_LoraSetDevEui+0x40>)
    265c:	4798      	blx	r3
    StackRetStatus_t statusIdx = LORAWAN_INVALID_PARAMETER;
    265e:	230a      	movs	r3, #10
    if(Validate_HexValue(pParserCmdInfo->pParam1))
    2660:	2800      	cmp	r0, #0
    2662:	d104      	bne.n	266e <Parser_LoraSetDevEui+0x1a>
    pParserCmdInfo->pReplyCmd = (char*)gapParserLorawanStatus[statusIdx];
    2664:	009b      	lsls	r3, r3, #2
    2666:	4a0c      	ldr	r2, [pc, #48]	; (2698 <Parser_LoraSetDevEui+0x44>)
    2668:	589b      	ldr	r3, [r3, r2]
    266a:	6163      	str	r3, [r4, #20]
}
    266c:	bd10      	pop	{r4, pc}
        if(Parser_HexAsciiToInt(16, pParserCmdInfo->pParam1, (uint8_t *)aParserData))
    266e:	4a0b      	ldr	r2, [pc, #44]	; (269c <Parser_LoraSetDevEui+0x48>)
    2670:	6821      	ldr	r1, [r4, #0]
    2672:	2010      	movs	r0, #16
    2674:	4b0a      	ldr	r3, [pc, #40]	; (26a0 <Parser_LoraSetDevEui+0x4c>)
    2676:	4798      	blx	r3
    StackRetStatus_t statusIdx = LORAWAN_INVALID_PARAMETER;
    2678:	230a      	movs	r3, #10
        if(Parser_HexAsciiToInt(16, pParserCmdInfo->pParam1, (uint8_t *)aParserData))
    267a:	2800      	cmp	r0, #0
    267c:	d0f2      	beq.n	2664 <Parser_LoraSetDevEui+0x10>
            statusIdx = LORAWAN_SetAttr (DEV_EUI,aParserData);
    267e:	4907      	ldr	r1, [pc, #28]	; (269c <Parser_LoraSetDevEui+0x48>)
    2680:	2000      	movs	r0, #0
    2682:	4b08      	ldr	r3, [pc, #32]	; (26a4 <Parser_LoraSetDevEui+0x50>)
    2684:	4798      	blx	r3
    2686:	0003      	movs	r3, r0
            gParserConfiguredJoinParameters.flags.deveui = 1;
    2688:	4907      	ldr	r1, [pc, #28]	; (26a8 <Parser_LoraSetDevEui+0x54>)
    268a:	780a      	ldrb	r2, [r1, #0]
    268c:	2001      	movs	r0, #1
    268e:	4302      	orrs	r2, r0
    2690:	700a      	strb	r2, [r1, #0]
    2692:	e7e7      	b.n	2664 <Parser_LoraSetDevEui+0x10>
    2694:	000041c5 	.word	0x000041c5
    2698:	0001f8d0 	.word	0x0001f8d0
    269c:	2000116c 	.word	0x2000116c
    26a0:	000044cd 	.word	0x000044cd
    26a4:	00013a01 	.word	0x00013a01
    26a8:	20001f88 	.word	0x20001f88

000026ac <Parser_LoraGetDevEui>:
{
    26ac:	b530      	push	{r4, r5, lr}
    26ae:	b083      	sub	sp, #12
    26b0:	0005      	movs	r5, r0
    LORAWAN_GetAttr (DEV_EUI, NULL, aDevEui);
    26b2:	466a      	mov	r2, sp
    26b4:	2100      	movs	r1, #0
    26b6:	2000      	movs	r0, #0
    26b8:	4b05      	ldr	r3, [pc, #20]	; (26d0 <Parser_LoraGetDevEui+0x24>)
    26ba:	4798      	blx	r3
	Parser_IntArrayToHexAscii(DEV_EUI_LEN, aDevEui, aParserData);
    26bc:	4c05      	ldr	r4, [pc, #20]	; (26d4 <Parser_LoraGetDevEui+0x28>)
    26be:	0022      	movs	r2, r4
    26c0:	4669      	mov	r1, sp
    26c2:	2008      	movs	r0, #8
    26c4:	4b04      	ldr	r3, [pc, #16]	; (26d8 <Parser_LoraGetDevEui+0x2c>)
    26c6:	4798      	blx	r3
	pParserCmdInfo->pReplyCmd = aParserData;
    26c8:	616c      	str	r4, [r5, #20]
}
    26ca:	b003      	add	sp, #12
    26cc:	bd30      	pop	{r4, r5, pc}
    26ce:	46c0      	nop			; (mov r8, r8)
    26d0:	000119bd 	.word	0x000119bd
    26d4:	2000116c 	.word	0x2000116c
    26d8:	000041f9 	.word	0x000041f9

000026dc <Parser_LoraSetJoinEui>:
{
    26dc:	b510      	push	{r4, lr}
    26de:	0004      	movs	r4, r0
    if(Validate_HexValue(pParserCmdInfo->pParam1))
    26e0:	6800      	ldr	r0, [r0, #0]
    26e2:	4b0e      	ldr	r3, [pc, #56]	; (271c <Parser_LoraSetJoinEui+0x40>)
    26e4:	4798      	blx	r3
    StackRetStatus_t statusIdx = LORAWAN_INVALID_PARAMETER;
    26e6:	230a      	movs	r3, #10
    if(Validate_HexValue(pParserCmdInfo->pParam1))
    26e8:	2800      	cmp	r0, #0
    26ea:	d104      	bne.n	26f6 <Parser_LoraSetJoinEui+0x1a>
    pParserCmdInfo->pReplyCmd = (char*)gapParserLorawanStatus[statusIdx];
    26ec:	009b      	lsls	r3, r3, #2
    26ee:	4a0c      	ldr	r2, [pc, #48]	; (2720 <Parser_LoraSetJoinEui+0x44>)
    26f0:	589b      	ldr	r3, [r3, r2]
    26f2:	6163      	str	r3, [r4, #20]
}
    26f4:	bd10      	pop	{r4, pc}
        if(Parser_HexAsciiToInt(16, pParserCmdInfo->pParam1, (uint8_t *)aParserData))
    26f6:	4a0b      	ldr	r2, [pc, #44]	; (2724 <Parser_LoraSetJoinEui+0x48>)
    26f8:	6821      	ldr	r1, [r4, #0]
    26fa:	2010      	movs	r0, #16
    26fc:	4b0a      	ldr	r3, [pc, #40]	; (2728 <Parser_LoraSetJoinEui+0x4c>)
    26fe:	4798      	blx	r3
    StackRetStatus_t statusIdx = LORAWAN_INVALID_PARAMETER;
    2700:	230a      	movs	r3, #10
        if(Parser_HexAsciiToInt(16, pParserCmdInfo->pParam1, (uint8_t *)aParserData))
    2702:	2800      	cmp	r0, #0
    2704:	d0f2      	beq.n	26ec <Parser_LoraSetJoinEui+0x10>
            statusIdx = LORAWAN_SetAttr(APP_EUI,aParserData);
    2706:	4907      	ldr	r1, [pc, #28]	; (2724 <Parser_LoraSetJoinEui+0x48>)
    2708:	2001      	movs	r0, #1
    270a:	4b08      	ldr	r3, [pc, #32]	; (272c <Parser_LoraSetJoinEui+0x50>)
    270c:	4798      	blx	r3
    270e:	0003      	movs	r3, r0
            gParserConfiguredJoinParameters.flags.joineui = 1;          
    2710:	4907      	ldr	r1, [pc, #28]	; (2730 <Parser_LoraSetJoinEui+0x54>)
    2712:	780a      	ldrb	r2, [r1, #0]
    2714:	2002      	movs	r0, #2
    2716:	4302      	orrs	r2, r0
    2718:	700a      	strb	r2, [r1, #0]
    271a:	e7e7      	b.n	26ec <Parser_LoraSetJoinEui+0x10>
    271c:	000041c5 	.word	0x000041c5
    2720:	0001f8d0 	.word	0x0001f8d0
    2724:	2000116c 	.word	0x2000116c
    2728:	000044cd 	.word	0x000044cd
    272c:	00013a01 	.word	0x00013a01
    2730:	20001f88 	.word	0x20001f88

00002734 <Parser_LoraGetJoinEui>:
{
    2734:	b530      	push	{r4, r5, lr}
    2736:	b083      	sub	sp, #12
    2738:	0005      	movs	r5, r0
    LORAWAN_GetAttr(APP_EUI, NULL, aJoinEui);
    273a:	466a      	mov	r2, sp
    273c:	2100      	movs	r1, #0
    273e:	2001      	movs	r0, #1
    2740:	4b05      	ldr	r3, [pc, #20]	; (2758 <Parser_LoraGetJoinEui+0x24>)
    2742:	4798      	blx	r3
	Parser_IntArrayToHexAscii(JOIN_EUI_LEN, aJoinEui, aParserData);
    2744:	4c05      	ldr	r4, [pc, #20]	; (275c <Parser_LoraGetJoinEui+0x28>)
    2746:	0022      	movs	r2, r4
    2748:	4669      	mov	r1, sp
    274a:	2008      	movs	r0, #8
    274c:	4b04      	ldr	r3, [pc, #16]	; (2760 <Parser_LoraGetJoinEui+0x2c>)
    274e:	4798      	blx	r3
	pParserCmdInfo->pReplyCmd = aParserData;
    2750:	616c      	str	r4, [r5, #20]
}
    2752:	b003      	add	sp, #12
    2754:	bd30      	pop	{r4, r5, pc}
    2756:	46c0      	nop			; (mov r8, r8)
    2758:	000119bd 	.word	0x000119bd
    275c:	2000116c 	.word	0x2000116c
    2760:	000041f9 	.word	0x000041f9

00002764 <Parser_LoraSetNwkSKey>:
{
    2764:	b510      	push	{r4, lr}
    2766:	0004      	movs	r4, r0
    if(Validate_HexValue(pParserCmdInfo->pParam1))
    2768:	6800      	ldr	r0, [r0, #0]
    276a:	4b0e      	ldr	r3, [pc, #56]	; (27a4 <Parser_LoraSetNwkSKey+0x40>)
    276c:	4798      	blx	r3
    StackRetStatus_t statusIdx = LORAWAN_INVALID_PARAMETER;
    276e:	230a      	movs	r3, #10
    if(Validate_HexValue(pParserCmdInfo->pParam1))
    2770:	2800      	cmp	r0, #0
    2772:	d104      	bne.n	277e <Parser_LoraSetNwkSKey+0x1a>
    pParserCmdInfo->pReplyCmd = (char*)gapParserLorawanStatus[statusIdx];
    2774:	009b      	lsls	r3, r3, #2
    2776:	4a0c      	ldr	r2, [pc, #48]	; (27a8 <Parser_LoraSetNwkSKey+0x44>)
    2778:	589b      	ldr	r3, [r3, r2]
    277a:	6163      	str	r3, [r4, #20]
}
    277c:	bd10      	pop	{r4, pc}
        if(Parser_HexAsciiToInt(32U, pParserCmdInfo->pParam1, (uint8_t *)aParserData))
    277e:	4a0b      	ldr	r2, [pc, #44]	; (27ac <Parser_LoraSetNwkSKey+0x48>)
    2780:	6821      	ldr	r1, [r4, #0]
    2782:	2020      	movs	r0, #32
    2784:	4b0a      	ldr	r3, [pc, #40]	; (27b0 <Parser_LoraSetNwkSKey+0x4c>)
    2786:	4798      	blx	r3
    StackRetStatus_t statusIdx = LORAWAN_INVALID_PARAMETER;
    2788:	230a      	movs	r3, #10
        if(Parser_HexAsciiToInt(32U, pParserCmdInfo->pParam1, (uint8_t *)aParserData))
    278a:	2800      	cmp	r0, #0
    278c:	d0f2      	beq.n	2774 <Parser_LoraSetNwkSKey+0x10>
            statusIdx = LORAWAN_SetAttr(NWKS_KEY,aParserData);
    278e:	4907      	ldr	r1, [pc, #28]	; (27ac <Parser_LoraSetNwkSKey+0x48>)
    2790:	2004      	movs	r0, #4
    2792:	4b08      	ldr	r3, [pc, #32]	; (27b4 <Parser_LoraSetNwkSKey+0x50>)
    2794:	4798      	blx	r3
    2796:	0003      	movs	r3, r0
            gParserConfiguredJoinParameters.flags.nwkskey = 1;
    2798:	4907      	ldr	r1, [pc, #28]	; (27b8 <Parser_LoraSetNwkSKey+0x54>)
    279a:	780a      	ldrb	r2, [r1, #0]
    279c:	2010      	movs	r0, #16
    279e:	4302      	orrs	r2, r0
    27a0:	700a      	strb	r2, [r1, #0]
    27a2:	e7e7      	b.n	2774 <Parser_LoraSetNwkSKey+0x10>
    27a4:	000041c5 	.word	0x000041c5
    27a8:	0001f8d0 	.word	0x0001f8d0
    27ac:	2000116c 	.word	0x2000116c
    27b0:	000044cd 	.word	0x000044cd
    27b4:	00013a01 	.word	0x00013a01
    27b8:	20001f88 	.word	0x20001f88

000027bc <Parser_LoraSetAppSKey>:
{
    27bc:	b510      	push	{r4, lr}
    27be:	0004      	movs	r4, r0
    if(Validate_HexValue(pParserCmdInfo->pParam1))
    27c0:	6800      	ldr	r0, [r0, #0]
    27c2:	4b0e      	ldr	r3, [pc, #56]	; (27fc <Parser_LoraSetAppSKey+0x40>)
    27c4:	4798      	blx	r3
    StackRetStatus_t statusIdx = LORAWAN_INVALID_PARAMETER;
    27c6:	230a      	movs	r3, #10
    if(Validate_HexValue(pParserCmdInfo->pParam1))
    27c8:	2800      	cmp	r0, #0
    27ca:	d104      	bne.n	27d6 <Parser_LoraSetAppSKey+0x1a>
    pParserCmdInfo->pReplyCmd = (char*)gapParserLorawanStatus[statusIdx];
    27cc:	009b      	lsls	r3, r3, #2
    27ce:	4a0c      	ldr	r2, [pc, #48]	; (2800 <Parser_LoraSetAppSKey+0x44>)
    27d0:	589b      	ldr	r3, [r3, r2]
    27d2:	6163      	str	r3, [r4, #20]
}
    27d4:	bd10      	pop	{r4, pc}
        if(Parser_HexAsciiToInt(32U, pParserCmdInfo->pParam1, (uint8_t *)aParserData))
    27d6:	4a0b      	ldr	r2, [pc, #44]	; (2804 <Parser_LoraSetAppSKey+0x48>)
    27d8:	6821      	ldr	r1, [r4, #0]
    27da:	2020      	movs	r0, #32
    27dc:	4b0a      	ldr	r3, [pc, #40]	; (2808 <Parser_LoraSetAppSKey+0x4c>)
    27de:	4798      	blx	r3
    StackRetStatus_t statusIdx = LORAWAN_INVALID_PARAMETER;
    27e0:	230a      	movs	r3, #10
        if(Parser_HexAsciiToInt(32U, pParserCmdInfo->pParam1, (uint8_t *)aParserData))
    27e2:	2800      	cmp	r0, #0
    27e4:	d0f2      	beq.n	27cc <Parser_LoraSetAppSKey+0x10>
            statusIdx = LORAWAN_SetAttr(APPS_KEY, aParserData);
    27e6:	4907      	ldr	r1, [pc, #28]	; (2804 <Parser_LoraSetAppSKey+0x48>)
    27e8:	2005      	movs	r0, #5
    27ea:	4b08      	ldr	r3, [pc, #32]	; (280c <Parser_LoraSetAppSKey+0x50>)
    27ec:	4798      	blx	r3
    27ee:	0003      	movs	r3, r0
            gParserConfiguredJoinParameters.flags.appskey = 1;
    27f0:	4907      	ldr	r1, [pc, #28]	; (2810 <Parser_LoraSetAppSKey+0x54>)
    27f2:	780a      	ldrb	r2, [r1, #0]
    27f4:	2020      	movs	r0, #32
    27f6:	4302      	orrs	r2, r0
    27f8:	700a      	strb	r2, [r1, #0]
    27fa:	e7e7      	b.n	27cc <Parser_LoraSetAppSKey+0x10>
    27fc:	000041c5 	.word	0x000041c5
    2800:	0001f8d0 	.word	0x0001f8d0
    2804:	2000116c 	.word	0x2000116c
    2808:	000044cd 	.word	0x000044cd
    280c:	00013a01 	.word	0x00013a01
    2810:	20001f88 	.word	0x20001f88

00002814 <Parser_LoraSetAppKey>:
{
    2814:	b510      	push	{r4, lr}
    2816:	0004      	movs	r4, r0
    if(Validate_HexValue(pParserCmdInfo->pParam1))
    2818:	6800      	ldr	r0, [r0, #0]
    281a:	4b0e      	ldr	r3, [pc, #56]	; (2854 <Parser_LoraSetAppKey+0x40>)
    281c:	4798      	blx	r3
    StackRetStatus_t statusIdx = LORAWAN_INVALID_PARAMETER;
    281e:	230a      	movs	r3, #10
    if(Validate_HexValue(pParserCmdInfo->pParam1))
    2820:	2800      	cmp	r0, #0
    2822:	d104      	bne.n	282e <Parser_LoraSetAppKey+0x1a>
    pParserCmdInfo->pReplyCmd = (char*)gapParserLorawanStatus[statusIdx];
    2824:	009b      	lsls	r3, r3, #2
    2826:	4a0c      	ldr	r2, [pc, #48]	; (2858 <Parser_LoraSetAppKey+0x44>)
    2828:	589b      	ldr	r3, [r3, r2]
    282a:	6163      	str	r3, [r4, #20]
}
    282c:	bd10      	pop	{r4, pc}
        if(Parser_HexAsciiToInt(32U, pParserCmdInfo->pParam1, (uint8_t *)aParserData))
    282e:	4a0b      	ldr	r2, [pc, #44]	; (285c <Parser_LoraSetAppKey+0x48>)
    2830:	6821      	ldr	r1, [r4, #0]
    2832:	2020      	movs	r0, #32
    2834:	4b0a      	ldr	r3, [pc, #40]	; (2860 <Parser_LoraSetAppKey+0x4c>)
    2836:	4798      	blx	r3
    StackRetStatus_t statusIdx = LORAWAN_INVALID_PARAMETER;
    2838:	230a      	movs	r3, #10
        if(Parser_HexAsciiToInt(32U, pParserCmdInfo->pParam1, (uint8_t *)aParserData))
    283a:	2800      	cmp	r0, #0
    283c:	d0f2      	beq.n	2824 <Parser_LoraSetAppKey+0x10>
             statusIdx = LORAWAN_SetAttr(APP_KEY,aParserData);
    283e:	4907      	ldr	r1, [pc, #28]	; (285c <Parser_LoraSetAppKey+0x48>)
    2840:	2003      	movs	r0, #3
    2842:	4b08      	ldr	r3, [pc, #32]	; (2864 <Parser_LoraSetAppKey+0x50>)
    2844:	4798      	blx	r3
    2846:	0003      	movs	r3, r0
            gParserConfiguredJoinParameters.flags.appkey = 1;
    2848:	4907      	ldr	r1, [pc, #28]	; (2868 <Parser_LoraSetAppKey+0x54>)
    284a:	780a      	ldrb	r2, [r1, #0]
    284c:	2004      	movs	r0, #4
    284e:	4302      	orrs	r2, r0
    2850:	700a      	strb	r2, [r1, #0]
    2852:	e7e7      	b.n	2824 <Parser_LoraSetAppKey+0x10>
    2854:	000041c5 	.word	0x000041c5
    2858:	0001f8d0 	.word	0x0001f8d0
    285c:	2000116c 	.word	0x2000116c
    2860:	000044cd 	.word	0x000044cd
    2864:	00013a01 	.word	0x00013a01
    2868:	20001f88 	.word	0x20001f88

0000286c <Parser_LoraSetChannelFreq>:
{
    286c:	b530      	push	{r4, r5, lr}
    286e:	b085      	sub	sp, #20
    2870:	0004      	movs	r4, r0
    unsigned long freq = strtoul(pParserCmdInfo->pParam2, NULL, 10);
    2872:	220a      	movs	r2, #10
    2874:	2100      	movs	r1, #0
    2876:	6840      	ldr	r0, [r0, #4]
    2878:	4b14      	ldr	r3, [pc, #80]	; (28cc <Parser_LoraSetChannelFreq+0x60>)
    287a:	4798      	blx	r3
    287c:	0005      	movs	r5, r0
    ChannelParameters_t ch_params = {0};
    287e:	2208      	movs	r2, #8
    2880:	2100      	movs	r1, #0
    2882:	a801      	add	r0, sp, #4
    2884:	4b12      	ldr	r3, [pc, #72]	; (28d0 <Parser_LoraSetChannelFreq+0x64>)
    2886:	4798      	blx	r3
    if(Validate_Uint8DecAsciiValue(pParserCmdInfo->pParam1, &channelId) &&
    2888:	210f      	movs	r1, #15
    288a:	4469      	add	r1, sp
    288c:	6820      	ldr	r0, [r4, #0]
    288e:	4b11      	ldr	r3, [pc, #68]	; (28d4 <Parser_LoraSetChannelFreq+0x68>)
    2890:	4798      	blx	r3
    StackRetStatus_t status = LORAWAN_INVALID_PARAMETER;
    2892:	230a      	movs	r3, #10
    if(Validate_Uint8DecAsciiValue(pParserCmdInfo->pParam1, &channelId) &&
    2894:	2800      	cmp	r0, #0
    2896:	d105      	bne.n	28a4 <Parser_LoraSetChannelFreq+0x38>
    pParserCmdInfo->pReplyCmd = (char*)gapParserLorawanStatus[status];
    2898:	009b      	lsls	r3, r3, #2
    289a:	4a0f      	ldr	r2, [pc, #60]	; (28d8 <Parser_LoraSetChannelFreq+0x6c>)
    289c:	589b      	ldr	r3, [r3, r2]
    289e:	6163      	str	r3, [r4, #20]
}
    28a0:	b005      	add	sp, #20
    28a2:	bd30      	pop	{r4, r5, pc}
       Validate_UintDecAsciiValue(pParserCmdInfo->pParam2, 10, UINT32_MAX))
    28a4:	2201      	movs	r2, #1
    28a6:	4252      	negs	r2, r2
    28a8:	210a      	movs	r1, #10
    28aa:	6860      	ldr	r0, [r4, #4]
    28ac:	4b0b      	ldr	r3, [pc, #44]	; (28dc <Parser_LoraSetChannelFreq+0x70>)
    28ae:	4798      	blx	r3
    StackRetStatus_t status = LORAWAN_INVALID_PARAMETER;
    28b0:	230a      	movs	r3, #10
    if(Validate_Uint8DecAsciiValue(pParserCmdInfo->pParam1, &channelId) &&
    28b2:	2800      	cmp	r0, #0
    28b4:	d0f0      	beq.n	2898 <Parser_LoraSetChannelFreq+0x2c>
        ch_params.channelId = channelId;
    28b6:	a901      	add	r1, sp, #4
    28b8:	3305      	adds	r3, #5
    28ba:	446b      	add	r3, sp
    28bc:	781b      	ldrb	r3, [r3, #0]
    28be:	700b      	strb	r3, [r1, #0]
        ch_params.channelAttr.frequency = (uint32_t)freq;
    28c0:	604d      	str	r5, [r1, #4]
        status = LORAWAN_SetAttr(CH_PARAM_FREQUENCY,&ch_params);
    28c2:	201a      	movs	r0, #26
    28c4:	4b06      	ldr	r3, [pc, #24]	; (28e0 <Parser_LoraSetChannelFreq+0x74>)
    28c6:	4798      	blx	r3
    28c8:	0003      	movs	r3, r0
    28ca:	e7e5      	b.n	2898 <Parser_LoraSetChannelFreq+0x2c>
    28cc:	0001a609 	.word	0x0001a609
    28d0:	00019ec9 	.word	0x00019ec9
    28d4:	00004259 	.word	0x00004259
    28d8:	0001f8d0 	.word	0x0001f8d0
    28dc:	0000432d 	.word	0x0000432d
    28e0:	00013a01 	.word	0x00013a01

000028e4 <Parser_LoraGetChannelFreq>:
{
    28e4:	b530      	push	{r4, r5, lr}
    28e6:	b083      	sub	sp, #12
    28e8:	0004      	movs	r4, r0
    pParserCmdInfo->pReplyCmd = (char*)gapParserLorawanStatus[LORAWAN_INVALID_PARAMETER];
    28ea:	4b0d      	ldr	r3, [pc, #52]	; (2920 <Parser_LoraGetChannelFreq+0x3c>)
    28ec:	6143      	str	r3, [r0, #20]
    if(Validate_Uint8DecAsciiValue(pParserCmdInfo->pParam1, &channelId))
    28ee:	466b      	mov	r3, sp
    28f0:	1cd9      	adds	r1, r3, #3
    28f2:	6800      	ldr	r0, [r0, #0]
    28f4:	4b0b      	ldr	r3, [pc, #44]	; (2924 <Parser_LoraGetChannelFreq+0x40>)
    28f6:	4798      	blx	r3
    28f8:	2800      	cmp	r0, #0
    28fa:	d101      	bne.n	2900 <Parser_LoraGetChannelFreq+0x1c>
}
    28fc:	b003      	add	sp, #12
    28fe:	bd30      	pop	{r4, r5, pc}
        status = LORAWAN_GetAttr(CH_PARAM_FREQUENCY,&channelId,&freq);
    2900:	aa01      	add	r2, sp, #4
    2902:	466b      	mov	r3, sp
    2904:	1cd9      	adds	r1, r3, #3
    2906:	201a      	movs	r0, #26
    2908:	4b07      	ldr	r3, [pc, #28]	; (2928 <Parser_LoraGetChannelFreq+0x44>)
    290a:	4798      	blx	r3
		if(status == LORAWAN_SUCCESS)
    290c:	2808      	cmp	r0, #8
    290e:	d1f5      	bne.n	28fc <Parser_LoraGetChannelFreq+0x18>
			ultoa(aParserData, freq, 10U);
    2910:	4d06      	ldr	r5, [pc, #24]	; (292c <Parser_LoraGetChannelFreq+0x48>)
    2912:	220a      	movs	r2, #10
    2914:	9901      	ldr	r1, [sp, #4]
    2916:	0028      	movs	r0, r5
    2918:	4b05      	ldr	r3, [pc, #20]	; (2930 <Parser_LoraGetChannelFreq+0x4c>)
    291a:	4798      	blx	r3
			pParserCmdInfo->pReplyCmd = aParserData;	
    291c:	6165      	str	r5, [r4, #20]
}
    291e:	e7ed      	b.n	28fc <Parser_LoraGetChannelFreq+0x18>
    2920:	0001f660 	.word	0x0001f660
    2924:	00004259 	.word	0x00004259
    2928:	000119bd 	.word	0x000119bd
    292c:	2000116c 	.word	0x2000116c
    2930:	000042b1 	.word	0x000042b1

00002934 <Parser_LoraSetSubBandStatus>:
{
    2934:	b5f0      	push	{r4, r5, r6, r7, lr}
    2936:	46ce      	mov	lr, r9
    2938:	b500      	push	{lr}
    293a:	b086      	sub	sp, #24
    293c:	0006      	movs	r6, r0
    validationVal = Validate_OnOffAsciiValue(pParserCmdInfo->pParam2);
    293e:	6840      	ldr	r0, [r0, #4]
    2940:	4b23      	ldr	r3, [pc, #140]	; (29d0 <Parser_LoraSetSubBandStatus+0x9c>)
    2942:	4798      	blx	r3
    2944:	9001      	str	r0, [sp, #4]
    2946:	0005      	movs	r5, r0
    if (Validate_Uint8DecAsciiValue(pParserCmdInfo->pParam1, &subBandId) && 
    2948:	210f      	movs	r1, #15
    294a:	ab02      	add	r3, sp, #8
    294c:	469c      	mov	ip, r3
    294e:	4461      	add	r1, ip
    2950:	6830      	ldr	r0, [r6, #0]
    2952:	4b20      	ldr	r3, [pc, #128]	; (29d4 <Parser_LoraSetSubBandStatus+0xa0>)
    2954:	4798      	blx	r3
    StackRetStatus_t status = LORAWAN_INVALID_PARAMETER;
    2956:	230a      	movs	r3, #10
    if (Validate_Uint8DecAsciiValue(pParserCmdInfo->pParam1, &subBandId) && 
    2958:	2800      	cmp	r0, #0
    295a:	d001      	beq.n	2960 <Parser_LoraSetSubBandStatus+0x2c>
    295c:	2d01      	cmp	r5, #1
    295e:	d907      	bls.n	2970 <Parser_LoraSetSubBandStatus+0x3c>
    pParserCmdInfo->pReplyCmd = (char*)gapParserLorawanStatus[status];
    2960:	009b      	lsls	r3, r3, #2
    2962:	4a1d      	ldr	r2, [pc, #116]	; (29d8 <Parser_LoraSetSubBandStatus+0xa4>)
    2964:	589b      	ldr	r3, [r3, r2]
    2966:	6173      	str	r3, [r6, #20]
}
    2968:	b006      	add	sp, #24
    296a:	bc04      	pop	{r2}
    296c:	4691      	mov	r9, r2
    296e:	bdf0      	pop	{r4, r5, r6, r7, pc}
            (subBandId >= 1) && 
    2970:	3305      	adds	r3, #5
    2972:	aa02      	add	r2, sp, #8
    2974:	4694      	mov	ip, r2
    2976:	4463      	add	r3, ip
    2978:	781a      	ldrb	r2, [r3, #0]
            (validationVal < 2U) && 
    297a:	1e51      	subs	r1, r2, #1
    StackRetStatus_t status = LORAWAN_INVALID_PARAMETER;
    297c:	230a      	movs	r3, #10
            (validationVal < 2U) && 
    297e:	2907      	cmp	r1, #7
    2980:	d8ee      	bhi.n	2960 <Parser_LoraSetSubBandStatus+0x2c>
           for (i = ((subBandId - 1) * 8); i <= ((subBandId * 8) - 1); i++)
    2982:	00cc      	lsls	r4, r1, #3
    2984:	b2e4      	uxtb	r4, r4
    2986:	00d3      	lsls	r3, r2, #3
    2988:	3b01      	subs	r3, #1
    298a:	429c      	cmp	r4, r3
    298c:	dc14      	bgt.n	29b8 <Parser_LoraSetSubBandStatus+0x84>
			   ch_params.channelId = i;
    298e:	af03      	add	r7, sp, #12
			   ch_params.channelAttr.status = validationVal;
    2990:	1e6b      	subs	r3, r5, #1
    2992:	419d      	sbcs	r5, r3
               status = LORAWAN_SetAttr(CH_PARAM_STATUS, &ch_params);
    2994:	4b11      	ldr	r3, [pc, #68]	; (29dc <Parser_LoraSetSubBandStatus+0xa8>)
    2996:	4699      	mov	r9, r3
			   ch_params.channelId = i;
    2998:	703c      	strb	r4, [r7, #0]
			   ch_params.channelAttr.status = validationVal;
    299a:	713d      	strb	r5, [r7, #4]
               status = LORAWAN_SetAttr(CH_PARAM_STATUS, &ch_params);
    299c:	0039      	movs	r1, r7
    299e:	201c      	movs	r0, #28
    29a0:	47c8      	blx	r9
           for (i = ((subBandId - 1) * 8); i <= ((subBandId * 8) - 1); i++)
    29a2:	3401      	adds	r4, #1
    29a4:	b2e4      	uxtb	r4, r4
    29a6:	230f      	movs	r3, #15
    29a8:	aa02      	add	r2, sp, #8
    29aa:	4694      	mov	ip, r2
    29ac:	4463      	add	r3, ip
    29ae:	781a      	ldrb	r2, [r3, #0]
    29b0:	00d3      	lsls	r3, r2, #3
    29b2:	3b01      	subs	r3, #1
    29b4:	429c      	cmp	r4, r3
    29b6:	ddef      	ble.n	2998 <Parser_LoraSetSubBandStatus+0x64>
               ch_params.channelId = (63 + subBandId);
    29b8:	a903      	add	r1, sp, #12
    29ba:	323f      	adds	r2, #63	; 0x3f
    29bc:	700a      	strb	r2, [r1, #0]
               ch_params.channelAttr.status = validationVal;
    29be:	9a01      	ldr	r2, [sp, #4]
    29c0:	1e53      	subs	r3, r2, #1
    29c2:	419a      	sbcs	r2, r3
    29c4:	710a      	strb	r2, [r1, #4]
               status = LORAWAN_SetAttr(CH_PARAM_STATUS, &ch_params);
    29c6:	201c      	movs	r0, #28
    29c8:	4b04      	ldr	r3, [pc, #16]	; (29dc <Parser_LoraSetSubBandStatus+0xa8>)
    29ca:	4798      	blx	r3
    29cc:	0003      	movs	r3, r0
    29ce:	e7c7      	b.n	2960 <Parser_LoraSetSubBandStatus+0x2c>
    29d0:	00004401 	.word	0x00004401
    29d4:	00004259 	.word	0x00004259
    29d8:	0001f8d0 	.word	0x0001f8d0
    29dc:	00013a01 	.word	0x00013a01

000029e0 <Parser_LoraGetSubBandStatus>:
{
    29e0:	b5f0      	push	{r4, r5, r6, r7, lr}
    29e2:	46c6      	mov	lr, r8
    29e4:	b500      	push	{lr}
    29e6:	b082      	sub	sp, #8
    29e8:	0006      	movs	r6, r0
    pParserCmdInfo->pReplyCmd = (char*)gapParserLorawanStatus[LORAWAN_INVALID_PARAMETER];
    29ea:	4b23      	ldr	r3, [pc, #140]	; (2a78 <Parser_LoraGetSubBandStatus+0x98>)
    29ec:	6143      	str	r3, [r0, #20]
    if (Validate_Uint8DecAsciiValue(pParserCmdInfo->pParam1, &subBandId) && 
    29ee:	466b      	mov	r3, sp
    29f0:	1dd9      	adds	r1, r3, #7
    29f2:	6800      	ldr	r0, [r0, #0]
    29f4:	4b21      	ldr	r3, [pc, #132]	; (2a7c <Parser_LoraGetSubBandStatus+0x9c>)
    29f6:	4798      	blx	r3
    29f8:	2800      	cmp	r0, #0
    29fa:	d030      	beq.n	2a5e <Parser_LoraGetSubBandStatus+0x7e>
            (subBandId >= 1) && 
    29fc:	466b      	mov	r3, sp
    29fe:	79da      	ldrb	r2, [r3, #7]
    if (Validate_Uint8DecAsciiValue(pParserCmdInfo->pParam1, &subBandId) && 
    2a00:	1e53      	subs	r3, r2, #1
    2a02:	2b07      	cmp	r3, #7
    2a04:	d82b      	bhi.n	2a5e <Parser_LoraGetSubBandStatus+0x7e>
        for (i = ((subBandId - 1) * 8); i <= ((subBandId * 8) - 1); i++)
    2a06:	00dc      	lsls	r4, r3, #3
    2a08:	b2e4      	uxtb	r4, r4
    2a0a:	00d3      	lsls	r3, r2, #3
    2a0c:	3b01      	subs	r3, #1
    2a0e:	429c      	cmp	r4, r3
    2a10:	dc1b      	bgt.n	2a4a <Parser_LoraGetSubBandStatus+0x6a>
             if(LORAWAN_GetAttr(CH_PARAM_STATUS, &subBandId, &chStatus) == LORAWAN_SUCCESS)
    2a12:	466b      	mov	r3, sp
    2a14:	1ddd      	adds	r5, r3, #7
    2a16:	4f1a      	ldr	r7, [pc, #104]	; (2a80 <Parser_LoraGetSubBandStatus+0xa0>)
				pParserCmdInfo->pReplyCmd = (char*)gapParseOnOff[chStatus];
    2a18:	4b1a      	ldr	r3, [pc, #104]	; (2a84 <Parser_LoraGetSubBandStatus+0xa4>)
    2a1a:	4698      	mov	r8, r3
    2a1c:	e006      	b.n	2a2c <Parser_LoraGetSubBandStatus+0x4c>
        for (i = ((subBandId - 1) * 8); i <= ((subBandId * 8) - 1); i++)
    2a1e:	3401      	adds	r4, #1
    2a20:	b2e4      	uxtb	r4, r4
    2a22:	782a      	ldrb	r2, [r5, #0]
    2a24:	00d3      	lsls	r3, r2, #3
    2a26:	3b01      	subs	r3, #1
    2a28:	429c      	cmp	r4, r3
    2a2a:	dc0e      	bgt.n	2a4a <Parser_LoraGetSubBandStatus+0x6a>
             if(LORAWAN_GetAttr(CH_PARAM_STATUS, &subBandId, &chStatus) == LORAWAN_SUCCESS)
    2a2c:	466b      	mov	r3, sp
    2a2e:	1d9a      	adds	r2, r3, #6
    2a30:	0029      	movs	r1, r5
    2a32:	201c      	movs	r0, #28
    2a34:	47b8      	blx	r7
    2a36:	2808      	cmp	r0, #8
    2a38:	d1f1      	bne.n	2a1e <Parser_LoraGetSubBandStatus+0x3e>
				pParserCmdInfo->pReplyCmd = (char*)gapParseOnOff[chStatus];
    2a3a:	466b      	mov	r3, sp
    2a3c:	3306      	adds	r3, #6
    2a3e:	781b      	ldrb	r3, [r3, #0]
    2a40:	009b      	lsls	r3, r3, #2
    2a42:	4642      	mov	r2, r8
    2a44:	589b      	ldr	r3, [r3, r2]
    2a46:	6173      	str	r3, [r6, #20]
    2a48:	e7e9      	b.n	2a1e <Parser_LoraGetSubBandStatus+0x3e>
             uint8_t chId = 63 + subBandId;
    2a4a:	466b      	mov	r3, sp
    2a4c:	1d59      	adds	r1, r3, #5
    2a4e:	323f      	adds	r2, #63	; 0x3f
    2a50:	700a      	strb	r2, [r1, #0]
             if(LORAWAN_GetAttr(CH_PARAM_STATUS, &chId, &chStatus) == LORAWAN_SUCCESS)
    2a52:	1d9a      	adds	r2, r3, #6
    2a54:	201c      	movs	r0, #28
    2a56:	4b0a      	ldr	r3, [pc, #40]	; (2a80 <Parser_LoraGetSubBandStatus+0xa0>)
    2a58:	4798      	blx	r3
    2a5a:	2808      	cmp	r0, #8
    2a5c:	d003      	beq.n	2a66 <Parser_LoraGetSubBandStatus+0x86>
}
    2a5e:	b002      	add	sp, #8
    2a60:	bc04      	pop	{r2}
    2a62:	4690      	mov	r8, r2
    2a64:	bdf0      	pop	{r4, r5, r6, r7, pc}
				pParserCmdInfo->pReplyCmd = (char*)gapParseOnOff[chStatus];
    2a66:	466b      	mov	r3, sp
    2a68:	3306      	adds	r3, #6
    2a6a:	781b      	ldrb	r3, [r3, #0]
    2a6c:	009b      	lsls	r3, r3, #2
    2a6e:	4a05      	ldr	r2, [pc, #20]	; (2a84 <Parser_LoraGetSubBandStatus+0xa4>)
    2a70:	589b      	ldr	r3, [r3, r2]
    2a72:	6173      	str	r3, [r6, #20]
}
    2a74:	e7f3      	b.n	2a5e <Parser_LoraGetSubBandStatus+0x7e>
    2a76:	46c0      	nop			; (mov r8, r8)
    2a78:	0001f660 	.word	0x0001f660
    2a7c:	00004259 	.word	0x00004259
    2a80:	000119bd 	.word	0x000119bd
    2a84:	0001f8b0 	.word	0x0001f8b0

00002a88 <Parser_LoraSetChannelStatus>:
{
    2a88:	b570      	push	{r4, r5, r6, lr}
    2a8a:	b084      	sub	sp, #16
    2a8c:	0004      	movs	r4, r0
    ChannelParameters_t ch_params = {0};
    2a8e:	2208      	movs	r2, #8
    2a90:	2100      	movs	r1, #0
    2a92:	a801      	add	r0, sp, #4
    2a94:	4b11      	ldr	r3, [pc, #68]	; (2adc <Parser_LoraSetChannelStatus+0x54>)
    2a96:	4798      	blx	r3
    validationVal = Validate_OnOffAsciiValue(pParserCmdInfo->pParam2);
    2a98:	6860      	ldr	r0, [r4, #4]
    2a9a:	4b11      	ldr	r3, [pc, #68]	; (2ae0 <Parser_LoraSetChannelStatus+0x58>)
    2a9c:	4798      	blx	r3
    2a9e:	0005      	movs	r5, r0
    if(Validate_Uint8DecAsciiValue(pParserCmdInfo->pParam1, &channelId) &&(validationVal < 2U))
    2aa0:	210f      	movs	r1, #15
    2aa2:	4469      	add	r1, sp
    2aa4:	6820      	ldr	r0, [r4, #0]
    2aa6:	4b0f      	ldr	r3, [pc, #60]	; (2ae4 <Parser_LoraSetChannelStatus+0x5c>)
    2aa8:	4798      	blx	r3
    StackRetStatus_t status = LORAWAN_INVALID_PARAMETER;
    2aaa:	230a      	movs	r3, #10
    if(Validate_Uint8DecAsciiValue(pParserCmdInfo->pParam1, &channelId) &&(validationVal < 2U))
    2aac:	2800      	cmp	r0, #0
    2aae:	d001      	beq.n	2ab4 <Parser_LoraSetChannelStatus+0x2c>
    2ab0:	2d01      	cmp	r5, #1
    2ab2:	d905      	bls.n	2ac0 <Parser_LoraSetChannelStatus+0x38>
    pParserCmdInfo->pReplyCmd = (char*)gapParserLorawanStatus[status];
    2ab4:	009b      	lsls	r3, r3, #2
    2ab6:	4a0c      	ldr	r2, [pc, #48]	; (2ae8 <Parser_LoraSetChannelStatus+0x60>)
    2ab8:	589b      	ldr	r3, [r3, r2]
    2aba:	6163      	str	r3, [r4, #20]
}
    2abc:	b004      	add	sp, #16
    2abe:	bd70      	pop	{r4, r5, r6, pc}
        ch_params.channelId = channelId;
    2ac0:	a901      	add	r1, sp, #4
    2ac2:	3305      	adds	r3, #5
    2ac4:	446b      	add	r3, sp
    2ac6:	781b      	ldrb	r3, [r3, #0]
    2ac8:	700b      	strb	r3, [r1, #0]
        ch_params.channelAttr.status = validationVal;
    2aca:	1e6b      	subs	r3, r5, #1
    2acc:	419d      	sbcs	r5, r3
    2ace:	710d      	strb	r5, [r1, #4]
        status = LORAWAN_SetAttr(CH_PARAM_STATUS,&ch_params);
    2ad0:	201c      	movs	r0, #28
    2ad2:	4b06      	ldr	r3, [pc, #24]	; (2aec <Parser_LoraSetChannelStatus+0x64>)
    2ad4:	4798      	blx	r3
    2ad6:	0003      	movs	r3, r0
    2ad8:	e7ec      	b.n	2ab4 <Parser_LoraSetChannelStatus+0x2c>
    2ada:	46c0      	nop			; (mov r8, r8)
    2adc:	00019ec9 	.word	0x00019ec9
    2ae0:	00004401 	.word	0x00004401
    2ae4:	00004259 	.word	0x00004259
    2ae8:	0001f8d0 	.word	0x0001f8d0
    2aec:	00013a01 	.word	0x00013a01

00002af0 <Parser_LoraGetChannelStatus>:
{
    2af0:	b510      	push	{r4, lr}
    2af2:	b082      	sub	sp, #8
    2af4:	0004      	movs	r4, r0
    pParserCmdInfo->pReplyCmd = (char*)gapParserLorawanStatus[LORAWAN_INVALID_PARAMETER];
    2af6:	4b0d      	ldr	r3, [pc, #52]	; (2b2c <Parser_LoraGetChannelStatus+0x3c>)
    2af8:	6143      	str	r3, [r0, #20]
    if(Validate_Uint8DecAsciiValue(pParserCmdInfo->pParam1, &channelId))
    2afa:	466b      	mov	r3, sp
    2afc:	1d99      	adds	r1, r3, #6
    2afe:	6800      	ldr	r0, [r0, #0]
    2b00:	4b0b      	ldr	r3, [pc, #44]	; (2b30 <Parser_LoraGetChannelStatus+0x40>)
    2b02:	4798      	blx	r3
    2b04:	2800      	cmp	r0, #0
    2b06:	d101      	bne.n	2b0c <Parser_LoraGetChannelStatus+0x1c>
}
    2b08:	b002      	add	sp, #8
    2b0a:	bd10      	pop	{r4, pc}
        if(LORAWAN_GetAttr(CH_PARAM_STATUS,&channelId,&chStatus) == LORAWAN_SUCCESS)
    2b0c:	466b      	mov	r3, sp
    2b0e:	1dda      	adds	r2, r3, #7
    2b10:	1d99      	adds	r1, r3, #6
    2b12:	201c      	movs	r0, #28
    2b14:	4b07      	ldr	r3, [pc, #28]	; (2b34 <Parser_LoraGetChannelStatus+0x44>)
    2b16:	4798      	blx	r3
    2b18:	2808      	cmp	r0, #8
    2b1a:	d1f5      	bne.n	2b08 <Parser_LoraGetChannelStatus+0x18>
			pParserCmdInfo->pReplyCmd = (char*)gapParseOnOff[chStatus];
    2b1c:	466b      	mov	r3, sp
    2b1e:	3307      	adds	r3, #7
    2b20:	781b      	ldrb	r3, [r3, #0]
    2b22:	009b      	lsls	r3, r3, #2
    2b24:	4a04      	ldr	r2, [pc, #16]	; (2b38 <Parser_LoraGetChannelStatus+0x48>)
    2b26:	589b      	ldr	r3, [r3, r2]
    2b28:	6163      	str	r3, [r4, #20]
}
    2b2a:	e7ed      	b.n	2b08 <Parser_LoraGetChannelStatus+0x18>
    2b2c:	0001f660 	.word	0x0001f660
    2b30:	00004259 	.word	0x00004259
    2b34:	000119bd 	.word	0x000119bd
    2b38:	0001f8b0 	.word	0x0001f8b0

00002b3c <Parser_LoraSetDatarateRange>:
{
    2b3c:	b510      	push	{r4, lr}
    2b3e:	b084      	sub	sp, #16
    2b40:	0004      	movs	r4, r0
    ChannelParameters_t ch_params = {0};
    2b42:	2208      	movs	r2, #8
    2b44:	2100      	movs	r1, #0
    2b46:	a801      	add	r0, sp, #4
    2b48:	4b1c      	ldr	r3, [pc, #112]	; (2bbc <Parser_LoraSetDatarateRange+0x80>)
    2b4a:	4798      	blx	r3
    if(Validate_Uint8DecAsciiValue(pParserCmdInfo->pParam1, &channelId) &&
    2b4c:	210f      	movs	r1, #15
    2b4e:	4469      	add	r1, sp
    2b50:	6820      	ldr	r0, [r4, #0]
    2b52:	4b1b      	ldr	r3, [pc, #108]	; (2bc0 <Parser_LoraSetDatarateRange+0x84>)
    2b54:	4798      	blx	r3
    StackRetStatus_t status = LORAWAN_INVALID_PARAMETER;
    2b56:	230a      	movs	r3, #10
    if(Validate_Uint8DecAsciiValue(pParserCmdInfo->pParam1, &channelId) &&
    2b58:	2800      	cmp	r0, #0
    2b5a:	d105      	bne.n	2b68 <Parser_LoraSetDatarateRange+0x2c>
    pParserCmdInfo->pReplyCmd = (char*)gapParserLorawanStatus[status];
    2b5c:	009b      	lsls	r3, r3, #2
    2b5e:	4a19      	ldr	r2, [pc, #100]	; (2bc4 <Parser_LoraSetDatarateRange+0x88>)
    2b60:	589b      	ldr	r3, [r3, r2]
    2b62:	6163      	str	r3, [r4, #20]
}
    2b64:	b004      	add	sp, #16
    2b66:	bd10      	pop	{r4, pc}
       Validate_Uint8DecAsciiValue(pParserCmdInfo->pParam2, &minDr) &&
    2b68:	210e      	movs	r1, #14
    2b6a:	4469      	add	r1, sp
    2b6c:	6860      	ldr	r0, [r4, #4]
    2b6e:	4b14      	ldr	r3, [pc, #80]	; (2bc0 <Parser_LoraSetDatarateRange+0x84>)
    2b70:	4798      	blx	r3
    StackRetStatus_t status = LORAWAN_INVALID_PARAMETER;
    2b72:	230a      	movs	r3, #10
    if(Validate_Uint8DecAsciiValue(pParserCmdInfo->pParam1, &channelId) &&
    2b74:	2800      	cmp	r0, #0
    2b76:	d0f1      	beq.n	2b5c <Parser_LoraSetDatarateRange+0x20>
       Validate_Uint8DecAsciiValue(pParserCmdInfo->pParam3, &maxDr) &&
    2b78:	210d      	movs	r1, #13
    2b7a:	4469      	add	r1, sp
    2b7c:	68a0      	ldr	r0, [r4, #8]
    2b7e:	4b10      	ldr	r3, [pc, #64]	; (2bc0 <Parser_LoraSetDatarateRange+0x84>)
    2b80:	4798      	blx	r3
    StackRetStatus_t status = LORAWAN_INVALID_PARAMETER;
    2b82:	230a      	movs	r3, #10
       Validate_Uint8DecAsciiValue(pParserCmdInfo->pParam2, &minDr) &&
    2b84:	2800      	cmp	r0, #0
    2b86:	d0e9      	beq.n	2b5c <Parser_LoraSetDatarateRange+0x20>
       minDr < 16 && maxDr < 16)
    2b88:	3304      	adds	r3, #4
    2b8a:	446b      	add	r3, sp
    2b8c:	7818      	ldrb	r0, [r3, #0]
    StackRetStatus_t status = LORAWAN_INVALID_PARAMETER;
    2b8e:	230a      	movs	r3, #10
       Validate_Uint8DecAsciiValue(pParserCmdInfo->pParam3, &maxDr) &&
    2b90:	280f      	cmp	r0, #15
    2b92:	d8e3      	bhi.n	2b5c <Parser_LoraSetDatarateRange+0x20>
       minDr < 16 && maxDr < 16)
    2b94:	3303      	adds	r3, #3
    2b96:	446b      	add	r3, sp
    2b98:	781a      	ldrb	r2, [r3, #0]
    StackRetStatus_t status = LORAWAN_INVALID_PARAMETER;
    2b9a:	230a      	movs	r3, #10
       minDr < 16 && maxDr < 16)
    2b9c:	2a0f      	cmp	r2, #15
    2b9e:	d8dd      	bhi.n	2b5c <Parser_LoraSetDatarateRange+0x20>
        ch_params.channelId = channelId;
    2ba0:	a901      	add	r1, sp, #4
    2ba2:	3305      	adds	r3, #5
    2ba4:	446b      	add	r3, sp
    2ba6:	781b      	ldrb	r3, [r3, #0]
    2ba8:	700b      	strb	r3, [r1, #0]
        ch_params.channelAttr.dataRange = ((maxDr << 4) | minDr);
    2baa:	0112      	lsls	r2, r2, #4
    2bac:	4302      	orrs	r2, r0
    2bae:	710a      	strb	r2, [r1, #4]
        status = LORAWAN_SetAttr(CH_PARAM_DR_RANGE, &ch_params);
    2bb0:	201b      	movs	r0, #27
    2bb2:	4b05      	ldr	r3, [pc, #20]	; (2bc8 <Parser_LoraSetDatarateRange+0x8c>)
    2bb4:	4798      	blx	r3
    2bb6:	0003      	movs	r3, r0
    2bb8:	e7d0      	b.n	2b5c <Parser_LoraSetDatarateRange+0x20>
    2bba:	46c0      	nop			; (mov r8, r8)
    2bbc:	00019ec9 	.word	0x00019ec9
    2bc0:	00004259 	.word	0x00004259
    2bc4:	0001f8d0 	.word	0x0001f8d0
    2bc8:	00013a01 	.word	0x00013a01

00002bcc <Parser_LoraGetDatarateRange>:
{
    2bcc:	b5f0      	push	{r4, r5, r6, r7, lr}
    2bce:	b083      	sub	sp, #12
    2bd0:	0004      	movs	r4, r0
    pParserCmdInfo->pReplyCmd = (char*)gapParserLorawanStatus[LORAWAN_INVALID_PARAMETER];
    2bd2:	4b15      	ldr	r3, [pc, #84]	; (2c28 <Parser_LoraGetDatarateRange+0x5c>)
    2bd4:	6143      	str	r3, [r0, #20]
    if(Validate_Uint8DecAsciiValue(pParserCmdInfo->pParam1, &channelId))
    2bd6:	466b      	mov	r3, sp
    2bd8:	1dd9      	adds	r1, r3, #7
    2bda:	6800      	ldr	r0, [r0, #0]
    2bdc:	4b13      	ldr	r3, [pc, #76]	; (2c2c <Parser_LoraGetDatarateRange+0x60>)
    2bde:	4798      	blx	r3
    2be0:	2800      	cmp	r0, #0
    2be2:	d101      	bne.n	2be8 <Parser_LoraGetDatarateRange+0x1c>
}
    2be4:	b003      	add	sp, #12
    2be6:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if(LORAWAN_GetAttr(CH_PARAM_DR_RANGE,&channelId,&drRange) == LORAWAN_SUCCESS)
    2be8:	466b      	mov	r3, sp
    2bea:	1d9a      	adds	r2, r3, #6
    2bec:	1dd9      	adds	r1, r3, #7
    2bee:	201b      	movs	r0, #27
    2bf0:	4b0f      	ldr	r3, [pc, #60]	; (2c30 <Parser_LoraGetDatarateRange+0x64>)
    2bf2:	4798      	blx	r3
    2bf4:	2808      	cmp	r0, #8
    2bf6:	d1f5      	bne.n	2be4 <Parser_LoraGetDatarateRange+0x18>
			minDr = drRange & 0x0F;
    2bf8:	466b      	mov	r3, sp
    2bfa:	799e      	ldrb	r6, [r3, #6]
			itoa(minDr, aParserData, 10U);
    2bfc:	4d0d      	ldr	r5, [pc, #52]	; (2c34 <Parser_LoraGetDatarateRange+0x68>)
    2bfe:	3007      	adds	r0, #7
    2c00:	4030      	ands	r0, r6
    2c02:	220a      	movs	r2, #10
    2c04:	0029      	movs	r1, r5
    2c06:	4f0c      	ldr	r7, [pc, #48]	; (2c38 <Parser_LoraGetDatarateRange+0x6c>)
    2c08:	47b8      	blx	r7
			crtIdx = strlen(aParserData);
    2c0a:	0028      	movs	r0, r5
    2c0c:	4b0b      	ldr	r3, [pc, #44]	; (2c3c <Parser_LoraGetDatarateRange+0x70>)
    2c0e:	4798      	blx	r3
			aParserData[crtIdx] = ' ';
    2c10:	0403      	lsls	r3, r0, #16
    2c12:	0c1b      	lsrs	r3, r3, #16
    2c14:	2220      	movs	r2, #32
    2c16:	54ea      	strb	r2, [r5, r3]
			crtIdx ++;
    2c18:	3001      	adds	r0, #1
			itoa(maxDr, &aParserData[crtIdx], 10U);
    2c1a:	b281      	uxth	r1, r0
    2c1c:	1949      	adds	r1, r1, r5
    2c1e:	0930      	lsrs	r0, r6, #4
    2c20:	3a16      	subs	r2, #22
    2c22:	47b8      	blx	r7
			pParserCmdInfo->pReplyCmd = aParserData;
    2c24:	6165      	str	r5, [r4, #20]
}
    2c26:	e7dd      	b.n	2be4 <Parser_LoraGetDatarateRange+0x18>
    2c28:	0001f660 	.word	0x0001f660
    2c2c:	00004259 	.word	0x00004259
    2c30:	000119bd 	.word	0x000119bd
    2c34:	2000116c 	.word	0x2000116c
    2c38:	00019751 	.word	0x00019751
    2c3c:	0001a2fd 	.word	0x0001a2fd

00002c40 <Parser_LoraSetTxPower>:
{
    2c40:	b510      	push	{r4, lr}
    2c42:	b082      	sub	sp, #8
    2c44:	0004      	movs	r4, r0
    if((Validate_Uint8DecAsciiValue(pParserCmdInfo->pParam1, &txPower)))
    2c46:	466b      	mov	r3, sp
    2c48:	1dd9      	adds	r1, r3, #7
    2c4a:	6800      	ldr	r0, [r0, #0]
    2c4c:	4b08      	ldr	r3, [pc, #32]	; (2c70 <Parser_LoraSetTxPower+0x30>)
    2c4e:	4798      	blx	r3
    StackRetStatus_t status = LORAWAN_INVALID_PARAMETER;
    2c50:	230a      	movs	r3, #10
    if((Validate_Uint8DecAsciiValue(pParserCmdInfo->pParam1, &txPower)))
    2c52:	2800      	cmp	r0, #0
    2c54:	d105      	bne.n	2c62 <Parser_LoraSetTxPower+0x22>
    pParserCmdInfo->pReplyCmd = (char*)gapParserLorawanStatus[status];
    2c56:	009b      	lsls	r3, r3, #2
    2c58:	4a06      	ldr	r2, [pc, #24]	; (2c74 <Parser_LoraSetTxPower+0x34>)
    2c5a:	589b      	ldr	r3, [r3, r2]
    2c5c:	6163      	str	r3, [r4, #20]
}
    2c5e:	b002      	add	sp, #8
    2c60:	bd10      	pop	{r4, pc}
        status = LORAWAN_SetAttr(TX_POWER, &txPower);
    2c62:	466b      	mov	r3, sp
    2c64:	1dd9      	adds	r1, r3, #7
    2c66:	2008      	movs	r0, #8
    2c68:	4b03      	ldr	r3, [pc, #12]	; (2c78 <Parser_LoraSetTxPower+0x38>)
    2c6a:	4798      	blx	r3
    2c6c:	0003      	movs	r3, r0
    2c6e:	e7f2      	b.n	2c56 <Parser_LoraSetTxPower+0x16>
    2c70:	00004259 	.word	0x00004259
    2c74:	0001f8d0 	.word	0x0001f8d0
    2c78:	00013a01 	.word	0x00013a01

00002c7c <Parser_LoraGetTxPower>:
{
    2c7c:	b570      	push	{r4, r5, r6, lr}
    2c7e:	b082      	sub	sp, #8
    2c80:	0006      	movs	r6, r0
    LORAWAN_GetAttr(TX_POWER,NULL,&txPowerIdx);
    2c82:	466b      	mov	r3, sp
    2c84:	1ddd      	adds	r5, r3, #7
    2c86:	002a      	movs	r2, r5
    2c88:	2100      	movs	r1, #0
    2c8a:	2008      	movs	r0, #8
    2c8c:	4b05      	ldr	r3, [pc, #20]	; (2ca4 <Parser_LoraGetTxPower+0x28>)
    2c8e:	4798      	blx	r3
    itoa( txPowerIdx, aParserData, 10);
    2c90:	4c05      	ldr	r4, [pc, #20]	; (2ca8 <Parser_LoraGetTxPower+0x2c>)
    2c92:	7828      	ldrb	r0, [r5, #0]
    2c94:	220a      	movs	r2, #10
    2c96:	0021      	movs	r1, r4
    2c98:	4b04      	ldr	r3, [pc, #16]	; (2cac <Parser_LoraGetTxPower+0x30>)
    2c9a:	4798      	blx	r3
    pParserCmdInfo->pReplyCmd = aParserData;
    2c9c:	6174      	str	r4, [r6, #20]
}
    2c9e:	b002      	add	sp, #8
    2ca0:	bd70      	pop	{r4, r5, r6, pc}
    2ca2:	46c0      	nop			; (mov r8, r8)
    2ca4:	000119bd 	.word	0x000119bd
    2ca8:	2000116c 	.word	0x2000116c
    2cac:	00019751 	.word	0x00019751

00002cb0 <Parser_LoraPause>:
{
    2cb0:	b570      	push	{r4, r5, r6, lr}
    2cb2:	0005      	movs	r5, r0
    resumeInterval = LORAWAN_Pause();
    2cb4:	4b04      	ldr	r3, [pc, #16]	; (2cc8 <Parser_LoraPause+0x18>)
    2cb6:	4798      	blx	r3
    2cb8:	0001      	movs	r1, r0
    ultoa(aParserData, resumeInterval, 10);
    2cba:	4c04      	ldr	r4, [pc, #16]	; (2ccc <Parser_LoraPause+0x1c>)
    2cbc:	220a      	movs	r2, #10
    2cbe:	0020      	movs	r0, r4
    2cc0:	4b03      	ldr	r3, [pc, #12]	; (2cd0 <Parser_LoraPause+0x20>)
    2cc2:	4798      	blx	r3
    pParserCmdInfo->pReplyCmd = aParserData;
    2cc4:	616c      	str	r4, [r5, #20]
}
    2cc6:	bd70      	pop	{r4, r5, r6, pc}
    2cc8:	0001069d 	.word	0x0001069d
    2ccc:	2000116c 	.word	0x2000116c
    2cd0:	000042b1 	.word	0x000042b1

00002cd4 <Parser_LoraResume>:
{
    2cd4:	b510      	push	{r4, lr}
    2cd6:	0004      	movs	r4, r0
    LORAWAN_Resume();
    2cd8:	4b02      	ldr	r3, [pc, #8]	; (2ce4 <Parser_LoraResume+0x10>)
    2cda:	4798      	blx	r3
    pParserCmdInfo->pReplyCmd = (char*)gapParserLorawanStatus[LORAWAN_SUCCESS];
    2cdc:	4b02      	ldr	r3, [pc, #8]	; (2ce8 <Parser_LoraResume+0x14>)
    2cde:	6163      	str	r3, [r4, #20]
}
    2ce0:	bd10      	pop	{r4, pc}
    2ce2:	46c0      	nop			; (mov r8, r8)
    2ce4:	00010761 	.word	0x00010761
    2ce8:	0001f84c 	.word	0x0001f84c

00002cec <Parser_LoraSave>:
    pParserCmdInfo->pReplyCmd = (char*)gapParserLorawanStatus[LORAWAN_SUCCESS];
    2cec:	4b01      	ldr	r3, [pc, #4]	; (2cf4 <Parser_LoraSave+0x8>)
    2cee:	6143      	str	r3, [r0, #20]
}
    2cf0:	4770      	bx	lr
    2cf2:	46c0      	nop			; (mov r8, r8)
    2cf4:	0001f84c 	.word	0x0001f84c

00002cf8 <Parser_LoraSetRx2WindowParams>:
{
    2cf8:	b530      	push	{r4, r5, lr}
    2cfa:	b085      	sub	sp, #20
    2cfc:	0004      	movs	r4, r0
    unsigned long freq = strtoul(pParserCmdInfo->pParam2, NULL, 10);
    2cfe:	220a      	movs	r2, #10
    2d00:	2100      	movs	r1, #0
    2d02:	6840      	ldr	r0, [r0, #4]
    2d04:	4b12      	ldr	r3, [pc, #72]	; (2d50 <Parser_LoraSetRx2WindowParams+0x58>)
    2d06:	4798      	blx	r3
    2d08:	0005      	movs	r5, r0
    if(Validate_Uint8DecAsciiValue(pParserCmdInfo->pParam1, &datarate) &&
    2d0a:	210f      	movs	r1, #15
    2d0c:	4469      	add	r1, sp
    2d0e:	6820      	ldr	r0, [r4, #0]
    2d10:	4b10      	ldr	r3, [pc, #64]	; (2d54 <Parser_LoraSetRx2WindowParams+0x5c>)
    2d12:	4798      	blx	r3
    StackRetStatus_t status = LORAWAN_INVALID_PARAMETER;
    2d14:	230a      	movs	r3, #10
    if(Validate_Uint8DecAsciiValue(pParserCmdInfo->pParam1, &datarate) &&
    2d16:	2800      	cmp	r0, #0
    2d18:	d105      	bne.n	2d26 <Parser_LoraSetRx2WindowParams+0x2e>
    pParserCmdInfo->pReplyCmd = (char*)gapParserLorawanStatus[status];
    2d1a:	009b      	lsls	r3, r3, #2
    2d1c:	4a0e      	ldr	r2, [pc, #56]	; (2d58 <Parser_LoraSetRx2WindowParams+0x60>)
    2d1e:	589b      	ldr	r3, [r3, r2]
    2d20:	6163      	str	r3, [r4, #20]
}
    2d22:	b005      	add	sp, #20
    2d24:	bd30      	pop	{r4, r5, pc}
       Validate_UintDecAsciiValue(pParserCmdInfo->pParam2, 10, UINT32_MAX))
    2d26:	2201      	movs	r2, #1
    2d28:	4252      	negs	r2, r2
    2d2a:	210a      	movs	r1, #10
    2d2c:	6860      	ldr	r0, [r4, #4]
    2d2e:	4b0b      	ldr	r3, [pc, #44]	; (2d5c <Parser_LoraSetRx2WindowParams+0x64>)
    2d30:	4798      	blx	r3
    StackRetStatus_t status = LORAWAN_INVALID_PARAMETER;
    2d32:	230a      	movs	r3, #10
    if(Validate_Uint8DecAsciiValue(pParserCmdInfo->pParam1, &datarate) &&
    2d34:	2800      	cmp	r0, #0
    2d36:	d0f0      	beq.n	2d1a <Parser_LoraSetRx2WindowParams+0x22>
        rx2Params.dataRate = datarate;
    2d38:	a901      	add	r1, sp, #4
    2d3a:	3305      	adds	r3, #5
    2d3c:	446b      	add	r3, sp
    2d3e:	781b      	ldrb	r3, [r3, #0]
    2d40:	710b      	strb	r3, [r1, #4]
        rx2Params.frequency = freq;
    2d42:	9501      	str	r5, [sp, #4]
        status = LORAWAN_SetAttr(RX2_WINDOW_PARAMS,&rx2Params);
    2d44:	2015      	movs	r0, #21
    2d46:	4b06      	ldr	r3, [pc, #24]	; (2d60 <Parser_LoraSetRx2WindowParams+0x68>)
    2d48:	4798      	blx	r3
    2d4a:	0003      	movs	r3, r0
    2d4c:	e7e5      	b.n	2d1a <Parser_LoraSetRx2WindowParams+0x22>
    2d4e:	46c0      	nop			; (mov r8, r8)
    2d50:	0001a609 	.word	0x0001a609
    2d54:	00004259 	.word	0x00004259
    2d58:	0001f8d0 	.word	0x0001f8d0
    2d5c:	0000432d 	.word	0x0000432d
    2d60:	00013a01 	.word	0x00013a01

00002d64 <Parser_LoraGetRx2WindowParams>:
{
    2d64:	b5f0      	push	{r4, r5, r6, r7, lr}
    2d66:	b083      	sub	sp, #12
    2d68:	0004      	movs	r4, r0
     pParserCmdInfo->pReplyCmd = (char*)gapParserLorawanStatus[LORAWAN_INVALID_PARAMETER];
    2d6a:	4b11      	ldr	r3, [pc, #68]	; (2db0 <Parser_LoraGetRx2WindowParams+0x4c>)
    2d6c:	6143      	str	r3, [r0, #20]
    if(LORAWAN_GetAttr(RX2_WINDOW_PARAMS, NULL, &rx2Params) == LORAWAN_SUCCESS)
    2d6e:	466a      	mov	r2, sp
    2d70:	2100      	movs	r1, #0
    2d72:	2015      	movs	r0, #21
    2d74:	4b0f      	ldr	r3, [pc, #60]	; (2db4 <Parser_LoraGetRx2WindowParams+0x50>)
    2d76:	4798      	blx	r3
    2d78:	2808      	cmp	r0, #8
    2d7a:	d001      	beq.n	2d80 <Parser_LoraGetRx2WindowParams+0x1c>
}
    2d7c:	b003      	add	sp, #12
    2d7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		freq = rx2Params.frequency;
    2d80:	9f00      	ldr	r7, [sp, #0]
		ultoa(aParserData, datarate, 10U);
    2d82:	466b      	mov	r3, sp
    2d84:	7919      	ldrb	r1, [r3, #4]
    2d86:	4d0c      	ldr	r5, [pc, #48]	; (2db8 <Parser_LoraGetRx2WindowParams+0x54>)
    2d88:	220a      	movs	r2, #10
    2d8a:	0028      	movs	r0, r5
    2d8c:	4e0b      	ldr	r6, [pc, #44]	; (2dbc <Parser_LoraGetRx2WindowParams+0x58>)
    2d8e:	47b0      	blx	r6
		dataLen = strlen(aParserData);
    2d90:	0028      	movs	r0, r5
    2d92:	4b0b      	ldr	r3, [pc, #44]	; (2dc0 <Parser_LoraGetRx2WindowParams+0x5c>)
    2d94:	4798      	blx	r3
		aParserData[dataLen ++] = ' ';
    2d96:	23ff      	movs	r3, #255	; 0xff
    2d98:	4003      	ands	r3, r0
    2d9a:	2220      	movs	r2, #32
    2d9c:	54ea      	strb	r2, [r5, r3]
    2d9e:	3001      	adds	r0, #1
		ultoa(&aParserData[dataLen], freq, 10U);
    2da0:	b2c0      	uxtb	r0, r0
    2da2:	1940      	adds	r0, r0, r5
    2da4:	3a16      	subs	r2, #22
    2da6:	0039      	movs	r1, r7
    2da8:	47b0      	blx	r6
		pParserCmdInfo->pReplyCmd = aParserData;
    2daa:	6165      	str	r5, [r4, #20]
}
    2dac:	e7e6      	b.n	2d7c <Parser_LoraGetRx2WindowParams+0x18>
    2dae:	46c0      	nop			; (mov r8, r8)
    2db0:	0001f660 	.word	0x0001f660
    2db4:	000119bd 	.word	0x000119bd
    2db8:	2000116c 	.word	0x2000116c
    2dbc:	000042b1 	.word	0x000042b1
    2dc0:	0001a2fd 	.word	0x0001a2fd

00002dc4 <Parser_LoraSetLbt>:
{
    2dc4:	b570      	push	{r4, r5, r6, lr}
    2dc6:	b084      	sub	sp, #16
    2dc8:	0004      	movs	r4, r0
	lorawanLBTParams.lbtScanPeriod = atoi(pParserCmdInfo->pParam1);
    2dca:	6800      	ldr	r0, [r0, #0]
    2dcc:	4e0f      	ldr	r6, [pc, #60]	; (2e0c <Parser_LoraSetLbt+0x48>)
    2dce:	47b0      	blx	r6
    2dd0:	ad02      	add	r5, sp, #8
    2dd2:	8028      	strh	r0, [r5, #0]
	lorawanLBTParams.lbtThreshold = strtoul(pParserCmdInfo->pParam2, &pEnd, 10) ;
    2dd4:	220a      	movs	r2, #10
    2dd6:	a901      	add	r1, sp, #4
    2dd8:	6860      	ldr	r0, [r4, #4]
    2dda:	4b0d      	ldr	r3, [pc, #52]	; (2e10 <Parser_LoraSetLbt+0x4c>)
    2ddc:	4798      	blx	r3
    2dde:	8068      	strh	r0, [r5, #2]
	lorawanLBTParams.maxRetryChannels = atoi(pParserCmdInfo->pParam3);
    2de0:	68a0      	ldr	r0, [r4, #8]
    2de2:	47b0      	blx	r6
    2de4:	80a8      	strh	r0, [r5, #4]
	lorawanLBTParams.lbtNumOfSamples = atoi(pParserCmdInfo->pParam4);
    2de6:	68e0      	ldr	r0, [r4, #12]
    2de8:	47b0      	blx	r6
    2dea:	71a8      	strb	r0, [r5, #6]
	lorawanLBTParams.lbtTransmitOn = atoi(pParserCmdInfo->pParam5);
    2dec:	6920      	ldr	r0, [r4, #16]
    2dee:	47b0      	blx	r6
    2df0:	1e43      	subs	r3, r0, #1
    2df2:	4198      	sbcs	r0, r3
    2df4:	71e8      	strb	r0, [r5, #7]
	status = LORAWAN_SetAttr(LORAWAN_LBT_PARAMS, &lorawanLBTParams);
    2df6:	0029      	movs	r1, r5
    2df8:	2027      	movs	r0, #39	; 0x27
    2dfa:	4b06      	ldr	r3, [pc, #24]	; (2e14 <Parser_LoraSetLbt+0x50>)
    2dfc:	4798      	blx	r3
	pParserCmdInfo->pReplyCmd = (char*)gapParserLorawanStatus[status];
    2dfe:	0080      	lsls	r0, r0, #2
    2e00:	4b05      	ldr	r3, [pc, #20]	; (2e18 <Parser_LoraSetLbt+0x54>)
    2e02:	58c3      	ldr	r3, [r0, r3]
    2e04:	6163      	str	r3, [r4, #20]
}
    2e06:	b004      	add	sp, #16
    2e08:	bd70      	pop	{r4, r5, r6, pc}
    2e0a:	46c0      	nop			; (mov r8, r8)
    2e0c:	000196cd 	.word	0x000196cd
    2e10:	0001a609 	.word	0x0001a609
    2e14:	00013a01 	.word	0x00013a01
    2e18:	0001f8d0 	.word	0x0001f8d0

00002e1c <Parser_LoraGetLbt>:
{
    2e1c:	b5f0      	push	{r4, r5, r6, r7, lr}
    2e1e:	46ce      	mov	lr, r9
    2e20:	4647      	mov	r7, r8
    2e22:	b580      	push	{r7, lr}
    2e24:	b083      	sub	sp, #12
    2e26:	0005      	movs	r5, r0
	status = LORAWAN_GetAttr(LORAWAN_LBT_PARAMS, NULL, &lorawanLBTParams);
    2e28:	466a      	mov	r2, sp
    2e2a:	2100      	movs	r1, #0
    2e2c:	2027      	movs	r0, #39	; 0x27
    2e2e:	4b27      	ldr	r3, [pc, #156]	; (2ecc <Parser_LoraGetLbt+0xb0>)
    2e30:	4798      	blx	r3
	pParserCmdInfo->pReplyCmd = (char*)gapParserLorawanStatus[status];
    2e32:	0082      	lsls	r2, r0, #2
    2e34:	4b26      	ldr	r3, [pc, #152]	; (2ed0 <Parser_LoraGetLbt+0xb4>)
    2e36:	58d3      	ldr	r3, [r2, r3]
    2e38:	616b      	str	r3, [r5, #20]
	if (LORAWAN_SUCCESS == status)
    2e3a:	2808      	cmp	r0, #8
    2e3c:	d004      	beq.n	2e48 <Parser_LoraGetLbt+0x2c>
}
    2e3e:	b003      	add	sp, #12
    2e40:	bc0c      	pop	{r2, r3}
    2e42:	4690      	mov	r8, r2
    2e44:	4699      	mov	r9, r3
    2e46:	bdf0      	pop	{r4, r5, r6, r7, pc}
		ultoa(aParserData, lorawanLBTParams.lbtScanPeriod, 10U);
    2e48:	466b      	mov	r3, sp
    2e4a:	8819      	ldrh	r1, [r3, #0]
    2e4c:	4c21      	ldr	r4, [pc, #132]	; (2ed4 <Parser_LoraGetLbt+0xb8>)
    2e4e:	220a      	movs	r2, #10
    2e50:	0020      	movs	r0, r4
    2e52:	4e21      	ldr	r6, [pc, #132]	; (2ed8 <Parser_LoraGetLbt+0xbc>)
    2e54:	47b0      	blx	r6
        dataLen = strlen(aParserData);
    2e56:	0020      	movs	r0, r4
    2e58:	4b20      	ldr	r3, [pc, #128]	; (2edc <Parser_LoraGetLbt+0xc0>)
    2e5a:	4699      	mov	r9, r3
    2e5c:	4798      	blx	r3
        aParserData[dataLen ++] = ' ';
    2e5e:	27ff      	movs	r7, #255	; 0xff
    2e60:	003b      	movs	r3, r7
    2e62:	4003      	ands	r3, r0
    2e64:	2220      	movs	r2, #32
    2e66:	4690      	mov	r8, r2
    2e68:	54e2      	strb	r2, [r4, r3]
    2e6a:	3001      	adds	r0, #1
		itoa(lorawanLBTParams.lbtThreshold, &aParserData[dataLen], 10U);
    2e6c:	b2c1      	uxtb	r1, r0
    2e6e:	1909      	adds	r1, r1, r4
    2e70:	466b      	mov	r3, sp
    2e72:	2002      	movs	r0, #2
    2e74:	5e18      	ldrsh	r0, [r3, r0]
    2e76:	220a      	movs	r2, #10
    2e78:	4b19      	ldr	r3, [pc, #100]	; (2ee0 <Parser_LoraGetLbt+0xc4>)
    2e7a:	4798      	blx	r3
		dataLen = strlen(aParserData);
    2e7c:	0020      	movs	r0, r4
    2e7e:	47c8      	blx	r9
        aParserData[dataLen ++] = ' ';
    2e80:	003b      	movs	r3, r7
    2e82:	4003      	ands	r3, r0
    2e84:	4642      	mov	r2, r8
    2e86:	54e2      	strb	r2, [r4, r3]
        ultoa(&aParserData[dataLen], lorawanLBTParams.maxRetryChannels, 10U);
    2e88:	466b      	mov	r3, sp
    2e8a:	8899      	ldrh	r1, [r3, #4]
        aParserData[dataLen ++] = ' ';
    2e8c:	3001      	adds	r0, #1
        ultoa(&aParserData[dataLen], lorawanLBTParams.maxRetryChannels, 10U);
    2e8e:	b2c0      	uxtb	r0, r0
    2e90:	1900      	adds	r0, r0, r4
    2e92:	220a      	movs	r2, #10
    2e94:	47b0      	blx	r6
		dataLen = strlen(aParserData);
    2e96:	0020      	movs	r0, r4
    2e98:	47c8      	blx	r9
        aParserData[dataLen ++] = ' ';
    2e9a:	003b      	movs	r3, r7
    2e9c:	4003      	ands	r3, r0
    2e9e:	4642      	mov	r2, r8
    2ea0:	54e2      	strb	r2, [r4, r3]
        ultoa(&aParserData[dataLen], lorawanLBTParams.lbtNumOfSamples, 10U);
    2ea2:	466b      	mov	r3, sp
    2ea4:	7999      	ldrb	r1, [r3, #6]
        aParserData[dataLen ++] = ' ';
    2ea6:	3001      	adds	r0, #1
        ultoa(&aParserData[dataLen], lorawanLBTParams.lbtNumOfSamples, 10U);
    2ea8:	b2c0      	uxtb	r0, r0
    2eaa:	1900      	adds	r0, r0, r4
    2eac:	220a      	movs	r2, #10
    2eae:	47b0      	blx	r6
		dataLen = strlen(aParserData);
    2eb0:	0020      	movs	r0, r4
    2eb2:	47c8      	blx	r9
        aParserData[dataLen ++] = ' ';
    2eb4:	4007      	ands	r7, r0
    2eb6:	4643      	mov	r3, r8
    2eb8:	55e3      	strb	r3, [r4, r7]
        ultoa(&aParserData[dataLen], lorawanLBTParams.lbtTransmitOn, 10U);
    2eba:	466b      	mov	r3, sp
    2ebc:	79d9      	ldrb	r1, [r3, #7]
        aParserData[dataLen ++] = ' ';
    2ebe:	3001      	adds	r0, #1
        ultoa(&aParserData[dataLen], lorawanLBTParams.lbtTransmitOn, 10U);
    2ec0:	b2c0      	uxtb	r0, r0
    2ec2:	1900      	adds	r0, r0, r4
    2ec4:	220a      	movs	r2, #10
    2ec6:	47b0      	blx	r6
        pParserCmdInfo->pReplyCmd = aParserData;
    2ec8:	616c      	str	r4, [r5, #20]
}
    2eca:	e7b8      	b.n	2e3e <Parser_LoraGetLbt+0x22>
    2ecc:	000119bd 	.word	0x000119bd
    2ed0:	0001f8d0 	.word	0x0001f8d0
    2ed4:	2000116c 	.word	0x2000116c
    2ed8:	000042b1 	.word	0x000042b1
    2edc:	0001a2fd 	.word	0x0001a2fd
    2ee0:	00019751 	.word	0x00019751

00002ee4 <Parser_LoraForceEnable>:
{
    2ee4:	b510      	push	{r4, lr}
    2ee6:	0004      	movs	r4, r0
    LORAWAN_ForceEnable();
    2ee8:	4b02      	ldr	r3, [pc, #8]	; (2ef4 <Parser_LoraForceEnable+0x10>)
    2eea:	4798      	blx	r3
    pParserCmdInfo->pReplyCmd = (char*)gapParserLorawanStatus[LORAWAN_SUCCESS];
    2eec:	4b02      	ldr	r3, [pc, #8]	; (2ef8 <Parser_LoraForceEnable+0x14>)
    2eee:	6163      	str	r3, [r4, #20]
}
    2ef0:	bd10      	pop	{r4, pc}
    2ef2:	46c0      	nop			; (mov r8, r8)
    2ef4:	00010839 	.word	0x00010839
    2ef8:	0001f84c 	.word	0x0001f84c

00002efc <Parser_LoraSetUplinkCounter>:
{
    2efc:	b510      	push	{r4, lr}
    2efe:	b082      	sub	sp, #8
    2f00:	0004      	movs	r4, r0
    uint32_t param1Value = (uint32_t)strtoul(pParserCmdInfo->pParam1, NULL, 10U);
    2f02:	220a      	movs	r2, #10
    2f04:	2100      	movs	r1, #0
    2f06:	6800      	ldr	r0, [r0, #0]
    2f08:	4b0b      	ldr	r3, [pc, #44]	; (2f38 <Parser_LoraSetUplinkCounter+0x3c>)
    2f0a:	4798      	blx	r3
    2f0c:	9001      	str	r0, [sp, #4]
    if (Validate_UintDecAsciiValue(pParserCmdInfo->pParam1, 10, UINT32_MAX))
    2f0e:	2201      	movs	r2, #1
    2f10:	4252      	negs	r2, r2
    2f12:	210a      	movs	r1, #10
    2f14:	6820      	ldr	r0, [r4, #0]
    2f16:	4b09      	ldr	r3, [pc, #36]	; (2f3c <Parser_LoraSetUplinkCounter+0x40>)
    2f18:	4798      	blx	r3
	StackRetStatus_t status = LORAWAN_INVALID_PARAMETER;
    2f1a:	230a      	movs	r3, #10
    if (Validate_UintDecAsciiValue(pParserCmdInfo->pParam1, 10, UINT32_MAX))
    2f1c:	2800      	cmp	r0, #0
    2f1e:	d105      	bne.n	2f2c <Parser_LoraSetUplinkCounter+0x30>
    pParserCmdInfo->pReplyCmd = (char*)gapParserLorawanStatus[status];
    2f20:	009b      	lsls	r3, r3, #2
    2f22:	4a07      	ldr	r2, [pc, #28]	; (2f40 <Parser_LoraSetUplinkCounter+0x44>)
    2f24:	589b      	ldr	r3, [r3, r2]
    2f26:	6163      	str	r3, [r4, #20]
}
    2f28:	b002      	add	sp, #8
    2f2a:	bd10      	pop	{r4, pc}
        status = LORAWAN_SetAttr(UPLINK_COUNTER, &param1Value);       
    2f2c:	a901      	add	r1, sp, #4
    2f2e:	200a      	movs	r0, #10
    2f30:	4b04      	ldr	r3, [pc, #16]	; (2f44 <Parser_LoraSetUplinkCounter+0x48>)
    2f32:	4798      	blx	r3
    2f34:	0003      	movs	r3, r0
    2f36:	e7f3      	b.n	2f20 <Parser_LoraSetUplinkCounter+0x24>
    2f38:	0001a609 	.word	0x0001a609
    2f3c:	0000432d 	.word	0x0000432d
    2f40:	0001f8d0 	.word	0x0001f8d0
    2f44:	00013a01 	.word	0x00013a01

00002f48 <Parser_LoraSetDownlinkCounter>:
{
    2f48:	b510      	push	{r4, lr}
    2f4a:	b082      	sub	sp, #8
    2f4c:	0004      	movs	r4, r0
    uint32_t param1Value = (uint32_t)strtoul(pParserCmdInfo->pParam1, NULL, 10U);
    2f4e:	220a      	movs	r2, #10
    2f50:	2100      	movs	r1, #0
    2f52:	6800      	ldr	r0, [r0, #0]
    2f54:	4b0b      	ldr	r3, [pc, #44]	; (2f84 <Parser_LoraSetDownlinkCounter+0x3c>)
    2f56:	4798      	blx	r3
    2f58:	9001      	str	r0, [sp, #4]
    if (Validate_UintDecAsciiValue(pParserCmdInfo->pParam1, 10, UINT32_MAX))
    2f5a:	2201      	movs	r2, #1
    2f5c:	4252      	negs	r2, r2
    2f5e:	210a      	movs	r1, #10
    2f60:	6820      	ldr	r0, [r4, #0]
    2f62:	4b09      	ldr	r3, [pc, #36]	; (2f88 <Parser_LoraSetDownlinkCounter+0x40>)
    2f64:	4798      	blx	r3
    StackRetStatus_t status = LORAWAN_INVALID_PARAMETER;
    2f66:	230a      	movs	r3, #10
    if (Validate_UintDecAsciiValue(pParserCmdInfo->pParam1, 10, UINT32_MAX))
    2f68:	2800      	cmp	r0, #0
    2f6a:	d105      	bne.n	2f78 <Parser_LoraSetDownlinkCounter+0x30>
     pParserCmdInfo->pReplyCmd = (char*)gapParserLorawanStatus[status];
    2f6c:	009b      	lsls	r3, r3, #2
    2f6e:	4a07      	ldr	r2, [pc, #28]	; (2f8c <Parser_LoraSetDownlinkCounter+0x44>)
    2f70:	589b      	ldr	r3, [r3, r2]
    2f72:	6163      	str	r3, [r4, #20]
}
    2f74:	b002      	add	sp, #8
    2f76:	bd10      	pop	{r4, pc}
        status = LORAWAN_SetAttr(DOWNLINK_COUNTER, &param1Value);   
    2f78:	a901      	add	r1, sp, #4
    2f7a:	200b      	movs	r0, #11
    2f7c:	4b04      	ldr	r3, [pc, #16]	; (2f90 <Parser_LoraSetDownlinkCounter+0x48>)
    2f7e:	4798      	blx	r3
    2f80:	0003      	movs	r3, r0
    2f82:	e7f3      	b.n	2f6c <Parser_LoraSetDownlinkCounter+0x24>
    2f84:	0001a609 	.word	0x0001a609
    2f88:	0000432d 	.word	0x0000432d
    2f8c:	0001f8d0 	.word	0x0001f8d0
    2f90:	00013a01 	.word	0x00013a01

00002f94 <Parser_LoraSetSyncWord>:
{
    2f94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2f96:	0004      	movs	r4, r0
    uint16_t asciiDataLen = strlen(pParserCmdInfo->pParam1);
    2f98:	6805      	ldr	r5, [r0, #0]
    2f9a:	0028      	movs	r0, r5
    2f9c:	4b10      	ldr	r3, [pc, #64]	; (2fe0 <Parser_LoraSetSyncWord+0x4c>)
    2f9e:	4798      	blx	r3
    2fa0:	0006      	movs	r6, r0
    if (Validate_HexValue(pParserCmdInfo->pParam1) && (2 == strlen(pParserCmdInfo->pParam1)))
    2fa2:	0028      	movs	r0, r5
    2fa4:	4b0f      	ldr	r3, [pc, #60]	; (2fe4 <Parser_LoraSetSyncWord+0x50>)
    2fa6:	4798      	blx	r3
    StackRetStatus_t status = LORAWAN_INVALID_PARAMETER;
    2fa8:	230a      	movs	r3, #10
    if (Validate_HexValue(pParserCmdInfo->pParam1) && (2 == strlen(pParserCmdInfo->pParam1)))
    2faa:	2800      	cmp	r0, #0
    2fac:	d006      	beq.n	2fbc <Parser_LoraSetSyncWord+0x28>
    2fae:	6827      	ldr	r7, [r4, #0]
    2fb0:	0038      	movs	r0, r7
    2fb2:	4b0b      	ldr	r3, [pc, #44]	; (2fe0 <Parser_LoraSetSyncWord+0x4c>)
    2fb4:	4798      	blx	r3
    StackRetStatus_t status = LORAWAN_INVALID_PARAMETER;
    2fb6:	230a      	movs	r3, #10
    if (Validate_HexValue(pParserCmdInfo->pParam1) && (2 == strlen(pParserCmdInfo->pParam1)))
    2fb8:	2802      	cmp	r0, #2
    2fba:	d004      	beq.n	2fc6 <Parser_LoraSetSyncWord+0x32>
    pParserCmdInfo->pReplyCmd = (char*)gapParserLorawanStatus[status];
    2fbc:	009b      	lsls	r3, r3, #2
    2fbe:	4a0a      	ldr	r2, [pc, #40]	; (2fe8 <Parser_LoraSetSyncWord+0x54>)
    2fc0:	589b      	ldr	r3, [r3, r2]
    2fc2:	6163      	str	r3, [r4, #20]
}
    2fc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        Parser_HexAsciiToInt(asciiDataLen, pParserCmdInfo->pParam1, (uint8_t *)aParserData);
    2fc6:	4d09      	ldr	r5, [pc, #36]	; (2fec <Parser_LoraSetSyncWord+0x58>)
    2fc8:	b2b0      	uxth	r0, r6
    2fca:	002a      	movs	r2, r5
    2fcc:	0039      	movs	r1, r7
    2fce:	4b08      	ldr	r3, [pc, #32]	; (2ff0 <Parser_LoraSetSyncWord+0x5c>)
    2fd0:	4798      	blx	r3
        status = LORAWAN_SetAttr(SYNC_WORD,aParserData);    
    2fd2:	0029      	movs	r1, r5
    2fd4:	2009      	movs	r0, #9
    2fd6:	4b07      	ldr	r3, [pc, #28]	; (2ff4 <Parser_LoraSetSyncWord+0x60>)
    2fd8:	4798      	blx	r3
    2fda:	0003      	movs	r3, r0
    2fdc:	e7ee      	b.n	2fbc <Parser_LoraSetSyncWord+0x28>
    2fde:	46c0      	nop			; (mov r8, r8)
    2fe0:	0001a2fd 	.word	0x0001a2fd
    2fe4:	000041c5 	.word	0x000041c5
    2fe8:	0001f8d0 	.word	0x0001f8d0
    2fec:	2000116c 	.word	0x2000116c
    2ff0:	000044cd 	.word	0x000044cd
    2ff4:	00013a01 	.word	0x00013a01

00002ff8 <Parser_LoraGetSyncWord>:
{
    2ff8:	b530      	push	{r4, r5, lr}
    2ffa:	b083      	sub	sp, #12
    2ffc:	0005      	movs	r5, r0
    LORAWAN_GetAttr(SYNC_WORD, NULL, &syncWord);
    2ffe:	466b      	mov	r3, sp
    3000:	1dda      	adds	r2, r3, #7
    3002:	2100      	movs	r1, #0
    3004:	2009      	movs	r0, #9
    3006:	4b06      	ldr	r3, [pc, #24]	; (3020 <Parser_LoraGetSyncWord+0x28>)
    3008:	4798      	blx	r3
    Parser_IntArrayToHexAscii(1, &syncWord, aParserData);
    300a:	4c06      	ldr	r4, [pc, #24]	; (3024 <Parser_LoraGetSyncWord+0x2c>)
    300c:	0022      	movs	r2, r4
    300e:	466b      	mov	r3, sp
    3010:	1dd9      	adds	r1, r3, #7
    3012:	2001      	movs	r0, #1
    3014:	4b04      	ldr	r3, [pc, #16]	; (3028 <Parser_LoraGetSyncWord+0x30>)
    3016:	4798      	blx	r3
    pParserCmdInfo->pReplyCmd = aParserData;
    3018:	616c      	str	r4, [r5, #20]
}
    301a:	b003      	add	sp, #12
    301c:	bd30      	pop	{r4, r5, pc}
    301e:	46c0      	nop			; (mov r8, r8)
    3020:	000119bd 	.word	0x000119bd
    3024:	2000116c 	.word	0x2000116c
    3028:	000041f9 	.word	0x000041f9

0000302c <Parser_LoraGetUplinkCounter>:
{
    302c:	b530      	push	{r4, r5, lr}
    302e:	b083      	sub	sp, #12
    3030:	0005      	movs	r5, r0
    LORAWAN_GetAttr(UPLINK_COUNTER, NULL, &ctr);
    3032:	aa01      	add	r2, sp, #4
    3034:	2100      	movs	r1, #0
    3036:	200a      	movs	r0, #10
    3038:	4b05      	ldr	r3, [pc, #20]	; (3050 <Parser_LoraGetUplinkCounter+0x24>)
    303a:	4798      	blx	r3
    ultoa(aParserData, ctr, 10U);
    303c:	4c05      	ldr	r4, [pc, #20]	; (3054 <Parser_LoraGetUplinkCounter+0x28>)
    303e:	220a      	movs	r2, #10
    3040:	9901      	ldr	r1, [sp, #4]
    3042:	0020      	movs	r0, r4
    3044:	4b04      	ldr	r3, [pc, #16]	; (3058 <Parser_LoraGetUplinkCounter+0x2c>)
    3046:	4798      	blx	r3
    pParserCmdInfo->pReplyCmd = aParserData;
    3048:	616c      	str	r4, [r5, #20]
}
    304a:	b003      	add	sp, #12
    304c:	bd30      	pop	{r4, r5, pc}
    304e:	46c0      	nop			; (mov r8, r8)
    3050:	000119bd 	.word	0x000119bd
    3054:	2000116c 	.word	0x2000116c
    3058:	000042b1 	.word	0x000042b1

0000305c <Parser_LoraGetDownlinkCounter>:
{
    305c:	b530      	push	{r4, r5, lr}
    305e:	b083      	sub	sp, #12
    3060:	0005      	movs	r5, r0
    LORAWAN_GetAttr(DOWNLINK_COUNTER, NULL, &ctr);
    3062:	aa01      	add	r2, sp, #4
    3064:	2100      	movs	r1, #0
    3066:	200b      	movs	r0, #11
    3068:	4b05      	ldr	r3, [pc, #20]	; (3080 <Parser_LoraGetDownlinkCounter+0x24>)
    306a:	4798      	blx	r3
    ultoa(aParserData, ctr, 10U);
    306c:	4c05      	ldr	r4, [pc, #20]	; (3084 <Parser_LoraGetDownlinkCounter+0x28>)
    306e:	220a      	movs	r2, #10
    3070:	9901      	ldr	r1, [sp, #4]
    3072:	0020      	movs	r0, r4
    3074:	4b04      	ldr	r3, [pc, #16]	; (3088 <Parser_LoraGetDownlinkCounter+0x2c>)
    3076:	4798      	blx	r3
    pParserCmdInfo->pReplyCmd = aParserData;
    3078:	616c      	str	r4, [r5, #20]
}
    307a:	b003      	add	sp, #12
    307c:	bd30      	pop	{r4, r5, pc}
    307e:	46c0      	nop			; (mov r8, r8)
    3080:	000119bd 	.word	0x000119bd
    3084:	2000116c 	.word	0x2000116c
    3088:	000042b1 	.word	0x000042b1

0000308c <Parser_LoraLinkCheck>:
{
    308c:	b510      	push	{r4, lr}
    308e:	b082      	sub	sp, #8
    3090:	0004      	movs	r4, r0
    uint16_t period = strtoul(pParserCmdInfo->pParam1, NULL, 10);
    3092:	220a      	movs	r2, #10
    3094:	2100      	movs	r1, #0
    3096:	6800      	ldr	r0, [r0, #0]
    3098:	4b0c      	ldr	r3, [pc, #48]	; (30cc <Parser_LoraLinkCheck+0x40>)
    309a:	4798      	blx	r3
    309c:	466b      	mov	r3, sp
    309e:	80d8      	strh	r0, [r3, #6]
    if(Validate_UintDecAsciiValue(pParserCmdInfo->pParam1, 5, UINT16_MAX))
    30a0:	4a0b      	ldr	r2, [pc, #44]	; (30d0 <Parser_LoraLinkCheck+0x44>)
    30a2:	2105      	movs	r1, #5
    30a4:	6820      	ldr	r0, [r4, #0]
    30a6:	4b0b      	ldr	r3, [pc, #44]	; (30d4 <Parser_LoraLinkCheck+0x48>)
    30a8:	4798      	blx	r3
    StackRetStatus_t status = LORAWAN_INVALID_PARAMETER;
    30aa:	230a      	movs	r3, #10
    if(Validate_UintDecAsciiValue(pParserCmdInfo->pParam1, 5, UINT16_MAX))
    30ac:	2800      	cmp	r0, #0
    30ae:	d105      	bne.n	30bc <Parser_LoraLinkCheck+0x30>
    pParserCmdInfo->pReplyCmd = (char*)gapParserLorawanStatus[status];
    30b0:	009b      	lsls	r3, r3, #2
    30b2:	4a09      	ldr	r2, [pc, #36]	; (30d8 <Parser_LoraLinkCheck+0x4c>)
    30b4:	589b      	ldr	r3, [r3, r2]
    30b6:	6163      	str	r3, [r4, #20]
}
    30b8:	b002      	add	sp, #8
    30ba:	bd10      	pop	{r4, pc}
        status = LORAWAN_SetAttr(LINK_CHECK_PERIOD,&period);      
    30bc:	466b      	mov	r3, sp
    30be:	1d99      	adds	r1, r3, #6
    30c0:	2018      	movs	r0, #24
    30c2:	4b06      	ldr	r3, [pc, #24]	; (30dc <Parser_LoraLinkCheck+0x50>)
    30c4:	4798      	blx	r3
    30c6:	0003      	movs	r3, r0
    30c8:	e7f2      	b.n	30b0 <Parser_LoraLinkCheck+0x24>
    30ca:	46c0      	nop			; (mov r8, r8)
    30cc:	0001a609 	.word	0x0001a609
    30d0:	0000ffff 	.word	0x0000ffff
    30d4:	0000432d 	.word	0x0000432d
    30d8:	0001f8d0 	.word	0x0001f8d0
    30dc:	00013a01 	.word	0x00013a01

000030e0 <Parser_LoraGetAggregatedDutyCycle>:
{
    30e0:	b570      	push	{r4, r5, r6, lr}
    30e2:	b082      	sub	sp, #8
    30e4:	0006      	movs	r6, r0
    LORAWAN_GetAttr(AGGREGATED_DUTYCYCLE, NULL, &aggregatedDutyCycle);
    30e6:	466b      	mov	r3, sp
    30e8:	1d9d      	adds	r5, r3, #6
    30ea:	002a      	movs	r2, r5
    30ec:	2100      	movs	r1, #0
    30ee:	201f      	movs	r0, #31
    30f0:	4b05      	ldr	r3, [pc, #20]	; (3108 <Parser_LoraGetAggregatedDutyCycle+0x28>)
    30f2:	4798      	blx	r3
    utoa(aggregatedDutyCycle, aParserData,  10);
    30f4:	4c05      	ldr	r4, [pc, #20]	; (310c <Parser_LoraGetAggregatedDutyCycle+0x2c>)
    30f6:	8828      	ldrh	r0, [r5, #0]
    30f8:	220a      	movs	r2, #10
    30fa:	0021      	movs	r1, r4
    30fc:	4b04      	ldr	r3, [pc, #16]	; (3110 <Parser_LoraGetAggregatedDutyCycle+0x30>)
    30fe:	4798      	blx	r3
    pParserCmdInfo->pReplyCmd = aParserData;
    3100:	6174      	str	r4, [r6, #20]
}
    3102:	b002      	add	sp, #8
    3104:	bd70      	pop	{r4, r5, r6, pc}
    3106:	46c0      	nop			; (mov r8, r8)
    3108:	000119bd 	.word	0x000119bd
    310c:	2000116c 	.word	0x2000116c
    3110:	0001a6c1 	.word	0x0001a6c1

00003114 <Parser_LoraSetAggregatedDutyCycle>:
{
    3114:	b510      	push	{r4, lr}
    3116:	b082      	sub	sp, #8
    3118:	0004      	movs	r4, r0
    uint16_t aggregatedDutyCycle = atoi(pParserCmdInfo->pParam1);
    311a:	6800      	ldr	r0, [r0, #0]
    311c:	4b0c      	ldr	r3, [pc, #48]	; (3150 <Parser_LoraSetAggregatedDutyCycle+0x3c>)
    311e:	4798      	blx	r3
    3120:	466b      	mov	r3, sp
    3122:	80d8      	strh	r0, [r3, #6]
    if(Validate_UintDecAsciiValue(pParserCmdInfo->pParam1, 2, UINT8_MAX))
    3124:	22ff      	movs	r2, #255	; 0xff
    3126:	2102      	movs	r1, #2
    3128:	6820      	ldr	r0, [r4, #0]
    312a:	4b0a      	ldr	r3, [pc, #40]	; (3154 <Parser_LoraSetAggregatedDutyCycle+0x40>)
    312c:	4798      	blx	r3
    StackRetStatus_t status = LORAWAN_INVALID_PARAMETER;
    312e:	230a      	movs	r3, #10
    if(Validate_UintDecAsciiValue(pParserCmdInfo->pParam1, 2, UINT8_MAX))
    3130:	2800      	cmp	r0, #0
    3132:	d105      	bne.n	3140 <Parser_LoraSetAggregatedDutyCycle+0x2c>
    pParserCmdInfo->pReplyCmd = (char*)gapParserLorawanStatus[status];
    3134:	009b      	lsls	r3, r3, #2
    3136:	4a08      	ldr	r2, [pc, #32]	; (3158 <Parser_LoraSetAggregatedDutyCycle+0x44>)
    3138:	589b      	ldr	r3, [r3, r2]
    313a:	6163      	str	r3, [r4, #20]
}
    313c:	b002      	add	sp, #8
    313e:	bd10      	pop	{r4, pc}
		status = LORAWAN_SetAttr(AGGREGATED_DUTYCYCLE,&aggregatedDutyCycle);
    3140:	466b      	mov	r3, sp
    3142:	1d99      	adds	r1, r3, #6
    3144:	201f      	movs	r0, #31
    3146:	4b05      	ldr	r3, [pc, #20]	; (315c <Parser_LoraSetAggregatedDutyCycle+0x48>)
    3148:	4798      	blx	r3
    314a:	0003      	movs	r3, r0
    314c:	e7f2      	b.n	3134 <Parser_LoraSetAggregatedDutyCycle+0x20>
    314e:	46c0      	nop			; (mov r8, r8)
    3150:	000196cd 	.word	0x000196cd
    3154:	0000432d 	.word	0x0000432d
    3158:	0001f8d0 	.word	0x0001f8d0
    315c:	00013a01 	.word	0x00013a01

00003160 <Parser_LoraSetCryptoDevEnabled>:
{
    3160:	b570      	push	{r4, r5, r6, lr}
    3162:	b082      	sub	sp, #8
    3164:	0005      	movs	r5, r0
	validationVal = Validate_OnOffAsciiValue(pParserCmdInfo->pParam1);
    3166:	6800      	ldr	r0, [r0, #0]
    3168:	4b0d      	ldr	r3, [pc, #52]	; (31a0 <Parser_LoraSetCryptoDevEnabled+0x40>)
    316a:	4798      	blx	r3
    316c:	466b      	mov	r3, sp
    316e:	71d8      	strb	r0, [r3, #7]
	uint8_t returnVal = LORAWAN_INVALID_PARAMETER;
    3170:	240a      	movs	r4, #10
	if (validationVal < 2U)
    3172:	2801      	cmp	r0, #1
    3174:	d905      	bls.n	3182 <Parser_LoraSetCryptoDevEnabled+0x22>
	pParserCmdInfo->pReplyCmd = (char*)gapParserLorawanStatus[returnVal];
    3176:	00a4      	lsls	r4, r4, #2
    3178:	4b0a      	ldr	r3, [pc, #40]	; (31a4 <Parser_LoraSetCryptoDevEnabled+0x44>)
    317a:	58e3      	ldr	r3, [r4, r3]
    317c:	616b      	str	r3, [r5, #20]
}
    317e:	b002      	add	sp, #8
    3180:	bd70      	pop	{r4, r5, r6, pc}
		returnVal = LORAWAN_SetAttr(CRYPTODEVICE_ENABLED, &validationVal);
    3182:	466b      	mov	r3, sp
    3184:	1dde      	adds	r6, r3, #7
    3186:	0031      	movs	r1, r6
    3188:	203e      	movs	r0, #62	; 0x3e
    318a:	4b07      	ldr	r3, [pc, #28]	; (31a8 <Parser_LoraSetCryptoDevEnabled+0x48>)
    318c:	4798      	blx	r3
    318e:	0004      	movs	r4, r0
		SAL_Init(validationVal) ;
    3190:	7830      	ldrb	r0, [r6, #0]
    3192:	1e43      	subs	r3, r0, #1
    3194:	4198      	sbcs	r0, r3
    3196:	b2c0      	uxtb	r0, r0
    3198:	4b04      	ldr	r3, [pc, #16]	; (31ac <Parser_LoraSetCryptoDevEnabled+0x4c>)
    319a:	4798      	blx	r3
    319c:	e7eb      	b.n	3176 <Parser_LoraSetCryptoDevEnabled+0x16>
    319e:	46c0      	nop			; (mov r8, r8)
    31a0:	00004401 	.word	0x00004401
    31a4:	0001f8d0 	.word	0x0001f8d0
    31a8:	00013a01 	.word	0x00013a01
    31ac:	0000dc09 	.word	0x0000dc09

000031b0 <Parser_LoraSetTestModeEnabled>:
{
    31b0:	b510      	push	{r4, lr}
    31b2:	b082      	sub	sp, #8
    31b4:	0004      	movs	r4, r0
	validationVal = Validate_OnOffAsciiValue(pParserCmdInfo->pParam1);
    31b6:	6800      	ldr	r0, [r0, #0]
    31b8:	4b09      	ldr	r3, [pc, #36]	; (31e0 <Parser_LoraSetTestModeEnabled+0x30>)
    31ba:	4798      	blx	r3
    31bc:	466b      	mov	r3, sp
    31be:	71d8      	strb	r0, [r3, #7]
	uint8_t returnVal = LORAWAN_INVALID_PARAMETER;
    31c0:	230a      	movs	r3, #10
	if (validationVal < 2U)
    31c2:	2801      	cmp	r0, #1
    31c4:	d905      	bls.n	31d2 <Parser_LoraSetTestModeEnabled+0x22>
	pParserCmdInfo->pReplyCmd = (char*)gapParserLorawanStatus[returnVal];
    31c6:	009b      	lsls	r3, r3, #2
    31c8:	4a06      	ldr	r2, [pc, #24]	; (31e4 <Parser_LoraSetTestModeEnabled+0x34>)
    31ca:	589b      	ldr	r3, [r3, r2]
    31cc:	6163      	str	r3, [r4, #20]
}
    31ce:	b002      	add	sp, #8
    31d0:	bd10      	pop	{r4, pc}
		returnVal = LORAWAN_SetAttr(TEST_MODE_ENABLE, &validationVal);
    31d2:	466b      	mov	r3, sp
    31d4:	1dd9      	adds	r1, r3, #7
    31d6:	2032      	movs	r0, #50	; 0x32
    31d8:	4b03      	ldr	r3, [pc, #12]	; (31e8 <Parser_LoraSetTestModeEnabled+0x38>)
    31da:	4798      	blx	r3
    31dc:	0003      	movs	r3, r0
    31de:	e7f2      	b.n	31c6 <Parser_LoraSetTestModeEnabled+0x16>
    31e0:	00004401 	.word	0x00004401
    31e4:	0001f8d0 	.word	0x0001f8d0
    31e8:	00013a01 	.word	0x00013a01

000031ec <Parser_LoraGetMacStatus>:
{
    31ec:	b530      	push	{r4, r5, lr}
    31ee:	b083      	sub	sp, #12
    31f0:	0005      	movs	r5, r0
    LORAWAN_GetAttr(LORAWAN_STATUS,NULL, &macStatusMask);
    31f2:	aa01      	add	r2, sp, #4
    31f4:	2100      	movs	r1, #0
    31f6:	2020      	movs	r0, #32
    31f8:	4b09      	ldr	r3, [pc, #36]	; (3220 <Parser_LoraGetMacStatus+0x34>)
    31fa:	4798      	blx	r3
    tempBuff[3] = (uint8_t)macStatusMask;
    31fc:	9b01      	ldr	r3, [sp, #4]
    31fe:	466a      	mov	r2, sp
    3200:	70d3      	strb	r3, [r2, #3]
    tempBuff[2] = (uint8_t)(macStatusMask >> 8);
    3202:	0a1a      	lsrs	r2, r3, #8
    3204:	4669      	mov	r1, sp
    3206:	708a      	strb	r2, [r1, #2]
    tempBuff[1] = (uint8_t)(macStatusMask >> 16);
    3208:	0c1a      	lsrs	r2, r3, #16
    320a:	704a      	strb	r2, [r1, #1]
    tempBuff[0] = (uint8_t)(macStatusMask >> 24);    
    320c:	0e1b      	lsrs	r3, r3, #24
    320e:	700b      	strb	r3, [r1, #0]
    Parser_IntArrayToHexAscii(4, tempBuff, aParserData);
    3210:	4c04      	ldr	r4, [pc, #16]	; (3224 <Parser_LoraGetMacStatus+0x38>)
    3212:	0022      	movs	r2, r4
    3214:	2004      	movs	r0, #4
    3216:	4b04      	ldr	r3, [pc, #16]	; (3228 <Parser_LoraGetMacStatus+0x3c>)
    3218:	4798      	blx	r3
    pParserCmdInfo->pReplyCmd = aParserData;
    321a:	616c      	str	r4, [r5, #20]
}
    321c:	b003      	add	sp, #12
    321e:	bd30      	pop	{r4, r5, pc}
    3220:	000119bd 	.word	0x000119bd
    3224:	2000116c 	.word	0x2000116c
    3228:	000041f9 	.word	0x000041f9

0000322c <Parser_LoraSetBatLevel>:
{
    322c:	b510      	push	{r4, lr}
    322e:	b082      	sub	sp, #8
    3230:	0004      	movs	r4, r0
    uint8_t batLevel = atoi(pParserCmdInfo->pParam1);
    3232:	6800      	ldr	r0, [r0, #0]
    3234:	4b0c      	ldr	r3, [pc, #48]	; (3268 <Parser_LoraSetBatLevel+0x3c>)
    3236:	4798      	blx	r3
    3238:	466b      	mov	r3, sp
    323a:	71d8      	strb	r0, [r3, #7]
    if(Validate_UintDecAsciiValue(pParserCmdInfo->pParam1, 3, UINT8_MAX))
    323c:	22ff      	movs	r2, #255	; 0xff
    323e:	2103      	movs	r1, #3
    3240:	6820      	ldr	r0, [r4, #0]
    3242:	4b0a      	ldr	r3, [pc, #40]	; (326c <Parser_LoraSetBatLevel+0x40>)
    3244:	4798      	blx	r3
    StackRetStatus_t status = LORAWAN_INVALID_PARAMETER;
    3246:	230a      	movs	r3, #10
    if(Validate_UintDecAsciiValue(pParserCmdInfo->pParam1, 3, UINT8_MAX))
    3248:	2800      	cmp	r0, #0
    324a:	d105      	bne.n	3258 <Parser_LoraSetBatLevel+0x2c>
    pParserCmdInfo->pReplyCmd = (char*)gapParserLorawanStatus[status];
    324c:	009b      	lsls	r3, r3, #2
    324e:	4a08      	ldr	r2, [pc, #32]	; (3270 <Parser_LoraSetBatLevel+0x44>)
    3250:	589b      	ldr	r3, [r3, r2]
    3252:	6163      	str	r3, [r4, #20]
}
    3254:	b002      	add	sp, #8
    3256:	bd10      	pop	{r4, pc}
        status = LORAWAN_SetAttr(BATTERY, &batLevel);
    3258:	466b      	mov	r3, sp
    325a:	1dd9      	adds	r1, r3, #7
    325c:	2017      	movs	r0, #23
    325e:	4b05      	ldr	r3, [pc, #20]	; (3274 <Parser_LoraSetBatLevel+0x48>)
    3260:	4798      	blx	r3
    3262:	0003      	movs	r3, r0
    3264:	e7f2      	b.n	324c <Parser_LoraSetBatLevel+0x20>
    3266:	46c0      	nop			; (mov r8, r8)
    3268:	000196cd 	.word	0x000196cd
    326c:	0000432d 	.word	0x0000432d
    3270:	0001f8d0 	.word	0x0001f8d0
    3274:	00013a01 	.word	0x00013a01

00003278 <Parser_LoraSetReTxNb>:
{
    3278:	b510      	push	{r4, lr}
    327a:	b082      	sub	sp, #8
    327c:	0004      	movs	r4, r0
    uint8_t reTxNb = atoi(pParserCmdInfo->pParam1);
    327e:	6800      	ldr	r0, [r0, #0]
    3280:	4b0c      	ldr	r3, [pc, #48]	; (32b4 <Parser_LoraSetReTxNb+0x3c>)
    3282:	4798      	blx	r3
    3284:	466b      	mov	r3, sp
    3286:	71d8      	strb	r0, [r3, #7]
    if(Validate_UintDecAsciiValue(pParserCmdInfo->pParam1, 3, UINT8_MAX))
    3288:	22ff      	movs	r2, #255	; 0xff
    328a:	2103      	movs	r1, #3
    328c:	6820      	ldr	r0, [r4, #0]
    328e:	4b0a      	ldr	r3, [pc, #40]	; (32b8 <Parser_LoraSetReTxNb+0x40>)
    3290:	4798      	blx	r3
    StackRetStatus_t status = LORAWAN_INVALID_PARAMETER;
    3292:	230a      	movs	r3, #10
    if(Validate_UintDecAsciiValue(pParserCmdInfo->pParam1, 3, UINT8_MAX))
    3294:	2800      	cmp	r0, #0
    3296:	d105      	bne.n	32a4 <Parser_LoraSetReTxNb+0x2c>
    pParserCmdInfo->pReplyCmd = (char*)gapParserLorawanStatus[status];
    3298:	009b      	lsls	r3, r3, #2
    329a:	4a08      	ldr	r2, [pc, #32]	; (32bc <Parser_LoraSetReTxNb+0x44>)
    329c:	589b      	ldr	r3, [r3, r2]
    329e:	6163      	str	r3, [r4, #20]
}
    32a0:	b002      	add	sp, #8
    32a2:	bd10      	pop	{r4, pc}
        status = LORAWAN_SetAttr(CNF_RETRANSMISSION_NUM,&reTxNb);
    32a4:	466b      	mov	r3, sp
    32a6:	1dd9      	adds	r1, r3, #7
    32a8:	2013      	movs	r0, #19
    32aa:	4b05      	ldr	r3, [pc, #20]	; (32c0 <Parser_LoraSetReTxNb+0x48>)
    32ac:	4798      	blx	r3
    32ae:	0003      	movs	r3, r0
    32b0:	e7f2      	b.n	3298 <Parser_LoraSetReTxNb+0x20>
    32b2:	46c0      	nop			; (mov r8, r8)
    32b4:	000196cd 	.word	0x000196cd
    32b8:	0000432d 	.word	0x0000432d
    32bc:	0001f8d0 	.word	0x0001f8d0
    32c0:	00013a01 	.word	0x00013a01

000032c4 <Parser_LoraSetRepsNb>:
{
    32c4:	b510      	push	{r4, lr}
    32c6:	b082      	sub	sp, #8
    32c8:	0004      	movs	r4, r0
	uint8_t reTxNb = atoi(pParserCmdInfo->pParam1);
    32ca:	6800      	ldr	r0, [r0, #0]
    32cc:	4b0c      	ldr	r3, [pc, #48]	; (3300 <Parser_LoraSetRepsNb+0x3c>)
    32ce:	4798      	blx	r3
    32d0:	466b      	mov	r3, sp
    32d2:	71d8      	strb	r0, [r3, #7]
	if(Validate_UintDecAsciiValue(pParserCmdInfo->pParam1, 3, UINT8_MAX))
    32d4:	22ff      	movs	r2, #255	; 0xff
    32d6:	2103      	movs	r1, #3
    32d8:	6820      	ldr	r0, [r4, #0]
    32da:	4b0a      	ldr	r3, [pc, #40]	; (3304 <Parser_LoraSetRepsNb+0x40>)
    32dc:	4798      	blx	r3
	StackRetStatus_t status = LORAWAN_INVALID_PARAMETER;
    32de:	230a      	movs	r3, #10
	if(Validate_UintDecAsciiValue(pParserCmdInfo->pParam1, 3, UINT8_MAX))
    32e0:	2800      	cmp	r0, #0
    32e2:	d105      	bne.n	32f0 <Parser_LoraSetRepsNb+0x2c>
	pParserCmdInfo->pReplyCmd = (char*)gapParserLorawanStatus[status];
    32e4:	009b      	lsls	r3, r3, #2
    32e6:	4a08      	ldr	r2, [pc, #32]	; (3308 <Parser_LoraSetRepsNb+0x44>)
    32e8:	589b      	ldr	r3, [r3, r2]
    32ea:	6163      	str	r3, [r4, #20]
}
    32ec:	b002      	add	sp, #8
    32ee:	bd10      	pop	{r4, pc}
		status = LORAWAN_SetAttr(UNCNF_REPETITION_NUM,&reTxNb);
    32f0:	466b      	mov	r3, sp
    32f2:	1dd9      	adds	r1, r3, #7
    32f4:	2014      	movs	r0, #20
    32f6:	4b05      	ldr	r3, [pc, #20]	; (330c <Parser_LoraSetRepsNb+0x48>)
    32f8:	4798      	blx	r3
    32fa:	0003      	movs	r3, r0
    32fc:	e7f2      	b.n	32e4 <Parser_LoraSetRepsNb+0x20>
    32fe:	46c0      	nop			; (mov r8, r8)
    3300:	000196cd 	.word	0x000196cd
    3304:	0000432d 	.word	0x0000432d
    3308:	0001f8d0 	.word	0x0001f8d0
    330c:	00013a01 	.word	0x00013a01

00003310 <Parser_LoraGetReTxNb>:
{
    3310:	b570      	push	{r4, r5, r6, lr}
    3312:	b082      	sub	sp, #8
    3314:	0006      	movs	r6, r0
    LORAWAN_GetAttr(CNF_RETRANSMISSION_NUM, NULL, &reTxNb);
    3316:	466b      	mov	r3, sp
    3318:	1ddd      	adds	r5, r3, #7
    331a:	002a      	movs	r2, r5
    331c:	2100      	movs	r1, #0
    331e:	2013      	movs	r0, #19
    3320:	4b05      	ldr	r3, [pc, #20]	; (3338 <Parser_LoraGetReTxNb+0x28>)
    3322:	4798      	blx	r3
    utoa(reTxNb, aParserData, 10);
    3324:	4c05      	ldr	r4, [pc, #20]	; (333c <Parser_LoraGetReTxNb+0x2c>)
    3326:	7828      	ldrb	r0, [r5, #0]
    3328:	220a      	movs	r2, #10
    332a:	0021      	movs	r1, r4
    332c:	4b04      	ldr	r3, [pc, #16]	; (3340 <Parser_LoraGetReTxNb+0x30>)
    332e:	4798      	blx	r3
    pParserCmdInfo->pReplyCmd = aParserData;
    3330:	6174      	str	r4, [r6, #20]
}
    3332:	b002      	add	sp, #8
    3334:	bd70      	pop	{r4, r5, r6, pc}
    3336:	46c0      	nop			; (mov r8, r8)
    3338:	000119bd 	.word	0x000119bd
    333c:	2000116c 	.word	0x2000116c
    3340:	0001a6c1 	.word	0x0001a6c1

00003344 <Parser_LoraGetRepsNb>:
{
    3344:	b570      	push	{r4, r5, r6, lr}
    3346:	b082      	sub	sp, #8
    3348:	0006      	movs	r6, r0
	LORAWAN_GetAttr(UNCNF_REPETITION_NUM, NULL, &reTxNb);
    334a:	466b      	mov	r3, sp
    334c:	1ddd      	adds	r5, r3, #7
    334e:	002a      	movs	r2, r5
    3350:	2100      	movs	r1, #0
    3352:	2014      	movs	r0, #20
    3354:	4b05      	ldr	r3, [pc, #20]	; (336c <Parser_LoraGetRepsNb+0x28>)
    3356:	4798      	blx	r3
	utoa(reTxNb, aParserData, 10);
    3358:	4c05      	ldr	r4, [pc, #20]	; (3370 <Parser_LoraGetRepsNb+0x2c>)
    335a:	7828      	ldrb	r0, [r5, #0]
    335c:	220a      	movs	r2, #10
    335e:	0021      	movs	r1, r4
    3360:	4b04      	ldr	r3, [pc, #16]	; (3374 <Parser_LoraGetRepsNb+0x30>)
    3362:	4798      	blx	r3
	pParserCmdInfo->pReplyCmd = aParserData;
    3364:	6174      	str	r4, [r6, #20]
}
    3366:	b002      	add	sp, #8
    3368:	bd70      	pop	{r4, r5, r6, pc}
    336a:	46c0      	nop			; (mov r8, r8)
    336c:	000119bd 	.word	0x000119bd
    3370:	2000116c 	.word	0x2000116c
    3374:	0001a6c1 	.word	0x0001a6c1

00003378 <Parser_LoraGetLinkCheckMargin>:
{
    3378:	b570      	push	{r4, r5, r6, lr}
    337a:	b082      	sub	sp, #8
    337c:	0006      	movs	r6, r0
    LORAWAN_GetAttr(LINK_CHECK_MARGIN, NULL, &mrgn);
    337e:	466b      	mov	r3, sp
    3380:	1ddd      	adds	r5, r3, #7
    3382:	002a      	movs	r2, r5
    3384:	2100      	movs	r1, #0
    3386:	2021      	movs	r0, #33	; 0x21
    3388:	4b05      	ldr	r3, [pc, #20]	; (33a0 <Parser_LoraGetLinkCheckMargin+0x28>)
    338a:	4798      	blx	r3
    utoa(mrgn, aParserData,  10);
    338c:	4c05      	ldr	r4, [pc, #20]	; (33a4 <Parser_LoraGetLinkCheckMargin+0x2c>)
    338e:	7828      	ldrb	r0, [r5, #0]
    3390:	220a      	movs	r2, #10
    3392:	0021      	movs	r1, r4
    3394:	4b04      	ldr	r3, [pc, #16]	; (33a8 <Parser_LoraGetLinkCheckMargin+0x30>)
    3396:	4798      	blx	r3
    pParserCmdInfo->pReplyCmd = aParserData;
    3398:	6174      	str	r4, [r6, #20]
}
    339a:	b002      	add	sp, #8
    339c:	bd70      	pop	{r4, r5, r6, pc}
    339e:	46c0      	nop			; (mov r8, r8)
    33a0:	000119bd 	.word	0x000119bd
    33a4:	2000116c 	.word	0x2000116c
    33a8:	0001a6c1 	.word	0x0001a6c1

000033ac <Parser_LoraGetLinkCheckGwCnt>:
{
    33ac:	b570      	push	{r4, r5, r6, lr}
    33ae:	b082      	sub	sp, #8
    33b0:	0006      	movs	r6, r0
    LORAWAN_GetAttr(LINK_CHECK_GWCNT, NULL, &gwCnt);
    33b2:	466b      	mov	r3, sp
    33b4:	1ddd      	adds	r5, r3, #7
    33b6:	002a      	movs	r2, r5
    33b8:	2100      	movs	r1, #0
    33ba:	2022      	movs	r0, #34	; 0x22
    33bc:	4b05      	ldr	r3, [pc, #20]	; (33d4 <Parser_LoraGetLinkCheckGwCnt+0x28>)
    33be:	4798      	blx	r3
    utoa(gwCnt, aParserData, 10);
    33c0:	4c05      	ldr	r4, [pc, #20]	; (33d8 <Parser_LoraGetLinkCheckGwCnt+0x2c>)
    33c2:	7828      	ldrb	r0, [r5, #0]
    33c4:	220a      	movs	r2, #10
    33c6:	0021      	movs	r1, r4
    33c8:	4b04      	ldr	r3, [pc, #16]	; (33dc <Parser_LoraGetLinkCheckGwCnt+0x30>)
    33ca:	4798      	blx	r3
    pParserCmdInfo->pReplyCmd = aParserData;
    33cc:	6174      	str	r4, [r6, #20]
}
    33ce:	b002      	add	sp, #8
    33d0:	bd70      	pop	{r4, r5, r6, pc}
    33d2:	46c0      	nop			; (mov r8, r8)
    33d4:	000119bd 	.word	0x000119bd
    33d8:	2000116c 	.word	0x2000116c
    33dc:	0001a6c1 	.word	0x0001a6c1

000033e0 <Parser_LoraSetAutoReply>:
{
    33e0:	b510      	push	{r4, lr}
    33e2:	b082      	sub	sp, #8
    33e4:	0004      	movs	r4, r0
    validationVal = Validate_OnOffAsciiValue(pParserCmdInfo->pParam1);
    33e6:	6800      	ldr	r0, [r0, #0]
    33e8:	4b09      	ldr	r3, [pc, #36]	; (3410 <Parser_LoraSetAutoReply+0x30>)
    33ea:	4798      	blx	r3
    33ec:	466b      	mov	r3, sp
    33ee:	71d8      	strb	r0, [r3, #7]
    StackRetStatus_t status = LORAWAN_INVALID_PARAMETER;
    33f0:	230a      	movs	r3, #10
    if(validationVal < 2U)
    33f2:	2801      	cmp	r0, #1
    33f4:	d905      	bls.n	3402 <Parser_LoraSetAutoReply+0x22>
    pParserCmdInfo->pReplyCmd = (char*)gapParserLorawanStatus[status];
    33f6:	009b      	lsls	r3, r3, #2
    33f8:	4a06      	ldr	r2, [pc, #24]	; (3414 <Parser_LoraSetAutoReply+0x34>)
    33fa:	589b      	ldr	r3, [r3, r2]
    33fc:	6163      	str	r3, [r4, #20]
}
    33fe:	b002      	add	sp, #8
    3400:	bd10      	pop	{r4, pc}
        status = LORAWAN_SetAttr(AUTOREPLY, &validationVal);      
    3402:	466b      	mov	r3, sp
    3404:	1dd9      	adds	r1, r3, #7
    3406:	2016      	movs	r0, #22
    3408:	4b03      	ldr	r3, [pc, #12]	; (3418 <Parser_LoraSetAutoReply+0x38>)
    340a:	4798      	blx	r3
    340c:	0003      	movs	r3, r0
    340e:	e7f2      	b.n	33f6 <Parser_LoraSetAutoReply+0x16>
    3410:	00004401 	.word	0x00004401
    3414:	0001f8d0 	.word	0x0001f8d0
    3418:	00013a01 	.word	0x00013a01

0000341c <Parser_LoraGetAutoReply>:
{
    341c:	b530      	push	{r4, r5, lr}
    341e:	b083      	sub	sp, #12
    3420:	0005      	movs	r5, r0
    LORAWAN_GetAttr(AUTOREPLY, NULL, &arEnabled);
    3422:	466b      	mov	r3, sp
    3424:	1ddc      	adds	r4, r3, #7
    3426:	0022      	movs	r2, r4
    3428:	2100      	movs	r1, #0
    342a:	2016      	movs	r0, #22
    342c:	4b04      	ldr	r3, [pc, #16]	; (3440 <Parser_LoraGetAutoReply+0x24>)
    342e:	4798      	blx	r3
    pParserCmdInfo->pReplyCmd = (char*)gapParseOnOff[arEnabled];
    3430:	7823      	ldrb	r3, [r4, #0]
    3432:	009b      	lsls	r3, r3, #2
    3434:	4a03      	ldr	r2, [pc, #12]	; (3444 <Parser_LoraGetAutoReply+0x28>)
    3436:	589b      	ldr	r3, [r3, r2]
    3438:	616b      	str	r3, [r5, #20]
}
    343a:	b003      	add	sp, #12
    343c:	bd30      	pop	{r4, r5, pc}
    343e:	46c0      	nop			; (mov r8, r8)
    3440:	000119bd 	.word	0x000119bd
    3444:	0001f8b0 	.word	0x0001f8b0

00003448 <Parser_LoraSetRxDelay1>:
{
    3448:	b510      	push	{r4, lr}
    344a:	b082      	sub	sp, #8
    344c:	0004      	movs	r4, r0
    uint16_t rxDelay1 = atoi(pParserCmdInfo->pParam1);
    344e:	6800      	ldr	r0, [r0, #0]
    3450:	4b0c      	ldr	r3, [pc, #48]	; (3484 <Parser_LoraSetRxDelay1+0x3c>)
    3452:	4798      	blx	r3
    3454:	466b      	mov	r3, sp
    3456:	80d8      	strh	r0, [r3, #6]
    if(Validate_UintDecAsciiValue(pParserCmdInfo->pParam1, 5, UINT16_MAX))
    3458:	4a0b      	ldr	r2, [pc, #44]	; (3488 <Parser_LoraSetRxDelay1+0x40>)
    345a:	2105      	movs	r1, #5
    345c:	6820      	ldr	r0, [r4, #0]
    345e:	4b0b      	ldr	r3, [pc, #44]	; (348c <Parser_LoraSetRxDelay1+0x44>)
    3460:	4798      	blx	r3
    StackRetStatus_t status = LORAWAN_INVALID_PARAMETER;
    3462:	230a      	movs	r3, #10
    if(Validate_UintDecAsciiValue(pParserCmdInfo->pParam1, 5, UINT16_MAX))
    3464:	2800      	cmp	r0, #0
    3466:	d105      	bne.n	3474 <Parser_LoraSetRxDelay1+0x2c>
    pParserCmdInfo->pReplyCmd = (char*)gapParserLorawanStatus[status];
    3468:	009b      	lsls	r3, r3, #2
    346a:	4a09      	ldr	r2, [pc, #36]	; (3490 <Parser_LoraSetRxDelay1+0x48>)
    346c:	589b      	ldr	r3, [r3, r2]
    346e:	6163      	str	r3, [r4, #20]
}
    3470:	b002      	add	sp, #8
    3472:	bd10      	pop	{r4, pc}
        status = LORAWAN_SetAttr(RX_DELAY1,&rxDelay1);        
    3474:	466b      	mov	r3, sp
    3476:	1d99      	adds	r1, r3, #6
    3478:	200c      	movs	r0, #12
    347a:	4b06      	ldr	r3, [pc, #24]	; (3494 <Parser_LoraSetRxDelay1+0x4c>)
    347c:	4798      	blx	r3
    347e:	0003      	movs	r3, r0
    3480:	e7f2      	b.n	3468 <Parser_LoraSetRxDelay1+0x20>
    3482:	46c0      	nop			; (mov r8, r8)
    3484:	000196cd 	.word	0x000196cd
    3488:	0000ffff 	.word	0x0000ffff
    348c:	0000432d 	.word	0x0000432d
    3490:	0001f8d0 	.word	0x0001f8d0
    3494:	00013a01 	.word	0x00013a01

00003498 <Parser_LoraGetRxDelay1>:
{
    3498:	b570      	push	{r4, r5, r6, lr}
    349a:	b082      	sub	sp, #8
    349c:	0006      	movs	r6, r0
    LORAWAN_GetAttr(RX_DELAY1,NULL,&rxDelay1);
    349e:	466b      	mov	r3, sp
    34a0:	1d9d      	adds	r5, r3, #6
    34a2:	002a      	movs	r2, r5
    34a4:	2100      	movs	r1, #0
    34a6:	200c      	movs	r0, #12
    34a8:	4b05      	ldr	r3, [pc, #20]	; (34c0 <Parser_LoraGetRxDelay1+0x28>)
    34aa:	4798      	blx	r3
    utoa(rxDelay1, aParserData, 10);
    34ac:	4c05      	ldr	r4, [pc, #20]	; (34c4 <Parser_LoraGetRxDelay1+0x2c>)
    34ae:	8828      	ldrh	r0, [r5, #0]
    34b0:	220a      	movs	r2, #10
    34b2:	0021      	movs	r1, r4
    34b4:	4b04      	ldr	r3, [pc, #16]	; (34c8 <Parser_LoraGetRxDelay1+0x30>)
    34b6:	4798      	blx	r3
    pParserCmdInfo->pReplyCmd = aParserData;
    34b8:	6174      	str	r4, [r6, #20]
}
    34ba:	b002      	add	sp, #8
    34bc:	bd70      	pop	{r4, r5, r6, pc}
    34be:	46c0      	nop			; (mov r8, r8)
    34c0:	000119bd 	.word	0x000119bd
    34c4:	2000116c 	.word	0x2000116c
    34c8:	0001a6c1 	.word	0x0001a6c1

000034cc <Parser_LoraGetRxDelay2>:
{
    34cc:	b570      	push	{r4, r5, r6, lr}
    34ce:	b082      	sub	sp, #8
    34d0:	0006      	movs	r6, r0
    LORAWAN_GetAttr(RX_DELAY2, NULL, &rxDelay2);
    34d2:	466b      	mov	r3, sp
    34d4:	1d9d      	adds	r5, r3, #6
    34d6:	002a      	movs	r2, r5
    34d8:	2100      	movs	r1, #0
    34da:	201e      	movs	r0, #30
    34dc:	4b05      	ldr	r3, [pc, #20]	; (34f4 <Parser_LoraGetRxDelay2+0x28>)
    34de:	4798      	blx	r3
    utoa(rxDelay2, aParserData, 10);
    34e0:	4c05      	ldr	r4, [pc, #20]	; (34f8 <Parser_LoraGetRxDelay2+0x2c>)
    34e2:	8828      	ldrh	r0, [r5, #0]
    34e4:	220a      	movs	r2, #10
    34e6:	0021      	movs	r1, r4
    34e8:	4b04      	ldr	r3, [pc, #16]	; (34fc <Parser_LoraGetRxDelay2+0x30>)
    34ea:	4798      	blx	r3
    pParserCmdInfo->pReplyCmd = aParserData;
    34ec:	6174      	str	r4, [r6, #20]
}
    34ee:	b002      	add	sp, #8
    34f0:	bd70      	pop	{r4, r5, r6, pc}
    34f2:	46c0      	nop			; (mov r8, r8)
    34f4:	000119bd 	.word	0x000119bd
    34f8:	2000116c 	.word	0x2000116c
    34fc:	0001a6c1 	.word	0x0001a6c1

00003500 <Parser_LoraGetIsm>:
{
    3500:	b530      	push	{r4, r5, lr}
    3502:	b083      	sub	sp, #12
    3504:	0005      	movs	r5, r0
    LORAWAN_GetAttr(ISMBAND, NULL, &ismBand);
    3506:	466b      	mov	r3, sp
    3508:	1ddc      	adds	r4, r3, #7
    350a:	0022      	movs	r2, r4
    350c:	2100      	movs	r1, #0
    350e:	2023      	movs	r0, #35	; 0x23
    3510:	4b04      	ldr	r3, [pc, #16]	; (3524 <Parser_LoraGetIsm+0x24>)
    3512:	4798      	blx	r3
    pParserCmdInfo->pReplyCmd = (char*)gapParseIsmBand[ismBand];
    3514:	7823      	ldrb	r3, [r4, #0]
    3516:	009b      	lsls	r3, r3, #2
    3518:	4a03      	ldr	r2, [pc, #12]	; (3528 <Parser_LoraGetIsm+0x28>)
    351a:	589b      	ldr	r3, [r3, r2]
    351c:	616b      	str	r3, [r5, #20]
}
    351e:	b003      	add	sp, #12
    3520:	bd30      	pop	{r4, r5, pc}
    3522:	46c0      	nop			; (mov r8, r8)
    3524:	000119bd 	.word	0x000119bd
    3528:	0001f85c 	.word	0x0001f85c

0000352c <Parser_LoraSetClass>:
{
    352c:	b510      	push	{r4, lr}
    352e:	b082      	sub	sp, #8
    3530:	0004      	movs	r4, r0
	if ((pParserCmdInfo->pParam1[0] == 'A') || (pParserCmdInfo->pParam1[0] == 'a'))
    3532:	6803      	ldr	r3, [r0, #0]
    3534:	781b      	ldrb	r3, [r3, #0]
    3536:	2220      	movs	r2, #32
    3538:	4393      	bics	r3, r2
    353a:	2b41      	cmp	r3, #65	; 0x41
    353c:	d008      	beq.n	3550 <Parser_LoraSetClass+0x24>
	uint8_t statusIdx = LORAWAN_INVALID_PARAMETER;
    353e:	200a      	movs	r0, #10
	else if ((pParserCmdInfo->pParam1[0] == 'C') || (pParserCmdInfo->pParam1[0] == 'c'))
    3540:	2b43      	cmp	r3, #67	; 0x43
    3542:	d00d      	beq.n	3560 <Parser_LoraSetClass+0x34>
	pParserCmdInfo->pReplyCmd = (char*)gapParserLorawanStatus[statusIdx];
    3544:	0080      	lsls	r0, r0, #2
    3546:	4b0a      	ldr	r3, [pc, #40]	; (3570 <Parser_LoraSetClass+0x44>)
    3548:	58c3      	ldr	r3, [r0, r3]
    354a:	6163      	str	r3, [r4, #20]
}
    354c:	b002      	add	sp, #8
    354e:	bd10      	pop	{r4, pc}
		edClass = CLASS_A;
    3550:	466b      	mov	r3, sp
    3552:	1dd9      	adds	r1, r3, #7
    3554:	2301      	movs	r3, #1
    3556:	700b      	strb	r3, [r1, #0]
		statusIdx = LORAWAN_SetAttr(EDCLASS, &edClass);
    3558:	2019      	movs	r0, #25
    355a:	4b06      	ldr	r3, [pc, #24]	; (3574 <Parser_LoraSetClass+0x48>)
    355c:	4798      	blx	r3
    355e:	e7f1      	b.n	3544 <Parser_LoraSetClass+0x18>
		edClass = CLASS_C;
    3560:	466b      	mov	r3, sp
    3562:	1dd9      	adds	r1, r3, #7
    3564:	2304      	movs	r3, #4
    3566:	700b      	strb	r3, [r1, #0]
		statusIdx = LORAWAN_SetAttr(EDCLASS, &edClass);
    3568:	300f      	adds	r0, #15
    356a:	4b02      	ldr	r3, [pc, #8]	; (3574 <Parser_LoraSetClass+0x48>)
    356c:	4798      	blx	r3
    356e:	e7e9      	b.n	3544 <Parser_LoraSetClass+0x18>
    3570:	0001f8d0 	.word	0x0001f8d0
    3574:	00013a01 	.word	0x00013a01

00003578 <Parser_LoraGetClass>:
{
    3578:	b530      	push	{r4, r5, lr}
    357a:	b083      	sub	sp, #12
    357c:	0005      	movs	r5, r0
	LORAWAN_GetAttr(EDCLASS, NULL, &edClass);
    357e:	466b      	mov	r3, sp
    3580:	1ddc      	adds	r4, r3, #7
    3582:	0022      	movs	r2, r4
    3584:	2100      	movs	r1, #0
    3586:	2019      	movs	r0, #25
    3588:	4b0a      	ldr	r3, [pc, #40]	; (35b4 <Parser_LoraGetClass+0x3c>)
    358a:	4798      	blx	r3
	switch (edClass)
    358c:	7823      	ldrb	r3, [r4, #0]
    358e:	2b02      	cmp	r3, #2
    3590:	d005      	beq.n	359e <Parser_LoraGetClass+0x26>
    3592:	2b04      	cmp	r3, #4
    3594:	d00a      	beq.n	35ac <Parser_LoraGetClass+0x34>
    3596:	2b01      	cmp	r3, #1
    3598:	d00a      	beq.n	35b0 <Parser_LoraGetClass+0x38>
			index = 3;
    359a:	2303      	movs	r3, #3
		break;
    359c:	e000      	b.n	35a0 <Parser_LoraGetClass+0x28>
			index = 1;
    359e:	2301      	movs	r3, #1
	pParserCmdInfo->pReplyCmd = (char *)gapParserEdClass[index];
    35a0:	009b      	lsls	r3, r3, #2
    35a2:	4a05      	ldr	r2, [pc, #20]	; (35b8 <Parser_LoraGetClass+0x40>)
    35a4:	589b      	ldr	r3, [r3, r2]
    35a6:	616b      	str	r3, [r5, #20]
}
    35a8:	b003      	add	sp, #12
    35aa:	bd30      	pop	{r4, r5, pc}
			index = 2;
    35ac:	2302      	movs	r3, #2
		break;
    35ae:	e7f7      	b.n	35a0 <Parser_LoraGetClass+0x28>
			index = 0;
    35b0:	2300      	movs	r3, #0
    35b2:	e7f5      	b.n	35a0 <Parser_LoraGetClass+0x28>
    35b4:	000119bd 	.word	0x000119bd
    35b8:	0001f8c0 	.word	0x0001f8c0

000035bc <Parser_LoraGetSupportedEdClass>:
{
    35bc:	b530      	push	{r4, r5, lr}
    35be:	b083      	sub	sp, #12
    35c0:	0005      	movs	r5, r0
	LORAWAN_GetAttr(EDCLASS_SUPPORTED, NULL, &edClassSupported);
    35c2:	466b      	mov	r3, sp
    35c4:	1ddc      	adds	r4, r3, #7
    35c6:	0022      	movs	r2, r4
    35c8:	2100      	movs	r1, #0
    35ca:	2024      	movs	r0, #36	; 0x24
    35cc:	4b11      	ldr	r3, [pc, #68]	; (3614 <Parser_LoraGetSupportedEdClass+0x58>)
    35ce:	4798      	blx	r3
	if ((CLASS_A | CLASS_B) == edClassSupported)
    35d0:	7823      	ldrb	r3, [r4, #0]
    35d2:	2b03      	cmp	r3, #3
    35d4:	d00a      	beq.n	35ec <Parser_LoraGetSupportedEdClass+0x30>
	else if  ((CLASS_A | CLASS_C) == edClassSupported)
    35d6:	2b05      	cmp	r3, #5
    35d8:	d012      	beq.n	3600 <Parser_LoraGetSupportedEdClass+0x44>
		aParserData[0] = 'A';
    35da:	4b0f      	ldr	r3, [pc, #60]	; (3618 <Parser_LoraGetSupportedEdClass+0x5c>)
    35dc:	2241      	movs	r2, #65	; 0x41
    35de:	701a      	strb	r2, [r3, #0]
		aParserData[1] = '\0';
    35e0:	2200      	movs	r2, #0
    35e2:	705a      	strb	r2, [r3, #1]
 	pParserCmdInfo->pReplyCmd = aParserData;
    35e4:	4b0c      	ldr	r3, [pc, #48]	; (3618 <Parser_LoraGetSupportedEdClass+0x5c>)
    35e6:	616b      	str	r3, [r5, #20]
}
    35e8:	b003      	add	sp, #12
    35ea:	bd30      	pop	{r4, r5, pc}
		aParserData[0] = 'A';
    35ec:	4b0a      	ldr	r3, [pc, #40]	; (3618 <Parser_LoraGetSupportedEdClass+0x5c>)
    35ee:	2241      	movs	r2, #65	; 0x41
    35f0:	701a      	strb	r2, [r3, #0]
		aParserData[1] = '&';
    35f2:	3a1b      	subs	r2, #27
    35f4:	705a      	strb	r2, [r3, #1]
		aParserData[2] = 'B';
    35f6:	321c      	adds	r2, #28
    35f8:	709a      	strb	r2, [r3, #2]
		aParserData[3] = '\0';
    35fa:	2200      	movs	r2, #0
    35fc:	70da      	strb	r2, [r3, #3]
    35fe:	e7f1      	b.n	35e4 <Parser_LoraGetSupportedEdClass+0x28>
		aParserData[0] = 'A';
    3600:	4b05      	ldr	r3, [pc, #20]	; (3618 <Parser_LoraGetSupportedEdClass+0x5c>)
    3602:	2241      	movs	r2, #65	; 0x41
    3604:	701a      	strb	r2, [r3, #0]
		aParserData[1] = '&';
    3606:	3a1b      	subs	r2, #27
    3608:	705a      	strb	r2, [r3, #1]
		aParserData[2] = 'C';
    360a:	321d      	adds	r2, #29
    360c:	709a      	strb	r2, [r3, #2]
	    aParserData[3] = '\0';
    360e:	2200      	movs	r2, #0
    3610:	70da      	strb	r2, [r3, #3]
    3612:	e7e7      	b.n	35e4 <Parser_LoraGetSupportedEdClass+0x28>
    3614:	000119bd 	.word	0x000119bd
    3618:	2000116c 	.word	0x2000116c

0000361c <Parser_LoraSetMcast>:
{
    361c:	b510      	push	{r4, lr}
    361e:	0004      	movs	r4, r0
	validationVal = Validate_OnOffAsciiValue(pParserCmdInfo->pParam1);
    3620:	6800      	ldr	r0, [r0, #0]
    3622:	4b05      	ldr	r3, [pc, #20]	; (3638 <Parser_LoraSetMcast+0x1c>)
    3624:	4798      	blx	r3
	if (validationVal < 2U)
    3626:	2801      	cmp	r0, #1
    3628:	d902      	bls.n	3630 <Parser_LoraSetMcast+0x14>
	pParserCmdInfo->pReplyCmd = (char*)gapParserLorawanStatus[returnVal];
    362a:	4b04      	ldr	r3, [pc, #16]	; (363c <Parser_LoraSetMcast+0x20>)
    362c:	6163      	str	r3, [r4, #20]
}
    362e:	bd10      	pop	{r4, pc}
		mcastStatus.groupId = atoi(pParserCmdInfo->pParam2);
    3630:	6860      	ldr	r0, [r4, #4]
    3632:	4b03      	ldr	r3, [pc, #12]	; (3640 <Parser_LoraSetMcast+0x24>)
    3634:	4798      	blx	r3
    3636:	e7f8      	b.n	362a <Parser_LoraSetMcast+0xe>
    3638:	00004401 	.word	0x00004401
    363c:	0001f660 	.word	0x0001f660
    3640:	000196cd 	.word	0x000196cd

00003644 <Parser_LoraGetMcast>:
{
    3644:	b510      	push	{r4, lr}
    3646:	b082      	sub	sp, #8
    3648:	0004      	movs	r4, r0
	uint8_t groupId = atoi(pParserCmdInfo->pParam1);
    364a:	6800      	ldr	r0, [r0, #0]
    364c:	4b0c      	ldr	r3, [pc, #48]	; (3680 <Parser_LoraGetMcast+0x3c>)
    364e:	4798      	blx	r3
    3650:	466b      	mov	r3, sp
    3652:	1d99      	adds	r1, r3, #6
    3654:	7008      	strb	r0, [r1, #0]
	status = LORAWAN_GetAttr(MCAST_ENABLE, &groupId, &mcastStatus);
    3656:	1dda      	adds	r2, r3, #7
    3658:	2028      	movs	r0, #40	; 0x28
    365a:	4b0a      	ldr	r3, [pc, #40]	; (3684 <Parser_LoraGetMcast+0x40>)
    365c:	4798      	blx	r3
	if(status == LORAWAN_SUCCESS)
    365e:	2808      	cmp	r0, #8
    3660:	d005      	beq.n	366e <Parser_LoraGetMcast+0x2a>
		pParserCmdInfo->pReplyCmd = (char*)gapParserLorawanStatus[status];
    3662:	0080      	lsls	r0, r0, #2
    3664:	4b08      	ldr	r3, [pc, #32]	; (3688 <Parser_LoraGetMcast+0x44>)
    3666:	58c3      	ldr	r3, [r0, r3]
    3668:	6163      	str	r3, [r4, #20]
}
    366a:	b002      	add	sp, #8
    366c:	bd10      	pop	{r4, pc}
		pParserCmdInfo->pReplyCmd = (char*)gapParseOnOff[mcastStatus];
    366e:	466b      	mov	r3, sp
    3670:	3307      	adds	r3, #7
    3672:	781b      	ldrb	r3, [r3, #0]
    3674:	009b      	lsls	r3, r3, #2
    3676:	4a05      	ldr	r2, [pc, #20]	; (368c <Parser_LoraGetMcast+0x48>)
    3678:	589b      	ldr	r3, [r3, r2]
    367a:	6163      	str	r3, [r4, #20]
    367c:	e7f5      	b.n	366a <Parser_LoraGetMcast+0x26>
    367e:	46c0      	nop			; (mov r8, r8)
    3680:	000196cd 	.word	0x000196cd
    3684:	000119bd 	.word	0x000119bd
    3688:	0001f8d0 	.word	0x0001f8d0
    368c:	0001f8b0 	.word	0x0001f8b0

00003690 <Parser_LoraGetMcastDownCounter>:
{
    3690:	b570      	push	{r4, r5, r6, lr}
    3692:	b082      	sub	sp, #8
    3694:	0005      	movs	r5, r0
	uint8_t groupId = atoi(pParserCmdInfo->pParam1);
    3696:	6800      	ldr	r0, [r0, #0]
    3698:	4b0c      	ldr	r3, [pc, #48]	; (36cc <Parser_LoraGetMcastDownCounter+0x3c>)
    369a:	4798      	blx	r3
    369c:	466b      	mov	r3, sp
    369e:	1cd9      	adds	r1, r3, #3
    36a0:	7008      	strb	r0, [r1, #0]
	status = LORAWAN_GetAttr(MCAST_FCNT_DOWN, &groupId, &ctr);
    36a2:	aa01      	add	r2, sp, #4
    36a4:	202c      	movs	r0, #44	; 0x2c
    36a6:	4b0a      	ldr	r3, [pc, #40]	; (36d0 <Parser_LoraGetMcastDownCounter+0x40>)
    36a8:	4798      	blx	r3
    36aa:	0004      	movs	r4, r0
	ultoa(aParserData, ctr, 10U);
    36ac:	220a      	movs	r2, #10
    36ae:	9901      	ldr	r1, [sp, #4]
    36b0:	4808      	ldr	r0, [pc, #32]	; (36d4 <Parser_LoraGetMcastDownCounter+0x44>)
    36b2:	4b09      	ldr	r3, [pc, #36]	; (36d8 <Parser_LoraGetMcastDownCounter+0x48>)
    36b4:	4798      	blx	r3
	if(status == LORAWAN_SUCCESS)
    36b6:	2c08      	cmp	r4, #8
    36b8:	d005      	beq.n	36c6 <Parser_LoraGetMcastDownCounter+0x36>
		pParserCmdInfo->pReplyCmd = (char*)gapParserLorawanStatus[status];
    36ba:	00a4      	lsls	r4, r4, #2
    36bc:	4b07      	ldr	r3, [pc, #28]	; (36dc <Parser_LoraGetMcastDownCounter+0x4c>)
    36be:	58e3      	ldr	r3, [r4, r3]
    36c0:	616b      	str	r3, [r5, #20]
}
    36c2:	b002      	add	sp, #8
    36c4:	bd70      	pop	{r4, r5, r6, pc}
		pParserCmdInfo->pReplyCmd = aParserData;
    36c6:	4b03      	ldr	r3, [pc, #12]	; (36d4 <Parser_LoraGetMcastDownCounter+0x44>)
    36c8:	616b      	str	r3, [r5, #20]
    36ca:	e7fa      	b.n	36c2 <Parser_LoraGetMcastDownCounter+0x32>
    36cc:	000196cd 	.word	0x000196cd
    36d0:	000119bd 	.word	0x000119bd
    36d4:	2000116c 	.word	0x2000116c
    36d8:	000042b1 	.word	0x000042b1
    36dc:	0001f8d0 	.word	0x0001f8d0

000036e0 <Parser_LoraSetMcastDevAddr>:
{
    36e0:	b510      	push	{r4, lr}
    36e2:	b082      	sub	sp, #8
    36e4:	0004      	movs	r4, r0
	if(Validate_HexValue(pParserCmdInfo->pParam1))
    36e6:	6800      	ldr	r0, [r0, #0]
    36e8:	4b0b      	ldr	r3, [pc, #44]	; (3718 <Parser_LoraSetMcastDevAddr+0x38>)
    36ea:	4798      	blx	r3
    36ec:	2800      	cmp	r0, #0
    36ee:	d103      	bne.n	36f8 <Parser_LoraSetMcastDevAddr+0x18>
	pParserCmdInfo->pReplyCmd = (char*)gapParserLorawanStatus[statusIdx];
    36f0:	4b0a      	ldr	r3, [pc, #40]	; (371c <Parser_LoraSetMcastDevAddr+0x3c>)
    36f2:	6163      	str	r3, [r4, #20]
}
    36f4:	b002      	add	sp, #8
    36f6:	bd10      	pop	{r4, pc}
		if(Parser_HexAsciiToInt(sizeof(devMultiAddr) << 1, pParserCmdInfo->pParam1, tempBuff))
    36f8:	aa01      	add	r2, sp, #4
    36fa:	6821      	ldr	r1, [r4, #0]
    36fc:	2008      	movs	r0, #8
    36fe:	4b08      	ldr	r3, [pc, #32]	; (3720 <Parser_LoraSetMcastDevAddr+0x40>)
    3700:	4798      	blx	r3
    3702:	2800      	cmp	r0, #0
    3704:	d0f4      	beq.n	36f0 <Parser_LoraSetMcastDevAddr+0x10>
			addr.groupId = atoi(pParserCmdInfo->pParam2);
    3706:	6860      	ldr	r0, [r4, #4]
    3708:	4b06      	ldr	r3, [pc, #24]	; (3724 <Parser_LoraSetMcastDevAddr+0x44>)
    370a:	4798      	blx	r3
			gParserConfiguredJoinParameters.flags.mcastdevaddr = 1;
    370c:	4a06      	ldr	r2, [pc, #24]	; (3728 <Parser_LoraSetMcastDevAddr+0x48>)
    370e:	7813      	ldrb	r3, [r2, #0]
    3710:	2140      	movs	r1, #64	; 0x40
    3712:	430b      	orrs	r3, r1
    3714:	7013      	strb	r3, [r2, #0]
    3716:	e7eb      	b.n	36f0 <Parser_LoraSetMcastDevAddr+0x10>
    3718:	000041c5 	.word	0x000041c5
    371c:	0001f660 	.word	0x0001f660
    3720:	000044cd 	.word	0x000044cd
    3724:	000196cd 	.word	0x000196cd
    3728:	20001f88 	.word	0x20001f88

0000372c <Parser_LoraGetMcastDevAddr>:
{
    372c:	b530      	push	{r4, r5, lr}
    372e:	b085      	sub	sp, #20
    3730:	0004      	movs	r4, r0
	uint8_t groupId = atoi(pParserCmdInfo->pParam1);
    3732:	6800      	ldr	r0, [r0, #0]
    3734:	4b10      	ldr	r3, [pc, #64]	; (3778 <Parser_LoraGetMcastDevAddr+0x4c>)
    3736:	4798      	blx	r3
    3738:	466b      	mov	r3, sp
    373a:	1dd9      	adds	r1, r3, #7
    373c:	7008      	strb	r0, [r1, #0]
	status = LORAWAN_GetAttr(MCAST_GROUP_ADDR, &groupId, &devMultiAddr);
    373e:	aa03      	add	r2, sp, #12
    3740:	2029      	movs	r0, #41	; 0x29
    3742:	4b0e      	ldr	r3, [pc, #56]	; (377c <Parser_LoraGetMcastDevAddr+0x50>)
    3744:	4798      	blx	r3
	tempBuff[3] = (uint8_t)devMultiAddr;
    3746:	9b03      	ldr	r3, [sp, #12]
    3748:	aa02      	add	r2, sp, #8
    374a:	70d3      	strb	r3, [r2, #3]
	tempBuff[2] = (uint8_t)(devMultiAddr >> 8);
    374c:	0a19      	lsrs	r1, r3, #8
    374e:	7091      	strb	r1, [r2, #2]
	tempBuff[1] = (uint8_t)(devMultiAddr >> 16);
    3750:	0c19      	lsrs	r1, r3, #16
    3752:	7051      	strb	r1, [r2, #1]
	tempBuff[0] = (uint8_t)(devMultiAddr >> 24);
    3754:	0e1b      	lsrs	r3, r3, #24
    3756:	7013      	strb	r3, [r2, #0]
	if (status == LORAWAN_SUCCESS)
    3758:	2808      	cmp	r0, #8
    375a:	d005      	beq.n	3768 <Parser_LoraGetMcastDevAddr+0x3c>
		pParserCmdInfo->pReplyCmd = (char*)gapParserLorawanStatus[status];
    375c:	0080      	lsls	r0, r0, #2
    375e:	4b08      	ldr	r3, [pc, #32]	; (3780 <Parser_LoraGetMcastDevAddr+0x54>)
    3760:	58c3      	ldr	r3, [r0, r3]
    3762:	6163      	str	r3, [r4, #20]
}
    3764:	b005      	add	sp, #20
    3766:	bd30      	pop	{r4, r5, pc}
		Parser_IntArrayToHexAscii(4, tempBuff, aParserData);
    3768:	4d06      	ldr	r5, [pc, #24]	; (3784 <Parser_LoraGetMcastDevAddr+0x58>)
    376a:	002a      	movs	r2, r5
    376c:	a902      	add	r1, sp, #8
    376e:	3804      	subs	r0, #4
    3770:	4b05      	ldr	r3, [pc, #20]	; (3788 <Parser_LoraGetMcastDevAddr+0x5c>)
    3772:	4798      	blx	r3
		pParserCmdInfo->pReplyCmd = aParserData;
    3774:	6165      	str	r5, [r4, #20]
    3776:	e7f5      	b.n	3764 <Parser_LoraGetMcastDevAddr+0x38>
    3778:	000196cd 	.word	0x000196cd
    377c:	000119bd 	.word	0x000119bd
    3780:	0001f8d0 	.word	0x0001f8d0
    3784:	2000116c 	.word	0x2000116c
    3788:	000041f9 	.word	0x000041f9

0000378c <Parser_LoraSetMcastNwksKey>:
{
    378c:	b510      	push	{r4, lr}
    378e:	b086      	sub	sp, #24
    3790:	0004      	movs	r4, r0
	if(Validate_HexValue(pParserCmdInfo->pParam1))
    3792:	6800      	ldr	r0, [r0, #0]
    3794:	4b0c      	ldr	r3, [pc, #48]	; (37c8 <Parser_LoraSetMcastNwksKey+0x3c>)
    3796:	4798      	blx	r3
    3798:	2800      	cmp	r0, #0
    379a:	d103      	bne.n	37a4 <Parser_LoraSetMcastNwksKey+0x18>
	pParserCmdInfo->pReplyCmd = (char*)gapParserLorawanStatus[statusIdx];
    379c:	4b0b      	ldr	r3, [pc, #44]	; (37cc <Parser_LoraSetMcastNwksKey+0x40>)
    379e:	6163      	str	r3, [r4, #20]
}
    37a0:	b006      	add	sp, #24
    37a2:	bd10      	pop	{r4, pc}
		if(Parser_HexAsciiToInt(32U, pParserCmdInfo->pParam1, (uint8_t *)(key.mcastNwkSKey)))
    37a4:	466b      	mov	r3, sp
    37a6:	1d5a      	adds	r2, r3, #5
    37a8:	6821      	ldr	r1, [r4, #0]
    37aa:	2020      	movs	r0, #32
    37ac:	4b08      	ldr	r3, [pc, #32]	; (37d0 <Parser_LoraSetMcastNwksKey+0x44>)
    37ae:	4798      	blx	r3
    37b0:	2800      	cmp	r0, #0
    37b2:	d0f3      	beq.n	379c <Parser_LoraSetMcastNwksKey+0x10>
			key.groupId = atoi(pParserCmdInfo->pParam2);
    37b4:	6860      	ldr	r0, [r4, #4]
    37b6:	4b07      	ldr	r3, [pc, #28]	; (37d4 <Parser_LoraSetMcastNwksKey+0x48>)
    37b8:	4798      	blx	r3
			gParserConfiguredJoinParameters.flags.mcastnwkskey = 1;
    37ba:	4a07      	ldr	r2, [pc, #28]	; (37d8 <Parser_LoraSetMcastNwksKey+0x4c>)
    37bc:	7811      	ldrb	r1, [r2, #0]
    37be:	2380      	movs	r3, #128	; 0x80
    37c0:	425b      	negs	r3, r3
    37c2:	430b      	orrs	r3, r1
    37c4:	7013      	strb	r3, [r2, #0]
    37c6:	e7e9      	b.n	379c <Parser_LoraSetMcastNwksKey+0x10>
    37c8:	000041c5 	.word	0x000041c5
    37cc:	0001f660 	.word	0x0001f660
    37d0:	000044cd 	.word	0x000044cd
    37d4:	000196cd 	.word	0x000196cd
    37d8:	20001f88 	.word	0x20001f88

000037dc <Parser_LoraSetMcastAppsKey>:
{
    37dc:	b510      	push	{r4, lr}
    37de:	b086      	sub	sp, #24
    37e0:	0004      	movs	r4, r0
	if(Validate_HexValue(pParserCmdInfo->pParam1))
    37e2:	6800      	ldr	r0, [r0, #0]
    37e4:	4b0c      	ldr	r3, [pc, #48]	; (3818 <Parser_LoraSetMcastAppsKey+0x3c>)
    37e6:	4798      	blx	r3
    37e8:	2800      	cmp	r0, #0
    37ea:	d103      	bne.n	37f4 <Parser_LoraSetMcastAppsKey+0x18>
	pParserCmdInfo->pReplyCmd = (char*)gapParserLorawanStatus[statusIdx];
    37ec:	4b0b      	ldr	r3, [pc, #44]	; (381c <Parser_LoraSetMcastAppsKey+0x40>)
    37ee:	6163      	str	r3, [r4, #20]
}
    37f0:	b006      	add	sp, #24
    37f2:	bd10      	pop	{r4, pc}
		if(Parser_HexAsciiToInt(32U, pParserCmdInfo->pParam1,(uint8_t *)(key.mcastNwkSKey)))
    37f4:	466b      	mov	r3, sp
    37f6:	1d5a      	adds	r2, r3, #5
    37f8:	6821      	ldr	r1, [r4, #0]
    37fa:	2020      	movs	r0, #32
    37fc:	4b08      	ldr	r3, [pc, #32]	; (3820 <Parser_LoraSetMcastAppsKey+0x44>)
    37fe:	4798      	blx	r3
    3800:	2800      	cmp	r0, #0
    3802:	d0f3      	beq.n	37ec <Parser_LoraSetMcastAppsKey+0x10>
			key.groupId = atoi(pParserCmdInfo->pParam2);			
    3804:	6860      	ldr	r0, [r4, #4]
    3806:	4b07      	ldr	r3, [pc, #28]	; (3824 <Parser_LoraSetMcastAppsKey+0x48>)
    3808:	4798      	blx	r3
			gParserConfiguredJoinParameters.flags.mcastappskey = 1;
    380a:	4a07      	ldr	r2, [pc, #28]	; (3828 <Parser_LoraSetMcastAppsKey+0x4c>)
    380c:	7853      	ldrb	r3, [r2, #1]
    380e:	2101      	movs	r1, #1
    3810:	430b      	orrs	r3, r1
    3812:	7053      	strb	r3, [r2, #1]
    3814:	e7ea      	b.n	37ec <Parser_LoraSetMcastAppsKey+0x10>
    3816:	46c0      	nop			; (mov r8, r8)
    3818:	000041c5 	.word	0x000041c5
    381c:	0001f660 	.word	0x0001f660
    3820:	000044cd 	.word	0x000044cd
    3824:	000196cd 	.word	0x000196cd
    3828:	20001f88 	.word	0x20001f88

0000382c <Parser_LoraSetMcastFreq>:
{
    382c:	b510      	push	{r4, lr}
    382e:	0004      	movs	r4, r0
	key.dlFrequency = strtoul(pParserCmdInfo->pParam1, NULL, 10);
    3830:	220a      	movs	r2, #10
    3832:	2100      	movs	r1, #0
    3834:	6800      	ldr	r0, [r0, #0]
    3836:	4b0b      	ldr	r3, [pc, #44]	; (3864 <Parser_LoraSetMcastFreq+0x38>)
    3838:	4798      	blx	r3
	  if(Validate_UintDecAsciiValue(pParserCmdInfo->pParam1, 10, UINT32_MAX))
    383a:	2201      	movs	r2, #1
    383c:	4252      	negs	r2, r2
    383e:	210a      	movs	r1, #10
    3840:	6820      	ldr	r0, [r4, #0]
    3842:	4b09      	ldr	r3, [pc, #36]	; (3868 <Parser_LoraSetMcastFreq+0x3c>)
    3844:	4798      	blx	r3
    3846:	2800      	cmp	r0, #0
    3848:	d102      	bne.n	3850 <Parser_LoraSetMcastFreq+0x24>
	 pParserCmdInfo->pReplyCmd = (char*)gapParserLorawanStatus[statusIdx];
    384a:	4b08      	ldr	r3, [pc, #32]	; (386c <Parser_LoraSetMcastFreq+0x40>)
    384c:	6163      	str	r3, [r4, #20]
}
    384e:	bd10      	pop	{r4, pc}
		  key.groupId = atoi(pParserCmdInfo->pParam2);
    3850:	6860      	ldr	r0, [r4, #4]
    3852:	4b07      	ldr	r3, [pc, #28]	; (3870 <Parser_LoraSetMcastFreq+0x44>)
    3854:	4798      	blx	r3
		  gParserConfiguredJoinParameters.flags.mcastfreq = 1;
    3856:	4a07      	ldr	r2, [pc, #28]	; (3874 <Parser_LoraSetMcastFreq+0x48>)
    3858:	7853      	ldrb	r3, [r2, #1]
    385a:	2102      	movs	r1, #2
    385c:	430b      	orrs	r3, r1
    385e:	7053      	strb	r3, [r2, #1]
    3860:	e7f3      	b.n	384a <Parser_LoraSetMcastFreq+0x1e>
    3862:	46c0      	nop			; (mov r8, r8)
    3864:	0001a609 	.word	0x0001a609
    3868:	0000432d 	.word	0x0000432d
    386c:	0001f660 	.word	0x0001f660
    3870:	000196cd 	.word	0x000196cd
    3874:	20001f88 	.word	0x20001f88

00003878 <Parser_LoraGetMcastFreq>:
{
    3878:	b570      	push	{r4, r5, r6, lr}
    387a:	b082      	sub	sp, #8
    387c:	0005      	movs	r5, r0
  uint8_t groupId = atoi(pParserCmdInfo->pParam1);
    387e:	6800      	ldr	r0, [r0, #0]
    3880:	4b0c      	ldr	r3, [pc, #48]	; (38b4 <Parser_LoraGetMcastFreq+0x3c>)
    3882:	4798      	blx	r3
    3884:	466b      	mov	r3, sp
    3886:	1cd9      	adds	r1, r3, #3
    3888:	7008      	strb	r0, [r1, #0]
  status = LORAWAN_GetAttr(MCAST_FREQUENCY,&groupId,&freq);
    388a:	aa01      	add	r2, sp, #4
    388c:	202f      	movs	r0, #47	; 0x2f
    388e:	4b0a      	ldr	r3, [pc, #40]	; (38b8 <Parser_LoraGetMcastFreq+0x40>)
    3890:	4798      	blx	r3
    3892:	0004      	movs	r4, r0
  ultoa(aParserData, freq, 10U);
    3894:	220a      	movs	r2, #10
    3896:	9901      	ldr	r1, [sp, #4]
    3898:	4808      	ldr	r0, [pc, #32]	; (38bc <Parser_LoraGetMcastFreq+0x44>)
    389a:	4b09      	ldr	r3, [pc, #36]	; (38c0 <Parser_LoraGetMcastFreq+0x48>)
    389c:	4798      	blx	r3
  if(status == LORAWAN_SUCCESS)
    389e:	2c08      	cmp	r4, #8
    38a0:	d005      	beq.n	38ae <Parser_LoraGetMcastFreq+0x36>
	  pParserCmdInfo->pReplyCmd = (char*)gapParserLorawanStatus[status];
    38a2:	00a4      	lsls	r4, r4, #2
    38a4:	4b07      	ldr	r3, [pc, #28]	; (38c4 <Parser_LoraGetMcastFreq+0x4c>)
    38a6:	58e3      	ldr	r3, [r4, r3]
    38a8:	616b      	str	r3, [r5, #20]
}
    38aa:	b002      	add	sp, #8
    38ac:	bd70      	pop	{r4, r5, r6, pc}
	  pParserCmdInfo->pReplyCmd = aParserData;
    38ae:	4b03      	ldr	r3, [pc, #12]	; (38bc <Parser_LoraGetMcastFreq+0x44>)
    38b0:	616b      	str	r3, [r5, #20]
    38b2:	e7fa      	b.n	38aa <Parser_LoraGetMcastFreq+0x32>
    38b4:	000196cd 	.word	0x000196cd
    38b8:	000119bd 	.word	0x000119bd
    38bc:	2000116c 	.word	0x2000116c
    38c0:	000042b1 	.word	0x000042b1
    38c4:	0001f8d0 	.word	0x0001f8d0

000038c8 <Parser_LoraSetMcastDr>:
{
    38c8:	b510      	push	{r4, lr}
    38ca:	b082      	sub	sp, #8
    38cc:	0004      	movs	r4, r0
	if(Validate_Uint8DecAsciiValue(pParserCmdInfo->pParam1, &(key.datarate)))
    38ce:	466b      	mov	r3, sp
    38d0:	1d59      	adds	r1, r3, #5
    38d2:	6800      	ldr	r0, [r0, #0]
    38d4:	4b05      	ldr	r3, [pc, #20]	; (38ec <Parser_LoraSetMcastDr+0x24>)
    38d6:	4798      	blx	r3
    38d8:	2800      	cmp	r0, #0
    38da:	d103      	bne.n	38e4 <Parser_LoraSetMcastDr+0x1c>
	pParserCmdInfo->pReplyCmd = (char*)gapParserLorawanStatus[statusIdx];
    38dc:	4b04      	ldr	r3, [pc, #16]	; (38f0 <Parser_LoraSetMcastDr+0x28>)
    38de:	6163      	str	r3, [r4, #20]
}
    38e0:	b002      	add	sp, #8
    38e2:	bd10      	pop	{r4, pc}
		key.groupId = atoi(pParserCmdInfo->pParam2);
    38e4:	6860      	ldr	r0, [r4, #4]
    38e6:	4b03      	ldr	r3, [pc, #12]	; (38f4 <Parser_LoraSetMcastDr+0x2c>)
    38e8:	4798      	blx	r3
    38ea:	e7f7      	b.n	38dc <Parser_LoraSetMcastDr+0x14>
    38ec:	00004259 	.word	0x00004259
    38f0:	0001f660 	.word	0x0001f660
    38f4:	000196cd 	.word	0x000196cd

000038f8 <Parser_LoraGetMcastDr>:
{
    38f8:	b530      	push	{r4, r5, lr}
    38fa:	b083      	sub	sp, #12
    38fc:	0004      	movs	r4, r0
	uint8_t groupId = atoi(pParserCmdInfo->pParam1);
    38fe:	6800      	ldr	r0, [r0, #0]
    3900:	4b0c      	ldr	r3, [pc, #48]	; (3934 <Parser_LoraGetMcastDr+0x3c>)
    3902:	4798      	blx	r3
    3904:	466b      	mov	r3, sp
    3906:	1d99      	adds	r1, r3, #6
    3908:	7008      	strb	r0, [r1, #0]
	status = LORAWAN_GetAttr(MCAST_DATARATE,&groupId,&dr);
    390a:	1dda      	adds	r2, r3, #7
    390c:	2030      	movs	r0, #48	; 0x30
    390e:	4b0a      	ldr	r3, [pc, #40]	; (3938 <Parser_LoraGetMcastDr+0x40>)
    3910:	4798      	blx	r3
	if(status == LORAWAN_SUCCESS)
    3912:	2808      	cmp	r0, #8
    3914:	d005      	beq.n	3922 <Parser_LoraGetMcastDr+0x2a>
	  pParserCmdInfo->pReplyCmd = (char*)gapParserLorawanStatus[status];	
    3916:	0080      	lsls	r0, r0, #2
    3918:	4b08      	ldr	r3, [pc, #32]	; (393c <Parser_LoraGetMcastDr+0x44>)
    391a:	58c3      	ldr	r3, [r0, r3]
    391c:	6163      	str	r3, [r4, #20]
}
    391e:	b003      	add	sp, #12
    3920:	bd30      	pop	{r4, r5, pc}
	   itoa(dr, aParserData, 10U);
    3922:	4d07      	ldr	r5, [pc, #28]	; (3940 <Parser_LoraGetMcastDr+0x48>)
    3924:	466b      	mov	r3, sp
    3926:	79d8      	ldrb	r0, [r3, #7]
    3928:	220a      	movs	r2, #10
    392a:	0029      	movs	r1, r5
    392c:	4b05      	ldr	r3, [pc, #20]	; (3944 <Parser_LoraGetMcastDr+0x4c>)
    392e:	4798      	blx	r3
	   pParserCmdInfo->pReplyCmd = aParserData;
    3930:	6165      	str	r5, [r4, #20]
    3932:	e7f4      	b.n	391e <Parser_LoraGetMcastDr+0x26>
    3934:	000196cd 	.word	0x000196cd
    3938:	000119bd 	.word	0x000119bd
    393c:	0001f8d0 	.word	0x0001f8d0
    3940:	2000116c 	.word	0x2000116c
    3944:	00019751 	.word	0x00019751

00003948 <Parser_LoraGetMacLastPacketRssi>:

void Parser_LoraGetMacLastPacketRssi(parserCmdInfo_t* pParserCmdInfo)
{
    3948:	b570      	push	{r4, r5, r6, lr}
    394a:	b082      	sub	sp, #8
    394c:	0006      	movs	r6, r0
	int16_t rssi;

	LORAWAN_GetAttr(LAST_PACKET_RSSI, NULL, &rssi);
    394e:	466b      	mov	r3, sp
    3950:	1d9d      	adds	r5, r3, #6
    3952:	002a      	movs	r2, r5
    3954:	2100      	movs	r1, #0
    3956:	2035      	movs	r0, #53	; 0x35
    3958:	4b05      	ldr	r3, [pc, #20]	; (3970 <Parser_LoraGetMacLastPacketRssi+0x28>)
    395a:	4798      	blx	r3
	itoa(rssi,aParserData, 10U);
    395c:	4c05      	ldr	r4, [pc, #20]	; (3974 <Parser_LoraGetMacLastPacketRssi+0x2c>)
    395e:	2300      	movs	r3, #0
    3960:	5ee8      	ldrsh	r0, [r5, r3]
    3962:	220a      	movs	r2, #10
    3964:	0021      	movs	r1, r4
    3966:	4b04      	ldr	r3, [pc, #16]	; (3978 <Parser_LoraGetMacLastPacketRssi+0x30>)
    3968:	4798      	blx	r3

	pParserCmdInfo->pReplyCmd = aParserData;
    396a:	6174      	str	r4, [r6, #20]
}
    396c:	b002      	add	sp, #8
    396e:	bd70      	pop	{r4, r5, r6, pc}
    3970:	000119bd 	.word	0x000119bd
    3974:	2000116c 	.word	0x2000116c
    3978:	00019751 	.word	0x00019751

0000397c <Parser_LoraGetIsFpending>:
void Parser_LoraGetIsFpending(parserCmdInfo_t* pParserCmdInfo)
{
    397c:	b530      	push	{r4, r5, lr}
    397e:	b083      	sub	sp, #12
    3980:	0005      	movs	r5, r0
	bool isFpending;

	LORAWAN_GetAttr(IS_FPENDING, NULL, &isFpending);
    3982:	466b      	mov	r3, sp
    3984:	1ddc      	adds	r4, r3, #7
    3986:	0022      	movs	r2, r4
    3988:	2100      	movs	r1, #0
    398a:	2036      	movs	r0, #54	; 0x36
    398c:	4b04      	ldr	r3, [pc, #16]	; (39a0 <Parser_LoraGetIsFpending+0x24>)
    398e:	4798      	blx	r3
	pParserCmdInfo->pReplyCmd = (char*)gapParserBool[isFpending];
    3990:	7823      	ldrb	r3, [r4, #0]
    3992:	009b      	lsls	r3, r3, #2
    3994:	4a03      	ldr	r2, [pc, #12]	; (39a4 <Parser_LoraGetIsFpending+0x28>)
    3996:	589b      	ldr	r3, [r3, r2]
    3998:	616b      	str	r3, [r5, #20]
}
    399a:	b003      	add	sp, #12
    399c:	bd30      	pop	{r4, r5, pc}
    399e:	46c0      	nop			; (mov r8, r8)
    39a0:	000119bd 	.word	0x000119bd
    39a4:	0001f8b8 	.word	0x0001f8b8

000039a8 <Parser_LoraGetMacDlAckReqd>:
void Parser_LoraGetMacDlAckReqd(parserCmdInfo_t* pParserCmdInfo)
{
    39a8:	b530      	push	{r4, r5, lr}
    39aa:	b083      	sub	sp, #12
    39ac:	0005      	movs	r5, r0
	uint8_t req;

	LORAWAN_GetAttr(DL_ACK_REQD, NULL, &req);
    39ae:	466b      	mov	r3, sp
    39b0:	1ddc      	adds	r4, r3, #7
    39b2:	0022      	movs	r2, r4
    39b4:	2100      	movs	r1, #0
    39b6:	2037      	movs	r0, #55	; 0x37
    39b8:	4b04      	ldr	r3, [pc, #16]	; (39cc <Parser_LoraGetMacDlAckReqd+0x24>)
    39ba:	4798      	blx	r3
	pParserCmdInfo->pReplyCmd = (char*)gapParserBool[req];
    39bc:	7823      	ldrb	r3, [r4, #0]
    39be:	009b      	lsls	r3, r3, #2
    39c0:	4a03      	ldr	r2, [pc, #12]	; (39d0 <Parser_LoraGetMacDlAckReqd+0x28>)
    39c2:	589b      	ldr	r3, [r3, r2]
    39c4:	616b      	str	r3, [r5, #20]
	
}
    39c6:	b003      	add	sp, #12
    39c8:	bd30      	pop	{r4, r5, pc}
    39ca:	46c0      	nop			; (mov r8, r8)
    39cc:	000119bd 	.word	0x000119bd
    39d0:	0001f8b8 	.word	0x0001f8b8

000039d4 <Parser_LoraGetMacLastChId>:
void Parser_LoraGetMacLastChId(parserCmdInfo_t* pParserCmdInfo)
{
    39d4:	b570      	push	{r4, r5, r6, lr}
    39d6:	b082      	sub	sp, #8
    39d8:	0006      	movs	r6, r0
	uint8_t id;

	LORAWAN_GetAttr(LAST_CH_ID, NULL, &id);
    39da:	466b      	mov	r3, sp
    39dc:	1ddd      	adds	r5, r3, #7
    39de:	002a      	movs	r2, r5
    39e0:	2100      	movs	r1, #0
    39e2:	2038      	movs	r0, #56	; 0x38
    39e4:	4b05      	ldr	r3, [pc, #20]	; (39fc <Parser_LoraGetMacLastChId+0x28>)
    39e6:	4798      	blx	r3
	utoa(id, aParserData,  10U);
    39e8:	4c05      	ldr	r4, [pc, #20]	; (3a00 <Parser_LoraGetMacLastChId+0x2c>)
    39ea:	7828      	ldrb	r0, [r5, #0]
    39ec:	220a      	movs	r2, #10
    39ee:	0021      	movs	r1, r4
    39f0:	4b04      	ldr	r3, [pc, #16]	; (3a04 <Parser_LoraGetMacLastChId+0x30>)
    39f2:	4798      	blx	r3

	pParserCmdInfo->pReplyCmd = aParserData;	
    39f4:	6174      	str	r4, [r6, #20]
}
    39f6:	b002      	add	sp, #8
    39f8:	bd70      	pop	{r4, r5, r6, pc}
    39fa:	46c0      	nop			; (mov r8, r8)
    39fc:	000119bd 	.word	0x000119bd
    3a00:	2000116c 	.word	0x2000116c
    3a04:	0001a6c1 	.word	0x0001a6c1

00003a08 <Parser_LoraGetMacPendingDutyCycle>:
void Parser_LoraGetMacPendingDutyCycle(parserCmdInfo_t* pParserCmdInfo)
{
    3a08:	b530      	push	{r4, r5, lr}
    3a0a:	b083      	sub	sp, #12
    3a0c:	0005      	movs	r5, r0
	uint32_t value;

	LORAWAN_GetAttr(PENDING_DUTY_CYCLE_TIME, NULL, &value);
    3a0e:	aa01      	add	r2, sp, #4
    3a10:	2100      	movs	r1, #0
    3a12:	2039      	movs	r0, #57	; 0x39
    3a14:	4b05      	ldr	r3, [pc, #20]	; (3a2c <Parser_LoraGetMacPendingDutyCycle+0x24>)
    3a16:	4798      	blx	r3
	utoa(value, aParserData,  10U);
    3a18:	4c05      	ldr	r4, [pc, #20]	; (3a30 <Parser_LoraGetMacPendingDutyCycle+0x28>)
    3a1a:	220a      	movs	r2, #10
    3a1c:	0021      	movs	r1, r4
    3a1e:	9801      	ldr	r0, [sp, #4]
    3a20:	4b04      	ldr	r3, [pc, #16]	; (3a34 <Parser_LoraGetMacPendingDutyCycle+0x2c>)
    3a22:	4798      	blx	r3

	pParserCmdInfo->pReplyCmd = aParserData;	
    3a24:	616c      	str	r4, [r5, #20]
}
    3a26:	b003      	add	sp, #12
    3a28:	bd30      	pop	{r4, r5, pc}
    3a2a:	46c0      	nop			; (mov r8, r8)
    3a2c:	000119bd 	.word	0x000119bd
    3a30:	2000116c 	.word	0x2000116c
    3a34:	0001a6c1 	.word	0x0001a6c1

00003a38 <Parser_LoraGetMacCnfRetryCnt>:
	uint8_t ctr;

	//LORAWAN_GetAttr(RETRY_COUNTER_CNF, NULL, &ctr);
	//utoa(ctr, aParserData,  10U);

	pParserCmdInfo->pReplyCmd = aParserData;	
    3a38:	4b01      	ldr	r3, [pc, #4]	; (3a40 <Parser_LoraGetMacCnfRetryCnt+0x8>)
    3a3a:	6143      	str	r3, [r0, #20]
}
    3a3c:	4770      	bx	lr
    3a3e:	46c0      	nop			; (mov r8, r8)
    3a40:	2000116c 	.word	0x2000116c

00003a44 <Parser_LoraGetMacUncnfRetryCnt>:
	uint8_t ctr;

	//LORAWAN_GetAttr(RETRY_COUNTER_UNCNF, NULL, &ctr);
	//utoa(ctr, aParserData,  10U);

	pParserCmdInfo->pReplyCmd = aParserData;	
    3a44:	4b01      	ldr	r3, [pc, #4]	; (3a4c <Parser_LoraGetMacUncnfRetryCnt+0x8>)
    3a46:	6143      	str	r3, [r0, #20]
}
    3a48:	4770      	bx	lr
    3a4a:	46c0      	nop			; (mov r8, r8)
    3a4c:	2000116c 	.word	0x2000116c

00003a50 <Parser_LoraGetMacNextPayloadSize>:
void Parser_LoraGetMacNextPayloadSize(parserCmdInfo_t* pParserCmdInfo)
{
    3a50:	b570      	push	{r4, r5, r6, lr}
    3a52:	b082      	sub	sp, #8
    3a54:	0006      	movs	r6, r0
	uint16_t size;

	LORAWAN_GetAttr(NEXT_PAYLOAD_SIZE, NULL, &size);
    3a56:	466b      	mov	r3, sp
    3a58:	1d9d      	adds	r5, r3, #6
    3a5a:	002a      	movs	r2, r5
    3a5c:	2100      	movs	r1, #0
    3a5e:	203b      	movs	r0, #59	; 0x3b
    3a60:	4b05      	ldr	r3, [pc, #20]	; (3a78 <Parser_LoraGetMacNextPayloadSize+0x28>)
    3a62:	4798      	blx	r3
	utoa(size, aParserData,  10U);
    3a64:	4c05      	ldr	r4, [pc, #20]	; (3a7c <Parser_LoraGetMacNextPayloadSize+0x2c>)
    3a66:	8828      	ldrh	r0, [r5, #0]
    3a68:	220a      	movs	r2, #10
    3a6a:	0021      	movs	r1, r4
    3a6c:	4b04      	ldr	r3, [pc, #16]	; (3a80 <Parser_LoraGetMacNextPayloadSize+0x30>)
    3a6e:	4798      	blx	r3

	pParserCmdInfo->pReplyCmd = aParserData;	
    3a70:	6174      	str	r4, [r6, #20]
}
    3a72:	b002      	add	sp, #8
    3a74:	bd70      	pop	{r4, r5, r6, pc}
    3a76:	46c0      	nop			; (mov r8, r8)
    3a78:	000119bd 	.word	0x000119bd
    3a7c:	2000116c 	.word	0x2000116c
    3a80:	0001a6c1 	.word	0x0001a6c1

00003a84 <Parser_LoraGetJoindutycycleremaining>:

void Parser_LoraGetJoindutycycleremaining(parserCmdInfo_t* pParserCmdInfo)
{
    3a84:	b530      	push	{r4, r5, lr}
    3a86:	b083      	sub	sp, #12
    3a88:	0005      	movs	r5, r0
	uint32_t remainingtime;
	LORAWAN_GetAttr(PENDING_JOIN_DUTY_CYCLE_TIME,NULL, &remainingtime);
    3a8a:	aa01      	add	r2, sp, #4
    3a8c:	2100      	movs	r1, #0
    3a8e:	203c      	movs	r0, #60	; 0x3c
    3a90:	4b05      	ldr	r3, [pc, #20]	; (3aa8 <Parser_LoraGetJoindutycycleremaining+0x24>)
    3a92:	4798      	blx	r3
	utoa(remainingtime, aParserData, 10U);
    3a94:	4c05      	ldr	r4, [pc, #20]	; (3aac <Parser_LoraGetJoindutycycleremaining+0x28>)
    3a96:	220a      	movs	r2, #10
    3a98:	0021      	movs	r1, r4
    3a9a:	9801      	ldr	r0, [sp, #4]
    3a9c:	4b04      	ldr	r3, [pc, #16]	; (3ab0 <Parser_LoraGetJoindutycycleremaining+0x2c>)
    3a9e:	4798      	blx	r3
	pParserCmdInfo->pReplyCmd = aParserData;
    3aa0:	616c      	str	r4, [r5, #20]
}
    3aa2:	b003      	add	sp, #12
    3aa4:	bd30      	pop	{r4, r5, pc}
    3aa6:	46c0      	nop			; (mov r8, r8)
    3aa8:	000119bd 	.word	0x000119bd
    3aac:	2000116c 	.word	0x2000116c
    3ab0:	0001a6c1 	.word	0x0001a6c1

00003ab4 <Parser_LoraSetJoinBackoff>:

void Parser_LoraSetJoinBackoff(parserCmdInfo_t* pParserCmdInfo)
{
    3ab4:	b510      	push	{r4, lr}
    3ab6:	b082      	sub	sp, #8
    3ab8:	0004      	movs	r4, r0
	uint8_t validationVal;
	uint8_t returnVal = LORAWAN_INVALID_PARAMETER;
	bool joinBackoffEnable;

	validationVal = Validate_OnOffAsciiValue(pParserCmdInfo->pParam1);
    3aba:	6800      	ldr	r0, [r0, #0]
    3abc:	4b0a      	ldr	r3, [pc, #40]	; (3ae8 <Parser_LoraSetJoinBackoff+0x34>)
    3abe:	4798      	blx	r3
	uint8_t returnVal = LORAWAN_INVALID_PARAMETER;
    3ac0:	230a      	movs	r3, #10
	if (validationVal < 2U)
    3ac2:	2801      	cmp	r0, #1
    3ac4:	d905      	bls.n	3ad2 <Parser_LoraSetJoinBackoff+0x1e>
	{
		joinBackoffEnable = validationVal;
		returnVal = LORAWAN_SetAttr(JOIN_BACKOFF_ENABLE, &joinBackoffEnable);
	}
	
	pParserCmdInfo->pReplyCmd = (char*)gapParserLorawanStatus[returnVal];
    3ac6:	009b      	lsls	r3, r3, #2
    3ac8:	4a08      	ldr	r2, [pc, #32]	; (3aec <Parser_LoraSetJoinBackoff+0x38>)
    3aca:	589b      	ldr	r3, [r3, r2]
    3acc:	6163      	str	r3, [r4, #20]
}
    3ace:	b002      	add	sp, #8
    3ad0:	bd10      	pop	{r4, pc}
		joinBackoffEnable = validationVal;
    3ad2:	466b      	mov	r3, sp
    3ad4:	1dd9      	adds	r1, r3, #7
    3ad6:	1e43      	subs	r3, r0, #1
    3ad8:	4198      	sbcs	r0, r3
    3ada:	7008      	strb	r0, [r1, #0]
		returnVal = LORAWAN_SetAttr(JOIN_BACKOFF_ENABLE, &joinBackoffEnable);
    3adc:	2033      	movs	r0, #51	; 0x33
    3ade:	4b04      	ldr	r3, [pc, #16]	; (3af0 <Parser_LoraSetJoinBackoff+0x3c>)
    3ae0:	4798      	blx	r3
    3ae2:	0003      	movs	r3, r0
    3ae4:	e7ef      	b.n	3ac6 <Parser_LoraSetJoinBackoff+0x12>
    3ae6:	46c0      	nop			; (mov r8, r8)
    3ae8:	00004401 	.word	0x00004401
    3aec:	0001f8d0 	.word	0x0001f8d0
    3af0:	00013a01 	.word	0x00013a01

00003af4 <Parser_LoraSetMaxFcntPdsUpdtVal>:

void Parser_LoraSetMaxFcntPdsUpdtVal(parserCmdInfo_t* pParserCmdInfo)
{
    3af4:	b510      	push	{r4, lr}
    3af6:	b082      	sub	sp, #8
    3af8:	0004      	movs	r4, r0
	uint8_t status = LORAWAN_INVALID_PARAMETER;
	uint8_t fcnt;

	// Parameter validation
	if(Validate_Uint8DecAsciiValue(pParserCmdInfo->pParam1, &fcnt))
    3afa:	466b      	mov	r3, sp
    3afc:	1dd9      	adds	r1, r3, #7
    3afe:	6800      	ldr	r0, [r0, #0]
    3b00:	4b08      	ldr	r3, [pc, #32]	; (3b24 <Parser_LoraSetMaxFcntPdsUpdtVal+0x30>)
    3b02:	4798      	blx	r3
	uint8_t status = LORAWAN_INVALID_PARAMETER;
    3b04:	230a      	movs	r3, #10
	if(Validate_Uint8DecAsciiValue(pParserCmdInfo->pParam1, &fcnt))
    3b06:	2800      	cmp	r0, #0
    3b08:	d105      	bne.n	3b16 <Parser_LoraSetMaxFcntPdsUpdtVal+0x22>
	{
		status = LORAWAN_SetAttr(MAX_FCNT_PDS_UPDATE_VAL,&fcnt);
	}

	pParserCmdInfo->pReplyCmd = (char*)gapParserLorawanStatus[status];
    3b0a:	009b      	lsls	r3, r3, #2
    3b0c:	4a06      	ldr	r2, [pc, #24]	; (3b28 <Parser_LoraSetMaxFcntPdsUpdtVal+0x34>)
    3b0e:	589b      	ldr	r3, [r3, r2]
    3b10:	6163      	str	r3, [r4, #20]
}
    3b12:	b002      	add	sp, #8
    3b14:	bd10      	pop	{r4, pc}
		status = LORAWAN_SetAttr(MAX_FCNT_PDS_UPDATE_VAL,&fcnt);
    3b16:	466b      	mov	r3, sp
    3b18:	1dd9      	adds	r1, r3, #7
    3b1a:	203d      	movs	r0, #61	; 0x3d
    3b1c:	4b03      	ldr	r3, [pc, #12]	; (3b2c <Parser_LoraSetMaxFcntPdsUpdtVal+0x38>)
    3b1e:	4798      	blx	r3
    3b20:	0003      	movs	r3, r0
    3b22:	e7f2      	b.n	3b0a <Parser_LoraSetMaxFcntPdsUpdtVal+0x16>
    3b24:	00004259 	.word	0x00004259
    3b28:	0001f8d0 	.word	0x0001f8d0
    3b2c:	00013a01 	.word	0x00013a01

00003b30 <Parser_LoraGetJoinBackoff>:

void Parser_LoraGetJoinBackoff(parserCmdInfo_t* pParserCmdInfo)
{
    3b30:	b510      	push	{r4, lr}
    3b32:	b082      	sub	sp, #8
    3b34:	0004      	movs	r4, r0
	bool joinBackoffEnable ;
	StackRetStatus_t status;

	status = LORAWAN_GetAttr(JOIN_BACKOFF_ENABLE, NULL, &joinBackoffEnable);
    3b36:	466b      	mov	r3, sp
    3b38:	1dda      	adds	r2, r3, #7
    3b3a:	2100      	movs	r1, #0
    3b3c:	2033      	movs	r0, #51	; 0x33
    3b3e:	4b09      	ldr	r3, [pc, #36]	; (3b64 <Parser_LoraGetJoinBackoff+0x34>)
    3b40:	4798      	blx	r3
	if(status == LORAWAN_SUCCESS)
    3b42:	2808      	cmp	r0, #8
    3b44:	d005      	beq.n	3b52 <Parser_LoraGetJoinBackoff+0x22>
	{
		pParserCmdInfo->pReplyCmd = (char*)gapParseOnOff[joinBackoffEnable];
	}
	else
	{
		pParserCmdInfo->pReplyCmd = (char*)gapParserLorawanStatus[status];
    3b46:	0080      	lsls	r0, r0, #2
    3b48:	4b07      	ldr	r3, [pc, #28]	; (3b68 <Parser_LoraGetJoinBackoff+0x38>)
    3b4a:	58c3      	ldr	r3, [r0, r3]
    3b4c:	6163      	str	r3, [r4, #20]
	}
    3b4e:	b002      	add	sp, #8
    3b50:	bd10      	pop	{r4, pc}
		pParserCmdInfo->pReplyCmd = (char*)gapParseOnOff[joinBackoffEnable];
    3b52:	466b      	mov	r3, sp
    3b54:	3307      	adds	r3, #7
    3b56:	781b      	ldrb	r3, [r3, #0]
    3b58:	009b      	lsls	r3, r3, #2
    3b5a:	4a04      	ldr	r2, [pc, #16]	; (3b6c <Parser_LoraGetJoinBackoff+0x3c>)
    3b5c:	589b      	ldr	r3, [r3, r2]
    3b5e:	6163      	str	r3, [r4, #20]
    3b60:	e7f5      	b.n	3b4e <Parser_LoraGetJoinBackoff+0x1e>
    3b62:	46c0      	nop			; (mov r8, r8)
    3b64:	000119bd 	.word	0x000119bd
    3b68:	0001f8d0 	.word	0x0001f8d0
    3b6c:	0001f8b0 	.word	0x0001f8b0

00003b70 <parserSleepCallback>:
/*********************************************************************//**
\brief	Callback function of parser to power manager.
\param[in]	sleptDuration - duration for which sleep is done
*************************************************************************/
static void parserSleepCallback(uint32_t sleptDuration)
{
    3b70:	b510      	push	{r4, lr}
    3b72:	0004      	movs	r4, r0
	HAL_Radio_resources_init();
    3b74:	4b04      	ldr	r3, [pc, #16]	; (3b88 <parserSleepCallback+0x18>)
    3b76:	4798      	blx	r3
	sio2host_init();
    3b78:	4b04      	ldr	r3, [pc, #16]	; (3b8c <parserSleepCallback+0x1c>)
    3b7a:	4798      	blx	r3
	printf("\nsleep_ok %ld ms\n\r", sleptDuration);
    3b7c:	0021      	movs	r1, r4
    3b7e:	4804      	ldr	r0, [pc, #16]	; (3b90 <parserSleepCallback+0x20>)
    3b80:	4b04      	ldr	r3, [pc, #16]	; (3b94 <parserSleepCallback+0x24>)
    3b82:	4798      	blx	r3
}
    3b84:	bd10      	pop	{r4, pc}
    3b86:	46c0      	nop			; (mov r8, r8)
    3b88:	0000809d 	.word	0x0000809d
    3b8c:	00007b3d 	.word	0x00007b3d
    3b90:	0001fa7c 	.word	0x0001fa7c
    3b94:	00019f7d 	.word	0x00019f7d

00003b98 <extint_callback>:
{
    3b98:	b510      	push	{r4, lr}
	PMM_Wakeup();
    3b9a:	4b09      	ldr	r3, [pc, #36]	; (3bc0 <extint_callback+0x28>)
    3b9c:	4798      	blx	r3
	if(SleepEnabled)
    3b9e:	4b09      	ldr	r3, [pc, #36]	; (3bc4 <extint_callback+0x2c>)
    3ba0:	781b      	ldrb	r3, [r3, #0]
    3ba2:	2b00      	cmp	r3, #0
    3ba4:	d100      	bne.n	3ba8 <extint_callback+0x10>
}
    3ba6:	bd10      	pop	{r4, pc}
	    HAL_Radio_resources_init();
    3ba8:	4b07      	ldr	r3, [pc, #28]	; (3bc8 <extint_callback+0x30>)
    3baa:	4798      	blx	r3
		sio2host_init();
    3bac:	4b07      	ldr	r3, [pc, #28]	; (3bcc <extint_callback+0x34>)
    3bae:	4798      	blx	r3
		printf("\nExiting Sleep\n\r");
    3bb0:	4807      	ldr	r0, [pc, #28]	; (3bd0 <extint_callback+0x38>)
    3bb2:	4b08      	ldr	r3, [pc, #32]	; (3bd4 <extint_callback+0x3c>)
    3bb4:	4798      	blx	r3
		SleepEnabled = false;
    3bb6:	2200      	movs	r2, #0
    3bb8:	4b02      	ldr	r3, [pc, #8]	; (3bc4 <extint_callback+0x2c>)
    3bba:	701a      	strb	r2, [r3, #0]
}
    3bbc:	e7f3      	b.n	3ba6 <extint_callback+0xe>
    3bbe:	46c0      	nop			; (mov r8, r8)
    3bc0:	000083e9 	.word	0x000083e9
    3bc4:	20000b54 	.word	0x20000b54
    3bc8:	0000809d 	.word	0x0000809d
    3bcc:	00007b3d 	.word	0x00007b3d
    3bd0:	0001fa5c 	.word	0x0001fa5c
    3bd4:	00019f7d 	.word	0x00019f7d

00003bd8 <Parser_SystemGetHwEui>:
{
    3bd8:	b530      	push	{r4, r5, lr}
    3bda:	b083      	sub	sp, #12
    3bdc:	0005      	movs	r5, r0
    System_GetExternalEui(aDevEui);
    3bde:	4668      	mov	r0, sp
    3be0:	4b05      	ldr	r3, [pc, #20]	; (3bf8 <Parser_SystemGetHwEui+0x20>)
    3be2:	4798      	blx	r3
    Parser_IntArrayToHexAscii(8, aDevEui, aParserData);
    3be4:	4c05      	ldr	r4, [pc, #20]	; (3bfc <Parser_SystemGetHwEui+0x24>)
    3be6:	0022      	movs	r2, r4
    3be8:	4669      	mov	r1, sp
    3bea:	2008      	movs	r0, #8
    3bec:	4b04      	ldr	r3, [pc, #16]	; (3c00 <Parser_SystemGetHwEui+0x28>)
    3bee:	4798      	blx	r3
    pParserCmdInfo->pReplyCmd = aParserData;
    3bf0:	616c      	str	r4, [r5, #20]
}
    3bf2:	b003      	add	sp, #12
    3bf4:	bd30      	pop	{r4, r5, pc}
    3bf6:	46c0      	nop			; (mov r8, r8)
    3bf8:	00008399 	.word	0x00008399
    3bfc:	2000116c 	.word	0x2000116c
    3c00:	000041f9 	.word	0x000041f9

00003c04 <Parser_SystemGetVer>:
{
    3c04:	b570      	push	{r4, r5, r6, lr}
    3c06:	0005      	movs	r5, r0
	Parser_GetSwVersion(aParserData);
    3c08:	4c02      	ldr	r4, [pc, #8]	; (3c14 <Parser_SystemGetVer+0x10>)
    3c0a:	0020      	movs	r0, r4
    3c0c:	4b02      	ldr	r3, [pc, #8]	; (3c18 <Parser_SystemGetVer+0x14>)
    3c0e:	4798      	blx	r3
	pParserCmdInfo->pReplyCmd = aParserData;
    3c10:	616c      	str	r4, [r5, #20]
}
    3c12:	bd70      	pop	{r4, r5, r6, pc}
    3c14:	2000116c 	.word	0x2000116c
    3c18:	00001f09 	.word	0x00001f09

00003c1c <Parser_SystemGetCustomParam>:
{
    3c1c:	b570      	push	{r4, r5, r6, lr}
    3c1e:	0005      	movs	r5, r0
	PDS_RESTORE(PDS_APP_CUSTOMPARAMETER) ;
    3c20:	2100      	movs	r1, #0
    3c22:	200c      	movs	r0, #12
    3c24:	4b05      	ldr	r3, [pc, #20]	; (3c3c <Parser_SystemGetCustomParam+0x20>)
    3c26:	4798      	blx	r3
	utoa(pdsAppCustomParameter, aParserData,  10U);
    3c28:	4c05      	ldr	r4, [pc, #20]	; (3c40 <Parser_SystemGetCustomParam+0x24>)
    3c2a:	4b06      	ldr	r3, [pc, #24]	; (3c44 <Parser_SystemGetCustomParam+0x28>)
    3c2c:	6818      	ldr	r0, [r3, #0]
    3c2e:	220a      	movs	r2, #10
    3c30:	0021      	movs	r1, r4
    3c32:	4b05      	ldr	r3, [pc, #20]	; (3c48 <Parser_SystemGetCustomParam+0x2c>)
    3c34:	4798      	blx	r3
	pParserCmdInfo->pReplyCmd = aParserData;
    3c36:	616c      	str	r4, [r5, #20]
}
    3c38:	bd70      	pop	{r4, r5, r6, pc}
    3c3a:	46c0      	nop			; (mov r8, r8)
    3c3c:	0000e15d 	.word	0x0000e15d
    3c40:	2000116c 	.word	0x2000116c
    3c44:	20001380 	.word	0x20001380
    3c48:	0001a6c1 	.word	0x0001a6c1

00003c4c <Parser_SystemSetCustomParam>:
{
    3c4c:	b510      	push	{r4, lr}
    3c4e:	0004      	movs	r4, r0
	pdsAppCustomParameter = (uint32_t)strtoul(pParserCmdInfo->pParam1, NULL, 10);
    3c50:	220a      	movs	r2, #10
    3c52:	2100      	movs	r1, #0
    3c54:	6800      	ldr	r0, [r0, #0]
    3c56:	4b0e      	ldr	r3, [pc, #56]	; (3c90 <Parser_SystemSetCustomParam+0x44>)
    3c58:	4798      	blx	r3
    3c5a:	4b0e      	ldr	r3, [pc, #56]	; (3c94 <Parser_SystemSetCustomParam+0x48>)
    3c5c:	6018      	str	r0, [r3, #0]
	if (Validate_UintDecAsciiValue(pParserCmdInfo->pParam1, 10, UINT32_MAX))
    3c5e:	2201      	movs	r2, #1
    3c60:	4252      	negs	r2, r2
    3c62:	210a      	movs	r1, #10
    3c64:	6820      	ldr	r0, [r4, #0]
    3c66:	4b0c      	ldr	r3, [pc, #48]	; (3c98 <Parser_SystemSetCustomParam+0x4c>)
    3c68:	4798      	blx	r3
	StackRetStatus_t status = INVALID_PARAM_IDX ;
    3c6a:	2301      	movs	r3, #1
	if (Validate_UintDecAsciiValue(pParserCmdInfo->pParam1, 10, UINT32_MAX))
    3c6c:	2800      	cmp	r0, #0
    3c6e:	d104      	bne.n	3c7a <Parser_SystemSetCustomParam+0x2e>
	pParserCmdInfo->pReplyCmd = (char*)gapParserSysStatus[status] ;
    3c70:	009b      	lsls	r3, r3, #2
    3c72:	4a0a      	ldr	r2, [pc, #40]	; (3c9c <Parser_SystemSetCustomParam+0x50>)
    3c74:	589b      	ldr	r3, [r3, r2]
    3c76:	6163      	str	r3, [r4, #20]
}
    3c78:	bd10      	pop	{r4, pc}
		printf("\r\n%ld\r\n", pdsAppCustomParameter) ;
    3c7a:	4b06      	ldr	r3, [pc, #24]	; (3c94 <Parser_SystemSetCustomParam+0x48>)
    3c7c:	6819      	ldr	r1, [r3, #0]
    3c7e:	4808      	ldr	r0, [pc, #32]	; (3ca0 <Parser_SystemSetCustomParam+0x54>)
    3c80:	4b08      	ldr	r3, [pc, #32]	; (3ca4 <Parser_SystemSetCustomParam+0x58>)
    3c82:	4798      	blx	r3
		PDS_STORE(PDS_APP_CUSTOMPARAMETER) ;
    3c84:	2100      	movs	r1, #0
    3c86:	200c      	movs	r0, #12
    3c88:	4b07      	ldr	r3, [pc, #28]	; (3ca8 <Parser_SystemSetCustomParam+0x5c>)
    3c8a:	4798      	blx	r3
		status = OK_STATUS_IDX ;
    3c8c:	2300      	movs	r3, #0
    3c8e:	e7ef      	b.n	3c70 <Parser_SystemSetCustomParam+0x24>
    3c90:	0001a609 	.word	0x0001a609
    3c94:	20001380 	.word	0x20001380
    3c98:	0000432d 	.word	0x0000432d
    3c9c:	0001fa70 	.word	0x0001fa70
    3ca0:	0001fa40 	.word	0x0001fa40
    3ca4:	00019f7d 	.word	0x00019f7d
    3ca8:	0000e0f9 	.word	0x0000e0f9

00003cac <Parser_SystemGetCryptoSn>:
{
    3cac:	b530      	push	{r4, r5, lr}
    3cae:	b085      	sub	sp, #20
    3cb0:	0005      	movs	r5, r0
    uint8_t aCryptoSn[9] = {0} ;
    3cb2:	2209      	movs	r2, #9
    3cb4:	2100      	movs	r1, #0
    3cb6:	a801      	add	r0, sp, #4
    3cb8:	4b09      	ldr	r3, [pc, #36]	; (3ce0 <Parser_SystemGetCryptoSn+0x34>)
    3cba:	4798      	blx	r3
	if (useCryptoDev)
    3cbc:	4b09      	ldr	r3, [pc, #36]	; (3ce4 <Parser_SystemGetCryptoSn+0x38>)
    3cbe:	781b      	ldrb	r3, [r3, #0]
    3cc0:	2b00      	cmp	r3, #0
    3cc2:	d108      	bne.n	3cd6 <Parser_SystemGetCryptoSn+0x2a>
    Parser_IntArrayToHexAscii(9, aCryptoSn, aParserData);
    3cc4:	4c08      	ldr	r4, [pc, #32]	; (3ce8 <Parser_SystemGetCryptoSn+0x3c>)
    3cc6:	0022      	movs	r2, r4
    3cc8:	a901      	add	r1, sp, #4
    3cca:	2009      	movs	r0, #9
    3ccc:	4b07      	ldr	r3, [pc, #28]	; (3cec <Parser_SystemGetCryptoSn+0x40>)
    3cce:	4798      	blx	r3
    pParserCmdInfo->pReplyCmd = aParserData;
    3cd0:	616c      	str	r4, [r5, #20]
}
    3cd2:	b005      	add	sp, #20
    3cd4:	bd30      	pop	{r4, r5, pc}
		atcab_read_serial_number(aCryptoSn) ;
    3cd6:	a801      	add	r0, sp, #4
    3cd8:	4b05      	ldr	r3, [pc, #20]	; (3cf0 <Parser_SystemGetCryptoSn+0x44>)
    3cda:	4798      	blx	r3
    3cdc:	e7f2      	b.n	3cc4 <Parser_SystemGetCryptoSn+0x18>
    3cde:	46c0      	nop			; (mov r8, r8)
    3ce0:	00019ec9 	.word	0x00019ec9
    3ce4:	20000fa8 	.word	0x20000fa8
    3ce8:	2000116c 	.word	0x2000116c
    3cec:	000041f9 	.word	0x000041f9
    3cf0:	00000611 	.word	0x00000611

00003cf4 <Parser_SystemGetCryptoDevEui>:
{
    3cf4:	b570      	push	{r4, r5, r6, lr}
    3cf6:	b088      	sub	sp, #32
    3cf8:	0005      	movs	r5, r0
	char aCryptoDevEui[17] = {'0'} ;
    3cfa:	ac03      	add	r4, sp, #12
    3cfc:	2211      	movs	r2, #17
    3cfe:	2100      	movs	r1, #0
    3d00:	0020      	movs	r0, r4
    3d02:	4b0e      	ldr	r3, [pc, #56]	; (3d3c <Parser_SystemGetCryptoDevEui+0x48>)
    3d04:	4798      	blx	r3
    3d06:	2330      	movs	r3, #48	; 0x30
    3d08:	7023      	strb	r3, [r4, #0]
	if (useCryptoDev)
    3d0a:	4b0d      	ldr	r3, [pc, #52]	; (3d40 <Parser_SystemGetCryptoDevEui+0x4c>)
    3d0c:	781b      	ldrb	r3, [r3, #0]
    3d0e:	2b00      	cmp	r3, #0
    3d10:	d108      	bne.n	3d24 <Parser_SystemGetCryptoDevEui+0x30>
	memcpy(aParserData, aCryptoDevEui, sizeof(aCryptoDevEui)) ;
    3d12:	4c0c      	ldr	r4, [pc, #48]	; (3d44 <Parser_SystemGetCryptoDevEui+0x50>)
    3d14:	2211      	movs	r2, #17
    3d16:	a903      	add	r1, sp, #12
    3d18:	0020      	movs	r0, r4
    3d1a:	4b0b      	ldr	r3, [pc, #44]	; (3d48 <Parser_SystemGetCryptoDevEui+0x54>)
    3d1c:	4798      	blx	r3
	pParserCmdInfo->pReplyCmd = aParserData ;
    3d1e:	616c      	str	r4, [r5, #20]
}
    3d20:	b008      	add	sp, #32
    3d22:	bd70      	pop	{r4, r5, r6, pc}
		atcab_read_bytes_zone(ATCA_ZONE_DATA, DEV_EUI_SLOT, 0, (uint8_t*)aCryptoDevEui, 16) ;
    3d24:	ac03      	add	r4, sp, #12
    3d26:	2310      	movs	r3, #16
    3d28:	9300      	str	r3, [sp, #0]
    3d2a:	0023      	movs	r3, r4
    3d2c:	2200      	movs	r2, #0
    3d2e:	210a      	movs	r1, #10
    3d30:	2002      	movs	r0, #2
    3d32:	4e06      	ldr	r6, [pc, #24]	; (3d4c <Parser_SystemGetCryptoDevEui+0x58>)
    3d34:	47b0      	blx	r6
		aCryptoDevEui[16] = '\0' ;
    3d36:	2300      	movs	r3, #0
    3d38:	7423      	strb	r3, [r4, #16]
    3d3a:	e7ea      	b.n	3d12 <Parser_SystemGetCryptoDevEui+0x1e>
    3d3c:	00019ec9 	.word	0x00019ec9
    3d40:	20000fa8 	.word	0x20000fa8
    3d44:	2000116c 	.word	0x2000116c
    3d48:	00019da5 	.word	0x00019da5
    3d4c:	0000077d 	.word	0x0000077d

00003d50 <Parser_SystemGetCryptoJoinEui>:
{
    3d50:	b530      	push	{r4, r5, lr}
    3d52:	b085      	sub	sp, #20
    3d54:	0005      	movs	r5, r0
	uint8_t aCryptoJoinEui[8] = {0} ;
    3d56:	2208      	movs	r2, #8
    3d58:	2100      	movs	r1, #0
    3d5a:	a802      	add	r0, sp, #8
    3d5c:	4b0b      	ldr	r3, [pc, #44]	; (3d8c <Parser_SystemGetCryptoJoinEui+0x3c>)
    3d5e:	4798      	blx	r3
	if (useCryptoDev)
    3d60:	4b0b      	ldr	r3, [pc, #44]	; (3d90 <Parser_SystemGetCryptoJoinEui+0x40>)
    3d62:	781b      	ldrb	r3, [r3, #0]
    3d64:	2b00      	cmp	r3, #0
    3d66:	d108      	bne.n	3d7a <Parser_SystemGetCryptoJoinEui+0x2a>
    Parser_IntArrayToHexAscii(8, aCryptoJoinEui, aParserData) ;
    3d68:	4c0a      	ldr	r4, [pc, #40]	; (3d94 <Parser_SystemGetCryptoJoinEui+0x44>)
    3d6a:	0022      	movs	r2, r4
    3d6c:	a902      	add	r1, sp, #8
    3d6e:	2008      	movs	r0, #8
    3d70:	4b09      	ldr	r3, [pc, #36]	; (3d98 <Parser_SystemGetCryptoJoinEui+0x48>)
    3d72:	4798      	blx	r3
    pParserCmdInfo->pReplyCmd = aParserData ;
    3d74:	616c      	str	r4, [r5, #20]
}
    3d76:	b005      	add	sp, #20
    3d78:	bd30      	pop	{r4, r5, pc}
		atcab_read_bytes_zone(ATCA_ZONE_DATA, APP_EUI_SLOT, 0, (uint8_t*)aCryptoJoinEui, 8) ;
    3d7a:	2308      	movs	r3, #8
    3d7c:	9300      	str	r3, [sp, #0]
    3d7e:	ab02      	add	r3, sp, #8
    3d80:	2200      	movs	r2, #0
    3d82:	2109      	movs	r1, #9
    3d84:	2002      	movs	r0, #2
    3d86:	4c05      	ldr	r4, [pc, #20]	; (3d9c <Parser_SystemGetCryptoJoinEui+0x4c>)
    3d88:	47a0      	blx	r4
    3d8a:	e7ed      	b.n	3d68 <Parser_SystemGetCryptoJoinEui+0x18>
    3d8c:	00019ec9 	.word	0x00019ec9
    3d90:	20000fa8 	.word	0x20000fa8
    3d94:	2000116c 	.word	0x2000116c
    3d98:	000041f9 	.word	0x000041f9
    3d9c:	0000077d 	.word	0x0000077d

00003da0 <Parser_SystemGetCryptoTkmInfo>:
{
    3da0:	b570      	push	{r4, r5, r6, lr}
    3da2:	b08a      	sub	sp, #40	; 0x28
    3da4:	0005      	movs	r5, r0
	uint8_t aCryptoTkmInfo[10] = {0} ;
    3da6:	220a      	movs	r2, #10
    3da8:	2100      	movs	r1, #0
    3daa:	a803      	add	r0, sp, #12
    3dac:	4b12      	ldr	r3, [pc, #72]	; (3df8 <Parser_SystemGetCryptoTkmInfo+0x58>)
    3dae:	4798      	blx	r3
	if (useCryptoDev)
    3db0:	4b12      	ldr	r3, [pc, #72]	; (3dfc <Parser_SystemGetCryptoTkmInfo+0x5c>)
    3db2:	781b      	ldrb	r3, [r3, #0]
    3db4:	2b00      	cmp	r3, #0
    3db6:	d108      	bne.n	3dca <Parser_SystemGetCryptoTkmInfo+0x2a>
	Parser_IntArrayToHexAscii(10, aCryptoTkmInfo, aParserData) ;
    3db8:	4c11      	ldr	r4, [pc, #68]	; (3e00 <Parser_SystemGetCryptoTkmInfo+0x60>)
    3dba:	0022      	movs	r2, r4
    3dbc:	a903      	add	r1, sp, #12
    3dbe:	200a      	movs	r0, #10
    3dc0:	4b10      	ldr	r3, [pc, #64]	; (3e04 <Parser_SystemGetCryptoTkmInfo+0x64>)
    3dc2:	4798      	blx	r3
	pParserCmdInfo->pReplyCmd = aParserData ;
    3dc4:	616c      	str	r4, [r5, #20]
}
    3dc6:	b00a      	add	sp, #40	; 0x28
    3dc8:	bd70      	pop	{r4, r5, r6, pc}
		atcab_read_serial_number(aCryptoSn) ;
    3dca:	a807      	add	r0, sp, #28
    3dcc:	4b0e      	ldr	r3, [pc, #56]	; (3e08 <Parser_SystemGetCryptoTkmInfo+0x68>)
    3dce:	4798      	blx	r3
		atcab_read_bytes_zone(ATCA_ZONE_DATA, 10, 70, aInfo, sizeof(aInfo)) ;
    3dd0:	ac06      	add	r4, sp, #24
    3dd2:	2302      	movs	r3, #2
    3dd4:	9300      	str	r3, [sp, #0]
    3dd6:	0023      	movs	r3, r4
    3dd8:	2246      	movs	r2, #70	; 0x46
    3dda:	210a      	movs	r1, #10
    3ddc:	2002      	movs	r0, #2
    3dde:	4e0b      	ldr	r6, [pc, #44]	; (3e0c <Parser_SystemGetCryptoTkmInfo+0x6c>)
    3de0:	47b0      	blx	r6
		memcpy(aCryptoTkmInfo, aInfo, 2) ;
    3de2:	8822      	ldrh	r2, [r4, #0]
    3de4:	ab03      	add	r3, sp, #12
    3de6:	801a      	strh	r2, [r3, #0]
		memcpy(&aCryptoTkmInfo[2], aCryptoSn, 8) ;
    3de8:	2208      	movs	r2, #8
    3dea:	a907      	add	r1, sp, #28
    3dec:	200e      	movs	r0, #14
    3dee:	4468      	add	r0, sp
    3df0:	4b07      	ldr	r3, [pc, #28]	; (3e10 <Parser_SystemGetCryptoTkmInfo+0x70>)
    3df2:	4798      	blx	r3
    3df4:	e7e0      	b.n	3db8 <Parser_SystemGetCryptoTkmInfo+0x18>
    3df6:	46c0      	nop			; (mov r8, r8)
    3df8:	00019ec9 	.word	0x00019ec9
    3dfc:	20000fa8 	.word	0x20000fa8
    3e00:	2000116c 	.word	0x2000116c
    3e04:	000041f9 	.word	0x000041f9
    3e08:	00000611 	.word	0x00000611
    3e0c:	0000077d 	.word	0x0000077d
    3e10:	00019da5 	.word	0x00019da5

00003e14 <Parser_SystemGetCustomID>:
{
    3e14:	b570      	push	{r4, r5, r6, lr}
    3e16:	0005      	movs	r5, r0
	Parser_GetCustomID(aParserData);
    3e18:	4c02      	ldr	r4, [pc, #8]	; (3e24 <Parser_SystemGetCustomID+0x10>)
    3e1a:	0020      	movs	r0, r4
    3e1c:	4b02      	ldr	r3, [pc, #8]	; (3e28 <Parser_SystemGetCustomID+0x14>)
    3e1e:	4798      	blx	r3
	pParserCmdInfo->pReplyCmd = aParserData;
    3e20:	616c      	str	r4, [r5, #20]
}
    3e22:	bd70      	pop	{r4, r5, r6, pc}
    3e24:	2000116c 	.word	0x2000116c
    3e28:	00001e51 	.word	0x00001e51

00003e2c <Parser_SystemReboot>:
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    3e2c:	f3bf 8f4f 	dsb	sy
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
    3e30:	4a03      	ldr	r2, [pc, #12]	; (3e40 <Parser_SystemReboot+0x14>)
    3e32:	4b04      	ldr	r3, [pc, #16]	; (3e44 <Parser_SystemReboot+0x18>)
    3e34:	60da      	str	r2, [r3, #12]
    3e36:	f3bf 8f4f 	dsb	sy
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    3e3a:	46c0      	nop			; (mov r8, r8)
    3e3c:	e7fd      	b.n	3e3a <Parser_SystemReboot+0xe>
    3e3e:	46c0      	nop			; (mov r8, r8)
    3e40:	05fa0004 	.word	0x05fa0004
    3e44:	e000ed00 	.word	0xe000ed00

00003e48 <Parser_SystemFactReset>:
{
    3e48:	b510      	push	{r4, lr}
	PDS_DeleteAll();
    3e4a:	4b05      	ldr	r3, [pc, #20]	; (3e60 <Parser_SystemFactReset+0x18>)
    3e4c:	4798      	blx	r3
    3e4e:	f3bf 8f4f 	dsb	sy
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
    3e52:	4a04      	ldr	r2, [pc, #16]	; (3e64 <Parser_SystemFactReset+0x1c>)
    3e54:	4b04      	ldr	r3, [pc, #16]	; (3e68 <Parser_SystemFactReset+0x20>)
    3e56:	60da      	str	r2, [r3, #12]
    3e58:	f3bf 8f4f 	dsb	sy
    __NOP();
    3e5c:	46c0      	nop			; (mov r8, r8)
    3e5e:	e7fd      	b.n	3e5c <Parser_SystemFactReset+0x14>
    3e60:	0000e271 	.word	0x0000e271
    3e64:	05fa0004 	.word	0x05fa0004
    3e68:	e000ed00 	.word	0xe000ed00

00003e6c <Parser_SystemSleep>:
{
    3e6c:	b530      	push	{r4, r5, lr}
    3e6e:	b085      	sub	sp, #20
    3e70:	0004      	movs	r4, r0
    PMM_SleepReq_t sleepRequest = {
    3e72:	ab01      	add	r3, sp, #4
    3e74:	2200      	movs	r2, #0
    3e76:	9201      	str	r2, [sp, #4]
    3e78:	21ff      	movs	r1, #255	; 0xff
    3e7a:	7119      	strb	r1, [r3, #4]
    3e7c:	9203      	str	r2, [sp, #12]
    uint32_t sleepDuration = strtoul(pParserCmdInfo->pParam2, NULL, 10);
    3e7e:	320a      	adds	r2, #10
    3e80:	2100      	movs	r1, #0
    3e82:	6840      	ldr	r0, [r0, #4]
    3e84:	4b24      	ldr	r3, [pc, #144]	; (3f18 <Parser_SystemSleep+0xac>)
    3e86:	4798      	blx	r3
    3e88:	0005      	movs	r5, r0
		if(0 == stricmp(pParserCmdInfo->pParam1, gapParseSleepMode[iCount]))
    3e8a:	4924      	ldr	r1, [pc, #144]	; (3f1c <Parser_SystemSleep+0xb0>)
    3e8c:	6820      	ldr	r0, [r4, #0]
    3e8e:	4b24      	ldr	r3, [pc, #144]	; (3f20 <Parser_SystemSleep+0xb4>)
    3e90:	4798      	blx	r3
    3e92:	2800      	cmp	r0, #0
    3e94:	d009      	beq.n	3eaa <Parser_SystemSleep+0x3e>
    3e96:	4923      	ldr	r1, [pc, #140]	; (3f24 <Parser_SystemSleep+0xb8>)
    3e98:	6820      	ldr	r0, [r4, #0]
    3e9a:	4b21      	ldr	r3, [pc, #132]	; (3f20 <Parser_SystemSleep+0xb4>)
    3e9c:	4798      	blx	r3
    3e9e:	2800      	cmp	r0, #0
    3ea0:	d038      	beq.n	3f14 <Parser_SystemSleep+0xa8>
        pParserCmdInfo->pReplyCmd = (char *) gapParserSysStatus[INVALID_PARAM_IDX];
    3ea2:	4b21      	ldr	r3, [pc, #132]	; (3f28 <Parser_SystemSleep+0xbc>)
    3ea4:	6163      	str	r3, [r4, #20]
}
    3ea6:	b005      	add	sp, #20
    3ea8:	bd30      	pop	{r4, r5, pc}
	for(uint8_t iCount = 0; iCount < sizeof(gapParseSleepMode)/sizeof(gapParseSleepMode[0]); iCount++)
    3eaa:	2200      	movs	r2, #0
    if ( (1 /* invalid range */ < sleepModeValue) || \
    3eac:	491f      	ldr	r1, [pc, #124]	; (3f2c <Parser_SystemSleep+0xc0>)
    3eae:	4b20      	ldr	r3, [pc, #128]	; (3f30 <Parser_SystemSleep+0xc4>)
    3eb0:	18eb      	adds	r3, r5, r3
    3eb2:	428b      	cmp	r3, r1
    3eb4:	d8f5      	bhi.n	3ea2 <Parser_SystemSleep+0x36>
        sleepRequest.sleepTimeMs = sleepDuration;
    3eb6:	9501      	str	r5, [sp, #4]
        sleepRequest.pmmWakeupCallback = parserSleepCallback;
    3eb8:	4b1e      	ldr	r3, [pc, #120]	; (3f34 <Parser_SystemSleep+0xc8>)
    3eba:	9303      	str	r3, [sp, #12]
        sleepRequest.sleep_mode = ( 0 /* standby */ == sleepModeValue ) ? SLEEP_MODE_STANDBY : SLEEP_MODE_BACKUP;
    3ebc:	0013      	movs	r3, r2
    3ebe:	1e5a      	subs	r2, r3, #1
    3ec0:	4193      	sbcs	r3, r2
    3ec2:	3301      	adds	r3, #1
    3ec4:	aa01      	add	r2, sp, #4
    3ec6:	7113      	strb	r3, [r2, #4]
    SleepEnabled = true;
    3ec8:	2201      	movs	r2, #1
    3eca:	4b1b      	ldr	r3, [pc, #108]	; (3f38 <Parser_SystemSleep+0xcc>)
    3ecc:	701a      	strb	r2, [r3, #0]
    if ( LORAWAN_ReadyToSleep( deviceResetsForWakeup ) )
    3ece:	4b1b      	ldr	r3, [pc, #108]	; (3f3c <Parser_SystemSleep+0xd0>)
    3ed0:	7818      	ldrb	r0, [r3, #0]
    3ed2:	4b1b      	ldr	r3, [pc, #108]	; (3f40 <Parser_SystemSleep+0xd4>)
    3ed4:	4798      	blx	r3
    3ed6:	2800      	cmp	r0, #0
    3ed8:	d0e5      	beq.n	3ea6 <Parser_SystemSleep+0x3a>
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
    3eda:	2300      	movs	r3, #0
    3edc:	466a      	mov	r2, sp
    3ede:	7013      	strb	r3, [r2, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    3ee0:	3301      	adds	r3, #1
    3ee2:	7053      	strb	r3, [r2, #1]
static void app_resources_uninit(void)
{
	/* Disable USART TX and RX Pins */
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
	pin_conf.powersave  = true;
    3ee4:	7093      	strb	r3, [r2, #2]
#ifdef HOST_SERCOM_PAD0_PIN
	port_pin_set_config(HOST_SERCOM_PAD0_PIN, &pin_conf);
    3ee6:	4669      	mov	r1, sp
    3ee8:	2004      	movs	r0, #4
    3eea:	4d16      	ldr	r5, [pc, #88]	; (3f44 <Parser_SystemSleep+0xd8>)
    3eec:	47a8      	blx	r5
#endif
#ifdef HOST_SERCOM_PAD1_PIN
	port_pin_set_config(HOST_SERCOM_PAD1_PIN, &pin_conf);
    3eee:	4669      	mov	r1, sp
    3ef0:	2005      	movs	r0, #5
    3ef2:	47a8      	blx	r5
#endif
	/* Disable UART module */
	sio2host_deinit();
    3ef4:	4b14      	ldr	r3, [pc, #80]	; (3f48 <Parser_SystemSleep+0xdc>)
    3ef6:	4798      	blx	r3
	/* Disable Transceiver SPI Module */
	HAL_RadioDeInit();
    3ef8:	4b14      	ldr	r3, [pc, #80]	; (3f4c <Parser_SystemSleep+0xe0>)
    3efa:	4798      	blx	r3
        if ( PMM_SLEEP_REQ_DENIED == PMM_Sleep( &sleepRequest ) )
    3efc:	a801      	add	r0, sp, #4
    3efe:	4b14      	ldr	r3, [pc, #80]	; (3f50 <Parser_SystemSleep+0xe4>)
    3f00:	4798      	blx	r3
    3f02:	2800      	cmp	r0, #0
    3f04:	d1cf      	bne.n	3ea6 <Parser_SystemSleep+0x3a>
            HAL_Radio_resources_init();
    3f06:	4b13      	ldr	r3, [pc, #76]	; (3f54 <Parser_SystemSleep+0xe8>)
    3f08:	4798      	blx	r3
            sio2host_init();
    3f0a:	4b13      	ldr	r3, [pc, #76]	; (3f58 <Parser_SystemSleep+0xec>)
    3f0c:	4798      	blx	r3
            pParserCmdInfo->pReplyCmd = (char *) gapParserSysStatus[ERR_STATUS_IDX];
    3f0e:	4b13      	ldr	r3, [pc, #76]	; (3f5c <Parser_SystemSleep+0xf0>)
    3f10:	6163      	str	r3, [r4, #20]
    3f12:	e7c8      	b.n	3ea6 <Parser_SystemSleep+0x3a>
	for(uint8_t iCount = 0; iCount < sizeof(gapParseSleepMode)/sizeof(gapParseSleepMode[0]); iCount++)
    3f14:	2201      	movs	r2, #1
    3f16:	e7c9      	b.n	3eac <Parser_SystemSleep+0x40>
    3f18:	0001a609 	.word	0x0001a609
    3f1c:	0001fa48 	.word	0x0001fa48
    3f20:	00004371 	.word	0x00004371
    3f24:	0001fa50 	.word	0x0001fa50
    3f28:	0001f660 	.word	0x0001f660
    3f2c:	07cebbc8 	.word	0x07cebbc8
    3f30:	fffffc18 	.word	0xfffffc18
    3f34:	00003b71 	.word	0x00003b71
    3f38:	20000b54 	.word	0x20000b54
    3f3c:	20000b55 	.word	0x20000b55
    3f40:	000141bd 	.word	0x000141bd
    3f44:	00004f35 	.word	0x00004f35
    3f48:	00007c89 	.word	0x00007c89
    3f4c:	000080c1 	.word	0x000080c1
    3f50:	0000846d 	.word	0x0000846d
    3f54:	0000809d 	.word	0x0000809d
    3f58:	00007b3d 	.word	0x00007b3d
    3f5c:	0001fa58 	.word	0x0001fa58

00003f60 <configure_extint>:
{
    3f60:	b510      	push	{r4, lr}
    3f62:	b084      	sub	sp, #16
	extint_chan_get_config_defaults(&eint_chan_conf);
    3f64:	ac01      	add	r4, sp, #4
    3f66:	0020      	movs	r0, r4
    3f68:	4b07      	ldr	r3, [pc, #28]	; (3f88 <configure_extint+0x28>)
    3f6a:	4798      	blx	r3
	eint_chan_conf.gpio_pin           = BUTTON_0_EIC_PIN;
    3f6c:	231c      	movs	r3, #28
    3f6e:	9301      	str	r3, [sp, #4]
	eint_chan_conf.gpio_pin_mux       = BUTTON_0_EIC_MUX;
    3f70:	2300      	movs	r3, #0
    3f72:	6063      	str	r3, [r4, #4]
	eint_chan_conf.detection_criteria = EXTINT_DETECT_FALLING;
    3f74:	3302      	adds	r3, #2
    3f76:	72e3      	strb	r3, [r4, #11]
	eint_chan_conf.filter_input_signal = true;
    3f78:	3b01      	subs	r3, #1
    3f7a:	72a3      	strb	r3, [r4, #10]
	extint_chan_set_config(BUTTON_0_EIC_LINE, &eint_chan_conf);
    3f7c:	0021      	movs	r1, r4
    3f7e:	2008      	movs	r0, #8
    3f80:	4b02      	ldr	r3, [pc, #8]	; (3f8c <configure_extint+0x2c>)
    3f82:	4798      	blx	r3
}
    3f84:	b004      	add	sp, #16
    3f86:	bd10      	pop	{r4, pc}
    3f88:	00004acd 	.word	0x00004acd
    3f8c:	00004ae1 	.word	0x00004ae1

00003f90 <configure_eic_callback>:
{
    3f90:	b510      	push	{r4, lr}
	extint_register_callback(
    3f92:	2200      	movs	r2, #0
    3f94:	2108      	movs	r1, #8
    3f96:	4804      	ldr	r0, [pc, #16]	; (3fa8 <configure_eic_callback+0x18>)
    3f98:	4b04      	ldr	r3, [pc, #16]	; (3fac <configure_eic_callback+0x1c>)
    3f9a:	4798      	blx	r3
	extint_chan_enable_callback(BUTTON_0_EIC_LINE, EXTINT_CALLBACK_TYPE_DETECT);
    3f9c:	2100      	movs	r1, #0
    3f9e:	2008      	movs	r0, #8
    3fa0:	4b03      	ldr	r3, [pc, #12]	; (3fb0 <configure_eic_callback+0x20>)
    3fa2:	4798      	blx	r3
}
    3fa4:	bd10      	pop	{r4, pc}
    3fa6:	46c0      	nop			; (mov r8, r8)
    3fa8:	00003b99 	.word	0x00003b99
    3fac:	0000498d 	.word	0x0000498d
    3fb0:	000049b9 	.word	0x000049b9

00003fb4 <Parser_RxClearBuffer>:
    "invalid_param",
    "err"
};

void Parser_RxClearBuffer(void)
{
    3fb4:	b570      	push	{r4, r5, r6, lr}
    mRxParserCmd.bCmdStatus = 0;
    3fb6:	4c0b      	ldr	r4, [pc, #44]	; (3fe4 <Parser_RxClearBuffer+0x30>)
    3fb8:	2300      	movs	r3, #0
    3fba:	4a0b      	ldr	r2, [pc, #44]	; (3fe8 <Parser_RxClearBuffer+0x34>)
    3fbc:	54a3      	strb	r3, [r4, r2]
    mRxParserCmd.crtWordIdx = 0;
    3fbe:	4a0b      	ldr	r2, [pc, #44]	; (3fec <Parser_RxClearBuffer+0x38>)
    3fc0:	54a3      	strb	r3, [r4, r2]
    mRxParserCmd.crtCmdPos = 0;
    3fc2:	3201      	adds	r2, #1
    3fc4:	52a3      	strh	r3, [r4, r2]
    mRxParserCmd.crtWordPos = 0;
    3fc6:	4a0a      	ldr	r2, [pc, #40]	; (3ff0 <Parser_RxClearBuffer+0x3c>)
    3fc8:	52a3      	strh	r3, [r4, r2]
    
    memset((_PTR)mRxParserCmd.wordLen, 0, PARSER_DEF_CMD_MAX_IDX << 1);
    3fca:	4b0a      	ldr	r3, [pc, #40]	; (3ff4 <Parser_RxClearBuffer+0x40>)
    3fcc:	18e0      	adds	r0, r4, r3
    3fce:	2214      	movs	r2, #20
    3fd0:	2100      	movs	r1, #0
    3fd2:	4d09      	ldr	r5, [pc, #36]	; (3ff8 <Parser_RxClearBuffer+0x44>)
    3fd4:	47a8      	blx	r5
    memset((_PTR)mRxParserCmd.wordStartPos, 0, PARSER_DEF_CMD_MAX_IDX << 1);
    3fd6:	4b09      	ldr	r3, [pc, #36]	; (3ffc <Parser_RxClearBuffer+0x48>)
    3fd8:	18e0      	adds	r0, r4, r3
    3fda:	2214      	movs	r2, #20
    3fdc:	2100      	movs	r1, #0
    3fde:	47a8      	blx	r5
}
    3fe0:	bd70      	pop	{r4, r5, r6, pc}
    3fe2:	46c0      	nop			; (mov r8, r8)
    3fe4:	20001f98 	.word	0x20001f98
    3fe8:	0000024e 	.word	0x0000024e
    3fec:	0000024f 	.word	0x0000024f
    3ff0:	00000252 	.word	0x00000252
    3ff4:	00000226 	.word	0x00000226
    3ff8:	00019ec9 	.word	0x00019ec9
    3ffc:	0000023a 	.word	0x0000023a

00004000 <Parser_TxAddReply>:
    }

}

void Parser_TxAddReply(char* pReplyStr, uint16_t replyStrLen)
{
    4000:	b570      	push	{r4, r5, r6, lr}
    4002:	0005      	movs	r5, r0
    4004:	1e0c      	subs	r4, r1, #0
    uint16_t iCtr = replyStrLen;
	
	/* Check if the length of UART String is can be fit in SIO2HOST TX Buffer */
	while(0 != iCtr)
    4006:	d00f      	beq.n	4028 <Parser_TxAddReply+0x28>
			sio2host_tx((uint8_t *)pReplyStr,(uint8_t)iCtr);
			iCtr = 0;
		}
		else
		{
			sio2host_tx((uint8_t *)pReplyStr, BYTE_VALUE_LEN);
    4008:	4e0a      	ldr	r6, [pc, #40]	; (4034 <Parser_TxAddReply+0x34>)
    400a:	e007      	b.n	401c <Parser_TxAddReply+0x1c>
    400c:	21ff      	movs	r1, #255	; 0xff
    400e:	0028      	movs	r0, r5
    4010:	47b0      	blx	r6
			iCtr -= BYTE_VALUE_LEN;
    4012:	3cff      	subs	r4, #255	; 0xff
    4014:	b2a4      	uxth	r4, r4
			pReplyStr = pReplyStr + BYTE_VALUE_LEN;
    4016:	35ff      	adds	r5, #255	; 0xff
	while(0 != iCtr)
    4018:	2c00      	cmp	r4, #0
    401a:	d005      	beq.n	4028 <Parser_TxAddReply+0x28>
		if(BYTE_VALUE_LEN >= iCtr)
    401c:	2cff      	cmp	r4, #255	; 0xff
    401e:	d8f5      	bhi.n	400c <Parser_TxAddReply+0xc>
			sio2host_tx((uint8_t *)pReplyStr,(uint8_t)iCtr);
    4020:	b2e1      	uxtb	r1, r4
    4022:	0028      	movs	r0, r5
    4024:	4b03      	ldr	r3, [pc, #12]	; (4034 <Parser_TxAddReply+0x34>)
    4026:	4798      	blx	r3
		}
	}
	
    /* Put the delimiter string in UART */
	sio2host_tx((uint8_t *)gpParserLineDelim,strlen(gpParserLineDelim));
    4028:	2102      	movs	r1, #2
    402a:	4803      	ldr	r0, [pc, #12]	; (4038 <Parser_TxAddReply+0x38>)
    402c:	4b01      	ldr	r3, [pc, #4]	; (4034 <Parser_TxAddReply+0x34>)
    402e:	4798      	blx	r3
	
}
    4030:	bd70      	pop	{r4, r5, r6, pc}
    4032:	46c0      	nop			; (mov r8, r8)
    4034:	00007cf5 	.word	0x00007cf5
    4038:	0001fa90 	.word	0x0001fa90

0000403c <Parser_RxAddChar>:
{
    403c:	b570      	push	{r4, r5, r6, lr}
    if(rxChar == '\b')
    403e:	2808      	cmp	r0, #8
    4040:	d047      	beq.n	40d2 <Parser_RxAddChar+0x96>
    if(mRxParserCmd.crtCmdPos < PARSER_DEF_CMD_MAX_LEN - 1)
    4042:	2394      	movs	r3, #148	; 0x94
    4044:	009b      	lsls	r3, r3, #2
    4046:	4a58      	ldr	r2, [pc, #352]	; (41a8 <Parser_RxAddChar+0x16c>)
    4048:	5ad3      	ldrh	r3, [r2, r3]
    404a:	b29b      	uxth	r3, r3
    404c:	2289      	movs	r2, #137	; 0x89
    404e:	0092      	lsls	r2, r2, #2
    4050:	4293      	cmp	r3, r2
    4052:	d900      	bls.n	4056 <Parser_RxAddChar+0x1a>
    4054:	e0a1      	b.n	419a <Parser_RxAddChar+0x15e>
        if(rxChar == ' ')
    4056:	2820      	cmp	r0, #32
    4058:	d100      	bne.n	405c <Parser_RxAddChar+0x20>
    405a:	e073      	b.n	4144 <Parser_RxAddChar+0x108>
            mRxParserCmd.cmd[mRxParserCmd.crtCmdPos ++] = rxChar;
    405c:	4b52      	ldr	r3, [pc, #328]	; (41a8 <Parser_RxAddChar+0x16c>)
    405e:	2194      	movs	r1, #148	; 0x94
    4060:	0089      	lsls	r1, r1, #2
    4062:	5a5a      	ldrh	r2, [r3, r1]
    4064:	b292      	uxth	r2, r2
    4066:	1c54      	adds	r4, r2, #1
    4068:	b2a4      	uxth	r4, r4
    406a:	525c      	strh	r4, [r3, r1]
    406c:	5498      	strb	r0, [r3, r2]
            mRxParserCmd.crtWordPos ++;
    406e:	484f      	ldr	r0, [pc, #316]	; (41ac <Parser_RxAddChar+0x170>)
    4070:	5a1a      	ldrh	r2, [r3, r0]
    4072:	3201      	adds	r2, #1
    4074:	b292      	uxth	r2, r2
    4076:	521a      	strh	r2, [r3, r0]
            if(mRxParserCmd.crtCmdPos >= strlen(gpParserLineDelim))
    4078:	5a5b      	ldrh	r3, [r3, r1]
    407a:	b29b      	uxth	r3, r3
    407c:	2b01      	cmp	r3, #1
    407e:	d959      	bls.n	4134 <Parser_RxAddChar+0xf8>
                    if(mRxParserCmd.cmd[mRxParserCmd.crtCmdPos - iCount] != gpParserLineDelim[strlen(gpParserLineDelim) - iCount])
    4080:	4a49      	ldr	r2, [pc, #292]	; (41a8 <Parser_RxAddChar+0x16c>)
    4082:	5a53      	ldrh	r3, [r2, r1]
    4084:	3b02      	subs	r3, #2
    4086:	5cd3      	ldrb	r3, [r2, r3]
                for(iCount = strlen(gpParserLineDelim); (iCount > 0U) && bIsEndLine; iCount --)
    4088:	2b0d      	cmp	r3, #13
    408a:	d153      	bne.n	4134 <Parser_RxAddChar+0xf8>
                    if(mRxParserCmd.cmd[mRxParserCmd.crtCmdPos - iCount] != gpParserLineDelim[strlen(gpParserLineDelim) - iCount])
    408c:	5a53      	ldrh	r3, [r2, r1]
    408e:	3b01      	subs	r3, #1
    4090:	5cd3      	ldrb	r3, [r2, r3]
            if(bIsEndLine)
    4092:	2b0a      	cmp	r3, #10
    4094:	d14e      	bne.n	4134 <Parser_RxAddChar+0xf8>
                mRxParserCmd.cmd[mRxParserCmd.crtCmdPos - strlen(gpParserLineDelim)] = '\0';
    4096:	0013      	movs	r3, r2
    4098:	000c      	movs	r4, r1
    409a:	5a52      	ldrh	r2, [r2, r1]
    409c:	3a02      	subs	r2, #2
    409e:	2100      	movs	r1, #0
    40a0:	5499      	strb	r1, [r3, r2]
                mRxParserCmd.wordLen[mRxParserCmd.crtWordIdx] = mRxParserCmd.crtWordPos - strlen(gpParserLineDelim);
    40a2:	4d43      	ldr	r5, [pc, #268]	; (41b0 <Parser_RxAddChar+0x174>)
    40a4:	5d5a      	ldrb	r2, [r3, r5]
    40a6:	5a19      	ldrh	r1, [r3, r0]
    40a8:	3902      	subs	r1, #2
    40aa:	b289      	uxth	r1, r1
    40ac:	3211      	adds	r2, #17
    40ae:	32ff      	adds	r2, #255	; 0xff
    40b0:	0052      	lsls	r2, r2, #1
    40b2:	189a      	adds	r2, r3, r2
    40b4:	80d1      	strh	r1, [r2, #6]
                mRxParserCmd.wordStartPos[mRxParserCmd.crtWordIdx] = mRxParserCmd.crtCmdPos - mRxParserCmd.crtWordPos;
    40b6:	5d5a      	ldrb	r2, [r3, r5]
    40b8:	5b19      	ldrh	r1, [r3, r4]
    40ba:	5a18      	ldrh	r0, [r3, r0]
    40bc:	1a09      	subs	r1, r1, r0
    40be:	b289      	uxth	r1, r1
    40c0:	321d      	adds	r2, #29
    40c2:	32ff      	adds	r2, #255	; 0xff
    40c4:	0052      	lsls	r2, r2, #1
    40c6:	189a      	adds	r2, r3, r2
    40c8:	8051      	strh	r1, [r2, #2]
                mRxParserCmd.bCmdStatus = 1;
    40ca:	2101      	movs	r1, #1
    40cc:	4a39      	ldr	r2, [pc, #228]	; (41b4 <Parser_RxAddChar+0x178>)
    40ce:	5499      	strb	r1, [r3, r2]
    40d0:	e030      	b.n	4134 <Parser_RxAddChar+0xf8>
        if(mRxParserCmd.crtCmdPos > 0U)
    40d2:	2394      	movs	r3, #148	; 0x94
    40d4:	009b      	lsls	r3, r3, #2
    40d6:	4a34      	ldr	r2, [pc, #208]	; (41a8 <Parser_RxAddChar+0x16c>)
    40d8:	5ad3      	ldrh	r3, [r2, r3]
    40da:	b29b      	uxth	r3, r3
    40dc:	2b00      	cmp	r3, #0
    40de:	d029      	beq.n	4134 <Parser_RxAddChar+0xf8>
            if(mRxParserCmd.cmd[mRxParserCmd.crtCmdPos - 1] == '\0')
    40e0:	2394      	movs	r3, #148	; 0x94
    40e2:	009b      	lsls	r3, r3, #2
    40e4:	5ad3      	ldrh	r3, [r2, r3]
    40e6:	3b01      	subs	r3, #1
    40e8:	5cd3      	ldrb	r3, [r2, r3]
    40ea:	2b00      	cmp	r3, #0
    40ec:	d123      	bne.n	4136 <Parser_RxAddChar+0xfa>
                mRxParserCmd.crtWordIdx --;
    40ee:	0013      	movs	r3, r2
    40f0:	492f      	ldr	r1, [pc, #188]	; (41b0 <Parser_RxAddChar+0x174>)
    40f2:	5c52      	ldrb	r2, [r2, r1]
    40f4:	3a01      	subs	r2, #1
    40f6:	b2d2      	uxtb	r2, r2
    40f8:	545a      	strb	r2, [r3, r1]
                mRxParserCmd.crtWordPos = mRxParserCmd.wordLen[mRxParserCmd.crtWordIdx];
    40fa:	5c5a      	ldrb	r2, [r3, r1]
    40fc:	3211      	adds	r2, #17
    40fe:	32ff      	adds	r2, #255	; 0xff
    4100:	0052      	lsls	r2, r2, #1
    4102:	189a      	adds	r2, r3, r2
    4104:	88d2      	ldrh	r2, [r2, #6]
    4106:	b292      	uxth	r2, r2
    4108:	4828      	ldr	r0, [pc, #160]	; (41ac <Parser_RxAddChar+0x170>)
    410a:	521a      	strh	r2, [r3, r0]
                mRxParserCmd.wordLen[mRxParserCmd.crtWordIdx] = 0U;
    410c:	5c5a      	ldrb	r2, [r3, r1]
    410e:	3211      	adds	r2, #17
    4110:	32ff      	adds	r2, #255	; 0xff
    4112:	0052      	lsls	r2, r2, #1
    4114:	189a      	adds	r2, r3, r2
    4116:	2000      	movs	r0, #0
    4118:	80d0      	strh	r0, [r2, #6]
                mRxParserCmd.wordStartPos[mRxParserCmd.crtWordIdx] = 0U;
    411a:	5c5a      	ldrb	r2, [r3, r1]
    411c:	321d      	adds	r2, #29
    411e:	32ff      	adds	r2, #255	; 0xff
    4120:	0052      	lsls	r2, r2, #1
    4122:	189b      	adds	r3, r3, r2
    4124:	8058      	strh	r0, [r3, #2]
            mRxParserCmd.crtCmdPos --;
    4126:	4920      	ldr	r1, [pc, #128]	; (41a8 <Parser_RxAddChar+0x16c>)
    4128:	2294      	movs	r2, #148	; 0x94
    412a:	0092      	lsls	r2, r2, #2
    412c:	5a8b      	ldrh	r3, [r1, r2]
    412e:	3b01      	subs	r3, #1
    4130:	b29b      	uxth	r3, r3
    4132:	528b      	strh	r3, [r1, r2]
}
    4134:	bd70      	pop	{r4, r5, r6, pc}
                mRxParserCmd.crtWordPos --;
    4136:	491c      	ldr	r1, [pc, #112]	; (41a8 <Parser_RxAddChar+0x16c>)
    4138:	4a1c      	ldr	r2, [pc, #112]	; (41ac <Parser_RxAddChar+0x170>)
    413a:	5a8b      	ldrh	r3, [r1, r2]
    413c:	3b01      	subs	r3, #1
    413e:	b29b      	uxth	r3, r3
    4140:	528b      	strh	r3, [r1, r2]
    4142:	e7f0      	b.n	4126 <Parser_RxAddChar+0xea>
            if(mRxParserCmd.crtWordIdx < PARSER_DEF_CMD_MAX_IDX - 1)
    4144:	4b1a      	ldr	r3, [pc, #104]	; (41b0 <Parser_RxAddChar+0x174>)
    4146:	4a18      	ldr	r2, [pc, #96]	; (41a8 <Parser_RxAddChar+0x16c>)
    4148:	5cd3      	ldrb	r3, [r2, r3]
    414a:	b2db      	uxtb	r3, r3
    414c:	2b08      	cmp	r3, #8
    414e:	d824      	bhi.n	419a <Parser_RxAddChar+0x15e>
                mRxParserCmd.cmd[mRxParserCmd.crtCmdPos ++] = '\0';
    4150:	0013      	movs	r3, r2
    4152:	2194      	movs	r1, #148	; 0x94
    4154:	0089      	lsls	r1, r1, #2
    4156:	5a52      	ldrh	r2, [r2, r1]
    4158:	b292      	uxth	r2, r2
    415a:	1c50      	adds	r0, r2, #1
    415c:	b280      	uxth	r0, r0
    415e:	5258      	strh	r0, [r3, r1]
    4160:	2500      	movs	r5, #0
    4162:	549d      	strb	r5, [r3, r2]
                mRxParserCmd.wordLen[mRxParserCmd.crtWordIdx] = mRxParserCmd.crtWordPos;
    4164:	4812      	ldr	r0, [pc, #72]	; (41b0 <Parser_RxAddChar+0x174>)
    4166:	5c1a      	ldrb	r2, [r3, r0]
    4168:	4c10      	ldr	r4, [pc, #64]	; (41ac <Parser_RxAddChar+0x170>)
    416a:	5b1e      	ldrh	r6, [r3, r4]
    416c:	b2b6      	uxth	r6, r6
    416e:	3211      	adds	r2, #17
    4170:	32ff      	adds	r2, #255	; 0xff
    4172:	0052      	lsls	r2, r2, #1
    4174:	189a      	adds	r2, r3, r2
    4176:	80d6      	strh	r6, [r2, #6]
                mRxParserCmd.wordStartPos[mRxParserCmd.crtWordIdx] = mRxParserCmd.crtCmdPos - mRxParserCmd.crtWordPos - 1;
    4178:	5c1a      	ldrb	r2, [r3, r0]
    417a:	5a59      	ldrh	r1, [r3, r1]
    417c:	5b1e      	ldrh	r6, [r3, r4]
    417e:	3901      	subs	r1, #1
    4180:	1b89      	subs	r1, r1, r6
    4182:	b289      	uxth	r1, r1
    4184:	321d      	adds	r2, #29
    4186:	32ff      	adds	r2, #255	; 0xff
    4188:	0052      	lsls	r2, r2, #1
    418a:	189a      	adds	r2, r3, r2
    418c:	8051      	strh	r1, [r2, #2]
                mRxParserCmd.crtWordIdx ++;
    418e:	5c1a      	ldrb	r2, [r3, r0]
    4190:	3201      	adds	r2, #1
    4192:	b2d2      	uxtb	r2, r2
    4194:	541a      	strb	r2, [r3, r0]
                mRxParserCmd.crtWordPos = 0;
    4196:	531d      	strh	r5, [r3, r4]
    4198:	e7cc      	b.n	4134 <Parser_RxAddChar+0xf8>
        Parser_RxClearBuffer();
    419a:	4b07      	ldr	r3, [pc, #28]	; (41b8 <Parser_RxAddChar+0x17c>)
    419c:	4798      	blx	r3
        Parser_TxAddReply((char*)gapParserTspStatus[ERR_STATUS_IDX], strlen(gapParserTspStatus[ERR_STATUS_IDX]));
    419e:	2103      	movs	r1, #3
    41a0:	4806      	ldr	r0, [pc, #24]	; (41bc <Parser_RxAddChar+0x180>)
    41a2:	4b07      	ldr	r3, [pc, #28]	; (41c0 <Parser_RxAddChar+0x184>)
    41a4:	4798      	blx	r3
    41a6:	e7c5      	b.n	4134 <Parser_RxAddChar+0xf8>
    41a8:	20001f98 	.word	0x20001f98
    41ac:	00000252 	.word	0x00000252
    41b0:	0000024f 	.word	0x0000024f
    41b4:	0000024e 	.word	0x0000024e
    41b8:	00003fb5 	.word	0x00003fb5
    41bc:	0001fa58 	.word	0x0001fa58
    41c0:	00004001 	.word	0x00004001

000041c4 <Validate_HexValue>:
    "off",
    "on"
};

bool Validate_HexValue(void* pValue)
 {
    41c4:	b570      	push	{r4, r5, r6, lr}
    bool flag = true;
    char* character;

    for(character = pValue; *character; character++)
    41c6:	7803      	ldrb	r3, [r0, #0]
    41c8:	2b00      	cmp	r3, #0
    41ca:	d00e      	beq.n	41ea <Validate_HexValue+0x26>
    41cc:	0004      	movs	r4, r0
    {
        if(isxdigit(*character) == 0)
    41ce:	4e09      	ldr	r6, [pc, #36]	; (41f4 <Validate_HexValue+0x30>)
    41d0:	2544      	movs	r5, #68	; 0x44
    41d2:	47b0      	blx	r6
    41d4:	7823      	ldrb	r3, [r4, #0]
    41d6:	18c0      	adds	r0, r0, r3
    41d8:	7843      	ldrb	r3, [r0, #1]
    41da:	421d      	tst	r5, r3
    41dc:	d007      	beq.n	41ee <Validate_HexValue+0x2a>
    for(character = pValue; *character; character++)
    41de:	3401      	adds	r4, #1
    41e0:	7823      	ldrb	r3, [r4, #0]
    41e2:	2b00      	cmp	r3, #0
    41e4:	d1f5      	bne.n	41d2 <Validate_HexValue+0xe>
    bool flag = true;
    41e6:	2001      	movs	r0, #1
    41e8:	e002      	b.n	41f0 <Validate_HexValue+0x2c>
    41ea:	2001      	movs	r0, #1
    41ec:	e000      	b.n	41f0 <Validate_HexValue+0x2c>
        {
            flag = false;
    41ee:	2000      	movs	r0, #0
            break;
        }
    }

    return flag;
}
    41f0:	bd70      	pop	{r4, r5, r6, pc}
    41f2:	46c0      	nop			; (mov r8, r8)
    41f4:	00019781 	.word	0x00019781

000041f8 <Parser_IntArrayToHexAscii>:

    return retValue;
}

void Parser_IntArrayToHexAscii(uint8_t arrayLen, uint8_t* pInArray, char* pOutHexAscii)
{
    41f8:	b5f0      	push	{r4, r5, r6, r7, lr}
    41fa:	46ce      	mov	lr, r9
    41fc:	4647      	mov	r7, r8
    41fe:	b580      	push	{r7, lr}
    4200:	b083      	sub	sp, #12
    4202:	4680      	mov	r8, r0
    4204:	9201      	str	r2, [sp, #4]
    uint8_t iCtr = 0U;

    for(iCtr = 0; iCtr < arrayLen; iCtr ++)
    4206:	2800      	cmp	r0, #0
    4208:	d019      	beq.n	423e <Parser_IntArrayToHexAscii+0x46>
    420a:	000c      	movs	r4, r1
    420c:	0015      	movs	r5, r2
    420e:	1e47      	subs	r7, r0, #1
    4210:	b2ff      	uxtb	r7, r7
    4212:	3701      	adds	r7, #1
    4214:	19cf      	adds	r7, r1, r7
    {
        itoa(pInArray[iCtr], (char *)&pOutHexAscii[iCtr << 1], 16);
    4216:	4e0f      	ldr	r6, [pc, #60]	; (4254 <Parser_IntArrayToHexAscii+0x5c>)

        if(pInArray[iCtr] <= 15)
        {
            /* Special treatment for figures [0..9]  */
            pOutHexAscii[(iCtr << 1) + 1] = pOutHexAscii[iCtr << 1];
            pOutHexAscii[iCtr << 1] = '0';
    4218:	2330      	movs	r3, #48	; 0x30
    421a:	4699      	mov	r9, r3
    421c:	e003      	b.n	4226 <Parser_IntArrayToHexAscii+0x2e>
    421e:	3401      	adds	r4, #1
    4220:	3502      	adds	r5, #2
    for(iCtr = 0; iCtr < arrayLen; iCtr ++)
    4222:	42bc      	cmp	r4, r7
    4224:	d00b      	beq.n	423e <Parser_IntArrayToHexAscii+0x46>
        itoa(pInArray[iCtr], (char *)&pOutHexAscii[iCtr << 1], 16);
    4226:	7820      	ldrb	r0, [r4, #0]
    4228:	2210      	movs	r2, #16
    422a:	0029      	movs	r1, r5
    422c:	47b0      	blx	r6
        if(pInArray[iCtr] <= 15)
    422e:	7823      	ldrb	r3, [r4, #0]
    4230:	2b0f      	cmp	r3, #15
    4232:	d8f4      	bhi.n	421e <Parser_IntArrayToHexAscii+0x26>
            pOutHexAscii[(iCtr << 1) + 1] = pOutHexAscii[iCtr << 1];
    4234:	782b      	ldrb	r3, [r5, #0]
    4236:	706b      	strb	r3, [r5, #1]
            pOutHexAscii[iCtr << 1] = '0';
    4238:	464b      	mov	r3, r9
    423a:	702b      	strb	r3, [r5, #0]
    423c:	e7ef      	b.n	421e <Parser_IntArrayToHexAscii+0x26>
        }
    }

    pOutHexAscii[(iCtr << 1)] = '\0';
    423e:	4643      	mov	r3, r8
    4240:	005b      	lsls	r3, r3, #1
    4242:	2200      	movs	r2, #0
    4244:	9901      	ldr	r1, [sp, #4]
    4246:	54ca      	strb	r2, [r1, r3]
}
    4248:	b003      	add	sp, #12
    424a:	bc0c      	pop	{r2, r3}
    424c:	4690      	mov	r8, r2
    424e:	4699      	mov	r9, r3
    4250:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4252:	46c0      	nop			; (mov r8, r8)
    4254:	00019751 	.word	0x00019751

00004258 <Validate_Uint8DecAsciiValue>:

bool Validate_Uint8DecAsciiValue(void* pValue, uint8_t* pDecValue)
{
    4258:	b5f0      	push	{r4, r5, r6, r7, lr}
    425a:	b083      	sub	sp, #12
    425c:	0004      	movs	r4, r0
    425e:	9101      	str	r1, [sp, #4]
    bool flag = false;
    char* character;
    uint16_t valueLen = strlen(pValue);
    4260:	4b10      	ldr	r3, [pc, #64]	; (42a4 <Validate_Uint8DecAsciiValue+0x4c>)
    4262:	4798      	blx	r3
    4264:	0006      	movs	r6, r0
    int32_t value = atoi(pValue);
    4266:	0020      	movs	r0, r4
    4268:	4b0f      	ldr	r3, [pc, #60]	; (42a8 <Validate_Uint8DecAsciiValue+0x50>)
    426a:	4798      	blx	r3
    426c:	0007      	movs	r7, r0

    // Maximum 3 ascii characters 0-> 255
    if((valueLen <= 3U) && (value >= 0) && (value <= 255))
    426e:	b2b6      	uxth	r6, r6
    4270:	2e03      	cmp	r6, #3
    4272:	d814      	bhi.n	429e <Validate_Uint8DecAsciiValue+0x46>
    4274:	28ff      	cmp	r0, #255	; 0xff
    4276:	d812      	bhi.n	429e <Validate_Uint8DecAsciiValue+0x46>
    {
        flag = true;

        for(character = pValue; *character; character++)
    4278:	7823      	ldrb	r3, [r4, #0]
    427a:	2b00      	cmp	r3, #0
    427c:	d00b      	beq.n	4296 <Validate_Uint8DecAsciiValue+0x3e>
        {
            if(isdigit(*character) == 0)
    427e:	4d0b      	ldr	r5, [pc, #44]	; (42ac <Validate_Uint8DecAsciiValue+0x54>)
    4280:	2604      	movs	r6, #4
    4282:	47a8      	blx	r5
    4284:	7823      	ldrb	r3, [r4, #0]
    4286:	18c0      	adds	r0, r0, r3
    4288:	7843      	ldrb	r3, [r0, #1]
    428a:	421e      	tst	r6, r3
    428c:	d007      	beq.n	429e <Validate_Uint8DecAsciiValue+0x46>
        for(character = pValue; *character; character++)
    428e:	3401      	adds	r4, #1
    4290:	7823      	ldrb	r3, [r4, #0]
    4292:	2b00      	cmp	r3, #0
    4294:	d1f5      	bne.n	4282 <Validate_Uint8DecAsciiValue+0x2a>
        }
    }

    if(flag)
    {
        *pDecValue = (uint8_t)value;
    4296:	9b01      	ldr	r3, [sp, #4]
    4298:	701f      	strb	r7, [r3, #0]
    429a:	2001      	movs	r0, #1
    429c:	e000      	b.n	42a0 <Validate_Uint8DecAsciiValue+0x48>
        for(character = pValue; *character; character++)
    429e:	2000      	movs	r0, #0
    }

    return flag;
}
    42a0:	b003      	add	sp, #12
    42a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    42a4:	0001a2fd 	.word	0x0001a2fd
    42a8:	000196cd 	.word	0x000196cd
    42ac:	00019781 	.word	0x00019781

000042b0 <ultoa>:

/*
 * \brief Converts String to Un-singed Long Integer
 */ 
char * ultoa(char * str, unsigned long num,  int radix)
{
    42b0:	b5f0      	push	{r4, r5, r6, r7, lr}
    42b2:	46d6      	mov	lr, sl
    42b4:	b500      	push	{lr}
    42b6:	b08e      	sub	sp, #56	; 0x38
    42b8:	9003      	str	r0, [sp, #12]
    42ba:	000c      	movs	r4, r1
    42bc:	9201      	str	r2, [sp, #4]
    42be:	2500      	movs	r5, #0
   int digit;
   int str_loc = 0;

   /*construct a backward string of the number. */
   do {
	   digit = (unsigned long)num % radix;
    42c0:	4b18      	ldr	r3, [pc, #96]	; (4324 <ultoa+0x74>)
    42c2:	469a      	mov	sl, r3
	   if (digit < 10)
	   temp[temp_loc++] = digit + '0';
	   else
	   temp[temp_loc++] = digit - 10 + 'A';
    42c4:	af05      	add	r7, sp, #20
	   num = ((unsigned long)num) / radix;
    42c6:	4e18      	ldr	r6, [pc, #96]	; (4328 <ultoa+0x78>)
    42c8:	e009      	b.n	42de <ultoa+0x2e>
	   temp[temp_loc++] = digit - 10 + 'A';
    42ca:	3137      	adds	r1, #55	; 0x37
    42cc:	55e9      	strb	r1, [r5, r7]
	   num = ((unsigned long)num) / radix;
    42ce:	9901      	ldr	r1, [sp, #4]
    42d0:	0020      	movs	r0, r4
    42d2:	47b0      	blx	r6
    42d4:	0004      	movs	r4, r0
    42d6:	1c6b      	adds	r3, r5, #1
   } while ((unsigned long)num > 0);
    42d8:	2800      	cmp	r0, #0
    42da:	d009      	beq.n	42f0 <ultoa+0x40>
    42dc:	001d      	movs	r5, r3
    42de:	9502      	str	r5, [sp, #8]
	   digit = (unsigned long)num % radix;
    42e0:	9901      	ldr	r1, [sp, #4]
    42e2:	0020      	movs	r0, r4
    42e4:	47d0      	blx	sl
	   if (digit < 10)
    42e6:	2909      	cmp	r1, #9
    42e8:	dcef      	bgt.n	42ca <ultoa+0x1a>
	   temp[temp_loc++] = digit + '0';
    42ea:	3130      	adds	r1, #48	; 0x30
    42ec:	55e9      	strb	r1, [r5, r7]
    42ee:	e7ee      	b.n	42ce <ultoa+0x1e>

   temp_loc--;


   /* now reverse the string. */
   while ( temp_loc >=0 ) {
    42f0:	9b02      	ldr	r3, [sp, #8]
    42f2:	2b00      	cmp	r3, #0
    42f4:	db14      	blt.n	4320 <ultoa+0x70>
    42f6:	ab05      	add	r3, sp, #20
    42f8:	195b      	adds	r3, r3, r5
    42fa:	9a03      	ldr	r2, [sp, #12]
    42fc:	a904      	add	r1, sp, #16
    42fe:	1cc8      	adds	r0, r1, #3
	   /* while there are still chars */
	   str[str_loc++] = temp[temp_loc--];
    4300:	7819      	ldrb	r1, [r3, #0]
    4302:	7011      	strb	r1, [r2, #0]
    4304:	3b01      	subs	r3, #1
    4306:	3201      	adds	r2, #1
   while ( temp_loc >=0 ) {
    4308:	4283      	cmp	r3, r0
    430a:	d1f9      	bne.n	4300 <ultoa+0x50>
    430c:	9e02      	ldr	r6, [sp, #8]
    430e:	3601      	adds	r6, #1
   }
   /* add null termination. */
   str[str_loc] = 0; 
    4310:	2300      	movs	r3, #0
    4312:	9a03      	ldr	r2, [sp, #12]
    4314:	5593      	strb	r3, [r2, r6]

   return str;
}
    4316:	0010      	movs	r0, r2
    4318:	b00e      	add	sp, #56	; 0x38
    431a:	bc04      	pop	{r2}
    431c:	4692      	mov	sl, r2
    431e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   while ( temp_loc >=0 ) {
    4320:	2600      	movs	r6, #0
    4322:	e7f5      	b.n	4310 <ultoa+0x60>
    4324:	0001674d 	.word	0x0001674d
    4328:	00016641 	.word	0x00016641

0000432c <Validate_UintDecAsciiValue>:
{
    432c:	b570      	push	{r4, r5, r6, lr}
    432e:	b084      	sub	sp, #16
    4330:	0005      	movs	r5, r0
    4332:	0016      	movs	r6, r2
    unsigned long value = strtoul(pValue, NULL, 10);
    4334:	220a      	movs	r2, #10
    4336:	2100      	movs	r1, #0
    4338:	4b0a      	ldr	r3, [pc, #40]	; (4364 <Validate_UintDecAsciiValue+0x38>)
    433a:	4798      	blx	r3
    433c:	0004      	movs	r4, r0
    ultoa(buf, value, 10U);
    433e:	220a      	movs	r2, #10
    4340:	0001      	movs	r1, r0
    4342:	a801      	add	r0, sp, #4
    4344:	4b08      	ldr	r3, [pc, #32]	; (4368 <Validate_UintDecAsciiValue+0x3c>)
    4346:	4798      	blx	r3
    if (0 != strcmp((char*)pValue, buf))
    4348:	a901      	add	r1, sp, #4
    434a:	0028      	movs	r0, r5
    434c:	4b07      	ldr	r3, [pc, #28]	; (436c <Validate_UintDecAsciiValue+0x40>)
    434e:	4798      	blx	r3
    4350:	0003      	movs	r3, r0
        flag = false;
    4352:	2000      	movs	r0, #0
    if (value > maxValue)
    4354:	42b4      	cmp	r4, r6
    4356:	d901      	bls.n	435c <Validate_UintDecAsciiValue+0x30>
}
    4358:	b004      	add	sp, #16
    435a:	bd70      	pop	{r4, r5, r6, pc}
    if (0 != strcmp((char*)pValue, buf))
    435c:	4258      	negs	r0, r3
    435e:	4158      	adcs	r0, r3
    4360:	b2c0      	uxtb	r0, r0
    4362:	e7f9      	b.n	4358 <Validate_UintDecAsciiValue+0x2c>
    4364:	0001a609 	.word	0x0001a609
    4368:	000042b1 	.word	0x000042b1
    436c:	0001a275 	.word	0x0001a275

00004370 <stricmp>:

/*
 * \brief Compare Strings without Case Sensitivity
 */ 
int stricmp( char *s1, const char *s2 )
{
    4370:	b5f0      	push	{r4, r5, r6, r7, lr}
    4372:	46de      	mov	lr, fp
    4374:	4657      	mov	r7, sl
    4376:	464e      	mov	r6, r9
    4378:	b5c0      	push	{r6, r7, lr}
    437a:	b082      	sub	sp, #8
    437c:	0004      	movs	r4, r0
    437e:	000e      	movs	r6, r1
	if (s1 == NULL) return s2 == NULL ? 0 : -(*s2);
    4380:	2800      	cmp	r0, #0
    4382:	d006      	beq.n	4392 <stricmp+0x22>
	if (s2 == NULL) return *s1;
    4384:	2900      	cmp	r1, #0
    4386:	d009      	beq.n	439c <stricmp+0x2c>

	char c1, c2;
	while ((c1 = tolower (*s1)) == (c2 = tolower (*s2)))
    4388:	4b1c      	ldr	r3, [pc, #112]	; (43fc <stricmp+0x8c>)
    438a:	469b      	mov	fp, r3
    438c:	2703      	movs	r7, #3
    438e:	469a      	mov	sl, r3
    4390:	e011      	b.n	43b6 <stricmp+0x46>
	if (s1 == NULL) return s2 == NULL ? 0 : -(*s2);
    4392:	2900      	cmp	r1, #0
    4394:	d02f      	beq.n	43f6 <stricmp+0x86>
    4396:	7808      	ldrb	r0, [r1, #0]
    4398:	4240      	negs	r0, r0
    439a:	e026      	b.n	43ea <stricmp+0x7a>
	if (s2 == NULL) return *s1;
    439c:	7800      	ldrb	r0, [r0, #0]
    439e:	e024      	b.n	43ea <stricmp+0x7a>
	while ((c1 = tolower (*s1)) == (c2 = tolower (*s2)))
    43a0:	3520      	adds	r5, #32
    43a2:	9501      	str	r5, [sp, #4]
    43a4:	e00f      	b.n	43c6 <stricmp+0x56>
    43a6:	b2d3      	uxtb	r3, r2
    43a8:	4599      	cmp	r9, r3
    43aa:	d119      	bne.n	43e0 <stricmp+0x70>
	{
		if (*s1 == '\0') break;
    43ac:	7823      	ldrb	r3, [r4, #0]
    43ae:	2b00      	cmp	r3, #0
    43b0:	d016      	beq.n	43e0 <stricmp+0x70>
		++s1; ++s2;
    43b2:	3401      	adds	r4, #1
    43b4:	3601      	adds	r6, #1
	while ((c1 = tolower (*s1)) == (c2 = tolower (*s2)))
    43b6:	7825      	ldrb	r5, [r4, #0]
    43b8:	47d8      	blx	fp
    43ba:	1940      	adds	r0, r0, r5
    43bc:	7843      	ldrb	r3, [r0, #1]
    43be:	403b      	ands	r3, r7
    43c0:	9501      	str	r5, [sp, #4]
    43c2:	2b01      	cmp	r3, #1
    43c4:	d0ec      	beq.n	43a0 <stricmp+0x30>
    43c6:	466b      	mov	r3, sp
    43c8:	791b      	ldrb	r3, [r3, #4]
    43ca:	4699      	mov	r9, r3
    43cc:	7835      	ldrb	r5, [r6, #0]
    43ce:	47d0      	blx	sl
    43d0:	1940      	adds	r0, r0, r5
    43d2:	7843      	ldrb	r3, [r0, #1]
    43d4:	403b      	ands	r3, r7
    43d6:	002a      	movs	r2, r5
    43d8:	2b01      	cmp	r3, #1
    43da:	d1e4      	bne.n	43a6 <stricmp+0x36>
    43dc:	3220      	adds	r2, #32
    43de:	e7e2      	b.n	43a6 <stricmp+0x36>
	}

	return c1 - c2;
    43e0:	20ff      	movs	r0, #255	; 0xff
    43e2:	9f01      	ldr	r7, [sp, #4]
    43e4:	4007      	ands	r7, r0
    43e6:	4010      	ands	r0, r2
    43e8:	1a38      	subs	r0, r7, r0
}
    43ea:	b002      	add	sp, #8
    43ec:	bc1c      	pop	{r2, r3, r4}
    43ee:	4691      	mov	r9, r2
    43f0:	469a      	mov	sl, r3
    43f2:	46a3      	mov	fp, r4
    43f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (s1 == NULL) return s2 == NULL ? 0 : -(*s2);
    43f6:	2000      	movs	r0, #0
    43f8:	e7f7      	b.n	43ea <stricmp+0x7a>
    43fa:	46c0      	nop			; (mov r8, r8)
    43fc:	00019781 	.word	0x00019781

00004400 <Validate_OnOffAsciiValue>:
{
    4400:	b510      	push	{r4, lr}
    4402:	0004      	movs	r4, r0
    if(0U == stricmp(pValue, gapParseOnOff[OFF_STR_IDX]))
    4404:	4908      	ldr	r1, [pc, #32]	; (4428 <Validate_OnOffAsciiValue+0x28>)
    4406:	4b09      	ldr	r3, [pc, #36]	; (442c <Validate_OnOffAsciiValue+0x2c>)
    4408:	4798      	blx	r3
        result = OFF_STR_IDX;
    440a:	2300      	movs	r3, #0
    if(0U == stricmp(pValue, gapParseOnOff[OFF_STR_IDX]))
    440c:	2800      	cmp	r0, #0
    440e:	d101      	bne.n	4414 <Validate_OnOffAsciiValue+0x14>
}
    4410:	0018      	movs	r0, r3
    4412:	bd10      	pop	{r4, pc}
    else if (0U == stricmp(pValue, gapParseOnOff[ON_STR_IDX]))
    4414:	4906      	ldr	r1, [pc, #24]	; (4430 <Validate_OnOffAsciiValue+0x30>)
    4416:	0020      	movs	r0, r4
    4418:	4b04      	ldr	r3, [pc, #16]	; (442c <Validate_OnOffAsciiValue+0x2c>)
    441a:	4798      	blx	r3
        result = ON_STR_IDX;
    441c:	0003      	movs	r3, r0
    441e:	1e58      	subs	r0, r3, #1
    4420:	4183      	sbcs	r3, r0
    4422:	3301      	adds	r3, #1
    4424:	e7f4      	b.n	4410 <Validate_OnOffAsciiValue+0x10>
    4426:	46c0      	nop			; (mov r8, r8)
    4428:	0001fa24 	.word	0x0001fa24
    442c:	00004371 	.word	0x00004371
    4430:	0001fa28 	.word	0x0001fa28

00004434 <Validate_Str1Str2AsciiValue>:
{
    4434:	b570      	push	{r4, r5, r6, lr}
    4436:	0004      	movs	r4, r0
    4438:	0015      	movs	r5, r2
    if(0U == stricmp(pValue, pStr1))
    443a:	4b08      	ldr	r3, [pc, #32]	; (445c <Validate_Str1Str2AsciiValue+0x28>)
    443c:	4798      	blx	r3
        result = FIRST_STR_IDX;
    443e:	2300      	movs	r3, #0
    if(0U == stricmp(pValue, pStr1))
    4440:	2800      	cmp	r0, #0
    4442:	d101      	bne.n	4448 <Validate_Str1Str2AsciiValue+0x14>
}
    4444:	0018      	movs	r0, r3
    4446:	bd70      	pop	{r4, r5, r6, pc}
    else if (0U == stricmp(pValue, pStr2))
    4448:	0029      	movs	r1, r5
    444a:	0020      	movs	r0, r4
    444c:	4b03      	ldr	r3, [pc, #12]	; (445c <Validate_Str1Str2AsciiValue+0x28>)
    444e:	4798      	blx	r3
        result = SECOND_STR_IDX;
    4450:	0003      	movs	r3, r0
    4452:	1e58      	subs	r0, r3, #1
    4454:	4183      	sbcs	r3, r0
    4456:	3301      	adds	r3, #1
    4458:	e7f4      	b.n	4444 <Validate_Str1Str2AsciiValue+0x10>
    445a:	46c0      	nop			; (mov r8, r8)
    445c:	00004371 	.word	0x00004371

00004460 <xtoi>:

/*
 * \brief Converts the input string consisting of hexadecimal digits into an integer value
 */ 
int xtoi(char *c)
{
    4460:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4462:	46ce      	mov	lr, r9
    4464:	4647      	mov	r7, r8
    4466:	b580      	push	{r7, lr}
    4468:	0007      	movs	r7, r0
  size_t szlen = strlen(c);
    446a:	4b16      	ldr	r3, [pc, #88]	; (44c4 <xtoi+0x64>)
    446c:	4798      	blx	r3
  int idx, ptr, factor,result =0;

  if(szlen > 0){
    446e:	3801      	subs	r0, #1
  int idx, ptr, factor,result =0;
    4470:	2600      	movs	r6, #0
  if(szlen > 0){
    4472:	2807      	cmp	r0, #7
    4474:	d821      	bhi.n	44ba <xtoi+0x5a>
    if(szlen > 8) return 0;
    result = 0;
    factor = 1;

    for(idx = szlen-1; idx >= 0; --idx){
    4476:	1e04      	subs	r4, r0, #0
    4478:	db1c      	blt.n	44b4 <xtoi+0x54>
    447a:	2501      	movs	r5, #1
    if(isxdigit( *(c+idx))){
    447c:	4b12      	ldr	r3, [pc, #72]	; (44c8 <xtoi+0x68>)
    447e:	4699      	mov	r9, r3
    4480:	2344      	movs	r3, #68	; 0x44
    4482:	4698      	mov	r8, r3
    4484:	e00a      	b.n	449c <xtoi+0x3c>
	if( *(c + idx) >= 97){
	  ptr = ( *(c + idx) - 97) + 10;
	}else if( *(c + idx) >= 65){
	  ptr = ( *(c + idx) - 65) + 10;
	}else{
	  ptr = *(c + idx) - 48;
    4486:	001a      	movs	r2, r3
    4488:	3a30      	subs	r2, #48	; 0x30
	}else if( *(c + idx) >= 65){
    448a:	2b40      	cmp	r3, #64	; 0x40
    448c:	d901      	bls.n	4492 <xtoi+0x32>
	  ptr = ( *(c + idx) - 65) + 10;
    448e:	3b37      	subs	r3, #55	; 0x37
    4490:	001a      	movs	r2, r3
	}
	result += (ptr * factor);
    4492:	436a      	muls	r2, r5
    4494:	18b6      	adds	r6, r6, r2
	factor *= 16;
    4496:	012d      	lsls	r5, r5, #4
    for(idx = szlen-1; idx >= 0; --idx){
    4498:	3c01      	subs	r4, #1
    449a:	d40e      	bmi.n	44ba <xtoi+0x5a>
    if(isxdigit( *(c+idx))){
    449c:	47c8      	blx	r9
    449e:	5d3b      	ldrb	r3, [r7, r4]
    44a0:	18c0      	adds	r0, r0, r3
    44a2:	7842      	ldrb	r2, [r0, #1]
    44a4:	4641      	mov	r1, r8
    44a6:	4211      	tst	r1, r2
    44a8:	d006      	beq.n	44b8 <xtoi+0x58>
	if( *(c + idx) >= 97){
    44aa:	2b60      	cmp	r3, #96	; 0x60
    44ac:	d9eb      	bls.n	4486 <xtoi+0x26>
	  ptr = ( *(c + idx) - 97) + 10;
    44ae:	3b57      	subs	r3, #87	; 0x57
    44b0:	001a      	movs	r2, r3
    44b2:	e7ee      	b.n	4492 <xtoi+0x32>
    result = 0;
    44b4:	2600      	movs	r6, #0
    44b6:	e000      	b.n	44ba <xtoi+0x5a>
    }else{
		return 4;
    44b8:	2604      	movs	r6, #4
    }
    }
  }

  return result;
    44ba:	0030      	movs	r0, r6
    44bc:	bc0c      	pop	{r2, r3}
    44be:	4690      	mov	r8, r2
    44c0:	4699      	mov	r9, r3
    44c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    44c4:	0001a2fd 	.word	0x0001a2fd
    44c8:	00019781 	.word	0x00019781

000044cc <Parser_HexAsciiToInt>:
{
    44cc:	b5f0      	push	{r4, r5, r6, r7, lr}
    44ce:	46de      	mov	lr, fp
    44d0:	4657      	mov	r7, sl
    44d2:	464e      	mov	r6, r9
    44d4:	4645      	mov	r5, r8
    44d6:	b5e0      	push	{r5, r6, r7, lr}
    44d8:	b083      	sub	sp, #12
    44da:	0004      	movs	r4, r0
    44dc:	000f      	movs	r7, r1
    44de:	4690      	mov	r8, r2
    uint16_t rxHexAsciiLen = strlen(pInHexAscii);
    44e0:	0008      	movs	r0, r1
    44e2:	4b1f      	ldr	r3, [pc, #124]	; (4560 <Parser_HexAsciiToInt+0x94>)
    44e4:	4798      	blx	r3
    44e6:	b283      	uxth	r3, r0
    uint16_t jCtr = rxHexAsciiLen >> 1;
    44e8:	085d      	lsrs	r5, r3, #1
    if(rxHexAsciiLen % 2 == 0)
    44ea:	07da      	lsls	r2, r3, #31
    44ec:	d401      	bmi.n	44f2 <Parser_HexAsciiToInt+0x26>
        jCtr --;
    44ee:	3d01      	subs	r5, #1
    44f0:	b2ad      	uxth	r5, r5
    uint8_t retValue = 0;
    44f2:	2000      	movs	r0, #0
    if(hexAsciiLen == rxHexAsciiLen)
    44f4:	42a3      	cmp	r3, r4
    44f6:	d006      	beq.n	4506 <Parser_HexAsciiToInt+0x3a>
}
    44f8:	b003      	add	sp, #12
    44fa:	bc3c      	pop	{r2, r3, r4, r5}
    44fc:	4690      	mov	r8, r2
    44fe:	4699      	mov	r9, r3
    4500:	46a2      	mov	sl, r4
    4502:	46ab      	mov	fp, r5
    4504:	bdf0      	pop	{r4, r5, r6, r7, pc}
        while(rxHexAsciiLen > 0)
    4506:	2c00      	cmp	r4, #0
    4508:	d027      	beq.n	455a <Parser_HexAsciiToInt+0x8e>
                tempBuff[iCtr] = *(((char*)pInHexAscii) + (rxHexAsciiLen - 2));
    450a:	ae01      	add	r6, sp, #4
            tempBuff[iCtr] = '\0';
    450c:	2300      	movs	r3, #0
    450e:	469a      	mov	sl, r3
            *(pOutInt + jCtr) = xtoi(tempBuff); 
    4510:	4b14      	ldr	r3, [pc, #80]	; (4564 <Parser_HexAsciiToInt+0x98>)
    4512:	4699      	mov	r9, r3
    4514:	e013      	b.n	453e <Parser_HexAsciiToInt+0x72>
                tempBuff[iCtr] = '0';
    4516:	2330      	movs	r3, #48	; 0x30
    4518:	7033      	strb	r3, [r6, #0]
                tempBuff[iCtr] = *(((char*)pInHexAscii) + (rxHexAsciiLen - 1));
    451a:	193b      	adds	r3, r7, r4
    451c:	3b01      	subs	r3, #1
    451e:	781b      	ldrb	r3, [r3, #0]
    4520:	7073      	strb	r3, [r6, #1]
                rxHexAsciiLen --;
    4522:	3c01      	subs	r4, #1
    4524:	b2a4      	uxth	r4, r4
            tempBuff[iCtr] = '\0';
    4526:	4653      	mov	r3, sl
    4528:	70b3      	strb	r3, [r6, #2]
            *(pOutInt + jCtr) = xtoi(tempBuff); 
    452a:	46ab      	mov	fp, r5
    452c:	44c3      	add	fp, r8
    452e:	0030      	movs	r0, r6
    4530:	47c8      	blx	r9
    4532:	465b      	mov	r3, fp
    4534:	7018      	strb	r0, [r3, #0]
            jCtr --;
    4536:	3d01      	subs	r5, #1
    4538:	b2ad      	uxth	r5, r5
        while(rxHexAsciiLen > 0)
    453a:	2c00      	cmp	r4, #0
    453c:	d00b      	beq.n	4556 <Parser_HexAsciiToInt+0x8a>
            if(rxHexAsciiLen >= 2U)
    453e:	2c01      	cmp	r4, #1
    4540:	d9e9      	bls.n	4516 <Parser_HexAsciiToInt+0x4a>
                tempBuff[iCtr] = *(((char*)pInHexAscii) + (rxHexAsciiLen - 2));
    4542:	193b      	adds	r3, r7, r4
    4544:	1e9a      	subs	r2, r3, #2
    4546:	7812      	ldrb	r2, [r2, #0]
    4548:	7032      	strb	r2, [r6, #0]
                tempBuff[iCtr] = *(((char*)pInHexAscii) + (rxHexAsciiLen - 1));
    454a:	3b01      	subs	r3, #1
    454c:	781b      	ldrb	r3, [r3, #0]
    454e:	7073      	strb	r3, [r6, #1]
                rxHexAsciiLen -= 2U;
    4550:	3c02      	subs	r4, #2
    4552:	b2a4      	uxth	r4, r4
    4554:	e7e7      	b.n	4526 <Parser_HexAsciiToInt+0x5a>
        retValue = 1;
    4556:	2001      	movs	r0, #1
    4558:	e7ce      	b.n	44f8 <Parser_HexAsciiToInt+0x2c>
    455a:	2001      	movs	r0, #1
    455c:	e7cc      	b.n	44f8 <Parser_HexAsciiToInt+0x2c>
    455e:	46c0      	nop			; (mov r8, r8)
    4560:	0001a2fd 	.word	0x0001a2fd
    4564:	00004461 	.word	0x00004461

00004568 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
    4568:	b570      	push	{r4, r5, r6, lr}
	cycles_per_ms = system_gclk_gen_get_hz(0);
    456a:	2000      	movs	r0, #0
    456c:	4b08      	ldr	r3, [pc, #32]	; (4590 <delay_init+0x28>)
    456e:	4798      	blx	r3
    4570:	0005      	movs	r5, r0
	cycles_per_ms /= 1000;
    4572:	4c08      	ldr	r4, [pc, #32]	; (4594 <delay_init+0x2c>)
    4574:	21fa      	movs	r1, #250	; 0xfa
    4576:	0089      	lsls	r1, r1, #2
    4578:	47a0      	blx	r4
    457a:	4b07      	ldr	r3, [pc, #28]	; (4598 <delay_init+0x30>)
    457c:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
    457e:	4907      	ldr	r1, [pc, #28]	; (459c <delay_init+0x34>)
    4580:	0028      	movs	r0, r5
    4582:	47a0      	blx	r4
    4584:	4b06      	ldr	r3, [pc, #24]	; (45a0 <delay_init+0x38>)
    4586:	6018      	str	r0, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
    4588:	2205      	movs	r2, #5
    458a:	4b06      	ldr	r3, [pc, #24]	; (45a4 <delay_init+0x3c>)
    458c:	601a      	str	r2, [r3, #0]
}
    458e:	bd70      	pop	{r4, r5, r6, pc}
    4590:	000071e9 	.word	0x000071e9
    4594:	00016641 	.word	0x00016641
    4598:	2000000c 	.word	0x2000000c
    459c:	000f4240 	.word	0x000f4240
    45a0:	20000010 	.word	0x20000010
    45a4:	e000e010 	.word	0xe000e010

000045a8 <delay_cycles_us>:
 *
 * \param n  Number of microseconds to wait
 */
void delay_cycles_us(
		uint32_t n)
{
    45a8:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 10u */
		delay_cycles(cycles_per_us);
    45aa:	4b08      	ldr	r3, [pc, #32]	; (45cc <delay_cycles_us+0x24>)
    45ac:	681c      	ldr	r4, [r3, #0]
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
		SysTick->LOAD = n;
    45ae:	4a08      	ldr	r2, [pc, #32]	; (45d0 <delay_cycles_us+0x28>)
		SysTick->VAL = 0;
    45b0:	2500      	movs	r5, #0

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    45b2:	2180      	movs	r1, #128	; 0x80
    45b4:	0249      	lsls	r1, r1, #9
	while (n--) {
    45b6:	3801      	subs	r0, #1
    45b8:	d307      	bcc.n	45ca <delay_cycles_us+0x22>
	if (n > 0) {
    45ba:	2c00      	cmp	r4, #0
    45bc:	d0fb      	beq.n	45b6 <delay_cycles_us+0xe>
		SysTick->LOAD = n;
    45be:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
    45c0:	6095      	str	r5, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    45c2:	6813      	ldr	r3, [r2, #0]
    45c4:	420b      	tst	r3, r1
    45c6:	d0fc      	beq.n	45c2 <delay_cycles_us+0x1a>
    45c8:	e7f5      	b.n	45b6 <delay_cycles_us+0xe>
	}
}
    45ca:	bd30      	pop	{r4, r5, pc}
    45cc:	20000010 	.word	0x20000010
    45d0:	e000e010 	.word	0xe000e010

000045d4 <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
    45d4:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
    45d6:	4b08      	ldr	r3, [pc, #32]	; (45f8 <delay_cycles_ms+0x24>)
    45d8:	681c      	ldr	r4, [r3, #0]
		SysTick->LOAD = n;
    45da:	4a08      	ldr	r2, [pc, #32]	; (45fc <delay_cycles_ms+0x28>)
		SysTick->VAL = 0;
    45dc:	2500      	movs	r5, #0
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    45de:	2180      	movs	r1, #128	; 0x80
    45e0:	0249      	lsls	r1, r1, #9
	while (n--) {
    45e2:	3801      	subs	r0, #1
    45e4:	d307      	bcc.n	45f6 <delay_cycles_ms+0x22>
	if (n > 0) {
    45e6:	2c00      	cmp	r4, #0
    45e8:	d0fb      	beq.n	45e2 <delay_cycles_ms+0xe>
		SysTick->LOAD = n;
    45ea:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
    45ec:	6095      	str	r5, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    45ee:	6813      	ldr	r3, [r2, #0]
    45f0:	420b      	tst	r3, r1
    45f2:	d0fc      	beq.n	45ee <delay_cycles_ms+0x1a>
    45f4:	e7f5      	b.n	45e2 <delay_cycles_ms+0xe>
	}
}
    45f6:	bd30      	pop	{r4, r5, pc}
    45f8:	2000000c 	.word	0x2000000c
    45fc:	e000e010 	.word	0xe000e010

00004600 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
    4600:	4b0c      	ldr	r3, [pc, #48]	; (4634 <cpu_irq_enter_critical+0x34>)
    4602:	681b      	ldr	r3, [r3, #0]
    4604:	2b00      	cmp	r3, #0
    4606:	d106      	bne.n	4616 <cpu_irq_enter_critical+0x16>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    4608:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
    460c:	2b00      	cmp	r3, #0
    460e:	d007      	beq.n	4620 <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    4610:	2200      	movs	r2, #0
    4612:	4b09      	ldr	r3, [pc, #36]	; (4638 <cpu_irq_enter_critical+0x38>)
    4614:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    4616:	4a07      	ldr	r2, [pc, #28]	; (4634 <cpu_irq_enter_critical+0x34>)
    4618:	6813      	ldr	r3, [r2, #0]
    461a:	3301      	adds	r3, #1
    461c:	6013      	str	r3, [r2, #0]
}
    461e:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
    4620:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    4622:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    4626:	2200      	movs	r2, #0
    4628:	4b04      	ldr	r3, [pc, #16]	; (463c <cpu_irq_enter_critical+0x3c>)
    462a:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    462c:	3201      	adds	r2, #1
    462e:	4b02      	ldr	r3, [pc, #8]	; (4638 <cpu_irq_enter_critical+0x38>)
    4630:	701a      	strb	r2, [r3, #0]
    4632:	e7f0      	b.n	4616 <cpu_irq_enter_critical+0x16>
    4634:	20000b58 	.word	0x20000b58
    4638:	20000b5c 	.word	0x20000b5c
    463c:	20000014 	.word	0x20000014

00004640 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    4640:	4b08      	ldr	r3, [pc, #32]	; (4664 <cpu_irq_leave_critical+0x24>)
    4642:	681a      	ldr	r2, [r3, #0]
    4644:	3a01      	subs	r2, #1
    4646:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    4648:	681b      	ldr	r3, [r3, #0]
    464a:	2b00      	cmp	r3, #0
    464c:	d109      	bne.n	4662 <cpu_irq_leave_critical+0x22>
    464e:	4b06      	ldr	r3, [pc, #24]	; (4668 <cpu_irq_leave_critical+0x28>)
    4650:	781b      	ldrb	r3, [r3, #0]
    4652:	2b00      	cmp	r3, #0
    4654:	d005      	beq.n	4662 <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
    4656:	2201      	movs	r2, #1
    4658:	4b04      	ldr	r3, [pc, #16]	; (466c <cpu_irq_leave_critical+0x2c>)
    465a:	701a      	strb	r2, [r3, #0]
    465c:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    4660:	b662      	cpsie	i
	}
}
    4662:	4770      	bx	lr
    4664:	20000b58 	.word	0x20000b58
    4668:	20000b5c 	.word	0x20000b5c
    466c:	20000014 	.word	0x20000014

00004670 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
    4670:	b5f0      	push	{r4, r5, r6, r7, lr}
    4672:	46c6      	mov	lr, r8
    4674:	b500      	push	{lr}
    4676:	b082      	sub	sp, #8
    4678:	ac01      	add	r4, sp, #4
    467a:	2601      	movs	r6, #1
    467c:	7066      	strb	r6, [r4, #1]
	config->powersave  = false;
    467e:	2700      	movs	r7, #0
    4680:	70a7      	strb	r7, [r4, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    4682:	7026      	strb	r6, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
    4684:	0021      	movs	r1, r4
    4686:	2013      	movs	r0, #19
    4688:	4d24      	ldr	r5, [pc, #144]	; (471c <system_board_init+0xac>)
    468a:	47a8      	blx	r5
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    468c:	4b24      	ldr	r3, [pc, #144]	; (4720 <system_board_init+0xb0>)
    468e:	4698      	mov	r8, r3
    4690:	2380      	movs	r3, #128	; 0x80
    4692:	031b      	lsls	r3, r3, #12
    4694:	4642      	mov	r2, r8
    4696:	6193      	str	r3, [r2, #24]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);
	
	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    4698:	7026      	strb	r6, [r4, #0]
	port_pin_set_config(LED_1_PIN, &pin_conf);
    469a:	0021      	movs	r1, r4
    469c:	2012      	movs	r0, #18
    469e:	47a8      	blx	r5
    46a0:	2380      	movs	r3, #128	; 0x80
    46a2:	02db      	lsls	r3, r3, #11
    46a4:	4642      	mov	r2, r8
    46a6:	6193      	str	r3, [r2, #24]
	port_pin_set_output_level(LED_1_PIN, LED_1_INACTIVE);
#ifdef RFSWITCH_ENABLE
	/* Configure RFSWITCH as output */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    46a8:	7026      	strb	r6, [r4, #0]
	port_pin_set_config(RF_SWITCH_PIN, &pin_conf);
    46aa:	0021      	movs	r1, r4
    46ac:	200d      	movs	r0, #13
    46ae:	47a8      	blx	r5
	} else {
		port_base->OUTCLR.reg = pin_mask;
    46b0:	2380      	movs	r3, #128	; 0x80
    46b2:	019b      	lsls	r3, r3, #6
    46b4:	4642      	mov	r2, r8
    46b6:	6153      	str	r3, [r2, #20]
	port_pin_set_output_level(RF_SWITCH_PIN, RF_SWITCH_INACTIVE);	
#endif

#ifdef TCXO_ENABLE
	/* Configure TXPO PWR as output */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    46b8:	7026      	strb	r6, [r4, #0]
	port_pin_set_config(TCXO_PWR_PIN, &pin_conf);
    46ba:	0021      	movs	r1, r4
    46bc:	2009      	movs	r0, #9
    46be:	47a8      	blx	r5
    46c0:	2380      	movs	r3, #128	; 0x80
    46c2:	009b      	lsls	r3, r3, #2
    46c4:	4642      	mov	r2, r8
    46c6:	6153      	str	r3, [r2, #20]
	port_pin_set_output_level(TCXO_PWR_PIN, TCXO_PWR_INACTIVE);
#endif
	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
    46c8:	7027      	strb	r7, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
    46ca:	7066      	strb	r6, [r4, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
    46cc:	0021      	movs	r1, r4
    46ce:	201c      	movs	r0, #28
    46d0:	47a8      	blx	r5
	#define AD3_PIN PIN_PA27
	#define AD2_PIN PIN_PA08
	#define AD1_PIN PIN_PA07

	//This pin is uset for uart logging to nRF52840 from nRF9160. If USB is set up this can be received here and sent over USB
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
    46d2:	7027      	strb	r7, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
    46d4:	7066      	strb	r6, [r4, #1]
	port_pin_set_config(PIN_PA06, &pin_conf);
    46d6:	0021      	movs	r1, r4
    46d8:	2006      	movs	r0, #6
    46da:	47a8      	blx	r5
	config->direction  = PORT_PIN_DIR_INPUT;
    46dc:	7027      	strb	r7, [r4, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    46de:	7066      	strb	r6, [r4, #1]
	config->powersave  = false;
    46e0:	70a7      	strb	r7, [r4, #2]
#ifdef ADDRESS_SWITCH_ENABLE 
	port_get_config_defaults(&pin_conf);
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
	pin_conf.input_pull = PORT_PIN_PULL_UP;
	
	port_pin_set_config(AD1_PIN, &pin_conf);
    46e2:	0021      	movs	r1, r4
    46e4:	2007      	movs	r0, #7
    46e6:	47a8      	blx	r5
	port_pin_set_config(AD2_PIN, &pin_conf);
    46e8:	0021      	movs	r1, r4
    46ea:	2008      	movs	r0, #8
    46ec:	47a8      	blx	r5
	port_pin_set_config(AD3_PIN, &pin_conf);
    46ee:	0021      	movs	r1, r4
    46f0:	201b      	movs	r0, #27
    46f2:	47a8      	blx	r5
	port_pin_set_config(AD4_PIN, &pin_conf);
    46f4:	0021      	movs	r1, r4
    46f6:	2012      	movs	r0, #18
    46f8:	47a8      	blx	r5
	port_pin_set_config(AD5_PIN, &pin_conf);
    46fa:	0021      	movs	r1, r4
    46fc:	2013      	movs	r0, #19
    46fe:	47a8      	blx	r5
	port_pin_set_config(AD6_PIN, &pin_conf);
    4700:	0021      	movs	r1, r4
    4702:	200f      	movs	r0, #15
    4704:	47a8      	blx	r5
	port_pin_set_config(AD7_PIN, &pin_conf);
    4706:	0021      	movs	r1, r4
    4708:	201c      	movs	r0, #28
    470a:	47a8      	blx	r5
	port_pin_set_config(AD8_PIN, &pin_conf);
    470c:	0021      	movs	r1, r4
    470e:	200e      	movs	r0, #14
    4710:	47a8      	blx	r5
	
#endif
}
    4712:	b002      	add	sp, #8
    4714:	bc04      	pop	{r2}
    4716:	4690      	mov	r8, r2
    4718:	bdf0      	pop	{r4, r5, r6, r7, pc}
    471a:	46c0      	nop			; (mov r8, r8)
    471c:	00004f35 	.word	0x00004f35
    4720:	40002800 	.word	0x40002800

00004724 <ADC_Handler>:
		}

	MREPEAT(ADC_INST_NUM, _ADC_INTERRUPT_HANDLER, 0)
#else
void ADC_Handler(void)
{
    4724:	b570      	push	{r4, r5, r6, lr}
	struct adc_module *module = _adc_instances[instance];
    4726:	4b2f      	ldr	r3, [pc, #188]	; (47e4 <ADC_Handler+0xc0>)
    4728:	681c      	ldr	r4, [r3, #0]
	uint32_t flags = module->hw->INTFLAG.reg & module->hw->INTENSET.reg;
    472a:	6823      	ldr	r3, [r4, #0]
    472c:	799a      	ldrb	r2, [r3, #6]
    472e:	795d      	ldrb	r5, [r3, #5]
    4730:	4015      	ands	r5, r2
	if (flags & ADC_INTFLAG_RESRDY) {
    4732:	07ea      	lsls	r2, r5, #31
    4734:	d52a      	bpl.n	478c <ADC_Handler+0x68>
		module->hw->INTFLAG.reg = ADC_INTFLAG_RESRDY;
    4736:	2201      	movs	r2, #1
    4738:	719a      	strb	r2, [r3, #6]
		*(module->job_buffer++) = module->hw->RESULT.reg;
    473a:	6962      	ldr	r2, [r4, #20]
    473c:	1c93      	adds	r3, r2, #2
    473e:	6163      	str	r3, [r4, #20]
    4740:	6823      	ldr	r3, [r4, #0]
    4742:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
    4744:	b29b      	uxth	r3, r3
    4746:	8013      	strh	r3, [r2, #0]
		if (--module->remaining_conversions > 0) {
    4748:	8b23      	ldrh	r3, [r4, #24]
    474a:	3b01      	subs	r3, #1
    474c:	b29b      	uxth	r3, r3
    474e:	8323      	strh	r3, [r4, #24]
    4750:	2b00      	cmp	r3, #0
    4752:	d015      	beq.n	4780 <ADC_Handler+0x5c>
			if (module->software_trigger == true
    4754:	7f63      	ldrb	r3, [r4, #29]
    4756:	2b00      	cmp	r3, #0
    4758:	d018      	beq.n	478c <ADC_Handler+0x68>
				&& (!(module->hw->SEQSTATUS.reg & ADC_SEQSTATUS_SEQBUSY))) {
    475a:	6822      	ldr	r2, [r4, #0]
    475c:	79d3      	ldrb	r3, [r2, #7]
    475e:	b25b      	sxtb	r3, r3
    4760:	2b00      	cmp	r3, #0
    4762:	db13      	blt.n	478c <ADC_Handler+0x68>
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;

	if (adc_module->SYNCBUSY.reg) {
    4764:	8c13      	ldrh	r3, [r2, #32]
    4766:	b29b      	uxth	r3, r3
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;

	while (adc_is_syncing(module_inst)) {
    4768:	2b00      	cmp	r3, #0
    476a:	d1fb      	bne.n	4764 <ADC_Handler+0x40>
		/* Wait for synchronization */
	}

	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
    476c:	7e13      	ldrb	r3, [r2, #24]
    476e:	2102      	movs	r1, #2
    4770:	430b      	orrs	r3, r1
    4772:	7613      	strb	r3, [r2, #24]
	Adc *const adc_module = module_inst->hw;
    4774:	6822      	ldr	r2, [r4, #0]
	if (adc_module->SYNCBUSY.reg) {
    4776:	8c13      	ldrh	r3, [r2, #32]
    4778:	b29b      	uxth	r3, r3

	while (adc_is_syncing(module_inst)) {
    477a:	2b00      	cmp	r3, #0
    477c:	d1fb      	bne.n	4776 <ADC_Handler+0x52>
    477e:	e005      	b.n	478c <ADC_Handler+0x68>
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
	/* Enable interrupt */
	adc_module->INTENCLR.reg = interrupt;
    4780:	2301      	movs	r3, #1
    4782:	6822      	ldr	r2, [r4, #0]
    4784:	7113      	strb	r3, [r2, #4]
			if (module->job_status == STATUS_BUSY) {
    4786:	7f23      	ldrb	r3, [r4, #28]
    4788:	2b05      	cmp	r3, #5
    478a:	d016      	beq.n	47ba <ADC_Handler+0x96>
	if (flags & ADC_INTFLAG_WINMON) {
    478c:	076b      	lsls	r3, r5, #29
    478e:	d508      	bpl.n	47a2 <ADC_Handler+0x7e>
		module->hw->INTFLAG.reg = ADC_INTFLAG_WINMON;
    4790:	2304      	movs	r3, #4
    4792:	6822      	ldr	r2, [r4, #0]
    4794:	7193      	strb	r3, [r2, #6]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_WINDOW)) &&
    4796:	7ee3      	ldrb	r3, [r4, #27]
    4798:	079b      	lsls	r3, r3, #30
    479a:	d502      	bpl.n	47a2 <ADC_Handler+0x7e>
    479c:	7ea3      	ldrb	r3, [r4, #26]
    479e:	079b      	lsls	r3, r3, #30
    47a0:	d417      	bmi.n	47d2 <ADC_Handler+0xae>
	if (flags & ADC_INTFLAG_OVERRUN) {
    47a2:	07ab      	lsls	r3, r5, #30
    47a4:	d508      	bpl.n	47b8 <ADC_Handler+0x94>
		module->hw->INTFLAG.reg = ADC_INTFLAG_OVERRUN;
    47a6:	2302      	movs	r3, #2
    47a8:	6822      	ldr	r2, [r4, #0]
    47aa:	7193      	strb	r3, [r2, #6]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_ERROR)) &&
    47ac:	7ee3      	ldrb	r3, [r4, #27]
    47ae:	075b      	lsls	r3, r3, #29
    47b0:	d502      	bpl.n	47b8 <ADC_Handler+0x94>
    47b2:	7ea3      	ldrb	r3, [r4, #26]
    47b4:	075b      	lsls	r3, r3, #29
    47b6:	d410      	bmi.n	47da <ADC_Handler+0xb6>
	_adc_interrupt_handler(0);
}
    47b8:	bd70      	pop	{r4, r5, r6, pc}
				module->job_status = STATUS_OK;
    47ba:	2300      	movs	r3, #0
    47bc:	7723      	strb	r3, [r4, #28]
				if ((module->enabled_callback_mask &
    47be:	7ee3      	ldrb	r3, [r4, #27]
    47c0:	07db      	lsls	r3, r3, #31
    47c2:	d5e3      	bpl.n	478c <ADC_Handler+0x68>
						(1 << ADC_CALLBACK_READ_BUFFER)) &&
    47c4:	7ea3      	ldrb	r3, [r4, #26]
    47c6:	07db      	lsls	r3, r3, #31
    47c8:	d5e0      	bpl.n	478c <ADC_Handler+0x68>
					(module->callback[ADC_CALLBACK_READ_BUFFER])(module);
    47ca:	0020      	movs	r0, r4
    47cc:	68a3      	ldr	r3, [r4, #8]
    47ce:	4798      	blx	r3
    47d0:	e7dc      	b.n	478c <ADC_Handler+0x68>
			(module->callback[ADC_CALLBACK_WINDOW])(module);
    47d2:	0020      	movs	r0, r4
    47d4:	68e3      	ldr	r3, [r4, #12]
    47d6:	4798      	blx	r3
    47d8:	e7e3      	b.n	47a2 <ADC_Handler+0x7e>
			(module->callback[ADC_CALLBACK_ERROR])(module);
    47da:	6923      	ldr	r3, [r4, #16]
    47dc:	0020      	movs	r0, r4
    47de:	4798      	blx	r3
}
    47e0:	e7ea      	b.n	47b8 <ADC_Handler+0x94>
    47e2:	46c0      	nop			; (mov r8, r8)
    47e4:	200021ec 	.word	0x200021ec

000047e8 <aes_get_config_defaults>:
		struct aes_config *const config)
{

	/* Sanity check arguments */
	Assert(config);
	config->encrypt_mode = AES_ENCRYPTION;
    47e8:	2301      	movs	r3, #1
    47ea:	7003      	strb	r3, [r0, #0]
	config->key_size = AES_KEY_SIZE_128;
    47ec:	2300      	movs	r3, #0
    47ee:	7043      	strb	r3, [r0, #1]
	config->start_mode = AES_MANUAL_START;
    47f0:	7083      	strb	r3, [r0, #2]
	config->opmode= AES_ECB_MODE;
    47f2:	70c3      	strb	r3, [r0, #3]
	config->cfb_size = AES_CFB_SIZE_128;
    47f4:	7103      	strb	r3, [r0, #4]
	config->ctype = AES_COUNTERMEASURE_TYPE_ALL;
    47f6:	220f      	movs	r2, #15
    47f8:	7142      	strb	r2, [r0, #5]
	config->enable_xor_key = false;
    47fa:	7183      	strb	r3, [r0, #6]
	config->enable_key_gen = false;
    47fc:	71c3      	strb	r3, [r0, #7]
	config->lod = false;
    47fe:	7203      	strb	r3, [r0, #8]
}
    4800:	4770      	bx	lr

00004802 <aes_enable>:
 */
void aes_enable(struct aes_module *const module)
{
	Assert(module);
	Assert(module->hw);
	module->hw->CTRLA.reg |= AES_CTRLA_ENABLE;
    4802:	6802      	ldr	r2, [r0, #0]
    4804:	6813      	ldr	r3, [r2, #0]
    4806:	2102      	movs	r1, #2
    4808:	430b      	orrs	r3, r1
    480a:	6013      	str	r3, [r2, #0]

}
    480c:	4770      	bx	lr

0000480e <aes_disable>:
{
	Assert(module);
	Assert(module->hw);

	/* Disbale interrupt */
	module->hw->INTENCLR.reg = AES_INTENCLR_MASK;
    480e:	2303      	movs	r3, #3
    4810:	6802      	ldr	r2, [r0, #0]
    4812:	7153      	strb	r3, [r2, #5]
	/* Clear interrupt flag */
	module->hw->INTFLAG.reg = AES_INTFLAG_MASK;
    4814:	6802      	ldr	r2, [r0, #0]
    4816:	71d3      	strb	r3, [r2, #7]

	module->hw->CTRLA.reg &= (~AES_CTRLA_ENABLE);
    4818:	6802      	ldr	r2, [r0, #0]
    481a:	6813      	ldr	r3, [r2, #0]
    481c:	2102      	movs	r1, #2
    481e:	438b      	bics	r3, r1
    4820:	6013      	str	r3, [r2, #0]
}
    4822:	4770      	bx	lr

00004824 <aes_set_config>:
 */
void aes_set_config(
		struct aes_module *const module,
		Aes *const hw,
		struct aes_config *const config)
{
    4824:	b570      	push	{r4, r5, r6, lr}
    4826:	0004      	movs	r4, r0
    4828:	000d      	movs	r5, r1
	/* Validate arguments. */
	Assert(hw);
	Assert(config);
	Assert(module);

	module->opmode = config->opmode;
    482a:	78d3      	ldrb	r3, [r2, #3]
    482c:	7103      	strb	r3, [r0, #4]
	module->hw = hw;
    482e:	6021      	str	r1, [r4, #0]
	module->key_size = config->key_size;
    4830:	7853      	ldrb	r3, [r2, #1]
    4832:	7143      	strb	r3, [r0, #5]
	module->cfb_size = config->cfb_size;
    4834:	7913      	ldrb	r3, [r2, #4]
    4836:	7183      	strb	r3, [r0, #6]

	ul_mode |= (config->encrypt_mode << AES_CTRLA_CIPHER_Pos)
    4838:	7813      	ldrb	r3, [r2, #0]
    483a:	029b      	lsls	r3, r3, #10
			 | (config->start_mode << AES_CTRLA_STARTMODE_Pos)
    483c:	7891      	ldrb	r1, [r2, #2]
    483e:	02c9      	lsls	r1, r1, #11
    4840:	430b      	orrs	r3, r1
			 | (config->key_size << AES_CTRLA_KEYSIZE_Pos)
    4842:	7851      	ldrb	r1, [r2, #1]
    4844:	0209      	lsls	r1, r1, #8
    4846:	430b      	orrs	r3, r1
			 | (config->opmode << AES_CTRLA_AESMODE_Pos)
    4848:	78d1      	ldrb	r1, [r2, #3]
    484a:	0089      	lsls	r1, r1, #2
    484c:	430b      	orrs	r3, r1
			 | (config->cfb_size << AES_CTRLA_CFBS_Pos)
    484e:	7911      	ldrb	r1, [r2, #4]
    4850:	0149      	lsls	r1, r1, #5
    4852:	430b      	orrs	r3, r1
			 | (AES_CTRLA_CTYPE(config->ctype))
			 | (config->enable_xor_key << AES_CTRLA_XORKEY_Pos)
    4854:	7991      	ldrb	r1, [r2, #6]
    4856:	0389      	lsls	r1, r1, #14
			 | (config->enable_key_gen << AES_CTRLA_KEYGEN_Pos)
    4858:	79d0      	ldrb	r0, [r2, #7]
    485a:	0340      	lsls	r0, r0, #13
			 | (config->lod << AES_CTRLA_LOD_Pos);
    485c:	4301      	orrs	r1, r0
    485e:	7a10      	ldrb	r0, [r2, #8]
    4860:	0300      	lsls	r0, r0, #12
    4862:	4301      	orrs	r1, r0
			 | (AES_CTRLA_CTYPE(config->ctype))
    4864:	7952      	ldrb	r2, [r2, #5]
    4866:	0412      	lsls	r2, r2, #16
    4868:	20f0      	movs	r0, #240	; 0xf0
    486a:	0300      	lsls	r0, r0, #12
    486c:	4002      	ands	r2, r0
			 | (config->lod << AES_CTRLA_LOD_Pos);
    486e:	430a      	orrs	r2, r1
    4870:	4313      	orrs	r3, r2
    4872:	001e      	movs	r6, r3
	if (hw->CTRLA.reg & AES_CTRLA_ENABLE) {
    4874:	682b      	ldr	r3, [r5, #0]
    4876:	079b      	lsls	r3, r3, #30
    4878:	d401      	bmi.n	487e <aes_set_config+0x5a>
		aes_disable(module);
		hw->CTRLA.reg = ul_mode;
		aes_enable(module);
	} else {
		hw->CTRLA.reg = ul_mode;
    487a:	602e      	str	r6, [r5, #0]
	}
}
    487c:	bd70      	pop	{r4, r5, r6, pc}
		aes_disable(module);
    487e:	0020      	movs	r0, r4
    4880:	4b03      	ldr	r3, [pc, #12]	; (4890 <aes_set_config+0x6c>)
    4882:	4798      	blx	r3
		hw->CTRLA.reg = ul_mode;
    4884:	602e      	str	r6, [r5, #0]
		aes_enable(module);
    4886:	0020      	movs	r0, r4
    4888:	4b02      	ldr	r3, [pc, #8]	; (4894 <aes_set_config+0x70>)
    488a:	4798      	blx	r3
    488c:	e7f6      	b.n	487c <aes_set_config+0x58>
    488e:	46c0      	nop			; (mov r8, r8)
    4890:	0000480f 	.word	0x0000480f
    4894:	00004803 	.word	0x00004803

00004898 <aes_init>:
{
    4898:	b570      	push	{r4, r5, r6, lr}
		case SYSTEM_CLOCK_APB_APBB:
			MCLK->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			MCLK->APBCMASK.reg |= mask;
    489a:	4c05      	ldr	r4, [pc, #20]	; (48b0 <aes_init+0x18>)
    489c:	69e5      	ldr	r5, [r4, #28]
    489e:	2380      	movs	r3, #128	; 0x80
    48a0:	019b      	lsls	r3, r3, #6
    48a2:	432b      	orrs	r3, r5
    48a4:	61e3      	str	r3, [r4, #28]
	hw->CTRLA.reg = AES_CTRLA_SWRST;
    48a6:	2301      	movs	r3, #1
    48a8:	600b      	str	r3, [r1, #0]
	aes_set_config(module,hw, config);
    48aa:	4b02      	ldr	r3, [pc, #8]	; (48b4 <aes_init+0x1c>)
    48ac:	4798      	blx	r3
}
    48ae:	bd70      	pop	{r4, r5, r6, pc}
    48b0:	40000400 	.word	0x40000400
    48b4:	00004825 	.word	0x00004825

000048b8 <aes_write_key>:
 * \note The key size depends on the current AES configuration.
 */
void aes_write_key(
		struct aes_module *const module,
		const uint32_t *key)
{
    48b8:	b570      	push	{r4, r5, r6, lr}
	/* Validate arguments. */
	Assert(module);
	Assert(module->hw);
	Assert(key);

	switch (module->key_size) {
    48ba:	7943      	ldrb	r3, [r0, #5]
    48bc:	2b01      	cmp	r3, #1
    48be:	d005      	beq.n	48cc <aes_write_key+0x14>
    48c0:	2b00      	cmp	r3, #0
    48c2:	d010      	beq.n	48e6 <aes_write_key+0x2e>
    48c4:	2b02      	cmp	r3, #2
    48c6:	d10d      	bne.n	48e4 <aes_write_key+0x2c>
	case AES_KEY_SIZE_192:
		key_length = 6;
		break;

	case AES_KEY_SIZE_256:
		key_length = 8;
    48c8:	2508      	movs	r5, #8
    48ca:	e000      	b.n	48ce <aes_write_key+0x16>
		key_length = 6;
    48cc:	2506      	movs	r5, #6
{
    48ce:	2300      	movs	r3, #0
	default:
		break;
	}

	for (i = 0; i < key_length; i++) {
		module->hw->KEYWORD[i].reg = *key;
    48d0:	c910      	ldmia	r1!, {r4}
    48d2:	1c9a      	adds	r2, r3, #2
    48d4:	0092      	lsls	r2, r2, #2
    48d6:	6806      	ldr	r6, [r0, #0]
    48d8:	46b4      	mov	ip, r6
    48da:	4462      	add	r2, ip
    48dc:	6054      	str	r4, [r2, #4]
	for (i = 0; i < key_length; i++) {
    48de:	3301      	adds	r3, #1
    48e0:	42ab      	cmp	r3, r5
    48e2:	d3f5      	bcc.n	48d0 <aes_write_key+0x18>
		key++;
	}
}
    48e4:	bd70      	pop	{r4, r5, r6, pc}
		key_length = 4;
    48e6:	2504      	movs	r5, #4
    48e8:	e7f1      	b.n	48ce <aes_write_key+0x16>
	...

000048ec <aes_write_input_data>:
 * \param[in] input_data_buffer Pointer to an input data buffer
 */
void aes_write_input_data(
		struct aes_module *const module,
		const uint32_t *input_data_buffer)
{
    48ec:	b510      	push	{r4, lr}
	/* Validate arguments. */
	Assert(module);
	Assert(module->hw);;
	Assert(input_data_buffer);

	module->hw->DATABUFPTR.reg = 0;
    48ee:	2300      	movs	r3, #0
    48f0:	6802      	ldr	r2, [r0, #0]
    48f2:	7213      	strb	r3, [r2, #8]
	if (module->opmode == AES_CFB_MODE
		&& module->cfb_size == AES_CFB_SIZE_64){
    48f4:	4b0f      	ldr	r3, [pc, #60]	; (4934 <aes_write_input_data+0x48>)
    48f6:	6842      	ldr	r2, [r0, #4]
    48f8:	4013      	ands	r3, r2
	if (module->opmode == AES_CFB_MODE
    48fa:	4a0f      	ldr	r2, [pc, #60]	; (4938 <aes_write_input_data+0x4c>)
    48fc:	4293      	cmp	r3, r2
    48fe:	d00a      	beq.n	4916 <aes_write_input_data+0x2a>
		for (i = 0; i < 2; i++) {
			module->hw->INDATA.reg = *input_data_buffer;
			input_data_buffer++;
		}
	} else if (module->opmode == AES_CFB_MODE
    4900:	7903      	ldrb	r3, [r0, #4]
    4902:	2b03      	cmp	r3, #3
    4904:	d00e      	beq.n	4924 <aes_write_input_data+0x38>
    4906:	000c      	movs	r4, r1
    4908:	3410      	adds	r4, #16
		&& (module->cfb_size == AES_CFB_SIZE_32 || module->cfb_size == AES_CFB_SIZE_16)){
		module->hw->INDATA.reg = *input_data_buffer;
	} else {
		for (i = 0; i < 4; i++) {
			module->hw->INDATA.reg = *input_data_buffer;
    490a:	6803      	ldr	r3, [r0, #0]
    490c:	c904      	ldmia	r1!, {r2}
    490e:	639a      	str	r2, [r3, #56]	; 0x38
		for (i = 0; i < 4; i++) {
    4910:	428c      	cmp	r4, r1
    4912:	d1fa      	bne.n	490a <aes_write_input_data+0x1e>
			input_data_buffer++;
		}
	}
}
    4914:	bd10      	pop	{r4, pc}
			module->hw->INDATA.reg = *input_data_buffer;
    4916:	6803      	ldr	r3, [r0, #0]
    4918:	680a      	ldr	r2, [r1, #0]
    491a:	639a      	str	r2, [r3, #56]	; 0x38
    491c:	6803      	ldr	r3, [r0, #0]
    491e:	684a      	ldr	r2, [r1, #4]
    4920:	639a      	str	r2, [r3, #56]	; 0x38
    4922:	e7f7      	b.n	4914 <aes_write_input_data+0x28>
		&& (module->cfb_size == AES_CFB_SIZE_32 || module->cfb_size == AES_CFB_SIZE_16)){
    4924:	7983      	ldrb	r3, [r0, #6]
    4926:	3b02      	subs	r3, #2
    4928:	2b01      	cmp	r3, #1
    492a:	d8ec      	bhi.n	4906 <aes_write_input_data+0x1a>
		module->hw->INDATA.reg = *input_data_buffer;
    492c:	6803      	ldr	r3, [r0, #0]
    492e:	680a      	ldr	r2, [r1, #0]
    4930:	639a      	str	r2, [r3, #56]	; 0x38
    4932:	e7ef      	b.n	4914 <aes_write_input_data+0x28>
    4934:	00ff00ff 	.word	0x00ff00ff
    4938:	00010003 	.word	0x00010003

0000493c <aes_read_output_data>:
	/* Validate arguments. */
	Assert(module);
	Assert(module->hw);
	Assert(output_data_buffer);

	module->hw->DATABUFPTR.reg = 0;
    493c:	2300      	movs	r3, #0
    493e:	6802      	ldr	r2, [r0, #0]
    4940:	7213      	strb	r3, [r2, #8]
	if (module->opmode == AES_CFB_MODE
		&& module->cfb_size == AES_CFB_SIZE_64){
    4942:	4b10      	ldr	r3, [pc, #64]	; (4984 <aes_read_output_data+0x48>)
    4944:	6842      	ldr	r2, [r0, #4]
    4946:	4013      	ands	r3, r2
	if (module->opmode == AES_CFB_MODE
    4948:	4a0f      	ldr	r2, [pc, #60]	; (4988 <aes_read_output_data+0x4c>)
    494a:	4293      	cmp	r3, r2
    494c:	d00a      	beq.n	4964 <aes_read_output_data+0x28>
		for (i = 0; i < 2; i++) {
			*output_data_buffer = module->hw->INDATA.reg;
			output_data_buffer++;
		}
	} else if (module->opmode == AES_CFB_MODE
    494e:	7903      	ldrb	r3, [r0, #4]
    4950:	2b03      	cmp	r3, #3
    4952:	d00e      	beq.n	4972 <aes_read_output_data+0x36>
    4954:	000a      	movs	r2, r1
    4956:	3210      	adds	r2, #16
		&& (module->cfb_size == AES_CFB_SIZE_32 || module->cfb_size == AES_CFB_SIZE_16)){
		*output_data_buffer = module->hw->INDATA.reg;
	} else {
		for (i = 0; i < 4; i++) {
			*output_data_buffer = module->hw->INDATA.reg;
    4958:	6803      	ldr	r3, [r0, #0]
    495a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    495c:	c108      	stmia	r1!, {r3}
		for (i = 0; i < 4; i++) {
    495e:	428a      	cmp	r2, r1
    4960:	d1fa      	bne.n	4958 <aes_read_output_data+0x1c>
			output_data_buffer++;
		}
	}
}
    4962:	4770      	bx	lr
			*output_data_buffer = module->hw->INDATA.reg;
    4964:	6803      	ldr	r3, [r0, #0]
    4966:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    4968:	600b      	str	r3, [r1, #0]
    496a:	6803      	ldr	r3, [r0, #0]
    496c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    496e:	604b      	str	r3, [r1, #4]
    4970:	e7f7      	b.n	4962 <aes_read_output_data+0x26>
		&& (module->cfb_size == AES_CFB_SIZE_32 || module->cfb_size == AES_CFB_SIZE_16)){
    4972:	7983      	ldrb	r3, [r0, #6]
    4974:	3b02      	subs	r3, #2
    4976:	2b01      	cmp	r3, #1
    4978:	d8ec      	bhi.n	4954 <aes_read_output_data+0x18>
		*output_data_buffer = module->hw->INDATA.reg;
    497a:	6803      	ldr	r3, [r0, #0]
    497c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    497e:	600b      	str	r3, [r1, #0]
    4980:	e7ef      	b.n	4962 <aes_read_output_data+0x26>
    4982:	46c0      	nop			; (mov r8, r8)
    4984:	00ff00ff 	.word	0x00ff00ff
    4988:	00010003 	.word	0x00010003

0000498c <extint_register_callback>:
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    498c:	2317      	movs	r3, #23
	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
    498e:	2a00      	cmp	r2, #0
    4990:	d001      	beq.n	4996 <extint_register_callback+0xa>
	} else if (_extint_dev.callbacks[channel] == callback) {
		return STATUS_OK;
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
}
    4992:	0018      	movs	r0, r3
    4994:	4770      	bx	lr
	if (_extint_dev.callbacks[channel] == NULL) {
    4996:	008b      	lsls	r3, r1, #2
    4998:	4a06      	ldr	r2, [pc, #24]	; (49b4 <extint_register_callback+0x28>)
    499a:	589b      	ldr	r3, [r3, r2]
    499c:	2b00      	cmp	r3, #0
    499e:	d003      	beq.n	49a8 <extint_register_callback+0x1c>
	} else if (_extint_dev.callbacks[channel] == callback) {
    49a0:	4283      	cmp	r3, r0
    49a2:	d005      	beq.n	49b0 <extint_register_callback+0x24>
	return STATUS_ERR_ALREADY_INITIALIZED;
    49a4:	231d      	movs	r3, #29
    49a6:	e7f4      	b.n	4992 <extint_register_callback+0x6>
		_extint_dev.callbacks[channel] = callback;
    49a8:	0089      	lsls	r1, r1, #2
    49aa:	5088      	str	r0, [r1, r2]
		return STATUS_OK;
    49ac:	2300      	movs	r3, #0
    49ae:	e7f0      	b.n	4992 <extint_register_callback+0x6>
		return STATUS_OK;
    49b0:	2300      	movs	r3, #0
    49b2:	e7ee      	b.n	4992 <extint_register_callback+0x6>
    49b4:	200021f4 	.word	0x200021f4

000049b8 <extint_chan_enable_callback>:

		eic->INTENSET.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    49b8:	2317      	movs	r3, #23
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
    49ba:	2900      	cmp	r1, #0
    49bc:	d001      	beq.n	49c2 <extint_chan_enable_callback+0xa>
	}

	return STATUS_OK;
}
    49be:	0018      	movs	r0, r3
    49c0:	4770      	bx	lr
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
	} else {
		Assert(false);
		return NULL;
    49c2:	2200      	movs	r2, #0
	if (eic_index < EIC_INST_NUM) {
    49c4:	281f      	cmp	r0, #31
    49c6:	d800      	bhi.n	49ca <extint_chan_enable_callback+0x12>
		return eics[eic_index];
    49c8:	4a02      	ldr	r2, [pc, #8]	; (49d4 <extint_chan_enable_callback+0x1c>)
		eic->INTENSET.reg = (1UL << channel);
    49ca:	2301      	movs	r3, #1
    49cc:	4083      	lsls	r3, r0
    49ce:	6113      	str	r3, [r2, #16]
	return STATUS_OK;
    49d0:	2300      	movs	r3, #0
    49d2:	e7f4      	b.n	49be <extint_chan_enable_callback+0x6>
    49d4:	40002400 	.word	0x40002400

000049d8 <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
    49d8:	b570      	push	{r4, r5, r6, lr}
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    49da:	2200      	movs	r2, #0
    49dc:	4b10      	ldr	r3, [pc, #64]	; (4a20 <EIC_Handler+0x48>)
    49de:	701a      	strb	r2, [r3, #0]
    49e0:	2300      	movs	r3, #0
    49e2:	4910      	ldr	r1, [pc, #64]	; (4a24 <EIC_Handler+0x4c>)
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
    49e4:	251f      	movs	r5, #31
		if (extint_chan_is_detected(_current_channel)) {
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    49e6:	4e10      	ldr	r6, [pc, #64]	; (4a28 <EIC_Handler+0x50>)
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    49e8:	4c0d      	ldr	r4, [pc, #52]	; (4a20 <EIC_Handler+0x48>)
    49ea:	e00a      	b.n	4a02 <EIC_Handler+0x2a>
		return eics[eic_index];
    49ec:	490d      	ldr	r1, [pc, #52]	; (4a24 <EIC_Handler+0x4c>)
    49ee:	e008      	b.n	4a02 <EIC_Handler+0x2a>
    49f0:	7823      	ldrb	r3, [r4, #0]
    49f2:	3301      	adds	r3, #1
    49f4:	b2db      	uxtb	r3, r3
    49f6:	7023      	strb	r3, [r4, #0]
    49f8:	2b0f      	cmp	r3, #15
    49fa:	d810      	bhi.n	4a1e <EIC_Handler+0x46>
		return NULL;
    49fc:	2100      	movs	r1, #0
	if (eic_index < EIC_INST_NUM) {
    49fe:	2b1f      	cmp	r3, #31
    4a00:	d9f4      	bls.n	49ec <EIC_Handler+0x14>
	uint32_t eic_mask   = (1UL << (channel % 32));
    4a02:	0028      	movs	r0, r5
    4a04:	4018      	ands	r0, r3
    4a06:	2201      	movs	r2, #1
    4a08:	4082      	lsls	r2, r0

	return (eic_module->INTFLAG.reg & eic_mask);
    4a0a:	6948      	ldr	r0, [r1, #20]
		if (extint_chan_is_detected(_current_channel)) {
    4a0c:	4210      	tst	r0, r2
    4a0e:	d0ef      	beq.n	49f0 <EIC_Handler+0x18>
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));

	eic_module->INTFLAG.reg = eic_mask;
    4a10:	614a      	str	r2, [r1, #20]
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    4a12:	009b      	lsls	r3, r3, #2
    4a14:	599b      	ldr	r3, [r3, r6]
    4a16:	2b00      	cmp	r3, #0
    4a18:	d0ea      	beq.n	49f0 <EIC_Handler+0x18>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
    4a1a:	4798      	blx	r3
    4a1c:	e7e8      	b.n	49f0 <EIC_Handler+0x18>
			}
		}
	}
}
    4a1e:	bd70      	pop	{r4, r5, r6, pc}
    4a20:	200021f0 	.word	0x200021f0
    4a24:	40002400 	.word	0x40002400
    4a28:	200021f4 	.word	0x200021f4

00004a2c <_extint_enable>:
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRLA.reg |= EIC_CTRLA_ENABLE;
    4a2c:	4a06      	ldr	r2, [pc, #24]	; (4a48 <_extint_enable+0x1c>)
    4a2e:	7813      	ldrb	r3, [r2, #0]
    4a30:	2102      	movs	r1, #2
    4a32:	430b      	orrs	r3, r1
    4a34:	7013      	strb	r3, [r2, #0]
		 || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
    4a36:	2001      	movs	r0, #1
		if((eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_ENABLE)
    4a38:	6853      	ldr	r3, [r2, #4]
    4a3a:	4219      	tst	r1, r3
    4a3c:	d1fc      	bne.n	4a38 <_extint_enable+0xc>
		 || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
    4a3e:	6853      	ldr	r3, [r2, #4]
    4a40:	4218      	tst	r0, r3
    4a42:	d1f9      	bne.n	4a38 <_extint_enable+0xc>
	}

	while (extint_is_syncing()) {
		/* Wait for all hardware modules to complete synchronization */
	}
}
    4a44:	4770      	bx	lr
    4a46:	46c0      	nop			; (mov r8, r8)
    4a48:	40002400 	.word	0x40002400

00004a4c <_extint_disable>:
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Disable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRLA.reg &= ~EIC_CTRLA_ENABLE;
    4a4c:	4a06      	ldr	r2, [pc, #24]	; (4a68 <_extint_disable+0x1c>)
    4a4e:	7813      	ldrb	r3, [r2, #0]
    4a50:	2102      	movs	r1, #2
    4a52:	438b      	bics	r3, r1
    4a54:	7013      	strb	r3, [r2, #0]
		 || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
    4a56:	2001      	movs	r0, #1
		if((eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_ENABLE)
    4a58:	6853      	ldr	r3, [r2, #4]
    4a5a:	4219      	tst	r1, r3
    4a5c:	d1fc      	bne.n	4a58 <_extint_disable+0xc>
		 || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
    4a5e:	6853      	ldr	r3, [r2, #4]
    4a60:	4218      	tst	r0, r3
    4a62:	d1f9      	bne.n	4a58 <_extint_disable+0xc>
	}

	while (extint_is_syncing()) {
		/* Wait for all hardware modules to complete synchronization */
	}
}
    4a64:	4770      	bx	lr
    4a66:	46c0      	nop			; (mov r8, r8)
    4a68:	40002400 	.word	0x40002400

00004a6c <_system_extint_init>:
{
    4a6c:	b510      	push	{r4, lr}
			MCLK->APBAMASK.reg |= mask;
    4a6e:	4a12      	ldr	r2, [pc, #72]	; (4ab8 <_system_extint_init+0x4c>)
    4a70:	6951      	ldr	r1, [r2, #20]
    4a72:	2380      	movs	r3, #128	; 0x80
    4a74:	009b      	lsls	r3, r3, #2
    4a76:	430b      	orrs	r3, r1
    4a78:	6153      	str	r3, [r2, #20]
		eics[i]->CTRLA.reg |= EIC_CTRLA_SWRST;
    4a7a:	4a10      	ldr	r2, [pc, #64]	; (4abc <_system_extint_init+0x50>)
    4a7c:	7813      	ldrb	r3, [r2, #0]
    4a7e:	2101      	movs	r1, #1
    4a80:	430b      	orrs	r3, r1
    4a82:	7013      	strb	r3, [r2, #0]
		if((eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_ENABLE)
    4a84:	3101      	adds	r1, #1
		 || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
    4a86:	2001      	movs	r0, #1
		if((eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_ENABLE)
    4a88:	6853      	ldr	r3, [r2, #4]
    4a8a:	4219      	tst	r1, r3
    4a8c:	d1fc      	bne.n	4a88 <_system_extint_init+0x1c>
		 || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
    4a8e:	6853      	ldr	r3, [r2, #4]
    4a90:	4218      	tst	r0, r3
    4a92:	d1f9      	bne.n	4a88 <_system_extint_init+0x1c>
		eics[i]->CTRLA.bit.CKSEL = EXTINT_CLK_ULP32K;
    4a94:	4a09      	ldr	r2, [pc, #36]	; (4abc <_system_extint_init+0x50>)
    4a96:	7813      	ldrb	r3, [r2, #0]
    4a98:	2110      	movs	r1, #16
    4a9a:	430b      	orrs	r3, r1
    4a9c:	7013      	strb	r3, [r2, #0]
    4a9e:	4b08      	ldr	r3, [pc, #32]	; (4ac0 <_system_extint_init+0x54>)
    4aa0:	0019      	movs	r1, r3
    4aa2:	3140      	adds	r1, #64	; 0x40
		_extint_dev.callbacks[j] = NULL;
    4aa4:	2200      	movs	r2, #0
    4aa6:	c304      	stmia	r3!, {r2}
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
    4aa8:	428b      	cmp	r3, r1
    4aaa:	d1fc      	bne.n	4aa6 <_system_extint_init+0x3a>
    4aac:	2208      	movs	r2, #8
    4aae:	4b05      	ldr	r3, [pc, #20]	; (4ac4 <_system_extint_init+0x58>)
    4ab0:	601a      	str	r2, [r3, #0]
	_extint_enable();
    4ab2:	4b05      	ldr	r3, [pc, #20]	; (4ac8 <_system_extint_init+0x5c>)
    4ab4:	4798      	blx	r3
}
    4ab6:	bd10      	pop	{r4, pc}
    4ab8:	40000400 	.word	0x40000400
    4abc:	40002400 	.word	0x40002400
    4ac0:	200021f4 	.word	0x200021f4
    4ac4:	e000e100 	.word	0xe000e100
    4ac8:	00004a2d 	.word	0x00004a2d

00004acc <extint_chan_get_config_defaults>:
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->gpio_pin            = 0;
    4acc:	2300      	movs	r3, #0
    4ace:	6003      	str	r3, [r0, #0]
	config->gpio_pin_mux        = 0;
    4ad0:	6043      	str	r3, [r0, #4]
	config->gpio_pin_pull       = EXTINT_PULL_UP;
    4ad2:	2201      	movs	r2, #1
    4ad4:	7202      	strb	r2, [r0, #8]
	config->filter_input_signal = false;
    4ad6:	7283      	strb	r3, [r0, #10]
	config->detection_criteria  = EXTINT_DETECT_FALLING;
    4ad8:	3201      	adds	r2, #1
    4ada:	72c2      	strb	r2, [r0, #11]
	config->enable_async_edge_detection = false;
    4adc:	7243      	strb	r3, [r0, #9]
}
    4ade:	4770      	bx	lr

00004ae0 <extint_chan_set_config>:

 */
void extint_chan_set_config(
		const uint8_t channel,
		const struct extint_chan_conf *const config)
{
    4ae0:	b5f0      	push	{r4, r5, r6, r7, lr}
    4ae2:	b083      	sub	sp, #12
    4ae4:	0005      	movs	r5, r0
    4ae6:	000c      	movs	r4, r1
	/* Sanity check arguments */
	Assert(config);
	_extint_disable();
    4ae8:	4b1c      	ldr	r3, [pc, #112]	; (4b5c <extint_chan_set_config+0x7c>)
    4aea:	4798      	blx	r3
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    4aec:	a901      	add	r1, sp, #4
    4aee:	2300      	movs	r3, #0
    4af0:	704b      	strb	r3, [r1, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
    4af2:	70cb      	strb	r3, [r1, #3]
			config->detection_criteria)));
#endif
	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = config->gpio_pin_mux;
    4af4:	7923      	ldrb	r3, [r4, #4]
    4af6:	700b      	strb	r3, [r1, #0]
	pinmux_config.direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->gpio_pin_pull;
    4af8:	7a23      	ldrb	r3, [r4, #8]
    4afa:	708b      	strb	r3, [r1, #2]
	system_pinmux_pin_set_config(config->gpio_pin, &pinmux_config);
    4afc:	7820      	ldrb	r0, [r4, #0]
    4afe:	4b18      	ldr	r3, [pc, #96]	; (4b60 <extint_chan_set_config+0x80>)
    4b00:	4798      	blx	r3
		return NULL;
    4b02:	2100      	movs	r1, #0
	if (eic_index < EIC_INST_NUM) {
    4b04:	2d1f      	cmp	r5, #31
    4b06:	d800      	bhi.n	4b0a <extint_chan_set_config+0x2a>
		return eics[eic_index];
    4b08:	4916      	ldr	r1, [pc, #88]	; (4b64 <extint_chan_set_config+0x84>)

	/* Get a pointer to the module hardware instance */
	Eic *const EIC_module = _extint_get_eic_from_channel(channel);

	uint32_t config_pos = (4 * (channel % 8));
    4b0a:	2207      	movs	r2, #7
    4b0c:	402a      	ands	r2, r5
    4b0e:	0092      	lsls	r2, r2, #2
	uint32_t new_config;

	/* Determine the channel's new edge detection configuration */
	new_config = (config->detection_criteria << EIC_CONFIG_SENSE0_Pos);
    4b10:	7ae7      	ldrb	r7, [r4, #11]

	/* Enable the hardware signal filter if requested in the config */
	if (config->filter_input_signal) {
    4b12:	7aa3      	ldrb	r3, [r4, #10]
    4b14:	2b00      	cmp	r3, #0
    4b16:	d001      	beq.n	4b1c <extint_chan_set_config+0x3c>
    4b18:	2308      	movs	r3, #8
    4b1a:	431f      	orrs	r7, r3
    4b1c:	08eb      	lsrs	r3, r5, #3
    4b1e:	009b      	lsls	r3, r3, #2
    4b20:	18cb      	adds	r3, r1, r3
		new_config |= EIC_CONFIG_FILTEN0;
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
    4b22:	69d8      	ldr	r0, [r3, #28]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
    4b24:	260f      	movs	r6, #15
    4b26:	4096      	lsls	r6, r2
		= (EIC_module->CONFIG[channel / 8].reg &
    4b28:	43b0      	bics	r0, r6
			(new_config << config_pos);
    4b2a:	4097      	lsls	r7, r2
    4b2c:	003a      	movs	r2, r7
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
    4b2e:	4302      	orrs	r2, r0
		= (EIC_module->CONFIG[channel / 8].reg &
    4b30:	61da      	str	r2, [r3, #28]
#if (SAML22) || (SAML21XXXB) || (SAMC20) || (SAMR30) || (SAMR34) || (SAMR35) || (WLR089)
	/* Config asynchronous edge detection */
	if (config->enable_async_edge_detection) {
    4b32:	7a63      	ldrb	r3, [r4, #9]
    4b34:	2b00      	cmp	r3, #0
    4b36:	d10b      	bne.n	4b50 <extint_chan_set_config+0x70>
		EIC_module->ASYNCH.reg |= (1UL << channel);
	} else {
		EIC_module->ASYNCH.reg &= (EIC_ASYNCH_MASK & (~(1UL << channel)));
    4b38:	698a      	ldr	r2, [r1, #24]
    4b3a:	2301      	movs	r3, #1
    4b3c:	40ab      	lsls	r3, r5
    4b3e:	43db      	mvns	r3, r3
    4b40:	041b      	lsls	r3, r3, #16
    4b42:	0c1b      	lsrs	r3, r3, #16
    4b44:	4013      	ands	r3, r2
    4b46:	618b      	str	r3, [r1, #24]
		EIC_module->EIC_ASYNCH.reg |= (1UL << channel);
	} else {
		EIC_module->EIC_ASYNCH.reg &= (EIC_EIC_ASYNCH_MASK & (~(1UL << channel)));
	}
#endif
	_extint_enable();
    4b48:	4b07      	ldr	r3, [pc, #28]	; (4b68 <extint_chan_set_config+0x88>)
    4b4a:	4798      	blx	r3
}
    4b4c:	b003      	add	sp, #12
    4b4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		EIC_module->ASYNCH.reg |= (1UL << channel);
    4b50:	698a      	ldr	r2, [r1, #24]
    4b52:	2301      	movs	r3, #1
    4b54:	40ab      	lsls	r3, r5
    4b56:	4313      	orrs	r3, r2
    4b58:	618b      	str	r3, [r1, #24]
    4b5a:	e7f5      	b.n	4b48 <extint_chan_set_config+0x68>
    4b5c:	00004a4d 	.word	0x00004a4d
    4b60:	000073f1 	.word	0x000073f1
    4b64:	40002400 	.word	0x40002400
    4b68:	00004a2d 	.word	0x00004a2d

00004b6c <nvm_set_config>:
 *                        EEPROM and/or auxiliary space configuration from being
 *                        altered
 */
enum status_code nvm_set_config(
		const struct nvm_config *const config)
{
    4b6c:	b510      	push	{r4, lr}
			MCLK->APBBMASK.reg |= mask;
    4b6e:	4a1e      	ldr	r2, [pc, #120]	; (4be8 <nvm_set_config+0x7c>)
    4b70:	6993      	ldr	r3, [r2, #24]
    4b72:	2104      	movs	r1, #4
    4b74:	430b      	orrs	r3, r1
    4b76:	6193      	str	r3, [r2, #24]
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBB, PM_APBBMASK_NVMCTRL);
#endif

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
    4b78:	4b1c      	ldr	r3, [pc, #112]	; (4bec <nvm_set_config+0x80>)
    4b7a:	2220      	movs	r2, #32
    4b7c:	32ff      	adds	r2, #255	; 0xff
    4b7e:	831a      	strh	r2, [r3, #24]
static inline bool nvm_is_ready(void)
{
	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;

	return nvm_module->INTFLAG.reg & NVMCTRL_INTFLAG_READY;
    4b80:	7d1a      	ldrb	r2, [r3, #20]

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
		return STATUS_BUSY;
    4b82:	2305      	movs	r3, #5
	if (!nvm_is_ready()) {
    4b84:	07d2      	lsls	r2, r2, #31
    4b86:	d401      	bmi.n	4b8c <nvm_set_config+0x20>
	if (nvm_module->STATUS.reg & NVMCTRL_STATUS_SB) {
		return STATUS_ERR_IO;
	}

	return STATUS_OK;
}
    4b88:	0018      	movs	r0, r3
    4b8a:	bd10      	pop	{r4, pc}
			NVMCTRL_CTRLB_SLEEPPRM(config->sleep_power_mode) |
    4b8c:	7803      	ldrb	r3, [r0, #0]
    4b8e:	021b      	lsls	r3, r3, #8
    4b90:	22c0      	movs	r2, #192	; 0xc0
    4b92:	0092      	lsls	r2, r2, #2
    4b94:	4013      	ands	r3, r2
			((config->manual_page_write & 0x01) << NVMCTRL_CTRLB_MANW_Pos) |
    4b96:	7841      	ldrb	r1, [r0, #1]
    4b98:	01c9      	lsls	r1, r1, #7
    4b9a:	22ff      	movs	r2, #255	; 0xff
    4b9c:	400a      	ands	r2, r1
			NVMCTRL_CTRLB_SLEEPPRM(config->sleep_power_mode) |
    4b9e:	4313      	orrs	r3, r2
			NVMCTRL_CTRLB_RWS(config->wait_states) |
    4ba0:	7881      	ldrb	r1, [r0, #2]
    4ba2:	0049      	lsls	r1, r1, #1
    4ba4:	221e      	movs	r2, #30
    4ba6:	400a      	ands	r2, r1
			((config->manual_page_write & 0x01) << NVMCTRL_CTRLB_MANW_Pos) |
    4ba8:	4313      	orrs	r3, r2
			((config->disable_cache & 0x01) << NVMCTRL_CTRLB_CACHEDIS_Pos) |
    4baa:	78c2      	ldrb	r2, [r0, #3]
    4bac:	0492      	lsls	r2, r2, #18
    4bae:	2180      	movs	r1, #128	; 0x80
    4bb0:	02c9      	lsls	r1, r1, #11
    4bb2:	400a      	ands	r2, r1
			NVMCTRL_CTRLB_RWS(config->wait_states) |
    4bb4:	4313      	orrs	r3, r2
			NVMCTRL_CTRLB_READMODE(config->cache_readmode);
    4bb6:	7902      	ldrb	r2, [r0, #4]
    4bb8:	0412      	lsls	r2, r2, #16
    4bba:	21c0      	movs	r1, #192	; 0xc0
    4bbc:	0289      	lsls	r1, r1, #10
    4bbe:	400a      	ands	r2, r1
			((config->disable_cache & 0x01) << NVMCTRL_CTRLB_CACHEDIS_Pos) |
    4bc0:	4313      	orrs	r3, r2
	nvm_module->CTRLB.reg =
    4bc2:	4a0a      	ldr	r2, [pc, #40]	; (4bec <nvm_set_config+0x80>)
    4bc4:	6053      	str	r3, [r2, #4]
	_nvm_dev.page_size         = (8 << nvm_module->PARAM.bit.PSZ);
    4bc6:	6893      	ldr	r3, [r2, #8]
    4bc8:	035b      	lsls	r3, r3, #13
    4bca:	0f5b      	lsrs	r3, r3, #29
    4bcc:	4908      	ldr	r1, [pc, #32]	; (4bf0 <nvm_set_config+0x84>)
    4bce:	2408      	movs	r4, #8
    4bd0:	409c      	lsls	r4, r3
    4bd2:	800c      	strh	r4, [r1, #0]
	_nvm_dev.number_of_pages   = nvm_module->PARAM.bit.NVMP;
    4bd4:	6893      	ldr	r3, [r2, #8]
    4bd6:	804b      	strh	r3, [r1, #2]
	_nvm_dev.manual_page_write = config->manual_page_write;
    4bd8:	7843      	ldrb	r3, [r0, #1]
    4bda:	710b      	strb	r3, [r1, #4]
	if (nvm_module->STATUS.reg & NVMCTRL_STATUS_SB) {
    4bdc:	8b13      	ldrh	r3, [r2, #24]
    4bde:	05db      	lsls	r3, r3, #23
	return STATUS_OK;
    4be0:	0fdb      	lsrs	r3, r3, #31
    4be2:	011b      	lsls	r3, r3, #4
    4be4:	e7d0      	b.n	4b88 <nvm_set_config+0x1c>
    4be6:	46c0      	nop			; (mov r8, r8)
    4be8:	40000400 	.word	0x40000400
    4bec:	41004000 	.word	0x41004000
    4bf0:	20000b60 	.word	0x20000b60

00004bf4 <nvm_execute_command>:
 */
enum status_code nvm_execute_command(
		const enum nvm_command command,
		const uint32_t address,
		const uint32_t parameter)
{
    4bf4:	b530      	push	{r4, r5, lr}
	uint32_t ctrlb_bak;

	/* Check that the address given is valid  */
	if (address > ((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)
    4bf6:	4a30      	ldr	r2, [pc, #192]	; (4cb8 <nvm_execute_command+0xc4>)
    4bf8:	8814      	ldrh	r4, [r2, #0]
    4bfa:	8853      	ldrh	r3, [r2, #2]
    4bfc:	4363      	muls	r3, r4
    4bfe:	428b      	cmp	r3, r1
    4c00:	d20b      	bcs.n	4c1a <nvm_execute_command+0x26>
		&& !(address >= NVMCTRL_AUX0_ADDRESS && address <= NVMCTRL_AUX1_ADDRESS )){
    4c02:	2280      	movs	r2, #128	; 0x80
    4c04:	0192      	lsls	r2, r2, #6
    4c06:	4b2d      	ldr	r3, [pc, #180]	; (4cbc <nvm_execute_command+0xc8>)
    4c08:	18cb      	adds	r3, r1, r3
    4c0a:	4293      	cmp	r3, r2
    4c0c:	d905      	bls.n	4c1a <nvm_execute_command+0x26>
#ifdef FEATURE_NVM_RWWEE
		if (address >= ((uint32_t)NVMCTRL_RWW_EEPROM_SIZE + NVMCTRL_RWW_EEPROM_ADDR)
    4c0e:	4c2c      	ldr	r4, [pc, #176]	; (4cc0 <nvm_execute_command+0xcc>)
			|| address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
    4c10:	2318      	movs	r3, #24
		if (address >= ((uint32_t)NVMCTRL_RWW_EEPROM_SIZE + NVMCTRL_RWW_EEPROM_ADDR)
    4c12:	4a2c      	ldr	r2, [pc, #176]	; (4cc4 <nvm_execute_command+0xd0>)
    4c14:	188a      	adds	r2, r1, r2
    4c16:	42a2      	cmp	r2, r4
    4c18:	d80e      	bhi.n	4c38 <nvm_execute_command+0x44>

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;

	/* Turn off cache before issuing flash commands */
	ctrlb_bak = nvm_module->CTRLB.reg;
    4c1a:	4b2b      	ldr	r3, [pc, #172]	; (4cc8 <nvm_execute_command+0xd4>)
    4c1c:	685c      	ldr	r4, [r3, #4]
#if (SAMC20) || (SAMC21)
	nvm_module->CTRLB.reg = ((ctrlb_bak &(~(NVMCTRL_CTRLB_CACHEDIS(0x2))))
							| NVMCTRL_CTRLB_CACHEDIS(0x1));
#else
	nvm_module->CTRLB.reg = ctrlb_bak | NVMCTRL_CTRLB_CACHEDIS;
    4c1e:	2280      	movs	r2, #128	; 0x80
    4c20:	02d2      	lsls	r2, r2, #11
    4c22:	4322      	orrs	r2, r4
    4c24:	605a      	str	r2, [r3, #4]
#endif

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
    4c26:	2220      	movs	r2, #32
    4c28:	32ff      	adds	r2, #255	; 0xff
    4c2a:	831a      	strh	r2, [r3, #24]
    4c2c:	7d1b      	ldrb	r3, [r3, #20]

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
    4c2e:	07db      	lsls	r3, r3, #31
    4c30:	d404      	bmi.n	4c3c <nvm_execute_command+0x48>
		/* Restore the setting */
		nvm_module->CTRLB.reg = ctrlb_bak;
    4c32:	4b25      	ldr	r3, [pc, #148]	; (4cc8 <nvm_execute_command+0xd4>)
    4c34:	605c      	str	r4, [r3, #4]
		return STATUS_BUSY;
    4c36:	2305      	movs	r3, #5

	/* Restore the setting */
	nvm_module->CTRLB.reg = ctrlb_bak;

	return STATUS_OK;
}
    4c38:	0018      	movs	r0, r3
    4c3a:	bd30      	pop	{r4, r5, pc}
	switch (command) {
    4c3c:	2845      	cmp	r0, #69	; 0x45
    4c3e:	d829      	bhi.n	4c94 <nvm_execute_command+0xa0>
    4c40:	0083      	lsls	r3, r0, #2
    4c42:	4a22      	ldr	r2, [pc, #136]	; (4ccc <nvm_execute_command+0xd8>)
    4c44:	58d3      	ldr	r3, [r2, r3]
    4c46:	469f      	mov	pc, r3
			if (nvm_module->STATUS.reg & NVMCTRL_STATUS_SB) {
    4c48:	4b1f      	ldr	r3, [pc, #124]	; (4cc8 <nvm_execute_command+0xd4>)
    4c4a:	8b1b      	ldrh	r3, [r3, #24]
    4c4c:	05db      	lsls	r3, r3, #23
    4c4e:	d503      	bpl.n	4c58 <nvm_execute_command+0x64>
				nvm_module->CTRLB.reg = ctrlb_bak;
    4c50:	4b1d      	ldr	r3, [pc, #116]	; (4cc8 <nvm_execute_command+0xd4>)
    4c52:	605c      	str	r4, [r3, #4]
				return STATUS_ERR_IO;
    4c54:	2310      	movs	r3, #16
    4c56:	e7ef      	b.n	4c38 <nvm_execute_command+0x44>
			nvm_module->ADDR.reg = (uintptr_t)&NVM_MEMORY[address / 4];
    4c58:	0889      	lsrs	r1, r1, #2
    4c5a:	0049      	lsls	r1, r1, #1
    4c5c:	4b1a      	ldr	r3, [pc, #104]	; (4cc8 <nvm_execute_command+0xd4>)
    4c5e:	61d9      	str	r1, [r3, #28]
			break;
    4c60:	e003      	b.n	4c6a <nvm_execute_command+0x76>
			nvm_module->ADDR.reg = (uintptr_t)&NVM_MEMORY[address / 4];
    4c62:	0889      	lsrs	r1, r1, #2
    4c64:	0049      	lsls	r1, r1, #1
    4c66:	4b18      	ldr	r3, [pc, #96]	; (4cc8 <nvm_execute_command+0xd4>)
    4c68:	61d9      	str	r1, [r3, #28]
	if( command == NVM_COMMAND_RWWEE_ERASE_ROW || command == NVM_COMMAND_RWWEE_WRITE_PAGE)
    4c6a:	23fd      	movs	r3, #253	; 0xfd
    4c6c:	0005      	movs	r5, r0
    4c6e:	3d1a      	subs	r5, #26
    4c70:	401d      	ands	r5, r3
    4c72:	d013      	beq.n	4c9c <nvm_execute_command+0xa8>
	nvm_module->CTRLA.reg = command | NVMCTRL_CTRLA_CMDEX_KEY;
    4c74:	23a5      	movs	r3, #165	; 0xa5
    4c76:	021b      	lsls	r3, r3, #8
    4c78:	4318      	orrs	r0, r3
    4c7a:	4b13      	ldr	r3, [pc, #76]	; (4cc8 <nvm_execute_command+0xd4>)
    4c7c:	8018      	strh	r0, [r3, #0]
    4c7e:	0019      	movs	r1, r3
	while (!nvm_is_ready()) {
    4c80:	2201      	movs	r2, #1
    4c82:	7d0b      	ldrb	r3, [r1, #20]
    4c84:	4213      	tst	r3, r2
    4c86:	d0fc      	beq.n	4c82 <nvm_execute_command+0x8e>
	if( command == NVM_COMMAND_RWWEE_ERASE_ROW || command == NVM_COMMAND_RWWEE_WRITE_PAGE)
    4c88:	2d00      	cmp	r5, #0
    4c8a:	d00f      	beq.n	4cac <nvm_execute_command+0xb8>
	nvm_module->CTRLB.reg = ctrlb_bak;
    4c8c:	4b0e      	ldr	r3, [pc, #56]	; (4cc8 <nvm_execute_command+0xd4>)
    4c8e:	605c      	str	r4, [r3, #4]
	return STATUS_OK;
    4c90:	2300      	movs	r3, #0
    4c92:	e7d1      	b.n	4c38 <nvm_execute_command+0x44>
			nvm_module->CTRLB.reg = ctrlb_bak;
    4c94:	4b0c      	ldr	r3, [pc, #48]	; (4cc8 <nvm_execute_command+0xd4>)
    4c96:	605c      	str	r4, [r3, #4]
			return STATUS_ERR_INVALID_ARG;
    4c98:	2317      	movs	r3, #23
    4c9a:	e7cd      	b.n	4c38 <nvm_execute_command+0x44>
		nvm_module->CTRLB.bit.CACHEDIS = 1;
    4c9c:	4b0a      	ldr	r3, [pc, #40]	; (4cc8 <nvm_execute_command+0xd4>)
    4c9e:	6859      	ldr	r1, [r3, #4]
    4ca0:	2280      	movs	r2, #128	; 0x80
    4ca2:	02d2      	lsls	r2, r2, #11
    4ca4:	430a      	orrs	r2, r1
    4ca6:	605a      	str	r2, [r3, #4]
		nvm_module->CTRLB.reg;
    4ca8:	685b      	ldr	r3, [r3, #4]
    4caa:	e7e3      	b.n	4c74 <nvm_execute_command+0x80>
		nvm_module->CTRLB.bit.CACHEDIS = 0;
    4cac:	4a06      	ldr	r2, [pc, #24]	; (4cc8 <nvm_execute_command+0xd4>)
    4cae:	6853      	ldr	r3, [r2, #4]
    4cb0:	4907      	ldr	r1, [pc, #28]	; (4cd0 <nvm_execute_command+0xdc>)
    4cb2:	400b      	ands	r3, r1
    4cb4:	6053      	str	r3, [r2, #4]
    4cb6:	e7e9      	b.n	4c8c <nvm_execute_command+0x98>
    4cb8:	20000b60 	.word	0x20000b60
    4cbc:	ff7fc000 	.word	0xff7fc000
    4cc0:	00001fff 	.word	0x00001fff
    4cc4:	ffc00000 	.word	0xffc00000
    4cc8:	41004000 	.word	0x41004000
    4ccc:	0001fa94 	.word	0x0001fa94
    4cd0:	fffbffff 	.word	0xfffbffff

00004cd4 <nvm_write_buffer>:
 */
enum status_code nvm_write_buffer(
		const uint32_t destination_address,
		const uint8_t *buffer,
		uint16_t length)
{
    4cd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	bool is_rww_eeprom = false;
#endif

	/* Check if the destination address is valid */
	if (destination_address >
			((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)) {
    4cd6:	4b2f      	ldr	r3, [pc, #188]	; (4d94 <nvm_write_buffer+0xc0>)
    4cd8:	881c      	ldrh	r4, [r3, #0]
    4cda:	885b      	ldrh	r3, [r3, #2]
    4cdc:	4363      	muls	r3, r4
	if (destination_address >
    4cde:	4283      	cmp	r3, r0
    4ce0:	d207      	bcs.n	4cf2 <nvm_write_buffer+0x1e>
#ifdef FEATURE_NVM_RWWEE
		if (destination_address >= ((uint32_t)NVMCTRL_RWW_EEPROM_SIZE + NVMCTRL_RWW_EEPROM_ADDR)
    4ce2:	4e2d      	ldr	r6, [pc, #180]	; (4d98 <nvm_write_buffer+0xc4>)
			|| destination_address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
    4ce4:	2518      	movs	r5, #24
		if (destination_address >= ((uint32_t)NVMCTRL_RWW_EEPROM_SIZE + NVMCTRL_RWW_EEPROM_ADDR)
    4ce6:	4b2d      	ldr	r3, [pc, #180]	; (4d9c <nvm_write_buffer+0xc8>)
    4ce8:	18c3      	adds	r3, r0, r3
    4cea:	42b3      	cmp	r3, r6
    4cec:	d806      	bhi.n	4cfc <nvm_write_buffer+0x28>
		}
		is_rww_eeprom = true;
    4cee:	2601      	movs	r6, #1
    4cf0:	e000      	b.n	4cf4 <nvm_write_buffer+0x20>
	bool is_rww_eeprom = false;
    4cf2:	2600      	movs	r6, #0
		return STATUS_ERR_BAD_ADDRESS;
#endif
	}

	/* Check if the write address not aligned to the start of a page */
	if (destination_address & (_nvm_dev.page_size - 1)) {
    4cf4:	1e63      	subs	r3, r4, #1
		return STATUS_ERR_BAD_ADDRESS;
    4cf6:	2518      	movs	r5, #24
	if (destination_address & (_nvm_dev.page_size - 1)) {
    4cf8:	4218      	tst	r0, r3
    4cfa:	d001      	beq.n	4d00 <nvm_write_buffer+0x2c>
				destination_address, 0);
#endif
	}

	return STATUS_OK;
}
    4cfc:	0028      	movs	r0, r5
    4cfe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return STATUS_ERR_INVALID_ARG;
    4d00:	3d01      	subs	r5, #1
	if (length > _nvm_dev.page_size) {
    4d02:	4294      	cmp	r4, r2
    4d04:	d3fa      	bcc.n	4cfc <nvm_write_buffer+0x28>
    4d06:	4b26      	ldr	r3, [pc, #152]	; (4da0 <nvm_write_buffer+0xcc>)
    4d08:	7d1b      	ldrb	r3, [r3, #20]
		return STATUS_BUSY;
    4d0a:	3d12      	subs	r5, #18
	if (!nvm_is_ready()) {
    4d0c:	07db      	lsls	r3, r3, #31
    4d0e:	d5f5      	bpl.n	4cfc <nvm_write_buffer+0x28>
	nvm_module->CTRLA.reg = NVM_COMMAND_PAGE_BUFFER_CLEAR | NVMCTRL_CTRLA_CMDEX_KEY;
    4d10:	4c24      	ldr	r4, [pc, #144]	; (4da4 <nvm_write_buffer+0xd0>)
    4d12:	4b23      	ldr	r3, [pc, #140]	; (4da0 <nvm_write_buffer+0xcc>)
    4d14:	801c      	strh	r4, [r3, #0]
    4d16:	001d      	movs	r5, r3
	while (!nvm_is_ready()) {
    4d18:	2401      	movs	r4, #1
    4d1a:	7d2b      	ldrb	r3, [r5, #20]
    4d1c:	4223      	tst	r3, r4
    4d1e:	d0fc      	beq.n	4d1a <nvm_write_buffer+0x46>
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
    4d20:	2420      	movs	r4, #32
    4d22:	34ff      	adds	r4, #255	; 0xff
    4d24:	4b1e      	ldr	r3, [pc, #120]	; (4da0 <nvm_write_buffer+0xcc>)
    4d26:	831c      	strh	r4, [r3, #24]
	for (uint16_t i = 0; i < length; i += 2) {
    4d28:	2a00      	cmp	r2, #0
    4d2a:	d02c      	beq.n	4d86 <nvm_write_buffer+0xb2>
    4d2c:	2301      	movs	r3, #1
    4d2e:	0005      	movs	r5, r0
    4d30:	439d      	bics	r5, r3
    4d32:	2300      	movs	r3, #0
		if (i < (length - 1)) {
    4d34:	1e54      	subs	r4, r2, #1
    4d36:	46a4      	mov	ip, r4
    4d38:	e009      	b.n	4d4e <nvm_write_buffer+0x7a>
			data |= (buffer[i + 1] << 8);
    4d3a:	18cf      	adds	r7, r1, r3
    4d3c:	787f      	ldrb	r7, [r7, #1]
    4d3e:	023f      	lsls	r7, r7, #8
    4d40:	433c      	orrs	r4, r7
		NVM_MEMORY[nvm_address++] = data;
    4d42:	802c      	strh	r4, [r5, #0]
	for (uint16_t i = 0; i < length; i += 2) {
    4d44:	3302      	adds	r3, #2
    4d46:	b29b      	uxth	r3, r3
    4d48:	3502      	adds	r5, #2
    4d4a:	429a      	cmp	r2, r3
    4d4c:	d904      	bls.n	4d58 <nvm_write_buffer+0x84>
		data = buffer[i];
    4d4e:	5ccc      	ldrb	r4, [r1, r3]
		if (i < (length - 1)) {
    4d50:	4563      	cmp	r3, ip
    4d52:	dbf2      	blt.n	4d3a <nvm_write_buffer+0x66>
		data = buffer[i];
    4d54:	b2a4      	uxth	r4, r4
    4d56:	e7f4      	b.n	4d42 <nvm_write_buffer+0x6e>
	if ((_nvm_dev.manual_page_write == false) && (length < NVMCTRL_PAGE_SIZE)) {
    4d58:	4b0e      	ldr	r3, [pc, #56]	; (4d94 <nvm_write_buffer+0xc0>)
    4d5a:	791b      	ldrb	r3, [r3, #4]
	return STATUS_OK;
    4d5c:	2500      	movs	r5, #0
	if ((_nvm_dev.manual_page_write == false) && (length < NVMCTRL_PAGE_SIZE)) {
    4d5e:	2b00      	cmp	r3, #0
    4d60:	d1cc      	bne.n	4cfc <nvm_write_buffer+0x28>
    4d62:	2a3f      	cmp	r2, #63	; 0x3f
    4d64:	d8ca      	bhi.n	4cfc <nvm_write_buffer+0x28>
				(nvm_execute_command(NVM_COMMAND_RWWEE_WRITE_PAGE,destination_address, 0)):
    4d66:	2e00      	cmp	r6, #0
    4d68:	d106      	bne.n	4d78 <nvm_write_buffer+0xa4>
    4d6a:	2200      	movs	r2, #0
    4d6c:	0001      	movs	r1, r0
    4d6e:	2004      	movs	r0, #4
    4d70:	4b0d      	ldr	r3, [pc, #52]	; (4da8 <nvm_write_buffer+0xd4>)
    4d72:	4798      	blx	r3
    4d74:	0005      	movs	r5, r0
    4d76:	e7c1      	b.n	4cfc <nvm_write_buffer+0x28>
    4d78:	2200      	movs	r2, #0
    4d7a:	0001      	movs	r1, r0
    4d7c:	201c      	movs	r0, #28
    4d7e:	4b0a      	ldr	r3, [pc, #40]	; (4da8 <nvm_write_buffer+0xd4>)
    4d80:	4798      	blx	r3
    4d82:	0005      	movs	r5, r0
    4d84:	e7ba      	b.n	4cfc <nvm_write_buffer+0x28>
	if ((_nvm_dev.manual_page_write == false) && (length < NVMCTRL_PAGE_SIZE)) {
    4d86:	4b03      	ldr	r3, [pc, #12]	; (4d94 <nvm_write_buffer+0xc0>)
    4d88:	791b      	ldrb	r3, [r3, #4]
	return STATUS_OK;
    4d8a:	2500      	movs	r5, #0
	if ((_nvm_dev.manual_page_write == false) && (length < NVMCTRL_PAGE_SIZE)) {
    4d8c:	2b00      	cmp	r3, #0
    4d8e:	d0ea      	beq.n	4d66 <nvm_write_buffer+0x92>
    4d90:	e7b4      	b.n	4cfc <nvm_write_buffer+0x28>
    4d92:	46c0      	nop			; (mov r8, r8)
    4d94:	20000b60 	.word	0x20000b60
    4d98:	00001fff 	.word	0x00001fff
    4d9c:	ffc00000 	.word	0xffc00000
    4da0:	41004000 	.word	0x41004000
    4da4:	ffffa544 	.word	0xffffa544
    4da8:	00004bf5 	.word	0x00004bf5

00004dac <nvm_read_buffer>:
 */
enum status_code nvm_read_buffer(
		const uint32_t source_address,
		uint8_t *const buffer,
		uint16_t length)
{
    4dac:	b570      	push	{r4, r5, r6, lr}
	/* Check if the source address is valid */
	if (source_address >
			((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)) {
    4dae:	4b1b      	ldr	r3, [pc, #108]	; (4e1c <nvm_read_buffer+0x70>)
    4db0:	881c      	ldrh	r4, [r3, #0]
    4db2:	885b      	ldrh	r3, [r3, #2]
    4db4:	4363      	muls	r3, r4
	if (source_address >
    4db6:	4283      	cmp	r3, r0
    4db8:	d205      	bcs.n	4dc6 <nvm_read_buffer+0x1a>
#ifdef FEATURE_NVM_RWWEE
		if (source_address >= ((uint32_t)NVMCTRL_RWW_EEPROM_SIZE + NVMCTRL_RWW_EEPROM_ADDR)
    4dba:	4e19      	ldr	r6, [pc, #100]	; (4e20 <nvm_read_buffer+0x74>)
			|| source_address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
    4dbc:	2518      	movs	r5, #24
		if (source_address >= ((uint32_t)NVMCTRL_RWW_EEPROM_SIZE + NVMCTRL_RWW_EEPROM_ADDR)
    4dbe:	4b19      	ldr	r3, [pc, #100]	; (4e24 <nvm_read_buffer+0x78>)
    4dc0:	18c3      	adds	r3, r0, r3
    4dc2:	42b3      	cmp	r3, r6
    4dc4:	d803      	bhi.n	4dce <nvm_read_buffer+0x22>
		return STATUS_ERR_BAD_ADDRESS;
#endif
	}

	/* Check if the read address is not aligned to the start of a page */
	if (source_address & (_nvm_dev.page_size - 1)) {
    4dc6:	1e63      	subs	r3, r4, #1
		return STATUS_ERR_BAD_ADDRESS;
    4dc8:	2518      	movs	r5, #24
	if (source_address & (_nvm_dev.page_size - 1)) {
    4dca:	4218      	tst	r0, r3
    4dcc:	d001      	beq.n	4dd2 <nvm_read_buffer+0x26>
			buffer[i + 1] = (data >> 8);
		}
	}

	return STATUS_OK;
}
    4dce:	0028      	movs	r0, r5
    4dd0:	bd70      	pop	{r4, r5, r6, pc}
		return STATUS_ERR_INVALID_ARG;
    4dd2:	3d01      	subs	r5, #1
	if (length > _nvm_dev.page_size) {
    4dd4:	4294      	cmp	r4, r2
    4dd6:	d3fa      	bcc.n	4dce <nvm_read_buffer+0x22>
    4dd8:	4b13      	ldr	r3, [pc, #76]	; (4e28 <nvm_read_buffer+0x7c>)
    4dda:	7d1b      	ldrb	r3, [r3, #20]
		return STATUS_BUSY;
    4ddc:	3d12      	subs	r5, #18
	if (!nvm_is_ready()) {
    4dde:	07db      	lsls	r3, r3, #31
    4de0:	d5f5      	bpl.n	4dce <nvm_read_buffer+0x22>
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
    4de2:	2420      	movs	r4, #32
    4de4:	34ff      	adds	r4, #255	; 0xff
    4de6:	4b10      	ldr	r3, [pc, #64]	; (4e28 <nvm_read_buffer+0x7c>)
    4de8:	831c      	strh	r4, [r3, #24]
	for (uint16_t i = 0; i < length; i += 2) {
    4dea:	2a00      	cmp	r2, #0
    4dec:	d014      	beq.n	4e18 <nvm_read_buffer+0x6c>
    4dee:	2301      	movs	r3, #1
    4df0:	4398      	bics	r0, r3
    4df2:	2300      	movs	r3, #0
		if (i < (length - 1)) {
    4df4:	1e56      	subs	r6, r2, #1
    4df6:	e004      	b.n	4e02 <nvm_read_buffer+0x56>
	for (uint16_t i = 0; i < length; i += 2) {
    4df8:	3302      	adds	r3, #2
    4dfa:	b29b      	uxth	r3, r3
    4dfc:	3002      	adds	r0, #2
    4dfe:	429a      	cmp	r2, r3
    4e00:	d908      	bls.n	4e14 <nvm_read_buffer+0x68>
		uint16_t data = NVM_MEMORY[page_address++];
    4e02:	8804      	ldrh	r4, [r0, #0]
    4e04:	b2a4      	uxth	r4, r4
		buffer[i] = (data & 0xFF);
    4e06:	54cc      	strb	r4, [r1, r3]
		if (i < (length - 1)) {
    4e08:	42b3      	cmp	r3, r6
    4e0a:	daf5      	bge.n	4df8 <nvm_read_buffer+0x4c>
			buffer[i + 1] = (data >> 8);
    4e0c:	18cd      	adds	r5, r1, r3
    4e0e:	0a24      	lsrs	r4, r4, #8
    4e10:	706c      	strb	r4, [r5, #1]
    4e12:	e7f1      	b.n	4df8 <nvm_read_buffer+0x4c>
	return STATUS_OK;
    4e14:	2500      	movs	r5, #0
    4e16:	e7da      	b.n	4dce <nvm_read_buffer+0x22>
    4e18:	2500      	movs	r5, #0
    4e1a:	e7d8      	b.n	4dce <nvm_read_buffer+0x22>
    4e1c:	20000b60 	.word	0x20000b60
    4e20:	00001fff 	.word	0x00001fff
    4e24:	ffc00000 	.word	0xffc00000
    4e28:	41004000 	.word	0x41004000

00004e2c <nvm_erase_row>:
 *                                 not aligned to the start of a row
 * \retval STATUS_ABORTED          NVM erased error
 */
enum status_code nvm_erase_row(
		const uint32_t row_address)
{
    4e2c:	b510      	push	{r4, lr}
		bool is_rww_eeprom = false;
#endif

	/* Check if the row address is valid */
	if (row_address >
			((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)) {
    4e2e:	4a22      	ldr	r2, [pc, #136]	; (4eb8 <nvm_erase_row+0x8c>)
    4e30:	8813      	ldrh	r3, [r2, #0]
    4e32:	8852      	ldrh	r2, [r2, #2]
    4e34:	435a      	muls	r2, r3
	if (row_address >
    4e36:	4282      	cmp	r2, r0
    4e38:	d207      	bcs.n	4e4a <nvm_erase_row+0x1e>
#ifdef FEATURE_NVM_RWWEE
		if (row_address >= ((uint32_t)NVMCTRL_RWW_EEPROM_SIZE + NVMCTRL_RWW_EEPROM_ADDR)
    4e3a:	4c20      	ldr	r4, [pc, #128]	; (4ebc <nvm_erase_row+0x90>)
			|| row_address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
    4e3c:	2218      	movs	r2, #24
		if (row_address >= ((uint32_t)NVMCTRL_RWW_EEPROM_SIZE + NVMCTRL_RWW_EEPROM_ADDR)
    4e3e:	4920      	ldr	r1, [pc, #128]	; (4ec0 <nvm_erase_row+0x94>)
    4e40:	1841      	adds	r1, r0, r1
    4e42:	42a1      	cmp	r1, r4
    4e44:	d807      	bhi.n	4e56 <nvm_erase_row+0x2a>
		}
		is_rww_eeprom = true;
    4e46:	2401      	movs	r4, #1
    4e48:	e000      	b.n	4e4c <nvm_erase_row+0x20>
		bool is_rww_eeprom = false;
    4e4a:	2400      	movs	r4, #0
		return STATUS_ERR_BAD_ADDRESS;
#endif
	}

	/* Check if the address to erase is not aligned to the start of a row */
	if (row_address & ((_nvm_dev.page_size * NVMCTRL_ROW_PAGES) - 1)) {
    4e4c:	009b      	lsls	r3, r3, #2
    4e4e:	3b01      	subs	r3, #1
		return STATUS_ERR_BAD_ADDRESS;
    4e50:	2218      	movs	r2, #24
	if (row_address & ((_nvm_dev.page_size * NVMCTRL_ROW_PAGES) - 1)) {
    4e52:	4218      	tst	r0, r3
    4e54:	d001      	beq.n	4e5a <nvm_erase_row+0x2e>
	if ((enum nvm_error)(nvm_module->STATUS.reg & NVM_ERRORS_MASK) != NVM_ERROR_NONE) {
		return STATUS_ABORTED;
	}

	return STATUS_OK;
}
    4e56:	0010      	movs	r0, r2
    4e58:	bd10      	pop	{r4, pc}
    4e5a:	4b1a      	ldr	r3, [pc, #104]	; (4ec4 <nvm_erase_row+0x98>)
    4e5c:	7d1b      	ldrb	r3, [r3, #20]
		return STATUS_BUSY;
    4e5e:	3a13      	subs	r2, #19
	if (!nvm_is_ready()) {
    4e60:	07db      	lsls	r3, r3, #31
    4e62:	d5f8      	bpl.n	4e56 <nvm_erase_row+0x2a>
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
    4e64:	4b17      	ldr	r3, [pc, #92]	; (4ec4 <nvm_erase_row+0x98>)
    4e66:	2220      	movs	r2, #32
    4e68:	32ff      	adds	r2, #255	; 0xff
    4e6a:	831a      	strh	r2, [r3, #24]
	nvm_module->ADDR.reg  = (uintptr_t)&NVM_MEMORY[row_address / 4];
    4e6c:	0880      	lsrs	r0, r0, #2
    4e6e:	0040      	lsls	r0, r0, #1
    4e70:	61d8      	str	r0, [r3, #28]
	if (is_rww_eeprom) {
    4e72:	2c00      	cmp	r4, #0
    4e74:	d01b      	beq.n	4eae <nvm_erase_row+0x82>
		nvm_module->CTRLB.bit.CACHEDIS = 1;
    4e76:	6859      	ldr	r1, [r3, #4]
    4e78:	2280      	movs	r2, #128	; 0x80
    4e7a:	02d2      	lsls	r2, r2, #11
    4e7c:	430a      	orrs	r2, r1
    4e7e:	605a      	str	r2, [r3, #4]
		nvm_module->CTRLB.reg;
    4e80:	685a      	ldr	r2, [r3, #4]
		nvm_module->CTRLA.reg = NVM_COMMAND_RWWEE_ERASE_ROW | NVMCTRL_CTRLA_CMDEX_KEY;
    4e82:	4a11      	ldr	r2, [pc, #68]	; (4ec8 <nvm_erase_row+0x9c>)
    4e84:	801a      	strh	r2, [r3, #0]
    4e86:	490f      	ldr	r1, [pc, #60]	; (4ec4 <nvm_erase_row+0x98>)
	while (!nvm_is_ready()) {
    4e88:	2201      	movs	r2, #1
    4e8a:	7d0b      	ldrb	r3, [r1, #20]
    4e8c:	4213      	tst	r3, r2
    4e8e:	d0fc      	beq.n	4e8a <nvm_erase_row+0x5e>
	if (is_rww_eeprom) {
    4e90:	2c00      	cmp	r4, #0
    4e92:	d004      	beq.n	4e9e <nvm_erase_row+0x72>
		nvm_module->CTRLB.bit.CACHEDIS = 0;
    4e94:	4a0b      	ldr	r2, [pc, #44]	; (4ec4 <nvm_erase_row+0x98>)
    4e96:	6853      	ldr	r3, [r2, #4]
    4e98:	490c      	ldr	r1, [pc, #48]	; (4ecc <nvm_erase_row+0xa0>)
    4e9a:	400b      	ands	r3, r1
    4e9c:	6053      	str	r3, [r2, #4]
	if ((enum nvm_error)(nvm_module->STATUS.reg & NVM_ERRORS_MASK) != NVM_ERROR_NONE) {
    4e9e:	4b09      	ldr	r3, [pc, #36]	; (4ec4 <nvm_erase_row+0x98>)
    4ea0:	8b1a      	ldrh	r2, [r3, #24]
    4ea2:	201c      	movs	r0, #28
    4ea4:	4002      	ands	r2, r0
	return STATUS_OK;
    4ea6:	1e50      	subs	r0, r2, #1
    4ea8:	4182      	sbcs	r2, r0
    4eaa:	0092      	lsls	r2, r2, #2
    4eac:	e7d3      	b.n	4e56 <nvm_erase_row+0x2a>
		nvm_module->CTRLA.reg = NVM_COMMAND_ERASE_ROW | NVMCTRL_CTRLA_CMDEX_KEY;
    4eae:	4a08      	ldr	r2, [pc, #32]	; (4ed0 <nvm_erase_row+0xa4>)
    4eb0:	4b04      	ldr	r3, [pc, #16]	; (4ec4 <nvm_erase_row+0x98>)
    4eb2:	801a      	strh	r2, [r3, #0]
    4eb4:	e7e7      	b.n	4e86 <nvm_erase_row+0x5a>
    4eb6:	46c0      	nop			; (mov r8, r8)
    4eb8:	20000b60 	.word	0x20000b60
    4ebc:	00001fff 	.word	0x00001fff
    4ec0:	ffc00000 	.word	0xffc00000
    4ec4:	41004000 	.word	0x41004000
    4ec8:	ffffa51a 	.word	0xffffa51a
    4ecc:	fffbffff 	.word	0xfffbffff
    4ed0:	ffffa502 	.word	0xffffa502

00004ed4 <nvm_get_parameters>:

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
    4ed4:	4b15      	ldr	r3, [pc, #84]	; (4f2c <nvm_get_parameters+0x58>)
    4ed6:	2220      	movs	r2, #32
    4ed8:	32ff      	adds	r2, #255	; 0xff
    4eda:	831a      	strh	r2, [r3, #24]

	/* Read out from the PARAM register */
	uint32_t param_reg = nvm_module->PARAM.reg;
    4edc:	689b      	ldr	r3, [r3, #8]

	/* Mask out page size exponent and convert to a number of bytes */
	parameters->page_size =
			8 << ((param_reg & NVMCTRL_PARAM_PSZ_Msk) >> NVMCTRL_PARAM_PSZ_Pos);
    4ede:	0359      	lsls	r1, r3, #13
    4ee0:	0f49      	lsrs	r1, r1, #29
    4ee2:	3a18      	subs	r2, #24
    4ee4:	3aff      	subs	r2, #255	; 0xff
    4ee6:	408a      	lsls	r2, r1
	parameters->page_size =
    4ee8:	7002      	strb	r2, [r0, #0]

	/* Mask out number of pages count */
	parameters->nvm_number_of_pages =
    4eea:	8043      	strh	r3, [r0, #2]
			(param_reg & NVMCTRL_PARAM_NVMP_Msk) >> NVMCTRL_PARAM_NVMP_Pos;

#ifdef FEATURE_NVM_RWWEE
	/* Mask out rwwee number of pages count */
	parameters->rww_eeprom_number_of_pages =
			(param_reg & NVMCTRL_PARAM_RWWEEP_Msk) >> NVMCTRL_PARAM_RWWEEP_Pos;
    4eec:	0d1b      	lsrs	r3, r3, #20
	parameters->rww_eeprom_number_of_pages =
    4eee:	8183      	strh	r3, [r0, #12]
#endif

	/* Read the current EEPROM fuse value from the USER row */
	uint16_t eeprom_fuse_value =
			(NVM_USER_MEMORY[NVMCTRL_FUSES_EEPROM_SIZE_Pos / 16] &
    4ef0:	4b0f      	ldr	r3, [pc, #60]	; (4f30 <nvm_get_parameters+0x5c>)
    4ef2:	881b      	ldrh	r3, [r3, #0]
	uint16_t eeprom_fuse_value =
    4ef4:	065b      	lsls	r3, r3, #25
    4ef6:	0f5b      	lsrs	r3, r3, #29
			NVMCTRL_FUSES_EEPROM_SIZE_Msk) >> NVMCTRL_FUSES_EEPROM_SIZE_Pos;

	/* Translate the EEPROM fuse byte value to a number of NVM pages */
	if (eeprom_fuse_value == 7) {
    4ef8:	2b07      	cmp	r3, #7
    4efa:	d010      	beq.n	4f1e <nvm_get_parameters+0x4a>
		parameters->eeprom_number_of_pages = 0;
	}
	else {
		parameters->eeprom_number_of_pages =
				NVMCTRL_ROW_PAGES << (6 - eeprom_fuse_value);
    4efc:	2206      	movs	r2, #6
    4efe:	1ad2      	subs	r2, r2, r3
    4f00:	2304      	movs	r3, #4
    4f02:	4093      	lsls	r3, r2
		parameters->eeprom_number_of_pages =
    4f04:	6043      	str	r3, [r0, #4]
	}

	/* Read the current BOOTSZ fuse value from the USER row */
	uint16_t boot_fuse_value =
			(NVM_USER_MEMORY[NVMCTRL_FUSES_BOOTPROT_Pos / 16] &
    4f06:	4b0a      	ldr	r3, [pc, #40]	; (4f30 <nvm_get_parameters+0x5c>)
    4f08:	881b      	ldrh	r3, [r3, #0]
	uint16_t boot_fuse_value =
    4f0a:	2207      	movs	r2, #7
    4f0c:	4013      	ands	r3, r2
			NVMCTRL_FUSES_BOOTPROT_Msk) >> NVMCTRL_FUSES_BOOTPROT_Pos;

	/* Translate the BOOTSZ fuse byte value to a number of NVM pages */
	if (boot_fuse_value == 7) {
    4f0e:	2b07      	cmp	r3, #7
    4f10:	d008      	beq.n	4f24 <nvm_get_parameters+0x50>
		parameters->bootloader_number_of_pages = 0;
	}
	else {
		parameters->bootloader_number_of_pages =
				NVMCTRL_ROW_PAGES << (7 - boot_fuse_value);
    4f12:	2207      	movs	r2, #7
    4f14:	1ad2      	subs	r2, r2, r3
    4f16:	2304      	movs	r3, #4
    4f18:	4093      	lsls	r3, r2
		parameters->bootloader_number_of_pages =
    4f1a:	6083      	str	r3, [r0, #8]
	}
}
    4f1c:	4770      	bx	lr
		parameters->eeprom_number_of_pages = 0;
    4f1e:	2300      	movs	r3, #0
    4f20:	6043      	str	r3, [r0, #4]
    4f22:	e7f0      	b.n	4f06 <nvm_get_parameters+0x32>
		parameters->bootloader_number_of_pages = 0;
    4f24:	2300      	movs	r3, #0
    4f26:	6083      	str	r3, [r0, #8]
    4f28:	e7f8      	b.n	4f1c <nvm_get_parameters+0x48>
    4f2a:	46c0      	nop			; (mov r8, r8)
    4f2c:	41004000 	.word	0x41004000
    4f30:	00804000 	.word	0x00804000

00004f34 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    4f34:	b500      	push	{lr}
    4f36:	b083      	sub	sp, #12
	config->mux_position = SYSTEM_PINMUX_GPIO;
    4f38:	ab01      	add	r3, sp, #4
    4f3a:	2280      	movs	r2, #128	; 0x80
    4f3c:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    4f3e:	780a      	ldrb	r2, [r1, #0]
    4f40:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    4f42:	784a      	ldrb	r2, [r1, #1]
    4f44:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    4f46:	788a      	ldrb	r2, [r1, #2]
    4f48:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    4f4a:	0019      	movs	r1, r3
    4f4c:	4b01      	ldr	r3, [pc, #4]	; (4f54 <port_pin_set_config+0x20>)
    4f4e:	4798      	blx	r3
}
    4f50:	b003      	add	sp, #12
    4f52:	bd00      	pop	{pc}
    4f54:	000073f1 	.word	0x000073f1

00004f58 <rtc_count_is_syncing>:
{
 	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    4f58:	6803      	ldr	r3, [r0, #0]

	if (rtc_module->MODE0.SYNCBUSY.reg) {
    4f5a:	6918      	ldr	r0, [r3, #16]
    4f5c:	1e43      	subs	r3, r0, #1
    4f5e:	4198      	sbcs	r0, r3
    4f60:	b2c0      	uxtb	r0, r0
		return true;
	}

	return false;
}
    4f62:	4770      	bx	lr

00004f64 <rtc_count_enable>:
 * module configuration parameters cannot be altered while the module is enabled.
 *
 * \param[in,out]  module  RTC hardware module
 */
void rtc_count_enable(struct rtc_module *const module)
{
    4f64:	b570      	push	{r4, r5, r6, lr}
    4f66:	0004      	movs	r4, r0
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    4f68:	6806      	ldr	r6, [r0, #0]
    4f6a:	2204      	movs	r2, #4
    4f6c:	4b08      	ldr	r3, [pc, #32]	; (4f90 <rtc_count_enable+0x2c>)
    4f6e:	601a      	str	r2, [r3, #0]

#if RTC_COUNT_ASYNC == true
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_RTC);
#endif

	while (rtc_count_is_syncing(module)) {
    4f70:	4d08      	ldr	r5, [pc, #32]	; (4f94 <rtc_count_enable+0x30>)
    4f72:	0020      	movs	r0, r4
    4f74:	47a8      	blx	r5
    4f76:	2800      	cmp	r0, #0
    4f78:	d1fb      	bne.n	4f72 <rtc_count_enable+0xe>
		/* Wait for synchronization */
	}

	/* Enable RTC module. */
	rtc_module->MODE0.CTRLA.reg |= RTC_MODE0_CTRLA_ENABLE;
    4f7a:	8833      	ldrh	r3, [r6, #0]
    4f7c:	2202      	movs	r2, #2
    4f7e:	4313      	orrs	r3, r2
    4f80:	8033      	strh	r3, [r6, #0]

	while (rtc_count_is_syncing(module)) {
    4f82:	4d04      	ldr	r5, [pc, #16]	; (4f94 <rtc_count_enable+0x30>)
    4f84:	0020      	movs	r0, r4
    4f86:	47a8      	blx	r5
    4f88:	2800      	cmp	r0, #0
    4f8a:	d1fb      	bne.n	4f84 <rtc_count_enable+0x20>
		/* Wait for synchronization */
	}
}
    4f8c:	bd70      	pop	{r4, r5, r6, pc}
    4f8e:	46c0      	nop			; (mov r8, r8)
    4f90:	e000e100 	.word	0xe000e100
    4f94:	00004f59 	.word	0x00004f59

00004f98 <rtc_count_disable>:
 * Disables the RTC module.
 *
 * \param[in,out]  module  RTC hardware module
 */
void rtc_count_disable(struct rtc_module *const module)
{
    4f98:	b570      	push	{r4, r5, r6, lr}
    4f9a:	0004      	movs	r4, r0
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    4f9c:	6806      	ldr	r6, [r0, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    4f9e:	2104      	movs	r1, #4
    4fa0:	2380      	movs	r3, #128	; 0x80
    4fa2:	4a0a      	ldr	r2, [pc, #40]	; (4fcc <rtc_count_disable+0x34>)
    4fa4:	50d1      	str	r1, [r2, r3]

#if RTC_COUNT_ASYNC == true
	system_interrupt_disable(SYSTEM_INTERRUPT_MODULE_RTC);
#endif

	while (rtc_count_is_syncing(module)) {
    4fa6:	4d0a      	ldr	r5, [pc, #40]	; (4fd0 <rtc_count_disable+0x38>)
    4fa8:	0020      	movs	r0, r4
    4faa:	47a8      	blx	r5
    4fac:	2800      	cmp	r0, #0
    4fae:	d1fb      	bne.n	4fa8 <rtc_count_disable+0x10>
		/* Wait for synchronization */
	}

	/* Disbale interrupt */
	rtc_module->MODE0.INTENCLR.reg = RTC_MODE0_INTENCLR_MASK;
    4fb0:	4b08      	ldr	r3, [pc, #32]	; (4fd4 <rtc_count_disable+0x3c>)
    4fb2:	8133      	strh	r3, [r6, #8]
	/* Clear interrupt flag */
	rtc_module->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_MASK;
    4fb4:	81b3      	strh	r3, [r6, #12]

	/* Disable RTC module. */
	rtc_module->MODE0.CTRLA.reg &= ~RTC_MODE0_CTRLA_ENABLE;
    4fb6:	8833      	ldrh	r3, [r6, #0]
    4fb8:	2202      	movs	r2, #2
    4fba:	4393      	bics	r3, r2
    4fbc:	8033      	strh	r3, [r6, #0]

	while (rtc_count_is_syncing(module)) {
    4fbe:	4d04      	ldr	r5, [pc, #16]	; (4fd0 <rtc_count_disable+0x38>)
    4fc0:	0020      	movs	r0, r4
    4fc2:	47a8      	blx	r5
    4fc4:	2800      	cmp	r0, #0
    4fc6:	d1fb      	bne.n	4fc0 <rtc_count_disable+0x28>
		/* Wait for synchronization */
	}
}
    4fc8:	bd70      	pop	{r4, r5, r6, pc}
    4fca:	46c0      	nop			; (mov r8, r8)
    4fcc:	e000e100 	.word	0xe000e100
    4fd0:	00004f59 	.word	0x00004f59
    4fd4:	ffff81ff 	.word	0xffff81ff

00004fd8 <rtc_count_reset>:
 * Resets the RTC to hardware defaults.
 *
 * \param[in,out]  module  Pointer to the software instance struct
 */
void rtc_count_reset(struct rtc_module *const module)
{
    4fd8:	b570      	push	{r4, r5, r6, lr}
    4fda:	0004      	movs	r4, r0
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    4fdc:	6806      	ldr	r6, [r0, #0]

	/* Disable module before reset. */
	rtc_count_disable(module);
    4fde:	4b0a      	ldr	r3, [pc, #40]	; (5008 <rtc_count_reset+0x30>)
    4fe0:	4798      	blx	r3

#if RTC_COUNT_ASYNC == true
	module->registered_callback = 0;
    4fe2:	2300      	movs	r3, #0
    4fe4:	86a3      	strh	r3, [r4, #52]	; 0x34
	module->enabled_callback    = 0;
    4fe6:	86e3      	strh	r3, [r4, #54]	; 0x36
#endif

	while (rtc_count_is_syncing(module)) {
    4fe8:	4d08      	ldr	r5, [pc, #32]	; (500c <rtc_count_reset+0x34>)
    4fea:	0020      	movs	r0, r4
    4fec:	47a8      	blx	r5
    4fee:	2800      	cmp	r0, #0
    4ff0:	d1fb      	bne.n	4fea <rtc_count_reset+0x12>
		/* Wait for synchronization */
	}

	/* Initiate software reset. */
	rtc_module->MODE0.CTRLA.reg |= RTC_MODE0_CTRLA_SWRST;
    4ff2:	8833      	ldrh	r3, [r6, #0]
    4ff4:	2201      	movs	r2, #1
    4ff6:	4313      	orrs	r3, r2
    4ff8:	8033      	strh	r3, [r6, #0]

	while (rtc_count_is_syncing(module)) {
    4ffa:	4d04      	ldr	r5, [pc, #16]	; (500c <rtc_count_reset+0x34>)
    4ffc:	0020      	movs	r0, r4
    4ffe:	47a8      	blx	r5
    5000:	2800      	cmp	r0, #0
    5002:	d1fb      	bne.n	4ffc <rtc_count_reset+0x24>
		/* Wait for synchronization */
	}
}
    5004:	bd70      	pop	{r4, r5, r6, pc}
    5006:	46c0      	nop			; (mov r8, r8)
    5008:	00004f99 	.word	0x00004f99
    500c:	00004f59 	.word	0x00004f59

00005010 <rtc_count_set_count>:
 * \retval STATUS_ERR_INVALID_ARG  If invalid argument(s) were provided
 */
enum status_code rtc_count_set_count(
		struct rtc_module *const module,
		const uint32_t count_value)
{
    5010:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5012:	0004      	movs	r4, r0
    5014:	000e      	movs	r6, r1
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    5016:	6807      	ldr	r7, [r0, #0]

	while (rtc_count_is_syncing(module)) {
    5018:	4d0c      	ldr	r5, [pc, #48]	; (504c <rtc_count_set_count+0x3c>)
    501a:	0020      	movs	r0, r4
    501c:	47a8      	blx	r5
    501e:	2800      	cmp	r0, #0
    5020:	d1fb      	bne.n	501a <rtc_count_set_count+0xa>
		/* Wait for synchronization */
	}

	/* Set count according to mode */
	switch(module->mode){
    5022:	7923      	ldrb	r3, [r4, #4]
    5024:	2b00      	cmp	r3, #0
    5026:	d009      	beq.n	503c <rtc_count_set_count+0x2c>

			break;

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
    5028:	2017      	movs	r0, #23
	switch(module->mode){
    502a:	2b01      	cmp	r3, #1
    502c:	d105      	bne.n	503a <rtc_count_set_count+0x2a>
			rtc_module->MODE0.COUNT.reg = count_value;
    502e:	61be      	str	r6, [r7, #24]
	}

	while (rtc_count_is_syncing(module)) {
    5030:	4d06      	ldr	r5, [pc, #24]	; (504c <rtc_count_set_count+0x3c>)
    5032:	0020      	movs	r0, r4
    5034:	47a8      	blx	r5
    5036:	2800      	cmp	r0, #0
    5038:	d1fb      	bne.n	5032 <rtc_count_set_count+0x22>
		/* Wait for synchronization */
	}
	return STATUS_OK;
}
    503a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if(count_value > 0xffff){
    503c:	4b04      	ldr	r3, [pc, #16]	; (5050 <rtc_count_set_count+0x40>)
				return STATUS_ERR_INVALID_ARG;
    503e:	2017      	movs	r0, #23
			if(count_value > 0xffff){
    5040:	429e      	cmp	r6, r3
    5042:	d8fa      	bhi.n	503a <rtc_count_set_count+0x2a>
			rtc_module->MODE1.COUNT.reg = (uint32_t)count_value;
    5044:	b2b6      	uxth	r6, r6
    5046:	833e      	strh	r6, [r7, #24]
			break;
    5048:	e7f2      	b.n	5030 <rtc_count_set_count+0x20>
    504a:	46c0      	nop			; (mov r8, r8)
    504c:	00004f59 	.word	0x00004f59
    5050:	0000ffff 	.word	0x0000ffff

00005054 <rtc_count_get_count>:
 * Returns the current count value.
 *
 * \return The current counter value as a 32-bit unsigned integer.
 */
uint32_t rtc_count_get_count(struct rtc_module *const module)
{
    5054:	b570      	push	{r4, r5, r6, lr}
    5056:	0004      	movs	r4, r0
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    5058:	6806      	ldr	r6, [r0, #0]

	/* Initialize return value. */
	uint32_t ret_val;

	while (rtc_count_is_syncing(module)) {
    505a:	4d08      	ldr	r5, [pc, #32]	; (507c <rtc_count_get_count+0x28>)
    505c:	0020      	movs	r0, r4
    505e:	47a8      	blx	r5
    5060:	2800      	cmp	r0, #0
    5062:	d1fb      	bne.n	505c <rtc_count_get_count+0x8>
		/* Wait for synchronization */
	}

	/* Read value based on mode. */
	switch (module->mode) {
    5064:	7923      	ldrb	r3, [r4, #4]
    5066:	2b00      	cmp	r3, #0
    5068:	d004      	beq.n	5074 <rtc_count_get_count+0x20>
			break;

		default:
			Assert(false);
			/* Counter not initialized. Assume counter value 0.*/
			ret_val = 0;
    506a:	2000      	movs	r0, #0
	switch (module->mode) {
    506c:	2b01      	cmp	r3, #1
    506e:	d100      	bne.n	5072 <rtc_count_get_count+0x1e>
			ret_val = rtc_module->MODE0.COUNT.reg;
    5070:	69b0      	ldr	r0, [r6, #24]
			break;
	}

	return ret_val;
}
    5072:	bd70      	pop	{r4, r5, r6, pc}
			ret_val = (uint32_t)rtc_module->MODE1.COUNT.reg;
    5074:	8b30      	ldrh	r0, [r6, #24]
    5076:	b280      	uxth	r0, r0
			break;
    5078:	e7fb      	b.n	5072 <rtc_count_get_count+0x1e>
    507a:	46c0      	nop			; (mov r8, r8)
    507c:	00004f59 	.word	0x00004f59

00005080 <rtc_count_set_compare>:
 */
enum status_code rtc_count_set_compare(
		struct rtc_module *const module,
		const uint32_t comp_value,
		const enum rtc_count_compare comp_index)
{
    5080:	b5f0      	push	{r4, r5, r6, r7, lr}
    5082:	b083      	sub	sp, #12
    5084:	0004      	movs	r4, r0
    5086:	9101      	str	r1, [sp, #4]
    5088:	0015      	movs	r5, r2
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    508a:	6806      	ldr	r6, [r0, #0]

	while (rtc_count_is_syncing(module)) {
    508c:	4f13      	ldr	r7, [pc, #76]	; (50dc <rtc_count_set_compare+0x5c>)
    508e:	0020      	movs	r0, r4
    5090:	47b8      	blx	r7
    5092:	2800      	cmp	r0, #0
    5094:	d1fb      	bne.n	508e <rtc_count_set_compare+0xe>
		/* Wait for synchronization */
	}

	/* Set compare values based on operation mode. */
	switch (module->mode) {
    5096:	7923      	ldrb	r3, [r4, #4]
    5098:	2b00      	cmp	r3, #0
    509a:	d00e      	beq.n	50ba <rtc_count_set_compare+0x3a>
    509c:	2b01      	cmp	r3, #1
    509e:	d119      	bne.n	50d4 <rtc_count_set_compare+0x54>
		case RTC_COUNT_MODE_32BIT:
			/* Check sanity of comp_index. */
			if ((uint32_t)comp_index > RTC_COMP32_NUM) {
				return STATUS_ERR_INVALID_ARG;
    50a0:	3017      	adds	r0, #23
			if ((uint32_t)comp_index > RTC_COMP32_NUM) {
    50a2:	2d01      	cmp	r5, #1
    50a4:	d817      	bhi.n	50d6 <rtc_count_set_compare+0x56>
			}

			/* Set compare value for COMP. */
			rtc_module->MODE0.COMP[comp_index].reg = comp_value;
    50a6:	3508      	adds	r5, #8
    50a8:	00ad      	lsls	r5, r5, #2
    50aa:	9b01      	ldr	r3, [sp, #4]
    50ac:	51ab      	str	r3, [r5, r6]
		default:
			Assert(false);
			return STATUS_ERR_BAD_FORMAT;
	}

	while (rtc_count_is_syncing(module)) {
    50ae:	4d0b      	ldr	r5, [pc, #44]	; (50dc <rtc_count_set_compare+0x5c>)
    50b0:	0020      	movs	r0, r4
    50b2:	47a8      	blx	r5
    50b4:	2800      	cmp	r0, #0
    50b6:	d1fb      	bne.n	50b0 <rtc_count_set_compare+0x30>
    50b8:	e00d      	b.n	50d6 <rtc_count_set_compare+0x56>
				return STATUS_ERR_INVALID_ARG;
    50ba:	2017      	movs	r0, #23
			if ((uint32_t)comp_index > RTC_NUM_OF_COMP16) {
    50bc:	2d02      	cmp	r5, #2
    50be:	d80a      	bhi.n	50d6 <rtc_count_set_compare+0x56>
			if (comp_value > 0xffff) {
    50c0:	4b07      	ldr	r3, [pc, #28]	; (50e0 <rtc_count_set_compare+0x60>)
    50c2:	9a01      	ldr	r2, [sp, #4]
    50c4:	429a      	cmp	r2, r3
    50c6:	d806      	bhi.n	50d6 <rtc_count_set_compare+0x56>
			rtc_module->MODE1.COMP[comp_index].reg = comp_value & 0xffff;
    50c8:	466b      	mov	r3, sp
    50ca:	889b      	ldrh	r3, [r3, #4]
    50cc:	3510      	adds	r5, #16
    50ce:	006d      	lsls	r5, r5, #1
    50d0:	53ab      	strh	r3, [r5, r6]
			break;
    50d2:	e7ec      	b.n	50ae <rtc_count_set_compare+0x2e>
			return STATUS_ERR_BAD_FORMAT;
    50d4:	201a      	movs	r0, #26
		/* Wait for synchronization */
	}

	/* Return status if everything is OK. */
	return STATUS_OK;
}
    50d6:	b003      	add	sp, #12
    50d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    50da:	46c0      	nop			; (mov r8, r8)
    50dc:	00004f59 	.word	0x00004f59
    50e0:	0000ffff 	.word	0x0000ffff

000050e4 <rtc_count_init>:
{
    50e4:	b570      	push	{r4, r5, r6, lr}
    50e6:	0004      	movs	r4, r0
    50e8:	0015      	movs	r5, r2
	module->hw = hw;
    50ea:	6001      	str	r1, [r0, #0]
			MCLK->APBAMASK.reg |= mask;
    50ec:	4a1f      	ldr	r2, [pc, #124]	; (516c <rtc_count_init+0x88>)
    50ee:	6951      	ldr	r1, [r2, #20]
    50f0:	2380      	movs	r3, #128	; 0x80
    50f2:	005b      	lsls	r3, r3, #1
    50f4:	430b      	orrs	r3, r1
    50f6:	6153      	str	r3, [r2, #20]
	OSC32KCTRL->RTCCTRL.reg = RTC_CLOCK_SOURCE;
    50f8:	2205      	movs	r2, #5
    50fa:	4b1d      	ldr	r3, [pc, #116]	; (5170 <rtc_count_init+0x8c>)
    50fc:	611a      	str	r2, [r3, #16]
	rtc_count_reset(module);
    50fe:	4b1d      	ldr	r3, [pc, #116]	; (5174 <rtc_count_init+0x90>)
    5100:	4798      	blx	r3
	module->mode                = config->mode;
    5102:	78ab      	ldrb	r3, [r5, #2]
    5104:	7123      	strb	r3, [r4, #4]
	_rtc_instance[0] = module;
    5106:	4b1c      	ldr	r3, [pc, #112]	; (5178 <rtc_count_init+0x94>)
    5108:	601c      	str	r4, [r3, #0]
	Rtc *const rtc_module = module->hw;
    510a:	6822      	ldr	r2, [r4, #0]
				    | (config->enable_read_sync << RTC_MODE0_CTRLA_COUNTSYNC_Pos)
    510c:	792b      	ldrb	r3, [r5, #4]
    510e:	03db      	lsls	r3, r3, #15
				    | config->prescaler;
    5110:	8829      	ldrh	r1, [r5, #0]
    5112:	430b      	orrs	r3, r1
    5114:	b29b      	uxth	r3, r3
	rtc_module->MODE0.CTRLA.reg = RTC_MODE0_CTRLA_MODE(0)
    5116:	8013      	strh	r3, [r2, #0]
	switch (config->mode) {
    5118:	78ab      	ldrb	r3, [r5, #2]
    511a:	2b00      	cmp	r3, #0
    511c:	d013      	beq.n	5146 <rtc_count_init+0x62>
			return STATUS_ERR_INVALID_ARG;
    511e:	2017      	movs	r0, #23
	switch (config->mode) {
    5120:	2b01      	cmp	r3, #1
    5122:	d10f      	bne.n	5144 <rtc_count_init+0x60>
			rtc_module->MODE0.CTRLA.reg |= RTC_MODE0_CTRLA_MODE(0);
    5124:	8813      	ldrh	r3, [r2, #0]
    5126:	b29b      	uxth	r3, r3
    5128:	8013      	strh	r3, [r2, #0]
			if (config->clear_on_match) {
    512a:	78eb      	ldrb	r3, [r5, #3]
    512c:	2b00      	cmp	r3, #0
    512e:	d003      	beq.n	5138 <rtc_count_init+0x54>
				rtc_module->MODE0.CTRLA.reg |= RTC_MODE0_CTRLA_MATCHCLR;
    5130:	8813      	ldrh	r3, [r2, #0]
    5132:	2180      	movs	r1, #128	; 0x80
    5134:	430b      	orrs	r3, r1
    5136:	8013      	strh	r3, [r2, #0]
				rtc_count_set_compare(module, config->compare_values[i],
    5138:	68a9      	ldr	r1, [r5, #8]
    513a:	2200      	movs	r2, #0
    513c:	0020      	movs	r0, r4
    513e:	4b0f      	ldr	r3, [pc, #60]	; (517c <rtc_count_init+0x98>)
    5140:	4798      	blx	r3
	return STATUS_OK;
    5142:	2000      	movs	r0, #0
}
    5144:	bd70      	pop	{r4, r5, r6, pc}
			rtc_module->MODE1.CTRLA.reg |= RTC_MODE1_CTRLA_MODE(1);
    5146:	8813      	ldrh	r3, [r2, #0]
    5148:	2104      	movs	r1, #4
    514a:	430b      	orrs	r3, r1
    514c:	8013      	strh	r3, [r2, #0]
			if (config->clear_on_match) {
    514e:	78eb      	ldrb	r3, [r5, #3]
				return STATUS_ERR_INVALID_ARG;
    5150:	2017      	movs	r0, #23
			if (config->clear_on_match) {
    5152:	2b00      	cmp	r3, #0
    5154:	d1f6      	bne.n	5144 <rtc_count_init+0x60>
				rtc_count_set_compare(module, config->compare_values[i],
    5156:	2200      	movs	r2, #0
    5158:	68a9      	ldr	r1, [r5, #8]
    515a:	0020      	movs	r0, r4
    515c:	4e07      	ldr	r6, [pc, #28]	; (517c <rtc_count_init+0x98>)
    515e:	47b0      	blx	r6
    5160:	68e9      	ldr	r1, [r5, #12]
    5162:	2201      	movs	r2, #1
    5164:	0020      	movs	r0, r4
    5166:	47b0      	blx	r6
	return STATUS_OK;
    5168:	2000      	movs	r0, #0
    516a:	e7eb      	b.n	5144 <rtc_count_init+0x60>
    516c:	40000400 	.word	0x40000400
    5170:	40001000 	.word	0x40001000
    5174:	00004fd9 	.word	0x00004fd9
    5178:	20002234 	.word	0x20002234
    517c:	00005081 	.word	0x00005081

00005180 <rtc_count_register_callback>:
{

	enum status_code status = STATUS_OK;

	/* Overflow callback */
	if (callback_type == RTC_COUNT_CALLBACK_OVERFLOW
    5180:	2a0a      	cmp	r2, #10
    5182:	d009      	beq.n	5198 <rtc_count_register_callback+0x18>
#ifdef FEATURE_RTC_TAMPER_DETECTION
		|| callback_type == RTC_COUNT_CALLBACK_TAMPER
#endif
		|| (callback_type >= RTC_COUNT_CALLBACK_PERIODIC_INTERVAL_0
    5184:	2a07      	cmp	r2, #7
    5186:	d907      	bls.n	5198 <rtc_count_register_callback+0x18>
			&& callback_type <= RTC_COUNT_CALLBACK_PERIODIC_INTERVAL_7)) {
		status = STATUS_OK;
	} else {
		/* Make sure callback type can be registered */
		switch (module->mode) {
    5188:	7903      	ldrb	r3, [r0, #4]
    518a:	2b00      	cmp	r3, #0
    518c:	d010      	beq.n	51b0 <rtc_count_register_callback+0x30>
    518e:	2b01      	cmp	r3, #1
    5190:	d112      	bne.n	51b8 <rtc_count_register_callback+0x38>
    5192:	3316      	adds	r3, #22
		case RTC_COUNT_MODE_32BIT:
			/* Check sanity for 32-bit mode. */
			if (callback_type > (RTC_COMP32_NUM + RTC_PER_NUM)) {
    5194:	2a09      	cmp	r2, #9
    5196:	d809      	bhi.n	51ac <rtc_count_register_callback+0x2c>
		}
	}

	if (status == STATUS_OK) {
		/* Register callback */
		module->callbacks[callback_type] = callback;
    5198:	1c93      	adds	r3, r2, #2
    519a:	009b      	lsls	r3, r3, #2
    519c:	5019      	str	r1, [r3, r0]
		/* Set corresponding bit to set callback as registered */
		module->registered_callback |= (1 << callback_type);
    519e:	8e83      	ldrh	r3, [r0, #52]	; 0x34
    51a0:	2101      	movs	r1, #1
    51a2:	4091      	lsls	r1, r2
    51a4:	430b      	orrs	r3, r1
    51a6:	b29b      	uxth	r3, r3
    51a8:	8683      	strh	r3, [r0, #52]	; 0x34
    51aa:	2300      	movs	r3, #0
	}

	return status;
}
    51ac:	0018      	movs	r0, r3
    51ae:	4770      	bx	lr
    51b0:	2317      	movs	r3, #23
			if (callback_type > (RTC_NUM_OF_COMP16 + RTC_PER_NUM)) {
    51b2:	2a0a      	cmp	r2, #10
    51b4:	d8fa      	bhi.n	51ac <rtc_count_register_callback+0x2c>
    51b6:	e7ef      	b.n	5198 <rtc_count_register_callback+0x18>
			status = STATUS_ERR_INVALID_ARG;
    51b8:	2317      	movs	r3, #23
    51ba:	e7f7      	b.n	51ac <rtc_count_register_callback+0x2c>

000051bc <rtc_count_enable_callback>:
 * \param[in]     callback_type Callback type to enable
 */
void rtc_count_enable_callback(
		struct rtc_module *const module,
		enum rtc_count_callback callback_type)
{
    51bc:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    51be:	6802      	ldr	r2, [r0, #0]

	if (callback_type == RTC_COUNT_CALLBACK_OVERFLOW) {
    51c0:	290a      	cmp	r1, #10
    51c2:	d011      	beq.n	51e8 <rtc_count_enable_callback+0x2c>
		rtc_module->MODE0.INTENSET.reg = RTC_MODE0_INTFLAG_OVF;
#ifdef FEATURE_RTC_TAMPER_DETECTION
	} else if (callback_type == RTC_COUNT_CALLBACK_TAMPER) {
		rtc_module->MODE0.INTENSET.reg = RTC_MODE0_INTFLAG_TAMPER;
#endif
	} else if (callback_type >= RTC_COUNT_CALLBACK_PERIODIC_INTERVAL_0
    51c4:	2907      	cmp	r1, #7
    51c6:	d912      	bls.n	51ee <rtc_count_enable_callback+0x32>
			&& callback_type <= RTC_COUNT_CALLBACK_PERIODIC_INTERVAL_7) {
		rtc_module->MODE0.INTENSET.reg = RTC_MODE1_INTFLAG_PER(1 << callback_type);
	}else {
		rtc_module->MODE0.INTENSET.reg = RTC_MODE1_INTFLAG_CMP(1 << (callback_type - RTC_PER_NUM));
    51c8:	2380      	movs	r3, #128	; 0x80
    51ca:	005b      	lsls	r3, r3, #1
    51cc:	000c      	movs	r4, r1
    51ce:	3c08      	subs	r4, #8
    51d0:	40a3      	lsls	r3, r4
    51d2:	24c0      	movs	r4, #192	; 0xc0
    51d4:	00a4      	lsls	r4, r4, #2
    51d6:	4023      	ands	r3, r4
    51d8:	8153      	strh	r3, [r2, #10]
	}
	/* Mark callback as enabled. */
	module->enabled_callback |= (1 << callback_type);
    51da:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
    51dc:	2201      	movs	r2, #1
    51de:	408a      	lsls	r2, r1
    51e0:	4313      	orrs	r3, r2
    51e2:	b29b      	uxth	r3, r3
    51e4:	86c3      	strh	r3, [r0, #54]	; 0x36
}
    51e6:	bd10      	pop	{r4, pc}
		rtc_module->MODE0.INTENSET.reg = RTC_MODE0_INTFLAG_OVF;
    51e8:	4b04      	ldr	r3, [pc, #16]	; (51fc <rtc_count_enable_callback+0x40>)
    51ea:	8153      	strh	r3, [r2, #10]
    51ec:	e7f5      	b.n	51da <rtc_count_enable_callback+0x1e>
		rtc_module->MODE0.INTENSET.reg = RTC_MODE1_INTFLAG_PER(1 << callback_type);
    51ee:	2401      	movs	r4, #1
    51f0:	408c      	lsls	r4, r1
    51f2:	23ff      	movs	r3, #255	; 0xff
    51f4:	4023      	ands	r3, r4
    51f6:	8153      	strh	r3, [r2, #10]
    51f8:	e7ef      	b.n	51da <rtc_count_enable_callback+0x1e>
    51fa:	46c0      	nop			; (mov r8, r8)
    51fc:	ffff8000 	.word	0xffff8000

00005200 <rtc_count_disable_callback>:
 * \param[in]     callback_type Callback type to disable
 */
void rtc_count_disable_callback(
		struct rtc_module *const module,
		enum rtc_count_callback callback_type)
{
    5200:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    5202:	6802      	ldr	r2, [r0, #0]

	/* Disable interrupt */
	if (callback_type == RTC_COUNT_CALLBACK_OVERFLOW) {
    5204:	290a      	cmp	r1, #10
    5206:	d010      	beq.n	522a <rtc_count_disable_callback+0x2a>
		rtc_module->MODE0.INTENCLR.reg = RTC_MODE0_INTFLAG_OVF;
#ifdef FEATURE_RTC_TAMPER_DETECTION
	} else if (callback_type == RTC_COUNT_CALLBACK_TAMPER) {
		rtc_module->MODE0.INTENCLR.reg = RTC_MODE0_INTFLAG_TAMPER;
#endif
	} else if(callback_type >= RTC_COUNT_CALLBACK_PERIODIC_INTERVAL_0
    5208:	2907      	cmp	r1, #7
    520a:	d911      	bls.n	5230 <rtc_count_disable_callback+0x30>
			&& callback_type <= RTC_COUNT_CALLBACK_PERIODIC_INTERVAL_7){
		rtc_module->MODE0.INTENCLR.reg = RTC_MODE1_INTFLAG_PER(1 << callback_type);;
	}else {
		rtc_module->MODE0.INTENCLR.reg = RTC_MODE1_INTFLAG_CMP(1 << (callback_type - RTC_PER_NUM));
    520c:	2380      	movs	r3, #128	; 0x80
    520e:	005b      	lsls	r3, r3, #1
    5210:	000c      	movs	r4, r1
    5212:	3c08      	subs	r4, #8
    5214:	40a3      	lsls	r3, r4
    5216:	24c0      	movs	r4, #192	; 0xc0
    5218:	00a4      	lsls	r4, r4, #2
    521a:	4023      	ands	r3, r4
    521c:	8113      	strh	r3, [r2, #8]
	}

	/* Mark callback as disabled. */
	module->enabled_callback &= ~(1 << callback_type);
    521e:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
    5220:	2201      	movs	r2, #1
    5222:	408a      	lsls	r2, r1
    5224:	4393      	bics	r3, r2
    5226:	86c3      	strh	r3, [r0, #54]	; 0x36
}
    5228:	bd10      	pop	{r4, pc}
		rtc_module->MODE0.INTENCLR.reg = RTC_MODE0_INTFLAG_OVF;
    522a:	4b04      	ldr	r3, [pc, #16]	; (523c <rtc_count_disable_callback+0x3c>)
    522c:	8113      	strh	r3, [r2, #8]
    522e:	e7f6      	b.n	521e <rtc_count_disable_callback+0x1e>
		rtc_module->MODE0.INTENCLR.reg = RTC_MODE1_INTFLAG_PER(1 << callback_type);;
    5230:	2401      	movs	r4, #1
    5232:	408c      	lsls	r4, r1
    5234:	23ff      	movs	r3, #255	; 0xff
    5236:	4023      	ands	r3, r4
    5238:	8113      	strh	r3, [r2, #8]
    523a:	e7f0      	b.n	521e <rtc_count_disable_callback+0x1e>
    523c:	ffff8000 	.word	0xffff8000

00005240 <RTC_Handler>:
/**
 * \internal ISR handler for RTC
 */
#if (RTC_INST_NUM == 1)
void RTC_Handler(void)
{
    5240:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5242:	46de      	mov	lr, fp
    5244:	4657      	mov	r7, sl
    5246:	464e      	mov	r6, r9
    5248:	4645      	mov	r5, r8
    524a:	b5e0      	push	{r5, r6, r7, lr}
	struct rtc_module *module = _rtc_instance[instance_index];
    524c:	4b2b      	ldr	r3, [pc, #172]	; (52fc <RTC_Handler+0xbc>)
    524e:	681b      	ldr	r3, [r3, #0]
    5250:	469a      	mov	sl, r3
	Rtc *const rtc_module = module->hw;
    5252:	681e      	ldr	r6, [r3, #0]
	uint16_t callback_mask = module->enabled_callback;
    5254:	8edb      	ldrh	r3, [r3, #54]	; 0x36
	callback_mask &= module->registered_callback;
    5256:	4652      	mov	r2, sl
    5258:	8e92      	ldrh	r2, [r2, #52]	; 0x34
    525a:	401a      	ands	r2, r3
    525c:	4690      	mov	r8, r2
	uint16_t interrupt_status = rtc_module->MODE0.INTFLAG.reg;
    525e:	89b2      	ldrh	r2, [r6, #12]
	interrupt_status &= rtc_module->MODE0.INTENSET.reg;
    5260:	8973      	ldrh	r3, [r6, #10]
    5262:	4013      	ands	r3, r2
	if (interrupt_status & RTC_MODE0_INTFLAG_OVF) {
    5264:	b21a      	sxth	r2, r3
    5266:	2a00      	cmp	r2, #0
    5268:	db08      	blt.n	527c <RTC_Handler+0x3c>
    526a:	27ff      	movs	r7, #255	; 0xff
    526c:	401f      	ands	r7, r3
	} else if (interrupt_status & RTC_MODE1_INTFLAG_PER(0xff)) {
    526e:	d02a      	beq.n	52c6 <RTC_Handler+0x86>
    5270:	2400      	movs	r4, #0
			if ((interrupt_status & RTC_MODE1_INTFLAG_PER(1 << i))
    5272:	2301      	movs	r3, #1
    5274:	4699      	mov	r9, r3
			rtc_module->MODE0.INTFLAG.reg = RTC_MODE1_INTFLAG_PER(1<<i);
    5276:	33fe      	adds	r3, #254	; 0xfe
    5278:	469b      	mov	fp, r3
    527a:	e014      	b.n	52a6 <RTC_Handler+0x66>
		if (callback_mask & (1 << RTC_COUNT_CALLBACK_OVERFLOW)) {
    527c:	4643      	mov	r3, r8
    527e:	055b      	lsls	r3, r3, #21
    5280:	d407      	bmi.n	5292 <RTC_Handler+0x52>
		rtc_module->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_OVF;
    5282:	4b1f      	ldr	r3, [pc, #124]	; (5300 <RTC_Handler+0xc0>)
    5284:	81b3      	strh	r3, [r6, #12]
	_rtc_interrupt_handler(0);
}
    5286:	bc3c      	pop	{r2, r3, r4, r5}
    5288:	4690      	mov	r8, r2
    528a:	4699      	mov	r9, r3
    528c:	46a2      	mov	sl, r4
    528e:	46ab      	mov	fp, r5
    5290:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			module->callbacks[RTC_COUNT_CALLBACK_OVERFLOW]();
    5292:	4653      	mov	r3, sl
    5294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    5296:	4798      	blx	r3
    5298:	e7f3      	b.n	5282 <RTC_Handler+0x42>
			rtc_module->MODE0.INTFLAG.reg = RTC_MODE1_INTFLAG_PER(1<<i);
    529a:	465b      	mov	r3, fp
    529c:	401d      	ands	r5, r3
    529e:	81b5      	strh	r5, [r6, #12]
    52a0:	3401      	adds	r4, #1
		for ( i = 0;i < RTC_PER_NUM;i++) {
    52a2:	2c08      	cmp	r4, #8
    52a4:	d0ef      	beq.n	5286 <RTC_Handler+0x46>
			if ((interrupt_status & RTC_MODE1_INTFLAG_PER(1 << i))
    52a6:	0023      	movs	r3, r4
    52a8:	464d      	mov	r5, r9
    52aa:	40a5      	lsls	r5, r4
    52ac:	422f      	tst	r7, r5
    52ae:	d0f4      	beq.n	529a <RTC_Handler+0x5a>
			  && (callback_mask & (1 << i))) {
    52b0:	4642      	mov	r2, r8
    52b2:	4122      	asrs	r2, r4
    52b4:	4649      	mov	r1, r9
    52b6:	4211      	tst	r1, r2
    52b8:	d0ef      	beq.n	529a <RTC_Handler+0x5a>
				module->callbacks[i]();
    52ba:	3302      	adds	r3, #2
    52bc:	009b      	lsls	r3, r3, #2
    52be:	4652      	mov	r2, sl
    52c0:	589b      	ldr	r3, [r3, r2]
    52c2:	4798      	blx	r3
    52c4:	e7e9      	b.n	529a <RTC_Handler+0x5a>
	}else if (interrupt_status & RTC_MODE1_INTFLAG_CMP(1 << 0)) {
    52c6:	05da      	lsls	r2, r3, #23
    52c8:	d50a      	bpl.n	52e0 <RTC_Handler+0xa0>
		if (callback_mask & (1 << RTC_COUNT_CALLBACK_COMPARE_0)) {
    52ca:	4643      	mov	r3, r8
    52cc:	05db      	lsls	r3, r3, #23
    52ce:	d403      	bmi.n	52d8 <RTC_Handler+0x98>
		rtc_module->MODE0.INTFLAG.reg = RTC_MODE1_INTFLAG_CMP(1 << 0);
    52d0:	2380      	movs	r3, #128	; 0x80
    52d2:	005b      	lsls	r3, r3, #1
    52d4:	81b3      	strh	r3, [r6, #12]
    52d6:	e7d6      	b.n	5286 <RTC_Handler+0x46>
			module->callbacks[RTC_COUNT_CALLBACK_COMPARE_0]();
    52d8:	4653      	mov	r3, sl
    52da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    52dc:	4798      	blx	r3
    52de:	e7f7      	b.n	52d0 <RTC_Handler+0x90>
	} else if (interrupt_status & RTC_MODE1_INTFLAG_CMP(1 << 1)) {
    52e0:	059b      	lsls	r3, r3, #22
    52e2:	d5d0      	bpl.n	5286 <RTC_Handler+0x46>
		if (callback_mask & (1 << RTC_COUNT_CALLBACK_COMPARE_1)) {
    52e4:	4643      	mov	r3, r8
    52e6:	059b      	lsls	r3, r3, #22
    52e8:	d403      	bmi.n	52f2 <RTC_Handler+0xb2>
		rtc_module->MODE0.INTFLAG.reg = RTC_MODE1_INTFLAG_CMP(1 << 1);
    52ea:	2380      	movs	r3, #128	; 0x80
    52ec:	009b      	lsls	r3, r3, #2
    52ee:	81b3      	strh	r3, [r6, #12]
}
    52f0:	e7c9      	b.n	5286 <RTC_Handler+0x46>
			module->callbacks[RTC_COUNT_CALLBACK_COMPARE_1]();
    52f2:	4653      	mov	r3, sl
    52f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    52f6:	4798      	blx	r3
    52f8:	e7f7      	b.n	52ea <RTC_Handler+0xaa>
    52fa:	46c0      	nop			; (mov r8, r8)
    52fc:	20002234 	.word	0x20002234
    5300:	ffff8000 	.word	0xffff8000

00005304 <_i2c_master_wait_for_sync>:
	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
    5304:	6801      	ldr	r1, [r0, #0]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
    5306:	2207      	movs	r2, #7
    5308:	69cb      	ldr	r3, [r1, #28]
	while (i2c_master_is_syncing(module)) {
    530a:	421a      	tst	r2, r3
    530c:	d1fc      	bne.n	5308 <_i2c_master_wait_for_sync+0x4>
}
    530e:	4770      	bx	lr

00005310 <i2c_master_init>:
 */
enum status_code i2c_master_init(
		struct i2c_master_module *const module,
		Sercom *const hw,
		const struct i2c_master_config *const config)
{
    5310:	b5f0      	push	{r4, r5, r6, r7, lr}
    5312:	46d6      	mov	lr, sl
    5314:	464f      	mov	r7, r9
    5316:	4646      	mov	r6, r8
    5318:	b5c0      	push	{r6, r7, lr}
    531a:	b08a      	sub	sp, #40	; 0x28
    531c:	0007      	movs	r7, r0
    531e:	000e      	movs	r6, r1
    5320:	0014      	movs	r4, r2
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize software module */
	module->hw = hw;
    5322:	6039      	str	r1, [r7, #0]

	SercomI2cm *const i2c_module = &(module->hw->I2CM);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    5324:	0008      	movs	r0, r1
    5326:	4ba5      	ldr	r3, [pc, #660]	; (55bc <i2c_master_init+0x2ac>)
    5328:	4798      	blx	r3

#if (SAML22) || (SAMC20)
	pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#elif (SAML21) || (SAMR30) || (SAMR34) || (SAMR35) || (WLR089)
	if (sercom_index == 5) {
    532a:	2805      	cmp	r0, #5
    532c:	d100      	bne.n	5330 <i2c_master_init+0x20>
    532e:	e13d      	b.n	55ac <i2c_master_init+0x29c>
		pm_index     = MCLK_APBDMASK_SERCOM5_Pos;
		gclk_index   = SERCOM5_GCLK_ID_CORE;
	} else {
		pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    5330:	0005      	movs	r5, r0
    5332:	3512      	adds	r5, #18
			MCLK->APBCMASK.reg |= mask;
    5334:	4aa2      	ldr	r2, [pc, #648]	; (55c0 <i2c_master_init+0x2b0>)
    5336:	69d1      	ldr	r1, [r2, #28]
	/* Turn on module in PM */
#if (SAML21) || (SAMR30) || (SAMR34) || (SAMR35) || (WLR089)
	if (sercom_index == 5) {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    5338:	2301      	movs	r3, #1
    533a:	4083      	lsls	r3, r0
    533c:	430b      	orrs	r3, r1
    533e:	61d3      	str	r3, [r2, #28]
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
    5340:	a909      	add	r1, sp, #36	; 0x24
    5342:	7b23      	ldrb	r3, [r4, #12]
    5344:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    5346:	b2ed      	uxtb	r5, r5
    5348:	0028      	movs	r0, r5
    534a:	4b9e      	ldr	r3, [pc, #632]	; (55c4 <i2c_master_init+0x2b4>)
    534c:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    534e:	0028      	movs	r0, r5
    5350:	4b9d      	ldr	r3, [pc, #628]	; (55c8 <i2c_master_init+0x2b8>)
    5352:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    5354:	7b20      	ldrb	r0, [r4, #12]
    5356:	2100      	movs	r1, #0
    5358:	4b9c      	ldr	r3, [pc, #624]	; (55cc <i2c_master_init+0x2bc>)
    535a:	4798      	blx	r3

	/* Check if module is enabled. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
    535c:	6833      	ldr	r3, [r6, #0]
		return STATUS_ERR_DENIED;
    535e:	201c      	movs	r0, #28
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
    5360:	079b      	lsls	r3, r3, #30
    5362:	d505      	bpl.n	5370 <i2c_master_init+0x60>
	/* Set sercom module to operate in I2C master mode. */
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE(0x5);

	/* Set config and return status. */
	return _i2c_master_set_config(module, config);
}
    5364:	b00a      	add	sp, #40	; 0x28
    5366:	bc1c      	pop	{r2, r3, r4}
    5368:	4690      	mov	r8, r2
    536a:	4699      	mov	r9, r3
    536c:	46a2      	mov	sl, r4
    536e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
    5370:	6833      	ldr	r3, [r6, #0]
		return STATUS_BUSY;
    5372:	3817      	subs	r0, #23
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
    5374:	07db      	lsls	r3, r3, #31
    5376:	d4f5      	bmi.n	5364 <i2c_master_init+0x54>
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    5378:	6838      	ldr	r0, [r7, #0]
    537a:	4b90      	ldr	r3, [pc, #576]	; (55bc <i2c_master_init+0x2ac>)
    537c:	4699      	mov	r9, r3
    537e:	4798      	blx	r3
    5380:	0005      	movs	r5, r0
	_sercom_set_handler(instance_index, _i2c_master_interrupt_handler);
    5382:	4993      	ldr	r1, [pc, #588]	; (55d0 <i2c_master_init+0x2c0>)
    5384:	4b93      	ldr	r3, [pc, #588]	; (55d4 <i2c_master_init+0x2c4>)
    5386:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    5388:	00ad      	lsls	r5, r5, #2
    538a:	4b93      	ldr	r3, [pc, #588]	; (55d8 <i2c_master_init+0x2c8>)
    538c:	50ef      	str	r7, [r5, r3]
	module->registered_callback = 0;
    538e:	2300      	movs	r3, #0
    5390:	763b      	strb	r3, [r7, #24]
	module->enabled_callback = 0;
    5392:	767b      	strb	r3, [r7, #25]
	module->buffer_length = 0;
    5394:	2500      	movs	r5, #0
    5396:	837b      	strh	r3, [r7, #26]
	module->buffer_remaining = 0;
    5398:	83bb      	strh	r3, [r7, #28]
	module->status = STATUS_OK;
    539a:	2225      	movs	r2, #37	; 0x25
    539c:	54bd      	strb	r5, [r7, r2]
	module->buffer = NULL;
    539e:	623b      	str	r3, [r7, #32]
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE(0x5);
    53a0:	3314      	adds	r3, #20
    53a2:	6033      	str	r3, [r6, #0]
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    53a4:	683b      	ldr	r3, [r7, #0]
    53a6:	4698      	mov	r8, r3
	uint8_t sercom_index = _sercom_get_sercom_inst_index(sercom_hw);
    53a8:	0018      	movs	r0, r3
    53aa:	47c8      	blx	r9
    53ac:	4681      	mov	r9, r0
    53ae:	2380      	movs	r3, #128	; 0x80
    53b0:	aa08      	add	r2, sp, #32
    53b2:	7013      	strb	r3, [r2, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    53b4:	7055      	strb	r5, [r2, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    53b6:	2301      	movs	r3, #1
    53b8:	7093      	strb	r3, [r2, #2]
	config->powersave    = false;
    53ba:	70d5      	strb	r5, [r2, #3]
	uint32_t pad0 = config->pinmux_pad0;
    53bc:	69e0      	ldr	r0, [r4, #28]
	uint32_t pad1 = config->pinmux_pad1;
    53be:	6a26      	ldr	r6, [r4, #32]
	if (pad0 == PINMUX_DEFAULT) {
    53c0:	2800      	cmp	r0, #0
    53c2:	d100      	bne.n	53c6 <i2c_master_init+0xb6>
    53c4:	e0af      	b.n	5526 <i2c_master_init+0x216>
	pin_conf.mux_position = pad0 & 0xFFFF;
    53c6:	ab08      	add	r3, sp, #32
    53c8:	7018      	strb	r0, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
    53ca:	2302      	movs	r3, #2
    53cc:	aa08      	add	r2, sp, #32
    53ce:	7053      	strb	r3, [r2, #1]
	system_pinmux_pin_set_config(pad0 >> 16, &pin_conf);
    53d0:	0c00      	lsrs	r0, r0, #16
    53d2:	b2c0      	uxtb	r0, r0
    53d4:	0011      	movs	r1, r2
    53d6:	4b81      	ldr	r3, [pc, #516]	; (55dc <i2c_master_init+0x2cc>)
    53d8:	4798      	blx	r3
	if (pad1 == PINMUX_DEFAULT) {
    53da:	2e00      	cmp	r6, #0
    53dc:	d100      	bne.n	53e0 <i2c_master_init+0xd0>
    53de:	e0a7      	b.n	5530 <i2c_master_init+0x220>
	pin_conf.mux_position = pad1 & 0xFFFF;
    53e0:	ab08      	add	r3, sp, #32
    53e2:	701e      	strb	r6, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
    53e4:	2302      	movs	r3, #2
    53e6:	aa08      	add	r2, sp, #32
    53e8:	7053      	strb	r3, [r2, #1]
	system_pinmux_pin_set_config(pad1 >> 16, &pin_conf);
    53ea:	0c36      	lsrs	r6, r6, #16
    53ec:	b2f0      	uxtb	r0, r6
    53ee:	0011      	movs	r1, r2
    53f0:	4b7a      	ldr	r3, [pc, #488]	; (55dc <i2c_master_init+0x2cc>)
    53f2:	4798      	blx	r3
	module->unknown_bus_state_timeout = config->unknown_bus_state_timeout;
    53f4:	8aa3      	ldrh	r3, [r4, #20]
    53f6:	80fb      	strh	r3, [r7, #6]
	module->buffer_timeout = config->buffer_timeout;
    53f8:	8ae3      	ldrh	r3, [r4, #22]
    53fa:	813b      	strh	r3, [r7, #8]
	if (config->run_in_standby || system_is_debugger_present()) {
    53fc:	7e23      	ldrb	r3, [r4, #24]
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
    53fe:	2280      	movs	r2, #128	; 0x80
	if (config->run_in_standby || system_is_debugger_present()) {
    5400:	2b00      	cmp	r3, #0
    5402:	d104      	bne.n	540e <i2c_master_init+0xfe>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    5404:	4b76      	ldr	r3, [pc, #472]	; (55e0 <i2c_master_init+0x2d0>)
    5406:	789b      	ldrb	r3, [r3, #2]
    5408:	079b      	lsls	r3, r3, #30
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
    540a:	0fdb      	lsrs	r3, r3, #31
    540c:	01da      	lsls	r2, r3, #7
	tmp_ctrla |= config->transfer_speed;
    540e:	68a1      	ldr	r1, [r4, #8]
    5410:	6923      	ldr	r3, [r4, #16]
    5412:	430b      	orrs	r3, r1
    5414:	4313      	orrs	r3, r2
	if (config->scl_low_timeout) {
    5416:	2224      	movs	r2, #36	; 0x24
    5418:	5ca2      	ldrb	r2, [r4, r2]
    541a:	2a00      	cmp	r2, #0
    541c:	d002      	beq.n	5424 <i2c_master_init+0x114>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_LOWTOUTEN;
    541e:	2280      	movs	r2, #128	; 0x80
    5420:	05d2      	lsls	r2, r2, #23
    5422:	4313      	orrs	r3, r2
		tmp_ctrla |= config->inactive_timeout;
    5424:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    5426:	4313      	orrs	r3, r2
	if (config->scl_stretch_only_after_ack_bit || (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED)) {
    5428:	222c      	movs	r2, #44	; 0x2c
    542a:	5ca2      	ldrb	r2, [r4, r2]
    542c:	2a00      	cmp	r2, #0
    542e:	d103      	bne.n	5438 <i2c_master_init+0x128>
    5430:	2280      	movs	r2, #128	; 0x80
    5432:	0492      	lsls	r2, r2, #18
    5434:	4291      	cmp	r1, r2
    5436:	d102      	bne.n	543e <i2c_master_init+0x12e>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SCLSM;
    5438:	2280      	movs	r2, #128	; 0x80
    543a:	0512      	lsls	r2, r2, #20
    543c:	4313      	orrs	r3, r2
	if (config->slave_scl_low_extend_timeout) {
    543e:	222d      	movs	r2, #45	; 0x2d
    5440:	5ca2      	ldrb	r2, [r4, r2]
    5442:	2a00      	cmp	r2, #0
    5444:	d002      	beq.n	544c <i2c_master_init+0x13c>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SEXTTOEN;
    5446:	2280      	movs	r2, #128	; 0x80
    5448:	0412      	lsls	r2, r2, #16
    544a:	4313      	orrs	r3, r2
	if (config->master_scl_low_extend_timeout) {
    544c:	222e      	movs	r2, #46	; 0x2e
    544e:	5ca2      	ldrb	r2, [r4, r2]
    5450:	2a00      	cmp	r2, #0
    5452:	d002      	beq.n	545a <i2c_master_init+0x14a>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_MEXTTOEN;
    5454:	2280      	movs	r2, #128	; 0x80
    5456:	03d2      	lsls	r2, r2, #15
    5458:	4313      	orrs	r3, r2
	i2c_module->CTRLA.reg |= tmp_ctrla;
    545a:	4642      	mov	r2, r8
    545c:	6812      	ldr	r2, [r2, #0]
    545e:	4313      	orrs	r3, r2
    5460:	4642      	mov	r2, r8
    5462:	6013      	str	r3, [r2, #0]
	i2c_module->CTRLB.reg = SERCOM_I2CM_CTRLB_SMEN;
    5464:	2380      	movs	r3, #128	; 0x80
    5466:	005b      	lsls	r3, r3, #1
    5468:	6053      	str	r3, [r2, #4]
	uint32_t fgclk       = system_gclk_chan_get_hz(SERCOM0_GCLK_ID_CORE + sercom_index);
    546a:	464d      	mov	r5, r9
    546c:	3512      	adds	r5, #18
    546e:	b2e8      	uxtb	r0, r5
    5470:	4b5c      	ldr	r3, [pc, #368]	; (55e4 <i2c_master_init+0x2d4>)
    5472:	4798      	blx	r3
    5474:	9007      	str	r0, [sp, #28]
	uint32_t fscl        = 1000 * config->baud_rate;
    5476:	23fa      	movs	r3, #250	; 0xfa
    5478:	009b      	lsls	r3, r3, #2
    547a:	6822      	ldr	r2, [r4, #0]
    547c:	435a      	muls	r2, r3
    547e:	4691      	mov	r9, r2
	uint32_t fscl_hs     = 1000 * config->baud_rate_high_speed;
    5480:	6863      	ldr	r3, [r4, #4]
    5482:	469a      	mov	sl, r3
	tmp_baud = (int32_t)(div_ceil(
    5484:	4d58      	ldr	r5, [pc, #352]	; (55e8 <i2c_master_init+0x2d8>)
    5486:	47a8      	blx	r5
    5488:	9000      	str	r0, [sp, #0]
    548a:	9101      	str	r1, [sp, #4]
    548c:	464b      	mov	r3, r9
    548e:	0058      	lsls	r0, r3, #1
    5490:	47a8      	blx	r5
    5492:	9002      	str	r0, [sp, #8]
    5494:	9103      	str	r1, [sp, #12]
    5496:	8e20      	ldrh	r0, [r4, #48]	; 0x30
    5498:	47a8      	blx	r5
    549a:	9004      	str	r0, [sp, #16]
    549c:	9105      	str	r1, [sp, #20]
    549e:	4f53      	ldr	r7, [pc, #332]	; (55ec <i2c_master_init+0x2dc>)
    54a0:	4a53      	ldr	r2, [pc, #332]	; (55f0 <i2c_master_init+0x2e0>)
    54a2:	4b54      	ldr	r3, [pc, #336]	; (55f4 <i2c_master_init+0x2e4>)
    54a4:	9800      	ldr	r0, [sp, #0]
    54a6:	9901      	ldr	r1, [sp, #4]
    54a8:	47b8      	blx	r7
    54aa:	0002      	movs	r2, r0
    54ac:	000b      	movs	r3, r1
    54ae:	9804      	ldr	r0, [sp, #16]
    54b0:	9905      	ldr	r1, [sp, #20]
    54b2:	47b8      	blx	r7
    54b4:	4e50      	ldr	r6, [pc, #320]	; (55f8 <i2c_master_init+0x2e8>)
    54b6:	2200      	movs	r2, #0
    54b8:	4b50      	ldr	r3, [pc, #320]	; (55fc <i2c_master_init+0x2ec>)
    54ba:	47b0      	blx	r6
    54bc:	9004      	str	r0, [sp, #16]
    54be:	9105      	str	r1, [sp, #20]
    54c0:	4648      	mov	r0, r9
    54c2:	47a8      	blx	r5
    54c4:	0002      	movs	r2, r0
    54c6:	000b      	movs	r3, r1
    54c8:	9804      	ldr	r0, [sp, #16]
    54ca:	9905      	ldr	r1, [sp, #20]
    54cc:	47b8      	blx	r7
    54ce:	0002      	movs	r2, r0
    54d0:	000b      	movs	r3, r1
    54d2:	4d4b      	ldr	r5, [pc, #300]	; (5600 <i2c_master_init+0x2f0>)
    54d4:	9800      	ldr	r0, [sp, #0]
    54d6:	9901      	ldr	r1, [sp, #4]
    54d8:	47a8      	blx	r5
    54da:	9a02      	ldr	r2, [sp, #8]
    54dc:	9b03      	ldr	r3, [sp, #12]
    54de:	47b0      	blx	r6
    54e0:	2200      	movs	r2, #0
    54e2:	4b48      	ldr	r3, [pc, #288]	; (5604 <i2c_master_init+0x2f4>)
    54e4:	47a8      	blx	r5
    54e6:	9a02      	ldr	r2, [sp, #8]
    54e8:	9b03      	ldr	r3, [sp, #12]
    54ea:	4d47      	ldr	r5, [pc, #284]	; (5608 <i2c_master_init+0x2f8>)
    54ec:	47a8      	blx	r5
    54ee:	4b47      	ldr	r3, [pc, #284]	; (560c <i2c_master_init+0x2fc>)
    54f0:	4798      	blx	r3
    54f2:	0005      	movs	r5, r0
	if (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED) {
    54f4:	2380      	movs	r3, #128	; 0x80
    54f6:	049b      	lsls	r3, r3, #18
    54f8:	68a2      	ldr	r2, [r4, #8]
    54fa:	429a      	cmp	r2, r3
    54fc:	d01e      	beq.n	553c <i2c_master_init+0x22c>
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
    54fe:	0003      	movs	r3, r0
    5500:	2040      	movs	r0, #64	; 0x40
    5502:	2dff      	cmp	r5, #255	; 0xff
    5504:	d900      	bls.n	5508 <i2c_master_init+0x1f8>
    5506:	e72d      	b.n	5364 <i2c_master_init+0x54>
	int32_t tmp_baudlow_hs = 0;
    5508:	2400      	movs	r4, #0
	int32_t tmp_baud_hs = 0;
    550a:	2000      	movs	r0, #0
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
    550c:	25ff      	movs	r5, #255	; 0xff
    550e:	401d      	ands	r5, r3
			SERCOM_I2CM_BAUD_HSBAUD(tmp_baud_hs) | SERCOM_I2CM_BAUD_HSBAUDLOW(tmp_baudlow_hs);
    5510:	0624      	lsls	r4, r4, #24
    5512:	4325      	orrs	r5, r4
    5514:	0400      	lsls	r0, r0, #16
    5516:	23ff      	movs	r3, #255	; 0xff
    5518:	041b      	lsls	r3, r3, #16
    551a:	4018      	ands	r0, r3
    551c:	4305      	orrs	r5, r0
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
    551e:	4643      	mov	r3, r8
    5520:	60dd      	str	r5, [r3, #12]
	enum status_code tmp_status_code = STATUS_OK;
    5522:	2000      	movs	r0, #0
    5524:	e71e      	b.n	5364 <i2c_master_init+0x54>
		pad0 = _sercom_get_default_pad(sercom_hw, 0);
    5526:	2100      	movs	r1, #0
    5528:	4640      	mov	r0, r8
    552a:	4b39      	ldr	r3, [pc, #228]	; (5610 <i2c_master_init+0x300>)
    552c:	4798      	blx	r3
    552e:	e74a      	b.n	53c6 <i2c_master_init+0xb6>
		pad1 = _sercom_get_default_pad(sercom_hw, 1);
    5530:	2101      	movs	r1, #1
    5532:	4640      	mov	r0, r8
    5534:	4b36      	ldr	r3, [pc, #216]	; (5610 <i2c_master_init+0x300>)
    5536:	4798      	blx	r3
    5538:	0006      	movs	r6, r0
    553a:	e751      	b.n	53e0 <i2c_master_init+0xd0>
	uint32_t fscl_hs     = 1000 * config->baud_rate_high_speed;
    553c:	26fa      	movs	r6, #250	; 0xfa
    553e:	00b6      	lsls	r6, r6, #2
    5540:	4653      	mov	r3, sl
    5542:	435e      	muls	r6, r3
		tmp_baudlow_hs = (int32_t)((fgclk * 2.0) / (3.0 * fscl_hs) - 1);
    5544:	9800      	ldr	r0, [sp, #0]
    5546:	9901      	ldr	r1, [sp, #4]
    5548:	0002      	movs	r2, r0
    554a:	000b      	movs	r3, r1
    554c:	4c2a      	ldr	r4, [pc, #168]	; (55f8 <i2c_master_init+0x2e8>)
    554e:	47a0      	blx	r4
    5550:	9000      	str	r0, [sp, #0]
    5552:	9101      	str	r1, [sp, #4]
    5554:	0030      	movs	r0, r6
    5556:	4b24      	ldr	r3, [pc, #144]	; (55e8 <i2c_master_init+0x2d8>)
    5558:	4798      	blx	r3
    555a:	2200      	movs	r2, #0
    555c:	4b2d      	ldr	r3, [pc, #180]	; (5614 <i2c_master_init+0x304>)
    555e:	47b8      	blx	r7
    5560:	0002      	movs	r2, r0
    5562:	000b      	movs	r3, r1
    5564:	9800      	ldr	r0, [sp, #0]
    5566:	9901      	ldr	r1, [sp, #4]
    5568:	4c27      	ldr	r4, [pc, #156]	; (5608 <i2c_master_init+0x2f8>)
    556a:	47a0      	blx	r4
    556c:	2200      	movs	r2, #0
    556e:	4b25      	ldr	r3, [pc, #148]	; (5604 <i2c_master_init+0x2f4>)
    5570:	4c23      	ldr	r4, [pc, #140]	; (5600 <i2c_master_init+0x2f0>)
    5572:	47a0      	blx	r4
    5574:	4b25      	ldr	r3, [pc, #148]	; (560c <i2c_master_init+0x2fc>)
    5576:	4798      	blx	r3
    5578:	1e04      	subs	r4, r0, #0
		if (tmp_baudlow_hs) {
    557a:	d00c      	beq.n	5596 <i2c_master_init+0x286>
			tmp_baud_hs = (int32_t)(fgclk / fscl_hs) - 2 - tmp_baudlow_hs;
    557c:	0031      	movs	r1, r6
    557e:	9807      	ldr	r0, [sp, #28]
    5580:	4b25      	ldr	r3, [pc, #148]	; (5618 <i2c_master_init+0x308>)
    5582:	4798      	blx	r3
    5584:	3802      	subs	r0, #2
    5586:	1b00      	subs	r0, r0, r4
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
    5588:	002b      	movs	r3, r5
    558a:	2dff      	cmp	r5, #255	; 0xff
    558c:	d80c      	bhi.n	55a8 <i2c_master_init+0x298>
    558e:	28ff      	cmp	r0, #255	; 0xff
    5590:	d9bc      	bls.n	550c <i2c_master_init+0x1fc>
    5592:	2040      	movs	r0, #64	; 0x40
    5594:	e6e6      	b.n	5364 <i2c_master_init+0x54>
			tmp_baud_hs = (int32_t)(div_ceil(fgclk, 2 * fscl_hs)) - 1;
    5596:	0071      	lsls	r1, r6, #1
    5598:	1e48      	subs	r0, r1, #1
    559a:	9b07      	ldr	r3, [sp, #28]
    559c:	469c      	mov	ip, r3
    559e:	4460      	add	r0, ip
    55a0:	4b1d      	ldr	r3, [pc, #116]	; (5618 <i2c_master_init+0x308>)
    55a2:	4798      	blx	r3
    55a4:	3801      	subs	r0, #1
    55a6:	e7ef      	b.n	5588 <i2c_master_init+0x278>
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
    55a8:	2040      	movs	r0, #64	; 0x40
    55aa:	e6db      	b.n	5364 <i2c_master_init+0x54>
			break;
		case SYSTEM_CLOCK_APB_APBD:
			MCLK->APBDMASK.reg |= mask;
    55ac:	4a04      	ldr	r2, [pc, #16]	; (55c0 <i2c_master_init+0x2b0>)
    55ae:	6a13      	ldr	r3, [r2, #32]
    55b0:	2102      	movs	r1, #2
    55b2:	430b      	orrs	r3, r1
    55b4:	6213      	str	r3, [r2, #32]
		gclk_index   = SERCOM5_GCLK_ID_CORE;
    55b6:	2518      	movs	r5, #24
    55b8:	e6c2      	b.n	5340 <i2c_master_init+0x30>
    55ba:	46c0      	nop			; (mov r8, r8)
    55bc:	00005fc9 	.word	0x00005fc9
    55c0:	40000400 	.word	0x40000400
    55c4:	000072c5 	.word	0x000072c5
    55c8:	00007255 	.word	0x00007255
    55cc:	00005e21 	.word	0x00005e21
    55d0:	00005abd 	.word	0x00005abd
    55d4:	00006005 	.word	0x00006005
    55d8:	20002238 	.word	0x20002238
    55dc:	000073f1 	.word	0x000073f1
    55e0:	41002000 	.word	0x41002000
    55e4:	000072e9 	.word	0x000072e9
    55e8:	00019565 	.word	0x00019565
    55ec:	0001894d 	.word	0x0001894d
    55f0:	e826d695 	.word	0xe826d695
    55f4:	3e112e0b 	.word	0x3e112e0b
    55f8:	00017ac5 	.word	0x00017ac5
    55fc:	40240000 	.word	0x40240000
    5600:	00018e4d 	.word	0x00018e4d
    5604:	3ff00000 	.word	0x3ff00000
    5608:	000180e5 	.word	0x000180e5
    560c:	00019479 	.word	0x00019479
    5610:	00005e6d 	.word	0x00005e6d
    5614:	40080000 	.word	0x40080000
    5618:	00016641 	.word	0x00016641

0000561c <i2c_master_reset>:
 * Reset the module to hardware defaults.
 *
 * \param[in,out] module Pointer to software module structure
 */
void i2c_master_reset(struct i2c_master_module *const module)
{
    561c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    561e:	46ce      	mov	lr, r9
    5620:	4647      	mov	r7, r8
    5622:	b580      	push	{r7, lr}
    5624:	0004      	movs	r4, r0
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    5626:	6803      	ldr	r3, [r0, #0]
    5628:	4699      	mov	r9, r3

	/* Wait for sync */
	_i2c_master_wait_for_sync(module);
    562a:	4e14      	ldr	r6, [pc, #80]	; (567c <i2c_master_reset+0x60>)
    562c:	47b0      	blx	r6
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    562e:	6825      	ldr	r5, [r4, #0]
		system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
    5630:	0028      	movs	r0, r5
    5632:	4b13      	ldr	r3, [pc, #76]	; (5680 <i2c_master_reset+0x64>)
    5634:	4698      	mov	r8, r3
    5636:	4798      	blx	r3
    5638:	231f      	movs	r3, #31
    563a:	4018      	ands	r0, r3
    563c:	2701      	movs	r7, #1
    563e:	0039      	movs	r1, r7
    5640:	4081      	lsls	r1, r0
    5642:	3361      	adds	r3, #97	; 0x61
    5644:	4a0f      	ldr	r2, [pc, #60]	; (5684 <i2c_master_reset+0x68>)
    5646:	50d1      	str	r1, [r2, r3]
	_i2c_master_wait_for_sync(module);
    5648:	0020      	movs	r0, r4
    564a:	47b0      	blx	r6
	i2c_module->INTENCLR.reg = SERCOM_I2CM_INTENCLR_MASK;
    564c:	2383      	movs	r3, #131	; 0x83
    564e:	752b      	strb	r3, [r5, #20]
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_MASK;
    5650:	762b      	strb	r3, [r5, #24]
	i2c_module->CTRLA.reg &= ~SERCOM_I2CM_CTRLA_ENABLE;
    5652:	682b      	ldr	r3, [r5, #0]
    5654:	2202      	movs	r2, #2
    5656:	4393      	bics	r3, r2
    5658:	602b      	str	r3, [r5, #0]
	cpu_irq_enter_critical();
    565a:	4b0b      	ldr	r3, [pc, #44]	; (5688 <i2c_master_reset+0x6c>)
    565c:	4798      	blx	r3
	i2c_master_disable(module);

#if I2C_MASTER_CALLBACK_MODE == true
	/* Clear all pending interrupts */
	system_interrupt_enter_critical_section();
	system_interrupt_clear_pending(_sercom_get_interrupt_vector(module->hw));
    565e:	6820      	ldr	r0, [r4, #0]
    5660:	47c0      	blx	r8
    5662:	4b0a      	ldr	r3, [pc, #40]	; (568c <i2c_master_reset+0x70>)
    5664:	4798      	blx	r3
	cpu_irq_leave_critical();
    5666:	4b0a      	ldr	r3, [pc, #40]	; (5690 <i2c_master_reset+0x74>)
    5668:	4798      	blx	r3
	system_interrupt_leave_critical_section();
#endif

	/* Wait for sync */
	_i2c_master_wait_for_sync(module);
    566a:	0020      	movs	r0, r4
    566c:	47b0      	blx	r6

	/* Reset module */
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_SWRST;
    566e:	464b      	mov	r3, r9
    5670:	601f      	str	r7, [r3, #0]
}
    5672:	bc0c      	pop	{r2, r3}
    5674:	4690      	mov	r8, r2
    5676:	4699      	mov	r9, r3
    5678:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    567a:	46c0      	nop			; (mov r8, r8)
    567c:	00005305 	.word	0x00005305
    5680:	00006041 	.word	0x00006041
    5684:	e000e100 	.word	0xe000e100
    5688:	00004601 	.word	0x00004601
    568c:	00007319 	.word	0x00007319
    5690:	00004641 	.word	0x00004641

00005694 <_i2c_master_address_response>:
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    5694:	6803      	ldr	r3, [r0, #0]

	/* Check for error and ignore bus-error; workaround for BUSSTATE stuck in
	 * BUSY */
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
    5696:	7e1a      	ldrb	r2, [r3, #24]
    5698:	0792      	lsls	r2, r2, #30
    569a:	d507      	bpl.n	56ac <_i2c_master_address_response+0x18>

		/* Clear write interrupt flag */
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    569c:	2202      	movs	r2, #2
    569e:	761a      	strb	r2, [r3, #24]

		/* Check arbitration. */
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
    56a0:	8b5b      	ldrh	r3, [r3, #26]
    56a2:	079b      	lsls	r3, r3, #30
			/* Return packet collision. */
			return STATUS_ERR_PACKET_COLLISION;
    56a4:	2041      	movs	r0, #65	; 0x41

		/* Return bad address value. */
		return STATUS_ERR_BAD_ADDRESS;
	}

	return STATUS_OK;
    56a6:	17db      	asrs	r3, r3, #31
    56a8:	4018      	ands	r0, r3
}
    56aa:	4770      	bx	lr
	} else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
    56ac:	8b5a      	ldrh	r2, [r3, #26]
    56ae:	0752      	lsls	r2, r2, #29
    56b0:	d506      	bpl.n	56c0 <_i2c_master_address_response+0x2c>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    56b2:	6859      	ldr	r1, [r3, #4]
    56b4:	22c0      	movs	r2, #192	; 0xc0
    56b6:	0292      	lsls	r2, r2, #10
    56b8:	430a      	orrs	r2, r1
    56ba:	605a      	str	r2, [r3, #4]
		return STATUS_ERR_BAD_ADDRESS;
    56bc:	2018      	movs	r0, #24
    56be:	e7f4      	b.n	56aa <_i2c_master_address_response+0x16>
	return STATUS_OK;
    56c0:	2000      	movs	r0, #0
    56c2:	e7f2      	b.n	56aa <_i2c_master_address_response+0x16>

000056c4 <_i2c_master_wait_for_bus>:
 * \retval STATUS_ERR_TIMEOUT  If no response was given within specified timeout
 *                             period
 */
enum status_code _i2c_master_wait_for_bus(
		struct i2c_master_module *const module)
{
    56c4:	b530      	push	{r4, r5, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    56c6:	6802      	ldr	r2, [r0, #0]

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
    56c8:	2300      	movs	r3, #0
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
    56ca:	2401      	movs	r4, #1
    56cc:	2502      	movs	r5, #2
    56ce:	7e11      	ldrb	r1, [r2, #24]
    56d0:	4221      	tst	r1, r4
    56d2:	d10b      	bne.n	56ec <_i2c_master_wait_for_bus+0x28>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {
    56d4:	7e11      	ldrb	r1, [r2, #24]
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
    56d6:	4229      	tst	r1, r5
    56d8:	d106      	bne.n	56e8 <_i2c_master_wait_for_bus+0x24>

		/* Check timeout condition. */
		if (++timeout_counter >= module->buffer_timeout) {
    56da:	3301      	adds	r3, #1
    56dc:	b29b      	uxth	r3, r3
    56de:	8901      	ldrh	r1, [r0, #8]
    56e0:	4299      	cmp	r1, r3
    56e2:	d8f4      	bhi.n	56ce <_i2c_master_wait_for_bus+0xa>
			return STATUS_ERR_TIMEOUT;
    56e4:	2012      	movs	r0, #18
    56e6:	e002      	b.n	56ee <_i2c_master_wait_for_bus+0x2a>
		}
	}
	return STATUS_OK;
    56e8:	2000      	movs	r0, #0
    56ea:	e000      	b.n	56ee <_i2c_master_wait_for_bus+0x2a>
    56ec:	2000      	movs	r0, #0
}
    56ee:	bd30      	pop	{r4, r5, pc}

000056f0 <_i2c_master_send_hs_master_code>:
 * \retval STATUS_OK           No error happen
 */
enum status_code _i2c_master_send_hs_master_code(
		struct i2c_master_module *const module,
		uint8_t hs_master_code)
{
    56f0:	b510      	push	{r4, lr}
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    56f2:	6804      	ldr	r4, [r0, #0]
	/* Return value. */
	enum status_code tmp_status;

	/* Set NACK for high speed code */
	i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    56f4:	6862      	ldr	r2, [r4, #4]
    56f6:	2380      	movs	r3, #128	; 0x80
    56f8:	02db      	lsls	r3, r3, #11
    56fa:	4313      	orrs	r3, r2
    56fc:	6063      	str	r3, [r4, #4]
	/* Send high speed code */
	i2c_module->ADDR.reg = hs_master_code;
    56fe:	6261      	str	r1, [r4, #36]	; 0x24
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
    5700:	4b02      	ldr	r3, [pc, #8]	; (570c <_i2c_master_send_hs_master_code+0x1c>)
    5702:	4798      	blx	r3
	/* Clear write interrupt flag */
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
    5704:	2301      	movs	r3, #1
    5706:	7623      	strb	r3, [r4, #24]

	return tmp_status;
}
    5708:	bd10      	pop	{r4, pc}
    570a:	46c0      	nop			; (mov r8, r8)
    570c:	000056c5 	.word	0x000056c5

00005710 <_i2c_master_read_packet>:
 *
 */
static enum status_code _i2c_master_read_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    5710:	b5f0      	push	{r4, r5, r6, r7, lr}
    5712:	46de      	mov	lr, fp
    5714:	4657      	mov	r7, sl
    5716:	464e      	mov	r6, r9
    5718:	4645      	mov	r5, r8
    571a:	b5e0      	push	{r5, r6, r7, lr}
    571c:	b083      	sub	sp, #12
    571e:	0006      	movs	r6, r0
    5720:	4689      	mov	r9, r1
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    5722:	6805      	ldr	r5, [r0, #0]

	/* Return value. */
	enum status_code tmp_status;
	uint16_t tmp_data_length = packet->data_length;
    5724:	884c      	ldrh	r4, [r1, #2]

	/* Written buffer counter. */
	uint16_t counter = 0;

	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
    5726:	682b      	ldr	r3, [r5, #0]
    5728:	011b      	lsls	r3, r3, #4
    572a:	0fdb      	lsrs	r3, r3, #31
    572c:	469a      	mov	sl, r3

	/* Switch to high speed mode */
	if (packet->high_speed) {
    572e:	7a4b      	ldrb	r3, [r1, #9]
    5730:	2b00      	cmp	r3, #0
    5732:	d12b      	bne.n	578c <_i2c_master_read_packet+0x7c>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
	}

	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    5734:	686b      	ldr	r3, [r5, #4]
    5736:	4a58      	ldr	r2, [pc, #352]	; (5898 <_i2c_master_read_packet+0x188>)
    5738:	4013      	ands	r3, r2
    573a:	606b      	str	r3, [r5, #4]

	/* Set address and direction bit. Will send start command on bus. */
	if (packet->ten_bit_address) {
    573c:	464b      	mov	r3, r9
    573e:	7a1b      	ldrb	r3, [r3, #8]
    5740:	2b00      	cmp	r3, #0
    5742:	d127      	bne.n	5794 <_i2c_master_read_packet+0x84>
				I2C_TRANSFER_READ;
		} else {
			return tmp_status;
		}
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
    5744:	464b      	mov	r3, r9
    5746:	881b      	ldrh	r3, [r3, #0]
    5748:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
    574a:	464a      	mov	r2, r9
    574c:	7a52      	ldrb	r2, [r2, #9]
    574e:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
    5750:	4313      	orrs	r3, r2
    5752:	2201      	movs	r2, #1
    5754:	4313      	orrs	r3, r2
    5756:	626b      	str	r3, [r5, #36]	; 0x24
	}

	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
    5758:	0030      	movs	r0, r6
    575a:	4b50      	ldr	r3, [pc, #320]	; (589c <_i2c_master_read_packet+0x18c>)
    575c:	4798      	blx	r3
    575e:	9001      	str	r0, [sp, #4]

	/* Set action to ack or nack. */
	if ((sclsm_flag) && (packet->data_length == 1)) {
    5760:	4653      	mov	r3, sl
    5762:	2b00      	cmp	r3, #0
    5764:	d003      	beq.n	576e <_i2c_master_read_packet+0x5e>
    5766:	464b      	mov	r3, r9
    5768:	885b      	ldrh	r3, [r3, #2]
    576a:	2b01      	cmp	r3, #1
    576c:	d03b      	beq.n	57e6 <_i2c_master_read_packet+0xd6>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
	} else {
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;	
    576e:	686b      	ldr	r3, [r5, #4]
    5770:	4a49      	ldr	r2, [pc, #292]	; (5898 <_i2c_master_read_packet+0x188>)
    5772:	4013      	ands	r3, r2
    5774:	606b      	str	r3, [r5, #4]
	}

	/* Check for address response error unless previous error is
	 * detected. */
	if (tmp_status == STATUS_OK) {
    5776:	9b01      	ldr	r3, [sp, #4]
    5778:	2b00      	cmp	r3, #0
    577a:	d03a      	beq.n	57f2 <_i2c_master_read_packet+0xe2>
		_i2c_master_wait_for_sync(module);
		packet->data[counter] = i2c_module->DATA.reg;
	}

	return tmp_status;
}
    577c:	9801      	ldr	r0, [sp, #4]
    577e:	b003      	add	sp, #12
    5780:	bc3c      	pop	{r2, r3, r4, r5}
    5782:	4690      	mov	r8, r2
    5784:	4699      	mov	r9, r3
    5786:	46a2      	mov	sl, r4
    5788:	46ab      	mov	fp, r5
    578a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
    578c:	7a89      	ldrb	r1, [r1, #10]
    578e:	4b44      	ldr	r3, [pc, #272]	; (58a0 <_i2c_master_read_packet+0x190>)
    5790:	4798      	blx	r3
    5792:	e7cf      	b.n	5734 <_i2c_master_read_packet+0x24>
		i2c_module->ADDR.reg = (packet->address << 1) |
    5794:	464b      	mov	r3, r9
    5796:	881b      	ldrh	r3, [r3, #0]
    5798:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    579a:	464a      	mov	r2, r9
    579c:	7a52      	ldrb	r2, [r2, #9]
    579e:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) |
    57a0:	4313      	orrs	r3, r2
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    57a2:	2280      	movs	r2, #128	; 0x80
    57a4:	0212      	lsls	r2, r2, #8
    57a6:	4313      	orrs	r3, r2
		i2c_module->ADDR.reg = (packet->address << 1) |
    57a8:	626b      	str	r3, [r5, #36]	; 0x24
		tmp_status = _i2c_master_wait_for_bus(module);
    57aa:	0030      	movs	r0, r6
    57ac:	4b3b      	ldr	r3, [pc, #236]	; (589c <_i2c_master_read_packet+0x18c>)
    57ae:	4798      	blx	r3
    57b0:	9001      	str	r0, [sp, #4]
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    57b2:	686b      	ldr	r3, [r5, #4]
    57b4:	4a38      	ldr	r2, [pc, #224]	; (5898 <_i2c_master_read_packet+0x188>)
    57b6:	4013      	ands	r3, r2
    57b8:	606b      	str	r3, [r5, #4]
		if (tmp_status == STATUS_OK) {
    57ba:	2800      	cmp	r0, #0
    57bc:	d1de      	bne.n	577c <_i2c_master_read_packet+0x6c>
			tmp_status = _i2c_master_address_response(module);
    57be:	0030      	movs	r0, r6
    57c0:	4b38      	ldr	r3, [pc, #224]	; (58a4 <_i2c_master_read_packet+0x194>)
    57c2:	4798      	blx	r3
    57c4:	9001      	str	r0, [sp, #4]
		if (tmp_status == STATUS_OK) {
    57c6:	2800      	cmp	r0, #0
    57c8:	d1d8      	bne.n	577c <_i2c_master_read_packet+0x6c>
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
    57ca:	464b      	mov	r3, r9
    57cc:	881b      	ldrh	r3, [r3, #0]
    57ce:	0a1b      	lsrs	r3, r3, #8
    57d0:	2278      	movs	r2, #120	; 0x78
    57d2:	4313      	orrs	r3, r2
    57d4:	005b      	lsls	r3, r3, #1
				(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    57d6:	464a      	mov	r2, r9
    57d8:	7a52      	ldrb	r2, [r2, #9]
    57da:	0392      	lsls	r2, r2, #14
    57dc:	2101      	movs	r1, #1
    57de:	430a      	orrs	r2, r1
    57e0:	4313      	orrs	r3, r2
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
    57e2:	626b      	str	r3, [r5, #36]	; 0x24
    57e4:	e7b8      	b.n	5758 <_i2c_master_read_packet+0x48>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    57e6:	686a      	ldr	r2, [r5, #4]
    57e8:	2380      	movs	r3, #128	; 0x80
    57ea:	02db      	lsls	r3, r3, #11
    57ec:	4313      	orrs	r3, r2
    57ee:	606b      	str	r3, [r5, #4]
    57f0:	e7c1      	b.n	5776 <_i2c_master_read_packet+0x66>
		tmp_status = _i2c_master_address_response(module);
    57f2:	0030      	movs	r0, r6
    57f4:	4b2b      	ldr	r3, [pc, #172]	; (58a4 <_i2c_master_read_packet+0x194>)
    57f6:	4798      	blx	r3
    57f8:	9001      	str	r0, [sp, #4]
	if (tmp_status == STATUS_OK) {
    57fa:	2800      	cmp	r0, #0
    57fc:	d1be      	bne.n	577c <_i2c_master_read_packet+0x6c>
    57fe:	3c01      	subs	r4, #1
    5800:	b2a4      	uxth	r4, r4
    5802:	4680      	mov	r8, r0
		while (tmp_data_length--) {
    5804:	4b28      	ldr	r3, [pc, #160]	; (58a8 <_i2c_master_read_packet+0x198>)
    5806:	469b      	mov	fp, r3
    5808:	e015      	b.n	5836 <_i2c_master_read_packet+0x126>
					((sclsm_flag) && (tmp_data_length == 1)))) {
    580a:	2c01      	cmp	r4, #1
    580c:	d020      	beq.n	5850 <_i2c_master_read_packet+0x140>
				_i2c_master_wait_for_sync(module);
    580e:	0030      	movs	r0, r6
    5810:	4b26      	ldr	r3, [pc, #152]	; (58ac <_i2c_master_read_packet+0x19c>)
    5812:	4798      	blx	r3
				packet->data[counter++] = i2c_module->DATA.reg;
    5814:	4643      	mov	r3, r8
    5816:	1c5f      	adds	r7, r3, #1
    5818:	b2bf      	uxth	r7, r7
    581a:	2328      	movs	r3, #40	; 0x28
    581c:	5ceb      	ldrb	r3, [r5, r3]
    581e:	464a      	mov	r2, r9
    5820:	6852      	ldr	r2, [r2, #4]
    5822:	4641      	mov	r1, r8
    5824:	5453      	strb	r3, [r2, r1]
				tmp_status = _i2c_master_wait_for_bus(module);
    5826:	0030      	movs	r0, r6
    5828:	4b1c      	ldr	r3, [pc, #112]	; (589c <_i2c_master_read_packet+0x18c>)
    582a:	4798      	blx	r3
    582c:	3c01      	subs	r4, #1
    582e:	b2a4      	uxth	r4, r4
			if (tmp_status != STATUS_OK) {
    5830:	2800      	cmp	r0, #0
    5832:	d115      	bne.n	5860 <_i2c_master_read_packet+0x150>
				packet->data[counter++] = i2c_module->DATA.reg;
    5834:	46b8      	mov	r8, r7
		while (tmp_data_length--) {
    5836:	455c      	cmp	r4, fp
    5838:	d014      	beq.n	5864 <_i2c_master_read_packet+0x154>
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
    583a:	8b6b      	ldrh	r3, [r5, #26]
    583c:	069b      	lsls	r3, r3, #26
    583e:	d527      	bpl.n	5890 <_i2c_master_read_packet+0x180>
			if (module->send_nack && (((!sclsm_flag) && (tmp_data_length == 0)) ||
    5840:	7af3      	ldrb	r3, [r6, #11]
    5842:	2b00      	cmp	r3, #0
    5844:	d0e3      	beq.n	580e <_i2c_master_read_packet+0xfe>
    5846:	4653      	mov	r3, sl
    5848:	2b00      	cmp	r3, #0
    584a:	d1de      	bne.n	580a <_i2c_master_read_packet+0xfa>
    584c:	2c00      	cmp	r4, #0
    584e:	d1de      	bne.n	580e <_i2c_master_read_packet+0xfe>
				i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    5850:	686a      	ldr	r2, [r5, #4]
    5852:	2380      	movs	r3, #128	; 0x80
    5854:	02db      	lsls	r3, r3, #11
    5856:	4313      	orrs	r3, r2
    5858:	606b      	str	r3, [r5, #4]
    585a:	3c01      	subs	r4, #1
    585c:	b2a4      	uxth	r4, r4
    585e:	e7ea      	b.n	5836 <_i2c_master_read_packet+0x126>
				packet->data[counter++] = i2c_module->DATA.reg;
    5860:	46b8      	mov	r8, r7
				tmp_status = _i2c_master_wait_for_bus(module);
    5862:	9001      	str	r0, [sp, #4]
		if (module->send_stop) {
    5864:	7ab3      	ldrb	r3, [r6, #10]
    5866:	2b00      	cmp	r3, #0
    5868:	d109      	bne.n	587e <_i2c_master_read_packet+0x16e>
		_i2c_master_wait_for_sync(module);
    586a:	0030      	movs	r0, r6
    586c:	4b0f      	ldr	r3, [pc, #60]	; (58ac <_i2c_master_read_packet+0x19c>)
    586e:	4798      	blx	r3
		packet->data[counter] = i2c_module->DATA.reg;
    5870:	2328      	movs	r3, #40	; 0x28
    5872:	5cea      	ldrb	r2, [r5, r3]
    5874:	464b      	mov	r3, r9
    5876:	685b      	ldr	r3, [r3, #4]
    5878:	4641      	mov	r1, r8
    587a:	545a      	strb	r2, [r3, r1]
    587c:	e77e      	b.n	577c <_i2c_master_read_packet+0x6c>
			_i2c_master_wait_for_sync(module);
    587e:	0030      	movs	r0, r6
    5880:	4b0a      	ldr	r3, [pc, #40]	; (58ac <_i2c_master_read_packet+0x19c>)
    5882:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    5884:	686a      	ldr	r2, [r5, #4]
    5886:	23c0      	movs	r3, #192	; 0xc0
    5888:	029b      	lsls	r3, r3, #10
    588a:	4313      	orrs	r3, r2
    588c:	606b      	str	r3, [r5, #4]
    588e:	e7ec      	b.n	586a <_i2c_master_read_packet+0x15a>
				return STATUS_ERR_PACKET_COLLISION;
    5890:	2341      	movs	r3, #65	; 0x41
    5892:	9301      	str	r3, [sp, #4]
    5894:	e772      	b.n	577c <_i2c_master_read_packet+0x6c>
    5896:	46c0      	nop			; (mov r8, r8)
    5898:	fffbffff 	.word	0xfffbffff
    589c:	000056c5 	.word	0x000056c5
    58a0:	000056f1 	.word	0x000056f1
    58a4:	00005695 	.word	0x00005695
    58a8:	0000ffff 	.word	0x0000ffff
    58ac:	00005305 	.word	0x00005305

000058b0 <_i2c_master_write_packet>:
 *                                      acknowledged the address
 */
static enum status_code _i2c_master_write_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    58b0:	b5f0      	push	{r4, r5, r6, r7, lr}
    58b2:	46de      	mov	lr, fp
    58b4:	4657      	mov	r7, sl
    58b6:	464e      	mov	r6, r9
    58b8:	4645      	mov	r5, r8
    58ba:	b5e0      	push	{r5, r6, r7, lr}
    58bc:	b083      	sub	sp, #12
    58be:	0006      	movs	r6, r0
    58c0:	000f      	movs	r7, r1
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    58c2:	6805      	ldr	r5, [r0, #0]

	/* Return value. */
	enum status_code tmp_status;
	uint16_t tmp_data_length = packet->data_length;
    58c4:	884c      	ldrh	r4, [r1, #2]

	_i2c_master_wait_for_sync(module);
    58c6:	4b32      	ldr	r3, [pc, #200]	; (5990 <_i2c_master_write_packet+0xe0>)
    58c8:	4798      	blx	r3

	/* Switch to high speed mode */
	if (packet->high_speed) {
    58ca:	7a7b      	ldrb	r3, [r7, #9]
    58cc:	2b00      	cmp	r3, #0
    58ce:	d11d      	bne.n	590c <_i2c_master_write_packet+0x5c>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
	}

	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    58d0:	686b      	ldr	r3, [r5, #4]
    58d2:	4a30      	ldr	r2, [pc, #192]	; (5994 <_i2c_master_write_packet+0xe4>)
    58d4:	4013      	ands	r3, r2
    58d6:	606b      	str	r3, [r5, #4]

	/* Set address and direction bit. Will send start command on bus. */
	if (packet->ten_bit_address) {
    58d8:	7a3b      	ldrb	r3, [r7, #8]
    58da:	2b00      	cmp	r3, #0
    58dc:	d01b      	beq.n	5916 <_i2c_master_write_packet+0x66>
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    58de:	883b      	ldrh	r3, [r7, #0]
    58e0:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    58e2:	7a7a      	ldrb	r2, [r7, #9]
    58e4:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    58e6:	4313      	orrs	r3, r2
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    58e8:	2280      	movs	r2, #128	; 0x80
    58ea:	0212      	lsls	r2, r2, #8
    58ec:	4313      	orrs	r3, r2
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    58ee:	626b      	str	r3, [r5, #36]	; 0x24
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
	}
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
    58f0:	0030      	movs	r0, r6
    58f2:	4b29      	ldr	r3, [pc, #164]	; (5998 <_i2c_master_write_packet+0xe8>)
    58f4:	4798      	blx	r3
    58f6:	9001      	str	r0, [sp, #4]

	/* Check for address response error unless previous error is
	 * detected. */
	if (tmp_status == STATUS_OK) {
    58f8:	2800      	cmp	r0, #0
    58fa:	d013      	beq.n	5924 <_i2c_master_write_packet+0x74>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
		}
	}

	return tmp_status;
}
    58fc:	9801      	ldr	r0, [sp, #4]
    58fe:	b003      	add	sp, #12
    5900:	bc3c      	pop	{r2, r3, r4, r5}
    5902:	4690      	mov	r8, r2
    5904:	4699      	mov	r9, r3
    5906:	46a2      	mov	sl, r4
    5908:	46ab      	mov	fp, r5
    590a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
    590c:	7ab9      	ldrb	r1, [r7, #10]
    590e:	0030      	movs	r0, r6
    5910:	4b22      	ldr	r3, [pc, #136]	; (599c <_i2c_master_write_packet+0xec>)
    5912:	4798      	blx	r3
    5914:	e7dc      	b.n	58d0 <_i2c_master_write_packet+0x20>
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    5916:	883b      	ldrh	r3, [r7, #0]
    5918:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
    591a:	7a7a      	ldrb	r2, [r7, #9]
    591c:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    591e:	4313      	orrs	r3, r2
    5920:	626b      	str	r3, [r5, #36]	; 0x24
    5922:	e7e5      	b.n	58f0 <_i2c_master_write_packet+0x40>
		tmp_status = _i2c_master_address_response(module);
    5924:	0030      	movs	r0, r6
    5926:	4b1e      	ldr	r3, [pc, #120]	; (59a0 <_i2c_master_write_packet+0xf0>)
    5928:	4798      	blx	r3
    592a:	1e03      	subs	r3, r0, #0
    592c:	9001      	str	r0, [sp, #4]
	if (tmp_status == STATUS_OK) {
    592e:	d1e5      	bne.n	58fc <_i2c_master_write_packet+0x4c>
    5930:	46a0      	mov	r8, r4
    5932:	2400      	movs	r4, #0
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
    5934:	3320      	adds	r3, #32
    5936:	4699      	mov	r9, r3
			_i2c_master_wait_for_sync(module);
    5938:	4b15      	ldr	r3, [pc, #84]	; (5990 <_i2c_master_write_packet+0xe0>)
    593a:	469b      	mov	fp, r3
			tmp_status = _i2c_master_wait_for_bus(module);
    593c:	4b16      	ldr	r3, [pc, #88]	; (5998 <_i2c_master_write_packet+0xe8>)
    593e:	469a      	mov	sl, r3
		while (tmp_data_length--) {
    5940:	4544      	cmp	r4, r8
    5942:	d015      	beq.n	5970 <_i2c_master_write_packet+0xc0>
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
    5944:	8b6b      	ldrh	r3, [r5, #26]
    5946:	464a      	mov	r2, r9
    5948:	4213      	tst	r3, r2
    594a:	d01d      	beq.n	5988 <_i2c_master_write_packet+0xd8>
			_i2c_master_wait_for_sync(module);
    594c:	0030      	movs	r0, r6
    594e:	47d8      	blx	fp
			i2c_module->DATA.reg = packet->data[buffer_counter++];
    5950:	687b      	ldr	r3, [r7, #4]
    5952:	5d1a      	ldrb	r2, [r3, r4]
    5954:	2328      	movs	r3, #40	; 0x28
    5956:	54ea      	strb	r2, [r5, r3]
			tmp_status = _i2c_master_wait_for_bus(module);
    5958:	0030      	movs	r0, r6
    595a:	47d0      	blx	sl
			if (tmp_status != STATUS_OK) {
    595c:	2800      	cmp	r0, #0
    595e:	d106      	bne.n	596e <_i2c_master_write_packet+0xbe>
			if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
    5960:	8b6b      	ldrh	r3, [r5, #26]
    5962:	3401      	adds	r4, #1
    5964:	075b      	lsls	r3, r3, #29
    5966:	d5eb      	bpl.n	5940 <_i2c_master_write_packet+0x90>
				tmp_status = STATUS_ERR_OVERFLOW;
    5968:	231e      	movs	r3, #30
    596a:	9301      	str	r3, [sp, #4]
    596c:	e000      	b.n	5970 <_i2c_master_write_packet+0xc0>
			tmp_status = _i2c_master_wait_for_bus(module);
    596e:	9001      	str	r0, [sp, #4]
		if (module->send_stop) {
    5970:	7ab3      	ldrb	r3, [r6, #10]
    5972:	2b00      	cmp	r3, #0
    5974:	d0c2      	beq.n	58fc <_i2c_master_write_packet+0x4c>
			_i2c_master_wait_for_sync(module);
    5976:	0030      	movs	r0, r6
    5978:	4b05      	ldr	r3, [pc, #20]	; (5990 <_i2c_master_write_packet+0xe0>)
    597a:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    597c:	686a      	ldr	r2, [r5, #4]
    597e:	23c0      	movs	r3, #192	; 0xc0
    5980:	029b      	lsls	r3, r3, #10
    5982:	4313      	orrs	r3, r2
    5984:	606b      	str	r3, [r5, #4]
    5986:	e7b9      	b.n	58fc <_i2c_master_write_packet+0x4c>
				return STATUS_ERR_PACKET_COLLISION;
    5988:	2341      	movs	r3, #65	; 0x41
    598a:	9301      	str	r3, [sp, #4]
    598c:	e7b6      	b.n	58fc <_i2c_master_write_packet+0x4c>
    598e:	46c0      	nop			; (mov r8, r8)
    5990:	00005305 	.word	0x00005305
    5994:	fffbffff 	.word	0xfffbffff
    5998:	000056c5 	.word	0x000056c5
    599c:	000056f1 	.word	0x000056f1
    59a0:	00005695 	.word	0x00005695

000059a4 <i2c_master_read_packet_wait>:
{
    59a4:	b510      	push	{r4, lr}
	if (module->buffer_remaining > 0) {
    59a6:	8b83      	ldrh	r3, [r0, #28]
    59a8:	b29b      	uxth	r3, r3
		return STATUS_BUSY;
    59aa:	2205      	movs	r2, #5
	if (module->buffer_remaining > 0) {
    59ac:	2b00      	cmp	r3, #0
    59ae:	d001      	beq.n	59b4 <i2c_master_read_packet_wait+0x10>
}
    59b0:	0010      	movs	r0, r2
    59b2:	bd10      	pop	{r4, pc}
	module->send_stop = true;
    59b4:	3301      	adds	r3, #1
    59b6:	7283      	strb	r3, [r0, #10]
	module->send_nack = true;
    59b8:	72c3      	strb	r3, [r0, #11]
	return _i2c_master_read_packet(module, packet);
    59ba:	4b02      	ldr	r3, [pc, #8]	; (59c4 <i2c_master_read_packet_wait+0x20>)
    59bc:	4798      	blx	r3
    59be:	0002      	movs	r2, r0
    59c0:	e7f6      	b.n	59b0 <i2c_master_read_packet_wait+0xc>
    59c2:	46c0      	nop			; (mov r8, r8)
    59c4:	00005711 	.word	0x00005711

000059c8 <i2c_master_write_packet_wait>:
 *                                      last data sent
 */
enum status_code i2c_master_write_packet_wait(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    59c8:	b510      	push	{r4, lr}
	Assert(module->hw);
	Assert(packet);

#if I2C_MASTER_CALLBACK_MODE == true
	/* Check if the I2C module is busy with a job */
	if (module->buffer_remaining > 0) {
    59ca:	8b83      	ldrh	r3, [r0, #28]
    59cc:	b29b      	uxth	r3, r3
		return STATUS_BUSY;
    59ce:	2205      	movs	r2, #5
	if (module->buffer_remaining > 0) {
    59d0:	2b00      	cmp	r3, #0
    59d2:	d001      	beq.n	59d8 <i2c_master_write_packet_wait+0x10>

	module->send_stop = true;
	module->send_nack = true;

	return _i2c_master_write_packet(module, packet);
}
    59d4:	0010      	movs	r0, r2
    59d6:	bd10      	pop	{r4, pc}
	module->send_stop = true;
    59d8:	3301      	adds	r3, #1
    59da:	7283      	strb	r3, [r0, #10]
	module->send_nack = true;
    59dc:	72c3      	strb	r3, [r0, #11]
	return _i2c_master_write_packet(module, packet);
    59de:	4b02      	ldr	r3, [pc, #8]	; (59e8 <i2c_master_write_packet_wait+0x20>)
    59e0:	4798      	blx	r3
    59e2:	0002      	movs	r2, r0
    59e4:	e7f6      	b.n	59d4 <i2c_master_write_packet_wait+0xc>
    59e6:	46c0      	nop			; (mov r8, r8)
    59e8:	000058b1 	.word	0x000058b1

000059ec <_i2c_master_wait_for_sync>:
	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
    59ec:	6801      	ldr	r1, [r0, #0]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
    59ee:	2207      	movs	r2, #7
    59f0:	69cb      	ldr	r3, [r1, #28]
	while (i2c_master_is_syncing(module)) {
    59f2:	421a      	tst	r2, r3
    59f4:	d1fc      	bne.n	59f0 <_i2c_master_wait_for_sync+0x4>
}
    59f6:	4770      	bx	lr

000059f8 <_i2c_master_read>:
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_read(
		struct i2c_master_module *const module)
{
    59f8:	b570      	push	{r4, r5, r6, lr}
    59fa:	0004      	movs	r4, r0
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    59fc:	6806      	ldr	r6, [r0, #0]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
    59fe:	6832      	ldr	r2, [r6, #0]

	/* Find index to save next value in buffer */
	uint16_t buffer_index = module->buffer_length;
    5a00:	8b45      	ldrh	r5, [r0, #26]
	buffer_index -= module->buffer_remaining;
    5a02:	8b83      	ldrh	r3, [r0, #28]
    5a04:	1aed      	subs	r5, r5, r3
    5a06:	b2ad      	uxth	r5, r5

	module->buffer_remaining--;
    5a08:	8b83      	ldrh	r3, [r0, #28]
    5a0a:	3b01      	subs	r3, #1
    5a0c:	b29b      	uxth	r3, r3
    5a0e:	8383      	strh	r3, [r0, #28]

	if (sclsm_flag) {
    5a10:	0113      	lsls	r3, r2, #4
    5a12:	d51d      	bpl.n	5a50 <_i2c_master_read+0x58>
		if (module->send_nack && module->buffer_remaining == 1) {
    5a14:	7ac3      	ldrb	r3, [r0, #11]
    5a16:	2b00      	cmp	r3, #0
    5a18:	d003      	beq.n	5a22 <_i2c_master_read+0x2a>
    5a1a:	8b83      	ldrh	r3, [r0, #28]
    5a1c:	b29b      	uxth	r3, r3
    5a1e:	2b01      	cmp	r3, #1
    5a20:	d010      	beq.n	5a44 <_i2c_master_read+0x4c>
			/* Set action to NACK. */
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
		}
	}

	if (module->buffer_remaining == 0) {
    5a22:	8ba3      	ldrh	r3, [r4, #28]
    5a24:	b29b      	uxth	r3, r3
    5a26:	2b00      	cmp	r3, #0
    5a28:	d102      	bne.n	5a30 <_i2c_master_read+0x38>
		if (module->send_stop) {
    5a2a:	7aa3      	ldrb	r3, [r4, #10]
    5a2c:	2b00      	cmp	r3, #0
    5a2e:	d11c      	bne.n	5a6a <_i2c_master_read+0x72>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
		}
	}
	
	/* Read byte from slave and put in buffer */
	_i2c_master_wait_for_sync(module);
    5a30:	0020      	movs	r0, r4
    5a32:	4b12      	ldr	r3, [pc, #72]	; (5a7c <_i2c_master_read+0x84>)
    5a34:	4798      	blx	r3
	module->buffer[buffer_index] = i2c_module->DATA.reg;
    5a36:	6a23      	ldr	r3, [r4, #32]
    5a38:	195d      	adds	r5, r3, r5
    5a3a:	2328      	movs	r3, #40	; 0x28
    5a3c:	5cf3      	ldrb	r3, [r6, r3]
    5a3e:	b2db      	uxtb	r3, r3
    5a40:	702b      	strb	r3, [r5, #0]
}
    5a42:	bd70      	pop	{r4, r5, r6, pc}
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    5a44:	6872      	ldr	r2, [r6, #4]
    5a46:	2380      	movs	r3, #128	; 0x80
    5a48:	02db      	lsls	r3, r3, #11
    5a4a:	4313      	orrs	r3, r2
    5a4c:	6073      	str	r3, [r6, #4]
    5a4e:	e7e8      	b.n	5a22 <_i2c_master_read+0x2a>
		if (module->send_nack && module->buffer_remaining == 0) {
    5a50:	7ac3      	ldrb	r3, [r0, #11]
    5a52:	2b00      	cmp	r3, #0
    5a54:	d0e5      	beq.n	5a22 <_i2c_master_read+0x2a>
    5a56:	8b83      	ldrh	r3, [r0, #28]
    5a58:	b29b      	uxth	r3, r3
    5a5a:	2b00      	cmp	r3, #0
    5a5c:	d1e1      	bne.n	5a22 <_i2c_master_read+0x2a>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    5a5e:	6872      	ldr	r2, [r6, #4]
    5a60:	2380      	movs	r3, #128	; 0x80
    5a62:	02db      	lsls	r3, r3, #11
    5a64:	4313      	orrs	r3, r2
    5a66:	6073      	str	r3, [r6, #4]
    5a68:	e7db      	b.n	5a22 <_i2c_master_read+0x2a>
			_i2c_master_wait_for_sync(module);
    5a6a:	0020      	movs	r0, r4
    5a6c:	4b03      	ldr	r3, [pc, #12]	; (5a7c <_i2c_master_read+0x84>)
    5a6e:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    5a70:	6872      	ldr	r2, [r6, #4]
    5a72:	23c0      	movs	r3, #192	; 0xc0
    5a74:	029b      	lsls	r3, r3, #10
    5a76:	4313      	orrs	r3, r2
    5a78:	6073      	str	r3, [r6, #4]
    5a7a:	e7d9      	b.n	5a30 <_i2c_master_read+0x38>
    5a7c:	000059ed 	.word	0x000059ed

00005a80 <_i2c_master_write>:
 * Write next data. Used by interrupt handler to send next data byte to slave.
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_write(struct i2c_master_module *const module)
{
    5a80:	b570      	push	{r4, r5, r6, lr}
    5a82:	0004      	movs	r4, r0
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    5a84:	6805      	ldr	r5, [r0, #0]

	/* Check for ack from slave */
	if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK)
    5a86:	8b6b      	ldrh	r3, [r5, #26]
    5a88:	075b      	lsls	r3, r3, #29
    5a8a:	d503      	bpl.n	5a94 <_i2c_master_write+0x14>
	{
		/* Set status */
		module->status = STATUS_ERR_OVERFLOW;
    5a8c:	221e      	movs	r2, #30
    5a8e:	2325      	movs	r3, #37	; 0x25
    5a90:	54c2      	strb	r2, [r0, r3]
	module->buffer_remaining--;

	/* Write byte from buffer to slave */
	_i2c_master_wait_for_sync(module);
	i2c_module->DATA.reg = module->buffer[buffer_index];
}
    5a92:	bd70      	pop	{r4, r5, r6, pc}
	uint16_t buffer_index = module->buffer_length;
    5a94:	8b46      	ldrh	r6, [r0, #26]
	buffer_index -= module->buffer_remaining;
    5a96:	8b83      	ldrh	r3, [r0, #28]
    5a98:	1af6      	subs	r6, r6, r3
    5a9a:	b2b6      	uxth	r6, r6
	module->buffer_remaining--;
    5a9c:	8b83      	ldrh	r3, [r0, #28]
    5a9e:	3b01      	subs	r3, #1
    5aa0:	b29b      	uxth	r3, r3
    5aa2:	8383      	strh	r3, [r0, #28]
	_i2c_master_wait_for_sync(module);
    5aa4:	4b04      	ldr	r3, [pc, #16]	; (5ab8 <_i2c_master_write+0x38>)
    5aa6:	4798      	blx	r3
	i2c_module->DATA.reg = module->buffer[buffer_index];
    5aa8:	6a23      	ldr	r3, [r4, #32]
    5aaa:	199e      	adds	r6, r3, r6
    5aac:	7833      	ldrb	r3, [r6, #0]
    5aae:	b2db      	uxtb	r3, r3
    5ab0:	2228      	movs	r2, #40	; 0x28
    5ab2:	54ab      	strb	r3, [r5, r2]
    5ab4:	e7ed      	b.n	5a92 <_i2c_master_write+0x12>
    5ab6:	46c0      	nop			; (mov r8, r8)
    5ab8:	000059ed 	.word	0x000059ed

00005abc <_i2c_master_interrupt_handler>:
 *
 * \param[in] instance  SERCOM instance that triggered the interrupt
 */
void _i2c_master_interrupt_handler(
		uint8_t instance)
{
    5abc:	b570      	push	{r4, r5, r6, lr}
	/* Get software module for callback handling */
	struct i2c_master_module *module =
    5abe:	0080      	lsls	r0, r0, #2
    5ac0:	4b75      	ldr	r3, [pc, #468]	; (5c98 <_i2c_master_interrupt_handler+0x1dc>)
    5ac2:	58c4      	ldr	r4, [r0, r3]
			(struct i2c_master_module*)_sercom_instances[instance];

	Assert(module);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    5ac4:	6825      	ldr	r5, [r4, #0]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
    5ac6:	682b      	ldr	r3, [r5, #0]
    5ac8:	011b      	lsls	r3, r3, #4
    5aca:	0fda      	lsrs	r2, r3, #31

	/* Combine callback registered and enabled masks */
	uint8_t callback_mask = module->enabled_callback;
    5acc:	7e63      	ldrb	r3, [r4, #25]
	callback_mask &= module->registered_callback;
    5ace:	7e26      	ldrb	r6, [r4, #24]
    5ad0:	401e      	ands	r6, r3

	/* Check if the module should respond to address ack */
	if ((module->buffer_length <= 0) && (module->buffer_remaining > 0)) {
    5ad2:	8b63      	ldrh	r3, [r4, #26]
    5ad4:	b29b      	uxth	r3, r3
    5ad6:	2b00      	cmp	r3, #0
    5ad8:	d103      	bne.n	5ae2 <_i2c_master_interrupt_handler+0x26>
    5ada:	8ba3      	ldrh	r3, [r4, #28]
    5adc:	b29b      	uxth	r3, r3
    5ade:	2b00      	cmp	r3, #0
    5ae0:	d123      	bne.n	5b2a <_i2c_master_interrupt_handler+0x6e>
		/* Call function for address response */
		_i2c_master_async_address_response(module);

	/* Check if buffer write is done */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
    5ae2:	8b63      	ldrh	r3, [r4, #26]
    5ae4:	b29b      	uxth	r3, r3
    5ae6:	2b00      	cmp	r3, #0
    5ae8:	d008      	beq.n	5afc <_i2c_master_interrupt_handler+0x40>
    5aea:	8ba3      	ldrh	r3, [r4, #28]
    5aec:	b29b      	uxth	r3, r3
    5aee:	2b00      	cmp	r3, #0
    5af0:	d104      	bne.n	5afc <_i2c_master_interrupt_handler+0x40>
			(module->status == STATUS_BUSY) &&
    5af2:	3325      	adds	r3, #37	; 0x25
    5af4:	5ce3      	ldrb	r3, [r4, r3]
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
    5af6:	2b05      	cmp	r3, #5
    5af8:	d100      	bne.n	5afc <_i2c_master_interrupt_handler+0x40>
    5afa:	e06d      	b.n	5bd8 <_i2c_master_interrupt_handler+0x11c>
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE)) {
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
		}

	/* Continue buffer write/read */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining > 0)){
    5afc:	8b63      	ldrh	r3, [r4, #26]
    5afe:	b29b      	uxth	r3, r3
    5b00:	2b00      	cmp	r3, #0
    5b02:	d024      	beq.n	5b4e <_i2c_master_interrupt_handler+0x92>
    5b04:	8ba3      	ldrh	r3, [r4, #28]
    5b06:	b29b      	uxth	r3, r3
    5b08:	2b00      	cmp	r3, #0
    5b0a:	d020      	beq.n	5b4e <_i2c_master_interrupt_handler+0x92>
		/* Check that bus ownership is not lost */
		if ((!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) &&
    5b0c:	8b6b      	ldrh	r3, [r5, #26]
    5b0e:	069b      	lsls	r3, r3, #26
    5b10:	d500      	bpl.n	5b14 <_i2c_master_interrupt_handler+0x58>
    5b12:	e081      	b.n	5c18 <_i2c_master_interrupt_handler+0x15c>
    5b14:	2a00      	cmp	r2, #0
    5b16:	d004      	beq.n	5b22 <_i2c_master_interrupt_handler+0x66>
				(!(sclsm_flag && (module->buffer_remaining == 1))))	{
    5b18:	8ba3      	ldrh	r3, [r4, #28]
    5b1a:	b29b      	uxth	r3, r3
    5b1c:	2b01      	cmp	r3, #1
    5b1e:	d100      	bne.n	5b22 <_i2c_master_interrupt_handler+0x66>
    5b20:	e07a      	b.n	5c18 <_i2c_master_interrupt_handler+0x15c>
			module->status = STATUS_ERR_PACKET_COLLISION;
    5b22:	2241      	movs	r2, #65	; 0x41
    5b24:	2325      	movs	r3, #37	; 0x25
    5b26:	54e2      	strb	r2, [r4, r3]
    5b28:	e011      	b.n	5b4e <_i2c_master_interrupt_handler+0x92>
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB)
    5b2a:	7e2b      	ldrb	r3, [r5, #24]
    5b2c:	07db      	lsls	r3, r3, #31
    5b2e:	d507      	bpl.n	5b40 <_i2c_master_interrupt_handler+0x84>
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
    5b30:	2301      	movs	r3, #1
    5b32:	762b      	strb	r3, [r5, #24]
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
    5b34:	8b6b      	ldrh	r3, [r5, #26]
    5b36:	079b      	lsls	r3, r3, #30
    5b38:	d52e      	bpl.n	5b98 <_i2c_master_interrupt_handler+0xdc>
			module->status = STATUS_ERR_PACKET_COLLISION;
    5b3a:	2241      	movs	r2, #65	; 0x41
    5b3c:	2325      	movs	r3, #37	; 0x25
    5b3e:	54e2      	strb	r2, [r4, r3]
	module->buffer_length = module->buffer_remaining;
    5b40:	8ba3      	ldrh	r3, [r4, #28]
    5b42:	b29b      	uxth	r3, r3
    5b44:	8363      	strh	r3, [r4, #26]
	if (module->status == STATUS_BUSY) {
    5b46:	2325      	movs	r3, #37	; 0x25
    5b48:	5ce3      	ldrb	r3, [r4, r3]
    5b4a:	2b05      	cmp	r3, #5
    5b4c:	d038      	beq.n	5bc0 <_i2c_master_interrupt_handler+0x104>
			_i2c_master_read(module);
		}
	}

	/* Check if read buffer transfer is complete */
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
    5b4e:	8b63      	ldrh	r3, [r4, #26]
    5b50:	b29b      	uxth	r3, r3
    5b52:	2b00      	cmp	r3, #0
    5b54:	d007      	beq.n	5b66 <_i2c_master_interrupt_handler+0xaa>
    5b56:	8ba3      	ldrh	r3, [r4, #28]
    5b58:	b29b      	uxth	r3, r3
    5b5a:	2b00      	cmp	r3, #0
    5b5c:	d103      	bne.n	5b66 <_i2c_master_interrupt_handler+0xaa>
			(module->status == STATUS_BUSY) &&
    5b5e:	3325      	adds	r3, #37	; 0x25
    5b60:	5ce3      	ldrb	r3, [r4, r3]
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
    5b62:	2b05      	cmp	r3, #5
    5b64:	d064      	beq.n	5c30 <_i2c_master_interrupt_handler+0x174>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
		}
	}

	/* Check for error */
	if ((module->status != STATUS_BUSY) && (module->status != STATUS_OK)) {
    5b66:	2325      	movs	r3, #37	; 0x25
    5b68:	5ce3      	ldrb	r3, [r4, r3]
    5b6a:	2b05      	cmp	r3, #5
    5b6c:	d013      	beq.n	5b96 <_i2c_master_interrupt_handler+0xda>
    5b6e:	2325      	movs	r3, #37	; 0x25
    5b70:	5ce3      	ldrb	r3, [r4, r3]
    5b72:	2b00      	cmp	r3, #0
    5b74:	d00f      	beq.n	5b96 <_i2c_master_interrupt_handler+0xda>
		/* Stop packet operation */
		i2c_module->INTENCLR.reg = SERCOM_I2CM_INTENCLR_MB |
    5b76:	2303      	movs	r3, #3
    5b78:	752b      	strb	r3, [r5, #20]
				SERCOM_I2CM_INTENCLR_SB;

		module->buffer_length = 0;
    5b7a:	2300      	movs	r3, #0
    5b7c:	8363      	strh	r3, [r4, #26]
		module->buffer_remaining = 0;
    5b7e:	83a3      	strh	r3, [r4, #28]

		/* Send nack and stop command unless arbitration is lost */
		if ((module->status != STATUS_ERR_PACKET_COLLISION) &&
    5b80:	3325      	adds	r3, #37	; 0x25
    5b82:	5ce3      	ldrb	r3, [r4, r3]
    5b84:	2b41      	cmp	r3, #65	; 0x41
    5b86:	d003      	beq.n	5b90 <_i2c_master_interrupt_handler+0xd4>
    5b88:	7aa3      	ldrb	r3, [r4, #10]
    5b8a:	2b00      	cmp	r3, #0
    5b8c:	d000      	beq.n	5b90 <_i2c_master_interrupt_handler+0xd4>
    5b8e:	e075      	b.n	5c7c <_i2c_master_interrupt_handler+0x1c0>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT |
					SERCOM_I2CM_CTRLB_CMD(3);
		}

		/* Call error callback if enabled and registered */
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_ERROR)) {
    5b90:	0773      	lsls	r3, r6, #29
    5b92:	d500      	bpl.n	5b96 <_i2c_master_interrupt_handler+0xda>
    5b94:	e07b      	b.n	5c8e <_i2c_master_interrupt_handler+0x1d2>
			module->callbacks[I2C_MASTER_CALLBACK_ERROR](module);
		}
	}
}
    5b96:	bd70      	pop	{r4, r5, r6, pc}
		else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
    5b98:	8b6b      	ldrh	r3, [r5, #26]
    5b9a:	075b      	lsls	r3, r3, #29
    5b9c:	d5d0      	bpl.n	5b40 <_i2c_master_interrupt_handler+0x84>
			module->status           = STATUS_ERR_BAD_ADDRESS;
    5b9e:	2218      	movs	r2, #24
    5ba0:	2325      	movs	r3, #37	; 0x25
    5ba2:	54e2      	strb	r2, [r4, r3]
			module->buffer_remaining = 0;
    5ba4:	2300      	movs	r3, #0
    5ba6:	83a3      	strh	r3, [r4, #28]
			if (module->send_stop) {
    5ba8:	7aa3      	ldrb	r3, [r4, #10]
    5baa:	2b00      	cmp	r3, #0
    5bac:	d0c8      	beq.n	5b40 <_i2c_master_interrupt_handler+0x84>
				_i2c_master_wait_for_sync(module);
    5bae:	0020      	movs	r0, r4
    5bb0:	4b3a      	ldr	r3, [pc, #232]	; (5c9c <_i2c_master_interrupt_handler+0x1e0>)
    5bb2:	4798      	blx	r3
				i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    5bb4:	686a      	ldr	r2, [r5, #4]
    5bb6:	23c0      	movs	r3, #192	; 0xc0
    5bb8:	029b      	lsls	r3, r3, #10
    5bba:	4313      	orrs	r3, r2
    5bbc:	606b      	str	r3, [r5, #4]
    5bbe:	e7bf      	b.n	5b40 <_i2c_master_interrupt_handler+0x84>
		if (module->transfer_direction == I2C_TRANSFER_WRITE) {
    5bc0:	331f      	adds	r3, #31
    5bc2:	5ce3      	ldrb	r3, [r4, r3]
    5bc4:	2b00      	cmp	r3, #0
    5bc6:	d003      	beq.n	5bd0 <_i2c_master_interrupt_handler+0x114>
			_i2c_master_read(module);
    5bc8:	0020      	movs	r0, r4
    5bca:	4b35      	ldr	r3, [pc, #212]	; (5ca0 <_i2c_master_interrupt_handler+0x1e4>)
    5bcc:	4798      	blx	r3
    5bce:	e7be      	b.n	5b4e <_i2c_master_interrupt_handler+0x92>
			_i2c_master_write(module);
    5bd0:	0020      	movs	r0, r4
    5bd2:	4b34      	ldr	r3, [pc, #208]	; (5ca4 <_i2c_master_interrupt_handler+0x1e8>)
    5bd4:	4798      	blx	r3
    5bd6:	e7ba      	b.n	5b4e <_i2c_master_interrupt_handler+0x92>
			(module->transfer_direction == I2C_TRANSFER_WRITE)) {
    5bd8:	331f      	adds	r3, #31
    5bda:	5ce3      	ldrb	r3, [r4, r3]
			(module->status == STATUS_BUSY) &&
    5bdc:	2b00      	cmp	r3, #0
    5bde:	d000      	beq.n	5be2 <_i2c_master_interrupt_handler+0x126>
    5be0:	e78c      	b.n	5afc <_i2c_master_interrupt_handler+0x40>
		i2c_module->INTENCLR.reg =
    5be2:	3303      	adds	r3, #3
    5be4:	752b      	strb	r3, [r5, #20]
		module->buffer_length = 0;
    5be6:	2300      	movs	r3, #0
    5be8:	8363      	strh	r3, [r4, #26]
		module->status        = STATUS_OK;
    5bea:	3325      	adds	r3, #37	; 0x25
    5bec:	2200      	movs	r2, #0
    5bee:	54e2      	strb	r2, [r4, r3]
		if (module->send_stop) {
    5bf0:	7aa3      	ldrb	r3, [r4, #10]
    5bf2:	2b00      	cmp	r3, #0
    5bf4:	d107      	bne.n	5c06 <_i2c_master_interrupt_handler+0x14a>
			i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
    5bf6:	2301      	movs	r3, #1
    5bf8:	762b      	strb	r3, [r5, #24]
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE)) {
    5bfa:	07f3      	lsls	r3, r6, #31
    5bfc:	d5a7      	bpl.n	5b4e <_i2c_master_interrupt_handler+0x92>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
    5bfe:	68e3      	ldr	r3, [r4, #12]
    5c00:	0020      	movs	r0, r4
    5c02:	4798      	blx	r3
    5c04:	e7a3      	b.n	5b4e <_i2c_master_interrupt_handler+0x92>
			_i2c_master_wait_for_sync(module);
    5c06:	0020      	movs	r0, r4
    5c08:	4b24      	ldr	r3, [pc, #144]	; (5c9c <_i2c_master_interrupt_handler+0x1e0>)
    5c0a:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    5c0c:	686a      	ldr	r2, [r5, #4]
    5c0e:	23c0      	movs	r3, #192	; 0xc0
    5c10:	029b      	lsls	r3, r3, #10
    5c12:	4313      	orrs	r3, r2
    5c14:	606b      	str	r3, [r5, #4]
    5c16:	e7f0      	b.n	5bfa <_i2c_master_interrupt_handler+0x13e>
		} else if (module->transfer_direction == I2C_TRANSFER_WRITE) {
    5c18:	2324      	movs	r3, #36	; 0x24
    5c1a:	5ce3      	ldrb	r3, [r4, r3]
    5c1c:	2b00      	cmp	r3, #0
    5c1e:	d103      	bne.n	5c28 <_i2c_master_interrupt_handler+0x16c>
			_i2c_master_write(module);
    5c20:	0020      	movs	r0, r4
    5c22:	4b20      	ldr	r3, [pc, #128]	; (5ca4 <_i2c_master_interrupt_handler+0x1e8>)
    5c24:	4798      	blx	r3
    5c26:	e792      	b.n	5b4e <_i2c_master_interrupt_handler+0x92>
			_i2c_master_read(module);
    5c28:	0020      	movs	r0, r4
    5c2a:	4b1d      	ldr	r3, [pc, #116]	; (5ca0 <_i2c_master_interrupt_handler+0x1e4>)
    5c2c:	4798      	blx	r3
    5c2e:	e78e      	b.n	5b4e <_i2c_master_interrupt_handler+0x92>
			(module->transfer_direction == I2C_TRANSFER_READ)) {
    5c30:	331f      	adds	r3, #31
    5c32:	5ce3      	ldrb	r3, [r4, r3]
			(module->status == STATUS_BUSY) &&
    5c34:	2b01      	cmp	r3, #1
    5c36:	d196      	bne.n	5b66 <_i2c_master_interrupt_handler+0xaa>
		if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
    5c38:	7e2b      	ldrb	r3, [r5, #24]
    5c3a:	079b      	lsls	r3, r3, #30
    5c3c:	d501      	bpl.n	5c42 <_i2c_master_interrupt_handler+0x186>
			i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    5c3e:	2302      	movs	r3, #2
    5c40:	762b      	strb	r3, [r5, #24]
		i2c_module->INTENCLR.reg =
    5c42:	2303      	movs	r3, #3
    5c44:	752b      	strb	r3, [r5, #20]
		module->buffer_length = 0;
    5c46:	2300      	movs	r3, #0
    5c48:	8363      	strh	r3, [r4, #26]
		module->status        = STATUS_OK;
    5c4a:	3325      	adds	r3, #37	; 0x25
    5c4c:	2200      	movs	r2, #0
    5c4e:	54e2      	strb	r2, [r4, r3]
		if ((callback_mask & (1 << I2C_MASTER_CALLBACK_READ_COMPLETE))
    5c50:	07b3      	lsls	r3, r6, #30
    5c52:	d503      	bpl.n	5c5c <_i2c_master_interrupt_handler+0x1a0>
				&& (module->transfer_direction == I2C_TRANSFER_READ)) {
    5c54:	2324      	movs	r3, #36	; 0x24
    5c56:	5ce3      	ldrb	r3, [r4, r3]
    5c58:	2b01      	cmp	r3, #1
    5c5a:	d00b      	beq.n	5c74 <_i2c_master_interrupt_handler+0x1b8>
		} else if ((callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE))
    5c5c:	07f3      	lsls	r3, r6, #31
    5c5e:	d400      	bmi.n	5c62 <_i2c_master_interrupt_handler+0x1a6>
    5c60:	e781      	b.n	5b66 <_i2c_master_interrupt_handler+0xaa>
				&& (module->transfer_direction == I2C_TRANSFER_WRITE)) {
    5c62:	2324      	movs	r3, #36	; 0x24
    5c64:	5ce3      	ldrb	r3, [r4, r3]
    5c66:	2b00      	cmp	r3, #0
    5c68:	d000      	beq.n	5c6c <_i2c_master_interrupt_handler+0x1b0>
    5c6a:	e77c      	b.n	5b66 <_i2c_master_interrupt_handler+0xaa>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
    5c6c:	68e3      	ldr	r3, [r4, #12]
    5c6e:	0020      	movs	r0, r4
    5c70:	4798      	blx	r3
    5c72:	e778      	b.n	5b66 <_i2c_master_interrupt_handler+0xaa>
			module->callbacks[I2C_MASTER_CALLBACK_READ_COMPLETE](module);
    5c74:	6923      	ldr	r3, [r4, #16]
    5c76:	0020      	movs	r0, r4
    5c78:	4798      	blx	r3
    5c7a:	e774      	b.n	5b66 <_i2c_master_interrupt_handler+0xaa>
			_i2c_master_wait_for_sync(module);
    5c7c:	0020      	movs	r0, r4
    5c7e:	4b07      	ldr	r3, [pc, #28]	; (5c9c <_i2c_master_interrupt_handler+0x1e0>)
    5c80:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT |
    5c82:	686a      	ldr	r2, [r5, #4]
    5c84:	23e0      	movs	r3, #224	; 0xe0
    5c86:	02db      	lsls	r3, r3, #11
    5c88:	4313      	orrs	r3, r2
    5c8a:	606b      	str	r3, [r5, #4]
    5c8c:	e780      	b.n	5b90 <_i2c_master_interrupt_handler+0xd4>
			module->callbacks[I2C_MASTER_CALLBACK_ERROR](module);
    5c8e:	6963      	ldr	r3, [r4, #20]
    5c90:	0020      	movs	r0, r4
    5c92:	4798      	blx	r3
}
    5c94:	e77f      	b.n	5b96 <_i2c_master_interrupt_handler+0xda>
    5c96:	46c0      	nop			; (mov r8, r8)
    5c98:	20002238 	.word	0x20002238
    5c9c:	000059ed 	.word	0x000059ed
    5ca0:	000059f9 	.word	0x000059f9
    5ca4:	00005a81 	.word	0x00005a81

00005ca8 <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
    5ca8:	b5f0      	push	{r4, r5, r6, r7, lr}
    5caa:	46de      	mov	lr, fp
    5cac:	4657      	mov	r7, sl
    5cae:	464e      	mov	r6, r9
    5cb0:	4645      	mov	r5, r8
    5cb2:	b5e0      	push	{r5, r6, r7, lr}
    5cb4:	b087      	sub	sp, #28
    5cb6:	4680      	mov	r8, r0
    5cb8:	9104      	str	r1, [sp, #16]
    5cba:	0016      	movs	r6, r2
    5cbc:	001f      	movs	r7, r3
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
    5cbe:	2200      	movs	r2, #0
    5cc0:	2300      	movs	r3, #0
    5cc2:	2100      	movs	r1, #0
    5cc4:	468b      	mov	fp, r1
	for (i = 63; i >= 0; i--) {
    5cc6:	243f      	movs	r4, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
    5cc8:	2001      	movs	r0, #1
    5cca:	0021      	movs	r1, r4
    5ccc:	9600      	str	r6, [sp, #0]
    5cce:	9701      	str	r7, [sp, #4]
    5cd0:	465c      	mov	r4, fp
    5cd2:	9403      	str	r4, [sp, #12]
    5cd4:	4644      	mov	r4, r8
    5cd6:	9405      	str	r4, [sp, #20]
    5cd8:	e013      	b.n	5d02 <long_division+0x5a>
    5cda:	2420      	movs	r4, #32
    5cdc:	1a64      	subs	r4, r4, r1
    5cde:	0005      	movs	r5, r0
    5ce0:	40e5      	lsrs	r5, r4
    5ce2:	46a8      	mov	r8, r5
    5ce4:	e014      	b.n	5d10 <long_division+0x68>
		if (n & bit_shift) {
			r |= 0x01;
		}

		if (r >= d) {
			r = r - d;
    5ce6:	9c00      	ldr	r4, [sp, #0]
    5ce8:	9d01      	ldr	r5, [sp, #4]
    5cea:	1b12      	subs	r2, r2, r4
    5cec:	41ab      	sbcs	r3, r5
			q |= bit_shift;
    5cee:	465c      	mov	r4, fp
    5cf0:	464d      	mov	r5, r9
    5cf2:	432c      	orrs	r4, r5
    5cf4:	46a3      	mov	fp, r4
    5cf6:	9c03      	ldr	r4, [sp, #12]
    5cf8:	4645      	mov	r5, r8
    5cfa:	432c      	orrs	r4, r5
    5cfc:	9403      	str	r4, [sp, #12]
	for (i = 63; i >= 0; i--) {
    5cfe:	3901      	subs	r1, #1
    5d00:	d325      	bcc.n	5d4e <long_division+0xa6>
		bit_shift = (uint64_t)1 << i;
    5d02:	2420      	movs	r4, #32
    5d04:	4264      	negs	r4, r4
    5d06:	190c      	adds	r4, r1, r4
    5d08:	d4e7      	bmi.n	5cda <long_division+0x32>
    5d0a:	0005      	movs	r5, r0
    5d0c:	40a5      	lsls	r5, r4
    5d0e:	46a8      	mov	r8, r5
    5d10:	0004      	movs	r4, r0
    5d12:	408c      	lsls	r4, r1
    5d14:	46a1      	mov	r9, r4
		r = r << 1;
    5d16:	1892      	adds	r2, r2, r2
    5d18:	415b      	adcs	r3, r3
    5d1a:	0014      	movs	r4, r2
    5d1c:	001d      	movs	r5, r3
		if (n & bit_shift) {
    5d1e:	9e05      	ldr	r6, [sp, #20]
    5d20:	464f      	mov	r7, r9
    5d22:	403e      	ands	r6, r7
    5d24:	46b4      	mov	ip, r6
    5d26:	9e04      	ldr	r6, [sp, #16]
    5d28:	4647      	mov	r7, r8
    5d2a:	403e      	ands	r6, r7
    5d2c:	46b2      	mov	sl, r6
    5d2e:	4666      	mov	r6, ip
    5d30:	4657      	mov	r7, sl
    5d32:	433e      	orrs	r6, r7
    5d34:	d003      	beq.n	5d3e <long_division+0x96>
			r |= 0x01;
    5d36:	0006      	movs	r6, r0
    5d38:	4326      	orrs	r6, r4
    5d3a:	0032      	movs	r2, r6
    5d3c:	002b      	movs	r3, r5
		if (r >= d) {
    5d3e:	9c00      	ldr	r4, [sp, #0]
    5d40:	9d01      	ldr	r5, [sp, #4]
    5d42:	429d      	cmp	r5, r3
    5d44:	d8db      	bhi.n	5cfe <long_division+0x56>
    5d46:	d1ce      	bne.n	5ce6 <long_division+0x3e>
    5d48:	4294      	cmp	r4, r2
    5d4a:	d8d8      	bhi.n	5cfe <long_division+0x56>
    5d4c:	e7cb      	b.n	5ce6 <long_division+0x3e>
    5d4e:	9b03      	ldr	r3, [sp, #12]
		}
	}

	return q;
}
    5d50:	4658      	mov	r0, fp
    5d52:	0019      	movs	r1, r3
    5d54:	b007      	add	sp, #28
    5d56:	bc3c      	pop	{r2, r3, r4, r5}
    5d58:	4690      	mov	r8, r2
    5d5a:	4699      	mov	r9, r3
    5d5c:	46a2      	mov	sl, r4
    5d5e:	46ab      	mov	fp, r5
    5d60:	bdf0      	pop	{r4, r5, r6, r7, pc}

00005d62 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
    5d62:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
    5d64:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    5d66:	2340      	movs	r3, #64	; 0x40
    5d68:	2400      	movs	r4, #0
	if (baudrate > (external_clock / 2)) {
    5d6a:	4281      	cmp	r1, r0
    5d6c:	d202      	bcs.n	5d74 <_sercom_get_sync_baud_val+0x12>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
		return STATUS_OK;
	}
}
    5d6e:	0018      	movs	r0, r3
    5d70:	bd10      	pop	{r4, pc}
		baud_calculated++;
    5d72:	001c      	movs	r4, r3
		clock_value = clock_value - baudrate;
    5d74:	1a09      	subs	r1, r1, r0
		baud_calculated++;
    5d76:	1c63      	adds	r3, r4, #1
    5d78:	b29b      	uxth	r3, r3
	while (clock_value >= baudrate) {
    5d7a:	4288      	cmp	r0, r1
    5d7c:	d9f9      	bls.n	5d72 <_sercom_get_sync_baud_val+0x10>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    5d7e:	2340      	movs	r3, #64	; 0x40
	if (baud_calculated > 0xFF) {
    5d80:	2cff      	cmp	r4, #255	; 0xff
    5d82:	d8f4      	bhi.n	5d6e <_sercom_get_sync_baud_val+0xc>
		*baudvalue = baud_calculated;
    5d84:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
    5d86:	2300      	movs	r3, #0
    5d88:	e7f1      	b.n	5d6e <_sercom_get_sync_baud_val+0xc>
	...

00005d8c <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
    5d8c:	b5f0      	push	{r4, r5, r6, r7, lr}
    5d8e:	b083      	sub	sp, #12
    5d90:	000f      	movs	r7, r1
    5d92:	0016      	movs	r6, r2
    5d94:	aa08      	add	r2, sp, #32
    5d96:	7811      	ldrb	r1, [r2, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
    5d98:	0004      	movs	r4, r0
    5d9a:	434c      	muls	r4, r1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    5d9c:	2240      	movs	r2, #64	; 0x40
	if ((baudrate * sample_num) > peripheral_clock) {
    5d9e:	42bc      	cmp	r4, r7
    5da0:	d902      	bls.n	5da8 <_sercom_get_async_baud_val+0x1c>
		baud_calculated = baud_int | (baud_fp << 13);
	}

	*baudval = baud_calculated;
	return STATUS_OK;
}
    5da2:	0010      	movs	r0, r2
    5da4:	b003      	add	sp, #12
    5da6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
    5da8:	2b00      	cmp	r3, #0
    5daa:	d114      	bne.n	5dd6 <_sercom_get_async_baud_val+0x4a>
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
    5dac:	0002      	movs	r2, r0
    5dae:	0008      	movs	r0, r1
    5db0:	2100      	movs	r1, #0
    5db2:	4c19      	ldr	r4, [pc, #100]	; (5e18 <_sercom_get_async_baud_val+0x8c>)
    5db4:	47a0      	blx	r4
    5db6:	0001      	movs	r1, r0
		ratio = long_division(temp1, peripheral_clock);
    5db8:	003a      	movs	r2, r7
    5dba:	2300      	movs	r3, #0
    5dbc:	2000      	movs	r0, #0
    5dbe:	4c17      	ldr	r4, [pc, #92]	; (5e1c <_sercom_get_async_baud_val+0x90>)
    5dc0:	47a0      	blx	r4
		scale = ((uint64_t)1 << SHIFT) - ratio;
    5dc2:	2200      	movs	r2, #0
    5dc4:	2301      	movs	r3, #1
    5dc6:	1a12      	subs	r2, r2, r0
    5dc8:	418b      	sbcs	r3, r1
		baud_calculated = (65536 * scale) >> SHIFT;
    5dca:	0c12      	lsrs	r2, r2, #16
    5dcc:	041b      	lsls	r3, r3, #16
    5dce:	431a      	orrs	r2, r3
	*baudval = baud_calculated;
    5dd0:	8032      	strh	r2, [r6, #0]
	return STATUS_OK;
    5dd2:	2200      	movs	r2, #0
    5dd4:	e7e5      	b.n	5da2 <_sercom_get_async_baud_val+0x16>
	uint64_t baud_calculated = 0;
    5dd6:	2200      	movs	r2, #0
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
    5dd8:	2b01      	cmp	r3, #1
    5dda:	d1f9      	bne.n	5dd0 <_sercom_get_async_baud_val+0x44>
		temp1 = ((uint64_t)baudrate * sample_num);
    5ddc:	000a      	movs	r2, r1
    5dde:	2300      	movs	r3, #0
    5de0:	2100      	movs	r1, #0
    5de2:	4c0d      	ldr	r4, [pc, #52]	; (5e18 <_sercom_get_async_baud_val+0x8c>)
    5de4:	47a0      	blx	r4
    5de6:	0002      	movs	r2, r0
    5de8:	000b      	movs	r3, r1
    5dea:	9200      	str	r2, [sp, #0]
    5dec:	9301      	str	r3, [sp, #4]
		baud_int = long_division( peripheral_clock, temp1);
    5dee:	0038      	movs	r0, r7
    5df0:	2100      	movs	r1, #0
    5df2:	4c0a      	ldr	r4, [pc, #40]	; (5e1c <_sercom_get_async_baud_val+0x90>)
    5df4:	47a0      	blx	r4
    5df6:	0005      	movs	r5, r0
		if(baud_int > BAUD_INT_MAX) {
    5df8:	2380      	movs	r3, #128	; 0x80
    5dfa:	019b      	lsls	r3, r3, #6
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    5dfc:	2240      	movs	r2, #64	; 0x40
		if(baud_int > BAUD_INT_MAX) {
    5dfe:	4298      	cmp	r0, r3
    5e00:	d8cf      	bhi.n	5da2 <_sercom_get_async_baud_val+0x16>
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
    5e02:	0f79      	lsrs	r1, r7, #29
    5e04:	00f8      	lsls	r0, r7, #3
    5e06:	9a00      	ldr	r2, [sp, #0]
    5e08:	9b01      	ldr	r3, [sp, #4]
    5e0a:	47a0      	blx	r4
		baud_fp = temp1 - 8 * baud_int;
    5e0c:	00ea      	lsls	r2, r5, #3
    5e0e:	1a82      	subs	r2, r0, r2
		baud_calculated = baud_int | (baud_fp << 13);
    5e10:	b2d2      	uxtb	r2, r2
    5e12:	0352      	lsls	r2, r2, #13
    5e14:	432a      	orrs	r2, r5
    5e16:	e7db      	b.n	5dd0 <_sercom_get_async_baud_val+0x44>
    5e18:	00016a5d 	.word	0x00016a5d
    5e1c:	00005ca9 	.word	0x00005ca9

00005e20 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
    5e20:	b510      	push	{r4, lr}
    5e22:	b082      	sub	sp, #8
    5e24:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
    5e26:	4b0e      	ldr	r3, [pc, #56]	; (5e60 <sercom_set_gclk_generator+0x40>)
    5e28:	781b      	ldrb	r3, [r3, #0]
    5e2a:	2b00      	cmp	r3, #0
    5e2c:	d007      	beq.n	5e3e <sercom_set_gclk_generator+0x1e>
    5e2e:	2900      	cmp	r1, #0
    5e30:	d105      	bne.n	5e3e <sercom_set_gclk_generator+0x1e>
		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
    5e32:	4b0b      	ldr	r3, [pc, #44]	; (5e60 <sercom_set_gclk_generator+0x40>)
    5e34:	785b      	ldrb	r3, [r3, #1]
    5e36:	4283      	cmp	r3, r0
    5e38:	d010      	beq.n	5e5c <sercom_set_gclk_generator+0x3c>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
    5e3a:	201d      	movs	r0, #29
    5e3c:	e00c      	b.n	5e58 <sercom_set_gclk_generator+0x38>
		gclk_chan_conf.source_generator = generator_source;
    5e3e:	a901      	add	r1, sp, #4
    5e40:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
    5e42:	2011      	movs	r0, #17
    5e44:	4b07      	ldr	r3, [pc, #28]	; (5e64 <sercom_set_gclk_generator+0x44>)
    5e46:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
    5e48:	2011      	movs	r0, #17
    5e4a:	4b07      	ldr	r3, [pc, #28]	; (5e68 <sercom_set_gclk_generator+0x48>)
    5e4c:	4798      	blx	r3
		_sercom_config.generator_source = generator_source;
    5e4e:	4b04      	ldr	r3, [pc, #16]	; (5e60 <sercom_set_gclk_generator+0x40>)
    5e50:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
    5e52:	2201      	movs	r2, #1
    5e54:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
    5e56:	2000      	movs	r0, #0
}
    5e58:	b002      	add	sp, #8
    5e5a:	bd10      	pop	{r4, pc}
		return STATUS_OK;
    5e5c:	2000      	movs	r0, #0
    5e5e:	e7fb      	b.n	5e58 <sercom_set_gclk_generator+0x38>
    5e60:	20000b68 	.word	0x20000b68
    5e64:	000072c5 	.word	0x000072c5
    5e68:	00007255 	.word	0x00007255

00005e6c <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
    5e6c:	4b3c      	ldr	r3, [pc, #240]	; (5f60 <_sercom_get_default_pad+0xf4>)
    5e6e:	4298      	cmp	r0, r3
    5e70:	d032      	beq.n	5ed8 <_sercom_get_default_pad+0x6c>
    5e72:	d90a      	bls.n	5e8a <_sercom_get_default_pad+0x1e>
    5e74:	4b3b      	ldr	r3, [pc, #236]	; (5f64 <_sercom_get_default_pad+0xf8>)
    5e76:	4298      	cmp	r0, r3
    5e78:	d04e      	beq.n	5f18 <_sercom_get_default_pad+0xac>
    5e7a:	4b3b      	ldr	r3, [pc, #236]	; (5f68 <_sercom_get_default_pad+0xfc>)
    5e7c:	4298      	cmp	r0, r3
    5e7e:	d055      	beq.n	5f2c <_sercom_get_default_pad+0xc0>
    5e80:	4b3a      	ldr	r3, [pc, #232]	; (5f6c <_sercom_get_default_pad+0x100>)
    5e82:	4298      	cmp	r0, r3
    5e84:	d038      	beq.n	5ef8 <_sercom_get_default_pad+0x8c>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
    5e86:	2000      	movs	r0, #0
}
    5e88:	4770      	bx	lr
	switch ((uintptr_t)sercom_module) {
    5e8a:	2384      	movs	r3, #132	; 0x84
    5e8c:	05db      	lsls	r3, r3, #23
    5e8e:	4298      	cmp	r0, r3
    5e90:	d00c      	beq.n	5eac <_sercom_get_default_pad+0x40>
    5e92:	4b37      	ldr	r3, [pc, #220]	; (5f70 <_sercom_get_default_pad+0x104>)
    5e94:	4298      	cmp	r0, r3
    5e96:	d1f6      	bne.n	5e86 <_sercom_get_default_pad+0x1a>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    5e98:	2901      	cmp	r1, #1
    5e9a:	d017      	beq.n	5ecc <_sercom_get_default_pad+0x60>
    5e9c:	2900      	cmp	r1, #0
    5e9e:	d057      	beq.n	5f50 <_sercom_get_default_pad+0xe4>
    5ea0:	2902      	cmp	r1, #2
    5ea2:	d015      	beq.n	5ed0 <_sercom_get_default_pad+0x64>
    5ea4:	2903      	cmp	r1, #3
    5ea6:	d015      	beq.n	5ed4 <_sercom_get_default_pad+0x68>
	return 0;
    5ea8:	2000      	movs	r0, #0
    5eaa:	e7ed      	b.n	5e88 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    5eac:	2901      	cmp	r1, #1
    5eae:	d007      	beq.n	5ec0 <_sercom_get_default_pad+0x54>
    5eb0:	2900      	cmp	r1, #0
    5eb2:	d04b      	beq.n	5f4c <_sercom_get_default_pad+0xe0>
    5eb4:	2902      	cmp	r1, #2
    5eb6:	d005      	beq.n	5ec4 <_sercom_get_default_pad+0x58>
    5eb8:	2903      	cmp	r1, #3
    5eba:	d005      	beq.n	5ec8 <_sercom_get_default_pad+0x5c>
	return 0;
    5ebc:	2000      	movs	r0, #0
    5ebe:	e7e3      	b.n	5e88 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    5ec0:	482c      	ldr	r0, [pc, #176]	; (5f74 <_sercom_get_default_pad+0x108>)
    5ec2:	e7e1      	b.n	5e88 <_sercom_get_default_pad+0x1c>
    5ec4:	482c      	ldr	r0, [pc, #176]	; (5f78 <_sercom_get_default_pad+0x10c>)
    5ec6:	e7df      	b.n	5e88 <_sercom_get_default_pad+0x1c>
    5ec8:	482c      	ldr	r0, [pc, #176]	; (5f7c <_sercom_get_default_pad+0x110>)
    5eca:	e7dd      	b.n	5e88 <_sercom_get_default_pad+0x1c>
    5ecc:	482c      	ldr	r0, [pc, #176]	; (5f80 <_sercom_get_default_pad+0x114>)
    5ece:	e7db      	b.n	5e88 <_sercom_get_default_pad+0x1c>
    5ed0:	482c      	ldr	r0, [pc, #176]	; (5f84 <_sercom_get_default_pad+0x118>)
    5ed2:	e7d9      	b.n	5e88 <_sercom_get_default_pad+0x1c>
    5ed4:	482c      	ldr	r0, [pc, #176]	; (5f88 <_sercom_get_default_pad+0x11c>)
    5ed6:	e7d7      	b.n	5e88 <_sercom_get_default_pad+0x1c>
    5ed8:	2901      	cmp	r1, #1
    5eda:	d007      	beq.n	5eec <_sercom_get_default_pad+0x80>
    5edc:	2900      	cmp	r1, #0
    5ede:	d039      	beq.n	5f54 <_sercom_get_default_pad+0xe8>
    5ee0:	2902      	cmp	r1, #2
    5ee2:	d005      	beq.n	5ef0 <_sercom_get_default_pad+0x84>
    5ee4:	2903      	cmp	r1, #3
    5ee6:	d005      	beq.n	5ef4 <_sercom_get_default_pad+0x88>
	return 0;
    5ee8:	2000      	movs	r0, #0
    5eea:	e7cd      	b.n	5e88 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    5eec:	4827      	ldr	r0, [pc, #156]	; (5f8c <_sercom_get_default_pad+0x120>)
    5eee:	e7cb      	b.n	5e88 <_sercom_get_default_pad+0x1c>
    5ef0:	4827      	ldr	r0, [pc, #156]	; (5f90 <_sercom_get_default_pad+0x124>)
    5ef2:	e7c9      	b.n	5e88 <_sercom_get_default_pad+0x1c>
    5ef4:	4827      	ldr	r0, [pc, #156]	; (5f94 <_sercom_get_default_pad+0x128>)
    5ef6:	e7c7      	b.n	5e88 <_sercom_get_default_pad+0x1c>
    5ef8:	2901      	cmp	r1, #1
    5efa:	d007      	beq.n	5f0c <_sercom_get_default_pad+0xa0>
    5efc:	2900      	cmp	r1, #0
    5efe:	d02b      	beq.n	5f58 <_sercom_get_default_pad+0xec>
    5f00:	2902      	cmp	r1, #2
    5f02:	d005      	beq.n	5f10 <_sercom_get_default_pad+0xa4>
    5f04:	2903      	cmp	r1, #3
    5f06:	d005      	beq.n	5f14 <_sercom_get_default_pad+0xa8>
	return 0;
    5f08:	2000      	movs	r0, #0
    5f0a:	e7bd      	b.n	5e88 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    5f0c:	4822      	ldr	r0, [pc, #136]	; (5f98 <_sercom_get_default_pad+0x12c>)
    5f0e:	e7bb      	b.n	5e88 <_sercom_get_default_pad+0x1c>
    5f10:	4822      	ldr	r0, [pc, #136]	; (5f9c <_sercom_get_default_pad+0x130>)
    5f12:	e7b9      	b.n	5e88 <_sercom_get_default_pad+0x1c>
    5f14:	4822      	ldr	r0, [pc, #136]	; (5fa0 <_sercom_get_default_pad+0x134>)
    5f16:	e7b7      	b.n	5e88 <_sercom_get_default_pad+0x1c>
    5f18:	2902      	cmp	r1, #2
    5f1a:	d003      	beq.n	5f24 <_sercom_get_default_pad+0xb8>
    5f1c:	2903      	cmp	r1, #3
    5f1e:	d003      	beq.n	5f28 <_sercom_get_default_pad+0xbc>
    5f20:	2000      	movs	r0, #0
    5f22:	e7b1      	b.n	5e88 <_sercom_get_default_pad+0x1c>
    5f24:	481f      	ldr	r0, [pc, #124]	; (5fa4 <_sercom_get_default_pad+0x138>)
    5f26:	e7af      	b.n	5e88 <_sercom_get_default_pad+0x1c>
    5f28:	481f      	ldr	r0, [pc, #124]	; (5fa8 <_sercom_get_default_pad+0x13c>)
    5f2a:	e7ad      	b.n	5e88 <_sercom_get_default_pad+0x1c>
    5f2c:	2901      	cmp	r1, #1
    5f2e:	d007      	beq.n	5f40 <_sercom_get_default_pad+0xd4>
    5f30:	2900      	cmp	r1, #0
    5f32:	d013      	beq.n	5f5c <_sercom_get_default_pad+0xf0>
    5f34:	2902      	cmp	r1, #2
    5f36:	d005      	beq.n	5f44 <_sercom_get_default_pad+0xd8>
    5f38:	2903      	cmp	r1, #3
    5f3a:	d005      	beq.n	5f48 <_sercom_get_default_pad+0xdc>
	return 0;
    5f3c:	2000      	movs	r0, #0
    5f3e:	e7a3      	b.n	5e88 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    5f40:	481a      	ldr	r0, [pc, #104]	; (5fac <_sercom_get_default_pad+0x140>)
    5f42:	e7a1      	b.n	5e88 <_sercom_get_default_pad+0x1c>
    5f44:	481a      	ldr	r0, [pc, #104]	; (5fb0 <_sercom_get_default_pad+0x144>)
    5f46:	e79f      	b.n	5e88 <_sercom_get_default_pad+0x1c>
    5f48:	481a      	ldr	r0, [pc, #104]	; (5fb4 <_sercom_get_default_pad+0x148>)
    5f4a:	e79d      	b.n	5e88 <_sercom_get_default_pad+0x1c>
    5f4c:	481a      	ldr	r0, [pc, #104]	; (5fb8 <_sercom_get_default_pad+0x14c>)
    5f4e:	e79b      	b.n	5e88 <_sercom_get_default_pad+0x1c>
    5f50:	2003      	movs	r0, #3
    5f52:	e799      	b.n	5e88 <_sercom_get_default_pad+0x1c>
    5f54:	4819      	ldr	r0, [pc, #100]	; (5fbc <_sercom_get_default_pad+0x150>)
    5f56:	e797      	b.n	5e88 <_sercom_get_default_pad+0x1c>
    5f58:	4819      	ldr	r0, [pc, #100]	; (5fc0 <_sercom_get_default_pad+0x154>)
    5f5a:	e795      	b.n	5e88 <_sercom_get_default_pad+0x1c>
    5f5c:	4819      	ldr	r0, [pc, #100]	; (5fc4 <_sercom_get_default_pad+0x158>)
    5f5e:	e793      	b.n	5e88 <_sercom_get_default_pad+0x1c>
    5f60:	42000800 	.word	0x42000800
    5f64:	42001000 	.word	0x42001000
    5f68:	43000400 	.word	0x43000400
    5f6c:	42000c00 	.word	0x42000c00
    5f70:	42000400 	.word	0x42000400
    5f74:	00050003 	.word	0x00050003
    5f78:	00060003 	.word	0x00060003
    5f7c:	00070003 	.word	0x00070003
    5f80:	00010003 	.word	0x00010003
    5f84:	001e0003 	.word	0x001e0003
    5f88:	001f0003 	.word	0x001f0003
    5f8c:	00090003 	.word	0x00090003
    5f90:	000a0003 	.word	0x000a0003
    5f94:	000b0003 	.word	0x000b0003
    5f98:	00110003 	.word	0x00110003
    5f9c:	00120003 	.word	0x00120003
    5fa0:	00130003 	.word	0x00130003
    5fa4:	000e0003 	.word	0x000e0003
    5fa8:	000f0003 	.word	0x000f0003
    5fac:	00170003 	.word	0x00170003
    5fb0:	00180003 	.word	0x00180003
    5fb4:	00190003 	.word	0x00190003
    5fb8:	00040003 	.word	0x00040003
    5fbc:	00080003 	.word	0x00080003
    5fc0:	00100003 	.word	0x00100003
    5fc4:	00160003 	.word	0x00160003

00005fc8 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
    5fc8:	b530      	push	{r4, r5, lr}
    5fca:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
    5fcc:	4b0b      	ldr	r3, [pc, #44]	; (5ffc <_sercom_get_sercom_inst_index+0x34>)
    5fce:	466a      	mov	r2, sp
    5fd0:	cb32      	ldmia	r3!, {r1, r4, r5}
    5fd2:	c232      	stmia	r2!, {r1, r4, r5}
    5fd4:	cb32      	ldmia	r3!, {r1, r4, r5}
    5fd6:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    5fd8:	9b00      	ldr	r3, [sp, #0]
    5fda:	4283      	cmp	r3, r0
    5fdc:	d00b      	beq.n	5ff6 <_sercom_get_sercom_inst_index+0x2e>
    5fde:	2301      	movs	r3, #1
    5fe0:	009a      	lsls	r2, r3, #2
    5fe2:	4669      	mov	r1, sp
    5fe4:	5852      	ldr	r2, [r2, r1]
    5fe6:	4282      	cmp	r2, r0
    5fe8:	d006      	beq.n	5ff8 <_sercom_get_sercom_inst_index+0x30>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    5fea:	3301      	adds	r3, #1
    5fec:	2b06      	cmp	r3, #6
    5fee:	d1f7      	bne.n	5fe0 <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
    5ff0:	2000      	movs	r0, #0
}
    5ff2:	b007      	add	sp, #28
    5ff4:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    5ff6:	2300      	movs	r3, #0
			return i;
    5ff8:	b2d8      	uxtb	r0, r3
    5ffa:	e7fa      	b.n	5ff2 <_sercom_get_sercom_inst_index+0x2a>
    5ffc:	0001fbac 	.word	0x0001fbac

00006000 <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
    6000:	4770      	bx	lr
	...

00006004 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    6004:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
    6006:	4b0a      	ldr	r3, [pc, #40]	; (6030 <_sercom_set_handler+0x2c>)
    6008:	781b      	ldrb	r3, [r3, #0]
    600a:	2b00      	cmp	r3, #0
    600c:	d10c      	bne.n	6028 <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    600e:	4f09      	ldr	r7, [pc, #36]	; (6034 <_sercom_set_handler+0x30>)
    6010:	4e09      	ldr	r6, [pc, #36]	; (6038 <_sercom_set_handler+0x34>)
			_sercom_instances[i] = NULL;
    6012:	4d0a      	ldr	r5, [pc, #40]	; (603c <_sercom_set_handler+0x38>)
    6014:	2400      	movs	r4, #0
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    6016:	51de      	str	r6, [r3, r7]
			_sercom_instances[i] = NULL;
    6018:	195a      	adds	r2, r3, r5
    601a:	6014      	str	r4, [r2, #0]
    601c:	3304      	adds	r3, #4
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    601e:	2b18      	cmp	r3, #24
    6020:	d1f9      	bne.n	6016 <_sercom_set_handler+0x12>
		}

		_handler_table_initialized = true;
    6022:	2201      	movs	r2, #1
    6024:	4b02      	ldr	r3, [pc, #8]	; (6030 <_sercom_set_handler+0x2c>)
    6026:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    6028:	0080      	lsls	r0, r0, #2
    602a:	4b02      	ldr	r3, [pc, #8]	; (6034 <_sercom_set_handler+0x30>)
    602c:	50c1      	str	r1, [r0, r3]
}
    602e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6030:	20000b6a 	.word	0x20000b6a
    6034:	20000b6c 	.word	0x20000b6c
    6038:	00006001 	.word	0x00006001
    603c:	20002238 	.word	0x20002238

00006040 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    6040:	b500      	push	{lr}
    6042:	b083      	sub	sp, #12
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    6044:	2308      	movs	r3, #8
    6046:	466a      	mov	r2, sp
    6048:	7013      	strb	r3, [r2, #0]
    604a:	3301      	adds	r3, #1
    604c:	7053      	strb	r3, [r2, #1]
    604e:	3301      	adds	r3, #1
    6050:	7093      	strb	r3, [r2, #2]
    6052:	3301      	adds	r3, #1
    6054:	70d3      	strb	r3, [r2, #3]
    6056:	3301      	adds	r3, #1
    6058:	7113      	strb	r3, [r2, #4]
    605a:	3301      	adds	r3, #1
    605c:	7153      	strb	r3, [r2, #5]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    605e:	4b03      	ldr	r3, [pc, #12]	; (606c <_sercom_get_interrupt_vector+0x2c>)
    6060:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    6062:	466b      	mov	r3, sp
    6064:	5618      	ldrsb	r0, [r3, r0]
}
    6066:	b003      	add	sp, #12
    6068:	bd00      	pop	{pc}
    606a:	46c0      	nop			; (mov r8, r8)
    606c:	00005fc9 	.word	0x00005fc9

00006070 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    6070:	b510      	push	{r4, lr}
    6072:	4b02      	ldr	r3, [pc, #8]	; (607c <SERCOM0_Handler+0xc>)
    6074:	681b      	ldr	r3, [r3, #0]
    6076:	2000      	movs	r0, #0
    6078:	4798      	blx	r3
    607a:	bd10      	pop	{r4, pc}
    607c:	20000b6c 	.word	0x20000b6c

00006080 <SERCOM1_Handler>:
    6080:	b510      	push	{r4, lr}
    6082:	4b02      	ldr	r3, [pc, #8]	; (608c <SERCOM1_Handler+0xc>)
    6084:	685b      	ldr	r3, [r3, #4]
    6086:	2001      	movs	r0, #1
    6088:	4798      	blx	r3
    608a:	bd10      	pop	{r4, pc}
    608c:	20000b6c 	.word	0x20000b6c

00006090 <SERCOM2_Handler>:
    6090:	b510      	push	{r4, lr}
    6092:	4b02      	ldr	r3, [pc, #8]	; (609c <SERCOM2_Handler+0xc>)
    6094:	689b      	ldr	r3, [r3, #8]
    6096:	2002      	movs	r0, #2
    6098:	4798      	blx	r3
    609a:	bd10      	pop	{r4, pc}
    609c:	20000b6c 	.word	0x20000b6c

000060a0 <SERCOM3_Handler>:
    60a0:	b510      	push	{r4, lr}
    60a2:	4b02      	ldr	r3, [pc, #8]	; (60ac <SERCOM3_Handler+0xc>)
    60a4:	68db      	ldr	r3, [r3, #12]
    60a6:	2003      	movs	r0, #3
    60a8:	4798      	blx	r3
    60aa:	bd10      	pop	{r4, pc}
    60ac:	20000b6c 	.word	0x20000b6c

000060b0 <SERCOM4_Handler>:
    60b0:	b510      	push	{r4, lr}
    60b2:	4b02      	ldr	r3, [pc, #8]	; (60bc <SERCOM4_Handler+0xc>)
    60b4:	691b      	ldr	r3, [r3, #16]
    60b6:	2004      	movs	r0, #4
    60b8:	4798      	blx	r3
    60ba:	bd10      	pop	{r4, pc}
    60bc:	20000b6c 	.word	0x20000b6c

000060c0 <SERCOM5_Handler>:
    60c0:	b510      	push	{r4, lr}
    60c2:	4b02      	ldr	r3, [pc, #8]	; (60cc <SERCOM5_Handler+0xc>)
    60c4:	695b      	ldr	r3, [r3, #20]
    60c6:	2005      	movs	r0, #5
    60c8:	4798      	blx	r3
    60ca:	bd10      	pop	{r4, pc}
    60cc:	20000b6c 	.word	0x20000b6c

000060d0 <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
    60d0:	b5f0      	push	{r4, r5, r6, r7, lr}
    60d2:	46d6      	mov	lr, sl
    60d4:	464f      	mov	r7, r9
    60d6:	4646      	mov	r6, r8
    60d8:	b5c0      	push	{r6, r7, lr}
    60da:	b08a      	sub	sp, #40	; 0x28
    60dc:	0006      	movs	r6, r0
    60de:	000f      	movs	r7, r1
    60e0:	0014      	movs	r4, r2
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
    60e2:	6031      	str	r1, [r6, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
    60e4:	680b      	ldr	r3, [r1, #0]
    60e6:	079b      	lsls	r3, r3, #30
    60e8:	d40a      	bmi.n	6100 <spi_init+0x30>
		return STATUS_ERR_DENIED;
#  endif
	}

	/* Check if reset is in progress. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    60ea:	680b      	ldr	r3, [r1, #0]
		return STATUS_BUSY;
    60ec:	2005      	movs	r0, #5
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    60ee:	07db      	lsls	r3, r3, #31
    60f0:	d400      	bmi.n	60f4 <spi_init+0x24>
    60f2:	e097      	b.n	6224 <spi_init+0x154>
	_sercom_instances[instance_index] = module;
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
}
    60f4:	b00a      	add	sp, #40	; 0x28
    60f6:	bc1c      	pop	{r2, r3, r4}
    60f8:	4690      	mov	r8, r2
    60fa:	4699      	mov	r9, r3
    60fc:	46a2      	mov	sl, r4
    60fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint32_t pad_pinmuxes[] = {
    6100:	6a93      	ldr	r3, [r2, #40]	; 0x28
    6102:	9305      	str	r3, [sp, #20]
    6104:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    6106:	9306      	str	r3, [sp, #24]
    6108:	6b13      	ldr	r3, [r2, #48]	; 0x30
    610a:	9307      	str	r3, [sp, #28]
    610c:	6b53      	ldr	r3, [r2, #52]	; 0x34
    610e:	9308      	str	r3, [sp, #32]
    6110:	2500      	movs	r5, #0
    6112:	e00a      	b.n	612a <spi_init+0x5a>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    6114:	0038      	movs	r0, r7
    6116:	4b9a      	ldr	r3, [pc, #616]	; (6380 <spi_init+0x2b0>)
    6118:	4798      	blx	r3
    611a:	e00e      	b.n	613a <spi_init+0x6a>

	if (pin_index & 1) {
		return (pmux_reg & PORT_PMUX_PMUXO_Msk) >> PORT_PMUX_PMUXO_Pos;
	}
	else {
		return (pmux_reg & PORT_PMUX_PMUXE_Msk) >> PORT_PMUX_PMUXE_Pos;
    611c:	230f      	movs	r3, #15
    611e:	4018      	ands	r0, r3
		if ((current_pinmux & 0xFFFF) !=
    6120:	4581      	cmp	r9, r0
    6122:	d130      	bne.n	6186 <spi_init+0xb6>
    6124:	3501      	adds	r5, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    6126:	2d04      	cmp	r5, #4
    6128:	d031      	beq.n	618e <spi_init+0xbe>
    612a:	b2e9      	uxtb	r1, r5
		uint32_t current_pinmux = pad_pinmuxes[pad];
    612c:	00ab      	lsls	r3, r5, #2
    612e:	aa02      	add	r2, sp, #8
    6130:	200c      	movs	r0, #12
    6132:	1812      	adds	r2, r2, r0
    6134:	58d0      	ldr	r0, [r2, r3]
		if (current_pinmux == PINMUX_DEFAULT) {
    6136:	2800      	cmp	r0, #0
    6138:	d0ec      	beq.n	6114 <spi_init+0x44>
		if (current_pinmux == PINMUX_UNUSED) {
    613a:	1c43      	adds	r3, r0, #1
    613c:	d0f2      	beq.n	6124 <spi_init+0x54>
		if ((current_pinmux & 0xFFFF) !=
    613e:	0401      	lsls	r1, r0, #16
    6140:	0c0b      	lsrs	r3, r1, #16
    6142:	4699      	mov	r9, r3
				system_pinmux_pin_get_mux_position(current_pinmux >> 16)) {
    6144:	0c00      	lsrs	r0, r0, #16
	if (port_index < PORT_INST_NUM) {
    6146:	b2c3      	uxtb	r3, r0
    6148:	469c      	mov	ip, r3
		return NULL;
    614a:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    614c:	0602      	lsls	r2, r0, #24
    614e:	d405      	bmi.n	615c <spi_init+0x8c>
		return &(ports[port_index]->Group[group_index]);
    6150:	4663      	mov	r3, ip
    6152:	095b      	lsrs	r3, r3, #5
    6154:	01db      	lsls	r3, r3, #7
    6156:	4a8b      	ldr	r2, [pc, #556]	; (6384 <spi_init+0x2b4>)
    6158:	4690      	mov	r8, r2
    615a:	4443      	add	r3, r8
	uint32_t pin_index = (gpio_pin % 32);
    615c:	221f      	movs	r2, #31
    615e:	4660      	mov	r0, ip
    6160:	4002      	ands	r2, r0
	if (!(port->PINCFG[pin_index].reg & PORT_PINCFG_PMUXEN)) {
    6162:	1898      	adds	r0, r3, r2
    6164:	3040      	adds	r0, #64	; 0x40
    6166:	7800      	ldrb	r0, [r0, #0]
    6168:	4682      	mov	sl, r0
		return SYSTEM_PINMUX_GPIO;
    616a:	2080      	movs	r0, #128	; 0x80
	if (!(port->PINCFG[pin_index].reg & PORT_PINCFG_PMUXEN)) {
    616c:	4651      	mov	r1, sl
    616e:	07c9      	lsls	r1, r1, #31
    6170:	d5d6      	bpl.n	6120 <spi_init+0x50>
	uint32_t pmux_reg = port->PMUX[pin_index / 2].reg;
    6172:	0852      	lsrs	r2, r2, #1
    6174:	189b      	adds	r3, r3, r2
    6176:	3330      	adds	r3, #48	; 0x30
    6178:	7818      	ldrb	r0, [r3, #0]
    617a:	b2c0      	uxtb	r0, r0
	if (pin_index & 1) {
    617c:	4663      	mov	r3, ip
    617e:	07db      	lsls	r3, r3, #31
    6180:	d5cc      	bpl.n	611c <spi_init+0x4c>
		return (pmux_reg & PORT_PMUX_PMUXO_Msk) >> PORT_PMUX_PMUXO_Pos;
    6182:	0900      	lsrs	r0, r0, #4
    6184:	e7cc      	b.n	6120 <spi_init+0x50>
			module->hw = NULL;
    6186:	2300      	movs	r3, #0
    6188:	6033      	str	r3, [r6, #0]
			return STATUS_ERR_DENIED;
    618a:	201c      	movs	r0, #28
    618c:	e7b2      	b.n	60f4 <spi_init+0x24>
	uint32_t external_clock = system_gclk_chan_get_hz(SERCOM_GCLK_ID);
    618e:	2011      	movs	r0, #17
    6190:	4b7d      	ldr	r3, [pc, #500]	; (6388 <spi_init+0x2b8>)
    6192:	4798      	blx	r3
	if (config->mode == SPI_MODE_MASTER) {
    6194:	7822      	ldrb	r2, [r4, #0]
	uint32_t ctrla = 0;
    6196:	2500      	movs	r5, #0
	if (config->mode == SPI_MODE_MASTER) {
    6198:	2a01      	cmp	r2, #1
    619a:	d026      	beq.n	61ea <spi_init+0x11a>
	ctrla |= config->mux_setting;
    619c:	6863      	ldr	r3, [r4, #4]
    619e:	68a2      	ldr	r2, [r4, #8]
    61a0:	4313      	orrs	r3, r2
    61a2:	68e2      	ldr	r2, [r4, #12]
    61a4:	4313      	orrs	r3, r2
    61a6:	432b      	orrs	r3, r5
	ctrlb |= config->character_size;
    61a8:	7c22      	ldrb	r2, [r4, #16]
	if (config->run_in_standby) {
    61aa:	7c61      	ldrb	r1, [r4, #17]
    61ac:	2900      	cmp	r1, #0
    61ae:	d001      	beq.n	61b4 <spi_init+0xe4>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
    61b0:	2180      	movs	r1, #128	; 0x80
    61b2:	430b      	orrs	r3, r1
	if (config->receiver_enable) {
    61b4:	7ca1      	ldrb	r1, [r4, #18]
    61b6:	2900      	cmp	r1, #0
    61b8:	d002      	beq.n	61c0 <spi_init+0xf0>
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
    61ba:	2180      	movs	r1, #128	; 0x80
    61bc:	0289      	lsls	r1, r1, #10
    61be:	430a      	orrs	r2, r1
	if (config->select_slave_low_detect_enable) {
    61c0:	7ce1      	ldrb	r1, [r4, #19]
    61c2:	2900      	cmp	r1, #0
    61c4:	d002      	beq.n	61cc <spi_init+0xfc>
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
    61c6:	2180      	movs	r1, #128	; 0x80
    61c8:	0089      	lsls	r1, r1, #2
    61ca:	430a      	orrs	r2, r1
	if (config->master_slave_select_enable) {
    61cc:	7d21      	ldrb	r1, [r4, #20]
    61ce:	2900      	cmp	r1, #0
    61d0:	d002      	beq.n	61d8 <spi_init+0x108>
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
    61d2:	2180      	movs	r1, #128	; 0x80
    61d4:	0189      	lsls	r1, r1, #6
    61d6:	430a      	orrs	r2, r1
	if (spi_module->CTRLA.reg == ctrla &&
    61d8:	6839      	ldr	r1, [r7, #0]
	ctrla |= SERCOM_SPI_CTRLA_ENABLE;
    61da:	2002      	movs	r0, #2
    61dc:	4303      	orrs	r3, r0
	if (spi_module->CTRLA.reg == ctrla &&
    61de:	428b      	cmp	r3, r1
    61e0:	d017      	beq.n	6212 <spi_init+0x142>
	module->hw = NULL;
    61e2:	2300      	movs	r3, #0
    61e4:	6033      	str	r3, [r6, #0]
	return STATUS_ERR_DENIED;
    61e6:	201c      	movs	r0, #28
    61e8:	e784      	b.n	60f4 <spi_init+0x24>
		enum status_code error_code = _sercom_get_sync_baud_val(
    61ea:	aa04      	add	r2, sp, #16
    61ec:	0001      	movs	r1, r0
    61ee:	69a0      	ldr	r0, [r4, #24]
    61f0:	4b66      	ldr	r3, [pc, #408]	; (638c <spi_init+0x2bc>)
    61f2:	4798      	blx	r3
    61f4:	0003      	movs	r3, r0
			return STATUS_ERR_INVALID_ARG;
    61f6:	2017      	movs	r0, #23
		if (error_code != STATUS_OK) {
    61f8:	2b00      	cmp	r3, #0
    61fa:	d000      	beq.n	61fe <spi_init+0x12e>
    61fc:	e77a      	b.n	60f4 <spi_init+0x24>
		if (spi_module->BAUD.reg !=  (uint8_t)baud) {
    61fe:	7b3b      	ldrb	r3, [r7, #12]
    6200:	b2db      	uxtb	r3, r3
    6202:	aa04      	add	r2, sp, #16
    6204:	7812      	ldrb	r2, [r2, #0]
			return STATUS_ERR_DENIED;
    6206:	3005      	adds	r0, #5
		if (spi_module->BAUD.reg !=  (uint8_t)baud) {
    6208:	429a      	cmp	r2, r3
    620a:	d000      	beq.n	620e <spi_init+0x13e>
    620c:	e772      	b.n	60f4 <spi_init+0x24>
		ctrla |= SERCOM_SPI_CTRLA_MODE(0x3);
    620e:	350c      	adds	r5, #12
    6210:	e7c4      	b.n	619c <spi_init+0xcc>
			spi_module->CTRLB.reg == ctrlb) {
    6212:	687b      	ldr	r3, [r7, #4]
	if (spi_module->CTRLA.reg == ctrla &&
    6214:	4293      	cmp	r3, r2
    6216:	d1e4      	bne.n	61e2 <spi_init+0x112>
		module->mode           = config->mode;
    6218:	7823      	ldrb	r3, [r4, #0]
    621a:	7173      	strb	r3, [r6, #5]
		module->character_size = config->character_size;
    621c:	7c23      	ldrb	r3, [r4, #16]
    621e:	71b3      	strb	r3, [r6, #6]
		return STATUS_OK;
    6220:	2000      	movs	r0, #0
    6222:	e767      	b.n	60f4 <spi_init+0x24>
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    6224:	0008      	movs	r0, r1
    6226:	4b5a      	ldr	r3, [pc, #360]	; (6390 <spi_init+0x2c0>)
    6228:	4798      	blx	r3
	if (sercom_index == 5) {
    622a:	2805      	cmp	r0, #5
    622c:	d100      	bne.n	6230 <spi_init+0x160>
    622e:	e09f      	b.n	6370 <spi_init+0x2a0>
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    6230:	0003      	movs	r3, r0
    6232:	3312      	adds	r3, #18
			MCLK->APBCMASK.reg |= mask;
    6234:	4957      	ldr	r1, [pc, #348]	; (6394 <spi_init+0x2c4>)
    6236:	69cd      	ldr	r5, [r1, #28]
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    6238:	2201      	movs	r2, #1
    623a:	4082      	lsls	r2, r0
    623c:	432a      	orrs	r2, r5
    623e:	61ca      	str	r2, [r1, #28]
	gclk_chan_conf.source_generator = config->generator_source;
    6240:	a909      	add	r1, sp, #36	; 0x24
    6242:	2524      	movs	r5, #36	; 0x24
    6244:	5d62      	ldrb	r2, [r4, r5]
    6246:	700a      	strb	r2, [r1, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    6248:	b2db      	uxtb	r3, r3
    624a:	9301      	str	r3, [sp, #4]
    624c:	0018      	movs	r0, r3
    624e:	4b52      	ldr	r3, [pc, #328]	; (6398 <spi_init+0x2c8>)
    6250:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    6252:	9801      	ldr	r0, [sp, #4]
    6254:	4b51      	ldr	r3, [pc, #324]	; (639c <spi_init+0x2cc>)
    6256:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    6258:	5d60      	ldrb	r0, [r4, r5]
    625a:	2100      	movs	r1, #0
    625c:	4b50      	ldr	r3, [pc, #320]	; (63a0 <spi_init+0x2d0>)
    625e:	4798      	blx	r3
	if (config->mode == SPI_MODE_MASTER) {
    6260:	7823      	ldrb	r3, [r4, #0]
    6262:	2b01      	cmp	r3, #1
    6264:	d019      	beq.n	629a <spi_init+0x1ca>
	SercomSpi *const spi_module = &(module->hw->SPI);
    6266:	6833      	ldr	r3, [r6, #0]
    6268:	4698      	mov	r8, r3
	config->mux_position = SYSTEM_PINMUX_GPIO;
    626a:	ab04      	add	r3, sp, #16
    626c:	2280      	movs	r2, #128	; 0x80
    626e:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    6270:	2200      	movs	r2, #0
    6272:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    6274:	2101      	movs	r1, #1
    6276:	7099      	strb	r1, [r3, #2]
	config->powersave    = false;
    6278:	70da      	strb	r2, [r3, #3]
	if(config->mode == SPI_MODE_SLAVE) {
    627a:	7823      	ldrb	r3, [r4, #0]
    627c:	2b00      	cmp	r3, #0
    627e:	d101      	bne.n	6284 <spi_init+0x1b4>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    6280:	ab04      	add	r3, sp, #16
    6282:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
    6284:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    6286:	9305      	str	r3, [sp, #20]
    6288:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    628a:	9306      	str	r3, [sp, #24]
    628c:	6b23      	ldr	r3, [r4, #48]	; 0x30
    628e:	9307      	str	r3, [sp, #28]
    6290:	6b63      	ldr	r3, [r4, #52]	; 0x34
    6292:	9308      	str	r3, [sp, #32]
    6294:	2700      	movs	r7, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
    6296:	ad05      	add	r5, sp, #20
    6298:	e011      	b.n	62be <spi_init+0x1ee>
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
    629a:	683b      	ldr	r3, [r7, #0]
    629c:	220c      	movs	r2, #12
    629e:	4313      	orrs	r3, r2
    62a0:	603b      	str	r3, [r7, #0]
    62a2:	e7e0      	b.n	6266 <spi_init+0x196>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    62a4:	4640      	mov	r0, r8
    62a6:	4b36      	ldr	r3, [pc, #216]	; (6380 <spi_init+0x2b0>)
    62a8:	4798      	blx	r3
    62aa:	e00d      	b.n	62c8 <spi_init+0x1f8>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    62ac:	a904      	add	r1, sp, #16
    62ae:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    62b0:	0c00      	lsrs	r0, r0, #16
    62b2:	b2c0      	uxtb	r0, r0
    62b4:	4b3b      	ldr	r3, [pc, #236]	; (63a4 <spi_init+0x2d4>)
    62b6:	4798      	blx	r3
    62b8:	3701      	adds	r7, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    62ba:	2f04      	cmp	r7, #4
    62bc:	d007      	beq.n	62ce <spi_init+0x1fe>
    62be:	b2f9      	uxtb	r1, r7
		uint32_t current_pinmux = pad_pinmuxes[pad];
    62c0:	00bb      	lsls	r3, r7, #2
    62c2:	5958      	ldr	r0, [r3, r5]
		if (current_pinmux == PINMUX_DEFAULT) {
    62c4:	2800      	cmp	r0, #0
    62c6:	d0ed      	beq.n	62a4 <spi_init+0x1d4>
		if (current_pinmux != PINMUX_UNUSED) {
    62c8:	1c43      	adds	r3, r0, #1
    62ca:	d1ef      	bne.n	62ac <spi_init+0x1dc>
    62cc:	e7f4      	b.n	62b8 <spi_init+0x1e8>
	module->mode             = config->mode;
    62ce:	7823      	ldrb	r3, [r4, #0]
    62d0:	7173      	strb	r3, [r6, #5]
	module->character_size   = config->character_size;
    62d2:	7c23      	ldrb	r3, [r4, #16]
    62d4:	71b3      	strb	r3, [r6, #6]
	module->receiver_enabled = config->receiver_enable;
    62d6:	7ca3      	ldrb	r3, [r4, #18]
    62d8:	71f3      	strb	r3, [r6, #7]
	module->master_slave_select_enable = config->master_slave_select_enable;
    62da:	7d23      	ldrb	r3, [r4, #20]
    62dc:	7233      	strb	r3, [r6, #8]
	uint16_t baud = 0;
    62de:	2200      	movs	r2, #0
    62e0:	ab02      	add	r3, sp, #8
    62e2:	80da      	strh	r2, [r3, #6]
	if (config->mode == SPI_MODE_MASTER) {
    62e4:	7823      	ldrb	r3, [r4, #0]
    62e6:	2b01      	cmp	r3, #1
    62e8:	d02a      	beq.n	6340 <spi_init+0x270>
	ctrla |= config->transfer_mode;
    62ea:	6863      	ldr	r3, [r4, #4]
    62ec:	68a2      	ldr	r2, [r4, #8]
    62ee:	4313      	orrs	r3, r2
	ctrla |= config->mux_setting;
    62f0:	68e2      	ldr	r2, [r4, #12]
    62f2:	4313      	orrs	r3, r2
	ctrlb |= config->character_size;
    62f4:	7c21      	ldrb	r1, [r4, #16]
	if (config->run_in_standby || system_is_debugger_present()) {
    62f6:	7c62      	ldrb	r2, [r4, #17]
    62f8:	2a00      	cmp	r2, #0
    62fa:	d103      	bne.n	6304 <spi_init+0x234>
    62fc:	4a2a      	ldr	r2, [pc, #168]	; (63a8 <spi_init+0x2d8>)
    62fe:	7892      	ldrb	r2, [r2, #2]
    6300:	0792      	lsls	r2, r2, #30
    6302:	d501      	bpl.n	6308 <spi_init+0x238>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
    6304:	2280      	movs	r2, #128	; 0x80
    6306:	4313      	orrs	r3, r2
	if (config->receiver_enable) {
    6308:	7ca2      	ldrb	r2, [r4, #18]
    630a:	2a00      	cmp	r2, #0
    630c:	d002      	beq.n	6314 <spi_init+0x244>
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
    630e:	2280      	movs	r2, #128	; 0x80
    6310:	0292      	lsls	r2, r2, #10
    6312:	4311      	orrs	r1, r2
	if (config->select_slave_low_detect_enable) {
    6314:	7ce2      	ldrb	r2, [r4, #19]
    6316:	2a00      	cmp	r2, #0
    6318:	d002      	beq.n	6320 <spi_init+0x250>
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
    631a:	2280      	movs	r2, #128	; 0x80
    631c:	0092      	lsls	r2, r2, #2
    631e:	4311      	orrs	r1, r2
	if (config->master_slave_select_enable) {
    6320:	7d22      	ldrb	r2, [r4, #20]
    6322:	2a00      	cmp	r2, #0
    6324:	d002      	beq.n	632c <spi_init+0x25c>
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
    6326:	2280      	movs	r2, #128	; 0x80
    6328:	0192      	lsls	r2, r2, #6
    632a:	4311      	orrs	r1, r2
	spi_module->CTRLA.reg |= ctrla;
    632c:	4642      	mov	r2, r8
    632e:	6812      	ldr	r2, [r2, #0]
    6330:	4313      	orrs	r3, r2
    6332:	4642      	mov	r2, r8
    6334:	6013      	str	r3, [r2, #0]
	spi_module->CTRLB.reg |= ctrlb;
    6336:	6853      	ldr	r3, [r2, #4]
    6338:	430b      	orrs	r3, r1
    633a:	6053      	str	r3, [r2, #4]
	return STATUS_OK;
    633c:	2000      	movs	r0, #0
    633e:	e6d9      	b.n	60f4 <spi_init+0x24>
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    6340:	6830      	ldr	r0, [r6, #0]
    6342:	4b13      	ldr	r3, [pc, #76]	; (6390 <spi_init+0x2c0>)
    6344:	4798      	blx	r3
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    6346:	3012      	adds	r0, #18
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
    6348:	b2c0      	uxtb	r0, r0
    634a:	4b0f      	ldr	r3, [pc, #60]	; (6388 <spi_init+0x2b8>)
    634c:	4798      	blx	r3
    634e:	0001      	movs	r1, r0
		enum status_code error_code = _sercom_get_sync_baud_val(
    6350:	ab02      	add	r3, sp, #8
    6352:	1d9a      	adds	r2, r3, #6
    6354:	69a0      	ldr	r0, [r4, #24]
    6356:	4b0d      	ldr	r3, [pc, #52]	; (638c <spi_init+0x2bc>)
    6358:	4798      	blx	r3
    635a:	0003      	movs	r3, r0
			return STATUS_ERR_INVALID_ARG;
    635c:	2017      	movs	r0, #23
		if (error_code != STATUS_OK) {
    635e:	2b00      	cmp	r3, #0
    6360:	d000      	beq.n	6364 <spi_init+0x294>
    6362:	e6c7      	b.n	60f4 <spi_init+0x24>
		spi_module->BAUD.reg = (uint8_t)baud;
    6364:	ab02      	add	r3, sp, #8
    6366:	3306      	adds	r3, #6
    6368:	781b      	ldrb	r3, [r3, #0]
    636a:	4642      	mov	r2, r8
    636c:	7313      	strb	r3, [r2, #12]
    636e:	e7bc      	b.n	62ea <spi_init+0x21a>
			MCLK->APBDMASK.reg |= mask;
    6370:	4a08      	ldr	r2, [pc, #32]	; (6394 <spi_init+0x2c4>)
    6372:	6a13      	ldr	r3, [r2, #32]
    6374:	2102      	movs	r1, #2
    6376:	430b      	orrs	r3, r1
    6378:	6213      	str	r3, [r2, #32]
		gclk_index   =  SERCOM5_GCLK_ID_CORE;
    637a:	2318      	movs	r3, #24
    637c:	e760      	b.n	6240 <spi_init+0x170>
    637e:	46c0      	nop			; (mov r8, r8)
    6380:	00005e6d 	.word	0x00005e6d
    6384:	40002800 	.word	0x40002800
    6388:	000072e9 	.word	0x000072e9
    638c:	00005d63 	.word	0x00005d63
    6390:	00005fc9 	.word	0x00005fc9
    6394:	40000400 	.word	0x40000400
    6398:	000072c5 	.word	0x000072c5
    639c:	00007255 	.word	0x00007255
    63a0:	00005e21 	.word	0x00005e21
    63a4:	000073f1 	.word	0x000073f1
    63a8:	41002000 	.word	0x41002000

000063ac <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		const bool select)
{
    63ac:	b510      	push	{r4, lr}
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
    63ae:	7944      	ldrb	r4, [r0, #5]
		return STATUS_ERR_UNSUPPORTED_DEV;
    63b0:	2315      	movs	r3, #21
	if (module->mode != SPI_MODE_MASTER) {
    63b2:	2c01      	cmp	r4, #1
    63b4:	d001      	beq.n	63ba <spi_select_slave+0xe>
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
		}
	}
	return STATUS_OK;
}
    63b6:	0018      	movs	r0, r3
    63b8:	bd10      	pop	{r4, pc}
	if(!(module->master_slave_select_enable))
    63ba:	7a04      	ldrb	r4, [r0, #8]
	return STATUS_OK;
    63bc:	2300      	movs	r3, #0
	if(!(module->master_slave_select_enable))
    63be:	2c00      	cmp	r4, #0
    63c0:	d1f9      	bne.n	63b6 <spi_select_slave+0xa>
		if (select) {
    63c2:	2a00      	cmp	r2, #0
    63c4:	d058      	beq.n	6478 <spi_select_slave+0xcc>
			if (slave->address_enabled) {
    63c6:	784b      	ldrb	r3, [r1, #1]
    63c8:	2b00      	cmp	r3, #0
    63ca:	d044      	beq.n	6456 <spi_select_slave+0xaa>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    63cc:	6803      	ldr	r3, [r0, #0]
    63ce:	7e1b      	ldrb	r3, [r3, #24]
				if (!spi_is_ready_to_write(module)) {
    63d0:	07db      	lsls	r3, r3, #31
    63d2:	d410      	bmi.n	63f6 <spi_select_slave+0x4a>
					port_pin_set_output_level(slave->ss_pin, true);
    63d4:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    63d6:	09d1      	lsrs	r1, r2, #7
		return NULL;
    63d8:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    63da:	2900      	cmp	r1, #0
    63dc:	d104      	bne.n	63e8 <spi_select_slave+0x3c>
		return &(ports[port_index]->Group[group_index]);
    63de:	0953      	lsrs	r3, r2, #5
    63e0:	01db      	lsls	r3, r3, #7
    63e2:	492e      	ldr	r1, [pc, #184]	; (649c <spi_select_slave+0xf0>)
    63e4:	468c      	mov	ip, r1
    63e6:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    63e8:	211f      	movs	r1, #31
    63ea:	4011      	ands	r1, r2
    63ec:	2201      	movs	r2, #1
    63ee:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    63f0:	619a      	str	r2, [r3, #24]
					return STATUS_BUSY;
    63f2:	2305      	movs	r3, #5
    63f4:	e7df      	b.n	63b6 <spi_select_slave+0xa>
				port_pin_set_output_level(slave->ss_pin, false);
    63f6:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    63f8:	09d4      	lsrs	r4, r2, #7
		return NULL;
    63fa:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    63fc:	2c00      	cmp	r4, #0
    63fe:	d104      	bne.n	640a <spi_select_slave+0x5e>
		return &(ports[port_index]->Group[group_index]);
    6400:	0953      	lsrs	r3, r2, #5
    6402:	01db      	lsls	r3, r3, #7
    6404:	4c25      	ldr	r4, [pc, #148]	; (649c <spi_select_slave+0xf0>)
    6406:	46a4      	mov	ip, r4
    6408:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    640a:	241f      	movs	r4, #31
    640c:	4014      	ands	r4, r2
    640e:	2201      	movs	r2, #1
    6410:	40a2      	lsls	r2, r4
		port_base->OUTCLR.reg = pin_mask;
    6412:	615a      	str	r2, [r3, #20]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    6414:	6803      	ldr	r3, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    6416:	7e1a      	ldrb	r2, [r3, #24]

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    6418:	07d2      	lsls	r2, r2, #31
    641a:	d501      	bpl.n	6420 <spi_select_slave+0x74>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    641c:	788a      	ldrb	r2, [r1, #2]
    641e:	629a      	str	r2, [r3, #40]	; 0x28
				if (!(module->receiver_enabled)) {
    6420:	79c2      	ldrb	r2, [r0, #7]
	return STATUS_OK;
    6422:	2300      	movs	r3, #0
				if (!(module->receiver_enabled)) {
    6424:	2a00      	cmp	r2, #0
    6426:	d1c6      	bne.n	63b6 <spi_select_slave+0xa>
	SercomSpi *const spi_module = &(module->hw->SPI);
    6428:	6802      	ldr	r2, [r0, #0]
					while (!spi_is_ready_to_read(module)) {
    642a:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    642c:	7e13      	ldrb	r3, [r2, #24]
    642e:	420b      	tst	r3, r1
    6430:	d0fc      	beq.n	642c <spi_select_slave+0x80>
    6432:	7e11      	ldrb	r1, [r2, #24]
	return STATUS_OK;
    6434:	2300      	movs	r3, #0
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    6436:	0749      	lsls	r1, r1, #29
    6438:	d5bd      	bpl.n	63b6 <spi_select_slave+0xa>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    643a:	8b53      	ldrh	r3, [r2, #26]
    643c:	075b      	lsls	r3, r3, #29
    643e:	d501      	bpl.n	6444 <spi_select_slave+0x98>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    6440:	2304      	movs	r3, #4
    6442:	8353      	strh	r3, [r2, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    6444:	7983      	ldrb	r3, [r0, #6]
    6446:	2b01      	cmp	r3, #1
    6448:	d002      	beq.n	6450 <spi_select_slave+0xa4>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    644a:	6a93      	ldr	r3, [r2, #40]	; 0x28
    644c:	2300      	movs	r3, #0
    644e:	e7b2      	b.n	63b6 <spi_select_slave+0xa>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    6450:	6a93      	ldr	r3, [r2, #40]	; 0x28
    6452:	2300      	movs	r3, #0
    6454:	e7af      	b.n	63b6 <spi_select_slave+0xa>
				port_pin_set_output_level(slave->ss_pin, false);
    6456:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    6458:	09d1      	lsrs	r1, r2, #7
		return NULL;
    645a:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    645c:	2900      	cmp	r1, #0
    645e:	d104      	bne.n	646a <spi_select_slave+0xbe>
		return &(ports[port_index]->Group[group_index]);
    6460:	0953      	lsrs	r3, r2, #5
    6462:	01db      	lsls	r3, r3, #7
    6464:	490d      	ldr	r1, [pc, #52]	; (649c <spi_select_slave+0xf0>)
    6466:	468c      	mov	ip, r1
    6468:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    646a:	211f      	movs	r1, #31
    646c:	4011      	ands	r1, r2
    646e:	2201      	movs	r2, #1
    6470:	408a      	lsls	r2, r1
		port_base->OUTCLR.reg = pin_mask;
    6472:	615a      	str	r2, [r3, #20]
	return STATUS_OK;
    6474:	2300      	movs	r3, #0
    6476:	e79e      	b.n	63b6 <spi_select_slave+0xa>
			port_pin_set_output_level(slave->ss_pin, true);
    6478:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    647a:	09d1      	lsrs	r1, r2, #7
		return NULL;
    647c:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    647e:	2900      	cmp	r1, #0
    6480:	d104      	bne.n	648c <spi_select_slave+0xe0>
		return &(ports[port_index]->Group[group_index]);
    6482:	0953      	lsrs	r3, r2, #5
    6484:	01db      	lsls	r3, r3, #7
    6486:	4905      	ldr	r1, [pc, #20]	; (649c <spi_select_slave+0xf0>)
    6488:	468c      	mov	ip, r1
    648a:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    648c:	211f      	movs	r1, #31
    648e:	4011      	ands	r1, r2
    6490:	2201      	movs	r2, #1
    6492:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    6494:	619a      	str	r2, [r3, #24]
	return STATUS_OK;
    6496:	2300      	movs	r3, #0
    6498:	e78d      	b.n	63b6 <spi_select_slave+0xa>
    649a:	46c0      	nop			; (mov r8, r8)
    649c:	40002800 	.word	0x40002800

000064a0 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
    64a0:	b5f0      	push	{r4, r5, r6, r7, lr}
    64a2:	46de      	mov	lr, fp
    64a4:	4657      	mov	r7, sl
    64a6:	464e      	mov	r6, r9
    64a8:	4645      	mov	r5, r8
    64aa:	b5e0      	push	{r5, r6, r7, lr}
    64ac:	b091      	sub	sp, #68	; 0x44
    64ae:	0005      	movs	r5, r0
    64b0:	000c      	movs	r4, r1
    64b2:	0016      	movs	r6, r2
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
    64b4:	6029      	str	r1, [r5, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    64b6:	0008      	movs	r0, r1
    64b8:	4bc4      	ldr	r3, [pc, #784]	; (67cc <usart_init+0x32c>)
    64ba:	4798      	blx	r3
    64bc:	0002      	movs	r2, r0
	uint32_t pm_index, gclk_index; 
#if (SAML22) || (SAMC20) 
	pm_index	= sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
	gclk_index	= sercom_index + SERCOM0_GCLK_ID_CORE;
#elif (SAML21) || (SAMR30) || (SAMR34) || (SAMR35) || (WLR089)
	if (sercom_index == 5) {
    64be:	2805      	cmp	r0, #5
    64c0:	d00d      	beq.n	64de <usart_init+0x3e>
		pm_index     = MCLK_APBDMASK_SERCOM5_Pos;
		gclk_index   = SERCOM5_GCLK_ID_CORE;
	} else {
		pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    64c2:	0007      	movs	r7, r0
    64c4:	3712      	adds	r7, #18
		pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
    64c6:	0003      	movs	r3, r0
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    64c8:	6821      	ldr	r1, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
    64ca:	2005      	movs	r0, #5
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    64cc:	07c9      	lsls	r1, r1, #31
    64ce:	d509      	bpl.n	64e4 <usart_init+0x44>
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
}
    64d0:	b011      	add	sp, #68	; 0x44
    64d2:	bc3c      	pop	{r2, r3, r4, r5}
    64d4:	4690      	mov	r8, r2
    64d6:	4699      	mov	r9, r3
    64d8:	46a2      	mov	sl, r4
    64da:	46ab      	mov	fp, r5
    64dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		gclk_index   = SERCOM5_GCLK_ID_CORE;
    64de:	2718      	movs	r7, #24
		pm_index     = MCLK_APBDMASK_SERCOM5_Pos;
    64e0:	2301      	movs	r3, #1
    64e2:	e7f1      	b.n	64c8 <usart_init+0x28>
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    64e4:	6821      	ldr	r1, [r4, #0]
		return STATUS_ERR_DENIED;
    64e6:	3017      	adds	r0, #23
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    64e8:	0789      	lsls	r1, r1, #30
    64ea:	d4f1      	bmi.n	64d0 <usart_init+0x30>
	if (sercom_index == 5) {
    64ec:	2a05      	cmp	r2, #5
    64ee:	d049      	beq.n	6584 <usart_init+0xe4>
			MCLK->APBCMASK.reg |= mask;
    64f0:	49b7      	ldr	r1, [pc, #732]	; (67d0 <usart_init+0x330>)
    64f2:	69c8      	ldr	r0, [r1, #28]
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);	
    64f4:	2201      	movs	r2, #1
    64f6:	409a      	lsls	r2, r3
    64f8:	0013      	movs	r3, r2
    64fa:	4303      	orrs	r3, r0
    64fc:	61cb      	str	r3, [r1, #28]
	gclk_chan_conf.source_generator = config->generator_source;
    64fe:	a90f      	add	r1, sp, #60	; 0x3c
    6500:	232d      	movs	r3, #45	; 0x2d
    6502:	4698      	mov	r8, r3
    6504:	5cf3      	ldrb	r3, [r6, r3]
    6506:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    6508:	b2ff      	uxtb	r7, r7
    650a:	0038      	movs	r0, r7
    650c:	4bb1      	ldr	r3, [pc, #708]	; (67d4 <usart_init+0x334>)
    650e:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    6510:	0038      	movs	r0, r7
    6512:	4bb1      	ldr	r3, [pc, #708]	; (67d8 <usart_init+0x338>)
    6514:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    6516:	4643      	mov	r3, r8
    6518:	5cf0      	ldrb	r0, [r6, r3]
    651a:	2100      	movs	r1, #0
    651c:	4baf      	ldr	r3, [pc, #700]	; (67dc <usart_init+0x33c>)
    651e:	4798      	blx	r3
	module->character_size = config->character_size;
    6520:	7af3      	ldrb	r3, [r6, #11]
    6522:	716b      	strb	r3, [r5, #5]
	module->receiver_enabled = config->receiver_enable;
    6524:	2324      	movs	r3, #36	; 0x24
    6526:	5cf3      	ldrb	r3, [r6, r3]
    6528:	71ab      	strb	r3, [r5, #6]
	module->transmitter_enabled = config->transmitter_enable;
    652a:	2325      	movs	r3, #37	; 0x25
    652c:	5cf3      	ldrb	r3, [r6, r3]
    652e:	71eb      	strb	r3, [r5, #7]
	module->lin_slave_enabled = config->lin_slave_enable;
    6530:	7ef3      	ldrb	r3, [r6, #27]
    6532:	722b      	strb	r3, [r5, #8]
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
    6534:	7f33      	ldrb	r3, [r6, #28]
    6536:	726b      	strb	r3, [r5, #9]
	SercomUsart *const usart_hw = &(module->hw->USART);
    6538:	682b      	ldr	r3, [r5, #0]
    653a:	4698      	mov	r8, r3
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    653c:	0018      	movs	r0, r3
    653e:	4ba3      	ldr	r3, [pc, #652]	; (67cc <usart_init+0x32c>)
    6540:	4798      	blx	r3
	if (sercom_index == 5) {
    6542:	2805      	cmp	r0, #5
    6544:	d026      	beq.n	6594 <usart_init+0xf4>
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    6546:	3012      	adds	r0, #18
	uint16_t baud  = 0;
    6548:	2200      	movs	r2, #0
    654a:	230e      	movs	r3, #14
    654c:	a906      	add	r1, sp, #24
    654e:	468c      	mov	ip, r1
    6550:	4463      	add	r3, ip
    6552:	801a      	strh	r2, [r3, #0]
	switch (config->sample_rate) {
    6554:	8a32      	ldrh	r2, [r6, #16]
    6556:	9202      	str	r2, [sp, #8]
    6558:	2380      	movs	r3, #128	; 0x80
    655a:	01db      	lsls	r3, r3, #7
    655c:	429a      	cmp	r2, r3
    655e:	d100      	bne.n	6562 <usart_init+0xc2>
    6560:	e0a7      	b.n	66b2 <usart_init+0x212>
    6562:	d919      	bls.n	6598 <usart_init+0xf8>
    6564:	23c0      	movs	r3, #192	; 0xc0
    6566:	01db      	lsls	r3, r3, #7
    6568:	9a02      	ldr	r2, [sp, #8]
    656a:	429a      	cmp	r2, r3
    656c:	d100      	bne.n	6570 <usart_init+0xd0>
    656e:	e09b      	b.n	66a8 <usart_init+0x208>
    6570:	2380      	movs	r3, #128	; 0x80
    6572:	021b      	lsls	r3, r3, #8
    6574:	429a      	cmp	r2, r3
    6576:	d000      	beq.n	657a <usart_init+0xda>
    6578:	e123      	b.n	67c2 <usart_init+0x322>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
    657a:	2303      	movs	r3, #3
    657c:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    657e:	2300      	movs	r3, #0
    6580:	9307      	str	r3, [sp, #28]
    6582:	e012      	b.n	65aa <usart_init+0x10a>
			MCLK->APBDMASK.reg |= mask;
    6584:	4992      	ldr	r1, [pc, #584]	; (67d0 <usart_init+0x330>)
    6586:	6a08      	ldr	r0, [r1, #32]
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
    6588:	3a04      	subs	r2, #4
    658a:	409a      	lsls	r2, r3
    658c:	0013      	movs	r3, r2
    658e:	4303      	orrs	r3, r0
    6590:	620b      	str	r3, [r1, #32]
    6592:	e7b4      	b.n	64fe <usart_init+0x5e>
		gclk_index   = SERCOM5_GCLK_ID_CORE;
    6594:	2018      	movs	r0, #24
    6596:	e7d7      	b.n	6548 <usart_init+0xa8>
	switch (config->sample_rate) {
    6598:	2380      	movs	r3, #128	; 0x80
    659a:	019b      	lsls	r3, r3, #6
    659c:	429a      	cmp	r2, r3
    659e:	d000      	beq.n	65a2 <usart_init+0x102>
    65a0:	e10f      	b.n	67c2 <usart_init+0x322>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    65a2:	2310      	movs	r3, #16
    65a4:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    65a6:	3b0f      	subs	r3, #15
    65a8:	9307      	str	r3, [sp, #28]
	ctrla = (uint32_t)config->data_order |
    65aa:	6833      	ldr	r3, [r6, #0]
    65ac:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    65ae:	68f3      	ldr	r3, [r6, #12]
    65b0:	469b      	mov	fp, r3
		config->sample_adjustment |
    65b2:	6973      	ldr	r3, [r6, #20]
    65b4:	9303      	str	r3, [sp, #12]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    65b6:	7e33      	ldrb	r3, [r6, #24]
    65b8:	9304      	str	r3, [sp, #16]
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    65ba:	2326      	movs	r3, #38	; 0x26
    65bc:	5cf3      	ldrb	r3, [r6, r3]
    65be:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
    65c0:	6873      	ldr	r3, [r6, #4]
    65c2:	4699      	mov	r9, r3
	switch (transfer_mode)
    65c4:	2b00      	cmp	r3, #0
    65c6:	d100      	bne.n	65ca <usart_init+0x12a>
    65c8:	e09b      	b.n	6702 <usart_init+0x262>
    65ca:	2380      	movs	r3, #128	; 0x80
    65cc:	055b      	lsls	r3, r3, #21
    65ce:	4599      	cmp	r9, r3
    65d0:	d104      	bne.n	65dc <usart_init+0x13c>
			if (!config->use_external_clock) {
    65d2:	2327      	movs	r3, #39	; 0x27
    65d4:	5cf3      	ldrb	r3, [r6, r3]
    65d6:	2b00      	cmp	r3, #0
    65d8:	d100      	bne.n	65dc <usart_init+0x13c>
    65da:	e080      	b.n	66de <usart_init+0x23e>
	if(config->encoding_format_enable) {
    65dc:	7e73      	ldrb	r3, [r6, #25]
    65de:	2b00      	cmp	r3, #0
    65e0:	d002      	beq.n	65e8 <usart_init+0x148>
		usart_hw->RXPL.reg = config->receive_pulse_length;
    65e2:	7eb3      	ldrb	r3, [r6, #26]
    65e4:	4642      	mov	r2, r8
    65e6:	7393      	strb	r3, [r2, #14]
	usart_hw->BAUD.reg = baud;
    65e8:	230e      	movs	r3, #14
    65ea:	aa06      	add	r2, sp, #24
    65ec:	4694      	mov	ip, r2
    65ee:	4463      	add	r3, ip
    65f0:	881b      	ldrh	r3, [r3, #0]
    65f2:	4642      	mov	r2, r8
    65f4:	8193      	strh	r3, [r2, #12]
	ctrla |= transfer_mode;
    65f6:	9b05      	ldr	r3, [sp, #20]
    65f8:	465a      	mov	r2, fp
    65fa:	4313      	orrs	r3, r2
    65fc:	9a03      	ldr	r2, [sp, #12]
    65fe:	4313      	orrs	r3, r2
    6600:	464a      	mov	r2, r9
    6602:	4313      	orrs	r3, r2
    6604:	9f02      	ldr	r7, [sp, #8]
    6606:	431f      	orrs	r7, r3
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    6608:	9b04      	ldr	r3, [sp, #16]
    660a:	021b      	lsls	r3, r3, #8
	ctrla |= transfer_mode;
    660c:	431f      	orrs	r7, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    660e:	4653      	mov	r3, sl
    6610:	075b      	lsls	r3, r3, #29
	ctrla |= transfer_mode;
    6612:	431f      	orrs	r7, r3
	if (config->use_external_clock == false) {
    6614:	2327      	movs	r3, #39	; 0x27
    6616:	5cf3      	ldrb	r3, [r6, r3]
    6618:	2b00      	cmp	r3, #0
    661a:	d101      	bne.n	6620 <usart_init+0x180>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
    661c:	3304      	adds	r3, #4
    661e:	431f      	orrs	r7, r3
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    6620:	7e73      	ldrb	r3, [r6, #25]
    6622:	029b      	lsls	r3, r3, #10
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    6624:	7f32      	ldrb	r2, [r6, #28]
    6626:	0252      	lsls	r2, r2, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    6628:	4313      	orrs	r3, r2
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    662a:	7f72      	ldrb	r2, [r6, #29]
    662c:	0212      	lsls	r2, r2, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    662e:	4313      	orrs	r3, r2
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    6630:	2224      	movs	r2, #36	; 0x24
    6632:	5cb2      	ldrb	r2, [r6, r2]
    6634:	0452      	lsls	r2, r2, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    6636:	4313      	orrs	r3, r2
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
    6638:	2225      	movs	r2, #37	; 0x25
    663a:	5cb2      	ldrb	r2, [r6, r2]
    663c:	0412      	lsls	r2, r2, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    663e:	4313      	orrs	r3, r2
	ctrlb |= (uint32_t)config->character_size;
    6640:	7ab1      	ldrb	r1, [r6, #10]
    6642:	7af2      	ldrb	r2, [r6, #11]
    6644:	4311      	orrs	r1, r2
    6646:	4319      	orrs	r1, r3
	if (config->parity != USART_PARITY_NONE) {
    6648:	8933      	ldrh	r3, [r6, #8]
    664a:	2bff      	cmp	r3, #255	; 0xff
    664c:	d07d      	beq.n	674a <usart_init+0x2aa>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
    664e:	2280      	movs	r2, #128	; 0x80
    6650:	0452      	lsls	r2, r2, #17
    6652:	4317      	orrs	r7, r2
		ctrlb |= config->parity;
    6654:	4319      	orrs	r1, r3
	if (config->run_in_standby || system_is_debugger_present()) {
    6656:	232c      	movs	r3, #44	; 0x2c
    6658:	5cf3      	ldrb	r3, [r6, r3]
    665a:	2b00      	cmp	r3, #0
    665c:	d103      	bne.n	6666 <usart_init+0x1c6>
    665e:	4b60      	ldr	r3, [pc, #384]	; (67e0 <usart_init+0x340>)
    6660:	789b      	ldrb	r3, [r3, #2]
    6662:	079b      	lsls	r3, r3, #30
    6664:	d501      	bpl.n	666a <usart_init+0x1ca>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
    6666:	2380      	movs	r3, #128	; 0x80
    6668:	431f      	orrs	r7, r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    666a:	682a      	ldr	r2, [r5, #0]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    666c:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    666e:	2b00      	cmp	r3, #0
    6670:	d1fc      	bne.n	666c <usart_init+0x1cc>
	usart_hw->CTRLB.reg = ctrlb;
    6672:	4643      	mov	r3, r8
    6674:	6059      	str	r1, [r3, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
    6676:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    6678:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    667a:	2b00      	cmp	r3, #0
    667c:	d1fc      	bne.n	6678 <usart_init+0x1d8>
	usart_hw->CTRLA.reg = ctrla;
    667e:	4643      	mov	r3, r8
    6680:	601f      	str	r7, [r3, #0]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    6682:	ab0e      	add	r3, sp, #56	; 0x38
    6684:	2280      	movs	r2, #128	; 0x80
    6686:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    6688:	2200      	movs	r2, #0
    668a:	705a      	strb	r2, [r3, #1]
	config->powersave    = false;
    668c:	70da      	strb	r2, [r3, #3]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    668e:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
    6690:	6b33      	ldr	r3, [r6, #48]	; 0x30
    6692:	930a      	str	r3, [sp, #40]	; 0x28
    6694:	6b73      	ldr	r3, [r6, #52]	; 0x34
    6696:	930b      	str	r3, [sp, #44]	; 0x2c
    6698:	6bb3      	ldr	r3, [r6, #56]	; 0x38
    669a:	930c      	str	r3, [sp, #48]	; 0x30
    669c:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    669e:	9302      	str	r3, [sp, #8]
    66a0:	930d      	str	r3, [sp, #52]	; 0x34
    66a2:	2700      	movs	r7, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
    66a4:	ae0a      	add	r6, sp, #40	; 0x28
    66a6:	e05e      	b.n	6766 <usart_init+0x2c6>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    66a8:	2308      	movs	r3, #8
    66aa:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    66ac:	3b07      	subs	r3, #7
    66ae:	9307      	str	r3, [sp, #28]
    66b0:	e77b      	b.n	65aa <usart_init+0x10a>
	ctrla = (uint32_t)config->data_order |
    66b2:	6833      	ldr	r3, [r6, #0]
    66b4:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    66b6:	68f3      	ldr	r3, [r6, #12]
    66b8:	469b      	mov	fp, r3
		config->sample_adjustment |
    66ba:	6973      	ldr	r3, [r6, #20]
    66bc:	9303      	str	r3, [sp, #12]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    66be:	7e33      	ldrb	r3, [r6, #24]
    66c0:	9304      	str	r3, [sp, #16]
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    66c2:	2326      	movs	r3, #38	; 0x26
    66c4:	5cf3      	ldrb	r3, [r6, r3]
    66c6:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
    66c8:	6873      	ldr	r3, [r6, #4]
    66ca:	4699      	mov	r9, r3
	switch (transfer_mode)
    66cc:	2b00      	cmp	r3, #0
    66ce:	d014      	beq.n	66fa <usart_init+0x25a>
    66d0:	2380      	movs	r3, #128	; 0x80
    66d2:	055b      	lsls	r3, r3, #21
    66d4:	4599      	cmp	r9, r3
    66d6:	d100      	bne.n	66da <usart_init+0x23a>
    66d8:	e77b      	b.n	65d2 <usart_init+0x132>
	enum status_code status_code = STATUS_OK;
    66da:	2000      	movs	r0, #0
    66dc:	e020      	b.n	6720 <usart_init+0x280>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
    66de:	6a33      	ldr	r3, [r6, #32]
    66e0:	001f      	movs	r7, r3
    66e2:	b2c0      	uxtb	r0, r0
    66e4:	4b3f      	ldr	r3, [pc, #252]	; (67e4 <usart_init+0x344>)
    66e6:	4798      	blx	r3
    66e8:	0001      	movs	r1, r0
    66ea:	220e      	movs	r2, #14
    66ec:	ab06      	add	r3, sp, #24
    66ee:	469c      	mov	ip, r3
    66f0:	4462      	add	r2, ip
    66f2:	0038      	movs	r0, r7
    66f4:	4b3c      	ldr	r3, [pc, #240]	; (67e8 <usart_init+0x348>)
    66f6:	4798      	blx	r3
    66f8:	e012      	b.n	6720 <usart_init+0x280>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    66fa:	2308      	movs	r3, #8
    66fc:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    66fe:	2300      	movs	r3, #0
    6700:	9307      	str	r3, [sp, #28]
			if (config->use_external_clock) {
    6702:	2327      	movs	r3, #39	; 0x27
    6704:	5cf3      	ldrb	r3, [r6, r3]
    6706:	2b00      	cmp	r3, #0
    6708:	d00e      	beq.n	6728 <usart_init+0x288>
				status_code =
    670a:	9b06      	ldr	r3, [sp, #24]
    670c:	9300      	str	r3, [sp, #0]
    670e:	9b07      	ldr	r3, [sp, #28]
    6710:	220e      	movs	r2, #14
    6712:	a906      	add	r1, sp, #24
    6714:	468c      	mov	ip, r1
    6716:	4462      	add	r2, ip
    6718:	6ab1      	ldr	r1, [r6, #40]	; 0x28
    671a:	6a30      	ldr	r0, [r6, #32]
    671c:	4f33      	ldr	r7, [pc, #204]	; (67ec <usart_init+0x34c>)
    671e:	47b8      	blx	r7
	if (status_code != STATUS_OK) {
    6720:	2800      	cmp	r0, #0
    6722:	d000      	beq.n	6726 <usart_init+0x286>
    6724:	e6d4      	b.n	64d0 <usart_init+0x30>
    6726:	e759      	b.n	65dc <usart_init+0x13c>
						_sercom_get_async_baud_val(config->baudrate,
    6728:	6a33      	ldr	r3, [r6, #32]
    672a:	001f      	movs	r7, r3
    672c:	b2c0      	uxtb	r0, r0
    672e:	4b2d      	ldr	r3, [pc, #180]	; (67e4 <usart_init+0x344>)
    6730:	4798      	blx	r3
    6732:	0001      	movs	r1, r0
				status_code =
    6734:	9b06      	ldr	r3, [sp, #24]
    6736:	9300      	str	r3, [sp, #0]
    6738:	9b07      	ldr	r3, [sp, #28]
    673a:	220e      	movs	r2, #14
    673c:	a806      	add	r0, sp, #24
    673e:	4684      	mov	ip, r0
    6740:	4462      	add	r2, ip
    6742:	0038      	movs	r0, r7
    6744:	4f29      	ldr	r7, [pc, #164]	; (67ec <usart_init+0x34c>)
    6746:	47b8      	blx	r7
    6748:	e7ea      	b.n	6720 <usart_init+0x280>
		if(config->lin_slave_enable) {
    674a:	7ef3      	ldrb	r3, [r6, #27]
    674c:	2b00      	cmp	r3, #0
    674e:	d082      	beq.n	6656 <usart_init+0x1b6>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
    6750:	2380      	movs	r3, #128	; 0x80
    6752:	04db      	lsls	r3, r3, #19
    6754:	431f      	orrs	r7, r3
    6756:	e77e      	b.n	6656 <usart_init+0x1b6>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    6758:	0020      	movs	r0, r4
    675a:	4b25      	ldr	r3, [pc, #148]	; (67f0 <usart_init+0x350>)
    675c:	4798      	blx	r3
    675e:	e007      	b.n	6770 <usart_init+0x2d0>
    6760:	3701      	adds	r7, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    6762:	2f04      	cmp	r7, #4
    6764:	d00d      	beq.n	6782 <usart_init+0x2e2>
    6766:	b2f9      	uxtb	r1, r7
		uint32_t current_pinmux = pad_pinmuxes[pad];
    6768:	00bb      	lsls	r3, r7, #2
    676a:	5998      	ldr	r0, [r3, r6]
		if (current_pinmux == PINMUX_DEFAULT) {
    676c:	2800      	cmp	r0, #0
    676e:	d0f3      	beq.n	6758 <usart_init+0x2b8>
		if (current_pinmux != PINMUX_UNUSED) {
    6770:	1c43      	adds	r3, r0, #1
    6772:	d0f5      	beq.n	6760 <usart_init+0x2c0>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    6774:	a90e      	add	r1, sp, #56	; 0x38
    6776:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    6778:	0c00      	lsrs	r0, r0, #16
    677a:	b2c0      	uxtb	r0, r0
    677c:	4b1d      	ldr	r3, [pc, #116]	; (67f4 <usart_init+0x354>)
    677e:	4798      	blx	r3
    6780:	e7ee      	b.n	6760 <usart_init+0x2c0>
		module->callback[i]            = NULL;
    6782:	2300      	movs	r3, #0
    6784:	60eb      	str	r3, [r5, #12]
    6786:	612b      	str	r3, [r5, #16]
    6788:	616b      	str	r3, [r5, #20]
    678a:	61ab      	str	r3, [r5, #24]
    678c:	61eb      	str	r3, [r5, #28]
    678e:	622b      	str	r3, [r5, #32]
	module->tx_buffer_ptr              = NULL;
    6790:	62ab      	str	r3, [r5, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
    6792:	626b      	str	r3, [r5, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
    6794:	2200      	movs	r2, #0
    6796:	85eb      	strh	r3, [r5, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
    6798:	85ab      	strh	r3, [r5, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
    679a:	3330      	adds	r3, #48	; 0x30
    679c:	54ea      	strb	r2, [r5, r3]
	module->callback_enable_mask       = 0x00;
    679e:	3301      	adds	r3, #1
    67a0:	54ea      	strb	r2, [r5, r3]
	module->rx_status                  = STATUS_OK;
    67a2:	3301      	adds	r3, #1
    67a4:	54ea      	strb	r2, [r5, r3]
	module->tx_status                  = STATUS_OK;
    67a6:	3301      	adds	r3, #1
    67a8:	54ea      	strb	r2, [r5, r3]
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    67aa:	6828      	ldr	r0, [r5, #0]
    67ac:	4b07      	ldr	r3, [pc, #28]	; (67cc <usart_init+0x32c>)
    67ae:	4798      	blx	r3
    67b0:	0004      	movs	r4, r0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
    67b2:	4911      	ldr	r1, [pc, #68]	; (67f8 <usart_init+0x358>)
    67b4:	4b11      	ldr	r3, [pc, #68]	; (67fc <usart_init+0x35c>)
    67b6:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    67b8:	00a4      	lsls	r4, r4, #2
    67ba:	4b11      	ldr	r3, [pc, #68]	; (6800 <usart_init+0x360>)
    67bc:	50e5      	str	r5, [r4, r3]
	return status_code;
    67be:	2000      	movs	r0, #0
    67c0:	e686      	b.n	64d0 <usart_init+0x30>
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    67c2:	2310      	movs	r3, #16
    67c4:	9306      	str	r3, [sp, #24]
	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    67c6:	2300      	movs	r3, #0
    67c8:	9307      	str	r3, [sp, #28]
    67ca:	e6ee      	b.n	65aa <usart_init+0x10a>
    67cc:	00005fc9 	.word	0x00005fc9
    67d0:	40000400 	.word	0x40000400
    67d4:	000072c5 	.word	0x000072c5
    67d8:	00007255 	.word	0x00007255
    67dc:	00005e21 	.word	0x00005e21
    67e0:	41002000 	.word	0x41002000
    67e4:	000072e9 	.word	0x000072e9
    67e8:	00005d63 	.word	0x00005d63
    67ec:	00005d8d 	.word	0x00005d8d
    67f0:	00005e6d 	.word	0x00005e6d
    67f4:	000073f1 	.word	0x000073f1
    67f8:	000069e9 	.word	0x000069e9
    67fc:	00006005 	.word	0x00006005
    6800:	20002238 	.word	0x20002238

00006804 <usart_write_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    6804:	79c2      	ldrb	r2, [r0, #7]
		return STATUS_ERR_DENIED;
    6806:	231c      	movs	r3, #28
	if (!(module->transmitter_enabled)) {
    6808:	2a00      	cmp	r2, #0
    680a:	d101      	bne.n	6810 <usart_write_wait+0xc>
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
		/* Wait until data is sent */
	}

	return STATUS_OK;
}
    680c:	0018      	movs	r0, r3
    680e:	4770      	bx	lr
	if (module->remaining_tx_buffer_length > 0) {
    6810:	8dc2      	ldrh	r2, [r0, #46]	; 0x2e
    6812:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    6814:	3b17      	subs	r3, #23
	if (module->remaining_tx_buffer_length > 0) {
    6816:	2a00      	cmp	r2, #0
    6818:	d1f8      	bne.n	680c <usart_write_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
    681a:	6802      	ldr	r2, [r0, #0]
	usart_hw->DATA.reg = tx_data;
    681c:	8511      	strh	r1, [r2, #40]	; 0x28
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
    681e:	2102      	movs	r1, #2
    6820:	7e13      	ldrb	r3, [r2, #24]
    6822:	420b      	tst	r3, r1
    6824:	d0fc      	beq.n	6820 <usart_write_wait+0x1c>
	return STATUS_OK;
    6826:	2300      	movs	r3, #0
    6828:	e7f0      	b.n	680c <usart_write_wait+0x8>

0000682a <usart_read_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    682a:	7982      	ldrb	r2, [r0, #6]
		return STATUS_ERR_DENIED;
    682c:	231c      	movs	r3, #28
	if (!(module->receiver_enabled)) {
    682e:	2a00      	cmp	r2, #0
    6830:	d101      	bne.n	6836 <usart_read_wait+0xc>

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;

	return STATUS_OK;
}
    6832:	0018      	movs	r0, r3
    6834:	4770      	bx	lr
	if (module->remaining_rx_buffer_length > 0) {
    6836:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
    6838:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    683a:	3b17      	subs	r3, #23
	if (module->remaining_rx_buffer_length > 0) {
    683c:	2a00      	cmp	r2, #0
    683e:	d1f8      	bne.n	6832 <usart_read_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
    6840:	6802      	ldr	r2, [r0, #0]
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
    6842:	7e10      	ldrb	r0, [r2, #24]
    6844:	0740      	lsls	r0, r0, #29
    6846:	d5f4      	bpl.n	6832 <usart_read_wait+0x8>
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    6848:	8b53      	ldrh	r3, [r2, #26]
    684a:	b2db      	uxtb	r3, r3
	if (error_code) {
    684c:	0698      	lsls	r0, r3, #26
    684e:	d01d      	beq.n	688c <usart_read_wait+0x62>
		if (error_code & SERCOM_USART_STATUS_FERR) {
    6850:	0798      	lsls	r0, r3, #30
    6852:	d503      	bpl.n	685c <usart_read_wait+0x32>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    6854:	2302      	movs	r3, #2
    6856:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_FORMAT;
    6858:	3318      	adds	r3, #24
    685a:	e7ea      	b.n	6832 <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    685c:	0758      	lsls	r0, r3, #29
    685e:	d503      	bpl.n	6868 <usart_read_wait+0x3e>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    6860:	2304      	movs	r3, #4
    6862:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_OVERFLOW;
    6864:	331a      	adds	r3, #26
    6866:	e7e4      	b.n	6832 <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
    6868:	07d8      	lsls	r0, r3, #31
    686a:	d503      	bpl.n	6874 <usart_read_wait+0x4a>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    686c:	2301      	movs	r3, #1
    686e:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_DATA;
    6870:	3312      	adds	r3, #18
    6872:	e7de      	b.n	6832 <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_ISF) {
    6874:	06d8      	lsls	r0, r3, #27
    6876:	d503      	bpl.n	6880 <usart_read_wait+0x56>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    6878:	2310      	movs	r3, #16
    687a:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PROTOCOL;
    687c:	3332      	adds	r3, #50	; 0x32
    687e:	e7d8      	b.n	6832 <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_COLL) {
    6880:	069b      	lsls	r3, r3, #26
    6882:	d503      	bpl.n	688c <usart_read_wait+0x62>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    6884:	2320      	movs	r3, #32
    6886:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PACKET_COLLISION;
    6888:	3321      	adds	r3, #33	; 0x21
    688a:	e7d2      	b.n	6832 <usart_read_wait+0x8>
	*rx_data = usart_hw->DATA.reg;
    688c:	8d13      	ldrh	r3, [r2, #40]	; 0x28
    688e:	800b      	strh	r3, [r1, #0]
	return STATUS_OK;
    6890:	2300      	movs	r3, #0
    6892:	e7ce      	b.n	6832 <usart_read_wait+0x8>

00006894 <usart_write_buffer_wait>:
 */
enum status_code usart_write_buffer_wait(
		struct usart_module *const module,
		const uint8_t *tx_data,
		uint16_t length)
{
    6894:	b5f0      	push	{r4, r5, r6, r7, lr}
    6896:	46ce      	mov	lr, r9
    6898:	4647      	mov	r7, r8
    689a:	b580      	push	{r7, lr}
    689c:	b083      	sub	sp, #12
    689e:	0005      	movs	r5, r0
    68a0:	9101      	str	r1, [sp, #4]
	Assert(module);
	Assert(module->hw);

	/* Check if the buffer length is valid */
	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    68a2:	2017      	movs	r0, #23
	if (length == 0) {
    68a4:	2a00      	cmp	r2, #0
    68a6:	d104      	bne.n	68b2 <usart_write_buffer_wait+0x1e>
			return STATUS_ERR_TIMEOUT;
		}
	}

	return STATUS_OK;
}
    68a8:	b003      	add	sp, #12
    68aa:	bc0c      	pop	{r2, r3}
    68ac:	4690      	mov	r8, r2
    68ae:	4699      	mov	r9, r3
    68b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!(module->transmitter_enabled)) {
    68b2:	79eb      	ldrb	r3, [r5, #7]
		return STATUS_ERR_DENIED;
    68b4:	3005      	adds	r0, #5
	if (!(module->transmitter_enabled)) {
    68b6:	2b00      	cmp	r3, #0
    68b8:	d0f6      	beq.n	68a8 <usart_write_buffer_wait+0x14>
	SercomUsart *const usart_hw = &(module->hw->USART);
    68ba:	682c      	ldr	r4, [r5, #0]
	while (length--) {
    68bc:	3a01      	subs	r2, #1
    68be:	b293      	uxth	r3, r2
    68c0:	4699      	mov	r9, r3
    68c2:	2600      	movs	r6, #0
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) {
    68c4:	2701      	movs	r7, #1
	while (length--) {
    68c6:	4b20      	ldr	r3, [pc, #128]	; (6948 <usart_write_buffer_wait+0xb4>)
    68c8:	4698      	mov	r8, r3
    68ca:	e011      	b.n	68f0 <usart_write_buffer_wait+0x5c>
		uint16_t data_to_send = tx_data[tx_pos++];
    68cc:	1c73      	adds	r3, r6, #1
    68ce:	b29b      	uxth	r3, r3
    68d0:	9a01      	ldr	r2, [sp, #4]
    68d2:	5d91      	ldrb	r1, [r2, r6]
		if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    68d4:	796a      	ldrb	r2, [r5, #5]
    68d6:	2a01      	cmp	r2, #1
    68d8:	d017      	beq.n	690a <usart_write_buffer_wait+0x76>
		uint16_t data_to_send = tx_data[tx_pos++];
    68da:	b289      	uxth	r1, r1
    68dc:	001e      	movs	r6, r3
		usart_write_wait(module, data_to_send);
    68de:	0028      	movs	r0, r5
    68e0:	4b1a      	ldr	r3, [pc, #104]	; (694c <usart_write_buffer_wait+0xb8>)
    68e2:	4798      	blx	r3
	while (length--) {
    68e4:	464b      	mov	r3, r9
    68e6:	3b01      	subs	r3, #1
    68e8:	b29b      	uxth	r3, r3
    68ea:	4699      	mov	r9, r3
    68ec:	4543      	cmp	r3, r8
    68ee:	d013      	beq.n	6918 <usart_write_buffer_wait+0x84>
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) {
    68f0:	7e23      	ldrb	r3, [r4, #24]
    68f2:	423b      	tst	r3, r7
    68f4:	d1ea      	bne.n	68cc <usart_write_buffer_wait+0x38>
    68f6:	4b14      	ldr	r3, [pc, #80]	; (6948 <usart_write_buffer_wait+0xb4>)
    68f8:	7e22      	ldrb	r2, [r4, #24]
    68fa:	423a      	tst	r2, r7
    68fc:	d1e6      	bne.n	68cc <usart_write_buffer_wait+0x38>
			} else if (i == USART_TIMEOUT) {
    68fe:	2b01      	cmp	r3, #1
    6900:	d019      	beq.n	6936 <usart_write_buffer_wait+0xa2>
    6902:	3b01      	subs	r3, #1
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
    6904:	2b00      	cmp	r3, #0
    6906:	d1f7      	bne.n	68f8 <usart_write_buffer_wait+0x64>
    6908:	e7e0      	b.n	68cc <usart_write_buffer_wait+0x38>
			data_to_send |= (tx_data[tx_pos++] << 8);
    690a:	3602      	adds	r6, #2
    690c:	b2b6      	uxth	r6, r6
    690e:	9a01      	ldr	r2, [sp, #4]
    6910:	5cd3      	ldrb	r3, [r2, r3]
    6912:	021b      	lsls	r3, r3, #8
    6914:	4319      	orrs	r1, r3
    6916:	e7e2      	b.n	68de <usart_write_buffer_wait+0x4a>
		if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) {
    6918:	7e23      	ldrb	r3, [r4, #24]
    691a:	079b      	lsls	r3, r3, #30
    691c:	d40d      	bmi.n	693a <usart_write_buffer_wait+0xa6>
    691e:	4b0a      	ldr	r3, [pc, #40]	; (6948 <usart_write_buffer_wait+0xb4>)
    6920:	2102      	movs	r1, #2
    6922:	7e22      	ldrb	r2, [r4, #24]
    6924:	420a      	tst	r2, r1
    6926:	d10a      	bne.n	693e <usart_write_buffer_wait+0xaa>
		} else if (i == USART_TIMEOUT) {
    6928:	2b01      	cmp	r3, #1
    692a:	d00a      	beq.n	6942 <usart_write_buffer_wait+0xae>
    692c:	3b01      	subs	r3, #1
	for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
    692e:	2b00      	cmp	r3, #0
    6930:	d1f7      	bne.n	6922 <usart_write_buffer_wait+0x8e>
	return STATUS_OK;
    6932:	2000      	movs	r0, #0
    6934:	e7b8      	b.n	68a8 <usart_write_buffer_wait+0x14>
				return STATUS_ERR_TIMEOUT;
    6936:	2012      	movs	r0, #18
    6938:	e7b6      	b.n	68a8 <usart_write_buffer_wait+0x14>
	return STATUS_OK;
    693a:	2000      	movs	r0, #0
    693c:	e7b4      	b.n	68a8 <usart_write_buffer_wait+0x14>
    693e:	2000      	movs	r0, #0
    6940:	e7b2      	b.n	68a8 <usart_write_buffer_wait+0x14>
			return STATUS_ERR_TIMEOUT;
    6942:	2012      	movs	r0, #18
    6944:	e7b0      	b.n	68a8 <usart_write_buffer_wait+0x14>
    6946:	46c0      	nop			; (mov r8, r8)
    6948:	0000ffff 	.word	0x0000ffff
    694c:	00006805 	.word	0x00006805

00006950 <usart_read_buffer_wait>:
 */
enum status_code usart_read_buffer_wait(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
    6950:	b5f0      	push	{r4, r5, r6, r7, lr}
    6952:	46d6      	mov	lr, sl
    6954:	b500      	push	{lr}
    6956:	b084      	sub	sp, #16
    6958:	0004      	movs	r4, r0
    695a:	9101      	str	r1, [sp, #4]
	Assert(module);
	Assert(module->hw);

	/* Check if the buffer length is valid */
	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    695c:	2017      	movs	r0, #23
	if (length == 0) {
    695e:	2a00      	cmp	r2, #0
    6960:	d103      	bne.n	696a <usart_read_buffer_wait+0x1a>
			rx_data[rx_pos++] = (received_data >> 8);
		}
	}

	return STATUS_OK;
}
    6962:	b004      	add	sp, #16
    6964:	bc04      	pop	{r2}
    6966:	4692      	mov	sl, r2
    6968:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!(module->receiver_enabled)) {
    696a:	79a3      	ldrb	r3, [r4, #6]
		return STATUS_ERR_DENIED;
    696c:	3005      	adds	r0, #5
	if (!(module->receiver_enabled)) {
    696e:	2b00      	cmp	r3, #0
    6970:	d0f7      	beq.n	6962 <usart_read_buffer_wait+0x12>
	SercomUsart *const usart_hw = &(module->hw->USART);
    6972:	6826      	ldr	r6, [r4, #0]
	while (length--) {
    6974:	3a01      	subs	r2, #1
    6976:	b293      	uxth	r3, r2
    6978:	469a      	mov	sl, r3
    697a:	2500      	movs	r5, #0
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) {
    697c:	2704      	movs	r7, #4
    697e:	e019      	b.n	69b4 <usart_read_buffer_wait+0x64>
		uint16_t received_data = 0;
    6980:	2300      	movs	r3, #0
    6982:	aa02      	add	r2, sp, #8
    6984:	80d3      	strh	r3, [r2, #6]
		retval = usart_read_wait(module, &received_data);
    6986:	1d91      	adds	r1, r2, #6
    6988:	0020      	movs	r0, r4
    698a:	4b15      	ldr	r3, [pc, #84]	; (69e0 <usart_read_buffer_wait+0x90>)
    698c:	4798      	blx	r3
		if (retval != STATUS_OK) {
    698e:	2800      	cmp	r0, #0
    6990:	d1e7      	bne.n	6962 <usart_read_buffer_wait+0x12>
		rx_data[rx_pos++] = received_data;
    6992:	1c69      	adds	r1, r5, #1
    6994:	b289      	uxth	r1, r1
    6996:	ab02      	add	r3, sp, #8
    6998:	88db      	ldrh	r3, [r3, #6]
    699a:	9a01      	ldr	r2, [sp, #4]
    699c:	5553      	strb	r3, [r2, r5]
		if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    699e:	7962      	ldrb	r2, [r4, #5]
    69a0:	2a01      	cmp	r2, #1
    69a2:	d014      	beq.n	69ce <usart_read_buffer_wait+0x7e>
		rx_data[rx_pos++] = received_data;
    69a4:	000d      	movs	r5, r1
	while (length--) {
    69a6:	4653      	mov	r3, sl
    69a8:	3b01      	subs	r3, #1
    69aa:	b29b      	uxth	r3, r3
    69ac:	469a      	mov	sl, r3
    69ae:	4b0d      	ldr	r3, [pc, #52]	; (69e4 <usart_read_buffer_wait+0x94>)
    69b0:	459a      	cmp	sl, r3
    69b2:	d0d6      	beq.n	6962 <usart_read_buffer_wait+0x12>
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) {
    69b4:	7e33      	ldrb	r3, [r6, #24]
    69b6:	423b      	tst	r3, r7
    69b8:	d1e2      	bne.n	6980 <usart_read_buffer_wait+0x30>
    69ba:	4b0a      	ldr	r3, [pc, #40]	; (69e4 <usart_read_buffer_wait+0x94>)
    69bc:	7e32      	ldrb	r2, [r6, #24]
    69be:	423a      	tst	r2, r7
    69c0:	d1de      	bne.n	6980 <usart_read_buffer_wait+0x30>
			} else if (i == USART_TIMEOUT) {
    69c2:	2b01      	cmp	r3, #1
    69c4:	d009      	beq.n	69da <usart_read_buffer_wait+0x8a>
    69c6:	3b01      	subs	r3, #1
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
    69c8:	2b00      	cmp	r3, #0
    69ca:	d1f7      	bne.n	69bc <usart_read_buffer_wait+0x6c>
    69cc:	e7d8      	b.n	6980 <usart_read_buffer_wait+0x30>
			rx_data[rx_pos++] = (received_data >> 8);
    69ce:	3502      	adds	r5, #2
    69d0:	b2ad      	uxth	r5, r5
    69d2:	0a1b      	lsrs	r3, r3, #8
    69d4:	9a01      	ldr	r2, [sp, #4]
    69d6:	5453      	strb	r3, [r2, r1]
    69d8:	e7e5      	b.n	69a6 <usart_read_buffer_wait+0x56>
				return STATUS_ERR_TIMEOUT;
    69da:	2012      	movs	r0, #18
    69dc:	e7c1      	b.n	6962 <usart_read_buffer_wait+0x12>
    69de:	46c0      	nop			; (mov r8, r8)
    69e0:	0000682b 	.word	0x0000682b
    69e4:	0000ffff 	.word	0x0000ffff

000069e8 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
    69e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
    69ea:	0080      	lsls	r0, r0, #2
    69ec:	4b62      	ldr	r3, [pc, #392]	; (6b78 <_usart_interrupt_handler+0x190>)
    69ee:	58c5      	ldr	r5, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
    69f0:	682c      	ldr	r4, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    69f2:	69e3      	ldr	r3, [r4, #28]
	while (usart_is_syncing(module)) {
    69f4:	2b00      	cmp	r3, #0
    69f6:	d1fc      	bne.n	69f2 <_usart_interrupt_handler+0xa>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    69f8:	7e23      	ldrb	r3, [r4, #24]
	interrupt_status &= usart_hw->INTENSET.reg;
    69fa:	7da6      	ldrb	r6, [r4, #22]
    69fc:	401e      	ands	r6, r3
	callback_status = module->callback_reg_mask &
    69fe:	2330      	movs	r3, #48	; 0x30
    6a00:	5ceb      	ldrb	r3, [r5, r3]
    6a02:	2231      	movs	r2, #49	; 0x31
    6a04:	5caf      	ldrb	r7, [r5, r2]
    6a06:	401f      	ands	r7, r3
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    6a08:	07f3      	lsls	r3, r6, #31
    6a0a:	d522      	bpl.n	6a52 <_usart_interrupt_handler+0x6a>
		if (module->remaining_tx_buffer_length) {
    6a0c:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    6a0e:	b29b      	uxth	r3, r3
    6a10:	2b00      	cmp	r3, #0
    6a12:	d01c      	beq.n	6a4e <_usart_interrupt_handler+0x66>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    6a14:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    6a16:	7813      	ldrb	r3, [r2, #0]
    6a18:	b2db      	uxtb	r3, r3
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
    6a1a:	1c51      	adds	r1, r2, #1
    6a1c:	62a9      	str	r1, [r5, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    6a1e:	7969      	ldrb	r1, [r5, #5]
    6a20:	2901      	cmp	r1, #1
    6a22:	d00e      	beq.n	6a42 <_usart_interrupt_handler+0x5a>
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    6a24:	b29b      	uxth	r3, r3
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    6a26:	05db      	lsls	r3, r3, #23
    6a28:	0ddb      	lsrs	r3, r3, #23
    6a2a:	8523      	strh	r3, [r4, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
    6a2c:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    6a2e:	3b01      	subs	r3, #1
    6a30:	b29b      	uxth	r3, r3
    6a32:	85eb      	strh	r3, [r5, #46]	; 0x2e
    6a34:	2b00      	cmp	r3, #0
    6a36:	d10c      	bne.n	6a52 <_usart_interrupt_handler+0x6a>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    6a38:	3301      	adds	r3, #1
    6a3a:	7523      	strb	r3, [r4, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    6a3c:	3301      	adds	r3, #1
    6a3e:	75a3      	strb	r3, [r4, #22]
    6a40:	e007      	b.n	6a52 <_usart_interrupt_handler+0x6a>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    6a42:	7851      	ldrb	r1, [r2, #1]
    6a44:	0209      	lsls	r1, r1, #8
    6a46:	430b      	orrs	r3, r1
				(module->tx_buffer_ptr)++;
    6a48:	3202      	adds	r2, #2
    6a4a:	62aa      	str	r2, [r5, #40]	; 0x28
    6a4c:	e7eb      	b.n	6a26 <_usart_interrupt_handler+0x3e>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    6a4e:	2301      	movs	r3, #1
    6a50:	7523      	strb	r3, [r4, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    6a52:	07b3      	lsls	r3, r6, #30
    6a54:	d506      	bpl.n	6a64 <_usart_interrupt_handler+0x7c>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    6a56:	2302      	movs	r3, #2
    6a58:	7523      	strb	r3, [r4, #20]
		module->tx_status = STATUS_OK;
    6a5a:	2200      	movs	r2, #0
    6a5c:	3331      	adds	r3, #49	; 0x31
    6a5e:	54ea      	strb	r2, [r5, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    6a60:	07fb      	lsls	r3, r7, #31
    6a62:	d41a      	bmi.n	6a9a <_usart_interrupt_handler+0xb2>
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    6a64:	0773      	lsls	r3, r6, #29
    6a66:	d565      	bpl.n	6b34 <_usart_interrupt_handler+0x14c>

		if (module->remaining_rx_buffer_length) {
    6a68:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    6a6a:	b29b      	uxth	r3, r3
    6a6c:	2b00      	cmp	r3, #0
    6a6e:	d05f      	beq.n	6b30 <_usart_interrupt_handler+0x148>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    6a70:	8b63      	ldrh	r3, [r4, #26]
    6a72:	b2db      	uxtb	r3, r3
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
    6a74:	071a      	lsls	r2, r3, #28
    6a76:	d414      	bmi.n	6aa2 <_usart_interrupt_handler+0xba>
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    6a78:	223f      	movs	r2, #63	; 0x3f
    6a7a:	4013      	ands	r3, r2
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
    6a7c:	2b00      	cmp	r3, #0
    6a7e:	d034      	beq.n	6aea <_usart_interrupt_handler+0x102>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    6a80:	079a      	lsls	r2, r3, #30
    6a82:	d511      	bpl.n	6aa8 <_usart_interrupt_handler+0xc0>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    6a84:	221a      	movs	r2, #26
    6a86:	2332      	movs	r3, #50	; 0x32
    6a88:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    6a8a:	3b30      	subs	r3, #48	; 0x30
    6a8c:	8363      	strh	r3, [r4, #26]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
    6a8e:	077b      	lsls	r3, r7, #29
    6a90:	d550      	bpl.n	6b34 <_usart_interrupt_handler+0x14c>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    6a92:	0028      	movs	r0, r5
    6a94:	696b      	ldr	r3, [r5, #20]
    6a96:	4798      	blx	r3
    6a98:	e04c      	b.n	6b34 <_usart_interrupt_handler+0x14c>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    6a9a:	0028      	movs	r0, r5
    6a9c:	68eb      	ldr	r3, [r5, #12]
    6a9e:	4798      	blx	r3
    6aa0:	e7e0      	b.n	6a64 <_usart_interrupt_handler+0x7c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
    6aa2:	2237      	movs	r2, #55	; 0x37
    6aa4:	4013      	ands	r3, r2
    6aa6:	e7e9      	b.n	6a7c <_usart_interrupt_handler+0x94>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    6aa8:	075a      	lsls	r2, r3, #29
    6aaa:	d505      	bpl.n	6ab8 <_usart_interrupt_handler+0xd0>
					module->rx_status = STATUS_ERR_OVERFLOW;
    6aac:	221e      	movs	r2, #30
    6aae:	2332      	movs	r3, #50	; 0x32
    6ab0:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    6ab2:	3b2e      	subs	r3, #46	; 0x2e
    6ab4:	8363      	strh	r3, [r4, #26]
    6ab6:	e7ea      	b.n	6a8e <_usart_interrupt_handler+0xa6>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    6ab8:	07da      	lsls	r2, r3, #31
    6aba:	d505      	bpl.n	6ac8 <_usart_interrupt_handler+0xe0>
					module->rx_status = STATUS_ERR_BAD_DATA;
    6abc:	2213      	movs	r2, #19
    6abe:	2332      	movs	r3, #50	; 0x32
    6ac0:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    6ac2:	3b31      	subs	r3, #49	; 0x31
    6ac4:	8363      	strh	r3, [r4, #26]
    6ac6:	e7e2      	b.n	6a8e <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_ISF) {
    6ac8:	06da      	lsls	r2, r3, #27
    6aca:	d505      	bpl.n	6ad8 <_usart_interrupt_handler+0xf0>
					module->rx_status = STATUS_ERR_PROTOCOL;
    6acc:	2242      	movs	r2, #66	; 0x42
    6ace:	2332      	movs	r3, #50	; 0x32
    6ad0:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    6ad2:	3b22      	subs	r3, #34	; 0x22
    6ad4:	8363      	strh	r3, [r4, #26]
    6ad6:	e7da      	b.n	6a8e <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_COLL) {
    6ad8:	2220      	movs	r2, #32
    6ada:	421a      	tst	r2, r3
    6adc:	d0d7      	beq.n	6a8e <_usart_interrupt_handler+0xa6>
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
    6ade:	3221      	adds	r2, #33	; 0x21
    6ae0:	2332      	movs	r3, #50	; 0x32
    6ae2:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    6ae4:	3b12      	subs	r3, #18
    6ae6:	8363      	strh	r3, [r4, #26]
    6ae8:	e7d1      	b.n	6a8e <_usart_interrupt_handler+0xa6>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    6aea:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    6aec:	05db      	lsls	r3, r3, #23
    6aee:	0ddb      	lsrs	r3, r3, #23

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
    6af0:	b2da      	uxtb	r2, r3
    6af2:	6a69      	ldr	r1, [r5, #36]	; 0x24
    6af4:	700a      	strb	r2, [r1, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
    6af6:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    6af8:	1c51      	adds	r1, r2, #1
    6afa:	6269      	str	r1, [r5, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    6afc:	7969      	ldrb	r1, [r5, #5]
    6afe:	2901      	cmp	r1, #1
    6b00:	d010      	beq.n	6b24 <_usart_interrupt_handler+0x13c>
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
    6b02:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    6b04:	3b01      	subs	r3, #1
    6b06:	b29b      	uxth	r3, r3
    6b08:	85ab      	strh	r3, [r5, #44]	; 0x2c
    6b0a:	2b00      	cmp	r3, #0
    6b0c:	d112      	bne.n	6b34 <_usart_interrupt_handler+0x14c>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    6b0e:	3304      	adds	r3, #4
    6b10:	7523      	strb	r3, [r4, #20]
					module->rx_status = STATUS_OK;
    6b12:	2200      	movs	r2, #0
    6b14:	332e      	adds	r3, #46	; 0x2e
    6b16:	54ea      	strb	r2, [r5, r3]

					/* Run callback if registered and enabled */
					if (callback_status
    6b18:	07bb      	lsls	r3, r7, #30
    6b1a:	d50b      	bpl.n	6b34 <_usart_interrupt_handler+0x14c>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    6b1c:	0028      	movs	r0, r5
    6b1e:	692b      	ldr	r3, [r5, #16]
    6b20:	4798      	blx	r3
    6b22:	e007      	b.n	6b34 <_usart_interrupt_handler+0x14c>
					*(module->rx_buffer_ptr) = (received_data >> 8);
    6b24:	0a1b      	lsrs	r3, r3, #8
    6b26:	7053      	strb	r3, [r2, #1]
					module->rx_buffer_ptr += 1;
    6b28:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    6b2a:	3301      	adds	r3, #1
    6b2c:	626b      	str	r3, [r5, #36]	; 0x24
    6b2e:	e7e8      	b.n	6b02 <_usart_interrupt_handler+0x11a>
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    6b30:	2304      	movs	r3, #4
    6b32:	7523      	strb	r3, [r4, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    6b34:	06f3      	lsls	r3, r6, #27
    6b36:	d504      	bpl.n	6b42 <_usart_interrupt_handler+0x15a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    6b38:	2310      	movs	r3, #16
    6b3a:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    6b3c:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    6b3e:	06fb      	lsls	r3, r7, #27
    6b40:	d40e      	bmi.n	6b60 <_usart_interrupt_handler+0x178>
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    6b42:	06b3      	lsls	r3, r6, #26
    6b44:	d504      	bpl.n	6b50 <_usart_interrupt_handler+0x168>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    6b46:	2320      	movs	r3, #32
    6b48:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    6b4a:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    6b4c:	073b      	lsls	r3, r7, #28
    6b4e:	d40b      	bmi.n	6b68 <_usart_interrupt_handler+0x180>
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    6b50:	0733      	lsls	r3, r6, #28
    6b52:	d504      	bpl.n	6b5e <_usart_interrupt_handler+0x176>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    6b54:	2308      	movs	r3, #8
    6b56:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    6b58:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    6b5a:	06bb      	lsls	r3, r7, #26
    6b5c:	d408      	bmi.n	6b70 <_usart_interrupt_handler+0x188>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
		}
	}
#endif
}
    6b5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    6b60:	0028      	movs	r0, r5
    6b62:	69eb      	ldr	r3, [r5, #28]
    6b64:	4798      	blx	r3
    6b66:	e7ec      	b.n	6b42 <_usart_interrupt_handler+0x15a>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    6b68:	0028      	movs	r0, r5
    6b6a:	69ab      	ldr	r3, [r5, #24]
    6b6c:	4798      	blx	r3
    6b6e:	e7ef      	b.n	6b50 <_usart_interrupt_handler+0x168>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    6b70:	6a2b      	ldr	r3, [r5, #32]
    6b72:	0028      	movs	r0, r5
    6b74:	4798      	blx	r3
}
    6b76:	e7f2      	b.n	6b5e <_usart_interrupt_handler+0x176>
    6b78:	20002238 	.word	0x20002238

00006b7c <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    6b7c:	b510      	push	{r4, lr}
	switch (clock_source) {
    6b7e:	2808      	cmp	r0, #8
    6b80:	d803      	bhi.n	6b8a <system_clock_source_get_hz+0xe>
    6b82:	0080      	lsls	r0, r0, #2
    6b84:	4b1c      	ldr	r3, [pc, #112]	; (6bf8 <system_clock_source_get_hz+0x7c>)
    6b86:	581b      	ldr	r3, [r3, r0]
    6b88:	469f      	mov	pc, r3
		}

		return _system_clock_inst.dpll.frequency;

	default:
		return 0;
    6b8a:	2000      	movs	r0, #0
    6b8c:	e032      	b.n	6bf4 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.xosc.frequency;
    6b8e:	4b1b      	ldr	r3, [pc, #108]	; (6bfc <system_clock_source_get_hz+0x80>)
    6b90:	6918      	ldr	r0, [r3, #16]
    6b92:	e02f      	b.n	6bf4 <system_clock_source_get_hz+0x78>
		return (OSCCTRL->OSC16MCTRL.bit.FSEL+1)*4000000UL;
    6b94:	4b1a      	ldr	r3, [pc, #104]	; (6c00 <system_clock_source_get_hz+0x84>)
    6b96:	7d18      	ldrb	r0, [r3, #20]
    6b98:	0700      	lsls	r0, r0, #28
    6b9a:	0f80      	lsrs	r0, r0, #30
    6b9c:	1c43      	adds	r3, r0, #1
    6b9e:	4819      	ldr	r0, [pc, #100]	; (6c04 <system_clock_source_get_hz+0x88>)
    6ba0:	4358      	muls	r0, r3
    6ba2:	e027      	b.n	6bf4 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.xosc32k.frequency;
    6ba4:	4b15      	ldr	r3, [pc, #84]	; (6bfc <system_clock_source_get_hz+0x80>)
    6ba6:	6958      	ldr	r0, [r3, #20]
    6ba8:	e024      	b.n	6bf4 <system_clock_source_get_hz+0x78>
		if (!(_system_clock_inst.dfll.control & OSCCTRL_DFLLCTRL_ENABLE))
    6baa:	4b14      	ldr	r3, [pc, #80]	; (6bfc <system_clock_source_get_hz+0x80>)
    6bac:	681b      	ldr	r3, [r3, #0]
			return 0;
    6bae:	2000      	movs	r0, #0
		if (!(_system_clock_inst.dfll.control & OSCCTRL_DFLLCTRL_ENABLE))
    6bb0:	079b      	lsls	r3, r3, #30
    6bb2:	d51f      	bpl.n	6bf4 <system_clock_source_get_hz+0x78>
	while (!(OSCCTRL->STATUS.reg & OSCCTRL_STATUS_DFLLRDY)) {
    6bb4:	4912      	ldr	r1, [pc, #72]	; (6c00 <system_clock_source_get_hz+0x84>)
    6bb6:	2280      	movs	r2, #128	; 0x80
    6bb8:	0052      	lsls	r2, r2, #1
    6bba:	68cb      	ldr	r3, [r1, #12]
    6bbc:	4213      	tst	r3, r2
    6bbe:	d0fc      	beq.n	6bba <system_clock_source_get_hz+0x3e>
		if (_system_clock_inst.dfll.control & OSCCTRL_DFLLCTRL_MODE) {
    6bc0:	4b0e      	ldr	r3, [pc, #56]	; (6bfc <system_clock_source_get_hz+0x80>)
    6bc2:	681b      	ldr	r3, [r3, #0]
    6bc4:	075b      	lsls	r3, r3, #29
    6bc6:	d401      	bmi.n	6bcc <system_clock_source_get_hz+0x50>
		return 48000000UL;
    6bc8:	480f      	ldr	r0, [pc, #60]	; (6c08 <system_clock_source_get_hz+0x8c>)
    6bca:	e013      	b.n	6bf4 <system_clock_source_get_hz+0x78>
			return system_gclk_chan_get_hz(OSCCTRL_GCLK_ID_DFLL48) *
    6bcc:	2000      	movs	r0, #0
    6bce:	4b0f      	ldr	r3, [pc, #60]	; (6c0c <system_clock_source_get_hz+0x90>)
    6bd0:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    6bd2:	4b0a      	ldr	r3, [pc, #40]	; (6bfc <system_clock_source_get_hz+0x80>)
    6bd4:	689b      	ldr	r3, [r3, #8]
    6bd6:	041b      	lsls	r3, r3, #16
    6bd8:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(OSCCTRL_GCLK_ID_DFLL48) *
    6bda:	4358      	muls	r0, r3
    6bdc:	e00a      	b.n	6bf4 <system_clock_source_get_hz+0x78>
		if (!(OSCCTRL->DPLLCTRLA.reg & OSCCTRL_DPLLCTRLA_ENABLE)) {
    6bde:	2328      	movs	r3, #40	; 0x28
    6be0:	4a07      	ldr	r2, [pc, #28]	; (6c00 <system_clock_source_get_hz+0x84>)
    6be2:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
    6be4:	2000      	movs	r0, #0
		if (!(OSCCTRL->DPLLCTRLA.reg & OSCCTRL_DPLLCTRLA_ENABLE)) {
    6be6:	079b      	lsls	r3, r3, #30
    6be8:	d504      	bpl.n	6bf4 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.dpll.frequency;
    6bea:	4b04      	ldr	r3, [pc, #16]	; (6bfc <system_clock_source_get_hz+0x80>)
    6bec:	68d8      	ldr	r0, [r3, #12]
    6bee:	e001      	b.n	6bf4 <system_clock_source_get_hz+0x78>
		return 32768UL;
    6bf0:	2080      	movs	r0, #128	; 0x80
    6bf2:	0200      	lsls	r0, r0, #8
	}
}
    6bf4:	bd10      	pop	{r4, pc}
    6bf6:	46c0      	nop			; (mov r8, r8)
    6bf8:	0001fbc4 	.word	0x0001fbc4
    6bfc:	20000b84 	.word	0x20000b84
    6c00:	40000c00 	.word	0x40000c00
    6c04:	003d0900 	.word	0x003d0900
    6c08:	02dc6c00 	.word	0x02dc6c00
    6c0c:	000072e9 	.word	0x000072e9

00006c10 <system_clock_source_osc16m_set_config>:
 *
 * \param[in] config  OSC16M configuration structure containing the new config
 */
void system_clock_source_osc16m_set_config(
		struct system_clock_source_osc16m_config *const config)
{
    6c10:	b570      	push	{r4, r5, r6, lr}
	OSCCTRL_OSC16MCTRL_Type temp = OSCCTRL->OSC16MCTRL;
    6c12:	4c0b      	ldr	r4, [pc, #44]	; (6c40 <system_clock_source_osc16m_set_config+0x30>)
    6c14:	7d23      	ldrb	r3, [r4, #20]

	/* Use temporary struct to reduce register access */
	temp.bit.FSEL    = config->fsel;
	temp.bit.ONDEMAND = config->on_demand;
    6c16:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;
    6c18:	7846      	ldrb	r6, [r0, #1]

	OSCCTRL->OSC16MCTRL = temp;
    6c1a:	7802      	ldrb	r2, [r0, #0]
    6c1c:	2103      	movs	r1, #3
    6c1e:	4011      	ands	r1, r2
    6c20:	0089      	lsls	r1, r1, #2
    6c22:	220c      	movs	r2, #12
    6c24:	4393      	bics	r3, r2
    6c26:	430b      	orrs	r3, r1
    6c28:	3a0b      	subs	r2, #11
    6c2a:	4032      	ands	r2, r6
    6c2c:	0192      	lsls	r2, r2, #6
    6c2e:	2140      	movs	r1, #64	; 0x40
    6c30:	438b      	bics	r3, r1
    6c32:	4313      	orrs	r3, r2
    6c34:	01ed      	lsls	r5, r5, #7
    6c36:	227f      	movs	r2, #127	; 0x7f
    6c38:	4013      	ands	r3, r2
    6c3a:	432b      	orrs	r3, r5
    6c3c:	7523      	strb	r3, [r4, #20]
}
    6c3e:	bd70      	pop	{r4, r5, r6, pc}
    6c40:	40000c00 	.word	0x40000c00

00006c44 <system_clock_source_xosc32k_set_config>:
 *
 * \param[in] config  XOSC32K configuration structure containing the new config
 */
void system_clock_source_xosc32k_set_config(
		struct system_clock_source_xosc32k_config *const config)
{
    6c44:	b5f0      	push	{r4, r5, r6, r7, lr}
    6c46:	46d6      	mov	lr, sl
    6c48:	464f      	mov	r7, r9
    6c4a:	4646      	mov	r6, r8
    6c4c:	b5c0      	push	{r6, r7, lr}
	OSC32KCTRL_XOSC32K_Type temp = OSC32KCTRL->XOSC32K;
    6c4e:	4b20      	ldr	r3, [pc, #128]	; (6cd0 <system_clock_source_xosc32k_set_config+0x8c>)
    6c50:	469a      	mov	sl, r3
    6c52:	695b      	ldr	r3, [r3, #20]

	temp.bit.STARTUP = config->startup_time;
    6c54:	7845      	ldrb	r5, [r0, #1]

	if (config->external_clock == SYSTEM_CLOCK_EXTERNAL_CRYSTAL) {
    6c56:	7801      	ldrb	r1, [r0, #0]
    6c58:	424c      	negs	r4, r1
    6c5a:	414c      	adcs	r4, r1
    6c5c:	46a1      	mov	r9, r4
		temp.bit.XTALEN = 1;
	} else {
		temp.bit.XTALEN = 0;
	}

	temp.bit.EN1K = config->enable_1khz_output;
    6c5e:	7881      	ldrb	r1, [r0, #2]
    6c60:	468c      	mov	ip, r1
	temp.bit.EN32K = config->enable_32khz_output;
    6c62:	78c1      	ldrb	r1, [r0, #3]
    6c64:	4688      	mov	r8, r1

	temp.bit.ONDEMAND = config->on_demand;
    6c66:	7a46      	ldrb	r6, [r0, #9]
	temp.bit.RUNSTDBY = config->run_in_standby;
    6c68:	7a07      	ldrb	r7, [r0, #8]
	temp.bit.WRTLOCK  = config->write_once;
    6c6a:	7a84      	ldrb	r4, [r0, #10]

	/* Cache the new frequency in case the user needs to check the current
	 * operating frequency later */
	_system_clock_inst.xosc32k.frequency = config->frequency;
    6c6c:	6840      	ldr	r0, [r0, #4]
    6c6e:	4919      	ldr	r1, [pc, #100]	; (6cd4 <system_clock_source_xosc32k_set_config+0x90>)
    6c70:	6148      	str	r0, [r1, #20]

	OSC32KCTRL->XOSC32K = temp;
    6c72:	2101      	movs	r1, #1
    6c74:	4648      	mov	r0, r9
    6c76:	0080      	lsls	r0, r0, #2
    6c78:	2204      	movs	r2, #4
    6c7a:	4393      	bics	r3, r2
    6c7c:	4303      	orrs	r3, r0
    6c7e:	4640      	mov	r0, r8
    6c80:	4008      	ands	r0, r1
    6c82:	00c0      	lsls	r0, r0, #3
    6c84:	3204      	adds	r2, #4
    6c86:	4393      	bics	r3, r2
    6c88:	4303      	orrs	r3, r0
    6c8a:	4660      	mov	r0, ip
    6c8c:	4008      	ands	r0, r1
    6c8e:	0100      	lsls	r0, r0, #4
    6c90:	3208      	adds	r2, #8
    6c92:	4393      	bics	r3, r2
    6c94:	4303      	orrs	r3, r0
    6c96:	400f      	ands	r7, r1
    6c98:	01bf      	lsls	r7, r7, #6
    6c9a:	2040      	movs	r0, #64	; 0x40
    6c9c:	4383      	bics	r3, r0
    6c9e:	433b      	orrs	r3, r7
    6ca0:	400e      	ands	r6, r1
    6ca2:	01f6      	lsls	r6, r6, #7
    6ca4:	3040      	adds	r0, #64	; 0x40
    6ca6:	4383      	bics	r3, r0
    6ca8:	4333      	orrs	r3, r6
    6caa:	3879      	subs	r0, #121	; 0x79
    6cac:	4005      	ands	r5, r0
    6cae:	022d      	lsls	r5, r5, #8
    6cb0:	4809      	ldr	r0, [pc, #36]	; (6cd8 <system_clock_source_xosc32k_set_config+0x94>)
    6cb2:	4003      	ands	r3, r0
    6cb4:	432b      	orrs	r3, r5
    6cb6:	4021      	ands	r1, r4
    6cb8:	0309      	lsls	r1, r1, #12
    6cba:	4808      	ldr	r0, [pc, #32]	; (6cdc <system_clock_source_xosc32k_set_config+0x98>)
    6cbc:	4003      	ands	r3, r0
    6cbe:	430b      	orrs	r3, r1
    6cc0:	4652      	mov	r2, sl
    6cc2:	6153      	str	r3, [r2, #20]
}
    6cc4:	bc1c      	pop	{r2, r3, r4}
    6cc6:	4690      	mov	r8, r2
    6cc8:	4699      	mov	r9, r3
    6cca:	46a2      	mov	sl, r4
    6ccc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6cce:	46c0      	nop			; (mov r8, r8)
    6cd0:	40001000 	.word	0x40001000
    6cd4:	20000b84 	.word	0x20000b84
    6cd8:	fffff8ff 	.word	0xfffff8ff
    6cdc:	ffffefff 	.word	0xffffefff

00006ce0 <system_clock_source_dfll_set_config>:
 *
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
    6ce0:	b510      	push	{r4, lr}
	_system_clock_inst.dfll.val =
			OSCCTRL_DFLLVAL_COARSE(config->coarse_value) |
    6ce2:	7a83      	ldrb	r3, [r0, #10]
    6ce4:	069b      	lsls	r3, r3, #26
    6ce6:	0c1b      	lsrs	r3, r3, #16
			OSCCTRL_DFLLVAL_FINE(config->fine_value);
    6ce8:	8982      	ldrh	r2, [r0, #12]
    6cea:	0592      	lsls	r2, r2, #22
    6cec:	0d92      	lsrs	r2, r2, #22
			OSCCTRL_DFLLVAL_COARSE(config->coarse_value) |
    6cee:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.val =
    6cf0:	491a      	ldr	r1, [pc, #104]	; (6d5c <system_clock_source_dfll_set_config+0x7c>)
    6cf2:	604b      	str	r3, [r1, #4]

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
    6cf4:	7a03      	ldrb	r3, [r0, #8]
    6cf6:	7a42      	ldrb	r2, [r0, #9]
    6cf8:	4313      	orrs	r3, r2
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
    6cfa:	8882      	ldrh	r2, [r0, #4]
    6cfc:	88c4      	ldrh	r4, [r0, #6]
    6cfe:	4322      	orrs	r2, r4
    6d00:	4313      	orrs	r3, r2
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << OSCCTRL_DFLLCTRL_ONDEMAND_Pos) |
    6d02:	7842      	ldrb	r2, [r0, #1]
    6d04:	01d2      	lsls	r2, r2, #7
			(uint32_t)config->chill_cycle     |
    6d06:	4313      	orrs	r3, r2
			((uint32_t)config->run_in_stanby << OSCCTRL_DFLLCTRL_RUNSTDBY_Pos);
    6d08:	7882      	ldrb	r2, [r0, #2]
    6d0a:	0192      	lsls	r2, r2, #6
			((uint32_t)config->on_demand << OSCCTRL_DFLLCTRL_ONDEMAND_Pos) |
    6d0c:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.control =
    6d0e:	600b      	str	r3, [r1, #0]

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
    6d10:	7803      	ldrb	r3, [r0, #0]
    6d12:	2b04      	cmp	r3, #4
    6d14:	d011      	beq.n	6d3a <system_clock_source_dfll_set_config+0x5a>
				OSCCTRL_DFLLMUL_MUL(config->multiply_factor);

		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
    6d16:	2b20      	cmp	r3, #32
    6d18:	d10e      	bne.n	6d38 <system_clock_source_dfll_set_config+0x58>

		_system_clock_inst.dfll.mul =
				OSCCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    6d1a:	7b83      	ldrb	r3, [r0, #14]
    6d1c:	069b      	lsls	r3, r3, #26
				OSCCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				OSCCTRL_DFLLMUL_MUL(config->multiply_factor);
    6d1e:	8a42      	ldrh	r2, [r0, #18]
				OSCCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    6d20:	4313      	orrs	r3, r2
    6d22:	8a02      	ldrh	r2, [r0, #16]
    6d24:	0412      	lsls	r2, r2, #16
    6d26:	490e      	ldr	r1, [pc, #56]	; (6d60 <system_clock_source_dfll_set_config+0x80>)
    6d28:	400a      	ands	r2, r1
    6d2a:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    6d2c:	4a0b      	ldr	r2, [pc, #44]	; (6d5c <system_clock_source_dfll_set_config+0x7c>)
    6d2e:	6093      	str	r3, [r2, #8]

		/* Enable the USB recovery mode */
		_system_clock_inst.dfll.control |= config->loop_mode |
    6d30:	6811      	ldr	r1, [r2, #0]
    6d32:	4b0c      	ldr	r3, [pc, #48]	; (6d64 <system_clock_source_dfll_set_config+0x84>)
    6d34:	430b      	orrs	r3, r1
    6d36:	6013      	str	r3, [r2, #0]
				OSCCTRL_DFLLCTRL_MODE | OSCCTRL_DFLLCTRL_BPLCKC;
	}
}
    6d38:	bd10      	pop	{r4, pc}
				OSCCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    6d3a:	7b83      	ldrb	r3, [r0, #14]
    6d3c:	069b      	lsls	r3, r3, #26
				OSCCTRL_DFLLMUL_MUL(config->multiply_factor);
    6d3e:	8a42      	ldrh	r2, [r0, #18]
				OSCCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    6d40:	4313      	orrs	r3, r2
    6d42:	8a02      	ldrh	r2, [r0, #16]
    6d44:	0412      	lsls	r2, r2, #16
    6d46:	4906      	ldr	r1, [pc, #24]	; (6d60 <system_clock_source_dfll_set_config+0x80>)
    6d48:	400a      	ands	r2, r1
    6d4a:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    6d4c:	4a03      	ldr	r2, [pc, #12]	; (6d5c <system_clock_source_dfll_set_config+0x7c>)
    6d4e:	6093      	str	r3, [r2, #8]
		_system_clock_inst.dfll.control |= config->loop_mode;
    6d50:	6813      	ldr	r3, [r2, #0]
    6d52:	2104      	movs	r1, #4
    6d54:	430b      	orrs	r3, r1
    6d56:	6013      	str	r3, [r2, #0]
    6d58:	e7ee      	b.n	6d38 <system_clock_source_dfll_set_config+0x58>
    6d5a:	46c0      	nop			; (mov r8, r8)
    6d5c:	20000b84 	.word	0x20000b84
    6d60:	03ff0000 	.word	0x03ff0000
    6d64:	00000424 	.word	0x00000424

00006d68 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    6d68:	2808      	cmp	r0, #8
    6d6a:	d803      	bhi.n	6d74 <system_clock_source_enable+0xc>
    6d6c:	0080      	lsls	r0, r0, #2
    6d6e:	4b29      	ldr	r3, [pc, #164]	; (6e14 <system_clock_source_enable+0xac>)
    6d70:	581b      	ldr	r3, [r3, r0]
    6d72:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    6d74:	2017      	movs	r0, #23
    6d76:	e04b      	b.n	6e10 <system_clock_source_enable+0xa8>
		OSCCTRL->OSC16MCTRL.reg |= OSCCTRL_OSC16MCTRL_ENABLE;
    6d78:	4a27      	ldr	r2, [pc, #156]	; (6e18 <system_clock_source_enable+0xb0>)
    6d7a:	7d13      	ldrb	r3, [r2, #20]
    6d7c:	2102      	movs	r1, #2
    6d7e:	430b      	orrs	r3, r1
    6d80:	7513      	strb	r3, [r2, #20]
		return STATUS_OK;
    6d82:	2000      	movs	r0, #0
    6d84:	e044      	b.n	6e10 <system_clock_source_enable+0xa8>
		OSC32KCTRL->OSC32K.reg |= OSC32KCTRL_OSC32K_ENABLE;
    6d86:	4a25      	ldr	r2, [pc, #148]	; (6e1c <system_clock_source_enable+0xb4>)
    6d88:	6993      	ldr	r3, [r2, #24]
    6d8a:	2102      	movs	r1, #2
    6d8c:	430b      	orrs	r3, r1
    6d8e:	6193      	str	r3, [r2, #24]
	}

	return STATUS_OK;
    6d90:	2000      	movs	r0, #0
		break;
    6d92:	e03d      	b.n	6e10 <system_clock_source_enable+0xa8>
		OSCCTRL->XOSCCTRL.reg |= OSCCTRL_XOSCCTRL_ENABLE;
    6d94:	4a20      	ldr	r2, [pc, #128]	; (6e18 <system_clock_source_enable+0xb0>)
    6d96:	8a13      	ldrh	r3, [r2, #16]
    6d98:	2102      	movs	r1, #2
    6d9a:	430b      	orrs	r3, r1
    6d9c:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
    6d9e:	2000      	movs	r0, #0
		break;
    6da0:	e036      	b.n	6e10 <system_clock_source_enable+0xa8>
		OSC32KCTRL->XOSC32K.reg |= OSC32KCTRL_XOSC32K_ENABLE;
    6da2:	4a1e      	ldr	r2, [pc, #120]	; (6e1c <system_clock_source_enable+0xb4>)
    6da4:	6953      	ldr	r3, [r2, #20]
    6da6:	2102      	movs	r1, #2
    6da8:	430b      	orrs	r3, r1
    6daa:	6153      	str	r3, [r2, #20]
	return STATUS_OK;
    6dac:	2000      	movs	r0, #0
		break;
    6dae:	e02f      	b.n	6e10 <system_clock_source_enable+0xa8>
		_system_clock_inst.dfll.control |= OSCCTRL_DFLLCTRL_ENABLE;
    6db0:	491b      	ldr	r1, [pc, #108]	; (6e20 <system_clock_source_enable+0xb8>)
    6db2:	680b      	ldr	r3, [r1, #0]
    6db4:	2202      	movs	r2, #2
    6db6:	4313      	orrs	r3, r2
    6db8:	600b      	str	r3, [r1, #0]
	OSCCTRL->DFLLCTRL.reg = OSCCTRL_DFLLCTRL_ENABLE;
    6dba:	4b17      	ldr	r3, [pc, #92]	; (6e18 <system_clock_source_enable+0xb0>)
    6dbc:	831a      	strh	r2, [r3, #24]
	while (!(OSCCTRL->STATUS.reg & OSCCTRL_STATUS_DFLLRDY)) {
    6dbe:	0019      	movs	r1, r3
    6dc0:	32fe      	adds	r2, #254	; 0xfe
    6dc2:	68cb      	ldr	r3, [r1, #12]
    6dc4:	4213      	tst	r3, r2
    6dc6:	d0fc      	beq.n	6dc2 <system_clock_source_enable+0x5a>
	OSCCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    6dc8:	4a15      	ldr	r2, [pc, #84]	; (6e20 <system_clock_source_enable+0xb8>)
    6dca:	6891      	ldr	r1, [r2, #8]
    6dcc:	4b12      	ldr	r3, [pc, #72]	; (6e18 <system_clock_source_enable+0xb0>)
    6dce:	6219      	str	r1, [r3, #32]
	OSCCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    6dd0:	6852      	ldr	r2, [r2, #4]
    6dd2:	61da      	str	r2, [r3, #28]
	OSCCTRL->DFLLCTRL.reg = 0;
    6dd4:	2200      	movs	r2, #0
    6dd6:	831a      	strh	r2, [r3, #24]
	while (!(OSCCTRL->STATUS.reg & OSCCTRL_STATUS_DFLLRDY)) {
    6dd8:	0019      	movs	r1, r3
    6dda:	3201      	adds	r2, #1
    6ddc:	32ff      	adds	r2, #255	; 0xff
    6dde:	68cb      	ldr	r3, [r1, #12]
    6de0:	4213      	tst	r3, r2
    6de2:	d0fc      	beq.n	6dde <system_clock_source_enable+0x76>
	OSCCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    6de4:	4b0e      	ldr	r3, [pc, #56]	; (6e20 <system_clock_source_enable+0xb8>)
    6de6:	681b      	ldr	r3, [r3, #0]
    6de8:	b29b      	uxth	r3, r3
    6dea:	4a0b      	ldr	r2, [pc, #44]	; (6e18 <system_clock_source_enable+0xb0>)
    6dec:	8313      	strh	r3, [r2, #24]
	return STATUS_OK;
    6dee:	2000      	movs	r0, #0
    6df0:	e00e      	b.n	6e10 <system_clock_source_enable+0xa8>
		OSCCTRL->DPLLCTRLA.reg |= OSCCTRL_DPLLCTRLA_ENABLE;
    6df2:	4909      	ldr	r1, [pc, #36]	; (6e18 <system_clock_source_enable+0xb0>)
    6df4:	2228      	movs	r2, #40	; 0x28
    6df6:	5c8b      	ldrb	r3, [r1, r2]
    6df8:	2002      	movs	r0, #2
    6dfa:	4303      	orrs	r3, r0
    6dfc:	548b      	strb	r3, [r1, r2]
		while(OSCCTRL->DPLLSYNCBUSY.reg & OSCCTRL_DPLLSYNCBUSY_ENABLE){
    6dfe:	0008      	movs	r0, r1
    6e00:	2138      	movs	r1, #56	; 0x38
    6e02:	3a26      	subs	r2, #38	; 0x26
    6e04:	5c43      	ldrb	r3, [r0, r1]
    6e06:	4213      	tst	r3, r2
    6e08:	d1fc      	bne.n	6e04 <system_clock_source_enable+0x9c>
	return STATUS_OK;
    6e0a:	2000      	movs	r0, #0
    6e0c:	e000      	b.n	6e10 <system_clock_source_enable+0xa8>
		return STATUS_OK;
    6e0e:	2000      	movs	r0, #0
}
    6e10:	4770      	bx	lr
    6e12:	46c0      	nop			; (mov r8, r8)
    6e14:	0001fbe8 	.word	0x0001fbe8
    6e18:	40000c00 	.word	0x40000c00
    6e1c:	40001000 	.word	0x40001000
    6e20:	20000b84 	.word	0x20000b84

00006e24 <system_clock_source_disable>:
 *                                 given
 */
enum status_code system_clock_source_disable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    6e24:	2808      	cmp	r0, #8
    6e26:	d832      	bhi.n	6e8e <system_clock_source_disable+0x6a>
    6e28:	0080      	lsls	r0, r0, #2
    6e2a:	4b1a      	ldr	r3, [pc, #104]	; (6e94 <system_clock_source_disable+0x70>)
    6e2c:	581b      	ldr	r3, [r3, r0]
    6e2e:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC16M:
		OSCCTRL->OSC16MCTRL.reg &= ~OSCCTRL_OSC16MCTRL_ENABLE;
    6e30:	4a19      	ldr	r2, [pc, #100]	; (6e98 <system_clock_source_disable+0x74>)
    6e32:	7d13      	ldrb	r3, [r2, #20]
    6e34:	2102      	movs	r1, #2
    6e36:	438b      	bics	r3, r1
    6e38:	7513      	strb	r3, [r2, #20]
		Assert(false);
		return STATUS_ERR_INVALID_ARG;

	}

	return STATUS_OK;
    6e3a:	2000      	movs	r0, #0
}
    6e3c:	4770      	bx	lr
		OSC32KCTRL->OSC32K.reg &= ~OSC32KCTRL_OSC32K_ENABLE;
    6e3e:	4a17      	ldr	r2, [pc, #92]	; (6e9c <system_clock_source_disable+0x78>)
    6e40:	6993      	ldr	r3, [r2, #24]
    6e42:	2102      	movs	r1, #2
    6e44:	438b      	bics	r3, r1
    6e46:	6193      	str	r3, [r2, #24]
	return STATUS_OK;
    6e48:	2000      	movs	r0, #0
		break;
    6e4a:	e7f7      	b.n	6e3c <system_clock_source_disable+0x18>
		OSCCTRL->XOSCCTRL.reg &= ~OSCCTRL_XOSCCTRL_ENABLE;
    6e4c:	4a12      	ldr	r2, [pc, #72]	; (6e98 <system_clock_source_disable+0x74>)
    6e4e:	8a13      	ldrh	r3, [r2, #16]
    6e50:	2102      	movs	r1, #2
    6e52:	438b      	bics	r3, r1
    6e54:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
    6e56:	2000      	movs	r0, #0
		break;
    6e58:	e7f0      	b.n	6e3c <system_clock_source_disable+0x18>
		OSC32KCTRL->XOSC32K.reg &= ~OSC32KCTRL_XOSC32K_ENABLE;
    6e5a:	4a10      	ldr	r2, [pc, #64]	; (6e9c <system_clock_source_disable+0x78>)
    6e5c:	6953      	ldr	r3, [r2, #20]
    6e5e:	2102      	movs	r1, #2
    6e60:	438b      	bics	r3, r1
    6e62:	6153      	str	r3, [r2, #20]
	return STATUS_OK;
    6e64:	2000      	movs	r0, #0
		break;
    6e66:	e7e9      	b.n	6e3c <system_clock_source_disable+0x18>
		_system_clock_inst.dfll.control &= ~OSCCTRL_DFLLCTRL_ENABLE;
    6e68:	4b0d      	ldr	r3, [pc, #52]	; (6ea0 <system_clock_source_disable+0x7c>)
    6e6a:	681a      	ldr	r2, [r3, #0]
    6e6c:	2102      	movs	r1, #2
    6e6e:	438a      	bics	r2, r1
    6e70:	601a      	str	r2, [r3, #0]
		OSCCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    6e72:	681b      	ldr	r3, [r3, #0]
    6e74:	b29b      	uxth	r3, r3
    6e76:	4a08      	ldr	r2, [pc, #32]	; (6e98 <system_clock_source_disable+0x74>)
    6e78:	8313      	strh	r3, [r2, #24]
	return STATUS_OK;
    6e7a:	2000      	movs	r0, #0
		break;
    6e7c:	e7de      	b.n	6e3c <system_clock_source_disable+0x18>
		OSCCTRL->DPLLCTRLA.reg &= ~OSCCTRL_DPLLCTRLA_ENABLE;
    6e7e:	4906      	ldr	r1, [pc, #24]	; (6e98 <system_clock_source_disable+0x74>)
    6e80:	2228      	movs	r2, #40	; 0x28
    6e82:	5c8b      	ldrb	r3, [r1, r2]
    6e84:	2002      	movs	r0, #2
    6e86:	4383      	bics	r3, r0
    6e88:	548b      	strb	r3, [r1, r2]
	return STATUS_OK;
    6e8a:	2000      	movs	r0, #0
		break;
    6e8c:	e7d6      	b.n	6e3c <system_clock_source_disable+0x18>
		return STATUS_ERR_INVALID_ARG;
    6e8e:	2017      	movs	r0, #23
    6e90:	e7d4      	b.n	6e3c <system_clock_source_disable+0x18>
    6e92:	46c0      	nop			; (mov r8, r8)
    6e94:	0001fc0c 	.word	0x0001fc0c
    6e98:	40000c00 	.word	0x40000c00
    6e9c:	40001000 	.word	0x40001000
    6ea0:	20000b84 	.word	0x20000b84

00006ea4 <system_clock_init>:
 * \note OSC16M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC16M default enable can be disabled after system_clock_init. Make sure the
 * clock switches successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    6ea4:	b5f0      	push	{r4, r5, r6, r7, lr}
    6ea6:	46ce      	mov	lr, r9
    6ea8:	4647      	mov	r7, r8
    6eaa:	b580      	push	{r7, lr}
    6eac:	b08d      	sub	sp, #52	; 0x34
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	OSCCTRL->INTFLAG.reg = OSCCTRL_INTFLAG_DFLLRDY;
    6eae:	2280      	movs	r2, #128	; 0x80
    6eb0:	0052      	lsls	r2, r2, #1
    6eb2:	4b76      	ldr	r3, [pc, #472]	; (708c <system_clock_init+0x1e8>)
    6eb4:	609a      	str	r2, [r3, #8]
	SUPC->INTFLAG.reg = SUPC_INTFLAG_BOD33RDY | SUPC_INTFLAG_BOD33DET;
    6eb6:	3afd      	subs	r2, #253	; 0xfd
    6eb8:	4b75      	ldr	r3, [pc, #468]	; (7090 <system_clock_init+0x1ec>)
    6eba:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    6ebc:	4a75      	ldr	r2, [pc, #468]	; (7094 <system_clock_init+0x1f0>)
    6ebe:	6853      	ldr	r3, [r2, #4]
    6ec0:	211e      	movs	r1, #30
    6ec2:	438b      	bics	r3, r1
    6ec4:	391a      	subs	r1, #26
    6ec6:	430b      	orrs	r3, r1
    6ec8:	6053      	str	r3, [r2, #4]
 */
static inline enum status_code system_switch_performance_level(
					const enum system_performance_level performance_level)
{

	if (performance_level == (enum system_performance_level)PM->PLCFG.reg) {
    6eca:	2380      	movs	r3, #128	; 0x80
    6ecc:	05db      	lsls	r3, r3, #23
    6ece:	789b      	ldrb	r3, [r3, #2]
    6ed0:	2b02      	cmp	r3, #2
    6ed2:	d00f      	beq.n	6ef4 <system_clock_init+0x50>
		return STATUS_OK;
	}

#if SAML22 || SAML21XXXB || SAMR34J || SAMR35J || (WLR089U0)
	if (PM->PLCFG.reg & PM_PLCFG_PLDIS) {
    6ed4:	2380      	movs	r3, #128	; 0x80
    6ed6:	05db      	lsls	r3, r3, #23
    6ed8:	789b      	ldrb	r3, [r3, #2]
    6eda:	b25b      	sxtb	r3, r3
    6edc:	2b00      	cmp	r3, #0
    6ede:	db09      	blt.n	6ef4 <system_clock_init+0x50>
		return STATUS_ERR_INVALID_ARG;
	}
#endif

	/* Clear performance level status */
	PM->INTFLAG.reg = PM_INTFLAG_PLRDY;
    6ee0:	2380      	movs	r3, #128	; 0x80
    6ee2:	05db      	lsls	r3, r3, #23
    6ee4:	2201      	movs	r2, #1
    6ee6:	719a      	strb	r2, [r3, #6]

	/* Switch performance level */
	PM->PLCFG.reg = performance_level;
    6ee8:	3201      	adds	r2, #1
    6eea:	709a      	strb	r2, [r3, #2]

	/* Waiting performance level ready */
	while (!PM->INTFLAG.reg) {
    6eec:	001a      	movs	r2, r3
    6eee:	7993      	ldrb	r3, [r2, #6]
    6ef0:	2b00      	cmp	r3, #0
    6ef2:	d0fc      	beq.n	6eee <system_clock_init+0x4a>
	config->external_clock      = SYSTEM_CLOCK_EXTERNAL_CRYSTAL;
    6ef4:	a809      	add	r0, sp, #36	; 0x24
    6ef6:	2300      	movs	r3, #0
    6ef8:	7003      	strb	r3, [r0, #0]
	config->frequency           = 32768UL;
    6efa:	2280      	movs	r2, #128	; 0x80
    6efc:	0212      	lsls	r2, r2, #8
    6efe:	6042      	str	r2, [r0, #4]
	config->enable_1khz_output  = false;
    6f00:	7083      	strb	r3, [r0, #2]
	config->enable_32khz_output = true;
    6f02:	2201      	movs	r2, #1
    6f04:	70c2      	strb	r2, [r0, #3]
	config->run_in_standby      = false;
    6f06:	7203      	strb	r3, [r0, #8]
	config->write_once          = false;
    6f08:	7283      	strb	r3, [r0, #10]
	struct system_clock_source_xosc32k_config xosc32k_conf;
	system_clock_source_xosc32k_get_config_defaults(&xosc32k_conf);

	xosc32k_conf.frequency           = 32768UL;
	xosc32k_conf.external_clock      = CONF_CLOCK_XOSC32K_EXTERNAL_CRYSTAL;
	xosc32k_conf.startup_time        = CONF_CLOCK_XOSC32K_STARTUP_TIME;
    6f0a:	3203      	adds	r2, #3
    6f0c:	7042      	strb	r2, [r0, #1]
	xosc32k_conf.enable_1khz_output  = CONF_CLOCK_XOSC32K_ENABLE_1KHZ_OUPUT;
	xosc32k_conf.enable_32khz_output = CONF_CLOCK_XOSC32K_ENABLE_32KHZ_OUTPUT;
	xosc32k_conf.on_demand           = false;
    6f0e:	7243      	strb	r3, [r0, #9]
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;

	system_clock_source_xosc32k_set_config(&xosc32k_conf);
    6f10:	4b61      	ldr	r3, [pc, #388]	; (7098 <system_clock_init+0x1f4>)
    6f12:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
    6f14:	2005      	movs	r0, #5
    6f16:	4b61      	ldr	r3, [pc, #388]	; (709c <system_clock_init+0x1f8>)
    6f18:	4798      	blx	r3
		return ((OSC32KCTRL->STATUS.reg & mask) == mask);
    6f1a:	4961      	ldr	r1, [pc, #388]	; (70a0 <system_clock_init+0x1fc>)
    6f1c:	2201      	movs	r2, #1
    6f1e:	68cb      	ldr	r3, [r1, #12]
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_XOSC32K));
    6f20:	421a      	tst	r2, r3
    6f22:	d0fc      	beq.n	6f1e <system_clock_init+0x7a>
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    6f24:	a901      	add	r1, sp, #4
    6f26:	2501      	movs	r5, #1
    6f28:	604d      	str	r5, [r1, #4]
	config->high_when_disabled = false;
    6f2a:	2400      	movs	r4, #0
    6f2c:	704c      	strb	r4, [r1, #1]
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
#endif
	config->run_in_standby     = false;
    6f2e:	720c      	strb	r4, [r1, #8]
	config->output_enable      = false;
    6f30:	724c      	strb	r4, [r1, #9]
	gclk_conf.source_clock = SYSTEM_CLOCK_SOURCE_ULP32K;
    6f32:	2303      	movs	r3, #3
    6f34:	700b      	strb	r3, [r1, #0]
	system_gclk_gen_set_config(GCLK_GENERATOR_0, &gclk_conf);
    6f36:	2000      	movs	r0, #0
    6f38:	4b5a      	ldr	r3, [pc, #360]	; (70a4 <system_clock_init+0x200>)
    6f3a:	4798      	blx	r3
	system_clock_source_disable(SYSTEM_CLOCK_SOURCE_OSC16M);
    6f3c:	2006      	movs	r0, #6
    6f3e:	4b5a      	ldr	r3, [pc, #360]	; (70a8 <system_clock_init+0x204>)
    6f40:	4798      	blx	r3
	config->run_in_standby  = false;
    6f42:	466b      	mov	r3, sp
    6f44:	705c      	strb	r4, [r3, #1]
	osc16m_conf.fsel      		= CONF_CLOCK_OSC16M_FREQ_SEL;
    6f46:	701d      	strb	r5, [r3, #0]
	osc16m_conf.on_demand       = 0;
    6f48:	709c      	strb	r4, [r3, #2]
	system_clock_source_osc16m_set_config(&osc16m_conf);
    6f4a:	4668      	mov	r0, sp
    6f4c:	4b57      	ldr	r3, [pc, #348]	; (70ac <system_clock_init+0x208>)
    6f4e:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC16M);
    6f50:	2006      	movs	r0, #6
    6f52:	4b52      	ldr	r3, [pc, #328]	; (709c <system_clock_init+0x1f8>)
    6f54:	4798      	blx	r3
		return ((OSCCTRL->STATUS.reg & mask) == mask);
    6f56:	494d      	ldr	r1, [pc, #308]	; (708c <system_clock_init+0x1e8>)
    6f58:	2210      	movs	r2, #16
    6f5a:	68cb      	ldr	r3, [r1, #12]
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_OSC16M));
    6f5c:	421a      	tst	r2, r3
    6f5e:	d0fc      	beq.n	6f5a <system_clock_init+0xb6>
	config->division_factor    = 1;
    6f60:	a901      	add	r1, sp, #4
    6f62:	2301      	movs	r3, #1
    6f64:	604b      	str	r3, [r1, #4]
	config->high_when_disabled = false;
    6f66:	2400      	movs	r4, #0
    6f68:	704c      	strb	r4, [r1, #1]
	config->source_clock       = GCLK_SOURCE_OSC16M;
    6f6a:	3305      	adds	r3, #5
    6f6c:	700b      	strb	r3, [r1, #0]
	config->run_in_standby     = false;
    6f6e:	720c      	strb	r4, [r1, #8]
	config->output_enable      = false;
    6f70:	724c      	strb	r4, [r1, #9]
	system_gclk_gen_set_config(GCLK_GENERATOR_0, &gclk_conf);
    6f72:	2000      	movs	r0, #0
    6f74:	4b4b      	ldr	r3, [pc, #300]	; (70a4 <system_clock_init+0x200>)
    6f76:	4798      	blx	r3
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    6f78:	ab04      	add	r3, sp, #16
    6f7a:	2200      	movs	r2, #0
    6f7c:	809c      	strh	r4, [r3, #4]
	config->chill_cycle     = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
    6f7e:	80dc      	strh	r4, [r3, #6]
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    6f80:	721a      	strb	r2, [r3, #8]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    6f82:	725a      	strb	r2, [r3, #9]
	config->run_in_stanby   = false;
    6f84:	709a      	strb	r2, [r3, #2]
	config->fine_value      = 0xff / 4; /* Midpoint */
    6f86:	213f      	movs	r1, #63	; 0x3f
    6f88:	8199      	strh	r1, [r3, #12]
	/* DFLL Config (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	struct system_clock_source_dfll_config dfll_conf;
	system_clock_source_dfll_get_config_defaults(&dfll_conf);

	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
    6f8a:	393b      	subs	r1, #59	; 0x3b
    6f8c:	7019      	strb	r1, [r3, #0]
	dfll_conf.on_demand      = false;
    6f8e:	705a      	strb	r2, [r3, #1]
	/* Using DFLL48M COARSE CAL value from NVM Software Calibration Area Mapping 
	   in DFLL.COARSE helps to output a frequency close to 48 MHz.*/
#define NVM_DFLL_COARSE_POS    26 /* DFLL48M Coarse calibration value bit position.*/
#define NVM_DFLL_COARSE_SIZE   6  /* DFLL48M Coarse calibration value bit size.*/

	uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP5)
    6f90:	4b47      	ldr	r3, [pc, #284]	; (70b0 <system_clock_init+0x20c>)
    6f92:	681b      	ldr	r3, [r3, #0]
    6f94:	0e9b      	lsrs	r3, r3, #26
			+ (NVM_DFLL_COARSE_POS / 32))
		>> (NVM_DFLL_COARSE_POS % 32))
		& ((1 << NVM_DFLL_COARSE_SIZE) - 1);
	/* In some revision chip, the Calibration value is not correct */
	if (coarse == 0x3f) {
    6f96:	2b3f      	cmp	r3, #63	; 0x3f
    6f98:	d100      	bne.n	6f9c <system_clock_init+0xf8>
    6f9a:	e074      	b.n	7086 <system_clock_init+0x1e2>
		coarse = 0x1f;
	}

	dfll_conf.coarse_value = coarse;
    6f9c:	a804      	add	r0, sp, #16
    6f9e:	7283      	strb	r3, [r0, #10]
#  else
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;
#  endif

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
    6fa0:	23b7      	movs	r3, #183	; 0xb7
    6fa2:	00db      	lsls	r3, r3, #3
    6fa4:	8243      	strh	r3, [r0, #18]
	}

	dfll_conf.coarse_max_step = CONF_CLOCK_DFLL_MAX_COARSE_STEP_SIZE;
    6fa6:	2307      	movs	r3, #7
    6fa8:	7383      	strb	r3, [r0, #14]
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;
    6faa:	3338      	adds	r3, #56	; 0x38
    6fac:	8203      	strh	r3, [r0, #16]
		dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;

		dfll_conf.multiply_factor = 48000;
	}

	system_clock_source_dfll_set_config(&dfll_conf);
    6fae:	4b41      	ldr	r3, [pc, #260]	; (70b4 <system_clock_init+0x210>)
    6fb0:	4798      	blx	r3
#endif

	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    6fb2:	4b41      	ldr	r3, [pc, #260]	; (70b8 <system_clock_init+0x214>)
    6fb4:	4798      	blx	r3
	config->division_factor    = 1;
    6fb6:	ac01      	add	r4, sp, #4
    6fb8:	2601      	movs	r6, #1
    6fba:	9602      	str	r6, [sp, #8]
	config->high_when_disabled = false;
    6fbc:	2500      	movs	r5, #0
    6fbe:	7065      	strb	r5, [r4, #1]
	config->output_enable      = false;
    6fc0:	7265      	strb	r5, [r4, #9]

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    6fc2:	2305      	movs	r3, #5
    6fc4:	4699      	mov	r9, r3
    6fc6:	7023      	strb	r3, [r4, #0]
    6fc8:	7226      	strb	r6, [r4, #8]
    6fca:	0021      	movs	r1, r4
    6fcc:	2001      	movs	r0, #1
    6fce:	4b35      	ldr	r3, [pc, #212]	; (70a4 <system_clock_init+0x200>)
    6fd0:	4698      	mov	r8, r3
    6fd2:	4798      	blx	r3
    6fd4:	2001      	movs	r0, #1
    6fd6:	4f39      	ldr	r7, [pc, #228]	; (70bc <system_clock_init+0x218>)
    6fd8:	47b8      	blx	r7
	config->high_when_disabled = false;
    6fda:	7065      	strb	r5, [r4, #1]
	config->source_clock       = GCLK_SOURCE_OSC16M;
    6fdc:	2306      	movs	r3, #6
    6fde:	7023      	strb	r3, [r4, #0]
	config->run_in_standby     = false;
    6fe0:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    6fe2:	7265      	strb	r5, [r4, #9]
    6fe4:	464b      	mov	r3, r9
    6fe6:	6063      	str	r3, [r4, #4]
    6fe8:	0021      	movs	r1, r4
    6fea:	2002      	movs	r0, #2
    6fec:	47c0      	blx	r8
    6fee:	2002      	movs	r0, #2
    6ff0:	47b8      	blx	r7
	/* Enable DFLL reference clock if in closed loop mode */
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		struct system_gclk_chan_config dfll_gclk_chan_conf;

		system_gclk_chan_get_config_defaults(&dfll_gclk_chan_conf);
		dfll_gclk_chan_conf.source_generator = CONF_CLOCK_DFLL_SOURCE_GCLK_GENERATOR;
    6ff2:	7026      	strb	r6, [r4, #0]
		system_gclk_chan_set_config(OSCCTRL_GCLK_ID_DFLL48, &dfll_gclk_chan_conf);
    6ff4:	0021      	movs	r1, r4
    6ff6:	2000      	movs	r0, #0
    6ff8:	4b31      	ldr	r3, [pc, #196]	; (70c0 <system_clock_init+0x21c>)
    6ffa:	4798      	blx	r3
		system_gclk_chan_enable(OSCCTRL_GCLK_ID_DFLL48);
    6ffc:	2000      	movs	r0, #0
    6ffe:	4b31      	ldr	r3, [pc, #196]	; (70c4 <system_clock_init+0x220>)
    7000:	4798      	blx	r3
#  endif
#endif

	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
    7002:	2007      	movs	r0, #7
    7004:	4b25      	ldr	r3, [pc, #148]	; (709c <system_clock_init+0x1f8>)
    7006:	4798      	blx	r3
		return ((OSCCTRL->STATUS.reg & mask) == mask);
    7008:	4920      	ldr	r1, [pc, #128]	; (708c <system_clock_init+0x1e8>)
    700a:	22d0      	movs	r2, #208	; 0xd0
    700c:	0112      	lsls	r2, r2, #4
    700e:	68cb      	ldr	r3, [r1, #12]
    7010:	4013      	ands	r3, r2
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
    7012:	4293      	cmp	r3, r2
    7014:	d1fb      	bne.n	700e <system_clock_init+0x16a>
	MCLK->BUPDIV.reg = MCLK_BUPDIV_BUPDIV(1 << divider);
    7016:	4c2c      	ldr	r4, [pc, #176]	; (70c8 <system_clock_init+0x224>)
    7018:	2301      	movs	r3, #1
    701a:	71a3      	strb	r3, [r4, #6]
	MCLK->LPDIV.reg = MCLK_LPDIV_LPDIV(1 << divider);
    701c:	7163      	strb	r3, [r4, #5]
	MCLK->CPUDIV.reg = MCLK_CPUDIV_CPUDIV(1 << divider);
    701e:	7123      	strb	r3, [r4, #4]
	config->high_when_disabled = false;
    7020:	a901      	add	r1, sp, #4
    7022:	2300      	movs	r3, #0
    7024:	704b      	strb	r3, [r1, #1]
	config->run_in_standby     = false;
    7026:	720b      	strb	r3, [r1, #8]
	config->output_enable      = false;
    7028:	724b      	strb	r3, [r1, #9]
	system_main_clock_set_failure_detect(CONF_CLOCK_CPU_CLOCK_FAILURE_DETECT);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    702a:	3307      	adds	r3, #7
    702c:	700b      	strb	r3, [r1, #0]
    702e:	3b01      	subs	r3, #1
    7030:	604b      	str	r3, [r1, #4]
    7032:	2000      	movs	r0, #0
    7034:	4b1b      	ldr	r3, [pc, #108]	; (70a4 <system_clock_init+0x200>)
    7036:	4798      	blx	r3
    7038:	2000      	movs	r0, #0
    703a:	4b20      	ldr	r3, [pc, #128]	; (70bc <system_clock_init+0x218>)
    703c:	4798      	blx	r3
	return (system_gclk_gen_get_hz(GCLK_GENERATOR_0) / MCLK->CPUDIV.reg);
    703e:	2000      	movs	r0, #0
    7040:	4b22      	ldr	r3, [pc, #136]	; (70cc <system_clock_init+0x228>)
    7042:	4798      	blx	r3
    7044:	7921      	ldrb	r1, [r4, #4]
    7046:	b2c9      	uxtb	r1, r1
    7048:	4b21      	ldr	r3, [pc, #132]	; (70d0 <system_clock_init+0x22c>)
    704a:	4798      	blx	r3
#endif

	/* If CPU frequency is less than 12MHz, scale down performance level to PL0 */
	uint32_t cpu_freq = system_cpu_clock_get_hz();
	if (cpu_freq <= 12000000) {
    704c:	4b21      	ldr	r3, [pc, #132]	; (70d4 <system_clock_init+0x230>)
    704e:	4298      	cmp	r0, r3
    7050:	d814      	bhi.n	707c <system_clock_init+0x1d8>
	if (performance_level == (enum system_performance_level)PM->PLCFG.reg) {
    7052:	2380      	movs	r3, #128	; 0x80
    7054:	05db      	lsls	r3, r3, #23
    7056:	789b      	ldrb	r3, [r3, #2]
    7058:	2b00      	cmp	r3, #0
    705a:	d00f      	beq.n	707c <system_clock_init+0x1d8>
	if (PM->PLCFG.reg & PM_PLCFG_PLDIS) {
    705c:	2380      	movs	r3, #128	; 0x80
    705e:	05db      	lsls	r3, r3, #23
    7060:	789b      	ldrb	r3, [r3, #2]
    7062:	b25b      	sxtb	r3, r3
    7064:	2b00      	cmp	r3, #0
    7066:	db09      	blt.n	707c <system_clock_init+0x1d8>
	PM->INTFLAG.reg = PM_INTFLAG_PLRDY;
    7068:	2380      	movs	r3, #128	; 0x80
    706a:	05db      	lsls	r3, r3, #23
    706c:	2201      	movs	r2, #1
    706e:	719a      	strb	r2, [r3, #6]
	PM->PLCFG.reg = performance_level;
    7070:	2200      	movs	r2, #0
    7072:	709a      	strb	r2, [r3, #2]
	while (!PM->INTFLAG.reg) {
    7074:	001a      	movs	r2, r3
    7076:	7993      	ldrb	r3, [r2, #6]
    7078:	2b00      	cmp	r3, #0
    707a:	d0fc      	beq.n	7076 <system_clock_init+0x1d2>
		system_switch_performance_level(SYSTEM_PERFORMANCE_LEVEL_0);
	}
}
    707c:	b00d      	add	sp, #52	; 0x34
    707e:	bc0c      	pop	{r2, r3}
    7080:	4690      	mov	r8, r2
    7082:	4699      	mov	r9, r3
    7084:	bdf0      	pop	{r4, r5, r6, r7, pc}
		coarse = 0x1f;
    7086:	3b20      	subs	r3, #32
    7088:	e788      	b.n	6f9c <system_clock_init+0xf8>
    708a:	46c0      	nop			; (mov r8, r8)
    708c:	40000c00 	.word	0x40000c00
    7090:	40001400 	.word	0x40001400
    7094:	41004000 	.word	0x41004000
    7098:	00006c45 	.word	0x00006c45
    709c:	00006d69 	.word	0x00006d69
    70a0:	40001000 	.word	0x40001000
    70a4:	000070fd 	.word	0x000070fd
    70a8:	00006e25 	.word	0x00006e25
    70ac:	00006c11 	.word	0x00006c11
    70b0:	00806020 	.word	0x00806020
    70b4:	00006ce1 	.word	0x00006ce1
    70b8:	000070d9 	.word	0x000070d9
    70bc:	000071a9 	.word	0x000071a9
    70c0:	000072c5 	.word	0x000072c5
    70c4:	00007255 	.word	0x00007255
    70c8:	40000400 	.word	0x40000400
    70cc:	000071e9 	.word	0x000071e9
    70d0:	00016641 	.word	0x00016641
    70d4:	00b71b00 	.word	0x00b71b00

000070d8 <system_gclk_init>:
			MCLK->APBAMASK.reg |= mask;
    70d8:	4a06      	ldr	r2, [pc, #24]	; (70f4 <system_gclk_init+0x1c>)
    70da:	6953      	ldr	r3, [r2, #20]
    70dc:	2140      	movs	r1, #64	; 0x40
    70de:	430b      	orrs	r3, r1
    70e0:	6153      	str	r3, [r2, #20]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, MCLK_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRLA.reg = GCLK_CTRLA_SWRST;
    70e2:	2201      	movs	r2, #1
    70e4:	4b04      	ldr	r3, [pc, #16]	; (70f8 <system_gclk_init+0x20>)
    70e6:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRLA.reg & GCLK_CTRLA_SWRST) {
    70e8:	0019      	movs	r1, r3
    70ea:	780b      	ldrb	r3, [r1, #0]
    70ec:	4213      	tst	r3, r2
    70ee:	d1fc      	bne.n	70ea <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    70f0:	4770      	bx	lr
    70f2:	46c0      	nop			; (mov r8, r8)
    70f4:	40000400 	.word	0x40000400
    70f8:	40001800 	.word	0x40001800

000070fc <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    70fc:	b570      	push	{r4, r5, r6, lr}
    70fe:	0004      	movs	r4, r0
	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config ;


	/* Select the requested source clock for the generator */
	new_genctrl_config = config->source_clock << GCLK_GENCTRL_SRC_Pos;
    7100:	780d      	ldrb	r5, [r1, #0]

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    7102:	784b      	ldrb	r3, [r1, #1]
    7104:	2b00      	cmp	r3, #0
    7106:	d002      	beq.n	710e <system_gclk_gen_set_config+0x12>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    7108:	2380      	movs	r3, #128	; 0x80
    710a:	00db      	lsls	r3, r3, #3
    710c:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    710e:	7a4b      	ldrb	r3, [r1, #9]
    7110:	2b00      	cmp	r3, #0
    7112:	d002      	beq.n	711a <system_gclk_gen_set_config+0x1e>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    7114:	2380      	movs	r3, #128	; 0x80
    7116:	011b      	lsls	r3, r3, #4
    7118:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    711a:	6848      	ldr	r0, [r1, #4]
    711c:	2801      	cmp	r0, #1
    711e:	d90f      	bls.n	7140 <system_gclk_gen_set_config+0x44>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    7120:	1e43      	subs	r3, r0, #1
    7122:	4218      	tst	r0, r3
    7124:	d131      	bne.n	718a <system_gclk_gen_set_config+0x8e>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    7126:	2802      	cmp	r0, #2
    7128:	d92d      	bls.n	7186 <system_gclk_gen_set_config+0x8a>
    712a:	2302      	movs	r3, #2
    712c:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    712e:	3201      	adds	r2, #1
						mask <<= 1) {
    7130:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
    7132:	4298      	cmp	r0, r3
    7134:	d8fb      	bhi.n	712e <system_gclk_gen_set_config+0x32>
    7136:	2380      	movs	r3, #128	; 0x80
    7138:	015b      	lsls	r3, r3, #5
    713a:	431d      	orrs	r5, r3
			}

			/* Set binary divider power of 2 division factor */
			new_genctrl_config  |= div2_count << GCLK_GENCTRL_DIV_Pos;
    713c:	0412      	lsls	r2, r2, #16
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    713e:	4315      	orrs	r5, r2
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    7140:	7a0b      	ldrb	r3, [r1, #8]
    7142:	2b00      	cmp	r3, #0
    7144:	d002      	beq.n	714c <system_gclk_gen_set_config+0x50>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    7146:	2380      	movs	r3, #128	; 0x80
    7148:	019b      	lsls	r3, r3, #6
    714a:	431d      	orrs	r5, r3
	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    714c:	2604      	movs	r6, #4
    714e:	40a6      	lsls	r6, r4
    7150:	4911      	ldr	r1, [pc, #68]	; (7198 <system_gclk_gen_set_config+0x9c>)
    7152:	4a12      	ldr	r2, [pc, #72]	; (719c <system_gclk_gen_set_config+0xa0>)
    7154:	684b      	ldr	r3, [r1, #4]
    7156:	4013      	ands	r3, r2
	}

	while (system_gclk_is_syncing(generator)) {
    7158:	421e      	tst	r6, r3
    715a:	d1fb      	bne.n	7154 <system_gclk_gen_set_config+0x58>
	cpu_irq_enter_critical();
    715c:	4b10      	ldr	r3, [pc, #64]	; (71a0 <system_gclk_gen_set_config+0xa4>)
    715e:	4798      	blx	r3
    7160:	00a4      	lsls	r4, r4, #2
    7162:	4b0d      	ldr	r3, [pc, #52]	; (7198 <system_gclk_gen_set_config+0x9c>)
    7164:	469c      	mov	ip, r3
    7166:	4464      	add	r4, ip
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();

	GCLK->GENCTRL[generator].reg = new_genctrl_config | (GCLK->GENCTRL[generator].reg & GCLK_GENCTRL_GENEN);
    7168:	6a22      	ldr	r2, [r4, #32]
    716a:	2380      	movs	r3, #128	; 0x80
    716c:	005b      	lsls	r3, r3, #1
    716e:	401a      	ands	r2, r3
    7170:	432a      	orrs	r2, r5
    7172:	6222      	str	r2, [r4, #32]
	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    7174:	4661      	mov	r1, ip
    7176:	4a09      	ldr	r2, [pc, #36]	; (719c <system_gclk_gen_set_config+0xa0>)
    7178:	684b      	ldr	r3, [r1, #4]
    717a:	4013      	ands	r3, r2

	while (system_gclk_is_syncing(generator)) {
    717c:	421e      	tst	r6, r3
    717e:	d1fb      	bne.n	7178 <system_gclk_gen_set_config+0x7c>
	cpu_irq_leave_critical();
    7180:	4b08      	ldr	r3, [pc, #32]	; (71a4 <system_gclk_gen_set_config+0xa8>)
    7182:	4798      	blx	r3
		/* Wait for synchronization */
	};

	system_interrupt_leave_critical_section();
}
    7184:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
    7186:	2200      	movs	r2, #0
    7188:	e7d5      	b.n	7136 <system_gclk_gen_set_config+0x3a>
					(config->division_factor) << GCLK_GENCTRL_DIV_Pos;
    718a:	0400      	lsls	r0, r0, #16
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    718c:	2380      	movs	r3, #128	; 0x80
    718e:	009b      	lsls	r3, r3, #2
    7190:	4318      	orrs	r0, r3
    7192:	4305      	orrs	r5, r0
    7194:	e7d4      	b.n	7140 <system_gclk_gen_set_config+0x44>
    7196:	46c0      	nop			; (mov r8, r8)
    7198:	40001800 	.word	0x40001800
    719c:	000007fc 	.word	0x000007fc
    71a0:	00004601 	.word	0x00004601
    71a4:	00004641 	.word	0x00004641

000071a8 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    71a8:	b510      	push	{r4, lr}
    71aa:	0004      	movs	r4, r0
	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    71ac:	2204      	movs	r2, #4
    71ae:	4082      	lsls	r2, r0
    71b0:	4809      	ldr	r0, [pc, #36]	; (71d8 <system_gclk_gen_enable+0x30>)
    71b2:	490a      	ldr	r1, [pc, #40]	; (71dc <system_gclk_gen_enable+0x34>)
    71b4:	6843      	ldr	r3, [r0, #4]
    71b6:	400b      	ands	r3, r1
	while (system_gclk_is_syncing(generator)) {
    71b8:	421a      	tst	r2, r3
    71ba:	d1fb      	bne.n	71b4 <system_gclk_gen_enable+0xc>
	cpu_irq_enter_critical();
    71bc:	4b08      	ldr	r3, [pc, #32]	; (71e0 <system_gclk_gen_enable+0x38>)
    71be:	4798      	blx	r3
    71c0:	00a4      	lsls	r4, r4, #2
    71c2:	4b05      	ldr	r3, [pc, #20]	; (71d8 <system_gclk_gen_enable+0x30>)
    71c4:	469c      	mov	ip, r3
    71c6:	4464      	add	r4, ip
	};

	system_interrupt_enter_critical_section();

	/* Enable generator */
	GCLK->GENCTRL[generator].reg |= GCLK_GENCTRL_GENEN;
    71c8:	6a22      	ldr	r2, [r4, #32]
    71ca:	2380      	movs	r3, #128	; 0x80
    71cc:	005b      	lsls	r3, r3, #1
    71ce:	4313      	orrs	r3, r2
    71d0:	6223      	str	r3, [r4, #32]
	cpu_irq_leave_critical();
    71d2:	4b04      	ldr	r3, [pc, #16]	; (71e4 <system_gclk_gen_enable+0x3c>)
    71d4:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    71d6:	bd10      	pop	{r4, pc}
    71d8:	40001800 	.word	0x40001800
    71dc:	000007fc 	.word	0x000007fc
    71e0:	00004601 	.word	0x00004601
    71e4:	00004641 	.word	0x00004641

000071e8 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    71e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    71ea:	0004      	movs	r4, r0
	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    71ec:	2204      	movs	r2, #4
    71ee:	4082      	lsls	r2, r0
    71f0:	4812      	ldr	r0, [pc, #72]	; (723c <system_gclk_gen_get_hz+0x54>)
    71f2:	4913      	ldr	r1, [pc, #76]	; (7240 <system_gclk_gen_get_hz+0x58>)
    71f4:	6843      	ldr	r3, [r0, #4]
    71f6:	400b      	ands	r3, r1
	while (system_gclk_is_syncing(generator)) {
    71f8:	421a      	tst	r2, r3
    71fa:	d1fb      	bne.n	71f4 <system_gclk_gen_get_hz+0xc>
	cpu_irq_enter_critical();
    71fc:	4b11      	ldr	r3, [pc, #68]	; (7244 <system_gclk_gen_get_hz+0x5c>)
    71fe:	4798      	blx	r3

	system_interrupt_enter_critical_section();

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL[generator].bit.SRC);
    7200:	4f0e      	ldr	r7, [pc, #56]	; (723c <system_gclk_gen_get_hz+0x54>)
    7202:	3408      	adds	r4, #8
    7204:	00a4      	lsls	r4, r4, #2
    7206:	59e0      	ldr	r0, [r4, r7]
    7208:	0700      	lsls	r0, r0, #28
    720a:	0f00      	lsrs	r0, r0, #28
	uint32_t gen_input_hz = system_clock_source_get_hz(
    720c:	4b0e      	ldr	r3, [pc, #56]	; (7248 <system_gclk_gen_get_hz+0x60>)
    720e:	4798      	blx	r3
    7210:	0006      	movs	r6, r0

	uint8_t divsel = GCLK->GENCTRL[generator].bit.DIVSEL;
    7212:	59e5      	ldr	r5, [r4, r7]
    7214:	04ed      	lsls	r5, r5, #19
    7216:	0fed      	lsrs	r5, r5, #31
	uint32_t divider = GCLK->GENCTRL[generator].bit.DIV;
    7218:	59e4      	ldr	r4, [r4, r7]
    721a:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
    721c:	4b0b      	ldr	r3, [pc, #44]	; (724c <system_gclk_gen_get_hz+0x64>)
    721e:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    7220:	2d00      	cmp	r5, #0
    7222:	d107      	bne.n	7234 <system_gclk_gen_get_hz+0x4c>
    7224:	2c01      	cmp	r4, #1
    7226:	d907      	bls.n	7238 <system_gclk_gen_get_hz+0x50>
		gen_input_hz /= divider;
    7228:	0021      	movs	r1, r4
    722a:	0030      	movs	r0, r6
    722c:	4b08      	ldr	r3, [pc, #32]	; (7250 <system_gclk_gen_get_hz+0x68>)
    722e:	4798      	blx	r3
    7230:	0006      	movs	r6, r0
    7232:	e001      	b.n	7238 <system_gclk_gen_get_hz+0x50>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    7234:	3401      	adds	r4, #1
    7236:	40e6      	lsrs	r6, r4
	}

	return gen_input_hz;
}
    7238:	0030      	movs	r0, r6
    723a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    723c:	40001800 	.word	0x40001800
    7240:	000007fc 	.word	0x000007fc
    7244:	00004601 	.word	0x00004601
    7248:	00006b7d 	.word	0x00006b7d
    724c:	00004641 	.word	0x00004641
    7250:	00016641 	.word	0x00016641

00007254 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    7254:	b510      	push	{r4, lr}
    7256:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    7258:	4b09      	ldr	r3, [pc, #36]	; (7280 <system_gclk_chan_enable+0x2c>)
    725a:	4798      	blx	r3
    725c:	00a0      	lsls	r0, r4, #2
    725e:	4b09      	ldr	r3, [pc, #36]	; (7284 <system_gclk_chan_enable+0x30>)
    7260:	469c      	mov	ip, r3
    7262:	4460      	add	r0, ip
	system_interrupt_enter_critical_section();

	/* Enable the peripheral channel */
	GCLK->PCHCTRL[channel].reg |= GCLK_PCHCTRL_CHEN;
    7264:	2280      	movs	r2, #128	; 0x80
    7266:	5883      	ldr	r3, [r0, r2]
    7268:	2140      	movs	r1, #64	; 0x40
    726a:	430b      	orrs	r3, r1
    726c:	5083      	str	r3, [r0, r2]

	while (!(GCLK->PCHCTRL[channel].reg & GCLK_PCHCTRL_CHEN)) {
    726e:	3140      	adds	r1, #64	; 0x40
    7270:	3a40      	subs	r2, #64	; 0x40
    7272:	5843      	ldr	r3, [r0, r1]
    7274:	421a      	tst	r2, r3
    7276:	d0fc      	beq.n	7272 <system_gclk_chan_enable+0x1e>
	cpu_irq_leave_critical();
    7278:	4b03      	ldr	r3, [pc, #12]	; (7288 <system_gclk_chan_enable+0x34>)
    727a:	4798      	blx	r3
		/* Wait for clock synchronization */
	}

	system_interrupt_leave_critical_section();
}
    727c:	bd10      	pop	{r4, pc}
    727e:	46c0      	nop			; (mov r8, r8)
    7280:	00004601 	.word	0x00004601
    7284:	40001800 	.word	0x40001800
    7288:	00004641 	.word	0x00004641

0000728c <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    728c:	b510      	push	{r4, lr}
    728e:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    7290:	4b09      	ldr	r3, [pc, #36]	; (72b8 <system_gclk_chan_disable+0x2c>)
    7292:	4798      	blx	r3
    7294:	00a0      	lsls	r0, r4, #2
    7296:	4b09      	ldr	r3, [pc, #36]	; (72bc <system_gclk_chan_disable+0x30>)
    7298:	469c      	mov	ip, r3
    729a:	4460      	add	r0, ip

	/* Sanity check WRTLOCK */
	Assert(!GCLK->PCHCTRL[channel].bit.WRTLOCK);

	/* Disable the peripheral channel */
	GCLK->PCHCTRL[channel].reg &= ~GCLK_PCHCTRL_CHEN;
    729c:	2280      	movs	r2, #128	; 0x80
    729e:	5883      	ldr	r3, [r0, r2]
    72a0:	2140      	movs	r1, #64	; 0x40
    72a2:	438b      	bics	r3, r1
    72a4:	5083      	str	r3, [r0, r2]

	while (GCLK->PCHCTRL[channel].reg & GCLK_PCHCTRL_CHEN) {
    72a6:	3140      	adds	r1, #64	; 0x40
    72a8:	3a40      	subs	r2, #64	; 0x40
    72aa:	5843      	ldr	r3, [r0, r1]
    72ac:	421a      	tst	r2, r3
    72ae:	d1fc      	bne.n	72aa <system_gclk_chan_disable+0x1e>
	cpu_irq_leave_critical();
    72b0:	4b03      	ldr	r3, [pc, #12]	; (72c0 <system_gclk_chan_disable+0x34>)
    72b2:	4798      	blx	r3
		/* Wait for clock synchronization */
	}

	system_interrupt_leave_critical_section();
}
    72b4:	bd10      	pop	{r4, pc}
    72b6:	46c0      	nop			; (mov r8, r8)
    72b8:	00004601 	.word	0x00004601
    72bc:	40001800 	.word	0x40001800
    72c0:	00004641 	.word	0x00004641

000072c4 <system_gclk_chan_set_config>:
{
    72c4:	b570      	push	{r4, r5, r6, lr}
    72c6:	0004      	movs	r4, r0
    72c8:	000d      	movs	r5, r1
	system_gclk_chan_disable(channel);
    72ca:	4b05      	ldr	r3, [pc, #20]	; (72e0 <system_gclk_chan_set_config+0x1c>)
    72cc:	4798      	blx	r3
	GCLK->PCHCTRL[channel].reg = GCLK_PCHCTRL_GEN(config->source_generator);
    72ce:	782a      	ldrb	r2, [r5, #0]
    72d0:	230f      	movs	r3, #15
    72d2:	4013      	ands	r3, r2
    72d4:	3420      	adds	r4, #32
    72d6:	00a4      	lsls	r4, r4, #2
    72d8:	4a02      	ldr	r2, [pc, #8]	; (72e4 <system_gclk_chan_set_config+0x20>)
    72da:	50a3      	str	r3, [r4, r2]
}
    72dc:	bd70      	pop	{r4, r5, r6, pc}
    72de:	46c0      	nop			; (mov r8, r8)
    72e0:	0000728d 	.word	0x0000728d
    72e4:	40001800 	.word	0x40001800

000072e8 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    72e8:	b510      	push	{r4, lr}
    72ea:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    72ec:	4b06      	ldr	r3, [pc, #24]	; (7308 <system_gclk_chan_get_hz+0x20>)
    72ee:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();
	/* Select the requested generic clock channel */
	gen_id = GCLK->PCHCTRL[channel].bit.GEN;
    72f0:	3420      	adds	r4, #32
    72f2:	00a4      	lsls	r4, r4, #2
    72f4:	4b05      	ldr	r3, [pc, #20]	; (730c <system_gclk_chan_get_hz+0x24>)
    72f6:	58e4      	ldr	r4, [r4, r3]
    72f8:	0724      	lsls	r4, r4, #28
    72fa:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
    72fc:	4b04      	ldr	r3, [pc, #16]	; (7310 <system_gclk_chan_get_hz+0x28>)
    72fe:	4798      	blx	r3
	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    7300:	0020      	movs	r0, r4
    7302:	4b04      	ldr	r3, [pc, #16]	; (7314 <system_gclk_chan_get_hz+0x2c>)
    7304:	4798      	blx	r3
}
    7306:	bd10      	pop	{r4, pc}
    7308:	00004601 	.word	0x00004601
    730c:	40001800 	.word	0x40001800
    7310:	00004641 	.word	0x00004641
    7314:	000071e9 	.word	0x000071e9

00007318 <system_interrupt_clear_pending>:
enum status_code system_interrupt_clear_pending(
		const enum system_interrupt_vector vector)
{
	enum status_code status = STATUS_OK;

	if (vector >= _SYSTEM_INTERRUPT_EXTERNAL_VECTOR_START) {
    7318:	2800      	cmp	r0, #0
    731a:	db08      	blt.n	732e <system_interrupt_clear_pending+0x16>
		NVIC->ICPR[0] = (1 << vector);
    731c:	2301      	movs	r3, #1
    731e:	4083      	lsls	r3, r0
    7320:	22c0      	movs	r2, #192	; 0xc0
    7322:	0052      	lsls	r2, r2, #1
    7324:	4906      	ldr	r1, [pc, #24]	; (7340 <system_interrupt_clear_pending+0x28>)
    7326:	508b      	str	r3, [r1, r2]
	enum status_code status = STATUS_OK;
    7328:	2300      	movs	r3, #0
		Assert(false);
		status = STATUS_ERR_INVALID_ARG;
	}

	return status;
}
    732a:	0018      	movs	r0, r3
    732c:	4770      	bx	lr
		status = STATUS_ERR_INVALID_ARG;
    732e:	2317      	movs	r3, #23
	} else if (vector == SYSTEM_INTERRUPT_SYSTICK) {
    7330:	1c42      	adds	r2, r0, #1
    7332:	d1fa      	bne.n	732a <system_interrupt_clear_pending+0x12>
		SCB->ICSR = SCB_ICSR_PENDSTCLR_Msk;
    7334:	2280      	movs	r2, #128	; 0x80
    7336:	0492      	lsls	r2, r2, #18
    7338:	4b02      	ldr	r3, [pc, #8]	; (7344 <system_interrupt_clear_pending+0x2c>)
    733a:	605a      	str	r2, [r3, #4]
	enum status_code status = STATUS_OK;
    733c:	2300      	movs	r3, #0
    733e:	e7f4      	b.n	732a <system_interrupt_clear_pending+0x12>
    7340:	e000e100 	.word	0xe000e100
    7344:	e000ed00 	.word	0xe000ed00

00007348 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    7348:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    734a:	78d3      	ldrb	r3, [r2, #3]
    734c:	2b00      	cmp	r3, #0
    734e:	d135      	bne.n	73bc <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    7350:	7813      	ldrb	r3, [r2, #0]
    7352:	2b80      	cmp	r3, #128	; 0x80
    7354:	d029      	beq.n	73aa <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    7356:	061b      	lsls	r3, r3, #24
    7358:	2480      	movs	r4, #128	; 0x80
    735a:	0264      	lsls	r4, r4, #9
    735c:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    735e:	7854      	ldrb	r4, [r2, #1]
    7360:	2502      	movs	r5, #2
    7362:	43ac      	bics	r4, r5
    7364:	d106      	bne.n	7374 <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    7366:	7894      	ldrb	r4, [r2, #2]
    7368:	2c00      	cmp	r4, #0
    736a:	d120      	bne.n	73ae <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
    736c:	2480      	movs	r4, #128	; 0x80
    736e:	02a4      	lsls	r4, r4, #10
    7370:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    7372:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    7374:	7854      	ldrb	r4, [r2, #1]
    7376:	3c01      	subs	r4, #1
    7378:	2c01      	cmp	r4, #1
    737a:	d91c      	bls.n	73b6 <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    737c:	040d      	lsls	r5, r1, #16
    737e:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    7380:	24a0      	movs	r4, #160	; 0xa0
    7382:	05e4      	lsls	r4, r4, #23
    7384:	432c      	orrs	r4, r5
    7386:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    7388:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    738a:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    738c:	24d0      	movs	r4, #208	; 0xd0
    738e:	0624      	lsls	r4, r4, #24
    7390:	432c      	orrs	r4, r5
    7392:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    7394:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    7396:	78d4      	ldrb	r4, [r2, #3]
    7398:	2c00      	cmp	r4, #0
    739a:	d122      	bne.n	73e2 <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    739c:	035b      	lsls	r3, r3, #13
    739e:	d51c      	bpl.n	73da <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    73a0:	7893      	ldrb	r3, [r2, #2]
    73a2:	2b01      	cmp	r3, #1
    73a4:	d01e      	beq.n	73e4 <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
    73a6:	6141      	str	r1, [r0, #20]
    73a8:	e017      	b.n	73da <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
    73aa:	2300      	movs	r3, #0
    73ac:	e7d7      	b.n	735e <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    73ae:	24c0      	movs	r4, #192	; 0xc0
    73b0:	02e4      	lsls	r4, r4, #11
    73b2:	4323      	orrs	r3, r4
    73b4:	e7dd      	b.n	7372 <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    73b6:	4c0d      	ldr	r4, [pc, #52]	; (73ec <_system_pinmux_config+0xa4>)
    73b8:	4023      	ands	r3, r4
    73ba:	e7df      	b.n	737c <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
    73bc:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    73be:	040c      	lsls	r4, r1, #16
    73c0:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    73c2:	23a0      	movs	r3, #160	; 0xa0
    73c4:	05db      	lsls	r3, r3, #23
    73c6:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    73c8:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    73ca:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    73cc:	23d0      	movs	r3, #208	; 0xd0
    73ce:	061b      	lsls	r3, r3, #24
    73d0:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    73d2:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
    73d4:	78d3      	ldrb	r3, [r2, #3]
    73d6:	2b00      	cmp	r3, #0
    73d8:	d103      	bne.n	73e2 <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    73da:	7853      	ldrb	r3, [r2, #1]
    73dc:	3b01      	subs	r3, #1
    73de:	2b01      	cmp	r3, #1
    73e0:	d902      	bls.n	73e8 <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
    73e2:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
    73e4:	6181      	str	r1, [r0, #24]
    73e6:	e7f8      	b.n	73da <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
    73e8:	6081      	str	r1, [r0, #8]
}
    73ea:	e7fa      	b.n	73e2 <_system_pinmux_config+0x9a>
    73ec:	fffbffff 	.word	0xfffbffff

000073f0 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    73f0:	b510      	push	{r4, lr}
    73f2:	000a      	movs	r2, r1
	if (port_index < PORT_INST_NUM) {
    73f4:	09c1      	lsrs	r1, r0, #7
		return NULL;
    73f6:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    73f8:	2900      	cmp	r1, #0
    73fa:	d104      	bne.n	7406 <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    73fc:	0943      	lsrs	r3, r0, #5
    73fe:	01db      	lsls	r3, r3, #7
    7400:	4905      	ldr	r1, [pc, #20]	; (7418 <system_pinmux_pin_set_config+0x28>)
    7402:	468c      	mov	ip, r1
    7404:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    7406:	241f      	movs	r4, #31
    7408:	4020      	ands	r0, r4
    740a:	2101      	movs	r1, #1
    740c:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
    740e:	0018      	movs	r0, r3
    7410:	4b02      	ldr	r3, [pc, #8]	; (741c <system_pinmux_pin_set_config+0x2c>)
    7412:	4798      	blx	r3
}
    7414:	bd10      	pop	{r4, pc}
    7416:	46c0      	nop			; (mov r8, r8)
    7418:	40002800 	.word	0x40002800
    741c:	00007349 	.word	0x00007349

00007420 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    7420:	4770      	bx	lr
	...

00007424 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    7424:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    7426:	4b05      	ldr	r3, [pc, #20]	; (743c <system_init+0x18>)
    7428:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    742a:	4b05      	ldr	r3, [pc, #20]	; (7440 <system_init+0x1c>)
    742c:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    742e:	4b05      	ldr	r3, [pc, #20]	; (7444 <system_init+0x20>)
    7430:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    7432:	4b05      	ldr	r3, [pc, #20]	; (7448 <system_init+0x24>)
    7434:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    7436:	4b05      	ldr	r3, [pc, #20]	; (744c <system_init+0x28>)
    7438:	4798      	blx	r3
}
    743a:	bd10      	pop	{r4, pc}
    743c:	00006ea5 	.word	0x00006ea5
    7440:	00004671 	.word	0x00004671
    7444:	00007421 	.word	0x00007421
    7448:	00004a6d 	.word	0x00004a6d
    744c:	00007421 	.word	0x00007421

00007450 <tc_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    7450:	1c93      	adds	r3, r2, #2
    7452:	009b      	lsls	r3, r3, #2
    7454:	5019      	str	r1, [r3, r0]

	/* Set the bit corresponding to the callback_type */
	if (callback_type == TC_CALLBACK_CC_CHANNEL0) {
    7456:	2a02      	cmp	r2, #2
    7458:	d009      	beq.n	746e <tc_register_callback+0x1e>
		module->register_callback_mask |= TC_INTFLAG_MC(1);
	}
	else if (callback_type == TC_CALLBACK_CC_CHANNEL1) {
    745a:	2a03      	cmp	r2, #3
    745c:	d00c      	beq.n	7478 <tc_register_callback+0x28>
		module->register_callback_mask |= TC_INTFLAG_MC(2);
	}
	else {
		module->register_callback_mask |= (1 << callback_type);
    745e:	2301      	movs	r3, #1
    7460:	4093      	lsls	r3, r2
    7462:	001a      	movs	r2, r3
    7464:	7e03      	ldrb	r3, [r0, #24]
    7466:	4313      	orrs	r3, r2
    7468:	7603      	strb	r3, [r0, #24]
	}
	return STATUS_OK;
}
    746a:	2000      	movs	r0, #0
    746c:	4770      	bx	lr
		module->register_callback_mask |= TC_INTFLAG_MC(1);
    746e:	7e03      	ldrb	r3, [r0, #24]
    7470:	2210      	movs	r2, #16
    7472:	4313      	orrs	r3, r2
    7474:	7603      	strb	r3, [r0, #24]
    7476:	e7f8      	b.n	746a <tc_register_callback+0x1a>
		module->register_callback_mask |= TC_INTFLAG_MC(2);
    7478:	7e03      	ldrb	r3, [r0, #24]
    747a:	2220      	movs	r2, #32
    747c:	4313      	orrs	r3, r2
    747e:	7603      	strb	r3, [r0, #24]
    7480:	e7f3      	b.n	746a <tc_register_callback+0x1a>
	...

00007484 <_tc_interrupt_handler>:
 * \param[in]  instance  ID of the TC instance calling the interrupt
 *                       handler
 */
void _tc_interrupt_handler(
		uint8_t instance)
{
    7484:	b570      	push	{r4, r5, r6, lr}
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */
	struct tc_module *module
    7486:	0080      	lsls	r0, r0, #2
    7488:	4b16      	ldr	r3, [pc, #88]	; (74e4 <_tc_interrupt_handler+0x60>)
    748a:	58c4      	ldr	r4, [r0, r3]
			= (struct tc_module *)_tc_instances[instance];

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
    748c:	6823      	ldr	r3, [r4, #0]
    748e:	7a9d      	ldrb	r5, [r3, #10]
    7490:	7e22      	ldrb	r2, [r4, #24]
    7492:	7e63      	ldrb	r3, [r4, #25]
    7494:	4013      	ands	r3, r2
    7496:	401d      	ands	r5, r3
			module->register_callback_mask &
			module->enable_callback_mask;

	/* Check if an Overflow interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
    7498:	07eb      	lsls	r3, r5, #31
    749a:	d406      	bmi.n	74aa <_tc_interrupt_handler+0x26>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
	}

	/* Check if an Error interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_ERR) {
    749c:	07ab      	lsls	r3, r5, #30
    749e:	d40b      	bmi.n	74b8 <_tc_interrupt_handler+0x34>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
	}

	/* Check if an Match/Capture Channel 0 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(1)) {
    74a0:	06eb      	lsls	r3, r5, #27
    74a2:	d410      	bmi.n	74c6 <_tc_interrupt_handler+0x42>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
	}

	/* Check if an Match/Capture Channel 1 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(2)) {
    74a4:	06ab      	lsls	r3, r5, #26
    74a6:	d415      	bmi.n	74d4 <_tc_interrupt_handler+0x50>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
	}
}
    74a8:	bd70      	pop	{r4, r5, r6, pc}
		(module->callback[TC_CALLBACK_OVERFLOW])(module);
    74aa:	0020      	movs	r0, r4
    74ac:	68a3      	ldr	r3, [r4, #8]
    74ae:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
    74b0:	2301      	movs	r3, #1
    74b2:	6822      	ldr	r2, [r4, #0]
    74b4:	7293      	strb	r3, [r2, #10]
    74b6:	e7f1      	b.n	749c <_tc_interrupt_handler+0x18>
		(module->callback[TC_CALLBACK_ERROR])(module);
    74b8:	0020      	movs	r0, r4
    74ba:	68e3      	ldr	r3, [r4, #12]
    74bc:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
    74be:	2302      	movs	r3, #2
    74c0:	6822      	ldr	r2, [r4, #0]
    74c2:	7293      	strb	r3, [r2, #10]
    74c4:	e7ec      	b.n	74a0 <_tc_interrupt_handler+0x1c>
		(module->callback[TC_CALLBACK_CC_CHANNEL0])(module);
    74c6:	0020      	movs	r0, r4
    74c8:	6923      	ldr	r3, [r4, #16]
    74ca:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
    74cc:	2310      	movs	r3, #16
    74ce:	6822      	ldr	r2, [r4, #0]
    74d0:	7293      	strb	r3, [r2, #10]
    74d2:	e7e7      	b.n	74a4 <_tc_interrupt_handler+0x20>
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
    74d4:	0020      	movs	r0, r4
    74d6:	6963      	ldr	r3, [r4, #20]
    74d8:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
    74da:	6823      	ldr	r3, [r4, #0]
    74dc:	2220      	movs	r2, #32
    74de:	729a      	strb	r2, [r3, #10]
}
    74e0:	e7e2      	b.n	74a8 <_tc_interrupt_handler+0x24>
    74e2:	46c0      	nop			; (mov r8, r8)
    74e4:	20002250 	.word	0x20002250

000074e8 <TC0_Handler>:
	MRECURSION(TC_INST_NUM, _TC_INTERRUPT_HANDLER, TC_INST_MAX_ID)
    74e8:	b510      	push	{r4, lr}
    74ea:	2000      	movs	r0, #0
    74ec:	4b01      	ldr	r3, [pc, #4]	; (74f4 <TC0_Handler+0xc>)
    74ee:	4798      	blx	r3
    74f0:	bd10      	pop	{r4, pc}
    74f2:	46c0      	nop			; (mov r8, r8)
    74f4:	00007485 	.word	0x00007485

000074f8 <TC1_Handler>:
    74f8:	b510      	push	{r4, lr}
    74fa:	2001      	movs	r0, #1
    74fc:	4b01      	ldr	r3, [pc, #4]	; (7504 <TC1_Handler+0xc>)
    74fe:	4798      	blx	r3
    7500:	bd10      	pop	{r4, pc}
    7502:	46c0      	nop			; (mov r8, r8)
    7504:	00007485 	.word	0x00007485

00007508 <TC2_Handler>:
    7508:	b510      	push	{r4, lr}
    750a:	2002      	movs	r0, #2
    750c:	4b01      	ldr	r3, [pc, #4]	; (7514 <TC2_Handler+0xc>)
    750e:	4798      	blx	r3
    7510:	bd10      	pop	{r4, pc}
    7512:	46c0      	nop			; (mov r8, r8)
    7514:	00007485 	.word	0x00007485

00007518 <TC3_Handler>:
    7518:	b510      	push	{r4, lr}
    751a:	2003      	movs	r0, #3
    751c:	4b01      	ldr	r3, [pc, #4]	; (7524 <TC3_Handler+0xc>)
    751e:	4798      	blx	r3
    7520:	bd10      	pop	{r4, pc}
    7522:	46c0      	nop			; (mov r8, r8)
    7524:	00007485 	.word	0x00007485

00007528 <TC4_Handler>:
    7528:	b510      	push	{r4, lr}
    752a:	2004      	movs	r0, #4
    752c:	4b01      	ldr	r3, [pc, #4]	; (7534 <TC4_Handler+0xc>)
    752e:	4798      	blx	r3
    7530:	bd10      	pop	{r4, pc}
    7532:	46c0      	nop			; (mov r8, r8)
    7534:	00007485 	.word	0x00007485

00007538 <_tc_get_inst_index>:
 *
 * \return Index of the given TC module instance.
 */
uint8_t _tc_get_inst_index(
		Tc *const hw)
{
    7538:	b530      	push	{r4, r5, lr}
    753a:	b087      	sub	sp, #28
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
    753c:	a901      	add	r1, sp, #4
    753e:	4b0c      	ldr	r3, [pc, #48]	; (7570 <_tc_get_inst_index+0x38>)
    7540:	000a      	movs	r2, r1
    7542:	cb32      	ldmia	r3!, {r1, r4, r5}
    7544:	c232      	stmia	r2!, {r1, r4, r5}
    7546:	cb12      	ldmia	r3!, {r1, r4}
    7548:	c212      	stmia	r2!, {r1, r4}

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
		if (hw == tc_modules[i]) {
    754a:	9b01      	ldr	r3, [sp, #4]
    754c:	4298      	cmp	r0, r3
    754e:	d00b      	beq.n	7568 <_tc_get_inst_index+0x30>
    7550:	2301      	movs	r3, #1
    7552:	a901      	add	r1, sp, #4
    7554:	009a      	lsls	r2, r3, #2
    7556:	5852      	ldr	r2, [r2, r1]
    7558:	4282      	cmp	r2, r0
    755a:	d006      	beq.n	756a <_tc_get_inst_index+0x32>
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    755c:	3301      	adds	r3, #1
    755e:	2b05      	cmp	r3, #5
    7560:	d1f8      	bne.n	7554 <_tc_get_inst_index+0x1c>
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
    7562:	2000      	movs	r0, #0
}
    7564:	b007      	add	sp, #28
    7566:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    7568:	2300      	movs	r3, #0
			return i;
    756a:	b2d8      	uxtb	r0, r3
    756c:	e7fa      	b.n	7564 <_tc_get_inst_index+0x2c>
    756e:	46c0      	nop			; (mov r8, r8)
    7570:	0001fc58 	.word	0x0001fc58

00007574 <tc_init>:
 */
enum status_code tc_init(
		struct tc_module *const module_inst,
		Tc *const hw,
		const struct tc_config *const config)
{
    7574:	b5f0      	push	{r4, r5, r6, r7, lr}
    7576:	46c6      	mov	lr, r8
    7578:	b500      	push	{lr}
    757a:	b08e      	sub	sp, #56	; 0x38
    757c:	0004      	movs	r4, r0
    757e:	000d      	movs	r5, r1
    7580:	0016      	movs	r6, r2
	uint32_t ctrla_tmp = 0;
	/* Temporary variable to hold all updates to the CTRLBSET
	 * register before they are written to it */
	uint8_t ctrlbset_tmp = 0;
	/* Temporary variable to hold TC instance number */
	uint8_t instance = _tc_get_inst_index(hw);
    7582:	0008      	movs	r0, r1
    7584:	4bae      	ldr	r3, [pc, #696]	; (7840 <tc_init+0x2cc>)
    7586:	4798      	blx	r3
    7588:	4680      	mov	r8, r0
									SYSTEM_CLOCK_APB_APBC, MCLK_APBCMASK_TC2,
									SYSTEM_CLOCK_APB_APBC, MCLK_APBCMASK_TC3,
									SYSTEM_CLOCK_APB_APBC, MCLK_APBCMASK_TC4};
#elif (SAML21J) || (SAMR34J) || (SAMR35J) || (WLR089U0)
	/* Array of GLCK ID for different TC instances */
	uint8_t inst_gclk_id[] = {TC0_GCLK_ID, TC1_GCLK_ID, TC2_GCLK_ID, TC3_GCLK_ID, TC4_GCLK_ID};
    758a:	ab0c      	add	r3, sp, #48	; 0x30
    758c:	221b      	movs	r2, #27
    758e:	701a      	strb	r2, [r3, #0]
    7590:	705a      	strb	r2, [r3, #1]
    7592:	3201      	adds	r2, #1
    7594:	709a      	strb	r2, [r3, #2]
    7596:	70da      	strb	r2, [r3, #3]
    7598:	3201      	adds	r2, #1
    759a:	711a      	strb	r2, [r3, #4]
	/* Array of MCLK APB mask bit position for different TC instances */
	uint32_t inst_mclk_apbmask[] = {SYSTEM_CLOCK_APB_APBC, MCLK_APBCMASK_TC0,
    759c:	a902      	add	r1, sp, #8
    759e:	4ba9      	ldr	r3, [pc, #676]	; (7844 <tc_init+0x2d0>)
    75a0:	3314      	adds	r3, #20
    75a2:	000a      	movs	r2, r1
    75a4:	cb83      	ldmia	r3!, {r0, r1, r7}
    75a6:	c283      	stmia	r2!, {r0, r1, r7}
    75a8:	cb83      	ldmia	r3!, {r0, r1, r7}
    75aa:	c283      	stmia	r2!, {r0, r1, r7}
    75ac:	cb83      	ldmia	r3!, {r0, r1, r7}
    75ae:	c283      	stmia	r2!, {r0, r1, r7}
    75b0:	681b      	ldr	r3, [r3, #0]
    75b2:	6013      	str	r3, [r2, #0]
	struct system_gclk_chan_config gclk_chan_config;

#if TC_ASYNC == true
	/* Initialize parameters */
	for (uint8_t i = 0; i < TC_CALLBACK_N; i++) {
		module_inst->callback[i]        = NULL;
    75b4:	2300      	movs	r3, #0
    75b6:	60a3      	str	r3, [r4, #8]
    75b8:	60e3      	str	r3, [r4, #12]
    75ba:	6123      	str	r3, [r4, #16]
    75bc:	6163      	str	r3, [r4, #20]
	}
	module_inst->register_callback_mask     = 0x00;
    75be:	7623      	strb	r3, [r4, #24]
	module_inst->enable_callback_mask       = 0x00;
    75c0:	7663      	strb	r3, [r4, #25]

	/* Register this instance for callbacks*/
	_tc_instances[instance] = module_inst;
    75c2:	4643      	mov	r3, r8
    75c4:	009a      	lsls	r2, r3, #2
    75c6:	4ba0      	ldr	r3, [pc, #640]	; (7848 <tc_init+0x2d4>)
    75c8:	50d4      	str	r4, [r2, r3]
#endif

	/* Associate the given device instance with the hardware module */
	module_inst->hw = hw;
    75ca:	6025      	str	r5, [r4, #0]

	module_inst->double_buffering_enabled = config->double_buffering_enabled;
    75cc:	2334      	movs	r3, #52	; 0x34
    75ce:	5cf3      	ldrb	r3, [r6, r3]
    75d0:	76a3      	strb	r3, [r4, #26]

	/* Check if odd numbered TC modules are being configured in 32-bit
	 * counter size. Only even numbered counters are allowed to be
	 * configured in 32-bit counter size.
	 */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
    75d2:	78f3      	ldrb	r3, [r6, #3]
    75d4:	2b08      	cmp	r3, #8
    75d6:	d008      	beq.n	75ea <tc_init+0x76>
	}

	/* Make the counter size variable in the module_inst struct reflect
	 * the counter size in the module
	 */
	module_inst->counter_size = config->counter_size;
    75d8:	7123      	strb	r3, [r4, #4]

	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
    75da:	682b      	ldr	r3, [r5, #0]
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
    75dc:	2005      	movs	r0, #5
	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
    75de:	07db      	lsls	r3, r3, #31
    75e0:	d508      	bpl.n	75f4 <tc_init+0x80>
			return STATUS_OK;
	}

	Assert(false);
	return STATUS_ERR_INVALID_ARG;
}
    75e2:	b00e      	add	sp, #56	; 0x38
    75e4:	bc04      	pop	{r2}
    75e6:	4690      	mov	r8, r2
    75e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return STATUS_ERR_INVALID_ARG;
    75ea:	2017      	movs	r0, #23
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
    75ec:	4642      	mov	r2, r8
    75ee:	07d2      	lsls	r2, r2, #31
    75f0:	d4f7      	bmi.n	75e2 <tc_init+0x6e>
    75f2:	e7f1      	b.n	75d8 <tc_init+0x64>
	if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE) {
    75f4:	7aeb      	ldrb	r3, [r5, #11]
		return STATUS_ERR_DENIED;
    75f6:	3017      	adds	r0, #23
	if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE) {
    75f8:	079b      	lsls	r3, r3, #30
    75fa:	d4f2      	bmi.n	75e2 <tc_init+0x6e>
	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_ENABLE) {
    75fc:	682b      	ldr	r3, [r5, #0]
    75fe:	079b      	lsls	r3, r3, #30
    7600:	d4ef      	bmi.n	75e2 <tc_init+0x6e>
	if (config->pwm_channel[0].enabled) {
    7602:	7c33      	ldrb	r3, [r6, #16]
    7604:	2b00      	cmp	r3, #0
    7606:	d112      	bne.n	762e <tc_init+0xba>
	if (config->pwm_channel[1].enabled) {
    7608:	7f33      	ldrb	r3, [r6, #28]
    760a:	2b00      	cmp	r3, #0
    760c:	d11b      	bne.n	7646 <tc_init+0xd2>
	system_apb_clock_set_mask((enum system_clock_apb_bus)inst_mclk_apbmask[instance*2],
    760e:	4643      	mov	r3, r8
    7610:	005a      	lsls	r2, r3, #1
    7612:	a902      	add	r1, sp, #8
    7614:	1c53      	adds	r3, r2, #1
    7616:	009b      	lsls	r3, r3, #2
    7618:	5858      	ldr	r0, [r3, r1]
    761a:	4643      	mov	r3, r8
    761c:	00db      	lsls	r3, r3, #3
    761e:	585b      	ldr	r3, [r3, r1]
	switch (bus) {
    7620:	b2d9      	uxtb	r1, r3
    7622:	2904      	cmp	r1, #4
    7624:	d823      	bhi.n	766e <tc_init+0xfa>
    7626:	008b      	lsls	r3, r1, #2
    7628:	4988      	ldr	r1, [pc, #544]	; (784c <tc_init+0x2d8>)
    762a:	58cb      	ldr	r3, [r1, r3]
    762c:	469f      	mov	pc, r3
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    762e:	a901      	add	r1, sp, #4
    7630:	2301      	movs	r3, #1
    7632:	708b      	strb	r3, [r1, #2]
	config->powersave    = false;
    7634:	2200      	movs	r2, #0
    7636:	70ca      	strb	r2, [r1, #3]
		pin_config.mux_position = config->pwm_channel[0].pin_mux;
    7638:	7e32      	ldrb	r2, [r6, #24]
    763a:	700a      	strb	r2, [r1, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    763c:	704b      	strb	r3, [r1, #1]
		system_pinmux_pin_set_config(
    763e:	7d30      	ldrb	r0, [r6, #20]
    7640:	4b83      	ldr	r3, [pc, #524]	; (7850 <tc_init+0x2dc>)
    7642:	4798      	blx	r3
    7644:	e7e0      	b.n	7608 <tc_init+0x94>
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    7646:	a901      	add	r1, sp, #4
    7648:	2301      	movs	r3, #1
    764a:	708b      	strb	r3, [r1, #2]
	config->powersave    = false;
    764c:	2200      	movs	r2, #0
    764e:	70ca      	strb	r2, [r1, #3]
		pin_config.mux_position = config->pwm_channel[1].pin_mux;
    7650:	3224      	adds	r2, #36	; 0x24
    7652:	18b2      	adds	r2, r6, r2
    7654:	7812      	ldrb	r2, [r2, #0]
    7656:	700a      	strb	r2, [r1, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    7658:	704b      	strb	r3, [r1, #1]
		system_pinmux_pin_set_config(
    765a:	331f      	adds	r3, #31
    765c:	18f3      	adds	r3, r6, r3
    765e:	7818      	ldrb	r0, [r3, #0]
    7660:	4b7b      	ldr	r3, [pc, #492]	; (7850 <tc_init+0x2dc>)
    7662:	4798      	blx	r3
    7664:	e7d3      	b.n	760e <tc_init+0x9a>
			MCLK->APBAMASK.reg |= mask;
    7666:	497b      	ldr	r1, [pc, #492]	; (7854 <tc_init+0x2e0>)
    7668:	694b      	ldr	r3, [r1, #20]
    766a:	4318      	orrs	r0, r3
    766c:	6148      	str	r0, [r1, #20]
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) && (instance+1 < TC_INST_NUM))
    766e:	78f3      	ldrb	r3, [r6, #3]
    7670:	2b08      	cmp	r3, #8
    7672:	d100      	bne.n	7676 <tc_init+0x102>
    7674:	e086      	b.n	7784 <tc_init+0x210>
	gclk_chan_config.source_generator = config->clock_source;
    7676:	7833      	ldrb	r3, [r6, #0]
    7678:	466a      	mov	r2, sp
    767a:	7013      	strb	r3, [r2, #0]
	system_gclk_chan_set_config(inst_gclk_id[instance], &gclk_chan_config);
    767c:	ab0c      	add	r3, sp, #48	; 0x30
    767e:	4642      	mov	r2, r8
    7680:	5c9f      	ldrb	r7, [r3, r2]
    7682:	4669      	mov	r1, sp
    7684:	0038      	movs	r0, r7
    7686:	4b74      	ldr	r3, [pc, #464]	; (7858 <tc_init+0x2e4>)
    7688:	4798      	blx	r3
	system_gclk_chan_enable(inst_gclk_id[instance]);
    768a:	0038      	movs	r0, r7
    768c:	4b73      	ldr	r3, [pc, #460]	; (785c <tc_init+0x2e8>)
    768e:	4798      	blx	r3
			(uint32_t)config->counter_size |
    7690:	78f3      	ldrb	r3, [r6, #3]
    7692:	79f2      	ldrb	r2, [r6, #7]
    7694:	4313      	orrs	r3, r2
			(uint32_t)config->clock_prescaler;
    7696:	88b2      	ldrh	r2, [r6, #4]
	ctrla_tmp =
    7698:	4313      	orrs	r3, r2
		if (config->enable_capture_on_channel[i] == true) {
    769a:	7a72      	ldrb	r2, [r6, #9]
    769c:	2a00      	cmp	r2, #0
    769e:	d002      	beq.n	76a6 <tc_init+0x132>
			ctrla_tmp |= (TC_CTRLA_CAPTEN(1) << i);
    76a0:	2280      	movs	r2, #128	; 0x80
    76a2:	0252      	lsls	r2, r2, #9
    76a4:	4313      	orrs	r3, r2
		if (config->enable_capture_on_channel[i] == true) {
    76a6:	7ab2      	ldrb	r2, [r6, #10]
    76a8:	2a00      	cmp	r2, #0
    76aa:	d002      	beq.n	76b2 <tc_init+0x13e>
			ctrla_tmp |= (TC_CTRLA_CAPTEN(1) << i);
    76ac:	2280      	movs	r2, #128	; 0x80
    76ae:	0292      	lsls	r2, r2, #10
    76b0:	4313      	orrs	r3, r2
		if (config->enable_capture_on_IO[i] == true) {
    76b2:	7af2      	ldrb	r2, [r6, #11]
    76b4:	2a00      	cmp	r2, #0
    76b6:	d002      	beq.n	76be <tc_init+0x14a>
			ctrla_tmp |= (TC_CTRLA_COPEN(1) << i);
    76b8:	2280      	movs	r2, #128	; 0x80
    76ba:	0352      	lsls	r2, r2, #13
    76bc:	4313      	orrs	r3, r2
		if (config->enable_capture_on_IO[i] == true) {
    76be:	7b32      	ldrb	r2, [r6, #12]
    76c0:	2a00      	cmp	r2, #0
    76c2:	d002      	beq.n	76ca <tc_init+0x156>
			ctrla_tmp |= (TC_CTRLA_COPEN(1) << i);
    76c4:	2280      	movs	r2, #128	; 0x80
    76c6:	0392      	lsls	r2, r2, #14
    76c8:	4313      	orrs	r3, r2
	ctrla_tmp |= (config->run_in_standby << TC_CTRLA_RUNSTDBY_Pos)
    76ca:	7871      	ldrb	r1, [r6, #1]
    76cc:	0189      	lsls	r1, r1, #6
				|(config->on_demand << TC_CTRLA_ONDEMAND_Pos);
    76ce:	78b2      	ldrb	r2, [r6, #2]
    76d0:	01d2      	lsls	r2, r2, #7
    76d2:	4311      	orrs	r1, r2
	ctrla_tmp |= (config->run_in_standby << TC_CTRLA_RUNSTDBY_Pos)
    76d4:	4319      	orrs	r1, r3
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    76d6:	6822      	ldr	r2, [r4, #0]

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30) || (SAMR34) || (SAMR35) || (WLR089)
	return (tc_module->SYNCBUSY.reg);
    76d8:	6913      	ldr	r3, [r2, #16]
	while (tc_is_syncing(module_inst)) {
    76da:	2b00      	cmp	r3, #0
    76dc:	d1fc      	bne.n	76d8 <tc_init+0x164>
	hw->COUNT8.CTRLA.reg = ctrla_tmp;
    76de:	6029      	str	r1, [r5, #0]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    76e0:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    76e2:	6913      	ldr	r3, [r2, #16]
	while (tc_is_syncing(module_inst)) {
    76e4:	2b00      	cmp	r3, #0
    76e6:	d1fc      	bne.n	76e2 <tc_init+0x16e>
	hw->COUNT8.WAVE.reg = config->wave_generation;
    76e8:	79b3      	ldrb	r3, [r6, #6]
    76ea:	732b      	strb	r3, [r5, #12]
	if (config->oneshot) {
    76ec:	7b71      	ldrb	r1, [r6, #13]
		ctrlbset_tmp = TC_CTRLBSET_ONESHOT;
    76ee:	1e4b      	subs	r3, r1, #1
    76f0:	4199      	sbcs	r1, r3
    76f2:	0089      	lsls	r1, r1, #2
	if (config->count_direction) {
    76f4:	7bb3      	ldrb	r3, [r6, #14]
    76f6:	2b00      	cmp	r3, #0
    76f8:	d001      	beq.n	76fe <tc_init+0x18a>
		ctrlbset_tmp |= TC_CTRLBSET_DIR;
    76fa:	2301      	movs	r3, #1
    76fc:	4319      	orrs	r1, r3
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    76fe:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    7700:	6913      	ldr	r3, [r2, #16]
	while (tc_is_syncing(module_inst)) {
    7702:	2b00      	cmp	r3, #0
    7704:	d1fc      	bne.n	7700 <tc_init+0x18c>
	hw->COUNT8.CTRLBCLR.reg = 0xFF;
    7706:	33ff      	adds	r3, #255	; 0xff
    7708:	712b      	strb	r3, [r5, #4]
	if (ctrlbset_tmp) {
    770a:	2900      	cmp	r1, #0
    770c:	d004      	beq.n	7718 <tc_init+0x1a4>
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    770e:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    7710:	6913      	ldr	r3, [r2, #16]
		while (tc_is_syncing(module_inst)) {
    7712:	2b00      	cmp	r3, #0
    7714:	d1fc      	bne.n	7710 <tc_init+0x19c>
		hw->COUNT8.CTRLBSET.reg = ctrlbset_tmp;
    7716:	7169      	strb	r1, [r5, #5]
	hw->COUNT8.DRVCTRL.reg = config->waveform_invert_output;
    7718:	7a33      	ldrb	r3, [r6, #8]
    771a:	736b      	strb	r3, [r5, #13]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    771c:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    771e:	6913      	ldr	r3, [r2, #16]
	while (tc_is_syncing(module_inst)) {
    7720:	2b00      	cmp	r3, #0
    7722:	d1fc      	bne.n	771e <tc_init+0x1aa>
	switch (module_inst->counter_size) {
    7724:	7923      	ldrb	r3, [r4, #4]
    7726:	2b04      	cmp	r3, #4
    7728:	d059      	beq.n	77de <tc_init+0x26a>
    772a:	2b08      	cmp	r3, #8
    772c:	d074      	beq.n	7818 <tc_init+0x2a4>
	return STATUS_ERR_INVALID_ARG;
    772e:	2017      	movs	r0, #23
	switch (module_inst->counter_size) {
    7730:	2b00      	cmp	r3, #0
    7732:	d000      	beq.n	7736 <tc_init+0x1c2>
    7734:	e755      	b.n	75e2 <tc_init+0x6e>
    7736:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
    7738:	2b00      	cmp	r3, #0
    773a:	d1fc      	bne.n	7736 <tc_init+0x1c2>
				= config->counter_16_bit.value;
    773c:	8d33      	ldrh	r3, [r6, #40]	; 0x28
    773e:	82ab      	strh	r3, [r5, #20]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    7740:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    7742:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
    7744:	2b00      	cmp	r3, #0
    7746:	d1fc      	bne.n	7742 <tc_init+0x1ce>
					config->counter_16_bit.compare_capture_channel[0];
    7748:	8d73      	ldrh	r3, [r6, #42]	; 0x2a
			hw->COUNT16.CC[0].reg =
    774a:	83ab      	strh	r3, [r5, #28]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    774c:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    774e:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
    7750:	2b00      	cmp	r3, #0
    7752:	d1fc      	bne.n	774e <tc_init+0x1da>
					config->counter_16_bit.compare_capture_channel[1];
    7754:	8db3      	ldrh	r3, [r6, #44]	; 0x2c
			hw->COUNT16.CC[1].reg =
    7756:	83eb      	strh	r3, [r5, #30]
			return STATUS_OK;
    7758:	2000      	movs	r0, #0
    775a:	e742      	b.n	75e2 <tc_init+0x6e>
			MCLK->APBBMASK.reg |= mask;
    775c:	493d      	ldr	r1, [pc, #244]	; (7854 <tc_init+0x2e0>)
    775e:	698b      	ldr	r3, [r1, #24]
    7760:	4318      	orrs	r0, r3
    7762:	6188      	str	r0, [r1, #24]
    7764:	e783      	b.n	766e <tc_init+0xfa>
			MCLK->APBCMASK.reg |= mask;
    7766:	493b      	ldr	r1, [pc, #236]	; (7854 <tc_init+0x2e0>)
    7768:	69cb      	ldr	r3, [r1, #28]
    776a:	4318      	orrs	r0, r3
    776c:	61c8      	str	r0, [r1, #28]
    776e:	e77e      	b.n	766e <tc_init+0xfa>
			MCLK->APBDMASK.reg |= mask;
    7770:	4938      	ldr	r1, [pc, #224]	; (7854 <tc_init+0x2e0>)
    7772:	6a0b      	ldr	r3, [r1, #32]
    7774:	4318      	orrs	r0, r3
    7776:	6208      	str	r0, [r1, #32]
    7778:	e779      	b.n	766e <tc_init+0xfa>
			MCLK->APBEMASK.reg |= mask;
    777a:	4b36      	ldr	r3, [pc, #216]	; (7854 <tc_init+0x2e0>)
    777c:	6a59      	ldr	r1, [r3, #36]	; 0x24
    777e:	4308      	orrs	r0, r1
    7780:	6258      	str	r0, [r3, #36]	; 0x24
    7782:	e774      	b.n	766e <tc_init+0xfa>
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) && (instance+1 < TC_INST_NUM))
    7784:	4643      	mov	r3, r8
    7786:	3301      	adds	r3, #1
    7788:	2b04      	cmp	r3, #4
    778a:	dd00      	ble.n	778e <tc_init+0x21a>
    778c:	e773      	b.n	7676 <tc_init+0x102>
		system_apb_clock_set_mask((enum system_clock_apb_bus)inst_mclk_apbmask[(instance+1)*2],
    778e:	ab02      	add	r3, sp, #8
    7790:	1cd1      	adds	r1, r2, #3
    7792:	0089      	lsls	r1, r1, #2
    7794:	58c9      	ldr	r1, [r1, r3]
    7796:	3202      	adds	r2, #2
    7798:	0092      	lsls	r2, r2, #2
    779a:	58d3      	ldr	r3, [r2, r3]
	switch (bus) {
    779c:	b2da      	uxtb	r2, r3
    779e:	2a04      	cmp	r2, #4
    77a0:	d900      	bls.n	77a4 <tc_init+0x230>
    77a2:	e768      	b.n	7676 <tc_init+0x102>
    77a4:	0093      	lsls	r3, r2, #2
    77a6:	4a2e      	ldr	r2, [pc, #184]	; (7860 <tc_init+0x2ec>)
    77a8:	58d3      	ldr	r3, [r2, r3]
    77aa:	469f      	mov	pc, r3
			MCLK->APBAMASK.reg |= mask;
    77ac:	4a29      	ldr	r2, [pc, #164]	; (7854 <tc_init+0x2e0>)
    77ae:	6953      	ldr	r3, [r2, #20]
    77b0:	4319      	orrs	r1, r3
    77b2:	6151      	str	r1, [r2, #20]
    77b4:	e75f      	b.n	7676 <tc_init+0x102>
			MCLK->APBBMASK.reg |= mask;
    77b6:	4a27      	ldr	r2, [pc, #156]	; (7854 <tc_init+0x2e0>)
    77b8:	6993      	ldr	r3, [r2, #24]
    77ba:	4319      	orrs	r1, r3
    77bc:	6191      	str	r1, [r2, #24]
    77be:	e75a      	b.n	7676 <tc_init+0x102>
			MCLK->APBCMASK.reg |= mask;
    77c0:	4a24      	ldr	r2, [pc, #144]	; (7854 <tc_init+0x2e0>)
    77c2:	69d3      	ldr	r3, [r2, #28]
    77c4:	4319      	orrs	r1, r3
    77c6:	61d1      	str	r1, [r2, #28]
    77c8:	e755      	b.n	7676 <tc_init+0x102>
			MCLK->APBDMASK.reg |= mask;
    77ca:	4a22      	ldr	r2, [pc, #136]	; (7854 <tc_init+0x2e0>)
    77cc:	6a13      	ldr	r3, [r2, #32]
    77ce:	4319      	orrs	r1, r3
    77d0:	6211      	str	r1, [r2, #32]
    77d2:	e750      	b.n	7676 <tc_init+0x102>
			MCLK->APBEMASK.reg |= mask;
    77d4:	4b1f      	ldr	r3, [pc, #124]	; (7854 <tc_init+0x2e0>)
    77d6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    77d8:	4311      	orrs	r1, r2
    77da:	6259      	str	r1, [r3, #36]	; 0x24
    77dc:	e74b      	b.n	7676 <tc_init+0x102>
    77de:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
    77e0:	2b00      	cmp	r3, #0
    77e2:	d1fc      	bne.n	77de <tc_init+0x26a>
					config->counter_8_bit.value;
    77e4:	3328      	adds	r3, #40	; 0x28
    77e6:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.COUNT.reg =
    77e8:	752b      	strb	r3, [r5, #20]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    77ea:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    77ec:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
    77ee:	2b00      	cmp	r3, #0
    77f0:	d1fc      	bne.n	77ec <tc_init+0x278>
					config->counter_8_bit.period;
    77f2:	3329      	adds	r3, #41	; 0x29
    77f4:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.PER.reg =
    77f6:	76eb      	strb	r3, [r5, #27]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    77f8:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    77fa:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
    77fc:	2b00      	cmp	r3, #0
    77fe:	d1fc      	bne.n	77fa <tc_init+0x286>
					config->counter_8_bit.compare_capture_channel[0];
    7800:	332a      	adds	r3, #42	; 0x2a
    7802:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.CC[0].reg =
    7804:	772b      	strb	r3, [r5, #28]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    7806:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    7808:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
    780a:	2b00      	cmp	r3, #0
    780c:	d1fc      	bne.n	7808 <tc_init+0x294>
					config->counter_8_bit.compare_capture_channel[1];
    780e:	332b      	adds	r3, #43	; 0x2b
    7810:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.CC[1].reg =
    7812:	776b      	strb	r3, [r5, #29]
			return STATUS_OK;
    7814:	2000      	movs	r0, #0
    7816:	e6e4      	b.n	75e2 <tc_init+0x6e>
    7818:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
    781a:	2b00      	cmp	r3, #0
    781c:	d1fc      	bne.n	7818 <tc_init+0x2a4>
				= config->counter_32_bit.value;
    781e:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    7820:	616b      	str	r3, [r5, #20]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    7822:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    7824:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
    7826:	2b00      	cmp	r3, #0
    7828:	d1fc      	bne.n	7824 <tc_init+0x2b0>
			hw->COUNT32.CC[0].reg =
    782a:	6af3      	ldr	r3, [r6, #44]	; 0x2c
    782c:	61eb      	str	r3, [r5, #28]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    782e:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    7830:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
    7832:	2b00      	cmp	r3, #0
    7834:	d1fc      	bne.n	7830 <tc_init+0x2bc>
					config->counter_32_bit.compare_capture_channel[1];
    7836:	6b33      	ldr	r3, [r6, #48]	; 0x30
			hw->COUNT32.CC[1].reg =
    7838:	622b      	str	r3, [r5, #32]
			return STATUS_OK;
    783a:	2000      	movs	r0, #0
    783c:	e6d1      	b.n	75e2 <tc_init+0x6e>
    783e:	46c0      	nop			; (mov r8, r8)
    7840:	00007539 	.word	0x00007539
    7844:	0001fc58 	.word	0x0001fc58
    7848:	20002250 	.word	0x20002250
    784c:	0001fc30 	.word	0x0001fc30
    7850:	000073f1 	.word	0x000073f1
    7854:	40000400 	.word	0x40000400
    7858:	000072c5 	.word	0x000072c5
    785c:	00007255 	.word	0x00007255
    7860:	0001fc44 	.word	0x0001fc44

00007864 <tc_get_count_value>:
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    7864:	6802      	ldr	r2, [r0, #0]
	return (tc_module->SYNCBUSY.reg);
    7866:	6913      	ldr	r3, [r2, #16]

	while (tc_is_syncing(module_inst)) {
    7868:	2b00      	cmp	r3, #0
    786a:	d1fc      	bne.n	7866 <tc_get_count_value+0x2>
		/* Wait for sync */
	}

	/* Make certain that there are no conflicting commands in the register */
	tc_module->CTRLBCLR.reg = TC_CTRLBCLR_CMD_NONE;
    786c:	7113      	strb	r3, [r2, #4]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    786e:	6801      	ldr	r1, [r0, #0]
	return (tc_module->SYNCBUSY.reg);
    7870:	690b      	ldr	r3, [r1, #16]

	while (tc_is_syncing(module_inst)) {
    7872:	2b00      	cmp	r3, #0
    7874:	d1fc      	bne.n	7870 <tc_get_count_value+0xc>
		/* Wait for sync */
	}

	/* Write command to execute */
	tc_module->CTRLBSET.reg = TC_CTRLBSET_CMD(TC_CTRLBSET_CMD_READSYNC_Val);
    7876:	3380      	adds	r3, #128	; 0x80
    7878:	7153      	strb	r3, [r2, #5]

	/* Read synchronization */
	tc_sync_read_count(module_inst);
	
	/* Get a pointer to the module's hardware instance */
	Tc *const tc_module = module_inst->hw;
    787a:	6802      	ldr	r2, [r0, #0]
	return (tc_module->SYNCBUSY.reg);
    787c:	6913      	ldr	r3, [r2, #16]

	while (tc_is_syncing(module_inst)) {
    787e:	2b00      	cmp	r3, #0
    7880:	d1fc      	bne.n	787c <tc_get_count_value+0x18>
		/* Wait for sync */
	}

	/* Read from based on the TC counter size */
	switch (module_inst->counter_size) {
    7882:	7903      	ldrb	r3, [r0, #4]
    7884:	2b04      	cmp	r3, #4
    7886:	d005      	beq.n	7894 <tc_get_count_value+0x30>
    7888:	2b08      	cmp	r3, #8
    788a:	d009      	beq.n	78a0 <tc_get_count_value+0x3c>
		case TC_COUNTER_SIZE_32BIT:
			return tc_module->COUNT32.COUNT.reg;
	}

	Assert(false);
	return 0;
    788c:	2000      	movs	r0, #0
	switch (module_inst->counter_size) {
    788e:	2b00      	cmp	r3, #0
    7890:	d003      	beq.n	789a <tc_get_count_value+0x36>
}
    7892:	4770      	bx	lr
			return (uint32_t)tc_module->COUNT8.COUNT.reg;
    7894:	7d10      	ldrb	r0, [r2, #20]
    7896:	b2c0      	uxtb	r0, r0
    7898:	e7fb      	b.n	7892 <tc_get_count_value+0x2e>
			return (uint32_t)tc_module->COUNT16.COUNT.reg;
    789a:	8a90      	ldrh	r0, [r2, #20]
    789c:	b280      	uxth	r0, r0
    789e:	e7f8      	b.n	7892 <tc_get_count_value+0x2e>
			return tc_module->COUNT32.COUNT.reg;
    78a0:	6950      	ldr	r0, [r2, #20]
    78a2:	e7f6      	b.n	7892 <tc_get_count_value+0x2e>

000078a4 <tc_set_compare_value>:
 */
enum status_code tc_set_compare_value(
		const struct tc_module *const module_inst,
		const enum tc_compare_capture_channel channel_index,
		const uint32_t compare)
{
    78a4:	b510      	push	{r4, lr}
	Assert(module_inst);
	Assert(module_inst->hw);
	Assert(compare);

	/* Get a pointer to the module's hardware instance */
	Tc *const tc_module = module_inst->hw;
    78a6:	6804      	ldr	r4, [r0, #0]
    78a8:	6923      	ldr	r3, [r4, #16]

	while (tc_is_syncing(module_inst)) {
    78aa:	2b00      	cmp	r3, #0
    78ac:	d1fc      	bne.n	78a8 <tc_set_compare_value+0x4>
		/* Wait for sync */
	}

	/* Read out based on the TC counter size */
	switch (module_inst->counter_size) {
    78ae:	7903      	ldrb	r3, [r0, #4]
    78b0:	2b04      	cmp	r3, #4
    78b2:	d006      	beq.n	78c2 <tc_set_compare_value+0x1e>
    78b4:	2b08      	cmp	r3, #8
    78b6:	d028      	beq.n	790a <tc_set_compare_value+0x66>
    78b8:	2b00      	cmp	r3, #0
    78ba:	d013      	beq.n	78e4 <tc_set_compare_value+0x40>
				}
				return STATUS_OK;
			}
	}

	return STATUS_ERR_INVALID_ARG;
    78bc:	2317      	movs	r3, #23
}
    78be:	0018      	movs	r0, r3
    78c0:	bd10      	pop	{r4, pc}
	return STATUS_ERR_INVALID_ARG;
    78c2:	2317      	movs	r3, #23
			if (channel_index <
    78c4:	2901      	cmp	r1, #1
    78c6:	d8fa      	bhi.n	78be <tc_set_compare_value+0x1a>
				if (module_inst->double_buffering_enabled){
    78c8:	7e83      	ldrb	r3, [r0, #26]
    78ca:	2b00      	cmp	r3, #0
    78cc:	d005      	beq.n	78da <tc_set_compare_value+0x36>
							(uint8_t)compare;
    78ce:	b2d2      	uxtb	r2, r2
					tc_module->COUNT8.CCBUF[channel_index].reg =
    78d0:	1861      	adds	r1, r4, r1
    78d2:	3130      	adds	r1, #48	; 0x30
    78d4:	700a      	strb	r2, [r1, #0]
				return STATUS_OK;
    78d6:	2300      	movs	r3, #0
    78d8:	e7f1      	b.n	78be <tc_set_compare_value+0x1a>
							(uint8_t)compare;
    78da:	b2d2      	uxtb	r2, r2
					tc_module->COUNT8.CC[channel_index].reg  =
    78dc:	1864      	adds	r4, r4, r1
    78de:	7722      	strb	r2, [r4, #28]
				return STATUS_OK;
    78e0:	2300      	movs	r3, #0
    78e2:	e7ec      	b.n	78be <tc_set_compare_value+0x1a>
	return STATUS_ERR_INVALID_ARG;
    78e4:	2317      	movs	r3, #23
			if (channel_index <
    78e6:	2901      	cmp	r1, #1
    78e8:	d8e9      	bhi.n	78be <tc_set_compare_value+0x1a>
				if (module_inst->double_buffering_enabled){
    78ea:	7e83      	ldrb	r3, [r0, #26]
    78ec:	2b00      	cmp	r3, #0
    78ee:	d005      	beq.n	78fc <tc_set_compare_value+0x58>
							(uint16_t)compare;
    78f0:	b292      	uxth	r2, r2
					tc_module->COUNT16.CCBUF[channel_index].reg =
    78f2:	3118      	adds	r1, #24
    78f4:	0049      	lsls	r1, r1, #1
    78f6:	530a      	strh	r2, [r1, r4]
				return STATUS_OK;
    78f8:	2300      	movs	r3, #0
    78fa:	e7e0      	b.n	78be <tc_set_compare_value+0x1a>
							(uint16_t)compare;
    78fc:	b292      	uxth	r2, r2
					tc_module->COUNT16.CC[channel_index].reg =
    78fe:	310c      	adds	r1, #12
    7900:	0049      	lsls	r1, r1, #1
    7902:	1864      	adds	r4, r4, r1
    7904:	80a2      	strh	r2, [r4, #4]
				return STATUS_OK;
    7906:	2300      	movs	r3, #0
    7908:	e7d9      	b.n	78be <tc_set_compare_value+0x1a>
	return STATUS_ERR_INVALID_ARG;
    790a:	2317      	movs	r3, #23
			if (channel_index <
    790c:	2901      	cmp	r1, #1
    790e:	d8d6      	bhi.n	78be <tc_set_compare_value+0x1a>
				if (module_inst->double_buffering_enabled){
    7910:	7e83      	ldrb	r3, [r0, #26]
    7912:	2b00      	cmp	r3, #0
    7914:	d105      	bne.n	7922 <tc_set_compare_value+0x7e>
					tc_module->COUNT32.CC[channel_index].reg =
    7916:	3106      	adds	r1, #6
    7918:	0089      	lsls	r1, r1, #2
    791a:	1864      	adds	r4, r4, r1
    791c:	6062      	str	r2, [r4, #4]
				return STATUS_OK;
    791e:	2300      	movs	r3, #0
    7920:	e7cd      	b.n	78be <tc_set_compare_value+0x1a>
					tc_module->COUNT32.CCBUF[channel_index].reg =
    7922:	310c      	adds	r1, #12
    7924:	0089      	lsls	r1, r1, #2
    7926:	510a      	str	r2, [r1, r4]
				return STATUS_OK;
    7928:	2300      	movs	r3, #0
    792a:	e7c8      	b.n	78be <tc_set_compare_value+0x1a>

0000792c <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    792c:	e7fe      	b.n	792c <Dummy_Handler>
	...

00007930 <Reset_Handler>:
{
    7930:	b510      	push	{r4, lr}
        if (pSrc != pDest) {
    7932:	4a1a      	ldr	r2, [pc, #104]	; (799c <Reset_Handler+0x6c>)
    7934:	4b1a      	ldr	r3, [pc, #104]	; (79a0 <Reset_Handler+0x70>)
    7936:	429a      	cmp	r2, r3
    7938:	d011      	beq.n	795e <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
    793a:	001a      	movs	r2, r3
    793c:	4b19      	ldr	r3, [pc, #100]	; (79a4 <Reset_Handler+0x74>)
    793e:	429a      	cmp	r2, r3
    7940:	d20d      	bcs.n	795e <Reset_Handler+0x2e>
    7942:	4a19      	ldr	r2, [pc, #100]	; (79a8 <Reset_Handler+0x78>)
    7944:	3303      	adds	r3, #3
    7946:	1a9b      	subs	r3, r3, r2
    7948:	089b      	lsrs	r3, r3, #2
    794a:	3301      	adds	r3, #1
    794c:	009b      	lsls	r3, r3, #2
    794e:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    7950:	4813      	ldr	r0, [pc, #76]	; (79a0 <Reset_Handler+0x70>)
    7952:	4912      	ldr	r1, [pc, #72]	; (799c <Reset_Handler+0x6c>)
    7954:	588c      	ldr	r4, [r1, r2]
    7956:	5084      	str	r4, [r0, r2]
    7958:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
    795a:	429a      	cmp	r2, r3
    795c:	d1fa      	bne.n	7954 <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
    795e:	4a13      	ldr	r2, [pc, #76]	; (79ac <Reset_Handler+0x7c>)
    7960:	4b13      	ldr	r3, [pc, #76]	; (79b0 <Reset_Handler+0x80>)
    7962:	429a      	cmp	r2, r3
    7964:	d20a      	bcs.n	797c <Reset_Handler+0x4c>
    7966:	43d3      	mvns	r3, r2
    7968:	4911      	ldr	r1, [pc, #68]	; (79b0 <Reset_Handler+0x80>)
    796a:	185b      	adds	r3, r3, r1
    796c:	2103      	movs	r1, #3
    796e:	438b      	bics	r3, r1
    7970:	3304      	adds	r3, #4
    7972:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
    7974:	2100      	movs	r1, #0
    7976:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
    7978:	4293      	cmp	r3, r2
    797a:	d1fc      	bne.n	7976 <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    797c:	4a0d      	ldr	r2, [pc, #52]	; (79b4 <Reset_Handler+0x84>)
    797e:	21ff      	movs	r1, #255	; 0xff
    7980:	4b0d      	ldr	r3, [pc, #52]	; (79b8 <Reset_Handler+0x88>)
    7982:	438b      	bics	r3, r1
    7984:	6093      	str	r3, [r2, #8]
        NVMCTRL->CTRLB.bit.MANW = 1;
    7986:	4a0d      	ldr	r2, [pc, #52]	; (79bc <Reset_Handler+0x8c>)
    7988:	6853      	ldr	r3, [r2, #4]
    798a:	397f      	subs	r1, #127	; 0x7f
    798c:	430b      	orrs	r3, r1
    798e:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    7990:	4b0b      	ldr	r3, [pc, #44]	; (79c0 <Reset_Handler+0x90>)
    7992:	4798      	blx	r3
        main();
    7994:	4b0b      	ldr	r3, [pc, #44]	; (79c4 <Reset_Handler+0x94>)
    7996:	4798      	blx	r3
    7998:	e7fe      	b.n	7998 <Reset_Handler+0x68>
    799a:	46c0      	nop			; (mov r8, r8)
    799c:	000209b8 	.word	0x000209b8
    79a0:	20000000 	.word	0x20000000
    79a4:	200009c8 	.word	0x200009c8
    79a8:	20000004 	.word	0x20000004
    79ac:	200009c8 	.word	0x200009c8
    79b0:	20002fe8 	.word	0x20002fe8
    79b4:	e000ed00 	.word	0xe000ed00
    79b8:	00000000 	.word	0x00000000
    79bc:	41004000 	.word	0x41004000
    79c0:	000196d9 	.word	0x000196d9
    79c4:	0000fa9d 	.word	0x0000fa9d

000079c8 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
    79c8:	b5f0      	push	{r4, r5, r6, r7, lr}
    79ca:	46c6      	mov	lr, r8
    79cc:	b500      	push	{lr}
    79ce:	000c      	movs	r4, r1
    79d0:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
    79d2:	2800      	cmp	r0, #0
    79d4:	d10f      	bne.n	79f6 <_read+0x2e>
		return -1;
	}

	for (; len > 0; --len) {
    79d6:	2a00      	cmp	r2, #0
    79d8:	dd11      	ble.n	79fe <_read+0x36>
    79da:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
    79dc:	4e09      	ldr	r6, [pc, #36]	; (7a04 <_read+0x3c>)
    79de:	4d0a      	ldr	r5, [pc, #40]	; (7a08 <_read+0x40>)
    79e0:	6830      	ldr	r0, [r6, #0]
    79e2:	0021      	movs	r1, r4
    79e4:	682b      	ldr	r3, [r5, #0]
    79e6:	4798      	blx	r3
		ptr++;
    79e8:	3401      	adds	r4, #1
	for (; len > 0; --len) {
    79ea:	42bc      	cmp	r4, r7
    79ec:	d1f8      	bne.n	79e0 <_read+0x18>
		nChars++;
	}
	return nChars;
}
    79ee:	4640      	mov	r0, r8
    79f0:	bc04      	pop	{r2}
    79f2:	4690      	mov	r8, r2
    79f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -1;
    79f6:	2301      	movs	r3, #1
    79f8:	425b      	negs	r3, r3
    79fa:	4698      	mov	r8, r3
    79fc:	e7f7      	b.n	79ee <_read+0x26>
	for (; len > 0; --len) {
    79fe:	4680      	mov	r8, r0
    7a00:	e7f5      	b.n	79ee <_read+0x26>
    7a02:	46c0      	nop			; (mov r8, r8)
    7a04:	2000226c 	.word	0x2000226c
    7a08:	20002264 	.word	0x20002264

00007a0c <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
    7a0c:	b5f0      	push	{r4, r5, r6, r7, lr}
    7a0e:	46c6      	mov	lr, r8
    7a10:	b500      	push	{lr}
    7a12:	000e      	movs	r6, r1
    7a14:	0015      	movs	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
    7a16:	3801      	subs	r0, #1
    7a18:	2802      	cmp	r0, #2
    7a1a:	d810      	bhi.n	7a3e <_write+0x32>
		return -1;
	}

	for (; len != 0; --len) {
    7a1c:	2a00      	cmp	r2, #0
    7a1e:	d011      	beq.n	7a44 <_write+0x38>
    7a20:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
    7a22:	4b0c      	ldr	r3, [pc, #48]	; (7a54 <_write+0x48>)
    7a24:	4698      	mov	r8, r3
    7a26:	4f0c      	ldr	r7, [pc, #48]	; (7a58 <_write+0x4c>)
    7a28:	4643      	mov	r3, r8
    7a2a:	6818      	ldr	r0, [r3, #0]
    7a2c:	5d31      	ldrb	r1, [r6, r4]
    7a2e:	683b      	ldr	r3, [r7, #0]
    7a30:	4798      	blx	r3
    7a32:	2800      	cmp	r0, #0
    7a34:	db08      	blt.n	7a48 <_write+0x3c>
			return -1;
		}
		++nChars;
    7a36:	3401      	adds	r4, #1
	for (; len != 0; --len) {
    7a38:	42a5      	cmp	r5, r4
    7a3a:	d1f5      	bne.n	7a28 <_write+0x1c>
    7a3c:	e006      	b.n	7a4c <_write+0x40>
		return -1;
    7a3e:	2401      	movs	r4, #1
    7a40:	4264      	negs	r4, r4
    7a42:	e003      	b.n	7a4c <_write+0x40>
	for (; len != 0; --len) {
    7a44:	0014      	movs	r4, r2
    7a46:	e001      	b.n	7a4c <_write+0x40>
			return -1;
    7a48:	2401      	movs	r4, #1
    7a4a:	4264      	negs	r4, r4
	}
	return nChars;
}
    7a4c:	0020      	movs	r0, r4
    7a4e:	bc04      	pop	{r2}
    7a50:	4690      	mov	r8, r2
    7a52:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7a54:	2000226c 	.word	0x2000226c
    7a58:	20002268 	.word	0x20002268

00007a5c <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    7a5c:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    7a5e:	4a06      	ldr	r2, [pc, #24]	; (7a78 <_sbrk+0x1c>)
    7a60:	6812      	ldr	r2, [r2, #0]
    7a62:	2a00      	cmp	r2, #0
    7a64:	d004      	beq.n	7a70 <_sbrk+0x14>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
    7a66:	4a04      	ldr	r2, [pc, #16]	; (7a78 <_sbrk+0x1c>)
    7a68:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    7a6a:	18c3      	adds	r3, r0, r3
    7a6c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
    7a6e:	4770      	bx	lr
		heap = (unsigned char *)&_end;
    7a70:	4902      	ldr	r1, [pc, #8]	; (7a7c <_sbrk+0x20>)
    7a72:	4a01      	ldr	r2, [pc, #4]	; (7a78 <_sbrk+0x1c>)
    7a74:	6011      	str	r1, [r2, #0]
    7a76:	e7f6      	b.n	7a66 <_sbrk+0xa>
    7a78:	20000b9c 	.word	0x20000b9c
    7a7c:	20004fe8 	.word	0x20004fe8

00007a80 <_close>:
}

extern int _close(int file)
{
	return -1;
}
    7a80:	2001      	movs	r0, #1
    7a82:	4240      	negs	r0, r0
    7a84:	4770      	bx	lr

00007a86 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
    7a86:	2380      	movs	r3, #128	; 0x80
    7a88:	019b      	lsls	r3, r3, #6
    7a8a:	604b      	str	r3, [r1, #4]

	return 0;
}
    7a8c:	2000      	movs	r0, #0
    7a8e:	4770      	bx	lr

00007a90 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
    7a90:	2001      	movs	r0, #1
    7a92:	4770      	bx	lr

00007a94 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
    7a94:	2000      	movs	r0, #0
    7a96:	4770      	bx	lr

00007a98 <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct usart_module *const module,
		uint8_t *c)
{
    7a98:	b570      	push	{r4, r5, r6, lr}
    7a9a:	b082      	sub	sp, #8
    7a9c:	0005      	movs	r5, r0
    7a9e:	000e      	movs	r6, r1
	uint16_t temp = 0;
    7aa0:	2200      	movs	r2, #0
    7aa2:	466b      	mov	r3, sp
    7aa4:	80da      	strh	r2, [r3, #6]

	while(STATUS_OK != usart_read_wait(module, &temp));
    7aa6:	4c06      	ldr	r4, [pc, #24]	; (7ac0 <usart_serial_getchar+0x28>)
    7aa8:	466b      	mov	r3, sp
    7aaa:	1d99      	adds	r1, r3, #6
    7aac:	0028      	movs	r0, r5
    7aae:	47a0      	blx	r4
    7ab0:	2800      	cmp	r0, #0
    7ab2:	d1f9      	bne.n	7aa8 <usart_serial_getchar+0x10>

	*c = temp;
    7ab4:	466b      	mov	r3, sp
    7ab6:	3306      	adds	r3, #6
    7ab8:	881b      	ldrh	r3, [r3, #0]
    7aba:	7033      	strb	r3, [r6, #0]
}
    7abc:	b002      	add	sp, #8
    7abe:	bd70      	pop	{r4, r5, r6, pc}
    7ac0:	0000682b 	.word	0x0000682b

00007ac4 <usart_serial_putchar>:
{
    7ac4:	b570      	push	{r4, r5, r6, lr}
    7ac6:	0005      	movs	r5, r0
	while(STATUS_OK !=usart_write_wait(module, c));
    7ac8:	b28c      	uxth	r4, r1
    7aca:	4e03      	ldr	r6, [pc, #12]	; (7ad8 <usart_serial_putchar+0x14>)
    7acc:	0021      	movs	r1, r4
    7ace:	0028      	movs	r0, r5
    7ad0:	47b0      	blx	r6
    7ad2:	2800      	cmp	r0, #0
    7ad4:	d1fa      	bne.n	7acc <usart_serial_putchar+0x8>
}
    7ad6:	bd70      	pop	{r4, r5, r6, pc}
    7ad8:	00006805 	.word	0x00006805

00007adc <USART_HOST_ISR_VECT>:
#if SAMD || SAMR21 || SAML21 || SAMR30 || SAMR34 || SAMR35 || WLR089
void USART_HOST_ISR_VECT(uint8_t instance)
#else
USART_HOST_ISR_VECT()
#endif
{
    7adc:	b510      	push	{r4, lr}
    7ade:	b082      	sub	sp, #8
static inline enum status_code usart_serial_read_packet(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
	return usart_read_buffer_wait(module, rx_data, length);
    7ae0:	466b      	mov	r3, sp
    7ae2:	1ddc      	adds	r4, r3, #7
    7ae4:	2201      	movs	r2, #1
    7ae6:	0021      	movs	r1, r4
    7ae8:	480f      	ldr	r0, [pc, #60]	; (7b28 <USART_HOST_ISR_VECT+0x4c>)
    7aea:	4b10      	ldr	r3, [pc, #64]	; (7b2c <USART_HOST_ISR_VECT+0x50>)
    7aec:	4798      	blx	r3
  __ASM volatile ("cpsid i" : : : "memory");
    7aee:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
    7af0:	f3bf 8f5f 	dmb	sy
#else
    usart_serial_read_packet(USART_HOST, &temp, 1);
#endif

	/* Introducing critical section to avoid buffer corruption. */
	cpu_irq_disable();
    7af4:	2200      	movs	r2, #0
    7af6:	4b0e      	ldr	r3, [pc, #56]	; (7b30 <USART_HOST_ISR_VECT+0x54>)
    7af8:	701a      	strb	r2, [r3, #0]

	/* The number of data in the receive buffer is incremented and the
	 * buffer is updated. */

	serial_rx_buf[serial_rx_buf_tail] = temp;
    7afa:	4b0e      	ldr	r3, [pc, #56]	; (7b34 <USART_HOST_ISR_VECT+0x58>)
    7afc:	781b      	ldrb	r3, [r3, #0]
    7afe:	7821      	ldrb	r1, [r4, #0]
    7b00:	4a0d      	ldr	r2, [pc, #52]	; (7b38 <USART_HOST_ISR_VECT+0x5c>)
    7b02:	54d1      	strb	r1, [r2, r3]

	if ((SERIAL_RX_BUF_SIZE_HOST - 1) == serial_rx_buf_tail) {
    7b04:	2b7f      	cmp	r3, #127	; 0x7f
    7b06:	d00a      	beq.n	7b1e <USART_HOST_ISR_VECT+0x42>
		/* Reached the end of buffer, revert back to beginning of
		 * buffer. */
		serial_rx_buf_tail = 0x00;
	} else {
		serial_rx_buf_tail++;
    7b08:	3301      	adds	r3, #1
    7b0a:	4a0a      	ldr	r2, [pc, #40]	; (7b34 <USART_HOST_ISR_VECT+0x58>)
    7b0c:	7013      	strb	r3, [r2, #0]
	}

	cpu_irq_enable();
    7b0e:	2201      	movs	r2, #1
    7b10:	4b07      	ldr	r3, [pc, #28]	; (7b30 <USART_HOST_ISR_VECT+0x54>)
    7b12:	701a      	strb	r2, [r3, #0]
    7b14:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    7b18:	b662      	cpsie	i
}
    7b1a:	b002      	add	sp, #8
    7b1c:	bd10      	pop	{r4, pc}
		serial_rx_buf_tail = 0x00;
    7b1e:	2200      	movs	r2, #0
    7b20:	4b04      	ldr	r3, [pc, #16]	; (7b34 <USART_HOST_ISR_VECT+0x58>)
    7b22:	701a      	strb	r2, [r3, #0]
    7b24:	e7f3      	b.n	7b0e <USART_HOST_ISR_VECT+0x32>
    7b26:	46c0      	nop			; (mov r8, r8)
    7b28:	20000ba0 	.word	0x20000ba0
    7b2c:	00006951 	.word	0x00006951
    7b30:	20000014 	.word	0x20000014
    7b34:	20000c55 	.word	0x20000c55
    7b38:	20000bd4 	.word	0x20000bd4

00007b3c <sio2host_init>:
{
    7b3c:	b5f0      	push	{r4, r5, r6, r7, lr}
    7b3e:	b091      	sub	sp, #68	; 0x44
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    7b40:	2380      	movs	r3, #128	; 0x80
    7b42:	05db      	lsls	r3, r3, #23
    7b44:	9300      	str	r3, [sp, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    7b46:	2300      	movs	r3, #0
    7b48:	9301      	str	r3, [sp, #4]
	config->parity           = USART_PARITY_NONE;
    7b4a:	22ff      	movs	r2, #255	; 0xff
    7b4c:	4669      	mov	r1, sp
    7b4e:	810a      	strh	r2, [r1, #8]
	config->stopbits         = USART_STOPBITS_1;
    7b50:	2200      	movs	r2, #0
    7b52:	728b      	strb	r3, [r1, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    7b54:	72cb      	strb	r3, [r1, #11]
	config->baudrate         = 9600;
	config->receiver_enable  = true;
    7b56:	2401      	movs	r4, #1
    7b58:	2124      	movs	r1, #36	; 0x24
    7b5a:	4668      	mov	r0, sp
    7b5c:	5444      	strb	r4, [r0, r1]
	config->transmitter_enable = true;
    7b5e:	3101      	adds	r1, #1
    7b60:	5444      	strb	r4, [r0, r1]
	config->clock_polarity_inverted = false;
    7b62:	3101      	adds	r1, #1
    7b64:	5443      	strb	r3, [r0, r1]
	config->use_external_clock = false;
    7b66:	3101      	adds	r1, #1
    7b68:	5443      	strb	r3, [r0, r1]
	config->ext_clock_freq   = 0;
    7b6a:	930a      	str	r3, [sp, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
    7b6c:	3105      	adds	r1, #5
    7b6e:	5443      	strb	r3, [r0, r1]
	config->generator_source = GCLK_GENERATOR_0;
    7b70:	3101      	adds	r1, #1
    7b72:	5443      	strb	r3, [r0, r1]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->pinmux_pad2      = PINMUX_DEFAULT;
	config->pinmux_pad3      = PINMUX_DEFAULT;
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    7b74:	9305      	str	r3, [sp, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    7b76:	8203      	strh	r3, [r0, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
    7b78:	76c3      	strb	r3, [r0, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
    7b7a:	7602      	strb	r2, [r0, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
    7b7c:	7702      	strb	r2, [r0, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
    7b7e:	7642      	strb	r2, [r0, #25]
	config->receive_pulse_length                    = 19;
    7b80:	2313      	movs	r3, #19
    7b82:	7683      	strb	r3, [r0, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
    7b84:	7742      	strb	r2, [r0, #29]
	host_uart_config.mux_setting = HOST_SERCOM_MUX_SETTING;
    7b86:	2380      	movs	r3, #128	; 0x80
    7b88:	035b      	lsls	r3, r3, #13
    7b8a:	9303      	str	r3, [sp, #12]
	host_uart_config.pinmux_pad0 = HOST_SERCOM_PINMUX_PAD0;
    7b8c:	4b2f      	ldr	r3, [pc, #188]	; (7c4c <sio2host_init+0x110>)
    7b8e:	930c      	str	r3, [sp, #48]	; 0x30
	host_uart_config.pinmux_pad1 = HOST_SERCOM_PINMUX_PAD1;
    7b90:	4b2f      	ldr	r3, [pc, #188]	; (7c50 <sio2host_init+0x114>)
    7b92:	930d      	str	r3, [sp, #52]	; 0x34
	host_uart_config.pinmux_pad2 = HOST_SERCOM_PINMUX_PAD2;
    7b94:	2301      	movs	r3, #1
    7b96:	425b      	negs	r3, r3
    7b98:	930e      	str	r3, [sp, #56]	; 0x38
	host_uart_config.pinmux_pad3 = HOST_SERCOM_PINMUX_PAD3;
    7b9a:	930f      	str	r3, [sp, #60]	; 0x3c
	host_uart_config.baudrate    = USART_HOST_BAUDRATE;
    7b9c:	23e1      	movs	r3, #225	; 0xe1
    7b9e:	025b      	lsls	r3, r3, #9
    7ba0:	9308      	str	r3, [sp, #32]
static inline void stdio_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
	stdio_base = (void *)module;
    7ba2:	4d2c      	ldr	r5, [pc, #176]	; (7c54 <sio2host_init+0x118>)
    7ba4:	4b2c      	ldr	r3, [pc, #176]	; (7c58 <sio2host_init+0x11c>)
    7ba6:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
    7ba8:	4a2c      	ldr	r2, [pc, #176]	; (7c5c <sio2host_init+0x120>)
    7baa:	4b2d      	ldr	r3, [pc, #180]	; (7c60 <sio2host_init+0x124>)
    7bac:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
    7bae:	4a2d      	ldr	r2, [pc, #180]	; (7c64 <sio2host_init+0x128>)
    7bb0:	4b2d      	ldr	r3, [pc, #180]	; (7c68 <sio2host_init+0x12c>)
    7bb2:	601a      	str	r2, [r3, #0]
	if (usart_init(module, hw, config) == STATUS_OK) {
    7bb4:	466a      	mov	r2, sp
    7bb6:	2184      	movs	r1, #132	; 0x84
    7bb8:	05c9      	lsls	r1, r1, #23
    7bba:	0028      	movs	r0, r5
    7bbc:	4b2b      	ldr	r3, [pc, #172]	; (7c6c <sio2host_init+0x130>)
    7bbe:	4798      	blx	r3

	usart_serial_init(module, hw, config);
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
    7bc0:	4f2b      	ldr	r7, [pc, #172]	; (7c70 <sio2host_init+0x134>)
    7bc2:	683b      	ldr	r3, [r7, #0]
    7bc4:	6898      	ldr	r0, [r3, #8]
    7bc6:	2100      	movs	r1, #0
    7bc8:	4e2a      	ldr	r6, [pc, #168]	; (7c74 <sio2host_init+0x138>)
    7bca:	47b0      	blx	r6
	setbuf(stdin, NULL);
    7bcc:	683b      	ldr	r3, [r7, #0]
    7bce:	6858      	ldr	r0, [r3, #4]
    7bd0:	2100      	movs	r1, #0
    7bd2:	47b0      	blx	r6
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    7bd4:	682e      	ldr	r6, [r5, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    7bd6:	0030      	movs	r0, r6
    7bd8:	4b27      	ldr	r3, [pc, #156]	; (7c78 <sio2host_init+0x13c>)
    7bda:	4798      	blx	r3
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    7bdc:	231f      	movs	r3, #31
    7bde:	4018      	ands	r0, r3
    7be0:	4084      	lsls	r4, r0
    7be2:	4b26      	ldr	r3, [pc, #152]	; (7c7c <sio2host_init+0x140>)
    7be4:	601c      	str	r4, [r3, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
    7be6:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    7be8:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    7bea:	2b00      	cmp	r3, #0
    7bec:	d1fc      	bne.n	7be8 <sio2host_init+0xac>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    7bee:	6833      	ldr	r3, [r6, #0]
    7bf0:	2202      	movs	r2, #2
    7bf2:	4313      	orrs	r3, r2
    7bf4:	6033      	str	r3, [r6, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    7bf6:	4b17      	ldr	r3, [pc, #92]	; (7c54 <sio2host_init+0x118>)
    7bf8:	681b      	ldr	r3, [r3, #0]
	return (usart_hw->SYNCBUSY.reg);
    7bfa:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    7bfc:	2a00      	cmp	r2, #0
    7bfe:	d1fc      	bne.n	7bfa <sio2host_init+0xbe>
			module->receiver_enabled = true;
			break;

		case USART_TRANSCEIVER_TX:
			/* Enable TX */
			usart_hw->CTRLB.reg |= SERCOM_USART_CTRLB_TXEN;
    7c00:	6859      	ldr	r1, [r3, #4]
    7c02:	2280      	movs	r2, #128	; 0x80
    7c04:	0252      	lsls	r2, r2, #9
    7c06:	430a      	orrs	r2, r1
    7c08:	605a      	str	r2, [r3, #4]
			module->transmitter_enabled = true;
    7c0a:	2101      	movs	r1, #1
    7c0c:	4a11      	ldr	r2, [pc, #68]	; (7c54 <sio2host_init+0x118>)
    7c0e:	71d1      	strb	r1, [r2, #7]
	return (usart_hw->SYNCBUSY.reg);
    7c10:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    7c12:	2a00      	cmp	r2, #0
    7c14:	d1fc      	bne.n	7c10 <sio2host_init+0xd4>
	return (usart_hw->SYNCBUSY.reg);
    7c16:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    7c18:	2a00      	cmp	r2, #0
    7c1a:	d1fc      	bne.n	7c16 <sio2host_init+0xda>
			usart_hw->CTRLB.reg |= SERCOM_USART_CTRLB_RXEN;
    7c1c:	6859      	ldr	r1, [r3, #4]
    7c1e:	2280      	movs	r2, #128	; 0x80
    7c20:	0292      	lsls	r2, r2, #10
    7c22:	430a      	orrs	r2, r1
    7c24:	605a      	str	r2, [r3, #4]
			module->receiver_enabled = true;
    7c26:	2101      	movs	r1, #1
    7c28:	4a0a      	ldr	r2, [pc, #40]	; (7c54 <sio2host_init+0x118>)
    7c2a:	7191      	strb	r1, [r2, #6]
	return (usart_hw->SYNCBUSY.reg);
    7c2c:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    7c2e:	2a00      	cmp	r2, #0
    7c30:	d1fc      	bne.n	7c2c <sio2host_init+0xf0>
	USART_HOST_RX_ISR_ENABLE();
    7c32:	4913      	ldr	r1, [pc, #76]	; (7c80 <sio2host_init+0x144>)
    7c34:	2000      	movs	r0, #0
    7c36:	4b13      	ldr	r3, [pc, #76]	; (7c84 <sio2host_init+0x148>)
    7c38:	4798      	blx	r3
    7c3a:	2204      	movs	r2, #4
    7c3c:	2384      	movs	r3, #132	; 0x84
    7c3e:	05db      	lsls	r3, r3, #23
    7c40:	759a      	strb	r2, [r3, #22]
    7c42:	32fc      	adds	r2, #252	; 0xfc
    7c44:	4b0d      	ldr	r3, [pc, #52]	; (7c7c <sio2host_init+0x140>)
    7c46:	601a      	str	r2, [r3, #0]
}
    7c48:	b011      	add	sp, #68	; 0x44
    7c4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7c4c:	00040003 	.word	0x00040003
    7c50:	00050003 	.word	0x00050003
    7c54:	20000ba0 	.word	0x20000ba0
    7c58:	2000226c 	.word	0x2000226c
    7c5c:	00007ac5 	.word	0x00007ac5
    7c60:	20002268 	.word	0x20002268
    7c64:	00007a99 	.word	0x00007a99
    7c68:	20002264 	.word	0x20002264
    7c6c:	000064a1 	.word	0x000064a1
    7c70:	20000018 	.word	0x20000018
    7c74:	0001a0c1 	.word	0x0001a0c1
    7c78:	00006041 	.word	0x00006041
    7c7c:	e000e100 	.word	0xe000e100
    7c80:	00007add 	.word	0x00007add
    7c84:	00006005 	.word	0x00006005

00007c88 <sio2host_deinit>:
{
    7c88:	b570      	push	{r4, r5, r6, lr}
	SercomUsart *const usart_hw = &(module->hw->USART);
    7c8a:	4d15      	ldr	r5, [pc, #84]	; (7ce0 <sio2host_deinit+0x58>)
    7c8c:	682c      	ldr	r4, [r5, #0]
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
    7c8e:	0020      	movs	r0, r4
    7c90:	4b14      	ldr	r3, [pc, #80]	; (7ce4 <sio2host_deinit+0x5c>)
    7c92:	4798      	blx	r3
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    7c94:	231f      	movs	r3, #31
    7c96:	4018      	ands	r0, r3
    7c98:	3b1e      	subs	r3, #30
    7c9a:	4083      	lsls	r3, r0
    7c9c:	2280      	movs	r2, #128	; 0x80
    7c9e:	4912      	ldr	r1, [pc, #72]	; (7ce8 <sio2host_deinit+0x60>)
    7ca0:	508b      	str	r3, [r1, r2]
	SercomUsart *const usart_hw = &(module->hw->USART);
    7ca2:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    7ca4:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    7ca6:	2b00      	cmp	r3, #0
    7ca8:	d1fc      	bne.n	7ca4 <sio2host_deinit+0x1c>
	usart_hw->CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
    7caa:	6823      	ldr	r3, [r4, #0]
    7cac:	2202      	movs	r2, #2
    7cae:	4393      	bics	r3, r2
    7cb0:	6023      	str	r3, [r4, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    7cb2:	4b0b      	ldr	r3, [pc, #44]	; (7ce0 <sio2host_deinit+0x58>)
    7cb4:	681b      	ldr	r3, [r3, #0]
	return (usart_hw->SYNCBUSY.reg);
    7cb6:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    7cb8:	2a00      	cmp	r2, #0
    7cba:	d1fc      	bne.n	7cb6 <sio2host_deinit+0x2e>
			module->receiver_enabled = false;
			break;

		case USART_TRANSCEIVER_TX:
			/* Disable TX */
			usart_hw->CTRLB.reg &= ~SERCOM_USART_CTRLB_TXEN;
    7cbc:	685a      	ldr	r2, [r3, #4]
    7cbe:	490b      	ldr	r1, [pc, #44]	; (7cec <sio2host_deinit+0x64>)
    7cc0:	400a      	ands	r2, r1
    7cc2:	605a      	str	r2, [r3, #4]
			module->transmitter_enabled = false;
    7cc4:	2100      	movs	r1, #0
    7cc6:	4a06      	ldr	r2, [pc, #24]	; (7ce0 <sio2host_deinit+0x58>)
    7cc8:	71d1      	strb	r1, [r2, #7]
	return (usart_hw->SYNCBUSY.reg);
    7cca:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    7ccc:	2a00      	cmp	r2, #0
    7cce:	d1fc      	bne.n	7cca <sio2host_deinit+0x42>
			usart_hw->CTRLB.reg &= ~SERCOM_USART_CTRLB_RXEN;
    7cd0:	685a      	ldr	r2, [r3, #4]
    7cd2:	4907      	ldr	r1, [pc, #28]	; (7cf0 <sio2host_deinit+0x68>)
    7cd4:	400a      	ands	r2, r1
    7cd6:	605a      	str	r2, [r3, #4]
			module->receiver_enabled = false;
    7cd8:	2200      	movs	r2, #0
    7cda:	4b01      	ldr	r3, [pc, #4]	; (7ce0 <sio2host_deinit+0x58>)
    7cdc:	719a      	strb	r2, [r3, #6]
}
    7cde:	bd70      	pop	{r4, r5, r6, pc}
    7ce0:	20000ba0 	.word	0x20000ba0
    7ce4:	00006041 	.word	0x00006041
    7ce8:	e000e100 	.word	0xe000e100
    7cec:	fffeffff 	.word	0xfffeffff
    7cf0:	fffdffff 	.word	0xfffdffff

00007cf4 <sio2host_tx>:
{
    7cf4:	b5f0      	push	{r4, r5, r6, r7, lr}
    7cf6:	b083      	sub	sp, #12
    7cf8:	0006      	movs	r6, r0
    7cfa:	9101      	str	r1, [sp, #4]
	return usart_write_buffer_wait(module, tx_data, length);
    7cfc:	466b      	mov	r3, sp
    7cfe:	889d      	ldrh	r5, [r3, #4]
    7d00:	4c05      	ldr	r4, [pc, #20]	; (7d18 <sio2host_tx+0x24>)
    7d02:	4f06      	ldr	r7, [pc, #24]	; (7d1c <sio2host_tx+0x28>)
    7d04:	002a      	movs	r2, r5
    7d06:	0031      	movs	r1, r6
    7d08:	0020      	movs	r0, r4
    7d0a:	47b8      	blx	r7
	} while (status != STATUS_OK);
    7d0c:	2800      	cmp	r0, #0
    7d0e:	d1f9      	bne.n	7d04 <sio2host_tx+0x10>
}
    7d10:	9801      	ldr	r0, [sp, #4]
    7d12:	b003      	add	sp, #12
    7d14:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7d16:	46c0      	nop			; (mov r8, r8)
    7d18:	20000ba0 	.word	0x20000ba0
    7d1c:	00006895 	.word	0x00006895

00007d20 <sio2host_rx>:
{
    7d20:	b570      	push	{r4, r5, r6, lr}
    7d22:	0002      	movs	r2, r0
	if(serial_rx_buf_tail >= serial_rx_buf_head)
    7d24:	4b1f      	ldr	r3, [pc, #124]	; (7da4 <sio2host_rx+0x84>)
    7d26:	781c      	ldrb	r4, [r3, #0]
    7d28:	4b1f      	ldr	r3, [pc, #124]	; (7da8 <sio2host_rx+0x88>)
    7d2a:	781b      	ldrb	r3, [r3, #0]
    7d2c:	429c      	cmp	r4, r3
    7d2e:	d319      	bcc.n	7d64 <sio2host_rx+0x44>
		serial_rx_count = serial_rx_buf_tail - serial_rx_buf_head;
    7d30:	1ae3      	subs	r3, r4, r3
    7d32:	481e      	ldr	r0, [pc, #120]	; (7dac <sio2host_rx+0x8c>)
    7d34:	7003      	strb	r3, [r0, #0]
	if (0 == serial_rx_count) {
    7d36:	4b1d      	ldr	r3, [pc, #116]	; (7dac <sio2host_rx+0x8c>)
    7d38:	7818      	ldrb	r0, [r3, #0]
    7d3a:	2800      	cmp	r0, #0
    7d3c:	d031      	beq.n	7da2 <sio2host_rx+0x82>
	if (SERIAL_RX_BUF_SIZE_HOST <= serial_rx_count) {
    7d3e:	b243      	sxtb	r3, r0
    7d40:	2b00      	cmp	r3, #0
    7d42:	db15      	blt.n	7d70 <sio2host_rx+0x50>
    7d44:	1c03      	adds	r3, r0, #0
    7d46:	4288      	cmp	r0, r1
    7d48:	d900      	bls.n	7d4c <sio2host_rx+0x2c>
    7d4a:	1c0b      	adds	r3, r1, #0
    7d4c:	b2d8      	uxtb	r0, r3
	while (max_length > 0) {
    7d4e:	2800      	cmp	r0, #0
    7d50:	d027      	beq.n	7da2 <sio2host_rx+0x82>
    7d52:	4b15      	ldr	r3, [pc, #84]	; (7da8 <sio2host_rx+0x88>)
    7d54:	781b      	ldrb	r3, [r3, #0]
    7d56:	1e44      	subs	r4, r0, #1
    7d58:	b2e4      	uxtb	r4, r4
    7d5a:	3401      	adds	r4, #1
    7d5c:	1914      	adds	r4, r2, r4
		*data = serial_rx_buf[serial_rx_buf_head];
    7d5e:	4d14      	ldr	r5, [pc, #80]	; (7db0 <sio2host_rx+0x90>)
			serial_rx_buf_head = 0;
    7d60:	2600      	movs	r6, #0
    7d62:	e014      	b.n	7d8e <sio2host_rx+0x6e>
		serial_rx_count = serial_rx_buf_tail + (SERIAL_RX_BUF_SIZE_HOST - serial_rx_buf_head);
    7d64:	0020      	movs	r0, r4
    7d66:	3880      	subs	r0, #128	; 0x80
    7d68:	1ac3      	subs	r3, r0, r3
    7d6a:	4810      	ldr	r0, [pc, #64]	; (7dac <sio2host_rx+0x8c>)
    7d6c:	7003      	strb	r3, [r0, #0]
    7d6e:	e7e2      	b.n	7d36 <sio2host_rx+0x16>
		serial_rx_buf_head = serial_rx_buf_tail;
    7d70:	4b0d      	ldr	r3, [pc, #52]	; (7da8 <sio2host_rx+0x88>)
    7d72:	701c      	strb	r4, [r3, #0]
		serial_rx_count = SERIAL_RX_BUF_SIZE_HOST;
    7d74:	2080      	movs	r0, #128	; 0x80
    7d76:	4b0d      	ldr	r3, [pc, #52]	; (7dac <sio2host_rx+0x8c>)
    7d78:	7018      	strb	r0, [r3, #0]
		if (SERIAL_RX_BUF_SIZE_HOST <= max_length) {
    7d7a:	b24b      	sxtb	r3, r1
    7d7c:	2b00      	cmp	r3, #0
    7d7e:	db01      	blt.n	7d84 <sio2host_rx+0x64>
    7d80:	0008      	movs	r0, r1
    7d82:	e7e4      	b.n	7d4e <sio2host_rx+0x2e>
			max_length = SERIAL_RX_BUF_SIZE_HOST;
    7d84:	2080      	movs	r0, #128	; 0x80
    7d86:	e7e4      	b.n	7d52 <sio2host_rx+0x32>
			serial_rx_buf_head = 0;
    7d88:	0033      	movs	r3, r6
	while (max_length > 0) {
    7d8a:	4294      	cmp	r4, r2
    7d8c:	d007      	beq.n	7d9e <sio2host_rx+0x7e>
		*data = serial_rx_buf[serial_rx_buf_head];
    7d8e:	5ce9      	ldrb	r1, [r5, r3]
    7d90:	7011      	strb	r1, [r2, #0]
		data++;
    7d92:	3201      	adds	r2, #1
		if ((SERIAL_RX_BUF_SIZE_HOST - 1) == serial_rx_buf_head) {
    7d94:	2b7f      	cmp	r3, #127	; 0x7f
    7d96:	d0f7      	beq.n	7d88 <sio2host_rx+0x68>
			serial_rx_buf_head++;
    7d98:	3301      	adds	r3, #1
    7d9a:	b2db      	uxtb	r3, r3
    7d9c:	e7f5      	b.n	7d8a <sio2host_rx+0x6a>
    7d9e:	4a02      	ldr	r2, [pc, #8]	; (7da8 <sio2host_rx+0x88>)
    7da0:	7013      	strb	r3, [r2, #0]
}
    7da2:	bd70      	pop	{r4, r5, r6, pc}
    7da4:	20000c55 	.word	0x20000c55
    7da8:	20000c54 	.word	0x20000c54
    7dac:	20000c56 	.word	0x20000c56
    7db0:	20000bd4 	.word	0x20000bd4

00007db4 <sio2host_getchar_nowait>:
{
    7db4:	b500      	push	{lr}
    7db6:	b083      	sub	sp, #12
	int back = sio2host_rx(&c, 1);
    7db8:	2101      	movs	r1, #1
    7dba:	466b      	mov	r3, sp
    7dbc:	1dd8      	adds	r0, r3, #7
    7dbe:	4b05      	ldr	r3, [pc, #20]	; (7dd4 <sio2host_getchar_nowait+0x20>)
    7dc0:	4798      	blx	r3
	if (back >= 1) {
    7dc2:	2800      	cmp	r0, #0
    7dc4:	dd03      	ble.n	7dce <sio2host_getchar_nowait+0x1a>
		return c;
    7dc6:	466b      	mov	r3, sp
    7dc8:	79d8      	ldrb	r0, [r3, #7]
}
    7dca:	b003      	add	sp, #12
    7dcc:	bd00      	pop	{pc}
		return (-1);
    7dce:	2001      	movs	r0, #1
    7dd0:	4240      	negs	r0, r0
    7dd2:	e7fa      	b.n	7dca <sio2host_getchar_nowait+0x16>
    7dd4:	00007d21 	.word	0x00007d21

00007dd8 <HAL_SPISend>:
	SercomSpi *const spi_module = &(module->hw->SPI);
    7dd8:	4b13      	ldr	r3, [pc, #76]	; (7e28 <HAL_SPISend+0x50>)
    7dda:	681b      	ldr	r3, [r3, #0]
static uint8_t HAL_SPISend(uint8_t data)
{
	uint16_t read_val = 0;
	
	/* Write the byte in the transceiver data register */
	while (!spi_is_ready_to_write(&master));
    7ddc:	2101      	movs	r1, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    7dde:	7e1a      	ldrb	r2, [r3, #24]
    7de0:	420a      	tst	r2, r1
    7de2:	d0fc      	beq.n	7dde <HAL_SPISend+0x6>
    7de4:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    7de6:	07d2      	lsls	r2, r2, #31
    7de8:	d500      	bpl.n	7dec <HAL_SPISend+0x14>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    7dea:	6298      	str	r0, [r3, #40]	; 0x28
	spi_write(&master, data);
	while (!spi_is_write_complete(&master));
    7dec:	2102      	movs	r1, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    7dee:	7e1a      	ldrb	r2, [r3, #24]
    7df0:	420a      	tst	r2, r1
    7df2:	d0fc      	beq.n	7dee <HAL_SPISend+0x16>
	
	while (!spi_is_ready_to_read(&master));
    7df4:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    7df6:	7e1a      	ldrb	r2, [r3, #24]
    7df8:	420a      	tst	r2, r1
    7dfa:	d0fc      	beq.n	7df6 <HAL_SPISend+0x1e>
    7dfc:	7e1a      	ldrb	r2, [r3, #24]
	uint16_t read_val = 0;
    7dfe:	2000      	movs	r0, #0
	if (!spi_is_ready_to_read(module)) {
    7e00:	0752      	lsls	r2, r2, #29
    7e02:	d50a      	bpl.n	7e1a <HAL_SPISend+0x42>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    7e04:	8b5a      	ldrh	r2, [r3, #26]
    7e06:	0752      	lsls	r2, r2, #29
    7e08:	d501      	bpl.n	7e0e <HAL_SPISend+0x36>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    7e0a:	2204      	movs	r2, #4
    7e0c:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    7e0e:	4a06      	ldr	r2, [pc, #24]	; (7e28 <HAL_SPISend+0x50>)
    7e10:	7992      	ldrb	r2, [r2, #6]
    7e12:	2a01      	cmp	r2, #1
    7e14:	d003      	beq.n	7e1e <HAL_SPISend+0x46>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    7e16:	6a98      	ldr	r0, [r3, #40]	; 0x28
    7e18:	b2c0      	uxtb	r0, r0
	spi_read(&master, &read_val);
	
	return ((uint8_t)read_val);
    7e1a:	b2c0      	uxtb	r0, r0
}
    7e1c:	4770      	bx	lr
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    7e1e:	6a98      	ldr	r0, [r3, #40]	; 0x28
    7e20:	05c0      	lsls	r0, r0, #23
    7e22:	0dc0      	lsrs	r0, r0, #23
    7e24:	e7f9      	b.n	7e1a <HAL_SPISend+0x42>
    7e26:	46c0      	nop			; (mov r8, r8)
    7e28:	20000c64 	.word	0x20000c64

00007e2c <HAL_ResetPinMakeOutput>:
{
    7e2c:	b500      	push	{lr}
    7e2e:	b083      	sub	sp, #12
	config->input_pull = PORT_PIN_PULL_UP;
    7e30:	a901      	add	r1, sp, #4
    7e32:	2301      	movs	r3, #1
    7e34:	704b      	strb	r3, [r1, #1]
	config->powersave  = false;
    7e36:	2200      	movs	r2, #0
    7e38:	708a      	strb	r2, [r1, #2]
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
    7e3a:	700b      	strb	r3, [r1, #0]
	port_pin_set_config(SX_RF_RESET_PIN,&pin_conf);
    7e3c:	202f      	movs	r0, #47	; 0x2f
    7e3e:	4b02      	ldr	r3, [pc, #8]	; (7e48 <HAL_ResetPinMakeOutput+0x1c>)
    7e40:	4798      	blx	r3
}
    7e42:	b003      	add	sp, #12
    7e44:	bd00      	pop	{pc}
    7e46:	46c0      	nop			; (mov r8, r8)
    7e48:	00004f35 	.word	0x00004f35

00007e4c <HAL_RadioDIO2Callback>:
{
    7e4c:	b510      	push	{r4, lr}
  if (interruptHandlerDio2)
    7e4e:	4b05      	ldr	r3, [pc, #20]	; (7e64 <HAL_RadioDIO2Callback+0x18>)
    7e50:	681b      	ldr	r3, [r3, #0]
    7e52:	2b00      	cmp	r3, #0
    7e54:	d004      	beq.n	7e60 <HAL_RadioDIO2Callback+0x14>
	PMM_Wakeup();
    7e56:	4b04      	ldr	r3, [pc, #16]	; (7e68 <HAL_RadioDIO2Callback+0x1c>)
    7e58:	4798      	blx	r3
    interruptHandlerDio2();
    7e5a:	4b02      	ldr	r3, [pc, #8]	; (7e64 <HAL_RadioDIO2Callback+0x18>)
    7e5c:	681b      	ldr	r3, [r3, #0]
    7e5e:	4798      	blx	r3
}
    7e60:	bd10      	pop	{r4, pc}
    7e62:	46c0      	nop			; (mov r8, r8)
    7e64:	20000c60 	.word	0x20000c60
    7e68:	000083e9 	.word	0x000083e9

00007e6c <HAL_RadioDIO1Callback>:
{
    7e6c:	b510      	push	{r4, lr}
  if (interruptHandlerDio1)
    7e6e:	4b05      	ldr	r3, [pc, #20]	; (7e84 <HAL_RadioDIO1Callback+0x18>)
    7e70:	681b      	ldr	r3, [r3, #0]
    7e72:	2b00      	cmp	r3, #0
    7e74:	d004      	beq.n	7e80 <HAL_RadioDIO1Callback+0x14>
	PMM_Wakeup();
    7e76:	4b04      	ldr	r3, [pc, #16]	; (7e88 <HAL_RadioDIO1Callback+0x1c>)
    7e78:	4798      	blx	r3
    interruptHandlerDio1();
    7e7a:	4b02      	ldr	r3, [pc, #8]	; (7e84 <HAL_RadioDIO1Callback+0x18>)
    7e7c:	681b      	ldr	r3, [r3, #0]
    7e7e:	4798      	blx	r3
}
    7e80:	bd10      	pop	{r4, pc}
    7e82:	46c0      	nop			; (mov r8, r8)
    7e84:	20000c5c 	.word	0x20000c5c
    7e88:	000083e9 	.word	0x000083e9

00007e8c <HAL_RadioDIO0Callback>:
{
    7e8c:	b510      	push	{r4, lr}
  if (interruptHandlerDio0)
    7e8e:	4b05      	ldr	r3, [pc, #20]	; (7ea4 <HAL_RadioDIO0Callback+0x18>)
    7e90:	681b      	ldr	r3, [r3, #0]
    7e92:	2b00      	cmp	r3, #0
    7e94:	d004      	beq.n	7ea0 <HAL_RadioDIO0Callback+0x14>
	PMM_Wakeup();
    7e96:	4b04      	ldr	r3, [pc, #16]	; (7ea8 <HAL_RadioDIO0Callback+0x1c>)
    7e98:	4798      	blx	r3
    interruptHandlerDio0();
    7e9a:	4b02      	ldr	r3, [pc, #8]	; (7ea4 <HAL_RadioDIO0Callback+0x18>)
    7e9c:	681b      	ldr	r3, [r3, #0]
    7e9e:	4798      	blx	r3
}
    7ea0:	bd10      	pop	{r4, pc}
    7ea2:	46c0      	nop			; (mov r8, r8)
    7ea4:	20000c58 	.word	0x20000c58
    7ea8:	000083e9 	.word	0x000083e9

00007eac <HAL_SPICSAssert>:
{
    7eac:	b510      	push	{r4, lr}
	spi_select_slave(&master, &slave, true);
    7eae:	2201      	movs	r2, #1
    7eb0:	4902      	ldr	r1, [pc, #8]	; (7ebc <HAL_SPICSAssert+0x10>)
    7eb2:	4803      	ldr	r0, [pc, #12]	; (7ec0 <HAL_SPICSAssert+0x14>)
    7eb4:	4b03      	ldr	r3, [pc, #12]	; (7ec4 <HAL_SPICSAssert+0x18>)
    7eb6:	4798      	blx	r3
}
    7eb8:	bd10      	pop	{r4, pc}
    7eba:	46c0      	nop			; (mov r8, r8)
    7ebc:	20002270 	.word	0x20002270
    7ec0:	20000c64 	.word	0x20000c64
    7ec4:	000063ad 	.word	0x000063ad

00007ec8 <HAL_SPICSDeassert>:
{
    7ec8:	b510      	push	{r4, lr}
	spi_select_slave(&master, &slave, false);
    7eca:	2200      	movs	r2, #0
    7ecc:	4902      	ldr	r1, [pc, #8]	; (7ed8 <HAL_SPICSDeassert+0x10>)
    7ece:	4803      	ldr	r0, [pc, #12]	; (7edc <HAL_SPICSDeassert+0x14>)
    7ed0:	4b03      	ldr	r3, [pc, #12]	; (7ee0 <HAL_SPICSDeassert+0x18>)
    7ed2:	4798      	blx	r3
}
    7ed4:	bd10      	pop	{r4, pc}
    7ed6:	46c0      	nop			; (mov r8, r8)
    7ed8:	20002270 	.word	0x20002270
    7edc:	20000c64 	.word	0x20000c64
    7ee0:	000063ad 	.word	0x000063ad

00007ee4 <HAL_RadioInit>:
{
    7ee4:	b5f0      	push	{r4, r5, r6, r7, lr}
    7ee6:	46d6      	mov	lr, sl
    7ee8:	464f      	mov	r7, r9
    7eea:	4646      	mov	r6, r8
    7eec:	b5c0      	push	{r6, r7, lr}
    7eee:	b090      	sub	sp, #64	; 0x40
	config->input_pull = PORT_PIN_PULL_UP;
    7ef0:	ac01      	add	r4, sp, #4
    7ef2:	2601      	movs	r6, #1
    7ef4:	7066      	strb	r6, [r4, #1]
	config->powersave  = false;
    7ef6:	2500      	movs	r5, #0
    7ef8:	70a5      	strb	r5, [r4, #2]
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    7efa:	7026      	strb	r6, [r4, #0]
	port_pin_set_config(SX_RF_SPI_SCK, &pin_conf);
    7efc:	0021      	movs	r1, r4
    7efe:	2052      	movs	r0, #82	; 0x52
    7f00:	4f52      	ldr	r7, [pc, #328]	; (804c <HAL_RadioInit+0x168>)
    7f02:	47b8      	blx	r7
	port_pin_set_config(SX_RF_SPI_MOSI, &pin_conf);
    7f04:	0021      	movs	r1, r4
    7f06:	203e      	movs	r0, #62	; 0x3e
    7f08:	47b8      	blx	r7
	port_pin_set_config(SX_RF_SPI_CS, &pin_conf);
    7f0a:	0021      	movs	r1, r4
    7f0c:	203f      	movs	r0, #63	; 0x3f
    7f0e:	47b8      	blx	r7
	port_pin_set_config(SX_RF_RESET_PIN, &pin_conf);
    7f10:	0021      	movs	r1, r4
    7f12:	202f      	movs	r0, #47	; 0x2f
    7f14:	47b8      	blx	r7
		port_base->OUTSET.reg = pin_mask;
    7f16:	2280      	movs	r2, #128	; 0x80
    7f18:	02d2      	lsls	r2, r2, #11
    7f1a:	4b4d      	ldr	r3, [pc, #308]	; (8050 <HAL_RadioInit+0x16c>)
    7f1c:	619a      	str	r2, [r3, #24]
    7f1e:	4b4d      	ldr	r3, [pc, #308]	; (8054 <HAL_RadioInit+0x170>)
    7f20:	2280      	movs	r2, #128	; 0x80
    7f22:	05d2      	lsls	r2, r2, #23
    7f24:	619a      	str	r2, [r3, #24]
    7f26:	2280      	movs	r2, #128	; 0x80
    7f28:	0612      	lsls	r2, r2, #24
    7f2a:	619a      	str	r2, [r3, #24]
    7f2c:	2280      	movs	r2, #128	; 0x80
    7f2e:	0212      	lsls	r2, r2, #8
    7f30:	619a      	str	r2, [r3, #24]
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
    7f32:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(SX_RF_SPI_MISO, &pin_conf);
    7f34:	0021      	movs	r1, r4
    7f36:	2053      	movs	r0, #83	; 0x53
    7f38:	47b8      	blx	r7
	extint_chan_get_config_defaults(&config_extint_chan);
    7f3a:	ac02      	add	r4, sp, #8
    7f3c:	0020      	movs	r0, r4
    7f3e:	4b46      	ldr	r3, [pc, #280]	; (8058 <HAL_RadioInit+0x174>)
    7f40:	4798      	blx	r3
	config_extint_chan.gpio_pin           = DIO0_EIC_PIN;
    7f42:	2330      	movs	r3, #48	; 0x30
    7f44:	9302      	str	r3, [sp, #8]
	config_extint_chan.gpio_pin_mux       = DIO0_EIC_MUX;
    7f46:	6065      	str	r5, [r4, #4]
	config_extint_chan.gpio_pin_pull      = EXTINT_PULL_NONE;
    7f48:	7225      	strb	r5, [r4, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_RISING;
    7f4a:	72e6      	strb	r6, [r4, #11]
	extint_chan_set_config(DIO0_EIC_LINE, &config_extint_chan);
    7f4c:	0021      	movs	r1, r4
    7f4e:	2000      	movs	r0, #0
    7f50:	4b42      	ldr	r3, [pc, #264]	; (805c <HAL_RadioInit+0x178>)
    7f52:	469a      	mov	sl, r3
    7f54:	4798      	blx	r3
	extint_register_callback(HAL_RadioDIO0Callback,DIO0_EIC_LINE,EXTINT_CALLBACK_TYPE_DETECT);
    7f56:	2200      	movs	r2, #0
    7f58:	2100      	movs	r1, #0
    7f5a:	4841      	ldr	r0, [pc, #260]	; (8060 <HAL_RadioInit+0x17c>)
    7f5c:	4b41      	ldr	r3, [pc, #260]	; (8064 <HAL_RadioInit+0x180>)
    7f5e:	4699      	mov	r9, r3
    7f60:	4798      	blx	r3
	extint_chan_enable_callback(DIO0_EIC_LINE,EXTINT_CALLBACK_TYPE_DETECT);
    7f62:	2100      	movs	r1, #0
    7f64:	2000      	movs	r0, #0
    7f66:	4b40      	ldr	r3, [pc, #256]	; (8068 <HAL_RadioInit+0x184>)
    7f68:	4698      	mov	r8, r3
    7f6a:	4798      	blx	r3
	config_extint_chan.gpio_pin           = DIO1_EIC_PIN;
    7f6c:	230b      	movs	r3, #11
    7f6e:	9302      	str	r3, [sp, #8]
	config_extint_chan.gpio_pin_mux       = DIO1_EIC_MUX;
    7f70:	6065      	str	r5, [r4, #4]
	config_extint_chan.gpio_pin_pull      = EXTINT_PULL_NONE;
    7f72:	7225      	strb	r5, [r4, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_RISING;
    7f74:	72e6      	strb	r6, [r4, #11]
	extint_chan_set_config(DIO1_EIC_LINE, &config_extint_chan);
    7f76:	0021      	movs	r1, r4
    7f78:	200b      	movs	r0, #11
    7f7a:	47d0      	blx	sl
	extint_register_callback(HAL_RadioDIO1Callback,DIO1_EIC_LINE,EXTINT_CALLBACK_TYPE_DETECT);
    7f7c:	2200      	movs	r2, #0
    7f7e:	210b      	movs	r1, #11
    7f80:	483a      	ldr	r0, [pc, #232]	; (806c <HAL_RadioInit+0x188>)
    7f82:	47c8      	blx	r9
	extint_chan_enable_callback(DIO1_EIC_LINE,EXTINT_CALLBACK_TYPE_DETECT);
    7f84:	2100      	movs	r1, #0
    7f86:	200b      	movs	r0, #11
    7f88:	47c0      	blx	r8
	config_extint_chan.gpio_pin           = DIO2_EIC_PIN;
    7f8a:	230c      	movs	r3, #12
    7f8c:	9302      	str	r3, [sp, #8]
	config_extint_chan.gpio_pin_mux       = DIO2_EIC_MUX;
    7f8e:	6065      	str	r5, [r4, #4]
	config_extint_chan.gpio_pin_pull      = EXTINT_PULL_NONE;
    7f90:	7225      	strb	r5, [r4, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_RISING;
    7f92:	72e6      	strb	r6, [r4, #11]
	extint_chan_set_config(DIO2_EIC_LINE, &config_extint_chan);
    7f94:	0021      	movs	r1, r4
    7f96:	200c      	movs	r0, #12
    7f98:	47d0      	blx	sl
	extint_register_callback(HAL_RadioDIO2Callback,DIO2_EIC_LINE,EXTINT_CALLBACK_TYPE_DETECT);
    7f9a:	2200      	movs	r2, #0
    7f9c:	210c      	movs	r1, #12
    7f9e:	4834      	ldr	r0, [pc, #208]	; (8070 <HAL_RadioInit+0x18c>)
    7fa0:	47c8      	blx	r9
	extint_chan_enable_callback(DIO2_EIC_LINE,EXTINT_CALLBACK_TYPE_DETECT);
    7fa2:	2100      	movs	r1, #0
    7fa4:	200c      	movs	r0, #12
    7fa6:	47c0      	blx	r8
	slave->ss_pin          = config->ss_pin;
    7fa8:	4b32      	ldr	r3, [pc, #200]	; (8074 <HAL_RadioInit+0x190>)
    7faa:	4698      	mov	r8, r3
    7fac:	233f      	movs	r3, #63	; 0x3f
    7fae:	4642      	mov	r2, r8
    7fb0:	7013      	strb	r3, [r2, #0]
	slave->address_enabled = config->address_enabled;
    7fb2:	7055      	strb	r5, [r2, #1]
	slave->address         = config->address;
    7fb4:	7095      	strb	r5, [r2, #2]
	config->input_pull = PORT_PIN_PULL_UP;
    7fb6:	7066      	strb	r6, [r4, #1]
	config->powersave  = false;
    7fb8:	70a5      	strb	r5, [r4, #2]
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
    7fba:	7026      	strb	r6, [r4, #0]
	port_pin_set_config(slave->ss_pin, &pin_conf);
    7fbc:	0021      	movs	r1, r4
    7fbe:	203f      	movs	r0, #63	; 0x3f
    7fc0:	47b8      	blx	r7
	port_pin_set_output_level(slave->ss_pin, true);
    7fc2:	4643      	mov	r3, r8
    7fc4:	781a      	ldrb	r2, [r3, #0]
	if (port_index < PORT_INST_NUM) {
    7fc6:	09d1      	lsrs	r1, r2, #7
		return NULL;
    7fc8:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    7fca:	2900      	cmp	r1, #0
    7fcc:	d104      	bne.n	7fd8 <HAL_RadioInit+0xf4>
		return &(ports[port_index]->Group[group_index]);
    7fce:	0953      	lsrs	r3, r2, #5
    7fd0:	01db      	lsls	r3, r3, #7
    7fd2:	4929      	ldr	r1, [pc, #164]	; (8078 <HAL_RadioInit+0x194>)
    7fd4:	468c      	mov	ip, r1
    7fd6:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    7fd8:	211f      	movs	r1, #31
    7fda:	4011      	ands	r1, r2
    7fdc:	2201      	movs	r2, #1
    7fde:	0010      	movs	r0, r2
    7fe0:	4088      	lsls	r0, r1
		port_base->OUTSET.reg = pin_mask;
    7fe2:	6198      	str	r0, [r3, #24]
	config->mode             = SPI_MODE_MASTER;
    7fe4:	ac02      	add	r4, sp, #8
    7fe6:	7022      	strb	r2, [r4, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
    7fe8:	2300      	movs	r3, #0
    7fea:	9303      	str	r3, [sp, #12]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
    7fec:	9304      	str	r3, [sp, #16]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
    7fee:	7423      	strb	r3, [r4, #16]
	config->run_in_standby   = false;
    7ff0:	7463      	strb	r3, [r4, #17]
	config->receiver_enable  = true;
    7ff2:	74a2      	strb	r2, [r4, #18]
	config->select_slave_low_detect_enable= true;
    7ff4:	74e2      	strb	r2, [r4, #19]
	config->master_slave_select_enable= false;
    7ff6:	7523      	strb	r3, [r4, #20]
	config->generator_source = GCLK_GENERATOR_0;
    7ff8:	3223      	adds	r2, #35	; 0x23
    7ffa:	54a3      	strb	r3, [r4, r2]
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
    7ffc:	3a18      	subs	r2, #24
    7ffe:	2100      	movs	r1, #0
    8000:	a808      	add	r0, sp, #32
    8002:	4b1e      	ldr	r3, [pc, #120]	; (807c <HAL_RadioInit+0x198>)
    8004:	4798      	blx	r3
	config_spi_master.mode_specific.master.baudrate = SX_RF_SPI_BAUDRATE;
    8006:	4b1e      	ldr	r3, [pc, #120]	; (8080 <HAL_RadioInit+0x19c>)
    8008:	61a3      	str	r3, [r4, #24]
	config_spi_master.mux_setting = SX_RF_SPI_SERCOM_MUX_SETTING;
    800a:	2380      	movs	r3, #128	; 0x80
    800c:	025b      	lsls	r3, r3, #9
    800e:	60e3      	str	r3, [r4, #12]
	config_spi_master.pinmux_pad0 = SX_RF_SPI_SERCOM_PINMUX_PAD0;
    8010:	4b1c      	ldr	r3, [pc, #112]	; (8084 <HAL_RadioInit+0x1a0>)
    8012:	62a3      	str	r3, [r4, #40]	; 0x28
	config_spi_master.pinmux_pad1 = PINMUX_UNUSED;
    8014:	2301      	movs	r3, #1
    8016:	425b      	negs	r3, r3
    8018:	62e3      	str	r3, [r4, #44]	; 0x2c
	config_spi_master.pinmux_pad2 = SX_RF_SPI_SERCOM_PINMUX_PAD2;
    801a:	4b1b      	ldr	r3, [pc, #108]	; (8088 <HAL_RadioInit+0x1a4>)
    801c:	6323      	str	r3, [r4, #48]	; 0x30
	config_spi_master.pinmux_pad3 = SX_RF_SPI_SERCOM_PINMUX_PAD3;
    801e:	4b1b      	ldr	r3, [pc, #108]	; (808c <HAL_RadioInit+0x1a8>)
    8020:	6363      	str	r3, [r4, #52]	; 0x34
	spi_init(&master, SX_RF_SPI, &config_spi_master);	
    8022:	4d1b      	ldr	r5, [pc, #108]	; (8090 <HAL_RadioInit+0x1ac>)
    8024:	0022      	movs	r2, r4
    8026:	491b      	ldr	r1, [pc, #108]	; (8094 <HAL_RadioInit+0x1b0>)
    8028:	0028      	movs	r0, r5
    802a:	4b1b      	ldr	r3, [pc, #108]	; (8098 <HAL_RadioInit+0x1b4>)
    802c:	4798      	blx	r3
	SercomSpi *const spi_module = &(module->hw->SPI);
    802e:	682a      	ldr	r2, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
    8030:	69d3      	ldr	r3, [r2, #28]
	while (spi_is_syncing(module)) {
    8032:	2b00      	cmp	r3, #0
    8034:	d1fc      	bne.n	8030 <HAL_RadioInit+0x14c>
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    8036:	6813      	ldr	r3, [r2, #0]
    8038:	2102      	movs	r1, #2
    803a:	430b      	orrs	r3, r1
    803c:	6013      	str	r3, [r2, #0]
}
    803e:	b010      	add	sp, #64	; 0x40
    8040:	bc1c      	pop	{r2, r3, r4}
    8042:	4690      	mov	r8, r2
    8044:	4699      	mov	r9, r3
    8046:	46a2      	mov	sl, r4
    8048:	bdf0      	pop	{r4, r5, r6, r7, pc}
    804a:	46c0      	nop			; (mov r8, r8)
    804c:	00004f35 	.word	0x00004f35
    8050:	40002900 	.word	0x40002900
    8054:	40002880 	.word	0x40002880
    8058:	00004acd 	.word	0x00004acd
    805c:	00004ae1 	.word	0x00004ae1
    8060:	00007e8d 	.word	0x00007e8d
    8064:	0000498d 	.word	0x0000498d
    8068:	000049b9 	.word	0x000049b9
    806c:	00007e6d 	.word	0x00007e6d
    8070:	00007e4d 	.word	0x00007e4d
    8074:	20002270 	.word	0x20002270
    8078:	40002800 	.word	0x40002800
    807c:	00019ec9 	.word	0x00019ec9
    8080:	001e8480 	.word	0x001e8480
    8084:	00530005 	.word	0x00530005
    8088:	003e0005 	.word	0x003e0005
    808c:	00520005 	.word	0x00520005
    8090:	20000c64 	.word	0x20000c64
    8094:	42001000 	.word	0x42001000
    8098:	000060d1 	.word	0x000060d1

0000809c <HAL_Radio_resources_init>:
	SercomSpi *const spi_module = &(module->hw->SPI);
    809c:	4b07      	ldr	r3, [pc, #28]	; (80bc <HAL_Radio_resources_init+0x20>)
    809e:	681a      	ldr	r2, [r3, #0]
	return (spi_module->SYNCBUSY.reg);
    80a0:	69d3      	ldr	r3, [r2, #28]
	while (spi_is_syncing(module)) {
    80a2:	2b00      	cmp	r3, #0
    80a4:	d1fc      	bne.n	80a0 <HAL_Radio_resources_init+0x4>
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    80a6:	6813      	ldr	r3, [r2, #0]
    80a8:	2102      	movs	r1, #2
    80aa:	430b      	orrs	r3, r1
    80ac:	6013      	str	r3, [r2, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    80ae:	4b03      	ldr	r3, [pc, #12]	; (80bc <HAL_Radio_resources_init+0x20>)
    80b0:	681a      	ldr	r2, [r3, #0]
	return (spi_module->SYNCBUSY.reg);
    80b2:	69d3      	ldr	r3, [r2, #28]
	while (spi_is_syncing(&master)) {
    80b4:	2b00      	cmp	r3, #0
    80b6:	d1fc      	bne.n	80b2 <HAL_Radio_resources_init+0x16>
}
    80b8:	4770      	bx	lr
    80ba:	46c0      	nop			; (mov r8, r8)
    80bc:	20000c64 	.word	0x20000c64

000080c0 <HAL_RadioDeInit>:
	SercomSpi *const spi_module = &(module->hw->SPI);
    80c0:	4b06      	ldr	r3, [pc, #24]	; (80dc <HAL_RadioDeInit+0x1c>)
    80c2:	681a      	ldr	r2, [r3, #0]
	return (spi_module->SYNCBUSY.reg);
    80c4:	69d3      	ldr	r3, [r2, #28]
	while (spi_is_syncing(module)) {
    80c6:	2b00      	cmp	r3, #0
    80c8:	d1fc      	bne.n	80c4 <HAL_RadioDeInit+0x4>
	spi_module->INTENCLR.reg = SERCOM_SPI_INTENCLR_MASK;
    80ca:	338f      	adds	r3, #143	; 0x8f
    80cc:	7513      	strb	r3, [r2, #20]
	spi_module->INTFLAG.reg = SERCOM_SPI_INTFLAG_MASK;
    80ce:	7613      	strb	r3, [r2, #24]
	spi_module->CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    80d0:	6813      	ldr	r3, [r2, #0]
    80d2:	2102      	movs	r1, #2
    80d4:	438b      	bics	r3, r1
    80d6:	6013      	str	r3, [r2, #0]
}
    80d8:	4770      	bx	lr
    80da:	46c0      	nop			; (mov r8, r8)
    80dc:	20000c64 	.word	0x20000c64

000080e0 <RADIO_Reset>:
{
    80e0:	b570      	push	{r4, r5, r6, lr}
    80e2:	b082      	sub	sp, #8
	HAL_ResetPinMakeOutput();
    80e4:	4c0a      	ldr	r4, [pc, #40]	; (8110 <RADIO_Reset+0x30>)
    80e6:	47a0      	blx	r4
		port_base->OUTCLR.reg = pin_mask;
    80e8:	4d0a      	ldr	r5, [pc, #40]	; (8114 <RADIO_Reset+0x34>)
    80ea:	2680      	movs	r6, #128	; 0x80
    80ec:	0236      	lsls	r6, r6, #8
    80ee:	616e      	str	r6, [r5, #20]
	SystemBlockingWaitMs(1);
    80f0:	2001      	movs	r0, #1
    80f2:	4b09      	ldr	r3, [pc, #36]	; (8118 <RADIO_Reset+0x38>)
    80f4:	4798      	blx	r3
	config->direction  = PORT_PIN_DIR_INPUT;
    80f6:	a901      	add	r1, sp, #4
    80f8:	2300      	movs	r3, #0
    80fa:	700b      	strb	r3, [r1, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    80fc:	2201      	movs	r2, #1
    80fe:	704a      	strb	r2, [r1, #1]
	config->powersave  = false;
    8100:	708b      	strb	r3, [r1, #2]
	port_pin_set_config(SX_RF_RESET_PIN,&pin_conf);
    8102:	202f      	movs	r0, #47	; 0x2f
    8104:	4b05      	ldr	r3, [pc, #20]	; (811c <RADIO_Reset+0x3c>)
    8106:	4798      	blx	r3
		port_base->OUTSET.reg = pin_mask;
    8108:	61ae      	str	r6, [r5, #24]
	HAL_ResetPinMakeOutput();
    810a:	47a0      	blx	r4
}
    810c:	b002      	add	sp, #8
    810e:	bd70      	pop	{r4, r5, r6, pc}
    8110:	00007e2d 	.word	0x00007e2d
    8114:	40002880 	.word	0x40002880
    8118:	0000837d 	.word	0x0000837d
    811c:	00004f35 	.word	0x00004f35

00008120 <RADIO_RegisterWrite>:
{
    8120:	b570      	push	{r4, r5, r6, lr}
    8122:	0004      	movs	r4, r0
    8124:	000d      	movs	r5, r1
	HAL_SPICSAssert();
    8126:	4b05      	ldr	r3, [pc, #20]	; (813c <RADIO_RegisterWrite+0x1c>)
    8128:	4798      	blx	r3
	HAL_SPISend(REG_WRITE_CMD | reg);
    812a:	2080      	movs	r0, #128	; 0x80
    812c:	4320      	orrs	r0, r4
    812e:	4c04      	ldr	r4, [pc, #16]	; (8140 <RADIO_RegisterWrite+0x20>)
    8130:	47a0      	blx	r4
	HAL_SPISend(value);
    8132:	0028      	movs	r0, r5
    8134:	47a0      	blx	r4
	HAL_SPICSDeassert();
    8136:	4b03      	ldr	r3, [pc, #12]	; (8144 <RADIO_RegisterWrite+0x24>)
    8138:	4798      	blx	r3
}
    813a:	bd70      	pop	{r4, r5, r6, pc}
    813c:	00007ead 	.word	0x00007ead
    8140:	00007dd9 	.word	0x00007dd9
    8144:	00007ec9 	.word	0x00007ec9

00008148 <RADIO_RegisterRead>:
{
    8148:	b510      	push	{r4, lr}
    814a:	0004      	movs	r4, r0
	HAL_SPICSAssert();
    814c:	4b06      	ldr	r3, [pc, #24]	; (8168 <RADIO_RegisterRead+0x20>)
    814e:	4798      	blx	r3
	HAL_SPISend(reg);
    8150:	207f      	movs	r0, #127	; 0x7f
    8152:	4020      	ands	r0, r4
    8154:	4c05      	ldr	r4, [pc, #20]	; (816c <RADIO_RegisterRead+0x24>)
    8156:	47a0      	blx	r4
	readValue = HAL_SPISend(0xFF);
    8158:	20ff      	movs	r0, #255	; 0xff
    815a:	47a0      	blx	r4
    815c:	0004      	movs	r4, r0
	HAL_SPICSDeassert();
    815e:	4b04      	ldr	r3, [pc, #16]	; (8170 <RADIO_RegisterRead+0x28>)
    8160:	4798      	blx	r3
}
    8162:	0020      	movs	r0, r4
    8164:	bd10      	pop	{r4, pc}
    8166:	46c0      	nop			; (mov r8, r8)
    8168:	00007ead 	.word	0x00007ead
    816c:	00007dd9 	.word	0x00007dd9
    8170:	00007ec9 	.word	0x00007ec9

00008174 <RADIO_FrameWrite>:
{
    8174:	b570      	push	{r4, r5, r6, lr}
    8176:	0004      	movs	r4, r0
    8178:	000e      	movs	r6, r1
    817a:	0015      	movs	r5, r2
    HAL_SPICSAssert();
    817c:	4b0a      	ldr	r3, [pc, #40]	; (81a8 <RADIO_FrameWrite+0x34>)
    817e:	4798      	blx	r3
    HAL_SPISend(REG_WRITE_CMD | offset);
    8180:	2080      	movs	r0, #128	; 0x80
    8182:	4320      	orrs	r0, r4
    8184:	4b09      	ldr	r3, [pc, #36]	; (81ac <RADIO_FrameWrite+0x38>)
    8186:	4798      	blx	r3
    for (uint8_t i = 0; i < bufferLen; i++)
    8188:	2d00      	cmp	r5, #0
    818a:	d00a      	beq.n	81a2 <RADIO_FrameWrite+0x2e>
    818c:	0034      	movs	r4, r6
    818e:	3d01      	subs	r5, #1
    8190:	b2ed      	uxtb	r5, r5
    8192:	3501      	adds	r5, #1
    8194:	1975      	adds	r5, r6, r5
	    HAL_SPISend(buffer[i]);
    8196:	4e05      	ldr	r6, [pc, #20]	; (81ac <RADIO_FrameWrite+0x38>)
    8198:	7820      	ldrb	r0, [r4, #0]
    819a:	47b0      	blx	r6
    819c:	3401      	adds	r4, #1
    for (uint8_t i = 0; i < bufferLen; i++)
    819e:	42ac      	cmp	r4, r5
    81a0:	d1fa      	bne.n	8198 <RADIO_FrameWrite+0x24>
    HAL_SPICSDeassert();
    81a2:	4b03      	ldr	r3, [pc, #12]	; (81b0 <RADIO_FrameWrite+0x3c>)
    81a4:	4798      	blx	r3
}
    81a6:	bd70      	pop	{r4, r5, r6, pc}
    81a8:	00007ead 	.word	0x00007ead
    81ac:	00007dd9 	.word	0x00007dd9
    81b0:	00007ec9 	.word	0x00007ec9

000081b4 <RADIO_FrameRead>:
{
    81b4:	b570      	push	{r4, r5, r6, lr}
    81b6:	0004      	movs	r4, r0
    81b8:	000e      	movs	r6, r1
    81ba:	0015      	movs	r5, r2
    HAL_SPICSAssert();
    81bc:	4b0a      	ldr	r3, [pc, #40]	; (81e8 <RADIO_FrameRead+0x34>)
    81be:	4798      	blx	r3
    HAL_SPISend(offset);
    81c0:	0020      	movs	r0, r4
    81c2:	4b0a      	ldr	r3, [pc, #40]	; (81ec <RADIO_FrameRead+0x38>)
    81c4:	4798      	blx	r3
    for (uint8_t i = 0; i < bufferLen; i++)
    81c6:	2d00      	cmp	r5, #0
    81c8:	d00b      	beq.n	81e2 <RADIO_FrameRead+0x2e>
    81ca:	0034      	movs	r4, r6
    81cc:	3d01      	subs	r5, #1
    81ce:	b2ed      	uxtb	r5, r5
    81d0:	3501      	adds	r5, #1
    81d2:	1975      	adds	r5, r6, r5
	    buffer[i] = HAL_SPISend(0xFF);
    81d4:	4e05      	ldr	r6, [pc, #20]	; (81ec <RADIO_FrameRead+0x38>)
    81d6:	20ff      	movs	r0, #255	; 0xff
    81d8:	47b0      	blx	r6
    81da:	7020      	strb	r0, [r4, #0]
    81dc:	3401      	adds	r4, #1
    for (uint8_t i = 0; i < bufferLen; i++)
    81de:	42ac      	cmp	r4, r5
    81e0:	d1f9      	bne.n	81d6 <RADIO_FrameRead+0x22>
    HAL_SPICSDeassert();
    81e2:	4b03      	ldr	r3, [pc, #12]	; (81f0 <RADIO_FrameRead+0x3c>)
    81e4:	4798      	blx	r3
}
    81e6:	bd70      	pop	{r4, r5, r6, pc}
    81e8:	00007ead 	.word	0x00007ead
    81ec:	00007dd9 	.word	0x00007dd9
    81f0:	00007ec9 	.word	0x00007ec9

000081f4 <HAL_RegisterDioInterruptHandler>:
 * \param[in] dioPin  - DIO pin
 * \param[in] handler - function to be called upon given DIO interrupt
 */
void HAL_RegisterDioInterruptHandler(uint8_t dioPin, DioInterruptHandler_t handler)
{
  switch (dioPin)
    81f4:	2802      	cmp	r0, #2
    81f6:	d007      	beq.n	8208 <HAL_RegisterDioInterruptHandler+0x14>
    81f8:	2804      	cmp	r0, #4
    81fa:	d008      	beq.n	820e <HAL_RegisterDioInterruptHandler+0x1a>
    81fc:	2801      	cmp	r0, #1
    81fe:	d000      	beq.n	8202 <HAL_RegisterDioInterruptHandler+0xe>
#endif

    default:
      break;
  }
}
    8200:	4770      	bx	lr
      interruptHandlerDio0 = handler;
    8202:	4b04      	ldr	r3, [pc, #16]	; (8214 <HAL_RegisterDioInterruptHandler+0x20>)
    8204:	6019      	str	r1, [r3, #0]
      break;
    8206:	e7fb      	b.n	8200 <HAL_RegisterDioInterruptHandler+0xc>
      interruptHandlerDio1 = handler;
    8208:	4b03      	ldr	r3, [pc, #12]	; (8218 <HAL_RegisterDioInterruptHandler+0x24>)
    820a:	6019      	str	r1, [r3, #0]
      break;
    820c:	e7f8      	b.n	8200 <HAL_RegisterDioInterruptHandler+0xc>
      interruptHandlerDio2 = handler;
    820e:	4b03      	ldr	r3, [pc, #12]	; (821c <HAL_RegisterDioInterruptHandler+0x28>)
    8210:	6019      	str	r1, [r3, #0]
}
    8212:	e7f5      	b.n	8200 <HAL_RegisterDioInterruptHandler+0xc>
    8214:	20000c58 	.word	0x20000c58
    8218:	20000c5c 	.word	0x20000c5c
    821c:	20000c60 	.word	0x20000c60

00008220 <HAL_EnableRFCtrl>:

void HAL_EnableRFCtrl(RFCtrl1_t RFCtrl1, RFCtrl2_t RFCtrl2)
{
	/* In standard SAMR34_XPRO, Only RFO_HF and PA_BOOST needs to be controlled by a GPIO pin */
#ifdef RFSWITCH_ENABLE
   if ((RFCtrl1 == RFO_HF) || (RFCtrl2 == RX))
    8220:	2801      	cmp	r0, #1
    8222:	d00a      	beq.n	823a <HAL_EnableRFCtrl+0x1a>
    8224:	2900      	cmp	r1, #0
    8226:	d008      	beq.n	823a <HAL_EnableRFCtrl+0x1a>
   {
		port_pin_set_output_level(RF_SWITCH_PIN, RF_SWITCH_ACTIVE);		
   }
   else if ((RFCtrl1 == PA_BOOST) && (RFCtrl2 == TX))
    8228:	2802      	cmp	r0, #2
    822a:	d10a      	bne.n	8242 <HAL_EnableRFCtrl+0x22>
    822c:	2901      	cmp	r1, #1
    822e:	d108      	bne.n	8242 <HAL_EnableRFCtrl+0x22>
		port_base->OUTCLR.reg = pin_mask;
    8230:	2280      	movs	r2, #128	; 0x80
    8232:	0192      	lsls	r2, r2, #6
    8234:	4b03      	ldr	r3, [pc, #12]	; (8244 <HAL_EnableRFCtrl+0x24>)
    8236:	615a      	str	r2, [r3, #20]
   {
	   port_pin_set_output_level(RF_SWITCH_PIN, RF_SWITCH_INACTIVE);
   }
#endif	
}
    8238:	e003      	b.n	8242 <HAL_EnableRFCtrl+0x22>
		port_base->OUTSET.reg = pin_mask;
    823a:	2280      	movs	r2, #128	; 0x80
    823c:	0192      	lsls	r2, r2, #6
    823e:	4b01      	ldr	r3, [pc, #4]	; (8244 <HAL_EnableRFCtrl+0x24>)
    8240:	619a      	str	r2, [r3, #24]
    8242:	4770      	bx	lr
    8244:	40002800 	.word	0x40002800

00008248 <HAL_DisableRFCtrl>:

void HAL_DisableRFCtrl(RFCtrl1_t RFCtrl1, RFCtrl2_t RFCtrl2)
{
	/* In standard SAMR34_XPRO, Only RFO_HF and PA_BOOST needs to be controlled by a GPIO pin */
#ifdef RFSWITCH_ENABLE
	if ((RFCtrl1 == RFO_HF) || (RFCtrl2 == RX))
    8248:	2801      	cmp	r0, #1
    824a:	d001      	beq.n	8250 <HAL_DisableRFCtrl+0x8>
    824c:	2900      	cmp	r1, #0
    824e:	d103      	bne.n	8258 <HAL_DisableRFCtrl+0x10>
		port_base->OUTCLR.reg = pin_mask;
    8250:	2280      	movs	r2, #128	; 0x80
    8252:	0192      	lsls	r2, r2, #6
    8254:	4b01      	ldr	r3, [pc, #4]	; (825c <HAL_DisableRFCtrl+0x14>)
    8256:	615a      	str	r2, [r3, #20]
	{
		port_pin_set_output_level(RF_SWITCH_PIN, RF_SWITCH_INACTIVE);	
	}
#endif	
}
    8258:	4770      	bx	lr
    825a:	46c0      	nop			; (mov r8, r8)
    825c:	40002800 	.word	0x40002800

00008260 <HAL_GetRadioClkStabilizationDelay>:
 * \param[out] Time value in ms
 */
uint8_t HAL_GetRadioClkStabilizationDelay(void)
{
	return RADIO_CLK_STABILITATION_DELAY;
}
    8260:	2002      	movs	r0, #2
    8262:	4770      	bx	lr

00008264 <HAL_GetRadioClkSrc>:
 * \param[out] Type of clock source TCXO or XTAL
 */
RadioClockSources_t HAL_GetRadioClkSrc(void)
{
	return RADIO_CLK_SRC;
}
    8264:	2000      	movs	r0, #0
    8266:	4770      	bx	lr

00008268 <HAL_TCXOPowerOn>:
 *
 * \param[in] None
 * \param[out] None
 */
void HAL_TCXOPowerOn(void)
{
    8268:	b510      	push	{r4, lr}
		port_base->OUTSET.reg = pin_mask;
    826a:	2280      	movs	r2, #128	; 0x80
    826c:	0092      	lsls	r2, r2, #2
    826e:	4b03      	ldr	r3, [pc, #12]	; (827c <HAL_TCXOPowerOn+0x14>)
    8270:	619a      	str	r2, [r3, #24]
#ifdef TCXO_ENABLE
	port_pin_set_output_level(TCXO_PWR_PIN, TCXO_PWR_ACTIVE);
	delay_ms(RADIO_CLK_STABILITATION_DELAY);
    8272:	2002      	movs	r0, #2
    8274:	4b02      	ldr	r3, [pc, #8]	; (8280 <HAL_TCXOPowerOn+0x18>)
    8276:	4798      	blx	r3
#endif
}
    8278:	bd10      	pop	{r4, pc}
    827a:	46c0      	nop			; (mov r8, r8)
    827c:	40002800 	.word	0x40002800
    8280:	000045d5 	.word	0x000045d5

00008284 <HAL_TCXOPowerOff>:
		port_base->OUTCLR.reg = pin_mask;
    8284:	2280      	movs	r2, #128	; 0x80
    8286:	0092      	lsls	r2, r2, #2
    8288:	4b01      	ldr	r3, [pc, #4]	; (8290 <HAL_TCXOPowerOff+0xc>)
    828a:	615a      	str	r2, [r3, #20]
#ifdef TCXO_ENABLE
#ifndef TCXO_ALWAYS_ON
	port_pin_set_output_level(TCXO_PWR_PIN, TCXO_PWR_INACTIVE);
#endif
#endif
}
    828c:	4770      	bx	lr
    828e:	46c0      	nop			; (mov r8, r8)
    8290:	40002800 	.word	0x40002800

00008294 <HAL_Sleep>:
 *
 * \param[in] mode - sleep mode
 */
void HAL_Sleep(HAL_SleepMode_t mode)
{
	switch (mode)
    8294:	2801      	cmp	r0, #1
    8296:	d002      	beq.n	829e <HAL_Sleep+0xa>
    8298:	2802      	cmp	r0, #2
    829a:	d00c      	beq.n	82b6 <HAL_Sleep+0x22>
		{
			/* other sleep modes are not implemented currently */
			break;
		}
	}
}
    829c:	4770      	bx	lr
	PM->SLEEPCFG.reg = sleep_mode;
    829e:	2204      	movs	r2, #4
    82a0:	2380      	movs	r3, #128	; 0x80
    82a2:	05db      	lsls	r3, r3, #23
    82a4:	705a      	strb	r2, [r3, #1]
	while(PM->SLEEPCFG.reg != sleep_mode) ;
    82a6:	001a      	movs	r2, r3
    82a8:	7853      	ldrb	r3, [r2, #1]
    82aa:	2b04      	cmp	r3, #4
    82ac:	d1fc      	bne.n	82a8 <HAL_Sleep+0x14>
  __ASM volatile ("dsb 0xF":::"memory");
    82ae:	f3bf 8f4f 	dsb	sy
	__WFI();
    82b2:	bf30      	wfi
    82b4:	e7f2      	b.n	829c <HAL_Sleep+0x8>
	PM->SLEEPCFG.reg = sleep_mode;
    82b6:	2205      	movs	r2, #5
    82b8:	2380      	movs	r3, #128	; 0x80
    82ba:	05db      	lsls	r3, r3, #23
    82bc:	705a      	strb	r2, [r3, #1]
	while(PM->SLEEPCFG.reg != sleep_mode) ;
    82be:	001a      	movs	r2, r3
    82c0:	7853      	ldrb	r3, [r2, #1]
    82c2:	2b05      	cmp	r3, #5
    82c4:	d1fc      	bne.n	82c0 <HAL_Sleep+0x2c>
    82c6:	f3bf 8f4f 	dsb	sy
	__WFI();
    82ca:	bf30      	wfi
    82cc:	e7e6      	b.n	829c <HAL_Sleep+0x8>
	...

000082d0 <SleepTimerInit>:
/************************************** IMPLEMENTATION************************/
/**
* \brief Initializes the sleep timer module
*/
void SleepTimerInit(void)
{
    82d0:	b510      	push	{r4, lr}
    82d2:	b084      	sub	sp, #16
	/* Sanity check argument */
	Assert(config);

	/* Set default into configuration structure */
	config->prescaler           = RTC_COUNT_PRESCALER_DIV_1024;
	config->mode                = RTC_COUNT_MODE_32BIT;
    82d4:	2201      	movs	r2, #1
    82d6:	466b      	mov	r3, sp
    82d8:	709a      	strb	r2, [r3, #2]
	config->clear_on_match      = false;
    82da:	2300      	movs	r3, #0
    82dc:	4669      	mov	r1, sp
    82de:	70cb      	strb	r3, [r1, #3]

#ifdef FEATURE_RTC_CONTINUOUSLY_UPDATED
	config->continuously_update = false;
#endif
#if (SAML21XXXB) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30) || (SAMR34) || (SAMR35) || (WLR089)
	config->enable_read_sync    = true;
    82e0:	710a      	strb	r2, [r1, #4]
	struct rtc_count_config rtc_config;
	rtc_count_get_config_defaults(&rtc_config);
	
	rtc_config.prescaler = RTC_COUNT_PRESCALER_OFF;
    82e2:	466a      	mov	r2, sp
    82e4:	800b      	strh	r3, [r1, #0]
	rtc_config.enable_read_sync = true;
	rtc_config.compare_values[0] = COMPARE_COUNT_MAX_VALUE;
    82e6:	3b01      	subs	r3, #1
    82e8:	9302      	str	r3, [sp, #8]
	rtc_config.compare_values[1] = COMPARE_COUNT_MAX_VALUE;
    82ea:	9303      	str	r3, [sp, #12]
	rtc_count_init(&rtc, RTC, &rtc_config);
    82ec:	4c04      	ldr	r4, [pc, #16]	; (8300 <SleepTimerInit+0x30>)
    82ee:	4905      	ldr	r1, [pc, #20]	; (8304 <SleepTimerInit+0x34>)
    82f0:	0020      	movs	r0, r4
    82f2:	4b05      	ldr	r3, [pc, #20]	; (8308 <SleepTimerInit+0x38>)
    82f4:	4798      	blx	r3
	rtc_count_enable(&rtc);
    82f6:	0020      	movs	r0, r4
    82f8:	4b04      	ldr	r3, [pc, #16]	; (830c <SleepTimerInit+0x3c>)
    82fa:	4798      	blx	r3
}
    82fc:	b004      	add	sp, #16
    82fe:	bd10      	pop	{r4, pc}
    8300:	20002274 	.word	0x20002274
    8304:	40002000 	.word	0x40002000
    8308:	000050e5 	.word	0x000050e5
    830c:	00004f65 	.word	0x00004f65

00008310 <SleepTimerGetElapsedTime>:
/**
* \brief Calculate the Elapsed Time from the previous call of this function
* \retval Elapsed time in ticks
*/
uint32_t SleepTimerGetElapsedTime(void)
{
    8310:	b510      	push	{r4, lr}
	return rtc_count_get_count(&rtc);
    8312:	4802      	ldr	r0, [pc, #8]	; (831c <SleepTimerGetElapsedTime+0xc>)
    8314:	4b02      	ldr	r3, [pc, #8]	; (8320 <SleepTimerGetElapsedTime+0x10>)
    8316:	4798      	blx	r3
}
    8318:	bd10      	pop	{r4, pc}
    831a:	46c0      	nop			; (mov r8, r8)
    831c:	20002274 	.word	0x20002274
    8320:	00005055 	.word	0x00005055

00008324 <SleepTimerStart>:

/**
* \brief Initializes the sleep timer
*/
void SleepTimerStart(uint32_t sleepTicks, void (*cb)(void))
{
    8324:	b570      	push	{r4, r5, r6, lr}
    8326:	0005      	movs	r5, r0
    8328:	000e      	movs	r6, r1
	rtc_count_set_count(&rtc, 0);
    832a:	4c0a      	ldr	r4, [pc, #40]	; (8354 <SleepTimerStart+0x30>)
    832c:	2100      	movs	r1, #0
    832e:	0020      	movs	r0, r4
    8330:	4b09      	ldr	r3, [pc, #36]	; (8358 <SleepTimerStart+0x34>)
    8332:	4798      	blx	r3
	rtc_count_register_callback(&rtc, cb, RTC_COUNT_CALLBACK_COMPARE_0);
    8334:	2208      	movs	r2, #8
    8336:	0031      	movs	r1, r6
    8338:	0020      	movs	r0, r4
    833a:	4b08      	ldr	r3, [pc, #32]	; (835c <SleepTimerStart+0x38>)
    833c:	4798      	blx	r3
	rtc_count_set_compare(&rtc, sleepTicks, RTC_COUNT_COMPARE_0);
    833e:	2200      	movs	r2, #0
    8340:	0029      	movs	r1, r5
    8342:	0020      	movs	r0, r4
    8344:	4b06      	ldr	r3, [pc, #24]	; (8360 <SleepTimerStart+0x3c>)
    8346:	4798      	blx	r3
	rtc_count_enable_callback(&rtc, RTC_COUNT_CALLBACK_COMPARE_0);
    8348:	2108      	movs	r1, #8
    834a:	0020      	movs	r0, r4
    834c:	4b05      	ldr	r3, [pc, #20]	; (8364 <SleepTimerStart+0x40>)
    834e:	4798      	blx	r3
}
    8350:	bd70      	pop	{r4, r5, r6, pc}
    8352:	46c0      	nop			; (mov r8, r8)
    8354:	20002274 	.word	0x20002274
    8358:	00005011 	.word	0x00005011
    835c:	00005181 	.word	0x00005181
    8360:	00005081 	.word	0x00005081
    8364:	000051bd 	.word	0x000051bd

00008368 <SleepTimerStop>:

/**
* \brief Stop the sleep timer
*/
void SleepTimerStop(void)
{
    8368:	b510      	push	{r4, lr}
	rtc_count_disable_callback(&rtc, RTC_COUNT_CALLBACK_COMPARE_0);
    836a:	2108      	movs	r1, #8
    836c:	4801      	ldr	r0, [pc, #4]	; (8374 <SleepTimerStop+0xc>)
    836e:	4b02      	ldr	r3, [pc, #8]	; (8378 <SleepTimerStop+0x10>)
    8370:	4798      	blx	r3
}
    8372:	bd10      	pop	{r4, pc}
    8374:	20002274 	.word	0x20002274
    8378:	00005201 	.word	0x00005201

0000837c <SystemBlockingWaitMs>:
 * waiting with the MCU in sleep.
 * Find out how long it takes the MCU to go to and wake up from sleep to see if
 * it makes sense to go to sleep at all 
 */
void SystemBlockingWaitMs(uint32_t ms)
{
    837c:	b510      	push	{r4, lr}
#ifndef UT
    delay_ms(ms);
    837e:	2800      	cmp	r0, #0
    8380:	d103      	bne.n	838a <SystemBlockingWaitMs+0xe>
    8382:	2001      	movs	r0, #1
    8384:	4b02      	ldr	r3, [pc, #8]	; (8390 <SystemBlockingWaitMs+0x14>)
    8386:	4798      	blx	r3
#endif
}
    8388:	bd10      	pop	{r4, pc}
    delay_ms(ms);
    838a:	4b02      	ldr	r3, [pc, #8]	; (8394 <SystemBlockingWaitMs+0x18>)
    838c:	4798      	blx	r3
    838e:	e7fb      	b.n	8388 <SystemBlockingWaitMs+0xc>
    8390:	000045a9 	.word	0x000045a9
    8394:	000045d5 	.word	0x000045d5

00008398 <System_GetExternalEui>:
#if (EDBG_EUI_READ == 1)
#include "edbg_eui.h"
#endif

void System_GetExternalEui(uint8_t *id)
{
    8398:	b510      	push	{r4, lr}
    839a:	b082      	sub	sp, #8
    839c:	466a      	mov	r2, sp
    839e:	4b0a      	ldr	r3, [pc, #40]	; (83c8 <System_GetExternalEui+0x30>)
#elif (defined(__WLR089U0__) && MODULE_EUI_READ == 1)

	#define NVM_UID_ADDRESS   ((volatile uint16_t *)(0x0080400AU))
	uint8_t i = 0, j = 0 ;
	uint8_t moduleDevEUI[8] ;
	for (i = 0; i < 8; i += 2, j++)
    83a0:	4c0a      	ldr	r4, [pc, #40]	; (83cc <System_GetExternalEui+0x34>)
	{
		moduleDevEUI[i] = (NVM_UID_ADDRESS[j] & 0xFF) ;
    83a2:	8819      	ldrh	r1, [r3, #0]
    83a4:	7011      	strb	r1, [r2, #0]
		moduleDevEUI[i + 1] = (NVM_UID_ADDRESS[j] >> 8) ;
    83a6:	8819      	ldrh	r1, [r3, #0]
    83a8:	0a09      	lsrs	r1, r1, #8
    83aa:	7051      	strb	r1, [r2, #1]
    83ac:	3302      	adds	r3, #2
    83ae:	3202      	adds	r2, #2
	for (i = 0; i < 8; i += 2, j++)
    83b0:	42a3      	cmp	r3, r4
    83b2:	d1f6      	bne.n	83a2 <System_GetExternalEui+0xa>
    83b4:	2300      	movs	r3, #0
	}
	for (i= 0; i < 8; i++)
	{
		*id = moduleDevEUI[i] ;
    83b6:	466a      	mov	r2, sp
    83b8:	5c9a      	ldrb	r2, [r3, r2]
    83ba:	54c2      	strb	r2, [r0, r3]
    83bc:	3301      	adds	r3, #1
	for (i= 0; i < 8; i++)
    83be:	2b08      	cmp	r3, #8
    83c0:	d1f9      	bne.n	83b6 <System_GetExternalEui+0x1e>
		id++ ;
	}
#endif
}
    83c2:	b002      	add	sp, #8
    83c4:	bd10      	pop	{r4, pc}
    83c6:	46c0      	nop			; (mov r8, r8)
    83c8:	0080400a 	.word	0x0080400a
    83cc:	00804012 	.word	0x00804012

000083d0 <system_enter_critical_section>:

void system_enter_critical_section(void)
{
    83d0:	b510      	push	{r4, lr}
	cpu_irq_enter_critical();
    83d2:	4b01      	ldr	r3, [pc, #4]	; (83d8 <system_enter_critical_section+0x8>)
    83d4:	4798      	blx	r3
#ifndef UT
	system_interrupt_enter_critical_section();
#endif
}
    83d6:	bd10      	pop	{r4, pc}
    83d8:	00004601 	.word	0x00004601

000083dc <system_leave_critical_section>:

void system_leave_critical_section(void)
{
    83dc:	b510      	push	{r4, lr}
	cpu_irq_leave_critical();
    83de:	4b01      	ldr	r3, [pc, #4]	; (83e4 <system_leave_critical_section+0x8>)
    83e0:	4798      	blx	r3
#ifndef UT
	system_interrupt_leave_critical_section();
#endif
}
    83e2:	bd10      	pop	{r4, pc}
    83e4:	00004641 	.word	0x00004641

000083e8 <PMM_Wakeup>:

/**
* \brief Wakeup from sleep
*/
void PMM_Wakeup(void)
{
    83e8:	b570      	push	{r4, r5, r6, lr}
    uint64_t sleptTimeUs = 0;

    if (PMM_STATE_SLEEP == pmmState)
    83ea:	4b16      	ldr	r3, [pc, #88]	; (8444 <PMM_Wakeup+0x5c>)
    83ec:	781b      	ldrb	r3, [r3, #0]
    83ee:	2b01      	cmp	r3, #1
    83f0:	d000      	beq.n	83f4 <PMM_Wakeup+0xc>
        {
            sleepReq->pmmWakeupCallback(US_TO_MS(sleptTimeUs));
            sleepReq = NULL;
        }
    }
}
    83f2:	bd70      	pop	{r4, r5, r6, pc}
		pmmState = PMM_STATE_ACTIVE;
    83f4:	2200      	movs	r2, #0
    83f6:	4b13      	ldr	r3, [pc, #76]	; (8444 <PMM_Wakeup+0x5c>)
    83f8:	701a      	strb	r2, [r3, #0]
        sleptTimeUs = SLEEP_TICKS_TO_US(SleepTimerGetElapsedTime());
    83fa:	4b13      	ldr	r3, [pc, #76]	; (8448 <PMM_Wakeup+0x60>)
    83fc:	4798      	blx	r3
    83fe:	4b13      	ldr	r3, [pc, #76]	; (844c <PMM_Wakeup+0x64>)
    8400:	4798      	blx	r3
    8402:	4913      	ldr	r1, [pc, #76]	; (8450 <PMM_Wakeup+0x68>)
    8404:	4b13      	ldr	r3, [pc, #76]	; (8454 <PMM_Wakeup+0x6c>)
    8406:	4798      	blx	r3
    8408:	4b13      	ldr	r3, [pc, #76]	; (8458 <PMM_Wakeup+0x70>)
    840a:	4798      	blx	r3
    840c:	0004      	movs	r4, r0
    840e:	000d      	movs	r5, r1
        SleepTimerStop();
    8410:	4b12      	ldr	r3, [pc, #72]	; (845c <PMM_Wakeup+0x74>)
    8412:	4798      	blx	r3
        SystemTimerSync(sleptTimeUs);
    8414:	0020      	movs	r0, r4
    8416:	0029      	movs	r1, r5
    8418:	4b11      	ldr	r3, [pc, #68]	; (8460 <PMM_Wakeup+0x78>)
    841a:	4798      	blx	r3
        if (sleepReq && sleepReq->pmmWakeupCallback)
    841c:	4b11      	ldr	r3, [pc, #68]	; (8464 <PMM_Wakeup+0x7c>)
    841e:	681b      	ldr	r3, [r3, #0]
    8420:	2b00      	cmp	r3, #0
    8422:	d0e6      	beq.n	83f2 <PMM_Wakeup+0xa>
    8424:	689e      	ldr	r6, [r3, #8]
    8426:	2e00      	cmp	r6, #0
    8428:	d0e3      	beq.n	83f2 <PMM_Wakeup+0xa>
            sleepReq->pmmWakeupCallback(US_TO_MS(sleptTimeUs));
    842a:	22fa      	movs	r2, #250	; 0xfa
    842c:	0092      	lsls	r2, r2, #2
    842e:	2300      	movs	r3, #0
    8430:	0020      	movs	r0, r4
    8432:	0029      	movs	r1, r5
    8434:	4c0c      	ldr	r4, [pc, #48]	; (8468 <PMM_Wakeup+0x80>)
    8436:	47a0      	blx	r4
    8438:	47b0      	blx	r6
            sleepReq = NULL;
    843a:	2200      	movs	r2, #0
    843c:	4b09      	ldr	r3, [pc, #36]	; (8464 <PMM_Wakeup+0x7c>)
    843e:	601a      	str	r2, [r3, #0]
}
    8440:	e7d7      	b.n	83f2 <PMM_Wakeup+0xa>
    8442:	46c0      	nop			; (mov r8, r8)
    8444:	20000c70 	.word	0x20000c70
    8448:	00008311 	.word	0x00008311
    844c:	00017a39 	.word	0x00017a39
    8450:	41f423d7 	.word	0x41f423d7
    8454:	000173e1 	.word	0x000173e1
    8458:	00016b1d 	.word	0x00016b1d
    845c:	00008369 	.word	0x00008369
    8460:	0000f31d 	.word	0x0000f31d
    8464:	20000c74 	.word	0x20000c74
    8468:	00016a1d 	.word	0x00016a1d

0000846c <PMM_Sleep>:
{
    846c:	b570      	push	{r4, r5, r6, lr}
    846e:	1e04      	subs	r4, r0, #0
    if ( req && (PMM_STATE_ACTIVE == pmmState) )
    8470:	d055      	beq.n	851e <PMM_Sleep+0xb2>
    8472:	4b2c      	ldr	r3, [pc, #176]	; (8524 <PMM_Sleep+0xb8>)
    8474:	781b      	ldrb	r3, [r3, #0]
    PMM_Status_t status = PMM_SLEEP_REQ_DENIED;
    8476:	2000      	movs	r0, #0
    if ( req && (PMM_STATE_ACTIVE == pmmState) )
    8478:	2b00      	cmp	r3, #0
    847a:	d000      	beq.n	847e <PMM_Sleep+0x12>
}
    847c:	bd70      	pop	{r4, r5, r6, pc}
        canSleep = SYSTEM_ReadyToSleep();
    847e:	4b2a      	ldr	r3, [pc, #168]	; (8528 <PMM_Sleep+0xbc>)
    8480:	4798      	blx	r3
    8482:	0003      	movs	r3, r0
            return status;
    8484:	2000      	movs	r0, #0
        canSleep = canSleep && validateSleepDuration( req->sleepTimeMs );
    8486:	2b00      	cmp	r3, #0
    8488:	d0f8      	beq.n	847c <PMM_Sleep+0x10>
        (PMM_SLEEPTIME_MAX_MS >= durationMs) && \
    848a:	6823      	ldr	r3, [r4, #0]
    848c:	4a27      	ldr	r2, [pc, #156]	; (852c <PMM_Sleep+0xc0>)
    848e:	4694      	mov	ip, r2
    8490:	4463      	add	r3, ip
        if ( false == canSleep )
    8492:	4a27      	ldr	r2, [pc, #156]	; (8530 <PMM_Sleep+0xc4>)
    8494:	4293      	cmp	r3, r2
    8496:	d8f1      	bhi.n	847c <PMM_Sleep+0x10>
        if ( SLEEP_MODE_BACKUP == req->sleep_mode )
    8498:	7923      	ldrb	r3, [r4, #4]
    849a:	2b02      	cmp	r3, #2
    849c:	d021      	beq.n	84e2 <PMM_Sleep+0x76>
        else if ( SLEEP_MODE_STANDBY == req->sleep_mode )
    849e:	2b01      	cmp	r3, #1
    84a0:	d025      	beq.n	84ee <PMM_Sleep+0x82>
    uint32_t sysSleepTime = ~0u; /* 0xffFFffFF is invalid */
    84a2:	2501      	movs	r5, #1
    84a4:	426d      	negs	r5, r5
        if ( canSleep && SYSTEM_ReadyToSleep() )
    84a6:	4b20      	ldr	r3, [pc, #128]	; (8528 <PMM_Sleep+0xbc>)
    84a8:	4798      	blx	r3
    84aa:	0003      	movs	r3, r0
    PMM_Status_t status = PMM_SLEEP_REQ_DENIED;
    84ac:	2000      	movs	r0, #0
        if ( canSleep && SYSTEM_ReadyToSleep() )
    84ae:	2b00      	cmp	r3, #0
    84b0:	d0e4      	beq.n	847c <PMM_Sleep+0x10>
            SystemTimerSuspend();
    84b2:	4b20      	ldr	r3, [pc, #128]	; (8534 <PMM_Sleep+0xc8>)
    84b4:	4798      	blx	r3
            SleepTimerStart( MS_TO_SLEEP_TICKS( sysSleepTime - PMM_WAKEUPTIME_MS ), PMM_Wakeup );
    84b6:	0028      	movs	r0, r5
    84b8:	380a      	subs	r0, #10
    84ba:	4b1f      	ldr	r3, [pc, #124]	; (8538 <PMM_Sleep+0xcc>)
    84bc:	4798      	blx	r3
    84be:	491f      	ldr	r1, [pc, #124]	; (853c <PMM_Sleep+0xd0>)
    84c0:	4b1f      	ldr	r3, [pc, #124]	; (8540 <PMM_Sleep+0xd4>)
    84c2:	4798      	blx	r3
    84c4:	4b1f      	ldr	r3, [pc, #124]	; (8544 <PMM_Sleep+0xd8>)
    84c6:	4798      	blx	r3
    84c8:	491f      	ldr	r1, [pc, #124]	; (8548 <PMM_Sleep+0xdc>)
    84ca:	4b20      	ldr	r3, [pc, #128]	; (854c <PMM_Sleep+0xe0>)
    84cc:	4798      	blx	r3
            pmmState = PMM_STATE_SLEEP;
    84ce:	2201      	movs	r2, #1
    84d0:	4b14      	ldr	r3, [pc, #80]	; (8524 <PMM_Sleep+0xb8>)
    84d2:	701a      	strb	r2, [r3, #0]
            sleepReq = req;
    84d4:	4b1e      	ldr	r3, [pc, #120]	; (8550 <PMM_Sleep+0xe4>)
    84d6:	601c      	str	r4, [r3, #0]
            HAL_Sleep(req->sleep_mode);
    84d8:	7920      	ldrb	r0, [r4, #4]
    84da:	4b1e      	ldr	r3, [pc, #120]	; (8554 <PMM_Sleep+0xe8>)
    84dc:	4798      	blx	r3
            status = PMM_SLEEP_REQ_PROCESSED;
    84de:	2001      	movs	r0, #1
    84e0:	e7cc      	b.n	847c <PMM_Sleep+0x10>
            canSleep = canSleep && ( SWTIMER_INVALID_TIMEOUT == SwTimerNextExpiryDuration() );
    84e2:	4b1d      	ldr	r3, [pc, #116]	; (8558 <PMM_Sleep+0xec>)
    84e4:	4798      	blx	r3
        if ( canSleep && SYSTEM_ReadyToSleep() )
    84e6:	1c43      	adds	r3, r0, #1
    84e8:	d017      	beq.n	851a <PMM_Sleep+0xae>
    PMM_Status_t status = PMM_SLEEP_REQ_DENIED;
    84ea:	2000      	movs	r0, #0
    84ec:	e7c6      	b.n	847c <PMM_Sleep+0x10>
            sysSleepTime = SwTimerNextExpiryDuration();
    84ee:	4b1a      	ldr	r3, [pc, #104]	; (8558 <PMM_Sleep+0xec>)
    84f0:	4798      	blx	r3
            sysSleepTime = (SWTIMER_INVALID_TIMEOUT == sysSleepTime) ? PMM_SLEEPTIME_MAX_MS : US_TO_MS( sysSleepTime );
    84f2:	1c43      	adds	r3, r0, #1
    84f4:	d00b      	beq.n	850e <PMM_Sleep+0xa2>
    84f6:	21fa      	movs	r1, #250	; 0xfa
    84f8:	0089      	lsls	r1, r1, #2
    84fa:	4b18      	ldr	r3, [pc, #96]	; (855c <PMM_Sleep+0xf0>)
    84fc:	4798      	blx	r3
    84fe:	0003      	movs	r3, r0
        (PMM_SLEEPTIME_MAX_MS >= durationMs) && \
    8500:	4a0a      	ldr	r2, [pc, #40]	; (852c <PMM_Sleep+0xc0>)
    8502:	1881      	adds	r1, r0, r2
            if ( canSleep && (req->sleepTimeMs < sysSleepTime) )
    8504:	4a0a      	ldr	r2, [pc, #40]	; (8530 <PMM_Sleep+0xc4>)
    PMM_Status_t status = PMM_SLEEP_REQ_DENIED;
    8506:	2000      	movs	r0, #0
            if ( canSleep && (req->sleepTimeMs < sysSleepTime) )
    8508:	4291      	cmp	r1, r2
    850a:	d8b7      	bhi.n	847c <PMM_Sleep+0x10>
    850c:	e000      	b.n	8510 <PMM_Sleep+0xa4>
            sysSleepTime = (SWTIMER_INVALID_TIMEOUT == sysSleepTime) ? PMM_SLEEPTIME_MAX_MS : US_TO_MS( sysSleepTime );
    850e:	4b14      	ldr	r3, [pc, #80]	; (8560 <PMM_Sleep+0xf4>)
    8510:	6825      	ldr	r5, [r4, #0]
    8512:	429d      	cmp	r5, r3
    8514:	d9c7      	bls.n	84a6 <PMM_Sleep+0x3a>
    8516:	001d      	movs	r5, r3
    8518:	e7c5      	b.n	84a6 <PMM_Sleep+0x3a>
            sysSleepTime = req->sleepTimeMs;
    851a:	6825      	ldr	r5, [r4, #0]
    851c:	e7c3      	b.n	84a6 <PMM_Sleep+0x3a>
    PMM_Status_t status = PMM_SLEEP_REQ_DENIED;
    851e:	2000      	movs	r0, #0
    8520:	e7ac      	b.n	847c <PMM_Sleep+0x10>
    8522:	46c0      	nop			; (mov r8, r8)
    8524:	20000c70 	.word	0x20000c70
    8528:	0000f4e1 	.word	0x0000f4e1
    852c:	fffffc18 	.word	0xfffffc18
    8530:	07cebbc8 	.word	0x07cebbc8
    8534:	0000f2e9 	.word	0x0000f2e9
    8538:	00017a39 	.word	0x00017a39
    853c:	42031375 	.word	0x42031375
    8540:	000173e1 	.word	0x000173e1
    8544:	00016ab1 	.word	0x00016ab1
    8548:	000083e9 	.word	0x000083e9
    854c:	00008325 	.word	0x00008325
    8550:	20000c74 	.word	0x20000c74
    8554:	00008295 	.word	0x00008295
    8558:	0000f025 	.word	0x0000f025
    855c:	00016641 	.word	0x00016641
    8560:	07cebfb0 	.word	0x07cebfb0

00008564 <LorawanReg_AS_Pds_Cb>:
}
#if (ENABLE_PDS == 1)
void LorawanReg_AS_Pds_Cb(void)
{
	; // nothing to do
}
    8564:	4770      	bx	lr
	...

00008568 <LORAReg_InitAS>:
{
    8568:	b570      	push	{r4, r5, r6, lr}
    856a:	b086      	sub	sp, #24
	RegParams.TxCurDataRate = MAC_DEF_TX_CURRENT_DATARATE_AS;
    856c:	4b8e      	ldr	r3, [pc, #568]	; (87a8 <LORAReg_InitAS+0x240>)
    856e:	2103      	movs	r1, #3
    8570:	2226      	movs	r2, #38	; 0x26
    8572:	5499      	strb	r1, [r3, r2]
	RegParams.maxChannels = MAX_CHANNELS_AS;
    8574:	2410      	movs	r4, #16
    8576:	3204      	adds	r2, #4
    8578:	549c      	strb	r4, [r3, r2]
	RegParams.maxSubBands = MAX_NUM_SUBBANDS_AS;
    857a:	3a29      	subs	r2, #41	; 0x29
    857c:	3126      	adds	r1, #38	; 0x26
    857e:	545a      	strb	r2, [r3, r1]
	RegParams.MacTxPower = MAC_DEF_TX_POWER_AS;
    8580:	3902      	subs	r1, #2
    8582:	545a      	strb	r2, [r3, r1]
	RegParams.pChParams = &RegParams.cmnParams.paramsType2.chParams[0];
    8584:	001a      	movs	r2, r3
    8586:	3283      	adds	r2, #131	; 0x83
    8588:	2100      	movs	r1, #0
    858a:	711a      	strb	r2, [r3, #4]
    858c:	0a15      	lsrs	r5, r2, #8
    858e:	715d      	strb	r5, [r3, #5]
    8590:	0c15      	lsrs	r5, r2, #16
    8592:	719d      	strb	r5, [r3, #6]
    8594:	0e12      	lsrs	r2, r2, #24
    8596:	71da      	strb	r2, [r3, #7]
	RegParams.pDrParams = &RegParams.cmnParams.paramsType2.DRParams[0];
    8598:	001a      	movs	r2, r3
    859a:	3243      	adds	r2, #67	; 0x43
    859c:	701a      	strb	r2, [r3, #0]
    859e:	0a15      	lsrs	r5, r2, #8
    85a0:	705d      	strb	r5, [r3, #1]
    85a2:	0c15      	lsrs	r5, r2, #16
    85a4:	709d      	strb	r5, [r3, #2]
    85a6:	0e12      	lsrs	r2, r2, #24
    85a8:	70da      	strb	r2, [r3, #3]
	RegParams.pOtherChParams = &RegParams.cmnParams.paramsType2.othChParams[0];
    85aa:	001a      	movs	r2, r3
    85ac:	32a3      	adds	r2, #163	; 0xa3
    85ae:	721a      	strb	r2, [r3, #8]
    85b0:	0a15      	lsrs	r5, r2, #8
    85b2:	725d      	strb	r5, [r3, #9]
    85b4:	0c15      	lsrs	r5, r2, #16
    85b6:	729d      	strb	r5, [r3, #10]
    85b8:	0e12      	lsrs	r2, r2, #24
    85ba:	72da      	strb	r2, [r3, #11]
	RegParams.pDutyCycleTimer = &RegParams.cmnParams.paramsType2.DutyCycleTimer;
    85bc:	001a      	movs	r2, r3
    85be:	3264      	adds	r2, #100	; 0x64
    85c0:	32ff      	adds	r2, #255	; 0xff
    85c2:	741a      	strb	r2, [r3, #16]
    85c4:	0a15      	lsrs	r5, r2, #8
    85c6:	745d      	strb	r5, [r3, #17]
    85c8:	0c15      	lsrs	r5, r2, #16
    85ca:	749d      	strb	r5, [r3, #18]
    85cc:	0e12      	lsrs	r2, r2, #24
    85ce:	74da      	strb	r2, [r3, #19]
	RegParams.pJoinDutyCycleTimer = &RegParams.joinDutyCycleTimer;
    85d0:	001a      	movs	r2, r3
    85d2:	3234      	adds	r2, #52	; 0x34
    85d4:	751a      	strb	r2, [r3, #20]
    85d6:	0a15      	lsrs	r5, r2, #8
    85d8:	755d      	strb	r5, [r3, #21]
    85da:	0c15      	lsrs	r5, r2, #16
    85dc:	759d      	strb	r5, [r3, #22]
    85de:	0e12      	lsrs	r2, r2, #24
    85e0:	75da      	strb	r2, [r3, #23]
	RegParams.pJoinBackoffTimer = &RegParams.joinBackoffTimer;
    85e2:	001a      	movs	r2, r3
    85e4:	323d      	adds	r2, #61	; 0x3d
    85e6:	761a      	strb	r2, [r3, #24]
    85e8:	0a15      	lsrs	r5, r2, #8
    85ea:	765d      	strb	r5, [r3, #25]
    85ec:	0c15      	lsrs	r5, r2, #16
    85ee:	769d      	strb	r5, [r3, #26]
    85f0:	0e12      	lsrs	r2, r2, #24
    85f2:	76da      	strb	r2, [r3, #27]
	RegParams.pSubBandParams = &RegParams.cmnParams.paramsType2.SubBands[0];
    85f4:	001a      	movs	r2, r3
    85f6:	32c4      	adds	r2, #196	; 0xc4
    85f8:	32ff      	adds	r2, #255	; 0xff
    85fa:	731a      	strb	r2, [r3, #12]
    85fc:	0a15      	lsrs	r5, r2, #8
    85fe:	735d      	strb	r5, [r3, #13]
    8600:	0c15      	lsrs	r5, r2, #16
    8602:	739d      	strb	r5, [r3, #14]
    8604:	0e12      	lsrs	r2, r2, #24
    8606:	73da      	strb	r2, [r3, #15]
	RegParams.DefRx1DataRate = MAC_RX1_WINDOW_DATARATE_AS;
    8608:	2202      	movs	r2, #2
    860a:	2522      	movs	r5, #34	; 0x22
    860c:	555a      	strb	r2, [r3, r5]
	RegParams.DefRx2DataRate = MAC_RX2_WINDOW_DATARATE_AS;
    860e:	3501      	adds	r5, #1
    8610:	555a      	strb	r2, [r3, r5]
	RegParams.DefRx2Freq = MAC_RX2_WINDOW_FREQ_AS;	
    8612:	2500      	movs	r5, #0
    8614:	771d      	strb	r5, [r3, #28]
    8616:	3d16      	subs	r5, #22
    8618:	775d      	strb	r5, [r3, #29]
    861a:	351c      	adds	r5, #28
    861c:	779d      	strb	r5, [r3, #30]
    861e:	3531      	adds	r5, #49	; 0x31
    8620:	77dd      	strb	r5, [r3, #31]
	RegParams.MinNewChIndex = NEW_CHANNEL_INDEX_AS;
    8622:	3d16      	subs	r5, #22
    8624:	555a      	strb	r2, [r3, r5]
	RegParams.FeaturesSupport = FEATURES_SUPPORTED_AS;
    8626:	2632      	movs	r6, #50	; 0x32
    8628:	3d01      	subs	r5, #1
    862a:	555e      	strb	r6, [r3, r5]
	RegParams.minDataRate = MAC_DATARATE_MIN_AS;
    862c:	3d19      	subs	r5, #25
    862e:	3e0e      	subs	r6, #14
    8630:	559d      	strb	r5, [r3, r6]
	RegParams.maxDataRate = MAC_DATARATE_MAX_AS;
    8632:	3601      	adds	r6, #1
    8634:	5599      	strb	r1, [r3, r6]
	RegParams.Rx1DrOffset = 7;
    8636:	3607      	adds	r6, #7
    8638:	559d      	strb	r5, [r3, r6]
	RegParams.maxTxPwrIndx = MAX_TX_PWR_INDEX_AS;
    863a:	3601      	adds	r6, #1
    863c:	559d      	strb	r5, [r3, r6]
	RegParams.maxTxPwr = DEFAULT_EIRP_AS;
    863e:	3521      	adds	r5, #33	; 0x21
    8640:	555c      	strb	r4, [r3, r5]
	RegParams.cmnParams.paramsType2.minNonDefChId = 2;
    8642:	34b1      	adds	r4, #177	; 0xb1
    8644:	34ff      	adds	r4, #255	; 0xff
    8646:	551a      	strb	r2, [r3, r4]
	RegParams.pDutyCycleTimer->timerId = regTimerId[0];
    8648:	4a58      	ldr	r2, [pc, #352]	; (87ac <LORAReg_InitAS+0x244>)
    864a:	7815      	ldrb	r5, [r2, #0]
    864c:	2468      	movs	r4, #104	; 0x68
    864e:	34ff      	adds	r4, #255	; 0xff
    8650:	551d      	strb	r5, [r3, r4]
	RegParams.pJoinBackoffTimer->timerId = regTimerId[1];
    8652:	7855      	ldrb	r5, [r2, #1]
    8654:	3c2b      	subs	r4, #43	; 0x2b
    8656:	3cff      	subs	r4, #255	; 0xff
    8658:	551d      	strb	r5, [r3, r4]
    RegParams.pJoinDutyCycleTimer->timerId = regTimerId[2];
    865a:	7894      	ldrb	r4, [r2, #2]
    865c:	223c      	movs	r2, #60	; 0x3c
    865e:	549c      	strb	r4, [r3, r2]
	RegParams.pJoinDutyCycleTimer->remainingtime = 0;
    8660:	2400      	movs	r4, #0
    8662:	3a04      	subs	r2, #4
    8664:	549c      	strb	r4, [r3, r2]
    8666:	3201      	adds	r2, #1
    8668:	549c      	strb	r4, [r3, r2]
    866a:	3201      	adds	r2, #1
    866c:	549c      	strb	r4, [r3, r2]
    866e:	3201      	adds	r2, #1
    8670:	549c      	strb	r4, [r3, r2]
	RegParams.joinbccount =0;
    8672:	3207      	adds	r2, #7
    8674:	5499      	strb	r1, [r3, r2]
	RegParams.joinDutyCycleTimeout =0;
    8676:	001a      	movs	r2, r3
    8678:	323e      	adds	r2, #62	; 0x3e
    867a:	7011      	strb	r1, [r2, #0]
    867c:	7051      	strb	r1, [r2, #1]
    867e:	7091      	strb	r1, [r2, #2]
    8680:	70d1      	strb	r1, [r2, #3]
	RegParams.cmnParams.paramsType2.txParams.uplinkDwellTime = 1;
    8682:	31c3      	adds	r1, #195	; 0xc3
    8684:	31ff      	adds	r1, #255	; 0xff
    8686:	5c5a      	ldrb	r2, [r3, r1]
    8688:	2401      	movs	r4, #1
    868a:	4322      	orrs	r2, r4
	RegParams.cmnParams.paramsType2.txParams.downlinkDwellTime = 1;
    868c:	2402      	movs	r4, #2
    868e:	4322      	orrs	r2, r4
    8690:	545a      	strb	r2, [r3, r1]
	RegParams.band = ismBand;
    8692:	222e      	movs	r2, #46	; 0x2e
    8694:	5498      	strb	r0, [r3, r2]
	if(ismBand >= ISM_BRN923 && ismBand <= ISM_VTM923)
    8696:	3806      	subs	r0, #6
		result =  LORAWAN_INVALID_PARAMETER;
    8698:	240a      	movs	r4, #10
	if(ismBand >= ISM_BRN923 && ismBand <= ISM_VTM923)
    869a:	2808      	cmp	r0, #8
    869c:	d91a      	bls.n	86d4 <LORAReg_InitAS+0x16c>
	if(!initialized)
    869e:	4b44      	ldr	r3, [pc, #272]	; (87b0 <LORAReg_InitAS+0x248>)
    86a0:	781b      	ldrb	r3, [r3, #0]
    86a2:	2b00      	cmp	r3, #0
    86a4:	d102      	bne.n	86ac <LORAReg_InitAS+0x144>
		initialized = true;
    86a6:	2201      	movs	r2, #1
    86a8:	4b41      	ldr	r3, [pc, #260]	; (87b0 <LORAReg_InitAS+0x248>)
    86aa:	701a      	strb	r2, [r3, #0]
    LORAREG_InitGetAttrFnPtrsAS();	
    86ac:	4b41      	ldr	r3, [pc, #260]	; (87b4 <LORAReg_InitAS+0x24c>)
    86ae:	4798      	blx	r3
	LORAREG_InitValidateAttrFnPtrsAS();
    86b0:	4b41      	ldr	r3, [pc, #260]	; (87b8 <LORAReg_InitAS+0x250>)
    86b2:	4798      	blx	r3
	LORAREG_InitSetAttrFnPtrsAS();
    86b4:	4b41      	ldr	r3, [pc, #260]	; (87bc <LORAReg_InitAS+0x254>)
    86b6:	4798      	blx	r3
	PDS_STORE(RegParams.regParamItems.band_item_id);
    86b8:	4b3b      	ldr	r3, [pc, #236]	; (87a8 <LORAReg_InitAS+0x240>)
    86ba:	4a41      	ldr	r2, [pc, #260]	; (87c0 <LORAReg_InitAS+0x258>)
    86bc:	5c9a      	ldrb	r2, [r3, r2]
    86be:	4941      	ldr	r1, [pc, #260]	; (87c4 <LORAReg_InitAS+0x25c>)
    86c0:	5c58      	ldrb	r0, [r3, r1]
    86c2:	0200      	lsls	r0, r0, #8
    86c4:	4310      	orrs	r0, r2
    86c6:	b2c1      	uxtb	r1, r0
    86c8:	0a00      	lsrs	r0, r0, #8
    86ca:	4b3f      	ldr	r3, [pc, #252]	; (87c8 <LORAReg_InitAS+0x260>)
    86cc:	4798      	blx	r3
}
    86ce:	0020      	movs	r0, r4
    86d0:	b006      	add	sp, #24
    86d2:	bd70      	pop	{r4, r5, r6, pc}
	memcpy (RegParams.pChParams, DefaultChannels923, sizeof(DefaultChannels923));
    86d4:	001c      	movs	r4, r3
    86d6:	0018      	movs	r0, r3
    86d8:	3083      	adds	r0, #131	; 0x83
    86da:	3a2a      	subs	r2, #42	; 0x2a
    86dc:	493b      	ldr	r1, [pc, #236]	; (87cc <LORAReg_InitAS+0x264>)
    86de:	4d3c      	ldr	r5, [pc, #240]	; (87d0 <LORAReg_InitAS+0x268>)
    86e0:	47a8      	blx	r5
	memcpy (RegParams.pOtherChParams, AdvChannels923, sizeof(AdvChannels923));
    86e2:	0020      	movs	r0, r4
    86e4:	30a3      	adds	r0, #163	; 0xa3
    86e6:	2218      	movs	r2, #24
    86e8:	493a      	ldr	r1, [pc, #232]	; (87d4 <LORAReg_InitAS+0x26c>)
    86ea:	47a8      	blx	r5
	memcpy (RegParams.pSubBandParams, SubBandParams923, sizeof(SubBandParams923) );
    86ec:	0020      	movs	r0, r4
    86ee:	30c4      	adds	r0, #196	; 0xc4
    86f0:	30ff      	adds	r0, #255	; 0xff
    86f2:	220c      	movs	r2, #12
    86f4:	4938      	ldr	r1, [pc, #224]	; (87d8 <LORAReg_InitAS+0x270>)
    86f6:	47a8      	blx	r5
	memcpy(RegParams.cmnParams.paramsType2.subBandDutyCycle,SubBandDutyCycle923,sizeof(SubBandDutyCycle923));
    86f8:	0020      	movs	r0, r4
    86fa:	30ae      	adds	r0, #174	; 0xae
    86fc:	30ff      	adds	r0, #255	; 0xff
    86fe:	2202      	movs	r2, #2
    8700:	4936      	ldr	r1, [pc, #216]	; (87dc <LORAReg_InitAS+0x274>)
    8702:	47a8      	blx	r5
    8704:	2302      	movs	r3, #2
		RegParams.pChParams[i].dataRange.value = UINT8_MAX;
    8706:	4828      	ldr	r0, [pc, #160]	; (87a8 <LORAReg_InitAS+0x240>)
    8708:	25ff      	movs	r5, #255	; 0xff
	for (i = 2; i < RegParams.maxChannels; i++)
    870a:	242a      	movs	r4, #42	; 0x2a
		RegParams.pChParams[i].dataRange.value = UINT8_MAX;
    870c:	7902      	ldrb	r2, [r0, #4]
    870e:	7941      	ldrb	r1, [r0, #5]
    8710:	0209      	lsls	r1, r1, #8
    8712:	4311      	orrs	r1, r2
    8714:	7982      	ldrb	r2, [r0, #6]
    8716:	0412      	lsls	r2, r2, #16
    8718:	4311      	orrs	r1, r2
    871a:	79c2      	ldrb	r2, [r0, #7]
    871c:	0612      	lsls	r2, r2, #24
    871e:	430a      	orrs	r2, r1
    8720:	0059      	lsls	r1, r3, #1
    8722:	188a      	adds	r2, r1, r2
    8724:	7055      	strb	r5, [r2, #1]
	for (i = 2; i < RegParams.maxChannels; i++)
    8726:	3301      	adds	r3, #1
    8728:	b2db      	uxtb	r3, r3
    872a:	5702      	ldrsb	r2, [r0, r4]
    872c:	4293      	cmp	r3, r2
    872e:	dbed      	blt.n	870c <LORAReg_InitAS+0x1a4>
		RegParams.cmnParams.paramsType2.txParams.maxEIRP = DEFAULT_EIRP_AS;
    8730:	4c1d      	ldr	r4, [pc, #116]	; (87a8 <LORAReg_InitAS+0x240>)
    8732:	2210      	movs	r2, #16
    8734:	23c2      	movs	r3, #194	; 0xc2
    8736:	33ff      	adds	r3, #255	; 0xff
    8738:	54e2      	strb	r2, [r4, r3]
		memcpy (RegParams.pDrParams, DefaultDrParamsAS, sizeof(DefaultDrParamsAS) );
    873a:	7820      	ldrb	r0, [r4, #0]
    873c:	7863      	ldrb	r3, [r4, #1]
    873e:	021b      	lsls	r3, r3, #8
    8740:	4303      	orrs	r3, r0
    8742:	78a0      	ldrb	r0, [r4, #2]
    8744:	0400      	lsls	r0, r0, #16
    8746:	4303      	orrs	r3, r0
    8748:	78e0      	ldrb	r0, [r4, #3]
    874a:	0600      	lsls	r0, r0, #24
    874c:	4318      	orrs	r0, r3
    874e:	3230      	adds	r2, #48	; 0x30
    8750:	4923      	ldr	r1, [pc, #140]	; (87e0 <LORAReg_InitAS+0x278>)
    8752:	4b1f      	ldr	r3, [pc, #124]	; (87d0 <LORAReg_InitAS+0x268>)
    8754:	4798      	blx	r3
		RegParams.regParamItems.fileid = PDS_FILE_REG_AS_05_IDX;
    8756:	2304      	movs	r3, #4
    8758:	2104      	movs	r1, #4
    875a:	4a22      	ldr	r2, [pc, #136]	; (87e4 <LORAReg_InitAS+0x27c>)
    875c:	54a1      	strb	r1, [r4, r2]
		RegParams.regParamItems.ch_param_1_item_id = PDS_REG_AS_CH_PARAM_1;
    875e:	2100      	movs	r1, #0
    8760:	4a21      	ldr	r2, [pc, #132]	; (87e8 <LORAReg_InitAS+0x280>)
    8762:	54a1      	strb	r1, [r4, r2]
    8764:	18a2      	adds	r2, r4, r2
    8766:	7053      	strb	r3, [r2, #1]
		RegParams.regParamItems.ch_param_2_item_id = PDS_REG_AS_CH_PARAM_2;
    8768:	3101      	adds	r1, #1
    876a:	2284      	movs	r2, #132	; 0x84
    876c:	0092      	lsls	r2, r2, #2
    876e:	54a1      	strb	r1, [r4, r2]
    8770:	18a2      	adds	r2, r4, r2
    8772:	7053      	strb	r3, [r2, #1]
		RegParams.regParamItems.band_item_id = PDS_REG_AS_BAND;
    8774:	3101      	adds	r1, #1
    8776:	4a12      	ldr	r2, [pc, #72]	; (87c0 <LORAReg_InitAS+0x258>)
    8778:	54a1      	strb	r1, [r4, r2]
    877a:	18a2      	adds	r2, r4, r2
    877c:	7053      	strb	r3, [r2, #1]
		RegParams.regParamItems.lastUsedSB = 0;
    877e:	2200      	movs	r2, #0
    8780:	2383      	movs	r3, #131	; 0x83
    8782:	009b      	lsls	r3, r3, #2
    8784:	54e2      	strb	r2, [r4, r3]
    8786:	469c      	mov	ip, r3
    8788:	4464      	add	r4, ip
    878a:	2300      	movs	r3, #0
    878c:	7063      	strb	r3, [r4, #1]
		filemarks.fileMarkListAddr = aRegAsPdsOps;
    878e:	ab02      	add	r3, sp, #8
		filemarks.numItems =  (uint8_t)(PDS_REG_AS_MAX_VALUE & 0x00FF);
    8790:	3203      	adds	r2, #3
    8792:	711a      	strb	r2, [r3, #4]
		filemarks.fIDcb = LorawanReg_AS_Pds_Cb;
    8794:	4a15      	ldr	r2, [pc, #84]	; (87ec <LORAReg_InitAS+0x284>)
		PDS_RegFile(PDS_FILE_REG_AS_05_IDX,filemarks);
    8796:	9200      	str	r2, [sp, #0]
    8798:	4915      	ldr	r1, [pc, #84]	; (87f0 <LORAReg_InitAS+0x288>)
    879a:	9a03      	ldr	r2, [sp, #12]
    879c:	4b15      	ldr	r3, [pc, #84]	; (87f4 <LORAReg_InitAS+0x28c>)
    879e:	2004      	movs	r0, #4
    87a0:	4c15      	ldr	r4, [pc, #84]	; (87f8 <LORAReg_InitAS+0x290>)
    87a2:	47a0      	blx	r4
	StackRetStatus_t result = LORAWAN_SUCCESS;
    87a4:	2408      	movs	r4, #8
    87a6:	e77a      	b.n	869e <LORAReg_InitAS+0x136>
    87a8:	200024d0 	.word	0x200024d0
    87ac:	200024cc 	.word	0x200024cc
    87b0:	20000c78 	.word	0x20000c78
    87b4:	0000ccfd 	.word	0x0000ccfd
    87b8:	0000d42d 	.word	0x0000d42d
    87bc:	0000d701 	.word	0x0000d701
    87c0:	00000212 	.word	0x00000212
    87c4:	00000213 	.word	0x00000213
    87c8:	0000e0f9 	.word	0x0000e0f9
    87cc:	0001fcac 	.word	0x0001fcac
    87d0:	00019da5 	.word	0x00019da5
    87d4:	0001fc94 	.word	0x0001fc94
    87d8:	0001fcf4 	.word	0x0001fcf4
    87dc:	0001fcf0 	.word	0x0001fcf0
    87e0:	0001fcb0 	.word	0x0001fcb0
    87e4:	0000020b 	.word	0x0000020b
    87e8:	0000020e 	.word	0x0000020e
    87ec:	00008565 	.word	0x00008565
    87f0:	200022ac 	.word	0x200022ac
    87f4:	0001fd00 	.word	0x0001fd00
    87f8:	0000e3dd 	.word	0x0000e3dd

000087fc <LorawanReg_AU_Pds_Cb>:
}
#if (ENABLE_PDS == 1)
void LorawanReg_AU_Pds_Cb(void)
{
	
}
    87fc:	4770      	bx	lr
	...

00008800 <LORAReg_InitAU>:
{
    8800:	b5f0      	push	{r4, r5, r6, r7, lr}
    8802:	46de      	mov	lr, fp
    8804:	4657      	mov	r7, sl
    8806:	464e      	mov	r6, r9
    8808:	4645      	mov	r5, r8
    880a:	b5e0      	push	{r5, r6, r7, lr}
    880c:	b087      	sub	sp, #28
    880e:	4683      	mov	fp, r0
    RegParams.TxCurDataRate = MAC_DEF_TX_CURRENT_DATARATE_AU;
    8810:	4c83      	ldr	r4, [pc, #524]	; (8a20 <LORAReg_InitAU+0x220>)
    8812:	2103      	movs	r1, #3
    8814:	2326      	movs	r3, #38	; 0x26
    8816:	54e1      	strb	r1, [r4, r3]
	RegParams.maxChannels = MAX_CHANNELS_AU_NA;
    8818:	3145      	adds	r1, #69	; 0x45
    881a:	3304      	adds	r3, #4
    881c:	54e1      	strb	r1, [r4, r3]
	RegParams.MacTxPower = MAC_DEF_TX_POWER_AU;
    881e:	3941      	subs	r1, #65	; 0x41
    8820:	3b03      	subs	r3, #3
    8822:	54e1      	strb	r1, [r4, r3]
	RegParams.pChParams = &RegParams.cmnParams.paramsType1.chParams[0];
    8824:	0020      	movs	r0, r4
    8826:	30b3      	adds	r0, #179	; 0xb3
    8828:	2600      	movs	r6, #0
    882a:	7120      	strb	r0, [r4, #4]
    882c:	0a03      	lsrs	r3, r0, #8
    882e:	7163      	strb	r3, [r4, #5]
    8830:	0c03      	lsrs	r3, r0, #16
    8832:	71a3      	strb	r3, [r4, #6]
    8834:	0e03      	lsrs	r3, r0, #24
    8836:	71e3      	strb	r3, [r4, #7]
	RegParams.pDrParams = &RegParams.cmnParams.paramsType1.DRParams[0];
    8838:	2343      	movs	r3, #67	; 0x43
    883a:	4698      	mov	r8, r3
    883c:	44a0      	add	r8, r4
    883e:	4643      	mov	r3, r8
    8840:	7023      	strb	r3, [r4, #0]
    8842:	4643      	mov	r3, r8
    8844:	0a1b      	lsrs	r3, r3, #8
    8846:	7063      	strb	r3, [r4, #1]
    8848:	4643      	mov	r3, r8
    884a:	0c1b      	lsrs	r3, r3, #16
    884c:	70a3      	strb	r3, [r4, #2]
    884e:	4643      	mov	r3, r8
    8850:	0e1b      	lsrs	r3, r3, #24
    8852:	70e3      	strb	r3, [r4, #3]
	RegParams.MinNewChIndex = 0xFF;
    8854:	2321      	movs	r3, #33	; 0x21
    8856:	31f8      	adds	r1, #248	; 0xf8
    8858:	54e1      	strb	r1, [r4, r3]
	RegParams.DefRx1DataRate = MAC_RX1_WINDOW_DATARATE_AU;
    885a:	2508      	movs	r5, #8
    885c:	2708      	movs	r7, #8
    885e:	3301      	adds	r3, #1
    8860:	54e5      	strb	r5, [r4, r3]
	RegParams.DefRx2DataRate = MAC_RX2_WINDOW_DATARATE_AU;
    8862:	3301      	adds	r3, #1
    8864:	54e5      	strb	r5, [r4, r3]
	RegParams.DefRx2Freq = MAC_RX2_WINDOW_FREQ_AU;
    8866:	3b83      	subs	r3, #131	; 0x83
    8868:	469c      	mov	ip, r3
    886a:	7723      	strb	r3, [r4, #28]
    886c:	2370      	movs	r3, #112	; 0x70
    886e:	7763      	strb	r3, [r4, #29]
    8870:	77a7      	strb	r7, [r4, #30]
    8872:	3b39      	subs	r3, #57	; 0x39
    8874:	77e3      	strb	r3, [r4, #31]
	RegParams.FeaturesSupport = FEATURES_SUPPORTED_AU;
    8876:	39c7      	subs	r1, #199	; 0xc7
    8878:	3b17      	subs	r3, #23
    887a:	54e1      	strb	r1, [r4, r3]
	RegParams.minDataRate = MAC_DATARATE_MIN_AU;
    887c:	2224      	movs	r2, #36	; 0x24
    887e:	3b1a      	subs	r3, #26
    8880:	54a3      	strb	r3, [r4, r2]
	RegParams.maxDataRate = MAC_DATARATE_MAX_AU;
    8882:	3201      	adds	r2, #1
    8884:	54a6      	strb	r6, [r4, r2]
	RegParams.cmnParams.paramsType1.Max_125khzChan = MAX_CHANNELS_BANDWIDTH_125_AU_NA;
    8886:	321b      	adds	r2, #27
    8888:	4692      	mov	sl, r2
    888a:	2254      	movs	r2, #84	; 0x54
    888c:	32ff      	adds	r2, #255	; 0xff
    888e:	4653      	mov	r3, sl
    8890:	54a3      	strb	r3, [r4, r2]
	RegParams.cmnParams.paramsType1.Max_500khzChan = MAX_CHANNELS_BANDWIDTH_500_AU_NA;
    8892:	23aa      	movs	r3, #170	; 0xaa
    8894:	005b      	lsls	r3, r3, #1
    8896:	54e5      	strb	r5, [r4, r3]
	RegParams.cmnParams.paramsType1.minTxDR = DR0;
    8898:	2350      	movs	r3, #80	; 0x50
    889a:	33ff      	adds	r3, #255	; 0xff
    889c:	54e6      	strb	r6, [r4, r3]
	RegParams.cmnParams.paramsType1.maxTxDR = DR6;
    889e:	3301      	adds	r3, #1
    88a0:	3a4e      	subs	r2, #78	; 0x4e
    88a2:	3aff      	subs	r2, #255	; 0xff
    88a4:	54e2      	strb	r2, [r4, r3]
	RegParams.cmnParams.paramsType1.minRxDR = DR8;
    88a6:	2352      	movs	r3, #82	; 0x52
    88a8:	33ff      	adds	r3, #255	; 0xff
    88aa:	54e5      	strb	r5, [r4, r3]
	RegParams.cmnParams.paramsType1.maxRxDR = DR13;
    88ac:	3b45      	subs	r3, #69	; 0x45
    88ae:	3bff      	subs	r3, #255	; 0xff
    88b0:	4699      	mov	r9, r3
    88b2:	3346      	adds	r3, #70	; 0x46
    88b4:	33ff      	adds	r3, #255	; 0xff
    88b6:	464a      	mov	r2, r9
    88b8:	54e2      	strb	r2, [r4, r3]
	RegParams.cmnParams.paramsType1.RxParamWindowOffset1 = 8;
    88ba:	2356      	movs	r3, #86	; 0x56
    88bc:	33ff      	adds	r3, #255	; 0xff
    88be:	54e5      	strb	r5, [r4, r3]
	RegParams.cmnParams.paramsType1.UpStreamCh0Freq = UPSTREAM_CH0_AU;
    88c0:	2300      	movs	r3, #0
    88c2:	4699      	mov	r9, r3
    88c4:	2344      	movs	r3, #68	; 0x44
    88c6:	33ff      	adds	r3, #255	; 0xff
    88c8:	464a      	mov	r2, r9
    88ca:	54e2      	strb	r2, [r4, r3]
    88cc:	0023      	movs	r3, r4
    88ce:	3344      	adds	r3, #68	; 0x44
    88d0:	33ff      	adds	r3, #255	; 0xff
    88d2:	2228      	movs	r2, #40	; 0x28
    88d4:	4252      	negs	r2, r2
    88d6:	705a      	strb	r2, [r3, #1]
    88d8:	2274      	movs	r2, #116	; 0x74
    88da:	4252      	negs	r2, r2
    88dc:	709a      	strb	r2, [r3, #2]
    88de:	2236      	movs	r2, #54	; 0x36
    88e0:	70da      	strb	r2, [r3, #3]
	RegParams.cmnParams.paramsType1.UpStreamCh64Freq = UPSTREAM_CH64_AU;
    88e2:	2360      	movs	r3, #96	; 0x60
    88e4:	4699      	mov	r9, r3
    88e6:	2348      	movs	r3, #72	; 0x48
    88e8:	33ff      	adds	r3, #255	; 0xff
    88ea:	464a      	mov	r2, r9
    88ec:	54e2      	strb	r2, [r4, r3]
    88ee:	0023      	movs	r3, r4
    88f0:	3348      	adds	r3, #72	; 0x48
    88f2:	33ff      	adds	r3, #255	; 0xff
    88f4:	227a      	movs	r2, #122	; 0x7a
    88f6:	4252      	negs	r2, r2
    88f8:	705a      	strb	r2, [r3, #1]
    88fa:	2269      	movs	r2, #105	; 0x69
    88fc:	4252      	negs	r2, r2
    88fe:	709a      	strb	r2, [r3, #2]
    8900:	2236      	movs	r2, #54	; 0x36
    8902:	70da      	strb	r2, [r3, #3]
	RegParams.cmnParams.paramsType1.DownStreamCh0Freq = DOWNSTREAM_CH0_AU;
    8904:	234c      	movs	r3, #76	; 0x4c
    8906:	33ff      	adds	r3, #255	; 0xff
    8908:	4662      	mov	r2, ip
    890a:	54e2      	strb	r2, [r4, r3]
    890c:	0023      	movs	r3, r4
    890e:	334c      	adds	r3, #76	; 0x4c
    8910:	33ff      	adds	r3, #255	; 0xff
    8912:	2270      	movs	r2, #112	; 0x70
    8914:	705a      	strb	r2, [r3, #1]
    8916:	709f      	strb	r7, [r3, #2]
    8918:	2237      	movs	r2, #55	; 0x37
    891a:	70da      	strb	r2, [r3, #3]
    RegParams.pJoinDutyCycleTimer = &RegParams.joinDutyCycleTimer;
    891c:	0023      	movs	r3, r4
    891e:	3334      	adds	r3, #52	; 0x34
    8920:	7523      	strb	r3, [r4, #20]
    8922:	0a1a      	lsrs	r2, r3, #8
    8924:	7562      	strb	r2, [r4, #21]
    8926:	0c1a      	lsrs	r2, r3, #16
    8928:	75a2      	strb	r2, [r4, #22]
    892a:	0e1b      	lsrs	r3, r3, #24
    892c:	75e3      	strb	r3, [r4, #23]
	RegParams.pJoinBackoffTimer = &RegParams.joinBackoffTimer;
    892e:	0023      	movs	r3, r4
    8930:	333d      	adds	r3, #61	; 0x3d
    8932:	7623      	strb	r3, [r4, #24]
    8934:	0a1a      	lsrs	r2, r3, #8
    8936:	7662      	strb	r2, [r4, #25]
    8938:	0c1a      	lsrs	r2, r3, #16
    893a:	76a2      	strb	r2, [r4, #26]
    893c:	0e1b      	lsrs	r3, r3, #24
    893e:	76e3      	strb	r3, [r4, #27]
    RegParams.Rx1DrOffset = 5;
    8940:	2305      	movs	r3, #5
    8942:	469c      	mov	ip, r3
    8944:	3327      	adds	r3, #39	; 0x27
    8946:	4662      	mov	r2, ip
    8948:	54e2      	strb	r2, [r4, r3]
	RegParams.maxTxPwrIndx = 10;
    894a:	3b22      	subs	r3, #34	; 0x22
    894c:	469c      	mov	ip, r3
    894e:	3323      	adds	r3, #35	; 0x23
    8950:	4662      	mov	r2, ip
    8952:	54e2      	strb	r2, [r4, r3]
	RegParams.maxTxPwr = DEFAULT_EIRP_AU;
    8954:	3b0f      	subs	r3, #15
    8956:	469c      	mov	ip, r3
    8958:	330a      	adds	r3, #10
    895a:	4662      	mov	r2, ip
    895c:	54e2      	strb	r2, [r4, r3]
	RegParams.cmnParams.paramsType1.lastUsedSB = 0;
    895e:	2358      	movs	r3, #88	; 0x58
    8960:	33ff      	adds	r3, #255	; 0xff
    8962:	54e6      	strb	r6, [r4, r3]
	RegParams.pJoinBackoffTimer->timerId = regTimerId[0];	
    8964:	4b2f      	ldr	r3, [pc, #188]	; (8a24 <LORAReg_InitAU+0x224>)
    8966:	469a      	mov	sl, r3
    8968:	781a      	ldrb	r2, [r3, #0]
    896a:	4691      	mov	r9, r2
    896c:	223d      	movs	r2, #61	; 0x3d
    896e:	464b      	mov	r3, r9
    8970:	54a3      	strb	r3, [r4, r2]
	RegParams.pJoinDutyCycleTimer->timerId = regTimerId[1];
    8972:	4653      	mov	r3, sl
    8974:	785b      	ldrb	r3, [r3, #1]
    8976:	469c      	mov	ip, r3
    8978:	233c      	movs	r3, #60	; 0x3c
    897a:	4662      	mov	r2, ip
    897c:	54e2      	strb	r2, [r4, r3]
	RegParams.pJoinDutyCycleTimer->remainingtime = 0;
    897e:	2300      	movs	r3, #0
    8980:	5463      	strb	r3, [r4, r1]
    8982:	2100      	movs	r1, #0
    8984:	3339      	adds	r3, #57	; 0x39
    8986:	54e1      	strb	r1, [r4, r3]
    8988:	3301      	adds	r3, #1
    898a:	54e1      	strb	r1, [r4, r3]
    898c:	3301      	adds	r3, #1
    898e:	54e1      	strb	r1, [r4, r3]
	RegParams.joinbccount =0;
    8990:	3307      	adds	r3, #7
    8992:	54e6      	strb	r6, [r4, r3]
	RegParams.joinDutyCycleTimeout =0;
    8994:	0023      	movs	r3, r4
    8996:	333e      	adds	r3, #62	; 0x3e
    8998:	7019      	strb	r1, [r3, #0]
    899a:	7059      	strb	r1, [r3, #1]
    899c:	7099      	strb	r1, [r3, #2]
    899e:	70d9      	strb	r1, [r3, #3]
	RegParams.band = ismBand;
    89a0:	232e      	movs	r3, #46	; 0x2e
    89a2:	465a      	mov	r2, fp
    89a4:	54e2      	strb	r2, [r4, r3]
	memcpy (RegParams.pChParams, DefaultChannels915AU, sizeof(DefaultChannels915AU) );
    89a6:	2290      	movs	r2, #144	; 0x90
    89a8:	491f      	ldr	r1, [pc, #124]	; (8a28 <LORAReg_InitAU+0x228>)
    89aa:	4b20      	ldr	r3, [pc, #128]	; (8a2c <LORAReg_InitAU+0x22c>)
    89ac:	4699      	mov	r9, r3
    89ae:	4798      	blx	r3
	memcpy (RegParams.pDrParams, DefaultDrParamsAU, sizeof(DefaultDrParamsAU) );
    89b0:	2270      	movs	r2, #112	; 0x70
    89b2:	491f      	ldr	r1, [pc, #124]	; (8a30 <LORAReg_InitAU+0x230>)
    89b4:	4640      	mov	r0, r8
    89b6:	47c8      	blx	r9
	RegParams.cmnParams.paramsType1.alternativeChannel = 0;
    89b8:	23ab      	movs	r3, #171	; 0xab
    89ba:	005b      	lsls	r3, r3, #1
    89bc:	54e6      	strb	r6, [r4, r3]
	RegParams.regParamItems.fileid = PDS_FILE_REG_AU_09_IDX;
    89be:	4b1d      	ldr	r3, [pc, #116]	; (8a34 <LORAReg_InitAU+0x234>)
    89c0:	54e5      	strb	r5, [r4, r3]
	RegParams.regParamItems.ch_param_1_item_id = PDS_REG_AU_CH_PARAM;
    89c2:	2200      	movs	r2, #0
    89c4:	4b1c      	ldr	r3, [pc, #112]	; (8a38 <LORAReg_InitAU+0x238>)
    89c6:	54e2      	strb	r2, [r4, r3]
    89c8:	18e3      	adds	r3, r4, r3
    89ca:	705f      	strb	r7, [r3, #1]
	RegParams.regParamItems.ch_param_2_item_id = 0;
    89cc:	2384      	movs	r3, #132	; 0x84
    89ce:	009b      	lsls	r3, r3, #2
    89d0:	54e2      	strb	r2, [r4, r3]
    89d2:	18e3      	adds	r3, r4, r3
    89d4:	705a      	strb	r2, [r3, #1]
	RegParams.regParamItems.band_item_id = 0;
    89d6:	4b19      	ldr	r3, [pc, #100]	; (8a3c <LORAReg_InitAU+0x23c>)
    89d8:	54e2      	strb	r2, [r4, r3]
    89da:	18e3      	adds	r3, r4, r3
    89dc:	705a      	strb	r2, [r3, #1]
	RegParams.regParamItems.lastUsedSB = PDS_REG_AU_LAST_USED_SB;
    89de:	3201      	adds	r2, #1
    89e0:	2383      	movs	r3, #131	; 0x83
    89e2:	009b      	lsls	r3, r3, #2
    89e4:	54e2      	strb	r2, [r4, r3]
    89e6:	469c      	mov	ip, r3
    89e8:	4464      	add	r4, ip
    89ea:	7067      	strb	r7, [r4, #1]
	filemarks.fileMarkListAddr = aRegAuPdsOps;
    89ec:	ab02      	add	r3, sp, #8
	filemarks.numItems =  (uint8_t)(PDS_REG_AU_MAX_VALUE & 0x00FF);
    89ee:	3201      	adds	r2, #1
    89f0:	711a      	strb	r2, [r3, #4]
	filemarks.fIDcb = LorawanReg_AU_Pds_Cb;
    89f2:	4a13      	ldr	r2, [pc, #76]	; (8a40 <LORAReg_InitAU+0x240>)
	PDS_RegFile(PDS_FILE_REG_AU_09_IDX,filemarks);
    89f4:	9200      	str	r2, [sp, #0]
    89f6:	4913      	ldr	r1, [pc, #76]	; (8a44 <LORAReg_InitAU+0x244>)
    89f8:	9a03      	ldr	r2, [sp, #12]
    89fa:	4b13      	ldr	r3, [pc, #76]	; (8a48 <LORAReg_InitAU+0x248>)
    89fc:	2008      	movs	r0, #8
    89fe:	4c13      	ldr	r4, [pc, #76]	; (8a4c <LORAReg_InitAU+0x24c>)
    8a00:	47a0      	blx	r4
    LORAREG_InitGetAttrFnPtrsAU();
    8a02:	4b13      	ldr	r3, [pc, #76]	; (8a50 <LORAReg_InitAU+0x250>)
    8a04:	4798      	blx	r3
	LORAREG_InitValidateAttrFnPtrsAU();
    8a06:	4b13      	ldr	r3, [pc, #76]	; (8a54 <LORAReg_InitAU+0x254>)
    8a08:	4798      	blx	r3
	LORAREG_InitSetAttrFnPtrsAU();
    8a0a:	4b13      	ldr	r3, [pc, #76]	; (8a58 <LORAReg_InitAU+0x258>)
    8a0c:	4798      	blx	r3
}
    8a0e:	2008      	movs	r0, #8
    8a10:	b007      	add	sp, #28
    8a12:	bc3c      	pop	{r2, r3, r4, r5}
    8a14:	4690      	mov	r8, r2
    8a16:	4699      	mov	r9, r3
    8a18:	46a2      	mov	sl, r4
    8a1a:	46ab      	mov	fp, r5
    8a1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8a1e:	46c0      	nop			; (mov r8, r8)
    8a20:	200024d0 	.word	0x200024d0
    8a24:	200024cc 	.word	0x200024cc
    8a28:	0001fd18 	.word	0x0001fd18
    8a2c:	00019da5 	.word	0x00019da5
    8a30:	0001fda8 	.word	0x0001fda8
    8a34:	0000020b 	.word	0x0000020b
    8a38:	0000020e 	.word	0x0000020e
    8a3c:	00000212 	.word	0x00000212
    8a40:	000087fd 	.word	0x000087fd
    8a44:	200022b0 	.word	0x200022b0
    8a48:	0001fe18 	.word	0x0001fe18
    8a4c:	0000e3dd 	.word	0x0000e3dd
    8a50:	0000ce45 	.word	0x0000ce45
    8a54:	0000d499 	.word	0x0000d499
    8a58:	0000d775 	.word	0x0000d775

00008a5c <LorawanReg_EU868_Pds_Cb>:

#if (ENABLE_PDS == 1)
void LorawanReg_EU868_Pds_Cb(void)
{
	
}
    8a5c:	4770      	bx	lr
	...

00008a60 <LORAReg_InitEU>:
{
    8a60:	b5f0      	push	{r4, r5, r6, r7, lr}
    8a62:	b08b      	sub	sp, #44	; 0x2c
	RegParams.TxCurDataRate = MAC_DEF_TX_CURRENT_DATARATE_EU;
    8a64:	4ba2      	ldr	r3, [pc, #648]	; (8cf0 <LORAReg_InitEU+0x290>)
    8a66:	2103      	movs	r1, #3
    8a68:	2226      	movs	r2, #38	; 0x26
    8a6a:	5499      	strb	r1, [r3, r2]
	RegParams.maxChannels = MAX_CHANNELS_T2;
    8a6c:	2510      	movs	r5, #16
    8a6e:	3204      	adds	r2, #4
    8a70:	549d      	strb	r5, [r3, r2]
	RegParams.maxSubBands = MAX_NUM_SUBBANDS_EU;
    8a72:	2406      	movs	r4, #6
    8a74:	3a01      	subs	r2, #1
    8a76:	549c      	strb	r4, [r3, r2]
	RegParams.MacTxPower = MAC_DEF_TX_POWER_EU;
    8a78:	3c05      	subs	r4, #5
    8a7a:	3a02      	subs	r2, #2
    8a7c:	549c      	strb	r4, [r3, r2]
	RegParams.pChParams = &RegParams.cmnParams.paramsType2.chParams[0];
    8a7e:	001a      	movs	r2, r3
    8a80:	3283      	adds	r2, #131	; 0x83
    8a82:	2400      	movs	r4, #0
    8a84:	711a      	strb	r2, [r3, #4]
    8a86:	0a16      	lsrs	r6, r2, #8
    8a88:	715e      	strb	r6, [r3, #5]
    8a8a:	0c16      	lsrs	r6, r2, #16
    8a8c:	719e      	strb	r6, [r3, #6]
    8a8e:	0e12      	lsrs	r2, r2, #24
    8a90:	71da      	strb	r2, [r3, #7]
	RegParams.pDrParams = &RegParams.cmnParams.paramsType2.DRParams[0];
    8a92:	001a      	movs	r2, r3
    8a94:	3243      	adds	r2, #67	; 0x43
    8a96:	701a      	strb	r2, [r3, #0]
    8a98:	0a16      	lsrs	r6, r2, #8
    8a9a:	705e      	strb	r6, [r3, #1]
    8a9c:	0c16      	lsrs	r6, r2, #16
    8a9e:	709e      	strb	r6, [r3, #2]
    8aa0:	0e12      	lsrs	r2, r2, #24
    8aa2:	70da      	strb	r2, [r3, #3]
	RegParams.pSubBandParams = &RegParams.cmnParams.paramsType2.SubBands[0];
    8aa4:	001a      	movs	r2, r3
    8aa6:	32c4      	adds	r2, #196	; 0xc4
    8aa8:	32ff      	adds	r2, #255	; 0xff
    8aaa:	731a      	strb	r2, [r3, #12]
    8aac:	0a16      	lsrs	r6, r2, #8
    8aae:	735e      	strb	r6, [r3, #13]
    8ab0:	0c16      	lsrs	r6, r2, #16
    8ab2:	739e      	strb	r6, [r3, #14]
    8ab4:	0e12      	lsrs	r2, r2, #24
    8ab6:	73da      	strb	r2, [r3, #15]
	RegParams.pOtherChParams = &RegParams.cmnParams.paramsType2.othChParams[0];
    8ab8:	001a      	movs	r2, r3
    8aba:	32a3      	adds	r2, #163	; 0xa3
    8abc:	721a      	strb	r2, [r3, #8]
    8abe:	0a16      	lsrs	r6, r2, #8
    8ac0:	725e      	strb	r6, [r3, #9]
    8ac2:	0c16      	lsrs	r6, r2, #16
    8ac4:	729e      	strb	r6, [r3, #10]
    8ac6:	0e12      	lsrs	r2, r2, #24
    8ac8:	72da      	strb	r2, [r3, #11]
	RegParams.pDutyCycleTimer = &RegParams.cmnParams.paramsType2.DutyCycleTimer;
    8aca:	001a      	movs	r2, r3
    8acc:	3264      	adds	r2, #100	; 0x64
    8ace:	32ff      	adds	r2, #255	; 0xff
    8ad0:	741a      	strb	r2, [r3, #16]
    8ad2:	0a16      	lsrs	r6, r2, #8
    8ad4:	745e      	strb	r6, [r3, #17]
    8ad6:	0c16      	lsrs	r6, r2, #16
    8ad8:	749e      	strb	r6, [r3, #18]
    8ada:	0e12      	lsrs	r2, r2, #24
    8adc:	74da      	strb	r2, [r3, #19]
    RegParams.pJoinDutyCycleTimer = &RegParams.joinDutyCycleTimer;
    8ade:	001a      	movs	r2, r3
    8ae0:	3234      	adds	r2, #52	; 0x34
    8ae2:	751a      	strb	r2, [r3, #20]
    8ae4:	0a16      	lsrs	r6, r2, #8
    8ae6:	755e      	strb	r6, [r3, #21]
    8ae8:	0c16      	lsrs	r6, r2, #16
    8aea:	759e      	strb	r6, [r3, #22]
    8aec:	0e12      	lsrs	r2, r2, #24
    8aee:	75da      	strb	r2, [r3, #23]
	RegParams.pJoinBackoffTimer = &RegParams.joinBackoffTimer;
    8af0:	001a      	movs	r2, r3
    8af2:	323d      	adds	r2, #61	; 0x3d
    8af4:	761a      	strb	r2, [r3, #24]
    8af6:	0a16      	lsrs	r6, r2, #8
    8af8:	765e      	strb	r6, [r3, #25]
    8afa:	0c16      	lsrs	r6, r2, #16
    8afc:	769e      	strb	r6, [r3, #26]
    8afe:	0e12      	lsrs	r2, r2, #24
    8b00:	76da      	strb	r2, [r3, #27]
	RegParams.MinNewChIndex = 3;
    8b02:	2221      	movs	r2, #33	; 0x21
    8b04:	5499      	strb	r1, [r3, r2]
	RegParams.FeaturesSupport = FEATURES_SUPPORTED_EU;
    8b06:	2622      	movs	r6, #34	; 0x22
    8b08:	3a01      	subs	r2, #1
    8b0a:	549e      	strb	r6, [r3, r2]
	RegParams.minDataRate = MAC_DATARATE_MIN_EU;
    8b0c:	3a19      	subs	r2, #25
    8b0e:	3602      	adds	r6, #2
    8b10:	559a      	strb	r2, [r3, r6]
	RegParams.maxDataRate = MAC_DATARATE_MAX_EU;
    8b12:	3601      	adds	r6, #1
    8b14:	559c      	strb	r4, [r3, r6]
	RegParams.Rx1DrOffset = 5;
    8b16:	2705      	movs	r7, #5
    8b18:	3607      	adds	r6, #7
    8b1a:	559f      	strb	r7, [r3, r6]
	RegParams.maxTxPwrIndx = 7;
    8b1c:	3601      	adds	r6, #1
    8b1e:	559a      	strb	r2, [r3, r6]
	RegParams.cmnParams.paramsType2.minNonDefChId = 3;
    8b20:	32ba      	adds	r2, #186	; 0xba
    8b22:	32ff      	adds	r2, #255	; 0xff
    8b24:	5499      	strb	r1, [r3, r2]
	RegParams.maxTxPwr = DEFAULT_EIRP_EU;
    8b26:	3a99      	subs	r2, #153	; 0x99
    8b28:	3aff      	subs	r2, #255	; 0xff
    8b2a:	549d      	strb	r5, [r3, r2]
	RegParams.pDutyCycleTimer->timerId = regTimerId[0];
    8b2c:	4a71      	ldr	r2, [pc, #452]	; (8cf4 <LORAReg_InitEU+0x294>)
    8b2e:	7815      	ldrb	r5, [r2, #0]
    8b30:	2168      	movs	r1, #104	; 0x68
    8b32:	31ff      	adds	r1, #255	; 0xff
    8b34:	545d      	strb	r5, [r3, r1]
	RegParams.pJoinBackoffTimer->timerId = regTimerId[1];
    8b36:	7855      	ldrb	r5, [r2, #1]
    8b38:	392b      	subs	r1, #43	; 0x2b
    8b3a:	39ff      	subs	r1, #255	; 0xff
    8b3c:	545d      	strb	r5, [r3, r1]
    RegParams.pJoinDutyCycleTimer->timerId = regTimerId[2];
    8b3e:	7891      	ldrb	r1, [r2, #2]
    8b40:	223c      	movs	r2, #60	; 0x3c
    8b42:	5499      	strb	r1, [r3, r2]
	RegParams.pJoinDutyCycleTimer->remainingtime =0;
    8b44:	2100      	movs	r1, #0
    8b46:	3a04      	subs	r2, #4
    8b48:	5499      	strb	r1, [r3, r2]
    8b4a:	3201      	adds	r2, #1
    8b4c:	5499      	strb	r1, [r3, r2]
    8b4e:	3201      	adds	r2, #1
    8b50:	5499      	strb	r1, [r3, r2]
    8b52:	3201      	adds	r2, #1
    8b54:	5499      	strb	r1, [r3, r2]
	RegParams.joinbccount =0;
    8b56:	3207      	adds	r2, #7
    8b58:	549c      	strb	r4, [r3, r2]
	RegParams.joinDutyCycleTimeout =0;
    8b5a:	001a      	movs	r2, r3
    8b5c:	323e      	adds	r2, #62	; 0x3e
    8b5e:	7011      	strb	r1, [r2, #0]
    8b60:	7051      	strb	r1, [r2, #1]
    8b62:	7091      	strb	r1, [r2, #2]
    8b64:	70d1      	strb	r1, [r2, #3]
	RegParams.band = ismBand;
    8b66:	222e      	movs	r2, #46	; 0x2e
    8b68:	5498      	strb	r0, [r3, r2]
	if(ismBand == ISM_EU868)
    8b6a:	2800      	cmp	r0, #0
    8b6c:	d006      	beq.n	8b7c <LORAReg_InitEU+0x11c>
		return UNSUPPORTED_BAND;
    8b6e:	23c6      	movs	r3, #198	; 0xc6
	else if(ismBand == ISM_EU433)
    8b70:	2801      	cmp	r0, #1
    8b72:	d100      	bne.n	8b76 <LORAReg_InitEU+0x116>
    8b74:	e084      	b.n	8c80 <LORAReg_InitEU+0x220>
}
    8b76:	0018      	movs	r0, r3
    8b78:	b00b      	add	sp, #44	; 0x2c
    8b7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    memcpy (RegParams.pChParams, DefaultChannels868, sizeof(DefaultChannels868) );
    8b7c:	001c      	movs	r4, r3
    8b7e:	0018      	movs	r0, r3
    8b80:	3083      	adds	r0, #131	; 0x83
    8b82:	3a28      	subs	r2, #40	; 0x28
    8b84:	495c      	ldr	r1, [pc, #368]	; (8cf8 <LORAReg_InitEU+0x298>)
    8b86:	4d5d      	ldr	r5, [pc, #372]	; (8cfc <LORAReg_InitEU+0x29c>)
    8b88:	47a8      	blx	r5
    memcpy (RegParams.pOtherChParams, AdvChannels868, sizeof(AdvChannels868) );	
    8b8a:	0020      	movs	r0, r4
    8b8c:	30a3      	adds	r0, #163	; 0xa3
    8b8e:	2224      	movs	r2, #36	; 0x24
    8b90:	495b      	ldr	r1, [pc, #364]	; (8d00 <LORAReg_InitEU+0x2a0>)
    8b92:	47a8      	blx	r5
	memcpy (RegParams.pSubBandParams, SubBandParams868, sizeof(SubBandParams868) );
    8b94:	0020      	movs	r0, r4
    8b96:	30c4      	adds	r0, #196	; 0xc4
    8b98:	30ff      	adds	r0, #255	; 0xff
    8b9a:	2248      	movs	r2, #72	; 0x48
    8b9c:	4959      	ldr	r1, [pc, #356]	; (8d04 <LORAReg_InitEU+0x2a4>)
    8b9e:	47a8      	blx	r5
	memcpy(RegParams.cmnParams.paramsType2.subBandDutyCycle,SubBandDutyCycle868,sizeof(SubBandDutyCycle868));
    8ba0:	0020      	movs	r0, r4
    8ba2:	30ae      	adds	r0, #174	; 0xae
    8ba4:	30ff      	adds	r0, #255	; 0xff
    8ba6:	220c      	movs	r2, #12
    8ba8:	4957      	ldr	r1, [pc, #348]	; (8d08 <LORAReg_InitEU+0x2a8>)
    8baa:	47a8      	blx	r5
    8bac:	2303      	movs	r3, #3
        RegParams.pChParams[i].dataRange.value = UINT8_MAX;		
    8bae:	4850      	ldr	r0, [pc, #320]	; (8cf0 <LORAReg_InitEU+0x290>)
    8bb0:	25ff      	movs	r5, #255	; 0xff
    for (i = 3; i < RegParams.maxChannels; i++)
    8bb2:	242a      	movs	r4, #42	; 0x2a
        RegParams.pChParams[i].dataRange.value = UINT8_MAX;		
    8bb4:	7902      	ldrb	r2, [r0, #4]
    8bb6:	7941      	ldrb	r1, [r0, #5]
    8bb8:	0209      	lsls	r1, r1, #8
    8bba:	4311      	orrs	r1, r2
    8bbc:	7982      	ldrb	r2, [r0, #6]
    8bbe:	0412      	lsls	r2, r2, #16
    8bc0:	4311      	orrs	r1, r2
    8bc2:	79c2      	ldrb	r2, [r0, #7]
    8bc4:	0612      	lsls	r2, r2, #24
    8bc6:	430a      	orrs	r2, r1
    8bc8:	0059      	lsls	r1, r3, #1
    8bca:	188a      	adds	r2, r1, r2
    8bcc:	7055      	strb	r5, [r2, #1]
    for (i = 3; i < RegParams.maxChannels; i++)
    8bce:	3301      	adds	r3, #1
    8bd0:	b2db      	uxtb	r3, r3
    8bd2:	5702      	ldrsb	r2, [r0, r4]
    8bd4:	4293      	cmp	r3, r2
    8bd6:	dbed      	blt.n	8bb4 <LORAReg_InitEU+0x154>
		RegParams.DefRx1DataRate = MAC_868_RX1_WINDOW_DATARATE;
    8bd8:	4b45      	ldr	r3, [pc, #276]	; (8cf0 <LORAReg_InitEU+0x290>)
    8bda:	2200      	movs	r2, #0
    8bdc:	2122      	movs	r1, #34	; 0x22
    8bde:	545a      	strb	r2, [r3, r1]
		RegParams.DefRx2DataRate = MAC_868_RX2_WINDOW_DATARATE;
    8be0:	3101      	adds	r1, #1
    8be2:	545a      	strb	r2, [r3, r1]
		RegParams.DefRx2Freq = MAC_868_RX2_WINDOW_FREQ;
    8be4:	3208      	adds	r2, #8
    8be6:	771a      	strb	r2, [r3, #28]
    8be8:	3a22      	subs	r2, #34	; 0x22
    8bea:	775a      	strb	r2, [r3, #29]
    8bec:	3a13      	subs	r2, #19
    8bee:	779a      	strb	r2, [r3, #30]
    8bf0:	3260      	adds	r2, #96	; 0x60
    8bf2:	77da      	strb	r2, [r3, #31]
		RegParams.regParamItems.fileid = PDS_FILE_REG_EU868_04_IDX;
    8bf4:	3920      	subs	r1, #32
    8bf6:	4a45      	ldr	r2, [pc, #276]	; (8d0c <LORAReg_InitEU+0x2ac>)
    8bf8:	5499      	strb	r1, [r3, r2]
		RegParams.regParamItems.ch_param_1_item_id = PDS_REG_EU868_CH_PARAM_1;
    8bfa:	2100      	movs	r1, #0
    8bfc:	4a44      	ldr	r2, [pc, #272]	; (8d10 <LORAReg_InitEU+0x2b0>)
    8bfe:	5499      	strb	r1, [r3, r2]
    8c00:	189a      	adds	r2, r3, r2
    8c02:	2103      	movs	r1, #3
    8c04:	7051      	strb	r1, [r2, #1]
		RegParams.regParamItems.ch_param_2_item_id = PDS_REG_EU868_CH_PARAM_2;
    8c06:	2100      	movs	r1, #0
    8c08:	2284      	movs	r2, #132	; 0x84
    8c0a:	0092      	lsls	r2, r2, #2
    8c0c:	5499      	strb	r1, [r3, r2]
    8c0e:	189a      	adds	r2, r3, r2
    8c10:	310b      	adds	r1, #11
    8c12:	7051      	strb	r1, [r2, #1]
		RegParams.regParamItems.band_item_id = 0;
    8c14:	2100      	movs	r1, #0
    8c16:	4a3f      	ldr	r2, [pc, #252]	; (8d14 <LORAReg_InitEU+0x2b4>)
    8c18:	5499      	strb	r1, [r3, r2]
    8c1a:	189a      	adds	r2, r3, r2
    8c1c:	7051      	strb	r1, [r2, #1]
		RegParams.regParamItems.lastUsedSB = 0;
    8c1e:	2283      	movs	r2, #131	; 0x83
    8c20:	0092      	lsls	r2, r2, #2
    8c22:	5499      	strb	r1, [r3, r2]
    8c24:	4694      	mov	ip, r2
    8c26:	4463      	add	r3, ip
    8c28:	2200      	movs	r2, #0
    8c2a:	705a      	strb	r2, [r3, #1]
		filemarks_fid1.fileMarkListAddr = aRegEu868Fid1PdsOps;
    8c2c:	ab02      	add	r3, sp, #8
		filemarks_fid1.numItems =  (uint8_t)(PDS_REG_EU868_FID1_MAX_VALUE & 0x00FF);
    8c2e:	2601      	movs	r6, #1
    8c30:	711e      	strb	r6, [r3, #4]
		filemarks_fid1.fIDcb = LorawanReg_EU868_Pds_Cb;
    8c32:	4d39      	ldr	r5, [pc, #228]	; (8d18 <LORAReg_InitEU+0x2b8>)
		PDS_RegFile(PDS_FILE_REG_EU868_04_IDX,filemarks_fid1);
    8c34:	9500      	str	r5, [sp, #0]
    8c36:	4939      	ldr	r1, [pc, #228]	; (8d1c <LORAReg_InitEU+0x2bc>)
    8c38:	9a03      	ldr	r2, [sp, #12]
    8c3a:	4b39      	ldr	r3, [pc, #228]	; (8d20 <LORAReg_InitEU+0x2c0>)
    8c3c:	2003      	movs	r0, #3
    8c3e:	4c39      	ldr	r4, [pc, #228]	; (8d24 <LORAReg_InitEU+0x2c4>)
    8c40:	47a0      	blx	r4
		filemarks_fid2.fileMarkListAddr = aRegEu868Fid2PdsOps;
    8c42:	ab06      	add	r3, sp, #24
		filemarks_fid2.numItems =  (uint8_t)(PDS_REG_EU868_FID2_MAX_VALUE & 0x00FF);
    8c44:	711e      	strb	r6, [r3, #4]
		PDS_RegFile(PDS_FILE_REG_EU868_12_IDX,filemarks_fid2);
    8c46:	9500      	str	r5, [sp, #0]
    8c48:	4937      	ldr	r1, [pc, #220]	; (8d28 <LORAReg_InitEU+0x2c8>)
    8c4a:	9a07      	ldr	r2, [sp, #28]
    8c4c:	4b37      	ldr	r3, [pc, #220]	; (8d2c <LORAReg_InitEU+0x2cc>)
    8c4e:	200b      	movs	r0, #11
    8c50:	47a0      	blx	r4
	memcpy (RegParams.pDrParams, DefaultDrparamsEU, sizeof(DefaultDrparamsEU) );
    8c52:	4a27      	ldr	r2, [pc, #156]	; (8cf0 <LORAReg_InitEU+0x290>)
    8c54:	7810      	ldrb	r0, [r2, #0]
    8c56:	7853      	ldrb	r3, [r2, #1]
    8c58:	021b      	lsls	r3, r3, #8
    8c5a:	4303      	orrs	r3, r0
    8c5c:	7890      	ldrb	r0, [r2, #2]
    8c5e:	0400      	lsls	r0, r0, #16
    8c60:	4303      	orrs	r3, r0
    8c62:	78d0      	ldrb	r0, [r2, #3]
    8c64:	0600      	lsls	r0, r0, #24
    8c66:	4318      	orrs	r0, r3
    8c68:	2240      	movs	r2, #64	; 0x40
    8c6a:	4931      	ldr	r1, [pc, #196]	; (8d30 <LORAReg_InitEU+0x2d0>)
    8c6c:	4b23      	ldr	r3, [pc, #140]	; (8cfc <LORAReg_InitEU+0x29c>)
    8c6e:	4798      	blx	r3
    LORAREG_InitGetAttrFnPtrsEU();
    8c70:	4b30      	ldr	r3, [pc, #192]	; (8d34 <LORAReg_InitEU+0x2d4>)
    8c72:	4798      	blx	r3
	LORAREG_InitValidateAttrFnPtrsEU();
    8c74:	4b30      	ldr	r3, [pc, #192]	; (8d38 <LORAReg_InitEU+0x2d8>)
    8c76:	4798      	blx	r3
	LORAREG_InitSetAttrFnPtrsEU();
    8c78:	4b30      	ldr	r3, [pc, #192]	; (8d3c <LORAReg_InitEU+0x2dc>)
    8c7a:	4798      	blx	r3
	return status;
    8c7c:	2308      	movs	r3, #8
    8c7e:	e77a      	b.n	8b76 <LORAReg_InitEU+0x116>
    memcpy (RegParams.pChParams, DefaultChannels433, sizeof(DefaultChannels433) );
    8c80:	4c1b      	ldr	r4, [pc, #108]	; (8cf0 <LORAReg_InitEU+0x290>)
    8c82:	0020      	movs	r0, r4
    8c84:	3083      	adds	r0, #131	; 0x83
    8c86:	2206      	movs	r2, #6
    8c88:	492d      	ldr	r1, [pc, #180]	; (8d40 <LORAReg_InitEU+0x2e0>)
    8c8a:	4d1c      	ldr	r5, [pc, #112]	; (8cfc <LORAReg_InitEU+0x29c>)
    8c8c:	47a8      	blx	r5
    memcpy (RegParams.pOtherChParams, AdvChannels433, sizeof(AdvChannels433) );
    8c8e:	0020      	movs	r0, r4
    8c90:	30a3      	adds	r0, #163	; 0xa3
    8c92:	2224      	movs	r2, #36	; 0x24
    8c94:	492b      	ldr	r1, [pc, #172]	; (8d44 <LORAReg_InitEU+0x2e4>)
    8c96:	47a8      	blx	r5
	memcpy (RegParams.pSubBandParams, SubBandParams433, sizeof(SubBandParams433) );	
    8c98:	0020      	movs	r0, r4
    8c9a:	30c4      	adds	r0, #196	; 0xc4
    8c9c:	30ff      	adds	r0, #255	; 0xff
    8c9e:	220c      	movs	r2, #12
    8ca0:	4929      	ldr	r1, [pc, #164]	; (8d48 <LORAReg_InitEU+0x2e8>)
    8ca2:	47a8      	blx	r5
    8ca4:	2303      	movs	r3, #3
        RegParams.pChParams[i].dataRange.value = UINT8_MAX;
    8ca6:	4812      	ldr	r0, [pc, #72]	; (8cf0 <LORAReg_InitEU+0x290>)
    8ca8:	25ff      	movs	r5, #255	; 0xff
    for (i = 3; i < RegParams.maxChannels; i++)
    8caa:	242a      	movs	r4, #42	; 0x2a
        RegParams.pChParams[i].dataRange.value = UINT8_MAX;
    8cac:	7902      	ldrb	r2, [r0, #4]
    8cae:	7941      	ldrb	r1, [r0, #5]
    8cb0:	0209      	lsls	r1, r1, #8
    8cb2:	4311      	orrs	r1, r2
    8cb4:	7982      	ldrb	r2, [r0, #6]
    8cb6:	0412      	lsls	r2, r2, #16
    8cb8:	4311      	orrs	r1, r2
    8cba:	79c2      	ldrb	r2, [r0, #7]
    8cbc:	0612      	lsls	r2, r2, #24
    8cbe:	430a      	orrs	r2, r1
    8cc0:	0059      	lsls	r1, r3, #1
    8cc2:	188a      	adds	r2, r1, r2
    8cc4:	7055      	strb	r5, [r2, #1]
    for (i = 3; i < RegParams.maxChannels; i++)
    8cc6:	3301      	adds	r3, #1
    8cc8:	b2db      	uxtb	r3, r3
    8cca:	5702      	ldrsb	r2, [r0, r4]
    8ccc:	4293      	cmp	r3, r2
    8cce:	dbed      	blt.n	8cac <LORAReg_InitEU+0x24c>
		RegParams.DefRx1DataRate = MAC_433_RX1_WINDOW_DATARATE;
    8cd0:	4b07      	ldr	r3, [pc, #28]	; (8cf0 <LORAReg_InitEU+0x290>)
    8cd2:	2105      	movs	r1, #5
    8cd4:	2222      	movs	r2, #34	; 0x22
    8cd6:	5499      	strb	r1, [r3, r2]
		RegParams.DefRx2DataRate = MAC_433_RX2_WINDOW_DATARATE;
    8cd8:	2100      	movs	r1, #0
    8cda:	3201      	adds	r2, #1
    8cdc:	5499      	strb	r1, [r3, r2]
		RegParams.DefRx2Freq = MAC_433_RX2_WINDOW_FREQ;
    8cde:	3a93      	subs	r2, #147	; 0x93
    8ce0:	771a      	strb	r2, [r3, #28]
    8ce2:	3241      	adds	r2, #65	; 0x41
    8ce4:	775a      	strb	r2, [r3, #29]
    8ce6:	3a02      	subs	r2, #2
    8ce8:	779a      	strb	r2, [r3, #30]
    8cea:	324a      	adds	r2, #74	; 0x4a
    8cec:	77da      	strb	r2, [r3, #31]
    8cee:	e7b0      	b.n	8c52 <LORAReg_InitEU+0x1f2>
    8cf0:	200024d0 	.word	0x200024d0
    8cf4:	200024cc 	.word	0x200024cc
    8cf8:	0001fe78 	.word	0x0001fe78
    8cfc:	00019da5 	.word	0x00019da5
    8d00:	0001fe4c 	.word	0x0001fe4c
    8d04:	0001fed8 	.word	0x0001fed8
    8d08:	0001fec0 	.word	0x0001fec0
    8d0c:	0000020b 	.word	0x0000020b
    8d10:	0000020e 	.word	0x0000020e
    8d14:	00000212 	.word	0x00000212
    8d18:	00008a5d 	.word	0x00008a5d
    8d1c:	200022b4 	.word	0x200022b4
    8d20:	0001ff20 	.word	0x0001ff20
    8d24:	0000e3dd 	.word	0x0000e3dd
    8d28:	200022b8 	.word	0x200022b8
    8d2c:	0001ff28 	.word	0x0001ff28
    8d30:	0001fe80 	.word	0x0001fe80
    8d34:	0000cbb5 	.word	0x0000cbb5
    8d38:	0000d3c5 	.word	0x0000d3c5
    8d3c:	0000d695 	.word	0x0000d695
    8d40:	0001fe70 	.word	0x0001fe70
    8d44:	0001fe28 	.word	0x0001fe28
    8d48:	0001fecc 	.word	0x0001fecc

00008d4c <LorawanReg_IND_Pds_Cb>:
#if (ENABLE_PDS == 1)
/* PDS Callback function */
void LorawanReg_IND_Pds_Cb(void)
{
	
}
    8d4c:	4770      	bx	lr
	...

00008d50 <LORAReg_InitIN>:
{
    8d50:	b530      	push	{r4, r5, lr}
    8d52:	b087      	sub	sp, #28
	RegParams.TxCurDataRate = MAC_DEF_TX_CURRENT_DATARATE_IN;
    8d54:	4b72      	ldr	r3, [pc, #456]	; (8f20 <LORAReg_InitIN+0x1d0>)
    8d56:	2403      	movs	r4, #3
    8d58:	2226      	movs	r2, #38	; 0x26
    8d5a:	549c      	strb	r4, [r3, r2]
	RegParams.maxChannels = MAX_CHANNELS_IN;
    8d5c:	2110      	movs	r1, #16
    8d5e:	3204      	adds	r2, #4
    8d60:	5499      	strb	r1, [r3, r2]
	RegParams.maxSubBands = MAX_NUM_SUBBANDS_IN;
    8d62:	3a29      	subs	r2, #41	; 0x29
    8d64:	3119      	adds	r1, #25
    8d66:	545a      	strb	r2, [r3, r1]
	RegParams.MacTxPower = MAC_DEF_TX_POWER_IN;
    8d68:	3902      	subs	r1, #2
    8d6a:	545a      	strb	r2, [r3, r1]
	RegParams.pChParams = &RegParams.cmnParams.paramsType2.chParams[0];
    8d6c:	001a      	movs	r2, r3
    8d6e:	3283      	adds	r2, #131	; 0x83
    8d70:	2100      	movs	r1, #0
    8d72:	711a      	strb	r2, [r3, #4]
    8d74:	0a15      	lsrs	r5, r2, #8
    8d76:	715d      	strb	r5, [r3, #5]
    8d78:	0c15      	lsrs	r5, r2, #16
    8d7a:	719d      	strb	r5, [r3, #6]
    8d7c:	0e12      	lsrs	r2, r2, #24
    8d7e:	71da      	strb	r2, [r3, #7]
	RegParams.pDrParams = &RegParams.cmnParams.paramsType2.DRParams[0];
    8d80:	001a      	movs	r2, r3
    8d82:	3243      	adds	r2, #67	; 0x43
    8d84:	701a      	strb	r2, [r3, #0]
    8d86:	0a15      	lsrs	r5, r2, #8
    8d88:	705d      	strb	r5, [r3, #1]
    8d8a:	0c15      	lsrs	r5, r2, #16
    8d8c:	709d      	strb	r5, [r3, #2]
    8d8e:	0e12      	lsrs	r2, r2, #24
    8d90:	70da      	strb	r2, [r3, #3]
	RegParams.pOtherChParams = &RegParams.cmnParams.paramsType2.othChParams[0];
    8d92:	001a      	movs	r2, r3
    8d94:	32a3      	adds	r2, #163	; 0xa3
    8d96:	721a      	strb	r2, [r3, #8]
    8d98:	0a15      	lsrs	r5, r2, #8
    8d9a:	725d      	strb	r5, [r3, #9]
    8d9c:	0c15      	lsrs	r5, r2, #16
    8d9e:	729d      	strb	r5, [r3, #10]
    8da0:	0e12      	lsrs	r2, r2, #24
    8da2:	72da      	strb	r2, [r3, #11]
	RegParams.pDutyCycleTimer = &RegParams.cmnParams.paramsType2.DutyCycleTimer;
    8da4:	001a      	movs	r2, r3
    8da6:	3264      	adds	r2, #100	; 0x64
    8da8:	32ff      	adds	r2, #255	; 0xff
    8daa:	741a      	strb	r2, [r3, #16]
    8dac:	0a15      	lsrs	r5, r2, #8
    8dae:	745d      	strb	r5, [r3, #17]
    8db0:	0c15      	lsrs	r5, r2, #16
    8db2:	749d      	strb	r5, [r3, #18]
    8db4:	0e12      	lsrs	r2, r2, #24
    8db6:	74da      	strb	r2, [r3, #19]
    RegParams.pJoinDutyCycleTimer = &RegParams.joinDutyCycleTimer;
    8db8:	001a      	movs	r2, r3
    8dba:	3234      	adds	r2, #52	; 0x34
    8dbc:	751a      	strb	r2, [r3, #20]
    8dbe:	0a15      	lsrs	r5, r2, #8
    8dc0:	755d      	strb	r5, [r3, #21]
    8dc2:	0c15      	lsrs	r5, r2, #16
    8dc4:	759d      	strb	r5, [r3, #22]
    8dc6:	0e12      	lsrs	r2, r2, #24
    8dc8:	75da      	strb	r2, [r3, #23]
	RegParams.pJoinBackoffTimer = &RegParams.joinBackoffTimer;
    8dca:	001a      	movs	r2, r3
    8dcc:	323d      	adds	r2, #61	; 0x3d
    8dce:	761a      	strb	r2, [r3, #24]
    8dd0:	0a15      	lsrs	r5, r2, #8
    8dd2:	765d      	strb	r5, [r3, #25]
    8dd4:	0c15      	lsrs	r5, r2, #16
    8dd6:	769d      	strb	r5, [r3, #26]
    8dd8:	0e12      	lsrs	r2, r2, #24
    8dda:	76da      	strb	r2, [r3, #27]
	RegParams.DefRx1DataRate = MAC_RX1_WINDOW_DATARATE_IN;
    8ddc:	2222      	movs	r2, #34	; 0x22
    8dde:	5499      	strb	r1, [r3, r2]
	RegParams.DefRx2DataRate = MAC_RX2_WINDOW_DATARATE_IN;
    8de0:	2502      	movs	r5, #2
    8de2:	3201      	adds	r2, #1
    8de4:	549d      	strb	r5, [r3, r2]
	RegParams.DefRx2Freq = MAC_RX2_WINDOW_FREQ_IN;	
    8de6:	3a33      	subs	r2, #51	; 0x33
    8de8:	771a      	strb	r2, [r3, #28]
    8dea:	3a70      	subs	r2, #112	; 0x70
    8dec:	775a      	strb	r2, [r3, #29]
    8dee:	3226      	adds	r2, #38	; 0x26
    8df0:	779a      	strb	r2, [r3, #30]
    8df2:	328d      	adds	r2, #141	; 0x8d
    8df4:	77da      	strb	r2, [r3, #31]
	RegParams.MinNewChIndex = MIN_CHANNEL_INDEX_IN;
    8df6:	3a12      	subs	r2, #18
    8df8:	549c      	strb	r4, [r3, r2]
	RegParams.FeaturesSupport = FEATURES_SUPPORTED_IN;
    8dfa:	352e      	adds	r5, #46	; 0x2e
    8dfc:	3a01      	subs	r2, #1
    8dfe:	549d      	strb	r5, [r3, r2]
	RegParams.minDataRate = MAC_DATARATE_MIN_IN;
    8e00:	3a19      	subs	r2, #25
    8e02:	3d0c      	subs	r5, #12
    8e04:	555a      	strb	r2, [r3, r5]
	RegParams.maxDataRate = MAC_DATARATE_MAX_IN;
    8e06:	3501      	adds	r5, #1
    8e08:	5559      	strb	r1, [r3, r5]
	RegParams.cmnParams.paramsType2.minNonDefChId = 3;
    8e0a:	359c      	adds	r5, #156	; 0x9c
    8e0c:	35ff      	adds	r5, #255	; 0xff
    8e0e:	555c      	strb	r4, [r3, r5]
	RegParams.Rx1DrOffset = 7;
    8e10:	3429      	adds	r4, #41	; 0x29
    8e12:	551a      	strb	r2, [r3, r4]
	RegParams.maxTxPwrIndx = 10;
    8e14:	3c22      	subs	r4, #34	; 0x22
    8e16:	3226      	adds	r2, #38	; 0x26
    8e18:	549c      	strb	r4, [r3, r2]
	RegParams.maxTxPwr = DEFAULT_EIRP_IN;
    8e1a:	3414      	adds	r4, #20
    8e1c:	3a05      	subs	r2, #5
    8e1e:	549c      	strb	r4, [r3, r2]
	RegParams.pJoinDutyCycleTimer->timerId = regTimerId[0];
    8e20:	4a40      	ldr	r2, [pc, #256]	; (8f24 <LORAReg_InitIN+0x1d4>)
    8e22:	7815      	ldrb	r5, [r2, #0]
    8e24:	341e      	adds	r4, #30
    8e26:	551d      	strb	r5, [r3, r4]
	RegParams.pJoinDutyCycleTimer->remainingtime = 0;
    8e28:	2500      	movs	r5, #0
    8e2a:	3c04      	subs	r4, #4
    8e2c:	551d      	strb	r5, [r3, r4]
    8e2e:	3401      	adds	r4, #1
    8e30:	551d      	strb	r5, [r3, r4]
    8e32:	3401      	adds	r4, #1
    8e34:	551d      	strb	r5, [r3, r4]
    8e36:	3401      	adds	r4, #1
    8e38:	551d      	strb	r5, [r3, r4]
	RegParams.pJoinBackoffTimer->timerId = regTimerId[1];
    8e3a:	7854      	ldrb	r4, [r2, #1]
    8e3c:	223d      	movs	r2, #61	; 0x3d
    8e3e:	549c      	strb	r4, [r3, r2]
	RegParams.joinbccount =0;
    8e40:	3205      	adds	r2, #5
    8e42:	5499      	strb	r1, [r3, r2]
	RegParams.joinDutyCycleTimeout =0;
    8e44:	001a      	movs	r2, r3
    8e46:	323e      	adds	r2, #62	; 0x3e
    8e48:	7011      	strb	r1, [r2, #0]
    8e4a:	7051      	strb	r1, [r2, #1]
    8e4c:	7091      	strb	r1, [r2, #2]
    8e4e:	70d1      	strb	r1, [r2, #3]
	RegParams.band = ismBand;
    8e50:	222e      	movs	r2, #46	; 0x2e
    8e52:	5498      	strb	r0, [r3, r2]
		result = LORAWAN_INVALID_PARAMETER;
    8e54:	240a      	movs	r4, #10
	if(ismBand == ISM_IND865)
    8e56:	280f      	cmp	r0, #15
    8e58:	d008      	beq.n	8e6c <LORAReg_InitIN+0x11c>
    LORAREG_InitGetAttrFnPtrsIN();
    8e5a:	4b33      	ldr	r3, [pc, #204]	; (8f28 <LORAReg_InitIN+0x1d8>)
    8e5c:	4798      	blx	r3
	LORAREG_InitValidateAttrFnPtrsIN();
    8e5e:	4b33      	ldr	r3, [pc, #204]	; (8f2c <LORAReg_InitIN+0x1dc>)
    8e60:	4798      	blx	r3
	LORAREG_InitSetAttrFnPtrsIN();
    8e62:	4b33      	ldr	r3, [pc, #204]	; (8f30 <LORAReg_InitIN+0x1e0>)
    8e64:	4798      	blx	r3
}
    8e66:	0020      	movs	r0, r4
    8e68:	b007      	add	sp, #28
    8e6a:	bd30      	pop	{r4, r5, pc}
    memcpy (RegParams.pChParams, DefaultChannels865, sizeof(DefaultChannels865) );
    8e6c:	001c      	movs	r4, r3
    8e6e:	0018      	movs	r0, r3
    8e70:	3083      	adds	r0, #131	; 0x83
    8e72:	3a28      	subs	r2, #40	; 0x28
    8e74:	492f      	ldr	r1, [pc, #188]	; (8f34 <LORAReg_InitIN+0x1e4>)
    8e76:	4d30      	ldr	r5, [pc, #192]	; (8f38 <LORAReg_InitIN+0x1e8>)
    8e78:	47a8      	blx	r5
	memcpy (RegParams.pOtherChParams, AdvChannels865, sizeof(AdvChannels865) );
    8e7a:	0020      	movs	r0, r4
    8e7c:	30a3      	adds	r0, #163	; 0xa3
    8e7e:	2224      	movs	r2, #36	; 0x24
    8e80:	492e      	ldr	r1, [pc, #184]	; (8f3c <LORAReg_InitIN+0x1ec>)
    8e82:	47a8      	blx	r5
    8e84:	2006      	movs	r0, #6
	    RegParams.pChParams[i].dataRange.value = UINT8_MAX;
    8e86:	4926      	ldr	r1, [pc, #152]	; (8f20 <LORAReg_InitIN+0x1d0>)
    8e88:	24ff      	movs	r4, #255	; 0xff
    8e8a:	790b      	ldrb	r3, [r1, #4]
    8e8c:	794a      	ldrb	r2, [r1, #5]
    8e8e:	0212      	lsls	r2, r2, #8
    8e90:	431a      	orrs	r2, r3
    8e92:	798b      	ldrb	r3, [r1, #6]
    8e94:	041b      	lsls	r3, r3, #16
    8e96:	431a      	orrs	r2, r3
    8e98:	79cb      	ldrb	r3, [r1, #7]
    8e9a:	061b      	lsls	r3, r3, #24
    8e9c:	4313      	orrs	r3, r2
    8e9e:	181b      	adds	r3, r3, r0
    8ea0:	705c      	strb	r4, [r3, #1]
    8ea2:	3002      	adds	r0, #2
    for (i = MIN_CHANNEL_INDEX_IN; i < MAX_CHANNELS_IN; i++)
    8ea4:	2820      	cmp	r0, #32
    8ea6:	d1f0      	bne.n	8e8a <LORAReg_InitIN+0x13a>
		RegParams.cmnParams.paramsType2.txParams.maxEIRP = DEFAULT_EIRP_IN;
    8ea8:	4c1d      	ldr	r4, [pc, #116]	; (8f20 <LORAReg_InitIN+0x1d0>)
    8eaa:	221e      	movs	r2, #30
    8eac:	23c2      	movs	r3, #194	; 0xc2
    8eae:	33ff      	adds	r3, #255	; 0xff
    8eb0:	54e2      	strb	r2, [r4, r3]
		memcpy (RegParams.pDrParams, DefaultDrParamsIN, sizeof(DefaultDrParamsIN) );
    8eb2:	7820      	ldrb	r0, [r4, #0]
    8eb4:	7863      	ldrb	r3, [r4, #1]
    8eb6:	021b      	lsls	r3, r3, #8
    8eb8:	4303      	orrs	r3, r0
    8eba:	78a0      	ldrb	r0, [r4, #2]
    8ebc:	0400      	lsls	r0, r0, #16
    8ebe:	4303      	orrs	r3, r0
    8ec0:	78e0      	ldrb	r0, [r4, #3]
    8ec2:	0600      	lsls	r0, r0, #24
    8ec4:	4318      	orrs	r0, r3
    8ec6:	3222      	adds	r2, #34	; 0x22
    8ec8:	491d      	ldr	r1, [pc, #116]	; (8f40 <LORAReg_InitIN+0x1f0>)
    8eca:	4b1b      	ldr	r3, [pc, #108]	; (8f38 <LORAReg_InitIN+0x1e8>)
    8ecc:	4798      	blx	r3
		RegParams.regParamItems.fileid = PDS_FILE_REG_IND_07_IDX;
    8ece:	2306      	movs	r3, #6
    8ed0:	2106      	movs	r1, #6
    8ed2:	4a1c      	ldr	r2, [pc, #112]	; (8f44 <LORAReg_InitIN+0x1f4>)
    8ed4:	54a1      	strb	r1, [r4, r2]
		RegParams.regParamItems.ch_param_1_item_id = PDS_REG_IND_CH_PARAM_1;
    8ed6:	2100      	movs	r1, #0
    8ed8:	4a1b      	ldr	r2, [pc, #108]	; (8f48 <LORAReg_InitIN+0x1f8>)
    8eda:	54a1      	strb	r1, [r4, r2]
    8edc:	18a2      	adds	r2, r4, r2
    8ede:	7053      	strb	r3, [r2, #1]
		RegParams.regParamItems.ch_param_2_item_id = PDS_REG_IND_CH_PARAM_2;
    8ee0:	3101      	adds	r1, #1
    8ee2:	2284      	movs	r2, #132	; 0x84
    8ee4:	0092      	lsls	r2, r2, #2
    8ee6:	54a1      	strb	r1, [r4, r2]
    8ee8:	18a2      	adds	r2, r4, r2
    8eea:	7053      	strb	r3, [r2, #1]
		RegParams.regParamItems.band_item_id = 0;
    8eec:	2200      	movs	r2, #0
    8eee:	4b17      	ldr	r3, [pc, #92]	; (8f4c <LORAReg_InitIN+0x1fc>)
    8ef0:	54e2      	strb	r2, [r4, r3]
    8ef2:	18e3      	adds	r3, r4, r3
    8ef4:	705a      	strb	r2, [r3, #1]
		RegParams.regParamItems.lastUsedSB = 0;
    8ef6:	2383      	movs	r3, #131	; 0x83
    8ef8:	009b      	lsls	r3, r3, #2
    8efa:	54e2      	strb	r2, [r4, r3]
    8efc:	469c      	mov	ip, r3
    8efe:	4464      	add	r4, ip
    8f00:	2300      	movs	r3, #0
    8f02:	7063      	strb	r3, [r4, #1]
		filemarks.fileMarkListAddr = aRegIndPdsOps;
    8f04:	ab02      	add	r3, sp, #8
		filemarks.numItems =  (uint8_t)(PDS_REG_IND_MAX_VALUE & 0x00FF);
    8f06:	3202      	adds	r2, #2
    8f08:	711a      	strb	r2, [r3, #4]
		filemarks.fIDcb = LorawanReg_IND_Pds_Cb;
    8f0a:	4a11      	ldr	r2, [pc, #68]	; (8f50 <LORAReg_InitIN+0x200>)
		PDS_RegFile(PDS_FILE_REG_IND_07_IDX,filemarks);
    8f0c:	9200      	str	r2, [sp, #0]
    8f0e:	4911      	ldr	r1, [pc, #68]	; (8f54 <LORAReg_InitIN+0x204>)
    8f10:	9a03      	ldr	r2, [sp, #12]
    8f12:	4b11      	ldr	r3, [pc, #68]	; (8f58 <LORAReg_InitIN+0x208>)
    8f14:	2006      	movs	r0, #6
    8f16:	4c11      	ldr	r4, [pc, #68]	; (8f5c <LORAReg_InitIN+0x20c>)
    8f18:	47a0      	blx	r4
	StackRetStatus_t result = LORAWAN_SUCCESS;
    8f1a:	2408      	movs	r4, #8
    8f1c:	e79d      	b.n	8e5a <LORAReg_InitIN+0x10a>
    8f1e:	46c0      	nop			; (mov r8, r8)
    8f20:	200024d0 	.word	0x200024d0
    8f24:	200024cc 	.word	0x200024cc
    8f28:	0000cf81 	.word	0x0000cf81
    8f2c:	0000d505 	.word	0x0000d505
    8f30:	0000d7c9 	.word	0x0000d7c9
    8f34:	0001ff54 	.word	0x0001ff54
    8f38:	00019da5 	.word	0x00019da5
    8f3c:	0001ff30 	.word	0x0001ff30
    8f40:	0001ff5c 	.word	0x0001ff5c
    8f44:	0000020b 	.word	0x0000020b
    8f48:	0000020e 	.word	0x0000020e
    8f4c:	00000212 	.word	0x00000212
    8f50:	00008d4d 	.word	0x00008d4d
    8f54:	200022bc 	.word	0x200022bc
    8f58:	0001ff9c 	.word	0x0001ff9c
    8f5c:	0000e3dd 	.word	0x0000e3dd

00008f60 <LorawanReg_JPN_Pds_Cb>:
#if (ENABLE_PDS == 1)
/* PDS Callback function */
void LorawanReg_JPN_Pds_Cb(void)
{

}
    8f60:	4770      	bx	lr
	...

00008f64 <LORAReg_InitJP>:
{
    8f64:	b5f0      	push	{r4, r5, r6, r7, lr}
    8f66:	46c6      	mov	lr, r8
    8f68:	b500      	push	{lr}
    8f6a:	b086      	sub	sp, #24
	RegParams.TxCurDataRate = MAC_DEF_TX_CURRENT_DATARATE_JP;
    8f6c:	4b97      	ldr	r3, [pc, #604]	; (91cc <LORAReg_InitJP+0x268>)
    8f6e:	2103      	movs	r1, #3
    8f70:	2226      	movs	r2, #38	; 0x26
    8f72:	5499      	strb	r1, [r3, r2]
	RegParams.maxChannels = MAX_CHANNELS_JP;
    8f74:	2510      	movs	r5, #16
    8f76:	3204      	adds	r2, #4
    8f78:	549d      	strb	r5, [r3, r2]
	RegParams.maxSubBands = MAX_NUM_SUBBANDS_JP;
    8f7a:	3901      	subs	r1, #1
    8f7c:	3a01      	subs	r2, #1
    8f7e:	5499      	strb	r1, [r3, r2]
	RegParams.MacTxPower = MAC_DEF_TX_POWER_JP;
    8f80:	2401      	movs	r4, #1
    8f82:	3a02      	subs	r2, #2
    8f84:	549c      	strb	r4, [r3, r2]
	RegParams.pChParams = &RegParams.cmnParams.paramsType2.chParams[0];
    8f86:	001a      	movs	r2, r3
    8f88:	3283      	adds	r2, #131	; 0x83
    8f8a:	2400      	movs	r4, #0
    8f8c:	46a0      	mov	r8, r4
    8f8e:	711a      	strb	r2, [r3, #4]
    8f90:	0a16      	lsrs	r6, r2, #8
    8f92:	715e      	strb	r6, [r3, #5]
    8f94:	0c16      	lsrs	r6, r2, #16
    8f96:	719e      	strb	r6, [r3, #6]
    8f98:	0e12      	lsrs	r2, r2, #24
    8f9a:	71da      	strb	r2, [r3, #7]
	RegParams.pDrParams = &RegParams.cmnParams.paramsType2.DRParams[0];
    8f9c:	001a      	movs	r2, r3
    8f9e:	3243      	adds	r2, #67	; 0x43
    8fa0:	701a      	strb	r2, [r3, #0]
    8fa2:	0a16      	lsrs	r6, r2, #8
    8fa4:	705e      	strb	r6, [r3, #1]
    8fa6:	0c16      	lsrs	r6, r2, #16
    8fa8:	709e      	strb	r6, [r3, #2]
    8faa:	0e12      	lsrs	r2, r2, #24
    8fac:	70da      	strb	r2, [r3, #3]
	RegParams.pSubBandParams = &RegParams.cmnParams.paramsType2.SubBands[0];
    8fae:	001a      	movs	r2, r3
    8fb0:	32c4      	adds	r2, #196	; 0xc4
    8fb2:	32ff      	adds	r2, #255	; 0xff
    8fb4:	731a      	strb	r2, [r3, #12]
    8fb6:	0a16      	lsrs	r6, r2, #8
    8fb8:	735e      	strb	r6, [r3, #13]
    8fba:	0c16      	lsrs	r6, r2, #16
    8fbc:	739e      	strb	r6, [r3, #14]
    8fbe:	0e12      	lsrs	r2, r2, #24
    8fc0:	73da      	strb	r2, [r3, #15]
	RegParams.pOtherChParams = &RegParams.cmnParams.paramsType2.othChParams[0];
    8fc2:	001a      	movs	r2, r3
    8fc4:	32a3      	adds	r2, #163	; 0xa3
    8fc6:	721a      	strb	r2, [r3, #8]
    8fc8:	0a16      	lsrs	r6, r2, #8
    8fca:	725e      	strb	r6, [r3, #9]
    8fcc:	0c16      	lsrs	r6, r2, #16
    8fce:	729e      	strb	r6, [r3, #10]
    8fd0:	0e12      	lsrs	r2, r2, #24
    8fd2:	72da      	strb	r2, [r3, #11]
	RegParams.pDutyCycleTimer = &RegParams.cmnParams.paramsType2.DutyCycleTimer;
    8fd4:	001a      	movs	r2, r3
    8fd6:	3264      	adds	r2, #100	; 0x64
    8fd8:	32ff      	adds	r2, #255	; 0xff
    8fda:	741a      	strb	r2, [r3, #16]
    8fdc:	0a16      	lsrs	r6, r2, #8
    8fde:	745e      	strb	r6, [r3, #17]
    8fe0:	0c16      	lsrs	r6, r2, #16
    8fe2:	749e      	strb	r6, [r3, #18]
    8fe4:	0e12      	lsrs	r2, r2, #24
    8fe6:	74da      	strb	r2, [r3, #19]
    RegParams.pJoinDutyCycleTimer = &RegParams.joinDutyCycleTimer;
    8fe8:	001a      	movs	r2, r3
    8fea:	3234      	adds	r2, #52	; 0x34
    8fec:	751a      	strb	r2, [r3, #20]
    8fee:	0a16      	lsrs	r6, r2, #8
    8ff0:	755e      	strb	r6, [r3, #21]
    8ff2:	0c16      	lsrs	r6, r2, #16
    8ff4:	759e      	strb	r6, [r3, #22]
    8ff6:	0e12      	lsrs	r2, r2, #24
    8ff8:	75da      	strb	r2, [r3, #23]
	RegParams.pJoinBackoffTimer = &RegParams.joinBackoffTimer;
    8ffa:	001a      	movs	r2, r3
    8ffc:	323d      	adds	r2, #61	; 0x3d
    8ffe:	761a      	strb	r2, [r3, #24]
    9000:	0a16      	lsrs	r6, r2, #8
    9002:	765e      	strb	r6, [r3, #25]
    9004:	0c16      	lsrs	r6, r2, #16
    9006:	769e      	strb	r6, [r3, #26]
    9008:	0e12      	lsrs	r2, r2, #24
    900a:	76da      	strb	r2, [r3, #27]
	RegParams.DefRx1DataRate = MAC_RX1_WINDOW_DATARATE_JP;
    900c:	2222      	movs	r2, #34	; 0x22
    900e:	5499      	strb	r1, [r3, r2]
	RegParams.DefRx2DataRate = MAC_RX2_WINDOW_DATARATE_JP;
    9010:	3201      	adds	r2, #1
    9012:	5499      	strb	r1, [r3, r2]
	RegParams.DefRx2Freq = MAC_RX2_WINDOW_FREQ_JP;	
    9014:	2200      	movs	r2, #0
    9016:	771a      	strb	r2, [r3, #28]
    9018:	3a16      	subs	r2, #22
    901a:	775a      	strb	r2, [r3, #29]
    901c:	321c      	adds	r2, #28
    901e:	779a      	strb	r2, [r3, #30]
    9020:	3231      	adds	r2, #49	; 0x31
    9022:	77da      	strb	r2, [r3, #31]
	RegParams.MinNewChIndex = MIN_CHANNEL_INDEX_JP;
    9024:	3a16      	subs	r2, #22
    9026:	5499      	strb	r1, [r3, r2]
	RegParams.FeaturesSupport = FEATURES_SUPPORTED_JP;
    9028:	2636      	movs	r6, #54	; 0x36
    902a:	3a01      	subs	r2, #1
    902c:	549e      	strb	r6, [r3, r2]
	RegParams.minDataRate = MAC_DATARATE_MIN_JP;
    902e:	3a19      	subs	r2, #25
    9030:	3e12      	subs	r6, #18
    9032:	559a      	strb	r2, [r3, r6]
	RegParams.maxDataRate = MAC_DATARATE_MAX_JP;
    9034:	3601      	adds	r6, #1
    9036:	559c      	strb	r4, [r3, r6]
	RegParams.cmnParams.paramsType2.LBTScanPeriod = LBT_SCAN_PERIOD_JP;
    9038:	3e20      	subs	r6, #32
    903a:	27be      	movs	r7, #190	; 0xbe
    903c:	37ff      	adds	r7, #255	; 0xff
    903e:	55de      	strb	r6, [r3, r7]
	RegParams.cmnParams.paramsType2.LBTSignalThreshold = LBT_SIGNAL_THRESHOLD_JP;
    9040:	3f0e      	subs	r7, #14
    9042:	3fff      	subs	r7, #255	; 0xff
    9044:	46bc      	mov	ip, r7
    9046:	370f      	adds	r7, #15
    9048:	37ff      	adds	r7, #255	; 0xff
    904a:	4664      	mov	r4, ip
    904c:	55dc      	strb	r4, [r3, r7]
	RegParams.cmnParams.paramsType2.LBT_RSSISamplesCount = LBT_RSSI_SAMPLES_COUNT_JP;
    904e:	27c0      	movs	r7, #192	; 0xc0
    9050:	37ff      	adds	r7, #255	; 0xff
    9052:	55de      	strb	r6, [r3, r7]
	RegParams.cmnParams.paramsType2.minNonDefChId = 2;
    9054:	36bc      	adds	r6, #188	; 0xbc
    9056:	36ff      	adds	r6, #255	; 0xff
    9058:	5599      	strb	r1, [r3, r6]
	RegParams.Rx1DrOffset = 7;
    905a:	312a      	adds	r1, #42	; 0x2a
    905c:	545a      	strb	r2, [r3, r1]
	RegParams.maxTxPwrIndx = 7;
    905e:	3101      	adds	r1, #1
    9060:	545a      	strb	r2, [r3, r1]
	RegParams.maxTxPwr = DEFAULT_EIRP_JP;
    9062:	3221      	adds	r2, #33	; 0x21
    9064:	549d      	strb	r5, [r3, r2]
	RegParams.cmnParams.paramsType2.LBTTimer.timerId = regTimerId[0];
    9066:	4a5a      	ldr	r2, [pc, #360]	; (91d0 <LORAReg_InitJP+0x26c>)
    9068:	7815      	ldrb	r5, [r2, #0]
    906a:	3180      	adds	r1, #128	; 0x80
    906c:	31ff      	adds	r1, #255	; 0xff
    906e:	545d      	strb	r5, [r3, r1]
	RegParams.pDutyCycleTimer->timerId = regTimerId[1];
    9070:	7855      	ldrb	r5, [r2, #1]
    9072:	2168      	movs	r1, #104	; 0x68
    9074:	31ff      	adds	r1, #255	; 0xff
    9076:	545d      	strb	r5, [r3, r1]
	RegParams.pJoinBackoffTimer->timerId = regTimerId[2];
    9078:	7895      	ldrb	r5, [r2, #2]
    907a:	392b      	subs	r1, #43	; 0x2b
    907c:	39ff      	subs	r1, #255	; 0xff
    907e:	545d      	strb	r5, [r3, r1]
    RegParams.pJoinDutyCycleTimer->timerId = regTimerId[3];
    9080:	78d1      	ldrb	r1, [r2, #3]
    9082:	223c      	movs	r2, #60	; 0x3c
    9084:	5499      	strb	r1, [r3, r2]
	RegParams.pJoinDutyCycleTimer->remainingtime =0;
    9086:	2100      	movs	r1, #0
    9088:	3a04      	subs	r2, #4
    908a:	5499      	strb	r1, [r3, r2]
    908c:	3201      	adds	r2, #1
    908e:	5499      	strb	r1, [r3, r2]
    9090:	3201      	adds	r2, #1
    9092:	5499      	strb	r1, [r3, r2]
    9094:	3201      	adds	r2, #1
    9096:	5499      	strb	r1, [r3, r2]
	RegParams.joinbccount =0;
    9098:	3207      	adds	r2, #7
    909a:	4641      	mov	r1, r8
    909c:	5499      	strb	r1, [r3, r2]
	RegParams.joinDutyCycleTimeout =0;
    909e:	001a      	movs	r2, r3
    90a0:	323e      	adds	r2, #62	; 0x3e
    90a2:	2100      	movs	r1, #0
    90a4:	7011      	strb	r1, [r2, #0]
    90a6:	7051      	strb	r1, [r2, #1]
    90a8:	7091      	strb	r1, [r2, #2]
    90aa:	70d1      	strb	r1, [r2, #3]
	RegParams.cmnParams.paramsType2.txParams.uplinkDwellTime = 1;
    90ac:	31c3      	adds	r1, #195	; 0xc3
    90ae:	31ff      	adds	r1, #255	; 0xff
    90b0:	5c5a      	ldrb	r2, [r3, r1]
    90b2:	2401      	movs	r4, #1
    90b4:	4322      	orrs	r2, r4
	RegParams.cmnParams.paramsType2.txParams.downlinkDwellTime = 1;
    90b6:	2402      	movs	r4, #2
    90b8:	4322      	orrs	r2, r4
    90ba:	545a      	strb	r2, [r3, r1]
	RegParams.band = ismBand;
    90bc:	222e      	movs	r2, #46	; 0x2e
    90be:	5498      	strb	r0, [r3, r2]
		result = LORAWAN_INVALID_PARAMETER;
    90c0:	240a      	movs	r4, #10
	if(ismBand == ISM_JPN923)
    90c2:	2805      	cmp	r0, #5
    90c4:	d00a      	beq.n	90dc <LORAReg_InitJP+0x178>
    LORAREG_InitGetAttrFnPtrsJP();
    90c6:	4b43      	ldr	r3, [pc, #268]	; (91d4 <LORAReg_InitJP+0x270>)
    90c8:	4798      	blx	r3
	LORAREG_InitValidateAttrFnPtrsJP();
    90ca:	4b43      	ldr	r3, [pc, #268]	; (91d8 <LORAReg_InitJP+0x274>)
    90cc:	4798      	blx	r3
	LORAREG_InitSetAttrFnPtrsJP();
    90ce:	4b43      	ldr	r3, [pc, #268]	; (91dc <LORAReg_InitJP+0x278>)
    90d0:	4798      	blx	r3
}
    90d2:	0020      	movs	r0, r4
    90d4:	b006      	add	sp, #24
    90d6:	bc04      	pop	{r2}
    90d8:	4690      	mov	r8, r2
    90da:	bdf0      	pop	{r4, r5, r6, r7, pc}
    memcpy (RegParams.pChParams, DefaultChannels923JP, sizeof(DefaultChannels923JP) );
    90dc:	001c      	movs	r4, r3
    90de:	0018      	movs	r0, r3
    90e0:	3083      	adds	r0, #131	; 0x83
    90e2:	3a2a      	subs	r2, #42	; 0x2a
    90e4:	493e      	ldr	r1, [pc, #248]	; (91e0 <LORAReg_InitJP+0x27c>)
    90e6:	4d3f      	ldr	r5, [pc, #252]	; (91e4 <LORAReg_InitJP+0x280>)
    90e8:	47a8      	blx	r5
	memcpy (RegParams.pOtherChParams, AdvChannels923JP, sizeof(AdvChannels923JP) );
    90ea:	0020      	movs	r0, r4
    90ec:	30a3      	adds	r0, #163	; 0xa3
    90ee:	2218      	movs	r2, #24
    90f0:	493d      	ldr	r1, [pc, #244]	; (91e8 <LORAReg_InitJP+0x284>)
    90f2:	47a8      	blx	r5
	memcpy (RegParams.pSubBandParams, SubBandParamsJP923, sizeof(SubBandParamsJP923) );
    90f4:	0020      	movs	r0, r4
    90f6:	30c4      	adds	r0, #196	; 0xc4
    90f8:	30ff      	adds	r0, #255	; 0xff
    90fa:	2218      	movs	r2, #24
    90fc:	493b      	ldr	r1, [pc, #236]	; (91ec <LORAReg_InitJP+0x288>)
    90fe:	47a8      	blx	r5
	memcpy (RegParams.cmnParams.paramsType2.subBandDutyCycle,SubBandDutyCycleJP923,sizeof(SubBandDutyCycleJP923));
    9100:	0020      	movs	r0, r4
    9102:	30ae      	adds	r0, #174	; 0xae
    9104:	30ff      	adds	r0, #255	; 0xff
    9106:	2204      	movs	r2, #4
    9108:	4939      	ldr	r1, [pc, #228]	; (91f0 <LORAReg_InitJP+0x28c>)
    910a:	47a8      	blx	r5
    910c:	2302      	movs	r3, #2
    910e:	2202      	movs	r2, #2
	    RegParams.pChParams[i].dataRange.value = UINT8_MAX;
    9110:	492e      	ldr	r1, [pc, #184]	; (91cc <LORAReg_InitJP+0x268>)
    9112:	3fc0      	subs	r7, #192	; 0xc0
		RegParams.cmnParams.paramsType2.channelTimer[i] = 0;
    9114:	2500      	movs	r5, #0
    for (i = 2; i < RegParams.maxChannels; i++)
    9116:	3e97      	subs	r6, #151	; 0x97
    9118:	3eff      	subs	r6, #255	; 0xff
	    RegParams.pChParams[i].dataRange.value = UINT8_MAX;
    911a:	7908      	ldrb	r0, [r1, #4]
    911c:	794c      	ldrb	r4, [r1, #5]
    911e:	0224      	lsls	r4, r4, #8
    9120:	4304      	orrs	r4, r0
    9122:	7988      	ldrb	r0, [r1, #6]
    9124:	0400      	lsls	r0, r0, #16
    9126:	4304      	orrs	r4, r0
    9128:	79c8      	ldrb	r0, [r1, #7]
    912a:	0600      	lsls	r0, r0, #24
    912c:	4320      	orrs	r0, r4
    912e:	0054      	lsls	r4, r2, #1
    9130:	1820      	adds	r0, r4, r0
    9132:	7047      	strb	r7, [r0, #1]
		RegParams.cmnParams.paramsType2.channelTimer[i] = 0;
    9134:	3358      	adds	r3, #88	; 0x58
    9136:	009b      	lsls	r3, r3, #2
    9138:	18cb      	adds	r3, r1, r3
    913a:	721d      	strb	r5, [r3, #8]
    913c:	725d      	strb	r5, [r3, #9]
    913e:	729d      	strb	r5, [r3, #10]
    9140:	72dd      	strb	r5, [r3, #11]
    for (i = 2; i < RegParams.maxChannels; i++)
    9142:	3201      	adds	r2, #1
    9144:	b2d2      	uxtb	r2, r2
    9146:	0013      	movs	r3, r2
    9148:	5788      	ldrsb	r0, [r1, r6]
    914a:	4282      	cmp	r2, r0
    914c:	dbe5      	blt.n	911a <LORAReg_InitJP+0x1b6>
	RegParams.lastUsedChannelIndex = UINT8_MAX;
    914e:	4c1f      	ldr	r4, [pc, #124]	; (91cc <LORAReg_InitJP+0x268>)
    9150:	22ff      	movs	r2, #255	; 0xff
    9152:	232f      	movs	r3, #47	; 0x2f
    9154:	54e2      	strb	r2, [r4, r3]
		RegParams.cmnParams.paramsType2.txParams.maxEIRP = DEFAULT_EIRP_JP;//MAX_EIRP_JP;
    9156:	3aef      	subs	r2, #239	; 0xef
    9158:	23c2      	movs	r3, #194	; 0xc2
    915a:	33ff      	adds	r3, #255	; 0xff
    915c:	54e2      	strb	r2, [r4, r3]
		memcpy (RegParams.pDrParams, DefaultDrParamsJP, sizeof(DefaultDrParamsJP) );
    915e:	7820      	ldrb	r0, [r4, #0]
    9160:	7863      	ldrb	r3, [r4, #1]
    9162:	021b      	lsls	r3, r3, #8
    9164:	4303      	orrs	r3, r0
    9166:	78a0      	ldrb	r0, [r4, #2]
    9168:	0400      	lsls	r0, r0, #16
    916a:	4303      	orrs	r3, r0
    916c:	78e0      	ldrb	r0, [r4, #3]
    916e:	0600      	lsls	r0, r0, #24
    9170:	4318      	orrs	r0, r3
    9172:	3230      	adds	r2, #48	; 0x30
    9174:	491f      	ldr	r1, [pc, #124]	; (91f4 <LORAReg_InitJP+0x290>)
    9176:	4b1b      	ldr	r3, [pc, #108]	; (91e4 <LORAReg_InitJP+0x280>)
    9178:	4798      	blx	r3
		RegParams.regParamItems.fileid = PDS_FILE_REG_JPN_08_IDX;
    917a:	2307      	movs	r3, #7
    917c:	2107      	movs	r1, #7
    917e:	4a1e      	ldr	r2, [pc, #120]	; (91f8 <LORAReg_InitJP+0x294>)
    9180:	54a1      	strb	r1, [r4, r2]
		RegParams.regParamItems.ch_param_1_item_id = PDS_REG_JPN_CH_PARAM_1;
    9182:	2100      	movs	r1, #0
    9184:	4a1d      	ldr	r2, [pc, #116]	; (91fc <LORAReg_InitJP+0x298>)
    9186:	54a1      	strb	r1, [r4, r2]
    9188:	18a2      	adds	r2, r4, r2
    918a:	7053      	strb	r3, [r2, #1]
		RegParams.regParamItems.ch_param_2_item_id = PDS_REG_JPN_CH_PARAM_2;
    918c:	3101      	adds	r1, #1
    918e:	2284      	movs	r2, #132	; 0x84
    9190:	0092      	lsls	r2, r2, #2
    9192:	54a1      	strb	r1, [r4, r2]
    9194:	18a2      	adds	r2, r4, r2
    9196:	7053      	strb	r3, [r2, #1]
		RegParams.regParamItems.band_item_id = 0;
    9198:	2200      	movs	r2, #0
    919a:	4b19      	ldr	r3, [pc, #100]	; (9200 <LORAReg_InitJP+0x29c>)
    919c:	54e2      	strb	r2, [r4, r3]
    919e:	18e3      	adds	r3, r4, r3
    91a0:	705a      	strb	r2, [r3, #1]
		RegParams.regParamItems.lastUsedSB = 0;
    91a2:	2383      	movs	r3, #131	; 0x83
    91a4:	009b      	lsls	r3, r3, #2
    91a6:	54e2      	strb	r2, [r4, r3]
    91a8:	469c      	mov	ip, r3
    91aa:	4464      	add	r4, ip
    91ac:	2300      	movs	r3, #0
    91ae:	7063      	strb	r3, [r4, #1]
		filemarks.fileMarkListAddr = aRegJpnFid1PdsOps;
    91b0:	ab02      	add	r3, sp, #8
		filemarks.numItems =  (uint8_t)(PDS_REG_JPN_FID1_MAX_VALUE & 0x00FF);
    91b2:	3202      	adds	r2, #2
    91b4:	711a      	strb	r2, [r3, #4]
		filemarks.fIDcb = LorawanReg_JPN_Pds_Cb;
    91b6:	4a13      	ldr	r2, [pc, #76]	; (9204 <LORAReg_InitJP+0x2a0>)
		PDS_RegFile(PDS_FILE_REG_JPN_08_IDX,filemarks);
    91b8:	9200      	str	r2, [sp, #0]
    91ba:	4913      	ldr	r1, [pc, #76]	; (9208 <LORAReg_InitJP+0x2a4>)
    91bc:	9a03      	ldr	r2, [sp, #12]
    91be:	4b13      	ldr	r3, [pc, #76]	; (920c <LORAReg_InitJP+0x2a8>)
    91c0:	2007      	movs	r0, #7
    91c2:	4c13      	ldr	r4, [pc, #76]	; (9210 <LORAReg_InitJP+0x2ac>)
    91c4:	47a0      	blx	r4
	StackRetStatus_t result = LORAWAN_SUCCESS;
    91c6:	2408      	movs	r4, #8
    91c8:	e77d      	b.n	90c6 <LORAReg_InitJP+0x162>
    91ca:	46c0      	nop			; (mov r8, r8)
    91cc:	200024d0 	.word	0x200024d0
    91d0:	200024cc 	.word	0x200024cc
    91d4:	0000d0b5 	.word	0x0000d0b5
    91d8:	0000d56d 	.word	0x0000d56d
    91dc:	0000d82d 	.word	0x0000d82d
    91e0:	0001ffc4 	.word	0x0001ffc4
    91e4:	00019da5 	.word	0x00019da5
    91e8:	0001ffac 	.word	0x0001ffac
    91ec:	0002000c 	.word	0x0002000c
    91f0:	00020008 	.word	0x00020008
    91f4:	0001ffc8 	.word	0x0001ffc8
    91f8:	0000020b 	.word	0x0000020b
    91fc:	0000020e 	.word	0x0000020e
    9200:	00000212 	.word	0x00000212
    9204:	00008f61 	.word	0x00008f61
    9208:	200022c0 	.word	0x200022c0
    920c:	00020024 	.word	0x00020024
    9210:	0000e3dd 	.word	0x0000e3dd

00009214 <LorawanReg_KR_Pds_Cb>:
#if (ENABLE_PDS == 1)
/* PDS Callback */
void LorawanReg_KR_Pds_Cb(void)
{

}
    9214:	4770      	bx	lr
	...

00009218 <LORAReg_InitKR>:
{
    9218:	b5f0      	push	{r4, r5, r6, r7, lr}
    921a:	46de      	mov	lr, fp
    921c:	4657      	mov	r7, sl
    921e:	464e      	mov	r6, r9
    9220:	4645      	mov	r5, r8
    9222:	b5e0      	push	{r5, r6, r7, lr}
    9224:	b087      	sub	sp, #28
	RegParams.TxCurDataRate = MAC_DEF_TX_CURRENT_DATARATE_KR;
    9226:	4ba9      	ldr	r3, [pc, #676]	; (94cc <LORAReg_InitKR+0x2b4>)
    9228:	2403      	movs	r4, #3
    922a:	2226      	movs	r2, #38	; 0x26
    922c:	549c      	strb	r4, [r3, r2]
	RegParams.maxChannels = MAX_CHANNELS_KR;
    922e:	2110      	movs	r1, #16
    9230:	3204      	adds	r2, #4
    9232:	5499      	strb	r1, [r3, r2]
	RegParams.maxSubBands = MAX_NUM_SUBBANDS_KR;
    9234:	3a29      	subs	r2, #41	; 0x29
    9236:	3119      	adds	r1, #25
    9238:	545a      	strb	r2, [r3, r1]
	RegParams.MacTxPower = MAC_DEF_TX_POWER_KR;
    923a:	3902      	subs	r1, #2
    923c:	545a      	strb	r2, [r3, r1]
	RegParams.pChParams = &RegParams.cmnParams.paramsType2.chParams[0];
    923e:	001a      	movs	r2, r3
    9240:	3283      	adds	r2, #131	; 0x83
    9242:	2100      	movs	r1, #0
    9244:	711a      	strb	r2, [r3, #4]
    9246:	0a15      	lsrs	r5, r2, #8
    9248:	715d      	strb	r5, [r3, #5]
    924a:	0c15      	lsrs	r5, r2, #16
    924c:	719d      	strb	r5, [r3, #6]
    924e:	0e12      	lsrs	r2, r2, #24
    9250:	71da      	strb	r2, [r3, #7]
	RegParams.pDrParams = &RegParams.cmnParams.paramsType2.DRParams[0];
    9252:	001a      	movs	r2, r3
    9254:	3243      	adds	r2, #67	; 0x43
    9256:	701a      	strb	r2, [r3, #0]
    9258:	0a15      	lsrs	r5, r2, #8
    925a:	705d      	strb	r5, [r3, #1]
    925c:	0c15      	lsrs	r5, r2, #16
    925e:	709d      	strb	r5, [r3, #2]
    9260:	0e12      	lsrs	r2, r2, #24
    9262:	70da      	strb	r2, [r3, #3]
	RegParams.pOtherChParams = &RegParams.cmnParams.paramsType2.othChParams[0];
    9264:	001a      	movs	r2, r3
    9266:	32a3      	adds	r2, #163	; 0xa3
    9268:	721a      	strb	r2, [r3, #8]
    926a:	0a15      	lsrs	r5, r2, #8
    926c:	725d      	strb	r5, [r3, #9]
    926e:	0c15      	lsrs	r5, r2, #16
    9270:	729d      	strb	r5, [r3, #10]
    9272:	0e12      	lsrs	r2, r2, #24
    9274:	72da      	strb	r2, [r3, #11]
	RegParams.pDutyCycleTimer = &RegParams.cmnParams.paramsType2.DutyCycleTimer;
    9276:	001a      	movs	r2, r3
    9278:	3264      	adds	r2, #100	; 0x64
    927a:	32ff      	adds	r2, #255	; 0xff
    927c:	741a      	strb	r2, [r3, #16]
    927e:	0a15      	lsrs	r5, r2, #8
    9280:	745d      	strb	r5, [r3, #17]
    9282:	0c15      	lsrs	r5, r2, #16
    9284:	749d      	strb	r5, [r3, #18]
    9286:	0e12      	lsrs	r2, r2, #24
    9288:	74da      	strb	r2, [r3, #19]
    RegParams.pJoinDutyCycleTimer = &RegParams.joinDutyCycleTimer;
    928a:	001a      	movs	r2, r3
    928c:	3234      	adds	r2, #52	; 0x34
    928e:	751a      	strb	r2, [r3, #20]
    9290:	0a15      	lsrs	r5, r2, #8
    9292:	755d      	strb	r5, [r3, #21]
    9294:	0c15      	lsrs	r5, r2, #16
    9296:	759d      	strb	r5, [r3, #22]
    9298:	0e12      	lsrs	r2, r2, #24
    929a:	75da      	strb	r2, [r3, #23]
	RegParams.pJoinBackoffTimer = &RegParams.joinBackoffTimer;
    929c:	001a      	movs	r2, r3
    929e:	323d      	adds	r2, #61	; 0x3d
    92a0:	761a      	strb	r2, [r3, #24]
    92a2:	0a15      	lsrs	r5, r2, #8
    92a4:	765d      	strb	r5, [r3, #25]
    92a6:	0c15      	lsrs	r5, r2, #16
    92a8:	769d      	strb	r5, [r3, #26]
    92aa:	0e12      	lsrs	r2, r2, #24
    92ac:	76da      	strb	r2, [r3, #27]
	RegParams.DefRx1DataRate = MAC_RX1_WINDOW_DATARATE_KR;
    92ae:	2222      	movs	r2, #34	; 0x22
    92b0:	5499      	strb	r1, [r3, r2]
	RegParams.DefRx2DataRate = MAC_RX2_WINDOW_DATARATE_KR;
    92b2:	3201      	adds	r2, #1
    92b4:	5499      	strb	r1, [r3, r2]
	RegParams.DefRx2Freq = MAC_RX2_WINDOW_FREQ_KR;	
    92b6:	3a43      	subs	r2, #67	; 0x43
    92b8:	771a      	strb	r2, [r3, #28]
    92ba:	3233      	adds	r2, #51	; 0x33
    92bc:	775a      	strb	r2, [r3, #29]
    92be:	3a20      	subs	r2, #32
    92c0:	779a      	strb	r2, [r3, #30]
    92c2:	3243      	adds	r2, #67	; 0x43
    92c4:	77da      	strb	r2, [r3, #31]
	RegParams.MinNewChIndex = MIN_CHANNEL_INDEX_KR;
    92c6:	3a15      	subs	r2, #21
    92c8:	549c      	strb	r4, [r3, r2]
	RegParams.FeaturesSupport = FEATURES_SUPPORTED_KR;
    92ca:	2534      	movs	r5, #52	; 0x34
    92cc:	3a01      	subs	r2, #1
    92ce:	549d      	strb	r5, [r3, r2]
	RegParams.minDataRate = MAC_DATARATE_MIN_KR;
    92d0:	3a1b      	subs	r2, #27
    92d2:	3d10      	subs	r5, #16
    92d4:	555a      	strb	r2, [r3, r5]
	RegParams.maxDataRate = MAC_DATARATE_MAX_KR;
    92d6:	3501      	adds	r5, #1
    92d8:	5559      	strb	r1, [r3, r5]
	RegParams.cmnParams.paramsType2.LBTScanPeriod = LBT_SCAN_PERIOD_KR;
    92da:	3d1b      	subs	r5, #27
    92dc:	26be      	movs	r6, #190	; 0xbe
    92de:	36ff      	adds	r6, #255	; 0xff
    92e0:	559d      	strb	r5, [r3, r6]
	RegParams.cmnParams.paramsType2.LBTSignalThreshold = LBT_SIGNAL_THRESHOLD_KR;
    92e2:	27bf      	movs	r7, #191	; 0xbf
    92e4:	3601      	adds	r6, #1
    92e6:	559f      	strb	r7, [r3, r6]
	RegParams.cmnParams.paramsType2.LBT_RSSISamplesCount = LBT_RSSI_SAMPLES_COUNT_KR;
    92e8:	26c0      	movs	r6, #192	; 0xc0
    92ea:	36ff      	adds	r6, #255	; 0xff
    92ec:	559d      	strb	r5, [r3, r6]
	RegParams.cmnParams.paramsType2.minNonDefChId = 3;
    92ee:	35b7      	adds	r5, #183	; 0xb7
    92f0:	35ff      	adds	r5, #255	; 0xff
    92f2:	555c      	strb	r4, [r3, r5]
	RegParams.Rx1DrOffset = 5;
    92f4:	3429      	adds	r4, #41	; 0x29
    92f6:	551a      	strb	r2, [r3, r4]
	RegParams.maxTxPwrIndx = 7;
    92f8:	3c25      	subs	r4, #37	; 0x25
    92fa:	3228      	adds	r2, #40	; 0x28
    92fc:	549c      	strb	r4, [r3, r2]
	RegParams.maxTxPwr = DEFAULT_EIRP_KR_HF;
    92fe:	3407      	adds	r4, #7
    9300:	3a05      	subs	r2, #5
    9302:	549c      	strb	r4, [r3, r2]
	RegParams.cmnParams.paramsType2.LBTTimer.timerId = regTimerId[0];
    9304:	4a72      	ldr	r2, [pc, #456]	; (94d0 <LORAReg_InitKR+0x2b8>)
    9306:	7815      	ldrb	r5, [r2, #0]
    9308:	349f      	adds	r4, #159	; 0x9f
    930a:	34ff      	adds	r4, #255	; 0xff
    930c:	551d      	strb	r5, [r3, r4]
	RegParams.pJoinBackoffTimer->timerId = regTimerId[1];
    930e:	7855      	ldrb	r5, [r2, #1]
    9310:	3c70      	subs	r4, #112	; 0x70
    9312:	3cff      	subs	r4, #255	; 0xff
    9314:	551d      	strb	r5, [r3, r4]
    RegParams.pJoinDutyCycleTimer->timerId = regTimerId[2];
    9316:	7894      	ldrb	r4, [r2, #2]
    9318:	223c      	movs	r2, #60	; 0x3c
    931a:	549c      	strb	r4, [r3, r2]
	RegParams.pJoinDutyCycleTimer->remainingtime =0;
    931c:	2400      	movs	r4, #0
    931e:	3a04      	subs	r2, #4
    9320:	549c      	strb	r4, [r3, r2]
    9322:	3201      	adds	r2, #1
    9324:	549c      	strb	r4, [r3, r2]
    9326:	3201      	adds	r2, #1
    9328:	549c      	strb	r4, [r3, r2]
    932a:	3201      	adds	r2, #1
    932c:	549c      	strb	r4, [r3, r2]
	RegParams.joinbccount =0;
    932e:	3207      	adds	r2, #7
    9330:	5499      	strb	r1, [r3, r2]
	RegParams.joinDutyCycleTimeout =0;
    9332:	001a      	movs	r2, r3
    9334:	323e      	adds	r2, #62	; 0x3e
    9336:	7011      	strb	r1, [r2, #0]
    9338:	7051      	strb	r1, [r2, #1]
    933a:	7091      	strb	r1, [r2, #2]
    933c:	70d1      	strb	r1, [r2, #3]
	RegParams.band = ismBand;
    933e:	222e      	movs	r2, #46	; 0x2e
    9340:	5498      	strb	r0, [r3, r2]
		result = UNSUPPORTED_BAND;
    9342:	34c6      	adds	r4, #198	; 0xc6
	if(ismBand == ISM_KR920)
    9344:	2804      	cmp	r0, #4
    9346:	d00d      	beq.n	9364 <LORAReg_InitKR+0x14c>
    LORAREG_InitGetAttrFnPtrsKR();
    9348:	4b62      	ldr	r3, [pc, #392]	; (94d4 <LORAReg_InitKR+0x2bc>)
    934a:	4798      	blx	r3
	LORAREG_InitValidateAttrFnPtrsKR();
    934c:	4b62      	ldr	r3, [pc, #392]	; (94d8 <LORAReg_InitKR+0x2c0>)
    934e:	4798      	blx	r3
	LORAREG_InitSetAttrFnPtrsKR();
    9350:	4b62      	ldr	r3, [pc, #392]	; (94dc <LORAReg_InitKR+0x2c4>)
    9352:	4798      	blx	r3
}
    9354:	0020      	movs	r0, r4
    9356:	b007      	add	sp, #28
    9358:	bc3c      	pop	{r2, r3, r4, r5}
    935a:	4690      	mov	r8, r2
    935c:	4699      	mov	r9, r3
    935e:	46a2      	mov	sl, r4
    9360:	46ab      	mov	fp, r5
    9362:	bdf0      	pop	{r4, r5, r6, r7, pc}
    memcpy (RegParams.pChParams, DefaultChannels920KR, sizeof(DefaultChannels920KR) );
    9364:	001c      	movs	r4, r3
    9366:	0018      	movs	r0, r3
    9368:	3083      	adds	r0, #131	; 0x83
    936a:	3a28      	subs	r2, #40	; 0x28
    936c:	495c      	ldr	r1, [pc, #368]	; (94e0 <LORAReg_InitKR+0x2c8>)
    936e:	4d5d      	ldr	r5, [pc, #372]	; (94e4 <LORAReg_InitKR+0x2cc>)
    9370:	47a8      	blx	r5
	memcpy (RegParams.pOtherChParams, AdvChannels920KR, sizeof(AdvChannels920KR) );
    9372:	0020      	movs	r0, r4
    9374:	30a3      	adds	r0, #163	; 0xa3
    9376:	2224      	movs	r2, #36	; 0x24
    9378:	495b      	ldr	r1, [pc, #364]	; (94e8 <LORAReg_InitKR+0x2d0>)
    937a:	47a8      	blx	r5
    937c:	2103      	movs	r1, #3
    937e:	2003      	movs	r0, #3
	    RegParams.pChParams[i].dataRange.value = UINT8_MAX;
    9380:	4b52      	ldr	r3, [pc, #328]	; (94cc <LORAReg_InitKR+0x2b4>)
    9382:	22ff      	movs	r2, #255	; 0xff
    9384:	4692      	mov	sl, r2
		RegParams.pChParams[i].status = DISABLED;
    9386:	2400      	movs	r4, #0
		RegParams.cmnParams.paramsType2.txParams.maxEIRP = UINT8_MAX;
    9388:	22c2      	movs	r2, #194	; 0xc2
    938a:	32ff      	adds	r2, #255	; 0xff
    938c:	4694      	mov	ip, r2
    938e:	4657      	mov	r7, sl
    for (i = 3; i < RegParams.maxChannels; i++)
    9390:	3a98      	subs	r2, #152	; 0x98
    9392:	3aff      	subs	r2, #255	; 0xff
    9394:	4693      	mov	fp, r2
	    RegParams.pChParams[i].dataRange.value = UINT8_MAX;
    9396:	0042      	lsls	r2, r0, #1
    9398:	791e      	ldrb	r6, [r3, #4]
    939a:	46b0      	mov	r8, r6
    939c:	795e      	ldrb	r6, [r3, #5]
    939e:	0236      	lsls	r6, r6, #8
    93a0:	46b1      	mov	r9, r6
    93a2:	4646      	mov	r6, r8
    93a4:	464d      	mov	r5, r9
    93a6:	432e      	orrs	r6, r5
    93a8:	799d      	ldrb	r5, [r3, #6]
    93aa:	042d      	lsls	r5, r5, #16
    93ac:	432e      	orrs	r6, r5
    93ae:	79dd      	ldrb	r5, [r3, #7]
    93b0:	062d      	lsls	r5, r5, #24
    93b2:	432e      	orrs	r6, r5
    93b4:	46b0      	mov	r8, r6
    93b6:	4490      	add	r8, r2
    93b8:	4645      	mov	r5, r8
    93ba:	4656      	mov	r6, sl
    93bc:	706e      	strb	r6, [r5, #1]
		RegParams.pChParams[i].status = DISABLED;
    93be:	791d      	ldrb	r5, [r3, #4]
    93c0:	46a8      	mov	r8, r5
    93c2:	795d      	ldrb	r5, [r3, #5]
    93c4:	022d      	lsls	r5, r5, #8
    93c6:	4646      	mov	r6, r8
    93c8:	432e      	orrs	r6, r5
    93ca:	799d      	ldrb	r5, [r3, #6]
    93cc:	042d      	lsls	r5, r5, #16
    93ce:	432e      	orrs	r6, r5
    93d0:	79dd      	ldrb	r5, [r3, #7]
    93d2:	062d      	lsls	r5, r5, #24
    93d4:	432e      	orrs	r6, r5
    93d6:	54b4      	strb	r4, [r6, r2]
		RegParams.pOtherChParams[i].joinRequestChannel = DISABLED;
    93d8:	7a1d      	ldrb	r5, [r3, #8]
    93da:	46a8      	mov	r8, r5
    93dc:	7a5d      	ldrb	r5, [r3, #9]
    93de:	022d      	lsls	r5, r5, #8
    93e0:	4646      	mov	r6, r8
    93e2:	432e      	orrs	r6, r5
    93e4:	7a9d      	ldrb	r5, [r3, #10]
    93e6:	042d      	lsls	r5, r5, #16
    93e8:	432e      	orrs	r6, r5
    93ea:	7add      	ldrb	r5, [r3, #11]
    93ec:	062d      	lsls	r5, r5, #24
    93ee:	432e      	orrs	r6, r5
    93f0:	46b0      	mov	r8, r6
    93f2:	1812      	adds	r2, r2, r0
    93f4:	0092      	lsls	r2, r2, #2
    93f6:	4442      	add	r2, r8
    93f8:	7254      	strb	r4, [r2, #9]
		RegParams.cmnParams.paramsType2.txParams.maxEIRP = UINT8_MAX;
    93fa:	4662      	mov	r2, ip
    93fc:	549f      	strb	r7, [r3, r2]
		RegParams.cmnParams.paramsType2.channelTimer[i] = 0;
    93fe:	000a      	movs	r2, r1
    9400:	3258      	adds	r2, #88	; 0x58
    9402:	0092      	lsls	r2, r2, #2
    9404:	189a      	adds	r2, r3, r2
    9406:	7214      	strb	r4, [r2, #8]
    9408:	7254      	strb	r4, [r2, #9]
    940a:	7294      	strb	r4, [r2, #10]
    940c:	72d4      	strb	r4, [r2, #11]
    for (i = 3; i < RegParams.maxChannels; i++)
    940e:	3001      	adds	r0, #1
    9410:	b2c0      	uxtb	r0, r0
    9412:	0001      	movs	r1, r0
    9414:	465a      	mov	r2, fp
    9416:	569a      	ldrsb	r2, [r3, r2]
    9418:	4290      	cmp	r0, r2
    941a:	dbbc      	blt.n	9396 <LORAReg_InitKR+0x17e>
	RegParams.lastUsedChannelIndex = UINT8_MAX;
    941c:	4c2b      	ldr	r4, [pc, #172]	; (94cc <LORAReg_InitKR+0x2b4>)
    941e:	22ff      	movs	r2, #255	; 0xff
    9420:	232f      	movs	r3, #47	; 0x2f
    9422:	54e2      	strb	r2, [r4, r3]
		memcpy (RegParams.pDrParams, DefaultDrParamsKR, sizeof(DefaultDrParamsKR) );
    9424:	7820      	ldrb	r0, [r4, #0]
    9426:	7863      	ldrb	r3, [r4, #1]
    9428:	021b      	lsls	r3, r3, #8
    942a:	4303      	orrs	r3, r0
    942c:	78a0      	ldrb	r0, [r4, #2]
    942e:	0400      	lsls	r0, r0, #16
    9430:	4303      	orrs	r3, r0
    9432:	78e0      	ldrb	r0, [r4, #3]
    9434:	0600      	lsls	r0, r0, #24
    9436:	4318      	orrs	r0, r3
    9438:	3acf      	subs	r2, #207	; 0xcf
    943a:	492c      	ldr	r1, [pc, #176]	; (94ec <LORAReg_InitKR+0x2d4>)
    943c:	4b29      	ldr	r3, [pc, #164]	; (94e4 <LORAReg_InitKR+0x2cc>)
    943e:	4798      	blx	r3
		for(int8_t dataRate = 0; dataRate < RegParams.maxDataRate; dataRate++)
    9440:	2325      	movs	r3, #37	; 0x25
    9442:	5ce3      	ldrb	r3, [r4, r3]
    9444:	2b00      	cmp	r3, #0
    9446:	dd18      	ble.n	947a <LORAReg_InitKR+0x262>
			RegParams.pDrParams[dataRate].modulation = MODULATION_LORA;
    9448:	4a20      	ldr	r2, [pc, #128]	; (94cc <LORAReg_InitKR+0x2b4>)
    944a:	7811      	ldrb	r1, [r2, #0]
    944c:	7853      	ldrb	r3, [r2, #1]
    944e:	021b      	lsls	r3, r3, #8
    9450:	430b      	orrs	r3, r1
    9452:	7891      	ldrb	r1, [r2, #2]
    9454:	0409      	lsls	r1, r1, #16
    9456:	430b      	orrs	r3, r1
    9458:	78d1      	ldrb	r1, [r2, #3]
    945a:	0609      	lsls	r1, r1, #24
    945c:	4319      	orrs	r1, r3
    945e:	2300      	movs	r3, #0
    9460:	2601      	movs	r6, #1
			RegParams.pDrParams[dataRate].bandwidth = BW_125KHZ;
    9462:	2507      	movs	r5, #7
		for(int8_t dataRate = 0; dataRate < RegParams.maxDataRate; dataRate++)
    9464:	0014      	movs	r4, r2
    9466:	2025      	movs	r0, #37	; 0x25
			RegParams.pDrParams[dataRate].modulation = MODULATION_LORA;
    9468:	00da      	lsls	r2, r3, #3
    946a:	188a      	adds	r2, r1, r2
    946c:	71d6      	strb	r6, [r2, #7]
			RegParams.pDrParams[dataRate].bandwidth = BW_125KHZ;
    946e:	7195      	strb	r5, [r2, #6]
    9470:	3301      	adds	r3, #1
    9472:	b25b      	sxtb	r3, r3
		for(int8_t dataRate = 0; dataRate < RegParams.maxDataRate; dataRate++)
    9474:	5c22      	ldrb	r2, [r4, r0]
    9476:	4293      	cmp	r3, r2
    9478:	dbf6      	blt.n	9468 <LORAReg_InitKR+0x250>
		RegParams.regParamItems.fileid = PDS_FILE_REG_KR_06_IDX;
    947a:	4b14      	ldr	r3, [pc, #80]	; (94cc <LORAReg_InitKR+0x2b4>)
    947c:	2205      	movs	r2, #5
    947e:	2005      	movs	r0, #5
    9480:	491b      	ldr	r1, [pc, #108]	; (94f0 <LORAReg_InitKR+0x2d8>)
    9482:	5458      	strb	r0, [r3, r1]
		RegParams.regParamItems.ch_param_1_item_id = PDS_REG_KR_CH_PARAM_1;
    9484:	2000      	movs	r0, #0
    9486:	491b      	ldr	r1, [pc, #108]	; (94f4 <LORAReg_InitKR+0x2dc>)
    9488:	5458      	strb	r0, [r3, r1]
    948a:	1859      	adds	r1, r3, r1
    948c:	704a      	strb	r2, [r1, #1]
		RegParams.regParamItems.ch_param_2_item_id = PDS_REG_KR_CH_PARAM_2;
    948e:	3001      	adds	r0, #1
    9490:	2184      	movs	r1, #132	; 0x84
    9492:	0089      	lsls	r1, r1, #2
    9494:	5458      	strb	r0, [r3, r1]
    9496:	1859      	adds	r1, r3, r1
    9498:	704a      	strb	r2, [r1, #1]
		RegParams.regParamItems.band_item_id = 0;
    949a:	2100      	movs	r1, #0
    949c:	4a16      	ldr	r2, [pc, #88]	; (94f8 <LORAReg_InitKR+0x2e0>)
    949e:	5499      	strb	r1, [r3, r2]
    94a0:	189a      	adds	r2, r3, r2
    94a2:	7051      	strb	r1, [r2, #1]
		RegParams.regParamItems.lastUsedSB = 0;
    94a4:	2283      	movs	r2, #131	; 0x83
    94a6:	0092      	lsls	r2, r2, #2
    94a8:	5499      	strb	r1, [r3, r2]
    94aa:	4694      	mov	ip, r2
    94ac:	4463      	add	r3, ip
    94ae:	2200      	movs	r2, #0
    94b0:	705a      	strb	r2, [r3, #1]
		filemarks.fileMarkListAddr = aRegKrFid1PdsOps;
    94b2:	ab02      	add	r3, sp, #8
		filemarks.numItems =  (uint8_t)(PDS_REG_KR_FID1_MAX_VALUE & 0x00FF);
    94b4:	3202      	adds	r2, #2
    94b6:	711a      	strb	r2, [r3, #4]
		filemarks.fIDcb = LorawanReg_KR_Pds_Cb;
    94b8:	4a10      	ldr	r2, [pc, #64]	; (94fc <LORAReg_InitKR+0x2e4>)
		PDS_RegFile(PDS_FILE_REG_KR_06_IDX,filemarks);
    94ba:	9200      	str	r2, [sp, #0]
    94bc:	4910      	ldr	r1, [pc, #64]	; (9500 <LORAReg_InitKR+0x2e8>)
    94be:	9a03      	ldr	r2, [sp, #12]
    94c0:	4b10      	ldr	r3, [pc, #64]	; (9504 <LORAReg_InitKR+0x2ec>)
    94c2:	3004      	adds	r0, #4
    94c4:	4c10      	ldr	r4, [pc, #64]	; (9508 <LORAReg_InitKR+0x2f0>)
    94c6:	47a0      	blx	r4
	StackRetStatus_t result = LORAWAN_SUCCESS;
    94c8:	2408      	movs	r4, #8
    94ca:	e73d      	b.n	9348 <LORAReg_InitKR+0x130>
    94cc:	200024d0 	.word	0x200024d0
    94d0:	200024cc 	.word	0x200024cc
    94d4:	0000d211 	.word	0x0000d211
    94d8:	0000d5d9 	.word	0x0000d5d9
    94dc:	0000d8ad 	.word	0x0000d8ad
    94e0:	00020058 	.word	0x00020058
    94e4:	00019da5 	.word	0x00019da5
    94e8:	00020034 	.word	0x00020034
    94ec:	00020060 	.word	0x00020060
    94f0:	0000020b 	.word	0x0000020b
    94f4:	0000020e 	.word	0x0000020e
    94f8:	00000212 	.word	0x00000212
    94fc:	00009215 	.word	0x00009215
    9500:	200022c4 	.word	0x200022c4
    9504:	00020090 	.word	0x00020090
    9508:	0000e3dd 	.word	0x0000e3dd

0000950c <LorawanReg_NA_Pds_Cb>:

#if (ENABLE_PDS == 1)
void LorawanReg_NA_Pds_Cb(void)
{
	
}
    950c:	4770      	bx	lr
	...

00009510 <LORAReg_InitNA>:
{
    9510:	b5f0      	push	{r4, r5, r6, r7, lr}
    9512:	46de      	mov	lr, fp
    9514:	4657      	mov	r7, sl
    9516:	464e      	mov	r6, r9
    9518:	4645      	mov	r5, r8
    951a:	b5e0      	push	{r5, r6, r7, lr}
    951c:	b089      	sub	sp, #36	; 0x24
    951e:	9003      	str	r0, [sp, #12]
    RegParams.TxCurDataRate = MAC_DEF_TX_CURRENT_DATARATE_NA;
    9520:	4c7d      	ldr	r4, [pc, #500]	; (9718 <LORAReg_InitNA+0x208>)
    9522:	2702      	movs	r7, #2
    9524:	2302      	movs	r3, #2
    9526:	469b      	mov	fp, r3
    9528:	2326      	movs	r3, #38	; 0x26
    952a:	54e7      	strb	r7, [r4, r3]
	RegParams.maxChannels = MAX_CHANNELS_T1;
    952c:	2248      	movs	r2, #72	; 0x48
    952e:	3304      	adds	r3, #4
    9530:	54e2      	strb	r2, [r4, r3]
	RegParams.MacTxPower = MAC_DEF_TX_POWER_NA;
    9532:	3a41      	subs	r2, #65	; 0x41
    9534:	3b03      	subs	r3, #3
    9536:	54e2      	strb	r2, [r4, r3]
	RegParams.maxTxPwr = DEFAULT_EIRP_NA;
    9538:	3217      	adds	r2, #23
    953a:	3301      	adds	r3, #1
    953c:	54e2      	strb	r2, [r4, r3]
	RegParams.pChParams = &RegParams.cmnParams.paramsType1.chParams[0];
    953e:	0023      	movs	r3, r4
    9540:	33b3      	adds	r3, #179	; 0xb3
    9542:	0018      	movs	r0, r3
    9544:	2500      	movs	r5, #0
    9546:	7123      	strb	r3, [r4, #4]
    9548:	0a1b      	lsrs	r3, r3, #8
    954a:	7163      	strb	r3, [r4, #5]
    954c:	0c03      	lsrs	r3, r0, #16
    954e:	71a3      	strb	r3, [r4, #6]
    9550:	0e03      	lsrs	r3, r0, #24
    9552:	71e3      	strb	r3, [r4, #7]
	RegParams.pDrParams = &RegParams.cmnParams.paramsType1.DRParams[0];
    9554:	0026      	movs	r6, r4
    9556:	3643      	adds	r6, #67	; 0x43
    9558:	7026      	strb	r6, [r4, #0]
    955a:	0a33      	lsrs	r3, r6, #8
    955c:	7063      	strb	r3, [r4, #1]
    955e:	0c33      	lsrs	r3, r6, #16
    9560:	70a3      	strb	r3, [r4, #2]
    9562:	0e33      	lsrs	r3, r6, #24
    9564:	70e3      	strb	r3, [r4, #3]
	RegParams.MinNewChIndex = 0xFF;
    9566:	2321      	movs	r3, #33	; 0x21
    9568:	32e1      	adds	r2, #225	; 0xe1
    956a:	54e2      	strb	r2, [r4, r3]
	RegParams.DefRx1DataRate = MAC_RX1_WINDOW_DATARATE_NA;
    956c:	3add      	subs	r2, #221	; 0xdd
    956e:	3b17      	subs	r3, #23
    9570:	54a3      	strb	r3, [r4, r2]
	RegParams.DefRx2DataRate = MAC_RX2_WINDOW_DATARATE_NA;
    9572:	3a1a      	subs	r2, #26
    9574:	2108      	movs	r1, #8
    9576:	468c      	mov	ip, r1
    9578:	2123      	movs	r1, #35	; 0x23
    957a:	5462      	strb	r2, [r4, r1]
	RegParams.DefRx2Freq = MAC_RX2_WINDOW_FREQ_NA;
    957c:	3983      	subs	r1, #131	; 0x83
    957e:	4688      	mov	r8, r1
    9580:	7721      	strb	r1, [r4, #28]
    9582:	2170      	movs	r1, #112	; 0x70
    9584:	7761      	strb	r1, [r4, #29]
    9586:	4661      	mov	r1, ip
    9588:	77a1      	strb	r1, [r4, #30]
    958a:	2137      	movs	r1, #55	; 0x37
    958c:	77e1      	strb	r1, [r4, #31]
	RegParams.FeaturesSupport = FEATURES_SUPPORTED_NA;
    958e:	3917      	subs	r1, #23
    9590:	2338      	movs	r3, #56	; 0x38
    9592:	5463      	strb	r3, [r4, r1]
	RegParams.minDataRate = MAC_DATARATE_MIN_NA;
    9594:	391c      	subs	r1, #28
    9596:	4689      	mov	r9, r1
    9598:	3120      	adds	r1, #32
    959a:	464b      	mov	r3, r9
    959c:	5463      	strb	r3, [r4, r1]
	RegParams.maxDataRate = MAC_DATARATE_MAX_NA;
    959e:	2325      	movs	r3, #37	; 0x25
    95a0:	54e5      	strb	r5, [r4, r3]
	RegParams.cmnParams.paramsType1.Max_125khzChan = MAX_CHANNELS_BANDWIDTH_125_AU_NA;
    95a2:	2354      	movs	r3, #84	; 0x54
    95a4:	33ff      	adds	r3, #255	; 0xff
    95a6:	311c      	adds	r1, #28
    95a8:	54e1      	strb	r1, [r4, r3]
	RegParams.cmnParams.paramsType1.Max_500khzChan = MAX_CHANNELS_BANDWIDTH_500_AU_NA;
    95aa:	3301      	adds	r3, #1
    95ac:	54e2      	strb	r2, [r4, r3]
	RegParams.cmnParams.paramsType1.minTxDR = DR0;
    95ae:	2350      	movs	r3, #80	; 0x50
    95b0:	33ff      	adds	r3, #255	; 0xff
    95b2:	54e5      	strb	r5, [r4, r3]
	RegParams.cmnParams.paramsType1.maxTxDR = DR4;
    95b4:	3301      	adds	r3, #1
    95b6:	4649      	mov	r1, r9
    95b8:	54e1      	strb	r1, [r4, r3]
	RegParams.cmnParams.paramsType1.minRxDR = DR8;
    95ba:	2352      	movs	r3, #82	; 0x52
    95bc:	33ff      	adds	r3, #255	; 0xff
    95be:	54e2      	strb	r2, [r4, r3]
	RegParams.cmnParams.paramsType1.maxRxDR = DR13;
    95c0:	3b45      	subs	r3, #69	; 0x45
    95c2:	3bff      	subs	r3, #255	; 0xff
    95c4:	324b      	adds	r2, #75	; 0x4b
    95c6:	32ff      	adds	r2, #255	; 0xff
    95c8:	54a3      	strb	r3, [r4, r2]
	RegParams.cmnParams.paramsType1.RxParamWindowOffset1 = 10;
    95ca:	2256      	movs	r2, #86	; 0x56
    95cc:	32ff      	adds	r2, #255	; 0xff
    95ce:	230a      	movs	r3, #10
    95d0:	54a3      	strb	r3, [r4, r2]
	RegParams.pJoinDutyCycleTimer = &RegParams.joinDutyCycleTimer;
    95d2:	0022      	movs	r2, r4
    95d4:	3234      	adds	r2, #52	; 0x34
    95d6:	7522      	strb	r2, [r4, #20]
    95d8:	0a13      	lsrs	r3, r2, #8
    95da:	7563      	strb	r3, [r4, #21]
    95dc:	0c13      	lsrs	r3, r2, #16
    95de:	75a3      	strb	r3, [r4, #22]
    95e0:	0e12      	lsrs	r2, r2, #24
    95e2:	75e2      	strb	r2, [r4, #23]
	RegParams.pJoinBackoffTimer = &RegParams.joinBackoffTimer;
    95e4:	0022      	movs	r2, r4
    95e6:	323d      	adds	r2, #61	; 0x3d
    95e8:	7622      	strb	r2, [r4, #24]
    95ea:	0a13      	lsrs	r3, r2, #8
    95ec:	7663      	strb	r3, [r4, #25]
    95ee:	0c13      	lsrs	r3, r2, #16
    95f0:	76a3      	strb	r3, [r4, #26]
    95f2:	0e12      	lsrs	r2, r2, #24
    95f4:	76e2      	strb	r2, [r4, #27]
	RegParams.cmnParams.paramsType1.UpStreamCh0Freq = UPSTREAM_CH0_NA;
    95f6:	2360      	movs	r3, #96	; 0x60
    95f8:	2244      	movs	r2, #68	; 0x44
    95fa:	32ff      	adds	r2, #255	; 0xff
    95fc:	54a3      	strb	r3, [r4, r2]
    95fe:	0022      	movs	r2, r4
    9600:	3244      	adds	r2, #68	; 0x44
    9602:	32ff      	adds	r2, #255	; 0xff
    9604:	2301      	movs	r3, #1
    9606:	7053      	strb	r3, [r2, #1]
    9608:	2338      	movs	r3, #56	; 0x38
    960a:	425b      	negs	r3, r3
    960c:	7093      	strb	r3, [r2, #2]
    960e:	2335      	movs	r3, #53	; 0x35
    9610:	70d3      	strb	r3, [r2, #3]
	RegParams.cmnParams.paramsType1.UpStreamCh64Freq = UPSTREAM_CH64_NA;
    9612:	2340      	movs	r3, #64	; 0x40
    9614:	425b      	negs	r3, r3
    9616:	2248      	movs	r2, #72	; 0x48
    9618:	32ff      	adds	r2, #255	; 0xff
    961a:	54a3      	strb	r3, [r4, r2]
    961c:	0022      	movs	r2, r4
    961e:	3248      	adds	r2, #72	; 0x48
    9620:	32ff      	adds	r2, #255	; 0xff
    9622:	2351      	movs	r3, #81	; 0x51
    9624:	425b      	negs	r3, r3
    9626:	7053      	strb	r3, [r2, #1]
    9628:	232e      	movs	r3, #46	; 0x2e
    962a:	425b      	negs	r3, r3
    962c:	7093      	strb	r3, [r2, #2]
    962e:	2335      	movs	r3, #53	; 0x35
    9630:	70d3      	strb	r3, [r2, #3]
	RegParams.cmnParams.paramsType1.DownStreamCh0Freq = DOWNSTREAM_CH0_NA;
    9632:	224c      	movs	r2, #76	; 0x4c
    9634:	32ff      	adds	r2, #255	; 0xff
    9636:	4643      	mov	r3, r8
    9638:	54a3      	strb	r3, [r4, r2]
    963a:	0022      	movs	r2, r4
    963c:	324c      	adds	r2, #76	; 0x4c
    963e:	32ff      	adds	r2, #255	; 0xff
    9640:	2370      	movs	r3, #112	; 0x70
    9642:	7053      	strb	r3, [r2, #1]
    9644:	4663      	mov	r3, ip
    9646:	7093      	strb	r3, [r2, #2]
    9648:	2337      	movs	r3, #55	; 0x37
    964a:	70d3      	strb	r3, [r2, #3]
	RegParams.Rx1DrOffset = 3;
    964c:	2303      	movs	r3, #3
    964e:	222c      	movs	r2, #44	; 0x2c
    9650:	54a3      	strb	r3, [r4, r2]
	RegParams.maxTxPwrIndx = 10;
    9652:	3201      	adds	r2, #1
    9654:	230a      	movs	r3, #10
    9656:	54a3      	strb	r3, [r4, r2]
	RegParams.cmnParams.paramsType1.lastUsedSB = 0;
    9658:	2358      	movs	r3, #88	; 0x58
    965a:	33ff      	adds	r3, #255	; 0xff
    965c:	54e5      	strb	r5, [r4, r3]
	RegParams.pJoinBackoffTimer->timerId = regTimerId[0];
    965e:	4b2f      	ldr	r3, [pc, #188]	; (971c <LORAReg_InitNA+0x20c>)
    9660:	781a      	ldrb	r2, [r3, #0]
    9662:	4694      	mov	ip, r2
    9664:	223d      	movs	r2, #61	; 0x3d
    9666:	4661      	mov	r1, ip
    9668:	54a1      	strb	r1, [r4, r2]
	RegParams.pJoinDutyCycleTimer->timerId = regTimerId[1];
    966a:	785a      	ldrb	r2, [r3, #1]
    966c:	233c      	movs	r3, #60	; 0x3c
    966e:	54e2      	strb	r2, [r4, r3]
	RegParams.pJoinDutyCycleTimer->remainingtime =0;
    9670:	2300      	movs	r3, #0
    9672:	2238      	movs	r2, #56	; 0x38
    9674:	54a3      	strb	r3, [r4, r2]
    9676:	2200      	movs	r2, #0
    9678:	3339      	adds	r3, #57	; 0x39
    967a:	54e2      	strb	r2, [r4, r3]
    967c:	3301      	adds	r3, #1
    967e:	54e2      	strb	r2, [r4, r3]
    9680:	3301      	adds	r3, #1
    9682:	54e2      	strb	r2, [r4, r3]
	RegParams.joinbccount =0;
    9684:	3307      	adds	r3, #7
    9686:	54e5      	strb	r5, [r4, r3]
	RegParams.joinDutyCycleTimeout =0;
    9688:	0023      	movs	r3, r4
    968a:	333e      	adds	r3, #62	; 0x3e
    968c:	701a      	strb	r2, [r3, #0]
    968e:	705a      	strb	r2, [r3, #1]
    9690:	709a      	strb	r2, [r3, #2]
    9692:	70da      	strb	r2, [r3, #3]
	RegParams.band = ismBand;
    9694:	232e      	movs	r3, #46	; 0x2e
    9696:	466a      	mov	r2, sp
    9698:	7b12      	ldrb	r2, [r2, #12]
    969a:	54e2      	strb	r2, [r4, r3]
	memcpy (RegParams.pChParams, DefaultChannels915, sizeof(DefaultChannels915) );
    969c:	2290      	movs	r2, #144	; 0x90
    969e:	4920      	ldr	r1, [pc, #128]	; (9720 <LORAReg_InitNA+0x210>)
    96a0:	4b20      	ldr	r3, [pc, #128]	; (9724 <LORAReg_InitNA+0x214>)
    96a2:	4698      	mov	r8, r3
    96a4:	4798      	blx	r3
	memcpy (RegParams.pDrParams, DefaultDrParamsNA, sizeof(DefaultDrParamsNA) );
    96a6:	2270      	movs	r2, #112	; 0x70
    96a8:	491f      	ldr	r1, [pc, #124]	; (9728 <LORAReg_InitNA+0x218>)
    96aa:	0030      	movs	r0, r6
    96ac:	47c0      	blx	r8
	RegParams.cmnParams.paramsType1.alternativeChannel = 0;
    96ae:	23ab      	movs	r3, #171	; 0xab
    96b0:	005b      	lsls	r3, r3, #1
    96b2:	54e5      	strb	r5, [r4, r3]
	RegParams.regParamItems.fileid = PDS_FILE_REG_NA_03_IDX;
    96b4:	4b1d      	ldr	r3, [pc, #116]	; (972c <LORAReg_InitNA+0x21c>)
    96b6:	54e7      	strb	r7, [r4, r3]
	RegParams.regParamItems.ch_param_1_item_id = PDS_REG_NA_CH_PARAM;
    96b8:	2200      	movs	r2, #0
    96ba:	4b1d      	ldr	r3, [pc, #116]	; (9730 <LORAReg_InitNA+0x220>)
    96bc:	54e2      	strb	r2, [r4, r3]
    96be:	18e3      	adds	r3, r4, r3
    96c0:	465a      	mov	r2, fp
    96c2:	705a      	strb	r2, [r3, #1]
	RegParams.regParamItems.ch_param_2_item_id = 0;
    96c4:	2200      	movs	r2, #0
    96c6:	2384      	movs	r3, #132	; 0x84
    96c8:	009b      	lsls	r3, r3, #2
    96ca:	54e2      	strb	r2, [r4, r3]
    96cc:	18e3      	adds	r3, r4, r3
    96ce:	705a      	strb	r2, [r3, #1]
	RegParams.regParamItems.band_item_id = 0;
    96d0:	4b18      	ldr	r3, [pc, #96]	; (9734 <LORAReg_InitNA+0x224>)
    96d2:	54e2      	strb	r2, [r4, r3]
    96d4:	18e3      	adds	r3, r4, r3
    96d6:	705a      	strb	r2, [r3, #1]
	RegParams.regParamItems.lastUsedSB = PDS_REG_NA_LAST_USED_SB;
    96d8:	2383      	movs	r3, #131	; 0x83
    96da:	009b      	lsls	r3, r3, #2
    96dc:	2201      	movs	r2, #1
    96de:	54e2      	strb	r2, [r4, r3]
    96e0:	469c      	mov	ip, r3
    96e2:	4464      	add	r4, ip
    96e4:	465b      	mov	r3, fp
    96e6:	7063      	strb	r3, [r4, #1]
	filemarks.fileMarkListAddr = aRegNaPdsOps;
    96e8:	ab04      	add	r3, sp, #16
	filemarks.numItems =  (uint8_t)(PDS_REG_NA_MAX_VALUE & 0x00FF);
    96ea:	711f      	strb	r7, [r3, #4]
	filemarks.fIDcb = LorawanReg_NA_Pds_Cb;
    96ec:	4a12      	ldr	r2, [pc, #72]	; (9738 <LORAReg_InitNA+0x228>)
	PDS_RegFile(PDS_FILE_REG_NA_03_IDX,filemarks);
    96ee:	9200      	str	r2, [sp, #0]
    96f0:	4912      	ldr	r1, [pc, #72]	; (973c <LORAReg_InitNA+0x22c>)
    96f2:	9a05      	ldr	r2, [sp, #20]
    96f4:	4b12      	ldr	r3, [pc, #72]	; (9740 <LORAReg_InitNA+0x230>)
    96f6:	2002      	movs	r0, #2
    96f8:	4c12      	ldr	r4, [pc, #72]	; (9744 <LORAReg_InitNA+0x234>)
    96fa:	47a0      	blx	r4
    LORAREG_InitGetAttrFnPtrsNA();
    96fc:	4b12      	ldr	r3, [pc, #72]	; (9748 <LORAReg_InitNA+0x238>)
    96fe:	4798      	blx	r3
	LORAREG_InitValidateAttrFnPtrsNA();
    9700:	4b12      	ldr	r3, [pc, #72]	; (974c <LORAReg_InitNA+0x23c>)
    9702:	4798      	blx	r3
	LORAREG_InitSetAttrFnPtrsNA();
    9704:	4b12      	ldr	r3, [pc, #72]	; (9750 <LORAReg_InitNA+0x240>)
    9706:	4798      	blx	r3
}
    9708:	2008      	movs	r0, #8
    970a:	b009      	add	sp, #36	; 0x24
    970c:	bc3c      	pop	{r2, r3, r4, r5}
    970e:	4690      	mov	r8, r2
    9710:	4699      	mov	r9, r3
    9712:	46a2      	mov	sl, r4
    9714:	46ab      	mov	fp, r5
    9716:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9718:	200024d0 	.word	0x200024d0
    971c:	200024cc 	.word	0x200024cc
    9720:	000200a0 	.word	0x000200a0
    9724:	00019da5 	.word	0x00019da5
    9728:	00020130 	.word	0x00020130
    972c:	0000020b 	.word	0x0000020b
    9730:	0000020e 	.word	0x0000020e
    9734:	00000212 	.word	0x00000212
    9738:	0000950d 	.word	0x0000950d
    973c:	200022c8 	.word	0x200022c8
    9740:	000201a0 	.word	0x000201a0
    9744:	0000e3dd 	.word	0x0000e3dd
    9748:	0000ca79 	.word	0x0000ca79
    974c:	0000d359 	.word	0x0000d359
    9750:	0000d641 	.word	0x0000d641

00009754 <InValidGetAttr>:
/****************************** FUNCTIONS *************************************/

StackRetStatus_t InValidGetAttr(LorawanRegionalAttributes_t attr, void * attrInput, void * attrOutput)
{
	return LORAWAN_INVALID_REQUEST;
}
    9754:	2015      	movs	r0, #21
    9756:	4770      	bx	lr

00009758 <InValidAttr>:

StackRetStatus_t InValidAttr(LorawanRegionalAttributes_t attr, void * attrInput)
{
	return LORAWAN_INVALID_REQUEST;
}
    9758:	2015      	movs	r0, #21
    975a:	4770      	bx	lr

0000975c <LORAREG_GetAttr_MaxChannel>:
#endif


static StackRetStatus_t LORAREG_GetAttr_MaxChannel(LorawanRegionalAttributes_t attr, void *attrInput, void *attrOutput)
{
	*(uint8_t *)attrOutput = RegParams.maxChannels;
    975c:	232a      	movs	r3, #42	; 0x2a
    975e:	4902      	ldr	r1, [pc, #8]	; (9768 <LORAREG_GetAttr_MaxChannel+0xc>)
    9760:	5ccb      	ldrb	r3, [r1, r3]
    9762:	7013      	strb	r3, [r2, #0]
	return LORAWAN_SUCCESS;
}
    9764:	2008      	movs	r0, #8
    9766:	4770      	bx	lr
    9768:	200024d0 	.word	0x200024d0

0000976c <LORAREG_GetAttr_MinNewChIndex>:


static StackRetStatus_t LORAREG_GetAttr_MinNewChIndex(LorawanRegionalAttributes_t attr, void *attrInput, void *attrOutput)
{
	StackRetStatus_t result = LORAWAN_SUCCESS;
	*(uint8_t *)attrOutput = (uint8_t)RegParams.MinNewChIndex;
    976c:	4905      	ldr	r1, [pc, #20]	; (9784 <LORAREG_GetAttr_MinNewChIndex+0x18>)
    976e:	2321      	movs	r3, #33	; 0x21
    9770:	5cc8      	ldrb	r0, [r1, r3]
    9772:	7010      	strb	r0, [r2, #0]
	if(RegParams.MinNewChIndex == 0xFF)
    9774:	5ccb      	ldrb	r3, [r1, r3]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    9776:	2008      	movs	r0, #8
	if(RegParams.MinNewChIndex == 0xFF)
    9778:	2bff      	cmp	r3, #255	; 0xff
    977a:	d000      	beq.n	977e <LORAREG_GetAttr_MinNewChIndex+0x12>
	{
		result = LORAWAN_INVALID_PARAMETER;
	}
	
	return result;
}
    977c:	4770      	bx	lr
		result = LORAWAN_INVALID_PARAMETER;
    977e:	3002      	adds	r0, #2
    9780:	e7fc      	b.n	977c <LORAREG_GetAttr_MinNewChIndex+0x10>
    9782:	46c0      	nop			; (mov r8, r8)
    9784:	200024d0 	.word	0x200024d0

00009788 <LORAREG_GetAttr_DefRx1DataRate>:
}
#endif

static StackRetStatus_t LORAREG_GetAttr_DefRx1DataRate(LorawanRegionalAttributes_t attr, void *attrInput, void *attrOutput)
{
	*(uint8_t *)attrOutput = RegParams.DefRx1DataRate;
    9788:	2322      	movs	r3, #34	; 0x22
    978a:	4902      	ldr	r1, [pc, #8]	; (9794 <LORAREG_GetAttr_DefRx1DataRate+0xc>)
    978c:	5ccb      	ldrb	r3, [r1, r3]
    978e:	7013      	strb	r3, [r2, #0]
	return LORAWAN_SUCCESS;
}
    9790:	2008      	movs	r0, #8
    9792:	4770      	bx	lr
    9794:	200024d0 	.word	0x200024d0

00009798 <LORAREG_GetAttr_DefRx2DataRate>:

static StackRetStatus_t LORAREG_GetAttr_DefRx2DataRate(LorawanRegionalAttributes_t attr, void *attrInput, void *attrOutput)
{
	*(uint8_t *)attrOutput = RegParams.DefRx2DataRate;
    9798:	2323      	movs	r3, #35	; 0x23
    979a:	4902      	ldr	r1, [pc, #8]	; (97a4 <LORAREG_GetAttr_DefRx2DataRate+0xc>)
    979c:	5ccb      	ldrb	r3, [r1, r3]
    979e:	7013      	strb	r3, [r2, #0]
	return LORAWAN_SUCCESS;
}
    97a0:	2008      	movs	r0, #8
    97a2:	4770      	bx	lr
    97a4:	200024d0 	.word	0x200024d0

000097a8 <LORAREG_GetAttr_RegFeatures>:
	return LORAWAN_SUCCESS;
}

static StackRetStatus_t LORAREG_GetAttr_RegFeatures(LorawanRegionalAttributes_t attr, void *attrInput, void *attrOutput)
{
	*(uint32_t *)attrOutput = RegParams.FeaturesSupport;
    97a8:	2320      	movs	r3, #32
    97aa:	4902      	ldr	r1, [pc, #8]	; (97b4 <LORAREG_GetAttr_RegFeatures+0xc>)
    97ac:	5ccb      	ldrb	r3, [r1, r3]
    97ae:	6013      	str	r3, [r2, #0]
	return LORAWAN_SUCCESS;
}
    97b0:	2008      	movs	r0, #8
    97b2:	4770      	bx	lr
    97b4:	200024d0 	.word	0x200024d0

000097b8 <LORAREG_GetAttr_DataRange>:

static StackRetStatus_t LORAREG_GetAttr_DataRange(LorawanRegionalAttributes_t attr, void *attrInput, void *attrOutput)
{
    97b8:	b530      	push	{r4, r5, lr}
    97ba:	b083      	sub	sp, #12
    97bc:	0015      	movs	r5, r2
	StackRetStatus_t result = LORAWAN_SUCCESS;
	uint8_t  channelId;
	ValChId_t valChid;
	valChid.channelIndex = *(uint8_t *)attrInput;
    97be:	780c      	ldrb	r4, [r1, #0]
    97c0:	a901      	add	r1, sp, #4
    97c2:	700c      	strb	r4, [r1, #0]
	valChid.allowedForDefaultChannels = ALL_CHANNELS;
    97c4:	2301      	movs	r3, #1
    97c6:	704b      	strb	r3, [r1, #1]
	channelId = *(uint8_t *)attrInput;
	if (pValidateAttr[CHANNEL_ID](CHANNEL_ID, &valChid) == LORAWAN_SUCCESS)
    97c8:	4b0d      	ldr	r3, [pc, #52]	; (9800 <LORAREG_GetAttr_DataRange+0x48>)
    97ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    97cc:	2015      	movs	r0, #21
    97ce:	4798      	blx	r3
    97d0:	2808      	cmp	r0, #8
    97d2:	d004      	beq.n	97de <LORAREG_GetAttr_DataRange+0x26>
	{
	    *(uint8_t *)attrOutput = RegParams.pChParams[channelId].dataRange.value;
	}
	else
	{
		*(uint8_t *)attrOutput = 0xFF;
    97d4:	23ff      	movs	r3, #255	; 0xff
    97d6:	702b      	strb	r3, [r5, #0]
	    result = LORAWAN_INVALID_PARAMETER;
    97d8:	200a      	movs	r0, #10
	}
	return result;
}
    97da:	b003      	add	sp, #12
    97dc:	bd30      	pop	{r4, r5, pc}
	    *(uint8_t *)attrOutput = RegParams.pChParams[channelId].dataRange.value;
    97de:	4909      	ldr	r1, [pc, #36]	; (9804 <LORAREG_GetAttr_DataRange+0x4c>)
    97e0:	790b      	ldrb	r3, [r1, #4]
    97e2:	794a      	ldrb	r2, [r1, #5]
    97e4:	0212      	lsls	r2, r2, #8
    97e6:	4313      	orrs	r3, r2
    97e8:	798a      	ldrb	r2, [r1, #6]
    97ea:	0412      	lsls	r2, r2, #16
    97ec:	431a      	orrs	r2, r3
    97ee:	79cb      	ldrb	r3, [r1, #7]
    97f0:	061b      	lsls	r3, r3, #24
    97f2:	431a      	orrs	r2, r3
    97f4:	0063      	lsls	r3, r4, #1
    97f6:	189b      	adds	r3, r3, r2
    97f8:	785b      	ldrb	r3, [r3, #1]
    97fa:	702b      	strb	r3, [r5, #0]
    97fc:	e7ed      	b.n	97da <LORAREG_GetAttr_DataRange+0x22>
    97fe:	46c0      	nop			; (mov r8, r8)
    9800:	20000e64 	.word	0x20000e64
    9804:	200024d0 	.word	0x200024d0

00009808 <LORAREG_GetAttr_ChIdStatus>:
}
#endif


static StackRetStatus_t LORAREG_GetAttr_ChIdStatus(LorawanRegionalAttributes_t attr, void *attrInput, void *attrOutput)
{
    9808:	b530      	push	{r4, r5, lr}
    980a:	b083      	sub	sp, #12
    980c:	0015      	movs	r5, r2
	StackRetStatus_t result = LORAWAN_SUCCESS;
	ValChId_t val_chid;
	uint8_t  channelId;
	channelId = *(uint8_t *)attrInput;
    980e:	780c      	ldrb	r4, [r1, #0]
	val_chid.channelIndex = *(uint8_t *)attrInput;
    9810:	a901      	add	r1, sp, #4
    9812:	700c      	strb	r4, [r1, #0]
	val_chid.allowedForDefaultChannels = ALL_CHANNELS;
    9814:	2301      	movs	r3, #1
    9816:	704b      	strb	r3, [r1, #1]
	
	if (pValidateAttr[CHANNEL_ID](CHANNEL_ID, &val_chid) == LORAWAN_SUCCESS)
    9818:	4b0c      	ldr	r3, [pc, #48]	; (984c <LORAREG_GetAttr_ChIdStatus+0x44>)
    981a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    981c:	2015      	movs	r0, #21
    981e:	4798      	blx	r3
    9820:	2808      	cmp	r0, #8
    9822:	d004      	beq.n	982e <LORAREG_GetAttr_ChIdStatus+0x26>
	{
		*(uint8_t *)attrOutput = RegParams.pChParams[channelId].status;
	}
	else
	{
		*(uint8_t *)attrOutput = DISABLED;
    9824:	2300      	movs	r3, #0
    9826:	702b      	strb	r3, [r5, #0]
		result = LORAWAN_INVALID_PARAMETER;
    9828:	200a      	movs	r0, #10
	}
	return result;
}
    982a:	b003      	add	sp, #12
    982c:	bd30      	pop	{r4, r5, pc}
		*(uint8_t *)attrOutput = RegParams.pChParams[channelId].status;
    982e:	4908      	ldr	r1, [pc, #32]	; (9850 <LORAREG_GetAttr_ChIdStatus+0x48>)
    9830:	790a      	ldrb	r2, [r1, #4]
    9832:	794b      	ldrb	r3, [r1, #5]
    9834:	021b      	lsls	r3, r3, #8
    9836:	4313      	orrs	r3, r2
    9838:	798a      	ldrb	r2, [r1, #6]
    983a:	0412      	lsls	r2, r2, #16
    983c:	4313      	orrs	r3, r2
    983e:	79ca      	ldrb	r2, [r1, #7]
    9840:	0612      	lsls	r2, r2, #24
    9842:	431a      	orrs	r2, r3
    9844:	0064      	lsls	r4, r4, #1
    9846:	5ca3      	ldrb	r3, [r4, r2]
    9848:	702b      	strb	r3, [r5, #0]
    984a:	e7ee      	b.n	982a <LORAREG_GetAttr_ChIdStatus+0x22>
    984c:	20000e64 	.word	0x20000e64
    9850:	200024d0 	.word	0x200024d0

00009854 <LORAREG_GetAttr_DutyCycleT1>:

#if (NA_BAND == 1 || AU_BAND == 1)
static StackRetStatus_t LORAREG_GetAttr_DutyCycleT1(LorawanRegionalAttributes_t attr, void *attrInput, void *attrOutput)
{
	*(uint16_t *)attrOutput = UINT16_MAX;
    9854:	2301      	movs	r3, #1
    9856:	425b      	negs	r3, r3
    9858:	8013      	strh	r3, [r2, #0]
	return LORAWAN_INVALID_PARAMETER;
}
    985a:	200a      	movs	r0, #10
    985c:	4770      	bx	lr

0000985e <LORAREG_GetAttr_MinDutyCycleTimer>:
#endif

#if (NA_BAND == 1 || AU_BAND == 1)
static StackRetStatus_t LORAREG_GetAttr_MinDutyCycleTimer(LorawanRegionalAttributes_t attr, void *attrInput, void *attrOutput)
{
	*(uint32_t *)attrOutput = UINT32_MAX;
    985e:	2301      	movs	r3, #1
    9860:	425b      	negs	r3, r3
    9862:	6013      	str	r3, [r2, #0]
	return LORAWAN_INVALID_PARAMETER;
}
    9864:	200a      	movs	r0, #10
    9866:	4770      	bx	lr

00009868 <LORAREG_GetAttr_MacRecvDelay1>:
#endif

static StackRetStatus_t LORAREG_GetAttr_MacRecvDelay1(LorawanRegionalAttributes_t attr, void *attrInput, void *attrOutput)
{
	*(uint16_t *)attrOutput = RECEIVE_DELAY1;
    9868:	23fa      	movs	r3, #250	; 0xfa
    986a:	009b      	lsls	r3, r3, #2
    986c:	8013      	strh	r3, [r2, #0]
	return LORAWAN_SUCCESS;
}
    986e:	2008      	movs	r0, #8
    9870:	4770      	bx	lr

00009872 <LORAREG_GetAttr_MacRecvDelay2>:

static StackRetStatus_t LORAREG_GetAttr_MacRecvDelay2(LorawanRegionalAttributes_t attr, void *attrInput, void *attrOutput)
{
	*(uint16_t *)attrOutput = RECEIVE_DELAY2;
    9872:	23fa      	movs	r3, #250	; 0xfa
    9874:	00db      	lsls	r3, r3, #3
    9876:	8013      	strh	r3, [r2, #0]
	return LORAWAN_SUCCESS;
}
    9878:	2008      	movs	r0, #8
    987a:	4770      	bx	lr

0000987c <LORAREG_GetAttr_MacJoinAcptDelay1>:

static StackRetStatus_t LORAREG_GetAttr_MacJoinAcptDelay1(LorawanRegionalAttributes_t attr, void *attrInput, void *attrOutput)
{
	*(uint16_t *)attrOutput = JOIN_ACCEPT_DELAY1;
    987c:	4b01      	ldr	r3, [pc, #4]	; (9884 <LORAREG_GetAttr_MacJoinAcptDelay1+0x8>)
    987e:	8013      	strh	r3, [r2, #0]
	return LORAWAN_SUCCESS;
}
    9880:	2008      	movs	r0, #8
    9882:	4770      	bx	lr
    9884:	00001388 	.word	0x00001388

00009888 <LORAREG_GetAttr_MacJoinAcptDelay2>:

static StackRetStatus_t LORAREG_GetAttr_MacJoinAcptDelay2(LorawanRegionalAttributes_t attr, void *attrInput, void *attrOutput)
{
	*(uint16_t *)attrOutput = JOIN_ACCEPT_DELAY2;
    9888:	4b01      	ldr	r3, [pc, #4]	; (9890 <LORAREG_GetAttr_MacJoinAcptDelay2+0x8>)
    988a:	8013      	strh	r3, [r2, #0]
	return LORAWAN_SUCCESS;
}
    988c:	2008      	movs	r0, #8
    988e:	4770      	bx	lr
    9890:	00001770 	.word	0x00001770

00009894 <LORAREG_GetAttr_MacAckTimeout>:

static StackRetStatus_t LORAREG_GetAttr_MacAckTimeout(LorawanRegionalAttributes_t attr, void *attrInput, void *attrOutput)
{
	*(uint16_t *)attrOutput = ACK_TIMEOUT;
    9894:	23fa      	movs	r3, #250	; 0xfa
    9896:	00db      	lsls	r3, r3, #3
    9898:	8013      	strh	r3, [r2, #0]
	return LORAWAN_SUCCESS;
}
    989a:	2008      	movs	r0, #8
    989c:	4770      	bx	lr

0000989e <LORAREG_GetAttr_MacAdrAckDelay>:

static StackRetStatus_t LORAREG_GetAttr_MacAdrAckDelay(LorawanRegionalAttributes_t attr, void *attrInput, void *attrOutput)
{
	*(uint8_t *)attrOutput = ADR_ACK_DELAY;
    989e:	2320      	movs	r3, #32
    98a0:	7013      	strb	r3, [r2, #0]
	return LORAWAN_SUCCESS;
}
    98a2:	2008      	movs	r0, #8
    98a4:	4770      	bx	lr

000098a6 <LORAREG_GetAttr_MacAdrAckLimit>:

static StackRetStatus_t LORAREG_GetAttr_MacAdrAckLimit(LorawanRegionalAttributes_t attr, void *attrInput, void *attrOutput)
{
	*(uint8_t *)attrOutput = ADR_ACK_LIMIT;
    98a6:	2340      	movs	r3, #64	; 0x40
    98a8:	7013      	strb	r3, [r2, #0]
	return LORAWAN_SUCCESS;
}
    98aa:	2008      	movs	r0, #8
    98ac:	4770      	bx	lr

000098ae <LORAREG_GetAttr_MacMaxFcntGap>:

static StackRetStatus_t LORAREG_GetAttr_MacMaxFcntGap(LorawanRegionalAttributes_t attr, void *attrInput, void *attrOutput)
{
	*(uint16_t *)attrOutput = MAX_FCNT_GAP;
    98ae:	2380      	movs	r3, #128	; 0x80
    98b0:	01db      	lsls	r3, r3, #7
    98b2:	8013      	strh	r3, [r2, #0]
	return LORAWAN_SUCCESS;
}
    98b4:	2008      	movs	r0, #8
    98b6:	4770      	bx	lr

000098b8 <LORAREG_GetAttr_RegDefTxPwr>:

static StackRetStatus_t LORAREG_GetAttr_RegDefTxPwr(LorawanRegionalAttributes_t attr, void *attrInput, void *attrOutput)
{
	*(uint8_t *)attrOutput = RegParams.MacTxPower;
    98b8:	2327      	movs	r3, #39	; 0x27
    98ba:	4902      	ldr	r1, [pc, #8]	; (98c4 <LORAREG_GetAttr_RegDefTxPwr+0xc>)
    98bc:	5ccb      	ldrb	r3, [r1, r3]
    98be:	7013      	strb	r3, [r2, #0]
	return LORAWAN_SUCCESS;
}
    98c0:	2008      	movs	r0, #8
    98c2:	4770      	bx	lr
    98c4:	200024d0 	.word	0x200024d0

000098c8 <LORAREG_GetAttr_RegDefTxDR>:

static StackRetStatus_t LORAREG_GetAttr_RegDefTxDR(LorawanRegionalAttributes_t attr, void *attrInput, void *attrOutput)
{
	*(uint8_t *)attrOutput = RegParams.TxCurDataRate;
    98c8:	2326      	movs	r3, #38	; 0x26
    98ca:	4902      	ldr	r1, [pc, #8]	; (98d4 <LORAREG_GetAttr_RegDefTxDR+0xc>)
    98cc:	5ccb      	ldrb	r3, [r1, r3]
    98ce:	7013      	strb	r3, [r2, #0]
	return LORAWAN_SUCCESS;
}
    98d0:	2008      	movs	r0, #8
    98d2:	4770      	bx	lr
    98d4:	200024d0 	.word	0x200024d0

000098d8 <LORAREG_GetAttr_CurChIndx>:

static StackRetStatus_t LORAREG_GetAttr_CurChIndx(LorawanRegionalAttributes_t attr, void *attrInput, void *attrOutput)
{
	*(uint8_t *)attrOutput = RegParams.lastUsedChannelIndex;
    98d8:	232f      	movs	r3, #47	; 0x2f
    98da:	4902      	ldr	r1, [pc, #8]	; (98e4 <LORAREG_GetAttr_CurChIndx+0xc>)
    98dc:	5ccb      	ldrb	r3, [r1, r3]
    98de:	7013      	strb	r3, [r2, #0]
	return LORAWAN_SUCCESS;
}
    98e0:	2008      	movs	r0, #8
    98e2:	4770      	bx	lr
    98e4:	200024d0 	.word	0x200024d0

000098e8 <LORAREG_GetAttr_DefLBTParams>:
static StackRetStatus_t LORAREG_GetAttr_DefLBTParams(LorawanRegionalAttributes_t attr, void *attrInput, void *attrOutput)
{
	LorawanLBTParams_t* lorawanLBTParams;
	lorawanLBTParams = (LorawanLBTParams_t *)attrOutput;
			
	lorawanLBTParams->lbtNumOfSamples	= RegParams.cmnParams.paramsType2.LBT_RSSISamplesCount;
    98e8:	4b09      	ldr	r3, [pc, #36]	; (9910 <LORAREG_GetAttr_DefLBTParams+0x28>)
    98ea:	21c0      	movs	r1, #192	; 0xc0
    98ec:	31ff      	adds	r1, #255	; 0xff
    98ee:	5c59      	ldrb	r1, [r3, r1]
    98f0:	7191      	strb	r1, [r2, #6]
	lorawanLBTParams->lbtScanPeriod		= RegParams.cmnParams.paramsType2.LBTScanPeriod;
    98f2:	21be      	movs	r1, #190	; 0xbe
    98f4:	31ff      	adds	r1, #255	; 0xff
    98f6:	5c59      	ldrb	r1, [r3, r1]
    98f8:	8011      	strh	r1, [r2, #0]
	lorawanLBTParams->lbtThreshold		= RegParams.cmnParams.paramsType2.LBTSignalThreshold;
    98fa:	21df      	movs	r1, #223	; 0xdf
    98fc:	0049      	lsls	r1, r1, #1
    98fe:	565b      	ldrsb	r3, [r3, r1]
    9900:	8053      	strh	r3, [r2, #2]
	lorawanLBTParams->lbtTransmitOn		= LBT_ENABLE;
    9902:	2301      	movs	r3, #1
    9904:	71d3      	strb	r3, [r2, #7]
	lorawanLBTParams->maxRetryChannels	= LBT_MAX_RETRY_CHANNELS;
    9906:	3304      	adds	r3, #4
    9908:	8093      	strh	r3, [r2, #4]
	return 0;
}
    990a:	2000      	movs	r0, #0
    990c:	4770      	bx	lr
    990e:	46c0      	nop			; (mov r8, r8)
    9910:	200024d0 	.word	0x200024d0

00009914 <LORAREG_GetAttr_FreqT1>:
{
    9914:	b530      	push	{r4, r5, lr}
	channelId = *(uint8_t *)attrInput;
    9916:	780b      	ldrb	r3, [r1, #0]
	if(channelId > RegParams.maxChannels)
    9918:	212a      	movs	r1, #42	; 0x2a
    991a:	4820      	ldr	r0, [pc, #128]	; (999c <LORAREG_GetAttr_FreqT1+0x88>)
    991c:	5641      	ldrsb	r1, [r0, r1]
		return LORAWAN_INVALID_PARAMETER;
    991e:	200a      	movs	r0, #10
	if(channelId > RegParams.maxChannels)
    9920:	428b      	cmp	r3, r1
    9922:	dc39      	bgt.n	9998 <LORAREG_GetAttr_FreqT1+0x84>
	if (channelId < RegParams.cmnParams.paramsType1.Max_125khzChan)
    9924:	2054      	movs	r0, #84	; 0x54
    9926:	30ff      	adds	r0, #255	; 0xff
    9928:	4c1c      	ldr	r4, [pc, #112]	; (999c <LORAREG_GetAttr_FreqT1+0x88>)
    992a:	5c24      	ldrb	r4, [r4, r0]
    992c:	42a3      	cmp	r3, r4
    992e:	d31c      	bcc.n	996a <LORAREG_GetAttr_FreqT1+0x56>
		result = LORAWAN_INVALID_PARAMETER;
    9930:	200a      	movs	r0, #10
	else if ( (channelId < RegParams.maxChannels) && (channelId >= RegParams.cmnParams.paramsType1.Max_125khzChan) )
    9932:	428b      	cmp	r3, r1
    9934:	da30      	bge.n	9998 <LORAREG_GetAttr_FreqT1+0x84>
static uint32_t GenerateFrequency2 (uint8_t channelIndex)
{
    uint32_t channelFrequency;

    channelFrequency = RegParams.cmnParams.paramsType1.UpStreamCh64Freq + 
	                   FREQ_1600KHZ * (channelIndex - RegParams.cmnParams.paramsType1.Max_125khzChan);
    9936:	1b1b      	subs	r3, r3, r4
    9938:	4919      	ldr	r1, [pc, #100]	; (99a0 <LORAREG_GetAttr_FreqT1+0x8c>)
    993a:	434b      	muls	r3, r1
    channelFrequency = RegParams.cmnParams.paramsType1.UpStreamCh64Freq + 
    993c:	4c17      	ldr	r4, [pc, #92]	; (999c <LORAREG_GetAttr_FreqT1+0x88>)
    993e:	2148      	movs	r1, #72	; 0x48
    9940:	31ff      	adds	r1, #255	; 0xff
    9942:	5c61      	ldrb	r1, [r4, r1]
    9944:	303f      	adds	r0, #63	; 0x3f
    9946:	30ff      	adds	r0, #255	; 0xff
    9948:	5c20      	ldrb	r0, [r4, r0]
    994a:	0200      	lsls	r0, r0, #8
    994c:	4301      	orrs	r1, r0
    994e:	204a      	movs	r0, #74	; 0x4a
    9950:	30ff      	adds	r0, #255	; 0xff
    9952:	5c20      	ldrb	r0, [r4, r0]
    9954:	0400      	lsls	r0, r0, #16
    9956:	4308      	orrs	r0, r1
    9958:	21a5      	movs	r1, #165	; 0xa5
    995a:	0049      	lsls	r1, r1, #1
    995c:	5c61      	ldrb	r1, [r4, r1]
    995e:	0609      	lsls	r1, r1, #24
    9960:	4301      	orrs	r1, r0
    9962:	1859      	adds	r1, r3, r1
		*(uint32_t *)attrOutput = GenerateFrequency2 (channelId);
    9964:	6011      	str	r1, [r2, #0]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    9966:	2008      	movs	r0, #8
		*(uint32_t *)attrOutput = GenerateFrequency2 (channelId);
    9968:	e016      	b.n	9998 <LORAREG_GetAttr_FreqT1+0x84>
    channelFrequency = RegParams.cmnParams.paramsType1.UpStreamCh0Freq + FREQ_200KHZ * channelIndex;
    996a:	4c0c      	ldr	r4, [pc, #48]	; (999c <LORAREG_GetAttr_FreqT1+0x88>)
    996c:	2144      	movs	r1, #68	; 0x44
    996e:	31ff      	adds	r1, #255	; 0xff
    9970:	5c61      	ldrb	r1, [r4, r1]
    9972:	380f      	subs	r0, #15
    9974:	5c20      	ldrb	r0, [r4, r0]
    9976:	0200      	lsls	r0, r0, #8
    9978:	4308      	orrs	r0, r1
    997a:	2146      	movs	r1, #70	; 0x46
    997c:	31ff      	adds	r1, #255	; 0xff
    997e:	5c61      	ldrb	r1, [r4, r1]
    9980:	0409      	lsls	r1, r1, #16
    9982:	4308      	orrs	r0, r1
    9984:	21a3      	movs	r1, #163	; 0xa3
    9986:	0049      	lsls	r1, r1, #1
    9988:	5c61      	ldrb	r1, [r4, r1]
    998a:	0609      	lsls	r1, r1, #24
    998c:	4301      	orrs	r1, r0
    998e:	4805      	ldr	r0, [pc, #20]	; (99a4 <LORAREG_GetAttr_FreqT1+0x90>)
    9990:	4343      	muls	r3, r0
    9992:	18cb      	adds	r3, r1, r3
		*(uint32_t *)attrOutput = GenerateFrequency1 (channelId);
    9994:	6013      	str	r3, [r2, #0]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    9996:	2008      	movs	r0, #8
}
    9998:	bd30      	pop	{r4, r5, pc}
    999a:	46c0      	nop			; (mov r8, r8)
    999c:	200024d0 	.word	0x200024d0
    99a0:	00186a00 	.word	0x00186a00
    99a4:	00030d40 	.word	0x00030d40

000099a8 <ValidateDataRateTxT1>:
{
	StackRetStatus_t result = LORAWAN_SUCCESS;
	
	uint8_t dataRate = *(uint8_t *)attrInput;

	if (dataRate > RegParams.cmnParams.paramsType1.maxTxDR)
    99a8:	780a      	ldrb	r2, [r1, #0]
    99aa:	23a8      	movs	r3, #168	; 0xa8
    99ac:	005b      	lsls	r3, r3, #1
    99ae:	4903      	ldr	r1, [pc, #12]	; (99bc <ValidateDataRateTxT1+0x14>)
    99b0:	5ccb      	ldrb	r3, [r1, r3]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    99b2:	2008      	movs	r0, #8
	if (dataRate > RegParams.cmnParams.paramsType1.maxTxDR)
    99b4:	429a      	cmp	r2, r3
    99b6:	d900      	bls.n	99ba <ValidateDataRateTxT1+0x12>
	{
		result = LORAWAN_INVALID_PARAMETER;
    99b8:	3002      	adds	r0, #2
	}
	
	return result;
}
    99ba:	4770      	bx	lr
    99bc:	200024d0 	.word	0x200024d0

000099c0 <ValidateDataRateTxT2>:
#if (AS_BAND == 1 || JPN_BAND == 1)
static StackRetStatus_t ValidateDataRateTxT2(LorawanRegionalAttributes_t attr, void *attrInput)
{
	StackRetStatus_t result = LORAWAN_SUCCESS;
	
	uint8_t dataRate = *(uint8_t *)attrInput;
    99c0:	780b      	ldrb	r3, [r1, #0]
	
	if(dataRate > RegParams.minDataRate ||
    99c2:	2224      	movs	r2, #36	; 0x24
    99c4:	4908      	ldr	r1, [pc, #32]	; (99e8 <ValidateDataRateTxT2+0x28>)
    99c6:	5c8a      	ldrb	r2, [r1, r2]
	(RegParams.cmnParams.paramsType2.txParams.uplinkDwellTime == 1 && dataRate < RegParams.DefRx1DataRate))
	{
		result = LORAWAN_INVALID_PARAMETER;
    99c8:	200a      	movs	r0, #10
	if(dataRate > RegParams.minDataRate ||
    99ca:	429a      	cmp	r2, r3
    99cc:	d30a      	bcc.n	99e4 <ValidateDataRateTxT2+0x24>
	(RegParams.cmnParams.paramsType2.txParams.uplinkDwellTime == 1 && dataRate < RegParams.DefRx1DataRate))
    99ce:	22e1      	movs	r2, #225	; 0xe1
    99d0:	0052      	lsls	r2, r2, #1
    99d2:	5c8a      	ldrb	r2, [r1, r2]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    99d4:	3802      	subs	r0, #2
	if(dataRate > RegParams.minDataRate ||
    99d6:	07d2      	lsls	r2, r2, #31
    99d8:	d504      	bpl.n	99e4 <ValidateDataRateTxT2+0x24>
	(RegParams.cmnParams.paramsType2.txParams.uplinkDwellTime == 1 && dataRate < RegParams.DefRx1DataRate))
    99da:	2222      	movs	r2, #34	; 0x22
    99dc:	5c8a      	ldrb	r2, [r1, r2]
    99de:	429a      	cmp	r2, r3
    99e0:	d900      	bls.n	99e4 <ValidateDataRateTxT2+0x24>
		result = LORAWAN_INVALID_PARAMETER;
    99e2:	3002      	adds	r0, #2
	}
	
	return result;
}
    99e4:	4770      	bx	lr
    99e6:	46c0      	nop			; (mov r8, r8)
    99e8:	200024d0 	.word	0x200024d0

000099ec <ValidateDataRateRxT1>:
#if (NA_BAND == 1 || AU_BAND == 1)
static StackRetStatus_t ValidateDataRateRxT1 (LorawanRegionalAttributes_t attr, void *attrInput)
{
	StackRetStatus_t result = LORAWAN_SUCCESS;
	
	uint8_t dataRate = *(uint8_t *)attrInput;
    99ec:	780b      	ldrb	r3, [r1, #0]

	if((dataRate > RegParams.cmnParams.paramsType1.maxRxDR) || (dataRate < RegParams.cmnParams.paramsType1.minRxDR) )
    99ee:	22a9      	movs	r2, #169	; 0xa9
    99f0:	0052      	lsls	r2, r2, #1
    99f2:	4906      	ldr	r1, [pc, #24]	; (9a0c <ValidateDataRateRxT1+0x20>)
    99f4:	5c8a      	ldrb	r2, [r1, r2]
	{
		result = LORAWAN_INVALID_PARAMETER;
    99f6:	200a      	movs	r0, #10
	if((dataRate > RegParams.cmnParams.paramsType1.maxRxDR) || (dataRate < RegParams.cmnParams.paramsType1.minRxDR) )
    99f8:	429a      	cmp	r2, r3
    99fa:	d306      	bcc.n	9a0a <ValidateDataRateRxT1+0x1e>
    99fc:	2252      	movs	r2, #82	; 0x52
    99fe:	32ff      	adds	r2, #255	; 0xff
    9a00:	5c8a      	ldrb	r2, [r1, r2]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    9a02:	3802      	subs	r0, #2
	if((dataRate > RegParams.cmnParams.paramsType1.maxRxDR) || (dataRate < RegParams.cmnParams.paramsType1.minRxDR) )
    9a04:	429a      	cmp	r2, r3
    9a06:	d900      	bls.n	9a0a <ValidateDataRateRxT1+0x1e>
		result = LORAWAN_INVALID_PARAMETER;
    9a08:	3002      	adds	r0, #2
	}
	return result;
}
    9a0a:	4770      	bx	lr
    9a0c:	200024d0 	.word	0x200024d0

00009a10 <ValidateDataRateRxT2>:
#if (AS_BAND == 1 || JPN_BAND == 1)
static StackRetStatus_t ValidateDataRateRxT2 (LorawanRegionalAttributes_t attr, void *attrInput)
{
	StackRetStatus_t result = LORAWAN_SUCCESS;
	
	uint8_t dataRate = *(uint8_t *)attrInput;
    9a10:	780b      	ldrb	r3, [r1, #0]

    if(dataRate > RegParams.minDataRate || (
    9a12:	2224      	movs	r2, #36	; 0x24
    9a14:	4908      	ldr	r1, [pc, #32]	; (9a38 <ValidateDataRateRxT2+0x28>)
    9a16:	5c8a      	ldrb	r2, [r1, r2]
	RegParams.cmnParams.paramsType2.txParams.downlinkDwellTime == 1 && dataRate < RegParams.DefRx1DataRate))
	{
		result = LORAWAN_INVALID_PARAMETER;
    9a18:	200a      	movs	r0, #10
    if(dataRate > RegParams.minDataRate || (
    9a1a:	429a      	cmp	r2, r3
    9a1c:	d30a      	bcc.n	9a34 <ValidateDataRateRxT2+0x24>
	RegParams.cmnParams.paramsType2.txParams.downlinkDwellTime == 1 && dataRate < RegParams.DefRx1DataRate))
    9a1e:	22e1      	movs	r2, #225	; 0xe1
    9a20:	0052      	lsls	r2, r2, #1
    9a22:	5c8a      	ldrb	r2, [r1, r2]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    9a24:	3802      	subs	r0, #2
    if(dataRate > RegParams.minDataRate || (
    9a26:	0792      	lsls	r2, r2, #30
    9a28:	d504      	bpl.n	9a34 <ValidateDataRateRxT2+0x24>
	RegParams.cmnParams.paramsType2.txParams.downlinkDwellTime == 1 && dataRate < RegParams.DefRx1DataRate))
    9a2a:	2222      	movs	r2, #34	; 0x22
    9a2c:	5c8a      	ldrb	r2, [r1, r2]
    9a2e:	429a      	cmp	r2, r3
    9a30:	d900      	bls.n	9a34 <ValidateDataRateRxT2+0x24>
		result = LORAWAN_INVALID_PARAMETER;
    9a32:	3002      	adds	r0, #2
	}

	return result;
}
    9a34:	4770      	bx	lr
    9a36:	46c0      	nop			; (mov r8, r8)
    9a38:	200024d0 	.word	0x200024d0

00009a3c <ValidateChannelId>:
{
    StackRetStatus_t result = LORAWAN_SUCCESS;
	
    uint8_t channelId = *(uint8_t *)attrInput;
	
    if (channelId >= RegParams.maxChannels)
    9a3c:	780a      	ldrb	r2, [r1, #0]
    9a3e:	232a      	movs	r3, #42	; 0x2a
    9a40:	4903      	ldr	r1, [pc, #12]	; (9a50 <ValidateChannelId+0x14>)
    9a42:	56cb      	ldrsb	r3, [r1, r3]
    StackRetStatus_t result = LORAWAN_SUCCESS;
    9a44:	2008      	movs	r0, #8
    if (channelId >= RegParams.maxChannels)
    9a46:	429a      	cmp	r2, r3
    9a48:	db00      	blt.n	9a4c <ValidateChannelId+0x10>
    {
        result = LORAWAN_INVALID_PARAMETER ;
    9a4a:	3002      	adds	r0, #2
    }
	
    return result;
}
    9a4c:	4770      	bx	lr
    9a4e:	46c0      	nop			; (mov r8, r8)
    9a50:	200024d0 	.word	0x200024d0

00009a54 <ValidateChannelIdT2>:
static StackRetStatus_t ValidateChannelIdT2 (LorawanRegionalAttributes_t attr, void *attrInput)
{
	StackRetStatus_t retVal = LORAWAN_SUCCESS;
	ValChId_t val_chid;
	
	memcpy(&val_chid,attrInput,sizeof(ValChId_t));
    9a54:	780b      	ldrb	r3, [r1, #0]
	if((val_chid.channelIndex >= RegParams.maxChannels) || (val_chid.allowedForDefaultChannels == WITHOUT_DEFAULT_CHANNELS &&
    9a56:	222a      	movs	r2, #42	; 0x2a
    9a58:	4808      	ldr	r0, [pc, #32]	; (9a7c <ValidateChannelIdT2+0x28>)
    9a5a:	5682      	ldrsb	r2, [r0, r2]
	 val_chid.channelIndex < RegParams.cmnParams.paramsType2.minNonDefChId))
	 {
		 retVal = LORAWAN_INVALID_PARAMETER;
    9a5c:	200a      	movs	r0, #10
	if((val_chid.channelIndex >= RegParams.maxChannels) || (val_chid.allowedForDefaultChannels == WITHOUT_DEFAULT_CHANNELS &&
    9a5e:	4293      	cmp	r3, r2
    9a60:	da0a      	bge.n	9a78 <ValidateChannelIdT2+0x24>
    9a62:	784a      	ldrb	r2, [r1, #1]
	StackRetStatus_t retVal = LORAWAN_SUCCESS;
    9a64:	3802      	subs	r0, #2
	if((val_chid.channelIndex >= RegParams.maxChannels) || (val_chid.allowedForDefaultChannels == WITHOUT_DEFAULT_CHANNELS &&
    9a66:	2a00      	cmp	r2, #0
    9a68:	d106      	bne.n	9a78 <ValidateChannelIdT2+0x24>
	 val_chid.channelIndex < RegParams.cmnParams.paramsType2.minNonDefChId))
    9a6a:	32c1      	adds	r2, #193	; 0xc1
    9a6c:	32ff      	adds	r2, #255	; 0xff
	if((val_chid.channelIndex >= RegParams.maxChannels) || (val_chid.allowedForDefaultChannels == WITHOUT_DEFAULT_CHANNELS &&
    9a6e:	4903      	ldr	r1, [pc, #12]	; (9a7c <ValidateChannelIdT2+0x28>)
    9a70:	5c8a      	ldrb	r2, [r1, r2]
    9a72:	429a      	cmp	r2, r3
    9a74:	d900      	bls.n	9a78 <ValidateChannelIdT2+0x24>
		 retVal = LORAWAN_INVALID_PARAMETER;
    9a76:	3002      	adds	r0, #2
	 }
	 return retVal;
}
    9a78:	4770      	bx	lr
    9a7a:	46c0      	nop			; (mov r8, r8)
    9a7c:	200024d0 	.word	0x200024d0

00009a80 <LORAREG_GetAttr_DutyCycleT2>:
{
    9a80:	b530      	push	{r4, r5, lr}
    9a82:	b083      	sub	sp, #12
    9a84:	0014      	movs	r4, r2
	valChid.channelIndex = *(uint8_t *)attrInput;
    9a86:	780d      	ldrb	r5, [r1, #0]
    9a88:	a901      	add	r1, sp, #4
    9a8a:	700d      	strb	r5, [r1, #0]
	valChid.allowedForDefaultChannels = ALL_CHANNELS;
    9a8c:	2301      	movs	r3, #1
    9a8e:	704b      	strb	r3, [r1, #1]
    if (ValidateChannelIdT2(CHANNEL_ID, &valChid) == LORAWAN_SUCCESS)
    9a90:	2015      	movs	r0, #21
    9a92:	4b0b      	ldr	r3, [pc, #44]	; (9ac0 <LORAREG_GetAttr_DutyCycleT2+0x40>)
    9a94:	4798      	blx	r3
    9a96:	2808      	cmp	r0, #8
    9a98:	d002      	beq.n	9aa0 <LORAREG_GetAttr_DutyCycleT2+0x20>
	    result = LORAWAN_INVALID_PARAMETER;
    9a9a:	200a      	movs	r0, #10
}
    9a9c:	b003      	add	sp, #12
    9a9e:	bd30      	pop	{r4, r5, pc}
	    *(uint16_t *)attrOutput = RegParams.cmnParams.paramsType2.subBandDutyCycle[subBandId];
    9aa0:	4a08      	ldr	r2, [pc, #32]	; (9ac4 <LORAREG_GetAttr_DutyCycleT2+0x44>)
	    subBandId = RegParams.cmnParams.paramsType2.othChParams[channelId].subBandId;
    9aa2:	006b      	lsls	r3, r5, #1
    9aa4:	195b      	adds	r3, r3, r5
    9aa6:	009b      	lsls	r3, r3, #2
    9aa8:	18d3      	adds	r3, r2, r3
    9aaa:	33ab      	adds	r3, #171	; 0xab
	    *(uint16_t *)attrOutput = RegParams.cmnParams.paramsType2.subBandDutyCycle[subBandId];
    9aac:	781b      	ldrb	r3, [r3, #0]
    9aae:	33d4      	adds	r3, #212	; 0xd4
    9ab0:	005b      	lsls	r3, r3, #1
    9ab2:	18d2      	adds	r2, r2, r3
    9ab4:	7951      	ldrb	r1, [r2, #5]
    9ab6:	7993      	ldrb	r3, [r2, #6]
    9ab8:	021b      	lsls	r3, r3, #8
    9aba:	430b      	orrs	r3, r1
    9abc:	8023      	strh	r3, [r4, #0]
    9abe:	e7ed      	b.n	9a9c <LORAREG_GetAttr_DutyCycleT2+0x1c>
    9ac0:	00009a55 	.word	0x00009a55
    9ac4:	200024d0 	.word	0x200024d0

00009ac8 <LORAREG_GetAttr_MinMaxDr>:
{
    9ac8:	b5f0      	push	{r4, r5, r6, r7, lr}
    9aca:	4694      	mov	ip, r2
{
	uint8_t i;
	
	// after updating the data range of a channel we need to check if the minimum dataRange has changed or not.
	// The user cannot set the current data rate outside the range of the data range
	uint8_t minDataRate = RegParams.minDataRate;
    9acc:	4b21      	ldr	r3, [pc, #132]	; (9b54 <LORAREG_GetAttr_MinMaxDr+0x8c>)
    9ace:	2124      	movs	r1, #36	; 0x24
    9ad0:	5c5c      	ldrb	r4, [r3, r1]
	uint8_t maxDataRate = RegParams.maxDataRate;
    9ad2:	3101      	adds	r1, #1
    9ad4:	5c5f      	ldrb	r7, [r3, r1]

	for (i = 0; i < RegParams.maxChannels; i++)
    9ad6:	3105      	adds	r1, #5
    9ad8:	565e      	ldrsb	r6, [r3, r1]
    9ada:	2e00      	cmp	r6, #0
    9adc:	dd28      	ble.n	9b30 <LORAREG_GetAttr_MinMaxDr+0x68>
	{
		if ( (RegParams.pChParams[i].dataRange.min < minDataRate) && (RegParams.pChParams[i].status == ENABLED) )
    9ade:	0019      	movs	r1, r3
    9ae0:	791d      	ldrb	r5, [r3, #4]
    9ae2:	795b      	ldrb	r3, [r3, #5]
    9ae4:	021b      	lsls	r3, r3, #8
    9ae6:	432b      	orrs	r3, r5
    9ae8:	798d      	ldrb	r5, [r1, #6]
    9aea:	042d      	lsls	r5, r5, #16
    9aec:	432b      	orrs	r3, r5
    9aee:	79cd      	ldrb	r5, [r1, #7]
    9af0:	062d      	lsls	r5, r5, #24
    9af2:	431d      	orrs	r5, r3
    9af4:	2100      	movs	r1, #0
    9af6:	e00b      	b.n	9b10 <LORAREG_GetAttr_MinMaxDr+0x48>
		{
			minDataRate = RegParams.pChParams[i].dataRange.min;
		}
		if ( (RegParams.pChParams[i].dataRange.max > maxDataRate) && (RegParams.pChParams[i].status == ENABLED) )
    9af8:	7843      	ldrb	r3, [r0, #1]
    9afa:	091b      	lsrs	r3, r3, #4
    9afc:	42bb      	cmp	r3, r7
    9afe:	dd03      	ble.n	9b08 <LORAREG_GetAttr_MinMaxDr+0x40>
    9b00:	7800      	ldrb	r0, [r0, #0]
    9b02:	2800      	cmp	r0, #0
    9b04:	d000      	beq.n	9b08 <LORAREG_GetAttr_MinMaxDr+0x40>
		{
			maxDataRate = RegParams.pChParams[i].dataRange.max;
    9b06:	001f      	movs	r7, r3
	for (i = 0; i < RegParams.maxChannels; i++)
    9b08:	3101      	adds	r1, #1
    9b0a:	b2c9      	uxtb	r1, r1
    9b0c:	42b1      	cmp	r1, r6
    9b0e:	da0f      	bge.n	9b30 <LORAREG_GetAttr_MinMaxDr+0x68>
		if ( (RegParams.pChParams[i].dataRange.min < minDataRate) && (RegParams.pChParams[i].status == ENABLED) )
    9b10:	0048      	lsls	r0, r1, #1
    9b12:	1828      	adds	r0, r5, r0
    9b14:	7843      	ldrb	r3, [r0, #1]
    9b16:	071b      	lsls	r3, r3, #28
    9b18:	0f1b      	lsrs	r3, r3, #28
    9b1a:	42a3      	cmp	r3, r4
    9b1c:	daec      	bge.n	9af8 <LORAREG_GetAttr_MinMaxDr+0x30>
    9b1e:	7802      	ldrb	r2, [r0, #0]
    9b20:	2a00      	cmp	r2, #0
    9b22:	d0f1      	beq.n	9b08 <LORAREG_GetAttr_MinMaxDr+0x40>
			minDataRate = RegParams.pChParams[i].dataRange.min;
    9b24:	001c      	movs	r4, r3
		if ( (RegParams.pChParams[i].dataRange.max > maxDataRate) && (RegParams.pChParams[i].status == ENABLED) )
    9b26:	7843      	ldrb	r3, [r0, #1]
    9b28:	091b      	lsrs	r3, r3, #4
    9b2a:	42bb      	cmp	r3, r7
    9b2c:	dceb      	bgt.n	9b06 <LORAREG_GetAttr_MinMaxDr+0x3e>
    9b2e:	e7eb      	b.n	9b08 <LORAREG_GetAttr_MinMaxDr+0x40>
		}
	}
	
	if ((RegParams.cmnParams.paramsType2.txParams.uplinkDwellTime == 1) && ((((1 << RegParams.band) & (ISM_ASBAND)) || ((1 << RegParams.band) & (1 << ISM_JPN923))) != 0))
    9b30:	23e1      	movs	r3, #225	; 0xe1
    9b32:	005b      	lsls	r3, r3, #1
    9b34:	4907      	ldr	r1, [pc, #28]	; (9b54 <LORAREG_GetAttr_MinMaxDr+0x8c>)
    9b36:	5ccb      	ldrb	r3, [r1, r3]
    9b38:	07db      	lsls	r3, r3, #31
    9b3a:	d506      	bpl.n	9b4a <LORAREG_GetAttr_MinMaxDr+0x82>
    9b3c:	232e      	movs	r3, #46	; 0x2e
    9b3e:	5cc9      	ldrb	r1, [r1, r3]
    9b40:	4b05      	ldr	r3, [pc, #20]	; (9b58 <LORAREG_GetAttr_MinMaxDr+0x90>)
    9b42:	410b      	asrs	r3, r1
    9b44:	07db      	lsls	r3, r3, #31
    9b46:	d500      	bpl.n	9b4a <LORAREG_GetAttr_MinMaxDr+0x82>
	{
		minDataRate = DR2;
    9b48:	2402      	movs	r4, #2
	memcpy(attrOutput,&minmaxDr,sizeof(MinMaxDr_t));
    9b4a:	4663      	mov	r3, ip
    9b4c:	701c      	strb	r4, [r3, #0]
    9b4e:	705f      	strb	r7, [r3, #1]
}
    9b50:	2008      	movs	r0, #8
    9b52:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9b54:	200024d0 	.word	0x200024d0
    9b58:	00007fe0 	.word	0x00007fe0

00009b5c <ValidateChannelMaskCntl>:
#if (NA_BAND == 1 || AU_BAND == 1)
static StackRetStatus_t ValidateChannelMaskCntl (LorawanRegionalAttributes_t attr, void *attrInput)
{
    StackRetStatus_t result = LORAWAN_SUCCESS;
	
	uint8_t channelMaskCntl = *(uint8_t *)attrInput;
    9b5c:	780b      	ldrb	r3, [r1, #0]

    // 5 is RFU for channel mask for US
    if ((channelMaskCntl == 5) || (channelMaskCntl > 7))
    9b5e:	2b05      	cmp	r3, #5
    9b60:	d004      	beq.n	9b6c <ValidateChannelMaskCntl+0x10>
    StackRetStatus_t result = LORAWAN_SUCCESS;
    9b62:	2008      	movs	r0, #8
    if ((channelMaskCntl == 5) || (channelMaskCntl > 7))
    9b64:	2b07      	cmp	r3, #7
    9b66:	d900      	bls.n	9b6a <ValidateChannelMaskCntl+0xe>
    {
        result = LORAWAN_INVALID_PARAMETER;
    9b68:	3002      	adds	r0, #2
    }

    return result;
}
    9b6a:	4770      	bx	lr
        result = LORAWAN_INVALID_PARAMETER;
    9b6c:	200a      	movs	r0, #10
    9b6e:	e7fc      	b.n	9b6a <ValidateChannelMaskCntl+0xe>

00009b70 <ValidateTxPower>:
{
	StackRetStatus_t result = LORAWAN_SUCCESS;
	uint8_t txPowerNew = *(uint8_t *)attrInput;
	
	//if ((txPowerNew < 5) || (txPowerNew > 10) || (txPowerNew == 6))
	if (txPowerNew > RegParams.maxTxPwrIndx)
    9b70:	780a      	ldrb	r2, [r1, #0]
    9b72:	232d      	movs	r3, #45	; 0x2d
    9b74:	4903      	ldr	r1, [pc, #12]	; (9b84 <ValidateTxPower+0x14>)
    9b76:	56cb      	ldrsb	r3, [r1, r3]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    9b78:	2008      	movs	r0, #8
	if (txPowerNew > RegParams.maxTxPwrIndx)
    9b7a:	429a      	cmp	r2, r3
    9b7c:	dd00      	ble.n	9b80 <ValidateTxPower+0x10>
	{
		result = LORAWAN_INVALID_PARAMETER;
    9b7e:	3002      	adds	r0, #2
	}

	return result;
}
    9b80:	4770      	bx	lr
    9b82:	46c0      	nop			; (mov r8, r8)
    9b84:	200024d0 	.word	0x200024d0

00009b88 <ValidateChannelMask>:
 */
#if (NA_BAND == 1 || AU_BAND == 1)
static StackRetStatus_t ValidateChannelMask (LorawanRegionalAttributes_t attr, void *attrInput)
{
	return LORAWAN_SUCCESS;	
}
    9b88:	2008      	movs	r0, #8
    9b8a:	4770      	bx	lr

00009b8c <ValidateChannelMaskT2>:
#endif

#if (EU_BAND == 1 || AS_BAND == 1 || IND_BAND == 1 || JPN_BAND == 1 || KR_BAND == 1)
static StackRetStatus_t ValidateChannelMaskT2 (LorawanRegionalAttributes_t attr, void *attrInput)
{
    9b8c:	b530      	push	{r4, r5, lr}
	StackRetStatus_t retVal = LORAWAN_SUCCESS;
	
	uint16_t channelMask = * (uint16_t *)attrInput;
    9b8e:	8809      	ldrh	r1, [r1, #0]
	
	if(channelMask != 0x0000U)
    9b90:	2900      	cmp	r1, #0
    9b92:	d020      	beq.n	9bd6 <ValidateChannelMaskT2+0x4a>
	{
		for(uint8_t i = 0; i< RegParams.maxChannels;i++)
    9b94:	232a      	movs	r3, #42	; 0x2a
    9b96:	4a11      	ldr	r2, [pc, #68]	; (9bdc <ValidateChannelMaskT2+0x50>)
    9b98:	56d0      	ldrsb	r0, [r2, r3]
    9b9a:	2800      	cmp	r0, #0
    9b9c:	dd1b      	ble.n	9bd6 <ValidateChannelMaskT2+0x4a>
		{
			if(((channelMask && BIT0) == BIT0) && ((RegParams.pOtherChParams[i].parametersDefined & (FREQUENCY_DEFINED | DATA_RANGE_DEFINED)) != (FREQUENCY_DEFINED | DATA_RANGE_DEFINED)))
    9b9e:	7a14      	ldrb	r4, [r2, #8]
    9ba0:	7a53      	ldrb	r3, [r2, #9]
    9ba2:	021b      	lsls	r3, r3, #8
    9ba4:	4323      	orrs	r3, r4
    9ba6:	7a94      	ldrb	r4, [r2, #10]
    9ba8:	0424      	lsls	r4, r4, #16
    9baa:	4323      	orrs	r3, r4
    9bac:	7ad4      	ldrb	r4, [r2, #11]
    9bae:	0624      	lsls	r4, r4, #24
    9bb0:	431c      	orrs	r4, r3
    9bb2:	2300      	movs	r3, #0
    9bb4:	2503      	movs	r5, #3
    9bb6:	e004      	b.n	9bc2 <ValidateChannelMaskT2+0x36>
				retVal = LORAWAN_INVALID_PARAMETER;
				break;
			}
			else
			{
				channelMask = channelMask >> SHIFT1;
    9bb8:	0849      	lsrs	r1, r1, #1
		for(uint8_t i = 0; i< RegParams.maxChannels;i++)
    9bba:	3301      	adds	r3, #1
    9bbc:	b2db      	uxtb	r3, r3
    9bbe:	4283      	cmp	r3, r0
    9bc0:	da09      	bge.n	9bd6 <ValidateChannelMaskT2+0x4a>
			if(((channelMask && BIT0) == BIT0) && ((RegParams.pOtherChParams[i].parametersDefined & (FREQUENCY_DEFINED | DATA_RANGE_DEFINED)) != (FREQUENCY_DEFINED | DATA_RANGE_DEFINED)))
    9bc2:	2900      	cmp	r1, #0
    9bc4:	d0f8      	beq.n	9bb8 <ValidateChannelMaskT2+0x2c>
    9bc6:	005a      	lsls	r2, r3, #1
    9bc8:	18d2      	adds	r2, r2, r3
    9bca:	0092      	lsls	r2, r2, #2
    9bcc:	18a2      	adds	r2, r4, r2
    9bce:	7ad2      	ldrb	r2, [r2, #11]
    9bd0:	402a      	ands	r2, r5
    9bd2:	2a03      	cmp	r2, #3
    9bd4:	d0f0      	beq.n	9bb8 <ValidateChannelMaskT2+0x2c>
		////ChMask can be set to 0 if ChMaskCtrl is set to 6
		return retVal = LORAWAN_SUCCESS;
	}
	
	return retVal;
}
    9bd6:	2008      	movs	r0, #8
    9bd8:	bd30      	pop	{r4, r5, pc}
    9bda:	46c0      	nop			; (mov r8, r8)
    9bdc:	200024d0 	.word	0x200024d0

00009be0 <ValidateChannelMaskCntlT2>:
#endif

#if (EU_BAND == 1 || AS_BAND == 1 || IND_BAND == 1 || JPN_BAND == 1 || KR_BAND == 1)
static StackRetStatus_t ValidateChannelMaskCntlT2 (LorawanRegionalAttributes_t attr, void *attrInput)
{
	uint8_t channelMaskCntl = * (uint16_t *)attrInput;
    9be0:	780b      	ldrb	r3, [r1, #0]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    9be2:	2008      	movs	r0, #8
	
    if ( (channelMaskCntl != 0) && (channelMaskCntl != 6) )
    9be4:	2b00      	cmp	r3, #0
    9be6:	d002      	beq.n	9bee <ValidateChannelMaskCntlT2+0xe>
    9be8:	2b06      	cmp	r3, #6
    9bea:	d001      	beq.n	9bf0 <ValidateChannelMaskCntlT2+0x10>
    {
	    result = LORAWAN_INVALID_PARAMETER;
    9bec:	3002      	adds	r0, #2
    }
	return result;
}
    9bee:	4770      	bx	lr
	StackRetStatus_t result = LORAWAN_SUCCESS;
    9bf0:	2008      	movs	r0, #8
    9bf2:	e7fc      	b.n	9bee <ValidateChannelMaskCntlT2+0xe>

00009bf4 <ValidateChMaskChCntlT2>:
{
    9bf4:	b510      	push	{r4, lr}
    9bf6:	b082      	sub	sp, #8
	ValChMaskCntl_t chMaskchCntl = * (ValChMaskCntl_t *)attrInput;
    9bf8:	ac01      	add	r4, sp, #4
    9bfa:	2204      	movs	r2, #4
    9bfc:	0020      	movs	r0, r4
    9bfe:	4b0f      	ldr	r3, [pc, #60]	; (9c3c <ValidateChMaskChCntlT2+0x48>)
    9c00:	4798      	blx	r3
    if ( chMaskchCntl.chnlMask || chMaskchCntl.chnlMaskCntl )
    9c02:	8863      	ldrh	r3, [r4, #2]
    9c04:	2b00      	cmp	r3, #0
    9c06:	d104      	bne.n	9c12 <ValidateChMaskChCntlT2+0x1e>
    9c08:	ab01      	add	r3, sp, #4
    9c0a:	781a      	ldrb	r2, [r3, #0]
		return LORAWAN_INVALID_PARAMETER;
    9c0c:	230a      	movs	r3, #10
    if ( chMaskchCntl.chnlMask || chMaskchCntl.chnlMaskCntl )
    9c0e:	2a00      	cmp	r2, #0
    9c10:	d007      	beq.n	9c22 <ValidateChMaskChCntlT2+0x2e>
		if(((ValidateChannelMaskT2(CHANNEL_MASK, (void *)&chMaskchCntl.chnlMask)) == LORAWAN_SUCCESS) && (ValidateChannelMaskCntlT2(CHANNEL_MASK_CNTL, (void *)&chMaskchCntl.chnlMaskCntl)) == LORAWAN_SUCCESS)
    9c12:	466b      	mov	r3, sp
    9c14:	1d99      	adds	r1, r3, #6
    9c16:	201a      	movs	r0, #26
    9c18:	4b09      	ldr	r3, [pc, #36]	; (9c40 <ValidateChMaskChCntlT2+0x4c>)
    9c1a:	4798      	blx	r3
			return LORAWAN_INVALID_PARAMETER;
    9c1c:	230a      	movs	r3, #10
		if(((ValidateChannelMaskT2(CHANNEL_MASK, (void *)&chMaskchCntl.chnlMask)) == LORAWAN_SUCCESS) && (ValidateChannelMaskCntlT2(CHANNEL_MASK_CNTL, (void *)&chMaskchCntl.chnlMaskCntl)) == LORAWAN_SUCCESS)
    9c1e:	2808      	cmp	r0, #8
    9c20:	d002      	beq.n	9c28 <ValidateChMaskChCntlT2+0x34>
}
    9c22:	0018      	movs	r0, r3
    9c24:	b002      	add	sp, #8
    9c26:	bd10      	pop	{r4, pc}
		if(((ValidateChannelMaskT2(CHANNEL_MASK, (void *)&chMaskchCntl.chnlMask)) == LORAWAN_SUCCESS) && (ValidateChannelMaskCntlT2(CHANNEL_MASK_CNTL, (void *)&chMaskchCntl.chnlMaskCntl)) == LORAWAN_SUCCESS)
    9c28:	a901      	add	r1, sp, #4
    9c2a:	3013      	adds	r0, #19
    9c2c:	4b05      	ldr	r3, [pc, #20]	; (9c44 <ValidateChMaskChCntlT2+0x50>)
    9c2e:	4798      	blx	r3
    9c30:	0003      	movs	r3, r0
    9c32:	2808      	cmp	r0, #8
    9c34:	d0f5      	beq.n	9c22 <ValidateChMaskChCntlT2+0x2e>
			return LORAWAN_INVALID_PARAMETER;
    9c36:	230a      	movs	r3, #10
    9c38:	e7f3      	b.n	9c22 <ValidateChMaskChCntlT2+0x2e>
    9c3a:	46c0      	nop			; (mov r8, r8)
    9c3c:	00019da5 	.word	0x00019da5
    9c40:	00009b8d 	.word	0x00009b8d
    9c44:	00009be1 	.word	0x00009be1

00009c48 <ValidateDataRate>:
{
    StackRetStatus_t result = LORAWAN_SUCCESS;
	
	uint8_t dataRate = *(uint8_t *)attrInput;

    if ( dataRate > RegParams.minDataRate )
    9c48:	780a      	ldrb	r2, [r1, #0]
    9c4a:	2324      	movs	r3, #36	; 0x24
    9c4c:	4903      	ldr	r1, [pc, #12]	; (9c5c <ValidateDataRate+0x14>)
    9c4e:	5ccb      	ldrb	r3, [r1, r3]
    StackRetStatus_t result = LORAWAN_SUCCESS;
    9c50:	2008      	movs	r0, #8
    if ( dataRate > RegParams.minDataRate )
    9c52:	429a      	cmp	r2, r3
    9c54:	d900      	bls.n	9c58 <ValidateDataRate+0x10>
    {
        result = LORAWAN_INVALID_PARAMETER;
    9c56:	3002      	adds	r0, #2
    }

    return result;
}
    9c58:	4770      	bx	lr
    9c5a:	46c0      	nop			; (mov r8, r8)
    9c5c:	200024d0 	.word	0x200024d0

00009c60 <ValidateSupportedDr>:
#endif

static StackRetStatus_t ValidateSupportedDr (LorawanRegionalAttributes_t attr, void *attrInput)
{
    9c60:	b570      	push	{r4, r5, r6, lr}
	StackRetStatus_t result = LORAWAN_INVALID_PARAMETER;
	uint8_t  dataRate;
	dataRate = *(uint8_t *)attrInput;
    9c62:	780d      	ldrb	r5, [r1, #0]
	
	for(uint8_t i = 0; i <RegParams.maxChannels; i++)
    9c64:	232a      	movs	r3, #42	; 0x2a
    9c66:	4a14      	ldr	r2, [pc, #80]	; (9cb8 <ValidateSupportedDr+0x58>)
    9c68:	56d4      	ldrsb	r4, [r2, r3]
    9c6a:	2c00      	cmp	r4, #0
    9c6c:	dd22      	ble.n	9cb4 <ValidateSupportedDr+0x54>
	{
		if(RegParams.pChParams[i].status == ENABLED && dataRate >= RegParams.pChParams[i].dataRange.min &&
    9c6e:	7910      	ldrb	r0, [r2, #4]
    9c70:	7953      	ldrb	r3, [r2, #5]
    9c72:	021b      	lsls	r3, r3, #8
    9c74:	4303      	orrs	r3, r0
    9c76:	7990      	ldrb	r0, [r2, #6]
    9c78:	0400      	lsls	r0, r0, #16
    9c7a:	4303      	orrs	r3, r0
    9c7c:	79d0      	ldrb	r0, [r2, #7]
    9c7e:	0600      	lsls	r0, r0, #24
    9c80:	4318      	orrs	r0, r3
    9c82:	2300      	movs	r3, #0
    9c84:	002e      	movs	r6, r5
    9c86:	e003      	b.n	9c90 <ValidateSupportedDr+0x30>
	for(uint8_t i = 0; i <RegParams.maxChannels; i++)
    9c88:	3301      	adds	r3, #1
    9c8a:	b2db      	uxtb	r3, r3
    9c8c:	42a3      	cmp	r3, r4
    9c8e:	da0f      	bge.n	9cb0 <ValidateSupportedDr+0x50>
		if(RegParams.pChParams[i].status == ENABLED && dataRate >= RegParams.pChParams[i].dataRange.min &&
    9c90:	005a      	lsls	r2, r3, #1
    9c92:	1882      	adds	r2, r0, r2
    9c94:	7811      	ldrb	r1, [r2, #0]
    9c96:	2900      	cmp	r1, #0
    9c98:	d0f6      	beq.n	9c88 <ValidateSupportedDr+0x28>
    9c9a:	7851      	ldrb	r1, [r2, #1]
    9c9c:	0709      	lsls	r1, r1, #28
    9c9e:	0f09      	lsrs	r1, r1, #28
    9ca0:	428d      	cmp	r5, r1
    9ca2:	dbf1      	blt.n	9c88 <ValidateSupportedDr+0x28>
		   dataRate <= RegParams.pChParams[i].dataRange.max)
    9ca4:	7852      	ldrb	r2, [r2, #1]
    9ca6:	0912      	lsrs	r2, r2, #4
		if(RegParams.pChParams[i].status == ENABLED && dataRate >= RegParams.pChParams[i].dataRange.min &&
    9ca8:	4296      	cmp	r6, r2
    9caa:	dced      	bgt.n	9c88 <ValidateSupportedDr+0x28>
		{
			result = LORAWAN_SUCCESS;
    9cac:	2008      	movs	r0, #8
    9cae:	e000      	b.n	9cb2 <ValidateSupportedDr+0x52>
	StackRetStatus_t result = LORAWAN_INVALID_PARAMETER;
    9cb0:	200a      	movs	r0, #10
			break;
		}
	}
	return result;	
}
    9cb2:	bd70      	pop	{r4, r5, r6, pc}
	StackRetStatus_t result = LORAWAN_INVALID_PARAMETER;
    9cb4:	200a      	movs	r0, #10
    9cb6:	e7fc      	b.n	9cb2 <ValidateSupportedDr+0x52>
    9cb8:	200024d0 	.word	0x200024d0

00009cbc <ValidateRxFreqT1>:

#if (NA_BAND == 1 || AU_BAND == 1)
static StackRetStatus_t ValidateRxFreqT1 (LorawanRegionalAttributes_t attr, void *attrInput)
{
    9cbc:	b510      	push	{r4, lr}
	StackRetStatus_t result = LORAWAN_SUCCESS;
	uint32_t FreqNew = *(uint32_t *)attrInput;
	
	if(FreqNew < FREQ_923300KHZ || FreqNew > FREQ_927500KHZ || (FreqNew - FREQ_923300KHZ) % FREQ_600KHZ != 0)
    9cbe:	6808      	ldr	r0, [r1, #0]
    9cc0:	4b07      	ldr	r3, [pc, #28]	; (9ce0 <ValidateRxFreqT1+0x24>)
    9cc2:	469c      	mov	ip, r3
    9cc4:	4460      	add	r0, ip
    9cc6:	4a07      	ldr	r2, [pc, #28]	; (9ce4 <ValidateRxFreqT1+0x28>)
	{
		result = LORAWAN_INVALID_PARAMETER;
    9cc8:	230a      	movs	r3, #10
	if(FreqNew < FREQ_923300KHZ || FreqNew > FREQ_927500KHZ || (FreqNew - FREQ_923300KHZ) % FREQ_600KHZ != 0)
    9cca:	4290      	cmp	r0, r2
    9ccc:	d806      	bhi.n	9cdc <ValidateRxFreqT1+0x20>
    9cce:	4906      	ldr	r1, [pc, #24]	; (9ce8 <ValidateRxFreqT1+0x2c>)
    9cd0:	4b06      	ldr	r3, [pc, #24]	; (9cec <ValidateRxFreqT1+0x30>)
    9cd2:	4798      	blx	r3
	StackRetStatus_t result = LORAWAN_SUCCESS;
    9cd4:	2308      	movs	r3, #8
	if(FreqNew < FREQ_923300KHZ || FreqNew > FREQ_927500KHZ || (FreqNew - FREQ_923300KHZ) % FREQ_600KHZ != 0)
    9cd6:	2900      	cmp	r1, #0
    9cd8:	d000      	beq.n	9cdc <ValidateRxFreqT1+0x20>
		result = LORAWAN_INVALID_PARAMETER;
    9cda:	3302      	adds	r3, #2
	}
	return result;
}
    9cdc:	0018      	movs	r0, r3
    9cde:	bd10      	pop	{r4, pc}
    9ce0:	c8f78f60 	.word	0xc8f78f60
    9ce4:	00401640 	.word	0x00401640
    9ce8:	000927c0 	.word	0x000927c0
    9cec:	0001674d 	.word	0x0001674d

00009cf0 <ValidateRx1DataRateOffset>:
{
	StackRetStatus_t retVal = LORAWAN_INVALID_PARAMETER;
	
	uint8_t rx1DrOffset = *(uint8_t *)attrInput;
	
	if(rx1DrOffset <= RegParams.Rx1DrOffset)
    9cf0:	780a      	ldrb	r2, [r1, #0]
    9cf2:	232c      	movs	r3, #44	; 0x2c
    9cf4:	4903      	ldr	r1, [pc, #12]	; (9d04 <ValidateRx1DataRateOffset+0x14>)
    9cf6:	56cb      	ldrsb	r3, [r1, r3]
	StackRetStatus_t retVal = LORAWAN_INVALID_PARAMETER;
    9cf8:	200a      	movs	r0, #10
	if(rx1DrOffset <= RegParams.Rx1DrOffset)
    9cfa:	429a      	cmp	r2, r3
    9cfc:	dc00      	bgt.n	9d00 <ValidateRx1DataRateOffset+0x10>
	{
		retVal = LORAWAN_SUCCESS;
    9cfe:	3802      	subs	r0, #2
	}
	
	return retVal;
}
    9d00:	4770      	bx	lr
    9d02:	46c0      	nop			; (mov r8, r8)
    9d04:	200024d0 	.word	0x200024d0

00009d08 <getSubBandId>:
}
#endif

#if (EU_BAND == 1 || AS_BAND == 1 || IND_BAND == 1 || JPN_BAND == 1 || KR_BAND == 1)
static uint8_t getSubBandId(uint32_t frequency)
{
    9d08:	b530      	push	{r4, r5, lr}
    9d0a:	0004      	movs	r4, r0
	uint8_t subBandId = 0xFF;
#if (EU_BAND == 1)	|| (JPN_BAND == 1)
	for(uint8_t i = 0; i < RegParams.maxSubBands; i++)
    9d0c:	2329      	movs	r3, #41	; 0x29
    9d0e:	4a19      	ldr	r2, [pc, #100]	; (9d74 <getSubBandId+0x6c>)
    9d10:	5cd5      	ldrb	r5, [r2, r3]
    9d12:	2d00      	cmp	r5, #0
    9d14:	d02c      	beq.n	9d70 <getSubBandId+0x68>
	{
		if(frequency >= RegParams.pSubBandParams[i].freqMin && frequency <= RegParams.pSubBandParams[i].freqMax)
    9d16:	0011      	movs	r1, r2
    9d18:	7b13      	ldrb	r3, [r2, #12]
    9d1a:	7b52      	ldrb	r2, [r2, #13]
    9d1c:	0212      	lsls	r2, r2, #8
    9d1e:	431a      	orrs	r2, r3
    9d20:	7b8b      	ldrb	r3, [r1, #14]
    9d22:	041b      	lsls	r3, r3, #16
    9d24:	431a      	orrs	r2, r3
    9d26:	7bcb      	ldrb	r3, [r1, #15]
    9d28:	061b      	lsls	r3, r3, #24
    9d2a:	4313      	orrs	r3, r2
    9d2c:	2000      	movs	r0, #0
    9d2e:	e004      	b.n	9d3a <getSubBandId+0x32>
	for(uint8_t i = 0; i < RegParams.maxSubBands; i++)
    9d30:	3001      	adds	r0, #1
    9d32:	b2c0      	uxtb	r0, r0
    9d34:	330c      	adds	r3, #12
    9d36:	42a8      	cmp	r0, r5
    9d38:	d018      	beq.n	9d6c <getSubBandId+0x64>
		if(frequency >= RegParams.pSubBandParams[i].freqMin && frequency <= RegParams.pSubBandParams[i].freqMax)
    9d3a:	781a      	ldrb	r2, [r3, #0]
    9d3c:	7859      	ldrb	r1, [r3, #1]
    9d3e:	0209      	lsls	r1, r1, #8
    9d40:	4311      	orrs	r1, r2
    9d42:	789a      	ldrb	r2, [r3, #2]
    9d44:	0412      	lsls	r2, r2, #16
    9d46:	4311      	orrs	r1, r2
    9d48:	78da      	ldrb	r2, [r3, #3]
    9d4a:	0612      	lsls	r2, r2, #24
    9d4c:	430a      	orrs	r2, r1
    9d4e:	42a2      	cmp	r2, r4
    9d50:	d8ee      	bhi.n	9d30 <getSubBandId+0x28>
    9d52:	791a      	ldrb	r2, [r3, #4]
    9d54:	7959      	ldrb	r1, [r3, #5]
    9d56:	0209      	lsls	r1, r1, #8
    9d58:	4311      	orrs	r1, r2
    9d5a:	799a      	ldrb	r2, [r3, #6]
    9d5c:	0412      	lsls	r2, r2, #16
    9d5e:	4311      	orrs	r1, r2
    9d60:	79da      	ldrb	r2, [r3, #7]
    9d62:	0612      	lsls	r2, r2, #24
    9d64:	430a      	orrs	r2, r1
    9d66:	4294      	cmp	r4, r2
    9d68:	d8e2      	bhi.n	9d30 <getSubBandId+0x28>
    9d6a:	e000      	b.n	9d6e <getSubBandId+0x66>
	uint8_t subBandId = 0xFF;
    9d6c:	20ff      	movs	r0, #255	; 0xff
#elif (AS_BAND == 1)
	// whole ASIA 923 spectrum is one band
	subBandId = 0;
#endif
	return subBandId;
}
    9d6e:	bd30      	pop	{r4, r5, pc}
	uint8_t subBandId = 0xFF;
    9d70:	20ff      	movs	r0, #255	; 0xff
    9d72:	e7fc      	b.n	9d6e <getSubBandId+0x66>
    9d74:	200024d0 	.word	0x200024d0

00009d78 <ValidateFreq>:
{
    9d78:	b510      	push	{r4, lr}
    if(getSubBandId(frequencyNew) == 0xFF)
    9d7a:	6808      	ldr	r0, [r1, #0]
    9d7c:	4b04      	ldr	r3, [pc, #16]	; (9d90 <ValidateFreq+0x18>)
    9d7e:	4798      	blx	r3
	StackRetStatus_t retVal = LORAWAN_SUCCESS;
    9d80:	2308      	movs	r3, #8
    if(getSubBandId(frequencyNew) == 0xFF)
    9d82:	28ff      	cmp	r0, #255	; 0xff
    9d84:	d001      	beq.n	9d8a <ValidateFreq+0x12>
}
    9d86:	0018      	movs	r0, r3
    9d88:	bd10      	pop	{r4, pc}
		retVal = LORAWAN_INVALID_PARAMETER;
    9d8a:	3302      	adds	r3, #2
    9d8c:	e7fb      	b.n	9d86 <ValidateFreq+0xe>
    9d8e:	46c0      	nop			; (mov r8, r8)
    9d90:	00009d09 	.word	0x00009d09

00009d94 <ValidateFrequencyAS>:
 */
#if (AS_BAND == 1)
static StackRetStatus_t ValidateFrequencyAS (LorawanRegionalAttributes_t attr, void *attrInput)
{
	StackRetStatus_t result = LORAWAN_SUCCESS;
	uint32_t frequencyNew = * (uint32_t *)attrInput;
    9d94:	680b      	ldr	r3, [r1, #0]

    /*Bands Supporting Freq 923-925MHz*/
    if(RegParams.band == ISM_BRN923 || RegParams.band == ISM_CMB923 || RegParams.band == ISM_INS923 || RegParams.band == ISM_LAOS923)
    9d96:	222e      	movs	r2, #46	; 0x2e
    9d98:	4919      	ldr	r1, [pc, #100]	; (9e00 <ValidateFrequencyAS+0x6c>)
    9d9a:	5c8a      	ldrb	r2, [r1, r2]
    9d9c:	1f91      	subs	r1, r2, #6
    9d9e:	2903      	cmp	r1, #3
    9da0:	d808      	bhi.n	9db4 <ValidateFrequencyAS+0x20>
	{
		if ( (frequencyNew < FREQ_923000KHZ) || (frequencyNew > FREQ_925000KHZ) )
    9da2:	4a18      	ldr	r2, [pc, #96]	; (9e04 <ValidateFrequencyAS+0x70>)
    9da4:	4694      	mov	ip, r2
    9da6:	4463      	add	r3, ip
    9da8:	4a17      	ldr	r2, [pc, #92]	; (9e08 <ValidateFrequencyAS+0x74>)
	StackRetStatus_t result = LORAWAN_SUCCESS;
    9daa:	2008      	movs	r0, #8
		if ( (frequencyNew < FREQ_923000KHZ) || (frequencyNew > FREQ_925000KHZ) )
    9dac:	4293      	cmp	r3, r2
    9dae:	d900      	bls.n	9db2 <ValidateFrequencyAS+0x1e>
		{
			result = LORAWAN_INVALID_PARAMETER;
    9db0:	3002      	adds	r0, #2
	else
	{
		result = LORAWAN_INVALID_PARAMETER;
	}
	return result;
}
    9db2:	4770      	bx	lr
	else if(RegParams.band == ISM_NZ923)
    9db4:	2a0a      	cmp	r2, #10
    9db6:	d011      	beq.n	9ddc <ValidateFrequencyAS+0x48>
	else if(RegParams.band == ISM_SP923 || RegParams.band == ISM_THAI923 || RegParams.band == ISM_VTM923)
    9db8:	2a0b      	cmp	r2, #11
    9dba:	d018      	beq.n	9dee <ValidateFrequencyAS+0x5a>
    9dbc:	0011      	movs	r1, r2
    9dbe:	390d      	subs	r1, #13
    9dc0:	2901      	cmp	r1, #1
    9dc2:	d914      	bls.n	9dee <ValidateFrequencyAS+0x5a>
		result = LORAWAN_INVALID_PARAMETER;
    9dc4:	200a      	movs	r0, #10
	else if(RegParams.band == ISM_TWN923)
    9dc6:	2a0c      	cmp	r2, #12
    9dc8:	d1f3      	bne.n	9db2 <ValidateFrequencyAS+0x1e>
		if ( (frequencyNew < FREQ_922000KHZ) || (frequencyNew > FREQ_928000KHZ) )
    9dca:	4a10      	ldr	r2, [pc, #64]	; (9e0c <ValidateFrequencyAS+0x78>)
    9dcc:	4694      	mov	ip, r2
    9dce:	4463      	add	r3, ip
    9dd0:	4a0f      	ldr	r2, [pc, #60]	; (9e10 <ValidateFrequencyAS+0x7c>)
	StackRetStatus_t result = LORAWAN_SUCCESS;
    9dd2:	3802      	subs	r0, #2
		if ( (frequencyNew < FREQ_922000KHZ) || (frequencyNew > FREQ_928000KHZ) )
    9dd4:	4293      	cmp	r3, r2
    9dd6:	d9ec      	bls.n	9db2 <ValidateFrequencyAS+0x1e>
			result = LORAWAN_INVALID_PARAMETER;
    9dd8:	3002      	adds	r0, #2
    9dda:	e7ea      	b.n	9db2 <ValidateFrequencyAS+0x1e>
		if ( (frequencyNew < FREQ_915000KHZ) || (frequencyNew > FREQ_928000KHZ) )
    9ddc:	4a0d      	ldr	r2, [pc, #52]	; (9e14 <ValidateFrequencyAS+0x80>)
    9dde:	4694      	mov	ip, r2
    9de0:	4463      	add	r3, ip
    9de2:	4a0d      	ldr	r2, [pc, #52]	; (9e18 <ValidateFrequencyAS+0x84>)
	StackRetStatus_t result = LORAWAN_SUCCESS;
    9de4:	2008      	movs	r0, #8
		if ( (frequencyNew < FREQ_915000KHZ) || (frequencyNew > FREQ_928000KHZ) )
    9de6:	4293      	cmp	r3, r2
    9de8:	d9e3      	bls.n	9db2 <ValidateFrequencyAS+0x1e>
			result = LORAWAN_INVALID_PARAMETER;
    9dea:	3002      	adds	r0, #2
    9dec:	e7e1      	b.n	9db2 <ValidateFrequencyAS+0x1e>
		if ( (frequencyNew < FREQ_920000KHZ) || (frequencyNew > FREQ_925000KHZ) )
    9dee:	4a0b      	ldr	r2, [pc, #44]	; (9e1c <ValidateFrequencyAS+0x88>)
    9df0:	4694      	mov	ip, r2
    9df2:	4463      	add	r3, ip
    9df4:	4a0a      	ldr	r2, [pc, #40]	; (9e20 <ValidateFrequencyAS+0x8c>)
	StackRetStatus_t result = LORAWAN_SUCCESS;
    9df6:	2008      	movs	r0, #8
		if ( (frequencyNew < FREQ_920000KHZ) || (frequencyNew > FREQ_925000KHZ) )
    9df8:	4293      	cmp	r3, r2
    9dfa:	d9da      	bls.n	9db2 <ValidateFrequencyAS+0x1e>
			result = LORAWAN_INVALID_PARAMETER;
    9dfc:	3002      	adds	r0, #2
    9dfe:	e7d8      	b.n	9db2 <ValidateFrequencyAS+0x1e>
    9e00:	200024d0 	.word	0x200024d0
    9e04:	c8fc2340 	.word	0xc8fc2340
    9e08:	001e8480 	.word	0x001e8480
    9e0c:	c90b6580 	.word	0xc90b6580
    9e10:	005b8d80 	.word	0x005b8d80
    9e14:	c9763540 	.word	0xc9763540
    9e18:	00c65d40 	.word	0x00c65d40
    9e1c:	c929ea00 	.word	0xc929ea00
    9e20:	004c4b40 	.word	0x004c4b40

00009e24 <setTxParams>:
}
#endif

#if ( AS_BAND == 1 || IND_BAND == 1 || JPN_BAND == 1 || KR_BAND == 1)
static StackRetStatus_t setTxParams(LorawanRegionalAttributes_t attr, void *attrInput)
{
    9e24:	b5f0      	push	{r4, r5, r6, r7, lr}
	TxParams_t updateTxParams;

	memcpy(&updateTxParams,attrInput,sizeof(TxParams_t));
    9e26:	780c      	ldrb	r4, [r1, #0]
    9e28:	784a      	ldrb	r2, [r1, #1]
    9e2a:	0791      	lsls	r1, r2, #30
    9e2c:	0fc9      	lsrs	r1, r1, #31
	
	RegParams.cmnParams.paramsType2.txParams.uplinkDwellTime = updateTxParams.uplinkDwellTime;
    9e2e:	4e11      	ldr	r6, [pc, #68]	; (9e74 <setTxParams+0x50>)
    9e30:	25e1      	movs	r5, #225	; 0xe1
    9e32:	006d      	lsls	r5, r5, #1
    9e34:	2001      	movs	r0, #1
    9e36:	4002      	ands	r2, r0
    9e38:	5d73      	ldrb	r3, [r6, r5]
    9e3a:	2701      	movs	r7, #1
    9e3c:	43bb      	bics	r3, r7
    9e3e:	4313      	orrs	r3, r2
    9e40:	5573      	strb	r3, [r6, r5]
	if (RegParams.cmnParams.paramsType2.txParams.uplinkDwellTime == 1)
    9e42:	4218      	tst	r0, r3
    9e44:	d111      	bne.n	9e6a <setTxParams+0x46>
	{
		RegParams.maxDataRate = DR2;
	}
	else
	{
		RegParams.maxDataRate = DR0;
    9e46:	2000      	movs	r0, #0
    9e48:	2325      	movs	r3, #37	; 0x25
    9e4a:	4a0a      	ldr	r2, [pc, #40]	; (9e74 <setTxParams+0x50>)
    9e4c:	54d0      	strb	r0, [r2, r3]
	}
	RegParams.cmnParams.paramsType2.txParams.downlinkDwellTime = updateTxParams.downlinkDwellTime;
    9e4e:	4a09      	ldr	r2, [pc, #36]	; (9e74 <setTxParams+0x50>)
    9e50:	20e1      	movs	r0, #225	; 0xe1
    9e52:	0040      	lsls	r0, r0, #1
    9e54:	0049      	lsls	r1, r1, #1
    9e56:	5c13      	ldrb	r3, [r2, r0]
    9e58:	2502      	movs	r5, #2
    9e5a:	43ab      	bics	r3, r5
    9e5c:	430b      	orrs	r3, r1
    9e5e:	5413      	strb	r3, [r2, r0]
	RegParams.maxTxPwr = updateTxParams.maxEIRP;
    9e60:	2328      	movs	r3, #40	; 0x28
    9e62:	54d4      	strb	r4, [r2, r3]
	
	return LORAWAN_SUCCESS;
}
    9e64:	38bb      	subs	r0, #187	; 0xbb
    9e66:	38ff      	subs	r0, #255	; 0xff
    9e68:	bdf0      	pop	{r4, r5, r6, r7, pc}
		RegParams.maxDataRate = DR2;
    9e6a:	3001      	adds	r0, #1
    9e6c:	2325      	movs	r3, #37	; 0x25
    9e6e:	54f0      	strb	r0, [r6, r3]
    9e70:	e7ed      	b.n	9e4e <setTxParams+0x2a>
    9e72:	46c0      	nop			; (mov r8, r8)
    9e74:	200024d0 	.word	0x200024d0

00009e78 <setChlistDefaultState>:
	return status;
}
#endif
#if (EU_BAND == 1 || AS_BAND == 1 || IND_BAND == 1 || JPN_BAND == 1 || KR_BAND == 1)
static StackRetStatus_t setChlistDefaultState(LorawanRegionalAttributes_t attr, void *attrInput)
{
    9e78:	b5f0      	push	{r4, r5, r6, r7, lr}
	StackRetStatus_t status = LORAWAN_SUCCESS;
	/* Traverse the entire channel list and disable the all the Channel status except Default channels */
	for (uint8_t i = 0; i <= RegParams.maxChannels; i++)
    9e7a:	232a      	movs	r3, #42	; 0x2a
    9e7c:	4a17      	ldr	r2, [pc, #92]	; (9edc <setChlistDefaultState+0x64>)
    9e7e:	5cd3      	ldrb	r3, [r2, r3]
    9e80:	2b7f      	cmp	r3, #127	; 0x7f
    9e82:	d829      	bhi.n	9ed8 <setChlistDefaultState+0x60>
    9e84:	2200      	movs	r2, #0
	{
		if(RegParams.pOtherChParams[i].joinRequestChannel != true)
    9e86:	4815      	ldr	r0, [pc, #84]	; (9edc <setChlistDefaultState+0x64>)
		{
			RegParams.pChParams[i].status = DISABLED;
    9e88:	0004      	movs	r4, r0
    9e8a:	2700      	movs	r7, #0
	for (uint8_t i = 0; i <= RegParams.maxChannels; i++)
    9e8c:	0006      	movs	r6, r0
    9e8e:	252a      	movs	r5, #42	; 0x2a
    9e90:	e004      	b.n	9e9c <setChlistDefaultState+0x24>
    9e92:	3201      	adds	r2, #1
    9e94:	b2d2      	uxtb	r2, r2
    9e96:	5773      	ldrsb	r3, [r6, r5]
    9e98:	429a      	cmp	r2, r3
    9e9a:	dc1d      	bgt.n	9ed8 <setChlistDefaultState+0x60>
		if(RegParams.pOtherChParams[i].joinRequestChannel != true)
    9e9c:	7a03      	ldrb	r3, [r0, #8]
    9e9e:	7a41      	ldrb	r1, [r0, #9]
    9ea0:	0209      	lsls	r1, r1, #8
    9ea2:	430b      	orrs	r3, r1
    9ea4:	7a81      	ldrb	r1, [r0, #10]
    9ea6:	0409      	lsls	r1, r1, #16
    9ea8:	4319      	orrs	r1, r3
    9eaa:	7ac3      	ldrb	r3, [r0, #11]
    9eac:	061b      	lsls	r3, r3, #24
    9eae:	4319      	orrs	r1, r3
    9eb0:	0053      	lsls	r3, r2, #1
    9eb2:	189b      	adds	r3, r3, r2
    9eb4:	009b      	lsls	r3, r3, #2
    9eb6:	185b      	adds	r3, r3, r1
    9eb8:	7a5b      	ldrb	r3, [r3, #9]
    9eba:	2b00      	cmp	r3, #0
    9ebc:	d1e9      	bne.n	9e92 <setChlistDefaultState+0x1a>
			RegParams.pChParams[i].status = DISABLED;
    9ebe:	7923      	ldrb	r3, [r4, #4]
    9ec0:	7961      	ldrb	r1, [r4, #5]
    9ec2:	0209      	lsls	r1, r1, #8
    9ec4:	4319      	orrs	r1, r3
    9ec6:	79a3      	ldrb	r3, [r4, #6]
    9ec8:	041b      	lsls	r3, r3, #16
    9eca:	4319      	orrs	r1, r3
    9ecc:	79e3      	ldrb	r3, [r4, #7]
    9ece:	061b      	lsls	r3, r3, #24
    9ed0:	430b      	orrs	r3, r1
    9ed2:	0051      	lsls	r1, r2, #1
    9ed4:	54cf      	strb	r7, [r1, r3]
    9ed6:	e7dc      	b.n	9e92 <setChlistDefaultState+0x1a>
		}
	}
	return status;
}
    9ed8:	2008      	movs	r0, #8
    9eda:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9edc:	200024d0 	.word	0x200024d0

00009ee0 <SearchAvailableChannel1>:
{
    9ee0:	b5f0      	push	{r4, r5, r6, r7, lr}
    9ee2:	46de      	mov	lr, fp
    9ee4:	4657      	mov	r7, sl
    9ee6:	464e      	mov	r6, r9
    9ee8:	4645      	mov	r5, r8
    9eea:	b5e0      	push	{r5, r6, r7, lr}
    9eec:	b0af      	sub	sp, #188	; 0xbc
    9eee:	000d      	movs	r5, r1
    9ef0:	0017      	movs	r7, r2
    9ef2:	9309      	str	r3, [sp, #36]	; 0x24
	memset(ChList, 0, (MAX_CHANNELS_BANDWIDTH_125_AU_NA + MAX_CHANNELS_BANDWIDTH_500_AU_NA) * 2);  
    9ef4:	2290      	movs	r2, #144	; 0x90
    9ef6:	2100      	movs	r1, #0
    9ef8:	a80a      	add	r0, sp, #40	; 0x28
    9efa:	4b77      	ldr	r3, [pc, #476]	; (a0d8 <SearchAvailableChannel1+0x1f8>)
    9efc:	4798      	blx	r3
	if(transmissionType == false)
    9efe:	2d00      	cmp	r5, #0
    9f00:	d01a      	beq.n	9f38 <SearchAvailableChannel1+0x58>
					((!transmissionType) &&((RegParams.pChParams[i + j].status == ENABLED) && ((i+j) != RegParams.lastUsedChannelIndex))
    9f02:	4b76      	ldr	r3, [pc, #472]	; (a0dc <SearchAvailableChannel1+0x1fc>)
    9f04:	222f      	movs	r2, #47	; 0x2f
    9f06:	5c9a      	ldrb	r2, [r3, r2]
    9f08:	4693      	mov	fp, r2
					((((i+j) < MAX_CHANNELS_BANDWIDTH_125_AU_NA) && (RegParams.cmnParams.paramsType1.lastUsedSB == k))
    9f0a:	2258      	movs	r2, #88	; 0x58
    9f0c:	32ff      	adds	r2, #255	; 0xff
    9f0e:	5c9a      	ldrb	r2, [r3, r2]
    9f10:	9207      	str	r2, [sp, #28]
					(RegParams.cmnParams.paramsType1.lastUsedSB == ((i + j) - MAX_CHANNELS_BANDWIDTH_125_AU_NA))))
    9f12:	9208      	str	r2, [sp, #32]
					((!transmissionType) &&((RegParams.pChParams[i + j].status == ENABLED) && ((i+j) != RegParams.lastUsedChannelIndex))
    9f14:	7919      	ldrb	r1, [r3, #4]
    9f16:	795a      	ldrb	r2, [r3, #5]
    9f18:	0212      	lsls	r2, r2, #8
    9f1a:	4311      	orrs	r1, r2
    9f1c:	799a      	ldrb	r2, [r3, #6]
    9f1e:	0412      	lsls	r2, r2, #16
    9f20:	430a      	orrs	r2, r1
    9f22:	79db      	ldrb	r3, [r3, #7]
    9f24:	061b      	lsls	r3, r3, #24
    9f26:	4313      	orrs	r3, r2
    9f28:	9302      	str	r3, [sp, #8]
					(RegParams.cmnParams.paramsType1.lastUsedSB == ((i + j) - MAX_CHANNELS_BANDWIDTH_125_AU_NA))))
    9f2a:	9303      	str	r3, [sp, #12]
    9f2c:	2100      	movs	r1, #0
    9f2e:	2600      	movs	r6, #0
				if (((transmissionType) && (currDr >= RegParams.pChParams[i + j].dataRange.min) && (currDr <= RegParams.pChParams[i + j].dataRange.max) 
    9f30:	46b9      	mov	r9, r7
    9f32:	46bc      	mov	ip, r7
    9f34:	0037      	movs	r7, r6
    9f36:	e03a      	b.n	9fae <SearchAvailableChannel1+0xce>
		if(RegParams.FeaturesSupport & JOIN_BACKOFF_SUPPORT)
    9f38:	2320      	movs	r3, #32
    9f3a:	4a68      	ldr	r2, [pc, #416]	; (a0dc <SearchAvailableChannel1+0x1fc>)
    9f3c:	5cd3      	ldrb	r3, [r2, r3]
    9f3e:	069b      	lsls	r3, r3, #26
    9f40:	d5df      	bpl.n	9f02 <SearchAvailableChannel1+0x22>
			if(SwTimerIsRunning(RegParams.pJoinDutyCycleTimer->timerId)) 
    9f42:	0011      	movs	r1, r2
    9f44:	7d13      	ldrb	r3, [r2, #20]
    9f46:	7d52      	ldrb	r2, [r2, #21]
    9f48:	0212      	lsls	r2, r2, #8
    9f4a:	431a      	orrs	r2, r3
    9f4c:	7d8b      	ldrb	r3, [r1, #22]
    9f4e:	041b      	lsls	r3, r3, #16
    9f50:	431a      	orrs	r2, r3
    9f52:	7dcb      	ldrb	r3, [r1, #23]
    9f54:	061b      	lsls	r3, r3, #24
    9f56:	4313      	orrs	r3, r2
    9f58:	7a18      	ldrb	r0, [r3, #8]
    9f5a:	4b61      	ldr	r3, [pc, #388]	; (a0e0 <SearchAvailableChannel1+0x200>)
    9f5c:	4798      	blx	r3
    9f5e:	0003      	movs	r3, r0
					return LORAWAN_NO_CHANNELS_FOUND;
    9f60:	2010      	movs	r0, #16
			if(SwTimerIsRunning(RegParams.pJoinDutyCycleTimer->timerId)) 
    9f62:	2b00      	cmp	r3, #0
    9f64:	d0cd      	beq.n	9f02 <SearchAvailableChannel1+0x22>
    9f66:	e053      	b.n	a010 <SearchAvailableChannel1+0x130>
					((!transmissionType) &&((RegParams.pChParams[i + j].status == ENABLED) && ((i+j) != RegParams.lastUsedChannelIndex))
    9f68:	7806      	ldrb	r6, [r0, #0]
    9f6a:	2e00      	cmp	r6, #0
    9f6c:	d100      	bne.n	9f70 <SearchAvailableChannel1+0x90>
    9f6e:	e088      	b.n	a082 <SearchAvailableChannel1+0x1a2>
    9f70:	001e      	movs	r6, r3
    9f72:	459b      	cmp	fp, r3
    9f74:	d100      	bne.n	9f78 <SearchAvailableChannel1+0x98>
    9f76:	e084      	b.n	a082 <SearchAvailableChannel1+0x1a2>
					&&
    9f78:	2b3f      	cmp	r3, #63	; 0x3f
    9f7a:	dc02      	bgt.n	9f82 <SearchAvailableChannel1+0xa2>
					((((i+j) < MAX_CHANNELS_BANDWIDTH_125_AU_NA) && (RegParams.cmnParams.paramsType1.lastUsedSB == k))
    9f7c:	9f07      	ldr	r7, [sp, #28]
    9f7e:	4547      	cmp	r7, r8
    9f80:	d06c      	beq.n	a05c <SearchAvailableChannel1+0x17c>
					|| 
    9f82:	2e40      	cmp	r6, #64	; 0x40
    9f84:	dc00      	bgt.n	9f88 <SearchAvailableChannel1+0xa8>
    9f86:	e07c      	b.n	a082 <SearchAvailableChannel1+0x1a2>
					(((i+j) > MAX_CHANNELS_BANDWIDTH_125_AU_NA) && 
    9f88:	001e      	movs	r6, r3
    9f8a:	3e40      	subs	r6, #64	; 0x40
    9f8c:	9f08      	ldr	r7, [sp, #32]
    9f8e:	42b7      	cmp	r7, r6
    9f90:	d000      	beq.n	9f94 <SearchAvailableChannel1+0xb4>
    9f92:	e076      	b.n	a082 <SearchAvailableChannel1+0x1a2>
    9f94:	e08d      	b.n	a0b2 <SearchAvailableChannel1+0x1d2>
    9f96:	9f01      	ldr	r7, [sp, #4]
    9f98:	9b00      	ldr	r3, [sp, #0]
    9f9a:	469c      	mov	ip, r3
    9f9c:	9b02      	ldr	r3, [sp, #8]
    9f9e:	3310      	adds	r3, #16
    9fa0:	9302      	str	r3, [sp, #8]
    9fa2:	9b03      	ldr	r3, [sp, #12]
    9fa4:	3310      	adds	r3, #16
    9fa6:	9303      	str	r3, [sp, #12]
    9fa8:	9904      	ldr	r1, [sp, #16]
	for (i = 0, k = 0; i < (MAX_CHANNELS_BANDWIDTH_125_AU_NA + MAX_CHANNELS_BANDWIDTH_500_AU_NA); i += 8, k++)
    9faa:	2909      	cmp	r1, #9
    9fac:	d00e      	beq.n	9fcc <SearchAvailableChannel1+0xec>
    9fae:	00cb      	lsls	r3, r1, #3
    9fb0:	1c4a      	adds	r2, r1, #1
    9fb2:	9204      	str	r2, [sp, #16]
    9fb4:	001c      	movs	r4, r3
    9fb6:	3408      	adds	r4, #8
{
    9fb8:	9803      	ldr	r0, [sp, #12]
    9fba:	9a02      	ldr	r2, [sp, #8]
								ChList[num][1] = k + 1;    
    9fbc:	1c4e      	adds	r6, r1, #1
					((((i+j) < MAX_CHANNELS_BANDWIDTH_125_AU_NA) && (RegParams.cmnParams.paramsType1.lastUsedSB == k))
    9fbe:	b2c9      	uxtb	r1, r1
    9fc0:	9701      	str	r7, [sp, #4]
    9fc2:	9605      	str	r6, [sp, #20]
    9fc4:	4688      	mov	r8, r1
    9fc6:	4661      	mov	r1, ip
    9fc8:	9100      	str	r1, [sp, #0]
    9fca:	e060      	b.n	a08e <SearchAvailableChannel1+0x1ae>
    9fcc:	1e3e      	subs	r6, r7, #0
    9fce:	4667      	mov	r7, ip
	if(0 != num)
    9fd0:	d125      	bne.n	a01e <SearchAvailableChannel1+0x13e>
		if ((RegParams.pChParams[RegParams.lastUsedChannelIndex].status == ENABLED) &&
    9fd2:	4942      	ldr	r1, [pc, #264]	; (a0dc <SearchAvailableChannel1+0x1fc>)
    9fd4:	232f      	movs	r3, #47	; 0x2f
    9fd6:	5ccc      	ldrb	r4, [r1, r3]
    9fd8:	790b      	ldrb	r3, [r1, #4]
    9fda:	794a      	ldrb	r2, [r1, #5]
    9fdc:	0212      	lsls	r2, r2, #8
    9fde:	431a      	orrs	r2, r3
    9fe0:	798b      	ldrb	r3, [r1, #6]
    9fe2:	041b      	lsls	r3, r3, #16
    9fe4:	431a      	orrs	r2, r3
    9fe6:	79cb      	ldrb	r3, [r1, #7]
    9fe8:	061b      	lsls	r3, r3, #24
    9fea:	4313      	orrs	r3, r2
    9fec:	0062      	lsls	r2, r4, #1
    9fee:	189b      	adds	r3, r3, r2
    9ff0:	781a      	ldrb	r2, [r3, #0]
			result = LORAWAN_NO_CHANNELS_FOUND;
    9ff2:	2010      	movs	r0, #16
		if ((RegParams.pChParams[RegParams.lastUsedChannelIndex].status == ENABLED) &&
    9ff4:	2a00      	cmp	r2, #0
    9ff6:	d00b      	beq.n	a010 <SearchAvailableChannel1+0x130>
		(currDr >= RegParams.pChParams[RegParams.lastUsedChannelIndex].dataRange.min) &&
    9ff8:	785a      	ldrb	r2, [r3, #1]
    9ffa:	0712      	lsls	r2, r2, #28
    9ffc:	0f12      	lsrs	r2, r2, #28
		if ((RegParams.pChParams[RegParams.lastUsedChannelIndex].status == ENABLED) &&
    9ffe:	4297      	cmp	r7, r2
    a000:	db06      	blt.n	a010 <SearchAvailableChannel1+0x130>
		(currDr <= RegParams.pChParams[RegParams.lastUsedChannelIndex].dataRange.max))
    a002:	785b      	ldrb	r3, [r3, #1]
    a004:	091b      	lsrs	r3, r3, #4
		(currDr >= RegParams.pChParams[RegParams.lastUsedChannelIndex].dataRange.min) &&
    a006:	429f      	cmp	r7, r3
    a008:	dc02      	bgt.n	a010 <SearchAvailableChannel1+0x130>
			*channelIndex = RegParams.lastUsedChannelIndex;
    a00a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    a00c:	701c      	strb	r4, [r3, #0]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    a00e:	3808      	subs	r0, #8
}
    a010:	b02f      	add	sp, #188	; 0xbc
    a012:	bc3c      	pop	{r2, r3, r4, r5}
    a014:	4690      	mov	r8, r2
    a016:	4699      	mov	r9, r3
    a018:	46a2      	mov	sl, r4
    a01a:	46ab      	mov	fp, r5
    a01c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		randomNumber = rand() % num;
    a01e:	4b31      	ldr	r3, [pc, #196]	; (a0e4 <SearchAvailableChannel1+0x204>)
    a020:	4798      	blx	r3
    a022:	0031      	movs	r1, r6
    a024:	4b30      	ldr	r3, [pc, #192]	; (a0e8 <SearchAvailableChannel1+0x208>)
    a026:	4798      	blx	r3
    a028:	23ff      	movs	r3, #255	; 0xff
    a02a:	400b      	ands	r3, r1
		*channelIndex = ChList[randomNumber][0];
    a02c:	005b      	lsls	r3, r3, #1
    a02e:	aa0a      	add	r2, sp, #40	; 0x28
    a030:	5c9a      	ldrb	r2, [r3, r2]
    a032:	9909      	ldr	r1, [sp, #36]	; 0x24
    a034:	700a      	strb	r2, [r1, #0]
		RegParams.cmnParams.paramsType1.lastUsedSB = ChList[randomNumber][1];
    a036:	aa0a      	add	r2, sp, #40	; 0x28
    a038:	4694      	mov	ip, r2
    a03a:	4463      	add	r3, ip
    a03c:	785b      	ldrb	r3, [r3, #1]
		if(RegParams.cmnParams.paramsType1.lastUsedSB >= MAX_SUBBANDS)
    a03e:	2b07      	cmp	r3, #7
    a040:	d805      	bhi.n	a04e <SearchAvailableChannel1+0x16e>
		RegParams.cmnParams.paramsType1.lastUsedSB = ChList[randomNumber][1];
    a042:	2258      	movs	r2, #88	; 0x58
    a044:	32ff      	adds	r2, #255	; 0xff
    a046:	4925      	ldr	r1, [pc, #148]	; (a0dc <SearchAvailableChannel1+0x1fc>)
    a048:	548b      	strb	r3, [r1, r2]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    a04a:	2008      	movs	r0, #8
    a04c:	e7e0      	b.n	a010 <SearchAvailableChannel1+0x130>
				RegParams.cmnParams.paramsType1.lastUsedSB = 0;
    a04e:	2100      	movs	r1, #0
    a050:	2358      	movs	r3, #88	; 0x58
    a052:	33ff      	adds	r3, #255	; 0xff
    a054:	4a21      	ldr	r2, [pc, #132]	; (a0dc <SearchAvailableChannel1+0x1fc>)
    a056:	54d1      	strb	r1, [r2, r3]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    a058:	2008      	movs	r0, #8
    a05a:	e7d9      	b.n	a010 <SearchAvailableChannel1+0x130>
						ChList[num][0] = i+j;
    a05c:	9901      	ldr	r1, [sp, #4]
    a05e:	9106      	str	r1, [sp, #24]
    a060:	0049      	lsls	r1, r1, #1
    a062:	468c      	mov	ip, r1
    a064:	a90a      	add	r1, sp, #40	; 0x28
    a066:	4666      	mov	r6, ip
    a068:	5473      	strb	r3, [r6, r1]
								ChList[num][1] = k + 1;    
    a06a:	9906      	ldr	r1, [sp, #24]
    a06c:	004e      	lsls	r6, r1, #1
    a06e:	a90a      	add	r1, sp, #40	; 0x28
    a070:	468c      	mov	ip, r1
    a072:	4466      	add	r6, ip
    a074:	4669      	mov	r1, sp
    a076:	7d09      	ldrb	r1, [r1, #20]
    a078:	7071      	strb	r1, [r6, #1]
						num++;
    a07a:	9f01      	ldr	r7, [sp, #4]
    a07c:	3701      	adds	r7, #1
    a07e:	b2f9      	uxtb	r1, r7
    a080:	9101      	str	r1, [sp, #4]
    a082:	3202      	adds	r2, #2
    a084:	3002      	adds	r0, #2
    a086:	3301      	adds	r3, #1
			for (j = 0; j < NO_OF_CH_IN_SUBBAND; j++)
    a088:	42a3      	cmp	r3, r4
    a08a:	d100      	bne.n	a08e <SearchAvailableChannel1+0x1ae>
    a08c:	e783      	b.n	9f96 <SearchAvailableChannel1+0xb6>
				if (((transmissionType) && (currDr >= RegParams.pChParams[i + j].dataRange.min) && (currDr <= RegParams.pChParams[i + j].dataRange.max) 
    a08e:	2d00      	cmp	r5, #0
    a090:	d100      	bne.n	a094 <SearchAvailableChannel1+0x1b4>
    a092:	e769      	b.n	9f68 <SearchAvailableChannel1+0x88>
    a094:	7856      	ldrb	r6, [r2, #1]
    a096:	0736      	lsls	r6, r6, #28
    a098:	0f36      	lsrs	r6, r6, #28
    a09a:	9f00      	ldr	r7, [sp, #0]
    a09c:	42b7      	cmp	r7, r6
    a09e:	dbf0      	blt.n	a082 <SearchAvailableChannel1+0x1a2>
    a0a0:	7856      	ldrb	r6, [r2, #1]
    a0a2:	0936      	lsrs	r6, r6, #4
    a0a4:	45b1      	cmp	r9, r6
    a0a6:	dcec      	bgt.n	a082 <SearchAvailableChannel1+0x1a2>
					&& ((RegParams.pChParams[i + j].status == ENABLED) && ((i+j) != RegParams.lastUsedChannelIndex))) 
    a0a8:	7816      	ldrb	r6, [r2, #0]
    a0aa:	2e00      	cmp	r6, #0
    a0ac:	d0e9      	beq.n	a082 <SearchAvailableChannel1+0x1a2>
    a0ae:	459b      	cmp	fp, r3
    a0b0:	d0e7      	beq.n	a082 <SearchAvailableChannel1+0x1a2>
						ChList[num][0] = i+j;
    a0b2:	9901      	ldr	r1, [sp, #4]
    a0b4:	9106      	str	r1, [sp, #24]
    a0b6:	b2de      	uxtb	r6, r3
    a0b8:	46b4      	mov	ip, r6
    a0ba:	004e      	lsls	r6, r1, #1
    a0bc:	af0a      	add	r7, sp, #40	; 0x28
    a0be:	4661      	mov	r1, ip
    a0c0:	55f1      	strb	r1, [r6, r7]
						if((i+j) >= MAX_CHANNELS_BANDWIDTH_125_AU_NA)
    a0c2:	2b3f      	cmp	r3, #63	; 0x3f
    a0c4:	ddd1      	ble.n	a06a <SearchAvailableChannel1+0x18a>
								ChList[num][1] = ((i + j) - MAX_CHANNELS_BANDWIDTH_125_AU_NA + 1);
    a0c6:	46ba      	mov	sl, r7
    a0c8:	4456      	add	r6, sl
    a0ca:	213f      	movs	r1, #63	; 0x3f
    a0cc:	4249      	negs	r1, r1
    a0ce:	468a      	mov	sl, r1
    a0d0:	44d4      	add	ip, sl
    a0d2:	4661      	mov	r1, ip
    a0d4:	7071      	strb	r1, [r6, #1]
    a0d6:	e7d0      	b.n	a07a <SearchAvailableChannel1+0x19a>
    a0d8:	00019ec9 	.word	0x00019ec9
    a0dc:	200024d0 	.word	0x200024d0
    a0e0:	0000efc1 	.word	0x0000efc1
    a0e4:	0001a069 	.word	0x0001a069
    a0e8:	00016921 	.word	0x00016921

0000a0ec <LORAREG_GetAttr_FreeChannel1>:
{
    a0ec:	b570      	push	{r4, r5, r6, lr}
	memcpy(&newFreeChannelReq,(NewFreeChannelReq_t *)attrInput,sizeof(NewFreeChannelReq_t));
    a0ee:	784c      	ldrb	r4, [r1, #1]
	if(newFreeChannelReq.maxChannels > RegParams.maxChannels)
    a0f0:	202a      	movs	r0, #42	; 0x2a
    a0f2:	4d07      	ldr	r5, [pc, #28]	; (a110 <LORAREG_GetAttr_FreeChannel1+0x24>)
    a0f4:	562d      	ldrsb	r5, [r5, r0]
		return LORAWAN_INVALID_PARAMETER;
    a0f6:	3820      	subs	r0, #32
	if(newFreeChannelReq.maxChannels > RegParams.maxChannels)
    a0f8:	42ac      	cmp	r4, r5
    a0fa:	dd00      	ble.n	a0fe <LORAREG_GetAttr_FreeChannel1+0x12>
}
    a0fc:	bd70      	pop	{r4, r5, r6, pc}
		result = SearchAvailableChannel1(newFreeChannelReq.maxChannels,newFreeChannelReq.transmissionType,newFreeChannelReq.currDr,(uint8_t*)attrOutput);
    a0fe:	7888      	ldrb	r0, [r1, #2]
    a100:	7809      	ldrb	r1, [r1, #0]
    a102:	0013      	movs	r3, r2
    a104:	0002      	movs	r2, r0
    a106:	0020      	movs	r0, r4
    a108:	4c02      	ldr	r4, [pc, #8]	; (a114 <LORAREG_GetAttr_FreeChannel1+0x28>)
    a10a:	47a0      	blx	r4
	return result;
    a10c:	e7f6      	b.n	a0fc <LORAREG_GetAttr_FreeChannel1+0x10>
    a10e:	46c0      	nop			; (mov r8, r8)
    a110:	200024d0 	.word	0x200024d0
    a114:	00009ee1 	.word	0x00009ee1

0000a118 <setEnableAllChs>:
{
    a118:	b570      	push	{r4, r5, r6, lr}
    a11a:	2000      	movs	r0, #0
		RegParams.pChParams[i].status = ENABLED;	
    a11c:	4915      	ldr	r1, [pc, #84]	; (a174 <setEnableAllChs+0x5c>)
    a11e:	2401      	movs	r4, #1
    a120:	790b      	ldrb	r3, [r1, #4]
    a122:	794a      	ldrb	r2, [r1, #5]
    a124:	0212      	lsls	r2, r2, #8
    a126:	431a      	orrs	r2, r3
    a128:	798b      	ldrb	r3, [r1, #6]
    a12a:	041b      	lsls	r3, r3, #16
    a12c:	431a      	orrs	r2, r3
    a12e:	79cb      	ldrb	r3, [r1, #7]
    a130:	061b      	lsls	r3, r3, #24
    a132:	4313      	orrs	r3, r2
    a134:	541c      	strb	r4, [r3, r0]
    a136:	3002      	adds	r0, #2
	for(uint8_t i = 0; i < (NO_OF_CH_IN_SUBBAND * (MAX_SUBBANDS + 1)); i++)
    a138:	2890      	cmp	r0, #144	; 0x90
    a13a:	d1f1      	bne.n	a120 <setEnableAllChs+0x8>
	RegParams.cmnParams.paramsType1.lastUsedSB = 0;
    a13c:	4c0d      	ldr	r4, [pc, #52]	; (a174 <setEnableAllChs+0x5c>)
    a13e:	2200      	movs	r2, #0
    a140:	2358      	movs	r3, #88	; 0x58
    a142:	33ff      	adds	r3, #255	; 0xff
    a144:	54e2      	strb	r2, [r4, r3]
	PDS_STORE(RegParams.regParamItems.ch_param_1_item_id);
    a146:	4b0c      	ldr	r3, [pc, #48]	; (a178 <setEnableAllChs+0x60>)
    a148:	5ce3      	ldrb	r3, [r4, r3]
    a14a:	4a0c      	ldr	r2, [pc, #48]	; (a17c <setEnableAllChs+0x64>)
    a14c:	5ca0      	ldrb	r0, [r4, r2]
    a14e:	0200      	lsls	r0, r0, #8
    a150:	4318      	orrs	r0, r3
    a152:	b2c1      	uxtb	r1, r0
    a154:	0a00      	lsrs	r0, r0, #8
    a156:	4d0a      	ldr	r5, [pc, #40]	; (a180 <setEnableAllChs+0x68>)
    a158:	47a8      	blx	r5
	PDS_STORE(RegParams.regParamItems.lastUsedSB);
    a15a:	2383      	movs	r3, #131	; 0x83
    a15c:	009b      	lsls	r3, r3, #2
    a15e:	5ce3      	ldrb	r3, [r4, r3]
    a160:	4a08      	ldr	r2, [pc, #32]	; (a184 <setEnableAllChs+0x6c>)
    a162:	5ca0      	ldrb	r0, [r4, r2]
    a164:	0200      	lsls	r0, r0, #8
    a166:	4318      	orrs	r0, r3
    a168:	b2c1      	uxtb	r1, r0
    a16a:	0a00      	lsrs	r0, r0, #8
    a16c:	47a8      	blx	r5
}
    a16e:	2008      	movs	r0, #8
    a170:	bd70      	pop	{r4, r5, r6, pc}
    a172:	46c0      	nop			; (mov r8, r8)
    a174:	200024d0 	.word	0x200024d0
    a178:	0000020e 	.word	0x0000020e
    a17c:	0000020f 	.word	0x0000020f
    a180:	0000e0f9 	.word	0x0000e0f9
    a184:	0000020d 	.word	0x0000020d

0000a188 <setJoinSuccess>:
{
    a188:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if(RegParams.cmnParams.paramsType1.lastUsedSB == 0)
    a18a:	2358      	movs	r3, #88	; 0x58
    a18c:	33ff      	adds	r3, #255	; 0xff
    a18e:	4a1a      	ldr	r2, [pc, #104]	; (a1f8 <setJoinSuccess+0x70>)
    a190:	5cd7      	ldrb	r7, [r2, r3]
    a192:	2f00      	cmp	r7, #0
    a194:	d100      	bne.n	a198 <setJoinSuccess+0x10>
		lastUsedSB = 8;
    a196:	3708      	adds	r7, #8
		if(((i < MAX_CHANNELS_BANDWIDTH_125_AU_NA) && ((i < ((lastUsedSB - 1) * NO_OF_CH_IN_SUBBAND)) 
    a198:	1e7c      	subs	r4, r7, #1
    a19a:	00e4      	lsls	r4, r4, #3
			|| (i >= (((lastUsedSB - 1) * NO_OF_CH_IN_SUBBAND) + 8) )))
    a19c:	0026      	movs	r6, r4
    a19e:	3608      	adds	r6, #8
    a1a0:	2300      	movs	r3, #0
			RegParams.pChParams[i].status = DISABLED;	
    a1a2:	4815      	ldr	r0, [pc, #84]	; (a1f8 <setJoinSuccess+0x70>)
    a1a4:	2500      	movs	r5, #0
			|| ((i >= MAX_CHANNELS_BANDWIDTH_125_AU_NA) && (i != lastUsedSB + MAX_CHANNELS_BANDWIDTH_125_AU_NA - 1)))
    a1a6:	373f      	adds	r7, #63	; 0x3f
    a1a8:	e010      	b.n	a1cc <setJoinSuccess+0x44>
    a1aa:	429f      	cmp	r7, r3
    a1ac:	d00b      	beq.n	a1c6 <setJoinSuccess+0x3e>
			RegParams.pChParams[i].status = DISABLED;	
    a1ae:	7902      	ldrb	r2, [r0, #4]
    a1b0:	7941      	ldrb	r1, [r0, #5]
    a1b2:	0209      	lsls	r1, r1, #8
    a1b4:	4311      	orrs	r1, r2
    a1b6:	7982      	ldrb	r2, [r0, #6]
    a1b8:	0412      	lsls	r2, r2, #16
    a1ba:	4311      	orrs	r1, r2
    a1bc:	79c2      	ldrb	r2, [r0, #7]
    a1be:	0612      	lsls	r2, r2, #24
    a1c0:	430a      	orrs	r2, r1
    a1c2:	0059      	lsls	r1, r3, #1
    a1c4:	548d      	strb	r5, [r1, r2]
    a1c6:	3301      	adds	r3, #1
	for(uint8_t i = 0; i < (NO_OF_CH_IN_SUBBAND * (MAX_SUBBANDS + 1)); i++)
    a1c8:	2b48      	cmp	r3, #72	; 0x48
    a1ca:	d007      	beq.n	a1dc <setJoinSuccess+0x54>
		if(((i < MAX_CHANNELS_BANDWIDTH_125_AU_NA) && ((i < ((lastUsedSB - 1) * NO_OF_CH_IN_SUBBAND)) 
    a1cc:	b2da      	uxtb	r2, r3
    a1ce:	2a3f      	cmp	r2, #63	; 0x3f
    a1d0:	d8eb      	bhi.n	a1aa <setJoinSuccess+0x22>
    a1d2:	429c      	cmp	r4, r3
    a1d4:	dceb      	bgt.n	a1ae <setJoinSuccess+0x26>
			|| (i >= (((lastUsedSB - 1) * NO_OF_CH_IN_SUBBAND) + 8) )))
    a1d6:	429e      	cmp	r6, r3
    a1d8:	dde9      	ble.n	a1ae <setJoinSuccess+0x26>
    a1da:	e7f4      	b.n	a1c6 <setJoinSuccess+0x3e>
	PDS_STORE(RegParams.regParamItems.ch_param_1_item_id);
    a1dc:	4b06      	ldr	r3, [pc, #24]	; (a1f8 <setJoinSuccess+0x70>)
    a1de:	4a07      	ldr	r2, [pc, #28]	; (a1fc <setJoinSuccess+0x74>)
    a1e0:	5c9a      	ldrb	r2, [r3, r2]
    a1e2:	4907      	ldr	r1, [pc, #28]	; (a200 <setJoinSuccess+0x78>)
    a1e4:	5c58      	ldrb	r0, [r3, r1]
    a1e6:	0200      	lsls	r0, r0, #8
    a1e8:	4310      	orrs	r0, r2
    a1ea:	b2c1      	uxtb	r1, r0
    a1ec:	0a00      	lsrs	r0, r0, #8
    a1ee:	4b05      	ldr	r3, [pc, #20]	; (a204 <setJoinSuccess+0x7c>)
    a1f0:	4798      	blx	r3
}
    a1f2:	2008      	movs	r0, #8
    a1f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    a1f6:	46c0      	nop			; (mov r8, r8)
    a1f8:	200024d0 	.word	0x200024d0
    a1fc:	0000020e 	.word	0x0000020e
    a200:	0000020f 	.word	0x0000020f
    a204:	0000e0f9 	.word	0x0000e0f9

0000a208 <UpdateChannelIdStatus>:
{
    a208:	b510      	push	{r4, lr}
	if(chid < RegParams.maxChannels || ((((1 << RegParams.band) & (ISM_NAAUBAND)) == 0) && chid >= RegParams.cmnParams.paramsType2.minNonDefChId))
    a20a:	232a      	movs	r3, #42	; 0x2a
    a20c:	4a13      	ldr	r2, [pc, #76]	; (a25c <UpdateChannelIdStatus+0x54>)
    a20e:	56d3      	ldrsb	r3, [r2, r3]
    a210:	4298      	cmp	r0, r3
    a212:	db0b      	blt.n	a22c <UpdateChannelIdStatus+0x24>
    a214:	232e      	movs	r3, #46	; 0x2e
    a216:	5cd2      	ldrb	r2, [r2, r3]
    a218:	3b22      	subs	r3, #34	; 0x22
    a21a:	4113      	asrs	r3, r2
    a21c:	07db      	lsls	r3, r3, #31
    a21e:	d41c      	bmi.n	a25a <UpdateChannelIdStatus+0x52>
    a220:	23e0      	movs	r3, #224	; 0xe0
    a222:	005b      	lsls	r3, r3, #1
    a224:	4a0d      	ldr	r2, [pc, #52]	; (a25c <UpdateChannelIdStatus+0x54>)
    a226:	5cd3      	ldrb	r3, [r2, r3]
    a228:	4283      	cmp	r3, r0
    a22a:	d816      	bhi.n	a25a <UpdateChannelIdStatus+0x52>
		RegParams.pChParams[chid].status = statusNew;
    a22c:	4b0b      	ldr	r3, [pc, #44]	; (a25c <UpdateChannelIdStatus+0x54>)
    a22e:	791a      	ldrb	r2, [r3, #4]
    a230:	795c      	ldrb	r4, [r3, #5]
    a232:	0224      	lsls	r4, r4, #8
    a234:	4314      	orrs	r4, r2
    a236:	799a      	ldrb	r2, [r3, #6]
    a238:	0412      	lsls	r2, r2, #16
    a23a:	4314      	orrs	r4, r2
    a23c:	79da      	ldrb	r2, [r3, #7]
    a23e:	0612      	lsls	r2, r2, #24
    a240:	4322      	orrs	r2, r4
    a242:	0040      	lsls	r0, r0, #1
    a244:	5481      	strb	r1, [r0, r2]
		PDS_STORE(RegParams.regParamItems.ch_param_1_item_id);
    a246:	4a06      	ldr	r2, [pc, #24]	; (a260 <UpdateChannelIdStatus+0x58>)
    a248:	5c9a      	ldrb	r2, [r3, r2]
    a24a:	4906      	ldr	r1, [pc, #24]	; (a264 <UpdateChannelIdStatus+0x5c>)
    a24c:	5c58      	ldrb	r0, [r3, r1]
    a24e:	0200      	lsls	r0, r0, #8
    a250:	4310      	orrs	r0, r2
    a252:	b2c1      	uxtb	r1, r0
    a254:	0a00      	lsrs	r0, r0, #8
    a256:	4b04      	ldr	r3, [pc, #16]	; (a268 <UpdateChannelIdStatus+0x60>)
    a258:	4798      	blx	r3
}
    a25a:	bd10      	pop	{r4, pc}
    a25c:	200024d0 	.word	0x200024d0
    a260:	0000020e 	.word	0x0000020e
    a264:	0000020f 	.word	0x0000020f
    a268:	0000e0f9 	.word	0x0000e0f9

0000a26c <EnableChannels2>:
{
    a26c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a26e:	46ce      	mov	lr, r9
    a270:	4647      	mov	r7, r8
    a272:	b580      	push	{r7, lr}
    a274:	0004      	movs	r4, r0
    a276:	000f      	movs	r7, r1
    a278:	0015      	movs	r5, r2
	for(i = startIndx; i <= endIndx; i++)
    a27a:	4288      	cmp	r0, r1
    a27c:	d812      	bhi.n	a2a4 <EnableChannels2+0x38>
		if((chMask & (0x0001)) == 0x0001)
    a27e:	2601      	movs	r6, #1
			UpdateChannelIdStatus(i, ENABLED);
    a280:	4b0a      	ldr	r3, [pc, #40]	; (a2ac <EnableChannels2+0x40>)
    a282:	4699      	mov	r9, r3
			UpdateChannelIdStatus(i, DISABLED);
    a284:	4698      	mov	r8, r3
    a286:	e007      	b.n	a298 <EnableChannels2+0x2c>
    a288:	2100      	movs	r1, #0
    a28a:	0020      	movs	r0, r4
    a28c:	47c0      	blx	r8
		chMask = chMask >> SHIFT1;
    a28e:	086d      	lsrs	r5, r5, #1
	for(i = startIndx; i <= endIndx; i++)
    a290:	3401      	adds	r4, #1
    a292:	b2e4      	uxtb	r4, r4
    a294:	42a7      	cmp	r7, r4
    a296:	d305      	bcc.n	a2a4 <EnableChannels2+0x38>
		if((chMask & (0x0001)) == 0x0001)
    a298:	422e      	tst	r6, r5
    a29a:	d0f5      	beq.n	a288 <EnableChannels2+0x1c>
			UpdateChannelIdStatus(i, ENABLED);
    a29c:	0031      	movs	r1, r6
    a29e:	0020      	movs	r0, r4
    a2a0:	47c8      	blx	r9
    a2a2:	e7f4      	b.n	a28e <EnableChannels2+0x22>
}
    a2a4:	bc0c      	pop	{r2, r3}
    a2a6:	4690      	mov	r8, r2
    a2a8:	4699      	mov	r9, r3
    a2aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    a2ac:	0000a209 	.word	0x0000a209

0000a2b0 <UpdateChannelIdStatusT2>:
{
    a2b0:	b570      	push	{r4, r5, r6, lr}
    a2b2:	000c      	movs	r4, r1
	if(chid < RegParams.maxChannels && chid >= RegParams.cmnParams.paramsType2.minNonDefChId &&
    a2b4:	232a      	movs	r3, #42	; 0x2a
    a2b6:	4a3f      	ldr	r2, [pc, #252]	; (a3b4 <UpdateChannelIdStatusT2+0x104>)
    a2b8:	56d3      	ldrsb	r3, [r2, r3]
    a2ba:	4298      	cmp	r0, r3
    a2bc:	da17      	bge.n	a2ee <UpdateChannelIdStatusT2+0x3e>
    a2be:	23e0      	movs	r3, #224	; 0xe0
    a2c0:	005b      	lsls	r3, r3, #1
    a2c2:	5cd3      	ldrb	r3, [r2, r3]
    a2c4:	4283      	cmp	r3, r0
    a2c6:	d812      	bhi.n	a2ee <UpdateChannelIdStatusT2+0x3e>
	   (RegParams.pOtherChParams[chid].parametersDefined & (FREQUENCY_DEFINED | DATA_RANGE_DEFINED)) == (FREQUENCY_DEFINED | DATA_RANGE_DEFINED))
    a2c8:	0045      	lsls	r5, r0, #1
    a2ca:	182d      	adds	r5, r5, r0
    a2cc:	00ad      	lsls	r5, r5, #2
    a2ce:	0011      	movs	r1, r2
    a2d0:	7a13      	ldrb	r3, [r2, #8]
    a2d2:	7a52      	ldrb	r2, [r2, #9]
    a2d4:	0212      	lsls	r2, r2, #8
    a2d6:	431a      	orrs	r2, r3
    a2d8:	7a8b      	ldrb	r3, [r1, #10]
    a2da:	041b      	lsls	r3, r3, #16
    a2dc:	431a      	orrs	r2, r3
    a2de:	7acb      	ldrb	r3, [r1, #11]
    a2e0:	061b      	lsls	r3, r3, #24
    a2e2:	4313      	orrs	r3, r2
    a2e4:	195b      	adds	r3, r3, r5
	if(chid < RegParams.maxChannels && chid >= RegParams.cmnParams.paramsType2.minNonDefChId &&
    a2e6:	7adb      	ldrb	r3, [r3, #11]
    a2e8:	43db      	mvns	r3, r3
    a2ea:	079b      	lsls	r3, r3, #30
    a2ec:	d000      	beq.n	a2f0 <UpdateChannelIdStatusT2+0x40>
}
    a2ee:	bd70      	pop	{r4, r5, r6, pc}
		RegParams.pChParams[chid].status = statusNew;
    a2f0:	000e      	movs	r6, r1
    a2f2:	790b      	ldrb	r3, [r1, #4]
    a2f4:	794a      	ldrb	r2, [r1, #5]
    a2f6:	0212      	lsls	r2, r2, #8
    a2f8:	431a      	orrs	r2, r3
    a2fa:	798b      	ldrb	r3, [r1, #6]
    a2fc:	041b      	lsls	r3, r3, #16
    a2fe:	431a      	orrs	r2, r3
    a300:	79cb      	ldrb	r3, [r1, #7]
    a302:	061b      	lsls	r3, r3, #24
    a304:	4313      	orrs	r3, r2
    a306:	0040      	lsls	r0, r0, #1
    a308:	54c4      	strb	r4, [r0, r3]
		PDS_STORE(RegParams.regParamItems.ch_param_1_item_id);
    a30a:	4b2b      	ldr	r3, [pc, #172]	; (a3b8 <UpdateChannelIdStatusT2+0x108>)
    a30c:	5ccb      	ldrb	r3, [r1, r3]
    a30e:	4a2b      	ldr	r2, [pc, #172]	; (a3bc <UpdateChannelIdStatusT2+0x10c>)
    a310:	5c88      	ldrb	r0, [r1, r2]
    a312:	0200      	lsls	r0, r0, #8
    a314:	4318      	orrs	r0, r3
    a316:	b2c1      	uxtb	r1, r0
    a318:	0a00      	lsrs	r0, r0, #8
    a31a:	4b29      	ldr	r3, [pc, #164]	; (a3c0 <UpdateChannelIdStatusT2+0x110>)
    a31c:	4798      	blx	r3
		if(((1 << RegParams.band) & (ISM_EUBAND)) != 0 && statusNew == DISABLED)
    a31e:	232e      	movs	r3, #46	; 0x2e
    a320:	5cf2      	ldrb	r2, [r6, r3]
    a322:	3b2b      	subs	r3, #43	; 0x2b
    a324:	4113      	asrs	r3, r2
    a326:	07db      	lsls	r3, r3, #31
    a328:	d5e1      	bpl.n	a2ee <UpdateChannelIdStatusT2+0x3e>
    a32a:	2c00      	cmp	r4, #0
    a32c:	d1df      	bne.n	a2ee <UpdateChannelIdStatusT2+0x3e>
			subBandId = RegParams.pOtherChParams[chid].subBandId;
    a32e:	4b21      	ldr	r3, [pc, #132]	; (a3b4 <UpdateChannelIdStatusT2+0x104>)
    a330:	7a18      	ldrb	r0, [r3, #8]
    a332:	7a5a      	ldrb	r2, [r3, #9]
    a334:	0212      	lsls	r2, r2, #8
    a336:	4302      	orrs	r2, r0
    a338:	7a98      	ldrb	r0, [r3, #10]
    a33a:	0400      	lsls	r0, r0, #16
    a33c:	4302      	orrs	r2, r0
    a33e:	7ad8      	ldrb	r0, [r3, #11]
    a340:	0600      	lsls	r0, r0, #24
    a342:	4310      	orrs	r0, r2
    a344:	1945      	adds	r5, r0, r5
    a346:	7a2d      	ldrb	r5, [r5, #8]
			for(uint8_t i = 0; i < RegParams.maxChannels; i++)
    a348:	222a      	movs	r2, #42	; 0x2a
    a34a:	569c      	ldrsb	r4, [r3, r2]
    a34c:	2c00      	cmp	r4, #0
    a34e:	dd1c      	ble.n	a38a <UpdateChannelIdStatusT2+0xda>
				if(RegParams.pChParams[i].status == ENABLED &&
    a350:	001a      	movs	r2, r3
    a352:	7919      	ldrb	r1, [r3, #4]
    a354:	795b      	ldrb	r3, [r3, #5]
    a356:	021b      	lsls	r3, r3, #8
    a358:	430b      	orrs	r3, r1
    a35a:	7991      	ldrb	r1, [r2, #6]
    a35c:	0409      	lsls	r1, r1, #16
    a35e:	430b      	orrs	r3, r1
    a360:	79d1      	ldrb	r1, [r2, #7]
    a362:	0609      	lsls	r1, r1, #24
    a364:	4319      	orrs	r1, r3
    a366:	2300      	movs	r3, #0
    a368:	e003      	b.n	a372 <UpdateChannelIdStatusT2+0xc2>
			for(uint8_t i = 0; i < RegParams.maxChannels; i++)
    a36a:	3301      	adds	r3, #1
    a36c:	b2db      	uxtb	r3, r3
    a36e:	42a3      	cmp	r3, r4
    a370:	da0b      	bge.n	a38a <UpdateChannelIdStatusT2+0xda>
				if(RegParams.pChParams[i].status == ENABLED &&
    a372:	005a      	lsls	r2, r3, #1
    a374:	5c52      	ldrb	r2, [r2, r1]
    a376:	2a00      	cmp	r2, #0
    a378:	d0f7      	beq.n	a36a <UpdateChannelIdStatusT2+0xba>
				 subBandId == RegParams.pOtherChParams[i].subBandId)
    a37a:	005a      	lsls	r2, r3, #1
    a37c:	18d2      	adds	r2, r2, r3
    a37e:	0092      	lsls	r2, r2, #2
    a380:	1882      	adds	r2, r0, r2
				if(RegParams.pChParams[i].status == ENABLED &&
    a382:	7a12      	ldrb	r2, [r2, #8]
    a384:	42aa      	cmp	r2, r5
    a386:	d1f0      	bne.n	a36a <UpdateChannelIdStatusT2+0xba>
    a388:	e7b1      	b.n	a2ee <UpdateChannelIdStatusT2+0x3e>
			RegParams.pSubBandParams[subBandId].subBandTimeout = 0;
    a38a:	490a      	ldr	r1, [pc, #40]	; (a3b4 <UpdateChannelIdStatusT2+0x104>)
    a38c:	7b0a      	ldrb	r2, [r1, #12]
    a38e:	7b4b      	ldrb	r3, [r1, #13]
    a390:	021b      	lsls	r3, r3, #8
    a392:	4313      	orrs	r3, r2
    a394:	7b8a      	ldrb	r2, [r1, #14]
    a396:	0412      	lsls	r2, r2, #16
    a398:	4313      	orrs	r3, r2
    a39a:	7bca      	ldrb	r2, [r1, #15]
    a39c:	0612      	lsls	r2, r2, #24
    a39e:	431a      	orrs	r2, r3
    a3a0:	006b      	lsls	r3, r5, #1
    a3a2:	195d      	adds	r5, r3, r5
    a3a4:	00ad      	lsls	r5, r5, #2
    a3a6:	18ad      	adds	r5, r5, r2
    a3a8:	2300      	movs	r3, #0
    a3aa:	722b      	strb	r3, [r5, #8]
    a3ac:	726b      	strb	r3, [r5, #9]
    a3ae:	72ab      	strb	r3, [r5, #10]
    a3b0:	72eb      	strb	r3, [r5, #11]
    a3b2:	e79c      	b.n	a2ee <UpdateChannelIdStatusT2+0x3e>
    a3b4:	200024d0 	.word	0x200024d0
    a3b8:	0000020e 	.word	0x0000020e
    a3bc:	0000020f 	.word	0x0000020f
    a3c0:	0000e0f9 	.word	0x0000e0f9

0000a3c4 <setChannelIdStatusT2>:
{
    a3c4:	b570      	push	{r4, r5, r6, lr}
    a3c6:	b082      	sub	sp, #8
	memcpy(&updateChid,attrInput,sizeof(UpdateChId_t));
    a3c8:	780d      	ldrb	r5, [r1, #0]
    a3ca:	784e      	ldrb	r6, [r1, #1]
	valChid.channelIndex = updateChid.channelIndex;
    a3cc:	a901      	add	r1, sp, #4
    a3ce:	700d      	strb	r5, [r1, #0]
	valChid.allowedForDefaultChannels = /*WITHOUT_DEFAULT_CHANNELS*/ALL_CHANNELS;
    a3d0:	2301      	movs	r3, #1
    a3d2:	704b      	strb	r3, [r1, #1]
	if(ValidateChannelIdT2(CHANNEL_ID, &valChid) == LORAWAN_SUCCESS)
    a3d4:	2015      	movs	r0, #21
    a3d6:	4b0c      	ldr	r3, [pc, #48]	; (a408 <setChannelIdStatusT2+0x44>)
    a3d8:	4798      	blx	r3
    a3da:	0004      	movs	r4, r0
    a3dc:	2808      	cmp	r0, #8
    a3de:	d003      	beq.n	a3e8 <setChannelIdStatusT2+0x24>
		retVal = LORAWAN_INVALID_PARAMETER;
    a3e0:	240a      	movs	r4, #10
}
    a3e2:	0020      	movs	r0, r4
    a3e4:	b002      	add	sp, #8
    a3e6:	bd70      	pop	{r4, r5, r6, pc}
		if(RegParams.band ==  ISM_IND865)
    a3e8:	232e      	movs	r3, #46	; 0x2e
    a3ea:	4a08      	ldr	r2, [pc, #32]	; (a40c <setChannelIdStatusT2+0x48>)
    a3ec:	5cd3      	ldrb	r3, [r2, r3]
    a3ee:	2b0f      	cmp	r3, #15
    a3f0:	d004      	beq.n	a3fc <setChannelIdStatusT2+0x38>
		    UpdateChannelIdStatusT2(updateChid.channelIndex,updateChid.statusNew);
    a3f2:	0031      	movs	r1, r6
    a3f4:	0028      	movs	r0, r5
    a3f6:	4b06      	ldr	r3, [pc, #24]	; (a410 <setChannelIdStatusT2+0x4c>)
    a3f8:	4798      	blx	r3
    a3fa:	e7f2      	b.n	a3e2 <setChannelIdStatusT2+0x1e>
			UpdateChannelIdStatus(updateChid.channelIndex,updateChid.statusNew);
    a3fc:	0031      	movs	r1, r6
    a3fe:	0028      	movs	r0, r5
    a400:	4b04      	ldr	r3, [pc, #16]	; (a414 <setChannelIdStatusT2+0x50>)
    a402:	4798      	blx	r3
    a404:	e7ed      	b.n	a3e2 <setChannelIdStatusT2+0x1e>
    a406:	46c0      	nop			; (mov r8, r8)
    a408:	00009a55 	.word	0x00009a55
    a40c:	200024d0 	.word	0x200024d0
    a410:	0000a2b1 	.word	0x0000a2b1
    a414:	0000a209 	.word	0x0000a209

0000a418 <UpdateChannelIdStatusT4>:
{
    a418:	b570      	push	{r4, r5, r6, lr}
    a41a:	0004      	movs	r4, r0
    a41c:	000d      	movs	r5, r1
	RegParams.pChParams[chid].status = statusNew;
    a41e:	4923      	ldr	r1, [pc, #140]	; (a4ac <UpdateChannelIdStatusT4+0x94>)
    a420:	790b      	ldrb	r3, [r1, #4]
    a422:	794a      	ldrb	r2, [r1, #5]
    a424:	0212      	lsls	r2, r2, #8
    a426:	431a      	orrs	r2, r3
    a428:	798b      	ldrb	r3, [r1, #6]
    a42a:	041b      	lsls	r3, r3, #16
    a42c:	431a      	orrs	r2, r3
    a42e:	79cb      	ldrb	r3, [r1, #7]
    a430:	061b      	lsls	r3, r3, #24
    a432:	4313      	orrs	r3, r2
    a434:	0042      	lsls	r2, r0, #1
    a436:	54d5      	strb	r5, [r2, r3]
	PDS_STORE(RegParams.regParamItems.ch_param_1_item_id);
    a438:	4b1d      	ldr	r3, [pc, #116]	; (a4b0 <UpdateChannelIdStatusT4+0x98>)
    a43a:	5ccb      	ldrb	r3, [r1, r3]
    a43c:	4a1d      	ldr	r2, [pc, #116]	; (a4b4 <UpdateChannelIdStatusT4+0x9c>)
    a43e:	5c88      	ldrb	r0, [r1, r2]
    a440:	0200      	lsls	r0, r0, #8
    a442:	4318      	orrs	r0, r3
    a444:	b2c1      	uxtb	r1, r0
    a446:	0a00      	lsrs	r0, r0, #8
    a448:	4b1b      	ldr	r3, [pc, #108]	; (a4b8 <UpdateChannelIdStatusT4+0xa0>)
    a44a:	4798      	blx	r3
	if(statusNew == ENABLED)
    a44c:	2d00      	cmp	r5, #0
    a44e:	d029      	beq.n	a4a4 <UpdateChannelIdStatusT4+0x8c>
		if(RegParams.pOtherChParams[chid].ulfrequency < FREQ_922100KHZ)
    a450:	4a16      	ldr	r2, [pc, #88]	; (a4ac <UpdateChannelIdStatusT4+0x94>)
    a452:	7a10      	ldrb	r0, [r2, #8]
    a454:	7a53      	ldrb	r3, [r2, #9]
    a456:	021b      	lsls	r3, r3, #8
    a458:	4303      	orrs	r3, r0
    a45a:	7a90      	ldrb	r0, [r2, #10]
    a45c:	0400      	lsls	r0, r0, #16
    a45e:	4303      	orrs	r3, r0
    a460:	7ad0      	ldrb	r0, [r2, #11]
    a462:	0600      	lsls	r0, r0, #24
    a464:	4318      	orrs	r0, r3
    a466:	0063      	lsls	r3, r4, #1
    a468:	191c      	adds	r4, r3, r4
    a46a:	00a4      	lsls	r4, r4, #2
    a46c:	1900      	adds	r0, r0, r4
    a46e:	7803      	ldrb	r3, [r0, #0]
    a470:	7842      	ldrb	r2, [r0, #1]
    a472:	0212      	lsls	r2, r2, #8
    a474:	431a      	orrs	r2, r3
    a476:	7883      	ldrb	r3, [r0, #2]
    a478:	041b      	lsls	r3, r3, #16
    a47a:	431a      	orrs	r2, r3
    a47c:	78c3      	ldrb	r3, [r0, #3]
    a47e:	061b      	lsls	r3, r3, #24
    a480:	4313      	orrs	r3, r2
    a482:	4a0e      	ldr	r2, [pc, #56]	; (a4bc <UpdateChannelIdStatusT4+0xa4>)
    a484:	4293      	cmp	r3, r2
    a486:	d80e      	bhi.n	a4a6 <UpdateChannelIdStatusT4+0x8e>
			RegParams.pOtherChParams[chid].maxEIRP = DEFAULT_EIRP_KR_LF;
    a488:	230a      	movs	r3, #10
    a48a:	7283      	strb	r3, [r0, #10]
		PDS_STORE(RegParams.regParamItems.ch_param_2_item_id);
    a48c:	4b07      	ldr	r3, [pc, #28]	; (a4ac <UpdateChannelIdStatusT4+0x94>)
    a48e:	2284      	movs	r2, #132	; 0x84
    a490:	0092      	lsls	r2, r2, #2
    a492:	5c9a      	ldrb	r2, [r3, r2]
    a494:	490a      	ldr	r1, [pc, #40]	; (a4c0 <UpdateChannelIdStatusT4+0xa8>)
    a496:	5c58      	ldrb	r0, [r3, r1]
    a498:	0200      	lsls	r0, r0, #8
    a49a:	4310      	orrs	r0, r2
    a49c:	b2c1      	uxtb	r1, r0
    a49e:	0a00      	lsrs	r0, r0, #8
    a4a0:	4b05      	ldr	r3, [pc, #20]	; (a4b8 <UpdateChannelIdStatusT4+0xa0>)
    a4a2:	4798      	blx	r3
}
    a4a4:	bd70      	pop	{r4, r5, r6, pc}
			RegParams.pOtherChParams[chid].maxEIRP = DEFAULT_EIRP_KR_HF;
    a4a6:	230e      	movs	r3, #14
    a4a8:	7283      	strb	r3, [r0, #10]
    a4aa:	e7ef      	b.n	a48c <UpdateChannelIdStatusT4+0x74>
    a4ac:	200024d0 	.word	0x200024d0
    a4b0:	0000020e 	.word	0x0000020e
    a4b4:	0000020f 	.word	0x0000020f
    a4b8:	0000e0f9 	.word	0x0000e0f9
    a4bc:	36f6211f 	.word	0x36f6211f
    a4c0:	00000211 	.word	0x00000211

0000a4c4 <UpdateChannelIdStatusT3>:
{
    a4c4:	b570      	push	{r4, r5, r6, lr}
    a4c6:	0005      	movs	r5, r0
	RegParams.pChParams[chid].status = statusNew;
    a4c8:	4c17      	ldr	r4, [pc, #92]	; (a528 <UpdateChannelIdStatusT3+0x64>)
    a4ca:	7923      	ldrb	r3, [r4, #4]
    a4cc:	7962      	ldrb	r2, [r4, #5]
    a4ce:	0212      	lsls	r2, r2, #8
    a4d0:	431a      	orrs	r2, r3
    a4d2:	79a3      	ldrb	r3, [r4, #6]
    a4d4:	041b      	lsls	r3, r3, #16
    a4d6:	431a      	orrs	r2, r3
    a4d8:	79e3      	ldrb	r3, [r4, #7]
    a4da:	061b      	lsls	r3, r3, #24
    a4dc:	4313      	orrs	r3, r2
    a4de:	0042      	lsls	r2, r0, #1
    a4e0:	54d1      	strb	r1, [r2, r3]
	PDS_STORE(RegParams.regParamItems.ch_param_1_item_id);
    a4e2:	4b12      	ldr	r3, [pc, #72]	; (a52c <UpdateChannelIdStatusT3+0x68>)
    a4e4:	5ce3      	ldrb	r3, [r4, r3]
    a4e6:	4a12      	ldr	r2, [pc, #72]	; (a530 <UpdateChannelIdStatusT3+0x6c>)
    a4e8:	5ca0      	ldrb	r0, [r4, r2]
    a4ea:	0200      	lsls	r0, r0, #8
    a4ec:	4318      	orrs	r0, r3
    a4ee:	b2c1      	uxtb	r1, r0
    a4f0:	0a00      	lsrs	r0, r0, #8
    a4f2:	4e10      	ldr	r6, [pc, #64]	; (a534 <UpdateChannelIdStatusT3+0x70>)
    a4f4:	47b0      	blx	r6
	PDS_STORE(RegParams.regParamItems.ch_param_2_item_id);
    a4f6:	2384      	movs	r3, #132	; 0x84
    a4f8:	009b      	lsls	r3, r3, #2
    a4fa:	5ce3      	ldrb	r3, [r4, r3]
    a4fc:	4a0e      	ldr	r2, [pc, #56]	; (a538 <UpdateChannelIdStatusT3+0x74>)
    a4fe:	5ca0      	ldrb	r0, [r4, r2]
    a500:	0200      	lsls	r0, r0, #8
    a502:	4318      	orrs	r0, r3
    a504:	b2c1      	uxtb	r1, r0
    a506:	0a00      	lsrs	r0, r0, #8
    a508:	47b0      	blx	r6
	if( RegParams.band == ISM_JPN923)
    a50a:	232e      	movs	r3, #46	; 0x2e
    a50c:	5ce3      	ldrb	r3, [r4, r3]
    a50e:	2b05      	cmp	r3, #5
    a510:	d000      	beq.n	a514 <UpdateChannelIdStatusT3+0x50>
}
    a512:	bd70      	pop	{r4, r5, r6, pc}
		RegParams.cmnParams.paramsType2.channelTimer[chid] = 0;
    a514:	3558      	adds	r5, #88	; 0x58
    a516:	00ad      	lsls	r5, r5, #2
    a518:	4b03      	ldr	r3, [pc, #12]	; (a528 <UpdateChannelIdStatusT3+0x64>)
    a51a:	195d      	adds	r5, r3, r5
    a51c:	2300      	movs	r3, #0
    a51e:	722b      	strb	r3, [r5, #8]
    a520:	726b      	strb	r3, [r5, #9]
    a522:	72ab      	strb	r3, [r5, #10]
    a524:	72eb      	strb	r3, [r5, #11]
}
    a526:	e7f4      	b.n	a512 <UpdateChannelIdStatusT3+0x4e>
    a528:	200024d0 	.word	0x200024d0
    a52c:	0000020e 	.word	0x0000020e
    a530:	0000020f 	.word	0x0000020f
    a534:	0000e0f9 	.word	0x0000e0f9
    a538:	00000211 	.word	0x00000211

0000a53c <setChannelIdStatusT3>:
{
    a53c:	b570      	push	{r4, r5, r6, lr}
    a53e:	b082      	sub	sp, #8
	memcpy(&updateChid,attrInput,sizeof(UpdateChId_t));
    a540:	780d      	ldrb	r5, [r1, #0]
    a542:	784e      	ldrb	r6, [r1, #1]
	valChid.channelIndex = updateChid.channelIndex;
    a544:	a901      	add	r1, sp, #4
    a546:	700d      	strb	r5, [r1, #0]
	valChid.allowedForDefaultChannels = ALL_CHANNELS;
    a548:	2301      	movs	r3, #1
    a54a:	704b      	strb	r3, [r1, #1]
	if(ValidateChannelIdT2(CHANNEL_ID, &valChid) == LORAWAN_SUCCESS)
    a54c:	2015      	movs	r0, #21
    a54e:	4b0c      	ldr	r3, [pc, #48]	; (a580 <setChannelIdStatusT3+0x44>)
    a550:	4798      	blx	r3
    a552:	0004      	movs	r4, r0
    a554:	2808      	cmp	r0, #8
    a556:	d003      	beq.n	a560 <setChannelIdStatusT3+0x24>
		retVal = LORAWAN_INVALID_PARAMETER;
    a558:	240a      	movs	r4, #10
}
    a55a:	0020      	movs	r0, r4
    a55c:	b002      	add	sp, #8
    a55e:	bd70      	pop	{r4, r5, r6, pc}
		if( RegParams.band == ISM_KR920)
    a560:	232e      	movs	r3, #46	; 0x2e
    a562:	4a08      	ldr	r2, [pc, #32]	; (a584 <setChannelIdStatusT3+0x48>)
    a564:	5cd3      	ldrb	r3, [r2, r3]
    a566:	2b04      	cmp	r3, #4
    a568:	d004      	beq.n	a574 <setChannelIdStatusT3+0x38>
		    UpdateChannelIdStatusT3(updateChid.channelIndex,updateChid.statusNew);
    a56a:	0031      	movs	r1, r6
    a56c:	0028      	movs	r0, r5
    a56e:	4b06      	ldr	r3, [pc, #24]	; (a588 <setChannelIdStatusT3+0x4c>)
    a570:	4798      	blx	r3
    a572:	e7f2      	b.n	a55a <setChannelIdStatusT3+0x1e>
			UpdateChannelIdStatusT4(updateChid.channelIndex,updateChid.statusNew);
    a574:	0031      	movs	r1, r6
    a576:	0028      	movs	r0, r5
    a578:	4b04      	ldr	r3, [pc, #16]	; (a58c <setChannelIdStatusT3+0x50>)
    a57a:	4798      	blx	r3
    a57c:	e7ed      	b.n	a55a <setChannelIdStatusT3+0x1e>
    a57e:	46c0      	nop			; (mov r8, r8)
    a580:	00009a55 	.word	0x00009a55
    a584:	200024d0 	.word	0x200024d0
    a588:	0000a4c5 	.word	0x0000a4c5
    a58c:	0000a419 	.word	0x0000a419

0000a590 <LORAREG_GetAttr_JoinDutyCycleRemainingTime>:
{
    a590:	b530      	push	{r4, r5, lr}
    a592:	b083      	sub	sp, #12
    a594:	0014      	movs	r4, r2
	uint32_t timeremaining =0;
    a596:	2300      	movs	r3, #0
    a598:	9301      	str	r3, [sp, #4]
	if(SwTimerIsRunning(RegParams.pJoinDutyCycleTimer->timerId))
    a59a:	4920      	ldr	r1, [pc, #128]	; (a61c <LORAREG_GetAttr_JoinDutyCycleRemainingTime+0x8c>)
    a59c:	7d0b      	ldrb	r3, [r1, #20]
    a59e:	7d4a      	ldrb	r2, [r1, #21]
    a5a0:	0212      	lsls	r2, r2, #8
    a5a2:	431a      	orrs	r2, r3
    a5a4:	7d8b      	ldrb	r3, [r1, #22]
    a5a6:	041b      	lsls	r3, r3, #16
    a5a8:	431a      	orrs	r2, r3
    a5aa:	7dcb      	ldrb	r3, [r1, #23]
    a5ac:	061b      	lsls	r3, r3, #24
    a5ae:	4313      	orrs	r3, r2
    a5b0:	7a18      	ldrb	r0, [r3, #8]
    a5b2:	4b1b      	ldr	r3, [pc, #108]	; (a620 <LORAREG_GetAttr_JoinDutyCycleRemainingTime+0x90>)
    a5b4:	4798      	blx	r3
    a5b6:	2800      	cmp	r0, #0
    a5b8:	d107      	bne.n	a5ca <LORAREG_GetAttr_JoinDutyCycleRemainingTime+0x3a>
	memcpy(attrOutput,&timeremaining,sizeof(uint32_t));
    a5ba:	2204      	movs	r2, #4
    a5bc:	a901      	add	r1, sp, #4
    a5be:	0020      	movs	r0, r4
    a5c0:	4b18      	ldr	r3, [pc, #96]	; (a624 <LORAREG_GetAttr_JoinDutyCycleRemainingTime+0x94>)
    a5c2:	4798      	blx	r3
}
    a5c4:	2008      	movs	r0, #8
    a5c6:	b003      	add	sp, #12
    a5c8:	bd30      	pop	{r4, r5, pc}
		timeremaining = US_TO_MS(SwTimerReadValue (RegParams.pJoinDutyCycleTimer->timerId));
    a5ca:	4d14      	ldr	r5, [pc, #80]	; (a61c <LORAREG_GetAttr_JoinDutyCycleRemainingTime+0x8c>)
    a5cc:	7d2b      	ldrb	r3, [r5, #20]
    a5ce:	7d6a      	ldrb	r2, [r5, #21]
    a5d0:	0212      	lsls	r2, r2, #8
    a5d2:	431a      	orrs	r2, r3
    a5d4:	7dab      	ldrb	r3, [r5, #22]
    a5d6:	041b      	lsls	r3, r3, #16
    a5d8:	431a      	orrs	r2, r3
    a5da:	7deb      	ldrb	r3, [r5, #23]
    a5dc:	061b      	lsls	r3, r3, #24
    a5de:	4313      	orrs	r3, r2
    a5e0:	7a18      	ldrb	r0, [r3, #8]
    a5e2:	4b11      	ldr	r3, [pc, #68]	; (a628 <LORAREG_GetAttr_JoinDutyCycleRemainingTime+0x98>)
    a5e4:	4798      	blx	r3
		timeremaining = timeremaining + RegParams.pJoinDutyCycleTimer->remainingtime;
    a5e6:	7d2b      	ldrb	r3, [r5, #20]
    a5e8:	7d6a      	ldrb	r2, [r5, #21]
    a5ea:	0212      	lsls	r2, r2, #8
    a5ec:	431a      	orrs	r2, r3
    a5ee:	7dab      	ldrb	r3, [r5, #22]
    a5f0:	041b      	lsls	r3, r3, #16
    a5f2:	431a      	orrs	r2, r3
    a5f4:	7deb      	ldrb	r3, [r5, #23]
    a5f6:	061b      	lsls	r3, r3, #24
    a5f8:	4313      	orrs	r3, r2
    a5fa:	791d      	ldrb	r5, [r3, #4]
    a5fc:	795a      	ldrb	r2, [r3, #5]
    a5fe:	0212      	lsls	r2, r2, #8
    a600:	432a      	orrs	r2, r5
    a602:	799d      	ldrb	r5, [r3, #6]
    a604:	042d      	lsls	r5, r5, #16
    a606:	432a      	orrs	r2, r5
    a608:	79dd      	ldrb	r5, [r3, #7]
    a60a:	062d      	lsls	r5, r5, #24
    a60c:	4315      	orrs	r5, r2
		timeremaining = US_TO_MS(SwTimerReadValue (RegParams.pJoinDutyCycleTimer->timerId));
    a60e:	21fa      	movs	r1, #250	; 0xfa
    a610:	0089      	lsls	r1, r1, #2
    a612:	4b06      	ldr	r3, [pc, #24]	; (a62c <LORAREG_GetAttr_JoinDutyCycleRemainingTime+0x9c>)
    a614:	4798      	blx	r3
		timeremaining = timeremaining + RegParams.pJoinDutyCycleTimer->remainingtime;
    a616:	182d      	adds	r5, r5, r0
    a618:	9501      	str	r5, [sp, #4]
    a61a:	e7ce      	b.n	a5ba <LORAREG_GetAttr_JoinDutyCycleRemainingTime+0x2a>
    a61c:	200024d0 	.word	0x200024d0
    a620:	0000efc1 	.word	0x0000efc1
    a624:	00019da5 	.word	0x00019da5
    a628:	0000efd5 	.word	0x0000efd5
    a62c:	00016641 	.word	0x00016641

0000a630 <LORAREG_GetAttr_Rx1WindowparamsType1>:
{
    a630:	b510      	push	{r4, lr}
    a632:	b082      	sub	sp, #8
    a634:	0010      	movs	r0, r2
	memcpy(&rx1WindowParamsReq,(Rx1WindowParamsReq_t *)attrInput,sizeof(Rx1WindowParamsReq_t));
    a636:	784c      	ldrb	r4, [r1, #1]
    a638:	788b      	ldrb	r3, [r1, #2]
	if(rx1WindowParamReq->joining)
    a63a:	780a      	ldrb	r2, [r1, #0]
    a63c:	2a00      	cmp	r2, #0
    a63e:	d007      	beq.n	a650 <LORAREG_GetAttr_Rx1WindowparamsType1+0x20>
		if (RegParams.lastUsedChannelIndex <= MAX_CHANNELS_BANDWIDTH_125_AU_NA) 
    a640:	232f      	movs	r3, #47	; 0x2f
    a642:	4a23      	ldr	r2, [pc, #140]	; (a6d0 <LORAREG_GetAttr_Rx1WindowparamsType1+0xa0>)
    a644:	5cd3      	ldrb	r3, [r2, r3]
    a646:	2b40      	cmp	r3, #64	; 0x40
    a648:	d819      	bhi.n	a67e <LORAREG_GetAttr_Rx1WindowparamsType1+0x4e>
			rx1WindowParamReq->currDr = RegParams.cmnParams.paramsType1.minTxDR;
    a64a:	2350      	movs	r3, #80	; 0x50
    a64c:	33ff      	adds	r3, #255	; 0xff
    a64e:	5cd3      	ldrb	r3, [r2, r3]
		            RegParams.cmnParams.paramsType1.RxParamWindowOffset1 - rx1WindowParamReq->drOffset;
    a650:	491f      	ldr	r1, [pc, #124]	; (a6d0 <LORAREG_GetAttr_Rx1WindowparamsType1+0xa0>)
    a652:	2256      	movs	r2, #86	; 0x56
    a654:	32ff      	adds	r2, #255	; 0xff
    a656:	5c8a      	ldrb	r2, [r1, r2]
    a658:	1b12      	subs	r2, r2, r4
    a65a:	189b      	adds	r3, r3, r2
    a65c:	b2db      	uxtb	r3, r3
	rx1WindowParams->rx1Dr = rx1WindowParamReq->currDr + 
    a65e:	466a      	mov	r2, sp
    a660:	7113      	strb	r3, [r2, #4]
	if(rx1WindowParams->rx1Dr > RegParams.cmnParams.paramsType1.maxRxDR)
    a662:	22a9      	movs	r2, #169	; 0xa9
    a664:	0052      	lsls	r2, r2, #1
    a666:	5c8a      	ldrb	r2, [r1, r2]
    a668:	4293      	cmp	r3, r2
    a66a:	d80d      	bhi.n	a688 <LORAREG_GetAttr_Rx1WindowparamsType1+0x58>
	else if(rx1WindowParams->rx1Dr < RegParams.cmnParams.paramsType1.minRxDR)
    a66c:	2252      	movs	r2, #82	; 0x52
    a66e:	32ff      	adds	r2, #255	; 0xff
    a670:	4917      	ldr	r1, [pc, #92]	; (a6d0 <LORAREG_GetAttr_Rx1WindowparamsType1+0xa0>)
    a672:	5c8a      	ldrb	r2, [r1, r2]
    a674:	4293      	cmp	r3, r2
    a676:	d209      	bcs.n	a68c <LORAREG_GetAttr_Rx1WindowparamsType1+0x5c>
		rx1WindowParams->rx1Dr = RegParams.cmnParams.paramsType1.minRxDR;
    a678:	466b      	mov	r3, sp
    a67a:	711a      	strb	r2, [r3, #4]
    a67c:	e006      	b.n	a68c <LORAREG_GetAttr_Rx1WindowparamsType1+0x5c>
			rx1WindowParamReq->currDr = RegParams.cmnParams.paramsType1.maxTxDR;
    a67e:	23a8      	movs	r3, #168	; 0xa8
    a680:	005b      	lsls	r3, r3, #1
    a682:	4a13      	ldr	r2, [pc, #76]	; (a6d0 <LORAREG_GetAttr_Rx1WindowparamsType1+0xa0>)
    a684:	5cd3      	ldrb	r3, [r2, r3]
    a686:	e7e3      	b.n	a650 <LORAREG_GetAttr_Rx1WindowparamsType1+0x20>
		rx1WindowParams->rx1Dr = RegParams.cmnParams.paramsType1.maxRxDR;
    a688:	466b      	mov	r3, sp
    a68a:	711a      	strb	r2, [r3, #4]
	rx1WindowParams->rx1Freq = GenerateFrequencyReception(RegParams.lastUsedChannelIndex % 8);
    a68c:	4910      	ldr	r1, [pc, #64]	; (a6d0 <LORAREG_GetAttr_Rx1WindowparamsType1+0xa0>)
    a68e:	232f      	movs	r3, #47	; 0x2f
    a690:	5ccc      	ldrb	r4, [r1, r3]
	channelFrequency = RegParams.cmnParams.paramsType1.DownStreamCh0Freq + FREQ_600KHZ * channelIndex;
    a692:	3b28      	subs	r3, #40	; 0x28
    a694:	4023      	ands	r3, r4
    a696:	4c0f      	ldr	r4, [pc, #60]	; (a6d4 <LORAREG_GetAttr_Rx1WindowparamsType1+0xa4>)
    a698:	435c      	muls	r4, r3
    a69a:	234c      	movs	r3, #76	; 0x4c
    a69c:	33ff      	adds	r3, #255	; 0xff
    a69e:	5ccb      	ldrb	r3, [r1, r3]
    a6a0:	22a6      	movs	r2, #166	; 0xa6
    a6a2:	0052      	lsls	r2, r2, #1
    a6a4:	5c8a      	ldrb	r2, [r1, r2]
    a6a6:	0212      	lsls	r2, r2, #8
    a6a8:	4313      	orrs	r3, r2
    a6aa:	224e      	movs	r2, #78	; 0x4e
    a6ac:	32ff      	adds	r2, #255	; 0xff
    a6ae:	5c8a      	ldrb	r2, [r1, r2]
    a6b0:	0412      	lsls	r2, r2, #16
    a6b2:	431a      	orrs	r2, r3
    a6b4:	23a7      	movs	r3, #167	; 0xa7
    a6b6:	005b      	lsls	r3, r3, #1
    a6b8:	5ccb      	ldrb	r3, [r1, r3]
    a6ba:	061b      	lsls	r3, r3, #24
    a6bc:	4313      	orrs	r3, r2
    a6be:	18e3      	adds	r3, r4, r3
	rx1WindowParams->rx1Freq = GenerateFrequencyReception(RegParams.lastUsedChannelIndex % 8);
    a6c0:	9300      	str	r3, [sp, #0]
	memcpy(attrOutput,&rx1WindowParamsResp,sizeof(Rx1WindowParams_t));
    a6c2:	2208      	movs	r2, #8
    a6c4:	4669      	mov	r1, sp
    a6c6:	4b04      	ldr	r3, [pc, #16]	; (a6d8 <LORAREG_GetAttr_Rx1WindowparamsType1+0xa8>)
    a6c8:	4798      	blx	r3
}
    a6ca:	2008      	movs	r0, #8
    a6cc:	b002      	add	sp, #8
    a6ce:	bd10      	pop	{r4, pc}
    a6d0:	200024d0 	.word	0x200024d0
    a6d4:	000927c0 	.word	0x000927c0
    a6d8:	00019da5 	.word	0x00019da5

0000a6dc <LORAREG_GetAttr_DRangeChBandT1>:
{
    a6dc:	b5f0      	push	{r4, r5, r6, r7, lr}
    a6de:	46c6      	mov	lr, r8
    a6e0:	b500      	push	{lr}
    a6e2:	b084      	sub	sp, #16
    a6e4:	9201      	str	r2, [sp, #4]
	memcpy(&bandDrReq,(BandDrReq_t *)attrInput,sizeof(BandDrReq_t));
    a6e6:	2204      	movs	r2, #4
    a6e8:	a803      	add	r0, sp, #12
    a6ea:	4b43      	ldr	r3, [pc, #268]	; (a7f8 <LORAREG_GetAttr_DRangeChBandT1+0x11c>)
    a6ec:	4798      	blx	r3
	if(ValidateChannelMaskCntl(CHANNEL_MASK_CNTL, (void *)&bandDrReq.chnlMaskCntl)	!= LORAWAN_SUCCESS)
    a6ee:	a903      	add	r1, sp, #12
    a6f0:	201b      	movs	r0, #27
    a6f2:	4b42      	ldr	r3, [pc, #264]	; (a7fc <LORAREG_GetAttr_DRangeChBandT1+0x120>)
    a6f4:	4798      	blx	r3
    a6f6:	2808      	cmp	r0, #8
    a6f8:	d004      	beq.n	a704 <LORAREG_GetAttr_DRangeChBandT1+0x28>
		result = LORAWAN_INVALID_PARAMETER;
    a6fa:	200a      	movs	r0, #10
}
    a6fc:	b004      	add	sp, #16
    a6fe:	bc04      	pop	{r2}
    a700:	4690      	mov	r8, r2
    a702:	bdf0      	pop	{r4, r5, r6, r7, pc}
		chBandDr = getChBandDrT1(bandDrReq.chnlMaskCntl,bandDrReq.chnlMask);
    a704:	aa03      	add	r2, sp, #12
    a706:	7813      	ldrb	r3, [r2, #0]
    a708:	8857      	ldrh	r7, [r2, #2]
	if( RegParams.band == ISM_AU915)
    a70a:	222e      	movs	r2, #46	; 0x2e
    a70c:	493c      	ldr	r1, [pc, #240]	; (a800 <LORAREG_GetAttr_DRangeChBandT1+0x124>)
    a70e:	5c89      	ldrb	r1, [r1, r2]
		auxMinDataRate = DR6;
    a710:	3903      	subs	r1, #3
    a712:	1e4a      	subs	r2, r1, #1
    a714:	4191      	sbcs	r1, r2
    a716:	3106      	adds	r1, #6
	switch (chMaskCntl)
    a718:	2b07      	cmp	r3, #7
    a71a:	d869      	bhi.n	a7f0 <LORAREG_GetAttr_DRangeChBandT1+0x114>
    a71c:	009a      	lsls	r2, r3, #2
    a71e:	4d39      	ldr	r5, [pc, #228]	; (a804 <LORAREG_GetAttr_DRangeChBandT1+0x128>)
    a720:	58aa      	ldr	r2, [r5, r2]
    a722:	4697      	mov	pc, r2
			startingIndex = chMaskCntl << SHIFT4;
    a724:	011b      	lsls	r3, r3, #4
    a726:	b2db      	uxtb	r3, r3
			endingIndex = startingIndex + 16;
    a728:	001a      	movs	r2, r3
    a72a:	3210      	adds	r2, #16
    a72c:	b2d2      	uxtb	r2, r2
    a72e:	4690      	mov	r8, r2
			for (i = startingIndex; i < endingIndex; i++)
    a730:	4293      	cmp	r3, r2
    a732:	d25f      	bcs.n	a7f4 <LORAREG_GetAttr_DRangeChBandT1+0x118>
				if ((RegParams.pChParams[i].dataRange.min < auxMinDataRate) && (((auxChannelMask & 0x0001) == 0x0001) || (auxChannelMask == 0)))
    a734:	4e32      	ldr	r6, [pc, #200]	; (a800 <LORAREG_GetAttr_DRangeChBandT1+0x124>)
    a736:	7935      	ldrb	r5, [r6, #4]
    a738:	7972      	ldrb	r2, [r6, #5]
    a73a:	0212      	lsls	r2, r2, #8
    a73c:	4315      	orrs	r5, r2
    a73e:	79b2      	ldrb	r2, [r6, #6]
    a740:	0412      	lsls	r2, r2, #16
    a742:	432a      	orrs	r2, r5
    a744:	79f5      	ldrb	r5, [r6, #7]
    a746:	062d      	lsls	r5, r5, #24
    a748:	4315      	orrs	r5, r2
    a74a:	46ac      	mov	ip, r5
    a74c:	2500      	movs	r5, #0
				if ((RegParams.pChParams[i].dataRange.max > auxMaxDataRate) && (((auxChannelMask & 0x0001) == 0x0001) || (auxChannelMask == 0)))
    a74e:	2401      	movs	r4, #1
    a750:	e00c      	b.n	a76c <LORAREG_GetAttr_DRangeChBandT1+0x90>
					auxMinDataRate = RegParams.pChParams[i].dataRange.min;
    a752:	0011      	movs	r1, r2
				if ((RegParams.pChParams[i].dataRange.max > auxMaxDataRate) && (((auxChannelMask & 0x0001) == 0x0001) || (auxChannelMask == 0)))
    a754:	7872      	ldrb	r2, [r6, #1]
    a756:	0912      	lsrs	r2, r2, #4
    a758:	42aa      	cmp	r2, r5
    a75a:	dd02      	ble.n	a762 <LORAREG_GetAttr_DRangeChBandT1+0x86>
    a75c:	423c      	tst	r4, r7
    a75e:	d011      	beq.n	a784 <LORAREG_GetAttr_DRangeChBandT1+0xa8>
					auxMaxDataRate = RegParams.pChParams[i].dataRange.max;
    a760:	0015      	movs	r5, r2
				auxChannelMask = auxChannelMask >> SHIFT1;
    a762:	087f      	lsrs	r7, r7, #1
			for (i = startingIndex; i < endingIndex; i++)
    a764:	3301      	adds	r3, #1
    a766:	b2db      	uxtb	r3, r3
    a768:	4598      	cmp	r8, r3
    a76a:	d013      	beq.n	a794 <LORAREG_GetAttr_DRangeChBandT1+0xb8>
				if ((RegParams.pChParams[i].dataRange.min < auxMinDataRate) && (((auxChannelMask & 0x0001) == 0x0001) || (auxChannelMask == 0)))
    a76c:	005e      	lsls	r6, r3, #1
    a76e:	4466      	add	r6, ip
    a770:	7872      	ldrb	r2, [r6, #1]
    a772:	0712      	lsls	r2, r2, #28
    a774:	0f12      	lsrs	r2, r2, #28
    a776:	428a      	cmp	r2, r1
    a778:	daec      	bge.n	a754 <LORAREG_GetAttr_DRangeChBandT1+0x78>
    a77a:	423c      	tst	r4, r7
    a77c:	d1e9      	bne.n	a752 <LORAREG_GetAttr_DRangeChBandT1+0x76>
    a77e:	2f00      	cmp	r7, #0
    a780:	d1ef      	bne.n	a762 <LORAREG_GetAttr_DRangeChBandT1+0x86>
    a782:	e7e6      	b.n	a752 <LORAREG_GetAttr_DRangeChBandT1+0x76>
				if ((RegParams.pChParams[i].dataRange.max > auxMaxDataRate) && (((auxChannelMask & 0x0001) == 0x0001) || (auxChannelMask == 0)))
    a784:	2f00      	cmp	r7, #0
    a786:	d0eb      	beq.n	a760 <LORAREG_GetAttr_DRangeChBandT1+0x84>
    a788:	e7eb      	b.n	a762 <LORAREG_GetAttr_DRangeChBandT1+0x86>
			auxMinDataRate = RegParams.cmnParams.paramsType1.maxTxDR;
    a78a:	23a8      	movs	r3, #168	; 0xa8
    a78c:	005b      	lsls	r3, r3, #1
    a78e:	4a1c      	ldr	r2, [pc, #112]	; (a800 <LORAREG_GetAttr_DRangeChBandT1+0x124>)
    a790:	5cd1      	ldrb	r1, [r2, r3]
			auxMaxDataRate = RegParams.cmnParams.paramsType1.maxTxDR;
    a792:	000d      	movs	r5, r1
    a794:	012d      	lsls	r5, r5, #4
    a796:	230f      	movs	r3, #15
    a798:	4019      	ands	r1, r3
    a79a:	430d      	orrs	r5, r1
		memcpy(attrOutput,&chBandDr,sizeof(DataRange_t));
    a79c:	9b01      	ldr	r3, [sp, #4]
    a79e:	701d      	strb	r5, [r3, #0]
    a7a0:	e7ac      	b.n	a6fc <LORAREG_GetAttr_DRangeChBandT1+0x20>
				if (RegParams.pChParams[i].dataRange.min < auxMinDataRate)
    a7a2:	4d17      	ldr	r5, [pc, #92]	; (a800 <LORAREG_GetAttr_DRangeChBandT1+0x124>)
    a7a4:	792b      	ldrb	r3, [r5, #4]
    a7a6:	796a      	ldrb	r2, [r5, #5]
    a7a8:	0212      	lsls	r2, r2, #8
    a7aa:	431a      	orrs	r2, r3
    a7ac:	79ab      	ldrb	r3, [r5, #6]
    a7ae:	041b      	lsls	r3, r3, #16
    a7b0:	431a      	orrs	r2, r3
    a7b2:	79eb      	ldrb	r3, [r5, #7]
    a7b4:	061b      	lsls	r3, r3, #24
    a7b6:	4313      	orrs	r3, r2
    a7b8:	001a      	movs	r2, r3
    a7ba:	3380      	adds	r3, #128	; 0x80
    a7bc:	001c      	movs	r4, r3
    a7be:	2500      	movs	r5, #0
    a7c0:	e002      	b.n	a7c8 <LORAREG_GetAttr_DRangeChBandT1+0xec>
    a7c2:	3202      	adds	r2, #2
			for (i = 0; i < 64; i++)
    a7c4:	42a2      	cmp	r2, r4
    a7c6:	d00c      	beq.n	a7e2 <LORAREG_GetAttr_DRangeChBandT1+0x106>
				if (RegParams.pChParams[i].dataRange.min < auxMinDataRate)
    a7c8:	0016      	movs	r6, r2
    a7ca:	7853      	ldrb	r3, [r2, #1]
    a7cc:	071b      	lsls	r3, r3, #28
    a7ce:	0f1b      	lsrs	r3, r3, #28
    a7d0:	428b      	cmp	r3, r1
    a7d2:	da00      	bge.n	a7d6 <LORAREG_GetAttr_DRangeChBandT1+0xfa>
					auxMinDataRate = RegParams.pChParams[i].dataRange.min;
    a7d4:	0019      	movs	r1, r3
				if (RegParams.pChParams[i].dataRange.max > auxMaxDataRate)
    a7d6:	7873      	ldrb	r3, [r6, #1]
    a7d8:	091b      	lsrs	r3, r3, #4
    a7da:	42ab      	cmp	r3, r5
    a7dc:	ddf1      	ble.n	a7c2 <LORAREG_GetAttr_DRangeChBandT1+0xe6>
					auxMaxDataRate = RegParams.pChParams[i].dataRange.max;
    a7de:	001d      	movs	r5, r3
    a7e0:	e7ef      	b.n	a7c2 <LORAREG_GetAttr_DRangeChBandT1+0xe6>
			if (channelMask != 0)    // if there is at least one channel enabled with DR4
    a7e2:	2f00      	cmp	r7, #0
    a7e4:	d0d6      	beq.n	a794 <LORAREG_GetAttr_DRangeChBandT1+0xb8>
				auxMaxDataRate = RegParams.cmnParams.paramsType1.maxTxDR;
    a7e6:	23a8      	movs	r3, #168	; 0xa8
    a7e8:	005b      	lsls	r3, r3, #1
    a7ea:	4a05      	ldr	r2, [pc, #20]	; (a800 <LORAREG_GetAttr_DRangeChBandT1+0x124>)
    a7ec:	5cd5      	ldrb	r5, [r2, r3]
    a7ee:	e7d1      	b.n	a794 <LORAREG_GetAttr_DRangeChBandT1+0xb8>
	uint8_t auxMinDataRate = DR7, auxMaxDataRate = DR0, i;
    a7f0:	2500      	movs	r5, #0
    a7f2:	e7cf      	b.n	a794 <LORAREG_GetAttr_DRangeChBandT1+0xb8>
    a7f4:	2500      	movs	r5, #0
    a7f6:	e7cd      	b.n	a794 <LORAREG_GetAttr_DRangeChBandT1+0xb8>
    a7f8:	00019da5 	.word	0x00019da5
    a7fc:	00009b5d 	.word	0x00009b5d
    a800:	200024d0 	.word	0x200024d0
    a804:	000201b0 	.word	0x000201b0

0000a808 <LORAREG_GetAttr_DefRx2Freq>:
{
    a808:	b510      	push	{r4, lr}
    a80a:	0010      	movs	r0, r2
	memcpy(attrOutput,&RegParams.DefRx2Freq,sizeof(uint32_t));
    a80c:	2204      	movs	r2, #4
    a80e:	4902      	ldr	r1, [pc, #8]	; (a818 <LORAREG_GetAttr_DefRx2Freq+0x10>)
    a810:	4b02      	ldr	r3, [pc, #8]	; (a81c <LORAREG_GetAttr_DefRx2Freq+0x14>)
    a812:	4798      	blx	r3
}
    a814:	2008      	movs	r0, #8
    a816:	bd10      	pop	{r4, pc}
    a818:	200024ec 	.word	0x200024ec
    a81c:	00019da5 	.word	0x00019da5

0000a820 <LORAREG_GetAttr_DlFrequency>:
{
    a820:	b510      	push	{r4, lr}
    a822:	0013      	movs	r3, r2
	channelId = *(uint8_t *)attrInput;
    a824:	780a      	ldrb	r2, [r1, #0]
	if (channelId > RegParams.maxChannels)
    a826:	212a      	movs	r1, #42	; 0x2a
    a828:	480d      	ldr	r0, [pc, #52]	; (a860 <LORAREG_GetAttr_DlFrequency+0x40>)
    a82a:	5641      	ldrsb	r1, [r0, r1]
		result = LORAWAN_INVALID_PARAMETER;
    a82c:	200a      	movs	r0, #10
	if (channelId > RegParams.maxChannels)
    a82e:	428a      	cmp	r2, r1
    a830:	dd00      	ble.n	a834 <LORAREG_GetAttr_DlFrequency+0x14>
}
    a832:	bd10      	pop	{r4, pc}
		memcpy(attrOutput,&(RegParams.pOtherChParams[channelId].rx1Frequency),sizeof(uint32_t));
    a834:	4c0a      	ldr	r4, [pc, #40]	; (a860 <LORAREG_GetAttr_DlFrequency+0x40>)
    a836:	7a21      	ldrb	r1, [r4, #8]
    a838:	7a60      	ldrb	r0, [r4, #9]
    a83a:	0200      	lsls	r0, r0, #8
    a83c:	4308      	orrs	r0, r1
    a83e:	7aa1      	ldrb	r1, [r4, #10]
    a840:	0409      	lsls	r1, r1, #16
    a842:	4308      	orrs	r0, r1
    a844:	7ae1      	ldrb	r1, [r4, #11]
    a846:	0609      	lsls	r1, r1, #24
    a848:	4301      	orrs	r1, r0
    a84a:	0050      	lsls	r0, r2, #1
    a84c:	1882      	adds	r2, r0, r2
    a84e:	0092      	lsls	r2, r2, #2
    a850:	1889      	adds	r1, r1, r2
    a852:	3104      	adds	r1, #4
    a854:	2204      	movs	r2, #4
    a856:	0018      	movs	r0, r3
    a858:	4b02      	ldr	r3, [pc, #8]	; (a864 <LORAREG_GetAttr_DlFrequency+0x44>)
    a85a:	4798      	blx	r3
	StackRetStatus_t result = LORAWAN_SUCCESS;
    a85c:	2008      	movs	r0, #8
    a85e:	e7e8      	b.n	a832 <LORAREG_GetAttr_DlFrequency+0x12>
    a860:	200024d0 	.word	0x200024d0
    a864:	00019da5 	.word	0x00019da5

0000a868 <LORAREG_GetAttr_DutyCycleTimer>:
{
    a868:	b5f0      	push	{r4, r5, r6, r7, lr}
    a86a:	46d6      	mov	lr, sl
    a86c:	464f      	mov	r7, r9
    a86e:	4646      	mov	r6, r8
    a870:	b5c0      	push	{r6, r7, lr}
    a872:	b084      	sub	sp, #16
    a874:	9200      	str	r2, [sp, #0]
    currentDataRate = *(uint8_t *)attrInput;
    a876:	780b      	ldrb	r3, [r1, #0]
    a878:	469c      	mov	ip, r3
    for (uint8_t i = 0; i < RegParams.maxChannels; i++)
    a87a:	232a      	movs	r3, #42	; 0x2a
    a87c:	4a5b      	ldr	r2, [pc, #364]	; (a9ec <LORAREG_GetAttr_DutyCycleTimer+0x184>)
    a87e:	56d6      	ldrsb	r6, [r2, r3]
    a880:	2e00      	cmp	r6, #0
    a882:	dd66      	ble.n	a952 <LORAREG_GetAttr_DutyCycleTimer+0xea>
	    if ( (RegParams.pChParams[i].status == ENABLED) )
    a884:	0013      	movs	r3, r2
    a886:	7910      	ldrb	r0, [r2, #4]
    a888:	7952      	ldrb	r2, [r2, #5]
    a88a:	0212      	lsls	r2, r2, #8
    a88c:	4302      	orrs	r2, r0
    a88e:	7998      	ldrb	r0, [r3, #6]
    a890:	0400      	lsls	r0, r0, #16
    a892:	4302      	orrs	r2, r0
    a894:	79d8      	ldrb	r0, [r3, #7]
    a896:	0600      	lsls	r0, r0, #24
    a898:	4310      	orrs	r0, r2
		    if((RegParams.pSubBandParams[bandId].subBandTimeout != 0) && 
    a89a:	7b1f      	ldrb	r7, [r3, #12]
    a89c:	7b5a      	ldrb	r2, [r3, #13]
    a89e:	0212      	lsls	r2, r2, #8
    a8a0:	433a      	orrs	r2, r7
    a8a2:	7b9f      	ldrb	r7, [r3, #14]
    a8a4:	043f      	lsls	r7, r7, #16
    a8a6:	433a      	orrs	r2, r7
    a8a8:	7bdf      	ldrb	r7, [r3, #15]
    a8aa:	063f      	lsls	r7, r7, #24
    a8ac:	4317      	orrs	r7, r2
    a8ae:	2500      	movs	r5, #0
    a8b0:	2300      	movs	r3, #0
    a8b2:	2201      	movs	r2, #1
    a8b4:	4252      	negs	r2, r2
    a8b6:	4691      	mov	r9, r2
		    bandId = RegParams.cmnParams.paramsType2.othChParams[i].subBandId;
    a8b8:	4a4c      	ldr	r2, [pc, #304]	; (a9ec <LORAREG_GetAttr_DutyCycleTimer+0x184>)
    a8ba:	4690      	mov	r8, r2
			   (currentDataRate >= RegParams.pChParams[i].dataRange.min) && 
    a8bc:	4662      	mov	r2, ip
    a8be:	9201      	str	r2, [sp, #4]
    a8c0:	e004      	b.n	a8cc <LORAREG_GetAttr_DutyCycleTimer+0x64>
    for (uint8_t i = 0; i < RegParams.maxChannels; i++)
    a8c2:	3301      	adds	r3, #1
    a8c4:	b2db      	uxtb	r3, r3
    a8c6:	001d      	movs	r5, r3
    a8c8:	42b3      	cmp	r3, r6
    a8ca:	da27      	bge.n	a91c <LORAREG_GetAttr_DutyCycleTimer+0xb4>
	    if ( (RegParams.pChParams[i].status == ENABLED) )
    a8cc:	0059      	lsls	r1, r3, #1
    a8ce:	1841      	adds	r1, r0, r1
    a8d0:	780a      	ldrb	r2, [r1, #0]
    a8d2:	2a00      	cmp	r2, #0
    a8d4:	d0f5      	beq.n	a8c2 <LORAREG_GetAttr_DutyCycleTimer+0x5a>
		    bandId = RegParams.cmnParams.paramsType2.othChParams[i].subBandId;
    a8d6:	006a      	lsls	r2, r5, #1
    a8d8:	1952      	adds	r2, r2, r5
    a8da:	0092      	lsls	r2, r2, #2
    a8dc:	4442      	add	r2, r8
    a8de:	32ab      	adds	r2, #171	; 0xab
		    if((RegParams.pSubBandParams[bandId].subBandTimeout != 0) && 
    a8e0:	7815      	ldrb	r5, [r2, #0]
    a8e2:	006a      	lsls	r2, r5, #1
    a8e4:	1952      	adds	r2, r2, r5
    a8e6:	0092      	lsls	r2, r2, #2
    a8e8:	18ba      	adds	r2, r7, r2
    a8ea:	7a15      	ldrb	r5, [r2, #8]
    a8ec:	7a54      	ldrb	r4, [r2, #9]
    a8ee:	0224      	lsls	r4, r4, #8
    a8f0:	4325      	orrs	r5, r4
    a8f2:	7a94      	ldrb	r4, [r2, #10]
    a8f4:	0424      	lsls	r4, r4, #16
    a8f6:	4325      	orrs	r5, r4
    a8f8:	7ad2      	ldrb	r2, [r2, #11]
    a8fa:	0612      	lsls	r2, r2, #24
    a8fc:	432a      	orrs	r2, r5
    a8fe:	d0e0      	beq.n	a8c2 <LORAREG_GetAttr_DutyCycleTimer+0x5a>
    a900:	454a      	cmp	r2, r9
    a902:	d8de      	bhi.n	a8c2 <LORAREG_GetAttr_DutyCycleTimer+0x5a>
			   (currentDataRate >= RegParams.pChParams[i].dataRange.min) && 
    a904:	784d      	ldrb	r5, [r1, #1]
    a906:	072d      	lsls	r5, r5, #28
    a908:	0f2d      	lsrs	r5, r5, #28
			   (RegParams.pSubBandParams[bandId].subBandTimeout <= minimSubBandTimer) && 
    a90a:	45ac      	cmp	ip, r5
    a90c:	dbd9      	blt.n	a8c2 <LORAREG_GetAttr_DutyCycleTimer+0x5a>
			   (currentDataRate <= RegParams.pChParams[i].dataRange.max) )
    a90e:	7849      	ldrb	r1, [r1, #1]
    a910:	0909      	lsrs	r1, r1, #4
			   (currentDataRate >= RegParams.pChParams[i].dataRange.min) && 
    a912:	9c01      	ldr	r4, [sp, #4]
    a914:	428c      	cmp	r4, r1
    a916:	dcd4      	bgt.n	a8c2 <LORAREG_GetAttr_DutyCycleTimer+0x5a>
			    minimSubBandTimer = RegParams.pSubBandParams[bandId].subBandTimeout;
    a918:	4691      	mov	r9, r2
    a91a:	e7d2      	b.n	a8c2 <LORAREG_GetAttr_DutyCycleTimer+0x5a>
    if((UINT32_MAX != minimSubBandTimer) && (minimSubBandTimer >= RegParams.cmnParams.paramsType2.aggregatedDutyCycleTimeout))
    a91c:	464b      	mov	r3, r9
    a91e:	3301      	adds	r3, #1
    a920:	d017      	beq.n	a952 <LORAREG_GetAttr_DutyCycleTimer+0xea>
    a922:	4932      	ldr	r1, [pc, #200]	; (a9ec <LORAREG_GetAttr_DutyCycleTimer+0x184>)
    a924:	23ba      	movs	r3, #186	; 0xba
    a926:	33ff      	adds	r3, #255	; 0xff
    a928:	5ccb      	ldrb	r3, [r1, r3]
    a92a:	22dd      	movs	r2, #221	; 0xdd
    a92c:	0052      	lsls	r2, r2, #1
    a92e:	5c8a      	ldrb	r2, [r1, r2]
    a930:	0212      	lsls	r2, r2, #8
    a932:	431a      	orrs	r2, r3
    a934:	23bc      	movs	r3, #188	; 0xbc
    a936:	33ff      	adds	r3, #255	; 0xff
    a938:	5ccb      	ldrb	r3, [r1, r3]
    a93a:	041b      	lsls	r3, r3, #16
    a93c:	431a      	orrs	r2, r3
    a93e:	23de      	movs	r3, #222	; 0xde
    a940:	005b      	lsls	r3, r3, #1
    a942:	5ccb      	ldrb	r3, [r1, r3]
    a944:	061b      	lsls	r3, r3, #24
    a946:	4313      	orrs	r3, r2
    a948:	4599      	cmp	r9, r3
    a94a:	d302      	bcc.n	a952 <LORAREG_GetAttr_DutyCycleTimer+0xea>
	    minDutyCycleTimer = minimSubBandTimer;
    a94c:	464b      	mov	r3, r9
    a94e:	9303      	str	r3, [sp, #12]
    a950:	e013      	b.n	a97a <LORAREG_GetAttr_DutyCycleTimer+0x112>
	    minDutyCycleTimer = RegParams.cmnParams.paramsType2.aggregatedDutyCycleTimeout;
    a952:	4926      	ldr	r1, [pc, #152]	; (a9ec <LORAREG_GetAttr_DutyCycleTimer+0x184>)
    a954:	23ba      	movs	r3, #186	; 0xba
    a956:	33ff      	adds	r3, #255	; 0xff
    a958:	5ccb      	ldrb	r3, [r1, r3]
    a95a:	22dd      	movs	r2, #221	; 0xdd
    a95c:	0052      	lsls	r2, r2, #1
    a95e:	5c8a      	ldrb	r2, [r1, r2]
    a960:	0212      	lsls	r2, r2, #8
    a962:	431a      	orrs	r2, r3
    a964:	23bc      	movs	r3, #188	; 0xbc
    a966:	33ff      	adds	r3, #255	; 0xff
    a968:	5ccb      	ldrb	r3, [r1, r3]
    a96a:	041b      	lsls	r3, r3, #16
    a96c:	431a      	orrs	r2, r3
    a96e:	23de      	movs	r3, #222	; 0xde
    a970:	005b      	lsls	r3, r3, #1
    a972:	5ccb      	ldrb	r3, [r1, r3]
    a974:	061b      	lsls	r3, r3, #24
    a976:	4313      	orrs	r3, r2
    a978:	9303      	str	r3, [sp, #12]
    ticks = SwTimerReadValue (RegParams.pDutyCycleTimer->timerId);
    a97a:	491c      	ldr	r1, [pc, #112]	; (a9ec <LORAREG_GetAttr_DutyCycleTimer+0x184>)
    a97c:	7c0b      	ldrb	r3, [r1, #16]
    a97e:	7c4a      	ldrb	r2, [r1, #17]
    a980:	0212      	lsls	r2, r2, #8
    a982:	431a      	orrs	r2, r3
    a984:	7c8b      	ldrb	r3, [r1, #18]
    a986:	041b      	lsls	r3, r3, #16
    a988:	431a      	orrs	r2, r3
    a98a:	7ccb      	ldrb	r3, [r1, #19]
    a98c:	061b      	lsls	r3, r3, #24
    a98e:	4313      	orrs	r3, r2
    a990:	7918      	ldrb	r0, [r3, #4]
    a992:	4b17      	ldr	r3, [pc, #92]	; (a9f0 <LORAREG_GetAttr_DutyCycleTimer+0x188>)
    a994:	4798      	blx	r3
	if( minDutyCycleTimer != 0)
    a996:	9e03      	ldr	r6, [sp, #12]
    a998:	2e00      	cmp	r6, #0
    a99a:	d01b      	beq.n	a9d4 <LORAREG_GetAttr_DutyCycleTimer+0x16c>
    delta = RegParams.pDutyCycleTimer->lastTimerValue - US_TO_MS(ticks);
    a99c:	4913      	ldr	r1, [pc, #76]	; (a9ec <LORAREG_GetAttr_DutyCycleTimer+0x184>)
    a99e:	7c0b      	ldrb	r3, [r1, #16]
    a9a0:	7c4a      	ldrb	r2, [r1, #17]
    a9a2:	0212      	lsls	r2, r2, #8
    a9a4:	431a      	orrs	r2, r3
    a9a6:	7c8b      	ldrb	r3, [r1, #18]
    a9a8:	041b      	lsls	r3, r3, #16
    a9aa:	431a      	orrs	r2, r3
    a9ac:	7ccb      	ldrb	r3, [r1, #19]
    a9ae:	061b      	lsls	r3, r3, #24
    a9b0:	4313      	orrs	r3, r2
    a9b2:	781d      	ldrb	r5, [r3, #0]
    a9b4:	785a      	ldrb	r2, [r3, #1]
    a9b6:	0212      	lsls	r2, r2, #8
    a9b8:	432a      	orrs	r2, r5
    a9ba:	789d      	ldrb	r5, [r3, #2]
    a9bc:	042d      	lsls	r5, r5, #16
    a9be:	432a      	orrs	r2, r5
    a9c0:	78dd      	ldrb	r5, [r3, #3]
    a9c2:	062d      	lsls	r5, r5, #24
    a9c4:	4315      	orrs	r5, r2
    a9c6:	21fa      	movs	r1, #250	; 0xfa
    a9c8:	0089      	lsls	r1, r1, #2
    a9ca:	4b0a      	ldr	r3, [pc, #40]	; (a9f4 <LORAREG_GetAttr_DutyCycleTimer+0x18c>)
    a9cc:	4798      	blx	r3
    a9ce:	1a2d      	subs	r5, r5, r0
		minDutyCycleTimer = minDutyCycleTimer - delta; //Logically delta will not be greater than minDcTimer
    a9d0:	1b75      	subs	r5, r6, r5
    a9d2:	9503      	str	r5, [sp, #12]
    memcpy(attrOutput,&minDutyCycleTimer,sizeof(uint32_t));
    a9d4:	2204      	movs	r2, #4
    a9d6:	a903      	add	r1, sp, #12
    a9d8:	9800      	ldr	r0, [sp, #0]
    a9da:	4b07      	ldr	r3, [pc, #28]	; (a9f8 <LORAREG_GetAttr_DutyCycleTimer+0x190>)
    a9dc:	4798      	blx	r3
}
    a9de:	2008      	movs	r0, #8
    a9e0:	b004      	add	sp, #16
    a9e2:	bc1c      	pop	{r2, r3, r4}
    a9e4:	4690      	mov	r8, r2
    a9e6:	4699      	mov	r9, r3
    a9e8:	46a2      	mov	sl, r4
    a9ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
    a9ec:	200024d0 	.word	0x200024d0
    a9f0:	0000efd5 	.word	0x0000efd5
    a9f4:	00016641 	.word	0x00016641
    a9f8:	00019da5 	.word	0x00019da5

0000a9fc <LORAREG_GetAttr_Rx1WindowparamsType2>:
{
    a9fc:	b500      	push	{lr}
    a9fe:	b083      	sub	sp, #12
    aa00:	0010      	movs	r0, r2
	memcpy(&rx1WindowParamsReq,(Rx1WindowParamsReq_t *)attrInput,sizeof(Rx1WindowParamsReq_t));
    aa02:	784a      	ldrb	r2, [r1, #1]
    aa04:	788b      	ldrb	r3, [r1, #2]
    if (rx1WindowParamReq->currDr >= rx1WindowParamReq->drOffset)
    aa06:	429a      	cmp	r2, r3
    aa08:	d925      	bls.n	aa56 <LORAREG_GetAttr_Rx1WindowparamsType2+0x5a>
        rx1WindowParams->rx1Dr = DR0;
    aa0a:	2300      	movs	r3, #0
    aa0c:	466a      	mov	r2, sp
    aa0e:	7113      	strb	r3, [r2, #4]
	rx1WindowParams->rx1Freq = RegParams.pOtherChParams[RegParams.lastUsedChannelIndex].rx1Frequency;			
    aa10:	4913      	ldr	r1, [pc, #76]	; (aa60 <LORAREG_GetAttr_Rx1WindowparamsType2+0x64>)
    aa12:	7a0b      	ldrb	r3, [r1, #8]
    aa14:	7a4a      	ldrb	r2, [r1, #9]
    aa16:	0212      	lsls	r2, r2, #8
    aa18:	4313      	orrs	r3, r2
    aa1a:	7a8a      	ldrb	r2, [r1, #10]
    aa1c:	0412      	lsls	r2, r2, #16
    aa1e:	431a      	orrs	r2, r3
    aa20:	7acb      	ldrb	r3, [r1, #11]
    aa22:	061b      	lsls	r3, r3, #24
    aa24:	431a      	orrs	r2, r3
    aa26:	232f      	movs	r3, #47	; 0x2f
    aa28:	5cc9      	ldrb	r1, [r1, r3]
    aa2a:	004b      	lsls	r3, r1, #1
    aa2c:	185b      	adds	r3, r3, r1
    aa2e:	009b      	lsls	r3, r3, #2
    aa30:	189b      	adds	r3, r3, r2
    aa32:	7919      	ldrb	r1, [r3, #4]
    aa34:	795a      	ldrb	r2, [r3, #5]
    aa36:	0212      	lsls	r2, r2, #8
    aa38:	4311      	orrs	r1, r2
    aa3a:	799a      	ldrb	r2, [r3, #6]
    aa3c:	0412      	lsls	r2, r2, #16
    aa3e:	430a      	orrs	r2, r1
    aa40:	79db      	ldrb	r3, [r3, #7]
    aa42:	061b      	lsls	r3, r3, #24
    aa44:	4313      	orrs	r3, r2
    aa46:	9300      	str	r3, [sp, #0]
	memcpy(attrOutput,&rx1WindowParamsResp,sizeof(Rx1WindowParams_t));
    aa48:	2208      	movs	r2, #8
    aa4a:	4669      	mov	r1, sp
    aa4c:	4b05      	ldr	r3, [pc, #20]	; (aa64 <LORAREG_GetAttr_Rx1WindowparamsType2+0x68>)
    aa4e:	4798      	blx	r3
}
    aa50:	2008      	movs	r0, #8
    aa52:	b003      	add	sp, #12
    aa54:	bd00      	pop	{pc}
        rx1WindowParams->rx1Dr = rx1WindowParamReq->currDr - rx1WindowParamReq->drOffset;
    aa56:	1a9b      	subs	r3, r3, r2
    aa58:	466a      	mov	r2, sp
    aa5a:	7113      	strb	r3, [r2, #4]
    aa5c:	e7d8      	b.n	aa10 <LORAREG_GetAttr_Rx1WindowparamsType2+0x14>
    aa5e:	46c0      	nop			; (mov r8, r8)
    aa60:	200024d0 	.word	0x200024d0
    aa64:	00019da5 	.word	0x00019da5

0000aa68 <LORAREG_GetAttr_DRangeChBandT2>:
{
    aa68:	b5f0      	push	{r4, r5, r6, r7, lr}
    aa6a:	46c6      	mov	lr, r8
    aa6c:	b500      	push	{lr}
    aa6e:	b082      	sub	sp, #8
    aa70:	4690      	mov	r8, r2
	memcpy(&bandDrReq,(BandDrReq_t *)attrInput,sizeof(BandDrReq_t));
    aa72:	ad01      	add	r5, sp, #4
    aa74:	2204      	movs	r2, #4
    aa76:	0028      	movs	r0, r5
    aa78:	4b38      	ldr	r3, [pc, #224]	; (ab5c <LORAREG_GetAttr_DRangeChBandT2+0xf4>)
    aa7a:	4798      	blx	r3
	switch (chMaskCntl)
    aa7c:	782b      	ldrb	r3, [r5, #0]
    aa7e:	2b00      	cmp	r3, #0
    aa80:	d017      	beq.n	aab2 <LORAREG_GetAttr_DRangeChBandT2+0x4a>
    aa82:	2b06      	cmp	r3, #6
    aa84:	d159      	bne.n	ab3a <LORAREG_GetAttr_DRangeChBandT2+0xd2>
			for (i = 0; i < RegParams.maxChannels; i++)
    aa86:	3324      	adds	r3, #36	; 0x24
    aa88:	4a35      	ldr	r2, [pc, #212]	; (ab60 <LORAREG_GetAttr_DRangeChBandT2+0xf8>)
    aa8a:	56d7      	ldrsb	r7, [r2, r3]
    aa8c:	2000      	movs	r0, #0
    aa8e:	2507      	movs	r5, #7
    aa90:	2f00      	cmp	r7, #0
    aa92:	dd54      	ble.n	ab3e <LORAREG_GetAttr_DRangeChBandT2+0xd6>
				if (RegParams.pChParams[i].dataRange.min < auxMinDataRate)
    aa94:	4a32      	ldr	r2, [pc, #200]	; (ab60 <LORAREG_GetAttr_DRangeChBandT2+0xf8>)
    aa96:	7916      	ldrb	r6, [r2, #4]
    aa98:	7953      	ldrb	r3, [r2, #5]
    aa9a:	021b      	lsls	r3, r3, #8
    aa9c:	4333      	orrs	r3, r6
    aa9e:	7996      	ldrb	r6, [r2, #6]
    aaa0:	0436      	lsls	r6, r6, #16
    aaa2:	4333      	orrs	r3, r6
    aaa4:	79d6      	ldrb	r6, [r2, #7]
    aaa6:	0636      	lsls	r6, r6, #24
    aaa8:	431e      	orrs	r6, r3
    aaaa:	2000      	movs	r0, #0
    aaac:	2507      	movs	r5, #7
    aaae:	2200      	movs	r2, #0
    aab0:	e035      	b.n	ab1e <LORAREG_GetAttr_DRangeChBandT2+0xb6>
			for (i = 0; i < RegParams.maxChannels; i++)
    aab2:	232a      	movs	r3, #42	; 0x2a
    aab4:	4a2a      	ldr	r2, [pc, #168]	; (ab60 <LORAREG_GetAttr_DRangeChBandT2+0xf8>)
    aab6:	56d3      	ldrsb	r3, [r2, r3]
    aab8:	469c      	mov	ip, r3
    aaba:	2b00      	cmp	r3, #0
    aabc:	dd4a      	ble.n	ab54 <LORAREG_GetAttr_DRangeChBandT2+0xec>
		chBandDr = getChBandDrT2(bandDrReq.chnlMaskCntl,bandDrReq.chnlMask);
    aabe:	ab01      	add	r3, sp, #4
    aac0:	885e      	ldrh	r6, [r3, #2]
				if ((RegParams.pChParams[i].dataRange.min < auxMinDataRate) && ((auxChannelMask & 0x0001) == 0x0001))
    aac2:	7917      	ldrb	r7, [r2, #4]
    aac4:	7953      	ldrb	r3, [r2, #5]
    aac6:	021b      	lsls	r3, r3, #8
    aac8:	433b      	orrs	r3, r7
    aaca:	7997      	ldrb	r7, [r2, #6]
    aacc:	043f      	lsls	r7, r7, #16
    aace:	433b      	orrs	r3, r7
    aad0:	79d7      	ldrb	r7, [r2, #7]
    aad2:	063f      	lsls	r7, r7, #24
    aad4:	431f      	orrs	r7, r3
    aad6:	2000      	movs	r0, #0
    aad8:	2507      	movs	r5, #7
    aada:	2200      	movs	r2, #0
				if ((RegParams.pChParams[i].dataRange.max > auxMaxDataRate) && ((auxChannelMask & 0x0001) == 0x0001))
    aadc:	2401      	movs	r4, #1
    aade:	e00b      	b.n	aaf8 <LORAREG_GetAttr_DRangeChBandT2+0x90>
    aae0:	784b      	ldrb	r3, [r1, #1]
    aae2:	091b      	lsrs	r3, r3, #4
    aae4:	4283      	cmp	r3, r0
    aae6:	dd02      	ble.n	aaee <LORAREG_GetAttr_DRangeChBandT2+0x86>
    aae8:	4234      	tst	r4, r6
    aaea:	d000      	beq.n	aaee <LORAREG_GetAttr_DRangeChBandT2+0x86>
					auxMaxDataRate = RegParams.pChParams[i].dataRange.max;
    aaec:	0018      	movs	r0, r3
				auxChannelMask = auxChannelMask >> SHIFT1;
    aaee:	0876      	lsrs	r6, r6, #1
			for (i = 0; i < RegParams.maxChannels; i++)
    aaf0:	3201      	adds	r2, #1
    aaf2:	b2d2      	uxtb	r2, r2
    aaf4:	4562      	cmp	r2, ip
    aaf6:	da22      	bge.n	ab3e <LORAREG_GetAttr_DRangeChBandT2+0xd6>
				if ((RegParams.pChParams[i].dataRange.min < auxMinDataRate) && ((auxChannelMask & 0x0001) == 0x0001))
    aaf8:	0051      	lsls	r1, r2, #1
    aafa:	1879      	adds	r1, r7, r1
    aafc:	784b      	ldrb	r3, [r1, #1]
    aafe:	071b      	lsls	r3, r3, #28
    ab00:	0f1b      	lsrs	r3, r3, #28
    ab02:	42ab      	cmp	r3, r5
    ab04:	daec      	bge.n	aae0 <LORAREG_GetAttr_DRangeChBandT2+0x78>
    ab06:	4234      	tst	r4, r6
    ab08:	d0f1      	beq.n	aaee <LORAREG_GetAttr_DRangeChBandT2+0x86>
					auxMinDataRate = RegParams.pChParams[i].dataRange.min;
    ab0a:	001d      	movs	r5, r3
				if ((RegParams.pChParams[i].dataRange.max > auxMaxDataRate) && ((auxChannelMask & 0x0001) == 0x0001))
    ab0c:	784b      	ldrb	r3, [r1, #1]
    ab0e:	091b      	lsrs	r3, r3, #4
    ab10:	4298      	cmp	r0, r3
    ab12:	dbeb      	blt.n	aaec <LORAREG_GetAttr_DRangeChBandT2+0x84>
    ab14:	e7eb      	b.n	aaee <LORAREG_GetAttr_DRangeChBandT2+0x86>
			for (i = 0; i < RegParams.maxChannels; i++)
    ab16:	3201      	adds	r2, #1
    ab18:	b2d2      	uxtb	r2, r2
    ab1a:	42ba      	cmp	r2, r7
    ab1c:	da0f      	bge.n	ab3e <LORAREG_GetAttr_DRangeChBandT2+0xd6>
				if (RegParams.pChParams[i].dataRange.min < auxMinDataRate)
    ab1e:	0051      	lsls	r1, r2, #1
    ab20:	1871      	adds	r1, r6, r1
    ab22:	784b      	ldrb	r3, [r1, #1]
    ab24:	071b      	lsls	r3, r3, #28
    ab26:	0f1b      	lsrs	r3, r3, #28
    ab28:	42ab      	cmp	r3, r5
    ab2a:	da00      	bge.n	ab2e <LORAREG_GetAttr_DRangeChBandT2+0xc6>
					auxMinDataRate = RegParams.pChParams[i].dataRange.min;
    ab2c:	001d      	movs	r5, r3
				if (RegParams.pChParams[i].dataRange.max > auxMaxDataRate)
    ab2e:	784b      	ldrb	r3, [r1, #1]
    ab30:	091b      	lsrs	r3, r3, #4
    ab32:	4283      	cmp	r3, r0
    ab34:	ddef      	ble.n	ab16 <LORAREG_GetAttr_DRangeChBandT2+0xae>
					auxMaxDataRate = RegParams.pChParams[i].dataRange.max;
    ab36:	0018      	movs	r0, r3
    ab38:	e7ed      	b.n	ab16 <LORAREG_GetAttr_DRangeChBandT2+0xae>
			auxMaxDataRate = 0xFF;
    ab3a:	20ff      	movs	r0, #255	; 0xff
			auxMinDataRate = 0xFF;
    ab3c:	25ff      	movs	r5, #255	; 0xff
    ab3e:	0100      	lsls	r0, r0, #4
    ab40:	230f      	movs	r3, #15
    ab42:	401d      	ands	r5, r3
    ab44:	4328      	orrs	r0, r5
		memcpy(attrOutput,&chBandDr,sizeof(DataRange_t));
    ab46:	4643      	mov	r3, r8
    ab48:	7018      	strb	r0, [r3, #0]
}
    ab4a:	2008      	movs	r0, #8
    ab4c:	b002      	add	sp, #8
    ab4e:	bc04      	pop	{r2}
    ab50:	4690      	mov	r8, r2
    ab52:	bdf0      	pop	{r4, r5, r6, r7, pc}
			for (i = 0; i < RegParams.maxChannels; i++)
    ab54:	2000      	movs	r0, #0
    ab56:	2507      	movs	r5, #7
    ab58:	e7f1      	b.n	ab3e <LORAREG_GetAttr_DRangeChBandT2+0xd6>
    ab5a:	46c0      	nop			; (mov r8, r8)
    ab5c:	00019da5 	.word	0x00019da5
    ab60:	200024d0 	.word	0x200024d0

0000ab64 <LORAREG_GetAttr_FreqT2>:
{
    ab64:	b510      	push	{r4, lr}
    ab66:	0014      	movs	r4, r2
	channelId = *(uint8_t *)attrInput;
    ab68:	780b      	ldrb	r3, [r1, #0]
	if(channelId > RegParams.maxChannels)
    ab6a:	222a      	movs	r2, #42	; 0x2a
    ab6c:	490d      	ldr	r1, [pc, #52]	; (aba4 <LORAREG_GetAttr_FreqT2+0x40>)
    ab6e:	568a      	ldrsb	r2, [r1, r2]
		return LORAWAN_INVALID_PARAMETER;
    ab70:	200a      	movs	r0, #10
	if(channelId > RegParams.maxChannels)
    ab72:	4293      	cmp	r3, r2
    ab74:	dd00      	ble.n	ab78 <LORAREG_GetAttr_FreqT2+0x14>
}
    ab76:	bd10      	pop	{r4, pc}
		memcpy(attrOutput,(&RegParams.pOtherChParams[channelId].ulfrequency),sizeof(uint32_t));
    ab78:	0008      	movs	r0, r1
    ab7a:	7a09      	ldrb	r1, [r1, #8]
    ab7c:	7a42      	ldrb	r2, [r0, #9]
    ab7e:	0212      	lsls	r2, r2, #8
    ab80:	430a      	orrs	r2, r1
    ab82:	7a81      	ldrb	r1, [r0, #10]
    ab84:	0409      	lsls	r1, r1, #16
    ab86:	430a      	orrs	r2, r1
    ab88:	7ac1      	ldrb	r1, [r0, #11]
    ab8a:	0609      	lsls	r1, r1, #24
    ab8c:	4311      	orrs	r1, r2
    ab8e:	005a      	lsls	r2, r3, #1
    ab90:	18d3      	adds	r3, r2, r3
    ab92:	009b      	lsls	r3, r3, #2
    ab94:	18c9      	adds	r1, r1, r3
    ab96:	2204      	movs	r2, #4
    ab98:	0020      	movs	r0, r4
    ab9a:	4b03      	ldr	r3, [pc, #12]	; (aba8 <LORAREG_GetAttr_FreqT2+0x44>)
    ab9c:	4798      	blx	r3
	return result;
    ab9e:	2008      	movs	r0, #8
    aba0:	e7e9      	b.n	ab76 <LORAREG_GetAttr_FreqT2+0x12>
    aba2:	46c0      	nop			; (mov r8, r8)
    aba4:	200024d0 	.word	0x200024d0
    aba8:	00019da5 	.word	0x00019da5

0000abac <LORAREG_GetAttr_Rx1WindowparamsType4>:
{
    abac:	b510      	push	{r4, lr}
    abae:	b082      	sub	sp, #8
    abb0:	0010      	movs	r0, r2
	if((((1 << RegParams.band) & (ISM_ASBAND)) || ((1 << RegParams.band) & (1 << ISM_JPN923)) != 0) &&  rx1WindowParamReq->joining)
    abb2:	232e      	movs	r3, #46	; 0x2e
    abb4:	4a37      	ldr	r2, [pc, #220]	; (ac94 <LORAREG_GetAttr_Rx1WindowparamsType4+0xe8>)
    abb6:	5cd2      	ldrb	r2, [r2, r3]
    abb8:	4b37      	ldr	r3, [pc, #220]	; (ac98 <LORAREG_GetAttr_Rx1WindowparamsType4+0xec>)
    abba:	4113      	asrs	r3, r2
    abbc:	07db      	lsls	r3, r3, #31
    abbe:	d502      	bpl.n	abc6 <LORAREG_GetAttr_Rx1WindowparamsType4+0x1a>
    abc0:	780b      	ldrb	r3, [r1, #0]
    abc2:	2b00      	cmp	r3, #0
    abc4:	d116      	bne.n	abf4 <LORAREG_GetAttr_Rx1WindowparamsType4+0x48>
	if(RegParams.cmnParams.paramsType2.txParams.downlinkDwellTime == 1)
    abc6:	23e1      	movs	r3, #225	; 0xe1
    abc8:	005b      	lsls	r3, r3, #1
    abca:	4a32      	ldr	r2, [pc, #200]	; (ac94 <LORAREG_GetAttr_Rx1WindowparamsType4+0xe8>)
    abcc:	5cd4      	ldrb	r4, [r2, r3]
		minDR = DR2;
    abce:	3bc1      	subs	r3, #193	; 0xc1
    abd0:	3bff      	subs	r3, #255	; 0xff
    abd2:	401c      	ands	r4, r3
	memcpy(&rx1WindowParamsReq,(Rx1WindowParamsReq_t *)attrInput,sizeof(Rx1WindowParamsReq_t));
    abd4:	784b      	ldrb	r3, [r1, #1]
	effectiveDROffset = (rx1WindowParamReq->drOffset > maxDR) ? (maxDR - rx1WindowParamReq->drOffset) : (rx1WindowParamReq->drOffset);
    abd6:	2b05      	cmp	r3, #5
    abd8:	d92c      	bls.n	ac34 <LORAREG_GetAttr_Rx1WindowparamsType4+0x88>
    abda:	2205      	movs	r2, #5
    abdc:	1ad3      	subs	r3, r2, r3
    abde:	b25b      	sxtb	r3, r3
	memcpy(&rx1WindowParamsReq,(Rx1WindowParamsReq_t *)attrInput,sizeof(Rx1WindowParamsReq_t));
    abe0:	788a      	ldrb	r2, [r1, #2]
	if (rx1WindowParamReq->currDr >= effectiveDROffset)
    abe2:	429a      	cmp	r2, r3
    abe4:	db31      	blt.n	ac4a <LORAREG_GetAttr_Rx1WindowparamsType4+0x9e>
		rx1WindowParams->rx1Dr = rx1WindowParamReq->currDr - effectiveDROffset;
    abe6:	1ad3      	subs	r3, r2, r3
    abe8:	b2db      	uxtb	r3, r3
		if(rx1WindowParams->rx1Dr < minDR)
    abea:	42a3      	cmp	r3, r4
    abec:	d224      	bcs.n	ac38 <LORAREG_GetAttr_Rx1WindowparamsType4+0x8c>
			rx1WindowParams->rx1Dr = minDR;
    abee:	466b      	mov	r3, sp
    abf0:	711c      	strb	r4, [r3, #4]
    abf2:	e02c      	b.n	ac4e <LORAREG_GetAttr_Rx1WindowparamsType4+0xa2>
		rx1WindowParams->rx1Dr = DR2;
    abf4:	2302      	movs	r3, #2
    abf6:	466a      	mov	r2, sp
    abf8:	7113      	strb	r3, [r2, #4]
		rx1WindowParams->rx1Freq = RegParams.pOtherChParams[RegParams.lastUsedChannelIndex].rx1Frequency;
    abfa:	4926      	ldr	r1, [pc, #152]	; (ac94 <LORAREG_GetAttr_Rx1WindowparamsType4+0xe8>)
    abfc:	7a0b      	ldrb	r3, [r1, #8]
    abfe:	7a4a      	ldrb	r2, [r1, #9]
    ac00:	0212      	lsls	r2, r2, #8
    ac02:	4313      	orrs	r3, r2
    ac04:	7a8a      	ldrb	r2, [r1, #10]
    ac06:	0412      	lsls	r2, r2, #16
    ac08:	431a      	orrs	r2, r3
    ac0a:	7acb      	ldrb	r3, [r1, #11]
    ac0c:	061b      	lsls	r3, r3, #24
    ac0e:	431a      	orrs	r2, r3
    ac10:	232f      	movs	r3, #47	; 0x2f
    ac12:	5cc9      	ldrb	r1, [r1, r3]
    ac14:	004b      	lsls	r3, r1, #1
    ac16:	185b      	adds	r3, r3, r1
    ac18:	009b      	lsls	r3, r3, #2
    ac1a:	189b      	adds	r3, r3, r2
    ac1c:	7919      	ldrb	r1, [r3, #4]
    ac1e:	795a      	ldrb	r2, [r3, #5]
    ac20:	0212      	lsls	r2, r2, #8
    ac22:	4311      	orrs	r1, r2
    ac24:	799a      	ldrb	r2, [r3, #6]
    ac26:	0412      	lsls	r2, r2, #16
    ac28:	430a      	orrs	r2, r1
    ac2a:	79db      	ldrb	r3, [r3, #7]
    ac2c:	061b      	lsls	r3, r3, #24
    ac2e:	4313      	orrs	r3, r2
    ac30:	9300      	str	r3, [sp, #0]
    ac32:	e028      	b.n	ac86 <LORAREG_GetAttr_Rx1WindowparamsType4+0xda>
	effectiveDROffset = (rx1WindowParamReq->drOffset > maxDR) ? (maxDR - rx1WindowParamReq->drOffset) : (rx1WindowParamReq->drOffset);
    ac34:	b25b      	sxtb	r3, r3
    ac36:	e7d3      	b.n	abe0 <LORAREG_GetAttr_Rx1WindowparamsType4+0x34>
		else if(rx1WindowParams->rx1Dr > maxDR)
    ac38:	2b05      	cmp	r3, #5
    ac3a:	d802      	bhi.n	ac42 <LORAREG_GetAttr_Rx1WindowparamsType4+0x96>
		rx1WindowParams->rx1Dr = rx1WindowParamReq->currDr - effectiveDROffset;
    ac3c:	466a      	mov	r2, sp
    ac3e:	7113      	strb	r3, [r2, #4]
    ac40:	e005      	b.n	ac4e <LORAREG_GetAttr_Rx1WindowparamsType4+0xa2>
			rx1WindowParams->rx1Dr = maxDR;
    ac42:	2305      	movs	r3, #5
    ac44:	466a      	mov	r2, sp
    ac46:	7113      	strb	r3, [r2, #4]
    ac48:	e001      	b.n	ac4e <LORAREG_GetAttr_Rx1WindowparamsType4+0xa2>
		rx1WindowParams->rx1Dr = minDR;
    ac4a:	466b      	mov	r3, sp
    ac4c:	711c      	strb	r4, [r3, #4]
	rx1WindowParams->rx1Freq = RegParams.pOtherChParams[RegParams.lastUsedChannelIndex].rx1Frequency;
    ac4e:	4911      	ldr	r1, [pc, #68]	; (ac94 <LORAREG_GetAttr_Rx1WindowparamsType4+0xe8>)
    ac50:	7a0b      	ldrb	r3, [r1, #8]
    ac52:	7a4a      	ldrb	r2, [r1, #9]
    ac54:	0212      	lsls	r2, r2, #8
    ac56:	4313      	orrs	r3, r2
    ac58:	7a8a      	ldrb	r2, [r1, #10]
    ac5a:	0412      	lsls	r2, r2, #16
    ac5c:	431a      	orrs	r2, r3
    ac5e:	7acb      	ldrb	r3, [r1, #11]
    ac60:	061b      	lsls	r3, r3, #24
    ac62:	431a      	orrs	r2, r3
    ac64:	232f      	movs	r3, #47	; 0x2f
    ac66:	5cc9      	ldrb	r1, [r1, r3]
    ac68:	004b      	lsls	r3, r1, #1
    ac6a:	185b      	adds	r3, r3, r1
    ac6c:	009b      	lsls	r3, r3, #2
    ac6e:	189b      	adds	r3, r3, r2
    ac70:	7919      	ldrb	r1, [r3, #4]
    ac72:	795a      	ldrb	r2, [r3, #5]
    ac74:	0212      	lsls	r2, r2, #8
    ac76:	4311      	orrs	r1, r2
    ac78:	799a      	ldrb	r2, [r3, #6]
    ac7a:	0412      	lsls	r2, r2, #16
    ac7c:	430a      	orrs	r2, r1
    ac7e:	79db      	ldrb	r3, [r3, #7]
    ac80:	061b      	lsls	r3, r3, #24
    ac82:	4313      	orrs	r3, r2
    ac84:	9300      	str	r3, [sp, #0]
	memcpy(attrOutput,&rx1WindowParamsResp,sizeof(Rx1WindowParams_t));
    ac86:	2208      	movs	r2, #8
    ac88:	4669      	mov	r1, sp
    ac8a:	4b04      	ldr	r3, [pc, #16]	; (ac9c <LORAREG_GetAttr_Rx1WindowparamsType4+0xf0>)
    ac8c:	4798      	blx	r3
}
    ac8e:	2008      	movs	r0, #8
    ac90:	b002      	add	sp, #8
    ac92:	bd10      	pop	{r4, pc}
    ac94:	200024d0 	.word	0x200024d0
    ac98:	00007fe0 	.word	0x00007fe0
    ac9c:	00019da5 	.word	0x00019da5

0000aca0 <LORAREG_GetAttr_FreqT3>:
{
    aca0:	b510      	push	{r4, lr}
    aca2:	0014      	movs	r4, r2
	channelId = *(uint8_t *)attrInput;
    aca4:	780b      	ldrb	r3, [r1, #0]
	if(channelId > RegParams.maxChannels) 
    aca6:	222a      	movs	r2, #42	; 0x2a
    aca8:	490d      	ldr	r1, [pc, #52]	; (ace0 <LORAREG_GetAttr_FreqT3+0x40>)
    acaa:	568a      	ldrsb	r2, [r1, r2]
		result = LORAWAN_INVALID_PARAMETER;
    acac:	200a      	movs	r0, #10
	if(channelId > RegParams.maxChannels) 
    acae:	4293      	cmp	r3, r2
    acb0:	dd00      	ble.n	acb4 <LORAREG_GetAttr_FreqT3+0x14>
}
    acb2:	bd10      	pop	{r4, pc}
		memcpy(attrOutput,(&RegParams.pOtherChParams[channelId].ulfrequency),sizeof(uint32_t));
    acb4:	0008      	movs	r0, r1
    acb6:	7a09      	ldrb	r1, [r1, #8]
    acb8:	7a42      	ldrb	r2, [r0, #9]
    acba:	0212      	lsls	r2, r2, #8
    acbc:	430a      	orrs	r2, r1
    acbe:	7a81      	ldrb	r1, [r0, #10]
    acc0:	0409      	lsls	r1, r1, #16
    acc2:	430a      	orrs	r2, r1
    acc4:	7ac1      	ldrb	r1, [r0, #11]
    acc6:	0609      	lsls	r1, r1, #24
    acc8:	4311      	orrs	r1, r2
    acca:	005a      	lsls	r2, r3, #1
    accc:	18d3      	adds	r3, r2, r3
    acce:	009b      	lsls	r3, r3, #2
    acd0:	18c9      	adds	r1, r1, r3
    acd2:	2204      	movs	r2, #4
    acd4:	0020      	movs	r0, r4
    acd6:	4b03      	ldr	r3, [pc, #12]	; (ace4 <LORAREG_GetAttr_FreqT3+0x44>)
    acd8:	4798      	blx	r3
	StackRetStatus_t result = LORAWAN_SUCCESS;
    acda:	2008      	movs	r0, #8
    acdc:	e7e9      	b.n	acb2 <LORAREG_GetAttr_FreqT3+0x12>
    acde:	46c0      	nop			; (mov r8, r8)
    ace0:	200024d0 	.word	0x200024d0
    ace4:	00019da5 	.word	0x00019da5

0000ace8 <LORAREG_GetAttr_Rx1WindowparamsType3>:
{
    ace8:	b500      	push	{lr}
    acea:	b083      	sub	sp, #12
    acec:	0010      	movs	r0, r2
	memcpy(&rx1WindowParamsReq,(Rx1WindowParamsReq_t *)attrInput,sizeof(Rx1WindowParamsReq_t));
    acee:	784b      	ldrb	r3, [r1, #1]
    acf0:	788a      	ldrb	r2, [r1, #2]
	effectiveDROffset = (rx1WindowParamReq->drOffset > maxDR) ? (maxDR - rx1WindowParamReq->drOffset) : (rx1WindowParamReq->drOffset);
    acf2:	2b05      	cmp	r3, #5
    acf4:	d90b      	bls.n	ad0e <LORAREG_GetAttr_Rx1WindowparamsType3+0x26>
    acf6:	2105      	movs	r1, #5
    acf8:	1acb      	subs	r3, r1, r3
    acfa:	b25b      	sxtb	r3, r3
    if (rx1WindowParamReq->currDr >= effectiveDROffset)
    acfc:	429a      	cmp	r2, r3
    acfe:	db0c      	blt.n	ad1a <LORAREG_GetAttr_Rx1WindowparamsType3+0x32>
        rx1WindowParams->rx1Dr = rx1WindowParamReq->currDr - effectiveDROffset;
    ad00:	1ad3      	subs	r3, r2, r3
    ad02:	b2db      	uxtb	r3, r3
		else if(rx1WindowParams->rx1Dr > maxDR)
    ad04:	2b05      	cmp	r3, #5
    ad06:	d804      	bhi.n	ad12 <LORAREG_GetAttr_Rx1WindowparamsType3+0x2a>
        rx1WindowParams->rx1Dr = rx1WindowParamReq->currDr - effectiveDROffset;
    ad08:	466a      	mov	r2, sp
    ad0a:	7113      	strb	r3, [r2, #4]
    ad0c:	e008      	b.n	ad20 <LORAREG_GetAttr_Rx1WindowparamsType3+0x38>
	effectiveDROffset = (rx1WindowParamReq->drOffset > maxDR) ? (maxDR - rx1WindowParamReq->drOffset) : (rx1WindowParamReq->drOffset);
    ad0e:	b25b      	sxtb	r3, r3
    ad10:	e7f4      	b.n	acfc <LORAREG_GetAttr_Rx1WindowparamsType3+0x14>
			rx1WindowParams->rx1Dr = maxDR;
    ad12:	2305      	movs	r3, #5
    ad14:	466a      	mov	r2, sp
    ad16:	7113      	strb	r3, [r2, #4]
    ad18:	e002      	b.n	ad20 <LORAREG_GetAttr_Rx1WindowparamsType3+0x38>
        rx1WindowParams->rx1Dr = minDR;
    ad1a:	2300      	movs	r3, #0
    ad1c:	466a      	mov	r2, sp
    ad1e:	7113      	strb	r3, [r2, #4]
	rx1WindowParams->rx1Freq = RegParams.pOtherChParams[RegParams.lastUsedChannelIndex].rx1Frequency;			
    ad20:	4911      	ldr	r1, [pc, #68]	; (ad68 <LORAREG_GetAttr_Rx1WindowparamsType3+0x80>)
    ad22:	7a0b      	ldrb	r3, [r1, #8]
    ad24:	7a4a      	ldrb	r2, [r1, #9]
    ad26:	0212      	lsls	r2, r2, #8
    ad28:	4313      	orrs	r3, r2
    ad2a:	7a8a      	ldrb	r2, [r1, #10]
    ad2c:	0412      	lsls	r2, r2, #16
    ad2e:	431a      	orrs	r2, r3
    ad30:	7acb      	ldrb	r3, [r1, #11]
    ad32:	061b      	lsls	r3, r3, #24
    ad34:	431a      	orrs	r2, r3
    ad36:	232f      	movs	r3, #47	; 0x2f
    ad38:	5cc9      	ldrb	r1, [r1, r3]
    ad3a:	004b      	lsls	r3, r1, #1
    ad3c:	185b      	adds	r3, r3, r1
    ad3e:	009b      	lsls	r3, r3, #2
    ad40:	189b      	adds	r3, r3, r2
    ad42:	7919      	ldrb	r1, [r3, #4]
    ad44:	795a      	ldrb	r2, [r3, #5]
    ad46:	0212      	lsls	r2, r2, #8
    ad48:	4311      	orrs	r1, r2
    ad4a:	799a      	ldrb	r2, [r3, #6]
    ad4c:	0412      	lsls	r2, r2, #16
    ad4e:	430a      	orrs	r2, r1
    ad50:	79db      	ldrb	r3, [r3, #7]
    ad52:	061b      	lsls	r3, r3, #24
    ad54:	4313      	orrs	r3, r2
    ad56:	9300      	str	r3, [sp, #0]
	memcpy(attrOutput,&rx1WindowParamsResp,sizeof(Rx1WindowParams_t));
    ad58:	2208      	movs	r2, #8
    ad5a:	4669      	mov	r1, sp
    ad5c:	4b03      	ldr	r3, [pc, #12]	; (ad6c <LORAREG_GetAttr_Rx1WindowparamsType3+0x84>)
    ad5e:	4798      	blx	r3
}
    ad60:	2008      	movs	r0, #8
    ad62:	b003      	add	sp, #12
    ad64:	bd00      	pop	{pc}
    ad66:	46c0      	nop			; (mov r8, r8)
    ad68:	200024d0 	.word	0x200024d0
    ad6c:	00019da5 	.word	0x00019da5

0000ad70 <LORAREG_GetAttr_minLBTChPauseTimer>:
{
    ad70:	b5f0      	push	{r4, r5, r6, r7, lr}
    ad72:	46de      	mov	lr, fp
    ad74:	4657      	mov	r7, sl
    ad76:	464e      	mov	r6, r9
    ad78:	4645      	mov	r5, r8
    ad7a:	b5e0      	push	{r5, r6, r7, lr}
    ad7c:	b085      	sub	sp, #20
    ad7e:	9200      	str	r2, [sp, #0]
	uint32_t minim = UINT32_MAX;
    ad80:	2301      	movs	r3, #1
    ad82:	425b      	negs	r3, r3
    ad84:	9303      	str	r3, [sp, #12]
	currentDataRate = *(uint8_t *)attrInput;
    ad86:	780b      	ldrb	r3, [r1, #0]
    ad88:	4699      	mov	r9, r3
	for (uint8_t i = 0; i < RegParams.maxChannels; i++)
    ad8a:	232a      	movs	r3, #42	; 0x2a
    ad8c:	4a2a      	ldr	r2, [pc, #168]	; (ae38 <LORAREG_GetAttr_minLBTChPauseTimer+0xc8>)
    ad8e:	56d7      	ldrsb	r7, [r2, r3]
    ad90:	2f00      	cmp	r7, #0
    ad92:	dd40      	ble.n	ae16 <LORAREG_GetAttr_minLBTChPauseTimer+0xa6>
		if ( (RegParams.pChParams[i].status == ENABLED) && (RegParams.cmnParams.paramsType2.channelTimer[i] != 0) 
    ad94:	7916      	ldrb	r6, [r2, #4]
    ad96:	7953      	ldrb	r3, [r2, #5]
    ad98:	021b      	lsls	r3, r3, #8
    ad9a:	4333      	orrs	r3, r6
    ad9c:	7996      	ldrb	r6, [r2, #6]
    ad9e:	0436      	lsls	r6, r6, #16
    ada0:	4333      	orrs	r3, r6
    ada2:	79d6      	ldrb	r6, [r2, #7]
    ada4:	0636      	lsls	r6, r6, #24
    ada6:	431e      	orrs	r6, r3
    ada8:	2300      	movs	r3, #0
    adaa:	469a      	mov	sl, r3
    adac:	3b01      	subs	r3, #1
    adae:	4698      	mov	r8, r3
    adb0:	2300      	movs	r3, #0
    adb2:	2100      	movs	r1, #0
    adb4:	4694      	mov	ip, r2
			 && (currentDataRate >= RegParams.pChParams[i].dataRange.min) 
    adb6:	464a      	mov	r2, r9
    adb8:	9201      	str	r2, [sp, #4]
    adba:	46c3      	mov	fp, r8
    adbc:	e004      	b.n	adc8 <LORAREG_GetAttr_minLBTChPauseTimer+0x58>
	for (uint8_t i = 0; i < RegParams.maxChannels; i++)
    adbe:	3101      	adds	r1, #1
    adc0:	b2c9      	uxtb	r1, r1
    adc2:	000b      	movs	r3, r1
    adc4:	42b9      	cmp	r1, r7
    adc6:	da23      	bge.n	ae10 <LORAREG_GetAttr_minLBTChPauseTimer+0xa0>
		if ( (RegParams.pChParams[i].status == ENABLED) && (RegParams.cmnParams.paramsType2.channelTimer[i] != 0) 
    adc8:	004a      	lsls	r2, r1, #1
    adca:	18b2      	adds	r2, r6, r2
    adcc:	7814      	ldrb	r4, [r2, #0]
    adce:	2c00      	cmp	r4, #0
    add0:	d0f5      	beq.n	adbe <LORAREG_GetAttr_minLBTChPauseTimer+0x4e>
    add2:	3358      	adds	r3, #88	; 0x58
    add4:	009b      	lsls	r3, r3, #2
    add6:	4463      	add	r3, ip
    add8:	7a18      	ldrb	r0, [r3, #8]
    adda:	4680      	mov	r8, r0
    addc:	7a58      	ldrb	r0, [r3, #9]
    adde:	0200      	lsls	r0, r0, #8
    ade0:	4645      	mov	r5, r8
    ade2:	4305      	orrs	r5, r0
    ade4:	7a98      	ldrb	r0, [r3, #10]
    ade6:	0400      	lsls	r0, r0, #16
    ade8:	4328      	orrs	r0, r5
    adea:	7adb      	ldrb	r3, [r3, #11]
    adec:	061b      	lsls	r3, r3, #24
    adee:	4303      	orrs	r3, r0
    adf0:	d0e5      	beq.n	adbe <LORAREG_GetAttr_minLBTChPauseTimer+0x4e>
		     && (RegParams.cmnParams.paramsType2.channelTimer[i] <= minim) 
    adf2:	459b      	cmp	fp, r3
    adf4:	d3e3      	bcc.n	adbe <LORAREG_GetAttr_minLBTChPauseTimer+0x4e>
			 && (currentDataRate >= RegParams.pChParams[i].dataRange.min) 
    adf6:	7850      	ldrb	r0, [r2, #1]
    adf8:	0700      	lsls	r0, r0, #28
    adfa:	0f00      	lsrs	r0, r0, #28
    adfc:	4581      	cmp	r9, r0
    adfe:	dbde      	blt.n	adbe <LORAREG_GetAttr_minLBTChPauseTimer+0x4e>
			 && (currentDataRate <= RegParams.pChParams[i].dataRange.max) )
    ae00:	7852      	ldrb	r2, [r2, #1]
    ae02:	0912      	lsrs	r2, r2, #4
    ae04:	9801      	ldr	r0, [sp, #4]
    ae06:	4290      	cmp	r0, r2
    ae08:	dcd9      	bgt.n	adbe <LORAREG_GetAttr_minLBTChPauseTimer+0x4e>
    ae0a:	46a2      	mov	sl, r4
			minim = RegParams.cmnParams.paramsType2.channelTimer[i];
    ae0c:	469b      	mov	fp, r3
    ae0e:	e7d6      	b.n	adbe <LORAREG_GetAttr_minLBTChPauseTimer+0x4e>
    ae10:	4653      	mov	r3, sl
    ae12:	2b00      	cmp	r3, #0
    ae14:	d10c      	bne.n	ae30 <LORAREG_GetAttr_minLBTChPauseTimer+0xc0>
	memcpy(attrOutput,&minim,sizeof(uint32_t));
    ae16:	2204      	movs	r2, #4
    ae18:	a903      	add	r1, sp, #12
    ae1a:	9800      	ldr	r0, [sp, #0]
    ae1c:	4b07      	ldr	r3, [pc, #28]	; (ae3c <LORAREG_GetAttr_minLBTChPauseTimer+0xcc>)
    ae1e:	4798      	blx	r3
}
    ae20:	2008      	movs	r0, #8
    ae22:	b005      	add	sp, #20
    ae24:	bc3c      	pop	{r2, r3, r4, r5}
    ae26:	4690      	mov	r8, r2
    ae28:	4699      	mov	r9, r3
    ae2a:	46a2      	mov	sl, r4
    ae2c:	46ab      	mov	fp, r5
    ae2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ae30:	465b      	mov	r3, fp
    ae32:	9303      	str	r3, [sp, #12]
    ae34:	e7ef      	b.n	ae16 <LORAREG_GetAttr_minLBTChPauseTimer+0xa6>
    ae36:	46c0      	nop			; (mov r8, r8)
    ae38:	200024d0 	.word	0x200024d0
    ae3c:	00019da5 	.word	0x00019da5

0000ae40 <ValidateTxFreqT2>:
{
    ae40:	b500      	push	{lr}
    ae42:	b083      	sub	sp, #12
	memcpy(&val_freqTx,attrInput,sizeof(ValUpdateFreqTx_t));
    ae44:	2208      	movs	r2, #8
    ae46:	4668      	mov	r0, sp
    ae48:	4b04      	ldr	r3, [pc, #16]	; (ae5c <ValidateTxFreqT2+0x1c>)
    ae4a:	4798      	blx	r3
	retVal = pValidateAttr[RX_FREQUENCY](RX_FREQUENCY,(void *)&val_freqTx.frequencyNew);
    ae4c:	4b04      	ldr	r3, [pc, #16]	; (ae60 <ValidateTxFreqT2+0x20>)
    ae4e:	685b      	ldr	r3, [r3, #4]
    ae50:	4669      	mov	r1, sp
    ae52:	2001      	movs	r0, #1
    ae54:	4798      	blx	r3
}
    ae56:	b003      	add	sp, #12
    ae58:	bd00      	pop	{pc}
    ae5a:	46c0      	nop			; (mov r8, r8)
    ae5c:	00019da5 	.word	0x00019da5
    ae60:	20000e64 	.word	0x20000e64

0000ae64 <ValidateFreqIN>:
{
    ae64:	b500      	push	{lr}
    ae66:	b083      	sub	sp, #12
	memcpy(&newFreq,attrInput,sizeof(uint32_t));
    ae68:	2204      	movs	r2, #4
    ae6a:	a801      	add	r0, sp, #4
    ae6c:	4b06      	ldr	r3, [pc, #24]	; (ae88 <ValidateFreqIN+0x24>)
    ae6e:	4798      	blx	r3
	if(newFreq > FREQ_867000KHZ || newFreq < FREQ_865000KHZ)
    ae70:	9b01      	ldr	r3, [sp, #4]
    ae72:	4a06      	ldr	r2, [pc, #24]	; (ae8c <ValidateFreqIN+0x28>)
    ae74:	4694      	mov	ip, r2
    ae76:	4463      	add	r3, ip
    ae78:	4a05      	ldr	r2, [pc, #20]	; (ae90 <ValidateFreqIN+0x2c>)
	StackRetStatus_t result = LORAWAN_SUCCESS;
    ae7a:	2008      	movs	r0, #8
	if(newFreq > FREQ_867000KHZ || newFreq < FREQ_865000KHZ)
    ae7c:	4293      	cmp	r3, r2
    ae7e:	d900      	bls.n	ae82 <ValidateFreqIN+0x1e>
		result = LORAWAN_INVALID_PARAMETER;
    ae80:	3002      	adds	r0, #2
}
    ae82:	b003      	add	sp, #12
    ae84:	bd00      	pop	{pc}
    ae86:	46c0      	nop			; (mov r8, r8)
    ae88:	00019da5 	.word	0x00019da5
    ae8c:	cc7125c0 	.word	0xcc7125c0
    ae90:	001e8480 	.word	0x001e8480

0000ae94 <ValidateFreqJP>:
{
    ae94:	b500      	push	{lr}
    ae96:	b083      	sub	sp, #12
	memcpy(&newFreq,attrInput,sizeof(uint32_t));
    ae98:	2204      	movs	r2, #4
    ae9a:	a801      	add	r0, sp, #4
    ae9c:	4b06      	ldr	r3, [pc, #24]	; (aeb8 <ValidateFreqJP+0x24>)
    ae9e:	4798      	blx	r3
	if(newFreq > FREQ_928000KHZ || newFreq < FREQ_920000KHZ)
    aea0:	9b01      	ldr	r3, [sp, #4]
    aea2:	4a06      	ldr	r2, [pc, #24]	; (aebc <ValidateFreqJP+0x28>)
    aea4:	4694      	mov	ip, r2
    aea6:	4463      	add	r3, ip
    aea8:	4a05      	ldr	r2, [pc, #20]	; (aec0 <ValidateFreqJP+0x2c>)
	StackRetStatus_t result = LORAWAN_SUCCESS;
    aeaa:	2008      	movs	r0, #8
	if(newFreq > FREQ_928000KHZ || newFreq < FREQ_920000KHZ)
    aeac:	4293      	cmp	r3, r2
    aeae:	d900      	bls.n	aeb2 <ValidateFreqJP+0x1e>
		result = LORAWAN_INVALID_PARAMETER;
    aeb0:	3002      	adds	r0, #2
}
    aeb2:	b003      	add	sp, #12
    aeb4:	bd00      	pop	{pc}
    aeb6:	46c0      	nop			; (mov r8, r8)
    aeb8:	00019da5 	.word	0x00019da5
    aebc:	c929ea00 	.word	0xc929ea00
    aec0:	007a1200 	.word	0x007a1200

0000aec4 <ValidateFreqKR>:
{
    aec4:	b500      	push	{lr}
    aec6:	b083      	sub	sp, #12
	memcpy(&freqNew,attrInput,sizeof(uint32_t));
    aec8:	2204      	movs	r2, #4
    aeca:	a801      	add	r0, sp, #4
    aecc:	4b0a      	ldr	r3, [pc, #40]	; (aef8 <ValidateFreqKR+0x34>)
    aece:	4798      	blx	r3
		if(freq == freqNew)
    aed0:	9a01      	ldr	r2, [sp, #4]
    aed2:	4b0a      	ldr	r3, [pc, #40]	; (aefc <ValidateFreqKR+0x38>)
    aed4:	429a      	cmp	r2, r3
    aed6:	d00b      	beq.n	aef0 <ValidateFreqKR+0x2c>
    aed8:	4b09      	ldr	r3, [pc, #36]	; (af00 <ValidateFreqKR+0x3c>)
	for(freq = FREQ_920900KHZ; freq <= FREQ_923300KHZ; freq += freqwidth)
    aeda:	490a      	ldr	r1, [pc, #40]	; (af04 <ValidateFreqKR+0x40>)
		if(freq == freqNew)
    aedc:	429a      	cmp	r2, r3
    aede:	d009      	beq.n	aef4 <ValidateFreqKR+0x30>
	for(freq = FREQ_920900KHZ; freq <= FREQ_923300KHZ; freq += freqwidth)
    aee0:	4809      	ldr	r0, [pc, #36]	; (af08 <ValidateFreqKR+0x44>)
    aee2:	4684      	mov	ip, r0
    aee4:	4463      	add	r3, ip
    aee6:	428b      	cmp	r3, r1
    aee8:	d1f8      	bne.n	aedc <ValidateFreqKR+0x18>
    StackRetStatus_t result = LORAWAN_INVALID_PARAMETER;
    aeea:	200a      	movs	r0, #10
}
    aeec:	b003      	add	sp, #12
    aeee:	bd00      	pop	{pc}
			result = LORAWAN_SUCCESS;
    aef0:	2008      	movs	r0, #8
    aef2:	e7fb      	b.n	aeec <ValidateFreqKR+0x28>
    aef4:	2008      	movs	r0, #8
    aef6:	e7f9      	b.n	aeec <ValidateFreqKR+0x28>
    aef8:	00019da5 	.word	0x00019da5
    aefc:	36e3d1a0 	.word	0x36e3d1a0
    af00:	36e6dee0 	.word	0x36e6dee0
    af04:	370b7de0 	.word	0x370b7de0
    af08:	00030d40 	.word	0x00030d40

0000af0c <setNewChannelsT1>:
{
    af0c:	b5f0      	push	{r4, r5, r6, r7, lr}
    af0e:	b083      	sub	sp, #12
	memcpy(&updateNewCh,attrInput,sizeof(UpdateNewCh_t));
    af10:	ac01      	add	r4, sp, #4
    af12:	2204      	movs	r2, #4
    af14:	0020      	movs	r0, r4
    af16:	4b1f      	ldr	r3, [pc, #124]	; (af94 <setNewChannelsT1+0x88>)
    af18:	4798      	blx	r3
	chMask = updateNewCh.channelMask;
    af1a:	8827      	ldrh	r7, [r4, #0]
	chMaskCtrl = updateNewCh.channelMaskCntl;
    af1c:	78a6      	ldrb	r6, [r4, #2]
    af1e:	466b      	mov	r3, sp
    af20:	1cd9      	adds	r1, r3, #3
    af22:	700e      	strb	r6, [r1, #0]
	if(ValidateChannelMaskCntl(CHANNEL_MASK_CNTL, &chMaskCtrl) == LORAWAN_SUCCESS)
    af24:	201b      	movs	r0, #27
    af26:	4b1c      	ldr	r3, [pc, #112]	; (af98 <setNewChannelsT1+0x8c>)
    af28:	4798      	blx	r3
    af2a:	0005      	movs	r5, r0
    af2c:	2808      	cmp	r0, #8
    af2e:	d003      	beq.n	af38 <setNewChannelsT1+0x2c>
		retVal = LORAWAN_INVALID_PARAMETER;
    af30:	250a      	movs	r5, #10
}
    af32:	0028      	movs	r0, r5
    af34:	b003      	add	sp, #12
    af36:	bdf0      	pop	{r4, r5, r6, r7, pc}
		switch(chMaskCtrl)
    af38:	2e06      	cmp	r6, #6
    af3a:	d01c      	beq.n	af76 <setNewChannelsT1+0x6a>
    af3c:	d80a      	bhi.n	af54 <setNewChannelsT1+0x48>
    af3e:	2e04      	cmp	r6, #4
    af40:	d8f7      	bhi.n	af32 <setNewChannelsT1+0x26>
		channel = chMaskCtrl << SHIFT4;
    af42:	0136      	lsls	r6, r6, #4
    af44:	b2f0      	uxtb	r0, r6
				EnableChannels2(channel, channel + 15, chMask);
    af46:	0001      	movs	r1, r0
    af48:	310f      	adds	r1, #15
    af4a:	b2c9      	uxtb	r1, r1
    af4c:	003a      	movs	r2, r7
    af4e:	4b13      	ldr	r3, [pc, #76]	; (af9c <setNewChannelsT1+0x90>)
    af50:	4798      	blx	r3
				break;
    af52:	e7ee      	b.n	af32 <setNewChannelsT1+0x26>
		switch(chMaskCtrl)
    af54:	2400      	movs	r4, #0
    af56:	2e07      	cmp	r6, #7
    af58:	d1eb      	bne.n	af32 <setNewChannelsT1+0x26>
					UpdateChannelIdStatus(i, DISABLED);
    af5a:	4e11      	ldr	r6, [pc, #68]	; (afa0 <setNewChannelsT1+0x94>)
    af5c:	2100      	movs	r1, #0
    af5e:	0020      	movs	r0, r4
    af60:	47b0      	blx	r6
				for(i = 0; i< 63; i++)
    af62:	3401      	adds	r4, #1
    af64:	b2e4      	uxtb	r4, r4
    af66:	2c3f      	cmp	r4, #63	; 0x3f
    af68:	d1f8      	bne.n	af5c <setNewChannelsT1+0x50>
				EnableChannels2(64, 71, chMask);
    af6a:	003a      	movs	r2, r7
    af6c:	2147      	movs	r1, #71	; 0x47
    af6e:	2040      	movs	r0, #64	; 0x40
    af70:	4b0a      	ldr	r3, [pc, #40]	; (af9c <setNewChannelsT1+0x90>)
    af72:	4798      	blx	r3
				break;
    af74:	e7dd      	b.n	af32 <setNewChannelsT1+0x26>
		switch(chMaskCtrl)
    af76:	2400      	movs	r4, #0
					UpdateChannelIdStatus(i, ENABLED);
    af78:	4e09      	ldr	r6, [pc, #36]	; (afa0 <setNewChannelsT1+0x94>)
    af7a:	2101      	movs	r1, #1
    af7c:	0020      	movs	r0, r4
    af7e:	47b0      	blx	r6
				for(i = 0; i < 63; i++)
    af80:	3401      	adds	r4, #1
    af82:	b2e4      	uxtb	r4, r4
    af84:	2c3f      	cmp	r4, #63	; 0x3f
    af86:	d1f8      	bne.n	af7a <setNewChannelsT1+0x6e>
				EnableChannels2(64, 71, chMask);
    af88:	003a      	movs	r2, r7
    af8a:	2147      	movs	r1, #71	; 0x47
    af8c:	2040      	movs	r0, #64	; 0x40
    af8e:	4b03      	ldr	r3, [pc, #12]	; (af9c <setNewChannelsT1+0x90>)
    af90:	4798      	blx	r3
			    break;
    af92:	e7ce      	b.n	af32 <setNewChannelsT1+0x26>
    af94:	00019da5 	.word	0x00019da5
    af98:	00009b5d 	.word	0x00009b5d
    af9c:	0000a26d 	.word	0x0000a26d
    afa0:	0000a209 	.word	0x0000a209

0000afa4 <setDlFrequency>:
{
    afa4:	b530      	push	{r4, r5, lr}
    afa6:	b085      	sub	sp, #20
	memcpy(&updateDlFreq,attrInput,sizeof(ValUpdateFreqTx_t));
    afa8:	ac02      	add	r4, sp, #8
    afaa:	2208      	movs	r2, #8
    afac:	0020      	movs	r0, r4
    afae:	4b20      	ldr	r3, [pc, #128]	; (b030 <setDlFrequency+0x8c>)
    afb0:	4798      	blx	r3
	Chid.channelIndex = updateDlFreq.channelIndex;
    afb2:	ab01      	add	r3, sp, #4
    afb4:	7922      	ldrb	r2, [r4, #4]
    afb6:	701a      	strb	r2, [r3, #0]
		Chid.allowedForDefaultChannels = ALL_CHANNELS;
    afb8:	2201      	movs	r2, #1
    afba:	705a      	strb	r2, [r3, #1]
	if(pValidateAttr[RX_FREQUENCY](RX_FREQUENCY, &updateDlFreq.frequencyNew) != LORAWAN_SUCCESS || ValidateChannelIdT2(CHANNEL_ID, &Chid) != LORAWAN_SUCCESS)
    afbc:	4b1d      	ldr	r3, [pc, #116]	; (b034 <setDlFrequency+0x90>)
    afbe:	685b      	ldr	r3, [r3, #4]
    afc0:	0021      	movs	r1, r4
    afc2:	2001      	movs	r0, #1
    afc4:	4798      	blx	r3
		result = LORAWAN_INVALID_PARAMETER;
    afc6:	240a      	movs	r4, #10
	if(pValidateAttr[RX_FREQUENCY](RX_FREQUENCY, &updateDlFreq.frequencyNew) != LORAWAN_SUCCESS || ValidateChannelIdT2(CHANNEL_ID, &Chid) != LORAWAN_SUCCESS)
    afc8:	2808      	cmp	r0, #8
    afca:	d002      	beq.n	afd2 <setDlFrequency+0x2e>
}
    afcc:	0020      	movs	r0, r4
    afce:	b005      	add	sp, #20
    afd0:	bd30      	pop	{r4, r5, pc}
	if(pValidateAttr[RX_FREQUENCY](RX_FREQUENCY, &updateDlFreq.frequencyNew) != LORAWAN_SUCCESS || ValidateChannelIdT2(CHANNEL_ID, &Chid) != LORAWAN_SUCCESS)
    afd2:	a901      	add	r1, sp, #4
    afd4:	300d      	adds	r0, #13
    afd6:	4b18      	ldr	r3, [pc, #96]	; (b038 <setDlFrequency+0x94>)
    afd8:	4798      	blx	r3
    afda:	0004      	movs	r4, r0
    afdc:	2808      	cmp	r0, #8
    afde:	d001      	beq.n	afe4 <setDlFrequency+0x40>
		result = LORAWAN_INVALID_PARAMETER;
    afe0:	240a      	movs	r4, #10
    afe2:	e7f3      	b.n	afcc <setDlFrequency+0x28>
		RegParams.pOtherChParams[updateDlFreq.channelIndex].rx1Frequency = updateDlFreq.frequencyNew;
    afe4:	4a15      	ldr	r2, [pc, #84]	; (b03c <setDlFrequency+0x98>)
    afe6:	7a13      	ldrb	r3, [r2, #8]
    afe8:	7a50      	ldrb	r0, [r2, #9]
    afea:	0200      	lsls	r0, r0, #8
    afec:	4303      	orrs	r3, r0
    afee:	7a90      	ldrb	r0, [r2, #10]
    aff0:	0400      	lsls	r0, r0, #16
    aff2:	4318      	orrs	r0, r3
    aff4:	7ad3      	ldrb	r3, [r2, #11]
    aff6:	061b      	lsls	r3, r3, #24
    aff8:	4318      	orrs	r0, r3
    affa:	a902      	add	r1, sp, #8
    affc:	790d      	ldrb	r5, [r1, #4]
    affe:	006b      	lsls	r3, r5, #1
    b000:	195b      	adds	r3, r3, r5
    b002:	009b      	lsls	r3, r3, #2
    b004:	181b      	adds	r3, r3, r0
    b006:	7808      	ldrb	r0, [r1, #0]
    b008:	7118      	strb	r0, [r3, #4]
    b00a:	7848      	ldrb	r0, [r1, #1]
    b00c:	7158      	strb	r0, [r3, #5]
    b00e:	7888      	ldrb	r0, [r1, #2]
    b010:	7198      	strb	r0, [r3, #6]
    b012:	78c9      	ldrb	r1, [r1, #3]
    b014:	71d9      	strb	r1, [r3, #7]
		PDS_STORE(RegParams.regParamItems.ch_param_2_item_id);
    b016:	2384      	movs	r3, #132	; 0x84
    b018:	009b      	lsls	r3, r3, #2
    b01a:	5cd3      	ldrb	r3, [r2, r3]
    b01c:	4908      	ldr	r1, [pc, #32]	; (b040 <setDlFrequency+0x9c>)
    b01e:	5c50      	ldrb	r0, [r2, r1]
    b020:	0200      	lsls	r0, r0, #8
    b022:	4318      	orrs	r0, r3
    b024:	b2c1      	uxtb	r1, r0
    b026:	0a00      	lsrs	r0, r0, #8
    b028:	4b06      	ldr	r3, [pc, #24]	; (b044 <setDlFrequency+0xa0>)
    b02a:	4798      	blx	r3
    b02c:	e7ce      	b.n	afcc <setDlFrequency+0x28>
    b02e:	46c0      	nop			; (mov r8, r8)
    b030:	00019da5 	.word	0x00019da5
    b034:	20000e64 	.word	0x20000e64
    b038:	00009a55 	.word	0x00009a55
    b03c:	200024d0 	.word	0x200024d0
    b040:	00000211 	.word	0x00000211
    b044:	0000e0f9 	.word	0x0000e0f9

0000b048 <setFrequency>:
{
    b048:	b570      	push	{r4, r5, r6, lr}
    b04a:	b084      	sub	sp, #16
	memcpy(&updateTxFreq,attrInput,sizeof(ValUpdateFreqTx_t));
    b04c:	ac02      	add	r4, sp, #8
    b04e:	2208      	movs	r2, #8
    b050:	0020      	movs	r0, r4
    b052:	4b3f      	ldr	r3, [pc, #252]	; (b150 <setFrequency+0x108>)
    b054:	4798      	blx	r3
	valChid.channelIndex = updateTxFreq.channelIndex;
    b056:	ab01      	add	r3, sp, #4
    b058:	7922      	ldrb	r2, [r4, #4]
    b05a:	701a      	strb	r2, [r3, #0]
	valChid.allowedForDefaultChannels = WITHOUT_DEFAULT_CHANNELS;
    b05c:	2200      	movs	r2, #0
    b05e:	705a      	strb	r2, [r3, #1]
	if(pValidateAttr[RX_FREQUENCY](RX_FREQUENCY,&updateTxFreq.frequencyNew) != LORAWAN_SUCCESS || ValidateChannelIdT2(CHANNEL_ID, &valChid) != LORAWAN_SUCCESS)
    b060:	4b3c      	ldr	r3, [pc, #240]	; (b154 <setFrequency+0x10c>)
    b062:	685b      	ldr	r3, [r3, #4]
    b064:	0021      	movs	r1, r4
    b066:	2001      	movs	r0, #1
    b068:	4798      	blx	r3
		result = LORAWAN_INVALID_PARAMETER;
    b06a:	240a      	movs	r4, #10
	if(pValidateAttr[RX_FREQUENCY](RX_FREQUENCY,&updateTxFreq.frequencyNew) != LORAWAN_SUCCESS || ValidateChannelIdT2(CHANNEL_ID, &valChid) != LORAWAN_SUCCESS)
    b06c:	2808      	cmp	r0, #8
    b06e:	d002      	beq.n	b076 <setFrequency+0x2e>
}
    b070:	0020      	movs	r0, r4
    b072:	b004      	add	sp, #16
    b074:	bd70      	pop	{r4, r5, r6, pc}
	if(pValidateAttr[RX_FREQUENCY](RX_FREQUENCY,&updateTxFreq.frequencyNew) != LORAWAN_SUCCESS || ValidateChannelIdT2(CHANNEL_ID, &valChid) != LORAWAN_SUCCESS)
    b076:	a901      	add	r1, sp, #4
    b078:	300d      	adds	r0, #13
    b07a:	4b37      	ldr	r3, [pc, #220]	; (b158 <setFrequency+0x110>)
    b07c:	4798      	blx	r3
    b07e:	0004      	movs	r4, r0
    b080:	2808      	cmp	r0, #8
    b082:	d001      	beq.n	b088 <setFrequency+0x40>
		result = LORAWAN_INVALID_PARAMETER;
    b084:	240a      	movs	r4, #10
    b086:	e7f3      	b.n	b070 <setFrequency+0x28>
		uint8_t chIndx = updateTxFreq.channelIndex;
    b088:	ab02      	add	r3, sp, #8
    b08a:	791d      	ldrb	r5, [r3, #4]
		if((((1 << RegParams.band) & ((ISM_EUBAND) | (1 << ISM_JPN923))) != 0))
    b08c:	232e      	movs	r3, #46	; 0x2e
    b08e:	4a33      	ldr	r2, [pc, #204]	; (b15c <setFrequency+0x114>)
    b090:	5cd2      	ldrb	r2, [r2, r3]
    b092:	3b0b      	subs	r3, #11
    b094:	4113      	asrs	r3, r2
    b096:	07db      	lsls	r3, r3, #31
    b098:	d445      	bmi.n	b126 <setFrequency+0xde>
		RegParams.pOtherChParams[chIndx].ulfrequency = updateTxFreq.frequencyNew;
    b09a:	006a      	lsls	r2, r5, #1
    b09c:	1952      	adds	r2, r2, r5
    b09e:	0090      	lsls	r0, r2, #2
    b0a0:	a902      	add	r1, sp, #8
    b0a2:	9d02      	ldr	r5, [sp, #8]
    b0a4:	4b2d      	ldr	r3, [pc, #180]	; (b15c <setFrequency+0x114>)
    b0a6:	7a1a      	ldrb	r2, [r3, #8]
    b0a8:	7a5e      	ldrb	r6, [r3, #9]
    b0aa:	0236      	lsls	r6, r6, #8
    b0ac:	4316      	orrs	r6, r2
    b0ae:	7a9a      	ldrb	r2, [r3, #10]
    b0b0:	0412      	lsls	r2, r2, #16
    b0b2:	4316      	orrs	r6, r2
    b0b4:	7ada      	ldrb	r2, [r3, #11]
    b0b6:	0612      	lsls	r2, r2, #24
    b0b8:	4332      	orrs	r2, r6
    b0ba:	5415      	strb	r5, [r2, r0]
    b0bc:	0a2e      	lsrs	r6, r5, #8
    b0be:	1812      	adds	r2, r2, r0
    b0c0:	7056      	strb	r6, [r2, #1]
    b0c2:	0c2e      	lsrs	r6, r5, #16
    b0c4:	7096      	strb	r6, [r2, #2]
    b0c6:	0e2d      	lsrs	r5, r5, #24
    b0c8:	70d5      	strb	r5, [r2, #3]
		RegParams.pOtherChParams[chIndx].rx1Frequency = updateTxFreq.frequencyNew;
    b0ca:	7a1a      	ldrb	r2, [r3, #8]
    b0cc:	7a5d      	ldrb	r5, [r3, #9]
    b0ce:	022d      	lsls	r5, r5, #8
    b0d0:	4315      	orrs	r5, r2
    b0d2:	7a9a      	ldrb	r2, [r3, #10]
    b0d4:	0412      	lsls	r2, r2, #16
    b0d6:	4315      	orrs	r5, r2
    b0d8:	7ada      	ldrb	r2, [r3, #11]
    b0da:	0612      	lsls	r2, r2, #24
    b0dc:	432a      	orrs	r2, r5
    b0de:	1812      	adds	r2, r2, r0
    b0e0:	780d      	ldrb	r5, [r1, #0]
    b0e2:	7115      	strb	r5, [r2, #4]
    b0e4:	784d      	ldrb	r5, [r1, #1]
    b0e6:	7155      	strb	r5, [r2, #5]
    b0e8:	788d      	ldrb	r5, [r1, #2]
    b0ea:	7195      	strb	r5, [r2, #6]
    b0ec:	78c9      	ldrb	r1, [r1, #3]
    b0ee:	71d1      	strb	r1, [r2, #7]
		RegParams.pOtherChParams[chIndx].parametersDefined |= FREQUENCY_DEFINED;
    b0f0:	7a1a      	ldrb	r2, [r3, #8]
    b0f2:	7a59      	ldrb	r1, [r3, #9]
    b0f4:	0209      	lsls	r1, r1, #8
    b0f6:	4311      	orrs	r1, r2
    b0f8:	7a9a      	ldrb	r2, [r3, #10]
    b0fa:	0412      	lsls	r2, r2, #16
    b0fc:	4311      	orrs	r1, r2
    b0fe:	7ada      	ldrb	r2, [r3, #11]
    b100:	0612      	lsls	r2, r2, #24
    b102:	430a      	orrs	r2, r1
    b104:	1812      	adds	r2, r2, r0
    b106:	7ad1      	ldrb	r1, [r2, #11]
    b108:	2001      	movs	r0, #1
    b10a:	4301      	orrs	r1, r0
    b10c:	72d1      	strb	r1, [r2, #11]
		PDS_STORE(RegParams.regParamItems.ch_param_2_item_id);
    b10e:	2284      	movs	r2, #132	; 0x84
    b110:	0092      	lsls	r2, r2, #2
    b112:	5c9a      	ldrb	r2, [r3, r2]
    b114:	4912      	ldr	r1, [pc, #72]	; (b160 <setFrequency+0x118>)
    b116:	5c58      	ldrb	r0, [r3, r1]
    b118:	0200      	lsls	r0, r0, #8
    b11a:	4310      	orrs	r0, r2
    b11c:	b2c1      	uxtb	r1, r0
    b11e:	0a00      	lsrs	r0, r0, #8
    b120:	4b10      	ldr	r3, [pc, #64]	; (b164 <setFrequency+0x11c>)
    b122:	4798      	blx	r3
    b124:	e7a4      	b.n	b070 <setFrequency+0x28>
		    RegParams.pOtherChParams[chIndx].subBandId = getSubBandId(updateTxFreq.frequencyNew);
    b126:	4a0d      	ldr	r2, [pc, #52]	; (b15c <setFrequency+0x114>)
    b128:	7a16      	ldrb	r6, [r2, #8]
    b12a:	7a53      	ldrb	r3, [r2, #9]
    b12c:	021b      	lsls	r3, r3, #8
    b12e:	4333      	orrs	r3, r6
    b130:	7a96      	ldrb	r6, [r2, #10]
    b132:	0436      	lsls	r6, r6, #16
    b134:	4333      	orrs	r3, r6
    b136:	7ad6      	ldrb	r6, [r2, #11]
    b138:	0636      	lsls	r6, r6, #24
    b13a:	431e      	orrs	r6, r3
    b13c:	006b      	lsls	r3, r5, #1
    b13e:	195b      	adds	r3, r3, r5
    b140:	009b      	lsls	r3, r3, #2
    b142:	18f6      	adds	r6, r6, r3
    b144:	9802      	ldr	r0, [sp, #8]
    b146:	4b08      	ldr	r3, [pc, #32]	; (b168 <setFrequency+0x120>)
    b148:	4798      	blx	r3
    b14a:	7230      	strb	r0, [r6, #8]
    b14c:	e7a5      	b.n	b09a <setFrequency+0x52>
    b14e:	46c0      	nop			; (mov r8, r8)
    b150:	00019da5 	.word	0x00019da5
    b154:	20000e64 	.word	0x20000e64
    b158:	00009a55 	.word	0x00009a55
    b15c:	200024d0 	.word	0x200024d0
    b160:	00000211 	.word	0x00000211
    b164:	0000e0f9 	.word	0x0000e0f9
    b168:	00009d09 	.word	0x00009d09

0000b16c <setDutyCycle>:
{
    b16c:	b570      	push	{r4, r5, r6, lr}
    b16e:	b082      	sub	sp, #8
    memcpy(&updateDCycle,attrInput,sizeof(UpdateDutyCycle_t));
    b170:	ac01      	add	r4, sp, #4
    b172:	2204      	movs	r2, #4
    b174:	0020      	movs	r0, r4
    b176:	4b2d      	ldr	r3, [pc, #180]	; (b22c <setDutyCycle+0xc0>)
    b178:	4798      	blx	r3
	val_chid.channelIndex = updateDCycle.channelIndex;
    b17a:	78a5      	ldrb	r5, [r4, #2]
    b17c:	466b      	mov	r3, sp
    b17e:	701d      	strb	r5, [r3, #0]
	val_chid.allowedForDefaultChannels = ALL_CHANNELS;
    b180:	2301      	movs	r3, #1
    b182:	466a      	mov	r2, sp
    b184:	7053      	strb	r3, [r2, #1]
	if(ValidateChannelIdT2(CHANNEL_ID, &val_chid) == LORAWAN_SUCCESS)
    b186:	4669      	mov	r1, sp
    b188:	2015      	movs	r0, #21
    b18a:	4b29      	ldr	r3, [pc, #164]	; (b230 <setDutyCycle+0xc4>)
    b18c:	4798      	blx	r3
    b18e:	0004      	movs	r4, r0
    b190:	2808      	cmp	r0, #8
    b192:	d003      	beq.n	b19c <setDutyCycle+0x30>
		result = LORAWAN_INVALID_PARAMETER;
    b194:	240a      	movs	r4, #10
}
    b196:	0020      	movs	r0, r4
    b198:	b002      	add	sp, #8
    b19a:	bd70      	pop	{r4, r5, r6, pc}
		bandId = RegParams.pOtherChParams[updateDCycle.channelIndex].subBandId;
    b19c:	0069      	lsls	r1, r5, #1
    b19e:	1949      	adds	r1, r1, r5
    b1a0:	0089      	lsls	r1, r1, #2
    b1a2:	4b24      	ldr	r3, [pc, #144]	; (b234 <setDutyCycle+0xc8>)
    b1a4:	7a1a      	ldrb	r2, [r3, #8]
    b1a6:	7a58      	ldrb	r0, [r3, #9]
    b1a8:	0200      	lsls	r0, r0, #8
    b1aa:	4310      	orrs	r0, r2
    b1ac:	7a9a      	ldrb	r2, [r3, #10]
    b1ae:	0412      	lsls	r2, r2, #16
    b1b0:	4310      	orrs	r0, r2
    b1b2:	7ada      	ldrb	r2, [r3, #11]
    b1b4:	0612      	lsls	r2, r2, #24
    b1b6:	4302      	orrs	r2, r0
    b1b8:	1852      	adds	r2, r2, r1
    b1ba:	7a15      	ldrb	r5, [r2, #8]
		RegParams.cmnParams.paramsType2.subBandDutyCycle[bandId] = updateDCycle.dutyCycleNew;
    b1bc:	0028      	movs	r0, r5
    b1be:	30d4      	adds	r0, #212	; 0xd4
    b1c0:	0040      	lsls	r0, r0, #1
    b1c2:	aa01      	add	r2, sp, #4
    b1c4:	1818      	adds	r0, r3, r0
    b1c6:	7816      	ldrb	r6, [r2, #0]
    b1c8:	7146      	strb	r6, [r0, #5]
    b1ca:	7852      	ldrb	r2, [r2, #1]
    b1cc:	7182      	strb	r2, [r0, #6]
		RegParams.pSubBandParams[bandId].subBandTimeout = 0;
    b1ce:	7b18      	ldrb	r0, [r3, #12]
    b1d0:	7b5a      	ldrb	r2, [r3, #13]
    b1d2:	0212      	lsls	r2, r2, #8
    b1d4:	4302      	orrs	r2, r0
    b1d6:	7b98      	ldrb	r0, [r3, #14]
    b1d8:	0400      	lsls	r0, r0, #16
    b1da:	4302      	orrs	r2, r0
    b1dc:	7bd8      	ldrb	r0, [r3, #15]
    b1de:	0600      	lsls	r0, r0, #24
    b1e0:	4310      	orrs	r0, r2
    b1e2:	006a      	lsls	r2, r5, #1
    b1e4:	1952      	adds	r2, r2, r5
    b1e6:	0092      	lsls	r2, r2, #2
    b1e8:	1812      	adds	r2, r2, r0
    b1ea:	2000      	movs	r0, #0
    b1ec:	7210      	strb	r0, [r2, #8]
    b1ee:	7250      	strb	r0, [r2, #9]
    b1f0:	7290      	strb	r0, [r2, #10]
    b1f2:	72d0      	strb	r0, [r2, #11]
		RegParams.pOtherChParams[updateDCycle.channelIndex].parametersDefined |= DUTY_CYCLE_DEFINED;
    b1f4:	7a1d      	ldrb	r5, [r3, #8]
    b1f6:	7a5a      	ldrb	r2, [r3, #9]
    b1f8:	0212      	lsls	r2, r2, #8
    b1fa:	432a      	orrs	r2, r5
    b1fc:	7a9d      	ldrb	r5, [r3, #10]
    b1fe:	042d      	lsls	r5, r5, #16
    b200:	432a      	orrs	r2, r5
    b202:	7add      	ldrb	r5, [r3, #11]
    b204:	062d      	lsls	r5, r5, #24
    b206:	4315      	orrs	r5, r2
    b208:	186d      	adds	r5, r5, r1
    b20a:	7aea      	ldrb	r2, [r5, #11]
    b20c:	2104      	movs	r1, #4
    b20e:	430a      	orrs	r2, r1
    b210:	72ea      	strb	r2, [r5, #11]
		PDS_STORE(RegParams.regParamItems.ch_param_2_item_id);
    b212:	2284      	movs	r2, #132	; 0x84
    b214:	0092      	lsls	r2, r2, #2
    b216:	5c9a      	ldrb	r2, [r3, r2]
    b218:	4907      	ldr	r1, [pc, #28]	; (b238 <setDutyCycle+0xcc>)
    b21a:	5c58      	ldrb	r0, [r3, r1]
    b21c:	0200      	lsls	r0, r0, #8
    b21e:	4310      	orrs	r0, r2
    b220:	b2c1      	uxtb	r1, r0
    b222:	0a00      	lsrs	r0, r0, #8
    b224:	4b05      	ldr	r3, [pc, #20]	; (b23c <setDutyCycle+0xd0>)
    b226:	4798      	blx	r3
    b228:	e7b5      	b.n	b196 <setDutyCycle+0x2a>
    b22a:	46c0      	nop			; (mov r8, r8)
    b22c:	00019da5 	.word	0x00019da5
    b230:	00009a55 	.word	0x00009a55
    b234:	200024d0 	.word	0x200024d0
    b238:	00000211 	.word	0x00000211
    b23c:	0000e0f9 	.word	0x0000e0f9

0000b240 <SearchAvailableChannel2>:
{
    b240:	b5f0      	push	{r4, r5, r6, r7, lr}
    b242:	46de      	mov	lr, fp
    b244:	4657      	mov	r7, sl
    b246:	464e      	mov	r6, r9
    b248:	4645      	mov	r5, r8
    b24a:	b5e0      	push	{r5, r6, r7, lr}
    b24c:	b087      	sub	sp, #28
    b24e:	af00      	add	r7, sp, #0
    b250:	0004      	movs	r4, r0
    b252:	4688      	mov	r8, r1
    b254:	60f9      	str	r1, [r7, #12]
    b256:	0015      	movs	r5, r2
    b258:	607b      	str	r3, [r7, #4]
	uint8_t ChList[maxChannels];
    b25a:	1dc3      	adds	r3, r0, #7
    b25c:	08db      	lsrs	r3, r3, #3
    b25e:	00db      	lsls	r3, r3, #3
    b260:	466a      	mov	r2, sp
    b262:	1ad3      	subs	r3, r2, r3
    b264:	469d      	mov	sp, r3
    b266:	613b      	str	r3, [r7, #16]
	memset(ChList, 0, sizeof(ChList));
    b268:	0002      	movs	r2, r0
    b26a:	2100      	movs	r1, #0
    b26c:	4668      	mov	r0, sp
    b26e:	4b5c      	ldr	r3, [pc, #368]	; (b3e0 <SearchAvailableChannel2+0x1a0>)
    b270:	4798      	blx	r3
	bool bandWithoutDutyCycle = (((1 << RegParams.band) & (ISM_EUBAND | ISM_ASBAND | (1 << ISM_JPN923))) == 0);
    b272:	232e      	movs	r3, #46	; 0x2e
    b274:	4a5b      	ldr	r2, [pc, #364]	; (b3e4 <SearchAvailableChannel2+0x1a4>)
    b276:	5cd6      	ldrb	r6, [r2, r3]
    if(transmissionType == false)
    b278:	4643      	mov	r3, r8
    b27a:	2b00      	cmp	r3, #0
    b27c:	d148      	bne.n	b310 <SearchAvailableChannel2+0xd0>
	    if(RegParams.FeaturesSupport & JOIN_BACKOFF_SUPPORT)
    b27e:	3320      	adds	r3, #32
    b280:	5cd3      	ldrb	r3, [r2, r3]
    b282:	069b      	lsls	r3, r3, #26
    b284:	d431      	bmi.n	b2ea <SearchAvailableChannel2+0xaa>
		result = LORAWAN_NO_CHANNELS_FOUND;
    b286:	2010      	movs	r0, #16
	for (i = 0; i < maxChannels; i++)
    b288:	2c00      	cmp	r4, #0
    b28a:	d100      	bne.n	b28e <SearchAvailableChannel2+0x4e>
    b28c:	e093      	b.n	b3b6 <SearchAvailableChannel2+0x176>
	bool bandWithoutDutyCycle = (((1 << RegParams.band) & (ISM_EUBAND | ISM_ASBAND | (1 << ISM_JPN923))) == 0);
    b28e:	4b56      	ldr	r3, [pc, #344]	; (b3e8 <SearchAvailableChannel2+0x1a8>)
    b290:	4133      	asrs	r3, r6
    b292:	2201      	movs	r2, #1
    b294:	401a      	ands	r2, r3
    b296:	4690      	mov	r8, r2
				(bandWithoutDutyCycle || RegParams.pSubBandParams[RegParams.pOtherChParams[i].subBandId].subBandTimeout == 0))
    b298:	4b52      	ldr	r3, [pc, #328]	; (b3e4 <SearchAvailableChannel2+0x1a4>)
    b29a:	7b19      	ldrb	r1, [r3, #12]
    b29c:	7b5a      	ldrb	r2, [r3, #13]
    b29e:	0212      	lsls	r2, r2, #8
    b2a0:	4311      	orrs	r1, r2
    b2a2:	7b9a      	ldrb	r2, [r3, #14]
    b2a4:	0412      	lsls	r2, r2, #16
    b2a6:	430a      	orrs	r2, r1
    b2a8:	7bd9      	ldrb	r1, [r3, #15]
    b2aa:	0609      	lsls	r1, r1, #24
    b2ac:	4311      	orrs	r1, r2
    b2ae:	468c      	mov	ip, r1
    b2b0:	7a18      	ldrb	r0, [r3, #8]
    b2b2:	7a5a      	ldrb	r2, [r3, #9]
    b2b4:	0212      	lsls	r2, r2, #8
    b2b6:	4302      	orrs	r2, r0
    b2b8:	7a98      	ldrb	r0, [r3, #10]
    b2ba:	0400      	lsls	r0, r0, #16
    b2bc:	4302      	orrs	r2, r0
    b2be:	7ad8      	ldrb	r0, [r3, #11]
    b2c0:	0600      	lsls	r0, r0, #24
    b2c2:	4310      	orrs	r0, r2
			if ((RegParams.pChParams[i].status == ENABLED) &&
    b2c4:	791a      	ldrb	r2, [r3, #4]
    b2c6:	7959      	ldrb	r1, [r3, #5]
    b2c8:	0209      	lsls	r1, r1, #8
    b2ca:	4311      	orrs	r1, r2
    b2cc:	799a      	ldrb	r2, [r3, #6]
    b2ce:	0412      	lsls	r2, r2, #16
    b2d0:	4311      	orrs	r1, r2
    b2d2:	79da      	ldrb	r2, [r3, #7]
    b2d4:	0612      	lsls	r2, r2, #24
    b2d6:	430a      	orrs	r2, r1
    b2d8:	0006      	movs	r6, r0
    b2da:	3608      	adds	r6, #8
    b2dc:	3009      	adds	r0, #9
				(bandWithoutDutyCycle || RegParams.pSubBandParams[RegParams.pOtherChParams[i].subBandId].subBandTimeout == 0))
    b2de:	2300      	movs	r3, #0
    b2e0:	617b      	str	r3, [r7, #20]
				(currDr >= RegParams.pChParams[i].dataRange.min) &&
    b2e2:	46aa      	mov	sl, r5
    b2e4:	46a9      	mov	r9, r5
    b2e6:	0025      	movs	r5, r4
    b2e8:	e036      	b.n	b358 <SearchAvailableChannel2+0x118>
		    if(SwTimerIsRunning(RegParams.pJoinDutyCycleTimer->timerId)) //check timerrunning
    b2ea:	0011      	movs	r1, r2
    b2ec:	7d13      	ldrb	r3, [r2, #20]
    b2ee:	7d52      	ldrb	r2, [r2, #21]
    b2f0:	0212      	lsls	r2, r2, #8
    b2f2:	431a      	orrs	r2, r3
    b2f4:	7d8b      	ldrb	r3, [r1, #22]
    b2f6:	041b      	lsls	r3, r3, #16
    b2f8:	431a      	orrs	r2, r3
    b2fa:	7dcb      	ldrb	r3, [r1, #23]
    b2fc:	061b      	lsls	r3, r3, #24
    b2fe:	4313      	orrs	r3, r2
    b300:	7a18      	ldrb	r0, [r3, #8]
    b302:	4b3a      	ldr	r3, [pc, #232]	; (b3ec <SearchAvailableChannel2+0x1ac>)
    b304:	4798      	blx	r3
    b306:	0003      	movs	r3, r0
			    return LORAWAN_NO_CHANNELS_FOUND;
    b308:	2010      	movs	r0, #16
		    if(SwTimerIsRunning(RegParams.pJoinDutyCycleTimer->timerId)) //check timerrunning
    b30a:	2b00      	cmp	r3, #0
    b30c:	d0bb      	beq.n	b286 <SearchAvailableChannel2+0x46>
    b30e:	e052      	b.n	b3b6 <SearchAvailableChannel2+0x176>
	    if(RegParams.cmnParams.paramsType2.aggregatedDutyCycleTimeout)
    b310:	4934      	ldr	r1, [pc, #208]	; (b3e4 <SearchAvailableChannel2+0x1a4>)
    b312:	23ba      	movs	r3, #186	; 0xba
    b314:	33ff      	adds	r3, #255	; 0xff
    b316:	5ccb      	ldrb	r3, [r1, r3]
    b318:	22dd      	movs	r2, #221	; 0xdd
    b31a:	0052      	lsls	r2, r2, #1
    b31c:	5c8a      	ldrb	r2, [r1, r2]
    b31e:	0212      	lsls	r2, r2, #8
    b320:	431a      	orrs	r2, r3
    b322:	23bc      	movs	r3, #188	; 0xbc
    b324:	33ff      	adds	r3, #255	; 0xff
    b326:	5ccb      	ldrb	r3, [r1, r3]
    b328:	041b      	lsls	r3, r3, #16
    b32a:	431a      	orrs	r2, r3
    b32c:	23de      	movs	r3, #222	; 0xde
    b32e:	005b      	lsls	r3, r3, #1
    b330:	5ccb      	ldrb	r3, [r1, r3]
    b332:	061b      	lsls	r3, r3, #24
    b334:	4313      	orrs	r3, r2
		    return LORAWAN_NO_CHANNELS_FOUND;
    b336:	2010      	movs	r0, #16
	    if(RegParams.cmnParams.paramsType2.aggregatedDutyCycleTimeout)
    b338:	2b00      	cmp	r3, #0
    b33a:	d0a4      	beq.n	b286 <SearchAvailableChannel2+0x46>
    b33c:	e03b      	b.n	b3b6 <SearchAvailableChannel2+0x176>
					ChList[num] = i;
    b33e:	693c      	ldr	r4, [r7, #16]
    b340:	6979      	ldr	r1, [r7, #20]
    b342:	5463      	strb	r3, [r4, r1]
					num++;
    b344:	3101      	adds	r1, #1
    b346:	b2c9      	uxtb	r1, r1
    b348:	6179      	str	r1, [r7, #20]
	for (i = 0; i < maxChannels; i++)
    b34a:	3301      	adds	r3, #1
    b34c:	b2db      	uxtb	r3, r3
    b34e:	3202      	adds	r2, #2
    b350:	360c      	adds	r6, #12
    b352:	300c      	adds	r0, #12
    b354:	429d      	cmp	r5, r3
    b356:	d02a      	beq.n	b3ae <SearchAvailableChannel2+0x16e>
			if ((RegParams.pChParams[i].status == ENABLED) &&
    b358:	7811      	ldrb	r1, [r2, #0]
    b35a:	2900      	cmp	r1, #0
    b35c:	d0f5      	beq.n	b34a <SearchAvailableChannel2+0x10a>
				(currDr >= RegParams.pChParams[i].dataRange.min) &&
    b35e:	7851      	ldrb	r1, [r2, #1]
    b360:	0709      	lsls	r1, r1, #28
    b362:	0f09      	lsrs	r1, r1, #28
			if ((RegParams.pChParams[i].status == ENABLED) &&
    b364:	4589      	cmp	r9, r1
    b366:	dbf0      	blt.n	b34a <SearchAvailableChannel2+0x10a>
				(currDr <= RegParams.pChParams[i].dataRange.max)&&
    b368:	7851      	ldrb	r1, [r2, #1]
    b36a:	0909      	lsrs	r1, r1, #4
				(currDr >= RegParams.pChParams[i].dataRange.min) &&
    b36c:	458a      	cmp	sl, r1
    b36e:	dcec      	bgt.n	b34a <SearchAvailableChannel2+0x10a>
				(currDr <= RegParams.pChParams[i].dataRange.max)&&
    b370:	4641      	mov	r1, r8
    b372:	2900      	cmp	r1, #0
    b374:	d014      	beq.n	b3a0 <SearchAvailableChannel2+0x160>
				(bandWithoutDutyCycle || RegParams.pSubBandParams[RegParams.pOtherChParams[i].subBandId].subBandTimeout == 0))
    b376:	7834      	ldrb	r4, [r6, #0]
    b378:	0061      	lsls	r1, r4, #1
    b37a:	1909      	adds	r1, r1, r4
    b37c:	0089      	lsls	r1, r1, #2
    b37e:	4461      	add	r1, ip
    b380:	7a0c      	ldrb	r4, [r1, #8]
    b382:	46a3      	mov	fp, r4
    b384:	60b9      	str	r1, [r7, #8]
    b386:	7a4c      	ldrb	r4, [r1, #9]
    b388:	0224      	lsls	r4, r4, #8
    b38a:	4659      	mov	r1, fp
    b38c:	430c      	orrs	r4, r1
    b38e:	68b9      	ldr	r1, [r7, #8]
    b390:	7a89      	ldrb	r1, [r1, #10]
    b392:	0409      	lsls	r1, r1, #16
    b394:	430c      	orrs	r4, r1
    b396:	68b9      	ldr	r1, [r7, #8]
    b398:	7ac9      	ldrb	r1, [r1, #11]
    b39a:	0609      	lsls	r1, r1, #24
    b39c:	4321      	orrs	r1, r4
    b39e:	d1d4      	bne.n	b34a <SearchAvailableChannel2+0x10a>
				if(((transmissionType == 0)  && (RegParams.pOtherChParams[i].joinRequestChannel == 1)) || (transmissionType != 0)) 
    b3a0:	68f9      	ldr	r1, [r7, #12]
    b3a2:	2900      	cmp	r1, #0
    b3a4:	d1cb      	bne.n	b33e <SearchAvailableChannel2+0xfe>
    b3a6:	7801      	ldrb	r1, [r0, #0]
    b3a8:	2900      	cmp	r1, #0
    b3aa:	d0ce      	beq.n	b34a <SearchAvailableChannel2+0x10a>
    b3ac:	e7c7      	b.n	b33e <SearchAvailableChannel2+0xfe>
		result = LORAWAN_NO_CHANNELS_FOUND;
    b3ae:	2010      	movs	r0, #16
	if(0 != num)
    b3b0:	697c      	ldr	r4, [r7, #20]
    b3b2:	2c00      	cmp	r4, #0
    b3b4:	d107      	bne.n	b3c6 <SearchAvailableChannel2+0x186>
}
    b3b6:	46bd      	mov	sp, r7
    b3b8:	b007      	add	sp, #28
    b3ba:	bc3c      	pop	{r2, r3, r4, r5}
    b3bc:	4690      	mov	r8, r2
    b3be:	4699      	mov	r9, r3
    b3c0:	46a2      	mov	sl, r4
    b3c2:	46ab      	mov	fp, r5
    b3c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		randomNumber = rand() % num;
    b3c6:	4b0a      	ldr	r3, [pc, #40]	; (b3f0 <SearchAvailableChannel2+0x1b0>)
    b3c8:	4798      	blx	r3
    b3ca:	0021      	movs	r1, r4
    b3cc:	4b09      	ldr	r3, [pc, #36]	; (b3f4 <SearchAvailableChannel2+0x1b4>)
    b3ce:	4798      	blx	r3
		*channelIndex = ChList[randomNumber];
    b3d0:	23ff      	movs	r3, #255	; 0xff
    b3d2:	4019      	ands	r1, r3
    b3d4:	693b      	ldr	r3, [r7, #16]
    b3d6:	5c5b      	ldrb	r3, [r3, r1]
    b3d8:	687a      	ldr	r2, [r7, #4]
    b3da:	7013      	strb	r3, [r2, #0]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    b3dc:	2008      	movs	r0, #8
    b3de:	e7ea      	b.n	b3b6 <SearchAvailableChannel2+0x176>
    b3e0:	00019ec9 	.word	0x00019ec9
    b3e4:	200024d0 	.word	0x200024d0
    b3e8:	00007fe3 	.word	0x00007fe3
    b3ec:	0000efc1 	.word	0x0000efc1
    b3f0:	0001a069 	.word	0x0001a069
    b3f4:	00016921 	.word	0x00016921

0000b3f8 <LORAREG_GetAttr_FreeChannel2>:
{
    b3f8:	b570      	push	{r4, r5, r6, lr}
	memcpy(&newFreeChannelReq,(NewFreeChannelReq_t *)attrInput,sizeof(NewFreeChannelReq_t));
    b3fa:	784c      	ldrb	r4, [r1, #1]
	if(newFreeChannelReq.maxChannels > RegParams.maxChannels)
    b3fc:	202a      	movs	r0, #42	; 0x2a
    b3fe:	4d07      	ldr	r5, [pc, #28]	; (b41c <LORAREG_GetAttr_FreeChannel2+0x24>)
    b400:	562d      	ldrsb	r5, [r5, r0]
		return LORAWAN_INVALID_PARAMETER;
    b402:	3820      	subs	r0, #32
	if(newFreeChannelReq.maxChannels > RegParams.maxChannels)
    b404:	42ac      	cmp	r4, r5
    b406:	dd00      	ble.n	b40a <LORAREG_GetAttr_FreeChannel2+0x12>
}
    b408:	bd70      	pop	{r4, r5, r6, pc}
		result = SearchAvailableChannel2(newFreeChannelReq.maxChannels,newFreeChannelReq.transmissionType,newFreeChannelReq.currDr,(uint8_t*)attrOutput);
    b40a:	7888      	ldrb	r0, [r1, #2]
    b40c:	7809      	ldrb	r1, [r1, #0]
    b40e:	0013      	movs	r3, r2
    b410:	0002      	movs	r2, r0
    b412:	0020      	movs	r0, r4
    b414:	4c02      	ldr	r4, [pc, #8]	; (b420 <LORAREG_GetAttr_FreeChannel2+0x28>)
    b416:	47a0      	blx	r4
	return result;
    b418:	e7f6      	b.n	b408 <LORAREG_GetAttr_FreeChannel2+0x10>
    b41a:	46c0      	nop			; (mov r8, r8)
    b41c:	200024d0 	.word	0x200024d0
    b420:	0000b241 	.word	0x0000b241

0000b424 <setJoinBackoffCntl>:
{   
    b424:	b500      	push	{lr}
    b426:	b083      	sub	sp, #12
	memcpy(&joinbackoffcntl,attrInput,sizeof(bool));
    b428:	780b      	ldrb	r3, [r1, #0]
    b42a:	466a      	mov	r2, sp
    b42c:	71d3      	strb	r3, [r2, #7]
	if(joinbackoffcntl == false)
    b42e:	2b00      	cmp	r3, #0
    b430:	d145      	bne.n	b4be <setJoinBackoffCntl+0x9a>
		if(RegParams.FeaturesSupport & JOIN_BACKOFF_SUPPORT)
    b432:	3320      	adds	r3, #32
    b434:	4a26      	ldr	r2, [pc, #152]	; (b4d0 <setJoinBackoffCntl+0xac>)
    b436:	5cd3      	ldrb	r3, [r2, r3]
    b438:	069a      	lsls	r2, r3, #26
    b43a:	d546      	bpl.n	b4ca <setJoinBackoffCntl+0xa6>
			RegParams.FeaturesSupport &= ~JOIN_BACKOFF_SUPPORT;
    b43c:	4924      	ldr	r1, [pc, #144]	; (b4d0 <setJoinBackoffCntl+0xac>)
    b43e:	2220      	movs	r2, #32
    b440:	4393      	bics	r3, r2
    b442:	548b      	strb	r3, [r1, r2]
			if (SwTimerIsRunning(RegParams.pJoinBackoffTimer->timerId))
    b444:	7e0b      	ldrb	r3, [r1, #24]
    b446:	7e4a      	ldrb	r2, [r1, #25]
    b448:	0212      	lsls	r2, r2, #8
    b44a:	431a      	orrs	r2, r3
    b44c:	7e8b      	ldrb	r3, [r1, #26]
    b44e:	041b      	lsls	r3, r3, #16
    b450:	431a      	orrs	r2, r3
    b452:	7ecb      	ldrb	r3, [r1, #27]
    b454:	061b      	lsls	r3, r3, #24
    b456:	4313      	orrs	r3, r2
    b458:	7818      	ldrb	r0, [r3, #0]
    b45a:	4b1e      	ldr	r3, [pc, #120]	; (b4d4 <setJoinBackoffCntl+0xb0>)
    b45c:	4798      	blx	r3
    b45e:	2800      	cmp	r0, #0
    b460:	d11e      	bne.n	b4a0 <setJoinBackoffCntl+0x7c>
			if (SwTimerIsRunning(RegParams.pJoinDutyCycleTimer->timerId))
    b462:	491b      	ldr	r1, [pc, #108]	; (b4d0 <setJoinBackoffCntl+0xac>)
    b464:	7d0b      	ldrb	r3, [r1, #20]
    b466:	7d4a      	ldrb	r2, [r1, #21]
    b468:	0212      	lsls	r2, r2, #8
    b46a:	431a      	orrs	r2, r3
    b46c:	7d8b      	ldrb	r3, [r1, #22]
    b46e:	041b      	lsls	r3, r3, #16
    b470:	431a      	orrs	r2, r3
    b472:	7dcb      	ldrb	r3, [r1, #23]
    b474:	061b      	lsls	r3, r3, #24
    b476:	4313      	orrs	r3, r2
    b478:	7a18      	ldrb	r0, [r3, #8]
    b47a:	4b16      	ldr	r3, [pc, #88]	; (b4d4 <setJoinBackoffCntl+0xb0>)
    b47c:	4798      	blx	r3
    b47e:	2800      	cmp	r0, #0
    b480:	d023      	beq.n	b4ca <setJoinBackoffCntl+0xa6>
				SwTimerStop(RegParams.pJoinDutyCycleTimer->timerId);
    b482:	4913      	ldr	r1, [pc, #76]	; (b4d0 <setJoinBackoffCntl+0xac>)
    b484:	7d0b      	ldrb	r3, [r1, #20]
    b486:	7d4a      	ldrb	r2, [r1, #21]
    b488:	0212      	lsls	r2, r2, #8
    b48a:	431a      	orrs	r2, r3
    b48c:	7d8b      	ldrb	r3, [r1, #22]
    b48e:	041b      	lsls	r3, r3, #16
    b490:	431a      	orrs	r2, r3
    b492:	7dcb      	ldrb	r3, [r1, #23]
    b494:	061b      	lsls	r3, r3, #24
    b496:	4313      	orrs	r3, r2
    b498:	7a18      	ldrb	r0, [r3, #8]
    b49a:	4b0f      	ldr	r3, [pc, #60]	; (b4d8 <setJoinBackoffCntl+0xb4>)
    b49c:	4798      	blx	r3
    b49e:	e014      	b.n	b4ca <setJoinBackoffCntl+0xa6>
				SwTimerStop(RegParams.pJoinBackoffTimer->timerId);
    b4a0:	490b      	ldr	r1, [pc, #44]	; (b4d0 <setJoinBackoffCntl+0xac>)
    b4a2:	7e0b      	ldrb	r3, [r1, #24]
    b4a4:	7e4a      	ldrb	r2, [r1, #25]
    b4a6:	0212      	lsls	r2, r2, #8
    b4a8:	431a      	orrs	r2, r3
    b4aa:	7e8b      	ldrb	r3, [r1, #26]
    b4ac:	041b      	lsls	r3, r3, #16
    b4ae:	431a      	orrs	r2, r3
    b4b0:	7ecb      	ldrb	r3, [r1, #27]
    b4b2:	061b      	lsls	r3, r3, #24
    b4b4:	4313      	orrs	r3, r2
    b4b6:	7818      	ldrb	r0, [r3, #0]
    b4b8:	4b07      	ldr	r3, [pc, #28]	; (b4d8 <setJoinBackoffCntl+0xb4>)
    b4ba:	4798      	blx	r3
    b4bc:	e7d1      	b.n	b462 <setJoinBackoffCntl+0x3e>
		RegParams.FeaturesSupport |= JOIN_BACKOFF_SUPPORT;
    b4be:	4904      	ldr	r1, [pc, #16]	; (b4d0 <setJoinBackoffCntl+0xac>)
    b4c0:	2220      	movs	r2, #32
    b4c2:	5c8b      	ldrb	r3, [r1, r2]
    b4c4:	2020      	movs	r0, #32
    b4c6:	4303      	orrs	r3, r0
    b4c8:	548b      	strb	r3, [r1, r2]
}
    b4ca:	2008      	movs	r0, #8
    b4cc:	b003      	add	sp, #12
    b4ce:	bd00      	pop	{pc}
    b4d0:	200024d0 	.word	0x200024d0
    b4d4:	0000efc1 	.word	0x0000efc1
    b4d8:	0000f141 	.word	0x0000f141

0000b4dc <setJoinBackOffTimer>:
{
    b4dc:	b510      	push	{r4, lr}
    b4de:	b084      	sub	sp, #16
	memcpy(&startJoinBackOffTimer,attrInput,sizeof(bool));
    b4e0:	780b      	ldrb	r3, [r1, #0]
    b4e2:	220f      	movs	r2, #15
    b4e4:	446a      	add	r2, sp
    b4e6:	7013      	strb	r3, [r2, #0]
	if(startJoinBackOffTimer == true)
    b4e8:	2b00      	cmp	r3, #0
    b4ea:	d113      	bne.n	b514 <setJoinBackOffTimer+0x38>
		SwTimerStop(RegParams.pJoinBackoffTimer->timerId);
    b4ec:	4c13      	ldr	r4, [pc, #76]	; (b53c <setJoinBackOffTimer+0x60>)
    b4ee:	7e23      	ldrb	r3, [r4, #24]
    b4f0:	7e62      	ldrb	r2, [r4, #25]
    b4f2:	0212      	lsls	r2, r2, #8
    b4f4:	431a      	orrs	r2, r3
    b4f6:	7ea3      	ldrb	r3, [r4, #26]
    b4f8:	041b      	lsls	r3, r3, #16
    b4fa:	431a      	orrs	r2, r3
    b4fc:	7ee3      	ldrb	r3, [r4, #27]
    b4fe:	061b      	lsls	r3, r3, #24
    b500:	4313      	orrs	r3, r2
    b502:	7818      	ldrb	r0, [r3, #0]
    b504:	4b0e      	ldr	r3, [pc, #56]	; (b540 <setJoinBackOffTimer+0x64>)
    b506:	4798      	blx	r3
		RegParams.joinbccount = 0;
    b508:	2200      	movs	r2, #0
    b50a:	2342      	movs	r3, #66	; 0x42
    b50c:	54e2      	strb	r2, [r4, r3]
}
    b50e:	2008      	movs	r0, #8
    b510:	b004      	add	sp, #16
    b512:	bd10      	pop	{r4, pc}
		SwTimerStart (RegParams.pJoinBackoffTimer->timerId, MS_TO_US(BACKOFF_BASE_TIME_IN_MS), SW_TIMEOUT_RELATIVE, (void *)JoinBackoffCallback, NULL);
    b514:	4909      	ldr	r1, [pc, #36]	; (b53c <setJoinBackOffTimer+0x60>)
    b516:	7e0b      	ldrb	r3, [r1, #24]
    b518:	7e4a      	ldrb	r2, [r1, #25]
    b51a:	0212      	lsls	r2, r2, #8
    b51c:	431a      	orrs	r2, r3
    b51e:	7e8b      	ldrb	r3, [r1, #26]
    b520:	041b      	lsls	r3, r3, #16
    b522:	431a      	orrs	r2, r3
    b524:	7ecb      	ldrb	r3, [r1, #27]
    b526:	061b      	lsls	r3, r3, #24
    b528:	4313      	orrs	r3, r2
    b52a:	7818      	ldrb	r0, [r3, #0]
    b52c:	2300      	movs	r3, #0
    b52e:	9300      	str	r3, [sp, #0]
    b530:	4b04      	ldr	r3, [pc, #16]	; (b544 <setJoinBackOffTimer+0x68>)
    b532:	2200      	movs	r2, #0
    b534:	4904      	ldr	r1, [pc, #16]	; (b548 <setJoinBackOffTimer+0x6c>)
    b536:	4c05      	ldr	r4, [pc, #20]	; (b54c <setJoinBackOffTimer+0x70>)
    b538:	47a0      	blx	r4
    b53a:	e7e8      	b.n	b50e <setJoinBackOffTimer+0x32>
    b53c:	200024d0 	.word	0x200024d0
    b540:	0000f141 	.word	0x0000f141
    b544:	0000c15d 	.word	0x0000c15d
    b548:	6b49d200 	.word	0x6b49d200
    b54c:	0000ee29 	.word	0x0000ee29

0000b550 <setJoinDutyCycleTimer>:
{
    b550:	b530      	push	{r4, r5, lr}
    b552:	b085      	sub	sp, #20
	memcpy(&UpdateJoinDutyCycleTimer,attrInput,sizeof(UpdateJoinDutyCycleTimer_t));
    b554:	ac02      	add	r4, sp, #8
    b556:	2208      	movs	r2, #8
    b558:	0020      	movs	r0, r4
    b55a:	4b93      	ldr	r3, [pc, #588]	; (b7a8 <setJoinDutyCycleTimer+0x258>)
    b55c:	4798      	blx	r3
	if(UpdateJoinDutyCycleTimer.startJoinDutyCycleTimer == true)
    b55e:	7923      	ldrb	r3, [r4, #4]
    b560:	2b00      	cmp	r3, #0
    b562:	d100      	bne.n	b566 <setJoinDutyCycleTimer+0x16>
    b564:	e0f8      	b.n	b758 <setJoinDutyCycleTimer+0x208>
			if(RegParams.joinbccount < AGGREGATEDTIME_1HR)
    b566:	2342      	movs	r3, #66	; 0x42
    b568:	4a90      	ldr	r2, [pc, #576]	; (b7ac <setJoinDutyCycleTimer+0x25c>)
    b56a:	5cd3      	ldrb	r3, [r2, r3]
    b56c:	2b01      	cmp	r3, #1
    b56e:	d800      	bhi.n	b572 <setJoinDutyCycleTimer+0x22>
    b570:	e081      	b.n	b676 <setJoinDutyCycleTimer+0x126>
			else if (RegParams.joinbccount < AGGREGATEDTIME_10HR)
    b572:	2b13      	cmp	r3, #19
    b574:	d900      	bls.n	b578 <setJoinDutyCycleTimer+0x28>
    b576:	e08d      	b.n	b694 <setJoinDutyCycleTimer+0x144>
				RegParams.joinDutyCycleTimeout = (uint32_t)UpdateJoinDutyCycleTimer.joinreqTimeonAir * (JOIN_BACKOFF_PRESCALAR_10HR - 1);
    b578:	4b8d      	ldr	r3, [pc, #564]	; (b7b0 <setJoinDutyCycleTimer+0x260>)
    b57a:	9a02      	ldr	r2, [sp, #8]
    b57c:	4353      	muls	r3, r2
    b57e:	4a8b      	ldr	r2, [pc, #556]	; (b7ac <setJoinDutyCycleTimer+0x25c>)
    b580:	323e      	adds	r2, #62	; 0x3e
    b582:	7013      	strb	r3, [r2, #0]
    b584:	0a19      	lsrs	r1, r3, #8
    b586:	7051      	strb	r1, [r2, #1]
    b588:	0c19      	lsrs	r1, r3, #16
    b58a:	7091      	strb	r1, [r2, #2]
    b58c:	0e1b      	lsrs	r3, r3, #24
    b58e:	70d3      	strb	r3, [r2, #3]
		if(SwTimerIsRunning(RegParams.pJoinDutyCycleTimer->timerId))
    b590:	4986      	ldr	r1, [pc, #536]	; (b7ac <setJoinDutyCycleTimer+0x25c>)
    b592:	7d0b      	ldrb	r3, [r1, #20]
    b594:	7d4a      	ldrb	r2, [r1, #21]
    b596:	0212      	lsls	r2, r2, #8
    b598:	431a      	orrs	r2, r3
    b59a:	7d8b      	ldrb	r3, [r1, #22]
    b59c:	041b      	lsls	r3, r3, #16
    b59e:	431a      	orrs	r2, r3
    b5a0:	7dcb      	ldrb	r3, [r1, #23]
    b5a2:	061b      	lsls	r3, r3, #24
    b5a4:	4313      	orrs	r3, r2
    b5a6:	7a18      	ldrb	r0, [r3, #8]
    b5a8:	4b82      	ldr	r3, [pc, #520]	; (b7b4 <setJoinDutyCycleTimer+0x264>)
    b5aa:	4798      	blx	r3
	uint32_t delta = 0,ticks;
    b5ac:	2400      	movs	r4, #0
		if(SwTimerIsRunning(RegParams.pJoinDutyCycleTimer->timerId))
    b5ae:	2800      	cmp	r0, #0
    b5b0:	d17d      	bne.n	b6ae <setJoinDutyCycleTimer+0x15e>
		if(RegParams.joinDutyCycleTimeout != 0)
    b5b2:	4b7e      	ldr	r3, [pc, #504]	; (b7ac <setJoinDutyCycleTimer+0x25c>)
    b5b4:	213e      	movs	r1, #62	; 0x3e
    b5b6:	5c59      	ldrb	r1, [r3, r1]
    b5b8:	203f      	movs	r0, #63	; 0x3f
    b5ba:	5c18      	ldrb	r0, [r3, r0]
    b5bc:	0200      	lsls	r0, r0, #8
    b5be:	4308      	orrs	r0, r1
    b5c0:	2140      	movs	r1, #64	; 0x40
    b5c2:	5c59      	ldrb	r1, [r3, r1]
    b5c4:	0409      	lsls	r1, r1, #16
    b5c6:	4308      	orrs	r0, r1
    b5c8:	2141      	movs	r1, #65	; 0x41
    b5ca:	5c59      	ldrb	r1, [r3, r1]
    b5cc:	0609      	lsls	r1, r1, #24
    b5ce:	4301      	orrs	r1, r0
    b5d0:	d100      	bne.n	b5d4 <setJoinDutyCycleTimer+0x84>
    b5d2:	e0e5      	b.n	b7a0 <setJoinDutyCycleTimer+0x250>
			if(RegParams.joinDutyCycleTimeout > delta)
    b5d4:	428c      	cmp	r4, r1
    b5d6:	d300      	bcc.n	b5da <setJoinDutyCycleTimer+0x8a>
    b5d8:	e0b6      	b.n	b748 <setJoinDutyCycleTimer+0x1f8>
				RegParams.joinDutyCycleTimeout = RegParams.joinDutyCycleTimeout - delta;
    b5da:	1b09      	subs	r1, r1, r4
    b5dc:	333e      	adds	r3, #62	; 0x3e
    b5de:	7019      	strb	r1, [r3, #0]
    b5e0:	0a0a      	lsrs	r2, r1, #8
    b5e2:	705a      	strb	r2, [r3, #1]
    b5e4:	0c0a      	lsrs	r2, r1, #16
    b5e6:	709a      	strb	r2, [r3, #2]
    b5e8:	0e0a      	lsrs	r2, r1, #24
    b5ea:	70da      	strb	r2, [r3, #3]
				if(RegParams.joinDutyCycleTimeout > US_TO_MS(SWTIMER_MAX_TIMEOUT))
    b5ec:	4b72      	ldr	r3, [pc, #456]	; (b7b8 <setJoinDutyCycleTimer+0x268>)
    b5ee:	4299      	cmp	r1, r3
    b5f0:	d800      	bhi.n	b5f4 <setJoinDutyCycleTimer+0xa4>
    b5f2:	e093      	b.n	b71c <setJoinDutyCycleTimer+0x1cc>
					RegParams.pJoinDutyCycleTimer->remainingtime =RegParams.joinDutyCycleTimeout - (US_TO_MS(SWTIMER_MAX_TIMEOUT)) ;
    b5f4:	4c6d      	ldr	r4, [pc, #436]	; (b7ac <setJoinDutyCycleTimer+0x25c>)
    b5f6:	7d23      	ldrb	r3, [r4, #20]
    b5f8:	7d62      	ldrb	r2, [r4, #21]
    b5fa:	0212      	lsls	r2, r2, #8
    b5fc:	431a      	orrs	r2, r3
    b5fe:	7da3      	ldrb	r3, [r4, #22]
    b600:	041b      	lsls	r3, r3, #16
    b602:	431a      	orrs	r2, r3
    b604:	7de3      	ldrb	r3, [r4, #23]
    b606:	061b      	lsls	r3, r3, #24
    b608:	4313      	orrs	r3, r2
    b60a:	4a6c      	ldr	r2, [pc, #432]	; (b7bc <setJoinDutyCycleTimer+0x26c>)
    b60c:	4694      	mov	ip, r2
    b60e:	4461      	add	r1, ip
    b610:	7119      	strb	r1, [r3, #4]
    b612:	0a0a      	lsrs	r2, r1, #8
    b614:	715a      	strb	r2, [r3, #5]
    b616:	0c0a      	lsrs	r2, r1, #16
    b618:	719a      	strb	r2, [r3, #6]
    b61a:	0e09      	lsrs	r1, r1, #24
    b61c:	71d9      	strb	r1, [r3, #7]
					SwTimerStart(RegParams.pJoinDutyCycleTimer->timerId, SWTIMER_MAX_TIMEOUT, SW_TIMEOUT_RELATIVE, (void *)JoinDutyCycleCallback, NULL);
    b61e:	7d23      	ldrb	r3, [r4, #20]
    b620:	7d62      	ldrb	r2, [r4, #21]
    b622:	0212      	lsls	r2, r2, #8
    b624:	431a      	orrs	r2, r3
    b626:	7da3      	ldrb	r3, [r4, #22]
    b628:	041b      	lsls	r3, r3, #16
    b62a:	431a      	orrs	r2, r3
    b62c:	7de3      	ldrb	r3, [r4, #23]
    b62e:	061b      	lsls	r3, r3, #24
    b630:	4313      	orrs	r3, r2
    b632:	7a18      	ldrb	r0, [r3, #8]
    b634:	2300      	movs	r3, #0
    b636:	9300      	str	r3, [sp, #0]
    b638:	4b61      	ldr	r3, [pc, #388]	; (b7c0 <setJoinDutyCycleTimer+0x270>)
    b63a:	2200      	movs	r2, #0
    b63c:	4961      	ldr	r1, [pc, #388]	; (b7c4 <setJoinDutyCycleTimer+0x274>)
    b63e:	4d62      	ldr	r5, [pc, #392]	; (b7c8 <setJoinDutyCycleTimer+0x278>)
    b640:	47a8      	blx	r5
					RegParams.joinDutyCycleTimeout = RegParams.joinDutyCycleTimeout - (US_TO_MS(SWTIMER_MAX_TIMEOUT));
    b642:	233e      	movs	r3, #62	; 0x3e
    b644:	5ce3      	ldrb	r3, [r4, r3]
    b646:	223f      	movs	r2, #63	; 0x3f
    b648:	5ca2      	ldrb	r2, [r4, r2]
    b64a:	0212      	lsls	r2, r2, #8
    b64c:	431a      	orrs	r2, r3
    b64e:	2340      	movs	r3, #64	; 0x40
    b650:	5ce3      	ldrb	r3, [r4, r3]
    b652:	041b      	lsls	r3, r3, #16
    b654:	431a      	orrs	r2, r3
    b656:	2341      	movs	r3, #65	; 0x41
    b658:	5ce3      	ldrb	r3, [r4, r3]
    b65a:	061b      	lsls	r3, r3, #24
    b65c:	4313      	orrs	r3, r2
    b65e:	4a57      	ldr	r2, [pc, #348]	; (b7bc <setJoinDutyCycleTimer+0x26c>)
    b660:	4694      	mov	ip, r2
    b662:	4463      	add	r3, ip
    b664:	343e      	adds	r4, #62	; 0x3e
    b666:	7023      	strb	r3, [r4, #0]
    b668:	0a1a      	lsrs	r2, r3, #8
    b66a:	7062      	strb	r2, [r4, #1]
    b66c:	0c1a      	lsrs	r2, r3, #16
    b66e:	70a2      	strb	r2, [r4, #2]
    b670:	0e1b      	lsrs	r3, r3, #24
    b672:	70e3      	strb	r3, [r4, #3]
    b674:	e094      	b.n	b7a0 <setJoinDutyCycleTimer+0x250>
				RegParams.joinDutyCycleTimeout = (uint32_t)UpdateJoinDutyCycleTimer.joinreqTimeonAir * (JOIN_BACKOFF_PRESCALAR_1HR - 1);
    b676:	9a02      	ldr	r2, [sp, #8]
    b678:	0053      	lsls	r3, r2, #1
    b67a:	189b      	adds	r3, r3, r2
    b67c:	015a      	lsls	r2, r3, #5
    b67e:	189b      	adds	r3, r3, r2
    b680:	4a4a      	ldr	r2, [pc, #296]	; (b7ac <setJoinDutyCycleTimer+0x25c>)
    b682:	323e      	adds	r2, #62	; 0x3e
    b684:	7013      	strb	r3, [r2, #0]
    b686:	0a19      	lsrs	r1, r3, #8
    b688:	7051      	strb	r1, [r2, #1]
    b68a:	0c19      	lsrs	r1, r3, #16
    b68c:	7091      	strb	r1, [r2, #2]
    b68e:	0e1b      	lsrs	r3, r3, #24
    b690:	70d3      	strb	r3, [r2, #3]
    b692:	e77d      	b.n	b590 <setJoinDutyCycleTimer+0x40>
				RegParams.joinDutyCycleTimeout = (uint32_t)UpdateJoinDutyCycleTimer.joinreqTimeonAir * (JOIN_BACKOFF_PRESCALAR_24HR - 1);
    b694:	4b4d      	ldr	r3, [pc, #308]	; (b7cc <setJoinDutyCycleTimer+0x27c>)
    b696:	9a02      	ldr	r2, [sp, #8]
    b698:	4353      	muls	r3, r2
    b69a:	4a44      	ldr	r2, [pc, #272]	; (b7ac <setJoinDutyCycleTimer+0x25c>)
    b69c:	323e      	adds	r2, #62	; 0x3e
    b69e:	7013      	strb	r3, [r2, #0]
    b6a0:	0a19      	lsrs	r1, r3, #8
    b6a2:	7051      	strb	r1, [r2, #1]
    b6a4:	0c19      	lsrs	r1, r3, #16
    b6a6:	7091      	strb	r1, [r2, #2]
    b6a8:	0e1b      	lsrs	r3, r3, #24
    b6aa:	70d3      	strb	r3, [r2, #3]
    b6ac:	e770      	b.n	b590 <setJoinDutyCycleTimer+0x40>
			ticks = SwTimerReadValue(RegParams.pJoinDutyCycleTimer->timerId);
    b6ae:	4c3f      	ldr	r4, [pc, #252]	; (b7ac <setJoinDutyCycleTimer+0x25c>)
    b6b0:	7d23      	ldrb	r3, [r4, #20]
    b6b2:	7d62      	ldrb	r2, [r4, #21]
    b6b4:	0212      	lsls	r2, r2, #8
    b6b6:	431a      	orrs	r2, r3
    b6b8:	7da3      	ldrb	r3, [r4, #22]
    b6ba:	041b      	lsls	r3, r3, #16
    b6bc:	431a      	orrs	r2, r3
    b6be:	7de3      	ldrb	r3, [r4, #23]
    b6c0:	061b      	lsls	r3, r3, #24
    b6c2:	4313      	orrs	r3, r2
    b6c4:	7a18      	ldrb	r0, [r3, #8]
    b6c6:	4b42      	ldr	r3, [pc, #264]	; (b7d0 <setJoinDutyCycleTimer+0x280>)
    b6c8:	4798      	blx	r3
    b6ca:	0005      	movs	r5, r0
			SwTimerStop(RegParams.pJoinDutyCycleTimer->timerId);
    b6cc:	7d23      	ldrb	r3, [r4, #20]
    b6ce:	7d62      	ldrb	r2, [r4, #21]
    b6d0:	0212      	lsls	r2, r2, #8
    b6d2:	431a      	orrs	r2, r3
    b6d4:	7da3      	ldrb	r3, [r4, #22]
    b6d6:	041b      	lsls	r3, r3, #16
    b6d8:	431a      	orrs	r2, r3
    b6da:	7de3      	ldrb	r3, [r4, #23]
    b6dc:	061b      	lsls	r3, r3, #24
    b6de:	4313      	orrs	r3, r2
    b6e0:	7a18      	ldrb	r0, [r3, #8]
    b6e2:	4b3c      	ldr	r3, [pc, #240]	; (b7d4 <setJoinDutyCycleTimer+0x284>)
    b6e4:	4798      	blx	r3
			delta = RegParams.pJoinDutyCycleTimer->lastTimerInterval- US_TO_MS(ticks);
    b6e6:	7d23      	ldrb	r3, [r4, #20]
    b6e8:	7d62      	ldrb	r2, [r4, #21]
    b6ea:	0212      	lsls	r2, r2, #8
    b6ec:	431a      	orrs	r2, r3
    b6ee:	7da3      	ldrb	r3, [r4, #22]
    b6f0:	041b      	lsls	r3, r3, #16
    b6f2:	431a      	orrs	r2, r3
    b6f4:	7de3      	ldrb	r3, [r4, #23]
    b6f6:	061b      	lsls	r3, r3, #24
    b6f8:	4313      	orrs	r3, r2
    b6fa:	781a      	ldrb	r2, [r3, #0]
    b6fc:	785c      	ldrb	r4, [r3, #1]
    b6fe:	0224      	lsls	r4, r4, #8
    b700:	4322      	orrs	r2, r4
    b702:	789c      	ldrb	r4, [r3, #2]
    b704:	0424      	lsls	r4, r4, #16
    b706:	4314      	orrs	r4, r2
    b708:	78da      	ldrb	r2, [r3, #3]
    b70a:	0612      	lsls	r2, r2, #24
    b70c:	4314      	orrs	r4, r2
    b70e:	21fa      	movs	r1, #250	; 0xfa
    b710:	0089      	lsls	r1, r1, #2
    b712:	0028      	movs	r0, r5
    b714:	4b30      	ldr	r3, [pc, #192]	; (b7d8 <setJoinDutyCycleTimer+0x288>)
    b716:	4798      	blx	r3
    b718:	1a24      	subs	r4, r4, r0
    b71a:	e74a      	b.n	b5b2 <setJoinDutyCycleTimer+0x62>
				SwTimerStart (RegParams.pJoinDutyCycleTimer->timerId, MS_TO_US(RegParams.joinDutyCycleTimeout), SW_TIMEOUT_RELATIVE, (void *)JoinDutyCycleCallback, NULL);
    b71c:	20fa      	movs	r0, #250	; 0xfa
    b71e:	0080      	lsls	r0, r0, #2
    b720:	4341      	muls	r1, r0
    b722:	4c22      	ldr	r4, [pc, #136]	; (b7ac <setJoinDutyCycleTimer+0x25c>)
    b724:	7d23      	ldrb	r3, [r4, #20]
    b726:	7d62      	ldrb	r2, [r4, #21]
    b728:	0212      	lsls	r2, r2, #8
    b72a:	431a      	orrs	r2, r3
    b72c:	7da3      	ldrb	r3, [r4, #22]
    b72e:	041b      	lsls	r3, r3, #16
    b730:	431a      	orrs	r2, r3
    b732:	7de3      	ldrb	r3, [r4, #23]
    b734:	061b      	lsls	r3, r3, #24
    b736:	4313      	orrs	r3, r2
    b738:	7a18      	ldrb	r0, [r3, #8]
    b73a:	2300      	movs	r3, #0
    b73c:	9300      	str	r3, [sp, #0]
    b73e:	4b20      	ldr	r3, [pc, #128]	; (b7c0 <setJoinDutyCycleTimer+0x270>)
    b740:	2200      	movs	r2, #0
    b742:	4c21      	ldr	r4, [pc, #132]	; (b7c8 <setJoinDutyCycleTimer+0x278>)
    b744:	47a0      	blx	r4
    b746:	e02b      	b.n	b7a0 <setJoinDutyCycleTimer+0x250>
				RegParams.joinDutyCycleTimeout = 0;
    b748:	4b18      	ldr	r3, [pc, #96]	; (b7ac <setJoinDutyCycleTimer+0x25c>)
    b74a:	333e      	adds	r3, #62	; 0x3e
    b74c:	2200      	movs	r2, #0
    b74e:	701a      	strb	r2, [r3, #0]
    b750:	705a      	strb	r2, [r3, #1]
    b752:	709a      	strb	r2, [r3, #2]
    b754:	70da      	strb	r2, [r3, #3]
    b756:	e023      	b.n	b7a0 <setJoinDutyCycleTimer+0x250>
		SwTimerStop(RegParams.pJoinDutyCycleTimer->timerId);
    b758:	4c14      	ldr	r4, [pc, #80]	; (b7ac <setJoinDutyCycleTimer+0x25c>)
    b75a:	7d23      	ldrb	r3, [r4, #20]
    b75c:	7d62      	ldrb	r2, [r4, #21]
    b75e:	0212      	lsls	r2, r2, #8
    b760:	431a      	orrs	r2, r3
    b762:	7da3      	ldrb	r3, [r4, #22]
    b764:	041b      	lsls	r3, r3, #16
    b766:	431a      	orrs	r2, r3
    b768:	7de3      	ldrb	r3, [r4, #23]
    b76a:	061b      	lsls	r3, r3, #24
    b76c:	4313      	orrs	r3, r2
    b76e:	7a18      	ldrb	r0, [r3, #8]
    b770:	4b18      	ldr	r3, [pc, #96]	; (b7d4 <setJoinDutyCycleTimer+0x284>)
    b772:	4798      	blx	r3
		RegParams.joinDutyCycleTimeout = 0;
    b774:	0023      	movs	r3, r4
    b776:	333e      	adds	r3, #62	; 0x3e
    b778:	2200      	movs	r2, #0
    b77a:	701a      	strb	r2, [r3, #0]
    b77c:	705a      	strb	r2, [r3, #1]
    b77e:	709a      	strb	r2, [r3, #2]
    b780:	70da      	strb	r2, [r3, #3]
		RegParams.pJoinDutyCycleTimer->remainingtime =0;
    b782:	7d23      	ldrb	r3, [r4, #20]
    b784:	7d62      	ldrb	r2, [r4, #21]
    b786:	0212      	lsls	r2, r2, #8
    b788:	431a      	orrs	r2, r3
    b78a:	7da3      	ldrb	r3, [r4, #22]
    b78c:	041b      	lsls	r3, r3, #16
    b78e:	431a      	orrs	r2, r3
    b790:	7de3      	ldrb	r3, [r4, #23]
    b792:	061b      	lsls	r3, r3, #24
    b794:	4313      	orrs	r3, r2
    b796:	2200      	movs	r2, #0
    b798:	711a      	strb	r2, [r3, #4]
    b79a:	715a      	strb	r2, [r3, #5]
    b79c:	719a      	strb	r2, [r3, #6]
    b79e:	71da      	strb	r2, [r3, #7]
}
    b7a0:	2008      	movs	r0, #8
    b7a2:	b005      	add	sp, #20
    b7a4:	bd30      	pop	{r4, r5, pc}
    b7a6:	46c0      	nop			; (mov r8, r8)
    b7a8:	00019da5 	.word	0x00019da5
    b7ac:	200024d0 	.word	0x200024d0
    b7b0:	000003e7 	.word	0x000003e7
    b7b4:	0000efc1 	.word	0x0000efc1
    b7b8:	0020c49b 	.word	0x0020c49b
    b7bc:	ffdf3b65 	.word	0xffdf3b65
    b7c0:	0000c081 	.word	0x0000c081
    b7c4:	7fffffff 	.word	0x7fffffff
    b7c8:	0000ee29 	.word	0x0000ee29
    b7cc:	0000270f 	.word	0x0000270f
    b7d0:	0000efd5 	.word	0x0000efd5
    b7d4:	0000f141 	.word	0x0000f141
    b7d8:	00016641 	.word	0x00016641

0000b7dc <setDutyCycleTimer>:
{
    b7dc:	b5f0      	push	{r4, r5, r6, r7, lr}
    b7de:	46de      	mov	lr, fp
    b7e0:	4657      	mov	r7, sl
    b7e2:	464e      	mov	r6, r9
    b7e4:	4645      	mov	r5, r8
    b7e6:	b5e0      	push	{r5, r6, r7, lr}
    b7e8:	b087      	sub	sp, #28
	memcpy(&updateDCTimer,attrInput,sizeof(UpdateDutyCycleTimer_t));
    b7ea:	2206      	movs	r2, #6
    b7ec:	a804      	add	r0, sp, #16
    b7ee:	4bc9      	ldr	r3, [pc, #804]	; (bb14 <setDutyCycleTimer+0x338>)
    b7f0:	4798      	blx	r3
    bandId = RegParams.pOtherChParams[RegParams.lastUsedChannelIndex].subBandId;
    b7f2:	49c9      	ldr	r1, [pc, #804]	; (bb18 <setDutyCycleTimer+0x33c>)
    b7f4:	7a0b      	ldrb	r3, [r1, #8]
    b7f6:	7a4a      	ldrb	r2, [r1, #9]
    b7f8:	0212      	lsls	r2, r2, #8
    b7fa:	4313      	orrs	r3, r2
    b7fc:	7a8a      	ldrb	r2, [r1, #10]
    b7fe:	0412      	lsls	r2, r2, #16
    b800:	431a      	orrs	r2, r3
    b802:	7acb      	ldrb	r3, [r1, #11]
    b804:	061b      	lsls	r3, r3, #24
    b806:	431a      	orrs	r2, r3
    b808:	232f      	movs	r3, #47	; 0x2f
    b80a:	5cc9      	ldrb	r1, [r1, r3]
    b80c:	004b      	lsls	r3, r1, #1
    b80e:	185b      	adds	r3, r3, r1
    b810:	009b      	lsls	r3, r3, #2
    b812:	189b      	adds	r3, r3, r2
    b814:	7a1e      	ldrb	r6, [r3, #8]
	if (bandId == 0 && RegParams.band == ISM_JPN923)
    b816:	2e00      	cmp	r6, #0
    b818:	d105      	bne.n	b826 <setDutyCycleTimer+0x4a>
    b81a:	232e      	movs	r3, #46	; 0x2e
    b81c:	4abe      	ldr	r2, [pc, #760]	; (bb18 <setDutyCycleTimer+0x33c>)
    b81e:	5cd3      	ldrb	r3, [r2, r3]
    b820:	2b05      	cmp	r3, #5
    b822:	d100      	bne.n	b826 <setDutyCycleTimer+0x4a>
    b824:	e162      	b.n	baec <setDutyCycleTimer+0x310>
	if(updateDCTimer.joining != 1)
    b826:	ab04      	add	r3, sp, #16
    b828:	791b      	ldrb	r3, [r3, #4]
    b82a:	2b00      	cmp	r3, #0
    b82c:	d16a      	bne.n	b904 <setDutyCycleTimer+0x128>
		RegParams.pSubBandParams[bandId].subBandTimeout = ((uint32_t)updateDCTimer.timeOnAir * ((uint32_t)RegParams.cmnParams.paramsType2.subBandDutyCycle[bandId] - 1));
    b82e:	a904      	add	r1, sp, #16
    b830:	880a      	ldrh	r2, [r1, #0]
    b832:	48b9      	ldr	r0, [pc, #740]	; (bb18 <setDutyCycleTimer+0x33c>)
    b834:	7b07      	ldrb	r7, [r0, #12]
    b836:	7b43      	ldrb	r3, [r0, #13]
    b838:	021b      	lsls	r3, r3, #8
    b83a:	433b      	orrs	r3, r7
    b83c:	7b87      	ldrb	r7, [r0, #14]
    b83e:	043f      	lsls	r7, r7, #16
    b840:	431f      	orrs	r7, r3
    b842:	7bc4      	ldrb	r4, [r0, #15]
    b844:	0624      	lsls	r4, r4, #24
    b846:	4327      	orrs	r7, r4
    b848:	0074      	lsls	r4, r6, #1
    b84a:	19a4      	adds	r4, r4, r6
    b84c:	00a4      	lsls	r4, r4, #2
    b84e:	0035      	movs	r5, r6
    b850:	35d4      	adds	r5, #212	; 0xd4
    b852:	006d      	lsls	r5, r5, #1
    b854:	1945      	adds	r5, r0, r5
    b856:	796b      	ldrb	r3, [r5, #5]
    b858:	469c      	mov	ip, r3
    b85a:	79ab      	ldrb	r3, [r5, #6]
    b85c:	021b      	lsls	r3, r3, #8
    b85e:	4665      	mov	r5, ip
    b860:	432b      	orrs	r3, r5
    b862:	3b01      	subs	r3, #1
    b864:	4353      	muls	r3, r2
    b866:	19e4      	adds	r4, r4, r7
    b868:	7223      	strb	r3, [r4, #8]
    b86a:	0a1d      	lsrs	r5, r3, #8
    b86c:	7265      	strb	r5, [r4, #9]
    b86e:	0c1d      	lsrs	r5, r3, #16
    b870:	72a5      	strb	r5, [r4, #10]
    b872:	0e1b      	lsrs	r3, r3, #24
    b874:	72e3      	strb	r3, [r4, #11]
		RegParams.cmnParams.paramsType2.aggregatedDutyCycleTimeout = (uint32_t)updateDCTimer.timeOnAir * ((uint32_t) updateDCTimer.aggDutyCycle - 1);
    b876:	884b      	ldrh	r3, [r1, #2]
    b878:	3b01      	subs	r3, #1
    b87a:	435a      	muls	r2, r3
    b87c:	23ba      	movs	r3, #186	; 0xba
    b87e:	33ff      	adds	r3, #255	; 0xff
    b880:	54c2      	strb	r2, [r0, r3]
    b882:	0a11      	lsrs	r1, r2, #8
    b884:	18c0      	adds	r0, r0, r3
    b886:	7041      	strb	r1, [r0, #1]
    b888:	0c11      	lsrs	r1, r2, #16
    b88a:	7081      	strb	r1, [r0, #2]
    b88c:	0e12      	lsrs	r2, r2, #24
    b88e:	70c2      	strb	r2, [r0, #3]
	if(SwTimerIsRunning(RegParams.pDutyCycleTimer->timerId))
    b890:	49a1      	ldr	r1, [pc, #644]	; (bb18 <setDutyCycleTimer+0x33c>)
    b892:	7c0b      	ldrb	r3, [r1, #16]
    b894:	7c4a      	ldrb	r2, [r1, #17]
    b896:	0212      	lsls	r2, r2, #8
    b898:	431a      	orrs	r2, r3
    b89a:	7c8b      	ldrb	r3, [r1, #18]
    b89c:	041b      	lsls	r3, r3, #16
    b89e:	431a      	orrs	r2, r3
    b8a0:	7ccb      	ldrb	r3, [r1, #19]
    b8a2:	061b      	lsls	r3, r3, #24
    b8a4:	4313      	orrs	r3, r2
    b8a6:	7918      	ldrb	r0, [r3, #4]
    b8a8:	4b9c      	ldr	r3, [pc, #624]	; (bb1c <setDutyCycleTimer+0x340>)
    b8aa:	4798      	blx	r3
    uint32_t delta = 0, minimSubBandTimer = UINT32_MAX, ticks,nextTimer;
    b8ac:	2300      	movs	r3, #0
    b8ae:	4699      	mov	r9, r3
	if(SwTimerIsRunning(RegParams.pDutyCycleTimer->timerId))
    b8b0:	2800      	cmp	r0, #0
    b8b2:	d136      	bne.n	b922 <setDutyCycleTimer+0x146>
	minimSubBandTimer = RegParams.pSubBandParams[bandId].subBandTimeout;
    b8b4:	4a98      	ldr	r2, [pc, #608]	; (bb18 <setDutyCycleTimer+0x33c>)
    b8b6:	7b13      	ldrb	r3, [r2, #12]
    b8b8:	7b51      	ldrb	r1, [r2, #13]
    b8ba:	0209      	lsls	r1, r1, #8
    b8bc:	430b      	orrs	r3, r1
    b8be:	7b91      	ldrb	r1, [r2, #14]
    b8c0:	0409      	lsls	r1, r1, #16
    b8c2:	4319      	orrs	r1, r3
    b8c4:	7bd3      	ldrb	r3, [r2, #15]
    b8c6:	061b      	lsls	r3, r3, #24
    b8c8:	4319      	orrs	r1, r3
    b8ca:	0073      	lsls	r3, r6, #1
    b8cc:	199b      	adds	r3, r3, r6
    b8ce:	009b      	lsls	r3, r3, #2
    b8d0:	185b      	adds	r3, r3, r1
    b8d2:	7a18      	ldrb	r0, [r3, #8]
    b8d4:	7a59      	ldrb	r1, [r3, #9]
    b8d6:	0209      	lsls	r1, r1, #8
    b8d8:	4301      	orrs	r1, r0
    b8da:	7a98      	ldrb	r0, [r3, #10]
    b8dc:	0400      	lsls	r0, r0, #16
    b8de:	4301      	orrs	r1, r0
    b8e0:	7ad8      	ldrb	r0, [r3, #11]
    b8e2:	0600      	lsls	r0, r0, #24
    b8e4:	4308      	orrs	r0, r1
    b8e6:	9003      	str	r0, [sp, #12]
	for(i = 0; i < RegParams.maxSubBands; i++)
    b8e8:	2329      	movs	r3, #41	; 0x29
    b8ea:	5cd3      	ldrb	r3, [r2, r3]
    b8ec:	2b00      	cmp	r3, #0
    b8ee:	d100      	bne.n	b8f2 <setDutyCycleTimer+0x116>
    b8f0:	e09c      	b.n	ba2c <setDutyCycleTimer+0x250>
    b8f2:	2200      	movs	r2, #0
		if((i != bandId) && (RegParams.pSubBandParams[i].subBandTimeout != 0))
    b8f4:	4d88      	ldr	r5, [pc, #544]	; (bb18 <setDutyCycleTimer+0x33c>)
			if(RegParams.pSubBandParams[i].subBandTimeout <= minimSubBandTimer && RegParams.pSubBandParams[i].subBandTimeout != 0)
    b8f6:	002f      	movs	r7, r5
				RegParams.pSubBandParams[i].subBandTimeout = 0;
    b8f8:	2300      	movs	r3, #0
    b8fa:	469a      	mov	sl, r3
	for(i = 0; i < RegParams.maxSubBands; i++)
    b8fc:	46a8      	mov	r8, r5
    b8fe:	2329      	movs	r3, #41	; 0x29
    b900:	469c      	mov	ip, r3
    b902:	e051      	b.n	b9a8 <setDutyCycleTimer+0x1cc>
		RegParams.joinDutyCycleTimeout = (uint32_t)updateDCTimer.timeOnAir * ((uint32_t) updateDCTimer.aggDutyCycle - 1);
    b904:	a904      	add	r1, sp, #16
    b906:	884a      	ldrh	r2, [r1, #2]
    b908:	3a01      	subs	r2, #1
    b90a:	880b      	ldrh	r3, [r1, #0]
    b90c:	4353      	muls	r3, r2
    b90e:	4a82      	ldr	r2, [pc, #520]	; (bb18 <setDutyCycleTimer+0x33c>)
    b910:	323e      	adds	r2, #62	; 0x3e
    b912:	7013      	strb	r3, [r2, #0]
    b914:	0a19      	lsrs	r1, r3, #8
    b916:	7051      	strb	r1, [r2, #1]
    b918:	0c19      	lsrs	r1, r3, #16
    b91a:	7091      	strb	r1, [r2, #2]
    b91c:	0e1b      	lsrs	r3, r3, #24
    b91e:	70d3      	strb	r3, [r2, #3]
    b920:	e7b6      	b.n	b890 <setDutyCycleTimer+0xb4>
		SwTimerStop(RegParams.pDutyCycleTimer->timerId);
    b922:	4c7d      	ldr	r4, [pc, #500]	; (bb18 <setDutyCycleTimer+0x33c>)
    b924:	7c23      	ldrb	r3, [r4, #16]
    b926:	7c62      	ldrb	r2, [r4, #17]
    b928:	0212      	lsls	r2, r2, #8
    b92a:	431a      	orrs	r2, r3
    b92c:	7ca3      	ldrb	r3, [r4, #18]
    b92e:	041b      	lsls	r3, r3, #16
    b930:	431a      	orrs	r2, r3
    b932:	7ce3      	ldrb	r3, [r4, #19]
    b934:	061b      	lsls	r3, r3, #24
    b936:	4313      	orrs	r3, r2
    b938:	7918      	ldrb	r0, [r3, #4]
    b93a:	4b79      	ldr	r3, [pc, #484]	; (bb20 <setDutyCycleTimer+0x344>)
    b93c:	4798      	blx	r3
		ticks = SwTimerReadValue(RegParams.pDutyCycleTimer->timerId);
    b93e:	7c23      	ldrb	r3, [r4, #16]
    b940:	7c62      	ldrb	r2, [r4, #17]
    b942:	0212      	lsls	r2, r2, #8
    b944:	431a      	orrs	r2, r3
    b946:	7ca3      	ldrb	r3, [r4, #18]
    b948:	041b      	lsls	r3, r3, #16
    b94a:	431a      	orrs	r2, r3
    b94c:	7ce3      	ldrb	r3, [r4, #19]
    b94e:	061b      	lsls	r3, r3, #24
    b950:	4313      	orrs	r3, r2
    b952:	7918      	ldrb	r0, [r3, #4]
    b954:	4b73      	ldr	r3, [pc, #460]	; (bb24 <setDutyCycleTimer+0x348>)
    b956:	4798      	blx	r3
		delta = RegParams.pDutyCycleTimer->lastTimerValue - US_TO_MS(ticks);
    b958:	7c23      	ldrb	r3, [r4, #16]
    b95a:	7c62      	ldrb	r2, [r4, #17]
    b95c:	0212      	lsls	r2, r2, #8
    b95e:	431a      	orrs	r2, r3
    b960:	7ca3      	ldrb	r3, [r4, #18]
    b962:	041b      	lsls	r3, r3, #16
    b964:	431a      	orrs	r2, r3
    b966:	7ce3      	ldrb	r3, [r4, #19]
    b968:	061b      	lsls	r3, r3, #24
    b96a:	4313      	orrs	r3, r2
    b96c:	781c      	ldrb	r4, [r3, #0]
    b96e:	785a      	ldrb	r2, [r3, #1]
    b970:	0212      	lsls	r2, r2, #8
    b972:	4322      	orrs	r2, r4
    b974:	789c      	ldrb	r4, [r3, #2]
    b976:	0424      	lsls	r4, r4, #16
    b978:	4322      	orrs	r2, r4
    b97a:	78dc      	ldrb	r4, [r3, #3]
    b97c:	0624      	lsls	r4, r4, #24
    b97e:	4314      	orrs	r4, r2
    b980:	21fa      	movs	r1, #250	; 0xfa
    b982:	0089      	lsls	r1, r1, #2
    b984:	4b68      	ldr	r3, [pc, #416]	; (bb28 <setDutyCycleTimer+0x34c>)
    b986:	4798      	blx	r3
    b988:	1a23      	subs	r3, r4, r0
    b98a:	4699      	mov	r9, r3
    b98c:	e792      	b.n	b8b4 <setDutyCycleTimer+0xd8>
				RegParams.pSubBandParams[i].subBandTimeout = 0;
    b98e:	4651      	mov	r1, sl
    b990:	7219      	strb	r1, [r3, #8]
    b992:	7259      	strb	r1, [r3, #9]
    b994:	7299      	strb	r1, [r3, #10]
    b996:	72d9      	strb	r1, [r3, #11]
    b998:	e02c      	b.n	b9f4 <setDutyCycleTimer+0x218>
	for(i = 0; i < RegParams.maxSubBands; i++)
    b99a:	3201      	adds	r2, #1
    b99c:	b2d2      	uxtb	r2, r2
    b99e:	4643      	mov	r3, r8
    b9a0:	4661      	mov	r1, ip
    b9a2:	5c5b      	ldrb	r3, [r3, r1]
    b9a4:	4293      	cmp	r3, r2
    b9a6:	d941      	bls.n	ba2c <setDutyCycleTimer+0x250>
		if((i != bandId) && (RegParams.pSubBandParams[i].subBandTimeout != 0))
    b9a8:	4296      	cmp	r6, r2
    b9aa:	d0f6      	beq.n	b99a <setDutyCycleTimer+0x1be>
    b9ac:	0054      	lsls	r4, r2, #1
    b9ae:	18a4      	adds	r4, r4, r2
    b9b0:	00a4      	lsls	r4, r4, #2
    b9b2:	7b2b      	ldrb	r3, [r5, #12]
    b9b4:	7b69      	ldrb	r1, [r5, #13]
    b9b6:	0209      	lsls	r1, r1, #8
    b9b8:	4319      	orrs	r1, r3
    b9ba:	7bab      	ldrb	r3, [r5, #14]
    b9bc:	041b      	lsls	r3, r3, #16
    b9be:	4319      	orrs	r1, r3
    b9c0:	7beb      	ldrb	r3, [r5, #15]
    b9c2:	061b      	lsls	r3, r3, #24
    b9c4:	430b      	orrs	r3, r1
    b9c6:	191b      	adds	r3, r3, r4
    b9c8:	7a18      	ldrb	r0, [r3, #8]
    b9ca:	7a59      	ldrb	r1, [r3, #9]
    b9cc:	0209      	lsls	r1, r1, #8
    b9ce:	4301      	orrs	r1, r0
    b9d0:	7a98      	ldrb	r0, [r3, #10]
    b9d2:	0400      	lsls	r0, r0, #16
    b9d4:	4308      	orrs	r0, r1
    b9d6:	7ad9      	ldrb	r1, [r3, #11]
    b9d8:	0609      	lsls	r1, r1, #24
    b9da:	4301      	orrs	r1, r0
    b9dc:	d0dd      	beq.n	b99a <setDutyCycleTimer+0x1be>
			if(RegParams.pSubBandParams[i].subBandTimeout > delta)
    b9de:	4589      	cmp	r9, r1
    b9e0:	d2d5      	bcs.n	b98e <setDutyCycleTimer+0x1b2>
				          RegParams.pSubBandParams[i].subBandTimeout - delta;
    b9e2:	4648      	mov	r0, r9
    b9e4:	1a09      	subs	r1, r1, r0
				RegParams.pSubBandParams[i].subBandTimeout = 
    b9e6:	7219      	strb	r1, [r3, #8]
    b9e8:	0a08      	lsrs	r0, r1, #8
    b9ea:	7258      	strb	r0, [r3, #9]
    b9ec:	0c08      	lsrs	r0, r1, #16
    b9ee:	7298      	strb	r0, [r3, #10]
    b9f0:	0e09      	lsrs	r1, r1, #24
    b9f2:	72d9      	strb	r1, [r3, #11]
			if(RegParams.pSubBandParams[i].subBandTimeout <= minimSubBandTimer && RegParams.pSubBandParams[i].subBandTimeout != 0)
    b9f4:	7b3b      	ldrb	r3, [r7, #12]
    b9f6:	7b79      	ldrb	r1, [r7, #13]
    b9f8:	0209      	lsls	r1, r1, #8
    b9fa:	4319      	orrs	r1, r3
    b9fc:	7bbb      	ldrb	r3, [r7, #14]
    b9fe:	041b      	lsls	r3, r3, #16
    ba00:	4319      	orrs	r1, r3
    ba02:	7bfb      	ldrb	r3, [r7, #15]
    ba04:	061b      	lsls	r3, r3, #24
    ba06:	430b      	orrs	r3, r1
    ba08:	191c      	adds	r4, r3, r4
    ba0a:	7a23      	ldrb	r3, [r4, #8]
    ba0c:	7a61      	ldrb	r1, [r4, #9]
    ba0e:	0209      	lsls	r1, r1, #8
    ba10:	4319      	orrs	r1, r3
    ba12:	7aa3      	ldrb	r3, [r4, #10]
    ba14:	041b      	lsls	r3, r3, #16
    ba16:	4319      	orrs	r1, r3
    ba18:	7ae3      	ldrb	r3, [r4, #11]
    ba1a:	061b      	lsls	r3, r3, #24
    ba1c:	430b      	orrs	r3, r1
    ba1e:	9903      	ldr	r1, [sp, #12]
    ba20:	428b      	cmp	r3, r1
    ba22:	d8ba      	bhi.n	b99a <setDutyCycleTimer+0x1be>
    ba24:	2b00      	cmp	r3, #0
    ba26:	d0b8      	beq.n	b99a <setDutyCycleTimer+0x1be>
				minimSubBandTimer = RegParams.pSubBandParams[i].subBandTimeout;
    ba28:	9303      	str	r3, [sp, #12]
    ba2a:	e7b6      	b.n	b99a <setDutyCycleTimer+0x1be>
	if(RegParams.cmnParams.paramsType2.aggregatedDutyCycleTimeout != 0)
    ba2c:	493a      	ldr	r1, [pc, #232]	; (bb18 <setDutyCycleTimer+0x33c>)
    ba2e:	23ba      	movs	r3, #186	; 0xba
    ba30:	33ff      	adds	r3, #255	; 0xff
    ba32:	5ccb      	ldrb	r3, [r1, r3]
    ba34:	22dd      	movs	r2, #221	; 0xdd
    ba36:	0052      	lsls	r2, r2, #1
    ba38:	5c8a      	ldrb	r2, [r1, r2]
    ba3a:	0212      	lsls	r2, r2, #8
    ba3c:	431a      	orrs	r2, r3
    ba3e:	23bc      	movs	r3, #188	; 0xbc
    ba40:	33ff      	adds	r3, #255	; 0xff
    ba42:	5ccb      	ldrb	r3, [r1, r3]
    ba44:	041b      	lsls	r3, r3, #16
    ba46:	431a      	orrs	r2, r3
    ba48:	23de      	movs	r3, #222	; 0xde
    ba4a:	005b      	lsls	r3, r3, #1
    ba4c:	5ccb      	ldrb	r3, [r1, r3]
    ba4e:	061b      	lsls	r3, r3, #24
    ba50:	4313      	orrs	r3, r2
    ba52:	d00f      	beq.n	ba74 <setDutyCycleTimer+0x298>
		if(RegParams.cmnParams.paramsType2.aggregatedDutyCycleTimeout > delta)
    ba54:	4599      	cmp	r9, r3
    ba56:	d251      	bcs.n	bafc <setDutyCycleTimer+0x320>
			RegParams.cmnParams.paramsType2.aggregatedDutyCycleTimeout = RegParams.cmnParams.paramsType2.aggregatedDutyCycleTimeout - delta;
    ba58:	000a      	movs	r2, r1
    ba5a:	4649      	mov	r1, r9
    ba5c:	1a5b      	subs	r3, r3, r1
    ba5e:	21ba      	movs	r1, #186	; 0xba
    ba60:	31ff      	adds	r1, #255	; 0xff
    ba62:	5453      	strb	r3, [r2, r1]
    ba64:	0a19      	lsrs	r1, r3, #8
    ba66:	32ba      	adds	r2, #186	; 0xba
    ba68:	32ff      	adds	r2, #255	; 0xff
    ba6a:	7051      	strb	r1, [r2, #1]
    ba6c:	0c19      	lsrs	r1, r3, #16
    ba6e:	7091      	strb	r1, [r2, #2]
    ba70:	0e1b      	lsrs	r3, r3, #24
    ba72:	70d3      	strb	r3, [r2, #3]
		if(RegParams.cmnParams.paramsType2.aggregatedDutyCycleTimeout >= minimSubBandTimer)
    ba74:	4a28      	ldr	r2, [pc, #160]	; (bb18 <setDutyCycleTimer+0x33c>)
    ba76:	23ba      	movs	r3, #186	; 0xba
    ba78:	33ff      	adds	r3, #255	; 0xff
    ba7a:	5cd1      	ldrb	r1, [r2, r3]
    ba7c:	3301      	adds	r3, #1
    ba7e:	5cd3      	ldrb	r3, [r2, r3]
    ba80:	021b      	lsls	r3, r3, #8
    ba82:	430b      	orrs	r3, r1
    ba84:	21bc      	movs	r1, #188	; 0xbc
    ba86:	31ff      	adds	r1, #255	; 0xff
    ba88:	5c51      	ldrb	r1, [r2, r1]
    ba8a:	0409      	lsls	r1, r1, #16
    ba8c:	430b      	orrs	r3, r1
    ba8e:	21de      	movs	r1, #222	; 0xde
    ba90:	0049      	lsls	r1, r1, #1
    ba92:	5c51      	ldrb	r1, [r2, r1]
    ba94:	0609      	lsls	r1, r1, #24
    ba96:	4319      	orrs	r1, r3
    ba98:	9a03      	ldr	r2, [sp, #12]
    ba9a:	4291      	cmp	r1, r2
    ba9c:	d200      	bcs.n	baa0 <setDutyCycleTimer+0x2c4>
    ba9e:	0011      	movs	r1, r2
		RegParams.pDutyCycleTimer->lastTimerValue = nextTimer;
    baa0:	4b1d      	ldr	r3, [pc, #116]	; (bb18 <setDutyCycleTimer+0x33c>)
    baa2:	7c1a      	ldrb	r2, [r3, #16]
    baa4:	7c58      	ldrb	r0, [r3, #17]
    baa6:	0200      	lsls	r0, r0, #8
    baa8:	4310      	orrs	r0, r2
    baaa:	7c9a      	ldrb	r2, [r3, #18]
    baac:	0412      	lsls	r2, r2, #16
    baae:	4310      	orrs	r0, r2
    bab0:	7cda      	ldrb	r2, [r3, #19]
    bab2:	0612      	lsls	r2, r2, #24
    bab4:	4302      	orrs	r2, r0
    bab6:	7011      	strb	r1, [r2, #0]
    bab8:	0a08      	lsrs	r0, r1, #8
    baba:	7050      	strb	r0, [r2, #1]
    babc:	0c08      	lsrs	r0, r1, #16
    babe:	7090      	strb	r0, [r2, #2]
    bac0:	0e08      	lsrs	r0, r1, #24
    bac2:	70d0      	strb	r0, [r2, #3]
		SwTimerStart (RegParams.pDutyCycleTimer->timerId, MS_TO_US(nextTimer), SW_TIMEOUT_RELATIVE, (void *)DutyCycleCallback, NULL);
    bac4:	22fa      	movs	r2, #250	; 0xfa
    bac6:	0092      	lsls	r2, r2, #2
    bac8:	4351      	muls	r1, r2
    baca:	7c18      	ldrb	r0, [r3, #16]
    bacc:	7c5a      	ldrb	r2, [r3, #17]
    bace:	0212      	lsls	r2, r2, #8
    bad0:	4310      	orrs	r0, r2
    bad2:	7c9a      	ldrb	r2, [r3, #18]
    bad4:	0412      	lsls	r2, r2, #16
    bad6:	4302      	orrs	r2, r0
    bad8:	7cdb      	ldrb	r3, [r3, #19]
    bada:	061b      	lsls	r3, r3, #24
    badc:	4313      	orrs	r3, r2
    bade:	7918      	ldrb	r0, [r3, #4]
    bae0:	2300      	movs	r3, #0
    bae2:	9300      	str	r3, [sp, #0]
    bae4:	4b11      	ldr	r3, [pc, #68]	; (bb2c <setDutyCycleTimer+0x350>)
    bae6:	2200      	movs	r2, #0
    bae8:	4c11      	ldr	r4, [pc, #68]	; (bb30 <setDutyCycleTimer+0x354>)
    baea:	47a0      	blx	r4
}
    baec:	2008      	movs	r0, #8
    baee:	b007      	add	sp, #28
    baf0:	bc3c      	pop	{r2, r3, r4, r5}
    baf2:	4690      	mov	r8, r2
    baf4:	4699      	mov	r9, r3
    baf6:	46a2      	mov	sl, r4
    baf8:	46ab      	mov	fp, r5
    bafa:	bdf0      	pop	{r4, r5, r6, r7, pc}
			RegParams.cmnParams.paramsType2.aggregatedDutyCycleTimeout = 0;
    bafc:	4b06      	ldr	r3, [pc, #24]	; (bb18 <setDutyCycleTimer+0x33c>)
    bafe:	2100      	movs	r1, #0
    bb00:	22ba      	movs	r2, #186	; 0xba
    bb02:	32ff      	adds	r2, #255	; 0xff
    bb04:	5499      	strb	r1, [r3, r2]
    bb06:	189b      	adds	r3, r3, r2
    bb08:	2200      	movs	r2, #0
    bb0a:	705a      	strb	r2, [r3, #1]
    bb0c:	709a      	strb	r2, [r3, #2]
    bb0e:	70da      	strb	r2, [r3, #3]
    bb10:	e7b0      	b.n	ba74 <setDutyCycleTimer+0x298>
    bb12:	46c0      	nop			; (mov r8, r8)
    bb14:	00019da5 	.word	0x00019da5
    bb18:	200024d0 	.word	0x200024d0
    bb1c:	0000efc1 	.word	0x0000efc1
    bb20:	0000f141 	.word	0x0000f141
    bb24:	0000efd5 	.word	0x0000efd5
    bb28:	00016641 	.word	0x00016641
    bb2c:	0000bb35 	.word	0x0000bb35
    bb30:	0000ee29 	.word	0x0000ee29

0000bb34 <DutyCycleCallback>:
{
    bb34:	b5f0      	push	{r4, r5, r6, r7, lr}
    bb36:	46de      	mov	lr, fp
    bb38:	4657      	mov	r7, sl
    bb3a:	464e      	mov	r6, r9
    bb3c:	4645      	mov	r5, r8
    bb3e:	b5e0      	push	{r5, r6, r7, lr}
    bb40:	b087      	sub	sp, #28
	uint32_t DutyCycleTimeout = RegParams.cmnParams.paramsType2.aggregatedDutyCycleTimeout;
    bb42:	4980      	ldr	r1, [pc, #512]	; (bd44 <DutyCycleCallback+0x210>)
    bb44:	23ba      	movs	r3, #186	; 0xba
    bb46:	33ff      	adds	r3, #255	; 0xff
    bb48:	5cca      	ldrb	r2, [r1, r3]
    bb4a:	3301      	adds	r3, #1
    bb4c:	5ccb      	ldrb	r3, [r1, r3]
    bb4e:	021b      	lsls	r3, r3, #8
    bb50:	431a      	orrs	r2, r3
    bb52:	23bc      	movs	r3, #188	; 0xbc
    bb54:	33ff      	adds	r3, #255	; 0xff
    bb56:	5ccb      	ldrb	r3, [r1, r3]
    bb58:	041b      	lsls	r3, r3, #16
    bb5a:	4313      	orrs	r3, r2
    bb5c:	22de      	movs	r2, #222	; 0xde
    bb5e:	0052      	lsls	r2, r2, #1
    bb60:	5c8a      	ldrb	r2, [r1, r2]
    bb62:	0612      	lsls	r2, r2, #24
    bb64:	431a      	orrs	r2, r3
    bb66:	9205      	str	r2, [sp, #20]
    for (i=0; i < RegParams.maxSubBands; i++)
    bb68:	2329      	movs	r3, #41	; 0x29
    bb6a:	5ccb      	ldrb	r3, [r1, r3]
    bb6c:	2b00      	cmp	r3, #0
    bb6e:	d100      	bne.n	bb72 <DutyCycleCallback+0x3e>
    bb70:	e0df      	b.n	bd32 <DutyCycleCallback+0x1fe>
    bb72:	2600      	movs	r6, #0
    bb74:	2300      	movs	r3, #0
    bb76:	9304      	str	r3, [sp, #16]
    bb78:	3b01      	subs	r3, #1
    bb7a:	9303      	str	r3, [sp, #12]
        if (( RegParams.pSubBandParams[i].subBandTimeout != 0 ))
    bb7c:	000f      	movs	r7, r1
            if ( RegParams.pSubBandParams[i].subBandTimeout > RegParams.pDutyCycleTimer->lastTimerValue )
    bb7e:	4688      	mov	r8, r1
            if ( (RegParams.pSubBandParams[i].subBandTimeout <= minimSubBandTimer) && (RegParams.pSubBandParams[i].subBandTimeout != 0) )
    bb80:	468c      	mov	ip, r1
                RegParams.pSubBandParams[i].subBandTimeout = 0;
    bb82:	2300      	movs	r3, #0
    bb84:	469b      	mov	fp, r3
    for (i=0; i < RegParams.maxSubBands; i++)
    bb86:	468a      	mov	sl, r1
    bb88:	2329      	movs	r3, #41	; 0x29
    bb8a:	4699      	mov	r9, r3
    bb8c:	e00c      	b.n	bba8 <DutyCycleCallback+0x74>
                RegParams.pSubBandParams[i].subBandTimeout = 0;
    bb8e:	465a      	mov	r2, fp
    bb90:	721a      	strb	r2, [r3, #8]
    bb92:	725a      	strb	r2, [r3, #9]
    bb94:	729a      	strb	r2, [r3, #10]
    bb96:	72da      	strb	r2, [r3, #11]
    bb98:	e03f      	b.n	bc1a <DutyCycleCallback+0xe6>
    for (i=0; i < RegParams.maxSubBands; i++)
    bb9a:	3601      	adds	r6, #1
    bb9c:	b2f6      	uxtb	r6, r6
    bb9e:	4653      	mov	r3, sl
    bba0:	464a      	mov	r2, r9
    bba2:	5c9b      	ldrb	r3, [r3, r2]
    bba4:	42b3      	cmp	r3, r6
    bba6:	d95a      	bls.n	bc5e <DutyCycleCallback+0x12a>
        if (( RegParams.pSubBandParams[i].subBandTimeout != 0 ))
    bba8:	0071      	lsls	r1, r6, #1
    bbaa:	1989      	adds	r1, r1, r6
    bbac:	0089      	lsls	r1, r1, #2
    bbae:	7b3b      	ldrb	r3, [r7, #12]
    bbb0:	7b7a      	ldrb	r2, [r7, #13]
    bbb2:	0212      	lsls	r2, r2, #8
    bbb4:	431a      	orrs	r2, r3
    bbb6:	7bbb      	ldrb	r3, [r7, #14]
    bbb8:	041b      	lsls	r3, r3, #16
    bbba:	431a      	orrs	r2, r3
    bbbc:	7bfb      	ldrb	r3, [r7, #15]
    bbbe:	061b      	lsls	r3, r3, #24
    bbc0:	4313      	orrs	r3, r2
    bbc2:	185b      	adds	r3, r3, r1
    bbc4:	7a1a      	ldrb	r2, [r3, #8]
    bbc6:	7a58      	ldrb	r0, [r3, #9]
    bbc8:	0200      	lsls	r0, r0, #8
    bbca:	4310      	orrs	r0, r2
    bbcc:	7a9a      	ldrb	r2, [r3, #10]
    bbce:	0412      	lsls	r2, r2, #16
    bbd0:	4310      	orrs	r0, r2
    bbd2:	7ada      	ldrb	r2, [r3, #11]
    bbd4:	0612      	lsls	r2, r2, #24
    bbd6:	4302      	orrs	r2, r0
    bbd8:	d0df      	beq.n	bb9a <DutyCycleCallback+0x66>
            if ( RegParams.pSubBandParams[i].subBandTimeout > RegParams.pDutyCycleTimer->lastTimerValue )
    bbda:	4640      	mov	r0, r8
    bbdc:	7c05      	ldrb	r5, [r0, #16]
    bbde:	7c44      	ldrb	r4, [r0, #17]
    bbe0:	0224      	lsls	r4, r4, #8
    bbe2:	4325      	orrs	r5, r4
    bbe4:	7c80      	ldrb	r0, [r0, #18]
    bbe6:	0400      	lsls	r0, r0, #16
    bbe8:	4305      	orrs	r5, r0
    bbea:	4640      	mov	r0, r8
    bbec:	7cc0      	ldrb	r0, [r0, #19]
    bbee:	0600      	lsls	r0, r0, #24
    bbf0:	4328      	orrs	r0, r5
    bbf2:	7804      	ldrb	r4, [r0, #0]
    bbf4:	7845      	ldrb	r5, [r0, #1]
    bbf6:	022d      	lsls	r5, r5, #8
    bbf8:	4325      	orrs	r5, r4
    bbfa:	7884      	ldrb	r4, [r0, #2]
    bbfc:	0424      	lsls	r4, r4, #16
    bbfe:	4325      	orrs	r5, r4
    bc00:	78c4      	ldrb	r4, [r0, #3]
    bc02:	0624      	lsls	r4, r4, #24
    bc04:	432c      	orrs	r4, r5
    bc06:	42a2      	cmp	r2, r4
    bc08:	d9c1      	bls.n	bb8e <DutyCycleCallback+0x5a>
                RegParams.pSubBandParams[i].subBandTimeout = RegParams.pSubBandParams[i].subBandTimeout - RegParams.pDutyCycleTimer->lastTimerValue;
    bc0a:	1b12      	subs	r2, r2, r4
    bc0c:	721a      	strb	r2, [r3, #8]
    bc0e:	0a10      	lsrs	r0, r2, #8
    bc10:	7258      	strb	r0, [r3, #9]
    bc12:	0c10      	lsrs	r0, r2, #16
    bc14:	7298      	strb	r0, [r3, #10]
    bc16:	0e12      	lsrs	r2, r2, #24
    bc18:	72da      	strb	r2, [r3, #11]
            if ( (RegParams.pSubBandParams[i].subBandTimeout <= minimSubBandTimer) && (RegParams.pSubBandParams[i].subBandTimeout != 0) )
    bc1a:	4663      	mov	r3, ip
    bc1c:	7b1b      	ldrb	r3, [r3, #12]
    bc1e:	4662      	mov	r2, ip
    bc20:	7b52      	ldrb	r2, [r2, #13]
    bc22:	0212      	lsls	r2, r2, #8
    bc24:	431a      	orrs	r2, r3
    bc26:	4663      	mov	r3, ip
    bc28:	7b9b      	ldrb	r3, [r3, #14]
    bc2a:	041b      	lsls	r3, r3, #16
    bc2c:	431a      	orrs	r2, r3
    bc2e:	4663      	mov	r3, ip
    bc30:	7bdb      	ldrb	r3, [r3, #15]
    bc32:	061b      	lsls	r3, r3, #24
    bc34:	4313      	orrs	r3, r2
    bc36:	1859      	adds	r1, r3, r1
    bc38:	7a0b      	ldrb	r3, [r1, #8]
    bc3a:	7a4a      	ldrb	r2, [r1, #9]
    bc3c:	0212      	lsls	r2, r2, #8
    bc3e:	431a      	orrs	r2, r3
    bc40:	7a8b      	ldrb	r3, [r1, #10]
    bc42:	041b      	lsls	r3, r3, #16
    bc44:	431a      	orrs	r2, r3
    bc46:	7acb      	ldrb	r3, [r1, #11]
    bc48:	061b      	lsls	r3, r3, #24
    bc4a:	4313      	orrs	r3, r2
    bc4c:	9a03      	ldr	r2, [sp, #12]
    bc4e:	4293      	cmp	r3, r2
    bc50:	d8a3      	bhi.n	bb9a <DutyCycleCallback+0x66>
    bc52:	2b00      	cmp	r3, #0
    bc54:	d0a1      	beq.n	bb9a <DutyCycleCallback+0x66>
                minimSubBandTimer  = RegParams.pSubBandParams[i].subBandTimeout;
    bc56:	9303      	str	r3, [sp, #12]
                found = 1;
    bc58:	2301      	movs	r3, #1
    bc5a:	9304      	str	r3, [sp, #16]
    bc5c:	e79d      	b.n	bb9a <DutyCycleCallback+0x66>
    if (( DutyCycleTimeout != 0 ))
    bc5e:	9b05      	ldr	r3, [sp, #20]
    bc60:	2b00      	cmp	r3, #0
    bc62:	d031      	beq.n	bcc8 <DutyCycleCallback+0x194>
	    if (DutyCycleTimeout > RegParams.pDutyCycleTimer->lastTimerValue)
    bc64:	4937      	ldr	r1, [pc, #220]	; (bd44 <DutyCycleCallback+0x210>)
    bc66:	7c0b      	ldrb	r3, [r1, #16]
    bc68:	7c4a      	ldrb	r2, [r1, #17]
    bc6a:	0212      	lsls	r2, r2, #8
    bc6c:	431a      	orrs	r2, r3
    bc6e:	7c8b      	ldrb	r3, [r1, #18]
    bc70:	041b      	lsls	r3, r3, #16
    bc72:	431a      	orrs	r2, r3
    bc74:	7ccb      	ldrb	r3, [r1, #19]
    bc76:	061b      	lsls	r3, r3, #24
    bc78:	4313      	orrs	r3, r2
    bc7a:	7819      	ldrb	r1, [r3, #0]
    bc7c:	785a      	ldrb	r2, [r3, #1]
    bc7e:	0212      	lsls	r2, r2, #8
    bc80:	430a      	orrs	r2, r1
    bc82:	7899      	ldrb	r1, [r3, #2]
    bc84:	0409      	lsls	r1, r1, #16
    bc86:	430a      	orrs	r2, r1
    bc88:	78d9      	ldrb	r1, [r3, #3]
    bc8a:	0609      	lsls	r1, r1, #24
    bc8c:	4311      	orrs	r1, r2
    bc8e:	9a05      	ldr	r2, [sp, #20]
    bc90:	428a      	cmp	r2, r1
    bc92:	d90f      	bls.n	bcb4 <DutyCycleCallback+0x180>
		    RegParams.cmnParams.paramsType2.aggregatedDutyCycleTimeout = DutyCycleTimeout - RegParams.pDutyCycleTimer->lastTimerValue;
    bc94:	1a51      	subs	r1, r2, r1
    bc96:	4b2b      	ldr	r3, [pc, #172]	; (bd44 <DutyCycleCallback+0x210>)
    bc98:	22ba      	movs	r2, #186	; 0xba
    bc9a:	32ff      	adds	r2, #255	; 0xff
    bc9c:	5499      	strb	r1, [r3, r2]
    bc9e:	0a0a      	lsrs	r2, r1, #8
    bca0:	33ba      	adds	r3, #186	; 0xba
    bca2:	33ff      	adds	r3, #255	; 0xff
    bca4:	705a      	strb	r2, [r3, #1]
    bca6:	0c0a      	lsrs	r2, r1, #16
    bca8:	709a      	strb	r2, [r3, #2]
    bcaa:	0e0a      	lsrs	r2, r1, #24
    bcac:	70da      	strb	r2, [r3, #3]
		if(DutyCycleTimeout)
    bcae:	2900      	cmp	r1, #0
    bcb0:	d10e      	bne.n	bcd0 <DutyCycleCallback+0x19c>
    bcb2:	e009      	b.n	bcc8 <DutyCycleCallback+0x194>
		    RegParams.cmnParams.paramsType2.aggregatedDutyCycleTimeout = 0;
    bcb4:	4b23      	ldr	r3, [pc, #140]	; (bd44 <DutyCycleCallback+0x210>)
    bcb6:	2100      	movs	r1, #0
    bcb8:	22ba      	movs	r2, #186	; 0xba
    bcba:	32ff      	adds	r2, #255	; 0xff
    bcbc:	5499      	strb	r1, [r3, r2]
    bcbe:	189b      	adds	r3, r3, r2
    bcc0:	2200      	movs	r2, #0
    bcc2:	705a      	strb	r2, [r3, #1]
    bcc4:	709a      	strb	r2, [r3, #2]
    bcc6:	70da      	strb	r2, [r3, #3]
    if ( found == 1 )
    bcc8:	9b04      	ldr	r3, [sp, #16]
    bcca:	2b00      	cmp	r3, #0
    bccc:	d02a      	beq.n	bd24 <DutyCycleCallback+0x1f0>
    bcce:	2100      	movs	r1, #0
    bcd0:	9a03      	ldr	r2, [sp, #12]
    bcd2:	4291      	cmp	r1, r2
    bcd4:	d200      	bcs.n	bcd8 <DutyCycleCallback+0x1a4>
    bcd6:	0011      	movs	r1, r2
        RegParams.pDutyCycleTimer->lastTimerValue = nextTimer;
    bcd8:	4b1a      	ldr	r3, [pc, #104]	; (bd44 <DutyCycleCallback+0x210>)
    bcda:	7c1a      	ldrb	r2, [r3, #16]
    bcdc:	7c58      	ldrb	r0, [r3, #17]
    bcde:	0200      	lsls	r0, r0, #8
    bce0:	4310      	orrs	r0, r2
    bce2:	7c9a      	ldrb	r2, [r3, #18]
    bce4:	0412      	lsls	r2, r2, #16
    bce6:	4310      	orrs	r0, r2
    bce8:	7cda      	ldrb	r2, [r3, #19]
    bcea:	0612      	lsls	r2, r2, #24
    bcec:	4302      	orrs	r2, r0
    bcee:	7011      	strb	r1, [r2, #0]
    bcf0:	0a08      	lsrs	r0, r1, #8
    bcf2:	7050      	strb	r0, [r2, #1]
    bcf4:	0c08      	lsrs	r0, r1, #16
    bcf6:	7090      	strb	r0, [r2, #2]
    bcf8:	0e08      	lsrs	r0, r1, #24
    bcfa:	70d0      	strb	r0, [r2, #3]
		SwTimerStart (RegParams.pDutyCycleTimer->timerId, MS_TO_US(nextTimer), SW_TIMEOUT_RELATIVE, (void *)DutyCycleCallback, NULL);
    bcfc:	22fa      	movs	r2, #250	; 0xfa
    bcfe:	0092      	lsls	r2, r2, #2
    bd00:	4351      	muls	r1, r2
    bd02:	7c18      	ldrb	r0, [r3, #16]
    bd04:	7c5a      	ldrb	r2, [r3, #17]
    bd06:	0212      	lsls	r2, r2, #8
    bd08:	4310      	orrs	r0, r2
    bd0a:	7c9a      	ldrb	r2, [r3, #18]
    bd0c:	0412      	lsls	r2, r2, #16
    bd0e:	4302      	orrs	r2, r0
    bd10:	7cdb      	ldrb	r3, [r3, #19]
    bd12:	061b      	lsls	r3, r3, #24
    bd14:	4313      	orrs	r3, r2
    bd16:	7918      	ldrb	r0, [r3, #4]
    bd18:	2300      	movs	r3, #0
    bd1a:	9300      	str	r3, [sp, #0]
    bd1c:	4b0a      	ldr	r3, [pc, #40]	; (bd48 <DutyCycleCallback+0x214>)
    bd1e:	2200      	movs	r2, #0
    bd20:	4c0a      	ldr	r4, [pc, #40]	; (bd4c <DutyCycleCallback+0x218>)
    bd22:	47a0      	blx	r4
}
    bd24:	b007      	add	sp, #28
    bd26:	bc3c      	pop	{r2, r3, r4, r5}
    bd28:	4690      	mov	r8, r2
    bd2a:	4699      	mov	r9, r3
    bd2c:	46a2      	mov	sl, r4
    bd2e:	46ab      	mov	fp, r5
    bd30:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (( DutyCycleTimeout != 0 ))
    bd32:	9b05      	ldr	r3, [sp, #20]
    bd34:	2b00      	cmp	r3, #0
    bd36:	d0f5      	beq.n	bd24 <DutyCycleCallback+0x1f0>
    bool found = 0;
    bd38:	2300      	movs	r3, #0
    bd3a:	9304      	str	r3, [sp, #16]
    uint32_t minimSubBandTimer = UINT32_MAX;
    bd3c:	3b01      	subs	r3, #1
    bd3e:	9303      	str	r3, [sp, #12]
    bd40:	e790      	b.n	bc64 <DutyCycleCallback+0x130>
    bd42:	46c0      	nop			; (mov r8, r8)
    bd44:	200024d0 	.word	0x200024d0
    bd48:	0000bb35 	.word	0x0000bb35
    bd4c:	0000ee29 	.word	0x0000ee29

0000bd50 <setLBTTimer>:
{
    bd50:	b5f0      	push	{r4, r5, r6, r7, lr}
    bd52:	46de      	mov	lr, fp
    bd54:	4657      	mov	r7, sl
    bd56:	464e      	mov	r6, r9
    bd58:	4645      	mov	r5, r8
    bd5a:	b5e0      	push	{r5, r6, r7, lr}
    bd5c:	b085      	sub	sp, #20
    i = RegParams.lastUsedChannelIndex;
    bd5e:	4a70      	ldr	r2, [pc, #448]	; (bf20 <setLBTTimer+0x1d0>)
    bd60:	232f      	movs	r3, #47	; 0x2f
	RegParams.cmnParams.paramsType2.channelTimer[i] = LBT_TRANSMIT_CHANNEL_PAUSE_DURATION;
    bd62:	5cd4      	ldrb	r4, [r2, r3]
    bd64:	0023      	movs	r3, r4
    bd66:	3358      	adds	r3, #88	; 0x58
    bd68:	009b      	lsls	r3, r3, #2
    bd6a:	18d3      	adds	r3, r2, r3
    bd6c:	2132      	movs	r1, #50	; 0x32
    bd6e:	7219      	strb	r1, [r3, #8]
    bd70:	2100      	movs	r1, #0
    bd72:	7259      	strb	r1, [r3, #9]
    bd74:	7299      	strb	r1, [r3, #10]
    bd76:	72d9      	strb	r1, [r3, #11]
	if(SwTimerIsRunning(pLBTTimer->timerId))
    bd78:	23d6      	movs	r3, #214	; 0xd6
    bd7a:	005b      	lsls	r3, r3, #1
    bd7c:	5cd0      	ldrb	r0, [r2, r3]
    bd7e:	4b69      	ldr	r3, [pc, #420]	; (bf24 <setLBTTimer+0x1d4>)
    bd80:	4798      	blx	r3
    bd82:	2800      	cmp	r0, #0
    bd84:	d12f      	bne.n	bde6 <setLBTTimer+0x96>
		minim = RegParams.cmnParams.paramsType2.channelTimer[i];
    bd86:	4866      	ldr	r0, [pc, #408]	; (bf20 <setLBTTimer+0x1d0>)
    bd88:	0023      	movs	r3, r4
    bd8a:	3358      	adds	r3, #88	; 0x58
    bd8c:	009b      	lsls	r3, r3, #2
    bd8e:	18c3      	adds	r3, r0, r3
    bd90:	7a19      	ldrb	r1, [r3, #8]
    bd92:	7a5a      	ldrb	r2, [r3, #9]
    bd94:	0212      	lsls	r2, r2, #8
    bd96:	4311      	orrs	r1, r2
    bd98:	7a9a      	ldrb	r2, [r3, #10]
    bd9a:	0412      	lsls	r2, r2, #16
    bd9c:	430a      	orrs	r2, r1
    bd9e:	7ad9      	ldrb	r1, [r3, #11]
    bda0:	0609      	lsls	r1, r1, #24
    bda2:	4311      	orrs	r1, r2
    bda4:	4689      	mov	r9, r1
	for(i = 0; i < RegParams.maxChannels; i++)
    bda6:	232a      	movs	r3, #42	; 0x2a
    bda8:	56c3      	ldrsb	r3, [r0, r3]
    bdaa:	4698      	mov	r8, r3
    bdac:	2b00      	cmp	r3, #0
    bdae:	dc00      	bgt.n	bdb2 <setLBTTimer+0x62>
    bdb0:	e08b      	b.n	beca <setLBTTimer+0x17a>
    uint32_t delta = 0, minim = UINT32_MAX, ticks;
    bdb2:	2300      	movs	r3, #0
    bdb4:	469a      	mov	sl, r3
		found = 1;
    bdb6:	3301      	adds	r3, #1
    bdb8:	9303      	str	r3, [sp, #12]
		if(i != RegParams.lastUsedChannelIndex)
    bdba:	4a59      	ldr	r2, [pc, #356]	; (bf20 <setLBTTimer+0x1d0>)
    bdbc:	232f      	movs	r3, #47	; 0x2f
    bdbe:	5cd0      	ldrb	r0, [r2, r3]
			if((RegParams.pChParams[i].status == ENABLED) && (RegParams.cmnParams.paramsType2.channelTimer[i] != 0))
    bdc0:	7911      	ldrb	r1, [r2, #4]
    bdc2:	7953      	ldrb	r3, [r2, #5]
    bdc4:	021b      	lsls	r3, r3, #8
    bdc6:	430b      	orrs	r3, r1
    bdc8:	7991      	ldrb	r1, [r2, #6]
    bdca:	0409      	lsls	r1, r1, #16
    bdcc:	430b      	orrs	r3, r1
    bdce:	79d1      	ldrb	r1, [r2, #7]
    bdd0:	0609      	lsls	r1, r1, #24
    bdd2:	4319      	orrs	r1, r3
    bdd4:	2600      	movs	r6, #0
    bdd6:	2200      	movs	r2, #0
					RegParams.cmnParams.paramsType2.channelTimer[i] = 0;
    bdd8:	2300      	movs	r3, #0
    bdda:	469c      	mov	ip, r3
					RegParams.cmnParams.paramsType2.channelTimer[i] = RegParams.cmnParams.paramsType2.channelTimer[i] - delta;
    bddc:	4653      	mov	r3, sl
    bdde:	9302      	str	r3, [sp, #8]
    bde0:	468b      	mov	fp, r1
    bde2:	4645      	mov	r5, r8
    bde4:	e03b      	b.n	be5e <setLBTTimer+0x10e>
		SwTimerStop(pLBTTimer->timerId);
    bde6:	4c4e      	ldr	r4, [pc, #312]	; (bf20 <setLBTTimer+0x1d0>)
    bde8:	25d6      	movs	r5, #214	; 0xd6
    bdea:	006d      	lsls	r5, r5, #1
    bdec:	5d60      	ldrb	r0, [r4, r5]
    bdee:	4b4e      	ldr	r3, [pc, #312]	; (bf28 <setLBTTimer+0x1d8>)
    bdf0:	4798      	blx	r3
		ticks = SwTimerReadValue(pLBTTimer->timerId);
    bdf2:	5d60      	ldrb	r0, [r4, r5]
    bdf4:	4b4d      	ldr	r3, [pc, #308]	; (bf2c <setLBTTimer+0x1dc>)
    bdf6:	4798      	blx	r3
	for(i = 0; i < RegParams.maxChannels; i++)
    bdf8:	232a      	movs	r3, #42	; 0x2a
    bdfa:	56e3      	ldrsb	r3, [r4, r3]
    bdfc:	4698      	mov	r8, r3
    bdfe:	2b00      	cmp	r3, #0
    be00:	dd66      	ble.n	bed0 <setLBTTimer+0x180>
		delta = pLBTTimer->lastTimerValue - US_TO_MS(ticks);
    be02:	4a47      	ldr	r2, [pc, #284]	; (bf20 <setLBTTimer+0x1d0>)
    be04:	23d4      	movs	r3, #212	; 0xd4
    be06:	005b      	lsls	r3, r3, #1
    be08:	5cd4      	ldrb	r4, [r2, r3]
    be0a:	23aa      	movs	r3, #170	; 0xaa
    be0c:	33ff      	adds	r3, #255	; 0xff
    be0e:	5cd3      	ldrb	r3, [r2, r3]
    be10:	021b      	lsls	r3, r3, #8
    be12:	4323      	orrs	r3, r4
    be14:	21d5      	movs	r1, #213	; 0xd5
    be16:	0049      	lsls	r1, r1, #1
    be18:	5c54      	ldrb	r4, [r2, r1]
    be1a:	0424      	lsls	r4, r4, #16
    be1c:	4323      	orrs	r3, r4
    be1e:	21ac      	movs	r1, #172	; 0xac
    be20:	31ff      	adds	r1, #255	; 0xff
    be22:	5c54      	ldrb	r4, [r2, r1]
    be24:	0624      	lsls	r4, r4, #24
    be26:	431c      	orrs	r4, r3
    be28:	21fa      	movs	r1, #250	; 0xfa
    be2a:	0089      	lsls	r1, r1, #2
    be2c:	4b40      	ldr	r3, [pc, #256]	; (bf30 <setLBTTimer+0x1e0>)
    be2e:	4798      	blx	r3
    be30:	1a23      	subs	r3, r4, r0
    be32:	469a      	mov	sl, r3
    uint32_t delta = 0, minim = UINT32_MAX, ticks;
    be34:	2301      	movs	r3, #1
    be36:	425b      	negs	r3, r3
    be38:	4699      	mov	r9, r3
    bool found = 0;
    be3a:	2300      	movs	r3, #0
    be3c:	9303      	str	r3, [sp, #12]
    be3e:	e7bc      	b.n	bdba <setLBTTimer+0x6a>
					RegParams.cmnParams.paramsType2.channelTimer[i] = 0;
    be40:	3658      	adds	r6, #88	; 0x58
    be42:	00b6      	lsls	r6, r6, #2
    be44:	4b36      	ldr	r3, [pc, #216]	; (bf20 <setLBTTimer+0x1d0>)
    be46:	4698      	mov	r8, r3
    be48:	4446      	add	r6, r8
    be4a:	4663      	mov	r3, ip
    be4c:	7233      	strb	r3, [r6, #8]
    be4e:	7273      	strb	r3, [r6, #9]
    be50:	72b3      	strb	r3, [r6, #10]
    be52:	72f3      	strb	r3, [r6, #11]
	for(i = 0; i < RegParams.maxChannels; i++)
    be54:	3201      	adds	r2, #1
    be56:	b2d2      	uxtb	r2, r2
    be58:	0016      	movs	r6, r2
    be5a:	42aa      	cmp	r2, r5
    be5c:	da32      	bge.n	bec4 <setLBTTimer+0x174>
		if(i != RegParams.lastUsedChannelIndex)
    be5e:	4290      	cmp	r0, r2
    be60:	d0f8      	beq.n	be54 <setLBTTimer+0x104>
			if((RegParams.pChParams[i].status == ENABLED) && (RegParams.cmnParams.paramsType2.channelTimer[i] != 0))
    be62:	0053      	lsls	r3, r2, #1
    be64:	4659      	mov	r1, fp
    be66:	5c5c      	ldrb	r4, [r3, r1]
    be68:	2c00      	cmp	r4, #0
    be6a:	d0f3      	beq.n	be54 <setLBTTimer+0x104>
    be6c:	0033      	movs	r3, r6
    be6e:	3358      	adds	r3, #88	; 0x58
    be70:	009b      	lsls	r3, r3, #2
    be72:	4f2b      	ldr	r7, [pc, #172]	; (bf20 <setLBTTimer+0x1d0>)
    be74:	46b8      	mov	r8, r7
    be76:	4443      	add	r3, r8
    be78:	7a1f      	ldrb	r7, [r3, #8]
    be7a:	46ba      	mov	sl, r7
    be7c:	7a5f      	ldrb	r7, [r3, #9]
    be7e:	023f      	lsls	r7, r7, #8
    be80:	46b8      	mov	r8, r7
    be82:	4657      	mov	r7, sl
    be84:	4641      	mov	r1, r8
    be86:	430f      	orrs	r7, r1
    be88:	7a99      	ldrb	r1, [r3, #10]
    be8a:	0409      	lsls	r1, r1, #16
    be8c:	430f      	orrs	r7, r1
    be8e:	7adb      	ldrb	r3, [r3, #11]
    be90:	061b      	lsls	r3, r3, #24
    be92:	433b      	orrs	r3, r7
    be94:	d0de      	beq.n	be54 <setLBTTimer+0x104>
				if(RegParams.cmnParams.paramsType2.channelTimer[i] > delta)
    be96:	9f02      	ldr	r7, [sp, #8]
    be98:	42bb      	cmp	r3, r7
    be9a:	d9d1      	bls.n	be40 <setLBTTimer+0xf0>
					RegParams.cmnParams.paramsType2.channelTimer[i] = RegParams.cmnParams.paramsType2.channelTimer[i] - delta;
    be9c:	1bdb      	subs	r3, r3, r7
    be9e:	3658      	adds	r6, #88	; 0x58
    bea0:	00b6      	lsls	r6, r6, #2
    bea2:	491f      	ldr	r1, [pc, #124]	; (bf20 <setLBTTimer+0x1d0>)
    bea4:	4688      	mov	r8, r1
    bea6:	4446      	add	r6, r8
    bea8:	7233      	strb	r3, [r6, #8]
    beaa:	0a19      	lsrs	r1, r3, #8
    beac:	7271      	strb	r1, [r6, #9]
    beae:	0c19      	lsrs	r1, r3, #16
    beb0:	72b1      	strb	r1, [r6, #10]
    beb2:	0e19      	lsrs	r1, r3, #24
    beb4:	72f1      	strb	r1, [r6, #11]
				if((RegParams.cmnParams.paramsType2.channelTimer[i] <= minim) && (RegParams.cmnParams.paramsType2.channelTimer[i] != 0))
    beb6:	454b      	cmp	r3, r9
    beb8:	d8cc      	bhi.n	be54 <setLBTTimer+0x104>
    beba:	2b00      	cmp	r3, #0
    bebc:	d0ca      	beq.n	be54 <setLBTTimer+0x104>
    bebe:	4699      	mov	r9, r3
					found = 1;
    bec0:	9403      	str	r4, [sp, #12]
    bec2:	e7c7      	b.n	be54 <setLBTTimer+0x104>
	if((found == 1) && minim)
    bec4:	9b03      	ldr	r3, [sp, #12]
    bec6:	2b00      	cmp	r3, #0
    bec8:	d002      	beq.n	bed0 <setLBTTimer+0x180>
    beca:	464b      	mov	r3, r9
    becc:	2b00      	cmp	r3, #0
    bece:	d107      	bne.n	bee0 <setLBTTimer+0x190>
}
    bed0:	2008      	movs	r0, #8
    bed2:	b005      	add	sp, #20
    bed4:	bc3c      	pop	{r2, r3, r4, r5}
    bed6:	4690      	mov	r8, r2
    bed8:	4699      	mov	r9, r3
    beda:	46a2      	mov	sl, r4
    bedc:	46ab      	mov	fp, r5
    bede:	bdf0      	pop	{r4, r5, r6, r7, pc}
		pLBTTimer->lastTimerValue = minim;
    bee0:	4b0f      	ldr	r3, [pc, #60]	; (bf20 <setLBTTimer+0x1d0>)
    bee2:	22d4      	movs	r2, #212	; 0xd4
    bee4:	0052      	lsls	r2, r2, #1
    bee6:	4649      	mov	r1, r9
    bee8:	5499      	strb	r1, [r3, r2]
    beea:	464a      	mov	r2, r9
    beec:	0a11      	lsrs	r1, r2, #8
    beee:	001a      	movs	r2, r3
    bef0:	32a9      	adds	r2, #169	; 0xa9
    bef2:	32ff      	adds	r2, #255	; 0xff
    bef4:	7051      	strb	r1, [r2, #1]
    bef6:	4649      	mov	r1, r9
    bef8:	0c09      	lsrs	r1, r1, #16
    befa:	7091      	strb	r1, [r2, #2]
    befc:	4649      	mov	r1, r9
    befe:	0e09      	lsrs	r1, r1, #24
    bf00:	70d1      	strb	r1, [r2, #3]
		SwTimerStart (pLBTTimer->timerId, MS_TO_US(minim), SW_TIMEOUT_RELATIVE, (void *)LBTChannelPauseCallback, NULL);
    bf02:	21fa      	movs	r1, #250	; 0xfa
    bf04:	0089      	lsls	r1, r1, #2
    bf06:	464a      	mov	r2, r9
    bf08:	4351      	muls	r1, r2
    bf0a:	22d6      	movs	r2, #214	; 0xd6
    bf0c:	0052      	lsls	r2, r2, #1
    bf0e:	5c98      	ldrb	r0, [r3, r2]
    bf10:	2300      	movs	r3, #0
    bf12:	9300      	str	r3, [sp, #0]
    bf14:	4b07      	ldr	r3, [pc, #28]	; (bf34 <setLBTTimer+0x1e4>)
    bf16:	2200      	movs	r2, #0
    bf18:	4c07      	ldr	r4, [pc, #28]	; (bf38 <setLBTTimer+0x1e8>)
    bf1a:	47a0      	blx	r4
    bf1c:	e7d8      	b.n	bed0 <setLBTTimer+0x180>
    bf1e:	46c0      	nop			; (mov r8, r8)
    bf20:	200024d0 	.word	0x200024d0
    bf24:	0000efc1 	.word	0x0000efc1
    bf28:	0000f141 	.word	0x0000f141
    bf2c:	0000efd5 	.word	0x0000efd5
    bf30:	00016641 	.word	0x00016641
    bf34:	0000bf3d 	.word	0x0000bf3d
    bf38:	0000ee29 	.word	0x0000ee29

0000bf3c <LBTChannelPauseCallback>:
{
    bf3c:	b5f0      	push	{r4, r5, r6, r7, lr}
    bf3e:	46de      	mov	lr, fp
    bf40:	4657      	mov	r7, sl
    bf42:	464e      	mov	r6, r9
    bf44:	4645      	mov	r5, r8
    bf46:	b5e0      	push	{r5, r6, r7, lr}
    bf48:	b085      	sub	sp, #20
    for (i=0; i < RegParams.maxChannels; i++)
    bf4a:	232a      	movs	r3, #42	; 0x2a
    bf4c:	4a49      	ldr	r2, [pc, #292]	; (c074 <LBTChannelPauseCallback+0x138>)
    bf4e:	56d6      	ldrsb	r6, [r2, r3]
    bf50:	2e00      	cmp	r6, #0
    bf52:	dd68      	ble.n	c026 <LBTChannelPauseCallback+0xea>
        if ((RegParams.pChParams[i].status == ENABLED) && ( RegParams.cmnParams.paramsType2.channelTimer[i] != 0 ))
    bf54:	0013      	movs	r3, r2
    bf56:	7915      	ldrb	r5, [r2, #4]
    bf58:	7952      	ldrb	r2, [r2, #5]
    bf5a:	0212      	lsls	r2, r2, #8
    bf5c:	432a      	orrs	r2, r5
    bf5e:	799d      	ldrb	r5, [r3, #6]
    bf60:	042d      	lsls	r5, r5, #16
    bf62:	432a      	orrs	r2, r5
    bf64:	79dd      	ldrb	r5, [r3, #7]
    bf66:	062d      	lsls	r5, r5, #24
    bf68:	4315      	orrs	r5, r2
            if ( RegParams.cmnParams.paramsType2.channelTimer[i] > pLBTTimer->lastTimerValue)
    bf6a:	22d4      	movs	r2, #212	; 0xd4
    bf6c:	0052      	lsls	r2, r2, #1
    bf6e:	5c9f      	ldrb	r7, [r3, r2]
    bf70:	22aa      	movs	r2, #170	; 0xaa
    bf72:	32ff      	adds	r2, #255	; 0xff
    bf74:	5c9a      	ldrb	r2, [r3, r2]
    bf76:	0212      	lsls	r2, r2, #8
    bf78:	433a      	orrs	r2, r7
    bf7a:	21d5      	movs	r1, #213	; 0xd5
    bf7c:	0049      	lsls	r1, r1, #1
    bf7e:	5c5f      	ldrb	r7, [r3, r1]
    bf80:	043f      	lsls	r7, r7, #16
    bf82:	433a      	orrs	r2, r7
    bf84:	21ac      	movs	r1, #172	; 0xac
    bf86:	31ff      	adds	r1, #255	; 0xff
    bf88:	5c5f      	ldrb	r7, [r3, r1]
    bf8a:	063f      	lsls	r7, r7, #24
    bf8c:	4317      	orrs	r7, r2
    bf8e:	9703      	str	r7, [sp, #12]
    bf90:	2000      	movs	r0, #0
    bf92:	2300      	movs	r3, #0
    bf94:	2200      	movs	r2, #0
    bf96:	4691      	mov	r9, r2
    bf98:	3a01      	subs	r2, #1
    bf9a:	4690      	mov	r8, r2
                RegParams.cmnParams.paramsType2.channelTimer[i] = 0;
    bf9c:	2200      	movs	r2, #0
    bf9e:	4694      	mov	ip, r2
    bfa0:	e00e      	b.n	bfc0 <LBTChannelPauseCallback+0x84>
    bfa2:	3058      	adds	r0, #88	; 0x58
    bfa4:	0080      	lsls	r0, r0, #2
    bfa6:	4a33      	ldr	r2, [pc, #204]	; (c074 <LBTChannelPauseCallback+0x138>)
    bfa8:	4692      	mov	sl, r2
    bfaa:	4450      	add	r0, sl
    bfac:	4662      	mov	r2, ip
    bfae:	7202      	strb	r2, [r0, #8]
    bfb0:	7242      	strb	r2, [r0, #9]
    bfb2:	7282      	strb	r2, [r0, #10]
    bfb4:	72c2      	strb	r2, [r0, #11]
    for (i=0; i < RegParams.maxChannels; i++)
    bfb6:	3301      	adds	r3, #1
    bfb8:	b2db      	uxtb	r3, r3
    bfba:	0018      	movs	r0, r3
    bfbc:	42b3      	cmp	r3, r6
    bfbe:	da2f      	bge.n	c020 <LBTChannelPauseCallback+0xe4>
        if ((RegParams.pChParams[i].status == ENABLED) && ( RegParams.cmnParams.paramsType2.channelTimer[i] != 0 ))
    bfc0:	005a      	lsls	r2, r3, #1
    bfc2:	5d54      	ldrb	r4, [r2, r5]
    bfc4:	2c00      	cmp	r4, #0
    bfc6:	d0f6      	beq.n	bfb6 <LBTChannelPauseCallback+0x7a>
    bfc8:	0002      	movs	r2, r0
    bfca:	3258      	adds	r2, #88	; 0x58
    bfcc:	0092      	lsls	r2, r2, #2
    bfce:	4929      	ldr	r1, [pc, #164]	; (c074 <LBTChannelPauseCallback+0x138>)
    bfd0:	468a      	mov	sl, r1
    bfd2:	4452      	add	r2, sl
    bfd4:	7a17      	ldrb	r7, [r2, #8]
    bfd6:	46bb      	mov	fp, r7
    bfd8:	7a57      	ldrb	r7, [r2, #9]
    bfda:	023f      	lsls	r7, r7, #8
    bfdc:	46ba      	mov	sl, r7
    bfde:	465f      	mov	r7, fp
    bfe0:	4651      	mov	r1, sl
    bfe2:	430f      	orrs	r7, r1
    bfe4:	7a91      	ldrb	r1, [r2, #10]
    bfe6:	0409      	lsls	r1, r1, #16
    bfe8:	430f      	orrs	r7, r1
    bfea:	7ad2      	ldrb	r2, [r2, #11]
    bfec:	0612      	lsls	r2, r2, #24
    bfee:	433a      	orrs	r2, r7
    bff0:	d0e1      	beq.n	bfb6 <LBTChannelPauseCallback+0x7a>
            if ( RegParams.cmnParams.paramsType2.channelTimer[i] > pLBTTimer->lastTimerValue)
    bff2:	9f03      	ldr	r7, [sp, #12]
    bff4:	42ba      	cmp	r2, r7
    bff6:	d9d4      	bls.n	bfa2 <LBTChannelPauseCallback+0x66>
                RegParams.cmnParams.paramsType2.channelTimer[i] = RegParams.cmnParams.paramsType2.channelTimer[i] - pLBTTimer->lastTimerValue;
    bff8:	1bd2      	subs	r2, r2, r7
    bffa:	3058      	adds	r0, #88	; 0x58
    bffc:	0080      	lsls	r0, r0, #2
    bffe:	491d      	ldr	r1, [pc, #116]	; (c074 <LBTChannelPauseCallback+0x138>)
    c000:	468a      	mov	sl, r1
    c002:	4450      	add	r0, sl
    c004:	7202      	strb	r2, [r0, #8]
    c006:	0a11      	lsrs	r1, r2, #8
    c008:	7241      	strb	r1, [r0, #9]
    c00a:	0c11      	lsrs	r1, r2, #16
    c00c:	7281      	strb	r1, [r0, #10]
    c00e:	0e11      	lsrs	r1, r2, #24
    c010:	72c1      	strb	r1, [r0, #11]
            if ( (RegParams.cmnParams.paramsType2.channelTimer[i] <= minim) && (RegParams.cmnParams.paramsType2.channelTimer[i] != 0) )
    c012:	4542      	cmp	r2, r8
    c014:	d8cf      	bhi.n	bfb6 <LBTChannelPauseCallback+0x7a>
    c016:	2a00      	cmp	r2, #0
    c018:	d0cd      	beq.n	bfb6 <LBTChannelPauseCallback+0x7a>
                found = 1;
    c01a:	46a1      	mov	r9, r4
            if ( (RegParams.cmnParams.paramsType2.channelTimer[i] <= minim) && (RegParams.cmnParams.paramsType2.channelTimer[i] != 0) )
    c01c:	4690      	mov	r8, r2
    c01e:	e7ca      	b.n	bfb6 <LBTChannelPauseCallback+0x7a>
    if ( found == 1 )
    c020:	464b      	mov	r3, r9
    c022:	2b00      	cmp	r3, #0
    c024:	d106      	bne.n	c034 <LBTChannelPauseCallback+0xf8>
}
    c026:	b005      	add	sp, #20
    c028:	bc3c      	pop	{r2, r3, r4, r5}
    c02a:	4690      	mov	r8, r2
    c02c:	4699      	mov	r9, r3
    c02e:	46a2      	mov	sl, r4
    c030:	46ab      	mov	fp, r5
    c032:	bdf0      	pop	{r4, r5, r6, r7, pc}
        pLBTTimer->lastTimerValue = minim;
    c034:	4b0f      	ldr	r3, [pc, #60]	; (c074 <LBTChannelPauseCallback+0x138>)
    c036:	22d4      	movs	r2, #212	; 0xd4
    c038:	0052      	lsls	r2, r2, #1
    c03a:	4641      	mov	r1, r8
    c03c:	5499      	strb	r1, [r3, r2]
    c03e:	4642      	mov	r2, r8
    c040:	0a11      	lsrs	r1, r2, #8
    c042:	001a      	movs	r2, r3
    c044:	32a9      	adds	r2, #169	; 0xa9
    c046:	32ff      	adds	r2, #255	; 0xff
    c048:	7051      	strb	r1, [r2, #1]
    c04a:	4641      	mov	r1, r8
    c04c:	0c09      	lsrs	r1, r1, #16
    c04e:	7091      	strb	r1, [r2, #2]
    c050:	4641      	mov	r1, r8
    c052:	0e09      	lsrs	r1, r1, #24
    c054:	70d1      	strb	r1, [r2, #3]
        SwTimerStart (pLBTTimer->timerId, MS_TO_US(minim), SW_TIMEOUT_RELATIVE, (void *)LBTChannelPauseCallback, NULL);
    c056:	21fa      	movs	r1, #250	; 0xfa
    c058:	0089      	lsls	r1, r1, #2
    c05a:	4642      	mov	r2, r8
    c05c:	4351      	muls	r1, r2
    c05e:	22d6      	movs	r2, #214	; 0xd6
    c060:	0052      	lsls	r2, r2, #1
    c062:	5c98      	ldrb	r0, [r3, r2]
    c064:	2300      	movs	r3, #0
    c066:	9300      	str	r3, [sp, #0]
    c068:	4b03      	ldr	r3, [pc, #12]	; (c078 <LBTChannelPauseCallback+0x13c>)
    c06a:	2200      	movs	r2, #0
    c06c:	4c03      	ldr	r4, [pc, #12]	; (c07c <LBTChannelPauseCallback+0x140>)
    c06e:	47a0      	blx	r4
}
    c070:	e7d9      	b.n	c026 <LBTChannelPauseCallback+0xea>
    c072:	46c0      	nop			; (mov r8, r8)
    c074:	200024d0 	.word	0x200024d0
    c078:	0000bf3d 	.word	0x0000bf3d
    c07c:	0000ee29 	.word	0x0000ee29

0000c080 <JoinDutyCycleCallback>:
{   
    c080:	b510      	push	{r4, lr}
    c082:	b082      	sub	sp, #8
	if(RegParams.pJoinDutyCycleTimer->remainingtime!=0)
    c084:	492e      	ldr	r1, [pc, #184]	; (c140 <JoinDutyCycleCallback+0xc0>)
    c086:	7d0b      	ldrb	r3, [r1, #20]
    c088:	7d4a      	ldrb	r2, [r1, #21]
    c08a:	0212      	lsls	r2, r2, #8
    c08c:	431a      	orrs	r2, r3
    c08e:	7d8b      	ldrb	r3, [r1, #22]
    c090:	041b      	lsls	r3, r3, #16
    c092:	431a      	orrs	r2, r3
    c094:	7dcb      	ldrb	r3, [r1, #23]
    c096:	061b      	lsls	r3, r3, #24
    c098:	4313      	orrs	r3, r2
    c09a:	7919      	ldrb	r1, [r3, #4]
    c09c:	795a      	ldrb	r2, [r3, #5]
    c09e:	0212      	lsls	r2, r2, #8
    c0a0:	430a      	orrs	r2, r1
    c0a2:	7999      	ldrb	r1, [r3, #6]
    c0a4:	0409      	lsls	r1, r1, #16
    c0a6:	430a      	orrs	r2, r1
    c0a8:	79d9      	ldrb	r1, [r3, #7]
    c0aa:	0609      	lsls	r1, r1, #24
    c0ac:	4311      	orrs	r1, r2
    c0ae:	d03c      	beq.n	c12a <JoinDutyCycleCallback+0xaa>
		if(RegParams.pJoinDutyCycleTimer->remainingtime>US_TO_MS(SWTIMER_MAX_TIMEOUT))
    c0b0:	4a24      	ldr	r2, [pc, #144]	; (c144 <JoinDutyCycleCallback+0xc4>)
    c0b2:	4291      	cmp	r1, r2
    c0b4:	d91e      	bls.n	c0f4 <JoinDutyCycleCallback+0x74>
			RegParams.pJoinDutyCycleTimer->remainingtime = RegParams.pJoinDutyCycleTimer->remainingtime-(US_TO_MS(SWTIMER_MAX_TIMEOUT));
    c0b6:	4a24      	ldr	r2, [pc, #144]	; (c148 <JoinDutyCycleCallback+0xc8>)
    c0b8:	4694      	mov	ip, r2
    c0ba:	4461      	add	r1, ip
    c0bc:	7119      	strb	r1, [r3, #4]
    c0be:	0a0a      	lsrs	r2, r1, #8
    c0c0:	715a      	strb	r2, [r3, #5]
    c0c2:	0c0a      	lsrs	r2, r1, #16
    c0c4:	719a      	strb	r2, [r3, #6]
    c0c6:	0e09      	lsrs	r1, r1, #24
    c0c8:	71d9      	strb	r1, [r3, #7]
			SwTimerStart(RegParams.pJoinDutyCycleTimer->timerId, SWTIMER_MAX_TIMEOUT, SW_TIMEOUT_RELATIVE, (void *)JoinDutyCycleCallback, NULL);
    c0ca:	491d      	ldr	r1, [pc, #116]	; (c140 <JoinDutyCycleCallback+0xc0>)
    c0cc:	7d0b      	ldrb	r3, [r1, #20]
    c0ce:	7d4a      	ldrb	r2, [r1, #21]
    c0d0:	0212      	lsls	r2, r2, #8
    c0d2:	431a      	orrs	r2, r3
    c0d4:	7d8b      	ldrb	r3, [r1, #22]
    c0d6:	041b      	lsls	r3, r3, #16
    c0d8:	431a      	orrs	r2, r3
    c0da:	7dcb      	ldrb	r3, [r1, #23]
    c0dc:	061b      	lsls	r3, r3, #24
    c0de:	4313      	orrs	r3, r2
    c0e0:	7a18      	ldrb	r0, [r3, #8]
    c0e2:	2300      	movs	r3, #0
    c0e4:	9300      	str	r3, [sp, #0]
    c0e6:	4b19      	ldr	r3, [pc, #100]	; (c14c <JoinDutyCycleCallback+0xcc>)
    c0e8:	2200      	movs	r2, #0
    c0ea:	4919      	ldr	r1, [pc, #100]	; (c150 <JoinDutyCycleCallback+0xd0>)
    c0ec:	4c19      	ldr	r4, [pc, #100]	; (c154 <JoinDutyCycleCallback+0xd4>)
    c0ee:	47a0      	blx	r4
}
    c0f0:	b002      	add	sp, #8
    c0f2:	bd10      	pop	{r4, pc}
			SwTimerStart(RegParams.pJoinDutyCycleTimer->timerId, MS_TO_US(RegParams.pJoinDutyCycleTimer->remainingtime), SW_TIMEOUT_RELATIVE, (void *)JoinDutyCycleCallback, NULL);
    c0f4:	22fa      	movs	r2, #250	; 0xfa
    c0f6:	0092      	lsls	r2, r2, #2
    c0f8:	4351      	muls	r1, r2
    c0fa:	7a18      	ldrb	r0, [r3, #8]
    c0fc:	2300      	movs	r3, #0
    c0fe:	9300      	str	r3, [sp, #0]
    c100:	4b12      	ldr	r3, [pc, #72]	; (c14c <JoinDutyCycleCallback+0xcc>)
    c102:	2200      	movs	r2, #0
    c104:	4c13      	ldr	r4, [pc, #76]	; (c154 <JoinDutyCycleCallback+0xd4>)
    c106:	47a0      	blx	r4
			RegParams.pJoinDutyCycleTimer->remainingtime =0;
    c108:	490d      	ldr	r1, [pc, #52]	; (c140 <JoinDutyCycleCallback+0xc0>)
    c10a:	7d0b      	ldrb	r3, [r1, #20]
    c10c:	7d4a      	ldrb	r2, [r1, #21]
    c10e:	0212      	lsls	r2, r2, #8
    c110:	431a      	orrs	r2, r3
    c112:	7d8b      	ldrb	r3, [r1, #22]
    c114:	041b      	lsls	r3, r3, #16
    c116:	431a      	orrs	r2, r3
    c118:	7dcb      	ldrb	r3, [r1, #23]
    c11a:	061b      	lsls	r3, r3, #24
    c11c:	4313      	orrs	r3, r2
    c11e:	2200      	movs	r2, #0
    c120:	711a      	strb	r2, [r3, #4]
    c122:	715a      	strb	r2, [r3, #5]
    c124:	719a      	strb	r2, [r3, #6]
    c126:	71da      	strb	r2, [r3, #7]
    c128:	e7e2      	b.n	c0f0 <JoinDutyCycleCallback+0x70>
	SwTimerStop(RegParams.pJoinDutyCycleTimer->timerId);
    c12a:	7a18      	ldrb	r0, [r3, #8]
    c12c:	4b0a      	ldr	r3, [pc, #40]	; (c158 <JoinDutyCycleCallback+0xd8>)
    c12e:	4798      	blx	r3
	RegParams.joinDutyCycleTimeout = 0;
    c130:	4b03      	ldr	r3, [pc, #12]	; (c140 <JoinDutyCycleCallback+0xc0>)
    c132:	333e      	adds	r3, #62	; 0x3e
    c134:	2200      	movs	r2, #0
    c136:	701a      	strb	r2, [r3, #0]
    c138:	705a      	strb	r2, [r3, #1]
    c13a:	709a      	strb	r2, [r3, #2]
    c13c:	70da      	strb	r2, [r3, #3]
}
    c13e:	e7d7      	b.n	c0f0 <JoinDutyCycleCallback+0x70>
    c140:	200024d0 	.word	0x200024d0
    c144:	0020c49b 	.word	0x0020c49b
    c148:	ffdf3b65 	.word	0xffdf3b65
    c14c:	0000c081 	.word	0x0000c081
    c150:	7fffffff 	.word	0x7fffffff
    c154:	0000ee29 	.word	0x0000ee29
    c158:	0000f141 	.word	0x0000f141

0000c15c <JoinBackoffCallback>:
{
    c15c:	b510      	push	{r4, lr}
    c15e:	b082      	sub	sp, #8
	RegParams.joinbccount ++;
    c160:	4b0c      	ldr	r3, [pc, #48]	; (c194 <JoinBackoffCallback+0x38>)
    c162:	2142      	movs	r1, #66	; 0x42
    c164:	5c5a      	ldrb	r2, [r3, r1]
    c166:	3201      	adds	r2, #1
    c168:	545a      	strb	r2, [r3, r1]
	SwTimerStart (RegParams.pJoinBackoffTimer->timerId, MS_TO_US(BACKOFF_BASE_TIME_IN_MS), SW_TIMEOUT_RELATIVE, (void *)JoinBackoffCallback, NULL);
    c16a:	7e19      	ldrb	r1, [r3, #24]
    c16c:	7e5a      	ldrb	r2, [r3, #25]
    c16e:	0212      	lsls	r2, r2, #8
    c170:	4311      	orrs	r1, r2
    c172:	7e9a      	ldrb	r2, [r3, #26]
    c174:	0412      	lsls	r2, r2, #16
    c176:	430a      	orrs	r2, r1
    c178:	7edb      	ldrb	r3, [r3, #27]
    c17a:	061b      	lsls	r3, r3, #24
    c17c:	4313      	orrs	r3, r2
    c17e:	7818      	ldrb	r0, [r3, #0]
    c180:	2300      	movs	r3, #0
    c182:	9300      	str	r3, [sp, #0]
    c184:	4b04      	ldr	r3, [pc, #16]	; (c198 <JoinBackoffCallback+0x3c>)
    c186:	2200      	movs	r2, #0
    c188:	4904      	ldr	r1, [pc, #16]	; (c19c <JoinBackoffCallback+0x40>)
    c18a:	4c05      	ldr	r4, [pc, #20]	; (c1a0 <JoinBackoffCallback+0x44>)
    c18c:	47a0      	blx	r4
}
    c18e:	b002      	add	sp, #8
    c190:	bd10      	pop	{r4, pc}
    c192:	46c0      	nop			; (mov r8, r8)
    c194:	200024d0 	.word	0x200024d0
    c198:	0000c15d 	.word	0x0000c15d
    c19c:	6b49d200 	.word	0x6b49d200
    c1a0:	0000ee29 	.word	0x0000ee29

0000c1a4 <ValidateDataRangeT2>:
	memcpy(&val_drange,attrInput,sizeof(ValUpdateDrange_t));
    c1a4:	784a      	ldrb	r2, [r1, #1]
	dataRateMin = val_drange.dataRangeNew & LAST_NIBBLE;
    c1a6:	230f      	movs	r3, #15
    c1a8:	4013      	ands	r3, r2
    if ( dataRate > RegParams.minDataRate )
    c1aa:	2124      	movs	r1, #36	; 0x24
    c1ac:	4807      	ldr	r0, [pc, #28]	; (c1cc <ValidateDataRangeT2+0x28>)
    c1ae:	5c41      	ldrb	r1, [r0, r1]
		retVal = LORAWAN_INVALID_PARAMETER;
    c1b0:	200a      	movs	r0, #10
    if ( dataRate > RegParams.minDataRate )
    c1b2:	428b      	cmp	r3, r1
    c1b4:	d900      	bls.n	c1b8 <ValidateDataRangeT2+0x14>
}
    c1b6:	4770      	bx	lr
	dataRateMax = (val_drange.dataRangeNew & FIRST_NIBBLE) >> SHIFT4;
    c1b8:	0912      	lsrs	r2, r2, #4
		retVal = LORAWAN_INVALID_PARAMETER;
    c1ba:	200a      	movs	r0, #10
    if ( dataRate > RegParams.minDataRate )
    c1bc:	428a      	cmp	r2, r1
    c1be:	d8fa      	bhi.n	c1b6 <ValidateDataRangeT2+0x12>
	StackRetStatus_t retVal = LORAWAN_SUCCESS;
    c1c0:	3802      	subs	r0, #2
	   || (dataRateMax < dataRateMin) )
    c1c2:	4293      	cmp	r3, r2
    c1c4:	d9f7      	bls.n	c1b6 <ValidateDataRangeT2+0x12>
		retVal = LORAWAN_INVALID_PARAMETER;
    c1c6:	3002      	adds	r0, #2
	return retVal;
    c1c8:	e7f5      	b.n	c1b6 <ValidateDataRangeT2+0x12>
    c1ca:	46c0      	nop			; (mov r8, r8)
    c1cc:	200024d0 	.word	0x200024d0

0000c1d0 <setDataRangeT2>:
{
    c1d0:	b5f0      	push	{r4, r5, r6, r7, lr}
    c1d2:	46c6      	mov	lr, r8
    c1d4:	b500      	push	{lr}
    c1d6:	b082      	sub	sp, #8
	memcpy((void *)&update_dr,attrInput,sizeof(ValUpdateDrange_t));
    c1d8:	780d      	ldrb	r5, [r1, #0]
    c1da:	784e      	ldrb	r6, [r1, #1]
	val_chid.channelIndex = update_dr.channelIndex;
    c1dc:	ab01      	add	r3, sp, #4
    c1de:	701d      	strb	r5, [r3, #0]
	val_chid.allowedForDefaultChannels = ALL_CHANNELS;
    c1e0:	2201      	movs	r2, #1
    c1e2:	705a      	strb	r2, [r3, #1]
	if((ValidateDataRangeT2(DATA_RANGE, attrInput) != LORAWAN_SUCCESS) || (ValidateChannelIdT2(CHANNEL_ID, &val_chid) != LORAWAN_SUCCESS))
    c1e4:	2012      	movs	r0, #18
    c1e6:	4b24      	ldr	r3, [pc, #144]	; (c278 <setDataRangeT2+0xa8>)
    c1e8:	4798      	blx	r3
		retVal = LORAWAN_INVALID_PARAMETER;
    c1ea:	240a      	movs	r4, #10
	if((ValidateDataRangeT2(DATA_RANGE, attrInput) != LORAWAN_SUCCESS) || (ValidateChannelIdT2(CHANNEL_ID, &val_chid) != LORAWAN_SUCCESS))
    c1ec:	2808      	cmp	r0, #8
    c1ee:	d004      	beq.n	c1fa <setDataRangeT2+0x2a>
}
    c1f0:	0020      	movs	r0, r4
    c1f2:	b002      	add	sp, #8
    c1f4:	bc04      	pop	{r2}
    c1f6:	4690      	mov	r8, r2
    c1f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if((ValidateDataRangeT2(DATA_RANGE, attrInput) != LORAWAN_SUCCESS) || (ValidateChannelIdT2(CHANNEL_ID, &val_chid) != LORAWAN_SUCCESS))
    c1fa:	a901      	add	r1, sp, #4
    c1fc:	300d      	adds	r0, #13
    c1fe:	4b1f      	ldr	r3, [pc, #124]	; (c27c <setDataRangeT2+0xac>)
    c200:	4798      	blx	r3
    c202:	0004      	movs	r4, r0
    c204:	2808      	cmp	r0, #8
    c206:	d001      	beq.n	c20c <setDataRangeT2+0x3c>
		retVal = LORAWAN_INVALID_PARAMETER;
    c208:	240a      	movs	r4, #10
    c20a:	e7f1      	b.n	c1f0 <setDataRangeT2+0x20>
		RegParams.pChParams[update_dr.channelIndex].dataRange.value = update_dr.dataRangeNew;
    c20c:	4f1c      	ldr	r7, [pc, #112]	; (c280 <setDataRangeT2+0xb0>)
    c20e:	793b      	ldrb	r3, [r7, #4]
    c210:	797a      	ldrb	r2, [r7, #5]
    c212:	0212      	lsls	r2, r2, #8
    c214:	431a      	orrs	r2, r3
    c216:	79bb      	ldrb	r3, [r7, #6]
    c218:	041b      	lsls	r3, r3, #16
    c21a:	431a      	orrs	r2, r3
    c21c:	79fb      	ldrb	r3, [r7, #7]
    c21e:	061b      	lsls	r3, r3, #24
    c220:	4313      	orrs	r3, r2
    c222:	006a      	lsls	r2, r5, #1
    c224:	4690      	mov	r8, r2
    c226:	4443      	add	r3, r8
    c228:	705e      	strb	r6, [r3, #1]
		PDS_STORE(RegParams.regParamItems.ch_param_1_item_id);
    c22a:	4b16      	ldr	r3, [pc, #88]	; (c284 <setDataRangeT2+0xb4>)
    c22c:	5cfb      	ldrb	r3, [r7, r3]
    c22e:	4a16      	ldr	r2, [pc, #88]	; (c288 <setDataRangeT2+0xb8>)
    c230:	5cb8      	ldrb	r0, [r7, r2]
    c232:	0200      	lsls	r0, r0, #8
    c234:	4318      	orrs	r0, r3
    c236:	b2c1      	uxtb	r1, r0
    c238:	0a00      	lsrs	r0, r0, #8
    c23a:	4e14      	ldr	r6, [pc, #80]	; (c28c <setDataRangeT2+0xbc>)
    c23c:	47b0      	blx	r6
		RegParams.pOtherChParams[update_dr.channelIndex].parametersDefined |= DATA_RANGE_DEFINED;
    c23e:	7a3b      	ldrb	r3, [r7, #8]
    c240:	7a7a      	ldrb	r2, [r7, #9]
    c242:	0212      	lsls	r2, r2, #8
    c244:	431a      	orrs	r2, r3
    c246:	7abb      	ldrb	r3, [r7, #10]
    c248:	041b      	lsls	r3, r3, #16
    c24a:	431a      	orrs	r2, r3
    c24c:	7afb      	ldrb	r3, [r7, #11]
    c24e:	061b      	lsls	r3, r3, #24
    c250:	4313      	orrs	r3, r2
    c252:	4445      	add	r5, r8
    c254:	00ad      	lsls	r5, r5, #2
    c256:	195d      	adds	r5, r3, r5
    c258:	7aeb      	ldrb	r3, [r5, #11]
    c25a:	2202      	movs	r2, #2
    c25c:	4313      	orrs	r3, r2
    c25e:	72eb      	strb	r3, [r5, #11]
		PDS_STORE(RegParams.regParamItems.ch_param_2_item_id);
    c260:	2384      	movs	r3, #132	; 0x84
    c262:	009b      	lsls	r3, r3, #2
    c264:	5cfb      	ldrb	r3, [r7, r3]
    c266:	4a0a      	ldr	r2, [pc, #40]	; (c290 <setDataRangeT2+0xc0>)
    c268:	5cb8      	ldrb	r0, [r7, r2]
    c26a:	0200      	lsls	r0, r0, #8
    c26c:	4318      	orrs	r0, r3
    c26e:	b2c1      	uxtb	r1, r0
    c270:	0a00      	lsrs	r0, r0, #8
    c272:	47b0      	blx	r6
    c274:	e7bc      	b.n	c1f0 <setDataRangeT2+0x20>
    c276:	46c0      	nop			; (mov r8, r8)
    c278:	0000c1a5 	.word	0x0000c1a5
    c27c:	00009a55 	.word	0x00009a55
    c280:	200024d0 	.word	0x200024d0
    c284:	0000020e 	.word	0x0000020e
    c288:	0000020f 	.word	0x0000020f
    c28c:	0000e0f9 	.word	0x0000e0f9
    c290:	00000211 	.word	0x00000211

0000c294 <LORAREG_GetAttr_MaxPayloadT3>:
{
    c294:	b530      	push	{r4, r5, lr}
	dataRate = *(uint8_t *)attrInput;
    c296:	780b      	ldrb	r3, [r1, #0]
    if ( dataRate > RegParams.minDataRate )
    c298:	2124      	movs	r1, #36	; 0x24
    c29a:	4816      	ldr	r0, [pc, #88]	; (c2f4 <LORAREG_GetAttr_MaxPayloadT3+0x60>)
    c29c:	5c41      	ldrb	r1, [r0, r1]
		result =  LORAWAN_INVALID_PARAMETER;
    c29e:	200a      	movs	r0, #10
    if ( dataRate > RegParams.minDataRate )
    c2a0:	4299      	cmp	r1, r3
    c2a2:	d215      	bcs.n	c2d0 <LORAREG_GetAttr_MaxPayloadT3+0x3c>
	if(RegParams.cmnParams.paramsType2.txParams.uplinkDwellTime == 1)
    c2a4:	21e1      	movs	r1, #225	; 0xe1
    c2a6:	0049      	lsls	r1, r1, #1
    c2a8:	4c12      	ldr	r4, [pc, #72]	; (c2f4 <LORAREG_GetAttr_MaxPayloadT3+0x60>)
    c2aa:	5c61      	ldrb	r1, [r4, r1]
    c2ac:	07c9      	lsls	r1, r1, #31
    c2ae:	d411      	bmi.n	c2d4 <LORAREG_GetAttr_MaxPayloadT3+0x40>
		*(uint8_t *)attrOutput = RegParams.pDrParams[dataRate].maxPayloadSizeDt0;
    c2b0:	4d10      	ldr	r5, [pc, #64]	; (c2f4 <LORAREG_GetAttr_MaxPayloadT3+0x60>)
    c2b2:	7829      	ldrb	r1, [r5, #0]
    c2b4:	786c      	ldrb	r4, [r5, #1]
    c2b6:	0224      	lsls	r4, r4, #8
    c2b8:	430c      	orrs	r4, r1
    c2ba:	78a9      	ldrb	r1, [r5, #2]
    c2bc:	0409      	lsls	r1, r1, #16
    c2be:	430c      	orrs	r4, r1
    c2c0:	78e9      	ldrb	r1, [r5, #3]
    c2c2:	0609      	lsls	r1, r1, #24
    c2c4:	4321      	orrs	r1, r4
    c2c6:	00db      	lsls	r3, r3, #3
    c2c8:	185b      	adds	r3, r3, r1
    c2ca:	789b      	ldrb	r3, [r3, #2]
    c2cc:	7013      	strb	r3, [r2, #0]
}
    c2ce:	bd30      	pop	{r4, r5, pc}
	StackRetStatus_t result = LORAWAN_SUCCESS;
    c2d0:	3802      	subs	r0, #2
    c2d2:	e7e7      	b.n	c2a4 <LORAREG_GetAttr_MaxPayloadT3+0x10>
		*(uint8_t *)attrOutput = RegParams.pDrParams[dataRate].maxPayloadSizeDt1;
    c2d4:	0025      	movs	r5, r4
    c2d6:	7821      	ldrb	r1, [r4, #0]
    c2d8:	7864      	ldrb	r4, [r4, #1]
    c2da:	0224      	lsls	r4, r4, #8
    c2dc:	430c      	orrs	r4, r1
    c2de:	78a9      	ldrb	r1, [r5, #2]
    c2e0:	0409      	lsls	r1, r1, #16
    c2e2:	430c      	orrs	r4, r1
    c2e4:	78e9      	ldrb	r1, [r5, #3]
    c2e6:	0609      	lsls	r1, r1, #24
    c2e8:	4321      	orrs	r1, r4
    c2ea:	00db      	lsls	r3, r3, #3
    c2ec:	1859      	adds	r1, r3, r1
    c2ee:	78cb      	ldrb	r3, [r1, #3]
    c2f0:	7013      	strb	r3, [r2, #0]
    c2f2:	e7ec      	b.n	c2ce <LORAREG_GetAttr_MaxPayloadT3+0x3a>
    c2f4:	200024d0 	.word	0x200024d0

0000c2f8 <LORAREG_GetAttr_RxWindowSizeT2>:
{
    c2f8:	b510      	push	{r4, lr}
	dataRate = *(uint8_t *)attrInput;
    c2fa:	780b      	ldrb	r3, [r1, #0]
    if ( dataRate > RegParams.minDataRate )
    c2fc:	2124      	movs	r1, #36	; 0x24
    c2fe:	480d      	ldr	r0, [pc, #52]	; (c334 <LORAREG_GetAttr_RxWindowSizeT2+0x3c>)
    c300:	5c41      	ldrb	r1, [r0, r1]
		return LORAWAN_INVALID_PARAMETER;
    c302:	200a      	movs	r0, #10
    if ( dataRate > RegParams.minDataRate )
    c304:	4299      	cmp	r1, r3
    c306:	d200      	bcs.n	c30a <LORAREG_GetAttr_RxWindowSizeT2+0x12>
}
    c308:	bd10      	pop	{r4, pc}
		*(uint16_t *)attrOutput = RegParams.pDrParams[dataRate].rxWindowSize;
    c30a:	4c0a      	ldr	r4, [pc, #40]	; (c334 <LORAREG_GetAttr_RxWindowSizeT2+0x3c>)
    c30c:	7821      	ldrb	r1, [r4, #0]
    c30e:	7860      	ldrb	r0, [r4, #1]
    c310:	0200      	lsls	r0, r0, #8
    c312:	4308      	orrs	r0, r1
    c314:	78a1      	ldrb	r1, [r4, #2]
    c316:	0409      	lsls	r1, r1, #16
    c318:	4308      	orrs	r0, r1
    c31a:	78e1      	ldrb	r1, [r4, #3]
    c31c:	0609      	lsls	r1, r1, #24
    c31e:	4301      	orrs	r1, r0
    c320:	00db      	lsls	r3, r3, #3
    c322:	5c58      	ldrb	r0, [r3, r1]
    c324:	185b      	adds	r3, r3, r1
    c326:	785b      	ldrb	r3, [r3, #1]
    c328:	021b      	lsls	r3, r3, #8
    c32a:	4303      	orrs	r3, r0
    c32c:	8013      	strh	r3, [r2, #0]
	return result;
    c32e:	2008      	movs	r0, #8
    c330:	e7ea      	b.n	c308 <LORAREG_GetAttr_RxWindowSizeT2+0x10>
    c332:	46c0      	nop			; (mov r8, r8)
    c334:	200024d0 	.word	0x200024d0

0000c338 <LORAREG_GetAttr_RxWindowOffsetT2>:
{
    c338:	b510      	push	{r4, lr}
	dataRate = *(uint8_t *)attrInput;
    c33a:	780b      	ldrb	r3, [r1, #0]
    if ( dataRate > RegParams.minDataRate )
    c33c:	2124      	movs	r1, #36	; 0x24
    c33e:	480c      	ldr	r0, [pc, #48]	; (c370 <LORAREG_GetAttr_RxWindowOffsetT2+0x38>)
    c340:	5c41      	ldrb	r1, [r0, r1]
		return LORAWAN_INVALID_PARAMETER;
    c342:	200a      	movs	r0, #10
    if ( dataRate > RegParams.minDataRate )
    c344:	4299      	cmp	r1, r3
    c346:	d200      	bcs.n	c34a <LORAREG_GetAttr_RxWindowOffsetT2+0x12>
}
    c348:	bd10      	pop	{r4, pc}
		*(int8_t *)attrOutput = RegParams.pDrParams[dataRate].rxWindowOffset;
    c34a:	4c09      	ldr	r4, [pc, #36]	; (c370 <LORAREG_GetAttr_RxWindowOffsetT2+0x38>)
    c34c:	7821      	ldrb	r1, [r4, #0]
    c34e:	7860      	ldrb	r0, [r4, #1]
    c350:	0200      	lsls	r0, r0, #8
    c352:	4308      	orrs	r0, r1
    c354:	78a1      	ldrb	r1, [r4, #2]
    c356:	0409      	lsls	r1, r1, #16
    c358:	4308      	orrs	r0, r1
    c35a:	78e1      	ldrb	r1, [r4, #3]
    c35c:	0609      	lsls	r1, r1, #24
    c35e:	4301      	orrs	r1, r0
    c360:	00db      	lsls	r3, r3, #3
    c362:	185b      	adds	r3, r3, r1
    c364:	791b      	ldrb	r3, [r3, #4]
    c366:	b25b      	sxtb	r3, r3
    c368:	7013      	strb	r3, [r2, #0]
	return result;
    c36a:	2008      	movs	r0, #8
    c36c:	e7ec      	b.n	c348 <LORAREG_GetAttr_RxWindowOffsetT2+0x10>
    c36e:	46c0      	nop			; (mov r8, r8)
    c370:	200024d0 	.word	0x200024d0

0000c374 <LORAREG_GetAttr_MaxPayloadT2>:
{
    c374:	b510      	push	{r4, lr}
	dataRate = *(uint8_t *)attrInput;
    c376:	780b      	ldrb	r3, [r1, #0]
    if ( dataRate > RegParams.minDataRate )
    c378:	2124      	movs	r1, #36	; 0x24
    c37a:	480b      	ldr	r0, [pc, #44]	; (c3a8 <LORAREG_GetAttr_MaxPayloadT2+0x34>)
    c37c:	5c41      	ldrb	r1, [r0, r1]
		result =  LORAWAN_INVALID_PARAMETER;
    c37e:	200a      	movs	r0, #10
    if ( dataRate > RegParams.minDataRate )
    c380:	4299      	cmp	r1, r3
    c382:	d200      	bcs.n	c386 <LORAREG_GetAttr_MaxPayloadT2+0x12>
}
    c384:	bd10      	pop	{r4, pc}
		*(uint8_t *)attrOutput = RegParams.pDrParams[dataRate].maxPayloadSizeDt0;
    c386:	4c08      	ldr	r4, [pc, #32]	; (c3a8 <LORAREG_GetAttr_MaxPayloadT2+0x34>)
    c388:	7821      	ldrb	r1, [r4, #0]
    c38a:	7860      	ldrb	r0, [r4, #1]
    c38c:	0200      	lsls	r0, r0, #8
    c38e:	4308      	orrs	r0, r1
    c390:	78a1      	ldrb	r1, [r4, #2]
    c392:	0409      	lsls	r1, r1, #16
    c394:	4308      	orrs	r0, r1
    c396:	78e1      	ldrb	r1, [r4, #3]
    c398:	0609      	lsls	r1, r1, #24
    c39a:	4301      	orrs	r1, r0
    c39c:	00db      	lsls	r3, r3, #3
    c39e:	185b      	adds	r3, r3, r1
    c3a0:	789b      	ldrb	r3, [r3, #2]
    c3a2:	7013      	strb	r3, [r2, #0]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    c3a4:	2008      	movs	r0, #8
	return result;
    c3a6:	e7ed      	b.n	c384 <LORAREG_GetAttr_MaxPayloadT2+0x10>
    c3a8:	200024d0 	.word	0x200024d0

0000c3ac <LORAREG_GetAttr_ModulationAttrT2>:
{
    c3ac:	b510      	push	{r4, lr}
	dataRate = *(uint8_t *)attrInput;
    c3ae:	780b      	ldrb	r3, [r1, #0]
    if ( dataRate > RegParams.minDataRate )
    c3b0:	2124      	movs	r1, #36	; 0x24
    c3b2:	480b      	ldr	r0, [pc, #44]	; (c3e0 <LORAREG_GetAttr_ModulationAttrT2+0x34>)
    c3b4:	5c41      	ldrb	r1, [r0, r1]
		result = LORAWAN_INVALID_PARAMETER;
    c3b6:	200a      	movs	r0, #10
    if ( dataRate > RegParams.minDataRate )
    c3b8:	4299      	cmp	r1, r3
    c3ba:	d200      	bcs.n	c3be <LORAREG_GetAttr_ModulationAttrT2+0x12>
}
    c3bc:	bd10      	pop	{r4, pc}
		*(uint8_t *)attrOutput = RegParams.pDrParams[dataRate].modulation;
    c3be:	4c08      	ldr	r4, [pc, #32]	; (c3e0 <LORAREG_GetAttr_ModulationAttrT2+0x34>)
    c3c0:	7821      	ldrb	r1, [r4, #0]
    c3c2:	7860      	ldrb	r0, [r4, #1]
    c3c4:	0200      	lsls	r0, r0, #8
    c3c6:	4308      	orrs	r0, r1
    c3c8:	78a1      	ldrb	r1, [r4, #2]
    c3ca:	0409      	lsls	r1, r1, #16
    c3cc:	4308      	orrs	r0, r1
    c3ce:	78e1      	ldrb	r1, [r4, #3]
    c3d0:	0609      	lsls	r1, r1, #24
    c3d2:	4301      	orrs	r1, r0
    c3d4:	00db      	lsls	r3, r3, #3
    c3d6:	185b      	adds	r3, r3, r1
    c3d8:	79db      	ldrb	r3, [r3, #7]
    c3da:	7013      	strb	r3, [r2, #0]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    c3dc:	2008      	movs	r0, #8
	return result;
    c3de:	e7ed      	b.n	c3bc <LORAREG_GetAttr_ModulationAttrT2+0x10>
    c3e0:	200024d0 	.word	0x200024d0

0000c3e4 <LORAREG_GetAttr_BandwidthAttrT2>:
{
    c3e4:	b510      	push	{r4, lr}
	dataRate = *(uint8_t *)attrInput;
    c3e6:	780b      	ldrb	r3, [r1, #0]
    if ( dataRate > RegParams.minDataRate )
    c3e8:	2124      	movs	r1, #36	; 0x24
    c3ea:	480b      	ldr	r0, [pc, #44]	; (c418 <LORAREG_GetAttr_BandwidthAttrT2+0x34>)
    c3ec:	5c41      	ldrb	r1, [r0, r1]
		result = LORAWAN_INVALID_PARAMETER;
    c3ee:	200a      	movs	r0, #10
    if ( dataRate > RegParams.minDataRate )
    c3f0:	4299      	cmp	r1, r3
    c3f2:	d200      	bcs.n	c3f6 <LORAREG_GetAttr_BandwidthAttrT2+0x12>
}
    c3f4:	bd10      	pop	{r4, pc}
		*(uint8_t *)attrOutput = RegParams.pDrParams[dataRate].bandwidth;
    c3f6:	4c08      	ldr	r4, [pc, #32]	; (c418 <LORAREG_GetAttr_BandwidthAttrT2+0x34>)
    c3f8:	7821      	ldrb	r1, [r4, #0]
    c3fa:	7860      	ldrb	r0, [r4, #1]
    c3fc:	0200      	lsls	r0, r0, #8
    c3fe:	4308      	orrs	r0, r1
    c400:	78a1      	ldrb	r1, [r4, #2]
    c402:	0409      	lsls	r1, r1, #16
    c404:	4308      	orrs	r0, r1
    c406:	78e1      	ldrb	r1, [r4, #3]
    c408:	0609      	lsls	r1, r1, #24
    c40a:	4301      	orrs	r1, r0
    c40c:	00db      	lsls	r3, r3, #3
    c40e:	185b      	adds	r3, r3, r1
    c410:	799b      	ldrb	r3, [r3, #6]
    c412:	7013      	strb	r3, [r2, #0]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    c414:	2008      	movs	r0, #8
	return result;
    c416:	e7ed      	b.n	c3f4 <LORAREG_GetAttr_BandwidthAttrT2+0x10>
    c418:	200024d0 	.word	0x200024d0

0000c41c <LORAREG_GetAttr_SpreadFactorT2>:
{
    c41c:	b510      	push	{r4, lr}
	dataRate = *(uint8_t *)attrInput;
    c41e:	780b      	ldrb	r3, [r1, #0]
    if ( dataRate > RegParams.minDataRate )
    c420:	2124      	movs	r1, #36	; 0x24
    c422:	480b      	ldr	r0, [pc, #44]	; (c450 <LORAREG_GetAttr_SpreadFactorT2+0x34>)
    c424:	5c41      	ldrb	r1, [r0, r1]
		result =  LORAWAN_INVALID_PARAMETER;
    c426:	200a      	movs	r0, #10
    if ( dataRate > RegParams.minDataRate )
    c428:	4299      	cmp	r1, r3
    c42a:	d200      	bcs.n	c42e <LORAREG_GetAttr_SpreadFactorT2+0x12>
}
    c42c:	bd10      	pop	{r4, pc}
		*(RadioDataRate_t *)attrOutput = RegParams.pDrParams[dataRate].spreadingFactor;
    c42e:	4c08      	ldr	r4, [pc, #32]	; (c450 <LORAREG_GetAttr_SpreadFactorT2+0x34>)
    c430:	7821      	ldrb	r1, [r4, #0]
    c432:	7860      	ldrb	r0, [r4, #1]
    c434:	0200      	lsls	r0, r0, #8
    c436:	4308      	orrs	r0, r1
    c438:	78a1      	ldrb	r1, [r4, #2]
    c43a:	0409      	lsls	r1, r1, #16
    c43c:	4308      	orrs	r0, r1
    c43e:	78e1      	ldrb	r1, [r4, #3]
    c440:	0609      	lsls	r1, r1, #24
    c442:	4301      	orrs	r1, r0
    c444:	00db      	lsls	r3, r3, #3
    c446:	185b      	adds	r3, r3, r1
    c448:	795b      	ldrb	r3, [r3, #5]
    c44a:	7013      	strb	r3, [r2, #0]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    c44c:	2008      	movs	r0, #8
	return result;
    c44e:	e7ed      	b.n	c42c <LORAREG_GetAttr_SpreadFactorT2+0x10>
    c450:	200024d0 	.word	0x200024d0

0000c454 <ValidateChMaskChCntl>:
{
    c454:	b510      	push	{r4, lr}
    c456:	b082      	sub	sp, #8
	ValChMaskCntl_t chMaskchCntl = * (ValChMaskCntl_t *)attrInput;
    c458:	ac01      	add	r4, sp, #4
    c45a:	2204      	movs	r2, #4
    c45c:	0020      	movs	r0, r4
    c45e:	4b09      	ldr	r3, [pc, #36]	; (c484 <ValidateChMaskChCntl+0x30>)
    c460:	4798      	blx	r3
    if(chMaskchCntl.chnlMask == 0 && chMaskchCntl.chnlMaskCntl == 7)
    c462:	8863      	ldrh	r3, [r4, #2]
    c464:	2b00      	cmp	r3, #0
    c466:	d104      	bne.n	c472 <ValidateChMaskChCntl+0x1e>
    c468:	ab01      	add	r3, sp, #4
    c46a:	781b      	ldrb	r3, [r3, #0]
        result = LORAWAN_INVALID_PARAMETER;
    c46c:	200a      	movs	r0, #10
    if(chMaskchCntl.chnlMask == 0 && chMaskchCntl.chnlMaskCntl == 7)
    c46e:	2b07      	cmp	r3, #7
    c470:	d006      	beq.n	c480 <ValidateChMaskChCntl+0x2c>
		result = ((ValidateChannelMask(CHANNEL_MASK, (void *)&chMaskchCntl.chnlMask)) | (ValidateChannelMaskCntl(CHANNEL_MASK_CNTL,  (void *)&chMaskchCntl.chnlMaskCntl)));
    c472:	a901      	add	r1, sp, #4
    c474:	201b      	movs	r0, #27
    c476:	4b04      	ldr	r3, [pc, #16]	; (c488 <ValidateChMaskChCntl+0x34>)
    c478:	4798      	blx	r3
    c47a:	2308      	movs	r3, #8
    c47c:	4318      	orrs	r0, r3
    c47e:	b2c0      	uxtb	r0, r0
}
    c480:	b002      	add	sp, #8
    c482:	bd10      	pop	{r4, pc}
    c484:	00019da5 	.word	0x00019da5
    c488:	00009b5d 	.word	0x00009b5d

0000c48c <LORAREG_GetAttr_NewTxChConfigT2>:
{
    c48c:	b5f0      	push	{r4, r5, r6, r7, lr}
    c48e:	b083      	sub	sp, #12
    c490:	0015      	movs	r5, r2
	memcpy(&newTxChannelReq,(NewTxChannelReq_t *)attrInput,sizeof(NewTxChannelReq_t));
    c492:	788c      	ldrb	r4, [r1, #2]
    if ( dataRate > RegParams.minDataRate )
    c494:	2324      	movs	r3, #36	; 0x24
    c496:	4a2e      	ldr	r2, [pc, #184]	; (c550 <LORAREG_GetAttr_NewTxChConfigT2+0xc4>)
    c498:	5cd3      	ldrb	r3, [r2, r3]
		result = LORAWAN_INVALID_PARAMETER;
    c49a:	200a      	movs	r0, #10
    if ( dataRate > RegParams.minDataRate )
    c49c:	42a3      	cmp	r3, r4
    c49e:	d205      	bcs.n	c4ac <LORAREG_GetAttr_NewTxChConfigT2+0x20>
}
    c4a0:	b003      	add	sp, #12
    c4a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(((((1 << RegParams.band) & (ISM_ASBAND)) || ((1 << RegParams.band) & (1 << ISM_JPN923))) != 0) && (transmissionType == 0))
    c4a4:	2900      	cmp	r1, #0
    c4a6:	d10f      	bne.n	c4c8 <LORAREG_GetAttr_NewTxChConfigT2+0x3c>
		currDr = DR2;
    c4a8:	2402      	movs	r4, #2
    c4aa:	e00d      	b.n	c4c8 <LORAREG_GetAttr_NewTxChConfigT2+0x3c>
	memcpy(&newTxChannelReq,(NewTxChannelReq_t *)attrInput,sizeof(NewTxChannelReq_t));
    c4ac:	784e      	ldrb	r6, [r1, #1]
	if (txPowerNew > RegParams.maxTxPwrIndx)
    c4ae:	232d      	movs	r3, #45	; 0x2d
    c4b0:	4a27      	ldr	r2, [pc, #156]	; (c550 <LORAREG_GetAttr_NewTxChConfigT2+0xc4>)
    c4b2:	56d3      	ldrsb	r3, [r2, r3]
		result = LORAWAN_INVALID_PARAMETER;
    c4b4:	200a      	movs	r0, #10
	if (txPowerNew > RegParams.maxTxPwrIndx)
    c4b6:	429e      	cmp	r6, r3
    c4b8:	dcf2      	bgt.n	c4a0 <LORAREG_GetAttr_NewTxChConfigT2+0x14>
		result = GetTxChannelConfig2(newTxChannelReq.transmissionType,newTxChannelReq.txPwr,newTxChannelReq.currDr,(radioConfig_t*)attrOutput);
    c4ba:	7809      	ldrb	r1, [r1, #0]
	if(((((1 << RegParams.band) & (ISM_ASBAND)) || ((1 << RegParams.band) & (1 << ISM_JPN923))) != 0) && (transmissionType == 0))
    c4bc:	232e      	movs	r3, #46	; 0x2e
    c4be:	5cd2      	ldrb	r2, [r2, r3]
    c4c0:	4b24      	ldr	r3, [pc, #144]	; (c554 <LORAREG_GetAttr_NewTxChConfigT2+0xc8>)
    c4c2:	4113      	asrs	r3, r2
    c4c4:	07db      	lsls	r3, r3, #31
    c4c6:	d4ed      	bmi.n	c4a4 <LORAREG_GetAttr_NewTxChConfigT2+0x18>
	result = SearchAvailableChannel2 (RegParams.maxChannels, transmissionType,currDr, &channelIndex);
    c4c8:	232a      	movs	r3, #42	; 0x2a
    c4ca:	4a21      	ldr	r2, [pc, #132]	; (c550 <LORAREG_GetAttr_NewTxChConfigT2+0xc4>)
    c4cc:	5cd0      	ldrb	r0, [r2, r3]
    c4ce:	466b      	mov	r3, sp
    c4d0:	3307      	adds	r3, #7
    c4d2:	0022      	movs	r2, r4
    c4d4:	4f20      	ldr	r7, [pc, #128]	; (c558 <LORAREG_GetAttr_NewTxChConfigT2+0xcc>)
    c4d6:	47b8      	blx	r7
	if (result == LORAWAN_SUCCESS)
    c4d8:	2808      	cmp	r0, #8
    c4da:	d1e1      	bne.n	c4a0 <LORAREG_GetAttr_NewTxChConfigT2+0x14>
		RegParams.lastUsedChannelIndex = channelIndex;
    c4dc:	466b      	mov	r3, sp
    c4de:	79df      	ldrb	r7, [r3, #7]
    c4e0:	4b1b      	ldr	r3, [pc, #108]	; (c550 <LORAREG_GetAttr_NewTxChConfigT2+0xc4>)
    c4e2:	222f      	movs	r2, #47	; 0x2f
    c4e4:	549f      	strb	r7, [r3, r2]
		radioConfig->frequency = RegParams.pOtherChParams[channelIndex].ulfrequency;
    c4e6:	7a19      	ldrb	r1, [r3, #8]
    c4e8:	7a5a      	ldrb	r2, [r3, #9]
    c4ea:	0212      	lsls	r2, r2, #8
    c4ec:	430a      	orrs	r2, r1
    c4ee:	7a99      	ldrb	r1, [r3, #10]
    c4f0:	0409      	lsls	r1, r1, #16
    c4f2:	430a      	orrs	r2, r1
    c4f4:	7ad9      	ldrb	r1, [r3, #11]
    c4f6:	0609      	lsls	r1, r1, #24
    c4f8:	4311      	orrs	r1, r2
    c4fa:	007a      	lsls	r2, r7, #1
    c4fc:	19d2      	adds	r2, r2, r7
    c4fe:	0092      	lsls	r2, r2, #2
    c500:	5c57      	ldrb	r7, [r2, r1]
    c502:	1852      	adds	r2, r2, r1
    c504:	7851      	ldrb	r1, [r2, #1]
    c506:	0209      	lsls	r1, r1, #8
    c508:	430f      	orrs	r7, r1
    c50a:	7891      	ldrb	r1, [r2, #2]
    c50c:	0409      	lsls	r1, r1, #16
    c50e:	4339      	orrs	r1, r7
    c510:	78d2      	ldrb	r2, [r2, #3]
    c512:	0612      	lsls	r2, r2, #24
    c514:	430a      	orrs	r2, r1
    c516:	602a      	str	r2, [r5, #0]
		radioConfig->txPower = RegParams.maxTxPwr - 2 *txPwrIndx;
    c518:	0076      	lsls	r6, r6, #1
    c51a:	2228      	movs	r2, #40	; 0x28
    c51c:	5c9a      	ldrb	r2, [r3, r2]
    c51e:	1b96      	subs	r6, r2, r6
    c520:	722e      	strb	r6, [r5, #8]
		radioConfig->freq_hop_period = DISABLED ;
    c522:	2200      	movs	r2, #0
    c524:	80aa      	strh	r2, [r5, #4]
		radioConfig->modulation = RegParams.pDrParams[currDr].modulation;
    c526:	7819      	ldrb	r1, [r3, #0]
    c528:	785a      	ldrb	r2, [r3, #1]
    c52a:	0212      	lsls	r2, r2, #8
    c52c:	4311      	orrs	r1, r2
    c52e:	789a      	ldrb	r2, [r3, #2]
    c530:	0412      	lsls	r2, r2, #16
    c532:	430a      	orrs	r2, r1
    c534:	78db      	ldrb	r3, [r3, #3]
    c536:	061b      	lsls	r3, r3, #24
    c538:	4313      	orrs	r3, r2
    c53a:	00e4      	lsls	r4, r4, #3
    c53c:	191c      	adds	r4, r3, r4
    c53e:	79e3      	ldrb	r3, [r4, #7]
    c540:	726b      	strb	r3, [r5, #9]
		radioConfig->bandwidth = RegParams.pDrParams[currDr].bandwidth;
    c542:	79a3      	ldrb	r3, [r4, #6]
    c544:	72ab      	strb	r3, [r5, #10]
		radioConfig->sf = RegParams.pDrParams[currDr].spreadingFactor;
    c546:	7963      	ldrb	r3, [r4, #5]
    c548:	72eb      	strb	r3, [r5, #11]
		radioConfig->ecrConfig.override = false;
    c54a:	2300      	movs	r3, #0
    c54c:	71eb      	strb	r3, [r5, #7]
    c54e:	e7a7      	b.n	c4a0 <LORAREG_GetAttr_NewTxChConfigT2+0x14>
    c550:	200024d0 	.word	0x200024d0
    c554:	00007fe0 	.word	0x00007fe0
    c558:	0000b241 	.word	0x0000b241

0000c55c <setChannelIdStatus>:
{
    c55c:	b510      	push	{r4, lr}
    uint8_t channelId = *(uint8_t *)attrInput;
    c55e:	7808      	ldrb	r0, [r1, #0]
    if (channelId >= RegParams.maxChannels)
    c560:	232a      	movs	r3, #42	; 0x2a
    c562:	4a05      	ldr	r2, [pc, #20]	; (c578 <setChannelIdStatus+0x1c>)
    c564:	56d3      	ldrsb	r3, [r2, r3]
    c566:	4298      	cmp	r0, r3
    c568:	db01      	blt.n	c56e <setChannelIdStatus+0x12>
		retVal = LORAWAN_INVALID_PARAMETER;
    c56a:	200a      	movs	r0, #10
}
    c56c:	bd10      	pop	{r4, pc}
		UpdateChannelIdStatus(updateChid.channelIndex,updateChid.statusNew);
    c56e:	7849      	ldrb	r1, [r1, #1]
    c570:	4b02      	ldr	r3, [pc, #8]	; (c57c <setChannelIdStatus+0x20>)
    c572:	4798      	blx	r3
	StackRetStatus_t retVal = LORAWAN_SUCCESS;
    c574:	2008      	movs	r0, #8
	return retVal;
    c576:	e7f9      	b.n	c56c <setChannelIdStatus+0x10>
    c578:	200024d0 	.word	0x200024d0
    c57c:	0000a209 	.word	0x0000a209

0000c580 <ValidateDataRange>:
{
    c580:	b530      	push	{r4, r5, lr}
	uint8_t maxTxDR = RegParams.cmnParams.paramsType1.maxTxDR;
    c582:	23a8      	movs	r3, #168	; 0xa8
    c584:	005b      	lsls	r3, r3, #1
    c586:	4a17      	ldr	r2, [pc, #92]	; (c5e4 <ValidateDataRange+0x64>)
    c588:	5cd3      	ldrb	r3, [r2, r3]
	memcpy(&val_drange,attrInput,sizeof(ValUpdateDrange_t));
    c58a:	784a      	ldrb	r2, [r1, #1]
	dataRateMax = (val_drange.dataRangeNew & FIRST_NIBBLE) >> SHIFT4;
    c58c:	0914      	lsrs	r4, r2, #4
	    retVal = LORAWAN_INVALID_PARAMETER;	   
    c58e:	200a      	movs	r0, #10
	if (dataRate > RegParams.cmnParams.paramsType1.maxTxDR)
    c590:	42a3      	cmp	r3, r4
    c592:	d213      	bcs.n	c5bc <ValidateDataRange+0x3c>
}
    c594:	bd30      	pop	{r4, r5, pc}
	   ((chId >= RegParams.cmnParams.paramsType1.Max_125khzChan) && (chId < RegParams.maxChannels) && (dataRateMin != maxTxDR)) ||
    c596:	202a      	movs	r0, #42	; 0x2a
    c598:	4d12      	ldr	r5, [pc, #72]	; (c5e4 <ValidateDataRange+0x64>)
    c59a:	562d      	ldrsb	r5, [r5, r0]
	StackRetStatus_t retVal = LORAWAN_SUCCESS;
    c59c:	3822      	subs	r0, #34	; 0x22
	   ((chId >= RegParams.cmnParams.paramsType1.Max_125khzChan) && (chId < RegParams.maxChannels) && (dataRateMin != maxTxDR)) ||
    c59e:	42a9      	cmp	r1, r5
    c5a0:	daf8      	bge.n	c594 <ValidateDataRange+0x14>
	    retVal = LORAWAN_INVALID_PARAMETER;	   
    c5a2:	3002      	adds	r0, #2
	   ((chId >= RegParams.cmnParams.paramsType1.Max_125khzChan) && (chId < RegParams.maxChannels) && (dataRateMin != maxTxDR)) ||
    c5a4:	4293      	cmp	r3, r2
    c5a6:	d1f5      	bne.n	c594 <ValidateDataRange+0x14>
	   ((chId >= RegParams.cmnParams.paramsType1.Max_125khzChan) && (chId < RegParams.maxChannels) && (dataRateMax != maxTxDR)))
    c5a8:	42a3      	cmp	r3, r4
    c5aa:	d005      	beq.n	c5b8 <ValidateDataRange+0x38>
	    retVal = LORAWAN_INVALID_PARAMETER;	   
    c5ac:	200a      	movs	r0, #10
	return retVal;
    c5ae:	e7f1      	b.n	c594 <ValidateDataRange+0x14>
	    retVal = LORAWAN_INVALID_PARAMETER;	   
    c5b0:	200a      	movs	r0, #10
    c5b2:	e7ef      	b.n	c594 <ValidateDataRange+0x14>
    c5b4:	200a      	movs	r0, #10
    c5b6:	e7ed      	b.n	c594 <ValidateDataRange+0x14>
	StackRetStatus_t retVal = LORAWAN_SUCCESS;
    c5b8:	2008      	movs	r0, #8
    c5ba:	e7eb      	b.n	c594 <ValidateDataRange+0x14>
	dataRateMin = val_drange.dataRangeNew & LAST_NIBBLE;
    c5bc:	200f      	movs	r0, #15
    c5be:	4002      	ands	r2, r0
	    retVal = LORAWAN_INVALID_PARAMETER;	   
    c5c0:	3805      	subs	r0, #5
	if (dataRate > RegParams.cmnParams.paramsType1.maxTxDR)
    c5c2:	4293      	cmp	r3, r2
    c5c4:	d3e6      	bcc.n	c594 <ValidateDataRange+0x14>
	if((ValidateDataRateTxT1(TX_DATARATE, (void *)&dataRateMax) != LORAWAN_SUCCESS ) || (ValidateDataRateTxT1(TX_DATARATE, (void *)&dataRateMin) != LORAWAN_SUCCESS ) || dataRateMax < dataRateMin || 
    c5c6:	42a2      	cmp	r2, r4
    c5c8:	d8e4      	bhi.n	c594 <ValidateDataRange+0x14>
	memcpy(&val_drange,attrInput,sizeof(ValUpdateDrange_t));
    c5ca:	7809      	ldrb	r1, [r1, #0]
	   ((chId < RegParams.cmnParams.paramsType1.Max_125khzChan) && ((dataRateMin == maxTxDR) || (dataRateMax == maxTxDR))) || 
    c5cc:	2054      	movs	r0, #84	; 0x54
    c5ce:	30ff      	adds	r0, #255	; 0xff
	if((ValidateDataRateTxT1(TX_DATARATE, (void *)&dataRateMax) != LORAWAN_SUCCESS ) || (ValidateDataRateTxT1(TX_DATARATE, (void *)&dataRateMin) != LORAWAN_SUCCESS ) || dataRateMax < dataRateMin || 
    c5d0:	4d04      	ldr	r5, [pc, #16]	; (c5e4 <ValidateDataRange+0x64>)
    c5d2:	5c28      	ldrb	r0, [r5, r0]
    c5d4:	4288      	cmp	r0, r1
    c5d6:	d9de      	bls.n	c596 <ValidateDataRange+0x16>
	   ((chId < RegParams.cmnParams.paramsType1.Max_125khzChan) && ((dataRateMin == maxTxDR) || (dataRateMax == maxTxDR))) || 
    c5d8:	4293      	cmp	r3, r2
    c5da:	d0e9      	beq.n	c5b0 <ValidateDataRange+0x30>
    c5dc:	42a3      	cmp	r3, r4
    c5de:	d0e9      	beq.n	c5b4 <ValidateDataRange+0x34>
	StackRetStatus_t retVal = LORAWAN_SUCCESS;
    c5e0:	2008      	movs	r0, #8
    c5e2:	e7d7      	b.n	c594 <ValidateDataRange+0x14>
    c5e4:	200024d0 	.word	0x200024d0

0000c5e8 <setDataRange>:
{
    c5e8:	b570      	push	{r4, r5, r6, lr}
    c5ea:	000d      	movs	r5, r1
	if((ValidateDataRange(DATA_RANGE, attrInput) != LORAWAN_SUCCESS) || (ValidateChannelId(CHANNEL_ID, &update_dr.channelIndex) != LORAWAN_SUCCESS))
    c5ec:	2012      	movs	r0, #18
    c5ee:	4b15      	ldr	r3, [pc, #84]	; (c644 <setDataRange+0x5c>)
    c5f0:	4798      	blx	r3
    c5f2:	0004      	movs	r4, r0
    c5f4:	2808      	cmp	r0, #8
    c5f6:	d002      	beq.n	c5fe <setDataRange+0x16>
		retVal = LORAWAN_INVALID_PARAMETER;
    c5f8:	240a      	movs	r4, #10
}
    c5fa:	0020      	movs	r0, r4
    c5fc:	bd70      	pop	{r4, r5, r6, pc}
	memcpy((void *)&update_dr,attrInput,sizeof(ValUpdateDrange_t));
    c5fe:	782b      	ldrb	r3, [r5, #0]
    if (channelId >= RegParams.maxChannels)
    c600:	222a      	movs	r2, #42	; 0x2a
    c602:	4911      	ldr	r1, [pc, #68]	; (c648 <setDataRange+0x60>)
    c604:	568a      	ldrsb	r2, [r1, r2]
    c606:	4293      	cmp	r3, r2
    c608:	db01      	blt.n	c60e <setDataRange+0x26>
		retVal = LORAWAN_INVALID_PARAMETER;
    c60a:	3402      	adds	r4, #2
    c60c:	e7f5      	b.n	c5fa <setDataRange+0x12>
	memcpy((void *)&update_dr,attrInput,sizeof(ValUpdateDrange_t));
    c60e:	786d      	ldrb	r5, [r5, #1]
		RegParams.pChParams[update_dr.channelIndex].dataRange.value = update_dr.dataRangeNew;
    c610:	4a0d      	ldr	r2, [pc, #52]	; (c648 <setDataRange+0x60>)
    c612:	7911      	ldrb	r1, [r2, #4]
    c614:	7950      	ldrb	r0, [r2, #5]
    c616:	0200      	lsls	r0, r0, #8
    c618:	4308      	orrs	r0, r1
    c61a:	7991      	ldrb	r1, [r2, #6]
    c61c:	0409      	lsls	r1, r1, #16
    c61e:	4308      	orrs	r0, r1
    c620:	79d1      	ldrb	r1, [r2, #7]
    c622:	0609      	lsls	r1, r1, #24
    c624:	4301      	orrs	r1, r0
    c626:	005b      	lsls	r3, r3, #1
    c628:	185b      	adds	r3, r3, r1
    c62a:	705d      	strb	r5, [r3, #1]
		PDS_STORE(RegParams.regParamItems.ch_param_1_item_id);
    c62c:	4b07      	ldr	r3, [pc, #28]	; (c64c <setDataRange+0x64>)
    c62e:	5cd3      	ldrb	r3, [r2, r3]
    c630:	4907      	ldr	r1, [pc, #28]	; (c650 <setDataRange+0x68>)
    c632:	5c50      	ldrb	r0, [r2, r1]
    c634:	0200      	lsls	r0, r0, #8
    c636:	4318      	orrs	r0, r3
    c638:	b2c1      	uxtb	r1, r0
    c63a:	0a00      	lsrs	r0, r0, #8
    c63c:	4b05      	ldr	r3, [pc, #20]	; (c654 <setDataRange+0x6c>)
    c63e:	4798      	blx	r3
	return retVal;
    c640:	e7db      	b.n	c5fa <setDataRange+0x12>
    c642:	46c0      	nop			; (mov r8, r8)
    c644:	0000c581 	.word	0x0000c581
    c648:	200024d0 	.word	0x200024d0
    c64c:	0000020e 	.word	0x0000020e
    c650:	0000020f 	.word	0x0000020f
    c654:	0000e0f9 	.word	0x0000e0f9

0000c658 <LORAREG_GetAttr_RxWindowSizeT1>:
{
    c658:	b570      	push	{r4, r5, r6, lr}
    c65a:	0015      	movs	r5, r2
	dataRate = *(uint8_t *)attrInput;
    c65c:	780c      	ldrb	r4, [r1, #0]
	if (dataRate > RegParams.cmnParams.paramsType1.maxTxDR)
    c65e:	23a8      	movs	r3, #168	; 0xa8
    c660:	005b      	lsls	r3, r3, #1
    c662:	4a0f      	ldr	r2, [pc, #60]	; (c6a0 <LORAREG_GetAttr_RxWindowSizeT1+0x48>)
    c664:	5cd3      	ldrb	r3, [r2, r3]
    c666:	42a3      	cmp	r3, r4
    c668:	d205      	bcs.n	c676 <LORAREG_GetAttr_RxWindowSizeT1+0x1e>
	if((ValidateDataRateTxT1(TX_DATARATE, attrInput) != LORAWAN_SUCCESS) && (ValidateDataRateRxT1(RX_DATARATE, attrInput) != LORAWAN_SUCCESS))
    c66a:	200f      	movs	r0, #15
    c66c:	4b0d      	ldr	r3, [pc, #52]	; (c6a4 <LORAREG_GetAttr_RxWindowSizeT1+0x4c>)
    c66e:	4798      	blx	r3
		return LORAWAN_INVALID_PARAMETER;
    c670:	230a      	movs	r3, #10
	if((ValidateDataRateTxT1(TX_DATARATE, attrInput) != LORAWAN_SUCCESS) && (ValidateDataRateRxT1(RX_DATARATE, attrInput) != LORAWAN_SUCCESS))
    c672:	2808      	cmp	r0, #8
    c674:	d112      	bne.n	c69c <LORAREG_GetAttr_RxWindowSizeT1+0x44>
	    *(uint16_t *)attrOutput = RegParams.pDrParams[dataRate].rxWindowSize;	
    c676:	490a      	ldr	r1, [pc, #40]	; (c6a0 <LORAREG_GetAttr_RxWindowSizeT1+0x48>)
    c678:	780b      	ldrb	r3, [r1, #0]
    c67a:	784a      	ldrb	r2, [r1, #1]
    c67c:	0212      	lsls	r2, r2, #8
    c67e:	431a      	orrs	r2, r3
    c680:	788b      	ldrb	r3, [r1, #2]
    c682:	041b      	lsls	r3, r3, #16
    c684:	431a      	orrs	r2, r3
    c686:	78cb      	ldrb	r3, [r1, #3]
    c688:	061b      	lsls	r3, r3, #24
    c68a:	4313      	orrs	r3, r2
    c68c:	00e4      	lsls	r4, r4, #3
    c68e:	5ce2      	ldrb	r2, [r4, r3]
    c690:	18e4      	adds	r4, r4, r3
    c692:	7863      	ldrb	r3, [r4, #1]
    c694:	021b      	lsls	r3, r3, #8
    c696:	4313      	orrs	r3, r2
    c698:	802b      	strh	r3, [r5, #0]
	return result;
    c69a:	2308      	movs	r3, #8
}
    c69c:	0018      	movs	r0, r3
    c69e:	bd70      	pop	{r4, r5, r6, pc}
    c6a0:	200024d0 	.word	0x200024d0
    c6a4:	000099ed 	.word	0x000099ed

0000c6a8 <LORAREG_GetAttr_RxWindowOffsetT1>:
{
    c6a8:	b570      	push	{r4, r5, r6, lr}
    c6aa:	0015      	movs	r5, r2
	dataRate = *(uint8_t *)attrInput;
    c6ac:	780c      	ldrb	r4, [r1, #0]
	if (dataRate > RegParams.cmnParams.paramsType1.maxTxDR)
    c6ae:	23a8      	movs	r3, #168	; 0xa8
    c6b0:	005b      	lsls	r3, r3, #1
    c6b2:	4a0e      	ldr	r2, [pc, #56]	; (c6ec <LORAREG_GetAttr_RxWindowOffsetT1+0x44>)
    c6b4:	5cd3      	ldrb	r3, [r2, r3]
    c6b6:	42a3      	cmp	r3, r4
    c6b8:	d205      	bcs.n	c6c6 <LORAREG_GetAttr_RxWindowOffsetT1+0x1e>
	if((ValidateDataRateTxT1(TX_DATARATE, attrInput) != LORAWAN_SUCCESS) && (ValidateDataRateRxT1(RX_DATARATE, attrInput) != LORAWAN_SUCCESS))
    c6ba:	200f      	movs	r0, #15
    c6bc:	4b0c      	ldr	r3, [pc, #48]	; (c6f0 <LORAREG_GetAttr_RxWindowOffsetT1+0x48>)
    c6be:	4798      	blx	r3
		return LORAWAN_INVALID_PARAMETER;
    c6c0:	230a      	movs	r3, #10
	if((ValidateDataRateTxT1(TX_DATARATE, attrInput) != LORAWAN_SUCCESS) && (ValidateDataRateRxT1(RX_DATARATE, attrInput) != LORAWAN_SUCCESS))
    c6c2:	2808      	cmp	r0, #8
    c6c4:	d110      	bne.n	c6e8 <LORAREG_GetAttr_RxWindowOffsetT1+0x40>
		*(int8_t *)attrOutput = RegParams.pDrParams[dataRate].rxWindowOffset;
    c6c6:	4909      	ldr	r1, [pc, #36]	; (c6ec <LORAREG_GetAttr_RxWindowOffsetT1+0x44>)
    c6c8:	780b      	ldrb	r3, [r1, #0]
    c6ca:	784a      	ldrb	r2, [r1, #1]
    c6cc:	0212      	lsls	r2, r2, #8
    c6ce:	431a      	orrs	r2, r3
    c6d0:	788b      	ldrb	r3, [r1, #2]
    c6d2:	041b      	lsls	r3, r3, #16
    c6d4:	431a      	orrs	r2, r3
    c6d6:	78cb      	ldrb	r3, [r1, #3]
    c6d8:	061b      	lsls	r3, r3, #24
    c6da:	4313      	orrs	r3, r2
    c6dc:	00e4      	lsls	r4, r4, #3
    c6de:	18e3      	adds	r3, r4, r3
    c6e0:	791b      	ldrb	r3, [r3, #4]
    c6e2:	b25b      	sxtb	r3, r3
    c6e4:	702b      	strb	r3, [r5, #0]
	return result;
    c6e6:	2308      	movs	r3, #8
}
    c6e8:	0018      	movs	r0, r3
    c6ea:	bd70      	pop	{r4, r5, r6, pc}
    c6ec:	200024d0 	.word	0x200024d0
    c6f0:	000099ed 	.word	0x000099ed

0000c6f4 <LORAREG_GetAttr_MaxPayloadT1>:
{
    c6f4:	b570      	push	{r4, r5, r6, lr}
    c6f6:	0015      	movs	r5, r2
	dataRate = *(uint8_t *)attrInput;
    c6f8:	780c      	ldrb	r4, [r1, #0]
	if (dataRate > RegParams.cmnParams.paramsType1.maxTxDR)
    c6fa:	23a8      	movs	r3, #168	; 0xa8
    c6fc:	005b      	lsls	r3, r3, #1
    c6fe:	4a0e      	ldr	r2, [pc, #56]	; (c738 <LORAREG_GetAttr_MaxPayloadT1+0x44>)
    c700:	5cd3      	ldrb	r3, [r2, r3]
    c702:	42a3      	cmp	r3, r4
    c704:	d205      	bcs.n	c712 <LORAREG_GetAttr_MaxPayloadT1+0x1e>
	if((ValidateDataRateTxT1(TX_DATARATE, attrInput) != LORAWAN_SUCCESS) && (ValidateDataRateRxT1(RX_DATARATE, attrInput) != LORAWAN_SUCCESS))
    c706:	200f      	movs	r0, #15
    c708:	4b0c      	ldr	r3, [pc, #48]	; (c73c <LORAREG_GetAttr_MaxPayloadT1+0x48>)
    c70a:	4798      	blx	r3
		result =  LORAWAN_INVALID_PARAMETER;
    c70c:	230a      	movs	r3, #10
	if((ValidateDataRateTxT1(TX_DATARATE, attrInput) != LORAWAN_SUCCESS) && (ValidateDataRateRxT1(RX_DATARATE, attrInput) != LORAWAN_SUCCESS))
    c70e:	2808      	cmp	r0, #8
    c710:	d10f      	bne.n	c732 <LORAREG_GetAttr_MaxPayloadT1+0x3e>
		*(uint8_t *)attrOutput = RegParams.pDrParams[dataRate].maxPayloadSizeDt0;
    c712:	4909      	ldr	r1, [pc, #36]	; (c738 <LORAREG_GetAttr_MaxPayloadT1+0x44>)
    c714:	780b      	ldrb	r3, [r1, #0]
    c716:	784a      	ldrb	r2, [r1, #1]
    c718:	0212      	lsls	r2, r2, #8
    c71a:	431a      	orrs	r2, r3
    c71c:	788b      	ldrb	r3, [r1, #2]
    c71e:	041b      	lsls	r3, r3, #16
    c720:	431a      	orrs	r2, r3
    c722:	78cb      	ldrb	r3, [r1, #3]
    c724:	061b      	lsls	r3, r3, #24
    c726:	4313      	orrs	r3, r2
    c728:	00e4      	lsls	r4, r4, #3
    c72a:	18e3      	adds	r3, r4, r3
    c72c:	789b      	ldrb	r3, [r3, #2]
    c72e:	702b      	strb	r3, [r5, #0]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    c730:	2308      	movs	r3, #8
}
    c732:	0018      	movs	r0, r3
    c734:	bd70      	pop	{r4, r5, r6, pc}
    c736:	46c0      	nop			; (mov r8, r8)
    c738:	200024d0 	.word	0x200024d0
    c73c:	000099ed 	.word	0x000099ed

0000c740 <LORAREG_GetAttr_ModulationAttrT1>:
{
    c740:	b570      	push	{r4, r5, r6, lr}
    c742:	0015      	movs	r5, r2
	dataRate = *(uint8_t *)attrInput;
    c744:	780c      	ldrb	r4, [r1, #0]
	if (dataRate > RegParams.cmnParams.paramsType1.maxTxDR)
    c746:	23a8      	movs	r3, #168	; 0xa8
    c748:	005b      	lsls	r3, r3, #1
    c74a:	4a0e      	ldr	r2, [pc, #56]	; (c784 <LORAREG_GetAttr_ModulationAttrT1+0x44>)
    c74c:	5cd3      	ldrb	r3, [r2, r3]
    c74e:	42a3      	cmp	r3, r4
    c750:	d205      	bcs.n	c75e <LORAREG_GetAttr_ModulationAttrT1+0x1e>
	if((ValidateDataRateTxT1(TX_DATARATE, attrInput) != LORAWAN_SUCCESS) && (ValidateDataRateRxT1(RX_DATARATE, attrInput) != LORAWAN_SUCCESS))
    c752:	200f      	movs	r0, #15
    c754:	4b0c      	ldr	r3, [pc, #48]	; (c788 <LORAREG_GetAttr_ModulationAttrT1+0x48>)
    c756:	4798      	blx	r3
		result = LORAWAN_INVALID_PARAMETER;
    c758:	230a      	movs	r3, #10
	if((ValidateDataRateTxT1(TX_DATARATE, attrInput) != LORAWAN_SUCCESS) && (ValidateDataRateRxT1(RX_DATARATE, attrInput) != LORAWAN_SUCCESS))
    c75a:	2808      	cmp	r0, #8
    c75c:	d10f      	bne.n	c77e <LORAREG_GetAttr_ModulationAttrT1+0x3e>
	    *(uint8_t *)attrOutput = RegParams.pDrParams[dataRate].modulation;
    c75e:	4909      	ldr	r1, [pc, #36]	; (c784 <LORAREG_GetAttr_ModulationAttrT1+0x44>)
    c760:	780b      	ldrb	r3, [r1, #0]
    c762:	784a      	ldrb	r2, [r1, #1]
    c764:	0212      	lsls	r2, r2, #8
    c766:	431a      	orrs	r2, r3
    c768:	788b      	ldrb	r3, [r1, #2]
    c76a:	041b      	lsls	r3, r3, #16
    c76c:	431a      	orrs	r2, r3
    c76e:	78cb      	ldrb	r3, [r1, #3]
    c770:	061b      	lsls	r3, r3, #24
    c772:	4313      	orrs	r3, r2
    c774:	00e4      	lsls	r4, r4, #3
    c776:	18e3      	adds	r3, r4, r3
    c778:	79db      	ldrb	r3, [r3, #7]
    c77a:	702b      	strb	r3, [r5, #0]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    c77c:	2308      	movs	r3, #8
}
    c77e:	0018      	movs	r0, r3
    c780:	bd70      	pop	{r4, r5, r6, pc}
    c782:	46c0      	nop			; (mov r8, r8)
    c784:	200024d0 	.word	0x200024d0
    c788:	000099ed 	.word	0x000099ed

0000c78c <LORAREG_GetAttr_BandwidthAttrT1>:
{
    c78c:	b570      	push	{r4, r5, r6, lr}
    c78e:	0015      	movs	r5, r2
	dataRate = *(uint8_t *)attrInput;
    c790:	780c      	ldrb	r4, [r1, #0]
	if (dataRate > RegParams.cmnParams.paramsType1.maxTxDR)
    c792:	23a8      	movs	r3, #168	; 0xa8
    c794:	005b      	lsls	r3, r3, #1
    c796:	4a0e      	ldr	r2, [pc, #56]	; (c7d0 <LORAREG_GetAttr_BandwidthAttrT1+0x44>)
    c798:	5cd3      	ldrb	r3, [r2, r3]
    c79a:	42a3      	cmp	r3, r4
    c79c:	d205      	bcs.n	c7aa <LORAREG_GetAttr_BandwidthAttrT1+0x1e>
	if((ValidateDataRateTxT1(TX_DATARATE, attrInput) != LORAWAN_SUCCESS) && (ValidateDataRateRxT1(RX_DATARATE, attrInput) != LORAWAN_SUCCESS))
    c79e:	200f      	movs	r0, #15
    c7a0:	4b0c      	ldr	r3, [pc, #48]	; (c7d4 <LORAREG_GetAttr_BandwidthAttrT1+0x48>)
    c7a2:	4798      	blx	r3
		result = LORAWAN_INVALID_PARAMETER;
    c7a4:	230a      	movs	r3, #10
	if((ValidateDataRateTxT1(TX_DATARATE, attrInput) != LORAWAN_SUCCESS) && (ValidateDataRateRxT1(RX_DATARATE, attrInput) != LORAWAN_SUCCESS))
    c7a6:	2808      	cmp	r0, #8
    c7a8:	d10f      	bne.n	c7ca <LORAREG_GetAttr_BandwidthAttrT1+0x3e>
		*(uint8_t *)attrOutput = RegParams.pDrParams[dataRate].bandwidth;
    c7aa:	4909      	ldr	r1, [pc, #36]	; (c7d0 <LORAREG_GetAttr_BandwidthAttrT1+0x44>)
    c7ac:	780b      	ldrb	r3, [r1, #0]
    c7ae:	784a      	ldrb	r2, [r1, #1]
    c7b0:	0212      	lsls	r2, r2, #8
    c7b2:	431a      	orrs	r2, r3
    c7b4:	788b      	ldrb	r3, [r1, #2]
    c7b6:	041b      	lsls	r3, r3, #16
    c7b8:	431a      	orrs	r2, r3
    c7ba:	78cb      	ldrb	r3, [r1, #3]
    c7bc:	061b      	lsls	r3, r3, #24
    c7be:	4313      	orrs	r3, r2
    c7c0:	00e4      	lsls	r4, r4, #3
    c7c2:	18e3      	adds	r3, r4, r3
    c7c4:	799b      	ldrb	r3, [r3, #6]
    c7c6:	702b      	strb	r3, [r5, #0]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    c7c8:	2308      	movs	r3, #8
}
    c7ca:	0018      	movs	r0, r3
    c7cc:	bd70      	pop	{r4, r5, r6, pc}
    c7ce:	46c0      	nop			; (mov r8, r8)
    c7d0:	200024d0 	.word	0x200024d0
    c7d4:	000099ed 	.word	0x000099ed

0000c7d8 <LORAREG_GetAttr_SpreadFactorT1>:
{
    c7d8:	b570      	push	{r4, r5, r6, lr}
    c7da:	0015      	movs	r5, r2
	dataRate = *(uint8_t *)attrInput;
    c7dc:	780c      	ldrb	r4, [r1, #0]
	if (dataRate > RegParams.cmnParams.paramsType1.maxTxDR)
    c7de:	23a8      	movs	r3, #168	; 0xa8
    c7e0:	005b      	lsls	r3, r3, #1
    c7e2:	4a0e      	ldr	r2, [pc, #56]	; (c81c <LORAREG_GetAttr_SpreadFactorT1+0x44>)
    c7e4:	5cd3      	ldrb	r3, [r2, r3]
    c7e6:	42a3      	cmp	r3, r4
    c7e8:	d205      	bcs.n	c7f6 <LORAREG_GetAttr_SpreadFactorT1+0x1e>
	if((ValidateDataRateTxT1(TX_DATARATE, attrInput) != LORAWAN_SUCCESS) && (ValidateDataRateRxT1(RX_DATARATE, attrInput) != LORAWAN_SUCCESS))
    c7ea:	200f      	movs	r0, #15
    c7ec:	4b0c      	ldr	r3, [pc, #48]	; (c820 <LORAREG_GetAttr_SpreadFactorT1+0x48>)
    c7ee:	4798      	blx	r3
		result =  LORAWAN_INVALID_PARAMETER;
    c7f0:	230a      	movs	r3, #10
	if((ValidateDataRateTxT1(TX_DATARATE, attrInput) != LORAWAN_SUCCESS) && (ValidateDataRateRxT1(RX_DATARATE, attrInput) != LORAWAN_SUCCESS))
    c7f2:	2808      	cmp	r0, #8
    c7f4:	d10f      	bne.n	c816 <LORAREG_GetAttr_SpreadFactorT1+0x3e>
		*(RadioDataRate_t *)attrOutput = RegParams.pDrParams[dataRate].spreadingFactor;
    c7f6:	4909      	ldr	r1, [pc, #36]	; (c81c <LORAREG_GetAttr_SpreadFactorT1+0x44>)
    c7f8:	780b      	ldrb	r3, [r1, #0]
    c7fa:	784a      	ldrb	r2, [r1, #1]
    c7fc:	0212      	lsls	r2, r2, #8
    c7fe:	431a      	orrs	r2, r3
    c800:	788b      	ldrb	r3, [r1, #2]
    c802:	041b      	lsls	r3, r3, #16
    c804:	431a      	orrs	r2, r3
    c806:	78cb      	ldrb	r3, [r1, #3]
    c808:	061b      	lsls	r3, r3, #24
    c80a:	4313      	orrs	r3, r2
    c80c:	00e4      	lsls	r4, r4, #3
    c80e:	18e3      	adds	r3, r4, r3
    c810:	795b      	ldrb	r3, [r3, #5]
    c812:	702b      	strb	r3, [r5, #0]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    c814:	2308      	movs	r3, #8
}
    c816:	0018      	movs	r0, r3
    c818:	bd70      	pop	{r4, r5, r6, pc}
    c81a:	46c0      	nop			; (mov r8, r8)
    c81c:	200024d0 	.word	0x200024d0
    c820:	000099ed 	.word	0x000099ed

0000c824 <ValidateTxFreqT1>:
{
    c824:	b530      	push	{r4, r5, lr}
    c826:	b083      	sub	sp, #12
	memcpy(&val_freqTx,attrInput,sizeof(ValUpdateFreqTx_t));
    c828:	2208      	movs	r2, #8
    c82a:	4668      	mov	r0, sp
    c82c:	4b20      	ldr	r3, [pc, #128]	; (c8b0 <ValidateTxFreqT1+0x8c>)
    c82e:	4798      	blx	r3
	if(ChIndex > RegParams.maxChannels)
    c830:	466b      	mov	r3, sp
    c832:	7919      	ldrb	r1, [r3, #4]
    c834:	232a      	movs	r3, #42	; 0x2a
    c836:	4a1f      	ldr	r2, [pc, #124]	; (c8b4 <ValidateTxFreqT1+0x90>)
    c838:	56d3      	ldrsb	r3, [r2, r3]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    c83a:	2008      	movs	r0, #8
	if(ChIndex > RegParams.maxChannels)
    c83c:	4299      	cmp	r1, r3
    c83e:	dd00      	ble.n	c842 <ValidateTxFreqT1+0x1e>
		result = LORAWAN_INVALID_PARAMETER;
    c840:	3002      	adds	r0, #2
	if(val_freqTx.frequencyNew != GenerateFrequency1(ChIndex) && 
    c842:	9c00      	ldr	r4, [sp, #0]
    channelFrequency = RegParams.cmnParams.paramsType1.UpStreamCh0Freq + FREQ_200KHZ * channelIndex;
    c844:	4d1b      	ldr	r5, [pc, #108]	; (c8b4 <ValidateTxFreqT1+0x90>)
    c846:	2344      	movs	r3, #68	; 0x44
    c848:	33ff      	adds	r3, #255	; 0xff
    c84a:	5ceb      	ldrb	r3, [r5, r3]
    c84c:	22a2      	movs	r2, #162	; 0xa2
    c84e:	0052      	lsls	r2, r2, #1
    c850:	5caa      	ldrb	r2, [r5, r2]
    c852:	0212      	lsls	r2, r2, #8
    c854:	431a      	orrs	r2, r3
    c856:	2346      	movs	r3, #70	; 0x46
    c858:	33ff      	adds	r3, #255	; 0xff
    c85a:	5ceb      	ldrb	r3, [r5, r3]
    c85c:	041b      	lsls	r3, r3, #16
    c85e:	431a      	orrs	r2, r3
    c860:	23a3      	movs	r3, #163	; 0xa3
    c862:	005b      	lsls	r3, r3, #1
    c864:	5ceb      	ldrb	r3, [r5, r3]
    c866:	061b      	lsls	r3, r3, #24
    c868:	4313      	orrs	r3, r2
    c86a:	4a13      	ldr	r2, [pc, #76]	; (c8b8 <ValidateTxFreqT1+0x94>)
    c86c:	434a      	muls	r2, r1
    c86e:	189b      	adds	r3, r3, r2
	if(val_freqTx.frequencyNew != GenerateFrequency1(ChIndex) && 
    c870:	429c      	cmp	r4, r3
    c872:	d01b      	beq.n	c8ac <ValidateTxFreqT1+0x88>
	                   FREQ_1600KHZ * (channelIndex - RegParams.cmnParams.paramsType1.Max_125khzChan);
    c874:	2354      	movs	r3, #84	; 0x54
    c876:	33ff      	adds	r3, #255	; 0xff
    c878:	5ceb      	ldrb	r3, [r5, r3]
    c87a:	1ac9      	subs	r1, r1, r3
    c87c:	4b0f      	ldr	r3, [pc, #60]	; (c8bc <ValidateTxFreqT1+0x98>)
    c87e:	4359      	muls	r1, r3
    channelFrequency = RegParams.cmnParams.paramsType1.UpStreamCh64Freq + 
    c880:	2348      	movs	r3, #72	; 0x48
    c882:	33ff      	adds	r3, #255	; 0xff
    c884:	5ceb      	ldrb	r3, [r5, r3]
    c886:	22a4      	movs	r2, #164	; 0xa4
    c888:	0052      	lsls	r2, r2, #1
    c88a:	5caa      	ldrb	r2, [r5, r2]
    c88c:	0212      	lsls	r2, r2, #8
    c88e:	4313      	orrs	r3, r2
    c890:	224a      	movs	r2, #74	; 0x4a
    c892:	32ff      	adds	r2, #255	; 0xff
    c894:	5caa      	ldrb	r2, [r5, r2]
    c896:	0412      	lsls	r2, r2, #16
    c898:	431a      	orrs	r2, r3
    c89a:	23a5      	movs	r3, #165	; 0xa5
    c89c:	005b      	lsls	r3, r3, #1
    c89e:	5ceb      	ldrb	r3, [r5, r3]
    c8a0:	061b      	lsls	r3, r3, #24
    c8a2:	4313      	orrs	r3, r2
    c8a4:	18cb      	adds	r3, r1, r3
	if(val_freqTx.frequencyNew != GenerateFrequency1(ChIndex) && 
    c8a6:	429c      	cmp	r4, r3
    c8a8:	d000      	beq.n	c8ac <ValidateTxFreqT1+0x88>
		result = LORAWAN_INVALID_PARAMETER;
    c8aa:	200a      	movs	r0, #10
}
    c8ac:	b003      	add	sp, #12
    c8ae:	bd30      	pop	{r4, r5, pc}
    c8b0:	00019da5 	.word	0x00019da5
    c8b4:	200024d0 	.word	0x200024d0
    c8b8:	00030d40 	.word	0x00030d40
    c8bc:	00186a00 	.word	0x00186a00

0000c8c0 <LORAREG_GetAttr_NewTxChConfigT1>:
{
    c8c0:	b5f0      	push	{r4, r5, r6, r7, lr}
    c8c2:	46ce      	mov	lr, r9
    c8c4:	4647      	mov	r7, r8
    c8c6:	b580      	push	{r7, lr}
    c8c8:	b083      	sub	sp, #12
    c8ca:	0016      	movs	r6, r2
	memcpy(&newTxChannelReq,(NewTxChannelReq_t *)attrInput,sizeof(NewTxChannelReq_t));
    c8cc:	788d      	ldrb	r5, [r1, #2]
	if (dataRate > RegParams.cmnParams.paramsType1.maxTxDR)
    c8ce:	23a8      	movs	r3, #168	; 0xa8
    c8d0:	005b      	lsls	r3, r3, #1
    c8d2:	4a63      	ldr	r2, [pc, #396]	; (ca60 <LORAREG_GetAttr_NewTxChConfigT1+0x1a0>)
    c8d4:	5cd3      	ldrb	r3, [r2, r3]
		result = LORAWAN_INVALID_PARAMETER;
    c8d6:	240a      	movs	r4, #10
	if (dataRate > RegParams.cmnParams.paramsType1.maxTxDR)
    c8d8:	42ab      	cmp	r3, r5
    c8da:	d300      	bcc.n	c8de <LORAREG_GetAttr_NewTxChConfigT1+0x1e>
    c8dc:	e09a      	b.n	ca14 <LORAREG_GetAttr_NewTxChConfigT1+0x154>
}
    c8de:	0020      	movs	r0, r4
    c8e0:	b003      	add	sp, #12
    c8e2:	bc0c      	pop	{r2, r3}
    c8e4:	4690      	mov	r8, r2
    c8e6:	4699      	mov	r9, r3
    c8e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		result = SearchAvailableChannel1 (RegParams.maxChannels, transmissionType,currDr, &channelIndex);
    c8ea:	4b5d      	ldr	r3, [pc, #372]	; (ca60 <LORAREG_GetAttr_NewTxChConfigT1+0x1a0>)
    c8ec:	4699      	mov	r9, r3
    c8ee:	232a      	movs	r3, #42	; 0x2a
    c8f0:	464a      	mov	r2, r9
    c8f2:	5cd0      	ldrb	r0, [r2, r3]
    c8f4:	466b      	mov	r3, sp
    c8f6:	3307      	adds	r3, #7
    c8f8:	002a      	movs	r2, r5
    c8fa:	2101      	movs	r1, #1
    c8fc:	4c59      	ldr	r4, [pc, #356]	; (ca64 <LORAREG_GetAttr_NewTxChConfigT1+0x1a4>)
    c8fe:	47a0      	blx	r4
    c900:	0004      	movs	r4, r0
		radioConfig->sf = RegParams.pDrParams[currDr].spreadingFactor;
    c902:	464b      	mov	r3, r9
    c904:	781b      	ldrb	r3, [r3, #0]
    c906:	464a      	mov	r2, r9
    c908:	7852      	ldrb	r2, [r2, #1]
    c90a:	0212      	lsls	r2, r2, #8
    c90c:	431a      	orrs	r2, r3
    c90e:	464b      	mov	r3, r9
    c910:	789b      	ldrb	r3, [r3, #2]
    c912:	041b      	lsls	r3, r3, #16
    c914:	431a      	orrs	r2, r3
    c916:	464b      	mov	r3, r9
    c918:	78db      	ldrb	r3, [r3, #3]
    c91a:	061b      	lsls	r3, r3, #24
    c91c:	4313      	orrs	r3, r2
    c91e:	00ed      	lsls	r5, r5, #3
    c920:	18eb      	adds	r3, r5, r3
    c922:	795b      	ldrb	r3, [r3, #5]
    c924:	72f3      	strb	r3, [r6, #11]
	if (result == LORAWAN_SUCCESS)
    c926:	2c08      	cmp	r4, #8
    c928:	d1d9      	bne.n	c8de <LORAREG_GetAttr_NewTxChConfigT1+0x1e>
	uint8_t txPower = RegParams.maxTxPwr - 2 * txPwrIndx;
    c92a:	007f      	lsls	r7, r7, #1
    c92c:	4643      	mov	r3, r8
    c92e:	1bdb      	subs	r3, r3, r7
    c930:	b2db      	uxtb	r3, r3
		if (channelIndex < RegParams.cmnParams.paramsType1.Max_125khzChan)
    c932:	466a      	mov	r2, sp
    c934:	3207      	adds	r2, #7
    c936:	7812      	ldrb	r2, [r2, #0]
    c938:	2154      	movs	r1, #84	; 0x54
    c93a:	31ff      	adds	r1, #255	; 0xff
    c93c:	4848      	ldr	r0, [pc, #288]	; (ca60 <LORAREG_GetAttr_NewTxChConfigT1+0x1a0>)
    c93e:	5c41      	ldrb	r1, [r0, r1]
    c940:	4291      	cmp	r1, r2
    c942:	d93c      	bls.n	c9be <LORAREG_GetAttr_NewTxChConfigT1+0xfe>
			radioConfig->bandwidth = BW_125KHZ;
    c944:	2107      	movs	r1, #7
    c946:	72b1      	strb	r1, [r6, #10]
    channelFrequency = RegParams.cmnParams.paramsType1.UpStreamCh0Freq + FREQ_200KHZ * channelIndex;
    c948:	2144      	movs	r1, #68	; 0x44
    c94a:	31ff      	adds	r1, #255	; 0xff
    c94c:	5c41      	ldrb	r1, [r0, r1]
    c94e:	25a2      	movs	r5, #162	; 0xa2
    c950:	006d      	lsls	r5, r5, #1
    c952:	5d45      	ldrb	r5, [r0, r5]
    c954:	022d      	lsls	r5, r5, #8
    c956:	430d      	orrs	r5, r1
    c958:	2146      	movs	r1, #70	; 0x46
    c95a:	31ff      	adds	r1, #255	; 0xff
    c95c:	5c41      	ldrb	r1, [r0, r1]
    c95e:	0409      	lsls	r1, r1, #16
    c960:	430d      	orrs	r5, r1
    c962:	21a3      	movs	r1, #163	; 0xa3
    c964:	0049      	lsls	r1, r1, #1
    c966:	5c41      	ldrb	r1, [r0, r1]
    c968:	0609      	lsls	r1, r1, #24
    c96a:	4329      	orrs	r1, r5
    c96c:	4d3e      	ldr	r5, [pc, #248]	; (ca68 <LORAREG_GetAttr_NewTxChConfigT1+0x1a8>)
    c96e:	436a      	muls	r2, r5
    c970:	188a      	adds	r2, r1, r2
			radioConfig->frequency = GenerateFrequency1 (channelIndex);
    c972:	6032      	str	r2, [r6, #0]
			radioConfig->txPower = txPower;
    c974:	7233      	strb	r3, [r6, #8]
			if(RegParams.band == ISM_NA915)
    c976:	232e      	movs	r3, #46	; 0x2e
    c978:	5cc3      	ldrb	r3, [r0, r3]
    c97a:	2b02      	cmp	r3, #2
    c97c:	d01b      	beq.n	c9b6 <LORAREG_GetAttr_NewTxChConfigT1+0xf6>
		radioConfig->freq_hop_period = DISABLED;
    c97e:	2300      	movs	r3, #0
    c980:	80b3      	strh	r3, [r6, #4]
		radioConfig->modulation = MODULATION_LORA;
    c982:	3301      	adds	r3, #1
    c984:	7273      	strb	r3, [r6, #9]
		RegParams.lastUsedChannelIndex = channelIndex;
    c986:	466b      	mov	r3, sp
    c988:	79d9      	ldrb	r1, [r3, #7]
    c98a:	232f      	movs	r3, #47	; 0x2f
    c98c:	4a34      	ldr	r2, [pc, #208]	; (ca60 <LORAREG_GetAttr_NewTxChConfigT1+0x1a0>)
    c98e:	54d1      	strb	r1, [r2, r3]
    c990:	e7a5      	b.n	c8de <LORAREG_GetAttr_NewTxChConfigT1+0x1e>
				radioConfig->sf = SF_10;
    c992:	3308      	adds	r3, #8
    c994:	72f3      	strb	r3, [r6, #11]
    c996:	e001      	b.n	c99c <LORAREG_GetAttr_NewTxChConfigT1+0xdc>
			radioConfig->sf = SF_8;
    c998:	2308      	movs	r3, #8
    c99a:	72f3      	strb	r3, [r6, #11]
		PDS_STORE(RegParams.regParamItems.lastUsedSB);
    c99c:	4b30      	ldr	r3, [pc, #192]	; (ca60 <LORAREG_GetAttr_NewTxChConfigT1+0x1a0>)
    c99e:	2283      	movs	r2, #131	; 0x83
    c9a0:	0092      	lsls	r2, r2, #2
    c9a2:	5c9a      	ldrb	r2, [r3, r2]
    c9a4:	4931      	ldr	r1, [pc, #196]	; (ca6c <LORAREG_GetAttr_NewTxChConfigT1+0x1ac>)
    c9a6:	5c58      	ldrb	r0, [r3, r1]
    c9a8:	0200      	lsls	r0, r0, #8
    c9aa:	4310      	orrs	r0, r2
    c9ac:	b2c1      	uxtb	r1, r0
    c9ae:	0a00      	lsrs	r0, r0, #8
    c9b0:	4b2f      	ldr	r3, [pc, #188]	; (ca70 <LORAREG_GetAttr_NewTxChConfigT1+0x1b0>)
    c9b2:	4798      	blx	r3
    c9b4:	e7b7      	b.n	c926 <LORAREG_GetAttr_NewTxChConfigT1+0x66>
    			radioConfig->ecrConfig.override = true;
    c9b6:	3b01      	subs	r3, #1
    c9b8:	71f3      	strb	r3, [r6, #7]
			    radioConfig->ecrConfig.ecr = CR_4_5;	 
    c9ba:	71b3      	strb	r3, [r6, #6]
    c9bc:	e7df      	b.n	c97e <LORAREG_GetAttr_NewTxChConfigT1+0xbe>
			radioConfig->bandwidth = BW_500KHZ;
    c9be:	2109      	movs	r1, #9
    c9c0:	72b1      	strb	r1, [r6, #10]
	                   FREQ_1600KHZ * (channelIndex - RegParams.cmnParams.paramsType1.Max_125khzChan);
    c9c2:	4927      	ldr	r1, [pc, #156]	; (ca60 <LORAREG_GetAttr_NewTxChConfigT1+0x1a0>)
    c9c4:	2054      	movs	r0, #84	; 0x54
    c9c6:	30ff      	adds	r0, #255	; 0xff
    c9c8:	5c08      	ldrb	r0, [r1, r0]
    c9ca:	1a12      	subs	r2, r2, r0
    c9cc:	4829      	ldr	r0, [pc, #164]	; (ca74 <LORAREG_GetAttr_NewTxChConfigT1+0x1b4>)
    c9ce:	4342      	muls	r2, r0
    channelFrequency = RegParams.cmnParams.paramsType1.UpStreamCh64Freq + 
    c9d0:	2048      	movs	r0, #72	; 0x48
    c9d2:	30ff      	adds	r0, #255	; 0xff
    c9d4:	5c08      	ldrb	r0, [r1, r0]
    c9d6:	25a4      	movs	r5, #164	; 0xa4
    c9d8:	006d      	lsls	r5, r5, #1
    c9da:	5d4d      	ldrb	r5, [r1, r5]
    c9dc:	022d      	lsls	r5, r5, #8
    c9de:	4305      	orrs	r5, r0
    c9e0:	204a      	movs	r0, #74	; 0x4a
    c9e2:	30ff      	adds	r0, #255	; 0xff
    c9e4:	5c08      	ldrb	r0, [r1, r0]
    c9e6:	0400      	lsls	r0, r0, #16
    c9e8:	4305      	orrs	r5, r0
    c9ea:	20a5      	movs	r0, #165	; 0xa5
    c9ec:	0040      	lsls	r0, r0, #1
    c9ee:	5c08      	ldrb	r0, [r1, r0]
    c9f0:	0600      	lsls	r0, r0, #24
    c9f2:	4328      	orrs	r0, r5
    c9f4:	1812      	adds	r2, r2, r0
			radioConfig->frequency = GenerateFrequency2 (channelIndex);
    c9f6:	6032      	str	r2, [r6, #0]
			if( RegParams.band == ISM_NA915)
    c9f8:	222e      	movs	r2, #46	; 0x2e
    c9fa:	5c8a      	ldrb	r2, [r1, r2]
    c9fc:	2a02      	cmp	r2, #2
    c9fe:	d003      	beq.n	ca08 <LORAREG_GetAttr_NewTxChConfigT1+0x148>
			if (txPower <= 26)
    ca00:	2b1a      	cmp	r3, #26
    ca02:	d804      	bhi.n	ca0e <LORAREG_GetAttr_NewTxChConfigT1+0x14e>
				radioConfig->txPower = txPower;
    ca04:	7233      	strb	r3, [r6, #8]
    ca06:	e7ba      	b.n	c97e <LORAREG_GetAttr_NewTxChConfigT1+0xbe>
			    radioConfig->ecrConfig.override = false;
    ca08:	2200      	movs	r2, #0
    ca0a:	71f2      	strb	r2, [r6, #7]
    ca0c:	e7f8      	b.n	ca00 <LORAREG_GetAttr_NewTxChConfigT1+0x140>
				radioConfig->txPower = 26;
    ca0e:	231a      	movs	r3, #26
    ca10:	7233      	strb	r3, [r6, #8]
    ca12:	e7b4      	b.n	c97e <LORAREG_GetAttr_NewTxChConfigT1+0xbe>
	memcpy(&newTxChannelReq,(NewTxChannelReq_t *)attrInput,sizeof(NewTxChannelReq_t));
    ca14:	784f      	ldrb	r7, [r1, #1]
	if (txPowerNew > RegParams.maxTxPwrIndx)
    ca16:	232d      	movs	r3, #45	; 0x2d
    ca18:	4a11      	ldr	r2, [pc, #68]	; (ca60 <LORAREG_GetAttr_NewTxChConfigT1+0x1a0>)
    ca1a:	56d3      	ldrsb	r3, [r2, r3]
		result = LORAWAN_INVALID_PARAMETER;
    ca1c:	240a      	movs	r4, #10
	if (txPowerNew > RegParams.maxTxPwrIndx)
    ca1e:	429f      	cmp	r7, r3
    ca20:	dd00      	ble.n	ca24 <LORAREG_GetAttr_NewTxChConfigT1+0x164>
    ca22:	e75c      	b.n	c8de <LORAREG_GetAttr_NewTxChConfigT1+0x1e>
	uint8_t txPower = RegParams.maxTxPwr - 2 * txPwrIndx;
    ca24:	2328      	movs	r3, #40	; 0x28
    ca26:	5cd3      	ldrb	r3, [r2, r3]
    ca28:	4698      	mov	r8, r3
	if (transmissionType == 1) // data message (not join request), it should search in all
    ca2a:	780b      	ldrb	r3, [r1, #0]
    ca2c:	2b00      	cmp	r3, #0
    ca2e:	d000      	beq.n	ca32 <LORAREG_GetAttr_NewTxChConfigT1+0x172>
    ca30:	e75b      	b.n	c8ea <LORAREG_GetAttr_NewTxChConfigT1+0x2a>
		result = SearchAvailableChannel1 (RegParams.cmnParams.paramsType1.Max_125khzChan, transmissionType,DR0, &channelIndex);
    ca32:	466b      	mov	r3, sp
    ca34:	1ddd      	adds	r5, r3, #7
    ca36:	2354      	movs	r3, #84	; 0x54
    ca38:	33ff      	adds	r3, #255	; 0xff
    ca3a:	4a09      	ldr	r2, [pc, #36]	; (ca60 <LORAREG_GetAttr_NewTxChConfigT1+0x1a0>)
    ca3c:	5cd0      	ldrb	r0, [r2, r3]
    ca3e:	002b      	movs	r3, r5
    ca40:	2200      	movs	r2, #0
    ca42:	2100      	movs	r1, #0
    ca44:	4c07      	ldr	r4, [pc, #28]	; (ca64 <LORAREG_GetAttr_NewTxChConfigT1+0x1a4>)
    ca46:	47a0      	blx	r4
    ca48:	0004      	movs	r4, r0
		if(channelIndex < MAX_CHANNELS_BANDWIDTH_125_AU_NA)
    ca4a:	782b      	ldrb	r3, [r5, #0]
    ca4c:	2b3f      	cmp	r3, #63	; 0x3f
    ca4e:	d8a3      	bhi.n	c998 <LORAREG_GetAttr_NewTxChConfigT1+0xd8>
			if( RegParams.band == ISM_NA915)
    ca50:	232e      	movs	r3, #46	; 0x2e
    ca52:	4a03      	ldr	r2, [pc, #12]	; (ca60 <LORAREG_GetAttr_NewTxChConfigT1+0x1a0>)
    ca54:	5cd3      	ldrb	r3, [r2, r3]
    ca56:	2b02      	cmp	r3, #2
    ca58:	d09b      	beq.n	c992 <LORAREG_GetAttr_NewTxChConfigT1+0xd2>
				radioConfig->sf = SF_12;
    ca5a:	230c      	movs	r3, #12
    ca5c:	72f3      	strb	r3, [r6, #11]
    ca5e:	e79d      	b.n	c99c <LORAREG_GetAttr_NewTxChConfigT1+0xdc>
    ca60:	200024d0 	.word	0x200024d0
    ca64:	00009ee1 	.word	0x00009ee1
    ca68:	00030d40 	.word	0x00030d40
    ca6c:	0000020d 	.word	0x0000020d
    ca70:	0000e0f9 	.word	0x0000e0f9
    ca74:	00186a00 	.word	0x00186a00

0000ca78 <LORAREG_InitGetAttrFnPtrsNA>:
    pGetAttr[FREQUENCY] = LORAREG_GetAttr_FreqT1;
    ca78:	4b2b      	ldr	r3, [pc, #172]	; (cb28 <LORAREG_InitGetAttrFnPtrsNA+0xb0>)
    ca7a:	4a2c      	ldr	r2, [pc, #176]	; (cb2c <LORAREG_InitGetAttrFnPtrsNA+0xb4>)
    ca7c:	601a      	str	r2, [r3, #0]
    pGetAttr[RX_WINDOW_SIZE] = LORAREG_GetAttr_RxWindowSizeT1;
    ca7e:	4a2c      	ldr	r2, [pc, #176]	; (cb30 <LORAREG_InitGetAttrFnPtrsNA+0xb8>)
    ca80:	60da      	str	r2, [r3, #12]
    pGetAttr[RX_WINDOW_OFFSET] = LORAREG_GetAttr_RxWindowOffsetT1;
    ca82:	4a2c      	ldr	r2, [pc, #176]	; (cb34 <LORAREG_InitGetAttrFnPtrsNA+0xbc>)
    ca84:	611a      	str	r2, [r3, #16]
    pGetAttr[MAX_PAYLOAD_SIZE] = LORAREG_GetAttr_MaxPayloadT1;
    ca86:	4a2c      	ldr	r2, [pc, #176]	; (cb38 <LORAREG_InitGetAttrFnPtrsNA+0xc0>)
    ca88:	615a      	str	r2, [r3, #20]
    pGetAttr[MAX_CHANNELS] = LORAREG_GetAttr_MaxChannel;
    ca8a:	4a2c      	ldr	r2, [pc, #176]	; (cb3c <LORAREG_InitGetAttrFnPtrsNA+0xc4>)
    ca8c:	619a      	str	r2, [r3, #24]
    pGetAttr[MIN_NEW_CH_INDEX] = LORAREG_GetAttr_MinNewChIndex;
    ca8e:	4a2c      	ldr	r2, [pc, #176]	; (cb40 <LORAREG_InitGetAttrFnPtrsNA+0xc8>)
    ca90:	61da      	str	r2, [r3, #28]
    pGetAttr[DEFAULT_RX1_DATA_RATE] = LORAREG_GetAttr_DefRx1DataRate;
    ca92:	4a2c      	ldr	r2, [pc, #176]	; (cb44 <LORAREG_InitGetAttrFnPtrsNA+0xcc>)
    ca94:	621a      	str	r2, [r3, #32]
    pGetAttr[DEFAULT_RX2_DATA_RATE] = LORAREG_GetAttr_DefRx2DataRate;
    ca96:	4a2c      	ldr	r2, [pc, #176]	; (cb48 <LORAREG_InitGetAttrFnPtrsNA+0xd0>)
    ca98:	625a      	str	r2, [r3, #36]	; 0x24
    pGetAttr[DEFAULT_RX2_FREQUENCY] = LORAREG_GetAttr_DefRx2Freq;
    ca9a:	4a2c      	ldr	r2, [pc, #176]	; (cb4c <LORAREG_InitGetAttrFnPtrsNA+0xd4>)
    ca9c:	629a      	str	r2, [r3, #40]	; 0x28
    pGetAttr[SUPPORTED_REGIONAL_FEATURES] = LORAREG_GetAttr_RegFeatures;
    ca9e:	4a2c      	ldr	r2, [pc, #176]	; (cb50 <LORAREG_InitGetAttrFnPtrsNA+0xd8>)
    caa0:	639a      	str	r2, [r3, #56]	; 0x38
    pGetAttr[DATA_RANGE] = LORAREG_GetAttr_DataRange;
    caa2:	4a2c      	ldr	r2, [pc, #176]	; (cb54 <LORAREG_InitGetAttrFnPtrsNA+0xdc>)
    caa4:	649a      	str	r2, [r3, #72]	; 0x48
    pGetAttr[DATA_RANGE_CH_BAND] = LORAREG_GetAttr_DRangeChBandT1;
    caa6:	4a2c      	ldr	r2, [pc, #176]	; (cb58 <LORAREG_InitGetAttrFnPtrsNA+0xe0>)
    caa8:	64da      	str	r2, [r3, #76]	; 0x4c
    pGetAttr[MIN_MAX_DR] = LORAREG_GetAttr_MinMaxDr;
    caaa:	4a2c      	ldr	r2, [pc, #176]	; (cb5c <LORAREG_InitGetAttrFnPtrsNA+0xe4>)
    caac:	651a      	str	r2, [r3, #80]	; 0x50
    pGetAttr[CHANNEL_ID_STATUS] = LORAREG_GetAttr_ChIdStatus;
    caae:	4a2c      	ldr	r2, [pc, #176]	; (cb60 <LORAREG_InitGetAttrFnPtrsNA+0xe8>)
    cab0:	659a      	str	r2, [r3, #88]	; 0x58
    pGetAttr[RX1_WINDOW_PARAMS] = LORAREG_GetAttr_Rx1WindowparamsType1;
    cab2:	4a2c      	ldr	r2, [pc, #176]	; (cb64 <LORAREG_InitGetAttrFnPtrsNA+0xec>)
    cab4:	665a      	str	r2, [r3, #100]	; 0x64
	pGetAttr[JOIN_DUTY_CYCLE_TIMER] = LORAREG_GetAttr_JoinDutyCycleRemainingTime;
    cab6:	492c      	ldr	r1, [pc, #176]	; (cb68 <LORAREG_InitGetAttrFnPtrsNA+0xf0>)
    cab8:	2280      	movs	r2, #128	; 0x80
    caba:	5099      	str	r1, [r3, r2]
    pGetAttr[DUTY_CYCLE] = LORAREG_GetAttr_DutyCycleT1;
    cabc:	4a2b      	ldr	r2, [pc, #172]	; (cb6c <LORAREG_InitGetAttrFnPtrsNA+0xf4>)
    cabe:	679a      	str	r2, [r3, #120]	; 0x78
    pGetAttr[MODULATION_ATTR] = LORAREG_GetAttr_ModulationAttrT1;
    cac0:	492b      	ldr	r1, [pc, #172]	; (cb70 <LORAREG_InitGetAttrFnPtrsNA+0xf8>)
    cac2:	228c      	movs	r2, #140	; 0x8c
    cac4:	5099      	str	r1, [r3, r2]
    pGetAttr[BANDWIDTH_ATTR] = LORAREG_GetAttr_BandwidthAttrT1;
    cac6:	492b      	ldr	r1, [pc, #172]	; (cb74 <LORAREG_InitGetAttrFnPtrsNA+0xfc>)
    cac8:	3204      	adds	r2, #4
    caca:	5099      	str	r1, [r3, r2]
    pGetAttr[SPREADING_FACTOR_ATTR] = LORAREG_GetAttr_SpreadFactorT1;
    cacc:	492a      	ldr	r1, [pc, #168]	; (cb78 <LORAREG_InitGetAttrFnPtrsNA+0x100>)
    cace:	3204      	adds	r2, #4
    cad0:	5099      	str	r1, [r3, r2]
    pGetAttr[MIN_DUTY_CYCLE_TIMER] = LORAREG_GetAttr_MinDutyCycleTimer;
    cad2:	492a      	ldr	r1, [pc, #168]	; (cb7c <LORAREG_InitGetAttrFnPtrsNA+0x104>)
    cad4:	3204      	adds	r2, #4
    cad6:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_RECEIVE_DELAY1] = LORAREG_GetAttr_MacRecvDelay1;
    cad8:	4929      	ldr	r1, [pc, #164]	; (cb80 <LORAREG_InitGetAttrFnPtrsNA+0x108>)
    cada:	3204      	adds	r2, #4
    cadc:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_RECEIVE_DELAY2] = LORAREG_GetAttr_MacRecvDelay2;
    cade:	4929      	ldr	r1, [pc, #164]	; (cb84 <LORAREG_InitGetAttrFnPtrsNA+0x10c>)
    cae0:	3204      	adds	r2, #4
    cae2:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_JOIN_ACCEPT_DELAY1] = LORAREG_GetAttr_MacJoinAcptDelay1;
    cae4:	4928      	ldr	r1, [pc, #160]	; (cb88 <LORAREG_InitGetAttrFnPtrsNA+0x110>)
    cae6:	3204      	adds	r2, #4
    cae8:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_JOIN_ACCEPT_DELAY2] = LORAREG_GetAttr_MacJoinAcptDelay2;
    caea:	4928      	ldr	r1, [pc, #160]	; (cb8c <LORAREG_InitGetAttrFnPtrsNA+0x114>)
    caec:	3204      	adds	r2, #4
    caee:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_ACK_TIMEOUT] = LORAREG_GetAttr_MacAckTimeout;
    caf0:	4927      	ldr	r1, [pc, #156]	; (cb90 <LORAREG_InitGetAttrFnPtrsNA+0x118>)
    caf2:	3204      	adds	r2, #4
    caf4:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_ADR_ACK_DELAY] = LORAREG_GetAttr_MacAdrAckDelay;
    caf6:	4927      	ldr	r1, [pc, #156]	; (cb94 <LORAREG_InitGetAttrFnPtrsNA+0x11c>)
    caf8:	3204      	adds	r2, #4
    cafa:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_ADR_ACK_LIMIT] = LORAREG_GetAttr_MacAdrAckLimit;
    cafc:	4926      	ldr	r1, [pc, #152]	; (cb98 <LORAREG_InitGetAttrFnPtrsNA+0x120>)
    cafe:	3204      	adds	r2, #4
    cb00:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_MAX_FCNT_GAP] = LORAREG_GetAttr_MacMaxFcntGap;
    cb02:	4926      	ldr	r1, [pc, #152]	; (cb9c <LORAREG_InitGetAttrFnPtrsNA+0x124>)
    cb04:	3204      	adds	r2, #4
    cb06:	5099      	str	r1, [r3, r2]
    pGetAttr[NEW_TX_CHANNEL_CONFIG] = LORAREG_GetAttr_NewTxChConfigT1;
    cb08:	4925      	ldr	r1, [pc, #148]	; (cba0 <LORAREG_InitGetAttrFnPtrsNA+0x128>)
    cb0a:	3204      	adds	r2, #4
    cb0c:	5099      	str	r1, [r3, r2]
    pGetAttr[FREE_CHANNEL] = LORAREG_GetAttr_FreeChannel1;
    cb0e:	4925      	ldr	r1, [pc, #148]	; (cba4 <LORAREG_InitGetAttrFnPtrsNA+0x12c>)
    cb10:	3204      	adds	r2, #4
    cb12:	5099      	str	r1, [r3, r2]
    pGetAttr[CURRENT_CHANNEL_INDEX] = LORAREG_GetAttr_CurChIndx;
    cb14:	4924      	ldr	r1, [pc, #144]	; (cba8 <LORAREG_InitGetAttrFnPtrsNA+0x130>)
    cb16:	3204      	adds	r2, #4
    cb18:	5099      	str	r1, [r3, r2]
    pGetAttr[REG_DEF_TX_POWER] = LORAREG_GetAttr_RegDefTxPwr;
    cb1a:	4924      	ldr	r1, [pc, #144]	; (cbac <LORAREG_InitGetAttrFnPtrsNA+0x134>)
    cb1c:	3214      	adds	r2, #20
    cb1e:	5099      	str	r1, [r3, r2]
    pGetAttr[REG_DEF_TX_DATARATE] = LORAREG_GetAttr_RegDefTxDR;
    cb20:	4923      	ldr	r1, [pc, #140]	; (cbb0 <LORAREG_InitGetAttrFnPtrsNA+0x138>)
    cb22:	3204      	adds	r2, #4
    cb24:	5099      	str	r1, [r3, r2]
}
    cb26:	4770      	bx	lr
    cb28:	20000c7c 	.word	0x20000c7c
    cb2c:	00009915 	.word	0x00009915
    cb30:	0000c659 	.word	0x0000c659
    cb34:	0000c6a9 	.word	0x0000c6a9
    cb38:	0000c6f5 	.word	0x0000c6f5
    cb3c:	0000975d 	.word	0x0000975d
    cb40:	0000976d 	.word	0x0000976d
    cb44:	00009789 	.word	0x00009789
    cb48:	00009799 	.word	0x00009799
    cb4c:	0000a809 	.word	0x0000a809
    cb50:	000097a9 	.word	0x000097a9
    cb54:	000097b9 	.word	0x000097b9
    cb58:	0000a6dd 	.word	0x0000a6dd
    cb5c:	00009ac9 	.word	0x00009ac9
    cb60:	00009809 	.word	0x00009809
    cb64:	0000a631 	.word	0x0000a631
    cb68:	0000a591 	.word	0x0000a591
    cb6c:	00009855 	.word	0x00009855
    cb70:	0000c741 	.word	0x0000c741
    cb74:	0000c78d 	.word	0x0000c78d
    cb78:	0000c7d9 	.word	0x0000c7d9
    cb7c:	0000985f 	.word	0x0000985f
    cb80:	00009869 	.word	0x00009869
    cb84:	00009873 	.word	0x00009873
    cb88:	0000987d 	.word	0x0000987d
    cb8c:	00009889 	.word	0x00009889
    cb90:	00009895 	.word	0x00009895
    cb94:	0000989f 	.word	0x0000989f
    cb98:	000098a7 	.word	0x000098a7
    cb9c:	000098af 	.word	0x000098af
    cba0:	0000c8c1 	.word	0x0000c8c1
    cba4:	0000a0ed 	.word	0x0000a0ed
    cba8:	000098d9 	.word	0x000098d9
    cbac:	000098b9 	.word	0x000098b9
    cbb0:	000098c9 	.word	0x000098c9

0000cbb4 <LORAREG_InitGetAttrFnPtrsEU>:
    pGetAttr[FREQUENCY] = LORAREG_GetAttr_FreqT2;
    cbb4:	4b2d      	ldr	r3, [pc, #180]	; (cc6c <LORAREG_InitGetAttrFnPtrsEU+0xb8>)
    cbb6:	4a2e      	ldr	r2, [pc, #184]	; (cc70 <LORAREG_InitGetAttrFnPtrsEU+0xbc>)
    cbb8:	601a      	str	r2, [r3, #0]
    pGetAttr[RX_WINDOW_SIZE] = LORAREG_GetAttr_RxWindowSizeT2;
    cbba:	4a2e      	ldr	r2, [pc, #184]	; (cc74 <LORAREG_InitGetAttrFnPtrsEU+0xc0>)
    cbbc:	60da      	str	r2, [r3, #12]
    pGetAttr[RX_WINDOW_OFFSET] = LORAREG_GetAttr_RxWindowOffsetT2;
    cbbe:	4a2e      	ldr	r2, [pc, #184]	; (cc78 <LORAREG_InitGetAttrFnPtrsEU+0xc4>)
    cbc0:	611a      	str	r2, [r3, #16]
    pGetAttr[MAX_PAYLOAD_SIZE] = LORAREG_GetAttr_MaxPayloadT2;
    cbc2:	4a2e      	ldr	r2, [pc, #184]	; (cc7c <LORAREG_InitGetAttrFnPtrsEU+0xc8>)
    cbc4:	615a      	str	r2, [r3, #20]
    pGetAttr[MAX_CHANNELS] = LORAREG_GetAttr_MaxChannel;
    cbc6:	4a2e      	ldr	r2, [pc, #184]	; (cc80 <LORAREG_InitGetAttrFnPtrsEU+0xcc>)
    cbc8:	619a      	str	r2, [r3, #24]
    pGetAttr[MIN_NEW_CH_INDEX] = LORAREG_GetAttr_MinNewChIndex;
    cbca:	4a2e      	ldr	r2, [pc, #184]	; (cc84 <LORAREG_InitGetAttrFnPtrsEU+0xd0>)
    cbcc:	61da      	str	r2, [r3, #28]
    pGetAttr[DEFAULT_RX1_DATA_RATE] = LORAREG_GetAttr_DefRx1DataRate;
    cbce:	4a2e      	ldr	r2, [pc, #184]	; (cc88 <LORAREG_InitGetAttrFnPtrsEU+0xd4>)
    cbd0:	621a      	str	r2, [r3, #32]
    pGetAttr[DEFAULT_RX2_DATA_RATE] = LORAREG_GetAttr_DefRx2DataRate;
    cbd2:	4a2e      	ldr	r2, [pc, #184]	; (cc8c <LORAREG_InitGetAttrFnPtrsEU+0xd8>)
    cbd4:	625a      	str	r2, [r3, #36]	; 0x24
    pGetAttr[DEFAULT_RX2_FREQUENCY] = LORAREG_GetAttr_DefRx2Freq;
    cbd6:	4a2e      	ldr	r2, [pc, #184]	; (cc90 <LORAREG_InitGetAttrFnPtrsEU+0xdc>)
    cbd8:	629a      	str	r2, [r3, #40]	; 0x28
    pGetAttr[SUPPORTED_REGIONAL_FEATURES] = LORAREG_GetAttr_RegFeatures;
    cbda:	4a2e      	ldr	r2, [pc, #184]	; (cc94 <LORAREG_InitGetAttrFnPtrsEU+0xe0>)
    cbdc:	639a      	str	r2, [r3, #56]	; 0x38
    pGetAttr[DATA_RANGE] = LORAREG_GetAttr_DataRange;
    cbde:	4a2e      	ldr	r2, [pc, #184]	; (cc98 <LORAREG_InitGetAttrFnPtrsEU+0xe4>)
    cbe0:	649a      	str	r2, [r3, #72]	; 0x48
    pGetAttr[DATA_RANGE_CH_BAND] = LORAREG_GetAttr_DRangeChBandT2;
    cbe2:	4a2e      	ldr	r2, [pc, #184]	; (cc9c <LORAREG_InitGetAttrFnPtrsEU+0xe8>)
    cbe4:	64da      	str	r2, [r3, #76]	; 0x4c
    pGetAttr[MIN_MAX_DR] = LORAREG_GetAttr_MinMaxDr;
    cbe6:	4a2e      	ldr	r2, [pc, #184]	; (cca0 <LORAREG_InitGetAttrFnPtrsEU+0xec>)
    cbe8:	651a      	str	r2, [r3, #80]	; 0x50
    pGetAttr[CHANNEL_ID_STATUS] = LORAREG_GetAttr_ChIdStatus;
    cbea:	4a2e      	ldr	r2, [pc, #184]	; (cca4 <LORAREG_InitGetAttrFnPtrsEU+0xf0>)
    cbec:	659a      	str	r2, [r3, #88]	; 0x58
    pGetAttr[RX1_WINDOW_PARAMS] = LORAREG_GetAttr_Rx1WindowparamsType2;
    cbee:	4a2e      	ldr	r2, [pc, #184]	; (cca8 <LORAREG_InitGetAttrFnPtrsEU+0xf4>)
    cbf0:	665a      	str	r2, [r3, #100]	; 0x64
	pGetAttr[JOIN_DUTY_CYCLE_TIMER]= LORAREG_GetAttr_JoinDutyCycleRemainingTime;
    cbf2:	492e      	ldr	r1, [pc, #184]	; (ccac <LORAREG_InitGetAttrFnPtrsEU+0xf8>)
    cbf4:	2280      	movs	r2, #128	; 0x80
    cbf6:	5099      	str	r1, [r3, r2]
    pGetAttr[DUTY_CYCLE] = LORAREG_GetAttr_DutyCycleT2;
    cbf8:	4a2d      	ldr	r2, [pc, #180]	; (ccb0 <LORAREG_InitGetAttrFnPtrsEU+0xfc>)
    cbfa:	679a      	str	r2, [r3, #120]	; 0x78
    pGetAttr[MODULATION_ATTR] = LORAREG_GetAttr_ModulationAttrT2;
    cbfc:	492d      	ldr	r1, [pc, #180]	; (ccb4 <LORAREG_InitGetAttrFnPtrsEU+0x100>)
    cbfe:	228c      	movs	r2, #140	; 0x8c
    cc00:	5099      	str	r1, [r3, r2]
    pGetAttr[BANDWIDTH_ATTR] = LORAREG_GetAttr_BandwidthAttrT2;
    cc02:	492d      	ldr	r1, [pc, #180]	; (ccb8 <LORAREG_InitGetAttrFnPtrsEU+0x104>)
    cc04:	3204      	adds	r2, #4
    cc06:	5099      	str	r1, [r3, r2]
    pGetAttr[SPREADING_FACTOR_ATTR] = LORAREG_GetAttr_SpreadFactorT2;
    cc08:	492c      	ldr	r1, [pc, #176]	; (ccbc <LORAREG_InitGetAttrFnPtrsEU+0x108>)
    cc0a:	3204      	adds	r2, #4
    cc0c:	5099      	str	r1, [r3, r2]
    pGetAttr[MIN_DUTY_CYCLE_TIMER] = LORAREG_GetAttr_DutyCycleTimer;
    cc0e:	492c      	ldr	r1, [pc, #176]	; (ccc0 <LORAREG_InitGetAttrFnPtrsEU+0x10c>)
    cc10:	3204      	adds	r2, #4
    cc12:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_RECEIVE_DELAY1] = LORAREG_GetAttr_MacRecvDelay1;
    cc14:	492b      	ldr	r1, [pc, #172]	; (ccc4 <LORAREG_InitGetAttrFnPtrsEU+0x110>)
    cc16:	3204      	adds	r2, #4
    cc18:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_RECEIVE_DELAY2] = LORAREG_GetAttr_MacRecvDelay2;
    cc1a:	492b      	ldr	r1, [pc, #172]	; (ccc8 <LORAREG_InitGetAttrFnPtrsEU+0x114>)
    cc1c:	3204      	adds	r2, #4
    cc1e:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_JOIN_ACCEPT_DELAY1] = LORAREG_GetAttr_MacJoinAcptDelay1;
    cc20:	492a      	ldr	r1, [pc, #168]	; (cccc <LORAREG_InitGetAttrFnPtrsEU+0x118>)
    cc22:	3204      	adds	r2, #4
    cc24:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_JOIN_ACCEPT_DELAY2] = LORAREG_GetAttr_MacJoinAcptDelay2;
    cc26:	492a      	ldr	r1, [pc, #168]	; (ccd0 <LORAREG_InitGetAttrFnPtrsEU+0x11c>)
    cc28:	3204      	adds	r2, #4
    cc2a:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_ACK_TIMEOUT] = LORAREG_GetAttr_MacAckTimeout;
    cc2c:	4929      	ldr	r1, [pc, #164]	; (ccd4 <LORAREG_InitGetAttrFnPtrsEU+0x120>)
    cc2e:	3204      	adds	r2, #4
    cc30:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_ADR_ACK_DELAY] = LORAREG_GetAttr_MacAdrAckDelay;
    cc32:	4929      	ldr	r1, [pc, #164]	; (ccd8 <LORAREG_InitGetAttrFnPtrsEU+0x124>)
    cc34:	3204      	adds	r2, #4
    cc36:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_ADR_ACK_LIMIT] = LORAREG_GetAttr_MacAdrAckLimit;
    cc38:	4928      	ldr	r1, [pc, #160]	; (ccdc <LORAREG_InitGetAttrFnPtrsEU+0x128>)
    cc3a:	3204      	adds	r2, #4
    cc3c:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_MAX_FCNT_GAP] = LORAREG_GetAttr_MacMaxFcntGap;
    cc3e:	4928      	ldr	r1, [pc, #160]	; (cce0 <LORAREG_InitGetAttrFnPtrsEU+0x12c>)
    cc40:	3204      	adds	r2, #4
    cc42:	5099      	str	r1, [r3, r2]
    pGetAttr[NEW_TX_CHANNEL_CONFIG] = LORAREG_GetAttr_NewTxChConfigT2;
    cc44:	4927      	ldr	r1, [pc, #156]	; (cce4 <LORAREG_InitGetAttrFnPtrsEU+0x130>)
    cc46:	3204      	adds	r2, #4
    cc48:	5099      	str	r1, [r3, r2]
    pGetAttr[FREE_CHANNEL] = LORAREG_GetAttr_FreeChannel2;
    cc4a:	4927      	ldr	r1, [pc, #156]	; (cce8 <LORAREG_InitGetAttrFnPtrsEU+0x134>)
    cc4c:	3204      	adds	r2, #4
    cc4e:	5099      	str	r1, [r3, r2]
    pGetAttr[CURRENT_CHANNEL_INDEX] = LORAREG_GetAttr_CurChIndx;
    cc50:	4926      	ldr	r1, [pc, #152]	; (ccec <LORAREG_InitGetAttrFnPtrsEU+0x138>)
    cc52:	3204      	adds	r2, #4
    cc54:	5099      	str	r1, [r3, r2]
    pGetAttr[DL_FREQUENCY] = LORAREG_GetAttr_DlFrequency;
    cc56:	4926      	ldr	r1, [pc, #152]	; (ccf0 <LORAREG_InitGetAttrFnPtrsEU+0x13c>)
    cc58:	320c      	adds	r2, #12
    cc5a:	5099      	str	r1, [r3, r2]
    pGetAttr[REG_DEF_TX_POWER] = LORAREG_GetAttr_RegDefTxPwr;
    cc5c:	4925      	ldr	r1, [pc, #148]	; (ccf4 <LORAREG_InitGetAttrFnPtrsEU+0x140>)
    cc5e:	3208      	adds	r2, #8
    cc60:	5099      	str	r1, [r3, r2]
    pGetAttr[REG_DEF_TX_DATARATE] = LORAREG_GetAttr_RegDefTxDR;
    cc62:	4925      	ldr	r1, [pc, #148]	; (ccf8 <LORAREG_InitGetAttrFnPtrsEU+0x144>)
    cc64:	3204      	adds	r2, #4
    cc66:	5099      	str	r1, [r3, r2]
}
    cc68:	4770      	bx	lr
    cc6a:	46c0      	nop			; (mov r8, r8)
    cc6c:	20000c7c 	.word	0x20000c7c
    cc70:	0000ab65 	.word	0x0000ab65
    cc74:	0000c2f9 	.word	0x0000c2f9
    cc78:	0000c339 	.word	0x0000c339
    cc7c:	0000c375 	.word	0x0000c375
    cc80:	0000975d 	.word	0x0000975d
    cc84:	0000976d 	.word	0x0000976d
    cc88:	00009789 	.word	0x00009789
    cc8c:	00009799 	.word	0x00009799
    cc90:	0000a809 	.word	0x0000a809
    cc94:	000097a9 	.word	0x000097a9
    cc98:	000097b9 	.word	0x000097b9
    cc9c:	0000aa69 	.word	0x0000aa69
    cca0:	00009ac9 	.word	0x00009ac9
    cca4:	00009809 	.word	0x00009809
    cca8:	0000a9fd 	.word	0x0000a9fd
    ccac:	0000a591 	.word	0x0000a591
    ccb0:	00009a81 	.word	0x00009a81
    ccb4:	0000c3ad 	.word	0x0000c3ad
    ccb8:	0000c3e5 	.word	0x0000c3e5
    ccbc:	0000c41d 	.word	0x0000c41d
    ccc0:	0000a869 	.word	0x0000a869
    ccc4:	00009869 	.word	0x00009869
    ccc8:	00009873 	.word	0x00009873
    cccc:	0000987d 	.word	0x0000987d
    ccd0:	00009889 	.word	0x00009889
    ccd4:	00009895 	.word	0x00009895
    ccd8:	0000989f 	.word	0x0000989f
    ccdc:	000098a7 	.word	0x000098a7
    cce0:	000098af 	.word	0x000098af
    cce4:	0000c48d 	.word	0x0000c48d
    cce8:	0000b3f9 	.word	0x0000b3f9
    ccec:	000098d9 	.word	0x000098d9
    ccf0:	0000a821 	.word	0x0000a821
    ccf4:	000098b9 	.word	0x000098b9
    ccf8:	000098c9 	.word	0x000098c9

0000ccfc <LORAREG_InitGetAttrFnPtrsAS>:
    pGetAttr[FREQUENCY] = LORAREG_GetAttr_FreqT3;
    ccfc:	4b2d      	ldr	r3, [pc, #180]	; (cdb4 <LORAREG_InitGetAttrFnPtrsAS+0xb8>)
    ccfe:	4a2e      	ldr	r2, [pc, #184]	; (cdb8 <LORAREG_InitGetAttrFnPtrsAS+0xbc>)
    cd00:	601a      	str	r2, [r3, #0]
    pGetAttr[RX_WINDOW_SIZE] = LORAREG_GetAttr_RxWindowSizeT2;
    cd02:	4a2e      	ldr	r2, [pc, #184]	; (cdbc <LORAREG_InitGetAttrFnPtrsAS+0xc0>)
    cd04:	60da      	str	r2, [r3, #12]
    pGetAttr[RX_WINDOW_OFFSET] = LORAREG_GetAttr_RxWindowOffsetT2;
    cd06:	4a2e      	ldr	r2, [pc, #184]	; (cdc0 <LORAREG_InitGetAttrFnPtrsAS+0xc4>)
    cd08:	611a      	str	r2, [r3, #16]
    pGetAttr[MAX_PAYLOAD_SIZE] = LORAREG_GetAttr_MaxPayloadT3;
    cd0a:	4a2e      	ldr	r2, [pc, #184]	; (cdc4 <LORAREG_InitGetAttrFnPtrsAS+0xc8>)
    cd0c:	615a      	str	r2, [r3, #20]
    pGetAttr[MAX_CHANNELS] = LORAREG_GetAttr_MaxChannel;
    cd0e:	4a2e      	ldr	r2, [pc, #184]	; (cdc8 <LORAREG_InitGetAttrFnPtrsAS+0xcc>)
    cd10:	619a      	str	r2, [r3, #24]
    pGetAttr[MIN_NEW_CH_INDEX] = LORAREG_GetAttr_MinNewChIndex;
    cd12:	4a2e      	ldr	r2, [pc, #184]	; (cdcc <LORAREG_InitGetAttrFnPtrsAS+0xd0>)
    cd14:	61da      	str	r2, [r3, #28]
    pGetAttr[DEFAULT_RX1_DATA_RATE] = LORAREG_GetAttr_DefRx1DataRate;
    cd16:	4a2e      	ldr	r2, [pc, #184]	; (cdd0 <LORAREG_InitGetAttrFnPtrsAS+0xd4>)
    cd18:	621a      	str	r2, [r3, #32]
    pGetAttr[DEFAULT_RX2_DATA_RATE] = LORAREG_GetAttr_DefRx2DataRate;
    cd1a:	4a2e      	ldr	r2, [pc, #184]	; (cdd4 <LORAREG_InitGetAttrFnPtrsAS+0xd8>)
    cd1c:	625a      	str	r2, [r3, #36]	; 0x24
    pGetAttr[DEFAULT_RX2_FREQUENCY] = LORAREG_GetAttr_DefRx2Freq;
    cd1e:	4a2e      	ldr	r2, [pc, #184]	; (cdd8 <LORAREG_InitGetAttrFnPtrsAS+0xdc>)
    cd20:	629a      	str	r2, [r3, #40]	; 0x28
    pGetAttr[SUPPORTED_REGIONAL_FEATURES] = LORAREG_GetAttr_RegFeatures;
    cd22:	4a2e      	ldr	r2, [pc, #184]	; (cddc <LORAREG_InitGetAttrFnPtrsAS+0xe0>)
    cd24:	639a      	str	r2, [r3, #56]	; 0x38
    pGetAttr[DATA_RANGE] = LORAREG_GetAttr_DataRange;
    cd26:	4a2e      	ldr	r2, [pc, #184]	; (cde0 <LORAREG_InitGetAttrFnPtrsAS+0xe4>)
    cd28:	649a      	str	r2, [r3, #72]	; 0x48
    pGetAttr[DATA_RANGE_CH_BAND] = LORAREG_GetAttr_DRangeChBandT2;
    cd2a:	4a2e      	ldr	r2, [pc, #184]	; (cde4 <LORAREG_InitGetAttrFnPtrsAS+0xe8>)
    cd2c:	64da      	str	r2, [r3, #76]	; 0x4c
    pGetAttr[MIN_MAX_DR] = LORAREG_GetAttr_MinMaxDr;
    cd2e:	4a2e      	ldr	r2, [pc, #184]	; (cde8 <LORAREG_InitGetAttrFnPtrsAS+0xec>)
    cd30:	651a      	str	r2, [r3, #80]	; 0x50
    pGetAttr[CHANNEL_ID_STATUS] = LORAREG_GetAttr_ChIdStatus;
    cd32:	4a2e      	ldr	r2, [pc, #184]	; (cdec <LORAREG_InitGetAttrFnPtrsAS+0xf0>)
    cd34:	659a      	str	r2, [r3, #88]	; 0x58
    pGetAttr[RX1_WINDOW_PARAMS] = LORAREG_GetAttr_Rx1WindowparamsType4;
    cd36:	4a2e      	ldr	r2, [pc, #184]	; (cdf0 <LORAREG_InitGetAttrFnPtrsAS+0xf4>)
    cd38:	665a      	str	r2, [r3, #100]	; 0x64
	pGetAttr[JOIN_DUTY_CYCLE_TIMER]= LORAREG_GetAttr_JoinDutyCycleRemainingTime;
    cd3a:	492e      	ldr	r1, [pc, #184]	; (cdf4 <LORAREG_InitGetAttrFnPtrsAS+0xf8>)
    cd3c:	2280      	movs	r2, #128	; 0x80
    cd3e:	5099      	str	r1, [r3, r2]
    pGetAttr[MODULATION_ATTR] = LORAREG_GetAttr_ModulationAttrT2;
    cd40:	492d      	ldr	r1, [pc, #180]	; (cdf8 <LORAREG_InitGetAttrFnPtrsAS+0xfc>)
    cd42:	320c      	adds	r2, #12
    cd44:	5099      	str	r1, [r3, r2]
    pGetAttr[BANDWIDTH_ATTR] = LORAREG_GetAttr_BandwidthAttrT2;
    cd46:	492d      	ldr	r1, [pc, #180]	; (cdfc <LORAREG_InitGetAttrFnPtrsAS+0x100>)
    cd48:	3204      	adds	r2, #4
    cd4a:	5099      	str	r1, [r3, r2]
    pGetAttr[SPREADING_FACTOR_ATTR] = LORAREG_GetAttr_SpreadFactorT2;
    cd4c:	492c      	ldr	r1, [pc, #176]	; (ce00 <LORAREG_InitGetAttrFnPtrsAS+0x104>)
    cd4e:	3204      	adds	r2, #4
    cd50:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_RECEIVE_DELAY1] = LORAREG_GetAttr_MacRecvDelay1;
    cd52:	492c      	ldr	r1, [pc, #176]	; (ce04 <LORAREG_InitGetAttrFnPtrsAS+0x108>)
    cd54:	3208      	adds	r2, #8
    cd56:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_RECEIVE_DELAY2] = LORAREG_GetAttr_MacRecvDelay2;
    cd58:	492b      	ldr	r1, [pc, #172]	; (ce08 <LORAREG_InitGetAttrFnPtrsAS+0x10c>)
    cd5a:	3204      	adds	r2, #4
    cd5c:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_JOIN_ACCEPT_DELAY1] = LORAREG_GetAttr_MacJoinAcptDelay1;
    cd5e:	492b      	ldr	r1, [pc, #172]	; (ce0c <LORAREG_InitGetAttrFnPtrsAS+0x110>)
    cd60:	3204      	adds	r2, #4
    cd62:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_JOIN_ACCEPT_DELAY2] = LORAREG_GetAttr_MacJoinAcptDelay2;
    cd64:	492a      	ldr	r1, [pc, #168]	; (ce10 <LORAREG_InitGetAttrFnPtrsAS+0x114>)
    cd66:	3204      	adds	r2, #4
    cd68:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_ACK_TIMEOUT] = LORAREG_GetAttr_MacAckTimeout;
    cd6a:	492a      	ldr	r1, [pc, #168]	; (ce14 <LORAREG_InitGetAttrFnPtrsAS+0x118>)
    cd6c:	3204      	adds	r2, #4
    cd6e:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_ADR_ACK_DELAY] = LORAREG_GetAttr_MacAdrAckDelay;
    cd70:	4929      	ldr	r1, [pc, #164]	; (ce18 <LORAREG_InitGetAttrFnPtrsAS+0x11c>)
    cd72:	3204      	adds	r2, #4
    cd74:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_ADR_ACK_LIMIT] = LORAREG_GetAttr_MacAdrAckLimit;
    cd76:	4929      	ldr	r1, [pc, #164]	; (ce1c <LORAREG_InitGetAttrFnPtrsAS+0x120>)
    cd78:	3204      	adds	r2, #4
    cd7a:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_MAX_FCNT_GAP] = LORAREG_GetAttr_MacMaxFcntGap;
    cd7c:	4928      	ldr	r1, [pc, #160]	; (ce20 <LORAREG_InitGetAttrFnPtrsAS+0x124>)
    cd7e:	3204      	adds	r2, #4
    cd80:	5099      	str	r1, [r3, r2]
    pGetAttr[NEW_TX_CHANNEL_CONFIG] = LORAREG_GetAttr_NewTxChConfigT2;
    cd82:	4928      	ldr	r1, [pc, #160]	; (ce24 <LORAREG_InitGetAttrFnPtrsAS+0x128>)
    cd84:	3204      	adds	r2, #4
    cd86:	5099      	str	r1, [r3, r2]
    pGetAttr[FREE_CHANNEL] = LORAREG_GetAttr_FreeChannel2;
    cd88:	4927      	ldr	r1, [pc, #156]	; (ce28 <LORAREG_InitGetAttrFnPtrsAS+0x12c>)
    cd8a:	3204      	adds	r2, #4
    cd8c:	5099      	str	r1, [r3, r2]
    pGetAttr[CURRENT_CHANNEL_INDEX] = LORAREG_GetAttr_CurChIndx;
    cd8e:	4927      	ldr	r1, [pc, #156]	; (ce2c <LORAREG_InitGetAttrFnPtrsAS+0x130>)
    cd90:	3204      	adds	r2, #4
    cd92:	5099      	str	r1, [r3, r2]
    pGetAttr[DL_FREQUENCY] = LORAREG_GetAttr_DlFrequency;
    cd94:	4926      	ldr	r1, [pc, #152]	; (ce30 <LORAREG_InitGetAttrFnPtrsAS+0x134>)
    cd96:	320c      	adds	r2, #12
    cd98:	5099      	str	r1, [r3, r2]
    pGetAttr[REG_DEF_TX_POWER] = LORAREG_GetAttr_RegDefTxPwr;
    cd9a:	4926      	ldr	r1, [pc, #152]	; (ce34 <LORAREG_InitGetAttrFnPtrsAS+0x138>)
    cd9c:	3208      	adds	r2, #8
    cd9e:	5099      	str	r1, [r3, r2]
    pGetAttr[REG_DEF_TX_DATARATE] = LORAREG_GetAttr_RegDefTxDR;
    cda0:	4925      	ldr	r1, [pc, #148]	; (ce38 <LORAREG_InitGetAttrFnPtrsAS+0x13c>)
    cda2:	3204      	adds	r2, #4
    cda4:	5099      	str	r1, [r3, r2]
    pGetAttr[DUTY_CYCLE] = LORAREG_GetAttr_DutyCycleT2;
    cda6:	4a25      	ldr	r2, [pc, #148]	; (ce3c <LORAREG_InitGetAttrFnPtrsAS+0x140>)
    cda8:	679a      	str	r2, [r3, #120]	; 0x78
    pGetAttr[MIN_DUTY_CYCLE_TIMER] = LORAREG_GetAttr_DutyCycleTimer;
    cdaa:	4925      	ldr	r1, [pc, #148]	; (ce40 <LORAREG_InitGetAttrFnPtrsAS+0x144>)
    cdac:	2298      	movs	r2, #152	; 0x98
    cdae:	5099      	str	r1, [r3, r2]
}
    cdb0:	4770      	bx	lr
    cdb2:	46c0      	nop			; (mov r8, r8)
    cdb4:	20000c7c 	.word	0x20000c7c
    cdb8:	0000aca1 	.word	0x0000aca1
    cdbc:	0000c2f9 	.word	0x0000c2f9
    cdc0:	0000c339 	.word	0x0000c339
    cdc4:	0000c295 	.word	0x0000c295
    cdc8:	0000975d 	.word	0x0000975d
    cdcc:	0000976d 	.word	0x0000976d
    cdd0:	00009789 	.word	0x00009789
    cdd4:	00009799 	.word	0x00009799
    cdd8:	0000a809 	.word	0x0000a809
    cddc:	000097a9 	.word	0x000097a9
    cde0:	000097b9 	.word	0x000097b9
    cde4:	0000aa69 	.word	0x0000aa69
    cde8:	00009ac9 	.word	0x00009ac9
    cdec:	00009809 	.word	0x00009809
    cdf0:	0000abad 	.word	0x0000abad
    cdf4:	0000a591 	.word	0x0000a591
    cdf8:	0000c3ad 	.word	0x0000c3ad
    cdfc:	0000c3e5 	.word	0x0000c3e5
    ce00:	0000c41d 	.word	0x0000c41d
    ce04:	00009869 	.word	0x00009869
    ce08:	00009873 	.word	0x00009873
    ce0c:	0000987d 	.word	0x0000987d
    ce10:	00009889 	.word	0x00009889
    ce14:	00009895 	.word	0x00009895
    ce18:	0000989f 	.word	0x0000989f
    ce1c:	000098a7 	.word	0x000098a7
    ce20:	000098af 	.word	0x000098af
    ce24:	0000c48d 	.word	0x0000c48d
    ce28:	0000b3f9 	.word	0x0000b3f9
    ce2c:	000098d9 	.word	0x000098d9
    ce30:	0000a821 	.word	0x0000a821
    ce34:	000098b9 	.word	0x000098b9
    ce38:	000098c9 	.word	0x000098c9
    ce3c:	00009a81 	.word	0x00009a81
    ce40:	0000a869 	.word	0x0000a869

0000ce44 <LORAREG_InitGetAttrFnPtrsAU>:
    pGetAttr[FREQUENCY] = LORAREG_GetAttr_FreqT1;
    ce44:	4b2b      	ldr	r3, [pc, #172]	; (cef4 <LORAREG_InitGetAttrFnPtrsAU+0xb0>)
    ce46:	4a2c      	ldr	r2, [pc, #176]	; (cef8 <LORAREG_InitGetAttrFnPtrsAU+0xb4>)
    ce48:	601a      	str	r2, [r3, #0]
    pGetAttr[RX_WINDOW_SIZE] = LORAREG_GetAttr_RxWindowSizeT1;
    ce4a:	4a2c      	ldr	r2, [pc, #176]	; (cefc <LORAREG_InitGetAttrFnPtrsAU+0xb8>)
    ce4c:	60da      	str	r2, [r3, #12]
    pGetAttr[RX_WINDOW_OFFSET] = LORAREG_GetAttr_RxWindowOffsetT1;
    ce4e:	4a2c      	ldr	r2, [pc, #176]	; (cf00 <LORAREG_InitGetAttrFnPtrsAU+0xbc>)
    ce50:	611a      	str	r2, [r3, #16]
    pGetAttr[MAX_PAYLOAD_SIZE] = LORAREG_GetAttr_MaxPayloadT1;
    ce52:	4a2c      	ldr	r2, [pc, #176]	; (cf04 <LORAREG_InitGetAttrFnPtrsAU+0xc0>)
    ce54:	615a      	str	r2, [r3, #20]
    pGetAttr[MAX_CHANNELS] = LORAREG_GetAttr_MaxChannel;
    ce56:	4a2c      	ldr	r2, [pc, #176]	; (cf08 <LORAREG_InitGetAttrFnPtrsAU+0xc4>)
    ce58:	619a      	str	r2, [r3, #24]
    pGetAttr[MIN_NEW_CH_INDEX] = LORAREG_GetAttr_MinNewChIndex;
    ce5a:	4a2c      	ldr	r2, [pc, #176]	; (cf0c <LORAREG_InitGetAttrFnPtrsAU+0xc8>)
    ce5c:	61da      	str	r2, [r3, #28]
    pGetAttr[DEFAULT_RX1_DATA_RATE] = LORAREG_GetAttr_DefRx1DataRate;
    ce5e:	4a2c      	ldr	r2, [pc, #176]	; (cf10 <LORAREG_InitGetAttrFnPtrsAU+0xcc>)
    ce60:	621a      	str	r2, [r3, #32]
    pGetAttr[DEFAULT_RX2_DATA_RATE] = LORAREG_GetAttr_DefRx2DataRate;
    ce62:	4a2c      	ldr	r2, [pc, #176]	; (cf14 <LORAREG_InitGetAttrFnPtrsAU+0xd0>)
    ce64:	625a      	str	r2, [r3, #36]	; 0x24
    pGetAttr[DEFAULT_RX2_FREQUENCY] = LORAREG_GetAttr_DefRx2Freq;
    ce66:	4a2c      	ldr	r2, [pc, #176]	; (cf18 <LORAREG_InitGetAttrFnPtrsAU+0xd4>)
    ce68:	629a      	str	r2, [r3, #40]	; 0x28
    pGetAttr[SUPPORTED_REGIONAL_FEATURES] = LORAREG_GetAttr_RegFeatures;
    ce6a:	4a2c      	ldr	r2, [pc, #176]	; (cf1c <LORAREG_InitGetAttrFnPtrsAU+0xd8>)
    ce6c:	639a      	str	r2, [r3, #56]	; 0x38
    pGetAttr[DATA_RANGE] = LORAREG_GetAttr_DataRange;
    ce6e:	4a2c      	ldr	r2, [pc, #176]	; (cf20 <LORAREG_InitGetAttrFnPtrsAU+0xdc>)
    ce70:	649a      	str	r2, [r3, #72]	; 0x48
    pGetAttr[DATA_RANGE_CH_BAND] = LORAREG_GetAttr_DRangeChBandT1;
    ce72:	4a2c      	ldr	r2, [pc, #176]	; (cf24 <LORAREG_InitGetAttrFnPtrsAU+0xe0>)
    ce74:	64da      	str	r2, [r3, #76]	; 0x4c
    pGetAttr[MIN_MAX_DR] = LORAREG_GetAttr_MinMaxDr;
    ce76:	4a2c      	ldr	r2, [pc, #176]	; (cf28 <LORAREG_InitGetAttrFnPtrsAU+0xe4>)
    ce78:	651a      	str	r2, [r3, #80]	; 0x50
    pGetAttr[CHANNEL_ID_STATUS] = LORAREG_GetAttr_ChIdStatus;
    ce7a:	4a2c      	ldr	r2, [pc, #176]	; (cf2c <LORAREG_InitGetAttrFnPtrsAU+0xe8>)
    ce7c:	659a      	str	r2, [r3, #88]	; 0x58
    pGetAttr[RX1_WINDOW_PARAMS] = LORAREG_GetAttr_Rx1WindowparamsType1;
    ce7e:	4a2c      	ldr	r2, [pc, #176]	; (cf30 <LORAREG_InitGetAttrFnPtrsAU+0xec>)
    ce80:	665a      	str	r2, [r3, #100]	; 0x64
	pGetAttr[JOIN_DUTY_CYCLE_TIMER]= LORAREG_GetAttr_JoinDutyCycleRemainingTime;
    ce82:	492c      	ldr	r1, [pc, #176]	; (cf34 <LORAREG_InitGetAttrFnPtrsAU+0xf0>)
    ce84:	2280      	movs	r2, #128	; 0x80
    ce86:	5099      	str	r1, [r3, r2]
    pGetAttr[DUTY_CYCLE] = LORAREG_GetAttr_DutyCycleT1;
    ce88:	4a2b      	ldr	r2, [pc, #172]	; (cf38 <LORAREG_InitGetAttrFnPtrsAU+0xf4>)
    ce8a:	679a      	str	r2, [r3, #120]	; 0x78
    pGetAttr[DUTY_CYCLE_TIMER] = LORAREG_GetAttr_MinDutyCycleTimer;	
    ce8c:	4a2b      	ldr	r2, [pc, #172]	; (cf3c <LORAREG_InitGetAttrFnPtrsAU+0xf8>)
    ce8e:	67da      	str	r2, [r3, #124]	; 0x7c
    pGetAttr[MODULATION_ATTR] = LORAREG_GetAttr_ModulationAttrT1;
    ce90:	492b      	ldr	r1, [pc, #172]	; (cf40 <LORAREG_InitGetAttrFnPtrsAU+0xfc>)
    ce92:	228c      	movs	r2, #140	; 0x8c
    ce94:	5099      	str	r1, [r3, r2]
    pGetAttr[BANDWIDTH_ATTR] = LORAREG_GetAttr_BandwidthAttrT1;
    ce96:	492b      	ldr	r1, [pc, #172]	; (cf44 <LORAREG_InitGetAttrFnPtrsAU+0x100>)
    ce98:	3204      	adds	r2, #4
    ce9a:	5099      	str	r1, [r3, r2]
    pGetAttr[SPREADING_FACTOR_ATTR] = LORAREG_GetAttr_SpreadFactorT1;
    ce9c:	492a      	ldr	r1, [pc, #168]	; (cf48 <LORAREG_InitGetAttrFnPtrsAU+0x104>)
    ce9e:	3204      	adds	r2, #4
    cea0:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_RECEIVE_DELAY1] = LORAREG_GetAttr_MacRecvDelay1;
    cea2:	492a      	ldr	r1, [pc, #168]	; (cf4c <LORAREG_InitGetAttrFnPtrsAU+0x108>)
    cea4:	3208      	adds	r2, #8
    cea6:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_RECEIVE_DELAY2] = LORAREG_GetAttr_MacRecvDelay2;
    cea8:	4929      	ldr	r1, [pc, #164]	; (cf50 <LORAREG_InitGetAttrFnPtrsAU+0x10c>)
    ceaa:	3204      	adds	r2, #4
    ceac:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_JOIN_ACCEPT_DELAY1] = LORAREG_GetAttr_MacJoinAcptDelay1;
    ceae:	4929      	ldr	r1, [pc, #164]	; (cf54 <LORAREG_InitGetAttrFnPtrsAU+0x110>)
    ceb0:	3204      	adds	r2, #4
    ceb2:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_JOIN_ACCEPT_DELAY2] = LORAREG_GetAttr_MacJoinAcptDelay2;
    ceb4:	4928      	ldr	r1, [pc, #160]	; (cf58 <LORAREG_InitGetAttrFnPtrsAU+0x114>)
    ceb6:	3204      	adds	r2, #4
    ceb8:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_ACK_TIMEOUT] = LORAREG_GetAttr_MacAckTimeout;
    ceba:	4928      	ldr	r1, [pc, #160]	; (cf5c <LORAREG_InitGetAttrFnPtrsAU+0x118>)
    cebc:	3204      	adds	r2, #4
    cebe:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_ADR_ACK_DELAY] = LORAREG_GetAttr_MacAdrAckDelay;
    cec0:	4927      	ldr	r1, [pc, #156]	; (cf60 <LORAREG_InitGetAttrFnPtrsAU+0x11c>)
    cec2:	3204      	adds	r2, #4
    cec4:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_ADR_ACK_LIMIT] = LORAREG_GetAttr_MacAdrAckLimit;
    cec6:	4927      	ldr	r1, [pc, #156]	; (cf64 <LORAREG_InitGetAttrFnPtrsAU+0x120>)
    cec8:	3204      	adds	r2, #4
    ceca:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_MAX_FCNT_GAP] = LORAREG_GetAttr_MacMaxFcntGap;
    cecc:	4926      	ldr	r1, [pc, #152]	; (cf68 <LORAREG_InitGetAttrFnPtrsAU+0x124>)
    cece:	3204      	adds	r2, #4
    ced0:	5099      	str	r1, [r3, r2]
    pGetAttr[NEW_TX_CHANNEL_CONFIG] = LORAREG_GetAttr_NewTxChConfigT1;
    ced2:	4926      	ldr	r1, [pc, #152]	; (cf6c <LORAREG_InitGetAttrFnPtrsAU+0x128>)
    ced4:	3204      	adds	r2, #4
    ced6:	5099      	str	r1, [r3, r2]
    pGetAttr[FREE_CHANNEL] = LORAREG_GetAttr_FreeChannel1;
    ced8:	4925      	ldr	r1, [pc, #148]	; (cf70 <LORAREG_InitGetAttrFnPtrsAU+0x12c>)
    ceda:	3204      	adds	r2, #4
    cedc:	5099      	str	r1, [r3, r2]
    pGetAttr[CURRENT_CHANNEL_INDEX] = LORAREG_GetAttr_CurChIndx;
    cede:	4925      	ldr	r1, [pc, #148]	; (cf74 <LORAREG_InitGetAttrFnPtrsAU+0x130>)
    cee0:	3204      	adds	r2, #4
    cee2:	5099      	str	r1, [r3, r2]
    pGetAttr[REG_DEF_TX_POWER] = LORAREG_GetAttr_RegDefTxPwr;
    cee4:	4924      	ldr	r1, [pc, #144]	; (cf78 <LORAREG_InitGetAttrFnPtrsAU+0x134>)
    cee6:	3214      	adds	r2, #20
    cee8:	5099      	str	r1, [r3, r2]
    pGetAttr[REG_DEF_TX_DATARATE] = LORAREG_GetAttr_RegDefTxDR;
    ceea:	4924      	ldr	r1, [pc, #144]	; (cf7c <LORAREG_InitGetAttrFnPtrsAU+0x138>)
    ceec:	3204      	adds	r2, #4
    ceee:	5099      	str	r1, [r3, r2]
}
    cef0:	4770      	bx	lr
    cef2:	46c0      	nop			; (mov r8, r8)
    cef4:	20000c7c 	.word	0x20000c7c
    cef8:	00009915 	.word	0x00009915
    cefc:	0000c659 	.word	0x0000c659
    cf00:	0000c6a9 	.word	0x0000c6a9
    cf04:	0000c6f5 	.word	0x0000c6f5
    cf08:	0000975d 	.word	0x0000975d
    cf0c:	0000976d 	.word	0x0000976d
    cf10:	00009789 	.word	0x00009789
    cf14:	00009799 	.word	0x00009799
    cf18:	0000a809 	.word	0x0000a809
    cf1c:	000097a9 	.word	0x000097a9
    cf20:	000097b9 	.word	0x000097b9
    cf24:	0000a6dd 	.word	0x0000a6dd
    cf28:	00009ac9 	.word	0x00009ac9
    cf2c:	00009809 	.word	0x00009809
    cf30:	0000a631 	.word	0x0000a631
    cf34:	0000a591 	.word	0x0000a591
    cf38:	00009855 	.word	0x00009855
    cf3c:	0000985f 	.word	0x0000985f
    cf40:	0000c741 	.word	0x0000c741
    cf44:	0000c78d 	.word	0x0000c78d
    cf48:	0000c7d9 	.word	0x0000c7d9
    cf4c:	00009869 	.word	0x00009869
    cf50:	00009873 	.word	0x00009873
    cf54:	0000987d 	.word	0x0000987d
    cf58:	00009889 	.word	0x00009889
    cf5c:	00009895 	.word	0x00009895
    cf60:	0000989f 	.word	0x0000989f
    cf64:	000098a7 	.word	0x000098a7
    cf68:	000098af 	.word	0x000098af
    cf6c:	0000c8c1 	.word	0x0000c8c1
    cf70:	0000a0ed 	.word	0x0000a0ed
    cf74:	000098d9 	.word	0x000098d9
    cf78:	000098b9 	.word	0x000098b9
    cf7c:	000098c9 	.word	0x000098c9

0000cf80 <LORAREG_InitGetAttrFnPtrsIN>:
    pGetAttr[FREQUENCY] = LORAREG_GetAttr_FreqT2;
    cf80:	4b2a      	ldr	r3, [pc, #168]	; (d02c <LORAREG_InitGetAttrFnPtrsIN+0xac>)
    cf82:	4a2b      	ldr	r2, [pc, #172]	; (d030 <LORAREG_InitGetAttrFnPtrsIN+0xb0>)
    cf84:	601a      	str	r2, [r3, #0]
    pGetAttr[RX_WINDOW_SIZE] = LORAREG_GetAttr_RxWindowSizeT2;
    cf86:	4a2b      	ldr	r2, [pc, #172]	; (d034 <LORAREG_InitGetAttrFnPtrsIN+0xb4>)
    cf88:	60da      	str	r2, [r3, #12]
    pGetAttr[RX_WINDOW_OFFSET] = LORAREG_GetAttr_RxWindowOffsetT2;
    cf8a:	4a2b      	ldr	r2, [pc, #172]	; (d038 <LORAREG_InitGetAttrFnPtrsIN+0xb8>)
    cf8c:	611a      	str	r2, [r3, #16]
    pGetAttr[MAX_PAYLOAD_SIZE] = LORAREG_GetAttr_MaxPayloadT2;
    cf8e:	4a2b      	ldr	r2, [pc, #172]	; (d03c <LORAREG_InitGetAttrFnPtrsIN+0xbc>)
    cf90:	615a      	str	r2, [r3, #20]
    pGetAttr[MAX_CHANNELS] = LORAREG_GetAttr_MaxChannel;
    cf92:	4a2b      	ldr	r2, [pc, #172]	; (d040 <LORAREG_InitGetAttrFnPtrsIN+0xc0>)
    cf94:	619a      	str	r2, [r3, #24]
    pGetAttr[MIN_NEW_CH_INDEX] = LORAREG_GetAttr_MinNewChIndex;
    cf96:	4a2b      	ldr	r2, [pc, #172]	; (d044 <LORAREG_InitGetAttrFnPtrsIN+0xc4>)
    cf98:	61da      	str	r2, [r3, #28]
    pGetAttr[DEFAULT_RX1_DATA_RATE] = LORAREG_GetAttr_DefRx1DataRate;
    cf9a:	4a2b      	ldr	r2, [pc, #172]	; (d048 <LORAREG_InitGetAttrFnPtrsIN+0xc8>)
    cf9c:	621a      	str	r2, [r3, #32]
    pGetAttr[DEFAULT_RX2_DATA_RATE] = LORAREG_GetAttr_DefRx2DataRate;
    cf9e:	4a2b      	ldr	r2, [pc, #172]	; (d04c <LORAREG_InitGetAttrFnPtrsIN+0xcc>)
    cfa0:	625a      	str	r2, [r3, #36]	; 0x24
    pGetAttr[DEFAULT_RX2_FREQUENCY] = LORAREG_GetAttr_DefRx2Freq;
    cfa2:	4a2b      	ldr	r2, [pc, #172]	; (d050 <LORAREG_InitGetAttrFnPtrsIN+0xd0>)
    cfa4:	629a      	str	r2, [r3, #40]	; 0x28
    pGetAttr[SUPPORTED_REGIONAL_FEATURES] = LORAREG_GetAttr_RegFeatures;
    cfa6:	4a2b      	ldr	r2, [pc, #172]	; (d054 <LORAREG_InitGetAttrFnPtrsIN+0xd4>)
    cfa8:	639a      	str	r2, [r3, #56]	; 0x38
    pGetAttr[DATA_RANGE] = LORAREG_GetAttr_DataRange;
    cfaa:	4a2b      	ldr	r2, [pc, #172]	; (d058 <LORAREG_InitGetAttrFnPtrsIN+0xd8>)
    cfac:	649a      	str	r2, [r3, #72]	; 0x48
    pGetAttr[DATA_RANGE_CH_BAND] = LORAREG_GetAttr_DRangeChBandT2;
    cfae:	4a2b      	ldr	r2, [pc, #172]	; (d05c <LORAREG_InitGetAttrFnPtrsIN+0xdc>)
    cfb0:	64da      	str	r2, [r3, #76]	; 0x4c
    pGetAttr[MIN_MAX_DR] = LORAREG_GetAttr_MinMaxDr;
    cfb2:	4a2b      	ldr	r2, [pc, #172]	; (d060 <LORAREG_InitGetAttrFnPtrsIN+0xe0>)
    cfb4:	651a      	str	r2, [r3, #80]	; 0x50
    pGetAttr[CHANNEL_ID_STATUS] = LORAREG_GetAttr_ChIdStatus;
    cfb6:	4a2b      	ldr	r2, [pc, #172]	; (d064 <LORAREG_InitGetAttrFnPtrsIN+0xe4>)
    cfb8:	659a      	str	r2, [r3, #88]	; 0x58
    pGetAttr[RX1_WINDOW_PARAMS] = LORAREG_GetAttr_Rx1WindowparamsType3;
    cfba:	4a2b      	ldr	r2, [pc, #172]	; (d068 <LORAREG_InitGetAttrFnPtrsIN+0xe8>)
    cfbc:	665a      	str	r2, [r3, #100]	; 0x64
	pGetAttr[JOIN_DUTY_CYCLE_TIMER]= LORAREG_GetAttr_JoinDutyCycleRemainingTime;
    cfbe:	492b      	ldr	r1, [pc, #172]	; (d06c <LORAREG_InitGetAttrFnPtrsIN+0xec>)
    cfc0:	2280      	movs	r2, #128	; 0x80
    cfc2:	5099      	str	r1, [r3, r2]
    pGetAttr[MODULATION_ATTR] = LORAREG_GetAttr_ModulationAttrT2;
    cfc4:	492a      	ldr	r1, [pc, #168]	; (d070 <LORAREG_InitGetAttrFnPtrsIN+0xf0>)
    cfc6:	320c      	adds	r2, #12
    cfc8:	5099      	str	r1, [r3, r2]
    pGetAttr[BANDWIDTH_ATTR] = LORAREG_GetAttr_BandwidthAttrT2;
    cfca:	492a      	ldr	r1, [pc, #168]	; (d074 <LORAREG_InitGetAttrFnPtrsIN+0xf4>)
    cfcc:	3204      	adds	r2, #4
    cfce:	5099      	str	r1, [r3, r2]
    pGetAttr[SPREADING_FACTOR_ATTR] = LORAREG_GetAttr_SpreadFactorT2;
    cfd0:	4929      	ldr	r1, [pc, #164]	; (d078 <LORAREG_InitGetAttrFnPtrsIN+0xf8>)
    cfd2:	3204      	adds	r2, #4
    cfd4:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_RECEIVE_DELAY1] = LORAREG_GetAttr_MacRecvDelay1;
    cfd6:	4929      	ldr	r1, [pc, #164]	; (d07c <LORAREG_InitGetAttrFnPtrsIN+0xfc>)
    cfd8:	3208      	adds	r2, #8
    cfda:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_RECEIVE_DELAY2] = LORAREG_GetAttr_MacRecvDelay2;
    cfdc:	4928      	ldr	r1, [pc, #160]	; (d080 <LORAREG_InitGetAttrFnPtrsIN+0x100>)
    cfde:	3204      	adds	r2, #4
    cfe0:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_JOIN_ACCEPT_DELAY1] = LORAREG_GetAttr_MacJoinAcptDelay1;
    cfe2:	4928      	ldr	r1, [pc, #160]	; (d084 <LORAREG_InitGetAttrFnPtrsIN+0x104>)
    cfe4:	3204      	adds	r2, #4
    cfe6:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_JOIN_ACCEPT_DELAY2] = LORAREG_GetAttr_MacJoinAcptDelay2;
    cfe8:	4927      	ldr	r1, [pc, #156]	; (d088 <LORAREG_InitGetAttrFnPtrsIN+0x108>)
    cfea:	3204      	adds	r2, #4
    cfec:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_ACK_TIMEOUT] = LORAREG_GetAttr_MacAckTimeout;
    cfee:	4927      	ldr	r1, [pc, #156]	; (d08c <LORAREG_InitGetAttrFnPtrsIN+0x10c>)
    cff0:	3204      	adds	r2, #4
    cff2:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_ADR_ACK_DELAY] = LORAREG_GetAttr_MacAdrAckDelay;
    cff4:	4926      	ldr	r1, [pc, #152]	; (d090 <LORAREG_InitGetAttrFnPtrsIN+0x110>)
    cff6:	3204      	adds	r2, #4
    cff8:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_ADR_ACK_LIMIT] = LORAREG_GetAttr_MacAdrAckLimit;
    cffa:	4926      	ldr	r1, [pc, #152]	; (d094 <LORAREG_InitGetAttrFnPtrsIN+0x114>)
    cffc:	3204      	adds	r2, #4
    cffe:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_MAX_FCNT_GAP] = LORAREG_GetAttr_MacMaxFcntGap;
    d000:	4925      	ldr	r1, [pc, #148]	; (d098 <LORAREG_InitGetAttrFnPtrsIN+0x118>)
    d002:	3204      	adds	r2, #4
    d004:	5099      	str	r1, [r3, r2]
    pGetAttr[NEW_TX_CHANNEL_CONFIG] = LORAREG_GetAttr_NewTxChConfigT2;
    d006:	4925      	ldr	r1, [pc, #148]	; (d09c <LORAREG_InitGetAttrFnPtrsIN+0x11c>)
    d008:	3204      	adds	r2, #4
    d00a:	5099      	str	r1, [r3, r2]
    pGetAttr[FREE_CHANNEL] = LORAREG_GetAttr_FreeChannel2;
    d00c:	4924      	ldr	r1, [pc, #144]	; (d0a0 <LORAREG_InitGetAttrFnPtrsIN+0x120>)
    d00e:	3204      	adds	r2, #4
    d010:	5099      	str	r1, [r3, r2]
    pGetAttr[CURRENT_CHANNEL_INDEX] = LORAREG_GetAttr_CurChIndx;
    d012:	4924      	ldr	r1, [pc, #144]	; (d0a4 <LORAREG_InitGetAttrFnPtrsIN+0x124>)
    d014:	3204      	adds	r2, #4
    d016:	5099      	str	r1, [r3, r2]
    pGetAttr[DL_FREQUENCY] = LORAREG_GetAttr_DlFrequency;
    d018:	4923      	ldr	r1, [pc, #140]	; (d0a8 <LORAREG_InitGetAttrFnPtrsIN+0x128>)
    d01a:	320c      	adds	r2, #12
    d01c:	5099      	str	r1, [r3, r2]
    pGetAttr[REG_DEF_TX_POWER] = LORAREG_GetAttr_RegDefTxPwr;
    d01e:	4923      	ldr	r1, [pc, #140]	; (d0ac <LORAREG_InitGetAttrFnPtrsIN+0x12c>)
    d020:	3208      	adds	r2, #8
    d022:	5099      	str	r1, [r3, r2]
    pGetAttr[REG_DEF_TX_DATARATE] = LORAREG_GetAttr_RegDefTxDR;
    d024:	4922      	ldr	r1, [pc, #136]	; (d0b0 <LORAREG_InitGetAttrFnPtrsIN+0x130>)
    d026:	3204      	adds	r2, #4
    d028:	5099      	str	r1, [r3, r2]
}
    d02a:	4770      	bx	lr
    d02c:	20000c7c 	.word	0x20000c7c
    d030:	0000ab65 	.word	0x0000ab65
    d034:	0000c2f9 	.word	0x0000c2f9
    d038:	0000c339 	.word	0x0000c339
    d03c:	0000c375 	.word	0x0000c375
    d040:	0000975d 	.word	0x0000975d
    d044:	0000976d 	.word	0x0000976d
    d048:	00009789 	.word	0x00009789
    d04c:	00009799 	.word	0x00009799
    d050:	0000a809 	.word	0x0000a809
    d054:	000097a9 	.word	0x000097a9
    d058:	000097b9 	.word	0x000097b9
    d05c:	0000aa69 	.word	0x0000aa69
    d060:	00009ac9 	.word	0x00009ac9
    d064:	00009809 	.word	0x00009809
    d068:	0000ace9 	.word	0x0000ace9
    d06c:	0000a591 	.word	0x0000a591
    d070:	0000c3ad 	.word	0x0000c3ad
    d074:	0000c3e5 	.word	0x0000c3e5
    d078:	0000c41d 	.word	0x0000c41d
    d07c:	00009869 	.word	0x00009869
    d080:	00009873 	.word	0x00009873
    d084:	0000987d 	.word	0x0000987d
    d088:	00009889 	.word	0x00009889
    d08c:	00009895 	.word	0x00009895
    d090:	0000989f 	.word	0x0000989f
    d094:	000098a7 	.word	0x000098a7
    d098:	000098af 	.word	0x000098af
    d09c:	0000c48d 	.word	0x0000c48d
    d0a0:	0000b3f9 	.word	0x0000b3f9
    d0a4:	000098d9 	.word	0x000098d9
    d0a8:	0000a821 	.word	0x0000a821
    d0ac:	000098b9 	.word	0x000098b9
    d0b0:	000098c9 	.word	0x000098c9

0000d0b4 <LORAREG_InitGetAttrFnPtrsJP>:
    pGetAttr[FREQUENCY] = LORAREG_GetAttr_FreqT3;
    d0b4:	4b30      	ldr	r3, [pc, #192]	; (d178 <LORAREG_InitGetAttrFnPtrsJP+0xc4>)
    d0b6:	4a31      	ldr	r2, [pc, #196]	; (d17c <LORAREG_InitGetAttrFnPtrsJP+0xc8>)
    d0b8:	601a      	str	r2, [r3, #0]
    pGetAttr[RX_WINDOW_SIZE] = LORAREG_GetAttr_RxWindowSizeT2;
    d0ba:	4a31      	ldr	r2, [pc, #196]	; (d180 <LORAREG_InitGetAttrFnPtrsJP+0xcc>)
    d0bc:	60da      	str	r2, [r3, #12]
    pGetAttr[RX_WINDOW_OFFSET] = LORAREG_GetAttr_RxWindowOffsetT2;
    d0be:	4a31      	ldr	r2, [pc, #196]	; (d184 <LORAREG_InitGetAttrFnPtrsJP+0xd0>)
    d0c0:	611a      	str	r2, [r3, #16]
    pGetAttr[MAX_PAYLOAD_SIZE] = LORAREG_GetAttr_MaxPayloadT3;
    d0c2:	4a31      	ldr	r2, [pc, #196]	; (d188 <LORAREG_InitGetAttrFnPtrsJP+0xd4>)
    d0c4:	615a      	str	r2, [r3, #20]
    pGetAttr[MAX_CHANNELS] = LORAREG_GetAttr_MaxChannel;
    d0c6:	4a31      	ldr	r2, [pc, #196]	; (d18c <LORAREG_InitGetAttrFnPtrsJP+0xd8>)
    d0c8:	619a      	str	r2, [r3, #24]
    pGetAttr[MIN_NEW_CH_INDEX] = LORAREG_GetAttr_MinNewChIndex;
    d0ca:	4a31      	ldr	r2, [pc, #196]	; (d190 <LORAREG_InitGetAttrFnPtrsJP+0xdc>)
    d0cc:	61da      	str	r2, [r3, #28]
    pGetAttr[DEFAULT_RX1_DATA_RATE] = LORAREG_GetAttr_DefRx1DataRate;
    d0ce:	4a31      	ldr	r2, [pc, #196]	; (d194 <LORAREG_InitGetAttrFnPtrsJP+0xe0>)
    d0d0:	621a      	str	r2, [r3, #32]
    pGetAttr[DEFAULT_RX2_DATA_RATE] = LORAREG_GetAttr_DefRx2DataRate;
    d0d2:	4a31      	ldr	r2, [pc, #196]	; (d198 <LORAREG_InitGetAttrFnPtrsJP+0xe4>)
    d0d4:	625a      	str	r2, [r3, #36]	; 0x24
    pGetAttr[DEFAULT_RX2_FREQUENCY] = LORAREG_GetAttr_DefRx2Freq;
    d0d6:	4a31      	ldr	r2, [pc, #196]	; (d19c <LORAREG_InitGetAttrFnPtrsJP+0xe8>)
    d0d8:	629a      	str	r2, [r3, #40]	; 0x28
    pGetAttr[SUPPORTED_REGIONAL_FEATURES] = LORAREG_GetAttr_RegFeatures;
    d0da:	4a31      	ldr	r2, [pc, #196]	; (d1a0 <LORAREG_InitGetAttrFnPtrsJP+0xec>)
    d0dc:	639a      	str	r2, [r3, #56]	; 0x38
    pGetAttr[DATA_RANGE] = LORAREG_GetAttr_DataRange;
    d0de:	4a31      	ldr	r2, [pc, #196]	; (d1a4 <LORAREG_InitGetAttrFnPtrsJP+0xf0>)
    d0e0:	649a      	str	r2, [r3, #72]	; 0x48
    pGetAttr[DATA_RANGE_CH_BAND] = LORAREG_GetAttr_DRangeChBandT2;
    d0e2:	4a31      	ldr	r2, [pc, #196]	; (d1a8 <LORAREG_InitGetAttrFnPtrsJP+0xf4>)
    d0e4:	64da      	str	r2, [r3, #76]	; 0x4c
    pGetAttr[MIN_MAX_DR] = LORAREG_GetAttr_MinMaxDr;
    d0e6:	4a31      	ldr	r2, [pc, #196]	; (d1ac <LORAREG_InitGetAttrFnPtrsJP+0xf8>)
    d0e8:	651a      	str	r2, [r3, #80]	; 0x50
    pGetAttr[CHANNEL_ID_STATUS] = LORAREG_GetAttr_ChIdStatus;
    d0ea:	4a31      	ldr	r2, [pc, #196]	; (d1b0 <LORAREG_InitGetAttrFnPtrsJP+0xfc>)
    d0ec:	659a      	str	r2, [r3, #88]	; 0x58
    pGetAttr[RX1_WINDOW_PARAMS] = LORAREG_GetAttr_Rx1WindowparamsType4;
    d0ee:	4a31      	ldr	r2, [pc, #196]	; (d1b4 <LORAREG_InitGetAttrFnPtrsJP+0x100>)
    d0f0:	665a      	str	r2, [r3, #100]	; 0x64
	pGetAttr[JOIN_DUTY_CYCLE_TIMER]= LORAREG_GetAttr_JoinDutyCycleRemainingTime;
    d0f2:	4931      	ldr	r1, [pc, #196]	; (d1b8 <LORAREG_InitGetAttrFnPtrsJP+0x104>)
    d0f4:	2280      	movs	r2, #128	; 0x80
    d0f6:	5099      	str	r1, [r3, r2]
    pGetAttr[MODULATION_ATTR] = LORAREG_GetAttr_ModulationAttrT2;
    d0f8:	4930      	ldr	r1, [pc, #192]	; (d1bc <LORAREG_InitGetAttrFnPtrsJP+0x108>)
    d0fa:	320c      	adds	r2, #12
    d0fc:	5099      	str	r1, [r3, r2]
    pGetAttr[BANDWIDTH_ATTR] = LORAREG_GetAttr_BandwidthAttrT2;
    d0fe:	4930      	ldr	r1, [pc, #192]	; (d1c0 <LORAREG_InitGetAttrFnPtrsJP+0x10c>)
    d100:	3204      	adds	r2, #4
    d102:	5099      	str	r1, [r3, r2]
    pGetAttr[SPREADING_FACTOR_ATTR] = LORAREG_GetAttr_SpreadFactorT2;
    d104:	492f      	ldr	r1, [pc, #188]	; (d1c4 <LORAREG_InitGetAttrFnPtrsJP+0x110>)
    d106:	3204      	adds	r2, #4
    d108:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_RECEIVE_DELAY1] = LORAREG_GetAttr_MacRecvDelay1;
    d10a:	492f      	ldr	r1, [pc, #188]	; (d1c8 <LORAREG_InitGetAttrFnPtrsJP+0x114>)
    d10c:	3208      	adds	r2, #8
    d10e:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_RECEIVE_DELAY2] = LORAREG_GetAttr_MacRecvDelay2;
    d110:	492e      	ldr	r1, [pc, #184]	; (d1cc <LORAREG_InitGetAttrFnPtrsJP+0x118>)
    d112:	3204      	adds	r2, #4
    d114:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_JOIN_ACCEPT_DELAY1] = LORAREG_GetAttr_MacJoinAcptDelay1;
    d116:	492e      	ldr	r1, [pc, #184]	; (d1d0 <LORAREG_InitGetAttrFnPtrsJP+0x11c>)
    d118:	3204      	adds	r2, #4
    d11a:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_JOIN_ACCEPT_DELAY2] = LORAREG_GetAttr_MacJoinAcptDelay2;
    d11c:	492d      	ldr	r1, [pc, #180]	; (d1d4 <LORAREG_InitGetAttrFnPtrsJP+0x120>)
    d11e:	3204      	adds	r2, #4
    d120:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_ACK_TIMEOUT] = LORAREG_GetAttr_MacAckTimeout;
    d122:	492d      	ldr	r1, [pc, #180]	; (d1d8 <LORAREG_InitGetAttrFnPtrsJP+0x124>)
    d124:	3204      	adds	r2, #4
    d126:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_ADR_ACK_DELAY] = LORAREG_GetAttr_MacAdrAckDelay;
    d128:	492c      	ldr	r1, [pc, #176]	; (d1dc <LORAREG_InitGetAttrFnPtrsJP+0x128>)
    d12a:	3204      	adds	r2, #4
    d12c:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_ADR_ACK_LIMIT] = LORAREG_GetAttr_MacAdrAckLimit;
    d12e:	492c      	ldr	r1, [pc, #176]	; (d1e0 <LORAREG_InitGetAttrFnPtrsJP+0x12c>)
    d130:	3204      	adds	r2, #4
    d132:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_MAX_FCNT_GAP] = LORAREG_GetAttr_MacMaxFcntGap;
    d134:	492b      	ldr	r1, [pc, #172]	; (d1e4 <LORAREG_InitGetAttrFnPtrsJP+0x130>)
    d136:	3204      	adds	r2, #4
    d138:	5099      	str	r1, [r3, r2]
    pGetAttr[NEW_TX_CHANNEL_CONFIG] = LORAREG_GetAttr_NewTxChConfigT2;
    d13a:	492b      	ldr	r1, [pc, #172]	; (d1e8 <LORAREG_InitGetAttrFnPtrsJP+0x134>)
    d13c:	3204      	adds	r2, #4
    d13e:	5099      	str	r1, [r3, r2]
    pGetAttr[FREE_CHANNEL] = LORAREG_GetAttr_FreeChannel2;
    d140:	492a      	ldr	r1, [pc, #168]	; (d1ec <LORAREG_InitGetAttrFnPtrsJP+0x138>)
    d142:	3204      	adds	r2, #4
    d144:	5099      	str	r1, [r3, r2]
    pGetAttr[CURRENT_CHANNEL_INDEX] = LORAREG_GetAttr_CurChIndx;
    d146:	492a      	ldr	r1, [pc, #168]	; (d1f0 <LORAREG_InitGetAttrFnPtrsJP+0x13c>)
    d148:	3204      	adds	r2, #4
    d14a:	5099      	str	r1, [r3, r2]
    pGetAttr[DEFAULT_LBT_PARAMS] = LORAREG_GetAttr_DefLBTParams;
    d14c:	4929      	ldr	r1, [pc, #164]	; (d1f4 <LORAREG_InitGetAttrFnPtrsJP+0x140>)
    d14e:	3204      	adds	r2, #4
    d150:	5099      	str	r1, [r3, r2]
    pGetAttr[MIN_LBT_CHANNEL_PAUSE_TIMER] = LORAREG_GetAttr_minLBTChPauseTimer;
    d152:	4929      	ldr	r1, [pc, #164]	; (d1f8 <LORAREG_InitGetAttrFnPtrsJP+0x144>)
    d154:	3204      	adds	r2, #4
    d156:	5099      	str	r1, [r3, r2]
    pGetAttr[DL_FREQUENCY] = LORAREG_GetAttr_DlFrequency;
    d158:	4928      	ldr	r1, [pc, #160]	; (d1fc <LORAREG_InitGetAttrFnPtrsJP+0x148>)
    d15a:	3204      	adds	r2, #4
    d15c:	5099      	str	r1, [r3, r2]
    pGetAttr[REG_DEF_TX_POWER] = LORAREG_GetAttr_RegDefTxPwr;
    d15e:	4928      	ldr	r1, [pc, #160]	; (d200 <LORAREG_InitGetAttrFnPtrsJP+0x14c>)
    d160:	3208      	adds	r2, #8
    d162:	5099      	str	r1, [r3, r2]
    pGetAttr[REG_DEF_TX_DATARATE] = LORAREG_GetAttr_RegDefTxDR;
    d164:	4927      	ldr	r1, [pc, #156]	; (d204 <LORAREG_InitGetAttrFnPtrsJP+0x150>)
    d166:	3204      	adds	r2, #4
    d168:	5099      	str	r1, [r3, r2]
	pGetAttr[DUTY_CYCLE] = LORAREG_GetAttr_DutyCycleT2;
    d16a:	4a27      	ldr	r2, [pc, #156]	; (d208 <LORAREG_InitGetAttrFnPtrsJP+0x154>)
    d16c:	679a      	str	r2, [r3, #120]	; 0x78
	pGetAttr[MIN_DUTY_CYCLE_TIMER] = LORAREG_GetAttr_DutyCycleTimer;
    d16e:	4927      	ldr	r1, [pc, #156]	; (d20c <LORAREG_InitGetAttrFnPtrsJP+0x158>)
    d170:	2298      	movs	r2, #152	; 0x98
    d172:	5099      	str	r1, [r3, r2]
}
    d174:	4770      	bx	lr
    d176:	46c0      	nop			; (mov r8, r8)
    d178:	20000c7c 	.word	0x20000c7c
    d17c:	0000aca1 	.word	0x0000aca1
    d180:	0000c2f9 	.word	0x0000c2f9
    d184:	0000c339 	.word	0x0000c339
    d188:	0000c295 	.word	0x0000c295
    d18c:	0000975d 	.word	0x0000975d
    d190:	0000976d 	.word	0x0000976d
    d194:	00009789 	.word	0x00009789
    d198:	00009799 	.word	0x00009799
    d19c:	0000a809 	.word	0x0000a809
    d1a0:	000097a9 	.word	0x000097a9
    d1a4:	000097b9 	.word	0x000097b9
    d1a8:	0000aa69 	.word	0x0000aa69
    d1ac:	00009ac9 	.word	0x00009ac9
    d1b0:	00009809 	.word	0x00009809
    d1b4:	0000abad 	.word	0x0000abad
    d1b8:	0000a591 	.word	0x0000a591
    d1bc:	0000c3ad 	.word	0x0000c3ad
    d1c0:	0000c3e5 	.word	0x0000c3e5
    d1c4:	0000c41d 	.word	0x0000c41d
    d1c8:	00009869 	.word	0x00009869
    d1cc:	00009873 	.word	0x00009873
    d1d0:	0000987d 	.word	0x0000987d
    d1d4:	00009889 	.word	0x00009889
    d1d8:	00009895 	.word	0x00009895
    d1dc:	0000989f 	.word	0x0000989f
    d1e0:	000098a7 	.word	0x000098a7
    d1e4:	000098af 	.word	0x000098af
    d1e8:	0000c48d 	.word	0x0000c48d
    d1ec:	0000b3f9 	.word	0x0000b3f9
    d1f0:	000098d9 	.word	0x000098d9
    d1f4:	000098e9 	.word	0x000098e9
    d1f8:	0000ad71 	.word	0x0000ad71
    d1fc:	0000a821 	.word	0x0000a821
    d200:	000098b9 	.word	0x000098b9
    d204:	000098c9 	.word	0x000098c9
    d208:	00009a81 	.word	0x00009a81
    d20c:	0000a869 	.word	0x0000a869

0000d210 <LORAREG_InitGetAttrFnPtrsKR>:
    pGetAttr[FREQUENCY] = LORAREG_GetAttr_FreqT2;
    d210:	4b2d      	ldr	r3, [pc, #180]	; (d2c8 <LORAREG_InitGetAttrFnPtrsKR+0xb8>)
    d212:	4a2e      	ldr	r2, [pc, #184]	; (d2cc <LORAREG_InitGetAttrFnPtrsKR+0xbc>)
    d214:	601a      	str	r2, [r3, #0]
    pGetAttr[RX_WINDOW_SIZE] = LORAREG_GetAttr_RxWindowSizeT2;
    d216:	4a2e      	ldr	r2, [pc, #184]	; (d2d0 <LORAREG_InitGetAttrFnPtrsKR+0xc0>)
    d218:	60da      	str	r2, [r3, #12]
    pGetAttr[RX_WINDOW_OFFSET] = LORAREG_GetAttr_RxWindowOffsetT2;
    d21a:	4a2e      	ldr	r2, [pc, #184]	; (d2d4 <LORAREG_InitGetAttrFnPtrsKR+0xc4>)
    d21c:	611a      	str	r2, [r3, #16]
    pGetAttr[MAX_PAYLOAD_SIZE] = LORAREG_GetAttr_MaxPayloadT2;
    d21e:	4a2e      	ldr	r2, [pc, #184]	; (d2d8 <LORAREG_InitGetAttrFnPtrsKR+0xc8>)
    d220:	615a      	str	r2, [r3, #20]
    pGetAttr[MAX_CHANNELS] = LORAREG_GetAttr_MaxChannel;
    d222:	4a2e      	ldr	r2, [pc, #184]	; (d2dc <LORAREG_InitGetAttrFnPtrsKR+0xcc>)
    d224:	619a      	str	r2, [r3, #24]
    pGetAttr[MIN_NEW_CH_INDEX] = LORAREG_GetAttr_MinNewChIndex;
    d226:	4a2e      	ldr	r2, [pc, #184]	; (d2e0 <LORAREG_InitGetAttrFnPtrsKR+0xd0>)
    d228:	61da      	str	r2, [r3, #28]
    pGetAttr[DEFAULT_RX1_DATA_RATE] = LORAREG_GetAttr_DefRx1DataRate;
    d22a:	4a2e      	ldr	r2, [pc, #184]	; (d2e4 <LORAREG_InitGetAttrFnPtrsKR+0xd4>)
    d22c:	621a      	str	r2, [r3, #32]
    pGetAttr[DEFAULT_RX2_DATA_RATE] = LORAREG_GetAttr_DefRx2DataRate;
    d22e:	4a2e      	ldr	r2, [pc, #184]	; (d2e8 <LORAREG_InitGetAttrFnPtrsKR+0xd8>)
    d230:	625a      	str	r2, [r3, #36]	; 0x24
    pGetAttr[DEFAULT_RX2_FREQUENCY] = LORAREG_GetAttr_DefRx2Freq;
    d232:	4a2e      	ldr	r2, [pc, #184]	; (d2ec <LORAREG_InitGetAttrFnPtrsKR+0xdc>)
    d234:	629a      	str	r2, [r3, #40]	; 0x28
    pGetAttr[SUPPORTED_REGIONAL_FEATURES] = LORAREG_GetAttr_RegFeatures;
    d236:	4a2e      	ldr	r2, [pc, #184]	; (d2f0 <LORAREG_InitGetAttrFnPtrsKR+0xe0>)
    d238:	639a      	str	r2, [r3, #56]	; 0x38
    pGetAttr[DATA_RANGE] = LORAREG_GetAttr_DataRange;
    d23a:	4a2e      	ldr	r2, [pc, #184]	; (d2f4 <LORAREG_InitGetAttrFnPtrsKR+0xe4>)
    d23c:	649a      	str	r2, [r3, #72]	; 0x48
    pGetAttr[DATA_RANGE_CH_BAND] = LORAREG_GetAttr_DRangeChBandT2;
    d23e:	4a2e      	ldr	r2, [pc, #184]	; (d2f8 <LORAREG_InitGetAttrFnPtrsKR+0xe8>)
    d240:	64da      	str	r2, [r3, #76]	; 0x4c
    pGetAttr[MIN_MAX_DR] = LORAREG_GetAttr_MinMaxDr;
    d242:	4a2e      	ldr	r2, [pc, #184]	; (d2fc <LORAREG_InitGetAttrFnPtrsKR+0xec>)
    d244:	651a      	str	r2, [r3, #80]	; 0x50
    pGetAttr[CHANNEL_ID_STATUS] = LORAREG_GetAttr_ChIdStatus;
    d246:	4a2e      	ldr	r2, [pc, #184]	; (d300 <LORAREG_InitGetAttrFnPtrsKR+0xf0>)
    d248:	659a      	str	r2, [r3, #88]	; 0x58
    pGetAttr[RX1_WINDOW_PARAMS] = LORAREG_GetAttr_Rx1WindowparamsType2;
    d24a:	4a2e      	ldr	r2, [pc, #184]	; (d304 <LORAREG_InitGetAttrFnPtrsKR+0xf4>)
    d24c:	665a      	str	r2, [r3, #100]	; 0x64
	pGetAttr[JOIN_DUTY_CYCLE_TIMER]=LORAREG_GetAttr_JoinDutyCycleRemainingTime;
    d24e:	492e      	ldr	r1, [pc, #184]	; (d308 <LORAREG_InitGetAttrFnPtrsKR+0xf8>)
    d250:	2280      	movs	r2, #128	; 0x80
    d252:	5099      	str	r1, [r3, r2]
    pGetAttr[MODULATION_ATTR] = LORAREG_GetAttr_ModulationAttrT2;
    d254:	492d      	ldr	r1, [pc, #180]	; (d30c <LORAREG_InitGetAttrFnPtrsKR+0xfc>)
    d256:	320c      	adds	r2, #12
    d258:	5099      	str	r1, [r3, r2]
    pGetAttr[BANDWIDTH_ATTR] = LORAREG_GetAttr_BandwidthAttrT2;
    d25a:	492d      	ldr	r1, [pc, #180]	; (d310 <LORAREG_InitGetAttrFnPtrsKR+0x100>)
    d25c:	3204      	adds	r2, #4
    d25e:	5099      	str	r1, [r3, r2]
    pGetAttr[SPREADING_FACTOR_ATTR] = LORAREG_GetAttr_SpreadFactorT2;
    d260:	492c      	ldr	r1, [pc, #176]	; (d314 <LORAREG_InitGetAttrFnPtrsKR+0x104>)
    d262:	3204      	adds	r2, #4
    d264:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_RECEIVE_DELAY1] = LORAREG_GetAttr_MacRecvDelay1;
    d266:	492c      	ldr	r1, [pc, #176]	; (d318 <LORAREG_InitGetAttrFnPtrsKR+0x108>)
    d268:	3208      	adds	r2, #8
    d26a:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_RECEIVE_DELAY2] = LORAREG_GetAttr_MacRecvDelay2;
    d26c:	492b      	ldr	r1, [pc, #172]	; (d31c <LORAREG_InitGetAttrFnPtrsKR+0x10c>)
    d26e:	3204      	adds	r2, #4
    d270:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_JOIN_ACCEPT_DELAY1] = LORAREG_GetAttr_MacJoinAcptDelay1;
    d272:	492b      	ldr	r1, [pc, #172]	; (d320 <LORAREG_InitGetAttrFnPtrsKR+0x110>)
    d274:	3204      	adds	r2, #4
    d276:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_JOIN_ACCEPT_DELAY2] = LORAREG_GetAttr_MacJoinAcptDelay2;
    d278:	492a      	ldr	r1, [pc, #168]	; (d324 <LORAREG_InitGetAttrFnPtrsKR+0x114>)
    d27a:	3204      	adds	r2, #4
    d27c:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_ACK_TIMEOUT] = LORAREG_GetAttr_MacAckTimeout;
    d27e:	492a      	ldr	r1, [pc, #168]	; (d328 <LORAREG_InitGetAttrFnPtrsKR+0x118>)
    d280:	3204      	adds	r2, #4
    d282:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_ADR_ACK_DELAY] = LORAREG_GetAttr_MacAdrAckDelay;
    d284:	4929      	ldr	r1, [pc, #164]	; (d32c <LORAREG_InitGetAttrFnPtrsKR+0x11c>)
    d286:	3204      	adds	r2, #4
    d288:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_ADR_ACK_LIMIT] = LORAREG_GetAttr_MacAdrAckLimit;
    d28a:	4929      	ldr	r1, [pc, #164]	; (d330 <LORAREG_InitGetAttrFnPtrsKR+0x120>)
    d28c:	3204      	adds	r2, #4
    d28e:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_MAX_FCNT_GAP] = LORAREG_GetAttr_MacMaxFcntGap;
    d290:	4928      	ldr	r1, [pc, #160]	; (d334 <LORAREG_InitGetAttrFnPtrsKR+0x124>)
    d292:	3204      	adds	r2, #4
    d294:	5099      	str	r1, [r3, r2]
    pGetAttr[NEW_TX_CHANNEL_CONFIG] = LORAREG_GetAttr_NewTxChConfigT2;
    d296:	4928      	ldr	r1, [pc, #160]	; (d338 <LORAREG_InitGetAttrFnPtrsKR+0x128>)
    d298:	3204      	adds	r2, #4
    d29a:	5099      	str	r1, [r3, r2]
    pGetAttr[FREE_CHANNEL] = LORAREG_GetAttr_FreeChannel2;
    d29c:	4927      	ldr	r1, [pc, #156]	; (d33c <LORAREG_InitGetAttrFnPtrsKR+0x12c>)
    d29e:	3204      	adds	r2, #4
    d2a0:	5099      	str	r1, [r3, r2]
    pGetAttr[CURRENT_CHANNEL_INDEX] = LORAREG_GetAttr_CurChIndx;
    d2a2:	4927      	ldr	r1, [pc, #156]	; (d340 <LORAREG_InitGetAttrFnPtrsKR+0x130>)
    d2a4:	3204      	adds	r2, #4
    d2a6:	5099      	str	r1, [r3, r2]
    pGetAttr[DEFAULT_LBT_PARAMS] = LORAREG_GetAttr_DefLBTParams;
    d2a8:	4926      	ldr	r1, [pc, #152]	; (d344 <LORAREG_InitGetAttrFnPtrsKR+0x134>)
    d2aa:	3204      	adds	r2, #4
    d2ac:	5099      	str	r1, [r3, r2]
    pGetAttr[MIN_LBT_CHANNEL_PAUSE_TIMER] = LORAREG_GetAttr_minLBTChPauseTimer;
    d2ae:	4926      	ldr	r1, [pc, #152]	; (d348 <LORAREG_InitGetAttrFnPtrsKR+0x138>)
    d2b0:	3204      	adds	r2, #4
    d2b2:	5099      	str	r1, [r3, r2]
    pGetAttr[DL_FREQUENCY] = LORAREG_GetAttr_DlFrequency;
    d2b4:	4925      	ldr	r1, [pc, #148]	; (d34c <LORAREG_InitGetAttrFnPtrsKR+0x13c>)
    d2b6:	3204      	adds	r2, #4
    d2b8:	5099      	str	r1, [r3, r2]
    pGetAttr[REG_DEF_TX_POWER] = LORAREG_GetAttr_RegDefTxPwr;
    d2ba:	4925      	ldr	r1, [pc, #148]	; (d350 <LORAREG_InitGetAttrFnPtrsKR+0x140>)
    d2bc:	3208      	adds	r2, #8
    d2be:	5099      	str	r1, [r3, r2]
    pGetAttr[REG_DEF_TX_DATARATE] = LORAREG_GetAttr_RegDefTxDR;
    d2c0:	4924      	ldr	r1, [pc, #144]	; (d354 <LORAREG_InitGetAttrFnPtrsKR+0x144>)
    d2c2:	3204      	adds	r2, #4
    d2c4:	5099      	str	r1, [r3, r2]
}
    d2c6:	4770      	bx	lr
    d2c8:	20000c7c 	.word	0x20000c7c
    d2cc:	0000ab65 	.word	0x0000ab65
    d2d0:	0000c2f9 	.word	0x0000c2f9
    d2d4:	0000c339 	.word	0x0000c339
    d2d8:	0000c375 	.word	0x0000c375
    d2dc:	0000975d 	.word	0x0000975d
    d2e0:	0000976d 	.word	0x0000976d
    d2e4:	00009789 	.word	0x00009789
    d2e8:	00009799 	.word	0x00009799
    d2ec:	0000a809 	.word	0x0000a809
    d2f0:	000097a9 	.word	0x000097a9
    d2f4:	000097b9 	.word	0x000097b9
    d2f8:	0000aa69 	.word	0x0000aa69
    d2fc:	00009ac9 	.word	0x00009ac9
    d300:	00009809 	.word	0x00009809
    d304:	0000a9fd 	.word	0x0000a9fd
    d308:	0000a591 	.word	0x0000a591
    d30c:	0000c3ad 	.word	0x0000c3ad
    d310:	0000c3e5 	.word	0x0000c3e5
    d314:	0000c41d 	.word	0x0000c41d
    d318:	00009869 	.word	0x00009869
    d31c:	00009873 	.word	0x00009873
    d320:	0000987d 	.word	0x0000987d
    d324:	00009889 	.word	0x00009889
    d328:	00009895 	.word	0x00009895
    d32c:	0000989f 	.word	0x0000989f
    d330:	000098a7 	.word	0x000098a7
    d334:	000098af 	.word	0x000098af
    d338:	0000c48d 	.word	0x0000c48d
    d33c:	0000b3f9 	.word	0x0000b3f9
    d340:	000098d9 	.word	0x000098d9
    d344:	000098e9 	.word	0x000098e9
    d348:	0000ad71 	.word	0x0000ad71
    d34c:	0000a821 	.word	0x0000a821
    d350:	000098b9 	.word	0x000098b9
    d354:	000098c9 	.word	0x000098c9

0000d358 <LORAREG_InitValidateAttrFnPtrsNA>:
    pValidateAttr[RX_FREQUENCY] = ValidateRxFreqT1;
    d358:	4b0d      	ldr	r3, [pc, #52]	; (d390 <LORAREG_InitValidateAttrFnPtrsNA+0x38>)
    d35a:	4a0e      	ldr	r2, [pc, #56]	; (d394 <LORAREG_InitValidateAttrFnPtrsNA+0x3c>)
    d35c:	605a      	str	r2, [r3, #4]
    pValidateAttr[TX_FREQUENCY] = ValidateTxFreqT1;
    d35e:	4a0e      	ldr	r2, [pc, #56]	; (d398 <LORAREG_InitValidateAttrFnPtrsNA+0x40>)
    d360:	609a      	str	r2, [r3, #8]
    pValidateAttr[RX_DATARATE] = ValidateDataRateRxT1;
    d362:	4a0e      	ldr	r2, [pc, #56]	; (d39c <LORAREG_InitValidateAttrFnPtrsNA+0x44>)
    d364:	63da      	str	r2, [r3, #60]	; 0x3c
    pValidateAttr[TX_DATARATE] = ValidateDataRateTxT1;
    d366:	490e      	ldr	r1, [pc, #56]	; (d3a0 <LORAREG_InitValidateAttrFnPtrsNA+0x48>)
    d368:	6419      	str	r1, [r3, #64]	; 0x40
    pValidateAttr[SUPPORTED_DR] = ValidateSupportedDr;
    d36a:	490e      	ldr	r1, [pc, #56]	; (d3a4 <LORAREG_InitValidateAttrFnPtrsNA+0x4c>)
    d36c:	6459      	str	r1, [r3, #68]	; 0x44
    pValidateAttr[DATA_RANGE] = ValidateDataRange;
    d36e:	490e      	ldr	r1, [pc, #56]	; (d3a8 <LORAREG_InitValidateAttrFnPtrsNA+0x50>)
    d370:	6499      	str	r1, [r3, #72]	; 0x48
    pValidateAttr[CHANNEL_ID] = ValidateChannelId;
    d372:	490e      	ldr	r1, [pc, #56]	; (d3ac <LORAREG_InitValidateAttrFnPtrsNA+0x54>)
    d374:	6559      	str	r1, [r3, #84]	; 0x54
    pValidateAttr[RX2_DATARATE] = ValidateDataRateRxT1;
    d376:	65da      	str	r2, [r3, #92]	; 0x5c
    pValidateAttr[RX1_DATARATE_OFFSET] = ValidateRx1DataRateOffset;
    d378:	4a0d      	ldr	r2, [pc, #52]	; (d3b0 <LORAREG_InitValidateAttrFnPtrsNA+0x58>)
    d37a:	661a      	str	r2, [r3, #96]	; 0x60
    pValidateAttr[CHANNEL_MASK] = ValidateChannelMask;
    d37c:	4a0d      	ldr	r2, [pc, #52]	; (d3b4 <LORAREG_InitValidateAttrFnPtrsNA+0x5c>)
    d37e:	669a      	str	r2, [r3, #104]	; 0x68
    pValidateAttr[CHANNEL_MASK_CNTL] = ValidateChannelMaskCntl;
    d380:	4a0d      	ldr	r2, [pc, #52]	; (d3b8 <LORAREG_InitValidateAttrFnPtrsNA+0x60>)
    d382:	66da      	str	r2, [r3, #108]	; 0x6c
    pValidateAttr[TX_PWR] = ValidateTxPower;
    d384:	4a0d      	ldr	r2, [pc, #52]	; (d3bc <LORAREG_InitValidateAttrFnPtrsNA+0x64>)
    d386:	675a      	str	r2, [r3, #116]	; 0x74
    pValidateAttr[CHMASK_CHCNTL] = ValidateChMaskChCntl;
    d388:	490d      	ldr	r1, [pc, #52]	; (d3c0 <LORAREG_InitValidateAttrFnPtrsNA+0x68>)
    d38a:	22e0      	movs	r2, #224	; 0xe0
    d38c:	5099      	str	r1, [r3, r2]
}
    d38e:	4770      	bx	lr
    d390:	20000e64 	.word	0x20000e64
    d394:	00009cbd 	.word	0x00009cbd
    d398:	0000c825 	.word	0x0000c825
    d39c:	000099ed 	.word	0x000099ed
    d3a0:	000099a9 	.word	0x000099a9
    d3a4:	00009c61 	.word	0x00009c61
    d3a8:	0000c581 	.word	0x0000c581
    d3ac:	00009a3d 	.word	0x00009a3d
    d3b0:	00009cf1 	.word	0x00009cf1
    d3b4:	00009b89 	.word	0x00009b89
    d3b8:	00009b5d 	.word	0x00009b5d
    d3bc:	00009b71 	.word	0x00009b71
    d3c0:	0000c455 	.word	0x0000c455

0000d3c4 <LORAREG_InitValidateAttrFnPtrsEU>:
	pValidateAttr[RX_FREQUENCY] = ValidateFreq;
    d3c4:	4b0d      	ldr	r3, [pc, #52]	; (d3fc <LORAREG_InitValidateAttrFnPtrsEU+0x38>)
    d3c6:	4a0e      	ldr	r2, [pc, #56]	; (d400 <LORAREG_InitValidateAttrFnPtrsEU+0x3c>)
    d3c8:	605a      	str	r2, [r3, #4]
	pValidateAttr[TX_FREQUENCY] = ValidateTxFreqT2;
    d3ca:	4a0e      	ldr	r2, [pc, #56]	; (d404 <LORAREG_InitValidateAttrFnPtrsEU+0x40>)
    d3cc:	609a      	str	r2, [r3, #8]
	pValidateAttr[RX_DATARATE] = ValidateDataRate;
    d3ce:	4a0e      	ldr	r2, [pc, #56]	; (d408 <LORAREG_InitValidateAttrFnPtrsEU+0x44>)
    d3d0:	63da      	str	r2, [r3, #60]	; 0x3c
	pValidateAttr[TX_DATARATE] = ValidateDataRate;
    d3d2:	641a      	str	r2, [r3, #64]	; 0x40
	pValidateAttr[SUPPORTED_DR] = ValidateSupportedDr;
    d3d4:	490d      	ldr	r1, [pc, #52]	; (d40c <LORAREG_InitValidateAttrFnPtrsEU+0x48>)
    d3d6:	6459      	str	r1, [r3, #68]	; 0x44
	pValidateAttr[DATA_RANGE] = ValidateDataRangeT2;
    d3d8:	490d      	ldr	r1, [pc, #52]	; (d410 <LORAREG_InitValidateAttrFnPtrsEU+0x4c>)
    d3da:	6499      	str	r1, [r3, #72]	; 0x48
	pValidateAttr[CHANNEL_ID] = ValidateChannelIdT2;
    d3dc:	490d      	ldr	r1, [pc, #52]	; (d414 <LORAREG_InitValidateAttrFnPtrsEU+0x50>)
    d3de:	6559      	str	r1, [r3, #84]	; 0x54
	pValidateAttr[RX2_DATARATE] = ValidateDataRate;
    d3e0:	65da      	str	r2, [r3, #92]	; 0x5c
	pValidateAttr[RX1_DATARATE_OFFSET] = ValidateRx1DataRateOffset;
    d3e2:	4a0d      	ldr	r2, [pc, #52]	; (d418 <LORAREG_InitValidateAttrFnPtrsEU+0x54>)
    d3e4:	661a      	str	r2, [r3, #96]	; 0x60
	pValidateAttr[CHANNEL_MASK] = ValidateChannelMaskT2;
    d3e6:	4a0d      	ldr	r2, [pc, #52]	; (d41c <LORAREG_InitValidateAttrFnPtrsEU+0x58>)
    d3e8:	669a      	str	r2, [r3, #104]	; 0x68
	pValidateAttr[CHANNEL_MASK_CNTL] = ValidateChannelMaskCntlT2;
    d3ea:	4a0d      	ldr	r2, [pc, #52]	; (d420 <LORAREG_InitValidateAttrFnPtrsEU+0x5c>)
    d3ec:	66da      	str	r2, [r3, #108]	; 0x6c
	pValidateAttr[TX_PWR] = ValidateTxPower;
    d3ee:	4a0d      	ldr	r2, [pc, #52]	; (d424 <LORAREG_InitValidateAttrFnPtrsEU+0x60>)
    d3f0:	675a      	str	r2, [r3, #116]	; 0x74
	pValidateAttr[CHMASK_CHCNTL] = ValidateChMaskChCntlT2;
    d3f2:	490d      	ldr	r1, [pc, #52]	; (d428 <LORAREG_InitValidateAttrFnPtrsEU+0x64>)
    d3f4:	22e0      	movs	r2, #224	; 0xe0
    d3f6:	5099      	str	r1, [r3, r2]
}
    d3f8:	4770      	bx	lr
    d3fa:	46c0      	nop			; (mov r8, r8)
    d3fc:	20000e64 	.word	0x20000e64
    d400:	00009d79 	.word	0x00009d79
    d404:	0000ae41 	.word	0x0000ae41
    d408:	00009c49 	.word	0x00009c49
    d40c:	00009c61 	.word	0x00009c61
    d410:	0000c1a5 	.word	0x0000c1a5
    d414:	00009a55 	.word	0x00009a55
    d418:	00009cf1 	.word	0x00009cf1
    d41c:	00009b8d 	.word	0x00009b8d
    d420:	00009be1 	.word	0x00009be1
    d424:	00009b71 	.word	0x00009b71
    d428:	00009bf5 	.word	0x00009bf5

0000d42c <LORAREG_InitValidateAttrFnPtrsAS>:
	pValidateAttr[RX_FREQUENCY] = ValidateFrequencyAS;
    d42c:	4b0d      	ldr	r3, [pc, #52]	; (d464 <LORAREG_InitValidateAttrFnPtrsAS+0x38>)
    d42e:	4a0e      	ldr	r2, [pc, #56]	; (d468 <LORAREG_InitValidateAttrFnPtrsAS+0x3c>)
    d430:	605a      	str	r2, [r3, #4]
	pValidateAttr[TX_FREQUENCY] = ValidateTxFreqT2;
    d432:	4a0e      	ldr	r2, [pc, #56]	; (d46c <LORAREG_InitValidateAttrFnPtrsAS+0x40>)
    d434:	609a      	str	r2, [r3, #8]
	pValidateAttr[RX_DATARATE] = ValidateDataRateRxT2;
    d436:	4a0e      	ldr	r2, [pc, #56]	; (d470 <LORAREG_InitValidateAttrFnPtrsAS+0x44>)
    d438:	63da      	str	r2, [r3, #60]	; 0x3c
	pValidateAttr[TX_DATARATE] = ValidateDataRateTxT2;
    d43a:	490e      	ldr	r1, [pc, #56]	; (d474 <LORAREG_InitValidateAttrFnPtrsAS+0x48>)
    d43c:	6419      	str	r1, [r3, #64]	; 0x40
	pValidateAttr[SUPPORTED_DR] = ValidateSupportedDr;
    d43e:	490e      	ldr	r1, [pc, #56]	; (d478 <LORAREG_InitValidateAttrFnPtrsAS+0x4c>)
    d440:	6459      	str	r1, [r3, #68]	; 0x44
	pValidateAttr[DATA_RANGE] = ValidateDataRangeT2;
    d442:	490e      	ldr	r1, [pc, #56]	; (d47c <LORAREG_InitValidateAttrFnPtrsAS+0x50>)
    d444:	6499      	str	r1, [r3, #72]	; 0x48
	pValidateAttr[CHANNEL_ID] = ValidateChannelIdT2;
    d446:	490e      	ldr	r1, [pc, #56]	; (d480 <LORAREG_InitValidateAttrFnPtrsAS+0x54>)
    d448:	6559      	str	r1, [r3, #84]	; 0x54
	pValidateAttr[RX2_DATARATE] = ValidateDataRateRxT2;
    d44a:	65da      	str	r2, [r3, #92]	; 0x5c
	pValidateAttr[RX1_DATARATE_OFFSET] = ValidateRx1DataRateOffset;
    d44c:	4a0d      	ldr	r2, [pc, #52]	; (d484 <LORAREG_InitValidateAttrFnPtrsAS+0x58>)
    d44e:	661a      	str	r2, [r3, #96]	; 0x60
	pValidateAttr[CHANNEL_MASK] = ValidateChannelMaskT2;
    d450:	4a0d      	ldr	r2, [pc, #52]	; (d488 <LORAREG_InitValidateAttrFnPtrsAS+0x5c>)
    d452:	669a      	str	r2, [r3, #104]	; 0x68
	pValidateAttr[CHANNEL_MASK_CNTL] = ValidateChannelMaskCntlT2;
    d454:	4a0d      	ldr	r2, [pc, #52]	; (d48c <LORAREG_InitValidateAttrFnPtrsAS+0x60>)
    d456:	66da      	str	r2, [r3, #108]	; 0x6c
	pValidateAttr[TX_PWR] = ValidateTxPower;
    d458:	4a0d      	ldr	r2, [pc, #52]	; (d490 <LORAREG_InitValidateAttrFnPtrsAS+0x64>)
    d45a:	675a      	str	r2, [r3, #116]	; 0x74
	pValidateAttr[CHMASK_CHCNTL] = ValidateChMaskChCntlT2;
    d45c:	490d      	ldr	r1, [pc, #52]	; (d494 <LORAREG_InitValidateAttrFnPtrsAS+0x68>)
    d45e:	22e0      	movs	r2, #224	; 0xe0
    d460:	5099      	str	r1, [r3, r2]
}
    d462:	4770      	bx	lr
    d464:	20000e64 	.word	0x20000e64
    d468:	00009d95 	.word	0x00009d95
    d46c:	0000ae41 	.word	0x0000ae41
    d470:	00009a11 	.word	0x00009a11
    d474:	000099c1 	.word	0x000099c1
    d478:	00009c61 	.word	0x00009c61
    d47c:	0000c1a5 	.word	0x0000c1a5
    d480:	00009a55 	.word	0x00009a55
    d484:	00009cf1 	.word	0x00009cf1
    d488:	00009b8d 	.word	0x00009b8d
    d48c:	00009be1 	.word	0x00009be1
    d490:	00009b71 	.word	0x00009b71
    d494:	00009bf5 	.word	0x00009bf5

0000d498 <LORAREG_InitValidateAttrFnPtrsAU>:
	pValidateAttr[RX_FREQUENCY] = ValidateRxFreqT1;
    d498:	4b0d      	ldr	r3, [pc, #52]	; (d4d0 <LORAREG_InitValidateAttrFnPtrsAU+0x38>)
    d49a:	4a0e      	ldr	r2, [pc, #56]	; (d4d4 <LORAREG_InitValidateAttrFnPtrsAU+0x3c>)
    d49c:	605a      	str	r2, [r3, #4]
	pValidateAttr[TX_FREQUENCY] = ValidateTxFreqT1;
    d49e:	4a0e      	ldr	r2, [pc, #56]	; (d4d8 <LORAREG_InitValidateAttrFnPtrsAU+0x40>)
    d4a0:	609a      	str	r2, [r3, #8]
	pValidateAttr[RX_DATARATE] = ValidateDataRateRxT1;
    d4a2:	4a0e      	ldr	r2, [pc, #56]	; (d4dc <LORAREG_InitValidateAttrFnPtrsAU+0x44>)
    d4a4:	63da      	str	r2, [r3, #60]	; 0x3c
	pValidateAttr[TX_DATARATE] = ValidateDataRateTxT1;
    d4a6:	490e      	ldr	r1, [pc, #56]	; (d4e0 <LORAREG_InitValidateAttrFnPtrsAU+0x48>)
    d4a8:	6419      	str	r1, [r3, #64]	; 0x40
	pValidateAttr[SUPPORTED_DR] = ValidateSupportedDr;
    d4aa:	490e      	ldr	r1, [pc, #56]	; (d4e4 <LORAREG_InitValidateAttrFnPtrsAU+0x4c>)
    d4ac:	6459      	str	r1, [r3, #68]	; 0x44
	pValidateAttr[DATA_RANGE] = ValidateDataRange;
    d4ae:	490e      	ldr	r1, [pc, #56]	; (d4e8 <LORAREG_InitValidateAttrFnPtrsAU+0x50>)
    d4b0:	6499      	str	r1, [r3, #72]	; 0x48
	pValidateAttr[CHANNEL_ID] = ValidateChannelId;
    d4b2:	490e      	ldr	r1, [pc, #56]	; (d4ec <LORAREG_InitValidateAttrFnPtrsAU+0x54>)
    d4b4:	6559      	str	r1, [r3, #84]	; 0x54
	pValidateAttr[RX2_DATARATE] = ValidateDataRateRxT1;
    d4b6:	65da      	str	r2, [r3, #92]	; 0x5c
	pValidateAttr[RX1_DATARATE_OFFSET] = ValidateRx1DataRateOffset;
    d4b8:	4a0d      	ldr	r2, [pc, #52]	; (d4f0 <LORAREG_InitValidateAttrFnPtrsAU+0x58>)
    d4ba:	661a      	str	r2, [r3, #96]	; 0x60
	pValidateAttr[CHANNEL_MASK] = ValidateChannelMask;
    d4bc:	4a0d      	ldr	r2, [pc, #52]	; (d4f4 <LORAREG_InitValidateAttrFnPtrsAU+0x5c>)
    d4be:	669a      	str	r2, [r3, #104]	; 0x68
	pValidateAttr[CHANNEL_MASK_CNTL] = ValidateChannelMaskCntl;
    d4c0:	4a0d      	ldr	r2, [pc, #52]	; (d4f8 <LORAREG_InitValidateAttrFnPtrsAU+0x60>)
    d4c2:	66da      	str	r2, [r3, #108]	; 0x6c
	pValidateAttr[TX_PWR] = ValidateTxPower;
    d4c4:	4a0d      	ldr	r2, [pc, #52]	; (d4fc <LORAREG_InitValidateAttrFnPtrsAU+0x64>)
    d4c6:	675a      	str	r2, [r3, #116]	; 0x74
	pValidateAttr[CHMASK_CHCNTL] = ValidateChMaskChCntl;
    d4c8:	490d      	ldr	r1, [pc, #52]	; (d500 <LORAREG_InitValidateAttrFnPtrsAU+0x68>)
    d4ca:	22e0      	movs	r2, #224	; 0xe0
    d4cc:	5099      	str	r1, [r3, r2]
}
    d4ce:	4770      	bx	lr
    d4d0:	20000e64 	.word	0x20000e64
    d4d4:	00009cbd 	.word	0x00009cbd
    d4d8:	0000c825 	.word	0x0000c825
    d4dc:	000099ed 	.word	0x000099ed
    d4e0:	000099a9 	.word	0x000099a9
    d4e4:	00009c61 	.word	0x00009c61
    d4e8:	0000c581 	.word	0x0000c581
    d4ec:	00009a3d 	.word	0x00009a3d
    d4f0:	00009cf1 	.word	0x00009cf1
    d4f4:	00009b89 	.word	0x00009b89
    d4f8:	00009b5d 	.word	0x00009b5d
    d4fc:	00009b71 	.word	0x00009b71
    d500:	0000c455 	.word	0x0000c455

0000d504 <LORAREG_InitValidateAttrFnPtrsIN>:
	pValidateAttr[RX_FREQUENCY] = ValidateFreqIN;
    d504:	4b0d      	ldr	r3, [pc, #52]	; (d53c <LORAREG_InitValidateAttrFnPtrsIN+0x38>)
    d506:	4a0e      	ldr	r2, [pc, #56]	; (d540 <LORAREG_InitValidateAttrFnPtrsIN+0x3c>)
    d508:	605a      	str	r2, [r3, #4]
	pValidateAttr[TX_FREQUENCY] = ValidateTxFreqT2;
    d50a:	4a0e      	ldr	r2, [pc, #56]	; (d544 <LORAREG_InitValidateAttrFnPtrsIN+0x40>)
    d50c:	609a      	str	r2, [r3, #8]
	pValidateAttr[RX_DATARATE] = ValidateDataRate;
    d50e:	4a0e      	ldr	r2, [pc, #56]	; (d548 <LORAREG_InitValidateAttrFnPtrsIN+0x44>)
    d510:	63da      	str	r2, [r3, #60]	; 0x3c
	pValidateAttr[TX_DATARATE] = ValidateDataRate;
    d512:	641a      	str	r2, [r3, #64]	; 0x40
	pValidateAttr[SUPPORTED_DR] = ValidateSupportedDr;
    d514:	490d      	ldr	r1, [pc, #52]	; (d54c <LORAREG_InitValidateAttrFnPtrsIN+0x48>)
    d516:	6459      	str	r1, [r3, #68]	; 0x44
	pValidateAttr[DATA_RANGE] = ValidateDataRangeT2;
    d518:	490d      	ldr	r1, [pc, #52]	; (d550 <LORAREG_InitValidateAttrFnPtrsIN+0x4c>)
    d51a:	6499      	str	r1, [r3, #72]	; 0x48
	pValidateAttr[CHANNEL_ID] = ValidateChannelIdT2;
    d51c:	490d      	ldr	r1, [pc, #52]	; (d554 <LORAREG_InitValidateAttrFnPtrsIN+0x50>)
    d51e:	6559      	str	r1, [r3, #84]	; 0x54
	pValidateAttr[RX2_DATARATE] = ValidateDataRate;
    d520:	65da      	str	r2, [r3, #92]	; 0x5c
	pValidateAttr[RX1_DATARATE_OFFSET] = ValidateRx1DataRateOffset;
    d522:	4a0d      	ldr	r2, [pc, #52]	; (d558 <LORAREG_InitValidateAttrFnPtrsIN+0x54>)
    d524:	661a      	str	r2, [r3, #96]	; 0x60
	pValidateAttr[CHANNEL_MASK] = ValidateChannelMaskT2;
    d526:	4a0d      	ldr	r2, [pc, #52]	; (d55c <LORAREG_InitValidateAttrFnPtrsIN+0x58>)
    d528:	669a      	str	r2, [r3, #104]	; 0x68
	pValidateAttr[CHANNEL_MASK_CNTL] = ValidateChannelMaskCntlT2;
    d52a:	4a0d      	ldr	r2, [pc, #52]	; (d560 <LORAREG_InitValidateAttrFnPtrsIN+0x5c>)
    d52c:	66da      	str	r2, [r3, #108]	; 0x6c
	pValidateAttr[TX_PWR] = ValidateTxPower;
    d52e:	4a0d      	ldr	r2, [pc, #52]	; (d564 <LORAREG_InitValidateAttrFnPtrsIN+0x60>)
    d530:	675a      	str	r2, [r3, #116]	; 0x74
	pValidateAttr[CHMASK_CHCNTL] = ValidateChMaskChCntlT2;
    d532:	490d      	ldr	r1, [pc, #52]	; (d568 <LORAREG_InitValidateAttrFnPtrsIN+0x64>)
    d534:	22e0      	movs	r2, #224	; 0xe0
    d536:	5099      	str	r1, [r3, r2]
}
    d538:	4770      	bx	lr
    d53a:	46c0      	nop			; (mov r8, r8)
    d53c:	20000e64 	.word	0x20000e64
    d540:	0000ae65 	.word	0x0000ae65
    d544:	0000ae41 	.word	0x0000ae41
    d548:	00009c49 	.word	0x00009c49
    d54c:	00009c61 	.word	0x00009c61
    d550:	0000c1a5 	.word	0x0000c1a5
    d554:	00009a55 	.word	0x00009a55
    d558:	00009cf1 	.word	0x00009cf1
    d55c:	00009b8d 	.word	0x00009b8d
    d560:	00009be1 	.word	0x00009be1
    d564:	00009b71 	.word	0x00009b71
    d568:	00009bf5 	.word	0x00009bf5

0000d56c <LORAREG_InitValidateAttrFnPtrsJP>:
	pValidateAttr[RX_FREQUENCY] = ValidateFreqJP;
    d56c:	4b0d      	ldr	r3, [pc, #52]	; (d5a4 <LORAREG_InitValidateAttrFnPtrsJP+0x38>)
    d56e:	4a0e      	ldr	r2, [pc, #56]	; (d5a8 <LORAREG_InitValidateAttrFnPtrsJP+0x3c>)
    d570:	605a      	str	r2, [r3, #4]
	pValidateAttr[TX_FREQUENCY] = ValidateTxFreqT2;
    d572:	4a0e      	ldr	r2, [pc, #56]	; (d5ac <LORAREG_InitValidateAttrFnPtrsJP+0x40>)
    d574:	609a      	str	r2, [r3, #8]
	pValidateAttr[RX_DATARATE] = ValidateDataRateRxT2;
    d576:	4a0e      	ldr	r2, [pc, #56]	; (d5b0 <LORAREG_InitValidateAttrFnPtrsJP+0x44>)
    d578:	63da      	str	r2, [r3, #60]	; 0x3c
	pValidateAttr[TX_DATARATE] = ValidateDataRateTxT2;
    d57a:	490e      	ldr	r1, [pc, #56]	; (d5b4 <LORAREG_InitValidateAttrFnPtrsJP+0x48>)
    d57c:	6419      	str	r1, [r3, #64]	; 0x40
	pValidateAttr[SUPPORTED_DR] = ValidateSupportedDr;
    d57e:	490e      	ldr	r1, [pc, #56]	; (d5b8 <LORAREG_InitValidateAttrFnPtrsJP+0x4c>)
    d580:	6459      	str	r1, [r3, #68]	; 0x44
	pValidateAttr[DATA_RANGE] = ValidateDataRangeT2;
    d582:	490e      	ldr	r1, [pc, #56]	; (d5bc <LORAREG_InitValidateAttrFnPtrsJP+0x50>)
    d584:	6499      	str	r1, [r3, #72]	; 0x48
	pValidateAttr[CHANNEL_ID] = ValidateChannelIdT2;
    d586:	490e      	ldr	r1, [pc, #56]	; (d5c0 <LORAREG_InitValidateAttrFnPtrsJP+0x54>)
    d588:	6559      	str	r1, [r3, #84]	; 0x54
	pValidateAttr[RX2_DATARATE] = ValidateDataRateRxT2;
    d58a:	65da      	str	r2, [r3, #92]	; 0x5c
	pValidateAttr[RX1_DATARATE_OFFSET] = ValidateRx1DataRateOffset;
    d58c:	4a0d      	ldr	r2, [pc, #52]	; (d5c4 <LORAREG_InitValidateAttrFnPtrsJP+0x58>)
    d58e:	661a      	str	r2, [r3, #96]	; 0x60
	pValidateAttr[CHANNEL_MASK] = ValidateChannelMaskT2;
    d590:	4a0d      	ldr	r2, [pc, #52]	; (d5c8 <LORAREG_InitValidateAttrFnPtrsJP+0x5c>)
    d592:	669a      	str	r2, [r3, #104]	; 0x68
	pValidateAttr[CHANNEL_MASK_CNTL] = ValidateChannelMaskCntlT2;
    d594:	4a0d      	ldr	r2, [pc, #52]	; (d5cc <LORAREG_InitValidateAttrFnPtrsJP+0x60>)
    d596:	66da      	str	r2, [r3, #108]	; 0x6c
	pValidateAttr[TX_PWR] = ValidateTxPower;
    d598:	4a0d      	ldr	r2, [pc, #52]	; (d5d0 <LORAREG_InitValidateAttrFnPtrsJP+0x64>)
    d59a:	675a      	str	r2, [r3, #116]	; 0x74
	pValidateAttr[CHMASK_CHCNTL] = ValidateChMaskChCntlT2;
    d59c:	490d      	ldr	r1, [pc, #52]	; (d5d4 <LORAREG_InitValidateAttrFnPtrsJP+0x68>)
    d59e:	22e0      	movs	r2, #224	; 0xe0
    d5a0:	5099      	str	r1, [r3, r2]
}
    d5a2:	4770      	bx	lr
    d5a4:	20000e64 	.word	0x20000e64
    d5a8:	0000ae95 	.word	0x0000ae95
    d5ac:	0000ae41 	.word	0x0000ae41
    d5b0:	00009a11 	.word	0x00009a11
    d5b4:	000099c1 	.word	0x000099c1
    d5b8:	00009c61 	.word	0x00009c61
    d5bc:	0000c1a5 	.word	0x0000c1a5
    d5c0:	00009a55 	.word	0x00009a55
    d5c4:	00009cf1 	.word	0x00009cf1
    d5c8:	00009b8d 	.word	0x00009b8d
    d5cc:	00009be1 	.word	0x00009be1
    d5d0:	00009b71 	.word	0x00009b71
    d5d4:	00009bf5 	.word	0x00009bf5

0000d5d8 <LORAREG_InitValidateAttrFnPtrsKR>:
	pValidateAttr[RX_FREQUENCY] = ValidateFreqKR;
    d5d8:	4b0d      	ldr	r3, [pc, #52]	; (d610 <LORAREG_InitValidateAttrFnPtrsKR+0x38>)
    d5da:	4a0e      	ldr	r2, [pc, #56]	; (d614 <LORAREG_InitValidateAttrFnPtrsKR+0x3c>)
    d5dc:	605a      	str	r2, [r3, #4]
	pValidateAttr[TX_FREQUENCY] = ValidateTxFreqT2;
    d5de:	4a0e      	ldr	r2, [pc, #56]	; (d618 <LORAREG_InitValidateAttrFnPtrsKR+0x40>)
    d5e0:	609a      	str	r2, [r3, #8]
	pValidateAttr[RX_DATARATE] = ValidateDataRate;
    d5e2:	4a0e      	ldr	r2, [pc, #56]	; (d61c <LORAREG_InitValidateAttrFnPtrsKR+0x44>)
    d5e4:	63da      	str	r2, [r3, #60]	; 0x3c
	pValidateAttr[TX_DATARATE] = ValidateDataRate;
    d5e6:	641a      	str	r2, [r3, #64]	; 0x40
	pValidateAttr[SUPPORTED_DR] = ValidateSupportedDr;
    d5e8:	490d      	ldr	r1, [pc, #52]	; (d620 <LORAREG_InitValidateAttrFnPtrsKR+0x48>)
    d5ea:	6459      	str	r1, [r3, #68]	; 0x44
	pValidateAttr[DATA_RANGE] = ValidateDataRangeT2;
    d5ec:	490d      	ldr	r1, [pc, #52]	; (d624 <LORAREG_InitValidateAttrFnPtrsKR+0x4c>)
    d5ee:	6499      	str	r1, [r3, #72]	; 0x48
	pValidateAttr[CHANNEL_ID] = ValidateChannelIdT2;
    d5f0:	490d      	ldr	r1, [pc, #52]	; (d628 <LORAREG_InitValidateAttrFnPtrsKR+0x50>)
    d5f2:	6559      	str	r1, [r3, #84]	; 0x54
	pValidateAttr[RX2_DATARATE] = ValidateDataRate;
    d5f4:	65da      	str	r2, [r3, #92]	; 0x5c
	pValidateAttr[RX1_DATARATE_OFFSET] = ValidateRx1DataRateOffset;
    d5f6:	4a0d      	ldr	r2, [pc, #52]	; (d62c <LORAREG_InitValidateAttrFnPtrsKR+0x54>)
    d5f8:	661a      	str	r2, [r3, #96]	; 0x60
	pValidateAttr[CHANNEL_MASK] = ValidateChannelMaskT2;
    d5fa:	4a0d      	ldr	r2, [pc, #52]	; (d630 <LORAREG_InitValidateAttrFnPtrsKR+0x58>)
    d5fc:	669a      	str	r2, [r3, #104]	; 0x68
	pValidateAttr[CHANNEL_MASK_CNTL] = ValidateChannelMaskCntlT2;
    d5fe:	4a0d      	ldr	r2, [pc, #52]	; (d634 <LORAREG_InitValidateAttrFnPtrsKR+0x5c>)
    d600:	66da      	str	r2, [r3, #108]	; 0x6c
	pValidateAttr[TX_PWR] = ValidateTxPower;
    d602:	4a0d      	ldr	r2, [pc, #52]	; (d638 <LORAREG_InitValidateAttrFnPtrsKR+0x60>)
    d604:	675a      	str	r2, [r3, #116]	; 0x74
	pValidateAttr[CHMASK_CHCNTL] = ValidateChMaskChCntlT2;
    d606:	490d      	ldr	r1, [pc, #52]	; (d63c <LORAREG_InitValidateAttrFnPtrsKR+0x64>)
    d608:	22e0      	movs	r2, #224	; 0xe0
    d60a:	5099      	str	r1, [r3, r2]
}
    d60c:	4770      	bx	lr
    d60e:	46c0      	nop			; (mov r8, r8)
    d610:	20000e64 	.word	0x20000e64
    d614:	0000aec5 	.word	0x0000aec5
    d618:	0000ae41 	.word	0x0000ae41
    d61c:	00009c49 	.word	0x00009c49
    d620:	00009c61 	.word	0x00009c61
    d624:	0000c1a5 	.word	0x0000c1a5
    d628:	00009a55 	.word	0x00009a55
    d62c:	00009cf1 	.word	0x00009cf1
    d630:	00009b8d 	.word	0x00009b8d
    d634:	00009be1 	.word	0x00009be1
    d638:	00009b71 	.word	0x00009b71
    d63c:	00009bf5 	.word	0x00009bf5

0000d640 <LORAREG_InitSetAttrFnPtrsNA>:
	pSetAttr[DATA_RANGE] = setDataRange;
    d640:	4b0b      	ldr	r3, [pc, #44]	; (d670 <LORAREG_InitSetAttrFnPtrsNA+0x30>)
    d642:	4a0c      	ldr	r2, [pc, #48]	; (d674 <LORAREG_InitSetAttrFnPtrsNA+0x34>)
    d644:	649a      	str	r2, [r3, #72]	; 0x48
	pSetAttr[CHANNEL_ID_STATUS] = setChannelIdStatus;
    d646:	4a0c      	ldr	r2, [pc, #48]	; (d678 <LORAREG_InitSetAttrFnPtrsNA+0x38>)
    d648:	659a      	str	r2, [r3, #88]	; 0x58
	pSetAttr[NEW_CHANNELS] = setNewChannelsT1;
    d64a:	4a0c      	ldr	r2, [pc, #48]	; (d67c <LORAREG_InitSetAttrFnPtrsNA+0x3c>)
    d64c:	671a      	str	r2, [r3, #112]	; 0x70
	pSetAttr[REG_JOIN_SUCCESS] = setJoinSuccess;
    d64e:	490c      	ldr	r1, [pc, #48]	; (d680 <LORAREG_InitSetAttrFnPtrsNA+0x40>)
    d650:	22e8      	movs	r2, #232	; 0xe8
    d652:	5099      	str	r1, [r3, r2]
	pSetAttr[REG_JOIN_ENABLE_ALL] = setEnableAllChs;
    d654:	490b      	ldr	r1, [pc, #44]	; (d684 <LORAREG_InitSetAttrFnPtrsNA+0x44>)
    d656:	3204      	adds	r2, #4
    d658:	5099      	str	r1, [r3, r2]
	pSetAttr[JOIN_DUTY_CYCLE_TIMER] = setJoinDutyCycleTimer;
    d65a:	490b      	ldr	r1, [pc, #44]	; (d688 <LORAREG_InitSetAttrFnPtrsNA+0x48>)
    d65c:	3a6c      	subs	r2, #108	; 0x6c
    d65e:	5099      	str	r1, [r3, r2]
	pSetAttr[JOIN_BACK_OFF_TIMER] = setJoinBackOffTimer;
    d660:	490a      	ldr	r1, [pc, #40]	; (d68c <LORAREG_InitSetAttrFnPtrsNA+0x4c>)
    d662:	3204      	adds	r2, #4
    d664:	5099      	str	r1, [r3, r2]
	pSetAttr[JOINBACKOFF_CNTL] = setJoinBackoffCntl;
    d666:	490a      	ldr	r1, [pc, #40]	; (d690 <LORAREG_InitSetAttrFnPtrsNA+0x50>)
    d668:	3260      	adds	r2, #96	; 0x60
    d66a:	5099      	str	r1, [r3, r2]
}
    d66c:	4770      	bx	lr
    d66e:	46c0      	nop			; (mov r8, r8)
    d670:	20000d70 	.word	0x20000d70
    d674:	0000c5e9 	.word	0x0000c5e9
    d678:	0000c55d 	.word	0x0000c55d
    d67c:	0000af0d 	.word	0x0000af0d
    d680:	0000a189 	.word	0x0000a189
    d684:	0000a119 	.word	0x0000a119
    d688:	0000b551 	.word	0x0000b551
    d68c:	0000b4dd 	.word	0x0000b4dd
    d690:	0000b425 	.word	0x0000b425

0000d694 <LORAREG_InitSetAttrFnPtrsEU>:
	pSetAttr[DATA_RANGE] = setDataRangeT2;
    d694:	4b0e      	ldr	r3, [pc, #56]	; (d6d0 <LORAREG_InitSetAttrFnPtrsEU+0x3c>)
    d696:	4a0f      	ldr	r2, [pc, #60]	; (d6d4 <LORAREG_InitSetAttrFnPtrsEU+0x40>)
    d698:	649a      	str	r2, [r3, #72]	; 0x48
	pSetAttr[CHANNEL_ID_STATUS] = setChannelIdStatusT2;
    d69a:	4a0f      	ldr	r2, [pc, #60]	; (d6d8 <LORAREG_InitSetAttrFnPtrsEU+0x44>)
    d69c:	659a      	str	r2, [r3, #88]	; 0x58
	pSetAttr[DUTY_CYCLE] = setDutyCycle;
    d69e:	4a0f      	ldr	r2, [pc, #60]	; (d6dc <LORAREG_InitSetAttrFnPtrsEU+0x48>)
    d6a0:	679a      	str	r2, [r3, #120]	; 0x78
	pSetAttr[DUTY_CYCLE_TIMER] = setDutyCycleTimer;
    d6a2:	4a0f      	ldr	r2, [pc, #60]	; (d6e0 <LORAREG_InitSetAttrFnPtrsEU+0x4c>)
    d6a4:	67da      	str	r2, [r3, #124]	; 0x7c
	pSetAttr[FREQUENCY] = setFrequency;
    d6a6:	4a0f      	ldr	r2, [pc, #60]	; (d6e4 <LORAREG_InitSetAttrFnPtrsEU+0x50>)
    d6a8:	601a      	str	r2, [r3, #0]
	pSetAttr[NEW_CHANNELS] = setNewChannel;
    d6aa:	4a0f      	ldr	r2, [pc, #60]	; (d6e8 <LORAREG_InitSetAttrFnPtrsEU+0x54>)
    d6ac:	671a      	str	r2, [r3, #112]	; 0x70
	pSetAttr[JOIN_DUTY_CYCLE_TIMER]= setJoinDutyCycleTimer;
    d6ae:	490f      	ldr	r1, [pc, #60]	; (d6ec <LORAREG_InitSetAttrFnPtrsEU+0x58>)
    d6b0:	2280      	movs	r2, #128	; 0x80
    d6b2:	5099      	str	r1, [r3, r2]
	pSetAttr[JOIN_BACK_OFF_TIMER] = setJoinBackOffTimer;
    d6b4:	490e      	ldr	r1, [pc, #56]	; (d6f0 <LORAREG_InitSetAttrFnPtrsEU+0x5c>)
    d6b6:	3204      	adds	r2, #4
    d6b8:	5099      	str	r1, [r3, r2]
	pSetAttr[DL_FREQUENCY] = setDlFrequency;
    d6ba:	490e      	ldr	r1, [pc, #56]	; (d6f4 <LORAREG_InitSetAttrFnPtrsEU+0x60>)
    d6bc:	324c      	adds	r2, #76	; 0x4c
    d6be:	5099      	str	r1, [r3, r2]
	pSetAttr[JOINBACKOFF_CNTL] = setJoinBackoffCntl;
    d6c0:	490d      	ldr	r1, [pc, #52]	; (d6f8 <LORAREG_InitSetAttrFnPtrsEU+0x64>)
    d6c2:	3214      	adds	r2, #20
    d6c4:	5099      	str	r1, [r3, r2]
	pSetAttr[CHLIST_DEFAULTS] = setChlistDefaultState;
    d6c6:	490d      	ldr	r1, [pc, #52]	; (d6fc <LORAREG_InitSetAttrFnPtrsEU+0x68>)
    d6c8:	320c      	adds	r2, #12
    d6ca:	5099      	str	r1, [r3, r2]
}
    d6cc:	4770      	bx	lr
    d6ce:	46c0      	nop			; (mov r8, r8)
    d6d0:	20000d70 	.word	0x20000d70
    d6d4:	0000c1d1 	.word	0x0000c1d1
    d6d8:	0000a3c5 	.word	0x0000a3c5
    d6dc:	0000b16d 	.word	0x0000b16d
    d6e0:	0000b7dd 	.word	0x0000b7dd
    d6e4:	0000b049 	.word	0x0000b049
    d6e8:	0000d955 	.word	0x0000d955
    d6ec:	0000b551 	.word	0x0000b551
    d6f0:	0000b4dd 	.word	0x0000b4dd
    d6f4:	0000afa5 	.word	0x0000afa5
    d6f8:	0000b425 	.word	0x0000b425
    d6fc:	00009e79 	.word	0x00009e79

0000d700 <LORAREG_InitSetAttrFnPtrsAS>:
	pSetAttr[DATA_RANGE] = setDataRangeT2;
    d700:	4b0f      	ldr	r3, [pc, #60]	; (d740 <LORAREG_InitSetAttrFnPtrsAS+0x40>)
    d702:	4a10      	ldr	r2, [pc, #64]	; (d744 <LORAREG_InitSetAttrFnPtrsAS+0x44>)
    d704:	649a      	str	r2, [r3, #72]	; 0x48
	pSetAttr[CHANNEL_ID_STATUS] = setChannelIdStatusT3;
    d706:	4a10      	ldr	r2, [pc, #64]	; (d748 <LORAREG_InitSetAttrFnPtrsAS+0x48>)
    d708:	659a      	str	r2, [r3, #88]	; 0x58
	pSetAttr[FREQUENCY] = setFrequency;
    d70a:	4a10      	ldr	r2, [pc, #64]	; (d74c <LORAREG_InitSetAttrFnPtrsAS+0x4c>)
    d70c:	601a      	str	r2, [r3, #0]
	pSetAttr[DL_FREQUENCY] = setDlFrequency;
    d70e:	4910      	ldr	r1, [pc, #64]	; (d750 <LORAREG_InitSetAttrFnPtrsAS+0x50>)
    d710:	22d0      	movs	r2, #208	; 0xd0
    d712:	5099      	str	r1, [r3, r2]
    pSetAttr[NEW_CHANNELS] = setNewChannel;
    d714:	4a0f      	ldr	r2, [pc, #60]	; (d754 <LORAREG_InitSetAttrFnPtrsAS+0x54>)
    d716:	671a      	str	r2, [r3, #112]	; 0x70
	pSetAttr[JOIN_DUTY_CYCLE_TIMER] = setJoinDutyCycleTimer;
    d718:	490f      	ldr	r1, [pc, #60]	; (d758 <LORAREG_InitSetAttrFnPtrsAS+0x58>)
    d71a:	2280      	movs	r2, #128	; 0x80
    d71c:	5099      	str	r1, [r3, r2]
	pSetAttr[JOIN_BACK_OFF_TIMER] = setJoinBackOffTimer;
    d71e:	490f      	ldr	r1, [pc, #60]	; (d75c <LORAREG_InitSetAttrFnPtrsAS+0x5c>)
    d720:	3204      	adds	r2, #4
    d722:	5099      	str	r1, [r3, r2]
	pSetAttr[TX_PARAMS] = setTxParams;
    d724:	490e      	ldr	r1, [pc, #56]	; (d760 <LORAREG_InitSetAttrFnPtrsAS+0x60>)
    d726:	3250      	adds	r2, #80	; 0x50
    d728:	5099      	str	r1, [r3, r2]
	pSetAttr[DUTY_CYCLE] = setDutyCycle;
    d72a:	4a0e      	ldr	r2, [pc, #56]	; (d764 <LORAREG_InitSetAttrFnPtrsAS+0x64>)
    d72c:	679a      	str	r2, [r3, #120]	; 0x78
	pSetAttr[DUTY_CYCLE_TIMER] = setDutyCycleTimer;
    d72e:	4a0e      	ldr	r2, [pc, #56]	; (d768 <LORAREG_InitSetAttrFnPtrsAS+0x68>)
    d730:	67da      	str	r2, [r3, #124]	; 0x7c
	pSetAttr[JOINBACKOFF_CNTL] = setJoinBackoffCntl;
    d732:	490e      	ldr	r1, [pc, #56]	; (d76c <LORAREG_InitSetAttrFnPtrsAS+0x6c>)
    d734:	22e4      	movs	r2, #228	; 0xe4
    d736:	5099      	str	r1, [r3, r2]
	pSetAttr[CHLIST_DEFAULTS] = setChlistDefaultState;
    d738:	490d      	ldr	r1, [pc, #52]	; (d770 <LORAREG_InitSetAttrFnPtrsAS+0x70>)
    d73a:	320c      	adds	r2, #12
    d73c:	5099      	str	r1, [r3, r2]
}
    d73e:	4770      	bx	lr
    d740:	20000d70 	.word	0x20000d70
    d744:	0000c1d1 	.word	0x0000c1d1
    d748:	0000a53d 	.word	0x0000a53d
    d74c:	0000b049 	.word	0x0000b049
    d750:	0000afa5 	.word	0x0000afa5
    d754:	0000d955 	.word	0x0000d955
    d758:	0000b551 	.word	0x0000b551
    d75c:	0000b4dd 	.word	0x0000b4dd
    d760:	00009e25 	.word	0x00009e25
    d764:	0000b16d 	.word	0x0000b16d
    d768:	0000b7dd 	.word	0x0000b7dd
    d76c:	0000b425 	.word	0x0000b425
    d770:	00009e79 	.word	0x00009e79

0000d774 <LORAREG_InitSetAttrFnPtrsAU>:
	pSetAttr[DATA_RANGE] = setDataRange;
    d774:	4b0b      	ldr	r3, [pc, #44]	; (d7a4 <LORAREG_InitSetAttrFnPtrsAU+0x30>)
    d776:	4a0c      	ldr	r2, [pc, #48]	; (d7a8 <LORAREG_InitSetAttrFnPtrsAU+0x34>)
    d778:	649a      	str	r2, [r3, #72]	; 0x48
	pSetAttr[CHANNEL_ID_STATUS] = setChannelIdStatus;
    d77a:	4a0c      	ldr	r2, [pc, #48]	; (d7ac <LORAREG_InitSetAttrFnPtrsAU+0x38>)
    d77c:	659a      	str	r2, [r3, #88]	; 0x58
	pSetAttr[NEW_CHANNELS] = setNewChannelsT1;
    d77e:	4a0c      	ldr	r2, [pc, #48]	; (d7b0 <LORAREG_InitSetAttrFnPtrsAU+0x3c>)
    d780:	671a      	str	r2, [r3, #112]	; 0x70
	pSetAttr[REG_JOIN_SUCCESS] = setJoinSuccess;
    d782:	490c      	ldr	r1, [pc, #48]	; (d7b4 <LORAREG_InitSetAttrFnPtrsAU+0x40>)
    d784:	22e8      	movs	r2, #232	; 0xe8
    d786:	5099      	str	r1, [r3, r2]
	pSetAttr[REG_JOIN_ENABLE_ALL] = setEnableAllChs;
    d788:	490b      	ldr	r1, [pc, #44]	; (d7b8 <LORAREG_InitSetAttrFnPtrsAU+0x44>)
    d78a:	3204      	adds	r2, #4
    d78c:	5099      	str	r1, [r3, r2]
	pSetAttr[JOIN_DUTY_CYCLE_TIMER]= setJoinDutyCycleTimer;
    d78e:	490b      	ldr	r1, [pc, #44]	; (d7bc <LORAREG_InitSetAttrFnPtrsAU+0x48>)
    d790:	3a6c      	subs	r2, #108	; 0x6c
    d792:	5099      	str	r1, [r3, r2]
	pSetAttr[JOIN_BACK_OFF_TIMER] = setJoinBackOffTimer;
    d794:	490a      	ldr	r1, [pc, #40]	; (d7c0 <LORAREG_InitSetAttrFnPtrsAU+0x4c>)
    d796:	3204      	adds	r2, #4
    d798:	5099      	str	r1, [r3, r2]
	pSetAttr[JOINBACKOFF_CNTL] = setJoinBackoffCntl;
    d79a:	490a      	ldr	r1, [pc, #40]	; (d7c4 <LORAREG_InitSetAttrFnPtrsAU+0x50>)
    d79c:	3260      	adds	r2, #96	; 0x60
    d79e:	5099      	str	r1, [r3, r2]
}
    d7a0:	4770      	bx	lr
    d7a2:	46c0      	nop			; (mov r8, r8)
    d7a4:	20000d70 	.word	0x20000d70
    d7a8:	0000c5e9 	.word	0x0000c5e9
    d7ac:	0000c55d 	.word	0x0000c55d
    d7b0:	0000af0d 	.word	0x0000af0d
    d7b4:	0000a189 	.word	0x0000a189
    d7b8:	0000a119 	.word	0x0000a119
    d7bc:	0000b551 	.word	0x0000b551
    d7c0:	0000b4dd 	.word	0x0000b4dd
    d7c4:	0000b425 	.word	0x0000b425

0000d7c8 <LORAREG_InitSetAttrFnPtrsIN>:
	pSetAttr[DATA_RANGE] = setDataRangeT2;
    d7c8:	4b0d      	ldr	r3, [pc, #52]	; (d800 <LORAREG_InitSetAttrFnPtrsIN+0x38>)
    d7ca:	4a0e      	ldr	r2, [pc, #56]	; (d804 <LORAREG_InitSetAttrFnPtrsIN+0x3c>)
    d7cc:	649a      	str	r2, [r3, #72]	; 0x48
	pSetAttr[CHANNEL_ID_STATUS] = setChannelIdStatusT2;
    d7ce:	4a0e      	ldr	r2, [pc, #56]	; (d808 <LORAREG_InitSetAttrFnPtrsIN+0x40>)
    d7d0:	659a      	str	r2, [r3, #88]	; 0x58
	pSetAttr[FREQUENCY] = setFrequency;
    d7d2:	4a0e      	ldr	r2, [pc, #56]	; (d80c <LORAREG_InitSetAttrFnPtrsIN+0x44>)
    d7d4:	601a      	str	r2, [r3, #0]
	pSetAttr[NEW_CHANNELS] = setNewChannel;
    d7d6:	4a0e      	ldr	r2, [pc, #56]	; (d810 <LORAREG_InitSetAttrFnPtrsIN+0x48>)
    d7d8:	671a      	str	r2, [r3, #112]	; 0x70
	pSetAttr[JOIN_DUTY_CYCLE_TIMER]= setJoinDutyCycleTimer;
    d7da:	490e      	ldr	r1, [pc, #56]	; (d814 <LORAREG_InitSetAttrFnPtrsIN+0x4c>)
    d7dc:	2280      	movs	r2, #128	; 0x80
    d7de:	5099      	str	r1, [r3, r2]
	pSetAttr[JOIN_BACK_OFF_TIMER] = setJoinBackOffTimer;
    d7e0:	490d      	ldr	r1, [pc, #52]	; (d818 <LORAREG_InitSetAttrFnPtrsIN+0x50>)
    d7e2:	3204      	adds	r2, #4
    d7e4:	5099      	str	r1, [r3, r2]
	pSetAttr[DL_FREQUENCY] = setDlFrequency;
    d7e6:	490d      	ldr	r1, [pc, #52]	; (d81c <LORAREG_InitSetAttrFnPtrsIN+0x54>)
    d7e8:	324c      	adds	r2, #76	; 0x4c
    d7ea:	5099      	str	r1, [r3, r2]
	pSetAttr[TX_PARAMS] = setTxParams;
    d7ec:	490c      	ldr	r1, [pc, #48]	; (d820 <LORAREG_InitSetAttrFnPtrsIN+0x58>)
    d7ee:	3204      	adds	r2, #4
    d7f0:	5099      	str	r1, [r3, r2]
	pSetAttr[JOINBACKOFF_CNTL] = setJoinBackoffCntl;
    d7f2:	490c      	ldr	r1, [pc, #48]	; (d824 <LORAREG_InitSetAttrFnPtrsIN+0x5c>)
    d7f4:	3210      	adds	r2, #16
    d7f6:	5099      	str	r1, [r3, r2]
	pSetAttr[CHLIST_DEFAULTS] = setChlistDefaultState;
    d7f8:	490b      	ldr	r1, [pc, #44]	; (d828 <LORAREG_InitSetAttrFnPtrsIN+0x60>)
    d7fa:	320c      	adds	r2, #12
    d7fc:	5099      	str	r1, [r3, r2]
}
    d7fe:	4770      	bx	lr
    d800:	20000d70 	.word	0x20000d70
    d804:	0000c1d1 	.word	0x0000c1d1
    d808:	0000a3c5 	.word	0x0000a3c5
    d80c:	0000b049 	.word	0x0000b049
    d810:	0000d955 	.word	0x0000d955
    d814:	0000b551 	.word	0x0000b551
    d818:	0000b4dd 	.word	0x0000b4dd
    d81c:	0000afa5 	.word	0x0000afa5
    d820:	00009e25 	.word	0x00009e25
    d824:	0000b425 	.word	0x0000b425
    d828:	00009e79 	.word	0x00009e79

0000d82c <LORAREG_InitSetAttrFnPtrsJP>:
	pSetAttr[DATA_RANGE] = setDataRangeT2;
    d82c:	4b11      	ldr	r3, [pc, #68]	; (d874 <LORAREG_InitSetAttrFnPtrsJP+0x48>)
    d82e:	4a12      	ldr	r2, [pc, #72]	; (d878 <LORAREG_InitSetAttrFnPtrsJP+0x4c>)
    d830:	649a      	str	r2, [r3, #72]	; 0x48
	pSetAttr[CHANNEL_ID_STATUS] = setChannelIdStatusT3;
    d832:	4a12      	ldr	r2, [pc, #72]	; (d87c <LORAREG_InitSetAttrFnPtrsJP+0x50>)
    d834:	659a      	str	r2, [r3, #88]	; 0x58
	pSetAttr[LBT_TIMER] = setLBTTimer;
    d836:	4912      	ldr	r1, [pc, #72]	; (d880 <LORAREG_InitSetAttrFnPtrsJP+0x54>)
    d838:	2288      	movs	r2, #136	; 0x88
    d83a:	5099      	str	r1, [r3, r2]
	pSetAttr[FREQUENCY] = setFrequency;
    d83c:	4a11      	ldr	r2, [pc, #68]	; (d884 <LORAREG_InitSetAttrFnPtrsJP+0x58>)
    d83e:	601a      	str	r2, [r3, #0]
	pSetAttr[DL_FREQUENCY] = setDlFrequency;
    d840:	4911      	ldr	r1, [pc, #68]	; (d888 <LORAREG_InitSetAttrFnPtrsJP+0x5c>)
    d842:	22d0      	movs	r2, #208	; 0xd0
    d844:	5099      	str	r1, [r3, r2]
	pSetAttr[NEW_CHANNELS] = setNewChannel;
    d846:	4a11      	ldr	r2, [pc, #68]	; (d88c <LORAREG_InitSetAttrFnPtrsJP+0x60>)
    d848:	671a      	str	r2, [r3, #112]	; 0x70
	pSetAttr[JOIN_DUTY_CYCLE_TIMER]= setJoinDutyCycleTimer;
    d84a:	4911      	ldr	r1, [pc, #68]	; (d890 <LORAREG_InitSetAttrFnPtrsJP+0x64>)
    d84c:	2280      	movs	r2, #128	; 0x80
    d84e:	5099      	str	r1, [r3, r2]
	pSetAttr[JOIN_BACK_OFF_TIMER] = setJoinBackOffTimer;
    d850:	4910      	ldr	r1, [pc, #64]	; (d894 <LORAREG_InitSetAttrFnPtrsJP+0x68>)
    d852:	3204      	adds	r2, #4
    d854:	5099      	str	r1, [r3, r2]
	pSetAttr[TX_PARAMS] = setTxParams;
    d856:	4910      	ldr	r1, [pc, #64]	; (d898 <LORAREG_InitSetAttrFnPtrsJP+0x6c>)
    d858:	3250      	adds	r2, #80	; 0x50
    d85a:	5099      	str	r1, [r3, r2]
	pSetAttr[DUTY_CYCLE] = setDutyCycle;
    d85c:	4a0f      	ldr	r2, [pc, #60]	; (d89c <LORAREG_InitSetAttrFnPtrsJP+0x70>)
    d85e:	679a      	str	r2, [r3, #120]	; 0x78
	pSetAttr[DUTY_CYCLE_TIMER] = setDutyCycleTimer;
    d860:	4a0f      	ldr	r2, [pc, #60]	; (d8a0 <LORAREG_InitSetAttrFnPtrsJP+0x74>)
    d862:	67da      	str	r2, [r3, #124]	; 0x7c
	pSetAttr[JOINBACKOFF_CNTL] = setJoinBackoffCntl;
    d864:	490f      	ldr	r1, [pc, #60]	; (d8a4 <LORAREG_InitSetAttrFnPtrsJP+0x78>)
    d866:	22e4      	movs	r2, #228	; 0xe4
    d868:	5099      	str	r1, [r3, r2]
	pSetAttr[CHLIST_DEFAULTS] = setChlistDefaultState;
    d86a:	490f      	ldr	r1, [pc, #60]	; (d8a8 <LORAREG_InitSetAttrFnPtrsJP+0x7c>)
    d86c:	320c      	adds	r2, #12
    d86e:	5099      	str	r1, [r3, r2]
}
    d870:	4770      	bx	lr
    d872:	46c0      	nop			; (mov r8, r8)
    d874:	20000d70 	.word	0x20000d70
    d878:	0000c1d1 	.word	0x0000c1d1
    d87c:	0000a53d 	.word	0x0000a53d
    d880:	0000bd51 	.word	0x0000bd51
    d884:	0000b049 	.word	0x0000b049
    d888:	0000afa5 	.word	0x0000afa5
    d88c:	0000d955 	.word	0x0000d955
    d890:	0000b551 	.word	0x0000b551
    d894:	0000b4dd 	.word	0x0000b4dd
    d898:	00009e25 	.word	0x00009e25
    d89c:	0000b16d 	.word	0x0000b16d
    d8a0:	0000b7dd 	.word	0x0000b7dd
    d8a4:	0000b425 	.word	0x0000b425
    d8a8:	00009e79 	.word	0x00009e79

0000d8ac <LORAREG_InitSetAttrFnPtrsKR>:
	pSetAttr[DATA_RANGE] = setDataRangeT2;
    d8ac:	4b0f      	ldr	r3, [pc, #60]	; (d8ec <LORAREG_InitSetAttrFnPtrsKR+0x40>)
    d8ae:	4a10      	ldr	r2, [pc, #64]	; (d8f0 <LORAREG_InitSetAttrFnPtrsKR+0x44>)
    d8b0:	649a      	str	r2, [r3, #72]	; 0x48
	pSetAttr[CHANNEL_ID_STATUS] = setChannelIdStatusT3;
    d8b2:	4a10      	ldr	r2, [pc, #64]	; (d8f4 <LORAREG_InitSetAttrFnPtrsKR+0x48>)
    d8b4:	659a      	str	r2, [r3, #88]	; 0x58
	pSetAttr[LBT_TIMER] = setLBTTimer;
    d8b6:	4910      	ldr	r1, [pc, #64]	; (d8f8 <LORAREG_InitSetAttrFnPtrsKR+0x4c>)
    d8b8:	2288      	movs	r2, #136	; 0x88
    d8ba:	5099      	str	r1, [r3, r2]
	pSetAttr[FREQUENCY] = setFrequency;
    d8bc:	4a0f      	ldr	r2, [pc, #60]	; (d8fc <LORAREG_InitSetAttrFnPtrsKR+0x50>)
    d8be:	601a      	str	r2, [r3, #0]
	pSetAttr[DL_FREQUENCY] = setDlFrequency;
    d8c0:	490f      	ldr	r1, [pc, #60]	; (d900 <LORAREG_InitSetAttrFnPtrsKR+0x54>)
    d8c2:	22d0      	movs	r2, #208	; 0xd0
    d8c4:	5099      	str	r1, [r3, r2]
	pSetAttr[NEW_CHANNELS] = setNewChannel;
    d8c6:	4a0f      	ldr	r2, [pc, #60]	; (d904 <LORAREG_InitSetAttrFnPtrsKR+0x58>)
    d8c8:	671a      	str	r2, [r3, #112]	; 0x70
	pSetAttr[JOIN_DUTY_CYCLE_TIMER]= setJoinDutyCycleTimer;
    d8ca:	490f      	ldr	r1, [pc, #60]	; (d908 <LORAREG_InitSetAttrFnPtrsKR+0x5c>)
    d8cc:	2280      	movs	r2, #128	; 0x80
    d8ce:	5099      	str	r1, [r3, r2]
	pSetAttr[JOIN_BACK_OFF_TIMER] = setJoinBackOffTimer;
    d8d0:	490e      	ldr	r1, [pc, #56]	; (d90c <LORAREG_InitSetAttrFnPtrsKR+0x60>)
    d8d2:	3204      	adds	r2, #4
    d8d4:	5099      	str	r1, [r3, r2]
	pSetAttr[TX_PARAMS] = setTxParams;
    d8d6:	490e      	ldr	r1, [pc, #56]	; (d910 <LORAREG_InitSetAttrFnPtrsKR+0x64>)
    d8d8:	3250      	adds	r2, #80	; 0x50
    d8da:	5099      	str	r1, [r3, r2]
	pSetAttr[JOINBACKOFF_CNTL] = setJoinBackoffCntl;
    d8dc:	490d      	ldr	r1, [pc, #52]	; (d914 <LORAREG_InitSetAttrFnPtrsKR+0x68>)
    d8de:	3210      	adds	r2, #16
    d8e0:	5099      	str	r1, [r3, r2]
	pSetAttr[CHLIST_DEFAULTS] = setChlistDefaultState;
    d8e2:	490d      	ldr	r1, [pc, #52]	; (d918 <LORAREG_InitSetAttrFnPtrsKR+0x6c>)
    d8e4:	320c      	adds	r2, #12
    d8e6:	5099      	str	r1, [r3, r2]
}
    d8e8:	4770      	bx	lr
    d8ea:	46c0      	nop			; (mov r8, r8)
    d8ec:	20000d70 	.word	0x20000d70
    d8f0:	0000c1d1 	.word	0x0000c1d1
    d8f4:	0000a53d 	.word	0x0000a53d
    d8f8:	0000bd51 	.word	0x0000bd51
    d8fc:	0000b049 	.word	0x0000b049
    d900:	0000afa5 	.word	0x0000afa5
    d904:	0000d955 	.word	0x0000d955
    d908:	0000b551 	.word	0x0000b551
    d90c:	0000b4dd 	.word	0x0000b4dd
    d910:	00009e25 	.word	0x00009e25
    d914:	0000b425 	.word	0x0000b425
    d918:	00009e79 	.word	0x00009e79

0000d91c <LORAREG_GetAttr>:
{
    d91c:	b510      	push	{r4, lr}
	StackRetStatus_t result = LORAWAN_INVALID_PARAMETER;
    d91e:	230a      	movs	r3, #10
	if(attrType < REG_NUM_ATTRIBUTES)
    d920:	283c      	cmp	r0, #60	; 0x3c
    d922:	d901      	bls.n	d928 <LORAREG_GetAttr+0xc>
}
    d924:	0018      	movs	r0, r3
    d926:	bd10      	pop	{r4, pc}
	    result = pGetAttr[attrType](attrType, attrInput,attrOutput);	
    d928:	0084      	lsls	r4, r0, #2
    d92a:	4b02      	ldr	r3, [pc, #8]	; (d934 <LORAREG_GetAttr+0x18>)
    d92c:	58e3      	ldr	r3, [r4, r3]
    d92e:	4798      	blx	r3
    d930:	0003      	movs	r3, r0
    d932:	e7f7      	b.n	d924 <LORAREG_GetAttr+0x8>
    d934:	20000c7c 	.word	0x20000c7c

0000d938 <LORAREG_ValidateAttr>:
{
    d938:	b510      	push	{r4, lr}
	StackRetStatus_t result = LORAWAN_INVALID_PARAMETER;
    d93a:	230a      	movs	r3, #10
	if(attrType < REG_NUM_ATTRIBUTES)
    d93c:	283c      	cmp	r0, #60	; 0x3c
    d93e:	d901      	bls.n	d944 <LORAREG_ValidateAttr+0xc>
}
    d940:	0018      	movs	r0, r3
    d942:	bd10      	pop	{r4, pc}
	    result = pValidateAttr[attrType](attrType, attrInput);		
    d944:	0082      	lsls	r2, r0, #2
    d946:	4b02      	ldr	r3, [pc, #8]	; (d950 <LORAREG_ValidateAttr+0x18>)
    d948:	58d3      	ldr	r3, [r2, r3]
    d94a:	4798      	blx	r3
    d94c:	0003      	movs	r3, r0
    d94e:	e7f7      	b.n	d940 <LORAREG_ValidateAttr+0x8>
    d950:	20000e64 	.word	0x20000e64

0000d954 <setNewChannel>:
{
    d954:	b5f0      	push	{r4, r5, r6, r7, lr}
    d956:	46d6      	mov	lr, sl
    d958:	464f      	mov	r7, r9
    d95a:	b580      	push	{r7, lr}
    d95c:	b085      	sub	sp, #20
	if(((ISM_ASBAND) & (1 << RegParams.band)) != 0 || ((ISM_JPN923) == RegParams.band))
    d95e:	232e      	movs	r3, #46	; 0x2e
    d960:	4a30      	ldr	r2, [pc, #192]	; (da24 <setNewChannel+0xd0>)
    d962:	5cd2      	ldrb	r2, [r2, r3]
    d964:	4b30      	ldr	r3, [pc, #192]	; (da28 <setNewChannel+0xd4>)
    d966:	4113      	asrs	r3, r2
    d968:	07db      	lsls	r3, r3, #31
    d96a:	d407      	bmi.n	d97c <setNewChannel+0x28>
    d96c:	2a05      	cmp	r2, #5
    d96e:	d020      	beq.n	d9b2 <setNewChannel+0x5e>
	else if( ISM_KR920 == RegParams.band)
    d970:	2a04      	cmp	r2, #4
    d972:	d020      	beq.n	d9b6 <setNewChannel+0x62>
	else if( ISM_IND865 == RegParams.band)
    d974:	2a0f      	cmp	r2, #15
    d976:	d020      	beq.n	d9ba <setNewChannel+0x66>
		pUpdateChidStatus = UpdateChannelIdStatusT2;
    d978:	4e2c      	ldr	r6, [pc, #176]	; (da2c <setNewChannel+0xd8>)
    d97a:	e000      	b.n	d97e <setNewChannel+0x2a>
		pUpdateChidStatus = UpdateChannelIdStatusT3;
    d97c:	4e2c      	ldr	r6, [pc, #176]	; (da30 <setNewChannel+0xdc>)
	memcpy(&newCh, attrInput,sizeof(UpdateNewCh_t));
    d97e:	ac03      	add	r4, sp, #12
    d980:	2204      	movs	r2, #4
    d982:	0020      	movs	r0, r4
    d984:	4b2b      	ldr	r3, [pc, #172]	; (da34 <setNewChannel+0xe0>)
    d986:	4798      	blx	r3
	valchMaskCntl.chnlMask = newCh.channelMask;
    d988:	8823      	ldrh	r3, [r4, #0]
    d98a:	aa02      	add	r2, sp, #8
    d98c:	8053      	strh	r3, [r2, #2]
	valchMaskCntl.chnlMaskCntl = newCh.channelMaskCntl;
    d98e:	78a4      	ldrb	r4, [r4, #2]
    d990:	7014      	strb	r4, [r2, #0]
	if(LORAREG_ValidateAttr(CHMASK_CHCNTL,&valchMaskCntl) != LORAWAN_SUCCESS)
    d992:	0011      	movs	r1, r2
    d994:	2038      	movs	r0, #56	; 0x38
    d996:	4b28      	ldr	r3, [pc, #160]	; (da38 <setNewChannel+0xe4>)
    d998:	4798      	blx	r3
    d99a:	0003      	movs	r3, r0
    d99c:	9001      	str	r0, [sp, #4]
    d99e:	2808      	cmp	r0, #8
    d9a0:	d00d      	beq.n	d9be <setNewChannel+0x6a>
		result = LORAWAN_INVALID_PARAMETER;
    d9a2:	230a      	movs	r3, #10
    d9a4:	9301      	str	r3, [sp, #4]
}
    d9a6:	9801      	ldr	r0, [sp, #4]
    d9a8:	b005      	add	sp, #20
    d9aa:	bc0c      	pop	{r2, r3}
    d9ac:	4691      	mov	r9, r2
    d9ae:	469a      	mov	sl, r3
    d9b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		pUpdateChidStatus = UpdateChannelIdStatusT3;
    d9b2:	4e1f      	ldr	r6, [pc, #124]	; (da30 <setNewChannel+0xdc>)
    d9b4:	e7e3      	b.n	d97e <setNewChannel+0x2a>
		pUpdateChidStatus = UpdateChannelIdStatusT4;
    d9b6:	4e21      	ldr	r6, [pc, #132]	; (da3c <setNewChannel+0xe8>)
    d9b8:	e7e1      	b.n	d97e <setNewChannel+0x2a>
		pUpdateChidStatus = UpdateChannelIdStatus;
    d9ba:	4e21      	ldr	r6, [pc, #132]	; (da40 <setNewChannel+0xec>)
    d9bc:	e7df      	b.n	d97e <setNewChannel+0x2a>
		if(newCh.channelMaskCntl == 6)
    d9be:	2c06      	cmp	r4, #6
    d9c0:	d00b      	beq.n	d9da <setNewChannel+0x86>
		else if(newCh.channelMaskCntl == 0)
    d9c2:	2c00      	cmp	r4, #0
    d9c4:	d1ef      	bne.n	d9a6 <setNewChannel+0x52>
			for(i = 0; i < RegParams.maxChannels; i++)
    d9c6:	232a      	movs	r3, #42	; 0x2a
    d9c8:	4a16      	ldr	r2, [pc, #88]	; (da24 <setNewChannel+0xd0>)
    d9ca:	56d3      	ldrsb	r3, [r2, r3]
    d9cc:	2b00      	cmp	r3, #0
    d9ce:	ddea      	ble.n	d9a6 <setNewChannel+0x52>
				if((newCh.channelMask & BIT0) == BIT0)
    d9d0:	af03      	add	r7, sp, #12
    d9d2:	2301      	movs	r3, #1
    d9d4:	4699      	mov	r9, r3
			for(i = 0; i < RegParams.maxChannels; i++)
    d9d6:	4692      	mov	sl, r2
    d9d8:	e01c      	b.n	da14 <setNewChannel+0xc0>
			for(i = 0; i < RegParams.maxChannels; i++)
    d9da:	3322      	adds	r3, #34	; 0x22
    d9dc:	4a11      	ldr	r2, [pc, #68]	; (da24 <setNewChannel+0xd0>)
    d9de:	56d3      	ldrsb	r3, [r2, r3]
    d9e0:	2b00      	cmp	r3, #0
    d9e2:	dde0      	ble.n	d9a6 <setNewChannel+0x52>
    d9e4:	2400      	movs	r4, #0
    d9e6:	0017      	movs	r7, r2
    d9e8:	252a      	movs	r5, #42	; 0x2a
				pUpdateChidStatus(i,ENABLED);
    d9ea:	2101      	movs	r1, #1
    d9ec:	0020      	movs	r0, r4
    d9ee:	47b0      	blx	r6
			for(i = 0; i < RegParams.maxChannels; i++)
    d9f0:	3401      	adds	r4, #1
    d9f2:	b2e4      	uxtb	r4, r4
    d9f4:	577b      	ldrsb	r3, [r7, r5]
    d9f6:	429c      	cmp	r4, r3
    d9f8:	dbf7      	blt.n	d9ea <setNewChannel+0x96>
    d9fa:	e7d4      	b.n	d9a6 <setNewChannel+0x52>
					pUpdateChidStatus(i,DISABLED);
    d9fc:	2100      	movs	r1, #0
    d9fe:	0020      	movs	r0, r4
    da00:	47b0      	blx	r6
				newCh.channelMask = newCh.channelMask >> SHIFT1;
    da02:	086d      	lsrs	r5, r5, #1
    da04:	803d      	strh	r5, [r7, #0]
			for(i = 0; i < RegParams.maxChannels; i++)
    da06:	3401      	adds	r4, #1
    da08:	b2e4      	uxtb	r4, r4
    da0a:	232a      	movs	r3, #42	; 0x2a
    da0c:	4652      	mov	r2, sl
    da0e:	56d3      	ldrsb	r3, [r2, r3]
    da10:	429c      	cmp	r4, r3
    da12:	dac8      	bge.n	d9a6 <setNewChannel+0x52>
				if((newCh.channelMask & BIT0) == BIT0)
    da14:	883d      	ldrh	r5, [r7, #0]
    da16:	464b      	mov	r3, r9
    da18:	422b      	tst	r3, r5
    da1a:	d0ef      	beq.n	d9fc <setNewChannel+0xa8>
					pUpdateChidStatus(i, ENABLED);
    da1c:	4649      	mov	r1, r9
    da1e:	0020      	movs	r0, r4
    da20:	47b0      	blx	r6
    da22:	e7ee      	b.n	da02 <setNewChannel+0xae>
    da24:	200024d0 	.word	0x200024d0
    da28:	00007fc0 	.word	0x00007fc0
    da2c:	0000a2b1 	.word	0x0000a2b1
    da30:	0000a4c5 	.word	0x0000a4c5
    da34:	00019da5 	.word	0x00019da5
    da38:	0000d939 	.word	0x0000d939
    da3c:	0000a419 	.word	0x0000a419
    da40:	0000a209 	.word	0x0000a209

0000da44 <LORAREG_SetAttr>:
{
    da44:	b510      	push	{r4, lr}
	StackRetStatus_t result = LORAWAN_INVALID_PARAMETER;
    da46:	230a      	movs	r3, #10
	if(attrType < REG_NUM_ATTRIBUTES)
    da48:	283c      	cmp	r0, #60	; 0x3c
    da4a:	d901      	bls.n	da50 <LORAREG_SetAttr+0xc>
}
    da4c:	0018      	movs	r0, r3
    da4e:	bd10      	pop	{r4, pc}
	    result = pSetAttr[attrType](attrType, attrInput);		
    da50:	0082      	lsls	r2, r0, #2
    da52:	4b02      	ldr	r3, [pc, #8]	; (da5c <LORAREG_SetAttr+0x18>)
    da54:	58d3      	ldr	r3, [r2, r3]
    da56:	4798      	blx	r3
    da58:	0003      	movs	r3, r0
    da5a:	e7f7      	b.n	da4c <LORAREG_SetAttr+0x8>
    da5c:	20000d70 	.word	0x20000d70

0000da60 <CreateAllRegSoftwareTimers>:
{
    da60:	b510      	push	{r4, lr}
			status = SwTimerCreate(&regTimerId[i]);
    da62:	4809      	ldr	r0, [pc, #36]	; (da88 <CreateAllRegSoftwareTimers+0x28>)
    da64:	4b09      	ldr	r3, [pc, #36]	; (da8c <CreateAllRegSoftwareTimers+0x2c>)
    da66:	4798      	blx	r3
		if(LORAWAN_SUCCESS == status)
    da68:	2808      	cmp	r0, #8
    da6a:	d10c      	bne.n	da86 <CreateAllRegSoftwareTimers+0x26>
			status = SwTimerCreate(&regTimerId[i]);
    da6c:	4808      	ldr	r0, [pc, #32]	; (da90 <CreateAllRegSoftwareTimers+0x30>)
    da6e:	4b07      	ldr	r3, [pc, #28]	; (da8c <CreateAllRegSoftwareTimers+0x2c>)
    da70:	4798      	blx	r3
		if(LORAWAN_SUCCESS == status)
    da72:	2808      	cmp	r0, #8
    da74:	d107      	bne.n	da86 <CreateAllRegSoftwareTimers+0x26>
			status = SwTimerCreate(&regTimerId[i]);
    da76:	4807      	ldr	r0, [pc, #28]	; (da94 <CreateAllRegSoftwareTimers+0x34>)
    da78:	4b04      	ldr	r3, [pc, #16]	; (da8c <CreateAllRegSoftwareTimers+0x2c>)
    da7a:	4798      	blx	r3
		if(LORAWAN_SUCCESS == status)
    da7c:	2808      	cmp	r0, #8
    da7e:	d102      	bne.n	da86 <CreateAllRegSoftwareTimers+0x26>
			status = SwTimerCreate(&regTimerId[i]);
    da80:	4805      	ldr	r0, [pc, #20]	; (da98 <CreateAllRegSoftwareTimers+0x38>)
    da82:	4b02      	ldr	r3, [pc, #8]	; (da8c <CreateAllRegSoftwareTimers+0x2c>)
    da84:	4798      	blx	r3
}
    da86:	bd10      	pop	{r4, pc}
    da88:	200024cc 	.word	0x200024cc
    da8c:	0000edf5 	.word	0x0000edf5
    da90:	200024cd 	.word	0x200024cd
    da94:	200024ce 	.word	0x200024ce
    da98:	200024cf 	.word	0x200024cf

0000da9c <StopAllRegSoftwareTimers>:
{
    da9c:	b570      	push	{r4, r5, r6, lr}
    da9e:	2400      	movs	r4, #0
		SwTimerStop(regTimerId[i]);
    daa0:	4e03      	ldr	r6, [pc, #12]	; (dab0 <StopAllRegSoftwareTimers+0x14>)
    daa2:	4d04      	ldr	r5, [pc, #16]	; (dab4 <StopAllRegSoftwareTimers+0x18>)
    daa4:	5d30      	ldrb	r0, [r6, r4]
    daa6:	47a8      	blx	r5
    daa8:	3401      	adds	r4, #1
	for (uint8_t i=0; i< REG_PARAMS_TIMERS_COUNT; i++)
    daaa:	2c04      	cmp	r4, #4
    daac:	d1fa      	bne.n	daa4 <StopAllRegSoftwareTimers+0x8>
}
    daae:	bd70      	pop	{r4, r5, r6, pc}
    dab0:	200024cc 	.word	0x200024cc
    dab4:	0000f141 	.word	0x0000f141

0000dab8 <LORAREG_Init>:
{	
    dab8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    daba:	0007      	movs	r7, r0
	if(!initialized)
    dabc:	4b24      	ldr	r3, [pc, #144]	; (db50 <LORAREG_Init+0x98>)
    dabe:	781b      	ldrb	r3, [r3, #0]
    dac0:	2b00      	cmp	r3, #0
    dac2:	d109      	bne.n	dad8 <LORAREG_Init+0x20>
		if (LORAWAN_SUCCESS == CreateAllRegSoftwareTimers())
    dac4:	4b23      	ldr	r3, [pc, #140]	; (db54 <LORAREG_Init+0x9c>)
    dac6:	4798      	blx	r3
    dac8:	2808      	cmp	r0, #8
    daca:	d001      	beq.n	dad0 <LORAREG_Init+0x18>
			result = LORAWAN_RESOURCE_UNAVAILABLE;
    dacc:	2014      	movs	r0, #20
    dace:	e006      	b.n	dade <LORAREG_Init+0x26>
			initialized = true;
    dad0:	2201      	movs	r2, #1
    dad2:	4b1f      	ldr	r3, [pc, #124]	; (db50 <LORAREG_Init+0x98>)
    dad4:	701a      	strb	r2, [r3, #0]
    dad6:	e002      	b.n	dade <LORAREG_Init+0x26>
		StopAllRegSoftwareTimers();	
    dad8:	4b1f      	ldr	r3, [pc, #124]	; (db58 <LORAREG_Init+0xa0>)
    dada:	4798      	blx	r3
	StackRetStatus_t result = LORAWAN_SUCCESS;
    dadc:	2008      	movs	r0, #8
    dade:	2300      	movs	r3, #0
		pGetAttr[i] = InValidGetAttr;
    dae0:	4e1e      	ldr	r6, [pc, #120]	; (db5c <LORAREG_Init+0xa4>)
    dae2:	4d1f      	ldr	r5, [pc, #124]	; (db60 <LORAREG_Init+0xa8>)
		pValidateAttr[i] = InValidAttr;
    dae4:	4c1f      	ldr	r4, [pc, #124]	; (db64 <LORAREG_Init+0xac>)
    dae6:	4a20      	ldr	r2, [pc, #128]	; (db68 <LORAREG_Init+0xb0>)
		pSetAttr[i] = InValidAttr;
    dae8:	4920      	ldr	r1, [pc, #128]	; (db6c <LORAREG_Init+0xb4>)
		pGetAttr[i] = InValidGetAttr;
    daea:	519d      	str	r5, [r3, r6]
		pValidateAttr[i] = InValidAttr;
    daec:	511a      	str	r2, [r3, r4]
		pSetAttr[i] = InValidAttr;
    daee:	505a      	str	r2, [r3, r1]
    daf0:	3304      	adds	r3, #4
	for(int i = 0; i < REG_NUM_ATTRIBUTES; i++)
    daf2:	2bf4      	cmp	r3, #244	; 0xf4
    daf4:	d1f9      	bne.n	daea <LORAREG_Init+0x32>
	if(ismBand == ISM_NA915)
    daf6:	2f02      	cmp	r7, #2
    daf8:	d00d      	beq.n	db16 <LORAREG_Init+0x5e>
	else if(ismBand == ISM_EU868 || ismBand == ISM_EU433)
    dafa:	2f01      	cmp	r7, #1
    dafc:	d90f      	bls.n	db1e <LORAREG_Init+0x66>
	else if(ismBand >= ISM_BRN923 && ismBand <= ISM_VTM923)
    dafe:	1fbb      	subs	r3, r7, #6
    db00:	2b08      	cmp	r3, #8
    db02:	d910      	bls.n	db26 <LORAREG_Init+0x6e>
	else if(ismBand == ISM_AU915)
    db04:	2f03      	cmp	r7, #3
    db06:	d012      	beq.n	db2e <LORAREG_Init+0x76>
	else if(ismBand == ISM_IND865)
    db08:	2f0f      	cmp	r7, #15
    db0a:	d014      	beq.n	db36 <LORAREG_Init+0x7e>
	else if(ismBand == ISM_JPN923)
    db0c:	2f05      	cmp	r7, #5
    db0e:	d016      	beq.n	db3e <LORAREG_Init+0x86>
	else if(ismBand == ISM_KR920)
    db10:	2f04      	cmp	r7, #4
    db12:	d018      	beq.n	db46 <LORAREG_Init+0x8e>
}
    db14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	    result = LORAReg_InitNA(ismBand);
    db16:	2002      	movs	r0, #2
    db18:	4b15      	ldr	r3, [pc, #84]	; (db70 <LORAREG_Init+0xb8>)
    db1a:	4798      	blx	r3
    db1c:	e7fa      	b.n	db14 <LORAREG_Init+0x5c>
	    result = LORAReg_InitEU(ismBand);		
    db1e:	0038      	movs	r0, r7
    db20:	4b14      	ldr	r3, [pc, #80]	; (db74 <LORAREG_Init+0xbc>)
    db22:	4798      	blx	r3
    db24:	e7f6      	b.n	db14 <LORAREG_Init+0x5c>
		result = LORAReg_InitAS(ismBand);
    db26:	0038      	movs	r0, r7
    db28:	4b13      	ldr	r3, [pc, #76]	; (db78 <LORAREG_Init+0xc0>)
    db2a:	4798      	blx	r3
    db2c:	e7f2      	b.n	db14 <LORAREG_Init+0x5c>
		result = LORAReg_InitAU(ismBand);
    db2e:	2003      	movs	r0, #3
    db30:	4b12      	ldr	r3, [pc, #72]	; (db7c <LORAREG_Init+0xc4>)
    db32:	4798      	blx	r3
    db34:	e7ee      	b.n	db14 <LORAREG_Init+0x5c>
		result = LORAReg_InitIN(ismBand);
    db36:	200f      	movs	r0, #15
    db38:	4b11      	ldr	r3, [pc, #68]	; (db80 <LORAREG_Init+0xc8>)
    db3a:	4798      	blx	r3
    db3c:	e7ea      	b.n	db14 <LORAREG_Init+0x5c>
		result = LORAReg_InitJP(ismBand);
    db3e:	2005      	movs	r0, #5
    db40:	4b10      	ldr	r3, [pc, #64]	; (db84 <LORAREG_Init+0xcc>)
    db42:	4798      	blx	r3
    db44:	e7e6      	b.n	db14 <LORAREG_Init+0x5c>
		result = LORAReg_InitKR(ismBand);
    db46:	2004      	movs	r0, #4
    db48:	4b0f      	ldr	r3, [pc, #60]	; (db88 <LORAREG_Init+0xd0>)
    db4a:	4798      	blx	r3
    db4c:	e7e2      	b.n	db14 <LORAREG_Init+0x5c>
    db4e:	46c0      	nop			; (mov r8, r8)
    db50:	20000c79 	.word	0x20000c79
    db54:	0000da61 	.word	0x0000da61
    db58:	0000da9d 	.word	0x0000da9d
    db5c:	20000c7c 	.word	0x20000c7c
    db60:	00009755 	.word	0x00009755
    db64:	20000e64 	.word	0x20000e64
    db68:	00009759 	.word	0x00009759
    db6c:	20000d70 	.word	0x20000d70
    db70:	00009511 	.word	0x00009511
    db74:	00008a61 	.word	0x00008a61
    db78:	00008569 	.word	0x00008569
    db7c:	00008801 	.word	0x00008801
    db80:	00008d51 	.word	0x00008d51
    db84:	00008f65 	.word	0x00008f65
    db88:	00009219 	.word	0x00009219

0000db8c <LORAREG_SupportedBands>:
	*bands = value;
    db8c:	2301      	movs	r3, #1
    db8e:	425b      	negs	r3, r3
    db90:	8003      	strh	r3, [r0, #0]
}
    db92:	2008      	movs	r0, #8
    db94:	4770      	bx	lr
	...

0000db98 <LORAREG_UnInit>:
{
    db98:	b510      	push	{r4, lr}
	StopAllRegSoftwareTimers();
    db9a:	4b0d      	ldr	r3, [pc, #52]	; (dbd0 <LORAREG_UnInit+0x38>)
    db9c:	4798      	blx	r3
	if(RegParams.regParamItems.fileid)
    db9e:	4b0d      	ldr	r3, [pc, #52]	; (dbd4 <LORAREG_UnInit+0x3c>)
    dba0:	4a0d      	ldr	r2, [pc, #52]	; (dbd8 <LORAREG_UnInit+0x40>)
    dba2:	5cd0      	ldrb	r0, [r2, r3]
    dba4:	2800      	cmp	r0, #0
    dba6:	d107      	bne.n	dbb8 <LORAREG_UnInit+0x20>
	memset(&RegParams,0,sizeof(RegParams_t));
    dba8:	2285      	movs	r2, #133	; 0x85
    dbaa:	0092      	lsls	r2, r2, #2
    dbac:	2100      	movs	r1, #0
    dbae:	480a      	ldr	r0, [pc, #40]	; (dbd8 <LORAREG_UnInit+0x40>)
    dbb0:	4b0a      	ldr	r3, [pc, #40]	; (dbdc <LORAREG_UnInit+0x44>)
    dbb2:	4798      	blx	r3
}
    dbb4:	200a      	movs	r0, #10
    dbb6:	bd10      	pop	{r4, pc}
	    PDS_UnRegFile(RegParams.regParamItems.fileid);
    dbb8:	4b09      	ldr	r3, [pc, #36]	; (dbe0 <LORAREG_UnInit+0x48>)
    dbba:	4798      	blx	r3
		if(RegParams.band == ISM_EU868)
    dbbc:	232e      	movs	r3, #46	; 0x2e
    dbbe:	4a06      	ldr	r2, [pc, #24]	; (dbd8 <LORAREG_UnInit+0x40>)
    dbc0:	5cd3      	ldrb	r3, [r2, r3]
    dbc2:	2b00      	cmp	r3, #0
    dbc4:	d1f0      	bne.n	dba8 <LORAREG_UnInit+0x10>
			PDS_UnRegFile(PDS_FILE_REG_EU868_12_IDX);
    dbc6:	200b      	movs	r0, #11
    dbc8:	4b05      	ldr	r3, [pc, #20]	; (dbe0 <LORAREG_UnInit+0x48>)
    dbca:	4798      	blx	r3
    dbcc:	e7ec      	b.n	dba8 <LORAREG_UnInit+0x10>
    dbce:	46c0      	nop			; (mov r8, r8)
    dbd0:	0000da9d 	.word	0x0000da9d
    dbd4:	0000020b 	.word	0x0000020b
    dbd8:	200024d0 	.word	0x200024d0
    dbdc:	00019ec9 	.word	0x00019ec9
    dbe0:	0000e41d 	.word	0x0000e41d

0000dbe4 <sal_FillSubKey>:
		}
	}
}

static void sal_FillSubKey( uint8_t *source, uint8_t *key, uint8_t size)
{
    dbe4:	b530      	push	{r4, r5, lr}
	uint8_t i = 0;
	uint8_t carry = 0;

	i=size;

	while(i--)
    dbe6:	1e53      	subs	r3, r2, #1
    dbe8:	b2db      	uxtb	r3, r3
    dbea:	2a00      	cmp	r2, #0
    dbec:	d00b      	beq.n	dc06 <sal_FillSubKey+0x22>
    dbee:	2400      	movs	r4, #0
	{
		key[i] = (source[i] << 1) | carry;
    dbf0:	18c5      	adds	r5, r0, r3
    dbf2:	782a      	ldrb	r2, [r5, #0]
    dbf4:	0052      	lsls	r2, r2, #1
    dbf6:	4322      	orrs	r2, r4
    dbf8:	54ca      	strb	r2, [r1, r3]
		carry = !!(source[i] & 0x80);
    dbfa:	782c      	ldrb	r4, [r5, #0]
    dbfc:	09e4      	lsrs	r4, r4, #7
	while(i--)
    dbfe:	3b01      	subs	r3, #1
    dc00:	b2db      	uxtb	r3, r3
    dc02:	2bff      	cmp	r3, #255	; 0xff
    dc04:	d1f4      	bne.n	dbf0 <sal_FillSubKey+0xc>
	}
}
    dc06:	bd30      	pop	{r4, r5, pc}

0000dc08 <SAL_Init>:
{
    dc08:	b510      	push	{r4, lr}
    dc0a:	b082      	sub	sp, #8
    dc0c:	0004      	movs	r4, r0
	useCryptoDev = useECC608 ;
    dc0e:	4b19      	ldr	r3, [pc, #100]	; (dc74 <SAL_Init+0x6c>)
    dc10:	7018      	strb	r0, [r3, #0]
	AESInit();
    dc12:	4b19      	ldr	r3, [pc, #100]	; (dc78 <SAL_Init+0x70>)
    dc14:	4798      	blx	r3
	SalStatus_t sal_status = SAL_SUCCESS;
    dc16:	2000      	movs	r0, #0
	if (true == useECC608)
    dc18:	2c00      	cmp	r4, #0
    dc1a:	d101      	bne.n	dc20 <SAL_Init+0x18>
}
    dc1c:	b002      	add	sp, #8
    dc1e:	bd10      	pop	{r4, pc}
		cfg_atecc608a_i2c_default .iface_type            = ATCA_I2C_IFACE;
    dc20:	4816      	ldr	r0, [pc, #88]	; (dc7c <SAL_Init+0x74>)
    dc22:	2300      	movs	r3, #0
    dc24:	7003      	strb	r3, [r0, #0]
		cfg_atecc608a_i2c_default.devtype                = ATECC608A;
    dc26:	3303      	adds	r3, #3
    dc28:	7043      	strb	r3, [r0, #1]
		cfg_atecc608a_i2c_default.atcai2c.slave_address  = ATCAD_SLAVE_I2C_ADDRESS;
    dc2a:	33af      	adds	r3, #175	; 0xaf
    dc2c:	7103      	strb	r3, [r0, #4]
		cfg_atecc608a_i2c_default.atcai2c.bus            = ATCAD_HOST_I2C_SERCOM;
    dc2e:	3bb1      	subs	r3, #177	; 0xb1
    dc30:	7143      	strb	r3, [r0, #5]
		cfg_atecc608a_i2c_default.atcai2c.baud           = ATCAD_HOST_I2C_BAUDRATE;
    dc32:	4b13      	ldr	r3, [pc, #76]	; (dc80 <SAL_Init+0x78>)
    dc34:	6083      	str	r3, [r0, #8]
		cfg_atecc608a_i2c_default.wake_delay             = 1500;
    dc36:	4b13      	ldr	r3, [pc, #76]	; (dc84 <SAL_Init+0x7c>)
    dc38:	8483      	strh	r3, [r0, #36]	; 0x24
		cfg_atecc608a_i2c_default.rx_retries             = 20;
    dc3a:	2314      	movs	r3, #20
    dc3c:	6283      	str	r3, [r0, #40]	; 0x28
		status = atcab_init( &cfg_atecc608a_i2c_default );
    dc3e:	4b12      	ldr	r3, [pc, #72]	; (dc88 <SAL_Init+0x80>)
    dc40:	4798      	blx	r3
    dc42:	0003      	movs	r3, r0
	SalStatus_t sal_status = SAL_SUCCESS;
    dc44:	2000      	movs	r0, #0
		if (ATCA_SUCCESS == status )
    dc46:	2b00      	cmp	r3, #0
    dc48:	d1e8      	bne.n	dc1c <SAL_Init+0x14>
	 *
     * \param[out] rand_out  32 bytes of random data is returned here.
     *
     * \return ATCA_SUCCESS on success, otherwise an error code.
     */
	status = atcab_random((uint8_t *)&keyEncryptionKey[0]);
    dc4a:	4810      	ldr	r0, [pc, #64]	; (dc8c <SAL_Init+0x84>)
    dc4c:	4b10      	ldr	r3, [pc, #64]	; (dc90 <SAL_Init+0x88>)
    dc4e:	4798      	blx	r3

	if (ATCA_SUCCESS == status)
    dc50:	2800      	cmp	r0, #0
    dc52:	d003      	beq.n	dc5c <SAL_Init+0x54>
	{
		/* Write Key Encryption Key of 32 Bytes in KEK_SLOT */
		status = atcab_write_zone(ATCA_ZONE_DATA, KEK_SLOT, 0, 0, keyEncryptionKey, 32);
	}
	
	if (ATCA_SUCCESS != status)
    dc54:	1e43      	subs	r3, r0, #1
    dc56:	4198      	sbcs	r0, r3
	SalStatus_t sal_status = SAL_SUCCESS;
    dc58:	b2c0      	uxtb	r0, r0
    dc5a:	e7df      	b.n	dc1c <SAL_Init+0x14>
		status = atcab_write_zone(ATCA_ZONE_DATA, KEK_SLOT, 0, 0, keyEncryptionKey, 32);
    dc5c:	2320      	movs	r3, #32
    dc5e:	9301      	str	r3, [sp, #4]
    dc60:	4b0a      	ldr	r3, [pc, #40]	; (dc8c <SAL_Init+0x84>)
    dc62:	9300      	str	r3, [sp, #0]
    dc64:	2300      	movs	r3, #0
    dc66:	2200      	movs	r2, #0
    dc68:	210e      	movs	r1, #14
    dc6a:	3002      	adds	r0, #2
    dc6c:	4c09      	ldr	r4, [pc, #36]	; (dc94 <SAL_Init+0x8c>)
    dc6e:	47a0      	blx	r4
    dc70:	e7f0      	b.n	dc54 <SAL_Init+0x4c>
    dc72:	46c0      	nop			; (mov r8, r8)
    dc74:	20000fa8 	.word	0x20000fa8
    dc78:	0000e0a9 	.word	0x0000e0a9
    dc7c:	20000f58 	.word	0x20000f58
    dc80:	00061a80 	.word	0x00061a80
    dc84:	000005dc 	.word	0x000005dc
    dc88:	00000129 	.word	0x00000129
    dc8c:	20000f88 	.word	0x20000f88
    dc90:	00000501 	.word	0x00000501
    dc94:	0000090d 	.word	0x0000090d

0000dc98 <SAL_AESEncode>:
{
    dc98:	b530      	push	{r4, r5, lr}
    dc9a:	b089      	sub	sp, #36	; 0x24
    dc9c:	0004      	movs	r4, r0
    dc9e:	0015      	movs	r5, r2
if (!useCryptoDev)
    dca0:	4b18      	ldr	r3, [pc, #96]	; (dd04 <SAL_AESEncode+0x6c>)
    dca2:	781b      	ldrb	r3, [r3, #0]
    dca4:	2b00      	cmp	r3, #0
    dca6:	d010      	beq.n	dcca <SAL_AESEncode+0x32>
	switch(key_type)
    dca8:	2900      	cmp	r1, #0
    dcaa:	d019      	beq.n	dce0 <SAL_AESEncode+0x48>
			sal_status = SAL_INVALID_KEY_TYPE;
    dcac:	2002      	movs	r0, #2
	switch(key_type)
    dcae:	2904      	cmp	r1, #4
    dcb0:	d809      	bhi.n	dcc6 <SAL_AESEncode+0x2e>
			memcpy(useKey, key, sizeof(useKey));
    dcb2:	2210      	movs	r2, #16
    dcb4:	0029      	movs	r1, r5
    dcb6:	a804      	add	r0, sp, #16
    dcb8:	4b13      	ldr	r3, [pc, #76]	; (dd08 <SAL_AESEncode+0x70>)
    dcba:	4798      	blx	r3
			AESEncode(buffer, useKey);
    dcbc:	a904      	add	r1, sp, #16
    dcbe:	0020      	movs	r0, r4
    dcc0:	4b12      	ldr	r3, [pc, #72]	; (dd0c <SAL_AESEncode+0x74>)
    dcc2:	4798      	blx	r3
	SalStatus_t sal_status = SAL_SUCCESS;
    dcc4:	2000      	movs	r0, #0
}
    dcc6:	b009      	add	sp, #36	; 0x24
    dcc8:	bd30      	pop	{r4, r5, pc}
	memcpy(useKey, key, sizeof(useKey));
    dcca:	2210      	movs	r2, #16
    dccc:	0029      	movs	r1, r5
    dcce:	a804      	add	r0, sp, #16
    dcd0:	4b0d      	ldr	r3, [pc, #52]	; (dd08 <SAL_AESEncode+0x70>)
    dcd2:	4798      	blx	r3
	AESEncode(buffer, useKey);
    dcd4:	a904      	add	r1, sp, #16
    dcd6:	0020      	movs	r0, r4
    dcd8:	4b0c      	ldr	r3, [pc, #48]	; (dd0c <SAL_AESEncode+0x74>)
    dcda:	4798      	blx	r3
	SalStatus_t sal_status = SAL_SUCCESS;
    dcdc:	2000      	movs	r0, #0
    dcde:	e7f2      	b.n	dcc6 <SAL_AESEncode+0x2e>
			atcab_status = atcab_aes_encrypt(keySlot, APP_KEY_SLOT_BLOCK, buffer, encData);
    dce0:	466b      	mov	r3, sp
    dce2:	0002      	movs	r2, r0
    dce4:	2101      	movs	r1, #1
    dce6:	2000      	movs	r0, #0
    dce8:	4d09      	ldr	r5, [pc, #36]	; (dd10 <SAL_AESEncode+0x78>)
    dcea:	47a8      	blx	r5
    dcec:	0003      	movs	r3, r0
				sal_status = SAL_FAILURE;
    dcee:	2001      	movs	r0, #1
			if (atcab_status == ATCA_SUCCESS)
    dcf0:	2b00      	cmp	r3, #0
    dcf2:	d1e8      	bne.n	dcc6 <SAL_AESEncode+0x2e>
				memcpy(buffer, encData, sizeof(encData));
    dcf4:	2210      	movs	r2, #16
    dcf6:	4669      	mov	r1, sp
    dcf8:	0020      	movs	r0, r4
    dcfa:	4b03      	ldr	r3, [pc, #12]	; (dd08 <SAL_AESEncode+0x70>)
    dcfc:	4798      	blx	r3
				sal_status = SAL_SUCCESS;
    dcfe:	2000      	movs	r0, #0
    dd00:	e7e1      	b.n	dcc6 <SAL_AESEncode+0x2e>
    dd02:	46c0      	nop			; (mov r8, r8)
    dd04:	20000fa8 	.word	0x20000fa8
    dd08:	00019da5 	.word	0x00019da5
    dd0c:	0000dfcd 	.word	0x0000dfcd
    dd10:	000002e9 	.word	0x000002e9

0000dd14 <SAL_DeriveSessionKey>:
{
    dd14:	b510      	push	{r4, lr}
    dd16:	b082      	sub	sp, #8
if (!useCryptoDev)
    dd18:	4c0c      	ldr	r4, [pc, #48]	; (dd4c <SAL_DeriveSessionKey+0x38>)
    dd1a:	7824      	ldrb	r4, [r4, #0]
    dd1c:	2c00      	cmp	r4, #0
    dd1e:	d012      	beq.n	dd46 <SAL_DeriveSessionKey+0x32>
	if (SAL_APP_KEY == src_key)
    dd20:	424a      	negs	r2, r1
    dd22:	414a      	adcs	r2, r1
	uint8_t target_slot = keySlots[target_key];// Slot of Target Session Key which is being derived
    dd24:	4c0a      	ldr	r4, [pc, #40]	; (dd50 <SAL_DeriveSessionKey+0x3c>)
	uint16_t key_id = (target_slot << 8) | source_slot; //2 Byte key_id denotes Source and Target slot values (Target Slot(1 Byte) | Source Slot (1Byte))
    dd26:	5ce3      	ldrb	r3, [r4, r3]
    dd28:	021b      	lsls	r3, r3, #8
    dd2a:	5c61      	ldrb	r1, [r4, r1]
	 atcad_status = atcab_kdf(derive_mode, key_id, aes_details, block, NULL, NULL);
    dd2c:	4319      	orrs	r1, r3
    dd2e:	2300      	movs	r3, #0
    dd30:	9301      	str	r3, [sp, #4]
    dd32:	9300      	str	r3, [sp, #0]
    dd34:	0003      	movs	r3, r0
    dd36:	202a      	movs	r0, #42	; 0x2a
    dd38:	4c06      	ldr	r4, [pc, #24]	; (dd54 <SAL_DeriveSessionKey+0x40>)
    dd3a:	47a0      	blx	r4
	 if(ATCA_SUCCESS != atcad_status)
    dd3c:	1e43      	subs	r3, r0, #1
    dd3e:	4198      	sbcs	r0, r3
	sal_status = SAL_AESEncode(block, src_key, key);
    dd40:	b2c0      	uxtb	r0, r0
}
    dd42:	b002      	add	sp, #8
    dd44:	bd10      	pop	{r4, pc}
	sal_status = SAL_AESEncode(block, src_key, key);
    dd46:	4b04      	ldr	r3, [pc, #16]	; (dd58 <SAL_DeriveSessionKey+0x44>)
    dd48:	4798      	blx	r3
    dd4a:	e7fa      	b.n	dd42 <SAL_DeriveSessionKey+0x2e>
    dd4c:	20000fa8 	.word	0x20000fa8
    dd50:	000201d0 	.word	0x000201d0
    dd54:	0000038d 	.word	0x0000038d
    dd58:	0000dc99 	.word	0x0000dc99

0000dd5c <SAL_Read>:
{
    dd5c:	b530      	push	{r4, r5, lr}
    dd5e:	b089      	sub	sp, #36	; 0x24
    dd60:	000c      	movs	r4, r1
if (useCryptoDev)
    dd62:	4b21      	ldr	r3, [pc, #132]	; (dde8 <SAL_Read+0x8c>)
    dd64:	781a      	ldrb	r2, [r3, #0]
	SalStatus_t sal_status = SAL_SUCCESS;
    dd66:	2300      	movs	r3, #0
if (useCryptoDev)
    dd68:	2a00      	cmp	r2, #0
    dd6a:	d014      	beq.n	dd96 <SAL_Read+0x3a>
	uint8_t keyId = keySlots[key_type];
    dd6c:	4b1f      	ldr	r3, [pc, #124]	; (ddec <SAL_Read+0x90>)
    dd6e:	5c19      	ldrb	r1, [r3, r0]
	switch(key_type)
    dd70:	2806      	cmp	r0, #6
    dd72:	d02b      	beq.n	ddcc <SAL_Read+0x70>
    dd74:	d812      	bhi.n	dd9c <SAL_Read+0x40>
    dd76:	3801      	subs	r0, #1
    dd78:	2803      	cmp	r0, #3
    dd7a:	d832      	bhi.n	dde2 <SAL_Read+0x86>
			status = atcab_read_enc(keyId, block, key, &keyEncryptionKey[0], KEK_SLOT);
    dd7c:	b288      	uxth	r0, r1
    dd7e:	230e      	movs	r3, #14
    dd80:	9300      	str	r3, [sp, #0]
    dd82:	4b1b      	ldr	r3, [pc, #108]	; (ddf0 <SAL_Read+0x94>)
    dd84:	0022      	movs	r2, r4
    dd86:	2100      	movs	r1, #0
    dd88:	4c1a      	ldr	r4, [pc, #104]	; (ddf4 <SAL_Read+0x98>)
    dd8a:	47a0      	blx	r4
    dd8c:	0005      	movs	r5, r0
	SalStatus_t sal_status = SAL_SUCCESS;
    dd8e:	2300      	movs	r3, #0
	if (ATCA_SUCCESS != status)
    dd90:	2d00      	cmp	r5, #0
    dd92:	d000      	beq.n	dd96 <SAL_Read+0x3a>
		sal_status = SAL_FAILURE;
    dd94:	2301      	movs	r3, #1
}
    dd96:	0018      	movs	r0, r3
    dd98:	b009      	add	sp, #36	; 0x24
    dd9a:	bd30      	pop	{r4, r5, pc}
	switch(key_type)
    dd9c:	2807      	cmp	r0, #7
    dd9e:	d120      	bne.n	dde2 <SAL_Read+0x86>
			size_t bin_size = SAL_EUI_LEN ;
    dda0:	2308      	movs	r3, #8
    dda2:	9303      	str	r3, [sp, #12]
			status = atcab_read_bytes_zone(ATCA_ZONE_DATA, DEV_EUI_SLOT, 0, devEUIascii, 16) ;
    dda4:	3308      	adds	r3, #8
    dda6:	9300      	str	r3, [sp, #0]
    dda8:	ab04      	add	r3, sp, #16
    ddaa:	2200      	movs	r2, #0
    ddac:	210a      	movs	r1, #10
    ddae:	2002      	movs	r0, #2
    ddb0:	4d11      	ldr	r5, [pc, #68]	; (ddf8 <SAL_Read+0x9c>)
    ddb2:	47a8      	blx	r5
    ddb4:	0005      	movs	r5, r0
			atcab_hex2bin((char*)devEUIascii, strlen((char*)devEUIascii), key, &bin_size) ;		
    ddb6:	a804      	add	r0, sp, #16
    ddb8:	4b10      	ldr	r3, [pc, #64]	; (ddfc <SAL_Read+0xa0>)
    ddba:	4798      	blx	r3
    ddbc:	0001      	movs	r1, r0
    ddbe:	ab03      	add	r3, sp, #12
    ddc0:	0022      	movs	r2, r4
    ddc2:	a804      	add	r0, sp, #16
    ddc4:	4c0e      	ldr	r4, [pc, #56]	; (de00 <SAL_Read+0xa4>)
    ddc6:	47a0      	blx	r4
	SalStatus_t sal_status = SAL_SUCCESS;
    ddc8:	2300      	movs	r3, #0
		break;
    ddca:	e7e1      	b.n	dd90 <SAL_Read+0x34>
			status = atcab_read_bytes_zone(ATCA_ZONE_DATA, keyId, 0, key, SAL_EUI_LEN);
    ddcc:	b289      	uxth	r1, r1
    ddce:	2308      	movs	r3, #8
    ddd0:	9300      	str	r3, [sp, #0]
    ddd2:	0023      	movs	r3, r4
    ddd4:	2200      	movs	r2, #0
    ddd6:	2002      	movs	r0, #2
    ddd8:	4c07      	ldr	r4, [pc, #28]	; (ddf8 <SAL_Read+0x9c>)
    ddda:	47a0      	blx	r4
    dddc:	0005      	movs	r5, r0
	SalStatus_t sal_status = SAL_SUCCESS;
    ddde:	2300      	movs	r3, #0
		break;
    dde0:	e7d6      	b.n	dd90 <SAL_Read+0x34>
	ATCA_STATUS status = ATCA_SUCCESS;
    dde2:	2500      	movs	r5, #0
			sal_status = SAL_INVALID_KEY_TYPE;
    dde4:	2302      	movs	r3, #2
    dde6:	e7d3      	b.n	dd90 <SAL_Read+0x34>
    dde8:	20000fa8 	.word	0x20000fa8
    ddec:	000201d0 	.word	0x000201d0
    ddf0:	20000f88 	.word	0x20000f88
    ddf4:	00000659 	.word	0x00000659
    ddf8:	0000077d 	.word	0x0000077d
    ddfc:	0001a2fd 	.word	0x0001a2fd
    de00:	00000df9 	.word	0x00000df9

0000de04 <SAL_AESCmac>:
{
    de04:	b5f0      	push	{r4, r5, r6, r7, lr}
    de06:	46d6      	mov	lr, sl
    de08:	464f      	mov	r7, r9
    de0a:	4646      	mov	r6, r8
    de0c:	b5c0      	push	{r6, r7, lr}
    de0e:	b0a4      	sub	sp, #144	; 0x90
    de10:	9001      	str	r0, [sp, #4]
    de12:	000f      	movs	r7, r1
    de14:	9102      	str	r1, [sp, #8]
    de16:	9203      	str	r2, [sp, #12]
    de18:	469a      	mov	sl, r3
    de1a:	ab2c      	add	r3, sp, #176	; 0xb0
    de1c:	881c      	ldrh	r4, [r3, #0]
	uint8_t const_Rb[16] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    de1e:	ae08      	add	r6, sp, #32
    de20:	2210      	movs	r2, #16
    de22:	2100      	movs	r1, #0
    de24:	0030      	movs	r0, r6
    de26:	4d64      	ldr	r5, [pc, #400]	; (dfb8 <SAL_AESCmac+0x1b4>)
    de28:	47a8      	blx	r5
    de2a:	2387      	movs	r3, #135	; 0x87
    de2c:	73f3      	strb	r3, [r6, #15]
	memset(l, 0, sizeof(l));
    de2e:	2210      	movs	r2, #16
    de30:	2100      	movs	r1, #0
    de32:	a804      	add	r0, sp, #16
    de34:	47a8      	blx	r5
	SAL_AESEncode(l, key_type, key);
    de36:	9a01      	ldr	r2, [sp, #4]
    de38:	0039      	movs	r1, r7
    de3a:	a804      	add	r0, sp, #16
    de3c:	4b5f      	ldr	r3, [pc, #380]	; (dfbc <SAL_AESCmac+0x1b8>)
    de3e:	4798      	blx	r3
	if ( (l[0] & 0x80) == 0x00 )  // MSB( bufferLocal[0] ) is '0'
    de40:	ab04      	add	r3, sp, #16
    de42:	781b      	ldrb	r3, [r3, #0]
    de44:	2b7f      	cmp	r3, #127	; 0x7f
    de46:	d82d      	bhi.n	dea4 <SAL_AESCmac+0xa0>
		sal_FillSubKey( l, k1, (sizeof(l) ) );
    de48:	2210      	movs	r2, #16
    de4a:	a920      	add	r1, sp, #128	; 0x80
    de4c:	a804      	add	r0, sp, #16
    de4e:	4b5c      	ldr	r3, [pc, #368]	; (dfc0 <SAL_AESCmac+0x1bc>)
    de50:	4798      	blx	r3
	if ( (k1[0] & 0x80) == 0x00 )   // MSB( k1[0] ) is '0'
    de52:	ab20      	add	r3, sp, #128	; 0x80
    de54:	781b      	ldrb	r3, [r3, #0]
    de56:	2b7f      	cmp	r3, #127	; 0x7f
    de58:	d834      	bhi.n	dec4 <SAL_AESCmac+0xc0>
		sal_FillSubKey( k1, k2, (sizeof(l)) );
    de5a:	2210      	movs	r2, #16
    de5c:	a91c      	add	r1, sp, #112	; 0x70
    de5e:	a820      	add	r0, sp, #128	; 0x80
    de60:	4b57      	ldr	r3, [pc, #348]	; (dfc0 <SAL_AESCmac+0x1bc>)
    de62:	4798      	blx	r3
	n = (size + 15) >> 4;
    de64:	0023      	movs	r3, r4
    de66:	330f      	adds	r3, #15
    de68:	111d      	asrs	r5, r3, #4
    de6a:	b2aa      	uxth	r2, r5
    de6c:	4690      	mov	r8, r2
	if (n == 0)
    de6e:	2a00      	cmp	r2, #0
    de70:	d038      	beq.n	dee4 <SAL_AESCmac+0xe0>
	if ( flag == 1 )
    de72:	0722      	lsls	r2, r4, #28
    de74:	d138      	bne.n	dee8 <SAL_AESCmac+0xe4>
		for (i=((n-1) << 4); i<(n << 4); i++)
    de76:	4642      	mov	r2, r8
    de78:	3a01      	subs	r2, #1
    de7a:	0112      	lsls	r2, r2, #4
    de7c:	b296      	uxth	r6, r2
    de7e:	4f51      	ldr	r7, [pc, #324]	; (dfc4 <SAL_AESCmac+0x1c0>)
    de80:	401f      	ands	r7, r3
    de82:	42be      	cmp	r6, r7
    de84:	da54      	bge.n	df30 <SAL_AESCmac+0x12c>
    de86:	0033      	movs	r3, r6
			mLast[j] = input[i] ^ k1[j];
    de88:	a910      	add	r1, sp, #64	; 0x40
    de8a:	aa20      	add	r2, sp, #128	; 0x80
    de8c:	1b98      	subs	r0, r3, r6
    de8e:	b280      	uxth	r0, r0
    de90:	4654      	mov	r4, sl
    de92:	5ce4      	ldrb	r4, [r4, r3]
    de94:	5c15      	ldrb	r5, [r2, r0]
    de96:	406c      	eors	r4, r5
    de98:	540c      	strb	r4, [r1, r0]
		for (i=((n-1) << 4); i<(n << 4); i++)
    de9a:	3301      	adds	r3, #1
    de9c:	b29b      	uxth	r3, r3
    de9e:	42bb      	cmp	r3, r7
    dea0:	dbf4      	blt.n	de8c <SAL_AESCmac+0x88>
    dea2:	e045      	b.n	df30 <SAL_AESCmac+0x12c>
		sal_FillSubKey( l, k1, (sizeof(l) ) );
    dea4:	2210      	movs	r2, #16
    dea6:	a920      	add	r1, sp, #128	; 0x80
    dea8:	a804      	add	r0, sp, #16
    deaa:	4b45      	ldr	r3, [pc, #276]	; (dfc0 <SAL_AESCmac+0x1bc>)
    deac:	4798      	blx	r3
    deae:	2300      	movs	r3, #0
			k1[i] ^= const_Rb[i];
    deb0:	aa20      	add	r2, sp, #128	; 0x80
    deb2:	a908      	add	r1, sp, #32
    deb4:	5c98      	ldrb	r0, [r3, r2]
    deb6:	5c5d      	ldrb	r5, [r3, r1]
    deb8:	4068      	eors	r0, r5
    deba:	5498      	strb	r0, [r3, r2]
    debc:	3301      	adds	r3, #1
		for (i=0; i<sizeof(l); i++)
    debe:	2b10      	cmp	r3, #16
    dec0:	d1f8      	bne.n	deb4 <SAL_AESCmac+0xb0>
    dec2:	e7c6      	b.n	de52 <SAL_AESCmac+0x4e>
		sal_FillSubKey( k1, k2, (sizeof(l) ) );
    dec4:	2210      	movs	r2, #16
    dec6:	a91c      	add	r1, sp, #112	; 0x70
    dec8:	a820      	add	r0, sp, #128	; 0x80
    deca:	4b3d      	ldr	r3, [pc, #244]	; (dfc0 <SAL_AESCmac+0x1bc>)
    decc:	4798      	blx	r3
    dece:	2300      	movs	r3, #0
			k2[i] = k2[i] ^ const_Rb[i];
    ded0:	aa1c      	add	r2, sp, #112	; 0x70
    ded2:	a908      	add	r1, sp, #32
    ded4:	5c98      	ldrb	r0, [r3, r2]
    ded6:	5c5d      	ldrb	r5, [r3, r1]
    ded8:	4068      	eors	r0, r5
    deda:	5498      	strb	r0, [r3, r2]
    dedc:	3301      	adds	r3, #1
		for (i=0; i<sizeof(l); i++)
    dede:	2b10      	cmp	r3, #16
    dee0:	d1f8      	bne.n	ded4 <SAL_AESCmac+0xd0>
    dee2:	e7bf      	b.n	de64 <SAL_AESCmac+0x60>
		n = 1;
    dee4:	2301      	movs	r3, #1
    dee6:	4698      	mov	r8, r3
		ptr = &input[size - (size%16)];
    dee8:	230f      	movs	r3, #15
    deea:	0020      	movs	r0, r4
    deec:	4398      	bics	r0, r3
    deee:	2300      	movs	r3, #0
			if ( i < (size%16) )
    def0:	220f      	movs	r2, #15
    def2:	4014      	ands	r4, r2
					padded[i] = 0x00;
    def4:	a90c      	add	r1, sp, #48	; 0x30
    def6:	2700      	movs	r7, #0
					padded[i] = 0x80;
    def8:	2680      	movs	r6, #128	; 0x80
				padded[i] = ptr[i];
    defa:	4450      	add	r0, sl
    defc:	e005      	b.n	df0a <SAL_AESCmac+0x106>
				if ( i == (size%16) )
    defe:	4294      	cmp	r4, r2
    df00:	d009      	beq.n	df16 <SAL_AESCmac+0x112>
					padded[i] = 0x00;
    df02:	545f      	strb	r7, [r3, r1]
    df04:	3301      	adds	r3, #1
		for (i=0; i<16; i++)
    df06:	2b10      	cmp	r3, #16
    df08:	d007      	beq.n	df1a <SAL_AESCmac+0x116>
    df0a:	b29a      	uxth	r2, r3
			if ( i < (size%16) )
    df0c:	4294      	cmp	r4, r2
    df0e:	d9f6      	bls.n	defe <SAL_AESCmac+0xfa>
				padded[i] = ptr[i];
    df10:	5cc2      	ldrb	r2, [r0, r3]
    df12:	545a      	strb	r2, [r3, r1]
    df14:	e7f6      	b.n	df04 <SAL_AESCmac+0x100>
					padded[i] = 0x80;
    df16:	545e      	strb	r6, [r3, r1]
    df18:	e7f4      	b.n	df04 <SAL_AESCmac+0x100>
    df1a:	2300      	movs	r3, #0
			mLast[i] = padded[i] ^ k2[i];
    df1c:	a810      	add	r0, sp, #64	; 0x40
    df1e:	a90c      	add	r1, sp, #48	; 0x30
    df20:	aa1c      	add	r2, sp, #112	; 0x70
    df22:	5c5c      	ldrb	r4, [r3, r1]
    df24:	5c9d      	ldrb	r5, [r3, r2]
    df26:	406c      	eors	r4, r5
    df28:	541c      	strb	r4, [r3, r0]
    df2a:	3301      	adds	r3, #1
		for (i=0; i<sizeof(mLast); i++)
    df2c:	2b10      	cmp	r3, #16
    df2e:	d1f8      	bne.n	df22 <SAL_AESCmac+0x11e>
	memset(x, 0, sizeof(x));
    df30:	2210      	movs	r2, #16
    df32:	2100      	movs	r1, #0
    df34:	a818      	add	r0, sp, #96	; 0x60
    df36:	4b20      	ldr	r3, [pc, #128]	; (dfb8 <SAL_AESCmac+0x1b4>)
    df38:	4798      	blx	r3
	for (i=0; i<(n-1); i++)
    df3a:	2301      	movs	r3, #1
    df3c:	425b      	negs	r3, r3
    df3e:	4443      	add	r3, r8
    df40:	4699      	mov	r9, r3
    df42:	2000      	movs	r0, #0
    df44:	2700      	movs	r7, #0
    df46:	2b00      	cmp	r3, #0
    df48:	dd1a      	ble.n	df80 <SAL_AESCmac+0x17c>
			y[j] = x[j] ^ input[(i << 4)+j];
    df4a:	ad14      	add	r5, sp, #80	; 0x50
    df4c:	ac18      	add	r4, sp, #96	; 0x60
		memcpy(x, y, sizeof(y));
    df4e:	4e1e      	ldr	r6, [pc, #120]	; (dfc8 <SAL_AESCmac+0x1c4>)
			y[j] = x[j] ^ input[(i << 4)+j];
    df50:	0100      	lsls	r0, r0, #4
    df52:	2300      	movs	r3, #0
    df54:	4450      	add	r0, sl
    df56:	5cc2      	ldrb	r2, [r0, r3]
    df58:	5d19      	ldrb	r1, [r3, r4]
    df5a:	404a      	eors	r2, r1
    df5c:	555a      	strb	r2, [r3, r5]
    df5e:	3301      	adds	r3, #1
		for (j=0; j<16; j++)
    df60:	2b10      	cmp	r3, #16
    df62:	d1f8      	bne.n	df56 <SAL_AESCmac+0x152>
		memcpy(x, y, sizeof(y));
    df64:	2210      	movs	r2, #16
    df66:	0029      	movs	r1, r5
    df68:	0020      	movs	r0, r4
    df6a:	47b0      	blx	r6
		SAL_AESEncode(x, key_type, key);
    df6c:	9a01      	ldr	r2, [sp, #4]
    df6e:	9902      	ldr	r1, [sp, #8]
    df70:	0020      	movs	r0, r4
    df72:	4b12      	ldr	r3, [pc, #72]	; (dfbc <SAL_AESCmac+0x1b8>)
    df74:	4798      	blx	r3
	for (i=0; i<(n-1); i++)
    df76:	3701      	adds	r7, #1
    df78:	b2bf      	uxth	r7, r7
    df7a:	0038      	movs	r0, r7
    df7c:	454f      	cmp	r7, r9
    df7e:	dbe7      	blt.n	df50 <SAL_AESCmac+0x14c>
    df80:	2300      	movs	r3, #0
		y[i] = x[i] ^ mLast[i];
    df82:	ac14      	add	r4, sp, #80	; 0x50
    df84:	a818      	add	r0, sp, #96	; 0x60
    df86:	a910      	add	r1, sp, #64	; 0x40
    df88:	5c1a      	ldrb	r2, [r3, r0]
    df8a:	5c5d      	ldrb	r5, [r3, r1]
    df8c:	406a      	eors	r2, r5
    df8e:	551a      	strb	r2, [r3, r4]
    df90:	3301      	adds	r3, #1
	for (i=0; i<sizeof(x); i++)
    df92:	2b10      	cmp	r3, #16
    df94:	d1f8      	bne.n	df88 <SAL_AESCmac+0x184>
	SAL_AESEncode(y, key_type, key);
    df96:	9a01      	ldr	r2, [sp, #4]
    df98:	9902      	ldr	r1, [sp, #8]
    df9a:	a814      	add	r0, sp, #80	; 0x50
    df9c:	4b07      	ldr	r3, [pc, #28]	; (dfbc <SAL_AESCmac+0x1b8>)
    df9e:	4798      	blx	r3
	memcpy(output, y, sizeof(y));
    dfa0:	2210      	movs	r2, #16
    dfa2:	a914      	add	r1, sp, #80	; 0x50
    dfa4:	9803      	ldr	r0, [sp, #12]
    dfa6:	4b08      	ldr	r3, [pc, #32]	; (dfc8 <SAL_AESCmac+0x1c4>)
    dfa8:	4798      	blx	r3
}
    dfaa:	2000      	movs	r0, #0
    dfac:	b024      	add	sp, #144	; 0x90
    dfae:	bc1c      	pop	{r2, r3, r4}
    dfb0:	4690      	mov	r8, r2
    dfb2:	4699      	mov	r9, r3
    dfb4:	46a2      	mov	sl, r4
    dfb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    dfb8:	00019ec9 	.word	0x00019ec9
    dfbc:	0000dc99 	.word	0x0000dc99
    dfc0:	0000dbe5 	.word	0x0000dbe5
    dfc4:	000ffff0 	.word	0x000ffff0
    dfc8:	00019da5 	.word	0x00019da5

0000dfcc <AESEncode>:
 * \brief Encrypts the given block of data
 * \param[in,out] block Block of input data to be encrypted
 * \param[in] key Cryptographic key to be used in AES encryption
 */
void AESEncode(unsigned char* block, unsigned char* masterKey)
{
    dfcc:	b5f0      	push	{r4, r5, r6, r7, lr}
    dfce:	b083      	sub	sp, #12
    dfd0:	0004      	movs	r4, r0
    dfd2:	000e      	movs	r6, r1
#ifndef UT	
	
	/* Configure the AES. */
	g_aes_cfg.encrypt_mode = AES_ENCRYPTION;
    dfd4:	4a2b      	ldr	r2, [pc, #172]	; (e084 <AESEncode+0xb8>)
    dfd6:	2101      	movs	r1, #1
    dfd8:	7011      	strb	r1, [r2, #0]
	g_aes_cfg.key_size = AES_KEY_SIZE_128;
    dfda:	2300      	movs	r3, #0
    dfdc:	7053      	strb	r3, [r2, #1]
	g_aes_cfg.start_mode = AES_AUTO_START;
    dfde:	7091      	strb	r1, [r2, #2]
	g_aes_cfg.opmode = AES_ECB_MODE;
    dfe0:	70d3      	strb	r3, [r2, #3]
	g_aes_cfg.cfb_size = AES_CFB_SIZE_128;
    dfe2:	7113      	strb	r3, [r2, #4]
	g_aes_cfg.lod = false;
    dfe4:	7213      	strb	r3, [r2, #8]
	aes_set_config(&aes_instance,AES, &g_aes_cfg);
    dfe6:	4928      	ldr	r1, [pc, #160]	; (e088 <AESEncode+0xbc>)
    dfe8:	4828      	ldr	r0, [pc, #160]	; (e08c <AESEncode+0xc0>)
    dfea:	4b29      	ldr	r3, [pc, #164]	; (e090 <AESEncode+0xc4>)
    dfec:	4798      	blx	r3
    dfee:	2100      	movs	r1, #0
		uint8_t u8[4];
	}long_addr;
	uint8_t index;
	for (index = 0; index < 4; index++)
	{
		long_addr.u8[index] = *data++;
    dff0:	ad01      	add	r5, sp, #4
	
	for(uint8_t i=0;i<SUB_BLOCK_COUNT;i++)
	{
		io_data[i] = convert_byte_array_to_32_bit(masterKey+(i*(sizeof(uint32_t))));
    dff2:	4f28      	ldr	r7, [pc, #160]	; (e094 <AESEncode+0xc8>)
    dff4:	1870      	adds	r0, r6, r1
    dff6:	2300      	movs	r3, #0
    dff8:	5cc2      	ldrb	r2, [r0, r3]
    dffa:	555a      	strb	r2, [r3, r5]
    dffc:	3301      	adds	r3, #1
	for (index = 0; index < 4; index++)
    dffe:	2b04      	cmp	r3, #4
    e000:	d1fa      	bne.n	dff8 <AESEncode+0x2c>
    e002:	9b01      	ldr	r3, [sp, #4]
    e004:	51cb      	str	r3, [r1, r7]
    e006:	3104      	adds	r1, #4
	for(uint8_t i=0;i<SUB_BLOCK_COUNT;i++)
    e008:	2910      	cmp	r1, #16
    e00a:	d1f3      	bne.n	dff4 <AESEncode+0x28>
	}
	
	/* Set the cryptographic key. */
	aes_write_key(&aes_instance, io_data);
    e00c:	4d1f      	ldr	r5, [pc, #124]	; (e08c <AESEncode+0xc0>)
    e00e:	4921      	ldr	r1, [pc, #132]	; (e094 <AESEncode+0xc8>)
    e010:	0028      	movs	r0, r5
    e012:	4b21      	ldr	r3, [pc, #132]	; (e098 <AESEncode+0xcc>)
    e014:	4798      	blx	r3
 */
static inline void aes_set_new_message(struct aes_module *const module)
{
	Assert(module);
	Assert(module->hw);
	module->hw->CTRLB.reg |= AES_CTRLB_NEWMSG;
    e016:	682a      	ldr	r2, [r5, #0]
    e018:	7913      	ldrb	r3, [r2, #4]
    e01a:	2102      	movs	r1, #2
    e01c:	430b      	orrs	r3, r1
    e01e:	7113      	strb	r3, [r2, #4]
    e020:	2100      	movs	r1, #0
		long_addr.u8[index] = *data++;
    e022:	ad01      	add	r5, sp, #4
	
	aes_set_new_message(&aes_instance);
	
	for(uint8_t i=0;i<SUB_BLOCK_COUNT;i++)
	{
		io_data[i] = convert_byte_array_to_32_bit(block+(i*(sizeof(uint32_t))));			
    e024:	4e1b      	ldr	r6, [pc, #108]	; (e094 <AESEncode+0xc8>)
    e026:	1860      	adds	r0, r4, r1
    e028:	2300      	movs	r3, #0
    e02a:	5cc2      	ldrb	r2, [r0, r3]
    e02c:	555a      	strb	r2, [r3, r5]
    e02e:	3301      	adds	r3, #1
	for (index = 0; index < 4; index++)
    e030:	2b04      	cmp	r3, #4
    e032:	d1fa      	bne.n	e02a <AESEncode+0x5e>
    e034:	9b01      	ldr	r3, [sp, #4]
    e036:	518b      	str	r3, [r1, r6]
    e038:	3104      	adds	r1, #4
	for(uint8_t i=0;i<SUB_BLOCK_COUNT;i++)
    e03a:	2910      	cmp	r1, #16
    e03c:	d1f3      	bne.n	e026 <AESEncode+0x5a>
	}
		
	/* Write the data to be ciphered to the input data registers. */
	aes_write_input_data(&aes_instance, io_data);
    e03e:	4d13      	ldr	r5, [pc, #76]	; (e08c <AESEncode+0xc0>)
    e040:	4914      	ldr	r1, [pc, #80]	; (e094 <AESEncode+0xc8>)
    e042:	0028      	movs	r0, r5
    e044:	4b15      	ldr	r3, [pc, #84]	; (e09c <AESEncode+0xd0>)
    e046:	4798      	blx	r3
 */
static inline void aes_clear_new_message(struct aes_module *const module)
{
	Assert(module);
	Assert(module->hw);
	module->hw->CTRLB.reg &= ~AES_CTRLB_NEWMSG;
    e048:	682d      	ldr	r5, [r5, #0]
    e04a:	792b      	ldrb	r3, [r5, #4]
    e04c:	2202      	movs	r2, #2
    e04e:	4393      	bics	r3, r2
    e050:	712b      	strb	r3, [r5, #4]
	Assert(module->hw);

	uint32_t int_flags = module->hw->INTFLAG.reg;
	uint32_t status_flags = 0;

	if (int_flags & AES_INTFLAG_ENCCMP) {
    e052:	2101      	movs	r1, #1
		status_flags |= AES_ENCRYPTION_COMPLETE;
	}

	if (int_flags & AES_INTFLAG_GFMCMP) {
    e054:	2002      	movs	r0, #2
    e056:	e001      	b.n	e05c <AESEncode+0x90>
	aes_clear_new_message(&aes_instance);
	/* Wait for the end of the encryption process. */
	while (!(aes_get_status(&aes_instance) & AES_ENCRYPTION_COMPLETE)) {
    e058:	4211      	tst	r1, r2
    e05a:	d107      	bne.n	e06c <AESEncode+0xa0>
	uint32_t int_flags = module->hw->INTFLAG.reg;
    e05c:	79eb      	ldrb	r3, [r5, #7]
    e05e:	b2db      	uxtb	r3, r3
	if (int_flags & AES_INTFLAG_ENCCMP) {
    e060:	000a      	movs	r2, r1
    e062:	401a      	ands	r2, r3
	if (int_flags & AES_INTFLAG_GFMCMP) {
    e064:	4218      	tst	r0, r3
    e066:	d0f7      	beq.n	e058 <AESEncode+0x8c>
		status_flags |= AES_GF_MULTI_COMPLETE;
    e068:	4302      	orrs	r2, r0
    e06a:	e7f5      	b.n	e058 <AESEncode+0x8c>
	}
	aes_read_output_data(&aes_instance,io_data);
    e06c:	4d09      	ldr	r5, [pc, #36]	; (e094 <AESEncode+0xc8>)
    e06e:	0029      	movs	r1, r5
    e070:	4806      	ldr	r0, [pc, #24]	; (e08c <AESEncode+0xc0>)
    e072:	4b0b      	ldr	r3, [pc, #44]	; (e0a0 <AESEncode+0xd4>)
    e074:	4798      	blx	r3
	
	memcpy(block,io_data,BLOCKSIZE);
    e076:	2210      	movs	r2, #16
    e078:	0029      	movs	r1, r5
    e07a:	0020      	movs	r0, r4
    e07c:	4b09      	ldr	r3, [pc, #36]	; (e0a4 <AESEncode+0xd8>)
    e07e:	4798      	blx	r3
#endif	
}
    e080:	b003      	add	sp, #12
    e082:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e084:	200026e4 	.word	0x200026e4
    e088:	42003400 	.word	0x42003400
    e08c:	200026f0 	.word	0x200026f0
    e090:	00004825 	.word	0x00004825
    e094:	20000fac 	.word	0x20000fac
    e098:	000048b9 	.word	0x000048b9
    e09c:	000048ed 	.word	0x000048ed
    e0a0:	0000493d 	.word	0x0000493d
    e0a4:	00019da5 	.word	0x00019da5

0000e0a8 <AESInit>:

/**
 * \brief Initializes the AES Engine.
 */
void AESInit(void)
{
    e0a8:	b570      	push	{r4, r5, r6, lr}
#ifndef UT	
	//! [setup_config]
	aes_get_config_defaults(&g_aes_cfg);
    e0aa:	4d07      	ldr	r5, [pc, #28]	; (e0c8 <AESInit+0x20>)
    e0ac:	0028      	movs	r0, r5
    e0ae:	4b07      	ldr	r3, [pc, #28]	; (e0cc <AESInit+0x24>)
    e0b0:	4798      	blx	r3
	//! [setup_config]

	//! [setup_config_defaults]
	aes_init(&aes_instance,AES, &g_aes_cfg);
    e0b2:	4c07      	ldr	r4, [pc, #28]	; (e0d0 <AESInit+0x28>)
    e0b4:	002a      	movs	r2, r5
    e0b6:	4907      	ldr	r1, [pc, #28]	; (e0d4 <AESInit+0x2c>)
    e0b8:	0020      	movs	r0, r4
    e0ba:	4b07      	ldr	r3, [pc, #28]	; (e0d8 <AESInit+0x30>)
    e0bc:	4798      	blx	r3
	//! [setup_config_defaults]
	//! [module_enable]
	aes_enable(&aes_instance);
    e0be:	0020      	movs	r0, r4
    e0c0:	4b06      	ldr	r3, [pc, #24]	; (e0dc <AESInit+0x34>)
    e0c2:	4798      	blx	r3
#endif	
}
    e0c4:	bd70      	pop	{r4, r5, r6, pc}
    e0c6:	46c0      	nop			; (mov r8, r8)
    e0c8:	200026e4 	.word	0x200026e4
    e0cc:	000047e9 	.word	0x000047e9
    e0d0:	200026f0 	.word	0x200026f0
    e0d4:	42003400 	.word	0x42003400
    e0d8:	00004899 	.word	0x00004899
    e0dc:	00004803 	.word	0x00004803

0000e0e0 <PDS_Init>:

\param[in] none
\param[out] status - The return status of the function's operation of type PdsStatus_t.
******************************************************************************/
PdsStatus_t PDS_Init(void)
{
    e0e0:	b510      	push	{r4, lr}
#if (ENABLE_PDS == 1)	
	PdsStatus_t status = pdsWlInit();
    e0e2:	4b03      	ldr	r3, [pc, #12]	; (e0f0 <PDS_Init+0x10>)
    e0e4:	4798      	blx	r3
	pdsUnInitFlag = false;
    e0e6:	2200      	movs	r2, #0
    e0e8:	4b02      	ldr	r3, [pc, #8]	; (e0f4 <PDS_Init+0x14>)
    e0ea:	701a      	strb	r2, [r3, #0]
	return status;
#else
	return PDS_OK;
#endif
}
    e0ec:	bd10      	pop	{r4, pc}
    e0ee:	46c0      	nop			; (mov r8, r8)
    e0f0:	0000e91d 	.word	0x0000e91d
    e0f4:	20000fbc 	.word	0x20000fbc

0000e0f8 <PDS_Store>:
\param[in] pdsFileItemIdx - The file id to register file to PDS.
\param[in] item - The item id of the item in PDS.
\param[out] status - The return status of the function's operation of type PdsStatus_t.
******************************************************************************/
PdsStatus_t PDS_Store(PdsFileItemIdx_t pdsFileItemIdx, uint8_t item)
{
    e0f8:	b510      	push	{r4, lr}
	PdsStatus_t status = PDS_OK;
#if (ENABLE_PDS == 1)
	if (false == pdsUnInitFlag)
    e0fa:	4b14      	ldr	r3, [pc, #80]	; (e14c <PDS_Store+0x54>)
    e0fc:	781a      	ldrb	r2, [r3, #0]
	PdsStatus_t status = PDS_OK;
    e0fe:	2300      	movs	r3, #0
	if (false == pdsUnInitFlag)
    e100:	2a00      	cmp	r2, #0
    e102:	d106      	bne.n	e112 <PDS_Store+0x1a>
	{
		if ((0 != fileMarks[pdsFileItemIdx].numItems) && 				\
    e104:	0102      	lsls	r2, r0, #4
    e106:	4b12      	ldr	r3, [pc, #72]	; (e150 <PDS_Store+0x58>)
    e108:	189b      	adds	r3, r3, r2
    e10a:	791a      	ldrb	r2, [r3, #4]
				status = PDS_INVLIAD_FILE_IDX;
			}
		}
		else
		{
			status = PDS_INVLIAD_FILE_IDX;
    e10c:	2305      	movs	r3, #5
		if ((0 != fileMarks[pdsFileItemIdx].numItems) && 				\
    e10e:	2a00      	cmp	r2, #0
    e110:	d101      	bne.n	e116 <PDS_Store+0x1e>
		}
	}
#endif	
	return status; 
}
    e112:	0018      	movs	r0, r3
    e114:	bd10      	pop	{r4, pc}
				(0 != fileMarks[pdsFileItemIdx].fileMarkListAddr) &&	\
    e116:	0103      	lsls	r3, r0, #4
    e118:	4a0d      	ldr	r2, [pc, #52]	; (e150 <PDS_Store+0x58>)
    e11a:	589c      	ldr	r4, [r3, r2]
		if ((0 != fileMarks[pdsFileItemIdx].numItems) && 				\
    e11c:	2c00      	cmp	r4, #0
    e11e:	d011      	beq.n	e144 <PDS_Store+0x4c>
				(0 != fileMarks[pdsFileItemIdx].itemListAddr)			\
    e120:	001a      	movs	r2, r3
    e122:	4b0b      	ldr	r3, [pc, #44]	; (e150 <PDS_Store+0x58>)
    e124:	189b      	adds	r3, r3, r2
				(0 != fileMarks[pdsFileItemIdx].fileMarkListAddr) &&	\
    e126:	689b      	ldr	r3, [r3, #8]
    e128:	2b00      	cmp	r3, #0
    e12a:	d00d      	beq.n	e148 <PDS_Store+0x50>
				status = PDS_INVLIAD_FILE_IDX;
    e12c:	2305      	movs	r3, #5
			if (PDS_MAX_FILE_IDX > pdsFileItemIdx)
    e12e:	280c      	cmp	r0, #12
    e130:	d8ef      	bhi.n	e112 <PDS_Store+0x1a>
				*((fileMarks[pdsFileItemIdx].fileMarkListAddr) + item) = PDS_OP_STORE;
    e132:	3b04      	subs	r3, #4
    e134:	5463      	strb	r3, [r4, r1]
				isFileSet[pdsFileItemIdx] = true;
    e136:	4a07      	ldr	r2, [pc, #28]	; (e154 <PDS_Store+0x5c>)
    e138:	5413      	strb	r3, [r2, r0]
				pdsPostTask(PDS_STORE_DELETE_TASK_ID);
    e13a:	2001      	movs	r0, #1
    e13c:	4b06      	ldr	r3, [pc, #24]	; (e158 <PDS_Store+0x60>)
    e13e:	4798      	blx	r3
	PdsStatus_t status = PDS_OK;
    e140:	2300      	movs	r3, #0
    e142:	e7e6      	b.n	e112 <PDS_Store+0x1a>
			status = PDS_INVLIAD_FILE_IDX;
    e144:	2305      	movs	r3, #5
    e146:	e7e4      	b.n	e112 <PDS_Store+0x1a>
    e148:	2305      	movs	r3, #5
    e14a:	e7e2      	b.n	e112 <PDS_Store+0x1a>
    e14c:	20000fbc 	.word	0x20000fbc
    e150:	20002708 	.word	0x20002708
    e154:	200026f8 	.word	0x200026f8
    e158:	0000e5f5 	.word	0x0000e5f5

0000e15c <PDS_Restore>:
\param[in] pdsFileItemIdx - The file id to register file to PDS.
\param[in] item - The item id of the item in PDS.
\param[out] status - The return status of the function's operation of type PdsStatus_t.
******************************************************************************/
PdsStatus_t PDS_Restore(PdsFileItemIdx_t pdsFileItemIdx, uint8_t item)
{
    e15c:	b5f0      	push	{r4, r5, r6, r7, lr}
    e15e:	b0c3      	sub	sp, #268	; 0x10c
    e160:	0006      	movs	r6, r0
    e162:	000d      	movs	r5, r1
	PdsStatus_t status = PDS_OK;
#if (ENABLE_PDS == 1)
	if (false == pdsUnInitFlag)
    e164:	4b2a      	ldr	r3, [pc, #168]	; (e210 <PDS_Restore+0xb4>)
    e166:	781b      	ldrb	r3, [r3, #0]
	PdsStatus_t status = PDS_OK;
    e168:	2400      	movs	r4, #0
	if (false == pdsUnInitFlag)
    e16a:	2b00      	cmp	r3, #0
    e16c:	d106      	bne.n	e17c <PDS_Restore+0x20>
		uint8_t *ptr;
		ItemMap_t itemInfo;
		ItemHeader_t itemHeader;
		uint16_t size;
		
		if ((0 != fileMarks[pdsFileItemIdx].numItems) && 				\
    e16e:	0102      	lsls	r2, r0, #4
    e170:	4b28      	ldr	r3, [pc, #160]	; (e214 <PDS_Restore+0xb8>)
    e172:	189b      	adds	r3, r3, r2
    e174:	791c      	ldrb	r4, [r3, #4]
    e176:	2c00      	cmp	r4, #0
    e178:	d103      	bne.n	e182 <PDS_Restore+0x26>
			
			return status;
		}
		else
		{
			status = PDS_INVLIAD_FILE_IDX;
    e17a:	2405      	movs	r4, #5
		}
	}
#endif	
	return status;
}
    e17c:	0020      	movs	r0, r4
    e17e:	b043      	add	sp, #268	; 0x10c
    e180:	bdf0      	pop	{r4, r5, r6, r7, pc}
		(0 != fileMarks[pdsFileItemIdx].fileMarkListAddr) &&	\
    e182:	0013      	movs	r3, r2
		if ((0 != fileMarks[pdsFileItemIdx].numItems) && 				\
    e184:	4a23      	ldr	r2, [pc, #140]	; (e214 <PDS_Restore+0xb8>)
    e186:	589b      	ldr	r3, [r3, r2]
    e188:	2b00      	cmp	r3, #0
    e18a:	d0f6      	beq.n	e17a <PDS_Restore+0x1e>
		(0 != fileMarks[pdsFileItemIdx].itemListAddr)			\
    e18c:	0102      	lsls	r2, r0, #4
    e18e:	4b21      	ldr	r3, [pc, #132]	; (e214 <PDS_Restore+0xb8>)
    e190:	189b      	adds	r3, r3, r2
    e192:	689f      	ldr	r7, [r3, #8]
		(0 != fileMarks[pdsFileItemIdx].fileMarkListAddr) &&	\
    e194:	2f00      	cmp	r7, #0
    e196:	d0f0      	beq.n	e17a <PDS_Restore+0x1e>
			memset(&buffer, 0, sizeof(PdsMem_t));
    e198:	2280      	movs	r2, #128	; 0x80
    e19a:	0052      	lsls	r2, r2, #1
    e19c:	2100      	movs	r1, #0
    e19e:	a802      	add	r0, sp, #8
    e1a0:	4b1d      	ldr	r3, [pc, #116]	; (e218 <PDS_Restore+0xbc>)
    e1a2:	4798      	blx	r3
			memcpy((void *)&itemInfo, (void *)(fileMarks[pdsFileItemIdx].itemListAddr + (fileMarks[pdsFileItemIdx].numItems - 1)), sizeof(ItemMap_t));
    e1a4:	4b1d      	ldr	r3, [pc, #116]	; (e21c <PDS_Restore+0xc0>)
    e1a6:	469c      	mov	ip, r3
    e1a8:	4464      	add	r4, ip
    e1aa:	00e4      	lsls	r4, r4, #3
    e1ac:	1939      	adds	r1, r7, r4
    e1ae:	2208      	movs	r2, #8
    e1b0:	4668      	mov	r0, sp
    e1b2:	4b1b      	ldr	r3, [pc, #108]	; (e220 <PDS_Restore+0xc4>)
    e1b4:	4798      	blx	r3
			size = itemInfo.itemOffset + itemInfo.size + sizeof(ItemHeader_t);
    e1b6:	466b      	mov	r3, sp
    e1b8:	79da      	ldrb	r2, [r3, #7]
    e1ba:	799b      	ldrb	r3, [r3, #6]
    e1bc:	18d2      	adds	r2, r2, r3
			status = pdsWlRead(pdsFileItemIdx, &buffer, size);
    e1be:	3205      	adds	r2, #5
    e1c0:	a902      	add	r1, sp, #8
    e1c2:	0030      	movs	r0, r6
    e1c4:	4b17      	ldr	r3, [pc, #92]	; (e224 <PDS_Restore+0xc8>)
    e1c6:	4798      	blx	r3
    e1c8:	1e04      	subs	r4, r0, #0
			if (status != PDS_OK)
    e1ca:	d1d7      	bne.n	e17c <PDS_Restore+0x20>
			memcpy((void *)&itemInfo, (void *)(fileMarks[pdsFileItemIdx].itemListAddr + item), sizeof(ItemMap_t));
    e1cc:	0136      	lsls	r6, r6, #4
    e1ce:	4b11      	ldr	r3, [pc, #68]	; (e214 <PDS_Restore+0xb8>)
    e1d0:	199e      	adds	r6, r3, r6
    e1d2:	00eb      	lsls	r3, r5, #3
    e1d4:	68b1      	ldr	r1, [r6, #8]
    e1d6:	18c9      	adds	r1, r1, r3
    e1d8:	2208      	movs	r2, #8
    e1da:	4668      	mov	r0, sp
    e1dc:	4b10      	ldr	r3, [pc, #64]	; (e220 <PDS_Restore+0xc4>)
    e1de:	4798      	blx	r3
			if (item == itemInfo.itemId)
    e1e0:	466b      	mov	r3, sp
    e1e2:	795b      	ldrb	r3, [r3, #5]
    e1e4:	42ab      	cmp	r3, r5
    e1e6:	d001      	beq.n	e1ec <PDS_Restore+0x90>
				return PDS_NOT_FOUND;
    e1e8:	2403      	movs	r4, #3
    e1ea:	e7c7      	b.n	e17c <PDS_Restore+0x20>
			ptr += itemInfo.itemOffset;
    e1ec:	466b      	mov	r3, sp
    e1ee:	79d9      	ldrb	r1, [r3, #7]
    e1f0:	2315      	movs	r3, #21
    e1f2:	446b      	add	r3, sp
    e1f4:	469c      	mov	ip, r3
    e1f6:	4461      	add	r1, ip
				if (false == itemHeader.delete)
    e1f8:	790b      	ldrb	r3, [r1, #4]
    e1fa:	2b00      	cmp	r3, #0
    e1fc:	d001      	beq.n	e202 <PDS_Restore+0xa6>
					return PDS_ITEM_DELETED;
    e1fe:	2406      	movs	r4, #6
    e200:	e7bc      	b.n	e17c <PDS_Restore+0x20>
					memcpy((void *)(itemInfo.ramAddress), (void *)(ptr), itemInfo.size);
    e202:	466b      	mov	r3, sp
    e204:	799a      	ldrb	r2, [r3, #6]
					ptr += sizeof(ItemHeader_t);
    e206:	3105      	adds	r1, #5
					memcpy((void *)(itemInfo.ramAddress), (void *)(ptr), itemInfo.size);
    e208:	9800      	ldr	r0, [sp, #0]
    e20a:	4b05      	ldr	r3, [pc, #20]	; (e220 <PDS_Restore+0xc4>)
    e20c:	4798      	blx	r3
			return status;
    e20e:	e7b5      	b.n	e17c <PDS_Restore+0x20>
    e210:	20000fbc 	.word	0x20000fbc
    e214:	20002708 	.word	0x20002708
    e218:	00019ec9 	.word	0x00019ec9
    e21c:	1fffffff 	.word	0x1fffffff
    e220:	00019da5 	.word	0x00019da5
    e224:	0000eab9 	.word	0x0000eab9

0000e228 <PDS_IsRestorable>:
\brief	This function checks if all the registered files are restorable.

\param[out] status - The return status of the function's operation.
******************************************************************************/
bool PDS_IsRestorable(void)
{
    e228:	b570      	push	{r4, r5, r6, lr}
	bool return_status = false;
#if (ENABLE_PDS == 1)
	if (false == pdsUnInitFlag)
    e22a:	4b0e      	ldr	r3, [pc, #56]	; (e264 <PDS_IsRestorable+0x3c>)
    e22c:	7818      	ldrb	r0, [r3, #0]
    e22e:	2800      	cmp	r0, #0
    e230:	d117      	bne.n	e262 <PDS_IsRestorable+0x3a>
    e232:	4d0d      	ldr	r5, [pc, #52]	; (e268 <PDS_IsRestorable+0x40>)
    e234:	2400      	movs	r4, #0
			if ((0 != fileMarks[pdsFileItemIdx].numItems) && 			\
			(0 != fileMarks[pdsFileItemIdx].fileMarkListAddr) &&	\
			(0 != fileMarks[pdsFileItemIdx].itemListAddr)			\
			)
			{
				if ( !(isFileFound(pdsFileItemIdx)) )
    e236:	4e0d      	ldr	r6, [pc, #52]	; (e26c <PDS_IsRestorable+0x44>)
    e238:	e004      	b.n	e244 <PDS_IsRestorable+0x1c>
		for (uint8_t pdsFileItemIdx = 0; pdsFileItemIdx < PDS_MAX_FILE_IDX; pdsFileItemIdx++)
    e23a:	3401      	adds	r4, #1
    e23c:	b2e4      	uxtb	r4, r4
    e23e:	3510      	adds	r5, #16
    e240:	2c0d      	cmp	r4, #13
    e242:	d00d      	beq.n	e260 <PDS_IsRestorable+0x38>
			if ((0 != fileMarks[pdsFileItemIdx].numItems) && 			\
    e244:	792b      	ldrb	r3, [r5, #4]
    e246:	2b00      	cmp	r3, #0
    e248:	d0f7      	beq.n	e23a <PDS_IsRestorable+0x12>
    e24a:	682b      	ldr	r3, [r5, #0]
    e24c:	2b00      	cmp	r3, #0
    e24e:	d0f4      	beq.n	e23a <PDS_IsRestorable+0x12>
			(0 != fileMarks[pdsFileItemIdx].fileMarkListAddr) &&	\
    e250:	68ab      	ldr	r3, [r5, #8]
    e252:	2b00      	cmp	r3, #0
    e254:	d0f1      	beq.n	e23a <PDS_IsRestorable+0x12>
				if ( !(isFileFound(pdsFileItemIdx)) )
    e256:	0020      	movs	r0, r4
    e258:	47b0      	blx	r6
    e25a:	2800      	cmp	r0, #0
    e25c:	d1ed      	bne.n	e23a <PDS_IsRestorable+0x12>
    e25e:	e000      	b.n	e262 <PDS_IsRestorable+0x3a>
			}
		}
	}
	return_status = true;
#endif
	return return_status;
    e260:	2001      	movs	r0, #1
}
    e262:	bd70      	pop	{r4, r5, r6, pc}
    e264:	20000fbc 	.word	0x20000fbc
    e268:	20002708 	.word	0x20002708
    e26c:	0000eae5 	.word	0x0000eae5

0000e270 <PDS_DeleteAll>:
\brief This function will erase all the items stored in the PDS.

\param[out] status - The return status of the function's operation.
******************************************************************************/
PdsStatus_t PDS_DeleteAll(void)
{
    e270:	b510      	push	{r4, lr}
#if (ENABLE_PDS == 1)
	if (false == pdsUnInitFlag)
    e272:	4b04      	ldr	r3, [pc, #16]	; (e284 <PDS_DeleteAll+0x14>)
    e274:	781b      	ldrb	r3, [r3, #0]
    e276:	2b00      	cmp	r3, #0
    e278:	d001      	beq.n	e27e <PDS_DeleteAll+0xe>
	{
		pdsWlDeleteAll();
	}
#endif
	return PDS_OK;
}
    e27a:	2000      	movs	r0, #0
    e27c:	bd10      	pop	{r4, pc}
		pdsWlDeleteAll();
    e27e:	4b02      	ldr	r3, [pc, #8]	; (e288 <PDS_DeleteAll+0x18>)
    e280:	4798      	blx	r3
    e282:	e7fa      	b.n	e27a <PDS_DeleteAll+0xa>
    e284:	20000fbc 	.word	0x20000fbc
    e288:	0000eb01 	.word	0x0000eb01

0000e28c <PDS_RestoreAll>:
		from all registered files.

\param[out] status - The return status of the function's operation.
******************************************************************************/
PdsStatus_t PDS_RestoreAll(void)
{
    e28c:	b5f0      	push	{r4, r5, r6, r7, lr}
    e28e:	46ce      	mov	lr, r9
    e290:	4647      	mov	r7, r8
    e292:	b580      	push	{r7, lr}
    e294:	b0c5      	sub	sp, #276	; 0x114
	PdsStatus_t status = PDS_OK;
#if (ENABLE_PDS == 1)
	if (false == pdsUnInitFlag)
    e296:	4b32      	ldr	r3, [pc, #200]	; (e360 <PDS_RestoreAll+0xd4>)
    e298:	781b      	ldrb	r3, [r3, #0]
	PdsStatus_t status = PDS_OK;
    e29a:	2000      	movs	r0, #0
	if (false == pdsUnInitFlag)
    e29c:	2b00      	cmp	r3, #0
    e29e:	d159      	bne.n	e354 <PDS_RestoreAll+0xc8>
    e2a0:	4e30      	ldr	r6, [pc, #192]	; (e364 <PDS_RestoreAll+0xd8>)
    e2a2:	2700      	movs	r7, #0
					ptr += itemInfo.itemOffset;
					memcpy((void *)(&itemHeader), (void *)(ptr), sizeof(ItemHeader_t));
					ptr += sizeof(ItemHeader_t);
					if (false == itemHeader.delete)
					{
						memcpy((void *)(itemInfo.ramAddress), (void *)(ptr), itemHeader.size);
    e2a4:	4b30      	ldr	r3, [pc, #192]	; (e368 <PDS_RestoreAll+0xdc>)
    e2a6:	4698      	mov	r8, r3
    e2a8:	e026      	b.n	e2f8 <PDS_RestoreAll+0x6c>
				for (uint8_t itemIdx = 0; itemIdx < fileMarks[pdsFileItemIdx].numItems; itemIdx++)
    e2aa:	3401      	adds	r4, #1
    e2ac:	b2e4      	uxtb	r4, r4
    e2ae:	792b      	ldrb	r3, [r5, #4]
    e2b0:	42a3      	cmp	r3, r4
    e2b2:	d918      	bls.n	e2e6 <PDS_RestoreAll+0x5a>
					memcpy((void *)&itemInfo, (void *)(fileMarks[pdsFileItemIdx].itemListAddr + itemIdx), sizeof(ItemMap_t));
    e2b4:	00e1      	lsls	r1, r4, #3
    e2b6:	68ab      	ldr	r3, [r5, #8]
    e2b8:	469c      	mov	ip, r3
    e2ba:	4461      	add	r1, ip
    e2bc:	2208      	movs	r2, #8
    e2be:	a802      	add	r0, sp, #8
    e2c0:	47c8      	blx	r9
					ptr += itemInfo.itemOffset;
    e2c2:	ab02      	add	r3, sp, #8
    e2c4:	79d9      	ldrb	r1, [r3, #7]
    e2c6:	2315      	movs	r3, #21
    e2c8:	aa02      	add	r2, sp, #8
    e2ca:	4694      	mov	ip, r2
    e2cc:	4463      	add	r3, ip
    e2ce:	469c      	mov	ip, r3
    e2d0:	4461      	add	r1, ip
					if (false == itemHeader.delete)
    e2d2:	790b      	ldrb	r3, [r1, #4]
    e2d4:	2b00      	cmp	r3, #0
    e2d6:	d1e8      	bne.n	e2aa <PDS_RestoreAll+0x1e>
						memcpy((void *)(itemInfo.ramAddress), (void *)(ptr), itemHeader.size);
    e2d8:	9b02      	ldr	r3, [sp, #8]
    e2da:	9301      	str	r3, [sp, #4]
    e2dc:	788a      	ldrb	r2, [r1, #2]
					ptr += sizeof(ItemHeader_t);
    e2de:	3105      	adds	r1, #5
						memcpy((void *)(itemInfo.ramAddress), (void *)(ptr), itemHeader.size);
    e2e0:	0018      	movs	r0, r3
    e2e2:	47c0      	blx	r8
    e2e4:	e7e1      	b.n	e2aa <PDS_RestoreAll+0x1e>
					}
				}
				if(fileMarks[pdsFileItemIdx].fIDcb != NULL)
    e2e6:	68eb      	ldr	r3, [r5, #12]
    e2e8:	2b00      	cmp	r3, #0
    e2ea:	d000      	beq.n	e2ee <PDS_RestoreAll+0x62>
				{
					fileMarks[pdsFileItemIdx].fIDcb();
    e2ec:	4798      	blx	r3
		for (uint8_t pdsFileItemIdx = 0; pdsFileItemIdx < PDS_MAX_FILE_IDX; pdsFileItemIdx++)
    e2ee:	3701      	adds	r7, #1
    e2f0:	b2ff      	uxtb	r7, r7
    e2f2:	3610      	adds	r6, #16
    e2f4:	2f0d      	cmp	r7, #13
    e2f6:	d02c      	beq.n	e352 <PDS_RestoreAll+0xc6>
    e2f8:	0035      	movs	r5, r6
			if ((0 != fileMarks[pdsFileItemIdx].numItems) && 			\
    e2fa:	7934      	ldrb	r4, [r6, #4]
    e2fc:	2c00      	cmp	r4, #0
    e2fe:	d0f6      	beq.n	e2ee <PDS_RestoreAll+0x62>
    e300:	6833      	ldr	r3, [r6, #0]
    e302:	2b00      	cmp	r3, #0
    e304:	d0f3      	beq.n	e2ee <PDS_RestoreAll+0x62>
			(0 != fileMarks[pdsFileItemIdx].itemListAddr)			\
    e306:	68b3      	ldr	r3, [r6, #8]
    e308:	4699      	mov	r9, r3
			(0 != fileMarks[pdsFileItemIdx].fileMarkListAddr) &&	\
    e30a:	2b00      	cmp	r3, #0
    e30c:	d0ef      	beq.n	e2ee <PDS_RestoreAll+0x62>
				memset(&buffer, 0, sizeof(PdsMem_t));
    e30e:	2280      	movs	r2, #128	; 0x80
    e310:	0052      	lsls	r2, r2, #1
    e312:	2100      	movs	r1, #0
    e314:	a804      	add	r0, sp, #16
    e316:	4b15      	ldr	r3, [pc, #84]	; (e36c <PDS_RestoreAll+0xe0>)
    e318:	4798      	blx	r3
				memcpy((void *)&itemInfo, (void *)(fileMarks[pdsFileItemIdx].itemListAddr + (fileMarks[pdsFileItemIdx].numItems - 1)), sizeof(ItemMap_t));
    e31a:	4b15      	ldr	r3, [pc, #84]	; (e370 <PDS_RestoreAll+0xe4>)
    e31c:	469c      	mov	ip, r3
    e31e:	4464      	add	r4, ip
    e320:	00e4      	lsls	r4, r4, #3
    e322:	0021      	movs	r1, r4
    e324:	4449      	add	r1, r9
    e326:	2208      	movs	r2, #8
    e328:	a802      	add	r0, sp, #8
    e32a:	4b0f      	ldr	r3, [pc, #60]	; (e368 <PDS_RestoreAll+0xdc>)
    e32c:	4798      	blx	r3
				size = itemInfo.itemOffset + itemInfo.size + sizeof(ItemHeader_t);
    e32e:	ab02      	add	r3, sp, #8
    e330:	79da      	ldrb	r2, [r3, #7]
    e332:	799b      	ldrb	r3, [r3, #6]
    e334:	18d2      	adds	r2, r2, r3
				status = pdsWlRead(pdsFileItemIdx, &buffer, size);
    e336:	3205      	adds	r2, #5
    e338:	a904      	add	r1, sp, #16
    e33a:	0038      	movs	r0, r7
    e33c:	4b0d      	ldr	r3, [pc, #52]	; (e374 <PDS_RestoreAll+0xe8>)
    e33e:	4798      	blx	r3
				if (status != PDS_OK)
    e340:	2800      	cmp	r0, #0
    e342:	d107      	bne.n	e354 <PDS_RestoreAll+0xc8>
				for (uint8_t itemIdx = 0; itemIdx < fileMarks[pdsFileItemIdx].numItems; itemIdx++)
    e344:	7933      	ldrb	r3, [r6, #4]
    e346:	2400      	movs	r4, #0
    e348:	2b00      	cmp	r3, #0
    e34a:	d0cc      	beq.n	e2e6 <PDS_RestoreAll+0x5a>
					memcpy((void *)&itemInfo, (void *)(fileMarks[pdsFileItemIdx].itemListAddr + itemIdx), sizeof(ItemMap_t));
    e34c:	4b06      	ldr	r3, [pc, #24]	; (e368 <PDS_RestoreAll+0xdc>)
    e34e:	4699      	mov	r9, r3
    e350:	e7b0      	b.n	e2b4 <PDS_RestoreAll+0x28>
    e352:	2000      	movs	r0, #0
			}
		}
	}
#endif	
	return status;
}
    e354:	b045      	add	sp, #276	; 0x114
    e356:	bc0c      	pop	{r2, r3}
    e358:	4690      	mov	r8, r2
    e35a:	4699      	mov	r9, r3
    e35c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e35e:	46c0      	nop			; (mov r8, r8)
    e360:	20000fbc 	.word	0x20000fbc
    e364:	20002708 	.word	0x20002708
    e368:	00019da5 	.word	0x00019da5
    e36c:	00019ec9 	.word	0x00019ec9
    e370:	1fffffff 	.word	0x1fffffff
    e374:	0000eab9 	.word	0x0000eab9

0000e378 <PDS_StoreAll>:

\param[in] none
\param[out] status - The return status of the function's operation of type PdsStatus_t.
******************************************************************************/
PdsStatus_t PDS_StoreAll(void)
{
    e378:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#if (ENABLE_PDS == 1)
	if (false == pdsUnInitFlag)
    e37a:	4b14      	ldr	r3, [pc, #80]	; (e3cc <PDS_StoreAll+0x54>)
    e37c:	781b      	ldrb	r3, [r3, #0]
    e37e:	2b00      	cmp	r3, #0
    e380:	d121      	bne.n	e3c6 <PDS_StoreAll+0x4e>
    e382:	4813      	ldr	r0, [pc, #76]	; (e3d0 <PDS_StoreAll+0x58>)
    e384:	4d13      	ldr	r5, [pc, #76]	; (e3d4 <PDS_StoreAll+0x5c>)
    e386:	0007      	movs	r7, r0
    e388:	37d0      	adds	r7, #208	; 0xd0
    e38a:	2600      	movs	r6, #0
			(0 != fileMarks[pdsFileItemIdx].itemListAddr)			\
			)
			{
				for (uint8_t itemIdx = 0; itemIdx < fileMarks[pdsFileItemIdx].numItems; itemIdx++)
				{
					*(fileMarks[pdsFileItemIdx].fileMarkListAddr + itemIdx) = PDS_OP_STORE;
    e38c:	2401      	movs	r4, #1
    e38e:	e004      	b.n	e39a <PDS_StoreAll+0x22>
				}
				isFileSet[pdsFileItemIdx] = true;
    e390:	702c      	strb	r4, [r5, #0]
    e392:	3010      	adds	r0, #16
    e394:	3501      	adds	r5, #1
		for (uint8_t pdsFileItemIdx = 0; pdsFileItemIdx < PDS_MAX_FILE_IDX; pdsFileItemIdx++)
    e396:	4287      	cmp	r7, r0
    e398:	d012      	beq.n	e3c0 <PDS_StoreAll+0x48>
    e39a:	0002      	movs	r2, r0
			if ((0 != fileMarks[pdsFileItemIdx].numItems) && 			\
    e39c:	7903      	ldrb	r3, [r0, #4]
    e39e:	2b00      	cmp	r3, #0
    e3a0:	d0f7      	beq.n	e392 <PDS_StoreAll+0x1a>
    e3a2:	6803      	ldr	r3, [r0, #0]
    e3a4:	2b00      	cmp	r3, #0
    e3a6:	d0f4      	beq.n	e392 <PDS_StoreAll+0x1a>
			(0 != fileMarks[pdsFileItemIdx].fileMarkListAddr) &&	\
    e3a8:	6883      	ldr	r3, [r0, #8]
    e3aa:	2b00      	cmp	r3, #0
    e3ac:	d0f1      	beq.n	e392 <PDS_StoreAll+0x1a>
    e3ae:	0033      	movs	r3, r6
					*(fileMarks[pdsFileItemIdx].fileMarkListAddr + itemIdx) = PDS_OP_STORE;
    e3b0:	6811      	ldr	r1, [r2, #0]
    e3b2:	54cc      	strb	r4, [r1, r3]
				for (uint8_t itemIdx = 0; itemIdx < fileMarks[pdsFileItemIdx].numItems; itemIdx++)
    e3b4:	3301      	adds	r3, #1
    e3b6:	b2db      	uxtb	r3, r3
    e3b8:	7911      	ldrb	r1, [r2, #4]
    e3ba:	4299      	cmp	r1, r3
    e3bc:	d8f8      	bhi.n	e3b0 <PDS_StoreAll+0x38>
    e3be:	e7e7      	b.n	e390 <PDS_StoreAll+0x18>
			}
		}
		pdsPostTask(PDS_STORE_DELETE_TASK_ID);
    e3c0:	2001      	movs	r0, #1
    e3c2:	4b05      	ldr	r3, [pc, #20]	; (e3d8 <PDS_StoreAll+0x60>)
    e3c4:	4798      	blx	r3
	}
#endif	
	return PDS_OK;
}
    e3c6:	2000      	movs	r0, #0
    e3c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    e3ca:	46c0      	nop			; (mov r8, r8)
    e3cc:	20000fbc 	.word	0x20000fbc
    e3d0:	20002708 	.word	0x20002708
    e3d4:	200026f8 	.word	0x200026f8
    e3d8:	0000e5f5 	.word	0x0000e5f5

0000e3dc <PDS_RegFile>:

\param[in] argFileId - The file id to register file to PDS.
\param[out] status - The return status of the function's operation of type PdsStatus_t.
******************************************************************************/
PdsStatus_t PDS_RegFile(PdsFileItemIdx_t argFileId, PdsFileMarks_t argFileMarks)
{
    e3dc:	b084      	sub	sp, #16
    e3de:	b510      	push	{r4, lr}
    e3e0:	9103      	str	r1, [sp, #12]
    e3e2:	9204      	str	r2, [sp, #16]
    e3e4:	9305      	str	r3, [sp, #20]
	PdsStatus_t status = PDS_OK;
#if (ENABLE_PDS == 1)
	if (false == pdsUnInitFlag)
    e3e6:	4b0b      	ldr	r3, [pc, #44]	; (e414 <PDS_RegFile+0x38>)
    e3e8:	781a      	ldrb	r2, [r3, #0]
	PdsStatus_t status = PDS_OK;
    e3ea:	2300      	movs	r3, #0
	if (false == pdsUnInitFlag)
    e3ec:	2a00      	cmp	r2, #0
    e3ee:	d102      	bne.n	e3f6 <PDS_RegFile+0x1a>
		{
			memcpy(&fileMarks[argFileId], &argFileMarks, sizeof(PdsFileMarks_t));
		}
		else
		{
			status = PDS_INVLIAD_FILE_IDX;
    e3f0:	3305      	adds	r3, #5
		if (PDS_MAX_FILE_IDX > argFileId)
    e3f2:	280c      	cmp	r0, #12
    e3f4:	d904      	bls.n	e400 <PDS_RegFile+0x24>
		}
	}
#endif	
	return status;
}
    e3f6:	0018      	movs	r0, r3
    e3f8:	bc10      	pop	{r4}
    e3fa:	bc08      	pop	{r3}
    e3fc:	b004      	add	sp, #16
    e3fe:	4718      	bx	r3
			memcpy(&fileMarks[argFileId], &argFileMarks, sizeof(PdsFileMarks_t));
    e400:	0100      	lsls	r0, r0, #4
    e402:	aa03      	add	r2, sp, #12
    e404:	4b04      	ldr	r3, [pc, #16]	; (e418 <PDS_RegFile+0x3c>)
    e406:	1818      	adds	r0, r3, r0
    e408:	ca1a      	ldmia	r2!, {r1, r3, r4}
    e40a:	c01a      	stmia	r0!, {r1, r3, r4}
    e40c:	6813      	ldr	r3, [r2, #0]
    e40e:	6003      	str	r3, [r0, #0]
	PdsStatus_t status = PDS_OK;
    e410:	2300      	movs	r3, #0
    e412:	e7f0      	b.n	e3f6 <PDS_RegFile+0x1a>
    e414:	20000fbc 	.word	0x20000fbc
    e418:	20002708 	.word	0x20002708

0000e41c <PDS_UnRegFile>:

\param[in] argFileId - The file id to register file to PDS.
\param[out] status - The return status of the function's operation of type PdsStatus_t.
******************************************************************************/
PdsStatus_t PDS_UnRegFile(PdsFileItemIdx_t argFileId)
{
    e41c:	b510      	push	{r4, lr}
	PdsStatus_t status = PDS_OK;
#if (ENABLE_PDS == 1)
	if (false == pdsUnInitFlag)
    e41e:	4b09      	ldr	r3, [pc, #36]	; (e444 <PDS_UnRegFile+0x28>)
    e420:	781a      	ldrb	r2, [r3, #0]
	PdsStatus_t status = PDS_OK;
    e422:	2300      	movs	r3, #0
	if (false == pdsUnInitFlag)
    e424:	2a00      	cmp	r2, #0
    e426:	d102      	bne.n	e42e <PDS_UnRegFile+0x12>
		{
			memset(&fileMarks[argFileId], 0, sizeof(PdsFileMarks_t));
		}
		else
		{
			status = PDS_INVLIAD_FILE_IDX;
    e428:	3305      	adds	r3, #5
		if (PDS_MAX_FILE_IDX > argFileId)
    e42a:	280c      	cmp	r0, #12
    e42c:	d901      	bls.n	e432 <PDS_UnRegFile+0x16>
		}
	}
#endif
	return status;
}
    e42e:	0018      	movs	r0, r3
    e430:	bd10      	pop	{r4, pc}
			memset(&fileMarks[argFileId], 0, sizeof(PdsFileMarks_t));
    e432:	0100      	lsls	r0, r0, #4
    e434:	4b04      	ldr	r3, [pc, #16]	; (e448 <PDS_UnRegFile+0x2c>)
    e436:	18c0      	adds	r0, r0, r3
    e438:	3210      	adds	r2, #16
    e43a:	2100      	movs	r1, #0
    e43c:	4b03      	ldr	r3, [pc, #12]	; (e44c <PDS_UnRegFile+0x30>)
    e43e:	4798      	blx	r3
	PdsStatus_t status = PDS_OK;
    e440:	2300      	movs	r3, #0
    e442:	e7f4      	b.n	e42e <PDS_UnRegFile+0x12>
    e444:	20000fbc 	.word	0x20000fbc
    e448:	20002708 	.word	0x20002708
    e44c:	00019ec9 	.word	0x00019ec9

0000e450 <pdsNvmInit>:

\param[in] none
\param[out] status - The return status of the function's operation of type PdsStatus_t.
******************************************************************************/
PdsStatus_t pdsNvmInit(void)
{
    e450:	b500      	push	{lr}
    e452:	b085      	sub	sp, #20
	PdsStatus_t status = PDS_OK;
	status_code_t statusCode;
	struct nvm_parameters parameters;

	nvm_get_parameters(&parameters);
    e454:	4668      	mov	r0, sp
    e456:	4b0b      	ldr	r3, [pc, #44]	; (e484 <pdsNvmInit+0x34>)
    e458:	4798      	blx	r3
	
	statusCode = nvm_init(INT_FLASH);
    e45a:	2000      	movs	r0, #0
    e45c:	4b0a      	ldr	r3, [pc, #40]	; (e488 <pdsNvmInit+0x38>)
    e45e:	4798      	blx	r3
	if (STATUS_OK != (status_code_genare_t) statusCode)
	{
		return PDS_ERROR;
    e460:	2302      	movs	r3, #2
	if (STATUS_OK != (status_code_genare_t) statusCode)
    e462:	2800      	cmp	r0, #0
    e464:	d002      	beq.n	e46c <pdsNvmInit+0x1c>
	{
		return PDS_NOT_ENOUGH_MEMORY;
	}
	
	return status;
}
    e466:	0018      	movs	r0, r3
    e468:	b005      	add	sp, #20
    e46a:	bd00      	pop	{pc}
	if (EEPROM_SIZE > ( (parameters.rww_eeprom_number_of_pages/NVMCTRL_ROW_PAGES) * NVMCTRL_ROW_SIZE) )
    e46c:	466b      	mov	r3, sp
    e46e:	899a      	ldrh	r2, [r3, #12]
    e470:	0892      	lsrs	r2, r2, #2
    e472:	0212      	lsls	r2, r2, #8
    e474:	4905      	ldr	r1, [pc, #20]	; (e48c <pdsNvmInit+0x3c>)
	return status;
    e476:	0fd3      	lsrs	r3, r2, #31
    e478:	17c8      	asrs	r0, r1, #31
    e47a:	4291      	cmp	r1, r2
    e47c:	4143      	adcs	r3, r0
    e47e:	009b      	lsls	r3, r3, #2
    e480:	e7f1      	b.n	e466 <pdsNvmInit+0x16>
    e482:	46c0      	nop			; (mov r8, r8)
    e484:	00004ed5 	.word	0x00004ed5
    e488:	0000fa65 	.word	0x0000fa65
    e48c:	00001fff 	.word	0x00001fff

0000e490 <pdsNvmRead>:
\param[in] 	buffer - The buffer containing data to be read.
\param[in] 	size - The size of the data in the buffer.
\param[out] status - The return status of the function's operation of type PdsStatus_t.
******************************************************************************/
PdsStatus_t pdsNvmRead(uint16_t rowId, PdsMem_t *buffer, uint16_t size)
{
    e490:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e492:	000c      	movs	r4, r1
\param[out] uint16_t - The calculated 16 bit CRC.
******************************************************************************/
static uint32_t nvmLogicalRowToPhysicalAddr(uint16_t logicalRow)
{
	//return (NVMCTRL_RWW_EEPROM_ADDR + (NVMCTRL_ROW_SIZE * logicalRow)); // PRVN
	 return (PDS_FLASH_START_ADDRESS + (NVMCTRL_ROW_SIZE * logicalRow));
    e494:	2380      	movs	r3, #128	; 0x80
    e496:	01db      	lsls	r3, r3, #7
    e498:	469c      	mov	ip, r3
    e49a:	4460      	add	r0, ip
    e49c:	0205      	lsls	r5, r0, #8
	if (EEPROM_ROW_SIZE == size)
    e49e:	2380      	movs	r3, #128	; 0x80
    e4a0:	005b      	lsls	r3, r3, #1
    e4a2:	429a      	cmp	r2, r3
    e4a4:	d00e      	beq.n	e4c4 <pdsNvmRead+0x34>
		size += sizeof(PdsNvmHeader_t);
    e4a6:	3204      	adds	r2, #4
    e4a8:	b296      	uxth	r6, r2
			statusCode = nvm_read(INT_FLASH, addr, (uint8_t *const)buffer, size);
    e4aa:	4f1e      	ldr	r7, [pc, #120]	; (e524 <pdsNvmRead+0x94>)
    e4ac:	0033      	movs	r3, r6
    e4ae:	0022      	movs	r2, r4
    e4b0:	0029      	movs	r1, r5
    e4b2:	2000      	movs	r0, #0
    e4b4:	47b8      	blx	r7
    e4b6:	b2c3      	uxtb	r3, r0
		} while (statusCode == STATUS_BUSY);		
    e4b8:	2b05      	cmp	r3, #5
    e4ba:	d0f7      	beq.n	e4ac <pdsNvmRead+0x1c>
		return PDS_ERROR;
    e4bc:	2002      	movs	r0, #2
	if (STATUS_OK != statusCode)
    e4be:	2b00      	cmp	r3, #0
    e4c0:	d00b      	beq.n	e4da <pdsNvmRead+0x4a>
}
    e4c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			statusCode = nvm_read(INT_FLASH, addr, (uint8_t *const)buffer, size);
    e4c4:	001e      	movs	r6, r3
    e4c6:	4f17      	ldr	r7, [pc, #92]	; (e524 <pdsNvmRead+0x94>)
    e4c8:	0033      	movs	r3, r6
    e4ca:	0022      	movs	r2, r4
    e4cc:	0029      	movs	r1, r5
    e4ce:	2000      	movs	r0, #0
    e4d0:	47b8      	blx	r7
    e4d2:	b2c3      	uxtb	r3, r0
		} while (statusCode == STATUS_BUSY);
    e4d4:	2b05      	cmp	r3, #5
    e4d6:	d0f7      	beq.n	e4c8 <pdsNvmRead+0x38>
    e4d8:	e7f0      	b.n	e4bc <pdsNvmRead+0x2c>
	crc = buffer->NVM_Struct.pdsNvmHeader.crc;
    e4da:	7823      	ldrb	r3, [r4, #0]
    e4dc:	7860      	ldrb	r0, [r4, #1]
    e4de:	0200      	lsls	r0, r0, #8
    e4e0:	4318      	orrs	r0, r3
	if (crc != calculate_crc(buffer->NVM_Struct.pdsNvmHeader.size, (uint8_t *)&(buffer->NVM_Struct.pdsNvmData))) 
    e4e2:	78a6      	ldrb	r6, [r4, #2]
    e4e4:	3404      	adds	r4, #4
  for (uint16_t i = 0; i < length; i++)
    e4e6:	2e00      	cmp	r6, #0
    e4e8:	d017      	beq.n	e51a <pdsNvmRead+0x8a>
    e4ea:	0025      	movs	r5, r4
    e4ec:	3e01      	subs	r6, #1
    e4ee:	b2b6      	uxth	r6, r6
    e4f0:	3601      	adds	r6, #1
    e4f2:	19a4      	adds	r4, r4, r6
    e4f4:	2600      	movs	r6, #0
  byte ^= initValue & 0xffU;
    e4f6:	782b      	ldrb	r3, [r5, #0]
    e4f8:	4073      	eors	r3, r6
    e4fa:	b2d9      	uxtb	r1, r3
  byte ^= byte << 4U;
    e4fc:	010b      	lsls	r3, r1, #4
    e4fe:	404b      	eors	r3, r1
    e500:	b2db      	uxtb	r3, r3
  return ((((uint16_t)byte << 8) | ((initValue & 0xff00U) >> 8))
    e502:	b29a      	uxth	r2, r3
          ^ (uint8_t)(byte >> 4) ^ ((uint16_t)byte << 3));
    e504:	091b      	lsrs	r3, r3, #4
    e506:	00d1      	lsls	r1, r2, #3
    e508:	404b      	eors	r3, r1
  return ((((uint16_t)byte << 8) | ((initValue & 0xff00U) >> 8))
    e50a:	0212      	lsls	r2, r2, #8
    e50c:	0a36      	lsrs	r6, r6, #8
    e50e:	4332      	orrs	r2, r6
          ^ (uint8_t)(byte >> 4) ^ ((uint16_t)byte << 3));
    e510:	4053      	eors	r3, r2
    e512:	b29e      	uxth	r6, r3
    e514:	3501      	adds	r5, #1
  for (uint16_t i = 0; i < length; i++)
    e516:	42a5      	cmp	r5, r4
    e518:	d1ed      	bne.n	e4f6 <pdsNvmRead+0x66>
	if (crc != calculate_crc(buffer->NVM_Struct.pdsNvmHeader.size, (uint8_t *)&(buffer->NVM_Struct.pdsNvmData))) 
    e51a:	1b80      	subs	r0, r0, r6
    e51c:	1e46      	subs	r6, r0, #1
    e51e:	41b0      	sbcs	r0, r6
		return PDS_ERROR;
    e520:	b2c0      	uxtb	r0, r0
    e522:	e7ce      	b.n	e4c2 <pdsNvmRead+0x32>
    e524:	0000f8f5 	.word	0x0000f8f5

0000e528 <pdsNvmWrite>:
{
    e528:	b5f0      	push	{r4, r5, r6, r7, lr}
    e52a:	46c6      	mov	lr, r8
    e52c:	b500      	push	{lr}
    e52e:	4680      	mov	r8, r0
    e530:	000c      	movs	r4, r1
	buffer->NVM_Struct.pdsNvmHeader.version = PDS_NVM_VERSION;
    e532:	2301      	movs	r3, #1
    e534:	70cb      	strb	r3, [r1, #3]
	buffer->NVM_Struct.pdsNvmHeader.size = size;
    e536:	708a      	strb	r2, [r1, #2]
    e538:	27ff      	movs	r7, #255	; 0xff
    e53a:	4017      	ands	r7, r2
	buffer->NVM_Struct.pdsNvmHeader.crc = calculate_crc(buffer->NVM_Struct.pdsNvmHeader.size, (uint8_t *)(&(buffer->NVM_Struct.pdsNvmData)));
    e53c:	1d0e      	adds	r6, r1, #4
  for (uint16_t i = 0; i < length; i++)
    e53e:	2f00      	cmp	r7, #0
    e540:	d017      	beq.n	e572 <pdsNvmWrite+0x4a>
    e542:	0030      	movs	r0, r6
    e544:	3f01      	subs	r7, #1
    e546:	b2bf      	uxth	r7, r7
    e548:	3701      	adds	r7, #1
    e54a:	19f6      	adds	r6, r6, r7
    e54c:	2700      	movs	r7, #0
  byte ^= initValue & 0xffU;
    e54e:	7803      	ldrb	r3, [r0, #0]
    e550:	407b      	eors	r3, r7
    e552:	b2d9      	uxtb	r1, r3
  byte ^= byte << 4U;
    e554:	010b      	lsls	r3, r1, #4
    e556:	404b      	eors	r3, r1
    e558:	b2db      	uxtb	r3, r3
  return ((((uint16_t)byte << 8) | ((initValue & 0xff00U) >> 8))
    e55a:	b299      	uxth	r1, r3
          ^ (uint8_t)(byte >> 4) ^ ((uint16_t)byte << 3));
    e55c:	091b      	lsrs	r3, r3, #4
    e55e:	00cd      	lsls	r5, r1, #3
    e560:	406b      	eors	r3, r5
  return ((((uint16_t)byte << 8) | ((initValue & 0xff00U) >> 8))
    e562:	0209      	lsls	r1, r1, #8
    e564:	0a3f      	lsrs	r7, r7, #8
    e566:	4339      	orrs	r1, r7
          ^ (uint8_t)(byte >> 4) ^ ((uint16_t)byte << 3));
    e568:	404b      	eors	r3, r1
    e56a:	b29f      	uxth	r7, r3
    e56c:	3001      	adds	r0, #1
  for (uint16_t i = 0; i < length; i++)
    e56e:	42b0      	cmp	r0, r6
    e570:	d1ed      	bne.n	e54e <pdsNvmWrite+0x26>
	buffer->NVM_Struct.pdsNvmHeader.crc = calculate_crc(buffer->NVM_Struct.pdsNvmHeader.size, (uint8_t *)(&(buffer->NVM_Struct.pdsNvmData)));
    e572:	7027      	strb	r7, [r4, #0]
    e574:	0a3f      	lsrs	r7, r7, #8
    e576:	7067      	strb	r7, [r4, #1]
	size += sizeof(PdsNvmHeader_t);
    e578:	3204      	adds	r2, #4
    e57a:	b296      	uxth	r6, r2
	 return (PDS_FLASH_START_ADDRESS + (NVMCTRL_ROW_SIZE * logicalRow));
    e57c:	2180      	movs	r1, #128	; 0x80
    e57e:	01c9      	lsls	r1, r1, #7
    e580:	4441      	add	r1, r8
    e582:	0209      	lsls	r1, r1, #8
	statusCode = nvm_write(INT_FLASH, addr, (uint8_t *const)buffer, size);
    e584:	0033      	movs	r3, r6
    e586:	0022      	movs	r2, r4
    e588:	2000      	movs	r0, #0
    e58a:	4f08      	ldr	r7, [pc, #32]	; (e5ac <pdsNvmWrite+0x84>)
    e58c:	47b8      	blx	r7
		return PDS_ERROR;
    e58e:	2302      	movs	r3, #2
	if (STATUS_OK != (status_code_genare_t) statusCode)
    e590:	2800      	cmp	r0, #0
    e592:	d003      	beq.n	e59c <pdsNvmWrite+0x74>
}
    e594:	0018      	movs	r0, r3
    e596:	bc04      	pop	{r2}
    e598:	4690      	mov	r8, r2
    e59a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	status = pdsNvmRead(rowId, (PdsMem_t *const)buffer, size);
    e59c:	0032      	movs	r2, r6
    e59e:	0021      	movs	r1, r4
    e5a0:	4640      	mov	r0, r8
    e5a2:	4b03      	ldr	r3, [pc, #12]	; (e5b0 <pdsNvmWrite+0x88>)
    e5a4:	4798      	blx	r3
    e5a6:	0003      	movs	r3, r0
	return status;
    e5a8:	e7f4      	b.n	e594 <pdsNvmWrite+0x6c>
    e5aa:	46c0      	nop			; (mov r8, r8)
    e5ac:	0000f951 	.word	0x0000f951
    e5b0:	0000e491 	.word	0x0000e491

0000e5b4 <pdsNvmErase>:
{
    e5b4:	b570      	push	{r4, r5, r6, lr}
	 return (PDS_FLASH_START_ADDRESS + (NVMCTRL_ROW_SIZE * logicalRow));
    e5b6:	2380      	movs	r3, #128	; 0x80
    e5b8:	01db      	lsls	r3, r3, #7
    e5ba:	18c4      	adds	r4, r0, r3
    e5bc:	0224      	lsls	r4, r4, #8
		statusCode = nvm_erase_row(addr);
    e5be:	4d05      	ldr	r5, [pc, #20]	; (e5d4 <pdsNvmErase+0x20>)
    e5c0:	0020      	movs	r0, r4
    e5c2:	47a8      	blx	r5
    e5c4:	b240      	sxtb	r0, r0
	} while (statusCode == ERR_BUSY);
    e5c6:	0003      	movs	r3, r0
    e5c8:	330a      	adds	r3, #10
    e5ca:	d0f9      	beq.n	e5c0 <pdsNvmErase+0xc>
	return status;
    e5cc:	1e43      	subs	r3, r0, #1
    e5ce:	4198      	sbcs	r0, r3
    e5d0:	0040      	lsls	r0, r0, #1
}
    e5d2:	bd70      	pop	{r4, r5, r6, pc}
    e5d4:	00004e2d 	.word	0x00004e2d

0000e5d8 <pdsNvmEraseAll>:
{
    e5d8:	b570      	push	{r4, r5, r6, lr}
    e5da:	2400      	movs	r4, #0
		statusCode = pdsNvmErase(row_idx);
    e5dc:	4d04      	ldr	r5, [pc, #16]	; (e5f0 <pdsNvmEraseAll+0x18>)
    e5de:	b2a0      	uxth	r0, r4
    e5e0:	47a8      	blx	r5
		if (PDS_OK != statusCode)
    e5e2:	2800      	cmp	r0, #0
    e5e4:	d102      	bne.n	e5ec <pdsNvmEraseAll+0x14>
    e5e6:	3401      	adds	r4, #1
	for(uint8_t row_idx = 0; row_idx< EEPROM_NUM_ROWS; row_idx++)
    e5e8:	2c20      	cmp	r4, #32
    e5ea:	d1f8      	bne.n	e5de <pdsNvmEraseAll+0x6>
}
    e5ec:	bd70      	pop	{r4, r5, r6, pc}
    e5ee:	46c0      	nop			; (mov r8, r8)
    e5f0:	0000e5b5 	.word	0x0000e5b5

0000e5f4 <pdsPostTask>:
\brief Set task for PDS task manager.

\param[in] id - a single value from the type PdsTaskIds_t
******************************************************************************/
void pdsPostTask(PdsTaskIds_t id)
{
    e5f4:	b510      	push	{r4, lr}
    e5f6:	0004      	movs	r4, r0
    ATOMIC_SECTION_ENTER
    e5f8:	4b05      	ldr	r3, [pc, #20]	; (e610 <pdsPostTask+0x1c>)
    e5fa:	4798      	blx	r3
    pdsTaskFlags |= id;
    e5fc:	4b05      	ldr	r3, [pc, #20]	; (e614 <pdsPostTask+0x20>)
    e5fe:	7818      	ldrb	r0, [r3, #0]
    e600:	4320      	orrs	r0, r4
    e602:	7018      	strb	r0, [r3, #0]
    ATOMIC_SECTION_EXIT
    e604:	4b04      	ldr	r3, [pc, #16]	; (e618 <pdsPostTask+0x24>)
    e606:	4798      	blx	r3

    /* Also post a PDS task to the system */
    SYSTEM_PostTask(PDS_TASK_ID);
    e608:	2008      	movs	r0, #8
    e60a:	4b04      	ldr	r3, [pc, #16]	; (e61c <pdsPostTask+0x28>)
    e60c:	4798      	blx	r3
}
    e60e:	bd10      	pop	{r4, pc}
    e610:	000083d1 	.word	0x000083d1
    e614:	20000fbd 	.word	0x20000fbd
    e618:	000083dd 	.word	0x000083dd
    e61c:	0000f4bd 	.word	0x0000f4bd

0000e620 <pdsStoreDeleteHandler>:
		initiate store/delete operation.

\param[out] status - The return status of the function's operation.
******************************************************************************/
static SYSTEM_TaskStatus_t pdsStoreDeleteHandler(void)
{
    e620:	b5f0      	push	{r4, r5, r6, r7, lr}
    e622:	46de      	mov	lr, fp
    e624:	4657      	mov	r7, sl
    e626:	464e      	mov	r6, r9
    e628:	4645      	mov	r5, r8
    e62a:	b5e0      	push	{r5, r6, r7, lr}
    e62c:	b0c5      	sub	sp, #276	; 0x114
	PdsStatus_t status = SYSTEM_TASK_SUCCESS;

	PdsFileItemIdx_t fileId = PDS_FILE_MAC_01_IDX;
	PdsMem_t buffer;

	memset(&buffer, 0, sizeof(PdsMem_t));
    e62e:	2280      	movs	r2, #128	; 0x80
    e630:	0052      	lsls	r2, r2, #1
    e632:	2100      	movs	r1, #0
    e634:	a804      	add	r0, sp, #16
    e636:	4b54      	ldr	r3, [pc, #336]	; (e788 <pdsStoreDeleteHandler+0x168>)
    e638:	4798      	blx	r3
	for (; fileId < PDS_MAX_FILE_IDX; fileId++)
	{
		if (true == isFileSet[fileId])
    e63a:	4b54      	ldr	r3, [pc, #336]	; (e78c <pdsStoreDeleteHandler+0x16c>)
    e63c:	781b      	ldrb	r3, [r3, #0]
    e63e:	2b00      	cmp	r3, #0
    e640:	d112      	bne.n	e668 <pdsStoreDeleteHandler+0x48>
    e642:	2401      	movs	r4, #1
    e644:	4a51      	ldr	r2, [pc, #324]	; (e78c <pdsStoreDeleteHandler+0x16c>)
    e646:	9400      	str	r4, [sp, #0]
    e648:	5d13      	ldrb	r3, [r2, r4]
    e64a:	2b00      	cmp	r3, #0
    e64c:	d10f      	bne.n	e66e <pdsStoreDeleteHandler+0x4e>
	for (; fileId < PDS_MAX_FILE_IDX; fileId++)
    e64e:	3401      	adds	r4, #1
    e650:	b2e4      	uxtb	r4, r4
    e652:	2c0c      	cmp	r4, #12
    e654:	d9f7      	bls.n	e646 <pdsStoreDeleteHandler+0x26>
	PdsStatus_t status = SYSTEM_TASK_SUCCESS;
    e656:	2500      	movs	r5, #0
			break;
		}
	}

	return status;
}
    e658:	0028      	movs	r0, r5
    e65a:	b045      	add	sp, #276	; 0x114
    e65c:	bc3c      	pop	{r2, r3, r4, r5}
    e65e:	4690      	mov	r8, r2
    e660:	4699      	mov	r9, r3
    e662:	46a2      	mov	sl, r4
    e664:	46ab      	mov	fp, r5
    e666:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (true == isFileSet[fileId])
    e668:	2300      	movs	r3, #0
    e66a:	9300      	str	r3, [sp, #0]
	PdsFileItemIdx_t fileId = PDS_FILE_MAC_01_IDX;
    e66c:	2400      	movs	r4, #0
	uint8_t *ptr;
	ItemMap_t itemInfo;
	ItemHeader_t itemHeader;
	uint16_t size;

	memcpy((void *)&itemInfo, (void *)(fileMarks[pdsFileItemIdx].itemListAddr + (fileMarks[pdsFileItemIdx].numItems - 1)), sizeof(ItemMap_t));
    e66e:	9b00      	ldr	r3, [sp, #0]
    e670:	011a      	lsls	r2, r3, #4
    e672:	4b47      	ldr	r3, [pc, #284]	; (e790 <pdsStoreDeleteHandler+0x170>)
    e674:	189b      	adds	r3, r3, r2
    e676:	7919      	ldrb	r1, [r3, #4]
    e678:	4a46      	ldr	r2, [pc, #280]	; (e794 <pdsStoreDeleteHandler+0x174>)
    e67a:	4694      	mov	ip, r2
    e67c:	4461      	add	r1, ip
    e67e:	00c9      	lsls	r1, r1, #3
    e680:	689b      	ldr	r3, [r3, #8]
    e682:	1859      	adds	r1, r3, r1
    e684:	2208      	movs	r2, #8
    e686:	a802      	add	r0, sp, #8
    e688:	4b43      	ldr	r3, [pc, #268]	; (e798 <pdsStoreDeleteHandler+0x178>)
    e68a:	4798      	blx	r3
	size = itemInfo.itemOffset + itemInfo.size + sizeof(ItemHeader_t);
    e68c:	ab02      	add	r3, sp, #8
    e68e:	79da      	ldrb	r2, [r3, #7]
    e690:	799b      	ldrb	r3, [r3, #6]
    e692:	18d2      	adds	r2, r2, r3
	status = pdsWlRead(pdsFileItemIdx, (PdsMem_t *)buffer, size);
    e694:	3205      	adds	r2, #5
    e696:	a904      	add	r1, sp, #16
    e698:	0020      	movs	r0, r4
    e69a:	4b40      	ldr	r3, [pc, #256]	; (e79c <pdsStoreDeleteHandler+0x17c>)
    e69c:	4798      	blx	r3
    e69e:	1e05      	subs	r5, r0, #0

	if ((PDS_OK != status) && (PDS_NOT_FOUND != status))
    e6a0:	d111      	bne.n	e6c6 <pdsStoreDeleteHandler+0xa6>
	}

	itemHeader.magic = PDS_MAGIC;
	itemHeader.version = PDS_FILES_VERSION;

	for (uint8_t itemIdx = 0; itemIdx < fileMarks[pdsFileItemIdx].numItems; itemIdx++)
    e6a2:	9b00      	ldr	r3, [sp, #0]
    e6a4:	011a      	lsls	r2, r3, #4
    e6a6:	4b3a      	ldr	r3, [pc, #232]	; (e790 <pdsStoreDeleteHandler+0x170>)
    e6a8:	189b      	adds	r3, r3, r2
    e6aa:	791b      	ldrb	r3, [r3, #4]
    e6ac:	2500      	movs	r5, #0
    e6ae:	2b00      	cmp	r3, #0
    e6b0:	d04a      	beq.n	e748 <pdsStoreDeleteHandler+0x128>
	{

		memcpy((void *)&itemInfo, (fileMarks[pdsFileItemIdx].itemListAddr) + itemIdx, sizeof(ItemMap_t));
    e6b2:	4b37      	ldr	r3, [pc, #220]	; (e790 <pdsStoreDeleteHandler+0x170>)
    e6b4:	4699      	mov	r9, r3
    e6b6:	9b00      	ldr	r3, [sp, #0]
    e6b8:	011e      	lsls	r6, r3, #4
    e6ba:	46b3      	mov	fp, r6
    e6bc:	44cb      	add	fp, r9
    e6be:	4b36      	ldr	r3, [pc, #216]	; (e798 <pdsStoreDeleteHandler+0x178>)
    e6c0:	469a      	mov	sl, r3
	for (uint8_t itemIdx = 0; itemIdx < fileMarks[pdsFileItemIdx].numItems; itemIdx++)
    e6c2:	465f      	mov	r7, fp
    e6c4:	e01b      	b.n	e6fe <pdsStoreDeleteHandler+0xde>
	if ((PDS_OK != status) && (PDS_NOT_FOUND != status))
    e6c6:	2803      	cmp	r0, #3
    e6c8:	d144      	bne.n	e754 <pdsStoreDeleteHandler+0x134>
    e6ca:	e7ea      	b.n	e6a2 <pdsStoreDeleteHandler+0x82>
		ptr = (uint8_t *)(&(((PdsMem_t *)(buffer))->NVM_Struct.pdsNvmData.WL_Struct.pdsWlData));
		ptr += itemInfo.itemOffset;

		if (PDS_OP_STORE == *(fileMarks[pdsFileItemIdx].fileMarkListAddr + itemIdx))
		{
			*(fileMarks[pdsFileItemIdx].fileMarkListAddr + itemIdx) = PDS_OP_NONE;
    e6cc:	2100      	movs	r1, #0
    e6ce:	7019      	strb	r1, [r3, #0]
			itemHeader.size = itemInfo.size;
    e6d0:	ab02      	add	r3, sp, #8
    e6d2:	799a      	ldrb	r2, [r3, #6]
			itemHeader.itemId = itemInfo.itemId;
    e6d4:	795b      	ldrb	r3, [r3, #5]
    e6d6:	4698      	mov	r8, r3
			itemHeader.delete = false;
			memcpy((void *)(ptr), (void *)&itemHeader, sizeof(ItemHeader_t));
    e6d8:	23a5      	movs	r3, #165	; 0xa5
    e6da:	7003      	strb	r3, [r0, #0]
    e6dc:	2301      	movs	r3, #1
    e6de:	7043      	strb	r3, [r0, #1]
    e6e0:	7082      	strb	r2, [r0, #2]
    e6e2:	4643      	mov	r3, r8
    e6e4:	70c3      	strb	r3, [r0, #3]
    e6e6:	7101      	strb	r1, [r0, #4]
			ptr += sizeof(ItemHeader_t);
    e6e8:	3005      	adds	r0, #5
			memcpy((void *)(ptr), (void *)itemInfo.ramAddress, itemInfo.size);
    e6ea:	9b02      	ldr	r3, [sp, #8]
    e6ec:	9301      	str	r3, [sp, #4]
    e6ee:	0019      	movs	r1, r3
    e6f0:	4b29      	ldr	r3, [pc, #164]	; (e798 <pdsStoreDeleteHandler+0x178>)
    e6f2:	4798      	blx	r3
	for (uint8_t itemIdx = 0; itemIdx < fileMarks[pdsFileItemIdx].numItems; itemIdx++)
    e6f4:	3501      	adds	r5, #1
    e6f6:	b2ed      	uxtb	r5, r5
    e6f8:	793b      	ldrb	r3, [r7, #4]
    e6fa:	42ab      	cmp	r3, r5
    e6fc:	d924      	bls.n	e748 <pdsStoreDeleteHandler+0x128>
		memcpy((void *)&itemInfo, (fileMarks[pdsFileItemIdx].itemListAddr) + itemIdx, sizeof(ItemMap_t));
    e6fe:	00e9      	lsls	r1, r5, #3
    e700:	465b      	mov	r3, fp
    e702:	689b      	ldr	r3, [r3, #8]
    e704:	469c      	mov	ip, r3
    e706:	4461      	add	r1, ip
    e708:	2208      	movs	r2, #8
    e70a:	a802      	add	r0, sp, #8
    e70c:	47d0      	blx	sl
		ptr += itemInfo.itemOffset;
    e70e:	ab02      	add	r3, sp, #8
    e710:	79d8      	ldrb	r0, [r3, #7]
    e712:	2315      	movs	r3, #21
    e714:	aa02      	add	r2, sp, #8
    e716:	4694      	mov	ip, r2
    e718:	4463      	add	r3, ip
    e71a:	469c      	mov	ip, r3
    e71c:	4460      	add	r0, ip
		if (PDS_OP_STORE == *(fileMarks[pdsFileItemIdx].fileMarkListAddr + itemIdx))
    e71e:	464b      	mov	r3, r9
    e720:	58f3      	ldr	r3, [r6, r3]
    e722:	195b      	adds	r3, r3, r5
    e724:	781a      	ldrb	r2, [r3, #0]
    e726:	2a01      	cmp	r2, #1
    e728:	d0d0      	beq.n	e6cc <pdsStoreDeleteHandler+0xac>
		}
		else if (PDS_OP_DELETE == *(fileMarks[pdsFileItemIdx].fileMarkListAddr + itemIdx))
    e72a:	2a02      	cmp	r2, #2
    e72c:	d1e2      	bne.n	e6f4 <pdsStoreDeleteHandler+0xd4>
		{
			*(fileMarks[pdsFileItemIdx].fileMarkListAddr + itemIdx) = PDS_OP_NONE;
    e72e:	2200      	movs	r2, #0
    e730:	701a      	strb	r2, [r3, #0]
			itemHeader.size = itemInfo.size;
    e732:	ab02      	add	r3, sp, #8
    e734:	7999      	ldrb	r1, [r3, #6]
			itemHeader.itemId = itemInfo.itemId;
    e736:	795a      	ldrb	r2, [r3, #5]
			itemHeader.delete = true;
			memcpy((void *)(ptr), (void *)&itemHeader, sizeof(ItemHeader_t));
    e738:	23a5      	movs	r3, #165	; 0xa5
    e73a:	7003      	strb	r3, [r0, #0]
    e73c:	3ba4      	subs	r3, #164	; 0xa4
    e73e:	7043      	strb	r3, [r0, #1]
    e740:	7081      	strb	r1, [r0, #2]
    e742:	70c2      	strb	r2, [r0, #3]
    e744:	7103      	strb	r3, [r0, #4]
    e746:	e7d5      	b.n	e6f4 <pdsStoreDeleteHandler+0xd4>
		}
	}

	memcpy((void *)&itemInfo, (void *)(fileMarks[pdsFileItemIdx].itemListAddr + fileMarks[pdsFileItemIdx].numItems), sizeof(ItemMap_t));
	size = itemInfo.itemOffset + itemInfo.size + sizeof(ItemHeader_t);
	status = pdsWlWrite(pdsFileItemIdx, (PdsMem_t *)buffer, PDS_WL_DATA_SIZE);
    e748:	22f3      	movs	r2, #243	; 0xf3
    e74a:	a904      	add	r1, sp, #16
    e74c:	0020      	movs	r0, r4
    e74e:	4b14      	ldr	r3, [pc, #80]	; (e7a0 <pdsStoreDeleteHandler+0x180>)
    e750:	4798      	blx	r3
    e752:	0005      	movs	r5, r0
			isFileSet[fileId] = false;
    e754:	2200      	movs	r2, #0
    e756:	4b0d      	ldr	r3, [pc, #52]	; (e78c <pdsStoreDeleteHandler+0x16c>)
    e758:	9900      	ldr	r1, [sp, #0]
    e75a:	545a      	strb	r2, [r3, r1]
			fileId++;
    e75c:	3401      	adds	r4, #1
    e75e:	b2e3      	uxtb	r3, r4
	for (; fileId < PDS_MAX_FILE_IDX; fileId++)
    e760:	2b0c      	cmp	r3, #12
    e762:	d900      	bls.n	e766 <pdsStoreDeleteHandler+0x146>
    e764:	e778      	b.n	e658 <pdsStoreDeleteHandler+0x38>
		if (isFileSet[fileId])
    e766:	4a09      	ldr	r2, [pc, #36]	; (e78c <pdsStoreDeleteHandler+0x16c>)
    e768:	5cd2      	ldrb	r2, [r2, r3]
    e76a:	2a00      	cmp	r2, #0
    e76c:	d108      	bne.n	e780 <pdsStoreDeleteHandler+0x160>
    e76e:	4907      	ldr	r1, [pc, #28]	; (e78c <pdsStoreDeleteHandler+0x16c>)
	for (; fileId < PDS_MAX_FILE_IDX; fileId++)
    e770:	3301      	adds	r3, #1
    e772:	b2db      	uxtb	r3, r3
    e774:	2b0c      	cmp	r3, #12
    e776:	d900      	bls.n	e77a <pdsStoreDeleteHandler+0x15a>
    e778:	e76e      	b.n	e658 <pdsStoreDeleteHandler+0x38>
		if (isFileSet[fileId])
    e77a:	5cca      	ldrb	r2, [r1, r3]
    e77c:	2a00      	cmp	r2, #0
    e77e:	d0f7      	beq.n	e770 <pdsStoreDeleteHandler+0x150>
			pdsPostTask(PDS_STORE_DELETE_TASK_ID);
    e780:	2001      	movs	r0, #1
    e782:	4b08      	ldr	r3, [pc, #32]	; (e7a4 <pdsStoreDeleteHandler+0x184>)
    e784:	4798      	blx	r3
			break;
    e786:	e767      	b.n	e658 <pdsStoreDeleteHandler+0x38>
    e788:	00019ec9 	.word	0x00019ec9
    e78c:	200026f8 	.word	0x200026f8
    e790:	20002708 	.word	0x20002708
    e794:	1fffffff 	.word	0x1fffffff
    e798:	00019da5 	.word	0x00019da5
    e79c:	0000eab9 	.word	0x0000eab9
    e7a0:	0000e9c9 	.word	0x0000e9c9
    e7a4:	0000e5f5 	.word	0x0000e5f5

0000e7a8 <PDS_TaskHandler>:
{
    e7a8:	b510      	push	{r4, lr}
    if (pdsTaskFlags)
    e7aa:	4b0e      	ldr	r3, [pc, #56]	; (e7e4 <PDS_TaskHandler+0x3c>)
    e7ac:	781b      	ldrb	r3, [r3, #0]
    e7ae:	2b00      	cmp	r3, #0
    e7b0:	d003      	beq.n	e7ba <PDS_TaskHandler+0x12>
            if ((1 << taskId) & (pdsTaskFlags))
    e7b2:	4b0c      	ldr	r3, [pc, #48]	; (e7e4 <PDS_TaskHandler+0x3c>)
    e7b4:	781b      	ldrb	r3, [r3, #0]
    e7b6:	07db      	lsls	r3, r3, #31
    e7b8:	d401      	bmi.n	e7be <PDS_TaskHandler+0x16>
}
    e7ba:	2000      	movs	r0, #0
    e7bc:	bd10      	pop	{r4, pc}
                ATOMIC_SECTION_ENTER
    e7be:	4b0a      	ldr	r3, [pc, #40]	; (e7e8 <PDS_TaskHandler+0x40>)
    e7c0:	4798      	blx	r3
                pdsTaskFlags &= ~(1 << taskId);
    e7c2:	4c08      	ldr	r4, [pc, #32]	; (e7e4 <PDS_TaskHandler+0x3c>)
    e7c4:	7823      	ldrb	r3, [r4, #0]
    e7c6:	2201      	movs	r2, #1
    e7c8:	4393      	bics	r3, r2
    e7ca:	7023      	strb	r3, [r4, #0]
                ATOMIC_SECTION_EXIT
    e7cc:	4b07      	ldr	r3, [pc, #28]	; (e7ec <PDS_TaskHandler+0x44>)
    e7ce:	4798      	blx	r3
                pdsTaskHandlers[taskId]();
    e7d0:	4b07      	ldr	r3, [pc, #28]	; (e7f0 <PDS_TaskHandler+0x48>)
    e7d2:	4798      	blx	r3
				if (pdsTaskFlags)
    e7d4:	7823      	ldrb	r3, [r4, #0]
    e7d6:	2b00      	cmp	r3, #0
    e7d8:	d0ef      	beq.n	e7ba <PDS_TaskHandler+0x12>
                    SYSTEM_PostTask(PDS_TASK_ID);
    e7da:	2008      	movs	r0, #8
    e7dc:	4b05      	ldr	r3, [pc, #20]	; (e7f4 <PDS_TaskHandler+0x4c>)
    e7de:	4798      	blx	r3
    e7e0:	e7eb      	b.n	e7ba <PDS_TaskHandler+0x12>
    e7e2:	46c0      	nop			; (mov r8, r8)
    e7e4:	20000fbd 	.word	0x20000fbd
    e7e8:	000083d1 	.word	0x000083d1
    e7ec:	000083dd 	.word	0x000083dd
    e7f0:	0000e621 	.word	0x0000e621
    e7f4:	0000f4bd 	.word	0x0000f4bd

0000e7f8 <pdsUpdateRowMap>:
		in the row map.

\param[in] - return none
******************************************************************************/
static void pdsUpdateRowMap()
{
    e7f8:	b5f0      	push	{r4, r5, r6, r7, lr}
    e7fa:	4e12      	ldr	r6, [pc, #72]	; (e844 <pdsUpdateRowMap+0x4c>)
    e7fc:	0037      	movs	r7, r6
    e7fe:	371a      	adds	r7, #26
	uint16_t rowIdx = USHRT_MAX;
    for(uint16_t memId = 0, rowIdxLocal = 0 ; memId < PDS_MAX_FILE_IDX; memId++)
    {
		
        // make all the previous indexes of the max_counter_row_idx invalid by writing 0xFF
		if(USHRT_MAX != fileMap[memId].maxCounterRowIdx)
    e800:	4d11      	ldr	r5, [pc, #68]	; (e848 <pdsUpdateRowMap+0x50>)
		{
			rowIdx = rowMap[fileMap[memId].maxCounterRowIdx].previousIdx;
    e802:	4b12      	ldr	r3, [pc, #72]	; (e84c <pdsUpdateRowMap+0x54>)
    e804:	469c      	mov	ip, r3
			rowMap[fileMap[memId].maxCounterRowIdx].previousIdx = USHRT_MAX;
    e806:	2101      	movs	r1, #1
    e808:	4249      	negs	r1, r1
			while(rowIdx != USHRT_MAX)
			{
				rowIdxLocal = rowMap[rowIdx].previousIdx;
    e80a:	0018      	movs	r0, r3
    e80c:	e002      	b.n	e814 <pdsUpdateRowMap+0x1c>
    e80e:	3602      	adds	r6, #2
    for(uint16_t memId = 0, rowIdxLocal = 0 ; memId < PDS_MAX_FILE_IDX; memId++)
    e810:	42be      	cmp	r6, r7
    e812:	d015      	beq.n	e840 <pdsUpdateRowMap+0x48>
		if(USHRT_MAX != fileMap[memId].maxCounterRowIdx)
    e814:	8833      	ldrh	r3, [r6, #0]
    e816:	42ab      	cmp	r3, r5
    e818:	d0f9      	beq.n	e80e <pdsUpdateRowMap+0x16>
			rowIdx = rowMap[fileMap[memId].maxCounterRowIdx].previousIdx;
    e81a:	00db      	lsls	r3, r3, #3
    e81c:	4463      	add	r3, ip
    e81e:	001a      	movs	r2, r3
    e820:	88db      	ldrh	r3, [r3, #6]
			rowMap[fileMap[memId].maxCounterRowIdx].previousIdx = USHRT_MAX;
    e822:	80d1      	strh	r1, [r2, #6]
			while(rowIdx != USHRT_MAX)
    e824:	42ab      	cmp	r3, r5
    e826:	d0f2      	beq.n	e80e <pdsUpdateRowMap+0x16>
				rowIdxLocal = rowMap[rowIdx].previousIdx;
    e828:	001a      	movs	r2, r3
    e82a:	00db      	lsls	r3, r3, #3
    e82c:	18c3      	adds	r3, r0, r3
    e82e:	88db      	ldrh	r3, [r3, #6]
				rowMap[rowIdx].previousIdx = USHRT_MAX;
    e830:	00d2      	lsls	r2, r2, #3
    e832:	1884      	adds	r4, r0, r2
    e834:	80e1      	strh	r1, [r4, #6]
				rowMap[rowIdx].counter = UINT_MAX;
    e836:	5011      	str	r1, [r2, r0]
				rowMap[rowIdx].memId = USHRT_MAX;
    e838:	80a1      	strh	r1, [r4, #4]
			while(rowIdx != USHRT_MAX)
    e83a:	42ab      	cmp	r3, r5
    e83c:	d1f4      	bne.n	e828 <pdsUpdateRowMap+0x30>
    e83e:	e7e6      	b.n	e80e <pdsUpdateRowMap+0x16>
				rowIdx = rowIdxLocal;
			}
		}
    }
}
    e840:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e842:	46c0      	nop			; (mov r8, r8)
    e844:	20000fc0 	.word	0x20000fc0
    e848:	0000ffff 	.word	0x0000ffff
    e84c:	20000fdc 	.word	0x20000fdc

0000e850 <pdsUpdateFileMap>:
\brief Updates the file map so that it points to the latest row index for a file id.

\param[out] - returns none
******************************************************************************/
static void pdsUpdateFileMap(UpdateFileMap_t *updateFileMap)
{
    e850:	b5f0      	push	{r4, r5, r6, r7, lr}
    e852:	46c6      	mov	lr, r8
    e854:	b500      	push	{lr}
    e856:	b082      	sub	sp, #8
    e858:	4684      	mov	ip, r0
    uint16_t *presentRowIdx;
    uint16_t *previousRowIdx;
    uint16_t *lastRowIdx;
    uint16_t prevTemp;
    if(USHRT_MAX == fileMap[updateFileMap->memId].maxCounterRowIdx)
    e85a:	8881      	ldrh	r1, [r0, #4]
    e85c:	004a      	lsls	r2, r1, #1
    e85e:	4b2c      	ldr	r3, [pc, #176]	; (e910 <pdsUpdateFileMap+0xc0>)
    e860:	5ad3      	ldrh	r3, [r2, r3]
    e862:	4a2c      	ldr	r2, [pc, #176]	; (e914 <pdsUpdateFileMap+0xc4>)
    e864:	4293      	cmp	r3, r2
    e866:	d02c      	beq.n	e8c2 <pdsUpdateFileMap+0x72>
    {   
		/* If there is no entry in filemap update current rowidx as maxcounteridx*/
        fileMap[updateFileMap->memId].maxCounterRowIdx = updateFileMap->rowIdx;

    }
    else if(rowMap[fileMap[updateFileMap->memId].maxCounterRowIdx].counter < rowMap[updateFileMap->rowIdx].counter)
    e868:	4a2b      	ldr	r2, [pc, #172]	; (e918 <pdsUpdateFileMap+0xc8>)
    e86a:	00d8      	lsls	r0, r3, #3
    e86c:	5880      	ldr	r0, [r0, r2]
    e86e:	4664      	mov	r4, ip
    e870:	88e4      	ldrh	r4, [r4, #6]
    e872:	46a0      	mov	r8, r4
    e874:	00e4      	lsls	r4, r4, #3
    e876:	58a6      	ldr	r6, [r4, r2]
    e878:	42b0      	cmp	r0, r6
    e87a:	d327      	bcc.n	e8cc <pdsUpdateFileMap+0x7c>
		// update the max counter rowIdx of the memId as previous_idx in the present row
        rowMap[updateFileMap->rowIdx].previousIdx = fileMap[updateFileMap->memId].maxCounterRowIdx;
        fileMap[updateFileMap->memId].maxCounterRowIdx = updateFileMap->rowIdx;

    }
	else if (rowMap[fileMap[updateFileMap->memId].maxCounterRowIdx].counter == rowMap[updateFileMap->rowIdx].counter)
    e87c:	d02f      	beq.n	e8de <pdsUpdateFileMap+0x8e>

		return;
	}
    else
    {
        previousRowIdx = &rowMap[fileMap[updateFileMap->memId].maxCounterRowIdx].previousIdx;
    e87e:	4a26      	ldr	r2, [pc, #152]	; (e918 <pdsUpdateFileMap+0xc8>)
    e880:	00dd      	lsls	r5, r3, #3
    e882:	3506      	adds	r5, #6
    e884:	1950      	adds	r0, r2, r5
    e886:	9001      	str	r0, [sp, #4]
    e888:	00db      	lsls	r3, r3, #3
    e88a:	18d3      	adds	r3, r2, r3
    e88c:	88da      	ldrh	r2, [r3, #6]
        presentRowIdx = &updateFileMap->rowIdx;
        lastRowIdx = &fileMap[updateFileMap->memId].maxCounterRowIdx;
		do
		{
			if (USHRT_MAX == *previousRowIdx)
    e88e:	4b21      	ldr	r3, [pc, #132]	; (e914 <pdsUpdateFileMap+0xc4>)
    e890:	429a      	cmp	r2, r3
    e892:	d028      	beq.n	e8e6 <pdsUpdateFileMap+0x96>
			{
				*previousRowIdx = *presentRowIdx;
				break;
			}
			if (rowMap[*previousRowIdx].counter > rowMap[*presentRowIdx].counter)
    e894:	0013      	movs	r3, r2
    e896:	00d0      	lsls	r0, r2, #3
    e898:	4c1f      	ldr	r4, [pc, #124]	; (e918 <pdsUpdateFileMap+0xc8>)
    e89a:	5900      	ldr	r0, [r0, r4]
    e89c:	4286      	cmp	r6, r0
    e89e:	d226      	bcs.n	e8ee <pdsUpdateFileMap+0x9e>
			{
				lastRowIdx = previousRowIdx;
				previousRowIdx = &rowMap[*previousRowIdx].previousIdx;
    e8a0:	4c1d      	ldr	r4, [pc, #116]	; (e918 <pdsUpdateFileMap+0xc8>)
			if (USHRT_MAX == *previousRowIdx)
    e8a2:	4f1c      	ldr	r7, [pc, #112]	; (e914 <pdsUpdateFileMap+0xc4>)
			if (rowMap[*previousRowIdx].counter > rowMap[*presentRowIdx].counter)
    e8a4:	0020      	movs	r0, r4
				previousRowIdx = &rowMap[*previousRowIdx].previousIdx;
    e8a6:	00db      	lsls	r3, r3, #3
    e8a8:	1d99      	adds	r1, r3, #6
    e8aa:	1861      	adds	r1, r4, r1
    e8ac:	18e3      	adds	r3, r4, r3
    e8ae:	88da      	ldrh	r2, [r3, #6]
			if (USHRT_MAX == *previousRowIdx)
    e8b0:	42ba      	cmp	r2, r7
    e8b2:	d019      	beq.n	e8e8 <pdsUpdateFileMap+0x98>
			if (rowMap[*previousRowIdx].counter > rowMap[*presentRowIdx].counter)
    e8b4:	0013      	movs	r3, r2
    e8b6:	00d5      	lsls	r5, r2, #3
    e8b8:	582d      	ldr	r5, [r5, r0]
    e8ba:	42ae      	cmp	r6, r5
    e8bc:	d21b      	bcs.n	e8f6 <pdsUpdateFileMap+0xa6>
				previousRowIdx = &rowMap[*previousRowIdx].previousIdx;
    e8be:	9101      	str	r1, [sp, #4]
    e8c0:	e7f1      	b.n	e8a6 <pdsUpdateFileMap+0x56>
        fileMap[updateFileMap->memId].maxCounterRowIdx = updateFileMap->rowIdx;
    e8c2:	88c2      	ldrh	r2, [r0, #6]
    e8c4:	0049      	lsls	r1, r1, #1
    e8c6:	4b12      	ldr	r3, [pc, #72]	; (e910 <pdsUpdateFileMap+0xc0>)
    e8c8:	52ca      	strh	r2, [r1, r3]
    e8ca:	e008      	b.n	e8de <pdsUpdateFileMap+0x8e>
        rowMap[updateFileMap->rowIdx].previousIdx = fileMap[updateFileMap->memId].maxCounterRowIdx;
    e8cc:	4a12      	ldr	r2, [pc, #72]	; (e918 <pdsUpdateFileMap+0xc8>)
    e8ce:	1912      	adds	r2, r2, r4
    e8d0:	80d3      	strh	r3, [r2, #6]
        fileMap[updateFileMap->memId].maxCounterRowIdx = updateFileMap->rowIdx;
    e8d2:	4663      	mov	r3, ip
    e8d4:	88d9      	ldrh	r1, [r3, #6]
    e8d6:	889b      	ldrh	r3, [r3, #4]
    e8d8:	005b      	lsls	r3, r3, #1
    e8da:	4a0d      	ldr	r2, [pc, #52]	; (e910 <pdsUpdateFileMap+0xc0>)
    e8dc:	5299      	strh	r1, [r3, r2]
				break;
			}
		} while(true);

    }
}
    e8de:	b002      	add	sp, #8
    e8e0:	bc04      	pop	{r2}
    e8e2:	4690      	mov	r8, r2
    e8e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
        previousRowIdx = &rowMap[fileMap[updateFileMap->memId].maxCounterRowIdx].previousIdx;
    e8e6:	9901      	ldr	r1, [sp, #4]
				*previousRowIdx = *presentRowIdx;
    e8e8:	4643      	mov	r3, r8
    e8ea:	800b      	strh	r3, [r1, #0]
				break;
    e8ec:	e7f7      	b.n	e8de <pdsUpdateFileMap+0x8e>
        lastRowIdx = &fileMap[updateFileMap->memId].maxCounterRowIdx;
    e8ee:	0049      	lsls	r1, r1, #1
    e8f0:	4d07      	ldr	r5, [pc, #28]	; (e910 <pdsUpdateFileMap+0xc0>)
    e8f2:	186b      	adds	r3, r5, r1
    e8f4:	9301      	str	r3, [sp, #4]
				rowMap[*lastRowIdx].previousIdx = *presentRowIdx;
    e8f6:	4908      	ldr	r1, [pc, #32]	; (e918 <pdsUpdateFileMap+0xc8>)
    e8f8:	9b01      	ldr	r3, [sp, #4]
    e8fa:	881b      	ldrh	r3, [r3, #0]
    e8fc:	00db      	lsls	r3, r3, #3
    e8fe:	18cb      	adds	r3, r1, r3
    e900:	4640      	mov	r0, r8
    e902:	80d8      	strh	r0, [r3, #6]
				rowMap[*presentRowIdx].previousIdx = prevTemp;
    e904:	4663      	mov	r3, ip
    e906:	88db      	ldrh	r3, [r3, #6]
    e908:	00db      	lsls	r3, r3, #3
    e90a:	18c9      	adds	r1, r1, r3
    e90c:	80ca      	strh	r2, [r1, #6]
				break;
    e90e:	e7e6      	b.n	e8de <pdsUpdateFileMap+0x8e>
    e910:	20000fc0 	.word	0x20000fc0
    e914:	0000ffff 	.word	0x0000ffff
    e918:	20000fdc 	.word	0x20000fdc

0000e91c <pdsWlInit>:
{
    e91c:	b5f0      	push	{r4, r5, r6, r7, lr}
    e91e:	46c6      	mov	lr, r8
    e920:	b500      	push	{lr}
    e922:	b0c4      	sub	sp, #272	; 0x110
	PdsStatus_t status = pdsNvmInit();
    e924:	4b21      	ldr	r3, [pc, #132]	; (e9ac <pdsWlInit+0x90>)
    e926:	4798      	blx	r3
    e928:	9001      	str	r0, [sp, #4]
	if (PDS_OK != status)
    e92a:	2800      	cmp	r0, #0
    e92c:	d004      	beq.n	e938 <pdsWlInit+0x1c>
}
    e92e:	9801      	ldr	r0, [sp, #4]
    e930:	b044      	add	sp, #272	; 0x110
    e932:	bc04      	pop	{r2}
    e934:	4690      	mov	r8, r2
    e936:	bdf0      	pop	{r4, r5, r6, r7, pc}
	memset(&rowMap, UCHAR_MAX, EEPROM_NUM_ROWS * sizeof(RowMap_t));
    e938:	2680      	movs	r6, #128	; 0x80
    e93a:	0076      	lsls	r6, r6, #1
    e93c:	4d1c      	ldr	r5, [pc, #112]	; (e9b0 <pdsWlInit+0x94>)
    e93e:	0032      	movs	r2, r6
    e940:	21ff      	movs	r1, #255	; 0xff
    e942:	0028      	movs	r0, r5
    e944:	4c1b      	ldr	r4, [pc, #108]	; (e9b4 <pdsWlInit+0x98>)
    e946:	47a0      	blx	r4
    memset(&fileMap, UCHAR_MAX, PDS_MAX_FILE_IDX * sizeof(FileMap_t));
    e948:	221a      	movs	r2, #26
    e94a:	21ff      	movs	r1, #255	; 0xff
    e94c:	481a      	ldr	r0, [pc, #104]	; (e9b8 <pdsWlInit+0x9c>)
    e94e:	47a0      	blx	r4
	memset(&buffer, 0, sizeof(PdsMem_t));
    e950:	0032      	movs	r2, r6
    e952:	2100      	movs	r1, #0
    e954:	a804      	add	r0, sp, #16
    e956:	47a0      	blx	r4
    e958:	2400      	movs	r4, #0
		status = pdsNvmRead(rowIdx, &buffer, EEPROM_ROW_SIZE);
    e95a:	4e18      	ldr	r6, [pc, #96]	; (e9bc <pdsWlInit+0xa0>)
            pdsUpdateFileMap(&updateFileMap);
    e95c:	4b18      	ldr	r3, [pc, #96]	; (e9c0 <pdsWlInit+0xa4>)
    e95e:	4698      	mov	r8, r3
    e960:	e003      	b.n	e96a <pdsWlInit+0x4e>
    e962:	3401      	adds	r4, #1
    e964:	3508      	adds	r5, #8
    for(uint8_t rowIdx = 0; rowIdx< EEPROM_NUM_ROWS; rowIdx++)
    e966:	2c20      	cmp	r4, #32
    e968:	d01d      	beq.n	e9a6 <pdsWlInit+0x8a>
		status = pdsNvmRead(rowIdx, &buffer, EEPROM_ROW_SIZE);
    e96a:	b2a7      	uxth	r7, r4
    e96c:	2280      	movs	r2, #128	; 0x80
    e96e:	0052      	lsls	r2, r2, #1
    e970:	a904      	add	r1, sp, #16
    e972:	0038      	movs	r0, r7
    e974:	47b0      	blx	r6
		if (PDS_OK == status)
    e976:	2800      	cmp	r0, #0
    e978:	d1f3      	bne.n	e962 <pdsWlInit+0x46>
			rowMap[rowIdx].counter = buffer.NVM_Struct.pdsNvmData.WL_Struct.pdsWlHeader.counter;
    e97a:	a904      	add	r1, sp, #16
    e97c:	9b06      	ldr	r3, [sp, #24]
    e97e:	0a1b      	lsrs	r3, r3, #8
    e980:	7b0a      	ldrb	r2, [r1, #12]
    e982:	0612      	lsls	r2, r2, #24
    e984:	431a      	orrs	r2, r3
    e986:	602a      	str	r2, [r5, #0]
            rowMap[rowIdx].memId = buffer.NVM_Struct.pdsNvmData.WL_Struct.pdsWlHeader.memId;
    e988:	79c8      	ldrb	r0, [r1, #7]
    e98a:	7a0b      	ldrb	r3, [r1, #8]
    e98c:	021b      	lsls	r3, r3, #8
    e98e:	4303      	orrs	r3, r0
    e990:	80ab      	strh	r3, [r5, #4]
            rowMap[rowIdx].previousIdx = USHRT_MAX;
    e992:	2101      	movs	r1, #1
    e994:	4249      	negs	r1, r1
    e996:	80e9      	strh	r1, [r5, #6]
            updateFileMap.counter = buffer.NVM_Struct.pdsNvmData.WL_Struct.pdsWlHeader.counter;
    e998:	9202      	str	r2, [sp, #8]
            updateFileMap.memId = buffer.NVM_Struct.pdsNvmData.WL_Struct.pdsWlHeader.memId;
    e99a:	aa02      	add	r2, sp, #8
    e99c:	8093      	strh	r3, [r2, #4]
            updateFileMap.rowIdx = rowIdx;
    e99e:	80d7      	strh	r7, [r2, #6]
            pdsUpdateFileMap(&updateFileMap);
    e9a0:	0010      	movs	r0, r2
    e9a2:	47c0      	blx	r8
    e9a4:	e7dd      	b.n	e962 <pdsWlInit+0x46>
    pdsUpdateRowMap();
    e9a6:	4b07      	ldr	r3, [pc, #28]	; (e9c4 <pdsWlInit+0xa8>)
    e9a8:	4798      	blx	r3
	return PDS_OK;
    e9aa:	e7c0      	b.n	e92e <pdsWlInit+0x12>
    e9ac:	0000e451 	.word	0x0000e451
    e9b0:	20000fdc 	.word	0x20000fdc
    e9b4:	00019ec9 	.word	0x00019ec9
    e9b8:	20000fc0 	.word	0x20000fc0
    e9bc:	0000e491 	.word	0x0000e491
    e9c0:	0000e851 	.word	0x0000e851
    e9c4:	0000e7f9 	.word	0x0000e7f9

0000e9c8 <pdsWlWrite>:
{
    e9c8:	b5f0      	push	{r4, r5, r6, r7, lr}
    e9ca:	46ce      	mov	lr, r9
    e9cc:	4647      	mov	r7, r8
    e9ce:	b580      	push	{r7, lr}
    e9d0:	b083      	sub	sp, #12
    e9d2:	0005      	movs	r5, r0
    e9d4:	000f      	movs	r7, r1
    e9d6:	4690      	mov	r8, r2
    e9d8:	4e32      	ldr	r6, [pc, #200]	; (eaa4 <pdsWlWrite+0xdc>)
    e9da:	0033      	movs	r3, r6
******************************************************************************/
static uint16_t pdsReturnFreeRowIdx(void)
{
    uint8_t rowIdx;
    bool found = 0;
    for(rowIdx = 0; rowIdx < EEPROM_NUM_ROWS; rowIdx++)
    e9dc:	2400      	movs	r4, #0
    {
        if( (UINT_MAX == rowMap[rowIdx].counter) &&
    e9de:	4832      	ldr	r0, [pc, #200]	; (eaa8 <pdsWlWrite+0xe0>)
    e9e0:	e004      	b.n	e9ec <pdsWlWrite+0x24>
    for(rowIdx = 0; rowIdx < EEPROM_NUM_ROWS; rowIdx++)
    e9e2:	3401      	adds	r4, #1
    e9e4:	b2e4      	uxtb	r4, r4
    e9e6:	3308      	adds	r3, #8
    e9e8:	2c20      	cmp	r4, #32
    e9ea:	d055      	beq.n	ea98 <pdsWlWrite+0xd0>
        if( (UINT_MAX == rowMap[rowIdx].counter) &&
    e9ec:	6819      	ldr	r1, [r3, #0]
    e9ee:	3101      	adds	r1, #1
    e9f0:	d1f7      	bne.n	e9e2 <pdsWlWrite+0x1a>
    e9f2:	88d9      	ldrh	r1, [r3, #6]
    e9f4:	4281      	cmp	r1, r0
    e9f6:	d1f4      	bne.n	e9e2 <pdsWlWrite+0x1a>
            (USHRT_MAX == rowMap[rowIdx].previousIdx) &&
    e9f8:	889a      	ldrh	r2, [r3, #4]
    e9fa:	4282      	cmp	r2, r0
    e9fc:	d1f1      	bne.n	e9e2 <pdsWlWrite+0x1a>
            {
                break;
            }
        }
    }
	return rowIdx;
    e9fe:	b2a3      	uxth	r3, r4
    ea00:	4699      	mov	r9, r3
	buffer->NVM_Struct.pdsNvmData.WL_Struct.pdsWlHeader.counter++;
    ea02:	7a7e      	ldrb	r6, [r7, #9]
    ea04:	7abb      	ldrb	r3, [r7, #10]
    ea06:	021b      	lsls	r3, r3, #8
    ea08:	4333      	orrs	r3, r6
    ea0a:	7afe      	ldrb	r6, [r7, #11]
    ea0c:	0436      	lsls	r6, r6, #16
    ea0e:	4333      	orrs	r3, r6
    ea10:	7b3e      	ldrb	r6, [r7, #12]
    ea12:	0636      	lsls	r6, r6, #24
    ea14:	431e      	orrs	r6, r3
    ea16:	3601      	adds	r6, #1
    ea18:	727e      	strb	r6, [r7, #9]
    ea1a:	0a32      	lsrs	r2, r6, #8
    ea1c:	72ba      	strb	r2, [r7, #10]
    ea1e:	0c32      	lsrs	r2, r6, #16
    ea20:	72fa      	strb	r2, [r7, #11]
    ea22:	0e32      	lsrs	r2, r6, #24
    ea24:	733a      	strb	r2, [r7, #12]
	buffer->NVM_Struct.pdsNvmData.WL_Struct.pdsWlHeader.memId = pdsFileItemIdx;
    ea26:	b2ad      	uxth	r5, r5
    ea28:	71fd      	strb	r5, [r7, #7]
    ea2a:	2200      	movs	r2, #0
    ea2c:	723a      	strb	r2, [r7, #8]
	buffer->NVM_Struct.pdsNvmData.WL_Struct.pdsWlHeader.magicNo = PDS_MAGIC;
    ea2e:	23a5      	movs	r3, #165	; 0xa5
    ea30:	713b      	strb	r3, [r7, #4]
	buffer->NVM_Struct.pdsNvmData.WL_Struct.pdsWlHeader.version = PDS_WL_VERSION;
    ea32:	3ba4      	subs	r3, #164	; 0xa4
    ea34:	717b      	strb	r3, [r7, #5]
	buffer->NVM_Struct.pdsNvmData.WL_Struct.pdsWlHeader.size = size;
    ea36:	4643      	mov	r3, r8
    ea38:	71bb      	strb	r3, [r7, #6]
	size += sizeof(PdsWlHeader_t);
    ea3a:	4642      	mov	r2, r8
    ea3c:	3209      	adds	r2, #9
	status = pdsNvmWrite(rowIdx, buffer, size);
    ea3e:	b292      	uxth	r2, r2
    ea40:	0039      	movs	r1, r7
    ea42:	4648      	mov	r0, r9
    ea44:	4b19      	ldr	r3, [pc, #100]	; (eaac <pdsWlWrite+0xe4>)
    ea46:	4798      	blx	r3
    ea48:	1e07      	subs	r7, r0, #0
	if (PDS_OK == status)
    ea4a:	d014      	beq.n	ea76 <pdsWlWrite+0xae>
}
    ea4c:	0038      	movs	r0, r7
    ea4e:	b003      	add	sp, #12
    ea50:	bc0c      	pop	{r2, r3}
    ea52:	4690      	mov	r8, r2
    ea54:	4699      	mov	r9, r3
    ea56:	bdf0      	pop	{r4, r5, r6, r7, pc}
        for(rowIdx = 0; rowIdx < EEPROM_NUM_ROWS; rowIdx++)
    ea58:	3401      	adds	r4, #1
    ea5a:	b2e4      	uxtb	r4, r4
    ea5c:	3608      	adds	r6, #8
    ea5e:	2c20      	cmp	r4, #32
    ea60:	d0cd      	beq.n	e9fe <pdsWlWrite+0x36>
            if( (UINT_MAX == rowMap[rowIdx].counter) &&
    ea62:	6832      	ldr	r2, [r6, #0]
    ea64:	3201      	adds	r2, #1
    ea66:	d1f7      	bne.n	ea58 <pdsWlWrite+0x90>
    ea68:	88f2      	ldrh	r2, [r6, #6]
    ea6a:	428a      	cmp	r2, r1
    ea6c:	d1f4      	bne.n	ea58 <pdsWlWrite+0x90>
                (USHRT_MAX == rowMap[rowIdx].previousIdx) &&
    ea6e:	88b3      	ldrh	r3, [r6, #4]
    ea70:	428b      	cmp	r3, r1
    ea72:	d1f1      	bne.n	ea58 <pdsWlWrite+0x90>
    ea74:	e7c3      	b.n	e9fe <pdsWlWrite+0x36>
		rowMap[rowIdx].counter = counter;
    ea76:	4b0b      	ldr	r3, [pc, #44]	; (eaa4 <pdsWlWrite+0xdc>)
    ea78:	00e4      	lsls	r4, r4, #3
    ea7a:	50e6      	str	r6, [r4, r3]
		rowMap[rowIdx].memId = pdsFileItemIdx;
    ea7c:	191c      	adds	r4, r3, r4
    ea7e:	80a5      	strh	r5, [r4, #4]
		rowMap[rowIdx].previousIdx = USHRT_MAX;
    ea80:	2301      	movs	r3, #1
    ea82:	425b      	negs	r3, r3
    ea84:	80e3      	strh	r3, [r4, #6]
		updateFileMap.counter = rowMap[rowIdx].counter;
    ea86:	9600      	str	r6, [sp, #0]
		updateFileMap.memId = rowMap[rowIdx].memId;
    ea88:	466b      	mov	r3, sp
    ea8a:	809d      	strh	r5, [r3, #4]
		updateFileMap.rowIdx = rowIdx;
    ea8c:	464a      	mov	r2, r9
    ea8e:	80da      	strh	r2, [r3, #6]
		pdsUpdateFileMap(&updateFileMap);
    ea90:	4668      	mov	r0, sp
    ea92:	4b07      	ldr	r3, [pc, #28]	; (eab0 <pdsWlWrite+0xe8>)
    ea94:	4798      	blx	r3
	return status;
    ea96:	e7d9      	b.n	ea4c <pdsWlWrite+0x84>
        pdsUpdateRowMap();
    ea98:	4b06      	ldr	r3, [pc, #24]	; (eab4 <pdsWlWrite+0xec>)
    ea9a:	4798      	blx	r3
        for(rowIdx = 0; rowIdx < EEPROM_NUM_ROWS; rowIdx++)
    ea9c:	2400      	movs	r4, #0
            if( (UINT_MAX == rowMap[rowIdx].counter) &&
    ea9e:	4902      	ldr	r1, [pc, #8]	; (eaa8 <pdsWlWrite+0xe0>)
    eaa0:	e7df      	b.n	ea62 <pdsWlWrite+0x9a>
    eaa2:	46c0      	nop			; (mov r8, r8)
    eaa4:	20000fdc 	.word	0x20000fdc
    eaa8:	0000ffff 	.word	0x0000ffff
    eaac:	0000e529 	.word	0x0000e529
    eab0:	0000e851 	.word	0x0000e851
    eab4:	0000e7f9 	.word	0x0000e7f9

0000eab8 <pdsWlRead>:
{
    eab8:	b510      	push	{r4, lr}
	uint16_t rowIdx = fileMap[pdsFileItemIdx].maxCounterRowIdx;
    eaba:	0040      	lsls	r0, r0, #1
    eabc:	4b06      	ldr	r3, [pc, #24]	; (ead8 <pdsWlRead+0x20>)
    eabe:	5ac3      	ldrh	r3, [r0, r3]
	if (USHRT_MAX == rowIdx)
    eac0:	4c06      	ldr	r4, [pc, #24]	; (eadc <pdsWlRead+0x24>)
		return PDS_NOT_FOUND;
    eac2:	2003      	movs	r0, #3
	if (USHRT_MAX == rowIdx)
    eac4:	42a3      	cmp	r3, r4
    eac6:	d100      	bne.n	eaca <pdsWlRead+0x12>
}
    eac8:	bd10      	pop	{r4, pc}
	size += sizeof(PdsWlHeader_t);
    eaca:	3209      	adds	r2, #9
	status = pdsNvmRead(rowIdx, buffer, size);
    eacc:	b292      	uxth	r2, r2
    eace:	0018      	movs	r0, r3
    ead0:	4b03      	ldr	r3, [pc, #12]	; (eae0 <pdsWlRead+0x28>)
    ead2:	4798      	blx	r3
	return status;
    ead4:	e7f8      	b.n	eac8 <pdsWlRead+0x10>
    ead6:	46c0      	nop			; (mov r8, r8)
    ead8:	20000fc0 	.word	0x20000fc0
    eadc:	0000ffff 	.word	0x0000ffff
    eae0:	0000e491 	.word	0x0000e491

0000eae4 <isFileFound>:

\param[out] - return true or false
******************************************************************************/
bool isFileFound(PdsFileItemIdx_t pdsFileItemIdx)
{
	uint16_t rowIdx = fileMap[pdsFileItemIdx].maxCounterRowIdx;
    eae4:	0040      	lsls	r0, r0, #1
	if (USHRT_MAX == rowIdx)
    eae6:	4b04      	ldr	r3, [pc, #16]	; (eaf8 <isFileFound+0x14>)
    eae8:	5ac0      	ldrh	r0, [r0, r3]
    eaea:	4b04      	ldr	r3, [pc, #16]	; (eafc <isFileFound+0x18>)
    eaec:	469c      	mov	ip, r3
    eaee:	4460      	add	r0, ip
    eaf0:	1e43      	subs	r3, r0, #1
    eaf2:	4198      	sbcs	r0, r3
    eaf4:	b2c0      	uxtb	r0, r0
	}
	else
	{
		return true;
	}
}
    eaf6:	4770      	bx	lr
    eaf8:	20000fc0 	.word	0x20000fc0
    eafc:	ffff0001 	.word	0xffff0001

0000eb00 <pdsWlDeleteAll>:

void pdsWlDeleteAll(void)
{
    eb00:	b510      	push	{r4, lr}
	/* Clear Filemap array */
	memset(&rowMap, UCHAR_MAX, EEPROM_NUM_ROWS * sizeof(RowMap_t));
    eb02:	2280      	movs	r2, #128	; 0x80
    eb04:	0052      	lsls	r2, r2, #1
    eb06:	21ff      	movs	r1, #255	; 0xff
    eb08:	4804      	ldr	r0, [pc, #16]	; (eb1c <pdsWlDeleteAll+0x1c>)
    eb0a:	4c05      	ldr	r4, [pc, #20]	; (eb20 <pdsWlDeleteAll+0x20>)
    eb0c:	47a0      	blx	r4
	/* Clear Row Map Array */
    memset(&fileMap, UCHAR_MAX, PDS_MAX_FILE_IDX * sizeof(FileMap_t));
    eb0e:	221a      	movs	r2, #26
    eb10:	21ff      	movs	r1, #255	; 0xff
    eb12:	4804      	ldr	r0, [pc, #16]	; (eb24 <pdsWlDeleteAll+0x24>)
    eb14:	47a0      	blx	r4
	/* Call NVM Erase All */
	pdsNvmEraseAll();
    eb16:	4b04      	ldr	r3, [pc, #16]	; (eb28 <pdsWlDeleteAll+0x28>)
    eb18:	4798      	blx	r3
}
    eb1a:	bd10      	pop	{r4, pc}
    eb1c:	20000fdc 	.word	0x20000fdc
    eb20:	00019ec9 	.word	0x00019ec9
    eb24:	20000fc0 	.word	0x20000fc0
    eb28:	0000e5d9 	.word	0x0000e5d9

0000eb2c <hwTimerExpiryCallback>:
    swtimerProcessOverflow();
}

/* ISR to handle CC0 interrupt from TC0 */
static void hwTimerExpiryCallback(void)
{
    eb2c:	b510      	push	{r4, lr}
    if (0 < runningTimers)
    eb2e:	4b06      	ldr	r3, [pc, #24]	; (eb48 <hwTimerExpiryCallback+0x1c>)
    eb30:	781b      	ldrb	r3, [r3, #0]
    eb32:	2b00      	cmp	r3, #0
    eb34:	d100      	bne.n	eb38 <hwTimerExpiryCallback+0xc>
    {
        isTimerTriggered = true;
        SYSTEM_PostTask(TIMER_TASK_ID);
    }
}
    eb36:	bd10      	pop	{r4, pc}
        isTimerTriggered = true;
    eb38:	2201      	movs	r2, #1
    eb3a:	4b04      	ldr	r3, [pc, #16]	; (eb4c <hwTimerExpiryCallback+0x20>)
    eb3c:	701a      	strb	r2, [r3, #0]
        SYSTEM_PostTask(TIMER_TASK_ID);
    eb3e:	2001      	movs	r0, #1
    eb40:	4b03      	ldr	r3, [pc, #12]	; (eb50 <hwTimerExpiryCallback+0x24>)
    eb42:	4798      	blx	r3
}
    eb44:	e7f7      	b.n	eb36 <hwTimerExpiryCallback+0xa>
    eb46:	46c0      	nop			; (mov r8, r8)
    eb48:	200010ec 	.word	0x200010ec
    eb4c:	2000297a 	.word	0x2000297a
    eb50:	0000f4bd 	.word	0x0000f4bd

0000eb54 <hwTimerOverflowCallback>:
{
    eb54:	b510      	push	{r4, lr}
    eb56:	b082      	sub	sp, #8
    uint16_t temp = sysTime;
    eb58:	4924      	ldr	r1, [pc, #144]	; (ebec <hwTimerOverflowCallback+0x98>)
    eb5a:	880a      	ldrh	r2, [r1, #0]
    eb5c:	b292      	uxth	r2, r2
    if (++sysTime < temp)
    eb5e:	880b      	ldrh	r3, [r1, #0]
    eb60:	3301      	adds	r3, #1
    eb62:	b29b      	uxth	r3, r3
    eb64:	800b      	strh	r3, [r1, #0]
    eb66:	429a      	cmp	r2, r3
    eb68:	d903      	bls.n	eb72 <hwTimerOverflowCallback+0x1e>
        sysTimeOvf++;
    eb6a:	4a21      	ldr	r2, [pc, #132]	; (ebf0 <hwTimerOverflowCallback+0x9c>)
    eb6c:	6813      	ldr	r3, [r2, #0]
    eb6e:	3301      	adds	r3, #1
    eb70:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    eb72:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
    eb76:	425a      	negs	r2, r3
    eb78:	4153      	adcs	r3, r2
    eb7a:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    eb7c:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
    eb7e:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    eb82:	2200      	movs	r2, #0
    eb84:	4b1b      	ldr	r3, [pc, #108]	; (ebf4 <hwTimerOverflowCallback+0xa0>)
    eb86:	701a      	strb	r2, [r3, #0]
	return flags;
    eb88:	9c01      	ldr	r4, [sp, #4]
{
    uint32_t tmo32;
    uint16_t tmoHigh16, tmoLow16;
    uint8_t flags = cpu_irq_save();

    if (SWTIMER_INVALID != runningTimerQueueHead && !swTimers[runningTimerQueueHead].loaded)
    eb8a:	4b1b      	ldr	r3, [pc, #108]	; (ebf8 <hwTimerOverflowCallback+0xa4>)
    eb8c:	681b      	ldr	r3, [r3, #0]
    eb8e:	2bff      	cmp	r3, #255	; 0xff
    eb90:	d00d      	beq.n	ebae <hwTimerOverflowCallback+0x5a>
    eb92:	0119      	lsls	r1, r3, #4
    eb94:	4a19      	ldr	r2, [pc, #100]	; (ebfc <hwTimerOverflowCallback+0xa8>)
    eb96:	1852      	adds	r2, r2, r1
    eb98:	7b52      	ldrb	r2, [r2, #13]
    eb9a:	2a00      	cmp	r2, #0
    eb9c:	d107      	bne.n	ebae <hwTimerOverflowCallback+0x5a>
    {
        tmo32 = swTimers[runningTimerQueueHead].absoluteExpiryTime;
    eb9e:	4a17      	ldr	r2, [pc, #92]	; (ebfc <hwTimerOverflowCallback+0xa8>)
    eba0:	5888      	ldr	r0, [r1, r2]
        tmoHigh16 = (uint16_t)(tmo32 >> SWTIMER_SYSTIME_SHIFTMASK);

        if (tmoHigh16 == sysTime)
    eba2:	4b12      	ldr	r3, [pc, #72]	; (ebec <hwTimerOverflowCallback+0x98>)
    eba4:	881b      	ldrh	r3, [r3, #0]
    eba6:	b29b      	uxth	r3, r3
    eba8:	0c02      	lsrs	r2, r0, #16
    ebaa:	429a      	cmp	r2, r3
    ebac:	d00a      	beq.n	ebc4 <hwTimerOverflowCallback+0x70>
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    ebae:	23ff      	movs	r3, #255	; 0xff
    ebb0:	4223      	tst	r3, r4
    ebb2:	d005      	beq.n	ebc0 <hwTimerOverflowCallback+0x6c>
		cpu_irq_enable();
    ebb4:	2201      	movs	r2, #1
    ebb6:	4b0f      	ldr	r3, [pc, #60]	; (ebf4 <hwTimerOverflowCallback+0xa0>)
    ebb8:	701a      	strb	r2, [r3, #0]
    ebba:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    ebbe:	b662      	cpsie	i
}
    ebc0:	b002      	add	sp, #8
    ebc2:	bd10      	pop	{r4, pc}
        {
            tmoLow16 = (uint16_t)(tmo32 & SWTIMER_HWTIME_MASK);
    ebc4:	b280      	uxth	r0, r0
            if (SWTIMER_MIN_TIMEOUT < tmoLow16)
    ebc6:	28ff      	cmp	r0, #255	; 0xff
    ebc8:	d909      	bls.n	ebde <hwTimerOverflowCallback+0x8a>
            {
                common_tc_delay(tmoLow16);
    ebca:	4b0d      	ldr	r3, [pc, #52]	; (ec00 <hwTimerOverflowCallback+0xac>)
    ebcc:	4798      	blx	r3
                swTimers[runningTimerQueueHead].loaded = true;
    ebce:	4b0a      	ldr	r3, [pc, #40]	; (ebf8 <hwTimerOverflowCallback+0xa4>)
    ebd0:	681a      	ldr	r2, [r3, #0]
    ebd2:	0112      	lsls	r2, r2, #4
    ebd4:	4b09      	ldr	r3, [pc, #36]	; (ebfc <hwTimerOverflowCallback+0xa8>)
    ebd6:	189b      	adds	r3, r3, r2
    ebd8:	2201      	movs	r2, #1
    ebda:	735a      	strb	r2, [r3, #13]
    ebdc:	e7e7      	b.n	ebae <hwTimerOverflowCallback+0x5a>
            }
            else
            {
                isTimerTriggered = true;
    ebde:	2201      	movs	r2, #1
    ebe0:	4b08      	ldr	r3, [pc, #32]	; (ec04 <hwTimerOverflowCallback+0xb0>)
    ebe2:	701a      	strb	r2, [r3, #0]
                SYSTEM_PostTask(TIMER_TASK_ID);
    ebe4:	2001      	movs	r0, #1
    ebe6:	4b08      	ldr	r3, [pc, #32]	; (ec08 <hwTimerOverflowCallback+0xb4>)
    ebe8:	4798      	blx	r3
    ebea:	e7e0      	b.n	ebae <hwTimerOverflowCallback+0x5a>
    ebec:	20002978 	.word	0x20002978
    ebf0:	2000297c 	.word	0x2000297c
    ebf4:	20000014 	.word	0x20000014
    ebf8:	200010e8 	.word	0x200010e8
    ebfc:	200027e8 	.word	0x200027e8
    ec00:	0000fc99 	.word	0x0000fc99
    ec04:	2000297a 	.word	0x2000297a
    ec08:	0000f4bd 	.word	0x0000f4bd

0000ec0c <loadHwTimer>:
{
    ec0c:	b570      	push	{r4, r5, r6, lr}
    ec0e:	0004      	movs	r4, r0
    if (SWTIMER_INVALID != timerId)
    ec10:	28ff      	cmp	r0, #255	; 0xff
    ec12:	d030      	beq.n	ec76 <loadHwTimer+0x6a>
    time |= ((uint64_t) sysTimeOvf) << 32;
    ec14:	4b19      	ldr	r3, [pc, #100]	; (ec7c <loadHwTimer+0x70>)
    ec16:	681b      	ldr	r3, [r3, #0]
    time |= ((uint64_t) sysTime) << 16;
    ec18:	4b19      	ldr	r3, [pc, #100]	; (ec80 <loadHwTimer+0x74>)
    ec1a:	881d      	ldrh	r5, [r3, #0]
    ec1c:	042d      	lsls	r5, r5, #16
    time |= (uint64_t) common_tc_read_count();
    ec1e:	4b19      	ldr	r3, [pc, #100]	; (ec84 <loadHwTimer+0x78>)
    ec20:	4798      	blx	r3
        uint32_t expiryTime = swTimers[timerId].absoluteExpiryTime;
    ec22:	0123      	lsls	r3, r4, #4
    time |= (uint64_t) common_tc_read_count();
    ec24:	4328      	orrs	r0, r5
    return ((t2 - t1) < INT32_MAX);
    ec26:	4a18      	ldr	r2, [pc, #96]	; (ec88 <loadHwTimer+0x7c>)
    ec28:	589b      	ldr	r3, [r3, r2]
    ec2a:	1a18      	subs	r0, r3, r0
        if (swtimerCompareTime(now, expiryTime))
    ec2c:	4b17      	ldr	r3, [pc, #92]	; (ec8c <loadHwTimer+0x80>)
    ec2e:	4298      	cmp	r0, r3
    ec30:	d81a      	bhi.n	ec68 <loadHwTimer+0x5c>
            if (!swTimers[timerId].loaded)
    ec32:	0122      	lsls	r2, r4, #4
    ec34:	4b14      	ldr	r3, [pc, #80]	; (ec88 <loadHwTimer+0x7c>)
    ec36:	189b      	adds	r3, r3, r2
    ec38:	7b5b      	ldrb	r3, [r3, #13]
    ec3a:	2b00      	cmp	r3, #0
    ec3c:	d11d      	bne.n	ec7a <loadHwTimer+0x6e>
                if (SWTIMER_MIN_TIMEOUT >= timeDiff)
    ec3e:	28ff      	cmp	r0, #255	; 0xff
    ec40:	d90b      	bls.n	ec5a <loadHwTimer+0x4e>
                else  if ((uint32_t)TIMER_PERIOD >= timeDiff)
    ec42:	4b13      	ldr	r3, [pc, #76]	; (ec90 <loadHwTimer+0x84>)
    ec44:	4298      	cmp	r0, r3
    ec46:	d818      	bhi.n	ec7a <loadHwTimer+0x6e>
                    common_tc_delay((uint16_t)timeDiff);
    ec48:	b280      	uxth	r0, r0
    ec4a:	4b12      	ldr	r3, [pc, #72]	; (ec94 <loadHwTimer+0x88>)
    ec4c:	4798      	blx	r3
                    swTimers[timerId].loaded = true;
    ec4e:	0124      	lsls	r4, r4, #4
    ec50:	4b0d      	ldr	r3, [pc, #52]	; (ec88 <loadHwTimer+0x7c>)
    ec52:	191c      	adds	r4, r3, r4
    ec54:	2301      	movs	r3, #1
    ec56:	7363      	strb	r3, [r4, #13]
    ec58:	e00f      	b.n	ec7a <loadHwTimer+0x6e>
                    isTimerTriggered = true;
    ec5a:	2201      	movs	r2, #1
    ec5c:	4b0e      	ldr	r3, [pc, #56]	; (ec98 <loadHwTimer+0x8c>)
    ec5e:	701a      	strb	r2, [r3, #0]
                    SYSTEM_PostTask(TIMER_TASK_ID);
    ec60:	2001      	movs	r0, #1
    ec62:	4b0e      	ldr	r3, [pc, #56]	; (ec9c <loadHwTimer+0x90>)
    ec64:	4798      	blx	r3
    ec66:	e008      	b.n	ec7a <loadHwTimer+0x6e>
            isTimerTriggered = true;
    ec68:	2201      	movs	r2, #1
    ec6a:	4b0b      	ldr	r3, [pc, #44]	; (ec98 <loadHwTimer+0x8c>)
    ec6c:	701a      	strb	r2, [r3, #0]
            SYSTEM_PostTask(TIMER_TASK_ID);
    ec6e:	2001      	movs	r0, #1
    ec70:	4b0a      	ldr	r3, [pc, #40]	; (ec9c <loadHwTimer+0x90>)
    ec72:	4798      	blx	r3
    ec74:	e001      	b.n	ec7a <loadHwTimer+0x6e>
        common_tc_compare_stop();
    ec76:	4b0a      	ldr	r3, [pc, #40]	; (eca0 <loadHwTimer+0x94>)
    ec78:	4798      	blx	r3
}
    ec7a:	bd70      	pop	{r4, r5, r6, pc}
    ec7c:	2000297c 	.word	0x2000297c
    ec80:	20002978 	.word	0x20002978
    ec84:	0000fbf1 	.word	0x0000fbf1
    ec88:	200027e8 	.word	0x200027e8
    ec8c:	7ffffffe 	.word	0x7ffffffe
    ec90:	0000ffff 	.word	0x0000ffff
    ec94:	0000fc99 	.word	0x0000fc99
    ec98:	2000297a 	.word	0x2000297a
    ec9c:	0000f4bd 	.word	0x0000f4bd
    eca0:	0000fc3d 	.word	0x0000fc3d

0000eca4 <swtimerInternalHandler>:

/**************************************************************************//**
\brief Internal handler for the timer trigger
******************************************************************************/
static void swtimerInternalHandler(void)
{
    eca4:	b510      	push	{r4, lr}
    if (isTimerTriggered)
    eca6:	4b1d      	ldr	r3, [pc, #116]	; (ed1c <swtimerInternalHandler+0x78>)
    eca8:	781b      	ldrb	r3, [r3, #0]
    ecaa:	2b00      	cmp	r3, #0
    ecac:	d027      	beq.n	ecfe <swtimerInternalHandler+0x5a>
    {
        isTimerTriggered = false;
    ecae:	2200      	movs	r2, #0
    ecb0:	4b1a      	ldr	r3, [pc, #104]	; (ed1c <swtimerInternalHandler+0x78>)
    ecb2:	701a      	strb	r2, [r3, #0]

        if (0 < runningTimers)
    ecb4:	4b1a      	ldr	r3, [pc, #104]	; (ed20 <swtimerInternalHandler+0x7c>)
    ecb6:	781b      	ldrb	r3, [r3, #0]
    ecb8:	2b00      	cmp	r3, #0
    ecba:	d020      	beq.n	ecfe <swtimerInternalHandler+0x5a>
        { /* Holds the number of running timers */
            if ((expiredTimerQueueHead == SWTIMER_INVALID) && \
    ecbc:	4b19      	ldr	r3, [pc, #100]	; (ed24 <swtimerInternalHandler+0x80>)
    ecbe:	681b      	ldr	r3, [r3, #0]
    ecc0:	2bff      	cmp	r3, #255	; 0xff
    ecc2:	d01d      	beq.n	ed00 <swtimerInternalHandler+0x5c>
                expiredTimerQueueHead = runningTimerQueueHead;
                expiredTimerQueueTail = runningTimerQueueHead;
            }
            else
            { /* there were already some timers expired before this one */
                swTimers[expiredTimerQueueTail].nextTimer = runningTimerQueueHead;
    ecc4:	4b18      	ldr	r3, [pc, #96]	; (ed28 <swtimerInternalHandler+0x84>)
    ecc6:	6818      	ldr	r0, [r3, #0]
    ecc8:	4918      	ldr	r1, [pc, #96]	; (ed2c <swtimerInternalHandler+0x88>)
    ecca:	680b      	ldr	r3, [r1, #0]
    eccc:	011a      	lsls	r2, r3, #4
    ecce:	4b18      	ldr	r3, [pc, #96]	; (ed30 <swtimerInternalHandler+0x8c>)
    ecd0:	189b      	adds	r3, r3, r2
    ecd2:	7318      	strb	r0, [r3, #12]
                expiredTimerQueueTail = runningTimerQueueHead;
    ecd4:	6008      	str	r0, [r1, #0]
            }

            runningTimerQueueHead = swTimers[runningTimerQueueHead].nextTimer;
    ecd6:	4a16      	ldr	r2, [pc, #88]	; (ed30 <swtimerInternalHandler+0x8c>)
    ecd8:	4913      	ldr	r1, [pc, #76]	; (ed28 <swtimerInternalHandler+0x84>)
    ecda:	680b      	ldr	r3, [r1, #0]
    ecdc:	011b      	lsls	r3, r3, #4
    ecde:	18d3      	adds	r3, r2, r3
    ece0:	7b18      	ldrb	r0, [r3, #12]
    ece2:	6008      	str	r0, [r1, #0]

            swTimers[expiredTimerQueueTail].nextTimer = SWTIMER_INVALID;
    ece4:	4b11      	ldr	r3, [pc, #68]	; (ed2c <swtimerInternalHandler+0x88>)
    ece6:	681b      	ldr	r3, [r3, #0]
    ece8:	011b      	lsls	r3, r3, #4
    ecea:	18d2      	adds	r2, r2, r3
    ecec:	23ff      	movs	r3, #255	; 0xff
    ecee:	7313      	strb	r3, [r2, #12]

            if ((--runningTimers) > 0)
    ecf0:	4a0b      	ldr	r2, [pc, #44]	; (ed20 <swtimerInternalHandler+0x7c>)
    ecf2:	7813      	ldrb	r3, [r2, #0]
    ecf4:	3b01      	subs	r3, #1
    ecf6:	b2db      	uxtb	r3, r3
    ecf8:	7013      	strb	r3, [r2, #0]
    ecfa:	2b00      	cmp	r3, #0
    ecfc:	d10b      	bne.n	ed16 <swtimerInternalHandler+0x72>
            { /* keep the ball rolling! load the next head timer from the queue */
                loadHwTimer(runningTimerQueueHead);
            }
        }
    }
}
    ecfe:	bd10      	pop	{r4, pc}
                (expiredTimerQueueTail == SWTIMER_INVALID))
    ed00:	4b0a      	ldr	r3, [pc, #40]	; (ed2c <swtimerInternalHandler+0x88>)
            if ((expiredTimerQueueHead == SWTIMER_INVALID) && \
    ed02:	681b      	ldr	r3, [r3, #0]
    ed04:	2bff      	cmp	r3, #255	; 0xff
    ed06:	d1dd      	bne.n	ecc4 <swtimerInternalHandler+0x20>
                expiredTimerQueueHead = runningTimerQueueHead;
    ed08:	4b07      	ldr	r3, [pc, #28]	; (ed28 <swtimerInternalHandler+0x84>)
    ed0a:	681b      	ldr	r3, [r3, #0]
    ed0c:	4a05      	ldr	r2, [pc, #20]	; (ed24 <swtimerInternalHandler+0x80>)
    ed0e:	6013      	str	r3, [r2, #0]
                expiredTimerQueueTail = runningTimerQueueHead;
    ed10:	4a06      	ldr	r2, [pc, #24]	; (ed2c <swtimerInternalHandler+0x88>)
    ed12:	6013      	str	r3, [r2, #0]
    ed14:	e7df      	b.n	ecd6 <swtimerInternalHandler+0x32>
                loadHwTimer(runningTimerQueueHead);
    ed16:	4b07      	ldr	r3, [pc, #28]	; (ed34 <swtimerInternalHandler+0x90>)
    ed18:	4798      	blx	r3
}
    ed1a:	e7f0      	b.n	ecfe <swtimerInternalHandler+0x5a>
    ed1c:	2000297a 	.word	0x2000297a
    ed20:	200010ec 	.word	0x200010ec
    ed24:	200010e0 	.word	0x200010e0
    ed28:	200010e8 	.word	0x200010e8
    ed2c:	200010e4 	.word	0x200010e4
    ed30:	200027e8 	.word	0x200027e8
    ed34:	0000ec0d 	.word	0x0000ec0d

0000ed38 <SwTimerReset>:
    /*
    * Initialize the timer resources like timer arrays queues, timer registers
    */
    uint8_t index;

    runningTimers = 0u;
    ed38:	2300      	movs	r3, #0
    ed3a:	4a0d      	ldr	r2, [pc, #52]	; (ed70 <SwTimerReset+0x38>)
    ed3c:	7013      	strb	r3, [r2, #0]
    isTimerTriggered = false;
    ed3e:	4a0d      	ldr	r2, [pc, #52]	; (ed74 <SwTimerReset+0x3c>)
    ed40:	7013      	strb	r3, [r2, #0]

    runningTimerQueueHead = SWTIMER_INVALID;
    ed42:	33ff      	adds	r3, #255	; 0xff
    ed44:	4a0c      	ldr	r2, [pc, #48]	; (ed78 <SwTimerReset+0x40>)
    ed46:	6013      	str	r3, [r2, #0]
    expiredTimerQueueHead = SWTIMER_INVALID;
    ed48:	4a0c      	ldr	r2, [pc, #48]	; (ed7c <SwTimerReset+0x44>)
    ed4a:	6013      	str	r3, [r2, #0]
    expiredTimerQueueTail = SWTIMER_INVALID;
    ed4c:	4a0c      	ldr	r2, [pc, #48]	; (ed80 <SwTimerReset+0x48>)
    ed4e:	6013      	str	r3, [r2, #0]
    ed50:	4b0c      	ldr	r3, [pc, #48]	; (ed84 <SwTimerReset+0x4c>)
    ed52:	0018      	movs	r0, r3
    ed54:	3091      	adds	r0, #145	; 0x91
    ed56:	30ff      	adds	r0, #255	; 0xff

    for (index = 0; index < TOTAL_NUMBER_OF_SW_TIMERS; index++)
    {
        swTimers[index].nextTimer = SWTIMER_INVALID;
    ed58:	21ff      	movs	r1, #255	; 0xff
        swTimers[index].timerCb = NULL;
    ed5a:	2200      	movs	r2, #0
        swTimers[index].nextTimer = SWTIMER_INVALID;
    ed5c:	7219      	strb	r1, [r3, #8]
        swTimers[index].timerCb = NULL;
    ed5e:	601a      	str	r2, [r3, #0]
    ed60:	3310      	adds	r3, #16
    for (index = 0; index < TOTAL_NUMBER_OF_SW_TIMERS; index++)
    ed62:	4283      	cmp	r3, r0
    ed64:	d1fa      	bne.n	ed5c <SwTimerReset+0x24>
    }

    allocatedTimerId = 0u;
    ed66:	2200      	movs	r2, #0
    ed68:	4b07      	ldr	r3, [pc, #28]	; (ed88 <SwTimerReset+0x50>)
    ed6a:	701a      	strb	r2, [r3, #0]
}
    ed6c:	4770      	bx	lr
    ed6e:	46c0      	nop			; (mov r8, r8)
    ed70:	200010ec 	.word	0x200010ec
    ed74:	2000297a 	.word	0x2000297a
    ed78:	200010e8 	.word	0x200010e8
    ed7c:	200010e0 	.word	0x200010e0
    ed80:	200010e4 	.word	0x200010e4
    ed84:	200027ec 	.word	0x200027ec
    ed88:	200010dc 	.word	0x200010dc

0000ed8c <SystemTimerInit>:

/**************************************************************************//**
\brief Initializes the Software Timer module
******************************************************************************/
void SystemTimerInit(void)
{
    ed8c:	b510      	push	{r4, lr}
    SwTimerReset();
    ed8e:	4b08      	ldr	r3, [pc, #32]	; (edb0 <SystemTimerInit+0x24>)
    ed90:	4798      	blx	r3

    /* initialize system time parameters */
    sysTimeOvf = 0x00000000;
    ed92:	2300      	movs	r3, #0
    ed94:	4a07      	ldr	r2, [pc, #28]	; (edb4 <SystemTimerInit+0x28>)
    ed96:	6013      	str	r3, [r2, #0]
    sysTime = 0x0000;
    ed98:	4a07      	ldr	r2, [pc, #28]	; (edb8 <SystemTimerInit+0x2c>)
    ed9a:	8013      	strh	r3, [r2, #0]

    common_tc_init();
    ed9c:	4b07      	ldr	r3, [pc, #28]	; (edbc <SystemTimerInit+0x30>)
    ed9e:	4798      	blx	r3
    set_common_tc_overflow_callback(hwTimerOverflowCallback);
    eda0:	4807      	ldr	r0, [pc, #28]	; (edc0 <SystemTimerInit+0x34>)
    eda2:	4b08      	ldr	r3, [pc, #32]	; (edc4 <SystemTimerInit+0x38>)
    eda4:	4798      	blx	r3
    set_common_tc_expiry_callback(hwTimerExpiryCallback);
    eda6:	4808      	ldr	r0, [pc, #32]	; (edc8 <SystemTimerInit+0x3c>)
    eda8:	4b08      	ldr	r3, [pc, #32]	; (edcc <SystemTimerInit+0x40>)
    edaa:	4798      	blx	r3
}
    edac:	bd10      	pop	{r4, pc}
    edae:	46c0      	nop			; (mov r8, r8)
    edb0:	0000ed39 	.word	0x0000ed39
    edb4:	2000297c 	.word	0x2000297c
    edb8:	20002978 	.word	0x20002978
    edbc:	0000fd05 	.word	0x0000fd05
    edc0:	0000eb55 	.word	0x0000eb55
    edc4:	0000fd89 	.word	0x0000fd89
    edc8:	0000eb2d 	.word	0x0000eb2d
    edcc:	0000fd95 	.word	0x0000fd95

0000edd0 <SwTimerGetTime>:
/**************************************************************************//**
\brief Get current system time.
\return Returns current system time in microseconds
******************************************************************************/
uint64_t SwTimerGetTime(void)
{
    edd0:	b570      	push	{r4, r5, r6, lr}
    time |= ((uint64_t) sysTimeOvf) << 32;
    edd2:	4b05      	ldr	r3, [pc, #20]	; (ede8 <SwTimerGetTime+0x18>)
    edd4:	681c      	ldr	r4, [r3, #0]
    time |= ((uint64_t) sysTime) << 16;
    edd6:	4b05      	ldr	r3, [pc, #20]	; (edec <SwTimerGetTime+0x1c>)
    edd8:	881d      	ldrh	r5, [r3, #0]
    edda:	042d      	lsls	r5, r5, #16
    time |= (uint64_t) common_tc_read_count();
    eddc:	4b04      	ldr	r3, [pc, #16]	; (edf0 <SwTimerGetTime+0x20>)
    edde:	4798      	blx	r3
    ede0:	4328      	orrs	r0, r5
    return gettime();
}
    ede2:	0021      	movs	r1, r4
    ede4:	bd70      	pop	{r4, r5, r6, pc}
    ede6:	46c0      	nop			; (mov r8, r8)
    ede8:	2000297c 	.word	0x2000297c
    edec:	20002978 	.word	0x20002978
    edf0:	0000fbf1 	.word	0x0000fbf1

0000edf4 <SwTimerCreate>:

\return LORAWAN_SUCCESS if new timerId is allocated
        LORAWAN_RESOURCE_UNAVAILABLE if there is no more timerId to allocate
******************************************************************************/
StackRetStatus_t SwTimerCreate(uint8_t *timerId)
{
    edf4:	b510      	push	{r4, lr}
    edf6:	0004      	movs	r4, r0
    StackRetStatus_t retVal = LORAWAN_SUCCESS;

    if (allocatedTimerId < TOTAL_NUMBER_OF_SW_TIMERS)
    edf8:	4b08      	ldr	r3, [pc, #32]	; (ee1c <SwTimerCreate+0x28>)
    edfa:	781b      	ldrb	r3, [r3, #0]
        * If you reach this spot it means the TOTAL_NUMBER_OF_SW_TIMERS
        * is #defined to a lower value than the number of timers that have
        * been SwTimerCreate()
        */
        SYS_ASSERT_FATAL(ASSERT_HAL_TIMERID_EXHAUSTED);
        retVal = LORAWAN_RESOURCE_UNAVAILABLE;
    edfc:	2014      	movs	r0, #20
    if (allocatedTimerId < TOTAL_NUMBER_OF_SW_TIMERS)
    edfe:	2b18      	cmp	r3, #24
    ee00:	d900      	bls.n	ee04 <SwTimerCreate+0x10>
    }

    return retVal;
}
    ee02:	bd10      	pop	{r4, pc}
        ATOMIC_SECTION_ENTER
    ee04:	4b06      	ldr	r3, [pc, #24]	; (ee20 <SwTimerCreate+0x2c>)
    ee06:	4798      	blx	r3
        *timerId = allocatedTimerId;
    ee08:	4a04      	ldr	r2, [pc, #16]	; (ee1c <SwTimerCreate+0x28>)
    ee0a:	7813      	ldrb	r3, [r2, #0]
    ee0c:	7023      	strb	r3, [r4, #0]
        allocatedTimerId++;
    ee0e:	3301      	adds	r3, #1
    ee10:	7013      	strb	r3, [r2, #0]
        ATOMIC_SECTION_EXIT
    ee12:	4b04      	ldr	r3, [pc, #16]	; (ee24 <SwTimerCreate+0x30>)
    ee14:	4798      	blx	r3
    StackRetStatus_t retVal = LORAWAN_SUCCESS;
    ee16:	2008      	movs	r0, #8
    ee18:	e7f3      	b.n	ee02 <SwTimerCreate+0xe>
    ee1a:	46c0      	nop			; (mov r8, r8)
    ee1c:	200010dc 	.word	0x200010dc
    ee20:	000083d1 	.word	0x000083d1
    ee24:	000083dd 	.word	0x000083dd

0000ee28 <SwTimerStart>:
        LORAWAN_INVALID_REQUEST if \timerId is already running
        LORAWAN_SUCCESS if \timerId is successfully queued for running
******************************************************************************/
StackRetStatus_t SwTimerStart(uint8_t timerId, uint32_t timerCount,
    SwTimeoutType_t timeoutType, void *timerCb, void *paramCb)
{
    ee28:	b5f0      	push	{r4, r5, r6, r7, lr}
    ee2a:	46d6      	mov	lr, sl
    ee2c:	464f      	mov	r7, r9
    ee2e:	4646      	mov	r6, r8
    ee30:	b5c0      	push	{r6, r7, lr}
    ee32:	b084      	sub	sp, #16
    ee34:	0007      	movs	r7, r0
    ee36:	000d      	movs	r5, r1
    ee38:	0016      	movs	r6, r2
    ee3a:	001c      	movs	r4, r3
    uint32_t pointInTime;

    if (TOTAL_NUMBER_OF_SW_TIMERS <= timerId || NULL == timerCb)
    {
        SYS_ASSERT_INFO(ASSERT_HAL_TIMER_START_FAILURE);
        return LORAWAN_INVALID_PARAMETER;
    ee3c:	200a      	movs	r0, #10
    if (TOTAL_NUMBER_OF_SW_TIMERS <= timerId || NULL == timerCb)
    ee3e:	2f18      	cmp	r7, #24
    ee40:	d809      	bhi.n	ee56 <SwTimerStart+0x2e>
    ee42:	2b00      	cmp	r3, #0
    ee44:	d100      	bne.n	ee48 <SwTimerStart+0x20>
    ee46:	e08c      	b.n	ef62 <SwTimerStart+0x13a>
    }

    if (NULL != swTimers[timerId].timerCb)
    ee48:	013a      	lsls	r2, r7, #4
    ee4a:	4b52      	ldr	r3, [pc, #328]	; (ef94 <SwTimerStart+0x16c>)
    ee4c:	189b      	adds	r3, r3, r2
    ee4e:	685b      	ldr	r3, [r3, #4]
        /*
        * Timer is already running if the callback function of the
        * corresponding timer index in the timer array is not NULL.
        */
        SYS_ASSERT_INFO(ASSERT_HAL_TIMER_START_FAILURE);
        return LORAWAN_INVALID_REQUEST;
    ee50:	300b      	adds	r0, #11
    if (NULL != swTimers[timerId].timerCb)
    ee52:	2b00      	cmp	r3, #0
    ee54:	d005      	beq.n	ee62 <SwTimerStart+0x3a>
        }
    }

    swtimerStartAbsoluteTimer(timerId, pointInTime, timerCb, paramCb);
    return LORAWAN_SUCCESS;
}
    ee56:	b004      	add	sp, #16
    ee58:	bc1c      	pop	{r2, r3, r4}
    ee5a:	4690      	mov	r8, r2
    ee5c:	4699      	mov	r9, r3
    ee5e:	46a2      	mov	sl, r4
    ee60:	bdf0      	pop	{r4, r5, r6, r7, pc}
    time |= ((uint64_t) sysTimeOvf) << 32;
    ee62:	4b4d      	ldr	r3, [pc, #308]	; (ef98 <SwTimerStart+0x170>)
    ee64:	681b      	ldr	r3, [r3, #0]
    time |= ((uint64_t) sysTime) << 16;
    ee66:	4b4d      	ldr	r3, [pc, #308]	; (ef9c <SwTimerStart+0x174>)
    ee68:	8818      	ldrh	r0, [r3, #0]
    ee6a:	0403      	lsls	r3, r0, #16
    ee6c:	4698      	mov	r8, r3
    time |= (uint64_t) common_tc_read_count();
    ee6e:	4b4c      	ldr	r3, [pc, #304]	; (efa0 <SwTimerStart+0x178>)
    ee70:	4798      	blx	r3
    ee72:	4643      	mov	r3, r8
    ee74:	4303      	orrs	r3, r0
    switch (timeoutType)
    ee76:	2e00      	cmp	r6, #0
    ee78:	d003      	beq.n	ee82 <SwTimerStart+0x5a>
    ee7a:	2e01      	cmp	r6, #1
    ee7c:	d038      	beq.n	eef0 <SwTimerStart+0xc8>
            return LORAWAN_INVALID_PARAMETER;
    ee7e:	200a      	movs	r0, #10
    ee80:	e7e9      	b.n	ee56 <SwTimerStart+0x2e>
            if ((timerCount > SWTIMER_MAX_TIMEOUT) || \
    ee82:	4948      	ldr	r1, [pc, #288]	; (efa4 <SwTimerStart+0x17c>)
                return LORAWAN_INVALID_PARAMETER;
    ee84:	200a      	movs	r0, #10
            if ((timerCount > SWTIMER_MAX_TIMEOUT) || \
    ee86:	002a      	movs	r2, r5
    ee88:	3aff      	subs	r2, #255	; 0xff
            pointInTime = ADD_TIME(timerCount, now);
    ee8a:	18ed      	adds	r5, r5, r3
            if ((timerCount > SWTIMER_MAX_TIMEOUT) || \
    ee8c:	428a      	cmp	r2, r1
    ee8e:	d8e2      	bhi.n	ee56 <SwTimerStart+0x2e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    ee90:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    ee94:	425a      	negs	r2, r3
    ee96:	4153      	adcs	r3, r2
    ee98:	9303      	str	r3, [sp, #12]
  __ASM volatile ("cpsid i" : : : "memory");
    ee9a:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
    ee9c:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    eea0:	2600      	movs	r6, #0
    eea2:	4b41      	ldr	r3, [pc, #260]	; (efa8 <SwTimerStart+0x180>)
    eea4:	701e      	strb	r6, [r3, #0]
	return flags;
    eea6:	9b03      	ldr	r3, [sp, #12]
    eea8:	4699      	mov	r9, r3
    swtimerInternalHandler();
    eeaa:	4b40      	ldr	r3, [pc, #256]	; (efac <SwTimerStart+0x184>)
    eeac:	4798      	blx	r3
    swTimers[timerId].absoluteExpiryTime = pointInTime;
    eeae:	4b39      	ldr	r3, [pc, #228]	; (ef94 <SwTimerStart+0x16c>)
    eeb0:	013a      	lsls	r2, r7, #4
    eeb2:	50d5      	str	r5, [r2, r3]
    swTimers[timerId].timerCb = (void (*)(void*))handlerCb;
    eeb4:	189b      	adds	r3, r3, r2
    eeb6:	605c      	str	r4, [r3, #4]
    swTimers[timerId].paramCb = parameter;
    eeb8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    eeba:	609a      	str	r2, [r3, #8]
    swTimers[timerId].loaded = false;
    eebc:	735e      	strb	r6, [r3, #13]
    runningTimers++;
    eebe:	4a3c      	ldr	r2, [pc, #240]	; (efb0 <SwTimerStart+0x188>)
    eec0:	7813      	ldrb	r3, [r2, #0]
    eec2:	3301      	adds	r3, #1
    eec4:	b2db      	uxtb	r3, r3
    eec6:	7013      	strb	r3, [r2, #0]
    if (SWTIMER_INVALID == runningTimerQueueHead)
    eec8:	4b3a      	ldr	r3, [pc, #232]	; (efb4 <SwTimerStart+0x18c>)
    eeca:	681b      	ldr	r3, [r3, #0]
    eecc:	469a      	mov	sl, r3
    eece:	2bff      	cmp	r3, #255	; 0xff
    eed0:	d016      	beq.n	ef00 <SwTimerStart+0xd8>
        uint8_t currIndex = runningTimerQueueHead;
    eed2:	466a      	mov	r2, sp
    eed4:	7013      	strb	r3, [r2, #0]
    eed6:	7812      	ldrb	r2, [r2, #0]
        for (index = 0; index < runningTimers; index++)
    eed8:	4b35      	ldr	r3, [pc, #212]	; (efb0 <SwTimerStart+0x188>)
    eeda:	781b      	ldrb	r3, [r3, #0]
    eedc:	2b00      	cmp	r3, #0
    eede:	d042      	beq.n	ef66 <SwTimerStart+0x13e>
    eee0:	9200      	str	r2, [sp, #0]
    eee2:	2300      	movs	r3, #0
                if (swtimerCompareTime(swTimers[currIndex].absoluteExpiryTime,
    eee4:	492b      	ldr	r1, [pc, #172]	; (ef94 <SwTimerStart+0x16c>)
    eee6:	4688      	mov	r8, r1
    eee8:	4833      	ldr	r0, [pc, #204]	; (efb8 <SwTimerStart+0x190>)
                    currIndex = swTimers[currIndex].nextTimer;
    eeea:	468c      	mov	ip, r1
        for (index = 0; index < runningTimers; index++)
    eeec:	4c30      	ldr	r4, [pc, #192]	; (efb0 <SwTimerStart+0x188>)
    eeee:	e02a      	b.n	ef46 <SwTimerStart+0x11e>
            if ((timeout > SWTIMER_MAX_TIMEOUT) || \
    eef0:	0028      	movs	r0, r5
    eef2:	38ff      	subs	r0, #255	; 0xff
    eef4:	1ac3      	subs	r3, r0, r3
    eef6:	4a2b      	ldr	r2, [pc, #172]	; (efa4 <SwTimerStart+0x17c>)
                return LORAWAN_INVALID_PARAMETER;
    eef8:	200a      	movs	r0, #10
            if ((timeout > SWTIMER_MAX_TIMEOUT) || \
    eefa:	4293      	cmp	r3, r2
    eefc:	d9c8      	bls.n	ee90 <SwTimerStart+0x68>
    eefe:	e7aa      	b.n	ee56 <SwTimerStart+0x2e>
        runningTimerQueueHead = timerId;
    ef00:	4b2c      	ldr	r3, [pc, #176]	; (efb4 <SwTimerStart+0x18c>)
    ef02:	601f      	str	r7, [r3, #0]
        loadHwTimer(runningTimerQueueHead);
    ef04:	0038      	movs	r0, r7
    ef06:	4b2d      	ldr	r3, [pc, #180]	; (efbc <SwTimerStart+0x194>)
    ef08:	4798      	blx	r3
    ef0a:	e036      	b.n	ef7a <SwTimerStart+0x152>
                    swTimers[timerId].nextTimer = currIndex;
    ef0c:	4b21      	ldr	r3, [pc, #132]	; (ef94 <SwTimerStart+0x16c>)
    ef0e:	013c      	lsls	r4, r7, #4
    ef10:	191c      	adds	r4, r3, r4
    ef12:	7322      	strb	r2, [r4, #12]
                    swTimers[currIndex].loaded = false;
    ef14:	9901      	ldr	r1, [sp, #4]
    ef16:	0109      	lsls	r1, r1, #4
    ef18:	1859      	adds	r1, r3, r1
    ef1a:	2300      	movs	r3, #0
    ef1c:	734b      	strb	r3, [r1, #13]
                    if (runningTimerQueueHead == currIndex)
    ef1e:	4592      	cmp	sl, r2
    ef20:	d005      	beq.n	ef2e <SwTimerStart+0x106>
                        swTimers[prevIndex].nextTimer = timerId;
    ef22:	9b00      	ldr	r3, [sp, #0]
    ef24:	0118      	lsls	r0, r3, #4
    ef26:	4b1b      	ldr	r3, [pc, #108]	; (ef94 <SwTimerStart+0x16c>)
    ef28:	1818      	adds	r0, r3, r0
    ef2a:	7307      	strb	r7, [r0, #12]
    ef2c:	e025      	b.n	ef7a <SwTimerStart+0x152>
                        runningTimerQueueHead = timerId;
    ef2e:	4b21      	ldr	r3, [pc, #132]	; (efb4 <SwTimerStart+0x18c>)
    ef30:	601f      	str	r7, [r3, #0]
                        loadHwTimer(runningTimerQueueHead);
    ef32:	0038      	movs	r0, r7
    ef34:	4b21      	ldr	r3, [pc, #132]	; (efbc <SwTimerStart+0x194>)
    ef36:	4798      	blx	r3
    ef38:	e01f      	b.n	ef7a <SwTimerStart+0x152>
        for (index = 0; index < runningTimers; index++)
    ef3a:	3301      	adds	r3, #1
    ef3c:	b2db      	uxtb	r3, r3
    ef3e:	7821      	ldrb	r1, [r4, #0]
    ef40:	b2c9      	uxtb	r1, r1
    ef42:	428b      	cmp	r3, r1
    ef44:	d210      	bcs.n	ef68 <SwTimerStart+0x140>
            if (SWTIMER_INVALID != currIndex)
    ef46:	2aff      	cmp	r2, #255	; 0xff
    ef48:	d0f7      	beq.n	ef3a <SwTimerStart+0x112>
                if (swtimerCompareTime(swTimers[currIndex].absoluteExpiryTime,
    ef4a:	9201      	str	r2, [sp, #4]
    ef4c:	0111      	lsls	r1, r2, #4
    return ((t2 - t1) < INT32_MAX);
    ef4e:	4646      	mov	r6, r8
    ef50:	5989      	ldr	r1, [r1, r6]
    ef52:	1a69      	subs	r1, r5, r1
                if (swtimerCompareTime(swTimers[currIndex].absoluteExpiryTime,
    ef54:	4281      	cmp	r1, r0
    ef56:	d8d9      	bhi.n	ef0c <SwTimerStart+0xe4>
                    currIndex = swTimers[currIndex].nextTimer;
    ef58:	0111      	lsls	r1, r2, #4
    ef5a:	4461      	add	r1, ip
    ef5c:	9200      	str	r2, [sp, #0]
    ef5e:	7b0a      	ldrb	r2, [r1, #12]
    ef60:	e7eb      	b.n	ef3a <SwTimerStart+0x112>
        return LORAWAN_INVALID_PARAMETER;
    ef62:	200a      	movs	r0, #10
    ef64:	e777      	b.n	ee56 <SwTimerStart+0x2e>
        uint8_t prevIndex = runningTimerQueueHead;
    ef66:	9200      	str	r2, [sp, #0]
            swTimers[prevIndex].nextTimer = timerId;
    ef68:	4b0a      	ldr	r3, [pc, #40]	; (ef94 <SwTimerStart+0x16c>)
    ef6a:	9a00      	ldr	r2, [sp, #0]
    ef6c:	0110      	lsls	r0, r2, #4
    ef6e:	1818      	adds	r0, r3, r0
    ef70:	7307      	strb	r7, [r0, #12]
            swTimers[timerId].nextTimer = SWTIMER_INVALID;
    ef72:	013f      	lsls	r7, r7, #4
    ef74:	19df      	adds	r7, r3, r7
    ef76:	23ff      	movs	r3, #255	; 0xff
    ef78:	733b      	strb	r3, [r7, #12]
	if (cpu_irq_is_enabled_flags(flags))
    ef7a:	23ff      	movs	r3, #255	; 0xff
    return LORAWAN_SUCCESS;
    ef7c:	2008      	movs	r0, #8
    ef7e:	464a      	mov	r2, r9
    ef80:	4213      	tst	r3, r2
    ef82:	d100      	bne.n	ef86 <SwTimerStart+0x15e>
    ef84:	e767      	b.n	ee56 <SwTimerStart+0x2e>
		cpu_irq_enable();
    ef86:	2201      	movs	r2, #1
    ef88:	4b07      	ldr	r3, [pc, #28]	; (efa8 <SwTimerStart+0x180>)
    ef8a:	701a      	strb	r2, [r3, #0]
    ef8c:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    ef90:	b662      	cpsie	i
    ef92:	e760      	b.n	ee56 <SwTimerStart+0x2e>
    ef94:	200027e8 	.word	0x200027e8
    ef98:	2000297c 	.word	0x2000297c
    ef9c:	20002978 	.word	0x20002978
    efa0:	0000fbf1 	.word	0x0000fbf1
    efa4:	7fffff00 	.word	0x7fffff00
    efa8:	20000014 	.word	0x20000014
    efac:	0000eca5 	.word	0x0000eca5
    efb0:	200010ec 	.word	0x200010ec
    efb4:	200010e8 	.word	0x200010e8
    efb8:	7ffffffe 	.word	0x7ffffffe
    efbc:	0000ec0d 	.word	0x0000ec0d

0000efc0 <SwTimerIsRunning>:
\param[in] timerId Timer ID to be checked for running
\return True if the timer is running else False
******************************************************************************/
bool SwTimerIsRunning(uint8_t timerId)
{
    if (NULL == swTimers[timerId].timerCb)
    efc0:	0103      	lsls	r3, r0, #4
    efc2:	4803      	ldr	r0, [pc, #12]	; (efd0 <SwTimerIsRunning+0x10>)
    efc4:	18c0      	adds	r0, r0, r3
    efc6:	6840      	ldr	r0, [r0, #4]
    efc8:	1e43      	subs	r3, r0, #1
    efca:	4198      	sbcs	r0, r3
    efcc:	b2c0      	uxtb	r0, r0
    {
        return false;
    }

    return true;
}
    efce:	4770      	bx	lr
    efd0:	200027e8 	.word	0x200027e8

0000efd4 <SwTimerReadValue>:
\brief Returns the remaining timeout for the given timerId
\param[in] timerId Timer ID to get the remaining time
\return Remaining time until expiry in microseconds
******************************************************************************/
uint32_t SwTimerReadValue(uint8_t timerId)
{
    efd4:	b570      	push	{r4, r5, r6, lr}
    uint32_t remainingTime = 0u;
    uint32_t timerExpiryTime = 0u;
    uint32_t currentSysTime = 0u;
    if ( NULL != swTimers[timerId].timerCb )
    efd6:	0102      	lsls	r2, r0, #4
    efd8:	4b0d      	ldr	r3, [pc, #52]	; (f010 <SwTimerReadValue+0x3c>)
    efda:	189b      	adds	r3, r3, r2
    efdc:	685b      	ldr	r3, [r3, #4]
    efde:	2b00      	cmp	r3, #0
    efe0:	d014      	beq.n	f00c <SwTimerReadValue+0x38>
    {
	    timerExpiryTime = swTimers[timerId].absoluteExpiryTime;
    efe2:	4b0b      	ldr	r3, [pc, #44]	; (f010 <SwTimerReadValue+0x3c>)
    efe4:	58d5      	ldr	r5, [r2, r3]
    time |= ((uint64_t) sysTimeOvf) << 32;
    efe6:	4b0b      	ldr	r3, [pc, #44]	; (f014 <SwTimerReadValue+0x40>)
    efe8:	681b      	ldr	r3, [r3, #0]
    time |= ((uint64_t) sysTime) << 16;
    efea:	4b0b      	ldr	r3, [pc, #44]	; (f018 <SwTimerReadValue+0x44>)
    efec:	881c      	ldrh	r4, [r3, #0]
    efee:	0424      	lsls	r4, r4, #16
    time |= (uint64_t) common_tc_read_count();
    eff0:	4b0a      	ldr	r3, [pc, #40]	; (f01c <SwTimerReadValue+0x48>)
    eff2:	4798      	blx	r3
    eff4:	4320      	orrs	r0, r4
	    currentSysTime = (uint32_t) gettime();
	    if ( currentSysTime <= timerExpiryTime )
    eff6:	4285      	cmp	r5, r0
    eff8:	d305      	bcc.n	f006 <SwTimerReadValue+0x32>
	    {
		    remainingTime = timerExpiryTime - currentSysTime;
    effa:	1a28      	subs	r0, r5, r0
	    else if ( currentSysTime > timerExpiryTime )
	    {
		    remainingTime = (UINT32_MAX - currentSysTime) + timerExpiryTime;
	    }

        if (remainingTime >= SWTIMER_MAX_TIMEOUT)
    effc:	4b08      	ldr	r3, [pc, #32]	; (f020 <SwTimerReadValue+0x4c>)
    effe:	4298      	cmp	r0, r3
    f000:	d900      	bls.n	f004 <SwTimerReadValue+0x30>
        {
            /* Diff cannot be more than max timeout */
            remainingTime = 0;
    f002:	2000      	movs	r0, #0
        }
    }
    return remainingTime;
}
    f004:	bd70      	pop	{r4, r5, r6, pc}
		    remainingTime = (UINT32_MAX - currentSysTime) + timerExpiryTime;
    f006:	3d01      	subs	r5, #1
    f008:	1a28      	subs	r0, r5, r0
    f00a:	e7f7      	b.n	effc <SwTimerReadValue+0x28>
    uint32_t remainingTime = 0u;
    f00c:	2000      	movs	r0, #0
    return remainingTime;
    f00e:	e7f9      	b.n	f004 <SwTimerReadValue+0x30>
    f010:	200027e8 	.word	0x200027e8
    f014:	2000297c 	.word	0x2000297c
    f018:	20002978 	.word	0x20002978
    f01c:	0000fbf1 	.word	0x0000fbf1
    f020:	7ffffffe 	.word	0x7ffffffe

0000f024 <SwTimerNextExpiryDuration>:
/**************************************************************************//**
\brief Returns the duration until the next timer expiry
\return Returns the duration until the next timeout in microseconds
******************************************************************************/
uint32_t SwTimerNextExpiryDuration(void)
{
    f024:	b510      	push	{r4, lr}
    uint32_t duration = SWTIMER_INVALID_TIMEOUT;

    if (SWTIMER_INVALID != runningTimerQueueHead)
    f026:	4b05      	ldr	r3, [pc, #20]	; (f03c <SwTimerNextExpiryDuration+0x18>)
    f028:	6818      	ldr	r0, [r3, #0]
    f02a:	28ff      	cmp	r0, #255	; 0xff
    f02c:	d102      	bne.n	f034 <SwTimerNextExpiryDuration+0x10>
    uint32_t duration = SWTIMER_INVALID_TIMEOUT;
    f02e:	2001      	movs	r0, #1
    f030:	4240      	negs	r0, r0
    {
        duration = SwTimerReadValue(runningTimerQueueHead);
    }

    return duration;
}
    f032:	bd10      	pop	{r4, pc}
        duration = SwTimerReadValue(runningTimerQueueHead);
    f034:	b2c0      	uxtb	r0, r0
    f036:	4b02      	ldr	r3, [pc, #8]	; (f040 <SwTimerNextExpiryDuration+0x1c>)
    f038:	4798      	blx	r3
    f03a:	e7fa      	b.n	f032 <SwTimerNextExpiryDuration+0xe>
    f03c:	200010e8 	.word	0x200010e8
    f040:	0000efd5 	.word	0x0000efd5

0000f044 <SwTimersExecute>:

/**************************************************************************//**
\brief Handles Queues and Callbacks for Expired Timers
******************************************************************************/
void SwTimersExecute(void)
{
    f044:	b5f0      	push	{r4, r5, r6, r7, lr}
    f046:	46de      	mov	lr, fp
    f048:	4657      	mov	r7, sl
    f04a:	464e      	mov	r6, r9
    f04c:	4645      	mov	r5, r8
    f04e:	b5e0      	push	{r5, r6, r7, lr}
    f050:	b083      	sub	sp, #12
    time |= ((uint64_t) sysTimeOvf) << 32;
    f052:	4b2f      	ldr	r3, [pc, #188]	; (f110 <SwTimersExecute+0xcc>)
    f054:	681b      	ldr	r3, [r3, #0]
    time |= ((uint64_t) sysTime) << 16;
    f056:	4b2f      	ldr	r3, [pc, #188]	; (f114 <SwTimersExecute+0xd0>)
    f058:	881b      	ldrh	r3, [r3, #0]
    time |= (uint64_t) common_tc_read_count();
    f05a:	4b2f      	ldr	r3, [pc, #188]	; (f118 <SwTimersExecute+0xd4>)
    f05c:	4798      	blx	r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    f05e:	f3ef 8210 	mrs	r2, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    f062:	4253      	negs	r3, r2
    f064:	4153      	adcs	r3, r2
    f066:	9300      	str	r3, [sp, #0]
  __ASM volatile ("cpsid i" : : : "memory");
    f068:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
    f06a:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    f06e:	2200      	movs	r2, #0
    f070:	4b2a      	ldr	r3, [pc, #168]	; (f11c <SwTimersExecute+0xd8>)
    f072:	701a      	strb	r2, [r3, #0]
	return flags;
    f074:	9c00      	ldr	r4, [sp, #0]
    uint64_t now = gettime();

    uint8_t flags = cpu_irq_save();
    swtimerInternalHandler();
    f076:	4b2a      	ldr	r3, [pc, #168]	; (f120 <SwTimersExecute+0xdc>)
    f078:	4798      	blx	r3
	if (cpu_irq_is_enabled_flags(flags))
    f07a:	23ff      	movs	r3, #255	; 0xff
    f07c:	4223      	tst	r3, r4
    f07e:	d005      	beq.n	f08c <SwTimersExecute+0x48>
		cpu_irq_enable();
    f080:	2201      	movs	r2, #1
    f082:	4b26      	ldr	r3, [pc, #152]	; (f11c <SwTimersExecute+0xd8>)
    f084:	701a      	strb	r2, [r3, #0]
    f086:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    f08a:	b662      	cpsie	i
	cpu_irq_disable();
    f08c:	4b23      	ldr	r3, [pc, #140]	; (f11c <SwTimersExecute+0xd8>)
    f08e:	469a      	mov	sl, r3
        /* Expired timer if any will be processed here */
        while (SWTIMER_INVALID != expiredTimerQueueHead)
        {
            flags = cpu_irq_save();

            nextExpiredTimer = swTimers[expiredTimerQueueHead].nextTimer;
    f090:	4c24      	ldr	r4, [pc, #144]	; (f124 <SwTimersExecute+0xe0>)
    f092:	4b25      	ldr	r3, [pc, #148]	; (f128 <SwTimersExecute+0xe4>)
    f094:	4699      	mov	r9, r3
    f096:	2200      	movs	r2, #0

            /*
            * The expired timer's structure elements are updated
            * and the timer is taken out of expired timer queue
            */
            swTimers[expiredTimerQueueHead].nextTimer = SWTIMER_INVALID;
    f098:	20ff      	movs	r0, #255	; 0xff
            */
            expiredTimerQueueHead = nextExpiredTimer;

            if (SWTIMER_INVALID == expiredTimerQueueHead)
            {
                expiredTimerQueueTail = SWTIMER_INVALID;
    f09a:	4b24      	ldr	r3, [pc, #144]	; (f12c <SwTimersExecute+0xe8>)
    f09c:	4698      	mov	r8, r3
		cpu_irq_enable();
    f09e:	4b1f      	ldr	r3, [pc, #124]	; (f11c <SwTimersExecute+0xd8>)
    f0a0:	469c      	mov	ip, r3
    f0a2:	e004      	b.n	f0ae <SwTimersExecute+0x6a>
    f0a4:	4643      	mov	r3, r8
    f0a6:	6018      	str	r0, [r3, #0]
    f0a8:	e01e      	b.n	f0e8 <SwTimersExecute+0xa4>
            }

            cpu_irq_restore(flags);

            if (NULL != callback)
    f0aa:	2e00      	cmp	r6, #0
    f0ac:	d125      	bne.n	f0fa <SwTimersExecute+0xb6>
        while (SWTIMER_INVALID != expiredTimerQueueHead)
    f0ae:	4b1d      	ldr	r3, [pc, #116]	; (f124 <SwTimersExecute+0xe0>)
    f0b0:	681b      	ldr	r3, [r3, #0]
    f0b2:	2bff      	cmp	r3, #255	; 0xff
    f0b4:	d024      	beq.n	f100 <SwTimersExecute+0xbc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    f0b6:	f3ef 8110 	mrs	r1, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    f0ba:	424b      	negs	r3, r1
    f0bc:	414b      	adcs	r3, r1
    f0be:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    f0c0:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
    f0c2:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    f0c6:	4653      	mov	r3, sl
    f0c8:	701a      	strb	r2, [r3, #0]
	return flags;
    f0ca:	9f01      	ldr	r7, [sp, #4]
            nextExpiredTimer = swTimers[expiredTimerQueueHead].nextTimer;
    f0cc:	6823      	ldr	r3, [r4, #0]
    f0ce:	011b      	lsls	r3, r3, #4
    f0d0:	444b      	add	r3, r9
    f0d2:	7b19      	ldrb	r1, [r3, #12]
            callback = (SwTimerCallbackFunc_t)swTimers[expiredTimerQueueHead].timerCb;
    f0d4:	685e      	ldr	r6, [r3, #4]
            cbParam = swTimers[expiredTimerQueueHead].paramCb;
    f0d6:	689d      	ldr	r5, [r3, #8]
    f0d8:	46ab      	mov	fp, r5
            swTimers[expiredTimerQueueHead].nextTimer = SWTIMER_INVALID;
    f0da:	7318      	strb	r0, [r3, #12]
            swTimers[expiredTimerQueueHead].timerCb = NULL;
    f0dc:	605a      	str	r2, [r3, #4]
            swTimers[expiredTimerQueueHead].paramCb = NULL;
    f0de:	609a      	str	r2, [r3, #8]
            swTimers[expiredTimerQueueHead].loaded = false;
    f0e0:	735a      	strb	r2, [r3, #13]
            expiredTimerQueueHead = nextExpiredTimer;
    f0e2:	6021      	str	r1, [r4, #0]
            if (SWTIMER_INVALID == expiredTimerQueueHead)
    f0e4:	29ff      	cmp	r1, #255	; 0xff
    f0e6:	d0dd      	beq.n	f0a4 <SwTimersExecute+0x60>
	if (cpu_irq_is_enabled_flags(flags))
    f0e8:	4238      	tst	r0, r7
    f0ea:	d0de      	beq.n	f0aa <SwTimersExecute+0x66>
		cpu_irq_enable();
    f0ec:	2301      	movs	r3, #1
    f0ee:	4661      	mov	r1, ip
    f0f0:	700b      	strb	r3, [r1, #0]
    f0f2:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    f0f6:	b662      	cpsie	i
    f0f8:	e7d7      	b.n	f0aa <SwTimersExecute+0x66>
            {
                /* Callback function is called */
                callback(cbParam);
    f0fa:	4658      	mov	r0, fp
    f0fc:	47b0      	blx	r6
    f0fe:	e7ca      	b.n	f096 <SwTimersExecute+0x52>
                (void)now;
            }
        }
    }
}
    f100:	b003      	add	sp, #12
    f102:	bc3c      	pop	{r2, r3, r4, r5}
    f104:	4690      	mov	r8, r2
    f106:	4699      	mov	r9, r3
    f108:	46a2      	mov	sl, r4
    f10a:	46ab      	mov	fp, r5
    f10c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f10e:	46c0      	nop			; (mov r8, r8)
    f110:	2000297c 	.word	0x2000297c
    f114:	20002978 	.word	0x20002978
    f118:	0000fbf1 	.word	0x0000fbf1
    f11c:	20000014 	.word	0x20000014
    f120:	0000eca5 	.word	0x0000eca5
    f124:	200010e0 	.word	0x200010e0
    f128:	200027e8 	.word	0x200027e8
    f12c:	200010e4 	.word	0x200010e4

0000f130 <TIMER_TaskHandler>:
{
    f130:	b510      	push	{r4, lr}
    SwTimersExecute();
    f132:	4b02      	ldr	r3, [pc, #8]	; (f13c <TIMER_TaskHandler+0xc>)
    f134:	4798      	blx	r3
}
    f136:	2000      	movs	r0, #0
    f138:	bd10      	pop	{r4, pc}
    f13a:	46c0      	nop			; (mov r8, r8)
    f13c:	0000f045 	.word	0x0000f045

0000f140 <SwTimerStop>:
        LORAWAN_INVALID_PARAMETER if timerId is not valid
        LORAWAN_INVALID_REQUEST if timerId was not started before
        LORAWAN_SUCCESS if it is successfully stopped
******************************************************************************/
StackRetStatus_t SwTimerStop(uint8_t timerId)
{
    f140:	b570      	push	{r4, r5, r6, lr}
    f142:	b082      	sub	sp, #8
    f144:	0004      	movs	r4, r0
    uint8_t prevIndex;

    if (TOTAL_NUMBER_OF_SW_TIMERS <= timerId)
    {
        SYS_ASSERT_INFO(ASSERT_HAL_TIMER_STOP_FAILURE);
        return LORAWAN_INVALID_PARAMETER;
    f146:	200a      	movs	r0, #10
    if (TOTAL_NUMBER_OF_SW_TIMERS <= timerId)
    f148:	2c18      	cmp	r4, #24
    f14a:	d901      	bls.n	f150 <SwTimerStop+0x10>
        return LORAWAN_SUCCESS;
    }

    SYS_ASSERT_INFO(ASSERT_HAL_TIMER_STOP_FAILURE);
    return LORAWAN_INVALID_REQUEST;
}
    f14c:	b002      	add	sp, #8
    f14e:	bd70      	pop	{r4, r5, r6, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    f150:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    f154:	425a      	negs	r2, r3
    f156:	4153      	adcs	r3, r2
    f158:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    f15a:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
    f15c:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    f160:	2200      	movs	r2, #0
    f162:	4b47      	ldr	r3, [pc, #284]	; (f280 <SwTimerStop+0x140>)
    f164:	701a      	strb	r2, [r3, #0]
	return flags;
    f166:	9d01      	ldr	r5, [sp, #4]
    swtimerInternalHandler();
    f168:	4b46      	ldr	r3, [pc, #280]	; (f284 <SwTimerStop+0x144>)
    f16a:	4798      	blx	r3
    if (runningTimers > 0)
    f16c:	4b46      	ldr	r3, [pc, #280]	; (f288 <SwTimerStop+0x148>)
    f16e:	781b      	ldrb	r3, [r3, #0]
    f170:	2b00      	cmp	r3, #0
    f172:	d040      	beq.n	f1f6 <SwTimerStop+0xb6>
        uint8_t timer_count = runningTimers;
    f174:	4b44      	ldr	r3, [pc, #272]	; (f288 <SwTimerStop+0x148>)
    f176:	781b      	ldrb	r3, [r3, #0]
    f178:	b2db      	uxtb	r3, r3
        prevIndex = currIndex = runningTimerQueueHead;
    f17a:	4a44      	ldr	r2, [pc, #272]	; (f28c <SwTimerStop+0x14c>)
    f17c:	6816      	ldr	r6, [r2, #0]
    f17e:	b2f1      	uxtb	r1, r6
        while (timer_count > 0)
    f180:	2b00      	cmp	r3, #0
    f182:	d038      	beq.n	f1f6 <SwTimerStop+0xb6>
            if (timerId == currIndex)
    f184:	428c      	cmp	r4, r1
    f186:	d00b      	beq.n	f1a0 <SwTimerStop+0x60>
                currIndex = swTimers[currIndex].nextTimer;
    f188:	4841      	ldr	r0, [pc, #260]	; (f290 <SwTimerStop+0x150>)
    f18a:	010a      	lsls	r2, r1, #4
    f18c:	1882      	adds	r2, r0, r2
    f18e:	7b12      	ldrb	r2, [r2, #12]
            timer_count--;
    f190:	3b01      	subs	r3, #1
    f192:	b2db      	uxtb	r3, r3
        while (timer_count > 0)
    f194:	2b00      	cmp	r3, #0
    f196:	d02e      	beq.n	f1f6 <SwTimerStop+0xb6>
            if (timerId == currIndex)
    f198:	4294      	cmp	r4, r2
    f19a:	d001      	beq.n	f1a0 <SwTimerStop+0x60>
                currIndex = swTimers[currIndex].nextTimer;
    f19c:	0011      	movs	r1, r2
    f19e:	e7f4      	b.n	f18a <SwTimerStop+0x4a>
                if (timerId == runningTimerQueueHead)
    f1a0:	42a6      	cmp	r6, r4
    f1a2:	d01d      	beq.n	f1e0 <SwTimerStop+0xa0>
                    swTimers[prevIndex].nextTimer = swTimers[timerId].nextTimer;
    f1a4:	4b3a      	ldr	r3, [pc, #232]	; (f290 <SwTimerStop+0x150>)
    f1a6:	0122      	lsls	r2, r4, #4
    f1a8:	189a      	adds	r2, r3, r2
    f1aa:	7b12      	ldrb	r2, [r2, #12]
    f1ac:	0109      	lsls	r1, r1, #4
    f1ae:	1859      	adds	r1, r3, r1
    f1b0:	730a      	strb	r2, [r1, #12]
                swTimers[timerId].nextTimer  = SWTIMER_INVALID;
    f1b2:	0122      	lsls	r2, r4, #4
    f1b4:	4b36      	ldr	r3, [pc, #216]	; (f290 <SwTimerStop+0x150>)
    f1b6:	189b      	adds	r3, r3, r2
    f1b8:	22ff      	movs	r2, #255	; 0xff
    f1ba:	731a      	strb	r2, [r3, #12]
            runningTimers--;
    f1bc:	4a32      	ldr	r2, [pc, #200]	; (f288 <SwTimerStop+0x148>)
    f1be:	7813      	ldrb	r3, [r2, #0]
    f1c0:	3b01      	subs	r3, #1
    f1c2:	b2db      	uxtb	r3, r3
    f1c4:	7013      	strb	r3, [r2, #0]
        swTimers[timerId].timerCb = NULL;
    f1c6:	0124      	lsls	r4, r4, #4
    f1c8:	4b31      	ldr	r3, [pc, #196]	; (f290 <SwTimerStop+0x150>)
    f1ca:	191c      	adds	r4, r3, r4
    f1cc:	2300      	movs	r3, #0
    f1ce:	6063      	str	r3, [r4, #4]
        swTimers[timerId].paramCb = NULL;
    f1d0:	60a3      	str	r3, [r4, #8]
        swTimers[timerId].loaded = false;
    f1d2:	7363      	strb	r3, [r4, #13]
	if (cpu_irq_is_enabled_flags(flags))
    f1d4:	33ff      	adds	r3, #255	; 0xff
        return LORAWAN_SUCCESS;
    f1d6:	2008      	movs	r0, #8
    f1d8:	422b      	tst	r3, r5
    f1da:	d0b7      	beq.n	f14c <SwTimerStop+0xc>
    f1dc:	2301      	movs	r3, #1
    f1de:	e040      	b.n	f262 <SwTimerStop+0x122>
                    common_tc_compare_stop();
    f1e0:	4b2c      	ldr	r3, [pc, #176]	; (f294 <SwTimerStop+0x154>)
    f1e2:	4798      	blx	r3
                    runningTimerQueueHead = swTimers[timerId].nextTimer;
    f1e4:	0122      	lsls	r2, r4, #4
    f1e6:	4b2a      	ldr	r3, [pc, #168]	; (f290 <SwTimerStop+0x150>)
    f1e8:	189b      	adds	r3, r3, r2
    f1ea:	7b18      	ldrb	r0, [r3, #12]
    f1ec:	4b27      	ldr	r3, [pc, #156]	; (f28c <SwTimerStop+0x14c>)
    f1ee:	6018      	str	r0, [r3, #0]
                    loadHwTimer(runningTimerQueueHead);
    f1f0:	4b29      	ldr	r3, [pc, #164]	; (f298 <SwTimerStop+0x158>)
    f1f2:	4798      	blx	r3
    f1f4:	e7dd      	b.n	f1b2 <SwTimerStop+0x72>
        prevIndex = currIndex = expiredTimerQueueHead;
    f1f6:	4b29      	ldr	r3, [pc, #164]	; (f29c <SwTimerStop+0x15c>)
    f1f8:	6818      	ldr	r0, [r3, #0]
    f1fa:	b2c2      	uxtb	r2, r0
        while (SWTIMER_INVALID != currIndex)
    f1fc:	2aff      	cmp	r2, #255	; 0xff
    f1fe:	d02c      	beq.n	f25a <SwTimerStop+0x11a>
            if (timerId == currIndex)
    f200:	4294      	cmp	r4, r2
    f202:	d009      	beq.n	f218 <SwTimerStop+0xd8>
                currIndex = swTimers[currIndex].nextTimer;
    f204:	4922      	ldr	r1, [pc, #136]	; (f290 <SwTimerStop+0x150>)
    f206:	0113      	lsls	r3, r2, #4
    f208:	18cb      	adds	r3, r1, r3
    f20a:	7b1b      	ldrb	r3, [r3, #12]
        while (SWTIMER_INVALID != currIndex)
    f20c:	2bff      	cmp	r3, #255	; 0xff
    f20e:	d024      	beq.n	f25a <SwTimerStop+0x11a>
            if (timerId == currIndex)
    f210:	429c      	cmp	r4, r3
    f212:	d001      	beq.n	f218 <SwTimerStop+0xd8>
                currIndex = swTimers[currIndex].nextTimer;
    f214:	001a      	movs	r2, r3
    f216:	e7f6      	b.n	f206 <SwTimerStop+0xc6>
                if (timerId == expiredTimerQueueHead)
    f218:	42a0      	cmp	r0, r4
    f21a:	d00d      	beq.n	f238 <SwTimerStop+0xf8>
                    swTimers[prevIndex].nextTimer = swTimers[timerId].nextTimer;
    f21c:	4b1c      	ldr	r3, [pc, #112]	; (f290 <SwTimerStop+0x150>)
    f21e:	0121      	lsls	r1, r4, #4
    f220:	1859      	adds	r1, r3, r1
    f222:	7b09      	ldrb	r1, [r1, #12]
    f224:	0110      	lsls	r0, r2, #4
    f226:	181b      	adds	r3, r3, r0
    f228:	7319      	strb	r1, [r3, #12]
                    if (timerId == expiredTimerQueueTail)
    f22a:	4b1d      	ldr	r3, [pc, #116]	; (f2a0 <SwTimerStop+0x160>)
    f22c:	681b      	ldr	r3, [r3, #0]
    f22e:	429c      	cmp	r4, r3
    f230:	d1c9      	bne.n	f1c6 <SwTimerStop+0x86>
                        expiredTimerQueueTail = prevIndex;
    f232:	4b1b      	ldr	r3, [pc, #108]	; (f2a0 <SwTimerStop+0x160>)
    f234:	601a      	str	r2, [r3, #0]
    f236:	e7c6      	b.n	f1c6 <SwTimerStop+0x86>
                    if (expiredTimerQueueHead == expiredTimerQueueTail)
    f238:	4b19      	ldr	r3, [pc, #100]	; (f2a0 <SwTimerStop+0x160>)
    f23a:	681b      	ldr	r3, [r3, #0]
    f23c:	4298      	cmp	r0, r3
    f23e:	d006      	beq.n	f24e <SwTimerStop+0x10e>
                        expiredTimerQueueHead = swTimers[expiredTimerQueueHead].nextTimer;
    f240:	0100      	lsls	r0, r0, #4
    f242:	4b13      	ldr	r3, [pc, #76]	; (f290 <SwTimerStop+0x150>)
    f244:	1818      	adds	r0, r3, r0
    f246:	7b02      	ldrb	r2, [r0, #12]
    f248:	4b14      	ldr	r3, [pc, #80]	; (f29c <SwTimerStop+0x15c>)
    f24a:	601a      	str	r2, [r3, #0]
    f24c:	e7bb      	b.n	f1c6 <SwTimerStop+0x86>
                        expiredTimerQueueHead = expiredTimerQueueTail = SWTIMER_INVALID;
    f24e:	23ff      	movs	r3, #255	; 0xff
    f250:	4a13      	ldr	r2, [pc, #76]	; (f2a0 <SwTimerStop+0x160>)
    f252:	6013      	str	r3, [r2, #0]
    f254:	4a11      	ldr	r2, [pc, #68]	; (f29c <SwTimerStop+0x15c>)
    f256:	6013      	str	r3, [r2, #0]
    f258:	e7b5      	b.n	f1c6 <SwTimerStop+0x86>
    f25a:	23ff      	movs	r3, #255	; 0xff
    f25c:	422b      	tst	r3, r5
    f25e:	d00a      	beq.n	f276 <SwTimerStop+0x136>
    f260:	2300      	movs	r3, #0
		cpu_irq_enable();
    f262:	2101      	movs	r1, #1
    f264:	4a06      	ldr	r2, [pc, #24]	; (f280 <SwTimerStop+0x140>)
    f266:	7011      	strb	r1, [r2, #0]
    f268:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    f26c:	b662      	cpsie	i
    if (timerStopReqStatus)
    f26e:	2b00      	cmp	r3, #0
    f270:	d103      	bne.n	f27a <SwTimerStop+0x13a>
    return LORAWAN_INVALID_REQUEST;
    f272:	2015      	movs	r0, #21
    f274:	e76a      	b.n	f14c <SwTimerStop+0xc>
    f276:	2015      	movs	r0, #21
    f278:	e768      	b.n	f14c <SwTimerStop+0xc>
        return LORAWAN_SUCCESS;
    f27a:	2008      	movs	r0, #8
    f27c:	e766      	b.n	f14c <SwTimerStop+0xc>
    f27e:	46c0      	nop			; (mov r8, r8)
    f280:	20000014 	.word	0x20000014
    f284:	0000eca5 	.word	0x0000eca5
    f288:	200010ec 	.word	0x200010ec
    f28c:	200010e8 	.word	0x200010e8
    f290:	200027e8 	.word	0x200027e8
    f294:	0000fc3d 	.word	0x0000fc3d
    f298:	0000ec0d 	.word	0x0000ec0d
    f29c:	200010e0 	.word	0x200010e0
    f2a0:	200010e4 	.word	0x200010e4

0000f2a4 <SwTimerRunRemainingTime>:
{
    f2a4:	b5f0      	push	{r4, r5, r6, r7, lr}
    f2a6:	b083      	sub	sp, #12
    f2a8:	0005      	movs	r5, r0
    void * timerCb = (void*)(swTimers[runningTimerQueueHead].timerCb);
    f2aa:	4b0b      	ldr	r3, [pc, #44]	; (f2d8 <SwTimerRunRemainingTime+0x34>)
    f2ac:	681c      	ldr	r4, [r3, #0]
    f2ae:	0122      	lsls	r2, r4, #4
    f2b0:	4b0a      	ldr	r3, [pc, #40]	; (f2dc <SwTimerRunRemainingTime+0x38>)
    f2b2:	189b      	adds	r3, r3, r2
    f2b4:	685e      	ldr	r6, [r3, #4]
    void *paramCb = swTimers[runningTimerQueueHead].paramCb;
    f2b6:	689f      	ldr	r7, [r3, #8]
    uint8_t timerId = runningTimerQueueHead;
    f2b8:	b2e4      	uxtb	r4, r4
    if (LORAWAN_SUCCESS == SwTimerStop(runningTimerQueueHead))
    f2ba:	0020      	movs	r0, r4
    f2bc:	4b08      	ldr	r3, [pc, #32]	; (f2e0 <SwTimerRunRemainingTime+0x3c>)
    f2be:	4798      	blx	r3
    f2c0:	2808      	cmp	r0, #8
    f2c2:	d001      	beq.n	f2c8 <SwTimerRunRemainingTime+0x24>
}
    f2c4:	b003      	add	sp, #12
    f2c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
        SwTimerStart(timerId, offset, SW_TIMEOUT_RELATIVE, timerCb, paramCb);
    f2c8:	9700      	str	r7, [sp, #0]
    f2ca:	0033      	movs	r3, r6
    f2cc:	2200      	movs	r2, #0
    f2ce:	0029      	movs	r1, r5
    f2d0:	0020      	movs	r0, r4
    f2d2:	4c04      	ldr	r4, [pc, #16]	; (f2e4 <SwTimerRunRemainingTime+0x40>)
    f2d4:	47a0      	blx	r4
}
    f2d6:	e7f5      	b.n	f2c4 <SwTimerRunRemainingTime+0x20>
    f2d8:	200010e8 	.word	0x200010e8
    f2dc:	200027e8 	.word	0x200027e8
    f2e0:	0000f141 	.word	0x0000f141
    f2e4:	0000ee29 	.word	0x0000ee29

0000f2e8 <SystemTimerSuspend>:

/**************************************************************************//**
\brief Suspends the software timer
******************************************************************************/
void SystemTimerSuspend(void)
{
    f2e8:	b570      	push	{r4, r5, r6, lr}
    time |= ((uint64_t) sysTimeOvf) << 32;
    f2ea:	4b07      	ldr	r3, [pc, #28]	; (f308 <SystemTimerSuspend+0x20>)
    f2ec:	681c      	ldr	r4, [r3, #0]
    time |= ((uint64_t) sysTime) << 16;
    f2ee:	4b07      	ldr	r3, [pc, #28]	; (f30c <SystemTimerSuspend+0x24>)
    f2f0:	881d      	ldrh	r5, [r3, #0]
    f2f2:	042d      	lsls	r5, r5, #16
    time |= (uint64_t) common_tc_read_count();
    f2f4:	4b06      	ldr	r3, [pc, #24]	; (f310 <SystemTimerSuspend+0x28>)
    f2f6:	4798      	blx	r3
    sysTimeLastKnown = gettime();
    f2f8:	4b06      	ldr	r3, [pc, #24]	; (f314 <SystemTimerSuspend+0x2c>)
    time |= (uint64_t) common_tc_read_count();
    f2fa:	4328      	orrs	r0, r5
    f2fc:	6018      	str	r0, [r3, #0]
    f2fe:	605c      	str	r4, [r3, #4]
    common_tc_stop();
    f300:	4b05      	ldr	r3, [pc, #20]	; (f318 <SystemTimerSuspend+0x30>)
    f302:	4798      	blx	r3
}
    f304:	bd70      	pop	{r4, r5, r6, pc}
    f306:	46c0      	nop			; (mov r8, r8)
    f308:	2000297c 	.word	0x2000297c
    f30c:	20002978 	.word	0x20002978
    f310:	0000fbf1 	.word	0x0000fbf1
    f314:	200010f0 	.word	0x200010f0
    f318:	0000fc7d 	.word	0x0000fc7d

0000f31c <SystemTimerSync>:
/**************************************************************************//**
\brief Resumes the software timer by offseting it with given time
\param[in] timeToSync Amount of duration to offset from known system time
******************************************************************************/
void SystemTimerSync(uint64_t timeToSync)
{
    f31c:	b570      	push	{r4, r5, r6, lr}
    uint8_t timerId;
    uint16_t adjustOffset;

    sysTimeLastKnown += timeToSync;
    f31e:	4b22      	ldr	r3, [pc, #136]	; (f3a8 <SystemTimerSync+0x8c>)
    f320:	681c      	ldr	r4, [r3, #0]
    f322:	685d      	ldr	r5, [r3, #4]
    f324:	1900      	adds	r0, r0, r4
    f326:	4169      	adcs	r1, r5
    f328:	6018      	str	r0, [r3, #0]
    f32a:	6059      	str	r1, [r3, #4]

    /* 1. Update system time */
    sysTimeOvf = (uint32_t) (sysTimeLastKnown >> 32);
    f32c:	4b1f      	ldr	r3, [pc, #124]	; (f3ac <SystemTimerSync+0x90>)
    f32e:	6019      	str	r1, [r3, #0]
    sysTime = (uint16_t) ((sysTimeLastKnown >> SWTIMER_SYSTIME_SHIFTMASK) & 0xffff);
    f330:	0c02      	lsrs	r2, r0, #16
    f332:	4b1f      	ldr	r3, [pc, #124]	; (f3b0 <SystemTimerSync+0x94>)
    f334:	801a      	strh	r2, [r3, #0]

    /* 2. Adjust expiration of running timers */
    adjustOffset = (uint16_t) sysTimeLastKnown;
    f336:	b280      	uxth	r0, r0
    timerId = runningTimerQueueHead;
    f338:	4b1e      	ldr	r3, [pc, #120]	; (f3b4 <SystemTimerSync+0x98>)
    f33a:	781b      	ldrb	r3, [r3, #0]
    for (uint8_t index = 0; index < runningTimers; index++)
    f33c:	4a1e      	ldr	r2, [pc, #120]	; (f3b8 <SystemTimerSync+0x9c>)
    f33e:	7812      	ldrb	r2, [r2, #0]
    f340:	2a00      	cmp	r2, #0
    f342:	d012      	beq.n	f36a <SystemTimerSync+0x4e>
    f344:	2200      	movs	r2, #0
    {
        if (SWTIMER_INVALID != timerId)
        {
            swTimers[timerId].absoluteExpiryTime -= adjustOffset;
    f346:	4c1d      	ldr	r4, [pc, #116]	; (f3bc <SystemTimerSync+0xa0>)
    for (uint8_t index = 0; index < runningTimers; index++)
    f348:	4d1b      	ldr	r5, [pc, #108]	; (f3b8 <SystemTimerSync+0x9c>)
    f34a:	e005      	b.n	f358 <SystemTimerSync+0x3c>
    f34c:	3201      	adds	r2, #1
    f34e:	b2d2      	uxtb	r2, r2
    f350:	7829      	ldrb	r1, [r5, #0]
    f352:	b2c9      	uxtb	r1, r1
    f354:	4291      	cmp	r1, r2
    f356:	d908      	bls.n	f36a <SystemTimerSync+0x4e>
        if (SWTIMER_INVALID != timerId)
    f358:	2bff      	cmp	r3, #255	; 0xff
    f35a:	d0f7      	beq.n	f34c <SystemTimerSync+0x30>
            swTimers[timerId].absoluteExpiryTime -= adjustOffset;
    f35c:	011b      	lsls	r3, r3, #4
    f35e:	5919      	ldr	r1, [r3, r4]
    f360:	1a09      	subs	r1, r1, r0
    f362:	5119      	str	r1, [r3, r4]
            timerId = swTimers[timerId].nextTimer;
    f364:	18e3      	adds	r3, r4, r3
    f366:	7b1b      	ldrb	r3, [r3, #12]
    f368:	e7f0      	b.n	f34c <SystemTimerSync+0x30>
        }
    }

    /* 3. Start hardware timer */
    common_tc_init();
    f36a:	4b15      	ldr	r3, [pc, #84]	; (f3c0 <SystemTimerSync+0xa4>)
    f36c:	4798      	blx	r3
    set_common_tc_overflow_callback(hwTimerOverflowCallback);
    f36e:	4815      	ldr	r0, [pc, #84]	; (f3c4 <SystemTimerSync+0xa8>)
    f370:	4b15      	ldr	r3, [pc, #84]	; (f3c8 <SystemTimerSync+0xac>)
    f372:	4798      	blx	r3
    set_common_tc_expiry_callback(hwTimerExpiryCallback);
    f374:	4815      	ldr	r0, [pc, #84]	; (f3cc <SystemTimerSync+0xb0>)
    f376:	4b16      	ldr	r3, [pc, #88]	; (f3d0 <SystemTimerSync+0xb4>)
    f378:	4798      	blx	r3

    /* 4. Resume timer queue operations */
    if (runningTimers && (SWTIMER_INVALID != runningTimerQueueHead))
    f37a:	4b0f      	ldr	r3, [pc, #60]	; (f3b8 <SystemTimerSync+0x9c>)
    f37c:	781b      	ldrb	r3, [r3, #0]
    f37e:	2b00      	cmp	r3, #0
    f380:	d009      	beq.n	f396 <SystemTimerSync+0x7a>
    f382:	4b0c      	ldr	r3, [pc, #48]	; (f3b4 <SystemTimerSync+0x98>)
    f384:	681b      	ldr	r3, [r3, #0]
    f386:	2bff      	cmp	r3, #255	; 0xff
    f388:	d005      	beq.n	f396 <SystemTimerSync+0x7a>
    {
        uint32_t remainingTime = SwTimerNextExpiryDuration();
    f38a:	4b12      	ldr	r3, [pc, #72]	; (f3d4 <SystemTimerSync+0xb8>)
    f38c:	4798      	blx	r3

        if (SWTIMER_MIN_TIMEOUT > remainingTime)
    f38e:	28fe      	cmp	r0, #254	; 0xfe
    f390:	d902      	bls.n	f398 <SystemTimerSync+0x7c>
        else
        {
            /*
            * There is some time left in head timer, so restart it.
            */
            SwTimerRunRemainingTime(remainingTime);
    f392:	4b11      	ldr	r3, [pc, #68]	; (f3d8 <SystemTimerSync+0xbc>)
    f394:	4798      	blx	r3
        }
    }
}
    f396:	bd70      	pop	{r4, r5, r6, pc}
            isTimerTriggered = true;
    f398:	2201      	movs	r2, #1
    f39a:	4b10      	ldr	r3, [pc, #64]	; (f3dc <SystemTimerSync+0xc0>)
    f39c:	701a      	strb	r2, [r3, #0]
            SYSTEM_PostTask(TIMER_TASK_ID);
    f39e:	2001      	movs	r0, #1
    f3a0:	4b0f      	ldr	r3, [pc, #60]	; (f3e0 <SystemTimerSync+0xc4>)
    f3a2:	4798      	blx	r3
    f3a4:	e7f7      	b.n	f396 <SystemTimerSync+0x7a>
    f3a6:	46c0      	nop			; (mov r8, r8)
    f3a8:	200010f0 	.word	0x200010f0
    f3ac:	2000297c 	.word	0x2000297c
    f3b0:	20002978 	.word	0x20002978
    f3b4:	200010e8 	.word	0x200010e8
    f3b8:	200010ec 	.word	0x200010ec
    f3bc:	200027e8 	.word	0x200027e8
    f3c0:	0000fd05 	.word	0x0000fd05
    f3c4:	0000eb55 	.word	0x0000eb55
    f3c8:	0000fd89 	.word	0x0000fd89
    f3cc:	0000eb2d 	.word	0x0000eb2d
    f3d0:	0000fd95 	.word	0x0000fd95
    f3d4:	0000f025 	.word	0x0000f025
    f3d8:	0000f2a5 	.word	0x0000f2a5
    f3dc:	2000297a 	.word	0x2000297a
    f3e0:	0000f4bd 	.word	0x0000f4bd

0000f3e4 <SwTimerTimestampCreate>:

\return LORAWAN_SUCCESS if new timerId is allocated
        LORAWAN_RESOURCE_UNAVAILABLE if there is no more timerId to allocate
******************************************************************************/
StackRetStatus_t SwTimerTimestampCreate(uint8_t *timestampId)
{
    f3e4:	b510      	push	{r4, lr}
    f3e6:	0004      	movs	r4, r0
    StackRetStatus_t retVal = LORAWAN_SUCCESS;

    if (allocatedTimestampId < TOTAL_NUMBER_SW_TIMESTAMPS)
    f3e8:	4b08      	ldr	r3, [pc, #32]	; (f40c <SwTimerTimestampCreate+0x28>)
    f3ea:	781b      	ldrb	r3, [r3, #0]
        * If you reach this spot it means the TOTAL_NUMBER_SW_TIMESTAMPS
        * is #defined to a lower value than the number of timers that have
        * been SwTimerTimestampCreate()
        */
        SYS_ASSERT_FATAL(ASSERT_HAL_TIMESTAMPID_EXHAUSTED);
        retVal = LORAWAN_RESOURCE_UNAVAILABLE;
    f3ec:	2014      	movs	r0, #20
    if (allocatedTimestampId < TOTAL_NUMBER_SW_TIMESTAMPS)
    f3ee:	2b01      	cmp	r3, #1
    f3f0:	d900      	bls.n	f3f4 <SwTimerTimestampCreate+0x10>
    }

    return retVal;
}
    f3f2:	bd10      	pop	{r4, pc}
        ATOMIC_SECTION_ENTER
    f3f4:	4b06      	ldr	r3, [pc, #24]	; (f410 <SwTimerTimestampCreate+0x2c>)
    f3f6:	4798      	blx	r3
        *timestampId = allocatedTimestampId;
    f3f8:	4a04      	ldr	r2, [pc, #16]	; (f40c <SwTimerTimestampCreate+0x28>)
    f3fa:	7813      	ldrb	r3, [r2, #0]
    f3fc:	7023      	strb	r3, [r4, #0]
        allocatedTimestampId++;
    f3fe:	3301      	adds	r3, #1
    f400:	7013      	strb	r3, [r2, #0]
        ATOMIC_SECTION_EXIT
    f402:	4b04      	ldr	r3, [pc, #16]	; (f414 <SwTimerTimestampCreate+0x30>)
    f404:	4798      	blx	r3
    StackRetStatus_t retVal = LORAWAN_SUCCESS;
    f406:	2008      	movs	r0, #8
    f408:	e7f3      	b.n	f3f2 <SwTimerTimestampCreate+0xe>
    f40a:	46c0      	nop			; (mov r8, r8)
    f40c:	200010dd 	.word	0x200010dd
    f410:	000083d1 	.word	0x000083d1
    f414:	000083dd 	.word	0x000083dd

0000f418 <SwTimerReadTimestamp>:
\param[in] index Index of the system timestamp
\param[out] *timestamp Pointer-to-timestamp to be read from the given index
******************************************************************************/
void SwTimerReadTimestamp(uint8_t index, SwTimestamp_t *timestamp)
{
	*timestamp = swTimestamp[index];
    f418:	00c3      	lsls	r3, r0, #3
    f41a:	4803      	ldr	r0, [pc, #12]	; (f428 <SwTimerReadTimestamp+0x10>)
    f41c:	18c0      	adds	r0, r0, r3
    f41e:	6802      	ldr	r2, [r0, #0]
    f420:	6843      	ldr	r3, [r0, #4]
    f422:	600a      	str	r2, [r1, #0]
    f424:	604b      	str	r3, [r1, #4]
}
    f426:	4770      	bx	lr
    f428:	200027d8 	.word	0x200027d8

0000f42c <SwTimerWriteTimestamp>:
\param[in] index Index of the system timestamp
\param[in] *timestamp Pointer-to-timestamp to be stored in the given index
******************************************************************************/
void SwTimerWriteTimestamp(uint8_t index, SwTimestamp_t *timestamp)
{
    swTimestamp[index] = *timestamp;
    f42c:	680a      	ldr	r2, [r1, #0]
    f42e:	684b      	ldr	r3, [r1, #4]
    f430:	00c1      	lsls	r1, r0, #3
    f432:	4802      	ldr	r0, [pc, #8]	; (f43c <SwTimerWriteTimestamp+0x10>)
    f434:	1840      	adds	r0, r0, r1
    f436:	6002      	str	r2, [r0, #0]
    f438:	6043      	str	r3, [r0, #4]
}
    f43a:	4770      	bx	lr
    f43c:	200027d8 	.word	0x200027d8

0000f440 <Stack_Init>:
/**************************************************************************//**
\brief Initializes the system. This is the first stack function to be called
       by the application in the main() function.
******************************************************************************/
void Stack_Init(void)
{
    f440:	b510      	push	{r4, lr}
	
	/* LORAWAN_Init() should have been called form here, 
	   but parser application has a round-about way to call it now */
 
	/* Post application task to initiate the execution from there */
	SYSTEM_PostTask(APP_TASK_ID);
    f442:	2010      	movs	r0, #16
    f444:	4b01      	ldr	r3, [pc, #4]	; (f44c <Stack_Init+0xc>)
    f446:	4798      	blx	r3
}
    f448:	bd10      	pop	{r4, pc}
    f44a:	46c0      	nop			; (mov r8, r8)
    f44c:	0000f4bd 	.word	0x0000f4bd

0000f450 <SYSTEM_RunTasks>:
/************************************************************************/
/*********************************************************************//**
\brief System tasks execution entry point
*************************************************************************/
void SYSTEM_RunTasks(void)
{
    f450:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if ((1 << SYSTEM_TASK_ID_COUNT) > sysTaskFlag)
    f452:	4b16      	ldr	r3, [pc, #88]	; (f4ac <SYSTEM_RunTasks+0x5c>)
    f454:	881b      	ldrh	r3, [r3, #0]
    f456:	b29b      	uxth	r3, r3
    f458:	2b1f      	cmp	r3, #31
    f45a:	d922      	bls.n	f4a2 <SYSTEM_RunTasks+0x52>
    f45c:	e7fe      	b.n	f45c <SYSTEM_RunTasks+0xc>
    { /* Only valid task bits are set */
        while (sysTaskFlag)
        { /* One or more task are pending to execute */
            for (uint16_t taskId = 0; taskId < SYSTEM_TASK_ID_COUNT; taskId++)
            {
                if ((1 << taskId) & sysTaskFlag)
    f45e:	2500      	movs	r5, #0
                    /*
                    * Reset the task bit since it is to be executed now.
                    * It is done inside atomic section to avoid any interrupt context
                    * corrupting the bits.
                    */
                    ATOMIC_SECTION_ENTER
    f460:	4b13      	ldr	r3, [pc, #76]	; (f4b0 <SYSTEM_RunTasks+0x60>)
    f462:	4798      	blx	r3
                    sysTaskFlag &= ~(1 << taskId);
    f464:	4911      	ldr	r1, [pc, #68]	; (f4ac <SYSTEM_RunTasks+0x5c>)
    f466:	880b      	ldrh	r3, [r1, #0]
    f468:	2201      	movs	r2, #1
    f46a:	40aa      	lsls	r2, r5
    f46c:	4393      	bics	r3, r2
    f46e:	800b      	strh	r3, [r1, #0]
                    ATOMIC_SECTION_EXIT
    f470:	4b10      	ldr	r3, [pc, #64]	; (f4b4 <SYSTEM_RunTasks+0x64>)
    f472:	4798      	blx	r3

                    /* Return value is not used now, can be used later */
                    taskHandlers[taskId]();
    f474:	00ad      	lsls	r5, r5, #2
    f476:	4b10      	ldr	r3, [pc, #64]	; (f4b8 <SYSTEM_RunTasks+0x68>)
    f478:	58eb      	ldr	r3, [r5, r3]
    f47a:	4798      	blx	r3
                if ((1 << taskId) & sysTaskFlag)
    f47c:	2101      	movs	r1, #1
        while (sysTaskFlag)
    f47e:	883b      	ldrh	r3, [r7, #0]
    f480:	b29b      	uxth	r3, r3
    f482:	2b00      	cmp	r3, #0
    f484:	d011      	beq.n	f4aa <SYSTEM_RunTasks+0x5a>
                if ((1 << taskId) & sysTaskFlag)
    f486:	8823      	ldrh	r3, [r4, #0]
    f488:	420b      	tst	r3, r1
    f48a:	d1e8      	bne.n	f45e <SYSTEM_RunTasks+0xe>
    f48c:	2201      	movs	r2, #1
    f48e:	8833      	ldrh	r3, [r6, #0]
    f490:	b29b      	uxth	r3, r3
    f492:	0015      	movs	r5, r2
    f494:	4113      	asrs	r3, r2
    f496:	4219      	tst	r1, r3
    f498:	d1e2      	bne.n	f460 <SYSTEM_RunTasks+0x10>
    f49a:	3201      	adds	r2, #1
            for (uint16_t taskId = 0; taskId < SYSTEM_TASK_ID_COUNT; taskId++)
    f49c:	2a05      	cmp	r2, #5
    f49e:	d1f6      	bne.n	f48e <SYSTEM_RunTasks+0x3e>
    f4a0:	e7ed      	b.n	f47e <SYSTEM_RunTasks+0x2e>
        while (sysTaskFlag)
    f4a2:	4f02      	ldr	r7, [pc, #8]	; (f4ac <SYSTEM_RunTasks+0x5c>)
                if ((1 << taskId) & sysTaskFlag)
    f4a4:	003c      	movs	r4, r7
    f4a6:	003e      	movs	r6, r7
    f4a8:	e7e8      	b.n	f47c <SYSTEM_RunTasks+0x2c>
        * Can happen only due to corruption, so halt
        * TODO : replace this with assert implementation
        */
        while(1);
    }
}
    f4aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    f4ac:	200010f8 	.word	0x200010f8
    f4b0:	000083d1 	.word	0x000083d1
    f4b4:	000083dd 	.word	0x000083dd
    f4b8:	000201d8 	.word	0x000201d8

0000f4bc <SYSTEM_PostTask>:

\param[in] task - ID of the posted task.
*************************************************************************/

void SYSTEM_PostTask(SYSTEM_Task_t task)
{
    f4bc:	b510      	push	{r4, lr}
    f4be:	0004      	movs	r4, r0
    ATOMIC_SECTION_ENTER
    f4c0:	4b04      	ldr	r3, [pc, #16]	; (f4d4 <SYSTEM_PostTask+0x18>)
    f4c2:	4798      	blx	r3
    sysTaskFlag |= task;
    f4c4:	4b04      	ldr	r3, [pc, #16]	; (f4d8 <SYSTEM_PostTask+0x1c>)
    f4c6:	8818      	ldrh	r0, [r3, #0]
    f4c8:	4320      	orrs	r0, r4
    f4ca:	8018      	strh	r0, [r3, #0]
    ATOMIC_SECTION_EXIT
    f4cc:	4b03      	ldr	r3, [pc, #12]	; (f4dc <SYSTEM_PostTask+0x20>)
    f4ce:	4798      	blx	r3
}
    f4d0:	bd10      	pop	{r4, pc}
    f4d2:	46c0      	nop			; (mov r8, r8)
    f4d4:	000083d1 	.word	0x000083d1
    f4d8:	200010f8 	.word	0x200010f8
    f4dc:	000083dd 	.word	0x000083dd

0000f4e0 <SYSTEM_ReadyToSleep>:

\return 'true' if the system is ready, 'false' otherwise
*************************************************************************/
bool SYSTEM_ReadyToSleep(void)
{
    return !(sysTaskFlag & 0xffff);
    f4e0:	4b03      	ldr	r3, [pc, #12]	; (f4f0 <SYSTEM_ReadyToSleep+0x10>)
    f4e2:	8818      	ldrh	r0, [r3, #0]
    f4e4:	b280      	uxth	r0, r0
    f4e6:	4243      	negs	r3, r0
    f4e8:	4158      	adcs	r0, r3
    f4ea:	b2c0      	uxtb	r0, r0
}
    f4ec:	4770      	bx	lr
    f4ee:	46c0      	nop			; (mov r8, r8)
    f4f0:	200010f8 	.word	0x200010f8

0000f4f4 <Radio_WriteMode>:
\param newModulation	- Sets the modulation.
\param blocking			- Sets if its blocking call or not.
\return					- none.
*************************************************************************/
void Radio_WriteMode(RadioMode_t newMode, RadioModulation_t newModulation, uint8_t blocking)
{
    f4f4:	b5f0      	push	{r4, r5, r6, r7, lr}
    f4f6:	46d6      	mov	lr, sl
    f4f8:	464f      	mov	r7, r9
    f4fa:	b580      	push	{r7, lr}
    f4fc:	b083      	sub	sp, #12
    f4fe:	9201      	str	r2, [sp, #4]
    uint8_t opMode;
    uint8_t dioMapping;
    RadioModulation_t currentModulation;
    RadioMode_t currentMode;

    if ((MODULATION_FSK == newModulation) &&
    f500:	2900      	cmp	r1, #0
    f502:	d102      	bne.n	f50a <Radio_WriteMode+0x16>
    f504:	1f83      	subs	r3, r0, #6
    f506:	2b01      	cmp	r3, #1
    f508:	d92a      	bls.n	f560 <Radio_WriteMode+0x6c>
        // Unavailable modes for FSK. Just return.
        return;
    }

    // Sanity enforcement on parameters
    newMode &= 0x07;
    f50a:	2307      	movs	r3, #7
    f50c:	4699      	mov	r9, r3
    f50e:	001c      	movs	r4, r3
    f510:	4004      	ands	r4, r0
    newModulation &= 0x01;
    f512:	2601      	movs	r6, #1
    f514:	400e      	ands	r6, r1

    opMode = RADIO_RegisterRead(REG_OPMODE);
    f516:	2001      	movs	r0, #1
    f518:	4b2b      	ldr	r3, [pc, #172]	; (f5c8 <Radio_WriteMode+0xd4>)
    f51a:	4798      	blx	r3
    f51c:	0005      	movs	r5, r0
    f51e:	0007      	movs	r7, r0

    if ((opMode & 0x80) != 0)
    f520:	b243      	sxtb	r3, r0
    f522:	469a      	mov	sl, r3
    else
    {
        currentModulation = MODULATION_FSK;
    }

    currentMode = opMode & 0x07;
    f524:	464b      	mov	r3, r9
    f526:	4003      	ands	r3, r0

    // If we need to change modulation, we need to do this in sleep mode.
    // Otherwise, we can go straight to changing the current mode to newMode.
    if (newModulation != currentModulation)
    f528:	4652      	mov	r2, sl
    f52a:	0fd2      	lsrs	r2, r2, #31
    f52c:	4296      	cmp	r6, r2
    f52e:	d00a      	beq.n	f546 <Radio_WriteMode+0x52>
    {
        // Go to sleep
        if (MODE_SLEEP != currentMode)
    f530:	2b00      	cmp	r3, #0
    f532:	d11a      	bne.n	f56a <Radio_WriteMode+0x76>
            // Clear mode bits, effectively going to sleep
            RADIO_RegisterWrite(REG_OPMODE, opMode & (~0x07));
            currentMode = MODE_SLEEP;
        }
        // Change modulation
        if (MODULATION_FSK == newModulation)
    f534:	2e00      	cmp	r6, #0
    f536:	d11e      	bne.n	f576 <Radio_WriteMode+0x82>
        {
            // Clear MSB and sleep bits to make it stay in sleep
            opMode = opMode & (~0x87);
    f538:	2778      	movs	r7, #120	; 0x78
    f53a:	402f      	ands	r7, r5
        else
        {
            // LoRa mode. Set MSB and clear sleep bits to make it stay in sleep
            opMode = 0x80 | (opMode & (~0x87));
        }
        RADIO_RegisterWrite(REG_OPMODE, opMode);
    f53c:	0039      	movs	r1, r7
    f53e:	2001      	movs	r0, #1
    f540:	4b22      	ldr	r3, [pc, #136]	; (f5cc <Radio_WriteMode+0xd8>)
    f542:	4798      	blx	r3
    f544:	2300      	movs	r3, #0

    // From here on currentModulation is no longer current, we will use
    // newModulation instead as it reflects the chip configuration.
    // opMode reflects the actual configuration of the chip.

    if (newMode != currentMode)
    f546:	42a3      	cmp	r3, r4
    f548:	d00a      	beq.n	f560 <Radio_WriteMode+0x6c>
    {
        // If we need to block until the mode switch is ready, configure the
        // DIO5 pin to relay this information.
        if ((MODE_SLEEP != newMode) && (1 == blocking))
    f54a:	2c00      	cmp	r4, #0
    f54c:	d030      	beq.n	f5b0 <Radio_WriteMode+0xbc>
    f54e:	9b01      	ldr	r3, [sp, #4]
    f550:	2b01      	cmp	r3, #1
    f552:	d016      	beq.n	f582 <Radio_WriteMode+0x8e>
            }
            RADIO_RegisterWrite(REG_DIOMAPPING2, dioMapping);
        }

        // Do the actual mode switch.
        opMode &= ~0x07;                // Clear old mode bits
    f554:	21f8      	movs	r1, #248	; 0xf8
    f556:	4039      	ands	r1, r7
        opMode |= newMode;              // Set new mode bits
        RADIO_RegisterWrite(REG_OPMODE, opMode);
    f558:	4321      	orrs	r1, r4
    f55a:	2001      	movs	r0, #1
    f55c:	4b1b      	ldr	r3, [pc, #108]	; (f5cc <Radio_WriteMode+0xd8>)
    f55e:	4798      	blx	r3
                SystemBlockingWaitMs(1);
            }
        }
    }
#endif
}
    f560:	b003      	add	sp, #12
    f562:	bc0c      	pop	{r2, r3}
    f564:	4691      	mov	r9, r2
    f566:	469a      	mov	sl, r3
    f568:	bdf0      	pop	{r4, r5, r6, r7, pc}
            RADIO_RegisterWrite(REG_OPMODE, opMode & (~0x07));
    f56a:	21f8      	movs	r1, #248	; 0xf8
    f56c:	4001      	ands	r1, r0
    f56e:	2001      	movs	r0, #1
    f570:	4b16      	ldr	r3, [pc, #88]	; (f5cc <Radio_WriteMode+0xd8>)
    f572:	4798      	blx	r3
    f574:	e7de      	b.n	f534 <Radio_WriteMode+0x40>
            opMode = 0x80 | (opMode & (~0x87));
    f576:	2778      	movs	r7, #120	; 0x78
    f578:	4653      	mov	r3, sl
    f57a:	401f      	ands	r7, r3
    f57c:	2180      	movs	r1, #128	; 0x80
    f57e:	430f      	orrs	r7, r1
    f580:	e7dc      	b.n	f53c <Radio_WriteMode+0x48>
            dioMapping = RADIO_RegisterRead(REG_DIOMAPPING2);
    f582:	2041      	movs	r0, #65	; 0x41
    f584:	4b10      	ldr	r3, [pc, #64]	; (f5c8 <Radio_WriteMode+0xd4>)
    f586:	4798      	blx	r3
            if (MODULATION_FSK == newModulation)
    f588:	2e00      	cmp	r6, #0
    f58a:	d10e      	bne.n	f5aa <Radio_WriteMode+0xb6>
                dioMapping |= 0x30;     // DIO5 = 11 means ModeReady in FSK mode
    f58c:	2130      	movs	r1, #48	; 0x30
    f58e:	4301      	orrs	r1, r0
    f590:	b2c9      	uxtb	r1, r1
            RADIO_RegisterWrite(REG_DIOMAPPING2, dioMapping);
    f592:	2041      	movs	r0, #65	; 0x41
    f594:	4d0d      	ldr	r5, [pc, #52]	; (f5cc <Radio_WriteMode+0xd8>)
    f596:	47a8      	blx	r5
        opMode &= ~0x07;                // Clear old mode bits
    f598:	21f8      	movs	r1, #248	; 0xf8
    f59a:	4039      	ands	r1, r7
        RADIO_RegisterWrite(REG_OPMODE, opMode);
    f59c:	4321      	orrs	r1, r4
    f59e:	2001      	movs	r0, #1
    f5a0:	47a8      	blx	r5
			   delay_ms(1);
    f5a2:	2001      	movs	r0, #1
    f5a4:	4b0a      	ldr	r3, [pc, #40]	; (f5d0 <Radio_WriteMode+0xdc>)
    f5a6:	4798      	blx	r3
    f5a8:	e7da      	b.n	f560 <Radio_WriteMode+0x6c>
                dioMapping &= ~0x30;    // DIO5 = 00 means ModeReady in LoRa mode
    f5aa:	21cf      	movs	r1, #207	; 0xcf
    f5ac:	4001      	ands	r1, r0
    f5ae:	e7f0      	b.n	f592 <Radio_WriteMode+0x9e>
        opMode &= ~0x07;                // Clear old mode bits
    f5b0:	21f8      	movs	r1, #248	; 0xf8
        RADIO_RegisterWrite(REG_OPMODE, opMode);
    f5b2:	4039      	ands	r1, r7
    f5b4:	2001      	movs	r0, #1
    f5b6:	4b05      	ldr	r3, [pc, #20]	; (f5cc <Radio_WriteMode+0xd8>)
    f5b8:	4798      	blx	r3
        if (1 == blocking)
    f5ba:	9b01      	ldr	r3, [sp, #4]
    f5bc:	2b01      	cmp	r3, #1
    f5be:	d1cf      	bne.n	f560 <Radio_WriteMode+0x6c>
                SystemBlockingWaitMs(1);
    f5c0:	2001      	movs	r0, #1
    f5c2:	4b04      	ldr	r3, [pc, #16]	; (f5d4 <Radio_WriteMode+0xe0>)
    f5c4:	4798      	blx	r3
    f5c6:	e7cb      	b.n	f560 <Radio_WriteMode+0x6c>
    f5c8:	00008149 	.word	0x00008149
    f5cc:	00008121 	.word	0x00008121
    f5d0:	000045d5 	.word	0x000045d5
    f5d4:	0000837d 	.word	0x0000837d

0000f5d8 <RADIO_FHSSChangeChannel>:

\param		- none	
\return		- none.
*************************************************************************/
void RADIO_FHSSChangeChannel(void)
{
    f5d8:	b500      	push	{lr}
    f5da:	b083      	sub	sp, #12
    uint32_t freq;
    RADIO_RegisterRead(REG_LORA_IRQFLAGS);
    f5dc:	2012      	movs	r0, #18
    f5de:	4b0d      	ldr	r3, [pc, #52]	; (f614 <RADIO_FHSSChangeChannel+0x3c>)
    f5e0:	4798      	blx	r3

    if (radioConfiguration.frequencyHopPeriod)
    f5e2:	4b0d      	ldr	r3, [pc, #52]	; (f618 <RADIO_FHSSChangeChannel+0x40>)
    f5e4:	8adb      	ldrh	r3, [r3, #22]
    f5e6:	2b00      	cmp	r3, #0
    f5e8:	d007      	beq.n	f5fa <RADIO_FHSSChangeChannel+0x22>
    {
        if ((radioConfiguration.radioCallback) &&
    f5ea:	4b0b      	ldr	r3, [pc, #44]	; (f618 <RADIO_FHSSChangeChannel+0x40>)
    f5ec:	691b      	ldr	r3, [r3, #16]
    f5ee:	2b00      	cmp	r3, #0
    f5f0:	d003      	beq.n	f5fa <RADIO_FHSSChangeChannel+0x22>
            (1 == radioCallbackMask.BitMask.radioFhssfreqCallback))
    f5f2:	4a0a      	ldr	r2, [pc, #40]	; (f61c <RADIO_FHSSChangeChannel+0x44>)
    f5f4:	7812      	ldrb	r2, [r2, #0]
        if ((radioConfiguration.radioCallback) &&
    f5f6:	0692      	lsls	r2, r2, #26
    f5f8:	d405      	bmi.n	f606 <RADIO_FHSSChangeChannel+0x2e>
            Radio_WriteFrequency(freq);
        }
    }

    // Clear FHSSChangeChannel interrupt
    RADIO_RegisterWrite(REG_LORA_IRQFLAGS, 1 << SHIFT1);
    f5fa:	2102      	movs	r1, #2
    f5fc:	2012      	movs	r0, #18
    f5fe:	4b08      	ldr	r3, [pc, #32]	; (f620 <RADIO_FHSSChangeChannel+0x48>)
    f600:	4798      	blx	r3
}
    f602:	b003      	add	sp, #12
    f604:	bd00      	pop	{pc}
            radioConfiguration.radioCallback(RADIO_FHSS_NEXT_FREQ_CALLBACK, (void *)&freq);
    f606:	a901      	add	r1, sp, #4
    f608:	2020      	movs	r0, #32
    f60a:	4798      	blx	r3
            Radio_WriteFrequency(freq);
    f60c:	9801      	ldr	r0, [sp, #4]
    f60e:	4b05      	ldr	r3, [pc, #20]	; (f624 <RADIO_FHSSChangeChannel+0x4c>)
    f610:	4798      	blx	r3
    f612:	e7f2      	b.n	f5fa <RADIO_FHSSChangeChannel+0x22>
    f614:	00008149 	.word	0x00008149
    f618:	20002980 	.word	0x20002980
    f61c:	20002fbe 	.word	0x20002fbe
    f620:	00008121 	.word	0x00008121
    f624:	00014ebd 	.word	0x00014ebd

0000f628 <RADIO_ReadRandom>:

\param		- none	
\return		- returns the random number generated.
*************************************************************************/
uint16_t RADIO_ReadRandom(void)
{
    f628:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint8_t i;
    uint16_t retVal;
    retVal = 0;
	
	// Turn on the RF switch.
	Radio_EnableRfControl(RADIO_RFCTRL_RX); 
    f62a:	2000      	movs	r0, #0
    f62c:	4b1a      	ldr	r3, [pc, #104]	; (f698 <RADIO_ReadRandom+0x70>)
    f62e:	4798      	blx	r3
	// Enabling Radio Clock
	Radio_SetClockInput();
    f630:	4b1a      	ldr	r3, [pc, #104]	; (f69c <RADIO_ReadRandom+0x74>)
    f632:	4798      	blx	r3
	
    // Mask all interrupts, do many measurements of RSSI
    Radio_WriteMode(MODE_SLEEP, MODULATION_LORA, 1);
    f634:	2201      	movs	r2, #1
    f636:	2101      	movs	r1, #1
    f638:	2000      	movs	r0, #0
    f63a:	4c19      	ldr	r4, [pc, #100]	; (f6a0 <RADIO_ReadRandom+0x78>)
    f63c:	47a0      	blx	r4
    RADIO_RegisterWrite(REG_LORA_IRQFLAGSMASK, 0xFF);
    f63e:	21ff      	movs	r1, #255	; 0xff
    f640:	2011      	movs	r0, #17
    f642:	4b18      	ldr	r3, [pc, #96]	; (f6a4 <RADIO_ReadRandom+0x7c>)
    f644:	4798      	blx	r3
    Radio_WriteMode(MODE_RXCONT, MODULATION_LORA, 1);
    f646:	2201      	movs	r2, #1
    f648:	2101      	movs	r1, #1
    f64a:	2005      	movs	r0, #5
    f64c:	47a0      	blx	r4
    f64e:	2410      	movs	r4, #16
    retVal = 0;
    f650:	2500      	movs	r5, #0
    for (i = 0; i < 16; i++)
    {
        SystemBlockingWaitMs(1);
    f652:	4f15      	ldr	r7, [pc, #84]	; (f6a8 <RADIO_ReadRandom+0x80>)
        retVal <<= SHIFT1;
        retVal |= RADIO_RegisterRead(REG_LORA_RSSIWIDEBAND) & 0x01;
    f654:	4e15      	ldr	r6, [pc, #84]	; (f6ac <RADIO_ReadRandom+0x84>)
        SystemBlockingWaitMs(1);
    f656:	2001      	movs	r0, #1
    f658:	47b8      	blx	r7
        retVal |= RADIO_RegisterRead(REG_LORA_RSSIWIDEBAND) & 0x01;
    f65a:	202c      	movs	r0, #44	; 0x2c
    f65c:	47b0      	blx	r6
    f65e:	2301      	movs	r3, #1
    f660:	4018      	ands	r0, r3
        retVal <<= SHIFT1;
    f662:	006d      	lsls	r5, r5, #1
        retVal |= RADIO_RegisterRead(REG_LORA_RSSIWIDEBAND) & 0x01;
    f664:	4305      	orrs	r5, r0
    f666:	b2ad      	uxth	r5, r5
    f668:	3c01      	subs	r4, #1
    f66a:	b2e4      	uxtb	r4, r4
    for (i = 0; i < 16; i++)
    f66c:	2c00      	cmp	r4, #0
    f66e:	d1f2      	bne.n	f656 <RADIO_ReadRandom+0x2e>
    }
	
	// Turning off the RF switch now.
	Radio_DisableRfControl(RADIO_RFCTRL_RX);
    f670:	2000      	movs	r0, #0
    f672:	4b0f      	ldr	r3, [pc, #60]	; (f6b0 <RADIO_ReadRandom+0x88>)
    f674:	4798      	blx	r3
	
    // Return radio to sleep
    Radio_WriteMode(MODE_SLEEP, MODULATION_LORA, 1);
    f676:	2201      	movs	r2, #1
    f678:	2101      	movs	r1, #1
    f67a:	2000      	movs	r0, #0
    f67c:	4b08      	ldr	r3, [pc, #32]	; (f6a0 <RADIO_ReadRandom+0x78>)
    f67e:	4798      	blx	r3
    // Clear interrupts in case any have been generated
    RADIO_RegisterWrite(REG_LORA_IRQFLAGS, 0xFF);
    f680:	21ff      	movs	r1, #255	; 0xff
    f682:	2012      	movs	r0, #18
    f684:	4c07      	ldr	r4, [pc, #28]	; (f6a4 <RADIO_ReadRandom+0x7c>)
    f686:	47a0      	blx	r4
    // Unmask all interrupts
    RADIO_RegisterWrite(REG_LORA_IRQFLAGSMASK, 0x00);
    f688:	2100      	movs	r1, #0
    f68a:	2011      	movs	r0, #17
    f68c:	47a0      	blx	r4
	// Disabling Radio Clock save power
	Radio_ResetClockInput();
    f68e:	4b09      	ldr	r3, [pc, #36]	; (f6b4 <RADIO_ReadRandom+0x8c>)
    f690:	4798      	blx	r3
	
    return retVal;
}
    f692:	0028      	movs	r0, r5
    f694:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    f696:	46c0      	nop			; (mov r8, r8)
    f698:	00015779 	.word	0x00015779
    f69c:	00015c29 	.word	0x00015c29
    f6a0:	0000f4f5 	.word	0x0000f4f5
    f6a4:	00008121 	.word	0x00008121
    f6a8:	0000837d 	.word	0x0000837d
    f6ac:	00008149 	.word	0x00008149
    f6b0:	000158a1 	.word	0x000158a1
    f6b4:	00015c5d 	.word	0x00015c5d

0000f6b8 <Radio_ReadFSKRssi>:

\param rssi	- The RSSI measured in the channel.
\return		- ERR_NONE. Other types are not used now.
*************************************************************************/
RadioError_t Radio_ReadFSKRssi(int16_t *rssi)
{	
    f6b8:	b510      	push	{r4, lr}
    f6ba:	0004      	movs	r4, r0
#ifdef UT
	*rssi = testRssi;
#else // UT
	*rssi = -(RADIO_RegisterRead(REG_FSK_RSSIVALUE) >> 1);
    f6bc:	2011      	movs	r0, #17
    f6be:	4b04      	ldr	r3, [pc, #16]	; (f6d0 <Radio_ReadFSKRssi+0x18>)
    f6c0:	4798      	blx	r3
    f6c2:	0840      	lsrs	r0, r0, #1
    f6c4:	b2c0      	uxtb	r0, r0
    f6c6:	4240      	negs	r0, r0
    f6c8:	8020      	strh	r0, [r4, #0]
#endif // UT
	
	return ERR_NONE;
}
    f6ca:	2000      	movs	r0, #0
    f6cc:	bd10      	pop	{r4, pc}
    f6ce:	46c0      	nop			; (mov r8, r8)
    f6d0:	00008149 	.word	0x00008149

0000f6d4 <tc_cca_callback>:
}

/*! \brief  hw timer compare callback
 */
static void tc_cca_callback(struct tc_module *const module_instance)
{
    f6d4:	b510      	push	{r4, lr}
	tmr_cca_callback();
    f6d6:	4b01      	ldr	r3, [pc, #4]	; (f6dc <tc_cca_callback+0x8>)
    f6d8:	4798      	blx	r3
}
    f6da:	bd10      	pop	{r4, pc}
    f6dc:	0000fd6d 	.word	0x0000fd6d

0000f6e0 <tc_ovf_callback>:
{
    f6e0:	b510      	push	{r4, lr}
	tmr_ovf_callback();
    f6e2:	4b01      	ldr	r3, [pc, #4]	; (f6e8 <tc_ovf_callback+0x8>)
    f6e4:	4798      	blx	r3
}
    f6e6:	bd10      	pop	{r4, pc}
    f6e8:	0000fd25 	.word	0x0000fd25

0000f6ec <tmr_read_count>:
{
    f6ec:	b510      	push	{r4, lr}
	return ((uint16_t)tc_get_count_value(&module_inst));
    f6ee:	4802      	ldr	r0, [pc, #8]	; (f6f8 <tmr_read_count+0xc>)
    f6f0:	4b02      	ldr	r3, [pc, #8]	; (f6fc <tmr_read_count+0x10>)
    f6f2:	4798      	blx	r3
    f6f4:	b280      	uxth	r0, r0
}
    f6f6:	bd10      	pop	{r4, pc}
    f6f8:	20002a14 	.word	0x20002a14
    f6fc:	00007865 	.word	0x00007865

0000f700 <tmr_disable_cc_interrupt>:
	/* Sanity check arguments */
	Assert(module);

	/* Disable callback */
	if (callback_type == TC_CALLBACK_CC_CHANNEL0) {
		module->hw->COUNT8.INTENCLR.reg = TC_INTFLAG_MC(1);
    f700:	4b03      	ldr	r3, [pc, #12]	; (f710 <tmr_disable_cc_interrupt+0x10>)
    f702:	2110      	movs	r1, #16
    f704:	681a      	ldr	r2, [r3, #0]
    f706:	7211      	strb	r1, [r2, #8]
		module->enable_callback_mask &= ~TC_INTFLAG_MC(1);
    f708:	7e5a      	ldrb	r2, [r3, #25]
    f70a:	438a      	bics	r2, r1
    f70c:	765a      	strb	r2, [r3, #25]
}
    f70e:	4770      	bx	lr
    f710:	20002a14 	.word	0x20002a14

0000f714 <tmr_enable_cc_interrupt>:
{
    f714:	b570      	push	{r4, r5, r6, lr}
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    f716:	4c0b      	ldr	r4, [pc, #44]	; (f744 <tmr_enable_cc_interrupt+0x30>)
	if (status_flags & TC_STATUS_COUNT_OVERFLOW) {
		int_flags |= TC_INTFLAG_OVF;
	}

	/* Clear interrupt flag */
	tc_module->INTFLAG.reg = int_flags;
    f718:	2510      	movs	r5, #16
    f71a:	6823      	ldr	r3, [r4, #0]
    f71c:	729d      	strb	r5, [r3, #10]
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));
    f71e:	0018      	movs	r0, r3
    f720:	4b09      	ldr	r3, [pc, #36]	; (f748 <tmr_enable_cc_interrupt+0x34>)
    f722:	4798      	blx	r3
	return (enum system_interrupt_vector)tc_interrupt_vectors[inst_num];
    f724:	4b09      	ldr	r3, [pc, #36]	; (f74c <tmr_enable_cc_interrupt+0x38>)
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    f726:	5c1b      	ldrb	r3, [r3, r0]
    f728:	221f      	movs	r2, #31
    f72a:	401a      	ands	r2, r3
    f72c:	2301      	movs	r3, #1
    f72e:	4093      	lsls	r3, r2
    f730:	4a07      	ldr	r2, [pc, #28]	; (f750 <tmr_enable_cc_interrupt+0x3c>)
    f732:	6013      	str	r3, [r2, #0]
		module->enable_callback_mask |= TC_INTFLAG_MC(1);
    f734:	7e63      	ldrb	r3, [r4, #25]
    f736:	2210      	movs	r2, #16
    f738:	4313      	orrs	r3, r2
    f73a:	7663      	strb	r3, [r4, #25]
		module->hw->COUNT8.INTENSET.reg = TC_INTFLAG_MC(1);
    f73c:	6823      	ldr	r3, [r4, #0]
    f73e:	725d      	strb	r5, [r3, #9]
}
    f740:	bd70      	pop	{r4, r5, r6, pc}
    f742:	46c0      	nop			; (mov r8, r8)
    f744:	20002a14 	.word	0x20002a14
    f748:	00007539 	.word	0x00007539
    f74c:	000201ec 	.word	0x000201ec
    f750:	e000e100 	.word	0xe000e100

0000f754 <tmr_disable_ovf_interrupt>:
	else if (callback_type == TC_CALLBACK_CC_CHANNEL1) {
		module->hw->COUNT8.INTENCLR.reg = TC_INTFLAG_MC(2);
		module->enable_callback_mask &= ~TC_INTFLAG_MC(2);
	}
	else {
		module->hw->COUNT8.INTENCLR.reg = (1 << callback_type);
    f754:	4b03      	ldr	r3, [pc, #12]	; (f764 <tmr_disable_ovf_interrupt+0x10>)
    f756:	2101      	movs	r1, #1
    f758:	681a      	ldr	r2, [r3, #0]
    f75a:	7211      	strb	r1, [r2, #8]
		module->enable_callback_mask &= ~(1 << callback_type);
    f75c:	7e5a      	ldrb	r2, [r3, #25]
    f75e:	438a      	bics	r2, r1
    f760:	765a      	strb	r2, [r3, #25]
}
    f762:	4770      	bx	lr
    f764:	20002a14 	.word	0x20002a14

0000f768 <tmr_stop>:
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    f768:	4b06      	ldr	r3, [pc, #24]	; (f784 <tmr_stop+0x1c>)
    f76a:	681a      	ldr	r2, [r3, #0]
	return (tc_module->SYNCBUSY.reg);
    f76c:	6913      	ldr	r3, [r2, #16]
	while (tc_is_syncing(module_inst)) {
    f76e:	2b00      	cmp	r3, #0
    f770:	d1fc      	bne.n	f76c <tmr_stop+0x4>
	tc_module->INTENCLR.reg = TC_INTENCLR_MASK;
    f772:	3333      	adds	r3, #51	; 0x33
    f774:	7213      	strb	r3, [r2, #8]
	tc_module->INTFLAG.reg = TC_INTFLAG_MASK;
    f776:	7293      	strb	r3, [r2, #10]
	tc_module->CTRLA.reg  &= ~TC_CTRLA_ENABLE;
    f778:	6813      	ldr	r3, [r2, #0]
    f77a:	2102      	movs	r1, #2
    f77c:	438b      	bics	r3, r1
    f77e:	6013      	str	r3, [r2, #0]
}
    f780:	4770      	bx	lr
    f782:	46c0      	nop			; (mov r8, r8)
    f784:	20002a14 	.word	0x20002a14

0000f788 <tmr_write_cmpreg>:
{
    f788:	b510      	push	{r4, lr}
    f78a:	0002      	movs	r2, r0
	tc_set_compare_value(&module_inst, TC_COMPARE_CAPTURE_CHANNEL_0,
    f78c:	2100      	movs	r1, #0
    f78e:	4802      	ldr	r0, [pc, #8]	; (f798 <tmr_write_cmpreg+0x10>)
    f790:	4b02      	ldr	r3, [pc, #8]	; (f79c <tmr_write_cmpreg+0x14>)
    f792:	4798      	blx	r3
}
    f794:	bd10      	pop	{r4, pc}
    f796:	46c0      	nop			; (mov r8, r8)
    f798:	20002a14 	.word	0x20002a14
    f79c:	000078a5 	.word	0x000078a5

0000f7a0 <save_cpu_interrupt>:
{
    f7a0:	b082      	sub	sp, #8
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    f7a2:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    f7a6:	425a      	negs	r2, r3
    f7a8:	4153      	adcs	r3, r2
    f7aa:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    f7ac:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
    f7ae:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    f7b2:	2200      	movs	r2, #0
    f7b4:	4b02      	ldr	r3, [pc, #8]	; (f7c0 <save_cpu_interrupt+0x20>)
    f7b6:	701a      	strb	r2, [r3, #0]
	return flags;
    f7b8:	9801      	ldr	r0, [sp, #4]
	return cpu_irq_save();
    f7ba:	b2c0      	uxtb	r0, r0
}
    f7bc:	b002      	add	sp, #8
    f7be:	4770      	bx	lr
    f7c0:	20000014 	.word	0x20000014

0000f7c4 <restore_cpu_interrupt>:
	if (cpu_irq_is_enabled_flags(flags))
    f7c4:	2800      	cmp	r0, #0
    f7c6:	d005      	beq.n	f7d4 <restore_cpu_interrupt+0x10>
		cpu_irq_enable();
    f7c8:	2201      	movs	r2, #1
    f7ca:	4b03      	ldr	r3, [pc, #12]	; (f7d8 <restore_cpu_interrupt+0x14>)
    f7cc:	701a      	strb	r2, [r3, #0]
    f7ce:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    f7d2:	b662      	cpsie	i
}
    f7d4:	4770      	bx	lr
    f7d6:	46c0      	nop			; (mov r8, r8)
    f7d8:	20000014 	.word	0x20000014

0000f7dc <tmr_init>:

/*! \brief  to initialize hw timer
 */
uint8_t tmr_init(void)
{
    f7dc:	b570      	push	{r4, r5, r6, lr}
	config->clock_source               = GCLK_GENERATOR_0;
    f7de:	4a33      	ldr	r2, [pc, #204]	; (f8ac <tmr_init+0xd0>)
    f7e0:	2100      	movs	r1, #0
    f7e2:	2300      	movs	r3, #0
    f7e4:	7011      	strb	r1, [r2, #0]
	config->counter_size               = TC_COUNTER_SIZE_16BIT;
    f7e6:	70d1      	strb	r1, [r2, #3]
	config->clock_prescaler            = TC_CLOCK_PRESCALER_DIV1;
    f7e8:	2000      	movs	r0, #0
    f7ea:	8091      	strh	r1, [r2, #4]
	config->wave_generation            = TC_WAVE_GENERATION_NORMAL_FREQ;
    f7ec:	7190      	strb	r0, [r2, #6]
	config->reload_action              = TC_RELOAD_ACTION_GCLK;
    f7ee:	71d3      	strb	r3, [r2, #7]
	config->run_in_standby             = false;
    f7f0:	7053      	strb	r3, [r2, #1]
	config->on_demand                  = false;
    f7f2:	7093      	strb	r3, [r2, #2]
	config->waveform_invert_output     = TC_WAVEFORM_INVERT_OUTPUT_NONE;
    f7f4:	7213      	strb	r3, [r2, #8]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
    f7f6:	7253      	strb	r3, [r2, #9]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
    f7f8:	7293      	strb	r3, [r2, #10]
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
    f7fa:	72d3      	strb	r3, [r2, #11]
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
    f7fc:	7313      	strb	r3, [r2, #12]
	config->count_direction            = TC_COUNT_DIRECTION_UP;
    f7fe:	7393      	strb	r3, [r2, #14]
	config->oneshot                    = false;
    f800:	7353      	strb	r3, [r2, #13]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].enabled = false;
    f802:	7413      	strb	r3, [r2, #16]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_out = 0;
    f804:	6151      	str	r1, [r2, #20]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_mux = 0;
    f806:	6191      	str	r1, [r2, #24]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].enabled = false;
    f808:	7713      	strb	r3, [r2, #28]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_out = 0;
    f80a:	6211      	str	r1, [r2, #32]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_mux = 0;
    f80c:	6251      	str	r1, [r2, #36]	; 0x24
	config->counter_16_bit.value                   = 0x0000;
    f80e:	8511      	strh	r1, [r2, #40]	; 0x28
		[TC_COMPARE_CAPTURE_CHANNEL_1]                        = 0x0000;
    f810:	8591      	strh	r1, [r2, #44]	; 0x2c
	config->double_buffering_enabled = false;
    f812:	2334      	movs	r3, #52	; 0x34
    f814:	54d0      	strb	r0, [r2, r3]
		timer_config.clock_source = GCLK_GENERATOR_1;
		timer_config.clock_prescaler = TC_CLOCK_PRESCALER_DIV2;
		timer_config.run_in_standby = true;
	}
	#endif
	timer_config.counter_16_bit.compare_capture_channel[0] = TIMER_PERIOD;
    f816:	3b35      	subs	r3, #53	; 0x35
    f818:	8553      	strh	r3, [r2, #42]	; 0x2a
	tc_init(&module_inst, TIMER, &timer_config);
    f81a:	4c25      	ldr	r4, [pc, #148]	; (f8b0 <tmr_init+0xd4>)
    f81c:	4925      	ldr	r1, [pc, #148]	; (f8b4 <tmr_init+0xd8>)
    f81e:	0020      	movs	r0, r4
    f820:	4b25      	ldr	r3, [pc, #148]	; (f8b8 <tmr_init+0xdc>)
    f822:	4798      	blx	r3
	tc_register_callback(&module_inst, tc_ovf_callback,
    f824:	2200      	movs	r2, #0
    f826:	4925      	ldr	r1, [pc, #148]	; (f8bc <tmr_init+0xe0>)
    f828:	0020      	movs	r0, r4
    f82a:	4d25      	ldr	r5, [pc, #148]	; (f8c0 <tmr_init+0xe4>)
    f82c:	47a8      	blx	r5
			TC_CALLBACK_OVERFLOW);
	tc_register_callback(&module_inst, tc_cca_callback,
    f82e:	2202      	movs	r2, #2
    f830:	4924      	ldr	r1, [pc, #144]	; (f8c4 <tmr_init+0xe8>)
    f832:	0020      	movs	r0, r4
    f834:	47a8      	blx	r5
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));
    f836:	6820      	ldr	r0, [r4, #0]
    f838:	4b23      	ldr	r3, [pc, #140]	; (f8c8 <tmr_init+0xec>)
    f83a:	4798      	blx	r3
	return (enum system_interrupt_vector)tc_interrupt_vectors[inst_num];
    f83c:	4b23      	ldr	r3, [pc, #140]	; (f8cc <tmr_init+0xf0>)
    f83e:	5c1a      	ldrb	r2, [r3, r0]
    f840:	231f      	movs	r3, #31
    f842:	4013      	ands	r3, r2
    f844:	2101      	movs	r1, #1
    f846:	000a      	movs	r2, r1
    f848:	409a      	lsls	r2, r3
    f84a:	4b21      	ldr	r3, [pc, #132]	; (f8d0 <tmr_init+0xf4>)
    f84c:	601a      	str	r2, [r3, #0]
		module->enable_callback_mask |= (1 << callback_type);
    f84e:	7e63      	ldrb	r3, [r4, #25]
    f850:	2201      	movs	r2, #1
    f852:	4313      	orrs	r3, r2
    f854:	7663      	strb	r3, [r4, #25]
		module->hw->COUNT8.INTENSET.reg = (1 << callback_type);
    f856:	6822      	ldr	r2, [r4, #0]
    f858:	7251      	strb	r1, [r2, #9]
	return (tc_module->SYNCBUSY.reg);
    f85a:	6913      	ldr	r3, [r2, #16]
	while (tc_is_syncing(module_inst)) {
    f85c:	2b00      	cmp	r3, #0
    f85e:	d1fc      	bne.n	f85a <tmr_init+0x7e>
	tc_module->CTRLA.reg |= TC_CTRLA_ENABLE;
    f860:	6813      	ldr	r3, [r2, #0]
    f862:	2102      	movs	r1, #2
    f864:	430b      	orrs	r3, r1
    f866:	6013      	str	r3, [r2, #0]
	} else {
		timer_multiplier = system_gclk_gen_get_hz(0) / (float) DEF_1MHZ;
	}

    #else
	timer_multiplier = system_gclk_gen_get_hz(0) / (float) DEF_1MHZ;	
    f868:	2000      	movs	r0, #0
    f86a:	4b1a      	ldr	r3, [pc, #104]	; (f8d4 <tmr_init+0xf8>)
    f86c:	4798      	blx	r3
    f86e:	4d1a      	ldr	r5, [pc, #104]	; (f8d8 <tmr_init+0xfc>)
    f870:	47a8      	blx	r5
    f872:	491a      	ldr	r1, [pc, #104]	; (f8dc <tmr_init+0x100>)
    f874:	4b1a      	ldr	r3, [pc, #104]	; (f8e0 <tmr_init+0x104>)
    f876:	4798      	blx	r3
    f878:	1c04      	adds	r4, r0, #0
	#endif
	
	if ((timer_multiplier - (uint32_t)timer_multiplier) >= 0.5f)
    f87a:	4b1a      	ldr	r3, [pc, #104]	; (f8e4 <tmr_init+0x108>)
    f87c:	4798      	blx	r3
    f87e:	47a8      	blx	r5
    f880:	1c01      	adds	r1, r0, #0
    f882:	1c20      	adds	r0, r4, #0
    f884:	4b18      	ldr	r3, [pc, #96]	; (f8e8 <tmr_init+0x10c>)
    f886:	4798      	blx	r3
    f888:	21fc      	movs	r1, #252	; 0xfc
    f88a:	0589      	lsls	r1, r1, #22
    f88c:	4b17      	ldr	r3, [pc, #92]	; (f8ec <tmr_init+0x110>)
    f88e:	4798      	blx	r3
    f890:	2800      	cmp	r0, #0
    f892:	d005      	beq.n	f8a0 <tmr_init+0xc4>
	{
		timer_multiplier += 1.0f;
    f894:	21fe      	movs	r1, #254	; 0xfe
    f896:	0589      	lsls	r1, r1, #22
    f898:	1c20      	adds	r0, r4, #0
    f89a:	4b15      	ldr	r3, [pc, #84]	; (f8f0 <tmr_init+0x114>)
    f89c:	4798      	blx	r3
    f89e:	1c04      	adds	r4, r0, #0
	}
	
	return (uint8_t) timer_multiplier;
    f8a0:	1c20      	adds	r0, r4, #0
    f8a2:	4b10      	ldr	r3, [pc, #64]	; (f8e4 <tmr_init+0x108>)
    f8a4:	4798      	blx	r3
    f8a6:	b2c0      	uxtb	r0, r0
}
    f8a8:	bd70      	pop	{r4, r5, r6, pc}
    f8aa:	46c0      	nop			; (mov r8, r8)
    f8ac:	200029dc 	.word	0x200029dc
    f8b0:	20002a14 	.word	0x20002a14
    f8b4:	42002000 	.word	0x42002000
    f8b8:	00007575 	.word	0x00007575
    f8bc:	0000f6e1 	.word	0x0000f6e1
    f8c0:	00007451 	.word	0x00007451
    f8c4:	0000f6d5 	.word	0x0000f6d5
    f8c8:	00007539 	.word	0x00007539
    f8cc:	000201ec 	.word	0x000201ec
    f8d0:	e000e100 	.word	0xe000e100
    f8d4:	000071e9 	.word	0x000071e9
    f8d8:	00017a39 	.word	0x00017a39
    f8dc:	49742400 	.word	0x49742400
    f8e0:	00017001 	.word	0x00017001
    f8e4:	00016ab1 	.word	0x00016ab1
    f8e8:	00017621 	.word	0x00017621
    f8ec:	00016a09 	.word	0x00016a09
    f8f0:	00016cdd 	.word	0x00016cdd

0000f8f4 <nvm_read>:
 * \internal Pointer to the NVM MEMORY region start address
 */
#define NVM_MEMORY        ((volatile uint16_t *)FLASH_ADDR)
status_code_t nvm_read(mem_type_t mem, uint32_t address, void *buffer,
		uint32_t len)
{
    f8f4:	b570      	push	{r4, r5, r6, lr}

status_code_t nvm_sam0_read(mem_type_t mem, uint32_t address,
		uint8_t *const buffer,
		uint32_t len)
{
	switch (mem) {
    f8f6:	2800      	cmp	r0, #0
    f8f8:	d122      	bne.n	f940 <nvm_read+0x4c>
    f8fa:	4814      	ldr	r0, [pc, #80]	; (f94c <nvm_read+0x58>)
    f8fc:	7d04      	ldrb	r4, [r0, #20]
    {
		/* Get a pointer to the module hardware instance */
		Nvmctrl *const nvm_module = NVMCTRL;
		/* Check if the module is busy */
		if (!nvm_is_ready()) {
			return STATUS_BUSY;
    f8fe:	2005      	movs	r0, #5
		if (!nvm_is_ready()) {
    f900:	07e4      	lsls	r4, r4, #31
    f902:	d400      	bmi.n	f906 <nvm_read+0x12>
}
    f904:	bd70      	pop	{r4, r5, r6, pc}
		}

		/* Clear error flags */
		nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
    f906:	2420      	movs	r4, #32
    f908:	34ff      	adds	r4, #255	; 0xff
    f90a:	4810      	ldr	r0, [pc, #64]	; (f94c <nvm_read+0x58>)
    f90c:	8304      	strh	r4, [r0, #24]
		uint32_t page_address = address / 2;

		/* NVM _must_ be accessed as a series of 16-bit words, perform
		 * manual copy
		 * to ensure alignment */
		for (uint16_t i = 0; i < len; i += 2) {
    f90e:	2b00      	cmp	r3, #0
    f910:	d019      	beq.n	f946 <nvm_read+0x52>
    f912:	2001      	movs	r0, #1
    f914:	4381      	bics	r1, r0
    f916:	2000      	movs	r0, #0
    f918:	2500      	movs	r5, #0
			buffer[i] = (data & 0xFF);

			/* If we are not at the end of a read request with an
			 * odd byte count,
			 * store the next byte of data as well */
			if (i < (len - 1)) {
    f91a:	1e5e      	subs	r6, r3, #1
    f91c:	e005      	b.n	f92a <nvm_read+0x36>
		for (uint16_t i = 0; i < len; i += 2) {
    f91e:	3002      	adds	r0, #2
    f920:	b280      	uxth	r0, r0
    f922:	0005      	movs	r5, r0
    f924:	3102      	adds	r1, #2
    f926:	4283      	cmp	r3, r0
    f928:	d908      	bls.n	f93c <nvm_read+0x48>
			uint16_t data = NVM_MEMORY[page_address++];
    f92a:	880c      	ldrh	r4, [r1, #0]
    f92c:	b2a4      	uxth	r4, r4
			buffer[i] = (data & 0xFF);
    f92e:	5554      	strb	r4, [r2, r5]
			if (i < (len - 1)) {
    f930:	42ae      	cmp	r6, r5
    f932:	d9f4      	bls.n	f91e <nvm_read+0x2a>
				buffer[i + 1] = (data >> 8);
    f934:	1955      	adds	r5, r2, r5
    f936:	0a24      	lsrs	r4, r4, #8
    f938:	706c      	strb	r4, [r5, #1]
    f93a:	e7f0      	b.n	f91e <nvm_read+0x2a>

	default:
		return ERR_INVALID_ARG;
	}

	return STATUS_OK;
    f93c:	2000      	movs	r0, #0
    f93e:	e7e1      	b.n	f904 <nvm_read+0x10>
		return ERR_INVALID_ARG;
    f940:	2008      	movs	r0, #8
    f942:	4240      	negs	r0, r0
    f944:	e7de      	b.n	f904 <nvm_read+0x10>
	return STATUS_OK;
    f946:	2000      	movs	r0, #0
    f948:	e7dc      	b.n	f904 <nvm_read+0x10>
    f94a:	46c0      	nop			; (mov r8, r8)
    f94c:	41004000 	.word	0x41004000

0000f950 <nvm_write>:
	return error_code;
}

status_code_t nvm_write(mem_type_t mem, uint32_t address, void *buffer,
		uint32_t len)
{
    f950:	b5f0      	push	{r4, r5, r6, r7, lr}
    f952:	46de      	mov	lr, fp
    f954:	4657      	mov	r7, sl
    f956:	464e      	mov	r6, r9
    f958:	4645      	mov	r5, r8
    f95a:	b5e0      	push	{r5, r6, r7, lr}
    f95c:	b0c5      	sub	sp, #276	; 0x114
	switch (mem) {
    f95e:	2800      	cmp	r0, #0
    f960:	d168      	bne.n	fa34 <nvm_write+0xe4>
	case INT_FLASH:

		if (STATUS_OK != nvm_memcpy(address, buffer, len, true))
    f962:	b29b      	uxth	r3, r3
    f964:	469a      	mov	sl, r3
	volatile uint8_t *dest_add = (uint8_t *)destination_address;
    f966:	4688      	mov	r8, r1
	uint32_t row_start_address
    f968:	23ff      	movs	r3, #255	; 0xff
    f96a:	4399      	bics	r1, r3
    f96c:	9100      	str	r1, [sp, #0]
	while (length) {
    f96e:	4653      	mov	r3, sl
    f970:	2b00      	cmp	r3, #0
    f972:	d06b      	beq.n	fa4c <nvm_write+0xfc>
    f974:	ab04      	add	r3, sp, #16
    f976:	1a5b      	subs	r3, r3, r1
    f978:	9302      	str	r3, [sp, #8]
				error_code = nvm_read_buffer(
    f97a:	4e35      	ldr	r6, [pc, #212]	; (fa50 <nvm_write+0x100>)
				error_code = nvm_erase_row(row_start_address);
    f97c:	4b35      	ldr	r3, [pc, #212]	; (fa54 <nvm_write+0x104>)
    f97e:	469b      	mov	fp, r3
    f980:	9203      	str	r2, [sp, #12]
    f982:	e03a      	b.n	f9fa <nvm_write+0xaa>
				(FLASH_PAGE_SIZE * NVMCTRL_ROW_PAGES); i++) {
    f984:	3301      	adds	r3, #1
		for (i = row_start_address;
    f986:	42bb      	cmp	r3, r7
    f988:	d20e      	bcs.n	f9a8 <nvm_write+0x58>
			if (length && ((uint8_t *)i == dest_add)) {
    f98a:	2a00      	cmp	r2, #0
    f98c:	d0fa      	beq.n	f984 <nvm_write+0x34>
    f98e:	4299      	cmp	r1, r3
    f990:	d1f8      	bne.n	f984 <nvm_write+0x34>
				row_buffer[i - row_start_address] = *src_buf++;
    f992:	9d03      	ldr	r5, [sp, #12]
    f994:	7828      	ldrb	r0, [r5, #0]
    f996:	9c02      	ldr	r4, [sp, #8]
    f998:	54e0      	strb	r0, [r4, r3]
				dest_add++;
    f99a:	3101      	adds	r1, #1
				length--;
    f99c:	3a01      	subs	r2, #1
    f99e:	b292      	uxth	r2, r2
				row_buffer[i - row_start_address] = *src_buf++;
    f9a0:	0028      	movs	r0, r5
    f9a2:	3001      	adds	r0, #1
    f9a4:	9003      	str	r0, [sp, #12]
    f9a6:	e7ed      	b.n	f984 <nvm_write+0x34>
    f9a8:	4692      	mov	sl, r2
    f9aa:	4688      	mov	r8, r1
    f9ac:	9c01      	ldr	r4, [sp, #4]
	cpu_irq_enter_critical();
    f9ae:	4b2a      	ldr	r3, [pc, #168]	; (fa58 <nvm_write+0x108>)
    f9b0:	4798      	blx	r3
				error_code = nvm_erase_row(row_start_address);
    f9b2:	9800      	ldr	r0, [sp, #0]
    f9b4:	47d8      	blx	fp
			} while (error_code == STATUS_BUSY);
    f9b6:	2805      	cmp	r0, #5
    f9b8:	d0fb      	beq.n	f9b2 <nvm_write+0x62>
			if (error_code != STATUS_OK) {
    f9ba:	2800      	cmp	r0, #0
    f9bc:	d13d      	bne.n	fa3a <nvm_write+0xea>
    f9be:	9d00      	ldr	r5, [sp, #0]
				error_code = nvm_write_buffer(
    f9c0:	4f26      	ldr	r7, [pc, #152]	; (fa5c <nvm_write+0x10c>)
    f9c2:	9401      	str	r4, [sp, #4]
    f9c4:	9b00      	ldr	r3, [sp, #0]
    f9c6:	1aec      	subs	r4, r5, r3
    f9c8:	ab04      	add	r3, sp, #16
    f9ca:	469c      	mov	ip, r3
    f9cc:	4464      	add	r4, ip
    f9ce:	2240      	movs	r2, #64	; 0x40
    f9d0:	0021      	movs	r1, r4
    f9d2:	0028      	movs	r0, r5
    f9d4:	47b8      	blx	r7
			} while (error_code == STATUS_BUSY);
    f9d6:	2805      	cmp	r0, #5
    f9d8:	d0f9      	beq.n	f9ce <nvm_write+0x7e>
			if (error_code != STATUS_OK) {
    f9da:	2800      	cmp	r0, #0
    f9dc:	d12d      	bne.n	fa3a <nvm_write+0xea>
    f9de:	3540      	adds	r5, #64	; 0x40
		for (i = 0; i < NVMCTRL_ROW_PAGES; i++) {
    f9e0:	9b01      	ldr	r3, [sp, #4]
    f9e2:	42ab      	cmp	r3, r5
    f9e4:	d1ee      	bne.n	f9c4 <nvm_write+0x74>
	cpu_irq_leave_critical();
    f9e6:	4b1e      	ldr	r3, [pc, #120]	; (fa60 <nvm_write+0x110>)
    f9e8:	4798      	blx	r3
    f9ea:	9b02      	ldr	r3, [sp, #8]
    f9ec:	3b01      	subs	r3, #1
    f9ee:	3bff      	subs	r3, #255	; 0xff
    f9f0:	9302      	str	r3, [sp, #8]
    f9f2:	9500      	str	r5, [sp, #0]
	while (length) {
    f9f4:	4653      	mov	r3, sl
    f9f6:	2b00      	cmp	r3, #0
    f9f8:	d028      	beq.n	fa4c <nvm_write+0xfc>
    f9fa:	9b00      	ldr	r3, [sp, #0]
    f9fc:	1c5f      	adds	r7, r3, #1
    f9fe:	37ff      	adds	r7, #255	; 0xff
{
    fa00:	001c      	movs	r4, r3
    fa02:	46b9      	mov	r9, r7
    fa04:	001f      	movs	r7, r3
    fa06:	1be5      	subs	r5, r4, r7
    fa08:	ab04      	add	r3, sp, #16
    fa0a:	469c      	mov	ip, r3
    fa0c:	4465      	add	r5, ip
				error_code = nvm_read_buffer(
    fa0e:	2240      	movs	r2, #64	; 0x40
    fa10:	0029      	movs	r1, r5
    fa12:	0020      	movs	r0, r4
    fa14:	47b0      	blx	r6
			} while (error_code == STATUS_BUSY);
    fa16:	2805      	cmp	r0, #5
    fa18:	d0f9      	beq.n	fa0e <nvm_write+0xbe>
			if (error_code != STATUS_OK) {
    fa1a:	2800      	cmp	r0, #0
    fa1c:	d10d      	bne.n	fa3a <nvm_write+0xea>
    fa1e:	3440      	adds	r4, #64	; 0x40
		for (i = 0; i < NVMCTRL_ROW_PAGES; i++) {
    fa20:	454c      	cmp	r4, r9
    fa22:	d1f0      	bne.n	fa06 <nvm_write+0xb6>
    fa24:	464f      	mov	r7, r9
		for (i = row_start_address;
    fa26:	9b00      	ldr	r3, [sp, #0]
    fa28:	429f      	cmp	r7, r3
    fa2a:	d9c0      	bls.n	f9ae <nvm_write+0x5e>
    fa2c:	4652      	mov	r2, sl
    fa2e:	4641      	mov	r1, r8
    fa30:	9401      	str	r4, [sp, #4]
    fa32:	e7aa      	b.n	f98a <nvm_write+0x3a>
			return ERR_INVALID_ARG;
		}
		break;

	default:
		return ERR_INVALID_ARG;
    fa34:	2008      	movs	r0, #8
    fa36:	4240      	negs	r0, r0
    fa38:	e001      	b.n	fa3e <nvm_write+0xee>
			return ERR_INVALID_ARG;
    fa3a:	2008      	movs	r0, #8
    fa3c:	4240      	negs	r0, r0
	}

	return STATUS_OK;
}
    fa3e:	b045      	add	sp, #276	; 0x114
    fa40:	bc3c      	pop	{r2, r3, r4, r5}
    fa42:	4690      	mov	r8, r2
    fa44:	4699      	mov	r9, r3
    fa46:	46a2      	mov	sl, r4
    fa48:	46ab      	mov	fp, r5
    fa4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return STATUS_OK;
    fa4c:	2000      	movs	r0, #0
    fa4e:	e7f6      	b.n	fa3e <nvm_write+0xee>
    fa50:	00004dad 	.word	0x00004dad
    fa54:	00004e2d 	.word	0x00004e2d
    fa58:	00004601 	.word	0x00004601
    fa5c:	00004cd5 	.word	0x00004cd5
    fa60:	00004641 	.word	0x00004641

0000fa64 <nvm_init>:

status_code_t nvm_init(mem_type_t mem)
{
    fa64:	b500      	push	{lr}
    fa66:	b083      	sub	sp, #12
	if (INT_FLASH == mem) {
    fa68:	2800      	cmp	r0, #0
    fa6a:	d110      	bne.n	fa8e <nvm_init+0x2a>
	config->sleep_power_mode  = NVM_SLEEP_POWER_MODE_WAKEONACCESS;
    fa6c:	2300      	movs	r3, #0
    fa6e:	466a      	mov	r2, sp
    fa70:	7013      	strb	r3, [r2, #0]
	config->wait_states       = NVMCTRL->CTRLB.bit.RWS;
    fa72:	4a08      	ldr	r2, [pc, #32]	; (fa94 <nvm_init+0x30>)
    fa74:	6852      	ldr	r2, [r2, #4]
	config->disable_cache     = false;
    fa76:	466a      	mov	r2, sp
    fa78:	70d3      	strb	r3, [r2, #3]
	config->cache_readmode    = NVM_CACHE_READMODE_NO_MISS_PENALTY;
    fa7a:	7113      	strb	r3, [r2, #4]
		struct nvm_config config;
		/* Get the default configuration */
		nvm_get_config_defaults(&config);

		/* Enable automatic page write mode */
		config.manual_page_write = false;
    fa7c:	7053      	strb	r3, [r2, #1]

		/* Set wait state to 1 */
		config.wait_states = 2;
    fa7e:	3302      	adds	r3, #2
    fa80:	7093      	strb	r3, [r2, #2]

		/* Set the NVM configuration */
		nvm_set_config(&config);
    fa82:	4668      	mov	r0, sp
    fa84:	4b04      	ldr	r3, [pc, #16]	; (fa98 <nvm_init+0x34>)
    fa86:	4798      	blx	r3

		return STATUS_OK;
    fa88:	2000      	movs	r0, #0
	}

	return ERR_INVALID_ARG;
}
    fa8a:	b003      	add	sp, #12
    fa8c:	bd00      	pop	{pc}
	return ERR_INVALID_ARG;
    fa8e:	2008      	movs	r0, #8
    fa90:	4240      	negs	r0, r0
    fa92:	e7fa      	b.n	fa8a <nvm_init+0x26>
    fa94:	41004000 	.word	0x41004000
    fa98:	00004b6d 	.word	0x00004b6d

0000fa9c <main>:
 * \section preface Preface
 * This is the reference manual for the LORAWAN Parser Application of EU Band
 */

int main(void)
{
    fa9c:	b570      	push	{r4, r5, r6, lr}
	system_init();
    fa9e:	4b30      	ldr	r3, [pc, #192]	; (fb60 <main+0xc4>)
    faa0:	4798      	blx	r3
	delay_init();
    faa2:	4b30      	ldr	r3, [pc, #192]	; (fb64 <main+0xc8>)
    faa4:	4798      	blx	r3
	board_init();
    faa6:	4b30      	ldr	r3, [pc, #192]	; (fb68 <main+0xcc>)
    faa8:	4798      	blx	r3
	INTERRUPT_GlobalInterruptEnable();
    faaa:	2201      	movs	r2, #1
    faac:	4b2f      	ldr	r3, [pc, #188]	; (fb6c <main+0xd0>)
    faae:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
    fab0:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    fab4:	b662      	cpsie	i
	sio2host_init();
    fab6:	4b2e      	ldr	r3, [pc, #184]	; (fb70 <main+0xd4>)
    fab8:	4798      	blx	r3
 *
 * \return An enum value indicating the cause of the last system reset.
 */
static inline enum system_reset_cause system_get_reset_cause(void)
{
	return (enum system_reset_cause)RSTC->RCAUSE.reg;
    faba:	4b2e      	ldr	r3, [pc, #184]	; (fb74 <main+0xd8>)
    fabc:	781c      	ldrb	r4, [r3, #0]
    fabe:	b2e4      	uxtb	r4, r4
	printf("\r\nLast reset cause: ");
    fac0:	482d      	ldr	r0, [pc, #180]	; (fb78 <main+0xdc>)
    fac2:	4b2e      	ldr	r3, [pc, #184]	; (fb7c <main+0xe0>)
    fac4:	4798      	blx	r3
	if(rcause & (1 << 6)) {
    fac6:	0663      	lsls	r3, r4, #25
    fac8:	d432      	bmi.n	fb30 <main+0x94>
	if(rcause & (1 << 5)) {
    faca:	06a3      	lsls	r3, r4, #26
    facc:	d434      	bmi.n	fb38 <main+0x9c>
	if(rcause & (1 << 4)) {
    face:	06e3      	lsls	r3, r4, #27
    fad0:	d436      	bmi.n	fb40 <main+0xa4>
	if(rcause & (1 << 2)) {
    fad2:	0763      	lsls	r3, r4, #29
    fad4:	d438      	bmi.n	fb48 <main+0xac>
	if(rcause & (1 << 1)) {
    fad6:	07a3      	lsls	r3, r4, #30
    fad8:	d43a      	bmi.n	fb50 <main+0xb4>
	if(rcause & (1 << 0)) {
    fada:	07e3      	lsls	r3, r4, #31
    fadc:	d43c      	bmi.n	fb58 <main+0xbc>
#if (_DEBUG_ == 1)
	SYSTEM_AssertSubscribe(assertHandler);
#endif

	/* Configure board button as external interrupt pin */
	configure_extint();	
    fade:	4b28      	ldr	r3, [pc, #160]	; (fb80 <main+0xe4>)
    fae0:	4798      	blx	r3
	/* Register External Interrupt callback */
	configure_eic_callback();
    fae2:	4b28      	ldr	r3, [pc, #160]	; (fb84 <main+0xe8>)
    fae4:	4798      	blx	r3
	printf("LoRaWAN Stack UP\r\n");
    fae6:	4828      	ldr	r0, [pc, #160]	; (fb88 <main+0xec>)
    fae8:	4b28      	ldr	r3, [pc, #160]	; (fb8c <main+0xf0>)
    faea:	4798      	blx	r3
	HAL_RadioInit();
    faec:	4b28      	ldr	r3, [pc, #160]	; (fb90 <main+0xf4>)
    faee:	4798      	blx	r3
	// Initialize AES only (crypto is on-demand)
	SAL_Init(false) ;
    faf0:	2000      	movs	r0, #0
    faf2:	4b28      	ldr	r3, [pc, #160]	; (fb94 <main+0xf8>)
    faf4:	4798      	blx	r3
	// Initialize Timers
	SystemTimerInit();
    faf6:	4b28      	ldr	r3, [pc, #160]	; (fb98 <main+0xfc>)
    faf8:	4798      	blx	r3
#ifdef CONF_PMM_ENABLE
	SleepTimerInit();
    fafa:	4b28      	ldr	r3, [pc, #160]	; (fb9c <main+0x100>)
    fafc:	4798      	blx	r3
#endif /* CONF_PMM_ENABLE */

#if (ENABLE_PDS == 1)	
 	PDS_Init();
    fafe:	4b28      	ldr	r3, [pc, #160]	; (fba0 <main+0x104>)
    fb00:	4798      	blx	r3
#endif	
	Stack_Init();
    fb02:	4b28      	ldr	r3, [pc, #160]	; (fba4 <main+0x108>)
    fb04:	4798      	blx	r3
	Parser_Init();
    fb06:	4b28      	ldr	r3, [pc, #160]	; (fba8 <main+0x10c>)
    fb08:	4798      	blx	r3
    Parser_SetConfiguredJoinParameters(0x01);
    fb0a:	2001      	movs	r0, #1
    fb0c:	4b27      	ldr	r3, [pc, #156]	; (fbac <main+0x110>)
    fb0e:	4798      	blx	r3
    Parser_GetSwVersion(aParserData);
    fb10:	4c27      	ldr	r4, [pc, #156]	; (fbb0 <main+0x114>)
    fb12:	0020      	movs	r0, r4
    fb14:	4b27      	ldr	r3, [pc, #156]	; (fbb4 <main+0x118>)
    fb16:	4798      	blx	r3
    Parser_TxAddReply((char *)aParserData, (uint16_t)strlen((char *)aParserData));
    fb18:	0020      	movs	r0, r4
    fb1a:	4b27      	ldr	r3, [pc, #156]	; (fbb8 <main+0x11c>)
    fb1c:	4798      	blx	r3
    fb1e:	b281      	uxth	r1, r0
    fb20:	0020      	movs	r0, r4
    fb22:	4b26      	ldr	r3, [pc, #152]	; (fbbc <main+0x120>)
    fb24:	4798      	blx	r3
	//port_pin_set_output_level(LED_1_PIN, LED_1_INACTIVE);
	*/
	
    while (1)
    {
		parser_serial_data_handler();
    fb26:	4d26      	ldr	r5, [pc, #152]	; (fbc0 <main+0x124>)
		SYSTEM_RunTasks();
    fb28:	4c26      	ldr	r4, [pc, #152]	; (fbc4 <main+0x128>)
		parser_serial_data_handler();
    fb2a:	47a8      	blx	r5
		SYSTEM_RunTasks();
    fb2c:	47a0      	blx	r4
    fb2e:	e7fc      	b.n	fb2a <main+0x8e>
		printf("System Reset Request\r\n");
    fb30:	4825      	ldr	r0, [pc, #148]	; (fbc8 <main+0x12c>)
    fb32:	4b16      	ldr	r3, [pc, #88]	; (fb8c <main+0xf0>)
    fb34:	4798      	blx	r3
    fb36:	e7c8      	b.n	faca <main+0x2e>
		printf("Watchdog Reset\r\n");
    fb38:	4824      	ldr	r0, [pc, #144]	; (fbcc <main+0x130>)
    fb3a:	4b14      	ldr	r3, [pc, #80]	; (fb8c <main+0xf0>)
    fb3c:	4798      	blx	r3
    fb3e:	e7c6      	b.n	face <main+0x32>
		printf("External Reset\r\n");
    fb40:	4823      	ldr	r0, [pc, #140]	; (fbd0 <main+0x134>)
    fb42:	4b12      	ldr	r3, [pc, #72]	; (fb8c <main+0xf0>)
    fb44:	4798      	blx	r3
    fb46:	e7c4      	b.n	fad2 <main+0x36>
		printf("Brown Out 33 Detector Reset\r\n");
    fb48:	4822      	ldr	r0, [pc, #136]	; (fbd4 <main+0x138>)
    fb4a:	4b10      	ldr	r3, [pc, #64]	; (fb8c <main+0xf0>)
    fb4c:	4798      	blx	r3
    fb4e:	e7c2      	b.n	fad6 <main+0x3a>
		printf("Brown Out 12 Detector Reset\r\n");
    fb50:	4821      	ldr	r0, [pc, #132]	; (fbd8 <main+0x13c>)
    fb52:	4b0e      	ldr	r3, [pc, #56]	; (fb8c <main+0xf0>)
    fb54:	4798      	blx	r3
    fb56:	e7c0      	b.n	fada <main+0x3e>
		printf("Power-On Reset\r\n");
    fb58:	4820      	ldr	r0, [pc, #128]	; (fbdc <main+0x140>)
    fb5a:	4b0c      	ldr	r3, [pc, #48]	; (fb8c <main+0xf0>)
    fb5c:	4798      	blx	r3
    fb5e:	e7be      	b.n	fade <main+0x42>
    fb60:	00007425 	.word	0x00007425
    fb64:	00004569 	.word	0x00004569
    fb68:	00004671 	.word	0x00004671
    fb6c:	20000014 	.word	0x20000014
    fb70:	00007b3d 	.word	0x00007b3d
    fb74:	40000800 	.word	0x40000800
    fb78:	000201f4 	.word	0x000201f4
    fb7c:	00019f7d 	.word	0x00019f7d
    fb80:	00003f61 	.word	0x00003f61
    fb84:	00003f91 	.word	0x00003f91
    fb88:	00020294 	.word	0x00020294
    fb8c:	0001a041 	.word	0x0001a041
    fb90:	00007ee5 	.word	0x00007ee5
    fb94:	0000dc09 	.word	0x0000dc09
    fb98:	0000ed8d 	.word	0x0000ed8d
    fb9c:	000082d1 	.word	0x000082d1
    fba0:	0000e0e1 	.word	0x0000e0e1
    fba4:	0000f441 	.word	0x0000f441
    fba8:	00001bc9 	.word	0x00001bc9
    fbac:	000022b9 	.word	0x000022b9
    fbb0:	2000116c 	.word	0x2000116c
    fbb4:	00001f09 	.word	0x00001f09
    fbb8:	0001a2fd 	.word	0x0001a2fd
    fbbc:	00004001 	.word	0x00004001
    fbc0:	00001ba5 	.word	0x00001ba5
    fbc4:	0000f451 	.word	0x0000f451
    fbc8:	0002020c 	.word	0x0002020c
    fbcc:	00020224 	.word	0x00020224
    fbd0:	00020234 	.word	0x00020234
    fbd4:	00020244 	.word	0x00020244
    fbd8:	00020264 	.word	0x00020264
    fbdc:	00020284 	.word	0x00020284

0000fbe0 <APP_TaskHandler>:
    }
}

SYSTEM_TaskStatus_t APP_TaskHandler(void)
{
    fbe0:	b510      	push	{r4, lr}
	Parser_Main();
    fbe2:	4b02      	ldr	r3, [pc, #8]	; (fbec <APP_TaskHandler+0xc>)
    fbe4:	4798      	blx	r3
	return SYSTEM_TASK_SUCCESS;
}
    fbe6:	2000      	movs	r0, #0
    fbe8:	bd10      	pop	{r4, pc}
    fbea:	46c0      	nop			; (mov r8, r8)
    fbec:	00001c05 	.word	0x00001c05

0000fbf0 <common_tc_read_count>:
    fbf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    fbf2:	4b0d      	ldr	r3, [pc, #52]	; (fc28 <common_tc_read_count+0x38>)
    fbf4:	4798      	blx	r3
    fbf6:	4b0d      	ldr	r3, [pc, #52]	; (fc2c <common_tc_read_count+0x3c>)
    fbf8:	781b      	ldrb	r3, [r3, #0]
    fbfa:	2b00      	cmp	r3, #0
    fbfc:	d00e      	beq.n	fc1c <common_tc_read_count+0x2c>
    fbfe:	4b0c      	ldr	r3, [pc, #48]	; (fc30 <common_tc_read_count+0x40>)
    fc00:	781d      	ldrb	r5, [r3, #0]
    fc02:	4b0a      	ldr	r3, [pc, #40]	; (fc2c <common_tc_read_count+0x3c>)
    fc04:	781f      	ldrb	r7, [r3, #0]
    fc06:	4c0b      	ldr	r4, [pc, #44]	; (fc34 <common_tc_read_count+0x44>)
    fc08:	1c29      	adds	r1, r5, #0
    fc0a:	47a0      	blx	r4
    fc0c:	1c06      	adds	r6, r0, #0
    fc0e:	480a      	ldr	r0, [pc, #40]	; (fc38 <common_tc_read_count+0x48>)
    fc10:	1c29      	adds	r1, r5, #0
    fc12:	47a0      	blx	r4
    fc14:	4378      	muls	r0, r7
    fc16:	1830      	adds	r0, r6, r0
    fc18:	b280      	uxth	r0, r0
    fc1a:	e004      	b.n	fc26 <common_tc_read_count+0x36>
    fc1c:	4b04      	ldr	r3, [pc, #16]	; (fc30 <common_tc_read_count+0x40>)
    fc1e:	7819      	ldrb	r1, [r3, #0]
    fc20:	4b04      	ldr	r3, [pc, #16]	; (fc34 <common_tc_read_count+0x44>)
    fc22:	4798      	blx	r3
    fc24:	b280      	uxth	r0, r0
    fc26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    fc28:	0000f6ed 	.word	0x0000f6ed
    fc2c:	200010fc 	.word	0x200010fc
    fc30:	20002a30 	.word	0x20002a30
    fc34:	00016755 	.word	0x00016755
    fc38:	0000ffff 	.word	0x0000ffff

0000fc3c <common_tc_compare_stop>:
    fc3c:	b508      	push	{r3, lr}
    fc3e:	4b05      	ldr	r3, [pc, #20]	; (fc54 <common_tc_compare_stop+0x18>)
    fc40:	4798      	blx	r3
    fc42:	4b05      	ldr	r3, [pc, #20]	; (fc58 <common_tc_compare_stop+0x1c>)
    fc44:	4798      	blx	r3
    fc46:	4b05      	ldr	r3, [pc, #20]	; (fc5c <common_tc_compare_stop+0x20>)
    fc48:	2200      	movs	r2, #0
    fc4a:	605a      	str	r2, [r3, #4]
    fc4c:	811a      	strh	r2, [r3, #8]
    fc4e:	4b04      	ldr	r3, [pc, #16]	; (fc60 <common_tc_compare_stop+0x24>)
    fc50:	4798      	blx	r3
    fc52:	bd08      	pop	{r3, pc}
    fc54:	0000f701 	.word	0x0000f701
    fc58:	0000f7a1 	.word	0x0000f7a1
    fc5c:	200010fc 	.word	0x200010fc
    fc60:	0000f7c5 	.word	0x0000f7c5

0000fc64 <common_tc_overflow_stop>:
    fc64:	b508      	push	{r3, lr}
    fc66:	4b03      	ldr	r3, [pc, #12]	; (fc74 <common_tc_overflow_stop+0x10>)
    fc68:	4798      	blx	r3
    fc6a:	2200      	movs	r2, #0
    fc6c:	4b02      	ldr	r3, [pc, #8]	; (fc78 <common_tc_overflow_stop+0x14>)
    fc6e:	701a      	strb	r2, [r3, #0]
    fc70:	bd08      	pop	{r3, pc}
    fc72:	46c0      	nop			; (mov r8, r8)
    fc74:	0000f755 	.word	0x0000f755
    fc78:	200010fc 	.word	0x200010fc

0000fc7c <common_tc_stop>:
    fc7c:	b508      	push	{r3, lr}
    fc7e:	4b03      	ldr	r3, [pc, #12]	; (fc8c <common_tc_stop+0x10>)
    fc80:	4798      	blx	r3
    fc82:	4b03      	ldr	r3, [pc, #12]	; (fc90 <common_tc_stop+0x14>)
    fc84:	4798      	blx	r3
    fc86:	4b03      	ldr	r3, [pc, #12]	; (fc94 <common_tc_stop+0x18>)
    fc88:	4798      	blx	r3
    fc8a:	bd08      	pop	{r3, pc}
    fc8c:	0000fc3d 	.word	0x0000fc3d
    fc90:	0000fc65 	.word	0x0000fc65
    fc94:	0000f769 	.word	0x0000f769

0000fc98 <common_tc_delay>:
    fc98:	b510      	push	{r4, lr}
    fc9a:	1c04      	adds	r4, r0, #0
    fc9c:	4b13      	ldr	r3, [pc, #76]	; (fcec <common_tc_delay+0x54>)
    fc9e:	4798      	blx	r3
    fca0:	4b13      	ldr	r3, [pc, #76]	; (fcf0 <common_tc_delay+0x58>)
    fca2:	781a      	ldrb	r2, [r3, #0]
    fca4:	4362      	muls	r2, r4
    fca6:	1881      	adds	r1, r0, r2
    fca8:	4b12      	ldr	r3, [pc, #72]	; (fcf4 <common_tc_delay+0x5c>)
    fcaa:	6059      	str	r1, [r3, #4]
    fcac:	6859      	ldr	r1, [r3, #4]
    fcae:	0c09      	lsrs	r1, r1, #16
    fcb0:	6059      	str	r1, [r3, #4]
    fcb2:	685b      	ldr	r3, [r3, #4]
    fcb4:	2b00      	cmp	r3, #0
    fcb6:	d007      	beq.n	fcc8 <common_tc_delay+0x30>
    fcb8:	4b0e      	ldr	r3, [pc, #56]	; (fcf4 <common_tc_delay+0x5c>)
    fcba:	6859      	ldr	r1, [r3, #4]
    fcbc:	3201      	adds	r2, #1
    fcbe:	1880      	adds	r0, r0, r2
    fcc0:	8118      	strh	r0, [r3, #8]
    fcc2:	4b0d      	ldr	r3, [pc, #52]	; (fcf8 <common_tc_delay+0x60>)
    fcc4:	4798      	blx	r3
    fcc6:	e004      	b.n	fcd2 <common_tc_delay+0x3a>
    fcc8:	1882      	adds	r2, r0, r2
    fcca:	4b0a      	ldr	r3, [pc, #40]	; (fcf4 <common_tc_delay+0x5c>)
    fccc:	811a      	strh	r2, [r3, #8]
    fcce:	4b0b      	ldr	r3, [pc, #44]	; (fcfc <common_tc_delay+0x64>)
    fcd0:	4798      	blx	r3
    fcd2:	4b08      	ldr	r3, [pc, #32]	; (fcf4 <common_tc_delay+0x5c>)
    fcd4:	891b      	ldrh	r3, [r3, #8]
    fcd6:	2b63      	cmp	r3, #99	; 0x63
    fcd8:	d802      	bhi.n	fce0 <common_tc_delay+0x48>
    fcda:	3364      	adds	r3, #100	; 0x64
    fcdc:	4a05      	ldr	r2, [pc, #20]	; (fcf4 <common_tc_delay+0x5c>)
    fcde:	8113      	strh	r3, [r2, #8]
    fce0:	4b04      	ldr	r3, [pc, #16]	; (fcf4 <common_tc_delay+0x5c>)
    fce2:	8918      	ldrh	r0, [r3, #8]
    fce4:	4b06      	ldr	r3, [pc, #24]	; (fd00 <common_tc_delay+0x68>)
    fce6:	4798      	blx	r3
    fce8:	bd10      	pop	{r4, pc}
    fcea:	46c0      	nop			; (mov r8, r8)
    fcec:	0000f6ed 	.word	0x0000f6ed
    fcf0:	20002a30 	.word	0x20002a30
    fcf4:	200010fc 	.word	0x200010fc
    fcf8:	0000f701 	.word	0x0000f701
    fcfc:	0000f715 	.word	0x0000f715
    fd00:	0000f789 	.word	0x0000f789

0000fd04 <common_tc_init>:
    fd04:	b508      	push	{r3, lr}
    fd06:	2200      	movs	r2, #0
    fd08:	4b03      	ldr	r3, [pc, #12]	; (fd18 <common_tc_init+0x14>)
    fd0a:	701a      	strb	r2, [r3, #0]
    fd0c:	4b03      	ldr	r3, [pc, #12]	; (fd1c <common_tc_init+0x18>)
    fd0e:	4798      	blx	r3
    fd10:	4b03      	ldr	r3, [pc, #12]	; (fd20 <common_tc_init+0x1c>)
    fd12:	7018      	strb	r0, [r3, #0]
    fd14:	bd08      	pop	{r3, pc}
    fd16:	46c0      	nop			; (mov r8, r8)
    fd18:	200010fc 	.word	0x200010fc
    fd1c:	0000f7dd 	.word	0x0000f7dd
    fd20:	20002a30 	.word	0x20002a30

0000fd24 <tmr_ovf_callback>:
    fd24:	b508      	push	{r3, lr}
    fd26:	4b0e      	ldr	r3, [pc, #56]	; (fd60 <tmr_ovf_callback+0x3c>)
    fd28:	685b      	ldr	r3, [r3, #4]
    fd2a:	2b00      	cmp	r3, #0
    fd2c:	d007      	beq.n	fd3e <tmr_ovf_callback+0x1a>
    fd2e:	4a0c      	ldr	r2, [pc, #48]	; (fd60 <tmr_ovf_callback+0x3c>)
    fd30:	6853      	ldr	r3, [r2, #4]
    fd32:	3b01      	subs	r3, #1
    fd34:	6053      	str	r3, [r2, #4]
    fd36:	2b00      	cmp	r3, #0
    fd38:	d101      	bne.n	fd3e <tmr_ovf_callback+0x1a>
    fd3a:	4b0a      	ldr	r3, [pc, #40]	; (fd64 <tmr_ovf_callback+0x40>)
    fd3c:	4798      	blx	r3
    fd3e:	4a08      	ldr	r2, [pc, #32]	; (fd60 <tmr_ovf_callback+0x3c>)
    fd40:	7813      	ldrb	r3, [r2, #0]
    fd42:	3301      	adds	r3, #1
    fd44:	b2db      	uxtb	r3, r3
    fd46:	7013      	strb	r3, [r2, #0]
    fd48:	4a07      	ldr	r2, [pc, #28]	; (fd68 <tmr_ovf_callback+0x44>)
    fd4a:	7812      	ldrb	r2, [r2, #0]
    fd4c:	429a      	cmp	r2, r3
    fd4e:	d806      	bhi.n	fd5e <tmr_ovf_callback+0x3a>
    fd50:	4b03      	ldr	r3, [pc, #12]	; (fd60 <tmr_ovf_callback+0x3c>)
    fd52:	2200      	movs	r2, #0
    fd54:	701a      	strb	r2, [r3, #0]
    fd56:	68db      	ldr	r3, [r3, #12]
    fd58:	2b00      	cmp	r3, #0
    fd5a:	d000      	beq.n	fd5e <tmr_ovf_callback+0x3a>
    fd5c:	4798      	blx	r3
    fd5e:	bd08      	pop	{r3, pc}
    fd60:	200010fc 	.word	0x200010fc
    fd64:	0000f715 	.word	0x0000f715
    fd68:	20002a30 	.word	0x20002a30

0000fd6c <tmr_cca_callback>:
    fd6c:	b508      	push	{r3, lr}
    fd6e:	4b04      	ldr	r3, [pc, #16]	; (fd80 <tmr_cca_callback+0x14>)
    fd70:	4798      	blx	r3
    fd72:	4b04      	ldr	r3, [pc, #16]	; (fd84 <tmr_cca_callback+0x18>)
    fd74:	691b      	ldr	r3, [r3, #16]
    fd76:	2b00      	cmp	r3, #0
    fd78:	d000      	beq.n	fd7c <tmr_cca_callback+0x10>
    fd7a:	4798      	blx	r3
    fd7c:	bd08      	pop	{r3, pc}
    fd7e:	46c0      	nop			; (mov r8, r8)
    fd80:	0000f701 	.word	0x0000f701
    fd84:	200010fc 	.word	0x200010fc

0000fd88 <set_common_tc_overflow_callback>:
    fd88:	4b01      	ldr	r3, [pc, #4]	; (fd90 <set_common_tc_overflow_callback+0x8>)
    fd8a:	60d8      	str	r0, [r3, #12]
    fd8c:	4770      	bx	lr
    fd8e:	46c0      	nop			; (mov r8, r8)
    fd90:	200010fc 	.word	0x200010fc

0000fd94 <set_common_tc_expiry_callback>:
    fd94:	4b01      	ldr	r3, [pc, #4]	; (fd9c <set_common_tc_expiry_callback+0x8>)
    fd96:	6118      	str	r0, [r3, #16]
    fd98:	4770      	bx	lr
    fd9a:	46c0      	nop			; (mov r8, r8)
    fd9c:	200010fc 	.word	0x200010fc

0000fda0 <MacClearCommands>:
    fda0:	490e      	ldr	r1, [pc, #56]	; (fddc <MacClearCommands+0x3c>)
    fda2:	b570      	push	{r4, r5, r6, lr}
    fda4:	000b      	movs	r3, r1
    fda6:	33d8      	adds	r3, #216	; 0xd8
    fda8:	7818      	ldrb	r0, [r3, #0]
    fdaa:	2303      	movs	r3, #3
    fdac:	25a4      	movs	r5, #164	; 0xa4
    fdae:	4343      	muls	r3, r0
    fdb0:	2401      	movs	r4, #1
    fdb2:	20ff      	movs	r0, #255	; 0xff
    fdb4:	3391      	adds	r3, #145	; 0x91
    fdb6:	4a0a      	ldr	r2, [pc, #40]	; (fde0 <MacClearCommands+0x40>)
    fdb8:	185b      	adds	r3, r3, r1
    fdba:	00ed      	lsls	r5, r5, #3
    fdbc:	429a      	cmp	r2, r3
    fdbe:	d100      	bne.n	fdc2 <MacClearCommands+0x22>
    fdc0:	bd70      	pop	{r4, r5, r6, pc}
    fdc2:	7811      	ldrb	r1, [r2, #0]
    fdc4:	29ff      	cmp	r1, #255	; 0xff
    fdc6:	d006      	beq.n	fdd6 <MacClearCommands+0x36>
    fdc8:	290a      	cmp	r1, #10
    fdca:	d803      	bhi.n	fdd4 <MacClearCommands+0x34>
    fdcc:	0026      	movs	r6, r4
    fdce:	408e      	lsls	r6, r1
    fdd0:	422e      	tst	r6, r5
    fdd2:	d100      	bne.n	fdd6 <MacClearCommands+0x36>
    fdd4:	7010      	strb	r0, [r2, #0]
    fdd6:	3203      	adds	r2, #3
    fdd8:	e7f0      	b.n	fdbc <MacClearCommands+0x1c>
    fdda:	46c0      	nop			; (mov r8, r8)
    fddc:	20002b5c 	.word	0x20002b5c
    fde0:	20002bed 	.word	0x20002bed

0000fde4 <CountfOptsLength>:
    fde4:	2200      	movs	r2, #0
    fde6:	490d      	ldr	r1, [pc, #52]	; (fe1c <CountfOptsLength+0x38>)
    fde8:	b570      	push	{r4, r5, r6, lr}
    fdea:	000b      	movs	r3, r1
    fdec:	0010      	movs	r0, r2
    fdee:	2503      	movs	r5, #3
    fdf0:	33d8      	adds	r3, #216	; 0xd8
    fdf2:	781c      	ldrb	r4, [r3, #0]
    fdf4:	4e0a      	ldr	r6, [pc, #40]	; (fe20 <CountfOptsLength+0x3c>)
    fdf6:	b2d3      	uxtb	r3, r2
    fdf8:	429c      	cmp	r4, r3
    fdfa:	d800      	bhi.n	fdfe <CountfOptsLength+0x1a>
    fdfc:	bd70      	pop	{r4, r5, r6, pc}
    fdfe:	002b      	movs	r3, r5
    fe00:	4353      	muls	r3, r2
    fe02:	3391      	adds	r3, #145	; 0x91
    fe04:	5ccb      	ldrb	r3, [r1, r3]
    fe06:	2bff      	cmp	r3, #255	; 0xff
    fe08:	d006      	beq.n	fe18 <CountfOptsLength+0x34>
    fe0a:	18f3      	adds	r3, r6, r3
    fe0c:	3b02      	subs	r3, #2
    fe0e:	781b      	ldrb	r3, [r3, #0]
    fe10:	18c3      	adds	r3, r0, r3
    fe12:	2b0f      	cmp	r3, #15
    fe14:	dcf2      	bgt.n	fdfc <CountfOptsLength+0x18>
    fe16:	b2d8      	uxtb	r0, r3
    fe18:	3201      	adds	r2, #1
    fe1a:	e7ec      	b.n	fdf6 <CountfOptsLength+0x12>
    fe1c:	20002b5c 	.word	0x20002b5c
    fe20:	000202c3 	.word	0x000202c3

0000fe24 <StopAllSoftwareTimers>:
    fe24:	b570      	push	{r4, r5, r6, lr}
    fe26:	4c17      	ldr	r4, [pc, #92]	; (fe84 <StopAllSoftwareTimers+0x60>)
    fe28:	4d17      	ldr	r5, [pc, #92]	; (fe88 <StopAllSoftwareTimers+0x64>)
    fe2a:	0023      	movs	r3, r4
    fe2c:	33e2      	adds	r3, #226	; 0xe2
    fe2e:	7818      	ldrb	r0, [r3, #0]
    fe30:	47a8      	blx	r5
    fe32:	0023      	movs	r3, r4
    fe34:	33e3      	adds	r3, #227	; 0xe3
    fe36:	7818      	ldrb	r0, [r3, #0]
    fe38:	47a8      	blx	r5
    fe3a:	0023      	movs	r3, r4
    fe3c:	33e7      	adds	r3, #231	; 0xe7
    fe3e:	7818      	ldrb	r0, [r3, #0]
    fe40:	47a8      	blx	r5
    fe42:	0023      	movs	r3, r4
    fe44:	33e4      	adds	r3, #228	; 0xe4
    fe46:	7818      	ldrb	r0, [r3, #0]
    fe48:	47a8      	blx	r5
    fe4a:	0023      	movs	r3, r4
    fe4c:	33e5      	adds	r3, #229	; 0xe5
    fe4e:	7818      	ldrb	r0, [r3, #0]
    fe50:	47a8      	blx	r5
    fe52:	0023      	movs	r3, r4
    fe54:	33e8      	adds	r3, #232	; 0xe8
    fe56:	7818      	ldrb	r0, [r3, #0]
    fe58:	47a8      	blx	r5
    fe5a:	0023      	movs	r3, r4
    fe5c:	33e6      	adds	r3, #230	; 0xe6
    fe5e:	7818      	ldrb	r0, [r3, #0]
    fe60:	47a8      	blx	r5
    fe62:	0023      	movs	r3, r4
    fe64:	33e9      	adds	r3, #233	; 0xe9
    fe66:	7818      	ldrb	r0, [r3, #0]
    fe68:	47a8      	blx	r5
    fe6a:	0023      	movs	r3, r4
    fe6c:	33f2      	adds	r3, #242	; 0xf2
    fe6e:	7818      	ldrb	r0, [r3, #0]
    fe70:	47a8      	blx	r5
    fe72:	0023      	movs	r3, r4
    fe74:	33f3      	adds	r3, #243	; 0xf3
    fe76:	7818      	ldrb	r0, [r3, #0]
    fe78:	34ff      	adds	r4, #255	; 0xff
    fe7a:	47a8      	blx	r5
    fe7c:	7f60      	ldrb	r0, [r4, #29]
    fe7e:	47a8      	blx	r5
    fe80:	bd70      	pop	{r4, r5, r6, pc}
    fe82:	46c0      	nop			; (mov r8, r8)
    fe84:	20002b5c 	.word	0x20002b5c
    fe88:	0000f141 	.word	0x0000f141

0000fe8c <LorawanGetMaxPayloadSize>:
    fe8c:	b513      	push	{r0, r1, r4, lr}
    fe8e:	466b      	mov	r3, sp
    fe90:	1ddc      	adds	r4, r3, #7
    fe92:	2300      	movs	r3, #0
    fe94:	0022      	movs	r2, r4
    fe96:	7023      	strb	r3, [r4, #0]
    fe98:	4902      	ldr	r1, [pc, #8]	; (fea4 <LorawanGetMaxPayloadSize+0x18>)
    fe9a:	4b03      	ldr	r3, [pc, #12]	; (fea8 <LorawanGetMaxPayloadSize+0x1c>)
    fe9c:	2005      	movs	r0, #5
    fe9e:	4798      	blx	r3
    fea0:	7820      	ldrb	r0, [r4, #0]
    fea2:	bd16      	pop	{r1, r2, r4, pc}
    fea4:	20002c3b 	.word	0x20002c3b
    fea8:	0000d91d 	.word	0x0000d91d

0000feac <UpdateReceiveDelays>:
    feac:	23fa      	movs	r3, #250	; 0xfa
    feae:	b570      	push	{r4, r5, r6, lr}
    feb0:	009b      	lsls	r3, r3, #2
    feb2:	4c0b      	ldr	r4, [pc, #44]	; (fee0 <UpdateReceiveDelays+0x34>)
    feb4:	2800      	cmp	r0, #0
    feb6:	d000      	beq.n	feba <UpdateReceiveDelays+0xe>
    feb8:	4343      	muls	r3, r0
    feba:	0022      	movs	r2, r4
    febc:	4d09      	ldr	r5, [pc, #36]	; (fee4 <UpdateReceiveDelays+0x38>)
    febe:	32c8      	adds	r2, #200	; 0xc8
    fec0:	210c      	movs	r1, #12
    fec2:	2000      	movs	r0, #0
    fec4:	8013      	strh	r3, [r2, #0]
    fec6:	47a8      	blx	r5
    fec8:	0023      	movs	r3, r4
    feca:	22fa      	movs	r2, #250	; 0xfa
    fecc:	33c8      	adds	r3, #200	; 0xc8
    fece:	881b      	ldrh	r3, [r3, #0]
    fed0:	0092      	lsls	r2, r2, #2
    fed2:	189b      	adds	r3, r3, r2
    fed4:	34ca      	adds	r4, #202	; 0xca
    fed6:	210d      	movs	r1, #13
    fed8:	2000      	movs	r0, #0
    feda:	8023      	strh	r3, [r4, #0]
    fedc:	47a8      	blx	r5
    fede:	bd70      	pop	{r4, r5, r6, pc}
    fee0:	20002b5c 	.word	0x20002b5c
    fee4:	0000e0f9 	.word	0x0000e0f9

0000fee8 <IncludeMacCommandsResponse>:
    fee8:	b5f0      	push	{r4, r5, r6, r7, lr}
    feea:	0005      	movs	r5, r0
    feec:	2600      	movs	r6, #0
    feee:	b087      	sub	sp, #28
    fef0:	880c      	ldrh	r4, [r1, #0]
    fef2:	9101      	str	r1, [sp, #4]
    fef4:	9203      	str	r2, [sp, #12]
    fef6:	4f77      	ldr	r7, [pc, #476]	; (100d4 <IncludeMacCommandsResponse+0x1ec>)
    fef8:	003b      	movs	r3, r7
    fefa:	33d8      	adds	r3, #216	; 0xd8
    fefc:	781b      	ldrb	r3, [r3, #0]
    fefe:	42b3      	cmp	r3, r6
    ff00:	d913      	bls.n	ff2a <IncludeMacCommandsResponse+0x42>
    ff02:	9b03      	ldr	r3, [sp, #12]
    ff04:	2b00      	cmp	r3, #0
    ff06:	d019      	beq.n	ff3c <IncludeMacCommandsResponse+0x54>
    ff08:	2303      	movs	r3, #3
    ff0a:	4373      	muls	r3, r6
    ff0c:	18fb      	adds	r3, r7, r3
    ff0e:	3391      	adds	r3, #145	; 0x91
    ff10:	7819      	ldrb	r1, [r3, #0]
    ff12:	29ff      	cmp	r1, #255	; 0xff
    ff14:	d012      	beq.n	ff3c <IncludeMacCommandsResponse+0x54>
    ff16:	9b01      	ldr	r3, [sp, #4]
    ff18:	881a      	ldrh	r2, [r3, #0]
    ff1a:	4b6f      	ldr	r3, [pc, #444]	; (100d8 <IncludeMacCommandsResponse+0x1f0>)
    ff1c:	1aa2      	subs	r2, r4, r2
    ff1e:	185b      	adds	r3, r3, r1
    ff20:	3b02      	subs	r3, #2
    ff22:	781b      	ldrb	r3, [r3, #0]
    ff24:	18d3      	adds	r3, r2, r3
    ff26:	2b0f      	cmp	r3, #15
    ff28:	dd08      	ble.n	ff3c <IncludeMacCommandsResponse+0x54>
    ff2a:	2207      	movs	r2, #7
    ff2c:	2100      	movs	r1, #0
    ff2e:	4b6b      	ldr	r3, [pc, #428]	; (100dc <IncludeMacCommandsResponse+0x1f4>)
    ff30:	486b      	ldr	r0, [pc, #428]	; (100e0 <IncludeMacCommandsResponse+0x1f8>)
    ff32:	4798      	blx	r3
    ff34:	9b01      	ldr	r3, [sp, #4]
    ff36:	801c      	strh	r4, [r3, #0]
    ff38:	b007      	add	sp, #28
    ff3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ff3c:	2303      	movs	r3, #3
    ff3e:	4373      	muls	r3, r6
    ff40:	18fb      	adds	r3, r7, r3
    ff42:	3391      	adds	r3, #145	; 0x91
    ff44:	781b      	ldrb	r3, [r3, #0]
    ff46:	1e98      	subs	r0, r3, #2
    ff48:	280b      	cmp	r0, #11
    ff4a:	d862      	bhi.n	10012 <IncludeMacCommandsResponse+0x12a>
    ff4c:	f006 fb64 	bl	16618 <__gnu_thumb1_case_uqi>
    ff50:	27a20698 	.word	0x27a20698
    ff54:	7da26748 	.word	0x7da26748
    ff58:	a6616182 	.word	0xa6616182
    ff5c:	2303      	movs	r3, #3
    ff5e:	2200      	movs	r2, #0
    ff60:	552b      	strb	r3, [r5, r4]
    ff62:	1c63      	adds	r3, r4, #1
    ff64:	b29b      	uxth	r3, r3
    ff66:	18eb      	adds	r3, r5, r3
    ff68:	4f5a      	ldr	r7, [pc, #360]	; (100d4 <IncludeMacCommandsResponse+0x1ec>)
    ff6a:	485e      	ldr	r0, [pc, #376]	; (100e4 <IncludeMacCommandsResponse+0x1fc>)
    ff6c:	701a      	strb	r2, [r3, #0]
    ff6e:	5c39      	ldrb	r1, [r7, r0]
    ff70:	3201      	adds	r2, #1
    ff72:	4011      	ands	r1, r2
    ff74:	466a      	mov	r2, sp
    ff76:	9102      	str	r1, [sp, #8]
    ff78:	7a12      	ldrb	r2, [r2, #8]
    ff7a:	701a      	strb	r2, [r3, #0]
    ff7c:	5c3a      	ldrb	r2, [r7, r0]
    ff7e:	4694      	mov	ip, r2
    ff80:	2202      	movs	r2, #2
    ff82:	4661      	mov	r1, ip
    ff84:	4211      	tst	r1, r2
    ff86:	d002      	beq.n	ff8e <IncludeMacCommandsResponse+0xa6>
    ff88:	9902      	ldr	r1, [sp, #8]
    ff8a:	430a      	orrs	r2, r1
    ff8c:	701a      	strb	r2, [r3, #0]
    ff8e:	2204      	movs	r2, #4
    ff90:	5c39      	ldrb	r1, [r7, r0]
    ff92:	4211      	tst	r1, r2
    ff94:	d071      	beq.n	1007a <IncludeMacCommandsResponse+0x192>
    ff96:	7819      	ldrb	r1, [r3, #0]
    ff98:	430a      	orrs	r2, r1
    ff9a:	701a      	strb	r2, [r3, #0]
    ff9c:	e06d      	b.n	1007a <IncludeMacCommandsResponse+0x192>
    ff9e:	2305      	movs	r3, #5
    ffa0:	2103      	movs	r1, #3
    ffa2:	2200      	movs	r2, #0
    ffa4:	552b      	strb	r3, [r5, r4]
    ffa6:	1c63      	adds	r3, r4, #1
    ffa8:	b29b      	uxth	r3, r3
    ffaa:	4371      	muls	r1, r6
    ffac:	18eb      	adds	r3, r5, r3
    ffae:	701a      	strb	r2, [r3, #0]
    ffb0:	4a48      	ldr	r2, [pc, #288]	; (100d4 <IncludeMacCommandsResponse+0x1ec>)
    ffb2:	1851      	adds	r1, r2, r1
    ffb4:	3190      	adds	r1, #144	; 0x90
    ffb6:	7888      	ldrb	r0, [r1, #2]
    ffb8:	0700      	lsls	r0, r0, #28
    ffba:	0fc0      	lsrs	r0, r0, #31
    ffbc:	7018      	strb	r0, [r3, #0]
    ffbe:	7889      	ldrb	r1, [r1, #2]
    ffc0:	b2c7      	uxtb	r7, r0
    ffc2:	06c9      	lsls	r1, r1, #27
    ffc4:	d502      	bpl.n	ffcc <IncludeMacCommandsResponse+0xe4>
    ffc6:	2102      	movs	r1, #2
    ffc8:	4339      	orrs	r1, r7
    ffca:	7019      	strb	r1, [r3, #0]
    ffcc:	2103      	movs	r1, #3
    ffce:	4371      	muls	r1, r6
    ffd0:	1852      	adds	r2, r2, r1
    ffd2:	3290      	adds	r2, #144	; 0x90
    ffd4:	7892      	ldrb	r2, [r2, #2]
    ffd6:	0692      	lsls	r2, r2, #26
    ffd8:	d54f      	bpl.n	1007a <IncludeMacCommandsResponse+0x192>
    ffda:	7819      	ldrb	r1, [r3, #0]
    ffdc:	2204      	movs	r2, #4
    ffde:	e7db      	b.n	ff98 <IncludeMacCommandsResponse+0xb0>
    ffe0:	a904      	add	r1, sp, #16
    ffe2:	4b41      	ldr	r3, [pc, #260]	; (100e8 <IncludeMacCommandsResponse+0x200>)
    ffe4:	200e      	movs	r0, #14
    ffe6:	4798      	blx	r3
    ffe8:	2306      	movs	r3, #6
    ffea:	4a3a      	ldr	r2, [pc, #232]	; (100d4 <IncludeMacCommandsResponse+0x1ec>)
    ffec:	552b      	strb	r3, [r5, r4]
    ffee:	32e0      	adds	r2, #224	; 0xe0
    fff0:	7811      	ldrb	r1, [r2, #0]
    fff2:	1c62      	adds	r2, r4, #1
    fff4:	b292      	uxth	r2, r2
    fff6:	54a9      	strb	r1, [r5, r2]
    fff8:	aa04      	add	r2, sp, #16
    fffa:	7812      	ldrb	r2, [r2, #0]
    fffc:	1ca3      	adds	r3, r4, #2
    fffe:	0011      	movs	r1, r2
   10000:	3120      	adds	r1, #32
   10002:	3403      	adds	r4, #3
   10004:	b2c9      	uxtb	r1, r1
   10006:	b29b      	uxth	r3, r3
   10008:	b2a4      	uxth	r4, r4
   1000a:	293f      	cmp	r1, #63	; 0x3f
   1000c:	d904      	bls.n	10018 <IncludeMacCommandsResponse+0x130>
   1000e:	2220      	movs	r2, #32
   10010:	54ea      	strb	r2, [r5, r3]
   10012:	3601      	adds	r6, #1
   10014:	b2f6      	uxtb	r6, r6
   10016:	e76e      	b.n	fef6 <IncludeMacCommandsResponse+0xe>
   10018:	213f      	movs	r1, #63	; 0x3f
   1001a:	400a      	ands	r2, r1
   1001c:	e7f8      	b.n	10010 <IncludeMacCommandsResponse+0x128>
   1001e:	2307      	movs	r3, #7
   10020:	2103      	movs	r1, #3
   10022:	2200      	movs	r2, #0
   10024:	552b      	strb	r3, [r5, r4]
   10026:	1c63      	adds	r3, r4, #1
   10028:	4371      	muls	r1, r6
   1002a:	b29b      	uxth	r3, r3
   1002c:	18eb      	adds	r3, r5, r3
   1002e:	701a      	strb	r2, [r3, #0]
   10030:	4a28      	ldr	r2, [pc, #160]	; (100d4 <IncludeMacCommandsResponse+0x1ec>)
   10032:	1852      	adds	r2, r2, r1
   10034:	3290      	adds	r2, #144	; 0x90
   10036:	7891      	ldrb	r1, [r2, #2]
   10038:	09c9      	lsrs	r1, r1, #7
   1003a:	7019      	strb	r1, [r3, #0]
   1003c:	7892      	ldrb	r2, [r2, #2]
   1003e:	b2c8      	uxtb	r0, r1
   10040:	0652      	lsls	r2, r2, #25
   10042:	d51a      	bpl.n	1007a <IncludeMacCommandsResponse+0x192>
   10044:	2202      	movs	r2, #2
   10046:	4302      	orrs	r2, r0
   10048:	e7a7      	b.n	ff9a <IncludeMacCommandsResponse+0xb2>
   1004a:	2209      	movs	r2, #9
   1004c:	1c63      	adds	r3, r4, #1
   1004e:	552a      	strb	r2, [r5, r4]
   10050:	b29c      	uxth	r4, r3
   10052:	e7de      	b.n	10012 <IncludeMacCommandsResponse+0x12a>
   10054:	230a      	movs	r3, #10
   10056:	2103      	movs	r1, #3
   10058:	2200      	movs	r2, #0
   1005a:	552b      	strb	r3, [r5, r4]
   1005c:	1c63      	adds	r3, r4, #1
   1005e:	4371      	muls	r1, r6
   10060:	b29b      	uxth	r3, r3
   10062:	18eb      	adds	r3, r5, r3
   10064:	701a      	strb	r2, [r3, #0]
   10066:	4a1b      	ldr	r2, [pc, #108]	; (100d4 <IncludeMacCommandsResponse+0x1ec>)
   10068:	1852      	adds	r2, r2, r1
   1006a:	3290      	adds	r2, #144	; 0x90
   1006c:	7891      	ldrb	r1, [r2, #2]
   1006e:	09c9      	lsrs	r1, r1, #7
   10070:	7019      	strb	r1, [r3, #0]
   10072:	78d2      	ldrb	r2, [r2, #3]
   10074:	b2c8      	uxtb	r0, r1
   10076:	07d2      	lsls	r2, r2, #31
   10078:	d4e4      	bmi.n	10044 <IncludeMacCommandsResponse+0x15c>
   1007a:	3402      	adds	r4, #2
   1007c:	b2a4      	uxth	r4, r4
   1007e:	e7c8      	b.n	10012 <IncludeMacCommandsResponse+0x12a>
   10080:	003b      	movs	r3, r7
   10082:	22ff      	movs	r2, #255	; 0xff
   10084:	33dd      	adds	r3, #221	; 0xdd
   10086:	701a      	strb	r2, [r3, #0]
   10088:	2300      	movs	r3, #0
   1008a:	37de      	adds	r7, #222	; 0xde
   1008c:	703b      	strb	r3, [r7, #0]
   1008e:	3afd      	subs	r2, #253	; 0xfd
   10090:	1c63      	adds	r3, r4, #1
   10092:	e7dc      	b.n	1004e <IncludeMacCommandsResponse+0x166>
   10094:	1c62      	adds	r2, r4, #1
   10096:	552b      	strb	r3, [r5, r4]
   10098:	b294      	uxth	r4, r2
   1009a:	e7ba      	b.n	10012 <IncludeMacCommandsResponse+0x12a>
   1009c:	2201      	movs	r2, #1
   1009e:	4252      	negs	r2, r2
   100a0:	17d3      	asrs	r3, r2, #31
   100a2:	9204      	str	r2, [sp, #16]
   100a4:	9305      	str	r3, [sp, #20]
   100a6:	4b11      	ldr	r3, [pc, #68]	; (100ec <IncludeMacCommandsResponse+0x204>)
   100a8:	a904      	add	r1, sp, #16
   100aa:	5cf8      	ldrb	r0, [r7, r3]
   100ac:	4b10      	ldr	r3, [pc, #64]	; (100f0 <IncludeMacCommandsResponse+0x208>)
   100ae:	4798      	blx	r3
   100b0:	2301      	movs	r3, #1
   100b2:	228a      	movs	r2, #138	; 0x8a
   100b4:	425b      	negs	r3, r3
   100b6:	0092      	lsls	r2, r2, #2
   100b8:	50bb      	str	r3, [r7, r2]
   100ba:	3204      	adds	r2, #4
   100bc:	54bb      	strb	r3, [r7, r2]
   100be:	2389      	movs	r3, #137	; 0x89
   100c0:	2201      	movs	r2, #1
   100c2:	009b      	lsls	r3, r3, #2
   100c4:	54fa      	strb	r2, [r7, r3]
   100c6:	2303      	movs	r3, #3
   100c8:	4373      	muls	r3, r6
   100ca:	18ff      	adds	r7, r7, r3
   100cc:	3791      	adds	r7, #145	; 0x91
   100ce:	18a2      	adds	r2, r4, r2
   100d0:	783b      	ldrb	r3, [r7, #0]
   100d2:	e7e0      	b.n	10096 <IncludeMacCommandsResponse+0x1ae>
   100d4:	20002b5c 	.word	0x20002b5c
   100d8:	000202c3 	.word	0x000202c3
   100dc:	00019ec9 	.word	0x00019ec9
   100e0:	20002d73 	.word	0x20002d73
   100e4:	00000217 	.word	0x00000217
   100e8:	00014b79 	.word	0x00014b79
   100ec:	00000225 	.word	0x00000225
   100f0:	0000f42d 	.word	0x0000f42d

000100f4 <UpdateJoinSuccessState>:
   100f4:	b5f0      	push	{r4, r5, r6, r7, lr}
   100f6:	4c35      	ldr	r4, [pc, #212]	; (101cc <UpdateJoinSuccessState+0xd8>)
   100f8:	2104      	movs	r1, #4
   100fa:	0022      	movs	r2, r4
   100fc:	328c      	adds	r2, #140	; 0x8c
   100fe:	7813      	ldrb	r3, [r2, #0]
   10100:	2001      	movs	r0, #1
   10102:	438b      	bics	r3, r1
   10104:	7013      	strb	r3, [r2, #0]
   10106:	0022      	movs	r2, r4
   10108:	2500      	movs	r5, #0
   1010a:	327c      	adds	r2, #124	; 0x7c
   1010c:	7813      	ldrb	r3, [r2, #0]
   1010e:	b087      	sub	sp, #28
   10110:	4303      	orrs	r3, r0
   10112:	3107      	adds	r1, #7
   10114:	4f2e      	ldr	r7, [pc, #184]	; (101d0 <UpdateJoinSuccessState+0xdc>)
   10116:	7013      	strb	r3, [r2, #0]
   10118:	47b8      	blx	r7
   1011a:	1d23      	adds	r3, r4, #4
   1011c:	2116      	movs	r1, #22
   1011e:	0028      	movs	r0, r5
   10120:	67dd      	str	r5, [r3, #124]	; 0x7c
   10122:	47b8      	blx	r7
   10124:	0023      	movs	r3, r4
   10126:	2020      	movs	r0, #32
   10128:	33ff      	adds	r3, #255	; 0xff
   1012a:	7c5b      	ldrb	r3, [r3, #17]
   1012c:	4e29      	ldr	r6, [pc, #164]	; (101d4 <UpdateJoinSuccessState+0xe0>)
   1012e:	4203      	tst	r3, r0
   10130:	d014      	beq.n	1015c <UpdateJoinSuccessState+0x68>
   10132:	0023      	movs	r3, r4
   10134:	337b      	adds	r3, #123	; 0x7b
   10136:	701d      	strb	r5, [r3, #0]
   10138:	0023      	movs	r3, r4
   1013a:	a904      	add	r1, sp, #16
   1013c:	336f      	adds	r3, #111	; 0x6f
   1013e:	710d      	strb	r5, [r1, #4]
   10140:	701d      	strb	r5, [r3, #0]
   10142:	705d      	strb	r5, [r3, #1]
   10144:	709d      	strb	r5, [r3, #2]
   10146:	70dd      	strb	r5, [r3, #3]
   10148:	711d      	strb	r5, [r3, #4]
   1014a:	715d      	strb	r5, [r3, #5]
   1014c:	719d      	strb	r5, [r3, #6]
   1014e:	71dd      	strb	r5, [r3, #7]
   10150:	47b0      	blx	r6
   10152:	210f      	movs	r1, #15
   10154:	2021      	movs	r0, #33	; 0x21
   10156:	4469      	add	r1, sp
   10158:	700d      	strb	r5, [r1, #0]
   1015a:	47b0      	blx	r6
   1015c:	0023      	movs	r3, r4
   1015e:	2500      	movs	r5, #0
   10160:	3308      	adds	r3, #8
   10162:	210a      	movs	r1, #10
   10164:	2001      	movs	r0, #1
   10166:	67dd      	str	r5, [r3, #124]	; 0x7c
   10168:	47b8      	blx	r7
   1016a:	0023      	movs	r3, r4
   1016c:	33c2      	adds	r3, #194	; 0xc2
   1016e:	801d      	strh	r5, [r3, #0]
   10170:	0022      	movs	r2, r4
   10172:	0023      	movs	r3, r4
   10174:	210e      	movs	r1, #14
   10176:	327c      	adds	r2, #124	; 0x7c
   10178:	33ed      	adds	r3, #237	; 0xed
   1017a:	701d      	strb	r5, [r3, #0]
   1017c:	7813      	ldrb	r3, [r2, #0]
   1017e:	203a      	movs	r0, #58	; 0x3a
   10180:	438b      	bics	r3, r1
   10182:	0029      	movs	r1, r5
   10184:	7013      	strb	r3, [r2, #0]
   10186:	47b0      	blx	r6
   10188:	0023      	movs	r3, r4
   1018a:	337d      	adds	r3, #125	; 0x7d
   1018c:	781b      	ldrb	r3, [r3, #0]
   1018e:	079b      	lsls	r3, r3, #30
   10190:	d50c      	bpl.n	101ac <UpdateJoinSuccessState+0xb8>
   10192:	0023      	movs	r3, r4
   10194:	21fa      	movs	r1, #250	; 0xfa
   10196:	3388      	adds	r3, #136	; 0x88
   10198:	681b      	ldr	r3, [r3, #0]
   1019a:	34e7      	adds	r4, #231	; 0xe7
   1019c:	0089      	lsls	r1, r1, #2
   1019e:	7820      	ldrb	r0, [r4, #0]
   101a0:	4359      	muls	r1, r3
   101a2:	9500      	str	r5, [sp, #0]
   101a4:	4b0c      	ldr	r3, [pc, #48]	; (101d8 <UpdateJoinSuccessState+0xe4>)
   101a6:	002a      	movs	r2, r5
   101a8:	4c0c      	ldr	r4, [pc, #48]	; (101dc <UpdateJoinSuccessState+0xe8>)
   101aa:	47a0      	blx	r4
   101ac:	490c      	ldr	r1, [pc, #48]	; (101e0 <UpdateJoinSuccessState+0xec>)
   101ae:	794a      	ldrb	r2, [r1, #5]
   101b0:	790b      	ldrb	r3, [r1, #4]
   101b2:	0212      	lsls	r2, r2, #8
   101b4:	431a      	orrs	r2, r3
   101b6:	798b      	ldrb	r3, [r1, #6]
   101b8:	041b      	lsls	r3, r3, #16
   101ba:	431a      	orrs	r2, r3
   101bc:	79cb      	ldrb	r3, [r1, #7]
   101be:	061b      	lsls	r3, r3, #24
   101c0:	4313      	orrs	r3, r2
   101c2:	d001      	beq.n	101c8 <UpdateJoinSuccessState+0xd4>
   101c4:	2008      	movs	r0, #8
   101c6:	4798      	blx	r3
   101c8:	b007      	add	sp, #28
   101ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
   101cc:	20002b5c 	.word	0x20002b5c
   101d0:	0000e0f9 	.word	0x0000e0f9
   101d4:	0000da45 	.word	0x0000da45
   101d8:	00010321 	.word	0x00010321
   101dc:	0000ee29 	.word	0x0000ee29
   101e0:	20002ea4 	.word	0x20002ea4

000101e4 <PrepareSessionKeys>:
   101e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   101e6:	0004      	movs	r4, r0
   101e8:	2603      	movs	r6, #3
   101ea:	000d      	movs	r5, r1
   101ec:	0017      	movs	r7, r2
   101ee:	4b09      	ldr	r3, [pc, #36]	; (10214 <PrepareSessionKeys+0x30>)
   101f0:	2210      	movs	r2, #16
   101f2:	2100      	movs	r1, #0
   101f4:	4798      	blx	r3
   101f6:	0032      	movs	r2, r6
   101f8:	0029      	movs	r1, r5
   101fa:	1c60      	adds	r0, r4, #1
   101fc:	4d06      	ldr	r5, [pc, #24]	; (10218 <PrepareSessionKeys+0x34>)
   101fe:	47a8      	blx	r5
   10200:	0032      	movs	r2, r6
   10202:	0039      	movs	r1, r7
   10204:	1d20      	adds	r0, r4, #4
   10206:	47a8      	blx	r5
   10208:	1de0      	adds	r0, r4, #7
   1020a:	2202      	movs	r2, #2
   1020c:	4903      	ldr	r1, [pc, #12]	; (1021c <PrepareSessionKeys+0x38>)
   1020e:	47a8      	blx	r5
   10210:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   10212:	46c0      	nop			; (mov r8, r8)
   10214:	00019ec9 	.word	0x00019ec9
   10218:	00019da5 	.word	0x00019da5
   1021c:	20002c20 	.word	0x20002c20

00010220 <AssembleEncryptionBlock>:
   10220:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   10222:	001e      	movs	r6, r3
   10224:	4c0b      	ldr	r4, [pc, #44]	; (10254 <AssembleEncryptionBlock+0x34>)
   10226:	0017      	movs	r7, r2
   10228:	4b0b      	ldr	r3, [pc, #44]	; (10258 <AssembleEncryptionBlock+0x38>)
   1022a:	0005      	movs	r5, r0
   1022c:	9101      	str	r1, [sp, #4]
   1022e:	2210      	movs	r2, #16
   10230:	2100      	movs	r1, #0
   10232:	0020      	movs	r0, r4
   10234:	4798      	blx	r3
   10236:	7026      	strb	r6, [r4, #0]
   10238:	2604      	movs	r6, #4
   1023a:	7165      	strb	r5, [r4, #5]
   1023c:	0032      	movs	r2, r6
   1023e:	4d07      	ldr	r5, [pc, #28]	; (1025c <AssembleEncryptionBlock+0x3c>)
   10240:	a908      	add	r1, sp, #32
   10242:	1da0      	adds	r0, r4, #6
   10244:	47a8      	blx	r5
   10246:	0020      	movs	r0, r4
   10248:	0032      	movs	r2, r6
   1024a:	a901      	add	r1, sp, #4
   1024c:	300a      	adds	r0, #10
   1024e:	47a8      	blx	r5
   10250:	73e7      	strb	r7, [r4, #15]
   10252:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
   10254:	20001110 	.word	0x20001110
   10258:	00019ec9 	.word	0x00019ec9
   1025c:	00019da5 	.word	0x00019da5

00010260 <ConfigureRadio>:
   10260:	b537      	push	{r0, r1, r2, r4, r5, lr}
   10262:	0001      	movs	r1, r0
   10264:	0005      	movs	r5, r0
   10266:	4c11      	ldr	r4, [pc, #68]	; (102ac <ConfigureRadio+0x4c>)
   10268:	3109      	adds	r1, #9
   1026a:	2009      	movs	r0, #9
   1026c:	47a0      	blx	r4
   1026e:	0029      	movs	r1, r5
   10270:	2001      	movs	r0, #1
   10272:	47a0      	blx	r4
   10274:	1d29      	adds	r1, r5, #4
   10276:	200a      	movs	r0, #10
   10278:	47a0      	blx	r4
   1027a:	7a6b      	ldrb	r3, [r5, #9]
   1027c:	2b01      	cmp	r3, #1
   1027e:	d10b      	bne.n	10298 <ConfigureRadio+0x38>
   10280:	0029      	movs	r1, r5
   10282:	2016      	movs	r0, #22
   10284:	310b      	adds	r1, #11
   10286:	47a0      	blx	r4
   10288:	0029      	movs	r1, r5
   1028a:	2007      	movs	r0, #7
   1028c:	310a      	adds	r1, #10
   1028e:	47a0      	blx	r4
   10290:	2000      	movs	r0, #0
   10292:	4907      	ldr	r1, [pc, #28]	; (102b0 <ConfigureRadio+0x50>)
   10294:	47a0      	blx	r4
   10296:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
   10298:	466b      	mov	r3, sp
   1029a:	1dd9      	adds	r1, r3, #7
   1029c:	2303      	movs	r3, #3
   1029e:	2013      	movs	r0, #19
   102a0:	700b      	strb	r3, [r1, #0]
   102a2:	47a0      	blx	r4
   102a4:	4903      	ldr	r1, [pc, #12]	; (102b4 <ConfigureRadio+0x54>)
   102a6:	2012      	movs	r0, #18
   102a8:	e7f4      	b.n	10294 <ConfigureRadio+0x34>
   102aa:	46c0      	nop			; (mov r8, r8)
   102ac:	00014c69 	.word	0x00014c69
   102b0:	20002c53 	.word	0x20002c53
   102b4:	000202c0 	.word	0x000202c0

000102b8 <StopReceiveWindow2Timer>:
   102b8:	b510      	push	{r4, lr}
   102ba:	4c0b      	ldr	r4, [pc, #44]	; (102e8 <StopReceiveWindow2Timer+0x30>)
   102bc:	0022      	movs	r2, r4
   102be:	32f4      	adds	r2, #244	; 0xf4
   102c0:	7812      	ldrb	r2, [r2, #0]
   102c2:	2a01      	cmp	r2, #1
   102c4:	d10e      	bne.n	102e4 <StopReceiveWindow2Timer+0x2c>
   102c6:	0021      	movs	r1, r4
   102c8:	200e      	movs	r0, #14
   102ca:	317c      	adds	r1, #124	; 0x7c
   102cc:	780a      	ldrb	r2, [r1, #0]
   102ce:	34e5      	adds	r4, #229	; 0xe5
   102d0:	4382      	bics	r2, r0
   102d2:	700a      	strb	r2, [r1, #0]
   102d4:	7820      	ldrb	r0, [r4, #0]
   102d6:	4b05      	ldr	r3, [pc, #20]	; (102ec <StopReceiveWindow2Timer+0x34>)
   102d8:	4798      	blx	r3
   102da:	2800      	cmp	r0, #0
   102dc:	d002      	beq.n	102e4 <StopReceiveWindow2Timer+0x2c>
   102de:	7820      	ldrb	r0, [r4, #0]
   102e0:	4b03      	ldr	r3, [pc, #12]	; (102f0 <StopReceiveWindow2Timer+0x38>)
   102e2:	4798      	blx	r3
   102e4:	bd10      	pop	{r4, pc}
   102e6:	46c0      	nop			; (mov r8, r8)
   102e8:	20002b5c 	.word	0x20002b5c
   102ec:	0000efc1 	.word	0x0000efc1
   102f0:	0000f141 	.word	0x0000f141

000102f4 <LorawanLinkCheckCallback.part.1>:
   102f4:	4b07      	ldr	r3, [pc, #28]	; (10314 <LorawanLinkCheckCallback.part.1+0x20>)
   102f6:	b513      	push	{r0, r1, r4, lr}
   102f8:	001a      	movs	r2, r3
   102fa:	21fa      	movs	r1, #250	; 0xfa
   102fc:	3288      	adds	r2, #136	; 0x88
   102fe:	6812      	ldr	r2, [r2, #0]
   10300:	0089      	lsls	r1, r1, #2
   10302:	4351      	muls	r1, r2
   10304:	2200      	movs	r2, #0
   10306:	33e7      	adds	r3, #231	; 0xe7
   10308:	7818      	ldrb	r0, [r3, #0]
   1030a:	4c03      	ldr	r4, [pc, #12]	; (10318 <LorawanLinkCheckCallback.part.1+0x24>)
   1030c:	9200      	str	r2, [sp, #0]
   1030e:	4b03      	ldr	r3, [pc, #12]	; (1031c <LorawanLinkCheckCallback.part.1+0x28>)
   10310:	47a0      	blx	r4
   10312:	bd13      	pop	{r0, r1, r4, pc}
   10314:	20002b5c 	.word	0x20002b5c
   10318:	0000ee29 	.word	0x0000ee29
   1031c:	00010321 	.word	0x00010321

00010320 <LorawanLinkCheckCallback>:
   10320:	4b17      	ldr	r3, [pc, #92]	; (10380 <LorawanLinkCheckCallback+0x60>)
   10322:	20a0      	movs	r0, #160	; 0xa0
   10324:	001a      	movs	r2, r3
   10326:	2180      	movs	r1, #128	; 0x80
   10328:	b510      	push	{r4, lr}
   1032a:	327c      	adds	r2, #124	; 0x7c
   1032c:	8812      	ldrh	r2, [r2, #0]
   1032e:	0080      	lsls	r0, r0, #2
   10330:	0089      	lsls	r1, r1, #2
   10332:	4002      	ands	r2, r0
   10334:	428a      	cmp	r2, r1
   10336:	d11c      	bne.n	10372 <LorawanLinkCheckCallback+0x52>
   10338:	001a      	movs	r2, r3
   1033a:	32d8      	adds	r2, #216	; 0xd8
   1033c:	7810      	ldrb	r0, [r2, #0]
   1033e:	2403      	movs	r4, #3
   10340:	2200      	movs	r2, #0
   10342:	b2d1      	uxtb	r1, r2
   10344:	4281      	cmp	r1, r0
   10346:	d30d      	bcc.n	10364 <LorawanLinkCheckCallback+0x44>
   10348:	d113      	bne.n	10372 <LorawanLinkCheckCallback+0x52>
   1034a:	2203      	movs	r2, #3
   1034c:	434a      	muls	r2, r1
   1034e:	2102      	movs	r1, #2
   10350:	189a      	adds	r2, r3, r2
   10352:	3291      	adds	r2, #145	; 0x91
   10354:	7011      	strb	r1, [r2, #0]
   10356:	280f      	cmp	r0, #15
   10358:	d80b      	bhi.n	10372 <LorawanLinkCheckCallback+0x52>
   1035a:	001a      	movs	r2, r3
   1035c:	3001      	adds	r0, #1
   1035e:	32d8      	adds	r2, #216	; 0xd8
   10360:	7010      	strb	r0, [r2, #0]
   10362:	e006      	b.n	10372 <LorawanLinkCheckCallback+0x52>
   10364:	0021      	movs	r1, r4
   10366:	3201      	adds	r2, #1
   10368:	4351      	muls	r1, r2
   1036a:	318e      	adds	r1, #142	; 0x8e
   1036c:	5c59      	ldrb	r1, [r3, r1]
   1036e:	2902      	cmp	r1, #2
   10370:	d1e7      	bne.n	10342 <LorawanLinkCheckCallback+0x22>
   10372:	337d      	adds	r3, #125	; 0x7d
   10374:	781b      	ldrb	r3, [r3, #0]
   10376:	079b      	lsls	r3, r3, #30
   10378:	d501      	bpl.n	1037e <LorawanLinkCheckCallback+0x5e>
   1037a:	4b02      	ldr	r3, [pc, #8]	; (10384 <LorawanLinkCheckCallback+0x64>)
   1037c:	4798      	blx	r3
   1037e:	bd10      	pop	{r4, pc}
   10380:	20002b5c 	.word	0x20002b5c
   10384:	000102f5 	.word	0x000102f5

00010388 <LORAWAN_Init>:
   10388:	2270      	movs	r2, #112	; 0x70
   1038a:	b5f0      	push	{r4, r5, r6, r7, lr}
   1038c:	4b52      	ldr	r3, [pc, #328]	; (104d8 <LORAWAN_Init+0x150>)
   1038e:	b087      	sub	sp, #28
   10390:	781b      	ldrb	r3, [r3, #0]
   10392:	0006      	movs	r6, r0
   10394:	011b      	lsls	r3, r3, #4
   10396:	4013      	ands	r3, r2
   10398:	4a50      	ldr	r2, [pc, #320]	; (104dc <LORAWAN_Init+0x154>)
   1039a:	000f      	movs	r7, r1
   1039c:	7812      	ldrb	r2, [r2, #0]
   1039e:	0912      	lsrs	r2, r2, #4
   103a0:	4313      	orrs	r3, r2
   103a2:	2b1f      	cmp	r3, #31
   103a4:	d000      	beq.n	103a8 <LORAWAN_Init+0x20>
   103a6:	e7fe      	b.n	103a6 <LORAWAN_Init+0x1e>
   103a8:	4d4d      	ldr	r5, [pc, #308]	; (104e0 <LORAWAN_Init+0x158>)
   103aa:	002b      	movs	r3, r5
   103ac:	33ef      	adds	r3, #239	; 0xef
   103ae:	781b      	ldrb	r3, [r3, #0]
   103b0:	2b00      	cmp	r3, #0
   103b2:	d000      	beq.n	103b6 <LORAWAN_Init+0x2e>
   103b4:	e08c      	b.n	104d0 <LORAWAN_Init+0x148>
   103b6:	484b      	ldr	r0, [pc, #300]	; (104e4 <LORAWAN_Init+0x15c>)
   103b8:	4c4b      	ldr	r4, [pc, #300]	; (104e8 <LORAWAN_Init+0x160>)
   103ba:	47a0      	blx	r4
   103bc:	2808      	cmp	r0, #8
   103be:	d050      	beq.n	10462 <LORAWAN_Init+0xda>
   103c0:	4b4a      	ldr	r3, [pc, #296]	; (104ec <LORAWAN_Init+0x164>)
   103c2:	4798      	blx	r3
   103c4:	002b      	movs	r3, r5
   103c6:	33ef      	adds	r3, #239	; 0xef
   103c8:	781b      	ldrb	r3, [r3, #0]
   103ca:	2b00      	cmp	r3, #0
   103cc:	d018      	beq.n	10400 <LORAWAN_Init+0x78>
   103ce:	4b48      	ldr	r3, [pc, #288]	; (104f0 <LORAWAN_Init+0x168>)
   103d0:	0a32      	lsrs	r2, r6, #8
   103d2:	705a      	strb	r2, [r3, #1]
   103d4:	0c32      	lsrs	r2, r6, #16
   103d6:	709a      	strb	r2, [r3, #2]
   103d8:	0a3a      	lsrs	r2, r7, #8
   103da:	701e      	strb	r6, [r3, #0]
   103dc:	711f      	strb	r7, [r3, #4]
   103de:	715a      	strb	r2, [r3, #5]
   103e0:	0e36      	lsrs	r6, r6, #24
   103e2:	0c3a      	lsrs	r2, r7, #16
   103e4:	0e3f      	lsrs	r7, r7, #24
   103e6:	719a      	strb	r2, [r3, #6]
   103e8:	70de      	strb	r6, [r3, #3]
   103ea:	71df      	strb	r7, [r3, #7]
   103ec:	4b41      	ldr	r3, [pc, #260]	; (104f4 <LORAWAN_Init+0x16c>)
   103ee:	4798      	blx	r3
   103f0:	4941      	ldr	r1, [pc, #260]	; (104f8 <LORAWAN_Init+0x170>)
   103f2:	4b42      	ldr	r3, [pc, #264]	; (104fc <LORAWAN_Init+0x174>)
   103f4:	201a      	movs	r0, #26
   103f6:	4798      	blx	r3
   103f8:	4b41      	ldr	r3, [pc, #260]	; (10500 <LORAWAN_Init+0x178>)
   103fa:	4798      	blx	r3
   103fc:	4b41      	ldr	r3, [pc, #260]	; (10504 <LORAWAN_Init+0x17c>)
   103fe:	4798      	blx	r3
   10400:	2317      	movs	r3, #23
   10402:	ac02      	add	r4, sp, #8
   10404:	4a40      	ldr	r2, [pc, #256]	; (10508 <LORAWAN_Init+0x180>)
   10406:	7123      	strb	r3, [r4, #4]
   10408:	4940      	ldr	r1, [pc, #256]	; (1050c <LORAWAN_Init+0x184>)
   1040a:	4b41      	ldr	r3, [pc, #260]	; (10510 <LORAWAN_Init+0x188>)
   1040c:	9205      	str	r2, [sp, #20]
   1040e:	9200      	str	r2, [sp, #0]
   10410:	4e40      	ldr	r6, [pc, #256]	; (10514 <LORAWAN_Init+0x18c>)
   10412:	9a03      	ldr	r2, [sp, #12]
   10414:	2000      	movs	r0, #0
   10416:	9102      	str	r1, [sp, #8]
   10418:	9304      	str	r3, [sp, #16]
   1041a:	47b0      	blx	r6
   1041c:	230f      	movs	r3, #15
   1041e:	4a3e      	ldr	r2, [pc, #248]	; (10518 <LORAWAN_Init+0x190>)
   10420:	7123      	strb	r3, [r4, #4]
   10422:	4b3e      	ldr	r3, [pc, #248]	; (1051c <LORAWAN_Init+0x194>)
   10424:	60e2      	str	r2, [r4, #12]
   10426:	60a3      	str	r3, [r4, #8]
   10428:	493d      	ldr	r1, [pc, #244]	; (10520 <LORAWAN_Init+0x198>)
   1042a:	9200      	str	r2, [sp, #0]
   1042c:	6862      	ldr	r2, [r4, #4]
   1042e:	2001      	movs	r0, #1
   10430:	9102      	str	r1, [sp, #8]
   10432:	47b0      	blx	r6
   10434:	2201      	movs	r2, #1
   10436:	4252      	negs	r2, r2
   10438:	17d3      	asrs	r3, r2, #31
   1043a:	9202      	str	r2, [sp, #8]
   1043c:	9303      	str	r3, [sp, #12]
   1043e:	4b39      	ldr	r3, [pc, #228]	; (10524 <LORAWAN_Init+0x19c>)
   10440:	0021      	movs	r1, r4
   10442:	5ce8      	ldrb	r0, [r5, r3]
   10444:	4b38      	ldr	r3, [pc, #224]	; (10528 <LORAWAN_Init+0x1a0>)
   10446:	4798      	blx	r3
   10448:	238b      	movs	r3, #139	; 0x8b
   1044a:	22ff      	movs	r2, #255	; 0xff
   1044c:	009b      	lsls	r3, r3, #2
   1044e:	54ea      	strb	r2, [r5, r3]
   10450:	3a01      	subs	r2, #1
   10452:	3aff      	subs	r2, #255	; 0xff
   10454:	3b04      	subs	r3, #4
   10456:	50ea      	str	r2, [r5, r3]
   10458:	2200      	movs	r2, #0
   1045a:	3b04      	subs	r3, #4
   1045c:	54ea      	strb	r2, [r5, r3]
   1045e:	b007      	add	sp, #28
   10460:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10462:	4832      	ldr	r0, [pc, #200]	; (1052c <LORAWAN_Init+0x1a4>)
   10464:	47a0      	blx	r4
   10466:	2808      	cmp	r0, #8
   10468:	d1aa      	bne.n	103c0 <LORAWAN_Init+0x38>
   1046a:	4831      	ldr	r0, [pc, #196]	; (10530 <LORAWAN_Init+0x1a8>)
   1046c:	47a0      	blx	r4
   1046e:	2808      	cmp	r0, #8
   10470:	d1a6      	bne.n	103c0 <LORAWAN_Init+0x38>
   10472:	4830      	ldr	r0, [pc, #192]	; (10534 <LORAWAN_Init+0x1ac>)
   10474:	47a0      	blx	r4
   10476:	2808      	cmp	r0, #8
   10478:	d1a2      	bne.n	103c0 <LORAWAN_Init+0x38>
   1047a:	482f      	ldr	r0, [pc, #188]	; (10538 <LORAWAN_Init+0x1b0>)
   1047c:	47a0      	blx	r4
   1047e:	2808      	cmp	r0, #8
   10480:	d19e      	bne.n	103c0 <LORAWAN_Init+0x38>
   10482:	482e      	ldr	r0, [pc, #184]	; (1053c <LORAWAN_Init+0x1b4>)
   10484:	47a0      	blx	r4
   10486:	2808      	cmp	r0, #8
   10488:	d19a      	bne.n	103c0 <LORAWAN_Init+0x38>
   1048a:	482d      	ldr	r0, [pc, #180]	; (10540 <LORAWAN_Init+0x1b8>)
   1048c:	47a0      	blx	r4
   1048e:	2808      	cmp	r0, #8
   10490:	d196      	bne.n	103c0 <LORAWAN_Init+0x38>
   10492:	482c      	ldr	r0, [pc, #176]	; (10544 <LORAWAN_Init+0x1bc>)
   10494:	47a0      	blx	r4
   10496:	2808      	cmp	r0, #8
   10498:	d000      	beq.n	1049c <LORAWAN_Init+0x114>
   1049a:	e791      	b.n	103c0 <LORAWAN_Init+0x38>
   1049c:	482a      	ldr	r0, [pc, #168]	; (10548 <LORAWAN_Init+0x1c0>)
   1049e:	47a0      	blx	r4
   104a0:	2808      	cmp	r0, #8
   104a2:	d000      	beq.n	104a6 <LORAWAN_Init+0x11e>
   104a4:	e78c      	b.n	103c0 <LORAWAN_Init+0x38>
   104a6:	4829      	ldr	r0, [pc, #164]	; (1054c <LORAWAN_Init+0x1c4>)
   104a8:	47a0      	blx	r4
   104aa:	2808      	cmp	r0, #8
   104ac:	d000      	beq.n	104b0 <LORAWAN_Init+0x128>
   104ae:	e787      	b.n	103c0 <LORAWAN_Init+0x38>
   104b0:	4827      	ldr	r0, [pc, #156]	; (10550 <LORAWAN_Init+0x1c8>)
   104b2:	47a0      	blx	r4
   104b4:	2808      	cmp	r0, #8
   104b6:	d000      	beq.n	104ba <LORAWAN_Init+0x132>
   104b8:	e782      	b.n	103c0 <LORAWAN_Init+0x38>
   104ba:	4826      	ldr	r0, [pc, #152]	; (10554 <LORAWAN_Init+0x1cc>)
   104bc:	4b26      	ldr	r3, [pc, #152]	; (10558 <LORAWAN_Init+0x1d0>)
   104be:	4798      	blx	r3
   104c0:	2808      	cmp	r0, #8
   104c2:	d000      	beq.n	104c6 <LORAWAN_Init+0x13e>
   104c4:	e77c      	b.n	103c0 <LORAWAN_Init+0x38>
   104c6:	002b      	movs	r3, r5
   104c8:	2201      	movs	r2, #1
   104ca:	33ef      	adds	r3, #239	; 0xef
   104cc:	701a      	strb	r2, [r3, #0]
   104ce:	e779      	b.n	103c4 <LORAWAN_Init+0x3c>
   104d0:	4b22      	ldr	r3, [pc, #136]	; (1055c <LORAWAN_Init+0x1d4>)
   104d2:	4798      	blx	r3
   104d4:	e776      	b.n	103c4 <LORAWAN_Init+0x3c>
   104d6:	46c0      	nop			; (mov r8, r8)
   104d8:	41003fe8 	.word	0x41003fe8
   104dc:	41003fe4 	.word	0x41003fe4
   104e0:	20002b5c 	.word	0x20002b5c
   104e4:	20002c3e 	.word	0x20002c3e
   104e8:	0000edf5 	.word	0x0000edf5
   104ec:	0000ed39 	.word	0x0000ed39
   104f0:	20002ea4 	.word	0x20002ea4
   104f4:	00014e65 	.word	0x00014e65
   104f8:	000124c9 	.word	0x000124c9
   104fc:	00014c69 	.word	0x00014c69
   10500:	0000f629 	.word	0x0000f629
   10504:	0001a055 	.word	0x0001a055
   10508:	0001480d 	.word	0x0001480d
   1050c:	20002b43 	.word	0x20002b43
   10510:	000202e0 	.word	0x000202e0
   10514:	0000e3dd 	.word	0x0000e3dd
   10518:	00014811 	.word	0x00014811
   1051c:	00020398 	.word	0x00020398
   10520:	20002a34 	.word	0x20002a34
   10524:	00000225 	.word	0x00000225
   10528:	0000f42d 	.word	0x0000f42d
   1052c:	20002c3f 	.word	0x20002c3f
   10530:	20002c40 	.word	0x20002c40
   10534:	20002c41 	.word	0x20002c41
   10538:	20002c43 	.word	0x20002c43
   1053c:	20002c44 	.word	0x20002c44
   10540:	20002c42 	.word	0x20002c42
   10544:	20002c45 	.word	0x20002c45
   10548:	20002c4e 	.word	0x20002c4e
   1054c:	20002c4f 	.word	0x20002c4f
   10550:	20002c78 	.word	0x20002c78
   10554:	20002d81 	.word	0x20002d81
   10558:	0000f3e5 	.word	0x0000f3e5
   1055c:	0000fe25 	.word	0x0000fe25

00010560 <LORAWAN_Send>:
   10560:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   10562:	4c37      	ldr	r4, [pc, #220]	; (10640 <LORAWAN_Send+0xe0>)
   10564:	0006      	movs	r6, r0
   10566:	0023      	movs	r3, r4
   10568:	337c      	adds	r3, #124	; 0x7c
   1056a:	781b      	ldrb	r3, [r3, #0]
   1056c:	250f      	movs	r5, #15
   1056e:	b25a      	sxtb	r2, r3
   10570:	2a00      	cmp	r2, #0
   10572:	db0b      	blt.n	1058c <LORAWAN_Send+0x2c>
   10574:	3d03      	subs	r5, #3
   10576:	065a      	lsls	r2, r3, #25
   10578:	d408      	bmi.n	1058c <LORAWAN_Send+0x2c>
   1057a:	3d03      	subs	r5, #3
   1057c:	07db      	lsls	r3, r3, #31
   1057e:	d505      	bpl.n	1058c <LORAWAN_Send+0x2c>
   10580:	2385      	movs	r3, #133	; 0x85
   10582:	009b      	lsls	r3, r3, #2
   10584:	5ce7      	ldrb	r7, [r4, r3]
   10586:	2f00      	cmp	r7, #0
   10588:	d102      	bne.n	10590 <LORAWAN_Send+0x30>
   1058a:	2511      	movs	r5, #17
   1058c:	0028      	movs	r0, r5
   1058e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   10590:	2800      	cmp	r0, #0
   10592:	d10e      	bne.n	105b2 <LORAWAN_Send+0x52>
   10594:	2700      	movs	r7, #0
   10596:	1d23      	adds	r3, r4, #4
   10598:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   1059a:	3301      	adds	r3, #1
   1059c:	d123      	bne.n	105e6 <LORAWAN_Send+0x86>
   1059e:	2001      	movs	r0, #1
   105a0:	347c      	adds	r4, #124	; 0x7c
   105a2:	78a3      	ldrb	r3, [r4, #2]
   105a4:	210b      	movs	r1, #11
   105a6:	4303      	orrs	r3, r0
   105a8:	70a3      	strb	r3, [r4, #2]
   105aa:	4b26      	ldr	r3, [pc, #152]	; (10644 <LORAWAN_Send+0xe4>)
   105ac:	4798      	blx	r3
   105ae:	250d      	movs	r5, #13
   105b0:	e7ec      	b.n	1058c <LORAWAN_Send+0x2c>
   105b2:	7843      	ldrb	r3, [r0, #1]
   105b4:	7a02      	ldrb	r2, [r0, #8]
   105b6:	3b01      	subs	r3, #1
   105b8:	b2db      	uxtb	r3, r3
   105ba:	9201      	str	r2, [sp, #4]
   105bc:	2bdf      	cmp	r3, #223	; 0xdf
   105be:	d902      	bls.n	105c6 <LORAWAN_Send+0x66>
   105c0:	250a      	movs	r5, #10
   105c2:	2a00      	cmp	r2, #0
   105c4:	d1e2      	bne.n	1058c <LORAWAN_Send+0x2c>
   105c6:	4b20      	ldr	r3, [pc, #128]	; (10648 <LORAWAN_Send+0xe8>)
   105c8:	4798      	blx	r3
   105ca:	4684      	mov	ip, r0
   105cc:	9b01      	ldr	r3, [sp, #4]
   105ce:	9000      	str	r0, [sp, #0]
   105d0:	4463      	add	r3, ip
   105d2:	001d      	movs	r5, r3
   105d4:	4b1d      	ldr	r3, [pc, #116]	; (1064c <LORAWAN_Send+0xec>)
   105d6:	4798      	blx	r3
   105d8:	4285      	cmp	r5, r0
   105da:	dddb      	ble.n	10594 <LORAWAN_Send+0x34>
   105dc:	9b00      	ldr	r3, [sp, #0]
   105de:	250e      	movs	r5, #14
   105e0:	2b00      	cmp	r3, #0
   105e2:	d0d3      	beq.n	1058c <LORAWAN_Send+0x2c>
   105e4:	e7d7      	b.n	10596 <LORAWAN_Send+0x36>
   105e6:	0023      	movs	r3, r4
   105e8:	33f4      	adds	r3, #244	; 0xf4
   105ea:	781b      	ldrb	r3, [r3, #0]
   105ec:	2b04      	cmp	r3, #4
   105ee:	d01d      	beq.n	1062c <LORAWAN_Send+0xcc>
   105f0:	0023      	movs	r3, r4
   105f2:	33f4      	adds	r3, #244	; 0xf4
   105f4:	781b      	ldrb	r3, [r3, #0]
   105f6:	2b01      	cmp	r3, #1
   105f8:	d105      	bne.n	10606 <LORAWAN_Send+0xa6>
   105fa:	0023      	movs	r3, r4
   105fc:	337c      	adds	r3, #124	; 0x7c
   105fe:	781a      	ldrb	r2, [r3, #0]
   10600:	230e      	movs	r3, #14
   10602:	421a      	tst	r2, r3
   10604:	d1c1      	bne.n	1058a <LORAWAN_Send+0x2a>
   10606:	0023      	movs	r3, r4
   10608:	33fc      	adds	r3, #252	; 0xfc
   1060a:	2f00      	cmp	r7, #0
   1060c:	d113      	bne.n	10636 <LORAWAN_Send+0xd6>
   1060e:	2508      	movs	r5, #8
   10610:	601e      	str	r6, [r3, #0]
   10612:	2385      	movs	r3, #133	; 0x85
   10614:	2200      	movs	r2, #0
   10616:	009b      	lsls	r3, r3, #2
   10618:	54e2      	strb	r2, [r4, r3]
   1061a:	2001      	movs	r0, #1
   1061c:	4b0c      	ldr	r3, [pc, #48]	; (10650 <LORAWAN_Send+0xf0>)
   1061e:	4798      	blx	r3
   10620:	2320      	movs	r3, #32
   10622:	348c      	adds	r4, #140	; 0x8c
   10624:	7822      	ldrb	r2, [r4, #0]
   10626:	4313      	orrs	r3, r2
   10628:	7023      	strb	r3, [r4, #0]
   1062a:	e7af      	b.n	1058c <LORAWAN_Send+0x2c>
   1062c:	4b09      	ldr	r3, [pc, #36]	; (10654 <LORAWAN_Send+0xf4>)
   1062e:	4798      	blx	r3
   10630:	2808      	cmp	r0, #8
   10632:	d1aa      	bne.n	1058a <LORAWAN_Send+0x2a>
   10634:	e7dc      	b.n	105f0 <LORAWAN_Send+0x90>
   10636:	2200      	movs	r2, #0
   10638:	2511      	movs	r5, #17
   1063a:	601a      	str	r2, [r3, #0]
   1063c:	e7e9      	b.n	10612 <LORAWAN_Send+0xb2>
   1063e:	46c0      	nop			; (mov r8, r8)
   10640:	20002b5c 	.word	0x20002b5c
   10644:	0000e0f9 	.word	0x0000e0f9
   10648:	0000fde5 	.word	0x0000fde5
   1064c:	0000fe8d 	.word	0x0000fe8d
   10650:	00014af5 	.word	0x00014af5
   10654:	000141f9 	.word	0x000141f9

00010658 <AutomaticReplyCallback>:
   10658:	b510      	push	{r4, lr}
   1065a:	4c0d      	ldr	r4, [pc, #52]	; (10690 <AutomaticReplyCallback+0x38>)
   1065c:	0023      	movs	r3, r4
   1065e:	33f4      	adds	r3, #244	; 0xf4
   10660:	781b      	ldrb	r3, [r3, #0]
   10662:	2b01      	cmp	r3, #1
   10664:	d10e      	bne.n	10684 <AutomaticReplyCallback+0x2c>
   10666:	0022      	movs	r2, r4
   10668:	210e      	movs	r1, #14
   1066a:	327c      	adds	r2, #124	; 0x7c
   1066c:	7813      	ldrb	r3, [r2, #0]
   1066e:	438b      	bics	r3, r1
   10670:	7013      	strb	r3, [r2, #0]
   10672:	4b08      	ldr	r3, [pc, #32]	; (10694 <AutomaticReplyCallback+0x3c>)
   10674:	2000      	movs	r0, #0
   10676:	4798      	blx	r3
   10678:	2208      	movs	r2, #8
   1067a:	348c      	adds	r4, #140	; 0x8c
   1067c:	7823      	ldrb	r3, [r4, #0]
   1067e:	4393      	bics	r3, r2
   10680:	7023      	strb	r3, [r4, #0]
   10682:	bd10      	pop	{r4, pc}
   10684:	2b04      	cmp	r3, #4
   10686:	d1f4      	bne.n	10672 <AutomaticReplyCallback+0x1a>
   10688:	4b03      	ldr	r3, [pc, #12]	; (10698 <AutomaticReplyCallback+0x40>)
   1068a:	4798      	blx	r3
   1068c:	e7f1      	b.n	10672 <AutomaticReplyCallback+0x1a>
   1068e:	46c0      	nop			; (mov r8, r8)
   10690:	20002b5c 	.word	0x20002b5c
   10694:	00010561 	.word	0x00010561
   10698:	0001557d 	.word	0x0001557d

0001069c <LORAWAN_Pause>:
   1069c:	b510      	push	{r4, lr}
   1069e:	4c2c      	ldr	r4, [pc, #176]	; (10750 <LORAWAN_Pause+0xb4>)
   106a0:	0023      	movs	r3, r4
   106a2:	33f4      	adds	r3, #244	; 0xf4
   106a4:	781b      	ldrb	r3, [r3, #0]
   106a6:	2b04      	cmp	r3, #4
   106a8:	d110      	bne.n	106cc <LORAWAN_Pause+0x30>
   106aa:	0023      	movs	r3, r4
   106ac:	337c      	adds	r3, #124	; 0x7c
   106ae:	781b      	ldrb	r3, [r3, #0]
   106b0:	07db      	lsls	r3, r3, #31
   106b2:	d50b      	bpl.n	106cc <LORAWAN_Pause+0x30>
   106b4:	4b27      	ldr	r3, [pc, #156]	; (10754 <LORAWAN_Pause+0xb8>)
   106b6:	4798      	blx	r3
   106b8:	28c7      	cmp	r0, #199	; 0xc7
   106ba:	d942      	bls.n	10742 <LORAWAN_Pause+0xa6>
   106bc:	2380      	movs	r3, #128	; 0x80
   106be:	347c      	adds	r4, #124	; 0x7c
   106c0:	7822      	ldrb	r2, [r4, #0]
   106c2:	425b      	negs	r3, r3
   106c4:	4313      	orrs	r3, r2
   106c6:	3832      	subs	r0, #50	; 0x32
   106c8:	7023      	strb	r3, [r4, #0]
   106ca:	bd10      	pop	{r4, pc}
   106cc:	0023      	movs	r3, r4
   106ce:	337c      	adds	r3, #124	; 0x7c
   106d0:	7818      	ldrb	r0, [r3, #0]
   106d2:	0700      	lsls	r0, r0, #28
   106d4:	0f40      	lsrs	r0, r0, #29
   106d6:	2806      	cmp	r0, #6
   106d8:	d833      	bhi.n	10742 <LORAWAN_Pause+0xa6>
   106da:	f005 ff9d 	bl	16618 <__gnu_thumb1_case_uqi>
   106de:	322f      	.short	0x322f
   106e0:	321b3204 	.word	0x321b3204
   106e4:	2c          	.byte	0x2c
   106e5:	00          	.byte	0x00
   106e6:	0023      	movs	r3, r4
   106e8:	338c      	adds	r3, #140	; 0x8c
   106ea:	781b      	ldrb	r3, [r3, #0]
   106ec:	075b      	lsls	r3, r3, #29
   106ee:	d509      	bpl.n	10704 <LORAWAN_Pause+0x68>
   106f0:	0023      	movs	r3, r4
   106f2:	33e2      	adds	r3, #226	; 0xe2
   106f4:	7818      	ldrb	r0, [r3, #0]
   106f6:	4b18      	ldr	r3, [pc, #96]	; (10758 <LORAWAN_Pause+0xbc>)
   106f8:	4798      	blx	r3
   106fa:	21fa      	movs	r1, #250	; 0xfa
   106fc:	4b17      	ldr	r3, [pc, #92]	; (1075c <LORAWAN_Pause+0xc0>)
   106fe:	0089      	lsls	r1, r1, #2
   10700:	4798      	blx	r3
   10702:	e7d9      	b.n	106b8 <LORAWAN_Pause+0x1c>
   10704:	0023      	movs	r3, r4
   10706:	337c      	adds	r3, #124	; 0x7c
   10708:	781b      	ldrb	r3, [r3, #0]
   1070a:	07db      	lsls	r3, r3, #31
   1070c:	d519      	bpl.n	10742 <LORAWAN_Pause+0xa6>
   1070e:	0023      	movs	r3, r4
   10710:	33e4      	adds	r3, #228	; 0xe4
   10712:	e7ef      	b.n	106f4 <LORAWAN_Pause+0x58>
   10714:	0023      	movs	r3, r4
   10716:	338c      	adds	r3, #140	; 0x8c
   10718:	7818      	ldrb	r0, [r3, #0]
   1071a:	2304      	movs	r3, #4
   1071c:	4018      	ands	r0, r3
   1071e:	0023      	movs	r3, r4
   10720:	2800      	cmp	r0, #0
   10722:	d001      	beq.n	10728 <LORAWAN_Pause+0x8c>
   10724:	33e3      	adds	r3, #227	; 0xe3
   10726:	e7e5      	b.n	106f4 <LORAWAN_Pause+0x58>
   10728:	337c      	adds	r3, #124	; 0x7c
   1072a:	781b      	ldrb	r3, [r3, #0]
   1072c:	07db      	lsls	r3, r3, #31
   1072e:	d5e4      	bpl.n	106fa <LORAWAN_Pause+0x5e>
   10730:	0023      	movs	r3, r4
   10732:	33e5      	adds	r3, #229	; 0xe5
   10734:	e7de      	b.n	106f4 <LORAWAN_Pause+0x58>
   10736:	0023      	movs	r3, r4
   10738:	33e8      	adds	r3, #232	; 0xe8
   1073a:	e7db      	b.n	106f4 <LORAWAN_Pause+0x58>
   1073c:	2001      	movs	r0, #1
   1073e:	4240      	negs	r0, r0
   10740:	e7bc      	b.n	106bc <LORAWAN_Pause+0x20>
   10742:	227f      	movs	r2, #127	; 0x7f
   10744:	347c      	adds	r4, #124	; 0x7c
   10746:	7823      	ldrb	r3, [r4, #0]
   10748:	2000      	movs	r0, #0
   1074a:	4013      	ands	r3, r2
   1074c:	7023      	strb	r3, [r4, #0]
   1074e:	e7bc      	b.n	106ca <LORAWAN_Pause+0x2e>
   10750:	20002b5c 	.word	0x20002b5c
   10754:	00014231 	.word	0x00014231
   10758:	0000efd5 	.word	0x0000efd5
   1075c:	00016641 	.word	0x00016641

00010760 <LORAWAN_Resume>:
   10760:	217f      	movs	r1, #127	; 0x7f
   10762:	4b03      	ldr	r3, [pc, #12]	; (10770 <LORAWAN_Resume+0x10>)
   10764:	337c      	adds	r3, #124	; 0x7c
   10766:	781a      	ldrb	r2, [r3, #0]
   10768:	400a      	ands	r2, r1
   1076a:	701a      	strb	r2, [r3, #0]
   1076c:	4770      	bx	lr
   1076e:	46c0      	nop			; (mov r8, r8)
   10770:	20002b5c 	.word	0x20002b5c

00010774 <LorawanLinkCheckConfigure>:
   10774:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   10776:	23fa      	movs	r3, #250	; 0xfa
   10778:	4c21      	ldr	r4, [pc, #132]	; (10800 <LorawanLinkCheckConfigure+0x8c>)
   1077a:	009b      	lsls	r3, r3, #2
   1077c:	0022      	movs	r2, r4
   1077e:	0025      	movs	r5, r4
   10780:	4343      	muls	r3, r0
   10782:	3288      	adds	r2, #136	; 0x88
   10784:	0006      	movs	r6, r0
   10786:	2102      	movs	r1, #2
   10788:	2000      	movs	r0, #0
   1078a:	4f1e      	ldr	r7, [pc, #120]	; (10804 <LorawanLinkCheckConfigure+0x90>)
   1078c:	6013      	str	r3, [r2, #0]
   1078e:	357c      	adds	r5, #124	; 0x7c
   10790:	47b8      	blx	r7
   10792:	2e00      	cmp	r6, #0
   10794:	d127      	bne.n	107e6 <LorawanLinkCheckConfigure+0x72>
   10796:	0023      	movs	r3, r4
   10798:	33e7      	adds	r3, #231	; 0xe7
   1079a:	7818      	ldrb	r0, [r3, #0]
   1079c:	4b1a      	ldr	r3, [pc, #104]	; (10808 <LorawanLinkCheckConfigure+0x94>)
   1079e:	4798      	blx	r3
   107a0:	2202      	movs	r2, #2
   107a2:	786b      	ldrb	r3, [r5, #1]
   107a4:	210b      	movs	r1, #11
   107a6:	4393      	bics	r3, r2
   107a8:	706b      	strb	r3, [r5, #1]
   107aa:	2001      	movs	r0, #1
   107ac:	47b8      	blx	r7
   107ae:	0023      	movs	r3, r4
   107b0:	2701      	movs	r7, #1
   107b2:	33d8      	adds	r3, #216	; 0xd8
   107b4:	781b      	ldrb	r3, [r3, #0]
   107b6:	0030      	movs	r0, r6
   107b8:	0032      	movs	r2, r6
   107ba:	36ff      	adds	r6, #255	; 0xff
   107bc:	429a      	cmp	r2, r3
   107be:	d304      	bcc.n	107ca <LorawanLinkCheckConfigure+0x56>
   107c0:	2800      	cmp	r0, #0
   107c2:	d001      	beq.n	107c8 <LorawanLinkCheckConfigure+0x54>
   107c4:	34d8      	adds	r4, #216	; 0xd8
   107c6:	7023      	strb	r3, [r4, #0]
   107c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   107ca:	2103      	movs	r1, #3
   107cc:	4351      	muls	r1, r2
   107ce:	1861      	adds	r1, r4, r1
   107d0:	3191      	adds	r1, #145	; 0x91
   107d2:	780d      	ldrb	r5, [r1, #0]
   107d4:	2d02      	cmp	r5, #2
   107d6:	d103      	bne.n	107e0 <LorawanLinkCheckConfigure+0x6c>
   107d8:	0038      	movs	r0, r7
   107da:	3b01      	subs	r3, #1
   107dc:	700e      	strb	r6, [r1, #0]
   107de:	b2db      	uxtb	r3, r3
   107e0:	3201      	adds	r2, #1
   107e2:	b2d2      	uxtb	r2, r2
   107e4:	e7ea      	b.n	107bc <LorawanLinkCheckConfigure+0x48>
   107e6:	2302      	movs	r3, #2
   107e8:	786a      	ldrb	r2, [r5, #1]
   107ea:	210b      	movs	r1, #11
   107ec:	4313      	orrs	r3, r2
   107ee:	706b      	strb	r3, [r5, #1]
   107f0:	2001      	movs	r0, #1
   107f2:	47b8      	blx	r7
   107f4:	782b      	ldrb	r3, [r5, #0]
   107f6:	07db      	lsls	r3, r3, #31
   107f8:	d5e6      	bpl.n	107c8 <LorawanLinkCheckConfigure+0x54>
   107fa:	4b04      	ldr	r3, [pc, #16]	; (1080c <LorawanLinkCheckConfigure+0x98>)
   107fc:	4798      	blx	r3
   107fe:	e7e3      	b.n	107c8 <LorawanLinkCheckConfigure+0x54>
   10800:	20002b5c 	.word	0x20002b5c
   10804:	0000e0f9 	.word	0x0000e0f9
   10808:	0000f141 	.word	0x0000f141
   1080c:	000102f5 	.word	0x000102f5

00010810 <EncodeDeviceTimeReq>:
   10810:	4b08      	ldr	r3, [pc, #32]	; (10834 <EncodeDeviceTimeReq+0x24>)
   10812:	b510      	push	{r4, lr}
   10814:	001c      	movs	r4, r3
   10816:	34d8      	adds	r4, #216	; 0xd8
   10818:	7822      	ldrb	r2, [r4, #0]
   1081a:	2015      	movs	r0, #21
   1081c:	2a0f      	cmp	r2, #15
   1081e:	d808      	bhi.n	10832 <EncodeDeviceTimeReq+0x22>
   10820:	2103      	movs	r1, #3
   10822:	4351      	muls	r1, r2
   10824:	185b      	adds	r3, r3, r1
   10826:	210d      	movs	r1, #13
   10828:	3391      	adds	r3, #145	; 0x91
   1082a:	3201      	adds	r2, #1
   1082c:	7019      	strb	r1, [r3, #0]
   1082e:	7022      	strb	r2, [r4, #0]
   10830:	380d      	subs	r0, #13
   10832:	bd10      	pop	{r4, pc}
   10834:	20002b5c 	.word	0x20002b5c

00010838 <LORAWAN_ForceEnable>:
   10838:	2140      	movs	r1, #64	; 0x40
   1083a:	4b03      	ldr	r3, [pc, #12]	; (10848 <LORAWAN_ForceEnable+0x10>)
   1083c:	337c      	adds	r3, #124	; 0x7c
   1083e:	781a      	ldrb	r2, [r3, #0]
   10840:	438a      	bics	r2, r1
   10842:	701a      	strb	r2, [r3, #0]
   10844:	4770      	bx	lr
   10846:	46c0      	nop			; (mov r8, r8)
   10848:	20002b5c 	.word	0x20002b5c

0001084c <UpdateCurrentDataRate>:
   1084c:	b510      	push	{r4, lr}
   1084e:	4b04      	ldr	r3, [pc, #16]	; (10860 <UpdateCurrentDataRate+0x14>)
   10850:	210c      	movs	r1, #12
   10852:	33df      	adds	r3, #223	; 0xdf
   10854:	7018      	strb	r0, [r3, #0]
   10856:	2001      	movs	r0, #1
   10858:	4b02      	ldr	r3, [pc, #8]	; (10864 <UpdateCurrentDataRate+0x18>)
   1085a:	4798      	blx	r3
   1085c:	bd10      	pop	{r4, pc}
   1085e:	46c0      	nop			; (mov r8, r8)
   10860:	20002b5c 	.word	0x20002b5c
   10864:	0000e0f9 	.word	0x0000e0f9

00010868 <UpdateDLSettings>:
   10868:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1086a:	466b      	mov	r3, sp
   1086c:	1dde      	adds	r6, r3, #7
   1086e:	1d9c      	adds	r4, r3, #6
   10870:	71d8      	strb	r0, [r3, #7]
   10872:	7021      	strb	r1, [r4, #0]
   10874:	2017      	movs	r0, #23
   10876:	0031      	movs	r1, r6
   10878:	4d0c      	ldr	r5, [pc, #48]	; (108ac <UpdateDLSettings+0x44>)
   1087a:	47a8      	blx	r5
   1087c:	2808      	cmp	r0, #8
   1087e:	d107      	bne.n	10890 <UpdateDLSettings+0x28>
   10880:	4b0b      	ldr	r3, [pc, #44]	; (108b0 <UpdateDLSettings+0x48>)
   10882:	7832      	ldrb	r2, [r6, #0]
   10884:	336e      	adds	r3, #110	; 0x6e
   10886:	701a      	strb	r2, [r3, #0]
   10888:	2100      	movs	r1, #0
   1088a:	3807      	subs	r0, #7
   1088c:	4b09      	ldr	r3, [pc, #36]	; (108b4 <UpdateDLSettings+0x4c>)
   1088e:	4798      	blx	r3
   10890:	0021      	movs	r1, r4
   10892:	2018      	movs	r0, #24
   10894:	47a8      	blx	r5
   10896:	2808      	cmp	r0, #8
   10898:	d107      	bne.n	108aa <UpdateDLSettings+0x42>
   1089a:	2101      	movs	r1, #1
   1089c:	4b04      	ldr	r3, [pc, #16]	; (108b0 <UpdateDLSettings+0x48>)
   1089e:	7822      	ldrb	r2, [r4, #0]
   108a0:	33ee      	adds	r3, #238	; 0xee
   108a2:	701a      	strb	r2, [r3, #0]
   108a4:	0008      	movs	r0, r1
   108a6:	4b03      	ldr	r3, [pc, #12]	; (108b4 <UpdateDLSettings+0x4c>)
   108a8:	4798      	blx	r3
   108aa:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
   108ac:	0000d939 	.word	0x0000d939
   108b0:	20002b5c 	.word	0x20002b5c
   108b4:	0000e0f9 	.word	0x0000e0f9

000108b8 <UpdateTxPower>:
   108b8:	b510      	push	{r4, lr}
   108ba:	4b04      	ldr	r3, [pc, #16]	; (108cc <UpdateTxPower+0x14>)
   108bc:	210a      	movs	r1, #10
   108be:	33e1      	adds	r3, #225	; 0xe1
   108c0:	7018      	strb	r0, [r3, #0]
   108c2:	2000      	movs	r0, #0
   108c4:	4b02      	ldr	r3, [pc, #8]	; (108d0 <UpdateTxPower+0x18>)
   108c6:	4798      	blx	r3
   108c8:	bd10      	pop	{r4, pc}
   108ca:	46c0      	nop			; (mov r8, r8)
   108cc:	20002b5c 	.word	0x20002b5c
   108d0:	0000e0f9 	.word	0x0000e0f9

000108d4 <UpdateRetransmissionAckTimeoutState>:
   108d4:	4b10      	ldr	r3, [pc, #64]	; (10918 <UpdateRetransmissionAckTimeoutState+0x44>)
   108d6:	b513      	push	{r0, r1, r4, lr}
   108d8:	001a      	movs	r2, r3
   108da:	32f4      	adds	r2, #244	; 0xf4
   108dc:	7812      	ldrb	r2, [r2, #0]
   108de:	2a01      	cmp	r2, #1
   108e0:	d108      	bne.n	108f4 <UpdateRetransmissionAckTimeoutState+0x20>
   108e2:	0018      	movs	r0, r3
   108e4:	210e      	movs	r1, #14
   108e6:	307c      	adds	r0, #124	; 0x7c
   108e8:	7802      	ldrb	r2, [r0, #0]
   108ea:	438a      	bics	r2, r1
   108ec:	0011      	movs	r1, r2
   108ee:	220c      	movs	r2, #12
   108f0:	430a      	orrs	r2, r1
   108f2:	7002      	strb	r2, [r0, #0]
   108f4:	001a      	movs	r2, r3
   108f6:	32d2      	adds	r2, #210	; 0xd2
   108f8:	8811      	ldrh	r1, [r2, #0]
   108fa:	4a08      	ldr	r2, [pc, #32]	; (1091c <UpdateRetransmissionAckTimeoutState+0x48>)
   108fc:	4c08      	ldr	r4, [pc, #32]	; (10920 <UpdateRetransmissionAckTimeoutState+0x4c>)
   108fe:	5c9a      	ldrb	r2, [r3, r2]
   10900:	33e8      	adds	r3, #232	; 0xe8
   10902:	1a8a      	subs	r2, r1, r2
   10904:	21fa      	movs	r1, #250	; 0xfa
   10906:	0089      	lsls	r1, r1, #2
   10908:	4351      	muls	r1, r2
   1090a:	2200      	movs	r2, #0
   1090c:	7818      	ldrb	r0, [r3, #0]
   1090e:	9200      	str	r2, [sp, #0]
   10910:	4b04      	ldr	r3, [pc, #16]	; (10924 <UpdateRetransmissionAckTimeoutState+0x50>)
   10912:	47a0      	blx	r4
   10914:	bd13      	pop	{r0, r1, r4, pc}
   10916:	46c0      	nop			; (mov r8, r8)
   10918:	20002b5c 	.word	0x20002b5c
   1091c:	0000021f 	.word	0x0000021f
   10920:	0000ee29 	.word	0x0000ee29
   10924:	00012621 	.word	0x00012621

00010928 <UpdateReceiveWindow2Parameters>:
   10928:	4b06      	ldr	r3, [pc, #24]	; (10944 <UpdateReceiveWindow2Parameters+0x1c>)
   1092a:	b510      	push	{r4, lr}
   1092c:	001a      	movs	r2, r3
   1092e:	336a      	adds	r3, #106	; 0x6a
   10930:	8018      	strh	r0, [r3, #0]
   10932:	326e      	adds	r2, #110	; 0x6e
   10934:	0c00      	lsrs	r0, r0, #16
   10936:	8058      	strh	r0, [r3, #2]
   10938:	7011      	strb	r1, [r2, #0]
   1093a:	2001      	movs	r0, #1
   1093c:	2100      	movs	r1, #0
   1093e:	4b02      	ldr	r3, [pc, #8]	; (10948 <UpdateReceiveWindow2Parameters+0x20>)
   10940:	4798      	blx	r3
   10942:	bd10      	pop	{r4, pc}
   10944:	20002b5c 	.word	0x20002b5c
   10948:	0000e0f9 	.word	0x0000e0f9

0001094c <ResetParametersForConfirmedTransmission>:
   1094c:	4b0a      	ldr	r3, [pc, #40]	; (10978 <ResetParametersForConfirmedTransmission+0x2c>)
   1094e:	001a      	movs	r2, r3
   10950:	32f4      	adds	r2, #244	; 0xf4
   10952:	7812      	ldrb	r2, [r2, #0]
   10954:	2a01      	cmp	r2, #1
   10956:	d105      	bne.n	10964 <ResetParametersForConfirmedTransmission+0x18>
   10958:	0019      	movs	r1, r3
   1095a:	200e      	movs	r0, #14
   1095c:	317c      	adds	r1, #124	; 0x7c
   1095e:	780a      	ldrb	r2, [r1, #0]
   10960:	4382      	bics	r2, r0
   10962:	700a      	strb	r2, [r1, #0]
   10964:	001a      	movs	r2, r3
   10966:	2100      	movs	r1, #0
   10968:	338c      	adds	r3, #140	; 0x8c
   1096a:	32dc      	adds	r2, #220	; 0xdc
   1096c:	7011      	strb	r1, [r2, #0]
   1096e:	781a      	ldrb	r2, [r3, #0]
   10970:	3101      	adds	r1, #1
   10972:	438a      	bics	r2, r1
   10974:	701a      	strb	r2, [r3, #0]
   10976:	4770      	bx	lr
   10978:	20002b5c 	.word	0x20002b5c

0001097c <ResetParametersForUnconfirmedTransmission>:
   1097c:	4b07      	ldr	r3, [pc, #28]	; (1099c <ResetParametersForUnconfirmedTransmission+0x20>)
   1097e:	001a      	movs	r2, r3
   10980:	32f4      	adds	r2, #244	; 0xf4
   10982:	7812      	ldrb	r2, [r2, #0]
   10984:	2a01      	cmp	r2, #1
   10986:	d105      	bne.n	10994 <ResetParametersForUnconfirmedTransmission+0x18>
   10988:	0019      	movs	r1, r3
   1098a:	200e      	movs	r0, #14
   1098c:	317c      	adds	r1, #124	; 0x7c
   1098e:	780a      	ldrb	r2, [r1, #0]
   10990:	4382      	bics	r2, r0
   10992:	700a      	strb	r2, [r1, #0]
   10994:	2200      	movs	r2, #0
   10996:	33db      	adds	r3, #219	; 0xdb
   10998:	701a      	strb	r2, [r3, #0]
   1099a:	4770      	bx	lr
   1099c:	20002b5c 	.word	0x20002b5c

000109a0 <SetJoinFailState>:
   109a0:	b570      	push	{r4, r5, r6, lr}
   109a2:	4c15      	ldr	r4, [pc, #84]	; (109f8 <SetJoinFailState+0x58>)
   109a4:	2604      	movs	r6, #4
   109a6:	0025      	movs	r5, r4
   109a8:	358c      	adds	r5, #140	; 0x8c
   109aa:	782a      	ldrb	r2, [r5, #0]
   109ac:	0021      	movs	r1, r4
   109ae:	43b2      	bics	r2, r6
   109b0:	702a      	strb	r2, [r5, #0]
   109b2:	22f0      	movs	r2, #240	; 0xf0
   109b4:	317c      	adds	r1, #124	; 0x7c
   109b6:	780b      	ldrb	r3, [r1, #0]
   109b8:	4013      	ands	r3, r2
   109ba:	700b      	strb	r3, [r1, #0]
   109bc:	0023      	movs	r3, r4
   109be:	33ff      	adds	r3, #255	; 0xff
   109c0:	7c5b      	ldrb	r3, [r3, #17]
   109c2:	069b      	lsls	r3, r3, #26
   109c4:	d503      	bpl.n	109ce <SetJoinFailState+0x2e>
   109c6:	0023      	movs	r3, r4
   109c8:	2200      	movs	r2, #0
   109ca:	337b      	adds	r3, #123	; 0x7b
   109cc:	701a      	strb	r2, [r3, #0]
   109ce:	490b      	ldr	r1, [pc, #44]	; (109fc <SetJoinFailState+0x5c>)
   109d0:	794a      	ldrb	r2, [r1, #5]
   109d2:	790b      	ldrb	r3, [r1, #4]
   109d4:	0212      	lsls	r2, r2, #8
   109d6:	431a      	orrs	r2, r3
   109d8:	798b      	ldrb	r3, [r1, #6]
   109da:	041b      	lsls	r3, r3, #16
   109dc:	431a      	orrs	r2, r3
   109de:	79cb      	ldrb	r3, [r1, #7]
   109e0:	061b      	lsls	r3, r3, #24
   109e2:	4313      	orrs	r3, r2
   109e4:	d000      	beq.n	109e8 <SetJoinFailState+0x48>
   109e6:	4798      	blx	r3
   109e8:	2300      	movs	r3, #0
   109ea:	34f0      	adds	r4, #240	; 0xf0
   109ec:	7023      	strb	r3, [r4, #0]
   109ee:	210b      	movs	r1, #11
   109f0:	4b03      	ldr	r3, [pc, #12]	; (10a00 <SetJoinFailState+0x60>)
   109f2:	2001      	movs	r0, #1
   109f4:	4798      	blx	r3
   109f6:	bd70      	pop	{r4, r5, r6, pc}
   109f8:	20002b5c 	.word	0x20002b5c
   109fc:	20002ea4 	.word	0x20002ea4
   10a00:	0000e0f9 	.word	0x0000e0f9

00010a04 <ExecuteRxParamSetupReq>:
   10a04:	b5f0      	push	{r4, r5, r6, r7, lr}
   10a06:	b085      	sub	sp, #20
   10a08:	7805      	ldrb	r5, [r0, #0]
   10a0a:	0004      	movs	r4, r0
   10a0c:	1c41      	adds	r1, r0, #1
   10a0e:	2204      	movs	r2, #4
   10a10:	4b36      	ldr	r3, [pc, #216]	; (10aec <ExecuteRxParamSetupReq+0xe8>)
   10a12:	a803      	add	r0, sp, #12
   10a14:	4798      	blx	r3
   10a16:	2264      	movs	r2, #100	; 0x64
   10a18:	9b03      	ldr	r3, [sp, #12]
   10a1a:	a903      	add	r1, sp, #12
   10a1c:	021b      	lsls	r3, r3, #8
   10a1e:	0a1b      	lsrs	r3, r3, #8
   10a20:	4353      	muls	r3, r2
   10a22:	9303      	str	r3, [sp, #12]
   10a24:	1d23      	adds	r3, r4, #4
   10a26:	9301      	str	r3, [sp, #4]
   10a28:	072b      	lsls	r3, r5, #28
   10a2a:	0f1b      	lsrs	r3, r3, #28
   10a2c:	b2da      	uxtb	r2, r3
   10a2e:	9200      	str	r2, [sp, #0]
   10a30:	aa02      	add	r2, sp, #8
   10a32:	1c96      	adds	r6, r2, #2
   10a34:	066d      	lsls	r5, r5, #25
   10a36:	7033      	strb	r3, [r6, #0]
   10a38:	1cd7      	adds	r7, r2, #3
   10a3a:	0f6d      	lsrs	r5, r5, #29
   10a3c:	2001      	movs	r0, #1
   10a3e:	4b2c      	ldr	r3, [pc, #176]	; (10af0 <ExecuteRxParamSetupReq+0xec>)
   10a40:	703d      	strb	r5, [r7, #0]
   10a42:	4798      	blx	r3
   10a44:	4c2b      	ldr	r4, [pc, #172]	; (10af4 <ExecuteRxParamSetupReq+0xf0>)
   10a46:	2808      	cmp	r0, #8
   10a48:	d109      	bne.n	10a5e <ExecuteRxParamSetupReq+0x5a>
   10a4a:	0023      	movs	r3, r4
   10a4c:	33d8      	adds	r3, #216	; 0xd8
   10a4e:	781a      	ldrb	r2, [r3, #0]
   10a50:	2303      	movs	r3, #3
   10a52:	4353      	muls	r3, r2
   10a54:	18e3      	adds	r3, r4, r3
   10a56:	3390      	adds	r3, #144	; 0x90
   10a58:	789a      	ldrb	r2, [r3, #2]
   10a5a:	4310      	orrs	r0, r2
   10a5c:	7098      	strb	r0, [r3, #2]
   10a5e:	0031      	movs	r1, r6
   10a60:	200f      	movs	r0, #15
   10a62:	4e23      	ldr	r6, [pc, #140]	; (10af0 <ExecuteRxParamSetupReq+0xec>)
   10a64:	47b0      	blx	r6
   10a66:	2808      	cmp	r0, #8
   10a68:	d10a      	bne.n	10a80 <ExecuteRxParamSetupReq+0x7c>
   10a6a:	0023      	movs	r3, r4
   10a6c:	33d8      	adds	r3, #216	; 0xd8
   10a6e:	781a      	ldrb	r2, [r3, #0]
   10a70:	2303      	movs	r3, #3
   10a72:	4353      	muls	r3, r2
   10a74:	2210      	movs	r2, #16
   10a76:	18e3      	adds	r3, r4, r3
   10a78:	3390      	adds	r3, #144	; 0x90
   10a7a:	7899      	ldrb	r1, [r3, #2]
   10a7c:	430a      	orrs	r2, r1
   10a7e:	709a      	strb	r2, [r3, #2]
   10a80:	0039      	movs	r1, r7
   10a82:	2018      	movs	r0, #24
   10a84:	47b0      	blx	r6
   10a86:	2808      	cmp	r0, #8
   10a88:	d10a      	bne.n	10aa0 <ExecuteRxParamSetupReq+0x9c>
   10a8a:	0023      	movs	r3, r4
   10a8c:	33d8      	adds	r3, #216	; 0xd8
   10a8e:	781a      	ldrb	r2, [r3, #0]
   10a90:	2303      	movs	r3, #3
   10a92:	4353      	muls	r3, r2
   10a94:	2220      	movs	r2, #32
   10a96:	18e3      	adds	r3, r4, r3
   10a98:	3390      	adds	r3, #144	; 0x90
   10a9a:	7899      	ldrb	r1, [r3, #2]
   10a9c:	430a      	orrs	r2, r1
   10a9e:	709a      	strb	r2, [r3, #2]
   10aa0:	0023      	movs	r3, r4
   10aa2:	33d8      	adds	r3, #216	; 0xd8
   10aa4:	781a      	ldrb	r2, [r3, #0]
   10aa6:	2303      	movs	r3, #3
   10aa8:	4353      	muls	r3, r2
   10aaa:	18e3      	adds	r3, r4, r3
   10aac:	3390      	adds	r3, #144	; 0x90
   10aae:	789e      	ldrb	r6, [r3, #2]
   10ab0:	06f3      	lsls	r3, r6, #27
   10ab2:	d518      	bpl.n	10ae6 <ExecuteRxParamSetupReq+0xe2>
   10ab4:	0733      	lsls	r3, r6, #28
   10ab6:	d516      	bpl.n	10ae6 <ExecuteRxParamSetupReq+0xe2>
   10ab8:	06b6      	lsls	r6, r6, #26
   10aba:	0ff6      	lsrs	r6, r6, #31
   10abc:	2e01      	cmp	r6, #1
   10abe:	d112      	bne.n	10ae6 <ExecuteRxParamSetupReq+0xe2>
   10ac0:	0023      	movs	r3, r4
   10ac2:	33ee      	adds	r3, #238	; 0xee
   10ac4:	701d      	strb	r5, [r3, #0]
   10ac6:	0031      	movs	r1, r6
   10ac8:	0030      	movs	r0, r6
   10aca:	4d0b      	ldr	r5, [pc, #44]	; (10af8 <ExecuteRxParamSetupReq+0xf4>)
   10acc:	47a8      	blx	r5
   10ace:	9900      	ldr	r1, [sp, #0]
   10ad0:	9803      	ldr	r0, [sp, #12]
   10ad2:	4b0a      	ldr	r3, [pc, #40]	; (10afc <ExecuteRxParamSetupReq+0xf8>)
   10ad4:	4798      	blx	r3
   10ad6:	2340      	movs	r3, #64	; 0x40
   10ad8:	347c      	adds	r4, #124	; 0x7c
   10ada:	7862      	ldrb	r2, [r4, #1]
   10adc:	210b      	movs	r1, #11
   10ade:	4313      	orrs	r3, r2
   10ae0:	7063      	strb	r3, [r4, #1]
   10ae2:	0030      	movs	r0, r6
   10ae4:	47a8      	blx	r5
   10ae6:	9801      	ldr	r0, [sp, #4]
   10ae8:	b005      	add	sp, #20
   10aea:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10aec:	00019da5 	.word	0x00019da5
   10af0:	0000d939 	.word	0x0000d939
   10af4:	20002b5c 	.word	0x20002b5c
   10af8:	0000e0f9 	.word	0x0000e0f9
   10afc:	00010929 	.word	0x00010929

00010b00 <ExecuteDutyCycle>:
   10b00:	b570      	push	{r4, r5, r6, lr}
   10b02:	7803      	ldrb	r3, [r0, #0]
   10b04:	1c46      	adds	r6, r0, #1
   10b06:	2b0f      	cmp	r3, #15
   10b08:	d80f      	bhi.n	10b2a <ExecuteDutyCycle+0x2a>
   10b0a:	4c09      	ldr	r4, [pc, #36]	; (10b30 <ExecuteDutyCycle+0x30>)
   10b0c:	210b      	movs	r1, #11
   10b0e:	0022      	movs	r2, r4
   10b10:	2000      	movs	r0, #0
   10b12:	3290      	adds	r2, #144	; 0x90
   10b14:	4d07      	ldr	r5, [pc, #28]	; (10b34 <ExecuteDutyCycle+0x34>)
   10b16:	7013      	strb	r3, [r2, #0]
   10b18:	47a8      	blx	r5
   10b1a:	2320      	movs	r3, #32
   10b1c:	347c      	adds	r4, #124	; 0x7c
   10b1e:	7862      	ldrb	r2, [r4, #1]
   10b20:	210b      	movs	r1, #11
   10b22:	4313      	orrs	r3, r2
   10b24:	7063      	strb	r3, [r4, #1]
   10b26:	2001      	movs	r0, #1
   10b28:	47a8      	blx	r5
   10b2a:	0030      	movs	r0, r6
   10b2c:	bd70      	pop	{r4, r5, r6, pc}
   10b2e:	46c0      	nop			; (mov r8, r8)
   10b30:	20002b5c 	.word	0x20002b5c
   10b34:	0000e0f9 	.word	0x0000e0f9

00010b38 <ExecuteDlChannel>:
   10b38:	b5f0      	push	{r4, r5, r6, r7, lr}
   10b3a:	b089      	sub	sp, #36	; 0x24
   10b3c:	7805      	ldrb	r5, [r0, #0]
   10b3e:	ab02      	add	r3, sp, #8
   10b40:	1c41      	adds	r1, r0, #1
   10b42:	0007      	movs	r7, r0
   10b44:	719d      	strb	r5, [r3, #6]
   10b46:	1d9e      	adds	r6, r3, #6
   10b48:	2204      	movs	r2, #4
   10b4a:	4b23      	ldr	r3, [pc, #140]	; (10bd8 <ExecuteDlChannel+0xa0>)
   10b4c:	a805      	add	r0, sp, #20
   10b4e:	4798      	blx	r3
   10b50:	9b05      	ldr	r3, [sp, #20]
   10b52:	a904      	add	r1, sp, #16
   10b54:	021c      	lsls	r4, r3, #8
   10b56:	2364      	movs	r3, #100	; 0x64
   10b58:	0a24      	lsrs	r4, r4, #8
   10b5a:	435c      	muls	r4, r3
   10b5c:	1d3b      	adds	r3, r7, #4
   10b5e:	9301      	str	r3, [sp, #4]
   10b60:	2301      	movs	r3, #1
   10b62:	2015      	movs	r0, #21
   10b64:	704b      	strb	r3, [r1, #1]
   10b66:	4b1d      	ldr	r3, [pc, #116]	; (10bdc <ExecuteDlChannel+0xa4>)
   10b68:	9405      	str	r4, [sp, #20]
   10b6a:	700d      	strb	r5, [r1, #0]
   10b6c:	4798      	blx	r3
   10b6e:	2808      	cmp	r0, #8
   10b70:	d12f      	bne.n	10bd2 <ExecuteDlChannel+0x9a>
   10b72:	ab02      	add	r3, sp, #8
   10b74:	1ddd      	adds	r5, r3, #7
   10b76:	2300      	movs	r3, #0
   10b78:	702b      	strb	r3, [r5, #0]
   10b7a:	7833      	ldrb	r3, [r6, #0]
   10b7c:	af06      	add	r7, sp, #24
   10b7e:	713b      	strb	r3, [r7, #4]
   10b80:	002a      	movs	r2, r5
   10b82:	0031      	movs	r1, r6
   10b84:	300e      	adds	r0, #14
   10b86:	4b16      	ldr	r3, [pc, #88]	; (10be0 <ExecuteDlChannel+0xa8>)
   10b88:	9406      	str	r4, [sp, #24]
   10b8a:	4798      	blx	r3
   10b8c:	280a      	cmp	r0, #10
   10b8e:	d00d      	beq.n	10bac <ExecuteDlChannel+0x74>
   10b90:	782a      	ldrb	r2, [r5, #0]
   10b92:	2a01      	cmp	r2, #1
   10b94:	d10a      	bne.n	10bac <ExecuteDlChannel+0x74>
   10b96:	4b13      	ldr	r3, [pc, #76]	; (10be4 <ExecuteDlChannel+0xac>)
   10b98:	0019      	movs	r1, r3
   10b9a:	31d8      	adds	r1, #216	; 0xd8
   10b9c:	7808      	ldrb	r0, [r1, #0]
   10b9e:	2103      	movs	r1, #3
   10ba0:	4341      	muls	r1, r0
   10ba2:	185b      	adds	r3, r3, r1
   10ba4:	3390      	adds	r3, #144	; 0x90
   10ba6:	78d9      	ldrb	r1, [r3, #3]
   10ba8:	430a      	orrs	r2, r1
   10baa:	70da      	strb	r2, [r3, #3]
   10bac:	0039      	movs	r1, r7
   10bae:	2034      	movs	r0, #52	; 0x34
   10bb0:	4b0d      	ldr	r3, [pc, #52]	; (10be8 <ExecuteDlChannel+0xb0>)
   10bb2:	4798      	blx	r3
   10bb4:	2808      	cmp	r0, #8
   10bb6:	d10c      	bne.n	10bd2 <ExecuteDlChannel+0x9a>
   10bb8:	4b0a      	ldr	r3, [pc, #40]	; (10be4 <ExecuteDlChannel+0xac>)
   10bba:	001a      	movs	r2, r3
   10bbc:	32d8      	adds	r2, #216	; 0xd8
   10bbe:	7811      	ldrb	r1, [r2, #0]
   10bc0:	2203      	movs	r2, #3
   10bc2:	434a      	muls	r2, r1
   10bc4:	189b      	adds	r3, r3, r2
   10bc6:	2280      	movs	r2, #128	; 0x80
   10bc8:	3390      	adds	r3, #144	; 0x90
   10bca:	7899      	ldrb	r1, [r3, #2]
   10bcc:	4252      	negs	r2, r2
   10bce:	430a      	orrs	r2, r1
   10bd0:	709a      	strb	r2, [r3, #2]
   10bd2:	9801      	ldr	r0, [sp, #4]
   10bd4:	b009      	add	sp, #36	; 0x24
   10bd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10bd8:	00019da5 	.word	0x00019da5
   10bdc:	0000d939 	.word	0x0000d939
   10be0:	0000d91d 	.word	0x0000d91d
   10be4:	20002b5c 	.word	0x20002b5c
   10be8:	0000da45 	.word	0x0000da45

00010bec <ExecuteTxParamSetup>:
   10bec:	220f      	movs	r2, #15
   10bee:	b513      	push	{r0, r1, r4, lr}
   10bf0:	7803      	ldrb	r3, [r0, #0]
   10bf2:	4c0f      	ldr	r4, [pc, #60]	; (10c30 <ExecuteTxParamSetup+0x44>)
   10bf4:	401a      	ands	r2, r3
   10bf6:	5ca2      	ldrb	r2, [r4, r2]
   10bf8:	2401      	movs	r4, #1
   10bfa:	a901      	add	r1, sp, #4
   10bfc:	700a      	strb	r2, [r1, #0]
   10bfe:	111a      	asrs	r2, r3, #4
   10c00:	115b      	asrs	r3, r3, #5
   10c02:	4023      	ands	r3, r4
   10c04:	40a3      	lsls	r3, r4
   10c06:	4022      	ands	r2, r4
   10c08:	4313      	orrs	r3, r2
   10c0a:	704b      	strb	r3, [r1, #1]
   10c0c:	1904      	adds	r4, r0, r4
   10c0e:	4b09      	ldr	r3, [pc, #36]	; (10c34 <ExecuteTxParamSetup+0x48>)
   10c10:	2035      	movs	r0, #53	; 0x35
   10c12:	4798      	blx	r3
   10c14:	2808      	cmp	r0, #8
   10c16:	d009      	beq.n	10c2c <ExecuteTxParamSetup+0x40>
   10c18:	4b07      	ldr	r3, [pc, #28]	; (10c38 <ExecuteTxParamSetup+0x4c>)
   10c1a:	001a      	movs	r2, r3
   10c1c:	32d8      	adds	r2, #216	; 0xd8
   10c1e:	7811      	ldrb	r1, [r2, #0]
   10c20:	2203      	movs	r2, #3
   10c22:	434a      	muls	r2, r1
   10c24:	189b      	adds	r3, r3, r2
   10c26:	22ff      	movs	r2, #255	; 0xff
   10c28:	3391      	adds	r3, #145	; 0x91
   10c2a:	701a      	strb	r2, [r3, #0]
   10c2c:	0020      	movs	r0, r4
   10c2e:	bd16      	pop	{r1, r2, r4, pc}
   10c30:	000202cf 	.word	0x000202cf
   10c34:	0000da45 	.word	0x0000da45
   10c38:	20002b5c 	.word	0x20002b5c

00010c3c <ExecuteLinkAdr>:
   10c3c:	220f      	movs	r2, #15
   10c3e:	b5f0      	push	{r4, r5, r6, r7, lr}
   10c40:	0005      	movs	r5, r0
   10c42:	7803      	ldrb	r3, [r0, #0]
   10c44:	b089      	sub	sp, #36	; 0x24
   10c46:	401a      	ands	r2, r3
   10c48:	a905      	add	r1, sp, #20
   10c4a:	700a      	strb	r2, [r1, #0]
   10c4c:	aa04      	add	r2, sp, #16
   10c4e:	1d96      	adds	r6, r2, #6
   10c50:	091b      	lsrs	r3, r3, #4
   10c52:	7153      	strb	r3, [r2, #5]
   10c54:	1c41      	adds	r1, r0, #1
   10c56:	2202      	movs	r2, #2
   10c58:	0030      	movs	r0, r6
   10c5a:	4b35      	ldr	r3, [pc, #212]	; (10d30 <ExecuteLinkAdr+0xf4>)
   10c5c:	4798      	blx	r3
   10c5e:	2201      	movs	r2, #1
   10c60:	1d2b      	adds	r3, r5, #4
   10c62:	9303      	str	r3, [sp, #12]
   10c64:	78eb      	ldrb	r3, [r5, #3]
   10c66:	4f33      	ldr	r7, [pc, #204]	; (10d34 <ExecuteLinkAdr+0xf8>)
   10c68:	4c33      	ldr	r4, [pc, #204]	; (10d38 <ExecuteLinkAdr+0xfc>)
   10c6a:	065b      	lsls	r3, r3, #25
   10c6c:	0f5b      	lsrs	r3, r3, #29
   10c6e:	9300      	str	r3, [sp, #0]
   10c70:	5d3b      	ldrb	r3, [r7, r4]
   10c72:	a906      	add	r1, sp, #24
   10c74:	4393      	bics	r3, r2
   10c76:	1892      	adds	r2, r2, r2
   10c78:	4393      	bics	r3, r2
   10c7a:	3202      	adds	r2, #2
   10c7c:	4393      	bics	r3, r2
   10c7e:	553b      	strb	r3, [r7, r4]
   10c80:	466b      	mov	r3, sp
   10c82:	781b      	ldrb	r3, [r3, #0]
   10c84:	8836      	ldrh	r6, [r6, #0]
   10c86:	700b      	strb	r3, [r1, #0]
   10c88:	2038      	movs	r0, #56	; 0x38
   10c8a:	4b2c      	ldr	r3, [pc, #176]	; (10d3c <ExecuteLinkAdr+0x100>)
   10c8c:	804e      	strh	r6, [r1, #2]
   10c8e:	4798      	blx	r3
   10c90:	2808      	cmp	r0, #8
   10c92:	d116      	bne.n	10cc2 <ExecuteLinkAdr+0x86>
   10c94:	466b      	mov	r3, sp
   10c96:	781b      	ldrb	r3, [r3, #0]
   10c98:	a907      	add	r1, sp, #28
   10c9a:	708b      	strb	r3, [r1, #2]
   10c9c:	3014      	adds	r0, #20
   10c9e:	4b28      	ldr	r3, [pc, #160]	; (10d40 <ExecuteLinkAdr+0x104>)
   10ca0:	800e      	strh	r6, [r1, #0]
   10ca2:	4798      	blx	r3
   10ca4:	2201      	movs	r2, #1
   10ca6:	5d3b      	ldrb	r3, [r7, r4]
   10ca8:	2010      	movs	r0, #16
   10caa:	4313      	orrs	r3, r2
   10cac:	553b      	strb	r3, [r7, r4]
   10cae:	ab04      	add	r3, sp, #16
   10cb0:	1d59      	adds	r1, r3, #5
   10cb2:	4b22      	ldr	r3, [pc, #136]	; (10d3c <ExecuteLinkAdr+0x100>)
   10cb4:	4798      	blx	r3
   10cb6:	2808      	cmp	r0, #8
   10cb8:	d103      	bne.n	10cc2 <ExecuteLinkAdr+0x86>
   10cba:	2202      	movs	r2, #2
   10cbc:	5d3b      	ldrb	r3, [r7, r4]
   10cbe:	4313      	orrs	r3, r2
   10cc0:	553b      	strb	r3, [r7, r4]
   10cc2:	af05      	add	r7, sp, #20
   10cc4:	4b1d      	ldr	r3, [pc, #116]	; (10d3c <ExecuteLinkAdr+0x100>)
   10cc6:	0039      	movs	r1, r7
   10cc8:	201d      	movs	r0, #29
   10cca:	4798      	blx	r3
   10ccc:	4b19      	ldr	r3, [pc, #100]	; (10d34 <ExecuteLinkAdr+0xf8>)
   10cce:	2808      	cmp	r0, #8
   10cd0:	d103      	bne.n	10cda <ExecuteLinkAdr+0x9e>
   10cd2:	2204      	movs	r2, #4
   10cd4:	5d19      	ldrb	r1, [r3, r4]
   10cd6:	430a      	orrs	r2, r1
   10cd8:	551a      	strb	r2, [r3, r4]
   10cda:	2207      	movs	r2, #7
   10cdc:	5d19      	ldrb	r1, [r3, r4]
   10cde:	4011      	ands	r1, r2
   10ce0:	4291      	cmp	r1, r2
   10ce2:	d11d      	bne.n	10d20 <ExecuteLinkAdr+0xe4>
   10ce4:	4a17      	ldr	r2, [pc, #92]	; (10d44 <ExecuteLinkAdr+0x108>)
   10ce6:	2470      	movs	r4, #112	; 0x70
   10ce8:	549e      	strb	r6, [r3, r2]
   10cea:	189a      	adds	r2, r3, r2
   10cec:	0a36      	lsrs	r6, r6, #8
   10cee:	7056      	strb	r6, [r2, #1]
   10cf0:	aa04      	add	r2, sp, #16
   10cf2:	7950      	ldrb	r0, [r2, #5]
   10cf4:	2286      	movs	r2, #134	; 0x86
   10cf6:	0092      	lsls	r2, r2, #2
   10cf8:	5498      	strb	r0, [r3, r2]
   10cfa:	78ea      	ldrb	r2, [r5, #3]
   10cfc:	4812      	ldr	r0, [pc, #72]	; (10d48 <ExecuteLinkAdr+0x10c>)
   10cfe:	0912      	lsrs	r2, r2, #4
   10d00:	400a      	ands	r2, r1
   10d02:	5c19      	ldrb	r1, [r3, r0]
   10d04:	0112      	lsls	r2, r2, #4
   10d06:	43a1      	bics	r1, r4
   10d08:	430a      	orrs	r2, r1
   10d0a:	541a      	strb	r2, [r3, r0]
   10d0c:	78e9      	ldrb	r1, [r5, #3]
   10d0e:	3c61      	subs	r4, #97	; 0x61
   10d10:	b2d2      	uxtb	r2, r2
   10d12:	4021      	ands	r1, r4
   10d14:	43a2      	bics	r2, r4
   10d16:	430a      	orrs	r2, r1
   10d18:	541a      	strb	r2, [r3, r0]
   10d1a:	7839      	ldrb	r1, [r7, #0]
   10d1c:	4a0b      	ldr	r2, [pc, #44]	; (10d4c <ExecuteLinkAdr+0x110>)
   10d1e:	5499      	strb	r1, [r3, r2]
   10d20:	4904      	ldr	r1, [pc, #16]	; (10d34 <ExecuteLinkAdr+0xf8>)
   10d22:	4a0b      	ldr	r2, [pc, #44]	; (10d50 <ExecuteLinkAdr+0x114>)
   10d24:	9803      	ldr	r0, [sp, #12]
   10d26:	5c8b      	ldrb	r3, [r1, r2]
   10d28:	3301      	adds	r3, #1
   10d2a:	548b      	strb	r3, [r1, r2]
   10d2c:	b009      	add	sp, #36	; 0x24
   10d2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10d30:	00019da5 	.word	0x00019da5
   10d34:	20002b5c 	.word	0x20002b5c
   10d38:	00000217 	.word	0x00000217
   10d3c:	0000d939 	.word	0x0000d939
   10d40:	0000da45 	.word	0x0000da45
   10d44:	0000021b 	.word	0x0000021b
   10d48:	0000021d 	.word	0x0000021d
   10d4c:	00000219 	.word	0x00000219
   10d50:	0000021a 	.word	0x0000021a

00010d54 <ExecuteDevTimeAns>:
   10d54:	b510      	push	{r4, lr}
   10d56:	0001      	movs	r1, r0
   10d58:	0004      	movs	r4, r0
   10d5a:	2204      	movs	r2, #4
   10d5c:	4b04      	ldr	r3, [pc, #16]	; (10d70 <ExecuteDevTimeAns+0x1c>)
   10d5e:	4805      	ldr	r0, [pc, #20]	; (10d74 <ExecuteDevTimeAns+0x20>)
   10d60:	4798      	blx	r3
   10d62:	238b      	movs	r3, #139	; 0x8b
   10d64:	7921      	ldrb	r1, [r4, #4]
   10d66:	4a04      	ldr	r2, [pc, #16]	; (10d78 <ExecuteDevTimeAns+0x24>)
   10d68:	009b      	lsls	r3, r3, #2
   10d6a:	1d60      	adds	r0, r4, #5
   10d6c:	54d1      	strb	r1, [r2, r3]
   10d6e:	bd10      	pop	{r4, pc}
   10d70:	00019da5 	.word	0x00019da5
   10d74:	20002d84 	.word	0x20002d84
   10d78:	20002b5c 	.word	0x20002b5c

00010d7c <PrepareJoinRequestFrame>:
   10d7c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   10d7e:	2210      	movs	r2, #16
   10d80:	4d22      	ldr	r5, [pc, #136]	; (10e0c <PrepareJoinRequestFrame+0x90>)
   10d82:	4b23      	ldr	r3, [pc, #140]	; (10e10 <PrepareJoinRequestFrame+0x94>)
   10d84:	32ff      	adds	r2, #255	; 0xff
   10d86:	2100      	movs	r1, #0
   10d88:	0028      	movs	r0, r5
   10d8a:	4798      	blx	r3
   10d8c:	2300      	movs	r3, #0
   10d8e:	4c21      	ldr	r4, [pc, #132]	; (10e14 <PrepareJoinRequestFrame+0x98>)
   10d90:	702b      	strb	r3, [r5, #0]
   10d92:	4b21      	ldr	r3, [pc, #132]	; (10e18 <PrepareJoinRequestFrame+0x9c>)
   10d94:	5ce3      	ldrb	r3, [r4, r3]
   10d96:	2b00      	cmp	r3, #0
   10d98:	d006      	beq.n	10da8 <PrepareJoinRequestFrame+0x2c>
   10d9a:	4920      	ldr	r1, [pc, #128]	; (10e1c <PrepareJoinRequestFrame+0xa0>)
   10d9c:	2006      	movs	r0, #6
   10d9e:	4e20      	ldr	r6, [pc, #128]	; (10e20 <PrepareJoinRequestFrame+0xa4>)
   10da0:	47b0      	blx	r6
   10da2:	4920      	ldr	r1, [pc, #128]	; (10e24 <PrepareJoinRequestFrame+0xa8>)
   10da4:	2007      	movs	r0, #7
   10da6:	47b0      	blx	r6
   10da8:	2300      	movs	r3, #0
   10daa:	205c      	movs	r0, #92	; 0x5c
   10dac:	1ac1      	subs	r1, r0, r3
   10dae:	5c61      	ldrb	r1, [r4, r1]
   10db0:	18ea      	adds	r2, r5, r3
   10db2:	3301      	adds	r3, #1
   10db4:	7051      	strb	r1, [r2, #1]
   10db6:	2b08      	cmp	r3, #8
   10db8:	d1f8      	bne.n	10dac <PrepareJoinRequestFrame+0x30>
   10dba:	2300      	movs	r3, #0
   10dbc:	2064      	movs	r0, #100	; 0x64
   10dbe:	1ac1      	subs	r1, r0, r3
   10dc0:	5c61      	ldrb	r1, [r4, r1]
   10dc2:	18ea      	adds	r2, r5, r3
   10dc4:	3301      	adds	r3, #1
   10dc6:	7251      	strb	r1, [r2, #9]
   10dc8:	2b08      	cmp	r3, #8
   10dca:	d1f8      	bne.n	10dbe <PrepareJoinRequestFrame+0x42>
   10dcc:	4b16      	ldr	r3, [pc, #88]	; (10e28 <PrepareJoinRequestFrame+0xac>)
   10dce:	4798      	blx	r3
   10dd0:	4b16      	ldr	r3, [pc, #88]	; (10e2c <PrepareJoinRequestFrame+0xb0>)
   10dd2:	4917      	ldr	r1, [pc, #92]	; (10e30 <PrepareJoinRequestFrame+0xb4>)
   10dd4:	4798      	blx	r3
   10dd6:	34c4      	adds	r4, #196	; 0xc4
   10dd8:	8021      	strh	r1, [r4, #0]
   10dda:	2202      	movs	r2, #2
   10ddc:	0021      	movs	r1, r4
   10dde:	4815      	ldr	r0, [pc, #84]	; (10e34 <PrepareJoinRequestFrame+0xb8>)
   10de0:	4c15      	ldr	r4, [pc, #84]	; (10e38 <PrepareJoinRequestFrame+0xbc>)
   10de2:	47a0      	blx	r4
   10de4:	2313      	movs	r3, #19
   10de6:	4e15      	ldr	r6, [pc, #84]	; (10e3c <PrepareJoinRequestFrame+0xc0>)
   10de8:	9300      	str	r3, [sp, #0]
   10dea:	0032      	movs	r2, r6
   10dec:	002b      	movs	r3, r5
   10dee:	2100      	movs	r1, #0
   10df0:	4d13      	ldr	r5, [pc, #76]	; (10e40 <PrepareJoinRequestFrame+0xc4>)
   10df2:	4814      	ldr	r0, [pc, #80]	; (10e44 <PrepareJoinRequestFrame+0xc8>)
   10df4:	47a8      	blx	r5
   10df6:	0031      	movs	r1, r6
   10df8:	2204      	movs	r2, #4
   10dfa:	a803      	add	r0, sp, #12
   10dfc:	47a0      	blx	r4
   10dfe:	2204      	movs	r2, #4
   10e00:	a903      	add	r1, sp, #12
   10e02:	4811      	ldr	r0, [pc, #68]	; (10e48 <PrepareJoinRequestFrame+0xcc>)
   10e04:	47a0      	blx	r4
   10e06:	2017      	movs	r0, #23
   10e08:	b004      	add	sp, #16
   10e0a:	bd70      	pop	{r4, r5, r6, pc}
   10e0c:	20002d91 	.word	0x20002d91
   10e10:	00019ec9 	.word	0x00019ec9
   10e14:	20002b5c 	.word	0x20002b5c
   10e18:	00000221 	.word	0x00000221
   10e1c:	20002bb1 	.word	0x20002bb1
   10e20:	0000dd5d 	.word	0x0000dd5d
   10e24:	20002bb9 	.word	0x20002bb9
   10e28:	0001a069 	.word	0x0001a069
   10e2c:	00016921 	.word	0x00016921
   10e30:	0000ffff 	.word	0x0000ffff
   10e34:	20002da2 	.word	0x20002da2
   10e38:	00019da5 	.word	0x00019da5
   10e3c:	20001110 	.word	0x20001110
   10e40:	0000de05 	.word	0x0000de05
   10e44:	20002ba1 	.word	0x20002ba1
   10e48:	20002da4 	.word	0x20002da4

00010e4c <ConfigureRadioRx>:
   10e4c:	b5f0      	push	{r4, r5, r6, r7, lr}
   10e4e:	b087      	sub	sp, #28
   10e50:	466b      	mov	r3, sp
   10e52:	2600      	movs	r6, #0
   10e54:	1ddc      	adds	r4, r3, #7
   10e56:	71d8      	strb	r0, [r3, #7]
   10e58:	729e      	strb	r6, [r3, #10]
   10e5a:	466a      	mov	r2, sp
   10e5c:	2301      	movs	r3, #1
   10e5e:	72d3      	strb	r3, [r2, #11]
   10e60:	2215      	movs	r2, #21
   10e62:	ad03      	add	r5, sp, #12
   10e64:	4f11      	ldr	r7, [pc, #68]	; (10eac <ConfigureRadioRx+0x60>)
   10e66:	9100      	str	r1, [sp, #0]
   10e68:	446a      	add	r2, sp
   10e6a:	0021      	movs	r1, r4
   10e6c:	2023      	movs	r0, #35	; 0x23
   10e6e:	80ae      	strh	r6, [r5, #4]
   10e70:	47b8      	blx	r7
   10e72:	2216      	movs	r2, #22
   10e74:	0021      	movs	r1, r4
   10e76:	446a      	add	r2, sp
   10e78:	2024      	movs	r0, #36	; 0x24
   10e7a:	47b8      	blx	r7
   10e7c:	2217      	movs	r2, #23
   10e7e:	0021      	movs	r1, r4
   10e80:	446a      	add	r2, sp
   10e82:	2025      	movs	r0, #37	; 0x25
   10e84:	47b8      	blx	r7
   10e86:	9b00      	ldr	r3, [sp, #0]
   10e88:	0028      	movs	r0, r5
   10e8a:	9303      	str	r3, [sp, #12]
   10e8c:	4b08      	ldr	r3, [pc, #32]	; (10eb0 <ConfigureRadioRx+0x64>)
   10e8e:	80ae      	strh	r6, [r5, #4]
   10e90:	4798      	blx	r3
   10e92:	230a      	movs	r3, #10
   10e94:	446b      	add	r3, sp
   10e96:	0019      	movs	r1, r3
   10e98:	4c06      	ldr	r4, [pc, #24]	; (10eb4 <ConfigureRadioRx+0x68>)
   10e9a:	2014      	movs	r0, #20
   10e9c:	47a0      	blx	r4
   10e9e:	230b      	movs	r3, #11
   10ea0:	446b      	add	r3, sp
   10ea2:	0019      	movs	r1, r3
   10ea4:	2006      	movs	r0, #6
   10ea6:	47a0      	blx	r4
   10ea8:	b007      	add	sp, #28
   10eaa:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10eac:	0000d91d 	.word	0x0000d91d
   10eb0:	00010261 	.word	0x00010261
   10eb4:	00014c69 	.word	0x00014c69

00010eb8 <LorawanReceiveWindow1Callback>:
   10eb8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   10eba:	4c18      	ldr	r4, [pc, #96]	; (10f1c <LorawanReceiveWindow1Callback+0x64>)
   10ebc:	0023      	movs	r3, r4
   10ebe:	337c      	adds	r3, #124	; 0x7c
   10ec0:	781b      	ldrb	r3, [r3, #0]
   10ec2:	b25a      	sxtb	r2, r3
   10ec4:	2a00      	cmp	r2, #0
   10ec6:	db28      	blt.n	10f1a <LorawanReceiveWindow1Callback+0x62>
   10ec8:	0022      	movs	r2, r4
   10eca:	32f4      	adds	r2, #244	; 0xf4
   10ecc:	7812      	ldrb	r2, [r2, #0]
   10ece:	2a04      	cmp	r2, #4
   10ed0:	d103      	bne.n	10eda <LorawanReceiveWindow1Callback+0x22>
   10ed2:	07db      	lsls	r3, r3, #31
   10ed4:	d501      	bpl.n	10eda <LorawanReceiveWindow1Callback+0x22>
   10ed6:	4b12      	ldr	r3, [pc, #72]	; (10f20 <LorawanReceiveWindow1Callback+0x68>)
   10ed8:	4798      	blx	r3
   10eda:	0021      	movs	r1, r4
   10edc:	220e      	movs	r2, #14
   10ede:	317c      	adds	r1, #124	; 0x7c
   10ee0:	780b      	ldrb	r3, [r1, #0]
   10ee2:	ad01      	add	r5, sp, #4
   10ee4:	4393      	bics	r3, r2
   10ee6:	001a      	movs	r2, r3
   10ee8:	2306      	movs	r3, #6
   10eea:	4313      	orrs	r3, r2
   10eec:	0022      	movs	r2, r4
   10eee:	700b      	strb	r3, [r1, #0]
   10ef0:	3268      	adds	r2, #104	; 0x68
   10ef2:	6e63      	ldr	r3, [r4, #100]	; 0x64
   10ef4:	7811      	ldrb	r1, [r2, #0]
   10ef6:	0a1b      	lsrs	r3, r3, #8
   10ef8:	3469      	adds	r4, #105	; 0x69
   10efa:	0609      	lsls	r1, r1, #24
   10efc:	4319      	orrs	r1, r3
   10efe:	7820      	ldrb	r0, [r4, #0]
   10f00:	4b08      	ldr	r3, [pc, #32]	; (10f24 <LorawanReceiveWindow1Callback+0x6c>)
   10f02:	4798      	blx	r3
   10f04:	2300      	movs	r3, #0
   10f06:	702b      	strb	r3, [r5, #0]
   10f08:	466b      	mov	r3, sp
   10f0a:	0021      	movs	r1, r4
   10f0c:	1d9a      	adds	r2, r3, #6
   10f0e:	2003      	movs	r0, #3
   10f10:	4b05      	ldr	r3, [pc, #20]	; (10f28 <LorawanReceiveWindow1Callback+0x70>)
   10f12:	4798      	blx	r3
   10f14:	0028      	movs	r0, r5
   10f16:	4b05      	ldr	r3, [pc, #20]	; (10f2c <LorawanReceiveWindow1Callback+0x74>)
   10f18:	4798      	blx	r3
   10f1a:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
   10f1c:	20002b5c 	.word	0x20002b5c
   10f20:	00014299 	.word	0x00014299
   10f24:	00010e4d 	.word	0x00010e4d
   10f28:	0000d91d 	.word	0x0000d91d
   10f2c:	00015e6d 	.word	0x00015e6d

00010f30 <ConfigureRadioTx>:
   10f30:	b5f0      	push	{r4, r5, r6, r7, lr}
   10f32:	2517      	movs	r5, #23
   10f34:	2300      	movs	r3, #0
   10f36:	2616      	movs	r6, #22
   10f38:	2701      	movs	r7, #1
   10f3a:	b087      	sub	sp, #28
   10f3c:	ac01      	add	r4, sp, #4
   10f3e:	446d      	add	r5, sp
   10f40:	9001      	str	r0, [sp, #4]
   10f42:	702b      	strb	r3, [r5, #0]
   10f44:	0020      	movs	r0, r4
   10f46:	4b10      	ldr	r3, [pc, #64]	; (10f88 <ConfigureRadioTx+0x58>)
   10f48:	446e      	add	r6, sp
   10f4a:	9102      	str	r1, [sp, #8]
   10f4c:	9203      	str	r2, [sp, #12]
   10f4e:	7037      	strb	r7, [r6, #0]
   10f50:	4798      	blx	r3
   10f52:	79e3      	ldrb	r3, [r4, #7]
   10f54:	4c0d      	ldr	r4, [pc, #52]	; (10f8c <ConfigureRadioTx+0x5c>)
   10f56:	2b00      	cmp	r3, #0
   10f58:	d00a      	beq.n	10f70 <ConfigureRadioTx+0x40>
   10f5a:	4b0d      	ldr	r3, [pc, #52]	; (10f90 <ConfigureRadioTx+0x60>)
   10f5c:	4a0d      	ldr	r2, [pc, #52]	; (10f94 <ConfigureRadioTx+0x64>)
   10f5e:	490e      	ldr	r1, [pc, #56]	; (10f98 <ConfigureRadioTx+0x68>)
   10f60:	54d7      	strb	r7, [r2, r3]
   10f62:	200b      	movs	r0, #11
   10f64:	4b0d      	ldr	r3, [pc, #52]	; (10f9c <ConfigureRadioTx+0x6c>)
   10f66:	4798      	blx	r3
   10f68:	210a      	movs	r1, #10
   10f6a:	200b      	movs	r0, #11
   10f6c:	4469      	add	r1, sp
   10f6e:	47a0      	blx	r4
   10f70:	a903      	add	r1, sp, #12
   10f72:	2004      	movs	r0, #4
   10f74:	47a0      	blx	r4
   10f76:	0031      	movs	r1, r6
   10f78:	2014      	movs	r0, #20
   10f7a:	47a0      	blx	r4
   10f7c:	0029      	movs	r1, r5
   10f7e:	2006      	movs	r0, #6
   10f80:	47a0      	blx	r4
   10f82:	b007      	add	sp, #28
   10f84:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10f86:	46c0      	nop			; (mov r8, r8)
   10f88:	00010261 	.word	0x00010261
   10f8c:	00014c69 	.word	0x00014c69
   10f90:	00000216 	.word	0x00000216
   10f94:	20002b5c 	.word	0x20002b5c
   10f98:	20002d71 	.word	0x20002d71
   10f9c:	00014b79 	.word	0x00014b79

00010fa0 <LorawanGetChAndInitiateRadioTransmit>:
   10fa0:	2301      	movs	r3, #1
   10fa2:	b530      	push	{r4, r5, lr}
   10fa4:	4c44      	ldr	r4, [pc, #272]	; (110b8 <LorawanGetChAndInitiateRadioTransmit+0x118>)
   10fa6:	b089      	sub	sp, #36	; 0x24
   10fa8:	a902      	add	r1, sp, #8
   10faa:	700b      	strb	r3, [r1, #0]
   10fac:	0023      	movs	r3, r4
   10fae:	33e1      	adds	r3, #225	; 0xe1
   10fb0:	781b      	ldrb	r3, [r3, #0]
   10fb2:	704b      	strb	r3, [r1, #1]
   10fb4:	0023      	movs	r3, r4
   10fb6:	33df      	adds	r3, #223	; 0xdf
   10fb8:	781b      	ldrb	r3, [r3, #0]
   10fba:	708b      	strb	r3, [r1, #2]
   10fbc:	0023      	movs	r3, r4
   10fbe:	33f4      	adds	r3, #244	; 0xf4
   10fc0:	781b      	ldrb	r3, [r3, #0]
   10fc2:	2b01      	cmp	r3, #1
   10fc4:	d108      	bne.n	10fd8 <LorawanGetChAndInitiateRadioTransmit+0x38>
   10fc6:	0020      	movs	r0, r4
   10fc8:	220e      	movs	r2, #14
   10fca:	307c      	adds	r0, #124	; 0x7c
   10fcc:	7803      	ldrb	r3, [r0, #0]
   10fce:	4393      	bics	r3, r2
   10fd0:	001a      	movs	r2, r3
   10fd2:	230c      	movs	r3, #12
   10fd4:	4313      	orrs	r3, r2
   10fd6:	7003      	strb	r3, [r0, #0]
   10fd8:	aa05      	add	r2, sp, #20
   10fda:	202f      	movs	r0, #47	; 0x2f
   10fdc:	4d37      	ldr	r5, [pc, #220]	; (110bc <LorawanGetChAndInitiateRadioTransmit+0x11c>)
   10fde:	47a8      	blx	r5
   10fe0:	0023      	movs	r3, r4
   10fe2:	2808      	cmp	r0, #8
   10fe4:	d131      	bne.n	1104a <LorawanGetChAndInitiateRadioTransmit+0xaa>
   10fe6:	33f4      	adds	r3, #244	; 0xf4
   10fe8:	781b      	ldrb	r3, [r3, #0]
   10fea:	ad03      	add	r5, sp, #12
   10fec:	2b04      	cmp	r3, #4
   10fee:	d104      	bne.n	10ffa <LorawanGetChAndInitiateRadioTransmit+0x5a>
   10ff0:	3b03      	subs	r3, #3
   10ff2:	702b      	strb	r3, [r5, #0]
   10ff4:	0028      	movs	r0, r5
   10ff6:	4b32      	ldr	r3, [pc, #200]	; (110c0 <LorawanGetChAndInitiateRadioTransmit+0x120>)
   10ff8:	4798      	blx	r3
   10ffa:	9805      	ldr	r0, [sp, #20]
   10ffc:	4b31      	ldr	r3, [pc, #196]	; (110c4 <LorawanGetChAndInitiateRadioTransmit+0x124>)
   10ffe:	9906      	ldr	r1, [sp, #24]
   11000:	9a07      	ldr	r2, [sp, #28]
   11002:	4798      	blx	r3
   11004:	0023      	movs	r3, r4
   11006:	33c6      	adds	r3, #198	; 0xc6
   11008:	881b      	ldrh	r3, [r3, #0]
   1100a:	0028      	movs	r0, r5
   1100c:	702b      	strb	r3, [r5, #0]
   1100e:	4b2e      	ldr	r3, [pc, #184]	; (110c8 <LorawanGetChAndInitiateRadioTransmit+0x128>)
   11010:	606b      	str	r3, [r5, #4]
   11012:	4b2e      	ldr	r3, [pc, #184]	; (110cc <LorawanGetChAndInitiateRadioTransmit+0x12c>)
   11014:	4798      	blx	r3
   11016:	2800      	cmp	r0, #0
   11018:	d109      	bne.n	1102e <LorawanGetChAndInitiateRadioTransmit+0x8e>
   1101a:	220e      	movs	r2, #14
   1101c:	347c      	adds	r4, #124	; 0x7c
   1101e:	7823      	ldrb	r3, [r4, #0]
   11020:	4393      	bics	r3, r2
   11022:	001a      	movs	r2, r3
   11024:	2302      	movs	r3, #2
   11026:	4313      	orrs	r3, r2
   11028:	7023      	strb	r3, [r4, #0]
   1102a:	b009      	add	sp, #36	; 0x24
   1102c:	bd30      	pop	{r4, r5, pc}
   1102e:	2200      	movs	r2, #0
   11030:	4b27      	ldr	r3, [pc, #156]	; (110d0 <LorawanGetChAndInitiateRadioTransmit+0x130>)
   11032:	4928      	ldr	r1, [pc, #160]	; (110d4 <LorawanGetChAndInitiateRadioTransmit+0x134>)
   11034:	5ce3      	ldrb	r3, [r4, r3]
   11036:	34f3      	adds	r4, #243	; 0xf3
   11038:	4359      	muls	r1, r3
   1103a:	4b27      	ldr	r3, [pc, #156]	; (110d8 <LorawanGetChAndInitiateRadioTransmit+0x138>)
   1103c:	7820      	ldrb	r0, [r4, #0]
   1103e:	18c9      	adds	r1, r1, r3
   11040:	4b26      	ldr	r3, [pc, #152]	; (110dc <LorawanGetChAndInitiateRadioTransmit+0x13c>)
   11042:	9200      	str	r2, [sp, #0]
   11044:	4c26      	ldr	r4, [pc, #152]	; (110e0 <LorawanGetChAndInitiateRadioTransmit+0x140>)
   11046:	47a0      	blx	r4
   11048:	e7ef      	b.n	1102a <LorawanGetChAndInitiateRadioTransmit+0x8a>
   1104a:	33ff      	adds	r3, #255	; 0xff
   1104c:	7c5b      	ldrb	r3, [r3, #17]
   1104e:	079a      	lsls	r2, r3, #30
   11050:	d515      	bpl.n	1107e <LorawanGetChAndInitiateRadioTransmit+0xde>
   11052:	aa03      	add	r2, sp, #12
   11054:	4923      	ldr	r1, [pc, #140]	; (110e4 <LorawanGetChAndInitiateRadioTransmit+0x144>)
   11056:	2026      	movs	r0, #38	; 0x26
   11058:	47a8      	blx	r5
   1105a:	9b03      	ldr	r3, [sp, #12]
   1105c:	1c5a      	adds	r2, r3, #1
   1105e:	d001      	beq.n	11064 <LorawanGetChAndInitiateRadioTransmit+0xc4>
   11060:	3314      	adds	r3, #20
   11062:	9303      	str	r3, [sp, #12]
   11064:	21fa      	movs	r1, #250	; 0xfa
   11066:	4b1a      	ldr	r3, [pc, #104]	; (110d0 <LorawanGetChAndInitiateRadioTransmit+0x130>)
   11068:	9a03      	ldr	r2, [sp, #12]
   1106a:	5ce3      	ldrb	r3, [r4, r3]
   1106c:	0089      	lsls	r1, r1, #2
   1106e:	1ad3      	subs	r3, r2, r3
   11070:	2200      	movs	r2, #0
   11072:	4359      	muls	r1, r3
   11074:	34e9      	adds	r4, #233	; 0xe9
   11076:	7820      	ldrb	r0, [r4, #0]
   11078:	9200      	str	r2, [sp, #0]
   1107a:	4b1b      	ldr	r3, [pc, #108]	; (110e8 <LorawanGetChAndInitiateRadioTransmit+0x148>)
   1107c:	e7e2      	b.n	11044 <LorawanGetChAndInitiateRadioTransmit+0xa4>
   1107e:	075b      	lsls	r3, r3, #29
   11080:	d508      	bpl.n	11094 <LorawanGetChAndInitiateRadioTransmit+0xf4>
   11082:	aa03      	add	r2, sp, #12
   11084:	4917      	ldr	r1, [pc, #92]	; (110e4 <LorawanGetChAndInitiateRadioTransmit+0x144>)
   11086:	2033      	movs	r0, #51	; 0x33
   11088:	47a8      	blx	r5
   1108a:	9b03      	ldr	r3, [sp, #12]
   1108c:	1c5a      	adds	r2, r3, #1
   1108e:	d0e9      	beq.n	11064 <LorawanGetChAndInitiateRadioTransmit+0xc4>
   11090:	3301      	adds	r3, #1
   11092:	e7e6      	b.n	11062 <LorawanGetChAndInitiateRadioTransmit+0xc2>
   11094:	0023      	movs	r3, r4
   11096:	2201      	movs	r2, #1
   11098:	338c      	adds	r3, #140	; 0x8c
   1109a:	781b      	ldrb	r3, [r3, #0]
   1109c:	401a      	ands	r2, r3
   1109e:	d108      	bne.n	110b2 <LorawanGetChAndInitiateRadioTransmit+0x112>
   110a0:	4b0b      	ldr	r3, [pc, #44]	; (110d0 <LorawanGetChAndInitiateRadioTransmit+0x130>)
   110a2:	490c      	ldr	r1, [pc, #48]	; (110d4 <LorawanGetChAndInitiateRadioTransmit+0x134>)
   110a4:	5ce3      	ldrb	r3, [r4, r3]
   110a6:	34e9      	adds	r4, #233	; 0xe9
   110a8:	4359      	muls	r1, r3
   110aa:	4b0b      	ldr	r3, [pc, #44]	; (110d8 <LorawanGetChAndInitiateRadioTransmit+0x138>)
   110ac:	7820      	ldrb	r0, [r4, #0]
   110ae:	18c9      	adds	r1, r1, r3
   110b0:	e7e2      	b.n	11078 <LorawanGetChAndInitiateRadioTransmit+0xd8>
   110b2:	4b0e      	ldr	r3, [pc, #56]	; (110ec <LorawanGetChAndInitiateRadioTransmit+0x14c>)
   110b4:	4798      	blx	r3
   110b6:	e7b8      	b.n	1102a <LorawanGetChAndInitiateRadioTransmit+0x8a>
   110b8:	20002b5c 	.word	0x20002b5c
   110bc:	0000d91d 	.word	0x0000d91d
   110c0:	00015e6d 	.word	0x00015e6d
   110c4:	00010f31 	.word	0x00010f31
   110c8:	20002da1 	.word	0x20002da1
   110cc:	00015599 	.word	0x00015599
   110d0:	0000021f 	.word	0x0000021f
   110d4:	fffffc18 	.word	0xfffffc18
   110d8:	001e8480 	.word	0x001e8480
   110dc:	000110f1 	.word	0x000110f1
   110e0:	0000ee29 	.word	0x0000ee29
   110e4:	20002c3b 	.word	0x20002c3b
   110e8:	000111a9 	.word	0x000111a9
   110ec:	000108d5 	.word	0x000108d5

000110f0 <TransmissionErrorCallback>:
   110f0:	b530      	push	{r4, r5, lr}
   110f2:	4c22      	ldr	r4, [pc, #136]	; (1117c <TransmissionErrorCallback+0x8c>)
   110f4:	2501      	movs	r5, #1
   110f6:	0023      	movs	r3, r4
   110f8:	b08b      	sub	sp, #44	; 0x2c
   110fa:	a903      	add	r1, sp, #12
   110fc:	700d      	strb	r5, [r1, #0]
   110fe:	33e1      	adds	r3, #225	; 0xe1
   11100:	781b      	ldrb	r3, [r3, #0]
   11102:	aa07      	add	r2, sp, #28
   11104:	704b      	strb	r3, [r1, #1]
   11106:	0023      	movs	r3, r4
   11108:	33df      	adds	r3, #223	; 0xdf
   1110a:	781b      	ldrb	r3, [r3, #0]
   1110c:	202f      	movs	r0, #47	; 0x2f
   1110e:	708b      	strb	r3, [r1, #2]
   11110:	4b1b      	ldr	r3, [pc, #108]	; (11180 <TransmissionErrorCallback+0x90>)
   11112:	4798      	blx	r3
   11114:	2808      	cmp	r0, #8
   11116:	d121      	bne.n	1115c <TransmissionErrorCallback+0x6c>
   11118:	a804      	add	r0, sp, #16
   1111a:	4b1a      	ldr	r3, [pc, #104]	; (11184 <TransmissionErrorCallback+0x94>)
   1111c:	7005      	strb	r5, [r0, #0]
   1111e:	4798      	blx	r3
   11120:	9807      	ldr	r0, [sp, #28]
   11122:	4b19      	ldr	r3, [pc, #100]	; (11188 <TransmissionErrorCallback+0x98>)
   11124:	9908      	ldr	r1, [sp, #32]
   11126:	9a09      	ldr	r2, [sp, #36]	; 0x24
   11128:	4798      	blx	r3
   1112a:	0023      	movs	r3, r4
   1112c:	33c6      	adds	r3, #198	; 0xc6
   1112e:	881b      	ldrh	r3, [r3, #0]
   11130:	a805      	add	r0, sp, #20
   11132:	7003      	strb	r3, [r0, #0]
   11134:	4b15      	ldr	r3, [pc, #84]	; (1118c <TransmissionErrorCallback+0x9c>)
   11136:	6043      	str	r3, [r0, #4]
   11138:	4b15      	ldr	r3, [pc, #84]	; (11190 <TransmissionErrorCallback+0xa0>)
   1113a:	4798      	blx	r3
   1113c:	2800      	cmp	r0, #0
   1113e:	d01a      	beq.n	11176 <TransmissionErrorCallback+0x86>
   11140:	0023      	movs	r3, r4
   11142:	33f4      	adds	r3, #244	; 0xf4
   11144:	781b      	ldrb	r3, [r3, #0]
   11146:	42ab      	cmp	r3, r5
   11148:	d108      	bne.n	1115c <TransmissionErrorCallback+0x6c>
   1114a:	0021      	movs	r1, r4
   1114c:	220e      	movs	r2, #14
   1114e:	317c      	adds	r1, #124	; 0x7c
   11150:	780b      	ldrb	r3, [r1, #0]
   11152:	4393      	bics	r3, r2
   11154:	001a      	movs	r2, r3
   11156:	230c      	movs	r3, #12
   11158:	4313      	orrs	r3, r2
   1115a:	700b      	strb	r3, [r1, #0]
   1115c:	2200      	movs	r2, #0
   1115e:	4b0d      	ldr	r3, [pc, #52]	; (11194 <TransmissionErrorCallback+0xa4>)
   11160:	490d      	ldr	r1, [pc, #52]	; (11198 <TransmissionErrorCallback+0xa8>)
   11162:	5ce3      	ldrb	r3, [r4, r3]
   11164:	34f3      	adds	r4, #243	; 0xf3
   11166:	4359      	muls	r1, r3
   11168:	4b0c      	ldr	r3, [pc, #48]	; (1119c <TransmissionErrorCallback+0xac>)
   1116a:	7820      	ldrb	r0, [r4, #0]
   1116c:	18c9      	adds	r1, r1, r3
   1116e:	9200      	str	r2, [sp, #0]
   11170:	4b0b      	ldr	r3, [pc, #44]	; (111a0 <TransmissionErrorCallback+0xb0>)
   11172:	4c0c      	ldr	r4, [pc, #48]	; (111a4 <TransmissionErrorCallback+0xb4>)
   11174:	47a0      	blx	r4
   11176:	b00b      	add	sp, #44	; 0x2c
   11178:	bd30      	pop	{r4, r5, pc}
   1117a:	46c0      	nop			; (mov r8, r8)
   1117c:	20002b5c 	.word	0x20002b5c
   11180:	0000d91d 	.word	0x0000d91d
   11184:	00015e6d 	.word	0x00015e6d
   11188:	00010f31 	.word	0x00010f31
   1118c:	20002da1 	.word	0x20002da1
   11190:	00015599 	.word	0x00015599
   11194:	0000021f 	.word	0x0000021f
   11198:	fffffc18 	.word	0xfffffc18
   1119c:	001e8480 	.word	0x001e8480
   111a0:	000110f1 	.word	0x000110f1
   111a4:	0000ee29 	.word	0x0000ee29

000111a8 <UnconfirmedTransmissionCallback>:
   111a8:	b5f0      	push	{r4, r5, r6, r7, lr}
   111aa:	4c37      	ldr	r4, [pc, #220]	; (11288 <UnconfirmedTransmissionCallback+0xe0>)
   111ac:	b08b      	sub	sp, #44	; 0x2c
   111ae:	0023      	movs	r3, r4
   111b0:	33c6      	adds	r3, #198	; 0xc6
   111b2:	881b      	ldrh	r3, [r3, #0]
   111b4:	af05      	add	r7, sp, #20
   111b6:	703b      	strb	r3, [r7, #0]
   111b8:	4b34      	ldr	r3, [pc, #208]	; (1128c <UnconfirmedTransmissionCallback+0xe4>)
   111ba:	a903      	add	r1, sp, #12
   111bc:	9306      	str	r3, [sp, #24]
   111be:	2301      	movs	r3, #1
   111c0:	700b      	strb	r3, [r1, #0]
   111c2:	0023      	movs	r3, r4
   111c4:	0026      	movs	r6, r4
   111c6:	33e1      	adds	r3, #225	; 0xe1
   111c8:	781b      	ldrb	r3, [r3, #0]
   111ca:	36df      	adds	r6, #223	; 0xdf
   111cc:	704b      	strb	r3, [r1, #1]
   111ce:	7833      	ldrb	r3, [r6, #0]
   111d0:	aa07      	add	r2, sp, #28
   111d2:	202f      	movs	r0, #47	; 0x2f
   111d4:	4d2e      	ldr	r5, [pc, #184]	; (11290 <UnconfirmedTransmissionCallback+0xe8>)
   111d6:	708b      	strb	r3, [r1, #2]
   111d8:	47a8      	blx	r5
   111da:	2808      	cmp	r0, #8
   111dc:	d12b      	bne.n	11236 <UnconfirmedTransmissionCallback+0x8e>
   111de:	2301      	movs	r3, #1
   111e0:	a804      	add	r0, sp, #16
   111e2:	7003      	strb	r3, [r0, #0]
   111e4:	4b2b      	ldr	r3, [pc, #172]	; (11294 <UnconfirmedTransmissionCallback+0xec>)
   111e6:	4798      	blx	r3
   111e8:	9807      	ldr	r0, [sp, #28]
   111ea:	4b2b      	ldr	r3, [pc, #172]	; (11298 <UnconfirmedTransmissionCallback+0xf0>)
   111ec:	9908      	ldr	r1, [sp, #32]
   111ee:	9a09      	ldr	r2, [sp, #36]	; 0x24
   111f0:	4798      	blx	r3
   111f2:	0038      	movs	r0, r7
   111f4:	4b29      	ldr	r3, [pc, #164]	; (1129c <UnconfirmedTransmissionCallback+0xf4>)
   111f6:	4798      	blx	r3
   111f8:	2800      	cmp	r0, #0
   111fa:	d01a      	beq.n	11232 <UnconfirmedTransmissionCallback+0x8a>
   111fc:	0023      	movs	r3, r4
   111fe:	33f4      	adds	r3, #244	; 0xf4
   11200:	781b      	ldrb	r3, [r3, #0]
   11202:	2b01      	cmp	r3, #1
   11204:	d108      	bne.n	11218 <UnconfirmedTransmissionCallback+0x70>
   11206:	0021      	movs	r1, r4
   11208:	220e      	movs	r2, #14
   1120a:	317c      	adds	r1, #124	; 0x7c
   1120c:	780b      	ldrb	r3, [r1, #0]
   1120e:	4393      	bics	r3, r2
   11210:	001a      	movs	r2, r3
   11212:	230c      	movs	r3, #12
   11214:	4313      	orrs	r3, r2
   11216:	700b      	strb	r3, [r1, #0]
   11218:	2200      	movs	r2, #0
   1121a:	4b21      	ldr	r3, [pc, #132]	; (112a0 <UnconfirmedTransmissionCallback+0xf8>)
   1121c:	4921      	ldr	r1, [pc, #132]	; (112a4 <UnconfirmedTransmissionCallback+0xfc>)
   1121e:	5ce3      	ldrb	r3, [r4, r3]
   11220:	34f3      	adds	r4, #243	; 0xf3
   11222:	4359      	muls	r1, r3
   11224:	4b20      	ldr	r3, [pc, #128]	; (112a8 <UnconfirmedTransmissionCallback+0x100>)
   11226:	7820      	ldrb	r0, [r4, #0]
   11228:	18c9      	adds	r1, r1, r3
   1122a:	4b20      	ldr	r3, [pc, #128]	; (112ac <UnconfirmedTransmissionCallback+0x104>)
   1122c:	9200      	str	r2, [sp, #0]
   1122e:	4c20      	ldr	r4, [pc, #128]	; (112b0 <UnconfirmedTransmissionCallback+0x108>)
   11230:	47a0      	blx	r4
   11232:	b00b      	add	sp, #44	; 0x2c
   11234:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11236:	23fa      	movs	r3, #250	; 0xfa
   11238:	00db      	lsls	r3, r3, #3
   1123a:	9304      	str	r3, [sp, #16]
   1123c:	0023      	movs	r3, r4
   1123e:	33ff      	adds	r3, #255	; 0xff
   11240:	7c5b      	ldrb	r3, [r3, #17]
   11242:	079a      	lsls	r2, r3, #30
   11244:	d515      	bpl.n	11272 <UnconfirmedTransmissionCallback+0xca>
   11246:	aa04      	add	r2, sp, #16
   11248:	0031      	movs	r1, r6
   1124a:	2026      	movs	r0, #38	; 0x26
   1124c:	47a8      	blx	r5
   1124e:	9b04      	ldr	r3, [sp, #16]
   11250:	1c5a      	adds	r2, r3, #1
   11252:	d001      	beq.n	11258 <UnconfirmedTransmissionCallback+0xb0>
   11254:	3314      	adds	r3, #20
   11256:	9304      	str	r3, [sp, #16]
   11258:	4b11      	ldr	r3, [pc, #68]	; (112a0 <UnconfirmedTransmissionCallback+0xf8>)
   1125a:	9a04      	ldr	r2, [sp, #16]
   1125c:	5ce3      	ldrb	r3, [r4, r3]
   1125e:	21fa      	movs	r1, #250	; 0xfa
   11260:	1ad3      	subs	r3, r2, r3
   11262:	2200      	movs	r2, #0
   11264:	0089      	lsls	r1, r1, #2
   11266:	34e9      	adds	r4, #233	; 0xe9
   11268:	4359      	muls	r1, r3
   1126a:	7820      	ldrb	r0, [r4, #0]
   1126c:	4b11      	ldr	r3, [pc, #68]	; (112b4 <UnconfirmedTransmissionCallback+0x10c>)
   1126e:	9200      	str	r2, [sp, #0]
   11270:	e7dd      	b.n	1122e <UnconfirmedTransmissionCallback+0x86>
   11272:	075b      	lsls	r3, r3, #29
   11274:	d5f0      	bpl.n	11258 <UnconfirmedTransmissionCallback+0xb0>
   11276:	aa04      	add	r2, sp, #16
   11278:	0031      	movs	r1, r6
   1127a:	2033      	movs	r0, #51	; 0x33
   1127c:	47a8      	blx	r5
   1127e:	9b04      	ldr	r3, [sp, #16]
   11280:	1c5a      	adds	r2, r3, #1
   11282:	d0e9      	beq.n	11258 <UnconfirmedTransmissionCallback+0xb0>
   11284:	3301      	adds	r3, #1
   11286:	e7e6      	b.n	11256 <UnconfirmedTransmissionCallback+0xae>
   11288:	20002b5c 	.word	0x20002b5c
   1128c:	20002da1 	.word	0x20002da1
   11290:	0000d91d 	.word	0x0000d91d
   11294:	00015e6d 	.word	0x00015e6d
   11298:	00010f31 	.word	0x00010f31
   1129c:	00015599 	.word	0x00015599
   112a0:	0000021f 	.word	0x0000021f
   112a4:	fffffc18 	.word	0xfffffc18
   112a8:	001e8480 	.word	0x001e8480
   112ac:	000110f1 	.word	0x000110f1
   112b0:	0000ee29 	.word	0x0000ee29
   112b4:	000111a9 	.word	0x000111a9

000112b8 <UpdateJoinInProgress>:
   112b8:	b570      	push	{r4, r5, r6, lr}
   112ba:	2504      	movs	r5, #4
   112bc:	4c0a      	ldr	r4, [pc, #40]	; (112e8 <UpdateJoinInProgress+0x30>)
   112be:	0002      	movs	r2, r0
   112c0:	0021      	movs	r1, r4
   112c2:	348c      	adds	r4, #140	; 0x8c
   112c4:	7826      	ldrb	r6, [r4, #0]
   112c6:	2001      	movs	r0, #1
   112c8:	4335      	orrs	r5, r6
   112ca:	7025      	strb	r5, [r4, #0]
   112cc:	2407      	movs	r4, #7
   112ce:	4022      	ands	r2, r4
   112d0:	4082      	lsls	r2, r0
   112d2:	317c      	adds	r1, #124	; 0x7c
   112d4:	780b      	ldrb	r3, [r1, #0]
   112d6:	1924      	adds	r4, r4, r4
   112d8:	4383      	bics	r3, r0
   112da:	43a3      	bics	r3, r4
   112dc:	4313      	orrs	r3, r2
   112de:	700b      	strb	r3, [r1, #0]
   112e0:	210b      	movs	r1, #11
   112e2:	4b02      	ldr	r3, [pc, #8]	; (112ec <UpdateJoinInProgress+0x34>)
   112e4:	4798      	blx	r3
   112e6:	bd70      	pop	{r4, r5, r6, pc}
   112e8:	20002b5c 	.word	0x20002b5c
   112ec:	0000e0f9 	.word	0x0000e0f9

000112f0 <LORAWAN_Join>:
   112f0:	b573      	push	{r0, r1, r4, r5, r6, lr}
   112f2:	4c33      	ldr	r4, [pc, #204]	; (113c0 <LORAWAN_Join+0xd0>)
   112f4:	0006      	movs	r6, r0
   112f6:	0023      	movs	r3, r4
   112f8:	337c      	adds	r3, #124	; 0x7c
   112fa:	781b      	ldrb	r3, [r3, #0]
   112fc:	200f      	movs	r0, #15
   112fe:	b25a      	sxtb	r2, r3
   11300:	2a00      	cmp	r2, #0
   11302:	db4a      	blt.n	1139a <LORAWAN_Join+0xaa>
   11304:	3803      	subs	r0, #3
   11306:	065b      	lsls	r3, r3, #25
   11308:	d447      	bmi.n	1139a <LORAWAN_Join+0xaa>
   1130a:	0023      	movs	r3, r4
   1130c:	338c      	adds	r3, #140	; 0x8c
   1130e:	781b      	ldrb	r3, [r3, #0]
   11310:	3007      	adds	r0, #7
   11312:	075b      	lsls	r3, r3, #29
   11314:	d441      	bmi.n	1139a <LORAWAN_Join+0xaa>
   11316:	0023      	movs	r3, r4
   11318:	33f4      	adds	r3, #244	; 0xf4
   1131a:	781b      	ldrb	r3, [r3, #0]
   1131c:	2b04      	cmp	r3, #4
   1131e:	d037      	beq.n	11390 <LORAWAN_Join+0xa0>
   11320:	0023      	movs	r3, r4
   11322:	33f4      	adds	r3, #244	; 0xf4
   11324:	781b      	ldrb	r3, [r3, #0]
   11326:	2b01      	cmp	r3, #1
   11328:	d105      	bne.n	11336 <LORAWAN_Join+0x46>
   1132a:	0023      	movs	r3, r4
   1132c:	337c      	adds	r3, #124	; 0x7c
   1132e:	781a      	ldrb	r2, [r3, #0]
   11330:	230e      	movs	r3, #14
   11332:	421a      	tst	r2, r3
   11334:	d130      	bne.n	11398 <LORAWAN_Join+0xa8>
   11336:	2102      	movs	r1, #2
   11338:	2001      	movs	r0, #1
   1133a:	4d22      	ldr	r5, [pc, #136]	; (113c4 <LORAWAN_Join+0xd4>)
   1133c:	7026      	strb	r6, [r4, #0]
   1133e:	47a8      	blx	r5
   11340:	0023      	movs	r3, r4
   11342:	33d6      	adds	r3, #214	; 0xd6
   11344:	781b      	ldrb	r3, [r3, #0]
   11346:	2e00      	cmp	r6, #0
   11348:	d128      	bne.n	1139c <LORAWAN_Join+0xac>
   1134a:	200b      	movs	r0, #11
   1134c:	4003      	ands	r3, r0
   1134e:	4283      	cmp	r3, r0
   11350:	d003      	beq.n	1135a <LORAWAN_Join+0x6a>
   11352:	4b1d      	ldr	r3, [pc, #116]	; (113c8 <LORAWAN_Join+0xd8>)
   11354:	5ce3      	ldrb	r3, [r4, r3]
   11356:	2b00      	cmp	r3, #0
   11358:	d01f      	beq.n	1139a <LORAWAN_Join+0xaa>
   1135a:	0023      	movs	r3, r4
   1135c:	337c      	adds	r3, #124	; 0x7c
   1135e:	781b      	ldrb	r3, [r3, #0]
   11360:	07db      	lsls	r3, r3, #31
   11362:	d503      	bpl.n	1136c <LORAWAN_Join+0x7c>
   11364:	2100      	movs	r1, #0
   11366:	203b      	movs	r0, #59	; 0x3b
   11368:	4b18      	ldr	r3, [pc, #96]	; (113cc <LORAWAN_Join+0xdc>)
   1136a:	4798      	blx	r3
   1136c:	0022      	movs	r2, r4
   1136e:	2001      	movs	r0, #1
   11370:	327c      	adds	r2, #124	; 0x7c
   11372:	7813      	ldrb	r3, [r2, #0]
   11374:	348c      	adds	r4, #140	; 0x8c
   11376:	4383      	bics	r3, r0
   11378:	7013      	strb	r3, [r2, #0]
   1137a:	2304      	movs	r3, #4
   1137c:	7822      	ldrb	r2, [r4, #0]
   1137e:	210b      	movs	r1, #11
   11380:	4313      	orrs	r3, r2
   11382:	7023      	strb	r3, [r4, #0]
   11384:	47a8      	blx	r5
   11386:	2000      	movs	r0, #0
   11388:	4b11      	ldr	r3, [pc, #68]	; (113d0 <LORAWAN_Join+0xe0>)
   1138a:	4798      	blx	r3
   1138c:	2008      	movs	r0, #8
   1138e:	e004      	b.n	1139a <LORAWAN_Join+0xaa>
   11390:	4b10      	ldr	r3, [pc, #64]	; (113d4 <LORAWAN_Join+0xe4>)
   11392:	4798      	blx	r3
   11394:	2808      	cmp	r0, #8
   11396:	d0c3      	beq.n	11320 <LORAWAN_Join+0x30>
   11398:	2011      	movs	r0, #17
   1139a:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
   1139c:	2234      	movs	r2, #52	; 0x34
   1139e:	200b      	movs	r0, #11
   113a0:	4013      	ands	r3, r2
   113a2:	4293      	cmp	r3, r2
   113a4:	d1f9      	bne.n	1139a <LORAWAN_Join+0xaa>
   113a6:	3804      	subs	r0, #4
   113a8:	4b0b      	ldr	r3, [pc, #44]	; (113d8 <LORAWAN_Join+0xe8>)
   113aa:	4798      	blx	r3
   113ac:	2200      	movs	r2, #0
   113ae:	34f2      	adds	r4, #242	; 0xf2
   113b0:	7820      	ldrb	r0, [r4, #0]
   113b2:	4b0a      	ldr	r3, [pc, #40]	; (113dc <LORAWAN_Join+0xec>)
   113b4:	9200      	str	r2, [sp, #0]
   113b6:	490a      	ldr	r1, [pc, #40]	; (113e0 <LORAWAN_Join+0xf0>)
   113b8:	4c0a      	ldr	r4, [pc, #40]	; (113e4 <LORAWAN_Join+0xf4>)
   113ba:	47a0      	blx	r4
   113bc:	e7e6      	b.n	1138c <LORAWAN_Join+0x9c>
   113be:	46c0      	nop			; (mov r8, r8)
   113c0:	20002b5c 	.word	0x20002b5c
   113c4:	0000e0f9 	.word	0x0000e0f9
   113c8:	00000221 	.word	0x00000221
   113cc:	0000da45 	.word	0x0000da45
   113d0:	00014af5 	.word	0x00014af5
   113d4:	000141f9 	.word	0x000141f9
   113d8:	000112b9 	.word	0x000112b9
   113dc:	000100f5 	.word	0x000100f5
   113e0:	0000c350 	.word	0x0000c350
   113e4:	0000ee29 	.word	0x0000ee29

000113e8 <EncryptFRMPayload>:
   113e8:	b5f0      	push	{r4, r5, r6, r7, lr}
   113ea:	0007      	movs	r7, r0
   113ec:	2401      	movs	r4, #1
   113ee:	b089      	sub	sp, #36	; 0x24
   113f0:	9306      	str	r3, [sp, #24]
   113f2:	ab10      	add	r3, sp, #64	; 0x40
   113f4:	781d      	ldrb	r5, [r3, #0]
   113f6:	090b      	lsrs	r3, r1, #4
   113f8:	9104      	str	r1, [sp, #16]
   113fa:	9205      	str	r2, [sp, #20]
   113fc:	9303      	str	r3, [sp, #12]
   113fe:	9b03      	ldr	r3, [sp, #12]
   11400:	429c      	cmp	r4, r3
   11402:	d907      	bls.n	11414 <EncryptFRMPayload+0x2c>
   11404:	260f      	movs	r6, #15
   11406:	9b04      	ldr	r3, [sp, #16]
   11408:	4033      	ands	r3, r6
   1140a:	1e1e      	subs	r6, r3, #0
   1140c:	d126      	bne.n	1145c <EncryptFRMPayload+0x74>
   1140e:	2000      	movs	r0, #0
   11410:	b009      	add	sp, #36	; 0x24
   11412:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11414:	9b12      	ldr	r3, [sp, #72]	; 0x48
   11416:	0022      	movs	r2, r4
   11418:	9300      	str	r3, [sp, #0]
   1141a:	9906      	ldr	r1, [sp, #24]
   1141c:	2301      	movs	r3, #1
   1141e:	9805      	ldr	r0, [sp, #20]
   11420:	4e1e      	ldr	r6, [pc, #120]	; (1149c <EncryptFRMPayload+0xb4>)
   11422:	47b0      	blx	r6
   11424:	4e1e      	ldr	r6, [pc, #120]	; (114a0 <EncryptFRMPayload+0xb8>)
   11426:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   11428:	2101      	movs	r1, #1
   1142a:	0030      	movs	r0, r6
   1142c:	4b1d      	ldr	r3, [pc, #116]	; (114a4 <EncryptFRMPayload+0xbc>)
   1142e:	4798      	blx	r3
   11430:	2800      	cmp	r0, #0
   11432:	d1ed      	bne.n	11410 <EncryptFRMPayload+0x28>
   11434:	1e63      	subs	r3, r4, #1
   11436:	011b      	lsls	r3, r3, #4
   11438:	18fb      	adds	r3, r7, r3
   1143a:	9307      	str	r3, [sp, #28]
   1143c:	9b07      	ldr	r3, [sp, #28]
   1143e:	182a      	adds	r2, r5, r0
   11440:	5c19      	ldrb	r1, [r3, r0]
   11442:	5d83      	ldrb	r3, [r0, r6]
   11444:	b2d2      	uxtb	r2, r2
   11446:	4059      	eors	r1, r3
   11448:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1144a:	3001      	adds	r0, #1
   1144c:	5499      	strb	r1, [r3, r2]
   1144e:	2810      	cmp	r0, #16
   11450:	d1f4      	bne.n	1143c <EncryptFRMPayload+0x54>
   11452:	3510      	adds	r5, #16
   11454:	3401      	adds	r4, #1
   11456:	b2ed      	uxtb	r5, r5
   11458:	b2e4      	uxtb	r4, r4
   1145a:	e7d0      	b.n	113fe <EncryptFRMPayload+0x16>
   1145c:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1145e:	0022      	movs	r2, r4
   11460:	9300      	str	r3, [sp, #0]
   11462:	9906      	ldr	r1, [sp, #24]
   11464:	2301      	movs	r3, #1
   11466:	9805      	ldr	r0, [sp, #20]
   11468:	4c0c      	ldr	r4, [pc, #48]	; (1149c <EncryptFRMPayload+0xb4>)
   1146a:	47a0      	blx	r4
   1146c:	4c0c      	ldr	r4, [pc, #48]	; (114a0 <EncryptFRMPayload+0xb8>)
   1146e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   11470:	2101      	movs	r1, #1
   11472:	0020      	movs	r0, r4
   11474:	4b0b      	ldr	r3, [pc, #44]	; (114a4 <EncryptFRMPayload+0xbc>)
   11476:	4798      	blx	r3
   11478:	2800      	cmp	r0, #0
   1147a:	d1c9      	bne.n	11410 <EncryptFRMPayload+0x28>
   1147c:	9b03      	ldr	r3, [sp, #12]
   1147e:	011b      	lsls	r3, r3, #4
   11480:	18fb      	adds	r3, r7, r3
   11482:	5d07      	ldrb	r7, [r0, r4]
   11484:	5c19      	ldrb	r1, [r3, r0]
   11486:	182a      	adds	r2, r5, r0
   11488:	4079      	eors	r1, r7
   1148a:	9f11      	ldr	r7, [sp, #68]	; 0x44
   1148c:	b2d2      	uxtb	r2, r2
   1148e:	3001      	adds	r0, #1
   11490:	54b9      	strb	r1, [r7, r2]
   11492:	b2c2      	uxtb	r2, r0
   11494:	4296      	cmp	r6, r2
   11496:	d8f4      	bhi.n	11482 <EncryptFRMPayload+0x9a>
   11498:	e7b9      	b.n	1140e <EncryptFRMPayload+0x26>
   1149a:	46c0      	nop			; (mov r8, r8)
   1149c:	00010221 	.word	0x00010221
   114a0:	20001110 	.word	0x20001110
   114a4:	0000dc99 	.word	0x0000dc99

000114a8 <UpdateTransactionCompleteCbParams>:
   114a8:	2385      	movs	r3, #133	; 0x85
   114aa:	2201      	movs	r2, #1
   114ac:	b570      	push	{r4, r5, r6, lr}
   114ae:	0001      	movs	r1, r0
   114b0:	4c14      	ldr	r4, [pc, #80]	; (11504 <UpdateTransactionCompleteCbParams+0x5c>)
   114b2:	4815      	ldr	r0, [pc, #84]	; (11508 <UpdateTransactionCompleteCbParams+0x60>)
   114b4:	009b      	lsls	r3, r3, #2
   114b6:	54e2      	strb	r2, [r4, r3]
   114b8:	7842      	ldrb	r2, [r0, #1]
   114ba:	7803      	ldrb	r3, [r0, #0]
   114bc:	0212      	lsls	r2, r2, #8
   114be:	431a      	orrs	r2, r3
   114c0:	7883      	ldrb	r3, [r0, #2]
   114c2:	041b      	lsls	r3, r3, #16
   114c4:	431a      	orrs	r2, r3
   114c6:	78c3      	ldrb	r3, [r0, #3]
   114c8:	061b      	lsls	r3, r3, #24
   114ca:	4313      	orrs	r3, r2
   114cc:	d010      	beq.n	114f0 <UpdateTransactionCompleteCbParams+0x48>
   114ce:	0022      	movs	r2, r4
   114d0:	2504      	movs	r5, #4
   114d2:	32f8      	adds	r2, #248	; 0xf8
   114d4:	6812      	ldr	r2, [r2, #0]
   114d6:	422a      	tst	r2, r5
   114d8:	d00a      	beq.n	114f0 <UpdateTransactionCompleteCbParams+0x48>
   114da:	0022      	movs	r2, r4
   114dc:	32fc      	adds	r2, #252	; 0xfc
   114de:	6810      	ldr	r0, [r2, #0]
   114e0:	2800      	cmp	r0, #0
   114e2:	d005      	beq.n	114f0 <UpdateTransactionCompleteCbParams+0x48>
   114e4:	0022      	movs	r2, r4
   114e6:	32ff      	adds	r2, #255	; 0xff
   114e8:	7151      	strb	r1, [r2, #5]
   114ea:	7055      	strb	r5, [r2, #1]
   114ec:	4907      	ldr	r1, [pc, #28]	; (1150c <UpdateTransactionCompleteCbParams+0x64>)
   114ee:	4798      	blx	r3
   114f0:	2385      	movs	r3, #133	; 0x85
   114f2:	009b      	lsls	r3, r3, #2
   114f4:	5ce3      	ldrb	r3, [r4, r3]
   114f6:	2b00      	cmp	r3, #0
   114f8:	d002      	beq.n	11500 <UpdateTransactionCompleteCbParams+0x58>
   114fa:	2300      	movs	r3, #0
   114fc:	34fc      	adds	r4, #252	; 0xfc
   114fe:	6023      	str	r3, [r4, #0]
   11500:	bd70      	pop	{r4, r5, r6, pc}
   11502:	46c0      	nop			; (mov r8, r8)
   11504:	20002b5c 	.word	0x20002b5c
   11508:	20002ea4 	.word	0x20002ea4
   1150c:	20002c5c 	.word	0x20002c5c

00011510 <AssemblePacket>:
   11510:	b5f0      	push	{r4, r5, r6, r7, lr}
   11512:	2710      	movs	r7, #16
   11514:	b08d      	sub	sp, #52	; 0x34
   11516:	9306      	str	r3, [sp, #24]
   11518:	ab04      	add	r3, sp, #16
   1151a:	839f      	strh	r7, [r3, #28]
   1151c:	231e      	movs	r3, #30
   1151e:	9208      	str	r2, [sp, #32]
   11520:	aa04      	add	r2, sp, #16
   11522:	189b      	adds	r3, r3, r2
   11524:	2500      	movs	r5, #0
   11526:	2210      	movs	r2, #16
   11528:	ac0a      	add	r4, sp, #40	; 0x28
   1152a:	9007      	str	r0, [sp, #28]
   1152c:	9109      	str	r1, [sp, #36]	; 0x24
   1152e:	32ff      	adds	r2, #255	; 0xff
   11530:	0029      	movs	r1, r5
   11532:	4eb5      	ldr	r6, [pc, #724]	; (11808 <AssemblePacket+0x2f8>)
   11534:	7025      	strb	r5, [r4, #0]
   11536:	48b5      	ldr	r0, [pc, #724]	; (1180c <AssemblePacket+0x2fc>)
   11538:	801d      	strh	r5, [r3, #0]
   1153a:	47b0      	blx	r6
   1153c:	003a      	movs	r2, r7
   1153e:	0029      	movs	r1, r5
   11540:	48b3      	ldr	r0, [pc, #716]	; (11810 <AssemblePacket+0x300>)
   11542:	47b0      	blx	r6
   11544:	221f      	movs	r2, #31
   11546:	7823      	ldrb	r3, [r4, #0]
   11548:	9907      	ldr	r1, [sp, #28]
   1154a:	4013      	ands	r3, r2
   1154c:	42a9      	cmp	r1, r5
   1154e:	d043      	beq.n	115d8 <AssemblePacket+0xc8>
   11550:	3a9f      	subs	r2, #159	; 0x9f
   11552:	4313      	orrs	r3, r2
   11554:	7023      	strb	r3, [r4, #0]
   11556:	4baf      	ldr	r3, [pc, #700]	; (11814 <AssemblePacket+0x304>)
   11558:	3281      	adds	r2, #129	; 0x81
   1155a:	338c      	adds	r3, #140	; 0x8c
   1155c:	7819      	ldrb	r1, [r3, #0]
   1155e:	430a      	orrs	r2, r1
   11560:	701a      	strb	r2, [r3, #0]
   11562:	22e0      	movs	r2, #224	; 0xe0
   11564:	7823      	ldrb	r3, [r4, #0]
   11566:	48a9      	ldr	r0, [pc, #676]	; (1180c <AssemblePacket+0x2fc>)
   11568:	4013      	ands	r3, r2
   1156a:	7023      	strb	r3, [r4, #0]
   1156c:	4ca9      	ldr	r4, [pc, #676]	; (11814 <AssemblePacket+0x304>)
   1156e:	7403      	strb	r3, [r0, #16]
   11570:	3adc      	subs	r2, #220	; 0xdc
   11572:	4ba9      	ldr	r3, [pc, #676]	; (11818 <AssemblePacket+0x308>)
   11574:	3011      	adds	r0, #17
   11576:	1c61      	adds	r1, r4, #1
   11578:	4798      	blx	r3
   1157a:	2315      	movs	r3, #21
   1157c:	aa04      	add	r2, sp, #16
   1157e:	8393      	strh	r3, [r2, #28]
   11580:	0023      	movs	r3, r4
   11582:	337c      	adds	r3, #124	; 0x7c
   11584:	781b      	ldrb	r3, [r3, #0]
   11586:	2700      	movs	r7, #0
   11588:	069b      	lsls	r3, r3, #26
   1158a:	d400      	bmi.n	1158e <AssemblePacket+0x7e>
   1158c:	e0fd      	b.n	1178a <AssemblePacket+0x27a>
   1158e:	0023      	movs	r3, r4
   11590:	33df      	adds	r3, #223	; 0xdf
   11592:	781a      	ldrb	r2, [r3, #0]
   11594:	23ea      	movs	r3, #234	; 0xea
   11596:	469c      	mov	ip, r3
   11598:	44a4      	add	ip, r4
   1159a:	4663      	mov	r3, ip
   1159c:	781d      	ldrb	r5, [r3, #0]
   1159e:	42aa      	cmp	r2, r5
   115a0:	d200      	bcs.n	115a4 <AssemblePacket+0x94>
   115a2:	e0f2      	b.n	1178a <AssemblePacket+0x27a>
   115a4:	0021      	movs	r1, r4
   115a6:	0026      	movs	r6, r4
   115a8:	4b9c      	ldr	r3, [pc, #624]	; (1181c <AssemblePacket+0x30c>)
   115aa:	31c2      	adds	r1, #194	; 0xc2
   115ac:	7818      	ldrb	r0, [r3, #0]
   115ae:	880b      	ldrh	r3, [r1, #0]
   115b0:	36d4      	adds	r6, #212	; 0xd4
   115b2:	3301      	adds	r3, #1
   115b4:	b29b      	uxth	r3, r3
   115b6:	800b      	strh	r3, [r1, #0]
   115b8:	7836      	ldrb	r6, [r6, #0]
   115ba:	42b3      	cmp	r3, r6
   115bc:	d110      	bne.n	115e0 <AssemblePacket+0xd0>
   115be:	0023      	movs	r3, r4
   115c0:	33ed      	adds	r3, #237	; 0xed
   115c2:	701f      	strb	r7, [r3, #0]
   115c4:	2380      	movs	r3, #128	; 0x80
   115c6:	2040      	movs	r0, #64	; 0x40
   115c8:	348c      	adds	r4, #140	; 0x8c
   115ca:	425b      	negs	r3, r3
   115cc:	7822      	ldrb	r2, [r4, #0]
   115ce:	4318      	orrs	r0, r3
   115d0:	3390      	adds	r3, #144	; 0x90
   115d2:	4313      	orrs	r3, r2
   115d4:	7023      	strb	r3, [r4, #0]
   115d6:	e02f      	b.n	11638 <AssemblePacket+0x128>
   115d8:	2240      	movs	r2, #64	; 0x40
   115da:	4313      	orrs	r3, r2
   115dc:	7023      	strb	r3, [r4, #0]
   115de:	e7c0      	b.n	11562 <AssemblePacket+0x52>
   115e0:	42b3      	cmp	r3, r6
   115e2:	d929      	bls.n	11638 <AssemblePacket+0x128>
   115e4:	42aa      	cmp	r2, r5
   115e6:	d100      	bne.n	115ea <AssemblePacket+0xda>
   115e8:	e0c9      	b.n	1177e <AssemblePacket+0x26e>
   115ea:	0021      	movs	r1, r4
   115ec:	0020      	movs	r0, r4
   115ee:	31ed      	adds	r1, #237	; 0xed
   115f0:	780b      	ldrb	r3, [r1, #0]
   115f2:	30d5      	adds	r0, #213	; 0xd5
   115f4:	3301      	adds	r3, #1
   115f6:	b2db      	uxtb	r3, r3
   115f8:	700b      	strb	r3, [r1, #0]
   115fa:	7800      	ldrb	r0, [r0, #0]
   115fc:	3801      	subs	r0, #1
   115fe:	4283      	cmp	r3, r0
   11600:	dbe0      	blt.n	115c4 <AssemblePacket+0xb4>
   11602:	700f      	strb	r7, [r1, #0]
   11604:	42aa      	cmp	r2, r5
   11606:	d90d      	bls.n	11624 <AssemblePacket+0x114>
   11608:	231b      	movs	r3, #27
   1160a:	4666      	mov	r6, ip
   1160c:	a904      	add	r1, sp, #16
   1160e:	3a01      	subs	r2, #1
   11610:	185b      	adds	r3, r3, r1
   11612:	701a      	strb	r2, [r3, #0]
   11614:	251b      	movs	r5, #27
   11616:	ab04      	add	r3, sp, #16
   11618:	18ed      	adds	r5, r5, r3
   1161a:	7832      	ldrb	r2, [r6, #0]
   1161c:	782b      	ldrb	r3, [r5, #0]
   1161e:	429a      	cmp	r2, r3
   11620:	d800      	bhi.n	11624 <AssemblePacket+0x114>
   11622:	e098      	b.n	11756 <AssemblePacket+0x246>
   11624:	2380      	movs	r3, #128	; 0x80
   11626:	2040      	movs	r0, #64	; 0x40
   11628:	2210      	movs	r2, #16
   1162a:	425b      	negs	r3, r3
   1162c:	4318      	orrs	r0, r3
   1162e:	4b79      	ldr	r3, [pc, #484]	; (11814 <AssemblePacket+0x304>)
   11630:	338c      	adds	r3, #140	; 0x8c
   11632:	7819      	ldrb	r1, [r3, #0]
   11634:	430a      	orrs	r2, r1
   11636:	701a      	strb	r2, [r3, #0]
   11638:	4d76      	ldr	r5, [pc, #472]	; (11814 <AssemblePacket+0x304>)
   1163a:	2102      	movs	r1, #2
   1163c:	002a      	movs	r2, r5
   1163e:	328c      	adds	r2, #140	; 0x8c
   11640:	7813      	ldrb	r3, [r2, #0]
   11642:	420b      	tst	r3, r1
   11644:	d003      	beq.n	1164e <AssemblePacket+0x13e>
   11646:	2420      	movs	r4, #32
   11648:	438b      	bics	r3, r1
   1164a:	4320      	orrs	r0, r4
   1164c:	7013      	strb	r3, [r2, #0]
   1164e:	2310      	movs	r3, #16
   11650:	0004      	movs	r4, r0
   11652:	439c      	bics	r4, r3
   11654:	002b      	movs	r3, r5
   11656:	33d8      	adds	r3, #216	; 0xd8
   11658:	781b      	ldrb	r3, [r3, #0]
   1165a:	9307      	str	r3, [sp, #28]
   1165c:	2b00      	cmp	r3, #0
   1165e:	d003      	beq.n	11668 <AssemblePacket+0x158>
   11660:	9b06      	ldr	r3, [sp, #24]
   11662:	2b00      	cmp	r3, #0
   11664:	d000      	beq.n	11668 <AssemblePacket+0x158>
   11666:	e092      	b.n	1178e <AssemblePacket+0x27e>
   11668:	230f      	movs	r3, #15
   1166a:	439c      	bics	r4, r3
   1166c:	0020      	movs	r0, r4
   1166e:	ac0b      	add	r4, sp, #44	; 0x2c
   11670:	8826      	ldrh	r6, [r4, #0]
   11672:	4f66      	ldr	r7, [pc, #408]	; (1180c <AssemblePacket+0x2fc>)
   11674:	4b68      	ldr	r3, [pc, #416]	; (11818 <AssemblePacket+0x308>)
   11676:	55b8      	strb	r0, [r7, r6]
   11678:	1c70      	adds	r0, r6, #1
   1167a:	b280      	uxth	r0, r0
   1167c:	19c0      	adds	r0, r0, r7
   1167e:	2202      	movs	r2, #2
   11680:	4967      	ldr	r1, [pc, #412]	; (11820 <AssemblePacket+0x310>)
   11682:	4798      	blx	r3
   11684:	9b07      	ldr	r3, [sp, #28]
   11686:	3603      	adds	r6, #3
   11688:	8026      	strh	r6, [r4, #0]
   1168a:	2b00      	cmp	r3, #0
   1168c:	d100      	bne.n	11690 <AssemblePacket+0x180>
   1168e:	e087      	b.n	117a0 <AssemblePacket+0x290>
   11690:	9b06      	ldr	r3, [sp, #24]
   11692:	2b00      	cmp	r3, #0
   11694:	d004      	beq.n	116a0 <AssemblePacket+0x190>
   11696:	2201      	movs	r2, #1
   11698:	0021      	movs	r1, r4
   1169a:	0038      	movs	r0, r7
   1169c:	4b61      	ldr	r3, [pc, #388]	; (11824 <AssemblePacket+0x314>)
   1169e:	4798      	blx	r3
   116a0:	466a      	mov	r2, sp
   116a2:	2124      	movs	r1, #36	; 0x24
   116a4:	1852      	adds	r2, r2, r1
   116a6:	8823      	ldrh	r3, [r4, #0]
   116a8:	7812      	ldrb	r2, [r2, #0]
   116aa:	1c5e      	adds	r6, r3, #1
   116ac:	54fa      	strb	r2, [r7, r3]
   116ae:	9b06      	ldr	r3, [sp, #24]
   116b0:	b2b6      	uxth	r6, r6
   116b2:	8026      	strh	r6, [r4, #0]
   116b4:	2b00      	cmp	r3, #0
   116b6:	d100      	bne.n	116ba <AssemblePacket+0x1aa>
   116b8:	e076      	b.n	117a8 <AssemblePacket+0x298>
   116ba:	001a      	movs	r2, r3
   116bc:	19b8      	adds	r0, r7, r6
   116be:	9908      	ldr	r1, [sp, #32]
   116c0:	4b55      	ldr	r3, [pc, #340]	; (11818 <AssemblePacket+0x308>)
   116c2:	4798      	blx	r3
   116c4:	466b      	mov	r3, sp
   116c6:	7e19      	ldrb	r1, [r3, #24]
   116c8:	682b      	ldr	r3, [r5, #0]
   116ca:	b2f6      	uxtb	r6, r6
   116cc:	0a18      	lsrs	r0, r3, #8
   116ce:	792b      	ldrb	r3, [r5, #4]
   116d0:	1d2a      	adds	r2, r5, #4
   116d2:	061b      	lsls	r3, r3, #24
   116d4:	4303      	orrs	r3, r0
   116d6:	9304      	str	r3, [sp, #16]
   116d8:	2301      	movs	r3, #1
   116da:	9301      	str	r3, [sp, #4]
   116dc:	4b52      	ldr	r3, [pc, #328]	; (11828 <AssemblePacket+0x318>)
   116de:	9703      	str	r7, [sp, #12]
   116e0:	9602      	str	r6, [sp, #8]
   116e2:	9300      	str	r3, [sp, #0]
   116e4:	6fd3      	ldr	r3, [r2, #124]	; 0x7c
   116e6:	9808      	ldr	r0, [sp, #32]
   116e8:	2200      	movs	r2, #0
   116ea:	4c50      	ldr	r4, [pc, #320]	; (1182c <AssemblePacket+0x31c>)
   116ec:	47a0      	blx	r4
   116ee:	2800      	cmp	r0, #0
   116f0:	d002      	beq.n	116f8 <AssemblePacket+0x1e8>
   116f2:	2020      	movs	r0, #32
   116f4:	4b4e      	ldr	r3, [pc, #312]	; (11830 <AssemblePacket+0x320>)
   116f6:	4798      	blx	r3
   116f8:	aa0b      	add	r2, sp, #44	; 0x2c
   116fa:	8813      	ldrh	r3, [r2, #0]
   116fc:	9906      	ldr	r1, [sp, #24]
   116fe:	18cb      	adds	r3, r1, r3
   11700:	8013      	strh	r3, [r2, #0]
   11702:	4c44      	ldr	r4, [pc, #272]	; (11814 <AssemblePacket+0x304>)
   11704:	ae0b      	add	r6, sp, #44	; 0x2c
   11706:	6823      	ldr	r3, [r4, #0]
   11708:	8832      	ldrh	r2, [r6, #0]
   1170a:	0a18      	lsrs	r0, r3, #8
   1170c:	7923      	ldrb	r3, [r4, #4]
   1170e:	1d21      	adds	r1, r4, #4
   11710:	061b      	lsls	r3, r3, #24
   11712:	4303      	orrs	r3, r0
   11714:	9300      	str	r3, [sp, #0]
   11716:	3a10      	subs	r2, #16
   11718:	b2d2      	uxtb	r2, r2
   1171a:	2349      	movs	r3, #73	; 0x49
   1171c:	6fc9      	ldr	r1, [r1, #124]	; 0x7c
   1171e:	2000      	movs	r0, #0
   11720:	4d44      	ldr	r5, [pc, #272]	; (11834 <AssemblePacket+0x324>)
   11722:	47a8      	blx	r5
   11724:	4f39      	ldr	r7, [pc, #228]	; (1180c <AssemblePacket+0x2fc>)
   11726:	2210      	movs	r2, #16
   11728:	4939      	ldr	r1, [pc, #228]	; (11810 <AssemblePacket+0x300>)
   1172a:	0038      	movs	r0, r7
   1172c:	4b3a      	ldr	r3, [pc, #232]	; (11818 <AssemblePacket+0x308>)
   1172e:	4798      	blx	r3
   11730:	8833      	ldrh	r3, [r6, #0]
   11732:	4a37      	ldr	r2, [pc, #220]	; (11810 <AssemblePacket+0x300>)
   11734:	9300      	str	r3, [sp, #0]
   11736:	2102      	movs	r1, #2
   11738:	003b      	movs	r3, r7
   1173a:	4d3f      	ldr	r5, [pc, #252]	; (11838 <AssemblePacket+0x328>)
   1173c:	483f      	ldr	r0, [pc, #252]	; (1183c <AssemblePacket+0x32c>)
   1173e:	47a8      	blx	r5
   11740:	8836      	ldrh	r6, [r6, #0]
   11742:	2204      	movs	r2, #4
   11744:	19f0      	adds	r0, r6, r7
   11746:	4932      	ldr	r1, [pc, #200]	; (11810 <AssemblePacket+0x300>)
   11748:	4b33      	ldr	r3, [pc, #204]	; (11818 <AssemblePacket+0x308>)
   1174a:	4798      	blx	r3
   1174c:	3e0c      	subs	r6, #12
   1174e:	34c6      	adds	r4, #198	; 0xc6
   11750:	8026      	strh	r6, [r4, #0]
   11752:	b00d      	add	sp, #52	; 0x34
   11754:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11756:	0029      	movs	r1, r5
   11758:	2010      	movs	r0, #16
   1175a:	4f39      	ldr	r7, [pc, #228]	; (11840 <AssemblePacket+0x330>)
   1175c:	47b8      	blx	r7
   1175e:	2808      	cmp	r0, #8
   11760:	d000      	beq.n	11764 <AssemblePacket+0x254>
   11762:	e75f      	b.n	11624 <AssemblePacket+0x114>
   11764:	0029      	movs	r1, r5
   11766:	3009      	adds	r0, #9
   11768:	47b8      	blx	r7
   1176a:	782b      	ldrb	r3, [r5, #0]
   1176c:	2808      	cmp	r0, #8
   1176e:	d047      	beq.n	11800 <AssemblePacket+0x2f0>
   11770:	7832      	ldrb	r2, [r6, #0]
   11772:	429a      	cmp	r2, r3
   11774:	d300      	bcc.n	11778 <AssemblePacket+0x268>
   11776:	e74d      	b.n	11614 <AssemblePacket+0x104>
   11778:	3b01      	subs	r3, #1
   1177a:	702b      	strb	r3, [r5, #0]
   1177c:	e74a      	b.n	11614 <AssemblePacket+0x104>
   1177e:	800f      	strh	r7, [r1, #0]
   11780:	2210      	movs	r2, #16
   11782:	348c      	adds	r4, #140	; 0x8c
   11784:	7823      	ldrb	r3, [r4, #0]
   11786:	4393      	bics	r3, r2
   11788:	e724      	b.n	115d4 <AssemblePacket+0xc4>
   1178a:	2000      	movs	r0, #0
   1178c:	e7f8      	b.n	11780 <AssemblePacket+0x270>
   1178e:	4b2d      	ldr	r3, [pc, #180]	; (11844 <AssemblePacket+0x334>)
   11790:	4798      	blx	r3
   11792:	220f      	movs	r2, #15
   11794:	0003      	movs	r3, r0
   11796:	0020      	movs	r0, r4
   11798:	4013      	ands	r3, r2
   1179a:	4390      	bics	r0, r2
   1179c:	4318      	orrs	r0, r3
   1179e:	e766      	b.n	1166e <AssemblePacket+0x15e>
   117a0:	9b06      	ldr	r3, [sp, #24]
   117a2:	2b00      	cmp	r3, #0
   117a4:	d000      	beq.n	117a8 <AssemblePacket+0x298>
   117a6:	e77b      	b.n	116a0 <AssemblePacket+0x190>
   117a8:	4d1a      	ldr	r5, [pc, #104]	; (11814 <AssemblePacket+0x304>)
   117aa:	002b      	movs	r3, r5
   117ac:	33d8      	adds	r3, #216	; 0xd8
   117ae:	781b      	ldrb	r3, [r3, #0]
   117b0:	2b00      	cmp	r3, #0
   117b2:	d0a6      	beq.n	11702 <AssemblePacket+0x1f2>
   117b4:	261e      	movs	r6, #30
   117b6:	ab04      	add	r3, sp, #16
   117b8:	18f6      	adds	r6, r6, r3
   117ba:	2200      	movs	r2, #0
   117bc:	0031      	movs	r1, r6
   117be:	4822      	ldr	r0, [pc, #136]	; (11848 <AssemblePacket+0x338>)
   117c0:	4b18      	ldr	r3, [pc, #96]	; (11824 <AssemblePacket+0x314>)
   117c2:	4798      	blx	r3
   117c4:	682b      	ldr	r3, [r5, #0]
   117c6:	7831      	ldrb	r1, [r6, #0]
   117c8:	0a18      	lsrs	r0, r3, #8
   117ca:	792b      	ldrb	r3, [r5, #4]
   117cc:	9703      	str	r7, [sp, #12]
   117ce:	061b      	lsls	r3, r3, #24
   117d0:	4303      	orrs	r3, r0
   117d2:	9304      	str	r3, [sp, #16]
   117d4:	7823      	ldrb	r3, [r4, #0]
   117d6:	1d2a      	adds	r2, r5, #4
   117d8:	9302      	str	r3, [sp, #8]
   117da:	2302      	movs	r3, #2
   117dc:	9301      	str	r3, [sp, #4]
   117de:	4b17      	ldr	r3, [pc, #92]	; (1183c <AssemblePacket+0x32c>)
   117e0:	4819      	ldr	r0, [pc, #100]	; (11848 <AssemblePacket+0x338>)
   117e2:	9300      	str	r3, [sp, #0]
   117e4:	6fd3      	ldr	r3, [r2, #124]	; 0x7c
   117e6:	4d11      	ldr	r5, [pc, #68]	; (1182c <AssemblePacket+0x31c>)
   117e8:	2200      	movs	r2, #0
   117ea:	47a8      	blx	r5
   117ec:	2800      	cmp	r0, #0
   117ee:	d002      	beq.n	117f6 <AssemblePacket+0x2e6>
   117f0:	2020      	movs	r0, #32
   117f2:	4b0f      	ldr	r3, [pc, #60]	; (11830 <AssemblePacket+0x320>)
   117f4:	4798      	blx	r3
   117f6:	8823      	ldrh	r3, [r4, #0]
   117f8:	8832      	ldrh	r2, [r6, #0]
   117fa:	189b      	adds	r3, r3, r2
   117fc:	8023      	strh	r3, [r4, #0]
   117fe:	e780      	b.n	11702 <AssemblePacket+0x1f2>
   11800:	34df      	adds	r4, #223	; 0xdf
   11802:	7023      	strb	r3, [r4, #0]
   11804:	e70e      	b.n	11624 <AssemblePacket+0x114>
   11806:	46c0      	nop			; (mov r8, r8)
   11808:	00019ec9 	.word	0x00019ec9
   1180c:	20002d91 	.word	0x20002d91
   11810:	20001110 	.word	0x20001110
   11814:	20002b5c 	.word	0x20002b5c
   11818:	00019da5 	.word	0x00019da5
   1181c:	000202a6 	.word	0x000202a6
   11820:	20002bdc 	.word	0x20002bdc
   11824:	0000fee9 	.word	0x0000fee9
   11828:	20002b91 	.word	0x20002b91
   1182c:	000113e9 	.word	0x000113e9
   11830:	000114a9 	.word	0x000114a9
   11834:	00010221 	.word	0x00010221
   11838:	0000de05 	.word	0x0000de05
   1183c:	20002b81 	.word	0x20002b81
   11840:	0000d939 	.word	0x0000d939
   11844:	0000fde5 	.word	0x0000fde5
   11848:	20002eac 	.word	0x20002eac

0001184c <UpdateRxDataAvailableCbParams>:
   1184c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1184e:	4e0f      	ldr	r6, [pc, #60]	; (1188c <UpdateRxDataAvailableCbParams+0x40>)
   11850:	7874      	ldrb	r4, [r6, #1]
   11852:	7835      	ldrb	r5, [r6, #0]
   11854:	0224      	lsls	r4, r4, #8
   11856:	432c      	orrs	r4, r5
   11858:	78b5      	ldrb	r5, [r6, #2]
   1185a:	042d      	lsls	r5, r5, #16
   1185c:	432c      	orrs	r4, r5
   1185e:	78f5      	ldrb	r5, [r6, #3]
   11860:	062d      	lsls	r5, r5, #24
   11862:	4325      	orrs	r5, r4
   11864:	d011      	beq.n	1188a <UpdateRxDataAvailableCbParams+0x3e>
   11866:	4c0a      	ldr	r4, [pc, #40]	; (11890 <UpdateRxDataAvailableCbParams+0x44>)
   11868:	2702      	movs	r7, #2
   1186a:	0026      	movs	r6, r4
   1186c:	36f8      	adds	r6, #248	; 0xf8
   1186e:	6836      	ldr	r6, [r6, #0]
   11870:	423e      	tst	r6, r7
   11872:	d00a      	beq.n	1188a <UpdateRxDataAvailableCbParams+0x3e>
   11874:	0026      	movs	r6, r4
   11876:	34fc      	adds	r4, #252	; 0xfc
   11878:	36ff      	adds	r6, #255	; 0xff
   1187a:	60a0      	str	r0, [r4, #8]
   1187c:	60e1      	str	r1, [r4, #12]
   1187e:	7077      	strb	r7, [r6, #1]
   11880:	7372      	strb	r2, [r6, #13]
   11882:	73b3      	strb	r3, [r6, #14]
   11884:	4903      	ldr	r1, [pc, #12]	; (11894 <UpdateRxDataAvailableCbParams+0x48>)
   11886:	6820      	ldr	r0, [r4, #0]
   11888:	47a8      	blx	r5
   1188a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1188c:	20002ea4 	.word	0x20002ea4
   11890:	20002b5c 	.word	0x20002b5c
   11894:	20002c5c 	.word	0x20002c5c

00011898 <LorawanNotifyAppOnRxdone>:
   11898:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1189a:	4c25      	ldr	r4, [pc, #148]	; (11930 <LorawanNotifyAppOnRxdone+0x98>)
   1189c:	0007      	movs	r7, r0
   1189e:	0023      	movs	r3, r4
   118a0:	33f4      	adds	r3, #244	; 0xf4
   118a2:	781b      	ldrb	r3, [r3, #0]
   118a4:	000d      	movs	r5, r1
   118a6:	0016      	movs	r6, r2
   118a8:	2b01      	cmp	r3, #1
   118aa:	d136      	bne.n	1191a <LorawanNotifyAppOnRxdone+0x82>
   118ac:	0022      	movs	r2, r4
   118ae:	210e      	movs	r1, #14
   118b0:	327c      	adds	r2, #124	; 0x7c
   118b2:	7813      	ldrb	r3, [r2, #0]
   118b4:	438b      	bics	r3, r1
   118b6:	7013      	strb	r3, [r2, #0]
   118b8:	491e      	ldr	r1, [pc, #120]	; (11934 <LorawanNotifyAppOnRxdone+0x9c>)
   118ba:	784a      	ldrb	r2, [r1, #1]
   118bc:	780b      	ldrb	r3, [r1, #0]
   118be:	0212      	lsls	r2, r2, #8
   118c0:	431a      	orrs	r2, r3
   118c2:	788b      	ldrb	r3, [r1, #2]
   118c4:	041b      	lsls	r3, r3, #16
   118c6:	431a      	orrs	r2, r3
   118c8:	78cb      	ldrb	r3, [r1, #3]
   118ca:	061b      	lsls	r3, r3, #24
   118cc:	4313      	orrs	r3, r2
   118ce:	d023      	beq.n	11918 <LorawanNotifyAppOnRxdone+0x80>
   118d0:	0022      	movs	r2, r4
   118d2:	2120      	movs	r1, #32
   118d4:	328c      	adds	r2, #140	; 0x8c
   118d6:	7813      	ldrb	r3, [r2, #0]
   118d8:	438b      	bics	r3, r1
   118da:	7013      	strb	r3, [r2, #0]
   118dc:	0023      	movs	r3, r4
   118de:	33f4      	adds	r3, #244	; 0xf4
   118e0:	781b      	ldrb	r3, [r3, #0]
   118e2:	7878      	ldrb	r0, [r7, #1]
   118e4:	469c      	mov	ip, r3
   118e6:	78fa      	ldrb	r2, [r7, #3]
   118e8:	78b9      	ldrb	r1, [r7, #2]
   118ea:	793b      	ldrb	r3, [r7, #4]
   118ec:	4667      	mov	r7, ip
   118ee:	0209      	lsls	r1, r1, #8
   118f0:	4301      	orrs	r1, r0
   118f2:	0410      	lsls	r0, r2, #16
   118f4:	4308      	orrs	r0, r1
   118f6:	061b      	lsls	r3, r3, #24
   118f8:	4318      	orrs	r0, r3
   118fa:	0032      	movs	r2, r6
   118fc:	2308      	movs	r3, #8
   118fe:	0029      	movs	r1, r5
   11900:	2f04      	cmp	r7, #4
   11902:	d112      	bne.n	1192a <LorawanNotifyAppOnRxdone+0x92>
   11904:	4d0c      	ldr	r5, [pc, #48]	; (11938 <LorawanNotifyAppOnRxdone+0xa0>)
   11906:	47a8      	blx	r5
   11908:	2385      	movs	r3, #133	; 0x85
   1190a:	009b      	lsls	r3, r3, #2
   1190c:	5ce3      	ldrb	r3, [r4, r3]
   1190e:	2b00      	cmp	r3, #0
   11910:	d102      	bne.n	11918 <LorawanNotifyAppOnRxdone+0x80>
   11912:	2008      	movs	r0, #8
   11914:	4b09      	ldr	r3, [pc, #36]	; (1193c <LorawanNotifyAppOnRxdone+0xa4>)
   11916:	4798      	blx	r3
   11918:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1191a:	2b04      	cmp	r3, #4
   1191c:	d1cc      	bne.n	118b8 <LorawanNotifyAppOnRxdone+0x20>
   1191e:	0023      	movs	r3, r4
   11920:	33e8      	adds	r3, #232	; 0xe8
   11922:	7818      	ldrb	r0, [r3, #0]
   11924:	4b06      	ldr	r3, [pc, #24]	; (11940 <LorawanNotifyAppOnRxdone+0xa8>)
   11926:	4798      	blx	r3
   11928:	e7c6      	b.n	118b8 <LorawanNotifyAppOnRxdone+0x20>
   1192a:	4d06      	ldr	r5, [pc, #24]	; (11944 <LorawanNotifyAppOnRxdone+0xac>)
   1192c:	47a8      	blx	r5
   1192e:	e7eb      	b.n	11908 <LorawanNotifyAppOnRxdone+0x70>
   11930:	20002b5c 	.word	0x20002b5c
   11934:	20002ea4 	.word	0x20002ea4
   11938:	000143c9 	.word	0x000143c9
   1193c:	000114a9 	.word	0x000114a9
   11940:	0000f141 	.word	0x0000f141
   11944:	0001184d 	.word	0x0001184d

00011948 <LorawanSetReceiveWindow2Parameters>:
   11948:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1194a:	466b      	mov	r3, sp
   1194c:	1cdd      	adds	r5, r3, #3
   1194e:	9001      	str	r0, [sp, #4]
   11950:	7029      	strb	r1, [r5, #0]
   11952:	2001      	movs	r0, #1
   11954:	a901      	add	r1, sp, #4
   11956:	4c09      	ldr	r4, [pc, #36]	; (1197c <LorawanSetReceiveWindow2Parameters+0x34>)
   11958:	47a0      	blx	r4
   1195a:	2808      	cmp	r0, #8
   1195c:	d002      	beq.n	11964 <LorawanSetReceiveWindow2Parameters+0x1c>
   1195e:	240a      	movs	r4, #10
   11960:	0020      	movs	r0, r4
   11962:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
   11964:	0029      	movs	r1, r5
   11966:	200f      	movs	r0, #15
   11968:	47a0      	blx	r4
   1196a:	0004      	movs	r4, r0
   1196c:	2808      	cmp	r0, #8
   1196e:	d1f6      	bne.n	1195e <LorawanSetReceiveWindow2Parameters+0x16>
   11970:	7829      	ldrb	r1, [r5, #0]
   11972:	9801      	ldr	r0, [sp, #4]
   11974:	4b02      	ldr	r3, [pc, #8]	; (11980 <LorawanSetReceiveWindow2Parameters+0x38>)
   11976:	4798      	blx	r3
   11978:	e7f2      	b.n	11960 <LorawanSetReceiveWindow2Parameters+0x18>
   1197a:	46c0      	nop			; (mov r8, r8)
   1197c:	0000d939 	.word	0x0000d939
   11980:	00010929 	.word	0x00010929

00011984 <LorawanSetFrequency>:
   11984:	b507      	push	{r0, r1, r2, lr}
   11986:	466b      	mov	r3, sp
   11988:	9100      	str	r1, [sp, #0]
   1198a:	7118      	strb	r0, [r3, #4]
   1198c:	4669      	mov	r1, sp
   1198e:	2000      	movs	r0, #0
   11990:	4b01      	ldr	r3, [pc, #4]	; (11998 <LorawanSetFrequency+0x14>)
   11992:	4798      	blx	r3
   11994:	bd0e      	pop	{r1, r2, r3, pc}
   11996:	46c0      	nop			; (mov r8, r8)
   11998:	0000da45 	.word	0x0000da45

0001199c <LorawanGetReceiveWindow2Parameters>:
   1199c:	4a06      	ldr	r2, [pc, #24]	; (119b8 <LorawanGetReceiveWindow2Parameters+0x1c>)
   1199e:	0013      	movs	r3, r2
   119a0:	336e      	adds	r3, #110	; 0x6e
   119a2:	781b      	ldrb	r3, [r3, #0]
   119a4:	7103      	strb	r3, [r0, #4]
   119a6:	0013      	movs	r3, r2
   119a8:	326c      	adds	r2, #108	; 0x6c
   119aa:	336a      	adds	r3, #106	; 0x6a
   119ac:	8819      	ldrh	r1, [r3, #0]
   119ae:	8813      	ldrh	r3, [r2, #0]
   119b0:	041b      	lsls	r3, r3, #16
   119b2:	430b      	orrs	r3, r1
   119b4:	6003      	str	r3, [r0, #0]
   119b6:	4770      	bx	lr
   119b8:	20002b5c 	.word	0x20002b5c

000119bc <LORAWAN_GetAttr>:
   119bc:	b5f0      	push	{r4, r5, r6, r7, lr}
   119be:	000b      	movs	r3, r1
   119c0:	b093      	sub	sp, #76	; 0x4c
   119c2:	0016      	movs	r6, r2
   119c4:	2842      	cmp	r0, #66	; 0x42
   119c6:	d844      	bhi.n	11a52 <LORAWAN_GetAttr+0x96>
   119c8:	f004 fe30 	bl	1662c <__gnu_thumb1_case_uhi>
   119cc:	00620046 	.word	0x00620046
   119d0:	00760066 	.word	0x00760066
   119d4:	0072006e 	.word	0x0072006e
   119d8:	007f007a 	.word	0x007f007a
   119dc:	00870084 	.word	0x00870084
   119e0:	008e008a 	.word	0x008e008a
   119e4:	00990091 	.word	0x00990091
   119e8:	009f009c 	.word	0x009f009c
   119ec:	00a600a3 	.word	0x00a600a3
   119f0:	00ac00a9 	.word	0x00ac00a9
   119f4:	00d800af 	.word	0x00d800af
   119f8:	00b200b5 	.word	0x00b200b5
   119fc:	00df00e5 	.word	0x00df00e5
   11a00:	00ce00d3 	.word	0x00ce00d3
   11a04:	004300c7 	.word	0x004300c7
   11a08:	00c10096 	.word	0x00c10096
   11a0c:	00be00c5 	.word	0x00be00c5
   11a10:	00dc00bb 	.word	0x00dc00bb
   11a14:	004c00e2 	.word	0x004c00e2
   11a18:	004e004c 	.word	0x004e004c
   11a1c:	011500ee 	.word	0x011500ee
   11a20:	00ff010c 	.word	0x00ff010c
   11a24:	01300122 	.word	0x01300122
   11a28:	0148013c 	.word	0x0148013c
   11a2c:	01610154 	.word	0x01610154
   11a30:	01940043 	.word	0x01940043
   11a34:	0170016c 	.word	0x0170016c
   11a38:	017a0175 	.word	0x017a0175
   11a3c:	0183017f 	.word	0x0183017f
   11a40:	01890186 	.word	0x01890186
   11a44:	00430191 	.word	0x00430191
   11a48:	00430043 	.word	0x00430043
   11a4c:	019d0198 	.word	0x019d0198
   11a50:	01ee      	.short	0x01ee
   11a52:	200a      	movs	r0, #10
   11a54:	b013      	add	sp, #76	; 0x4c
   11a56:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11a58:	2208      	movs	r2, #8
   11a5a:	49c4      	ldr	r1, [pc, #784]	; (11d6c <LORAWAN_GetAttr+0x3b0>)
   11a5c:	315d      	adds	r1, #93	; 0x5d
   11a5e:	0030      	movs	r0, r6
   11a60:	4bc3      	ldr	r3, [pc, #780]	; (11d70 <LORAWAN_GetAttr+0x3b4>)
   11a62:	4798      	blx	r3
   11a64:	2008      	movs	r0, #8
   11a66:	e7f5      	b.n	11a54 <LORAWAN_GetAttr+0x98>
   11a68:	ac0e      	add	r4, sp, #56	; 0x38
   11a6a:	0021      	movs	r1, r4
   11a6c:	4bc1      	ldr	r3, [pc, #772]	; (11d74 <LORAWAN_GetAttr+0x3b8>)
   11a6e:	201d      	movs	r0, #29
   11a70:	4798      	blx	r3
   11a72:	4bbe      	ldr	r3, [pc, #760]	; (11d6c <LORAWAN_GetAttr+0x3b0>)
   11a74:	a910      	add	r1, sp, #64	; 0x40
   11a76:	33fe      	adds	r3, #254	; 0xfe
   11a78:	8adb      	ldrh	r3, [r3, #22]
   11a7a:	2208      	movs	r2, #8
   11a7c:	808b      	strh	r3, [r1, #4]
   11a7e:	7923      	ldrb	r3, [r4, #4]
   11a80:	718b      	strb	r3, [r1, #6]
   11a82:	8823      	ldrh	r3, [r4, #0]
   11a84:	800b      	strh	r3, [r1, #0]
   11a86:	8863      	ldrh	r3, [r4, #2]
   11a88:	804b      	strh	r3, [r1, #2]
   11a8a:	7963      	ldrb	r3, [r4, #5]
   11a8c:	71cb      	strb	r3, [r1, #7]
   11a8e:	e7e6      	b.n	11a5e <LORAWAN_GetAttr+0xa2>
   11a90:	49b6      	ldr	r1, [pc, #728]	; (11d6c <LORAWAN_GetAttr+0x3b0>)
   11a92:	2208      	movs	r2, #8
   11a94:	3155      	adds	r1, #85	; 0x55
   11a96:	e7e2      	b.n	11a5e <LORAWAN_GetAttr+0xa2>
   11a98:	4bb4      	ldr	r3, [pc, #720]	; (11d6c <LORAWAN_GetAttr+0x3b0>)
   11a9a:	681a      	ldr	r2, [r3, #0]
   11a9c:	791b      	ldrb	r3, [r3, #4]
   11a9e:	0a12      	lsrs	r2, r2, #8
   11aa0:	061b      	lsls	r3, r3, #24
   11aa2:	4313      	orrs	r3, r2
   11aa4:	6033      	str	r3, [r6, #0]
   11aa6:	e7dd      	b.n	11a64 <LORAWAN_GetAttr+0xa8>
   11aa8:	49b0      	ldr	r1, [pc, #704]	; (11d6c <LORAWAN_GetAttr+0x3b0>)
   11aaa:	2210      	movs	r2, #16
   11aac:	3105      	adds	r1, #5
   11aae:	e7d6      	b.n	11a5e <LORAWAN_GetAttr+0xa2>
   11ab0:	49ae      	ldr	r1, [pc, #696]	; (11d6c <LORAWAN_GetAttr+0x3b0>)
   11ab2:	2210      	movs	r2, #16
   11ab4:	3115      	adds	r1, #21
   11ab6:	e7d2      	b.n	11a5e <LORAWAN_GetAttr+0xa2>
   11ab8:	49ac      	ldr	r1, [pc, #688]	; (11d6c <LORAWAN_GetAttr+0x3b0>)
   11aba:	2210      	movs	r2, #16
   11abc:	3145      	adds	r1, #69	; 0x45
   11abe:	e7ce      	b.n	11a5e <LORAWAN_GetAttr+0xa2>
   11ac0:	4baa      	ldr	r3, [pc, #680]	; (11d6c <LORAWAN_GetAttr+0x3b0>)
   11ac2:	337c      	adds	r3, #124	; 0x7c
   11ac4:	781b      	ldrb	r3, [r3, #0]
   11ac6:	069b      	lsls	r3, r3, #26
   11ac8:	e039      	b.n	11b3e <LORAWAN_GetAttr+0x182>
   11aca:	4ba8      	ldr	r3, [pc, #672]	; (11d6c <LORAWAN_GetAttr+0x3b0>)
   11acc:	33df      	adds	r3, #223	; 0xdf
   11ace:	781b      	ldrb	r3, [r3, #0]
   11ad0:	7033      	strb	r3, [r6, #0]
   11ad2:	e7c7      	b.n	11a64 <LORAWAN_GetAttr+0xa8>
   11ad4:	4ba5      	ldr	r3, [pc, #660]	; (11d6c <LORAWAN_GetAttr+0x3b0>)
   11ad6:	33e1      	adds	r3, #225	; 0xe1
   11ad8:	e7f9      	b.n	11ace <LORAWAN_GetAttr+0x112>
   11ada:	4ba4      	ldr	r3, [pc, #656]	; (11d6c <LORAWAN_GetAttr+0x3b0>)
   11adc:	33f7      	adds	r3, #247	; 0xf7
   11ade:	e7f6      	b.n	11ace <LORAWAN_GetAttr+0x112>
   11ae0:	4ba2      	ldr	r3, [pc, #648]	; (11d6c <LORAWAN_GetAttr+0x3b0>)
   11ae2:	3304      	adds	r3, #4
   11ae4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   11ae6:	e7dd      	b.n	11aa4 <LORAWAN_GetAttr+0xe8>
   11ae8:	4ba0      	ldr	r3, [pc, #640]	; (11d6c <LORAWAN_GetAttr+0x3b0>)
   11aea:	3308      	adds	r3, #8
   11aec:	e7fa      	b.n	11ae4 <LORAWAN_GetAttr+0x128>
   11aee:	4b9f      	ldr	r3, [pc, #636]	; (11d6c <LORAWAN_GetAttr+0x3b0>)
   11af0:	33c8      	adds	r3, #200	; 0xc8
   11af2:	881b      	ldrh	r3, [r3, #0]
   11af4:	8033      	strh	r3, [r6, #0]
   11af6:	e7b5      	b.n	11a64 <LORAWAN_GetAttr+0xa8>
   11af8:	4b9c      	ldr	r3, [pc, #624]	; (11d6c <LORAWAN_GetAttr+0x3b0>)
   11afa:	33ca      	adds	r3, #202	; 0xca
   11afc:	e7f9      	b.n	11af2 <LORAWAN_GetAttr+0x136>
   11afe:	4b9b      	ldr	r3, [pc, #620]	; (11d6c <LORAWAN_GetAttr+0x3b0>)
   11b00:	33cc      	adds	r3, #204	; 0xcc
   11b02:	e7f6      	b.n	11af2 <LORAWAN_GetAttr+0x136>
   11b04:	4b99      	ldr	r3, [pc, #612]	; (11d6c <LORAWAN_GetAttr+0x3b0>)
   11b06:	33ce      	adds	r3, #206	; 0xce
   11b08:	e7f3      	b.n	11af2 <LORAWAN_GetAttr+0x136>
   11b0a:	4b98      	ldr	r3, [pc, #608]	; (11d6c <LORAWAN_GetAttr+0x3b0>)
   11b0c:	33d0      	adds	r3, #208	; 0xd0
   11b0e:	881b      	ldrh	r3, [r3, #0]
   11b10:	e7de      	b.n	11ad0 <LORAWAN_GetAttr+0x114>
   11b12:	4b96      	ldr	r3, [pc, #600]	; (11d6c <LORAWAN_GetAttr+0x3b0>)
   11b14:	33d4      	adds	r3, #212	; 0xd4
   11b16:	e7da      	b.n	11ace <LORAWAN_GetAttr+0x112>
   11b18:	4b94      	ldr	r3, [pc, #592]	; (11d6c <LORAWAN_GetAttr+0x3b0>)
   11b1a:	33d5      	adds	r3, #213	; 0xd5
   11b1c:	e7d7      	b.n	11ace <LORAWAN_GetAttr+0x112>
   11b1e:	4b93      	ldr	r3, [pc, #588]	; (11d6c <LORAWAN_GetAttr+0x3b0>)
   11b20:	33d2      	adds	r3, #210	; 0xd2
   11b22:	e7e6      	b.n	11af2 <LORAWAN_GetAttr+0x136>
   11b24:	4b91      	ldr	r3, [pc, #580]	; (11d6c <LORAWAN_GetAttr+0x3b0>)
   11b26:	33da      	adds	r3, #218	; 0xda
   11b28:	e7d1      	b.n	11ace <LORAWAN_GetAttr+0x112>
   11b2a:	4b90      	ldr	r3, [pc, #576]	; (11d6c <LORAWAN_GetAttr+0x3b0>)
   11b2c:	33d9      	adds	r3, #217	; 0xd9
   11b2e:	e7ce      	b.n	11ace <LORAWAN_GetAttr+0x112>
   11b30:	4b8e      	ldr	r3, [pc, #568]	; (11d6c <LORAWAN_GetAttr+0x3b0>)
   11b32:	33e0      	adds	r3, #224	; 0xe0
   11b34:	e7cb      	b.n	11ace <LORAWAN_GetAttr+0x112>
   11b36:	4b8d      	ldr	r3, [pc, #564]	; (11d6c <LORAWAN_GetAttr+0x3b0>)
   11b38:	337c      	adds	r3, #124	; 0x7c
   11b3a:	781b      	ldrb	r3, [r3, #0]
   11b3c:	06db      	lsls	r3, r3, #27
   11b3e:	0fdb      	lsrs	r3, r3, #31
   11b40:	e7c6      	b.n	11ad0 <LORAWAN_GetAttr+0x114>
   11b42:	4b8a      	ldr	r3, [pc, #552]	; (11d6c <LORAWAN_GetAttr+0x3b0>)
   11b44:	33de      	adds	r3, #222	; 0xde
   11b46:	e7c2      	b.n	11ace <LORAWAN_GetAttr+0x112>
   11b48:	4b88      	ldr	r3, [pc, #544]	; (11d6c <LORAWAN_GetAttr+0x3b0>)
   11b4a:	33dd      	adds	r3, #221	; 0xdd
   11b4c:	e7bf      	b.n	11ace <LORAWAN_GetAttr+0x112>
   11b4e:	4b87      	ldr	r3, [pc, #540]	; (11d6c <LORAWAN_GetAttr+0x3b0>)
   11b50:	3390      	adds	r3, #144	; 0x90
   11b52:	781b      	ldrb	r3, [r3, #0]
   11b54:	e7ce      	b.n	11af4 <LORAWAN_GetAttr+0x138>
   11b56:	4b85      	ldr	r3, [pc, #532]	; (11d6c <LORAWAN_GetAttr+0x3b0>)
   11b58:	e7c4      	b.n	11ae4 <LORAWAN_GetAttr+0x128>
   11b5a:	2016      	movs	r0, #22
   11b5c:	781b      	ldrb	r3, [r3, #0]
   11b5e:	a910      	add	r1, sp, #64	; 0x40
   11b60:	700b      	strb	r3, [r1, #0]
   11b62:	4b85      	ldr	r3, [pc, #532]	; (11d78 <LORAWAN_GetAttr+0x3bc>)
   11b64:	4798      	blx	r3
   11b66:	e77d      	b.n	11a64 <LORAWAN_GetAttr+0xa8>
   11b68:	781b      	ldrb	r3, [r3, #0]
   11b6a:	a910      	add	r1, sp, #64	; 0x40
   11b6c:	700b      	strb	r3, [r1, #0]
   11b6e:	2012      	movs	r0, #18
   11b70:	e7f7      	b.n	11b62 <LORAWAN_GetAttr+0x1a6>
   11b72:	781b      	ldrb	r3, [r3, #0]
   11b74:	a910      	add	r1, sp, #64	; 0x40
   11b76:	700b      	strb	r3, [r1, #0]
   11b78:	2000      	movs	r0, #0
   11b7a:	e7f2      	b.n	11b62 <LORAWAN_GetAttr+0x1a6>
   11b7c:	0010      	movs	r0, r2
   11b7e:	4b7f      	ldr	r3, [pc, #508]	; (11d7c <LORAWAN_GetAttr+0x3c0>)
   11b80:	4798      	blx	r3
   11b82:	e76f      	b.n	11a64 <LORAWAN_GetAttr+0xa8>
   11b84:	4b79      	ldr	r3, [pc, #484]	; (11d6c <LORAWAN_GetAttr+0x3b0>)
   11b86:	33f6      	adds	r3, #246	; 0xf6
   11b88:	e7a1      	b.n	11ace <LORAWAN_GetAttr+0x112>
   11b8a:	4b78      	ldr	r3, [pc, #480]	; (11d6c <LORAWAN_GetAttr+0x3b0>)
   11b8c:	33f4      	adds	r3, #244	; 0xf4
   11b8e:	e79e      	b.n	11ace <LORAWAN_GetAttr+0x112>
   11b90:	4b76      	ldr	r3, [pc, #472]	; (11d6c <LORAWAN_GetAttr+0x3b0>)
   11b92:	33f5      	adds	r3, #245	; 0xf5
   11b94:	e79b      	b.n	11ace <LORAWAN_GetAttr+0x112>
   11b96:	21fa      	movs	r1, #250	; 0xfa
   11b98:	4b74      	ldr	r3, [pc, #464]	; (11d6c <LORAWAN_GetAttr+0x3b0>)
   11b9a:	0089      	lsls	r1, r1, #2
   11b9c:	3388      	adds	r3, #136	; 0x88
   11b9e:	6818      	ldr	r0, [r3, #0]
   11ba0:	4b77      	ldr	r3, [pc, #476]	; (11d80 <LORAWAN_GetAttr+0x3c4>)
   11ba2:	4798      	blx	r3
   11ba4:	8030      	strh	r0, [r6, #0]
   11ba6:	e75d      	b.n	11a64 <LORAWAN_GetAttr+0xa8>
   11ba8:	780a      	ldrb	r2, [r1, #0]
   11baa:	200a      	movs	r0, #10
   11bac:	2a03      	cmp	r2, #3
   11bae:	d900      	bls.n	11bb2 <LORAWAN_GetAttr+0x1f6>
   11bb0:	e750      	b.n	11a54 <LORAWAN_GetAttr+0x98>
   11bb2:	2322      	movs	r3, #34	; 0x22
   11bb4:	496d      	ldr	r1, [pc, #436]	; (11d6c <LORAWAN_GetAttr+0x3b0>)
   11bb6:	33ff      	adds	r3, #255	; 0xff
   11bb8:	5cc9      	ldrb	r1, [r1, r3]
   11bba:	3b21      	subs	r3, #33	; 0x21
   11bbc:	3bff      	subs	r3, #255	; 0xff
   11bbe:	4093      	lsls	r3, r2
   11bc0:	400b      	ands	r3, r1
   11bc2:	1e5a      	subs	r2, r3, #1
   11bc4:	4193      	sbcs	r3, r2
   11bc6:	7033      	strb	r3, [r6, #0]
   11bc8:	e02e      	b.n	11c28 <LORAWAN_GetAttr+0x26c>
   11bca:	780b      	ldrb	r3, [r1, #0]
   11bcc:	200a      	movs	r0, #10
   11bce:	2b03      	cmp	r3, #3
   11bd0:	d900      	bls.n	11bd4 <LORAWAN_GetAttr+0x218>
   11bd2:	e73f      	b.n	11a54 <LORAWAN_GetAttr+0x98>
   11bd4:	213c      	movs	r1, #60	; 0x3c
   11bd6:	4359      	muls	r1, r3
   11bd8:	3139      	adds	r1, #57	; 0x39
   11bda:	4b64      	ldr	r3, [pc, #400]	; (11d6c <LORAWAN_GetAttr+0x3b0>)
   11bdc:	31ff      	adds	r1, #255	; 0xff
   11bde:	18c9      	adds	r1, r1, r3
   11be0:	2210      	movs	r2, #16
   11be2:	e73c      	b.n	11a5e <LORAWAN_GetAttr+0xa2>
   11be4:	780b      	ldrb	r3, [r1, #0]
   11be6:	200a      	movs	r0, #10
   11be8:	2b03      	cmp	r3, #3
   11bea:	d900      	bls.n	11bee <LORAWAN_GetAttr+0x232>
   11bec:	e732      	b.n	11a54 <LORAWAN_GetAttr+0x98>
   11bee:	213c      	movs	r1, #60	; 0x3c
   11bf0:	4359      	muls	r1, r3
   11bf2:	3129      	adds	r1, #41	; 0x29
   11bf4:	e7f1      	b.n	11bda <LORAWAN_GetAttr+0x21e>
   11bf6:	780b      	ldrb	r3, [r1, #0]
   11bf8:	200a      	movs	r0, #10
   11bfa:	2b03      	cmp	r3, #3
   11bfc:	d900      	bls.n	11c00 <LORAWAN_GetAttr+0x244>
   11bfe:	e729      	b.n	11a54 <LORAWAN_GetAttr+0x98>
   11c00:	213c      	movs	r1, #60	; 0x3c
   11c02:	4359      	muls	r1, r3
   11c04:	4b59      	ldr	r3, [pc, #356]	; (11d6c <LORAWAN_GetAttr+0x3b0>)
   11c06:	3125      	adds	r1, #37	; 0x25
   11c08:	31ff      	adds	r1, #255	; 0xff
   11c0a:	18c9      	adds	r1, r1, r3
   11c0c:	2204      	movs	r2, #4
   11c0e:	e726      	b.n	11a5e <LORAWAN_GetAttr+0xa2>
   11c10:	780a      	ldrb	r2, [r1, #0]
   11c12:	200a      	movs	r0, #10
   11c14:	2a03      	cmp	r2, #3
   11c16:	d900      	bls.n	11c1a <LORAWAN_GetAttr+0x25e>
   11c18:	e71c      	b.n	11a54 <LORAWAN_GetAttr+0x98>
   11c1a:	233c      	movs	r3, #60	; 0x3c
   11c1c:	435a      	muls	r2, r3
   11c1e:	4b53      	ldr	r3, [pc, #332]	; (11d6c <LORAWAN_GetAttr+0x3b0>)
   11c20:	189b      	adds	r3, r3, r2
   11c22:	33fc      	adds	r3, #252	; 0xfc
   11c24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   11c26:	6033      	str	r3, [r6, #0]
   11c28:	3802      	subs	r0, #2
   11c2a:	e713      	b.n	11a54 <LORAWAN_GetAttr+0x98>
   11c2c:	780a      	ldrb	r2, [r1, #0]
   11c2e:	200a      	movs	r0, #10
   11c30:	2a03      	cmp	r2, #3
   11c32:	d900      	bls.n	11c36 <LORAWAN_GetAttr+0x27a>
   11c34:	e70e      	b.n	11a54 <LORAWAN_GetAttr+0x98>
   11c36:	233c      	movs	r3, #60	; 0x3c
   11c38:	435a      	muls	r2, r3
   11c3a:	4b4c      	ldr	r3, [pc, #304]	; (11d6c <LORAWAN_GetAttr+0x3b0>)
   11c3c:	189b      	adds	r3, r3, r2
   11c3e:	33fc      	adds	r3, #252	; 0xfc
   11c40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   11c42:	e7f0      	b.n	11c26 <LORAWAN_GetAttr+0x26a>
   11c44:	780a      	ldrb	r2, [r1, #0]
   11c46:	200a      	movs	r0, #10
   11c48:	2a03      	cmp	r2, #3
   11c4a:	d900      	bls.n	11c4e <LORAWAN_GetAttr+0x292>
   11c4c:	e702      	b.n	11a54 <LORAWAN_GetAttr+0x98>
   11c4e:	233c      	movs	r3, #60	; 0x3c
   11c50:	435a      	muls	r2, r3
   11c52:	4b46      	ldr	r3, [pc, #280]	; (11d6c <LORAWAN_GetAttr+0x3b0>)
   11c54:	189b      	adds	r3, r3, r2
   11c56:	33fc      	adds	r3, #252	; 0xfc
   11c58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   11c5a:	e7e4      	b.n	11c26 <LORAWAN_GetAttr+0x26a>
   11c5c:	780a      	ldrb	r2, [r1, #0]
   11c5e:	200a      	movs	r0, #10
   11c60:	2a03      	cmp	r2, #3
   11c62:	d900      	bls.n	11c66 <LORAWAN_GetAttr+0x2aa>
   11c64:	e6f6      	b.n	11a54 <LORAWAN_GetAttr+0x98>
   11c66:	233c      	movs	r3, #60	; 0x3c
   11c68:	435a      	muls	r2, r3
   11c6a:	4b40      	ldr	r3, [pc, #256]	; (11d6c <LORAWAN_GetAttr+0x3b0>)
   11c6c:	189b      	adds	r3, r3, r2
   11c6e:	33fc      	adds	r3, #252	; 0xfc
   11c70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   11c72:	e7d8      	b.n	11c26 <LORAWAN_GetAttr+0x26a>
   11c74:	780a      	ldrb	r2, [r1, #0]
   11c76:	200a      	movs	r0, #10
   11c78:	2a03      	cmp	r2, #3
   11c7a:	d900      	bls.n	11c7e <LORAWAN_GetAttr+0x2c2>
   11c7c:	e6ea      	b.n	11a54 <LORAWAN_GetAttr+0x98>
   11c7e:	233c      	movs	r3, #60	; 0x3c
   11c80:	435a      	muls	r2, r3
   11c82:	4b3a      	ldr	r3, [pc, #232]	; (11d6c <LORAWAN_GetAttr+0x3b0>)
   11c84:	189b      	adds	r3, r3, r2
   11c86:	335d      	adds	r3, #93	; 0x5d
   11c88:	33ff      	adds	r3, #255	; 0xff
   11c8a:	781b      	ldrb	r3, [r3, #0]
   11c8c:	e79b      	b.n	11bc6 <LORAWAN_GetAttr+0x20a>
   11c8e:	780a      	ldrb	r2, [r1, #0]
   11c90:	200a      	movs	r0, #10
   11c92:	2a03      	cmp	r2, #3
   11c94:	d900      	bls.n	11c98 <LORAWAN_GetAttr+0x2dc>
   11c96:	e6dd      	b.n	11a54 <LORAWAN_GetAttr+0x98>
   11c98:	233c      	movs	r3, #60	; 0x3c
   11c9a:	435a      	muls	r2, r3
   11c9c:	4b33      	ldr	r3, [pc, #204]	; (11d6c <LORAWAN_GetAttr+0x3b0>)
   11c9e:	189b      	adds	r3, r3, r2
   11ca0:	335e      	adds	r3, #94	; 0x5e
   11ca2:	e7f1      	b.n	11c88 <LORAWAN_GetAttr+0x2cc>
   11ca4:	0010      	movs	r0, r2
   11ca6:	4b37      	ldr	r3, [pc, #220]	; (11d84 <LORAWAN_GetAttr+0x3c8>)
   11ca8:	4798      	blx	r3
   11caa:	e6d3      	b.n	11a54 <LORAWAN_GetAttr+0x98>
   11cac:	0011      	movs	r1, r2
   11cae:	4b31      	ldr	r3, [pc, #196]	; (11d74 <LORAWAN_GetAttr+0x3b8>)
   11cb0:	201f      	movs	r0, #31
   11cb2:	4798      	blx	r3
   11cb4:	e6d6      	b.n	11a64 <LORAWAN_GetAttr+0xa8>
   11cb6:	4b2d      	ldr	r3, [pc, #180]	; (11d6c <LORAWAN_GetAttr+0x3b0>)
   11cb8:	338c      	adds	r3, #140	; 0x8c
   11cba:	781b      	ldrb	r3, [r3, #0]
   11cbc:	071b      	lsls	r3, r3, #28
   11cbe:	e73e      	b.n	11b3e <LORAWAN_GetAttr+0x182>
   11cc0:	4b2a      	ldr	r3, [pc, #168]	; (11d6c <LORAWAN_GetAttr+0x3b0>)
   11cc2:	338c      	adds	r3, #140	; 0x8c
   11cc4:	781b      	ldrb	r3, [r3, #0]
   11cc6:	07db      	lsls	r3, r3, #31
   11cc8:	e739      	b.n	11b3e <LORAWAN_GetAttr+0x182>
   11cca:	2031      	movs	r0, #49	; 0x31
   11ccc:	4b2a      	ldr	r3, [pc, #168]	; (11d78 <LORAWAN_GetAttr+0x3bc>)
   11cce:	4798      	blx	r3
   11cd0:	e6c0      	b.n	11a54 <LORAWAN_GetAttr+0x98>
   11cd2:	492d      	ldr	r1, [pc, #180]	; (11d88 <LORAWAN_GetAttr+0x3cc>)
   11cd4:	2026      	movs	r0, #38	; 0x26
   11cd6:	e7f9      	b.n	11ccc <LORAWAN_GetAttr+0x310>
   11cd8:	4b24      	ldr	r3, [pc, #144]	; (11d6c <LORAWAN_GetAttr+0x3b0>)
   11cda:	33dc      	adds	r3, #220	; 0xdc
   11cdc:	e6f7      	b.n	11ace <LORAWAN_GetAttr+0x112>
   11cde:	4b2b      	ldr	r3, [pc, #172]	; (11d8c <LORAWAN_GetAttr+0x3d0>)
   11ce0:	4798      	blx	r3
   11ce2:	4b2b      	ldr	r3, [pc, #172]	; (11d90 <LORAWAN_GetAttr+0x3d4>)
   11ce4:	0004      	movs	r4, r0
   11ce6:	4798      	blx	r3
   11ce8:	1b00      	subs	r0, r0, r4
   11cea:	7030      	strb	r0, [r6, #0]
   11cec:	e6ba      	b.n	11a64 <LORAWAN_GetAttr+0xa8>
   11cee:	2100      	movs	r1, #0
   11cf0:	2020      	movs	r0, #32
   11cf2:	e7eb      	b.n	11ccc <LORAWAN_GetAttr+0x310>
   11cf4:	4b1d      	ldr	r3, [pc, #116]	; (11d6c <LORAWAN_GetAttr+0x3b0>)
   11cf6:	33ff      	adds	r3, #255	; 0xff
   11cf8:	7c5b      	ldrb	r3, [r3, #17]
   11cfa:	e6e4      	b.n	11ac6 <LORAWAN_GetAttr+0x10a>
   11cfc:	238c      	movs	r3, #140	; 0x8c
   11cfe:	4a1b      	ldr	r2, [pc, #108]	; (11d6c <LORAWAN_GetAttr+0x3b0>)
   11d00:	009b      	lsls	r3, r3, #2
   11d02:	58d3      	ldr	r3, [r2, r3]
   11d04:	e6ce      	b.n	11aa4 <LORAWAN_GetAttr+0xe8>
   11d06:	258a      	movs	r5, #138	; 0x8a
   11d08:	4c18      	ldr	r4, [pc, #96]	; (11d6c <LORAWAN_GetAttr+0x3b0>)
   11d0a:	00ad      	lsls	r5, r5, #2
   11d0c:	5963      	ldr	r3, [r4, r5]
   11d0e:	2015      	movs	r0, #21
   11d10:	3301      	adds	r3, #1
   11d12:	d100      	bne.n	11d16 <LORAWAN_GetAttr+0x35a>
   11d14:	e69e      	b.n	11a54 <LORAWAN_GetAttr+0x98>
   11d16:	4b1f      	ldr	r3, [pc, #124]	; (11d94 <LORAWAN_GetAttr+0x3d8>)
   11d18:	a910      	add	r1, sp, #64	; 0x40
   11d1a:	5ce0      	ldrb	r0, [r4, r3]
   11d1c:	4b1e      	ldr	r3, [pc, #120]	; (11d98 <LORAWAN_GetAttr+0x3dc>)
   11d1e:	4798      	blx	r3
   11d20:	4b1e      	ldr	r3, [pc, #120]	; (11d9c <LORAWAN_GetAttr+0x3e0>)
   11d22:	4798      	blx	r3
   11d24:	22fa      	movs	r2, #250	; 0xfa
   11d26:	9000      	str	r0, [sp, #0]
   11d28:	9101      	str	r1, [sp, #4]
   11d2a:	0092      	lsls	r2, r2, #2
   11d2c:	5960      	ldr	r0, [r4, r5]
   11d2e:	2300      	movs	r3, #0
   11d30:	4d1b      	ldr	r5, [pc, #108]	; (11da0 <LORAWAN_GetAttr+0x3e4>)
   11d32:	2100      	movs	r1, #0
   11d34:	47a8      	blx	r5
   11d36:	9a10      	ldr	r2, [sp, #64]	; 0x40
   11d38:	9b11      	ldr	r3, [sp, #68]	; 0x44
   11d3a:	9002      	str	r0, [sp, #8]
   11d3c:	9103      	str	r1, [sp, #12]
   11d3e:	9800      	ldr	r0, [sp, #0]
   11d40:	9901      	ldr	r1, [sp, #4]
   11d42:	1a80      	subs	r0, r0, r2
   11d44:	4199      	sbcs	r1, r3
   11d46:	22fa      	movs	r2, #250	; 0xfa
   11d48:	2300      	movs	r3, #0
   11d4a:	0092      	lsls	r2, r2, #2
   11d4c:	4d15      	ldr	r5, [pc, #84]	; (11da4 <LORAWAN_GetAttr+0x3e8>)
   11d4e:	47a8      	blx	r5
   11d50:	238b      	movs	r3, #139	; 0x8b
   11d52:	009b      	lsls	r3, r3, #2
   11d54:	5ce4      	ldrb	r4, [r4, r3]
   11d56:	2300      	movs	r3, #0
   11d58:	00a2      	lsls	r2, r4, #2
   11d5a:	9c02      	ldr	r4, [sp, #8]
   11d5c:	9d03      	ldr	r5, [sp, #12]
   11d5e:	1912      	adds	r2, r2, r4
   11d60:	416b      	adcs	r3, r5
   11d62:	1812      	adds	r2, r2, r0
   11d64:	414b      	adcs	r3, r1
   11d66:	6032      	str	r2, [r6, #0]
   11d68:	6073      	str	r3, [r6, #4]
   11d6a:	e67b      	b.n	11a64 <LORAWAN_GetAttr+0xa8>
   11d6c:	20002b5c 	.word	0x20002b5c
   11d70:	00019da5 	.word	0x00019da5
   11d74:	00014b79 	.word	0x00014b79
   11d78:	0000d91d 	.word	0x0000d91d
   11d7c:	0001199d 	.word	0x0001199d
   11d80:	00016641 	.word	0x00016641
   11d84:	0000db8d 	.word	0x0000db8d
   11d88:	20002c3b 	.word	0x20002c3b
   11d8c:	0000fde5 	.word	0x0000fde5
   11d90:	0000fe8d 	.word	0x0000fe8d
   11d94:	00000225 	.word	0x00000225
   11d98:	0000f419 	.word	0x0000f419
   11d9c:	0000edd1 	.word	0x0000edd1
   11da0:	00016a5d 	.word	0x00016a5d
   11da4:	00016a1d 	.word	0x00016a1d
   11da8:	88ca      	ldrh	r2, [r1, #6]
   11daa:	780b      	ldrb	r3, [r1, #0]
   11dac:	9206      	str	r2, [sp, #24]
   11dae:	784a      	ldrb	r2, [r1, #1]
   11db0:	af0e      	add	r7, sp, #56	; 0x38
   11db2:	9209      	str	r2, [sp, #36]	; 0x24
   11db4:	788a      	ldrb	r2, [r1, #2]
   11db6:	2025      	movs	r0, #37	; 0x25
   11db8:	920a      	str	r2, [sp, #40]	; 0x28
   11dba:	78ca      	ldrb	r2, [r1, #3]
   11dbc:	920b      	str	r2, [sp, #44]	; 0x2c
   11dbe:	790a      	ldrb	r2, [r1, #4]
   11dc0:	9208      	str	r2, [sp, #32]
   11dc2:	aa0c      	add	r2, sp, #48	; 0x30
   11dc4:	1d94      	adds	r4, r2, #6
   11dc6:	7193      	strb	r3, [r2, #6]
   11dc8:	0021      	movs	r1, r4
   11dca:	003a      	movs	r2, r7
   11dcc:	4b5b      	ldr	r3, [pc, #364]	; (11f3c <LORAWAN_GetAttr+0x580>)
   11dce:	4798      	blx	r3
   11dd0:	ab0c      	add	r3, sp, #48	; 0x30
   11dd2:	1ddd      	adds	r5, r3, #7
   11dd4:	002a      	movs	r2, r5
   11dd6:	0021      	movs	r1, r4
   11dd8:	2023      	movs	r0, #35	; 0x23
   11dda:	4b58      	ldr	r3, [pc, #352]	; (11f3c <LORAWAN_GetAttr+0x580>)
   11ddc:	4798      	blx	r3
   11dde:	782d      	ldrb	r5, [r5, #0]
   11de0:	2d01      	cmp	r5, #1
   11de2:	d000      	beq.n	11de6 <LORAWAN_GetAttr+0x42a>
   11de4:	e0a1      	b.n	11f2a <LORAWAN_GetAttr+0x56e>
   11de6:	ac10      	add	r4, sp, #64	; 0x40
   11de8:	4b55      	ldr	r3, [pc, #340]	; (11f40 <LORAWAN_GetAttr+0x584>)
   11dea:	0021      	movs	r1, r4
   11dec:	2007      	movs	r0, #7
   11dee:	4798      	blx	r3
   11df0:	783b      	ldrb	r3, [r7, #0]
   11df2:	2b0c      	cmp	r3, #12
   11df4:	d000      	beq.n	11df8 <LORAWAN_GetAttr+0x43c>
   11df6:	e08a      	b.n	11f0e <LORAWAN_GetAttr+0x552>
   11df8:	2700      	movs	r7, #0
   11dfa:	7823      	ldrb	r3, [r4, #0]
   11dfc:	3b07      	subs	r3, #7
   11dfe:	b2db      	uxtb	r3, r3
   11e00:	429d      	cmp	r5, r3
   11e02:	417f      	adcs	r7, r7
   11e04:	b2fb      	uxtb	r3, r7
   11e06:	9302      	str	r3, [sp, #8]
   11e08:	ac10      	add	r4, sp, #64	; 0x40
   11e0a:	ab0c      	add	r3, sp, #48	; 0x30
   11e0c:	1d99      	adds	r1, r3, #6
   11e0e:	0022      	movs	r2, r4
   11e10:	4b4a      	ldr	r3, [pc, #296]	; (11f3c <LORAWAN_GetAttr+0x580>)
   11e12:	2024      	movs	r0, #36	; 0x24
   11e14:	4798      	blx	r3
   11e16:	7823      	ldrb	r3, [r4, #0]
   11e18:	3b07      	subs	r3, #7
   11e1a:	b2db      	uxtb	r3, r3
   11e1c:	2b02      	cmp	r3, #2
   11e1e:	d900      	bls.n	11e22 <LORAWAN_GetAttr+0x466>
   11e20:	e080      	b.n	11f24 <LORAWAN_GetAttr+0x568>
   11e22:	4a48      	ldr	r2, [pc, #288]	; (11f44 <LORAWAN_GetAttr+0x588>)
   11e24:	00db      	lsls	r3, r3, #3
   11e26:	18d3      	adds	r3, r2, r3
   11e28:	681c      	ldr	r4, [r3, #0]
   11e2a:	685d      	ldr	r5, [r3, #4]
   11e2c:	2001      	movs	r0, #1
   11e2e:	ab0e      	add	r3, sp, #56	; 0x38
   11e30:	781b      	ldrb	r3, [r3, #0]
   11e32:	4f45      	ldr	r7, [pc, #276]	; (11f48 <LORAWAN_GetAttr+0x58c>)
   11e34:	9300      	str	r3, [sp, #0]
   11e36:	4098      	lsls	r0, r3
   11e38:	47b8      	blx	r7
   11e3a:	0002      	movs	r2, r0
   11e3c:	000b      	movs	r3, r1
   11e3e:	0020      	movs	r0, r4
   11e40:	0029      	movs	r1, r5
   11e42:	4c42      	ldr	r4, [pc, #264]	; (11f4c <LORAWAN_GetAttr+0x590>)
   11e44:	47a0      	blx	r4
   11e46:	0002      	movs	r2, r0
   11e48:	000b      	movs	r3, r1
   11e4a:	2000      	movs	r0, #0
   11e4c:	4940      	ldr	r1, [pc, #256]	; (11f50 <LORAWAN_GetAttr+0x594>)
   11e4e:	47a0      	blx	r4
   11e50:	466b      	mov	r3, sp
   11e52:	9004      	str	r0, [sp, #16]
   11e54:	9105      	str	r1, [sp, #20]
   11e56:	7e18      	ldrb	r0, [r3, #24]
   11e58:	47b8      	blx	r7
   11e5a:	4c3e      	ldr	r4, [pc, #248]	; (11f54 <LORAWAN_GetAttr+0x598>)
   11e5c:	2200      	movs	r2, #0
   11e5e:	4b3e      	ldr	r3, [pc, #248]	; (11f58 <LORAWAN_GetAttr+0x59c>)
   11e60:	47a0      	blx	r4
   11e62:	9a04      	ldr	r2, [sp, #16]
   11e64:	9b05      	ldr	r3, [sp, #20]
   11e66:	4c3d      	ldr	r4, [pc, #244]	; (11f5c <LORAWAN_GetAttr+0x5a0>)
   11e68:	47a0      	blx	r4
   11e6a:	9b08      	ldr	r3, [sp, #32]
   11e6c:	9006      	str	r0, [sp, #24]
   11e6e:	9107      	str	r1, [sp, #28]
   11e70:	0058      	lsls	r0, r3, #1
   11e72:	9b00      	ldr	r3, [sp, #0]
   11e74:	2214      	movs	r2, #20
   11e76:	1ac0      	subs	r0, r0, r3
   11e78:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   11e7a:	3007      	adds	r0, #7
   11e7c:	009b      	lsls	r3, r3, #2
   11e7e:	18c0      	adds	r0, r0, r3
   11e80:	9b09      	ldr	r3, [sp, #36]	; 0x24
   11e82:	0080      	lsls	r0, r0, #2
   11e84:	1e59      	subs	r1, r3, #1
   11e86:	418b      	sbcs	r3, r1
   11e88:	425b      	negs	r3, r3
   11e8a:	401a      	ands	r2, r3
   11e8c:	1a80      	subs	r0, r0, r2
   11e8e:	47b8      	blx	r7
   11e90:	0004      	movs	r4, r0
   11e92:	9802      	ldr	r0, [sp, #8]
   11e94:	000d      	movs	r5, r1
   11e96:	1e43      	subs	r3, r0, #1
   11e98:	4198      	sbcs	r0, r3
   11e9a:	9b00      	ldr	r3, [sp, #0]
   11e9c:	0040      	lsls	r0, r0, #1
   11e9e:	1a18      	subs	r0, r3, r0
   11ea0:	0080      	lsls	r0, r0, #2
   11ea2:	47b8      	blx	r7
   11ea4:	0002      	movs	r2, r0
   11ea6:	000b      	movs	r3, r1
   11ea8:	0020      	movs	r0, r4
   11eaa:	0029      	movs	r1, r5
   11eac:	4c27      	ldr	r4, [pc, #156]	; (11f4c <LORAWAN_GetAttr+0x590>)
   11eae:	47a0      	blx	r4
   11eb0:	4b2b      	ldr	r3, [pc, #172]	; (11f60 <LORAWAN_GetAttr+0x5a4>)
   11eb2:	0004      	movs	r4, r0
   11eb4:	000d      	movs	r5, r1
   11eb6:	4798      	blx	r3
   11eb8:	4b2a      	ldr	r3, [pc, #168]	; (11f64 <LORAWAN_GetAttr+0x5a8>)
   11eba:	0007      	movs	r7, r0
   11ebc:	4798      	blx	r3
   11ebe:	0002      	movs	r2, r0
   11ec0:	000b      	movs	r3, r1
   11ec2:	0020      	movs	r0, r4
   11ec4:	0029      	movs	r1, r5
   11ec6:	4c28      	ldr	r4, [pc, #160]	; (11f68 <LORAWAN_GetAttr+0x5ac>)
   11ec8:	47a0      	blx	r4
   11eca:	2200      	movs	r2, #0
   11ecc:	2300      	movs	r3, #0
   11ece:	4c27      	ldr	r4, [pc, #156]	; (11f6c <LORAWAN_GetAttr+0x5b0>)
   11ed0:	47a0      	blx	r4
   11ed2:	1e43      	subs	r3, r0, #1
   11ed4:	4198      	sbcs	r0, r3
   11ed6:	183f      	adds	r7, r7, r0
   11ed8:	003b      	movs	r3, r7
   11eda:	980b      	ldr	r0, [sp, #44]	; 0x2c
   11edc:	3004      	adds	r0, #4
   11ede:	4343      	muls	r3, r0
   11ee0:	3308      	adds	r3, #8
   11ee2:	0018      	movs	r0, r3
   11ee4:	4b1f      	ldr	r3, [pc, #124]	; (11f64 <LORAWAN_GetAttr+0x5a8>)
   11ee6:	4798      	blx	r3
   11ee8:	9a04      	ldr	r2, [sp, #16]
   11eea:	9b05      	ldr	r3, [sp, #20]
   11eec:	4c1b      	ldr	r4, [pc, #108]	; (11f5c <LORAWAN_GetAttr+0x5a0>)
   11eee:	47a0      	blx	r4
   11ef0:	9a06      	ldr	r2, [sp, #24]
   11ef2:	9b07      	ldr	r3, [sp, #28]
   11ef4:	4c17      	ldr	r4, [pc, #92]	; (11f54 <LORAWAN_GetAttr+0x598>)
   11ef6:	47a0      	blx	r4
   11ef8:	2200      	movs	r2, #0
   11efa:	4b1d      	ldr	r3, [pc, #116]	; (11f70 <LORAWAN_GetAttr+0x5b4>)
   11efc:	4c17      	ldr	r4, [pc, #92]	; (11f5c <LORAWAN_GetAttr+0x5a0>)
   11efe:	47a0      	blx	r4
   11f00:	2200      	movs	r2, #0
   11f02:	4b1b      	ldr	r3, [pc, #108]	; (11f70 <LORAWAN_GetAttr+0x5b4>)
   11f04:	47a0      	blx	r4
   11f06:	4b16      	ldr	r3, [pc, #88]	; (11f60 <LORAWAN_GetAttr+0x5a4>)
   11f08:	4798      	blx	r3
   11f0a:	6030      	str	r0, [r6, #0]
   11f0c:	e5aa      	b.n	11a64 <LORAWAN_GetAttr+0xa8>
   11f0e:	2200      	movs	r2, #0
   11f10:	9202      	str	r2, [sp, #8]
   11f12:	2b0b      	cmp	r3, #11
   11f14:	d000      	beq.n	11f18 <LORAWAN_GetAttr+0x55c>
   11f16:	e777      	b.n	11e08 <LORAWAN_GetAttr+0x44c>
   11f18:	7827      	ldrb	r7, [r4, #0]
   11f1a:	3f07      	subs	r7, #7
   11f1c:	427a      	negs	r2, r7
   11f1e:	417a      	adcs	r2, r7
   11f20:	b2d3      	uxtb	r3, r2
   11f22:	e770      	b.n	11e06 <LORAWAN_GetAttr+0x44a>
   11f24:	2400      	movs	r4, #0
   11f26:	2500      	movs	r5, #0
   11f28:	e780      	b.n	11e2c <LORAWAN_GetAttr+0x470>
   11f2a:	20a0      	movs	r0, #160	; 0xa0
   11f2c:	9b08      	ldr	r3, [sp, #32]
   11f2e:	4358      	muls	r0, r3
   11f30:	23c8      	movs	r3, #200	; 0xc8
   11f32:	009b      	lsls	r3, r3, #2
   11f34:	18c0      	adds	r0, r0, r3
   11f36:	4b0b      	ldr	r3, [pc, #44]	; (11f64 <LORAWAN_GetAttr+0x5a8>)
   11f38:	4798      	blx	r3
   11f3a:	e7e4      	b.n	11f06 <LORAWAN_GetAttr+0x54a>
   11f3c:	0000d91d 	.word	0x0000d91d
   11f40:	00014b79 	.word	0x00014b79
   11f44:	000202a8 	.word	0x000202a8
   11f48:	000194e1 	.word	0x000194e1
   11f4c:	000180e5 	.word	0x000180e5
   11f50:	3ff00000 	.word	0x3ff00000
   11f54:	00017ac5 	.word	0x00017ac5
   11f58:	40110000 	.word	0x40110000
   11f5c:	0001894d 	.word	0x0001894d
   11f60:	00016ae1 	.word	0x00016ae1
   11f64:	00019565 	.word	0x00019565
   11f68:	00018e4d 	.word	0x00018e4d
   11f6c:	00016981 	.word	0x00016981
   11f70:	408f4000 	.word	0x408f4000

00011f74 <LORAWAN_TxDone>:
   11f74:	b5f0      	push	{r4, r5, r6, r7, lr}
   11f76:	6843      	ldr	r3, [r0, #4]
   11f78:	b091      	sub	sp, #68	; 0x44
   11f7a:	ad08      	add	r5, sp, #32
   11f7c:	7804      	ldrb	r4, [r0, #0]
   11f7e:	9302      	str	r3, [sp, #8]
   11f80:	2100      	movs	r1, #0
   11f82:	4b83      	ldr	r3, [pc, #524]	; (12190 <LORAWAN_TxDone+0x21c>)
   11f84:	002a      	movs	r2, r5
   11f86:	2027      	movs	r0, #39	; 0x27
   11f88:	4798      	blx	r3
   11f8a:	4f82      	ldr	r7, [pc, #520]	; (12194 <LORAWAN_TxDone+0x220>)
   11f8c:	0039      	movs	r1, r7
   11f8e:	317c      	adds	r1, #124	; 0x7c
   11f90:	780b      	ldrb	r3, [r1, #0]
   11f92:	2b7f      	cmp	r3, #127	; 0x7f
   11f94:	d900      	bls.n	11f98 <LORAWAN_TxDone+0x24>
   11f96:	e259      	b.n	1244c <LORAWAN_TxDone+0x4d8>
   11f98:	4a7f      	ldr	r2, [pc, #508]	; (12198 <LORAWAN_TxDone+0x224>)
   11f9a:	7810      	ldrb	r0, [r2, #0]
   11f9c:	2804      	cmp	r0, #4
   11f9e:	d10b      	bne.n	11fb8 <LORAWAN_TxDone+0x44>
   11fa0:	220e      	movs	r2, #14
   11fa2:	4393      	bics	r3, r2
   11fa4:	700b      	strb	r3, [r1, #0]
   11fa6:	3017      	adds	r0, #23
   11fa8:	07db      	lsls	r3, r3, #31
   11faa:	d500      	bpl.n	11fae <LORAWAN_TxDone+0x3a>
   11fac:	e0b0      	b.n	12110 <LORAWAN_TxDone+0x19c>
   11fae:	201b      	movs	r0, #27
   11fb0:	4b7a      	ldr	r3, [pc, #488]	; (1219c <LORAWAN_TxDone+0x228>)
   11fb2:	4798      	blx	r3
   11fb4:	b011      	add	sp, #68	; 0x44
   11fb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11fb8:	7813      	ldrb	r3, [r2, #0]
   11fba:	2b02      	cmp	r3, #2
   11fbc:	d1fa      	bne.n	11fb4 <LORAWAN_TxDone+0x40>
   11fbe:	4b78      	ldr	r3, [pc, #480]	; (121a0 <LORAWAN_TxDone+0x22c>)
   11fc0:	5cfa      	ldrb	r2, [r7, r3]
   11fc2:	2a00      	cmp	r2, #0
   11fc4:	d005      	beq.n	11fd2 <LORAWAN_TxDone+0x5e>
   11fc6:	2200      	movs	r2, #0
   11fc8:	4976      	ldr	r1, [pc, #472]	; (121a4 <LORAWAN_TxDone+0x230>)
   11fca:	54fa      	strb	r2, [r7, r3]
   11fcc:	200b      	movs	r0, #11
   11fce:	4b76      	ldr	r3, [pc, #472]	; (121a8 <LORAWAN_TxDone+0x234>)
   11fd0:	4798      	blx	r3
   11fd2:	2c07      	cmp	r4, #7
   11fd4:	d000      	beq.n	11fd8 <LORAWAN_TxDone+0x64>
   11fd6:	e09f      	b.n	12118 <LORAWAN_TxDone+0x1a4>
   11fd8:	79eb      	ldrb	r3, [r5, #7]
   11fda:	2b00      	cmp	r3, #0
   11fdc:	d0ea      	beq.n	11fb4 <LORAWAN_TxDone+0x40>
   11fde:	003b      	movs	r3, r7
   11fe0:	338c      	adds	r3, #140	; 0x8c
   11fe2:	7818      	ldrb	r0, [r3, #0]
   11fe4:	003e      	movs	r6, r7
   11fe6:	2304      	movs	r3, #4
   11fe8:	36fe      	adds	r6, #254	; 0xfe
   11fea:	4018      	ands	r0, r3
   11fec:	4d6f      	ldr	r5, [pc, #444]	; (121ac <LORAWAN_TxDone+0x238>)
   11fee:	d005      	beq.n	11ffc <LORAWAN_TxDone+0x88>
   11ff0:	2000      	movs	r0, #0
   11ff2:	2109      	movs	r1, #9
   11ff4:	82b0      	strh	r0, [r6, #20]
   11ff6:	47a8      	blx	r5
   11ff8:	0020      	movs	r0, r4
   11ffa:	e7d9      	b.n	11fb0 <LORAWAN_TxDone+0x3c>
   11ffc:	8ab3      	ldrh	r3, [r6, #20]
   11ffe:	2109      	movs	r1, #9
   12000:	3301      	adds	r3, #1
   12002:	82b3      	strh	r3, [r6, #20]
   12004:	47a8      	blx	r5
   12006:	8af3      	ldrh	r3, [r6, #22]
   12008:	4a69      	ldr	r2, [pc, #420]	; (121b0 <LORAWAN_TxDone+0x23c>)
   1200a:	4293      	cmp	r3, r2
   1200c:	d002      	beq.n	12014 <LORAWAN_TxDone+0xa0>
   1200e:	8ab2      	ldrh	r2, [r6, #20]
   12010:	429a      	cmp	r2, r3
   12012:	d265      	bcs.n	120e0 <LORAWAN_TxDone+0x16c>
   12014:	4b67      	ldr	r3, [pc, #412]	; (121b4 <LORAWAN_TxDone+0x240>)
   12016:	5cfb      	ldrb	r3, [r7, r3]
   12018:	2b00      	cmp	r3, #0
   1201a:	d061      	beq.n	120e0 <LORAWAN_TxDone+0x16c>
   1201c:	2601      	movs	r6, #1
   1201e:	003b      	movs	r3, r7
   12020:	a906      	add	r1, sp, #24
   12022:	700e      	strb	r6, [r1, #0]
   12024:	33e1      	adds	r3, #225	; 0xe1
   12026:	781b      	ldrb	r3, [r3, #0]
   12028:	aa0c      	add	r2, sp, #48	; 0x30
   1202a:	704b      	strb	r3, [r1, #1]
   1202c:	003b      	movs	r3, r7
   1202e:	33df      	adds	r3, #223	; 0xdf
   12030:	781b      	ldrb	r3, [r3, #0]
   12032:	202f      	movs	r0, #47	; 0x2f
   12034:	708b      	strb	r3, [r1, #2]
   12036:	4b60      	ldr	r3, [pc, #384]	; (121b8 <LORAWAN_TxDone+0x244>)
   12038:	4798      	blx	r3
   1203a:	2808      	cmp	r0, #8
   1203c:	d135      	bne.n	120aa <LORAWAN_TxDone+0x136>
   1203e:	a807      	add	r0, sp, #28
   12040:	4b5e      	ldr	r3, [pc, #376]	; (121bc <LORAWAN_TxDone+0x248>)
   12042:	7006      	strb	r6, [r0, #0]
   12044:	4798      	blx	r3
   12046:	980c      	ldr	r0, [sp, #48]	; 0x30
   12048:	990d      	ldr	r1, [sp, #52]	; 0x34
   1204a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   1204c:	4b5c      	ldr	r3, [pc, #368]	; (121c0 <LORAWAN_TxDone+0x24c>)
   1204e:	4798      	blx	r3
   12050:	003b      	movs	r3, r7
   12052:	33c6      	adds	r3, #198	; 0xc6
   12054:	881b      	ldrh	r3, [r3, #0]
   12056:	a80a      	add	r0, sp, #40	; 0x28
   12058:	7003      	strb	r3, [r0, #0]
   1205a:	4b5a      	ldr	r3, [pc, #360]	; (121c4 <LORAWAN_TxDone+0x250>)
   1205c:	6043      	str	r3, [r0, #4]
   1205e:	4b5a      	ldr	r3, [pc, #360]	; (121c8 <LORAWAN_TxDone+0x254>)
   12060:	4798      	blx	r3
   12062:	1e04      	subs	r4, r0, #0
   12064:	d108      	bne.n	12078 <LORAWAN_TxDone+0x104>
   12066:	220e      	movs	r2, #14
   12068:	377c      	adds	r7, #124	; 0x7c
   1206a:	783b      	ldrb	r3, [r7, #0]
   1206c:	4393      	bics	r3, r2
   1206e:	001a      	movs	r2, r3
   12070:	2302      	movs	r3, #2
   12072:	4313      	orrs	r3, r2
   12074:	703b      	strb	r3, [r7, #0]
   12076:	e79d      	b.n	11fb4 <LORAWAN_TxDone+0x40>
   12078:	003b      	movs	r3, r7
   1207a:	338c      	adds	r3, #140	; 0x8c
   1207c:	7818      	ldrb	r0, [r3, #0]
   1207e:	003b      	movs	r3, r7
   12080:	4030      	ands	r0, r6
   12082:	33fe      	adds	r3, #254	; 0xfe
   12084:	4e51      	ldr	r6, [pc, #324]	; (121cc <LORAWAN_TxDone+0x258>)
   12086:	4f52      	ldr	r7, [pc, #328]	; (121d0 <LORAWAN_TxDone+0x25c>)
   12088:	2800      	cmp	r0, #0
   1208a:	d009      	beq.n	120a0 <LORAWAN_TxDone+0x12c>
   1208c:	2000      	movs	r0, #0
   1208e:	2109      	movs	r1, #9
   12090:	8298      	strh	r0, [r3, #20]
   12092:	47a8      	blx	r5
   12094:	4b4f      	ldr	r3, [pc, #316]	; (121d4 <LORAWAN_TxDone+0x260>)
   12096:	4798      	blx	r3
   12098:	47b8      	blx	r7
   1209a:	0020      	movs	r0, r4
   1209c:	47b0      	blx	r6
   1209e:	e789      	b.n	11fb4 <LORAWAN_TxDone+0x40>
   120a0:	2109      	movs	r1, #9
   120a2:	8298      	strh	r0, [r3, #20]
   120a4:	47a8      	blx	r5
   120a6:	4b4c      	ldr	r3, [pc, #304]	; (121d8 <LORAWAN_TxDone+0x264>)
   120a8:	e7f5      	b.n	12096 <LORAWAN_TxDone+0x122>
   120aa:	003b      	movs	r3, r7
   120ac:	338c      	adds	r3, #140	; 0x8c
   120ae:	7818      	ldrb	r0, [r3, #0]
   120b0:	003b      	movs	r3, r7
   120b2:	4006      	ands	r6, r0
   120b4:	4c45      	ldr	r4, [pc, #276]	; (121cc <LORAWAN_TxDone+0x258>)
   120b6:	33fe      	adds	r3, #254	; 0xfe
   120b8:	4f45      	ldr	r7, [pc, #276]	; (121d0 <LORAWAN_TxDone+0x25c>)
   120ba:	2e00      	cmp	r6, #0
   120bc:	d00a      	beq.n	120d4 <LORAWAN_TxDone+0x160>
   120be:	2600      	movs	r6, #0
   120c0:	2109      	movs	r1, #9
   120c2:	0030      	movs	r0, r6
   120c4:	829e      	strh	r6, [r3, #20]
   120c6:	47a8      	blx	r5
   120c8:	4b42      	ldr	r3, [pc, #264]	; (121d4 <LORAWAN_TxDone+0x260>)
   120ca:	4798      	blx	r3
   120cc:	47b8      	blx	r7
   120ce:	0030      	movs	r0, r6
   120d0:	47a0      	blx	r4
   120d2:	e76f      	b.n	11fb4 <LORAWAN_TxDone+0x40>
   120d4:	2109      	movs	r1, #9
   120d6:	0030      	movs	r0, r6
   120d8:	829e      	strh	r6, [r3, #20]
   120da:	47a8      	blx	r5
   120dc:	4b3e      	ldr	r3, [pc, #248]	; (121d8 <LORAWAN_TxDone+0x264>)
   120de:	e7f4      	b.n	120ca <LORAWAN_TxDone+0x156>
   120e0:	003b      	movs	r3, r7
   120e2:	2000      	movs	r0, #0
   120e4:	33fe      	adds	r3, #254	; 0xfe
   120e6:	2109      	movs	r1, #9
   120e8:	8298      	strh	r0, [r3, #20]
   120ea:	47a8      	blx	r5
   120ec:	003a      	movs	r2, r7
   120ee:	210e      	movs	r1, #14
   120f0:	327c      	adds	r2, #124	; 0x7c
   120f2:	7813      	ldrb	r3, [r2, #0]
   120f4:	378c      	adds	r7, #140	; 0x8c
   120f6:	438b      	bics	r3, r1
   120f8:	7013      	strb	r3, [r2, #0]
   120fa:	2220      	movs	r2, #32
   120fc:	783b      	ldrb	r3, [r7, #0]
   120fe:	4c34      	ldr	r4, [pc, #208]	; (121d0 <LORAWAN_TxDone+0x25c>)
   12100:	4393      	bics	r3, r2
   12102:	703b      	strb	r3, [r7, #0]
   12104:	07db      	lsls	r3, r3, #31
   12106:	d505      	bpl.n	12114 <LORAWAN_TxDone+0x1a0>
   12108:	4b32      	ldr	r3, [pc, #200]	; (121d4 <LORAWAN_TxDone+0x260>)
   1210a:	4798      	blx	r3
   1210c:	47a0      	blx	r4
   1210e:	2007      	movs	r0, #7
   12110:	4b2e      	ldr	r3, [pc, #184]	; (121cc <LORAWAN_TxDone+0x258>)
   12112:	e74e      	b.n	11fb2 <LORAWAN_TxDone+0x3e>
   12114:	4b30      	ldr	r3, [pc, #192]	; (121d8 <LORAWAN_TxDone+0x264>)
   12116:	e7f8      	b.n	1210a <LORAWAN_TxDone+0x196>
   12118:	2c00      	cmp	r4, #0
   1211a:	d000      	beq.n	1211e <LORAWAN_TxDone+0x1aa>
   1211c:	e74a      	b.n	11fb4 <LORAWAN_TxDone+0x40>
   1211e:	003b      	movs	r3, r7
   12120:	33fc      	adds	r3, #252	; 0xfc
   12122:	681d      	ldr	r5, [r3, #0]
   12124:	003b      	movs	r3, r7
   12126:	33fe      	adds	r3, #254	; 0xfe
   12128:	829c      	strh	r4, [r3, #20]
   1212a:	0020      	movs	r0, r4
   1212c:	2109      	movs	r1, #9
   1212e:	4c1f      	ldr	r4, [pc, #124]	; (121ac <LORAWAN_TxDone+0x238>)
   12130:	47a0      	blx	r4
   12132:	003b      	movs	r3, r7
   12134:	003e      	movs	r6, r7
   12136:	33db      	adds	r3, #219	; 0xdb
   12138:	781b      	ldrb	r3, [r3, #0]
   1213a:	367c      	adds	r6, #124	; 0x7c
   1213c:	2b00      	cmp	r3, #0
   1213e:	d14d      	bne.n	121dc <LORAWAN_TxDone+0x268>
   12140:	003a      	movs	r2, r7
   12142:	32dc      	adds	r2, #220	; 0xdc
   12144:	7812      	ldrb	r2, [r2, #0]
   12146:	2a00      	cmp	r2, #0
   12148:	d148      	bne.n	121dc <LORAWAN_TxDone+0x268>
   1214a:	7832      	ldrb	r2, [r6, #0]
   1214c:	3301      	adds	r3, #1
   1214e:	421a      	tst	r2, r3
   12150:	d053      	beq.n	121fa <LORAWAN_TxDone+0x286>
   12152:	1d39      	adds	r1, r7, #4
   12154:	6fca      	ldr	r2, [r1, #124]	; 0x7c
   12156:	18d2      	adds	r2, r2, r3
   12158:	67ca      	str	r2, [r1, #124]	; 0x7c
   1215a:	2188      	movs	r1, #136	; 0x88
   1215c:	0089      	lsls	r1, r1, #2
   1215e:	5c79      	ldrb	r1, [r7, r1]
   12160:	2900      	cmp	r1, #0
   12162:	d003      	beq.n	1216c <LORAWAN_TxDone+0x1f8>
   12164:	408b      	lsls	r3, r1
   12166:	3b01      	subs	r3, #1
   12168:	421a      	tst	r2, r3
   1216a:	d102      	bne.n	12172 <LORAWAN_TxDone+0x1fe>
   1216c:	2116      	movs	r1, #22
   1216e:	2000      	movs	r0, #0
   12170:	47a0      	blx	r4
   12172:	782b      	ldrb	r3, [r5, #0]
   12174:	003a      	movs	r2, r7
   12176:	2b01      	cmp	r3, #1
   12178:	d106      	bne.n	12188 <LORAWAN_TxDone+0x214>
   1217a:	328c      	adds	r2, #140	; 0x8c
   1217c:	7811      	ldrb	r1, [r2, #0]
   1217e:	430b      	orrs	r3, r1
   12180:	7013      	strb	r3, [r2, #0]
   12182:	003a      	movs	r2, r7
   12184:	32dc      	adds	r2, #220	; 0xdc
   12186:	e000      	b.n	1218a <LORAWAN_TxDone+0x216>
   12188:	32db      	adds	r2, #219	; 0xdb
   1218a:	7813      	ldrb	r3, [r2, #0]
   1218c:	3301      	adds	r3, #1
   1218e:	e033      	b.n	121f8 <LORAWAN_TxDone+0x284>
   12190:	000119bd 	.word	0x000119bd
   12194:	20002b5c 	.word	0x20002b5c
   12198:	20002d90 	.word	0x20002d90
   1219c:	000109a1 	.word	0x000109a1
   121a0:	00000216 	.word	0x00000216
   121a4:	20002d71 	.word	0x20002d71
   121a8:	00014c69 	.word	0x00014c69
   121ac:	0000e0f9 	.word	0x0000e0f9
   121b0:	0000ffff 	.word	0x0000ffff
   121b4:	0000021e 	.word	0x0000021e
   121b8:	0000d91d 	.word	0x0000d91d
   121bc:	00015e6d 	.word	0x00015e6d
   121c0:	00010f31 	.word	0x00010f31
   121c4:	20002da1 	.word	0x20002da1
   121c8:	00015599 	.word	0x00015599
   121cc:	000114a9 	.word	0x000114a9
   121d0:	0000fda1 	.word	0x0000fda1
   121d4:	0001094d 	.word	0x0001094d
   121d8:	0001097d 	.word	0x0001097d
   121dc:	003a      	movs	r2, r7
   121de:	327c      	adds	r2, #124	; 0x7c
   121e0:	7811      	ldrb	r1, [r2, #0]
   121e2:	2201      	movs	r2, #1
   121e4:	4211      	tst	r1, r2
   121e6:	d008      	beq.n	121fa <LORAWAN_TxDone+0x286>
   121e8:	0039      	movs	r1, r7
   121ea:	318c      	adds	r1, #140	; 0x8c
   121ec:	7809      	ldrb	r1, [r1, #0]
   121ee:	4211      	tst	r1, r2
   121f0:	d1c7      	bne.n	12182 <LORAWAN_TxDone+0x20e>
   121f2:	189b      	adds	r3, r3, r2
   121f4:	003a      	movs	r2, r7
   121f6:	32db      	adds	r2, #219	; 0xdb
   121f8:	7013      	strb	r3, [r2, #0]
   121fa:	003b      	movs	r3, r7
   121fc:	2200      	movs	r2, #0
   121fe:	33f0      	adds	r3, #240	; 0xf0
   12200:	701a      	strb	r2, [r3, #0]
   12202:	003a      	movs	r2, r7
   12204:	210e      	movs	r1, #14
   12206:	2504      	movs	r5, #4
   12208:	327c      	adds	r2, #124	; 0x7c
   1220a:	7813      	ldrb	r3, [r2, #0]
   1220c:	003e      	movs	r6, r7
   1220e:	438b      	bics	r3, r1
   12210:	432b      	orrs	r3, r5
   12212:	7013      	strb	r3, [r2, #0]
   12214:	003b      	movs	r3, r7
   12216:	33df      	adds	r3, #223	; 0xdf
   12218:	781b      	ldrb	r3, [r3, #0]
   1221a:	a907      	add	r1, sp, #28
   1221c:	708b      	strb	r3, [r1, #2]
   1221e:	003b      	movs	r3, r7
   12220:	33ee      	adds	r3, #238	; 0xee
   12222:	781b      	ldrb	r3, [r3, #0]
   12224:	368c      	adds	r6, #140	; 0x8c
   12226:	704b      	strb	r3, [r1, #1]
   12228:	7833      	ldrb	r3, [r6, #0]
   1222a:	ac0a      	add	r4, sp, #40	; 0x28
   1222c:	075b      	lsls	r3, r3, #29
   1222e:	0fdb      	lsrs	r3, r3, #31
   12230:	700b      	strb	r3, [r1, #0]
   12232:	0022      	movs	r2, r4
   12234:	4b95      	ldr	r3, [pc, #596]	; (1248c <LORAWAN_TxDone+0x518>)
   12236:	2019      	movs	r0, #25
   12238:	4798      	blx	r3
   1223a:	7833      	ldrb	r3, [r6, #0]
   1223c:	422b      	tst	r3, r5
   1223e:	d100      	bne.n	12242 <LORAWAN_TxDone+0x2ce>
   12240:	e0cd      	b.n	123de <LORAWAN_TxDone+0x46a>
   12242:	2300      	movs	r3, #0
   12244:	ae0c      	add	r6, sp, #48	; 0x30
   12246:	7033      	strb	r3, [r6, #0]
   12248:	0032      	movs	r2, r6
   1224a:	2100      	movs	r1, #0
   1224c:	2009      	movs	r0, #9
   1224e:	4b8f      	ldr	r3, [pc, #572]	; (1248c <LORAWAN_TxDone+0x518>)
   12250:	4798      	blx	r3
   12252:	0031      	movs	r1, r6
   12254:	aa06      	add	r2, sp, #24
   12256:	0028      	movs	r0, r5
   12258:	4b8c      	ldr	r3, [pc, #560]	; (1248c <LORAWAN_TxDone+0x518>)
   1225a:	4798      	blx	r3
   1225c:	0039      	movs	r1, r7
   1225e:	7923      	ldrb	r3, [r4, #4]
   12260:	3169      	adds	r1, #105	; 0x69
   12262:	700b      	strb	r3, [r1, #0]
   12264:	003b      	movs	r3, r7
   12266:	260f      	movs	r6, #15
   12268:	7822      	ldrb	r2, [r4, #0]
   1226a:	3365      	adds	r3, #101	; 0x65
   1226c:	701a      	strb	r2, [r3, #0]
   1226e:	7862      	ldrb	r2, [r4, #1]
   12270:	2004      	movs	r0, #4
   12272:	705a      	strb	r2, [r3, #1]
   12274:	78a2      	ldrb	r2, [r4, #2]
   12276:	2500      	movs	r5, #0
   12278:	709a      	strb	r2, [r3, #2]
   1227a:	78e2      	ldrb	r2, [r4, #3]
   1227c:	70da      	strb	r2, [r3, #3]
   1227e:	ab02      	add	r3, sp, #8
   12280:	18f6      	adds	r6, r6, r3
   12282:	0032      	movs	r2, r6
   12284:	4b81      	ldr	r3, [pc, #516]	; (1248c <LORAWAN_TxDone+0x518>)
   12286:	4798      	blx	r3
   12288:	003b      	movs	r3, r7
   1228a:	338c      	adds	r3, #140	; 0x8c
   1228c:	781c      	ldrb	r4, [r3, #0]
   1228e:	2304      	movs	r3, #4
   12290:	401c      	ands	r4, r3
   12292:	2300      	movs	r3, #0
   12294:	003a      	movs	r2, r7
   12296:	56f3      	ldrsb	r3, [r6, r3]
   12298:	42ac      	cmp	r4, r5
   1229a:	d100      	bne.n	1229e <LORAWAN_TxDone+0x32a>
   1229c:	e0a2      	b.n	123e4 <LORAWAN_TxDone+0x470>
   1229e:	2100      	movs	r1, #0
   122a0:	32ce      	adds	r2, #206	; 0xce
   122a2:	8816      	ldrh	r6, [r2, #0]
   122a4:	aa06      	add	r2, sp, #24
   122a6:	5651      	ldrsb	r1, [r2, r1]
   122a8:	4c79      	ldr	r4, [pc, #484]	; (12490 <LORAWAN_TxDone+0x51c>)
   122aa:	1872      	adds	r2, r6, r1
   122ac:	9203      	str	r2, [sp, #12]
   122ae:	003a      	movs	r2, r7
   122b0:	32cc      	adds	r2, #204	; 0xcc
   122b2:	8811      	ldrh	r1, [r2, #0]
   122b4:	26fa      	movs	r6, #250	; 0xfa
   122b6:	18c9      	adds	r1, r1, r3
   122b8:	4b76      	ldr	r3, [pc, #472]	; (12494 <LORAWAN_TxDone+0x520>)
   122ba:	00b6      	lsls	r6, r6, #2
   122bc:	5cfb      	ldrb	r3, [r7, r3]
   122be:	002a      	movs	r2, r5
   122c0:	1ac9      	subs	r1, r1, r3
   122c2:	003b      	movs	r3, r7
   122c4:	33e2      	adds	r3, #226	; 0xe2
   122c6:	7818      	ldrb	r0, [r3, #0]
   122c8:	4371      	muls	r1, r6
   122ca:	4b73      	ldr	r3, [pc, #460]	; (12498 <LORAWAN_TxDone+0x524>)
   122cc:	9500      	str	r5, [sp, #0]
   122ce:	47a0      	blx	r4
   122d0:	4b70      	ldr	r3, [pc, #448]	; (12494 <LORAWAN_TxDone+0x520>)
   122d2:	002a      	movs	r2, r5
   122d4:	5cf9      	ldrb	r1, [r7, r3]
   122d6:	9b03      	ldr	r3, [sp, #12]
   122d8:	1a59      	subs	r1, r3, r1
   122da:	003b      	movs	r3, r7
   122dc:	33e3      	adds	r3, #227	; 0xe3
   122de:	7818      	ldrb	r0, [r3, #0]
   122e0:	4371      	muls	r1, r6
   122e2:	4b6e      	ldr	r3, [pc, #440]	; (1249c <LORAWAN_TxDone+0x528>)
   122e4:	9500      	str	r5, [sp, #0]
   122e6:	47a0      	blx	r4
   122e8:	003b      	movs	r3, r7
   122ea:	33ff      	adds	r3, #255	; 0xff
   122ec:	7c5b      	ldrb	r3, [r3, #17]
   122ee:	069b      	lsls	r3, r3, #26
   122f0:	d549      	bpl.n	12386 <LORAWAN_TxDone+0x412>
   122f2:	466a      	mov	r2, sp
   122f4:	003b      	movs	r3, r7
   122f6:	7a12      	ldrb	r2, [r2, #8]
   122f8:	3377      	adds	r3, #119	; 0x77
   122fa:	701a      	strb	r2, [r3, #0]
   122fc:	9a02      	ldr	r2, [sp, #8]
   122fe:	ad0c      	add	r5, sp, #48	; 0x30
   12300:	0a12      	lsrs	r2, r2, #8
   12302:	705a      	strb	r2, [r3, #1]
   12304:	9a02      	ldr	r2, [sp, #8]
   12306:	0c12      	lsrs	r2, r2, #16
   12308:	709a      	strb	r2, [r3, #2]
   1230a:	9a02      	ldr	r2, [sp, #8]
   1230c:	0e12      	lsrs	r2, r2, #24
   1230e:	70da      	strb	r2, [r3, #3]
   12310:	003b      	movs	r3, r7
   12312:	337b      	adds	r3, #123	; 0x7b
   12314:	781b      	ldrb	r3, [r3, #0]
   12316:	2b00      	cmp	r3, #0
   12318:	d027      	beq.n	1236a <LORAWAN_TxDone+0x3f6>
   1231a:	003c      	movs	r4, r7
   1231c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
   1231e:	346f      	adds	r4, #111	; 0x6f
   12320:	0216      	lsls	r6, r2, #8
   12322:	003a      	movs	r2, r7
   12324:	7823      	ldrb	r3, [r4, #0]
   12326:	3273      	adds	r2, #115	; 0x73
   12328:	4333      	orrs	r3, r6
   1232a:	6f7e      	ldr	r6, [r7, #116]	; 0x74
   1232c:	7812      	ldrb	r2, [r2, #0]
   1232e:	0236      	lsls	r6, r6, #8
   12330:	4316      	orrs	r6, r2
   12332:	431e      	orrs	r6, r3
   12334:	d119      	bne.n	1236a <LORAWAN_TxDone+0x3f6>
   12336:	2301      	movs	r3, #1
   12338:	0029      	movs	r1, r5
   1233a:	702b      	strb	r3, [r5, #0]
   1233c:	2021      	movs	r0, #33	; 0x21
   1233e:	4b58      	ldr	r3, [pc, #352]	; (124a0 <LORAWAN_TxDone+0x52c>)
   12340:	4798      	blx	r3
   12342:	4b58      	ldr	r3, [pc, #352]	; (124a4 <LORAWAN_TxDone+0x530>)
   12344:	4798      	blx	r3
   12346:	0033      	movs	r3, r6
   12348:	9a02      	ldr	r2, [sp, #8]
   1234a:	1a80      	subs	r0, r0, r2
   1234c:	4199      	sbcs	r1, r3
   1234e:	0a03      	lsrs	r3, r0, #8
   12350:	7063      	strb	r3, [r4, #1]
   12352:	0c03      	lsrs	r3, r0, #16
   12354:	70a3      	strb	r3, [r4, #2]
   12356:	0e03      	lsrs	r3, r0, #24
   12358:	70e3      	strb	r3, [r4, #3]
   1235a:	0a0b      	lsrs	r3, r1, #8
   1235c:	7163      	strb	r3, [r4, #5]
   1235e:	0c0b      	lsrs	r3, r1, #16
   12360:	71a3      	strb	r3, [r4, #6]
   12362:	0e0b      	lsrs	r3, r1, #24
   12364:	7020      	strb	r0, [r4, #0]
   12366:	7121      	strb	r1, [r4, #4]
   12368:	71e3      	strb	r3, [r4, #7]
   1236a:	4a4f      	ldr	r2, [pc, #316]	; (124a8 <LORAWAN_TxDone+0x534>)
   1236c:	2020      	movs	r0, #32
   1236e:	0013      	movs	r3, r2
   12370:	3377      	adds	r3, #119	; 0x77
   12372:	7819      	ldrb	r1, [r3, #0]
   12374:	6f93      	ldr	r3, [r2, #120]	; 0x78
   12376:	021b      	lsls	r3, r3, #8
   12378:	430b      	orrs	r3, r1
   1237a:	930c      	str	r3, [sp, #48]	; 0x30
   1237c:	2301      	movs	r3, #1
   1237e:	0029      	movs	r1, r5
   12380:	712b      	strb	r3, [r5, #4]
   12382:	4b47      	ldr	r3, [pc, #284]	; (124a0 <LORAWAN_TxDone+0x52c>)
   12384:	4798      	blx	r3
   12386:	4c48      	ldr	r4, [pc, #288]	; (124a8 <LORAWAN_TxDone+0x534>)
   12388:	2102      	movs	r1, #2
   1238a:	0023      	movs	r3, r4
   1238c:	33ff      	adds	r3, #255	; 0xff
   1238e:	7c5b      	ldrb	r3, [r3, #17]
   12390:	4019      	ands	r1, r3
   12392:	d057      	beq.n	12444 <LORAWAN_TxDone+0x4d0>
   12394:	466b      	mov	r3, sp
   12396:	891b      	ldrh	r3, [r3, #8]
   12398:	a90c      	add	r1, sp, #48	; 0x30
   1239a:	800b      	strh	r3, [r1, #0]
   1239c:	0023      	movs	r3, r4
   1239e:	338c      	adds	r3, #140	; 0x8c
   123a0:	781b      	ldrb	r3, [r3, #0]
   123a2:	201f      	movs	r0, #31
   123a4:	075b      	lsls	r3, r3, #29
   123a6:	0fdb      	lsrs	r3, r3, #31
   123a8:	710b      	strb	r3, [r1, #4]
   123aa:	0023      	movs	r3, r4
   123ac:	3390      	adds	r3, #144	; 0x90
   123ae:	781a      	ldrb	r2, [r3, #0]
   123b0:	2301      	movs	r3, #1
   123b2:	4093      	lsls	r3, r2
   123b4:	804b      	strh	r3, [r1, #2]
   123b6:	4b3a      	ldr	r3, [pc, #232]	; (124a0 <LORAWAN_TxDone+0x52c>)
   123b8:	4798      	blx	r3
   123ba:	2589      	movs	r5, #137	; 0x89
   123bc:	00ad      	lsls	r5, r5, #2
   123be:	5d63      	ldrb	r3, [r4, r5]
   123c0:	2b00      	cmp	r3, #0
   123c2:	d100      	bne.n	123c6 <LORAWAN_TxDone+0x452>
   123c4:	e5f6      	b.n	11fb4 <LORAWAN_TxDone+0x40>
   123c6:	4b37      	ldr	r3, [pc, #220]	; (124a4 <LORAWAN_TxDone+0x530>)
   123c8:	4798      	blx	r3
   123ca:	2300      	movs	r3, #0
   123cc:	900c      	str	r0, [sp, #48]	; 0x30
   123ce:	910d      	str	r1, [sp, #52]	; 0x34
   123d0:	5563      	strb	r3, [r4, r5]
   123d2:	4b36      	ldr	r3, [pc, #216]	; (124ac <LORAWAN_TxDone+0x538>)
   123d4:	a90c      	add	r1, sp, #48	; 0x30
   123d6:	5ce0      	ldrb	r0, [r4, r3]
   123d8:	4b35      	ldr	r3, [pc, #212]	; (124b0 <LORAWAN_TxDone+0x53c>)
   123da:	4798      	blx	r3
   123dc:	e5ea      	b.n	11fb4 <LORAWAN_TxDone+0x40>
   123de:	aa06      	add	r2, sp, #24
   123e0:	4934      	ldr	r1, [pc, #208]	; (124b4 <LORAWAN_TxDone+0x540>)
   123e2:	e738      	b.n	12256 <LORAWAN_TxDone+0x2e2>
   123e4:	32c8      	adds	r2, #200	; 0xc8
   123e6:	8811      	ldrh	r1, [r2, #0]
   123e8:	25fa      	movs	r5, #250	; 0xfa
   123ea:	18c9      	adds	r1, r1, r3
   123ec:	4b29      	ldr	r3, [pc, #164]	; (12494 <LORAWAN_TxDone+0x520>)
   123ee:	00ad      	lsls	r5, r5, #2
   123f0:	5cfb      	ldrb	r3, [r7, r3]
   123f2:	0022      	movs	r2, r4
   123f4:	1ac9      	subs	r1, r1, r3
   123f6:	003b      	movs	r3, r7
   123f8:	33e4      	adds	r3, #228	; 0xe4
   123fa:	7818      	ldrb	r0, [r3, #0]
   123fc:	4369      	muls	r1, r5
   123fe:	4b26      	ldr	r3, [pc, #152]	; (12498 <LORAWAN_TxDone+0x524>)
   12400:	9400      	str	r4, [sp, #0]
   12402:	4e23      	ldr	r6, [pc, #140]	; (12490 <LORAWAN_TxDone+0x51c>)
   12404:	47b0      	blx	r6
   12406:	003b      	movs	r3, r7
   12408:	33f4      	adds	r3, #244	; 0xf4
   1240a:	781b      	ldrb	r3, [r3, #0]
   1240c:	2b04      	cmp	r3, #4
   1240e:	d105      	bne.n	1241c <LORAWAN_TxDone+0x4a8>
   12410:	2000      	movs	r0, #0
   12412:	ab06      	add	r3, sp, #24
   12414:	5618      	ldrsb	r0, [r3, r0]
   12416:	4b28      	ldr	r3, [pc, #160]	; (124b8 <LORAWAN_TxDone+0x544>)
   12418:	4798      	blx	r3
   1241a:	e7b4      	b.n	12386 <LORAWAN_TxDone+0x412>
   1241c:	2b01      	cmp	r3, #1
   1241e:	d1b2      	bne.n	12386 <LORAWAN_TxDone+0x412>
   12420:	003b      	movs	r3, r7
   12422:	33ca      	adds	r3, #202	; 0xca
   12424:	8819      	ldrh	r1, [r3, #0]
   12426:	ab06      	add	r3, sp, #24
   12428:	781b      	ldrb	r3, [r3, #0]
   1242a:	0022      	movs	r2, r4
   1242c:	b25b      	sxtb	r3, r3
   1242e:	18c9      	adds	r1, r1, r3
   12430:	4b18      	ldr	r3, [pc, #96]	; (12494 <LORAWAN_TxDone+0x520>)
   12432:	5cfb      	ldrb	r3, [r7, r3]
   12434:	37e5      	adds	r7, #229	; 0xe5
   12436:	1ac9      	subs	r1, r1, r3
   12438:	7838      	ldrb	r0, [r7, #0]
   1243a:	4369      	muls	r1, r5
   1243c:	9400      	str	r4, [sp, #0]
   1243e:	4b17      	ldr	r3, [pc, #92]	; (1249c <LORAWAN_TxDone+0x528>)
   12440:	47b0      	blx	r6
   12442:	e7a0      	b.n	12386 <LORAWAN_TxDone+0x412>
   12444:	075b      	lsls	r3, r3, #29
   12446:	d5b8      	bpl.n	123ba <LORAWAN_TxDone+0x446>
   12448:	2022      	movs	r0, #34	; 0x22
   1244a:	e7b4      	b.n	123b6 <LORAWAN_TxDone+0x442>
   1244c:	491b      	ldr	r1, [pc, #108]	; (124bc <LORAWAN_TxDone+0x548>)
   1244e:	784a      	ldrb	r2, [r1, #1]
   12450:	780b      	ldrb	r3, [r1, #0]
   12452:	0212      	lsls	r2, r2, #8
   12454:	431a      	orrs	r2, r3
   12456:	788b      	ldrb	r3, [r1, #2]
   12458:	041b      	lsls	r3, r3, #16
   1245a:	431a      	orrs	r2, r3
   1245c:	78cb      	ldrb	r3, [r1, #3]
   1245e:	061b      	lsls	r3, r3, #24
   12460:	4313      	orrs	r3, r2
   12462:	d100      	bne.n	12466 <LORAWAN_TxDone+0x4f2>
   12464:	e5a6      	b.n	11fb4 <LORAWAN_TxDone+0x40>
   12466:	4a16      	ldr	r2, [pc, #88]	; (124c0 <LORAWAN_TxDone+0x54c>)
   12468:	7811      	ldrb	r1, [r2, #0]
   1246a:	221c      	movs	r2, #28
   1246c:	2904      	cmp	r1, #4
   1246e:	d003      	beq.n	12478 <LORAWAN_TxDone+0x504>
   12470:	2200      	movs	r2, #0
   12472:	2c07      	cmp	r4, #7
   12474:	d100      	bne.n	12478 <LORAWAN_TxDone+0x504>
   12476:	0022      	movs	r2, r4
   12478:	0039      	movs	r1, r7
   1247a:	2004      	movs	r0, #4
   1247c:	31ff      	adds	r1, #255	; 0xff
   1247e:	37fc      	adds	r7, #252	; 0xfc
   12480:	7048      	strb	r0, [r1, #1]
   12482:	714a      	strb	r2, [r1, #5]
   12484:	6838      	ldr	r0, [r7, #0]
   12486:	490f      	ldr	r1, [pc, #60]	; (124c4 <LORAWAN_TxDone+0x550>)
   12488:	4798      	blx	r3
   1248a:	e593      	b.n	11fb4 <LORAWAN_TxDone+0x40>
   1248c:	0000d91d 	.word	0x0000d91d
   12490:	0000ee29 	.word	0x0000ee29
   12494:	0000021f 	.word	0x0000021f
   12498:	00010eb9 	.word	0x00010eb9
   1249c:	00012805 	.word	0x00012805
   124a0:	0000da45 	.word	0x0000da45
   124a4:	0000edd1 	.word	0x0000edd1
   124a8:	20002b5c 	.word	0x20002b5c
   124ac:	00000225 	.word	0x00000225
   124b0:	0000f42d 	.word	0x0000f42d
   124b4:	20002bca 	.word	0x20002bca
   124b8:	00014319 	.word	0x00014319
   124bc:	20002ea4 	.word	0x20002ea4
   124c0:	20002d90 	.word	0x20002d90
   124c4:	20002c5c 	.word	0x20002c5c

000124c8 <radioCallback>:
   124c8:	4b10      	ldr	r3, [pc, #64]	; (1250c <radioCallback+0x44>)
   124ca:	b510      	push	{r4, lr}
   124cc:	7018      	strb	r0, [r3, #0]
   124ce:	3801      	subs	r0, #1
   124d0:	b2c0      	uxtb	r0, r0
   124d2:	000c      	movs	r4, r1
   124d4:	281f      	cmp	r0, #31
   124d6:	d809      	bhi.n	124ec <radioCallback+0x24>
   124d8:	2301      	movs	r3, #1
   124da:	4083      	lsls	r3, r0
   124dc:	4a0c      	ldr	r2, [pc, #48]	; (12510 <radioCallback+0x48>)
   124de:	4213      	tst	r3, r2
   124e0:	d109      	bne.n	124f6 <radioCallback+0x2e>
   124e2:	220a      	movs	r2, #10
   124e4:	4213      	tst	r3, r2
   124e6:	d102      	bne.n	124ee <radioCallback+0x26>
   124e8:	2b00      	cmp	r3, #0
   124ea:	db08      	blt.n	124fe <radioCallback+0x36>
   124ec:	bd10      	pop	{r4, pc}
   124ee:	0008      	movs	r0, r1
   124f0:	4b08      	ldr	r3, [pc, #32]	; (12514 <radioCallback+0x4c>)
   124f2:	4798      	blx	r3
   124f4:	e7fa      	b.n	124ec <radioCallback+0x24>
   124f6:	2002      	movs	r0, #2
   124f8:	4b07      	ldr	r3, [pc, #28]	; (12518 <radioCallback+0x50>)
   124fa:	4798      	blx	r3
   124fc:	e7f6      	b.n	124ec <radioCallback+0x24>
   124fe:	4b07      	ldr	r3, [pc, #28]	; (1251c <radioCallback+0x54>)
   12500:	681b      	ldr	r3, [r3, #0]
   12502:	2b00      	cmp	r3, #0
   12504:	d0f2      	beq.n	124ec <radioCallback+0x24>
   12506:	4798      	blx	r3
   12508:	6020      	str	r0, [r4, #0]
   1250a:	e7ef      	b.n	124ec <radioCallback+0x24>
   1250c:	20002d90 	.word	0x20002d90
   12510:	00008081 	.word	0x00008081
   12514:	00011f75 	.word	0x00011f75
   12518:	00014af5 	.word	0x00014af5
   1251c:	20002ea0 	.word	0x20002ea0

00012520 <LorawanCheckAndDoRetryOnTimeout>:
   12520:	b513      	push	{r0, r1, r4, lr}
   12522:	4c33      	ldr	r4, [pc, #204]	; (125f0 <LorawanCheckAndDoRetryOnTimeout+0xd0>)
   12524:	0023      	movs	r3, r4
   12526:	338c      	adds	r3, #140	; 0x8c
   12528:	781b      	ldrb	r3, [r3, #0]
   1252a:	0022      	movs	r2, r4
   1252c:	07db      	lsls	r3, r3, #31
   1252e:	d54b      	bpl.n	125c8 <LorawanCheckAndDoRetryOnTimeout+0xa8>
   12530:	0023      	movs	r3, r4
   12532:	32dc      	adds	r2, #220	; 0xdc
   12534:	33da      	adds	r3, #218	; 0xda
   12536:	7812      	ldrb	r2, [r2, #0]
   12538:	781b      	ldrb	r3, [r3, #0]
   1253a:	429a      	cmp	r2, r3
   1253c:	d836      	bhi.n	125ac <LorawanCheckAndDoRetryOnTimeout+0x8c>
   1253e:	4b2d      	ldr	r3, [pc, #180]	; (125f4 <LorawanCheckAndDoRetryOnTimeout+0xd4>)
   12540:	5ce3      	ldrb	r3, [r4, r3]
   12542:	2b00      	cmp	r3, #0
   12544:	d032      	beq.n	125ac <LorawanCheckAndDoRetryOnTimeout+0x8c>
   12546:	0023      	movs	r3, r4
   12548:	33f4      	adds	r3, #244	; 0xf4
   1254a:	781b      	ldrb	r3, [r3, #0]
   1254c:	2b01      	cmp	r3, #1
   1254e:	d119      	bne.n	12584 <LorawanCheckAndDoRetryOnTimeout+0x64>
   12550:	0021      	movs	r1, r4
   12552:	220e      	movs	r2, #14
   12554:	317c      	adds	r1, #124	; 0x7c
   12556:	780b      	ldrb	r3, [r1, #0]
   12558:	4393      	bics	r3, r2
   1255a:	001a      	movs	r2, r3
   1255c:	230c      	movs	r3, #12
   1255e:	4313      	orrs	r3, r2
   12560:	700b      	strb	r3, [r1, #0]
   12562:	0023      	movs	r3, r4
   12564:	33d2      	adds	r3, #210	; 0xd2
   12566:	8819      	ldrh	r1, [r3, #0]
   12568:	4b23      	ldr	r3, [pc, #140]	; (125f8 <LorawanCheckAndDoRetryOnTimeout+0xd8>)
   1256a:	2200      	movs	r2, #0
   1256c:	5ce3      	ldrb	r3, [r4, r3]
   1256e:	34e8      	adds	r4, #232	; 0xe8
   12570:	1acb      	subs	r3, r1, r3
   12572:	21fa      	movs	r1, #250	; 0xfa
   12574:	0089      	lsls	r1, r1, #2
   12576:	7820      	ldrb	r0, [r4, #0]
   12578:	4359      	muls	r1, r3
   1257a:	9200      	str	r2, [sp, #0]
   1257c:	4b1f      	ldr	r3, [pc, #124]	; (125fc <LorawanCheckAndDoRetryOnTimeout+0xdc>)
   1257e:	4c20      	ldr	r4, [pc, #128]	; (12600 <LorawanCheckAndDoRetryOnTimeout+0xe0>)
   12580:	47a0      	blx	r4
   12582:	bd13      	pop	{r0, r1, r4, pc}
   12584:	2b04      	cmp	r3, #4
   12586:	d1fc      	bne.n	12582 <LorawanCheckAndDoRetryOnTimeout+0x62>
   12588:	4b1e      	ldr	r3, [pc, #120]	; (12604 <LorawanCheckAndDoRetryOnTimeout+0xe4>)
   1258a:	4798      	blx	r3
   1258c:	34c6      	adds	r4, #198	; 0xc6
   1258e:	300d      	adds	r0, #13
   12590:	8823      	ldrh	r3, [r4, #0]
   12592:	b280      	uxth	r0, r0
   12594:	4283      	cmp	r3, r0
   12596:	d802      	bhi.n	1259e <LorawanCheckAndDoRetryOnTimeout+0x7e>
   12598:	4b1b      	ldr	r3, [pc, #108]	; (12608 <LorawanCheckAndDoRetryOnTimeout+0xe8>)
   1259a:	4798      	blx	r3
   1259c:	e7f1      	b.n	12582 <LorawanCheckAndDoRetryOnTimeout+0x62>
   1259e:	200e      	movs	r0, #14
   125a0:	4b1a      	ldr	r3, [pc, #104]	; (1260c <LorawanCheckAndDoRetryOnTimeout+0xec>)
   125a2:	4798      	blx	r3
   125a4:	4b1a      	ldr	r3, [pc, #104]	; (12610 <LorawanCheckAndDoRetryOnTimeout+0xf0>)
   125a6:	4798      	blx	r3
   125a8:	4b1a      	ldr	r3, [pc, #104]	; (12614 <LorawanCheckAndDoRetryOnTimeout+0xf4>)
   125aa:	e7f6      	b.n	1259a <LorawanCheckAndDoRetryOnTimeout+0x7a>
   125ac:	2012      	movs	r0, #18
   125ae:	4b17      	ldr	r3, [pc, #92]	; (1260c <LorawanCheckAndDoRetryOnTimeout+0xec>)
   125b0:	4798      	blx	r3
   125b2:	4b17      	ldr	r3, [pc, #92]	; (12610 <LorawanCheckAndDoRetryOnTimeout+0xf0>)
   125b4:	4798      	blx	r3
   125b6:	34f4      	adds	r4, #244	; 0xf4
   125b8:	4b16      	ldr	r3, [pc, #88]	; (12614 <LorawanCheckAndDoRetryOnTimeout+0xf4>)
   125ba:	4798      	blx	r3
   125bc:	7823      	ldrb	r3, [r4, #0]
   125be:	2b04      	cmp	r3, #4
   125c0:	d1df      	bne.n	12582 <LorawanCheckAndDoRetryOnTimeout+0x62>
   125c2:	4b15      	ldr	r3, [pc, #84]	; (12618 <LorawanCheckAndDoRetryOnTimeout+0xf8>)
   125c4:	4798      	blx	r3
   125c6:	e7dc      	b.n	12582 <LorawanCheckAndDoRetryOnTimeout+0x62>
   125c8:	0023      	movs	r3, r4
   125ca:	32db      	adds	r2, #219	; 0xdb
   125cc:	33d9      	adds	r3, #217	; 0xd9
   125ce:	7812      	ldrb	r2, [r2, #0]
   125d0:	781b      	ldrb	r3, [r3, #0]
   125d2:	429a      	cmp	r2, r3
   125d4:	d803      	bhi.n	125de <LorawanCheckAndDoRetryOnTimeout+0xbe>
   125d6:	4b07      	ldr	r3, [pc, #28]	; (125f4 <LorawanCheckAndDoRetryOnTimeout+0xd4>)
   125d8:	5ce3      	ldrb	r3, [r4, r3]
   125da:	2b00      	cmp	r3, #0
   125dc:	d1dc      	bne.n	12598 <LorawanCheckAndDoRetryOnTimeout+0x78>
   125de:	4b0f      	ldr	r3, [pc, #60]	; (1261c <LorawanCheckAndDoRetryOnTimeout+0xfc>)
   125e0:	4798      	blx	r3
   125e2:	4b0c      	ldr	r3, [pc, #48]	; (12614 <LorawanCheckAndDoRetryOnTimeout+0xf4>)
   125e4:	4798      	blx	r3
   125e6:	2008      	movs	r0, #8
   125e8:	4b08      	ldr	r3, [pc, #32]	; (1260c <LorawanCheckAndDoRetryOnTimeout+0xec>)
   125ea:	4798      	blx	r3
   125ec:	e7c9      	b.n	12582 <LorawanCheckAndDoRetryOnTimeout+0x62>
   125ee:	46c0      	nop			; (mov r8, r8)
   125f0:	20002b5c 	.word	0x20002b5c
   125f4:	0000021e 	.word	0x0000021e
   125f8:	0000021f 	.word	0x0000021f
   125fc:	00012621 	.word	0x00012621
   12600:	0000ee29 	.word	0x0000ee29
   12604:	0000fe8d 	.word	0x0000fe8d
   12608:	00010fa1 	.word	0x00010fa1
   1260c:	000114a9 	.word	0x000114a9
   12610:	0001094d 	.word	0x0001094d
   12614:	0000fda1 	.word	0x0000fda1
   12618:	0001557d 	.word	0x0001557d
   1261c:	0001097d 	.word	0x0001097d

00012620 <AckRetransmissionCallback>:
   12620:	b510      	push	{r4, lr}
   12622:	4c1c      	ldr	r4, [pc, #112]	; (12694 <AckRetransmissionCallback+0x74>)
   12624:	0023      	movs	r3, r4
   12626:	337c      	adds	r3, #124	; 0x7c
   12628:	781b      	ldrb	r3, [r3, #0]
   1262a:	2b7f      	cmp	r3, #127	; 0x7f
   1262c:	d82d      	bhi.n	1268a <AckRetransmissionCallback+0x6a>
   1262e:	0023      	movs	r3, r4
   12630:	33f4      	adds	r3, #244	; 0xf4
   12632:	781b      	ldrb	r3, [r3, #0]
   12634:	2b04      	cmp	r3, #4
   12636:	d102      	bne.n	1263e <AckRetransmissionCallback+0x1e>
   12638:	4b17      	ldr	r3, [pc, #92]	; (12698 <AckRetransmissionCallback+0x78>)
   1263a:	4798      	blx	r3
   1263c:	e01e      	b.n	1267c <AckRetransmissionCallback+0x5c>
   1263e:	2b01      	cmp	r3, #1
   12640:	d11c      	bne.n	1267c <AckRetransmissionCallback+0x5c>
   12642:	0022      	movs	r2, r4
   12644:	0023      	movs	r3, r4
   12646:	32dc      	adds	r2, #220	; 0xdc
   12648:	33da      	adds	r3, #218	; 0xda
   1264a:	7812      	ldrb	r2, [r2, #0]
   1264c:	781b      	ldrb	r3, [r3, #0]
   1264e:	429a      	cmp	r2, r3
   12650:	d815      	bhi.n	1267e <AckRetransmissionCallback+0x5e>
   12652:	4b12      	ldr	r3, [pc, #72]	; (1269c <AckRetransmissionCallback+0x7c>)
   12654:	5ce3      	ldrb	r3, [r4, r3]
   12656:	2b00      	cmp	r3, #0
   12658:	d011      	beq.n	1267e <AckRetransmissionCallback+0x5e>
   1265a:	4b11      	ldr	r3, [pc, #68]	; (126a0 <AckRetransmissionCallback+0x80>)
   1265c:	4798      	blx	r3
   1265e:	34c6      	adds	r4, #198	; 0xc6
   12660:	300d      	adds	r0, #13
   12662:	8823      	ldrh	r3, [r4, #0]
   12664:	b280      	uxth	r0, r0
   12666:	4283      	cmp	r3, r0
   12668:	d801      	bhi.n	1266e <AckRetransmissionCallback+0x4e>
   1266a:	4b0e      	ldr	r3, [pc, #56]	; (126a4 <AckRetransmissionCallback+0x84>)
   1266c:	e7e5      	b.n	1263a <AckRetransmissionCallback+0x1a>
   1266e:	4b0e      	ldr	r3, [pc, #56]	; (126a8 <AckRetransmissionCallback+0x88>)
   12670:	4798      	blx	r3
   12672:	4b0e      	ldr	r3, [pc, #56]	; (126ac <AckRetransmissionCallback+0x8c>)
   12674:	4798      	blx	r3
   12676:	200e      	movs	r0, #14
   12678:	4b0d      	ldr	r3, [pc, #52]	; (126b0 <AckRetransmissionCallback+0x90>)
   1267a:	4798      	blx	r3
   1267c:	bd10      	pop	{r4, pc}
   1267e:	4b0a      	ldr	r3, [pc, #40]	; (126a8 <AckRetransmissionCallback+0x88>)
   12680:	4798      	blx	r3
   12682:	4b0a      	ldr	r3, [pc, #40]	; (126ac <AckRetransmissionCallback+0x8c>)
   12684:	4798      	blx	r3
   12686:	2012      	movs	r0, #18
   12688:	e7f6      	b.n	12678 <AckRetransmissionCallback+0x58>
   1268a:	4b07      	ldr	r3, [pc, #28]	; (126a8 <AckRetransmissionCallback+0x88>)
   1268c:	4798      	blx	r3
   1268e:	4b07      	ldr	r3, [pc, #28]	; (126ac <AckRetransmissionCallback+0x8c>)
   12690:	e7d3      	b.n	1263a <AckRetransmissionCallback+0x1a>
   12692:	46c0      	nop			; (mov r8, r8)
   12694:	20002b5c 	.word	0x20002b5c
   12698:	00012521 	.word	0x00012521
   1269c:	0000021e 	.word	0x0000021e
   126a0:	0000fe8d 	.word	0x0000fe8d
   126a4:	00010fa1 	.word	0x00010fa1
   126a8:	0001094d 	.word	0x0001094d
   126ac:	0000fda1 	.word	0x0000fda1
   126b0:	000114a9 	.word	0x000114a9

000126b4 <LORAWAN_RxTimeout>:
   126b4:	4b22      	ldr	r3, [pc, #136]	; (12740 <LORAWAN_RxTimeout+0x8c>)
   126b6:	b510      	push	{r4, lr}
   126b8:	001a      	movs	r2, r3
   126ba:	327c      	adds	r2, #124	; 0x7c
   126bc:	7812      	ldrb	r2, [r2, #0]
   126be:	b251      	sxtb	r1, r2
   126c0:	2900      	cmp	r1, #0
   126c2:	db23      	blt.n	1270c <LORAWAN_RxTimeout+0x58>
   126c4:	0019      	movs	r1, r3
   126c6:	31f4      	adds	r1, #244	; 0xf4
   126c8:	7809      	ldrb	r1, [r1, #0]
   126ca:	2904      	cmp	r1, #4
   126cc:	d104      	bne.n	126d8 <LORAWAN_RxTimeout+0x24>
   126ce:	07d1      	lsls	r1, r2, #31
   126d0:	d502      	bpl.n	126d8 <LORAWAN_RxTimeout+0x24>
   126d2:	4b1c      	ldr	r3, [pc, #112]	; (12744 <LORAWAN_RxTimeout+0x90>)
   126d4:	4798      	blx	r3
   126d6:	bd10      	pop	{r4, pc}
   126d8:	210e      	movs	r1, #14
   126da:	0010      	movs	r0, r2
   126dc:	4008      	ands	r0, r1
   126de:	2806      	cmp	r0, #6
   126e0:	d107      	bne.n	126f2 <LORAWAN_RxTimeout+0x3e>
   126e2:	337c      	adds	r3, #124	; 0x7c
   126e4:	781a      	ldrb	r2, [r3, #0]
   126e6:	438a      	bics	r2, r1
   126e8:	0011      	movs	r1, r2
   126ea:	2208      	movs	r2, #8
   126ec:	430a      	orrs	r2, r1
   126ee:	701a      	strb	r2, [r3, #0]
   126f0:	e7f1      	b.n	126d6 <LORAWAN_RxTimeout+0x22>
   126f2:	2004      	movs	r0, #4
   126f4:	338c      	adds	r3, #140	; 0x8c
   126f6:	781b      	ldrb	r3, [r3, #0]
   126f8:	4203      	tst	r3, r0
   126fa:	d002      	beq.n	12702 <LORAWAN_RxTimeout+0x4e>
   126fc:	4b12      	ldr	r3, [pc, #72]	; (12748 <LORAWAN_RxTimeout+0x94>)
   126fe:	4798      	blx	r3
   12700:	e7e9      	b.n	126d6 <LORAWAN_RxTimeout+0x22>
   12702:	07d3      	lsls	r3, r2, #31
   12704:	d5e7      	bpl.n	126d6 <LORAWAN_RxTimeout+0x22>
   12706:	4b11      	ldr	r3, [pc, #68]	; (1274c <LORAWAN_RxTimeout+0x98>)
   12708:	4798      	blx	r3
   1270a:	e7e4      	b.n	126d6 <LORAWAN_RxTimeout+0x22>
   1270c:	4810      	ldr	r0, [pc, #64]	; (12750 <LORAWAN_RxTimeout+0x9c>)
   1270e:	7841      	ldrb	r1, [r0, #1]
   12710:	7802      	ldrb	r2, [r0, #0]
   12712:	0209      	lsls	r1, r1, #8
   12714:	4311      	orrs	r1, r2
   12716:	7882      	ldrb	r2, [r0, #2]
   12718:	0412      	lsls	r2, r2, #16
   1271a:	4311      	orrs	r1, r2
   1271c:	78c2      	ldrb	r2, [r0, #3]
   1271e:	0612      	lsls	r2, r2, #24
   12720:	430a      	orrs	r2, r1
   12722:	d0d8      	beq.n	126d6 <LORAWAN_RxTimeout+0x22>
   12724:	2185      	movs	r1, #133	; 0x85
   12726:	2001      	movs	r0, #1
   12728:	0089      	lsls	r1, r1, #2
   1272a:	5458      	strb	r0, [r3, r1]
   1272c:	0019      	movs	r1, r3
   1272e:	2404      	movs	r4, #4
   12730:	31ff      	adds	r1, #255	; 0xff
   12732:	33fc      	adds	r3, #252	; 0xfc
   12734:	704c      	strb	r4, [r1, #1]
   12736:	7148      	strb	r0, [r1, #5]
   12738:	4906      	ldr	r1, [pc, #24]	; (12754 <LORAWAN_RxTimeout+0xa0>)
   1273a:	6818      	ldr	r0, [r3, #0]
   1273c:	4790      	blx	r2
   1273e:	e7ca      	b.n	126d6 <LORAWAN_RxTimeout+0x22>
   12740:	20002b5c 	.word	0x20002b5c
   12744:	0001439d 	.word	0x0001439d
   12748:	000109a1 	.word	0x000109a1
   1274c:	00012521 	.word	0x00012521
   12750:	20002ea4 	.word	0x20002ea4
   12754:	20002c5c 	.word	0x20002c5c

00012758 <LorawanConfigureRadioForRX2>:
   12758:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1275a:	466b      	mov	r3, sp
   1275c:	4c21      	ldr	r4, [pc, #132]	; (127e4 <LorawanConfigureRadioForRX2+0x8c>)
   1275e:	1cdd      	adds	r5, r3, #3
   12760:	0023      	movs	r3, r4
   12762:	2100      	movs	r1, #0
   12764:	338c      	adds	r3, #140	; 0x8c
   12766:	781b      	ldrb	r3, [r3, #0]
   12768:	0007      	movs	r7, r0
   1276a:	7029      	strb	r1, [r5, #0]
   1276c:	075b      	lsls	r3, r3, #29
   1276e:	d52c      	bpl.n	127ca <LorawanConfigureRadioForRX2+0x72>
   12770:	002a      	movs	r2, r5
   12772:	2009      	movs	r0, #9
   12774:	4b1c      	ldr	r3, [pc, #112]	; (127e8 <LorawanConfigureRadioForRX2+0x90>)
   12776:	4798      	blx	r3
   12778:	0022      	movs	r2, r4
   1277a:	0023      	movs	r3, r4
   1277c:	326c      	adds	r2, #108	; 0x6c
   1277e:	8811      	ldrh	r1, [r2, #0]
   12780:	336a      	adds	r3, #106	; 0x6a
   12782:	881b      	ldrh	r3, [r3, #0]
   12784:	0409      	lsls	r1, r1, #16
   12786:	4319      	orrs	r1, r3
   12788:	7828      	ldrb	r0, [r5, #0]
   1278a:	4b18      	ldr	r3, [pc, #96]	; (127ec <LorawanConfigureRadioForRX2+0x94>)
   1278c:	4798      	blx	r3
   1278e:	2300      	movs	r3, #0
   12790:	0022      	movs	r2, r4
   12792:	ae01      	add	r6, sp, #4
   12794:	7033      	strb	r3, [r6, #0]
   12796:	32f4      	adds	r2, #244	; 0xf4
   12798:	7812      	ldrb	r2, [r2, #0]
   1279a:	2a04      	cmp	r2, #4
   1279c:	d11a      	bne.n	127d4 <LorawanConfigureRadioForRX2+0x7c>
   1279e:	347c      	adds	r4, #124	; 0x7c
   127a0:	7822      	ldrb	r2, [r4, #0]
   127a2:	07d2      	lsls	r2, r2, #31
   127a4:	d516      	bpl.n	127d4 <LorawanConfigureRadioForRX2+0x7c>
   127a6:	8073      	strh	r3, [r6, #2]
   127a8:	0030      	movs	r0, r6
   127aa:	4b11      	ldr	r3, [pc, #68]	; (127f0 <LorawanConfigureRadioForRX2+0x98>)
   127ac:	4798      	blx	r3
   127ae:	1e04      	subs	r4, r0, #0
   127b0:	d00a      	beq.n	127c8 <LorawanConfigureRadioForRX2+0x70>
   127b2:	4b10      	ldr	r3, [pc, #64]	; (127f4 <LorawanConfigureRadioForRX2+0x9c>)
   127b4:	4798      	blx	r3
   127b6:	4b10      	ldr	r3, [pc, #64]	; (127f8 <LorawanConfigureRadioForRX2+0xa0>)
   127b8:	4798      	blx	r3
   127ba:	4b10      	ldr	r3, [pc, #64]	; (127fc <LorawanConfigureRadioForRX2+0xa4>)
   127bc:	4798      	blx	r3
   127be:	2f00      	cmp	r7, #0
   127c0:	d002      	beq.n	127c8 <LorawanConfigureRadioForRX2+0x70>
   127c2:	0020      	movs	r0, r4
   127c4:	4b0e      	ldr	r3, [pc, #56]	; (12800 <LorawanConfigureRadioForRX2+0xa8>)
   127c6:	4798      	blx	r3
   127c8:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
   127ca:	0023      	movs	r3, r4
   127cc:	336e      	adds	r3, #110	; 0x6e
   127ce:	781b      	ldrb	r3, [r3, #0]
   127d0:	702b      	strb	r3, [r5, #0]
   127d2:	e7d1      	b.n	12778 <LorawanConfigureRadioForRX2+0x20>
   127d4:	466b      	mov	r3, sp
   127d6:	0029      	movs	r1, r5
   127d8:	1d9a      	adds	r2, r3, #6
   127da:	2003      	movs	r0, #3
   127dc:	4b02      	ldr	r3, [pc, #8]	; (127e8 <LorawanConfigureRadioForRX2+0x90>)
   127de:	4798      	blx	r3
   127e0:	e7e2      	b.n	127a8 <LorawanConfigureRadioForRX2+0x50>
   127e2:	46c0      	nop			; (mov r8, r8)
   127e4:	20002b5c 	.word	0x20002b5c
   127e8:	0000d91d 	.word	0x0000d91d
   127ec:	00010e4d 	.word	0x00010e4d
   127f0:	00015e6d 	.word	0x00015e6d
   127f4:	0001094d 	.word	0x0001094d
   127f8:	0001097d 	.word	0x0001097d
   127fc:	0000fda1 	.word	0x0000fda1
   12800:	000114a9 	.word	0x000114a9

00012804 <LorawanReceiveWindow2Callback>:
   12804:	b570      	push	{r4, r5, r6, lr}
   12806:	4c16      	ldr	r4, [pc, #88]	; (12860 <LorawanReceiveWindow2Callback+0x5c>)
   12808:	0025      	movs	r5, r4
   1280a:	357c      	adds	r5, #124	; 0x7c
   1280c:	782b      	ldrb	r3, [r5, #0]
   1280e:	2b7f      	cmp	r3, #127	; 0x7f
   12810:	d811      	bhi.n	12836 <LorawanReceiveWindow2Callback+0x32>
   12812:	4b14      	ldr	r3, [pc, #80]	; (12864 <LorawanReceiveWindow2Callback+0x60>)
   12814:	4798      	blx	r3
   12816:	2801      	cmp	r0, #1
   12818:	d109      	bne.n	1282e <LorawanReceiveWindow2Callback+0x2a>
   1281a:	220e      	movs	r2, #14
   1281c:	782b      	ldrb	r3, [r5, #0]
   1281e:	4393      	bics	r3, r2
   12820:	001a      	movs	r2, r3
   12822:	230a      	movs	r3, #10
   12824:	4313      	orrs	r3, r2
   12826:	702b      	strb	r3, [r5, #0]
   12828:	4b0f      	ldr	r3, [pc, #60]	; (12868 <LorawanReceiveWindow2Callback+0x64>)
   1282a:	4798      	blx	r3
   1282c:	bd70      	pop	{r4, r5, r6, pc}
   1282e:	2301      	movs	r3, #1
   12830:	34f0      	adds	r4, #240	; 0xf0
   12832:	7023      	strb	r3, [r4, #0]
   12834:	e7fa      	b.n	1282c <LorawanReceiveWindow2Callback+0x28>
   12836:	2104      	movs	r1, #4
   12838:	348c      	adds	r4, #140	; 0x8c
   1283a:	7822      	ldrb	r2, [r4, #0]
   1283c:	420a      	tst	r2, r1
   1283e:	d007      	beq.n	12850 <LorawanReceiveWindow2Callback+0x4c>
   12840:	2001      	movs	r0, #1
   12842:	4383      	bics	r3, r0
   12844:	438a      	bics	r2, r1
   12846:	702b      	strb	r3, [r5, #0]
   12848:	3107      	adds	r1, #7
   1284a:	4b08      	ldr	r3, [pc, #32]	; (1286c <LorawanReceiveWindow2Callback+0x68>)
   1284c:	7022      	strb	r2, [r4, #0]
   1284e:	4798      	blx	r3
   12850:	4b07      	ldr	r3, [pc, #28]	; (12870 <LorawanReceiveWindow2Callback+0x6c>)
   12852:	4798      	blx	r3
   12854:	4b07      	ldr	r3, [pc, #28]	; (12874 <LorawanReceiveWindow2Callback+0x70>)
   12856:	4798      	blx	r3
   12858:	4b07      	ldr	r3, [pc, #28]	; (12878 <LorawanReceiveWindow2Callback+0x74>)
   1285a:	4798      	blx	r3
   1285c:	e7e6      	b.n	1282c <LorawanReceiveWindow2Callback+0x28>
   1285e:	46c0      	nop			; (mov r8, r8)
   12860:	20002b5c 	.word	0x20002b5c
   12864:	0001557d 	.word	0x0001557d
   12868:	00012759 	.word	0x00012759
   1286c:	0000e0f9 	.word	0x0000e0f9
   12870:	0001097d 	.word	0x0001097d
   12874:	0001094d 	.word	0x0001094d
   12878:	0000fda1 	.word	0x0000fda1

0001287c <SetReceptionNotOkState>:
   1287c:	2285      	movs	r2, #133	; 0x85
   1287e:	2101      	movs	r1, #1
   12880:	4b1c      	ldr	r3, [pc, #112]	; (128f4 <SetReceptionNotOkState+0x78>)
   12882:	0092      	lsls	r2, r2, #2
   12884:	b510      	push	{r4, lr}
   12886:	5499      	strb	r1, [r3, r2]
   12888:	001a      	movs	r2, r3
   1288a:	0019      	movs	r1, r3
   1288c:	32f4      	adds	r2, #244	; 0xf4
   1288e:	7812      	ldrb	r2, [r2, #0]
   12890:	317c      	adds	r1, #124	; 0x7c
   12892:	200e      	movs	r0, #14
   12894:	2a01      	cmp	r2, #1
   12896:	d124      	bne.n	128e2 <SetReceptionNotOkState+0x66>
   12898:	780a      	ldrb	r2, [r1, #0]
   1289a:	4002      	ands	r2, r0
   1289c:	2a0a      	cmp	r2, #10
   1289e:	d006      	beq.n	128ae <SetReceptionNotOkState+0x32>
   128a0:	2a06      	cmp	r2, #6
   128a2:	d11a      	bne.n	128da <SetReceptionNotOkState+0x5e>
   128a4:	001a      	movs	r2, r3
   128a6:	32f0      	adds	r2, #240	; 0xf0
   128a8:	7812      	ldrb	r2, [r2, #0]
   128aa:	2a00      	cmp	r2, #0
   128ac:	d015      	beq.n	128da <SetReceptionNotOkState+0x5e>
   128ae:	0019      	movs	r1, r3
   128b0:	2001      	movs	r0, #1
   128b2:	318c      	adds	r1, #140	; 0x8c
   128b4:	780a      	ldrb	r2, [r1, #0]
   128b6:	240e      	movs	r4, #14
   128b8:	4382      	bics	r2, r0
   128ba:	700a      	strb	r2, [r1, #0]
   128bc:	0019      	movs	r1, r3
   128be:	2200      	movs	r2, #0
   128c0:	31db      	adds	r1, #219	; 0xdb
   128c2:	700a      	strb	r2, [r1, #0]
   128c4:	0019      	movs	r1, r3
   128c6:	31dc      	adds	r1, #220	; 0xdc
   128c8:	700a      	strb	r2, [r1, #0]
   128ca:	001a      	movs	r2, r3
   128cc:	327c      	adds	r2, #124	; 0x7c
   128ce:	7811      	ldrb	r1, [r2, #0]
   128d0:	43a1      	bics	r1, r4
   128d2:	7011      	strb	r1, [r2, #0]
   128d4:	7851      	ldrb	r1, [r2, #1]
   128d6:	4381      	bics	r1, r0
   128d8:	7051      	strb	r1, [r2, #1]
   128da:	2200      	movs	r2, #0
   128dc:	33f0      	adds	r3, #240	; 0xf0
   128de:	701a      	strb	r2, [r3, #0]
   128e0:	bd10      	pop	{r4, pc}
   128e2:	230a      	movs	r3, #10
   128e4:	780a      	ldrb	r2, [r1, #0]
   128e6:	4382      	bics	r2, r0
   128e8:	4313      	orrs	r3, r2
   128ea:	700b      	strb	r3, [r1, #0]
   128ec:	2000      	movs	r0, #0
   128ee:	4b02      	ldr	r3, [pc, #8]	; (128f8 <SetReceptionNotOkState+0x7c>)
   128f0:	4798      	blx	r3
   128f2:	e7f5      	b.n	128e0 <SetReceptionNotOkState+0x64>
   128f4:	20002b5c 	.word	0x20002b5c
   128f8:	00012759 	.word	0x00012759

000128fc <LorawanProcessFcntDown>:
   128fc:	b570      	push	{r4, r5, r6, lr}
   128fe:	4c54      	ldr	r4, [pc, #336]	; (12a50 <LorawanProcessFcntDown+0x154>)
   12900:	79c3      	ldrb	r3, [r0, #7]
   12902:	0021      	movs	r1, r4
   12904:	7982      	ldrb	r2, [r0, #6]
   12906:	021b      	lsls	r3, r3, #8
   12908:	3184      	adds	r1, #132	; 0x84
   1290a:	4313      	orrs	r3, r2
   1290c:	880a      	ldrh	r2, [r1, #0]
   1290e:	4293      	cmp	r3, r2
   12910:	d352      	bcc.n	129b8 <LorawanProcessFcntDown+0xbc>
   12912:	0020      	movs	r0, r4
   12914:	30d0      	adds	r0, #208	; 0xd0
   12916:	8800      	ldrh	r0, [r0, #0]
   12918:	1a9a      	subs	r2, r3, r2
   1291a:	4282      	cmp	r2, r0
   1291c:	dd38      	ble.n	12990 <LorawanProcessFcntDown+0x94>
   1291e:	0022      	movs	r2, r4
   12920:	2101      	movs	r1, #1
   12922:	328c      	adds	r2, #140	; 0x8c
   12924:	7813      	ldrb	r3, [r2, #0]
   12926:	438b      	bics	r3, r1
   12928:	7013      	strb	r3, [r2, #0]
   1292a:	0023      	movs	r3, r4
   1292c:	33f4      	adds	r3, #244	; 0xf4
   1292e:	781b      	ldrb	r3, [r3, #0]
   12930:	428b      	cmp	r3, r1
   12932:	d108      	bne.n	12946 <LorawanProcessFcntDown+0x4a>
   12934:	0023      	movs	r3, r4
   12936:	220e      	movs	r2, #14
   12938:	337c      	adds	r3, #124	; 0x7c
   1293a:	781b      	ldrb	r3, [r3, #0]
   1293c:	4013      	ands	r3, r2
   1293e:	2b06      	cmp	r3, #6
   12940:	d101      	bne.n	12946 <LorawanProcessFcntDown+0x4a>
   12942:	4b44      	ldr	r3, [pc, #272]	; (12a54 <LorawanProcessFcntDown+0x158>)
   12944:	4798      	blx	r3
   12946:	4944      	ldr	r1, [pc, #272]	; (12a58 <LorawanProcessFcntDown+0x15c>)
   12948:	784a      	ldrb	r2, [r1, #1]
   1294a:	780b      	ldrb	r3, [r1, #0]
   1294c:	0212      	lsls	r2, r2, #8
   1294e:	431a      	orrs	r2, r3
   12950:	788b      	ldrb	r3, [r1, #2]
   12952:	041b      	lsls	r3, r3, #16
   12954:	431a      	orrs	r2, r3
   12956:	78cb      	ldrb	r3, [r1, #3]
   12958:	061b      	lsls	r3, r3, #24
   1295a:	4313      	orrs	r3, r2
   1295c:	d008      	beq.n	12970 <LorawanProcessFcntDown+0x74>
   1295e:	0022      	movs	r2, r4
   12960:	2120      	movs	r1, #32
   12962:	328c      	adds	r2, #140	; 0x8c
   12964:	7813      	ldrb	r3, [r2, #0]
   12966:	2017      	movs	r0, #23
   12968:	438b      	bics	r3, r1
   1296a:	7013      	strb	r3, [r2, #0]
   1296c:	4b3b      	ldr	r3, [pc, #236]	; (12a5c <LorawanProcessFcntDown+0x160>)
   1296e:	4798      	blx	r3
   12970:	2501      	movs	r5, #1
   12972:	347c      	adds	r4, #124	; 0x7c
   12974:	7863      	ldrb	r3, [r4, #1]
   12976:	43ab      	bics	r3, r5
   12978:	7063      	strb	r3, [r4, #1]
   1297a:	78a3      	ldrb	r3, [r4, #2]
   1297c:	432b      	orrs	r3, r5
   1297e:	70a3      	strb	r3, [r4, #2]
   12980:	4b37      	ldr	r3, [pc, #220]	; (12a60 <LorawanProcessFcntDown+0x164>)
   12982:	4798      	blx	r3
   12984:	210b      	movs	r1, #11
   12986:	0028      	movs	r0, r5
   12988:	4b36      	ldr	r3, [pc, #216]	; (12a64 <LorawanProcessFcntDown+0x168>)
   1298a:	4798      	blx	r3
   1298c:	200d      	movs	r0, #13
   1298e:	e00d      	b.n	129ac <LorawanProcessFcntDown+0xb0>
   12990:	800b      	strh	r3, [r1, #0]
   12992:	2388      	movs	r3, #136	; 0x88
   12994:	009b      	lsls	r3, r3, #2
   12996:	5ce2      	ldrb	r2, [r4, r3]
   12998:	2a00      	cmp	r2, #0
   1299a:	d008      	beq.n	129ae <LorawanProcessFcntDown+0xb2>
   1299c:	2301      	movs	r3, #1
   1299e:	4093      	lsls	r3, r2
   129a0:	3408      	adds	r4, #8
   129a2:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
   129a4:	3b01      	subs	r3, #1
   129a6:	421a      	tst	r2, r3
   129a8:	d001      	beq.n	129ae <LorawanProcessFcntDown+0xb2>
   129aa:	2008      	movs	r0, #8
   129ac:	bd70      	pop	{r4, r5, r6, pc}
   129ae:	210a      	movs	r1, #10
   129b0:	4b2c      	ldr	r3, [pc, #176]	; (12a64 <LorawanProcessFcntDown+0x168>)
   129b2:	2001      	movs	r0, #1
   129b4:	4798      	blx	r3
   129b6:	e7f8      	b.n	129aa <LorawanProcessFcntDown+0xae>
   129b8:	482b      	ldr	r0, [pc, #172]	; (12a68 <LorawanProcessFcntDown+0x16c>)
   129ba:	1a9a      	subs	r2, r3, r2
   129bc:	1812      	adds	r2, r2, r0
   129be:	482b      	ldr	r0, [pc, #172]	; (12a6c <LorawanProcessFcntDown+0x170>)
   129c0:	4282      	cmp	r2, r0
   129c2:	dc1f      	bgt.n	12a04 <LorawanProcessFcntDown+0x108>
   129c4:	0022      	movs	r2, r4
   129c6:	800b      	strh	r3, [r1, #0]
   129c8:	3286      	adds	r2, #134	; 0x86
   129ca:	8813      	ldrh	r3, [r2, #0]
   129cc:	3301      	adds	r3, #1
   129ce:	8013      	strh	r3, [r2, #0]
   129d0:	2388      	movs	r3, #136	; 0x88
   129d2:	009b      	lsls	r3, r3, #2
   129d4:	5ce2      	ldrb	r2, [r4, r3]
   129d6:	2a00      	cmp	r2, #0
   129d8:	d007      	beq.n	129ea <LorawanProcessFcntDown+0xee>
   129da:	2301      	movs	r3, #1
   129dc:	4093      	lsls	r3, r2
   129de:	0022      	movs	r2, r4
   129e0:	3208      	adds	r2, #8
   129e2:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
   129e4:	3b01      	subs	r3, #1
   129e6:	421a      	tst	r2, r3
   129e8:	d103      	bne.n	129f2 <LorawanProcessFcntDown+0xf6>
   129ea:	210a      	movs	r1, #10
   129ec:	2001      	movs	r0, #1
   129ee:	4b1d      	ldr	r3, [pc, #116]	; (12a64 <LorawanProcessFcntDown+0x168>)
   129f0:	4798      	blx	r3
   129f2:	0023      	movs	r3, r4
   129f4:	3308      	adds	r3, #8
   129f6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   129f8:	3301      	adds	r3, #1
   129fa:	d1d6      	bne.n	129aa <LorawanProcessFcntDown+0xae>
   129fc:	347c      	adds	r4, #124	; 0x7c
   129fe:	78a3      	ldrb	r3, [r4, #2]
   12a00:	2501      	movs	r5, #1
   12a02:	e7bb      	b.n	1297c <LorawanProcessFcntDown+0x80>
   12a04:	0023      	movs	r3, r4
   12a06:	33f4      	adds	r3, #244	; 0xf4
   12a08:	781b      	ldrb	r3, [r3, #0]
   12a0a:	2b01      	cmp	r3, #1
   12a0c:	d108      	bne.n	12a20 <LorawanProcessFcntDown+0x124>
   12a0e:	0023      	movs	r3, r4
   12a10:	220e      	movs	r2, #14
   12a12:	337c      	adds	r3, #124	; 0x7c
   12a14:	781b      	ldrb	r3, [r3, #0]
   12a16:	4013      	ands	r3, r2
   12a18:	2b06      	cmp	r3, #6
   12a1a:	d101      	bne.n	12a20 <LorawanProcessFcntDown+0x124>
   12a1c:	4b0d      	ldr	r3, [pc, #52]	; (12a54 <LorawanProcessFcntDown+0x158>)
   12a1e:	4798      	blx	r3
   12a20:	490d      	ldr	r1, [pc, #52]	; (12a58 <LorawanProcessFcntDown+0x15c>)
   12a22:	784a      	ldrb	r2, [r1, #1]
   12a24:	780b      	ldrb	r3, [r1, #0]
   12a26:	0212      	lsls	r2, r2, #8
   12a28:	431a      	orrs	r2, r3
   12a2a:	788b      	ldrb	r3, [r1, #2]
   12a2c:	041b      	lsls	r3, r3, #16
   12a2e:	431a      	orrs	r2, r3
   12a30:	78cb      	ldrb	r3, [r1, #3]
   12a32:	061b      	lsls	r3, r3, #24
   12a34:	4313      	orrs	r3, r2
   12a36:	d007      	beq.n	12a48 <LorawanProcessFcntDown+0x14c>
   12a38:	2220      	movs	r2, #32
   12a3a:	348c      	adds	r4, #140	; 0x8c
   12a3c:	7823      	ldrb	r3, [r4, #0]
   12a3e:	2017      	movs	r0, #23
   12a40:	4393      	bics	r3, r2
   12a42:	7023      	strb	r3, [r4, #0]
   12a44:	4b05      	ldr	r3, [pc, #20]	; (12a5c <LorawanProcessFcntDown+0x160>)
   12a46:	4798      	blx	r3
   12a48:	4b05      	ldr	r3, [pc, #20]	; (12a60 <LorawanProcessFcntDown+0x164>)
   12a4a:	4798      	blx	r3
   12a4c:	200a      	movs	r0, #10
   12a4e:	e7ad      	b.n	129ac <LorawanProcessFcntDown+0xb0>
   12a50:	20002b5c 	.word	0x20002b5c
   12a54:	000102b9 	.word	0x000102b9
   12a58:	20002ea4 	.word	0x20002ea4
   12a5c:	000114a9 	.word	0x000114a9
   12a60:	0001287d 	.word	0x0001287d
   12a64:	0000e0f9 	.word	0x0000e0f9
   12a68:	0000ffff 	.word	0x0000ffff
   12a6c:	00003fff 	.word	0x00003fff

00012a70 <UpdateCurrentDataRateAfterDataRangeChanges>:
   12a70:	4b09      	ldr	r3, [pc, #36]	; (12a98 <UpdateCurrentDataRateAfterDataRangeChanges+0x28>)
   12a72:	001a      	movs	r2, r3
   12a74:	32eb      	adds	r2, #235	; 0xeb
   12a76:	7811      	ldrb	r1, [r2, #0]
   12a78:	001a      	movs	r2, r3
   12a7a:	32df      	adds	r2, #223	; 0xdf
   12a7c:	7810      	ldrb	r0, [r2, #0]
   12a7e:	4288      	cmp	r0, r1
   12a80:	d900      	bls.n	12a84 <UpdateCurrentDataRateAfterDataRangeChanges+0x14>
   12a82:	7011      	strb	r1, [r2, #0]
   12a84:	001a      	movs	r2, r3
   12a86:	33df      	adds	r3, #223	; 0xdf
   12a88:	32ea      	adds	r2, #234	; 0xea
   12a8a:	7812      	ldrb	r2, [r2, #0]
   12a8c:	7819      	ldrb	r1, [r3, #0]
   12a8e:	4291      	cmp	r1, r2
   12a90:	d200      	bcs.n	12a94 <UpdateCurrentDataRateAfterDataRangeChanges+0x24>
   12a92:	701a      	strb	r2, [r3, #0]
   12a94:	4770      	bx	lr
   12a96:	46c0      	nop			; (mov r8, r8)
   12a98:	20002b5c 	.word	0x20002b5c

00012a9c <ExecuteNewChannel>:
   12a9c:	b5f0      	push	{r4, r5, r6, r7, lr}
   12a9e:	b08d      	sub	sp, #52	; 0x34
   12aa0:	7807      	ldrb	r7, [r0, #0]
   12aa2:	ab02      	add	r3, sp, #8
   12aa4:	0006      	movs	r6, r0
   12aa6:	71df      	strb	r7, [r3, #7]
   12aa8:	1c41      	adds	r1, r0, #1
   12aaa:	4b59      	ldr	r3, [pc, #356]	; (12c10 <ExecuteNewChannel+0x174>)
   12aac:	2204      	movs	r2, #4
   12aae:	a808      	add	r0, sp, #32
   12ab0:	4798      	blx	r3
   12ab2:	9b08      	ldr	r3, [sp, #32]
   12ab4:	4c57      	ldr	r4, [pc, #348]	; (12c14 <ExecuteNewChannel+0x178>)
   12ab6:	021d      	lsls	r5, r3, #8
   12ab8:	2364      	movs	r3, #100	; 0x64
   12aba:	0a2d      	lsrs	r5, r5, #8
   12abc:	435d      	muls	r5, r3
   12abe:	1d73      	adds	r3, r6, #5
   12ac0:	9301      	str	r3, [sp, #4]
   12ac2:	0023      	movs	r3, r4
   12ac4:	9508      	str	r5, [sp, #32]
   12ac6:	33f6      	adds	r3, #246	; 0xf6
   12ac8:	781b      	ldrb	r3, [r3, #0]
   12aca:	3b02      	subs	r3, #2
   12acc:	2b01      	cmp	r3, #1
   12ace:	d800      	bhi.n	12ad2 <ExecuteNewChannel+0x36>
   12ad0:	e092      	b.n	12bf8 <ExecuteNewChannel+0x15c>
   12ad2:	7933      	ldrb	r3, [r6, #4]
   12ad4:	a904      	add	r1, sp, #16
   12ad6:	9300      	str	r3, [sp, #0]
   12ad8:	2300      	movs	r3, #0
   12ada:	2015      	movs	r0, #21
   12adc:	4e4e      	ldr	r6, [pc, #312]	; (12c18 <ExecuteNewChannel+0x17c>)
   12ade:	700f      	strb	r7, [r1, #0]
   12ae0:	704b      	strb	r3, [r1, #1]
   12ae2:	47b0      	blx	r6
   12ae4:	2808      	cmp	r0, #8
   12ae6:	d12b      	bne.n	12b40 <ExecuteNewChannel+0xa4>
   12ae8:	466a      	mov	r2, sp
   12aea:	ab02      	add	r3, sp, #8
   12aec:	79db      	ldrb	r3, [r3, #7]
   12aee:	7812      	ldrb	r2, [r2, #0]
   12af0:	af06      	add	r7, sp, #24
   12af2:	a90a      	add	r1, sp, #40	; 0x28
   12af4:	3806      	subs	r0, #6
   12af6:	703b      	strb	r3, [r7, #0]
   12af8:	707a      	strb	r2, [r7, #1]
   12afa:	710b      	strb	r3, [r1, #4]
   12afc:	950a      	str	r5, [sp, #40]	; 0x28
   12afe:	47b0      	blx	r6
   12b00:	2808      	cmp	r0, #8
   12b02:	d001      	beq.n	12b08 <ExecuteNewChannel+0x6c>
   12b04:	2d00      	cmp	r5, #0
   12b06:	d10b      	bne.n	12b20 <ExecuteNewChannel+0x84>
   12b08:	0023      	movs	r3, r4
   12b0a:	33d8      	adds	r3, #216	; 0xd8
   12b0c:	781a      	ldrb	r2, [r3, #0]
   12b0e:	2303      	movs	r3, #3
   12b10:	4353      	muls	r3, r2
   12b12:	2280      	movs	r2, #128	; 0x80
   12b14:	18e3      	adds	r3, r4, r3
   12b16:	3390      	adds	r3, #144	; 0x90
   12b18:	7899      	ldrb	r1, [r3, #2]
   12b1a:	4252      	negs	r2, r2
   12b1c:	430a      	orrs	r2, r1
   12b1e:	709a      	strb	r2, [r3, #2]
   12b20:	0039      	movs	r1, r7
   12b22:	2012      	movs	r0, #18
   12b24:	47b0      	blx	r6
   12b26:	2808      	cmp	r0, #8
   12b28:	d10a      	bne.n	12b40 <ExecuteNewChannel+0xa4>
   12b2a:	0023      	movs	r3, r4
   12b2c:	33d8      	adds	r3, #216	; 0xd8
   12b2e:	781a      	ldrb	r2, [r3, #0]
   12b30:	2303      	movs	r3, #3
   12b32:	4353      	muls	r3, r2
   12b34:	2240      	movs	r2, #64	; 0x40
   12b36:	18e3      	adds	r3, r4, r3
   12b38:	3390      	adds	r3, #144	; 0x90
   12b3a:	7899      	ldrb	r1, [r3, #2]
   12b3c:	430a      	orrs	r2, r1
   12b3e:	709a      	strb	r2, [r3, #2]
   12b40:	0023      	movs	r3, r4
   12b42:	33d8      	adds	r3, #216	; 0xd8
   12b44:	781a      	ldrb	r2, [r3, #0]
   12b46:	2303      	movs	r3, #3
   12b48:	4353      	muls	r3, r2
   12b4a:	18e3      	adds	r3, r4, r3
   12b4c:	3390      	adds	r3, #144	; 0x90
   12b4e:	789b      	ldrb	r3, [r3, #2]
   12b50:	09da      	lsrs	r2, r3, #7
   12b52:	2a01      	cmp	r2, #1
   12b54:	d150      	bne.n	12bf8 <ExecuteNewChannel+0x15c>
   12b56:	065b      	lsls	r3, r3, #25
   12b58:	d54e      	bpl.n	12bf8 <ExecuteNewChannel+0x15c>
   12b5a:	4e30      	ldr	r6, [pc, #192]	; (12c1c <ExecuteNewChannel+0x180>)
   12b5c:	2d00      	cmp	r5, #0
   12b5e:	d04e      	beq.n	12bfe <ExecuteNewChannel+0x162>
   12b60:	a906      	add	r1, sp, #24
   12b62:	2012      	movs	r0, #18
   12b64:	47b0      	blx	r6
   12b66:	ad07      	add	r5, sp, #28
   12b68:	a90a      	add	r1, sp, #40	; 0x28
   12b6a:	2000      	movs	r0, #0
   12b6c:	47b0      	blx	r6
   12b6e:	002a      	movs	r2, r5
   12b70:	2100      	movs	r1, #0
   12b72:	2014      	movs	r0, #20
   12b74:	4f2a      	ldr	r7, [pc, #168]	; (12c20 <ExecuteNewChannel+0x184>)
   12b76:	47b8      	blx	r7
   12b78:	0023      	movs	r3, r4
   12b7a:	782a      	ldrb	r2, [r5, #0]
   12b7c:	33ea      	adds	r3, #234	; 0xea
   12b7e:	701a      	strb	r2, [r3, #0]
   12b80:	0023      	movs	r3, r4
   12b82:	786a      	ldrb	r2, [r5, #1]
   12b84:	33eb      	adds	r3, #235	; 0xeb
   12b86:	701a      	strb	r2, [r3, #0]
   12b88:	34ff      	adds	r4, #255	; 0xff
   12b8a:	4b26      	ldr	r3, [pc, #152]	; (12c24 <ExecuteNewChannel+0x188>)
   12b8c:	4798      	blx	r3
   12b8e:	7c63      	ldrb	r3, [r4, #17]
   12b90:	079b      	lsls	r3, r3, #30
   12b92:	d50e      	bpl.n	12bb2 <ExecuteNewChannel+0x116>
   12b94:	2416      	movs	r4, #22
   12b96:	ab02      	add	r3, sp, #8
   12b98:	18e4      	adds	r4, r4, r3
   12b9a:	1dd9      	adds	r1, r3, #7
   12b9c:	0022      	movs	r2, r4
   12b9e:	201e      	movs	r0, #30
   12ba0:	47b8      	blx	r7
   12ba2:	ab02      	add	r3, sp, #8
   12ba4:	79db      	ldrb	r3, [r3, #7]
   12ba6:	a909      	add	r1, sp, #36	; 0x24
   12ba8:	708b      	strb	r3, [r1, #2]
   12baa:	8823      	ldrh	r3, [r4, #0]
   12bac:	201e      	movs	r0, #30
   12bae:	800b      	strh	r3, [r1, #0]
   12bb0:	47b0      	blx	r6
   12bb2:	ab02      	add	r3, sp, #8
   12bb4:	79db      	ldrb	r3, [r3, #7]
   12bb6:	a905      	add	r1, sp, #20
   12bb8:	700b      	strb	r3, [r1, #0]
   12bba:	2301      	movs	r3, #1
   12bbc:	2016      	movs	r0, #22
   12bbe:	704b      	strb	r3, [r1, #1]
   12bc0:	4b16      	ldr	r3, [pc, #88]	; (12c1c <ExecuteNewChannel+0x180>)
   12bc2:	4798      	blx	r3
   12bc4:	ad09      	add	r5, sp, #36	; 0x24
   12bc6:	2100      	movs	r1, #0
   12bc8:	002a      	movs	r2, r5
   12bca:	4b15      	ldr	r3, [pc, #84]	; (12c20 <ExecuteNewChannel+0x184>)
   12bcc:	2014      	movs	r0, #20
   12bce:	4798      	blx	r3
   12bd0:	4c10      	ldr	r4, [pc, #64]	; (12c14 <ExecuteNewChannel+0x178>)
   12bd2:	782a      	ldrb	r2, [r5, #0]
   12bd4:	0023      	movs	r3, r4
   12bd6:	33ea      	adds	r3, #234	; 0xea
   12bd8:	701a      	strb	r2, [r3, #0]
   12bda:	0023      	movs	r3, r4
   12bdc:	786a      	ldrb	r2, [r5, #1]
   12bde:	33eb      	adds	r3, #235	; 0xeb
   12be0:	701a      	strb	r2, [r3, #0]
   12be2:	4b10      	ldr	r3, [pc, #64]	; (12c24 <ExecuteNewChannel+0x188>)
   12be4:	4798      	blx	r3
   12be6:	2304      	movs	r3, #4
   12be8:	347c      	adds	r4, #124	; 0x7c
   12bea:	7862      	ldrb	r2, [r4, #1]
   12bec:	210b      	movs	r1, #11
   12bee:	4313      	orrs	r3, r2
   12bf0:	7063      	strb	r3, [r4, #1]
   12bf2:	2001      	movs	r0, #1
   12bf4:	4b0c      	ldr	r3, [pc, #48]	; (12c28 <ExecuteNewChannel+0x18c>)
   12bf6:	4798      	blx	r3
   12bf8:	9801      	ldr	r0, [sp, #4]
   12bfa:	b00d      	add	sp, #52	; 0x34
   12bfc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   12bfe:	ab02      	add	r3, sp, #8
   12c00:	79db      	ldrb	r3, [r3, #7]
   12c02:	a905      	add	r1, sp, #20
   12c04:	2016      	movs	r0, #22
   12c06:	700b      	strb	r3, [r1, #0]
   12c08:	704d      	strb	r5, [r1, #1]
   12c0a:	47b0      	blx	r6
   12c0c:	e7da      	b.n	12bc4 <ExecuteNewChannel+0x128>
   12c0e:	46c0      	nop			; (mov r8, r8)
   12c10:	00019da5 	.word	0x00019da5
   12c14:	20002b5c 	.word	0x20002b5c
   12c18:	0000d939 	.word	0x0000d939
   12c1c:	0000da45 	.word	0x0000da45
   12c20:	0000d91d 	.word	0x0000d91d
   12c24:	00012a71 	.word	0x00012a71
   12c28:	0000e0f9 	.word	0x0000e0f9

00012c2c <MacExecuteCommands>:
   12c2c:	2300      	movs	r3, #0
   12c2e:	b5f0      	push	{r4, r5, r6, r7, lr}
   12c30:	0007      	movs	r7, r0
   12c32:	2503      	movs	r5, #3
   12c34:	b087      	sub	sp, #28
   12c36:	9002      	str	r0, [sp, #8]
   12c38:	9103      	str	r1, [sp, #12]
   12c3a:	9300      	str	r3, [sp, #0]
   12c3c:	9a03      	ldr	r2, [sp, #12]
   12c3e:	9b02      	ldr	r3, [sp, #8]
   12c40:	4694      	mov	ip, r2
   12c42:	4463      	add	r3, ip
   12c44:	9301      	str	r3, [sp, #4]
   12c46:	4e65      	ldr	r6, [pc, #404]	; (12ddc <MacExecuteCommands+0x1b0>)
   12c48:	429f      	cmp	r7, r3
   12c4a:	d35c      	bcc.n	12d06 <MacExecuteCommands+0xda>
   12c4c:	4b64      	ldr	r3, [pc, #400]	; (12de0 <MacExecuteCommands+0x1b4>)
   12c4e:	5cf3      	ldrb	r3, [r6, r3]
   12c50:	2b00      	cmp	r3, #0
   12c52:	d000      	beq.n	12c56 <MacExecuteCommands+0x2a>
   12c54:	e07a      	b.n	12d4c <MacExecuteCommands+0x120>
   12c56:	0038      	movs	r0, r7
   12c58:	b007      	add	sp, #28
   12c5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   12c5c:	0032      	movs	r2, r6
   12c5e:	7879      	ldrb	r1, [r7, #1]
   12c60:	32dd      	adds	r2, #221	; 0xdd
   12c62:	7011      	strb	r1, [r2, #0]
   12c64:	0032      	movs	r2, r6
   12c66:	78b9      	ldrb	r1, [r7, #2]
   12c68:	32de      	adds	r2, #222	; 0xde
   12c6a:	1cfc      	adds	r4, r7, #3
   12c6c:	7011      	strb	r1, [r2, #0]
   12c6e:	22ff      	movs	r2, #255	; 0xff
   12c70:	436b      	muls	r3, r5
   12c72:	18f3      	adds	r3, r6, r3
   12c74:	3391      	adds	r3, #145	; 0x91
   12c76:	701a      	strb	r2, [r3, #0]
   12c78:	e003      	b.n	12c82 <MacExecuteCommands+0x56>
   12c7a:	0020      	movs	r0, r4
   12c7c:	4b59      	ldr	r3, [pc, #356]	; (12de4 <MacExecuteCommands+0x1b8>)
   12c7e:	4798      	blx	r3
   12c80:	0004      	movs	r4, r0
   12c82:	0032      	movs	r2, r6
   12c84:	0029      	movs	r1, r5
   12c86:	32d8      	adds	r2, #216	; 0xd8
   12c88:	7813      	ldrb	r3, [r2, #0]
   12c8a:	4359      	muls	r1, r3
   12c8c:	1876      	adds	r6, r6, r1
   12c8e:	3691      	adds	r6, #145	; 0x91
   12c90:	7831      	ldrb	r1, [r6, #0]
   12c92:	29ff      	cmp	r1, #255	; 0xff
   12c94:	d003      	beq.n	12c9e <MacExecuteCommands+0x72>
   12c96:	2b0f      	cmp	r3, #15
   12c98:	d801      	bhi.n	12c9e <MacExecuteCommands+0x72>
   12c9a:	3301      	adds	r3, #1
   12c9c:	7013      	strb	r3, [r2, #0]
   12c9e:	0027      	movs	r7, r4
   12ca0:	e7cc      	b.n	12c3c <MacExecuteCommands+0x10>
   12ca2:	0020      	movs	r0, r4
   12ca4:	4b50      	ldr	r3, [pc, #320]	; (12de8 <MacExecuteCommands+0x1bc>)
   12ca6:	e7ea      	b.n	12c7e <MacExecuteCommands+0x52>
   12ca8:	0020      	movs	r0, r4
   12caa:	4b50      	ldr	r3, [pc, #320]	; (12dec <MacExecuteCommands+0x1c0>)
   12cac:	e7e7      	b.n	12c7e <MacExecuteCommands+0x52>
   12cae:	0020      	movs	r0, r4
   12cb0:	4b4f      	ldr	r3, [pc, #316]	; (12df0 <MacExecuteCommands+0x1c4>)
   12cb2:	e7e4      	b.n	12c7e <MacExecuteCommands+0x52>
   12cb4:	230f      	movs	r3, #15
   12cb6:	7878      	ldrb	r0, [r7, #1]
   12cb8:	1cbc      	adds	r4, r7, #2
   12cba:	4018      	ands	r0, r3
   12cbc:	4b4d      	ldr	r3, [pc, #308]	; (12df4 <MacExecuteCommands+0x1c8>)
   12cbe:	4798      	blx	r3
   12cc0:	0032      	movs	r2, r6
   12cc2:	2380      	movs	r3, #128	; 0x80
   12cc4:	327c      	adds	r2, #124	; 0x7c
   12cc6:	7851      	ldrb	r1, [r2, #1]
   12cc8:	425b      	negs	r3, r3
   12cca:	430b      	orrs	r3, r1
   12ccc:	7053      	strb	r3, [r2, #1]
   12cce:	210b      	movs	r1, #11
   12cd0:	4b49      	ldr	r3, [pc, #292]	; (12df8 <MacExecuteCommands+0x1cc>)
   12cd2:	2001      	movs	r0, #1
   12cd4:	4798      	blx	r3
   12cd6:	e7d4      	b.n	12c82 <MacExecuteCommands+0x56>
   12cd8:	0020      	movs	r0, r4
   12cda:	4b48      	ldr	r3, [pc, #288]	; (12dfc <MacExecuteCommands+0x1d0>)
   12cdc:	e7cf      	b.n	12c7e <MacExecuteCommands+0x52>
   12cde:	0020      	movs	r0, r4
   12ce0:	4b47      	ldr	r3, [pc, #284]	; (12e00 <MacExecuteCommands+0x1d4>)
   12ce2:	e7cc      	b.n	12c7e <MacExecuteCommands+0x52>
   12ce4:	0020      	movs	r0, r4
   12ce6:	4b47      	ldr	r3, [pc, #284]	; (12e04 <MacExecuteCommands+0x1d8>)
   12ce8:	4798      	blx	r3
   12cea:	0033      	movs	r3, r6
   12cec:	33d8      	adds	r3, #216	; 0xd8
   12cee:	0004      	movs	r4, r0
   12cf0:	781b      	ldrb	r3, [r3, #0]
   12cf2:	e7bc      	b.n	12c6e <MacExecuteCommands+0x42>
   12cf4:	22ff      	movs	r2, #255	; 0xff
   12cf6:	436b      	muls	r3, r5
   12cf8:	18f3      	adds	r3, r6, r3
   12cfa:	3391      	adds	r3, #145	; 0x91
   12cfc:	701a      	strb	r2, [r3, #0]
   12cfe:	2301      	movs	r3, #1
   12d00:	9c01      	ldr	r4, [sp, #4]
   12d02:	9300      	str	r3, [sp, #0]
   12d04:	e7bd      	b.n	12c82 <MacExecuteCommands+0x56>
   12d06:	9b00      	ldr	r3, [sp, #0]
   12d08:	2b00      	cmp	r3, #0
   12d0a:	d19f      	bne.n	12c4c <MacExecuteCommands+0x20>
   12d0c:	0033      	movs	r3, r6
   12d0e:	002a      	movs	r2, r5
   12d10:	33d8      	adds	r3, #216	; 0xd8
   12d12:	781b      	ldrb	r3, [r3, #0]
   12d14:	2401      	movs	r4, #1
   12d16:	435a      	muls	r2, r3
   12d18:	18b2      	adds	r2, r6, r2
   12d1a:	0010      	movs	r0, r2
   12d1c:	3090      	adds	r0, #144	; 0x90
   12d1e:	7881      	ldrb	r1, [r0, #2]
   12d20:	3291      	adds	r2, #145	; 0x91
   12d22:	43a1      	bics	r1, r4
   12d24:	4021      	ands	r1, r4
   12d26:	7081      	strb	r1, [r0, #2]
   12d28:	78c1      	ldrb	r1, [r0, #3]
   12d2a:	43a1      	bics	r1, r4
   12d2c:	70c1      	strb	r1, [r0, #3]
   12d2e:	7839      	ldrb	r1, [r7, #0]
   12d30:	193c      	adds	r4, r7, r4
   12d32:	7011      	strb	r1, [r2, #0]
   12d34:	7838      	ldrb	r0, [r7, #0]
   12d36:	3802      	subs	r0, #2
   12d38:	280b      	cmp	r0, #11
   12d3a:	d8db      	bhi.n	12cf4 <MacExecuteCommands+0xc8>
   12d3c:	f003 fc62 	bl	16604 <__gnu_thumb1_case_sqi>
   12d40:	b4b19d8e 	.word	0xb4b19d8e
   12d44:	ccbab7a1 	.word	0xccbab7a1
   12d48:	d2dadacf 	.word	0xd2dadacf
   12d4c:	4b2e      	ldr	r3, [pc, #184]	; (12e08 <MacExecuteCommands+0x1dc>)
   12d4e:	5cf3      	ldrb	r3, [r6, r3]
   12d50:	43db      	mvns	r3, r3
   12d52:	075b      	lsls	r3, r3, #29
   12d54:	d000      	beq.n	12d58 <MacExecuteCommands+0x12c>
   12d56:	e77e      	b.n	12c56 <MacExecuteCommands+0x2a>
   12d58:	4b2c      	ldr	r3, [pc, #176]	; (12e0c <MacExecuteCommands+0x1e0>)
   12d5a:	ad05      	add	r5, sp, #20
   12d5c:	5cf4      	ldrb	r4, [r6, r3]
   12d5e:	2100      	movs	r1, #0
   12d60:	0724      	lsls	r4, r4, #28
   12d62:	0f24      	lsrs	r4, r4, #28
   12d64:	b2e3      	uxtb	r3, r4
   12d66:	9300      	str	r3, [sp, #0]
   12d68:	4b29      	ldr	r3, [pc, #164]	; (12e10 <MacExecuteCommands+0x1e4>)
   12d6a:	002a      	movs	r2, r5
   12d6c:	5cf3      	ldrb	r3, [r6, r3]
   12d6e:	2014      	movs	r0, #20
   12d70:	9301      	str	r3, [sp, #4]
   12d72:	2386      	movs	r3, #134	; 0x86
   12d74:	009b      	lsls	r3, r3, #2
   12d76:	5cf3      	ldrb	r3, [r6, r3]
   12d78:	9302      	str	r3, [sp, #8]
   12d7a:	4b26      	ldr	r3, [pc, #152]	; (12e14 <MacExecuteCommands+0x1e8>)
   12d7c:	4798      	blx	r3
   12d7e:	0033      	movs	r3, r6
   12d80:	782a      	ldrb	r2, [r5, #0]
   12d82:	33ea      	adds	r3, #234	; 0xea
   12d84:	701a      	strb	r2, [r3, #0]
   12d86:	0033      	movs	r3, r6
   12d88:	786a      	ldrb	r2, [r5, #1]
   12d8a:	33eb      	adds	r3, #235	; 0xeb
   12d8c:	701a      	strb	r2, [r3, #0]
   12d8e:	4b22      	ldr	r3, [pc, #136]	; (12e18 <MacExecuteCommands+0x1ec>)
   12d90:	4798      	blx	r3
   12d92:	9801      	ldr	r0, [sp, #4]
   12d94:	4b21      	ldr	r3, [pc, #132]	; (12e1c <MacExecuteCommands+0x1f0>)
   12d96:	4798      	blx	r3
   12d98:	0032      	movs	r2, r6
   12d9a:	2308      	movs	r3, #8
   12d9c:	327c      	adds	r2, #124	; 0x7c
   12d9e:	7851      	ldrb	r1, [r2, #1]
   12da0:	430b      	orrs	r3, r1
   12da2:	7053      	strb	r3, [r2, #1]
   12da4:	9802      	ldr	r0, [sp, #8]
   12da6:	4b1e      	ldr	r3, [pc, #120]	; (12e20 <MacExecuteCommands+0x1f4>)
   12da8:	4798      	blx	r3
   12daa:	0033      	movs	r3, r6
   12dac:	b2e2      	uxtb	r2, r4
   12dae:	33d9      	adds	r3, #217	; 0xd9
   12db0:	2a00      	cmp	r2, #0
   12db2:	d10e      	bne.n	12dd2 <MacExecuteCommands+0x1a6>
   12db4:	701c      	strb	r4, [r3, #0]
   12db6:	2114      	movs	r1, #20
   12db8:	4c0f      	ldr	r4, [pc, #60]	; (12df8 <MacExecuteCommands+0x1cc>)
   12dba:	2000      	movs	r0, #0
   12dbc:	47a0      	blx	r4
   12dbe:	2210      	movs	r2, #16
   12dc0:	4b06      	ldr	r3, [pc, #24]	; (12ddc <MacExecuteCommands+0x1b0>)
   12dc2:	2001      	movs	r0, #1
   12dc4:	337c      	adds	r3, #124	; 0x7c
   12dc6:	7859      	ldrb	r1, [r3, #1]
   12dc8:	430a      	orrs	r2, r1
   12dca:	705a      	strb	r2, [r3, #1]
   12dcc:	210b      	movs	r1, #11
   12dce:	47a0      	blx	r4
   12dd0:	e741      	b.n	12c56 <MacExecuteCommands+0x2a>
   12dd2:	9a00      	ldr	r2, [sp, #0]
   12dd4:	3a01      	subs	r2, #1
   12dd6:	701a      	strb	r2, [r3, #0]
   12dd8:	e7ed      	b.n	12db6 <MacExecuteCommands+0x18a>
   12dda:	46c0      	nop			; (mov r8, r8)
   12ddc:	20002b5c 	.word	0x20002b5c
   12de0:	0000021a 	.word	0x0000021a
   12de4:	00010c3d 	.word	0x00010c3d
   12de8:	00010b01 	.word	0x00010b01
   12dec:	00010a05 	.word	0x00010a05
   12df0:	00012a9d 	.word	0x00012a9d
   12df4:	0000fead 	.word	0x0000fead
   12df8:	0000e0f9 	.word	0x0000e0f9
   12dfc:	00010bed 	.word	0x00010bed
   12e00:	00010b39 	.word	0x00010b39
   12e04:	00010d55 	.word	0x00010d55
   12e08:	00000217 	.word	0x00000217
   12e0c:	0000021d 	.word	0x0000021d
   12e10:	00000219 	.word	0x00000219
   12e14:	0000d91d 	.word	0x0000d91d
   12e18:	00012a71 	.word	0x00012a71
   12e1c:	000108b9 	.word	0x000108b9
   12e20:	0001084d 	.word	0x0001084d

00012e24 <LorawanSetDataRange>:
   12e24:	2201      	movs	r2, #1
   12e26:	b530      	push	{r4, r5, lr}
   12e28:	b085      	sub	sp, #20
   12e2a:	ab01      	add	r3, sp, #4
   12e2c:	ac02      	add	r4, sp, #8
   12e2e:	7018      	strb	r0, [r3, #0]
   12e30:	7020      	strb	r0, [r4, #0]
   12e32:	7061      	strb	r1, [r4, #1]
   12e34:	2015      	movs	r0, #21
   12e36:	0019      	movs	r1, r3
   12e38:	4d11      	ldr	r5, [pc, #68]	; (12e80 <LorawanSetDataRange+0x5c>)
   12e3a:	705a      	strb	r2, [r3, #1]
   12e3c:	47a8      	blx	r5
   12e3e:	2808      	cmp	r0, #8
   12e40:	d003      	beq.n	12e4a <LorawanSetDataRange+0x26>
   12e42:	250a      	movs	r5, #10
   12e44:	0028      	movs	r0, r5
   12e46:	b005      	add	sp, #20
   12e48:	bd30      	pop	{r4, r5, pc}
   12e4a:	0021      	movs	r1, r4
   12e4c:	2012      	movs	r0, #18
   12e4e:	47a8      	blx	r5
   12e50:	0005      	movs	r5, r0
   12e52:	2808      	cmp	r0, #8
   12e54:	d1f5      	bne.n	12e42 <LorawanSetDataRange+0x1e>
   12e56:	0021      	movs	r1, r4
   12e58:	4b0a      	ldr	r3, [pc, #40]	; (12e84 <LorawanSetDataRange+0x60>)
   12e5a:	ac03      	add	r4, sp, #12
   12e5c:	2012      	movs	r0, #18
   12e5e:	4798      	blx	r3
   12e60:	0022      	movs	r2, r4
   12e62:	2100      	movs	r1, #0
   12e64:	4b08      	ldr	r3, [pc, #32]	; (12e88 <LorawanSetDataRange+0x64>)
   12e66:	2014      	movs	r0, #20
   12e68:	4798      	blx	r3
   12e6a:	4b08      	ldr	r3, [pc, #32]	; (12e8c <LorawanSetDataRange+0x68>)
   12e6c:	7821      	ldrb	r1, [r4, #0]
   12e6e:	001a      	movs	r2, r3
   12e70:	32ea      	adds	r2, #234	; 0xea
   12e72:	7011      	strb	r1, [r2, #0]
   12e74:	7862      	ldrb	r2, [r4, #1]
   12e76:	33eb      	adds	r3, #235	; 0xeb
   12e78:	701a      	strb	r2, [r3, #0]
   12e7a:	4b05      	ldr	r3, [pc, #20]	; (12e90 <LorawanSetDataRange+0x6c>)
   12e7c:	4798      	blx	r3
   12e7e:	e7e1      	b.n	12e44 <LorawanSetDataRange+0x20>
   12e80:	0000d939 	.word	0x0000d939
   12e84:	0000da45 	.word	0x0000da45
   12e88:	0000d91d 	.word	0x0000d91d
   12e8c:	20002b5c 	.word	0x20002b5c
   12e90:	00012a71 	.word	0x00012a71

00012e94 <LorawanSetChannelIdStatus>:
   12e94:	b537      	push	{r0, r1, r2, r4, r5, lr}
   12e96:	466b      	mov	r3, sp
   12e98:	7018      	strb	r0, [r3, #0]
   12e9a:	7059      	strb	r1, [r3, #1]
   12e9c:	2016      	movs	r0, #22
   12e9e:	4669      	mov	r1, sp
   12ea0:	4b0c      	ldr	r3, [pc, #48]	; (12ed4 <LorawanSetChannelIdStatus+0x40>)
   12ea2:	4798      	blx	r3
   12ea4:	0004      	movs	r4, r0
   12ea6:	2808      	cmp	r0, #8
   12ea8:	d111      	bne.n	12ece <LorawanSetChannelIdStatus+0x3a>
   12eaa:	ad01      	add	r5, sp, #4
   12eac:	002a      	movs	r2, r5
   12eae:	2100      	movs	r1, #0
   12eb0:	4b09      	ldr	r3, [pc, #36]	; (12ed8 <LorawanSetChannelIdStatus+0x44>)
   12eb2:	2014      	movs	r0, #20
   12eb4:	4798      	blx	r3
   12eb6:	4b09      	ldr	r3, [pc, #36]	; (12edc <LorawanSetChannelIdStatus+0x48>)
   12eb8:	7829      	ldrb	r1, [r5, #0]
   12eba:	001a      	movs	r2, r3
   12ebc:	32ea      	adds	r2, #234	; 0xea
   12ebe:	7011      	strb	r1, [r2, #0]
   12ec0:	786a      	ldrb	r2, [r5, #1]
   12ec2:	33eb      	adds	r3, #235	; 0xeb
   12ec4:	701a      	strb	r2, [r3, #0]
   12ec6:	4b06      	ldr	r3, [pc, #24]	; (12ee0 <LorawanSetChannelIdStatus+0x4c>)
   12ec8:	4798      	blx	r3
   12eca:	0020      	movs	r0, r4
   12ecc:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
   12ece:	240a      	movs	r4, #10
   12ed0:	e7fb      	b.n	12eca <LorawanSetChannelIdStatus+0x36>
   12ed2:	46c0      	nop			; (mov r8, r8)
   12ed4:	0000da45 	.word	0x0000da45
   12ed8:	0000d91d 	.word	0x0000d91d
   12edc:	20002b5c 	.word	0x20002b5c
   12ee0:	00012a71 	.word	0x00012a71

00012ee4 <LORAWAN_RxDone>:
   12ee4:	b5f0      	push	{r4, r5, r6, r7, lr}
   12ee6:	4bc4      	ldr	r3, [pc, #784]	; (131f8 <LORAWAN_RxDone+0x314>)
   12ee8:	b093      	sub	sp, #76	; 0x4c
   12eea:	781b      	ldrb	r3, [r3, #0]
   12eec:	0007      	movs	r7, r0
   12eee:	b25a      	sxtb	r2, r3
   12ef0:	9106      	str	r1, [sp, #24]
   12ef2:	4cc2      	ldr	r4, [pc, #776]	; (131fc <LORAWAN_RxDone+0x318>)
   12ef4:	2a00      	cmp	r2, #0
   12ef6:	da01      	bge.n	12efc <LORAWAN_RxDone+0x18>
   12ef8:	f000 fc82 	bl	13800 <LORAWAN_RxDone+0x91c>
   12efc:	7801      	ldrb	r1, [r0, #0]
   12efe:	221f      	movs	r2, #31
   12f00:	000e      	movs	r6, r1
   12f02:	4396      	bics	r6, r2
   12f04:	2e20      	cmp	r6, #32
   12f06:	d000      	beq.n	12f0a <LORAWAN_RxDone+0x26>
   12f08:	e1ae      	b.n	13268 <LORAWAN_RxDone+0x384>
   12f0a:	7822      	ldrb	r2, [r4, #0]
   12f0c:	2a00      	cmp	r2, #0
   12f0e:	d001      	beq.n	12f14 <LORAWAN_RxDone+0x30>
   12f10:	f000 fc62 	bl	137d8 <LORAWAN_RxDone+0x8f4>
   12f14:	0022      	movs	r2, r4
   12f16:	328c      	adds	r2, #140	; 0x8c
   12f18:	7812      	ldrb	r2, [r2, #0]
   12f1a:	0752      	lsls	r2, r2, #29
   12f1c:	d401      	bmi.n	12f22 <LORAWAN_RxDone+0x3e>
   12f1e:	f000 fc5b 	bl	137d8 <LORAWAN_RxDone+0x8f4>
   12f22:	9b06      	ldr	r3, [sp, #24]
   12f24:	3b01      	subs	r3, #1
   12f26:	b2db      	uxtb	r3, r3
   12f28:	9307      	str	r3, [sp, #28]
   12f2a:	4bb5      	ldr	r3, [pc, #724]	; (13200 <LORAWAN_RxDone+0x31c>)
   12f2c:	469c      	mov	ip, r3
   12f2e:	9b07      	ldr	r3, [sp, #28]
   12f30:	2b00      	cmp	r3, #0
   12f32:	d12c      	bne.n	12f8e <LORAWAN_RxDone+0xaa>
   12f34:	9b06      	ldr	r3, [sp, #24]
   12f36:	4660      	mov	r0, ip
   12f38:	1f1d      	subs	r5, r3, #4
   12f3a:	b2eb      	uxtb	r3, r5
   12f3c:	9300      	str	r3, [sp, #0]
   12f3e:	4ab1      	ldr	r2, [pc, #708]	; (13204 <LORAWAN_RxDone+0x320>)
   12f40:	003b      	movs	r3, r7
   12f42:	9907      	ldr	r1, [sp, #28]
   12f44:	4eb0      	ldr	r6, [pc, #704]	; (13208 <LORAWAN_RxDone+0x324>)
   12f46:	47b0      	blx	r6
   12f48:	2204      	movs	r2, #4
   12f4a:	49ae      	ldr	r1, [pc, #696]	; (13204 <LORAWAN_RxDone+0x320>)
   12f4c:	4baf      	ldr	r3, [pc, #700]	; (1320c <LORAWAN_RxDone+0x328>)
   12f4e:	a810      	add	r0, sp, #64	; 0x40
   12f50:	4798      	blx	r3
   12f52:	9e10      	ldr	r6, [sp, #64]	; 0x40
   12f54:	1979      	adds	r1, r7, r5
   12f56:	2204      	movs	r2, #4
   12f58:	4bac      	ldr	r3, [pc, #688]	; (1320c <LORAWAN_RxDone+0x328>)
   12f5a:	a810      	add	r0, sp, #64	; 0x40
   12f5c:	960d      	str	r6, [sp, #52]	; 0x34
   12f5e:	4798      	blx	r3
   12f60:	9a10      	ldr	r2, [sp, #64]	; 0x40
   12f62:	4ba6      	ldr	r3, [pc, #664]	; (131fc <LORAWAN_RxDone+0x318>)
   12f64:	210e      	movs	r1, #14
   12f66:	42b2      	cmp	r2, r6
   12f68:	d029      	beq.n	12fbe <LORAWAN_RxDone+0xda>
   12f6a:	001a      	movs	r2, r3
   12f6c:	327c      	adds	r2, #124	; 0x7c
   12f6e:	7812      	ldrb	r2, [r2, #0]
   12f70:	400a      	ands	r2, r1
   12f72:	2a0a      	cmp	r2, #10
   12f74:	d005      	beq.n	12f82 <LORAWAN_RxDone+0x9e>
   12f76:	2a06      	cmp	r2, #6
   12f78:	d106      	bne.n	12f88 <LORAWAN_RxDone+0xa4>
   12f7a:	33f0      	adds	r3, #240	; 0xf0
   12f7c:	781b      	ldrb	r3, [r3, #0]
   12f7e:	2b00      	cmp	r3, #0
   12f80:	d002      	beq.n	12f88 <LORAWAN_RxDone+0xa4>
   12f82:	2018      	movs	r0, #24
   12f84:	4ba2      	ldr	r3, [pc, #648]	; (13210 <LORAWAN_RxDone+0x32c>)
   12f86:	4798      	blx	r3
   12f88:	4ba2      	ldr	r3, [pc, #648]	; (13214 <LORAWAN_RxDone+0x330>)
   12f8a:	4798      	blx	r3
   12f8c:	e1d0      	b.n	13330 <LORAWAN_RxDone+0x44c>
   12f8e:	9b06      	ldr	r3, [sp, #24]
   12f90:	9a07      	ldr	r2, [sp, #28]
   12f92:	2100      	movs	r1, #0
   12f94:	1a98      	subs	r0, r3, r2
   12f96:	1838      	adds	r0, r7, r0
   12f98:	4662      	mov	r2, ip
   12f9a:	4b9f      	ldr	r3, [pc, #636]	; (13218 <LORAWAN_RxDone+0x334>)
   12f9c:	4798      	blx	r3
   12f9e:	2800      	cmp	r0, #0
   12fa0:	d006      	beq.n	12fb0 <LORAWAN_RxDone+0xcc>
   12fa2:	4b9b      	ldr	r3, [pc, #620]	; (13210 <LORAWAN_RxDone+0x32c>)
   12fa4:	4798      	blx	r3
   12fa6:	4b9b      	ldr	r3, [pc, #620]	; (13214 <LORAWAN_RxDone+0x330>)
   12fa8:	4798      	blx	r3
   12faa:	201f      	movs	r0, #31
   12fac:	b013      	add	sp, #76	; 0x4c
   12fae:	bdf0      	pop	{r4, r5, r6, r7, pc}
   12fb0:	9b07      	ldr	r3, [sp, #28]
   12fb2:	2b10      	cmp	r3, #16
   12fb4:	d901      	bls.n	12fba <LORAWAN_RxDone+0xd6>
   12fb6:	3b10      	subs	r3, #16
   12fb8:	e7b5      	b.n	12f26 <LORAWAN_RxDone+0x42>
   12fba:	9007      	str	r0, [sp, #28]
   12fbc:	e7b5      	b.n	12f2a <LORAWAN_RxDone+0x46>
   12fbe:	001a      	movs	r2, r3
   12fc0:	327c      	adds	r2, #124	; 0x7c
   12fc2:	7812      	ldrb	r2, [r2, #0]
   12fc4:	400a      	ands	r2, r1
   12fc6:	2a06      	cmp	r2, #6
   12fc8:	d103      	bne.n	12fd2 <LORAWAN_RxDone+0xee>
   12fca:	33e3      	adds	r3, #227	; 0xe3
   12fcc:	7818      	ldrb	r0, [r3, #0]
   12fce:	4b93      	ldr	r3, [pc, #588]	; (1321c <LORAWAN_RxDone+0x338>)
   12fd0:	4798      	blx	r3
   12fd2:	7a3a      	ldrb	r2, [r7, #8]
   12fd4:	79fb      	ldrb	r3, [r7, #7]
   12fd6:	0212      	lsls	r2, r2, #8
   12fd8:	431a      	orrs	r2, r3
   12fda:	7a7b      	ldrb	r3, [r7, #9]
   12fdc:	2001      	movs	r0, #1
   12fde:	041b      	lsls	r3, r3, #16
   12fe0:	431a      	orrs	r2, r3
   12fe2:	7abb      	ldrb	r3, [r7, #10]
   12fe4:	061b      	lsls	r3, r3, #24
   12fe6:	4313      	orrs	r3, r2
   12fe8:	0a19      	lsrs	r1, r3, #8
   12fea:	7063      	strb	r3, [r4, #1]
   12fec:	70a1      	strb	r1, [r4, #2]
   12fee:	0c19      	lsrs	r1, r3, #16
   12ff0:	0e1b      	lsrs	r3, r3, #24
   12ff2:	70e1      	strb	r1, [r4, #3]
   12ff4:	7123      	strb	r3, [r4, #4]
   12ff6:	240f      	movs	r4, #15
   12ff8:	2103      	movs	r1, #3
   12ffa:	4b89      	ldr	r3, [pc, #548]	; (13220 <LORAWAN_RxDone+0x33c>)
   12ffc:	4798      	blx	r3
   12ffe:	7b38      	ldrb	r0, [r7, #12]
   13000:	4b88      	ldr	r3, [pc, #544]	; (13224 <LORAWAN_RxDone+0x340>)
   13002:	4020      	ands	r0, r4
   13004:	4798      	blx	r3
   13006:	7af8      	ldrb	r0, [r7, #11]
   13008:	4b87      	ldr	r3, [pc, #540]	; (13228 <LORAWAN_RxDone+0x344>)
   1300a:	0641      	lsls	r1, r0, #25
   1300c:	0700      	lsls	r0, r0, #28
   1300e:	0f49      	lsrs	r1, r1, #29
   13010:	0f00      	lsrs	r0, r0, #28
   13012:	4798      	blx	r3
   13014:	4b85      	ldr	r3, [pc, #532]	; (1322c <LORAWAN_RxDone+0x348>)
   13016:	2100      	movs	r1, #0
   13018:	203c      	movs	r0, #60	; 0x3c
   1301a:	4798      	blx	r3
   1301c:	9b06      	ldr	r3, [sp, #24]
   1301e:	2b21      	cmp	r3, #33	; 0x21
   13020:	d000      	beq.n	13024 <LORAWAN_RxDone+0x140>
   13022:	e08c      	b.n	1313e <LORAWAN_RxDone+0x25a>
   13024:	251a      	movs	r5, #26
   13026:	ab04      	add	r3, sp, #16
   13028:	18ed      	adds	r5, r5, r3
   1302a:	002a      	movs	r2, r5
   1302c:	4b80      	ldr	r3, [pc, #512]	; (13230 <LORAWAN_RxDone+0x34c>)
   1302e:	4981      	ldr	r1, [pc, #516]	; (13234 <LORAWAN_RxDone+0x350>)
   13030:	2007      	movs	r0, #7
   13032:	4798      	blx	r3
   13034:	782b      	ldrb	r3, [r5, #0]
   13036:	2bff      	cmp	r3, #255	; 0xff
   13038:	d100      	bne.n	1303c <LORAWAN_RxDone+0x158>
   1303a:	e080      	b.n	1313e <LORAWAN_RxDone+0x25a>
   1303c:	2350      	movs	r3, #80	; 0x50
   1303e:	43a3      	bics	r3, r4
   13040:	9308      	str	r3, [sp, #32]
   13042:	003b      	movs	r3, r7
   13044:	330d      	adds	r3, #13
   13046:	9306      	str	r3, [sp, #24]
   13048:	2600      	movs	r6, #0
   1304a:	2203      	movs	r2, #3
   1304c:	9906      	ldr	r1, [sp, #24]
   1304e:	4b6f      	ldr	r3, [pc, #444]	; (1320c <LORAWAN_RxDone+0x328>)
   13050:	a80e      	add	r0, sp, #56	; 0x38
   13052:	960e      	str	r6, [sp, #56]	; 0x38
   13054:	4798      	blx	r3
   13056:	2364      	movs	r3, #100	; 0x64
   13058:	990e      	ldr	r1, [sp, #56]	; 0x38
   1305a:	aa04      	add	r2, sp, #16
   1305c:	4359      	muls	r1, r3
   1305e:	3b4a      	subs	r3, #74	; 0x4a
   13060:	189b      	adds	r3, r3, r2
   13062:	7818      	ldrb	r0, [r3, #0]
   13064:	9b07      	ldr	r3, [sp, #28]
   13066:	910e      	str	r1, [sp, #56]	; 0x38
   13068:	1818      	adds	r0, r3, r0
   1306a:	b2c0      	uxtb	r0, r0
   1306c:	76d0      	strb	r0, [r2, #27]
   1306e:	42b1      	cmp	r1, r6
   13070:	d100      	bne.n	13074 <LORAWAN_RxDone+0x190>
   13072:	e0a7      	b.n	131c4 <LORAWAN_RxDone+0x2e0>
   13074:	466b      	mov	r3, sp
   13076:	2220      	movs	r2, #32
   13078:	189b      	adds	r3, r3, r2
   1307a:	781b      	ldrb	r3, [r3, #0]
   1307c:	ad10      	add	r5, sp, #64	; 0x40
   1307e:	ac0b      	add	r4, sp, #44	; 0x2c
   13080:	7128      	strb	r0, [r5, #4]
   13082:	9110      	str	r1, [sp, #64]	; 0x40
   13084:	7020      	strb	r0, [r4, #0]
   13086:	7063      	strb	r3, [r4, #1]
   13088:	0029      	movs	r1, r5
   1308a:	2002      	movs	r0, #2
   1308c:	4b6a      	ldr	r3, [pc, #424]	; (13238 <LORAWAN_RxDone+0x354>)
   1308e:	4798      	blx	r3
   13090:	2808      	cmp	r0, #8
   13092:	d140      	bne.n	13116 <LORAWAN_RxDone+0x232>
   13094:	0029      	movs	r1, r5
   13096:	0030      	movs	r0, r6
   13098:	4b64      	ldr	r3, [pc, #400]	; (1322c <LORAWAN_RxDone+0x348>)
   1309a:	4798      	blx	r3
   1309c:	ad0c      	add	r5, sp, #48	; 0x30
   1309e:	0021      	movs	r1, r4
   130a0:	4b62      	ldr	r3, [pc, #392]	; (1322c <LORAWAN_RxDone+0x348>)
   130a2:	2012      	movs	r0, #18
   130a4:	4798      	blx	r3
   130a6:	0031      	movs	r1, r6
   130a8:	002a      	movs	r2, r5
   130aa:	4e61      	ldr	r6, [pc, #388]	; (13230 <LORAWAN_RxDone+0x34c>)
   130ac:	2014      	movs	r0, #20
   130ae:	47b0      	blx	r6
   130b0:	4c52      	ldr	r4, [pc, #328]	; (131fc <LORAWAN_RxDone+0x318>)
   130b2:	782a      	ldrb	r2, [r5, #0]
   130b4:	0023      	movs	r3, r4
   130b6:	33ea      	adds	r3, #234	; 0xea
   130b8:	701a      	strb	r2, [r3, #0]
   130ba:	0023      	movs	r3, r4
   130bc:	786a      	ldrb	r2, [r5, #1]
   130be:	2522      	movs	r5, #34	; 0x22
   130c0:	33eb      	adds	r3, #235	; 0xeb
   130c2:	701a      	strb	r2, [r3, #0]
   130c4:	4b5d      	ldr	r3, [pc, #372]	; (1323c <LORAWAN_RxDone+0x358>)
   130c6:	4798      	blx	r3
   130c8:	ab04      	add	r3, sp, #16
   130ca:	18ed      	adds	r5, r5, r3
   130cc:	231b      	movs	r3, #27
   130ce:	a904      	add	r1, sp, #16
   130d0:	185b      	adds	r3, r3, r1
   130d2:	0019      	movs	r1, r3
   130d4:	002a      	movs	r2, r5
   130d6:	201e      	movs	r0, #30
   130d8:	47b0      	blx	r6
   130da:	0023      	movs	r3, r4
   130dc:	33ff      	adds	r3, #255	; 0xff
   130de:	7c5b      	ldrb	r3, [r3, #17]
   130e0:	079b      	lsls	r3, r3, #30
   130e2:	d508      	bpl.n	130f6 <LORAWAN_RxDone+0x212>
   130e4:	ab04      	add	r3, sp, #16
   130e6:	7edb      	ldrb	r3, [r3, #27]
   130e8:	a90f      	add	r1, sp, #60	; 0x3c
   130ea:	708b      	strb	r3, [r1, #2]
   130ec:	882b      	ldrh	r3, [r5, #0]
   130ee:	201e      	movs	r0, #30
   130f0:	800b      	strh	r3, [r1, #0]
   130f2:	4b4e      	ldr	r3, [pc, #312]	; (1322c <LORAWAN_RxDone+0x348>)
   130f4:	4798      	blx	r3
   130f6:	231b      	movs	r3, #27
   130f8:	aa04      	add	r2, sp, #16
   130fa:	189b      	adds	r3, r3, r2
   130fc:	7818      	ldrb	r0, [r3, #0]
   130fe:	2101      	movs	r1, #1
   13100:	4b4f      	ldr	r3, [pc, #316]	; (13240 <LORAWAN_RxDone+0x35c>)
   13102:	4798      	blx	r3
   13104:	2204      	movs	r2, #4
   13106:	347c      	adds	r4, #124	; 0x7c
   13108:	7863      	ldrb	r3, [r4, #1]
   1310a:	210b      	movs	r1, #11
   1310c:	4313      	orrs	r3, r2
   1310e:	7063      	strb	r3, [r4, #1]
   13110:	2001      	movs	r0, #1
   13112:	4b43      	ldr	r3, [pc, #268]	; (13220 <LORAWAN_RxDone+0x33c>)
   13114:	4798      	blx	r3
   13116:	9b07      	ldr	r3, [sp, #28]
   13118:	3301      	adds	r3, #1
   1311a:	b2db      	uxtb	r3, r3
   1311c:	9307      	str	r3, [sp, #28]
   1311e:	9b06      	ldr	r3, [sp, #24]
   13120:	3303      	adds	r3, #3
   13122:	9306      	str	r3, [sp, #24]
   13124:	9b07      	ldr	r3, [sp, #28]
   13126:	2b05      	cmp	r3, #5
   13128:	d18e      	bne.n	13048 <LORAWAN_RxDone+0x164>
   1312a:	2204      	movs	r2, #4
   1312c:	4b33      	ldr	r3, [pc, #204]	; (131fc <LORAWAN_RxDone+0x318>)
   1312e:	2001      	movs	r0, #1
   13130:	337c      	adds	r3, #124	; 0x7c
   13132:	7859      	ldrb	r1, [r3, #1]
   13134:	430a      	orrs	r2, r1
   13136:	705a      	strb	r2, [r3, #1]
   13138:	210b      	movs	r1, #11
   1313a:	4b39      	ldr	r3, [pc, #228]	; (13220 <LORAWAN_RxDone+0x33c>)
   1313c:	4798      	blx	r3
   1313e:	4d41      	ldr	r5, [pc, #260]	; (13244 <LORAWAN_RxDone+0x360>)
   13140:	1c7e      	adds	r6, r7, #1
   13142:	3704      	adds	r7, #4
   13144:	0028      	movs	r0, r5
   13146:	003a      	movs	r2, r7
   13148:	0031      	movs	r1, r6
   1314a:	4b3f      	ldr	r3, [pc, #252]	; (13248 <LORAWAN_RxDone+0x364>)
   1314c:	4798      	blx	r3
   1314e:	2302      	movs	r3, #2
   13150:	4c2a      	ldr	r4, [pc, #168]	; (131fc <LORAWAN_RxDone+0x318>)
   13152:	0028      	movs	r0, r5
   13154:	7563      	strb	r3, [r4, #21]
   13156:	4a2a      	ldr	r2, [pc, #168]	; (13200 <LORAWAN_RxDone+0x31c>)
   13158:	3b01      	subs	r3, #1
   1315a:	2100      	movs	r1, #0
   1315c:	4d3b      	ldr	r5, [pc, #236]	; (1324c <LORAWAN_RxDone+0x368>)
   1315e:	47a8      	blx	r5
   13160:	2800      	cmp	r0, #0
   13162:	d003      	beq.n	1316c <LORAWAN_RxDone+0x288>
   13164:	4b2a      	ldr	r3, [pc, #168]	; (13210 <LORAWAN_RxDone+0x32c>)
   13166:	4798      	blx	r3
   13168:	4b2a      	ldr	r3, [pc, #168]	; (13214 <LORAWAN_RxDone+0x330>)
   1316a:	4798      	blx	r3
   1316c:	2105      	movs	r1, #5
   1316e:	4b2c      	ldr	r3, [pc, #176]	; (13220 <LORAWAN_RxDone+0x33c>)
   13170:	2001      	movs	r0, #1
   13172:	4798      	blx	r3
   13174:	4d36      	ldr	r5, [pc, #216]	; (13250 <LORAWAN_RxDone+0x36c>)
   13176:	003a      	movs	r2, r7
   13178:	0028      	movs	r0, r5
   1317a:	0031      	movs	r1, r6
   1317c:	4b32      	ldr	r3, [pc, #200]	; (13248 <LORAWAN_RxDone+0x364>)
   1317e:	4798      	blx	r3
   13180:	2301      	movs	r3, #1
   13182:	0028      	movs	r0, r5
   13184:	7163      	strb	r3, [r4, #5]
   13186:	4a1e      	ldr	r2, [pc, #120]	; (13200 <LORAWAN_RxDone+0x31c>)
   13188:	18db      	adds	r3, r3, r3
   1318a:	2100      	movs	r1, #0
   1318c:	4d2f      	ldr	r5, [pc, #188]	; (1324c <LORAWAN_RxDone+0x368>)
   1318e:	47a8      	blx	r5
   13190:	2800      	cmp	r0, #0
   13192:	d003      	beq.n	1319c <LORAWAN_RxDone+0x2b8>
   13194:	4b1e      	ldr	r3, [pc, #120]	; (13210 <LORAWAN_RxDone+0x32c>)
   13196:	4798      	blx	r3
   13198:	4b1e      	ldr	r3, [pc, #120]	; (13214 <LORAWAN_RxDone+0x330>)
   1319a:	4798      	blx	r3
   1319c:	4b20      	ldr	r3, [pc, #128]	; (13220 <LORAWAN_RxDone+0x33c>)
   1319e:	2104      	movs	r1, #4
   131a0:	2001      	movs	r0, #1
   131a2:	4798      	blx	r3
   131a4:	4b2b      	ldr	r3, [pc, #172]	; (13254 <LORAWAN_RxDone+0x370>)
   131a6:	5ce3      	ldrb	r3, [r4, r3]
   131a8:	2b00      	cmp	r3, #0
   131aa:	d017      	beq.n	131dc <LORAWAN_RxDone+0x2f8>
   131ac:	492a      	ldr	r1, [pc, #168]	; (13258 <LORAWAN_RxDone+0x374>)
   131ae:	2002      	movs	r0, #2
   131b0:	4c2a      	ldr	r4, [pc, #168]	; (1325c <LORAWAN_RxDone+0x378>)
   131b2:	47a0      	blx	r4
   131b4:	2800      	cmp	r0, #0
   131b6:	d008      	beq.n	131ca <LORAWAN_RxDone+0x2e6>
   131b8:	4b15      	ldr	r3, [pc, #84]	; (13210 <LORAWAN_RxDone+0x32c>)
   131ba:	4798      	blx	r3
   131bc:	4b15      	ldr	r3, [pc, #84]	; (13214 <LORAWAN_RxDone+0x330>)
   131be:	4798      	blx	r3
   131c0:	2023      	movs	r0, #35	; 0x23
   131c2:	e6f3      	b.n	12fac <LORAWAN_RxDone+0xc8>
   131c4:	4b1e      	ldr	r3, [pc, #120]	; (13240 <LORAWAN_RxDone+0x35c>)
   131c6:	4798      	blx	r3
   131c8:	e7a5      	b.n	13116 <LORAWAN_RxDone+0x232>
   131ca:	4925      	ldr	r1, [pc, #148]	; (13260 <LORAWAN_RxDone+0x37c>)
   131cc:	2001      	movs	r0, #1
   131ce:	47a0      	blx	r4
   131d0:	2800      	cmp	r0, #0
   131d2:	d1f1      	bne.n	131b8 <LORAWAN_RxDone+0x2d4>
   131d4:	4b23      	ldr	r3, [pc, #140]	; (13264 <LORAWAN_RxDone+0x380>)
   131d6:	4798      	blx	r3
   131d8:	2008      	movs	r0, #8
   131da:	e6e7      	b.n	12fac <LORAWAN_RxDone+0xc8>
   131dc:	0020      	movs	r0, r4
   131de:	0021      	movs	r1, r4
   131e0:	2210      	movs	r2, #16
   131e2:	3115      	adds	r1, #21
   131e4:	4d09      	ldr	r5, [pc, #36]	; (1320c <LORAWAN_RxDone+0x328>)
   131e6:	3035      	adds	r0, #53	; 0x35
   131e8:	47a8      	blx	r5
   131ea:	0020      	movs	r0, r4
   131ec:	1d61      	adds	r1, r4, #5
   131ee:	2210      	movs	r2, #16
   131f0:	3025      	adds	r0, #37	; 0x25
   131f2:	47a8      	blx	r5
   131f4:	e7ee      	b.n	131d4 <LORAWAN_RxDone+0x2f0>
   131f6:	46c0      	nop			; (mov r8, r8)
   131f8:	20002bd8 	.word	0x20002bd8
   131fc:	20002b5c 	.word	0x20002b5c
   13200:	20002ba1 	.word	0x20002ba1
   13204:	20001110 	.word	0x20001110
   13208:	0000de05 	.word	0x0000de05
   1320c:	00019da5 	.word	0x00019da5
   13210:	000109a1 	.word	0x000109a1
   13214:	0001287d 	.word	0x0001287d
   13218:	0000dc99 	.word	0x0000dc99
   1321c:	0000f141 	.word	0x0000f141
   13220:	0000e0f9 	.word	0x0000e0f9
   13224:	0000fead 	.word	0x0000fead
   13228:	00010869 	.word	0x00010869
   1322c:	0000da45 	.word	0x0000da45
   13230:	0000d91d 	.word	0x0000d91d
   13234:	20002c3b 	.word	0x20002c3b
   13238:	0000d939 	.word	0x0000d939
   1323c:	00012a71 	.word	0x00012a71
   13240:	00012e95 	.word	0x00012e95
   13244:	20002b71 	.word	0x20002b71
   13248:	000101e5 	.word	0x000101e5
   1324c:	0000dd15 	.word	0x0000dd15
   13250:	20002b61 	.word	0x20002b61
   13254:	00000221 	.word	0x00000221
   13258:	20002b81 	.word	0x20002b81
   1325c:	0000dd5d 	.word	0x0000dd5d
   13260:	20002b91 	.word	0x20002b91
   13264:	000100f5 	.word	0x000100f5
   13268:	22bf      	movs	r2, #191	; 0xbf
   1326a:	3e60      	subs	r6, #96	; 0x60
   1326c:	4016      	ands	r6, r2
   1326e:	d000      	beq.n	13272 <LORAWAN_RxDone+0x38e>
   13270:	e2b2      	b.n	137d8 <LORAWAN_RxDone+0x8f4>
   13272:	2501      	movs	r5, #1
   13274:	422b      	tst	r3, r5
   13276:	d100      	bne.n	1327a <LORAWAN_RxDone+0x396>
   13278:	e2ae      	b.n	137d8 <LORAWAN_RxDone+0x8f4>
   1327a:	7922      	ldrb	r2, [r4, #4]
   1327c:	6823      	ldr	r3, [r4, #0]
   1327e:	0612      	lsls	r2, r2, #24
   13280:	0a1b      	lsrs	r3, r3, #8
   13282:	431a      	orrs	r2, r3
   13284:	0023      	movs	r3, r4
   13286:	33d8      	adds	r3, #216	; 0xd8
   13288:	701e      	strb	r6, [r3, #0]
   1328a:	9207      	str	r2, [sp, #28]
   1328c:	7882      	ldrb	r2, [r0, #2]
   1328e:	7843      	ldrb	r3, [r0, #1]
   13290:	0212      	lsls	r2, r2, #8
   13292:	431a      	orrs	r2, r3
   13294:	78c3      	ldrb	r3, [r0, #3]
   13296:	041b      	lsls	r3, r3, #16
   13298:	431a      	orrs	r2, r3
   1329a:	7903      	ldrb	r3, [r0, #4]
   1329c:	061b      	lsls	r3, r3, #24
   1329e:	4313      	orrs	r3, r2
   132a0:	9a07      	ldr	r2, [sp, #28]
   132a2:	429a      	cmp	r2, r3
   132a4:	d100      	bne.n	132a8 <LORAWAN_RxDone+0x3c4>
   132a6:	e2c8      	b.n	1383a <LORAWAN_RxDone+0x956>
   132a8:	ab04      	add	r3, sp, #16
   132aa:	3521      	adds	r5, #33	; 0x21
   132ac:	18ed      	adds	r5, r5, r3
   132ae:	7a02      	ldrb	r2, [r0, #8]
   132b0:	0949      	lsrs	r1, r1, #5
   132b2:	002b      	movs	r3, r5
   132b4:	4ed7      	ldr	r6, [pc, #860]	; (13614 <LORAWAN_RxDone+0x730>)
   132b6:	47b0      	blx	r6
   132b8:	2808      	cmp	r0, #8
   132ba:	d131      	bne.n	13320 <LORAWAN_RxDone+0x43c>
   132bc:	233c      	movs	r3, #60	; 0x3c
   132be:	7829      	ldrb	r1, [r5, #0]
   132c0:	434b      	muls	r3, r1
   132c2:	001d      	movs	r5, r3
   132c4:	3529      	adds	r5, #41	; 0x29
   132c6:	35ff      	adds	r5, #255	; 0xff
   132c8:	192d      	adds	r5, r5, r4
   132ca:	18e4      	adds	r4, r4, r3
   132cc:	0023      	movs	r3, r4
   132ce:	33fc      	adds	r3, #252	; 0xfc
   132d0:	6a98      	ldr	r0, [r3, #40]	; 0x28
   132d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   132d4:	9308      	str	r3, [sp, #32]
   132d6:	79fb      	ldrb	r3, [r7, #7]
   132d8:	79ba      	ldrb	r2, [r7, #6]
   132da:	021b      	lsls	r3, r3, #8
   132dc:	4313      	orrs	r3, r2
   132de:	0022      	movs	r2, r4
   132e0:	3249      	adds	r2, #73	; 0x49
   132e2:	32ff      	adds	r2, #255	; 0xff
   132e4:	8816      	ldrh	r6, [r2, #0]
   132e6:	429e      	cmp	r6, r3
   132e8:	d908      	bls.n	132fc <LORAWAN_RxDone+0x418>
   132ea:	344b      	adds	r4, #75	; 0x4b
   132ec:	34ff      	adds	r4, #255	; 0xff
   132ee:	8823      	ldrh	r3, [r4, #0]
   132f0:	3301      	adds	r3, #1
   132f2:	8023      	strh	r3, [r4, #0]
   132f4:	79fb      	ldrb	r3, [r7, #7]
   132f6:	79bc      	ldrb	r4, [r7, #6]
   132f8:	021b      	lsls	r3, r3, #8
   132fa:	4323      	orrs	r3, r4
   132fc:	8013      	strh	r3, [r2, #0]
   132fe:	9b06      	ldr	r3, [sp, #24]
   13300:	9000      	str	r0, [sp, #0]
   13302:	1f1a      	subs	r2, r3, #4
   13304:	233c      	movs	r3, #60	; 0x3c
   13306:	434b      	muls	r3, r1
   13308:	49c3      	ldr	r1, [pc, #780]	; (13618 <LORAWAN_RxDone+0x734>)
   1330a:	b2d2      	uxtb	r2, r2
   1330c:	18c9      	adds	r1, r1, r3
   1330e:	31fc      	adds	r1, #252	; 0xfc
   13310:	2349      	movs	r3, #73	; 0x49
   13312:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
   13314:	2001      	movs	r0, #1
   13316:	4cc1      	ldr	r4, [pc, #772]	; (1361c <LORAWAN_RxDone+0x738>)
   13318:	47a0      	blx	r4
   1331a:	2301      	movs	r3, #1
   1331c:	9307      	str	r3, [sp, #28]
   1331e:	e2a2      	b.n	13866 <LORAWAN_RxDone+0x982>
   13320:	220e      	movs	r2, #14
   13322:	4bbf      	ldr	r3, [pc, #764]	; (13620 <LORAWAN_RxDone+0x73c>)
   13324:	781b      	ldrb	r3, [r3, #0]
   13326:	4013      	ands	r3, r2
   13328:	2b0a      	cmp	r3, #10
   1332a:	d008      	beq.n	1333e <LORAWAN_RxDone+0x45a>
   1332c:	2b06      	cmp	r3, #6
   1332e:	d001      	beq.n	13334 <LORAWAN_RxDone+0x450>
   13330:	200a      	movs	r0, #10
   13332:	e63b      	b.n	12fac <LORAWAN_RxDone+0xc8>
   13334:	0023      	movs	r3, r4
   13336:	33f0      	adds	r3, #240	; 0xf0
   13338:	781b      	ldrb	r3, [r3, #0]
   1333a:	2b00      	cmp	r3, #0
   1333c:	d0f8      	beq.n	13330 <LORAWAN_RxDone+0x44c>
   1333e:	2220      	movs	r2, #32
   13340:	201e      	movs	r0, #30
   13342:	348c      	adds	r4, #140	; 0x8c
   13344:	7823      	ldrb	r3, [r4, #0]
   13346:	4393      	bics	r3, r2
   13348:	7023      	strb	r3, [r4, #0]
   1334a:	4bb6      	ldr	r3, [pc, #728]	; (13624 <LORAWAN_RxDone+0x740>)
   1334c:	e61b      	b.n	12f86 <LORAWAN_RxDone+0xa2>
   1334e:	0022      	movs	r2, r4
   13350:	2102      	movs	r1, #2
   13352:	e2a2      	b.n	1389a <LORAWAN_RxDone+0x9b6>
   13354:	9b08      	ldr	r3, [sp, #32]
   13356:	3408      	adds	r4, #8
   13358:	67e3      	str	r3, [r4, #124]	; 0x7c
   1335a:	e2e1      	b.n	13920 <LORAWAN_RxDone+0xa3c>
   1335c:	9b07      	ldr	r3, [sp, #28]
   1335e:	2b00      	cmp	r3, #0
   13360:	d00a      	beq.n	13378 <LORAWAN_RxDone+0x494>
   13362:	2322      	movs	r3, #34	; 0x22
   13364:	aa04      	add	r2, sp, #16
   13366:	189b      	adds	r3, r3, r2
   13368:	781b      	ldrb	r3, [r3, #0]
   1336a:	003a      	movs	r2, r7
   1336c:	9906      	ldr	r1, [sp, #24]
   1336e:	0038      	movs	r0, r7
   13370:	4cad      	ldr	r4, [pc, #692]	; (13628 <LORAWAN_RxDone+0x744>)
   13372:	47a0      	blx	r4
   13374:	2001      	movs	r0, #1
   13376:	e619      	b.n	12fac <LORAWAN_RxDone+0xc8>
   13378:	4ca7      	ldr	r4, [pc, #668]	; (13618 <LORAWAN_RxDone+0x734>)
   1337a:	466a      	mov	r2, sp
   1337c:	0023      	movs	r3, r4
   1337e:	7f12      	ldrb	r2, [r2, #28]
   13380:	33db      	adds	r3, #219	; 0xdb
   13382:	701a      	strb	r2, [r3, #0]
   13384:	797b      	ldrb	r3, [r7, #5]
   13386:	2b7f      	cmp	r3, #127	; 0x7f
   13388:	d909      	bls.n	1339e <LORAWAN_RxDone+0x4ba>
   1338a:	0022      	movs	r2, r4
   1338c:	2320      	movs	r3, #32
   1338e:	327c      	adds	r2, #124	; 0x7c
   13390:	7811      	ldrb	r1, [r2, #0]
   13392:	2001      	movs	r0, #1
   13394:	430b      	orrs	r3, r1
   13396:	7013      	strb	r3, [r2, #0]
   13398:	210b      	movs	r1, #11
   1339a:	4ba4      	ldr	r3, [pc, #656]	; (1362c <LORAWAN_RxDone+0x748>)
   1339c:	4798      	blx	r3
   1339e:	797b      	ldrb	r3, [r7, #5]
   133a0:	06db      	lsls	r3, r3, #27
   133a2:	d505      	bpl.n	133b0 <LORAWAN_RxDone+0x4cc>
   133a4:	0022      	movs	r2, r4
   133a6:	2308      	movs	r3, #8
   133a8:	328c      	adds	r2, #140	; 0x8c
   133aa:	7811      	ldrb	r1, [r2, #0]
   133ac:	430b      	orrs	r3, r1
   133ae:	7013      	strb	r3, [r2, #0]
   133b0:	797b      	ldrb	r3, [r7, #5]
   133b2:	065b      	lsls	r3, r3, #25
   133b4:	d505      	bpl.n	133c2 <LORAWAN_RxDone+0x4de>
   133b6:	0022      	movs	r2, r4
   133b8:	2310      	movs	r3, #16
   133ba:	328c      	adds	r2, #140	; 0x8c
   133bc:	7811      	ldrb	r1, [r2, #0]
   133be:	430b      	orrs	r3, r1
   133c0:	7013      	strb	r3, [r2, #0]
   133c2:	221f      	movs	r2, #31
   133c4:	783b      	ldrb	r3, [r7, #0]
   133c6:	4393      	bics	r3, r2
   133c8:	2ba0      	cmp	r3, #160	; 0xa0
   133ca:	d105      	bne.n	133d8 <LORAWAN_RxDone+0x4f4>
   133cc:	0022      	movs	r2, r4
   133ce:	328c      	adds	r2, #140	; 0x8c
   133d0:	7811      	ldrb	r1, [r2, #0]
   133d2:	3b9e      	subs	r3, #158	; 0x9e
   133d4:	430b      	orrs	r3, r1
   133d6:	7013      	strb	r3, [r2, #0]
   133d8:	7979      	ldrb	r1, [r7, #5]
   133da:	070b      	lsls	r3, r1, #28
   133dc:	d100      	bne.n	133e0 <LORAWAN_RxDone+0x4fc>
   133de:	e0da      	b.n	13596 <LORAWAN_RxDone+0x6b2>
   133e0:	0709      	lsls	r1, r1, #28
   133e2:	0f09      	lsrs	r1, r1, #28
   133e4:	187b      	adds	r3, r7, r1
   133e6:	7a1b      	ldrb	r3, [r3, #8]
   133e8:	2b00      	cmp	r3, #0
   133ea:	d100      	bne.n	133ee <LORAWAN_RxDone+0x50a>
   133ec:	e0aa      	b.n	13544 <LORAWAN_RxDone+0x660>
   133ee:	0038      	movs	r0, r7
   133f0:	4b8f      	ldr	r3, [pc, #572]	; (13630 <LORAWAN_RxDone+0x74c>)
   133f2:	3008      	adds	r0, #8
   133f4:	4798      	blx	r3
   133f6:	2301      	movs	r3, #1
   133f8:	0006      	movs	r6, r0
   133fa:	9307      	str	r3, [sp, #28]
   133fc:	7978      	ldrb	r0, [r7, #5]
   133fe:	9906      	ldr	r1, [sp, #24]
   13400:	0702      	lsls	r2, r0, #28
   13402:	0f12      	lsrs	r2, r2, #28
   13404:	0013      	movs	r3, r2
   13406:	330c      	adds	r3, #12
   13408:	4299      	cmp	r1, r3
   1340a:	d100      	bne.n	1340e <LORAWAN_RxDone+0x52a>
   1340c:	e0fa      	b.n	13604 <LORAWAN_RxDone+0x720>
   1340e:	7833      	ldrb	r3, [r6, #0]
   13410:	1a89      	subs	r1, r1, r2
   13412:	b2c9      	uxtb	r1, r1
   13414:	9308      	str	r3, [sp, #32]
   13416:	000b      	movs	r3, r1
   13418:	3219      	adds	r2, #25
   1341a:	3b0c      	subs	r3, #12
   1341c:	4694      	mov	ip, r2
   1341e:	9a08      	ldr	r2, [sp, #32]
   13420:	b2db      	uxtb	r3, r3
   13422:	9306      	str	r3, [sp, #24]
   13424:	1c75      	adds	r5, r6, #1
   13426:	4b7c      	ldr	r3, [pc, #496]	; (13618 <LORAWAN_RxDone+0x734>)
   13428:	2a00      	cmp	r2, #0
   1342a:	d100      	bne.n	1342e <LORAWAN_RxDone+0x54a>
   1342c:	e0b6      	b.n	1359c <LORAWAN_RxDone+0x6b8>
   1342e:	681a      	ldr	r2, [r3, #0]
   13430:	0018      	movs	r0, r3
   13432:	791b      	ldrb	r3, [r3, #4]
   13434:	0a14      	lsrs	r4, r2, #8
   13436:	061b      	lsls	r3, r3, #24
   13438:	4323      	orrs	r3, r4
   1343a:	9304      	str	r3, [sp, #16]
   1343c:	4b7d      	ldr	r3, [pc, #500]	; (13634 <LORAWAN_RxDone+0x750>)
   1343e:	2201      	movs	r2, #1
   13440:	9303      	str	r3, [sp, #12]
   13442:	4663      	mov	r3, ip
   13444:	9302      	str	r3, [sp, #8]
   13446:	4b7c      	ldr	r3, [pc, #496]	; (13638 <LORAWAN_RxDone+0x754>)
   13448:	3008      	adds	r0, #8
   1344a:	390d      	subs	r1, #13
   1344c:	9201      	str	r2, [sp, #4]
   1344e:	9300      	str	r3, [sp, #0]
   13450:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
   13452:	b2c9      	uxtb	r1, r1
   13454:	0028      	movs	r0, r5
   13456:	4c79      	ldr	r4, [pc, #484]	; (1363c <LORAWAN_RxDone+0x758>)
   13458:	47a0      	blx	r4
   1345a:	2800      	cmp	r0, #0
   1345c:	d004      	beq.n	13468 <LORAWAN_RxDone+0x584>
   1345e:	4b78      	ldr	r3, [pc, #480]	; (13640 <LORAWAN_RxDone+0x75c>)
   13460:	4798      	blx	r3
   13462:	201f      	movs	r0, #31
   13464:	4b6f      	ldr	r3, [pc, #444]	; (13624 <LORAWAN_RxDone+0x740>)
   13466:	4798      	blx	r3
   13468:	4c6b      	ldr	r4, [pc, #428]	; (13618 <LORAWAN_RxDone+0x734>)
   1346a:	2300      	movs	r3, #0
   1346c:	0022      	movs	r2, r4
   1346e:	32c2      	adds	r2, #194	; 0xc2
   13470:	8013      	strh	r3, [r2, #0]
   13472:	0022      	movs	r2, r4
   13474:	32ed      	adds	r2, #237	; 0xed
   13476:	7013      	strb	r3, [r2, #0]
   13478:	0022      	movs	r2, r4
   1347a:	2110      	movs	r1, #16
   1347c:	328c      	adds	r2, #140	; 0x8c
   1347e:	7813      	ldrb	r3, [r2, #0]
   13480:	438b      	bics	r3, r1
   13482:	7013      	strb	r3, [r2, #0]
   13484:	0023      	movs	r3, r4
   13486:	2201      	movs	r2, #1
   13488:	337c      	adds	r3, #124	; 0x7c
   1348a:	7859      	ldrb	r1, [r3, #1]
   1348c:	430a      	orrs	r2, r1
   1348e:	705a      	strb	r2, [r3, #1]
   13490:	220e      	movs	r2, #14
   13492:	781b      	ldrb	r3, [r3, #0]
   13494:	4013      	ands	r3, r2
   13496:	2b06      	cmp	r3, #6
   13498:	d109      	bne.n	134ae <LORAWAN_RxDone+0x5ca>
   1349a:	0023      	movs	r3, r4
   1349c:	33f4      	adds	r3, #244	; 0xf4
   1349e:	781b      	ldrb	r3, [r3, #0]
   134a0:	2b01      	cmp	r3, #1
   134a2:	d104      	bne.n	134ae <LORAWAN_RxDone+0x5ca>
   134a4:	0023      	movs	r3, r4
   134a6:	33e5      	adds	r3, #229	; 0xe5
   134a8:	7818      	ldrb	r0, [r3, #0]
   134aa:	4b66      	ldr	r3, [pc, #408]	; (13644 <LORAWAN_RxDone+0x760>)
   134ac:	4798      	blx	r3
   134ae:	0025      	movs	r5, r4
   134b0:	2201      	movs	r2, #1
   134b2:	358c      	adds	r5, #140	; 0x8c
   134b4:	782b      	ldrb	r3, [r5, #0]
   134b6:	4213      	tst	r3, r2
   134b8:	d100      	bne.n	134bc <LORAWAN_RxDone+0x5d8>
   134ba:	e10f      	b.n	136dc <LORAWAN_RxDone+0x7f8>
   134bc:	797b      	ldrb	r3, [r7, #5]
   134be:	321f      	adds	r2, #31
   134c0:	4213      	tst	r3, r2
   134c2:	d100      	bne.n	134c6 <LORAWAN_RxDone+0x5e2>
   134c4:	e0f0      	b.n	136a8 <LORAWAN_RxDone+0x7c4>
   134c6:	4b60      	ldr	r3, [pc, #384]	; (13648 <LORAWAN_RxDone+0x764>)
   134c8:	4798      	blx	r3
   134ca:	0023      	movs	r3, r4
   134cc:	2101      	movs	r1, #1
   134ce:	337c      	adds	r3, #124	; 0x7c
   134d0:	785a      	ldrb	r2, [r3, #1]
   134d2:	438a      	bics	r2, r1
   134d4:	705a      	strb	r2, [r3, #1]
   134d6:	9a08      	ldr	r2, [sp, #32]
   134d8:	2a00      	cmp	r2, #0
   134da:	d100      	bne.n	134de <LORAWAN_RxDone+0x5fa>
   134dc:	e0c4      	b.n	13668 <LORAWAN_RxDone+0x784>
   134de:	9a06      	ldr	r2, [sp, #24]
   134e0:	0031      	movs	r1, r6
   134e2:	0038      	movs	r0, r7
   134e4:	4b59      	ldr	r3, [pc, #356]	; (1364c <LORAWAN_RxDone+0x768>)
   134e6:	4798      	blx	r3
   134e8:	4b4d      	ldr	r3, [pc, #308]	; (13620 <LORAWAN_RxDone+0x73c>)
   134ea:	4d4b      	ldr	r5, [pc, #300]	; (13618 <LORAWAN_RxDone+0x734>)
   134ec:	781b      	ldrb	r3, [r3, #0]
   134ee:	06db      	lsls	r3, r3, #27
   134f0:	d400      	bmi.n	134f4 <LORAWAN_RxDone+0x610>
   134f2:	e168      	b.n	137c6 <LORAWAN_RxDone+0x8e2>
   134f4:	2220      	movs	r2, #32
   134f6:	4b56      	ldr	r3, [pc, #344]	; (13650 <LORAWAN_RxDone+0x76c>)
   134f8:	781b      	ldrb	r3, [r3, #0]
   134fa:	401a      	ands	r2, r3
   134fc:	9206      	str	r2, [sp, #24]
   134fe:	d000      	beq.n	13502 <LORAWAN_RxDone+0x61e>
   13500:	e161      	b.n	137c6 <LORAWAN_RxDone+0x8e2>
   13502:	320a      	adds	r2, #10
   13504:	4213      	tst	r3, r2
   13506:	d100      	bne.n	1350a <LORAWAN_RxDone+0x626>
   13508:	e15d      	b.n	137c6 <LORAWAN_RxDone+0x8e2>
   1350a:	002b      	movs	r3, r5
   1350c:	33ec      	adds	r3, #236	; 0xec
   1350e:	781b      	ldrb	r3, [r3, #0]
   13510:	a90f      	add	r1, sp, #60	; 0x3c
   13512:	704b      	strb	r3, [r1, #1]
   13514:	002e      	movs	r6, r5
   13516:	2301      	movs	r3, #1
   13518:	36df      	adds	r6, #223	; 0xdf
   1351a:	700b      	strb	r3, [r1, #0]
   1351c:	7833      	ldrb	r3, [r6, #0]
   1351e:	aa0e      	add	r2, sp, #56	; 0x38
   13520:	2030      	movs	r0, #48	; 0x30
   13522:	4f4c      	ldr	r7, [pc, #304]	; (13654 <LORAWAN_RxDone+0x770>)
   13524:	708b      	strb	r3, [r1, #2]
   13526:	47b8      	blx	r7
   13528:	9007      	str	r0, [sp, #28]
   1352a:	2808      	cmp	r0, #8
   1352c:	d000      	beq.n	13530 <LORAWAN_RxDone+0x64c>
   1352e:	e103      	b.n	13738 <LORAWAN_RxDone+0x854>
   13530:	4b49      	ldr	r3, [pc, #292]	; (13658 <LORAWAN_RxDone+0x774>)
   13532:	9806      	ldr	r0, [sp, #24]
   13534:	4798      	blx	r3
   13536:	4b46      	ldr	r3, [pc, #280]	; (13650 <LORAWAN_RxDone+0x76c>)
   13538:	9a07      	ldr	r2, [sp, #28]
   1353a:	781b      	ldrb	r3, [r3, #0]
   1353c:	4393      	bics	r3, r2
   1353e:	4a44      	ldr	r2, [pc, #272]	; (13650 <LORAWAN_RxDone+0x76c>)
   13540:	7013      	strb	r3, [r2, #0]
   13542:	e717      	b.n	13374 <LORAWAN_RxDone+0x490>
   13544:	0023      	movs	r3, r4
   13546:	33f4      	adds	r3, #244	; 0xf4
   13548:	781b      	ldrb	r3, [r3, #0]
   1354a:	2b01      	cmp	r3, #1
   1354c:	d108      	bne.n	13560 <LORAWAN_RxDone+0x67c>
   1354e:	0023      	movs	r3, r4
   13550:	220e      	movs	r2, #14
   13552:	337c      	adds	r3, #124	; 0x7c
   13554:	781b      	ldrb	r3, [r3, #0]
   13556:	4013      	ands	r3, r2
   13558:	2b06      	cmp	r3, #6
   1355a:	d101      	bne.n	13560 <LORAWAN_RxDone+0x67c>
   1355c:	4b3f      	ldr	r3, [pc, #252]	; (1365c <LORAWAN_RxDone+0x778>)
   1355e:	4798      	blx	r3
   13560:	493f      	ldr	r1, [pc, #252]	; (13660 <LORAWAN_RxDone+0x77c>)
   13562:	784a      	ldrb	r2, [r1, #1]
   13564:	780b      	ldrb	r3, [r1, #0]
   13566:	0212      	lsls	r2, r2, #8
   13568:	431a      	orrs	r2, r3
   1356a:	788b      	ldrb	r3, [r1, #2]
   1356c:	041b      	lsls	r3, r3, #16
   1356e:	431a      	orrs	r2, r3
   13570:	78cb      	ldrb	r3, [r1, #3]
   13572:	061b      	lsls	r3, r3, #24
   13574:	4313      	orrs	r3, r2
   13576:	d008      	beq.n	1358a <LORAWAN_RxDone+0x6a6>
   13578:	0022      	movs	r2, r4
   1357a:	2120      	movs	r1, #32
   1357c:	328c      	adds	r2, #140	; 0x8c
   1357e:	7813      	ldrb	r3, [r2, #0]
   13580:	201e      	movs	r0, #30
   13582:	438b      	bics	r3, r1
   13584:	7013      	strb	r3, [r2, #0]
   13586:	4b27      	ldr	r3, [pc, #156]	; (13624 <LORAWAN_RxDone+0x740>)
   13588:	4798      	blx	r3
   1358a:	2300      	movs	r3, #0
   1358c:	34d8      	adds	r4, #216	; 0xd8
   1358e:	7023      	strb	r3, [r4, #0]
   13590:	4b2b      	ldr	r3, [pc, #172]	; (13640 <LORAWAN_RxDone+0x75c>)
   13592:	4798      	blx	r3
   13594:	e6ee      	b.n	13374 <LORAWAN_RxDone+0x490>
   13596:	003e      	movs	r6, r7
   13598:	3608      	adds	r6, #8
   1359a:	e72f      	b.n	133fc <LORAWAN_RxDone+0x518>
   1359c:	9a06      	ldr	r2, [sp, #24]
   1359e:	2a00      	cmp	r2, #0
   135a0:	d034      	beq.n	1360c <LORAWAN_RxDone+0x728>
   135a2:	0702      	lsls	r2, r0, #28
   135a4:	d128      	bne.n	135f8 <LORAWAN_RxDone+0x714>
   135a6:	390d      	subs	r1, #13
   135a8:	681a      	ldr	r2, [r3, #0]
   135aa:	b2cc      	uxtb	r4, r1
   135ac:	0019      	movs	r1, r3
   135ae:	791b      	ldrb	r3, [r3, #4]
   135b0:	0a10      	lsrs	r0, r2, #8
   135b2:	061b      	lsls	r3, r3, #24
   135b4:	4303      	orrs	r3, r0
   135b6:	9304      	str	r3, [sp, #16]
   135b8:	4b1e      	ldr	r3, [pc, #120]	; (13634 <LORAWAN_RxDone+0x750>)
   135ba:	3108      	adds	r1, #8
   135bc:	9303      	str	r3, [sp, #12]
   135be:	4663      	mov	r3, ip
   135c0:	9302      	str	r3, [sp, #8]
   135c2:	2302      	movs	r3, #2
   135c4:	9301      	str	r3, [sp, #4]
   135c6:	4b27      	ldr	r3, [pc, #156]	; (13664 <LORAWAN_RxDone+0x780>)
   135c8:	2201      	movs	r2, #1
   135ca:	9300      	str	r3, [sp, #0]
   135cc:	6fcb      	ldr	r3, [r1, #124]	; 0x7c
   135ce:	0028      	movs	r0, r5
   135d0:	0021      	movs	r1, r4
   135d2:	4e1a      	ldr	r6, [pc, #104]	; (1363c <LORAWAN_RxDone+0x758>)
   135d4:	47b0      	blx	r6
   135d6:	2800      	cmp	r0, #0
   135d8:	d004      	beq.n	135e4 <LORAWAN_RxDone+0x700>
   135da:	4b19      	ldr	r3, [pc, #100]	; (13640 <LORAWAN_RxDone+0x75c>)
   135dc:	4798      	blx	r3
   135de:	201f      	movs	r0, #31
   135e0:	4b10      	ldr	r3, [pc, #64]	; (13624 <LORAWAN_RxDone+0x740>)
   135e2:	4798      	blx	r3
   135e4:	4b12      	ldr	r3, [pc, #72]	; (13630 <LORAWAN_RxDone+0x74c>)
   135e6:	0021      	movs	r1, r4
   135e8:	0028      	movs	r0, r5
   135ea:	4798      	blx	r3
   135ec:	2300      	movs	r3, #0
   135ee:	9306      	str	r3, [sp, #24]
   135f0:	3301      	adds	r3, #1
   135f2:	9307      	str	r3, [sp, #28]
   135f4:	2600      	movs	r6, #0
   135f6:	e737      	b.n	13468 <LORAWAN_RxDone+0x584>
   135f8:	001a      	movs	r2, r3
   135fa:	32f4      	adds	r2, #244	; 0xf4
   135fc:	7812      	ldrb	r2, [r2, #0]
   135fe:	2a01      	cmp	r2, #1
   13600:	d1ae      	bne.n	13560 <LORAWAN_RxDone+0x67c>
   13602:	e7a5      	b.n	13550 <LORAWAN_RxDone+0x66c>
   13604:	2600      	movs	r6, #0
   13606:	9608      	str	r6, [sp, #32]
   13608:	9606      	str	r6, [sp, #24]
   1360a:	e72d      	b.n	13468 <LORAWAN_RxDone+0x584>
   1360c:	9b06      	ldr	r3, [sp, #24]
   1360e:	9308      	str	r3, [sp, #32]
   13610:	001e      	movs	r6, r3
   13612:	e729      	b.n	13468 <LORAWAN_RxDone+0x584>
   13614:	000144c9 	.word	0x000144c9
   13618:	20002b5c 	.word	0x20002b5c
   1361c:	00010221 	.word	0x00010221
   13620:	20002bd8 	.word	0x20002bd8
   13624:	000114a9 	.word	0x000114a9
   13628:	0001453d 	.word	0x0001453d
   1362c:	0000e0f9 	.word	0x0000e0f9
   13630:	00012c2d 	.word	0x00012c2d
   13634:	20002eac 	.word	0x20002eac
   13638:	20002b91 	.word	0x20002b91
   1363c:	000113e9 	.word	0x000113e9
   13640:	0001287d 	.word	0x0001287d
   13644:	0000f141 	.word	0x0000f141
   13648:	0001094d 	.word	0x0001094d
   1364c:	00011899 	.word	0x00011899
   13650:	20002be8 	.word	0x20002be8
   13654:	0000d91d 	.word	0x0000d91d
   13658:	00010561 	.word	0x00010561
   1365c:	000102b9 	.word	0x000102b9
   13660:	20002ea4 	.word	0x20002ea4
   13664:	20002b81 	.word	0x20002b81
   13668:	2120      	movs	r1, #32
   1366a:	782a      	ldrb	r2, [r5, #0]
   1366c:	438a      	bics	r2, r1
   1366e:	702a      	strb	r2, [r5, #0]
   13670:	0022      	movs	r2, r4
   13672:	32f4      	adds	r2, #244	; 0xf4
   13674:	7812      	ldrb	r2, [r2, #0]
   13676:	2a01      	cmp	r2, #1
   13678:	d10e      	bne.n	13698 <LORAWAN_RxDone+0x7b4>
   1367a:	781a      	ldrb	r2, [r3, #0]
   1367c:	3912      	subs	r1, #18
   1367e:	438a      	bics	r2, r1
   13680:	701a      	strb	r2, [r3, #0]
   13682:	2385      	movs	r3, #133	; 0x85
   13684:	4aa7      	ldr	r2, [pc, #668]	; (13924 <LORAWAN_RxDone+0xa40>)
   13686:	009b      	lsls	r3, r3, #2
   13688:	5cd3      	ldrb	r3, [r2, r3]
   1368a:	2b00      	cmp	r3, #0
   1368c:	d000      	beq.n	13690 <LORAWAN_RxDone+0x7ac>
   1368e:	e72b      	b.n	134e8 <LORAWAN_RxDone+0x604>
   13690:	2008      	movs	r0, #8
   13692:	4ba5      	ldr	r3, [pc, #660]	; (13928 <LORAWAN_RxDone+0xa44>)
   13694:	4798      	blx	r3
   13696:	e727      	b.n	134e8 <LORAWAN_RxDone+0x604>
   13698:	2a04      	cmp	r2, #4
   1369a:	d1f2      	bne.n	13682 <LORAWAN_RxDone+0x79e>
   1369c:	0023      	movs	r3, r4
   1369e:	33e8      	adds	r3, #232	; 0xe8
   136a0:	7818      	ldrb	r0, [r3, #0]
   136a2:	4ba2      	ldr	r3, [pc, #648]	; (1392c <LORAWAN_RxDone+0xa48>)
   136a4:	4798      	blx	r3
   136a6:	e7ec      	b.n	13682 <LORAWAN_RxDone+0x79e>
   136a8:	9b07      	ldr	r3, [sp, #28]
   136aa:	2b00      	cmp	r3, #0
   136ac:	d013      	beq.n	136d6 <LORAWAN_RxDone+0x7f2>
   136ae:	0023      	movs	r3, r4
   136b0:	33f4      	adds	r3, #244	; 0xf4
   136b2:	781e      	ldrb	r6, [r3, #0]
   136b4:	2e01      	cmp	r6, #1
   136b6:	d10e      	bne.n	136d6 <LORAWAN_RxDone+0x7f2>
   136b8:	4b9d      	ldr	r3, [pc, #628]	; (13930 <LORAWAN_RxDone+0xa4c>)
   136ba:	4798      	blx	r3
   136bc:	0022      	movs	r2, r4
   136be:	327c      	adds	r2, #124	; 0x7c
   136c0:	7853      	ldrb	r3, [r2, #1]
   136c2:	43b3      	bics	r3, r6
   136c4:	7053      	strb	r3, [r2, #1]
   136c6:	2220      	movs	r2, #32
   136c8:	782b      	ldrb	r3, [r5, #0]
   136ca:	4393      	bics	r3, r2
   136cc:	702b      	strb	r3, [r5, #0]
   136ce:	2385      	movs	r3, #133	; 0x85
   136d0:	009b      	lsls	r3, r3, #2
   136d2:	5ce3      	ldrb	r3, [r4, r3]
   136d4:	e7d9      	b.n	1368a <LORAWAN_RxDone+0x7a6>
   136d6:	4b97      	ldr	r3, [pc, #604]	; (13934 <LORAWAN_RxDone+0xa50>)
   136d8:	4798      	blx	r3
   136da:	e705      	b.n	134e8 <LORAWAN_RxDone+0x604>
   136dc:	9a08      	ldr	r2, [sp, #32]
   136de:	2a00      	cmp	r2, #0
   136e0:	d00b      	beq.n	136fa <LORAWAN_RxDone+0x816>
   136e2:	9a06      	ldr	r2, [sp, #24]
   136e4:	0031      	movs	r1, r6
   136e6:	0038      	movs	r0, r7
   136e8:	4b93      	ldr	r3, [pc, #588]	; (13938 <LORAWAN_RxDone+0xa54>)
   136ea:	4798      	blx	r3
   136ec:	0022      	movs	r2, r4
   136ee:	2101      	movs	r1, #1
   136f0:	327c      	adds	r2, #124	; 0x7c
   136f2:	7853      	ldrb	r3, [r2, #1]
   136f4:	438b      	bics	r3, r1
   136f6:	7053      	strb	r3, [r2, #1]
   136f8:	e6f6      	b.n	134e8 <LORAWAN_RxDone+0x604>
   136fa:	2220      	movs	r2, #32
   136fc:	4393      	bics	r3, r2
   136fe:	702b      	strb	r3, [r5, #0]
   13700:	0023      	movs	r3, r4
   13702:	33f4      	adds	r3, #244	; 0xf4
   13704:	781b      	ldrb	r3, [r3, #0]
   13706:	2b01      	cmp	r3, #1
   13708:	d10e      	bne.n	13728 <LORAWAN_RxDone+0x844>
   1370a:	0022      	movs	r2, r4
   1370c:	210e      	movs	r1, #14
   1370e:	327c      	adds	r2, #124	; 0x7c
   13710:	7813      	ldrb	r3, [r2, #0]
   13712:	438b      	bics	r3, r1
   13714:	7013      	strb	r3, [r2, #0]
   13716:	2385      	movs	r3, #133	; 0x85
   13718:	009b      	lsls	r3, r3, #2
   1371a:	5ce3      	ldrb	r3, [r4, r3]
   1371c:	2b00      	cmp	r3, #0
   1371e:	d1e5      	bne.n	136ec <LORAWAN_RxDone+0x808>
   13720:	2008      	movs	r0, #8
   13722:	4b81      	ldr	r3, [pc, #516]	; (13928 <LORAWAN_RxDone+0xa44>)
   13724:	4798      	blx	r3
   13726:	e7e1      	b.n	136ec <LORAWAN_RxDone+0x808>
   13728:	2b04      	cmp	r3, #4
   1372a:	d1f4      	bne.n	13716 <LORAWAN_RxDone+0x832>
   1372c:	0023      	movs	r3, r4
   1372e:	33e8      	adds	r3, #232	; 0xe8
   13730:	7818      	ldrb	r0, [r3, #0]
   13732:	4b7e      	ldr	r3, [pc, #504]	; (1392c <LORAWAN_RxDone+0xa48>)
   13734:	4798      	blx	r3
   13736:	e7ee      	b.n	13716 <LORAWAN_RxDone+0x832>
   13738:	35ff      	adds	r5, #255	; 0xff
   1373a:	7c6b      	ldrb	r3, [r5, #17]
   1373c:	079a      	lsls	r2, r3, #30
   1373e:	d520      	bpl.n	13782 <LORAWAN_RxDone+0x89e>
   13740:	aa10      	add	r2, sp, #64	; 0x40
   13742:	0031      	movs	r1, r6
   13744:	2026      	movs	r0, #38	; 0x26
   13746:	47b8      	blx	r7
   13748:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1374a:	1c5a      	adds	r2, r3, #1
   1374c:	d001      	beq.n	13752 <LORAWAN_RxDone+0x86e>
   1374e:	3314      	adds	r3, #20
   13750:	9310      	str	r3, [sp, #64]	; 0x40
   13752:	0021      	movs	r1, r4
   13754:	220e      	movs	r2, #14
   13756:	317c      	adds	r1, #124	; 0x7c
   13758:	780b      	ldrb	r3, [r1, #0]
   1375a:	4393      	bics	r3, r2
   1375c:	001a      	movs	r2, r3
   1375e:	230c      	movs	r3, #12
   13760:	4313      	orrs	r3, r2
   13762:	700b      	strb	r3, [r1, #0]
   13764:	4b75      	ldr	r3, [pc, #468]	; (1393c <LORAWAN_RxDone+0xa58>)
   13766:	9a10      	ldr	r2, [sp, #64]	; 0x40
   13768:	5ce3      	ldrb	r3, [r4, r3]
   1376a:	21fa      	movs	r1, #250	; 0xfa
   1376c:	1ad3      	subs	r3, r2, r3
   1376e:	2200      	movs	r2, #0
   13770:	0089      	lsls	r1, r1, #2
   13772:	4359      	muls	r1, r3
   13774:	34e6      	adds	r4, #230	; 0xe6
   13776:	4b72      	ldr	r3, [pc, #456]	; (13940 <LORAWAN_RxDone+0xa5c>)
   13778:	7820      	ldrb	r0, [r4, #0]
   1377a:	9200      	str	r2, [sp, #0]
   1377c:	4c71      	ldr	r4, [pc, #452]	; (13944 <LORAWAN_RxDone+0xa60>)
   1377e:	47a0      	blx	r4
   13780:	e5f8      	b.n	13374 <LORAWAN_RxDone+0x490>
   13782:	075b      	lsls	r3, r3, #29
   13784:	d400      	bmi.n	13788 <LORAWAN_RxDone+0x8a4>
   13786:	e5f5      	b.n	13374 <LORAWAN_RxDone+0x490>
   13788:	aa10      	add	r2, sp, #64	; 0x40
   1378a:	0031      	movs	r1, r6
   1378c:	2033      	movs	r0, #51	; 0x33
   1378e:	47b8      	blx	r7
   13790:	220e      	movs	r2, #14
   13792:	4b6d      	ldr	r3, [pc, #436]	; (13948 <LORAWAN_RxDone+0xa64>)
   13794:	781b      	ldrb	r3, [r3, #0]
   13796:	4393      	bics	r3, r2
   13798:	001a      	movs	r2, r3
   1379a:	230c      	movs	r3, #12
   1379c:	4313      	orrs	r3, r2
   1379e:	4a6a      	ldr	r2, [pc, #424]	; (13948 <LORAWAN_RxDone+0xa64>)
   137a0:	7013      	strb	r3, [r2, #0]
   137a2:	9b10      	ldr	r3, [sp, #64]	; 0x40
   137a4:	1c5a      	adds	r2, r3, #1
   137a6:	d001      	beq.n	137ac <LORAWAN_RxDone+0x8c8>
   137a8:	3301      	adds	r3, #1
   137aa:	9310      	str	r3, [sp, #64]	; 0x40
   137ac:	4b63      	ldr	r3, [pc, #396]	; (1393c <LORAWAN_RxDone+0xa58>)
   137ae:	9a10      	ldr	r2, [sp, #64]	; 0x40
   137b0:	5ce3      	ldrb	r3, [r4, r3]
   137b2:	21fa      	movs	r1, #250	; 0xfa
   137b4:	1ad3      	subs	r3, r2, r3
   137b6:	2200      	movs	r2, #0
   137b8:	0089      	lsls	r1, r1, #2
   137ba:	34e9      	adds	r4, #233	; 0xe9
   137bc:	4359      	muls	r1, r3
   137be:	7820      	ldrb	r0, [r4, #0]
   137c0:	4b62      	ldr	r3, [pc, #392]	; (1394c <LORAWAN_RxDone+0xa68>)
   137c2:	9200      	str	r2, [sp, #0]
   137c4:	e7da      	b.n	1377c <LORAWAN_RxDone+0x898>
   137c6:	35f4      	adds	r5, #244	; 0xf4
   137c8:	782b      	ldrb	r3, [r5, #0]
   137ca:	2b04      	cmp	r3, #4
   137cc:	d000      	beq.n	137d0 <LORAWAN_RxDone+0x8ec>
   137ce:	e5d1      	b.n	13374 <LORAWAN_RxDone+0x490>
   137d0:	0038      	movs	r0, r7
   137d2:	4b5f      	ldr	r3, [pc, #380]	; (13950 <LORAWAN_RxDone+0xa6c>)
   137d4:	4798      	blx	r3
   137d6:	e5cd      	b.n	13374 <LORAWAN_RxDone+0x490>
   137d8:	220e      	movs	r2, #14
   137da:	4013      	ands	r3, r2
   137dc:	2b0a      	cmp	r3, #10
   137de:	d008      	beq.n	137f2 <LORAWAN_RxDone+0x90e>
   137e0:	2b06      	cmp	r3, #6
   137e2:	d000      	beq.n	137e6 <LORAWAN_RxDone+0x902>
   137e4:	e5a4      	b.n	13330 <LORAWAN_RxDone+0x44c>
   137e6:	0023      	movs	r3, r4
   137e8:	33f0      	adds	r3, #240	; 0xf0
   137ea:	781b      	ldrb	r3, [r3, #0]
   137ec:	2b00      	cmp	r3, #0
   137ee:	d100      	bne.n	137f2 <LORAWAN_RxDone+0x90e>
   137f0:	e59e      	b.n	13330 <LORAWAN_RxDone+0x44c>
   137f2:	2220      	movs	r2, #32
   137f4:	348c      	adds	r4, #140	; 0x8c
   137f6:	7823      	ldrb	r3, [r4, #0]
   137f8:	2019      	movs	r0, #25
   137fa:	4393      	bics	r3, r2
   137fc:	7023      	strb	r3, [r4, #0]
   137fe:	e5a4      	b.n	1334a <LORAWAN_RxDone+0x466>
   13800:	4954      	ldr	r1, [pc, #336]	; (13954 <LORAWAN_RxDone+0xa70>)
   13802:	784a      	ldrb	r2, [r1, #1]
   13804:	780b      	ldrb	r3, [r1, #0]
   13806:	0212      	lsls	r2, r2, #8
   13808:	431a      	orrs	r2, r3
   1380a:	788b      	ldrb	r3, [r1, #2]
   1380c:	041b      	lsls	r3, r3, #16
   1380e:	431a      	orrs	r2, r3
   13810:	78cb      	ldrb	r3, [r1, #3]
   13812:	061b      	lsls	r3, r3, #24
   13814:	4313      	orrs	r3, r2
   13816:	d100      	bne.n	1381a <LORAWAN_RxDone+0x936>
   13818:	e5ac      	b.n	13374 <LORAWAN_RxDone+0x490>
   1381a:	4b4f      	ldr	r3, [pc, #316]	; (13958 <LORAWAN_RxDone+0xa74>)
   1381c:	4c4f      	ldr	r4, [pc, #316]	; (1395c <LORAWAN_RxDone+0xa78>)
   1381e:	781b      	ldrb	r3, [r3, #0]
   13820:	2b10      	cmp	r3, #16
   13822:	d105      	bne.n	13830 <LORAWAN_RxDone+0x94c>
   13824:	0001      	movs	r1, r0
   13826:	2000      	movs	r0, #0
   13828:	9a06      	ldr	r2, [sp, #24]
   1382a:	3b0c      	subs	r3, #12
   1382c:	47a0      	blx	r4
   1382e:	e5a1      	b.n	13374 <LORAWAN_RxDone+0x490>
   13830:	2300      	movs	r3, #0
   13832:	0001      	movs	r1, r0
   13834:	9a06      	ldr	r2, [sp, #24]
   13836:	0018      	movs	r0, r3
   13838:	e7f8      	b.n	1382c <LORAWAN_RxDone+0x948>
   1383a:	3408      	adds	r4, #8
   1383c:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
   1383e:	0031      	movs	r1, r6
   13840:	9308      	str	r3, [sp, #32]
   13842:	4b47      	ldr	r3, [pc, #284]	; (13960 <LORAWAN_RxDone+0xa7c>)
   13844:	4798      	blx	r3
   13846:	2808      	cmp	r0, #8
   13848:	d001      	beq.n	1384e <LORAWAN_RxDone+0x96a>
   1384a:	f7ff fbaf 	bl	12fac <LORAWAN_RxDone+0xc8>
   1384e:	9b06      	ldr	r3, [sp, #24]
   13850:	0028      	movs	r0, r5
   13852:	1f1a      	subs	r2, r3, #4
   13854:	9b07      	ldr	r3, [sp, #28]
   13856:	b2d2      	uxtb	r2, r2
   13858:	9300      	str	r3, [sp, #0]
   1385a:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
   1385c:	2349      	movs	r3, #73	; 0x49
   1385e:	4c41      	ldr	r4, [pc, #260]	; (13964 <LORAWAN_RxDone+0xa80>)
   13860:	47a0      	blx	r4
   13862:	4d41      	ldr	r5, [pc, #260]	; (13968 <LORAWAN_RxDone+0xa84>)
   13864:	9607      	str	r6, [sp, #28]
   13866:	4e41      	ldr	r6, [pc, #260]	; (1396c <LORAWAN_RxDone+0xa88>)
   13868:	4c41      	ldr	r4, [pc, #260]	; (13970 <LORAWAN_RxDone+0xa8c>)
   1386a:	2210      	movs	r2, #16
   1386c:	0021      	movs	r1, r4
   1386e:	4b41      	ldr	r3, [pc, #260]	; (13974 <LORAWAN_RxDone+0xa90>)
   13870:	0030      	movs	r0, r6
   13872:	4798      	blx	r3
   13874:	9b06      	ldr	r3, [sp, #24]
   13876:	0039      	movs	r1, r7
   13878:	3b04      	subs	r3, #4
   1387a:	001a      	movs	r2, r3
   1387c:	9309      	str	r3, [sp, #36]	; 0x24
   1387e:	483e      	ldr	r0, [pc, #248]	; (13978 <LORAWAN_RxDone+0xa94>)
   13880:	4b3c      	ldr	r3, [pc, #240]	; (13974 <LORAWAN_RxDone+0xa90>)
   13882:	4798      	blx	r3
   13884:	9b06      	ldr	r3, [sp, #24]
   13886:	9a07      	ldr	r2, [sp, #28]
   13888:	330c      	adds	r3, #12
   1388a:	b29b      	uxth	r3, r3
   1388c:	9300      	str	r3, [sp, #0]
   1388e:	0033      	movs	r3, r6
   13890:	2a00      	cmp	r2, #0
   13892:	d100      	bne.n	13896 <LORAWAN_RxDone+0x9b2>
   13894:	e55b      	b.n	1334e <LORAWAN_RxDone+0x46a>
   13896:	0022      	movs	r2, r4
   13898:	2104      	movs	r1, #4
   1389a:	4c38      	ldr	r4, [pc, #224]	; (1397c <LORAWAN_RxDone+0xa98>)
   1389c:	0028      	movs	r0, r5
   1389e:	47a0      	blx	r4
   138a0:	2204      	movs	r2, #4
   138a2:	4933      	ldr	r1, [pc, #204]	; (13970 <LORAWAN_RxDone+0xa8c>)
   138a4:	4c33      	ldr	r4, [pc, #204]	; (13974 <LORAWAN_RxDone+0xa90>)
   138a6:	a80d      	add	r0, sp, #52	; 0x34
   138a8:	47a0      	blx	r4
   138aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
   138ac:	2204      	movs	r2, #4
   138ae:	18f9      	adds	r1, r7, r3
   138b0:	a810      	add	r0, sp, #64	; 0x40
   138b2:	47a0      	blx	r4
   138b4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   138b6:	9a10      	ldr	r2, [sp, #64]	; 0x40
   138b8:	4293      	cmp	r3, r2
   138ba:	d100      	bne.n	138be <LORAWAN_RxDone+0x9da>
   138bc:	e54e      	b.n	1335c <LORAWAN_RxDone+0x478>
   138be:	4c19      	ldr	r4, [pc, #100]	; (13924 <LORAWAN_RxDone+0xa40>)
   138c0:	0023      	movs	r3, r4
   138c2:	33f4      	adds	r3, #244	; 0xf4
   138c4:	781b      	ldrb	r3, [r3, #0]
   138c6:	2b01      	cmp	r3, #1
   138c8:	d108      	bne.n	138dc <LORAWAN_RxDone+0x9f8>
   138ca:	0023      	movs	r3, r4
   138cc:	220e      	movs	r2, #14
   138ce:	337c      	adds	r3, #124	; 0x7c
   138d0:	781b      	ldrb	r3, [r3, #0]
   138d2:	4013      	ands	r3, r2
   138d4:	2b06      	cmp	r3, #6
   138d6:	d101      	bne.n	138dc <LORAWAN_RxDone+0x9f8>
   138d8:	4b29      	ldr	r3, [pc, #164]	; (13980 <LORAWAN_RxDone+0xa9c>)
   138da:	4798      	blx	r3
   138dc:	491d      	ldr	r1, [pc, #116]	; (13954 <LORAWAN_RxDone+0xa70>)
   138de:	784a      	ldrb	r2, [r1, #1]
   138e0:	780b      	ldrb	r3, [r1, #0]
   138e2:	0212      	lsls	r2, r2, #8
   138e4:	431a      	orrs	r2, r3
   138e6:	788b      	ldrb	r3, [r1, #2]
   138e8:	041b      	lsls	r3, r3, #16
   138ea:	431a      	orrs	r2, r3
   138ec:	78cb      	ldrb	r3, [r1, #3]
   138ee:	061b      	lsls	r3, r3, #24
   138f0:	4313      	orrs	r3, r2
   138f2:	d101      	bne.n	138f8 <LORAWAN_RxDone+0xa14>
   138f4:	f7ff fb48 	bl	12f88 <LORAWAN_RxDone+0xa4>
   138f8:	0022      	movs	r2, r4
   138fa:	2120      	movs	r1, #32
   138fc:	328c      	adds	r2, #140	; 0x8c
   138fe:	7813      	ldrb	r3, [r2, #0]
   13900:	438b      	bics	r3, r1
   13902:	7013      	strb	r3, [r2, #0]
   13904:	9b07      	ldr	r3, [sp, #28]
   13906:	2b00      	cmp	r3, #0
   13908:	d100      	bne.n	1390c <LORAWAN_RxDone+0xa28>
   1390a:	e523      	b.n	13354 <LORAWAN_RxDone+0x470>
   1390c:	2322      	movs	r3, #34	; 0x22
   1390e:	aa04      	add	r2, sp, #16
   13910:	189b      	adds	r3, r3, r2
   13912:	781a      	ldrb	r2, [r3, #0]
   13914:	233c      	movs	r3, #60	; 0x3c
   13916:	4353      	muls	r3, r2
   13918:	18e4      	adds	r4, r4, r3
   1391a:	9b08      	ldr	r3, [sp, #32]
   1391c:	34fc      	adds	r4, #252	; 0xfc
   1391e:	64e3      	str	r3, [r4, #76]	; 0x4c
   13920:	2018      	movs	r0, #24
   13922:	e512      	b.n	1334a <LORAWAN_RxDone+0x466>
   13924:	20002b5c 	.word	0x20002b5c
   13928:	000114a9 	.word	0x000114a9
   1392c:	0000f141 	.word	0x0000f141
   13930:	0001094d 	.word	0x0001094d
   13934:	000108d5 	.word	0x000108d5
   13938:	00011899 	.word	0x00011899
   1393c:	0000021f 	.word	0x0000021f
   13940:	00010659 	.word	0x00010659
   13944:	0000ee29 	.word	0x0000ee29
   13948:	20002bd8 	.word	0x20002bd8
   1394c:	000111a9 	.word	0x000111a9
   13950:	000142ad 	.word	0x000142ad
   13954:	20002ea4 	.word	0x20002ea4
   13958:	20002d90 	.word	0x20002d90
   1395c:	0001184d 	.word	0x0001184d
   13960:	000128fd 	.word	0x000128fd
   13964:	00010221 	.word	0x00010221
   13968:	20002b81 	.word	0x20002b81
   1396c:	20002eac 	.word	0x20002eac
   13970:	20001110 	.word	0x20001110
   13974:	00019da5 	.word	0x00019da5
   13978:	20002ebc 	.word	0x20002ebc
   1397c:	0000de05 	.word	0x0000de05
   13980:	000102b9 	.word	0x000102b9

00013984 <LorawanSetEdClass>:
   13984:	2385      	movs	r3, #133	; 0x85
   13986:	b537      	push	{r0, r1, r2, r4, r5, lr}
   13988:	4d19      	ldr	r5, [pc, #100]	; (139f0 <LorawanSetEdClass+0x6c>)
   1398a:	009b      	lsls	r3, r3, #2
   1398c:	5ceb      	ldrb	r3, [r5, r3]
   1398e:	0004      	movs	r4, r0
   13990:	2011      	movs	r0, #17
   13992:	2b00      	cmp	r3, #0
   13994:	d013      	beq.n	139be <LorawanSetEdClass+0x3a>
   13996:	002b      	movs	r3, r5
   13998:	33f5      	adds	r3, #245	; 0xf5
   1399a:	781b      	ldrb	r3, [r3, #0]
   1399c:	3807      	subs	r0, #7
   1399e:	4223      	tst	r3, r4
   139a0:	d00d      	beq.n	139be <LorawanSetEdClass+0x3a>
   139a2:	002b      	movs	r3, r5
   139a4:	33f4      	adds	r3, #244	; 0xf4
   139a6:	7819      	ldrb	r1, [r3, #0]
   139a8:	428c      	cmp	r4, r1
   139aa:	d007      	beq.n	139bc <LorawanSetEdClass+0x38>
   139ac:	2901      	cmp	r1, #1
   139ae:	d107      	bne.n	139c0 <LorawanSetEdClass+0x3c>
   139b0:	2c04      	cmp	r4, #4
   139b2:	d104      	bne.n	139be <LorawanSetEdClass+0x3a>
   139b4:	701c      	strb	r4, [r3, #0]
   139b6:	2000      	movs	r0, #0
   139b8:	4b0e      	ldr	r3, [pc, #56]	; (139f4 <LorawanSetEdClass+0x70>)
   139ba:	4798      	blx	r3
   139bc:	2008      	movs	r0, #8
   139be:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
   139c0:	2904      	cmp	r1, #4
   139c2:	d1fc      	bne.n	139be <LorawanSetEdClass+0x3a>
   139c4:	2c01      	cmp	r4, #1
   139c6:	d1fa      	bne.n	139be <LorawanSetEdClass+0x3a>
   139c8:	701c      	strb	r4, [r3, #0]
   139ca:	0021      	movs	r1, r4
   139cc:	4b09      	ldr	r3, [pc, #36]	; (139f4 <LorawanSetEdClass+0x70>)
   139ce:	2000      	movs	r0, #0
   139d0:	4798      	blx	r3
   139d2:	002a      	movs	r2, r5
   139d4:	210e      	movs	r1, #14
   139d6:	327c      	adds	r2, #124	; 0x7c
   139d8:	7813      	ldrb	r3, [r2, #0]
   139da:	a801      	add	r0, sp, #4
   139dc:	438b      	bics	r3, r1
   139de:	7013      	strb	r3, [r2, #0]
   139e0:	35ff      	adds	r5, #255	; 0xff
   139e2:	4b05      	ldr	r3, [pc, #20]	; (139f8 <LorawanSetEdClass+0x74>)
   139e4:	7004      	strb	r4, [r0, #0]
   139e6:	4798      	blx	r3
   139e8:	7f68      	ldrb	r0, [r5, #29]
   139ea:	4b04      	ldr	r3, [pc, #16]	; (139fc <LorawanSetEdClass+0x78>)
   139ec:	4798      	blx	r3
   139ee:	e7e5      	b.n	139bc <LorawanSetEdClass+0x38>
   139f0:	20002b5c 	.word	0x20002b5c
   139f4:	0000e0f9 	.word	0x0000e0f9
   139f8:	00015e6d 	.word	0x00015e6d
   139fc:	0000f141 	.word	0x0000f141

00013a00 <LORAWAN_SetAttr>:
   13a00:	2385      	movs	r3, #133	; 0x85
   13a02:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   13a04:	4cbd      	ldr	r4, [pc, #756]	; (13cfc <LORAWAN_SetAttr+0x2fc>)
   13a06:	009b      	lsls	r3, r3, #2
   13a08:	5ce3      	ldrb	r3, [r4, r3]
   13a0a:	000d      	movs	r5, r1
   13a0c:	2611      	movs	r6, #17
   13a0e:	2b00      	cmp	r3, #0
   13a10:	d100      	bne.n	13a14 <LORAWAN_SetAttr+0x14>
   13a12:	e118      	b.n	13c46 <LORAWAN_SetAttr+0x246>
   13a14:	283f      	cmp	r0, #63	; 0x3f
   13a16:	d871      	bhi.n	13afc <LORAWAN_SetAttr+0xfc>
   13a18:	f002 fe08 	bl	1662c <__gnu_thumb1_case_uhi>
   13a1c:	008c0040 	.word	0x008c0040
   13a20:	00f500ab 	.word	0x00f500ab
   13a24:	00df00be 	.word	0x00df00be
   13a28:	012d0117 	.word	0x012d0117
   13a2c:	015f014d 	.word	0x015f014d
   13a30:	017c0165 	.word	0x017c0165
   13a34:	019f0186 	.word	0x019f0186
   13a38:	01a901a4 	.word	0x01a901a4
   13a3c:	01b301ae 	.word	0x01b301ae
   13a40:	01bd01b8 	.word	0x01bd01b8
   13a44:	01e401c2 	.word	0x01e401c2
   13a48:	01c601c9 	.word	0x01c601c9
   13a4c:	01e901ed 	.word	0x01e901ed
   13a50:	01db01df 	.word	0x01db01df
   13a54:	007001d5 	.word	0x007001d5
   13a58:	01970070 	.word	0x01970070
   13a5c:	00700070 	.word	0x00700070
   13a60:	00700070 	.word	0x00700070
   13a64:	00700070 	.word	0x00700070
   13a68:	005f01f1 	.word	0x005f01f1
   13a6c:	020201f4 	.word	0x020201f4
   13a70:	01f901fe 	.word	0x01f901fe
   13a74:	02060070 	.word	0x02060070
   13a78:	020e020a 	.word	0x020e020a
   13a7c:	02160212 	.word	0x02160212
   13a80:	023a021a 	.word	0x023a021a
   13a84:	00700070 	.word	0x00700070
   13a88:	00700070 	.word	0x00700070
   13a8c:	00700070 	.word	0x00700070
   13a90:	00700070 	.word	0x00700070
   13a94:	02510070 	.word	0x02510070
   13a98:	025f025b 	.word	0x025f025b
   13a9c:	260a      	movs	r6, #10
   13a9e:	2900      	cmp	r1, #0
   13aa0:	d100      	bne.n	13aa4 <LORAWAN_SetAttr+0xa4>
   13aa2:	e0d0      	b.n	13c46 <LORAWAN_SetAttr+0x246>
   13aa4:	0020      	movs	r0, r4
   13aa6:	2208      	movs	r2, #8
   13aa8:	4b95      	ldr	r3, [pc, #596]	; (13d00 <LORAWAN_SetAttr+0x300>)
   13aaa:	305d      	adds	r0, #93	; 0x5d
   13aac:	4798      	blx	r3
   13aae:	2108      	movs	r1, #8
   13ab0:	4e94      	ldr	r6, [pc, #592]	; (13d04 <LORAWAN_SetAttr+0x304>)
   13ab2:	2001      	movs	r0, #1
   13ab4:	47b0      	blx	r6
   13ab6:	0022      	movs	r2, r4
   13ab8:	2501      	movs	r5, #1
   13aba:	32d6      	adds	r2, #214	; 0xd6
   13abc:	7813      	ldrb	r3, [r2, #0]
   13abe:	2109      	movs	r1, #9
   13ac0:	432b      	orrs	r3, r5
   13ac2:	347c      	adds	r4, #124	; 0x7c
   13ac4:	0028      	movs	r0, r5
   13ac6:	7013      	strb	r3, [r2, #0]
   13ac8:	47b0      	blx	r6
   13aca:	7823      	ldrb	r3, [r4, #0]
   13acc:	210b      	movs	r1, #11
   13ace:	43ab      	bics	r3, r5
   13ad0:	0028      	movs	r0, r5
   13ad2:	7023      	strb	r3, [r4, #0]
   13ad4:	47b0      	blx	r6
   13ad6:	2608      	movs	r6, #8
   13ad8:	e0b5      	b.n	13c46 <LORAWAN_SetAttr+0x246>
   13ada:	0023      	movs	r3, r4
   13adc:	33ff      	adds	r3, #255	; 0xff
   13ade:	7c5b      	ldrb	r3, [r3, #17]
   13ae0:	260a      	movs	r6, #10
   13ae2:	075b      	lsls	r3, r3, #29
   13ae4:	d400      	bmi.n	13ae8 <LORAWAN_SetAttr+0xe8>
   13ae6:	e0ae      	b.n	13c46 <LORAWAN_SetAttr+0x246>
   13ae8:	79ca      	ldrb	r2, [r1, #7]
   13aea:	4b87      	ldr	r3, [pc, #540]	; (13d08 <LORAWAN_SetAttr+0x308>)
   13aec:	2a00      	cmp	r2, #0
   13aee:	d10e      	bne.n	13b0e <LORAWAN_SetAttr+0x10e>
   13af0:	4669      	mov	r1, sp
   13af2:	201d      	movs	r0, #29
   13af4:	714a      	strb	r2, [r1, #5]
   13af6:	4798      	blx	r3
   13af8:	2800      	cmp	r0, #0
   13afa:	d001      	beq.n	13b00 <LORAWAN_SetAttr+0x100>
   13afc:	260a      	movs	r6, #10
   13afe:	e0a2      	b.n	13c46 <LORAWAN_SetAttr+0x246>
   13b00:	2109      	movs	r1, #9
   13b02:	34fe      	adds	r4, #254	; 0xfe
   13b04:	82e0      	strh	r0, [r4, #22]
   13b06:	82a0      	strh	r0, [r4, #20]
   13b08:	4b7e      	ldr	r3, [pc, #504]	; (13d04 <LORAWAN_SetAttr+0x304>)
   13b0a:	4798      	blx	r3
   13b0c:	e7e3      	b.n	13ad6 <LORAWAN_SetAttr+0xd6>
   13b0e:	2002      	movs	r0, #2
   13b10:	5e2a      	ldrsh	r2, [r5, r0]
   13b12:	88ae      	ldrh	r6, [r5, #4]
   13b14:	79a8      	ldrb	r0, [r5, #6]
   13b16:	466d      	mov	r5, sp
   13b18:	806a      	strh	r2, [r5, #2]
   13b1a:	2201      	movs	r2, #1
   13b1c:	8809      	ldrh	r1, [r1, #0]
   13b1e:	7128      	strb	r0, [r5, #4]
   13b20:	8029      	strh	r1, [r5, #0]
   13b22:	201d      	movs	r0, #29
   13b24:	4669      	mov	r1, sp
   13b26:	716a      	strb	r2, [r5, #5]
   13b28:	4798      	blx	r3
   13b2a:	2800      	cmp	r0, #0
   13b2c:	d1e6      	bne.n	13afc <LORAWAN_SetAttr+0xfc>
   13b2e:	34fe      	adds	r4, #254	; 0xfe
   13b30:	82e6      	strh	r6, [r4, #22]
   13b32:	e7d0      	b.n	13ad6 <LORAWAN_SetAttr+0xd6>
   13b34:	260a      	movs	r6, #10
   13b36:	2900      	cmp	r1, #0
   13b38:	d100      	bne.n	13b3c <LORAWAN_SetAttr+0x13c>
   13b3a:	e084      	b.n	13c46 <LORAWAN_SetAttr+0x246>
   13b3c:	0020      	movs	r0, r4
   13b3e:	2208      	movs	r2, #8
   13b40:	4b6f      	ldr	r3, [pc, #444]	; (13d00 <LORAWAN_SetAttr+0x300>)
   13b42:	3055      	adds	r0, #85	; 0x55
   13b44:	4798      	blx	r3
   13b46:	2107      	movs	r1, #7
   13b48:	4d6e      	ldr	r5, [pc, #440]	; (13d04 <LORAWAN_SetAttr+0x304>)
   13b4a:	2001      	movs	r0, #1
   13b4c:	47a8      	blx	r5
   13b4e:	0022      	movs	r2, r4
   13b50:	2302      	movs	r3, #2
   13b52:	32d6      	adds	r2, #214	; 0xd6
   13b54:	7811      	ldrb	r1, [r2, #0]
   13b56:	2001      	movs	r0, #1
   13b58:	430b      	orrs	r3, r1
   13b5a:	2109      	movs	r1, #9
   13b5c:	7013      	strb	r3, [r2, #0]
   13b5e:	47a8      	blx	r5
   13b60:	2001      	movs	r0, #1
   13b62:	347c      	adds	r4, #124	; 0x7c
   13b64:	7823      	ldrb	r3, [r4, #0]
   13b66:	210b      	movs	r1, #11
   13b68:	4383      	bics	r3, r0
   13b6a:	7023      	strb	r3, [r4, #0]
   13b6c:	47a8      	blx	r5
   13b6e:	3e02      	subs	r6, #2
   13b70:	e069      	b.n	13c46 <LORAWAN_SetAttr+0x246>
   13b72:	680b      	ldr	r3, [r1, #0]
   13b74:	2001      	movs	r0, #1
   13b76:	0a19      	lsrs	r1, r3, #8
   13b78:	70a1      	strb	r1, [r4, #2]
   13b7a:	0c19      	lsrs	r1, r3, #16
   13b7c:	7063      	strb	r3, [r4, #1]
   13b7e:	70e1      	strb	r1, [r4, #3]
   13b80:	0e1b      	lsrs	r3, r3, #24
   13b82:	2103      	movs	r1, #3
   13b84:	4d5f      	ldr	r5, [pc, #380]	; (13d04 <LORAWAN_SetAttr+0x304>)
   13b86:	7123      	strb	r3, [r4, #4]
   13b88:	47a8      	blx	r5
   13b8a:	0022      	movs	r2, r4
   13b8c:	2304      	movs	r3, #4
   13b8e:	32d6      	adds	r2, #214	; 0xd6
   13b90:	7811      	ldrb	r1, [r2, #0]
   13b92:	430b      	orrs	r3, r1
   13b94:	7013      	strb	r3, [r2, #0]
   13b96:	e015      	b.n	13bc4 <LORAWAN_SetAttr+0x1c4>
   13b98:	260a      	movs	r6, #10
   13b9a:	2900      	cmp	r1, #0
   13b9c:	d053      	beq.n	13c46 <LORAWAN_SetAttr+0x246>
   13b9e:	3606      	adds	r6, #6
   13ba0:	0032      	movs	r2, r6
   13ba2:	4f57      	ldr	r7, [pc, #348]	; (13d00 <LORAWAN_SetAttr+0x300>)
   13ba4:	1d60      	adds	r0, r4, #5
   13ba6:	47b8      	blx	r7
   13ba8:	0020      	movs	r0, r4
   13baa:	0032      	movs	r2, r6
   13bac:	0029      	movs	r1, r5
   13bae:	3025      	adds	r0, #37	; 0x25
   13bb0:	47b8      	blx	r7
   13bb2:	2104      	movs	r1, #4
   13bb4:	2001      	movs	r0, #1
   13bb6:	4d53      	ldr	r5, [pc, #332]	; (13d04 <LORAWAN_SetAttr+0x304>)
   13bb8:	47a8      	blx	r5
   13bba:	0023      	movs	r3, r4
   13bbc:	33d6      	adds	r3, #214	; 0xd6
   13bbe:	781a      	ldrb	r2, [r3, #0]
   13bc0:	4316      	orrs	r6, r2
   13bc2:	701e      	strb	r6, [r3, #0]
   13bc4:	2109      	movs	r1, #9
   13bc6:	2001      	movs	r0, #1
   13bc8:	47a8      	blx	r5
   13bca:	2001      	movs	r0, #1
   13bcc:	210b      	movs	r1, #11
   13bce:	347c      	adds	r4, #124	; 0x7c
   13bd0:	7823      	ldrb	r3, [r4, #0]
   13bd2:	4383      	bics	r3, r0
   13bd4:	7023      	strb	r3, [r4, #0]
   13bd6:	47a8      	blx	r5
   13bd8:	e77d      	b.n	13ad6 <LORAWAN_SetAttr+0xd6>
   13bda:	260a      	movs	r6, #10
   13bdc:	2900      	cmp	r1, #0
   13bde:	d032      	beq.n	13c46 <LORAWAN_SetAttr+0x246>
   13be0:	0020      	movs	r0, r4
   13be2:	2210      	movs	r2, #16
   13be4:	4e46      	ldr	r6, [pc, #280]	; (13d00 <LORAWAN_SetAttr+0x300>)
   13be6:	3015      	adds	r0, #21
   13be8:	47b0      	blx	r6
   13bea:	0020      	movs	r0, r4
   13bec:	2210      	movs	r2, #16
   13bee:	0029      	movs	r1, r5
   13bf0:	3035      	adds	r0, #53	; 0x35
   13bf2:	47b0      	blx	r6
   13bf4:	2105      	movs	r1, #5
   13bf6:	2001      	movs	r0, #1
   13bf8:	4d42      	ldr	r5, [pc, #264]	; (13d04 <LORAWAN_SetAttr+0x304>)
   13bfa:	47a8      	blx	r5
   13bfc:	0022      	movs	r2, r4
   13bfe:	32d6      	adds	r2, #214	; 0xd6
   13c00:	7811      	ldrb	r1, [r2, #0]
   13c02:	2320      	movs	r3, #32
   13c04:	e7c5      	b.n	13b92 <LORAWAN_SetAttr+0x192>
   13c06:	260a      	movs	r6, #10
   13c08:	2900      	cmp	r1, #0
   13c0a:	d01c      	beq.n	13c46 <LORAWAN_SetAttr+0x246>
   13c0c:	4b3f      	ldr	r3, [pc, #252]	; (13d0c <LORAWAN_SetAttr+0x30c>)
   13c0e:	3e02      	subs	r6, #2
   13c10:	5ce3      	ldrb	r3, [r4, r3]
   13c12:	2b00      	cmp	r3, #0
   13c14:	d117      	bne.n	13c46 <LORAWAN_SetAttr+0x246>
   13c16:	0020      	movs	r0, r4
   13c18:	2210      	movs	r2, #16
   13c1a:	4b39      	ldr	r3, [pc, #228]	; (13d00 <LORAWAN_SetAttr+0x300>)
   13c1c:	3045      	adds	r0, #69	; 0x45
   13c1e:	4798      	blx	r3
   13c20:	2106      	movs	r1, #6
   13c22:	4d38      	ldr	r5, [pc, #224]	; (13d04 <LORAWAN_SetAttr+0x304>)
   13c24:	2001      	movs	r0, #1
   13c26:	47a8      	blx	r5
   13c28:	0022      	movs	r2, r4
   13c2a:	32d6      	adds	r2, #214	; 0xd6
   13c2c:	7813      	ldrb	r3, [r2, #0]
   13c2e:	2109      	movs	r1, #9
   13c30:	4333      	orrs	r3, r6
   13c32:	2001      	movs	r0, #1
   13c34:	7013      	strb	r3, [r2, #0]
   13c36:	47a8      	blx	r5
   13c38:	2001      	movs	r0, #1
   13c3a:	347c      	adds	r4, #124	; 0x7c
   13c3c:	7823      	ldrb	r3, [r4, #0]
   13c3e:	210b      	movs	r1, #11
   13c40:	4383      	bics	r3, r0
   13c42:	7023      	strb	r3, [r4, #0]
   13c44:	47a8      	blx	r5
   13c46:	0030      	movs	r0, r6
   13c48:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   13c4a:	780b      	ldrb	r3, [r1, #0]
   13c4c:	2001      	movs	r0, #1
   13c4e:	0021      	movs	r1, r4
   13c50:	2520      	movs	r5, #32
   13c52:	317c      	adds	r1, #124	; 0x7c
   13c54:	4003      	ands	r3, r0
   13c56:	015a      	lsls	r2, r3, #5
   13c58:	780b      	ldrb	r3, [r1, #0]
   13c5a:	43ab      	bics	r3, r5
   13c5c:	4313      	orrs	r3, r2
   13c5e:	700b      	strb	r3, [r1, #0]
   13c60:	0023      	movs	r3, r4
   13c62:	2200      	movs	r2, #0
   13c64:	33c2      	adds	r3, #194	; 0xc2
   13c66:	348c      	adds	r4, #140	; 0x8c
   13c68:	801a      	strh	r2, [r3, #0]
   13c6a:	7823      	ldrb	r3, [r4, #0]
   13c6c:	3210      	adds	r2, #16
   13c6e:	4393      	bics	r3, r2
   13c70:	7023      	strb	r3, [r4, #0]
   13c72:	210b      	movs	r1, #11
   13c74:	e748      	b.n	13b08 <LORAWAN_SetAttr+0x108>
   13c76:	466a      	mov	r2, sp
   13c78:	780b      	ldrb	r3, [r1, #0]
   13c7a:	7013      	strb	r3, [r2, #0]
   13c7c:	0022      	movs	r2, r4
   13c7e:	32ea      	adds	r2, #234	; 0xea
   13c80:	7812      	ldrb	r2, [r2, #0]
   13c82:	429a      	cmp	r2, r3
   13c84:	d900      	bls.n	13c88 <LORAWAN_SetAttr+0x288>
   13c86:	e739      	b.n	13afc <LORAWAN_SetAttr+0xfc>
   13c88:	0022      	movs	r2, r4
   13c8a:	32eb      	adds	r2, #235	; 0xeb
   13c8c:	7812      	ldrb	r2, [r2, #0]
   13c8e:	429a      	cmp	r2, r3
   13c90:	d200      	bcs.n	13c94 <LORAWAN_SetAttr+0x294>
   13c92:	e733      	b.n	13afc <LORAWAN_SetAttr+0xfc>
   13c94:	4669      	mov	r1, sp
   13c96:	2010      	movs	r0, #16
   13c98:	4b1d      	ldr	r3, [pc, #116]	; (13d10 <LORAWAN_SetAttr+0x310>)
   13c9a:	4798      	blx	r3
   13c9c:	0006      	movs	r6, r0
   13c9e:	2808      	cmp	r0, #8
   13ca0:	d000      	beq.n	13ca4 <LORAWAN_SetAttr+0x2a4>
   13ca2:	e72b      	b.n	13afc <LORAWAN_SetAttr+0xfc>
   13ca4:	466b      	mov	r3, sp
   13ca6:	210c      	movs	r1, #12
   13ca8:	2001      	movs	r0, #1
   13caa:	781b      	ldrb	r3, [r3, #0]
   13cac:	34df      	adds	r4, #223	; 0xdf
   13cae:	7023      	strb	r3, [r4, #0]
   13cb0:	4b14      	ldr	r3, [pc, #80]	; (13d04 <LORAWAN_SetAttr+0x304>)
   13cb2:	4798      	blx	r3
   13cb4:	e7c7      	b.n	13c46 <LORAWAN_SetAttr+0x246>
   13cb6:	466a      	mov	r2, sp
   13cb8:	780b      	ldrb	r3, [r1, #0]
   13cba:	201d      	movs	r0, #29
   13cbc:	7013      	strb	r3, [r2, #0]
   13cbe:	4669      	mov	r1, sp
   13cc0:	4b13      	ldr	r3, [pc, #76]	; (13d10 <LORAWAN_SetAttr+0x310>)
   13cc2:	4798      	blx	r3
   13cc4:	0006      	movs	r6, r0
   13cc6:	2808      	cmp	r0, #8
   13cc8:	d000      	beq.n	13ccc <LORAWAN_SetAttr+0x2cc>
   13cca:	e717      	b.n	13afc <LORAWAN_SetAttr+0xfc>
   13ccc:	466b      	mov	r3, sp
   13cce:	781b      	ldrb	r3, [r3, #0]
   13cd0:	34e1      	adds	r4, #225	; 0xe1
   13cd2:	7023      	strb	r3, [r4, #0]
   13cd4:	210a      	movs	r1, #10
   13cd6:	2000      	movs	r0, #0
   13cd8:	e7ea      	b.n	13cb0 <LORAWAN_SetAttr+0x2b0>
   13cda:	780b      	ldrb	r3, [r1, #0]
   13cdc:	2103      	movs	r1, #3
   13cde:	34f7      	adds	r4, #247	; 0xf7
   13ce0:	7023      	strb	r3, [r4, #0]
   13ce2:	2000      	movs	r0, #0
   13ce4:	e710      	b.n	13b08 <LORAWAN_SetAttr+0x108>
   13ce6:	680b      	ldr	r3, [r1, #0]
   13ce8:	260a      	movs	r6, #10
   13cea:	1c5a      	adds	r2, r3, #1
   13cec:	d0ab      	beq.n	13c46 <LORAWAN_SetAttr+0x246>
   13cee:	2116      	movs	r1, #22
   13cf0:	2000      	movs	r0, #0
   13cf2:	3404      	adds	r4, #4
   13cf4:	67e3      	str	r3, [r4, #124]	; 0x7c
   13cf6:	4b03      	ldr	r3, [pc, #12]	; (13d04 <LORAWAN_SetAttr+0x304>)
   13cf8:	4798      	blx	r3
   13cfa:	e738      	b.n	13b6e <LORAWAN_SetAttr+0x16e>
   13cfc:	20002b5c 	.word	0x20002b5c
   13d00:	00019da5 	.word	0x00019da5
   13d04:	0000e0f9 	.word	0x0000e0f9
   13d08:	00014c69 	.word	0x00014c69
   13d0c:	00000221 	.word	0x00000221
   13d10:	0000d939 	.word	0x0000d939
   13d14:	680b      	ldr	r3, [r1, #0]
   13d16:	260a      	movs	r6, #10
   13d18:	1c5a      	adds	r2, r3, #1
   13d1a:	d100      	bne.n	13d1e <LORAWAN_SetAttr+0x31e>
   13d1c:	e793      	b.n	13c46 <LORAWAN_SetAttr+0x246>
   13d1e:	0031      	movs	r1, r6
   13d20:	3408      	adds	r4, #8
   13d22:	67e3      	str	r3, [r4, #124]	; 0x7c
   13d24:	2001      	movs	r0, #1
   13d26:	e7e6      	b.n	13cf6 <LORAWAN_SetAttr+0x2f6>
   13d28:	0026      	movs	r6, r4
   13d2a:	880b      	ldrh	r3, [r1, #0]
   13d2c:	36c8      	adds	r6, #200	; 0xc8
   13d2e:	210c      	movs	r1, #12
   13d30:	2000      	movs	r0, #0
   13d32:	4d6b      	ldr	r5, [pc, #428]	; (13ee0 <LORAWAN_SetAttr+0x4e0>)
   13d34:	8033      	strh	r3, [r6, #0]
   13d36:	47a8      	blx	r5
   13d38:	22fa      	movs	r2, #250	; 0xfa
   13d3a:	8833      	ldrh	r3, [r6, #0]
   13d3c:	0092      	lsls	r2, r2, #2
   13d3e:	189b      	adds	r3, r3, r2
   13d40:	34ca      	adds	r4, #202	; 0xca
   13d42:	8023      	strh	r3, [r4, #0]
   13d44:	210d      	movs	r1, #13
   13d46:	2000      	movs	r0, #0
   13d48:	e745      	b.n	13bd6 <LORAWAN_SetAttr+0x1d6>
   13d4a:	780b      	ldrb	r3, [r1, #0]
   13d4c:	260a      	movs	r6, #10
   13d4e:	2b0f      	cmp	r3, #15
   13d50:	d900      	bls.n	13d54 <LORAWAN_SetAttr+0x354>
   13d52:	e778      	b.n	13c46 <LORAWAN_SetAttr+0x246>
   13d54:	3490      	adds	r4, #144	; 0x90
   13d56:	7023      	strb	r3, [r4, #0]
   13d58:	e709      	b.n	13b6e <LORAWAN_SetAttr+0x16e>
   13d5a:	880b      	ldrh	r3, [r1, #0]
   13d5c:	34cc      	adds	r4, #204	; 0xcc
   13d5e:	8023      	strh	r3, [r4, #0]
   13d60:	210e      	movs	r1, #14
   13d62:	e7be      	b.n	13ce2 <LORAWAN_SetAttr+0x2e2>
   13d64:	880b      	ldrh	r3, [r1, #0]
   13d66:	34ce      	adds	r4, #206	; 0xce
   13d68:	8023      	strh	r3, [r4, #0]
   13d6a:	210f      	movs	r1, #15
   13d6c:	e7b9      	b.n	13ce2 <LORAWAN_SetAttr+0x2e2>
   13d6e:	880b      	ldrh	r3, [r1, #0]
   13d70:	34d0      	adds	r4, #208	; 0xd0
   13d72:	8023      	strh	r3, [r4, #0]
   13d74:	2110      	movs	r1, #16
   13d76:	e7b4      	b.n	13ce2 <LORAWAN_SetAttr+0x2e2>
   13d78:	780b      	ldrb	r3, [r1, #0]
   13d7a:	34d4      	adds	r4, #212	; 0xd4
   13d7c:	7023      	strb	r3, [r4, #0]
   13d7e:	2112      	movs	r1, #18
   13d80:	e7af      	b.n	13ce2 <LORAWAN_SetAttr+0x2e2>
   13d82:	780b      	ldrb	r3, [r1, #0]
   13d84:	34d5      	adds	r4, #213	; 0xd5
   13d86:	7023      	strb	r3, [r4, #0]
   13d88:	2113      	movs	r1, #19
   13d8a:	e7aa      	b.n	13ce2 <LORAWAN_SetAttr+0x2e2>
   13d8c:	880b      	ldrh	r3, [r1, #0]
   13d8e:	34d2      	adds	r4, #210	; 0xd2
   13d90:	8023      	strh	r3, [r4, #0]
   13d92:	2111      	movs	r1, #17
   13d94:	e7a5      	b.n	13ce2 <LORAWAN_SetAttr+0x2e2>
   13d96:	780b      	ldrb	r3, [r1, #0]
   13d98:	34da      	adds	r4, #218	; 0xda
   13d9a:	7023      	strb	r3, [r4, #0]
   13d9c:	2115      	movs	r1, #21
   13d9e:	e7a0      	b.n	13ce2 <LORAWAN_SetAttr+0x2e2>
   13da0:	780b      	ldrb	r3, [r1, #0]
   13da2:	34d9      	adds	r4, #217	; 0xd9
   13da4:	7023      	strb	r3, [r4, #0]
   13da6:	e696      	b.n	13ad6 <LORAWAN_SetAttr+0xd6>
   13da8:	780b      	ldrb	r3, [r1, #0]
   13daa:	34e0      	adds	r4, #224	; 0xe0
   13dac:	e7fa      	b.n	13da4 <LORAWAN_SetAttr+0x3a4>
   13dae:	2001      	movs	r0, #1
   13db0:	780b      	ldrb	r3, [r1, #0]
   13db2:	2110      	movs	r1, #16
   13db4:	347c      	adds	r4, #124	; 0x7c
   13db6:	4003      	ands	r3, r0
   13db8:	011a      	lsls	r2, r3, #4
   13dba:	7823      	ldrb	r3, [r4, #0]
   13dbc:	438b      	bics	r3, r1
   13dbe:	4313      	orrs	r3, r2
   13dc0:	7023      	strb	r3, [r4, #0]
   13dc2:	3905      	subs	r1, #5
   13dc4:	e6a0      	b.n	13b08 <LORAWAN_SetAttr+0x108>
   13dc6:	7909      	ldrb	r1, [r1, #4]
   13dc8:	7828      	ldrb	r0, [r5, #0]
   13dca:	4b46      	ldr	r3, [pc, #280]	; (13ee4 <LORAWAN_SetAttr+0x4e4>)
   13dcc:	4798      	blx	r3
   13dce:	0006      	movs	r6, r0
   13dd0:	e739      	b.n	13c46 <LORAWAN_SetAttr+0x246>
   13dd2:	7909      	ldrb	r1, [r1, #4]
   13dd4:	7828      	ldrb	r0, [r5, #0]
   13dd6:	4b44      	ldr	r3, [pc, #272]	; (13ee8 <LORAWAN_SetAttr+0x4e8>)
   13dd8:	e7f8      	b.n	13dcc <LORAWAN_SetAttr+0x3cc>
   13dda:	7808      	ldrb	r0, [r1, #0]
   13ddc:	4b43      	ldr	r3, [pc, #268]	; (13eec <LORAWAN_SetAttr+0x4ec>)
   13dde:	6849      	ldr	r1, [r1, #4]
   13de0:	4798      	blx	r3
   13de2:	e7f4      	b.n	13dce <LORAWAN_SetAttr+0x3ce>
   13de4:	7909      	ldrb	r1, [r1, #4]
   13de6:	6828      	ldr	r0, [r5, #0]
   13de8:	4b41      	ldr	r3, [pc, #260]	; (13ef0 <LORAWAN_SetAttr+0x4f0>)
   13dea:	4798      	blx	r3
   13dec:	e7ef      	b.n	13dce <LORAWAN_SetAttr+0x3ce>
   13dee:	7808      	ldrb	r0, [r1, #0]
   13df0:	4b40      	ldr	r3, [pc, #256]	; (13ef4 <LORAWAN_SetAttr+0x4f4>)
   13df2:	4798      	blx	r3
   13df4:	e7eb      	b.n	13dce <LORAWAN_SetAttr+0x3ce>
   13df6:	8808      	ldrh	r0, [r1, #0]
   13df8:	4b3f      	ldr	r3, [pc, #252]	; (13ef8 <LORAWAN_SetAttr+0x4f8>)
   13dfa:	4798      	blx	r3
   13dfc:	e66b      	b.n	13ad6 <LORAWAN_SetAttr+0xd6>
   13dfe:	4b3f      	ldr	r3, [pc, #252]	; (13efc <LORAWAN_SetAttr+0x4fc>)
   13e00:	6019      	str	r1, [r3, #0]
   13e02:	e67b      	b.n	13afc <LORAWAN_SetAttr+0xfc>
   13e04:	7809      	ldrb	r1, [r1, #0]
   13e06:	7868      	ldrb	r0, [r5, #1]
   13e08:	4b3d      	ldr	r3, [pc, #244]	; (13f00 <LORAWAN_SetAttr+0x500>)
   13e0a:	4798      	blx	r3
   13e0c:	e7df      	b.n	13dce <LORAWAN_SetAttr+0x3ce>
   13e0e:	7809      	ldrb	r1, [r1, #0]
   13e10:	4b3c      	ldr	r3, [pc, #240]	; (13f04 <LORAWAN_SetAttr+0x504>)
   13e12:	1c68      	adds	r0, r5, #1
   13e14:	4798      	blx	r3
   13e16:	e7da      	b.n	13dce <LORAWAN_SetAttr+0x3ce>
   13e18:	7809      	ldrb	r1, [r1, #0]
   13e1a:	1c68      	adds	r0, r5, #1
   13e1c:	4b3a      	ldr	r3, [pc, #232]	; (13f08 <LORAWAN_SetAttr+0x508>)
   13e1e:	e7f9      	b.n	13e14 <LORAWAN_SetAttr+0x414>
   13e20:	7809      	ldrb	r1, [r1, #0]
   13e22:	6868      	ldr	r0, [r5, #4]
   13e24:	4b39      	ldr	r3, [pc, #228]	; (13f0c <LORAWAN_SetAttr+0x50c>)
   13e26:	e7f5      	b.n	13e14 <LORAWAN_SetAttr+0x414>
   13e28:	7809      	ldrb	r1, [r1, #0]
   13e2a:	6868      	ldr	r0, [r5, #4]
   13e2c:	4b38      	ldr	r3, [pc, #224]	; (13f10 <LORAWAN_SetAttr+0x510>)
   13e2e:	e7f1      	b.n	13e14 <LORAWAN_SetAttr+0x414>
   13e30:	7809      	ldrb	r1, [r1, #0]
   13e32:	6868      	ldr	r0, [r5, #4]
   13e34:	4b37      	ldr	r3, [pc, #220]	; (13f14 <LORAWAN_SetAttr+0x514>)
   13e36:	e7ed      	b.n	13e14 <LORAWAN_SetAttr+0x414>
   13e38:	7809      	ldrb	r1, [r1, #0]
   13e3a:	6868      	ldr	r0, [r5, #4]
   13e3c:	4b36      	ldr	r3, [pc, #216]	; (13f18 <LORAWAN_SetAttr+0x518>)
   13e3e:	e7e9      	b.n	13e14 <LORAWAN_SetAttr+0x414>
   13e40:	7809      	ldrb	r1, [r1, #0]
   13e42:	7868      	ldrb	r0, [r5, #1]
   13e44:	4b35      	ldr	r3, [pc, #212]	; (13f1c <LORAWAN_SetAttr+0x51c>)
   13e46:	e7e0      	b.n	13e0a <LORAWAN_SetAttr+0x40a>
   13e48:	7809      	ldrb	r1, [r1, #0]
   13e4a:	7868      	ldrb	r0, [r5, #1]
   13e4c:	4b34      	ldr	r3, [pc, #208]	; (13f20 <LORAWAN_SetAttr+0x520>)
   13e4e:	e7dc      	b.n	13e0a <LORAWAN_SetAttr+0x40a>
   13e50:	2300      	movs	r3, #0
   13e52:	466a      	mov	r2, sp
   13e54:	7809      	ldrb	r1, [r1, #0]
   13e56:	7013      	strb	r3, [r2, #0]
   13e58:	4299      	cmp	r1, r3
   13e5a:	d014      	beq.n	13e86 <LORAWAN_SetAttr+0x486>
   13e5c:	0022      	movs	r2, r4
   13e5e:	2102      	movs	r1, #2
   13e60:	32ff      	adds	r2, #255	; 0xff
   13e62:	7c53      	ldrb	r3, [r2, #17]
   13e64:	420b      	tst	r3, r1
   13e66:	d001      	beq.n	13e6c <LORAWAN_SetAttr+0x46c>
   13e68:	438b      	bics	r3, r1
   13e6a:	7453      	strb	r3, [r2, #17]
   13e6c:	2220      	movs	r2, #32
   13e6e:	34ff      	adds	r4, #255	; 0xff
   13e70:	7c63      	ldrb	r3, [r4, #17]
   13e72:	4213      	tst	r3, r2
   13e74:	d100      	bne.n	13e78 <LORAWAN_SetAttr+0x478>
   13e76:	e62e      	b.n	13ad6 <LORAWAN_SetAttr+0xd6>
   13e78:	4393      	bics	r3, r2
   13e7a:	7463      	strb	r3, [r4, #17]
   13e7c:	4669      	mov	r1, sp
   13e7e:	4b29      	ldr	r3, [pc, #164]	; (13f24 <LORAWAN_SetAttr+0x524>)
   13e80:	2039      	movs	r0, #57	; 0x39
   13e82:	4798      	blx	r3
   13e84:	e627      	b.n	13ad6 <LORAWAN_SetAttr+0xd6>
   13e86:	4a28      	ldr	r2, [pc, #160]	; (13f28 <LORAWAN_SetAttr+0x528>)
   13e88:	4b28      	ldr	r3, [pc, #160]	; (13f2c <LORAWAN_SetAttr+0x52c>)
   13e8a:	200e      	movs	r0, #14
   13e8c:	4798      	blx	r3
   13e8e:	e622      	b.n	13ad6 <LORAWAN_SetAttr+0xd6>
   13e90:	466b      	mov	r3, sp
   13e92:	780a      	ldrb	r2, [r1, #0]
   13e94:	34ff      	adds	r4, #255	; 0xff
   13e96:	701a      	strb	r2, [r3, #0]
   13e98:	2320      	movs	r3, #32
   13e9a:	2a00      	cmp	r2, #0
   13e9c:	d007      	beq.n	13eae <LORAWAN_SetAttr+0x4ae>
   13e9e:	7c62      	ldrb	r2, [r4, #17]
   13ea0:	4313      	orrs	r3, r2
   13ea2:	7463      	strb	r3, [r4, #17]
   13ea4:	4669      	mov	r1, sp
   13ea6:	4b1f      	ldr	r3, [pc, #124]	; (13f24 <LORAWAN_SetAttr+0x524>)
   13ea8:	2039      	movs	r0, #57	; 0x39
   13eaa:	4798      	blx	r3
   13eac:	e78f      	b.n	13dce <LORAWAN_SetAttr+0x3ce>
   13eae:	7c62      	ldrb	r2, [r4, #17]
   13eb0:	260a      	movs	r6, #10
   13eb2:	421a      	tst	r2, r3
   13eb4:	d100      	bne.n	13eb8 <LORAWAN_SetAttr+0x4b8>
   13eb6:	e6c6      	b.n	13c46 <LORAWAN_SetAttr+0x246>
   13eb8:	439a      	bics	r2, r3
   13eba:	7462      	strb	r2, [r4, #17]
   13ebc:	e7f2      	b.n	13ea4 <LORAWAN_SetAttr+0x4a4>
   13ebe:	780b      	ldrb	r3, [r1, #0]
   13ec0:	260a      	movs	r6, #10
   13ec2:	2b08      	cmp	r3, #8
   13ec4:	d900      	bls.n	13ec8 <LORAWAN_SetAttr+0x4c8>
   13ec6:	e6be      	b.n	13c46 <LORAWAN_SetAttr+0x246>
   13ec8:	2288      	movs	r2, #136	; 0x88
   13eca:	0092      	lsls	r2, r2, #2
   13ecc:	54a3      	strb	r3, [r4, r2]
   13ece:	210d      	movs	r1, #13
   13ed0:	e728      	b.n	13d24 <LORAWAN_SetAttr+0x324>
   13ed2:	780a      	ldrb	r2, [r1, #0]
   13ed4:	4b16      	ldr	r3, [pc, #88]	; (13f30 <LORAWAN_SetAttr+0x530>)
   13ed6:	54e2      	strb	r2, [r4, r3]
   13ed8:	e5fd      	b.n	13ad6 <LORAWAN_SetAttr+0xd6>
   13eda:	4b16      	ldr	r3, [pc, #88]	; (13f34 <LORAWAN_SetAttr+0x534>)
   13edc:	4798      	blx	r3
   13ede:	e776      	b.n	13dce <LORAWAN_SetAttr+0x3ce>
   13ee0:	0000e0f9 	.word	0x0000e0f9
   13ee4:	00012e95 	.word	0x00012e95
   13ee8:	00012e25 	.word	0x00012e25
   13eec:	00011985 	.word	0x00011985
   13ef0:	00011949 	.word	0x00011949
   13ef4:	00013985 	.word	0x00013985
   13ef8:	00010775 	.word	0x00010775
   13efc:	20002ea0 	.word	0x20002ea0
   13f00:	00014451 	.word	0x00014451
   13f04:	000146a9 	.word	0x000146a9
   13f08:	000146f5 	.word	0x000146f5
   13f0c:	00014661 	.word	0x00014661
   13f10:	00014741 	.word	0x00014741
   13f14:	00014761 	.word	0x00014761
   13f18:	0001477d 	.word	0x0001477d
   13f1c:	000147b1 	.word	0x000147b1
   13f20:	000147e9 	.word	0x000147e9
   13f24:	0000da45 	.word	0x0000da45
   13f28:	20002c6c 	.word	0x20002c6c
   13f2c:	0000d91d 	.word	0x0000d91d
   13f30:	00000221 	.word	0x00000221
   13f34:	00010811 	.word	0x00010811

00013f38 <LORAWAN_Reset>:
   13f38:	b5f0      	push	{r4, r5, r6, r7, lr}
   13f3a:	b087      	sub	sp, #28
   13f3c:	ab02      	add	r3, sp, #8
   13f3e:	1ddd      	adds	r5, r3, #7
   13f40:	23ff      	movs	r3, #255	; 0xff
   13f42:	4c83      	ldr	r4, [pc, #524]	; (14150 <LORAWAN_Reset+0x218>)
   13f44:	702b      	strb	r3, [r5, #0]
   13f46:	0023      	movs	r3, r4
   13f48:	9001      	str	r0, [sp, #4]
   13f4a:	33ef      	adds	r3, #239	; 0xef
   13f4c:	781b      	ldrb	r3, [r3, #0]
   13f4e:	2b00      	cmp	r3, #0
   13f50:	d001      	beq.n	13f56 <LORAWAN_Reset+0x1e>
   13f52:	4b80      	ldr	r3, [pc, #512]	; (14154 <LORAWAN_Reset+0x21c>)
   13f54:	4798      	blx	r3
   13f56:	002a      	movs	r2, r5
   13f58:	4b7f      	ldr	r3, [pc, #508]	; (14158 <LORAWAN_Reset+0x220>)
   13f5a:	2100      	movs	r1, #0
   13f5c:	2023      	movs	r0, #35	; 0x23
   13f5e:	4798      	blx	r3
   13f60:	782b      	ldrb	r3, [r5, #0]
   13f62:	9a01      	ldr	r2, [sp, #4]
   13f64:	4293      	cmp	r3, r2
   13f66:	d001      	beq.n	13f6c <LORAWAN_Reset+0x34>
   13f68:	4b7c      	ldr	r3, [pc, #496]	; (1415c <LORAWAN_Reset+0x224>)
   13f6a:	4798      	blx	r3
   13f6c:	238c      	movs	r3, #140	; 0x8c
   13f6e:	0021      	movs	r1, r4
   13f70:	4a7b      	ldr	r2, [pc, #492]	; (14160 <LORAWAN_Reset+0x228>)
   13f72:	009b      	lsls	r3, r3, #2
   13f74:	50e2      	str	r2, [r4, r3]
   13f76:	3bfd      	subs	r3, #253	; 0xfd
   13f78:	31f7      	adds	r1, #247	; 0xf7
   13f7a:	3bff      	subs	r3, #255	; 0xff
   13f7c:	700b      	strb	r3, [r1, #0]
   13f7e:	2000      	movs	r0, #0
   13f80:	4b78      	ldr	r3, [pc, #480]	; (14164 <LORAWAN_Reset+0x22c>)
   13f82:	4798      	blx	r3
   13f84:	0023      	movs	r3, r4
   13f86:	2201      	movs	r2, #1
   13f88:	33f4      	adds	r3, #244	; 0xf4
   13f8a:	701a      	strb	r2, [r3, #0]
   13f8c:	0023      	movs	r3, r4
   13f8e:	2205      	movs	r2, #5
   13f90:	33f5      	adds	r3, #245	; 0xf5
   13f92:	701a      	strb	r2, [r3, #0]
   13f94:	0023      	movs	r3, r4
   13f96:	32fa      	adds	r2, #250	; 0xfa
   13f98:	33dd      	adds	r3, #221	; 0xdd
   13f9a:	701a      	strb	r2, [r3, #0]
   13f9c:	0023      	movs	r3, r4
   13f9e:	2500      	movs	r5, #0
   13fa0:	33de      	adds	r3, #222	; 0xde
   13fa2:	701d      	strb	r5, [r3, #0]
   13fa4:	0023      	movs	r3, r4
   13fa6:	33c6      	adds	r3, #198	; 0xc6
   13fa8:	801d      	strh	r5, [r3, #0]
   13faa:	0023      	movs	r3, r4
   13fac:	3308      	adds	r3, #8
   13fae:	67dd      	str	r5, [r3, #124]	; 0x7c
   13fb0:	1d23      	adds	r3, r4, #4
   13fb2:	67dd      	str	r5, [r3, #124]	; 0x7c
   13fb4:	0023      	movs	r3, r4
   13fb6:	33c4      	adds	r3, #196	; 0xc4
   13fb8:	801d      	strh	r5, [r3, #0]
   13fba:	0023      	movs	r3, r4
   13fbc:	3390      	adds	r3, #144	; 0x90
   13fbe:	701d      	strb	r5, [r3, #0]
   13fc0:	0023      	movs	r3, r4
   13fc2:	33c2      	adds	r3, #194	; 0xc2
   13fc4:	801d      	strh	r5, [r3, #0]
   13fc6:	0023      	movs	r3, r4
   13fc8:	33ed      	adds	r3, #237	; 0xed
   13fca:	701d      	strb	r5, [r3, #0]
   13fcc:	0023      	movs	r3, r4
   13fce:	33ee      	adds	r3, #238	; 0xee
   13fd0:	701d      	strb	r5, [r3, #0]
   13fd2:	0023      	movs	r3, r4
   13fd4:	3af9      	subs	r2, #249	; 0xf9
   13fd6:	33f8      	adds	r3, #248	; 0xf8
   13fd8:	601a      	str	r2, [r3, #0]
   13fda:	0023      	movs	r3, r4
   13fdc:	33fc      	adds	r3, #252	; 0xfc
   13fde:	601d      	str	r5, [r3, #0]
   13fe0:	0023      	movs	r3, r4
   13fe2:	33fe      	adds	r3, #254	; 0xfe
   13fe4:	829d      	strh	r5, [r3, #20]
   13fe6:	82dd      	strh	r5, [r3, #22]
   13fe8:	320a      	adds	r2, #10
   13fea:	0029      	movs	r1, r5
   13fec:	4b5e      	ldr	r3, [pc, #376]	; (14168 <LORAWAN_Reset+0x230>)
   13fee:	485f      	ldr	r0, [pc, #380]	; (1416c <LORAWAN_Reset+0x234>)
   13ff0:	4798      	blx	r3
   13ff2:	2385      	movs	r3, #133	; 0x85
   13ff4:	2201      	movs	r2, #1
   13ff6:	2607      	movs	r6, #7
   13ff8:	009b      	lsls	r3, r3, #2
   13ffa:	54e2      	strb	r2, [r4, r3]
   13ffc:	0029      	movs	r1, r5
   13ffe:	0032      	movs	r2, r6
   14000:	4b59      	ldr	r3, [pc, #356]	; (14168 <LORAWAN_Reset+0x230>)
   14002:	485b      	ldr	r0, [pc, #364]	; (14170 <LORAWAN_Reset+0x238>)
   14004:	4798      	blx	r3
   14006:	2388      	movs	r3, #136	; 0x88
   14008:	2201      	movs	r2, #1
   1400a:	009b      	lsls	r3, r3, #2
   1400c:	54e2      	strb	r2, [r4, r3]
   1400e:	0023      	movs	r3, r4
   14010:	338c      	adds	r3, #140	; 0x8c
   14012:	801d      	strh	r5, [r3, #0]
   14014:	0023      	movs	r3, r4
   14016:	33da      	adds	r3, #218	; 0xda
   14018:	701e      	strb	r6, [r3, #0]
   1401a:	0023      	movs	r3, r4
   1401c:	33d9      	adds	r3, #217	; 0xd9
   1401e:	701d      	strb	r5, [r3, #0]
   14020:	0023      	movs	r3, r4
   14022:	33dc      	adds	r3, #220	; 0xdc
   14024:	701d      	strb	r5, [r3, #0]
   14026:	0023      	movs	r3, r4
   14028:	33db      	adds	r3, #219	; 0xdb
   1402a:	701d      	strb	r5, [r3, #0]
   1402c:	9801      	ldr	r0, [sp, #4]
   1402e:	4b51      	ldr	r3, [pc, #324]	; (14174 <LORAWAN_Reset+0x23c>)
   14030:	67e5      	str	r5, [r4, #124]	; 0x7c
   14032:	4798      	blx	r3
   14034:	0007      	movs	r7, r0
   14036:	2808      	cmp	r0, #8
   14038:	d000      	beq.n	1403c <LORAWAN_Reset+0x104>
   1403a:	e086      	b.n	1414a <LORAWAN_Reset+0x212>
   1403c:	4e4e      	ldr	r6, [pc, #312]	; (14178 <LORAWAN_Reset+0x240>)
   1403e:	4a4f      	ldr	r2, [pc, #316]	; (1417c <LORAWAN_Reset+0x244>)
   14040:	0029      	movs	r1, r5
   14042:	47b0      	blx	r6
   14044:	4a4e      	ldr	r2, [pc, #312]	; (14180 <LORAWAN_Reset+0x248>)
   14046:	0029      	movs	r1, r5
   14048:	200e      	movs	r0, #14
   1404a:	47b0      	blx	r6
   1404c:	0023      	movs	r3, r4
   1404e:	4a4d      	ldr	r2, [pc, #308]	; (14184 <LORAWAN_Reset+0x24c>)
   14050:	33e0      	adds	r3, #224	; 0xe0
   14052:	0029      	movs	r1, r5
   14054:	2006      	movs	r0, #6
   14056:	701d      	strb	r5, [r3, #0]
   14058:	47b0      	blx	r6
   1405a:	4b4b      	ldr	r3, [pc, #300]	; (14188 <LORAWAN_Reset+0x250>)
   1405c:	4798      	blx	r3
   1405e:	466a      	mov	r2, sp
   14060:	0023      	movs	r3, r4
   14062:	7912      	ldrb	r2, [r2, #4]
   14064:	33f6      	adds	r3, #246	; 0xf6
   14066:	701a      	strb	r2, [r3, #0]
   14068:	0029      	movs	r1, r5
   1406a:	4b48      	ldr	r3, [pc, #288]	; (1418c <LORAWAN_Reset+0x254>)
   1406c:	0028      	movs	r0, r5
   1406e:	4798      	blx	r3
   14070:	2210      	movs	r2, #16
   14072:	34ff      	adds	r4, #255	; 0xff
   14074:	7c63      	ldrb	r3, [r4, #17]
   14076:	4213      	tst	r3, r2
   14078:	d006      	beq.n	14088 <LORAWAN_Reset+0x150>
   1407a:	ab02      	add	r3, sp, #8
   1407c:	1d99      	adds	r1, r3, #6
   1407e:	2301      	movs	r3, #1
   14080:	0038      	movs	r0, r7
   14082:	700b      	strb	r3, [r1, #0]
   14084:	4b37      	ldr	r3, [pc, #220]	; (14164 <LORAWAN_Reset+0x22c>)
   14086:	4798      	blx	r3
   14088:	4b41      	ldr	r3, [pc, #260]	; (14190 <LORAWAN_Reset+0x258>)
   1408a:	4942      	ldr	r1, [pc, #264]	; (14194 <LORAWAN_Reset+0x25c>)
   1408c:	201e      	movs	r0, #30
   1408e:	4798      	blx	r3
   14090:	4c2f      	ldr	r4, [pc, #188]	; (14150 <LORAWAN_Reset+0x218>)
   14092:	0023      	movs	r3, r4
   14094:	33ff      	adds	r3, #255	; 0xff
   14096:	7c5b      	ldrb	r3, [r3, #17]
   14098:	075b      	lsls	r3, r3, #29
   1409a:	d507      	bpl.n	140ac <LORAWAN_Reset+0x174>
   1409c:	2100      	movs	r1, #0
   1409e:	aa04      	add	r2, sp, #16
   140a0:	2032      	movs	r0, #50	; 0x32
   140a2:	47b0      	blx	r6
   140a4:	a904      	add	r1, sp, #16
   140a6:	2027      	movs	r0, #39	; 0x27
   140a8:	4b3b      	ldr	r3, [pc, #236]	; (14198 <LORAWAN_Reset+0x260>)
   140aa:	4798      	blx	r3
   140ac:	4a3b      	ldr	r2, [pc, #236]	; (1419c <LORAWAN_Reset+0x264>)
   140ae:	2100      	movs	r1, #0
   140b0:	2009      	movs	r0, #9
   140b2:	47b0      	blx	r6
   140b4:	4a3a      	ldr	r2, [pc, #232]	; (141a0 <LORAWAN_Reset+0x268>)
   140b6:	2100      	movs	r1, #0
   140b8:	200a      	movs	r0, #10
   140ba:	47b0      	blx	r6
   140bc:	4a39      	ldr	r2, [pc, #228]	; (141a4 <LORAWAN_Reset+0x26c>)
   140be:	2100      	movs	r1, #0
   140c0:	2036      	movs	r0, #54	; 0x36
   140c2:	47b0      	blx	r6
   140c4:	ad04      	add	r5, sp, #16
   140c6:	4a38      	ldr	r2, [pc, #224]	; (141a8 <LORAWAN_Reset+0x270>)
   140c8:	2100      	movs	r1, #0
   140ca:	2037      	movs	r0, #55	; 0x37
   140cc:	47b0      	blx	r6
   140ce:	002a      	movs	r2, r5
   140d0:	2100      	movs	r1, #0
   140d2:	2014      	movs	r0, #20
   140d4:	47b0      	blx	r6
   140d6:	0023      	movs	r3, r4
   140d8:	782a      	ldrb	r2, [r5, #0]
   140da:	33ea      	adds	r3, #234	; 0xea
   140dc:	701a      	strb	r2, [r3, #0]
   140de:	0023      	movs	r3, r4
   140e0:	786a      	ldrb	r2, [r5, #1]
   140e2:	33eb      	adds	r3, #235	; 0xeb
   140e4:	701a      	strb	r2, [r3, #0]
   140e6:	0023      	movs	r3, r4
   140e8:	2500      	movs	r5, #0
   140ea:	33d6      	adds	r3, #214	; 0xd6
   140ec:	801d      	strh	r5, [r3, #0]
   140ee:	2265      	movs	r2, #101	; 0x65
   140f0:	0029      	movs	r1, r5
   140f2:	0020      	movs	r0, r4
   140f4:	4b1c      	ldr	r3, [pc, #112]	; (14168 <LORAWAN_Reset+0x230>)
   140f6:	4798      	blx	r3
   140f8:	0023      	movs	r3, r4
   140fa:	22fa      	movs	r2, #250	; 0xfa
   140fc:	33c8      	adds	r3, #200	; 0xc8
   140fe:	0092      	lsls	r2, r2, #2
   14100:	801a      	strh	r2, [r3, #0]
   14102:	0022      	movs	r2, r4
   14104:	23fa      	movs	r3, #250	; 0xfa
   14106:	32ca      	adds	r2, #202	; 0xca
   14108:	00db      	lsls	r3, r3, #3
   1410a:	8013      	strh	r3, [r2, #0]
   1410c:	0022      	movs	r2, r4
   1410e:	4927      	ldr	r1, [pc, #156]	; (141ac <LORAWAN_Reset+0x274>)
   14110:	32cc      	adds	r2, #204	; 0xcc
   14112:	8011      	strh	r1, [r2, #0]
   14114:	0022      	movs	r2, r4
   14116:	4926      	ldr	r1, [pc, #152]	; (141b0 <LORAWAN_Reset+0x278>)
   14118:	32ce      	adds	r2, #206	; 0xce
   1411a:	8011      	strh	r1, [r2, #0]
   1411c:	0022      	movs	r2, r4
   1411e:	32d2      	adds	r2, #210	; 0xd2
   14120:	8013      	strh	r3, [r2, #0]
   14122:	0023      	movs	r3, r4
   14124:	2220      	movs	r2, #32
   14126:	33d5      	adds	r3, #213	; 0xd5
   14128:	701a      	strb	r2, [r3, #0]
   1412a:	0023      	movs	r3, r4
   1412c:	1892      	adds	r2, r2, r2
   1412e:	33d4      	adds	r3, #212	; 0xd4
   14130:	701a      	strb	r2, [r3, #0]
   14132:	2380      	movs	r3, #128	; 0x80
   14134:	34d0      	adds	r4, #208	; 0xd0
   14136:	01db      	lsls	r3, r3, #7
   14138:	8023      	strh	r3, [r4, #0]
   1413a:	0028      	movs	r0, r5
   1413c:	4b1d      	ldr	r3, [pc, #116]	; (141b4 <LORAWAN_Reset+0x27c>)
   1413e:	4798      	blx	r3
   14140:	4b1d      	ldr	r3, [pc, #116]	; (141b8 <LORAWAN_Reset+0x280>)
   14142:	4798      	blx	r3
   14144:	0038      	movs	r0, r7
   14146:	b007      	add	sp, #28
   14148:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1414a:	270a      	movs	r7, #10
   1414c:	e7fa      	b.n	14144 <LORAWAN_Reset+0x20c>
   1414e:	46c0      	nop			; (mov r8, r8)
   14150:	20002b5c 	.word	0x20002b5c
   14154:	0000fe25 	.word	0x0000fe25
   14158:	000119bd 	.word	0x000119bd
   1415c:	0000db99 	.word	0x0000db99
   14160:	01050000 	.word	0x01050000
   14164:	00014c69 	.word	0x00014c69
   14168:	00019ec9 	.word	0x00019ec9
   1416c:	20002c5c 	.word	0x20002c5c
   14170:	20002d73 	.word	0x20002d73
   14174:	0000dab9 	.word	0x0000dab9
   14178:	0000d91d 	.word	0x0000d91d
   1417c:	20002bc5 	.word	0x20002bc5
   14180:	20002c6c 	.word	0x20002c6c
   14184:	20002c48 	.word	0x20002c48
   14188:	00014e65 	.word	0x00014e65
   1418c:	0000e0f9 	.word	0x0000e0f9
   14190:	00014b79 	.word	0x00014b79
   14194:	20002d7b 	.word	0x20002d7b
   14198:	00013a01 	.word	0x00013a01
   1419c:	20002bca 	.word	0x20002bca
   141a0:	20002bc6 	.word	0x20002bc6
   141a4:	20002c3d 	.word	0x20002c3d
   141a8:	20002c3b 	.word	0x20002c3b
   141ac:	00001388 	.word	0x00001388
   141b0:	00001770 	.word	0x00001770
   141b4:	00010775 	.word	0x00010775
   141b8:	000143fd 	.word	0x000143fd

000141bc <LORAWAN_ReadyToSleep>:
   141bc:	4b08      	ldr	r3, [pc, #32]	; (141e0 <LORAWAN_ReadyToSleep+0x24>)
   141be:	001a      	movs	r2, r3
   141c0:	32f4      	adds	r2, #244	; 0xf4
   141c2:	7812      	ldrb	r2, [r2, #0]
   141c4:	2a01      	cmp	r2, #1
   141c6:	d002      	beq.n	141ce <LORAWAN_ReadyToSleep+0x12>
   141c8:	2000      	movs	r0, #0
   141ca:	2a04      	cmp	r2, #4
   141cc:	d106      	bne.n	141dc <LORAWAN_ReadyToSleep+0x20>
   141ce:	337c      	adds	r3, #124	; 0x7c
   141d0:	7818      	ldrb	r0, [r3, #0]
   141d2:	230e      	movs	r3, #14
   141d4:	4018      	ands	r0, r3
   141d6:	4243      	negs	r3, r0
   141d8:	4158      	adcs	r0, r3
   141da:	b2c0      	uxtb	r0, r0
   141dc:	4770      	bx	lr
   141de:	46c0      	nop			; (mov r8, r8)
   141e0:	20002b5c 	.word	0x20002b5c

000141e4 <LorawanClasscUlAckTimerCallback>:
   141e4:	2102      	movs	r1, #2
   141e6:	4b03      	ldr	r3, [pc, #12]	; (141f4 <LorawanClasscUlAckTimerCallback+0x10>)
   141e8:	338c      	adds	r3, #140	; 0x8c
   141ea:	781a      	ldrb	r2, [r3, #0]
   141ec:	438a      	bics	r2, r1
   141ee:	701a      	strb	r2, [r3, #0]
   141f0:	4770      	bx	lr
   141f2:	46c0      	nop			; (mov r8, r8)
   141f4:	20002b5c 	.word	0x20002b5c

000141f8 <LorawanClasscValidateSend>:
   141f8:	2385      	movs	r3, #133	; 0x85
   141fa:	b510      	push	{r4, lr}
   141fc:	4c0a      	ldr	r4, [pc, #40]	; (14228 <LorawanClasscValidateSend+0x30>)
   141fe:	009b      	lsls	r3, r3, #2
   14200:	5ce3      	ldrb	r3, [r4, r3]
   14202:	2b00      	cmp	r3, #0
   14204:	d008      	beq.n	14218 <LorawanClasscValidateSend+0x20>
   14206:	220e      	movs	r2, #14
   14208:	347c      	adds	r4, #124	; 0x7c
   1420a:	7823      	ldrb	r3, [r4, #0]
   1420c:	2008      	movs	r0, #8
   1420e:	4013      	ands	r3, r2
   14210:	2b02      	cmp	r3, #2
   14212:	d100      	bne.n	14216 <LorawanClasscValidateSend+0x1e>
   14214:	2011      	movs	r0, #17
   14216:	bd10      	pop	{r4, pc}
   14218:	0023      	movs	r3, r4
   1421a:	33ff      	adds	r3, #255	; 0xff
   1421c:	7f58      	ldrb	r0, [r3, #29]
   1421e:	4b03      	ldr	r3, [pc, #12]	; (1422c <LorawanClasscValidateSend+0x34>)
   14220:	4798      	blx	r3
   14222:	2800      	cmp	r0, #0
   14224:	d1ef      	bne.n	14206 <LorawanClasscValidateSend+0xe>
   14226:	e7f5      	b.n	14214 <LorawanClasscValidateSend+0x1c>
   14228:	20002b5c 	.word	0x20002b5c
   1422c:	0000efc1 	.word	0x0000efc1

00014230 <LorawanClasscPause>:
   14230:	b537      	push	{r0, r1, r2, r4, r5, lr}
   14232:	4c16      	ldr	r4, [pc, #88]	; (1428c <LorawanClasscPause+0x5c>)
   14234:	220e      	movs	r2, #14
   14236:	0023      	movs	r3, r4
   14238:	337c      	adds	r3, #124	; 0x7c
   1423a:	781b      	ldrb	r3, [r3, #0]
   1423c:	4013      	ands	r3, r2
   1423e:	2b0a      	cmp	r3, #10
   14240:	d121      	bne.n	14286 <LorawanClasscPause+0x56>
   14242:	2385      	movs	r3, #133	; 0x85
   14244:	009b      	lsls	r3, r3, #2
   14246:	5ce3      	ldrb	r3, [r4, r3]
   14248:	2b00      	cmp	r3, #0
   1424a:	d00c      	beq.n	14266 <LorawanClasscPause+0x36>
   1424c:	2301      	movs	r3, #1
   1424e:	a801      	add	r0, sp, #4
   14250:	7003      	strb	r3, [r0, #0]
   14252:	4b0f      	ldr	r3, [pc, #60]	; (14290 <LorawanClasscPause+0x60>)
   14254:	4798      	blx	r3
   14256:	220e      	movs	r2, #14
   14258:	2001      	movs	r0, #1
   1425a:	347c      	adds	r4, #124	; 0x7c
   1425c:	7823      	ldrb	r3, [r4, #0]
   1425e:	4240      	negs	r0, r0
   14260:	4393      	bics	r3, r2
   14262:	7023      	strb	r3, [r4, #0]
   14264:	e007      	b.n	14276 <LorawanClasscPause+0x46>
   14266:	0023      	movs	r3, r4
   14268:	33e8      	adds	r3, #232	; 0xe8
   1426a:	7818      	ldrb	r0, [r3, #0]
   1426c:	4d09      	ldr	r5, [pc, #36]	; (14294 <LorawanClasscPause+0x64>)
   1426e:	47a8      	blx	r5
   14270:	2800      	cmp	r0, #0
   14272:	d001      	beq.n	14278 <LorawanClasscPause+0x48>
   14274:	2000      	movs	r0, #0
   14276:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
   14278:	0023      	movs	r3, r4
   1427a:	33ff      	adds	r3, #255	; 0xff
   1427c:	7f58      	ldrb	r0, [r3, #29]
   1427e:	47a8      	blx	r5
   14280:	2800      	cmp	r0, #0
   14282:	d0e8      	beq.n	14256 <LorawanClasscPause+0x26>
   14284:	e7f6      	b.n	14274 <LorawanClasscPause+0x44>
   14286:	2b00      	cmp	r3, #0
   14288:	d0e5      	beq.n	14256 <LorawanClasscPause+0x26>
   1428a:	e7f3      	b.n	14274 <LorawanClasscPause+0x44>
   1428c:	20002b5c 	.word	0x20002b5c
   14290:	00015e6d 	.word	0x00015e6d
   14294:	0000efc1 	.word	0x0000efc1

00014298 <LorawanClasscReceiveWindow1Callback>:
   14298:	2301      	movs	r3, #1
   1429a:	b507      	push	{r0, r1, r2, lr}
   1429c:	a801      	add	r0, sp, #4
   1429e:	7003      	strb	r3, [r0, #0]
   142a0:	4b01      	ldr	r3, [pc, #4]	; (142a8 <LorawanClasscReceiveWindow1Callback+0x10>)
   142a2:	4798      	blx	r3
   142a4:	bd07      	pop	{r0, r1, r2, pc}
   142a6:	46c0      	nop			; (mov r8, r8)
   142a8:	00015e6d 	.word	0x00015e6d

000142ac <LorawanClasscRxDone>:
   142ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
   142ae:	221f      	movs	r2, #31
   142b0:	7803      	ldrb	r3, [r0, #0]
   142b2:	4c13      	ldr	r4, [pc, #76]	; (14300 <LorawanClasscRxDone+0x54>)
   142b4:	4393      	bics	r3, r2
   142b6:	2ba0      	cmp	r3, #160	; 0xa0
   142b8:	d10c      	bne.n	142d4 <LorawanClasscRxDone+0x28>
   142ba:	0025      	movs	r5, r4
   142bc:	35ff      	adds	r5, #255	; 0xff
   142be:	7f68      	ldrb	r0, [r5, #29]
   142c0:	4b10      	ldr	r3, [pc, #64]	; (14304 <LorawanClasscRxDone+0x58>)
   142c2:	4798      	blx	r3
   142c4:	1e02      	subs	r2, r0, #0
   142c6:	d014      	beq.n	142f2 <LorawanClasscRxDone+0x46>
   142c8:	0022      	movs	r2, r4
   142ca:	2102      	movs	r1, #2
   142cc:	328c      	adds	r2, #140	; 0x8c
   142ce:	7813      	ldrb	r3, [r2, #0]
   142d0:	438b      	bics	r3, r1
   142d2:	7013      	strb	r3, [r2, #0]
   142d4:	347c      	adds	r4, #124	; 0x7c
   142d6:	7823      	ldrb	r3, [r4, #0]
   142d8:	220e      	movs	r2, #14
   142da:	0019      	movs	r1, r3
   142dc:	4011      	ands	r1, r2
   142de:	2906      	cmp	r1, #6
   142e0:	d103      	bne.n	142ea <LorawanClasscRxDone+0x3e>
   142e2:	4393      	bics	r3, r2
   142e4:	3a04      	subs	r2, #4
   142e6:	4313      	orrs	r3, r2
   142e8:	7023      	strb	r3, [r4, #0]
   142ea:	2000      	movs	r0, #0
   142ec:	4b06      	ldr	r3, [pc, #24]	; (14308 <LorawanClasscRxDone+0x5c>)
   142ee:	4798      	blx	r3
   142f0:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
   142f2:	7f68      	ldrb	r0, [r5, #29]
   142f4:	4b05      	ldr	r3, [pc, #20]	; (1430c <LorawanClasscRxDone+0x60>)
   142f6:	9200      	str	r2, [sp, #0]
   142f8:	4905      	ldr	r1, [pc, #20]	; (14310 <LorawanClasscRxDone+0x64>)
   142fa:	4d06      	ldr	r5, [pc, #24]	; (14314 <LorawanClasscRxDone+0x68>)
   142fc:	47a8      	blx	r5
   142fe:	e7e9      	b.n	142d4 <LorawanClasscRxDone+0x28>
   14300:	20002b5c 	.word	0x20002b5c
   14304:	0000efc1 	.word	0x0000efc1
   14308:	00012759 	.word	0x00012759
   1430c:	000141e5 	.word	0x000141e5
   14310:	001e8480 	.word	0x001e8480
   14314:	0000ee29 	.word	0x0000ee29

00014318 <LorawanClasscTxDone>:
   14318:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1431a:	4c1a      	ldr	r4, [pc, #104]	; (14384 <LorawanClasscTxDone+0x6c>)
   1431c:	0023      	movs	r3, r4
   1431e:	33ca      	adds	r3, #202	; 0xca
   14320:	881d      	ldrh	r5, [r3, #0]
   14322:	0023      	movs	r3, r4
   14324:	338c      	adds	r3, #140	; 0x8c
   14326:	781b      	ldrb	r3, [r3, #0]
   14328:	07db      	lsls	r3, r3, #31
   1432a:	d524      	bpl.n	14376 <LorawanClasscTxDone+0x5e>
   1432c:	0023      	movs	r3, r4
   1432e:	0022      	movs	r2, r4
   14330:	33da      	adds	r3, #218	; 0xda
   14332:	781b      	ldrb	r3, [r3, #0]
   14334:	32dc      	adds	r2, #220	; 0xdc
   14336:	3301      	adds	r3, #1
   14338:	7812      	ldrb	r2, [r2, #0]
   1433a:	4293      	cmp	r3, r2
   1433c:	db06      	blt.n	1434c <LorawanClasscTxDone+0x34>
   1433e:	4b12      	ldr	r3, [pc, #72]	; (14388 <LorawanClasscTxDone+0x70>)
   14340:	5ce3      	ldrb	r3, [r4, r3]
   14342:	2b00      	cmp	r3, #0
   14344:	d002      	beq.n	1434c <LorawanClasscTxDone+0x34>
   14346:	23fa      	movs	r3, #250	; 0xfa
   14348:	00db      	lsls	r3, r3, #3
   1434a:	18ed      	adds	r5, r5, r3
   1434c:	0023      	movs	r3, r4
   1434e:	33ff      	adds	r3, #255	; 0xff
   14350:	1945      	adds	r5, r0, r5
   14352:	7f58      	ldrb	r0, [r3, #29]
   14354:	4b0d      	ldr	r3, [pc, #52]	; (1438c <LorawanClasscTxDone+0x74>)
   14356:	4798      	blx	r3
   14358:	34e8      	adds	r4, #232	; 0xe8
   1435a:	21fa      	movs	r1, #250	; 0xfa
   1435c:	7820      	ldrb	r0, [r4, #0]
   1435e:	2400      	movs	r4, #0
   14360:	0089      	lsls	r1, r1, #2
   14362:	4369      	muls	r1, r5
   14364:	0022      	movs	r2, r4
   14366:	4d0a      	ldr	r5, [pc, #40]	; (14390 <LorawanClasscTxDone+0x78>)
   14368:	9400      	str	r4, [sp, #0]
   1436a:	4b0a      	ldr	r3, [pc, #40]	; (14394 <LorawanClasscTxDone+0x7c>)
   1436c:	47a8      	blx	r5
   1436e:	0020      	movs	r0, r4
   14370:	4b09      	ldr	r3, [pc, #36]	; (14398 <LorawanClasscTxDone+0x80>)
   14372:	4798      	blx	r3
   14374:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
   14376:	0023      	movs	r3, r4
   14378:	0022      	movs	r2, r4
   1437a:	33d9      	adds	r3, #217	; 0xd9
   1437c:	781b      	ldrb	r3, [r3, #0]
   1437e:	32db      	adds	r2, #219	; 0xdb
   14380:	3301      	adds	r3, #1
   14382:	e7d9      	b.n	14338 <LorawanClasscTxDone+0x20>
   14384:	20002b5c 	.word	0x20002b5c
   14388:	0000021e 	.word	0x0000021e
   1438c:	0000f141 	.word	0x0000f141
   14390:	0000ee29 	.word	0x0000ee29
   14394:	00012621 	.word	0x00012621
   14398:	00012759 	.word	0x00012759

0001439c <LorawanClasscRxTimeout>:
   1439c:	b510      	push	{r4, lr}
   1439e:	4b08      	ldr	r3, [pc, #32]	; (143c0 <LorawanClasscRxTimeout+0x24>)
   143a0:	210e      	movs	r1, #14
   143a2:	337c      	adds	r3, #124	; 0x7c
   143a4:	781a      	ldrb	r2, [r3, #0]
   143a6:	0010      	movs	r0, r2
   143a8:	4008      	ands	r0, r1
   143aa:	2806      	cmp	r0, #6
   143ac:	d106      	bne.n	143bc <LorawanClasscRxTimeout+0x20>
   143ae:	438a      	bics	r2, r1
   143b0:	3904      	subs	r1, #4
   143b2:	430a      	orrs	r2, r1
   143b4:	701a      	strb	r2, [r3, #0]
   143b6:	2000      	movs	r0, #0
   143b8:	4b02      	ldr	r3, [pc, #8]	; (143c4 <LorawanClasscRxTimeout+0x28>)
   143ba:	4798      	blx	r3
   143bc:	bd10      	pop	{r4, pc}
   143be:	46c0      	nop			; (mov r8, r8)
   143c0:	20002b5c 	.word	0x20002b5c
   143c4:	00012759 	.word	0x00012759

000143c8 <LorawanClasscNotifyAppOnReceive>:
   143c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   143ca:	001f      	movs	r7, r3
   143cc:	4b08      	ldr	r3, [pc, #32]	; (143f0 <LorawanClasscNotifyAppOnReceive+0x28>)
   143ce:	0004      	movs	r4, r0
   143d0:	33ff      	adds	r3, #255	; 0xff
   143d2:	7f58      	ldrb	r0, [r3, #29]
   143d4:	4b07      	ldr	r3, [pc, #28]	; (143f4 <LorawanClasscNotifyAppOnReceive+0x2c>)
   143d6:	000d      	movs	r5, r1
   143d8:	0016      	movs	r6, r2
   143da:	4798      	blx	r3
   143dc:	2800      	cmp	r0, #0
   143de:	d105      	bne.n	143ec <LorawanClasscNotifyAppOnReceive+0x24>
   143e0:	0020      	movs	r0, r4
   143e2:	003b      	movs	r3, r7
   143e4:	0032      	movs	r2, r6
   143e6:	0029      	movs	r1, r5
   143e8:	4c03      	ldr	r4, [pc, #12]	; (143f8 <LorawanClasscNotifyAppOnReceive+0x30>)
   143ea:	47a0      	blx	r4
   143ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   143ee:	46c0      	nop			; (mov r8, r8)
   143f0:	20002b5c 	.word	0x20002b5c
   143f4:	0000efc1 	.word	0x0000efc1
   143f8:	0001184d 	.word	0x0001184d

000143fc <LorawanMcastInit>:
   143fc:	2290      	movs	r2, #144	; 0x90
   143fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   14400:	2500      	movs	r5, #0
   14402:	4b0f      	ldr	r3, [pc, #60]	; (14440 <LorawanMcastInit+0x44>)
   14404:	0052      	lsls	r2, r2, #1
   14406:	549d      	strb	r5, [r3, r2]
   14408:	2222      	movs	r2, #34	; 0x22
   1440a:	2701      	movs	r7, #1
   1440c:	32ff      	adds	r2, #255	; 0xff
   1440e:	4c0d      	ldr	r4, [pc, #52]	; (14444 <LorawanMcastInit+0x48>)
   14410:	549d      	strb	r5, [r3, r2]
   14412:	427f      	negs	r7, r7
   14414:	0023      	movs	r3, r4
   14416:	3b14      	subs	r3, #20
   14418:	601f      	str	r7, [r3, #0]
   1441a:	2210      	movs	r2, #16
   1441c:	2100      	movs	r1, #0
   1441e:	0020      	movs	r0, r4
   14420:	4e09      	ldr	r6, [pc, #36]	; (14448 <LorawanMcastInit+0x4c>)
   14422:	47b0      	blx	r6
   14424:	0020      	movs	r0, r4
   14426:	2210      	movs	r2, #16
   14428:	3810      	subs	r0, #16
   1442a:	2100      	movs	r1, #0
   1442c:	47b0      	blx	r6
   1442e:	4b07      	ldr	r3, [pc, #28]	; (1444c <LorawanMcastInit+0x50>)
   14430:	6165      	str	r5, [r4, #20]
   14432:	61a5      	str	r5, [r4, #24]
   14434:	6125      	str	r5, [r4, #16]
   14436:	343c      	adds	r4, #60	; 0x3c
   14438:	429c      	cmp	r4, r3
   1443a:	d1eb      	bne.n	14414 <LorawanMcastInit+0x18>
   1443c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1443e:	46c0      	nop			; (mov r8, r8)
   14440:	20002b5c 	.word	0x20002b5c
   14444:	20002c94 	.word	0x20002c94
   14448:	00019ec9 	.word	0x00019ec9
   1444c:	20002d84 	.word	0x20002d84

00014450 <LorawanMcastEnable>:
   14450:	0002      	movs	r2, r0
   14452:	b510      	push	{r4, lr}
   14454:	200a      	movs	r0, #10
   14456:	2903      	cmp	r1, #3
   14458:	d822      	bhi.n	144a0 <LorawanMcastEnable+0x50>
   1445a:	4b1a      	ldr	r3, [pc, #104]	; (144c4 <LorawanMcastEnable+0x74>)
   1445c:	2a00      	cmp	r2, #0
   1445e:	d020      	beq.n	144a2 <LorawanMcastEnable+0x52>
   14460:	223c      	movs	r2, #60	; 0x3c
   14462:	434a      	muls	r2, r1
   14464:	189a      	adds	r2, r3, r2
   14466:	3251      	adds	r2, #81	; 0x51
   14468:	32ff      	adds	r2, #255	; 0xff
   1446a:	7912      	ldrb	r2, [r2, #4]
   1446c:	0754      	lsls	r4, r2, #29
   1446e:	d512      	bpl.n	14496 <LorawanMcastEnable+0x46>
   14470:	0794      	lsls	r4, r2, #30
   14472:	d510      	bpl.n	14496 <LorawanMcastEnable+0x46>
   14474:	07d2      	lsls	r2, r2, #31
   14476:	0fd2      	lsrs	r2, r2, #31
   14478:	2a01      	cmp	r2, #1
   1447a:	d10c      	bne.n	14496 <LorawanMcastEnable+0x46>
   1447c:	001c      	movs	r4, r3
   1447e:	34f4      	adds	r4, #244	; 0xf4
   14480:	7824      	ldrb	r4, [r4, #0]
   14482:	0764      	lsls	r4, r4, #29
   14484:	d007      	beq.n	14496 <LorawanMcastEnable+0x46>
   14486:	2022      	movs	r0, #34	; 0x22
   14488:	408a      	lsls	r2, r1
   1448a:	30ff      	adds	r0, #255	; 0xff
   1448c:	5c19      	ldrb	r1, [r3, r0]
   1448e:	430a      	orrs	r2, r1
   14490:	541a      	strb	r2, [r3, r0]
   14492:	381a      	subs	r0, #26
   14494:	38ff      	subs	r0, #255	; 0xff
   14496:	2190      	movs	r1, #144	; 0x90
   14498:	0049      	lsls	r1, r1, #1
   1449a:	5c5a      	ldrb	r2, [r3, r1]
   1449c:	3201      	adds	r2, #1
   1449e:	545a      	strb	r2, [r3, r1]
   144a0:	bd10      	pop	{r4, pc}
   144a2:	2201      	movs	r2, #1
   144a4:	408a      	lsls	r2, r1
   144a6:	2022      	movs	r0, #34	; 0x22
   144a8:	0011      	movs	r1, r2
   144aa:	30ff      	adds	r0, #255	; 0xff
   144ac:	5c1a      	ldrb	r2, [r3, r0]
   144ae:	438a      	bics	r2, r1
   144b0:	2190      	movs	r1, #144	; 0x90
   144b2:	541a      	strb	r2, [r3, r0]
   144b4:	0049      	lsls	r1, r1, #1
   144b6:	5c5a      	ldrb	r2, [r3, r1]
   144b8:	381a      	subs	r0, #26
   144ba:	3a01      	subs	r2, #1
   144bc:	545a      	strb	r2, [r3, r1]
   144be:	38ff      	subs	r0, #255	; 0xff
   144c0:	e7ee      	b.n	144a0 <LorawanMcastEnable+0x50>
   144c2:	46c0      	nop			; (mov r8, r8)
   144c4:	20002b5c 	.word	0x20002b5c

000144c8 <LorawanMcastValidateHdr>:
   144c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   144ca:	469c      	mov	ip, r3
   144cc:	2400      	movs	r4, #0
   144ce:	230a      	movs	r3, #10
   144d0:	4f18      	ldr	r7, [pc, #96]	; (14534 <LorawanMcastValidateHdr+0x6c>)
   144d2:	b2e5      	uxtb	r5, r4
   144d4:	9501      	str	r5, [sp, #4]
   144d6:	2522      	movs	r5, #34	; 0x22
   144d8:	35ff      	adds	r5, #255	; 0xff
   144da:	5d7d      	ldrb	r5, [r7, r5]
   144dc:	2601      	movs	r6, #1
   144de:	4125      	asrs	r5, r4
   144e0:	4235      	tst	r5, r6
   144e2:	d022      	beq.n	1452a <LorawanMcastValidateHdr+0x62>
   144e4:	7886      	ldrb	r6, [r0, #2]
   144e6:	7845      	ldrb	r5, [r0, #1]
   144e8:	0236      	lsls	r6, r6, #8
   144ea:	432e      	orrs	r6, r5
   144ec:	78c5      	ldrb	r5, [r0, #3]
   144ee:	042d      	lsls	r5, r5, #16
   144f0:	432e      	orrs	r6, r5
   144f2:	7905      	ldrb	r5, [r0, #4]
   144f4:	062d      	lsls	r5, r5, #24
   144f6:	4335      	orrs	r5, r6
   144f8:	263c      	movs	r6, #60	; 0x3c
   144fa:	4366      	muls	r6, r4
   144fc:	3625      	adds	r6, #37	; 0x25
   144fe:	36ff      	adds	r6, #255	; 0xff
   14500:	59be      	ldr	r6, [r7, r6]
   14502:	42b5      	cmp	r5, r6
   14504:	d111      	bne.n	1452a <LorawanMcastValidateHdr+0x62>
   14506:	4d0c      	ldr	r5, [pc, #48]	; (14538 <LorawanMcastValidateHdr+0x70>)
   14508:	782e      	ldrb	r6, [r5, #0]
   1450a:	2506      	movs	r5, #6
   1450c:	422e      	tst	r6, r5
   1450e:	d00c      	beq.n	1452a <LorawanMcastValidateHdr+0x62>
   14510:	2a00      	cmp	r2, #0
   14512:	d00a      	beq.n	1452a <LorawanMcastValidateHdr+0x62>
   14514:	7946      	ldrb	r6, [r0, #5]
   14516:	3569      	adds	r5, #105	; 0x69
   14518:	422e      	tst	r6, r5
   1451a:	d106      	bne.n	1452a <LorawanMcastValidateHdr+0x62>
   1451c:	2903      	cmp	r1, #3
   1451e:	d104      	bne.n	1452a <LorawanMcastValidateHdr+0x62>
   14520:	466d      	mov	r5, sp
   14522:	4663      	mov	r3, ip
   14524:	792d      	ldrb	r5, [r5, #4]
   14526:	701d      	strb	r5, [r3, #0]
   14528:	2308      	movs	r3, #8
   1452a:	3401      	adds	r4, #1
   1452c:	2c04      	cmp	r4, #4
   1452e:	d1d0      	bne.n	144d2 <LorawanMcastValidateHdr+0xa>
   14530:	0018      	movs	r0, r3
   14532:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   14534:	20002b5c 	.word	0x20002b5c
   14538:	20002c50 	.word	0x20002c50

0001453c <LorawanMcastProcessPkt>:
   1453c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1453e:	0015      	movs	r5, r2
   14540:	223c      	movs	r2, #60	; 0x3c
   14542:	435a      	muls	r2, r3
   14544:	b089      	sub	sp, #36	; 0x24
   14546:	9107      	str	r1, [sp, #28]
   14548:	493d      	ldr	r1, [pc, #244]	; (14640 <LorawanMcastProcessPkt+0x104>)
   1454a:	9006      	str	r0, [sp, #24]
   1454c:	1889      	adds	r1, r1, r2
   1454e:	31fc      	adds	r1, #252	; 0xfc
   14550:	6d0c      	ldr	r4, [r1, #80]	; 0x50
   14552:	6d48      	ldr	r0, [r1, #84]	; 0x54
   14554:	6cca      	ldr	r2, [r1, #76]	; 0x4c
   14556:	4284      	cmp	r4, r0
   14558:	d21f      	bcs.n	1459a <LorawanMcastProcessPkt+0x5e>
   1455a:	2100      	movs	r1, #0
   1455c:	4294      	cmp	r4, r2
   1455e:	d802      	bhi.n	14566 <LorawanMcastProcessPkt+0x2a>
   14560:	4282      	cmp	r2, r0
   14562:	4192      	sbcs	r2, r2
   14564:	4251      	negs	r1, r2
   14566:	270a      	movs	r7, #10
   14568:	2900      	cmp	r1, #0
   1456a:	d118      	bne.n	1459e <LorawanMcastProcessPkt+0x62>
   1456c:	4a34      	ldr	r2, [pc, #208]	; (14640 <LorawanMcastProcessPkt+0x104>)
   1456e:	200e      	movs	r0, #14
   14570:	0011      	movs	r1, r2
   14572:	317c      	adds	r1, #124	; 0x7c
   14574:	780b      	ldrb	r3, [r1, #0]
   14576:	001c      	movs	r4, r3
   14578:	4004      	ands	r4, r0
   1457a:	2c06      	cmp	r4, #6
   1457c:	d107      	bne.n	1458e <LorawanMcastProcessPkt+0x52>
   1457e:	32f4      	adds	r2, #244	; 0xf4
   14580:	7812      	ldrb	r2, [r2, #0]
   14582:	2a04      	cmp	r2, #4
   14584:	d103      	bne.n	1458e <LorawanMcastProcessPkt+0x52>
   14586:	4383      	bics	r3, r0
   14588:	3206      	adds	r2, #6
   1458a:	4313      	orrs	r3, r2
   1458c:	700b      	strb	r3, [r1, #0]
   1458e:	2000      	movs	r0, #0
   14590:	4b2c      	ldr	r3, [pc, #176]	; (14644 <LorawanMcastProcessPkt+0x108>)
   14592:	4798      	blx	r3
   14594:	0038      	movs	r0, r7
   14596:	b009      	add	sp, #36	; 0x24
   14598:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1459a:	4294      	cmp	r4, r2
   1459c:	d8e0      	bhi.n	14560 <LorawanMcastProcessPkt+0x24>
   1459e:	243c      	movs	r4, #60	; 0x3c
   145a0:	435c      	muls	r4, r3
   145a2:	4e27      	ldr	r6, [pc, #156]	; (14640 <LorawanMcastProcessPkt+0x104>)
   145a4:	79ea      	ldrb	r2, [r5, #7]
   145a6:	1937      	adds	r7, r6, r4
   145a8:	003b      	movs	r3, r7
   145aa:	79a9      	ldrb	r1, [r5, #6]
   145ac:	0212      	lsls	r2, r2, #8
   145ae:	3349      	adds	r3, #73	; 0x49
   145b0:	430a      	orrs	r2, r1
   145b2:	33ff      	adds	r3, #255	; 0xff
   145b4:	801a      	strh	r2, [r3, #0]
   145b6:	2105      	movs	r1, #5
   145b8:	4b23      	ldr	r3, [pc, #140]	; (14648 <LorawanMcastProcessPkt+0x10c>)
   145ba:	37fc      	adds	r7, #252	; 0xfc
   145bc:	2000      	movs	r0, #0
   145be:	4798      	blx	r3
   145c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
   145c2:	3439      	adds	r4, #57	; 0x39
   145c4:	9304      	str	r3, [sp, #16]
   145c6:	4b21      	ldr	r3, [pc, #132]	; (1464c <LorawanMcastProcessPkt+0x110>)
   145c8:	9907      	ldr	r1, [sp, #28]
   145ca:	9303      	str	r3, [sp, #12]
   145cc:	2319      	movs	r3, #25
   145ce:	34ff      	adds	r4, #255	; 0xff
   145d0:	9302      	str	r3, [sp, #8]
   145d2:	19a4      	adds	r4, r4, r6
   145d4:	3b16      	subs	r3, #22
   145d6:	9806      	ldr	r0, [sp, #24]
   145d8:	9400      	str	r4, [sp, #0]
   145da:	390d      	subs	r1, #13
   145dc:	9301      	str	r3, [sp, #4]
   145de:	b2c9      	uxtb	r1, r1
   145e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   145e2:	2201      	movs	r2, #1
   145e4:	3009      	adds	r0, #9
   145e6:	4c1a      	ldr	r4, [pc, #104]	; (14650 <LorawanMcastProcessPkt+0x114>)
   145e8:	47a0      	blx	r4
   145ea:	2800      	cmp	r0, #0
   145ec:	d002      	beq.n	145f4 <LorawanMcastProcessPkt+0xb8>
   145ee:	201f      	movs	r0, #31
   145f0:	4b18      	ldr	r3, [pc, #96]	; (14654 <LorawanMcastProcessPkt+0x118>)
   145f2:	4798      	blx	r3
   145f4:	4918      	ldr	r1, [pc, #96]	; (14658 <LorawanMcastProcessPkt+0x11c>)
   145f6:	2708      	movs	r7, #8
   145f8:	784a      	ldrb	r2, [r1, #1]
   145fa:	780b      	ldrb	r3, [r1, #0]
   145fc:	0212      	lsls	r2, r2, #8
   145fe:	431a      	orrs	r2, r3
   14600:	788b      	ldrb	r3, [r1, #2]
   14602:	041b      	lsls	r3, r3, #16
   14604:	431a      	orrs	r2, r3
   14606:	78cb      	ldrb	r3, [r1, #3]
   14608:	061b      	lsls	r3, r3, #24
   1460a:	4313      	orrs	r3, r2
   1460c:	d0ae      	beq.n	1456c <LorawanMcastProcessPkt+0x30>
   1460e:	2220      	movs	r2, #32
   14610:	368c      	adds	r6, #140	; 0x8c
   14612:	7833      	ldrb	r3, [r6, #0]
   14614:	9906      	ldr	r1, [sp, #24]
   14616:	4393      	bics	r3, r2
   14618:	7033      	strb	r3, [r6, #0]
   1461a:	78ab      	ldrb	r3, [r5, #2]
   1461c:	7868      	ldrb	r0, [r5, #1]
   1461e:	40bb      	lsls	r3, r7
   14620:	4303      	orrs	r3, r0
   14622:	78e8      	ldrb	r0, [r5, #3]
   14624:	9a07      	ldr	r2, [sp, #28]
   14626:	0400      	lsls	r0, r0, #16
   14628:	4303      	orrs	r3, r0
   1462a:	7928      	ldrb	r0, [r5, #4]
   1462c:	3a0c      	subs	r2, #12
   1462e:	0600      	lsls	r0, r0, #24
   14630:	4318      	orrs	r0, r3
   14632:	b2d2      	uxtb	r2, r2
   14634:	19c9      	adds	r1, r1, r7
   14636:	003b      	movs	r3, r7
   14638:	4c08      	ldr	r4, [pc, #32]	; (1465c <LorawanMcastProcessPkt+0x120>)
   1463a:	47a0      	blx	r4
   1463c:	e796      	b.n	1456c <LorawanMcastProcessPkt+0x30>
   1463e:	46c0      	nop			; (mov r8, r8)
   14640:	20002b5c 	.word	0x20002b5c
   14644:	00012759 	.word	0x00012759
   14648:	0000e0f9 	.word	0x0000e0f9
   1464c:	20002eac 	.word	0x20002eac
   14650:	000113e9 	.word	0x000113e9
   14654:	000114a9 	.word	0x000114a9
   14658:	20002ea4 	.word	0x20002ea4
   1465c:	0001184d 	.word	0x0001184d

00014660 <LorawanAddMcastAddr>:
   14660:	b570      	push	{r4, r5, r6, lr}
   14662:	260a      	movs	r6, #10
   14664:	2903      	cmp	r1, #3
   14666:	d818      	bhi.n	1469a <LorawanAddMcastAddr+0x3a>
   14668:	4b0d      	ldr	r3, [pc, #52]	; (146a0 <LorawanAddMcastAddr+0x40>)
   1466a:	681a      	ldr	r2, [r3, #0]
   1466c:	0a15      	lsrs	r5, r2, #8
   1466e:	791a      	ldrb	r2, [r3, #4]
   14670:	0612      	lsls	r2, r2, #24
   14672:	432a      	orrs	r2, r5
   14674:	4282      	cmp	r2, r0
   14676:	d010      	beq.n	1469a <LorawanAddMcastAddr+0x3a>
   14678:	243c      	movs	r4, #60	; 0x3c
   1467a:	434c      	muls	r4, r1
   1467c:	191c      	adds	r4, r3, r4
   1467e:	0023      	movs	r3, r4
   14680:	33fc      	adds	r3, #252	; 0xfc
   14682:	6298      	str	r0, [r3, #40]	; 0x28
   14684:	2106      	movs	r1, #6
   14686:	2000      	movs	r0, #0
   14688:	4b06      	ldr	r3, [pc, #24]	; (146a4 <LorawanAddMcastAddr+0x44>)
   1468a:	4798      	blx	r3
   1468c:	2201      	movs	r2, #1
   1468e:	3451      	adds	r4, #81	; 0x51
   14690:	34ff      	adds	r4, #255	; 0xff
   14692:	7921      	ldrb	r1, [r4, #4]
   14694:	3e02      	subs	r6, #2
   14696:	430a      	orrs	r2, r1
   14698:	7122      	strb	r2, [r4, #4]
   1469a:	0030      	movs	r0, r6
   1469c:	bd70      	pop	{r4, r5, r6, pc}
   1469e:	46c0      	nop			; (mov r8, r8)
   146a0:	20002b5c 	.word	0x20002b5c
   146a4:	0000e0f9 	.word	0x0000e0f9

000146a8 <LorawanAddMcastAppskey>:
   146a8:	b570      	push	{r4, r5, r6, lr}
   146aa:	0006      	movs	r6, r0
   146ac:	200a      	movs	r0, #10
   146ae:	2903      	cmp	r1, #3
   146b0:	d818      	bhi.n	146e4 <LorawanAddMcastAppskey+0x3c>
   146b2:	2e00      	cmp	r6, #0
   146b4:	d016      	beq.n	146e4 <LorawanAddMcastAppskey+0x3c>
   146b6:	253c      	movs	r5, #60	; 0x3c
   146b8:	434d      	muls	r5, r1
   146ba:	0028      	movs	r0, r5
   146bc:	4c0a      	ldr	r4, [pc, #40]	; (146e8 <LorawanAddMcastAppskey+0x40>)
   146be:	3039      	adds	r0, #57	; 0x39
   146c0:	30ff      	adds	r0, #255	; 0xff
   146c2:	2210      	movs	r2, #16
   146c4:	1900      	adds	r0, r0, r4
   146c6:	0031      	movs	r1, r6
   146c8:	4b08      	ldr	r3, [pc, #32]	; (146ec <LorawanAddMcastAppskey+0x44>)
   146ca:	4798      	blx	r3
   146cc:	4b08      	ldr	r3, [pc, #32]	; (146f0 <LorawanAddMcastAppskey+0x48>)
   146ce:	2107      	movs	r1, #7
   146d0:	2000      	movs	r0, #0
   146d2:	4798      	blx	r3
   146d4:	2304      	movs	r3, #4
   146d6:	2008      	movs	r0, #8
   146d8:	1964      	adds	r4, r4, r5
   146da:	3451      	adds	r4, #81	; 0x51
   146dc:	34ff      	adds	r4, #255	; 0xff
   146de:	7922      	ldrb	r2, [r4, #4]
   146e0:	4313      	orrs	r3, r2
   146e2:	7123      	strb	r3, [r4, #4]
   146e4:	bd70      	pop	{r4, r5, r6, pc}
   146e6:	46c0      	nop			; (mov r8, r8)
   146e8:	20002b5c 	.word	0x20002b5c
   146ec:	00019da5 	.word	0x00019da5
   146f0:	0000e0f9 	.word	0x0000e0f9

000146f4 <LorawanAddMcastNwkskey>:
   146f4:	b570      	push	{r4, r5, r6, lr}
   146f6:	0006      	movs	r6, r0
   146f8:	200a      	movs	r0, #10
   146fa:	2903      	cmp	r1, #3
   146fc:	d818      	bhi.n	14730 <LorawanAddMcastNwkskey+0x3c>
   146fe:	2e00      	cmp	r6, #0
   14700:	d016      	beq.n	14730 <LorawanAddMcastNwkskey+0x3c>
   14702:	253c      	movs	r5, #60	; 0x3c
   14704:	434d      	muls	r5, r1
   14706:	0028      	movs	r0, r5
   14708:	4c0a      	ldr	r4, [pc, #40]	; (14734 <LorawanAddMcastNwkskey+0x40>)
   1470a:	3029      	adds	r0, #41	; 0x29
   1470c:	30ff      	adds	r0, #255	; 0xff
   1470e:	2210      	movs	r2, #16
   14710:	1900      	adds	r0, r0, r4
   14712:	0031      	movs	r1, r6
   14714:	4b08      	ldr	r3, [pc, #32]	; (14738 <LorawanAddMcastNwkskey+0x44>)
   14716:	4798      	blx	r3
   14718:	4b08      	ldr	r3, [pc, #32]	; (1473c <LorawanAddMcastNwkskey+0x48>)
   1471a:	2108      	movs	r1, #8
   1471c:	2000      	movs	r0, #0
   1471e:	4798      	blx	r3
   14720:	2302      	movs	r3, #2
   14722:	2008      	movs	r0, #8
   14724:	1964      	adds	r4, r4, r5
   14726:	3451      	adds	r4, #81	; 0x51
   14728:	34ff      	adds	r4, #255	; 0xff
   1472a:	7922      	ldrb	r2, [r4, #4]
   1472c:	4313      	orrs	r3, r2
   1472e:	7123      	strb	r3, [r4, #4]
   14730:	bd70      	pop	{r4, r5, r6, pc}
   14732:	46c0      	nop			; (mov r8, r8)
   14734:	20002b5c 	.word	0x20002b5c
   14738:	00019da5 	.word	0x00019da5
   1473c:	0000e0f9 	.word	0x0000e0f9

00014740 <LorawanAddMcastFcntMin>:
   14740:	220a      	movs	r2, #10
   14742:	2903      	cmp	r1, #3
   14744:	d807      	bhi.n	14756 <LorawanAddMcastFcntMin+0x16>
   14746:	233c      	movs	r3, #60	; 0x3c
   14748:	434b      	muls	r3, r1
   1474a:	4904      	ldr	r1, [pc, #16]	; (1475c <LorawanAddMcastFcntMin+0x1c>)
   1474c:	3a02      	subs	r2, #2
   1474e:	18c9      	adds	r1, r1, r3
   14750:	31fc      	adds	r1, #252	; 0xfc
   14752:	6508      	str	r0, [r1, #80]	; 0x50
   14754:	64c8      	str	r0, [r1, #76]	; 0x4c
   14756:	0010      	movs	r0, r2
   14758:	4770      	bx	lr
   1475a:	46c0      	nop			; (mov r8, r8)
   1475c:	20002b5c 	.word	0x20002b5c

00014760 <LorawanAddMcastFcntMax>:
   14760:	220a      	movs	r2, #10
   14762:	2903      	cmp	r1, #3
   14764:	d806      	bhi.n	14774 <LorawanAddMcastFcntMax+0x14>
   14766:	233c      	movs	r3, #60	; 0x3c
   14768:	434b      	muls	r3, r1
   1476a:	4903      	ldr	r1, [pc, #12]	; (14778 <LorawanAddMcastFcntMax+0x18>)
   1476c:	3a02      	subs	r2, #2
   1476e:	18c9      	adds	r1, r1, r3
   14770:	31fc      	adds	r1, #252	; 0xfc
   14772:	6548      	str	r0, [r1, #84]	; 0x54
   14774:	0010      	movs	r0, r2
   14776:	4770      	bx	lr
   14778:	20002b5c 	.word	0x20002b5c

0001477c <LorawanAddMcastDlFrequency>:
   1477c:	b513      	push	{r0, r1, r4, lr}
   1477e:	000c      	movs	r4, r1
   14780:	9001      	str	r0, [sp, #4]
   14782:	2903      	cmp	r1, #3
   14784:	d901      	bls.n	1478a <LorawanAddMcastDlFrequency+0xe>
   14786:	200a      	movs	r0, #10
   14788:	bd16      	pop	{r1, r2, r4, pc}
   1478a:	a901      	add	r1, sp, #4
   1478c:	2001      	movs	r0, #1
   1478e:	4b06      	ldr	r3, [pc, #24]	; (147a8 <LorawanAddMcastDlFrequency+0x2c>)
   14790:	4798      	blx	r3
   14792:	2808      	cmp	r0, #8
   14794:	d1f7      	bne.n	14786 <LorawanAddMcastDlFrequency+0xa>
   14796:	213c      	movs	r1, #60	; 0x3c
   14798:	434c      	muls	r4, r1
   1479a:	4904      	ldr	r1, [pc, #16]	; (147ac <LorawanAddMcastDlFrequency+0x30>)
   1479c:	9b01      	ldr	r3, [sp, #4]
   1479e:	1909      	adds	r1, r1, r4
   147a0:	31fc      	adds	r1, #252	; 0xfc
   147a2:	65cb      	str	r3, [r1, #92]	; 0x5c
   147a4:	e7f0      	b.n	14788 <LorawanAddMcastDlFrequency+0xc>
   147a6:	46c0      	nop			; (mov r8, r8)
   147a8:	0000d939 	.word	0x0000d939
   147ac:	20002b5c 	.word	0x20002b5c

000147b0 <LorawanAddMcastDatarate>:
   147b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   147b2:	466b      	mov	r3, sp
   147b4:	1ddc      	adds	r4, r3, #7
   147b6:	000d      	movs	r5, r1
   147b8:	7020      	strb	r0, [r4, #0]
   147ba:	2903      	cmp	r1, #3
   147bc:	d901      	bls.n	147c2 <LorawanAddMcastDatarate+0x12>
   147be:	200a      	movs	r0, #10
   147c0:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
   147c2:	0021      	movs	r1, r4
   147c4:	200f      	movs	r0, #15
   147c6:	4b06      	ldr	r3, [pc, #24]	; (147e0 <LorawanAddMcastDatarate+0x30>)
   147c8:	4798      	blx	r3
   147ca:	2808      	cmp	r0, #8
   147cc:	d1f7      	bne.n	147be <LorawanAddMcastDatarate+0xe>
   147ce:	213c      	movs	r1, #60	; 0x3c
   147d0:	434d      	muls	r5, r1
   147d2:	4904      	ldr	r1, [pc, #16]	; (147e4 <LorawanAddMcastDatarate+0x34>)
   147d4:	7823      	ldrb	r3, [r4, #0]
   147d6:	1949      	adds	r1, r1, r5
   147d8:	315d      	adds	r1, #93	; 0x5d
   147da:	31ff      	adds	r1, #255	; 0xff
   147dc:	700b      	strb	r3, [r1, #0]
   147de:	e7ef      	b.n	147c0 <LorawanAddMcastDatarate+0x10>
   147e0:	0000d939 	.word	0x0000d939
   147e4:	20002b5c 	.word	0x20002b5c

000147e8 <LorawanAddMcastPeriodicity>:
   147e8:	220a      	movs	r2, #10
   147ea:	2903      	cmp	r1, #3
   147ec:	d809      	bhi.n	14802 <LorawanAddMcastPeriodicity+0x1a>
   147ee:	2807      	cmp	r0, #7
   147f0:	d807      	bhi.n	14802 <LorawanAddMcastPeriodicity+0x1a>
   147f2:	233c      	movs	r3, #60	; 0x3c
   147f4:	434b      	muls	r3, r1
   147f6:	4904      	ldr	r1, [pc, #16]	; (14808 <LorawanAddMcastPeriodicity+0x20>)
   147f8:	3a02      	subs	r2, #2
   147fa:	18c9      	adds	r1, r1, r3
   147fc:	315e      	adds	r1, #94	; 0x5e
   147fe:	31ff      	adds	r1, #255	; 0xff
   14800:	7008      	strb	r0, [r1, #0]
   14802:	0010      	movs	r0, r2
   14804:	4770      	bx	lr
   14806:	46c0      	nop			; (mov r8, r8)
   14808:	20002b5c 	.word	0x20002b5c

0001480c <Lorawan_Pds_fid1_CB>:
   1480c:	4770      	bx	lr
	...

00014810 <Lorawan_Pds_fid2_CB>:
   14810:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   14812:	2788      	movs	r7, #136	; 0x88
   14814:	4c2d      	ldr	r4, [pc, #180]	; (148cc <Lorawan_Pds_fid2_CB+0xbc>)
   14816:	00bf      	lsls	r7, r7, #2
   14818:	5de3      	ldrb	r3, [r4, r7]
   1481a:	2b00      	cmp	r3, #0
   1481c:	d021      	beq.n	14862 <Lorawan_Pds_fid2_CB+0x52>
   1481e:	2501      	movs	r5, #1
   14820:	0029      	movs	r1, r5
   14822:	4099      	lsls	r1, r3
   14824:	000b      	movs	r3, r1
   14826:	1d22      	adds	r2, r4, #4
   14828:	6fd1      	ldr	r1, [r2, #124]	; 0x7c
   1482a:	4e29      	ldr	r6, [pc, #164]	; (148d0 <Lorawan_Pds_fid2_CB+0xc0>)
   1482c:	18cb      	adds	r3, r1, r3
   1482e:	2000      	movs	r0, #0
   14830:	2116      	movs	r1, #22
   14832:	67d3      	str	r3, [r2, #124]	; 0x7c
   14834:	47b0      	blx	r6
   14836:	0029      	movs	r1, r5
   14838:	5de3      	ldrb	r3, [r4, r7]
   1483a:	0022      	movs	r2, r4
   1483c:	4099      	lsls	r1, r3
   1483e:	000b      	movs	r3, r1
   14840:	3208      	adds	r2, #8
   14842:	6fd1      	ldr	r1, [r2, #124]	; 0x7c
   14844:	0028      	movs	r0, r5
   14846:	185b      	adds	r3, r3, r1
   14848:	210a      	movs	r1, #10
   1484a:	67d3      	str	r3, [r2, #124]	; 0x7c
   1484c:	47b0      	blx	r6
   1484e:	0023      	movs	r3, r4
   14850:	5de2      	ldrb	r2, [r4, r7]
   14852:	33fc      	adds	r3, #252	; 0xfc
   14854:	4095      	lsls	r5, r2
   14856:	6cda      	ldr	r2, [r3, #76]	; 0x4c
   14858:	2105      	movs	r1, #5
   1485a:	18ad      	adds	r5, r5, r2
   1485c:	64dd      	str	r5, [r3, #76]	; 0x4c
   1485e:	2000      	movs	r0, #0
   14860:	47b0      	blx	r6
   14862:	0025      	movs	r5, r4
   14864:	2271      	movs	r2, #113	; 0x71
   14866:	2701      	movs	r7, #1
   14868:	357c      	adds	r5, #124	; 0x7c
   1486a:	782b      	ldrb	r3, [r5, #0]
   1486c:	4013      	ands	r3, r2
   1486e:	702b      	strb	r3, [r5, #0]
   14870:	786b      	ldrb	r3, [r5, #1]
   14872:	43bb      	bics	r3, r7
   14874:	706b      	strb	r3, [r5, #1]
   14876:	4b17      	ldr	r3, [pc, #92]	; (148d4 <Lorawan_Pds_fid2_CB+0xc4>)
   14878:	5ce3      	ldrb	r3, [r4, r3]
   1487a:	2b00      	cmp	r3, #0
   1487c:	d018      	beq.n	148b0 <Lorawan_Pds_fid2_CB+0xa0>
   1487e:	4916      	ldr	r1, [pc, #88]	; (148d8 <Lorawan_Pds_fid2_CB+0xc8>)
   14880:	2006      	movs	r0, #6
   14882:	4e16      	ldr	r6, [pc, #88]	; (148dc <Lorawan_Pds_fid2_CB+0xcc>)
   14884:	47b0      	blx	r6
   14886:	2800      	cmp	r0, #0
   14888:	d002      	beq.n	14890 <Lorawan_Pds_fid2_CB+0x80>
   1488a:	782b      	ldrb	r3, [r5, #0]
   1488c:	43bb      	bics	r3, r7
   1488e:	702b      	strb	r3, [r5, #0]
   14890:	0023      	movs	r3, r4
   14892:	2501      	movs	r5, #1
   14894:	337c      	adds	r3, #124	; 0x7c
   14896:	781b      	ldrb	r3, [r3, #0]
   14898:	422b      	tst	r3, r5
   1489a:	d008      	beq.n	148ae <Lorawan_Pds_fid2_CB+0x9e>
   1489c:	7823      	ldrb	r3, [r4, #0]
   1489e:	2b00      	cmp	r3, #0
   148a0:	d106      	bne.n	148b0 <Lorawan_Pds_fid2_CB+0xa0>
   148a2:	490f      	ldr	r1, [pc, #60]	; (148e0 <Lorawan_Pds_fid2_CB+0xd0>)
   148a4:	2002      	movs	r0, #2
   148a6:	47b0      	blx	r6
   148a8:	490e      	ldr	r1, [pc, #56]	; (148e4 <Lorawan_Pds_fid2_CB+0xd4>)
   148aa:	0028      	movs	r0, r5
   148ac:	47b0      	blx	r6
   148ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   148b0:	0020      	movs	r0, r4
   148b2:	0021      	movs	r1, r4
   148b4:	2210      	movs	r2, #16
   148b6:	3115      	adds	r1, #21
   148b8:	4d0b      	ldr	r5, [pc, #44]	; (148e8 <Lorawan_Pds_fid2_CB+0xd8>)
   148ba:	3035      	adds	r0, #53	; 0x35
   148bc:	47a8      	blx	r5
   148be:	0020      	movs	r0, r4
   148c0:	1d61      	adds	r1, r4, #5
   148c2:	2210      	movs	r2, #16
   148c4:	3025      	adds	r0, #37	; 0x25
   148c6:	47a8      	blx	r5
   148c8:	e7f1      	b.n	148ae <Lorawan_Pds_fid2_CB+0x9e>
   148ca:	46c0      	nop			; (mov r8, r8)
   148cc:	20002b5c 	.word	0x20002b5c
   148d0:	0000e0f9 	.word	0x0000e0f9
   148d4:	00000221 	.word	0x00000221
   148d8:	20002bb1 	.word	0x20002bb1
   148dc:	0000dd5d 	.word	0x0000dd5d
   148e0:	20002b81 	.word	0x20002b81
   148e4:	20002b91 	.word	0x20002b91
   148e8:	00019da5 	.word	0x00019da5

000148ec <LORAWAN_TxHandler>:
   148ec:	b5f0      	push	{r4, r5, r6, r7, lr}
   148ee:	b087      	sub	sp, #28
   148f0:	466b      	mov	r3, sp
   148f2:	2501      	movs	r5, #1
   148f4:	4c2f      	ldr	r4, [pc, #188]	; (149b4 <LORAWAN_TxHandler+0xc8>)
   148f6:	701d      	strb	r5, [r3, #0]
   148f8:	0023      	movs	r3, r4
   148fa:	466a      	mov	r2, sp
   148fc:	33e1      	adds	r3, #225	; 0xe1
   148fe:	781b      	ldrb	r3, [r3, #0]
   14900:	4669      	mov	r1, sp
   14902:	7053      	strb	r3, [r2, #1]
   14904:	0023      	movs	r3, r4
   14906:	33df      	adds	r3, #223	; 0xdf
   14908:	781b      	ldrb	r3, [r3, #0]
   1490a:	202f      	movs	r0, #47	; 0x2f
   1490c:	7093      	strb	r3, [r2, #2]
   1490e:	aa03      	add	r2, sp, #12
   14910:	4b29      	ldr	r3, [pc, #164]	; (149b8 <LORAWAN_TxHandler+0xcc>)
   14912:	4798      	blx	r3
   14914:	2808      	cmp	r0, #8
   14916:	d004      	beq.n	14922 <LORAWAN_TxHandler+0x36>
   14918:	4b28      	ldr	r3, [pc, #160]	; (149bc <LORAWAN_TxHandler+0xd0>)
   1491a:	4798      	blx	r3
   1491c:	2000      	movs	r0, #0
   1491e:	b007      	add	sp, #28
   14920:	bdf0      	pop	{r4, r5, r6, r7, pc}
   14922:	0023      	movs	r3, r4
   14924:	33f4      	adds	r3, #244	; 0xf4
   14926:	781b      	ldrb	r3, [r3, #0]
   14928:	ae01      	add	r6, sp, #4
   1492a:	2b04      	cmp	r3, #4
   1492c:	d103      	bne.n	14936 <LORAWAN_TxHandler+0x4a>
   1492e:	0030      	movs	r0, r6
   14930:	4b23      	ldr	r3, [pc, #140]	; (149c0 <LORAWAN_TxHandler+0xd4>)
   14932:	7035      	strb	r5, [r6, #0]
   14934:	4798      	blx	r3
   14936:	4b23      	ldr	r3, [pc, #140]	; (149c4 <LORAWAN_TxHandler+0xd8>)
   14938:	9803      	ldr	r0, [sp, #12]
   1493a:	9904      	ldr	r1, [sp, #16]
   1493c:	9a05      	ldr	r2, [sp, #20]
   1493e:	4798      	blx	r3
   14940:	0023      	movs	r3, r4
   14942:	33fc      	adds	r3, #252	; 0xfc
   14944:	681d      	ldr	r5, [r3, #0]
   14946:	4f20      	ldr	r7, [pc, #128]	; (149c8 <LORAWAN_TxHandler+0xdc>)
   14948:	4b20      	ldr	r3, [pc, #128]	; (149cc <LORAWAN_TxHandler+0xe0>)
   1494a:	2d00      	cmp	r5, #0
   1494c:	d023      	beq.n	14996 <LORAWAN_TxHandler+0xaa>
   1494e:	2201      	movs	r2, #1
   14950:	54e2      	strb	r2, [r4, r3]
   14952:	7828      	ldrb	r0, [r5, #0]
   14954:	7a2b      	ldrb	r3, [r5, #8]
   14956:	1e42      	subs	r2, r0, #1
   14958:	4190      	sbcs	r0, r2
   1495a:	7869      	ldrb	r1, [r5, #1]
   1495c:	686a      	ldr	r2, [r5, #4]
   1495e:	b2c0      	uxtb	r0, r0
   14960:	47b8      	blx	r7
   14962:	0023      	movs	r3, r4
   14964:	33c6      	adds	r3, #198	; 0xc6
   14966:	881b      	ldrh	r3, [r3, #0]
   14968:	0030      	movs	r0, r6
   1496a:	7033      	strb	r3, [r6, #0]
   1496c:	4b18      	ldr	r3, [pc, #96]	; (149d0 <LORAWAN_TxHandler+0xe4>)
   1496e:	6073      	str	r3, [r6, #4]
   14970:	4b18      	ldr	r3, [pc, #96]	; (149d4 <LORAWAN_TxHandler+0xe8>)
   14972:	4798      	blx	r3
   14974:	2800      	cmp	r0, #0
   14976:	d114      	bne.n	149a2 <LORAWAN_TxHandler+0xb6>
   14978:	0021      	movs	r1, r4
   1497a:	220e      	movs	r2, #14
   1497c:	317c      	adds	r1, #124	; 0x7c
   1497e:	780b      	ldrb	r3, [r1, #0]
   14980:	4393      	bics	r3, r2
   14982:	001a      	movs	r2, r3
   14984:	2302      	movs	r3, #2
   14986:	4313      	orrs	r3, r2
   14988:	700b      	strb	r3, [r1, #0]
   1498a:	2208      	movs	r2, #8
   1498c:	348c      	adds	r4, #140	; 0x8c
   1498e:	7823      	ldrb	r3, [r4, #0]
   14990:	4393      	bics	r3, r2
   14992:	7023      	strb	r3, [r4, #0]
   14994:	e7c2      	b.n	1491c <LORAWAN_TxHandler+0x30>
   14996:	54e5      	strb	r5, [r4, r3]
   14998:	002a      	movs	r2, r5
   1499a:	002b      	movs	r3, r5
   1499c:	0029      	movs	r1, r5
   1499e:	0028      	movs	r0, r5
   149a0:	e7de      	b.n	14960 <LORAWAN_TxHandler+0x74>
   149a2:	0022      	movs	r2, r4
   149a4:	2120      	movs	r1, #32
   149a6:	328c      	adds	r2, #140	; 0x8c
   149a8:	7813      	ldrb	r3, [r2, #0]
   149aa:	438b      	bics	r3, r1
   149ac:	7013      	strb	r3, [r2, #0]
   149ae:	4b03      	ldr	r3, [pc, #12]	; (149bc <LORAWAN_TxHandler+0xd0>)
   149b0:	4798      	blx	r3
   149b2:	e7ea      	b.n	1498a <LORAWAN_TxHandler+0x9e>
   149b4:	20002b5c 	.word	0x20002b5c
   149b8:	0000d91d 	.word	0x0000d91d
   149bc:	000114a9 	.word	0x000114a9
   149c0:	00015e6d 	.word	0x00015e6d
   149c4:	00010f31 	.word	0x00010f31
   149c8:	00011511 	.word	0x00011511
   149cc:	0000021e 	.word	0x0000021e
   149d0:	20002da1 	.word	0x20002da1
   149d4:	00015599 	.word	0x00015599

000149d8 <LORAWAN_JoinReqHandler>:
   149d8:	b530      	push	{r4, r5, lr}
   149da:	b087      	sub	sp, #28
   149dc:	466a      	mov	r2, sp
   149de:	2300      	movs	r3, #0
   149e0:	4c2a      	ldr	r4, [pc, #168]	; (14a8c <LORAWAN_JoinReqHandler+0xb4>)
   149e2:	7013      	strb	r3, [r2, #0]
   149e4:	0023      	movs	r3, r4
   149e6:	33e1      	adds	r3, #225	; 0xe1
   149e8:	781b      	ldrb	r3, [r3, #0]
   149ea:	7053      	strb	r3, [r2, #1]
   149ec:	0023      	movs	r3, r4
   149ee:	33df      	adds	r3, #223	; 0xdf
   149f0:	781b      	ldrb	r3, [r3, #0]
   149f2:	7093      	strb	r3, [r2, #2]
   149f4:	0023      	movs	r3, r4
   149f6:	33ff      	adds	r3, #255	; 0xff
   149f8:	7c5b      	ldrb	r3, [r3, #17]
   149fa:	069b      	lsls	r3, r3, #26
   149fc:	d511      	bpl.n	14a22 <LORAWAN_JoinReqHandler+0x4a>
   149fe:	0023      	movs	r3, r4
   14a00:	336f      	adds	r3, #111	; 0x6f
   14a02:	781a      	ldrb	r2, [r3, #0]
   14a04:	6f23      	ldr	r3, [r4, #112]	; 0x70
   14a06:	021b      	lsls	r3, r3, #8
   14a08:	4313      	orrs	r3, r2
   14a0a:	0022      	movs	r2, r4
   14a0c:	3273      	adds	r2, #115	; 0x73
   14a0e:	7811      	ldrb	r1, [r2, #0]
   14a10:	6f62      	ldr	r2, [r4, #116]	; 0x74
   14a12:	0212      	lsls	r2, r2, #8
   14a14:	430a      	orrs	r2, r1
   14a16:	4313      	orrs	r3, r2
   14a18:	d103      	bne.n	14a22 <LORAWAN_JoinReqHandler+0x4a>
   14a1a:	0023      	movs	r3, r4
   14a1c:	2201      	movs	r2, #1
   14a1e:	337b      	adds	r3, #123	; 0x7b
   14a20:	701a      	strb	r2, [r3, #0]
   14a22:	aa03      	add	r2, sp, #12
   14a24:	4669      	mov	r1, sp
   14a26:	202f      	movs	r0, #47	; 0x2f
   14a28:	4b19      	ldr	r3, [pc, #100]	; (14a90 <LORAWAN_JoinReqHandler+0xb8>)
   14a2a:	4798      	blx	r3
   14a2c:	2808      	cmp	r0, #8
   14a2e:	d004      	beq.n	14a3a <LORAWAN_JoinReqHandler+0x62>
   14a30:	4b18      	ldr	r3, [pc, #96]	; (14a94 <LORAWAN_JoinReqHandler+0xbc>)
   14a32:	4798      	blx	r3
   14a34:	2000      	movs	r0, #0
   14a36:	b007      	add	sp, #28
   14a38:	bd30      	pop	{r4, r5, pc}
   14a3a:	4b17      	ldr	r3, [pc, #92]	; (14a98 <LORAWAN_JoinReqHandler+0xc0>)
   14a3c:	9803      	ldr	r0, [sp, #12]
   14a3e:	9904      	ldr	r1, [sp, #16]
   14a40:	9a05      	ldr	r2, [sp, #20]
   14a42:	4798      	blx	r3
   14a44:	0023      	movs	r3, r4
   14a46:	33f4      	adds	r3, #244	; 0xf4
   14a48:	781b      	ldrb	r3, [r3, #0]
   14a4a:	ad01      	add	r5, sp, #4
   14a4c:	2b04      	cmp	r3, #4
   14a4e:	d104      	bne.n	14a5a <LORAWAN_JoinReqHandler+0x82>
   14a50:	3b03      	subs	r3, #3
   14a52:	702b      	strb	r3, [r5, #0]
   14a54:	0028      	movs	r0, r5
   14a56:	4b11      	ldr	r3, [pc, #68]	; (14a9c <LORAWAN_JoinReqHandler+0xc4>)
   14a58:	4798      	blx	r3
   14a5a:	2200      	movs	r2, #0
   14a5c:	4b10      	ldr	r3, [pc, #64]	; (14aa0 <LORAWAN_JoinReqHandler+0xc8>)
   14a5e:	54e2      	strb	r2, [r4, r3]
   14a60:	4b10      	ldr	r3, [pc, #64]	; (14aa4 <LORAWAN_JoinReqHandler+0xcc>)
   14a62:	4798      	blx	r3
   14a64:	4b10      	ldr	r3, [pc, #64]	; (14aa8 <LORAWAN_JoinReqHandler+0xd0>)
   14a66:	7028      	strb	r0, [r5, #0]
   14a68:	606b      	str	r3, [r5, #4]
   14a6a:	0028      	movs	r0, r5
   14a6c:	4b0f      	ldr	r3, [pc, #60]	; (14aac <LORAWAN_JoinReqHandler+0xd4>)
   14a6e:	4798      	blx	r3
   14a70:	2800      	cmp	r0, #0
   14a72:	d001      	beq.n	14a78 <LORAWAN_JoinReqHandler+0xa0>
   14a74:	201b      	movs	r0, #27
   14a76:	e7db      	b.n	14a30 <LORAWAN_JoinReqHandler+0x58>
   14a78:	220e      	movs	r2, #14
   14a7a:	347c      	adds	r4, #124	; 0x7c
   14a7c:	7823      	ldrb	r3, [r4, #0]
   14a7e:	4393      	bics	r3, r2
   14a80:	001a      	movs	r2, r3
   14a82:	2302      	movs	r3, #2
   14a84:	4313      	orrs	r3, r2
   14a86:	7023      	strb	r3, [r4, #0]
   14a88:	e7d4      	b.n	14a34 <LORAWAN_JoinReqHandler+0x5c>
   14a8a:	46c0      	nop			; (mov r8, r8)
   14a8c:	20002b5c 	.word	0x20002b5c
   14a90:	0000d91d 	.word	0x0000d91d
   14a94:	000109a1 	.word	0x000109a1
   14a98:	00010f31 	.word	0x00010f31
   14a9c:	00015e6d 	.word	0x00015e6d
   14aa0:	0000021e 	.word	0x0000021e
   14aa4:	00010d7d 	.word	0x00010d7d
   14aa8:	20002d91 	.word	0x20002d91
   14aac:	00015599 	.word	0x00015599

00014ab0 <LORAWAN_RxHandler>:
   14ab0:	b513      	push	{r0, r1, r4, lr}
   14ab2:	4b0c      	ldr	r3, [pc, #48]	; (14ae4 <LORAWAN_RxHandler+0x34>)
   14ab4:	781b      	ldrb	r3, [r3, #0]
   14ab6:	2b08      	cmp	r3, #8
   14ab8:	d011      	beq.n	14ade <LORAWAN_RxHandler+0x2e>
   14aba:	2b10      	cmp	r3, #16
   14abc:	d001      	beq.n	14ac2 <LORAWAN_RxHandler+0x12>
   14abe:	2b01      	cmp	r3, #1
   14ac0:	d10b      	bne.n	14ada <LORAWAN_RxHandler+0x2a>
   14ac2:	466b      	mov	r3, sp
   14ac4:	1c9c      	adds	r4, r3, #2
   14ac6:	0021      	movs	r1, r4
   14ac8:	a801      	add	r0, sp, #4
   14aca:	4b07      	ldr	r3, [pc, #28]	; (14ae8 <LORAWAN_RxHandler+0x38>)
   14acc:	4798      	blx	r3
   14ace:	9801      	ldr	r0, [sp, #4]
   14ad0:	2800      	cmp	r0, #0
   14ad2:	d002      	beq.n	14ada <LORAWAN_RxHandler+0x2a>
   14ad4:	7821      	ldrb	r1, [r4, #0]
   14ad6:	4b05      	ldr	r3, [pc, #20]	; (14aec <LORAWAN_RxHandler+0x3c>)
   14ad8:	4798      	blx	r3
   14ada:	2000      	movs	r0, #0
   14adc:	bd16      	pop	{r1, r2, r4, pc}
   14ade:	4b04      	ldr	r3, [pc, #16]	; (14af0 <LORAWAN_RxHandler+0x40>)
   14ae0:	4798      	blx	r3
   14ae2:	e7fa      	b.n	14ada <LORAWAN_RxHandler+0x2a>
   14ae4:	20002d90 	.word	0x20002d90
   14ae8:	00015765 	.word	0x00015765
   14aec:	00012ee5 	.word	0x00012ee5
   14af0:	000126b5 	.word	0x000126b5

00014af4 <LORAWAN_PostTask>:
   14af4:	b510      	push	{r4, lr}
   14af6:	4b08      	ldr	r3, [pc, #32]	; (14b18 <LORAWAN_PostTask+0x24>)
   14af8:	0004      	movs	r4, r0
   14afa:	4798      	blx	r3
   14afc:	2201      	movs	r2, #1
   14afe:	40a2      	lsls	r2, r4
   14b00:	4906      	ldr	r1, [pc, #24]	; (14b1c <LORAWAN_PostTask+0x28>)
   14b02:	780b      	ldrb	r3, [r1, #0]
   14b04:	4313      	orrs	r3, r2
   14b06:	b2db      	uxtb	r3, r3
   14b08:	700b      	strb	r3, [r1, #0]
   14b0a:	4b05      	ldr	r3, [pc, #20]	; (14b20 <LORAWAN_PostTask+0x2c>)
   14b0c:	4798      	blx	r3
   14b0e:	2004      	movs	r0, #4
   14b10:	4b04      	ldr	r3, [pc, #16]	; (14b24 <LORAWAN_PostTask+0x30>)
   14b12:	4798      	blx	r3
   14b14:	bd10      	pop	{r4, pc}
   14b16:	46c0      	nop			; (mov r8, r8)
   14b18:	000083d1 	.word	0x000083d1
   14b1c:	20001120 	.word	0x20001120
   14b20:	000083dd 	.word	0x000083dd
   14b24:	0000f4bd 	.word	0x0000f4bd

00014b28 <LORAWAN_TaskHandler>:
   14b28:	b570      	push	{r4, r5, r6, lr}
   14b2a:	2601      	movs	r6, #1
   14b2c:	4d0e      	ldr	r5, [pc, #56]	; (14b68 <LORAWAN_TaskHandler+0x40>)
   14b2e:	e015      	b.n	14b5c <LORAWAN_TaskHandler+0x34>
   14b30:	2400      	movs	r4, #0
   14b32:	782b      	ldrb	r3, [r5, #0]
   14b34:	4123      	asrs	r3, r4
   14b36:	4233      	tst	r3, r6
   14b38:	d00d      	beq.n	14b56 <LORAWAN_TaskHandler+0x2e>
   14b3a:	4b0c      	ldr	r3, [pc, #48]	; (14b6c <LORAWAN_TaskHandler+0x44>)
   14b3c:	4798      	blx	r3
   14b3e:	0032      	movs	r2, r6
   14b40:	40a2      	lsls	r2, r4
   14b42:	782b      	ldrb	r3, [r5, #0]
   14b44:	00a4      	lsls	r4, r4, #2
   14b46:	4393      	bics	r3, r2
   14b48:	702b      	strb	r3, [r5, #0]
   14b4a:	4b09      	ldr	r3, [pc, #36]	; (14b70 <LORAWAN_TaskHandler+0x48>)
   14b4c:	4798      	blx	r3
   14b4e:	4b09      	ldr	r3, [pc, #36]	; (14b74 <LORAWAN_TaskHandler+0x4c>)
   14b50:	58e3      	ldr	r3, [r4, r3]
   14b52:	4798      	blx	r3
   14b54:	e7ea      	b.n	14b2c <LORAWAN_TaskHandler+0x4>
   14b56:	3401      	adds	r4, #1
   14b58:	2c03      	cmp	r4, #3
   14b5a:	d1ea      	bne.n	14b32 <LORAWAN_TaskHandler+0xa>
   14b5c:	7828      	ldrb	r0, [r5, #0]
   14b5e:	b2c0      	uxtb	r0, r0
   14b60:	2800      	cmp	r0, #0
   14b62:	d1e5      	bne.n	14b30 <LORAWAN_TaskHandler+0x8>
   14b64:	bd70      	pop	{r4, r5, r6, pc}
   14b66:	46c0      	nop			; (mov r8, r8)
   14b68:	20001120 	.word	0x20001120
   14b6c:	000083d1 	.word	0x000083d1
   14b70:	000083dd 	.word	0x000083dd
   14b74:	00020410 	.word	0x00020410

00014b78 <RADIO_GetAttr>:
   14b78:	b510      	push	{r4, lr}
   14b7a:	000b      	movs	r3, r1
   14b7c:	281f      	cmp	r0, #31
   14b7e:	d900      	bls.n	14b82 <RADIO_GetAttr+0xa>
   14b80:	e069      	b.n	14c56 <RADIO_GetAttr+0xde>
   14b82:	f001 fd49 	bl	16618 <__gnu_thumb1_case_uqi>
   14b86:	1410      	.short	0x1410
   14b88:	68201c19 	.word	0x68201c19
   14b8c:	312e2a27 	.word	0x312e2a27
   14b90:	3d3a3734 	.word	0x3d3a3734
   14b94:	46434054 	.word	0x46434054
   14b98:	68245149 	.word	0x68245149
   14b9c:	68686859 	.word	0x68686859
   14ba0:	5c686817 	.word	0x5c686817
   14ba4:	6360      	.short	0x6360
   14ba6:	4a2d      	ldr	r2, [pc, #180]	; (14c5c <RADIO_GetAttr+0xe4>)
   14ba8:	7e12      	ldrb	r2, [r2, #24]
   14baa:	701a      	strb	r2, [r3, #0]
   14bac:	e002      	b.n	14bb4 <RADIO_GetAttr+0x3c>
   14bae:	4a2b      	ldr	r2, [pc, #172]	; (14c5c <RADIO_GetAttr+0xe4>)
   14bb0:	6812      	ldr	r2, [r2, #0]
   14bb2:	601a      	str	r2, [r3, #0]
   14bb4:	2000      	movs	r0, #0
   14bb6:	bd10      	pop	{r4, pc}
   14bb8:	4a28      	ldr	r2, [pc, #160]	; (14c5c <RADIO_GetAttr+0xe4>)
   14bba:	6852      	ldr	r2, [r2, #4]
   14bbc:	e7f9      	b.n	14bb2 <RADIO_GetAttr+0x3a>
   14bbe:	4a27      	ldr	r2, [pc, #156]	; (14c5c <RADIO_GetAttr+0xe4>)
   14bc0:	8a92      	ldrh	r2, [r2, #20]
   14bc2:	801a      	strh	r2, [r3, #0]
   14bc4:	e7f6      	b.n	14bb4 <RADIO_GetAttr+0x3c>
   14bc6:	4a25      	ldr	r2, [pc, #148]	; (14c5c <RADIO_GetAttr+0xe4>)
   14bc8:	3203      	adds	r2, #3
   14bca:	7fd2      	ldrb	r2, [r2, #31]
   14bcc:	e7ed      	b.n	14baa <RADIO_GetAttr+0x32>
   14bce:	4a23      	ldr	r2, [pc, #140]	; (14c5c <RADIO_GetAttr+0xe4>)
   14bd0:	3204      	adds	r2, #4
   14bd2:	e7fa      	b.n	14bca <RADIO_GetAttr+0x52>
   14bd4:	4a21      	ldr	r2, [pc, #132]	; (14c5c <RADIO_GetAttr+0xe4>)
   14bd6:	3206      	adds	r2, #6
   14bd8:	e7f7      	b.n	14bca <RADIO_GetAttr+0x52>
   14bda:	4a20      	ldr	r2, [pc, #128]	; (14c5c <RADIO_GetAttr+0xe4>)
   14bdc:	3236      	adds	r2, #54	; 0x36
   14bde:	7812      	ldrb	r2, [r2, #0]
   14be0:	e7e3      	b.n	14baa <RADIO_GetAttr+0x32>
   14be2:	4a1e      	ldr	r2, [pc, #120]	; (14c5c <RADIO_GetAttr+0xe4>)
   14be4:	3205      	adds	r2, #5
   14be6:	e7f0      	b.n	14bca <RADIO_GetAttr+0x52>
   14be8:	4a1c      	ldr	r2, [pc, #112]	; (14c5c <RADIO_GetAttr+0xe4>)
   14bea:	3234      	adds	r2, #52	; 0x34
   14bec:	e7f7      	b.n	14bde <RADIO_GetAttr+0x66>
   14bee:	4a1b      	ldr	r2, [pc, #108]	; (14c5c <RADIO_GetAttr+0xe4>)
   14bf0:	8ad2      	ldrh	r2, [r2, #22]
   14bf2:	e7e6      	b.n	14bc2 <RADIO_GetAttr+0x4a>
   14bf4:	4a19      	ldr	r2, [pc, #100]	; (14c5c <RADIO_GetAttr+0xe4>)
   14bf6:	3233      	adds	r2, #51	; 0x33
   14bf8:	e7f1      	b.n	14bde <RADIO_GetAttr+0x66>
   14bfa:	4a18      	ldr	r2, [pc, #96]	; (14c5c <RADIO_GetAttr+0xe4>)
   14bfc:	68d2      	ldr	r2, [r2, #12]
   14bfe:	e7d8      	b.n	14bb2 <RADIO_GetAttr+0x3a>
   14c00:	4a16      	ldr	r2, [pc, #88]	; (14c5c <RADIO_GetAttr+0xe4>)
   14c02:	6892      	ldr	r2, [r2, #8]
   14c04:	e7d5      	b.n	14bb2 <RADIO_GetAttr+0x3a>
   14c06:	4a15      	ldr	r2, [pc, #84]	; (14c5c <RADIO_GetAttr+0xe4>)
   14c08:	3237      	adds	r2, #55	; 0x37
   14c0a:	e7e8      	b.n	14bde <RADIO_GetAttr+0x66>
   14c0c:	4a13      	ldr	r2, [pc, #76]	; (14c5c <RADIO_GetAttr+0xe4>)
   14c0e:	3238      	adds	r2, #56	; 0x38
   14c10:	e7e5      	b.n	14bde <RADIO_GetAttr+0x66>
   14c12:	4a12      	ldr	r2, [pc, #72]	; (14c5c <RADIO_GetAttr+0xe4>)
   14c14:	3239      	adds	r2, #57	; 0x39
   14c16:	e7e2      	b.n	14bde <RADIO_GetAttr+0x66>
   14c18:	4a10      	ldr	r2, [pc, #64]	; (14c5c <RADIO_GetAttr+0xe4>)
   14c1a:	4911      	ldr	r1, [pc, #68]	; (14c60 <RADIO_GetAttr+0xe8>)
   14c1c:	3202      	adds	r2, #2
   14c1e:	7fd2      	ldrb	r2, [r2, #31]
   14c20:	0018      	movs	r0, r3
   14c22:	4b10      	ldr	r3, [pc, #64]	; (14c64 <RADIO_GetAttr+0xec>)
   14c24:	4798      	blx	r3
   14c26:	e7c5      	b.n	14bb4 <RADIO_GetAttr+0x3c>
   14c28:	4a0c      	ldr	r2, [pc, #48]	; (14c5c <RADIO_GetAttr+0xe4>)
   14c2a:	3202      	adds	r2, #2
   14c2c:	e7cd      	b.n	14bca <RADIO_GetAttr+0x52>
   14c2e:	4a0b      	ldr	r2, [pc, #44]	; (14c5c <RADIO_GetAttr+0xe4>)
   14c30:	3232      	adds	r2, #50	; 0x32
   14c32:	7812      	ldrb	r2, [r2, #0]
   14c34:	b252      	sxtb	r2, r2
   14c36:	e7b8      	b.n	14baa <RADIO_GetAttr+0x32>
   14c38:	4a08      	ldr	r2, [pc, #32]	; (14c5c <RADIO_GetAttr+0xe4>)
   14c3a:	3235      	adds	r2, #53	; 0x35
   14c3c:	e7cf      	b.n	14bde <RADIO_GetAttr+0x66>
   14c3e:	4907      	ldr	r1, [pc, #28]	; (14c5c <RADIO_GetAttr+0xe4>)
   14c40:	2206      	movs	r2, #6
   14c42:	313c      	adds	r1, #60	; 0x3c
   14c44:	e7ec      	b.n	14c20 <RADIO_GetAttr+0xa8>
   14c46:	4a05      	ldr	r2, [pc, #20]	; (14c5c <RADIO_GetAttr+0xe4>)
   14c48:	3254      	adds	r2, #84	; 0x54
   14c4a:	e7c8      	b.n	14bde <RADIO_GetAttr+0x66>
   14c4c:	4a03      	ldr	r2, [pc, #12]	; (14c5c <RADIO_GetAttr+0xe4>)
   14c4e:	3256      	adds	r2, #86	; 0x56
   14c50:	2100      	movs	r1, #0
   14c52:	5e52      	ldrsh	r2, [r2, r1]
   14c54:	e7b5      	b.n	14bc2 <RADIO_GetAttr+0x4a>
   14c56:	2005      	movs	r0, #5
   14c58:	e7ad      	b.n	14bb6 <RADIO_GetAttr+0x3e>
   14c5a:	46c0      	nop			; (mov r8, r8)
   14c5c:	20002980 	.word	0x20002980
   14c60:	20002999 	.word	0x20002999
   14c64:	00019da5 	.word	0x00019da5

00014c68 <RADIO_SetAttr>:
   14c68:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   14c6a:	4b71      	ldr	r3, [pc, #452]	; (14e30 <RADIO_SetAttr+0x1c8>)
   14c6c:	0004      	movs	r4, r0
   14c6e:	000d      	movs	r5, r1
   14c70:	4798      	blx	r3
   14c72:	2304      	movs	r3, #4
   14c74:	2801      	cmp	r0, #1
   14c76:	d11a      	bne.n	14cae <RADIO_SetAttr+0x46>
   14c78:	2c1d      	cmp	r4, #29
   14c7a:	d900      	bls.n	14c7e <RADIO_SetAttr+0x16>
   14c7c:	e0d5      	b.n	14e2a <RADIO_SetAttr+0x1c2>
   14c7e:	0020      	movs	r0, r4
   14c80:	f001 fcca 	bl	16618 <__gnu_thumb1_case_uqi>
   14c84:	605c4844 	.word	0x605c4844
   14c88:	7770d364 	.word	0x7770d364
   14c8c:	908c8480 	.word	0x908c8480
   14c90:	a0d39c99 	.word	0xa0d39c99
   14c94:	c2bab1a8 	.word	0xc2bab1a8
   14c98:	d3cad369 	.word	0xd3cad369
   14c9c:	d30fd3d3 	.word	0xd30fd3d3
   14ca0:	17d3      	.short	0x17d3
   14ca2:	2303      	movs	r3, #3
   14ca4:	2d00      	cmp	r5, #0
   14ca6:	d002      	beq.n	14cae <RADIO_SetAttr+0x46>
   14ca8:	4b62      	ldr	r3, [pc, #392]	; (14e34 <RADIO_SetAttr+0x1cc>)
   14caa:	611d      	str	r5, [r3, #16]
   14cac:	2300      	movs	r3, #0
   14cae:	0018      	movs	r0, r3
   14cb0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   14cb2:	796c      	ldrb	r4, [r5, #5]
   14cb4:	2c00      	cmp	r4, #0
   14cb6:	d109      	bne.n	14ccc <RADIO_SetAttr+0x64>
   14cb8:	4b5e      	ldr	r3, [pc, #376]	; (14e34 <RADIO_SetAttr+0x1cc>)
   14cba:	001a      	movs	r2, r3
   14cbc:	649c      	str	r4, [r3, #72]	; 0x48
   14cbe:	879c      	strh	r4, [r3, #60]	; 0x3c
   14cc0:	87dc      	strh	r4, [r3, #62]	; 0x3e
   14cc2:	3240      	adds	r2, #64	; 0x40
   14cc4:	3341      	adds	r3, #65	; 0x41
   14cc6:	7014      	strb	r4, [r2, #0]
   14cc8:	701c      	strb	r4, [r3, #0]
   14cca:	e7ef      	b.n	14cac <RADIO_SetAttr+0x44>
   14ccc:	882f      	ldrh	r7, [r5, #0]
   14cce:	2303      	movs	r3, #3
   14cd0:	2f00      	cmp	r7, #0
   14cd2:	d0ec      	beq.n	14cae <RADIO_SetAttr+0x46>
   14cd4:	792e      	ldrb	r6, [r5, #4]
   14cd6:	2e00      	cmp	r6, #0
   14cd8:	d0e9      	beq.n	14cae <RADIO_SetAttr+0x46>
   14cda:	20fa      	movs	r0, #250	; 0xfa
   14cdc:	2202      	movs	r2, #2
   14cde:	5eab      	ldrsh	r3, [r5, r2]
   14ce0:	0080      	lsls	r0, r0, #2
   14ce2:	0031      	movs	r1, r6
   14ce4:	9301      	str	r3, [sp, #4]
   14ce6:	4378      	muls	r0, r7
   14ce8:	4b53      	ldr	r3, [pc, #332]	; (14e38 <RADIO_SetAttr+0x1d0>)
   14cea:	4798      	blx	r3
   14cec:	4b53      	ldr	r3, [pc, #332]	; (14e3c <RADIO_SetAttr+0x1d4>)
   14cee:	4798      	blx	r3
   14cf0:	4b53      	ldr	r3, [pc, #332]	; (14e40 <RADIO_SetAttr+0x1d8>)
   14cf2:	4798      	blx	r3
   14cf4:	466b      	mov	r3, sp
   14cf6:	4d4f      	ldr	r5, [pc, #316]	; (14e34 <RADIO_SetAttr+0x1cc>)
   14cf8:	889b      	ldrh	r3, [r3, #4]
   14cfa:	64a8      	str	r0, [r5, #72]	; 0x48
   14cfc:	87eb      	strh	r3, [r5, #62]	; 0x3e
   14cfe:	002b      	movs	r3, r5
   14d00:	87af      	strh	r7, [r5, #60]	; 0x3c
   14d02:	3340      	adds	r3, #64	; 0x40
   14d04:	3541      	adds	r5, #65	; 0x41
   14d06:	701e      	strb	r6, [r3, #0]
   14d08:	702c      	strb	r4, [r5, #0]
   14d0a:	e7cf      	b.n	14cac <RADIO_SetAttr+0x44>
   14d0c:	782a      	ldrb	r2, [r5, #0]
   14d0e:	4b49      	ldr	r3, [pc, #292]	; (14e34 <RADIO_SetAttr+0x1cc>)
   14d10:	761a      	strb	r2, [r3, #24]
   14d12:	e7cb      	b.n	14cac <RADIO_SetAttr+0x44>
   14d14:	4b4b      	ldr	r3, [pc, #300]	; (14e44 <RADIO_SetAttr+0x1dc>)
   14d16:	682a      	ldr	r2, [r5, #0]
   14d18:	18d1      	adds	r1, r2, r3
   14d1a:	4b4b      	ldr	r3, [pc, #300]	; (14e48 <RADIO_SetAttr+0x1e0>)
   14d1c:	4299      	cmp	r1, r3
   14d1e:	d90a      	bls.n	14d36 <RADIO_SetAttr+0xce>
   14d20:	4b4a      	ldr	r3, [pc, #296]	; (14e4c <RADIO_SetAttr+0x1e4>)
   14d22:	494b      	ldr	r1, [pc, #300]	; (14e50 <RADIO_SetAttr+0x1e8>)
   14d24:	18d3      	adds	r3, r2, r3
   14d26:	428b      	cmp	r3, r1
   14d28:	d905      	bls.n	14d36 <RADIO_SetAttr+0xce>
   14d2a:	494a      	ldr	r1, [pc, #296]	; (14e54 <RADIO_SetAttr+0x1ec>)
   14d2c:	484a      	ldr	r0, [pc, #296]	; (14e58 <RADIO_SetAttr+0x1f0>)
   14d2e:	1851      	adds	r1, r2, r1
   14d30:	2305      	movs	r3, #5
   14d32:	4281      	cmp	r1, r0
   14d34:	d8bb      	bhi.n	14cae <RADIO_SetAttr+0x46>
   14d36:	4b3f      	ldr	r3, [pc, #252]	; (14e34 <RADIO_SetAttr+0x1cc>)
   14d38:	601a      	str	r2, [r3, #0]
   14d3a:	e7b7      	b.n	14cac <RADIO_SetAttr+0x44>
   14d3c:	682a      	ldr	r2, [r5, #0]
   14d3e:	4b3d      	ldr	r3, [pc, #244]	; (14e34 <RADIO_SetAttr+0x1cc>)
   14d40:	605a      	str	r2, [r3, #4]
   14d42:	e7b3      	b.n	14cac <RADIO_SetAttr+0x44>
   14d44:	882a      	ldrh	r2, [r5, #0]
   14d46:	4b3b      	ldr	r3, [pc, #236]	; (14e34 <RADIO_SetAttr+0x1cc>)
   14d48:	829a      	strh	r2, [r3, #20]
   14d4a:	e7af      	b.n	14cac <RADIO_SetAttr+0x44>
   14d4c:	4b39      	ldr	r3, [pc, #228]	; (14e34 <RADIO_SetAttr+0x1cc>)
   14d4e:	782a      	ldrb	r2, [r5, #0]
   14d50:	3303      	adds	r3, #3
   14d52:	77da      	strb	r2, [r3, #31]
   14d54:	e7aa      	b.n	14cac <RADIO_SetAttr+0x44>
   14d56:	782a      	ldrb	r2, [r5, #0]
   14d58:	2305      	movs	r3, #5
   14d5a:	2a01      	cmp	r2, #1
   14d5c:	d8a7      	bhi.n	14cae <RADIO_SetAttr+0x46>
   14d5e:	4b35      	ldr	r3, [pc, #212]	; (14e34 <RADIO_SetAttr+0x1cc>)
   14d60:	3304      	adds	r3, #4
   14d62:	e7f6      	b.n	14d52 <RADIO_SetAttr+0xea>
   14d64:	782a      	ldrb	r2, [r5, #0]
   14d66:	2305      	movs	r3, #5
   14d68:	2a01      	cmp	r2, #1
   14d6a:	d8a0      	bhi.n	14cae <RADIO_SetAttr+0x46>
   14d6c:	4b31      	ldr	r3, [pc, #196]	; (14e34 <RADIO_SetAttr+0x1cc>)
   14d6e:	3306      	adds	r3, #6
   14d70:	e7ef      	b.n	14d52 <RADIO_SetAttr+0xea>
   14d72:	782a      	ldrb	r2, [r5, #0]
   14d74:	2305      	movs	r3, #5
   14d76:	1fd1      	subs	r1, r2, #7
   14d78:	2902      	cmp	r1, #2
   14d7a:	d898      	bhi.n	14cae <RADIO_SetAttr+0x46>
   14d7c:	4b2d      	ldr	r3, [pc, #180]	; (14e34 <RADIO_SetAttr+0x1cc>)
   14d7e:	3336      	adds	r3, #54	; 0x36
   14d80:	701a      	strb	r2, [r3, #0]
   14d82:	e793      	b.n	14cac <RADIO_SetAttr+0x44>
   14d84:	4b2b      	ldr	r3, [pc, #172]	; (14e34 <RADIO_SetAttr+0x1cc>)
   14d86:	782a      	ldrb	r2, [r5, #0]
   14d88:	3305      	adds	r3, #5
   14d8a:	e7e2      	b.n	14d52 <RADIO_SetAttr+0xea>
   14d8c:	782a      	ldrb	r2, [r5, #0]
   14d8e:	2305      	movs	r3, #5
   14d90:	2a01      	cmp	r2, #1
   14d92:	d900      	bls.n	14d96 <RADIO_SetAttr+0x12e>
   14d94:	e78b      	b.n	14cae <RADIO_SetAttr+0x46>
   14d96:	4b27      	ldr	r3, [pc, #156]	; (14e34 <RADIO_SetAttr+0x1cc>)
   14d98:	3334      	adds	r3, #52	; 0x34
   14d9a:	e7f1      	b.n	14d80 <RADIO_SetAttr+0x118>
   14d9c:	882a      	ldrh	r2, [r5, #0]
   14d9e:	4b25      	ldr	r3, [pc, #148]	; (14e34 <RADIO_SetAttr+0x1cc>)
   14da0:	82da      	strh	r2, [r3, #22]
   14da2:	e783      	b.n	14cac <RADIO_SetAttr+0x44>
   14da4:	782a      	ldrb	r2, [r5, #0]
   14da6:	2305      	movs	r3, #5
   14da8:	1e51      	subs	r1, r2, #1
   14daa:	2903      	cmp	r1, #3
   14dac:	d900      	bls.n	14db0 <RADIO_SetAttr+0x148>
   14dae:	e77e      	b.n	14cae <RADIO_SetAttr+0x46>
   14db0:	4b20      	ldr	r3, [pc, #128]	; (14e34 <RADIO_SetAttr+0x1cc>)
   14db2:	3333      	adds	r3, #51	; 0x33
   14db4:	e7e4      	b.n	14d80 <RADIO_SetAttr+0x118>
   14db6:	4b1f      	ldr	r3, [pc, #124]	; (14e34 <RADIO_SetAttr+0x1cc>)
   14db8:	682a      	ldr	r2, [r5, #0]
   14dba:	60da      	str	r2, [r3, #12]
   14dbc:	682a      	ldr	r2, [r5, #0]
   14dbe:	4b1d      	ldr	r3, [pc, #116]	; (14e34 <RADIO_SetAttr+0x1cc>)
   14dc0:	609a      	str	r2, [r3, #8]
   14dc2:	e773      	b.n	14cac <RADIO_SetAttr+0x44>
   14dc4:	782a      	ldrb	r2, [r5, #0]
   14dc6:	2305      	movs	r3, #5
   14dc8:	2a03      	cmp	r2, #3
   14dca:	d900      	bls.n	14dce <RADIO_SetAttr+0x166>
   14dcc:	e76f      	b.n	14cae <RADIO_SetAttr+0x46>
   14dce:	4b19      	ldr	r3, [pc, #100]	; (14e34 <RADIO_SetAttr+0x1cc>)
   14dd0:	3337      	adds	r3, #55	; 0x37
   14dd2:	e7d5      	b.n	14d80 <RADIO_SetAttr+0x118>
   14dd4:	782a      	ldrb	r2, [r5, #0]
   14dd6:	2305      	movs	r3, #5
   14dd8:	1e51      	subs	r1, r2, #1
   14dda:	2916      	cmp	r1, #22
   14ddc:	d900      	bls.n	14de0 <RADIO_SetAttr+0x178>
   14dde:	e766      	b.n	14cae <RADIO_SetAttr+0x46>
   14de0:	4b14      	ldr	r3, [pc, #80]	; (14e34 <RADIO_SetAttr+0x1cc>)
   14de2:	3338      	adds	r3, #56	; 0x38
   14de4:	e7cc      	b.n	14d80 <RADIO_SetAttr+0x118>
   14de6:	782a      	ldrb	r2, [r5, #0]
   14de8:	2305      	movs	r3, #5
   14dea:	1e51      	subs	r1, r2, #1
   14dec:	2916      	cmp	r1, #22
   14dee:	d900      	bls.n	14df2 <RADIO_SetAttr+0x18a>
   14df0:	e75d      	b.n	14cae <RADIO_SetAttr+0x46>
   14df2:	4b10      	ldr	r3, [pc, #64]	; (14e34 <RADIO_SetAttr+0x1cc>)
   14df4:	3339      	adds	r3, #57	; 0x39
   14df6:	e7c3      	b.n	14d80 <RADIO_SetAttr+0x118>
   14df8:	4b0e      	ldr	r3, [pc, #56]	; (14e34 <RADIO_SetAttr+0x1cc>)
   14dfa:	0029      	movs	r1, r5
   14dfc:	3302      	adds	r3, #2
   14dfe:	7fda      	ldrb	r2, [r3, #31]
   14e00:	4816      	ldr	r0, [pc, #88]	; (14e5c <RADIO_SetAttr+0x1f4>)
   14e02:	4b17      	ldr	r3, [pc, #92]	; (14e60 <RADIO_SetAttr+0x1f8>)
   14e04:	4798      	blx	r3
   14e06:	e751      	b.n	14cac <RADIO_SetAttr+0x44>
   14e08:	782b      	ldrb	r3, [r5, #0]
   14e0a:	1c1a      	adds	r2, r3, #0
   14e0c:	2b08      	cmp	r3, #8
   14e0e:	d900      	bls.n	14e12 <RADIO_SetAttr+0x1aa>
   14e10:	2208      	movs	r2, #8
   14e12:	4b08      	ldr	r3, [pc, #32]	; (14e34 <RADIO_SetAttr+0x1cc>)
   14e14:	3302      	adds	r3, #2
   14e16:	e79c      	b.n	14d52 <RADIO_SetAttr+0xea>
   14e18:	2305      	movs	r3, #5
   14e1a:	782a      	ldrb	r2, [r5, #0]
   14e1c:	1fd1      	subs	r1, r2, #7
   14e1e:	4299      	cmp	r1, r3
   14e20:	d900      	bls.n	14e24 <RADIO_SetAttr+0x1bc>
   14e22:	e744      	b.n	14cae <RADIO_SetAttr+0x46>
   14e24:	4b03      	ldr	r3, [pc, #12]	; (14e34 <RADIO_SetAttr+0x1cc>)
   14e26:	3335      	adds	r3, #53	; 0x35
   14e28:	e7aa      	b.n	14d80 <RADIO_SetAttr+0x118>
   14e2a:	2305      	movs	r3, #5
   14e2c:	e73f      	b.n	14cae <RADIO_SetAttr+0x46>
   14e2e:	46c0      	nop			; (mov r8, r8)
   14e30:	0001557d 	.word	0x0001557d
   14e34:	20002980 	.word	0x20002980
   14e38:	00016755 	.word	0x00016755
   14e3c:	00017999 	.word	0x00017999
   14e40:	00016ab1 	.word	0x00016ab1
   14e44:	f7d58bc0 	.word	0xf7d58bc0
   14e48:	0243d580 	.word	0x0243d580
   14e4c:	e78fe580 	.word	0xe78fe580
   14e50:	06dac2c0 	.word	0x06dac2c0
   14e54:	cc9eec80 	.word	0xcc9eec80
   14e58:	096ae380 	.word	0x096ae380
   14e5c:	20002999 	.word	0x20002999
   14e60:	00019da5 	.word	0x00019da5

00014e64 <RADIO_Init>:
   14e64:	b510      	push	{r4, lr}
   14e66:	4b0c      	ldr	r3, [pc, #48]	; (14e98 <RADIO_Init+0x34>)
   14e68:	4798      	blx	r3
   14e6a:	4b0c      	ldr	r3, [pc, #48]	; (14e9c <RADIO_Init+0x38>)
   14e6c:	201f      	movs	r0, #31
   14e6e:	4798      	blx	r3
   14e70:	4c0b      	ldr	r4, [pc, #44]	; (14ea0 <RADIO_Init+0x3c>)
   14e72:	490c      	ldr	r1, [pc, #48]	; (14ea4 <RADIO_Init+0x40>)
   14e74:	2001      	movs	r0, #1
   14e76:	47a0      	blx	r4
   14e78:	490b      	ldr	r1, [pc, #44]	; (14ea8 <RADIO_Init+0x44>)
   14e7a:	2002      	movs	r0, #2
   14e7c:	47a0      	blx	r4
   14e7e:	490b      	ldr	r1, [pc, #44]	; (14eac <RADIO_Init+0x48>)
   14e80:	2004      	movs	r0, #4
   14e82:	47a0      	blx	r4
   14e84:	490a      	ldr	r1, [pc, #40]	; (14eb0 <RADIO_Init+0x4c>)
   14e86:	2008      	movs	r0, #8
   14e88:	47a0      	blx	r4
   14e8a:	490a      	ldr	r1, [pc, #40]	; (14eb4 <RADIO_Init+0x50>)
   14e8c:	2010      	movs	r0, #16
   14e8e:	47a0      	blx	r4
   14e90:	4909      	ldr	r1, [pc, #36]	; (14eb8 <RADIO_Init+0x54>)
   14e92:	2020      	movs	r0, #32
   14e94:	47a0      	blx	r4
   14e96:	bd10      	pop	{r4, pc}
   14e98:	00015c79 	.word	0x00015c79
   14e9c:	00015589 	.word	0x00015589
   14ea0:	000081f5 	.word	0x000081f5
   14ea4:	00015315 	.word	0x00015315
   14ea8:	0001538d 	.word	0x0001538d
   14eac:	000153fd 	.word	0x000153fd
   14eb0:	0001544d 	.word	0x0001544d
   14eb4:	00015475 	.word	0x00015475
   14eb8:	0001549d 	.word	0x0001549d

00014ebc <Radio_WriteFrequency>:
   14ebc:	b570      	push	{r4, r5, r6, lr}
   14ebe:	490d      	ldr	r1, [pc, #52]	; (14ef4 <Radio_WriteFrequency+0x38>)
   14ec0:	4d0d      	ldr	r5, [pc, #52]	; (14ef8 <Radio_WriteFrequency+0x3c>)
   14ec2:	0006      	movs	r6, r0
   14ec4:	47a8      	blx	r5
   14ec6:	4b0d      	ldr	r3, [pc, #52]	; (14efc <Radio_WriteFrequency+0x40>)
   14ec8:	0004      	movs	r4, r0
   14eca:	490a      	ldr	r1, [pc, #40]	; (14ef4 <Radio_WriteFrequency+0x38>)
   14ecc:	0030      	movs	r0, r6
   14ece:	4798      	blx	r3
   14ed0:	0208      	lsls	r0, r1, #8
   14ed2:	4908      	ldr	r1, [pc, #32]	; (14ef4 <Radio_WriteFrequency+0x38>)
   14ed4:	47a8      	blx	r5
   14ed6:	0224      	lsls	r4, r4, #8
   14ed8:	1904      	adds	r4, r0, r4
   14eda:	0c21      	lsrs	r1, r4, #16
   14edc:	4d08      	ldr	r5, [pc, #32]	; (14f00 <Radio_WriteFrequency+0x44>)
   14ede:	b2c9      	uxtb	r1, r1
   14ee0:	2006      	movs	r0, #6
   14ee2:	47a8      	blx	r5
   14ee4:	0a21      	lsrs	r1, r4, #8
   14ee6:	b2c9      	uxtb	r1, r1
   14ee8:	2007      	movs	r0, #7
   14eea:	47a8      	blx	r5
   14eec:	b2e1      	uxtb	r1, r4
   14eee:	2008      	movs	r0, #8
   14ef0:	47a8      	blx	r5
   14ef2:	bd70      	pop	{r4, r5, r6, pc}
   14ef4:	00003d09 	.word	0x00003d09
   14ef8:	00016641 	.word	0x00016641
   14efc:	0001674d 	.word	0x0001674d
   14f00:	00008121 	.word	0x00008121

00014f04 <Radio_WriteConfiguration>:
   14f04:	b5f0      	push	{r4, r5, r6, r7, lr}
   14f06:	4cb0      	ldr	r4, [pc, #704]	; (151c8 <Radio_WriteConfiguration+0x2c4>)
   14f08:	2200      	movs	r2, #0
   14f0a:	0023      	movs	r3, r4
   14f0c:	b085      	sub	sp, #20
   14f0e:	9002      	str	r0, [sp, #8]
   14f10:	3334      	adds	r3, #52	; 0x34
   14f12:	0010      	movs	r0, r2
   14f14:	7819      	ldrb	r1, [r3, #0]
   14f16:	4bad      	ldr	r3, [pc, #692]	; (151cc <Radio_WriteConfiguration+0x2c8>)
   14f18:	4798      	blx	r3
   14f1a:	4bad      	ldr	r3, [pc, #692]	; (151d0 <Radio_WriteConfiguration+0x2cc>)
   14f1c:	6820      	ldr	r0, [r4, #0]
   14f1e:	4798      	blx	r3
   14f20:	1ce3      	adds	r3, r4, #3
   14f22:	1d62      	adds	r2, r4, #5
   14f24:	7fdb      	ldrb	r3, [r3, #31]
   14f26:	7fd2      	ldrb	r2, [r2, #31]
   14f28:	b25b      	sxtb	r3, r3
   14f2a:	4eaa      	ldr	r6, [pc, #680]	; (151d4 <Radio_WriteConfiguration+0x2d0>)
   14f2c:	4daa      	ldr	r5, [pc, #680]	; (151d8 <Radio_WriteConfiguration+0x2d4>)
   14f2e:	2a00      	cmp	r2, #0
   14f30:	d000      	beq.n	14f34 <Radio_WriteConfiguration+0x30>
   14f32:	e0fc      	b.n	1512e <Radio_WriteConfiguration+0x22a>
   14f34:	1c1f      	adds	r7, r3, #0
   14f36:	2b0f      	cmp	r3, #15
   14f38:	dc00      	bgt.n	14f3c <Radio_WriteConfiguration+0x38>
   14f3a:	e0ec      	b.n	15116 <Radio_WriteConfiguration+0x212>
   14f3c:	270f      	movs	r7, #15
   14f3e:	b27b      	sxtb	r3, r7
   14f40:	204d      	movs	r0, #77	; 0x4d
   14f42:	9301      	str	r3, [sp, #4]
   14f44:	47b0      	blx	r6
   14f46:	21f8      	movs	r1, #248	; 0xf8
   14f48:	4008      	ands	r0, r1
   14f4a:	39f4      	subs	r1, #244	; 0xf4
   14f4c:	4301      	orrs	r1, r0
   14f4e:	204d      	movs	r0, #77	; 0x4d
   14f50:	47a8      	blx	r5
   14f52:	b27b      	sxtb	r3, r7
   14f54:	2b00      	cmp	r3, #0
   14f56:	db00      	blt.n	14f5a <Radio_WriteConfiguration+0x56>
   14f58:	e0e4      	b.n	15124 <Radio_WriteConfiguration+0x220>
   14f5a:	3703      	adds	r7, #3
   14f5c:	b2f9      	uxtb	r1, r7
   14f5e:	2720      	movs	r7, #32
   14f60:	4339      	orrs	r1, r7
   14f62:	2009      	movs	r0, #9
   14f64:	47a8      	blx	r5
   14f66:	0023      	movs	r3, r4
   14f68:	3334      	adds	r3, #52	; 0x34
   14f6a:	781f      	ldrb	r7, [r3, #0]
   14f6c:	2f01      	cmp	r7, #1
   14f6e:	d000      	beq.n	14f72 <Radio_WriteConfiguration+0x6e>
   14f70:	e144      	b.n	151fc <Radio_WriteConfiguration+0x2f8>
   14f72:	7e21      	ldrb	r1, [r4, #24]
   14f74:	2039      	movs	r0, #57	; 0x39
   14f76:	47a8      	blx	r5
   14f78:	4b98      	ldr	r3, [pc, #608]	; (151dc <Radio_WriteConfiguration+0x2d8>)
   14f7a:	201d      	movs	r0, #29
   14f7c:	7819      	ldrb	r1, [r3, #0]
   14f7e:	0023      	movs	r3, r4
   14f80:	3333      	adds	r3, #51	; 0x33
   14f82:	781b      	ldrb	r3, [r3, #0]
   14f84:	0109      	lsls	r1, r1, #4
   14f86:	005b      	lsls	r3, r3, #1
   14f88:	4319      	orrs	r1, r3
   14f8a:	1de3      	adds	r3, r4, #7
   14f8c:	7fdb      	ldrb	r3, [r3, #31]
   14f8e:	401f      	ands	r7, r3
   14f90:	4339      	orrs	r1, r7
   14f92:	b2c9      	uxtb	r1, r1
   14f94:	47a8      	blx	r5
   14f96:	1d23      	adds	r3, r4, #4
   14f98:	7fd9      	ldrb	r1, [r3, #31]
   14f9a:	2304      	movs	r3, #4
   14f9c:	0089      	lsls	r1, r1, #2
   14f9e:	4019      	ands	r1, r3
   14fa0:	0023      	movs	r3, r4
   14fa2:	3335      	adds	r3, #53	; 0x35
   14fa4:	781b      	ldrb	r3, [r3, #0]
   14fa6:	201e      	movs	r0, #30
   14fa8:	011b      	lsls	r3, r3, #4
   14faa:	4319      	orrs	r1, r3
   14fac:	9b02      	ldr	r3, [sp, #8]
   14fae:	059b      	lsls	r3, r3, #22
   14fb0:	0f9b      	lsrs	r3, r3, #30
   14fb2:	4319      	orrs	r1, r3
   14fb4:	b2c9      	uxtb	r1, r1
   14fb6:	47a8      	blx	r5
   14fb8:	2300      	movs	r3, #0
   14fba:	8ae1      	ldrh	r1, [r4, #22]
   14fbc:	4299      	cmp	r1, r3
   14fbe:	d011      	beq.n	14fe4 <Radio_WriteConfiguration+0xe0>
   14fc0:	4a86      	ldr	r2, [pc, #536]	; (151dc <Radio_WriteConfiguration+0x2d8>)
   14fc2:	7812      	ldrb	r2, [r2, #0]
   14fc4:	2a08      	cmp	r2, #8
   14fc6:	d100      	bne.n	14fca <Radio_WriteConfiguration+0xc6>
   14fc8:	e0e4      	b.n	15194 <Radio_WriteConfiguration+0x290>
   14fca:	2a09      	cmp	r2, #9
   14fcc:	d100      	bne.n	14fd0 <Radio_WriteConfiguration+0xcc>
   14fce:	e0e3      	b.n	15198 <Radio_WriteConfiguration+0x294>
   14fd0:	2a07      	cmp	r2, #7
   14fd2:	d000      	beq.n	14fd6 <Radio_WriteConfiguration+0xd2>
   14fd4:	e0e3      	b.n	1519e <Radio_WriteConfiguration+0x29a>
   14fd6:	337d      	adds	r3, #125	; 0x7d
   14fd8:	4359      	muls	r1, r3
   14fda:	0023      	movs	r3, r4
   14fdc:	3335      	adds	r3, #53	; 0x35
   14fde:	781b      	ldrb	r3, [r3, #0]
   14fe0:	40d9      	lsrs	r1, r3
   14fe2:	000b      	movs	r3, r1
   14fe4:	b2d9      	uxtb	r1, r3
   14fe6:	2024      	movs	r0, #36	; 0x24
   14fe8:	4d7b      	ldr	r5, [pc, #492]	; (151d8 <Radio_WriteConfiguration+0x2d4>)
   14fea:	47a8      	blx	r5
   14fec:	466b      	mov	r3, sp
   14fee:	201f      	movs	r0, #31
   14ff0:	7a19      	ldrb	r1, [r3, #8]
   14ff2:	47a8      	blx	r5
   14ff4:	2026      	movs	r0, #38	; 0x26
   14ff6:	47b0      	blx	r6
   14ff8:	0023      	movs	r3, r4
   14ffa:	3335      	adds	r3, #53	; 0x35
   14ffc:	781b      	ldrb	r3, [r3, #0]
   14ffe:	2b0c      	cmp	r3, #12
   15000:	d105      	bne.n	1500e <Radio_WriteConfiguration+0x10a>
   15002:	0023      	movs	r3, r4
   15004:	3336      	adds	r3, #54	; 0x36
   15006:	781b      	ldrb	r3, [r3, #0]
   15008:	3b07      	subs	r3, #7
   1500a:	2b01      	cmp	r3, #1
   1500c:	d906      	bls.n	1501c <Radio_WriteConfiguration+0x118>
   1500e:	6b62      	ldr	r2, [r4, #52]	; 0x34
   15010:	4b73      	ldr	r3, [pc, #460]	; (151e0 <Radio_WriteConfiguration+0x2dc>)
   15012:	4013      	ands	r3, r2
   15014:	4a73      	ldr	r2, [pc, #460]	; (151e4 <Radio_WriteConfiguration+0x2e0>)
   15016:	4293      	cmp	r3, r2
   15018:	d000      	beq.n	1501c <Radio_WriteConfiguration+0x118>
   1501a:	e0c2      	b.n	151a2 <Radio_WriteConfiguration+0x29e>
   1501c:	2108      	movs	r1, #8
   1501e:	4308      	orrs	r0, r1
   15020:	b2c0      	uxtb	r0, r0
   15022:	2104      	movs	r1, #4
   15024:	4301      	orrs	r1, r0
   15026:	2026      	movs	r0, #38	; 0x26
   15028:	47a8      	blx	r5
   1502a:	2031      	movs	r0, #49	; 0x31
   1502c:	47b0      	blx	r6
   1502e:	21f8      	movs	r1, #248	; 0xf8
   15030:	4008      	ands	r0, r1
   15032:	39f5      	subs	r1, #245	; 0xf5
   15034:	4301      	orrs	r1, r0
   15036:	2031      	movs	r0, #49	; 0x31
   15038:	47a8      	blx	r5
   1503a:	210a      	movs	r1, #10
   1503c:	2037      	movs	r0, #55	; 0x37
   1503e:	47a8      	blx	r5
   15040:	0023      	movs	r3, r4
   15042:	3331      	adds	r3, #49	; 0x31
   15044:	781b      	ldrb	r3, [r3, #0]
   15046:	2b12      	cmp	r3, #18
   15048:	d11e      	bne.n	15088 <Radio_WriteConfiguration+0x184>
   1504a:	0023      	movs	r3, r4
   1504c:	3336      	adds	r3, #54	; 0x36
   1504e:	781b      	ldrb	r3, [r3, #0]
   15050:	3b07      	subs	r3, #7
   15052:	2b01      	cmp	r3, #1
   15054:	d80b      	bhi.n	1506e <Radio_WriteConfiguration+0x16a>
   15056:	2031      	movs	r0, #49	; 0x31
   15058:	47b0      	blx	r6
   1505a:	217f      	movs	r1, #127	; 0x7f
   1505c:	4001      	ands	r1, r0
   1505e:	2031      	movs	r0, #49	; 0x31
   15060:	47a8      	blx	r5
   15062:	2140      	movs	r1, #64	; 0x40
   15064:	202f      	movs	r0, #47	; 0x2f
   15066:	47a8      	blx	r5
   15068:	2100      	movs	r1, #0
   1506a:	2030      	movs	r0, #48	; 0x30
   1506c:	47a8      	blx	r5
   1506e:	0023      	movs	r3, r4
   15070:	3336      	adds	r3, #54	; 0x36
   15072:	781b      	ldrb	r3, [r3, #0]
   15074:	2b09      	cmp	r3, #9
   15076:	d107      	bne.n	15088 <Radio_WriteConfiguration+0x184>
   15078:	2031      	movs	r0, #49	; 0x31
   1507a:	47b0      	blx	r6
   1507c:	2180      	movs	r1, #128	; 0x80
   1507e:	4249      	negs	r1, r1
   15080:	4301      	orrs	r1, r0
   15082:	b2c9      	uxtb	r1, r1
   15084:	2031      	movs	r0, #49	; 0x31
   15086:	47a8      	blx	r5
   15088:	2033      	movs	r0, #51	; 0x33
   1508a:	47b0      	blx	r6
   1508c:	1da3      	adds	r3, r4, #6
   1508e:	7fd9      	ldrb	r1, [r3, #31]
   15090:	2340      	movs	r3, #64	; 0x40
   15092:	0189      	lsls	r1, r1, #6
   15094:	4398      	bics	r0, r3
   15096:	4019      	ands	r1, r3
   15098:	4301      	orrs	r1, r0
   1509a:	b2c9      	uxtb	r1, r1
   1509c:	2033      	movs	r0, #51	; 0x33
   1509e:	47a8      	blx	r5
   150a0:	8aa1      	ldrh	r1, [r4, #20]
   150a2:	2020      	movs	r0, #32
   150a4:	0a09      	lsrs	r1, r1, #8
   150a6:	47a8      	blx	r5
   150a8:	7d21      	ldrb	r1, [r4, #20]
   150aa:	2021      	movs	r0, #33	; 0x21
   150ac:	47a8      	blx	r5
   150ae:	2100      	movs	r1, #0
   150b0:	200d      	movs	r0, #13
   150b2:	47a8      	blx	r5
   150b4:	2100      	movs	r1, #0
   150b6:	200e      	movs	r0, #14
   150b8:	47a8      	blx	r5
   150ba:	2100      	movs	r1, #0
   150bc:	200f      	movs	r0, #15
   150be:	47a8      	blx	r5
   150c0:	0023      	movs	r3, r4
   150c2:	3331      	adds	r3, #49	; 0x31
   150c4:	781b      	ldrb	r3, [r3, #0]
   150c6:	2b12      	cmp	r3, #18
   150c8:	d120      	bne.n	1510c <Radio_WriteConfiguration+0x208>
   150ca:	0023      	movs	r3, r4
   150cc:	3336      	adds	r3, #54	; 0x36
   150ce:	781b      	ldrb	r3, [r3, #0]
   150d0:	2b09      	cmp	r3, #9
   150d2:	d000      	beq.n	150d6 <Radio_WriteConfiguration+0x1d2>
   150d4:	e072      	b.n	151bc <Radio_WriteConfiguration+0x2b8>
   150d6:	4a44      	ldr	r2, [pc, #272]	; (151e8 <Radio_WriteConfiguration+0x2e4>)
   150d8:	6823      	ldr	r3, [r4, #0]
   150da:	1899      	adds	r1, r3, r2
   150dc:	4a43      	ldr	r2, [pc, #268]	; (151ec <Radio_WriteConfiguration+0x2e8>)
   150de:	4291      	cmp	r1, r2
   150e0:	d862      	bhi.n	151a8 <Radio_WriteConfiguration+0x2a4>
   150e2:	2102      	movs	r1, #2
   150e4:	2036      	movs	r0, #54	; 0x36
   150e6:	47a8      	blx	r5
   150e8:	2164      	movs	r1, #100	; 0x64
   150ea:	203a      	movs	r0, #58	; 0x3a
   150ec:	47a8      	blx	r5
   150ee:	0023      	movs	r3, r4
   150f0:	3336      	adds	r3, #54	; 0x36
   150f2:	781b      	ldrb	r3, [r3, #0]
   150f4:	2165      	movs	r1, #101	; 0x65
   150f6:	203a      	movs	r0, #58	; 0x3a
   150f8:	2b09      	cmp	r3, #9
   150fa:	d162      	bne.n	151c2 <Radio_WriteConfiguration+0x2be>
   150fc:	3406      	adds	r4, #6
   150fe:	7fe3      	ldrb	r3, [r4, #31]
   15100:	2b01      	cmp	r3, #1
   15102:	d15e      	bne.n	151c2 <Radio_WriteConfiguration+0x2be>
   15104:	47a8      	blx	r5
   15106:	2119      	movs	r1, #25
   15108:	203b      	movs	r0, #59	; 0x3b
   1510a:	47a8      	blx	r5
   1510c:	21ff      	movs	r1, #255	; 0xff
   1510e:	2012      	movs	r0, #18
   15110:	47a8      	blx	r5
   15112:	b005      	add	sp, #20
   15114:	bdf0      	pop	{r4, r5, r6, r7, pc}
   15116:	b25b      	sxtb	r3, r3
   15118:	3303      	adds	r3, #3
   1511a:	db00      	blt.n	1511e <Radio_WriteConfiguration+0x21a>
   1511c:	e70f      	b.n	14f3e <Radio_WriteConfiguration+0x3a>
   1511e:	4b34      	ldr	r3, [pc, #208]	; (151f0 <Radio_WriteConfiguration+0x2ec>)
   15120:	781f      	ldrb	r7, [r3, #0]
   15122:	e70c      	b.n	14f3e <Radio_WriteConfiguration+0x3a>
   15124:	2170      	movs	r1, #112	; 0x70
   15126:	9b01      	ldr	r3, [sp, #4]
   15128:	4319      	orrs	r1, r3
   1512a:	b2c9      	uxtb	r1, r1
   1512c:	e719      	b.n	14f62 <Radio_WriteConfiguration+0x5e>
   1512e:	2b01      	cmp	r3, #1
   15130:	dd07      	ble.n	15142 <Radio_WriteConfiguration+0x23e>
   15132:	2714      	movs	r7, #20
   15134:	2b13      	cmp	r3, #19
   15136:	dc06      	bgt.n	15146 <Radio_WriteConfiguration+0x242>
   15138:	1c1f      	adds	r7, r3, #0
   1513a:	2b11      	cmp	r3, #17
   1513c:	dd02      	ble.n	15144 <Radio_WriteConfiguration+0x240>
   1513e:	2711      	movs	r7, #17
   15140:	e000      	b.n	15144 <Radio_WriteConfiguration+0x240>
   15142:	2702      	movs	r7, #2
   15144:	b27f      	sxtb	r7, r7
   15146:	200b      	movs	r0, #11
   15148:	47b0      	blx	r6
   1514a:	9003      	str	r0, [sp, #12]
   1514c:	204d      	movs	r0, #77	; 0x4d
   1514e:	47b0      	blx	r6
   15150:	2307      	movs	r3, #7
   15152:	4398      	bics	r0, r3
   15154:	b2c1      	uxtb	r1, r0
   15156:	2f14      	cmp	r7, #20
   15158:	d112      	bne.n	15180 <Radio_WriteConfiguration+0x27c>
   1515a:	4319      	orrs	r1, r3
   1515c:	9b03      	ldr	r3, [sp, #12]
   1515e:	37cb      	adds	r7, #203	; 0xcb
   15160:	403b      	ands	r3, r7
   15162:	001f      	movs	r7, r3
   15164:	230f      	movs	r3, #15
   15166:	9301      	str	r3, [sp, #4]
   15168:	204d      	movs	r0, #77	; 0x4d
   1516a:	47a8      	blx	r5
   1516c:	2180      	movs	r1, #128	; 0x80
   1516e:	9b01      	ldr	r3, [sp, #4]
   15170:	4249      	negs	r1, r1
   15172:	4319      	orrs	r1, r3
   15174:	b2c9      	uxtb	r1, r1
   15176:	2009      	movs	r0, #9
   15178:	47a8      	blx	r5
   1517a:	0039      	movs	r1, r7
   1517c:	200b      	movs	r0, #11
   1517e:	e6f1      	b.n	14f64 <Radio_WriteConfiguration+0x60>
   15180:	3f02      	subs	r7, #2
   15182:	b27b      	sxtb	r3, r7
   15184:	2720      	movs	r7, #32
   15186:	2004      	movs	r0, #4
   15188:	9301      	str	r3, [sp, #4]
   1518a:	9b03      	ldr	r3, [sp, #12]
   1518c:	4301      	orrs	r1, r0
   1518e:	431f      	orrs	r7, r3
   15190:	b2ff      	uxtb	r7, r7
   15192:	e7e9      	b.n	15168 <Radio_WriteConfiguration+0x264>
   15194:	23fa      	movs	r3, #250	; 0xfa
   15196:	e71f      	b.n	14fd8 <Radio_WriteConfiguration+0xd4>
   15198:	23fa      	movs	r3, #250	; 0xfa
   1519a:	005b      	lsls	r3, r3, #1
   1519c:	e71c      	b.n	14fd8 <Radio_WriteConfiguration+0xd4>
   1519e:	0019      	movs	r1, r3
   151a0:	e71b      	b.n	14fda <Radio_WriteConfiguration+0xd6>
   151a2:	21f7      	movs	r1, #247	; 0xf7
   151a4:	4008      	ands	r0, r1
   151a6:	e73c      	b.n	15022 <Radio_WriteConfiguration+0x11e>
   151a8:	4a12      	ldr	r2, [pc, #72]	; (151f4 <Radio_WriteConfiguration+0x2f0>)
   151aa:	189b      	adds	r3, r3, r2
   151ac:	4a12      	ldr	r2, [pc, #72]	; (151f8 <Radio_WriteConfiguration+0x2f4>)
   151ae:	4293      	cmp	r3, r2
   151b0:	d804      	bhi.n	151bc <Radio_WriteConfiguration+0x2b8>
   151b2:	2102      	movs	r1, #2
   151b4:	2036      	movs	r0, #54	; 0x36
   151b6:	47a8      	blx	r5
   151b8:	217f      	movs	r1, #127	; 0x7f
   151ba:	e796      	b.n	150ea <Radio_WriteConfiguration+0x1e6>
   151bc:	2103      	movs	r1, #3
   151be:	2036      	movs	r0, #54	; 0x36
   151c0:	e794      	b.n	150ec <Radio_WriteConfiguration+0x1e8>
   151c2:	47a8      	blx	r5
   151c4:	211d      	movs	r1, #29
   151c6:	e79f      	b.n	15108 <Radio_WriteConfiguration+0x204>
   151c8:	20002980 	.word	0x20002980
   151cc:	0000f4f5 	.word	0x0000f4f5
   151d0:	00014ebd 	.word	0x00014ebd
   151d4:	00008149 	.word	0x00008149
   151d8:	00008121 	.word	0x00008121
   151dc:	200029b6 	.word	0x200029b6
   151e0:	00ffff00 	.word	0x00ffff00
   151e4:	00070b00 	.word	0x00070b00
   151e8:	cc9eec80 	.word	0xcc9eec80
   151ec:	096ae380 	.word	0x096ae380
   151f0:	0002041c 	.word	0x0002041c
   151f4:	e78fe580 	.word	0xe78fe580
   151f8:	06dac2c0 	.word	0x06dac2c0
   151fc:	6863      	ldr	r3, [r4, #4]
   151fe:	492c      	ldr	r1, [pc, #176]	; (152b0 <Radio_WriteConfiguration+0x3ac>)
   15200:	0218      	lsls	r0, r3, #8
   15202:	4b2c      	ldr	r3, [pc, #176]	; (152b4 <Radio_WriteConfiguration+0x3b0>)
   15204:	4798      	blx	r3
   15206:	0007      	movs	r7, r0
   15208:	0a01      	lsrs	r1, r0, #8
   1520a:	b2c9      	uxtb	r1, r1
   1520c:	2004      	movs	r0, #4
   1520e:	47a8      	blx	r5
   15210:	b2f9      	uxtb	r1, r7
   15212:	2005      	movs	r0, #5
   15214:	47a8      	blx	r5
   15216:	4b27      	ldr	r3, [pc, #156]	; (152b4 <Radio_WriteConfiguration+0x3b0>)
   15218:	68a1      	ldr	r1, [r4, #8]
   1521a:	4827      	ldr	r0, [pc, #156]	; (152b8 <Radio_WriteConfiguration+0x3b4>)
   1521c:	4798      	blx	r3
   1521e:	0007      	movs	r7, r0
   15220:	0a01      	lsrs	r1, r0, #8
   15222:	b2c9      	uxtb	r1, r1
   15224:	2002      	movs	r0, #2
   15226:	47a8      	blx	r5
   15228:	b2f9      	uxtb	r1, r7
   1522a:	2003      	movs	r0, #3
   1522c:	47a8      	blx	r5
   1522e:	2100      	movs	r1, #0
   15230:	205d      	movs	r0, #93	; 0x5d
   15232:	47a8      	blx	r5
   15234:	8aa1      	ldrh	r1, [r4, #20]
   15236:	2025      	movs	r0, #37	; 0x25
   15238:	0a09      	lsrs	r1, r1, #8
   1523a:	47a8      	blx	r5
   1523c:	7d21      	ldrb	r1, [r4, #20]
   1523e:	2026      	movs	r0, #38	; 0x26
   15240:	47a8      	blx	r5
   15242:	219e      	movs	r1, #158	; 0x9e
   15244:	200d      	movs	r0, #13
   15246:	47a8      	blx	r5
   15248:	21bf      	movs	r1, #191	; 0xbf
   1524a:	2035      	movs	r0, #53	; 0x35
   1524c:	47a8      	blx	r5
   1524e:	200a      	movs	r0, #10
   15250:	47b0      	blx	r6
   15252:	0023      	movs	r3, r4
   15254:	3337      	adds	r3, #55	; 0x37
   15256:	7819      	ldrb	r1, [r3, #0]
   15258:	2360      	movs	r3, #96	; 0x60
   1525a:	0149      	lsls	r1, r1, #5
   1525c:	4398      	bics	r0, r3
   1525e:	4301      	orrs	r1, r0
   15260:	b2c9      	uxtb	r1, r1
   15262:	200a      	movs	r0, #10
   15264:	47a8      	blx	r5
   15266:	1d23      	adds	r3, r4, #4
   15268:	7fdb      	ldrb	r3, [r3, #31]
   1526a:	21c0      	movs	r1, #192	; 0xc0
   1526c:	2b00      	cmp	r3, #0
   1526e:	d000      	beq.n	15272 <Radio_WriteConfiguration+0x36e>
   15270:	3110      	adds	r1, #16
   15272:	2030      	movs	r0, #48	; 0x30
   15274:	47a8      	blx	r5
   15276:	2600      	movs	r6, #0
   15278:	1ca3      	adds	r3, r4, #2
   1527a:	7fd9      	ldrb	r1, [r3, #31]
   1527c:	428e      	cmp	r6, r1
   1527e:	d30d      	bcc.n	1529c <Radio_WriteConfiguration+0x398>
   15280:	2900      	cmp	r1, #0
   15282:	d003      	beq.n	1528c <Radio_WriteConfiguration+0x388>
   15284:	2310      	movs	r3, #16
   15286:	3901      	subs	r1, #1
   15288:	4319      	orrs	r1, r3
   1528a:	b2c9      	uxtb	r1, r1
   1528c:	2027      	movs	r0, #39	; 0x27
   1528e:	47a8      	blx	r5
   15290:	21ff      	movs	r1, #255	; 0xff
   15292:	203e      	movs	r0, #62	; 0x3e
   15294:	47a8      	blx	r5
   15296:	21ff      	movs	r1, #255	; 0xff
   15298:	203f      	movs	r0, #63	; 0x3f
   1529a:	e739      	b.n	15110 <Radio_WriteConfiguration+0x20c>
   1529c:	0030      	movs	r0, r6
   1529e:	19a3      	adds	r3, r4, r6
   152a0:	3028      	adds	r0, #40	; 0x28
   152a2:	7e59      	ldrb	r1, [r3, #25]
   152a4:	b2c0      	uxtb	r0, r0
   152a6:	3601      	adds	r6, #1
   152a8:	47a8      	blx	r5
   152aa:	b2f6      	uxtb	r6, r6
   152ac:	e7e4      	b.n	15278 <Radio_WriteConfiguration+0x374>
   152ae:	46c0      	nop			; (mov r8, r8)
   152b0:	00003d09 	.word	0x00003d09
   152b4:	00016641 	.word	0x00016641
   152b8:	01e84800 	.word	0x01e84800

000152bc <RADIO_getMappingAndOpmode>:
   152bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   152be:	0006      	movs	r6, r0
   152c0:	4d06      	ldr	r5, [pc, #24]	; (152dc <RADIO_getMappingAndOpmode+0x20>)
   152c2:	2040      	movs	r0, #64	; 0x40
   152c4:	001f      	movs	r7, r3
   152c6:	0014      	movs	r4, r2
   152c8:	9101      	str	r1, [sp, #4]
   152ca:	47a8      	blx	r5
   152cc:	4004      	ands	r4, r0
   152ce:	413c      	asrs	r4, r7
   152d0:	2001      	movs	r0, #1
   152d2:	7034      	strb	r4, [r6, #0]
   152d4:	47a8      	blx	r5
   152d6:	9b01      	ldr	r3, [sp, #4]
   152d8:	7018      	strb	r0, [r3, #0]
   152da:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
   152dc:	00008149 	.word	0x00008149

000152e0 <RADIO_UnhandledInterrupt.part.0>:
   152e0:	b510      	push	{r4, lr}
   152e2:	21ff      	movs	r1, #255	; 0xff
   152e4:	2012      	movs	r0, #18
   152e6:	4b01      	ldr	r3, [pc, #4]	; (152ec <RADIO_UnhandledInterrupt.part.0+0xc>)
   152e8:	4798      	blx	r3
   152ea:	bd10      	pop	{r4, pc}
   152ec:	00008121 	.word	0x00008121

000152f0 <RADIO_UnhandledInterrupt>:
   152f0:	b510      	push	{r4, lr}
   152f2:	2801      	cmp	r0, #1
   152f4:	d102      	bne.n	152fc <RADIO_UnhandledInterrupt+0xc>
   152f6:	4b05      	ldr	r3, [pc, #20]	; (1530c <RADIO_UnhandledInterrupt+0x1c>)
   152f8:	4798      	blx	r3
   152fa:	bd10      	pop	{r4, pc}
   152fc:	21ff      	movs	r1, #255	; 0xff
   152fe:	203e      	movs	r0, #62	; 0x3e
   15300:	4c03      	ldr	r4, [pc, #12]	; (15310 <RADIO_UnhandledInterrupt+0x20>)
   15302:	47a0      	blx	r4
   15304:	21ff      	movs	r1, #255	; 0xff
   15306:	203f      	movs	r0, #63	; 0x3f
   15308:	47a0      	blx	r4
   1530a:	e7f6      	b.n	152fa <RADIO_UnhandledInterrupt+0xa>
   1530c:	000152e1 	.word	0x000152e1
   15310:	00008121 	.word	0x00008121

00015314 <RADIO_DIO0>:
   15314:	b573      	push	{r0, r1, r4, r5, r6, lr}
   15316:	466b      	mov	r3, sp
   15318:	1ddc      	adds	r4, r3, #7
   1531a:	1d9d      	adds	r5, r3, #6
   1531c:	22c0      	movs	r2, #192	; 0xc0
   1531e:	2306      	movs	r3, #6
   15320:	0028      	movs	r0, r5
   15322:	0021      	movs	r1, r4
   15324:	4e12      	ldr	r6, [pc, #72]	; (15370 <RADIO_DIO0+0x5c>)
   15326:	47b0      	blx	r6
   15328:	7823      	ldrb	r3, [r4, #0]
   1532a:	7828      	ldrb	r0, [r5, #0]
   1532c:	b25a      	sxtb	r2, r3
   1532e:	b2c0      	uxtb	r0, r0
   15330:	2a00      	cmp	r2, #0
   15332:	da0b      	bge.n	1534c <RADIO_DIO0+0x38>
   15334:	2800      	cmp	r0, #0
   15336:	d004      	beq.n	15342 <RADIO_DIO0+0x2e>
   15338:	2801      	cmp	r0, #1
   1533a:	d005      	beq.n	15348 <RADIO_DIO0+0x34>
   1533c:	4b0d      	ldr	r3, [pc, #52]	; (15374 <RADIO_DIO0+0x60>)
   1533e:	4798      	blx	r3
   15340:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
   15342:	4b0d      	ldr	r3, [pc, #52]	; (15378 <RADIO_DIO0+0x64>)
   15344:	4798      	blx	r3
   15346:	e7fb      	b.n	15340 <RADIO_DIO0+0x2c>
   15348:	4b0c      	ldr	r3, [pc, #48]	; (1537c <RADIO_DIO0+0x68>)
   1534a:	e7fb      	b.n	15344 <RADIO_DIO0+0x30>
   1534c:	2800      	cmp	r0, #0
   1534e:	d10a      	bne.n	15366 <RADIO_DIO0+0x52>
   15350:	2207      	movs	r2, #7
   15352:	4013      	ands	r3, r2
   15354:	7023      	strb	r3, [r4, #0]
   15356:	2b03      	cmp	r3, #3
   15358:	d101      	bne.n	1535e <RADIO_DIO0+0x4a>
   1535a:	4b09      	ldr	r3, [pc, #36]	; (15380 <RADIO_DIO0+0x6c>)
   1535c:	e7f2      	b.n	15344 <RADIO_DIO0+0x30>
   1535e:	2b05      	cmp	r3, #5
   15360:	d102      	bne.n	15368 <RADIO_DIO0+0x54>
   15362:	4b08      	ldr	r3, [pc, #32]	; (15384 <RADIO_DIO0+0x70>)
   15364:	e7ee      	b.n	15344 <RADIO_DIO0+0x30>
   15366:	2000      	movs	r0, #0
   15368:	4b07      	ldr	r3, [pc, #28]	; (15388 <RADIO_DIO0+0x74>)
   1536a:	4798      	blx	r3
   1536c:	e7e8      	b.n	15340 <RADIO_DIO0+0x2c>
   1536e:	46c0      	nop			; (mov r8, r8)
   15370:	000152bd 	.word	0x000152bd
   15374:	000152e1 	.word	0x000152e1
   15378:	00015a99 	.word	0x00015a99
   1537c:	0001599d 	.word	0x0001599d
   15380:	00015a19 	.word	0x00015a19
   15384:	00015b15 	.word	0x00015b15
   15388:	000152f1 	.word	0x000152f1

0001538c <RADIO_DIO1>:
   1538c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1538e:	466b      	mov	r3, sp
   15390:	1ddc      	adds	r4, r3, #7
   15392:	1d9d      	adds	r5, r3, #6
   15394:	2230      	movs	r2, #48	; 0x30
   15396:	2304      	movs	r3, #4
   15398:	0021      	movs	r1, r4
   1539a:	0028      	movs	r0, r5
   1539c:	4e11      	ldr	r6, [pc, #68]	; (153e4 <RADIO_DIO1+0x58>)
   1539e:	47b0      	blx	r6
   153a0:	7822      	ldrb	r2, [r4, #0]
   153a2:	782b      	ldrb	r3, [r5, #0]
   153a4:	b251      	sxtb	r1, r2
   153a6:	2900      	cmp	r1, #0
   153a8:	da0c      	bge.n	153c4 <RADIO_DIO1+0x38>
   153aa:	b2db      	uxtb	r3, r3
   153ac:	2b00      	cmp	r3, #0
   153ae:	d004      	beq.n	153ba <RADIO_DIO1+0x2e>
   153b0:	2b01      	cmp	r3, #1
   153b2:	d005      	beq.n	153c0 <RADIO_DIO1+0x34>
   153b4:	4b0c      	ldr	r3, [pc, #48]	; (153e8 <RADIO_DIO1+0x5c>)
   153b6:	4798      	blx	r3
   153b8:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
   153ba:	4b0c      	ldr	r3, [pc, #48]	; (153ec <RADIO_DIO1+0x60>)
   153bc:	4798      	blx	r3
   153be:	e7fb      	b.n	153b8 <RADIO_DIO1+0x2c>
   153c0:	4b0b      	ldr	r3, [pc, #44]	; (153f0 <RADIO_DIO1+0x64>)
   153c2:	e7fb      	b.n	153bc <RADIO_DIO1+0x30>
   153c4:	2107      	movs	r1, #7
   153c6:	b2db      	uxtb	r3, r3
   153c8:	400a      	ands	r2, r1
   153ca:	7022      	strb	r2, [r4, #0]
   153cc:	2b00      	cmp	r3, #0
   153ce:	d005      	beq.n	153dc <RADIO_DIO1+0x50>
   153d0:	2b01      	cmp	r3, #1
   153d2:	d1f1      	bne.n	153b8 <RADIO_DIO1+0x2c>
   153d4:	2a03      	cmp	r2, #3
   153d6:	d1ef      	bne.n	153b8 <RADIO_DIO1+0x2c>
   153d8:	4b06      	ldr	r3, [pc, #24]	; (153f4 <RADIO_DIO1+0x68>)
   153da:	e7ef      	b.n	153bc <RADIO_DIO1+0x30>
   153dc:	4b06      	ldr	r3, [pc, #24]	; (153f8 <RADIO_DIO1+0x6c>)
   153de:	2a05      	cmp	r2, #5
   153e0:	d1ea      	bne.n	153b8 <RADIO_DIO1+0x2c>
   153e2:	e7eb      	b.n	153bc <RADIO_DIO1+0x30>
   153e4:	000152bd 	.word	0x000152bd
   153e8:	000152e1 	.word	0x000152e1
   153ec:	00015921 	.word	0x00015921
   153f0:	0000f5d9 	.word	0x0000f5d9
   153f4:	00015749 	.word	0x00015749
   153f8:	000156ad 	.word	0x000156ad

000153fc <RADIO_DIO2>:
   153fc:	b573      	push	{r0, r1, r4, r5, r6, lr}
   153fe:	466b      	mov	r3, sp
   15400:	1ddc      	adds	r4, r3, #7
   15402:	1d9d      	adds	r5, r3, #6
   15404:	220c      	movs	r2, #12
   15406:	2302      	movs	r3, #2
   15408:	0021      	movs	r1, r4
   1540a:	0028      	movs	r0, r5
   1540c:	4e0b      	ldr	r6, [pc, #44]	; (1543c <RADIO_DIO2+0x40>)
   1540e:	47b0      	blx	r6
   15410:	7823      	ldrb	r3, [r4, #0]
   15412:	782a      	ldrb	r2, [r5, #0]
   15414:	b259      	sxtb	r1, r3
   15416:	2900      	cmp	r1, #0
   15418:	da05      	bge.n	15426 <RADIO_DIO2+0x2a>
   1541a:	4b09      	ldr	r3, [pc, #36]	; (15440 <RADIO_DIO2+0x44>)
   1541c:	2a02      	cmp	r2, #2
   1541e:	d90a      	bls.n	15436 <RADIO_DIO2+0x3a>
   15420:	4b08      	ldr	r3, [pc, #32]	; (15444 <RADIO_DIO2+0x48>)
   15422:	4798      	blx	r3
   15424:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
   15426:	2107      	movs	r1, #7
   15428:	400b      	ands	r3, r1
   1542a:	7023      	strb	r3, [r4, #0]
   1542c:	2a03      	cmp	r2, #3
   1542e:	d1f9      	bne.n	15424 <RADIO_DIO2+0x28>
   15430:	2b05      	cmp	r3, #5
   15432:	d1f7      	bne.n	15424 <RADIO_DIO2+0x28>
   15434:	4b04      	ldr	r3, [pc, #16]	; (15448 <RADIO_DIO2+0x4c>)
   15436:	4798      	blx	r3
   15438:	e7f4      	b.n	15424 <RADIO_DIO2+0x28>
   1543a:	46c0      	nop			; (mov r8, r8)
   1543c:	000152bd 	.word	0x000152bd
   15440:	0000f5d9 	.word	0x0000f5d9
   15444:	000152e1 	.word	0x000152e1
   15448:	0001567d 	.word	0x0001567d

0001544c <RADIO_DIO3>:
   1544c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1544e:	466b      	mov	r3, sp
   15450:	4668      	mov	r0, sp
   15452:	1ddc      	adds	r4, r3, #7
   15454:	2203      	movs	r2, #3
   15456:	2300      	movs	r3, #0
   15458:	0021      	movs	r1, r4
   1545a:	3006      	adds	r0, #6
   1545c:	4d03      	ldr	r5, [pc, #12]	; (1546c <RADIO_DIO3+0x20>)
   1545e:	47a8      	blx	r5
   15460:	7823      	ldrb	r3, [r4, #0]
   15462:	2b7f      	cmp	r3, #127	; 0x7f
   15464:	d901      	bls.n	1546a <RADIO_DIO3+0x1e>
   15466:	4b02      	ldr	r3, [pc, #8]	; (15470 <RADIO_DIO3+0x24>)
   15468:	4798      	blx	r3
   1546a:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
   1546c:	000152bd 	.word	0x000152bd
   15470:	000152e1 	.word	0x000152e1

00015474 <RADIO_DIO4>:
   15474:	b537      	push	{r0, r1, r2, r4, r5, lr}
   15476:	466b      	mov	r3, sp
   15478:	4668      	mov	r0, sp
   1547a:	1ddc      	adds	r4, r3, #7
   1547c:	2306      	movs	r3, #6
   1547e:	22c0      	movs	r2, #192	; 0xc0
   15480:	18c0      	adds	r0, r0, r3
   15482:	0021      	movs	r1, r4
   15484:	4d03      	ldr	r5, [pc, #12]	; (15494 <RADIO_DIO4+0x20>)
   15486:	47a8      	blx	r5
   15488:	7823      	ldrb	r3, [r4, #0]
   1548a:	2b7f      	cmp	r3, #127	; 0x7f
   1548c:	d901      	bls.n	15492 <RADIO_DIO4+0x1e>
   1548e:	4b02      	ldr	r3, [pc, #8]	; (15498 <RADIO_DIO4+0x24>)
   15490:	4798      	blx	r3
   15492:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
   15494:	000152bd 	.word	0x000152bd
   15498:	000152e1 	.word	0x000152e1

0001549c <RADIO_DIO5>:
   1549c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1549e:	466b      	mov	r3, sp
   154a0:	4668      	mov	r0, sp
   154a2:	1ddc      	adds	r4, r3, #7
   154a4:	2230      	movs	r2, #48	; 0x30
   154a6:	2304      	movs	r3, #4
   154a8:	0021      	movs	r1, r4
   154aa:	3006      	adds	r0, #6
   154ac:	4d03      	ldr	r5, [pc, #12]	; (154bc <RADIO_DIO5+0x20>)
   154ae:	47a8      	blx	r5
   154b0:	7823      	ldrb	r3, [r4, #0]
   154b2:	2b7f      	cmp	r3, #127	; 0x7f
   154b4:	d901      	bls.n	154ba <RADIO_DIO5+0x1e>
   154b6:	4b02      	ldr	r3, [pc, #8]	; (154c0 <RADIO_DIO5+0x24>)
   154b8:	4798      	blx	r3
   154ba:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
   154bc:	000152bd 	.word	0x000152bd
   154c0:	000152e1 	.word	0x000152e1

000154c4 <radioPostTask>:
   154c4:	b510      	push	{r4, lr}
   154c6:	0004      	movs	r4, r0
   154c8:	4b05      	ldr	r3, [pc, #20]	; (154e0 <radioPostTask+0x1c>)
   154ca:	4798      	blx	r3
   154cc:	4b05      	ldr	r3, [pc, #20]	; (154e4 <radioPostTask+0x20>)
   154ce:	8818      	ldrh	r0, [r3, #0]
   154d0:	4320      	orrs	r0, r4
   154d2:	8018      	strh	r0, [r3, #0]
   154d4:	4b04      	ldr	r3, [pc, #16]	; (154e8 <radioPostTask+0x24>)
   154d6:	4798      	blx	r3
   154d8:	2002      	movs	r0, #2
   154da:	4b04      	ldr	r3, [pc, #16]	; (154ec <radioPostTask+0x28>)
   154dc:	4798      	blx	r3
   154de:	bd10      	pop	{r4, pc}
   154e0:	000083d1 	.word	0x000083d1
   154e4:	20001122 	.word	0x20001122
   154e8:	000083dd 	.word	0x000083dd
   154ec:	0000f4bd 	.word	0x0000f4bd

000154f0 <radioClearTask>:
   154f0:	b510      	push	{r4, lr}
   154f2:	0004      	movs	r4, r0
   154f4:	4b04      	ldr	r3, [pc, #16]	; (15508 <radioClearTask+0x18>)
   154f6:	4798      	blx	r3
   154f8:	4a04      	ldr	r2, [pc, #16]	; (1550c <radioClearTask+0x1c>)
   154fa:	8813      	ldrh	r3, [r2, #0]
   154fc:	43a3      	bics	r3, r4
   154fe:	8013      	strh	r3, [r2, #0]
   15500:	4b03      	ldr	r3, [pc, #12]	; (15510 <radioClearTask+0x20>)
   15502:	4798      	blx	r3
   15504:	bd10      	pop	{r4, pc}
   15506:	46c0      	nop			; (mov r8, r8)
   15508:	000083d1 	.word	0x000083d1
   1550c:	20001122 	.word	0x20001122
   15510:	000083dd 	.word	0x000083dd

00015514 <RADIO_TaskHandler>:
   15514:	b570      	push	{r4, r5, r6, lr}
   15516:	2400      	movs	r4, #0
   15518:	4d10      	ldr	r5, [pc, #64]	; (1555c <RADIO_TaskHandler+0x48>)
   1551a:	2601      	movs	r6, #1
   1551c:	882b      	ldrh	r3, [r5, #0]
   1551e:	42a3      	cmp	r3, r4
   15520:	d015      	beq.n	1554e <RADIO_TaskHandler+0x3a>
   15522:	882b      	ldrh	r3, [r5, #0]
   15524:	4123      	asrs	r3, r4
   15526:	4233      	tst	r3, r6
   15528:	d013      	beq.n	15552 <RADIO_TaskHandler+0x3e>
   1552a:	40a6      	lsls	r6, r4
   1552c:	4b0c      	ldr	r3, [pc, #48]	; (15560 <RADIO_TaskHandler+0x4c>)
   1552e:	4798      	blx	r3
   15530:	882b      	ldrh	r3, [r5, #0]
   15532:	00a4      	lsls	r4, r4, #2
   15534:	43b3      	bics	r3, r6
   15536:	802b      	strh	r3, [r5, #0]
   15538:	4b0a      	ldr	r3, [pc, #40]	; (15564 <RADIO_TaskHandler+0x50>)
   1553a:	4798      	blx	r3
   1553c:	4b0a      	ldr	r3, [pc, #40]	; (15568 <RADIO_TaskHandler+0x54>)
   1553e:	58e3      	ldr	r3, [r4, r3]
   15540:	4798      	blx	r3
   15542:	882b      	ldrh	r3, [r5, #0]
   15544:	2b00      	cmp	r3, #0
   15546:	d002      	beq.n	1554e <RADIO_TaskHandler+0x3a>
   15548:	2002      	movs	r0, #2
   1554a:	4b08      	ldr	r3, [pc, #32]	; (1556c <RADIO_TaskHandler+0x58>)
   1554c:	4798      	blx	r3
   1554e:	2000      	movs	r0, #0
   15550:	bd70      	pop	{r4, r5, r6, pc}
   15552:	3401      	adds	r4, #1
   15554:	2c05      	cmp	r4, #5
   15556:	d1e4      	bne.n	15522 <RADIO_TaskHandler+0xe>
   15558:	e7f9      	b.n	1554e <RADIO_TaskHandler+0x3a>
   1555a:	46c0      	nop			; (mov r8, r8)
   1555c:	20001122 	.word	0x20001122
   15560:	000083d1 	.word	0x000083d1
   15564:	000083dd 	.word	0x000083dd
   15568:	00020420 	.word	0x00020420
   1556c:	0000f4bd 	.word	0x0000f4bd

00015570 <RadioSetState>:
   15570:	4b01      	ldr	r3, [pc, #4]	; (15578 <RadioSetState+0x8>)
   15572:	7018      	strb	r0, [r3, #0]
   15574:	4770      	bx	lr
   15576:	46c0      	nop			; (mov r8, r8)
   15578:	20002fbf 	.word	0x20002fbf

0001557c <RADIO_GetState>:
   1557c:	4b01      	ldr	r3, [pc, #4]	; (15584 <RADIO_GetState+0x8>)
   1557e:	7818      	ldrb	r0, [r3, #0]
   15580:	b2c0      	uxtb	r0, r0
   15582:	4770      	bx	lr
   15584:	20002fbf 	.word	0x20002fbf

00015588 <RADIO_SetCallbackBitmask>:
   15588:	4a02      	ldr	r2, [pc, #8]	; (15594 <RADIO_SetCallbackBitmask+0xc>)
   1558a:	7813      	ldrb	r3, [r2, #0]
   1558c:	4318      	orrs	r0, r3
   1558e:	7010      	strb	r0, [r2, #0]
   15590:	4770      	bx	lr
   15592:	46c0      	nop			; (mov r8, r8)
   15594:	20002fbe 	.word	0x20002fbe

00015598 <RADIO_Transmit>:
   15598:	b570      	push	{r4, r5, r6, lr}
   1559a:	4d10      	ldr	r5, [pc, #64]	; (155dc <RADIO_Transmit+0x44>)
   1559c:	0006      	movs	r6, r0
   1559e:	782b      	ldrb	r3, [r5, #0]
   155a0:	2004      	movs	r0, #4
   155a2:	2b01      	cmp	r3, #1
   155a4:	d118      	bne.n	155d8 <RADIO_Transmit+0x40>
   155a6:	4c0e      	ldr	r4, [pc, #56]	; (155e0 <RADIO_Transmit+0x48>)
   155a8:	0023      	movs	r3, r4
   155aa:	332f      	adds	r3, #47	; 0x2f
   155ac:	7818      	ldrb	r0, [r3, #0]
   155ae:	4b0d      	ldr	r3, [pc, #52]	; (155e4 <RADIO_Transmit+0x4c>)
   155b0:	4798      	blx	r3
   155b2:	4b0d      	ldr	r3, [pc, #52]	; (155e8 <RADIO_Transmit+0x50>)
   155b4:	7832      	ldrb	r2, [r6, #0]
   155b6:	6871      	ldr	r1, [r6, #4]
   155b8:	701a      	strb	r2, [r3, #0]
   155ba:	4b0c      	ldr	r3, [pc, #48]	; (155ec <RADIO_Transmit+0x54>)
   155bc:	3434      	adds	r4, #52	; 0x34
   155be:	6019      	str	r1, [r3, #0]
   155c0:	7821      	ldrb	r1, [r4, #0]
   155c2:	2302      	movs	r3, #2
   155c4:	2900      	cmp	r1, #0
   155c6:	d102      	bne.n	155ce <RADIO_Transmit+0x36>
   155c8:	0018      	movs	r0, r3
   155ca:	2a3f      	cmp	r2, #63	; 0x3f
   155cc:	d804      	bhi.n	155d8 <RADIO_Transmit+0x40>
   155ce:	702b      	strb	r3, [r5, #0]
   155d0:	2004      	movs	r0, #4
   155d2:	4b07      	ldr	r3, [pc, #28]	; (155f0 <RADIO_Transmit+0x58>)
   155d4:	4798      	blx	r3
   155d6:	2000      	movs	r0, #0
   155d8:	bd70      	pop	{r4, r5, r6, pc}
   155da:	46c0      	nop			; (mov r8, r8)
   155dc:	20002fbf 	.word	0x20002fbf
   155e0:	20002980 	.word	0x20002980
   155e4:	0000f141 	.word	0x0000f141
   155e8:	20001134 	.word	0x20001134
   155ec:	20001130 	.word	0x20001130
   155f0:	000154c5 	.word	0x000154c5

000155f4 <Radio_FSKTxPayloadHandler>:
   155f4:	b570      	push	{r4, r5, r6, lr}
   155f6:	4b1c      	ldr	r3, [pc, #112]	; (15668 <Radio_FSKTxPayloadHandler+0x74>)
   155f8:	000d      	movs	r5, r1
   155fa:	4798      	blx	r3
   155fc:	4c1b      	ldr	r4, [pc, #108]	; (1566c <Radio_FSKTxPayloadHandler+0x78>)
   155fe:	3458      	adds	r4, #88	; 0x58
   15600:	7820      	ldrb	r0, [r4, #0]
   15602:	b2c0      	uxtb	r0, r0
   15604:	2800      	cmp	r0, #0
   15606:	d112      	bne.n	1562e <Radio_FSKTxPayloadHandler+0x3a>
   15608:	2d00      	cmp	r5, #0
   1560a:	d007      	beq.n	1561c <Radio_FSKTxPayloadHandler+0x28>
   1560c:	4918      	ldr	r1, [pc, #96]	; (15670 <Radio_FSKTxPayloadHandler+0x7c>)
   1560e:	4b19      	ldr	r3, [pc, #100]	; (15674 <Radio_FSKTxPayloadHandler+0x80>)
   15610:	2d3e      	cmp	r5, #62	; 0x3e
   15612:	d806      	bhi.n	15622 <Radio_FSKTxPayloadHandler+0x2e>
   15614:	002a      	movs	r2, r5
   15616:	6809      	ldr	r1, [r1, #0]
   15618:	4798      	blx	r3
   1561a:	7025      	strb	r5, [r4, #0]
   1561c:	4b16      	ldr	r3, [pc, #88]	; (15678 <Radio_FSKTxPayloadHandler+0x84>)
   1561e:	4798      	blx	r3
   15620:	bd70      	pop	{r4, r5, r6, pc}
   15622:	223f      	movs	r2, #63	; 0x3f
   15624:	6809      	ldr	r1, [r1, #0]
   15626:	4798      	blx	r3
   15628:	233f      	movs	r3, #63	; 0x3f
   1562a:	7023      	strb	r3, [r4, #0]
   1562c:	e7f6      	b.n	1561c <Radio_FSKTxPayloadHandler+0x28>
   1562e:	7823      	ldrb	r3, [r4, #0]
   15630:	429d      	cmp	r5, r3
   15632:	d0f3      	beq.n	1561c <Radio_FSKTxPayloadHandler+0x28>
   15634:	7822      	ldrb	r2, [r4, #0]
   15636:	480e      	ldr	r0, [pc, #56]	; (15670 <Radio_FSKTxPayloadHandler+0x7c>)
   15638:	1aaa      	subs	r2, r5, r2
   1563a:	b2d2      	uxtb	r2, r2
   1563c:	4b0d      	ldr	r3, [pc, #52]	; (15674 <Radio_FSKTxPayloadHandler+0x80>)
   1563e:	2a3f      	cmp	r2, #63	; 0x3f
   15640:	d807      	bhi.n	15652 <Radio_FSKTxPayloadHandler+0x5e>
   15642:	7826      	ldrb	r6, [r4, #0]
   15644:	7822      	ldrb	r2, [r4, #0]
   15646:	6801      	ldr	r1, [r0, #0]
   15648:	1aaa      	subs	r2, r5, r2
   1564a:	b2d2      	uxtb	r2, r2
   1564c:	1989      	adds	r1, r1, r6
   1564e:	2000      	movs	r0, #0
   15650:	e7e2      	b.n	15618 <Radio_FSKTxPayloadHandler+0x24>
   15652:	7822      	ldrb	r2, [r4, #0]
   15654:	6801      	ldr	r1, [r0, #0]
   15656:	2000      	movs	r0, #0
   15658:	1889      	adds	r1, r1, r2
   1565a:	223f      	movs	r2, #63	; 0x3f
   1565c:	4798      	blx	r3
   1565e:	7823      	ldrb	r3, [r4, #0]
   15660:	333f      	adds	r3, #63	; 0x3f
   15662:	b2db      	uxtb	r3, r3
   15664:	e7e1      	b.n	1562a <Radio_FSKTxPayloadHandler+0x36>
   15666:	46c0      	nop			; (mov r8, r8)
   15668:	00004601 	.word	0x00004601
   1566c:	20002980 	.word	0x20002980
   15670:	20001130 	.word	0x20001130
   15674:	00008175 	.word	0x00008175
   15678:	00004641 	.word	0x00004641

0001567c <RADIO_FSKSyncAddr>:
   1567c:	4b08      	ldr	r3, [pc, #32]	; (156a0 <RADIO_FSKSyncAddr+0x24>)
   1567e:	b510      	push	{r4, lr}
   15680:	4798      	blx	r3
   15682:	4b08      	ldr	r3, [pc, #32]	; (156a4 <RADIO_FSKSyncAddr+0x28>)
   15684:	001a      	movs	r2, r3
   15686:	3234      	adds	r2, #52	; 0x34
   15688:	7812      	ldrb	r2, [r2, #0]
   1568a:	2a00      	cmp	r2, #0
   1568c:	d104      	bne.n	15698 <RADIO_FSKSyncAddr+0x1c>
   1568e:	0019      	movs	r1, r3
   15690:	3358      	adds	r3, #88	; 0x58
   15692:	312c      	adds	r1, #44	; 0x2c
   15694:	700a      	strb	r2, [r1, #0]
   15696:	701a      	strb	r2, [r3, #0]
   15698:	4b03      	ldr	r3, [pc, #12]	; (156a8 <RADIO_FSKSyncAddr+0x2c>)
   1569a:	4798      	blx	r3
   1569c:	bd10      	pop	{r4, pc}
   1569e:	46c0      	nop			; (mov r8, r8)
   156a0:	00004601 	.word	0x00004601
   156a4:	20002980 	.word	0x20002980
   156a8:	00004641 	.word	0x00004641

000156ac <RADIO_FSKFifoLevel>:
   156ac:	b570      	push	{r4, r5, r6, lr}
   156ae:	4b22      	ldr	r3, [pc, #136]	; (15738 <RADIO_FSKFifoLevel+0x8c>)
   156b0:	4798      	blx	r3
   156b2:	4d22      	ldr	r5, [pc, #136]	; (1573c <RADIO_FSKFifoLevel+0x90>)
   156b4:	002a      	movs	r2, r5
   156b6:	002b      	movs	r3, r5
   156b8:	322c      	adds	r2, #44	; 0x2c
   156ba:	3358      	adds	r3, #88	; 0x58
   156bc:	7810      	ldrb	r0, [r2, #0]
   156be:	7819      	ldrb	r1, [r3, #0]
   156c0:	4288      	cmp	r0, r1
   156c2:	d105      	bne.n	156d0 <RADIO_FSKFifoLevel+0x24>
   156c4:	7812      	ldrb	r2, [r2, #0]
   156c6:	2a00      	cmp	r2, #0
   156c8:	d002      	beq.n	156d0 <RADIO_FSKFifoLevel+0x24>
   156ca:	781b      	ldrb	r3, [r3, #0]
   156cc:	2b00      	cmp	r3, #0
   156ce:	d11f      	bne.n	15710 <RADIO_FSKFifoLevel+0x64>
   156d0:	0029      	movs	r1, r5
   156d2:	312c      	adds	r1, #44	; 0x2c
   156d4:	7808      	ldrb	r0, [r1, #0]
   156d6:	b2c0      	uxtb	r0, r0
   156d8:	2800      	cmp	r0, #0
   156da:	d102      	bne.n	156e2 <RADIO_FSKFifoLevel+0x36>
   156dc:	2201      	movs	r2, #1
   156de:	4b18      	ldr	r3, [pc, #96]	; (15740 <RADIO_FSKFifoLevel+0x94>)
   156e0:	4798      	blx	r3
   156e2:	002e      	movs	r6, r5
   156e4:	002c      	movs	r4, r5
   156e6:	362c      	adds	r6, #44	; 0x2c
   156e8:	3458      	adds	r4, #88	; 0x58
   156ea:	7833      	ldrb	r3, [r6, #0]
   156ec:	7822      	ldrb	r2, [r4, #0]
   156ee:	1a9b      	subs	r3, r3, r2
   156f0:	b2db      	uxtb	r3, r3
   156f2:	2b3e      	cmp	r3, #62	; 0x3e
   156f4:	d80f      	bhi.n	15716 <RADIO_FSKFifoLevel+0x6a>
   156f6:	7823      	ldrb	r3, [r4, #0]
   156f8:	7832      	ldrb	r2, [r6, #0]
   156fa:	7821      	ldrb	r1, [r4, #0]
   156fc:	2000      	movs	r0, #0
   156fe:	1a52      	subs	r2, r2, r1
   15700:	6aa9      	ldr	r1, [r5, #40]	; 0x28
   15702:	b2d2      	uxtb	r2, r2
   15704:	18c9      	adds	r1, r1, r3
   15706:	4b0e      	ldr	r3, [pc, #56]	; (15740 <RADIO_FSKFifoLevel+0x94>)
   15708:	4798      	blx	r3
   1570a:	7833      	ldrb	r3, [r6, #0]
   1570c:	b2db      	uxtb	r3, r3
   1570e:	7023      	strb	r3, [r4, #0]
   15710:	4b0c      	ldr	r3, [pc, #48]	; (15744 <RADIO_FSKFifoLevel+0x98>)
   15712:	4798      	blx	r3
   15714:	bd70      	pop	{r4, r5, r6, pc}
   15716:	7833      	ldrb	r3, [r6, #0]
   15718:	7822      	ldrb	r2, [r4, #0]
   1571a:	1a9b      	subs	r3, r3, r2
   1571c:	b2db      	uxtb	r3, r3
   1571e:	2b3f      	cmp	r3, #63	; 0x3f
   15720:	d9f6      	bls.n	15710 <RADIO_FSKFifoLevel+0x64>
   15722:	7823      	ldrb	r3, [r4, #0]
   15724:	6aa9      	ldr	r1, [r5, #40]	; 0x28
   15726:	223f      	movs	r2, #63	; 0x3f
   15728:	18c9      	adds	r1, r1, r3
   1572a:	2000      	movs	r0, #0
   1572c:	4b04      	ldr	r3, [pc, #16]	; (15740 <RADIO_FSKFifoLevel+0x94>)
   1572e:	4798      	blx	r3
   15730:	7823      	ldrb	r3, [r4, #0]
   15732:	333f      	adds	r3, #63	; 0x3f
   15734:	e7ea      	b.n	1570c <RADIO_FSKFifoLevel+0x60>
   15736:	46c0      	nop			; (mov r8, r8)
   15738:	00004601 	.word	0x00004601
   1573c:	20002980 	.word	0x20002980
   15740:	000081b5 	.word	0x000081b5
   15744:	00004641 	.word	0x00004641

00015748 <RADIO_FSKFifoEmpty>:
   15748:	b510      	push	{r4, lr}
   1574a:	4b03      	ldr	r3, [pc, #12]	; (15758 <RADIO_FSKFifoEmpty+0x10>)
   1574c:	7819      	ldrb	r1, [r3, #0]
   1574e:	4b03      	ldr	r3, [pc, #12]	; (1575c <RADIO_FSKFifoEmpty+0x14>)
   15750:	6818      	ldr	r0, [r3, #0]
   15752:	4b03      	ldr	r3, [pc, #12]	; (15760 <RADIO_FSKFifoEmpty+0x18>)
   15754:	4798      	blx	r3
   15756:	bd10      	pop	{r4, pc}
   15758:	20001134 	.word	0x20001134
   1575c:	20001130 	.word	0x20001130
   15760:	000155f5 	.word	0x000155f5

00015764 <RADIO_GetData>:
   15764:	4b03      	ldr	r3, [pc, #12]	; (15774 <RADIO_GetData+0x10>)
   15766:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   15768:	332c      	adds	r3, #44	; 0x2c
   1576a:	6002      	str	r2, [r0, #0]
   1576c:	781b      	ldrb	r3, [r3, #0]
   1576e:	2000      	movs	r0, #0
   15770:	800b      	strh	r3, [r1, #0]
   15772:	4770      	bx	lr
   15774:	20002980 	.word	0x20002980

00015778 <Radio_EnableRfControl>:
   15778:	b510      	push	{r4, lr}
   1577a:	4b08      	ldr	r3, [pc, #32]	; (1579c <Radio_EnableRfControl+0x24>)
   1577c:	0001      	movs	r1, r0
   1577e:	681a      	ldr	r2, [r3, #0]
   15780:	4807      	ldr	r0, [pc, #28]	; (157a0 <Radio_EnableRfControl+0x28>)
   15782:	4c08      	ldr	r4, [pc, #32]	; (157a4 <Radio_EnableRfControl+0x2c>)
   15784:	1812      	adds	r2, r2, r0
   15786:	2000      	movs	r0, #0
   15788:	42a2      	cmp	r2, r4
   1578a:	d804      	bhi.n	15796 <Radio_EnableRfControl+0x1e>
   1578c:	3305      	adds	r3, #5
   1578e:	7fdb      	ldrb	r3, [r3, #31]
   15790:	1e58      	subs	r0, r3, #1
   15792:	4183      	sbcs	r3, r0
   15794:	1c58      	adds	r0, r3, #1
   15796:	4b04      	ldr	r3, [pc, #16]	; (157a8 <Radio_EnableRfControl+0x30>)
   15798:	4798      	blx	r3
   1579a:	bd10      	pop	{r4, pc}
   1579c:	20002980 	.word	0x20002980
   157a0:	cc9eec80 	.word	0xcc9eec80
   157a4:	096ae380 	.word	0x096ae380
   157a8:	00008221 	.word	0x00008221

000157ac <RADIO_RxHandler>:
   157ac:	b573      	push	{r0, r1, r4, r5, r6, lr}
   157ae:	4b33      	ldr	r3, [pc, #204]	; (1587c <RADIO_RxHandler+0xd0>)
   157b0:	2000      	movs	r0, #0
   157b2:	4798      	blx	r3
   157b4:	4e32      	ldr	r6, [pc, #200]	; (15880 <RADIO_RxHandler+0xd4>)
   157b6:	4b33      	ldr	r3, [pc, #204]	; (15884 <RADIO_RxHandler+0xd8>)
   157b8:	8830      	ldrh	r0, [r6, #0]
   157ba:	2800      	cmp	r0, #0
   157bc:	d100      	bne.n	157c0 <RADIO_RxHandler+0x14>
   157be:	3004      	adds	r0, #4
   157c0:	4798      	blx	r3
   157c2:	4c31      	ldr	r4, [pc, #196]	; (15888 <RADIO_RxHandler+0xdc>)
   157c4:	4d31      	ldr	r5, [pc, #196]	; (1588c <RADIO_RxHandler+0xe0>)
   157c6:	0023      	movs	r3, r4
   157c8:	3334      	adds	r3, #52	; 0x34
   157ca:	7819      	ldrb	r1, [r3, #0]
   157cc:	2901      	cmp	r1, #1
   157ce:	d122      	bne.n	15816 <RADIO_RxHandler+0x6a>
   157d0:	2022      	movs	r0, #34	; 0x22
   157d2:	47a8      	blx	r5
   157d4:	2100      	movs	r1, #0
   157d6:	2040      	movs	r0, #64	; 0x40
   157d8:	47a8      	blx	r5
   157da:	2100      	movs	r1, #0
   157dc:	2041      	movs	r0, #65	; 0x41
   157de:	47a8      	blx	r5
   157e0:	8832      	ldrh	r2, [r6, #0]
   157e2:	4b2b      	ldr	r3, [pc, #172]	; (15890 <RADIO_RxHandler+0xe4>)
   157e4:	2a00      	cmp	r2, #0
   157e6:	d131      	bne.n	1584c <RADIO_RxHandler+0xa0>
   157e8:	0021      	movs	r1, r4
   157ea:	2005      	movs	r0, #5
   157ec:	3134      	adds	r1, #52	; 0x34
   157ee:	7809      	ldrb	r1, [r1, #0]
   157f0:	4798      	blx	r3
   157f2:	68e3      	ldr	r3, [r4, #12]
   157f4:	2b00      	cmp	r3, #0
   157f6:	d00c      	beq.n	15812 <RADIO_RxHandler+0x66>
   157f8:	8832      	ldrh	r2, [r6, #0]
   157fa:	2a00      	cmp	r2, #0
   157fc:	d009      	beq.n	15812 <RADIO_RxHandler+0x66>
   157fe:	21fa      	movs	r1, #250	; 0xfa
   15800:	2200      	movs	r2, #0
   15802:	342f      	adds	r4, #47	; 0x2f
   15804:	0089      	lsls	r1, r1, #2
   15806:	7820      	ldrb	r0, [r4, #0]
   15808:	4359      	muls	r1, r3
   1580a:	9200      	str	r2, [sp, #0]
   1580c:	4b21      	ldr	r3, [pc, #132]	; (15894 <RADIO_RxHandler+0xe8>)
   1580e:	4c22      	ldr	r4, [pc, #136]	; (15898 <RADIO_RxHandler+0xec>)
   15810:	47a0      	blx	r4
   15812:	2000      	movs	r0, #0
   15814:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
   15816:	0023      	movs	r3, r4
   15818:	3338      	adds	r3, #56	; 0x38
   1581a:	7819      	ldrb	r1, [r3, #0]
   1581c:	2012      	movs	r0, #18
   1581e:	47a8      	blx	r5
   15820:	0023      	movs	r3, r4
   15822:	3339      	adds	r3, #57	; 0x39
   15824:	7819      	ldrb	r1, [r3, #0]
   15826:	2013      	movs	r0, #19
   15828:	47a8      	blx	r5
   1582a:	210c      	movs	r1, #12
   1582c:	2040      	movs	r0, #64	; 0x40
   1582e:	47a8      	blx	r5
   15830:	2100      	movs	r1, #0
   15832:	2041      	movs	r0, #65	; 0x41
   15834:	47a8      	blx	r5
   15836:	0022      	movs	r2, r4
   15838:	2300      	movs	r3, #0
   1583a:	3256      	adds	r2, #86	; 0x56
   1583c:	8013      	strh	r3, [r2, #0]
   1583e:	0022      	movs	r2, r4
   15840:	322c      	adds	r2, #44	; 0x2c
   15842:	7013      	strb	r3, [r2, #0]
   15844:	0022      	movs	r2, r4
   15846:	3258      	adds	r2, #88	; 0x58
   15848:	7013      	strb	r3, [r2, #0]
   1584a:	e7c9      	b.n	157e0 <RADIO_RxHandler+0x34>
   1584c:	0022      	movs	r2, r4
   1584e:	3234      	adds	r2, #52	; 0x34
   15850:	7811      	ldrb	r1, [r2, #0]
   15852:	2200      	movs	r2, #0
   15854:	2901      	cmp	r1, #1
   15856:	d101      	bne.n	1585c <RADIO_RxHandler+0xb0>
   15858:	2006      	movs	r0, #6
   1585a:	e7c9      	b.n	157f0 <RADIO_RxHandler+0x44>
   1585c:	0011      	movs	r1, r2
   1585e:	2005      	movs	r0, #5
   15860:	4798      	blx	r3
   15862:	21fa      	movs	r1, #250	; 0xfa
   15864:	8833      	ldrh	r3, [r6, #0]
   15866:	0089      	lsls	r1, r1, #2
   15868:	4359      	muls	r1, r3
   1586a:	0023      	movs	r3, r4
   1586c:	2200      	movs	r2, #0
   1586e:	332e      	adds	r3, #46	; 0x2e
   15870:	7818      	ldrb	r0, [r3, #0]
   15872:	4d09      	ldr	r5, [pc, #36]	; (15898 <RADIO_RxHandler+0xec>)
   15874:	9200      	str	r2, [sp, #0]
   15876:	4b09      	ldr	r3, [pc, #36]	; (1589c <RADIO_RxHandler+0xf0>)
   15878:	47a8      	blx	r5
   1587a:	e7ba      	b.n	157f2 <RADIO_RxHandler+0x46>
   1587c:	00015779 	.word	0x00015779
   15880:	20001126 	.word	0x20001126
   15884:	00014f05 	.word	0x00014f05
   15888:	20002980 	.word	0x20002980
   1588c:	00008121 	.word	0x00008121
   15890:	0000f4f5 	.word	0x0000f4f5
   15894:	000158d5 	.word	0x000158d5
   15898:	0000ee29 	.word	0x0000ee29
   1589c:	00015965 	.word	0x00015965

000158a0 <Radio_DisableRfControl>:
   158a0:	b510      	push	{r4, lr}
   158a2:	4b08      	ldr	r3, [pc, #32]	; (158c4 <Radio_DisableRfControl+0x24>)
   158a4:	0001      	movs	r1, r0
   158a6:	681a      	ldr	r2, [r3, #0]
   158a8:	4807      	ldr	r0, [pc, #28]	; (158c8 <Radio_DisableRfControl+0x28>)
   158aa:	4c08      	ldr	r4, [pc, #32]	; (158cc <Radio_DisableRfControl+0x2c>)
   158ac:	1812      	adds	r2, r2, r0
   158ae:	2000      	movs	r0, #0
   158b0:	42a2      	cmp	r2, r4
   158b2:	d804      	bhi.n	158be <Radio_DisableRfControl+0x1e>
   158b4:	3305      	adds	r3, #5
   158b6:	7fdb      	ldrb	r3, [r3, #31]
   158b8:	1e58      	subs	r0, r3, #1
   158ba:	4183      	sbcs	r3, r0
   158bc:	1c58      	adds	r0, r3, #1
   158be:	4b04      	ldr	r3, [pc, #16]	; (158d0 <Radio_DisableRfControl+0x30>)
   158c0:	4798      	blx	r3
   158c2:	bd10      	pop	{r4, pc}
   158c4:	20002980 	.word	0x20002980
   158c8:	cc9eec80 	.word	0xcc9eec80
   158cc:	096ae380 	.word	0x096ae380
   158d0:	00008249 	.word	0x00008249

000158d4 <Radio_WatchdogTimeout>:
   158d4:	b510      	push	{r4, lr}
   158d6:	4b0e      	ldr	r3, [pc, #56]	; (15910 <Radio_WatchdogTimeout+0x3c>)
   158d8:	781a      	ldrb	r2, [r3, #0]
   158da:	2a04      	cmp	r2, #4
   158dc:	d10b      	bne.n	158f6 <Radio_WatchdogTimeout+0x22>
   158de:	2320      	movs	r3, #32
   158e0:	4a0c      	ldr	r2, [pc, #48]	; (15914 <Radio_WatchdogTimeout+0x40>)
   158e2:	2000      	movs	r0, #0
   158e4:	8811      	ldrh	r1, [r2, #0]
   158e6:	430b      	orrs	r3, r1
   158e8:	8013      	strh	r3, [r2, #0]
   158ea:	4b0b      	ldr	r3, [pc, #44]	; (15918 <Radio_WatchdogTimeout+0x44>)
   158ec:	4798      	blx	r3
   158ee:	2002      	movs	r0, #2
   158f0:	4b0a      	ldr	r3, [pc, #40]	; (1591c <Radio_WatchdogTimeout+0x48>)
   158f2:	4798      	blx	r3
   158f4:	bd10      	pop	{r4, pc}
   158f6:	781b      	ldrb	r3, [r3, #0]
   158f8:	2b02      	cmp	r3, #2
   158fa:	d1fb      	bne.n	158f4 <Radio_WatchdogTimeout+0x20>
   158fc:	4a05      	ldr	r2, [pc, #20]	; (15914 <Radio_WatchdogTimeout+0x40>)
   158fe:	330e      	adds	r3, #14
   15900:	8811      	ldrh	r1, [r2, #0]
   15902:	2001      	movs	r0, #1
   15904:	430b      	orrs	r3, r1
   15906:	8013      	strh	r3, [r2, #0]
   15908:	4b03      	ldr	r3, [pc, #12]	; (15918 <Radio_WatchdogTimeout+0x44>)
   1590a:	4798      	blx	r3
   1590c:	2001      	movs	r0, #1
   1590e:	e7ef      	b.n	158f0 <Radio_WatchdogTimeout+0x1c>
   15910:	20002fbf 	.word	0x20002fbf
   15914:	20002fbc 	.word	0x20002fbc
   15918:	000158a1 	.word	0x000158a1
   1591c:	000154c5 	.word	0x000154c5

00015920 <RADIO_RxTimeout>:
   15920:	b510      	push	{r4, lr}
   15922:	4b0a      	ldr	r3, [pc, #40]	; (1594c <RADIO_RxTimeout+0x2c>)
   15924:	332f      	adds	r3, #47	; 0x2f
   15926:	7818      	ldrb	r0, [r3, #0]
   15928:	4b09      	ldr	r3, [pc, #36]	; (15950 <RADIO_RxTimeout+0x30>)
   1592a:	4798      	blx	r3
   1592c:	2000      	movs	r0, #0
   1592e:	4b09      	ldr	r3, [pc, #36]	; (15954 <RADIO_RxTimeout+0x34>)
   15930:	4798      	blx	r3
   15932:	2180      	movs	r1, #128	; 0x80
   15934:	2012      	movs	r0, #18
   15936:	4b08      	ldr	r3, [pc, #32]	; (15958 <RADIO_RxTimeout+0x38>)
   15938:	4798      	blx	r3
   1593a:	2340      	movs	r3, #64	; 0x40
   1593c:	4a07      	ldr	r2, [pc, #28]	; (1595c <RADIO_RxTimeout+0x3c>)
   1593e:	2002      	movs	r0, #2
   15940:	8811      	ldrh	r1, [r2, #0]
   15942:	430b      	orrs	r3, r1
   15944:	8013      	strh	r3, [r2, #0]
   15946:	4b06      	ldr	r3, [pc, #24]	; (15960 <RADIO_RxTimeout+0x40>)
   15948:	4798      	blx	r3
   1594a:	bd10      	pop	{r4, pc}
   1594c:	20002980 	.word	0x20002980
   15950:	0000f141 	.word	0x0000f141
   15954:	000158a1 	.word	0x000158a1
   15958:	00008121 	.word	0x00008121
   1595c:	20002fbc 	.word	0x20002fbc
   15960:	000154c5 	.word	0x000154c5

00015964 <Radio_RxFSKTimeout>:
   15964:	b510      	push	{r4, lr}
   15966:	4b08      	ldr	r3, [pc, #32]	; (15988 <Radio_RxFSKTimeout+0x24>)
   15968:	332f      	adds	r3, #47	; 0x2f
   1596a:	7818      	ldrb	r0, [r3, #0]
   1596c:	4b07      	ldr	r3, [pc, #28]	; (1598c <Radio_RxFSKTimeout+0x28>)
   1596e:	4798      	blx	r3
   15970:	2000      	movs	r0, #0
   15972:	4b07      	ldr	r3, [pc, #28]	; (15990 <Radio_RxFSKTimeout+0x2c>)
   15974:	4798      	blx	r3
   15976:	2380      	movs	r3, #128	; 0x80
   15978:	4a06      	ldr	r2, [pc, #24]	; (15994 <Radio_RxFSKTimeout+0x30>)
   1597a:	2002      	movs	r0, #2
   1597c:	8811      	ldrh	r1, [r2, #0]
   1597e:	430b      	orrs	r3, r1
   15980:	8013      	strh	r3, [r2, #0]
   15982:	4b05      	ldr	r3, [pc, #20]	; (15998 <Radio_RxFSKTimeout+0x34>)
   15984:	4798      	blx	r3
   15986:	bd10      	pop	{r4, pc}
   15988:	20002980 	.word	0x20002980
   1598c:	0000f141 	.word	0x0000f141
   15990:	000158a1 	.word	0x000158a1
   15994:	20002fbc 	.word	0x20002fbc
   15998:	000154c5 	.word	0x000154c5

0001599c <RADIO_TxDone>:
   1599c:	b570      	push	{r4, r5, r6, lr}
   1599e:	4b14      	ldr	r3, [pc, #80]	; (159f0 <RADIO_TxDone+0x54>)
   159a0:	332f      	adds	r3, #47	; 0x2f
   159a2:	7818      	ldrb	r0, [r3, #0]
   159a4:	4b13      	ldr	r3, [pc, #76]	; (159f4 <RADIO_TxDone+0x58>)
   159a6:	4798      	blx	r3
   159a8:	2001      	movs	r0, #1
   159aa:	4b13      	ldr	r3, [pc, #76]	; (159f8 <RADIO_TxDone+0x5c>)
   159ac:	4798      	blx	r3
   159ae:	4b13      	ldr	r3, [pc, #76]	; (159fc <RADIO_TxDone+0x60>)
   159b0:	2108      	movs	r1, #8
   159b2:	2012      	movs	r0, #18
   159b4:	4798      	blx	r3
   159b6:	4b12      	ldr	r3, [pc, #72]	; (15a00 <RADIO_TxDone+0x64>)
   159b8:	781a      	ldrb	r2, [r3, #0]
   159ba:	4b12      	ldr	r3, [pc, #72]	; (15a04 <RADIO_TxDone+0x68>)
   159bc:	2a02      	cmp	r2, #2
   159be:	d002      	beq.n	159c6 <RADIO_TxDone+0x2a>
   159c0:	881a      	ldrh	r2, [r3, #0]
   159c2:	0692      	lsls	r2, r2, #26
   159c4:	d413      	bmi.n	159ee <RADIO_TxDone+0x52>
   159c6:	2001      	movs	r0, #1
   159c8:	881a      	ldrh	r2, [r3, #0]
   159ca:	4302      	orrs	r2, r0
   159cc:	801a      	strh	r2, [r3, #0]
   159ce:	4b0e      	ldr	r3, [pc, #56]	; (15a08 <RADIO_TxDone+0x6c>)
   159d0:	4798      	blx	r3
   159d2:	4b0e      	ldr	r3, [pc, #56]	; (15a0c <RADIO_TxDone+0x70>)
   159d4:	4798      	blx	r3
   159d6:	4c0e      	ldr	r4, [pc, #56]	; (15a10 <RADIO_TxDone+0x74>)
   159d8:	4d0e      	ldr	r5, [pc, #56]	; (15a14 <RADIO_TxDone+0x78>)
   159da:	6822      	ldr	r2, [r4, #0]
   159dc:	6863      	ldr	r3, [r4, #4]
   159de:	1a80      	subs	r0, r0, r2
   159e0:	4199      	sbcs	r1, r3
   159e2:	22fa      	movs	r2, #250	; 0xfa
   159e4:	2300      	movs	r3, #0
   159e6:	0092      	lsls	r2, r2, #2
   159e8:	47a8      	blx	r5
   159ea:	6020      	str	r0, [r4, #0]
   159ec:	6061      	str	r1, [r4, #4]
   159ee:	bd70      	pop	{r4, r5, r6, pc}
   159f0:	20002980 	.word	0x20002980
   159f4:	0000f141 	.word	0x0000f141
   159f8:	000158a1 	.word	0x000158a1
   159fc:	00008121 	.word	0x00008121
   15a00:	20002fbf 	.word	0x20002fbf
   15a04:	20002fbc 	.word	0x20002fbc
   15a08:	000154c5 	.word	0x000154c5
   15a0c:	0000edd1 	.word	0x0000edd1
   15a10:	20001128 	.word	0x20001128
   15a14:	00016a1d 	.word	0x00016a1d

00015a18 <RADIO_FSKPacketSent>:
   15a18:	b570      	push	{r4, r5, r6, lr}
   15a1a:	4b15      	ldr	r3, [pc, #84]	; (15a70 <RADIO_FSKPacketSent+0x58>)
   15a1c:	203f      	movs	r0, #63	; 0x3f
   15a1e:	4798      	blx	r3
   15a20:	0703      	lsls	r3, r0, #28
   15a22:	d524      	bpl.n	15a6e <RADIO_FSKPacketSent+0x56>
   15a24:	4b13      	ldr	r3, [pc, #76]	; (15a74 <RADIO_FSKPacketSent+0x5c>)
   15a26:	332f      	adds	r3, #47	; 0x2f
   15a28:	7818      	ldrb	r0, [r3, #0]
   15a2a:	4b13      	ldr	r3, [pc, #76]	; (15a78 <RADIO_FSKPacketSent+0x60>)
   15a2c:	4798      	blx	r3
   15a2e:	4b13      	ldr	r3, [pc, #76]	; (15a7c <RADIO_FSKPacketSent+0x64>)
   15a30:	2001      	movs	r0, #1
   15a32:	4798      	blx	r3
   15a34:	4b12      	ldr	r3, [pc, #72]	; (15a80 <RADIO_FSKPacketSent+0x68>)
   15a36:	4c13      	ldr	r4, [pc, #76]	; (15a84 <RADIO_FSKPacketSent+0x6c>)
   15a38:	781b      	ldrb	r3, [r3, #0]
   15a3a:	2b02      	cmp	r3, #2
   15a3c:	d002      	beq.n	15a44 <RADIO_FSKPacketSent+0x2c>
   15a3e:	8823      	ldrh	r3, [r4, #0]
   15a40:	069b      	lsls	r3, r3, #26
   15a42:	d414      	bmi.n	15a6e <RADIO_FSKPacketSent+0x56>
   15a44:	4b10      	ldr	r3, [pc, #64]	; (15a88 <RADIO_FSKPacketSent+0x70>)
   15a46:	4798      	blx	r3
   15a48:	4d10      	ldr	r5, [pc, #64]	; (15a8c <RADIO_FSKPacketSent+0x74>)
   15a4a:	4e11      	ldr	r6, [pc, #68]	; (15a90 <RADIO_FSKPacketSent+0x78>)
   15a4c:	682a      	ldr	r2, [r5, #0]
   15a4e:	686b      	ldr	r3, [r5, #4]
   15a50:	1a80      	subs	r0, r0, r2
   15a52:	4199      	sbcs	r1, r3
   15a54:	22fa      	movs	r2, #250	; 0xfa
   15a56:	2300      	movs	r3, #0
   15a58:	0092      	lsls	r2, r2, #2
   15a5a:	47b0      	blx	r6
   15a5c:	4b0d      	ldr	r3, [pc, #52]	; (15a94 <RADIO_FSKPacketSent+0x7c>)
   15a5e:	6028      	str	r0, [r5, #0]
   15a60:	6069      	str	r1, [r5, #4]
   15a62:	2001      	movs	r0, #1
   15a64:	4798      	blx	r3
   15a66:	2304      	movs	r3, #4
   15a68:	8822      	ldrh	r2, [r4, #0]
   15a6a:	4313      	orrs	r3, r2
   15a6c:	8023      	strh	r3, [r4, #0]
   15a6e:	bd70      	pop	{r4, r5, r6, pc}
   15a70:	00008149 	.word	0x00008149
   15a74:	20002980 	.word	0x20002980
   15a78:	0000f141 	.word	0x0000f141
   15a7c:	000158a1 	.word	0x000158a1
   15a80:	20002fbf 	.word	0x20002fbf
   15a84:	20002fbc 	.word	0x20002fbc
   15a88:	0000edd1 	.word	0x0000edd1
   15a8c:	20001128 	.word	0x20001128
   15a90:	00016a1d 	.word	0x00016a1d
   15a94:	000154c5 	.word	0x000154c5

00015a98 <RADIO_RxDone>:
   15a98:	b570      	push	{r4, r5, r6, lr}
   15a9a:	2012      	movs	r0, #18
   15a9c:	4e16      	ldr	r6, [pc, #88]	; (15af8 <RADIO_RxDone+0x60>)
   15a9e:	47b0      	blx	r6
   15aa0:	4b16      	ldr	r3, [pc, #88]	; (15afc <RADIO_RxDone+0x64>)
   15aa2:	0005      	movs	r5, r0
   15aa4:	2170      	movs	r1, #112	; 0x70
   15aa6:	2012      	movs	r0, #18
   15aa8:	4798      	blx	r3
   15aaa:	2350      	movs	r3, #80	; 0x50
   15aac:	402b      	ands	r3, r5
   15aae:	2b50      	cmp	r3, #80	; 0x50
   15ab0:	d119      	bne.n	15ae6 <RADIO_RxDone+0x4e>
   15ab2:	4c13      	ldr	r4, [pc, #76]	; (15b00 <RADIO_RxDone+0x68>)
   15ab4:	0023      	movs	r3, r4
   15ab6:	332f      	adds	r3, #47	; 0x2f
   15ab8:	7818      	ldrb	r0, [r3, #0]
   15aba:	4b12      	ldr	r3, [pc, #72]	; (15b04 <RADIO_RxDone+0x6c>)
   15abc:	4798      	blx	r3
   15abe:	4b12      	ldr	r3, [pc, #72]	; (15b08 <RADIO_RxDone+0x70>)
   15ac0:	2000      	movs	r0, #0
   15ac2:	4798      	blx	r3
   15ac4:	3404      	adds	r4, #4
   15ac6:	201c      	movs	r0, #28
   15ac8:	47b0      	blx	r6
   15aca:	7fe2      	ldrb	r2, [r4, #31]
   15acc:	4b0f      	ldr	r3, [pc, #60]	; (15b0c <RADIO_RxDone+0x74>)
   15ace:	4910      	ldr	r1, [pc, #64]	; (15b10 <RADIO_RxDone+0x78>)
   15ad0:	2a00      	cmp	r2, #0
   15ad2:	d003      	beq.n	15adc <RADIO_RxDone+0x44>
   15ad4:	06aa      	lsls	r2, r5, #26
   15ad6:	d407      	bmi.n	15ae8 <RADIO_RxDone+0x50>
   15ad8:	0642      	lsls	r2, r0, #25
   15ada:	d505      	bpl.n	15ae8 <RADIO_RxDone+0x50>
   15adc:	2002      	movs	r0, #2
   15ade:	881a      	ldrh	r2, [r3, #0]
   15ae0:	4302      	orrs	r2, r0
   15ae2:	801a      	strh	r2, [r3, #0]
   15ae4:	4788      	blx	r1
   15ae6:	bd70      	pop	{r4, r5, r6, pc}
   15ae8:	2280      	movs	r2, #128	; 0x80
   15aea:	8818      	ldrh	r0, [r3, #0]
   15aec:	0052      	lsls	r2, r2, #1
   15aee:	4302      	orrs	r2, r0
   15af0:	801a      	strh	r2, [r3, #0]
   15af2:	2002      	movs	r0, #2
   15af4:	e7f6      	b.n	15ae4 <RADIO_RxDone+0x4c>
   15af6:	46c0      	nop			; (mov r8, r8)
   15af8:	00008149 	.word	0x00008149
   15afc:	00008121 	.word	0x00008121
   15b00:	20002980 	.word	0x20002980
   15b04:	0000f141 	.word	0x0000f141
   15b08:	000158a1 	.word	0x000158a1
   15b0c:	20002fbc 	.word	0x20002fbc
   15b10:	000154c5 	.word	0x000154c5

00015b14 <RADIO_FSKPayloadReady>:
   15b14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   15b16:	203f      	movs	r0, #63	; 0x3f
   15b18:	4b39      	ldr	r3, [pc, #228]	; (15c00 <RADIO_FSKPayloadReady+0xec>)
   15b1a:	4798      	blx	r3
   15b1c:	0743      	lsls	r3, r0, #29
   15b1e:	d559      	bpl.n	15bd4 <RADIO_FSKPayloadReady+0xc0>
   15b20:	4c38      	ldr	r4, [pc, #224]	; (15c04 <RADIO_FSKPayloadReady+0xf0>)
   15b22:	4d39      	ldr	r5, [pc, #228]	; (15c08 <RADIO_FSKPayloadReady+0xf4>)
   15b24:	1d23      	adds	r3, r4, #4
   15b26:	7fdb      	ldrb	r3, [r3, #31]
   15b28:	2b01      	cmp	r3, #1
   15b2a:	d154      	bne.n	15bd6 <RADIO_FSKPayloadReady+0xc2>
   15b2c:	2202      	movs	r2, #2
   15b2e:	4210      	tst	r0, r2
   15b30:	d048      	beq.n	15bc4 <RADIO_FSKPayloadReady+0xb0>
   15b32:	0023      	movs	r3, r4
   15b34:	332f      	adds	r3, #47	; 0x2f
   15b36:	7818      	ldrb	r0, [r3, #0]
   15b38:	4e34      	ldr	r6, [pc, #208]	; (15c0c <RADIO_FSKPayloadReady+0xf8>)
   15b3a:	47b0      	blx	r6
   15b3c:	0023      	movs	r3, r4
   15b3e:	332e      	adds	r3, #46	; 0x2e
   15b40:	7818      	ldrb	r0, [r3, #0]
   15b42:	47b0      	blx	r6
   15b44:	4b32      	ldr	r3, [pc, #200]	; (15c10 <RADIO_FSKPayloadReady+0xfc>)
   15b46:	4798      	blx	r3
   15b48:	0022      	movs	r2, r4
   15b4a:	0023      	movs	r3, r4
   15b4c:	322c      	adds	r2, #44	; 0x2c
   15b4e:	3358      	adds	r3, #88	; 0x58
   15b50:	7810      	ldrb	r0, [r2, #0]
   15b52:	7819      	ldrb	r1, [r3, #0]
   15b54:	4288      	cmp	r0, r1
   15b56:	d105      	bne.n	15b64 <RADIO_FSKPayloadReady+0x50>
   15b58:	7812      	ldrb	r2, [r2, #0]
   15b5a:	2a00      	cmp	r2, #0
   15b5c:	d002      	beq.n	15b64 <RADIO_FSKPayloadReady+0x50>
   15b5e:	781b      	ldrb	r3, [r3, #0]
   15b60:	2b00      	cmp	r3, #0
   15b62:	d118      	bne.n	15b96 <RADIO_FSKPayloadReady+0x82>
   15b64:	0021      	movs	r1, r4
   15b66:	312c      	adds	r1, #44	; 0x2c
   15b68:	7808      	ldrb	r0, [r1, #0]
   15b6a:	b2c0      	uxtb	r0, r0
   15b6c:	2800      	cmp	r0, #0
   15b6e:	d102      	bne.n	15b76 <RADIO_FSKPayloadReady+0x62>
   15b70:	2201      	movs	r2, #1
   15b72:	4b28      	ldr	r3, [pc, #160]	; (15c14 <RADIO_FSKPayloadReady+0x100>)
   15b74:	4798      	blx	r3
   15b76:	0026      	movs	r6, r4
   15b78:	0027      	movs	r7, r4
   15b7a:	3658      	adds	r6, #88	; 0x58
   15b7c:	7830      	ldrb	r0, [r6, #0]
   15b7e:	372c      	adds	r7, #44	; 0x2c
   15b80:	b2c0      	uxtb	r0, r0
   15b82:	2800      	cmp	r0, #0
   15b84:	d110      	bne.n	15ba8 <RADIO_FSKPayloadReady+0x94>
   15b86:	783a      	ldrb	r2, [r7, #0]
   15b88:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   15b8a:	b2d2      	uxtb	r2, r2
   15b8c:	4b21      	ldr	r3, [pc, #132]	; (15c14 <RADIO_FSKPayloadReady+0x100>)
   15b8e:	4798      	blx	r3
   15b90:	783b      	ldrb	r3, [r7, #0]
   15b92:	b2db      	uxtb	r3, r3
   15b94:	7033      	strb	r3, [r6, #0]
   15b96:	4b20      	ldr	r3, [pc, #128]	; (15c18 <RADIO_FSKPayloadReady+0x104>)
   15b98:	4798      	blx	r3
   15b9a:	4b20      	ldr	r3, [pc, #128]	; (15c1c <RADIO_FSKPayloadReady+0x108>)
   15b9c:	2000      	movs	r0, #0
   15b9e:	4798      	blx	r3
   15ba0:	2308      	movs	r3, #8
   15ba2:	882a      	ldrh	r2, [r5, #0]
   15ba4:	4313      	orrs	r3, r2
   15ba6:	e011      	b.n	15bcc <RADIO_FSKPayloadReady+0xb8>
   15ba8:	783b      	ldrb	r3, [r7, #0]
   15baa:	7832      	ldrb	r2, [r6, #0]
   15bac:	1a9b      	subs	r3, r3, r2
   15bae:	2b00      	cmp	r3, #0
   15bb0:	ddf1      	ble.n	15b96 <RADIO_FSKPayloadReady+0x82>
   15bb2:	7833      	ldrb	r3, [r6, #0]
   15bb4:	783a      	ldrb	r2, [r7, #0]
   15bb6:	7831      	ldrb	r1, [r6, #0]
   15bb8:	2000      	movs	r0, #0
   15bba:	1a52      	subs	r2, r2, r1
   15bbc:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   15bbe:	b2d2      	uxtb	r2, r2
   15bc0:	18c9      	adds	r1, r1, r3
   15bc2:	e7e3      	b.n	15b8c <RADIO_FSKPayloadReady+0x78>
   15bc4:	2380      	movs	r3, #128	; 0x80
   15bc6:	8829      	ldrh	r1, [r5, #0]
   15bc8:	005b      	lsls	r3, r3, #1
   15bca:	430b      	orrs	r3, r1
   15bcc:	802b      	strh	r3, [r5, #0]
   15bce:	2002      	movs	r0, #2
   15bd0:	4b13      	ldr	r3, [pc, #76]	; (15c20 <RADIO_FSKPayloadReady+0x10c>)
   15bd2:	4798      	blx	r3
   15bd4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   15bd6:	0023      	movs	r3, r4
   15bd8:	332f      	adds	r3, #47	; 0x2f
   15bda:	4e0c      	ldr	r6, [pc, #48]	; (15c0c <RADIO_FSKPayloadReady+0xf8>)
   15bdc:	7818      	ldrb	r0, [r3, #0]
   15bde:	47b0      	blx	r6
   15be0:	0023      	movs	r3, r4
   15be2:	332e      	adds	r3, #46	; 0x2e
   15be4:	7818      	ldrb	r0, [r3, #0]
   15be6:	47b0      	blx	r6
   15be8:	4e0e      	ldr	r6, [pc, #56]	; (15c24 <RADIO_FSKPayloadReady+0x110>)
   15bea:	2201      	movs	r2, #1
   15bec:	0031      	movs	r1, r6
   15bee:	2000      	movs	r0, #0
   15bf0:	4f08      	ldr	r7, [pc, #32]	; (15c14 <RADIO_FSKPayloadReady+0x100>)
   15bf2:	47b8      	blx	r7
   15bf4:	7832      	ldrb	r2, [r6, #0]
   15bf6:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   15bf8:	b2d2      	uxtb	r2, r2
   15bfa:	2000      	movs	r0, #0
   15bfc:	47b8      	blx	r7
   15bfe:	e7cc      	b.n	15b9a <RADIO_FSKPayloadReady+0x86>
   15c00:	00008149 	.word	0x00008149
   15c04:	20002980 	.word	0x20002980
   15c08:	20002fbc 	.word	0x20002fbc
   15c0c:	0000f141 	.word	0x0000f141
   15c10:	00004601 	.word	0x00004601
   15c14:	000081b5 	.word	0x000081b5
   15c18:	00004641 	.word	0x00004641
   15c1c:	000158a1 	.word	0x000158a1
   15c20:	000154c5 	.word	0x000154c5
   15c24:	200029ac 	.word	0x200029ac

00015c28 <Radio_SetClockInput>:
   15c28:	b510      	push	{r4, lr}
   15c2a:	4b08      	ldr	r3, [pc, #32]	; (15c4c <Radio_SetClockInput+0x24>)
   15c2c:	3355      	adds	r3, #85	; 0x55
   15c2e:	781b      	ldrb	r3, [r3, #0]
   15c30:	2b00      	cmp	r3, #0
   15c32:	d10a      	bne.n	15c4a <Radio_SetClockInput+0x22>
   15c34:	4b06      	ldr	r3, [pc, #24]	; (15c50 <Radio_SetClockInput+0x28>)
   15c36:	204b      	movs	r0, #75	; 0x4b
   15c38:	4798      	blx	r3
   15c3a:	2110      	movs	r1, #16
   15c3c:	4301      	orrs	r1, r0
   15c3e:	4b05      	ldr	r3, [pc, #20]	; (15c54 <Radio_SetClockInput+0x2c>)
   15c40:	b2c9      	uxtb	r1, r1
   15c42:	204b      	movs	r0, #75	; 0x4b
   15c44:	4798      	blx	r3
   15c46:	4b04      	ldr	r3, [pc, #16]	; (15c58 <Radio_SetClockInput+0x30>)
   15c48:	4798      	blx	r3
   15c4a:	bd10      	pop	{r4, pc}
   15c4c:	20002980 	.word	0x20002980
   15c50:	00008149 	.word	0x00008149
   15c54:	00008121 	.word	0x00008121
   15c58:	00008269 	.word	0x00008269

00015c5c <Radio_ResetClockInput>:
   15c5c:	b510      	push	{r4, lr}
   15c5e:	4b04      	ldr	r3, [pc, #16]	; (15c70 <Radio_ResetClockInput+0x14>)
   15c60:	3355      	adds	r3, #85	; 0x55
   15c62:	781b      	ldrb	r3, [r3, #0]
   15c64:	2b00      	cmp	r3, #0
   15c66:	d101      	bne.n	15c6c <Radio_ResetClockInput+0x10>
   15c68:	4b02      	ldr	r3, [pc, #8]	; (15c74 <Radio_ResetClockInput+0x18>)
   15c6a:	4798      	blx	r3
   15c6c:	bd10      	pop	{r4, pc}
   15c6e:	46c0      	nop			; (mov r8, r8)
   15c70:	20002980 	.word	0x20002980
   15c74:	00008285 	.word	0x00008285

00015c78 <RADIO_InitDefaultAttributes>:
   15c78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   15c7a:	2501      	movs	r5, #1
   15c7c:	4b64      	ldr	r3, [pc, #400]	; (15e10 <RADIO_InitDefaultAttributes+0x198>)
   15c7e:	4c65      	ldr	r4, [pc, #404]	; (15e14 <RADIO_InitDefaultAttributes+0x19c>)
   15c80:	701d      	strb	r5, [r3, #0]
   15c82:	4b65      	ldr	r3, [pc, #404]	; (15e18 <RADIO_InitDefaultAttributes+0x1a0>)
   15c84:	2207      	movs	r2, #7
   15c86:	6023      	str	r3, [r4, #0]
   15c88:	4b64      	ldr	r3, [pc, #400]	; (15e1c <RADIO_InitDefaultAttributes+0x1a4>)
   15c8a:	18a1      	adds	r1, r4, r2
   15c8c:	6063      	str	r3, [r4, #4]
   15c8e:	4b64      	ldr	r3, [pc, #400]	; (15e20 <RADIO_InitDefaultAttributes+0x1a8>)
   15c90:	0027      	movs	r7, r4
   15c92:	60a3      	str	r3, [r4, #8]
   15c94:	0023      	movs	r3, r4
   15c96:	3334      	adds	r3, #52	; 0x34
   15c98:	701d      	strb	r5, [r3, #0]
   15c9a:	0023      	movs	r3, r4
   15c9c:	3336      	adds	r3, #54	; 0x36
   15c9e:	701a      	strb	r2, [r3, #0]
   15ca0:	1ce3      	adds	r3, r4, #3
   15ca2:	77dd      	strb	r5, [r3, #31]
   15ca4:	0023      	movs	r3, r4
   15ca6:	3333      	adds	r3, #51	; 0x33
   15ca8:	701d      	strb	r5, [r3, #0]
   15caa:	2300      	movs	r3, #0
   15cac:	77cb      	strb	r3, [r1, #31]
   15cae:	2108      	movs	r1, #8
   15cb0:	82a1      	strh	r1, [r4, #20]
   15cb2:	0021      	movs	r1, r4
   15cb4:	3135      	adds	r1, #53	; 0x35
   15cb6:	700a      	strb	r2, [r1, #0]
   15cb8:	1d22      	adds	r2, r4, #4
   15cba:	77d5      	strb	r5, [r2, #31]
   15cbc:	1d62      	adds	r2, r4, #5
   15cbe:	77d3      	strb	r3, [r2, #31]
   15cc0:	1da2      	adds	r2, r4, #6
   15cc2:	77d3      	strb	r3, [r2, #31]
   15cc4:	2194      	movs	r1, #148	; 0x94
   15cc6:	22c1      	movs	r2, #193	; 0xc1
   15cc8:	76a1      	strb	r1, [r4, #26]
   15cca:	7662      	strb	r2, [r4, #25]
   15ccc:	76e2      	strb	r2, [r4, #27]
   15cce:	3991      	subs	r1, #145	; 0x91
   15cd0:	1ca2      	adds	r2, r4, #2
   15cd2:	77d1      	strb	r1, [r2, #31]
   15cd4:	2234      	movs	r2, #52	; 0x34
   15cd6:	7622      	strb	r2, [r4, #24]
   15cd8:	0022      	movs	r2, r4
   15cda:	317d      	adds	r1, #125	; 0x7d
   15cdc:	3232      	adds	r2, #50	; 0x32
   15cde:	7011      	strb	r1, [r2, #0]
   15ce0:	4a50      	ldr	r2, [pc, #320]	; (15e24 <RADIO_InitDefaultAttributes+0x1ac>)
   15ce2:	397e      	subs	r1, #126	; 0x7e
   15ce4:	60e2      	str	r2, [r4, #12]
   15ce6:	0022      	movs	r2, r4
   15ce8:	3237      	adds	r2, #55	; 0x37
   15cea:	7011      	strb	r1, [r2, #0]
   15cec:	0022      	movs	r2, r4
   15cee:	3109      	adds	r1, #9
   15cf0:	3238      	adds	r2, #56	; 0x38
   15cf2:	7011      	strb	r1, [r2, #0]
   15cf4:	0022      	movs	r2, r4
   15cf6:	3107      	adds	r1, #7
   15cf8:	3239      	adds	r2, #57	; 0x39
   15cfa:	7011      	strb	r1, [r2, #0]
   15cfc:	0022      	movs	r2, r4
   15cfe:	322c      	adds	r2, #44	; 0x2c
   15d00:	7013      	strb	r3, [r2, #0]
   15d02:	4a49      	ldr	r2, [pc, #292]	; (15e28 <RADIO_InitDefaultAttributes+0x1b0>)
   15d04:	82e3      	strh	r3, [r4, #22]
   15d06:	62a2      	str	r2, [r4, #40]	; 0x28
   15d08:	0022      	movs	r2, r4
   15d0a:	324c      	adds	r2, #76	; 0x4c
   15d0c:	8013      	strh	r3, [r2, #0]
   15d0e:	0022      	movs	r2, r4
   15d10:	324e      	adds	r2, #78	; 0x4e
   15d12:	7013      	strb	r3, [r2, #0]
   15d14:	0022      	movs	r2, r4
   15d16:	324f      	adds	r2, #79	; 0x4f
   15d18:	7013      	strb	r3, [r2, #0]
   15d1a:	0022      	movs	r2, r4
   15d1c:	3240      	adds	r2, #64	; 0x40
   15d1e:	7013      	strb	r3, [r2, #0]
   15d20:	0022      	movs	r2, r4
   15d22:	3241      	adds	r2, #65	; 0x41
   15d24:	7013      	strb	r3, [r2, #0]
   15d26:	0022      	movs	r2, r4
   15d28:	3254      	adds	r2, #84	; 0x54
   15d2a:	7013      	strb	r3, [r2, #0]
   15d2c:	0022      	movs	r2, r4
   15d2e:	3255      	adds	r2, #85	; 0x55
   15d30:	7015      	strb	r5, [r2, #0]
   15d32:	0022      	movs	r2, r4
   15d34:	3258      	adds	r2, #88	; 0x58
   15d36:	6463      	str	r3, [r4, #68]	; 0x44
   15d38:	64a3      	str	r3, [r4, #72]	; 0x48
   15d3a:	87a3      	strh	r3, [r4, #60]	; 0x3c
   15d3c:	87e3      	strh	r3, [r4, #62]	; 0x3e
   15d3e:	7013      	strb	r3, [r2, #0]
   15d40:	3730      	adds	r7, #48	; 0x30
   15d42:	783b      	ldrb	r3, [r7, #0]
   15d44:	2b00      	cmp	r3, #0
   15d46:	d151      	bne.n	15dec <RADIO_InitDefaultAttributes+0x174>
   15d48:	4838      	ldr	r0, [pc, #224]	; (15e2c <RADIO_InitDefaultAttributes+0x1b4>)
   15d4a:	4e39      	ldr	r6, [pc, #228]	; (15e30 <RADIO_InitDefaultAttributes+0x1b8>)
   15d4c:	47b0      	blx	r6
   15d4e:	2808      	cmp	r0, #8
   15d50:	d149      	bne.n	15de6 <RADIO_InitDefaultAttributes+0x16e>
   15d52:	4838      	ldr	r0, [pc, #224]	; (15e34 <RADIO_InitDefaultAttributes+0x1bc>)
   15d54:	47b0      	blx	r6
   15d56:	2808      	cmp	r0, #8
   15d58:	d145      	bne.n	15de6 <RADIO_InitDefaultAttributes+0x16e>
   15d5a:	4837      	ldr	r0, [pc, #220]	; (15e38 <RADIO_InitDefaultAttributes+0x1c0>)
   15d5c:	47b0      	blx	r6
   15d5e:	2808      	cmp	r0, #8
   15d60:	d141      	bne.n	15de6 <RADIO_InitDefaultAttributes+0x16e>
   15d62:	4836      	ldr	r0, [pc, #216]	; (15e3c <RADIO_InitDefaultAttributes+0x1c4>)
   15d64:	47b0      	blx	r6
   15d66:	2808      	cmp	r0, #8
   15d68:	d13d      	bne.n	15de6 <RADIO_InitDefaultAttributes+0x16e>
   15d6a:	703d      	strb	r5, [r7, #0]
   15d6c:	4b34      	ldr	r3, [pc, #208]	; (15e40 <RADIO_InitDefaultAttributes+0x1c8>)
   15d6e:	4798      	blx	r3
   15d70:	4b34      	ldr	r3, [pc, #208]	; (15e44 <RADIO_InitDefaultAttributes+0x1cc>)
   15d72:	4798      	blx	r3
   15d74:	2800      	cmp	r0, #0
   15d76:	d107      	bne.n	15d88 <RADIO_InitDefaultAttributes+0x110>
   15d78:	0023      	movs	r3, r4
   15d7a:	3355      	adds	r3, #85	; 0x55
   15d7c:	7018      	strb	r0, [r3, #0]
   15d7e:	4b32      	ldr	r3, [pc, #200]	; (15e48 <RADIO_InitDefaultAttributes+0x1d0>)
   15d80:	4798      	blx	r3
   15d82:	0023      	movs	r3, r4
   15d84:	3354      	adds	r3, #84	; 0x54
   15d86:	7018      	strb	r0, [r3, #0]
   15d88:	4b30      	ldr	r3, [pc, #192]	; (15e4c <RADIO_InitDefaultAttributes+0x1d4>)
   15d8a:	4798      	blx	r3
   15d8c:	2201      	movs	r2, #1
   15d8e:	2100      	movs	r1, #0
   15d90:	0010      	movs	r0, r2
   15d92:	4f2f      	ldr	r7, [pc, #188]	; (15e50 <RADIO_InitDefaultAttributes+0x1d8>)
   15d94:	47b8      	blx	r7
   15d96:	6820      	ldr	r0, [r4, #0]
   15d98:	4b2e      	ldr	r3, [pc, #184]	; (15e54 <RADIO_InitDefaultAttributes+0x1dc>)
   15d9a:	4798      	blx	r3
   15d9c:	2142      	movs	r1, #66	; 0x42
   15d9e:	203b      	movs	r0, #59	; 0x3b
   15da0:	4d2d      	ldr	r5, [pc, #180]	; (15e58 <RADIO_InitDefaultAttributes+0x1e0>)
   15da2:	47a8      	blx	r5
   15da4:	203b      	movs	r0, #59	; 0x3b
   15da6:	4b2d      	ldr	r3, [pc, #180]	; (15e5c <RADIO_InitDefaultAttributes+0x1e4>)
   15da8:	4798      	blx	r3
   15daa:	2620      	movs	r6, #32
   15dac:	4006      	ands	r6, r0
   15dae:	d1f9      	bne.n	15da4 <RADIO_InitDefaultAttributes+0x12c>
   15db0:	2123      	movs	r1, #35	; 0x23
   15db2:	200c      	movs	r0, #12
   15db4:	47a8      	blx	r5
   15db6:	21aa      	movs	r1, #170	; 0xaa
   15db8:	201f      	movs	r0, #31
   15dba:	47a8      	blx	r5
   15dbc:	21ff      	movs	r1, #255	; 0xff
   15dbe:	2032      	movs	r0, #50	; 0x32
   15dc0:	47a8      	blx	r5
   15dc2:	2140      	movs	r1, #64	; 0x40
   15dc4:	2031      	movs	r0, #49	; 0x31
   15dc6:	47a8      	blx	r5
   15dc8:	2201      	movs	r2, #1
   15dca:	0030      	movs	r0, r6
   15dcc:	0011      	movs	r1, r2
   15dce:	47b8      	blx	r7
   15dd0:	21ff      	movs	r1, #255	; 0xff
   15dd2:	2023      	movs	r0, #35	; 0x23
   15dd4:	47a8      	blx	r5
   15dd6:	4b21      	ldr	r3, [pc, #132]	; (15e5c <RADIO_InitDefaultAttributes+0x1e4>)
   15dd8:	2042      	movs	r0, #66	; 0x42
   15dda:	4798      	blx	r3
   15ddc:	3431      	adds	r4, #49	; 0x31
   15dde:	4b20      	ldr	r3, [pc, #128]	; (15e60 <RADIO_InitDefaultAttributes+0x1e8>)
   15de0:	7020      	strb	r0, [r4, #0]
   15de2:	4798      	blx	r3
   15de4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   15de6:	4b1f      	ldr	r3, [pc, #124]	; (15e64 <RADIO_InitDefaultAttributes+0x1ec>)
   15de8:	4798      	blx	r3
   15dea:	e7bf      	b.n	15d6c <RADIO_InitDefaultAttributes+0xf4>
   15dec:	0023      	movs	r3, r4
   15dee:	332d      	adds	r3, #45	; 0x2d
   15df0:	4d1d      	ldr	r5, [pc, #116]	; (15e68 <RADIO_InitDefaultAttributes+0x1f0>)
   15df2:	7818      	ldrb	r0, [r3, #0]
   15df4:	47a8      	blx	r5
   15df6:	0023      	movs	r3, r4
   15df8:	332e      	adds	r3, #46	; 0x2e
   15dfa:	7818      	ldrb	r0, [r3, #0]
   15dfc:	47a8      	blx	r5
   15dfe:	0023      	movs	r3, r4
   15e00:	332f      	adds	r3, #47	; 0x2f
   15e02:	7818      	ldrb	r0, [r3, #0]
   15e04:	47a8      	blx	r5
   15e06:	0023      	movs	r3, r4
   15e08:	3350      	adds	r3, #80	; 0x50
   15e0a:	7818      	ldrb	r0, [r3, #0]
   15e0c:	47a8      	blx	r5
   15e0e:	e7ad      	b.n	15d6c <RADIO_InitDefaultAttributes+0xf4>
   15e10:	20002fbf 	.word	0x20002fbf
   15e14:	20002980 	.word	0x20002980
   15e18:	33be27a0 	.word	0x33be27a0
   15e1c:	000061a8 	.word	0x000061a8
   15e20:	0000c350 	.word	0x0000c350
   15e24:	00003a98 	.word	0x00003a98
   15e28:	20002ebc 	.word	0x20002ebc
   15e2c:	200029ad 	.word	0x200029ad
   15e30:	0000edf5 	.word	0x0000edf5
   15e34:	200029ae 	.word	0x200029ae
   15e38:	200029af 	.word	0x200029af
   15e3c:	200029d0 	.word	0x200029d0
   15e40:	000080e1 	.word	0x000080e1
   15e44:	00008265 	.word	0x00008265
   15e48:	00008261 	.word	0x00008261
   15e4c:	00015c29 	.word	0x00015c29
   15e50:	0000f4f5 	.word	0x0000f4f5
   15e54:	00014ebd 	.word	0x00014ebd
   15e58:	00008121 	.word	0x00008121
   15e5c:	00008149 	.word	0x00008149
   15e60:	00015c5d 	.word	0x00015c5d
   15e64:	0000ed39 	.word	0x0000ed39
   15e68:	0000f141 	.word	0x0000f141

00015e6c <RADIO_Receive>:
   15e6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   15e6e:	7803      	ldrb	r3, [r0, #0]
   15e70:	0006      	movs	r6, r0
   15e72:	4d24      	ldr	r5, [pc, #144]	; (15f04 <RADIO_Receive+0x98>)
   15e74:	2b00      	cmp	r3, #0
   15e76:	d11d      	bne.n	15eb4 <RADIO_Receive+0x48>
   15e78:	782b      	ldrb	r3, [r5, #0]
   15e7a:	2004      	movs	r0, #4
   15e7c:	2b01      	cmp	r3, #1
   15e7e:	d118      	bne.n	15eb2 <RADIO_Receive+0x46>
   15e80:	4c21      	ldr	r4, [pc, #132]	; (15f08 <RADIO_Receive+0x9c>)
   15e82:	4f22      	ldr	r7, [pc, #136]	; (15f0c <RADIO_Receive+0xa0>)
   15e84:	0023      	movs	r3, r4
   15e86:	332f      	adds	r3, #47	; 0x2f
   15e88:	7818      	ldrb	r0, [r3, #0]
   15e8a:	47b8      	blx	r7
   15e8c:	0023      	movs	r3, r4
   15e8e:	3334      	adds	r3, #52	; 0x34
   15e90:	781b      	ldrb	r3, [r3, #0]
   15e92:	2b00      	cmp	r3, #0
   15e94:	d102      	bne.n	15e9c <RADIO_Receive+0x30>
   15e96:	342e      	adds	r4, #46	; 0x2e
   15e98:	7820      	ldrb	r0, [r4, #0]
   15e9a:	47b8      	blx	r7
   15e9c:	8872      	ldrh	r2, [r6, #2]
   15e9e:	4b1c      	ldr	r3, [pc, #112]	; (15f10 <RADIO_Receive+0xa4>)
   15ea0:	2008      	movs	r0, #8
   15ea2:	801a      	strh	r2, [r3, #0]
   15ea4:	2304      	movs	r3, #4
   15ea6:	702b      	strb	r3, [r5, #0]
   15ea8:	4b1a      	ldr	r3, [pc, #104]	; (15f14 <RADIO_Receive+0xa8>)
   15eaa:	4798      	blx	r3
   15eac:	4b1a      	ldr	r3, [pc, #104]	; (15f18 <RADIO_Receive+0xac>)
   15eae:	4798      	blx	r3
   15eb0:	2000      	movs	r0, #0
   15eb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   15eb4:	782b      	ldrb	r3, [r5, #0]
   15eb6:	2000      	movs	r0, #0
   15eb8:	2b01      	cmp	r3, #1
   15eba:	d0fa      	beq.n	15eb2 <RADIO_Receive+0x46>
   15ebc:	782b      	ldrb	r3, [r5, #0]
   15ebe:	3003      	adds	r0, #3
   15ec0:	2b04      	cmp	r3, #4
   15ec2:	d1f6      	bne.n	15eb2 <RADIO_Receive+0x46>
   15ec4:	4c10      	ldr	r4, [pc, #64]	; (15f08 <RADIO_Receive+0x9c>)
   15ec6:	4e11      	ldr	r6, [pc, #68]	; (15f0c <RADIO_Receive+0xa0>)
   15ec8:	0023      	movs	r3, r4
   15eca:	332f      	adds	r3, #47	; 0x2f
   15ecc:	7818      	ldrb	r0, [r3, #0]
   15ece:	47b0      	blx	r6
   15ed0:	0023      	movs	r3, r4
   15ed2:	3334      	adds	r3, #52	; 0x34
   15ed4:	781b      	ldrb	r3, [r3, #0]
   15ed6:	2b00      	cmp	r3, #0
   15ed8:	d103      	bne.n	15ee2 <RADIO_Receive+0x76>
   15eda:	0023      	movs	r3, r4
   15edc:	332e      	adds	r3, #46	; 0x2e
   15ede:	7818      	ldrb	r0, [r3, #0]
   15ee0:	47b0      	blx	r6
   15ee2:	2200      	movs	r2, #0
   15ee4:	3434      	adds	r4, #52	; 0x34
   15ee6:	7821      	ldrb	r1, [r4, #0]
   15ee8:	0010      	movs	r0, r2
   15eea:	4b0c      	ldr	r3, [pc, #48]	; (15f1c <RADIO_Receive+0xb0>)
   15eec:	4798      	blx	r3
   15eee:	4b0c      	ldr	r3, [pc, #48]	; (15f20 <RADIO_Receive+0xb4>)
   15ef0:	4798      	blx	r3
   15ef2:	2301      	movs	r3, #1
   15ef4:	2008      	movs	r0, #8
   15ef6:	4c0b      	ldr	r4, [pc, #44]	; (15f24 <RADIO_Receive+0xb8>)
   15ef8:	702b      	strb	r3, [r5, #0]
   15efa:	47a0      	blx	r4
   15efc:	2002      	movs	r0, #2
   15efe:	47a0      	blx	r4
   15f00:	e7d6      	b.n	15eb0 <RADIO_Receive+0x44>
   15f02:	46c0      	nop			; (mov r8, r8)
   15f04:	20002fbf 	.word	0x20002fbf
   15f08:	20002980 	.word	0x20002980
   15f0c:	0000f141 	.word	0x0000f141
   15f10:	20001126 	.word	0x20001126
   15f14:	000154c5 	.word	0x000154c5
   15f18:	00015c29 	.word	0x00015c29
   15f1c:	0000f4f5 	.word	0x0000f4f5
   15f20:	00015c5d 	.word	0x00015c5d
   15f24:	000154f1 	.word	0x000154f1

00015f28 <RADIO_TxHandler>:
   15f28:	b5f0      	push	{r4, r5, r6, r7, lr}
   15f2a:	4e56      	ldr	r6, [pc, #344]	; (16084 <RADIO_TxHandler+0x15c>)
   15f2c:	b087      	sub	sp, #28
   15f2e:	47b0      	blx	r6
   15f30:	4c55      	ldr	r4, [pc, #340]	; (16088 <RADIO_TxHandler+0x160>)
   15f32:	0023      	movs	r3, r4
   15f34:	332d      	adds	r3, #45	; 0x2d
   15f36:	7818      	ldrb	r0, [r3, #0]
   15f38:	4b54      	ldr	r3, [pc, #336]	; (1608c <RADIO_TxHandler+0x164>)
   15f3a:	4798      	blx	r3
   15f3c:	0023      	movs	r3, r4
   15f3e:	3341      	adds	r3, #65	; 0x41
   15f40:	781b      	ldrb	r3, [r3, #0]
   15f42:	4d53      	ldr	r5, [pc, #332]	; (16090 <RADIO_TxHandler+0x168>)
   15f44:	2b00      	cmp	r3, #0
   15f46:	d022      	beq.n	15f8e <RADIO_TxHandler+0x66>
   15f48:	2214      	movs	r2, #20
   15f4a:	8fa3      	ldrh	r3, [r4, #60]	; 0x3c
   15f4c:	4353      	muls	r3, r2
   15f4e:	0022      	movs	r2, r4
   15f50:	3240      	adds	r2, #64	; 0x40
   15f52:	7013      	strb	r3, [r2, #0]
   15f54:	47b0      	blx	r6
   15f56:	2000      	movs	r0, #0
   15f58:	4b4e      	ldr	r3, [pc, #312]	; (16094 <RADIO_TxHandler+0x16c>)
   15f5a:	4798      	blx	r3
   15f5c:	6820      	ldr	r0, [r4, #0]
   15f5e:	4b4e      	ldr	r3, [pc, #312]	; (16098 <RADIO_TxHandler+0x170>)
   15f60:	4798      	blx	r3
   15f62:	0023      	movs	r3, r4
   15f64:	2600      	movs	r6, #0
   15f66:	334c      	adds	r3, #76	; 0x4c
   15f68:	2201      	movs	r2, #1
   15f6a:	801e      	strh	r6, [r3, #0]
   15f6c:	0031      	movs	r1, r6
   15f6e:	4b4b      	ldr	r3, [pc, #300]	; (1609c <RADIO_TxHandler+0x174>)
   15f70:	0030      	movs	r0, r6
   15f72:	4798      	blx	r3
   15f74:	2109      	movs	r1, #9
   15f76:	2012      	movs	r0, #18
   15f78:	47a8      	blx	r5
   15f7a:	2201      	movs	r2, #1
   15f7c:	0031      	movs	r1, r6
   15f7e:	2005      	movs	r0, #5
   15f80:	4b46      	ldr	r3, [pc, #280]	; (1609c <RADIO_TxHandler+0x174>)
   15f82:	4798      	blx	r3
   15f84:	0023      	movs	r3, r4
   15f86:	3340      	adds	r3, #64	; 0x40
   15f88:	781b      	ldrb	r3, [r3, #0]
   15f8a:	42b3      	cmp	r3, r6
   15f8c:	d844      	bhi.n	16018 <RADIO_TxHandler+0xf0>
   15f8e:	2001      	movs	r0, #1
   15f90:	4b40      	ldr	r3, [pc, #256]	; (16094 <RADIO_TxHandler+0x16c>)
   15f92:	4798      	blx	r3
   15f94:	4b42      	ldr	r3, [pc, #264]	; (160a0 <RADIO_TxHandler+0x178>)
   15f96:	2004      	movs	r0, #4
   15f98:	4798      	blx	r3
   15f9a:	4b42      	ldr	r3, [pc, #264]	; (160a4 <RADIO_TxHandler+0x17c>)
   15f9c:	4e42      	ldr	r6, [pc, #264]	; (160a8 <RADIO_TxHandler+0x180>)
   15f9e:	781f      	ldrb	r7, [r3, #0]
   15fa0:	2f01      	cmp	r7, #1
   15fa2:	d146      	bne.n	16032 <RADIO_TxHandler+0x10a>
   15fa4:	7831      	ldrb	r1, [r6, #0]
   15fa6:	2022      	movs	r0, #34	; 0x22
   15fa8:	47a8      	blx	r5
   15faa:	4b40      	ldr	r3, [pc, #256]	; (160ac <RADIO_TxHandler+0x184>)
   15fac:	200a      	movs	r0, #10
   15fae:	4798      	blx	r3
   15fb0:	21f0      	movs	r1, #240	; 0xf0
   15fb2:	4008      	ands	r0, r1
   15fb4:	39e8      	subs	r1, #232	; 0xe8
   15fb6:	4301      	orrs	r1, r0
   15fb8:	200a      	movs	r0, #10
   15fba:	47a8      	blx	r5
   15fbc:	2140      	movs	r1, #64	; 0x40
   15fbe:	0008      	movs	r0, r1
   15fc0:	47a8      	blx	r5
   15fc2:	2100      	movs	r1, #0
   15fc4:	2041      	movs	r0, #65	; 0x41
   15fc6:	47a8      	blx	r5
   15fc8:	4b36      	ldr	r3, [pc, #216]	; (160a4 <RADIO_TxHandler+0x17c>)
   15fca:	003a      	movs	r2, r7
   15fcc:	7819      	ldrb	r1, [r3, #0]
   15fce:	0038      	movs	r0, r7
   15fd0:	4b32      	ldr	r3, [pc, #200]	; (1609c <RADIO_TxHandler+0x174>)
   15fd2:	4798      	blx	r3
   15fd4:	4b36      	ldr	r3, [pc, #216]	; (160b0 <RADIO_TxHandler+0x188>)
   15fd6:	7832      	ldrb	r2, [r6, #0]
   15fd8:	6819      	ldr	r1, [r3, #0]
   15fda:	2000      	movs	r0, #0
   15fdc:	4b35      	ldr	r3, [pc, #212]	; (160b4 <RADIO_TxHandler+0x18c>)
   15fde:	4798      	blx	r3
   15fe0:	0023      	movs	r3, r4
   15fe2:	3334      	adds	r3, #52	; 0x34
   15fe4:	7819      	ldrb	r1, [r3, #0]
   15fe6:	2200      	movs	r2, #0
   15fe8:	2003      	movs	r0, #3
   15fea:	4b2c      	ldr	r3, [pc, #176]	; (1609c <RADIO_TxHandler+0x174>)
   15fec:	4798      	blx	r3
   15fee:	4b32      	ldr	r3, [pc, #200]	; (160b8 <RADIO_TxHandler+0x190>)
   15ff0:	4798      	blx	r3
   15ff2:	4b32      	ldr	r3, [pc, #200]	; (160bc <RADIO_TxHandler+0x194>)
   15ff4:	6018      	str	r0, [r3, #0]
   15ff6:	6059      	str	r1, [r3, #4]
   15ff8:	68e3      	ldr	r3, [r4, #12]
   15ffa:	2b00      	cmp	r3, #0
   15ffc:	d009      	beq.n	16012 <RADIO_TxHandler+0xea>
   15ffe:	21fa      	movs	r1, #250	; 0xfa
   16000:	2200      	movs	r2, #0
   16002:	342f      	adds	r4, #47	; 0x2f
   16004:	0089      	lsls	r1, r1, #2
   16006:	7820      	ldrb	r0, [r4, #0]
   16008:	4359      	muls	r1, r3
   1600a:	9200      	str	r2, [sp, #0]
   1600c:	4b2c      	ldr	r3, [pc, #176]	; (160c0 <RADIO_TxHandler+0x198>)
   1600e:	4c2d      	ldr	r4, [pc, #180]	; (160c4 <RADIO_TxHandler+0x19c>)
   16010:	47a0      	blx	r4
   16012:	2000      	movs	r0, #0
   16014:	b007      	add	sp, #28
   16016:	bdf0      	pop	{r4, r5, r6, r7, pc}
   16018:	4f2b      	ldr	r7, [pc, #172]	; (160c8 <RADIO_TxHandler+0x1a0>)
   1601a:	4b2c      	ldr	r3, [pc, #176]	; (160cc <RADIO_TxHandler+0x1a4>)
   1601c:	0038      	movs	r0, r7
   1601e:	4798      	blx	r3
   16020:	233e      	movs	r3, #62	; 0x3e
   16022:	5ee2      	ldrsh	r2, [r4, r3]
   16024:	2100      	movs	r1, #0
   16026:	5e7b      	ldrsh	r3, [r7, r1]
   16028:	429a      	cmp	r2, r3
   1602a:	db14      	blt.n	16056 <RADIO_TxHandler+0x12e>
   1602c:	3601      	adds	r6, #1
   1602e:	b2f6      	uxtb	r6, r6
   16030:	e7a8      	b.n	15f84 <RADIO_TxHandler+0x5c>
   16032:	2100      	movs	r1, #0
   16034:	2040      	movs	r0, #64	; 0x40
   16036:	47a8      	blx	r5
   16038:	2100      	movs	r1, #0
   1603a:	2041      	movs	r0, #65	; 0x41
   1603c:	47a8      	blx	r5
   1603e:	0023      	movs	r3, r4
   16040:	2000      	movs	r0, #0
   16042:	3358      	adds	r3, #88	; 0x58
   16044:	7831      	ldrb	r1, [r6, #0]
   16046:	7018      	strb	r0, [r3, #0]
   16048:	47a8      	blx	r5
   1604a:	4b19      	ldr	r3, [pc, #100]	; (160b0 <RADIO_TxHandler+0x188>)
   1604c:	7831      	ldrb	r1, [r6, #0]
   1604e:	6818      	ldr	r0, [r3, #0]
   16050:	4b1f      	ldr	r3, [pc, #124]	; (160d0 <RADIO_TxHandler+0x1a8>)
   16052:	4798      	blx	r3
   16054:	e7c4      	b.n	15fe0 <RADIO_TxHandler+0xb8>
   16056:	2000      	movs	r0, #0
   16058:	4b1e      	ldr	r3, [pc, #120]	; (160d4 <RADIO_TxHandler+0x1ac>)
   1605a:	4798      	blx	r3
   1605c:	4b1e      	ldr	r3, [pc, #120]	; (160d8 <RADIO_TxHandler+0x1b0>)
   1605e:	4798      	blx	r3
   16060:	2307      	movs	r3, #7
   16062:	2201      	movs	r2, #1
   16064:	a903      	add	r1, sp, #12
   16066:	700b      	strb	r3, [r1, #0]
   16068:	4b1c      	ldr	r3, [pc, #112]	; (160dc <RADIO_TxHandler+0x1b4>)
   1606a:	701a      	strb	r2, [r3, #0]
   1606c:	4b1c      	ldr	r3, [pc, #112]	; (160e0 <RADIO_TxHandler+0x1b8>)
   1606e:	781b      	ldrb	r3, [r3, #0]
   16070:	079b      	lsls	r3, r3, #30
   16072:	d400      	bmi.n	16076 <RADIO_TxHandler+0x14e>
   16074:	e78b      	b.n	15f8e <RADIO_TxHandler+0x66>
   16076:	6923      	ldr	r3, [r4, #16]
   16078:	2b00      	cmp	r3, #0
   1607a:	d100      	bne.n	1607e <RADIO_TxHandler+0x156>
   1607c:	e787      	b.n	15f8e <RADIO_TxHandler+0x66>
   1607e:	2002      	movs	r0, #2
   16080:	4798      	blx	r3
   16082:	e784      	b.n	15f8e <RADIO_TxHandler+0x66>
   16084:	00015c29 	.word	0x00015c29
   16088:	20002980 	.word	0x20002980
   1608c:	0000f141 	.word	0x0000f141
   16090:	00008121 	.word	0x00008121
   16094:	00015779 	.word	0x00015779
   16098:	00014ebd 	.word	0x00014ebd
   1609c:	0000f4f5 	.word	0x0000f4f5
   160a0:	00014f05 	.word	0x00014f05
   160a4:	200029b4 	.word	0x200029b4
   160a8:	20001134 	.word	0x20001134
   160ac:	00008149 	.word	0x00008149
   160b0:	20001130 	.word	0x20001130
   160b4:	00008175 	.word	0x00008175
   160b8:	0000edd1 	.word	0x0000edd1
   160bc:	20001128 	.word	0x20001128
   160c0:	000158d5 	.word	0x000158d5
   160c4:	0000ee29 	.word	0x0000ee29
   160c8:	20001124 	.word	0x20001124
   160cc:	0000f6b9 	.word	0x0000f6b9
   160d0:	000155f5 	.word	0x000155f5
   160d4:	000158a1 	.word	0x000158a1
   160d8:	00015c5d 	.word	0x00015c5d
   160dc:	20002fbf 	.word	0x20002fbf
   160e0:	20002fbe 	.word	0x20002fbe

000160e4 <RADIO_TxDoneHandler>:
   160e4:	b5f0      	push	{r4, r5, r6, r7, lr}
   160e6:	4b35      	ldr	r3, [pc, #212]	; (161bc <RADIO_TxDoneHandler+0xd8>)
   160e8:	b087      	sub	sp, #28
   160ea:	881a      	ldrh	r2, [r3, #0]
   160ec:	06d2      	lsls	r2, r2, #27
   160ee:	0fd2      	lsrs	r2, r2, #31
   160f0:	9200      	str	r2, [sp, #0]
   160f2:	466a      	mov	r2, sp
   160f4:	7810      	ldrb	r0, [r2, #0]
   160f6:	881a      	ldrh	r2, [r3, #0]
   160f8:	2801      	cmp	r0, #1
   160fa:	d12b      	bne.n	16154 <RADIO_TxDoneHandler+0x70>
   160fc:	4c30      	ldr	r4, [pc, #192]	; (161c0 <RADIO_TxDoneHandler+0xdc>)
   160fe:	2110      	movs	r1, #16
   16100:	0027      	movs	r7, r4
   16102:	2500      	movs	r5, #0
   16104:	438a      	bics	r2, r1
   16106:	801a      	strh	r2, [r3, #0]
   16108:	3734      	adds	r7, #52	; 0x34
   1610a:	0002      	movs	r2, r0
   1610c:	7839      	ldrb	r1, [r7, #0]
   1610e:	4b2d      	ldr	r3, [pc, #180]	; (161c4 <RADIO_TxDoneHandler+0xe0>)
   16110:	4798      	blx	r3
   16112:	68e3      	ldr	r3, [r4, #12]
   16114:	ae03      	add	r6, sp, #12
   16116:	9304      	str	r3, [sp, #16]
   16118:	7035      	strb	r5, [r6, #0]
   1611a:	002a      	movs	r2, r5
   1611c:	4b29      	ldr	r3, [pc, #164]	; (161c4 <RADIO_TxDoneHandler+0xe0>)
   1611e:	7839      	ldrb	r1, [r7, #0]
   16120:	0028      	movs	r0, r5
   16122:	4798      	blx	r3
   16124:	466a      	mov	r2, sp
   16126:	4b28      	ldr	r3, [pc, #160]	; (161c8 <RADIO_TxDoneHandler+0xe4>)
   16128:	7812      	ldrb	r2, [r2, #0]
   1612a:	701a      	strb	r2, [r3, #0]
   1612c:	0023      	movs	r3, r4
   1612e:	3358      	adds	r3, #88	; 0x58
   16130:	701d      	strb	r5, [r3, #0]
   16132:	4b26      	ldr	r3, [pc, #152]	; (161cc <RADIO_TxDoneHandler+0xe8>)
   16134:	781b      	ldrb	r3, [r3, #0]
   16136:	075b      	lsls	r3, r3, #29
   16138:	d505      	bpl.n	16146 <RADIO_TxDoneHandler+0x62>
   1613a:	6923      	ldr	r3, [r4, #16]
   1613c:	42ab      	cmp	r3, r5
   1613e:	d002      	beq.n	16146 <RADIO_TxDoneHandler+0x62>
   16140:	0031      	movs	r1, r6
   16142:	2004      	movs	r0, #4
   16144:	4798      	blx	r3
   16146:	4b22      	ldr	r3, [pc, #136]	; (161d0 <RADIO_TxDoneHandler+0xec>)
   16148:	4798      	blx	r3
   1614a:	4b22      	ldr	r3, [pc, #136]	; (161d4 <RADIO_TxDoneHandler+0xf0>)
   1614c:	4798      	blx	r3
   1614e:	2000      	movs	r0, #0
   16150:	b007      	add	sp, #28
   16152:	bdf0      	pop	{r4, r5, r6, r7, pc}
   16154:	07d2      	lsls	r2, r2, #31
   16156:	d402      	bmi.n	1615e <RADIO_TxDoneHandler+0x7a>
   16158:	881a      	ldrh	r2, [r3, #0]
   1615a:	0752      	lsls	r2, r2, #29
   1615c:	d527      	bpl.n	161ae <RADIO_TxDoneHandler+0xca>
   1615e:	2601      	movs	r6, #1
   16160:	2104      	movs	r1, #4
   16162:	881a      	ldrh	r2, [r3, #0]
   16164:	4f16      	ldr	r7, [pc, #88]	; (161c0 <RADIO_TxDoneHandler+0xdc>)
   16166:	43b2      	bics	r2, r6
   16168:	801a      	strh	r2, [r3, #0]
   1616a:	881a      	ldrh	r2, [r3, #0]
   1616c:	2400      	movs	r4, #0
   1616e:	438a      	bics	r2, r1
   16170:	801a      	strh	r2, [r3, #0]
   16172:	4b19      	ldr	r3, [pc, #100]	; (161d8 <RADIO_TxDoneHandler+0xf4>)
   16174:	ad03      	add	r5, sp, #12
   16176:	681b      	ldr	r3, [r3, #0]
   16178:	702c      	strb	r4, [r5, #0]
   1617a:	9304      	str	r3, [sp, #16]
   1617c:	003b      	movs	r3, r7
   1617e:	3334      	adds	r3, #52	; 0x34
   16180:	7819      	ldrb	r1, [r3, #0]
   16182:	0022      	movs	r2, r4
   16184:	0020      	movs	r0, r4
   16186:	4b0f      	ldr	r3, [pc, #60]	; (161c4 <RADIO_TxDoneHandler+0xe0>)
   16188:	4798      	blx	r3
   1618a:	4b14      	ldr	r3, [pc, #80]	; (161dc <RADIO_TxDoneHandler+0xf8>)
   1618c:	4798      	blx	r3
   1618e:	4b0e      	ldr	r3, [pc, #56]	; (161c8 <RADIO_TxDoneHandler+0xe4>)
   16190:	701e      	strb	r6, [r3, #0]
   16192:	003b      	movs	r3, r7
   16194:	3358      	adds	r3, #88	; 0x58
   16196:	701c      	strb	r4, [r3, #0]
   16198:	4b0c      	ldr	r3, [pc, #48]	; (161cc <RADIO_TxDoneHandler+0xe8>)
   1619a:	781b      	ldrb	r3, [r3, #0]
   1619c:	079b      	lsls	r3, r3, #30
   1619e:	d5d6      	bpl.n	1614e <RADIO_TxDoneHandler+0x6a>
   161a0:	693b      	ldr	r3, [r7, #16]
   161a2:	42a3      	cmp	r3, r4
   161a4:	d0d3      	beq.n	1614e <RADIO_TxDoneHandler+0x6a>
   161a6:	0029      	movs	r1, r5
   161a8:	2002      	movs	r0, #2
   161aa:	4798      	blx	r3
   161ac:	e7cf      	b.n	1614e <RADIO_TxDoneHandler+0x6a>
   161ae:	881b      	ldrh	r3, [r3, #0]
   161b0:	059b      	lsls	r3, r3, #22
   161b2:	d5cc      	bpl.n	1614e <RADIO_TxDoneHandler+0x6a>
   161b4:	4b0a      	ldr	r3, [pc, #40]	; (161e0 <RADIO_TxDoneHandler+0xfc>)
   161b6:	4798      	blx	r3
   161b8:	e7c9      	b.n	1614e <RADIO_TxDoneHandler+0x6a>
   161ba:	46c0      	nop			; (mov r8, r8)
   161bc:	20002fbc 	.word	0x20002fbc
   161c0:	20002980 	.word	0x20002980
   161c4:	0000f4f5 	.word	0x0000f4f5
   161c8:	20002fbf 	.word	0x20002fbf
   161cc:	20002fbe 	.word	0x20002fbe
   161d0:	000080e1 	.word	0x000080e1
   161d4:	00015c79 	.word	0x00015c79
   161d8:	20001128 	.word	0x20001128
   161dc:	00015c5d 	.word	0x00015c5d
   161e0:	0001657d 	.word	0x0001657d

000161e4 <RADIO_RxDoneHandler>:
   161e4:	b5f0      	push	{r4, r5, r6, r7, lr}
   161e6:	4b97      	ldr	r3, [pc, #604]	; (16444 <RADIO_RxDoneHandler+0x260>)
   161e8:	b085      	sub	sp, #20
   161ea:	881c      	ldrh	r4, [r3, #0]
   161ec:	881a      	ldrh	r2, [r3, #0]
   161ee:	06a4      	lsls	r4, r4, #26
   161f0:	0fe4      	lsrs	r4, r4, #31
   161f2:	b2e0      	uxtb	r0, r4
   161f4:	2801      	cmp	r0, #1
   161f6:	d126      	bne.n	16246 <RADIO_RxDoneHandler+0x62>
   161f8:	4d93      	ldr	r5, [pc, #588]	; (16448 <RADIO_RxDoneHandler+0x264>)
   161fa:	2120      	movs	r1, #32
   161fc:	002e      	movs	r6, r5
   161fe:	438a      	bics	r2, r1
   16200:	801a      	strh	r2, [r3, #0]
   16202:	3634      	adds	r6, #52	; 0x34
   16204:	0002      	movs	r2, r0
   16206:	7831      	ldrb	r1, [r6, #0]
   16208:	4f90      	ldr	r7, [pc, #576]	; (1644c <RADIO_RxDoneHandler+0x268>)
   1620a:	47b8      	blx	r7
   1620c:	2200      	movs	r2, #0
   1620e:	7831      	ldrb	r1, [r6, #0]
   16210:	0010      	movs	r0, r2
   16212:	47b8      	blx	r7
   16214:	4b8e      	ldr	r3, [pc, #568]	; (16450 <RADIO_RxDoneHandler+0x26c>)
   16216:	4798      	blx	r3
   16218:	4b8e      	ldr	r3, [pc, #568]	; (16454 <RADIO_RxDoneHandler+0x270>)
   1621a:	002a      	movs	r2, r5
   1621c:	701c      	strb	r4, [r3, #0]
   1621e:	2300      	movs	r3, #0
   16220:	322c      	adds	r2, #44	; 0x2c
   16222:	7013      	strb	r3, [r2, #0]
   16224:	002a      	movs	r2, r5
   16226:	a901      	add	r1, sp, #4
   16228:	3258      	adds	r2, #88	; 0x58
   1622a:	7013      	strb	r3, [r2, #0]
   1622c:	700b      	strb	r3, [r1, #0]
   1622e:	4b8a      	ldr	r3, [pc, #552]	; (16458 <RADIO_RxDoneHandler+0x274>)
   16230:	781b      	ldrb	r3, [r3, #0]
   16232:	071b      	lsls	r3, r3, #28
   16234:	d504      	bpl.n	16240 <RADIO_RxDoneHandler+0x5c>
   16236:	692b      	ldr	r3, [r5, #16]
   16238:	2008      	movs	r0, #8
   1623a:	2b00      	cmp	r3, #0
   1623c:	d000      	beq.n	16240 <RADIO_RxDoneHandler+0x5c>
   1623e:	e084      	b.n	1634a <RADIO_RxDoneHandler+0x166>
   16240:	2000      	movs	r0, #0
   16242:	b005      	add	sp, #20
   16244:	bdf0      	pop	{r4, r5, r6, r7, pc}
   16246:	0652      	lsls	r2, r2, #25
   16248:	d402      	bmi.n	16250 <RADIO_RxDoneHandler+0x6c>
   1624a:	881a      	ldrh	r2, [r3, #0]
   1624c:	0612      	lsls	r2, r2, #24
   1624e:	d523      	bpl.n	16298 <RADIO_RxDoneHandler+0xb4>
   16250:	2140      	movs	r1, #64	; 0x40
   16252:	881a      	ldrh	r2, [r3, #0]
   16254:	4c7c      	ldr	r4, [pc, #496]	; (16448 <RADIO_RxDoneHandler+0x264>)
   16256:	438a      	bics	r2, r1
   16258:	801a      	strh	r2, [r3, #0]
   1625a:	881a      	ldrh	r2, [r3, #0]
   1625c:	1849      	adds	r1, r1, r1
   1625e:	438a      	bics	r2, r1
   16260:	801a      	strh	r2, [r3, #0]
   16262:	0023      	movs	r3, r4
   16264:	2200      	movs	r2, #0
   16266:	3334      	adds	r3, #52	; 0x34
   16268:	7819      	ldrb	r1, [r3, #0]
   1626a:	0010      	movs	r0, r2
   1626c:	4b77      	ldr	r3, [pc, #476]	; (1644c <RADIO_RxDoneHandler+0x268>)
   1626e:	4798      	blx	r3
   16270:	4b77      	ldr	r3, [pc, #476]	; (16450 <RADIO_RxDoneHandler+0x26c>)
   16272:	4798      	blx	r3
   16274:	2201      	movs	r2, #1
   16276:	4b77      	ldr	r3, [pc, #476]	; (16454 <RADIO_RxDoneHandler+0x270>)
   16278:	a901      	add	r1, sp, #4
   1627a:	701a      	strb	r2, [r3, #0]
   1627c:	0022      	movs	r2, r4
   1627e:	2300      	movs	r3, #0
   16280:	322c      	adds	r2, #44	; 0x2c
   16282:	7013      	strb	r3, [r2, #0]
   16284:	0022      	movs	r2, r4
   16286:	3258      	adds	r2, #88	; 0x58
   16288:	7013      	strb	r3, [r2, #0]
   1628a:	700b      	strb	r3, [r1, #0]
   1628c:	4b72      	ldr	r3, [pc, #456]	; (16458 <RADIO_RxDoneHandler+0x274>)
   1628e:	781b      	ldrb	r3, [r3, #0]
   16290:	071b      	lsls	r3, r3, #28
   16292:	d5d5      	bpl.n	16240 <RADIO_RxDoneHandler+0x5c>
   16294:	6923      	ldr	r3, [r4, #16]
   16296:	e7cf      	b.n	16238 <RADIO_RxDoneHandler+0x54>
   16298:	881a      	ldrh	r2, [r3, #0]
   1629a:	0792      	lsls	r2, r2, #30
   1629c:	d571      	bpl.n	16382 <RADIO_RxDoneHandler+0x19e>
   1629e:	2102      	movs	r1, #2
   162a0:	881a      	ldrh	r2, [r3, #0]
   162a2:	4d6e      	ldr	r5, [pc, #440]	; (1645c <RADIO_RxDoneHandler+0x278>)
   162a4:	438a      	bics	r2, r1
   162a6:	801a      	strh	r2, [r3, #0]
   162a8:	2013      	movs	r0, #19
   162aa:	47a8      	blx	r5
   162ac:	4c66      	ldr	r4, [pc, #408]	; (16448 <RADIO_RxDoneHandler+0x264>)
   162ae:	2100      	movs	r1, #0
   162b0:	0026      	movs	r6, r4
   162b2:	362c      	adds	r6, #44	; 0x2c
   162b4:	7030      	strb	r0, [r6, #0]
   162b6:	4b6a      	ldr	r3, [pc, #424]	; (16460 <RADIO_RxDoneHandler+0x27c>)
   162b8:	200d      	movs	r0, #13
   162ba:	4798      	blx	r3
   162bc:	7832      	ldrb	r2, [r6, #0]
   162be:	4b69      	ldr	r3, [pc, #420]	; (16464 <RADIO_RxDoneHandler+0x280>)
   162c0:	b2d2      	uxtb	r2, r2
   162c2:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   162c4:	2000      	movs	r0, #0
   162c6:	4798      	blx	r3
   162c8:	2019      	movs	r0, #25
   162ca:	47a8      	blx	r5
   162cc:	0023      	movs	r3, r4
   162ce:	b240      	sxtb	r0, r0
   162d0:	3332      	adds	r3, #50	; 0x32
   162d2:	2800      	cmp	r0, #0
   162d4:	da3b      	bge.n	1634e <RADIO_RxDoneHandler+0x16a>
   162d6:	4240      	negs	r0, r0
   162d8:	1080      	asrs	r0, r0, #2
   162da:	4240      	negs	r0, r0
   162dc:	7018      	strb	r0, [r3, #0]
   162de:	201a      	movs	r0, #26
   162e0:	47a8      	blx	r5
   162e2:	0023      	movs	r3, r4
   162e4:	3332      	adds	r3, #50	; 0x32
   162e6:	781b      	ldrb	r3, [r3, #0]
   162e8:	b202      	sxth	r2, r0
   162ea:	b25b      	sxtb	r3, r3
   162ec:	4d5e      	ldr	r5, [pc, #376]	; (16468 <RADIO_RxDoneHandler+0x284>)
   162ee:	2b00      	cmp	r3, #0
   162f0:	da36      	bge.n	16360 <RADIO_RxDoneHandler+0x17c>
   162f2:	6821      	ldr	r1, [r4, #0]
   162f4:	4e5d      	ldr	r6, [pc, #372]	; (1646c <RADIO_RxDoneHandler+0x288>)
   162f6:	198e      	adds	r6, r1, r6
   162f8:	42ae      	cmp	r6, r5
   162fa:	d82a      	bhi.n	16352 <RADIO_RxDoneHandler+0x16e>
   162fc:	3b9d      	subs	r3, #157	; 0x9d
   162fe:	181b      	adds	r3, r3, r0
   16300:	1112      	asrs	r2, r2, #4
   16302:	189b      	adds	r3, r3, r2
   16304:	0022      	movs	r2, r4
   16306:	3256      	adds	r2, #86	; 0x56
   16308:	8013      	strh	r3, [r2, #0]
   1630a:	0023      	movs	r3, r4
   1630c:	2200      	movs	r2, #0
   1630e:	3334      	adds	r3, #52	; 0x34
   16310:	7819      	ldrb	r1, [r3, #0]
   16312:	0010      	movs	r0, r2
   16314:	4b4d      	ldr	r3, [pc, #308]	; (1644c <RADIO_RxDoneHandler+0x268>)
   16316:	4798      	blx	r3
   16318:	4b4d      	ldr	r3, [pc, #308]	; (16450 <RADIO_RxDoneHandler+0x26c>)
   1631a:	4798      	blx	r3
   1631c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1631e:	a901      	add	r1, sp, #4
   16320:	604b      	str	r3, [r1, #4]
   16322:	0023      	movs	r3, r4
   16324:	332c      	adds	r3, #44	; 0x2c
   16326:	781b      	ldrb	r3, [r3, #0]
   16328:	2201      	movs	r2, #1
   1632a:	720b      	strb	r3, [r1, #8]
   1632c:	2300      	movs	r3, #0
   1632e:	700b      	strb	r3, [r1, #0]
   16330:	4b48      	ldr	r3, [pc, #288]	; (16454 <RADIO_RxDoneHandler+0x270>)
   16332:	701a      	strb	r2, [r3, #0]
   16334:	4b48      	ldr	r3, [pc, #288]	; (16458 <RADIO_RxDoneHandler+0x274>)
   16336:	7818      	ldrb	r0, [r3, #0]
   16338:	07c0      	lsls	r0, r0, #31
   1633a:	0fc0      	lsrs	r0, r0, #31
   1633c:	4290      	cmp	r0, r2
   1633e:	d000      	beq.n	16342 <RADIO_RxDoneHandler+0x15e>
   16340:	e77e      	b.n	16240 <RADIO_RxDoneHandler+0x5c>
   16342:	6923      	ldr	r3, [r4, #16]
   16344:	2b00      	cmp	r3, #0
   16346:	d100      	bne.n	1634a <RADIO_RxDoneHandler+0x166>
   16348:	e77a      	b.n	16240 <RADIO_RxDoneHandler+0x5c>
   1634a:	4798      	blx	r3
   1634c:	e778      	b.n	16240 <RADIO_RxDoneHandler+0x5c>
   1634e:	1080      	asrs	r0, r0, #2
   16350:	e7c4      	b.n	162dc <RADIO_RxDoneHandler+0xf8>
   16352:	4d47      	ldr	r5, [pc, #284]	; (16470 <RADIO_RxDoneHandler+0x28c>)
   16354:	1949      	adds	r1, r1, r5
   16356:	4d47      	ldr	r5, [pc, #284]	; (16474 <RADIO_RxDoneHandler+0x290>)
   16358:	42a9      	cmp	r1, r5
   1635a:	d8d6      	bhi.n	1630a <RADIO_RxDoneHandler+0x126>
   1635c:	3ba4      	subs	r3, #164	; 0xa4
   1635e:	e7ce      	b.n	162fe <RADIO_RxDoneHandler+0x11a>
   16360:	6823      	ldr	r3, [r4, #0]
   16362:	4942      	ldr	r1, [pc, #264]	; (1646c <RADIO_RxDoneHandler+0x288>)
   16364:	1859      	adds	r1, r3, r1
   16366:	42a9      	cmp	r1, r5
   16368:	d802      	bhi.n	16370 <RADIO_RxDoneHandler+0x18c>
   1636a:	0003      	movs	r3, r0
   1636c:	3b9d      	subs	r3, #157	; 0x9d
   1636e:	e7c7      	b.n	16300 <RADIO_RxDoneHandler+0x11c>
   16370:	493f      	ldr	r1, [pc, #252]	; (16470 <RADIO_RxDoneHandler+0x28c>)
   16372:	185b      	adds	r3, r3, r1
   16374:	493f      	ldr	r1, [pc, #252]	; (16474 <RADIO_RxDoneHandler+0x290>)
   16376:	428b      	cmp	r3, r1
   16378:	d8c7      	bhi.n	1630a <RADIO_RxDoneHandler+0x126>
   1637a:	38a4      	subs	r0, #164	; 0xa4
   1637c:	1113      	asrs	r3, r2, #4
   1637e:	18c3      	adds	r3, r0, r3
   16380:	e7c0      	b.n	16304 <RADIO_RxDoneHandler+0x120>
   16382:	881a      	ldrh	r2, [r3, #0]
   16384:	0712      	lsls	r2, r2, #28
   16386:	0fd5      	lsrs	r5, r2, #31
   16388:	2a00      	cmp	r2, #0
   1638a:	da27      	bge.n	163dc <RADIO_RxDoneHandler+0x1f8>
   1638c:	2108      	movs	r1, #8
   1638e:	881a      	ldrh	r2, [r3, #0]
   16390:	4c2d      	ldr	r4, [pc, #180]	; (16448 <RADIO_RxDoneHandler+0x264>)
   16392:	438a      	bics	r2, r1
   16394:	801a      	strh	r2, [r3, #0]
   16396:	0023      	movs	r3, r4
   16398:	2280      	movs	r2, #128	; 0x80
   1639a:	3332      	adds	r3, #50	; 0x32
   1639c:	701a      	strb	r2, [r3, #0]
   1639e:	0023      	movs	r3, r4
   163a0:	2200      	movs	r2, #0
   163a2:	3334      	adds	r3, #52	; 0x34
   163a4:	7819      	ldrb	r1, [r3, #0]
   163a6:	0010      	movs	r0, r2
   163a8:	4b28      	ldr	r3, [pc, #160]	; (1644c <RADIO_RxDoneHandler+0x268>)
   163aa:	4798      	blx	r3
   163ac:	4b28      	ldr	r3, [pc, #160]	; (16450 <RADIO_RxDoneHandler+0x26c>)
   163ae:	4798      	blx	r3
   163b0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   163b2:	a901      	add	r1, sp, #4
   163b4:	604b      	str	r3, [r1, #4]
   163b6:	0023      	movs	r3, r4
   163b8:	332c      	adds	r3, #44	; 0x2c
   163ba:	781b      	ldrb	r3, [r3, #0]
   163bc:	0022      	movs	r2, r4
   163be:	720b      	strb	r3, [r1, #8]
   163c0:	2300      	movs	r3, #0
   163c2:	3258      	adds	r2, #88	; 0x58
   163c4:	7013      	strb	r3, [r2, #0]
   163c6:	700b      	strb	r3, [r1, #0]
   163c8:	4b22      	ldr	r3, [pc, #136]	; (16454 <RADIO_RxDoneHandler+0x270>)
   163ca:	701d      	strb	r5, [r3, #0]
   163cc:	4b22      	ldr	r3, [pc, #136]	; (16458 <RADIO_RxDoneHandler+0x274>)
   163ce:	7818      	ldrb	r0, [r3, #0]
   163d0:	07c0      	lsls	r0, r0, #31
   163d2:	0fc0      	lsrs	r0, r0, #31
   163d4:	2801      	cmp	r0, #1
   163d6:	d000      	beq.n	163da <RADIO_RxDoneHandler+0x1f6>
   163d8:	e732      	b.n	16240 <RADIO_RxDoneHandler+0x5c>
   163da:	e7b2      	b.n	16342 <RADIO_RxDoneHandler+0x15e>
   163dc:	881a      	ldrh	r2, [r3, #0]
   163de:	05d2      	lsls	r2, r2, #23
   163e0:	0fd5      	lsrs	r5, r2, #31
   163e2:	2a00      	cmp	r2, #0
   163e4:	db00      	blt.n	163e8 <RADIO_RxDoneHandler+0x204>
   163e6:	e72b      	b.n	16240 <RADIO_RxDoneHandler+0x5c>
   163e8:	4c17      	ldr	r4, [pc, #92]	; (16448 <RADIO_RxDoneHandler+0x264>)
   163ea:	881a      	ldrh	r2, [r3, #0]
   163ec:	0026      	movs	r6, r4
   163ee:	4922      	ldr	r1, [pc, #136]	; (16478 <RADIO_RxDoneHandler+0x294>)
   163f0:	362c      	adds	r6, #44	; 0x2c
   163f2:	400a      	ands	r2, r1
   163f4:	801a      	strh	r2, [r3, #0]
   163f6:	7832      	ldrb	r2, [r6, #0]
   163f8:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   163fa:	b2d2      	uxtb	r2, r2
   163fc:	2000      	movs	r0, #0
   163fe:	4b19      	ldr	r3, [pc, #100]	; (16464 <RADIO_RxDoneHandler+0x280>)
   16400:	4798      	blx	r3
   16402:	0023      	movs	r3, r4
   16404:	2200      	movs	r2, #0
   16406:	3334      	adds	r3, #52	; 0x34
   16408:	7819      	ldrb	r1, [r3, #0]
   1640a:	0010      	movs	r0, r2
   1640c:	4b0f      	ldr	r3, [pc, #60]	; (1644c <RADIO_RxDoneHandler+0x268>)
   1640e:	4798      	blx	r3
   16410:	4b0f      	ldr	r3, [pc, #60]	; (16450 <RADIO_RxDoneHandler+0x26c>)
   16412:	4798      	blx	r3
   16414:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   16416:	a901      	add	r1, sp, #4
   16418:	604b      	str	r3, [r1, #4]
   1641a:	7833      	ldrb	r3, [r6, #0]
   1641c:	0022      	movs	r2, r4
   1641e:	720b      	strb	r3, [r1, #8]
   16420:	2300      	movs	r3, #0
   16422:	3258      	adds	r2, #88	; 0x58
   16424:	7013      	strb	r3, [r2, #0]
   16426:	700b      	strb	r3, [r1, #0]
   16428:	4b0a      	ldr	r3, [pc, #40]	; (16454 <RADIO_RxDoneHandler+0x270>)
   1642a:	701d      	strb	r5, [r3, #0]
   1642c:	4b0a      	ldr	r3, [pc, #40]	; (16458 <RADIO_RxDoneHandler+0x274>)
   1642e:	781b      	ldrb	r3, [r3, #0]
   16430:	06db      	lsls	r3, r3, #27
   16432:	d400      	bmi.n	16436 <RADIO_RxDoneHandler+0x252>
   16434:	e704      	b.n	16240 <RADIO_RxDoneHandler+0x5c>
   16436:	6923      	ldr	r3, [r4, #16]
   16438:	2b00      	cmp	r3, #0
   1643a:	d100      	bne.n	1643e <RADIO_RxDoneHandler+0x25a>
   1643c:	e700      	b.n	16240 <RADIO_RxDoneHandler+0x5c>
   1643e:	2010      	movs	r0, #16
   16440:	e783      	b.n	1634a <RADIO_RxDoneHandler+0x166>
   16442:	46c0      	nop			; (mov r8, r8)
   16444:	20002fbc 	.word	0x20002fbc
   16448:	20002980 	.word	0x20002980
   1644c:	0000f4f5 	.word	0x0000f4f5
   16450:	00015c5d 	.word	0x00015c5d
   16454:	20002fbf 	.word	0x20002fbf
   16458:	20002fbe 	.word	0x20002fbe
   1645c:	00008149 	.word	0x00008149
   16460:	00008121 	.word	0x00008121
   16464:	000081b5 	.word	0x000081b5
   16468:	096ae380 	.word	0x096ae380
   1646c:	cc9eec80 	.word	0xcc9eec80
   16470:	e78fe580 	.word	0xe78fe580
   16474:	06dac2c0 	.word	0x06dac2c0
   16478:	fffffeff 	.word	0xfffffeff

0001647c <Radio_LBTScanTimeout>:
   1647c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   1647e:	4c1c      	ldr	r4, [pc, #112]	; (164f0 <Radio_LBTScanTimeout+0x74>)
   16480:	0025      	movs	r5, r4
   16482:	0023      	movs	r3, r4
   16484:	354f      	adds	r5, #79	; 0x4f
   16486:	7829      	ldrb	r1, [r5, #0]
   16488:	3340      	adds	r3, #64	; 0x40
   1648a:	3101      	adds	r1, #1
   1648c:	b2c9      	uxtb	r1, r1
   1648e:	7029      	strb	r1, [r5, #0]
   16490:	781b      	ldrb	r3, [r3, #0]
   16492:	428b      	cmp	r3, r1
   16494:	d315      	bcc.n	164c2 <Radio_LBTScanTimeout+0x46>
   16496:	260e      	movs	r6, #14
   16498:	446e      	add	r6, sp
   1649a:	4b16      	ldr	r3, [pc, #88]	; (164f4 <Radio_LBTScanTimeout+0x78>)
   1649c:	0030      	movs	r0, r6
   1649e:	4798      	blx	r3
   164a0:	2300      	movs	r3, #0
   164a2:	5ef2      	ldrsh	r2, [r6, r3]
   164a4:	782b      	ldrb	r3, [r5, #0]
   164a6:	4353      	muls	r3, r2
   164a8:	6c62      	ldr	r2, [r4, #68]	; 0x44
   164aa:	189b      	adds	r3, r3, r2
   164ac:	6463      	str	r3, [r4, #68]	; 0x44
   164ae:	0023      	movs	r3, r4
   164b0:	2200      	movs	r2, #0
   164b2:	3350      	adds	r3, #80	; 0x50
   164b4:	7818      	ldrb	r0, [r3, #0]
   164b6:	9200      	str	r2, [sp, #0]
   164b8:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   164ba:	4b0f      	ldr	r3, [pc, #60]	; (164f8 <Radio_LBTScanTimeout+0x7c>)
   164bc:	4c0f      	ldr	r4, [pc, #60]	; (164fc <Radio_LBTScanTimeout+0x80>)
   164be:	47a0      	blx	r4
   164c0:	bd7f      	pop	{r0, r1, r2, r3, r4, r5, r6, pc}
   164c2:	2380      	movs	r3, #128	; 0x80
   164c4:	4a0e      	ldr	r2, [pc, #56]	; (16500 <Radio_LBTScanTimeout+0x84>)
   164c6:	009b      	lsls	r3, r3, #2
   164c8:	8810      	ldrh	r0, [r2, #0]
   164ca:	4303      	orrs	r3, r0
   164cc:	8013      	strh	r3, [r2, #0]
   164ce:	6c63      	ldr	r3, [r4, #68]	; 0x44
   164d0:	0058      	lsls	r0, r3, #1
   164d2:	1e4b      	subs	r3, r1, #1
   164d4:	4359      	muls	r1, r3
   164d6:	4b0b      	ldr	r3, [pc, #44]	; (16504 <Radio_LBTScanTimeout+0x88>)
   164d8:	b289      	uxth	r1, r1
   164da:	4798      	blx	r3
   164dc:	0023      	movs	r3, r4
   164de:	334c      	adds	r3, #76	; 0x4c
   164e0:	8018      	strh	r0, [r3, #0]
   164e2:	2300      	movs	r3, #0
   164e4:	2001      	movs	r0, #1
   164e6:	702b      	strb	r3, [r5, #0]
   164e8:	6463      	str	r3, [r4, #68]	; 0x44
   164ea:	4b07      	ldr	r3, [pc, #28]	; (16508 <Radio_LBTScanTimeout+0x8c>)
   164ec:	4798      	blx	r3
   164ee:	e7e7      	b.n	164c0 <Radio_LBTScanTimeout+0x44>
   164f0:	20002980 	.word	0x20002980
   164f4:	0000f6b9 	.word	0x0000f6b9
   164f8:	0001647d 	.word	0x0001647d
   164fc:	0000ee29 	.word	0x0000ee29
   16500:	20002fbc 	.word	0x20002fbc
   16504:	00016755 	.word	0x00016755
   16508:	000154c5 	.word	0x000154c5

0001650c <RADIO_ScanHandler>:
   1650c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1650e:	4b12      	ldr	r3, [pc, #72]	; (16558 <RADIO_ScanHandler+0x4c>)
   16510:	4798      	blx	r3
   16512:	2000      	movs	r0, #0
   16514:	4b11      	ldr	r3, [pc, #68]	; (1655c <RADIO_ScanHandler+0x50>)
   16516:	4798      	blx	r3
   16518:	4d11      	ldr	r5, [pc, #68]	; (16560 <RADIO_ScanHandler+0x54>)
   1651a:	4b12      	ldr	r3, [pc, #72]	; (16564 <RADIO_ScanHandler+0x58>)
   1651c:	6828      	ldr	r0, [r5, #0]
   1651e:	2400      	movs	r4, #0
   16520:	4798      	blx	r3
   16522:	002b      	movs	r3, r5
   16524:	4e10      	ldr	r6, [pc, #64]	; (16568 <RADIO_ScanHandler+0x5c>)
   16526:	334c      	adds	r3, #76	; 0x4c
   16528:	2201      	movs	r2, #1
   1652a:	0021      	movs	r1, r4
   1652c:	0020      	movs	r0, r4
   1652e:	801c      	strh	r4, [r3, #0]
   16530:	47b0      	blx	r6
   16532:	4b0e      	ldr	r3, [pc, #56]	; (1656c <RADIO_ScanHandler+0x60>)
   16534:	2109      	movs	r1, #9
   16536:	2012      	movs	r0, #18
   16538:	4798      	blx	r3
   1653a:	3550      	adds	r5, #80	; 0x50
   1653c:	0022      	movs	r2, r4
   1653e:	0021      	movs	r1, r4
   16540:	2005      	movs	r0, #5
   16542:	47b0      	blx	r6
   16544:	7828      	ldrb	r0, [r5, #0]
   16546:	4b0a      	ldr	r3, [pc, #40]	; (16570 <RADIO_ScanHandler+0x64>)
   16548:	4d0a      	ldr	r5, [pc, #40]	; (16574 <RADIO_ScanHandler+0x68>)
   1654a:	9400      	str	r4, [sp, #0]
   1654c:	0022      	movs	r2, r4
   1654e:	490a      	ldr	r1, [pc, #40]	; (16578 <RADIO_ScanHandler+0x6c>)
   16550:	47a8      	blx	r5
   16552:	0020      	movs	r0, r4
   16554:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
   16556:	46c0      	nop			; (mov r8, r8)
   16558:	00015c29 	.word	0x00015c29
   1655c:	00015779 	.word	0x00015779
   16560:	20002980 	.word	0x20002980
   16564:	00014ebd 	.word	0x00014ebd
   16568:	0000f4f5 	.word	0x0000f4f5
   1656c:	00008121 	.word	0x00008121
   16570:	0001647d 	.word	0x0001647d
   16574:	0000ee29 	.word	0x0000ee29
   16578:	00002328 	.word	0x00002328

0001657c <radioScanDoneHandler>:
   1657c:	b530      	push	{r4, r5, lr}
   1657e:	4a18      	ldr	r2, [pc, #96]	; (165e0 <radioScanDoneHandler+0x64>)
   16580:	4918      	ldr	r1, [pc, #96]	; (165e4 <radioScanDoneHandler+0x68>)
   16582:	8813      	ldrh	r3, [r2, #0]
   16584:	b085      	sub	sp, #20
   16586:	400b      	ands	r3, r1
   16588:	8013      	strh	r3, [r2, #0]
   1658a:	2200      	movs	r2, #0
   1658c:	4b16      	ldr	r3, [pc, #88]	; (165e8 <radioScanDoneHandler+0x6c>)
   1658e:	0011      	movs	r1, r2
   16590:	0010      	movs	r0, r2
   16592:	4798      	blx	r3
   16594:	2000      	movs	r0, #0
   16596:	4b15      	ldr	r3, [pc, #84]	; (165ec <radioScanDoneHandler+0x70>)
   16598:	4798      	blx	r3
   1659a:	4b15      	ldr	r3, [pc, #84]	; (165f0 <radioScanDoneHandler+0x74>)
   1659c:	4798      	blx	r3
   1659e:	4c15      	ldr	r4, [pc, #84]	; (165f4 <radioScanDoneHandler+0x78>)
   165a0:	0023      	movs	r3, r4
   165a2:	334c      	adds	r3, #76	; 0x4c
   165a4:	2100      	movs	r1, #0
   165a6:	5e59      	ldrsh	r1, [r3, r1]
   165a8:	233e      	movs	r3, #62	; 0x3e
   165aa:	5ee2      	ldrsh	r2, [r4, r3]
   165ac:	4b12      	ldr	r3, [pc, #72]	; (165f8 <radioScanDoneHandler+0x7c>)
   165ae:	4291      	cmp	r1, r2
   165b0:	da06      	bge.n	165c0 <radioScanDoneHandler+0x44>
   165b2:	2002      	movs	r0, #2
   165b4:	4798      	blx	r3
   165b6:	4b11      	ldr	r3, [pc, #68]	; (165fc <radioScanDoneHandler+0x80>)
   165b8:	4798      	blx	r3
   165ba:	2000      	movs	r0, #0
   165bc:	b005      	add	sp, #20
   165be:	bd30      	pop	{r4, r5, pc}
   165c0:	2207      	movs	r2, #7
   165c2:	ad01      	add	r5, sp, #4
   165c4:	2001      	movs	r0, #1
   165c6:	702a      	strb	r2, [r5, #0]
   165c8:	4798      	blx	r3
   165ca:	4b0d      	ldr	r3, [pc, #52]	; (16600 <radioScanDoneHandler+0x84>)
   165cc:	781b      	ldrb	r3, [r3, #0]
   165ce:	079b      	lsls	r3, r3, #30
   165d0:	d5f3      	bpl.n	165ba <radioScanDoneHandler+0x3e>
   165d2:	6923      	ldr	r3, [r4, #16]
   165d4:	2b00      	cmp	r3, #0
   165d6:	d0f0      	beq.n	165ba <radioScanDoneHandler+0x3e>
   165d8:	0029      	movs	r1, r5
   165da:	2002      	movs	r0, #2
   165dc:	4798      	blx	r3
   165de:	e7ec      	b.n	165ba <radioScanDoneHandler+0x3e>
   165e0:	20002fbc 	.word	0x20002fbc
   165e4:	fffffdff 	.word	0xfffffdff
   165e8:	0000f4f5 	.word	0x0000f4f5
   165ec:	000158a1 	.word	0x000158a1
   165f0:	00015c5d 	.word	0x00015c5d
   165f4:	20002980 	.word	0x20002980
   165f8:	00015571 	.word	0x00015571
   165fc:	00015f29 	.word	0x00015f29
   16600:	20002fbe 	.word	0x20002fbe

00016604 <__gnu_thumb1_case_sqi>:
   16604:	b402      	push	{r1}
   16606:	4671      	mov	r1, lr
   16608:	0849      	lsrs	r1, r1, #1
   1660a:	0049      	lsls	r1, r1, #1
   1660c:	5609      	ldrsb	r1, [r1, r0]
   1660e:	0049      	lsls	r1, r1, #1
   16610:	448e      	add	lr, r1
   16612:	bc02      	pop	{r1}
   16614:	4770      	bx	lr
   16616:	46c0      	nop			; (mov r8, r8)

00016618 <__gnu_thumb1_case_uqi>:
   16618:	b402      	push	{r1}
   1661a:	4671      	mov	r1, lr
   1661c:	0849      	lsrs	r1, r1, #1
   1661e:	0049      	lsls	r1, r1, #1
   16620:	5c09      	ldrb	r1, [r1, r0]
   16622:	0049      	lsls	r1, r1, #1
   16624:	448e      	add	lr, r1
   16626:	bc02      	pop	{r1}
   16628:	4770      	bx	lr
   1662a:	46c0      	nop			; (mov r8, r8)

0001662c <__gnu_thumb1_case_uhi>:
   1662c:	b403      	push	{r0, r1}
   1662e:	4671      	mov	r1, lr
   16630:	0849      	lsrs	r1, r1, #1
   16632:	0040      	lsls	r0, r0, #1
   16634:	0049      	lsls	r1, r1, #1
   16636:	5a09      	ldrh	r1, [r1, r0]
   16638:	0049      	lsls	r1, r1, #1
   1663a:	448e      	add	lr, r1
   1663c:	bc03      	pop	{r0, r1}
   1663e:	4770      	bx	lr

00016640 <__udivsi3>:
   16640:	2200      	movs	r2, #0
   16642:	0843      	lsrs	r3, r0, #1
   16644:	428b      	cmp	r3, r1
   16646:	d374      	bcc.n	16732 <__udivsi3+0xf2>
   16648:	0903      	lsrs	r3, r0, #4
   1664a:	428b      	cmp	r3, r1
   1664c:	d35f      	bcc.n	1670e <__udivsi3+0xce>
   1664e:	0a03      	lsrs	r3, r0, #8
   16650:	428b      	cmp	r3, r1
   16652:	d344      	bcc.n	166de <__udivsi3+0x9e>
   16654:	0b03      	lsrs	r3, r0, #12
   16656:	428b      	cmp	r3, r1
   16658:	d328      	bcc.n	166ac <__udivsi3+0x6c>
   1665a:	0c03      	lsrs	r3, r0, #16
   1665c:	428b      	cmp	r3, r1
   1665e:	d30d      	bcc.n	1667c <__udivsi3+0x3c>
   16660:	22ff      	movs	r2, #255	; 0xff
   16662:	0209      	lsls	r1, r1, #8
   16664:	ba12      	rev	r2, r2
   16666:	0c03      	lsrs	r3, r0, #16
   16668:	428b      	cmp	r3, r1
   1666a:	d302      	bcc.n	16672 <__udivsi3+0x32>
   1666c:	1212      	asrs	r2, r2, #8
   1666e:	0209      	lsls	r1, r1, #8
   16670:	d065      	beq.n	1673e <__udivsi3+0xfe>
   16672:	0b03      	lsrs	r3, r0, #12
   16674:	428b      	cmp	r3, r1
   16676:	d319      	bcc.n	166ac <__udivsi3+0x6c>
   16678:	e000      	b.n	1667c <__udivsi3+0x3c>
   1667a:	0a09      	lsrs	r1, r1, #8
   1667c:	0bc3      	lsrs	r3, r0, #15
   1667e:	428b      	cmp	r3, r1
   16680:	d301      	bcc.n	16686 <__udivsi3+0x46>
   16682:	03cb      	lsls	r3, r1, #15
   16684:	1ac0      	subs	r0, r0, r3
   16686:	4152      	adcs	r2, r2
   16688:	0b83      	lsrs	r3, r0, #14
   1668a:	428b      	cmp	r3, r1
   1668c:	d301      	bcc.n	16692 <__udivsi3+0x52>
   1668e:	038b      	lsls	r3, r1, #14
   16690:	1ac0      	subs	r0, r0, r3
   16692:	4152      	adcs	r2, r2
   16694:	0b43      	lsrs	r3, r0, #13
   16696:	428b      	cmp	r3, r1
   16698:	d301      	bcc.n	1669e <__udivsi3+0x5e>
   1669a:	034b      	lsls	r3, r1, #13
   1669c:	1ac0      	subs	r0, r0, r3
   1669e:	4152      	adcs	r2, r2
   166a0:	0b03      	lsrs	r3, r0, #12
   166a2:	428b      	cmp	r3, r1
   166a4:	d301      	bcc.n	166aa <__udivsi3+0x6a>
   166a6:	030b      	lsls	r3, r1, #12
   166a8:	1ac0      	subs	r0, r0, r3
   166aa:	4152      	adcs	r2, r2
   166ac:	0ac3      	lsrs	r3, r0, #11
   166ae:	428b      	cmp	r3, r1
   166b0:	d301      	bcc.n	166b6 <__udivsi3+0x76>
   166b2:	02cb      	lsls	r3, r1, #11
   166b4:	1ac0      	subs	r0, r0, r3
   166b6:	4152      	adcs	r2, r2
   166b8:	0a83      	lsrs	r3, r0, #10
   166ba:	428b      	cmp	r3, r1
   166bc:	d301      	bcc.n	166c2 <__udivsi3+0x82>
   166be:	028b      	lsls	r3, r1, #10
   166c0:	1ac0      	subs	r0, r0, r3
   166c2:	4152      	adcs	r2, r2
   166c4:	0a43      	lsrs	r3, r0, #9
   166c6:	428b      	cmp	r3, r1
   166c8:	d301      	bcc.n	166ce <__udivsi3+0x8e>
   166ca:	024b      	lsls	r3, r1, #9
   166cc:	1ac0      	subs	r0, r0, r3
   166ce:	4152      	adcs	r2, r2
   166d0:	0a03      	lsrs	r3, r0, #8
   166d2:	428b      	cmp	r3, r1
   166d4:	d301      	bcc.n	166da <__udivsi3+0x9a>
   166d6:	020b      	lsls	r3, r1, #8
   166d8:	1ac0      	subs	r0, r0, r3
   166da:	4152      	adcs	r2, r2
   166dc:	d2cd      	bcs.n	1667a <__udivsi3+0x3a>
   166de:	09c3      	lsrs	r3, r0, #7
   166e0:	428b      	cmp	r3, r1
   166e2:	d301      	bcc.n	166e8 <__udivsi3+0xa8>
   166e4:	01cb      	lsls	r3, r1, #7
   166e6:	1ac0      	subs	r0, r0, r3
   166e8:	4152      	adcs	r2, r2
   166ea:	0983      	lsrs	r3, r0, #6
   166ec:	428b      	cmp	r3, r1
   166ee:	d301      	bcc.n	166f4 <__udivsi3+0xb4>
   166f0:	018b      	lsls	r3, r1, #6
   166f2:	1ac0      	subs	r0, r0, r3
   166f4:	4152      	adcs	r2, r2
   166f6:	0943      	lsrs	r3, r0, #5
   166f8:	428b      	cmp	r3, r1
   166fa:	d301      	bcc.n	16700 <__udivsi3+0xc0>
   166fc:	014b      	lsls	r3, r1, #5
   166fe:	1ac0      	subs	r0, r0, r3
   16700:	4152      	adcs	r2, r2
   16702:	0903      	lsrs	r3, r0, #4
   16704:	428b      	cmp	r3, r1
   16706:	d301      	bcc.n	1670c <__udivsi3+0xcc>
   16708:	010b      	lsls	r3, r1, #4
   1670a:	1ac0      	subs	r0, r0, r3
   1670c:	4152      	adcs	r2, r2
   1670e:	08c3      	lsrs	r3, r0, #3
   16710:	428b      	cmp	r3, r1
   16712:	d301      	bcc.n	16718 <__udivsi3+0xd8>
   16714:	00cb      	lsls	r3, r1, #3
   16716:	1ac0      	subs	r0, r0, r3
   16718:	4152      	adcs	r2, r2
   1671a:	0883      	lsrs	r3, r0, #2
   1671c:	428b      	cmp	r3, r1
   1671e:	d301      	bcc.n	16724 <__udivsi3+0xe4>
   16720:	008b      	lsls	r3, r1, #2
   16722:	1ac0      	subs	r0, r0, r3
   16724:	4152      	adcs	r2, r2
   16726:	0843      	lsrs	r3, r0, #1
   16728:	428b      	cmp	r3, r1
   1672a:	d301      	bcc.n	16730 <__udivsi3+0xf0>
   1672c:	004b      	lsls	r3, r1, #1
   1672e:	1ac0      	subs	r0, r0, r3
   16730:	4152      	adcs	r2, r2
   16732:	1a41      	subs	r1, r0, r1
   16734:	d200      	bcs.n	16738 <__udivsi3+0xf8>
   16736:	4601      	mov	r1, r0
   16738:	4152      	adcs	r2, r2
   1673a:	4610      	mov	r0, r2
   1673c:	4770      	bx	lr
   1673e:	e7ff      	b.n	16740 <__udivsi3+0x100>
   16740:	b501      	push	{r0, lr}
   16742:	2000      	movs	r0, #0
   16744:	f000 f8f0 	bl	16928 <__aeabi_idiv0>
   16748:	bd02      	pop	{r1, pc}
   1674a:	46c0      	nop			; (mov r8, r8)

0001674c <__aeabi_uidivmod>:
   1674c:	2900      	cmp	r1, #0
   1674e:	d0f7      	beq.n	16740 <__udivsi3+0x100>
   16750:	e776      	b.n	16640 <__udivsi3>
   16752:	4770      	bx	lr

00016754 <__divsi3>:
   16754:	4603      	mov	r3, r0
   16756:	430b      	orrs	r3, r1
   16758:	d47f      	bmi.n	1685a <__divsi3+0x106>
   1675a:	2200      	movs	r2, #0
   1675c:	0843      	lsrs	r3, r0, #1
   1675e:	428b      	cmp	r3, r1
   16760:	d374      	bcc.n	1684c <__divsi3+0xf8>
   16762:	0903      	lsrs	r3, r0, #4
   16764:	428b      	cmp	r3, r1
   16766:	d35f      	bcc.n	16828 <__divsi3+0xd4>
   16768:	0a03      	lsrs	r3, r0, #8
   1676a:	428b      	cmp	r3, r1
   1676c:	d344      	bcc.n	167f8 <__divsi3+0xa4>
   1676e:	0b03      	lsrs	r3, r0, #12
   16770:	428b      	cmp	r3, r1
   16772:	d328      	bcc.n	167c6 <__divsi3+0x72>
   16774:	0c03      	lsrs	r3, r0, #16
   16776:	428b      	cmp	r3, r1
   16778:	d30d      	bcc.n	16796 <__divsi3+0x42>
   1677a:	22ff      	movs	r2, #255	; 0xff
   1677c:	0209      	lsls	r1, r1, #8
   1677e:	ba12      	rev	r2, r2
   16780:	0c03      	lsrs	r3, r0, #16
   16782:	428b      	cmp	r3, r1
   16784:	d302      	bcc.n	1678c <__divsi3+0x38>
   16786:	1212      	asrs	r2, r2, #8
   16788:	0209      	lsls	r1, r1, #8
   1678a:	d065      	beq.n	16858 <__divsi3+0x104>
   1678c:	0b03      	lsrs	r3, r0, #12
   1678e:	428b      	cmp	r3, r1
   16790:	d319      	bcc.n	167c6 <__divsi3+0x72>
   16792:	e000      	b.n	16796 <__divsi3+0x42>
   16794:	0a09      	lsrs	r1, r1, #8
   16796:	0bc3      	lsrs	r3, r0, #15
   16798:	428b      	cmp	r3, r1
   1679a:	d301      	bcc.n	167a0 <__divsi3+0x4c>
   1679c:	03cb      	lsls	r3, r1, #15
   1679e:	1ac0      	subs	r0, r0, r3
   167a0:	4152      	adcs	r2, r2
   167a2:	0b83      	lsrs	r3, r0, #14
   167a4:	428b      	cmp	r3, r1
   167a6:	d301      	bcc.n	167ac <__divsi3+0x58>
   167a8:	038b      	lsls	r3, r1, #14
   167aa:	1ac0      	subs	r0, r0, r3
   167ac:	4152      	adcs	r2, r2
   167ae:	0b43      	lsrs	r3, r0, #13
   167b0:	428b      	cmp	r3, r1
   167b2:	d301      	bcc.n	167b8 <__divsi3+0x64>
   167b4:	034b      	lsls	r3, r1, #13
   167b6:	1ac0      	subs	r0, r0, r3
   167b8:	4152      	adcs	r2, r2
   167ba:	0b03      	lsrs	r3, r0, #12
   167bc:	428b      	cmp	r3, r1
   167be:	d301      	bcc.n	167c4 <__divsi3+0x70>
   167c0:	030b      	lsls	r3, r1, #12
   167c2:	1ac0      	subs	r0, r0, r3
   167c4:	4152      	adcs	r2, r2
   167c6:	0ac3      	lsrs	r3, r0, #11
   167c8:	428b      	cmp	r3, r1
   167ca:	d301      	bcc.n	167d0 <__divsi3+0x7c>
   167cc:	02cb      	lsls	r3, r1, #11
   167ce:	1ac0      	subs	r0, r0, r3
   167d0:	4152      	adcs	r2, r2
   167d2:	0a83      	lsrs	r3, r0, #10
   167d4:	428b      	cmp	r3, r1
   167d6:	d301      	bcc.n	167dc <__divsi3+0x88>
   167d8:	028b      	lsls	r3, r1, #10
   167da:	1ac0      	subs	r0, r0, r3
   167dc:	4152      	adcs	r2, r2
   167de:	0a43      	lsrs	r3, r0, #9
   167e0:	428b      	cmp	r3, r1
   167e2:	d301      	bcc.n	167e8 <__divsi3+0x94>
   167e4:	024b      	lsls	r3, r1, #9
   167e6:	1ac0      	subs	r0, r0, r3
   167e8:	4152      	adcs	r2, r2
   167ea:	0a03      	lsrs	r3, r0, #8
   167ec:	428b      	cmp	r3, r1
   167ee:	d301      	bcc.n	167f4 <__divsi3+0xa0>
   167f0:	020b      	lsls	r3, r1, #8
   167f2:	1ac0      	subs	r0, r0, r3
   167f4:	4152      	adcs	r2, r2
   167f6:	d2cd      	bcs.n	16794 <__divsi3+0x40>
   167f8:	09c3      	lsrs	r3, r0, #7
   167fa:	428b      	cmp	r3, r1
   167fc:	d301      	bcc.n	16802 <__divsi3+0xae>
   167fe:	01cb      	lsls	r3, r1, #7
   16800:	1ac0      	subs	r0, r0, r3
   16802:	4152      	adcs	r2, r2
   16804:	0983      	lsrs	r3, r0, #6
   16806:	428b      	cmp	r3, r1
   16808:	d301      	bcc.n	1680e <__divsi3+0xba>
   1680a:	018b      	lsls	r3, r1, #6
   1680c:	1ac0      	subs	r0, r0, r3
   1680e:	4152      	adcs	r2, r2
   16810:	0943      	lsrs	r3, r0, #5
   16812:	428b      	cmp	r3, r1
   16814:	d301      	bcc.n	1681a <__divsi3+0xc6>
   16816:	014b      	lsls	r3, r1, #5
   16818:	1ac0      	subs	r0, r0, r3
   1681a:	4152      	adcs	r2, r2
   1681c:	0903      	lsrs	r3, r0, #4
   1681e:	428b      	cmp	r3, r1
   16820:	d301      	bcc.n	16826 <__divsi3+0xd2>
   16822:	010b      	lsls	r3, r1, #4
   16824:	1ac0      	subs	r0, r0, r3
   16826:	4152      	adcs	r2, r2
   16828:	08c3      	lsrs	r3, r0, #3
   1682a:	428b      	cmp	r3, r1
   1682c:	d301      	bcc.n	16832 <__divsi3+0xde>
   1682e:	00cb      	lsls	r3, r1, #3
   16830:	1ac0      	subs	r0, r0, r3
   16832:	4152      	adcs	r2, r2
   16834:	0883      	lsrs	r3, r0, #2
   16836:	428b      	cmp	r3, r1
   16838:	d301      	bcc.n	1683e <__divsi3+0xea>
   1683a:	008b      	lsls	r3, r1, #2
   1683c:	1ac0      	subs	r0, r0, r3
   1683e:	4152      	adcs	r2, r2
   16840:	0843      	lsrs	r3, r0, #1
   16842:	428b      	cmp	r3, r1
   16844:	d301      	bcc.n	1684a <__divsi3+0xf6>
   16846:	004b      	lsls	r3, r1, #1
   16848:	1ac0      	subs	r0, r0, r3
   1684a:	4152      	adcs	r2, r2
   1684c:	1a41      	subs	r1, r0, r1
   1684e:	d200      	bcs.n	16852 <__divsi3+0xfe>
   16850:	4601      	mov	r1, r0
   16852:	4152      	adcs	r2, r2
   16854:	4610      	mov	r0, r2
   16856:	4770      	bx	lr
   16858:	e05d      	b.n	16916 <__divsi3+0x1c2>
   1685a:	0fca      	lsrs	r2, r1, #31
   1685c:	d000      	beq.n	16860 <__divsi3+0x10c>
   1685e:	4249      	negs	r1, r1
   16860:	1003      	asrs	r3, r0, #32
   16862:	d300      	bcc.n	16866 <__divsi3+0x112>
   16864:	4240      	negs	r0, r0
   16866:	4053      	eors	r3, r2
   16868:	2200      	movs	r2, #0
   1686a:	469c      	mov	ip, r3
   1686c:	0903      	lsrs	r3, r0, #4
   1686e:	428b      	cmp	r3, r1
   16870:	d32d      	bcc.n	168ce <__divsi3+0x17a>
   16872:	0a03      	lsrs	r3, r0, #8
   16874:	428b      	cmp	r3, r1
   16876:	d312      	bcc.n	1689e <__divsi3+0x14a>
   16878:	22fc      	movs	r2, #252	; 0xfc
   1687a:	0189      	lsls	r1, r1, #6
   1687c:	ba12      	rev	r2, r2
   1687e:	0a03      	lsrs	r3, r0, #8
   16880:	428b      	cmp	r3, r1
   16882:	d30c      	bcc.n	1689e <__divsi3+0x14a>
   16884:	0189      	lsls	r1, r1, #6
   16886:	1192      	asrs	r2, r2, #6
   16888:	428b      	cmp	r3, r1
   1688a:	d308      	bcc.n	1689e <__divsi3+0x14a>
   1688c:	0189      	lsls	r1, r1, #6
   1688e:	1192      	asrs	r2, r2, #6
   16890:	428b      	cmp	r3, r1
   16892:	d304      	bcc.n	1689e <__divsi3+0x14a>
   16894:	0189      	lsls	r1, r1, #6
   16896:	d03a      	beq.n	1690e <__divsi3+0x1ba>
   16898:	1192      	asrs	r2, r2, #6
   1689a:	e000      	b.n	1689e <__divsi3+0x14a>
   1689c:	0989      	lsrs	r1, r1, #6
   1689e:	09c3      	lsrs	r3, r0, #7
   168a0:	428b      	cmp	r3, r1
   168a2:	d301      	bcc.n	168a8 <__divsi3+0x154>
   168a4:	01cb      	lsls	r3, r1, #7
   168a6:	1ac0      	subs	r0, r0, r3
   168a8:	4152      	adcs	r2, r2
   168aa:	0983      	lsrs	r3, r0, #6
   168ac:	428b      	cmp	r3, r1
   168ae:	d301      	bcc.n	168b4 <__divsi3+0x160>
   168b0:	018b      	lsls	r3, r1, #6
   168b2:	1ac0      	subs	r0, r0, r3
   168b4:	4152      	adcs	r2, r2
   168b6:	0943      	lsrs	r3, r0, #5
   168b8:	428b      	cmp	r3, r1
   168ba:	d301      	bcc.n	168c0 <__divsi3+0x16c>
   168bc:	014b      	lsls	r3, r1, #5
   168be:	1ac0      	subs	r0, r0, r3
   168c0:	4152      	adcs	r2, r2
   168c2:	0903      	lsrs	r3, r0, #4
   168c4:	428b      	cmp	r3, r1
   168c6:	d301      	bcc.n	168cc <__divsi3+0x178>
   168c8:	010b      	lsls	r3, r1, #4
   168ca:	1ac0      	subs	r0, r0, r3
   168cc:	4152      	adcs	r2, r2
   168ce:	08c3      	lsrs	r3, r0, #3
   168d0:	428b      	cmp	r3, r1
   168d2:	d301      	bcc.n	168d8 <__divsi3+0x184>
   168d4:	00cb      	lsls	r3, r1, #3
   168d6:	1ac0      	subs	r0, r0, r3
   168d8:	4152      	adcs	r2, r2
   168da:	0883      	lsrs	r3, r0, #2
   168dc:	428b      	cmp	r3, r1
   168de:	d301      	bcc.n	168e4 <__divsi3+0x190>
   168e0:	008b      	lsls	r3, r1, #2
   168e2:	1ac0      	subs	r0, r0, r3
   168e4:	4152      	adcs	r2, r2
   168e6:	d2d9      	bcs.n	1689c <__divsi3+0x148>
   168e8:	0843      	lsrs	r3, r0, #1
   168ea:	428b      	cmp	r3, r1
   168ec:	d301      	bcc.n	168f2 <__divsi3+0x19e>
   168ee:	004b      	lsls	r3, r1, #1
   168f0:	1ac0      	subs	r0, r0, r3
   168f2:	4152      	adcs	r2, r2
   168f4:	1a41      	subs	r1, r0, r1
   168f6:	d200      	bcs.n	168fa <__divsi3+0x1a6>
   168f8:	4601      	mov	r1, r0
   168fa:	4663      	mov	r3, ip
   168fc:	4152      	adcs	r2, r2
   168fe:	105b      	asrs	r3, r3, #1
   16900:	4610      	mov	r0, r2
   16902:	d301      	bcc.n	16908 <__divsi3+0x1b4>
   16904:	4240      	negs	r0, r0
   16906:	2b00      	cmp	r3, #0
   16908:	d500      	bpl.n	1690c <__divsi3+0x1b8>
   1690a:	4249      	negs	r1, r1
   1690c:	4770      	bx	lr
   1690e:	4663      	mov	r3, ip
   16910:	105b      	asrs	r3, r3, #1
   16912:	d300      	bcc.n	16916 <__divsi3+0x1c2>
   16914:	4240      	negs	r0, r0
   16916:	b501      	push	{r0, lr}
   16918:	2000      	movs	r0, #0
   1691a:	f000 f805 	bl	16928 <__aeabi_idiv0>
   1691e:	bd02      	pop	{r1, pc}

00016920 <__aeabi_idivmod>:
   16920:	2900      	cmp	r1, #0
   16922:	d0f8      	beq.n	16916 <__divsi3+0x1c2>
   16924:	e716      	b.n	16754 <__divsi3>
   16926:	4770      	bx	lr

00016928 <__aeabi_idiv0>:
   16928:	4770      	bx	lr
   1692a:	46c0      	nop			; (mov r8, r8)

0001692c <__aeabi_cdrcmple>:
   1692c:	4684      	mov	ip, r0
   1692e:	1c10      	adds	r0, r2, #0
   16930:	4662      	mov	r2, ip
   16932:	468c      	mov	ip, r1
   16934:	1c19      	adds	r1, r3, #0
   16936:	4663      	mov	r3, ip
   16938:	e000      	b.n	1693c <__aeabi_cdcmpeq>
   1693a:	46c0      	nop			; (mov r8, r8)

0001693c <__aeabi_cdcmpeq>:
   1693c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   1693e:	f001 ffa3 	bl	18888 <__ledf2>
   16942:	2800      	cmp	r0, #0
   16944:	d401      	bmi.n	1694a <__aeabi_cdcmpeq+0xe>
   16946:	2100      	movs	r1, #0
   16948:	42c8      	cmn	r0, r1
   1694a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0001694c <__aeabi_dcmpeq>:
   1694c:	b510      	push	{r4, lr}
   1694e:	f001 fefd 	bl	1874c <__eqdf2>
   16952:	4240      	negs	r0, r0
   16954:	3001      	adds	r0, #1
   16956:	bd10      	pop	{r4, pc}

00016958 <__aeabi_dcmplt>:
   16958:	b510      	push	{r4, lr}
   1695a:	f001 ff95 	bl	18888 <__ledf2>
   1695e:	2800      	cmp	r0, #0
   16960:	db01      	blt.n	16966 <__aeabi_dcmplt+0xe>
   16962:	2000      	movs	r0, #0
   16964:	bd10      	pop	{r4, pc}
   16966:	2001      	movs	r0, #1
   16968:	bd10      	pop	{r4, pc}
   1696a:	46c0      	nop			; (mov r8, r8)

0001696c <__aeabi_dcmple>:
   1696c:	b510      	push	{r4, lr}
   1696e:	f001 ff8b 	bl	18888 <__ledf2>
   16972:	2800      	cmp	r0, #0
   16974:	dd01      	ble.n	1697a <__aeabi_dcmple+0xe>
   16976:	2000      	movs	r0, #0
   16978:	bd10      	pop	{r4, pc}
   1697a:	2001      	movs	r0, #1
   1697c:	bd10      	pop	{r4, pc}
   1697e:	46c0      	nop			; (mov r8, r8)

00016980 <__aeabi_dcmpgt>:
   16980:	b510      	push	{r4, lr}
   16982:	f001 ff1d 	bl	187c0 <__gedf2>
   16986:	2800      	cmp	r0, #0
   16988:	dc01      	bgt.n	1698e <__aeabi_dcmpgt+0xe>
   1698a:	2000      	movs	r0, #0
   1698c:	bd10      	pop	{r4, pc}
   1698e:	2001      	movs	r0, #1
   16990:	bd10      	pop	{r4, pc}
   16992:	46c0      	nop			; (mov r8, r8)

00016994 <__aeabi_dcmpge>:
   16994:	b510      	push	{r4, lr}
   16996:	f001 ff13 	bl	187c0 <__gedf2>
   1699a:	2800      	cmp	r0, #0
   1699c:	da01      	bge.n	169a2 <__aeabi_dcmpge+0xe>
   1699e:	2000      	movs	r0, #0
   169a0:	bd10      	pop	{r4, pc}
   169a2:	2001      	movs	r0, #1
   169a4:	bd10      	pop	{r4, pc}
   169a6:	46c0      	nop			; (mov r8, r8)

000169a8 <__aeabi_cfrcmple>:
   169a8:	4684      	mov	ip, r0
   169aa:	1c08      	adds	r0, r1, #0
   169ac:	4661      	mov	r1, ip
   169ae:	e7ff      	b.n	169b0 <__aeabi_cfcmpeq>

000169b0 <__aeabi_cfcmpeq>:
   169b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   169b2:	f000 fcd3 	bl	1735c <__lesf2>
   169b6:	2800      	cmp	r0, #0
   169b8:	d401      	bmi.n	169be <__aeabi_cfcmpeq+0xe>
   169ba:	2100      	movs	r1, #0
   169bc:	42c8      	cmn	r0, r1
   169be:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

000169c0 <__aeabi_fcmpeq>:
   169c0:	b510      	push	{r4, lr}
   169c2:	f000 fc65 	bl	17290 <__eqsf2>
   169c6:	4240      	negs	r0, r0
   169c8:	3001      	adds	r0, #1
   169ca:	bd10      	pop	{r4, pc}

000169cc <__aeabi_fcmplt>:
   169cc:	b510      	push	{r4, lr}
   169ce:	f000 fcc5 	bl	1735c <__lesf2>
   169d2:	2800      	cmp	r0, #0
   169d4:	db01      	blt.n	169da <__aeabi_fcmplt+0xe>
   169d6:	2000      	movs	r0, #0
   169d8:	bd10      	pop	{r4, pc}
   169da:	2001      	movs	r0, #1
   169dc:	bd10      	pop	{r4, pc}
   169de:	46c0      	nop			; (mov r8, r8)

000169e0 <__aeabi_fcmple>:
   169e0:	b510      	push	{r4, lr}
   169e2:	f000 fcbb 	bl	1735c <__lesf2>
   169e6:	2800      	cmp	r0, #0
   169e8:	dd01      	ble.n	169ee <__aeabi_fcmple+0xe>
   169ea:	2000      	movs	r0, #0
   169ec:	bd10      	pop	{r4, pc}
   169ee:	2001      	movs	r0, #1
   169f0:	bd10      	pop	{r4, pc}
   169f2:	46c0      	nop			; (mov r8, r8)

000169f4 <__aeabi_fcmpgt>:
   169f4:	b510      	push	{r4, lr}
   169f6:	f000 fc71 	bl	172dc <__gesf2>
   169fa:	2800      	cmp	r0, #0
   169fc:	dc01      	bgt.n	16a02 <__aeabi_fcmpgt+0xe>
   169fe:	2000      	movs	r0, #0
   16a00:	bd10      	pop	{r4, pc}
   16a02:	2001      	movs	r0, #1
   16a04:	bd10      	pop	{r4, pc}
   16a06:	46c0      	nop			; (mov r8, r8)

00016a08 <__aeabi_fcmpge>:
   16a08:	b510      	push	{r4, lr}
   16a0a:	f000 fc67 	bl	172dc <__gesf2>
   16a0e:	2800      	cmp	r0, #0
   16a10:	da01      	bge.n	16a16 <__aeabi_fcmpge+0xe>
   16a12:	2000      	movs	r0, #0
   16a14:	bd10      	pop	{r4, pc}
   16a16:	2001      	movs	r0, #1
   16a18:	bd10      	pop	{r4, pc}
   16a1a:	46c0      	nop			; (mov r8, r8)

00016a1c <__aeabi_uldivmod>:
   16a1c:	2b00      	cmp	r3, #0
   16a1e:	d111      	bne.n	16a44 <__aeabi_uldivmod+0x28>
   16a20:	2a00      	cmp	r2, #0
   16a22:	d10f      	bne.n	16a44 <__aeabi_uldivmod+0x28>
   16a24:	2900      	cmp	r1, #0
   16a26:	d100      	bne.n	16a2a <__aeabi_uldivmod+0xe>
   16a28:	2800      	cmp	r0, #0
   16a2a:	d002      	beq.n	16a32 <__aeabi_uldivmod+0x16>
   16a2c:	2100      	movs	r1, #0
   16a2e:	43c9      	mvns	r1, r1
   16a30:	1c08      	adds	r0, r1, #0
   16a32:	b407      	push	{r0, r1, r2}
   16a34:	4802      	ldr	r0, [pc, #8]	; (16a40 <__aeabi_uldivmod+0x24>)
   16a36:	a102      	add	r1, pc, #8	; (adr r1, 16a40 <__aeabi_uldivmod+0x24>)
   16a38:	1840      	adds	r0, r0, r1
   16a3a:	9002      	str	r0, [sp, #8]
   16a3c:	bd03      	pop	{r0, r1, pc}
   16a3e:	46c0      	nop			; (mov r8, r8)
   16a40:	fffffee9 	.word	0xfffffee9
   16a44:	b403      	push	{r0, r1}
   16a46:	4668      	mov	r0, sp
   16a48:	b501      	push	{r0, lr}
   16a4a:	9802      	ldr	r0, [sp, #8]
   16a4c:	f000 f886 	bl	16b5c <__udivmoddi4>
   16a50:	9b01      	ldr	r3, [sp, #4]
   16a52:	469e      	mov	lr, r3
   16a54:	b002      	add	sp, #8
   16a56:	bc0c      	pop	{r2, r3}
   16a58:	4770      	bx	lr
   16a5a:	46c0      	nop			; (mov r8, r8)

00016a5c <__aeabi_lmul>:
   16a5c:	b5f0      	push	{r4, r5, r6, r7, lr}
   16a5e:	46ce      	mov	lr, r9
   16a60:	4647      	mov	r7, r8
   16a62:	0415      	lsls	r5, r2, #16
   16a64:	0c2d      	lsrs	r5, r5, #16
   16a66:	002e      	movs	r6, r5
   16a68:	b580      	push	{r7, lr}
   16a6a:	0407      	lsls	r7, r0, #16
   16a6c:	0c14      	lsrs	r4, r2, #16
   16a6e:	0c3f      	lsrs	r7, r7, #16
   16a70:	4699      	mov	r9, r3
   16a72:	0c03      	lsrs	r3, r0, #16
   16a74:	437e      	muls	r6, r7
   16a76:	435d      	muls	r5, r3
   16a78:	4367      	muls	r7, r4
   16a7a:	4363      	muls	r3, r4
   16a7c:	197f      	adds	r7, r7, r5
   16a7e:	0c34      	lsrs	r4, r6, #16
   16a80:	19e4      	adds	r4, r4, r7
   16a82:	469c      	mov	ip, r3
   16a84:	42a5      	cmp	r5, r4
   16a86:	d903      	bls.n	16a90 <__aeabi_lmul+0x34>
   16a88:	2380      	movs	r3, #128	; 0x80
   16a8a:	025b      	lsls	r3, r3, #9
   16a8c:	4698      	mov	r8, r3
   16a8e:	44c4      	add	ip, r8
   16a90:	464b      	mov	r3, r9
   16a92:	4351      	muls	r1, r2
   16a94:	4343      	muls	r3, r0
   16a96:	0436      	lsls	r6, r6, #16
   16a98:	0c36      	lsrs	r6, r6, #16
   16a9a:	0c25      	lsrs	r5, r4, #16
   16a9c:	0424      	lsls	r4, r4, #16
   16a9e:	4465      	add	r5, ip
   16aa0:	19a4      	adds	r4, r4, r6
   16aa2:	1859      	adds	r1, r3, r1
   16aa4:	1949      	adds	r1, r1, r5
   16aa6:	0020      	movs	r0, r4
   16aa8:	bc0c      	pop	{r2, r3}
   16aaa:	4690      	mov	r8, r2
   16aac:	4699      	mov	r9, r3
   16aae:	bdf0      	pop	{r4, r5, r6, r7, pc}

00016ab0 <__aeabi_f2uiz>:
   16ab0:	219e      	movs	r1, #158	; 0x9e
   16ab2:	b510      	push	{r4, lr}
   16ab4:	05c9      	lsls	r1, r1, #23
   16ab6:	1c04      	adds	r4, r0, #0
   16ab8:	f7ff ffa6 	bl	16a08 <__aeabi_fcmpge>
   16abc:	2800      	cmp	r0, #0
   16abe:	d103      	bne.n	16ac8 <__aeabi_f2uiz+0x18>
   16ac0:	1c20      	adds	r0, r4, #0
   16ac2:	f000 ff49 	bl	17958 <__aeabi_f2iz>
   16ac6:	bd10      	pop	{r4, pc}
   16ac8:	219e      	movs	r1, #158	; 0x9e
   16aca:	1c20      	adds	r0, r4, #0
   16acc:	05c9      	lsls	r1, r1, #23
   16ace:	f000 fda7 	bl	17620 <__aeabi_fsub>
   16ad2:	f000 ff41 	bl	17958 <__aeabi_f2iz>
   16ad6:	2380      	movs	r3, #128	; 0x80
   16ad8:	061b      	lsls	r3, r3, #24
   16ada:	469c      	mov	ip, r3
   16adc:	4460      	add	r0, ip
   16ade:	e7f2      	b.n	16ac6 <__aeabi_f2uiz+0x16>

00016ae0 <__aeabi_d2uiz>:
   16ae0:	b570      	push	{r4, r5, r6, lr}
   16ae2:	2200      	movs	r2, #0
   16ae4:	4b0c      	ldr	r3, [pc, #48]	; (16b18 <__aeabi_d2uiz+0x38>)
   16ae6:	0004      	movs	r4, r0
   16ae8:	000d      	movs	r5, r1
   16aea:	f7ff ff53 	bl	16994 <__aeabi_dcmpge>
   16aee:	2800      	cmp	r0, #0
   16af0:	d104      	bne.n	16afc <__aeabi_d2uiz+0x1c>
   16af2:	0020      	movs	r0, r4
   16af4:	0029      	movs	r1, r5
   16af6:	f002 fcbf 	bl	19478 <__aeabi_d2iz>
   16afa:	bd70      	pop	{r4, r5, r6, pc}
   16afc:	4b06      	ldr	r3, [pc, #24]	; (16b18 <__aeabi_d2uiz+0x38>)
   16afe:	2200      	movs	r2, #0
   16b00:	0020      	movs	r0, r4
   16b02:	0029      	movs	r1, r5
   16b04:	f002 f9a2 	bl	18e4c <__aeabi_dsub>
   16b08:	f002 fcb6 	bl	19478 <__aeabi_d2iz>
   16b0c:	2380      	movs	r3, #128	; 0x80
   16b0e:	061b      	lsls	r3, r3, #24
   16b10:	469c      	mov	ip, r3
   16b12:	4460      	add	r0, ip
   16b14:	e7f1      	b.n	16afa <__aeabi_d2uiz+0x1a>
   16b16:	46c0      	nop			; (mov r8, r8)
   16b18:	41e00000 	.word	0x41e00000

00016b1c <__aeabi_f2ulz>:
   16b1c:	b570      	push	{r4, r5, r6, lr}
   16b1e:	f002 fd59 	bl	195d4 <__aeabi_f2d>
   16b22:	2200      	movs	r2, #0
   16b24:	4b0b      	ldr	r3, [pc, #44]	; (16b54 <__aeabi_f2ulz+0x38>)
   16b26:	000d      	movs	r5, r1
   16b28:	0004      	movs	r4, r0
   16b2a:	f001 ff0f 	bl	1894c <__aeabi_dmul>
   16b2e:	f7ff ffd7 	bl	16ae0 <__aeabi_d2uiz>
   16b32:	0006      	movs	r6, r0
   16b34:	f002 fd16 	bl	19564 <__aeabi_ui2d>
   16b38:	2200      	movs	r2, #0
   16b3a:	4b07      	ldr	r3, [pc, #28]	; (16b58 <__aeabi_f2ulz+0x3c>)
   16b3c:	f001 ff06 	bl	1894c <__aeabi_dmul>
   16b40:	0002      	movs	r2, r0
   16b42:	000b      	movs	r3, r1
   16b44:	0020      	movs	r0, r4
   16b46:	0029      	movs	r1, r5
   16b48:	f002 f980 	bl	18e4c <__aeabi_dsub>
   16b4c:	f7ff ffc8 	bl	16ae0 <__aeabi_d2uiz>
   16b50:	0031      	movs	r1, r6
   16b52:	bd70      	pop	{r4, r5, r6, pc}
   16b54:	3df00000 	.word	0x3df00000
   16b58:	41f00000 	.word	0x41f00000

00016b5c <__udivmoddi4>:
   16b5c:	b5f0      	push	{r4, r5, r6, r7, lr}
   16b5e:	4657      	mov	r7, sl
   16b60:	464e      	mov	r6, r9
   16b62:	4645      	mov	r5, r8
   16b64:	46de      	mov	lr, fp
   16b66:	b5e0      	push	{r5, r6, r7, lr}
   16b68:	0004      	movs	r4, r0
   16b6a:	b083      	sub	sp, #12
   16b6c:	000d      	movs	r5, r1
   16b6e:	4692      	mov	sl, r2
   16b70:	4699      	mov	r9, r3
   16b72:	428b      	cmp	r3, r1
   16b74:	d82f      	bhi.n	16bd6 <__udivmoddi4+0x7a>
   16b76:	d02c      	beq.n	16bd2 <__udivmoddi4+0x76>
   16b78:	4649      	mov	r1, r9
   16b7a:	4650      	mov	r0, sl
   16b7c:	f002 fd9a 	bl	196b4 <__clzdi2>
   16b80:	0029      	movs	r1, r5
   16b82:	0006      	movs	r6, r0
   16b84:	0020      	movs	r0, r4
   16b86:	f002 fd95 	bl	196b4 <__clzdi2>
   16b8a:	1a33      	subs	r3, r6, r0
   16b8c:	4698      	mov	r8, r3
   16b8e:	3b20      	subs	r3, #32
   16b90:	469b      	mov	fp, r3
   16b92:	d500      	bpl.n	16b96 <__udivmoddi4+0x3a>
   16b94:	e074      	b.n	16c80 <__udivmoddi4+0x124>
   16b96:	4653      	mov	r3, sl
   16b98:	465a      	mov	r2, fp
   16b9a:	4093      	lsls	r3, r2
   16b9c:	001f      	movs	r7, r3
   16b9e:	4653      	mov	r3, sl
   16ba0:	4642      	mov	r2, r8
   16ba2:	4093      	lsls	r3, r2
   16ba4:	001e      	movs	r6, r3
   16ba6:	42af      	cmp	r7, r5
   16ba8:	d829      	bhi.n	16bfe <__udivmoddi4+0xa2>
   16baa:	d026      	beq.n	16bfa <__udivmoddi4+0x9e>
   16bac:	465b      	mov	r3, fp
   16bae:	1ba4      	subs	r4, r4, r6
   16bb0:	41bd      	sbcs	r5, r7
   16bb2:	2b00      	cmp	r3, #0
   16bb4:	da00      	bge.n	16bb8 <__udivmoddi4+0x5c>
   16bb6:	e079      	b.n	16cac <__udivmoddi4+0x150>
   16bb8:	2200      	movs	r2, #0
   16bba:	2300      	movs	r3, #0
   16bbc:	9200      	str	r2, [sp, #0]
   16bbe:	9301      	str	r3, [sp, #4]
   16bc0:	2301      	movs	r3, #1
   16bc2:	465a      	mov	r2, fp
   16bc4:	4093      	lsls	r3, r2
   16bc6:	9301      	str	r3, [sp, #4]
   16bc8:	2301      	movs	r3, #1
   16bca:	4642      	mov	r2, r8
   16bcc:	4093      	lsls	r3, r2
   16bce:	9300      	str	r3, [sp, #0]
   16bd0:	e019      	b.n	16c06 <__udivmoddi4+0xaa>
   16bd2:	4282      	cmp	r2, r0
   16bd4:	d9d0      	bls.n	16b78 <__udivmoddi4+0x1c>
   16bd6:	2200      	movs	r2, #0
   16bd8:	2300      	movs	r3, #0
   16bda:	9200      	str	r2, [sp, #0]
   16bdc:	9301      	str	r3, [sp, #4]
   16bde:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   16be0:	2b00      	cmp	r3, #0
   16be2:	d001      	beq.n	16be8 <__udivmoddi4+0x8c>
   16be4:	601c      	str	r4, [r3, #0]
   16be6:	605d      	str	r5, [r3, #4]
   16be8:	9800      	ldr	r0, [sp, #0]
   16bea:	9901      	ldr	r1, [sp, #4]
   16bec:	b003      	add	sp, #12
   16bee:	bc3c      	pop	{r2, r3, r4, r5}
   16bf0:	4690      	mov	r8, r2
   16bf2:	4699      	mov	r9, r3
   16bf4:	46a2      	mov	sl, r4
   16bf6:	46ab      	mov	fp, r5
   16bf8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   16bfa:	42a3      	cmp	r3, r4
   16bfc:	d9d6      	bls.n	16bac <__udivmoddi4+0x50>
   16bfe:	2200      	movs	r2, #0
   16c00:	2300      	movs	r3, #0
   16c02:	9200      	str	r2, [sp, #0]
   16c04:	9301      	str	r3, [sp, #4]
   16c06:	4643      	mov	r3, r8
   16c08:	2b00      	cmp	r3, #0
   16c0a:	d0e8      	beq.n	16bde <__udivmoddi4+0x82>
   16c0c:	07fb      	lsls	r3, r7, #31
   16c0e:	0872      	lsrs	r2, r6, #1
   16c10:	431a      	orrs	r2, r3
   16c12:	4646      	mov	r6, r8
   16c14:	087b      	lsrs	r3, r7, #1
   16c16:	e00e      	b.n	16c36 <__udivmoddi4+0xda>
   16c18:	42ab      	cmp	r3, r5
   16c1a:	d101      	bne.n	16c20 <__udivmoddi4+0xc4>
   16c1c:	42a2      	cmp	r2, r4
   16c1e:	d80c      	bhi.n	16c3a <__udivmoddi4+0xde>
   16c20:	1aa4      	subs	r4, r4, r2
   16c22:	419d      	sbcs	r5, r3
   16c24:	2001      	movs	r0, #1
   16c26:	1924      	adds	r4, r4, r4
   16c28:	416d      	adcs	r5, r5
   16c2a:	2100      	movs	r1, #0
   16c2c:	3e01      	subs	r6, #1
   16c2e:	1824      	adds	r4, r4, r0
   16c30:	414d      	adcs	r5, r1
   16c32:	2e00      	cmp	r6, #0
   16c34:	d006      	beq.n	16c44 <__udivmoddi4+0xe8>
   16c36:	42ab      	cmp	r3, r5
   16c38:	d9ee      	bls.n	16c18 <__udivmoddi4+0xbc>
   16c3a:	3e01      	subs	r6, #1
   16c3c:	1924      	adds	r4, r4, r4
   16c3e:	416d      	adcs	r5, r5
   16c40:	2e00      	cmp	r6, #0
   16c42:	d1f8      	bne.n	16c36 <__udivmoddi4+0xda>
   16c44:	465b      	mov	r3, fp
   16c46:	9800      	ldr	r0, [sp, #0]
   16c48:	9901      	ldr	r1, [sp, #4]
   16c4a:	1900      	adds	r0, r0, r4
   16c4c:	4169      	adcs	r1, r5
   16c4e:	2b00      	cmp	r3, #0
   16c50:	db22      	blt.n	16c98 <__udivmoddi4+0x13c>
   16c52:	002b      	movs	r3, r5
   16c54:	465a      	mov	r2, fp
   16c56:	40d3      	lsrs	r3, r2
   16c58:	002a      	movs	r2, r5
   16c5a:	4644      	mov	r4, r8
   16c5c:	40e2      	lsrs	r2, r4
   16c5e:	001c      	movs	r4, r3
   16c60:	465b      	mov	r3, fp
   16c62:	0015      	movs	r5, r2
   16c64:	2b00      	cmp	r3, #0
   16c66:	db2c      	blt.n	16cc2 <__udivmoddi4+0x166>
   16c68:	0026      	movs	r6, r4
   16c6a:	409e      	lsls	r6, r3
   16c6c:	0033      	movs	r3, r6
   16c6e:	0026      	movs	r6, r4
   16c70:	4647      	mov	r7, r8
   16c72:	40be      	lsls	r6, r7
   16c74:	0032      	movs	r2, r6
   16c76:	1a80      	subs	r0, r0, r2
   16c78:	4199      	sbcs	r1, r3
   16c7a:	9000      	str	r0, [sp, #0]
   16c7c:	9101      	str	r1, [sp, #4]
   16c7e:	e7ae      	b.n	16bde <__udivmoddi4+0x82>
   16c80:	4642      	mov	r2, r8
   16c82:	2320      	movs	r3, #32
   16c84:	1a9b      	subs	r3, r3, r2
   16c86:	4652      	mov	r2, sl
   16c88:	40da      	lsrs	r2, r3
   16c8a:	4641      	mov	r1, r8
   16c8c:	0013      	movs	r3, r2
   16c8e:	464a      	mov	r2, r9
   16c90:	408a      	lsls	r2, r1
   16c92:	0017      	movs	r7, r2
   16c94:	431f      	orrs	r7, r3
   16c96:	e782      	b.n	16b9e <__udivmoddi4+0x42>
   16c98:	4642      	mov	r2, r8
   16c9a:	2320      	movs	r3, #32
   16c9c:	1a9b      	subs	r3, r3, r2
   16c9e:	002a      	movs	r2, r5
   16ca0:	4646      	mov	r6, r8
   16ca2:	409a      	lsls	r2, r3
   16ca4:	0023      	movs	r3, r4
   16ca6:	40f3      	lsrs	r3, r6
   16ca8:	4313      	orrs	r3, r2
   16caa:	e7d5      	b.n	16c58 <__udivmoddi4+0xfc>
   16cac:	4642      	mov	r2, r8
   16cae:	2320      	movs	r3, #32
   16cb0:	2100      	movs	r1, #0
   16cb2:	1a9b      	subs	r3, r3, r2
   16cb4:	2200      	movs	r2, #0
   16cb6:	9100      	str	r1, [sp, #0]
   16cb8:	9201      	str	r2, [sp, #4]
   16cba:	2201      	movs	r2, #1
   16cbc:	40da      	lsrs	r2, r3
   16cbe:	9201      	str	r2, [sp, #4]
   16cc0:	e782      	b.n	16bc8 <__udivmoddi4+0x6c>
   16cc2:	4642      	mov	r2, r8
   16cc4:	2320      	movs	r3, #32
   16cc6:	0026      	movs	r6, r4
   16cc8:	1a9b      	subs	r3, r3, r2
   16cca:	40de      	lsrs	r6, r3
   16ccc:	002f      	movs	r7, r5
   16cce:	46b4      	mov	ip, r6
   16cd0:	4097      	lsls	r7, r2
   16cd2:	4666      	mov	r6, ip
   16cd4:	003b      	movs	r3, r7
   16cd6:	4333      	orrs	r3, r6
   16cd8:	e7c9      	b.n	16c6e <__udivmoddi4+0x112>
   16cda:	46c0      	nop			; (mov r8, r8)

00016cdc <__aeabi_fadd>:
   16cdc:	b5f0      	push	{r4, r5, r6, r7, lr}
   16cde:	46c6      	mov	lr, r8
   16ce0:	024e      	lsls	r6, r1, #9
   16ce2:	0247      	lsls	r7, r0, #9
   16ce4:	0a76      	lsrs	r6, r6, #9
   16ce6:	0a7b      	lsrs	r3, r7, #9
   16ce8:	0044      	lsls	r4, r0, #1
   16cea:	0fc5      	lsrs	r5, r0, #31
   16cec:	00f7      	lsls	r7, r6, #3
   16cee:	0048      	lsls	r0, r1, #1
   16cf0:	4698      	mov	r8, r3
   16cf2:	b500      	push	{lr}
   16cf4:	0e24      	lsrs	r4, r4, #24
   16cf6:	002a      	movs	r2, r5
   16cf8:	00db      	lsls	r3, r3, #3
   16cfa:	0e00      	lsrs	r0, r0, #24
   16cfc:	0fc9      	lsrs	r1, r1, #31
   16cfe:	46bc      	mov	ip, r7
   16d00:	428d      	cmp	r5, r1
   16d02:	d067      	beq.n	16dd4 <__aeabi_fadd+0xf8>
   16d04:	1a22      	subs	r2, r4, r0
   16d06:	2a00      	cmp	r2, #0
   16d08:	dc00      	bgt.n	16d0c <__aeabi_fadd+0x30>
   16d0a:	e0a5      	b.n	16e58 <__aeabi_fadd+0x17c>
   16d0c:	2800      	cmp	r0, #0
   16d0e:	d13a      	bne.n	16d86 <__aeabi_fadd+0xaa>
   16d10:	2f00      	cmp	r7, #0
   16d12:	d100      	bne.n	16d16 <__aeabi_fadd+0x3a>
   16d14:	e093      	b.n	16e3e <__aeabi_fadd+0x162>
   16d16:	1e51      	subs	r1, r2, #1
   16d18:	2900      	cmp	r1, #0
   16d1a:	d000      	beq.n	16d1e <__aeabi_fadd+0x42>
   16d1c:	e0bc      	b.n	16e98 <__aeabi_fadd+0x1bc>
   16d1e:	2401      	movs	r4, #1
   16d20:	1bdb      	subs	r3, r3, r7
   16d22:	015a      	lsls	r2, r3, #5
   16d24:	d546      	bpl.n	16db4 <__aeabi_fadd+0xd8>
   16d26:	019b      	lsls	r3, r3, #6
   16d28:	099e      	lsrs	r6, r3, #6
   16d2a:	0030      	movs	r0, r6
   16d2c:	f002 fca4 	bl	19678 <__clzsi2>
   16d30:	3805      	subs	r0, #5
   16d32:	4086      	lsls	r6, r0
   16d34:	4284      	cmp	r4, r0
   16d36:	dd00      	ble.n	16d3a <__aeabi_fadd+0x5e>
   16d38:	e09d      	b.n	16e76 <__aeabi_fadd+0x19a>
   16d3a:	1b04      	subs	r4, r0, r4
   16d3c:	0032      	movs	r2, r6
   16d3e:	2020      	movs	r0, #32
   16d40:	3401      	adds	r4, #1
   16d42:	40e2      	lsrs	r2, r4
   16d44:	1b04      	subs	r4, r0, r4
   16d46:	40a6      	lsls	r6, r4
   16d48:	0033      	movs	r3, r6
   16d4a:	1e5e      	subs	r6, r3, #1
   16d4c:	41b3      	sbcs	r3, r6
   16d4e:	2400      	movs	r4, #0
   16d50:	4313      	orrs	r3, r2
   16d52:	075a      	lsls	r2, r3, #29
   16d54:	d004      	beq.n	16d60 <__aeabi_fadd+0x84>
   16d56:	220f      	movs	r2, #15
   16d58:	401a      	ands	r2, r3
   16d5a:	2a04      	cmp	r2, #4
   16d5c:	d000      	beq.n	16d60 <__aeabi_fadd+0x84>
   16d5e:	3304      	adds	r3, #4
   16d60:	015a      	lsls	r2, r3, #5
   16d62:	d529      	bpl.n	16db8 <__aeabi_fadd+0xdc>
   16d64:	3401      	adds	r4, #1
   16d66:	2cff      	cmp	r4, #255	; 0xff
   16d68:	d100      	bne.n	16d6c <__aeabi_fadd+0x90>
   16d6a:	e081      	b.n	16e70 <__aeabi_fadd+0x194>
   16d6c:	002a      	movs	r2, r5
   16d6e:	019b      	lsls	r3, r3, #6
   16d70:	0a5b      	lsrs	r3, r3, #9
   16d72:	b2e4      	uxtb	r4, r4
   16d74:	025b      	lsls	r3, r3, #9
   16d76:	05e4      	lsls	r4, r4, #23
   16d78:	0a58      	lsrs	r0, r3, #9
   16d7a:	07d2      	lsls	r2, r2, #31
   16d7c:	4320      	orrs	r0, r4
   16d7e:	4310      	orrs	r0, r2
   16d80:	bc04      	pop	{r2}
   16d82:	4690      	mov	r8, r2
   16d84:	bdf0      	pop	{r4, r5, r6, r7, pc}
   16d86:	2cff      	cmp	r4, #255	; 0xff
   16d88:	d0e3      	beq.n	16d52 <__aeabi_fadd+0x76>
   16d8a:	2180      	movs	r1, #128	; 0x80
   16d8c:	0038      	movs	r0, r7
   16d8e:	04c9      	lsls	r1, r1, #19
   16d90:	4308      	orrs	r0, r1
   16d92:	4684      	mov	ip, r0
   16d94:	2a1b      	cmp	r2, #27
   16d96:	dd00      	ble.n	16d9a <__aeabi_fadd+0xbe>
   16d98:	e082      	b.n	16ea0 <__aeabi_fadd+0x1c4>
   16d9a:	2020      	movs	r0, #32
   16d9c:	4661      	mov	r1, ip
   16d9e:	40d1      	lsrs	r1, r2
   16da0:	1a82      	subs	r2, r0, r2
   16da2:	4660      	mov	r0, ip
   16da4:	4090      	lsls	r0, r2
   16da6:	0002      	movs	r2, r0
   16da8:	1e50      	subs	r0, r2, #1
   16daa:	4182      	sbcs	r2, r0
   16dac:	430a      	orrs	r2, r1
   16dae:	1a9b      	subs	r3, r3, r2
   16db0:	015a      	lsls	r2, r3, #5
   16db2:	d4b8      	bmi.n	16d26 <__aeabi_fadd+0x4a>
   16db4:	075a      	lsls	r2, r3, #29
   16db6:	d1ce      	bne.n	16d56 <__aeabi_fadd+0x7a>
   16db8:	08de      	lsrs	r6, r3, #3
   16dba:	002a      	movs	r2, r5
   16dbc:	2cff      	cmp	r4, #255	; 0xff
   16dbe:	d13a      	bne.n	16e36 <__aeabi_fadd+0x15a>
   16dc0:	2e00      	cmp	r6, #0
   16dc2:	d100      	bne.n	16dc6 <__aeabi_fadd+0xea>
   16dc4:	e0ae      	b.n	16f24 <__aeabi_fadd+0x248>
   16dc6:	2380      	movs	r3, #128	; 0x80
   16dc8:	03db      	lsls	r3, r3, #15
   16dca:	4333      	orrs	r3, r6
   16dcc:	025b      	lsls	r3, r3, #9
   16dce:	0a5b      	lsrs	r3, r3, #9
   16dd0:	24ff      	movs	r4, #255	; 0xff
   16dd2:	e7cf      	b.n	16d74 <__aeabi_fadd+0x98>
   16dd4:	1a21      	subs	r1, r4, r0
   16dd6:	2900      	cmp	r1, #0
   16dd8:	dd52      	ble.n	16e80 <__aeabi_fadd+0x1a4>
   16dda:	2800      	cmp	r0, #0
   16ddc:	d031      	beq.n	16e42 <__aeabi_fadd+0x166>
   16dde:	2cff      	cmp	r4, #255	; 0xff
   16de0:	d0b7      	beq.n	16d52 <__aeabi_fadd+0x76>
   16de2:	2080      	movs	r0, #128	; 0x80
   16de4:	003e      	movs	r6, r7
   16de6:	04c0      	lsls	r0, r0, #19
   16de8:	4306      	orrs	r6, r0
   16dea:	46b4      	mov	ip, r6
   16dec:	291b      	cmp	r1, #27
   16dee:	dd00      	ble.n	16df2 <__aeabi_fadd+0x116>
   16df0:	e0aa      	b.n	16f48 <__aeabi_fadd+0x26c>
   16df2:	2620      	movs	r6, #32
   16df4:	4660      	mov	r0, ip
   16df6:	40c8      	lsrs	r0, r1
   16df8:	1a71      	subs	r1, r6, r1
   16dfa:	4666      	mov	r6, ip
   16dfc:	408e      	lsls	r6, r1
   16dfe:	0031      	movs	r1, r6
   16e00:	1e4e      	subs	r6, r1, #1
   16e02:	41b1      	sbcs	r1, r6
   16e04:	4301      	orrs	r1, r0
   16e06:	185b      	adds	r3, r3, r1
   16e08:	0159      	lsls	r1, r3, #5
   16e0a:	d5d3      	bpl.n	16db4 <__aeabi_fadd+0xd8>
   16e0c:	3401      	adds	r4, #1
   16e0e:	2cff      	cmp	r4, #255	; 0xff
   16e10:	d100      	bne.n	16e14 <__aeabi_fadd+0x138>
   16e12:	e087      	b.n	16f24 <__aeabi_fadd+0x248>
   16e14:	2201      	movs	r2, #1
   16e16:	4978      	ldr	r1, [pc, #480]	; (16ff8 <__aeabi_fadd+0x31c>)
   16e18:	401a      	ands	r2, r3
   16e1a:	085b      	lsrs	r3, r3, #1
   16e1c:	400b      	ands	r3, r1
   16e1e:	4313      	orrs	r3, r2
   16e20:	e797      	b.n	16d52 <__aeabi_fadd+0x76>
   16e22:	2c00      	cmp	r4, #0
   16e24:	d000      	beq.n	16e28 <__aeabi_fadd+0x14c>
   16e26:	e0a7      	b.n	16f78 <__aeabi_fadd+0x29c>
   16e28:	2b00      	cmp	r3, #0
   16e2a:	d000      	beq.n	16e2e <__aeabi_fadd+0x152>
   16e2c:	e0b6      	b.n	16f9c <__aeabi_fadd+0x2c0>
   16e2e:	1e3b      	subs	r3, r7, #0
   16e30:	d162      	bne.n	16ef8 <__aeabi_fadd+0x21c>
   16e32:	2600      	movs	r6, #0
   16e34:	2200      	movs	r2, #0
   16e36:	0273      	lsls	r3, r6, #9
   16e38:	0a5b      	lsrs	r3, r3, #9
   16e3a:	b2e4      	uxtb	r4, r4
   16e3c:	e79a      	b.n	16d74 <__aeabi_fadd+0x98>
   16e3e:	0014      	movs	r4, r2
   16e40:	e787      	b.n	16d52 <__aeabi_fadd+0x76>
   16e42:	2f00      	cmp	r7, #0
   16e44:	d04d      	beq.n	16ee2 <__aeabi_fadd+0x206>
   16e46:	1e48      	subs	r0, r1, #1
   16e48:	2800      	cmp	r0, #0
   16e4a:	d157      	bne.n	16efc <__aeabi_fadd+0x220>
   16e4c:	4463      	add	r3, ip
   16e4e:	2401      	movs	r4, #1
   16e50:	015a      	lsls	r2, r3, #5
   16e52:	d5af      	bpl.n	16db4 <__aeabi_fadd+0xd8>
   16e54:	2402      	movs	r4, #2
   16e56:	e7dd      	b.n	16e14 <__aeabi_fadd+0x138>
   16e58:	2a00      	cmp	r2, #0
   16e5a:	d124      	bne.n	16ea6 <__aeabi_fadd+0x1ca>
   16e5c:	1c62      	adds	r2, r4, #1
   16e5e:	b2d2      	uxtb	r2, r2
   16e60:	2a01      	cmp	r2, #1
   16e62:	ddde      	ble.n	16e22 <__aeabi_fadd+0x146>
   16e64:	1bde      	subs	r6, r3, r7
   16e66:	0172      	lsls	r2, r6, #5
   16e68:	d535      	bpl.n	16ed6 <__aeabi_fadd+0x1fa>
   16e6a:	1afe      	subs	r6, r7, r3
   16e6c:	000d      	movs	r5, r1
   16e6e:	e75c      	b.n	16d2a <__aeabi_fadd+0x4e>
   16e70:	002a      	movs	r2, r5
   16e72:	2300      	movs	r3, #0
   16e74:	e77e      	b.n	16d74 <__aeabi_fadd+0x98>
   16e76:	0033      	movs	r3, r6
   16e78:	4a60      	ldr	r2, [pc, #384]	; (16ffc <__aeabi_fadd+0x320>)
   16e7a:	1a24      	subs	r4, r4, r0
   16e7c:	4013      	ands	r3, r2
   16e7e:	e768      	b.n	16d52 <__aeabi_fadd+0x76>
   16e80:	2900      	cmp	r1, #0
   16e82:	d163      	bne.n	16f4c <__aeabi_fadd+0x270>
   16e84:	1c61      	adds	r1, r4, #1
   16e86:	b2c8      	uxtb	r0, r1
   16e88:	2801      	cmp	r0, #1
   16e8a:	dd4e      	ble.n	16f2a <__aeabi_fadd+0x24e>
   16e8c:	29ff      	cmp	r1, #255	; 0xff
   16e8e:	d049      	beq.n	16f24 <__aeabi_fadd+0x248>
   16e90:	4463      	add	r3, ip
   16e92:	085b      	lsrs	r3, r3, #1
   16e94:	000c      	movs	r4, r1
   16e96:	e75c      	b.n	16d52 <__aeabi_fadd+0x76>
   16e98:	2aff      	cmp	r2, #255	; 0xff
   16e9a:	d041      	beq.n	16f20 <__aeabi_fadd+0x244>
   16e9c:	000a      	movs	r2, r1
   16e9e:	e779      	b.n	16d94 <__aeabi_fadd+0xb8>
   16ea0:	2201      	movs	r2, #1
   16ea2:	1a9b      	subs	r3, r3, r2
   16ea4:	e784      	b.n	16db0 <__aeabi_fadd+0xd4>
   16ea6:	2c00      	cmp	r4, #0
   16ea8:	d01d      	beq.n	16ee6 <__aeabi_fadd+0x20a>
   16eaa:	28ff      	cmp	r0, #255	; 0xff
   16eac:	d022      	beq.n	16ef4 <__aeabi_fadd+0x218>
   16eae:	2480      	movs	r4, #128	; 0x80
   16eb0:	04e4      	lsls	r4, r4, #19
   16eb2:	4252      	negs	r2, r2
   16eb4:	4323      	orrs	r3, r4
   16eb6:	2a1b      	cmp	r2, #27
   16eb8:	dd00      	ble.n	16ebc <__aeabi_fadd+0x1e0>
   16eba:	e08a      	b.n	16fd2 <__aeabi_fadd+0x2f6>
   16ebc:	001c      	movs	r4, r3
   16ebe:	2520      	movs	r5, #32
   16ec0:	40d4      	lsrs	r4, r2
   16ec2:	1aaa      	subs	r2, r5, r2
   16ec4:	4093      	lsls	r3, r2
   16ec6:	1e5a      	subs	r2, r3, #1
   16ec8:	4193      	sbcs	r3, r2
   16eca:	4323      	orrs	r3, r4
   16ecc:	4662      	mov	r2, ip
   16ece:	0004      	movs	r4, r0
   16ed0:	1ad3      	subs	r3, r2, r3
   16ed2:	000d      	movs	r5, r1
   16ed4:	e725      	b.n	16d22 <__aeabi_fadd+0x46>
   16ed6:	2e00      	cmp	r6, #0
   16ed8:	d000      	beq.n	16edc <__aeabi_fadd+0x200>
   16eda:	e726      	b.n	16d2a <__aeabi_fadd+0x4e>
   16edc:	2200      	movs	r2, #0
   16ede:	2400      	movs	r4, #0
   16ee0:	e7a9      	b.n	16e36 <__aeabi_fadd+0x15a>
   16ee2:	000c      	movs	r4, r1
   16ee4:	e735      	b.n	16d52 <__aeabi_fadd+0x76>
   16ee6:	2b00      	cmp	r3, #0
   16ee8:	d04d      	beq.n	16f86 <__aeabi_fadd+0x2aa>
   16eea:	43d2      	mvns	r2, r2
   16eec:	2a00      	cmp	r2, #0
   16eee:	d0ed      	beq.n	16ecc <__aeabi_fadd+0x1f0>
   16ef0:	28ff      	cmp	r0, #255	; 0xff
   16ef2:	d1e0      	bne.n	16eb6 <__aeabi_fadd+0x1da>
   16ef4:	4663      	mov	r3, ip
   16ef6:	24ff      	movs	r4, #255	; 0xff
   16ef8:	000d      	movs	r5, r1
   16efa:	e72a      	b.n	16d52 <__aeabi_fadd+0x76>
   16efc:	29ff      	cmp	r1, #255	; 0xff
   16efe:	d00f      	beq.n	16f20 <__aeabi_fadd+0x244>
   16f00:	0001      	movs	r1, r0
   16f02:	e773      	b.n	16dec <__aeabi_fadd+0x110>
   16f04:	2b00      	cmp	r3, #0
   16f06:	d061      	beq.n	16fcc <__aeabi_fadd+0x2f0>
   16f08:	24ff      	movs	r4, #255	; 0xff
   16f0a:	2f00      	cmp	r7, #0
   16f0c:	d100      	bne.n	16f10 <__aeabi_fadd+0x234>
   16f0e:	e720      	b.n	16d52 <__aeabi_fadd+0x76>
   16f10:	2280      	movs	r2, #128	; 0x80
   16f12:	4641      	mov	r1, r8
   16f14:	03d2      	lsls	r2, r2, #15
   16f16:	4211      	tst	r1, r2
   16f18:	d002      	beq.n	16f20 <__aeabi_fadd+0x244>
   16f1a:	4216      	tst	r6, r2
   16f1c:	d100      	bne.n	16f20 <__aeabi_fadd+0x244>
   16f1e:	003b      	movs	r3, r7
   16f20:	24ff      	movs	r4, #255	; 0xff
   16f22:	e716      	b.n	16d52 <__aeabi_fadd+0x76>
   16f24:	24ff      	movs	r4, #255	; 0xff
   16f26:	2300      	movs	r3, #0
   16f28:	e724      	b.n	16d74 <__aeabi_fadd+0x98>
   16f2a:	2c00      	cmp	r4, #0
   16f2c:	d1ea      	bne.n	16f04 <__aeabi_fadd+0x228>
   16f2e:	2b00      	cmp	r3, #0
   16f30:	d058      	beq.n	16fe4 <__aeabi_fadd+0x308>
   16f32:	2f00      	cmp	r7, #0
   16f34:	d100      	bne.n	16f38 <__aeabi_fadd+0x25c>
   16f36:	e70c      	b.n	16d52 <__aeabi_fadd+0x76>
   16f38:	4463      	add	r3, ip
   16f3a:	015a      	lsls	r2, r3, #5
   16f3c:	d400      	bmi.n	16f40 <__aeabi_fadd+0x264>
   16f3e:	e739      	b.n	16db4 <__aeabi_fadd+0xd8>
   16f40:	4a2e      	ldr	r2, [pc, #184]	; (16ffc <__aeabi_fadd+0x320>)
   16f42:	000c      	movs	r4, r1
   16f44:	4013      	ands	r3, r2
   16f46:	e704      	b.n	16d52 <__aeabi_fadd+0x76>
   16f48:	2101      	movs	r1, #1
   16f4a:	e75c      	b.n	16e06 <__aeabi_fadd+0x12a>
   16f4c:	2c00      	cmp	r4, #0
   16f4e:	d11e      	bne.n	16f8e <__aeabi_fadd+0x2b2>
   16f50:	2b00      	cmp	r3, #0
   16f52:	d040      	beq.n	16fd6 <__aeabi_fadd+0x2fa>
   16f54:	43c9      	mvns	r1, r1
   16f56:	2900      	cmp	r1, #0
   16f58:	d00b      	beq.n	16f72 <__aeabi_fadd+0x296>
   16f5a:	28ff      	cmp	r0, #255	; 0xff
   16f5c:	d036      	beq.n	16fcc <__aeabi_fadd+0x2f0>
   16f5e:	291b      	cmp	r1, #27
   16f60:	dc47      	bgt.n	16ff2 <__aeabi_fadd+0x316>
   16f62:	001c      	movs	r4, r3
   16f64:	2620      	movs	r6, #32
   16f66:	40cc      	lsrs	r4, r1
   16f68:	1a71      	subs	r1, r6, r1
   16f6a:	408b      	lsls	r3, r1
   16f6c:	1e59      	subs	r1, r3, #1
   16f6e:	418b      	sbcs	r3, r1
   16f70:	4323      	orrs	r3, r4
   16f72:	4463      	add	r3, ip
   16f74:	0004      	movs	r4, r0
   16f76:	e747      	b.n	16e08 <__aeabi_fadd+0x12c>
   16f78:	2b00      	cmp	r3, #0
   16f7a:	d118      	bne.n	16fae <__aeabi_fadd+0x2d2>
   16f7c:	1e3b      	subs	r3, r7, #0
   16f7e:	d02d      	beq.n	16fdc <__aeabi_fadd+0x300>
   16f80:	000d      	movs	r5, r1
   16f82:	24ff      	movs	r4, #255	; 0xff
   16f84:	e6e5      	b.n	16d52 <__aeabi_fadd+0x76>
   16f86:	003b      	movs	r3, r7
   16f88:	0004      	movs	r4, r0
   16f8a:	000d      	movs	r5, r1
   16f8c:	e6e1      	b.n	16d52 <__aeabi_fadd+0x76>
   16f8e:	28ff      	cmp	r0, #255	; 0xff
   16f90:	d01c      	beq.n	16fcc <__aeabi_fadd+0x2f0>
   16f92:	2480      	movs	r4, #128	; 0x80
   16f94:	04e4      	lsls	r4, r4, #19
   16f96:	4249      	negs	r1, r1
   16f98:	4323      	orrs	r3, r4
   16f9a:	e7e0      	b.n	16f5e <__aeabi_fadd+0x282>
   16f9c:	2f00      	cmp	r7, #0
   16f9e:	d100      	bne.n	16fa2 <__aeabi_fadd+0x2c6>
   16fa0:	e6d7      	b.n	16d52 <__aeabi_fadd+0x76>
   16fa2:	1bde      	subs	r6, r3, r7
   16fa4:	0172      	lsls	r2, r6, #5
   16fa6:	d51f      	bpl.n	16fe8 <__aeabi_fadd+0x30c>
   16fa8:	1afb      	subs	r3, r7, r3
   16faa:	000d      	movs	r5, r1
   16fac:	e6d1      	b.n	16d52 <__aeabi_fadd+0x76>
   16fae:	24ff      	movs	r4, #255	; 0xff
   16fb0:	2f00      	cmp	r7, #0
   16fb2:	d100      	bne.n	16fb6 <__aeabi_fadd+0x2da>
   16fb4:	e6cd      	b.n	16d52 <__aeabi_fadd+0x76>
   16fb6:	2280      	movs	r2, #128	; 0x80
   16fb8:	4640      	mov	r0, r8
   16fba:	03d2      	lsls	r2, r2, #15
   16fbc:	4210      	tst	r0, r2
   16fbe:	d0af      	beq.n	16f20 <__aeabi_fadd+0x244>
   16fc0:	4216      	tst	r6, r2
   16fc2:	d1ad      	bne.n	16f20 <__aeabi_fadd+0x244>
   16fc4:	003b      	movs	r3, r7
   16fc6:	000d      	movs	r5, r1
   16fc8:	24ff      	movs	r4, #255	; 0xff
   16fca:	e6c2      	b.n	16d52 <__aeabi_fadd+0x76>
   16fcc:	4663      	mov	r3, ip
   16fce:	24ff      	movs	r4, #255	; 0xff
   16fd0:	e6bf      	b.n	16d52 <__aeabi_fadd+0x76>
   16fd2:	2301      	movs	r3, #1
   16fd4:	e77a      	b.n	16ecc <__aeabi_fadd+0x1f0>
   16fd6:	003b      	movs	r3, r7
   16fd8:	0004      	movs	r4, r0
   16fda:	e6ba      	b.n	16d52 <__aeabi_fadd+0x76>
   16fdc:	2680      	movs	r6, #128	; 0x80
   16fde:	2200      	movs	r2, #0
   16fe0:	03f6      	lsls	r6, r6, #15
   16fe2:	e6f0      	b.n	16dc6 <__aeabi_fadd+0xea>
   16fe4:	003b      	movs	r3, r7
   16fe6:	e6b4      	b.n	16d52 <__aeabi_fadd+0x76>
   16fe8:	1e33      	subs	r3, r6, #0
   16fea:	d000      	beq.n	16fee <__aeabi_fadd+0x312>
   16fec:	e6e2      	b.n	16db4 <__aeabi_fadd+0xd8>
   16fee:	2200      	movs	r2, #0
   16ff0:	e721      	b.n	16e36 <__aeabi_fadd+0x15a>
   16ff2:	2301      	movs	r3, #1
   16ff4:	e7bd      	b.n	16f72 <__aeabi_fadd+0x296>
   16ff6:	46c0      	nop			; (mov r8, r8)
   16ff8:	7dffffff 	.word	0x7dffffff
   16ffc:	fbffffff 	.word	0xfbffffff

00017000 <__aeabi_fdiv>:
   17000:	b5f0      	push	{r4, r5, r6, r7, lr}
   17002:	4657      	mov	r7, sl
   17004:	464e      	mov	r6, r9
   17006:	46de      	mov	lr, fp
   17008:	4645      	mov	r5, r8
   1700a:	b5e0      	push	{r5, r6, r7, lr}
   1700c:	0244      	lsls	r4, r0, #9
   1700e:	0043      	lsls	r3, r0, #1
   17010:	0fc6      	lsrs	r6, r0, #31
   17012:	b083      	sub	sp, #12
   17014:	1c0f      	adds	r7, r1, #0
   17016:	0a64      	lsrs	r4, r4, #9
   17018:	0e1b      	lsrs	r3, r3, #24
   1701a:	46b2      	mov	sl, r6
   1701c:	d053      	beq.n	170c6 <__aeabi_fdiv+0xc6>
   1701e:	2bff      	cmp	r3, #255	; 0xff
   17020:	d027      	beq.n	17072 <__aeabi_fdiv+0x72>
   17022:	2280      	movs	r2, #128	; 0x80
   17024:	00e4      	lsls	r4, r4, #3
   17026:	04d2      	lsls	r2, r2, #19
   17028:	4314      	orrs	r4, r2
   1702a:	227f      	movs	r2, #127	; 0x7f
   1702c:	4252      	negs	r2, r2
   1702e:	4690      	mov	r8, r2
   17030:	4498      	add	r8, r3
   17032:	2300      	movs	r3, #0
   17034:	4699      	mov	r9, r3
   17036:	469b      	mov	fp, r3
   17038:	027d      	lsls	r5, r7, #9
   1703a:	0078      	lsls	r0, r7, #1
   1703c:	0ffb      	lsrs	r3, r7, #31
   1703e:	0a6d      	lsrs	r5, r5, #9
   17040:	0e00      	lsrs	r0, r0, #24
   17042:	9300      	str	r3, [sp, #0]
   17044:	d024      	beq.n	17090 <__aeabi_fdiv+0x90>
   17046:	28ff      	cmp	r0, #255	; 0xff
   17048:	d046      	beq.n	170d8 <__aeabi_fdiv+0xd8>
   1704a:	2380      	movs	r3, #128	; 0x80
   1704c:	2100      	movs	r1, #0
   1704e:	00ed      	lsls	r5, r5, #3
   17050:	04db      	lsls	r3, r3, #19
   17052:	431d      	orrs	r5, r3
   17054:	387f      	subs	r0, #127	; 0x7f
   17056:	4647      	mov	r7, r8
   17058:	1a38      	subs	r0, r7, r0
   1705a:	464f      	mov	r7, r9
   1705c:	430f      	orrs	r7, r1
   1705e:	00bf      	lsls	r7, r7, #2
   17060:	46b9      	mov	r9, r7
   17062:	0033      	movs	r3, r6
   17064:	9a00      	ldr	r2, [sp, #0]
   17066:	4f87      	ldr	r7, [pc, #540]	; (17284 <__aeabi_fdiv+0x284>)
   17068:	4053      	eors	r3, r2
   1706a:	464a      	mov	r2, r9
   1706c:	58ba      	ldr	r2, [r7, r2]
   1706e:	9301      	str	r3, [sp, #4]
   17070:	4697      	mov	pc, r2
   17072:	2c00      	cmp	r4, #0
   17074:	d14e      	bne.n	17114 <__aeabi_fdiv+0x114>
   17076:	2308      	movs	r3, #8
   17078:	4699      	mov	r9, r3
   1707a:	33f7      	adds	r3, #247	; 0xf7
   1707c:	4698      	mov	r8, r3
   1707e:	3bfd      	subs	r3, #253	; 0xfd
   17080:	469b      	mov	fp, r3
   17082:	027d      	lsls	r5, r7, #9
   17084:	0078      	lsls	r0, r7, #1
   17086:	0ffb      	lsrs	r3, r7, #31
   17088:	0a6d      	lsrs	r5, r5, #9
   1708a:	0e00      	lsrs	r0, r0, #24
   1708c:	9300      	str	r3, [sp, #0]
   1708e:	d1da      	bne.n	17046 <__aeabi_fdiv+0x46>
   17090:	2d00      	cmp	r5, #0
   17092:	d126      	bne.n	170e2 <__aeabi_fdiv+0xe2>
   17094:	2000      	movs	r0, #0
   17096:	2101      	movs	r1, #1
   17098:	0033      	movs	r3, r6
   1709a:	9a00      	ldr	r2, [sp, #0]
   1709c:	4f7a      	ldr	r7, [pc, #488]	; (17288 <__aeabi_fdiv+0x288>)
   1709e:	4053      	eors	r3, r2
   170a0:	4642      	mov	r2, r8
   170a2:	1a10      	subs	r0, r2, r0
   170a4:	464a      	mov	r2, r9
   170a6:	430a      	orrs	r2, r1
   170a8:	0092      	lsls	r2, r2, #2
   170aa:	58ba      	ldr	r2, [r7, r2]
   170ac:	001d      	movs	r5, r3
   170ae:	4697      	mov	pc, r2
   170b0:	9b00      	ldr	r3, [sp, #0]
   170b2:	002c      	movs	r4, r5
   170b4:	469a      	mov	sl, r3
   170b6:	468b      	mov	fp, r1
   170b8:	465b      	mov	r3, fp
   170ba:	2b02      	cmp	r3, #2
   170bc:	d131      	bne.n	17122 <__aeabi_fdiv+0x122>
   170be:	4653      	mov	r3, sl
   170c0:	21ff      	movs	r1, #255	; 0xff
   170c2:	2400      	movs	r4, #0
   170c4:	e038      	b.n	17138 <__aeabi_fdiv+0x138>
   170c6:	2c00      	cmp	r4, #0
   170c8:	d117      	bne.n	170fa <__aeabi_fdiv+0xfa>
   170ca:	2304      	movs	r3, #4
   170cc:	4699      	mov	r9, r3
   170ce:	2300      	movs	r3, #0
   170d0:	4698      	mov	r8, r3
   170d2:	3301      	adds	r3, #1
   170d4:	469b      	mov	fp, r3
   170d6:	e7af      	b.n	17038 <__aeabi_fdiv+0x38>
   170d8:	20ff      	movs	r0, #255	; 0xff
   170da:	2d00      	cmp	r5, #0
   170dc:	d10b      	bne.n	170f6 <__aeabi_fdiv+0xf6>
   170de:	2102      	movs	r1, #2
   170e0:	e7da      	b.n	17098 <__aeabi_fdiv+0x98>
   170e2:	0028      	movs	r0, r5
   170e4:	f002 fac8 	bl	19678 <__clzsi2>
   170e8:	1f43      	subs	r3, r0, #5
   170ea:	409d      	lsls	r5, r3
   170ec:	2376      	movs	r3, #118	; 0x76
   170ee:	425b      	negs	r3, r3
   170f0:	1a18      	subs	r0, r3, r0
   170f2:	2100      	movs	r1, #0
   170f4:	e7af      	b.n	17056 <__aeabi_fdiv+0x56>
   170f6:	2103      	movs	r1, #3
   170f8:	e7ad      	b.n	17056 <__aeabi_fdiv+0x56>
   170fa:	0020      	movs	r0, r4
   170fc:	f002 fabc 	bl	19678 <__clzsi2>
   17100:	1f43      	subs	r3, r0, #5
   17102:	409c      	lsls	r4, r3
   17104:	2376      	movs	r3, #118	; 0x76
   17106:	425b      	negs	r3, r3
   17108:	1a1b      	subs	r3, r3, r0
   1710a:	4698      	mov	r8, r3
   1710c:	2300      	movs	r3, #0
   1710e:	4699      	mov	r9, r3
   17110:	469b      	mov	fp, r3
   17112:	e791      	b.n	17038 <__aeabi_fdiv+0x38>
   17114:	230c      	movs	r3, #12
   17116:	4699      	mov	r9, r3
   17118:	33f3      	adds	r3, #243	; 0xf3
   1711a:	4698      	mov	r8, r3
   1711c:	3bfc      	subs	r3, #252	; 0xfc
   1711e:	469b      	mov	fp, r3
   17120:	e78a      	b.n	17038 <__aeabi_fdiv+0x38>
   17122:	2b03      	cmp	r3, #3
   17124:	d100      	bne.n	17128 <__aeabi_fdiv+0x128>
   17126:	e0a5      	b.n	17274 <__aeabi_fdiv+0x274>
   17128:	4655      	mov	r5, sl
   1712a:	2b01      	cmp	r3, #1
   1712c:	d000      	beq.n	17130 <__aeabi_fdiv+0x130>
   1712e:	e081      	b.n	17234 <__aeabi_fdiv+0x234>
   17130:	2301      	movs	r3, #1
   17132:	2100      	movs	r1, #0
   17134:	2400      	movs	r4, #0
   17136:	402b      	ands	r3, r5
   17138:	0264      	lsls	r4, r4, #9
   1713a:	05c9      	lsls	r1, r1, #23
   1713c:	0a60      	lsrs	r0, r4, #9
   1713e:	07db      	lsls	r3, r3, #31
   17140:	4308      	orrs	r0, r1
   17142:	4318      	orrs	r0, r3
   17144:	b003      	add	sp, #12
   17146:	bc3c      	pop	{r2, r3, r4, r5}
   17148:	4690      	mov	r8, r2
   1714a:	4699      	mov	r9, r3
   1714c:	46a2      	mov	sl, r4
   1714e:	46ab      	mov	fp, r5
   17150:	bdf0      	pop	{r4, r5, r6, r7, pc}
   17152:	2480      	movs	r4, #128	; 0x80
   17154:	2300      	movs	r3, #0
   17156:	03e4      	lsls	r4, r4, #15
   17158:	21ff      	movs	r1, #255	; 0xff
   1715a:	e7ed      	b.n	17138 <__aeabi_fdiv+0x138>
   1715c:	21ff      	movs	r1, #255	; 0xff
   1715e:	2400      	movs	r4, #0
   17160:	e7ea      	b.n	17138 <__aeabi_fdiv+0x138>
   17162:	2301      	movs	r3, #1
   17164:	1a59      	subs	r1, r3, r1
   17166:	291b      	cmp	r1, #27
   17168:	dd66      	ble.n	17238 <__aeabi_fdiv+0x238>
   1716a:	9a01      	ldr	r2, [sp, #4]
   1716c:	4013      	ands	r3, r2
   1716e:	2100      	movs	r1, #0
   17170:	2400      	movs	r4, #0
   17172:	e7e1      	b.n	17138 <__aeabi_fdiv+0x138>
   17174:	2380      	movs	r3, #128	; 0x80
   17176:	03db      	lsls	r3, r3, #15
   17178:	421c      	tst	r4, r3
   1717a:	d038      	beq.n	171ee <__aeabi_fdiv+0x1ee>
   1717c:	421d      	tst	r5, r3
   1717e:	d051      	beq.n	17224 <__aeabi_fdiv+0x224>
   17180:	431c      	orrs	r4, r3
   17182:	0264      	lsls	r4, r4, #9
   17184:	0a64      	lsrs	r4, r4, #9
   17186:	0033      	movs	r3, r6
   17188:	21ff      	movs	r1, #255	; 0xff
   1718a:	e7d5      	b.n	17138 <__aeabi_fdiv+0x138>
   1718c:	0163      	lsls	r3, r4, #5
   1718e:	016c      	lsls	r4, r5, #5
   17190:	42a3      	cmp	r3, r4
   17192:	d23b      	bcs.n	1720c <__aeabi_fdiv+0x20c>
   17194:	261b      	movs	r6, #27
   17196:	2100      	movs	r1, #0
   17198:	3801      	subs	r0, #1
   1719a:	2501      	movs	r5, #1
   1719c:	001f      	movs	r7, r3
   1719e:	0049      	lsls	r1, r1, #1
   171a0:	005b      	lsls	r3, r3, #1
   171a2:	2f00      	cmp	r7, #0
   171a4:	db01      	blt.n	171aa <__aeabi_fdiv+0x1aa>
   171a6:	429c      	cmp	r4, r3
   171a8:	d801      	bhi.n	171ae <__aeabi_fdiv+0x1ae>
   171aa:	1b1b      	subs	r3, r3, r4
   171ac:	4329      	orrs	r1, r5
   171ae:	3e01      	subs	r6, #1
   171b0:	2e00      	cmp	r6, #0
   171b2:	d1f3      	bne.n	1719c <__aeabi_fdiv+0x19c>
   171b4:	001c      	movs	r4, r3
   171b6:	1e63      	subs	r3, r4, #1
   171b8:	419c      	sbcs	r4, r3
   171ba:	430c      	orrs	r4, r1
   171bc:	0001      	movs	r1, r0
   171be:	317f      	adds	r1, #127	; 0x7f
   171c0:	2900      	cmp	r1, #0
   171c2:	ddce      	ble.n	17162 <__aeabi_fdiv+0x162>
   171c4:	0763      	lsls	r3, r4, #29
   171c6:	d004      	beq.n	171d2 <__aeabi_fdiv+0x1d2>
   171c8:	230f      	movs	r3, #15
   171ca:	4023      	ands	r3, r4
   171cc:	2b04      	cmp	r3, #4
   171ce:	d000      	beq.n	171d2 <__aeabi_fdiv+0x1d2>
   171d0:	3404      	adds	r4, #4
   171d2:	0123      	lsls	r3, r4, #4
   171d4:	d503      	bpl.n	171de <__aeabi_fdiv+0x1de>
   171d6:	0001      	movs	r1, r0
   171d8:	4b2c      	ldr	r3, [pc, #176]	; (1728c <__aeabi_fdiv+0x28c>)
   171da:	3180      	adds	r1, #128	; 0x80
   171dc:	401c      	ands	r4, r3
   171de:	29fe      	cmp	r1, #254	; 0xfe
   171e0:	dd0d      	ble.n	171fe <__aeabi_fdiv+0x1fe>
   171e2:	2301      	movs	r3, #1
   171e4:	9a01      	ldr	r2, [sp, #4]
   171e6:	21ff      	movs	r1, #255	; 0xff
   171e8:	4013      	ands	r3, r2
   171ea:	2400      	movs	r4, #0
   171ec:	e7a4      	b.n	17138 <__aeabi_fdiv+0x138>
   171ee:	2380      	movs	r3, #128	; 0x80
   171f0:	03db      	lsls	r3, r3, #15
   171f2:	431c      	orrs	r4, r3
   171f4:	0264      	lsls	r4, r4, #9
   171f6:	0a64      	lsrs	r4, r4, #9
   171f8:	0033      	movs	r3, r6
   171fa:	21ff      	movs	r1, #255	; 0xff
   171fc:	e79c      	b.n	17138 <__aeabi_fdiv+0x138>
   171fe:	2301      	movs	r3, #1
   17200:	9a01      	ldr	r2, [sp, #4]
   17202:	01a4      	lsls	r4, r4, #6
   17204:	0a64      	lsrs	r4, r4, #9
   17206:	b2c9      	uxtb	r1, r1
   17208:	4013      	ands	r3, r2
   1720a:	e795      	b.n	17138 <__aeabi_fdiv+0x138>
   1720c:	1b1b      	subs	r3, r3, r4
   1720e:	261a      	movs	r6, #26
   17210:	2101      	movs	r1, #1
   17212:	e7c2      	b.n	1719a <__aeabi_fdiv+0x19a>
   17214:	9b00      	ldr	r3, [sp, #0]
   17216:	468b      	mov	fp, r1
   17218:	469a      	mov	sl, r3
   1721a:	2400      	movs	r4, #0
   1721c:	e74c      	b.n	170b8 <__aeabi_fdiv+0xb8>
   1721e:	0263      	lsls	r3, r4, #9
   17220:	d5e5      	bpl.n	171ee <__aeabi_fdiv+0x1ee>
   17222:	2500      	movs	r5, #0
   17224:	2480      	movs	r4, #128	; 0x80
   17226:	03e4      	lsls	r4, r4, #15
   17228:	432c      	orrs	r4, r5
   1722a:	0264      	lsls	r4, r4, #9
   1722c:	0a64      	lsrs	r4, r4, #9
   1722e:	9b00      	ldr	r3, [sp, #0]
   17230:	21ff      	movs	r1, #255	; 0xff
   17232:	e781      	b.n	17138 <__aeabi_fdiv+0x138>
   17234:	9501      	str	r5, [sp, #4]
   17236:	e7c1      	b.n	171bc <__aeabi_fdiv+0x1bc>
   17238:	0023      	movs	r3, r4
   1723a:	2020      	movs	r0, #32
   1723c:	40cb      	lsrs	r3, r1
   1723e:	1a41      	subs	r1, r0, r1
   17240:	408c      	lsls	r4, r1
   17242:	1e61      	subs	r1, r4, #1
   17244:	418c      	sbcs	r4, r1
   17246:	431c      	orrs	r4, r3
   17248:	0763      	lsls	r3, r4, #29
   1724a:	d004      	beq.n	17256 <__aeabi_fdiv+0x256>
   1724c:	230f      	movs	r3, #15
   1724e:	4023      	ands	r3, r4
   17250:	2b04      	cmp	r3, #4
   17252:	d000      	beq.n	17256 <__aeabi_fdiv+0x256>
   17254:	3404      	adds	r4, #4
   17256:	0163      	lsls	r3, r4, #5
   17258:	d505      	bpl.n	17266 <__aeabi_fdiv+0x266>
   1725a:	2301      	movs	r3, #1
   1725c:	9a01      	ldr	r2, [sp, #4]
   1725e:	2101      	movs	r1, #1
   17260:	4013      	ands	r3, r2
   17262:	2400      	movs	r4, #0
   17264:	e768      	b.n	17138 <__aeabi_fdiv+0x138>
   17266:	2301      	movs	r3, #1
   17268:	9a01      	ldr	r2, [sp, #4]
   1726a:	01a4      	lsls	r4, r4, #6
   1726c:	0a64      	lsrs	r4, r4, #9
   1726e:	4013      	ands	r3, r2
   17270:	2100      	movs	r1, #0
   17272:	e761      	b.n	17138 <__aeabi_fdiv+0x138>
   17274:	2380      	movs	r3, #128	; 0x80
   17276:	03db      	lsls	r3, r3, #15
   17278:	431c      	orrs	r4, r3
   1727a:	0264      	lsls	r4, r4, #9
   1727c:	0a64      	lsrs	r4, r4, #9
   1727e:	4653      	mov	r3, sl
   17280:	21ff      	movs	r1, #255	; 0xff
   17282:	e759      	b.n	17138 <__aeabi_fdiv+0x138>
   17284:	00020434 	.word	0x00020434
   17288:	00020474 	.word	0x00020474
   1728c:	f7ffffff 	.word	0xf7ffffff

00017290 <__eqsf2>:
   17290:	b570      	push	{r4, r5, r6, lr}
   17292:	0042      	lsls	r2, r0, #1
   17294:	0245      	lsls	r5, r0, #9
   17296:	024e      	lsls	r6, r1, #9
   17298:	004c      	lsls	r4, r1, #1
   1729a:	0fc3      	lsrs	r3, r0, #31
   1729c:	0a6d      	lsrs	r5, r5, #9
   1729e:	0e12      	lsrs	r2, r2, #24
   172a0:	0a76      	lsrs	r6, r6, #9
   172a2:	0e24      	lsrs	r4, r4, #24
   172a4:	0fc9      	lsrs	r1, r1, #31
   172a6:	2001      	movs	r0, #1
   172a8:	2aff      	cmp	r2, #255	; 0xff
   172aa:	d006      	beq.n	172ba <__eqsf2+0x2a>
   172ac:	2cff      	cmp	r4, #255	; 0xff
   172ae:	d003      	beq.n	172b8 <__eqsf2+0x28>
   172b0:	42a2      	cmp	r2, r4
   172b2:	d101      	bne.n	172b8 <__eqsf2+0x28>
   172b4:	42b5      	cmp	r5, r6
   172b6:	d006      	beq.n	172c6 <__eqsf2+0x36>
   172b8:	bd70      	pop	{r4, r5, r6, pc}
   172ba:	2d00      	cmp	r5, #0
   172bc:	d1fc      	bne.n	172b8 <__eqsf2+0x28>
   172be:	2cff      	cmp	r4, #255	; 0xff
   172c0:	d1fa      	bne.n	172b8 <__eqsf2+0x28>
   172c2:	2e00      	cmp	r6, #0
   172c4:	d1f8      	bne.n	172b8 <__eqsf2+0x28>
   172c6:	428b      	cmp	r3, r1
   172c8:	d006      	beq.n	172d8 <__eqsf2+0x48>
   172ca:	2001      	movs	r0, #1
   172cc:	2a00      	cmp	r2, #0
   172ce:	d1f3      	bne.n	172b8 <__eqsf2+0x28>
   172d0:	0028      	movs	r0, r5
   172d2:	1e45      	subs	r5, r0, #1
   172d4:	41a8      	sbcs	r0, r5
   172d6:	e7ef      	b.n	172b8 <__eqsf2+0x28>
   172d8:	2000      	movs	r0, #0
   172da:	e7ed      	b.n	172b8 <__eqsf2+0x28>

000172dc <__gesf2>:
   172dc:	b5f0      	push	{r4, r5, r6, r7, lr}
   172de:	0042      	lsls	r2, r0, #1
   172e0:	0245      	lsls	r5, r0, #9
   172e2:	024c      	lsls	r4, r1, #9
   172e4:	0fc3      	lsrs	r3, r0, #31
   172e6:	0048      	lsls	r0, r1, #1
   172e8:	0a6d      	lsrs	r5, r5, #9
   172ea:	0e12      	lsrs	r2, r2, #24
   172ec:	0a64      	lsrs	r4, r4, #9
   172ee:	0e00      	lsrs	r0, r0, #24
   172f0:	0fc9      	lsrs	r1, r1, #31
   172f2:	2aff      	cmp	r2, #255	; 0xff
   172f4:	d01e      	beq.n	17334 <__gesf2+0x58>
   172f6:	28ff      	cmp	r0, #255	; 0xff
   172f8:	d021      	beq.n	1733e <__gesf2+0x62>
   172fa:	2a00      	cmp	r2, #0
   172fc:	d10a      	bne.n	17314 <__gesf2+0x38>
   172fe:	426e      	negs	r6, r5
   17300:	416e      	adcs	r6, r5
   17302:	b2f6      	uxtb	r6, r6
   17304:	2800      	cmp	r0, #0
   17306:	d10f      	bne.n	17328 <__gesf2+0x4c>
   17308:	2c00      	cmp	r4, #0
   1730a:	d10d      	bne.n	17328 <__gesf2+0x4c>
   1730c:	2000      	movs	r0, #0
   1730e:	2d00      	cmp	r5, #0
   17310:	d009      	beq.n	17326 <__gesf2+0x4a>
   17312:	e005      	b.n	17320 <__gesf2+0x44>
   17314:	2800      	cmp	r0, #0
   17316:	d101      	bne.n	1731c <__gesf2+0x40>
   17318:	2c00      	cmp	r4, #0
   1731a:	d001      	beq.n	17320 <__gesf2+0x44>
   1731c:	428b      	cmp	r3, r1
   1731e:	d011      	beq.n	17344 <__gesf2+0x68>
   17320:	2101      	movs	r1, #1
   17322:	4258      	negs	r0, r3
   17324:	4308      	orrs	r0, r1
   17326:	bdf0      	pop	{r4, r5, r6, r7, pc}
   17328:	2e00      	cmp	r6, #0
   1732a:	d0f7      	beq.n	1731c <__gesf2+0x40>
   1732c:	2001      	movs	r0, #1
   1732e:	3901      	subs	r1, #1
   17330:	4308      	orrs	r0, r1
   17332:	e7f8      	b.n	17326 <__gesf2+0x4a>
   17334:	2d00      	cmp	r5, #0
   17336:	d0de      	beq.n	172f6 <__gesf2+0x1a>
   17338:	2002      	movs	r0, #2
   1733a:	4240      	negs	r0, r0
   1733c:	e7f3      	b.n	17326 <__gesf2+0x4a>
   1733e:	2c00      	cmp	r4, #0
   17340:	d0db      	beq.n	172fa <__gesf2+0x1e>
   17342:	e7f9      	b.n	17338 <__gesf2+0x5c>
   17344:	4282      	cmp	r2, r0
   17346:	dceb      	bgt.n	17320 <__gesf2+0x44>
   17348:	db04      	blt.n	17354 <__gesf2+0x78>
   1734a:	42a5      	cmp	r5, r4
   1734c:	d8e8      	bhi.n	17320 <__gesf2+0x44>
   1734e:	2000      	movs	r0, #0
   17350:	42a5      	cmp	r5, r4
   17352:	d2e8      	bcs.n	17326 <__gesf2+0x4a>
   17354:	2101      	movs	r1, #1
   17356:	1e58      	subs	r0, r3, #1
   17358:	4308      	orrs	r0, r1
   1735a:	e7e4      	b.n	17326 <__gesf2+0x4a>

0001735c <__lesf2>:
   1735c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1735e:	0042      	lsls	r2, r0, #1
   17360:	024d      	lsls	r5, r1, #9
   17362:	004c      	lsls	r4, r1, #1
   17364:	0246      	lsls	r6, r0, #9
   17366:	0a76      	lsrs	r6, r6, #9
   17368:	0e12      	lsrs	r2, r2, #24
   1736a:	0fc3      	lsrs	r3, r0, #31
   1736c:	0a6d      	lsrs	r5, r5, #9
   1736e:	0e24      	lsrs	r4, r4, #24
   17370:	0fc9      	lsrs	r1, r1, #31
   17372:	2aff      	cmp	r2, #255	; 0xff
   17374:	d016      	beq.n	173a4 <__lesf2+0x48>
   17376:	2cff      	cmp	r4, #255	; 0xff
   17378:	d018      	beq.n	173ac <__lesf2+0x50>
   1737a:	2a00      	cmp	r2, #0
   1737c:	d10a      	bne.n	17394 <__lesf2+0x38>
   1737e:	4270      	negs	r0, r6
   17380:	4170      	adcs	r0, r6
   17382:	b2c0      	uxtb	r0, r0
   17384:	2c00      	cmp	r4, #0
   17386:	d015      	beq.n	173b4 <__lesf2+0x58>
   17388:	2800      	cmp	r0, #0
   1738a:	d005      	beq.n	17398 <__lesf2+0x3c>
   1738c:	2001      	movs	r0, #1
   1738e:	3901      	subs	r1, #1
   17390:	4308      	orrs	r0, r1
   17392:	bdf0      	pop	{r4, r5, r6, r7, pc}
   17394:	2c00      	cmp	r4, #0
   17396:	d013      	beq.n	173c0 <__lesf2+0x64>
   17398:	4299      	cmp	r1, r3
   1739a:	d014      	beq.n	173c6 <__lesf2+0x6a>
   1739c:	2001      	movs	r0, #1
   1739e:	425b      	negs	r3, r3
   173a0:	4318      	orrs	r0, r3
   173a2:	e7f6      	b.n	17392 <__lesf2+0x36>
   173a4:	2002      	movs	r0, #2
   173a6:	2e00      	cmp	r6, #0
   173a8:	d1f3      	bne.n	17392 <__lesf2+0x36>
   173aa:	e7e4      	b.n	17376 <__lesf2+0x1a>
   173ac:	2002      	movs	r0, #2
   173ae:	2d00      	cmp	r5, #0
   173b0:	d1ef      	bne.n	17392 <__lesf2+0x36>
   173b2:	e7e2      	b.n	1737a <__lesf2+0x1e>
   173b4:	2d00      	cmp	r5, #0
   173b6:	d1e7      	bne.n	17388 <__lesf2+0x2c>
   173b8:	2000      	movs	r0, #0
   173ba:	2e00      	cmp	r6, #0
   173bc:	d0e9      	beq.n	17392 <__lesf2+0x36>
   173be:	e7ed      	b.n	1739c <__lesf2+0x40>
   173c0:	2d00      	cmp	r5, #0
   173c2:	d1e9      	bne.n	17398 <__lesf2+0x3c>
   173c4:	e7ea      	b.n	1739c <__lesf2+0x40>
   173c6:	42a2      	cmp	r2, r4
   173c8:	dc06      	bgt.n	173d8 <__lesf2+0x7c>
   173ca:	dbdf      	blt.n	1738c <__lesf2+0x30>
   173cc:	42ae      	cmp	r6, r5
   173ce:	d803      	bhi.n	173d8 <__lesf2+0x7c>
   173d0:	2000      	movs	r0, #0
   173d2:	42ae      	cmp	r6, r5
   173d4:	d3da      	bcc.n	1738c <__lesf2+0x30>
   173d6:	e7dc      	b.n	17392 <__lesf2+0x36>
   173d8:	2001      	movs	r0, #1
   173da:	4249      	negs	r1, r1
   173dc:	4308      	orrs	r0, r1
   173de:	e7d8      	b.n	17392 <__lesf2+0x36>

000173e0 <__aeabi_fmul>:
   173e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   173e2:	4657      	mov	r7, sl
   173e4:	464e      	mov	r6, r9
   173e6:	4645      	mov	r5, r8
   173e8:	46de      	mov	lr, fp
   173ea:	b5e0      	push	{r5, r6, r7, lr}
   173ec:	0247      	lsls	r7, r0, #9
   173ee:	0046      	lsls	r6, r0, #1
   173f0:	4688      	mov	r8, r1
   173f2:	0a7f      	lsrs	r7, r7, #9
   173f4:	0e36      	lsrs	r6, r6, #24
   173f6:	0fc4      	lsrs	r4, r0, #31
   173f8:	2e00      	cmp	r6, #0
   173fa:	d047      	beq.n	1748c <__aeabi_fmul+0xac>
   173fc:	2eff      	cmp	r6, #255	; 0xff
   173fe:	d024      	beq.n	1744a <__aeabi_fmul+0x6a>
   17400:	00fb      	lsls	r3, r7, #3
   17402:	2780      	movs	r7, #128	; 0x80
   17404:	04ff      	lsls	r7, r7, #19
   17406:	431f      	orrs	r7, r3
   17408:	2300      	movs	r3, #0
   1740a:	4699      	mov	r9, r3
   1740c:	469a      	mov	sl, r3
   1740e:	3e7f      	subs	r6, #127	; 0x7f
   17410:	4643      	mov	r3, r8
   17412:	025d      	lsls	r5, r3, #9
   17414:	0058      	lsls	r0, r3, #1
   17416:	0fdb      	lsrs	r3, r3, #31
   17418:	0a6d      	lsrs	r5, r5, #9
   1741a:	0e00      	lsrs	r0, r0, #24
   1741c:	4698      	mov	r8, r3
   1741e:	d043      	beq.n	174a8 <__aeabi_fmul+0xc8>
   17420:	28ff      	cmp	r0, #255	; 0xff
   17422:	d03b      	beq.n	1749c <__aeabi_fmul+0xbc>
   17424:	00eb      	lsls	r3, r5, #3
   17426:	2580      	movs	r5, #128	; 0x80
   17428:	2200      	movs	r2, #0
   1742a:	04ed      	lsls	r5, r5, #19
   1742c:	431d      	orrs	r5, r3
   1742e:	387f      	subs	r0, #127	; 0x7f
   17430:	1836      	adds	r6, r6, r0
   17432:	1c73      	adds	r3, r6, #1
   17434:	4641      	mov	r1, r8
   17436:	469b      	mov	fp, r3
   17438:	464b      	mov	r3, r9
   1743a:	4061      	eors	r1, r4
   1743c:	4313      	orrs	r3, r2
   1743e:	2b0f      	cmp	r3, #15
   17440:	d864      	bhi.n	1750c <__aeabi_fmul+0x12c>
   17442:	4875      	ldr	r0, [pc, #468]	; (17618 <__aeabi_fmul+0x238>)
   17444:	009b      	lsls	r3, r3, #2
   17446:	58c3      	ldr	r3, [r0, r3]
   17448:	469f      	mov	pc, r3
   1744a:	2f00      	cmp	r7, #0
   1744c:	d142      	bne.n	174d4 <__aeabi_fmul+0xf4>
   1744e:	2308      	movs	r3, #8
   17450:	4699      	mov	r9, r3
   17452:	3b06      	subs	r3, #6
   17454:	26ff      	movs	r6, #255	; 0xff
   17456:	469a      	mov	sl, r3
   17458:	e7da      	b.n	17410 <__aeabi_fmul+0x30>
   1745a:	4641      	mov	r1, r8
   1745c:	2a02      	cmp	r2, #2
   1745e:	d028      	beq.n	174b2 <__aeabi_fmul+0xd2>
   17460:	2a03      	cmp	r2, #3
   17462:	d100      	bne.n	17466 <__aeabi_fmul+0x86>
   17464:	e0ce      	b.n	17604 <__aeabi_fmul+0x224>
   17466:	2a01      	cmp	r2, #1
   17468:	d000      	beq.n	1746c <__aeabi_fmul+0x8c>
   1746a:	e0ac      	b.n	175c6 <__aeabi_fmul+0x1e6>
   1746c:	4011      	ands	r1, r2
   1746e:	2000      	movs	r0, #0
   17470:	2200      	movs	r2, #0
   17472:	b2cc      	uxtb	r4, r1
   17474:	0240      	lsls	r0, r0, #9
   17476:	05d2      	lsls	r2, r2, #23
   17478:	0a40      	lsrs	r0, r0, #9
   1747a:	07e4      	lsls	r4, r4, #31
   1747c:	4310      	orrs	r0, r2
   1747e:	4320      	orrs	r0, r4
   17480:	bc3c      	pop	{r2, r3, r4, r5}
   17482:	4690      	mov	r8, r2
   17484:	4699      	mov	r9, r3
   17486:	46a2      	mov	sl, r4
   17488:	46ab      	mov	fp, r5
   1748a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1748c:	2f00      	cmp	r7, #0
   1748e:	d115      	bne.n	174bc <__aeabi_fmul+0xdc>
   17490:	2304      	movs	r3, #4
   17492:	4699      	mov	r9, r3
   17494:	3b03      	subs	r3, #3
   17496:	2600      	movs	r6, #0
   17498:	469a      	mov	sl, r3
   1749a:	e7b9      	b.n	17410 <__aeabi_fmul+0x30>
   1749c:	20ff      	movs	r0, #255	; 0xff
   1749e:	2202      	movs	r2, #2
   174a0:	2d00      	cmp	r5, #0
   174a2:	d0c5      	beq.n	17430 <__aeabi_fmul+0x50>
   174a4:	2203      	movs	r2, #3
   174a6:	e7c3      	b.n	17430 <__aeabi_fmul+0x50>
   174a8:	2d00      	cmp	r5, #0
   174aa:	d119      	bne.n	174e0 <__aeabi_fmul+0x100>
   174ac:	2000      	movs	r0, #0
   174ae:	2201      	movs	r2, #1
   174b0:	e7be      	b.n	17430 <__aeabi_fmul+0x50>
   174b2:	2401      	movs	r4, #1
   174b4:	22ff      	movs	r2, #255	; 0xff
   174b6:	400c      	ands	r4, r1
   174b8:	2000      	movs	r0, #0
   174ba:	e7db      	b.n	17474 <__aeabi_fmul+0x94>
   174bc:	0038      	movs	r0, r7
   174be:	f002 f8db 	bl	19678 <__clzsi2>
   174c2:	2676      	movs	r6, #118	; 0x76
   174c4:	1f43      	subs	r3, r0, #5
   174c6:	409f      	lsls	r7, r3
   174c8:	2300      	movs	r3, #0
   174ca:	4276      	negs	r6, r6
   174cc:	1a36      	subs	r6, r6, r0
   174ce:	4699      	mov	r9, r3
   174d0:	469a      	mov	sl, r3
   174d2:	e79d      	b.n	17410 <__aeabi_fmul+0x30>
   174d4:	230c      	movs	r3, #12
   174d6:	4699      	mov	r9, r3
   174d8:	3b09      	subs	r3, #9
   174da:	26ff      	movs	r6, #255	; 0xff
   174dc:	469a      	mov	sl, r3
   174de:	e797      	b.n	17410 <__aeabi_fmul+0x30>
   174e0:	0028      	movs	r0, r5
   174e2:	f002 f8c9 	bl	19678 <__clzsi2>
   174e6:	1f43      	subs	r3, r0, #5
   174e8:	409d      	lsls	r5, r3
   174ea:	2376      	movs	r3, #118	; 0x76
   174ec:	425b      	negs	r3, r3
   174ee:	1a18      	subs	r0, r3, r0
   174f0:	2200      	movs	r2, #0
   174f2:	e79d      	b.n	17430 <__aeabi_fmul+0x50>
   174f4:	2080      	movs	r0, #128	; 0x80
   174f6:	2400      	movs	r4, #0
   174f8:	03c0      	lsls	r0, r0, #15
   174fa:	22ff      	movs	r2, #255	; 0xff
   174fc:	e7ba      	b.n	17474 <__aeabi_fmul+0x94>
   174fe:	003d      	movs	r5, r7
   17500:	4652      	mov	r2, sl
   17502:	e7ab      	b.n	1745c <__aeabi_fmul+0x7c>
   17504:	003d      	movs	r5, r7
   17506:	0021      	movs	r1, r4
   17508:	4652      	mov	r2, sl
   1750a:	e7a7      	b.n	1745c <__aeabi_fmul+0x7c>
   1750c:	0c3b      	lsrs	r3, r7, #16
   1750e:	469c      	mov	ip, r3
   17510:	042a      	lsls	r2, r5, #16
   17512:	0c12      	lsrs	r2, r2, #16
   17514:	0c2b      	lsrs	r3, r5, #16
   17516:	0014      	movs	r4, r2
   17518:	4660      	mov	r0, ip
   1751a:	4665      	mov	r5, ip
   1751c:	043f      	lsls	r7, r7, #16
   1751e:	0c3f      	lsrs	r7, r7, #16
   17520:	437c      	muls	r4, r7
   17522:	4342      	muls	r2, r0
   17524:	435d      	muls	r5, r3
   17526:	437b      	muls	r3, r7
   17528:	0c27      	lsrs	r7, r4, #16
   1752a:	189b      	adds	r3, r3, r2
   1752c:	18ff      	adds	r7, r7, r3
   1752e:	42ba      	cmp	r2, r7
   17530:	d903      	bls.n	1753a <__aeabi_fmul+0x15a>
   17532:	2380      	movs	r3, #128	; 0x80
   17534:	025b      	lsls	r3, r3, #9
   17536:	469c      	mov	ip, r3
   17538:	4465      	add	r5, ip
   1753a:	0424      	lsls	r4, r4, #16
   1753c:	043a      	lsls	r2, r7, #16
   1753e:	0c24      	lsrs	r4, r4, #16
   17540:	1912      	adds	r2, r2, r4
   17542:	0193      	lsls	r3, r2, #6
   17544:	1e5c      	subs	r4, r3, #1
   17546:	41a3      	sbcs	r3, r4
   17548:	0c3f      	lsrs	r7, r7, #16
   1754a:	0e92      	lsrs	r2, r2, #26
   1754c:	197d      	adds	r5, r7, r5
   1754e:	431a      	orrs	r2, r3
   17550:	01ad      	lsls	r5, r5, #6
   17552:	4315      	orrs	r5, r2
   17554:	012b      	lsls	r3, r5, #4
   17556:	d504      	bpl.n	17562 <__aeabi_fmul+0x182>
   17558:	2301      	movs	r3, #1
   1755a:	465e      	mov	r6, fp
   1755c:	086a      	lsrs	r2, r5, #1
   1755e:	401d      	ands	r5, r3
   17560:	4315      	orrs	r5, r2
   17562:	0032      	movs	r2, r6
   17564:	327f      	adds	r2, #127	; 0x7f
   17566:	2a00      	cmp	r2, #0
   17568:	dd25      	ble.n	175b6 <__aeabi_fmul+0x1d6>
   1756a:	076b      	lsls	r3, r5, #29
   1756c:	d004      	beq.n	17578 <__aeabi_fmul+0x198>
   1756e:	230f      	movs	r3, #15
   17570:	402b      	ands	r3, r5
   17572:	2b04      	cmp	r3, #4
   17574:	d000      	beq.n	17578 <__aeabi_fmul+0x198>
   17576:	3504      	adds	r5, #4
   17578:	012b      	lsls	r3, r5, #4
   1757a:	d503      	bpl.n	17584 <__aeabi_fmul+0x1a4>
   1757c:	0032      	movs	r2, r6
   1757e:	4b27      	ldr	r3, [pc, #156]	; (1761c <__aeabi_fmul+0x23c>)
   17580:	3280      	adds	r2, #128	; 0x80
   17582:	401d      	ands	r5, r3
   17584:	2afe      	cmp	r2, #254	; 0xfe
   17586:	dc94      	bgt.n	174b2 <__aeabi_fmul+0xd2>
   17588:	2401      	movs	r4, #1
   1758a:	01a8      	lsls	r0, r5, #6
   1758c:	0a40      	lsrs	r0, r0, #9
   1758e:	b2d2      	uxtb	r2, r2
   17590:	400c      	ands	r4, r1
   17592:	e76f      	b.n	17474 <__aeabi_fmul+0x94>
   17594:	2080      	movs	r0, #128	; 0x80
   17596:	03c0      	lsls	r0, r0, #15
   17598:	4207      	tst	r7, r0
   1759a:	d007      	beq.n	175ac <__aeabi_fmul+0x1cc>
   1759c:	4205      	tst	r5, r0
   1759e:	d105      	bne.n	175ac <__aeabi_fmul+0x1cc>
   175a0:	4328      	orrs	r0, r5
   175a2:	0240      	lsls	r0, r0, #9
   175a4:	0a40      	lsrs	r0, r0, #9
   175a6:	4644      	mov	r4, r8
   175a8:	22ff      	movs	r2, #255	; 0xff
   175aa:	e763      	b.n	17474 <__aeabi_fmul+0x94>
   175ac:	4338      	orrs	r0, r7
   175ae:	0240      	lsls	r0, r0, #9
   175b0:	0a40      	lsrs	r0, r0, #9
   175b2:	22ff      	movs	r2, #255	; 0xff
   175b4:	e75e      	b.n	17474 <__aeabi_fmul+0x94>
   175b6:	2401      	movs	r4, #1
   175b8:	1aa3      	subs	r3, r4, r2
   175ba:	2b1b      	cmp	r3, #27
   175bc:	dd05      	ble.n	175ca <__aeabi_fmul+0x1ea>
   175be:	400c      	ands	r4, r1
   175c0:	2200      	movs	r2, #0
   175c2:	2000      	movs	r0, #0
   175c4:	e756      	b.n	17474 <__aeabi_fmul+0x94>
   175c6:	465e      	mov	r6, fp
   175c8:	e7cb      	b.n	17562 <__aeabi_fmul+0x182>
   175ca:	002a      	movs	r2, r5
   175cc:	2020      	movs	r0, #32
   175ce:	40da      	lsrs	r2, r3
   175d0:	1ac3      	subs	r3, r0, r3
   175d2:	409d      	lsls	r5, r3
   175d4:	002b      	movs	r3, r5
   175d6:	1e5d      	subs	r5, r3, #1
   175d8:	41ab      	sbcs	r3, r5
   175da:	4313      	orrs	r3, r2
   175dc:	075a      	lsls	r2, r3, #29
   175de:	d004      	beq.n	175ea <__aeabi_fmul+0x20a>
   175e0:	220f      	movs	r2, #15
   175e2:	401a      	ands	r2, r3
   175e4:	2a04      	cmp	r2, #4
   175e6:	d000      	beq.n	175ea <__aeabi_fmul+0x20a>
   175e8:	3304      	adds	r3, #4
   175ea:	015a      	lsls	r2, r3, #5
   175ec:	d504      	bpl.n	175f8 <__aeabi_fmul+0x218>
   175ee:	2401      	movs	r4, #1
   175f0:	2201      	movs	r2, #1
   175f2:	400c      	ands	r4, r1
   175f4:	2000      	movs	r0, #0
   175f6:	e73d      	b.n	17474 <__aeabi_fmul+0x94>
   175f8:	2401      	movs	r4, #1
   175fa:	019b      	lsls	r3, r3, #6
   175fc:	0a58      	lsrs	r0, r3, #9
   175fe:	400c      	ands	r4, r1
   17600:	2200      	movs	r2, #0
   17602:	e737      	b.n	17474 <__aeabi_fmul+0x94>
   17604:	2080      	movs	r0, #128	; 0x80
   17606:	2401      	movs	r4, #1
   17608:	03c0      	lsls	r0, r0, #15
   1760a:	4328      	orrs	r0, r5
   1760c:	0240      	lsls	r0, r0, #9
   1760e:	0a40      	lsrs	r0, r0, #9
   17610:	400c      	ands	r4, r1
   17612:	22ff      	movs	r2, #255	; 0xff
   17614:	e72e      	b.n	17474 <__aeabi_fmul+0x94>
   17616:	46c0      	nop			; (mov r8, r8)
   17618:	000204b4 	.word	0x000204b4
   1761c:	f7ffffff 	.word	0xf7ffffff

00017620 <__aeabi_fsub>:
   17620:	b5f0      	push	{r4, r5, r6, r7, lr}
   17622:	464f      	mov	r7, r9
   17624:	46d6      	mov	lr, sl
   17626:	4646      	mov	r6, r8
   17628:	0044      	lsls	r4, r0, #1
   1762a:	b5c0      	push	{r6, r7, lr}
   1762c:	0fc2      	lsrs	r2, r0, #31
   1762e:	0247      	lsls	r7, r0, #9
   17630:	0248      	lsls	r0, r1, #9
   17632:	0a40      	lsrs	r0, r0, #9
   17634:	4684      	mov	ip, r0
   17636:	4666      	mov	r6, ip
   17638:	0a7b      	lsrs	r3, r7, #9
   1763a:	0048      	lsls	r0, r1, #1
   1763c:	0fc9      	lsrs	r1, r1, #31
   1763e:	469a      	mov	sl, r3
   17640:	0e24      	lsrs	r4, r4, #24
   17642:	0015      	movs	r5, r2
   17644:	00db      	lsls	r3, r3, #3
   17646:	0e00      	lsrs	r0, r0, #24
   17648:	4689      	mov	r9, r1
   1764a:	00f6      	lsls	r6, r6, #3
   1764c:	28ff      	cmp	r0, #255	; 0xff
   1764e:	d100      	bne.n	17652 <__aeabi_fsub+0x32>
   17650:	e08f      	b.n	17772 <__aeabi_fsub+0x152>
   17652:	2101      	movs	r1, #1
   17654:	464f      	mov	r7, r9
   17656:	404f      	eors	r7, r1
   17658:	0039      	movs	r1, r7
   1765a:	4291      	cmp	r1, r2
   1765c:	d066      	beq.n	1772c <__aeabi_fsub+0x10c>
   1765e:	1a22      	subs	r2, r4, r0
   17660:	2a00      	cmp	r2, #0
   17662:	dc00      	bgt.n	17666 <__aeabi_fsub+0x46>
   17664:	e09d      	b.n	177a2 <__aeabi_fsub+0x182>
   17666:	2800      	cmp	r0, #0
   17668:	d13d      	bne.n	176e6 <__aeabi_fsub+0xc6>
   1766a:	2e00      	cmp	r6, #0
   1766c:	d100      	bne.n	17670 <__aeabi_fsub+0x50>
   1766e:	e08b      	b.n	17788 <__aeabi_fsub+0x168>
   17670:	1e51      	subs	r1, r2, #1
   17672:	2900      	cmp	r1, #0
   17674:	d000      	beq.n	17678 <__aeabi_fsub+0x58>
   17676:	e0b5      	b.n	177e4 <__aeabi_fsub+0x1c4>
   17678:	2401      	movs	r4, #1
   1767a:	1b9b      	subs	r3, r3, r6
   1767c:	015a      	lsls	r2, r3, #5
   1767e:	d544      	bpl.n	1770a <__aeabi_fsub+0xea>
   17680:	019b      	lsls	r3, r3, #6
   17682:	099f      	lsrs	r7, r3, #6
   17684:	0038      	movs	r0, r7
   17686:	f001 fff7 	bl	19678 <__clzsi2>
   1768a:	3805      	subs	r0, #5
   1768c:	4087      	lsls	r7, r0
   1768e:	4284      	cmp	r4, r0
   17690:	dd00      	ble.n	17694 <__aeabi_fsub+0x74>
   17692:	e096      	b.n	177c2 <__aeabi_fsub+0x1a2>
   17694:	1b04      	subs	r4, r0, r4
   17696:	003a      	movs	r2, r7
   17698:	2020      	movs	r0, #32
   1769a:	3401      	adds	r4, #1
   1769c:	40e2      	lsrs	r2, r4
   1769e:	1b04      	subs	r4, r0, r4
   176a0:	40a7      	lsls	r7, r4
   176a2:	003b      	movs	r3, r7
   176a4:	1e5f      	subs	r7, r3, #1
   176a6:	41bb      	sbcs	r3, r7
   176a8:	2400      	movs	r4, #0
   176aa:	4313      	orrs	r3, r2
   176ac:	075a      	lsls	r2, r3, #29
   176ae:	d004      	beq.n	176ba <__aeabi_fsub+0x9a>
   176b0:	220f      	movs	r2, #15
   176b2:	401a      	ands	r2, r3
   176b4:	2a04      	cmp	r2, #4
   176b6:	d000      	beq.n	176ba <__aeabi_fsub+0x9a>
   176b8:	3304      	adds	r3, #4
   176ba:	015a      	lsls	r2, r3, #5
   176bc:	d527      	bpl.n	1770e <__aeabi_fsub+0xee>
   176be:	3401      	adds	r4, #1
   176c0:	2cff      	cmp	r4, #255	; 0xff
   176c2:	d100      	bne.n	176c6 <__aeabi_fsub+0xa6>
   176c4:	e079      	b.n	177ba <__aeabi_fsub+0x19a>
   176c6:	2201      	movs	r2, #1
   176c8:	019b      	lsls	r3, r3, #6
   176ca:	0a5b      	lsrs	r3, r3, #9
   176cc:	b2e4      	uxtb	r4, r4
   176ce:	402a      	ands	r2, r5
   176d0:	025b      	lsls	r3, r3, #9
   176d2:	05e4      	lsls	r4, r4, #23
   176d4:	0a58      	lsrs	r0, r3, #9
   176d6:	07d2      	lsls	r2, r2, #31
   176d8:	4320      	orrs	r0, r4
   176da:	4310      	orrs	r0, r2
   176dc:	bc1c      	pop	{r2, r3, r4}
   176de:	4690      	mov	r8, r2
   176e0:	4699      	mov	r9, r3
   176e2:	46a2      	mov	sl, r4
   176e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   176e6:	2cff      	cmp	r4, #255	; 0xff
   176e8:	d0e0      	beq.n	176ac <__aeabi_fsub+0x8c>
   176ea:	2180      	movs	r1, #128	; 0x80
   176ec:	04c9      	lsls	r1, r1, #19
   176ee:	430e      	orrs	r6, r1
   176f0:	2a1b      	cmp	r2, #27
   176f2:	dc7b      	bgt.n	177ec <__aeabi_fsub+0x1cc>
   176f4:	0031      	movs	r1, r6
   176f6:	2020      	movs	r0, #32
   176f8:	40d1      	lsrs	r1, r2
   176fa:	1a82      	subs	r2, r0, r2
   176fc:	4096      	lsls	r6, r2
   176fe:	1e72      	subs	r2, r6, #1
   17700:	4196      	sbcs	r6, r2
   17702:	430e      	orrs	r6, r1
   17704:	1b9b      	subs	r3, r3, r6
   17706:	015a      	lsls	r2, r3, #5
   17708:	d4ba      	bmi.n	17680 <__aeabi_fsub+0x60>
   1770a:	075a      	lsls	r2, r3, #29
   1770c:	d1d0      	bne.n	176b0 <__aeabi_fsub+0x90>
   1770e:	2201      	movs	r2, #1
   17710:	08df      	lsrs	r7, r3, #3
   17712:	402a      	ands	r2, r5
   17714:	2cff      	cmp	r4, #255	; 0xff
   17716:	d133      	bne.n	17780 <__aeabi_fsub+0x160>
   17718:	2f00      	cmp	r7, #0
   1771a:	d100      	bne.n	1771e <__aeabi_fsub+0xfe>
   1771c:	e0a8      	b.n	17870 <__aeabi_fsub+0x250>
   1771e:	2380      	movs	r3, #128	; 0x80
   17720:	03db      	lsls	r3, r3, #15
   17722:	433b      	orrs	r3, r7
   17724:	025b      	lsls	r3, r3, #9
   17726:	0a5b      	lsrs	r3, r3, #9
   17728:	24ff      	movs	r4, #255	; 0xff
   1772a:	e7d1      	b.n	176d0 <__aeabi_fsub+0xb0>
   1772c:	1a21      	subs	r1, r4, r0
   1772e:	2900      	cmp	r1, #0
   17730:	dd4c      	ble.n	177cc <__aeabi_fsub+0x1ac>
   17732:	2800      	cmp	r0, #0
   17734:	d02a      	beq.n	1778c <__aeabi_fsub+0x16c>
   17736:	2cff      	cmp	r4, #255	; 0xff
   17738:	d0b8      	beq.n	176ac <__aeabi_fsub+0x8c>
   1773a:	2080      	movs	r0, #128	; 0x80
   1773c:	04c0      	lsls	r0, r0, #19
   1773e:	4306      	orrs	r6, r0
   17740:	291b      	cmp	r1, #27
   17742:	dd00      	ble.n	17746 <__aeabi_fsub+0x126>
   17744:	e0af      	b.n	178a6 <__aeabi_fsub+0x286>
   17746:	0030      	movs	r0, r6
   17748:	2720      	movs	r7, #32
   1774a:	40c8      	lsrs	r0, r1
   1774c:	1a79      	subs	r1, r7, r1
   1774e:	408e      	lsls	r6, r1
   17750:	1e71      	subs	r1, r6, #1
   17752:	418e      	sbcs	r6, r1
   17754:	4306      	orrs	r6, r0
   17756:	199b      	adds	r3, r3, r6
   17758:	0159      	lsls	r1, r3, #5
   1775a:	d5d6      	bpl.n	1770a <__aeabi_fsub+0xea>
   1775c:	3401      	adds	r4, #1
   1775e:	2cff      	cmp	r4, #255	; 0xff
   17760:	d100      	bne.n	17764 <__aeabi_fsub+0x144>
   17762:	e085      	b.n	17870 <__aeabi_fsub+0x250>
   17764:	2201      	movs	r2, #1
   17766:	497a      	ldr	r1, [pc, #488]	; (17950 <__aeabi_fsub+0x330>)
   17768:	401a      	ands	r2, r3
   1776a:	085b      	lsrs	r3, r3, #1
   1776c:	400b      	ands	r3, r1
   1776e:	4313      	orrs	r3, r2
   17770:	e79c      	b.n	176ac <__aeabi_fsub+0x8c>
   17772:	2e00      	cmp	r6, #0
   17774:	d000      	beq.n	17778 <__aeabi_fsub+0x158>
   17776:	e770      	b.n	1765a <__aeabi_fsub+0x3a>
   17778:	e76b      	b.n	17652 <__aeabi_fsub+0x32>
   1777a:	1e3b      	subs	r3, r7, #0
   1777c:	d1c5      	bne.n	1770a <__aeabi_fsub+0xea>
   1777e:	2200      	movs	r2, #0
   17780:	027b      	lsls	r3, r7, #9
   17782:	0a5b      	lsrs	r3, r3, #9
   17784:	b2e4      	uxtb	r4, r4
   17786:	e7a3      	b.n	176d0 <__aeabi_fsub+0xb0>
   17788:	0014      	movs	r4, r2
   1778a:	e78f      	b.n	176ac <__aeabi_fsub+0x8c>
   1778c:	2e00      	cmp	r6, #0
   1778e:	d04d      	beq.n	1782c <__aeabi_fsub+0x20c>
   17790:	1e48      	subs	r0, r1, #1
   17792:	2800      	cmp	r0, #0
   17794:	d157      	bne.n	17846 <__aeabi_fsub+0x226>
   17796:	199b      	adds	r3, r3, r6
   17798:	2401      	movs	r4, #1
   1779a:	015a      	lsls	r2, r3, #5
   1779c:	d5b5      	bpl.n	1770a <__aeabi_fsub+0xea>
   1779e:	2402      	movs	r4, #2
   177a0:	e7e0      	b.n	17764 <__aeabi_fsub+0x144>
   177a2:	2a00      	cmp	r2, #0
   177a4:	d125      	bne.n	177f2 <__aeabi_fsub+0x1d2>
   177a6:	1c62      	adds	r2, r4, #1
   177a8:	b2d2      	uxtb	r2, r2
   177aa:	2a01      	cmp	r2, #1
   177ac:	dd72      	ble.n	17894 <__aeabi_fsub+0x274>
   177ae:	1b9f      	subs	r7, r3, r6
   177b0:	017a      	lsls	r2, r7, #5
   177b2:	d535      	bpl.n	17820 <__aeabi_fsub+0x200>
   177b4:	1af7      	subs	r7, r6, r3
   177b6:	000d      	movs	r5, r1
   177b8:	e764      	b.n	17684 <__aeabi_fsub+0x64>
   177ba:	2201      	movs	r2, #1
   177bc:	2300      	movs	r3, #0
   177be:	402a      	ands	r2, r5
   177c0:	e786      	b.n	176d0 <__aeabi_fsub+0xb0>
   177c2:	003b      	movs	r3, r7
   177c4:	4a63      	ldr	r2, [pc, #396]	; (17954 <__aeabi_fsub+0x334>)
   177c6:	1a24      	subs	r4, r4, r0
   177c8:	4013      	ands	r3, r2
   177ca:	e76f      	b.n	176ac <__aeabi_fsub+0x8c>
   177cc:	2900      	cmp	r1, #0
   177ce:	d16c      	bne.n	178aa <__aeabi_fsub+0x28a>
   177d0:	1c61      	adds	r1, r4, #1
   177d2:	b2c8      	uxtb	r0, r1
   177d4:	2801      	cmp	r0, #1
   177d6:	dd4e      	ble.n	17876 <__aeabi_fsub+0x256>
   177d8:	29ff      	cmp	r1, #255	; 0xff
   177da:	d049      	beq.n	17870 <__aeabi_fsub+0x250>
   177dc:	199b      	adds	r3, r3, r6
   177de:	085b      	lsrs	r3, r3, #1
   177e0:	000c      	movs	r4, r1
   177e2:	e763      	b.n	176ac <__aeabi_fsub+0x8c>
   177e4:	2aff      	cmp	r2, #255	; 0xff
   177e6:	d041      	beq.n	1786c <__aeabi_fsub+0x24c>
   177e8:	000a      	movs	r2, r1
   177ea:	e781      	b.n	176f0 <__aeabi_fsub+0xd0>
   177ec:	2601      	movs	r6, #1
   177ee:	1b9b      	subs	r3, r3, r6
   177f0:	e789      	b.n	17706 <__aeabi_fsub+0xe6>
   177f2:	2c00      	cmp	r4, #0
   177f4:	d01c      	beq.n	17830 <__aeabi_fsub+0x210>
   177f6:	28ff      	cmp	r0, #255	; 0xff
   177f8:	d021      	beq.n	1783e <__aeabi_fsub+0x21e>
   177fa:	2480      	movs	r4, #128	; 0x80
   177fc:	04e4      	lsls	r4, r4, #19
   177fe:	4252      	negs	r2, r2
   17800:	4323      	orrs	r3, r4
   17802:	2a1b      	cmp	r2, #27
   17804:	dd00      	ble.n	17808 <__aeabi_fsub+0x1e8>
   17806:	e096      	b.n	17936 <__aeabi_fsub+0x316>
   17808:	001c      	movs	r4, r3
   1780a:	2520      	movs	r5, #32
   1780c:	40d4      	lsrs	r4, r2
   1780e:	1aaa      	subs	r2, r5, r2
   17810:	4093      	lsls	r3, r2
   17812:	1e5a      	subs	r2, r3, #1
   17814:	4193      	sbcs	r3, r2
   17816:	4323      	orrs	r3, r4
   17818:	1af3      	subs	r3, r6, r3
   1781a:	0004      	movs	r4, r0
   1781c:	000d      	movs	r5, r1
   1781e:	e72d      	b.n	1767c <__aeabi_fsub+0x5c>
   17820:	2f00      	cmp	r7, #0
   17822:	d000      	beq.n	17826 <__aeabi_fsub+0x206>
   17824:	e72e      	b.n	17684 <__aeabi_fsub+0x64>
   17826:	2200      	movs	r2, #0
   17828:	2400      	movs	r4, #0
   1782a:	e7a9      	b.n	17780 <__aeabi_fsub+0x160>
   1782c:	000c      	movs	r4, r1
   1782e:	e73d      	b.n	176ac <__aeabi_fsub+0x8c>
   17830:	2b00      	cmp	r3, #0
   17832:	d058      	beq.n	178e6 <__aeabi_fsub+0x2c6>
   17834:	43d2      	mvns	r2, r2
   17836:	2a00      	cmp	r2, #0
   17838:	d0ee      	beq.n	17818 <__aeabi_fsub+0x1f8>
   1783a:	28ff      	cmp	r0, #255	; 0xff
   1783c:	d1e1      	bne.n	17802 <__aeabi_fsub+0x1e2>
   1783e:	0033      	movs	r3, r6
   17840:	24ff      	movs	r4, #255	; 0xff
   17842:	000d      	movs	r5, r1
   17844:	e732      	b.n	176ac <__aeabi_fsub+0x8c>
   17846:	29ff      	cmp	r1, #255	; 0xff
   17848:	d010      	beq.n	1786c <__aeabi_fsub+0x24c>
   1784a:	0001      	movs	r1, r0
   1784c:	e778      	b.n	17740 <__aeabi_fsub+0x120>
   1784e:	2b00      	cmp	r3, #0
   17850:	d06e      	beq.n	17930 <__aeabi_fsub+0x310>
   17852:	24ff      	movs	r4, #255	; 0xff
   17854:	2e00      	cmp	r6, #0
   17856:	d100      	bne.n	1785a <__aeabi_fsub+0x23a>
   17858:	e728      	b.n	176ac <__aeabi_fsub+0x8c>
   1785a:	2280      	movs	r2, #128	; 0x80
   1785c:	4651      	mov	r1, sl
   1785e:	03d2      	lsls	r2, r2, #15
   17860:	4211      	tst	r1, r2
   17862:	d003      	beq.n	1786c <__aeabi_fsub+0x24c>
   17864:	4661      	mov	r1, ip
   17866:	4211      	tst	r1, r2
   17868:	d100      	bne.n	1786c <__aeabi_fsub+0x24c>
   1786a:	0033      	movs	r3, r6
   1786c:	24ff      	movs	r4, #255	; 0xff
   1786e:	e71d      	b.n	176ac <__aeabi_fsub+0x8c>
   17870:	24ff      	movs	r4, #255	; 0xff
   17872:	2300      	movs	r3, #0
   17874:	e72c      	b.n	176d0 <__aeabi_fsub+0xb0>
   17876:	2c00      	cmp	r4, #0
   17878:	d1e9      	bne.n	1784e <__aeabi_fsub+0x22e>
   1787a:	2b00      	cmp	r3, #0
   1787c:	d063      	beq.n	17946 <__aeabi_fsub+0x326>
   1787e:	2e00      	cmp	r6, #0
   17880:	d100      	bne.n	17884 <__aeabi_fsub+0x264>
   17882:	e713      	b.n	176ac <__aeabi_fsub+0x8c>
   17884:	199b      	adds	r3, r3, r6
   17886:	015a      	lsls	r2, r3, #5
   17888:	d400      	bmi.n	1788c <__aeabi_fsub+0x26c>
   1788a:	e73e      	b.n	1770a <__aeabi_fsub+0xea>
   1788c:	4a31      	ldr	r2, [pc, #196]	; (17954 <__aeabi_fsub+0x334>)
   1788e:	000c      	movs	r4, r1
   17890:	4013      	ands	r3, r2
   17892:	e70b      	b.n	176ac <__aeabi_fsub+0x8c>
   17894:	2c00      	cmp	r4, #0
   17896:	d11e      	bne.n	178d6 <__aeabi_fsub+0x2b6>
   17898:	2b00      	cmp	r3, #0
   1789a:	d12f      	bne.n	178fc <__aeabi_fsub+0x2dc>
   1789c:	2e00      	cmp	r6, #0
   1789e:	d04f      	beq.n	17940 <__aeabi_fsub+0x320>
   178a0:	0033      	movs	r3, r6
   178a2:	000d      	movs	r5, r1
   178a4:	e702      	b.n	176ac <__aeabi_fsub+0x8c>
   178a6:	2601      	movs	r6, #1
   178a8:	e755      	b.n	17756 <__aeabi_fsub+0x136>
   178aa:	2c00      	cmp	r4, #0
   178ac:	d11f      	bne.n	178ee <__aeabi_fsub+0x2ce>
   178ae:	2b00      	cmp	r3, #0
   178b0:	d043      	beq.n	1793a <__aeabi_fsub+0x31a>
   178b2:	43c9      	mvns	r1, r1
   178b4:	2900      	cmp	r1, #0
   178b6:	d00b      	beq.n	178d0 <__aeabi_fsub+0x2b0>
   178b8:	28ff      	cmp	r0, #255	; 0xff
   178ba:	d039      	beq.n	17930 <__aeabi_fsub+0x310>
   178bc:	291b      	cmp	r1, #27
   178be:	dc44      	bgt.n	1794a <__aeabi_fsub+0x32a>
   178c0:	001c      	movs	r4, r3
   178c2:	2720      	movs	r7, #32
   178c4:	40cc      	lsrs	r4, r1
   178c6:	1a79      	subs	r1, r7, r1
   178c8:	408b      	lsls	r3, r1
   178ca:	1e59      	subs	r1, r3, #1
   178cc:	418b      	sbcs	r3, r1
   178ce:	4323      	orrs	r3, r4
   178d0:	199b      	adds	r3, r3, r6
   178d2:	0004      	movs	r4, r0
   178d4:	e740      	b.n	17758 <__aeabi_fsub+0x138>
   178d6:	2b00      	cmp	r3, #0
   178d8:	d11a      	bne.n	17910 <__aeabi_fsub+0x2f0>
   178da:	2e00      	cmp	r6, #0
   178dc:	d124      	bne.n	17928 <__aeabi_fsub+0x308>
   178de:	2780      	movs	r7, #128	; 0x80
   178e0:	2200      	movs	r2, #0
   178e2:	03ff      	lsls	r7, r7, #15
   178e4:	e71b      	b.n	1771e <__aeabi_fsub+0xfe>
   178e6:	0033      	movs	r3, r6
   178e8:	0004      	movs	r4, r0
   178ea:	000d      	movs	r5, r1
   178ec:	e6de      	b.n	176ac <__aeabi_fsub+0x8c>
   178ee:	28ff      	cmp	r0, #255	; 0xff
   178f0:	d01e      	beq.n	17930 <__aeabi_fsub+0x310>
   178f2:	2480      	movs	r4, #128	; 0x80
   178f4:	04e4      	lsls	r4, r4, #19
   178f6:	4249      	negs	r1, r1
   178f8:	4323      	orrs	r3, r4
   178fa:	e7df      	b.n	178bc <__aeabi_fsub+0x29c>
   178fc:	2e00      	cmp	r6, #0
   178fe:	d100      	bne.n	17902 <__aeabi_fsub+0x2e2>
   17900:	e6d4      	b.n	176ac <__aeabi_fsub+0x8c>
   17902:	1b9f      	subs	r7, r3, r6
   17904:	017a      	lsls	r2, r7, #5
   17906:	d400      	bmi.n	1790a <__aeabi_fsub+0x2ea>
   17908:	e737      	b.n	1777a <__aeabi_fsub+0x15a>
   1790a:	1af3      	subs	r3, r6, r3
   1790c:	000d      	movs	r5, r1
   1790e:	e6cd      	b.n	176ac <__aeabi_fsub+0x8c>
   17910:	24ff      	movs	r4, #255	; 0xff
   17912:	2e00      	cmp	r6, #0
   17914:	d100      	bne.n	17918 <__aeabi_fsub+0x2f8>
   17916:	e6c9      	b.n	176ac <__aeabi_fsub+0x8c>
   17918:	2280      	movs	r2, #128	; 0x80
   1791a:	4650      	mov	r0, sl
   1791c:	03d2      	lsls	r2, r2, #15
   1791e:	4210      	tst	r0, r2
   17920:	d0a4      	beq.n	1786c <__aeabi_fsub+0x24c>
   17922:	4660      	mov	r0, ip
   17924:	4210      	tst	r0, r2
   17926:	d1a1      	bne.n	1786c <__aeabi_fsub+0x24c>
   17928:	0033      	movs	r3, r6
   1792a:	000d      	movs	r5, r1
   1792c:	24ff      	movs	r4, #255	; 0xff
   1792e:	e6bd      	b.n	176ac <__aeabi_fsub+0x8c>
   17930:	0033      	movs	r3, r6
   17932:	24ff      	movs	r4, #255	; 0xff
   17934:	e6ba      	b.n	176ac <__aeabi_fsub+0x8c>
   17936:	2301      	movs	r3, #1
   17938:	e76e      	b.n	17818 <__aeabi_fsub+0x1f8>
   1793a:	0033      	movs	r3, r6
   1793c:	0004      	movs	r4, r0
   1793e:	e6b5      	b.n	176ac <__aeabi_fsub+0x8c>
   17940:	2700      	movs	r7, #0
   17942:	2200      	movs	r2, #0
   17944:	e71c      	b.n	17780 <__aeabi_fsub+0x160>
   17946:	0033      	movs	r3, r6
   17948:	e6b0      	b.n	176ac <__aeabi_fsub+0x8c>
   1794a:	2301      	movs	r3, #1
   1794c:	e7c0      	b.n	178d0 <__aeabi_fsub+0x2b0>
   1794e:	46c0      	nop			; (mov r8, r8)
   17950:	7dffffff 	.word	0x7dffffff
   17954:	fbffffff 	.word	0xfbffffff

00017958 <__aeabi_f2iz>:
   17958:	0241      	lsls	r1, r0, #9
   1795a:	0043      	lsls	r3, r0, #1
   1795c:	0fc2      	lsrs	r2, r0, #31
   1795e:	0a49      	lsrs	r1, r1, #9
   17960:	0e1b      	lsrs	r3, r3, #24
   17962:	2000      	movs	r0, #0
   17964:	2b7e      	cmp	r3, #126	; 0x7e
   17966:	dd0d      	ble.n	17984 <__aeabi_f2iz+0x2c>
   17968:	2b9d      	cmp	r3, #157	; 0x9d
   1796a:	dc0c      	bgt.n	17986 <__aeabi_f2iz+0x2e>
   1796c:	2080      	movs	r0, #128	; 0x80
   1796e:	0400      	lsls	r0, r0, #16
   17970:	4301      	orrs	r1, r0
   17972:	2b95      	cmp	r3, #149	; 0x95
   17974:	dc0a      	bgt.n	1798c <__aeabi_f2iz+0x34>
   17976:	2096      	movs	r0, #150	; 0x96
   17978:	1ac3      	subs	r3, r0, r3
   1797a:	40d9      	lsrs	r1, r3
   1797c:	4248      	negs	r0, r1
   1797e:	2a00      	cmp	r2, #0
   17980:	d100      	bne.n	17984 <__aeabi_f2iz+0x2c>
   17982:	0008      	movs	r0, r1
   17984:	4770      	bx	lr
   17986:	4b03      	ldr	r3, [pc, #12]	; (17994 <__aeabi_f2iz+0x3c>)
   17988:	18d0      	adds	r0, r2, r3
   1798a:	e7fb      	b.n	17984 <__aeabi_f2iz+0x2c>
   1798c:	3b96      	subs	r3, #150	; 0x96
   1798e:	4099      	lsls	r1, r3
   17990:	e7f4      	b.n	1797c <__aeabi_f2iz+0x24>
   17992:	46c0      	nop			; (mov r8, r8)
   17994:	7fffffff 	.word	0x7fffffff

00017998 <__aeabi_i2f>:
   17998:	b570      	push	{r4, r5, r6, lr}
   1799a:	2800      	cmp	r0, #0
   1799c:	d030      	beq.n	17a00 <__aeabi_i2f+0x68>
   1799e:	17c3      	asrs	r3, r0, #31
   179a0:	18c4      	adds	r4, r0, r3
   179a2:	405c      	eors	r4, r3
   179a4:	0fc5      	lsrs	r5, r0, #31
   179a6:	0020      	movs	r0, r4
   179a8:	f001 fe66 	bl	19678 <__clzsi2>
   179ac:	239e      	movs	r3, #158	; 0x9e
   179ae:	1a1b      	subs	r3, r3, r0
   179b0:	2b96      	cmp	r3, #150	; 0x96
   179b2:	dc0d      	bgt.n	179d0 <__aeabi_i2f+0x38>
   179b4:	2296      	movs	r2, #150	; 0x96
   179b6:	1ad2      	subs	r2, r2, r3
   179b8:	4094      	lsls	r4, r2
   179ba:	002a      	movs	r2, r5
   179bc:	0264      	lsls	r4, r4, #9
   179be:	0a64      	lsrs	r4, r4, #9
   179c0:	b2db      	uxtb	r3, r3
   179c2:	0264      	lsls	r4, r4, #9
   179c4:	05db      	lsls	r3, r3, #23
   179c6:	0a60      	lsrs	r0, r4, #9
   179c8:	07d2      	lsls	r2, r2, #31
   179ca:	4318      	orrs	r0, r3
   179cc:	4310      	orrs	r0, r2
   179ce:	bd70      	pop	{r4, r5, r6, pc}
   179d0:	2b99      	cmp	r3, #153	; 0x99
   179d2:	dc19      	bgt.n	17a08 <__aeabi_i2f+0x70>
   179d4:	2299      	movs	r2, #153	; 0x99
   179d6:	1ad2      	subs	r2, r2, r3
   179d8:	2a00      	cmp	r2, #0
   179da:	dd29      	ble.n	17a30 <__aeabi_i2f+0x98>
   179dc:	4094      	lsls	r4, r2
   179de:	0022      	movs	r2, r4
   179e0:	4c14      	ldr	r4, [pc, #80]	; (17a34 <__aeabi_i2f+0x9c>)
   179e2:	4014      	ands	r4, r2
   179e4:	0751      	lsls	r1, r2, #29
   179e6:	d004      	beq.n	179f2 <__aeabi_i2f+0x5a>
   179e8:	210f      	movs	r1, #15
   179ea:	400a      	ands	r2, r1
   179ec:	2a04      	cmp	r2, #4
   179ee:	d000      	beq.n	179f2 <__aeabi_i2f+0x5a>
   179f0:	3404      	adds	r4, #4
   179f2:	0162      	lsls	r2, r4, #5
   179f4:	d413      	bmi.n	17a1e <__aeabi_i2f+0x86>
   179f6:	01a4      	lsls	r4, r4, #6
   179f8:	0a64      	lsrs	r4, r4, #9
   179fa:	b2db      	uxtb	r3, r3
   179fc:	002a      	movs	r2, r5
   179fe:	e7e0      	b.n	179c2 <__aeabi_i2f+0x2a>
   17a00:	2200      	movs	r2, #0
   17a02:	2300      	movs	r3, #0
   17a04:	2400      	movs	r4, #0
   17a06:	e7dc      	b.n	179c2 <__aeabi_i2f+0x2a>
   17a08:	2205      	movs	r2, #5
   17a0a:	0021      	movs	r1, r4
   17a0c:	1a12      	subs	r2, r2, r0
   17a0e:	40d1      	lsrs	r1, r2
   17a10:	22b9      	movs	r2, #185	; 0xb9
   17a12:	1ad2      	subs	r2, r2, r3
   17a14:	4094      	lsls	r4, r2
   17a16:	1e62      	subs	r2, r4, #1
   17a18:	4194      	sbcs	r4, r2
   17a1a:	430c      	orrs	r4, r1
   17a1c:	e7da      	b.n	179d4 <__aeabi_i2f+0x3c>
   17a1e:	4b05      	ldr	r3, [pc, #20]	; (17a34 <__aeabi_i2f+0x9c>)
   17a20:	002a      	movs	r2, r5
   17a22:	401c      	ands	r4, r3
   17a24:	239f      	movs	r3, #159	; 0x9f
   17a26:	01a4      	lsls	r4, r4, #6
   17a28:	1a1b      	subs	r3, r3, r0
   17a2a:	0a64      	lsrs	r4, r4, #9
   17a2c:	b2db      	uxtb	r3, r3
   17a2e:	e7c8      	b.n	179c2 <__aeabi_i2f+0x2a>
   17a30:	0022      	movs	r2, r4
   17a32:	e7d5      	b.n	179e0 <__aeabi_i2f+0x48>
   17a34:	fbffffff 	.word	0xfbffffff

00017a38 <__aeabi_ui2f>:
   17a38:	b510      	push	{r4, lr}
   17a3a:	1e04      	subs	r4, r0, #0
   17a3c:	d027      	beq.n	17a8e <__aeabi_ui2f+0x56>
   17a3e:	f001 fe1b 	bl	19678 <__clzsi2>
   17a42:	239e      	movs	r3, #158	; 0x9e
   17a44:	1a1b      	subs	r3, r3, r0
   17a46:	2b96      	cmp	r3, #150	; 0x96
   17a48:	dc0a      	bgt.n	17a60 <__aeabi_ui2f+0x28>
   17a4a:	2296      	movs	r2, #150	; 0x96
   17a4c:	1ad2      	subs	r2, r2, r3
   17a4e:	4094      	lsls	r4, r2
   17a50:	0264      	lsls	r4, r4, #9
   17a52:	0a64      	lsrs	r4, r4, #9
   17a54:	b2db      	uxtb	r3, r3
   17a56:	0264      	lsls	r4, r4, #9
   17a58:	05db      	lsls	r3, r3, #23
   17a5a:	0a60      	lsrs	r0, r4, #9
   17a5c:	4318      	orrs	r0, r3
   17a5e:	bd10      	pop	{r4, pc}
   17a60:	2b99      	cmp	r3, #153	; 0x99
   17a62:	dc17      	bgt.n	17a94 <__aeabi_ui2f+0x5c>
   17a64:	2299      	movs	r2, #153	; 0x99
   17a66:	1ad2      	subs	r2, r2, r3
   17a68:	2a00      	cmp	r2, #0
   17a6a:	dd27      	ble.n	17abc <__aeabi_ui2f+0x84>
   17a6c:	4094      	lsls	r4, r2
   17a6e:	0022      	movs	r2, r4
   17a70:	4c13      	ldr	r4, [pc, #76]	; (17ac0 <__aeabi_ui2f+0x88>)
   17a72:	4014      	ands	r4, r2
   17a74:	0751      	lsls	r1, r2, #29
   17a76:	d004      	beq.n	17a82 <__aeabi_ui2f+0x4a>
   17a78:	210f      	movs	r1, #15
   17a7a:	400a      	ands	r2, r1
   17a7c:	2a04      	cmp	r2, #4
   17a7e:	d000      	beq.n	17a82 <__aeabi_ui2f+0x4a>
   17a80:	3404      	adds	r4, #4
   17a82:	0162      	lsls	r2, r4, #5
   17a84:	d412      	bmi.n	17aac <__aeabi_ui2f+0x74>
   17a86:	01a4      	lsls	r4, r4, #6
   17a88:	0a64      	lsrs	r4, r4, #9
   17a8a:	b2db      	uxtb	r3, r3
   17a8c:	e7e3      	b.n	17a56 <__aeabi_ui2f+0x1e>
   17a8e:	2300      	movs	r3, #0
   17a90:	2400      	movs	r4, #0
   17a92:	e7e0      	b.n	17a56 <__aeabi_ui2f+0x1e>
   17a94:	22b9      	movs	r2, #185	; 0xb9
   17a96:	0021      	movs	r1, r4
   17a98:	1ad2      	subs	r2, r2, r3
   17a9a:	4091      	lsls	r1, r2
   17a9c:	000a      	movs	r2, r1
   17a9e:	1e51      	subs	r1, r2, #1
   17aa0:	418a      	sbcs	r2, r1
   17aa2:	2105      	movs	r1, #5
   17aa4:	1a09      	subs	r1, r1, r0
   17aa6:	40cc      	lsrs	r4, r1
   17aa8:	4314      	orrs	r4, r2
   17aaa:	e7db      	b.n	17a64 <__aeabi_ui2f+0x2c>
   17aac:	4b04      	ldr	r3, [pc, #16]	; (17ac0 <__aeabi_ui2f+0x88>)
   17aae:	401c      	ands	r4, r3
   17ab0:	239f      	movs	r3, #159	; 0x9f
   17ab2:	01a4      	lsls	r4, r4, #6
   17ab4:	1a1b      	subs	r3, r3, r0
   17ab6:	0a64      	lsrs	r4, r4, #9
   17ab8:	b2db      	uxtb	r3, r3
   17aba:	e7cc      	b.n	17a56 <__aeabi_ui2f+0x1e>
   17abc:	0022      	movs	r2, r4
   17abe:	e7d7      	b.n	17a70 <__aeabi_ui2f+0x38>
   17ac0:	fbffffff 	.word	0xfbffffff

00017ac4 <__aeabi_dadd>:
   17ac4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   17ac6:	4645      	mov	r5, r8
   17ac8:	46de      	mov	lr, fp
   17aca:	4657      	mov	r7, sl
   17acc:	464e      	mov	r6, r9
   17ace:	030c      	lsls	r4, r1, #12
   17ad0:	b5e0      	push	{r5, r6, r7, lr}
   17ad2:	004e      	lsls	r6, r1, #1
   17ad4:	0fc9      	lsrs	r1, r1, #31
   17ad6:	4688      	mov	r8, r1
   17ad8:	000d      	movs	r5, r1
   17ada:	0a61      	lsrs	r1, r4, #9
   17adc:	0f44      	lsrs	r4, r0, #29
   17ade:	430c      	orrs	r4, r1
   17ae0:	00c7      	lsls	r7, r0, #3
   17ae2:	0319      	lsls	r1, r3, #12
   17ae4:	0058      	lsls	r0, r3, #1
   17ae6:	0fdb      	lsrs	r3, r3, #31
   17ae8:	469b      	mov	fp, r3
   17aea:	0a4b      	lsrs	r3, r1, #9
   17aec:	0f51      	lsrs	r1, r2, #29
   17aee:	430b      	orrs	r3, r1
   17af0:	0d76      	lsrs	r6, r6, #21
   17af2:	0d40      	lsrs	r0, r0, #21
   17af4:	0019      	movs	r1, r3
   17af6:	00d2      	lsls	r2, r2, #3
   17af8:	45d8      	cmp	r8, fp
   17afa:	d100      	bne.n	17afe <__aeabi_dadd+0x3a>
   17afc:	e0ae      	b.n	17c5c <__aeabi_dadd+0x198>
   17afe:	1a35      	subs	r5, r6, r0
   17b00:	2d00      	cmp	r5, #0
   17b02:	dc00      	bgt.n	17b06 <__aeabi_dadd+0x42>
   17b04:	e0f6      	b.n	17cf4 <__aeabi_dadd+0x230>
   17b06:	2800      	cmp	r0, #0
   17b08:	d10f      	bne.n	17b2a <__aeabi_dadd+0x66>
   17b0a:	4313      	orrs	r3, r2
   17b0c:	d100      	bne.n	17b10 <__aeabi_dadd+0x4c>
   17b0e:	e0db      	b.n	17cc8 <__aeabi_dadd+0x204>
   17b10:	1e6b      	subs	r3, r5, #1
   17b12:	2b00      	cmp	r3, #0
   17b14:	d000      	beq.n	17b18 <__aeabi_dadd+0x54>
   17b16:	e137      	b.n	17d88 <__aeabi_dadd+0x2c4>
   17b18:	1aba      	subs	r2, r7, r2
   17b1a:	4297      	cmp	r7, r2
   17b1c:	41bf      	sbcs	r7, r7
   17b1e:	1a64      	subs	r4, r4, r1
   17b20:	427f      	negs	r7, r7
   17b22:	1be4      	subs	r4, r4, r7
   17b24:	2601      	movs	r6, #1
   17b26:	0017      	movs	r7, r2
   17b28:	e024      	b.n	17b74 <__aeabi_dadd+0xb0>
   17b2a:	4bc6      	ldr	r3, [pc, #792]	; (17e44 <__aeabi_dadd+0x380>)
   17b2c:	429e      	cmp	r6, r3
   17b2e:	d04d      	beq.n	17bcc <__aeabi_dadd+0x108>
   17b30:	2380      	movs	r3, #128	; 0x80
   17b32:	041b      	lsls	r3, r3, #16
   17b34:	4319      	orrs	r1, r3
   17b36:	2d38      	cmp	r5, #56	; 0x38
   17b38:	dd00      	ble.n	17b3c <__aeabi_dadd+0x78>
   17b3a:	e107      	b.n	17d4c <__aeabi_dadd+0x288>
   17b3c:	2d1f      	cmp	r5, #31
   17b3e:	dd00      	ble.n	17b42 <__aeabi_dadd+0x7e>
   17b40:	e138      	b.n	17db4 <__aeabi_dadd+0x2f0>
   17b42:	2020      	movs	r0, #32
   17b44:	1b43      	subs	r3, r0, r5
   17b46:	469a      	mov	sl, r3
   17b48:	000b      	movs	r3, r1
   17b4a:	4650      	mov	r0, sl
   17b4c:	4083      	lsls	r3, r0
   17b4e:	4699      	mov	r9, r3
   17b50:	0013      	movs	r3, r2
   17b52:	4648      	mov	r0, r9
   17b54:	40eb      	lsrs	r3, r5
   17b56:	4318      	orrs	r0, r3
   17b58:	0003      	movs	r3, r0
   17b5a:	4650      	mov	r0, sl
   17b5c:	4082      	lsls	r2, r0
   17b5e:	1e50      	subs	r0, r2, #1
   17b60:	4182      	sbcs	r2, r0
   17b62:	40e9      	lsrs	r1, r5
   17b64:	431a      	orrs	r2, r3
   17b66:	1aba      	subs	r2, r7, r2
   17b68:	1a61      	subs	r1, r4, r1
   17b6a:	4297      	cmp	r7, r2
   17b6c:	41a4      	sbcs	r4, r4
   17b6e:	0017      	movs	r7, r2
   17b70:	4264      	negs	r4, r4
   17b72:	1b0c      	subs	r4, r1, r4
   17b74:	0223      	lsls	r3, r4, #8
   17b76:	d562      	bpl.n	17c3e <__aeabi_dadd+0x17a>
   17b78:	0264      	lsls	r4, r4, #9
   17b7a:	0a65      	lsrs	r5, r4, #9
   17b7c:	2d00      	cmp	r5, #0
   17b7e:	d100      	bne.n	17b82 <__aeabi_dadd+0xbe>
   17b80:	e0df      	b.n	17d42 <__aeabi_dadd+0x27e>
   17b82:	0028      	movs	r0, r5
   17b84:	f001 fd78 	bl	19678 <__clzsi2>
   17b88:	0003      	movs	r3, r0
   17b8a:	3b08      	subs	r3, #8
   17b8c:	2b1f      	cmp	r3, #31
   17b8e:	dd00      	ble.n	17b92 <__aeabi_dadd+0xce>
   17b90:	e0d2      	b.n	17d38 <__aeabi_dadd+0x274>
   17b92:	2220      	movs	r2, #32
   17b94:	003c      	movs	r4, r7
   17b96:	1ad2      	subs	r2, r2, r3
   17b98:	409d      	lsls	r5, r3
   17b9a:	40d4      	lsrs	r4, r2
   17b9c:	409f      	lsls	r7, r3
   17b9e:	4325      	orrs	r5, r4
   17ba0:	429e      	cmp	r6, r3
   17ba2:	dd00      	ble.n	17ba6 <__aeabi_dadd+0xe2>
   17ba4:	e0c4      	b.n	17d30 <__aeabi_dadd+0x26c>
   17ba6:	1b9e      	subs	r6, r3, r6
   17ba8:	1c73      	adds	r3, r6, #1
   17baa:	2b1f      	cmp	r3, #31
   17bac:	dd00      	ble.n	17bb0 <__aeabi_dadd+0xec>
   17bae:	e0f1      	b.n	17d94 <__aeabi_dadd+0x2d0>
   17bb0:	2220      	movs	r2, #32
   17bb2:	0038      	movs	r0, r7
   17bb4:	0029      	movs	r1, r5
   17bb6:	1ad2      	subs	r2, r2, r3
   17bb8:	40d8      	lsrs	r0, r3
   17bba:	4091      	lsls	r1, r2
   17bbc:	4097      	lsls	r7, r2
   17bbe:	002c      	movs	r4, r5
   17bc0:	4301      	orrs	r1, r0
   17bc2:	1e78      	subs	r0, r7, #1
   17bc4:	4187      	sbcs	r7, r0
   17bc6:	40dc      	lsrs	r4, r3
   17bc8:	2600      	movs	r6, #0
   17bca:	430f      	orrs	r7, r1
   17bcc:	077b      	lsls	r3, r7, #29
   17bce:	d009      	beq.n	17be4 <__aeabi_dadd+0x120>
   17bd0:	230f      	movs	r3, #15
   17bd2:	403b      	ands	r3, r7
   17bd4:	2b04      	cmp	r3, #4
   17bd6:	d005      	beq.n	17be4 <__aeabi_dadd+0x120>
   17bd8:	1d3b      	adds	r3, r7, #4
   17bda:	42bb      	cmp	r3, r7
   17bdc:	41bf      	sbcs	r7, r7
   17bde:	427f      	negs	r7, r7
   17be0:	19e4      	adds	r4, r4, r7
   17be2:	001f      	movs	r7, r3
   17be4:	0223      	lsls	r3, r4, #8
   17be6:	d52c      	bpl.n	17c42 <__aeabi_dadd+0x17e>
   17be8:	4b96      	ldr	r3, [pc, #600]	; (17e44 <__aeabi_dadd+0x380>)
   17bea:	3601      	adds	r6, #1
   17bec:	429e      	cmp	r6, r3
   17bee:	d100      	bne.n	17bf2 <__aeabi_dadd+0x12e>
   17bf0:	e09a      	b.n	17d28 <__aeabi_dadd+0x264>
   17bf2:	4645      	mov	r5, r8
   17bf4:	4b94      	ldr	r3, [pc, #592]	; (17e48 <__aeabi_dadd+0x384>)
   17bf6:	08ff      	lsrs	r7, r7, #3
   17bf8:	401c      	ands	r4, r3
   17bfa:	0760      	lsls	r0, r4, #29
   17bfc:	0576      	lsls	r6, r6, #21
   17bfe:	0264      	lsls	r4, r4, #9
   17c00:	4307      	orrs	r7, r0
   17c02:	0b24      	lsrs	r4, r4, #12
   17c04:	0d76      	lsrs	r6, r6, #21
   17c06:	2100      	movs	r1, #0
   17c08:	0324      	lsls	r4, r4, #12
   17c0a:	0b23      	lsrs	r3, r4, #12
   17c0c:	0d0c      	lsrs	r4, r1, #20
   17c0e:	4a8f      	ldr	r2, [pc, #572]	; (17e4c <__aeabi_dadd+0x388>)
   17c10:	0524      	lsls	r4, r4, #20
   17c12:	431c      	orrs	r4, r3
   17c14:	4014      	ands	r4, r2
   17c16:	0533      	lsls	r3, r6, #20
   17c18:	4323      	orrs	r3, r4
   17c1a:	005b      	lsls	r3, r3, #1
   17c1c:	07ed      	lsls	r5, r5, #31
   17c1e:	085b      	lsrs	r3, r3, #1
   17c20:	432b      	orrs	r3, r5
   17c22:	0038      	movs	r0, r7
   17c24:	0019      	movs	r1, r3
   17c26:	bc3c      	pop	{r2, r3, r4, r5}
   17c28:	4690      	mov	r8, r2
   17c2a:	4699      	mov	r9, r3
   17c2c:	46a2      	mov	sl, r4
   17c2e:	46ab      	mov	fp, r5
   17c30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   17c32:	4664      	mov	r4, ip
   17c34:	4304      	orrs	r4, r0
   17c36:	d100      	bne.n	17c3a <__aeabi_dadd+0x176>
   17c38:	e211      	b.n	1805e <__aeabi_dadd+0x59a>
   17c3a:	0004      	movs	r4, r0
   17c3c:	4667      	mov	r7, ip
   17c3e:	077b      	lsls	r3, r7, #29
   17c40:	d1c6      	bne.n	17bd0 <__aeabi_dadd+0x10c>
   17c42:	4645      	mov	r5, r8
   17c44:	0760      	lsls	r0, r4, #29
   17c46:	08ff      	lsrs	r7, r7, #3
   17c48:	4307      	orrs	r7, r0
   17c4a:	08e4      	lsrs	r4, r4, #3
   17c4c:	4b7d      	ldr	r3, [pc, #500]	; (17e44 <__aeabi_dadd+0x380>)
   17c4e:	429e      	cmp	r6, r3
   17c50:	d030      	beq.n	17cb4 <__aeabi_dadd+0x1f0>
   17c52:	0324      	lsls	r4, r4, #12
   17c54:	0576      	lsls	r6, r6, #21
   17c56:	0b24      	lsrs	r4, r4, #12
   17c58:	0d76      	lsrs	r6, r6, #21
   17c5a:	e7d4      	b.n	17c06 <__aeabi_dadd+0x142>
   17c5c:	1a33      	subs	r3, r6, r0
   17c5e:	469a      	mov	sl, r3
   17c60:	2b00      	cmp	r3, #0
   17c62:	dd78      	ble.n	17d56 <__aeabi_dadd+0x292>
   17c64:	2800      	cmp	r0, #0
   17c66:	d031      	beq.n	17ccc <__aeabi_dadd+0x208>
   17c68:	4876      	ldr	r0, [pc, #472]	; (17e44 <__aeabi_dadd+0x380>)
   17c6a:	4286      	cmp	r6, r0
   17c6c:	d0ae      	beq.n	17bcc <__aeabi_dadd+0x108>
   17c6e:	2080      	movs	r0, #128	; 0x80
   17c70:	0400      	lsls	r0, r0, #16
   17c72:	4301      	orrs	r1, r0
   17c74:	4653      	mov	r3, sl
   17c76:	2b38      	cmp	r3, #56	; 0x38
   17c78:	dc00      	bgt.n	17c7c <__aeabi_dadd+0x1b8>
   17c7a:	e0e9      	b.n	17e50 <__aeabi_dadd+0x38c>
   17c7c:	430a      	orrs	r2, r1
   17c7e:	1e51      	subs	r1, r2, #1
   17c80:	418a      	sbcs	r2, r1
   17c82:	2100      	movs	r1, #0
   17c84:	19d2      	adds	r2, r2, r7
   17c86:	42ba      	cmp	r2, r7
   17c88:	41bf      	sbcs	r7, r7
   17c8a:	1909      	adds	r1, r1, r4
   17c8c:	427c      	negs	r4, r7
   17c8e:	0017      	movs	r7, r2
   17c90:	190c      	adds	r4, r1, r4
   17c92:	0223      	lsls	r3, r4, #8
   17c94:	d5d3      	bpl.n	17c3e <__aeabi_dadd+0x17a>
   17c96:	4b6b      	ldr	r3, [pc, #428]	; (17e44 <__aeabi_dadd+0x380>)
   17c98:	3601      	adds	r6, #1
   17c9a:	429e      	cmp	r6, r3
   17c9c:	d100      	bne.n	17ca0 <__aeabi_dadd+0x1dc>
   17c9e:	e13a      	b.n	17f16 <__aeabi_dadd+0x452>
   17ca0:	2001      	movs	r0, #1
   17ca2:	4b69      	ldr	r3, [pc, #420]	; (17e48 <__aeabi_dadd+0x384>)
   17ca4:	401c      	ands	r4, r3
   17ca6:	087b      	lsrs	r3, r7, #1
   17ca8:	4007      	ands	r7, r0
   17caa:	431f      	orrs	r7, r3
   17cac:	07e0      	lsls	r0, r4, #31
   17cae:	4307      	orrs	r7, r0
   17cb0:	0864      	lsrs	r4, r4, #1
   17cb2:	e78b      	b.n	17bcc <__aeabi_dadd+0x108>
   17cb4:	0023      	movs	r3, r4
   17cb6:	433b      	orrs	r3, r7
   17cb8:	d100      	bne.n	17cbc <__aeabi_dadd+0x1f8>
   17cba:	e1cb      	b.n	18054 <__aeabi_dadd+0x590>
   17cbc:	2280      	movs	r2, #128	; 0x80
   17cbe:	0312      	lsls	r2, r2, #12
   17cc0:	4314      	orrs	r4, r2
   17cc2:	0324      	lsls	r4, r4, #12
   17cc4:	0b24      	lsrs	r4, r4, #12
   17cc6:	e79e      	b.n	17c06 <__aeabi_dadd+0x142>
   17cc8:	002e      	movs	r6, r5
   17cca:	e77f      	b.n	17bcc <__aeabi_dadd+0x108>
   17ccc:	0008      	movs	r0, r1
   17cce:	4310      	orrs	r0, r2
   17cd0:	d100      	bne.n	17cd4 <__aeabi_dadd+0x210>
   17cd2:	e0b4      	b.n	17e3e <__aeabi_dadd+0x37a>
   17cd4:	1e58      	subs	r0, r3, #1
   17cd6:	2800      	cmp	r0, #0
   17cd8:	d000      	beq.n	17cdc <__aeabi_dadd+0x218>
   17cda:	e0de      	b.n	17e9a <__aeabi_dadd+0x3d6>
   17cdc:	18ba      	adds	r2, r7, r2
   17cde:	42ba      	cmp	r2, r7
   17ce0:	419b      	sbcs	r3, r3
   17ce2:	1864      	adds	r4, r4, r1
   17ce4:	425b      	negs	r3, r3
   17ce6:	18e4      	adds	r4, r4, r3
   17ce8:	0017      	movs	r7, r2
   17cea:	2601      	movs	r6, #1
   17cec:	0223      	lsls	r3, r4, #8
   17cee:	d5a6      	bpl.n	17c3e <__aeabi_dadd+0x17a>
   17cf0:	2602      	movs	r6, #2
   17cf2:	e7d5      	b.n	17ca0 <__aeabi_dadd+0x1dc>
   17cf4:	2d00      	cmp	r5, #0
   17cf6:	d16e      	bne.n	17dd6 <__aeabi_dadd+0x312>
   17cf8:	1c70      	adds	r0, r6, #1
   17cfa:	0540      	lsls	r0, r0, #21
   17cfc:	0d40      	lsrs	r0, r0, #21
   17cfe:	2801      	cmp	r0, #1
   17d00:	dc00      	bgt.n	17d04 <__aeabi_dadd+0x240>
   17d02:	e0f9      	b.n	17ef8 <__aeabi_dadd+0x434>
   17d04:	1ab8      	subs	r0, r7, r2
   17d06:	4684      	mov	ip, r0
   17d08:	4287      	cmp	r7, r0
   17d0a:	4180      	sbcs	r0, r0
   17d0c:	1ae5      	subs	r5, r4, r3
   17d0e:	4240      	negs	r0, r0
   17d10:	1a2d      	subs	r5, r5, r0
   17d12:	0228      	lsls	r0, r5, #8
   17d14:	d400      	bmi.n	17d18 <__aeabi_dadd+0x254>
   17d16:	e089      	b.n	17e2c <__aeabi_dadd+0x368>
   17d18:	1bd7      	subs	r7, r2, r7
   17d1a:	42ba      	cmp	r2, r7
   17d1c:	4192      	sbcs	r2, r2
   17d1e:	1b1c      	subs	r4, r3, r4
   17d20:	4252      	negs	r2, r2
   17d22:	1aa5      	subs	r5, r4, r2
   17d24:	46d8      	mov	r8, fp
   17d26:	e729      	b.n	17b7c <__aeabi_dadd+0xb8>
   17d28:	4645      	mov	r5, r8
   17d2a:	2400      	movs	r4, #0
   17d2c:	2700      	movs	r7, #0
   17d2e:	e76a      	b.n	17c06 <__aeabi_dadd+0x142>
   17d30:	4c45      	ldr	r4, [pc, #276]	; (17e48 <__aeabi_dadd+0x384>)
   17d32:	1af6      	subs	r6, r6, r3
   17d34:	402c      	ands	r4, r5
   17d36:	e749      	b.n	17bcc <__aeabi_dadd+0x108>
   17d38:	003d      	movs	r5, r7
   17d3a:	3828      	subs	r0, #40	; 0x28
   17d3c:	4085      	lsls	r5, r0
   17d3e:	2700      	movs	r7, #0
   17d40:	e72e      	b.n	17ba0 <__aeabi_dadd+0xdc>
   17d42:	0038      	movs	r0, r7
   17d44:	f001 fc98 	bl	19678 <__clzsi2>
   17d48:	3020      	adds	r0, #32
   17d4a:	e71d      	b.n	17b88 <__aeabi_dadd+0xc4>
   17d4c:	430a      	orrs	r2, r1
   17d4e:	1e51      	subs	r1, r2, #1
   17d50:	418a      	sbcs	r2, r1
   17d52:	2100      	movs	r1, #0
   17d54:	e707      	b.n	17b66 <__aeabi_dadd+0xa2>
   17d56:	2b00      	cmp	r3, #0
   17d58:	d000      	beq.n	17d5c <__aeabi_dadd+0x298>
   17d5a:	e0f3      	b.n	17f44 <__aeabi_dadd+0x480>
   17d5c:	1c70      	adds	r0, r6, #1
   17d5e:	0543      	lsls	r3, r0, #21
   17d60:	0d5b      	lsrs	r3, r3, #21
   17d62:	2b01      	cmp	r3, #1
   17d64:	dc00      	bgt.n	17d68 <__aeabi_dadd+0x2a4>
   17d66:	e0ad      	b.n	17ec4 <__aeabi_dadd+0x400>
   17d68:	4b36      	ldr	r3, [pc, #216]	; (17e44 <__aeabi_dadd+0x380>)
   17d6a:	4298      	cmp	r0, r3
   17d6c:	d100      	bne.n	17d70 <__aeabi_dadd+0x2ac>
   17d6e:	e0d1      	b.n	17f14 <__aeabi_dadd+0x450>
   17d70:	18ba      	adds	r2, r7, r2
   17d72:	42ba      	cmp	r2, r7
   17d74:	41bf      	sbcs	r7, r7
   17d76:	1864      	adds	r4, r4, r1
   17d78:	427f      	negs	r7, r7
   17d7a:	19e4      	adds	r4, r4, r7
   17d7c:	07e7      	lsls	r7, r4, #31
   17d7e:	0852      	lsrs	r2, r2, #1
   17d80:	4317      	orrs	r7, r2
   17d82:	0864      	lsrs	r4, r4, #1
   17d84:	0006      	movs	r6, r0
   17d86:	e721      	b.n	17bcc <__aeabi_dadd+0x108>
   17d88:	482e      	ldr	r0, [pc, #184]	; (17e44 <__aeabi_dadd+0x380>)
   17d8a:	4285      	cmp	r5, r0
   17d8c:	d100      	bne.n	17d90 <__aeabi_dadd+0x2cc>
   17d8e:	e093      	b.n	17eb8 <__aeabi_dadd+0x3f4>
   17d90:	001d      	movs	r5, r3
   17d92:	e6d0      	b.n	17b36 <__aeabi_dadd+0x72>
   17d94:	0029      	movs	r1, r5
   17d96:	3e1f      	subs	r6, #31
   17d98:	40f1      	lsrs	r1, r6
   17d9a:	2b20      	cmp	r3, #32
   17d9c:	d100      	bne.n	17da0 <__aeabi_dadd+0x2dc>
   17d9e:	e08d      	b.n	17ebc <__aeabi_dadd+0x3f8>
   17da0:	2240      	movs	r2, #64	; 0x40
   17da2:	1ad3      	subs	r3, r2, r3
   17da4:	409d      	lsls	r5, r3
   17da6:	432f      	orrs	r7, r5
   17da8:	1e7d      	subs	r5, r7, #1
   17daa:	41af      	sbcs	r7, r5
   17dac:	2400      	movs	r4, #0
   17dae:	430f      	orrs	r7, r1
   17db0:	2600      	movs	r6, #0
   17db2:	e744      	b.n	17c3e <__aeabi_dadd+0x17a>
   17db4:	002b      	movs	r3, r5
   17db6:	0008      	movs	r0, r1
   17db8:	3b20      	subs	r3, #32
   17dba:	40d8      	lsrs	r0, r3
   17dbc:	0003      	movs	r3, r0
   17dbe:	2d20      	cmp	r5, #32
   17dc0:	d100      	bne.n	17dc4 <__aeabi_dadd+0x300>
   17dc2:	e07d      	b.n	17ec0 <__aeabi_dadd+0x3fc>
   17dc4:	2040      	movs	r0, #64	; 0x40
   17dc6:	1b45      	subs	r5, r0, r5
   17dc8:	40a9      	lsls	r1, r5
   17dca:	430a      	orrs	r2, r1
   17dcc:	1e51      	subs	r1, r2, #1
   17dce:	418a      	sbcs	r2, r1
   17dd0:	2100      	movs	r1, #0
   17dd2:	431a      	orrs	r2, r3
   17dd4:	e6c7      	b.n	17b66 <__aeabi_dadd+0xa2>
   17dd6:	2e00      	cmp	r6, #0
   17dd8:	d050      	beq.n	17e7c <__aeabi_dadd+0x3b8>
   17dda:	4e1a      	ldr	r6, [pc, #104]	; (17e44 <__aeabi_dadd+0x380>)
   17ddc:	42b0      	cmp	r0, r6
   17dde:	d057      	beq.n	17e90 <__aeabi_dadd+0x3cc>
   17de0:	2680      	movs	r6, #128	; 0x80
   17de2:	426b      	negs	r3, r5
   17de4:	4699      	mov	r9, r3
   17de6:	0436      	lsls	r6, r6, #16
   17de8:	4334      	orrs	r4, r6
   17dea:	464b      	mov	r3, r9
   17dec:	2b38      	cmp	r3, #56	; 0x38
   17dee:	dd00      	ble.n	17df2 <__aeabi_dadd+0x32e>
   17df0:	e0d6      	b.n	17fa0 <__aeabi_dadd+0x4dc>
   17df2:	2b1f      	cmp	r3, #31
   17df4:	dd00      	ble.n	17df8 <__aeabi_dadd+0x334>
   17df6:	e135      	b.n	18064 <__aeabi_dadd+0x5a0>
   17df8:	2620      	movs	r6, #32
   17dfa:	1af5      	subs	r5, r6, r3
   17dfc:	0026      	movs	r6, r4
   17dfe:	40ae      	lsls	r6, r5
   17e00:	46b2      	mov	sl, r6
   17e02:	003e      	movs	r6, r7
   17e04:	40de      	lsrs	r6, r3
   17e06:	46ac      	mov	ip, r5
   17e08:	0035      	movs	r5, r6
   17e0a:	4656      	mov	r6, sl
   17e0c:	432e      	orrs	r6, r5
   17e0e:	4665      	mov	r5, ip
   17e10:	40af      	lsls	r7, r5
   17e12:	1e7d      	subs	r5, r7, #1
   17e14:	41af      	sbcs	r7, r5
   17e16:	40dc      	lsrs	r4, r3
   17e18:	4337      	orrs	r7, r6
   17e1a:	1bd7      	subs	r7, r2, r7
   17e1c:	42ba      	cmp	r2, r7
   17e1e:	4192      	sbcs	r2, r2
   17e20:	1b0c      	subs	r4, r1, r4
   17e22:	4252      	negs	r2, r2
   17e24:	1aa4      	subs	r4, r4, r2
   17e26:	0006      	movs	r6, r0
   17e28:	46d8      	mov	r8, fp
   17e2a:	e6a3      	b.n	17b74 <__aeabi_dadd+0xb0>
   17e2c:	4664      	mov	r4, ip
   17e2e:	4667      	mov	r7, ip
   17e30:	432c      	orrs	r4, r5
   17e32:	d000      	beq.n	17e36 <__aeabi_dadd+0x372>
   17e34:	e6a2      	b.n	17b7c <__aeabi_dadd+0xb8>
   17e36:	2500      	movs	r5, #0
   17e38:	2600      	movs	r6, #0
   17e3a:	2700      	movs	r7, #0
   17e3c:	e706      	b.n	17c4c <__aeabi_dadd+0x188>
   17e3e:	001e      	movs	r6, r3
   17e40:	e6c4      	b.n	17bcc <__aeabi_dadd+0x108>
   17e42:	46c0      	nop			; (mov r8, r8)
   17e44:	000007ff 	.word	0x000007ff
   17e48:	ff7fffff 	.word	0xff7fffff
   17e4c:	800fffff 	.word	0x800fffff
   17e50:	2b1f      	cmp	r3, #31
   17e52:	dc63      	bgt.n	17f1c <__aeabi_dadd+0x458>
   17e54:	2020      	movs	r0, #32
   17e56:	1ac3      	subs	r3, r0, r3
   17e58:	0008      	movs	r0, r1
   17e5a:	4098      	lsls	r0, r3
   17e5c:	469c      	mov	ip, r3
   17e5e:	4683      	mov	fp, r0
   17e60:	4653      	mov	r3, sl
   17e62:	0010      	movs	r0, r2
   17e64:	40d8      	lsrs	r0, r3
   17e66:	0003      	movs	r3, r0
   17e68:	4658      	mov	r0, fp
   17e6a:	4318      	orrs	r0, r3
   17e6c:	4663      	mov	r3, ip
   17e6e:	409a      	lsls	r2, r3
   17e70:	1e53      	subs	r3, r2, #1
   17e72:	419a      	sbcs	r2, r3
   17e74:	4653      	mov	r3, sl
   17e76:	4302      	orrs	r2, r0
   17e78:	40d9      	lsrs	r1, r3
   17e7a:	e703      	b.n	17c84 <__aeabi_dadd+0x1c0>
   17e7c:	0026      	movs	r6, r4
   17e7e:	433e      	orrs	r6, r7
   17e80:	d006      	beq.n	17e90 <__aeabi_dadd+0x3cc>
   17e82:	43eb      	mvns	r3, r5
   17e84:	4699      	mov	r9, r3
   17e86:	2b00      	cmp	r3, #0
   17e88:	d0c7      	beq.n	17e1a <__aeabi_dadd+0x356>
   17e8a:	4e94      	ldr	r6, [pc, #592]	; (180dc <__aeabi_dadd+0x618>)
   17e8c:	42b0      	cmp	r0, r6
   17e8e:	d1ac      	bne.n	17dea <__aeabi_dadd+0x326>
   17e90:	000c      	movs	r4, r1
   17e92:	0017      	movs	r7, r2
   17e94:	0006      	movs	r6, r0
   17e96:	46d8      	mov	r8, fp
   17e98:	e698      	b.n	17bcc <__aeabi_dadd+0x108>
   17e9a:	4b90      	ldr	r3, [pc, #576]	; (180dc <__aeabi_dadd+0x618>)
   17e9c:	459a      	cmp	sl, r3
   17e9e:	d00b      	beq.n	17eb8 <__aeabi_dadd+0x3f4>
   17ea0:	4682      	mov	sl, r0
   17ea2:	e6e7      	b.n	17c74 <__aeabi_dadd+0x1b0>
   17ea4:	2800      	cmp	r0, #0
   17ea6:	d000      	beq.n	17eaa <__aeabi_dadd+0x3e6>
   17ea8:	e09e      	b.n	17fe8 <__aeabi_dadd+0x524>
   17eaa:	0018      	movs	r0, r3
   17eac:	4310      	orrs	r0, r2
   17eae:	d100      	bne.n	17eb2 <__aeabi_dadd+0x3ee>
   17eb0:	e0e9      	b.n	18086 <__aeabi_dadd+0x5c2>
   17eb2:	001c      	movs	r4, r3
   17eb4:	0017      	movs	r7, r2
   17eb6:	46d8      	mov	r8, fp
   17eb8:	4e88      	ldr	r6, [pc, #544]	; (180dc <__aeabi_dadd+0x618>)
   17eba:	e687      	b.n	17bcc <__aeabi_dadd+0x108>
   17ebc:	2500      	movs	r5, #0
   17ebe:	e772      	b.n	17da6 <__aeabi_dadd+0x2e2>
   17ec0:	2100      	movs	r1, #0
   17ec2:	e782      	b.n	17dca <__aeabi_dadd+0x306>
   17ec4:	0023      	movs	r3, r4
   17ec6:	433b      	orrs	r3, r7
   17ec8:	2e00      	cmp	r6, #0
   17eca:	d000      	beq.n	17ece <__aeabi_dadd+0x40a>
   17ecc:	e0ab      	b.n	18026 <__aeabi_dadd+0x562>
   17ece:	2b00      	cmp	r3, #0
   17ed0:	d100      	bne.n	17ed4 <__aeabi_dadd+0x410>
   17ed2:	e0e7      	b.n	180a4 <__aeabi_dadd+0x5e0>
   17ed4:	000b      	movs	r3, r1
   17ed6:	4313      	orrs	r3, r2
   17ed8:	d100      	bne.n	17edc <__aeabi_dadd+0x418>
   17eda:	e677      	b.n	17bcc <__aeabi_dadd+0x108>
   17edc:	18ba      	adds	r2, r7, r2
   17ede:	42ba      	cmp	r2, r7
   17ee0:	41bf      	sbcs	r7, r7
   17ee2:	1864      	adds	r4, r4, r1
   17ee4:	427f      	negs	r7, r7
   17ee6:	19e4      	adds	r4, r4, r7
   17ee8:	0223      	lsls	r3, r4, #8
   17eea:	d400      	bmi.n	17eee <__aeabi_dadd+0x42a>
   17eec:	e0f2      	b.n	180d4 <__aeabi_dadd+0x610>
   17eee:	4b7c      	ldr	r3, [pc, #496]	; (180e0 <__aeabi_dadd+0x61c>)
   17ef0:	0017      	movs	r7, r2
   17ef2:	401c      	ands	r4, r3
   17ef4:	0006      	movs	r6, r0
   17ef6:	e669      	b.n	17bcc <__aeabi_dadd+0x108>
   17ef8:	0020      	movs	r0, r4
   17efa:	4338      	orrs	r0, r7
   17efc:	2e00      	cmp	r6, #0
   17efe:	d1d1      	bne.n	17ea4 <__aeabi_dadd+0x3e0>
   17f00:	2800      	cmp	r0, #0
   17f02:	d15b      	bne.n	17fbc <__aeabi_dadd+0x4f8>
   17f04:	001c      	movs	r4, r3
   17f06:	4314      	orrs	r4, r2
   17f08:	d100      	bne.n	17f0c <__aeabi_dadd+0x448>
   17f0a:	e0a8      	b.n	1805e <__aeabi_dadd+0x59a>
   17f0c:	001c      	movs	r4, r3
   17f0e:	0017      	movs	r7, r2
   17f10:	46d8      	mov	r8, fp
   17f12:	e65b      	b.n	17bcc <__aeabi_dadd+0x108>
   17f14:	0006      	movs	r6, r0
   17f16:	2400      	movs	r4, #0
   17f18:	2700      	movs	r7, #0
   17f1a:	e697      	b.n	17c4c <__aeabi_dadd+0x188>
   17f1c:	4650      	mov	r0, sl
   17f1e:	000b      	movs	r3, r1
   17f20:	3820      	subs	r0, #32
   17f22:	40c3      	lsrs	r3, r0
   17f24:	4699      	mov	r9, r3
   17f26:	4653      	mov	r3, sl
   17f28:	2b20      	cmp	r3, #32
   17f2a:	d100      	bne.n	17f2e <__aeabi_dadd+0x46a>
   17f2c:	e095      	b.n	1805a <__aeabi_dadd+0x596>
   17f2e:	2340      	movs	r3, #64	; 0x40
   17f30:	4650      	mov	r0, sl
   17f32:	1a1b      	subs	r3, r3, r0
   17f34:	4099      	lsls	r1, r3
   17f36:	430a      	orrs	r2, r1
   17f38:	1e51      	subs	r1, r2, #1
   17f3a:	418a      	sbcs	r2, r1
   17f3c:	464b      	mov	r3, r9
   17f3e:	2100      	movs	r1, #0
   17f40:	431a      	orrs	r2, r3
   17f42:	e69f      	b.n	17c84 <__aeabi_dadd+0x1c0>
   17f44:	2e00      	cmp	r6, #0
   17f46:	d130      	bne.n	17faa <__aeabi_dadd+0x4e6>
   17f48:	0026      	movs	r6, r4
   17f4a:	433e      	orrs	r6, r7
   17f4c:	d067      	beq.n	1801e <__aeabi_dadd+0x55a>
   17f4e:	43db      	mvns	r3, r3
   17f50:	469a      	mov	sl, r3
   17f52:	2b00      	cmp	r3, #0
   17f54:	d01c      	beq.n	17f90 <__aeabi_dadd+0x4cc>
   17f56:	4e61      	ldr	r6, [pc, #388]	; (180dc <__aeabi_dadd+0x618>)
   17f58:	42b0      	cmp	r0, r6
   17f5a:	d060      	beq.n	1801e <__aeabi_dadd+0x55a>
   17f5c:	4653      	mov	r3, sl
   17f5e:	2b38      	cmp	r3, #56	; 0x38
   17f60:	dd00      	ble.n	17f64 <__aeabi_dadd+0x4a0>
   17f62:	e096      	b.n	18092 <__aeabi_dadd+0x5ce>
   17f64:	2b1f      	cmp	r3, #31
   17f66:	dd00      	ble.n	17f6a <__aeabi_dadd+0x4a6>
   17f68:	e09f      	b.n	180aa <__aeabi_dadd+0x5e6>
   17f6a:	2620      	movs	r6, #32
   17f6c:	1af3      	subs	r3, r6, r3
   17f6e:	0026      	movs	r6, r4
   17f70:	409e      	lsls	r6, r3
   17f72:	469c      	mov	ip, r3
   17f74:	46b3      	mov	fp, r6
   17f76:	4653      	mov	r3, sl
   17f78:	003e      	movs	r6, r7
   17f7a:	40de      	lsrs	r6, r3
   17f7c:	0033      	movs	r3, r6
   17f7e:	465e      	mov	r6, fp
   17f80:	431e      	orrs	r6, r3
   17f82:	4663      	mov	r3, ip
   17f84:	409f      	lsls	r7, r3
   17f86:	1e7b      	subs	r3, r7, #1
   17f88:	419f      	sbcs	r7, r3
   17f8a:	4653      	mov	r3, sl
   17f8c:	40dc      	lsrs	r4, r3
   17f8e:	4337      	orrs	r7, r6
   17f90:	18bf      	adds	r7, r7, r2
   17f92:	4297      	cmp	r7, r2
   17f94:	4192      	sbcs	r2, r2
   17f96:	1864      	adds	r4, r4, r1
   17f98:	4252      	negs	r2, r2
   17f9a:	18a4      	adds	r4, r4, r2
   17f9c:	0006      	movs	r6, r0
   17f9e:	e678      	b.n	17c92 <__aeabi_dadd+0x1ce>
   17fa0:	4327      	orrs	r7, r4
   17fa2:	1e7c      	subs	r4, r7, #1
   17fa4:	41a7      	sbcs	r7, r4
   17fa6:	2400      	movs	r4, #0
   17fa8:	e737      	b.n	17e1a <__aeabi_dadd+0x356>
   17faa:	4e4c      	ldr	r6, [pc, #304]	; (180dc <__aeabi_dadd+0x618>)
   17fac:	42b0      	cmp	r0, r6
   17fae:	d036      	beq.n	1801e <__aeabi_dadd+0x55a>
   17fb0:	2680      	movs	r6, #128	; 0x80
   17fb2:	425b      	negs	r3, r3
   17fb4:	0436      	lsls	r6, r6, #16
   17fb6:	469a      	mov	sl, r3
   17fb8:	4334      	orrs	r4, r6
   17fba:	e7cf      	b.n	17f5c <__aeabi_dadd+0x498>
   17fbc:	0018      	movs	r0, r3
   17fbe:	4310      	orrs	r0, r2
   17fc0:	d100      	bne.n	17fc4 <__aeabi_dadd+0x500>
   17fc2:	e603      	b.n	17bcc <__aeabi_dadd+0x108>
   17fc4:	1ab8      	subs	r0, r7, r2
   17fc6:	4684      	mov	ip, r0
   17fc8:	4567      	cmp	r7, ip
   17fca:	41ad      	sbcs	r5, r5
   17fcc:	1ae0      	subs	r0, r4, r3
   17fce:	426d      	negs	r5, r5
   17fd0:	1b40      	subs	r0, r0, r5
   17fd2:	0205      	lsls	r5, r0, #8
   17fd4:	d400      	bmi.n	17fd8 <__aeabi_dadd+0x514>
   17fd6:	e62c      	b.n	17c32 <__aeabi_dadd+0x16e>
   17fd8:	1bd7      	subs	r7, r2, r7
   17fda:	42ba      	cmp	r2, r7
   17fdc:	4192      	sbcs	r2, r2
   17fde:	1b1c      	subs	r4, r3, r4
   17fe0:	4252      	negs	r2, r2
   17fe2:	1aa4      	subs	r4, r4, r2
   17fe4:	46d8      	mov	r8, fp
   17fe6:	e5f1      	b.n	17bcc <__aeabi_dadd+0x108>
   17fe8:	0018      	movs	r0, r3
   17fea:	4310      	orrs	r0, r2
   17fec:	d100      	bne.n	17ff0 <__aeabi_dadd+0x52c>
   17fee:	e763      	b.n	17eb8 <__aeabi_dadd+0x3f4>
   17ff0:	08f8      	lsrs	r0, r7, #3
   17ff2:	0767      	lsls	r7, r4, #29
   17ff4:	4307      	orrs	r7, r0
   17ff6:	2080      	movs	r0, #128	; 0x80
   17ff8:	08e4      	lsrs	r4, r4, #3
   17ffa:	0300      	lsls	r0, r0, #12
   17ffc:	4204      	tst	r4, r0
   17ffe:	d008      	beq.n	18012 <__aeabi_dadd+0x54e>
   18000:	08dd      	lsrs	r5, r3, #3
   18002:	4205      	tst	r5, r0
   18004:	d105      	bne.n	18012 <__aeabi_dadd+0x54e>
   18006:	08d2      	lsrs	r2, r2, #3
   18008:	0759      	lsls	r1, r3, #29
   1800a:	4311      	orrs	r1, r2
   1800c:	000f      	movs	r7, r1
   1800e:	002c      	movs	r4, r5
   18010:	46d8      	mov	r8, fp
   18012:	0f7b      	lsrs	r3, r7, #29
   18014:	00e4      	lsls	r4, r4, #3
   18016:	431c      	orrs	r4, r3
   18018:	00ff      	lsls	r7, r7, #3
   1801a:	4e30      	ldr	r6, [pc, #192]	; (180dc <__aeabi_dadd+0x618>)
   1801c:	e5d6      	b.n	17bcc <__aeabi_dadd+0x108>
   1801e:	000c      	movs	r4, r1
   18020:	0017      	movs	r7, r2
   18022:	0006      	movs	r6, r0
   18024:	e5d2      	b.n	17bcc <__aeabi_dadd+0x108>
   18026:	2b00      	cmp	r3, #0
   18028:	d038      	beq.n	1809c <__aeabi_dadd+0x5d8>
   1802a:	000b      	movs	r3, r1
   1802c:	4313      	orrs	r3, r2
   1802e:	d100      	bne.n	18032 <__aeabi_dadd+0x56e>
   18030:	e742      	b.n	17eb8 <__aeabi_dadd+0x3f4>
   18032:	08f8      	lsrs	r0, r7, #3
   18034:	0767      	lsls	r7, r4, #29
   18036:	4307      	orrs	r7, r0
   18038:	2080      	movs	r0, #128	; 0x80
   1803a:	08e4      	lsrs	r4, r4, #3
   1803c:	0300      	lsls	r0, r0, #12
   1803e:	4204      	tst	r4, r0
   18040:	d0e7      	beq.n	18012 <__aeabi_dadd+0x54e>
   18042:	08cb      	lsrs	r3, r1, #3
   18044:	4203      	tst	r3, r0
   18046:	d1e4      	bne.n	18012 <__aeabi_dadd+0x54e>
   18048:	08d2      	lsrs	r2, r2, #3
   1804a:	0749      	lsls	r1, r1, #29
   1804c:	4311      	orrs	r1, r2
   1804e:	000f      	movs	r7, r1
   18050:	001c      	movs	r4, r3
   18052:	e7de      	b.n	18012 <__aeabi_dadd+0x54e>
   18054:	2700      	movs	r7, #0
   18056:	2400      	movs	r4, #0
   18058:	e5d5      	b.n	17c06 <__aeabi_dadd+0x142>
   1805a:	2100      	movs	r1, #0
   1805c:	e76b      	b.n	17f36 <__aeabi_dadd+0x472>
   1805e:	2500      	movs	r5, #0
   18060:	2700      	movs	r7, #0
   18062:	e5f3      	b.n	17c4c <__aeabi_dadd+0x188>
   18064:	464e      	mov	r6, r9
   18066:	0025      	movs	r5, r4
   18068:	3e20      	subs	r6, #32
   1806a:	40f5      	lsrs	r5, r6
   1806c:	464b      	mov	r3, r9
   1806e:	002e      	movs	r6, r5
   18070:	2b20      	cmp	r3, #32
   18072:	d02d      	beq.n	180d0 <__aeabi_dadd+0x60c>
   18074:	2540      	movs	r5, #64	; 0x40
   18076:	1aed      	subs	r5, r5, r3
   18078:	40ac      	lsls	r4, r5
   1807a:	4327      	orrs	r7, r4
   1807c:	1e7c      	subs	r4, r7, #1
   1807e:	41a7      	sbcs	r7, r4
   18080:	2400      	movs	r4, #0
   18082:	4337      	orrs	r7, r6
   18084:	e6c9      	b.n	17e1a <__aeabi_dadd+0x356>
   18086:	2480      	movs	r4, #128	; 0x80
   18088:	2500      	movs	r5, #0
   1808a:	0324      	lsls	r4, r4, #12
   1808c:	4e13      	ldr	r6, [pc, #76]	; (180dc <__aeabi_dadd+0x618>)
   1808e:	2700      	movs	r7, #0
   18090:	e5dc      	b.n	17c4c <__aeabi_dadd+0x188>
   18092:	4327      	orrs	r7, r4
   18094:	1e7c      	subs	r4, r7, #1
   18096:	41a7      	sbcs	r7, r4
   18098:	2400      	movs	r4, #0
   1809a:	e779      	b.n	17f90 <__aeabi_dadd+0x4cc>
   1809c:	000c      	movs	r4, r1
   1809e:	0017      	movs	r7, r2
   180a0:	4e0e      	ldr	r6, [pc, #56]	; (180dc <__aeabi_dadd+0x618>)
   180a2:	e593      	b.n	17bcc <__aeabi_dadd+0x108>
   180a4:	000c      	movs	r4, r1
   180a6:	0017      	movs	r7, r2
   180a8:	e590      	b.n	17bcc <__aeabi_dadd+0x108>
   180aa:	4656      	mov	r6, sl
   180ac:	0023      	movs	r3, r4
   180ae:	3e20      	subs	r6, #32
   180b0:	40f3      	lsrs	r3, r6
   180b2:	4699      	mov	r9, r3
   180b4:	4653      	mov	r3, sl
   180b6:	2b20      	cmp	r3, #32
   180b8:	d00e      	beq.n	180d8 <__aeabi_dadd+0x614>
   180ba:	2340      	movs	r3, #64	; 0x40
   180bc:	4656      	mov	r6, sl
   180be:	1b9b      	subs	r3, r3, r6
   180c0:	409c      	lsls	r4, r3
   180c2:	4327      	orrs	r7, r4
   180c4:	1e7c      	subs	r4, r7, #1
   180c6:	41a7      	sbcs	r7, r4
   180c8:	464b      	mov	r3, r9
   180ca:	2400      	movs	r4, #0
   180cc:	431f      	orrs	r7, r3
   180ce:	e75f      	b.n	17f90 <__aeabi_dadd+0x4cc>
   180d0:	2400      	movs	r4, #0
   180d2:	e7d2      	b.n	1807a <__aeabi_dadd+0x5b6>
   180d4:	0017      	movs	r7, r2
   180d6:	e5b2      	b.n	17c3e <__aeabi_dadd+0x17a>
   180d8:	2400      	movs	r4, #0
   180da:	e7f2      	b.n	180c2 <__aeabi_dadd+0x5fe>
   180dc:	000007ff 	.word	0x000007ff
   180e0:	ff7fffff 	.word	0xff7fffff

000180e4 <__aeabi_ddiv>:
   180e4:	b5f0      	push	{r4, r5, r6, r7, lr}
   180e6:	4657      	mov	r7, sl
   180e8:	4645      	mov	r5, r8
   180ea:	46de      	mov	lr, fp
   180ec:	464e      	mov	r6, r9
   180ee:	b5e0      	push	{r5, r6, r7, lr}
   180f0:	004c      	lsls	r4, r1, #1
   180f2:	030e      	lsls	r6, r1, #12
   180f4:	b087      	sub	sp, #28
   180f6:	4683      	mov	fp, r0
   180f8:	4692      	mov	sl, r2
   180fa:	001d      	movs	r5, r3
   180fc:	4680      	mov	r8, r0
   180fe:	0b36      	lsrs	r6, r6, #12
   18100:	0d64      	lsrs	r4, r4, #21
   18102:	0fcf      	lsrs	r7, r1, #31
   18104:	2c00      	cmp	r4, #0
   18106:	d04f      	beq.n	181a8 <__aeabi_ddiv+0xc4>
   18108:	4b6f      	ldr	r3, [pc, #444]	; (182c8 <__aeabi_ddiv+0x1e4>)
   1810a:	429c      	cmp	r4, r3
   1810c:	d035      	beq.n	1817a <__aeabi_ddiv+0x96>
   1810e:	2380      	movs	r3, #128	; 0x80
   18110:	0f42      	lsrs	r2, r0, #29
   18112:	041b      	lsls	r3, r3, #16
   18114:	00f6      	lsls	r6, r6, #3
   18116:	4313      	orrs	r3, r2
   18118:	4333      	orrs	r3, r6
   1811a:	4699      	mov	r9, r3
   1811c:	00c3      	lsls	r3, r0, #3
   1811e:	4698      	mov	r8, r3
   18120:	4b6a      	ldr	r3, [pc, #424]	; (182cc <__aeabi_ddiv+0x1e8>)
   18122:	2600      	movs	r6, #0
   18124:	469c      	mov	ip, r3
   18126:	2300      	movs	r3, #0
   18128:	4464      	add	r4, ip
   1812a:	9303      	str	r3, [sp, #12]
   1812c:	032b      	lsls	r3, r5, #12
   1812e:	0b1b      	lsrs	r3, r3, #12
   18130:	469b      	mov	fp, r3
   18132:	006b      	lsls	r3, r5, #1
   18134:	0fed      	lsrs	r5, r5, #31
   18136:	4650      	mov	r0, sl
   18138:	0d5b      	lsrs	r3, r3, #21
   1813a:	9501      	str	r5, [sp, #4]
   1813c:	d05e      	beq.n	181fc <__aeabi_ddiv+0x118>
   1813e:	4a62      	ldr	r2, [pc, #392]	; (182c8 <__aeabi_ddiv+0x1e4>)
   18140:	4293      	cmp	r3, r2
   18142:	d053      	beq.n	181ec <__aeabi_ddiv+0x108>
   18144:	465a      	mov	r2, fp
   18146:	00d1      	lsls	r1, r2, #3
   18148:	2280      	movs	r2, #128	; 0x80
   1814a:	0f40      	lsrs	r0, r0, #29
   1814c:	0412      	lsls	r2, r2, #16
   1814e:	4302      	orrs	r2, r0
   18150:	430a      	orrs	r2, r1
   18152:	4693      	mov	fp, r2
   18154:	4652      	mov	r2, sl
   18156:	00d1      	lsls	r1, r2, #3
   18158:	4a5c      	ldr	r2, [pc, #368]	; (182cc <__aeabi_ddiv+0x1e8>)
   1815a:	4694      	mov	ip, r2
   1815c:	2200      	movs	r2, #0
   1815e:	4463      	add	r3, ip
   18160:	0038      	movs	r0, r7
   18162:	4068      	eors	r0, r5
   18164:	4684      	mov	ip, r0
   18166:	9002      	str	r0, [sp, #8]
   18168:	1ae4      	subs	r4, r4, r3
   1816a:	4316      	orrs	r6, r2
   1816c:	2e0f      	cmp	r6, #15
   1816e:	d900      	bls.n	18172 <__aeabi_ddiv+0x8e>
   18170:	e0b4      	b.n	182dc <__aeabi_ddiv+0x1f8>
   18172:	4b57      	ldr	r3, [pc, #348]	; (182d0 <__aeabi_ddiv+0x1ec>)
   18174:	00b6      	lsls	r6, r6, #2
   18176:	599b      	ldr	r3, [r3, r6]
   18178:	469f      	mov	pc, r3
   1817a:	0003      	movs	r3, r0
   1817c:	4333      	orrs	r3, r6
   1817e:	4699      	mov	r9, r3
   18180:	d16c      	bne.n	1825c <__aeabi_ddiv+0x178>
   18182:	2300      	movs	r3, #0
   18184:	4698      	mov	r8, r3
   18186:	3302      	adds	r3, #2
   18188:	2608      	movs	r6, #8
   1818a:	9303      	str	r3, [sp, #12]
   1818c:	e7ce      	b.n	1812c <__aeabi_ddiv+0x48>
   1818e:	46cb      	mov	fp, r9
   18190:	4641      	mov	r1, r8
   18192:	9a03      	ldr	r2, [sp, #12]
   18194:	9701      	str	r7, [sp, #4]
   18196:	2a02      	cmp	r2, #2
   18198:	d165      	bne.n	18266 <__aeabi_ddiv+0x182>
   1819a:	9b01      	ldr	r3, [sp, #4]
   1819c:	4c4a      	ldr	r4, [pc, #296]	; (182c8 <__aeabi_ddiv+0x1e4>)
   1819e:	469c      	mov	ip, r3
   181a0:	2300      	movs	r3, #0
   181a2:	2200      	movs	r2, #0
   181a4:	4698      	mov	r8, r3
   181a6:	e06b      	b.n	18280 <__aeabi_ddiv+0x19c>
   181a8:	0003      	movs	r3, r0
   181aa:	4333      	orrs	r3, r6
   181ac:	4699      	mov	r9, r3
   181ae:	d04e      	beq.n	1824e <__aeabi_ddiv+0x16a>
   181b0:	2e00      	cmp	r6, #0
   181b2:	d100      	bne.n	181b6 <__aeabi_ddiv+0xd2>
   181b4:	e1bc      	b.n	18530 <__aeabi_ddiv+0x44c>
   181b6:	0030      	movs	r0, r6
   181b8:	f001 fa5e 	bl	19678 <__clzsi2>
   181bc:	0003      	movs	r3, r0
   181be:	3b0b      	subs	r3, #11
   181c0:	2b1c      	cmp	r3, #28
   181c2:	dd00      	ble.n	181c6 <__aeabi_ddiv+0xe2>
   181c4:	e1ac      	b.n	18520 <__aeabi_ddiv+0x43c>
   181c6:	221d      	movs	r2, #29
   181c8:	1ad3      	subs	r3, r2, r3
   181ca:	465a      	mov	r2, fp
   181cc:	0001      	movs	r1, r0
   181ce:	40da      	lsrs	r2, r3
   181d0:	3908      	subs	r1, #8
   181d2:	408e      	lsls	r6, r1
   181d4:	0013      	movs	r3, r2
   181d6:	4333      	orrs	r3, r6
   181d8:	4699      	mov	r9, r3
   181da:	465b      	mov	r3, fp
   181dc:	408b      	lsls	r3, r1
   181de:	4698      	mov	r8, r3
   181e0:	2300      	movs	r3, #0
   181e2:	4c3c      	ldr	r4, [pc, #240]	; (182d4 <__aeabi_ddiv+0x1f0>)
   181e4:	2600      	movs	r6, #0
   181e6:	1a24      	subs	r4, r4, r0
   181e8:	9303      	str	r3, [sp, #12]
   181ea:	e79f      	b.n	1812c <__aeabi_ddiv+0x48>
   181ec:	4651      	mov	r1, sl
   181ee:	465a      	mov	r2, fp
   181f0:	4311      	orrs	r1, r2
   181f2:	d129      	bne.n	18248 <__aeabi_ddiv+0x164>
   181f4:	2200      	movs	r2, #0
   181f6:	4693      	mov	fp, r2
   181f8:	3202      	adds	r2, #2
   181fa:	e7b1      	b.n	18160 <__aeabi_ddiv+0x7c>
   181fc:	4659      	mov	r1, fp
   181fe:	4301      	orrs	r1, r0
   18200:	d01e      	beq.n	18240 <__aeabi_ddiv+0x15c>
   18202:	465b      	mov	r3, fp
   18204:	2b00      	cmp	r3, #0
   18206:	d100      	bne.n	1820a <__aeabi_ddiv+0x126>
   18208:	e19e      	b.n	18548 <__aeabi_ddiv+0x464>
   1820a:	4658      	mov	r0, fp
   1820c:	f001 fa34 	bl	19678 <__clzsi2>
   18210:	0003      	movs	r3, r0
   18212:	3b0b      	subs	r3, #11
   18214:	2b1c      	cmp	r3, #28
   18216:	dd00      	ble.n	1821a <__aeabi_ddiv+0x136>
   18218:	e18f      	b.n	1853a <__aeabi_ddiv+0x456>
   1821a:	0002      	movs	r2, r0
   1821c:	4659      	mov	r1, fp
   1821e:	3a08      	subs	r2, #8
   18220:	4091      	lsls	r1, r2
   18222:	468b      	mov	fp, r1
   18224:	211d      	movs	r1, #29
   18226:	1acb      	subs	r3, r1, r3
   18228:	4651      	mov	r1, sl
   1822a:	40d9      	lsrs	r1, r3
   1822c:	000b      	movs	r3, r1
   1822e:	4659      	mov	r1, fp
   18230:	430b      	orrs	r3, r1
   18232:	4651      	mov	r1, sl
   18234:	469b      	mov	fp, r3
   18236:	4091      	lsls	r1, r2
   18238:	4b26      	ldr	r3, [pc, #152]	; (182d4 <__aeabi_ddiv+0x1f0>)
   1823a:	2200      	movs	r2, #0
   1823c:	1a1b      	subs	r3, r3, r0
   1823e:	e78f      	b.n	18160 <__aeabi_ddiv+0x7c>
   18240:	2300      	movs	r3, #0
   18242:	2201      	movs	r2, #1
   18244:	469b      	mov	fp, r3
   18246:	e78b      	b.n	18160 <__aeabi_ddiv+0x7c>
   18248:	4651      	mov	r1, sl
   1824a:	2203      	movs	r2, #3
   1824c:	e788      	b.n	18160 <__aeabi_ddiv+0x7c>
   1824e:	2300      	movs	r3, #0
   18250:	4698      	mov	r8, r3
   18252:	3301      	adds	r3, #1
   18254:	2604      	movs	r6, #4
   18256:	2400      	movs	r4, #0
   18258:	9303      	str	r3, [sp, #12]
   1825a:	e767      	b.n	1812c <__aeabi_ddiv+0x48>
   1825c:	2303      	movs	r3, #3
   1825e:	46b1      	mov	r9, r6
   18260:	9303      	str	r3, [sp, #12]
   18262:	260c      	movs	r6, #12
   18264:	e762      	b.n	1812c <__aeabi_ddiv+0x48>
   18266:	2a03      	cmp	r2, #3
   18268:	d100      	bne.n	1826c <__aeabi_ddiv+0x188>
   1826a:	e25c      	b.n	18726 <__aeabi_ddiv+0x642>
   1826c:	9b01      	ldr	r3, [sp, #4]
   1826e:	2a01      	cmp	r2, #1
   18270:	d000      	beq.n	18274 <__aeabi_ddiv+0x190>
   18272:	e1e4      	b.n	1863e <__aeabi_ddiv+0x55a>
   18274:	4013      	ands	r3, r2
   18276:	469c      	mov	ip, r3
   18278:	2300      	movs	r3, #0
   1827a:	2400      	movs	r4, #0
   1827c:	2200      	movs	r2, #0
   1827e:	4698      	mov	r8, r3
   18280:	2100      	movs	r1, #0
   18282:	0312      	lsls	r2, r2, #12
   18284:	0b13      	lsrs	r3, r2, #12
   18286:	0d0a      	lsrs	r2, r1, #20
   18288:	0512      	lsls	r2, r2, #20
   1828a:	431a      	orrs	r2, r3
   1828c:	0523      	lsls	r3, r4, #20
   1828e:	4c12      	ldr	r4, [pc, #72]	; (182d8 <__aeabi_ddiv+0x1f4>)
   18290:	4640      	mov	r0, r8
   18292:	4022      	ands	r2, r4
   18294:	4313      	orrs	r3, r2
   18296:	4662      	mov	r2, ip
   18298:	005b      	lsls	r3, r3, #1
   1829a:	07d2      	lsls	r2, r2, #31
   1829c:	085b      	lsrs	r3, r3, #1
   1829e:	4313      	orrs	r3, r2
   182a0:	0019      	movs	r1, r3
   182a2:	b007      	add	sp, #28
   182a4:	bc3c      	pop	{r2, r3, r4, r5}
   182a6:	4690      	mov	r8, r2
   182a8:	4699      	mov	r9, r3
   182aa:	46a2      	mov	sl, r4
   182ac:	46ab      	mov	fp, r5
   182ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
   182b0:	2300      	movs	r3, #0
   182b2:	2280      	movs	r2, #128	; 0x80
   182b4:	469c      	mov	ip, r3
   182b6:	0312      	lsls	r2, r2, #12
   182b8:	4698      	mov	r8, r3
   182ba:	4c03      	ldr	r4, [pc, #12]	; (182c8 <__aeabi_ddiv+0x1e4>)
   182bc:	e7e0      	b.n	18280 <__aeabi_ddiv+0x19c>
   182be:	2300      	movs	r3, #0
   182c0:	4c01      	ldr	r4, [pc, #4]	; (182c8 <__aeabi_ddiv+0x1e4>)
   182c2:	2200      	movs	r2, #0
   182c4:	4698      	mov	r8, r3
   182c6:	e7db      	b.n	18280 <__aeabi_ddiv+0x19c>
   182c8:	000007ff 	.word	0x000007ff
   182cc:	fffffc01 	.word	0xfffffc01
   182d0:	000204f4 	.word	0x000204f4
   182d4:	fffffc0d 	.word	0xfffffc0d
   182d8:	800fffff 	.word	0x800fffff
   182dc:	45d9      	cmp	r9, fp
   182de:	d900      	bls.n	182e2 <__aeabi_ddiv+0x1fe>
   182e0:	e139      	b.n	18556 <__aeabi_ddiv+0x472>
   182e2:	d100      	bne.n	182e6 <__aeabi_ddiv+0x202>
   182e4:	e134      	b.n	18550 <__aeabi_ddiv+0x46c>
   182e6:	2300      	movs	r3, #0
   182e8:	4646      	mov	r6, r8
   182ea:	464d      	mov	r5, r9
   182ec:	469a      	mov	sl, r3
   182ee:	3c01      	subs	r4, #1
   182f0:	465b      	mov	r3, fp
   182f2:	0e0a      	lsrs	r2, r1, #24
   182f4:	021b      	lsls	r3, r3, #8
   182f6:	431a      	orrs	r2, r3
   182f8:	020b      	lsls	r3, r1, #8
   182fa:	0c17      	lsrs	r7, r2, #16
   182fc:	9303      	str	r3, [sp, #12]
   182fe:	0413      	lsls	r3, r2, #16
   18300:	0c1b      	lsrs	r3, r3, #16
   18302:	0039      	movs	r1, r7
   18304:	0028      	movs	r0, r5
   18306:	4690      	mov	r8, r2
   18308:	9301      	str	r3, [sp, #4]
   1830a:	f7fe f999 	bl	16640 <__udivsi3>
   1830e:	0002      	movs	r2, r0
   18310:	9b01      	ldr	r3, [sp, #4]
   18312:	4683      	mov	fp, r0
   18314:	435a      	muls	r2, r3
   18316:	0028      	movs	r0, r5
   18318:	0039      	movs	r1, r7
   1831a:	4691      	mov	r9, r2
   1831c:	f7fe fa16 	bl	1674c <__aeabi_uidivmod>
   18320:	0c35      	lsrs	r5, r6, #16
   18322:	0409      	lsls	r1, r1, #16
   18324:	430d      	orrs	r5, r1
   18326:	45a9      	cmp	r9, r5
   18328:	d90d      	bls.n	18346 <__aeabi_ddiv+0x262>
   1832a:	465b      	mov	r3, fp
   1832c:	4445      	add	r5, r8
   1832e:	3b01      	subs	r3, #1
   18330:	45a8      	cmp	r8, r5
   18332:	d900      	bls.n	18336 <__aeabi_ddiv+0x252>
   18334:	e13a      	b.n	185ac <__aeabi_ddiv+0x4c8>
   18336:	45a9      	cmp	r9, r5
   18338:	d800      	bhi.n	1833c <__aeabi_ddiv+0x258>
   1833a:	e137      	b.n	185ac <__aeabi_ddiv+0x4c8>
   1833c:	2302      	movs	r3, #2
   1833e:	425b      	negs	r3, r3
   18340:	469c      	mov	ip, r3
   18342:	4445      	add	r5, r8
   18344:	44e3      	add	fp, ip
   18346:	464b      	mov	r3, r9
   18348:	1aeb      	subs	r3, r5, r3
   1834a:	0039      	movs	r1, r7
   1834c:	0018      	movs	r0, r3
   1834e:	9304      	str	r3, [sp, #16]
   18350:	f7fe f976 	bl	16640 <__udivsi3>
   18354:	9b01      	ldr	r3, [sp, #4]
   18356:	0005      	movs	r5, r0
   18358:	4343      	muls	r3, r0
   1835a:	0039      	movs	r1, r7
   1835c:	9804      	ldr	r0, [sp, #16]
   1835e:	4699      	mov	r9, r3
   18360:	f7fe f9f4 	bl	1674c <__aeabi_uidivmod>
   18364:	0433      	lsls	r3, r6, #16
   18366:	0409      	lsls	r1, r1, #16
   18368:	0c1b      	lsrs	r3, r3, #16
   1836a:	430b      	orrs	r3, r1
   1836c:	4599      	cmp	r9, r3
   1836e:	d909      	bls.n	18384 <__aeabi_ddiv+0x2a0>
   18370:	4443      	add	r3, r8
   18372:	1e6a      	subs	r2, r5, #1
   18374:	4598      	cmp	r8, r3
   18376:	d900      	bls.n	1837a <__aeabi_ddiv+0x296>
   18378:	e11a      	b.n	185b0 <__aeabi_ddiv+0x4cc>
   1837a:	4599      	cmp	r9, r3
   1837c:	d800      	bhi.n	18380 <__aeabi_ddiv+0x29c>
   1837e:	e117      	b.n	185b0 <__aeabi_ddiv+0x4cc>
   18380:	3d02      	subs	r5, #2
   18382:	4443      	add	r3, r8
   18384:	464a      	mov	r2, r9
   18386:	1a9b      	subs	r3, r3, r2
   18388:	465a      	mov	r2, fp
   1838a:	0412      	lsls	r2, r2, #16
   1838c:	432a      	orrs	r2, r5
   1838e:	9903      	ldr	r1, [sp, #12]
   18390:	4693      	mov	fp, r2
   18392:	0c10      	lsrs	r0, r2, #16
   18394:	0c0a      	lsrs	r2, r1, #16
   18396:	4691      	mov	r9, r2
   18398:	0409      	lsls	r1, r1, #16
   1839a:	465a      	mov	r2, fp
   1839c:	0c09      	lsrs	r1, r1, #16
   1839e:	464e      	mov	r6, r9
   183a0:	000d      	movs	r5, r1
   183a2:	0412      	lsls	r2, r2, #16
   183a4:	0c12      	lsrs	r2, r2, #16
   183a6:	4345      	muls	r5, r0
   183a8:	9105      	str	r1, [sp, #20]
   183aa:	4351      	muls	r1, r2
   183ac:	4372      	muls	r2, r6
   183ae:	4370      	muls	r0, r6
   183b0:	1952      	adds	r2, r2, r5
   183b2:	0c0e      	lsrs	r6, r1, #16
   183b4:	18b2      	adds	r2, r6, r2
   183b6:	4295      	cmp	r5, r2
   183b8:	d903      	bls.n	183c2 <__aeabi_ddiv+0x2de>
   183ba:	2580      	movs	r5, #128	; 0x80
   183bc:	026d      	lsls	r5, r5, #9
   183be:	46ac      	mov	ip, r5
   183c0:	4460      	add	r0, ip
   183c2:	0c15      	lsrs	r5, r2, #16
   183c4:	0409      	lsls	r1, r1, #16
   183c6:	0412      	lsls	r2, r2, #16
   183c8:	0c09      	lsrs	r1, r1, #16
   183ca:	1828      	adds	r0, r5, r0
   183cc:	1852      	adds	r2, r2, r1
   183ce:	4283      	cmp	r3, r0
   183d0:	d200      	bcs.n	183d4 <__aeabi_ddiv+0x2f0>
   183d2:	e0ce      	b.n	18572 <__aeabi_ddiv+0x48e>
   183d4:	d100      	bne.n	183d8 <__aeabi_ddiv+0x2f4>
   183d6:	e0c8      	b.n	1856a <__aeabi_ddiv+0x486>
   183d8:	1a1d      	subs	r5, r3, r0
   183da:	4653      	mov	r3, sl
   183dc:	1a9e      	subs	r6, r3, r2
   183de:	45b2      	cmp	sl, r6
   183e0:	4192      	sbcs	r2, r2
   183e2:	4252      	negs	r2, r2
   183e4:	1aab      	subs	r3, r5, r2
   183e6:	469a      	mov	sl, r3
   183e8:	4598      	cmp	r8, r3
   183ea:	d100      	bne.n	183ee <__aeabi_ddiv+0x30a>
   183ec:	e117      	b.n	1861e <__aeabi_ddiv+0x53a>
   183ee:	0039      	movs	r1, r7
   183f0:	0018      	movs	r0, r3
   183f2:	f7fe f925 	bl	16640 <__udivsi3>
   183f6:	9b01      	ldr	r3, [sp, #4]
   183f8:	0005      	movs	r5, r0
   183fa:	4343      	muls	r3, r0
   183fc:	0039      	movs	r1, r7
   183fe:	4650      	mov	r0, sl
   18400:	9304      	str	r3, [sp, #16]
   18402:	f7fe f9a3 	bl	1674c <__aeabi_uidivmod>
   18406:	9804      	ldr	r0, [sp, #16]
   18408:	040b      	lsls	r3, r1, #16
   1840a:	0c31      	lsrs	r1, r6, #16
   1840c:	4319      	orrs	r1, r3
   1840e:	4288      	cmp	r0, r1
   18410:	d909      	bls.n	18426 <__aeabi_ddiv+0x342>
   18412:	4441      	add	r1, r8
   18414:	1e6b      	subs	r3, r5, #1
   18416:	4588      	cmp	r8, r1
   18418:	d900      	bls.n	1841c <__aeabi_ddiv+0x338>
   1841a:	e107      	b.n	1862c <__aeabi_ddiv+0x548>
   1841c:	4288      	cmp	r0, r1
   1841e:	d800      	bhi.n	18422 <__aeabi_ddiv+0x33e>
   18420:	e104      	b.n	1862c <__aeabi_ddiv+0x548>
   18422:	3d02      	subs	r5, #2
   18424:	4441      	add	r1, r8
   18426:	9b04      	ldr	r3, [sp, #16]
   18428:	1acb      	subs	r3, r1, r3
   1842a:	0018      	movs	r0, r3
   1842c:	0039      	movs	r1, r7
   1842e:	9304      	str	r3, [sp, #16]
   18430:	f7fe f906 	bl	16640 <__udivsi3>
   18434:	9b01      	ldr	r3, [sp, #4]
   18436:	4682      	mov	sl, r0
   18438:	4343      	muls	r3, r0
   1843a:	0039      	movs	r1, r7
   1843c:	9804      	ldr	r0, [sp, #16]
   1843e:	9301      	str	r3, [sp, #4]
   18440:	f7fe f984 	bl	1674c <__aeabi_uidivmod>
   18444:	9801      	ldr	r0, [sp, #4]
   18446:	040b      	lsls	r3, r1, #16
   18448:	0431      	lsls	r1, r6, #16
   1844a:	0c09      	lsrs	r1, r1, #16
   1844c:	4319      	orrs	r1, r3
   1844e:	4288      	cmp	r0, r1
   18450:	d90d      	bls.n	1846e <__aeabi_ddiv+0x38a>
   18452:	4653      	mov	r3, sl
   18454:	4441      	add	r1, r8
   18456:	3b01      	subs	r3, #1
   18458:	4588      	cmp	r8, r1
   1845a:	d900      	bls.n	1845e <__aeabi_ddiv+0x37a>
   1845c:	e0e8      	b.n	18630 <__aeabi_ddiv+0x54c>
   1845e:	4288      	cmp	r0, r1
   18460:	d800      	bhi.n	18464 <__aeabi_ddiv+0x380>
   18462:	e0e5      	b.n	18630 <__aeabi_ddiv+0x54c>
   18464:	2302      	movs	r3, #2
   18466:	425b      	negs	r3, r3
   18468:	469c      	mov	ip, r3
   1846a:	4441      	add	r1, r8
   1846c:	44e2      	add	sl, ip
   1846e:	9b01      	ldr	r3, [sp, #4]
   18470:	042d      	lsls	r5, r5, #16
   18472:	1ace      	subs	r6, r1, r3
   18474:	4651      	mov	r1, sl
   18476:	4329      	orrs	r1, r5
   18478:	9d05      	ldr	r5, [sp, #20]
   1847a:	464f      	mov	r7, r9
   1847c:	002a      	movs	r2, r5
   1847e:	040b      	lsls	r3, r1, #16
   18480:	0c08      	lsrs	r0, r1, #16
   18482:	0c1b      	lsrs	r3, r3, #16
   18484:	435a      	muls	r2, r3
   18486:	4345      	muls	r5, r0
   18488:	437b      	muls	r3, r7
   1848a:	4378      	muls	r0, r7
   1848c:	195b      	adds	r3, r3, r5
   1848e:	0c17      	lsrs	r7, r2, #16
   18490:	18fb      	adds	r3, r7, r3
   18492:	429d      	cmp	r5, r3
   18494:	d903      	bls.n	1849e <__aeabi_ddiv+0x3ba>
   18496:	2580      	movs	r5, #128	; 0x80
   18498:	026d      	lsls	r5, r5, #9
   1849a:	46ac      	mov	ip, r5
   1849c:	4460      	add	r0, ip
   1849e:	0c1d      	lsrs	r5, r3, #16
   184a0:	0412      	lsls	r2, r2, #16
   184a2:	041b      	lsls	r3, r3, #16
   184a4:	0c12      	lsrs	r2, r2, #16
   184a6:	1828      	adds	r0, r5, r0
   184a8:	189b      	adds	r3, r3, r2
   184aa:	4286      	cmp	r6, r0
   184ac:	d200      	bcs.n	184b0 <__aeabi_ddiv+0x3cc>
   184ae:	e093      	b.n	185d8 <__aeabi_ddiv+0x4f4>
   184b0:	d100      	bne.n	184b4 <__aeabi_ddiv+0x3d0>
   184b2:	e08e      	b.n	185d2 <__aeabi_ddiv+0x4ee>
   184b4:	2301      	movs	r3, #1
   184b6:	4319      	orrs	r1, r3
   184b8:	4ba0      	ldr	r3, [pc, #640]	; (1873c <__aeabi_ddiv+0x658>)
   184ba:	18e3      	adds	r3, r4, r3
   184bc:	2b00      	cmp	r3, #0
   184be:	dc00      	bgt.n	184c2 <__aeabi_ddiv+0x3de>
   184c0:	e099      	b.n	185f6 <__aeabi_ddiv+0x512>
   184c2:	074a      	lsls	r2, r1, #29
   184c4:	d000      	beq.n	184c8 <__aeabi_ddiv+0x3e4>
   184c6:	e09e      	b.n	18606 <__aeabi_ddiv+0x522>
   184c8:	465a      	mov	r2, fp
   184ca:	01d2      	lsls	r2, r2, #7
   184cc:	d506      	bpl.n	184dc <__aeabi_ddiv+0x3f8>
   184ce:	465a      	mov	r2, fp
   184d0:	4b9b      	ldr	r3, [pc, #620]	; (18740 <__aeabi_ddiv+0x65c>)
   184d2:	401a      	ands	r2, r3
   184d4:	2380      	movs	r3, #128	; 0x80
   184d6:	4693      	mov	fp, r2
   184d8:	00db      	lsls	r3, r3, #3
   184da:	18e3      	adds	r3, r4, r3
   184dc:	4a99      	ldr	r2, [pc, #612]	; (18744 <__aeabi_ddiv+0x660>)
   184de:	4293      	cmp	r3, r2
   184e0:	dd68      	ble.n	185b4 <__aeabi_ddiv+0x4d0>
   184e2:	2301      	movs	r3, #1
   184e4:	9a02      	ldr	r2, [sp, #8]
   184e6:	4c98      	ldr	r4, [pc, #608]	; (18748 <__aeabi_ddiv+0x664>)
   184e8:	401a      	ands	r2, r3
   184ea:	2300      	movs	r3, #0
   184ec:	4694      	mov	ip, r2
   184ee:	4698      	mov	r8, r3
   184f0:	2200      	movs	r2, #0
   184f2:	e6c5      	b.n	18280 <__aeabi_ddiv+0x19c>
   184f4:	2280      	movs	r2, #128	; 0x80
   184f6:	464b      	mov	r3, r9
   184f8:	0312      	lsls	r2, r2, #12
   184fa:	4213      	tst	r3, r2
   184fc:	d00a      	beq.n	18514 <__aeabi_ddiv+0x430>
   184fe:	465b      	mov	r3, fp
   18500:	4213      	tst	r3, r2
   18502:	d106      	bne.n	18512 <__aeabi_ddiv+0x42e>
   18504:	431a      	orrs	r2, r3
   18506:	0312      	lsls	r2, r2, #12
   18508:	0b12      	lsrs	r2, r2, #12
   1850a:	46ac      	mov	ip, r5
   1850c:	4688      	mov	r8, r1
   1850e:	4c8e      	ldr	r4, [pc, #568]	; (18748 <__aeabi_ddiv+0x664>)
   18510:	e6b6      	b.n	18280 <__aeabi_ddiv+0x19c>
   18512:	464b      	mov	r3, r9
   18514:	431a      	orrs	r2, r3
   18516:	0312      	lsls	r2, r2, #12
   18518:	0b12      	lsrs	r2, r2, #12
   1851a:	46bc      	mov	ip, r7
   1851c:	4c8a      	ldr	r4, [pc, #552]	; (18748 <__aeabi_ddiv+0x664>)
   1851e:	e6af      	b.n	18280 <__aeabi_ddiv+0x19c>
   18520:	0003      	movs	r3, r0
   18522:	465a      	mov	r2, fp
   18524:	3b28      	subs	r3, #40	; 0x28
   18526:	409a      	lsls	r2, r3
   18528:	2300      	movs	r3, #0
   1852a:	4691      	mov	r9, r2
   1852c:	4698      	mov	r8, r3
   1852e:	e657      	b.n	181e0 <__aeabi_ddiv+0xfc>
   18530:	4658      	mov	r0, fp
   18532:	f001 f8a1 	bl	19678 <__clzsi2>
   18536:	3020      	adds	r0, #32
   18538:	e640      	b.n	181bc <__aeabi_ddiv+0xd8>
   1853a:	0003      	movs	r3, r0
   1853c:	4652      	mov	r2, sl
   1853e:	3b28      	subs	r3, #40	; 0x28
   18540:	409a      	lsls	r2, r3
   18542:	2100      	movs	r1, #0
   18544:	4693      	mov	fp, r2
   18546:	e677      	b.n	18238 <__aeabi_ddiv+0x154>
   18548:	f001 f896 	bl	19678 <__clzsi2>
   1854c:	3020      	adds	r0, #32
   1854e:	e65f      	b.n	18210 <__aeabi_ddiv+0x12c>
   18550:	4588      	cmp	r8, r1
   18552:	d200      	bcs.n	18556 <__aeabi_ddiv+0x472>
   18554:	e6c7      	b.n	182e6 <__aeabi_ddiv+0x202>
   18556:	464b      	mov	r3, r9
   18558:	07de      	lsls	r6, r3, #31
   1855a:	085d      	lsrs	r5, r3, #1
   1855c:	4643      	mov	r3, r8
   1855e:	085b      	lsrs	r3, r3, #1
   18560:	431e      	orrs	r6, r3
   18562:	4643      	mov	r3, r8
   18564:	07db      	lsls	r3, r3, #31
   18566:	469a      	mov	sl, r3
   18568:	e6c2      	b.n	182f0 <__aeabi_ddiv+0x20c>
   1856a:	2500      	movs	r5, #0
   1856c:	4592      	cmp	sl, r2
   1856e:	d300      	bcc.n	18572 <__aeabi_ddiv+0x48e>
   18570:	e733      	b.n	183da <__aeabi_ddiv+0x2f6>
   18572:	9e03      	ldr	r6, [sp, #12]
   18574:	4659      	mov	r1, fp
   18576:	46b4      	mov	ip, r6
   18578:	44e2      	add	sl, ip
   1857a:	45b2      	cmp	sl, r6
   1857c:	41ad      	sbcs	r5, r5
   1857e:	426d      	negs	r5, r5
   18580:	4445      	add	r5, r8
   18582:	18eb      	adds	r3, r5, r3
   18584:	3901      	subs	r1, #1
   18586:	4598      	cmp	r8, r3
   18588:	d207      	bcs.n	1859a <__aeabi_ddiv+0x4b6>
   1858a:	4298      	cmp	r0, r3
   1858c:	d900      	bls.n	18590 <__aeabi_ddiv+0x4ac>
   1858e:	e07f      	b.n	18690 <__aeabi_ddiv+0x5ac>
   18590:	d100      	bne.n	18594 <__aeabi_ddiv+0x4b0>
   18592:	e0bc      	b.n	1870e <__aeabi_ddiv+0x62a>
   18594:	1a1d      	subs	r5, r3, r0
   18596:	468b      	mov	fp, r1
   18598:	e71f      	b.n	183da <__aeabi_ddiv+0x2f6>
   1859a:	4598      	cmp	r8, r3
   1859c:	d1fa      	bne.n	18594 <__aeabi_ddiv+0x4b0>
   1859e:	9d03      	ldr	r5, [sp, #12]
   185a0:	4555      	cmp	r5, sl
   185a2:	d9f2      	bls.n	1858a <__aeabi_ddiv+0x4a6>
   185a4:	4643      	mov	r3, r8
   185a6:	468b      	mov	fp, r1
   185a8:	1a1d      	subs	r5, r3, r0
   185aa:	e716      	b.n	183da <__aeabi_ddiv+0x2f6>
   185ac:	469b      	mov	fp, r3
   185ae:	e6ca      	b.n	18346 <__aeabi_ddiv+0x262>
   185b0:	0015      	movs	r5, r2
   185b2:	e6e7      	b.n	18384 <__aeabi_ddiv+0x2a0>
   185b4:	465a      	mov	r2, fp
   185b6:	08c9      	lsrs	r1, r1, #3
   185b8:	0752      	lsls	r2, r2, #29
   185ba:	430a      	orrs	r2, r1
   185bc:	055b      	lsls	r3, r3, #21
   185be:	4690      	mov	r8, r2
   185c0:	0d5c      	lsrs	r4, r3, #21
   185c2:	465a      	mov	r2, fp
   185c4:	2301      	movs	r3, #1
   185c6:	9902      	ldr	r1, [sp, #8]
   185c8:	0252      	lsls	r2, r2, #9
   185ca:	4019      	ands	r1, r3
   185cc:	0b12      	lsrs	r2, r2, #12
   185ce:	468c      	mov	ip, r1
   185d0:	e656      	b.n	18280 <__aeabi_ddiv+0x19c>
   185d2:	2b00      	cmp	r3, #0
   185d4:	d100      	bne.n	185d8 <__aeabi_ddiv+0x4f4>
   185d6:	e76f      	b.n	184b8 <__aeabi_ddiv+0x3d4>
   185d8:	4446      	add	r6, r8
   185da:	1e4a      	subs	r2, r1, #1
   185dc:	45b0      	cmp	r8, r6
   185de:	d929      	bls.n	18634 <__aeabi_ddiv+0x550>
   185e0:	0011      	movs	r1, r2
   185e2:	4286      	cmp	r6, r0
   185e4:	d000      	beq.n	185e8 <__aeabi_ddiv+0x504>
   185e6:	e765      	b.n	184b4 <__aeabi_ddiv+0x3d0>
   185e8:	9a03      	ldr	r2, [sp, #12]
   185ea:	4293      	cmp	r3, r2
   185ec:	d000      	beq.n	185f0 <__aeabi_ddiv+0x50c>
   185ee:	e761      	b.n	184b4 <__aeabi_ddiv+0x3d0>
   185f0:	e762      	b.n	184b8 <__aeabi_ddiv+0x3d4>
   185f2:	2101      	movs	r1, #1
   185f4:	4249      	negs	r1, r1
   185f6:	2001      	movs	r0, #1
   185f8:	1ac2      	subs	r2, r0, r3
   185fa:	2a38      	cmp	r2, #56	; 0x38
   185fc:	dd21      	ble.n	18642 <__aeabi_ddiv+0x55e>
   185fe:	9b02      	ldr	r3, [sp, #8]
   18600:	4003      	ands	r3, r0
   18602:	469c      	mov	ip, r3
   18604:	e638      	b.n	18278 <__aeabi_ddiv+0x194>
   18606:	220f      	movs	r2, #15
   18608:	400a      	ands	r2, r1
   1860a:	2a04      	cmp	r2, #4
   1860c:	d100      	bne.n	18610 <__aeabi_ddiv+0x52c>
   1860e:	e75b      	b.n	184c8 <__aeabi_ddiv+0x3e4>
   18610:	000a      	movs	r2, r1
   18612:	1d11      	adds	r1, r2, #4
   18614:	4291      	cmp	r1, r2
   18616:	4192      	sbcs	r2, r2
   18618:	4252      	negs	r2, r2
   1861a:	4493      	add	fp, r2
   1861c:	e754      	b.n	184c8 <__aeabi_ddiv+0x3e4>
   1861e:	4b47      	ldr	r3, [pc, #284]	; (1873c <__aeabi_ddiv+0x658>)
   18620:	18e3      	adds	r3, r4, r3
   18622:	2b00      	cmp	r3, #0
   18624:	dde5      	ble.n	185f2 <__aeabi_ddiv+0x50e>
   18626:	2201      	movs	r2, #1
   18628:	4252      	negs	r2, r2
   1862a:	e7f2      	b.n	18612 <__aeabi_ddiv+0x52e>
   1862c:	001d      	movs	r5, r3
   1862e:	e6fa      	b.n	18426 <__aeabi_ddiv+0x342>
   18630:	469a      	mov	sl, r3
   18632:	e71c      	b.n	1846e <__aeabi_ddiv+0x38a>
   18634:	42b0      	cmp	r0, r6
   18636:	d839      	bhi.n	186ac <__aeabi_ddiv+0x5c8>
   18638:	d06e      	beq.n	18718 <__aeabi_ddiv+0x634>
   1863a:	0011      	movs	r1, r2
   1863c:	e73a      	b.n	184b4 <__aeabi_ddiv+0x3d0>
   1863e:	9302      	str	r3, [sp, #8]
   18640:	e73a      	b.n	184b8 <__aeabi_ddiv+0x3d4>
   18642:	2a1f      	cmp	r2, #31
   18644:	dc3c      	bgt.n	186c0 <__aeabi_ddiv+0x5dc>
   18646:	2320      	movs	r3, #32
   18648:	1a9b      	subs	r3, r3, r2
   1864a:	000c      	movs	r4, r1
   1864c:	4658      	mov	r0, fp
   1864e:	4099      	lsls	r1, r3
   18650:	4098      	lsls	r0, r3
   18652:	1e4b      	subs	r3, r1, #1
   18654:	4199      	sbcs	r1, r3
   18656:	465b      	mov	r3, fp
   18658:	40d4      	lsrs	r4, r2
   1865a:	40d3      	lsrs	r3, r2
   1865c:	4320      	orrs	r0, r4
   1865e:	4308      	orrs	r0, r1
   18660:	001a      	movs	r2, r3
   18662:	0743      	lsls	r3, r0, #29
   18664:	d009      	beq.n	1867a <__aeabi_ddiv+0x596>
   18666:	230f      	movs	r3, #15
   18668:	4003      	ands	r3, r0
   1866a:	2b04      	cmp	r3, #4
   1866c:	d005      	beq.n	1867a <__aeabi_ddiv+0x596>
   1866e:	0001      	movs	r1, r0
   18670:	1d08      	adds	r0, r1, #4
   18672:	4288      	cmp	r0, r1
   18674:	419b      	sbcs	r3, r3
   18676:	425b      	negs	r3, r3
   18678:	18d2      	adds	r2, r2, r3
   1867a:	0213      	lsls	r3, r2, #8
   1867c:	d53a      	bpl.n	186f4 <__aeabi_ddiv+0x610>
   1867e:	2301      	movs	r3, #1
   18680:	9a02      	ldr	r2, [sp, #8]
   18682:	2401      	movs	r4, #1
   18684:	401a      	ands	r2, r3
   18686:	2300      	movs	r3, #0
   18688:	4694      	mov	ip, r2
   1868a:	4698      	mov	r8, r3
   1868c:	2200      	movs	r2, #0
   1868e:	e5f7      	b.n	18280 <__aeabi_ddiv+0x19c>
   18690:	2102      	movs	r1, #2
   18692:	4249      	negs	r1, r1
   18694:	468c      	mov	ip, r1
   18696:	9d03      	ldr	r5, [sp, #12]
   18698:	44e3      	add	fp, ip
   1869a:	46ac      	mov	ip, r5
   1869c:	44e2      	add	sl, ip
   1869e:	45aa      	cmp	sl, r5
   186a0:	41ad      	sbcs	r5, r5
   186a2:	426d      	negs	r5, r5
   186a4:	4445      	add	r5, r8
   186a6:	18ed      	adds	r5, r5, r3
   186a8:	1a2d      	subs	r5, r5, r0
   186aa:	e696      	b.n	183da <__aeabi_ddiv+0x2f6>
   186ac:	1e8a      	subs	r2, r1, #2
   186ae:	9903      	ldr	r1, [sp, #12]
   186b0:	004d      	lsls	r5, r1, #1
   186b2:	428d      	cmp	r5, r1
   186b4:	4189      	sbcs	r1, r1
   186b6:	4249      	negs	r1, r1
   186b8:	4441      	add	r1, r8
   186ba:	1876      	adds	r6, r6, r1
   186bc:	9503      	str	r5, [sp, #12]
   186be:	e78f      	b.n	185e0 <__aeabi_ddiv+0x4fc>
   186c0:	201f      	movs	r0, #31
   186c2:	4240      	negs	r0, r0
   186c4:	1ac3      	subs	r3, r0, r3
   186c6:	4658      	mov	r0, fp
   186c8:	40d8      	lsrs	r0, r3
   186ca:	0003      	movs	r3, r0
   186cc:	2a20      	cmp	r2, #32
   186ce:	d028      	beq.n	18722 <__aeabi_ddiv+0x63e>
   186d0:	2040      	movs	r0, #64	; 0x40
   186d2:	465d      	mov	r5, fp
   186d4:	1a82      	subs	r2, r0, r2
   186d6:	4095      	lsls	r5, r2
   186d8:	4329      	orrs	r1, r5
   186da:	1e4a      	subs	r2, r1, #1
   186dc:	4191      	sbcs	r1, r2
   186de:	4319      	orrs	r1, r3
   186e0:	2307      	movs	r3, #7
   186e2:	2200      	movs	r2, #0
   186e4:	400b      	ands	r3, r1
   186e6:	d009      	beq.n	186fc <__aeabi_ddiv+0x618>
   186e8:	230f      	movs	r3, #15
   186ea:	2200      	movs	r2, #0
   186ec:	400b      	ands	r3, r1
   186ee:	0008      	movs	r0, r1
   186f0:	2b04      	cmp	r3, #4
   186f2:	d1bd      	bne.n	18670 <__aeabi_ddiv+0x58c>
   186f4:	0001      	movs	r1, r0
   186f6:	0753      	lsls	r3, r2, #29
   186f8:	0252      	lsls	r2, r2, #9
   186fa:	0b12      	lsrs	r2, r2, #12
   186fc:	08c9      	lsrs	r1, r1, #3
   186fe:	4319      	orrs	r1, r3
   18700:	2301      	movs	r3, #1
   18702:	4688      	mov	r8, r1
   18704:	9902      	ldr	r1, [sp, #8]
   18706:	2400      	movs	r4, #0
   18708:	4019      	ands	r1, r3
   1870a:	468c      	mov	ip, r1
   1870c:	e5b8      	b.n	18280 <__aeabi_ddiv+0x19c>
   1870e:	4552      	cmp	r2, sl
   18710:	d8be      	bhi.n	18690 <__aeabi_ddiv+0x5ac>
   18712:	468b      	mov	fp, r1
   18714:	2500      	movs	r5, #0
   18716:	e660      	b.n	183da <__aeabi_ddiv+0x2f6>
   18718:	9d03      	ldr	r5, [sp, #12]
   1871a:	429d      	cmp	r5, r3
   1871c:	d3c6      	bcc.n	186ac <__aeabi_ddiv+0x5c8>
   1871e:	0011      	movs	r1, r2
   18720:	e762      	b.n	185e8 <__aeabi_ddiv+0x504>
   18722:	2500      	movs	r5, #0
   18724:	e7d8      	b.n	186d8 <__aeabi_ddiv+0x5f4>
   18726:	2280      	movs	r2, #128	; 0x80
   18728:	465b      	mov	r3, fp
   1872a:	0312      	lsls	r2, r2, #12
   1872c:	431a      	orrs	r2, r3
   1872e:	9b01      	ldr	r3, [sp, #4]
   18730:	0312      	lsls	r2, r2, #12
   18732:	0b12      	lsrs	r2, r2, #12
   18734:	469c      	mov	ip, r3
   18736:	4688      	mov	r8, r1
   18738:	4c03      	ldr	r4, [pc, #12]	; (18748 <__aeabi_ddiv+0x664>)
   1873a:	e5a1      	b.n	18280 <__aeabi_ddiv+0x19c>
   1873c:	000003ff 	.word	0x000003ff
   18740:	feffffff 	.word	0xfeffffff
   18744:	000007fe 	.word	0x000007fe
   18748:	000007ff 	.word	0x000007ff

0001874c <__eqdf2>:
   1874c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1874e:	464f      	mov	r7, r9
   18750:	4646      	mov	r6, r8
   18752:	46d6      	mov	lr, sl
   18754:	005c      	lsls	r4, r3, #1
   18756:	b5c0      	push	{r6, r7, lr}
   18758:	031f      	lsls	r7, r3, #12
   1875a:	0fdb      	lsrs	r3, r3, #31
   1875c:	469a      	mov	sl, r3
   1875e:	4b17      	ldr	r3, [pc, #92]	; (187bc <__eqdf2+0x70>)
   18760:	030e      	lsls	r6, r1, #12
   18762:	004d      	lsls	r5, r1, #1
   18764:	4684      	mov	ip, r0
   18766:	4680      	mov	r8, r0
   18768:	0b36      	lsrs	r6, r6, #12
   1876a:	0d6d      	lsrs	r5, r5, #21
   1876c:	0fc9      	lsrs	r1, r1, #31
   1876e:	4691      	mov	r9, r2
   18770:	0b3f      	lsrs	r7, r7, #12
   18772:	0d64      	lsrs	r4, r4, #21
   18774:	2001      	movs	r0, #1
   18776:	429d      	cmp	r5, r3
   18778:	d008      	beq.n	1878c <__eqdf2+0x40>
   1877a:	429c      	cmp	r4, r3
   1877c:	d001      	beq.n	18782 <__eqdf2+0x36>
   1877e:	42a5      	cmp	r5, r4
   18780:	d00b      	beq.n	1879a <__eqdf2+0x4e>
   18782:	bc1c      	pop	{r2, r3, r4}
   18784:	4690      	mov	r8, r2
   18786:	4699      	mov	r9, r3
   18788:	46a2      	mov	sl, r4
   1878a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1878c:	4663      	mov	r3, ip
   1878e:	4333      	orrs	r3, r6
   18790:	d1f7      	bne.n	18782 <__eqdf2+0x36>
   18792:	42ac      	cmp	r4, r5
   18794:	d1f5      	bne.n	18782 <__eqdf2+0x36>
   18796:	433a      	orrs	r2, r7
   18798:	d1f3      	bne.n	18782 <__eqdf2+0x36>
   1879a:	2001      	movs	r0, #1
   1879c:	42be      	cmp	r6, r7
   1879e:	d1f0      	bne.n	18782 <__eqdf2+0x36>
   187a0:	45c8      	cmp	r8, r9
   187a2:	d1ee      	bne.n	18782 <__eqdf2+0x36>
   187a4:	4551      	cmp	r1, sl
   187a6:	d007      	beq.n	187b8 <__eqdf2+0x6c>
   187a8:	2d00      	cmp	r5, #0
   187aa:	d1ea      	bne.n	18782 <__eqdf2+0x36>
   187ac:	4663      	mov	r3, ip
   187ae:	431e      	orrs	r6, r3
   187b0:	0030      	movs	r0, r6
   187b2:	1e46      	subs	r6, r0, #1
   187b4:	41b0      	sbcs	r0, r6
   187b6:	e7e4      	b.n	18782 <__eqdf2+0x36>
   187b8:	2000      	movs	r0, #0
   187ba:	e7e2      	b.n	18782 <__eqdf2+0x36>
   187bc:	000007ff 	.word	0x000007ff

000187c0 <__gedf2>:
   187c0:	b5f0      	push	{r4, r5, r6, r7, lr}
   187c2:	4645      	mov	r5, r8
   187c4:	46de      	mov	lr, fp
   187c6:	4657      	mov	r7, sl
   187c8:	464e      	mov	r6, r9
   187ca:	b5e0      	push	{r5, r6, r7, lr}
   187cc:	031f      	lsls	r7, r3, #12
   187ce:	0b3d      	lsrs	r5, r7, #12
   187d0:	4f2c      	ldr	r7, [pc, #176]	; (18884 <__gedf2+0xc4>)
   187d2:	030e      	lsls	r6, r1, #12
   187d4:	004c      	lsls	r4, r1, #1
   187d6:	46ab      	mov	fp, r5
   187d8:	005d      	lsls	r5, r3, #1
   187da:	4684      	mov	ip, r0
   187dc:	0b36      	lsrs	r6, r6, #12
   187de:	0d64      	lsrs	r4, r4, #21
   187e0:	0fc9      	lsrs	r1, r1, #31
   187e2:	4690      	mov	r8, r2
   187e4:	0d6d      	lsrs	r5, r5, #21
   187e6:	0fdb      	lsrs	r3, r3, #31
   187e8:	42bc      	cmp	r4, r7
   187ea:	d02a      	beq.n	18842 <__gedf2+0x82>
   187ec:	4f25      	ldr	r7, [pc, #148]	; (18884 <__gedf2+0xc4>)
   187ee:	42bd      	cmp	r5, r7
   187f0:	d02d      	beq.n	1884e <__gedf2+0x8e>
   187f2:	2c00      	cmp	r4, #0
   187f4:	d10f      	bne.n	18816 <__gedf2+0x56>
   187f6:	4330      	orrs	r0, r6
   187f8:	0007      	movs	r7, r0
   187fa:	4681      	mov	r9, r0
   187fc:	4278      	negs	r0, r7
   187fe:	4178      	adcs	r0, r7
   18800:	b2c0      	uxtb	r0, r0
   18802:	2d00      	cmp	r5, #0
   18804:	d117      	bne.n	18836 <__gedf2+0x76>
   18806:	465f      	mov	r7, fp
   18808:	433a      	orrs	r2, r7
   1880a:	d114      	bne.n	18836 <__gedf2+0x76>
   1880c:	464b      	mov	r3, r9
   1880e:	2000      	movs	r0, #0
   18810:	2b00      	cmp	r3, #0
   18812:	d00a      	beq.n	1882a <__gedf2+0x6a>
   18814:	e006      	b.n	18824 <__gedf2+0x64>
   18816:	2d00      	cmp	r5, #0
   18818:	d102      	bne.n	18820 <__gedf2+0x60>
   1881a:	4658      	mov	r0, fp
   1881c:	4302      	orrs	r2, r0
   1881e:	d001      	beq.n	18824 <__gedf2+0x64>
   18820:	4299      	cmp	r1, r3
   18822:	d018      	beq.n	18856 <__gedf2+0x96>
   18824:	4248      	negs	r0, r1
   18826:	2101      	movs	r1, #1
   18828:	4308      	orrs	r0, r1
   1882a:	bc3c      	pop	{r2, r3, r4, r5}
   1882c:	4690      	mov	r8, r2
   1882e:	4699      	mov	r9, r3
   18830:	46a2      	mov	sl, r4
   18832:	46ab      	mov	fp, r5
   18834:	bdf0      	pop	{r4, r5, r6, r7, pc}
   18836:	2800      	cmp	r0, #0
   18838:	d0f2      	beq.n	18820 <__gedf2+0x60>
   1883a:	2001      	movs	r0, #1
   1883c:	3b01      	subs	r3, #1
   1883e:	4318      	orrs	r0, r3
   18840:	e7f3      	b.n	1882a <__gedf2+0x6a>
   18842:	0037      	movs	r7, r6
   18844:	4307      	orrs	r7, r0
   18846:	d0d1      	beq.n	187ec <__gedf2+0x2c>
   18848:	2002      	movs	r0, #2
   1884a:	4240      	negs	r0, r0
   1884c:	e7ed      	b.n	1882a <__gedf2+0x6a>
   1884e:	465f      	mov	r7, fp
   18850:	4317      	orrs	r7, r2
   18852:	d0ce      	beq.n	187f2 <__gedf2+0x32>
   18854:	e7f8      	b.n	18848 <__gedf2+0x88>
   18856:	42ac      	cmp	r4, r5
   18858:	dce4      	bgt.n	18824 <__gedf2+0x64>
   1885a:	da03      	bge.n	18864 <__gedf2+0xa4>
   1885c:	1e48      	subs	r0, r1, #1
   1885e:	2101      	movs	r1, #1
   18860:	4308      	orrs	r0, r1
   18862:	e7e2      	b.n	1882a <__gedf2+0x6a>
   18864:	455e      	cmp	r6, fp
   18866:	d8dd      	bhi.n	18824 <__gedf2+0x64>
   18868:	d006      	beq.n	18878 <__gedf2+0xb8>
   1886a:	2000      	movs	r0, #0
   1886c:	455e      	cmp	r6, fp
   1886e:	d2dc      	bcs.n	1882a <__gedf2+0x6a>
   18870:	2301      	movs	r3, #1
   18872:	1e48      	subs	r0, r1, #1
   18874:	4318      	orrs	r0, r3
   18876:	e7d8      	b.n	1882a <__gedf2+0x6a>
   18878:	45c4      	cmp	ip, r8
   1887a:	d8d3      	bhi.n	18824 <__gedf2+0x64>
   1887c:	2000      	movs	r0, #0
   1887e:	45c4      	cmp	ip, r8
   18880:	d3f6      	bcc.n	18870 <__gedf2+0xb0>
   18882:	e7d2      	b.n	1882a <__gedf2+0x6a>
   18884:	000007ff 	.word	0x000007ff

00018888 <__ledf2>:
   18888:	b5f0      	push	{r4, r5, r6, r7, lr}
   1888a:	464e      	mov	r6, r9
   1888c:	4645      	mov	r5, r8
   1888e:	46de      	mov	lr, fp
   18890:	4657      	mov	r7, sl
   18892:	005c      	lsls	r4, r3, #1
   18894:	b5e0      	push	{r5, r6, r7, lr}
   18896:	031f      	lsls	r7, r3, #12
   18898:	0fdb      	lsrs	r3, r3, #31
   1889a:	4699      	mov	r9, r3
   1889c:	4b2a      	ldr	r3, [pc, #168]	; (18948 <__ledf2+0xc0>)
   1889e:	030e      	lsls	r6, r1, #12
   188a0:	004d      	lsls	r5, r1, #1
   188a2:	0fc9      	lsrs	r1, r1, #31
   188a4:	4684      	mov	ip, r0
   188a6:	0b36      	lsrs	r6, r6, #12
   188a8:	0d6d      	lsrs	r5, r5, #21
   188aa:	468b      	mov	fp, r1
   188ac:	4690      	mov	r8, r2
   188ae:	0b3f      	lsrs	r7, r7, #12
   188b0:	0d64      	lsrs	r4, r4, #21
   188b2:	429d      	cmp	r5, r3
   188b4:	d020      	beq.n	188f8 <__ledf2+0x70>
   188b6:	4b24      	ldr	r3, [pc, #144]	; (18948 <__ledf2+0xc0>)
   188b8:	429c      	cmp	r4, r3
   188ba:	d022      	beq.n	18902 <__ledf2+0x7a>
   188bc:	2d00      	cmp	r5, #0
   188be:	d112      	bne.n	188e6 <__ledf2+0x5e>
   188c0:	4330      	orrs	r0, r6
   188c2:	4243      	negs	r3, r0
   188c4:	4143      	adcs	r3, r0
   188c6:	b2db      	uxtb	r3, r3
   188c8:	2c00      	cmp	r4, #0
   188ca:	d01f      	beq.n	1890c <__ledf2+0x84>
   188cc:	2b00      	cmp	r3, #0
   188ce:	d00c      	beq.n	188ea <__ledf2+0x62>
   188d0:	464b      	mov	r3, r9
   188d2:	2001      	movs	r0, #1
   188d4:	3b01      	subs	r3, #1
   188d6:	4303      	orrs	r3, r0
   188d8:	0018      	movs	r0, r3
   188da:	bc3c      	pop	{r2, r3, r4, r5}
   188dc:	4690      	mov	r8, r2
   188de:	4699      	mov	r9, r3
   188e0:	46a2      	mov	sl, r4
   188e2:	46ab      	mov	fp, r5
   188e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   188e6:	2c00      	cmp	r4, #0
   188e8:	d016      	beq.n	18918 <__ledf2+0x90>
   188ea:	45cb      	cmp	fp, r9
   188ec:	d017      	beq.n	1891e <__ledf2+0x96>
   188ee:	465b      	mov	r3, fp
   188f0:	4259      	negs	r1, r3
   188f2:	2301      	movs	r3, #1
   188f4:	430b      	orrs	r3, r1
   188f6:	e7ef      	b.n	188d8 <__ledf2+0x50>
   188f8:	0031      	movs	r1, r6
   188fa:	2302      	movs	r3, #2
   188fc:	4301      	orrs	r1, r0
   188fe:	d1eb      	bne.n	188d8 <__ledf2+0x50>
   18900:	e7d9      	b.n	188b6 <__ledf2+0x2e>
   18902:	0039      	movs	r1, r7
   18904:	2302      	movs	r3, #2
   18906:	4311      	orrs	r1, r2
   18908:	d1e6      	bne.n	188d8 <__ledf2+0x50>
   1890a:	e7d7      	b.n	188bc <__ledf2+0x34>
   1890c:	433a      	orrs	r2, r7
   1890e:	d1dd      	bne.n	188cc <__ledf2+0x44>
   18910:	2300      	movs	r3, #0
   18912:	2800      	cmp	r0, #0
   18914:	d0e0      	beq.n	188d8 <__ledf2+0x50>
   18916:	e7ea      	b.n	188ee <__ledf2+0x66>
   18918:	433a      	orrs	r2, r7
   1891a:	d1e6      	bne.n	188ea <__ledf2+0x62>
   1891c:	e7e7      	b.n	188ee <__ledf2+0x66>
   1891e:	42a5      	cmp	r5, r4
   18920:	dce5      	bgt.n	188ee <__ledf2+0x66>
   18922:	db05      	blt.n	18930 <__ledf2+0xa8>
   18924:	42be      	cmp	r6, r7
   18926:	d8e2      	bhi.n	188ee <__ledf2+0x66>
   18928:	d007      	beq.n	1893a <__ledf2+0xb2>
   1892a:	2300      	movs	r3, #0
   1892c:	42be      	cmp	r6, r7
   1892e:	d2d3      	bcs.n	188d8 <__ledf2+0x50>
   18930:	4659      	mov	r1, fp
   18932:	2301      	movs	r3, #1
   18934:	3901      	subs	r1, #1
   18936:	430b      	orrs	r3, r1
   18938:	e7ce      	b.n	188d8 <__ledf2+0x50>
   1893a:	45c4      	cmp	ip, r8
   1893c:	d8d7      	bhi.n	188ee <__ledf2+0x66>
   1893e:	2300      	movs	r3, #0
   18940:	45c4      	cmp	ip, r8
   18942:	d3f5      	bcc.n	18930 <__ledf2+0xa8>
   18944:	e7c8      	b.n	188d8 <__ledf2+0x50>
   18946:	46c0      	nop			; (mov r8, r8)
   18948:	000007ff 	.word	0x000007ff

0001894c <__aeabi_dmul>:
   1894c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1894e:	4657      	mov	r7, sl
   18950:	4645      	mov	r5, r8
   18952:	46de      	mov	lr, fp
   18954:	464e      	mov	r6, r9
   18956:	b5e0      	push	{r5, r6, r7, lr}
   18958:	030c      	lsls	r4, r1, #12
   1895a:	4698      	mov	r8, r3
   1895c:	004e      	lsls	r6, r1, #1
   1895e:	0b23      	lsrs	r3, r4, #12
   18960:	b087      	sub	sp, #28
   18962:	0007      	movs	r7, r0
   18964:	4692      	mov	sl, r2
   18966:	469b      	mov	fp, r3
   18968:	0d76      	lsrs	r6, r6, #21
   1896a:	0fcd      	lsrs	r5, r1, #31
   1896c:	2e00      	cmp	r6, #0
   1896e:	d06b      	beq.n	18a48 <__aeabi_dmul+0xfc>
   18970:	4b6d      	ldr	r3, [pc, #436]	; (18b28 <__aeabi_dmul+0x1dc>)
   18972:	429e      	cmp	r6, r3
   18974:	d035      	beq.n	189e2 <__aeabi_dmul+0x96>
   18976:	2480      	movs	r4, #128	; 0x80
   18978:	465b      	mov	r3, fp
   1897a:	0f42      	lsrs	r2, r0, #29
   1897c:	0424      	lsls	r4, r4, #16
   1897e:	00db      	lsls	r3, r3, #3
   18980:	4314      	orrs	r4, r2
   18982:	431c      	orrs	r4, r3
   18984:	00c3      	lsls	r3, r0, #3
   18986:	4699      	mov	r9, r3
   18988:	4b68      	ldr	r3, [pc, #416]	; (18b2c <__aeabi_dmul+0x1e0>)
   1898a:	46a3      	mov	fp, r4
   1898c:	469c      	mov	ip, r3
   1898e:	2300      	movs	r3, #0
   18990:	2700      	movs	r7, #0
   18992:	4466      	add	r6, ip
   18994:	9302      	str	r3, [sp, #8]
   18996:	4643      	mov	r3, r8
   18998:	031c      	lsls	r4, r3, #12
   1899a:	005a      	lsls	r2, r3, #1
   1899c:	0fdb      	lsrs	r3, r3, #31
   1899e:	4650      	mov	r0, sl
   189a0:	0b24      	lsrs	r4, r4, #12
   189a2:	0d52      	lsrs	r2, r2, #21
   189a4:	4698      	mov	r8, r3
   189a6:	d100      	bne.n	189aa <__aeabi_dmul+0x5e>
   189a8:	e076      	b.n	18a98 <__aeabi_dmul+0x14c>
   189aa:	4b5f      	ldr	r3, [pc, #380]	; (18b28 <__aeabi_dmul+0x1dc>)
   189ac:	429a      	cmp	r2, r3
   189ae:	d06d      	beq.n	18a8c <__aeabi_dmul+0x140>
   189b0:	2380      	movs	r3, #128	; 0x80
   189b2:	0f41      	lsrs	r1, r0, #29
   189b4:	041b      	lsls	r3, r3, #16
   189b6:	430b      	orrs	r3, r1
   189b8:	495c      	ldr	r1, [pc, #368]	; (18b2c <__aeabi_dmul+0x1e0>)
   189ba:	00e4      	lsls	r4, r4, #3
   189bc:	468c      	mov	ip, r1
   189be:	431c      	orrs	r4, r3
   189c0:	00c3      	lsls	r3, r0, #3
   189c2:	2000      	movs	r0, #0
   189c4:	4462      	add	r2, ip
   189c6:	4641      	mov	r1, r8
   189c8:	18b6      	adds	r6, r6, r2
   189ca:	4069      	eors	r1, r5
   189cc:	1c72      	adds	r2, r6, #1
   189ce:	9101      	str	r1, [sp, #4]
   189d0:	4694      	mov	ip, r2
   189d2:	4307      	orrs	r7, r0
   189d4:	2f0f      	cmp	r7, #15
   189d6:	d900      	bls.n	189da <__aeabi_dmul+0x8e>
   189d8:	e0b0      	b.n	18b3c <__aeabi_dmul+0x1f0>
   189da:	4a55      	ldr	r2, [pc, #340]	; (18b30 <__aeabi_dmul+0x1e4>)
   189dc:	00bf      	lsls	r7, r7, #2
   189de:	59d2      	ldr	r2, [r2, r7]
   189e0:	4697      	mov	pc, r2
   189e2:	465b      	mov	r3, fp
   189e4:	4303      	orrs	r3, r0
   189e6:	4699      	mov	r9, r3
   189e8:	d000      	beq.n	189ec <__aeabi_dmul+0xa0>
   189ea:	e087      	b.n	18afc <__aeabi_dmul+0x1b0>
   189ec:	2300      	movs	r3, #0
   189ee:	469b      	mov	fp, r3
   189f0:	3302      	adds	r3, #2
   189f2:	2708      	movs	r7, #8
   189f4:	9302      	str	r3, [sp, #8]
   189f6:	e7ce      	b.n	18996 <__aeabi_dmul+0x4a>
   189f8:	4642      	mov	r2, r8
   189fa:	9201      	str	r2, [sp, #4]
   189fc:	2802      	cmp	r0, #2
   189fe:	d067      	beq.n	18ad0 <__aeabi_dmul+0x184>
   18a00:	2803      	cmp	r0, #3
   18a02:	d100      	bne.n	18a06 <__aeabi_dmul+0xba>
   18a04:	e20e      	b.n	18e24 <__aeabi_dmul+0x4d8>
   18a06:	2801      	cmp	r0, #1
   18a08:	d000      	beq.n	18a0c <__aeabi_dmul+0xc0>
   18a0a:	e162      	b.n	18cd2 <__aeabi_dmul+0x386>
   18a0c:	2300      	movs	r3, #0
   18a0e:	2400      	movs	r4, #0
   18a10:	2200      	movs	r2, #0
   18a12:	4699      	mov	r9, r3
   18a14:	9901      	ldr	r1, [sp, #4]
   18a16:	4001      	ands	r1, r0
   18a18:	b2cd      	uxtb	r5, r1
   18a1a:	2100      	movs	r1, #0
   18a1c:	0312      	lsls	r2, r2, #12
   18a1e:	0d0b      	lsrs	r3, r1, #20
   18a20:	0b12      	lsrs	r2, r2, #12
   18a22:	051b      	lsls	r3, r3, #20
   18a24:	4313      	orrs	r3, r2
   18a26:	4a43      	ldr	r2, [pc, #268]	; (18b34 <__aeabi_dmul+0x1e8>)
   18a28:	0524      	lsls	r4, r4, #20
   18a2a:	4013      	ands	r3, r2
   18a2c:	431c      	orrs	r4, r3
   18a2e:	0064      	lsls	r4, r4, #1
   18a30:	07ed      	lsls	r5, r5, #31
   18a32:	0864      	lsrs	r4, r4, #1
   18a34:	432c      	orrs	r4, r5
   18a36:	4648      	mov	r0, r9
   18a38:	0021      	movs	r1, r4
   18a3a:	b007      	add	sp, #28
   18a3c:	bc3c      	pop	{r2, r3, r4, r5}
   18a3e:	4690      	mov	r8, r2
   18a40:	4699      	mov	r9, r3
   18a42:	46a2      	mov	sl, r4
   18a44:	46ab      	mov	fp, r5
   18a46:	bdf0      	pop	{r4, r5, r6, r7, pc}
   18a48:	4303      	orrs	r3, r0
   18a4a:	4699      	mov	r9, r3
   18a4c:	d04f      	beq.n	18aee <__aeabi_dmul+0x1a2>
   18a4e:	465b      	mov	r3, fp
   18a50:	2b00      	cmp	r3, #0
   18a52:	d100      	bne.n	18a56 <__aeabi_dmul+0x10a>
   18a54:	e189      	b.n	18d6a <__aeabi_dmul+0x41e>
   18a56:	4658      	mov	r0, fp
   18a58:	f000 fe0e 	bl	19678 <__clzsi2>
   18a5c:	0003      	movs	r3, r0
   18a5e:	3b0b      	subs	r3, #11
   18a60:	2b1c      	cmp	r3, #28
   18a62:	dd00      	ble.n	18a66 <__aeabi_dmul+0x11a>
   18a64:	e17a      	b.n	18d5c <__aeabi_dmul+0x410>
   18a66:	221d      	movs	r2, #29
   18a68:	1ad3      	subs	r3, r2, r3
   18a6a:	003a      	movs	r2, r7
   18a6c:	0001      	movs	r1, r0
   18a6e:	465c      	mov	r4, fp
   18a70:	40da      	lsrs	r2, r3
   18a72:	3908      	subs	r1, #8
   18a74:	408c      	lsls	r4, r1
   18a76:	0013      	movs	r3, r2
   18a78:	408f      	lsls	r7, r1
   18a7a:	4323      	orrs	r3, r4
   18a7c:	469b      	mov	fp, r3
   18a7e:	46b9      	mov	r9, r7
   18a80:	2300      	movs	r3, #0
   18a82:	4e2d      	ldr	r6, [pc, #180]	; (18b38 <__aeabi_dmul+0x1ec>)
   18a84:	2700      	movs	r7, #0
   18a86:	1a36      	subs	r6, r6, r0
   18a88:	9302      	str	r3, [sp, #8]
   18a8a:	e784      	b.n	18996 <__aeabi_dmul+0x4a>
   18a8c:	4653      	mov	r3, sl
   18a8e:	4323      	orrs	r3, r4
   18a90:	d12a      	bne.n	18ae8 <__aeabi_dmul+0x19c>
   18a92:	2400      	movs	r4, #0
   18a94:	2002      	movs	r0, #2
   18a96:	e796      	b.n	189c6 <__aeabi_dmul+0x7a>
   18a98:	4653      	mov	r3, sl
   18a9a:	4323      	orrs	r3, r4
   18a9c:	d020      	beq.n	18ae0 <__aeabi_dmul+0x194>
   18a9e:	2c00      	cmp	r4, #0
   18aa0:	d100      	bne.n	18aa4 <__aeabi_dmul+0x158>
   18aa2:	e157      	b.n	18d54 <__aeabi_dmul+0x408>
   18aa4:	0020      	movs	r0, r4
   18aa6:	f000 fde7 	bl	19678 <__clzsi2>
   18aaa:	0003      	movs	r3, r0
   18aac:	3b0b      	subs	r3, #11
   18aae:	2b1c      	cmp	r3, #28
   18ab0:	dd00      	ble.n	18ab4 <__aeabi_dmul+0x168>
   18ab2:	e149      	b.n	18d48 <__aeabi_dmul+0x3fc>
   18ab4:	211d      	movs	r1, #29
   18ab6:	1acb      	subs	r3, r1, r3
   18ab8:	4651      	mov	r1, sl
   18aba:	0002      	movs	r2, r0
   18abc:	40d9      	lsrs	r1, r3
   18abe:	4653      	mov	r3, sl
   18ac0:	3a08      	subs	r2, #8
   18ac2:	4094      	lsls	r4, r2
   18ac4:	4093      	lsls	r3, r2
   18ac6:	430c      	orrs	r4, r1
   18ac8:	4a1b      	ldr	r2, [pc, #108]	; (18b38 <__aeabi_dmul+0x1ec>)
   18aca:	1a12      	subs	r2, r2, r0
   18acc:	2000      	movs	r0, #0
   18ace:	e77a      	b.n	189c6 <__aeabi_dmul+0x7a>
   18ad0:	2501      	movs	r5, #1
   18ad2:	9b01      	ldr	r3, [sp, #4]
   18ad4:	4c14      	ldr	r4, [pc, #80]	; (18b28 <__aeabi_dmul+0x1dc>)
   18ad6:	401d      	ands	r5, r3
   18ad8:	2300      	movs	r3, #0
   18ada:	2200      	movs	r2, #0
   18adc:	4699      	mov	r9, r3
   18ade:	e79c      	b.n	18a1a <__aeabi_dmul+0xce>
   18ae0:	2400      	movs	r4, #0
   18ae2:	2200      	movs	r2, #0
   18ae4:	2001      	movs	r0, #1
   18ae6:	e76e      	b.n	189c6 <__aeabi_dmul+0x7a>
   18ae8:	4653      	mov	r3, sl
   18aea:	2003      	movs	r0, #3
   18aec:	e76b      	b.n	189c6 <__aeabi_dmul+0x7a>
   18aee:	2300      	movs	r3, #0
   18af0:	469b      	mov	fp, r3
   18af2:	3301      	adds	r3, #1
   18af4:	2704      	movs	r7, #4
   18af6:	2600      	movs	r6, #0
   18af8:	9302      	str	r3, [sp, #8]
   18afa:	e74c      	b.n	18996 <__aeabi_dmul+0x4a>
   18afc:	2303      	movs	r3, #3
   18afe:	4681      	mov	r9, r0
   18b00:	270c      	movs	r7, #12
   18b02:	9302      	str	r3, [sp, #8]
   18b04:	e747      	b.n	18996 <__aeabi_dmul+0x4a>
   18b06:	2280      	movs	r2, #128	; 0x80
   18b08:	2300      	movs	r3, #0
   18b0a:	2500      	movs	r5, #0
   18b0c:	0312      	lsls	r2, r2, #12
   18b0e:	4699      	mov	r9, r3
   18b10:	4c05      	ldr	r4, [pc, #20]	; (18b28 <__aeabi_dmul+0x1dc>)
   18b12:	e782      	b.n	18a1a <__aeabi_dmul+0xce>
   18b14:	465c      	mov	r4, fp
   18b16:	464b      	mov	r3, r9
   18b18:	9802      	ldr	r0, [sp, #8]
   18b1a:	e76f      	b.n	189fc <__aeabi_dmul+0xb0>
   18b1c:	465c      	mov	r4, fp
   18b1e:	464b      	mov	r3, r9
   18b20:	9501      	str	r5, [sp, #4]
   18b22:	9802      	ldr	r0, [sp, #8]
   18b24:	e76a      	b.n	189fc <__aeabi_dmul+0xb0>
   18b26:	46c0      	nop			; (mov r8, r8)
   18b28:	000007ff 	.word	0x000007ff
   18b2c:	fffffc01 	.word	0xfffffc01
   18b30:	00020534 	.word	0x00020534
   18b34:	800fffff 	.word	0x800fffff
   18b38:	fffffc0d 	.word	0xfffffc0d
   18b3c:	464a      	mov	r2, r9
   18b3e:	4649      	mov	r1, r9
   18b40:	0c17      	lsrs	r7, r2, #16
   18b42:	0c1a      	lsrs	r2, r3, #16
   18b44:	041b      	lsls	r3, r3, #16
   18b46:	0c1b      	lsrs	r3, r3, #16
   18b48:	0408      	lsls	r0, r1, #16
   18b4a:	0019      	movs	r1, r3
   18b4c:	0c00      	lsrs	r0, r0, #16
   18b4e:	4341      	muls	r1, r0
   18b50:	0015      	movs	r5, r2
   18b52:	4688      	mov	r8, r1
   18b54:	0019      	movs	r1, r3
   18b56:	437d      	muls	r5, r7
   18b58:	4379      	muls	r1, r7
   18b5a:	9503      	str	r5, [sp, #12]
   18b5c:	4689      	mov	r9, r1
   18b5e:	0029      	movs	r1, r5
   18b60:	0015      	movs	r5, r2
   18b62:	4345      	muls	r5, r0
   18b64:	444d      	add	r5, r9
   18b66:	9502      	str	r5, [sp, #8]
   18b68:	4645      	mov	r5, r8
   18b6a:	0c2d      	lsrs	r5, r5, #16
   18b6c:	46aa      	mov	sl, r5
   18b6e:	9d02      	ldr	r5, [sp, #8]
   18b70:	4455      	add	r5, sl
   18b72:	45a9      	cmp	r9, r5
   18b74:	d906      	bls.n	18b84 <__aeabi_dmul+0x238>
   18b76:	468a      	mov	sl, r1
   18b78:	2180      	movs	r1, #128	; 0x80
   18b7a:	0249      	lsls	r1, r1, #9
   18b7c:	4689      	mov	r9, r1
   18b7e:	44ca      	add	sl, r9
   18b80:	4651      	mov	r1, sl
   18b82:	9103      	str	r1, [sp, #12]
   18b84:	0c29      	lsrs	r1, r5, #16
   18b86:	9104      	str	r1, [sp, #16]
   18b88:	4641      	mov	r1, r8
   18b8a:	0409      	lsls	r1, r1, #16
   18b8c:	042d      	lsls	r5, r5, #16
   18b8e:	0c09      	lsrs	r1, r1, #16
   18b90:	4688      	mov	r8, r1
   18b92:	0029      	movs	r1, r5
   18b94:	0c25      	lsrs	r5, r4, #16
   18b96:	0424      	lsls	r4, r4, #16
   18b98:	4441      	add	r1, r8
   18b9a:	0c24      	lsrs	r4, r4, #16
   18b9c:	9105      	str	r1, [sp, #20]
   18b9e:	0021      	movs	r1, r4
   18ba0:	4341      	muls	r1, r0
   18ba2:	4688      	mov	r8, r1
   18ba4:	0021      	movs	r1, r4
   18ba6:	4379      	muls	r1, r7
   18ba8:	468a      	mov	sl, r1
   18baa:	4368      	muls	r0, r5
   18bac:	4641      	mov	r1, r8
   18bae:	4450      	add	r0, sl
   18bb0:	4681      	mov	r9, r0
   18bb2:	0c08      	lsrs	r0, r1, #16
   18bb4:	4448      	add	r0, r9
   18bb6:	436f      	muls	r7, r5
   18bb8:	4582      	cmp	sl, r0
   18bba:	d903      	bls.n	18bc4 <__aeabi_dmul+0x278>
   18bbc:	2180      	movs	r1, #128	; 0x80
   18bbe:	0249      	lsls	r1, r1, #9
   18bc0:	4689      	mov	r9, r1
   18bc2:	444f      	add	r7, r9
   18bc4:	0c01      	lsrs	r1, r0, #16
   18bc6:	4689      	mov	r9, r1
   18bc8:	0039      	movs	r1, r7
   18bca:	4449      	add	r1, r9
   18bcc:	9102      	str	r1, [sp, #8]
   18bce:	4641      	mov	r1, r8
   18bd0:	040f      	lsls	r7, r1, #16
   18bd2:	9904      	ldr	r1, [sp, #16]
   18bd4:	0c3f      	lsrs	r7, r7, #16
   18bd6:	4688      	mov	r8, r1
   18bd8:	0400      	lsls	r0, r0, #16
   18bda:	19c0      	adds	r0, r0, r7
   18bdc:	4480      	add	r8, r0
   18bde:	4641      	mov	r1, r8
   18be0:	9104      	str	r1, [sp, #16]
   18be2:	4659      	mov	r1, fp
   18be4:	0c0f      	lsrs	r7, r1, #16
   18be6:	0409      	lsls	r1, r1, #16
   18be8:	0c09      	lsrs	r1, r1, #16
   18bea:	4688      	mov	r8, r1
   18bec:	4359      	muls	r1, r3
   18bee:	468a      	mov	sl, r1
   18bf0:	0039      	movs	r1, r7
   18bf2:	4351      	muls	r1, r2
   18bf4:	4689      	mov	r9, r1
   18bf6:	4641      	mov	r1, r8
   18bf8:	434a      	muls	r2, r1
   18bfa:	4651      	mov	r1, sl
   18bfc:	0c09      	lsrs	r1, r1, #16
   18bfe:	468b      	mov	fp, r1
   18c00:	437b      	muls	r3, r7
   18c02:	18d2      	adds	r2, r2, r3
   18c04:	445a      	add	r2, fp
   18c06:	4293      	cmp	r3, r2
   18c08:	d903      	bls.n	18c12 <__aeabi_dmul+0x2c6>
   18c0a:	2380      	movs	r3, #128	; 0x80
   18c0c:	025b      	lsls	r3, r3, #9
   18c0e:	469b      	mov	fp, r3
   18c10:	44d9      	add	r9, fp
   18c12:	4651      	mov	r1, sl
   18c14:	0409      	lsls	r1, r1, #16
   18c16:	0c09      	lsrs	r1, r1, #16
   18c18:	468a      	mov	sl, r1
   18c1a:	4641      	mov	r1, r8
   18c1c:	4361      	muls	r1, r4
   18c1e:	437c      	muls	r4, r7
   18c20:	0c13      	lsrs	r3, r2, #16
   18c22:	0412      	lsls	r2, r2, #16
   18c24:	444b      	add	r3, r9
   18c26:	4452      	add	r2, sl
   18c28:	46a1      	mov	r9, r4
   18c2a:	468a      	mov	sl, r1
   18c2c:	003c      	movs	r4, r7
   18c2e:	4641      	mov	r1, r8
   18c30:	436c      	muls	r4, r5
   18c32:	434d      	muls	r5, r1
   18c34:	4651      	mov	r1, sl
   18c36:	444d      	add	r5, r9
   18c38:	0c0f      	lsrs	r7, r1, #16
   18c3a:	197d      	adds	r5, r7, r5
   18c3c:	45a9      	cmp	r9, r5
   18c3e:	d903      	bls.n	18c48 <__aeabi_dmul+0x2fc>
   18c40:	2180      	movs	r1, #128	; 0x80
   18c42:	0249      	lsls	r1, r1, #9
   18c44:	4688      	mov	r8, r1
   18c46:	4444      	add	r4, r8
   18c48:	9f04      	ldr	r7, [sp, #16]
   18c4a:	9903      	ldr	r1, [sp, #12]
   18c4c:	46b8      	mov	r8, r7
   18c4e:	4441      	add	r1, r8
   18c50:	468b      	mov	fp, r1
   18c52:	4583      	cmp	fp, r0
   18c54:	4180      	sbcs	r0, r0
   18c56:	4241      	negs	r1, r0
   18c58:	4688      	mov	r8, r1
   18c5a:	4651      	mov	r1, sl
   18c5c:	0408      	lsls	r0, r1, #16
   18c5e:	042f      	lsls	r7, r5, #16
   18c60:	0c00      	lsrs	r0, r0, #16
   18c62:	183f      	adds	r7, r7, r0
   18c64:	4658      	mov	r0, fp
   18c66:	9902      	ldr	r1, [sp, #8]
   18c68:	1810      	adds	r0, r2, r0
   18c6a:	4689      	mov	r9, r1
   18c6c:	4290      	cmp	r0, r2
   18c6e:	4192      	sbcs	r2, r2
   18c70:	444f      	add	r7, r9
   18c72:	46ba      	mov	sl, r7
   18c74:	4252      	negs	r2, r2
   18c76:	4699      	mov	r9, r3
   18c78:	4693      	mov	fp, r2
   18c7a:	44c2      	add	sl, r8
   18c7c:	44d1      	add	r9, sl
   18c7e:	44cb      	add	fp, r9
   18c80:	428f      	cmp	r7, r1
   18c82:	41bf      	sbcs	r7, r7
   18c84:	45c2      	cmp	sl, r8
   18c86:	4189      	sbcs	r1, r1
   18c88:	4599      	cmp	r9, r3
   18c8a:	419b      	sbcs	r3, r3
   18c8c:	4593      	cmp	fp, r2
   18c8e:	4192      	sbcs	r2, r2
   18c90:	427f      	negs	r7, r7
   18c92:	4249      	negs	r1, r1
   18c94:	0c2d      	lsrs	r5, r5, #16
   18c96:	4252      	negs	r2, r2
   18c98:	430f      	orrs	r7, r1
   18c9a:	425b      	negs	r3, r3
   18c9c:	4313      	orrs	r3, r2
   18c9e:	197f      	adds	r7, r7, r5
   18ca0:	18ff      	adds	r7, r7, r3
   18ca2:	465b      	mov	r3, fp
   18ca4:	193c      	adds	r4, r7, r4
   18ca6:	0ddb      	lsrs	r3, r3, #23
   18ca8:	9a05      	ldr	r2, [sp, #20]
   18caa:	0264      	lsls	r4, r4, #9
   18cac:	431c      	orrs	r4, r3
   18cae:	0243      	lsls	r3, r0, #9
   18cb0:	4313      	orrs	r3, r2
   18cb2:	1e5d      	subs	r5, r3, #1
   18cb4:	41ab      	sbcs	r3, r5
   18cb6:	465a      	mov	r2, fp
   18cb8:	0dc0      	lsrs	r0, r0, #23
   18cba:	4303      	orrs	r3, r0
   18cbc:	0252      	lsls	r2, r2, #9
   18cbe:	4313      	orrs	r3, r2
   18cc0:	01e2      	lsls	r2, r4, #7
   18cc2:	d556      	bpl.n	18d72 <__aeabi_dmul+0x426>
   18cc4:	2001      	movs	r0, #1
   18cc6:	085a      	lsrs	r2, r3, #1
   18cc8:	4003      	ands	r3, r0
   18cca:	4313      	orrs	r3, r2
   18ccc:	07e2      	lsls	r2, r4, #31
   18cce:	4313      	orrs	r3, r2
   18cd0:	0864      	lsrs	r4, r4, #1
   18cd2:	485a      	ldr	r0, [pc, #360]	; (18e3c <__aeabi_dmul+0x4f0>)
   18cd4:	4460      	add	r0, ip
   18cd6:	2800      	cmp	r0, #0
   18cd8:	dd4d      	ble.n	18d76 <__aeabi_dmul+0x42a>
   18cda:	075a      	lsls	r2, r3, #29
   18cdc:	d009      	beq.n	18cf2 <__aeabi_dmul+0x3a6>
   18cde:	220f      	movs	r2, #15
   18ce0:	401a      	ands	r2, r3
   18ce2:	2a04      	cmp	r2, #4
   18ce4:	d005      	beq.n	18cf2 <__aeabi_dmul+0x3a6>
   18ce6:	1d1a      	adds	r2, r3, #4
   18ce8:	429a      	cmp	r2, r3
   18cea:	419b      	sbcs	r3, r3
   18cec:	425b      	negs	r3, r3
   18cee:	18e4      	adds	r4, r4, r3
   18cf0:	0013      	movs	r3, r2
   18cf2:	01e2      	lsls	r2, r4, #7
   18cf4:	d504      	bpl.n	18d00 <__aeabi_dmul+0x3b4>
   18cf6:	2080      	movs	r0, #128	; 0x80
   18cf8:	4a51      	ldr	r2, [pc, #324]	; (18e40 <__aeabi_dmul+0x4f4>)
   18cfa:	00c0      	lsls	r0, r0, #3
   18cfc:	4014      	ands	r4, r2
   18cfe:	4460      	add	r0, ip
   18d00:	4a50      	ldr	r2, [pc, #320]	; (18e44 <__aeabi_dmul+0x4f8>)
   18d02:	4290      	cmp	r0, r2
   18d04:	dd00      	ble.n	18d08 <__aeabi_dmul+0x3bc>
   18d06:	e6e3      	b.n	18ad0 <__aeabi_dmul+0x184>
   18d08:	2501      	movs	r5, #1
   18d0a:	08db      	lsrs	r3, r3, #3
   18d0c:	0762      	lsls	r2, r4, #29
   18d0e:	431a      	orrs	r2, r3
   18d10:	0264      	lsls	r4, r4, #9
   18d12:	9b01      	ldr	r3, [sp, #4]
   18d14:	4691      	mov	r9, r2
   18d16:	0b22      	lsrs	r2, r4, #12
   18d18:	0544      	lsls	r4, r0, #21
   18d1a:	0d64      	lsrs	r4, r4, #21
   18d1c:	401d      	ands	r5, r3
   18d1e:	e67c      	b.n	18a1a <__aeabi_dmul+0xce>
   18d20:	2280      	movs	r2, #128	; 0x80
   18d22:	4659      	mov	r1, fp
   18d24:	0312      	lsls	r2, r2, #12
   18d26:	4211      	tst	r1, r2
   18d28:	d008      	beq.n	18d3c <__aeabi_dmul+0x3f0>
   18d2a:	4214      	tst	r4, r2
   18d2c:	d106      	bne.n	18d3c <__aeabi_dmul+0x3f0>
   18d2e:	4322      	orrs	r2, r4
   18d30:	0312      	lsls	r2, r2, #12
   18d32:	0b12      	lsrs	r2, r2, #12
   18d34:	4645      	mov	r5, r8
   18d36:	4699      	mov	r9, r3
   18d38:	4c43      	ldr	r4, [pc, #268]	; (18e48 <__aeabi_dmul+0x4fc>)
   18d3a:	e66e      	b.n	18a1a <__aeabi_dmul+0xce>
   18d3c:	465b      	mov	r3, fp
   18d3e:	431a      	orrs	r2, r3
   18d40:	0312      	lsls	r2, r2, #12
   18d42:	0b12      	lsrs	r2, r2, #12
   18d44:	4c40      	ldr	r4, [pc, #256]	; (18e48 <__aeabi_dmul+0x4fc>)
   18d46:	e668      	b.n	18a1a <__aeabi_dmul+0xce>
   18d48:	0003      	movs	r3, r0
   18d4a:	4654      	mov	r4, sl
   18d4c:	3b28      	subs	r3, #40	; 0x28
   18d4e:	409c      	lsls	r4, r3
   18d50:	2300      	movs	r3, #0
   18d52:	e6b9      	b.n	18ac8 <__aeabi_dmul+0x17c>
   18d54:	f000 fc90 	bl	19678 <__clzsi2>
   18d58:	3020      	adds	r0, #32
   18d5a:	e6a6      	b.n	18aaa <__aeabi_dmul+0x15e>
   18d5c:	0003      	movs	r3, r0
   18d5e:	3b28      	subs	r3, #40	; 0x28
   18d60:	409f      	lsls	r7, r3
   18d62:	2300      	movs	r3, #0
   18d64:	46bb      	mov	fp, r7
   18d66:	4699      	mov	r9, r3
   18d68:	e68a      	b.n	18a80 <__aeabi_dmul+0x134>
   18d6a:	f000 fc85 	bl	19678 <__clzsi2>
   18d6e:	3020      	adds	r0, #32
   18d70:	e674      	b.n	18a5c <__aeabi_dmul+0x110>
   18d72:	46b4      	mov	ip, r6
   18d74:	e7ad      	b.n	18cd2 <__aeabi_dmul+0x386>
   18d76:	2501      	movs	r5, #1
   18d78:	1a2a      	subs	r2, r5, r0
   18d7a:	2a38      	cmp	r2, #56	; 0x38
   18d7c:	dd06      	ble.n	18d8c <__aeabi_dmul+0x440>
   18d7e:	9b01      	ldr	r3, [sp, #4]
   18d80:	2400      	movs	r4, #0
   18d82:	401d      	ands	r5, r3
   18d84:	2300      	movs	r3, #0
   18d86:	2200      	movs	r2, #0
   18d88:	4699      	mov	r9, r3
   18d8a:	e646      	b.n	18a1a <__aeabi_dmul+0xce>
   18d8c:	2a1f      	cmp	r2, #31
   18d8e:	dc21      	bgt.n	18dd4 <__aeabi_dmul+0x488>
   18d90:	2520      	movs	r5, #32
   18d92:	0020      	movs	r0, r4
   18d94:	1aad      	subs	r5, r5, r2
   18d96:	001e      	movs	r6, r3
   18d98:	40ab      	lsls	r3, r5
   18d9a:	40a8      	lsls	r0, r5
   18d9c:	40d6      	lsrs	r6, r2
   18d9e:	1e5d      	subs	r5, r3, #1
   18da0:	41ab      	sbcs	r3, r5
   18da2:	4330      	orrs	r0, r6
   18da4:	4318      	orrs	r0, r3
   18da6:	40d4      	lsrs	r4, r2
   18da8:	0743      	lsls	r3, r0, #29
   18daa:	d009      	beq.n	18dc0 <__aeabi_dmul+0x474>
   18dac:	230f      	movs	r3, #15
   18dae:	4003      	ands	r3, r0
   18db0:	2b04      	cmp	r3, #4
   18db2:	d005      	beq.n	18dc0 <__aeabi_dmul+0x474>
   18db4:	0003      	movs	r3, r0
   18db6:	1d18      	adds	r0, r3, #4
   18db8:	4298      	cmp	r0, r3
   18dba:	419b      	sbcs	r3, r3
   18dbc:	425b      	negs	r3, r3
   18dbe:	18e4      	adds	r4, r4, r3
   18dc0:	0223      	lsls	r3, r4, #8
   18dc2:	d521      	bpl.n	18e08 <__aeabi_dmul+0x4bc>
   18dc4:	2501      	movs	r5, #1
   18dc6:	9b01      	ldr	r3, [sp, #4]
   18dc8:	2401      	movs	r4, #1
   18dca:	401d      	ands	r5, r3
   18dcc:	2300      	movs	r3, #0
   18dce:	2200      	movs	r2, #0
   18dd0:	4699      	mov	r9, r3
   18dd2:	e622      	b.n	18a1a <__aeabi_dmul+0xce>
   18dd4:	251f      	movs	r5, #31
   18dd6:	0021      	movs	r1, r4
   18dd8:	426d      	negs	r5, r5
   18dda:	1a28      	subs	r0, r5, r0
   18ddc:	40c1      	lsrs	r1, r0
   18dde:	0008      	movs	r0, r1
   18de0:	2a20      	cmp	r2, #32
   18de2:	d01d      	beq.n	18e20 <__aeabi_dmul+0x4d4>
   18de4:	355f      	adds	r5, #95	; 0x5f
   18de6:	1aaa      	subs	r2, r5, r2
   18de8:	4094      	lsls	r4, r2
   18dea:	4323      	orrs	r3, r4
   18dec:	1e5c      	subs	r4, r3, #1
   18dee:	41a3      	sbcs	r3, r4
   18df0:	2507      	movs	r5, #7
   18df2:	4303      	orrs	r3, r0
   18df4:	401d      	ands	r5, r3
   18df6:	2200      	movs	r2, #0
   18df8:	2d00      	cmp	r5, #0
   18dfa:	d009      	beq.n	18e10 <__aeabi_dmul+0x4c4>
   18dfc:	220f      	movs	r2, #15
   18dfe:	2400      	movs	r4, #0
   18e00:	401a      	ands	r2, r3
   18e02:	0018      	movs	r0, r3
   18e04:	2a04      	cmp	r2, #4
   18e06:	d1d6      	bne.n	18db6 <__aeabi_dmul+0x46a>
   18e08:	0003      	movs	r3, r0
   18e0a:	0765      	lsls	r5, r4, #29
   18e0c:	0264      	lsls	r4, r4, #9
   18e0e:	0b22      	lsrs	r2, r4, #12
   18e10:	08db      	lsrs	r3, r3, #3
   18e12:	432b      	orrs	r3, r5
   18e14:	2501      	movs	r5, #1
   18e16:	4699      	mov	r9, r3
   18e18:	9b01      	ldr	r3, [sp, #4]
   18e1a:	2400      	movs	r4, #0
   18e1c:	401d      	ands	r5, r3
   18e1e:	e5fc      	b.n	18a1a <__aeabi_dmul+0xce>
   18e20:	2400      	movs	r4, #0
   18e22:	e7e2      	b.n	18dea <__aeabi_dmul+0x49e>
   18e24:	2280      	movs	r2, #128	; 0x80
   18e26:	2501      	movs	r5, #1
   18e28:	0312      	lsls	r2, r2, #12
   18e2a:	4322      	orrs	r2, r4
   18e2c:	9901      	ldr	r1, [sp, #4]
   18e2e:	0312      	lsls	r2, r2, #12
   18e30:	0b12      	lsrs	r2, r2, #12
   18e32:	400d      	ands	r5, r1
   18e34:	4699      	mov	r9, r3
   18e36:	4c04      	ldr	r4, [pc, #16]	; (18e48 <__aeabi_dmul+0x4fc>)
   18e38:	e5ef      	b.n	18a1a <__aeabi_dmul+0xce>
   18e3a:	46c0      	nop			; (mov r8, r8)
   18e3c:	000003ff 	.word	0x000003ff
   18e40:	feffffff 	.word	0xfeffffff
   18e44:	000007fe 	.word	0x000007fe
   18e48:	000007ff 	.word	0x000007ff

00018e4c <__aeabi_dsub>:
   18e4c:	b5f0      	push	{r4, r5, r6, r7, lr}
   18e4e:	4646      	mov	r6, r8
   18e50:	46d6      	mov	lr, sl
   18e52:	464f      	mov	r7, r9
   18e54:	030c      	lsls	r4, r1, #12
   18e56:	b5c0      	push	{r6, r7, lr}
   18e58:	0fcd      	lsrs	r5, r1, #31
   18e5a:	004e      	lsls	r6, r1, #1
   18e5c:	0a61      	lsrs	r1, r4, #9
   18e5e:	0f44      	lsrs	r4, r0, #29
   18e60:	430c      	orrs	r4, r1
   18e62:	00c1      	lsls	r1, r0, #3
   18e64:	0058      	lsls	r0, r3, #1
   18e66:	0d40      	lsrs	r0, r0, #21
   18e68:	4684      	mov	ip, r0
   18e6a:	468a      	mov	sl, r1
   18e6c:	000f      	movs	r7, r1
   18e6e:	0319      	lsls	r1, r3, #12
   18e70:	0f50      	lsrs	r0, r2, #29
   18e72:	0a49      	lsrs	r1, r1, #9
   18e74:	4301      	orrs	r1, r0
   18e76:	48c6      	ldr	r0, [pc, #792]	; (19190 <__aeabi_dsub+0x344>)
   18e78:	0d76      	lsrs	r6, r6, #21
   18e7a:	46a8      	mov	r8, r5
   18e7c:	0fdb      	lsrs	r3, r3, #31
   18e7e:	00d2      	lsls	r2, r2, #3
   18e80:	4584      	cmp	ip, r0
   18e82:	d100      	bne.n	18e86 <__aeabi_dsub+0x3a>
   18e84:	e0d8      	b.n	19038 <__aeabi_dsub+0x1ec>
   18e86:	2001      	movs	r0, #1
   18e88:	4043      	eors	r3, r0
   18e8a:	42ab      	cmp	r3, r5
   18e8c:	d100      	bne.n	18e90 <__aeabi_dsub+0x44>
   18e8e:	e0a6      	b.n	18fde <__aeabi_dsub+0x192>
   18e90:	4660      	mov	r0, ip
   18e92:	1a35      	subs	r5, r6, r0
   18e94:	2d00      	cmp	r5, #0
   18e96:	dc00      	bgt.n	18e9a <__aeabi_dsub+0x4e>
   18e98:	e105      	b.n	190a6 <__aeabi_dsub+0x25a>
   18e9a:	2800      	cmp	r0, #0
   18e9c:	d110      	bne.n	18ec0 <__aeabi_dsub+0x74>
   18e9e:	000b      	movs	r3, r1
   18ea0:	4313      	orrs	r3, r2
   18ea2:	d100      	bne.n	18ea6 <__aeabi_dsub+0x5a>
   18ea4:	e0d7      	b.n	19056 <__aeabi_dsub+0x20a>
   18ea6:	1e6b      	subs	r3, r5, #1
   18ea8:	2b00      	cmp	r3, #0
   18eaa:	d000      	beq.n	18eae <__aeabi_dsub+0x62>
   18eac:	e14b      	b.n	19146 <__aeabi_dsub+0x2fa>
   18eae:	4653      	mov	r3, sl
   18eb0:	1a9f      	subs	r7, r3, r2
   18eb2:	45ba      	cmp	sl, r7
   18eb4:	4180      	sbcs	r0, r0
   18eb6:	1a64      	subs	r4, r4, r1
   18eb8:	4240      	negs	r0, r0
   18eba:	1a24      	subs	r4, r4, r0
   18ebc:	2601      	movs	r6, #1
   18ebe:	e01e      	b.n	18efe <__aeabi_dsub+0xb2>
   18ec0:	4bb3      	ldr	r3, [pc, #716]	; (19190 <__aeabi_dsub+0x344>)
   18ec2:	429e      	cmp	r6, r3
   18ec4:	d048      	beq.n	18f58 <__aeabi_dsub+0x10c>
   18ec6:	2380      	movs	r3, #128	; 0x80
   18ec8:	041b      	lsls	r3, r3, #16
   18eca:	4319      	orrs	r1, r3
   18ecc:	2d38      	cmp	r5, #56	; 0x38
   18ece:	dd00      	ble.n	18ed2 <__aeabi_dsub+0x86>
   18ed0:	e119      	b.n	19106 <__aeabi_dsub+0x2ba>
   18ed2:	2d1f      	cmp	r5, #31
   18ed4:	dd00      	ble.n	18ed8 <__aeabi_dsub+0x8c>
   18ed6:	e14c      	b.n	19172 <__aeabi_dsub+0x326>
   18ed8:	2320      	movs	r3, #32
   18eda:	000f      	movs	r7, r1
   18edc:	1b5b      	subs	r3, r3, r5
   18ede:	0010      	movs	r0, r2
   18ee0:	409a      	lsls	r2, r3
   18ee2:	409f      	lsls	r7, r3
   18ee4:	40e8      	lsrs	r0, r5
   18ee6:	1e53      	subs	r3, r2, #1
   18ee8:	419a      	sbcs	r2, r3
   18eea:	40e9      	lsrs	r1, r5
   18eec:	4307      	orrs	r7, r0
   18eee:	4317      	orrs	r7, r2
   18ef0:	4653      	mov	r3, sl
   18ef2:	1bdf      	subs	r7, r3, r7
   18ef4:	1a61      	subs	r1, r4, r1
   18ef6:	45ba      	cmp	sl, r7
   18ef8:	41a4      	sbcs	r4, r4
   18efa:	4264      	negs	r4, r4
   18efc:	1b0c      	subs	r4, r1, r4
   18efe:	0223      	lsls	r3, r4, #8
   18f00:	d400      	bmi.n	18f04 <__aeabi_dsub+0xb8>
   18f02:	e0c5      	b.n	19090 <__aeabi_dsub+0x244>
   18f04:	0264      	lsls	r4, r4, #9
   18f06:	0a65      	lsrs	r5, r4, #9
   18f08:	2d00      	cmp	r5, #0
   18f0a:	d100      	bne.n	18f0e <__aeabi_dsub+0xc2>
   18f0c:	e0f6      	b.n	190fc <__aeabi_dsub+0x2b0>
   18f0e:	0028      	movs	r0, r5
   18f10:	f000 fbb2 	bl	19678 <__clzsi2>
   18f14:	0003      	movs	r3, r0
   18f16:	3b08      	subs	r3, #8
   18f18:	2b1f      	cmp	r3, #31
   18f1a:	dd00      	ble.n	18f1e <__aeabi_dsub+0xd2>
   18f1c:	e0e9      	b.n	190f2 <__aeabi_dsub+0x2a6>
   18f1e:	2220      	movs	r2, #32
   18f20:	003c      	movs	r4, r7
   18f22:	1ad2      	subs	r2, r2, r3
   18f24:	409d      	lsls	r5, r3
   18f26:	40d4      	lsrs	r4, r2
   18f28:	409f      	lsls	r7, r3
   18f2a:	4325      	orrs	r5, r4
   18f2c:	429e      	cmp	r6, r3
   18f2e:	dd00      	ble.n	18f32 <__aeabi_dsub+0xe6>
   18f30:	e0db      	b.n	190ea <__aeabi_dsub+0x29e>
   18f32:	1b9e      	subs	r6, r3, r6
   18f34:	1c73      	adds	r3, r6, #1
   18f36:	2b1f      	cmp	r3, #31
   18f38:	dd00      	ble.n	18f3c <__aeabi_dsub+0xf0>
   18f3a:	e10a      	b.n	19152 <__aeabi_dsub+0x306>
   18f3c:	2220      	movs	r2, #32
   18f3e:	0038      	movs	r0, r7
   18f40:	1ad2      	subs	r2, r2, r3
   18f42:	0029      	movs	r1, r5
   18f44:	4097      	lsls	r7, r2
   18f46:	002c      	movs	r4, r5
   18f48:	4091      	lsls	r1, r2
   18f4a:	40d8      	lsrs	r0, r3
   18f4c:	1e7a      	subs	r2, r7, #1
   18f4e:	4197      	sbcs	r7, r2
   18f50:	40dc      	lsrs	r4, r3
   18f52:	2600      	movs	r6, #0
   18f54:	4301      	orrs	r1, r0
   18f56:	430f      	orrs	r7, r1
   18f58:	077b      	lsls	r3, r7, #29
   18f5a:	d009      	beq.n	18f70 <__aeabi_dsub+0x124>
   18f5c:	230f      	movs	r3, #15
   18f5e:	403b      	ands	r3, r7
   18f60:	2b04      	cmp	r3, #4
   18f62:	d005      	beq.n	18f70 <__aeabi_dsub+0x124>
   18f64:	1d3b      	adds	r3, r7, #4
   18f66:	42bb      	cmp	r3, r7
   18f68:	41bf      	sbcs	r7, r7
   18f6a:	427f      	negs	r7, r7
   18f6c:	19e4      	adds	r4, r4, r7
   18f6e:	001f      	movs	r7, r3
   18f70:	0223      	lsls	r3, r4, #8
   18f72:	d525      	bpl.n	18fc0 <__aeabi_dsub+0x174>
   18f74:	4b86      	ldr	r3, [pc, #536]	; (19190 <__aeabi_dsub+0x344>)
   18f76:	3601      	adds	r6, #1
   18f78:	429e      	cmp	r6, r3
   18f7a:	d100      	bne.n	18f7e <__aeabi_dsub+0x132>
   18f7c:	e0af      	b.n	190de <__aeabi_dsub+0x292>
   18f7e:	4b85      	ldr	r3, [pc, #532]	; (19194 <__aeabi_dsub+0x348>)
   18f80:	2501      	movs	r5, #1
   18f82:	401c      	ands	r4, r3
   18f84:	4643      	mov	r3, r8
   18f86:	0762      	lsls	r2, r4, #29
   18f88:	08ff      	lsrs	r7, r7, #3
   18f8a:	0264      	lsls	r4, r4, #9
   18f8c:	0576      	lsls	r6, r6, #21
   18f8e:	4317      	orrs	r7, r2
   18f90:	0b24      	lsrs	r4, r4, #12
   18f92:	0d76      	lsrs	r6, r6, #21
   18f94:	401d      	ands	r5, r3
   18f96:	2100      	movs	r1, #0
   18f98:	0324      	lsls	r4, r4, #12
   18f9a:	0b23      	lsrs	r3, r4, #12
   18f9c:	0d0c      	lsrs	r4, r1, #20
   18f9e:	4a7e      	ldr	r2, [pc, #504]	; (19198 <__aeabi_dsub+0x34c>)
   18fa0:	0524      	lsls	r4, r4, #20
   18fa2:	431c      	orrs	r4, r3
   18fa4:	4014      	ands	r4, r2
   18fa6:	0533      	lsls	r3, r6, #20
   18fa8:	4323      	orrs	r3, r4
   18faa:	005b      	lsls	r3, r3, #1
   18fac:	07ed      	lsls	r5, r5, #31
   18fae:	085b      	lsrs	r3, r3, #1
   18fb0:	432b      	orrs	r3, r5
   18fb2:	0038      	movs	r0, r7
   18fb4:	0019      	movs	r1, r3
   18fb6:	bc1c      	pop	{r2, r3, r4}
   18fb8:	4690      	mov	r8, r2
   18fba:	4699      	mov	r9, r3
   18fbc:	46a2      	mov	sl, r4
   18fbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
   18fc0:	2501      	movs	r5, #1
   18fc2:	4643      	mov	r3, r8
   18fc4:	0762      	lsls	r2, r4, #29
   18fc6:	08ff      	lsrs	r7, r7, #3
   18fc8:	4317      	orrs	r7, r2
   18fca:	08e4      	lsrs	r4, r4, #3
   18fcc:	401d      	ands	r5, r3
   18fce:	4b70      	ldr	r3, [pc, #448]	; (19190 <__aeabi_dsub+0x344>)
   18fd0:	429e      	cmp	r6, r3
   18fd2:	d036      	beq.n	19042 <__aeabi_dsub+0x1f6>
   18fd4:	0324      	lsls	r4, r4, #12
   18fd6:	0576      	lsls	r6, r6, #21
   18fd8:	0b24      	lsrs	r4, r4, #12
   18fda:	0d76      	lsrs	r6, r6, #21
   18fdc:	e7db      	b.n	18f96 <__aeabi_dsub+0x14a>
   18fde:	4663      	mov	r3, ip
   18fe0:	1af3      	subs	r3, r6, r3
   18fe2:	2b00      	cmp	r3, #0
   18fe4:	dc00      	bgt.n	18fe8 <__aeabi_dsub+0x19c>
   18fe6:	e094      	b.n	19112 <__aeabi_dsub+0x2c6>
   18fe8:	4660      	mov	r0, ip
   18fea:	2800      	cmp	r0, #0
   18fec:	d035      	beq.n	1905a <__aeabi_dsub+0x20e>
   18fee:	4868      	ldr	r0, [pc, #416]	; (19190 <__aeabi_dsub+0x344>)
   18ff0:	4286      	cmp	r6, r0
   18ff2:	d0b1      	beq.n	18f58 <__aeabi_dsub+0x10c>
   18ff4:	2780      	movs	r7, #128	; 0x80
   18ff6:	043f      	lsls	r7, r7, #16
   18ff8:	4339      	orrs	r1, r7
   18ffa:	2b38      	cmp	r3, #56	; 0x38
   18ffc:	dc00      	bgt.n	19000 <__aeabi_dsub+0x1b4>
   18ffe:	e0fd      	b.n	191fc <__aeabi_dsub+0x3b0>
   19000:	430a      	orrs	r2, r1
   19002:	0017      	movs	r7, r2
   19004:	2100      	movs	r1, #0
   19006:	1e7a      	subs	r2, r7, #1
   19008:	4197      	sbcs	r7, r2
   1900a:	4457      	add	r7, sl
   1900c:	4557      	cmp	r7, sl
   1900e:	4180      	sbcs	r0, r0
   19010:	1909      	adds	r1, r1, r4
   19012:	4244      	negs	r4, r0
   19014:	190c      	adds	r4, r1, r4
   19016:	0223      	lsls	r3, r4, #8
   19018:	d53a      	bpl.n	19090 <__aeabi_dsub+0x244>
   1901a:	4b5d      	ldr	r3, [pc, #372]	; (19190 <__aeabi_dsub+0x344>)
   1901c:	3601      	adds	r6, #1
   1901e:	429e      	cmp	r6, r3
   19020:	d100      	bne.n	19024 <__aeabi_dsub+0x1d8>
   19022:	e14b      	b.n	192bc <__aeabi_dsub+0x470>
   19024:	2201      	movs	r2, #1
   19026:	4b5b      	ldr	r3, [pc, #364]	; (19194 <__aeabi_dsub+0x348>)
   19028:	401c      	ands	r4, r3
   1902a:	087b      	lsrs	r3, r7, #1
   1902c:	4017      	ands	r7, r2
   1902e:	431f      	orrs	r7, r3
   19030:	07e2      	lsls	r2, r4, #31
   19032:	4317      	orrs	r7, r2
   19034:	0864      	lsrs	r4, r4, #1
   19036:	e78f      	b.n	18f58 <__aeabi_dsub+0x10c>
   19038:	0008      	movs	r0, r1
   1903a:	4310      	orrs	r0, r2
   1903c:	d000      	beq.n	19040 <__aeabi_dsub+0x1f4>
   1903e:	e724      	b.n	18e8a <__aeabi_dsub+0x3e>
   19040:	e721      	b.n	18e86 <__aeabi_dsub+0x3a>
   19042:	0023      	movs	r3, r4
   19044:	433b      	orrs	r3, r7
   19046:	d100      	bne.n	1904a <__aeabi_dsub+0x1fe>
   19048:	e1b9      	b.n	193be <__aeabi_dsub+0x572>
   1904a:	2280      	movs	r2, #128	; 0x80
   1904c:	0312      	lsls	r2, r2, #12
   1904e:	4314      	orrs	r4, r2
   19050:	0324      	lsls	r4, r4, #12
   19052:	0b24      	lsrs	r4, r4, #12
   19054:	e79f      	b.n	18f96 <__aeabi_dsub+0x14a>
   19056:	002e      	movs	r6, r5
   19058:	e77e      	b.n	18f58 <__aeabi_dsub+0x10c>
   1905a:	0008      	movs	r0, r1
   1905c:	4310      	orrs	r0, r2
   1905e:	d100      	bne.n	19062 <__aeabi_dsub+0x216>
   19060:	e0ca      	b.n	191f8 <__aeabi_dsub+0x3ac>
   19062:	1e58      	subs	r0, r3, #1
   19064:	4684      	mov	ip, r0
   19066:	2800      	cmp	r0, #0
   19068:	d000      	beq.n	1906c <__aeabi_dsub+0x220>
   1906a:	e0e7      	b.n	1923c <__aeabi_dsub+0x3f0>
   1906c:	4452      	add	r2, sl
   1906e:	4552      	cmp	r2, sl
   19070:	4180      	sbcs	r0, r0
   19072:	1864      	adds	r4, r4, r1
   19074:	4240      	negs	r0, r0
   19076:	1824      	adds	r4, r4, r0
   19078:	0017      	movs	r7, r2
   1907a:	2601      	movs	r6, #1
   1907c:	0223      	lsls	r3, r4, #8
   1907e:	d507      	bpl.n	19090 <__aeabi_dsub+0x244>
   19080:	2602      	movs	r6, #2
   19082:	e7cf      	b.n	19024 <__aeabi_dsub+0x1d8>
   19084:	4664      	mov	r4, ip
   19086:	432c      	orrs	r4, r5
   19088:	d100      	bne.n	1908c <__aeabi_dsub+0x240>
   1908a:	e1b3      	b.n	193f4 <__aeabi_dsub+0x5a8>
   1908c:	002c      	movs	r4, r5
   1908e:	4667      	mov	r7, ip
   19090:	077b      	lsls	r3, r7, #29
   19092:	d000      	beq.n	19096 <__aeabi_dsub+0x24a>
   19094:	e762      	b.n	18f5c <__aeabi_dsub+0x110>
   19096:	0763      	lsls	r3, r4, #29
   19098:	08ff      	lsrs	r7, r7, #3
   1909a:	431f      	orrs	r7, r3
   1909c:	2501      	movs	r5, #1
   1909e:	4643      	mov	r3, r8
   190a0:	08e4      	lsrs	r4, r4, #3
   190a2:	401d      	ands	r5, r3
   190a4:	e793      	b.n	18fce <__aeabi_dsub+0x182>
   190a6:	2d00      	cmp	r5, #0
   190a8:	d178      	bne.n	1919c <__aeabi_dsub+0x350>
   190aa:	1c75      	adds	r5, r6, #1
   190ac:	056d      	lsls	r5, r5, #21
   190ae:	0d6d      	lsrs	r5, r5, #21
   190b0:	2d01      	cmp	r5, #1
   190b2:	dc00      	bgt.n	190b6 <__aeabi_dsub+0x26a>
   190b4:	e0f2      	b.n	1929c <__aeabi_dsub+0x450>
   190b6:	4650      	mov	r0, sl
   190b8:	1a80      	subs	r0, r0, r2
   190ba:	4582      	cmp	sl, r0
   190bc:	41bf      	sbcs	r7, r7
   190be:	1a65      	subs	r5, r4, r1
   190c0:	427f      	negs	r7, r7
   190c2:	1bed      	subs	r5, r5, r7
   190c4:	4684      	mov	ip, r0
   190c6:	0228      	lsls	r0, r5, #8
   190c8:	d400      	bmi.n	190cc <__aeabi_dsub+0x280>
   190ca:	e08c      	b.n	191e6 <__aeabi_dsub+0x39a>
   190cc:	4650      	mov	r0, sl
   190ce:	1a17      	subs	r7, r2, r0
   190d0:	42ba      	cmp	r2, r7
   190d2:	4192      	sbcs	r2, r2
   190d4:	1b0c      	subs	r4, r1, r4
   190d6:	4255      	negs	r5, r2
   190d8:	1b65      	subs	r5, r4, r5
   190da:	4698      	mov	r8, r3
   190dc:	e714      	b.n	18f08 <__aeabi_dsub+0xbc>
   190de:	2501      	movs	r5, #1
   190e0:	4643      	mov	r3, r8
   190e2:	2400      	movs	r4, #0
   190e4:	401d      	ands	r5, r3
   190e6:	2700      	movs	r7, #0
   190e8:	e755      	b.n	18f96 <__aeabi_dsub+0x14a>
   190ea:	4c2a      	ldr	r4, [pc, #168]	; (19194 <__aeabi_dsub+0x348>)
   190ec:	1af6      	subs	r6, r6, r3
   190ee:	402c      	ands	r4, r5
   190f0:	e732      	b.n	18f58 <__aeabi_dsub+0x10c>
   190f2:	003d      	movs	r5, r7
   190f4:	3828      	subs	r0, #40	; 0x28
   190f6:	4085      	lsls	r5, r0
   190f8:	2700      	movs	r7, #0
   190fa:	e717      	b.n	18f2c <__aeabi_dsub+0xe0>
   190fc:	0038      	movs	r0, r7
   190fe:	f000 fabb 	bl	19678 <__clzsi2>
   19102:	3020      	adds	r0, #32
   19104:	e706      	b.n	18f14 <__aeabi_dsub+0xc8>
   19106:	430a      	orrs	r2, r1
   19108:	0017      	movs	r7, r2
   1910a:	2100      	movs	r1, #0
   1910c:	1e7a      	subs	r2, r7, #1
   1910e:	4197      	sbcs	r7, r2
   19110:	e6ee      	b.n	18ef0 <__aeabi_dsub+0xa4>
   19112:	2b00      	cmp	r3, #0
   19114:	d000      	beq.n	19118 <__aeabi_dsub+0x2cc>
   19116:	e0e5      	b.n	192e4 <__aeabi_dsub+0x498>
   19118:	1c73      	adds	r3, r6, #1
   1911a:	469c      	mov	ip, r3
   1911c:	055b      	lsls	r3, r3, #21
   1911e:	0d5b      	lsrs	r3, r3, #21
   19120:	2b01      	cmp	r3, #1
   19122:	dc00      	bgt.n	19126 <__aeabi_dsub+0x2da>
   19124:	e09f      	b.n	19266 <__aeabi_dsub+0x41a>
   19126:	4b1a      	ldr	r3, [pc, #104]	; (19190 <__aeabi_dsub+0x344>)
   19128:	459c      	cmp	ip, r3
   1912a:	d100      	bne.n	1912e <__aeabi_dsub+0x2e2>
   1912c:	e0c5      	b.n	192ba <__aeabi_dsub+0x46e>
   1912e:	4452      	add	r2, sl
   19130:	4552      	cmp	r2, sl
   19132:	4180      	sbcs	r0, r0
   19134:	1864      	adds	r4, r4, r1
   19136:	4240      	negs	r0, r0
   19138:	1824      	adds	r4, r4, r0
   1913a:	07e7      	lsls	r7, r4, #31
   1913c:	0852      	lsrs	r2, r2, #1
   1913e:	4317      	orrs	r7, r2
   19140:	0864      	lsrs	r4, r4, #1
   19142:	4666      	mov	r6, ip
   19144:	e708      	b.n	18f58 <__aeabi_dsub+0x10c>
   19146:	4812      	ldr	r0, [pc, #72]	; (19190 <__aeabi_dsub+0x344>)
   19148:	4285      	cmp	r5, r0
   1914a:	d100      	bne.n	1914e <__aeabi_dsub+0x302>
   1914c:	e085      	b.n	1925a <__aeabi_dsub+0x40e>
   1914e:	001d      	movs	r5, r3
   19150:	e6bc      	b.n	18ecc <__aeabi_dsub+0x80>
   19152:	0029      	movs	r1, r5
   19154:	3e1f      	subs	r6, #31
   19156:	40f1      	lsrs	r1, r6
   19158:	2b20      	cmp	r3, #32
   1915a:	d100      	bne.n	1915e <__aeabi_dsub+0x312>
   1915c:	e07f      	b.n	1925e <__aeabi_dsub+0x412>
   1915e:	2240      	movs	r2, #64	; 0x40
   19160:	1ad3      	subs	r3, r2, r3
   19162:	409d      	lsls	r5, r3
   19164:	432f      	orrs	r7, r5
   19166:	1e7d      	subs	r5, r7, #1
   19168:	41af      	sbcs	r7, r5
   1916a:	2400      	movs	r4, #0
   1916c:	430f      	orrs	r7, r1
   1916e:	2600      	movs	r6, #0
   19170:	e78e      	b.n	19090 <__aeabi_dsub+0x244>
   19172:	002b      	movs	r3, r5
   19174:	000f      	movs	r7, r1
   19176:	3b20      	subs	r3, #32
   19178:	40df      	lsrs	r7, r3
   1917a:	2d20      	cmp	r5, #32
   1917c:	d071      	beq.n	19262 <__aeabi_dsub+0x416>
   1917e:	2340      	movs	r3, #64	; 0x40
   19180:	1b5d      	subs	r5, r3, r5
   19182:	40a9      	lsls	r1, r5
   19184:	430a      	orrs	r2, r1
   19186:	1e51      	subs	r1, r2, #1
   19188:	418a      	sbcs	r2, r1
   1918a:	2100      	movs	r1, #0
   1918c:	4317      	orrs	r7, r2
   1918e:	e6af      	b.n	18ef0 <__aeabi_dsub+0xa4>
   19190:	000007ff 	.word	0x000007ff
   19194:	ff7fffff 	.word	0xff7fffff
   19198:	800fffff 	.word	0x800fffff
   1919c:	2e00      	cmp	r6, #0
   1919e:	d03e      	beq.n	1921e <__aeabi_dsub+0x3d2>
   191a0:	4eb3      	ldr	r6, [pc, #716]	; (19470 <__aeabi_dsub+0x624>)
   191a2:	45b4      	cmp	ip, r6
   191a4:	d045      	beq.n	19232 <__aeabi_dsub+0x3e6>
   191a6:	2680      	movs	r6, #128	; 0x80
   191a8:	0436      	lsls	r6, r6, #16
   191aa:	426d      	negs	r5, r5
   191ac:	4334      	orrs	r4, r6
   191ae:	2d38      	cmp	r5, #56	; 0x38
   191b0:	dd00      	ble.n	191b4 <__aeabi_dsub+0x368>
   191b2:	e0a8      	b.n	19306 <__aeabi_dsub+0x4ba>
   191b4:	2d1f      	cmp	r5, #31
   191b6:	dd00      	ble.n	191ba <__aeabi_dsub+0x36e>
   191b8:	e11f      	b.n	193fa <__aeabi_dsub+0x5ae>
   191ba:	2620      	movs	r6, #32
   191bc:	0027      	movs	r7, r4
   191be:	4650      	mov	r0, sl
   191c0:	1b76      	subs	r6, r6, r5
   191c2:	40b7      	lsls	r7, r6
   191c4:	40e8      	lsrs	r0, r5
   191c6:	4307      	orrs	r7, r0
   191c8:	4650      	mov	r0, sl
   191ca:	40b0      	lsls	r0, r6
   191cc:	1e46      	subs	r6, r0, #1
   191ce:	41b0      	sbcs	r0, r6
   191d0:	40ec      	lsrs	r4, r5
   191d2:	4338      	orrs	r0, r7
   191d4:	1a17      	subs	r7, r2, r0
   191d6:	42ba      	cmp	r2, r7
   191d8:	4192      	sbcs	r2, r2
   191da:	1b0c      	subs	r4, r1, r4
   191dc:	4252      	negs	r2, r2
   191de:	1aa4      	subs	r4, r4, r2
   191e0:	4666      	mov	r6, ip
   191e2:	4698      	mov	r8, r3
   191e4:	e68b      	b.n	18efe <__aeabi_dsub+0xb2>
   191e6:	4664      	mov	r4, ip
   191e8:	4667      	mov	r7, ip
   191ea:	432c      	orrs	r4, r5
   191ec:	d000      	beq.n	191f0 <__aeabi_dsub+0x3a4>
   191ee:	e68b      	b.n	18f08 <__aeabi_dsub+0xbc>
   191f0:	2500      	movs	r5, #0
   191f2:	2600      	movs	r6, #0
   191f4:	2700      	movs	r7, #0
   191f6:	e6ea      	b.n	18fce <__aeabi_dsub+0x182>
   191f8:	001e      	movs	r6, r3
   191fa:	e6ad      	b.n	18f58 <__aeabi_dsub+0x10c>
   191fc:	2b1f      	cmp	r3, #31
   191fe:	dc60      	bgt.n	192c2 <__aeabi_dsub+0x476>
   19200:	2720      	movs	r7, #32
   19202:	1af8      	subs	r0, r7, r3
   19204:	000f      	movs	r7, r1
   19206:	4684      	mov	ip, r0
   19208:	4087      	lsls	r7, r0
   1920a:	0010      	movs	r0, r2
   1920c:	40d8      	lsrs	r0, r3
   1920e:	4307      	orrs	r7, r0
   19210:	4660      	mov	r0, ip
   19212:	4082      	lsls	r2, r0
   19214:	1e50      	subs	r0, r2, #1
   19216:	4182      	sbcs	r2, r0
   19218:	40d9      	lsrs	r1, r3
   1921a:	4317      	orrs	r7, r2
   1921c:	e6f5      	b.n	1900a <__aeabi_dsub+0x1be>
   1921e:	0026      	movs	r6, r4
   19220:	4650      	mov	r0, sl
   19222:	4306      	orrs	r6, r0
   19224:	d005      	beq.n	19232 <__aeabi_dsub+0x3e6>
   19226:	43ed      	mvns	r5, r5
   19228:	2d00      	cmp	r5, #0
   1922a:	d0d3      	beq.n	191d4 <__aeabi_dsub+0x388>
   1922c:	4e90      	ldr	r6, [pc, #576]	; (19470 <__aeabi_dsub+0x624>)
   1922e:	45b4      	cmp	ip, r6
   19230:	d1bd      	bne.n	191ae <__aeabi_dsub+0x362>
   19232:	000c      	movs	r4, r1
   19234:	0017      	movs	r7, r2
   19236:	4666      	mov	r6, ip
   19238:	4698      	mov	r8, r3
   1923a:	e68d      	b.n	18f58 <__aeabi_dsub+0x10c>
   1923c:	488c      	ldr	r0, [pc, #560]	; (19470 <__aeabi_dsub+0x624>)
   1923e:	4283      	cmp	r3, r0
   19240:	d00b      	beq.n	1925a <__aeabi_dsub+0x40e>
   19242:	4663      	mov	r3, ip
   19244:	e6d9      	b.n	18ffa <__aeabi_dsub+0x1ae>
   19246:	2d00      	cmp	r5, #0
   19248:	d000      	beq.n	1924c <__aeabi_dsub+0x400>
   1924a:	e096      	b.n	1937a <__aeabi_dsub+0x52e>
   1924c:	0008      	movs	r0, r1
   1924e:	4310      	orrs	r0, r2
   19250:	d100      	bne.n	19254 <__aeabi_dsub+0x408>
   19252:	e0e2      	b.n	1941a <__aeabi_dsub+0x5ce>
   19254:	000c      	movs	r4, r1
   19256:	0017      	movs	r7, r2
   19258:	4698      	mov	r8, r3
   1925a:	4e85      	ldr	r6, [pc, #532]	; (19470 <__aeabi_dsub+0x624>)
   1925c:	e67c      	b.n	18f58 <__aeabi_dsub+0x10c>
   1925e:	2500      	movs	r5, #0
   19260:	e780      	b.n	19164 <__aeabi_dsub+0x318>
   19262:	2100      	movs	r1, #0
   19264:	e78e      	b.n	19184 <__aeabi_dsub+0x338>
   19266:	0023      	movs	r3, r4
   19268:	4650      	mov	r0, sl
   1926a:	4303      	orrs	r3, r0
   1926c:	2e00      	cmp	r6, #0
   1926e:	d000      	beq.n	19272 <__aeabi_dsub+0x426>
   19270:	e0a8      	b.n	193c4 <__aeabi_dsub+0x578>
   19272:	2b00      	cmp	r3, #0
   19274:	d100      	bne.n	19278 <__aeabi_dsub+0x42c>
   19276:	e0de      	b.n	19436 <__aeabi_dsub+0x5ea>
   19278:	000b      	movs	r3, r1
   1927a:	4313      	orrs	r3, r2
   1927c:	d100      	bne.n	19280 <__aeabi_dsub+0x434>
   1927e:	e66b      	b.n	18f58 <__aeabi_dsub+0x10c>
   19280:	4452      	add	r2, sl
   19282:	4552      	cmp	r2, sl
   19284:	4180      	sbcs	r0, r0
   19286:	1864      	adds	r4, r4, r1
   19288:	4240      	negs	r0, r0
   1928a:	1824      	adds	r4, r4, r0
   1928c:	0017      	movs	r7, r2
   1928e:	0223      	lsls	r3, r4, #8
   19290:	d400      	bmi.n	19294 <__aeabi_dsub+0x448>
   19292:	e6fd      	b.n	19090 <__aeabi_dsub+0x244>
   19294:	4b77      	ldr	r3, [pc, #476]	; (19474 <__aeabi_dsub+0x628>)
   19296:	4666      	mov	r6, ip
   19298:	401c      	ands	r4, r3
   1929a:	e65d      	b.n	18f58 <__aeabi_dsub+0x10c>
   1929c:	0025      	movs	r5, r4
   1929e:	4650      	mov	r0, sl
   192a0:	4305      	orrs	r5, r0
   192a2:	2e00      	cmp	r6, #0
   192a4:	d1cf      	bne.n	19246 <__aeabi_dsub+0x3fa>
   192a6:	2d00      	cmp	r5, #0
   192a8:	d14f      	bne.n	1934a <__aeabi_dsub+0x4fe>
   192aa:	000c      	movs	r4, r1
   192ac:	4314      	orrs	r4, r2
   192ae:	d100      	bne.n	192b2 <__aeabi_dsub+0x466>
   192b0:	e0a0      	b.n	193f4 <__aeabi_dsub+0x5a8>
   192b2:	000c      	movs	r4, r1
   192b4:	0017      	movs	r7, r2
   192b6:	4698      	mov	r8, r3
   192b8:	e64e      	b.n	18f58 <__aeabi_dsub+0x10c>
   192ba:	4666      	mov	r6, ip
   192bc:	2400      	movs	r4, #0
   192be:	2700      	movs	r7, #0
   192c0:	e685      	b.n	18fce <__aeabi_dsub+0x182>
   192c2:	001f      	movs	r7, r3
   192c4:	0008      	movs	r0, r1
   192c6:	3f20      	subs	r7, #32
   192c8:	40f8      	lsrs	r0, r7
   192ca:	0007      	movs	r7, r0
   192cc:	2b20      	cmp	r3, #32
   192ce:	d100      	bne.n	192d2 <__aeabi_dsub+0x486>
   192d0:	e08e      	b.n	193f0 <__aeabi_dsub+0x5a4>
   192d2:	2040      	movs	r0, #64	; 0x40
   192d4:	1ac3      	subs	r3, r0, r3
   192d6:	4099      	lsls	r1, r3
   192d8:	430a      	orrs	r2, r1
   192da:	1e51      	subs	r1, r2, #1
   192dc:	418a      	sbcs	r2, r1
   192de:	2100      	movs	r1, #0
   192e0:	4317      	orrs	r7, r2
   192e2:	e692      	b.n	1900a <__aeabi_dsub+0x1be>
   192e4:	2e00      	cmp	r6, #0
   192e6:	d114      	bne.n	19312 <__aeabi_dsub+0x4c6>
   192e8:	0026      	movs	r6, r4
   192ea:	4650      	mov	r0, sl
   192ec:	4306      	orrs	r6, r0
   192ee:	d062      	beq.n	193b6 <__aeabi_dsub+0x56a>
   192f0:	43db      	mvns	r3, r3
   192f2:	2b00      	cmp	r3, #0
   192f4:	d15c      	bne.n	193b0 <__aeabi_dsub+0x564>
   192f6:	1887      	adds	r7, r0, r2
   192f8:	4297      	cmp	r7, r2
   192fa:	4192      	sbcs	r2, r2
   192fc:	1864      	adds	r4, r4, r1
   192fe:	4252      	negs	r2, r2
   19300:	18a4      	adds	r4, r4, r2
   19302:	4666      	mov	r6, ip
   19304:	e687      	b.n	19016 <__aeabi_dsub+0x1ca>
   19306:	4650      	mov	r0, sl
   19308:	4320      	orrs	r0, r4
   1930a:	1e44      	subs	r4, r0, #1
   1930c:	41a0      	sbcs	r0, r4
   1930e:	2400      	movs	r4, #0
   19310:	e760      	b.n	191d4 <__aeabi_dsub+0x388>
   19312:	4e57      	ldr	r6, [pc, #348]	; (19470 <__aeabi_dsub+0x624>)
   19314:	45b4      	cmp	ip, r6
   19316:	d04e      	beq.n	193b6 <__aeabi_dsub+0x56a>
   19318:	2680      	movs	r6, #128	; 0x80
   1931a:	0436      	lsls	r6, r6, #16
   1931c:	425b      	negs	r3, r3
   1931e:	4334      	orrs	r4, r6
   19320:	2b38      	cmp	r3, #56	; 0x38
   19322:	dd00      	ble.n	19326 <__aeabi_dsub+0x4da>
   19324:	e07f      	b.n	19426 <__aeabi_dsub+0x5da>
   19326:	2b1f      	cmp	r3, #31
   19328:	dd00      	ble.n	1932c <__aeabi_dsub+0x4e0>
   1932a:	e08b      	b.n	19444 <__aeabi_dsub+0x5f8>
   1932c:	2620      	movs	r6, #32
   1932e:	0027      	movs	r7, r4
   19330:	4650      	mov	r0, sl
   19332:	1af6      	subs	r6, r6, r3
   19334:	40b7      	lsls	r7, r6
   19336:	40d8      	lsrs	r0, r3
   19338:	4307      	orrs	r7, r0
   1933a:	4650      	mov	r0, sl
   1933c:	40b0      	lsls	r0, r6
   1933e:	1e46      	subs	r6, r0, #1
   19340:	41b0      	sbcs	r0, r6
   19342:	4307      	orrs	r7, r0
   19344:	40dc      	lsrs	r4, r3
   19346:	18bf      	adds	r7, r7, r2
   19348:	e7d6      	b.n	192f8 <__aeabi_dsub+0x4ac>
   1934a:	000d      	movs	r5, r1
   1934c:	4315      	orrs	r5, r2
   1934e:	d100      	bne.n	19352 <__aeabi_dsub+0x506>
   19350:	e602      	b.n	18f58 <__aeabi_dsub+0x10c>
   19352:	4650      	mov	r0, sl
   19354:	1a80      	subs	r0, r0, r2
   19356:	4582      	cmp	sl, r0
   19358:	41bf      	sbcs	r7, r7
   1935a:	1a65      	subs	r5, r4, r1
   1935c:	427f      	negs	r7, r7
   1935e:	1bed      	subs	r5, r5, r7
   19360:	4684      	mov	ip, r0
   19362:	0228      	lsls	r0, r5, #8
   19364:	d400      	bmi.n	19368 <__aeabi_dsub+0x51c>
   19366:	e68d      	b.n	19084 <__aeabi_dsub+0x238>
   19368:	4650      	mov	r0, sl
   1936a:	1a17      	subs	r7, r2, r0
   1936c:	42ba      	cmp	r2, r7
   1936e:	4192      	sbcs	r2, r2
   19370:	1b0c      	subs	r4, r1, r4
   19372:	4252      	negs	r2, r2
   19374:	1aa4      	subs	r4, r4, r2
   19376:	4698      	mov	r8, r3
   19378:	e5ee      	b.n	18f58 <__aeabi_dsub+0x10c>
   1937a:	000d      	movs	r5, r1
   1937c:	4315      	orrs	r5, r2
   1937e:	d100      	bne.n	19382 <__aeabi_dsub+0x536>
   19380:	e76b      	b.n	1925a <__aeabi_dsub+0x40e>
   19382:	4650      	mov	r0, sl
   19384:	0767      	lsls	r7, r4, #29
   19386:	08c0      	lsrs	r0, r0, #3
   19388:	4307      	orrs	r7, r0
   1938a:	2080      	movs	r0, #128	; 0x80
   1938c:	08e4      	lsrs	r4, r4, #3
   1938e:	0300      	lsls	r0, r0, #12
   19390:	4204      	tst	r4, r0
   19392:	d007      	beq.n	193a4 <__aeabi_dsub+0x558>
   19394:	08cd      	lsrs	r5, r1, #3
   19396:	4205      	tst	r5, r0
   19398:	d104      	bne.n	193a4 <__aeabi_dsub+0x558>
   1939a:	002c      	movs	r4, r5
   1939c:	4698      	mov	r8, r3
   1939e:	08d7      	lsrs	r7, r2, #3
   193a0:	0749      	lsls	r1, r1, #29
   193a2:	430f      	orrs	r7, r1
   193a4:	0f7b      	lsrs	r3, r7, #29
   193a6:	00e4      	lsls	r4, r4, #3
   193a8:	431c      	orrs	r4, r3
   193aa:	00ff      	lsls	r7, r7, #3
   193ac:	4e30      	ldr	r6, [pc, #192]	; (19470 <__aeabi_dsub+0x624>)
   193ae:	e5d3      	b.n	18f58 <__aeabi_dsub+0x10c>
   193b0:	4e2f      	ldr	r6, [pc, #188]	; (19470 <__aeabi_dsub+0x624>)
   193b2:	45b4      	cmp	ip, r6
   193b4:	d1b4      	bne.n	19320 <__aeabi_dsub+0x4d4>
   193b6:	000c      	movs	r4, r1
   193b8:	0017      	movs	r7, r2
   193ba:	4666      	mov	r6, ip
   193bc:	e5cc      	b.n	18f58 <__aeabi_dsub+0x10c>
   193be:	2700      	movs	r7, #0
   193c0:	2400      	movs	r4, #0
   193c2:	e5e8      	b.n	18f96 <__aeabi_dsub+0x14a>
   193c4:	2b00      	cmp	r3, #0
   193c6:	d039      	beq.n	1943c <__aeabi_dsub+0x5f0>
   193c8:	000b      	movs	r3, r1
   193ca:	4313      	orrs	r3, r2
   193cc:	d100      	bne.n	193d0 <__aeabi_dsub+0x584>
   193ce:	e744      	b.n	1925a <__aeabi_dsub+0x40e>
   193d0:	08c0      	lsrs	r0, r0, #3
   193d2:	0767      	lsls	r7, r4, #29
   193d4:	4307      	orrs	r7, r0
   193d6:	2080      	movs	r0, #128	; 0x80
   193d8:	08e4      	lsrs	r4, r4, #3
   193da:	0300      	lsls	r0, r0, #12
   193dc:	4204      	tst	r4, r0
   193de:	d0e1      	beq.n	193a4 <__aeabi_dsub+0x558>
   193e0:	08cb      	lsrs	r3, r1, #3
   193e2:	4203      	tst	r3, r0
   193e4:	d1de      	bne.n	193a4 <__aeabi_dsub+0x558>
   193e6:	08d7      	lsrs	r7, r2, #3
   193e8:	0749      	lsls	r1, r1, #29
   193ea:	430f      	orrs	r7, r1
   193ec:	001c      	movs	r4, r3
   193ee:	e7d9      	b.n	193a4 <__aeabi_dsub+0x558>
   193f0:	2100      	movs	r1, #0
   193f2:	e771      	b.n	192d8 <__aeabi_dsub+0x48c>
   193f4:	2500      	movs	r5, #0
   193f6:	2700      	movs	r7, #0
   193f8:	e5e9      	b.n	18fce <__aeabi_dsub+0x182>
   193fa:	002e      	movs	r6, r5
   193fc:	0027      	movs	r7, r4
   193fe:	3e20      	subs	r6, #32
   19400:	40f7      	lsrs	r7, r6
   19402:	2d20      	cmp	r5, #32
   19404:	d02f      	beq.n	19466 <__aeabi_dsub+0x61a>
   19406:	2640      	movs	r6, #64	; 0x40
   19408:	1b75      	subs	r5, r6, r5
   1940a:	40ac      	lsls	r4, r5
   1940c:	4650      	mov	r0, sl
   1940e:	4320      	orrs	r0, r4
   19410:	1e44      	subs	r4, r0, #1
   19412:	41a0      	sbcs	r0, r4
   19414:	2400      	movs	r4, #0
   19416:	4338      	orrs	r0, r7
   19418:	e6dc      	b.n	191d4 <__aeabi_dsub+0x388>
   1941a:	2480      	movs	r4, #128	; 0x80
   1941c:	2500      	movs	r5, #0
   1941e:	0324      	lsls	r4, r4, #12
   19420:	4e13      	ldr	r6, [pc, #76]	; (19470 <__aeabi_dsub+0x624>)
   19422:	2700      	movs	r7, #0
   19424:	e5d3      	b.n	18fce <__aeabi_dsub+0x182>
   19426:	4650      	mov	r0, sl
   19428:	4320      	orrs	r0, r4
   1942a:	0007      	movs	r7, r0
   1942c:	1e78      	subs	r0, r7, #1
   1942e:	4187      	sbcs	r7, r0
   19430:	2400      	movs	r4, #0
   19432:	18bf      	adds	r7, r7, r2
   19434:	e760      	b.n	192f8 <__aeabi_dsub+0x4ac>
   19436:	000c      	movs	r4, r1
   19438:	0017      	movs	r7, r2
   1943a:	e58d      	b.n	18f58 <__aeabi_dsub+0x10c>
   1943c:	000c      	movs	r4, r1
   1943e:	0017      	movs	r7, r2
   19440:	4e0b      	ldr	r6, [pc, #44]	; (19470 <__aeabi_dsub+0x624>)
   19442:	e589      	b.n	18f58 <__aeabi_dsub+0x10c>
   19444:	001e      	movs	r6, r3
   19446:	0027      	movs	r7, r4
   19448:	3e20      	subs	r6, #32
   1944a:	40f7      	lsrs	r7, r6
   1944c:	2b20      	cmp	r3, #32
   1944e:	d00c      	beq.n	1946a <__aeabi_dsub+0x61e>
   19450:	2640      	movs	r6, #64	; 0x40
   19452:	1af3      	subs	r3, r6, r3
   19454:	409c      	lsls	r4, r3
   19456:	4650      	mov	r0, sl
   19458:	4320      	orrs	r0, r4
   1945a:	1e44      	subs	r4, r0, #1
   1945c:	41a0      	sbcs	r0, r4
   1945e:	4307      	orrs	r7, r0
   19460:	2400      	movs	r4, #0
   19462:	18bf      	adds	r7, r7, r2
   19464:	e748      	b.n	192f8 <__aeabi_dsub+0x4ac>
   19466:	2400      	movs	r4, #0
   19468:	e7d0      	b.n	1940c <__aeabi_dsub+0x5c0>
   1946a:	2400      	movs	r4, #0
   1946c:	e7f3      	b.n	19456 <__aeabi_dsub+0x60a>
   1946e:	46c0      	nop			; (mov r8, r8)
   19470:	000007ff 	.word	0x000007ff
   19474:	ff7fffff 	.word	0xff7fffff

00019478 <__aeabi_d2iz>:
   19478:	b530      	push	{r4, r5, lr}
   1947a:	4d13      	ldr	r5, [pc, #76]	; (194c8 <__aeabi_d2iz+0x50>)
   1947c:	030a      	lsls	r2, r1, #12
   1947e:	004b      	lsls	r3, r1, #1
   19480:	0b12      	lsrs	r2, r2, #12
   19482:	0d5b      	lsrs	r3, r3, #21
   19484:	0fc9      	lsrs	r1, r1, #31
   19486:	2400      	movs	r4, #0
   19488:	42ab      	cmp	r3, r5
   1948a:	dd10      	ble.n	194ae <__aeabi_d2iz+0x36>
   1948c:	4c0f      	ldr	r4, [pc, #60]	; (194cc <__aeabi_d2iz+0x54>)
   1948e:	42a3      	cmp	r3, r4
   19490:	dc0f      	bgt.n	194b2 <__aeabi_d2iz+0x3a>
   19492:	2480      	movs	r4, #128	; 0x80
   19494:	4d0e      	ldr	r5, [pc, #56]	; (194d0 <__aeabi_d2iz+0x58>)
   19496:	0364      	lsls	r4, r4, #13
   19498:	4322      	orrs	r2, r4
   1949a:	1aed      	subs	r5, r5, r3
   1949c:	2d1f      	cmp	r5, #31
   1949e:	dd0b      	ble.n	194b8 <__aeabi_d2iz+0x40>
   194a0:	480c      	ldr	r0, [pc, #48]	; (194d4 <__aeabi_d2iz+0x5c>)
   194a2:	1ac3      	subs	r3, r0, r3
   194a4:	40da      	lsrs	r2, r3
   194a6:	4254      	negs	r4, r2
   194a8:	2900      	cmp	r1, #0
   194aa:	d100      	bne.n	194ae <__aeabi_d2iz+0x36>
   194ac:	0014      	movs	r4, r2
   194ae:	0020      	movs	r0, r4
   194b0:	bd30      	pop	{r4, r5, pc}
   194b2:	4b09      	ldr	r3, [pc, #36]	; (194d8 <__aeabi_d2iz+0x60>)
   194b4:	18cc      	adds	r4, r1, r3
   194b6:	e7fa      	b.n	194ae <__aeabi_d2iz+0x36>
   194b8:	4c08      	ldr	r4, [pc, #32]	; (194dc <__aeabi_d2iz+0x64>)
   194ba:	40e8      	lsrs	r0, r5
   194bc:	46a4      	mov	ip, r4
   194be:	4463      	add	r3, ip
   194c0:	409a      	lsls	r2, r3
   194c2:	4302      	orrs	r2, r0
   194c4:	e7ef      	b.n	194a6 <__aeabi_d2iz+0x2e>
   194c6:	46c0      	nop			; (mov r8, r8)
   194c8:	000003fe 	.word	0x000003fe
   194cc:	0000041d 	.word	0x0000041d
   194d0:	00000433 	.word	0x00000433
   194d4:	00000413 	.word	0x00000413
   194d8:	7fffffff 	.word	0x7fffffff
   194dc:	fffffbed 	.word	0xfffffbed

000194e0 <__aeabi_i2d>:
   194e0:	b570      	push	{r4, r5, r6, lr}
   194e2:	2800      	cmp	r0, #0
   194e4:	d030      	beq.n	19548 <__aeabi_i2d+0x68>
   194e6:	17c3      	asrs	r3, r0, #31
   194e8:	18c4      	adds	r4, r0, r3
   194ea:	405c      	eors	r4, r3
   194ec:	0fc5      	lsrs	r5, r0, #31
   194ee:	0020      	movs	r0, r4
   194f0:	f000 f8c2 	bl	19678 <__clzsi2>
   194f4:	4b17      	ldr	r3, [pc, #92]	; (19554 <__aeabi_i2d+0x74>)
   194f6:	4a18      	ldr	r2, [pc, #96]	; (19558 <__aeabi_i2d+0x78>)
   194f8:	1a1b      	subs	r3, r3, r0
   194fa:	1ad2      	subs	r2, r2, r3
   194fc:	2a1f      	cmp	r2, #31
   194fe:	dd18      	ble.n	19532 <__aeabi_i2d+0x52>
   19500:	4a16      	ldr	r2, [pc, #88]	; (1955c <__aeabi_i2d+0x7c>)
   19502:	1ad2      	subs	r2, r2, r3
   19504:	4094      	lsls	r4, r2
   19506:	2200      	movs	r2, #0
   19508:	0324      	lsls	r4, r4, #12
   1950a:	055b      	lsls	r3, r3, #21
   1950c:	0b24      	lsrs	r4, r4, #12
   1950e:	0d5b      	lsrs	r3, r3, #21
   19510:	2100      	movs	r1, #0
   19512:	0010      	movs	r0, r2
   19514:	0324      	lsls	r4, r4, #12
   19516:	0d0a      	lsrs	r2, r1, #20
   19518:	0b24      	lsrs	r4, r4, #12
   1951a:	0512      	lsls	r2, r2, #20
   1951c:	4322      	orrs	r2, r4
   1951e:	4c10      	ldr	r4, [pc, #64]	; (19560 <__aeabi_i2d+0x80>)
   19520:	051b      	lsls	r3, r3, #20
   19522:	4022      	ands	r2, r4
   19524:	4313      	orrs	r3, r2
   19526:	005b      	lsls	r3, r3, #1
   19528:	07ed      	lsls	r5, r5, #31
   1952a:	085b      	lsrs	r3, r3, #1
   1952c:	432b      	orrs	r3, r5
   1952e:	0019      	movs	r1, r3
   19530:	bd70      	pop	{r4, r5, r6, pc}
   19532:	0021      	movs	r1, r4
   19534:	4091      	lsls	r1, r2
   19536:	000a      	movs	r2, r1
   19538:	210b      	movs	r1, #11
   1953a:	1a08      	subs	r0, r1, r0
   1953c:	40c4      	lsrs	r4, r0
   1953e:	055b      	lsls	r3, r3, #21
   19540:	0324      	lsls	r4, r4, #12
   19542:	0b24      	lsrs	r4, r4, #12
   19544:	0d5b      	lsrs	r3, r3, #21
   19546:	e7e3      	b.n	19510 <__aeabi_i2d+0x30>
   19548:	2500      	movs	r5, #0
   1954a:	2300      	movs	r3, #0
   1954c:	2400      	movs	r4, #0
   1954e:	2200      	movs	r2, #0
   19550:	e7de      	b.n	19510 <__aeabi_i2d+0x30>
   19552:	46c0      	nop			; (mov r8, r8)
   19554:	0000041e 	.word	0x0000041e
   19558:	00000433 	.word	0x00000433
   1955c:	00000413 	.word	0x00000413
   19560:	800fffff 	.word	0x800fffff

00019564 <__aeabi_ui2d>:
   19564:	b510      	push	{r4, lr}
   19566:	1e04      	subs	r4, r0, #0
   19568:	d028      	beq.n	195bc <__aeabi_ui2d+0x58>
   1956a:	f000 f885 	bl	19678 <__clzsi2>
   1956e:	4b15      	ldr	r3, [pc, #84]	; (195c4 <__aeabi_ui2d+0x60>)
   19570:	4a15      	ldr	r2, [pc, #84]	; (195c8 <__aeabi_ui2d+0x64>)
   19572:	1a1b      	subs	r3, r3, r0
   19574:	1ad2      	subs	r2, r2, r3
   19576:	2a1f      	cmp	r2, #31
   19578:	dd15      	ble.n	195a6 <__aeabi_ui2d+0x42>
   1957a:	4a14      	ldr	r2, [pc, #80]	; (195cc <__aeabi_ui2d+0x68>)
   1957c:	1ad2      	subs	r2, r2, r3
   1957e:	4094      	lsls	r4, r2
   19580:	2200      	movs	r2, #0
   19582:	0324      	lsls	r4, r4, #12
   19584:	055b      	lsls	r3, r3, #21
   19586:	0b24      	lsrs	r4, r4, #12
   19588:	0d5b      	lsrs	r3, r3, #21
   1958a:	2100      	movs	r1, #0
   1958c:	0010      	movs	r0, r2
   1958e:	0324      	lsls	r4, r4, #12
   19590:	0d0a      	lsrs	r2, r1, #20
   19592:	0b24      	lsrs	r4, r4, #12
   19594:	0512      	lsls	r2, r2, #20
   19596:	4322      	orrs	r2, r4
   19598:	4c0d      	ldr	r4, [pc, #52]	; (195d0 <__aeabi_ui2d+0x6c>)
   1959a:	051b      	lsls	r3, r3, #20
   1959c:	4022      	ands	r2, r4
   1959e:	4313      	orrs	r3, r2
   195a0:	005b      	lsls	r3, r3, #1
   195a2:	0859      	lsrs	r1, r3, #1
   195a4:	bd10      	pop	{r4, pc}
   195a6:	0021      	movs	r1, r4
   195a8:	4091      	lsls	r1, r2
   195aa:	000a      	movs	r2, r1
   195ac:	210b      	movs	r1, #11
   195ae:	1a08      	subs	r0, r1, r0
   195b0:	40c4      	lsrs	r4, r0
   195b2:	055b      	lsls	r3, r3, #21
   195b4:	0324      	lsls	r4, r4, #12
   195b6:	0b24      	lsrs	r4, r4, #12
   195b8:	0d5b      	lsrs	r3, r3, #21
   195ba:	e7e6      	b.n	1958a <__aeabi_ui2d+0x26>
   195bc:	2300      	movs	r3, #0
   195be:	2400      	movs	r4, #0
   195c0:	2200      	movs	r2, #0
   195c2:	e7e2      	b.n	1958a <__aeabi_ui2d+0x26>
   195c4:	0000041e 	.word	0x0000041e
   195c8:	00000433 	.word	0x00000433
   195cc:	00000413 	.word	0x00000413
   195d0:	800fffff 	.word	0x800fffff

000195d4 <__aeabi_f2d>:
   195d4:	0041      	lsls	r1, r0, #1
   195d6:	0e09      	lsrs	r1, r1, #24
   195d8:	1c4b      	adds	r3, r1, #1
   195da:	b570      	push	{r4, r5, r6, lr}
   195dc:	b2db      	uxtb	r3, r3
   195de:	0246      	lsls	r6, r0, #9
   195e0:	0a75      	lsrs	r5, r6, #9
   195e2:	0fc4      	lsrs	r4, r0, #31
   195e4:	2b01      	cmp	r3, #1
   195e6:	dd14      	ble.n	19612 <__aeabi_f2d+0x3e>
   195e8:	23e0      	movs	r3, #224	; 0xe0
   195ea:	009b      	lsls	r3, r3, #2
   195ec:	076d      	lsls	r5, r5, #29
   195ee:	0b36      	lsrs	r6, r6, #12
   195f0:	18cb      	adds	r3, r1, r3
   195f2:	2100      	movs	r1, #0
   195f4:	0d0a      	lsrs	r2, r1, #20
   195f6:	0028      	movs	r0, r5
   195f8:	0512      	lsls	r2, r2, #20
   195fa:	4d1c      	ldr	r5, [pc, #112]	; (1966c <__aeabi_f2d+0x98>)
   195fc:	4332      	orrs	r2, r6
   195fe:	055b      	lsls	r3, r3, #21
   19600:	402a      	ands	r2, r5
   19602:	085b      	lsrs	r3, r3, #1
   19604:	4313      	orrs	r3, r2
   19606:	005b      	lsls	r3, r3, #1
   19608:	07e4      	lsls	r4, r4, #31
   1960a:	085b      	lsrs	r3, r3, #1
   1960c:	4323      	orrs	r3, r4
   1960e:	0019      	movs	r1, r3
   19610:	bd70      	pop	{r4, r5, r6, pc}
   19612:	2900      	cmp	r1, #0
   19614:	d114      	bne.n	19640 <__aeabi_f2d+0x6c>
   19616:	2d00      	cmp	r5, #0
   19618:	d01e      	beq.n	19658 <__aeabi_f2d+0x84>
   1961a:	0028      	movs	r0, r5
   1961c:	f000 f82c 	bl	19678 <__clzsi2>
   19620:	280a      	cmp	r0, #10
   19622:	dc1c      	bgt.n	1965e <__aeabi_f2d+0x8a>
   19624:	230b      	movs	r3, #11
   19626:	002a      	movs	r2, r5
   19628:	1a1b      	subs	r3, r3, r0
   1962a:	40da      	lsrs	r2, r3
   1962c:	0003      	movs	r3, r0
   1962e:	3315      	adds	r3, #21
   19630:	409d      	lsls	r5, r3
   19632:	4b0f      	ldr	r3, [pc, #60]	; (19670 <__aeabi_f2d+0x9c>)
   19634:	0312      	lsls	r2, r2, #12
   19636:	1a1b      	subs	r3, r3, r0
   19638:	055b      	lsls	r3, r3, #21
   1963a:	0b16      	lsrs	r6, r2, #12
   1963c:	0d5b      	lsrs	r3, r3, #21
   1963e:	e7d8      	b.n	195f2 <__aeabi_f2d+0x1e>
   19640:	2d00      	cmp	r5, #0
   19642:	d006      	beq.n	19652 <__aeabi_f2d+0x7e>
   19644:	0b32      	lsrs	r2, r6, #12
   19646:	2680      	movs	r6, #128	; 0x80
   19648:	0336      	lsls	r6, r6, #12
   1964a:	076d      	lsls	r5, r5, #29
   1964c:	4316      	orrs	r6, r2
   1964e:	4b09      	ldr	r3, [pc, #36]	; (19674 <__aeabi_f2d+0xa0>)
   19650:	e7cf      	b.n	195f2 <__aeabi_f2d+0x1e>
   19652:	4b08      	ldr	r3, [pc, #32]	; (19674 <__aeabi_f2d+0xa0>)
   19654:	2600      	movs	r6, #0
   19656:	e7cc      	b.n	195f2 <__aeabi_f2d+0x1e>
   19658:	2300      	movs	r3, #0
   1965a:	2600      	movs	r6, #0
   1965c:	e7c9      	b.n	195f2 <__aeabi_f2d+0x1e>
   1965e:	0003      	movs	r3, r0
   19660:	002a      	movs	r2, r5
   19662:	3b0b      	subs	r3, #11
   19664:	409a      	lsls	r2, r3
   19666:	2500      	movs	r5, #0
   19668:	e7e3      	b.n	19632 <__aeabi_f2d+0x5e>
   1966a:	46c0      	nop			; (mov r8, r8)
   1966c:	800fffff 	.word	0x800fffff
   19670:	00000389 	.word	0x00000389
   19674:	000007ff 	.word	0x000007ff

00019678 <__clzsi2>:
   19678:	211c      	movs	r1, #28
   1967a:	2301      	movs	r3, #1
   1967c:	041b      	lsls	r3, r3, #16
   1967e:	4298      	cmp	r0, r3
   19680:	d301      	bcc.n	19686 <__clzsi2+0xe>
   19682:	0c00      	lsrs	r0, r0, #16
   19684:	3910      	subs	r1, #16
   19686:	0a1b      	lsrs	r3, r3, #8
   19688:	4298      	cmp	r0, r3
   1968a:	d301      	bcc.n	19690 <__clzsi2+0x18>
   1968c:	0a00      	lsrs	r0, r0, #8
   1968e:	3908      	subs	r1, #8
   19690:	091b      	lsrs	r3, r3, #4
   19692:	4298      	cmp	r0, r3
   19694:	d301      	bcc.n	1969a <__clzsi2+0x22>
   19696:	0900      	lsrs	r0, r0, #4
   19698:	3904      	subs	r1, #4
   1969a:	a202      	add	r2, pc, #8	; (adr r2, 196a4 <__clzsi2+0x2c>)
   1969c:	5c10      	ldrb	r0, [r2, r0]
   1969e:	1840      	adds	r0, r0, r1
   196a0:	4770      	bx	lr
   196a2:	46c0      	nop			; (mov r8, r8)
   196a4:	02020304 	.word	0x02020304
   196a8:	01010101 	.word	0x01010101
	...

000196b4 <__clzdi2>:
   196b4:	b510      	push	{r4, lr}
   196b6:	2900      	cmp	r1, #0
   196b8:	d103      	bne.n	196c2 <__clzdi2+0xe>
   196ba:	f7ff ffdd 	bl	19678 <__clzsi2>
   196be:	3020      	adds	r0, #32
   196c0:	e002      	b.n	196c8 <__clzdi2+0x14>
   196c2:	1c08      	adds	r0, r1, #0
   196c4:	f7ff ffd8 	bl	19678 <__clzsi2>
   196c8:	bd10      	pop	{r4, pc}
   196ca:	46c0      	nop			; (mov r8, r8)

000196cc <atoi>:
   196cc:	b510      	push	{r4, lr}
   196ce:	220a      	movs	r2, #10
   196d0:	2100      	movs	r1, #0
   196d2:	f000 fedd 	bl	1a490 <strtol>
   196d6:	bd10      	pop	{r4, pc}

000196d8 <__libc_init_array>:
   196d8:	b570      	push	{r4, r5, r6, lr}
   196da:	4e0d      	ldr	r6, [pc, #52]	; (19710 <__libc_init_array+0x38>)
   196dc:	4d0d      	ldr	r5, [pc, #52]	; (19714 <__libc_init_array+0x3c>)
   196de:	2400      	movs	r4, #0
   196e0:	1bad      	subs	r5, r5, r6
   196e2:	10ad      	asrs	r5, r5, #2
   196e4:	d005      	beq.n	196f2 <__libc_init_array+0x1a>
   196e6:	00a3      	lsls	r3, r4, #2
   196e8:	58f3      	ldr	r3, [r6, r3]
   196ea:	3401      	adds	r4, #1
   196ec:	4798      	blx	r3
   196ee:	42a5      	cmp	r5, r4
   196f0:	d1f9      	bne.n	196e6 <__libc_init_array+0xe>
   196f2:	f007 f94b 	bl	2098c <_init>
   196f6:	4e08      	ldr	r6, [pc, #32]	; (19718 <__libc_init_array+0x40>)
   196f8:	4d08      	ldr	r5, [pc, #32]	; (1971c <__libc_init_array+0x44>)
   196fa:	2400      	movs	r4, #0
   196fc:	1bad      	subs	r5, r5, r6
   196fe:	10ad      	asrs	r5, r5, #2
   19700:	d005      	beq.n	1970e <__libc_init_array+0x36>
   19702:	00a3      	lsls	r3, r4, #2
   19704:	58f3      	ldr	r3, [r6, r3]
   19706:	3401      	adds	r4, #1
   19708:	4798      	blx	r3
   1970a:	42a5      	cmp	r5, r4
   1970c:	d1f9      	bne.n	19702 <__libc_init_array+0x2a>
   1970e:	bd70      	pop	{r4, r5, r6, pc}
   19710:	00020998 	.word	0x00020998
   19714:	00020998 	.word	0x00020998
   19718:	00020998 	.word	0x00020998
   1971c:	000209a0 	.word	0x000209a0

00019720 <__itoa>:
   19720:	1e93      	subs	r3, r2, #2
   19722:	b510      	push	{r4, lr}
   19724:	000c      	movs	r4, r1
   19726:	2b22      	cmp	r3, #34	; 0x22
   19728:	d80e      	bhi.n	19748 <__itoa+0x28>
   1972a:	2a0a      	cmp	r2, #10
   1972c:	d005      	beq.n	1973a <__itoa+0x1a>
   1972e:	2100      	movs	r1, #0
   19730:	1861      	adds	r1, r4, r1
   19732:	f000 ff7f 	bl	1a634 <__utoa>
   19736:	0020      	movs	r0, r4
   19738:	bd10      	pop	{r4, pc}
   1973a:	2800      	cmp	r0, #0
   1973c:	daf7      	bge.n	1972e <__itoa+0xe>
   1973e:	232d      	movs	r3, #45	; 0x2d
   19740:	4240      	negs	r0, r0
   19742:	700b      	strb	r3, [r1, #0]
   19744:	2101      	movs	r1, #1
   19746:	e7f3      	b.n	19730 <__itoa+0x10>
   19748:	2300      	movs	r3, #0
   1974a:	2000      	movs	r0, #0
   1974c:	700b      	strb	r3, [r1, #0]
   1974e:	e7f3      	b.n	19738 <__itoa+0x18>

00019750 <itoa>:
   19750:	b510      	push	{r4, lr}
   19752:	f7ff ffe5 	bl	19720 <__itoa>
   19756:	bd10      	pop	{r4, pc}

00019758 <__locale_mb_cur_max>:
   19758:	4b05      	ldr	r3, [pc, #20]	; (19770 <__locale_mb_cur_max+0x18>)
   1975a:	681b      	ldr	r3, [r3, #0]
   1975c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   1975e:	2b00      	cmp	r3, #0
   19760:	d003      	beq.n	1976a <__locale_mb_cur_max+0x12>
   19762:	2294      	movs	r2, #148	; 0x94
   19764:	0052      	lsls	r2, r2, #1
   19766:	5c98      	ldrb	r0, [r3, r2]
   19768:	4770      	bx	lr
   1976a:	4b02      	ldr	r3, [pc, #8]	; (19774 <__locale_mb_cur_max+0x1c>)
   1976c:	e7f9      	b.n	19762 <__locale_mb_cur_max+0xa>
   1976e:	46c0      	nop			; (mov r8, r8)
   19770:	20000018 	.word	0x20000018
   19774:	20000448 	.word	0x20000448

00019778 <__locale_ctype_ptr_l>:
   19778:	23ec      	movs	r3, #236	; 0xec
   1977a:	58c0      	ldr	r0, [r0, r3]
   1977c:	4770      	bx	lr
   1977e:	46c0      	nop			; (mov r8, r8)

00019780 <__locale_ctype_ptr>:
   19780:	4b04      	ldr	r3, [pc, #16]	; (19794 <__locale_ctype_ptr+0x14>)
   19782:	681b      	ldr	r3, [r3, #0]
   19784:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   19786:	2b00      	cmp	r3, #0
   19788:	d002      	beq.n	19790 <__locale_ctype_ptr+0x10>
   1978a:	22ec      	movs	r2, #236	; 0xec
   1978c:	5898      	ldr	r0, [r3, r2]
   1978e:	4770      	bx	lr
   19790:	4b01      	ldr	r3, [pc, #4]	; (19798 <__locale_ctype_ptr+0x18>)
   19792:	e7fa      	b.n	1978a <__locale_ctype_ptr+0xa>
   19794:	20000018 	.word	0x20000018
   19798:	20000448 	.word	0x20000448

0001979c <malloc>:
   1979c:	b510      	push	{r4, lr}
   1979e:	4b03      	ldr	r3, [pc, #12]	; (197ac <malloc+0x10>)
   197a0:	0001      	movs	r1, r0
   197a2:	6818      	ldr	r0, [r3, #0]
   197a4:	f000 f80e 	bl	197c4 <_malloc_r>
   197a8:	bd10      	pop	{r4, pc}
   197aa:	46c0      	nop			; (mov r8, r8)
   197ac:	20000018 	.word	0x20000018

000197b0 <free>:
   197b0:	b510      	push	{r4, lr}
   197b2:	4b03      	ldr	r3, [pc, #12]	; (197c0 <free+0x10>)
   197b4:	0001      	movs	r1, r0
   197b6:	6818      	ldr	r0, [r3, #0]
   197b8:	f003 fddc 	bl	1d374 <_free_r>
   197bc:	bd10      	pop	{r4, pc}
   197be:	46c0      	nop			; (mov r8, r8)
   197c0:	20000018 	.word	0x20000018

000197c4 <_malloc_r>:
   197c4:	b5f0      	push	{r4, r5, r6, r7, lr}
   197c6:	4657      	mov	r7, sl
   197c8:	4645      	mov	r5, r8
   197ca:	46de      	mov	lr, fp
   197cc:	464e      	mov	r6, r9
   197ce:	b5e0      	push	{r5, r6, r7, lr}
   197d0:	000d      	movs	r5, r1
   197d2:	350b      	adds	r5, #11
   197d4:	b083      	sub	sp, #12
   197d6:	0007      	movs	r7, r0
   197d8:	2d16      	cmp	r5, #22
   197da:	d800      	bhi.n	197de <_malloc_r+0x1a>
   197dc:	e09f      	b.n	1991e <_malloc_r+0x15a>
   197de:	2307      	movs	r3, #7
   197e0:	439d      	bics	r5, r3
   197e2:	d500      	bpl.n	197e6 <_malloc_r+0x22>
   197e4:	e0c4      	b.n	19970 <_malloc_r+0x1ac>
   197e6:	42a9      	cmp	r1, r5
   197e8:	d900      	bls.n	197ec <_malloc_r+0x28>
   197ea:	e0c1      	b.n	19970 <_malloc_r+0x1ac>
   197ec:	f000 fbb6 	bl	19f5c <__malloc_lock>
   197f0:	23f8      	movs	r3, #248	; 0xf8
   197f2:	33ff      	adds	r3, #255	; 0xff
   197f4:	429d      	cmp	r5, r3
   197f6:	d800      	bhi.n	197fa <_malloc_r+0x36>
   197f8:	e28f      	b.n	19d1a <_malloc_r+0x556>
   197fa:	0a68      	lsrs	r0, r5, #9
   197fc:	d100      	bne.n	19800 <_malloc_r+0x3c>
   197fe:	e0bb      	b.n	19978 <_malloc_r+0x1b4>
   19800:	2804      	cmp	r0, #4
   19802:	d900      	bls.n	19806 <_malloc_r+0x42>
   19804:	e162      	b.n	19acc <_malloc_r+0x308>
   19806:	2338      	movs	r3, #56	; 0x38
   19808:	4698      	mov	r8, r3
   1980a:	09a8      	lsrs	r0, r5, #6
   1980c:	4480      	add	r8, r0
   1980e:	3039      	adds	r0, #57	; 0x39
   19810:	00c1      	lsls	r1, r0, #3
   19812:	4ed2      	ldr	r6, [pc, #840]	; (19b5c <_malloc_r+0x398>)
   19814:	1871      	adds	r1, r6, r1
   19816:	3908      	subs	r1, #8
   19818:	68cc      	ldr	r4, [r1, #12]
   1981a:	42a1      	cmp	r1, r4
   1981c:	d019      	beq.n	19852 <_malloc_r+0x8e>
   1981e:	2303      	movs	r3, #3
   19820:	6862      	ldr	r2, [r4, #4]
   19822:	439a      	bics	r2, r3
   19824:	0013      	movs	r3, r2
   19826:	1b52      	subs	r2, r2, r5
   19828:	2a0f      	cmp	r2, #15
   1982a:	dd00      	ble.n	1982e <_malloc_r+0x6a>
   1982c:	e0aa      	b.n	19984 <_malloc_r+0x1c0>
   1982e:	2a00      	cmp	r2, #0
   19830:	db00      	blt.n	19834 <_malloc_r+0x70>
   19832:	e088      	b.n	19946 <_malloc_r+0x182>
   19834:	2303      	movs	r3, #3
   19836:	469c      	mov	ip, r3
   19838:	e008      	b.n	1984c <_malloc_r+0x88>
   1983a:	4662      	mov	r2, ip
   1983c:	6863      	ldr	r3, [r4, #4]
   1983e:	4393      	bics	r3, r2
   19840:	1b5a      	subs	r2, r3, r5
   19842:	2a0f      	cmp	r2, #15
   19844:	dd00      	ble.n	19848 <_malloc_r+0x84>
   19846:	e09d      	b.n	19984 <_malloc_r+0x1c0>
   19848:	2a00      	cmp	r2, #0
   1984a:	da7c      	bge.n	19946 <_malloc_r+0x182>
   1984c:	68e4      	ldr	r4, [r4, #12]
   1984e:	42a1      	cmp	r1, r4
   19850:	d1f3      	bne.n	1983a <_malloc_r+0x76>
   19852:	0032      	movs	r2, r6
   19854:	6934      	ldr	r4, [r6, #16]
   19856:	3208      	adds	r2, #8
   19858:	4294      	cmp	r4, r2
   1985a:	d100      	bne.n	1985e <_malloc_r+0x9a>
   1985c:	e190      	b.n	19b80 <_malloc_r+0x3bc>
   1985e:	2303      	movs	r3, #3
   19860:	6861      	ldr	r1, [r4, #4]
   19862:	4399      	bics	r1, r3
   19864:	4689      	mov	r9, r1
   19866:	1b49      	subs	r1, r1, r5
   19868:	290f      	cmp	r1, #15
   1986a:	dd00      	ble.n	1986e <_malloc_r+0xaa>
   1986c:	e162      	b.n	19b34 <_malloc_r+0x370>
   1986e:	6172      	str	r2, [r6, #20]
   19870:	6132      	str	r2, [r6, #16]
   19872:	2900      	cmp	r1, #0
   19874:	db00      	blt.n	19878 <_malloc_r+0xb4>
   19876:	e087      	b.n	19988 <_malloc_r+0x1c4>
   19878:	4ab9      	ldr	r2, [pc, #740]	; (19b60 <_malloc_r+0x39c>)
   1987a:	464b      	mov	r3, r9
   1987c:	4591      	cmp	r9, r2
   1987e:	d900      	bls.n	19882 <_malloc_r+0xbe>
   19880:	e130      	b.n	19ae4 <_malloc_r+0x320>
   19882:	08db      	lsrs	r3, r3, #3
   19884:	3aff      	subs	r2, #255	; 0xff
   19886:	1099      	asrs	r1, r3, #2
   19888:	3aff      	subs	r2, #255	; 0xff
   1988a:	408a      	lsls	r2, r1
   1988c:	00db      	lsls	r3, r3, #3
   1988e:	6871      	ldr	r1, [r6, #4]
   19890:	199b      	adds	r3, r3, r6
   19892:	430a      	orrs	r2, r1
   19894:	6899      	ldr	r1, [r3, #8]
   19896:	6072      	str	r2, [r6, #4]
   19898:	60e3      	str	r3, [r4, #12]
   1989a:	60a1      	str	r1, [r4, #8]
   1989c:	609c      	str	r4, [r3, #8]
   1989e:	0013      	movs	r3, r2
   198a0:	60cc      	str	r4, [r1, #12]
   198a2:	2101      	movs	r1, #1
   198a4:	1082      	asrs	r2, r0, #2
   198a6:	4091      	lsls	r1, r2
   198a8:	4299      	cmp	r1, r3
   198aa:	d86f      	bhi.n	1998c <_malloc_r+0x1c8>
   198ac:	420b      	tst	r3, r1
   198ae:	d105      	bne.n	198bc <_malloc_r+0xf8>
   198b0:	2203      	movs	r2, #3
   198b2:	4390      	bics	r0, r2
   198b4:	0049      	lsls	r1, r1, #1
   198b6:	3004      	adds	r0, #4
   198b8:	420b      	tst	r3, r1
   198ba:	d0fb      	beq.n	198b4 <_malloc_r+0xf0>
   198bc:	2303      	movs	r3, #3
   198be:	4698      	mov	r8, r3
   198c0:	00c3      	lsls	r3, r0, #3
   198c2:	4699      	mov	r9, r3
   198c4:	44b1      	add	r9, r6
   198c6:	46cc      	mov	ip, r9
   198c8:	4682      	mov	sl, r0
   198ca:	4663      	mov	r3, ip
   198cc:	68dc      	ldr	r4, [r3, #12]
   198ce:	45a4      	cmp	ip, r4
   198d0:	d107      	bne.n	198e2 <_malloc_r+0x11e>
   198d2:	e157      	b.n	19b84 <_malloc_r+0x3c0>
   198d4:	2a00      	cmp	r2, #0
   198d6:	db00      	blt.n	198da <_malloc_r+0x116>
   198d8:	e166      	b.n	19ba8 <_malloc_r+0x3e4>
   198da:	68e4      	ldr	r4, [r4, #12]
   198dc:	45a4      	cmp	ip, r4
   198de:	d100      	bne.n	198e2 <_malloc_r+0x11e>
   198e0:	e150      	b.n	19b84 <_malloc_r+0x3c0>
   198e2:	4642      	mov	r2, r8
   198e4:	6863      	ldr	r3, [r4, #4]
   198e6:	4393      	bics	r3, r2
   198e8:	1b5a      	subs	r2, r3, r5
   198ea:	2a0f      	cmp	r2, #15
   198ec:	ddf2      	ble.n	198d4 <_malloc_r+0x110>
   198ee:	2001      	movs	r0, #1
   198f0:	4680      	mov	r8, r0
   198f2:	1961      	adds	r1, r4, r5
   198f4:	4305      	orrs	r5, r0
   198f6:	6065      	str	r5, [r4, #4]
   198f8:	68a0      	ldr	r0, [r4, #8]
   198fa:	68e5      	ldr	r5, [r4, #12]
   198fc:	3608      	adds	r6, #8
   198fe:	60c5      	str	r5, [r0, #12]
   19900:	60a8      	str	r0, [r5, #8]
   19902:	4640      	mov	r0, r8
   19904:	60f1      	str	r1, [r6, #12]
   19906:	60b1      	str	r1, [r6, #8]
   19908:	4310      	orrs	r0, r2
   1990a:	6048      	str	r0, [r1, #4]
   1990c:	60ce      	str	r6, [r1, #12]
   1990e:	608e      	str	r6, [r1, #8]
   19910:	0038      	movs	r0, r7
   19912:	50e2      	str	r2, [r4, r3]
   19914:	f000 fb2a 	bl	19f6c <__malloc_unlock>
   19918:	0020      	movs	r0, r4
   1991a:	3008      	adds	r0, #8
   1991c:	e021      	b.n	19962 <_malloc_r+0x19e>
   1991e:	2910      	cmp	r1, #16
   19920:	d826      	bhi.n	19970 <_malloc_r+0x1ac>
   19922:	0038      	movs	r0, r7
   19924:	f000 fb1a 	bl	19f5c <__malloc_lock>
   19928:	2510      	movs	r5, #16
   1992a:	2318      	movs	r3, #24
   1992c:	2002      	movs	r0, #2
   1992e:	4e8b      	ldr	r6, [pc, #556]	; (19b5c <_malloc_r+0x398>)
   19930:	18f3      	adds	r3, r6, r3
   19932:	001a      	movs	r2, r3
   19934:	685c      	ldr	r4, [r3, #4]
   19936:	3a08      	subs	r2, #8
   19938:	4294      	cmp	r4, r2
   1993a:	d100      	bne.n	1993e <_malloc_r+0x17a>
   1993c:	e12e      	b.n	19b9c <_malloc_r+0x3d8>
   1993e:	2303      	movs	r3, #3
   19940:	6862      	ldr	r2, [r4, #4]
   19942:	439a      	bics	r2, r3
   19944:	0013      	movs	r3, r2
   19946:	68e2      	ldr	r2, [r4, #12]
   19948:	68a1      	ldr	r1, [r4, #8]
   1994a:	60ca      	str	r2, [r1, #12]
   1994c:	6091      	str	r1, [r2, #8]
   1994e:	2201      	movs	r2, #1
   19950:	18e3      	adds	r3, r4, r3
   19952:	6859      	ldr	r1, [r3, #4]
   19954:	0038      	movs	r0, r7
   19956:	430a      	orrs	r2, r1
   19958:	605a      	str	r2, [r3, #4]
   1995a:	f000 fb07 	bl	19f6c <__malloc_unlock>
   1995e:	0020      	movs	r0, r4
   19960:	3008      	adds	r0, #8
   19962:	b003      	add	sp, #12
   19964:	bc3c      	pop	{r2, r3, r4, r5}
   19966:	4690      	mov	r8, r2
   19968:	4699      	mov	r9, r3
   1996a:	46a2      	mov	sl, r4
   1996c:	46ab      	mov	fp, r5
   1996e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   19970:	230c      	movs	r3, #12
   19972:	2000      	movs	r0, #0
   19974:	603b      	str	r3, [r7, #0]
   19976:	e7f4      	b.n	19962 <_malloc_r+0x19e>
   19978:	2180      	movs	r1, #128	; 0x80
   1997a:	233f      	movs	r3, #63	; 0x3f
   1997c:	2040      	movs	r0, #64	; 0x40
   1997e:	0089      	lsls	r1, r1, #2
   19980:	4698      	mov	r8, r3
   19982:	e746      	b.n	19812 <_malloc_r+0x4e>
   19984:	4640      	mov	r0, r8
   19986:	e764      	b.n	19852 <_malloc_r+0x8e>
   19988:	464b      	mov	r3, r9
   1998a:	e7e0      	b.n	1994e <_malloc_r+0x18a>
   1998c:	2303      	movs	r3, #3
   1998e:	68b4      	ldr	r4, [r6, #8]
   19990:	6862      	ldr	r2, [r4, #4]
   19992:	439a      	bics	r2, r3
   19994:	4690      	mov	r8, r2
   19996:	42aa      	cmp	r2, r5
   19998:	d303      	bcc.n	199a2 <_malloc_r+0x1de>
   1999a:	1b53      	subs	r3, r2, r5
   1999c:	2b0f      	cmp	r3, #15
   1999e:	dd00      	ble.n	199a2 <_malloc_r+0x1de>
   199a0:	e086      	b.n	19ab0 <_malloc_r+0x2ec>
   199a2:	0023      	movs	r3, r4
   199a4:	4443      	add	r3, r8
   199a6:	4a6f      	ldr	r2, [pc, #444]	; (19b64 <_malloc_r+0x3a0>)
   199a8:	9301      	str	r3, [sp, #4]
   199aa:	4b6f      	ldr	r3, [pc, #444]	; (19b68 <_malloc_r+0x3a4>)
   199ac:	4693      	mov	fp, r2
   199ae:	681b      	ldr	r3, [r3, #0]
   199b0:	6812      	ldr	r2, [r2, #0]
   199b2:	18eb      	adds	r3, r5, r3
   199b4:	3201      	adds	r2, #1
   199b6:	d100      	bne.n	199ba <_malloc_r+0x1f6>
   199b8:	e168      	b.n	19c8c <_malloc_r+0x4c8>
   199ba:	4a6c      	ldr	r2, [pc, #432]	; (19b6c <_malloc_r+0x3a8>)
   199bc:	4694      	mov	ip, r2
   199be:	4463      	add	r3, ip
   199c0:	0b1b      	lsrs	r3, r3, #12
   199c2:	031b      	lsls	r3, r3, #12
   199c4:	9300      	str	r3, [sp, #0]
   199c6:	9900      	ldr	r1, [sp, #0]
   199c8:	0038      	movs	r0, r7
   199ca:	f000 fb67 	bl	1a09c <_sbrk_r>
   199ce:	0003      	movs	r3, r0
   199d0:	4681      	mov	r9, r0
   199d2:	3301      	adds	r3, #1
   199d4:	d061      	beq.n	19a9a <_malloc_r+0x2d6>
   199d6:	9b01      	ldr	r3, [sp, #4]
   199d8:	4283      	cmp	r3, r0
   199da:	d900      	bls.n	199de <_malloc_r+0x21a>
   199dc:	e0ff      	b.n	19bde <_malloc_r+0x41a>
   199de:	4b64      	ldr	r3, [pc, #400]	; (19b70 <_malloc_r+0x3ac>)
   199e0:	9a00      	ldr	r2, [sp, #0]
   199e2:	469a      	mov	sl, r3
   199e4:	681b      	ldr	r3, [r3, #0]
   199e6:	469c      	mov	ip, r3
   199e8:	4653      	mov	r3, sl
   199ea:	4462      	add	r2, ip
   199ec:	601a      	str	r2, [r3, #0]
   199ee:	9b01      	ldr	r3, [sp, #4]
   199f0:	0011      	movs	r1, r2
   199f2:	4283      	cmp	r3, r0
   199f4:	d100      	bne.n	199f8 <_malloc_r+0x234>
   199f6:	e155      	b.n	19ca4 <_malloc_r+0x4e0>
   199f8:	465b      	mov	r3, fp
   199fa:	681b      	ldr	r3, [r3, #0]
   199fc:	3301      	adds	r3, #1
   199fe:	d100      	bne.n	19a02 <_malloc_r+0x23e>
   19a00:	e16c      	b.n	19cdc <_malloc_r+0x518>
   19a02:	464b      	mov	r3, r9
   19a04:	9a01      	ldr	r2, [sp, #4]
   19a06:	1a9b      	subs	r3, r3, r2
   19a08:	1859      	adds	r1, r3, r1
   19a0a:	4653      	mov	r3, sl
   19a0c:	6019      	str	r1, [r3, #0]
   19a0e:	2307      	movs	r3, #7
   19a10:	464a      	mov	r2, r9
   19a12:	4013      	ands	r3, r2
   19a14:	d100      	bne.n	19a18 <_malloc_r+0x254>
   19a16:	e124      	b.n	19c62 <_malloc_r+0x49e>
   19a18:	2108      	movs	r1, #8
   19a1a:	4689      	mov	r9, r1
   19a1c:	4955      	ldr	r1, [pc, #340]	; (19b74 <_malloc_r+0x3b0>)
   19a1e:	1ad2      	subs	r2, r2, r3
   19a20:	4491      	add	r9, r2
   19a22:	1acb      	subs	r3, r1, r3
   19a24:	9a00      	ldr	r2, [sp, #0]
   19a26:	0038      	movs	r0, r7
   19a28:	444a      	add	r2, r9
   19a2a:	0511      	lsls	r1, r2, #20
   19a2c:	0d09      	lsrs	r1, r1, #20
   19a2e:	1a5b      	subs	r3, r3, r1
   19a30:	0019      	movs	r1, r3
   19a32:	469b      	mov	fp, r3
   19a34:	f000 fb32 	bl	1a09c <_sbrk_r>
   19a38:	1c43      	adds	r3, r0, #1
   19a3a:	d100      	bne.n	19a3e <_malloc_r+0x27a>
   19a3c:	e142      	b.n	19cc4 <_malloc_r+0x500>
   19a3e:	464b      	mov	r3, r9
   19a40:	1ac0      	subs	r0, r0, r3
   19a42:	2301      	movs	r3, #1
   19a44:	4458      	add	r0, fp
   19a46:	4318      	orrs	r0, r3
   19a48:	4653      	mov	r3, sl
   19a4a:	681b      	ldr	r3, [r3, #0]
   19a4c:	445b      	add	r3, fp
   19a4e:	0019      	movs	r1, r3
   19a50:	4653      	mov	r3, sl
   19a52:	6019      	str	r1, [r3, #0]
   19a54:	464b      	mov	r3, r9
   19a56:	60b3      	str	r3, [r6, #8]
   19a58:	6058      	str	r0, [r3, #4]
   19a5a:	42b4      	cmp	r4, r6
   19a5c:	d013      	beq.n	19a86 <_malloc_r+0x2c2>
   19a5e:	4643      	mov	r3, r8
   19a60:	2b0f      	cmp	r3, #15
   19a62:	d800      	bhi.n	19a66 <_malloc_r+0x2a2>
   19a64:	e0e8      	b.n	19c38 <_malloc_r+0x474>
   19a66:	4643      	mov	r3, r8
   19a68:	2207      	movs	r2, #7
   19a6a:	6860      	ldr	r0, [r4, #4]
   19a6c:	3b0c      	subs	r3, #12
   19a6e:	4393      	bics	r3, r2
   19a70:	3a06      	subs	r2, #6
   19a72:	4002      	ands	r2, r0
   19a74:	2005      	movs	r0, #5
   19a76:	431a      	orrs	r2, r3
   19a78:	6062      	str	r2, [r4, #4]
   19a7a:	18e2      	adds	r2, r4, r3
   19a7c:	6050      	str	r0, [r2, #4]
   19a7e:	6090      	str	r0, [r2, #8]
   19a80:	2b0f      	cmp	r3, #15
   19a82:	d900      	bls.n	19a86 <_malloc_r+0x2c2>
   19a84:	e122      	b.n	19ccc <_malloc_r+0x508>
   19a86:	4b3c      	ldr	r3, [pc, #240]	; (19b78 <_malloc_r+0x3b4>)
   19a88:	681a      	ldr	r2, [r3, #0]
   19a8a:	4291      	cmp	r1, r2
   19a8c:	d900      	bls.n	19a90 <_malloc_r+0x2cc>
   19a8e:	6019      	str	r1, [r3, #0]
   19a90:	4b3a      	ldr	r3, [pc, #232]	; (19b7c <_malloc_r+0x3b8>)
   19a92:	681a      	ldr	r2, [r3, #0]
   19a94:	4291      	cmp	r1, r2
   19a96:	d900      	bls.n	19a9a <_malloc_r+0x2d6>
   19a98:	6019      	str	r1, [r3, #0]
   19a9a:	2303      	movs	r3, #3
   19a9c:	68b4      	ldr	r4, [r6, #8]
   19a9e:	6862      	ldr	r2, [r4, #4]
   19aa0:	439a      	bics	r2, r3
   19aa2:	1b53      	subs	r3, r2, r5
   19aa4:	4295      	cmp	r5, r2
   19aa6:	d900      	bls.n	19aaa <_malloc_r+0x2e6>
   19aa8:	e0c9      	b.n	19c3e <_malloc_r+0x47a>
   19aaa:	2b0f      	cmp	r3, #15
   19aac:	dc00      	bgt.n	19ab0 <_malloc_r+0x2ec>
   19aae:	e0c6      	b.n	19c3e <_malloc_r+0x47a>
   19ab0:	2201      	movs	r2, #1
   19ab2:	0029      	movs	r1, r5
   19ab4:	4313      	orrs	r3, r2
   19ab6:	4311      	orrs	r1, r2
   19ab8:	1965      	adds	r5, r4, r5
   19aba:	6061      	str	r1, [r4, #4]
   19abc:	0038      	movs	r0, r7
   19abe:	60b5      	str	r5, [r6, #8]
   19ac0:	606b      	str	r3, [r5, #4]
   19ac2:	f000 fa53 	bl	19f6c <__malloc_unlock>
   19ac6:	0020      	movs	r0, r4
   19ac8:	3008      	adds	r0, #8
   19aca:	e74a      	b.n	19962 <_malloc_r+0x19e>
   19acc:	2814      	cmp	r0, #20
   19ace:	d97a      	bls.n	19bc6 <_malloc_r+0x402>
   19ad0:	2854      	cmp	r0, #84	; 0x54
   19ad2:	d900      	bls.n	19ad6 <_malloc_r+0x312>
   19ad4:	e0ba      	b.n	19c4c <_malloc_r+0x488>
   19ad6:	236e      	movs	r3, #110	; 0x6e
   19ad8:	4698      	mov	r8, r3
   19ada:	0b28      	lsrs	r0, r5, #12
   19adc:	4480      	add	r8, r0
   19ade:	306f      	adds	r0, #111	; 0x6f
   19ae0:	00c1      	lsls	r1, r0, #3
   19ae2:	e696      	b.n	19812 <_malloc_r+0x4e>
   19ae4:	0a5a      	lsrs	r2, r3, #9
   19ae6:	2a04      	cmp	r2, #4
   19ae8:	d973      	bls.n	19bd2 <_malloc_r+0x40e>
   19aea:	2a14      	cmp	r2, #20
   19aec:	d900      	bls.n	19af0 <_malloc_r+0x32c>
   19aee:	e0d0      	b.n	19c92 <_malloc_r+0x4ce>
   19af0:	0011      	movs	r1, r2
   19af2:	325c      	adds	r2, #92	; 0x5c
   19af4:	315b      	adds	r1, #91	; 0x5b
   19af6:	00d2      	lsls	r2, r2, #3
   19af8:	2308      	movs	r3, #8
   19afa:	425b      	negs	r3, r3
   19afc:	469c      	mov	ip, r3
   19afe:	18b2      	adds	r2, r6, r2
   19b00:	4494      	add	ip, r2
   19b02:	4663      	mov	r3, ip
   19b04:	689a      	ldr	r2, [r3, #8]
   19b06:	2303      	movs	r3, #3
   19b08:	4698      	mov	r8, r3
   19b0a:	4594      	cmp	ip, r2
   19b0c:	d100      	bne.n	19b10 <_malloc_r+0x34c>
   19b0e:	e0ab      	b.n	19c68 <_malloc_r+0x4a4>
   19b10:	4643      	mov	r3, r8
   19b12:	6851      	ldr	r1, [r2, #4]
   19b14:	4399      	bics	r1, r3
   19b16:	4589      	cmp	r9, r1
   19b18:	d300      	bcc.n	19b1c <_malloc_r+0x358>
   19b1a:	e095      	b.n	19c48 <_malloc_r+0x484>
   19b1c:	6892      	ldr	r2, [r2, #8]
   19b1e:	4594      	cmp	ip, r2
   19b20:	d1f6      	bne.n	19b10 <_malloc_r+0x34c>
   19b22:	4663      	mov	r3, ip
   19b24:	68da      	ldr	r2, [r3, #12]
   19b26:	6873      	ldr	r3, [r6, #4]
   19b28:	4661      	mov	r1, ip
   19b2a:	60e2      	str	r2, [r4, #12]
   19b2c:	60a1      	str	r1, [r4, #8]
   19b2e:	6094      	str	r4, [r2, #8]
   19b30:	60cc      	str	r4, [r1, #12]
   19b32:	e6b6      	b.n	198a2 <_malloc_r+0xde>
   19b34:	2301      	movs	r3, #1
   19b36:	1960      	adds	r0, r4, r5
   19b38:	431d      	orrs	r5, r3
   19b3a:	6065      	str	r5, [r4, #4]
   19b3c:	6170      	str	r0, [r6, #20]
   19b3e:	6130      	str	r0, [r6, #16]
   19b40:	60c2      	str	r2, [r0, #12]
   19b42:	6082      	str	r2, [r0, #8]
   19b44:	001a      	movs	r2, r3
   19b46:	464b      	mov	r3, r9
   19b48:	430a      	orrs	r2, r1
   19b4a:	6042      	str	r2, [r0, #4]
   19b4c:	0038      	movs	r0, r7
   19b4e:	50e1      	str	r1, [r4, r3]
   19b50:	f000 fa0c 	bl	19f6c <__malloc_unlock>
   19b54:	0020      	movs	r0, r4
   19b56:	3008      	adds	r0, #8
   19b58:	e703      	b.n	19962 <_malloc_r+0x19e>
   19b5a:	46c0      	nop			; (mov r8, r8)
   19b5c:	200005b4 	.word	0x200005b4
   19b60:	000001ff 	.word	0x000001ff
   19b64:	200009bc 	.word	0x200009bc
   19b68:	20001168 	.word	0x20001168
   19b6c:	0000100f 	.word	0x0000100f
   19b70:	20001138 	.word	0x20001138
   19b74:	00001008 	.word	0x00001008
   19b78:	20001160 	.word	0x20001160
   19b7c:	20001164 	.word	0x20001164
   19b80:	6873      	ldr	r3, [r6, #4]
   19b82:	e68e      	b.n	198a2 <_malloc_r+0xde>
   19b84:	2308      	movs	r3, #8
   19b86:	469b      	mov	fp, r3
   19b88:	3b07      	subs	r3, #7
   19b8a:	44dc      	add	ip, fp
   19b8c:	469b      	mov	fp, r3
   19b8e:	44da      	add	sl, fp
   19b90:	4643      	mov	r3, r8
   19b92:	4652      	mov	r2, sl
   19b94:	4213      	tst	r3, r2
   19b96:	d000      	beq.n	19b9a <_malloc_r+0x3d6>
   19b98:	e697      	b.n	198ca <_malloc_r+0x106>
   19b9a:	e037      	b.n	19c0c <_malloc_r+0x448>
   19b9c:	68dc      	ldr	r4, [r3, #12]
   19b9e:	3002      	adds	r0, #2
   19ba0:	42a3      	cmp	r3, r4
   19ba2:	d100      	bne.n	19ba6 <_malloc_r+0x3e2>
   19ba4:	e655      	b.n	19852 <_malloc_r+0x8e>
   19ba6:	e6ca      	b.n	1993e <_malloc_r+0x17a>
   19ba8:	2201      	movs	r2, #1
   19baa:	18e3      	adds	r3, r4, r3
   19bac:	6859      	ldr	r1, [r3, #4]
   19bae:	0038      	movs	r0, r7
   19bb0:	430a      	orrs	r2, r1
   19bb2:	605a      	str	r2, [r3, #4]
   19bb4:	68e3      	ldr	r3, [r4, #12]
   19bb6:	68a2      	ldr	r2, [r4, #8]
   19bb8:	60d3      	str	r3, [r2, #12]
   19bba:	609a      	str	r2, [r3, #8]
   19bbc:	f000 f9d6 	bl	19f6c <__malloc_unlock>
   19bc0:	0020      	movs	r0, r4
   19bc2:	3008      	adds	r0, #8
   19bc4:	e6cd      	b.n	19962 <_malloc_r+0x19e>
   19bc6:	235b      	movs	r3, #91	; 0x5b
   19bc8:	4698      	mov	r8, r3
   19bca:	4480      	add	r8, r0
   19bcc:	305c      	adds	r0, #92	; 0x5c
   19bce:	00c1      	lsls	r1, r0, #3
   19bd0:	e61f      	b.n	19812 <_malloc_r+0x4e>
   19bd2:	099a      	lsrs	r2, r3, #6
   19bd4:	0011      	movs	r1, r2
   19bd6:	3239      	adds	r2, #57	; 0x39
   19bd8:	3138      	adds	r1, #56	; 0x38
   19bda:	00d2      	lsls	r2, r2, #3
   19bdc:	e78c      	b.n	19af8 <_malloc_r+0x334>
   19bde:	42b4      	cmp	r4, r6
   19be0:	d000      	beq.n	19be4 <_malloc_r+0x420>
   19be2:	e75a      	b.n	19a9a <_malloc_r+0x2d6>
   19be4:	4b4f      	ldr	r3, [pc, #316]	; (19d24 <_malloc_r+0x560>)
   19be6:	9a00      	ldr	r2, [sp, #0]
   19be8:	469a      	mov	sl, r3
   19bea:	681b      	ldr	r3, [r3, #0]
   19bec:	469c      	mov	ip, r3
   19bee:	4653      	mov	r3, sl
   19bf0:	4462      	add	r2, ip
   19bf2:	0011      	movs	r1, r2
   19bf4:	601a      	str	r2, [r3, #0]
   19bf6:	e6ff      	b.n	199f8 <_malloc_r+0x234>
   19bf8:	2308      	movs	r3, #8
   19bfa:	425b      	negs	r3, r3
   19bfc:	469c      	mov	ip, r3
   19bfe:	44e1      	add	r9, ip
   19c00:	464b      	mov	r3, r9
   19c02:	689b      	ldr	r3, [r3, #8]
   19c04:	3801      	subs	r0, #1
   19c06:	4599      	cmp	r9, r3
   19c08:	d000      	beq.n	19c0c <_malloc_r+0x448>
   19c0a:	e084      	b.n	19d16 <_malloc_r+0x552>
   19c0c:	4643      	mov	r3, r8
   19c0e:	4203      	tst	r3, r0
   19c10:	d1f2      	bne.n	19bf8 <_malloc_r+0x434>
   19c12:	6873      	ldr	r3, [r6, #4]
   19c14:	438b      	bics	r3, r1
   19c16:	6073      	str	r3, [r6, #4]
   19c18:	0049      	lsls	r1, r1, #1
   19c1a:	4299      	cmp	r1, r3
   19c1c:	d900      	bls.n	19c20 <_malloc_r+0x45c>
   19c1e:	e6b5      	b.n	1998c <_malloc_r+0x1c8>
   19c20:	2900      	cmp	r1, #0
   19c22:	d100      	bne.n	19c26 <_malloc_r+0x462>
   19c24:	e6b2      	b.n	1998c <_malloc_r+0x1c8>
   19c26:	4650      	mov	r0, sl
   19c28:	420b      	tst	r3, r1
   19c2a:	d000      	beq.n	19c2e <_malloc_r+0x46a>
   19c2c:	e648      	b.n	198c0 <_malloc_r+0xfc>
   19c2e:	0049      	lsls	r1, r1, #1
   19c30:	3004      	adds	r0, #4
   19c32:	420b      	tst	r3, r1
   19c34:	d0fb      	beq.n	19c2e <_malloc_r+0x46a>
   19c36:	e643      	b.n	198c0 <_malloc_r+0xfc>
   19c38:	2301      	movs	r3, #1
   19c3a:	464a      	mov	r2, r9
   19c3c:	6053      	str	r3, [r2, #4]
   19c3e:	0038      	movs	r0, r7
   19c40:	f000 f994 	bl	19f6c <__malloc_unlock>
   19c44:	2000      	movs	r0, #0
   19c46:	e68c      	b.n	19962 <_malloc_r+0x19e>
   19c48:	4694      	mov	ip, r2
   19c4a:	e76a      	b.n	19b22 <_malloc_r+0x35e>
   19c4c:	23aa      	movs	r3, #170	; 0xaa
   19c4e:	005b      	lsls	r3, r3, #1
   19c50:	4298      	cmp	r0, r3
   19c52:	d811      	bhi.n	19c78 <_malloc_r+0x4b4>
   19c54:	3bdd      	subs	r3, #221	; 0xdd
   19c56:	4698      	mov	r8, r3
   19c58:	0be8      	lsrs	r0, r5, #15
   19c5a:	4480      	add	r8, r0
   19c5c:	3078      	adds	r0, #120	; 0x78
   19c5e:	00c1      	lsls	r1, r0, #3
   19c60:	e5d7      	b.n	19812 <_malloc_r+0x4e>
   19c62:	2380      	movs	r3, #128	; 0x80
   19c64:	015b      	lsls	r3, r3, #5
   19c66:	e6dd      	b.n	19a24 <_malloc_r+0x260>
   19c68:	1089      	asrs	r1, r1, #2
   19c6a:	3b02      	subs	r3, #2
   19c6c:	408b      	lsls	r3, r1
   19c6e:	6872      	ldr	r2, [r6, #4]
   19c70:	4313      	orrs	r3, r2
   19c72:	6073      	str	r3, [r6, #4]
   19c74:	4662      	mov	r2, ip
   19c76:	e757      	b.n	19b28 <_malloc_r+0x364>
   19c78:	4b2b      	ldr	r3, [pc, #172]	; (19d28 <_malloc_r+0x564>)
   19c7a:	4298      	cmp	r0, r3
   19c7c:	d81c      	bhi.n	19cb8 <_malloc_r+0x4f4>
   19c7e:	237c      	movs	r3, #124	; 0x7c
   19c80:	4698      	mov	r8, r3
   19c82:	0ca8      	lsrs	r0, r5, #18
   19c84:	4480      	add	r8, r0
   19c86:	307d      	adds	r0, #125	; 0x7d
   19c88:	00c1      	lsls	r1, r0, #3
   19c8a:	e5c2      	b.n	19812 <_malloc_r+0x4e>
   19c8c:	3310      	adds	r3, #16
   19c8e:	9300      	str	r3, [sp, #0]
   19c90:	e699      	b.n	199c6 <_malloc_r+0x202>
   19c92:	2a54      	cmp	r2, #84	; 0x54
   19c94:	d826      	bhi.n	19ce4 <_malloc_r+0x520>
   19c96:	464b      	mov	r3, r9
   19c98:	0b1a      	lsrs	r2, r3, #12
   19c9a:	0011      	movs	r1, r2
   19c9c:	326f      	adds	r2, #111	; 0x6f
   19c9e:	316e      	adds	r1, #110	; 0x6e
   19ca0:	00d2      	lsls	r2, r2, #3
   19ca2:	e729      	b.n	19af8 <_malloc_r+0x334>
   19ca4:	051b      	lsls	r3, r3, #20
   19ca6:	d000      	beq.n	19caa <_malloc_r+0x4e6>
   19ca8:	e6a6      	b.n	199f8 <_malloc_r+0x234>
   19caa:	2001      	movs	r0, #1
   19cac:	9b00      	ldr	r3, [sp, #0]
   19cae:	68b2      	ldr	r2, [r6, #8]
   19cb0:	4443      	add	r3, r8
   19cb2:	4303      	orrs	r3, r0
   19cb4:	6053      	str	r3, [r2, #4]
   19cb6:	e6e6      	b.n	19a86 <_malloc_r+0x2c2>
   19cb8:	21fe      	movs	r1, #254	; 0xfe
   19cba:	237e      	movs	r3, #126	; 0x7e
   19cbc:	207f      	movs	r0, #127	; 0x7f
   19cbe:	0089      	lsls	r1, r1, #2
   19cc0:	4698      	mov	r8, r3
   19cc2:	e5a6      	b.n	19812 <_malloc_r+0x4e>
   19cc4:	2300      	movs	r3, #0
   19cc6:	2001      	movs	r0, #1
   19cc8:	469b      	mov	fp, r3
   19cca:	e6bd      	b.n	19a48 <_malloc_r+0x284>
   19ccc:	0021      	movs	r1, r4
   19cce:	0038      	movs	r0, r7
   19cd0:	3108      	adds	r1, #8
   19cd2:	f003 fb4f 	bl	1d374 <_free_r>
   19cd6:	4653      	mov	r3, sl
   19cd8:	6819      	ldr	r1, [r3, #0]
   19cda:	e6d4      	b.n	19a86 <_malloc_r+0x2c2>
   19cdc:	465b      	mov	r3, fp
   19cde:	464a      	mov	r2, r9
   19ce0:	601a      	str	r2, [r3, #0]
   19ce2:	e694      	b.n	19a0e <_malloc_r+0x24a>
   19ce4:	21aa      	movs	r1, #170	; 0xaa
   19ce6:	0049      	lsls	r1, r1, #1
   19ce8:	428a      	cmp	r2, r1
   19cea:	d806      	bhi.n	19cfa <_malloc_r+0x536>
   19cec:	464b      	mov	r3, r9
   19cee:	0bda      	lsrs	r2, r3, #15
   19cf0:	0011      	movs	r1, r2
   19cf2:	3278      	adds	r2, #120	; 0x78
   19cf4:	3177      	adds	r1, #119	; 0x77
   19cf6:	00d2      	lsls	r2, r2, #3
   19cf8:	e6fe      	b.n	19af8 <_malloc_r+0x334>
   19cfa:	490b      	ldr	r1, [pc, #44]	; (19d28 <_malloc_r+0x564>)
   19cfc:	428a      	cmp	r2, r1
   19cfe:	d806      	bhi.n	19d0e <_malloc_r+0x54a>
   19d00:	464b      	mov	r3, r9
   19d02:	0c9a      	lsrs	r2, r3, #18
   19d04:	0011      	movs	r1, r2
   19d06:	327d      	adds	r2, #125	; 0x7d
   19d08:	317c      	adds	r1, #124	; 0x7c
   19d0a:	00d2      	lsls	r2, r2, #3
   19d0c:	e6f4      	b.n	19af8 <_malloc_r+0x334>
   19d0e:	22fe      	movs	r2, #254	; 0xfe
   19d10:	217e      	movs	r1, #126	; 0x7e
   19d12:	0092      	lsls	r2, r2, #2
   19d14:	e6f0      	b.n	19af8 <_malloc_r+0x334>
   19d16:	6873      	ldr	r3, [r6, #4]
   19d18:	e77e      	b.n	19c18 <_malloc_r+0x454>
   19d1a:	002b      	movs	r3, r5
   19d1c:	08e8      	lsrs	r0, r5, #3
   19d1e:	3308      	adds	r3, #8
   19d20:	e605      	b.n	1992e <_malloc_r+0x16a>
   19d22:	46c0      	nop			; (mov r8, r8)
   19d24:	20001138 	.word	0x20001138
   19d28:	00000554 	.word	0x00000554

00019d2c <__ascii_mbtowc>:
   19d2c:	b082      	sub	sp, #8
   19d2e:	2900      	cmp	r1, #0
   19d30:	d00a      	beq.n	19d48 <__ascii_mbtowc+0x1c>
   19d32:	2a00      	cmp	r2, #0
   19d34:	d00b      	beq.n	19d4e <__ascii_mbtowc+0x22>
   19d36:	2b00      	cmp	r3, #0
   19d38:	d00b      	beq.n	19d52 <__ascii_mbtowc+0x26>
   19d3a:	7813      	ldrb	r3, [r2, #0]
   19d3c:	600b      	str	r3, [r1, #0]
   19d3e:	7810      	ldrb	r0, [r2, #0]
   19d40:	1e43      	subs	r3, r0, #1
   19d42:	4198      	sbcs	r0, r3
   19d44:	b002      	add	sp, #8
   19d46:	4770      	bx	lr
   19d48:	a901      	add	r1, sp, #4
   19d4a:	2a00      	cmp	r2, #0
   19d4c:	d1f3      	bne.n	19d36 <__ascii_mbtowc+0xa>
   19d4e:	2000      	movs	r0, #0
   19d50:	e7f8      	b.n	19d44 <__ascii_mbtowc+0x18>
   19d52:	2002      	movs	r0, #2
   19d54:	4240      	negs	r0, r0
   19d56:	e7f5      	b.n	19d44 <__ascii_mbtowc+0x18>

00019d58 <memcmp>:
   19d58:	b510      	push	{r4, lr}
   19d5a:	2a03      	cmp	r2, #3
   19d5c:	d91c      	bls.n	19d98 <memcmp+0x40>
   19d5e:	0003      	movs	r3, r0
   19d60:	430b      	orrs	r3, r1
   19d62:	079b      	lsls	r3, r3, #30
   19d64:	d00f      	beq.n	19d86 <memcmp+0x2e>
   19d66:	7803      	ldrb	r3, [r0, #0]
   19d68:	780c      	ldrb	r4, [r1, #0]
   19d6a:	1882      	adds	r2, r0, r2
   19d6c:	42a3      	cmp	r3, r4
   19d6e:	d004      	beq.n	19d7a <memcmp+0x22>
   19d70:	e015      	b.n	19d9e <memcmp+0x46>
   19d72:	7803      	ldrb	r3, [r0, #0]
   19d74:	780c      	ldrb	r4, [r1, #0]
   19d76:	42a3      	cmp	r3, r4
   19d78:	d111      	bne.n	19d9e <memcmp+0x46>
   19d7a:	3001      	adds	r0, #1
   19d7c:	3101      	adds	r1, #1
   19d7e:	4282      	cmp	r2, r0
   19d80:	d1f7      	bne.n	19d72 <memcmp+0x1a>
   19d82:	2000      	movs	r0, #0
   19d84:	bd10      	pop	{r4, pc}
   19d86:	6803      	ldr	r3, [r0, #0]
   19d88:	680c      	ldr	r4, [r1, #0]
   19d8a:	42a3      	cmp	r3, r4
   19d8c:	d1eb      	bne.n	19d66 <memcmp+0xe>
   19d8e:	3a04      	subs	r2, #4
   19d90:	3004      	adds	r0, #4
   19d92:	3104      	adds	r1, #4
   19d94:	2a03      	cmp	r2, #3
   19d96:	d8f6      	bhi.n	19d86 <memcmp+0x2e>
   19d98:	2a00      	cmp	r2, #0
   19d9a:	d1e4      	bne.n	19d66 <memcmp+0xe>
   19d9c:	e7f1      	b.n	19d82 <memcmp+0x2a>
   19d9e:	1b18      	subs	r0, r3, r4
   19da0:	e7f0      	b.n	19d84 <memcmp+0x2c>
   19da2:	46c0      	nop			; (mov r8, r8)

00019da4 <memcpy>:
   19da4:	b5f0      	push	{r4, r5, r6, r7, lr}
   19da6:	0005      	movs	r5, r0
   19da8:	2a0f      	cmp	r2, #15
   19daa:	d92f      	bls.n	19e0c <memcpy+0x68>
   19dac:	000b      	movs	r3, r1
   19dae:	4303      	orrs	r3, r0
   19db0:	079b      	lsls	r3, r3, #30
   19db2:	d134      	bne.n	19e1e <memcpy+0x7a>
   19db4:	0016      	movs	r6, r2
   19db6:	000c      	movs	r4, r1
   19db8:	0003      	movs	r3, r0
   19dba:	3e10      	subs	r6, #16
   19dbc:	0935      	lsrs	r5, r6, #4
   19dbe:	3501      	adds	r5, #1
   19dc0:	012d      	lsls	r5, r5, #4
   19dc2:	1945      	adds	r5, r0, r5
   19dc4:	6827      	ldr	r7, [r4, #0]
   19dc6:	601f      	str	r7, [r3, #0]
   19dc8:	6867      	ldr	r7, [r4, #4]
   19dca:	605f      	str	r7, [r3, #4]
   19dcc:	68a7      	ldr	r7, [r4, #8]
   19dce:	609f      	str	r7, [r3, #8]
   19dd0:	68e7      	ldr	r7, [r4, #12]
   19dd2:	3410      	adds	r4, #16
   19dd4:	60df      	str	r7, [r3, #12]
   19dd6:	3310      	adds	r3, #16
   19dd8:	429d      	cmp	r5, r3
   19dda:	d1f3      	bne.n	19dc4 <memcpy+0x20>
   19ddc:	230f      	movs	r3, #15
   19dde:	439e      	bics	r6, r3
   19de0:	3610      	adds	r6, #16
   19de2:	1985      	adds	r5, r0, r6
   19de4:	1989      	adds	r1, r1, r6
   19de6:	4013      	ands	r3, r2
   19de8:	2b03      	cmp	r3, #3
   19dea:	d91a      	bls.n	19e22 <memcpy+0x7e>
   19dec:	1f1e      	subs	r6, r3, #4
   19dee:	2300      	movs	r3, #0
   19df0:	08b4      	lsrs	r4, r6, #2
   19df2:	3401      	adds	r4, #1
   19df4:	00a4      	lsls	r4, r4, #2
   19df6:	58cf      	ldr	r7, [r1, r3]
   19df8:	50ef      	str	r7, [r5, r3]
   19dfa:	3304      	adds	r3, #4
   19dfc:	42a3      	cmp	r3, r4
   19dfe:	d1fa      	bne.n	19df6 <memcpy+0x52>
   19e00:	2403      	movs	r4, #3
   19e02:	43a6      	bics	r6, r4
   19e04:	1d33      	adds	r3, r6, #4
   19e06:	4022      	ands	r2, r4
   19e08:	18c9      	adds	r1, r1, r3
   19e0a:	18ed      	adds	r5, r5, r3
   19e0c:	2a00      	cmp	r2, #0
   19e0e:	d005      	beq.n	19e1c <memcpy+0x78>
   19e10:	2300      	movs	r3, #0
   19e12:	5ccc      	ldrb	r4, [r1, r3]
   19e14:	54ec      	strb	r4, [r5, r3]
   19e16:	3301      	adds	r3, #1
   19e18:	4293      	cmp	r3, r2
   19e1a:	d1fa      	bne.n	19e12 <memcpy+0x6e>
   19e1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   19e1e:	0005      	movs	r5, r0
   19e20:	e7f6      	b.n	19e10 <memcpy+0x6c>
   19e22:	001a      	movs	r2, r3
   19e24:	e7f2      	b.n	19e0c <memcpy+0x68>
   19e26:	46c0      	nop			; (mov r8, r8)

00019e28 <memmove>:
   19e28:	b5f0      	push	{r4, r5, r6, r7, lr}
   19e2a:	4288      	cmp	r0, r1
   19e2c:	d90a      	bls.n	19e44 <memmove+0x1c>
   19e2e:	188b      	adds	r3, r1, r2
   19e30:	4298      	cmp	r0, r3
   19e32:	d207      	bcs.n	19e44 <memmove+0x1c>
   19e34:	1e53      	subs	r3, r2, #1
   19e36:	2a00      	cmp	r2, #0
   19e38:	d003      	beq.n	19e42 <memmove+0x1a>
   19e3a:	5cca      	ldrb	r2, [r1, r3]
   19e3c:	54c2      	strb	r2, [r0, r3]
   19e3e:	3b01      	subs	r3, #1
   19e40:	d2fb      	bcs.n	19e3a <memmove+0x12>
   19e42:	bdf0      	pop	{r4, r5, r6, r7, pc}
   19e44:	0005      	movs	r5, r0
   19e46:	2a0f      	cmp	r2, #15
   19e48:	d808      	bhi.n	19e5c <memmove+0x34>
   19e4a:	2a00      	cmp	r2, #0
   19e4c:	d0f9      	beq.n	19e42 <memmove+0x1a>
   19e4e:	2300      	movs	r3, #0
   19e50:	5ccc      	ldrb	r4, [r1, r3]
   19e52:	54ec      	strb	r4, [r5, r3]
   19e54:	3301      	adds	r3, #1
   19e56:	4293      	cmp	r3, r2
   19e58:	d1fa      	bne.n	19e50 <memmove+0x28>
   19e5a:	e7f2      	b.n	19e42 <memmove+0x1a>
   19e5c:	000b      	movs	r3, r1
   19e5e:	4303      	orrs	r3, r0
   19e60:	079b      	lsls	r3, r3, #30
   19e62:	d12d      	bne.n	19ec0 <memmove+0x98>
   19e64:	0015      	movs	r5, r2
   19e66:	000c      	movs	r4, r1
   19e68:	0003      	movs	r3, r0
   19e6a:	3d10      	subs	r5, #16
   19e6c:	092f      	lsrs	r7, r5, #4
   19e6e:	3701      	adds	r7, #1
   19e70:	013f      	lsls	r7, r7, #4
   19e72:	19c7      	adds	r7, r0, r7
   19e74:	6826      	ldr	r6, [r4, #0]
   19e76:	601e      	str	r6, [r3, #0]
   19e78:	6866      	ldr	r6, [r4, #4]
   19e7a:	605e      	str	r6, [r3, #4]
   19e7c:	68a6      	ldr	r6, [r4, #8]
   19e7e:	609e      	str	r6, [r3, #8]
   19e80:	68e6      	ldr	r6, [r4, #12]
   19e82:	3410      	adds	r4, #16
   19e84:	60de      	str	r6, [r3, #12]
   19e86:	3310      	adds	r3, #16
   19e88:	429f      	cmp	r7, r3
   19e8a:	d1f3      	bne.n	19e74 <memmove+0x4c>
   19e8c:	240f      	movs	r4, #15
   19e8e:	43a5      	bics	r5, r4
   19e90:	3510      	adds	r5, #16
   19e92:	1949      	adds	r1, r1, r5
   19e94:	4014      	ands	r4, r2
   19e96:	1945      	adds	r5, r0, r5
   19e98:	2c03      	cmp	r4, #3
   19e9a:	d913      	bls.n	19ec4 <memmove+0x9c>
   19e9c:	2300      	movs	r3, #0
   19e9e:	1f27      	subs	r7, r4, #4
   19ea0:	08be      	lsrs	r6, r7, #2
   19ea2:	3601      	adds	r6, #1
   19ea4:	00b6      	lsls	r6, r6, #2
   19ea6:	58cc      	ldr	r4, [r1, r3]
   19ea8:	50ec      	str	r4, [r5, r3]
   19eaa:	3304      	adds	r3, #4
   19eac:	42b3      	cmp	r3, r6
   19eae:	d1fa      	bne.n	19ea6 <memmove+0x7e>
   19eb0:	2603      	movs	r6, #3
   19eb2:	43b7      	bics	r7, r6
   19eb4:	1d3c      	adds	r4, r7, #4
   19eb6:	1909      	adds	r1, r1, r4
   19eb8:	192d      	adds	r5, r5, r4
   19eba:	4032      	ands	r2, r6
   19ebc:	d1c7      	bne.n	19e4e <memmove+0x26>
   19ebe:	e7c0      	b.n	19e42 <memmove+0x1a>
   19ec0:	0005      	movs	r5, r0
   19ec2:	e7c4      	b.n	19e4e <memmove+0x26>
   19ec4:	0022      	movs	r2, r4
   19ec6:	e7c0      	b.n	19e4a <memmove+0x22>

00019ec8 <memset>:
   19ec8:	b5f0      	push	{r4, r5, r6, r7, lr}
   19eca:	0783      	lsls	r3, r0, #30
   19ecc:	d043      	beq.n	19f56 <memset+0x8e>
   19ece:	1e54      	subs	r4, r2, #1
   19ed0:	2a00      	cmp	r2, #0
   19ed2:	d03f      	beq.n	19f54 <memset+0x8c>
   19ed4:	b2ce      	uxtb	r6, r1
   19ed6:	0002      	movs	r2, r0
   19ed8:	2503      	movs	r5, #3
   19eda:	e002      	b.n	19ee2 <memset+0x1a>
   19edc:	001a      	movs	r2, r3
   19ede:	3c01      	subs	r4, #1
   19ee0:	d338      	bcc.n	19f54 <memset+0x8c>
   19ee2:	1c53      	adds	r3, r2, #1
   19ee4:	7016      	strb	r6, [r2, #0]
   19ee6:	422b      	tst	r3, r5
   19ee8:	d1f8      	bne.n	19edc <memset+0x14>
   19eea:	2c03      	cmp	r4, #3
   19eec:	d92a      	bls.n	19f44 <memset+0x7c>
   19eee:	22ff      	movs	r2, #255	; 0xff
   19ef0:	400a      	ands	r2, r1
   19ef2:	0215      	lsls	r5, r2, #8
   19ef4:	4315      	orrs	r5, r2
   19ef6:	042a      	lsls	r2, r5, #16
   19ef8:	4315      	orrs	r5, r2
   19efa:	2c0f      	cmp	r4, #15
   19efc:	d914      	bls.n	19f28 <memset+0x60>
   19efe:	0027      	movs	r7, r4
   19f00:	001a      	movs	r2, r3
   19f02:	3f10      	subs	r7, #16
   19f04:	093e      	lsrs	r6, r7, #4
   19f06:	3601      	adds	r6, #1
   19f08:	0136      	lsls	r6, r6, #4
   19f0a:	199e      	adds	r6, r3, r6
   19f0c:	6015      	str	r5, [r2, #0]
   19f0e:	6055      	str	r5, [r2, #4]
   19f10:	6095      	str	r5, [r2, #8]
   19f12:	60d5      	str	r5, [r2, #12]
   19f14:	3210      	adds	r2, #16
   19f16:	4296      	cmp	r6, r2
   19f18:	d1f8      	bne.n	19f0c <memset+0x44>
   19f1a:	220f      	movs	r2, #15
   19f1c:	4397      	bics	r7, r2
   19f1e:	3710      	adds	r7, #16
   19f20:	19db      	adds	r3, r3, r7
   19f22:	4014      	ands	r4, r2
   19f24:	2c03      	cmp	r4, #3
   19f26:	d90d      	bls.n	19f44 <memset+0x7c>
   19f28:	001a      	movs	r2, r3
   19f2a:	1f27      	subs	r7, r4, #4
   19f2c:	08be      	lsrs	r6, r7, #2
   19f2e:	3601      	adds	r6, #1
   19f30:	00b6      	lsls	r6, r6, #2
   19f32:	199e      	adds	r6, r3, r6
   19f34:	c220      	stmia	r2!, {r5}
   19f36:	42b2      	cmp	r2, r6
   19f38:	d1fc      	bne.n	19f34 <memset+0x6c>
   19f3a:	2203      	movs	r2, #3
   19f3c:	4397      	bics	r7, r2
   19f3e:	3704      	adds	r7, #4
   19f40:	19db      	adds	r3, r3, r7
   19f42:	4014      	ands	r4, r2
   19f44:	2c00      	cmp	r4, #0
   19f46:	d005      	beq.n	19f54 <memset+0x8c>
   19f48:	b2c9      	uxtb	r1, r1
   19f4a:	191c      	adds	r4, r3, r4
   19f4c:	7019      	strb	r1, [r3, #0]
   19f4e:	3301      	adds	r3, #1
   19f50:	429c      	cmp	r4, r3
   19f52:	d1fb      	bne.n	19f4c <memset+0x84>
   19f54:	bdf0      	pop	{r4, r5, r6, r7, pc}
   19f56:	0014      	movs	r4, r2
   19f58:	0003      	movs	r3, r0
   19f5a:	e7c6      	b.n	19eea <memset+0x22>

00019f5c <__malloc_lock>:
   19f5c:	b510      	push	{r4, lr}
   19f5e:	4802      	ldr	r0, [pc, #8]	; (19f68 <__malloc_lock+0xc>)
   19f60:	f003 fca0 	bl	1d8a4 <__retarget_lock_acquire_recursive>
   19f64:	bd10      	pop	{r4, pc}
   19f66:	46c0      	nop			; (mov r8, r8)
   19f68:	20002fd0 	.word	0x20002fd0

00019f6c <__malloc_unlock>:
   19f6c:	b510      	push	{r4, lr}
   19f6e:	4802      	ldr	r0, [pc, #8]	; (19f78 <__malloc_unlock+0xc>)
   19f70:	f003 fc9a 	bl	1d8a8 <__retarget_lock_release_recursive>
   19f74:	bd10      	pop	{r4, pc}
   19f76:	46c0      	nop			; (mov r8, r8)
   19f78:	20002fd0 	.word	0x20002fd0

00019f7c <printf>:
   19f7c:	b40f      	push	{r0, r1, r2, r3}
   19f7e:	b500      	push	{lr}
   19f80:	4906      	ldr	r1, [pc, #24]	; (19f9c <printf+0x20>)
   19f82:	b083      	sub	sp, #12
   19f84:	ab04      	add	r3, sp, #16
   19f86:	6808      	ldr	r0, [r1, #0]
   19f88:	cb04      	ldmia	r3!, {r2}
   19f8a:	6881      	ldr	r1, [r0, #8]
   19f8c:	9301      	str	r3, [sp, #4]
   19f8e:	f000 fb9b 	bl	1a6c8 <_vfprintf_r>
   19f92:	b003      	add	sp, #12
   19f94:	bc08      	pop	{r3}
   19f96:	b004      	add	sp, #16
   19f98:	4718      	bx	r3
   19f9a:	46c0      	nop			; (mov r8, r8)
   19f9c:	20000018 	.word	0x20000018

00019fa0 <_puts_r>:
   19fa0:	b530      	push	{r4, r5, lr}
   19fa2:	0004      	movs	r4, r0
   19fa4:	b089      	sub	sp, #36	; 0x24
   19fa6:	0008      	movs	r0, r1
   19fa8:	000d      	movs	r5, r1
   19faa:	f000 f9a7 	bl	1a2fc <strlen>
   19fae:	ab04      	add	r3, sp, #16
   19fb0:	4a21      	ldr	r2, [pc, #132]	; (1a038 <_puts_r+0x98>)
   19fb2:	9301      	str	r3, [sp, #4]
   19fb4:	2302      	movs	r3, #2
   19fb6:	9206      	str	r2, [sp, #24]
   19fb8:	2201      	movs	r2, #1
   19fba:	9302      	str	r3, [sp, #8]
   19fbc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   19fbe:	9005      	str	r0, [sp, #20]
   19fc0:	3001      	adds	r0, #1
   19fc2:	9504      	str	r5, [sp, #16]
   19fc4:	9207      	str	r2, [sp, #28]
   19fc6:	9003      	str	r0, [sp, #12]
   19fc8:	68a5      	ldr	r5, [r4, #8]
   19fca:	2b00      	cmp	r3, #0
   19fcc:	d02f      	beq.n	1a02e <_puts_r+0x8e>
   19fce:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   19fd0:	07db      	lsls	r3, r3, #31
   19fd2:	d424      	bmi.n	1a01e <_puts_r+0x7e>
   19fd4:	230c      	movs	r3, #12
   19fd6:	5eea      	ldrsh	r2, [r5, r3]
   19fd8:	b291      	uxth	r1, r2
   19fda:	058b      	lsls	r3, r1, #22
   19fdc:	d51c      	bpl.n	1a018 <_puts_r+0x78>
   19fde:	2380      	movs	r3, #128	; 0x80
   19fe0:	019b      	lsls	r3, r3, #6
   19fe2:	4219      	tst	r1, r3
   19fe4:	d105      	bne.n	19ff2 <_puts_r+0x52>
   19fe6:	4313      	orrs	r3, r2
   19fe8:	81ab      	strh	r3, [r5, #12]
   19fea:	6e6a      	ldr	r2, [r5, #100]	; 0x64
   19fec:	4b13      	ldr	r3, [pc, #76]	; (1a03c <_puts_r+0x9c>)
   19fee:	4013      	ands	r3, r2
   19ff0:	666b      	str	r3, [r5, #100]	; 0x64
   19ff2:	0020      	movs	r0, r4
   19ff4:	aa01      	add	r2, sp, #4
   19ff6:	0029      	movs	r1, r5
   19ff8:	f003 fa9a 	bl	1d530 <__sfvwrite_r>
   19ffc:	1e44      	subs	r4, r0, #1
   19ffe:	41a0      	sbcs	r0, r4
   1a000:	4244      	negs	r4, r0
   1a002:	200a      	movs	r0, #10
   1a004:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   1a006:	4304      	orrs	r4, r0
   1a008:	07db      	lsls	r3, r3, #31
   1a00a:	d402      	bmi.n	1a012 <_puts_r+0x72>
   1a00c:	89ab      	ldrh	r3, [r5, #12]
   1a00e:	059b      	lsls	r3, r3, #22
   1a010:	d509      	bpl.n	1a026 <_puts_r+0x86>
   1a012:	0020      	movs	r0, r4
   1a014:	b009      	add	sp, #36	; 0x24
   1a016:	bd30      	pop	{r4, r5, pc}
   1a018:	6da8      	ldr	r0, [r5, #88]	; 0x58
   1a01a:	f003 fc43 	bl	1d8a4 <__retarget_lock_acquire_recursive>
   1a01e:	230c      	movs	r3, #12
   1a020:	5eea      	ldrsh	r2, [r5, r3]
   1a022:	b291      	uxth	r1, r2
   1a024:	e7db      	b.n	19fde <_puts_r+0x3e>
   1a026:	6da8      	ldr	r0, [r5, #88]	; 0x58
   1a028:	f003 fc3e 	bl	1d8a8 <__retarget_lock_release_recursive>
   1a02c:	e7f1      	b.n	1a012 <_puts_r+0x72>
   1a02e:	0020      	movs	r0, r4
   1a030:	f003 f8f6 	bl	1d220 <__sinit>
   1a034:	e7cb      	b.n	19fce <_puts_r+0x2e>
   1a036:	46c0      	nop			; (mov r8, r8)
   1a038:	00020588 	.word	0x00020588
   1a03c:	ffffdfff 	.word	0xffffdfff

0001a040 <puts>:
   1a040:	b510      	push	{r4, lr}
   1a042:	4b03      	ldr	r3, [pc, #12]	; (1a050 <puts+0x10>)
   1a044:	0001      	movs	r1, r0
   1a046:	6818      	ldr	r0, [r3, #0]
   1a048:	f7ff ffaa 	bl	19fa0 <_puts_r>
   1a04c:	bd10      	pop	{r4, pc}
   1a04e:	46c0      	nop			; (mov r8, r8)
   1a050:	20000018 	.word	0x20000018

0001a054 <srand>:
   1a054:	2200      	movs	r2, #0
   1a056:	4b03      	ldr	r3, [pc, #12]	; (1a064 <srand+0x10>)
   1a058:	681b      	ldr	r3, [r3, #0]
   1a05a:	33a8      	adds	r3, #168	; 0xa8
   1a05c:	6018      	str	r0, [r3, #0]
   1a05e:	605a      	str	r2, [r3, #4]
   1a060:	4770      	bx	lr
   1a062:	46c0      	nop			; (mov r8, r8)
   1a064:	20000018 	.word	0x20000018

0001a068 <rand>:
   1a068:	b510      	push	{r4, lr}
   1a06a:	4b09      	ldr	r3, [pc, #36]	; (1a090 <rand+0x28>)
   1a06c:	4a09      	ldr	r2, [pc, #36]	; (1a094 <rand+0x2c>)
   1a06e:	681c      	ldr	r4, [r3, #0]
   1a070:	4b09      	ldr	r3, [pc, #36]	; (1a098 <rand+0x30>)
   1a072:	34a8      	adds	r4, #168	; 0xa8
   1a074:	6820      	ldr	r0, [r4, #0]
   1a076:	6861      	ldr	r1, [r4, #4]
   1a078:	f7fc fcf0 	bl	16a5c <__aeabi_lmul>
   1a07c:	2201      	movs	r2, #1
   1a07e:	2300      	movs	r3, #0
   1a080:	1880      	adds	r0, r0, r2
   1a082:	4159      	adcs	r1, r3
   1a084:	6020      	str	r0, [r4, #0]
   1a086:	6061      	str	r1, [r4, #4]
   1a088:	0048      	lsls	r0, r1, #1
   1a08a:	0840      	lsrs	r0, r0, #1
   1a08c:	bd10      	pop	{r4, pc}
   1a08e:	46c0      	nop			; (mov r8, r8)
   1a090:	20000018 	.word	0x20000018
   1a094:	4c957f2d 	.word	0x4c957f2d
   1a098:	5851f42d 	.word	0x5851f42d

0001a09c <_sbrk_r>:
   1a09c:	2300      	movs	r3, #0
   1a09e:	b570      	push	{r4, r5, r6, lr}
   1a0a0:	4c06      	ldr	r4, [pc, #24]	; (1a0bc <_sbrk_r+0x20>)
   1a0a2:	0005      	movs	r5, r0
   1a0a4:	0008      	movs	r0, r1
   1a0a6:	6023      	str	r3, [r4, #0]
   1a0a8:	f7ed fcd8 	bl	7a5c <_sbrk>
   1a0ac:	1c43      	adds	r3, r0, #1
   1a0ae:	d000      	beq.n	1a0b2 <_sbrk_r+0x16>
   1a0b0:	bd70      	pop	{r4, r5, r6, pc}
   1a0b2:	6823      	ldr	r3, [r4, #0]
   1a0b4:	2b00      	cmp	r3, #0
   1a0b6:	d0fb      	beq.n	1a0b0 <_sbrk_r+0x14>
   1a0b8:	602b      	str	r3, [r5, #0]
   1a0ba:	e7f9      	b.n	1a0b0 <_sbrk_r+0x14>
   1a0bc:	20002fe4 	.word	0x20002fe4

0001a0c0 <setbuf>:
   1a0c0:	424a      	negs	r2, r1
   1a0c2:	414a      	adcs	r2, r1
   1a0c4:	2380      	movs	r3, #128	; 0x80
   1a0c6:	b510      	push	{r4, lr}
   1a0c8:	0052      	lsls	r2, r2, #1
   1a0ca:	00db      	lsls	r3, r3, #3
   1a0cc:	f000 f802 	bl	1a0d4 <setvbuf>
   1a0d0:	bd10      	pop	{r4, pc}
   1a0d2:	46c0      	nop			; (mov r8, r8)

0001a0d4 <setvbuf>:
   1a0d4:	b5f0      	push	{r4, r5, r6, r7, lr}
   1a0d6:	4647      	mov	r7, r8
   1a0d8:	46ce      	mov	lr, r9
   1a0da:	b580      	push	{r7, lr}
   1a0dc:	001f      	movs	r7, r3
   1a0de:	4b63      	ldr	r3, [pc, #396]	; (1a26c <setvbuf+0x198>)
   1a0e0:	b083      	sub	sp, #12
   1a0e2:	681d      	ldr	r5, [r3, #0]
   1a0e4:	0004      	movs	r4, r0
   1a0e6:	4688      	mov	r8, r1
   1a0e8:	0016      	movs	r6, r2
   1a0ea:	2d00      	cmp	r5, #0
   1a0ec:	d002      	beq.n	1a0f4 <setvbuf+0x20>
   1a0ee:	6bab      	ldr	r3, [r5, #56]	; 0x38
   1a0f0:	2b00      	cmp	r3, #0
   1a0f2:	d066      	beq.n	1a1c2 <setvbuf+0xee>
   1a0f4:	2e02      	cmp	r6, #2
   1a0f6:	d005      	beq.n	1a104 <setvbuf+0x30>
   1a0f8:	2e01      	cmp	r6, #1
   1a0fa:	d900      	bls.n	1a0fe <setvbuf+0x2a>
   1a0fc:	e0a1      	b.n	1a242 <setvbuf+0x16e>
   1a0fe:	2f00      	cmp	r7, #0
   1a100:	da00      	bge.n	1a104 <setvbuf+0x30>
   1a102:	e09e      	b.n	1a242 <setvbuf+0x16e>
   1a104:	6e63      	ldr	r3, [r4, #100]	; 0x64
   1a106:	07db      	lsls	r3, r3, #31
   1a108:	d533      	bpl.n	1a172 <setvbuf+0x9e>
   1a10a:	0021      	movs	r1, r4
   1a10c:	0028      	movs	r0, r5
   1a10e:	f003 f82d 	bl	1d16c <_fflush_r>
   1a112:	6b21      	ldr	r1, [r4, #48]	; 0x30
   1a114:	2900      	cmp	r1, #0
   1a116:	d008      	beq.n	1a12a <setvbuf+0x56>
   1a118:	0023      	movs	r3, r4
   1a11a:	3340      	adds	r3, #64	; 0x40
   1a11c:	4299      	cmp	r1, r3
   1a11e:	d002      	beq.n	1a126 <setvbuf+0x52>
   1a120:	0028      	movs	r0, r5
   1a122:	f003 f927 	bl	1d374 <_free_r>
   1a126:	2300      	movs	r3, #0
   1a128:	6323      	str	r3, [r4, #48]	; 0x30
   1a12a:	2300      	movs	r3, #0
   1a12c:	61a3      	str	r3, [r4, #24]
   1a12e:	6063      	str	r3, [r4, #4]
   1a130:	220c      	movs	r2, #12
   1a132:	5ea3      	ldrsh	r3, [r4, r2]
   1a134:	061a      	lsls	r2, r3, #24
   1a136:	d43d      	bmi.n	1a1b4 <setvbuf+0xe0>
   1a138:	4a4d      	ldr	r2, [pc, #308]	; (1a270 <setvbuf+0x19c>)
   1a13a:	4013      	ands	r3, r2
   1a13c:	81a3      	strh	r3, [r4, #12]
   1a13e:	2e02      	cmp	r6, #2
   1a140:	d01e      	beq.n	1a180 <setvbuf+0xac>
   1a142:	ab01      	add	r3, sp, #4
   1a144:	466a      	mov	r2, sp
   1a146:	0021      	movs	r1, r4
   1a148:	0028      	movs	r0, r5
   1a14a:	f003 fbaf 	bl	1d8ac <__swhatbuf_r>
   1a14e:	89a3      	ldrh	r3, [r4, #12]
   1a150:	4318      	orrs	r0, r3
   1a152:	81a0      	strh	r0, [r4, #12]
   1a154:	2f00      	cmp	r7, #0
   1a156:	d138      	bne.n	1a1ca <setvbuf+0xf6>
   1a158:	9f00      	ldr	r7, [sp, #0]
   1a15a:	0038      	movs	r0, r7
   1a15c:	f7ff fb1e 	bl	1979c <malloc>
   1a160:	4680      	mov	r8, r0
   1a162:	2800      	cmp	r0, #0
   1a164:	d100      	bne.n	1a168 <setvbuf+0x94>
   1a166:	e06f      	b.n	1a248 <setvbuf+0x174>
   1a168:	2280      	movs	r2, #128	; 0x80
   1a16a:	89a3      	ldrh	r3, [r4, #12]
   1a16c:	4313      	orrs	r3, r2
   1a16e:	81a3      	strh	r3, [r4, #12]
   1a170:	e02e      	b.n	1a1d0 <setvbuf+0xfc>
   1a172:	89a3      	ldrh	r3, [r4, #12]
   1a174:	059b      	lsls	r3, r3, #22
   1a176:	d4c8      	bmi.n	1a10a <setvbuf+0x36>
   1a178:	6da0      	ldr	r0, [r4, #88]	; 0x58
   1a17a:	f003 fb93 	bl	1d8a4 <__retarget_lock_acquire_recursive>
   1a17e:	e7c4      	b.n	1a10a <setvbuf+0x36>
   1a180:	2500      	movs	r5, #0
   1a182:	2202      	movs	r2, #2
   1a184:	4313      	orrs	r3, r2
   1a186:	2200      	movs	r2, #0
   1a188:	60a2      	str	r2, [r4, #8]
   1a18a:	0022      	movs	r2, r4
   1a18c:	3243      	adds	r2, #67	; 0x43
   1a18e:	6022      	str	r2, [r4, #0]
   1a190:	6122      	str	r2, [r4, #16]
   1a192:	2201      	movs	r2, #1
   1a194:	6e61      	ldr	r1, [r4, #100]	; 0x64
   1a196:	81a3      	strh	r3, [r4, #12]
   1a198:	6162      	str	r2, [r4, #20]
   1a19a:	4211      	tst	r1, r2
   1a19c:	d104      	bne.n	1a1a8 <setvbuf+0xd4>
   1a19e:	059b      	lsls	r3, r3, #22
   1a1a0:	d402      	bmi.n	1a1a8 <setvbuf+0xd4>
   1a1a2:	6da0      	ldr	r0, [r4, #88]	; 0x58
   1a1a4:	f003 fb80 	bl	1d8a8 <__retarget_lock_release_recursive>
   1a1a8:	0028      	movs	r0, r5
   1a1aa:	b003      	add	sp, #12
   1a1ac:	bc0c      	pop	{r2, r3}
   1a1ae:	4690      	mov	r8, r2
   1a1b0:	4699      	mov	r9, r3
   1a1b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1a1b4:	6921      	ldr	r1, [r4, #16]
   1a1b6:	0028      	movs	r0, r5
   1a1b8:	f003 f8dc 	bl	1d374 <_free_r>
   1a1bc:	220c      	movs	r2, #12
   1a1be:	5ea3      	ldrsh	r3, [r4, r2]
   1a1c0:	e7ba      	b.n	1a138 <setvbuf+0x64>
   1a1c2:	0028      	movs	r0, r5
   1a1c4:	f003 f82c 	bl	1d220 <__sinit>
   1a1c8:	e794      	b.n	1a0f4 <setvbuf+0x20>
   1a1ca:	4643      	mov	r3, r8
   1a1cc:	2b00      	cmp	r3, #0
   1a1ce:	d0c4      	beq.n	1a15a <setvbuf+0x86>
   1a1d0:	6bab      	ldr	r3, [r5, #56]	; 0x38
   1a1d2:	2b00      	cmp	r3, #0
   1a1d4:	d027      	beq.n	1a226 <setvbuf+0x152>
   1a1d6:	9b00      	ldr	r3, [sp, #0]
   1a1d8:	429f      	cmp	r7, r3
   1a1da:	d02a      	beq.n	1a232 <setvbuf+0x15e>
   1a1dc:	2380      	movs	r3, #128	; 0x80
   1a1de:	89a2      	ldrh	r2, [r4, #12]
   1a1e0:	011b      	lsls	r3, r3, #4
   1a1e2:	4313      	orrs	r3, r2
   1a1e4:	b21b      	sxth	r3, r3
   1a1e6:	81a3      	strh	r3, [r4, #12]
   1a1e8:	2e01      	cmp	r6, #1
   1a1ea:	d026      	beq.n	1a23a <setvbuf+0x166>
   1a1ec:	4642      	mov	r2, r8
   1a1ee:	6022      	str	r2, [r4, #0]
   1a1f0:	6122      	str	r2, [r4, #16]
   1a1f2:	2208      	movs	r2, #8
   1a1f4:	b29b      	uxth	r3, r3
   1a1f6:	6167      	str	r7, [r4, #20]
   1a1f8:	401a      	ands	r2, r3
   1a1fa:	d00b      	beq.n	1a214 <setvbuf+0x140>
   1a1fc:	07da      	lsls	r2, r3, #31
   1a1fe:	d510      	bpl.n	1a222 <setvbuf+0x14e>
   1a200:	2200      	movs	r2, #0
   1a202:	2501      	movs	r5, #1
   1a204:	60a2      	str	r2, [r4, #8]
   1a206:	6e62      	ldr	r2, [r4, #100]	; 0x64
   1a208:	427f      	negs	r7, r7
   1a20a:	61a7      	str	r7, [r4, #24]
   1a20c:	4015      	ands	r5, r2
   1a20e:	d0c6      	beq.n	1a19e <setvbuf+0xca>
   1a210:	2500      	movs	r5, #0
   1a212:	e7c9      	b.n	1a1a8 <setvbuf+0xd4>
   1a214:	60a2      	str	r2, [r4, #8]
   1a216:	2501      	movs	r5, #1
   1a218:	6e62      	ldr	r2, [r4, #100]	; 0x64
   1a21a:	4015      	ands	r5, r2
   1a21c:	d0bf      	beq.n	1a19e <setvbuf+0xca>
   1a21e:	2500      	movs	r5, #0
   1a220:	e7c2      	b.n	1a1a8 <setvbuf+0xd4>
   1a222:	60a7      	str	r7, [r4, #8]
   1a224:	e7f7      	b.n	1a216 <setvbuf+0x142>
   1a226:	0028      	movs	r0, r5
   1a228:	f002 fffa 	bl	1d220 <__sinit>
   1a22c:	9b00      	ldr	r3, [sp, #0]
   1a22e:	429f      	cmp	r7, r3
   1a230:	d1d4      	bne.n	1a1dc <setvbuf+0x108>
   1a232:	220c      	movs	r2, #12
   1a234:	5ea3      	ldrsh	r3, [r4, r2]
   1a236:	2e01      	cmp	r6, #1
   1a238:	d1d8      	bne.n	1a1ec <setvbuf+0x118>
   1a23a:	2201      	movs	r2, #1
   1a23c:	4313      	orrs	r3, r2
   1a23e:	81a3      	strh	r3, [r4, #12]
   1a240:	e7d4      	b.n	1a1ec <setvbuf+0x118>
   1a242:	2501      	movs	r5, #1
   1a244:	426d      	negs	r5, r5
   1a246:	e7af      	b.n	1a1a8 <setvbuf+0xd4>
   1a248:	9b00      	ldr	r3, [sp, #0]
   1a24a:	4699      	mov	r9, r3
   1a24c:	42bb      	cmp	r3, r7
   1a24e:	d005      	beq.n	1a25c <setvbuf+0x188>
   1a250:	0018      	movs	r0, r3
   1a252:	f7ff faa3 	bl	1979c <malloc>
   1a256:	4680      	mov	r8, r0
   1a258:	2800      	cmp	r0, #0
   1a25a:	d104      	bne.n	1a266 <setvbuf+0x192>
   1a25c:	2501      	movs	r5, #1
   1a25e:	220c      	movs	r2, #12
   1a260:	5ea3      	ldrsh	r3, [r4, r2]
   1a262:	426d      	negs	r5, r5
   1a264:	e78d      	b.n	1a182 <setvbuf+0xae>
   1a266:	464f      	mov	r7, r9
   1a268:	e77e      	b.n	1a168 <setvbuf+0x94>
   1a26a:	46c0      	nop			; (mov r8, r8)
   1a26c:	20000018 	.word	0x20000018
   1a270:	fffff35c 	.word	0xfffff35c

0001a274 <strcmp>:
   1a274:	4602      	mov	r2, r0
   1a276:	b570      	push	{r4, r5, r6, lr}
   1a278:	430a      	orrs	r2, r1
   1a27a:	0792      	lsls	r2, r2, #30
   1a27c:	d12a      	bne.n	1a2d4 <strcmp+0x60>
   1a27e:	4d1e      	ldr	r5, [pc, #120]	; (1a2f8 <strcmp+0x84>)
   1a280:	01ee      	lsls	r6, r5, #7
   1a282:	c804      	ldmia	r0!, {r2}
   1a284:	c908      	ldmia	r1!, {r3}
   1a286:	1b54      	subs	r4, r2, r5
   1a288:	4394      	bics	r4, r2
   1a28a:	4034      	ands	r4, r6
   1a28c:	d017      	beq.n	1a2be <strcmp+0x4a>
   1a28e:	b2d0      	uxtb	r0, r2
   1a290:	b2d9      	uxtb	r1, r3
   1a292:	1a40      	subs	r0, r0, r1
   1a294:	0621      	lsls	r1, r4, #24
   1a296:	4301      	orrs	r1, r0
   1a298:	d110      	bne.n	1a2bc <strcmp+0x48>
   1a29a:	b290      	uxth	r0, r2
   1a29c:	b299      	uxth	r1, r3
   1a29e:	1a40      	subs	r0, r0, r1
   1a2a0:	0421      	lsls	r1, r4, #16
   1a2a2:	4301      	orrs	r1, r0
   1a2a4:	d10a      	bne.n	1a2bc <strcmp+0x48>
   1a2a6:	0210      	lsls	r0, r2, #8
   1a2a8:	0219      	lsls	r1, r3, #8
   1a2aa:	0a00      	lsrs	r0, r0, #8
   1a2ac:	0a09      	lsrs	r1, r1, #8
   1a2ae:	1a40      	subs	r0, r0, r1
   1a2b0:	0221      	lsls	r1, r4, #8
   1a2b2:	4301      	orrs	r1, r0
   1a2b4:	d102      	bne.n	1a2bc <strcmp+0x48>
   1a2b6:	0e10      	lsrs	r0, r2, #24
   1a2b8:	0e19      	lsrs	r1, r3, #24
   1a2ba:	1a40      	subs	r0, r0, r1
   1a2bc:	bd70      	pop	{r4, r5, r6, pc}
   1a2be:	429a      	cmp	r2, r3
   1a2c0:	d0df      	beq.n	1a282 <strcmp+0xe>
   1a2c2:	ba10      	rev	r0, r2
   1a2c4:	ba19      	rev	r1, r3
   1a2c6:	4288      	cmp	r0, r1
   1a2c8:	d901      	bls.n	1a2ce <strcmp+0x5a>
   1a2ca:	2001      	movs	r0, #1
   1a2cc:	bd70      	pop	{r4, r5, r6, pc}
   1a2ce:	2000      	movs	r0, #0
   1a2d0:	43c0      	mvns	r0, r0
   1a2d2:	bd70      	pop	{r4, r5, r6, pc}
   1a2d4:	7802      	ldrb	r2, [r0, #0]
   1a2d6:	780b      	ldrb	r3, [r1, #0]
   1a2d8:	3001      	adds	r0, #1
   1a2da:	3101      	adds	r1, #1
   1a2dc:	2a00      	cmp	r2, #0
   1a2de:	d009      	beq.n	1a2f4 <strcmp+0x80>
   1a2e0:	429a      	cmp	r2, r3
   1a2e2:	d107      	bne.n	1a2f4 <strcmp+0x80>
   1a2e4:	7802      	ldrb	r2, [r0, #0]
   1a2e6:	780b      	ldrb	r3, [r1, #0]
   1a2e8:	3001      	adds	r0, #1
   1a2ea:	3101      	adds	r1, #1
   1a2ec:	2a00      	cmp	r2, #0
   1a2ee:	d001      	beq.n	1a2f4 <strcmp+0x80>
   1a2f0:	429a      	cmp	r2, r3
   1a2f2:	d0ef      	beq.n	1a2d4 <strcmp+0x60>
   1a2f4:	1ad0      	subs	r0, r2, r3
   1a2f6:	bd70      	pop	{r4, r5, r6, pc}
   1a2f8:	01010101 	.word	0x01010101

0001a2fc <strlen>:
   1a2fc:	b510      	push	{r4, lr}
   1a2fe:	0783      	lsls	r3, r0, #30
   1a300:	d025      	beq.n	1a34e <strlen+0x52>
   1a302:	7803      	ldrb	r3, [r0, #0]
   1a304:	2b00      	cmp	r3, #0
   1a306:	d024      	beq.n	1a352 <strlen+0x56>
   1a308:	0003      	movs	r3, r0
   1a30a:	2103      	movs	r1, #3
   1a30c:	e002      	b.n	1a314 <strlen+0x18>
   1a30e:	781a      	ldrb	r2, [r3, #0]
   1a310:	2a00      	cmp	r2, #0
   1a312:	d01a      	beq.n	1a34a <strlen+0x4e>
   1a314:	3301      	adds	r3, #1
   1a316:	420b      	tst	r3, r1
   1a318:	d1f9      	bne.n	1a30e <strlen+0x12>
   1a31a:	6819      	ldr	r1, [r3, #0]
   1a31c:	4a0e      	ldr	r2, [pc, #56]	; (1a358 <strlen+0x5c>)
   1a31e:	4c0f      	ldr	r4, [pc, #60]	; (1a35c <strlen+0x60>)
   1a320:	188a      	adds	r2, r1, r2
   1a322:	438a      	bics	r2, r1
   1a324:	4222      	tst	r2, r4
   1a326:	d106      	bne.n	1a336 <strlen+0x3a>
   1a328:	3304      	adds	r3, #4
   1a32a:	6819      	ldr	r1, [r3, #0]
   1a32c:	4a0a      	ldr	r2, [pc, #40]	; (1a358 <strlen+0x5c>)
   1a32e:	188a      	adds	r2, r1, r2
   1a330:	438a      	bics	r2, r1
   1a332:	4222      	tst	r2, r4
   1a334:	d0f8      	beq.n	1a328 <strlen+0x2c>
   1a336:	001a      	movs	r2, r3
   1a338:	781b      	ldrb	r3, [r3, #0]
   1a33a:	2b00      	cmp	r3, #0
   1a33c:	d003      	beq.n	1a346 <strlen+0x4a>
   1a33e:	3201      	adds	r2, #1
   1a340:	7811      	ldrb	r1, [r2, #0]
   1a342:	2900      	cmp	r1, #0
   1a344:	d1fb      	bne.n	1a33e <strlen+0x42>
   1a346:	1a10      	subs	r0, r2, r0
   1a348:	bd10      	pop	{r4, pc}
   1a34a:	1a18      	subs	r0, r3, r0
   1a34c:	e7fc      	b.n	1a348 <strlen+0x4c>
   1a34e:	0003      	movs	r3, r0
   1a350:	e7e3      	b.n	1a31a <strlen+0x1e>
   1a352:	2000      	movs	r0, #0
   1a354:	e7f8      	b.n	1a348 <strlen+0x4c>
   1a356:	46c0      	nop			; (mov r8, r8)
   1a358:	fefefeff 	.word	0xfefefeff
   1a35c:	80808080 	.word	0x80808080

0001a360 <_strtol_l.isra.0>:
   1a360:	b5f0      	push	{r4, r5, r6, r7, lr}
   1a362:	4657      	mov	r7, sl
   1a364:	464e      	mov	r6, r9
   1a366:	46de      	mov	lr, fp
   1a368:	4645      	mov	r5, r8
   1a36a:	b5e0      	push	{r5, r6, r7, lr}
   1a36c:	001e      	movs	r6, r3
   1a36e:	2308      	movs	r3, #8
   1a370:	b083      	sub	sp, #12
   1a372:	9001      	str	r0, [sp, #4]
   1a374:	9100      	str	r1, [sp, #0]
   1a376:	4692      	mov	sl, r2
   1a378:	000f      	movs	r7, r1
   1a37a:	4699      	mov	r9, r3
   1a37c:	e000      	b.n	1a380 <_strtol_l.isra.0+0x20>
   1a37e:	002f      	movs	r7, r5
   1a380:	980c      	ldr	r0, [sp, #48]	; 0x30
   1a382:	783c      	ldrb	r4, [r7, #0]
   1a384:	f7ff f9f8 	bl	19778 <__locale_ctype_ptr_l>
   1a388:	464a      	mov	r2, r9
   1a38a:	1900      	adds	r0, r0, r4
   1a38c:	7843      	ldrb	r3, [r0, #1]
   1a38e:	1c7d      	adds	r5, r7, #1
   1a390:	421a      	tst	r2, r3
   1a392:	d1f4      	bne.n	1a37e <_strtol_l.isra.0+0x1e>
   1a394:	2c2d      	cmp	r4, #45	; 0x2d
   1a396:	d04f      	beq.n	1a438 <_strtol_l.isra.0+0xd8>
   1a398:	2300      	movs	r3, #0
   1a39a:	4698      	mov	r8, r3
   1a39c:	2c2b      	cmp	r4, #43	; 0x2b
   1a39e:	d05c      	beq.n	1a45a <_strtol_l.isra.0+0xfa>
   1a3a0:	2e00      	cmp	r6, #0
   1a3a2:	d003      	beq.n	1a3ac <_strtol_l.isra.0+0x4c>
   1a3a4:	2e10      	cmp	r6, #16
   1a3a6:	d05b      	beq.n	1a460 <_strtol_l.isra.0+0x100>
   1a3a8:	0037      	movs	r7, r6
   1a3aa:	e003      	b.n	1a3b4 <_strtol_l.isra.0+0x54>
   1a3ac:	2c30      	cmp	r4, #48	; 0x30
   1a3ae:	d063      	beq.n	1a478 <_strtol_l.isra.0+0x118>
   1a3b0:	270a      	movs	r7, #10
   1a3b2:	260a      	movs	r6, #10
   1a3b4:	4b35      	ldr	r3, [pc, #212]	; (1a48c <_strtol_l.isra.0+0x12c>)
   1a3b6:	0039      	movs	r1, r7
   1a3b8:	4443      	add	r3, r8
   1a3ba:	0018      	movs	r0, r3
   1a3bc:	4699      	mov	r9, r3
   1a3be:	f7fc f9c5 	bl	1674c <__aeabi_uidivmod>
   1a3c2:	4648      	mov	r0, r9
   1a3c4:	468b      	mov	fp, r1
   1a3c6:	0039      	movs	r1, r7
   1a3c8:	f7fc f93a 	bl	16640 <__udivsi3>
   1a3cc:	2200      	movs	r2, #0
   1a3ce:	0001      	movs	r1, r0
   1a3d0:	2000      	movs	r0, #0
   1a3d2:	0023      	movs	r3, r4
   1a3d4:	3b30      	subs	r3, #48	; 0x30
   1a3d6:	2b09      	cmp	r3, #9
   1a3d8:	d907      	bls.n	1a3ea <_strtol_l.isra.0+0x8a>
   1a3da:	3b11      	subs	r3, #17
   1a3dc:	2b19      	cmp	r3, #25
   1a3de:	d903      	bls.n	1a3e8 <_strtol_l.isra.0+0x88>
   1a3e0:	0023      	movs	r3, r4
   1a3e2:	3b61      	subs	r3, #97	; 0x61
   1a3e4:	2b19      	cmp	r3, #25
   1a3e6:	d80d      	bhi.n	1a404 <_strtol_l.isra.0+0xa4>
   1a3e8:	330a      	adds	r3, #10
   1a3ea:	429e      	cmp	r6, r3
   1a3ec:	dd0a      	ble.n	1a404 <_strtol_l.isra.0+0xa4>
   1a3ee:	1c54      	adds	r4, r2, #1
   1a3f0:	d005      	beq.n	1a3fe <_strtol_l.isra.0+0x9e>
   1a3f2:	4281      	cmp	r1, r0
   1a3f4:	d31d      	bcc.n	1a432 <_strtol_l.isra.0+0xd2>
   1a3f6:	d01a      	beq.n	1a42e <_strtol_l.isra.0+0xce>
   1a3f8:	2201      	movs	r2, #1
   1a3fa:	4378      	muls	r0, r7
   1a3fc:	1818      	adds	r0, r3, r0
   1a3fe:	782c      	ldrb	r4, [r5, #0]
   1a400:	3501      	adds	r5, #1
   1a402:	e7e6      	b.n	1a3d2 <_strtol_l.isra.0+0x72>
   1a404:	1c53      	adds	r3, r2, #1
   1a406:	d01c      	beq.n	1a442 <_strtol_l.isra.0+0xe2>
   1a408:	4643      	mov	r3, r8
   1a40a:	2b00      	cmp	r3, #0
   1a40c:	d000      	beq.n	1a410 <_strtol_l.isra.0+0xb0>
   1a40e:	4240      	negs	r0, r0
   1a410:	4653      	mov	r3, sl
   1a412:	2b00      	cmp	r3, #0
   1a414:	d004      	beq.n	1a420 <_strtol_l.isra.0+0xc0>
   1a416:	9b00      	ldr	r3, [sp, #0]
   1a418:	2a00      	cmp	r2, #0
   1a41a:	d11c      	bne.n	1a456 <_strtol_l.isra.0+0xf6>
   1a41c:	4652      	mov	r2, sl
   1a41e:	6013      	str	r3, [r2, #0]
   1a420:	b003      	add	sp, #12
   1a422:	bc3c      	pop	{r2, r3, r4, r5}
   1a424:	4690      	mov	r8, r2
   1a426:	4699      	mov	r9, r3
   1a428:	46a2      	mov	sl, r4
   1a42a:	46ab      	mov	fp, r5
   1a42c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1a42e:	459b      	cmp	fp, r3
   1a430:	dae2      	bge.n	1a3f8 <_strtol_l.isra.0+0x98>
   1a432:	2201      	movs	r2, #1
   1a434:	4252      	negs	r2, r2
   1a436:	e7e2      	b.n	1a3fe <_strtol_l.isra.0+0x9e>
   1a438:	2301      	movs	r3, #1
   1a43a:	782c      	ldrb	r4, [r5, #0]
   1a43c:	4698      	mov	r8, r3
   1a43e:	1cbd      	adds	r5, r7, #2
   1a440:	e7ae      	b.n	1a3a0 <_strtol_l.isra.0+0x40>
   1a442:	2322      	movs	r3, #34	; 0x22
   1a444:	9a01      	ldr	r2, [sp, #4]
   1a446:	4648      	mov	r0, r9
   1a448:	6013      	str	r3, [r2, #0]
   1a44a:	4653      	mov	r3, sl
   1a44c:	2b00      	cmp	r3, #0
   1a44e:	d0e7      	beq.n	1a420 <_strtol_l.isra.0+0xc0>
   1a450:	1e6b      	subs	r3, r5, #1
   1a452:	4648      	mov	r0, r9
   1a454:	e7e2      	b.n	1a41c <_strtol_l.isra.0+0xbc>
   1a456:	4681      	mov	r9, r0
   1a458:	e7fa      	b.n	1a450 <_strtol_l.isra.0+0xf0>
   1a45a:	782c      	ldrb	r4, [r5, #0]
   1a45c:	1cbd      	adds	r5, r7, #2
   1a45e:	e79f      	b.n	1a3a0 <_strtol_l.isra.0+0x40>
   1a460:	2c30      	cmp	r4, #48	; 0x30
   1a462:	d111      	bne.n	1a488 <_strtol_l.isra.0+0x128>
   1a464:	2220      	movs	r2, #32
   1a466:	782b      	ldrb	r3, [r5, #0]
   1a468:	4393      	bics	r3, r2
   1a46a:	2b58      	cmp	r3, #88	; 0x58
   1a46c:	d10c      	bne.n	1a488 <_strtol_l.isra.0+0x128>
   1a46e:	786c      	ldrb	r4, [r5, #1]
   1a470:	2710      	movs	r7, #16
   1a472:	3502      	adds	r5, #2
   1a474:	2610      	movs	r6, #16
   1a476:	e79d      	b.n	1a3b4 <_strtol_l.isra.0+0x54>
   1a478:	2220      	movs	r2, #32
   1a47a:	782b      	ldrb	r3, [r5, #0]
   1a47c:	4393      	bics	r3, r2
   1a47e:	2b58      	cmp	r3, #88	; 0x58
   1a480:	d0f5      	beq.n	1a46e <_strtol_l.isra.0+0x10e>
   1a482:	2708      	movs	r7, #8
   1a484:	2608      	movs	r6, #8
   1a486:	e795      	b.n	1a3b4 <_strtol_l.isra.0+0x54>
   1a488:	2710      	movs	r7, #16
   1a48a:	e793      	b.n	1a3b4 <_strtol_l.isra.0+0x54>
   1a48c:	7fffffff 	.word	0x7fffffff

0001a490 <strtol>:
   1a490:	0013      	movs	r3, r2
   1a492:	4a08      	ldr	r2, [pc, #32]	; (1a4b4 <strtol+0x24>)
   1a494:	b530      	push	{r4, r5, lr}
   1a496:	0005      	movs	r5, r0
   1a498:	6810      	ldr	r0, [r2, #0]
   1a49a:	b083      	sub	sp, #12
   1a49c:	6b44      	ldr	r4, [r0, #52]	; 0x34
   1a49e:	2c00      	cmp	r4, #0
   1a4a0:	d006      	beq.n	1a4b0 <strtol+0x20>
   1a4a2:	000a      	movs	r2, r1
   1a4a4:	9400      	str	r4, [sp, #0]
   1a4a6:	0029      	movs	r1, r5
   1a4a8:	f7ff ff5a 	bl	1a360 <_strtol_l.isra.0>
   1a4ac:	b003      	add	sp, #12
   1a4ae:	bd30      	pop	{r4, r5, pc}
   1a4b0:	4c01      	ldr	r4, [pc, #4]	; (1a4b8 <strtol+0x28>)
   1a4b2:	e7f6      	b.n	1a4a2 <strtol+0x12>
   1a4b4:	20000018 	.word	0x20000018
   1a4b8:	20000448 	.word	0x20000448

0001a4bc <_strtoul_l.isra.0>:
   1a4bc:	b5f0      	push	{r4, r5, r6, r7, lr}
   1a4be:	4657      	mov	r7, sl
   1a4c0:	464e      	mov	r6, r9
   1a4c2:	46de      	mov	lr, fp
   1a4c4:	4645      	mov	r5, r8
   1a4c6:	b5e0      	push	{r5, r6, r7, lr}
   1a4c8:	001e      	movs	r6, r3
   1a4ca:	2308      	movs	r3, #8
   1a4cc:	b083      	sub	sp, #12
   1a4ce:	4683      	mov	fp, r0
   1a4d0:	4689      	mov	r9, r1
   1a4d2:	4692      	mov	sl, r2
   1a4d4:	000f      	movs	r7, r1
   1a4d6:	4698      	mov	r8, r3
   1a4d8:	e000      	b.n	1a4dc <_strtoul_l.isra.0+0x20>
   1a4da:	002f      	movs	r7, r5
   1a4dc:	980c      	ldr	r0, [sp, #48]	; 0x30
   1a4de:	783c      	ldrb	r4, [r7, #0]
   1a4e0:	f7ff f94a 	bl	19778 <__locale_ctype_ptr_l>
   1a4e4:	4642      	mov	r2, r8
   1a4e6:	1900      	adds	r0, r0, r4
   1a4e8:	7843      	ldrb	r3, [r0, #1]
   1a4ea:	1c7d      	adds	r5, r7, #1
   1a4ec:	421a      	tst	r2, r3
   1a4ee:	d1f4      	bne.n	1a4da <_strtoul_l.isra.0+0x1e>
   1a4f0:	2c2d      	cmp	r4, #45	; 0x2d
   1a4f2:	d05b      	beq.n	1a5ac <_strtoul_l.isra.0+0xf0>
   1a4f4:	2300      	movs	r3, #0
   1a4f6:	9301      	str	r3, [sp, #4]
   1a4f8:	2c2b      	cmp	r4, #43	; 0x2b
   1a4fa:	d05c      	beq.n	1a5b6 <_strtoul_l.isra.0+0xfa>
   1a4fc:	2e00      	cmp	r6, #0
   1a4fe:	d00e      	beq.n	1a51e <_strtoul_l.isra.0+0x62>
   1a500:	2e10      	cmp	r6, #16
   1a502:	d05b      	beq.n	1a5bc <_strtoul_l.isra.0+0x100>
   1a504:	2001      	movs	r0, #1
   1a506:	0031      	movs	r1, r6
   1a508:	4240      	negs	r0, r0
   1a50a:	f7fc f899 	bl	16640 <__udivsi3>
   1a50e:	0007      	movs	r7, r0
   1a510:	2001      	movs	r0, #1
   1a512:	0031      	movs	r1, r6
   1a514:	4240      	negs	r0, r0
   1a516:	46b0      	mov	r8, r6
   1a518:	f7fc f918 	bl	1674c <__aeabi_uidivmod>
   1a51c:	e006      	b.n	1a52c <_strtoul_l.isra.0+0x70>
   1a51e:	2c30      	cmp	r4, #48	; 0x30
   1a520:	d05b      	beq.n	1a5da <_strtoul_l.isra.0+0x11e>
   1a522:	230a      	movs	r3, #10
   1a524:	2105      	movs	r1, #5
   1a526:	4698      	mov	r8, r3
   1a528:	260a      	movs	r6, #10
   1a52a:	4f34      	ldr	r7, [pc, #208]	; (1a5fc <_strtoul_l.isra.0+0x140>)
   1a52c:	2200      	movs	r2, #0
   1a52e:	2000      	movs	r0, #0
   1a530:	0023      	movs	r3, r4
   1a532:	3b30      	subs	r3, #48	; 0x30
   1a534:	2b09      	cmp	r3, #9
   1a536:	d907      	bls.n	1a548 <_strtoul_l.isra.0+0x8c>
   1a538:	3b11      	subs	r3, #17
   1a53a:	2b19      	cmp	r3, #25
   1a53c:	d903      	bls.n	1a546 <_strtoul_l.isra.0+0x8a>
   1a53e:	0023      	movs	r3, r4
   1a540:	3b61      	subs	r3, #97	; 0x61
   1a542:	2b19      	cmp	r3, #25
   1a544:	d80e      	bhi.n	1a564 <_strtoul_l.isra.0+0xa8>
   1a546:	330a      	adds	r3, #10
   1a548:	429e      	cmp	r6, r3
   1a54a:	dd0b      	ble.n	1a564 <_strtoul_l.isra.0+0xa8>
   1a54c:	2a00      	cmp	r2, #0
   1a54e:	db20      	blt.n	1a592 <_strtoul_l.isra.0+0xd6>
   1a550:	42b8      	cmp	r0, r7
   1a552:	d81e      	bhi.n	1a592 <_strtoul_l.isra.0+0xd6>
   1a554:	d01b      	beq.n	1a58e <_strtoul_l.isra.0+0xd2>
   1a556:	4642      	mov	r2, r8
   1a558:	4350      	muls	r0, r2
   1a55a:	2201      	movs	r2, #1
   1a55c:	1818      	adds	r0, r3, r0
   1a55e:	782c      	ldrb	r4, [r5, #0]
   1a560:	3501      	adds	r5, #1
   1a562:	e7e5      	b.n	1a530 <_strtoul_l.isra.0+0x74>
   1a564:	2a00      	cmp	r2, #0
   1a566:	db17      	blt.n	1a598 <_strtoul_l.isra.0+0xdc>
   1a568:	9b01      	ldr	r3, [sp, #4]
   1a56a:	2b00      	cmp	r3, #0
   1a56c:	d000      	beq.n	1a570 <_strtoul_l.isra.0+0xb4>
   1a56e:	4240      	negs	r0, r0
   1a570:	4653      	mov	r3, sl
   1a572:	2b00      	cmp	r3, #0
   1a574:	d004      	beq.n	1a580 <_strtoul_l.isra.0+0xc4>
   1a576:	464b      	mov	r3, r9
   1a578:	2a00      	cmp	r2, #0
   1a57a:	d115      	bne.n	1a5a8 <_strtoul_l.isra.0+0xec>
   1a57c:	4652      	mov	r2, sl
   1a57e:	6013      	str	r3, [r2, #0]
   1a580:	b003      	add	sp, #12
   1a582:	bc3c      	pop	{r2, r3, r4, r5}
   1a584:	4690      	mov	r8, r2
   1a586:	4699      	mov	r9, r3
   1a588:	46a2      	mov	sl, r4
   1a58a:	46ab      	mov	fp, r5
   1a58c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1a58e:	428b      	cmp	r3, r1
   1a590:	dde1      	ble.n	1a556 <_strtoul_l.isra.0+0x9a>
   1a592:	2201      	movs	r2, #1
   1a594:	4252      	negs	r2, r2
   1a596:	e7e2      	b.n	1a55e <_strtoul_l.isra.0+0xa2>
   1a598:	2322      	movs	r3, #34	; 0x22
   1a59a:	465a      	mov	r2, fp
   1a59c:	2001      	movs	r0, #1
   1a59e:	6013      	str	r3, [r2, #0]
   1a5a0:	4653      	mov	r3, sl
   1a5a2:	4240      	negs	r0, r0
   1a5a4:	2b00      	cmp	r3, #0
   1a5a6:	d0eb      	beq.n	1a580 <_strtoul_l.isra.0+0xc4>
   1a5a8:	1e6b      	subs	r3, r5, #1
   1a5aa:	e7e7      	b.n	1a57c <_strtoul_l.isra.0+0xc0>
   1a5ac:	2301      	movs	r3, #1
   1a5ae:	782c      	ldrb	r4, [r5, #0]
   1a5b0:	9301      	str	r3, [sp, #4]
   1a5b2:	1cbd      	adds	r5, r7, #2
   1a5b4:	e7a2      	b.n	1a4fc <_strtoul_l.isra.0+0x40>
   1a5b6:	782c      	ldrb	r4, [r5, #0]
   1a5b8:	1cbd      	adds	r5, r7, #2
   1a5ba:	e79f      	b.n	1a4fc <_strtoul_l.isra.0+0x40>
   1a5bc:	2c30      	cmp	r4, #48	; 0x30
   1a5be:	d117      	bne.n	1a5f0 <_strtoul_l.isra.0+0x134>
   1a5c0:	2220      	movs	r2, #32
   1a5c2:	782b      	ldrb	r3, [r5, #0]
   1a5c4:	4393      	bics	r3, r2
   1a5c6:	2b58      	cmp	r3, #88	; 0x58
   1a5c8:	d112      	bne.n	1a5f0 <_strtoul_l.isra.0+0x134>
   1a5ca:	2310      	movs	r3, #16
   1a5cc:	786c      	ldrb	r4, [r5, #1]
   1a5ce:	210f      	movs	r1, #15
   1a5d0:	3502      	adds	r5, #2
   1a5d2:	4f0b      	ldr	r7, [pc, #44]	; (1a600 <_strtoul_l.isra.0+0x144>)
   1a5d4:	4698      	mov	r8, r3
   1a5d6:	2610      	movs	r6, #16
   1a5d8:	e7a8      	b.n	1a52c <_strtoul_l.isra.0+0x70>
   1a5da:	2220      	movs	r2, #32
   1a5dc:	782b      	ldrb	r3, [r5, #0]
   1a5de:	4393      	bics	r3, r2
   1a5e0:	2b58      	cmp	r3, #88	; 0x58
   1a5e2:	d0f2      	beq.n	1a5ca <_strtoul_l.isra.0+0x10e>
   1a5e4:	2308      	movs	r3, #8
   1a5e6:	2107      	movs	r1, #7
   1a5e8:	4f06      	ldr	r7, [pc, #24]	; (1a604 <_strtoul_l.isra.0+0x148>)
   1a5ea:	4698      	mov	r8, r3
   1a5ec:	2608      	movs	r6, #8
   1a5ee:	e79d      	b.n	1a52c <_strtoul_l.isra.0+0x70>
   1a5f0:	2310      	movs	r3, #16
   1a5f2:	210f      	movs	r1, #15
   1a5f4:	4f02      	ldr	r7, [pc, #8]	; (1a600 <_strtoul_l.isra.0+0x144>)
   1a5f6:	4698      	mov	r8, r3
   1a5f8:	e798      	b.n	1a52c <_strtoul_l.isra.0+0x70>
   1a5fa:	46c0      	nop			; (mov r8, r8)
   1a5fc:	19999999 	.word	0x19999999
   1a600:	0fffffff 	.word	0x0fffffff
   1a604:	1fffffff 	.word	0x1fffffff

0001a608 <strtoul>:
   1a608:	0013      	movs	r3, r2
   1a60a:	4a08      	ldr	r2, [pc, #32]	; (1a62c <strtoul+0x24>)
   1a60c:	b530      	push	{r4, r5, lr}
   1a60e:	0005      	movs	r5, r0
   1a610:	6810      	ldr	r0, [r2, #0]
   1a612:	b083      	sub	sp, #12
   1a614:	6b44      	ldr	r4, [r0, #52]	; 0x34
   1a616:	2c00      	cmp	r4, #0
   1a618:	d006      	beq.n	1a628 <strtoul+0x20>
   1a61a:	000a      	movs	r2, r1
   1a61c:	9400      	str	r4, [sp, #0]
   1a61e:	0029      	movs	r1, r5
   1a620:	f7ff ff4c 	bl	1a4bc <_strtoul_l.isra.0>
   1a624:	b003      	add	sp, #12
   1a626:	bd30      	pop	{r4, r5, pc}
   1a628:	4c01      	ldr	r4, [pc, #4]	; (1a630 <strtoul+0x28>)
   1a62a:	e7f6      	b.n	1a61a <strtoul+0x12>
   1a62c:	20000018 	.word	0x20000018
   1a630:	20000448 	.word	0x20000448

0001a634 <__utoa>:
   1a634:	b5f0      	push	{r4, r5, r6, r7, lr}
   1a636:	4646      	mov	r6, r8
   1a638:	46d6      	mov	lr, sl
   1a63a:	464f      	mov	r7, r9
   1a63c:	b5c0      	push	{r6, r7, lr}
   1a63e:	b08a      	sub	sp, #40	; 0x28
   1a640:	4690      	mov	r8, r2
   1a642:	466a      	mov	r2, sp
   1a644:	4b1d      	ldr	r3, [pc, #116]	; (1a6bc <__utoa+0x88>)
   1a646:	000d      	movs	r5, r1
   1a648:	0006      	movs	r6, r0
   1a64a:	cb13      	ldmia	r3!, {r0, r1, r4}
   1a64c:	c213      	stmia	r2!, {r0, r1, r4}
   1a64e:	cb13      	ldmia	r3!, {r0, r1, r4}
   1a650:	c213      	stmia	r2!, {r0, r1, r4}
   1a652:	cb13      	ldmia	r3!, {r0, r1, r4}
   1a654:	c213      	stmia	r2!, {r0, r1, r4}
   1a656:	781b      	ldrb	r3, [r3, #0]
   1a658:	46ea      	mov	sl, sp
   1a65a:	7013      	strb	r3, [r2, #0]
   1a65c:	4643      	mov	r3, r8
   1a65e:	3b02      	subs	r3, #2
   1a660:	002f      	movs	r7, r5
   1a662:	2400      	movs	r4, #0
   1a664:	2b22      	cmp	r3, #34	; 0x22
   1a666:	d901      	bls.n	1a66c <__utoa+0x38>
   1a668:	e024      	b.n	1a6b4 <__utoa+0x80>
   1a66a:	464c      	mov	r4, r9
   1a66c:	1c63      	adds	r3, r4, #1
   1a66e:	0030      	movs	r0, r6
   1a670:	4641      	mov	r1, r8
   1a672:	4699      	mov	r9, r3
   1a674:	f7fc f86a 	bl	1674c <__aeabi_uidivmod>
   1a678:	4653      	mov	r3, sl
   1a67a:	5c5b      	ldrb	r3, [r3, r1]
   1a67c:	0030      	movs	r0, r6
   1a67e:	703b      	strb	r3, [r7, #0]
   1a680:	4641      	mov	r1, r8
   1a682:	f7fb ffdd 	bl	16640 <__udivsi3>
   1a686:	3701      	adds	r7, #1
   1a688:	1e06      	subs	r6, r0, #0
   1a68a:	d1ee      	bne.n	1a66a <__utoa+0x36>
   1a68c:	464b      	mov	r3, r9
   1a68e:	54e8      	strb	r0, [r5, r3]
   1a690:	2300      	movs	r3, #0
   1a692:	2c00      	cmp	r4, #0
   1a694:	d007      	beq.n	1a6a6 <__utoa+0x72>
   1a696:	5cea      	ldrb	r2, [r5, r3]
   1a698:	5d29      	ldrb	r1, [r5, r4]
   1a69a:	54e9      	strb	r1, [r5, r3]
   1a69c:	552a      	strb	r2, [r5, r4]
   1a69e:	3301      	adds	r3, #1
   1a6a0:	3c01      	subs	r4, #1
   1a6a2:	42a3      	cmp	r3, r4
   1a6a4:	dbf7      	blt.n	1a696 <__utoa+0x62>
   1a6a6:	0028      	movs	r0, r5
   1a6a8:	b00a      	add	sp, #40	; 0x28
   1a6aa:	bc1c      	pop	{r2, r3, r4}
   1a6ac:	4690      	mov	r8, r2
   1a6ae:	4699      	mov	r9, r3
   1a6b0:	46a2      	mov	sl, r4
   1a6b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1a6b4:	702c      	strb	r4, [r5, #0]
   1a6b6:	2000      	movs	r0, #0
   1a6b8:	e7f6      	b.n	1a6a8 <__utoa+0x74>
   1a6ba:	46c0      	nop			; (mov r8, r8)
   1a6bc:	0002058c 	.word	0x0002058c

0001a6c0 <utoa>:
   1a6c0:	b510      	push	{r4, lr}
   1a6c2:	f7ff ffb7 	bl	1a634 <__utoa>
   1a6c6:	bd10      	pop	{r4, pc}

0001a6c8 <_vfprintf_r>:
   1a6c8:	b5f0      	push	{r4, r5, r6, r7, lr}
   1a6ca:	46de      	mov	lr, fp
   1a6cc:	464e      	mov	r6, r9
   1a6ce:	4645      	mov	r5, r8
   1a6d0:	4657      	mov	r7, sl
   1a6d2:	b5e0      	push	{r5, r6, r7, lr}
   1a6d4:	b0c3      	sub	sp, #268	; 0x10c
   1a6d6:	4689      	mov	r9, r1
   1a6d8:	0014      	movs	r4, r2
   1a6da:	001d      	movs	r5, r3
   1a6dc:	930f      	str	r3, [sp, #60]	; 0x3c
   1a6de:	0006      	movs	r6, r0
   1a6e0:	9006      	str	r0, [sp, #24]
   1a6e2:	f003 f8cd 	bl	1d880 <_localeconv_r>
   1a6e6:	6803      	ldr	r3, [r0, #0]
   1a6e8:	0018      	movs	r0, r3
   1a6ea:	9318      	str	r3, [sp, #96]	; 0x60
   1a6ec:	f7ff fe06 	bl	1a2fc <strlen>
   1a6f0:	9017      	str	r0, [sp, #92]	; 0x5c
   1a6f2:	2e00      	cmp	r6, #0
   1a6f4:	d004      	beq.n	1a700 <_vfprintf_r+0x38>
   1a6f6:	6bb3      	ldr	r3, [r6, #56]	; 0x38
   1a6f8:	9307      	str	r3, [sp, #28]
   1a6fa:	2b00      	cmp	r3, #0
   1a6fc:	d100      	bne.n	1a700 <_vfprintf_r+0x38>
   1a6fe:	e0a7      	b.n	1a850 <_vfprintf_r+0x188>
   1a700:	464b      	mov	r3, r9
   1a702:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   1a704:	07db      	lsls	r3, r3, #31
   1a706:	d478      	bmi.n	1a7fa <_vfprintf_r+0x132>
   1a708:	464b      	mov	r3, r9
   1a70a:	210c      	movs	r1, #12
   1a70c:	5e59      	ldrsh	r1, [r3, r1]
   1a70e:	b28b      	uxth	r3, r1
   1a710:	059a      	lsls	r2, r3, #22
   1a712:	d56e      	bpl.n	1a7f2 <_vfprintf_r+0x12a>
   1a714:	2280      	movs	r2, #128	; 0x80
   1a716:	0192      	lsls	r2, r2, #6
   1a718:	4213      	tst	r3, r2
   1a71a:	d109      	bne.n	1a730 <_vfprintf_r+0x68>
   1a71c:	430a      	orrs	r2, r1
   1a71e:	464b      	mov	r3, r9
   1a720:	4649      	mov	r1, r9
   1a722:	819a      	strh	r2, [r3, #12]
   1a724:	6e49      	ldr	r1, [r1, #100]	; 0x64
   1a726:	4bcc      	ldr	r3, [pc, #816]	; (1aa58 <_vfprintf_r+0x390>)
   1a728:	400b      	ands	r3, r1
   1a72a:	4649      	mov	r1, r9
   1a72c:	664b      	str	r3, [r1, #100]	; 0x64
   1a72e:	b293      	uxth	r3, r2
   1a730:	071a      	lsls	r2, r3, #28
   1a732:	d567      	bpl.n	1a804 <_vfprintf_r+0x13c>
   1a734:	464a      	mov	r2, r9
   1a736:	6912      	ldr	r2, [r2, #16]
   1a738:	2a00      	cmp	r2, #0
   1a73a:	d063      	beq.n	1a804 <_vfprintf_r+0x13c>
   1a73c:	221a      	movs	r2, #26
   1a73e:	401a      	ands	r2, r3
   1a740:	2a0a      	cmp	r2, #10
   1a742:	d100      	bne.n	1a746 <_vfprintf_r+0x7e>
   1a744:	e088      	b.n	1a858 <_vfprintf_r+0x190>
   1a746:	ab32      	add	r3, sp, #200	; 0xc8
   1a748:	9325      	str	r3, [sp, #148]	; 0x94
   1a74a:	2300      	movs	r3, #0
   1a74c:	46cb      	mov	fp, r9
   1a74e:	af25      	add	r7, sp, #148	; 0x94
   1a750:	60bb      	str	r3, [r7, #8]
   1a752:	607b      	str	r3, [r7, #4]
   1a754:	9407      	str	r4, [sp, #28]
   1a756:	9314      	str	r3, [sp, #80]	; 0x50
   1a758:	9316      	str	r3, [sp, #88]	; 0x58
   1a75a:	9315      	str	r3, [sp, #84]	; 0x54
   1a75c:	ae32      	add	r6, sp, #200	; 0xc8
   1a75e:	9319      	str	r3, [sp, #100]	; 0x64
   1a760:	931a      	str	r3, [sp, #104]	; 0x68
   1a762:	930a      	str	r3, [sp, #40]	; 0x28
   1a764:	9c07      	ldr	r4, [sp, #28]
   1a766:	7823      	ldrb	r3, [r4, #0]
   1a768:	2b00      	cmp	r3, #0
   1a76a:	d101      	bne.n	1a770 <_vfprintf_r+0xa8>
   1a76c:	f000 fd9e 	bl	1b2ac <_vfprintf_r+0xbe4>
   1a770:	2b25      	cmp	r3, #37	; 0x25
   1a772:	d103      	bne.n	1a77c <_vfprintf_r+0xb4>
   1a774:	f000 fd9a 	bl	1b2ac <_vfprintf_r+0xbe4>
   1a778:	2b25      	cmp	r3, #37	; 0x25
   1a77a:	d003      	beq.n	1a784 <_vfprintf_r+0xbc>
   1a77c:	3401      	adds	r4, #1
   1a77e:	7823      	ldrb	r3, [r4, #0]
   1a780:	2b00      	cmp	r3, #0
   1a782:	d1f9      	bne.n	1a778 <_vfprintf_r+0xb0>
   1a784:	9b07      	ldr	r3, [sp, #28]
   1a786:	1ae5      	subs	r5, r4, r3
   1a788:	d010      	beq.n	1a7ac <_vfprintf_r+0xe4>
   1a78a:	9b07      	ldr	r3, [sp, #28]
   1a78c:	6075      	str	r5, [r6, #4]
   1a78e:	6033      	str	r3, [r6, #0]
   1a790:	68bb      	ldr	r3, [r7, #8]
   1a792:	195b      	adds	r3, r3, r5
   1a794:	60bb      	str	r3, [r7, #8]
   1a796:	687b      	ldr	r3, [r7, #4]
   1a798:	3301      	adds	r3, #1
   1a79a:	607b      	str	r3, [r7, #4]
   1a79c:	2b07      	cmp	r3, #7
   1a79e:	dc4c      	bgt.n	1a83a <_vfprintf_r+0x172>
   1a7a0:	3608      	adds	r6, #8
   1a7a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1a7a4:	469c      	mov	ip, r3
   1a7a6:	44ac      	add	ip, r5
   1a7a8:	4663      	mov	r3, ip
   1a7aa:	930a      	str	r3, [sp, #40]	; 0x28
   1a7ac:	7823      	ldrb	r3, [r4, #0]
   1a7ae:	2b00      	cmp	r3, #0
   1a7b0:	d101      	bne.n	1a7b6 <_vfprintf_r+0xee>
   1a7b2:	f000 fc99 	bl	1b0e8 <_vfprintf_r+0xa20>
   1a7b6:	1c63      	adds	r3, r4, #1
   1a7b8:	9307      	str	r3, [sp, #28]
   1a7ba:	2300      	movs	r3, #0
   1a7bc:	aa16      	add	r2, sp, #88	; 0x58
   1a7be:	77d3      	strb	r3, [r2, #31]
   1a7c0:	2201      	movs	r2, #1
   1a7c2:	4252      	negs	r2, r2
   1a7c4:	4692      	mov	sl, r2
   1a7c6:	2200      	movs	r2, #0
   1a7c8:	920b      	str	r2, [sp, #44]	; 0x2c
   1a7ca:	3220      	adds	r2, #32
   1a7cc:	4691      	mov	r9, r2
   1a7ce:	3220      	adds	r2, #32
   1a7d0:	7863      	ldrb	r3, [r4, #1]
   1a7d2:	2100      	movs	r1, #0
   1a7d4:	2000      	movs	r0, #0
   1a7d6:	2400      	movs	r4, #0
   1a7d8:	4694      	mov	ip, r2
   1a7da:	9a07      	ldr	r2, [sp, #28]
   1a7dc:	3201      	adds	r2, #1
   1a7de:	9207      	str	r2, [sp, #28]
   1a7e0:	001a      	movs	r2, r3
   1a7e2:	3a20      	subs	r2, #32
   1a7e4:	2a58      	cmp	r2, #88	; 0x58
   1a7e6:	d900      	bls.n	1a7ea <_vfprintf_r+0x122>
   1a7e8:	e2e7      	b.n	1adba <_vfprintf_r+0x6f2>
   1a7ea:	4d9c      	ldr	r5, [pc, #624]	; (1aa5c <_vfprintf_r+0x394>)
   1a7ec:	0092      	lsls	r2, r2, #2
   1a7ee:	58aa      	ldr	r2, [r5, r2]
   1a7f0:	4697      	mov	pc, r2
   1a7f2:	464b      	mov	r3, r9
   1a7f4:	6d98      	ldr	r0, [r3, #88]	; 0x58
   1a7f6:	f003 f855 	bl	1d8a4 <__retarget_lock_acquire_recursive>
   1a7fa:	464b      	mov	r3, r9
   1a7fc:	210c      	movs	r1, #12
   1a7fe:	5e59      	ldrsh	r1, [r3, r1]
   1a800:	b28b      	uxth	r3, r1
   1a802:	e787      	b.n	1a714 <_vfprintf_r+0x4c>
   1a804:	4649      	mov	r1, r9
   1a806:	9806      	ldr	r0, [sp, #24]
   1a808:	f001 fb1c 	bl	1be44 <__swsetup_r>
   1a80c:	464b      	mov	r3, r9
   1a80e:	2800      	cmp	r0, #0
   1a810:	d03a      	beq.n	1a888 <_vfprintf_r+0x1c0>
   1a812:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   1a814:	07db      	lsls	r3, r3, #31
   1a816:	d405      	bmi.n	1a824 <_vfprintf_r+0x15c>
   1a818:	464b      	mov	r3, r9
   1a81a:	899b      	ldrh	r3, [r3, #12]
   1a81c:	059b      	lsls	r3, r3, #22
   1a81e:	d401      	bmi.n	1a824 <_vfprintf_r+0x15c>
   1a820:	f000 ffcf 	bl	1b7c2 <_vfprintf_r+0x10fa>
   1a824:	2301      	movs	r3, #1
   1a826:	425b      	negs	r3, r3
   1a828:	930a      	str	r3, [sp, #40]	; 0x28
   1a82a:	980a      	ldr	r0, [sp, #40]	; 0x28
   1a82c:	b043      	add	sp, #268	; 0x10c
   1a82e:	bc3c      	pop	{r2, r3, r4, r5}
   1a830:	4690      	mov	r8, r2
   1a832:	4699      	mov	r9, r3
   1a834:	46a2      	mov	sl, r4
   1a836:	46ab      	mov	fp, r5
   1a838:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1a83a:	003a      	movs	r2, r7
   1a83c:	4659      	mov	r1, fp
   1a83e:	9806      	ldr	r0, [sp, #24]
   1a840:	f003 fe82 	bl	1e548 <__sprint_r>
   1a844:	2800      	cmp	r0, #0
   1a846:	d001      	beq.n	1a84c <_vfprintf_r+0x184>
   1a848:	f000 fcce 	bl	1b1e8 <_vfprintf_r+0xb20>
   1a84c:	ae32      	add	r6, sp, #200	; 0xc8
   1a84e:	e7a8      	b.n	1a7a2 <_vfprintf_r+0xda>
   1a850:	9806      	ldr	r0, [sp, #24]
   1a852:	f002 fce5 	bl	1d220 <__sinit>
   1a856:	e753      	b.n	1a700 <_vfprintf_r+0x38>
   1a858:	464a      	mov	r2, r9
   1a85a:	210e      	movs	r1, #14
   1a85c:	5e52      	ldrsh	r2, [r2, r1]
   1a85e:	2a00      	cmp	r2, #0
   1a860:	da00      	bge.n	1a864 <_vfprintf_r+0x19c>
   1a862:	e770      	b.n	1a746 <_vfprintf_r+0x7e>
   1a864:	464a      	mov	r2, r9
   1a866:	6e52      	ldr	r2, [r2, #100]	; 0x64
   1a868:	07d2      	lsls	r2, r2, #31
   1a86a:	d405      	bmi.n	1a878 <_vfprintf_r+0x1b0>
   1a86c:	059b      	lsls	r3, r3, #22
   1a86e:	d403      	bmi.n	1a878 <_vfprintf_r+0x1b0>
   1a870:	464b      	mov	r3, r9
   1a872:	6d98      	ldr	r0, [r3, #88]	; 0x58
   1a874:	f003 f818 	bl	1d8a8 <__retarget_lock_release_recursive>
   1a878:	002b      	movs	r3, r5
   1a87a:	0022      	movs	r2, r4
   1a87c:	4649      	mov	r1, r9
   1a87e:	9806      	ldr	r0, [sp, #24]
   1a880:	f001 fa8e 	bl	1bda0 <__sbprintf>
   1a884:	900a      	str	r0, [sp, #40]	; 0x28
   1a886:	e7d0      	b.n	1a82a <_vfprintf_r+0x162>
   1a888:	899b      	ldrh	r3, [r3, #12]
   1a88a:	e757      	b.n	1a73c <_vfprintf_r+0x74>
   1a88c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1a88e:	920f      	str	r2, [sp, #60]	; 0x3c
   1a890:	425b      	negs	r3, r3
   1a892:	930b      	str	r3, [sp, #44]	; 0x2c
   1a894:	2304      	movs	r3, #4
   1a896:	431c      	orrs	r4, r3
   1a898:	9b07      	ldr	r3, [sp, #28]
   1a89a:	781b      	ldrb	r3, [r3, #0]
   1a89c:	e79d      	b.n	1a7da <_vfprintf_r+0x112>
   1a89e:	9b07      	ldr	r3, [sp, #28]
   1a8a0:	2101      	movs	r1, #1
   1a8a2:	781b      	ldrb	r3, [r3, #0]
   1a8a4:	202b      	movs	r0, #43	; 0x2b
   1a8a6:	e798      	b.n	1a7da <_vfprintf_r+0x112>
   1a8a8:	9b07      	ldr	r3, [sp, #28]
   1a8aa:	1c5a      	adds	r2, r3, #1
   1a8ac:	781b      	ldrb	r3, [r3, #0]
   1a8ae:	4690      	mov	r8, r2
   1a8b0:	2b2a      	cmp	r3, #42	; 0x2a
   1a8b2:	d101      	bne.n	1a8b8 <_vfprintf_r+0x1f0>
   1a8b4:	f001 fa38 	bl	1bd28 <_vfprintf_r+0x1660>
   1a8b8:	001a      	movs	r2, r3
   1a8ba:	2500      	movs	r5, #0
   1a8bc:	3a30      	subs	r2, #48	; 0x30
   1a8be:	46aa      	mov	sl, r5
   1a8c0:	2a09      	cmp	r2, #9
   1a8c2:	d901      	bls.n	1a8c8 <_vfprintf_r+0x200>
   1a8c4:	f001 f96d 	bl	1bba2 <_vfprintf_r+0x14da>
   1a8c8:	0025      	movs	r5, r4
   1a8ca:	4643      	mov	r3, r8
   1a8cc:	4654      	mov	r4, sl
   1a8ce:	4688      	mov	r8, r1
   1a8d0:	4682      	mov	sl, r0
   1a8d2:	00a1      	lsls	r1, r4, #2
   1a8d4:	190c      	adds	r4, r1, r4
   1a8d6:	7818      	ldrb	r0, [r3, #0]
   1a8d8:	0064      	lsls	r4, r4, #1
   1a8da:	18a4      	adds	r4, r4, r2
   1a8dc:	0002      	movs	r2, r0
   1a8de:	1c59      	adds	r1, r3, #1
   1a8e0:	3a30      	subs	r2, #48	; 0x30
   1a8e2:	000b      	movs	r3, r1
   1a8e4:	2a09      	cmp	r2, #9
   1a8e6:	d9f4      	bls.n	1a8d2 <_vfprintf_r+0x20a>
   1a8e8:	9107      	str	r1, [sp, #28]
   1a8ea:	0003      	movs	r3, r0
   1a8ec:	4641      	mov	r1, r8
   1a8ee:	4650      	mov	r0, sl
   1a8f0:	46a2      	mov	sl, r4
   1a8f2:	002c      	movs	r4, r5
   1a8f4:	e774      	b.n	1a7e0 <_vfprintf_r+0x118>
   1a8f6:	9312      	str	r3, [sp, #72]	; 0x48
   1a8f8:	2900      	cmp	r1, #0
   1a8fa:	d001      	beq.n	1a900 <_vfprintf_r+0x238>
   1a8fc:	f001 fa2e 	bl	1bd5c <_vfprintf_r+0x1694>
   1a900:	4b57      	ldr	r3, [pc, #348]	; (1aa60 <_vfprintf_r+0x398>)
   1a902:	9319      	str	r3, [sp, #100]	; 0x64
   1a904:	06a3      	lsls	r3, r4, #26
   1a906:	d501      	bpl.n	1a90c <_vfprintf_r+0x244>
   1a908:	f000 fe9a 	bl	1b640 <_vfprintf_r+0xf78>
   1a90c:	06e3      	lsls	r3, r4, #27
   1a90e:	d501      	bpl.n	1a914 <_vfprintf_r+0x24c>
   1a910:	f000 fd9a 	bl	1b448 <_vfprintf_r+0xd80>
   1a914:	0663      	lsls	r3, r4, #25
   1a916:	d401      	bmi.n	1a91c <_vfprintf_r+0x254>
   1a918:	f000 fd96 	bl	1b448 <_vfprintf_r+0xd80>
   1a91c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1a91e:	881a      	ldrh	r2, [r3, #0]
   1a920:	920c      	str	r2, [sp, #48]	; 0x30
   1a922:	2200      	movs	r2, #0
   1a924:	3304      	adds	r3, #4
   1a926:	920d      	str	r2, [sp, #52]	; 0x34
   1a928:	930f      	str	r3, [sp, #60]	; 0x3c
   1a92a:	07e3      	lsls	r3, r4, #31
   1a92c:	d401      	bmi.n	1a932 <_vfprintf_r+0x26a>
   1a92e:	f000 fd76 	bl	1b41e <_vfprintf_r+0xd56>
   1a932:	990c      	ldr	r1, [sp, #48]	; 0x30
   1a934:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   1a936:	000b      	movs	r3, r1
   1a938:	4313      	orrs	r3, r2
   1a93a:	001a      	movs	r2, r3
   1a93c:	2302      	movs	r3, #2
   1a93e:	2a00      	cmp	r2, #0
   1a940:	d008      	beq.n	1a954 <_vfprintf_r+0x28c>
   1a942:	2030      	movs	r0, #48	; 0x30
   1a944:	a91e      	add	r1, sp, #120	; 0x78
   1a946:	7008      	strb	r0, [r1, #0]
   1a948:	2548      	movs	r5, #72	; 0x48
   1a94a:	4668      	mov	r0, sp
   1a94c:	1940      	adds	r0, r0, r5
   1a94e:	7800      	ldrb	r0, [r0, #0]
   1a950:	431c      	orrs	r4, r3
   1a952:	7048      	strb	r0, [r1, #1]
   1a954:	2100      	movs	r1, #0
   1a956:	4688      	mov	r8, r1
   1a958:	a816      	add	r0, sp, #88	; 0x58
   1a95a:	77c1      	strb	r1, [r0, #31]
   1a95c:	4651      	mov	r1, sl
   1a95e:	3101      	adds	r1, #1
   1a960:	d100      	bne.n	1a964 <_vfprintf_r+0x29c>
   1a962:	e0e6      	b.n	1ab32 <_vfprintf_r+0x46a>
   1a964:	2180      	movs	r1, #128	; 0x80
   1a966:	0020      	movs	r0, r4
   1a968:	4388      	bics	r0, r1
   1a96a:	9009      	str	r0, [sp, #36]	; 0x24
   1a96c:	2a00      	cmp	r2, #0
   1a96e:	d000      	beq.n	1a972 <_vfprintf_r+0x2aa>
   1a970:	e0e3      	b.n	1ab3a <_vfprintf_r+0x472>
   1a972:	4652      	mov	r2, sl
   1a974:	2a00      	cmp	r2, #0
   1a976:	d001      	beq.n	1a97c <_vfprintf_r+0x2b4>
   1a978:	f000 fc38 	bl	1b1ec <_vfprintf_r+0xb24>
   1a97c:	2b00      	cmp	r3, #0
   1a97e:	d001      	beq.n	1a984 <_vfprintf_r+0x2bc>
   1a980:	f000 fd0c 	bl	1b39c <_vfprintf_r+0xcd4>
   1a984:	2001      	movs	r0, #1
   1a986:	ab32      	add	r3, sp, #200	; 0xc8
   1a988:	4020      	ands	r0, r4
   1a98a:	900e      	str	r0, [sp, #56]	; 0x38
   1a98c:	9311      	str	r3, [sp, #68]	; 0x44
   1a98e:	d008      	beq.n	1a9a2 <_vfprintf_r+0x2da>
   1a990:	2327      	movs	r3, #39	; 0x27
   1a992:	2130      	movs	r1, #48	; 0x30
   1a994:	aa28      	add	r2, sp, #160	; 0xa0
   1a996:	54d1      	strb	r1, [r2, r3]
   1a998:	aa16      	add	r2, sp, #88	; 0x58
   1a99a:	4694      	mov	ip, r2
   1a99c:	3348      	adds	r3, #72	; 0x48
   1a99e:	4463      	add	r3, ip
   1a9a0:	9311      	str	r3, [sp, #68]	; 0x44
   1a9a2:	4653      	mov	r3, sl
   1a9a4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   1a9a6:	9308      	str	r3, [sp, #32]
   1a9a8:	4592      	cmp	sl, r2
   1a9aa:	da00      	bge.n	1a9ae <_vfprintf_r+0x2e6>
   1a9ac:	9208      	str	r2, [sp, #32]
   1a9ae:	2300      	movs	r3, #0
   1a9b0:	9313      	str	r3, [sp, #76]	; 0x4c
   1a9b2:	4643      	mov	r3, r8
   1a9b4:	2b00      	cmp	r3, #0
   1a9b6:	d002      	beq.n	1a9be <_vfprintf_r+0x2f6>
   1a9b8:	9b08      	ldr	r3, [sp, #32]
   1a9ba:	3301      	adds	r3, #1
   1a9bc:	9308      	str	r3, [sp, #32]
   1a9be:	2302      	movs	r3, #2
   1a9c0:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1a9c2:	401a      	ands	r2, r3
   1a9c4:	4691      	mov	r9, r2
   1a9c6:	d002      	beq.n	1a9ce <_vfprintf_r+0x306>
   1a9c8:	9b08      	ldr	r3, [sp, #32]
   1a9ca:	3302      	adds	r3, #2
   1a9cc:	9308      	str	r3, [sp, #32]
   1a9ce:	2384      	movs	r3, #132	; 0x84
   1a9d0:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1a9d2:	401a      	ands	r2, r3
   1a9d4:	9210      	str	r2, [sp, #64]	; 0x40
   1a9d6:	d000      	beq.n	1a9da <_vfprintf_r+0x312>
   1a9d8:	e207      	b.n	1adea <_vfprintf_r+0x722>
   1a9da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1a9dc:	9a08      	ldr	r2, [sp, #32]
   1a9de:	1a9c      	subs	r4, r3, r2
   1a9e0:	2c00      	cmp	r4, #0
   1a9e2:	dc00      	bgt.n	1a9e6 <_vfprintf_r+0x31e>
   1a9e4:	e201      	b.n	1adea <_vfprintf_r+0x722>
   1a9e6:	491f      	ldr	r1, [pc, #124]	; (1aa64 <_vfprintf_r+0x39c>)
   1a9e8:	68ba      	ldr	r2, [r7, #8]
   1a9ea:	687b      	ldr	r3, [r7, #4]
   1a9ec:	4688      	mov	r8, r1
   1a9ee:	2c10      	cmp	r4, #16
   1a9f0:	dd21      	ble.n	1aa36 <_vfprintf_r+0x36e>
   1a9f2:	0031      	movs	r1, r6
   1a9f4:	2510      	movs	r5, #16
   1a9f6:	465e      	mov	r6, fp
   1a9f8:	e003      	b.n	1aa02 <_vfprintf_r+0x33a>
   1a9fa:	3c10      	subs	r4, #16
   1a9fc:	3108      	adds	r1, #8
   1a9fe:	2c10      	cmp	r4, #16
   1aa00:	dd17      	ble.n	1aa32 <_vfprintf_r+0x36a>
   1aa02:	4640      	mov	r0, r8
   1aa04:	3210      	adds	r2, #16
   1aa06:	3301      	adds	r3, #1
   1aa08:	6008      	str	r0, [r1, #0]
   1aa0a:	604d      	str	r5, [r1, #4]
   1aa0c:	60ba      	str	r2, [r7, #8]
   1aa0e:	607b      	str	r3, [r7, #4]
   1aa10:	2b07      	cmp	r3, #7
   1aa12:	ddf2      	ble.n	1a9fa <_vfprintf_r+0x332>
   1aa14:	003a      	movs	r2, r7
   1aa16:	0031      	movs	r1, r6
   1aa18:	9806      	ldr	r0, [sp, #24]
   1aa1a:	f003 fd95 	bl	1e548 <__sprint_r>
   1aa1e:	2800      	cmp	r0, #0
   1aa20:	d001      	beq.n	1aa26 <_vfprintf_r+0x35e>
   1aa22:	f000 fccf 	bl	1b3c4 <_vfprintf_r+0xcfc>
   1aa26:	3c10      	subs	r4, #16
   1aa28:	68ba      	ldr	r2, [r7, #8]
   1aa2a:	687b      	ldr	r3, [r7, #4]
   1aa2c:	a932      	add	r1, sp, #200	; 0xc8
   1aa2e:	2c10      	cmp	r4, #16
   1aa30:	dce7      	bgt.n	1aa02 <_vfprintf_r+0x33a>
   1aa32:	46b3      	mov	fp, r6
   1aa34:	000e      	movs	r6, r1
   1aa36:	4641      	mov	r1, r8
   1aa38:	6074      	str	r4, [r6, #4]
   1aa3a:	3301      	adds	r3, #1
   1aa3c:	18a4      	adds	r4, r4, r2
   1aa3e:	6031      	str	r1, [r6, #0]
   1aa40:	60bc      	str	r4, [r7, #8]
   1aa42:	607b      	str	r3, [r7, #4]
   1aa44:	2b07      	cmp	r3, #7
   1aa46:	dd01      	ble.n	1aa4c <_vfprintf_r+0x384>
   1aa48:	f000 fcae 	bl	1b3a8 <_vfprintf_r+0xce0>
   1aa4c:	ab16      	add	r3, sp, #88	; 0x58
   1aa4e:	7fdb      	ldrb	r3, [r3, #31]
   1aa50:	3608      	adds	r6, #8
   1aa52:	4698      	mov	r8, r3
   1aa54:	e1ca      	b.n	1adec <_vfprintf_r+0x724>
   1aa56:	46c0      	nop			; (mov r8, r8)
   1aa58:	ffffdfff 	.word	0xffffdfff
   1aa5c:	000205b4 	.word	0x000205b4
   1aa60:	0002073c 	.word	0x0002073c
   1aa64:	00020758 	.word	0x00020758
   1aa68:	2200      	movs	r2, #0
   1aa6a:	9d07      	ldr	r5, [sp, #28]
   1aa6c:	3b30      	subs	r3, #48	; 0x30
   1aa6e:	46a8      	mov	r8, r5
   1aa70:	920b      	str	r2, [sp, #44]	; 0x2c
   1aa72:	001a      	movs	r2, r3
   1aa74:	9408      	str	r4, [sp, #32]
   1aa76:	002c      	movs	r4, r5
   1aa78:	4655      	mov	r5, sl
   1aa7a:	4682      	mov	sl, r0
   1aa7c:	4640      	mov	r0, r8
   1aa7e:	4688      	mov	r8, r1
   1aa80:	0011      	movs	r1, r2
   1aa82:	2200      	movs	r2, #0
   1aa84:	0093      	lsls	r3, r2, #2
   1aa86:	189a      	adds	r2, r3, r2
   1aa88:	7803      	ldrb	r3, [r0, #0]
   1aa8a:	0052      	lsls	r2, r2, #1
   1aa8c:	188a      	adds	r2, r1, r2
   1aa8e:	0019      	movs	r1, r3
   1aa90:	3401      	adds	r4, #1
   1aa92:	3930      	subs	r1, #48	; 0x30
   1aa94:	0020      	movs	r0, r4
   1aa96:	2909      	cmp	r1, #9
   1aa98:	d9f4      	bls.n	1aa84 <_vfprintf_r+0x3bc>
   1aa9a:	9407      	str	r4, [sp, #28]
   1aa9c:	4650      	mov	r0, sl
   1aa9e:	9c08      	ldr	r4, [sp, #32]
   1aaa0:	920b      	str	r2, [sp, #44]	; 0x2c
   1aaa2:	4641      	mov	r1, r8
   1aaa4:	46aa      	mov	sl, r5
   1aaa6:	e69b      	b.n	1a7e0 <_vfprintf_r+0x118>
   1aaa8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   1aaaa:	9312      	str	r3, [sp, #72]	; 0x48
   1aaac:	6813      	ldr	r3, [r2, #0]
   1aaae:	2120      	movs	r1, #32
   1aab0:	9308      	str	r3, [sp, #32]
   1aab2:	466b      	mov	r3, sp
   1aab4:	185b      	adds	r3, r3, r1
   1aab6:	781b      	ldrb	r3, [r3, #0]
   1aab8:	ad28      	add	r5, sp, #160	; 0xa0
   1aaba:	702b      	strb	r3, [r5, #0]
   1aabc:	2300      	movs	r3, #0
   1aabe:	a916      	add	r1, sp, #88	; 0x58
   1aac0:	77cb      	strb	r3, [r1, #31]
   1aac2:	0013      	movs	r3, r2
   1aac4:	3304      	adds	r3, #4
   1aac6:	930f      	str	r3, [sp, #60]	; 0x3c
   1aac8:	2300      	movs	r3, #0
   1aaca:	9409      	str	r4, [sp, #36]	; 0x24
   1aacc:	4698      	mov	r8, r3
   1aace:	3301      	adds	r3, #1
   1aad0:	9308      	str	r3, [sp, #32]
   1aad2:	930e      	str	r3, [sp, #56]	; 0x38
   1aad4:	2300      	movs	r3, #0
   1aad6:	9511      	str	r5, [sp, #68]	; 0x44
   1aad8:	469a      	mov	sl, r3
   1aada:	9313      	str	r3, [sp, #76]	; 0x4c
   1aadc:	e76f      	b.n	1a9be <_vfprintf_r+0x2f6>
   1aade:	9312      	str	r3, [sp, #72]	; 0x48
   1aae0:	2900      	cmp	r1, #0
   1aae2:	d001      	beq.n	1aae8 <_vfprintf_r+0x420>
   1aae4:	f001 f94d 	bl	1bd82 <_vfprintf_r+0x16ba>
   1aae8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   1aaea:	06a3      	lsls	r3, r4, #26
   1aaec:	d501      	bpl.n	1aaf2 <_vfprintf_r+0x42a>
   1aaee:	f000 fd5a 	bl	1b5a6 <_vfprintf_r+0xede>
   1aaf2:	06e3      	lsls	r3, r4, #27
   1aaf4:	d501      	bpl.n	1aafa <_vfprintf_r+0x432>
   1aaf6:	f000 fcab 	bl	1b450 <_vfprintf_r+0xd88>
   1aafa:	0663      	lsls	r3, r4, #25
   1aafc:	d401      	bmi.n	1ab02 <_vfprintf_r+0x43a>
   1aafe:	f000 fca7 	bl	1b450 <_vfprintf_r+0xd88>
   1ab02:	2100      	movs	r1, #0
   1ab04:	5e53      	ldrsh	r3, [r2, r1]
   1ab06:	930c      	str	r3, [sp, #48]	; 0x30
   1ab08:	3204      	adds	r2, #4
   1ab0a:	17db      	asrs	r3, r3, #31
   1ab0c:	930d      	str	r3, [sp, #52]	; 0x34
   1ab0e:	920f      	str	r2, [sp, #60]	; 0x3c
   1ab10:	2b00      	cmp	r3, #0
   1ab12:	da01      	bge.n	1ab18 <_vfprintf_r+0x450>
   1ab14:	f000 fdb2 	bl	1b67c <_vfprintf_r+0xfb4>
   1ab18:	990c      	ldr	r1, [sp, #48]	; 0x30
   1ab1a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   1ab1c:	0008      	movs	r0, r1
   1ab1e:	4651      	mov	r1, sl
   1ab20:	ab16      	add	r3, sp, #88	; 0x58
   1ab22:	7fdb      	ldrb	r3, [r3, #31]
   1ab24:	4310      	orrs	r0, r2
   1ab26:	4698      	mov	r8, r3
   1ab28:	0002      	movs	r2, r0
   1ab2a:	2301      	movs	r3, #1
   1ab2c:	3101      	adds	r1, #1
   1ab2e:	d000      	beq.n	1ab32 <_vfprintf_r+0x46a>
   1ab30:	e718      	b.n	1a964 <_vfprintf_r+0x29c>
   1ab32:	2a00      	cmp	r2, #0
   1ab34:	d100      	bne.n	1ab38 <_vfprintf_r+0x470>
   1ab36:	e35a      	b.n	1b1ee <_vfprintf_r+0xb26>
   1ab38:	9409      	str	r4, [sp, #36]	; 0x24
   1ab3a:	2b01      	cmp	r3, #1
   1ab3c:	d101      	bne.n	1ab42 <_vfprintf_r+0x47a>
   1ab3e:	f000 fc06 	bl	1b34e <_vfprintf_r+0xc86>
   1ab42:	2b02      	cmp	r3, #2
   1ab44:	d000      	beq.n	1ab48 <_vfprintf_r+0x480>
   1ab46:	e380      	b.n	1b24a <_vfprintf_r+0xb82>
   1ab48:	9c19      	ldr	r4, [sp, #100]	; 0x64
   1ab4a:	200f      	movs	r0, #15
   1ab4c:	46a1      	mov	r9, r4
   1ab4e:	46b4      	mov	ip, r6
   1ab50:	ab32      	add	r3, sp, #200	; 0xc8
   1ab52:	0019      	movs	r1, r3
   1ab54:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   1ab56:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1ab58:	0004      	movs	r4, r0
   1ab5a:	464d      	mov	r5, r9
   1ab5c:	4014      	ands	r4, r2
   1ab5e:	5d2c      	ldrb	r4, [r5, r4]
   1ab60:	071e      	lsls	r6, r3, #28
   1ab62:	0915      	lsrs	r5, r2, #4
   1ab64:	3901      	subs	r1, #1
   1ab66:	432e      	orrs	r6, r5
   1ab68:	700c      	strb	r4, [r1, #0]
   1ab6a:	091c      	lsrs	r4, r3, #4
   1ab6c:	0023      	movs	r3, r4
   1ab6e:	0034      	movs	r4, r6
   1ab70:	0032      	movs	r2, r6
   1ab72:	431c      	orrs	r4, r3
   1ab74:	d1f0      	bne.n	1ab58 <_vfprintf_r+0x490>
   1ab76:	920c      	str	r2, [sp, #48]	; 0x30
   1ab78:	930d      	str	r3, [sp, #52]	; 0x34
   1ab7a:	ab32      	add	r3, sp, #200	; 0xc8
   1ab7c:	1a5b      	subs	r3, r3, r1
   1ab7e:	9111      	str	r1, [sp, #68]	; 0x44
   1ab80:	4666      	mov	r6, ip
   1ab82:	930e      	str	r3, [sp, #56]	; 0x38
   1ab84:	e70d      	b.n	1a9a2 <_vfprintf_r+0x2da>
   1ab86:	4663      	mov	r3, ip
   1ab88:	431c      	orrs	r4, r3
   1ab8a:	9b07      	ldr	r3, [sp, #28]
   1ab8c:	781b      	ldrb	r3, [r3, #0]
   1ab8e:	e624      	b.n	1a7da <_vfprintf_r+0x112>
   1ab90:	9b07      	ldr	r3, [sp, #28]
   1ab92:	781b      	ldrb	r3, [r3, #0]
   1ab94:	2b6c      	cmp	r3, #108	; 0x6c
   1ab96:	d101      	bne.n	1ab9c <_vfprintf_r+0x4d4>
   1ab98:	f000 fe8c 	bl	1b8b4 <_vfprintf_r+0x11ec>
   1ab9c:	2210      	movs	r2, #16
   1ab9e:	4314      	orrs	r4, r2
   1aba0:	e61b      	b.n	1a7da <_vfprintf_r+0x112>
   1aba2:	2900      	cmp	r1, #0
   1aba4:	d001      	beq.n	1abaa <_vfprintf_r+0x4e2>
   1aba6:	f001 f8d5 	bl	1bd54 <_vfprintf_r+0x168c>
   1abaa:	06a3      	lsls	r3, r4, #26
   1abac:	d501      	bpl.n	1abb2 <_vfprintf_r+0x4ea>
   1abae:	f000 fe76 	bl	1b89e <_vfprintf_r+0x11d6>
   1abb2:	06e3      	lsls	r3, r4, #27
   1abb4:	d500      	bpl.n	1abb8 <_vfprintf_r+0x4f0>
   1abb6:	e110      	b.n	1adda <_vfprintf_r+0x712>
   1abb8:	0663      	lsls	r3, r4, #25
   1abba:	d400      	bmi.n	1abbe <_vfprintf_r+0x4f6>
   1abbc:	e10d      	b.n	1adda <_vfprintf_r+0x712>
   1abbe:	4669      	mov	r1, sp
   1abc0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1abc2:	8d09      	ldrh	r1, [r1, #40]	; 0x28
   1abc4:	681a      	ldr	r2, [r3, #0]
   1abc6:	3304      	adds	r3, #4
   1abc8:	9208      	str	r2, [sp, #32]
   1abca:	8011      	strh	r1, [r2, #0]
   1abcc:	930f      	str	r3, [sp, #60]	; 0x3c
   1abce:	e5c9      	b.n	1a764 <_vfprintf_r+0x9c>
   1abd0:	990f      	ldr	r1, [sp, #60]	; 0x3c
   1abd2:	2230      	movs	r2, #48	; 0x30
   1abd4:	680b      	ldr	r3, [r1, #0]
   1abd6:	930c      	str	r3, [sp, #48]	; 0x30
   1abd8:	2300      	movs	r3, #0
   1abda:	930d      	str	r3, [sp, #52]	; 0x34
   1abdc:	3302      	adds	r3, #2
   1abde:	431c      	orrs	r4, r3
   1abe0:	ab1e      	add	r3, sp, #120	; 0x78
   1abe2:	701a      	strb	r2, [r3, #0]
   1abe4:	3248      	adds	r2, #72	; 0x48
   1abe6:	705a      	strb	r2, [r3, #1]
   1abe8:	000b      	movs	r3, r1
   1abea:	3304      	adds	r3, #4
   1abec:	930f      	str	r3, [sp, #60]	; 0x3c
   1abee:	4bc1      	ldr	r3, [pc, #772]	; (1aef4 <_vfprintf_r+0x82c>)
   1abf0:	9212      	str	r2, [sp, #72]	; 0x48
   1abf2:	9319      	str	r3, [sp, #100]	; 0x64
   1abf4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   1abf6:	2302      	movs	r3, #2
   1abf8:	e6ac      	b.n	1a954 <_vfprintf_r+0x28c>
   1abfa:	464b      	mov	r3, r9
   1abfc:	431c      	orrs	r4, r3
   1abfe:	9b07      	ldr	r3, [sp, #28]
   1ac00:	781b      	ldrb	r3, [r3, #0]
   1ac02:	e5ea      	b.n	1a7da <_vfprintf_r+0x112>
   1ac04:	9312      	str	r3, [sp, #72]	; 0x48
   1ac06:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1ac08:	a916      	add	r1, sp, #88	; 0x58
   1ac0a:	1d1d      	adds	r5, r3, #4
   1ac0c:	681b      	ldr	r3, [r3, #0]
   1ac0e:	001a      	movs	r2, r3
   1ac10:	9311      	str	r3, [sp, #68]	; 0x44
   1ac12:	2300      	movs	r3, #0
   1ac14:	77cb      	strb	r3, [r1, #31]
   1ac16:	2a00      	cmp	r2, #0
   1ac18:	d101      	bne.n	1ac1e <_vfprintf_r+0x556>
   1ac1a:	f000 ff01 	bl	1ba20 <_vfprintf_r+0x1358>
   1ac1e:	4653      	mov	r3, sl
   1ac20:	3301      	adds	r3, #1
   1ac22:	d101      	bne.n	1ac28 <_vfprintf_r+0x560>
   1ac24:	f000 fe64 	bl	1b8f0 <_vfprintf_r+0x1228>
   1ac28:	4652      	mov	r2, sl
   1ac2a:	2100      	movs	r1, #0
   1ac2c:	9811      	ldr	r0, [sp, #68]	; 0x44
   1ac2e:	f002 feb5 	bl	1d99c <memchr>
   1ac32:	2800      	cmp	r0, #0
   1ac34:	d101      	bne.n	1ac3a <_vfprintf_r+0x572>
   1ac36:	f000 ff78 	bl	1bb2a <_vfprintf_r+0x1462>
   1ac3a:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1ac3c:	1ac3      	subs	r3, r0, r3
   1ac3e:	001a      	movs	r2, r3
   1ac40:	930e      	str	r3, [sp, #56]	; 0x38
   1ac42:	43db      	mvns	r3, r3
   1ac44:	17db      	asrs	r3, r3, #31
   1ac46:	401a      	ands	r2, r3
   1ac48:	ab16      	add	r3, sp, #88	; 0x58
   1ac4a:	7fdb      	ldrb	r3, [r3, #31]
   1ac4c:	9208      	str	r2, [sp, #32]
   1ac4e:	4698      	mov	r8, r3
   1ac50:	2300      	movs	r3, #0
   1ac52:	950f      	str	r5, [sp, #60]	; 0x3c
   1ac54:	9409      	str	r4, [sp, #36]	; 0x24
   1ac56:	469a      	mov	sl, r3
   1ac58:	9313      	str	r3, [sp, #76]	; 0x4c
   1ac5a:	e6aa      	b.n	1a9b2 <_vfprintf_r+0x2ea>
   1ac5c:	2308      	movs	r3, #8
   1ac5e:	431c      	orrs	r4, r3
   1ac60:	9b07      	ldr	r3, [sp, #28]
   1ac62:	781b      	ldrb	r3, [r3, #0]
   1ac64:	e5b9      	b.n	1a7da <_vfprintf_r+0x112>
   1ac66:	9312      	str	r3, [sp, #72]	; 0x48
   1ac68:	2310      	movs	r3, #16
   1ac6a:	431c      	orrs	r4, r3
   1ac6c:	06a3      	lsls	r3, r4, #26
   1ac6e:	d501      	bpl.n	1ac74 <_vfprintf_r+0x5ac>
   1ac70:	f000 fca7 	bl	1b5c2 <_vfprintf_r+0xefa>
   1ac74:	06e3      	lsls	r3, r4, #27
   1ac76:	d500      	bpl.n	1ac7a <_vfprintf_r+0x5b2>
   1ac78:	e3ee      	b.n	1b458 <_vfprintf_r+0xd90>
   1ac7a:	0663      	lsls	r3, r4, #25
   1ac7c:	d400      	bmi.n	1ac80 <_vfprintf_r+0x5b8>
   1ac7e:	e3eb      	b.n	1b458 <_vfprintf_r+0xd90>
   1ac80:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1ac82:	881a      	ldrh	r2, [r3, #0]
   1ac84:	920c      	str	r2, [sp, #48]	; 0x30
   1ac86:	2200      	movs	r2, #0
   1ac88:	3304      	adds	r3, #4
   1ac8a:	920d      	str	r2, [sp, #52]	; 0x34
   1ac8c:	930f      	str	r3, [sp, #60]	; 0x3c
   1ac8e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   1ac90:	2300      	movs	r3, #0
   1ac92:	e65f      	b.n	1a954 <_vfprintf_r+0x28c>
   1ac94:	9312      	str	r3, [sp, #72]	; 0x48
   1ac96:	2310      	movs	r3, #16
   1ac98:	431c      	orrs	r4, r3
   1ac9a:	06a3      	lsls	r3, r4, #26
   1ac9c:	d501      	bpl.n	1aca2 <_vfprintf_r+0x5da>
   1ac9e:	f000 fcba 	bl	1b616 <_vfprintf_r+0xf4e>
   1aca2:	06e3      	lsls	r3, r4, #27
   1aca4:	d500      	bpl.n	1aca8 <_vfprintf_r+0x5e0>
   1aca6:	e3da      	b.n	1b45e <_vfprintf_r+0xd96>
   1aca8:	0663      	lsls	r3, r4, #25
   1acaa:	d400      	bmi.n	1acae <_vfprintf_r+0x5e6>
   1acac:	e3d7      	b.n	1b45e <_vfprintf_r+0xd96>
   1acae:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1acb0:	881a      	ldrh	r2, [r3, #0]
   1acb2:	920c      	str	r2, [sp, #48]	; 0x30
   1acb4:	2200      	movs	r2, #0
   1acb6:	3304      	adds	r3, #4
   1acb8:	920d      	str	r2, [sp, #52]	; 0x34
   1acba:	930f      	str	r3, [sp, #60]	; 0x3c
   1acbc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   1acbe:	2301      	movs	r3, #1
   1acc0:	e648      	b.n	1a954 <_vfprintf_r+0x28c>
   1acc2:	9312      	str	r3, [sp, #72]	; 0x48
   1acc4:	2900      	cmp	r1, #0
   1acc6:	d001      	beq.n	1accc <_vfprintf_r+0x604>
   1acc8:	f001 f857 	bl	1bd7a <_vfprintf_r+0x16b2>
   1accc:	4b8a      	ldr	r3, [pc, #552]	; (1aef8 <_vfprintf_r+0x830>)
   1acce:	9319      	str	r3, [sp, #100]	; 0x64
   1acd0:	e618      	b.n	1a904 <_vfprintf_r+0x23c>
   1acd2:	2301      	movs	r3, #1
   1acd4:	431c      	orrs	r4, r3
   1acd6:	9b07      	ldr	r3, [sp, #28]
   1acd8:	781b      	ldrb	r3, [r3, #0]
   1acda:	e57e      	b.n	1a7da <_vfprintf_r+0x112>
   1acdc:	2380      	movs	r3, #128	; 0x80
   1acde:	431c      	orrs	r4, r3
   1ace0:	9b07      	ldr	r3, [sp, #28]
   1ace2:	781b      	ldrb	r3, [r3, #0]
   1ace4:	e579      	b.n	1a7da <_vfprintf_r+0x112>
   1ace6:	9b07      	ldr	r3, [sp, #28]
   1ace8:	781b      	ldrb	r3, [r3, #0]
   1acea:	2800      	cmp	r0, #0
   1acec:	d000      	beq.n	1acf0 <_vfprintf_r+0x628>
   1acee:	e574      	b.n	1a7da <_vfprintf_r+0x112>
   1acf0:	2101      	movs	r1, #1
   1acf2:	3020      	adds	r0, #32
   1acf4:	e571      	b.n	1a7da <_vfprintf_r+0x112>
   1acf6:	9312      	str	r3, [sp, #72]	; 0x48
   1acf8:	2900      	cmp	r1, #0
   1acfa:	d001      	beq.n	1ad00 <_vfprintf_r+0x638>
   1acfc:	f001 f839 	bl	1bd72 <_vfprintf_r+0x16aa>
   1ad00:	2207      	movs	r2, #7
   1ad02:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1ad04:	3307      	adds	r3, #7
   1ad06:	4393      	bics	r3, r2
   1ad08:	3201      	adds	r2, #1
   1ad0a:	4694      	mov	ip, r2
   1ad0c:	449c      	add	ip, r3
   1ad0e:	4662      	mov	r2, ip
   1ad10:	920f      	str	r2, [sp, #60]	; 0x3c
   1ad12:	681a      	ldr	r2, [r3, #0]
   1ad14:	9216      	str	r2, [sp, #88]	; 0x58
   1ad16:	685b      	ldr	r3, [r3, #4]
   1ad18:	2201      	movs	r2, #1
   1ad1a:	9315      	str	r3, [sp, #84]	; 0x54
   1ad1c:	9b15      	ldr	r3, [sp, #84]	; 0x54
   1ad1e:	9d16      	ldr	r5, [sp, #88]	; 0x58
   1ad20:	005b      	lsls	r3, r3, #1
   1ad22:	085b      	lsrs	r3, r3, #1
   1ad24:	4698      	mov	r8, r3
   1ad26:	4252      	negs	r2, r2
   1ad28:	4b74      	ldr	r3, [pc, #464]	; (1aefc <_vfprintf_r+0x834>)
   1ad2a:	0028      	movs	r0, r5
   1ad2c:	4641      	mov	r1, r8
   1ad2e:	f003 fe97 	bl	1ea60 <__aeabi_dcmpun>
   1ad32:	2800      	cmp	r0, #0
   1ad34:	d001      	beq.n	1ad3a <_vfprintf_r+0x672>
   1ad36:	f000 fcb4 	bl	1b6a2 <_vfprintf_r+0xfda>
   1ad3a:	2201      	movs	r2, #1
   1ad3c:	4b6f      	ldr	r3, [pc, #444]	; (1aefc <_vfprintf_r+0x834>)
   1ad3e:	4252      	negs	r2, r2
   1ad40:	0028      	movs	r0, r5
   1ad42:	4641      	mov	r1, r8
   1ad44:	f7fb fe12 	bl	1696c <__aeabi_dcmple>
   1ad48:	2800      	cmp	r0, #0
   1ad4a:	d001      	beq.n	1ad50 <_vfprintf_r+0x688>
   1ad4c:	f000 fca9 	bl	1b6a2 <_vfprintf_r+0xfda>
   1ad50:	2200      	movs	r2, #0
   1ad52:	2300      	movs	r3, #0
   1ad54:	9816      	ldr	r0, [sp, #88]	; 0x58
   1ad56:	9915      	ldr	r1, [sp, #84]	; 0x54
   1ad58:	f7fb fdfe 	bl	16958 <__aeabi_dcmplt>
   1ad5c:	2800      	cmp	r0, #0
   1ad5e:	d001      	beq.n	1ad64 <_vfprintf_r+0x69c>
   1ad60:	f000 fd55 	bl	1b80e <_vfprintf_r+0x1146>
   1ad64:	ab16      	add	r3, sp, #88	; 0x58
   1ad66:	7fdb      	ldrb	r3, [r3, #31]
   1ad68:	4698      	mov	r8, r3
   1ad6a:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1ad6c:	2b47      	cmp	r3, #71	; 0x47
   1ad6e:	dd01      	ble.n	1ad74 <_vfprintf_r+0x6ac>
   1ad70:	f000 fdb4 	bl	1b8dc <_vfprintf_r+0x1214>
   1ad74:	4b62      	ldr	r3, [pc, #392]	; (1af00 <_vfprintf_r+0x838>)
   1ad76:	9311      	str	r3, [sp, #68]	; 0x44
   1ad78:	2380      	movs	r3, #128	; 0x80
   1ad7a:	439c      	bics	r4, r3
   1ad7c:	3b7d      	subs	r3, #125	; 0x7d
   1ad7e:	9308      	str	r3, [sp, #32]
   1ad80:	930e      	str	r3, [sp, #56]	; 0x38
   1ad82:	2300      	movs	r3, #0
   1ad84:	9409      	str	r4, [sp, #36]	; 0x24
   1ad86:	469a      	mov	sl, r3
   1ad88:	9313      	str	r3, [sp, #76]	; 0x4c
   1ad8a:	e612      	b.n	1a9b2 <_vfprintf_r+0x2ea>
   1ad8c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1ad8e:	1d1a      	adds	r2, r3, #4
   1ad90:	681b      	ldr	r3, [r3, #0]
   1ad92:	930b      	str	r3, [sp, #44]	; 0x2c
   1ad94:	2b00      	cmp	r3, #0
   1ad96:	da00      	bge.n	1ad9a <_vfprintf_r+0x6d2>
   1ad98:	e578      	b.n	1a88c <_vfprintf_r+0x1c4>
   1ad9a:	9b07      	ldr	r3, [sp, #28]
   1ad9c:	920f      	str	r2, [sp, #60]	; 0x3c
   1ad9e:	781b      	ldrb	r3, [r3, #0]
   1ada0:	e51b      	b.n	1a7da <_vfprintf_r+0x112>
   1ada2:	9312      	str	r3, [sp, #72]	; 0x48
   1ada4:	2900      	cmp	r1, #0
   1ada6:	d001      	beq.n	1adac <_vfprintf_r+0x6e4>
   1ada8:	f000 ffcc 	bl	1bd44 <_vfprintf_r+0x167c>
   1adac:	2310      	movs	r3, #16
   1adae:	431c      	orrs	r4, r3
   1adb0:	e69a      	b.n	1aae8 <_vfprintf_r+0x420>
   1adb2:	9312      	str	r3, [sp, #72]	; 0x48
   1adb4:	e771      	b.n	1ac9a <_vfprintf_r+0x5d2>
   1adb6:	9312      	str	r3, [sp, #72]	; 0x48
   1adb8:	e758      	b.n	1ac6c <_vfprintf_r+0x5a4>
   1adba:	9312      	str	r3, [sp, #72]	; 0x48
   1adbc:	2900      	cmp	r1, #0
   1adbe:	d001      	beq.n	1adc4 <_vfprintf_r+0x6fc>
   1adc0:	f000 ffd3 	bl	1bd6a <_vfprintf_r+0x16a2>
   1adc4:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1adc6:	2b00      	cmp	r3, #0
   1adc8:	d100      	bne.n	1adcc <_vfprintf_r+0x704>
   1adca:	e18d      	b.n	1b0e8 <_vfprintf_r+0xa20>
   1adcc:	ad28      	add	r5, sp, #160	; 0xa0
   1adce:	702b      	strb	r3, [r5, #0]
   1add0:	2300      	movs	r3, #0
   1add2:	aa16      	add	r2, sp, #88	; 0x58
   1add4:	77d3      	strb	r3, [r2, #31]
   1add6:	9409      	str	r4, [sp, #36]	; 0x24
   1add8:	e678      	b.n	1aacc <_vfprintf_r+0x404>
   1adda:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   1addc:	990a      	ldr	r1, [sp, #40]	; 0x28
   1adde:	6813      	ldr	r3, [r2, #0]
   1ade0:	6019      	str	r1, [r3, #0]
   1ade2:	0013      	movs	r3, r2
   1ade4:	3304      	adds	r3, #4
   1ade6:	930f      	str	r3, [sp, #60]	; 0x3c
   1ade8:	e4bc      	b.n	1a764 <_vfprintf_r+0x9c>
   1adea:	68bc      	ldr	r4, [r7, #8]
   1adec:	4643      	mov	r3, r8
   1adee:	2b00      	cmp	r3, #0
   1adf0:	d00f      	beq.n	1ae12 <_vfprintf_r+0x74a>
   1adf2:	aa16      	add	r2, sp, #88	; 0x58
   1adf4:	231f      	movs	r3, #31
   1adf6:	4694      	mov	ip, r2
   1adf8:	4463      	add	r3, ip
   1adfa:	6033      	str	r3, [r6, #0]
   1adfc:	2301      	movs	r3, #1
   1adfe:	6073      	str	r3, [r6, #4]
   1ae00:	687b      	ldr	r3, [r7, #4]
   1ae02:	3401      	adds	r4, #1
   1ae04:	3301      	adds	r3, #1
   1ae06:	60bc      	str	r4, [r7, #8]
   1ae08:	607b      	str	r3, [r7, #4]
   1ae0a:	2b07      	cmp	r3, #7
   1ae0c:	dd00      	ble.n	1ae10 <_vfprintf_r+0x748>
   1ae0e:	e203      	b.n	1b218 <_vfprintf_r+0xb50>
   1ae10:	3608      	adds	r6, #8
   1ae12:	464b      	mov	r3, r9
   1ae14:	2b00      	cmp	r3, #0
   1ae16:	d00c      	beq.n	1ae32 <_vfprintf_r+0x76a>
   1ae18:	ab1e      	add	r3, sp, #120	; 0x78
   1ae1a:	6033      	str	r3, [r6, #0]
   1ae1c:	2302      	movs	r3, #2
   1ae1e:	6073      	str	r3, [r6, #4]
   1ae20:	687b      	ldr	r3, [r7, #4]
   1ae22:	3402      	adds	r4, #2
   1ae24:	3301      	adds	r3, #1
   1ae26:	60bc      	str	r4, [r7, #8]
   1ae28:	607b      	str	r3, [r7, #4]
   1ae2a:	2b07      	cmp	r3, #7
   1ae2c:	dd00      	ble.n	1ae30 <_vfprintf_r+0x768>
   1ae2e:	e1fd      	b.n	1b22c <_vfprintf_r+0xb64>
   1ae30:	3608      	adds	r6, #8
   1ae32:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1ae34:	2b80      	cmp	r3, #128	; 0x80
   1ae36:	d100      	bne.n	1ae3a <_vfprintf_r+0x772>
   1ae38:	e173      	b.n	1b122 <_vfprintf_r+0xa5a>
   1ae3a:	4653      	mov	r3, sl
   1ae3c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   1ae3e:	1a9d      	subs	r5, r3, r2
   1ae40:	2d00      	cmp	r5, #0
   1ae42:	dd32      	ble.n	1aeaa <_vfprintf_r+0x7e2>
   1ae44:	4a2f      	ldr	r2, [pc, #188]	; (1af04 <_vfprintf_r+0x83c>)
   1ae46:	687b      	ldr	r3, [r7, #4]
   1ae48:	4691      	mov	r9, r2
   1ae4a:	2d10      	cmp	r5, #16
   1ae4c:	dd22      	ble.n	1ae94 <_vfprintf_r+0x7cc>
   1ae4e:	2210      	movs	r2, #16
   1ae50:	4692      	mov	sl, r2
   1ae52:	0022      	movs	r2, r4
   1ae54:	465c      	mov	r4, fp
   1ae56:	e003      	b.n	1ae60 <_vfprintf_r+0x798>
   1ae58:	3d10      	subs	r5, #16
   1ae5a:	3608      	adds	r6, #8
   1ae5c:	2d10      	cmp	r5, #16
   1ae5e:	dd17      	ble.n	1ae90 <_vfprintf_r+0x7c8>
   1ae60:	4649      	mov	r1, r9
   1ae62:	6031      	str	r1, [r6, #0]
   1ae64:	4651      	mov	r1, sl
   1ae66:	3210      	adds	r2, #16
   1ae68:	3301      	adds	r3, #1
   1ae6a:	6071      	str	r1, [r6, #4]
   1ae6c:	60ba      	str	r2, [r7, #8]
   1ae6e:	607b      	str	r3, [r7, #4]
   1ae70:	2b07      	cmp	r3, #7
   1ae72:	ddf1      	ble.n	1ae58 <_vfprintf_r+0x790>
   1ae74:	003a      	movs	r2, r7
   1ae76:	0021      	movs	r1, r4
   1ae78:	9806      	ldr	r0, [sp, #24]
   1ae7a:	f003 fb65 	bl	1e548 <__sprint_r>
   1ae7e:	2800      	cmp	r0, #0
   1ae80:	d000      	beq.n	1ae84 <_vfprintf_r+0x7bc>
   1ae82:	e18a      	b.n	1b19a <_vfprintf_r+0xad2>
   1ae84:	3d10      	subs	r5, #16
   1ae86:	68ba      	ldr	r2, [r7, #8]
   1ae88:	687b      	ldr	r3, [r7, #4]
   1ae8a:	ae32      	add	r6, sp, #200	; 0xc8
   1ae8c:	2d10      	cmp	r5, #16
   1ae8e:	dce7      	bgt.n	1ae60 <_vfprintf_r+0x798>
   1ae90:	46a3      	mov	fp, r4
   1ae92:	0014      	movs	r4, r2
   1ae94:	464a      	mov	r2, r9
   1ae96:	1964      	adds	r4, r4, r5
   1ae98:	3301      	adds	r3, #1
   1ae9a:	6032      	str	r2, [r6, #0]
   1ae9c:	6075      	str	r5, [r6, #4]
   1ae9e:	60bc      	str	r4, [r7, #8]
   1aea0:	607b      	str	r3, [r7, #4]
   1aea2:	2b07      	cmp	r3, #7
   1aea4:	dd00      	ble.n	1aea8 <_vfprintf_r+0x7e0>
   1aea6:	e1ad      	b.n	1b204 <_vfprintf_r+0xb3c>
   1aea8:	3608      	adds	r6, #8
   1aeaa:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1aeac:	05db      	lsls	r3, r3, #23
   1aeae:	d500      	bpl.n	1aeb2 <_vfprintf_r+0x7ea>
   1aeb0:	e0be      	b.n	1b030 <_vfprintf_r+0x968>
   1aeb2:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1aeb4:	6033      	str	r3, [r6, #0]
   1aeb6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1aeb8:	469c      	mov	ip, r3
   1aeba:	6073      	str	r3, [r6, #4]
   1aebc:	687b      	ldr	r3, [r7, #4]
   1aebe:	4464      	add	r4, ip
   1aec0:	3301      	adds	r3, #1
   1aec2:	60bc      	str	r4, [r7, #8]
   1aec4:	607b      	str	r3, [r7, #4]
   1aec6:	2b07      	cmp	r3, #7
   1aec8:	dd00      	ble.n	1aecc <_vfprintf_r+0x804>
   1aeca:	e0a6      	b.n	1b01a <_vfprintf_r+0x952>
   1aecc:	3608      	adds	r6, #8
   1aece:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1aed0:	075b      	lsls	r3, r3, #29
   1aed2:	d54a      	bpl.n	1af6a <_vfprintf_r+0x8a2>
   1aed4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1aed6:	9a08      	ldr	r2, [sp, #32]
   1aed8:	1a9d      	subs	r5, r3, r2
   1aeda:	2d00      	cmp	r5, #0
   1aedc:	dd45      	ble.n	1af6a <_vfprintf_r+0x8a2>
   1aede:	4a0a      	ldr	r2, [pc, #40]	; (1af08 <_vfprintf_r+0x840>)
   1aee0:	687b      	ldr	r3, [r7, #4]
   1aee2:	4690      	mov	r8, r2
   1aee4:	2d10      	cmp	r5, #16
   1aee6:	dd2f      	ble.n	1af48 <_vfprintf_r+0x880>
   1aee8:	2210      	movs	r2, #16
   1aeea:	4691      	mov	r9, r2
   1aeec:	0022      	movs	r2, r4
   1aeee:	465c      	mov	r4, fp
   1aef0:	e010      	b.n	1af14 <_vfprintf_r+0x84c>
   1aef2:	46c0      	nop			; (mov r8, r8)
   1aef4:	0002073c 	.word	0x0002073c
   1aef8:	00020728 	.word	0x00020728
   1aefc:	7fefffff 	.word	0x7fefffff
   1af00:	00020718 	.word	0x00020718
   1af04:	00020768 	.word	0x00020768
   1af08:	00020758 	.word	0x00020758
   1af0c:	3d10      	subs	r5, #16
   1af0e:	3608      	adds	r6, #8
   1af10:	2d10      	cmp	r5, #16
   1af12:	dd17      	ble.n	1af44 <_vfprintf_r+0x87c>
   1af14:	49d1      	ldr	r1, [pc, #836]	; (1b25c <_vfprintf_r+0xb94>)
   1af16:	3210      	adds	r2, #16
   1af18:	6031      	str	r1, [r6, #0]
   1af1a:	4649      	mov	r1, r9
   1af1c:	3301      	adds	r3, #1
   1af1e:	6071      	str	r1, [r6, #4]
   1af20:	60ba      	str	r2, [r7, #8]
   1af22:	607b      	str	r3, [r7, #4]
   1af24:	2b07      	cmp	r3, #7
   1af26:	ddf1      	ble.n	1af0c <_vfprintf_r+0x844>
   1af28:	003a      	movs	r2, r7
   1af2a:	0021      	movs	r1, r4
   1af2c:	9806      	ldr	r0, [sp, #24]
   1af2e:	f003 fb0b 	bl	1e548 <__sprint_r>
   1af32:	2800      	cmp	r0, #0
   1af34:	d000      	beq.n	1af38 <_vfprintf_r+0x870>
   1af36:	e130      	b.n	1b19a <_vfprintf_r+0xad2>
   1af38:	3d10      	subs	r5, #16
   1af3a:	68ba      	ldr	r2, [r7, #8]
   1af3c:	687b      	ldr	r3, [r7, #4]
   1af3e:	ae32      	add	r6, sp, #200	; 0xc8
   1af40:	2d10      	cmp	r5, #16
   1af42:	dce7      	bgt.n	1af14 <_vfprintf_r+0x84c>
   1af44:	46a3      	mov	fp, r4
   1af46:	0014      	movs	r4, r2
   1af48:	4642      	mov	r2, r8
   1af4a:	1964      	adds	r4, r4, r5
   1af4c:	3301      	adds	r3, #1
   1af4e:	c624      	stmia	r6!, {r2, r5}
   1af50:	60bc      	str	r4, [r7, #8]
   1af52:	607b      	str	r3, [r7, #4]
   1af54:	2b07      	cmp	r3, #7
   1af56:	dd08      	ble.n	1af6a <_vfprintf_r+0x8a2>
   1af58:	003a      	movs	r2, r7
   1af5a:	4659      	mov	r1, fp
   1af5c:	9806      	ldr	r0, [sp, #24]
   1af5e:	f003 faf3 	bl	1e548 <__sprint_r>
   1af62:	2800      	cmp	r0, #0
   1af64:	d000      	beq.n	1af68 <_vfprintf_r+0x8a0>
   1af66:	e13f      	b.n	1b1e8 <_vfprintf_r+0xb20>
   1af68:	68bc      	ldr	r4, [r7, #8]
   1af6a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1af6c:	9908      	ldr	r1, [sp, #32]
   1af6e:	428b      	cmp	r3, r1
   1af70:	da00      	bge.n	1af74 <_vfprintf_r+0x8ac>
   1af72:	000b      	movs	r3, r1
   1af74:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1af76:	4694      	mov	ip, r2
   1af78:	449c      	add	ip, r3
   1af7a:	4663      	mov	r3, ip
   1af7c:	930a      	str	r3, [sp, #40]	; 0x28
   1af7e:	2c00      	cmp	r4, #0
   1af80:	d000      	beq.n	1af84 <_vfprintf_r+0x8bc>
   1af82:	e129      	b.n	1b1d8 <_vfprintf_r+0xb10>
   1af84:	2300      	movs	r3, #0
   1af86:	ae32      	add	r6, sp, #200	; 0xc8
   1af88:	607b      	str	r3, [r7, #4]
   1af8a:	f7ff fbeb 	bl	1a764 <_vfprintf_r+0x9c>
   1af8e:	9b14      	ldr	r3, [sp, #80]	; 0x50
   1af90:	2b01      	cmp	r3, #1
   1af92:	dc00      	bgt.n	1af96 <_vfprintf_r+0x8ce>
   1af94:	e103      	b.n	1b19e <_vfprintf_r+0xad6>
   1af96:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1af98:	3401      	adds	r4, #1
   1af9a:	6033      	str	r3, [r6, #0]
   1af9c:	2301      	movs	r3, #1
   1af9e:	6073      	str	r3, [r6, #4]
   1afa0:	687b      	ldr	r3, [r7, #4]
   1afa2:	60bc      	str	r4, [r7, #8]
   1afa4:	3301      	adds	r3, #1
   1afa6:	607b      	str	r3, [r7, #4]
   1afa8:	2b07      	cmp	r3, #7
   1afaa:	dd00      	ble.n	1afae <_vfprintf_r+0x8e6>
   1afac:	e2ef      	b.n	1b58e <_vfprintf_r+0xec6>
   1afae:	3608      	adds	r6, #8
   1afb0:	9a18      	ldr	r2, [sp, #96]	; 0x60
   1afb2:	3301      	adds	r3, #1
   1afb4:	6032      	str	r2, [r6, #0]
   1afb6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   1afb8:	4698      	mov	r8, r3
   1afba:	4694      	mov	ip, r2
   1afbc:	4464      	add	r4, ip
   1afbe:	6072      	str	r2, [r6, #4]
   1afc0:	60bc      	str	r4, [r7, #8]
   1afc2:	607b      	str	r3, [r7, #4]
   1afc4:	2b07      	cmp	r3, #7
   1afc6:	dd00      	ble.n	1afca <_vfprintf_r+0x902>
   1afc8:	e318      	b.n	1b5fc <_vfprintf_r+0xf34>
   1afca:	3608      	adds	r6, #8
   1afcc:	2200      	movs	r2, #0
   1afce:	2300      	movs	r3, #0
   1afd0:	9816      	ldr	r0, [sp, #88]	; 0x58
   1afd2:	9915      	ldr	r1, [sp, #84]	; 0x54
   1afd4:	f7fb fcba 	bl	1694c <__aeabi_dcmpeq>
   1afd8:	2800      	cmp	r0, #0
   1afda:	d000      	beq.n	1afde <_vfprintf_r+0x916>
   1afdc:	e1f4      	b.n	1b3c8 <_vfprintf_r+0xd00>
   1afde:	9d11      	ldr	r5, [sp, #68]	; 0x44
   1afe0:	9b14      	ldr	r3, [sp, #80]	; 0x50
   1afe2:	3501      	adds	r5, #1
   1afe4:	3b01      	subs	r3, #1
   1afe6:	6035      	str	r5, [r6, #0]
   1afe8:	6073      	str	r3, [r6, #4]
   1afea:	18e4      	adds	r4, r4, r3
   1afec:	2301      	movs	r3, #1
   1afee:	469c      	mov	ip, r3
   1aff0:	44e0      	add	r8, ip
   1aff2:	4643      	mov	r3, r8
   1aff4:	60bc      	str	r4, [r7, #8]
   1aff6:	607b      	str	r3, [r7, #4]
   1aff8:	2b07      	cmp	r3, #7
   1affa:	dd00      	ble.n	1affe <_vfprintf_r+0x936>
   1affc:	e0e0      	b.n	1b1c0 <_vfprintf_r+0xaf8>
   1affe:	3608      	adds	r6, #8
   1b000:	ab21      	add	r3, sp, #132	; 0x84
   1b002:	6033      	str	r3, [r6, #0]
   1b004:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   1b006:	469c      	mov	ip, r3
   1b008:	6073      	str	r3, [r6, #4]
   1b00a:	4643      	mov	r3, r8
   1b00c:	4464      	add	r4, ip
   1b00e:	3301      	adds	r3, #1
   1b010:	60bc      	str	r4, [r7, #8]
   1b012:	607b      	str	r3, [r7, #4]
   1b014:	2b07      	cmp	r3, #7
   1b016:	dc00      	bgt.n	1b01a <_vfprintf_r+0x952>
   1b018:	e758      	b.n	1aecc <_vfprintf_r+0x804>
   1b01a:	003a      	movs	r2, r7
   1b01c:	4659      	mov	r1, fp
   1b01e:	9806      	ldr	r0, [sp, #24]
   1b020:	f003 fa92 	bl	1e548 <__sprint_r>
   1b024:	2800      	cmp	r0, #0
   1b026:	d000      	beq.n	1b02a <_vfprintf_r+0x962>
   1b028:	e0de      	b.n	1b1e8 <_vfprintf_r+0xb20>
   1b02a:	68bc      	ldr	r4, [r7, #8]
   1b02c:	ae32      	add	r6, sp, #200	; 0xc8
   1b02e:	e74e      	b.n	1aece <_vfprintf_r+0x806>
   1b030:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1b032:	2b65      	cmp	r3, #101	; 0x65
   1b034:	ddab      	ble.n	1af8e <_vfprintf_r+0x8c6>
   1b036:	2200      	movs	r2, #0
   1b038:	2300      	movs	r3, #0
   1b03a:	9816      	ldr	r0, [sp, #88]	; 0x58
   1b03c:	9915      	ldr	r1, [sp, #84]	; 0x54
   1b03e:	f7fb fc85 	bl	1694c <__aeabi_dcmpeq>
   1b042:	2800      	cmp	r0, #0
   1b044:	d100      	bne.n	1b048 <_vfprintf_r+0x980>
   1b046:	e134      	b.n	1b2b2 <_vfprintf_r+0xbea>
   1b048:	4b85      	ldr	r3, [pc, #532]	; (1b260 <_vfprintf_r+0xb98>)
   1b04a:	3401      	adds	r4, #1
   1b04c:	6033      	str	r3, [r6, #0]
   1b04e:	2301      	movs	r3, #1
   1b050:	6073      	str	r3, [r6, #4]
   1b052:	687b      	ldr	r3, [r7, #4]
   1b054:	60bc      	str	r4, [r7, #8]
   1b056:	3301      	adds	r3, #1
   1b058:	607b      	str	r3, [r7, #4]
   1b05a:	2b07      	cmp	r3, #7
   1b05c:	dd00      	ble.n	1b060 <_vfprintf_r+0x998>
   1b05e:	e3dc      	b.n	1b81a <_vfprintf_r+0x1152>
   1b060:	3608      	adds	r6, #8
   1b062:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   1b064:	9a14      	ldr	r2, [sp, #80]	; 0x50
   1b066:	4293      	cmp	r3, r2
   1b068:	db03      	blt.n	1b072 <_vfprintf_r+0x9aa>
   1b06a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1b06c:	07db      	lsls	r3, r3, #31
   1b06e:	d400      	bmi.n	1b072 <_vfprintf_r+0x9aa>
   1b070:	e3b7      	b.n	1b7e2 <_vfprintf_r+0x111a>
   1b072:	9b18      	ldr	r3, [sp, #96]	; 0x60
   1b074:	68ba      	ldr	r2, [r7, #8]
   1b076:	6033      	str	r3, [r6, #0]
   1b078:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   1b07a:	469c      	mov	ip, r3
   1b07c:	6073      	str	r3, [r6, #4]
   1b07e:	687b      	ldr	r3, [r7, #4]
   1b080:	4462      	add	r2, ip
   1b082:	3301      	adds	r3, #1
   1b084:	0014      	movs	r4, r2
   1b086:	60ba      	str	r2, [r7, #8]
   1b088:	607b      	str	r3, [r7, #4]
   1b08a:	2b07      	cmp	r3, #7
   1b08c:	dd01      	ble.n	1b092 <_vfprintf_r+0x9ca>
   1b08e:	f000 fc19 	bl	1b8c4 <_vfprintf_r+0x11fc>
   1b092:	3608      	adds	r6, #8
   1b094:	9b14      	ldr	r3, [sp, #80]	; 0x50
   1b096:	1e5d      	subs	r5, r3, #1
   1b098:	2d00      	cmp	r5, #0
   1b09a:	dc00      	bgt.n	1b09e <_vfprintf_r+0x9d6>
   1b09c:	e717      	b.n	1aece <_vfprintf_r+0x806>
   1b09e:	4a71      	ldr	r2, [pc, #452]	; (1b264 <_vfprintf_r+0xb9c>)
   1b0a0:	687b      	ldr	r3, [r7, #4]
   1b0a2:	4691      	mov	r9, r2
   1b0a4:	2d10      	cmp	r5, #16
   1b0a6:	dc00      	bgt.n	1b0aa <_vfprintf_r+0x9e2>
   1b0a8:	e1c3      	b.n	1b432 <_vfprintf_r+0xd6a>
   1b0aa:	2210      	movs	r2, #16
   1b0ac:	4690      	mov	r8, r2
   1b0ae:	0022      	movs	r2, r4
   1b0b0:	464c      	mov	r4, r9
   1b0b2:	46d9      	mov	r9, fp
   1b0b4:	e004      	b.n	1b0c0 <_vfprintf_r+0x9f8>
   1b0b6:	3608      	adds	r6, #8
   1b0b8:	3d10      	subs	r5, #16
   1b0ba:	2d10      	cmp	r5, #16
   1b0bc:	dc00      	bgt.n	1b0c0 <_vfprintf_r+0x9f8>
   1b0be:	e37c      	b.n	1b7ba <_vfprintf_r+0x10f2>
   1b0c0:	4641      	mov	r1, r8
   1b0c2:	3210      	adds	r2, #16
   1b0c4:	3301      	adds	r3, #1
   1b0c6:	6034      	str	r4, [r6, #0]
   1b0c8:	6071      	str	r1, [r6, #4]
   1b0ca:	60ba      	str	r2, [r7, #8]
   1b0cc:	607b      	str	r3, [r7, #4]
   1b0ce:	2b07      	cmp	r3, #7
   1b0d0:	ddf1      	ble.n	1b0b6 <_vfprintf_r+0x9ee>
   1b0d2:	003a      	movs	r2, r7
   1b0d4:	4649      	mov	r1, r9
   1b0d6:	9806      	ldr	r0, [sp, #24]
   1b0d8:	f003 fa36 	bl	1e548 <__sprint_r>
   1b0dc:	2800      	cmp	r0, #0
   1b0de:	d10b      	bne.n	1b0f8 <_vfprintf_r+0xa30>
   1b0e0:	68ba      	ldr	r2, [r7, #8]
   1b0e2:	687b      	ldr	r3, [r7, #4]
   1b0e4:	ae32      	add	r6, sp, #200	; 0xc8
   1b0e6:	e7e7      	b.n	1b0b8 <_vfprintf_r+0x9f0>
   1b0e8:	68bb      	ldr	r3, [r7, #8]
   1b0ea:	46d9      	mov	r9, fp
   1b0ec:	2b00      	cmp	r3, #0
   1b0ee:	d001      	beq.n	1b0f4 <_vfprintf_r+0xa2c>
   1b0f0:	f000 fd4c 	bl	1bb8c <_vfprintf_r+0x14c4>
   1b0f4:	2300      	movs	r3, #0
   1b0f6:	607b      	str	r3, [r7, #4]
   1b0f8:	464b      	mov	r3, r9
   1b0fa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   1b0fc:	07db      	lsls	r3, r3, #31
   1b0fe:	d40d      	bmi.n	1b11c <_vfprintf_r+0xa54>
   1b100:	464b      	mov	r3, r9
   1b102:	899b      	ldrh	r3, [r3, #12]
   1b104:	059a      	lsls	r2, r3, #22
   1b106:	d505      	bpl.n	1b114 <_vfprintf_r+0xa4c>
   1b108:	065b      	lsls	r3, r3, #25
   1b10a:	d401      	bmi.n	1b110 <_vfprintf_r+0xa48>
   1b10c:	f7ff fb8d 	bl	1a82a <_vfprintf_r+0x162>
   1b110:	f7ff fb88 	bl	1a824 <_vfprintf_r+0x15c>
   1b114:	464b      	mov	r3, r9
   1b116:	6d98      	ldr	r0, [r3, #88]	; 0x58
   1b118:	f002 fbc6 	bl	1d8a8 <__retarget_lock_release_recursive>
   1b11c:	464b      	mov	r3, r9
   1b11e:	899b      	ldrh	r3, [r3, #12]
   1b120:	e7f2      	b.n	1b108 <_vfprintf_r+0xa40>
   1b122:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1b124:	9a08      	ldr	r2, [sp, #32]
   1b126:	1a9d      	subs	r5, r3, r2
   1b128:	2d00      	cmp	r5, #0
   1b12a:	dc00      	bgt.n	1b12e <_vfprintf_r+0xa66>
   1b12c:	e685      	b.n	1ae3a <_vfprintf_r+0x772>
   1b12e:	4a4d      	ldr	r2, [pc, #308]	; (1b264 <_vfprintf_r+0xb9c>)
   1b130:	687b      	ldr	r3, [r7, #4]
   1b132:	4691      	mov	r9, r2
   1b134:	2d10      	cmp	r5, #16
   1b136:	dd24      	ble.n	1b182 <_vfprintf_r+0xaba>
   1b138:	2210      	movs	r2, #16
   1b13a:	0021      	movs	r1, r4
   1b13c:	4690      	mov	r8, r2
   1b13e:	465c      	mov	r4, fp
   1b140:	0032      	movs	r2, r6
   1b142:	464e      	mov	r6, r9
   1b144:	e003      	b.n	1b14e <_vfprintf_r+0xa86>
   1b146:	3d10      	subs	r5, #16
   1b148:	3208      	adds	r2, #8
   1b14a:	2d10      	cmp	r5, #16
   1b14c:	dd15      	ble.n	1b17a <_vfprintf_r+0xab2>
   1b14e:	4640      	mov	r0, r8
   1b150:	3110      	adds	r1, #16
   1b152:	3301      	adds	r3, #1
   1b154:	6016      	str	r6, [r2, #0]
   1b156:	6050      	str	r0, [r2, #4]
   1b158:	60b9      	str	r1, [r7, #8]
   1b15a:	607b      	str	r3, [r7, #4]
   1b15c:	2b07      	cmp	r3, #7
   1b15e:	ddf2      	ble.n	1b146 <_vfprintf_r+0xa7e>
   1b160:	003a      	movs	r2, r7
   1b162:	0021      	movs	r1, r4
   1b164:	9806      	ldr	r0, [sp, #24]
   1b166:	f003 f9ef 	bl	1e548 <__sprint_r>
   1b16a:	2800      	cmp	r0, #0
   1b16c:	d115      	bne.n	1b19a <_vfprintf_r+0xad2>
   1b16e:	3d10      	subs	r5, #16
   1b170:	68b9      	ldr	r1, [r7, #8]
   1b172:	687b      	ldr	r3, [r7, #4]
   1b174:	aa32      	add	r2, sp, #200	; 0xc8
   1b176:	2d10      	cmp	r5, #16
   1b178:	dce9      	bgt.n	1b14e <_vfprintf_r+0xa86>
   1b17a:	46a3      	mov	fp, r4
   1b17c:	46b1      	mov	r9, r6
   1b17e:	000c      	movs	r4, r1
   1b180:	0016      	movs	r6, r2
   1b182:	464a      	mov	r2, r9
   1b184:	1964      	adds	r4, r4, r5
   1b186:	3301      	adds	r3, #1
   1b188:	6032      	str	r2, [r6, #0]
   1b18a:	6075      	str	r5, [r6, #4]
   1b18c:	60bc      	str	r4, [r7, #8]
   1b18e:	607b      	str	r3, [r7, #4]
   1b190:	2b07      	cmp	r3, #7
   1b192:	dd00      	ble.n	1b196 <_vfprintf_r+0xace>
   1b194:	e263      	b.n	1b65e <_vfprintf_r+0xf96>
   1b196:	3608      	adds	r6, #8
   1b198:	e64f      	b.n	1ae3a <_vfprintf_r+0x772>
   1b19a:	46a1      	mov	r9, r4
   1b19c:	e7ac      	b.n	1b0f8 <_vfprintf_r+0xa30>
   1b19e:	2301      	movs	r3, #1
   1b1a0:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1b1a2:	4213      	tst	r3, r2
   1b1a4:	d000      	beq.n	1b1a8 <_vfprintf_r+0xae0>
   1b1a6:	e6f6      	b.n	1af96 <_vfprintf_r+0x8ce>
   1b1a8:	6073      	str	r3, [r6, #4]
   1b1aa:	687b      	ldr	r3, [r7, #4]
   1b1ac:	9a11      	ldr	r2, [sp, #68]	; 0x44
   1b1ae:	3301      	adds	r3, #1
   1b1b0:	3401      	adds	r4, #1
   1b1b2:	6032      	str	r2, [r6, #0]
   1b1b4:	60bc      	str	r4, [r7, #8]
   1b1b6:	4698      	mov	r8, r3
   1b1b8:	607b      	str	r3, [r7, #4]
   1b1ba:	2b07      	cmp	r3, #7
   1b1bc:	dc00      	bgt.n	1b1c0 <_vfprintf_r+0xaf8>
   1b1be:	e71e      	b.n	1affe <_vfprintf_r+0x936>
   1b1c0:	003a      	movs	r2, r7
   1b1c2:	4659      	mov	r1, fp
   1b1c4:	9806      	ldr	r0, [sp, #24]
   1b1c6:	f003 f9bf 	bl	1e548 <__sprint_r>
   1b1ca:	2800      	cmp	r0, #0
   1b1cc:	d10c      	bne.n	1b1e8 <_vfprintf_r+0xb20>
   1b1ce:	687b      	ldr	r3, [r7, #4]
   1b1d0:	68bc      	ldr	r4, [r7, #8]
   1b1d2:	4698      	mov	r8, r3
   1b1d4:	ae32      	add	r6, sp, #200	; 0xc8
   1b1d6:	e713      	b.n	1b000 <_vfprintf_r+0x938>
   1b1d8:	003a      	movs	r2, r7
   1b1da:	4659      	mov	r1, fp
   1b1dc:	9806      	ldr	r0, [sp, #24]
   1b1de:	f003 f9b3 	bl	1e548 <__sprint_r>
   1b1e2:	2800      	cmp	r0, #0
   1b1e4:	d100      	bne.n	1b1e8 <_vfprintf_r+0xb20>
   1b1e6:	e6cd      	b.n	1af84 <_vfprintf_r+0x8bc>
   1b1e8:	46d9      	mov	r9, fp
   1b1ea:	e785      	b.n	1b0f8 <_vfprintf_r+0xa30>
   1b1ec:	9c09      	ldr	r4, [sp, #36]	; 0x24
   1b1ee:	2b01      	cmp	r3, #1
   1b1f0:	d100      	bne.n	1b1f4 <_vfprintf_r+0xb2c>
   1b1f2:	e148      	b.n	1b486 <_vfprintf_r+0xdbe>
   1b1f4:	2b02      	cmp	r3, #2
   1b1f6:	d123      	bne.n	1b240 <_vfprintf_r+0xb78>
   1b1f8:	9409      	str	r4, [sp, #36]	; 0x24
   1b1fa:	2300      	movs	r3, #0
   1b1fc:	2400      	movs	r4, #0
   1b1fe:	930c      	str	r3, [sp, #48]	; 0x30
   1b200:	940d      	str	r4, [sp, #52]	; 0x34
   1b202:	e4a1      	b.n	1ab48 <_vfprintf_r+0x480>
   1b204:	003a      	movs	r2, r7
   1b206:	4659      	mov	r1, fp
   1b208:	9806      	ldr	r0, [sp, #24]
   1b20a:	f003 f99d 	bl	1e548 <__sprint_r>
   1b20e:	2800      	cmp	r0, #0
   1b210:	d1ea      	bne.n	1b1e8 <_vfprintf_r+0xb20>
   1b212:	68bc      	ldr	r4, [r7, #8]
   1b214:	ae32      	add	r6, sp, #200	; 0xc8
   1b216:	e648      	b.n	1aeaa <_vfprintf_r+0x7e2>
   1b218:	003a      	movs	r2, r7
   1b21a:	4659      	mov	r1, fp
   1b21c:	9806      	ldr	r0, [sp, #24]
   1b21e:	f003 f993 	bl	1e548 <__sprint_r>
   1b222:	2800      	cmp	r0, #0
   1b224:	d1e0      	bne.n	1b1e8 <_vfprintf_r+0xb20>
   1b226:	68bc      	ldr	r4, [r7, #8]
   1b228:	ae32      	add	r6, sp, #200	; 0xc8
   1b22a:	e5f2      	b.n	1ae12 <_vfprintf_r+0x74a>
   1b22c:	003a      	movs	r2, r7
   1b22e:	4659      	mov	r1, fp
   1b230:	9806      	ldr	r0, [sp, #24]
   1b232:	f003 f989 	bl	1e548 <__sprint_r>
   1b236:	2800      	cmp	r0, #0
   1b238:	d1d6      	bne.n	1b1e8 <_vfprintf_r+0xb20>
   1b23a:	68bc      	ldr	r4, [r7, #8]
   1b23c:	ae32      	add	r6, sp, #200	; 0xc8
   1b23e:	e5f8      	b.n	1ae32 <_vfprintf_r+0x76a>
   1b240:	9409      	str	r4, [sp, #36]	; 0x24
   1b242:	2300      	movs	r3, #0
   1b244:	2400      	movs	r4, #0
   1b246:	930c      	str	r3, [sp, #48]	; 0x30
   1b248:	940d      	str	r4, [sp, #52]	; 0x34
   1b24a:	980c      	ldr	r0, [sp, #48]	; 0x30
   1b24c:	990d      	ldr	r1, [sp, #52]	; 0x34
   1b24e:	4653      	mov	r3, sl
   1b250:	aa32      	add	r2, sp, #200	; 0xc8
   1b252:	4691      	mov	r9, r2
   1b254:	9308      	str	r3, [sp, #32]
   1b256:	46b2      	mov	sl, r6
   1b258:	e007      	b.n	1b26a <_vfprintf_r+0xba2>
   1b25a:	46c0      	nop			; (mov r8, r8)
   1b25c:	00020758 	.word	0x00020758
   1b260:	0001f9c8 	.word	0x0001f9c8
   1b264:	00020768 	.word	0x00020768
   1b268:	46a1      	mov	r9, r4
   1b26a:	074a      	lsls	r2, r1, #29
   1b26c:	4694      	mov	ip, r2
   1b26e:	464b      	mov	r3, r9
   1b270:	4665      	mov	r5, ip
   1b272:	1e5c      	subs	r4, r3, #1
   1b274:	08c6      	lsrs	r6, r0, #3
   1b276:	2307      	movs	r3, #7
   1b278:	08ca      	lsrs	r2, r1, #3
   1b27a:	4335      	orrs	r5, r6
   1b27c:	0011      	movs	r1, r2
   1b27e:	002a      	movs	r2, r5
   1b280:	4003      	ands	r3, r0
   1b282:	3330      	adds	r3, #48	; 0x30
   1b284:	7023      	strb	r3, [r4, #0]
   1b286:	0028      	movs	r0, r5
   1b288:	430a      	orrs	r2, r1
   1b28a:	d1ed      	bne.n	1b268 <_vfprintf_r+0xba0>
   1b28c:	900c      	str	r0, [sp, #48]	; 0x30
   1b28e:	910d      	str	r1, [sp, #52]	; 0x34
   1b290:	9908      	ldr	r1, [sp, #32]
   1b292:	4656      	mov	r6, sl
   1b294:	468a      	mov	sl, r1
   1b296:	9909      	ldr	r1, [sp, #36]	; 0x24
   1b298:	464a      	mov	r2, r9
   1b29a:	9411      	str	r4, [sp, #68]	; 0x44
   1b29c:	07c9      	lsls	r1, r1, #31
   1b29e:	d500      	bpl.n	1b2a2 <_vfprintf_r+0xbda>
   1b2a0:	e0e0      	b.n	1b464 <_vfprintf_r+0xd9c>
   1b2a2:	ab32      	add	r3, sp, #200	; 0xc8
   1b2a4:	1b1b      	subs	r3, r3, r4
   1b2a6:	930e      	str	r3, [sp, #56]	; 0x38
   1b2a8:	f7ff fb7b 	bl	1a9a2 <_vfprintf_r+0x2da>
   1b2ac:	9c07      	ldr	r4, [sp, #28]
   1b2ae:	f7ff fa7d 	bl	1a7ac <_vfprintf_r+0xe4>
   1b2b2:	981f      	ldr	r0, [sp, #124]	; 0x7c
   1b2b4:	2800      	cmp	r0, #0
   1b2b6:	dc00      	bgt.n	1b2ba <_vfprintf_r+0xbf2>
   1b2b8:	e2b9      	b.n	1b82e <_vfprintf_r+0x1166>
   1b2ba:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   1b2bc:	9914      	ldr	r1, [sp, #80]	; 0x50
   1b2be:	0013      	movs	r3, r2
   1b2c0:	4690      	mov	r8, r2
   1b2c2:	428b      	cmp	r3, r1
   1b2c4:	dd00      	ble.n	1b2c8 <_vfprintf_r+0xc00>
   1b2c6:	4688      	mov	r8, r1
   1b2c8:	4643      	mov	r3, r8
   1b2ca:	2b00      	cmp	r3, #0
   1b2cc:	dd0c      	ble.n	1b2e8 <_vfprintf_r+0xc20>
   1b2ce:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1b2d0:	4444      	add	r4, r8
   1b2d2:	6033      	str	r3, [r6, #0]
   1b2d4:	4643      	mov	r3, r8
   1b2d6:	6073      	str	r3, [r6, #4]
   1b2d8:	687b      	ldr	r3, [r7, #4]
   1b2da:	60bc      	str	r4, [r7, #8]
   1b2dc:	3301      	adds	r3, #1
   1b2de:	607b      	str	r3, [r7, #4]
   1b2e0:	2b07      	cmp	r3, #7
   1b2e2:	dd00      	ble.n	1b2e6 <_vfprintf_r+0xc1e>
   1b2e4:	e389      	b.n	1b9fa <_vfprintf_r+0x1332>
   1b2e6:	3608      	adds	r6, #8
   1b2e8:	4643      	mov	r3, r8
   1b2ea:	43db      	mvns	r3, r3
   1b2ec:	4642      	mov	r2, r8
   1b2ee:	17db      	asrs	r3, r3, #31
   1b2f0:	4013      	ands	r3, r2
   1b2f2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   1b2f4:	1ad3      	subs	r3, r2, r3
   1b2f6:	4698      	mov	r8, r3
   1b2f8:	2b00      	cmp	r3, #0
   1b2fa:	dc00      	bgt.n	1b2fe <_vfprintf_r+0xc36>
   1b2fc:	e0eb      	b.n	1b4d6 <_vfprintf_r+0xe0e>
   1b2fe:	2b10      	cmp	r3, #16
   1b300:	dc01      	bgt.n	1b306 <_vfprintf_r+0xc3e>
   1b302:	f000 fcd9 	bl	1bcb8 <_vfprintf_r+0x15f0>
   1b306:	4adc      	ldr	r2, [pc, #880]	; (1b678 <_vfprintf_r+0xfb0>)
   1b308:	687b      	ldr	r3, [r7, #4]
   1b30a:	4691      	mov	r9, r2
   1b30c:	2210      	movs	r2, #16
   1b30e:	464d      	mov	r5, r9
   1b310:	4692      	mov	sl, r2
   1b312:	0022      	movs	r2, r4
   1b314:	4644      	mov	r4, r8
   1b316:	46d8      	mov	r8, fp
   1b318:	e004      	b.n	1b324 <_vfprintf_r+0xc5c>
   1b31a:	3608      	adds	r6, #8
   1b31c:	3c10      	subs	r4, #16
   1b31e:	2c10      	cmp	r4, #16
   1b320:	dc00      	bgt.n	1b324 <_vfprintf_r+0xc5c>
   1b322:	e0bf      	b.n	1b4a4 <_vfprintf_r+0xddc>
   1b324:	4651      	mov	r1, sl
   1b326:	3210      	adds	r2, #16
   1b328:	3301      	adds	r3, #1
   1b32a:	6035      	str	r5, [r6, #0]
   1b32c:	6071      	str	r1, [r6, #4]
   1b32e:	60ba      	str	r2, [r7, #8]
   1b330:	607b      	str	r3, [r7, #4]
   1b332:	2b07      	cmp	r3, #7
   1b334:	ddf1      	ble.n	1b31a <_vfprintf_r+0xc52>
   1b336:	003a      	movs	r2, r7
   1b338:	4641      	mov	r1, r8
   1b33a:	9806      	ldr	r0, [sp, #24]
   1b33c:	f003 f904 	bl	1e548 <__sprint_r>
   1b340:	2800      	cmp	r0, #0
   1b342:	d000      	beq.n	1b346 <_vfprintf_r+0xc7e>
   1b344:	e3b6      	b.n	1bab4 <_vfprintf_r+0x13ec>
   1b346:	68ba      	ldr	r2, [r7, #8]
   1b348:	687b      	ldr	r3, [r7, #4]
   1b34a:	ae32      	add	r6, sp, #200	; 0xc8
   1b34c:	e7e6      	b.n	1b31c <_vfprintf_r+0xc54>
   1b34e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1b350:	2b00      	cmp	r3, #0
   1b352:	d100      	bne.n	1b356 <_vfprintf_r+0xc8e>
   1b354:	e092      	b.n	1b47c <_vfprintf_r+0xdb4>
   1b356:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   1b358:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   1b35a:	ab32      	add	r3, sp, #200	; 0xc8
   1b35c:	46b1      	mov	r9, r6
   1b35e:	001e      	movs	r6, r3
   1b360:	0020      	movs	r0, r4
   1b362:	0029      	movs	r1, r5
   1b364:	220a      	movs	r2, #10
   1b366:	2300      	movs	r3, #0
   1b368:	f7fb fb58 	bl	16a1c <__aeabi_uldivmod>
   1b36c:	3e01      	subs	r6, #1
   1b36e:	3230      	adds	r2, #48	; 0x30
   1b370:	7032      	strb	r2, [r6, #0]
   1b372:	2300      	movs	r3, #0
   1b374:	0020      	movs	r0, r4
   1b376:	0029      	movs	r1, r5
   1b378:	220a      	movs	r2, #10
   1b37a:	f7fb fb4f 	bl	16a1c <__aeabi_uldivmod>
   1b37e:	0003      	movs	r3, r0
   1b380:	0004      	movs	r4, r0
   1b382:	000d      	movs	r5, r1
   1b384:	430b      	orrs	r3, r1
   1b386:	d1eb      	bne.n	1b360 <_vfprintf_r+0xc98>
   1b388:	0032      	movs	r2, r6
   1b38a:	ab32      	add	r3, sp, #200	; 0xc8
   1b38c:	1a9b      	subs	r3, r3, r2
   1b38e:	9611      	str	r6, [sp, #68]	; 0x44
   1b390:	940c      	str	r4, [sp, #48]	; 0x30
   1b392:	950d      	str	r5, [sp, #52]	; 0x34
   1b394:	464e      	mov	r6, r9
   1b396:	930e      	str	r3, [sp, #56]	; 0x38
   1b398:	f7ff fb03 	bl	1a9a2 <_vfprintf_r+0x2da>
   1b39c:	2300      	movs	r3, #0
   1b39e:	930e      	str	r3, [sp, #56]	; 0x38
   1b3a0:	ab32      	add	r3, sp, #200	; 0xc8
   1b3a2:	9311      	str	r3, [sp, #68]	; 0x44
   1b3a4:	f7ff fafd 	bl	1a9a2 <_vfprintf_r+0x2da>
   1b3a8:	003a      	movs	r2, r7
   1b3aa:	4659      	mov	r1, fp
   1b3ac:	9806      	ldr	r0, [sp, #24]
   1b3ae:	f003 f8cb 	bl	1e548 <__sprint_r>
   1b3b2:	2800      	cmp	r0, #0
   1b3b4:	d000      	beq.n	1b3b8 <_vfprintf_r+0xcf0>
   1b3b6:	e717      	b.n	1b1e8 <_vfprintf_r+0xb20>
   1b3b8:	ab16      	add	r3, sp, #88	; 0x58
   1b3ba:	7fdb      	ldrb	r3, [r3, #31]
   1b3bc:	68bc      	ldr	r4, [r7, #8]
   1b3be:	4698      	mov	r8, r3
   1b3c0:	ae32      	add	r6, sp, #200	; 0xc8
   1b3c2:	e513      	b.n	1adec <_vfprintf_r+0x724>
   1b3c4:	46b1      	mov	r9, r6
   1b3c6:	e697      	b.n	1b0f8 <_vfprintf_r+0xa30>
   1b3c8:	9b14      	ldr	r3, [sp, #80]	; 0x50
   1b3ca:	1e5d      	subs	r5, r3, #1
   1b3cc:	2d00      	cmp	r5, #0
   1b3ce:	dc00      	bgt.n	1b3d2 <_vfprintf_r+0xd0a>
   1b3d0:	e616      	b.n	1b000 <_vfprintf_r+0x938>
   1b3d2:	4ba9      	ldr	r3, [pc, #676]	; (1b678 <_vfprintf_r+0xfb0>)
   1b3d4:	4699      	mov	r9, r3
   1b3d6:	2d10      	cmp	r5, #16
   1b3d8:	dc00      	bgt.n	1b3dc <_vfprintf_r+0xd14>
   1b3da:	e10a      	b.n	1b5f2 <_vfprintf_r+0xf2a>
   1b3dc:	2310      	movs	r3, #16
   1b3de:	0022      	movs	r2, r4
   1b3e0:	469a      	mov	sl, r3
   1b3e2:	465c      	mov	r4, fp
   1b3e4:	4643      	mov	r3, r8
   1b3e6:	e004      	b.n	1b3f2 <_vfprintf_r+0xd2a>
   1b3e8:	3608      	adds	r6, #8
   1b3ea:	3d10      	subs	r5, #16
   1b3ec:	2d10      	cmp	r5, #16
   1b3ee:	dc00      	bgt.n	1b3f2 <_vfprintf_r+0xd2a>
   1b3f0:	e0fc      	b.n	1b5ec <_vfprintf_r+0xf24>
   1b3f2:	4649      	mov	r1, r9
   1b3f4:	6031      	str	r1, [r6, #0]
   1b3f6:	4651      	mov	r1, sl
   1b3f8:	3210      	adds	r2, #16
   1b3fa:	3301      	adds	r3, #1
   1b3fc:	6071      	str	r1, [r6, #4]
   1b3fe:	60ba      	str	r2, [r7, #8]
   1b400:	607b      	str	r3, [r7, #4]
   1b402:	2b07      	cmp	r3, #7
   1b404:	ddf0      	ble.n	1b3e8 <_vfprintf_r+0xd20>
   1b406:	003a      	movs	r2, r7
   1b408:	0021      	movs	r1, r4
   1b40a:	9806      	ldr	r0, [sp, #24]
   1b40c:	f003 f89c 	bl	1e548 <__sprint_r>
   1b410:	2800      	cmp	r0, #0
   1b412:	d000      	beq.n	1b416 <_vfprintf_r+0xd4e>
   1b414:	e6c1      	b.n	1b19a <_vfprintf_r+0xad2>
   1b416:	68ba      	ldr	r2, [r7, #8]
   1b418:	687b      	ldr	r3, [r7, #4]
   1b41a:	ae32      	add	r6, sp, #200	; 0xc8
   1b41c:	e7e5      	b.n	1b3ea <_vfprintf_r+0xd22>
   1b41e:	990c      	ldr	r1, [sp, #48]	; 0x30
   1b420:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   1b422:	0008      	movs	r0, r1
   1b424:	4310      	orrs	r0, r2
   1b426:	2302      	movs	r3, #2
   1b428:	0002      	movs	r2, r0
   1b42a:	f7ff fa93 	bl	1a954 <_vfprintf_r+0x28c>
   1b42e:	46a3      	mov	fp, r4
   1b430:	0014      	movs	r4, r2
   1b432:	464a      	mov	r2, r9
   1b434:	1964      	adds	r4, r4, r5
   1b436:	3301      	adds	r3, #1
   1b438:	6032      	str	r2, [r6, #0]
   1b43a:	6075      	str	r5, [r6, #4]
   1b43c:	60bc      	str	r4, [r7, #8]
   1b43e:	607b      	str	r3, [r7, #4]
   1b440:	2b07      	cmp	r3, #7
   1b442:	dc00      	bgt.n	1b446 <_vfprintf_r+0xd7e>
   1b444:	e542      	b.n	1aecc <_vfprintf_r+0x804>
   1b446:	e5e8      	b.n	1b01a <_vfprintf_r+0x952>
   1b448:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1b44a:	681a      	ldr	r2, [r3, #0]
   1b44c:	f7ff fa68 	bl	1a920 <_vfprintf_r+0x258>
   1b450:	6813      	ldr	r3, [r2, #0]
   1b452:	9308      	str	r3, [sp, #32]
   1b454:	f7ff fb57 	bl	1ab06 <_vfprintf_r+0x43e>
   1b458:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1b45a:	681a      	ldr	r2, [r3, #0]
   1b45c:	e412      	b.n	1ac84 <_vfprintf_r+0x5bc>
   1b45e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1b460:	681a      	ldr	r2, [r3, #0]
   1b462:	e426      	b.n	1acb2 <_vfprintf_r+0x5ea>
   1b464:	2b30      	cmp	r3, #48	; 0x30
   1b466:	d100      	bne.n	1b46a <_vfprintf_r+0xda2>
   1b468:	e23c      	b.n	1b8e4 <_vfprintf_r+0x121c>
   1b46a:	2330      	movs	r3, #48	; 0x30
   1b46c:	3a02      	subs	r2, #2
   1b46e:	7013      	strb	r3, [r2, #0]
   1b470:	ab32      	add	r3, sp, #200	; 0xc8
   1b472:	1a9b      	subs	r3, r3, r2
   1b474:	930e      	str	r3, [sp, #56]	; 0x38
   1b476:	9211      	str	r2, [sp, #68]	; 0x44
   1b478:	f7ff fa93 	bl	1a9a2 <_vfprintf_r+0x2da>
   1b47c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1b47e:	2b09      	cmp	r3, #9
   1b480:	d900      	bls.n	1b484 <_vfprintf_r+0xdbc>
   1b482:	e768      	b.n	1b356 <_vfprintf_r+0xc8e>
   1b484:	9c09      	ldr	r4, [sp, #36]	; 0x24
   1b486:	2227      	movs	r2, #39	; 0x27
   1b488:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1b48a:	a928      	add	r1, sp, #160	; 0xa0
   1b48c:	3330      	adds	r3, #48	; 0x30
   1b48e:	548b      	strb	r3, [r1, r2]
   1b490:	2301      	movs	r3, #1
   1b492:	aa16      	add	r2, sp, #88	; 0x58
   1b494:	4694      	mov	ip, r2
   1b496:	930e      	str	r3, [sp, #56]	; 0x38
   1b498:	336e      	adds	r3, #110	; 0x6e
   1b49a:	4463      	add	r3, ip
   1b49c:	9409      	str	r4, [sp, #36]	; 0x24
   1b49e:	9311      	str	r3, [sp, #68]	; 0x44
   1b4a0:	f7ff fa7f 	bl	1a9a2 <_vfprintf_r+0x2da>
   1b4a4:	46c3      	mov	fp, r8
   1b4a6:	46a9      	mov	r9, r5
   1b4a8:	46a0      	mov	r8, r4
   1b4aa:	0014      	movs	r4, r2
   1b4ac:	464a      	mov	r2, r9
   1b4ae:	6032      	str	r2, [r6, #0]
   1b4b0:	4642      	mov	r2, r8
   1b4b2:	4444      	add	r4, r8
   1b4b4:	3301      	adds	r3, #1
   1b4b6:	6072      	str	r2, [r6, #4]
   1b4b8:	60bc      	str	r4, [r7, #8]
   1b4ba:	607b      	str	r3, [r7, #4]
   1b4bc:	2b07      	cmp	r3, #7
   1b4be:	dc00      	bgt.n	1b4c2 <_vfprintf_r+0xdfa>
   1b4c0:	e18d      	b.n	1b7de <_vfprintf_r+0x1116>
   1b4c2:	003a      	movs	r2, r7
   1b4c4:	4659      	mov	r1, fp
   1b4c6:	9806      	ldr	r0, [sp, #24]
   1b4c8:	f003 f83e 	bl	1e548 <__sprint_r>
   1b4cc:	2800      	cmp	r0, #0
   1b4ce:	d000      	beq.n	1b4d2 <_vfprintf_r+0xe0a>
   1b4d0:	e68a      	b.n	1b1e8 <_vfprintf_r+0xb20>
   1b4d2:	68bc      	ldr	r4, [r7, #8]
   1b4d4:	ae32      	add	r6, sp, #200	; 0xc8
   1b4d6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   1b4d8:	9a14      	ldr	r2, [sp, #80]	; 0x50
   1b4da:	4293      	cmp	r3, r2
   1b4dc:	db00      	blt.n	1b4e0 <_vfprintf_r+0xe18>
   1b4de:	e179      	b.n	1b7d4 <_vfprintf_r+0x110c>
   1b4e0:	9a18      	ldr	r2, [sp, #96]	; 0x60
   1b4e2:	6032      	str	r2, [r6, #0]
   1b4e4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   1b4e6:	4694      	mov	ip, r2
   1b4e8:	6072      	str	r2, [r6, #4]
   1b4ea:	687a      	ldr	r2, [r7, #4]
   1b4ec:	4464      	add	r4, ip
   1b4ee:	3201      	adds	r2, #1
   1b4f0:	60bc      	str	r4, [r7, #8]
   1b4f2:	607a      	str	r2, [r7, #4]
   1b4f4:	2a07      	cmp	r2, #7
   1b4f6:	dd00      	ble.n	1b4fa <_vfprintf_r+0xe32>
   1b4f8:	e176      	b.n	1b7e8 <_vfprintf_r+0x1120>
   1b4fa:	3608      	adds	r6, #8
   1b4fc:	9a14      	ldr	r2, [sp, #80]	; 0x50
   1b4fe:	9913      	ldr	r1, [sp, #76]	; 0x4c
   1b500:	1ad3      	subs	r3, r2, r3
   1b502:	1a52      	subs	r2, r2, r1
   1b504:	4690      	mov	r8, r2
   1b506:	429a      	cmp	r2, r3
   1b508:	dd00      	ble.n	1b50c <_vfprintf_r+0xe44>
   1b50a:	4698      	mov	r8, r3
   1b50c:	4642      	mov	r2, r8
   1b50e:	2a00      	cmp	r2, #0
   1b510:	dd0f      	ble.n	1b532 <_vfprintf_r+0xe6a>
   1b512:	9913      	ldr	r1, [sp, #76]	; 0x4c
   1b514:	9a11      	ldr	r2, [sp, #68]	; 0x44
   1b516:	468c      	mov	ip, r1
   1b518:	4462      	add	r2, ip
   1b51a:	6032      	str	r2, [r6, #0]
   1b51c:	4642      	mov	r2, r8
   1b51e:	6072      	str	r2, [r6, #4]
   1b520:	687a      	ldr	r2, [r7, #4]
   1b522:	4444      	add	r4, r8
   1b524:	3201      	adds	r2, #1
   1b526:	60bc      	str	r4, [r7, #8]
   1b528:	607a      	str	r2, [r7, #4]
   1b52a:	2a07      	cmp	r2, #7
   1b52c:	dd00      	ble.n	1b530 <_vfprintf_r+0xe68>
   1b52e:	e289      	b.n	1ba44 <_vfprintf_r+0x137c>
   1b530:	3608      	adds	r6, #8
   1b532:	4642      	mov	r2, r8
   1b534:	43d5      	mvns	r5, r2
   1b536:	17ed      	asrs	r5, r5, #31
   1b538:	4015      	ands	r5, r2
   1b53a:	1b5d      	subs	r5, r3, r5
   1b53c:	2d00      	cmp	r5, #0
   1b53e:	dc00      	bgt.n	1b542 <_vfprintf_r+0xe7a>
   1b540:	e4c5      	b.n	1aece <_vfprintf_r+0x806>
   1b542:	4a4d      	ldr	r2, [pc, #308]	; (1b678 <_vfprintf_r+0xfb0>)
   1b544:	687b      	ldr	r3, [r7, #4]
   1b546:	4691      	mov	r9, r2
   1b548:	2d10      	cmp	r5, #16
   1b54a:	dc00      	bgt.n	1b54e <_vfprintf_r+0xe86>
   1b54c:	e771      	b.n	1b432 <_vfprintf_r+0xd6a>
   1b54e:	2210      	movs	r2, #16
   1b550:	4690      	mov	r8, r2
   1b552:	0022      	movs	r2, r4
   1b554:	465c      	mov	r4, fp
   1b556:	e004      	b.n	1b562 <_vfprintf_r+0xe9a>
   1b558:	3608      	adds	r6, #8
   1b55a:	3d10      	subs	r5, #16
   1b55c:	2d10      	cmp	r5, #16
   1b55e:	dc00      	bgt.n	1b562 <_vfprintf_r+0xe9a>
   1b560:	e765      	b.n	1b42e <_vfprintf_r+0xd66>
   1b562:	4649      	mov	r1, r9
   1b564:	6031      	str	r1, [r6, #0]
   1b566:	4641      	mov	r1, r8
   1b568:	3210      	adds	r2, #16
   1b56a:	3301      	adds	r3, #1
   1b56c:	6071      	str	r1, [r6, #4]
   1b56e:	60ba      	str	r2, [r7, #8]
   1b570:	607b      	str	r3, [r7, #4]
   1b572:	2b07      	cmp	r3, #7
   1b574:	ddf0      	ble.n	1b558 <_vfprintf_r+0xe90>
   1b576:	003a      	movs	r2, r7
   1b578:	0021      	movs	r1, r4
   1b57a:	9806      	ldr	r0, [sp, #24]
   1b57c:	f002 ffe4 	bl	1e548 <__sprint_r>
   1b580:	2800      	cmp	r0, #0
   1b582:	d000      	beq.n	1b586 <_vfprintf_r+0xebe>
   1b584:	e609      	b.n	1b19a <_vfprintf_r+0xad2>
   1b586:	68ba      	ldr	r2, [r7, #8]
   1b588:	687b      	ldr	r3, [r7, #4]
   1b58a:	ae32      	add	r6, sp, #200	; 0xc8
   1b58c:	e7e5      	b.n	1b55a <_vfprintf_r+0xe92>
   1b58e:	003a      	movs	r2, r7
   1b590:	4659      	mov	r1, fp
   1b592:	9806      	ldr	r0, [sp, #24]
   1b594:	f002 ffd8 	bl	1e548 <__sprint_r>
   1b598:	2800      	cmp	r0, #0
   1b59a:	d000      	beq.n	1b59e <_vfprintf_r+0xed6>
   1b59c:	e624      	b.n	1b1e8 <_vfprintf_r+0xb20>
   1b59e:	68bc      	ldr	r4, [r7, #8]
   1b5a0:	687b      	ldr	r3, [r7, #4]
   1b5a2:	ae32      	add	r6, sp, #200	; 0xc8
   1b5a4:	e504      	b.n	1afb0 <_vfprintf_r+0x8e8>
   1b5a6:	2307      	movs	r3, #7
   1b5a8:	3207      	adds	r2, #7
   1b5aa:	439a      	bics	r2, r3
   1b5ac:	3301      	adds	r3, #1
   1b5ae:	469c      	mov	ip, r3
   1b5b0:	4494      	add	ip, r2
   1b5b2:	4663      	mov	r3, ip
   1b5b4:	930f      	str	r3, [sp, #60]	; 0x3c
   1b5b6:	6853      	ldr	r3, [r2, #4]
   1b5b8:	6812      	ldr	r2, [r2, #0]
   1b5ba:	930d      	str	r3, [sp, #52]	; 0x34
   1b5bc:	920c      	str	r2, [sp, #48]	; 0x30
   1b5be:	f7ff faa7 	bl	1ab10 <_vfprintf_r+0x448>
   1b5c2:	2207      	movs	r2, #7
   1b5c4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1b5c6:	3307      	adds	r3, #7
   1b5c8:	4393      	bics	r3, r2
   1b5ca:	3201      	adds	r2, #1
   1b5cc:	4694      	mov	ip, r2
   1b5ce:	449c      	add	ip, r3
   1b5d0:	4662      	mov	r2, ip
   1b5d2:	920f      	str	r2, [sp, #60]	; 0x3c
   1b5d4:	681a      	ldr	r2, [r3, #0]
   1b5d6:	685b      	ldr	r3, [r3, #4]
   1b5d8:	0011      	movs	r1, r2
   1b5da:	001a      	movs	r2, r3
   1b5dc:	0008      	movs	r0, r1
   1b5de:	4310      	orrs	r0, r2
   1b5e0:	910c      	str	r1, [sp, #48]	; 0x30
   1b5e2:	920d      	str	r2, [sp, #52]	; 0x34
   1b5e4:	2300      	movs	r3, #0
   1b5e6:	0002      	movs	r2, r0
   1b5e8:	f7ff f9b4 	bl	1a954 <_vfprintf_r+0x28c>
   1b5ec:	46a3      	mov	fp, r4
   1b5ee:	4698      	mov	r8, r3
   1b5f0:	0014      	movs	r4, r2
   1b5f2:	464b      	mov	r3, r9
   1b5f4:	6075      	str	r5, [r6, #4]
   1b5f6:	6033      	str	r3, [r6, #0]
   1b5f8:	1964      	adds	r4, r4, r5
   1b5fa:	e4f7      	b.n	1afec <_vfprintf_r+0x924>
   1b5fc:	003a      	movs	r2, r7
   1b5fe:	4659      	mov	r1, fp
   1b600:	9806      	ldr	r0, [sp, #24]
   1b602:	f002 ffa1 	bl	1e548 <__sprint_r>
   1b606:	2800      	cmp	r0, #0
   1b608:	d000      	beq.n	1b60c <_vfprintf_r+0xf44>
   1b60a:	e5ed      	b.n	1b1e8 <_vfprintf_r+0xb20>
   1b60c:	687b      	ldr	r3, [r7, #4]
   1b60e:	68bc      	ldr	r4, [r7, #8]
   1b610:	4698      	mov	r8, r3
   1b612:	ae32      	add	r6, sp, #200	; 0xc8
   1b614:	e4da      	b.n	1afcc <_vfprintf_r+0x904>
   1b616:	2207      	movs	r2, #7
   1b618:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1b61a:	3307      	adds	r3, #7
   1b61c:	4393      	bics	r3, r2
   1b61e:	3201      	adds	r2, #1
   1b620:	4694      	mov	ip, r2
   1b622:	449c      	add	ip, r3
   1b624:	4662      	mov	r2, ip
   1b626:	920f      	str	r2, [sp, #60]	; 0x3c
   1b628:	681a      	ldr	r2, [r3, #0]
   1b62a:	685b      	ldr	r3, [r3, #4]
   1b62c:	0011      	movs	r1, r2
   1b62e:	001a      	movs	r2, r3
   1b630:	0008      	movs	r0, r1
   1b632:	4310      	orrs	r0, r2
   1b634:	910c      	str	r1, [sp, #48]	; 0x30
   1b636:	920d      	str	r2, [sp, #52]	; 0x34
   1b638:	2301      	movs	r3, #1
   1b63a:	0002      	movs	r2, r0
   1b63c:	f7ff f98a 	bl	1a954 <_vfprintf_r+0x28c>
   1b640:	2207      	movs	r2, #7
   1b642:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1b644:	3307      	adds	r3, #7
   1b646:	4393      	bics	r3, r2
   1b648:	3201      	adds	r2, #1
   1b64a:	4694      	mov	ip, r2
   1b64c:	449c      	add	ip, r3
   1b64e:	4662      	mov	r2, ip
   1b650:	920f      	str	r2, [sp, #60]	; 0x3c
   1b652:	681a      	ldr	r2, [r3, #0]
   1b654:	685b      	ldr	r3, [r3, #4]
   1b656:	920c      	str	r2, [sp, #48]	; 0x30
   1b658:	930d      	str	r3, [sp, #52]	; 0x34
   1b65a:	f7ff f966 	bl	1a92a <_vfprintf_r+0x262>
   1b65e:	003a      	movs	r2, r7
   1b660:	4659      	mov	r1, fp
   1b662:	9806      	ldr	r0, [sp, #24]
   1b664:	f002 ff70 	bl	1e548 <__sprint_r>
   1b668:	2800      	cmp	r0, #0
   1b66a:	d000      	beq.n	1b66e <_vfprintf_r+0xfa6>
   1b66c:	e5bc      	b.n	1b1e8 <_vfprintf_r+0xb20>
   1b66e:	68bc      	ldr	r4, [r7, #8]
   1b670:	ae32      	add	r6, sp, #200	; 0xc8
   1b672:	f7ff fbe2 	bl	1ae3a <_vfprintf_r+0x772>
   1b676:	46c0      	nop			; (mov r8, r8)
   1b678:	00020768 	.word	0x00020768
   1b67c:	980c      	ldr	r0, [sp, #48]	; 0x30
   1b67e:	990d      	ldr	r1, [sp, #52]	; 0x34
   1b680:	2300      	movs	r3, #0
   1b682:	4242      	negs	r2, r0
   1b684:	418b      	sbcs	r3, r1
   1b686:	0011      	movs	r1, r2
   1b688:	001a      	movs	r2, r3
   1b68a:	232d      	movs	r3, #45	; 0x2d
   1b68c:	a816      	add	r0, sp, #88	; 0x58
   1b68e:	77c3      	strb	r3, [r0, #31]
   1b690:	0008      	movs	r0, r1
   1b692:	4310      	orrs	r0, r2
   1b694:	910c      	str	r1, [sp, #48]	; 0x30
   1b696:	920d      	str	r2, [sp, #52]	; 0x34
   1b698:	4698      	mov	r8, r3
   1b69a:	0002      	movs	r2, r0
   1b69c:	3b2c      	subs	r3, #44	; 0x2c
   1b69e:	f7ff f95d 	bl	1a95c <_vfprintf_r+0x294>
   1b6a2:	9916      	ldr	r1, [sp, #88]	; 0x58
   1b6a4:	9d15      	ldr	r5, [sp, #84]	; 0x54
   1b6a6:	000a      	movs	r2, r1
   1b6a8:	0008      	movs	r0, r1
   1b6aa:	002b      	movs	r3, r5
   1b6ac:	0029      	movs	r1, r5
   1b6ae:	f003 f9d7 	bl	1ea60 <__aeabi_dcmpun>
   1b6b2:	2800      	cmp	r0, #0
   1b6b4:	d000      	beq.n	1b6b8 <_vfprintf_r+0xff0>
   1b6b6:	e2c6      	b.n	1bc46 <_vfprintf_r+0x157e>
   1b6b8:	4653      	mov	r3, sl
   1b6ba:	3301      	adds	r3, #1
   1b6bc:	d100      	bne.n	1b6c0 <_vfprintf_r+0xff8>
   1b6be:	e09f      	b.n	1b800 <_vfprintf_r+0x1138>
   1b6c0:	2320      	movs	r3, #32
   1b6c2:	9a12      	ldr	r2, [sp, #72]	; 0x48
   1b6c4:	439a      	bics	r2, r3
   1b6c6:	920e      	str	r2, [sp, #56]	; 0x38
   1b6c8:	2a47      	cmp	r2, #71	; 0x47
   1b6ca:	d100      	bne.n	1b6ce <_vfprintf_r+0x1006>
   1b6cc:	e1a1      	b.n	1ba12 <_vfprintf_r+0x134a>
   1b6ce:	2380      	movs	r3, #128	; 0x80
   1b6d0:	005b      	lsls	r3, r3, #1
   1b6d2:	4323      	orrs	r3, r4
   1b6d4:	9309      	str	r3, [sp, #36]	; 0x24
   1b6d6:	9b15      	ldr	r3, [sp, #84]	; 0x54
   1b6d8:	2b00      	cmp	r3, #0
   1b6da:	da00      	bge.n	1b6de <_vfprintf_r+0x1016>
   1b6dc:	e1ed      	b.n	1baba <_vfprintf_r+0x13f2>
   1b6de:	9a16      	ldr	r2, [sp, #88]	; 0x58
   1b6e0:	9308      	str	r3, [sp, #32]
   1b6e2:	2300      	movs	r3, #0
   1b6e4:	4691      	mov	r9, r2
   1b6e6:	9310      	str	r3, [sp, #64]	; 0x40
   1b6e8:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1b6ea:	2b66      	cmp	r3, #102	; 0x66
   1b6ec:	d100      	bne.n	1b6f0 <_vfprintf_r+0x1028>
   1b6ee:	e1b8      	b.n	1ba62 <_vfprintf_r+0x139a>
   1b6f0:	2b46      	cmp	r3, #70	; 0x46
   1b6f2:	d100      	bne.n	1b6f6 <_vfprintf_r+0x102e>
   1b6f4:	e237      	b.n	1bb66 <_vfprintf_r+0x149e>
   1b6f6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   1b6f8:	9806      	ldr	r0, [sp, #24]
   1b6fa:	3a45      	subs	r2, #69	; 0x45
   1b6fc:	0013      	movs	r3, r2
   1b6fe:	4259      	negs	r1, r3
   1b700:	4159      	adcs	r1, r3
   1b702:	ab20      	add	r3, sp, #128	; 0x80
   1b704:	000d      	movs	r5, r1
   1b706:	9303      	str	r3, [sp, #12]
   1b708:	ab1f      	add	r3, sp, #124	; 0x7c
   1b70a:	9302      	str	r3, [sp, #8]
   1b70c:	2302      	movs	r3, #2
   1b70e:	aa23      	add	r2, sp, #140	; 0x8c
   1b710:	4455      	add	r5, sl
   1b712:	921b      	str	r2, [sp, #108]	; 0x6c
   1b714:	9204      	str	r2, [sp, #16]
   1b716:	9300      	str	r3, [sp, #0]
   1b718:	9501      	str	r5, [sp, #4]
   1b71a:	9b08      	ldr	r3, [sp, #32]
   1b71c:	464a      	mov	r2, r9
   1b71e:	f000 fcb9 	bl	1c094 <_dtoa_r>
   1b722:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1b724:	9011      	str	r0, [sp, #68]	; 0x44
   1b726:	2b67      	cmp	r3, #103	; 0x67
   1b728:	d000      	beq.n	1b72c <_vfprintf_r+0x1064>
   1b72a:	e20b      	b.n	1bb44 <_vfprintf_r+0x147c>
   1b72c:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1b72e:	4698      	mov	r8, r3
   1b730:	44a8      	add	r8, r5
   1b732:	07e3      	lsls	r3, r4, #31
   1b734:	d400      	bmi.n	1b738 <_vfprintf_r+0x1070>
   1b736:	e277      	b.n	1bc28 <_vfprintf_r+0x1560>
   1b738:	2300      	movs	r3, #0
   1b73a:	2200      	movs	r2, #0
   1b73c:	4648      	mov	r0, r9
   1b73e:	9908      	ldr	r1, [sp, #32]
   1b740:	f7fb f904 	bl	1694c <__aeabi_dcmpeq>
   1b744:	4643      	mov	r3, r8
   1b746:	2800      	cmp	r0, #0
   1b748:	d10a      	bne.n	1b760 <_vfprintf_r+0x1098>
   1b74a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   1b74c:	4543      	cmp	r3, r8
   1b74e:	d207      	bcs.n	1b760 <_vfprintf_r+0x1098>
   1b750:	2130      	movs	r1, #48	; 0x30
   1b752:	4640      	mov	r0, r8
   1b754:	1c5a      	adds	r2, r3, #1
   1b756:	9223      	str	r2, [sp, #140]	; 0x8c
   1b758:	7019      	strb	r1, [r3, #0]
   1b75a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   1b75c:	4298      	cmp	r0, r3
   1b75e:	d8f9      	bhi.n	1b754 <_vfprintf_r+0x108c>
   1b760:	9a11      	ldr	r2, [sp, #68]	; 0x44
   1b762:	1a9b      	subs	r3, r3, r2
   1b764:	9314      	str	r3, [sp, #80]	; 0x50
   1b766:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1b768:	2b47      	cmp	r3, #71	; 0x47
   1b76a:	d100      	bne.n	1b76e <_vfprintf_r+0x10a6>
   1b76c:	e0d0      	b.n	1b910 <_vfprintf_r+0x1248>
   1b76e:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1b770:	2b65      	cmp	r3, #101	; 0x65
   1b772:	dc00      	bgt.n	1b776 <_vfprintf_r+0x10ae>
   1b774:	e2d5      	b.n	1bd22 <_vfprintf_r+0x165a>
   1b776:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1b778:	2b66      	cmp	r3, #102	; 0x66
   1b77a:	d100      	bne.n	1b77e <_vfprintf_r+0x10b6>
   1b77c:	e1c6      	b.n	1bb0c <_vfprintf_r+0x1444>
   1b77e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   1b780:	9313      	str	r3, [sp, #76]	; 0x4c
   1b782:	9b14      	ldr	r3, [sp, #80]	; 0x50
   1b784:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   1b786:	0019      	movs	r1, r3
   1b788:	4291      	cmp	r1, r2
   1b78a:	dd00      	ble.n	1b78e <_vfprintf_r+0x10c6>
   1b78c:	e1a0      	b.n	1bad0 <_vfprintf_r+0x1408>
   1b78e:	07e3      	lsls	r3, r4, #31
   1b790:	d500      	bpl.n	1b794 <_vfprintf_r+0x10cc>
   1b792:	e242      	b.n	1bc1a <_vfprintf_r+0x1552>
   1b794:	43d3      	mvns	r3, r2
   1b796:	17db      	asrs	r3, r3, #31
   1b798:	0011      	movs	r1, r2
   1b79a:	401a      	ands	r2, r3
   1b79c:	2367      	movs	r3, #103	; 0x67
   1b79e:	9208      	str	r2, [sp, #32]
   1b7a0:	910e      	str	r1, [sp, #56]	; 0x38
   1b7a2:	9312      	str	r3, [sp, #72]	; 0x48
   1b7a4:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1b7a6:	2b00      	cmp	r3, #0
   1b7a8:	d000      	beq.n	1b7ac <_vfprintf_r+0x10e4>
   1b7aa:	e0a9      	b.n	1b900 <_vfprintf_r+0x1238>
   1b7ac:	ab16      	add	r3, sp, #88	; 0x58
   1b7ae:	7fdb      	ldrb	r3, [r3, #31]
   1b7b0:	4698      	mov	r8, r3
   1b7b2:	2300      	movs	r3, #0
   1b7b4:	469a      	mov	sl, r3
   1b7b6:	f7ff f8fc 	bl	1a9b2 <_vfprintf_r+0x2ea>
   1b7ba:	46cb      	mov	fp, r9
   1b7bc:	46a1      	mov	r9, r4
   1b7be:	0014      	movs	r4, r2
   1b7c0:	e637      	b.n	1b432 <_vfprintf_r+0xd6a>
   1b7c2:	464b      	mov	r3, r9
   1b7c4:	6d98      	ldr	r0, [r3, #88]	; 0x58
   1b7c6:	f002 f86f 	bl	1d8a8 <__retarget_lock_release_recursive>
   1b7ca:	2301      	movs	r3, #1
   1b7cc:	425b      	negs	r3, r3
   1b7ce:	930a      	str	r3, [sp, #40]	; 0x28
   1b7d0:	f7ff f82b 	bl	1a82a <_vfprintf_r+0x162>
   1b7d4:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1b7d6:	07d2      	lsls	r2, r2, #31
   1b7d8:	d400      	bmi.n	1b7dc <_vfprintf_r+0x1114>
   1b7da:	e68f      	b.n	1b4fc <_vfprintf_r+0xe34>
   1b7dc:	e680      	b.n	1b4e0 <_vfprintf_r+0xe18>
   1b7de:	3608      	adds	r6, #8
   1b7e0:	e679      	b.n	1b4d6 <_vfprintf_r+0xe0e>
   1b7e2:	68bc      	ldr	r4, [r7, #8]
   1b7e4:	f7ff fb73 	bl	1aece <_vfprintf_r+0x806>
   1b7e8:	003a      	movs	r2, r7
   1b7ea:	4659      	mov	r1, fp
   1b7ec:	9806      	ldr	r0, [sp, #24]
   1b7ee:	f002 feab 	bl	1e548 <__sprint_r>
   1b7f2:	2800      	cmp	r0, #0
   1b7f4:	d000      	beq.n	1b7f8 <_vfprintf_r+0x1130>
   1b7f6:	e4f7      	b.n	1b1e8 <_vfprintf_r+0xb20>
   1b7f8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   1b7fa:	68bc      	ldr	r4, [r7, #8]
   1b7fc:	ae32      	add	r6, sp, #200	; 0xc8
   1b7fe:	e67d      	b.n	1b4fc <_vfprintf_r+0xe34>
   1b800:	2320      	movs	r3, #32
   1b802:	9a12      	ldr	r2, [sp, #72]	; 0x48
   1b804:	439a      	bics	r2, r3
   1b806:	3b1a      	subs	r3, #26
   1b808:	920e      	str	r2, [sp, #56]	; 0x38
   1b80a:	469a      	mov	sl, r3
   1b80c:	e75f      	b.n	1b6ce <_vfprintf_r+0x1006>
   1b80e:	232d      	movs	r3, #45	; 0x2d
   1b810:	aa16      	add	r2, sp, #88	; 0x58
   1b812:	77d3      	strb	r3, [r2, #31]
   1b814:	4698      	mov	r8, r3
   1b816:	f7ff faa8 	bl	1ad6a <_vfprintf_r+0x6a2>
   1b81a:	003a      	movs	r2, r7
   1b81c:	4659      	mov	r1, fp
   1b81e:	9806      	ldr	r0, [sp, #24]
   1b820:	f002 fe92 	bl	1e548 <__sprint_r>
   1b824:	2800      	cmp	r0, #0
   1b826:	d000      	beq.n	1b82a <_vfprintf_r+0x1162>
   1b828:	e4de      	b.n	1b1e8 <_vfprintf_r+0xb20>
   1b82a:	ae32      	add	r6, sp, #200	; 0xc8
   1b82c:	e419      	b.n	1b062 <_vfprintf_r+0x99a>
   1b82e:	4be3      	ldr	r3, [pc, #908]	; (1bbbc <_vfprintf_r+0x14f4>)
   1b830:	3401      	adds	r4, #1
   1b832:	6033      	str	r3, [r6, #0]
   1b834:	2301      	movs	r3, #1
   1b836:	6073      	str	r3, [r6, #4]
   1b838:	687b      	ldr	r3, [r7, #4]
   1b83a:	60bc      	str	r4, [r7, #8]
   1b83c:	3301      	adds	r3, #1
   1b83e:	607b      	str	r3, [r7, #4]
   1b840:	2b07      	cmp	r3, #7
   1b842:	dd00      	ble.n	1b846 <_vfprintf_r+0x117e>
   1b844:	e155      	b.n	1baf2 <_vfprintf_r+0x142a>
   1b846:	3608      	adds	r6, #8
   1b848:	2800      	cmp	r0, #0
   1b84a:	d107      	bne.n	1b85c <_vfprintf_r+0x1194>
   1b84c:	9b14      	ldr	r3, [sp, #80]	; 0x50
   1b84e:	2b00      	cmp	r3, #0
   1b850:	d104      	bne.n	1b85c <_vfprintf_r+0x1194>
   1b852:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1b854:	07db      	lsls	r3, r3, #31
   1b856:	d401      	bmi.n	1b85c <_vfprintf_r+0x1194>
   1b858:	f7ff fb39 	bl	1aece <_vfprintf_r+0x806>
   1b85c:	9b18      	ldr	r3, [sp, #96]	; 0x60
   1b85e:	6033      	str	r3, [r6, #0]
   1b860:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   1b862:	1919      	adds	r1, r3, r4
   1b864:	6073      	str	r3, [r6, #4]
   1b866:	687b      	ldr	r3, [r7, #4]
   1b868:	60b9      	str	r1, [r7, #8]
   1b86a:	3301      	adds	r3, #1
   1b86c:	607b      	str	r3, [r7, #4]
   1b86e:	2b07      	cmp	r3, #7
   1b870:	dd00      	ble.n	1b874 <_vfprintf_r+0x11ac>
   1b872:	e1c4      	b.n	1bbfe <_vfprintf_r+0x1536>
   1b874:	0032      	movs	r2, r6
   1b876:	3208      	adds	r2, #8
   1b878:	2800      	cmp	r0, #0
   1b87a:	da00      	bge.n	1b87e <_vfprintf_r+0x11b6>
   1b87c:	e195      	b.n	1bbaa <_vfprintf_r+0x14e2>
   1b87e:	9811      	ldr	r0, [sp, #68]	; 0x44
   1b880:	3301      	adds	r3, #1
   1b882:	6010      	str	r0, [r2, #0]
   1b884:	9814      	ldr	r0, [sp, #80]	; 0x50
   1b886:	607b      	str	r3, [r7, #4]
   1b888:	1844      	adds	r4, r0, r1
   1b88a:	6050      	str	r0, [r2, #4]
   1b88c:	60bc      	str	r4, [r7, #8]
   1b88e:	2b07      	cmp	r3, #7
   1b890:	dd01      	ble.n	1b896 <_vfprintf_r+0x11ce>
   1b892:	f7ff fbc2 	bl	1b01a <_vfprintf_r+0x952>
   1b896:	3208      	adds	r2, #8
   1b898:	0016      	movs	r6, r2
   1b89a:	f7ff fb18 	bl	1aece <_vfprintf_r+0x806>
   1b89e:	990f      	ldr	r1, [sp, #60]	; 0x3c
   1b8a0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1b8a2:	680b      	ldr	r3, [r1, #0]
   1b8a4:	601a      	str	r2, [r3, #0]
   1b8a6:	17d2      	asrs	r2, r2, #31
   1b8a8:	605a      	str	r2, [r3, #4]
   1b8aa:	000b      	movs	r3, r1
   1b8ac:	3304      	adds	r3, #4
   1b8ae:	930f      	str	r3, [sp, #60]	; 0x3c
   1b8b0:	f7fe ff58 	bl	1a764 <_vfprintf_r+0x9c>
   1b8b4:	464b      	mov	r3, r9
   1b8b6:	9a07      	ldr	r2, [sp, #28]
   1b8b8:	431c      	orrs	r4, r3
   1b8ba:	3201      	adds	r2, #1
   1b8bc:	7813      	ldrb	r3, [r2, #0]
   1b8be:	9207      	str	r2, [sp, #28]
   1b8c0:	f7fe ff8b 	bl	1a7da <_vfprintf_r+0x112>
   1b8c4:	003a      	movs	r2, r7
   1b8c6:	4659      	mov	r1, fp
   1b8c8:	9806      	ldr	r0, [sp, #24]
   1b8ca:	f002 fe3d 	bl	1e548 <__sprint_r>
   1b8ce:	2800      	cmp	r0, #0
   1b8d0:	d000      	beq.n	1b8d4 <_vfprintf_r+0x120c>
   1b8d2:	e489      	b.n	1b1e8 <_vfprintf_r+0xb20>
   1b8d4:	68bc      	ldr	r4, [r7, #8]
   1b8d6:	ae32      	add	r6, sp, #200	; 0xc8
   1b8d8:	f7ff fbdc 	bl	1b094 <_vfprintf_r+0x9cc>
   1b8dc:	4bb8      	ldr	r3, [pc, #736]	; (1bbc0 <_vfprintf_r+0x14f8>)
   1b8de:	9311      	str	r3, [sp, #68]	; 0x44
   1b8e0:	f7ff fa4a 	bl	1ad78 <_vfprintf_r+0x6b0>
   1b8e4:	9a11      	ldr	r2, [sp, #68]	; 0x44
   1b8e6:	ab32      	add	r3, sp, #200	; 0xc8
   1b8e8:	1a9b      	subs	r3, r3, r2
   1b8ea:	930e      	str	r3, [sp, #56]	; 0x38
   1b8ec:	f7ff f859 	bl	1a9a2 <_vfprintf_r+0x2da>
   1b8f0:	9811      	ldr	r0, [sp, #68]	; 0x44
   1b8f2:	f7fe fd03 	bl	1a2fc <strlen>
   1b8f6:	0002      	movs	r2, r0
   1b8f8:	900e      	str	r0, [sp, #56]	; 0x38
   1b8fa:	0003      	movs	r3, r0
   1b8fc:	f7ff f9a1 	bl	1ac42 <_vfprintf_r+0x57a>
   1b900:	232d      	movs	r3, #45	; 0x2d
   1b902:	aa16      	add	r2, sp, #88	; 0x58
   1b904:	77d3      	strb	r3, [r2, #31]
   1b906:	4698      	mov	r8, r3
   1b908:	2300      	movs	r3, #0
   1b90a:	469a      	mov	sl, r3
   1b90c:	f7ff f854 	bl	1a9b8 <_vfprintf_r+0x2f0>
   1b910:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   1b912:	9313      	str	r3, [sp, #76]	; 0x4c
   1b914:	1cda      	adds	r2, r3, #3
   1b916:	db02      	blt.n	1b91e <_vfprintf_r+0x1256>
   1b918:	459a      	cmp	sl, r3
   1b91a:	db00      	blt.n	1b91e <_vfprintf_r+0x1256>
   1b91c:	e731      	b.n	1b782 <_vfprintf_r+0x10ba>
   1b91e:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1b920:	3b02      	subs	r3, #2
   1b922:	9312      	str	r3, [sp, #72]	; 0x48
   1b924:	222c      	movs	r2, #44	; 0x2c
   1b926:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   1b928:	2148      	movs	r1, #72	; 0x48
   1b92a:	1e5d      	subs	r5, r3, #1
   1b92c:	ab16      	add	r3, sp, #88	; 0x58
   1b92e:	189b      	adds	r3, r3, r2
   1b930:	466a      	mov	r2, sp
   1b932:	1852      	adds	r2, r2, r1
   1b934:	7812      	ldrb	r2, [r2, #0]
   1b936:	951f      	str	r5, [sp, #124]	; 0x7c
   1b938:	701a      	strb	r2, [r3, #0]
   1b93a:	2d00      	cmp	r5, #0
   1b93c:	da00      	bge.n	1b940 <_vfprintf_r+0x1278>
   1b93e:	e1cb      	b.n	1bcd8 <_vfprintf_r+0x1610>
   1b940:	212d      	movs	r1, #45	; 0x2d
   1b942:	232b      	movs	r3, #43	; 0x2b
   1b944:	aa16      	add	r2, sp, #88	; 0x58
   1b946:	1852      	adds	r2, r2, r1
   1b948:	7013      	strb	r3, [r2, #0]
   1b94a:	2d09      	cmp	r5, #9
   1b94c:	dc00      	bgt.n	1b950 <_vfprintf_r+0x1288>
   1b94e:	e16d      	b.n	1bc2c <_vfprintf_r+0x1564>
   1b950:	aa16      	add	r2, sp, #88	; 0x58
   1b952:	233b      	movs	r3, #59	; 0x3b
   1b954:	4694      	mov	ip, r2
   1b956:	4463      	add	r3, ip
   1b958:	469a      	mov	sl, r3
   1b95a:	46b1      	mov	r9, r6
   1b95c:	46a0      	mov	r8, r4
   1b95e:	4656      	mov	r6, sl
   1b960:	e000      	b.n	1b964 <_vfprintf_r+0x129c>
   1b962:	0026      	movs	r6, r4
   1b964:	0028      	movs	r0, r5
   1b966:	210a      	movs	r1, #10
   1b968:	f7fa ffda 	bl	16920 <__aeabi_idivmod>
   1b96c:	1e74      	subs	r4, r6, #1
   1b96e:	3130      	adds	r1, #48	; 0x30
   1b970:	7021      	strb	r1, [r4, #0]
   1b972:	0028      	movs	r0, r5
   1b974:	210a      	movs	r1, #10
   1b976:	f7fa feed 	bl	16754 <__divsi3>
   1b97a:	0005      	movs	r5, r0
   1b97c:	2809      	cmp	r0, #9
   1b97e:	dcf0      	bgt.n	1b962 <_vfprintf_r+0x129a>
   1b980:	0023      	movs	r3, r4
   1b982:	4644      	mov	r4, r8
   1b984:	46b0      	mov	r8, r6
   1b986:	464e      	mov	r6, r9
   1b988:	4699      	mov	r9, r3
   1b98a:	0003      	movs	r3, r0
   1b98c:	3330      	adds	r3, #48	; 0x30
   1b98e:	b2d8      	uxtb	r0, r3
   1b990:	4643      	mov	r3, r8
   1b992:	3b02      	subs	r3, #2
   1b994:	7018      	strb	r0, [r3, #0]
   1b996:	459a      	cmp	sl, r3
   1b998:	d800      	bhi.n	1b99c <_vfprintf_r+0x12d4>
   1b99a:	e1f6      	b.n	1bd8a <_vfprintf_r+0x16c2>
   1b99c:	4642      	mov	r2, r8
   1b99e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   1b9a0:	4645      	mov	r5, r8
   1b9a2:	1a99      	subs	r1, r3, r2
   1b9a4:	2301      	movs	r3, #1
   1b9a6:	3107      	adds	r1, #7
   1b9a8:	425b      	negs	r3, r3
   1b9aa:	e001      	b.n	1b9b0 <_vfprintf_r+0x12e8>
   1b9ac:	5ce8      	ldrb	r0, [r5, r3]
   1b9ae:	3301      	adds	r3, #1
   1b9b0:	aa21      	add	r2, sp, #132	; 0x84
   1b9b2:	18d2      	adds	r2, r2, r3
   1b9b4:	70d0      	strb	r0, [r2, #3]
   1b9b6:	428b      	cmp	r3, r1
   1b9b8:	d1f8      	bne.n	1b9ac <_vfprintf_r+0x12e4>
   1b9ba:	a916      	add	r1, sp, #88	; 0x58
   1b9bc:	468c      	mov	ip, r1
   1b9be:	222e      	movs	r2, #46	; 0x2e
   1b9c0:	464b      	mov	r3, r9
   1b9c2:	4462      	add	r2, ip
   1b9c4:	4694      	mov	ip, r2
   1b9c6:	1afb      	subs	r3, r7, r3
   1b9c8:	4463      	add	r3, ip
   1b9ca:	aa21      	add	r2, sp, #132	; 0x84
   1b9cc:	9914      	ldr	r1, [sp, #80]	; 0x50
   1b9ce:	1a9b      	subs	r3, r3, r2
   1b9d0:	469c      	mov	ip, r3
   1b9d2:	000a      	movs	r2, r1
   1b9d4:	4462      	add	r2, ip
   1b9d6:	931a      	str	r3, [sp, #104]	; 0x68
   1b9d8:	920e      	str	r2, [sp, #56]	; 0x38
   1b9da:	2901      	cmp	r1, #1
   1b9dc:	dc00      	bgt.n	1b9e0 <_vfprintf_r+0x1318>
   1b9de:	e170      	b.n	1bcc2 <_vfprintf_r+0x15fa>
   1b9e0:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   1b9e2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1b9e4:	4694      	mov	ip, r2
   1b9e6:	4463      	add	r3, ip
   1b9e8:	001a      	movs	r2, r3
   1b9ea:	930e      	str	r3, [sp, #56]	; 0x38
   1b9ec:	43db      	mvns	r3, r3
   1b9ee:	17db      	asrs	r3, r3, #31
   1b9f0:	401a      	ands	r2, r3
   1b9f2:	2300      	movs	r3, #0
   1b9f4:	9208      	str	r2, [sp, #32]
   1b9f6:	9313      	str	r3, [sp, #76]	; 0x4c
   1b9f8:	e6d4      	b.n	1b7a4 <_vfprintf_r+0x10dc>
   1b9fa:	003a      	movs	r2, r7
   1b9fc:	4659      	mov	r1, fp
   1b9fe:	9806      	ldr	r0, [sp, #24]
   1ba00:	f002 fda2 	bl	1e548 <__sprint_r>
   1ba04:	2800      	cmp	r0, #0
   1ba06:	d001      	beq.n	1ba0c <_vfprintf_r+0x1344>
   1ba08:	f7ff fbee 	bl	1b1e8 <_vfprintf_r+0xb20>
   1ba0c:	68bc      	ldr	r4, [r7, #8]
   1ba0e:	ae32      	add	r6, sp, #200	; 0xc8
   1ba10:	e46a      	b.n	1b2e8 <_vfprintf_r+0xc20>
   1ba12:	4653      	mov	r3, sl
   1ba14:	2b00      	cmp	r3, #0
   1ba16:	d000      	beq.n	1ba1a <_vfprintf_r+0x1352>
   1ba18:	e659      	b.n	1b6ce <_vfprintf_r+0x1006>
   1ba1a:	3301      	adds	r3, #1
   1ba1c:	469a      	mov	sl, r3
   1ba1e:	e656      	b.n	1b6ce <_vfprintf_r+0x1006>
   1ba20:	4653      	mov	r3, sl
   1ba22:	9308      	str	r3, [sp, #32]
   1ba24:	2b06      	cmp	r3, #6
   1ba26:	d901      	bls.n	1ba2c <_vfprintf_r+0x1364>
   1ba28:	2306      	movs	r3, #6
   1ba2a:	9308      	str	r3, [sp, #32]
   1ba2c:	9b08      	ldr	r3, [sp, #32]
   1ba2e:	950f      	str	r5, [sp, #60]	; 0x3c
   1ba30:	930e      	str	r3, [sp, #56]	; 0x38
   1ba32:	2300      	movs	r3, #0
   1ba34:	4698      	mov	r8, r3
   1ba36:	469a      	mov	sl, r3
   1ba38:	9313      	str	r3, [sp, #76]	; 0x4c
   1ba3a:	4b62      	ldr	r3, [pc, #392]	; (1bbc4 <_vfprintf_r+0x14fc>)
   1ba3c:	9409      	str	r4, [sp, #36]	; 0x24
   1ba3e:	9311      	str	r3, [sp, #68]	; 0x44
   1ba40:	f7fe ffbd 	bl	1a9be <_vfprintf_r+0x2f6>
   1ba44:	003a      	movs	r2, r7
   1ba46:	4659      	mov	r1, fp
   1ba48:	9806      	ldr	r0, [sp, #24]
   1ba4a:	f002 fd7d 	bl	1e548 <__sprint_r>
   1ba4e:	2800      	cmp	r0, #0
   1ba50:	d001      	beq.n	1ba56 <_vfprintf_r+0x138e>
   1ba52:	f7ff fbc9 	bl	1b1e8 <_vfprintf_r+0xb20>
   1ba56:	9b14      	ldr	r3, [sp, #80]	; 0x50
   1ba58:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   1ba5a:	68bc      	ldr	r4, [r7, #8]
   1ba5c:	1a9b      	subs	r3, r3, r2
   1ba5e:	ae32      	add	r6, sp, #200	; 0xc8
   1ba60:	e567      	b.n	1b532 <_vfprintf_r+0xe6a>
   1ba62:	ab23      	add	r3, sp, #140	; 0x8c
   1ba64:	931b      	str	r3, [sp, #108]	; 0x6c
   1ba66:	9304      	str	r3, [sp, #16]
   1ba68:	ab20      	add	r3, sp, #128	; 0x80
   1ba6a:	9303      	str	r3, [sp, #12]
   1ba6c:	ab1f      	add	r3, sp, #124	; 0x7c
   1ba6e:	9302      	str	r3, [sp, #8]
   1ba70:	4653      	mov	r3, sl
   1ba72:	9301      	str	r3, [sp, #4]
   1ba74:	2303      	movs	r3, #3
   1ba76:	464a      	mov	r2, r9
   1ba78:	9300      	str	r3, [sp, #0]
   1ba7a:	9806      	ldr	r0, [sp, #24]
   1ba7c:	9b08      	ldr	r3, [sp, #32]
   1ba7e:	f000 fb09 	bl	1c094 <_dtoa_r>
   1ba82:	0003      	movs	r3, r0
   1ba84:	4453      	add	r3, sl
   1ba86:	4698      	mov	r8, r3
   1ba88:	4655      	mov	r5, sl
   1ba8a:	9011      	str	r0, [sp, #68]	; 0x44
   1ba8c:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1ba8e:	781b      	ldrb	r3, [r3, #0]
   1ba90:	2b30      	cmp	r3, #48	; 0x30
   1ba92:	d002      	beq.n	1ba9a <_vfprintf_r+0x13d2>
   1ba94:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   1ba96:	4498      	add	r8, r3
   1ba98:	e64e      	b.n	1b738 <_vfprintf_r+0x1070>
   1ba9a:	2200      	movs	r2, #0
   1ba9c:	2300      	movs	r3, #0
   1ba9e:	4648      	mov	r0, r9
   1baa0:	9908      	ldr	r1, [sp, #32]
   1baa2:	f7fa ff53 	bl	1694c <__aeabi_dcmpeq>
   1baa6:	2800      	cmp	r0, #0
   1baa8:	d1f4      	bne.n	1ba94 <_vfprintf_r+0x13cc>
   1baaa:	2301      	movs	r3, #1
   1baac:	1b5b      	subs	r3, r3, r5
   1baae:	931f      	str	r3, [sp, #124]	; 0x7c
   1bab0:	4498      	add	r8, r3
   1bab2:	e641      	b.n	1b738 <_vfprintf_r+0x1070>
   1bab4:	46c1      	mov	r9, r8
   1bab6:	f7ff fb1f 	bl	1b0f8 <_vfprintf_r+0xa30>
   1baba:	2280      	movs	r2, #128	; 0x80
   1babc:	0612      	lsls	r2, r2, #24
   1babe:	4694      	mov	ip, r2
   1bac0:	9b16      	ldr	r3, [sp, #88]	; 0x58
   1bac2:	4699      	mov	r9, r3
   1bac4:	9b15      	ldr	r3, [sp, #84]	; 0x54
   1bac6:	4463      	add	r3, ip
   1bac8:	9308      	str	r3, [sp, #32]
   1baca:	232d      	movs	r3, #45	; 0x2d
   1bacc:	9310      	str	r3, [sp, #64]	; 0x40
   1bace:	e60b      	b.n	1b6e8 <_vfprintf_r+0x1020>
   1bad0:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   1bad2:	9b14      	ldr	r3, [sp, #80]	; 0x50
   1bad4:	4694      	mov	ip, r2
   1bad6:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   1bad8:	4463      	add	r3, ip
   1bada:	930e      	str	r3, [sp, #56]	; 0x38
   1badc:	2a00      	cmp	r2, #0
   1bade:	dc00      	bgt.n	1bae2 <_vfprintf_r+0x141a>
   1bae0:	e0e3      	b.n	1bcaa <_vfprintf_r+0x15e2>
   1bae2:	001a      	movs	r2, r3
   1bae4:	43db      	mvns	r3, r3
   1bae6:	17db      	asrs	r3, r3, #31
   1bae8:	401a      	ands	r2, r3
   1baea:	2367      	movs	r3, #103	; 0x67
   1baec:	9208      	str	r2, [sp, #32]
   1baee:	9312      	str	r3, [sp, #72]	; 0x48
   1baf0:	e658      	b.n	1b7a4 <_vfprintf_r+0x10dc>
   1baf2:	003a      	movs	r2, r7
   1baf4:	4659      	mov	r1, fp
   1baf6:	9806      	ldr	r0, [sp, #24]
   1baf8:	f002 fd26 	bl	1e548 <__sprint_r>
   1bafc:	2800      	cmp	r0, #0
   1bafe:	d001      	beq.n	1bb04 <_vfprintf_r+0x143c>
   1bb00:	f7ff fb72 	bl	1b1e8 <_vfprintf_r+0xb20>
   1bb04:	981f      	ldr	r0, [sp, #124]	; 0x7c
   1bb06:	68bc      	ldr	r4, [r7, #8]
   1bb08:	ae32      	add	r6, sp, #200	; 0xc8
   1bb0a:	e69d      	b.n	1b848 <_vfprintf_r+0x1180>
   1bb0c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   1bb0e:	9313      	str	r3, [sp, #76]	; 0x4c
   1bb10:	2b00      	cmp	r3, #0
   1bb12:	dc00      	bgt.n	1bb16 <_vfprintf_r+0x144e>
   1bb14:	e0f2      	b.n	1bcfc <_vfprintf_r+0x1634>
   1bb16:	4652      	mov	r2, sl
   1bb18:	2a00      	cmp	r2, #0
   1bb1a:	d000      	beq.n	1bb1e <_vfprintf_r+0x1456>
   1bb1c:	e0a0      	b.n	1bc60 <_vfprintf_r+0x1598>
   1bb1e:	07e2      	lsls	r2, r4, #31
   1bb20:	d500      	bpl.n	1bb24 <_vfprintf_r+0x145c>
   1bb22:	e09d      	b.n	1bc60 <_vfprintf_r+0x1598>
   1bb24:	9308      	str	r3, [sp, #32]
   1bb26:	930e      	str	r3, [sp, #56]	; 0x38
   1bb28:	e63c      	b.n	1b7a4 <_vfprintf_r+0x10dc>
   1bb2a:	ab16      	add	r3, sp, #88	; 0x58
   1bb2c:	7fdb      	ldrb	r3, [r3, #31]
   1bb2e:	950f      	str	r5, [sp, #60]	; 0x3c
   1bb30:	4698      	mov	r8, r3
   1bb32:	4653      	mov	r3, sl
   1bb34:	9308      	str	r3, [sp, #32]
   1bb36:	930e      	str	r3, [sp, #56]	; 0x38
   1bb38:	2300      	movs	r3, #0
   1bb3a:	9409      	str	r4, [sp, #36]	; 0x24
   1bb3c:	469a      	mov	sl, r3
   1bb3e:	9313      	str	r3, [sp, #76]	; 0x4c
   1bb40:	f7fe ff37 	bl	1a9b2 <_vfprintf_r+0x2ea>
   1bb44:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1bb46:	4698      	mov	r8, r3
   1bb48:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1bb4a:	44a8      	add	r8, r5
   1bb4c:	2b47      	cmp	r3, #71	; 0x47
   1bb4e:	d000      	beq.n	1bb52 <_vfprintf_r+0x148a>
   1bb50:	e5f2      	b.n	1b738 <_vfprintf_r+0x1070>
   1bb52:	07e3      	lsls	r3, r4, #31
   1bb54:	d400      	bmi.n	1bb58 <_vfprintf_r+0x1490>
   1bb56:	e0dc      	b.n	1bd12 <_vfprintf_r+0x164a>
   1bb58:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1bb5a:	4698      	mov	r8, r3
   1bb5c:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1bb5e:	44a8      	add	r8, r5
   1bb60:	2b46      	cmp	r3, #70	; 0x46
   1bb62:	d093      	beq.n	1ba8c <_vfprintf_r+0x13c4>
   1bb64:	e5e8      	b.n	1b738 <_vfprintf_r+0x1070>
   1bb66:	ab23      	add	r3, sp, #140	; 0x8c
   1bb68:	931b      	str	r3, [sp, #108]	; 0x6c
   1bb6a:	9304      	str	r3, [sp, #16]
   1bb6c:	ab20      	add	r3, sp, #128	; 0x80
   1bb6e:	9303      	str	r3, [sp, #12]
   1bb70:	ab1f      	add	r3, sp, #124	; 0x7c
   1bb72:	9302      	str	r3, [sp, #8]
   1bb74:	4653      	mov	r3, sl
   1bb76:	9301      	str	r3, [sp, #4]
   1bb78:	2303      	movs	r3, #3
   1bb7a:	464a      	mov	r2, r9
   1bb7c:	9300      	str	r3, [sp, #0]
   1bb7e:	9806      	ldr	r0, [sp, #24]
   1bb80:	9b08      	ldr	r3, [sp, #32]
   1bb82:	f000 fa87 	bl	1c094 <_dtoa_r>
   1bb86:	4655      	mov	r5, sl
   1bb88:	9011      	str	r0, [sp, #68]	; 0x44
   1bb8a:	e7e5      	b.n	1bb58 <_vfprintf_r+0x1490>
   1bb8c:	003a      	movs	r2, r7
   1bb8e:	4659      	mov	r1, fp
   1bb90:	9806      	ldr	r0, [sp, #24]
   1bb92:	f002 fcd9 	bl	1e548 <__sprint_r>
   1bb96:	2800      	cmp	r0, #0
   1bb98:	d101      	bne.n	1bb9e <_vfprintf_r+0x14d6>
   1bb9a:	f7ff faab 	bl	1b0f4 <_vfprintf_r+0xa2c>
   1bb9e:	f7ff faab 	bl	1b0f8 <_vfprintf_r+0xa30>
   1bba2:	4642      	mov	r2, r8
   1bba4:	9207      	str	r2, [sp, #28]
   1bba6:	f7fe fe1b 	bl	1a7e0 <_vfprintf_r+0x118>
   1bbaa:	4244      	negs	r4, r0
   1bbac:	3010      	adds	r0, #16
   1bbae:	db00      	blt.n	1bbb2 <_vfprintf_r+0x14ea>
   1bbb0:	e0d8      	b.n	1bd64 <_vfprintf_r+0x169c>
   1bbb2:	4805      	ldr	r0, [pc, #20]	; (1bbc8 <_vfprintf_r+0x1500>)
   1bbb4:	2610      	movs	r6, #16
   1bbb6:	0005      	movs	r5, r0
   1bbb8:	e00c      	b.n	1bbd4 <_vfprintf_r+0x150c>
   1bbba:	46c0      	nop			; (mov r8, r8)
   1bbbc:	0001f9c8 	.word	0x0001f9c8
   1bbc0:	0002071c 	.word	0x0002071c
   1bbc4:	00020750 	.word	0x00020750
   1bbc8:	00020768 	.word	0x00020768
   1bbcc:	3208      	adds	r2, #8
   1bbce:	3c10      	subs	r4, #16
   1bbd0:	2c10      	cmp	r4, #16
   1bbd2:	dd51      	ble.n	1bc78 <_vfprintf_r+0x15b0>
   1bbd4:	3110      	adds	r1, #16
   1bbd6:	3301      	adds	r3, #1
   1bbd8:	6015      	str	r5, [r2, #0]
   1bbda:	6056      	str	r6, [r2, #4]
   1bbdc:	60b9      	str	r1, [r7, #8]
   1bbde:	607b      	str	r3, [r7, #4]
   1bbe0:	2b07      	cmp	r3, #7
   1bbe2:	ddf3      	ble.n	1bbcc <_vfprintf_r+0x1504>
   1bbe4:	003a      	movs	r2, r7
   1bbe6:	4659      	mov	r1, fp
   1bbe8:	9806      	ldr	r0, [sp, #24]
   1bbea:	f002 fcad 	bl	1e548 <__sprint_r>
   1bbee:	2800      	cmp	r0, #0
   1bbf0:	d001      	beq.n	1bbf6 <_vfprintf_r+0x152e>
   1bbf2:	f7ff faf9 	bl	1b1e8 <_vfprintf_r+0xb20>
   1bbf6:	68b9      	ldr	r1, [r7, #8]
   1bbf8:	687b      	ldr	r3, [r7, #4]
   1bbfa:	aa32      	add	r2, sp, #200	; 0xc8
   1bbfc:	e7e7      	b.n	1bbce <_vfprintf_r+0x1506>
   1bbfe:	003a      	movs	r2, r7
   1bc00:	4659      	mov	r1, fp
   1bc02:	9806      	ldr	r0, [sp, #24]
   1bc04:	f002 fca0 	bl	1e548 <__sprint_r>
   1bc08:	2800      	cmp	r0, #0
   1bc0a:	d001      	beq.n	1bc10 <_vfprintf_r+0x1548>
   1bc0c:	f7ff faec 	bl	1b1e8 <_vfprintf_r+0xb20>
   1bc10:	981f      	ldr	r0, [sp, #124]	; 0x7c
   1bc12:	68b9      	ldr	r1, [r7, #8]
   1bc14:	687b      	ldr	r3, [r7, #4]
   1bc16:	aa32      	add	r2, sp, #200	; 0xc8
   1bc18:	e62e      	b.n	1b878 <_vfprintf_r+0x11b0>
   1bc1a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   1bc1c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   1bc1e:	4694      	mov	ip, r2
   1bc20:	4463      	add	r3, ip
   1bc22:	001a      	movs	r2, r3
   1bc24:	930e      	str	r3, [sp, #56]	; 0x38
   1bc26:	e75d      	b.n	1bae4 <_vfprintf_r+0x141c>
   1bc28:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   1bc2a:	e599      	b.n	1b760 <_vfprintf_r+0x1098>
   1bc2c:	212e      	movs	r1, #46	; 0x2e
   1bc2e:	2330      	movs	r3, #48	; 0x30
   1bc30:	aa16      	add	r2, sp, #88	; 0x58
   1bc32:	1852      	adds	r2, r2, r1
   1bc34:	7013      	strb	r3, [r2, #0]
   1bc36:	002b      	movs	r3, r5
   1bc38:	aa16      	add	r2, sp, #88	; 0x58
   1bc3a:	3101      	adds	r1, #1
   1bc3c:	3330      	adds	r3, #48	; 0x30
   1bc3e:	1852      	adds	r2, r2, r1
   1bc40:	7013      	strb	r3, [r2, #0]
   1bc42:	ab22      	add	r3, sp, #136	; 0x88
   1bc44:	e6c1      	b.n	1b9ca <_vfprintf_r+0x1302>
   1bc46:	9b15      	ldr	r3, [sp, #84]	; 0x54
   1bc48:	2b00      	cmp	r3, #0
   1bc4a:	db52      	blt.n	1bcf2 <_vfprintf_r+0x162a>
   1bc4c:	ab16      	add	r3, sp, #88	; 0x58
   1bc4e:	7fdb      	ldrb	r3, [r3, #31]
   1bc50:	4698      	mov	r8, r3
   1bc52:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1bc54:	2b47      	cmp	r3, #71	; 0x47
   1bc56:	dc48      	bgt.n	1bcea <_vfprintf_r+0x1622>
   1bc58:	4b4e      	ldr	r3, [pc, #312]	; (1bd94 <_vfprintf_r+0x16cc>)
   1bc5a:	9311      	str	r3, [sp, #68]	; 0x44
   1bc5c:	f7ff f88c 	bl	1ad78 <_vfprintf_r+0x6b0>
   1bc60:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   1bc62:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   1bc64:	4694      	mov	ip, r2
   1bc66:	4463      	add	r3, ip
   1bc68:	4453      	add	r3, sl
   1bc6a:	001a      	movs	r2, r3
   1bc6c:	930e      	str	r3, [sp, #56]	; 0x38
   1bc6e:	43db      	mvns	r3, r3
   1bc70:	17db      	asrs	r3, r3, #31
   1bc72:	401a      	ands	r2, r3
   1bc74:	9208      	str	r2, [sp, #32]
   1bc76:	e595      	b.n	1b7a4 <_vfprintf_r+0x10dc>
   1bc78:	46a9      	mov	r9, r5
   1bc7a:	4648      	mov	r0, r9
   1bc7c:	1909      	adds	r1, r1, r4
   1bc7e:	3301      	adds	r3, #1
   1bc80:	6010      	str	r0, [r2, #0]
   1bc82:	6054      	str	r4, [r2, #4]
   1bc84:	60b9      	str	r1, [r7, #8]
   1bc86:	3208      	adds	r2, #8
   1bc88:	607b      	str	r3, [r7, #4]
   1bc8a:	2b07      	cmp	r3, #7
   1bc8c:	dc00      	bgt.n	1bc90 <_vfprintf_r+0x15c8>
   1bc8e:	e5f6      	b.n	1b87e <_vfprintf_r+0x11b6>
   1bc90:	003a      	movs	r2, r7
   1bc92:	4659      	mov	r1, fp
   1bc94:	9806      	ldr	r0, [sp, #24]
   1bc96:	f002 fc57 	bl	1e548 <__sprint_r>
   1bc9a:	2800      	cmp	r0, #0
   1bc9c:	d001      	beq.n	1bca2 <_vfprintf_r+0x15da>
   1bc9e:	f7ff faa3 	bl	1b1e8 <_vfprintf_r+0xb20>
   1bca2:	68b9      	ldr	r1, [r7, #8]
   1bca4:	687b      	ldr	r3, [r7, #4]
   1bca6:	aa32      	add	r2, sp, #200	; 0xc8
   1bca8:	e5e9      	b.n	1b87e <_vfprintf_r+0x11b6>
   1bcaa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1bcac:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   1bcae:	1a98      	subs	r0, r3, r2
   1bcb0:	1c43      	adds	r3, r0, #1
   1bcb2:	001a      	movs	r2, r3
   1bcb4:	930e      	str	r3, [sp, #56]	; 0x38
   1bcb6:	e715      	b.n	1bae4 <_vfprintf_r+0x141c>
   1bcb8:	4a37      	ldr	r2, [pc, #220]	; (1bd98 <_vfprintf_r+0x16d0>)
   1bcba:	687b      	ldr	r3, [r7, #4]
   1bcbc:	4691      	mov	r9, r2
   1bcbe:	f7ff fbf5 	bl	1b4ac <_vfprintf_r+0xde4>
   1bcc2:	2301      	movs	r3, #1
   1bcc4:	4023      	ands	r3, r4
   1bcc6:	9313      	str	r3, [sp, #76]	; 0x4c
   1bcc8:	d000      	beq.n	1bccc <_vfprintf_r+0x1604>
   1bcca:	e689      	b.n	1b9e0 <_vfprintf_r+0x1318>
   1bccc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   1bcce:	43d3      	mvns	r3, r2
   1bcd0:	17db      	asrs	r3, r3, #31
   1bcd2:	401a      	ands	r2, r3
   1bcd4:	9208      	str	r2, [sp, #32]
   1bcd6:	e565      	b.n	1b7a4 <_vfprintf_r+0x10dc>
   1bcd8:	2301      	movs	r3, #1
   1bcda:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   1bcdc:	391b      	subs	r1, #27
   1bcde:	1a9d      	subs	r5, r3, r2
   1bce0:	aa16      	add	r2, sp, #88	; 0x58
   1bce2:	332c      	adds	r3, #44	; 0x2c
   1bce4:	1852      	adds	r2, r2, r1
   1bce6:	7013      	strb	r3, [r2, #0]
   1bce8:	e62f      	b.n	1b94a <_vfprintf_r+0x1282>
   1bcea:	4b2c      	ldr	r3, [pc, #176]	; (1bd9c <_vfprintf_r+0x16d4>)
   1bcec:	9311      	str	r3, [sp, #68]	; 0x44
   1bcee:	f7ff f843 	bl	1ad78 <_vfprintf_r+0x6b0>
   1bcf2:	232d      	movs	r3, #45	; 0x2d
   1bcf4:	aa16      	add	r2, sp, #88	; 0x58
   1bcf6:	77d3      	strb	r3, [r2, #31]
   1bcf8:	4698      	mov	r8, r3
   1bcfa:	e7aa      	b.n	1bc52 <_vfprintf_r+0x158a>
   1bcfc:	4653      	mov	r3, sl
   1bcfe:	2b00      	cmp	r3, #0
   1bd00:	d101      	bne.n	1bd06 <_vfprintf_r+0x163e>
   1bd02:	07e3      	lsls	r3, r4, #31
   1bd04:	d503      	bpl.n	1bd0e <_vfprintf_r+0x1646>
   1bd06:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   1bd08:	1c58      	adds	r0, r3, #1
   1bd0a:	0003      	movs	r3, r0
   1bd0c:	e7ac      	b.n	1bc68 <_vfprintf_r+0x15a0>
   1bd0e:	2301      	movs	r3, #1
   1bd10:	e708      	b.n	1bb24 <_vfprintf_r+0x145c>
   1bd12:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   1bd14:	9a11      	ldr	r2, [sp, #68]	; 0x44
   1bd16:	1a9b      	subs	r3, r3, r2
   1bd18:	9314      	str	r3, [sp, #80]	; 0x50
   1bd1a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1bd1c:	2b47      	cmp	r3, #71	; 0x47
   1bd1e:	d100      	bne.n	1bd22 <_vfprintf_r+0x165a>
   1bd20:	e5f6      	b.n	1b910 <_vfprintf_r+0x1248>
   1bd22:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   1bd24:	9313      	str	r3, [sp, #76]	; 0x4c
   1bd26:	e5fd      	b.n	1b924 <_vfprintf_r+0x125c>
   1bd28:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1bd2a:	1d1d      	adds	r5, r3, #4
   1bd2c:	681b      	ldr	r3, [r3, #0]
   1bd2e:	46a8      	mov	r8, r5
   1bd30:	469a      	mov	sl, r3
   1bd32:	2b00      	cmp	r3, #0
   1bd34:	db0a      	blt.n	1bd4c <_vfprintf_r+0x1684>
   1bd36:	4645      	mov	r5, r8
   1bd38:	9b07      	ldr	r3, [sp, #28]
   1bd3a:	950f      	str	r5, [sp, #60]	; 0x3c
   1bd3c:	785b      	ldrb	r3, [r3, #1]
   1bd3e:	9207      	str	r2, [sp, #28]
   1bd40:	f7fe fd4b 	bl	1a7da <_vfprintf_r+0x112>
   1bd44:	ab16      	add	r3, sp, #88	; 0x58
   1bd46:	77d8      	strb	r0, [r3, #31]
   1bd48:	f7ff f830 	bl	1adac <_vfprintf_r+0x6e4>
   1bd4c:	2301      	movs	r3, #1
   1bd4e:	425b      	negs	r3, r3
   1bd50:	469a      	mov	sl, r3
   1bd52:	e7f0      	b.n	1bd36 <_vfprintf_r+0x166e>
   1bd54:	ab16      	add	r3, sp, #88	; 0x58
   1bd56:	77d8      	strb	r0, [r3, #31]
   1bd58:	f7fe ff27 	bl	1abaa <_vfprintf_r+0x4e2>
   1bd5c:	ab16      	add	r3, sp, #88	; 0x58
   1bd5e:	77d8      	strb	r0, [r3, #31]
   1bd60:	f7fe fdce 	bl	1a900 <_vfprintf_r+0x238>
   1bd64:	480c      	ldr	r0, [pc, #48]	; (1bd98 <_vfprintf_r+0x16d0>)
   1bd66:	4681      	mov	r9, r0
   1bd68:	e787      	b.n	1bc7a <_vfprintf_r+0x15b2>
   1bd6a:	ab16      	add	r3, sp, #88	; 0x58
   1bd6c:	77d8      	strb	r0, [r3, #31]
   1bd6e:	f7ff f829 	bl	1adc4 <_vfprintf_r+0x6fc>
   1bd72:	ab16      	add	r3, sp, #88	; 0x58
   1bd74:	77d8      	strb	r0, [r3, #31]
   1bd76:	f7fe ffc3 	bl	1ad00 <_vfprintf_r+0x638>
   1bd7a:	ab16      	add	r3, sp, #88	; 0x58
   1bd7c:	77d8      	strb	r0, [r3, #31]
   1bd7e:	f7fe ffa5 	bl	1accc <_vfprintf_r+0x604>
   1bd82:	ab16      	add	r3, sp, #88	; 0x58
   1bd84:	77d8      	strb	r0, [r3, #31]
   1bd86:	f7fe feaf 	bl	1aae8 <_vfprintf_r+0x420>
   1bd8a:	aa16      	add	r2, sp, #88	; 0x58
   1bd8c:	232e      	movs	r3, #46	; 0x2e
   1bd8e:	4694      	mov	ip, r2
   1bd90:	4463      	add	r3, ip
   1bd92:	e61a      	b.n	1b9ca <_vfprintf_r+0x1302>
   1bd94:	00020720 	.word	0x00020720
   1bd98:	00020768 	.word	0x00020768
   1bd9c:	00020724 	.word	0x00020724

0001bda0 <__sbprintf>:
   1bda0:	b5f0      	push	{r4, r5, r6, r7, lr}
   1bda2:	0015      	movs	r5, r2
   1bda4:	2202      	movs	r2, #2
   1bda6:	4c1e      	ldr	r4, [pc, #120]	; (1be20 <__sbprintf+0x80>)
   1bda8:	001f      	movs	r7, r3
   1bdaa:	898b      	ldrh	r3, [r1, #12]
   1bdac:	44a5      	add	sp, r4
   1bdae:	4393      	bics	r3, r2
   1bdb0:	466a      	mov	r2, sp
   1bdb2:	8193      	strh	r3, [r2, #12]
   1bdb4:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   1bdb6:	0006      	movs	r6, r0
   1bdb8:	9319      	str	r3, [sp, #100]	; 0x64
   1bdba:	89cb      	ldrh	r3, [r1, #14]
   1bdbc:	a816      	add	r0, sp, #88	; 0x58
   1bdbe:	81d3      	strh	r3, [r2, #14]
   1bdc0:	69cb      	ldr	r3, [r1, #28]
   1bdc2:	000c      	movs	r4, r1
   1bdc4:	9307      	str	r3, [sp, #28]
   1bdc6:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   1bdc8:	9309      	str	r3, [sp, #36]	; 0x24
   1bdca:	ab1a      	add	r3, sp, #104	; 0x68
   1bdcc:	9300      	str	r3, [sp, #0]
   1bdce:	9304      	str	r3, [sp, #16]
   1bdd0:	2380      	movs	r3, #128	; 0x80
   1bdd2:	00db      	lsls	r3, r3, #3
   1bdd4:	9302      	str	r3, [sp, #8]
   1bdd6:	9305      	str	r3, [sp, #20]
   1bdd8:	2300      	movs	r3, #0
   1bdda:	9306      	str	r3, [sp, #24]
   1bddc:	f001 fd5e 	bl	1d89c <__retarget_lock_init_recursive>
   1bde0:	002a      	movs	r2, r5
   1bde2:	003b      	movs	r3, r7
   1bde4:	4669      	mov	r1, sp
   1bde6:	0030      	movs	r0, r6
   1bde8:	f7fe fc6e 	bl	1a6c8 <_vfprintf_r>
   1bdec:	1e05      	subs	r5, r0, #0
   1bdee:	db05      	blt.n	1bdfc <__sbprintf+0x5c>
   1bdf0:	4669      	mov	r1, sp
   1bdf2:	0030      	movs	r0, r6
   1bdf4:	f001 f9ba 	bl	1d16c <_fflush_r>
   1bdf8:	2800      	cmp	r0, #0
   1bdfa:	d10e      	bne.n	1be1a <__sbprintf+0x7a>
   1bdfc:	466b      	mov	r3, sp
   1bdfe:	899b      	ldrh	r3, [r3, #12]
   1be00:	065b      	lsls	r3, r3, #25
   1be02:	d503      	bpl.n	1be0c <__sbprintf+0x6c>
   1be04:	2240      	movs	r2, #64	; 0x40
   1be06:	89a3      	ldrh	r3, [r4, #12]
   1be08:	4313      	orrs	r3, r2
   1be0a:	81a3      	strh	r3, [r4, #12]
   1be0c:	9816      	ldr	r0, [sp, #88]	; 0x58
   1be0e:	f001 fd47 	bl	1d8a0 <__retarget_lock_close_recursive>
   1be12:	0028      	movs	r0, r5
   1be14:	4b03      	ldr	r3, [pc, #12]	; (1be24 <__sbprintf+0x84>)
   1be16:	449d      	add	sp, r3
   1be18:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1be1a:	2501      	movs	r5, #1
   1be1c:	426d      	negs	r5, r5
   1be1e:	e7ed      	b.n	1bdfc <__sbprintf+0x5c>
   1be20:	fffffb94 	.word	0xfffffb94
   1be24:	0000046c 	.word	0x0000046c

0001be28 <__ascii_wctomb>:
   1be28:	2900      	cmp	r1, #0
   1be2a:	d004      	beq.n	1be36 <__ascii_wctomb+0xe>
   1be2c:	2aff      	cmp	r2, #255	; 0xff
   1be2e:	d804      	bhi.n	1be3a <__ascii_wctomb+0x12>
   1be30:	2001      	movs	r0, #1
   1be32:	700a      	strb	r2, [r1, #0]
   1be34:	4770      	bx	lr
   1be36:	2000      	movs	r0, #0
   1be38:	e7fc      	b.n	1be34 <__ascii_wctomb+0xc>
   1be3a:	238a      	movs	r3, #138	; 0x8a
   1be3c:	6003      	str	r3, [r0, #0]
   1be3e:	2001      	movs	r0, #1
   1be40:	4240      	negs	r0, r0
   1be42:	e7f7      	b.n	1be34 <__ascii_wctomb+0xc>

0001be44 <__swsetup_r>:
   1be44:	4b33      	ldr	r3, [pc, #204]	; (1bf14 <__swsetup_r+0xd0>)
   1be46:	b570      	push	{r4, r5, r6, lr}
   1be48:	0005      	movs	r5, r0
   1be4a:	6818      	ldr	r0, [r3, #0]
   1be4c:	000c      	movs	r4, r1
   1be4e:	2800      	cmp	r0, #0
   1be50:	d002      	beq.n	1be58 <__swsetup_r+0x14>
   1be52:	6b83      	ldr	r3, [r0, #56]	; 0x38
   1be54:	2b00      	cmp	r3, #0
   1be56:	d03c      	beq.n	1bed2 <__swsetup_r+0x8e>
   1be58:	230c      	movs	r3, #12
   1be5a:	5ee2      	ldrsh	r2, [r4, r3]
   1be5c:	b293      	uxth	r3, r2
   1be5e:	0719      	lsls	r1, r3, #28
   1be60:	d50d      	bpl.n	1be7e <__swsetup_r+0x3a>
   1be62:	6921      	ldr	r1, [r4, #16]
   1be64:	2900      	cmp	r1, #0
   1be66:	d015      	beq.n	1be94 <__swsetup_r+0x50>
   1be68:	07da      	lsls	r2, r3, #31
   1be6a:	d521      	bpl.n	1beb0 <__swsetup_r+0x6c>
   1be6c:	2300      	movs	r3, #0
   1be6e:	60a3      	str	r3, [r4, #8]
   1be70:	6963      	ldr	r3, [r4, #20]
   1be72:	2000      	movs	r0, #0
   1be74:	425b      	negs	r3, r3
   1be76:	61a3      	str	r3, [r4, #24]
   1be78:	2900      	cmp	r1, #0
   1be7a:	d021      	beq.n	1bec0 <__swsetup_r+0x7c>
   1be7c:	bd70      	pop	{r4, r5, r6, pc}
   1be7e:	06d9      	lsls	r1, r3, #27
   1be80:	d53f      	bpl.n	1bf02 <__swsetup_r+0xbe>
   1be82:	075b      	lsls	r3, r3, #29
   1be84:	d428      	bmi.n	1bed8 <__swsetup_r+0x94>
   1be86:	6921      	ldr	r1, [r4, #16]
   1be88:	2308      	movs	r3, #8
   1be8a:	4313      	orrs	r3, r2
   1be8c:	81a3      	strh	r3, [r4, #12]
   1be8e:	b29b      	uxth	r3, r3
   1be90:	2900      	cmp	r1, #0
   1be92:	d1e9      	bne.n	1be68 <__swsetup_r+0x24>
   1be94:	22a0      	movs	r2, #160	; 0xa0
   1be96:	2080      	movs	r0, #128	; 0x80
   1be98:	0092      	lsls	r2, r2, #2
   1be9a:	0080      	lsls	r0, r0, #2
   1be9c:	401a      	ands	r2, r3
   1be9e:	4282      	cmp	r2, r0
   1bea0:	d0e2      	beq.n	1be68 <__swsetup_r+0x24>
   1bea2:	0021      	movs	r1, r4
   1bea4:	0028      	movs	r0, r5
   1bea6:	f001 fd31 	bl	1d90c <__smakebuf_r>
   1beaa:	89a3      	ldrh	r3, [r4, #12]
   1beac:	6921      	ldr	r1, [r4, #16]
   1beae:	e7db      	b.n	1be68 <__swsetup_r+0x24>
   1beb0:	2200      	movs	r2, #0
   1beb2:	079b      	lsls	r3, r3, #30
   1beb4:	d400      	bmi.n	1beb8 <__swsetup_r+0x74>
   1beb6:	6962      	ldr	r2, [r4, #20]
   1beb8:	60a2      	str	r2, [r4, #8]
   1beba:	2000      	movs	r0, #0
   1bebc:	2900      	cmp	r1, #0
   1bebe:	d1dd      	bne.n	1be7c <__swsetup_r+0x38>
   1bec0:	220c      	movs	r2, #12
   1bec2:	5ea3      	ldrsh	r3, [r4, r2]
   1bec4:	061a      	lsls	r2, r3, #24
   1bec6:	d5d9      	bpl.n	1be7c <__swsetup_r+0x38>
   1bec8:	2240      	movs	r2, #64	; 0x40
   1beca:	4313      	orrs	r3, r2
   1becc:	81a3      	strh	r3, [r4, #12]
   1bece:	3801      	subs	r0, #1
   1bed0:	e7d4      	b.n	1be7c <__swsetup_r+0x38>
   1bed2:	f001 f9a5 	bl	1d220 <__sinit>
   1bed6:	e7bf      	b.n	1be58 <__swsetup_r+0x14>
   1bed8:	6b21      	ldr	r1, [r4, #48]	; 0x30
   1beda:	2900      	cmp	r1, #0
   1bedc:	d00a      	beq.n	1bef4 <__swsetup_r+0xb0>
   1bede:	0023      	movs	r3, r4
   1bee0:	3340      	adds	r3, #64	; 0x40
   1bee2:	4299      	cmp	r1, r3
   1bee4:	d004      	beq.n	1bef0 <__swsetup_r+0xac>
   1bee6:	0028      	movs	r0, r5
   1bee8:	f001 fa44 	bl	1d374 <_free_r>
   1beec:	230c      	movs	r3, #12
   1beee:	5ee2      	ldrsh	r2, [r4, r3]
   1bef0:	2300      	movs	r3, #0
   1bef2:	6323      	str	r3, [r4, #48]	; 0x30
   1bef4:	2324      	movs	r3, #36	; 0x24
   1bef6:	439a      	bics	r2, r3
   1bef8:	2300      	movs	r3, #0
   1befa:	6921      	ldr	r1, [r4, #16]
   1befc:	6063      	str	r3, [r4, #4]
   1befe:	6021      	str	r1, [r4, #0]
   1bf00:	e7c2      	b.n	1be88 <__swsetup_r+0x44>
   1bf02:	2309      	movs	r3, #9
   1bf04:	602b      	str	r3, [r5, #0]
   1bf06:	2340      	movs	r3, #64	; 0x40
   1bf08:	2001      	movs	r0, #1
   1bf0a:	431a      	orrs	r2, r3
   1bf0c:	81a2      	strh	r2, [r4, #12]
   1bf0e:	4240      	negs	r0, r0
   1bf10:	e7b4      	b.n	1be7c <__swsetup_r+0x38>
   1bf12:	46c0      	nop			; (mov r8, r8)
   1bf14:	20000018 	.word	0x20000018

0001bf18 <register_fini>:
   1bf18:	4b03      	ldr	r3, [pc, #12]	; (1bf28 <register_fini+0x10>)
   1bf1a:	b510      	push	{r4, lr}
   1bf1c:	2b00      	cmp	r3, #0
   1bf1e:	d002      	beq.n	1bf26 <register_fini+0xe>
   1bf20:	4802      	ldr	r0, [pc, #8]	; (1bf2c <register_fini+0x14>)
   1bf22:	f000 f805 	bl	1bf30 <atexit>
   1bf26:	bd10      	pop	{r4, pc}
   1bf28:	00000000 	.word	0x00000000
   1bf2c:	0001d2a1 	.word	0x0001d2a1

0001bf30 <atexit>:
   1bf30:	b510      	push	{r4, lr}
   1bf32:	0001      	movs	r1, r0
   1bf34:	2300      	movs	r3, #0
   1bf36:	2200      	movs	r2, #0
   1bf38:	2000      	movs	r0, #0
   1bf3a:	f002 fb23 	bl	1e584 <__register_exitproc>
   1bf3e:	bd10      	pop	{r4, pc}

0001bf40 <quorem>:
   1bf40:	b5f0      	push	{r4, r5, r6, r7, lr}
   1bf42:	4645      	mov	r5, r8
   1bf44:	4680      	mov	r8, r0
   1bf46:	46de      	mov	lr, fp
   1bf48:	4657      	mov	r7, sl
   1bf4a:	464e      	mov	r6, r9
   1bf4c:	4642      	mov	r2, r8
   1bf4e:	b5e0      	push	{r5, r6, r7, lr}
   1bf50:	690c      	ldr	r4, [r1, #16]
   1bf52:	6912      	ldr	r2, [r2, #16]
   1bf54:	b085      	sub	sp, #20
   1bf56:	000b      	movs	r3, r1
   1bf58:	9102      	str	r1, [sp, #8]
   1bf5a:	2000      	movs	r0, #0
   1bf5c:	4294      	cmp	r4, r2
   1bf5e:	dd00      	ble.n	1bf62 <quorem+0x22>
   1bf60:	e090      	b.n	1c084 <quorem+0x144>
   1bf62:	2214      	movs	r2, #20
   1bf64:	4694      	mov	ip, r2
   1bf66:	4463      	add	r3, ip
   1bf68:	4699      	mov	r9, r3
   1bf6a:	464a      	mov	r2, r9
   1bf6c:	3c01      	subs	r4, #1
   1bf6e:	00a3      	lsls	r3, r4, #2
   1bf70:	18d6      	adds	r6, r2, r3
   1bf72:	2214      	movs	r2, #20
   1bf74:	4442      	add	r2, r8
   1bf76:	4693      	mov	fp, r2
   1bf78:	449b      	add	fp, r3
   1bf7a:	6833      	ldr	r3, [r6, #0]
   1bf7c:	0015      	movs	r5, r2
   1bf7e:	1c59      	adds	r1, r3, #1
   1bf80:	465b      	mov	r3, fp
   1bf82:	6818      	ldr	r0, [r3, #0]
   1bf84:	9201      	str	r2, [sp, #4]
   1bf86:	f7fa fb5b 	bl	16640 <__udivsi3>
   1bf8a:	1e03      	subs	r3, r0, #0
   1bf8c:	9000      	str	r0, [sp, #0]
   1bf8e:	d042      	beq.n	1c016 <quorem+0xd6>
   1bf90:	0029      	movs	r1, r5
   1bf92:	2700      	movs	r7, #0
   1bf94:	464d      	mov	r5, r9
   1bf96:	2000      	movs	r0, #0
   1bf98:	46b1      	mov	r9, r6
   1bf9a:	46a2      	mov	sl, r4
   1bf9c:	003e      	movs	r6, r7
   1bf9e:	0004      	movs	r4, r0
   1bfa0:	469c      	mov	ip, r3
   1bfa2:	002f      	movs	r7, r5
   1bfa4:	0008      	movs	r0, r1
   1bfa6:	9503      	str	r5, [sp, #12]
   1bfa8:	4663      	mov	r3, ip
   1bfaa:	cf04      	ldmia	r7!, {r2}
   1bfac:	0415      	lsls	r5, r2, #16
   1bfae:	0c2d      	lsrs	r5, r5, #16
   1bfb0:	435d      	muls	r5, r3
   1bfb2:	0c12      	lsrs	r2, r2, #16
   1bfb4:	435a      	muls	r2, r3
   1bfb6:	19ad      	adds	r5, r5, r6
   1bfb8:	0c2b      	lsrs	r3, r5, #16
   1bfba:	18d2      	adds	r2, r2, r3
   1bfbc:	6803      	ldr	r3, [r0, #0]
   1bfbe:	042d      	lsls	r5, r5, #16
   1bfc0:	0419      	lsls	r1, r3, #16
   1bfc2:	0c09      	lsrs	r1, r1, #16
   1bfc4:	1909      	adds	r1, r1, r4
   1bfc6:	0c16      	lsrs	r6, r2, #16
   1bfc8:	0c2d      	lsrs	r5, r5, #16
   1bfca:	0412      	lsls	r2, r2, #16
   1bfcc:	1b49      	subs	r1, r1, r5
   1bfce:	0c12      	lsrs	r2, r2, #16
   1bfd0:	0c1b      	lsrs	r3, r3, #16
   1bfd2:	1a9b      	subs	r3, r3, r2
   1bfd4:	140a      	asrs	r2, r1, #16
   1bfd6:	189b      	adds	r3, r3, r2
   1bfd8:	0409      	lsls	r1, r1, #16
   1bfda:	141c      	asrs	r4, r3, #16
   1bfdc:	0c09      	lsrs	r1, r1, #16
   1bfde:	041b      	lsls	r3, r3, #16
   1bfe0:	4319      	orrs	r1, r3
   1bfe2:	c002      	stmia	r0!, {r1}
   1bfe4:	45b9      	cmp	r9, r7
   1bfe6:	d2df      	bcs.n	1bfa8 <quorem+0x68>
   1bfe8:	9b03      	ldr	r3, [sp, #12]
   1bfea:	464e      	mov	r6, r9
   1bfec:	4699      	mov	r9, r3
   1bfee:	465b      	mov	r3, fp
   1bff0:	681b      	ldr	r3, [r3, #0]
   1bff2:	4654      	mov	r4, sl
   1bff4:	2b00      	cmp	r3, #0
   1bff6:	d10e      	bne.n	1c016 <quorem+0xd6>
   1bff8:	465b      	mov	r3, fp
   1bffa:	9a01      	ldr	r2, [sp, #4]
   1bffc:	3b04      	subs	r3, #4
   1bffe:	429a      	cmp	r2, r3
   1c000:	d304      	bcc.n	1c00c <quorem+0xcc>
   1c002:	e006      	b.n	1c012 <quorem+0xd2>
   1c004:	3b04      	subs	r3, #4
   1c006:	3c01      	subs	r4, #1
   1c008:	429a      	cmp	r2, r3
   1c00a:	d202      	bcs.n	1c012 <quorem+0xd2>
   1c00c:	6819      	ldr	r1, [r3, #0]
   1c00e:	2900      	cmp	r1, #0
   1c010:	d0f8      	beq.n	1c004 <quorem+0xc4>
   1c012:	4643      	mov	r3, r8
   1c014:	611c      	str	r4, [r3, #16]
   1c016:	9902      	ldr	r1, [sp, #8]
   1c018:	4640      	mov	r0, r8
   1c01a:	f001 ff33 	bl	1de84 <__mcmp>
   1c01e:	2800      	cmp	r0, #0
   1c020:	db2f      	blt.n	1c082 <quorem+0x142>
   1c022:	464f      	mov	r7, r9
   1c024:	2000      	movs	r0, #0
   1c026:	9b00      	ldr	r3, [sp, #0]
   1c028:	9d01      	ldr	r5, [sp, #4]
   1c02a:	3301      	adds	r3, #1
   1c02c:	9300      	str	r3, [sp, #0]
   1c02e:	682b      	ldr	r3, [r5, #0]
   1c030:	cf02      	ldmia	r7!, {r1}
   1c032:	041a      	lsls	r2, r3, #16
   1c034:	0c12      	lsrs	r2, r2, #16
   1c036:	1810      	adds	r0, r2, r0
   1c038:	040a      	lsls	r2, r1, #16
   1c03a:	0c12      	lsrs	r2, r2, #16
   1c03c:	1a82      	subs	r2, r0, r2
   1c03e:	0c09      	lsrs	r1, r1, #16
   1c040:	0c1b      	lsrs	r3, r3, #16
   1c042:	1a5b      	subs	r3, r3, r1
   1c044:	1411      	asrs	r1, r2, #16
   1c046:	185b      	adds	r3, r3, r1
   1c048:	0412      	lsls	r2, r2, #16
   1c04a:	1418      	asrs	r0, r3, #16
   1c04c:	0c12      	lsrs	r2, r2, #16
   1c04e:	041b      	lsls	r3, r3, #16
   1c050:	4313      	orrs	r3, r2
   1c052:	c508      	stmia	r5!, {r3}
   1c054:	42be      	cmp	r6, r7
   1c056:	d2ea      	bcs.n	1c02e <quorem+0xee>
   1c058:	9901      	ldr	r1, [sp, #4]
   1c05a:	00a3      	lsls	r3, r4, #2
   1c05c:	468c      	mov	ip, r1
   1c05e:	4463      	add	r3, ip
   1c060:	681a      	ldr	r2, [r3, #0]
   1c062:	2a00      	cmp	r2, #0
   1c064:	d10d      	bne.n	1c082 <quorem+0x142>
   1c066:	3b04      	subs	r3, #4
   1c068:	000a      	movs	r2, r1
   1c06a:	4299      	cmp	r1, r3
   1c06c:	d304      	bcc.n	1c078 <quorem+0x138>
   1c06e:	e006      	b.n	1c07e <quorem+0x13e>
   1c070:	3b04      	subs	r3, #4
   1c072:	3c01      	subs	r4, #1
   1c074:	429a      	cmp	r2, r3
   1c076:	d202      	bcs.n	1c07e <quorem+0x13e>
   1c078:	6819      	ldr	r1, [r3, #0]
   1c07a:	2900      	cmp	r1, #0
   1c07c:	d0f8      	beq.n	1c070 <quorem+0x130>
   1c07e:	4643      	mov	r3, r8
   1c080:	611c      	str	r4, [r3, #16]
   1c082:	9800      	ldr	r0, [sp, #0]
   1c084:	b005      	add	sp, #20
   1c086:	bc3c      	pop	{r2, r3, r4, r5}
   1c088:	4690      	mov	r8, r2
   1c08a:	4699      	mov	r9, r3
   1c08c:	46a2      	mov	sl, r4
   1c08e:	46ab      	mov	fp, r5
   1c090:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1c092:	46c0      	nop			; (mov r8, r8)

0001c094 <_dtoa_r>:
   1c094:	b5f0      	push	{r4, r5, r6, r7, lr}
   1c096:	4657      	mov	r7, sl
   1c098:	464e      	mov	r6, r9
   1c09a:	4645      	mov	r5, r8
   1c09c:	46de      	mov	lr, fp
   1c09e:	b5e0      	push	{r5, r6, r7, lr}
   1c0a0:	6c01      	ldr	r1, [r0, #64]	; 0x40
   1c0a2:	b099      	sub	sp, #100	; 0x64
   1c0a4:	4682      	mov	sl, r0
   1c0a6:	001d      	movs	r5, r3
   1c0a8:	0016      	movs	r6, r2
   1c0aa:	001f      	movs	r7, r3
   1c0ac:	2900      	cmp	r1, #0
   1c0ae:	d009      	beq.n	1c0c4 <_dtoa_r+0x30>
   1c0b0:	2301      	movs	r3, #1
   1c0b2:	6c42      	ldr	r2, [r0, #68]	; 0x44
   1c0b4:	4093      	lsls	r3, r2
   1c0b6:	604a      	str	r2, [r1, #4]
   1c0b8:	608b      	str	r3, [r1, #8]
   1c0ba:	f001 fcd7 	bl	1da6c <_Bfree>
   1c0be:	2300      	movs	r3, #0
   1c0c0:	4652      	mov	r2, sl
   1c0c2:	6413      	str	r3, [r2, #64]	; 0x40
   1c0c4:	46b8      	mov	r8, r7
   1c0c6:	2f00      	cmp	r7, #0
   1c0c8:	db37      	blt.n	1c13a <_dtoa_r+0xa6>
   1c0ca:	2300      	movs	r3, #0
   1c0cc:	9a25      	ldr	r2, [sp, #148]	; 0x94
   1c0ce:	6013      	str	r3, [r2, #0]
   1c0d0:	4642      	mov	r2, r8
   1c0d2:	4bd6      	ldr	r3, [pc, #856]	; (1c42c <_dtoa_r+0x398>)
   1c0d4:	401a      	ands	r2, r3
   1c0d6:	429a      	cmp	r2, r3
   1c0d8:	d018      	beq.n	1c10c <_dtoa_r+0x78>
   1c0da:	2200      	movs	r2, #0
   1c0dc:	2300      	movs	r3, #0
   1c0de:	0030      	movs	r0, r6
   1c0e0:	0039      	movs	r1, r7
   1c0e2:	f7fa fc33 	bl	1694c <__aeabi_dcmpeq>
   1c0e6:	2800      	cmp	r0, #0
   1c0e8:	d02f      	beq.n	1c14a <_dtoa_r+0xb6>
   1c0ea:	2301      	movs	r3, #1
   1c0ec:	9a24      	ldr	r2, [sp, #144]	; 0x90
   1c0ee:	6013      	str	r3, [r2, #0]
   1c0f0:	9b26      	ldr	r3, [sp, #152]	; 0x98
   1c0f2:	2b00      	cmp	r3, #0
   1c0f4:	d100      	bne.n	1c0f8 <_dtoa_r+0x64>
   1c0f6:	e22a      	b.n	1c54e <_dtoa_r+0x4ba>
   1c0f8:	48cd      	ldr	r0, [pc, #820]	; (1c430 <_dtoa_r+0x39c>)
   1c0fa:	6018      	str	r0, [r3, #0]
   1c0fc:	3801      	subs	r0, #1
   1c0fe:	b019      	add	sp, #100	; 0x64
   1c100:	bc3c      	pop	{r2, r3, r4, r5}
   1c102:	4690      	mov	r8, r2
   1c104:	4699      	mov	r9, r3
   1c106:	46a2      	mov	sl, r4
   1c108:	46ab      	mov	fp, r5
   1c10a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1c10c:	4bc9      	ldr	r3, [pc, #804]	; (1c434 <_dtoa_r+0x3a0>)
   1c10e:	9a24      	ldr	r2, [sp, #144]	; 0x90
   1c110:	6013      	str	r3, [r2, #0]
   1c112:	2e00      	cmp	r6, #0
   1c114:	d10b      	bne.n	1c12e <_dtoa_r+0x9a>
   1c116:	4643      	mov	r3, r8
   1c118:	0318      	lsls	r0, r3, #12
   1c11a:	d108      	bne.n	1c12e <_dtoa_r+0x9a>
   1c11c:	9b26      	ldr	r3, [sp, #152]	; 0x98
   1c11e:	48c6      	ldr	r0, [pc, #792]	; (1c438 <_dtoa_r+0x3a4>)
   1c120:	2b00      	cmp	r3, #0
   1c122:	d0ec      	beq.n	1c0fe <_dtoa_r+0x6a>
   1c124:	0003      	movs	r3, r0
   1c126:	3308      	adds	r3, #8
   1c128:	9a26      	ldr	r2, [sp, #152]	; 0x98
   1c12a:	6013      	str	r3, [r2, #0]
   1c12c:	e7e7      	b.n	1c0fe <_dtoa_r+0x6a>
   1c12e:	9b26      	ldr	r3, [sp, #152]	; 0x98
   1c130:	48c2      	ldr	r0, [pc, #776]	; (1c43c <_dtoa_r+0x3a8>)
   1c132:	2b00      	cmp	r3, #0
   1c134:	d0e3      	beq.n	1c0fe <_dtoa_r+0x6a>
   1c136:	1cc3      	adds	r3, r0, #3
   1c138:	e7f6      	b.n	1c128 <_dtoa_r+0x94>
   1c13a:	2301      	movs	r3, #1
   1c13c:	9a25      	ldr	r2, [sp, #148]	; 0x94
   1c13e:	0068      	lsls	r0, r5, #1
   1c140:	6013      	str	r3, [r2, #0]
   1c142:	0843      	lsrs	r3, r0, #1
   1c144:	4698      	mov	r8, r3
   1c146:	001f      	movs	r7, r3
   1c148:	e7c2      	b.n	1c0d0 <_dtoa_r+0x3c>
   1c14a:	ab16      	add	r3, sp, #88	; 0x58
   1c14c:	9301      	str	r3, [sp, #4]
   1c14e:	ab17      	add	r3, sp, #92	; 0x5c
   1c150:	9300      	str	r3, [sp, #0]
   1c152:	0032      	movs	r2, r6
   1c154:	003b      	movs	r3, r7
   1c156:	4650      	mov	r0, sl
   1c158:	f001 ff4a 	bl	1dff0 <__d2b>
   1c15c:	4643      	mov	r3, r8
   1c15e:	4683      	mov	fp, r0
   1c160:	0d1a      	lsrs	r2, r3, #20
   1c162:	d100      	bne.n	1c166 <_dtoa_r+0xd2>
   1c164:	e1d6      	b.n	1c514 <_dtoa_r+0x480>
   1c166:	033b      	lsls	r3, r7, #12
   1c168:	4cb5      	ldr	r4, [pc, #724]	; (1c440 <_dtoa_r+0x3ac>)
   1c16a:	0b1b      	lsrs	r3, r3, #12
   1c16c:	431c      	orrs	r4, r3
   1c16e:	4bb5      	ldr	r3, [pc, #724]	; (1c444 <_dtoa_r+0x3b0>)
   1c170:	0030      	movs	r0, r6
   1c172:	4698      	mov	r8, r3
   1c174:	9b16      	ldr	r3, [sp, #88]	; 0x58
   1c176:	0021      	movs	r1, r4
   1c178:	4699      	mov	r9, r3
   1c17a:	2300      	movs	r3, #0
   1c17c:	4490      	add	r8, r2
   1c17e:	930f      	str	r3, [sp, #60]	; 0x3c
   1c180:	2200      	movs	r2, #0
   1c182:	4bb1      	ldr	r3, [pc, #708]	; (1c448 <_dtoa_r+0x3b4>)
   1c184:	f7fc fe62 	bl	18e4c <__aeabi_dsub>
   1c188:	4ab0      	ldr	r2, [pc, #704]	; (1c44c <_dtoa_r+0x3b8>)
   1c18a:	4bb1      	ldr	r3, [pc, #708]	; (1c450 <_dtoa_r+0x3bc>)
   1c18c:	f7fc fbde 	bl	1894c <__aeabi_dmul>
   1c190:	4ab0      	ldr	r2, [pc, #704]	; (1c454 <_dtoa_r+0x3c0>)
   1c192:	4bb1      	ldr	r3, [pc, #708]	; (1c458 <_dtoa_r+0x3c4>)
   1c194:	f7fb fc96 	bl	17ac4 <__aeabi_dadd>
   1c198:	0004      	movs	r4, r0
   1c19a:	4640      	mov	r0, r8
   1c19c:	000d      	movs	r5, r1
   1c19e:	f7fd f99f 	bl	194e0 <__aeabi_i2d>
   1c1a2:	4aae      	ldr	r2, [pc, #696]	; (1c45c <_dtoa_r+0x3c8>)
   1c1a4:	4bae      	ldr	r3, [pc, #696]	; (1c460 <_dtoa_r+0x3cc>)
   1c1a6:	f7fc fbd1 	bl	1894c <__aeabi_dmul>
   1c1aa:	0002      	movs	r2, r0
   1c1ac:	000b      	movs	r3, r1
   1c1ae:	0020      	movs	r0, r4
   1c1b0:	0029      	movs	r1, r5
   1c1b2:	f7fb fc87 	bl	17ac4 <__aeabi_dadd>
   1c1b6:	0004      	movs	r4, r0
   1c1b8:	000d      	movs	r5, r1
   1c1ba:	f7fd f95d 	bl	19478 <__aeabi_d2iz>
   1c1be:	2200      	movs	r2, #0
   1c1c0:	9003      	str	r0, [sp, #12]
   1c1c2:	2300      	movs	r3, #0
   1c1c4:	0020      	movs	r0, r4
   1c1c6:	0029      	movs	r1, r5
   1c1c8:	f7fa fbc6 	bl	16958 <__aeabi_dcmplt>
   1c1cc:	2800      	cmp	r0, #0
   1c1ce:	d000      	beq.n	1c1d2 <_dtoa_r+0x13e>
   1c1d0:	e2b1      	b.n	1c736 <_dtoa_r+0x6a2>
   1c1d2:	2301      	movs	r3, #1
   1c1d4:	9c03      	ldr	r4, [sp, #12]
   1c1d6:	930c      	str	r3, [sp, #48]	; 0x30
   1c1d8:	2c16      	cmp	r4, #22
   1c1da:	d810      	bhi.n	1c1fe <_dtoa_r+0x16a>
   1c1dc:	49a1      	ldr	r1, [pc, #644]	; (1c464 <_dtoa_r+0x3d0>)
   1c1de:	00e3      	lsls	r3, r4, #3
   1c1e0:	18c9      	adds	r1, r1, r3
   1c1e2:	0032      	movs	r2, r6
   1c1e4:	6808      	ldr	r0, [r1, #0]
   1c1e6:	6849      	ldr	r1, [r1, #4]
   1c1e8:	003b      	movs	r3, r7
   1c1ea:	f7fa fbc9 	bl	16980 <__aeabi_dcmpgt>
   1c1ee:	2800      	cmp	r0, #0
   1c1f0:	d100      	bne.n	1c1f4 <_dtoa_r+0x160>
   1c1f2:	e31d      	b.n	1c830 <_dtoa_r+0x79c>
   1c1f4:	0023      	movs	r3, r4
   1c1f6:	3b01      	subs	r3, #1
   1c1f8:	9303      	str	r3, [sp, #12]
   1c1fa:	2300      	movs	r3, #0
   1c1fc:	930c      	str	r3, [sp, #48]	; 0x30
   1c1fe:	464b      	mov	r3, r9
   1c200:	4642      	mov	r2, r8
   1c202:	1a9a      	subs	r2, r3, r2
   1c204:	2300      	movs	r3, #0
   1c206:	9306      	str	r3, [sp, #24]
   1c208:	0013      	movs	r3, r2
   1c20a:	3b01      	subs	r3, #1
   1c20c:	9304      	str	r3, [sp, #16]
   1c20e:	d500      	bpl.n	1c212 <_dtoa_r+0x17e>
   1c210:	e2a1      	b.n	1c756 <_dtoa_r+0x6c2>
   1c212:	9b03      	ldr	r3, [sp, #12]
   1c214:	2b00      	cmp	r3, #0
   1c216:	da00      	bge.n	1c21a <_dtoa_r+0x186>
   1c218:	e284      	b.n	1c724 <_dtoa_r+0x690>
   1c21a:	469c      	mov	ip, r3
   1c21c:	930d      	str	r3, [sp, #52]	; 0x34
   1c21e:	2300      	movs	r3, #0
   1c220:	9a04      	ldr	r2, [sp, #16]
   1c222:	4699      	mov	r9, r3
   1c224:	0011      	movs	r1, r2
   1c226:	4461      	add	r1, ip
   1c228:	9104      	str	r1, [sp, #16]
   1c22a:	9b22      	ldr	r3, [sp, #136]	; 0x88
   1c22c:	2b09      	cmp	r3, #9
   1c22e:	d900      	bls.n	1c232 <_dtoa_r+0x19e>
   1c230:	e18f      	b.n	1c552 <_dtoa_r+0x4be>
   1c232:	2401      	movs	r4, #1
   1c234:	2b05      	cmp	r3, #5
   1c236:	dd02      	ble.n	1c23e <_dtoa_r+0x1aa>
   1c238:	2400      	movs	r4, #0
   1c23a:	3b04      	subs	r3, #4
   1c23c:	9322      	str	r3, [sp, #136]	; 0x88
   1c23e:	9b22      	ldr	r3, [sp, #136]	; 0x88
   1c240:	2b03      	cmp	r3, #3
   1c242:	d101      	bne.n	1c248 <_dtoa_r+0x1b4>
   1c244:	f000 fcce 	bl	1cbe4 <_dtoa_r+0xb50>
   1c248:	dc01      	bgt.n	1c24e <_dtoa_r+0x1ba>
   1c24a:	f000 fc92 	bl	1cb72 <_dtoa_r+0xade>
   1c24e:	9b22      	ldr	r3, [sp, #136]	; 0x88
   1c250:	2b04      	cmp	r3, #4
   1c252:	d101      	bne.n	1c258 <_dtoa_r+0x1c4>
   1c254:	f000 fc40 	bl	1cad8 <_dtoa_r+0xa44>
   1c258:	2301      	movs	r3, #1
   1c25a:	930b      	str	r3, [sp, #44]	; 0x2c
   1c25c:	9b22      	ldr	r3, [sp, #136]	; 0x88
   1c25e:	2b05      	cmp	r3, #5
   1c260:	d001      	beq.n	1c266 <_dtoa_r+0x1d2>
   1c262:	f000 fc8b 	bl	1cb7c <_dtoa_r+0xae8>
   1c266:	9a23      	ldr	r2, [sp, #140]	; 0x8c
   1c268:	9b03      	ldr	r3, [sp, #12]
   1c26a:	4694      	mov	ip, r2
   1c26c:	4463      	add	r3, ip
   1c26e:	930e      	str	r3, [sp, #56]	; 0x38
   1c270:	3301      	adds	r3, #1
   1c272:	9307      	str	r3, [sp, #28]
   1c274:	1e1d      	subs	r5, r3, #0
   1c276:	dc01      	bgt.n	1c27c <_dtoa_r+0x1e8>
   1c278:	f000 fd49 	bl	1cd0e <_dtoa_r+0xc7a>
   1c27c:	9b07      	ldr	r3, [sp, #28]
   1c27e:	4698      	mov	r8, r3
   1c280:	2300      	movs	r3, #0
   1c282:	4652      	mov	r2, sl
   1c284:	2100      	movs	r1, #0
   1c286:	6453      	str	r3, [r2, #68]	; 0x44
   1c288:	2d17      	cmp	r5, #23
   1c28a:	d90a      	bls.n	1c2a2 <_dtoa_r+0x20e>
   1c28c:	2201      	movs	r2, #1
   1c28e:	3304      	adds	r3, #4
   1c290:	005b      	lsls	r3, r3, #1
   1c292:	0018      	movs	r0, r3
   1c294:	3014      	adds	r0, #20
   1c296:	0011      	movs	r1, r2
   1c298:	3201      	adds	r2, #1
   1c29a:	4285      	cmp	r5, r0
   1c29c:	d2f8      	bcs.n	1c290 <_dtoa_r+0x1fc>
   1c29e:	4653      	mov	r3, sl
   1c2a0:	6459      	str	r1, [r3, #68]	; 0x44
   1c2a2:	4650      	mov	r0, sl
   1c2a4:	f001 fbba 	bl	1da1c <_Balloc>
   1c2a8:	4653      	mov	r3, sl
   1c2aa:	6418      	str	r0, [r3, #64]	; 0x40
   1c2ac:	4643      	mov	r3, r8
   1c2ae:	900a      	str	r0, [sp, #40]	; 0x28
   1c2b0:	2b0e      	cmp	r3, #14
   1c2b2:	d900      	bls.n	1c2b6 <_dtoa_r+0x222>
   1c2b4:	e161      	b.n	1c57a <_dtoa_r+0x4e6>
   1c2b6:	2c00      	cmp	r4, #0
   1c2b8:	d100      	bne.n	1c2bc <_dtoa_r+0x228>
   1c2ba:	e15e      	b.n	1c57a <_dtoa_r+0x4e6>
   1c2bc:	9610      	str	r6, [sp, #64]	; 0x40
   1c2be:	9711      	str	r7, [sp, #68]	; 0x44
   1c2c0:	9e03      	ldr	r6, [sp, #12]
   1c2c2:	2e00      	cmp	r6, #0
   1c2c4:	dc01      	bgt.n	1c2ca <_dtoa_r+0x236>
   1c2c6:	f000 fd25 	bl	1cd14 <_dtoa_r+0xc80>
   1c2ca:	0032      	movs	r2, r6
   1c2cc:	210f      	movs	r1, #15
   1c2ce:	4b65      	ldr	r3, [pc, #404]	; (1c464 <_dtoa_r+0x3d0>)
   1c2d0:	400a      	ands	r2, r1
   1c2d2:	00d2      	lsls	r2, r2, #3
   1c2d4:	189b      	adds	r3, r3, r2
   1c2d6:	1136      	asrs	r6, r6, #4
   1c2d8:	681c      	ldr	r4, [r3, #0]
   1c2da:	685d      	ldr	r5, [r3, #4]
   1c2dc:	06f3      	lsls	r3, r6, #27
   1c2de:	d401      	bmi.n	1c2e4 <_dtoa_r+0x250>
   1c2e0:	f000 fcca 	bl	1cc78 <_dtoa_r+0xbe4>
   1c2e4:	4b60      	ldr	r3, [pc, #384]	; (1c468 <_dtoa_r+0x3d4>)
   1c2e6:	400e      	ands	r6, r1
   1c2e8:	6a1a      	ldr	r2, [r3, #32]
   1c2ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1c2ec:	9810      	ldr	r0, [sp, #64]	; 0x40
   1c2ee:	9911      	ldr	r1, [sp, #68]	; 0x44
   1c2f0:	f7fb fef8 	bl	180e4 <__aeabi_ddiv>
   1c2f4:	2303      	movs	r3, #3
   1c2f6:	4698      	mov	r8, r3
   1c2f8:	9008      	str	r0, [sp, #32]
   1c2fa:	9109      	str	r1, [sp, #36]	; 0x24
   1c2fc:	2e00      	cmp	r6, #0
   1c2fe:	d011      	beq.n	1c324 <_dtoa_r+0x290>
   1c300:	4f59      	ldr	r7, [pc, #356]	; (1c468 <_dtoa_r+0x3d4>)
   1c302:	2301      	movs	r3, #1
   1c304:	4233      	tst	r3, r6
   1c306:	d009      	beq.n	1c31c <_dtoa_r+0x288>
   1c308:	469c      	mov	ip, r3
   1c30a:	683a      	ldr	r2, [r7, #0]
   1c30c:	687b      	ldr	r3, [r7, #4]
   1c30e:	0020      	movs	r0, r4
   1c310:	0029      	movs	r1, r5
   1c312:	44e0      	add	r8, ip
   1c314:	f7fc fb1a 	bl	1894c <__aeabi_dmul>
   1c318:	0004      	movs	r4, r0
   1c31a:	000d      	movs	r5, r1
   1c31c:	1076      	asrs	r6, r6, #1
   1c31e:	3708      	adds	r7, #8
   1c320:	2e00      	cmp	r6, #0
   1c322:	d1ee      	bne.n	1c302 <_dtoa_r+0x26e>
   1c324:	0022      	movs	r2, r4
   1c326:	9808      	ldr	r0, [sp, #32]
   1c328:	9909      	ldr	r1, [sp, #36]	; 0x24
   1c32a:	002b      	movs	r3, r5
   1c32c:	f7fb feda 	bl	180e4 <__aeabi_ddiv>
   1c330:	0006      	movs	r6, r0
   1c332:	000f      	movs	r7, r1
   1c334:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1c336:	2b00      	cmp	r3, #0
   1c338:	d009      	beq.n	1c34e <_dtoa_r+0x2ba>
   1c33a:	2200      	movs	r2, #0
   1c33c:	4b40      	ldr	r3, [pc, #256]	; (1c440 <_dtoa_r+0x3ac>)
   1c33e:	0030      	movs	r0, r6
   1c340:	0039      	movs	r1, r7
   1c342:	f7fa fb09 	bl	16958 <__aeabi_dcmplt>
   1c346:	2800      	cmp	r0, #0
   1c348:	d001      	beq.n	1c34e <_dtoa_r+0x2ba>
   1c34a:	f000 fdc2 	bl	1ced2 <_dtoa_r+0xe3e>
   1c34e:	4640      	mov	r0, r8
   1c350:	f7fd f8c6 	bl	194e0 <__aeabi_i2d>
   1c354:	0032      	movs	r2, r6
   1c356:	003b      	movs	r3, r7
   1c358:	f7fc faf8 	bl	1894c <__aeabi_dmul>
   1c35c:	2200      	movs	r2, #0
   1c35e:	4b43      	ldr	r3, [pc, #268]	; (1c46c <_dtoa_r+0x3d8>)
   1c360:	f7fb fbb0 	bl	17ac4 <__aeabi_dadd>
   1c364:	4a42      	ldr	r2, [pc, #264]	; (1c470 <_dtoa_r+0x3dc>)
   1c366:	000b      	movs	r3, r1
   1c368:	4694      	mov	ip, r2
   1c36a:	4463      	add	r3, ip
   1c36c:	9008      	str	r0, [sp, #32]
   1c36e:	9109      	str	r1, [sp, #36]	; 0x24
   1c370:	9309      	str	r3, [sp, #36]	; 0x24
   1c372:	9b07      	ldr	r3, [sp, #28]
   1c374:	2b00      	cmp	r3, #0
   1c376:	d101      	bne.n	1c37c <_dtoa_r+0x2e8>
   1c378:	f000 fc50 	bl	1cc1c <_dtoa_r+0xb88>
   1c37c:	9b03      	ldr	r3, [sp, #12]
   1c37e:	9313      	str	r3, [sp, #76]	; 0x4c
   1c380:	9b07      	ldr	r3, [sp, #28]
   1c382:	9312      	str	r3, [sp, #72]	; 0x48
   1c384:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1c386:	2b00      	cmp	r3, #0
   1c388:	d101      	bne.n	1c38e <_dtoa_r+0x2fa>
   1c38a:	f000 fd1d 	bl	1cdc8 <_dtoa_r+0xd34>
   1c38e:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1c390:	2000      	movs	r0, #0
   1c392:	1e5a      	subs	r2, r3, #1
   1c394:	4b33      	ldr	r3, [pc, #204]	; (1c464 <_dtoa_r+0x3d0>)
   1c396:	00d2      	lsls	r2, r2, #3
   1c398:	189b      	adds	r3, r3, r2
   1c39a:	681a      	ldr	r2, [r3, #0]
   1c39c:	685b      	ldr	r3, [r3, #4]
   1c39e:	4935      	ldr	r1, [pc, #212]	; (1c474 <_dtoa_r+0x3e0>)
   1c3a0:	f7fb fea0 	bl	180e4 <__aeabi_ddiv>
   1c3a4:	9a08      	ldr	r2, [sp, #32]
   1c3a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1c3a8:	f7fc fd50 	bl	18e4c <__aeabi_dsub>
   1c3ac:	9008      	str	r0, [sp, #32]
   1c3ae:	9109      	str	r1, [sp, #36]	; 0x24
   1c3b0:	0039      	movs	r1, r7
   1c3b2:	0030      	movs	r0, r6
   1c3b4:	f7fd f860 	bl	19478 <__aeabi_d2iz>
   1c3b8:	0004      	movs	r4, r0
   1c3ba:	f7fd f891 	bl	194e0 <__aeabi_i2d>
   1c3be:	0002      	movs	r2, r0
   1c3c0:	000b      	movs	r3, r1
   1c3c2:	0030      	movs	r0, r6
   1c3c4:	0039      	movs	r1, r7
   1c3c6:	f7fc fd41 	bl	18e4c <__aeabi_dsub>
   1c3ca:	0005      	movs	r5, r0
   1c3cc:	000e      	movs	r6, r1
   1c3ce:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1c3d0:	3430      	adds	r4, #48	; 0x30
   1c3d2:	1c51      	adds	r1, r2, #1
   1c3d4:	b2e7      	uxtb	r7, r4
   1c3d6:	9114      	str	r1, [sp, #80]	; 0x50
   1c3d8:	7017      	strb	r7, [r2, #0]
   1c3da:	0033      	movs	r3, r6
   1c3dc:	9808      	ldr	r0, [sp, #32]
   1c3de:	9909      	ldr	r1, [sp, #36]	; 0x24
   1c3e0:	002a      	movs	r2, r5
   1c3e2:	f7fa facd 	bl	16980 <__aeabi_dcmpgt>
   1c3e6:	2800      	cmp	r0, #0
   1c3e8:	d001      	beq.n	1c3ee <_dtoa_r+0x35a>
   1c3ea:	f000 fdfe 	bl	1cfea <_dtoa_r+0xf56>
   1c3ee:	002a      	movs	r2, r5
   1c3f0:	0033      	movs	r3, r6
   1c3f2:	2000      	movs	r0, #0
   1c3f4:	4912      	ldr	r1, [pc, #72]	; (1c440 <_dtoa_r+0x3ac>)
   1c3f6:	f7fc fd29 	bl	18e4c <__aeabi_dsub>
   1c3fa:	0002      	movs	r2, r0
   1c3fc:	000b      	movs	r3, r1
   1c3fe:	9808      	ldr	r0, [sp, #32]
   1c400:	9909      	ldr	r1, [sp, #36]	; 0x24
   1c402:	f7fa fabd 	bl	16980 <__aeabi_dcmpgt>
   1c406:	2800      	cmp	r0, #0
   1c408:	d001      	beq.n	1c40e <_dtoa_r+0x37a>
   1c40a:	f000 fde7 	bl	1cfdc <_dtoa_r+0xf48>
   1c40e:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1c410:	2b01      	cmp	r3, #1
   1c412:	d101      	bne.n	1c418 <_dtoa_r+0x384>
   1c414:	f000 fc78 	bl	1cd08 <_dtoa_r+0xc74>
   1c418:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1c41a:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1c41c:	4694      	mov	ip, r2
   1c41e:	4463      	add	r3, ip
   1c420:	4698      	mov	r8, r3
   1c422:	464b      	mov	r3, r9
   1c424:	9312      	str	r3, [sp, #72]	; 0x48
   1c426:	9b14      	ldr	r3, [sp, #80]	; 0x50
   1c428:	4699      	mov	r9, r3
   1c42a:	e038      	b.n	1c49e <_dtoa_r+0x40a>
   1c42c:	7ff00000 	.word	0x7ff00000
   1c430:	0001f9c9 	.word	0x0001f9c9
   1c434:	0000270f 	.word	0x0000270f
   1c438:	0002087c 	.word	0x0002087c
   1c43c:	00020888 	.word	0x00020888
   1c440:	3ff00000 	.word	0x3ff00000
   1c444:	fffffc01 	.word	0xfffffc01
   1c448:	3ff80000 	.word	0x3ff80000
   1c44c:	636f4361 	.word	0x636f4361
   1c450:	3fd287a7 	.word	0x3fd287a7
   1c454:	8b60c8b3 	.word	0x8b60c8b3
   1c458:	3fc68a28 	.word	0x3fc68a28
   1c45c:	509f79fb 	.word	0x509f79fb
   1c460:	3fd34413 	.word	0x3fd34413
   1c464:	000208b8 	.word	0x000208b8
   1c468:	00020890 	.word	0x00020890
   1c46c:	401c0000 	.word	0x401c0000
   1c470:	fcc00000 	.word	0xfcc00000
   1c474:	3fe00000 	.word	0x3fe00000
   1c478:	002a      	movs	r2, r5
   1c47a:	0033      	movs	r3, r6
   1c47c:	2000      	movs	r0, #0
   1c47e:	49b9      	ldr	r1, [pc, #740]	; (1c764 <_dtoa_r+0x6d0>)
   1c480:	f7fc fce4 	bl	18e4c <__aeabi_dsub>
   1c484:	9a08      	ldr	r2, [sp, #32]
   1c486:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1c488:	f7fa fa66 	bl	16958 <__aeabi_dcmplt>
   1c48c:	2800      	cmp	r0, #0
   1c48e:	d001      	beq.n	1c494 <_dtoa_r+0x400>
   1c490:	f000 fd74 	bl	1cf7c <_dtoa_r+0xee8>
   1c494:	46a1      	mov	r9, r4
   1c496:	4544      	cmp	r4, r8
   1c498:	d101      	bne.n	1c49e <_dtoa_r+0x40a>
   1c49a:	f000 fc33 	bl	1cd04 <_dtoa_r+0xc70>
   1c49e:	9808      	ldr	r0, [sp, #32]
   1c4a0:	9909      	ldr	r1, [sp, #36]	; 0x24
   1c4a2:	2200      	movs	r2, #0
   1c4a4:	4bb0      	ldr	r3, [pc, #704]	; (1c768 <_dtoa_r+0x6d4>)
   1c4a6:	f7fc fa51 	bl	1894c <__aeabi_dmul>
   1c4aa:	2200      	movs	r2, #0
   1c4ac:	4bae      	ldr	r3, [pc, #696]	; (1c768 <_dtoa_r+0x6d4>)
   1c4ae:	9008      	str	r0, [sp, #32]
   1c4b0:	9109      	str	r1, [sp, #36]	; 0x24
   1c4b2:	0028      	movs	r0, r5
   1c4b4:	0031      	movs	r1, r6
   1c4b6:	f7fc fa49 	bl	1894c <__aeabi_dmul>
   1c4ba:	000d      	movs	r5, r1
   1c4bc:	0004      	movs	r4, r0
   1c4be:	f7fc ffdb 	bl	19478 <__aeabi_d2iz>
   1c4c2:	0007      	movs	r7, r0
   1c4c4:	f7fd f80c 	bl	194e0 <__aeabi_i2d>
   1c4c8:	0002      	movs	r2, r0
   1c4ca:	000b      	movs	r3, r1
   1c4cc:	0020      	movs	r0, r4
   1c4ce:	0029      	movs	r1, r5
   1c4d0:	f7fc fcbc 	bl	18e4c <__aeabi_dsub>
   1c4d4:	464b      	mov	r3, r9
   1c4d6:	3730      	adds	r7, #48	; 0x30
   1c4d8:	b2ff      	uxtb	r7, r7
   1c4da:	1c5c      	adds	r4, r3, #1
   1c4dc:	701f      	strb	r7, [r3, #0]
   1c4de:	9a08      	ldr	r2, [sp, #32]
   1c4e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1c4e2:	0005      	movs	r5, r0
   1c4e4:	000e      	movs	r6, r1
   1c4e6:	f7fa fa37 	bl	16958 <__aeabi_dcmplt>
   1c4ea:	2800      	cmp	r0, #0
   1c4ec:	d0c4      	beq.n	1c478 <_dtoa_r+0x3e4>
   1c4ee:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   1c4f0:	9303      	str	r3, [sp, #12]
   1c4f2:	4659      	mov	r1, fp
   1c4f4:	4650      	mov	r0, sl
   1c4f6:	f001 fab9 	bl	1da6c <_Bfree>
   1c4fa:	2300      	movs	r3, #0
   1c4fc:	7023      	strb	r3, [r4, #0]
   1c4fe:	9b03      	ldr	r3, [sp, #12]
   1c500:	9a24      	ldr	r2, [sp, #144]	; 0x90
   1c502:	3301      	adds	r3, #1
   1c504:	6013      	str	r3, [r2, #0]
   1c506:	9b26      	ldr	r3, [sp, #152]	; 0x98
   1c508:	2b00      	cmp	r3, #0
   1c50a:	d100      	bne.n	1c50e <_dtoa_r+0x47a>
   1c50c:	e3a8      	b.n	1cc60 <_dtoa_r+0xbcc>
   1c50e:	601c      	str	r4, [r3, #0]
   1c510:	980a      	ldr	r0, [sp, #40]	; 0x28
   1c512:	e5f4      	b.n	1c0fe <_dtoa_r+0x6a>
   1c514:	9b16      	ldr	r3, [sp, #88]	; 0x58
   1c516:	4699      	mov	r9, r3
   1c518:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   1c51a:	444b      	add	r3, r9
   1c51c:	001c      	movs	r4, r3
   1c51e:	4b93      	ldr	r3, [pc, #588]	; (1c76c <_dtoa_r+0x6d8>)
   1c520:	18e3      	adds	r3, r4, r3
   1c522:	2b20      	cmp	r3, #32
   1c524:	dc00      	bgt.n	1c528 <_dtoa_r+0x494>
   1c526:	e17e      	b.n	1c826 <_dtoa_r+0x792>
   1c528:	0031      	movs	r1, r6
   1c52a:	4a91      	ldr	r2, [pc, #580]	; (1c770 <_dtoa_r+0x6dc>)
   1c52c:	4640      	mov	r0, r8
   1c52e:	18a2      	adds	r2, r4, r2
   1c530:	40d1      	lsrs	r1, r2
   1c532:	000a      	movs	r2, r1
   1c534:	2140      	movs	r1, #64	; 0x40
   1c536:	1acb      	subs	r3, r1, r3
   1c538:	4098      	lsls	r0, r3
   1c53a:	4310      	orrs	r0, r2
   1c53c:	f7fd f812 	bl	19564 <__aeabi_ui2d>
   1c540:	1e63      	subs	r3, r4, #1
   1c542:	4698      	mov	r8, r3
   1c544:	2301      	movs	r3, #1
   1c546:	4d8b      	ldr	r5, [pc, #556]	; (1c774 <_dtoa_r+0x6e0>)
   1c548:	930f      	str	r3, [sp, #60]	; 0x3c
   1c54a:	1949      	adds	r1, r1, r5
   1c54c:	e618      	b.n	1c180 <_dtoa_r+0xec>
   1c54e:	488a      	ldr	r0, [pc, #552]	; (1c778 <_dtoa_r+0x6e4>)
   1c550:	e5d5      	b.n	1c0fe <_dtoa_r+0x6a>
   1c552:	2300      	movs	r3, #0
   1c554:	4652      	mov	r2, sl
   1c556:	2100      	movs	r1, #0
   1c558:	6453      	str	r3, [r2, #68]	; 0x44
   1c55a:	4650      	mov	r0, sl
   1c55c:	f001 fa5e 	bl	1da1c <_Balloc>
   1c560:	4653      	mov	r3, sl
   1c562:	6418      	str	r0, [r3, #64]	; 0x40
   1c564:	2301      	movs	r3, #1
   1c566:	425b      	negs	r3, r3
   1c568:	9307      	str	r3, [sp, #28]
   1c56a:	930e      	str	r3, [sp, #56]	; 0x38
   1c56c:	3302      	adds	r3, #2
   1c56e:	2200      	movs	r2, #0
   1c570:	930b      	str	r3, [sp, #44]	; 0x2c
   1c572:	2300      	movs	r3, #0
   1c574:	900a      	str	r0, [sp, #40]	; 0x28
   1c576:	9223      	str	r2, [sp, #140]	; 0x8c
   1c578:	9322      	str	r3, [sp, #136]	; 0x88
   1c57a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   1c57c:	2b00      	cmp	r3, #0
   1c57e:	da00      	bge.n	1c582 <_dtoa_r+0x4ee>
   1c580:	e0ab      	b.n	1c6da <_dtoa_r+0x646>
   1c582:	9a03      	ldr	r2, [sp, #12]
   1c584:	2a0e      	cmp	r2, #14
   1c586:	dd00      	ble.n	1c58a <_dtoa_r+0x4f6>
   1c588:	e0a7      	b.n	1c6da <_dtoa_r+0x646>
   1c58a:	4b7c      	ldr	r3, [pc, #496]	; (1c77c <_dtoa_r+0x6e8>)
   1c58c:	00d2      	lsls	r2, r2, #3
   1c58e:	189b      	adds	r3, r3, r2
   1c590:	685c      	ldr	r4, [r3, #4]
   1c592:	681b      	ldr	r3, [r3, #0]
   1c594:	9304      	str	r3, [sp, #16]
   1c596:	9405      	str	r4, [sp, #20]
   1c598:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   1c59a:	2b00      	cmp	r3, #0
   1c59c:	da00      	bge.n	1c5a0 <_dtoa_r+0x50c>
   1c59e:	e2a7      	b.n	1caf0 <_dtoa_r+0xa5c>
   1c5a0:	9c04      	ldr	r4, [sp, #16]
   1c5a2:	9d05      	ldr	r5, [sp, #20]
   1c5a4:	0030      	movs	r0, r6
   1c5a6:	0022      	movs	r2, r4
   1c5a8:	002b      	movs	r3, r5
   1c5aa:	0039      	movs	r1, r7
   1c5ac:	f7fb fd9a 	bl	180e4 <__aeabi_ddiv>
   1c5b0:	f7fc ff62 	bl	19478 <__aeabi_d2iz>
   1c5b4:	4680      	mov	r8, r0
   1c5b6:	f7fc ff93 	bl	194e0 <__aeabi_i2d>
   1c5ba:	0022      	movs	r2, r4
   1c5bc:	002b      	movs	r3, r5
   1c5be:	f7fc f9c5 	bl	1894c <__aeabi_dmul>
   1c5c2:	0002      	movs	r2, r0
   1c5c4:	000b      	movs	r3, r1
   1c5c6:	0030      	movs	r0, r6
   1c5c8:	0039      	movs	r1, r7
   1c5ca:	f7fc fc3f 	bl	18e4c <__aeabi_dsub>
   1c5ce:	4643      	mov	r3, r8
   1c5d0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1c5d2:	3330      	adds	r3, #48	; 0x30
   1c5d4:	7013      	strb	r3, [r2, #0]
   1c5d6:	9b07      	ldr	r3, [sp, #28]
   1c5d8:	0006      	movs	r6, r0
   1c5da:	000f      	movs	r7, r1
   1c5dc:	1c54      	adds	r4, r2, #1
   1c5de:	2b01      	cmp	r3, #1
   1c5e0:	d04e      	beq.n	1c680 <_dtoa_r+0x5ec>
   1c5e2:	2200      	movs	r2, #0
   1c5e4:	4b60      	ldr	r3, [pc, #384]	; (1c768 <_dtoa_r+0x6d4>)
   1c5e6:	f7fc f9b1 	bl	1894c <__aeabi_dmul>
   1c5ea:	2200      	movs	r2, #0
   1c5ec:	2300      	movs	r3, #0
   1c5ee:	0006      	movs	r6, r0
   1c5f0:	000f      	movs	r7, r1
   1c5f2:	f7fa f9ab 	bl	1694c <__aeabi_dcmpeq>
   1c5f6:	2800      	cmp	r0, #0
   1c5f8:	d000      	beq.n	1c5fc <_dtoa_r+0x568>
   1c5fa:	e77a      	b.n	1c4f2 <_dtoa_r+0x45e>
   1c5fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1c5fe:	9a07      	ldr	r2, [sp, #28]
   1c600:	1c9d      	adds	r5, r3, #2
   1c602:	469c      	mov	ip, r3
   1c604:	465b      	mov	r3, fp
   1c606:	9306      	str	r3, [sp, #24]
   1c608:	4653      	mov	r3, sl
   1c60a:	4462      	add	r2, ip
   1c60c:	46aa      	mov	sl, r5
   1c60e:	9c04      	ldr	r4, [sp, #16]
   1c610:	9d05      	ldr	r5, [sp, #20]
   1c612:	4691      	mov	r9, r2
   1c614:	9307      	str	r3, [sp, #28]
   1c616:	e00f      	b.n	1c638 <_dtoa_r+0x5a4>
   1c618:	2200      	movs	r2, #0
   1c61a:	4b53      	ldr	r3, [pc, #332]	; (1c768 <_dtoa_r+0x6d4>)
   1c61c:	f7fc f996 	bl	1894c <__aeabi_dmul>
   1c620:	2301      	movs	r3, #1
   1c622:	469c      	mov	ip, r3
   1c624:	2200      	movs	r2, #0
   1c626:	2300      	movs	r3, #0
   1c628:	0006      	movs	r6, r0
   1c62a:	000f      	movs	r7, r1
   1c62c:	44e2      	add	sl, ip
   1c62e:	f7fa f98d 	bl	1694c <__aeabi_dcmpeq>
   1c632:	2800      	cmp	r0, #0
   1c634:	d000      	beq.n	1c638 <_dtoa_r+0x5a4>
   1c636:	e2d9      	b.n	1cbec <_dtoa_r+0xb58>
   1c638:	0022      	movs	r2, r4
   1c63a:	002b      	movs	r3, r5
   1c63c:	0030      	movs	r0, r6
   1c63e:	0039      	movs	r1, r7
   1c640:	f7fb fd50 	bl	180e4 <__aeabi_ddiv>
   1c644:	f7fc ff18 	bl	19478 <__aeabi_d2iz>
   1c648:	4680      	mov	r8, r0
   1c64a:	f7fc ff49 	bl	194e0 <__aeabi_i2d>
   1c64e:	0022      	movs	r2, r4
   1c650:	002b      	movs	r3, r5
   1c652:	f7fc f97b 	bl	1894c <__aeabi_dmul>
   1c656:	0002      	movs	r2, r0
   1c658:	000b      	movs	r3, r1
   1c65a:	0030      	movs	r0, r6
   1c65c:	0039      	movs	r1, r7
   1c65e:	f7fc fbf5 	bl	18e4c <__aeabi_dsub>
   1c662:	4653      	mov	r3, sl
   1c664:	4642      	mov	r2, r8
   1c666:	3b01      	subs	r3, #1
   1c668:	3230      	adds	r2, #48	; 0x30
   1c66a:	0006      	movs	r6, r0
   1c66c:	000f      	movs	r7, r1
   1c66e:	46d3      	mov	fp, sl
   1c670:	701a      	strb	r2, [r3, #0]
   1c672:	45d1      	cmp	r9, sl
   1c674:	d1d0      	bne.n	1c618 <_dtoa_r+0x584>
   1c676:	9b06      	ldr	r3, [sp, #24]
   1c678:	4654      	mov	r4, sl
   1c67a:	469b      	mov	fp, r3
   1c67c:	9b07      	ldr	r3, [sp, #28]
   1c67e:	469a      	mov	sl, r3
   1c680:	0032      	movs	r2, r6
   1c682:	003b      	movs	r3, r7
   1c684:	0030      	movs	r0, r6
   1c686:	0039      	movs	r1, r7
   1c688:	f7fb fa1c 	bl	17ac4 <__aeabi_dadd>
   1c68c:	0006      	movs	r6, r0
   1c68e:	000f      	movs	r7, r1
   1c690:	0002      	movs	r2, r0
   1c692:	000b      	movs	r3, r1
   1c694:	9804      	ldr	r0, [sp, #16]
   1c696:	9905      	ldr	r1, [sp, #20]
   1c698:	f7fa f95e 	bl	16958 <__aeabi_dcmplt>
   1c69c:	2800      	cmp	r0, #0
   1c69e:	d10c      	bne.n	1c6ba <_dtoa_r+0x626>
   1c6a0:	9804      	ldr	r0, [sp, #16]
   1c6a2:	9905      	ldr	r1, [sp, #20]
   1c6a4:	0032      	movs	r2, r6
   1c6a6:	003b      	movs	r3, r7
   1c6a8:	f7fa f950 	bl	1694c <__aeabi_dcmpeq>
   1c6ac:	2800      	cmp	r0, #0
   1c6ae:	d100      	bne.n	1c6b2 <_dtoa_r+0x61e>
   1c6b0:	e71f      	b.n	1c4f2 <_dtoa_r+0x45e>
   1c6b2:	4643      	mov	r3, r8
   1c6b4:	07db      	lsls	r3, r3, #31
   1c6b6:	d400      	bmi.n	1c6ba <_dtoa_r+0x626>
   1c6b8:	e71b      	b.n	1c4f2 <_dtoa_r+0x45e>
   1c6ba:	1e65      	subs	r5, r4, #1
   1c6bc:	782f      	ldrb	r7, [r5, #0]
   1c6be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1c6c0:	e006      	b.n	1c6d0 <_dtoa_r+0x63c>
   1c6c2:	429d      	cmp	r5, r3
   1c6c4:	d100      	bne.n	1c6c8 <_dtoa_r+0x634>
   1c6c6:	e351      	b.n	1cd6c <_dtoa_r+0xcd8>
   1c6c8:	3c02      	subs	r4, #2
   1c6ca:	7827      	ldrb	r7, [r4, #0]
   1c6cc:	002c      	movs	r4, r5
   1c6ce:	3d01      	subs	r5, #1
   1c6d0:	2f39      	cmp	r7, #57	; 0x39
   1c6d2:	d0f6      	beq.n	1c6c2 <_dtoa_r+0x62e>
   1c6d4:	3701      	adds	r7, #1
   1c6d6:	702f      	strb	r7, [r5, #0]
   1c6d8:	e70b      	b.n	1c4f2 <_dtoa_r+0x45e>
   1c6da:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   1c6dc:	2a00      	cmp	r2, #0
   1c6de:	d04f      	beq.n	1c780 <_dtoa_r+0x6ec>
   1c6e0:	9a22      	ldr	r2, [sp, #136]	; 0x88
   1c6e2:	2a01      	cmp	r2, #1
   1c6e4:	dc00      	bgt.n	1c6e8 <_dtoa_r+0x654>
   1c6e6:	e22c      	b.n	1cb42 <_dtoa_r+0xaae>
   1c6e8:	9b07      	ldr	r3, [sp, #28]
   1c6ea:	1e5c      	subs	r4, r3, #1
   1c6ec:	464b      	mov	r3, r9
   1c6ee:	45a1      	cmp	r9, r4
   1c6f0:	da00      	bge.n	1c6f4 <_dtoa_r+0x660>
   1c6f2:	e2b8      	b.n	1cc66 <_dtoa_r+0xbd2>
   1c6f4:	1b1c      	subs	r4, r3, r4
   1c6f6:	9b07      	ldr	r3, [sp, #28]
   1c6f8:	2b00      	cmp	r3, #0
   1c6fa:	da00      	bge.n	1c6fe <_dtoa_r+0x66a>
   1c6fc:	e3d4      	b.n	1cea8 <_dtoa_r+0xe14>
   1c6fe:	9b06      	ldr	r3, [sp, #24]
   1c700:	9308      	str	r3, [sp, #32]
   1c702:	9b07      	ldr	r3, [sp, #28]
   1c704:	9a06      	ldr	r2, [sp, #24]
   1c706:	2101      	movs	r1, #1
   1c708:	4694      	mov	ip, r2
   1c70a:	449c      	add	ip, r3
   1c70c:	4662      	mov	r2, ip
   1c70e:	9206      	str	r2, [sp, #24]
   1c710:	9a04      	ldr	r2, [sp, #16]
   1c712:	4650      	mov	r0, sl
   1c714:	4694      	mov	ip, r2
   1c716:	449c      	add	ip, r3
   1c718:	4663      	mov	r3, ip
   1c71a:	9304      	str	r3, [sp, #16]
   1c71c:	f001 fa3e 	bl	1db9c <__i2b>
   1c720:	4680      	mov	r8, r0
   1c722:	e032      	b.n	1c78a <_dtoa_r+0x6f6>
   1c724:	9a06      	ldr	r2, [sp, #24]
   1c726:	9b03      	ldr	r3, [sp, #12]
   1c728:	1ad2      	subs	r2, r2, r3
   1c72a:	425b      	negs	r3, r3
   1c72c:	4699      	mov	r9, r3
   1c72e:	2300      	movs	r3, #0
   1c730:	9206      	str	r2, [sp, #24]
   1c732:	930d      	str	r3, [sp, #52]	; 0x34
   1c734:	e579      	b.n	1c22a <_dtoa_r+0x196>
   1c736:	9803      	ldr	r0, [sp, #12]
   1c738:	f7fc fed2 	bl	194e0 <__aeabi_i2d>
   1c73c:	000b      	movs	r3, r1
   1c73e:	0002      	movs	r2, r0
   1c740:	0029      	movs	r1, r5
   1c742:	0020      	movs	r0, r4
   1c744:	f7fa f902 	bl	1694c <__aeabi_dcmpeq>
   1c748:	0002      	movs	r2, r0
   1c74a:	4250      	negs	r0, r2
   1c74c:	4150      	adcs	r0, r2
   1c74e:	9b03      	ldr	r3, [sp, #12]
   1c750:	1a1b      	subs	r3, r3, r0
   1c752:	9303      	str	r3, [sp, #12]
   1c754:	e53d      	b.n	1c1d2 <_dtoa_r+0x13e>
   1c756:	2301      	movs	r3, #1
   1c758:	1a9b      	subs	r3, r3, r2
   1c75a:	9306      	str	r3, [sp, #24]
   1c75c:	2300      	movs	r3, #0
   1c75e:	9304      	str	r3, [sp, #16]
   1c760:	e557      	b.n	1c212 <_dtoa_r+0x17e>
   1c762:	46c0      	nop			; (mov r8, r8)
   1c764:	3ff00000 	.word	0x3ff00000
   1c768:	40240000 	.word	0x40240000
   1c76c:	00000432 	.word	0x00000432
   1c770:	00000412 	.word	0x00000412
   1c774:	fe100000 	.word	0xfe100000
   1c778:	0001f9c8 	.word	0x0001f9c8
   1c77c:	000208b8 	.word	0x000208b8
   1c780:	9b06      	ldr	r3, [sp, #24]
   1c782:	464c      	mov	r4, r9
   1c784:	9308      	str	r3, [sp, #32]
   1c786:	2300      	movs	r3, #0
   1c788:	4698      	mov	r8, r3
   1c78a:	9908      	ldr	r1, [sp, #32]
   1c78c:	1e0b      	subs	r3, r1, #0
   1c78e:	dd0e      	ble.n	1c7ae <_dtoa_r+0x71a>
   1c790:	9a04      	ldr	r2, [sp, #16]
   1c792:	2a00      	cmp	r2, #0
   1c794:	dd0b      	ble.n	1c7ae <_dtoa_r+0x71a>
   1c796:	4293      	cmp	r3, r2
   1c798:	dd00      	ble.n	1c79c <_dtoa_r+0x708>
   1c79a:	e187      	b.n	1caac <_dtoa_r+0xa18>
   1c79c:	9a06      	ldr	r2, [sp, #24]
   1c79e:	1ad2      	subs	r2, r2, r3
   1c7a0:	9206      	str	r2, [sp, #24]
   1c7a2:	9a08      	ldr	r2, [sp, #32]
   1c7a4:	1ad2      	subs	r2, r2, r3
   1c7a6:	9208      	str	r2, [sp, #32]
   1c7a8:	9a04      	ldr	r2, [sp, #16]
   1c7aa:	1ad3      	subs	r3, r2, r3
   1c7ac:	9304      	str	r3, [sp, #16]
   1c7ae:	464b      	mov	r3, r9
   1c7b0:	2b00      	cmp	r3, #0
   1c7b2:	d01a      	beq.n	1c7ea <_dtoa_r+0x756>
   1c7b4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1c7b6:	2b00      	cmp	r3, #0
   1c7b8:	d100      	bne.n	1c7bc <_dtoa_r+0x728>
   1c7ba:	e1bb      	b.n	1cb34 <_dtoa_r+0xaa0>
   1c7bc:	2c00      	cmp	r4, #0
   1c7be:	dd10      	ble.n	1c7e2 <_dtoa_r+0x74e>
   1c7c0:	4641      	mov	r1, r8
   1c7c2:	0022      	movs	r2, r4
   1c7c4:	4650      	mov	r0, sl
   1c7c6:	f001 fa9d 	bl	1dd04 <__pow5mult>
   1c7ca:	465a      	mov	r2, fp
   1c7cc:	0001      	movs	r1, r0
   1c7ce:	4680      	mov	r8, r0
   1c7d0:	4650      	mov	r0, sl
   1c7d2:	f001 f9ed 	bl	1dbb0 <__multiply>
   1c7d6:	0005      	movs	r5, r0
   1c7d8:	4659      	mov	r1, fp
   1c7da:	4650      	mov	r0, sl
   1c7dc:	f001 f946 	bl	1da6c <_Bfree>
   1c7e0:	46ab      	mov	fp, r5
   1c7e2:	464b      	mov	r3, r9
   1c7e4:	1b1a      	subs	r2, r3, r4
   1c7e6:	d000      	beq.n	1c7ea <_dtoa_r+0x756>
   1c7e8:	e1a5      	b.n	1cb36 <_dtoa_r+0xaa2>
   1c7ea:	2101      	movs	r1, #1
   1c7ec:	4650      	mov	r0, sl
   1c7ee:	f001 f9d5 	bl	1db9c <__i2b>
   1c7f2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1c7f4:	4681      	mov	r9, r0
   1c7f6:	2b00      	cmp	r3, #0
   1c7f8:	dd1d      	ble.n	1c836 <_dtoa_r+0x7a2>
   1c7fa:	001a      	movs	r2, r3
   1c7fc:	0001      	movs	r1, r0
   1c7fe:	4650      	mov	r0, sl
   1c800:	f001 fa80 	bl	1dd04 <__pow5mult>
   1c804:	9b22      	ldr	r3, [sp, #136]	; 0x88
   1c806:	4681      	mov	r9, r0
   1c808:	2b01      	cmp	r3, #1
   1c80a:	dc00      	bgt.n	1c80e <_dtoa_r+0x77a>
   1c80c:	e150      	b.n	1cab0 <_dtoa_r+0xa1c>
   1c80e:	2400      	movs	r4, #0
   1c810:	464b      	mov	r3, r9
   1c812:	691b      	ldr	r3, [r3, #16]
   1c814:	3303      	adds	r3, #3
   1c816:	009b      	lsls	r3, r3, #2
   1c818:	444b      	add	r3, r9
   1c81a:	6858      	ldr	r0, [r3, #4]
   1c81c:	f001 f976 	bl	1db0c <__hi0bits>
   1c820:	2320      	movs	r3, #32
   1c822:	1a1b      	subs	r3, r3, r0
   1c824:	e010      	b.n	1c848 <_dtoa_r+0x7b4>
   1c826:	2220      	movs	r2, #32
   1c828:	0030      	movs	r0, r6
   1c82a:	1ad3      	subs	r3, r2, r3
   1c82c:	4098      	lsls	r0, r3
   1c82e:	e685      	b.n	1c53c <_dtoa_r+0x4a8>
   1c830:	2300      	movs	r3, #0
   1c832:	930c      	str	r3, [sp, #48]	; 0x30
   1c834:	e4e3      	b.n	1c1fe <_dtoa_r+0x16a>
   1c836:	9b22      	ldr	r3, [sp, #136]	; 0x88
   1c838:	2400      	movs	r4, #0
   1c83a:	2b01      	cmp	r3, #1
   1c83c:	dc00      	bgt.n	1c840 <_dtoa_r+0x7ac>
   1c83e:	e18b      	b.n	1cb58 <_dtoa_r+0xac4>
   1c840:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   1c842:	2301      	movs	r3, #1
   1c844:	2a00      	cmp	r2, #0
   1c846:	d1e3      	bne.n	1c810 <_dtoa_r+0x77c>
   1c848:	9904      	ldr	r1, [sp, #16]
   1c84a:	201f      	movs	r0, #31
   1c84c:	468c      	mov	ip, r1
   1c84e:	4463      	add	r3, ip
   1c850:	4018      	ands	r0, r3
   1c852:	d100      	bne.n	1c856 <_dtoa_r+0x7c2>
   1c854:	e0ae      	b.n	1c9b4 <_dtoa_r+0x920>
   1c856:	2320      	movs	r3, #32
   1c858:	1a1b      	subs	r3, r3, r0
   1c85a:	2b04      	cmp	r3, #4
   1c85c:	dc00      	bgt.n	1c860 <_dtoa_r+0x7cc>
   1c85e:	e3cc      	b.n	1cffa <_dtoa_r+0xf66>
   1c860:	231c      	movs	r3, #28
   1c862:	1a18      	subs	r0, r3, r0
   1c864:	9b06      	ldr	r3, [sp, #24]
   1c866:	469c      	mov	ip, r3
   1c868:	4484      	add	ip, r0
   1c86a:	4663      	mov	r3, ip
   1c86c:	9306      	str	r3, [sp, #24]
   1c86e:	9b08      	ldr	r3, [sp, #32]
   1c870:	469c      	mov	ip, r3
   1c872:	4484      	add	ip, r0
   1c874:	4663      	mov	r3, ip
   1c876:	468c      	mov	ip, r1
   1c878:	4484      	add	ip, r0
   1c87a:	9308      	str	r3, [sp, #32]
   1c87c:	4663      	mov	r3, ip
   1c87e:	9304      	str	r3, [sp, #16]
   1c880:	9b06      	ldr	r3, [sp, #24]
   1c882:	2b00      	cmp	r3, #0
   1c884:	dd05      	ble.n	1c892 <_dtoa_r+0x7fe>
   1c886:	4659      	mov	r1, fp
   1c888:	001a      	movs	r2, r3
   1c88a:	4650      	mov	r0, sl
   1c88c:	f001 fa9a 	bl	1ddc4 <__lshift>
   1c890:	4683      	mov	fp, r0
   1c892:	9b04      	ldr	r3, [sp, #16]
   1c894:	2b00      	cmp	r3, #0
   1c896:	dd05      	ble.n	1c8a4 <_dtoa_r+0x810>
   1c898:	4649      	mov	r1, r9
   1c89a:	001a      	movs	r2, r3
   1c89c:	4650      	mov	r0, sl
   1c89e:	f001 fa91 	bl	1ddc4 <__lshift>
   1c8a2:	4681      	mov	r9, r0
   1c8a4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1c8a6:	2b00      	cmp	r3, #0
   1c8a8:	d000      	beq.n	1c8ac <_dtoa_r+0x818>
   1c8aa:	e094      	b.n	1c9d6 <_dtoa_r+0x942>
   1c8ac:	9b07      	ldr	r3, [sp, #28]
   1c8ae:	2b00      	cmp	r3, #0
   1c8b0:	dc00      	bgt.n	1c8b4 <_dtoa_r+0x820>
   1c8b2:	e175      	b.n	1cba0 <_dtoa_r+0xb0c>
   1c8b4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1c8b6:	2b00      	cmp	r3, #0
   1c8b8:	d100      	bne.n	1c8bc <_dtoa_r+0x828>
   1c8ba:	e0a6      	b.n	1ca0a <_dtoa_r+0x976>
   1c8bc:	9b08      	ldr	r3, [sp, #32]
   1c8be:	2b00      	cmp	r3, #0
   1c8c0:	dd05      	ble.n	1c8ce <_dtoa_r+0x83a>
   1c8c2:	4641      	mov	r1, r8
   1c8c4:	001a      	movs	r2, r3
   1c8c6:	4650      	mov	r0, sl
   1c8c8:	f001 fa7c 	bl	1ddc4 <__lshift>
   1c8cc:	4680      	mov	r8, r0
   1c8ce:	4643      	mov	r3, r8
   1c8d0:	930c      	str	r3, [sp, #48]	; 0x30
   1c8d2:	2c00      	cmp	r4, #0
   1c8d4:	d000      	beq.n	1c8d8 <_dtoa_r+0x844>
   1c8d6:	e250      	b.n	1cd7a <_dtoa_r+0xce6>
   1c8d8:	9c07      	ldr	r4, [sp, #28]
   1c8da:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1c8dc:	3c01      	subs	r4, #1
   1c8de:	0023      	movs	r3, r4
   1c8e0:	4694      	mov	ip, r2
   1c8e2:	4463      	add	r3, ip
   1c8e4:	9308      	str	r3, [sp, #32]
   1c8e6:	2301      	movs	r3, #1
   1c8e8:	4033      	ands	r3, r6
   1c8ea:	9307      	str	r3, [sp, #28]
   1c8ec:	464b      	mov	r3, r9
   1c8ee:	9306      	str	r3, [sp, #24]
   1c8f0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1c8f2:	4657      	mov	r7, sl
   1c8f4:	4645      	mov	r5, r8
   1c8f6:	465e      	mov	r6, fp
   1c8f8:	4692      	mov	sl, r2
   1c8fa:	4698      	mov	r8, r3
   1c8fc:	9b06      	ldr	r3, [sp, #24]
   1c8fe:	0030      	movs	r0, r6
   1c900:	0019      	movs	r1, r3
   1c902:	4699      	mov	r9, r3
   1c904:	f7ff fb1c 	bl	1bf40 <quorem>
   1c908:	0003      	movs	r3, r0
   1c90a:	900b      	str	r0, [sp, #44]	; 0x2c
   1c90c:	3330      	adds	r3, #48	; 0x30
   1c90e:	0029      	movs	r1, r5
   1c910:	0030      	movs	r0, r6
   1c912:	9304      	str	r3, [sp, #16]
   1c914:	f001 fab6 	bl	1de84 <__mcmp>
   1c918:	4649      	mov	r1, r9
   1c91a:	0004      	movs	r4, r0
   1c91c:	4642      	mov	r2, r8
   1c91e:	0038      	movs	r0, r7
   1c920:	f001 faca 	bl	1deb8 <__mdiff>
   1c924:	68c3      	ldr	r3, [r0, #12]
   1c926:	4681      	mov	r9, r0
   1c928:	2b00      	cmp	r3, #0
   1c92a:	d000      	beq.n	1c92e <_dtoa_r+0x89a>
   1c92c:	e11e      	b.n	1cb6c <_dtoa_r+0xad8>
   1c92e:	0001      	movs	r1, r0
   1c930:	0030      	movs	r0, r6
   1c932:	f001 faa7 	bl	1de84 <__mcmp>
   1c936:	4683      	mov	fp, r0
   1c938:	4649      	mov	r1, r9
   1c93a:	0038      	movs	r0, r7
   1c93c:	f001 f896 	bl	1da6c <_Bfree>
   1c940:	465b      	mov	r3, fp
   1c942:	9a22      	ldr	r2, [sp, #136]	; 0x88
   1c944:	4313      	orrs	r3, r2
   1c946:	d103      	bne.n	1c950 <_dtoa_r+0x8bc>
   1c948:	9b07      	ldr	r3, [sp, #28]
   1c94a:	2b00      	cmp	r3, #0
   1c94c:	d100      	bne.n	1c950 <_dtoa_r+0x8bc>
   1c94e:	e306      	b.n	1cf5e <_dtoa_r+0xeca>
   1c950:	2c00      	cmp	r4, #0
   1c952:	da00      	bge.n	1c956 <_dtoa_r+0x8c2>
   1c954:	e1a8      	b.n	1cca8 <_dtoa_r+0xc14>
   1c956:	9b22      	ldr	r3, [sp, #136]	; 0x88
   1c958:	431c      	orrs	r4, r3
   1c95a:	d103      	bne.n	1c964 <_dtoa_r+0x8d0>
   1c95c:	9b07      	ldr	r3, [sp, #28]
   1c95e:	2b00      	cmp	r3, #0
   1c960:	d100      	bne.n	1c964 <_dtoa_r+0x8d0>
   1c962:	e1a1      	b.n	1cca8 <_dtoa_r+0xc14>
   1c964:	465b      	mov	r3, fp
   1c966:	2b00      	cmp	r3, #0
   1c968:	dd00      	ble.n	1c96c <_dtoa_r+0x8d8>
   1c96a:	e282      	b.n	1ce72 <_dtoa_r+0xdde>
   1c96c:	4669      	mov	r1, sp
   1c96e:	4652      	mov	r2, sl
   1c970:	4653      	mov	r3, sl
   1c972:	7c09      	ldrb	r1, [r1, #16]
   1c974:	1c5c      	adds	r4, r3, #1
   1c976:	7011      	strb	r1, [r2, #0]
   1c978:	9a08      	ldr	r2, [sp, #32]
   1c97a:	4552      	cmp	r2, sl
   1c97c:	d100      	bne.n	1c980 <_dtoa_r+0x8ec>
   1c97e:	e28a      	b.n	1ce96 <_dtoa_r+0xe02>
   1c980:	0031      	movs	r1, r6
   1c982:	2300      	movs	r3, #0
   1c984:	220a      	movs	r2, #10
   1c986:	0038      	movs	r0, r7
   1c988:	f001 f87a 	bl	1da80 <__multadd>
   1c98c:	2300      	movs	r3, #0
   1c98e:	0006      	movs	r6, r0
   1c990:	220a      	movs	r2, #10
   1c992:	0029      	movs	r1, r5
   1c994:	0038      	movs	r0, r7
   1c996:	4545      	cmp	r5, r8
   1c998:	d100      	bne.n	1c99c <_dtoa_r+0x908>
   1c99a:	e0e1      	b.n	1cb60 <_dtoa_r+0xacc>
   1c99c:	f001 f870 	bl	1da80 <__multadd>
   1c9a0:	4641      	mov	r1, r8
   1c9a2:	0005      	movs	r5, r0
   1c9a4:	2300      	movs	r3, #0
   1c9a6:	220a      	movs	r2, #10
   1c9a8:	0038      	movs	r0, r7
   1c9aa:	f001 f869 	bl	1da80 <__multadd>
   1c9ae:	46a2      	mov	sl, r4
   1c9b0:	4680      	mov	r8, r0
   1c9b2:	e7a3      	b.n	1c8fc <_dtoa_r+0x868>
   1c9b4:	201c      	movs	r0, #28
   1c9b6:	9b06      	ldr	r3, [sp, #24]
   1c9b8:	469c      	mov	ip, r3
   1c9ba:	4484      	add	ip, r0
   1c9bc:	4663      	mov	r3, ip
   1c9be:	9306      	str	r3, [sp, #24]
   1c9c0:	9b08      	ldr	r3, [sp, #32]
   1c9c2:	469c      	mov	ip, r3
   1c9c4:	4484      	add	ip, r0
   1c9c6:	4663      	mov	r3, ip
   1c9c8:	9308      	str	r3, [sp, #32]
   1c9ca:	9b04      	ldr	r3, [sp, #16]
   1c9cc:	469c      	mov	ip, r3
   1c9ce:	4484      	add	ip, r0
   1c9d0:	4663      	mov	r3, ip
   1c9d2:	9304      	str	r3, [sp, #16]
   1c9d4:	e754      	b.n	1c880 <_dtoa_r+0x7ec>
   1c9d6:	4649      	mov	r1, r9
   1c9d8:	4658      	mov	r0, fp
   1c9da:	f001 fa53 	bl	1de84 <__mcmp>
   1c9de:	2800      	cmp	r0, #0
   1c9e0:	db00      	blt.n	1c9e4 <_dtoa_r+0x950>
   1c9e2:	e763      	b.n	1c8ac <_dtoa_r+0x818>
   1c9e4:	9b03      	ldr	r3, [sp, #12]
   1c9e6:	4659      	mov	r1, fp
   1c9e8:	3b01      	subs	r3, #1
   1c9ea:	9303      	str	r3, [sp, #12]
   1c9ec:	220a      	movs	r2, #10
   1c9ee:	2300      	movs	r3, #0
   1c9f0:	4650      	mov	r0, sl
   1c9f2:	f001 f845 	bl	1da80 <__multadd>
   1c9f6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1c9f8:	4683      	mov	fp, r0
   1c9fa:	2b00      	cmp	r3, #0
   1c9fc:	d000      	beq.n	1ca00 <_dtoa_r+0x96c>
   1c9fe:	e2ca      	b.n	1cf96 <_dtoa_r+0xf02>
   1ca00:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1ca02:	2b00      	cmp	r3, #0
   1ca04:	dc00      	bgt.n	1ca08 <_dtoa_r+0x974>
   1ca06:	e2d8      	b.n	1cfba <_dtoa_r+0xf26>
   1ca08:	9307      	str	r3, [sp, #28]
   1ca0a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1ca0c:	465d      	mov	r5, fp
   1ca0e:	2400      	movs	r4, #0
   1ca10:	9f07      	ldr	r7, [sp, #28]
   1ca12:	469b      	mov	fp, r3
   1ca14:	e006      	b.n	1ca24 <_dtoa_r+0x990>
   1ca16:	0029      	movs	r1, r5
   1ca18:	2300      	movs	r3, #0
   1ca1a:	220a      	movs	r2, #10
   1ca1c:	4650      	mov	r0, sl
   1ca1e:	f001 f82f 	bl	1da80 <__multadd>
   1ca22:	0005      	movs	r5, r0
   1ca24:	4649      	mov	r1, r9
   1ca26:	0028      	movs	r0, r5
   1ca28:	f7ff fa8a 	bl	1bf40 <quorem>
   1ca2c:	465b      	mov	r3, fp
   1ca2e:	3030      	adds	r0, #48	; 0x30
   1ca30:	5518      	strb	r0, [r3, r4]
   1ca32:	3401      	adds	r4, #1
   1ca34:	42bc      	cmp	r4, r7
   1ca36:	dbee      	blt.n	1ca16 <_dtoa_r+0x982>
   1ca38:	46ab      	mov	fp, r5
   1ca3a:	0006      	movs	r6, r0
   1ca3c:	9c07      	ldr	r4, [sp, #28]
   1ca3e:	2c00      	cmp	r4, #0
   1ca40:	dc00      	bgt.n	1ca44 <_dtoa_r+0x9b0>
   1ca42:	e237      	b.n	1ceb4 <_dtoa_r+0xe20>
   1ca44:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1ca46:	2700      	movs	r7, #0
   1ca48:	469c      	mov	ip, r3
   1ca4a:	4464      	add	r4, ip
   1ca4c:	4659      	mov	r1, fp
   1ca4e:	2201      	movs	r2, #1
   1ca50:	4650      	mov	r0, sl
   1ca52:	f001 f9b7 	bl	1ddc4 <__lshift>
   1ca56:	4649      	mov	r1, r9
   1ca58:	4683      	mov	fp, r0
   1ca5a:	f001 fa13 	bl	1de84 <__mcmp>
   1ca5e:	2800      	cmp	r0, #0
   1ca60:	dc00      	bgt.n	1ca64 <_dtoa_r+0x9d0>
   1ca62:	e144      	b.n	1ccee <_dtoa_r+0xc5a>
   1ca64:	1e65      	subs	r5, r4, #1
   1ca66:	782b      	ldrb	r3, [r5, #0]
   1ca68:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1ca6a:	e006      	b.n	1ca7a <_dtoa_r+0x9e6>
   1ca6c:	4295      	cmp	r5, r2
   1ca6e:	d100      	bne.n	1ca72 <_dtoa_r+0x9de>
   1ca70:	e0b1      	b.n	1cbd6 <_dtoa_r+0xb42>
   1ca72:	3c02      	subs	r4, #2
   1ca74:	7823      	ldrb	r3, [r4, #0]
   1ca76:	002c      	movs	r4, r5
   1ca78:	3d01      	subs	r5, #1
   1ca7a:	2b39      	cmp	r3, #57	; 0x39
   1ca7c:	d0f6      	beq.n	1ca6c <_dtoa_r+0x9d8>
   1ca7e:	3301      	adds	r3, #1
   1ca80:	702b      	strb	r3, [r5, #0]
   1ca82:	4649      	mov	r1, r9
   1ca84:	4650      	mov	r0, sl
   1ca86:	f000 fff1 	bl	1da6c <_Bfree>
   1ca8a:	4643      	mov	r3, r8
   1ca8c:	2b00      	cmp	r3, #0
   1ca8e:	d100      	bne.n	1ca92 <_dtoa_r+0x9fe>
   1ca90:	e52f      	b.n	1c4f2 <_dtoa_r+0x45e>
   1ca92:	2f00      	cmp	r7, #0
   1ca94:	d005      	beq.n	1caa2 <_dtoa_r+0xa0e>
   1ca96:	4547      	cmp	r7, r8
   1ca98:	d003      	beq.n	1caa2 <_dtoa_r+0xa0e>
   1ca9a:	0039      	movs	r1, r7
   1ca9c:	4650      	mov	r0, sl
   1ca9e:	f000 ffe5 	bl	1da6c <_Bfree>
   1caa2:	4641      	mov	r1, r8
   1caa4:	4650      	mov	r0, sl
   1caa6:	f000 ffe1 	bl	1da6c <_Bfree>
   1caaa:	e522      	b.n	1c4f2 <_dtoa_r+0x45e>
   1caac:	0013      	movs	r3, r2
   1caae:	e675      	b.n	1c79c <_dtoa_r+0x708>
   1cab0:	2e00      	cmp	r6, #0
   1cab2:	d000      	beq.n	1cab6 <_dtoa_r+0xa22>
   1cab4:	e6ab      	b.n	1c80e <_dtoa_r+0x77a>
   1cab6:	033b      	lsls	r3, r7, #12
   1cab8:	2400      	movs	r4, #0
   1caba:	2b00      	cmp	r3, #0
   1cabc:	d000      	beq.n	1cac0 <_dtoa_r+0xa2c>
   1cabe:	e6bf      	b.n	1c840 <_dtoa_r+0x7ac>
   1cac0:	4bba      	ldr	r3, [pc, #744]	; (1cdac <_dtoa_r+0xd18>)
   1cac2:	423b      	tst	r3, r7
   1cac4:	d100      	bne.n	1cac8 <_dtoa_r+0xa34>
   1cac6:	e6bb      	b.n	1c840 <_dtoa_r+0x7ac>
   1cac8:	9b06      	ldr	r3, [sp, #24]
   1caca:	3401      	adds	r4, #1
   1cacc:	3301      	adds	r3, #1
   1cace:	9306      	str	r3, [sp, #24]
   1cad0:	9b04      	ldr	r3, [sp, #16]
   1cad2:	3301      	adds	r3, #1
   1cad4:	9304      	str	r3, [sp, #16]
   1cad6:	e6b3      	b.n	1c840 <_dtoa_r+0x7ac>
   1cad8:	2301      	movs	r3, #1
   1cada:	930b      	str	r3, [sp, #44]	; 0x2c
   1cadc:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   1cade:	2b00      	cmp	r3, #0
   1cae0:	dc00      	bgt.n	1cae4 <_dtoa_r+0xa50>
   1cae2:	e0d1      	b.n	1cc88 <_dtoa_r+0xbf4>
   1cae4:	001d      	movs	r5, r3
   1cae6:	4698      	mov	r8, r3
   1cae8:	930e      	str	r3, [sp, #56]	; 0x38
   1caea:	9307      	str	r3, [sp, #28]
   1caec:	f7ff fbc8 	bl	1c280 <_dtoa_r+0x1ec>
   1caf0:	9b07      	ldr	r3, [sp, #28]
   1caf2:	2b00      	cmp	r3, #0
   1caf4:	dd00      	ble.n	1caf8 <_dtoa_r+0xa64>
   1caf6:	e553      	b.n	1c5a0 <_dtoa_r+0x50c>
   1caf8:	d000      	beq.n	1cafc <_dtoa_r+0xa68>
   1cafa:	e0ad      	b.n	1cc58 <_dtoa_r+0xbc4>
   1cafc:	9804      	ldr	r0, [sp, #16]
   1cafe:	9905      	ldr	r1, [sp, #20]
   1cb00:	2200      	movs	r2, #0
   1cb02:	4bab      	ldr	r3, [pc, #684]	; (1cdb0 <_dtoa_r+0xd1c>)
   1cb04:	f7fb ff22 	bl	1894c <__aeabi_dmul>
   1cb08:	003b      	movs	r3, r7
   1cb0a:	0032      	movs	r2, r6
   1cb0c:	f7f9 ff42 	bl	16994 <__aeabi_dcmpge>
   1cb10:	2300      	movs	r3, #0
   1cb12:	4699      	mov	r9, r3
   1cb14:	4698      	mov	r8, r3
   1cb16:	2800      	cmp	r0, #0
   1cb18:	d055      	beq.n	1cbc6 <_dtoa_r+0xb32>
   1cb1a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   1cb1c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   1cb1e:	43db      	mvns	r3, r3
   1cb20:	9303      	str	r3, [sp, #12]
   1cb22:	4649      	mov	r1, r9
   1cb24:	4650      	mov	r0, sl
   1cb26:	f000 ffa1 	bl	1da6c <_Bfree>
   1cb2a:	4643      	mov	r3, r8
   1cb2c:	2b00      	cmp	r3, #0
   1cb2e:	d100      	bne.n	1cb32 <_dtoa_r+0xa9e>
   1cb30:	e4df      	b.n	1c4f2 <_dtoa_r+0x45e>
   1cb32:	e7b6      	b.n	1caa2 <_dtoa_r+0xa0e>
   1cb34:	464a      	mov	r2, r9
   1cb36:	4659      	mov	r1, fp
   1cb38:	4650      	mov	r0, sl
   1cb3a:	f001 f8e3 	bl	1dd04 <__pow5mult>
   1cb3e:	4683      	mov	fp, r0
   1cb40:	e653      	b.n	1c7ea <_dtoa_r+0x756>
   1cb42:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   1cb44:	2a00      	cmp	r2, #0
   1cb46:	d100      	bne.n	1cb4a <_dtoa_r+0xab6>
   1cb48:	e1b6      	b.n	1ceb8 <_dtoa_r+0xe24>
   1cb4a:	4a9a      	ldr	r2, [pc, #616]	; (1cdb4 <_dtoa_r+0xd20>)
   1cb4c:	464c      	mov	r4, r9
   1cb4e:	4694      	mov	ip, r2
   1cb50:	9a06      	ldr	r2, [sp, #24]
   1cb52:	4463      	add	r3, ip
   1cb54:	9208      	str	r2, [sp, #32]
   1cb56:	e5d5      	b.n	1c704 <_dtoa_r+0x670>
   1cb58:	2e00      	cmp	r6, #0
   1cb5a:	d000      	beq.n	1cb5e <_dtoa_r+0xaca>
   1cb5c:	e670      	b.n	1c840 <_dtoa_r+0x7ac>
   1cb5e:	e7aa      	b.n	1cab6 <_dtoa_r+0xa22>
   1cb60:	f000 ff8e 	bl	1da80 <__multadd>
   1cb64:	46a2      	mov	sl, r4
   1cb66:	0005      	movs	r5, r0
   1cb68:	4680      	mov	r8, r0
   1cb6a:	e6c7      	b.n	1c8fc <_dtoa_r+0x868>
   1cb6c:	2301      	movs	r3, #1
   1cb6e:	469b      	mov	fp, r3
   1cb70:	e6e2      	b.n	1c938 <_dtoa_r+0x8a4>
   1cb72:	2300      	movs	r3, #0
   1cb74:	930b      	str	r3, [sp, #44]	; 0x2c
   1cb76:	9b22      	ldr	r3, [sp, #136]	; 0x88
   1cb78:	2b02      	cmp	r3, #2
   1cb7a:	d0af      	beq.n	1cadc <_dtoa_r+0xa48>
   1cb7c:	2400      	movs	r4, #0
   1cb7e:	4653      	mov	r3, sl
   1cb80:	0021      	movs	r1, r4
   1cb82:	645c      	str	r4, [r3, #68]	; 0x44
   1cb84:	4650      	mov	r0, sl
   1cb86:	f000 ff49 	bl	1da1c <_Balloc>
   1cb8a:	4653      	mov	r3, sl
   1cb8c:	6418      	str	r0, [r3, #64]	; 0x40
   1cb8e:	2301      	movs	r3, #1
   1cb90:	425b      	negs	r3, r3
   1cb92:	9307      	str	r3, [sp, #28]
   1cb94:	930e      	str	r3, [sp, #56]	; 0x38
   1cb96:	3302      	adds	r3, #2
   1cb98:	900a      	str	r0, [sp, #40]	; 0x28
   1cb9a:	9423      	str	r4, [sp, #140]	; 0x8c
   1cb9c:	930b      	str	r3, [sp, #44]	; 0x2c
   1cb9e:	e4ec      	b.n	1c57a <_dtoa_r+0x4e6>
   1cba0:	9b22      	ldr	r3, [sp, #136]	; 0x88
   1cba2:	2b02      	cmp	r3, #2
   1cba4:	dc00      	bgt.n	1cba8 <_dtoa_r+0xb14>
   1cba6:	e685      	b.n	1c8b4 <_dtoa_r+0x820>
   1cba8:	9b07      	ldr	r3, [sp, #28]
   1cbaa:	2b00      	cmp	r3, #0
   1cbac:	d1b5      	bne.n	1cb1a <_dtoa_r+0xa86>
   1cbae:	4649      	mov	r1, r9
   1cbb0:	2205      	movs	r2, #5
   1cbb2:	4650      	mov	r0, sl
   1cbb4:	f000 ff64 	bl	1da80 <__multadd>
   1cbb8:	4681      	mov	r9, r0
   1cbba:	0001      	movs	r1, r0
   1cbbc:	4658      	mov	r0, fp
   1cbbe:	f001 f961 	bl	1de84 <__mcmp>
   1cbc2:	2800      	cmp	r0, #0
   1cbc4:	dda9      	ble.n	1cb1a <_dtoa_r+0xa86>
   1cbc6:	2331      	movs	r3, #49	; 0x31
   1cbc8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1cbca:	7013      	strb	r3, [r2, #0]
   1cbcc:	9b03      	ldr	r3, [sp, #12]
   1cbce:	1c54      	adds	r4, r2, #1
   1cbd0:	3301      	adds	r3, #1
   1cbd2:	9303      	str	r3, [sp, #12]
   1cbd4:	e7a5      	b.n	1cb22 <_dtoa_r+0xa8e>
   1cbd6:	9b03      	ldr	r3, [sp, #12]
   1cbd8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1cbda:	3301      	adds	r3, #1
   1cbdc:	9303      	str	r3, [sp, #12]
   1cbde:	2331      	movs	r3, #49	; 0x31
   1cbe0:	7013      	strb	r3, [r2, #0]
   1cbe2:	e74e      	b.n	1ca82 <_dtoa_r+0x9ee>
   1cbe4:	2300      	movs	r3, #0
   1cbe6:	930b      	str	r3, [sp, #44]	; 0x2c
   1cbe8:	f7ff fb3d 	bl	1c266 <_dtoa_r+0x1d2>
   1cbec:	9b06      	ldr	r3, [sp, #24]
   1cbee:	465c      	mov	r4, fp
   1cbf0:	469b      	mov	fp, r3
   1cbf2:	9b07      	ldr	r3, [sp, #28]
   1cbf4:	469a      	mov	sl, r3
   1cbf6:	e47c      	b.n	1c4f2 <_dtoa_r+0x45e>
   1cbf8:	4640      	mov	r0, r8
   1cbfa:	f7fc fc71 	bl	194e0 <__aeabi_i2d>
   1cbfe:	0032      	movs	r2, r6
   1cc00:	003b      	movs	r3, r7
   1cc02:	f7fb fea3 	bl	1894c <__aeabi_dmul>
   1cc06:	2200      	movs	r2, #0
   1cc08:	4b6b      	ldr	r3, [pc, #428]	; (1cdb8 <_dtoa_r+0xd24>)
   1cc0a:	f7fa ff5b 	bl	17ac4 <__aeabi_dadd>
   1cc0e:	4a6b      	ldr	r2, [pc, #428]	; (1cdbc <_dtoa_r+0xd28>)
   1cc10:	000b      	movs	r3, r1
   1cc12:	4694      	mov	ip, r2
   1cc14:	4463      	add	r3, ip
   1cc16:	9008      	str	r0, [sp, #32]
   1cc18:	9109      	str	r1, [sp, #36]	; 0x24
   1cc1a:	9309      	str	r3, [sp, #36]	; 0x24
   1cc1c:	2200      	movs	r2, #0
   1cc1e:	4b64      	ldr	r3, [pc, #400]	; (1cdb0 <_dtoa_r+0xd1c>)
   1cc20:	0030      	movs	r0, r6
   1cc22:	0039      	movs	r1, r7
   1cc24:	f7fc f912 	bl	18e4c <__aeabi_dsub>
   1cc28:	9e08      	ldr	r6, [sp, #32]
   1cc2a:	9f09      	ldr	r7, [sp, #36]	; 0x24
   1cc2c:	0032      	movs	r2, r6
   1cc2e:	003b      	movs	r3, r7
   1cc30:	0004      	movs	r4, r0
   1cc32:	000d      	movs	r5, r1
   1cc34:	f7f9 fea4 	bl	16980 <__aeabi_dcmpgt>
   1cc38:	2800      	cmp	r0, #0
   1cc3a:	d000      	beq.n	1cc3e <_dtoa_r+0xbaa>
   1cc3c:	e0b2      	b.n	1cda4 <_dtoa_r+0xd10>
   1cc3e:	2080      	movs	r0, #128	; 0x80
   1cc40:	0600      	lsls	r0, r0, #24
   1cc42:	4684      	mov	ip, r0
   1cc44:	0039      	movs	r1, r7
   1cc46:	4461      	add	r1, ip
   1cc48:	000b      	movs	r3, r1
   1cc4a:	0032      	movs	r2, r6
   1cc4c:	0020      	movs	r0, r4
   1cc4e:	0029      	movs	r1, r5
   1cc50:	f7f9 fe82 	bl	16958 <__aeabi_dcmplt>
   1cc54:	2800      	cmp	r0, #0
   1cc56:	d057      	beq.n	1cd08 <_dtoa_r+0xc74>
   1cc58:	2300      	movs	r3, #0
   1cc5a:	4699      	mov	r9, r3
   1cc5c:	4698      	mov	r8, r3
   1cc5e:	e75c      	b.n	1cb1a <_dtoa_r+0xa86>
   1cc60:	980a      	ldr	r0, [sp, #40]	; 0x28
   1cc62:	f7ff fa4c 	bl	1c0fe <_dtoa_r+0x6a>
   1cc66:	1ae2      	subs	r2, r4, r3
   1cc68:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1cc6a:	46a1      	mov	r9, r4
   1cc6c:	469c      	mov	ip, r3
   1cc6e:	4494      	add	ip, r2
   1cc70:	4663      	mov	r3, ip
   1cc72:	2400      	movs	r4, #0
   1cc74:	930d      	str	r3, [sp, #52]	; 0x34
   1cc76:	e53e      	b.n	1c6f6 <_dtoa_r+0x662>
   1cc78:	9a10      	ldr	r2, [sp, #64]	; 0x40
   1cc7a:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1cc7c:	9208      	str	r2, [sp, #32]
   1cc7e:	9309      	str	r3, [sp, #36]	; 0x24
   1cc80:	2302      	movs	r3, #2
   1cc82:	4698      	mov	r8, r3
   1cc84:	f7ff fb3a 	bl	1c2fc <_dtoa_r+0x268>
   1cc88:	2300      	movs	r3, #0
   1cc8a:	4652      	mov	r2, sl
   1cc8c:	2100      	movs	r1, #0
   1cc8e:	6453      	str	r3, [r2, #68]	; 0x44
   1cc90:	4650      	mov	r0, sl
   1cc92:	f000 fec3 	bl	1da1c <_Balloc>
   1cc96:	4653      	mov	r3, sl
   1cc98:	6418      	str	r0, [r3, #64]	; 0x40
   1cc9a:	2301      	movs	r3, #1
   1cc9c:	900a      	str	r0, [sp, #40]	; 0x28
   1cc9e:	9307      	str	r3, [sp, #28]
   1cca0:	9323      	str	r3, [sp, #140]	; 0x8c
   1cca2:	930e      	str	r3, [sp, #56]	; 0x38
   1cca4:	f7ff fb07 	bl	1c2b6 <_dtoa_r+0x222>
   1cca8:	4643      	mov	r3, r8
   1ccaa:	930c      	str	r3, [sp, #48]	; 0x30
   1ccac:	465b      	mov	r3, fp
   1ccae:	9a06      	ldr	r2, [sp, #24]
   1ccb0:	46a8      	mov	r8, r5
   1ccb2:	46b3      	mov	fp, r6
   1ccb4:	4655      	mov	r5, sl
   1ccb6:	9e04      	ldr	r6, [sp, #16]
   1ccb8:	4691      	mov	r9, r2
   1ccba:	46ba      	mov	sl, r7
   1ccbc:	2b00      	cmp	r3, #0
   1ccbe:	dd10      	ble.n	1cce2 <_dtoa_r+0xc4e>
   1ccc0:	4659      	mov	r1, fp
   1ccc2:	2201      	movs	r2, #1
   1ccc4:	0038      	movs	r0, r7
   1ccc6:	f001 f87d 	bl	1ddc4 <__lshift>
   1ccca:	4649      	mov	r1, r9
   1cccc:	4683      	mov	fp, r0
   1ccce:	f001 f8d9 	bl	1de84 <__mcmp>
   1ccd2:	2800      	cmp	r0, #0
   1ccd4:	dc00      	bgt.n	1ccd8 <_dtoa_r+0xc44>
   1ccd6:	e157      	b.n	1cf88 <_dtoa_r+0xef4>
   1ccd8:	2e39      	cmp	r6, #57	; 0x39
   1ccda:	d100      	bne.n	1ccde <_dtoa_r+0xc4a>
   1ccdc:	e122      	b.n	1cf24 <_dtoa_r+0xe90>
   1ccde:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
   1cce0:	3631      	adds	r6, #49	; 0x31
   1cce2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1cce4:	4647      	mov	r7, r8
   1cce6:	1c6c      	adds	r4, r5, #1
   1cce8:	702e      	strb	r6, [r5, #0]
   1ccea:	4698      	mov	r8, r3
   1ccec:	e6c9      	b.n	1ca82 <_dtoa_r+0x9ee>
   1ccee:	2800      	cmp	r0, #0
   1ccf0:	d103      	bne.n	1ccfa <_dtoa_r+0xc66>
   1ccf2:	07f3      	lsls	r3, r6, #31
   1ccf4:	d501      	bpl.n	1ccfa <_dtoa_r+0xc66>
   1ccf6:	e6b5      	b.n	1ca64 <_dtoa_r+0x9d0>
   1ccf8:	001c      	movs	r4, r3
   1ccfa:	1e63      	subs	r3, r4, #1
   1ccfc:	781a      	ldrb	r2, [r3, #0]
   1ccfe:	2a30      	cmp	r2, #48	; 0x30
   1cd00:	d0fa      	beq.n	1ccf8 <_dtoa_r+0xc64>
   1cd02:	e6be      	b.n	1ca82 <_dtoa_r+0x9ee>
   1cd04:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1cd06:	4699      	mov	r9, r3
   1cd08:	9e10      	ldr	r6, [sp, #64]	; 0x40
   1cd0a:	9f11      	ldr	r7, [sp, #68]	; 0x44
   1cd0c:	e435      	b.n	1c57a <_dtoa_r+0x4e6>
   1cd0e:	2501      	movs	r5, #1
   1cd10:	f7ff fab4 	bl	1c27c <_dtoa_r+0x1e8>
   1cd14:	9b03      	ldr	r3, [sp, #12]
   1cd16:	2b00      	cmp	r3, #0
   1cd18:	d100      	bne.n	1cd1c <_dtoa_r+0xc88>
   1cd1a:	e0d4      	b.n	1cec6 <_dtoa_r+0xe32>
   1cd1c:	9810      	ldr	r0, [sp, #64]	; 0x40
   1cd1e:	9911      	ldr	r1, [sp, #68]	; 0x44
   1cd20:	425c      	negs	r4, r3
   1cd22:	230f      	movs	r3, #15
   1cd24:	4a26      	ldr	r2, [pc, #152]	; (1cdc0 <_dtoa_r+0xd2c>)
   1cd26:	4023      	ands	r3, r4
   1cd28:	00db      	lsls	r3, r3, #3
   1cd2a:	18d3      	adds	r3, r2, r3
   1cd2c:	681a      	ldr	r2, [r3, #0]
   1cd2e:	685b      	ldr	r3, [r3, #4]
   1cd30:	f7fb fe0c 	bl	1894c <__aeabi_dmul>
   1cd34:	1124      	asrs	r4, r4, #4
   1cd36:	0006      	movs	r6, r0
   1cd38:	000f      	movs	r7, r1
   1cd3a:	2c00      	cmp	r4, #0
   1cd3c:	d100      	bne.n	1cd40 <_dtoa_r+0xcac>
   1cd3e:	e149      	b.n	1cfd4 <_dtoa_r+0xf40>
   1cd40:	2302      	movs	r3, #2
   1cd42:	4698      	mov	r8, r3
   1cd44:	4d1f      	ldr	r5, [pc, #124]	; (1cdc4 <_dtoa_r+0xd30>)
   1cd46:	2301      	movs	r3, #1
   1cd48:	4223      	tst	r3, r4
   1cd4a:	d009      	beq.n	1cd60 <_dtoa_r+0xccc>
   1cd4c:	469c      	mov	ip, r3
   1cd4e:	682a      	ldr	r2, [r5, #0]
   1cd50:	686b      	ldr	r3, [r5, #4]
   1cd52:	0030      	movs	r0, r6
   1cd54:	0039      	movs	r1, r7
   1cd56:	44e0      	add	r8, ip
   1cd58:	f7fb fdf8 	bl	1894c <__aeabi_dmul>
   1cd5c:	0006      	movs	r6, r0
   1cd5e:	000f      	movs	r7, r1
   1cd60:	1064      	asrs	r4, r4, #1
   1cd62:	3508      	adds	r5, #8
   1cd64:	2c00      	cmp	r4, #0
   1cd66:	d1ee      	bne.n	1cd46 <_dtoa_r+0xcb2>
   1cd68:	f7ff fae4 	bl	1c334 <_dtoa_r+0x2a0>
   1cd6c:	9b03      	ldr	r3, [sp, #12]
   1cd6e:	2730      	movs	r7, #48	; 0x30
   1cd70:	3301      	adds	r3, #1
   1cd72:	9303      	str	r3, [sp, #12]
   1cd74:	2330      	movs	r3, #48	; 0x30
   1cd76:	702b      	strb	r3, [r5, #0]
   1cd78:	e4ac      	b.n	1c6d4 <_dtoa_r+0x640>
   1cd7a:	6859      	ldr	r1, [r3, #4]
   1cd7c:	4650      	mov	r0, sl
   1cd7e:	f000 fe4d 	bl	1da1c <_Balloc>
   1cd82:	4643      	mov	r3, r8
   1cd84:	4641      	mov	r1, r8
   1cd86:	0004      	movs	r4, r0
   1cd88:	691b      	ldr	r3, [r3, #16]
   1cd8a:	310c      	adds	r1, #12
   1cd8c:	1c9a      	adds	r2, r3, #2
   1cd8e:	0092      	lsls	r2, r2, #2
   1cd90:	300c      	adds	r0, #12
   1cd92:	f7fd f807 	bl	19da4 <memcpy>
   1cd96:	2201      	movs	r2, #1
   1cd98:	0021      	movs	r1, r4
   1cd9a:	4650      	mov	r0, sl
   1cd9c:	f001 f812 	bl	1ddc4 <__lshift>
   1cda0:	900c      	str	r0, [sp, #48]	; 0x30
   1cda2:	e599      	b.n	1c8d8 <_dtoa_r+0x844>
   1cda4:	2300      	movs	r3, #0
   1cda6:	4699      	mov	r9, r3
   1cda8:	4698      	mov	r8, r3
   1cdaa:	e70c      	b.n	1cbc6 <_dtoa_r+0xb32>
   1cdac:	7ff00000 	.word	0x7ff00000
   1cdb0:	40140000 	.word	0x40140000
   1cdb4:	00000433 	.word	0x00000433
   1cdb8:	401c0000 	.word	0x401c0000
   1cdbc:	fcc00000 	.word	0xfcc00000
   1cdc0:	000208b8 	.word	0x000208b8
   1cdc4:	00020890 	.word	0x00020890
   1cdc8:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1cdca:	498f      	ldr	r1, [pc, #572]	; (1d008 <_dtoa_r+0xf74>)
   1cdcc:	3b01      	subs	r3, #1
   1cdce:	00db      	lsls	r3, r3, #3
   1cdd0:	18c9      	adds	r1, r1, r3
   1cdd2:	6808      	ldr	r0, [r1, #0]
   1cdd4:	6849      	ldr	r1, [r1, #4]
   1cdd6:	9a08      	ldr	r2, [sp, #32]
   1cdd8:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1cdda:	f7fb fdb7 	bl	1894c <__aeabi_dmul>
   1cdde:	9014      	str	r0, [sp, #80]	; 0x50
   1cde0:	9115      	str	r1, [sp, #84]	; 0x54
   1cde2:	0039      	movs	r1, r7
   1cde4:	0030      	movs	r0, r6
   1cde6:	f7fc fb47 	bl	19478 <__aeabi_d2iz>
   1cdea:	0005      	movs	r5, r0
   1cdec:	f7fc fb78 	bl	194e0 <__aeabi_i2d>
   1cdf0:	0002      	movs	r2, r0
   1cdf2:	000b      	movs	r3, r1
   1cdf4:	0030      	movs	r0, r6
   1cdf6:	0039      	movs	r1, r7
   1cdf8:	f7fc f828 	bl	18e4c <__aeabi_dsub>
   1cdfc:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1cdfe:	9008      	str	r0, [sp, #32]
   1ce00:	9109      	str	r1, [sp, #36]	; 0x24
   1ce02:	990a      	ldr	r1, [sp, #40]	; 0x28
   1ce04:	001a      	movs	r2, r3
   1ce06:	468c      	mov	ip, r1
   1ce08:	3530      	adds	r5, #48	; 0x30
   1ce0a:	4462      	add	r2, ip
   1ce0c:	1c4c      	adds	r4, r1, #1
   1ce0e:	700d      	strb	r5, [r1, #0]
   1ce10:	4690      	mov	r8, r2
   1ce12:	2b01      	cmp	r3, #1
   1ce14:	d01b      	beq.n	1ce4e <_dtoa_r+0xdba>
   1ce16:	9808      	ldr	r0, [sp, #32]
   1ce18:	9909      	ldr	r1, [sp, #36]	; 0x24
   1ce1a:	0025      	movs	r5, r4
   1ce1c:	2200      	movs	r2, #0
   1ce1e:	4b7b      	ldr	r3, [pc, #492]	; (1d00c <_dtoa_r+0xf78>)
   1ce20:	f7fb fd94 	bl	1894c <__aeabi_dmul>
   1ce24:	000f      	movs	r7, r1
   1ce26:	0006      	movs	r6, r0
   1ce28:	f7fc fb26 	bl	19478 <__aeabi_d2iz>
   1ce2c:	0004      	movs	r4, r0
   1ce2e:	f7fc fb57 	bl	194e0 <__aeabi_i2d>
   1ce32:	3430      	adds	r4, #48	; 0x30
   1ce34:	0002      	movs	r2, r0
   1ce36:	000b      	movs	r3, r1
   1ce38:	0030      	movs	r0, r6
   1ce3a:	0039      	movs	r1, r7
   1ce3c:	f7fc f806 	bl	18e4c <__aeabi_dsub>
   1ce40:	702c      	strb	r4, [r5, #0]
   1ce42:	3501      	adds	r5, #1
   1ce44:	45a8      	cmp	r8, r5
   1ce46:	d1e9      	bne.n	1ce1c <_dtoa_r+0xd88>
   1ce48:	4644      	mov	r4, r8
   1ce4a:	9008      	str	r0, [sp, #32]
   1ce4c:	9109      	str	r1, [sp, #36]	; 0x24
   1ce4e:	9814      	ldr	r0, [sp, #80]	; 0x50
   1ce50:	9915      	ldr	r1, [sp, #84]	; 0x54
   1ce52:	2200      	movs	r2, #0
   1ce54:	4b6e      	ldr	r3, [pc, #440]	; (1d010 <_dtoa_r+0xf7c>)
   1ce56:	f7fa fe35 	bl	17ac4 <__aeabi_dadd>
   1ce5a:	9a08      	ldr	r2, [sp, #32]
   1ce5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1ce5e:	f7f9 fd7b 	bl	16958 <__aeabi_dcmplt>
   1ce62:	2800      	cmp	r0, #0
   1ce64:	d067      	beq.n	1cf36 <_dtoa_r+0xea2>
   1ce66:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   1ce68:	1e65      	subs	r5, r4, #1
   1ce6a:	9303      	str	r3, [sp, #12]
   1ce6c:	782f      	ldrb	r7, [r5, #0]
   1ce6e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1ce70:	e42e      	b.n	1c6d0 <_dtoa_r+0x63c>
   1ce72:	4643      	mov	r3, r8
   1ce74:	46b3      	mov	fp, r6
   1ce76:	930c      	str	r3, [sp, #48]	; 0x30
   1ce78:	9e04      	ldr	r6, [sp, #16]
   1ce7a:	9b06      	ldr	r3, [sp, #24]
   1ce7c:	46a8      	mov	r8, r5
   1ce7e:	4699      	mov	r9, r3
   1ce80:	4655      	mov	r5, sl
   1ce82:	46ba      	mov	sl, r7
   1ce84:	2e39      	cmp	r6, #57	; 0x39
   1ce86:	d04d      	beq.n	1cf24 <_dtoa_r+0xe90>
   1ce88:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1ce8a:	3601      	adds	r6, #1
   1ce8c:	4647      	mov	r7, r8
   1ce8e:	1c6c      	adds	r4, r5, #1
   1ce90:	702e      	strb	r6, [r5, #0]
   1ce92:	4698      	mov	r8, r3
   1ce94:	e5f5      	b.n	1ca82 <_dtoa_r+0x9ee>
   1ce96:	4642      	mov	r2, r8
   1ce98:	9b06      	ldr	r3, [sp, #24]
   1ce9a:	46b3      	mov	fp, r6
   1ce9c:	46ba      	mov	sl, r7
   1ce9e:	9e04      	ldr	r6, [sp, #16]
   1cea0:	4699      	mov	r9, r3
   1cea2:	002f      	movs	r7, r5
   1cea4:	4690      	mov	r8, r2
   1cea6:	e5d1      	b.n	1ca4c <_dtoa_r+0x9b8>
   1cea8:	9b06      	ldr	r3, [sp, #24]
   1ceaa:	9a07      	ldr	r2, [sp, #28]
   1ceac:	1a9b      	subs	r3, r3, r2
   1ceae:	9308      	str	r3, [sp, #32]
   1ceb0:	2300      	movs	r3, #0
   1ceb2:	e427      	b.n	1c704 <_dtoa_r+0x670>
   1ceb4:	2401      	movs	r4, #1
   1ceb6:	e5c5      	b.n	1ca44 <_dtoa_r+0x9b0>
   1ceb8:	2336      	movs	r3, #54	; 0x36
   1ceba:	9a16      	ldr	r2, [sp, #88]	; 0x58
   1cebc:	464c      	mov	r4, r9
   1cebe:	1a9b      	subs	r3, r3, r2
   1cec0:	9a06      	ldr	r2, [sp, #24]
   1cec2:	9208      	str	r2, [sp, #32]
   1cec4:	e41e      	b.n	1c704 <_dtoa_r+0x670>
   1cec6:	2302      	movs	r3, #2
   1cec8:	9e10      	ldr	r6, [sp, #64]	; 0x40
   1ceca:	9f11      	ldr	r7, [sp, #68]	; 0x44
   1cecc:	4698      	mov	r8, r3
   1cece:	f7ff fa31 	bl	1c334 <_dtoa_r+0x2a0>
   1ced2:	9b07      	ldr	r3, [sp, #28]
   1ced4:	2b00      	cmp	r3, #0
   1ced6:	d100      	bne.n	1ceda <_dtoa_r+0xe46>
   1ced8:	e68e      	b.n	1cbf8 <_dtoa_r+0xb64>
   1ceda:	9c0e      	ldr	r4, [sp, #56]	; 0x38
   1cedc:	2c00      	cmp	r4, #0
   1cede:	dc00      	bgt.n	1cee2 <_dtoa_r+0xe4e>
   1cee0:	e712      	b.n	1cd08 <_dtoa_r+0xc74>
   1cee2:	9b03      	ldr	r3, [sp, #12]
   1cee4:	2200      	movs	r2, #0
   1cee6:	3b01      	subs	r3, #1
   1cee8:	9313      	str	r3, [sp, #76]	; 0x4c
   1ceea:	0030      	movs	r0, r6
   1ceec:	4b47      	ldr	r3, [pc, #284]	; (1d00c <_dtoa_r+0xf78>)
   1ceee:	0039      	movs	r1, r7
   1cef0:	f7fb fd2c 	bl	1894c <__aeabi_dmul>
   1cef4:	0006      	movs	r6, r0
   1cef6:	4640      	mov	r0, r8
   1cef8:	000f      	movs	r7, r1
   1cefa:	3001      	adds	r0, #1
   1cefc:	f7fc faf0 	bl	194e0 <__aeabi_i2d>
   1cf00:	0032      	movs	r2, r6
   1cf02:	003b      	movs	r3, r7
   1cf04:	f7fb fd22 	bl	1894c <__aeabi_dmul>
   1cf08:	2200      	movs	r2, #0
   1cf0a:	4b42      	ldr	r3, [pc, #264]	; (1d014 <_dtoa_r+0xf80>)
   1cf0c:	f7fa fdda 	bl	17ac4 <__aeabi_dadd>
   1cf10:	4a41      	ldr	r2, [pc, #260]	; (1d018 <_dtoa_r+0xf84>)
   1cf12:	000b      	movs	r3, r1
   1cf14:	4694      	mov	ip, r2
   1cf16:	4463      	add	r3, ip
   1cf18:	9008      	str	r0, [sp, #32]
   1cf1a:	9109      	str	r1, [sp, #36]	; 0x24
   1cf1c:	9412      	str	r4, [sp, #72]	; 0x48
   1cf1e:	9309      	str	r3, [sp, #36]	; 0x24
   1cf20:	f7ff fa30 	bl	1c384 <_dtoa_r+0x2f0>
   1cf24:	2339      	movs	r3, #57	; 0x39
   1cf26:	702b      	strb	r3, [r5, #0]
   1cf28:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1cf2a:	4647      	mov	r7, r8
   1cf2c:	1c6c      	adds	r4, r5, #1
   1cf2e:	4698      	mov	r8, r3
   1cf30:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1cf32:	2339      	movs	r3, #57	; 0x39
   1cf34:	e5a1      	b.n	1ca7a <_dtoa_r+0x9e6>
   1cf36:	9a14      	ldr	r2, [sp, #80]	; 0x50
   1cf38:	9b15      	ldr	r3, [sp, #84]	; 0x54
   1cf3a:	2000      	movs	r0, #0
   1cf3c:	4934      	ldr	r1, [pc, #208]	; (1d010 <_dtoa_r+0xf7c>)
   1cf3e:	f7fb ff85 	bl	18e4c <__aeabi_dsub>
   1cf42:	9a08      	ldr	r2, [sp, #32]
   1cf44:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1cf46:	f7f9 fd1b 	bl	16980 <__aeabi_dcmpgt>
   1cf4a:	2800      	cmp	r0, #0
   1cf4c:	d101      	bne.n	1cf52 <_dtoa_r+0xebe>
   1cf4e:	e6db      	b.n	1cd08 <_dtoa_r+0xc74>
   1cf50:	001c      	movs	r4, r3
   1cf52:	1e63      	subs	r3, r4, #1
   1cf54:	781a      	ldrb	r2, [r3, #0]
   1cf56:	2a30      	cmp	r2, #48	; 0x30
   1cf58:	d0fa      	beq.n	1cf50 <_dtoa_r+0xebc>
   1cf5a:	f7ff fac8 	bl	1c4ee <_dtoa_r+0x45a>
   1cf5e:	4643      	mov	r3, r8
   1cf60:	46b3      	mov	fp, r6
   1cf62:	930c      	str	r3, [sp, #48]	; 0x30
   1cf64:	9e04      	ldr	r6, [sp, #16]
   1cf66:	9b06      	ldr	r3, [sp, #24]
   1cf68:	46a8      	mov	r8, r5
   1cf6a:	4699      	mov	r9, r3
   1cf6c:	4655      	mov	r5, sl
   1cf6e:	46ba      	mov	sl, r7
   1cf70:	2e39      	cmp	r6, #57	; 0x39
   1cf72:	d0d7      	beq.n	1cf24 <_dtoa_r+0xe90>
   1cf74:	2c00      	cmp	r4, #0
   1cf76:	dd00      	ble.n	1cf7a <_dtoa_r+0xee6>
   1cf78:	e6b1      	b.n	1ccde <_dtoa_r+0xc4a>
   1cf7a:	e6b2      	b.n	1cce2 <_dtoa_r+0xc4e>
   1cf7c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   1cf7e:	464d      	mov	r5, r9
   1cf80:	9203      	str	r2, [sp, #12]
   1cf82:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1cf84:	f7ff fba4 	bl	1c6d0 <_dtoa_r+0x63c>
   1cf88:	2800      	cmp	r0, #0
   1cf8a:	d000      	beq.n	1cf8e <_dtoa_r+0xefa>
   1cf8c:	e6a9      	b.n	1cce2 <_dtoa_r+0xc4e>
   1cf8e:	07f3      	lsls	r3, r6, #31
   1cf90:	d400      	bmi.n	1cf94 <_dtoa_r+0xf00>
   1cf92:	e6a6      	b.n	1cce2 <_dtoa_r+0xc4e>
   1cf94:	e6a0      	b.n	1ccd8 <_dtoa_r+0xc44>
   1cf96:	2300      	movs	r3, #0
   1cf98:	4641      	mov	r1, r8
   1cf9a:	220a      	movs	r2, #10
   1cf9c:	4650      	mov	r0, sl
   1cf9e:	f000 fd6f 	bl	1da80 <__multadd>
   1cfa2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1cfa4:	4680      	mov	r8, r0
   1cfa6:	2b00      	cmp	r3, #0
   1cfa8:	dd01      	ble.n	1cfae <_dtoa_r+0xf1a>
   1cfaa:	9307      	str	r3, [sp, #28]
   1cfac:	e486      	b.n	1c8bc <_dtoa_r+0x828>
   1cfae:	9b22      	ldr	r3, [sp, #136]	; 0x88
   1cfb0:	2b02      	cmp	r3, #2
   1cfb2:	dc1f      	bgt.n	1cff4 <_dtoa_r+0xf60>
   1cfb4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1cfb6:	9307      	str	r3, [sp, #28]
   1cfb8:	e480      	b.n	1c8bc <_dtoa_r+0x828>
   1cfba:	9b22      	ldr	r3, [sp, #136]	; 0x88
   1cfbc:	2b02      	cmp	r3, #2
   1cfbe:	dc19      	bgt.n	1cff4 <_dtoa_r+0xf60>
   1cfc0:	4649      	mov	r1, r9
   1cfc2:	f7fe ffbd 	bl	1bf40 <quorem>
   1cfc6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1cfc8:	3030      	adds	r0, #48	; 0x30
   1cfca:	7018      	strb	r0, [r3, #0]
   1cfcc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1cfce:	0006      	movs	r6, r0
   1cfd0:	9307      	str	r3, [sp, #28]
   1cfd2:	e533      	b.n	1ca3c <_dtoa_r+0x9a8>
   1cfd4:	2302      	movs	r3, #2
   1cfd6:	4698      	mov	r8, r3
   1cfd8:	f7ff f9ac 	bl	1c334 <_dtoa_r+0x2a0>
   1cfdc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   1cfde:	9c14      	ldr	r4, [sp, #80]	; 0x50
   1cfe0:	9303      	str	r3, [sp, #12]
   1cfe2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1cfe4:	001d      	movs	r5, r3
   1cfe6:	f7ff fb73 	bl	1c6d0 <_dtoa_r+0x63c>
   1cfea:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   1cfec:	9c14      	ldr	r4, [sp, #80]	; 0x50
   1cfee:	9303      	str	r3, [sp, #12]
   1cff0:	f7ff fa7f 	bl	1c4f2 <_dtoa_r+0x45e>
   1cff4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1cff6:	9307      	str	r3, [sp, #28]
   1cff8:	e5d6      	b.n	1cba8 <_dtoa_r+0xb14>
   1cffa:	2b04      	cmp	r3, #4
   1cffc:	d100      	bne.n	1d000 <_dtoa_r+0xf6c>
   1cffe:	e43f      	b.n	1c880 <_dtoa_r+0x7ec>
   1d000:	233c      	movs	r3, #60	; 0x3c
   1d002:	1a18      	subs	r0, r3, r0
   1d004:	e4d7      	b.n	1c9b6 <_dtoa_r+0x922>
   1d006:	46c0      	nop			; (mov r8, r8)
   1d008:	000208b8 	.word	0x000208b8
   1d00c:	40240000 	.word	0x40240000
   1d010:	3fe00000 	.word	0x3fe00000
   1d014:	401c0000 	.word	0x401c0000
   1d018:	fcc00000 	.word	0xfcc00000

0001d01c <__sflush_r>:
   1d01c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1d01e:	46c6      	mov	lr, r8
   1d020:	b500      	push	{lr}
   1d022:	230c      	movs	r3, #12
   1d024:	5eca      	ldrsh	r2, [r1, r3]
   1d026:	4680      	mov	r8, r0
   1d028:	b293      	uxth	r3, r2
   1d02a:	000c      	movs	r4, r1
   1d02c:	0719      	lsls	r1, r3, #28
   1d02e:	d440      	bmi.n	1d0b2 <__sflush_r+0x96>
   1d030:	2380      	movs	r3, #128	; 0x80
   1d032:	011b      	lsls	r3, r3, #4
   1d034:	4313      	orrs	r3, r2
   1d036:	6862      	ldr	r2, [r4, #4]
   1d038:	81a3      	strh	r3, [r4, #12]
   1d03a:	2a00      	cmp	r2, #0
   1d03c:	dc00      	bgt.n	1d040 <__sflush_r+0x24>
   1d03e:	e070      	b.n	1d122 <__sflush_r+0x106>
   1d040:	6aa6      	ldr	r6, [r4, #40]	; 0x28
   1d042:	2e00      	cmp	r6, #0
   1d044:	d031      	beq.n	1d0aa <__sflush_r+0x8e>
   1d046:	4642      	mov	r2, r8
   1d048:	4641      	mov	r1, r8
   1d04a:	6815      	ldr	r5, [r2, #0]
   1d04c:	2200      	movs	r2, #0
   1d04e:	b29b      	uxth	r3, r3
   1d050:	600a      	str	r2, [r1, #0]
   1d052:	04da      	lsls	r2, r3, #19
   1d054:	d400      	bmi.n	1d058 <__sflush_r+0x3c>
   1d056:	e069      	b.n	1d12c <__sflush_r+0x110>
   1d058:	6d22      	ldr	r2, [r4, #80]	; 0x50
   1d05a:	075b      	lsls	r3, r3, #29
   1d05c:	d506      	bpl.n	1d06c <__sflush_r+0x50>
   1d05e:	6863      	ldr	r3, [r4, #4]
   1d060:	1ad2      	subs	r2, r2, r3
   1d062:	6b23      	ldr	r3, [r4, #48]	; 0x30
   1d064:	2b00      	cmp	r3, #0
   1d066:	d001      	beq.n	1d06c <__sflush_r+0x50>
   1d068:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   1d06a:	1ad2      	subs	r2, r2, r3
   1d06c:	2300      	movs	r3, #0
   1d06e:	69e1      	ldr	r1, [r4, #28]
   1d070:	4640      	mov	r0, r8
   1d072:	47b0      	blx	r6
   1d074:	1c43      	adds	r3, r0, #1
   1d076:	d03d      	beq.n	1d0f4 <__sflush_r+0xd8>
   1d078:	89a3      	ldrh	r3, [r4, #12]
   1d07a:	4a3a      	ldr	r2, [pc, #232]	; (1d164 <__sflush_r+0x148>)
   1d07c:	4013      	ands	r3, r2
   1d07e:	2200      	movs	r2, #0
   1d080:	6062      	str	r2, [r4, #4]
   1d082:	6922      	ldr	r2, [r4, #16]
   1d084:	b21b      	sxth	r3, r3
   1d086:	81a3      	strh	r3, [r4, #12]
   1d088:	6022      	str	r2, [r4, #0]
   1d08a:	04db      	lsls	r3, r3, #19
   1d08c:	d447      	bmi.n	1d11e <__sflush_r+0x102>
   1d08e:	4643      	mov	r3, r8
   1d090:	6b21      	ldr	r1, [r4, #48]	; 0x30
   1d092:	601d      	str	r5, [r3, #0]
   1d094:	2900      	cmp	r1, #0
   1d096:	d008      	beq.n	1d0aa <__sflush_r+0x8e>
   1d098:	0023      	movs	r3, r4
   1d09a:	3340      	adds	r3, #64	; 0x40
   1d09c:	4299      	cmp	r1, r3
   1d09e:	d002      	beq.n	1d0a6 <__sflush_r+0x8a>
   1d0a0:	4640      	mov	r0, r8
   1d0a2:	f000 f967 	bl	1d374 <_free_r>
   1d0a6:	2300      	movs	r3, #0
   1d0a8:	6323      	str	r3, [r4, #48]	; 0x30
   1d0aa:	2000      	movs	r0, #0
   1d0ac:	bc04      	pop	{r2}
   1d0ae:	4690      	mov	r8, r2
   1d0b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1d0b2:	6926      	ldr	r6, [r4, #16]
   1d0b4:	2e00      	cmp	r6, #0
   1d0b6:	d0f8      	beq.n	1d0aa <__sflush_r+0x8e>
   1d0b8:	6822      	ldr	r2, [r4, #0]
   1d0ba:	6026      	str	r6, [r4, #0]
   1d0bc:	1b95      	subs	r5, r2, r6
   1d0be:	2200      	movs	r2, #0
   1d0c0:	079b      	lsls	r3, r3, #30
   1d0c2:	d100      	bne.n	1d0c6 <__sflush_r+0xaa>
   1d0c4:	6962      	ldr	r2, [r4, #20]
   1d0c6:	60a2      	str	r2, [r4, #8]
   1d0c8:	2d00      	cmp	r5, #0
   1d0ca:	dc04      	bgt.n	1d0d6 <__sflush_r+0xba>
   1d0cc:	e7ed      	b.n	1d0aa <__sflush_r+0x8e>
   1d0ce:	1836      	adds	r6, r6, r0
   1d0d0:	1a2d      	subs	r5, r5, r0
   1d0d2:	2d00      	cmp	r5, #0
   1d0d4:	dde9      	ble.n	1d0aa <__sflush_r+0x8e>
   1d0d6:	002b      	movs	r3, r5
   1d0d8:	0032      	movs	r2, r6
   1d0da:	69e1      	ldr	r1, [r4, #28]
   1d0dc:	4640      	mov	r0, r8
   1d0de:	6a67      	ldr	r7, [r4, #36]	; 0x24
   1d0e0:	47b8      	blx	r7
   1d0e2:	2800      	cmp	r0, #0
   1d0e4:	dcf3      	bgt.n	1d0ce <__sflush_r+0xb2>
   1d0e6:	2240      	movs	r2, #64	; 0x40
   1d0e8:	2001      	movs	r0, #1
   1d0ea:	89a3      	ldrh	r3, [r4, #12]
   1d0ec:	4240      	negs	r0, r0
   1d0ee:	4313      	orrs	r3, r2
   1d0f0:	81a3      	strh	r3, [r4, #12]
   1d0f2:	e7db      	b.n	1d0ac <__sflush_r+0x90>
   1d0f4:	4643      	mov	r3, r8
   1d0f6:	6819      	ldr	r1, [r3, #0]
   1d0f8:	291d      	cmp	r1, #29
   1d0fa:	d8f4      	bhi.n	1d0e6 <__sflush_r+0xca>
   1d0fc:	4b1a      	ldr	r3, [pc, #104]	; (1d168 <__sflush_r+0x14c>)
   1d0fe:	2201      	movs	r2, #1
   1d100:	40cb      	lsrs	r3, r1
   1d102:	439a      	bics	r2, r3
   1d104:	d1ef      	bne.n	1d0e6 <__sflush_r+0xca>
   1d106:	89a3      	ldrh	r3, [r4, #12]
   1d108:	4e16      	ldr	r6, [pc, #88]	; (1d164 <__sflush_r+0x148>)
   1d10a:	6062      	str	r2, [r4, #4]
   1d10c:	4033      	ands	r3, r6
   1d10e:	6922      	ldr	r2, [r4, #16]
   1d110:	b21b      	sxth	r3, r3
   1d112:	81a3      	strh	r3, [r4, #12]
   1d114:	6022      	str	r2, [r4, #0]
   1d116:	04db      	lsls	r3, r3, #19
   1d118:	d5b9      	bpl.n	1d08e <__sflush_r+0x72>
   1d11a:	2900      	cmp	r1, #0
   1d11c:	d1b7      	bne.n	1d08e <__sflush_r+0x72>
   1d11e:	6520      	str	r0, [r4, #80]	; 0x50
   1d120:	e7b5      	b.n	1d08e <__sflush_r+0x72>
   1d122:	6be2      	ldr	r2, [r4, #60]	; 0x3c
   1d124:	2a00      	cmp	r2, #0
   1d126:	dd00      	ble.n	1d12a <__sflush_r+0x10e>
   1d128:	e78a      	b.n	1d040 <__sflush_r+0x24>
   1d12a:	e7be      	b.n	1d0aa <__sflush_r+0x8e>
   1d12c:	2200      	movs	r2, #0
   1d12e:	2301      	movs	r3, #1
   1d130:	69e1      	ldr	r1, [r4, #28]
   1d132:	4640      	mov	r0, r8
   1d134:	47b0      	blx	r6
   1d136:	0002      	movs	r2, r0
   1d138:	1c43      	adds	r3, r0, #1
   1d13a:	d002      	beq.n	1d142 <__sflush_r+0x126>
   1d13c:	89a3      	ldrh	r3, [r4, #12]
   1d13e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
   1d140:	e78b      	b.n	1d05a <__sflush_r+0x3e>
   1d142:	4643      	mov	r3, r8
   1d144:	681b      	ldr	r3, [r3, #0]
   1d146:	2b00      	cmp	r3, #0
   1d148:	d0f8      	beq.n	1d13c <__sflush_r+0x120>
   1d14a:	2b1d      	cmp	r3, #29
   1d14c:	d001      	beq.n	1d152 <__sflush_r+0x136>
   1d14e:	2b16      	cmp	r3, #22
   1d150:	d103      	bne.n	1d15a <__sflush_r+0x13e>
   1d152:	4643      	mov	r3, r8
   1d154:	2000      	movs	r0, #0
   1d156:	601d      	str	r5, [r3, #0]
   1d158:	e7a8      	b.n	1d0ac <__sflush_r+0x90>
   1d15a:	2140      	movs	r1, #64	; 0x40
   1d15c:	89a3      	ldrh	r3, [r4, #12]
   1d15e:	430b      	orrs	r3, r1
   1d160:	81a3      	strh	r3, [r4, #12]
   1d162:	e7a3      	b.n	1d0ac <__sflush_r+0x90>
   1d164:	fffff7ff 	.word	0xfffff7ff
   1d168:	20400001 	.word	0x20400001

0001d16c <_fflush_r>:
   1d16c:	b570      	push	{r4, r5, r6, lr}
   1d16e:	0005      	movs	r5, r0
   1d170:	000c      	movs	r4, r1
   1d172:	2800      	cmp	r0, #0
   1d174:	d002      	beq.n	1d17c <_fflush_r+0x10>
   1d176:	6b83      	ldr	r3, [r0, #56]	; 0x38
   1d178:	2b00      	cmp	r3, #0
   1d17a:	d016      	beq.n	1d1aa <_fflush_r+0x3e>
   1d17c:	220c      	movs	r2, #12
   1d17e:	5ea3      	ldrsh	r3, [r4, r2]
   1d180:	2600      	movs	r6, #0
   1d182:	2b00      	cmp	r3, #0
   1d184:	d00f      	beq.n	1d1a6 <_fflush_r+0x3a>
   1d186:	6e62      	ldr	r2, [r4, #100]	; 0x64
   1d188:	07d2      	lsls	r2, r2, #31
   1d18a:	d401      	bmi.n	1d190 <_fflush_r+0x24>
   1d18c:	059b      	lsls	r3, r3, #22
   1d18e:	d513      	bpl.n	1d1b8 <_fflush_r+0x4c>
   1d190:	0021      	movs	r1, r4
   1d192:	0028      	movs	r0, r5
   1d194:	f7ff ff42 	bl	1d01c <__sflush_r>
   1d198:	6e63      	ldr	r3, [r4, #100]	; 0x64
   1d19a:	0006      	movs	r6, r0
   1d19c:	07db      	lsls	r3, r3, #31
   1d19e:	d402      	bmi.n	1d1a6 <_fflush_r+0x3a>
   1d1a0:	89a3      	ldrh	r3, [r4, #12]
   1d1a2:	059b      	lsls	r3, r3, #22
   1d1a4:	d504      	bpl.n	1d1b0 <_fflush_r+0x44>
   1d1a6:	0030      	movs	r0, r6
   1d1a8:	bd70      	pop	{r4, r5, r6, pc}
   1d1aa:	f000 f839 	bl	1d220 <__sinit>
   1d1ae:	e7e5      	b.n	1d17c <_fflush_r+0x10>
   1d1b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
   1d1b2:	f000 fb79 	bl	1d8a8 <__retarget_lock_release_recursive>
   1d1b6:	e7f6      	b.n	1d1a6 <_fflush_r+0x3a>
   1d1b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
   1d1ba:	f000 fb73 	bl	1d8a4 <__retarget_lock_acquire_recursive>
   1d1be:	e7e7      	b.n	1d190 <_fflush_r+0x24>

0001d1c0 <_cleanup_r>:
   1d1c0:	b510      	push	{r4, lr}
   1d1c2:	4902      	ldr	r1, [pc, #8]	; (1d1cc <_cleanup_r+0xc>)
   1d1c4:	f000 fb36 	bl	1d834 <_fwalk_reent>
   1d1c8:	bd10      	pop	{r4, pc}
   1d1ca:	46c0      	nop			; (mov r8, r8)
   1d1cc:	0001e6f5 	.word	0x0001e6f5

0001d1d0 <std.isra.0>:
   1d1d0:	2300      	movs	r3, #0
   1d1d2:	b510      	push	{r4, lr}
   1d1d4:	0004      	movs	r4, r0
   1d1d6:	6003      	str	r3, [r0, #0]
   1d1d8:	6043      	str	r3, [r0, #4]
   1d1da:	6083      	str	r3, [r0, #8]
   1d1dc:	8181      	strh	r1, [r0, #12]
   1d1de:	6643      	str	r3, [r0, #100]	; 0x64
   1d1e0:	81c2      	strh	r2, [r0, #14]
   1d1e2:	6103      	str	r3, [r0, #16]
   1d1e4:	6143      	str	r3, [r0, #20]
   1d1e6:	6183      	str	r3, [r0, #24]
   1d1e8:	2208      	movs	r2, #8
   1d1ea:	2100      	movs	r1, #0
   1d1ec:	305c      	adds	r0, #92	; 0x5c
   1d1ee:	f7fc fe6b 	bl	19ec8 <memset>
   1d1f2:	0020      	movs	r0, r4
   1d1f4:	4b06      	ldr	r3, [pc, #24]	; (1d210 <std.isra.0+0x40>)
   1d1f6:	61e4      	str	r4, [r4, #28]
   1d1f8:	6223      	str	r3, [r4, #32]
   1d1fa:	4b06      	ldr	r3, [pc, #24]	; (1d214 <std.isra.0+0x44>)
   1d1fc:	3058      	adds	r0, #88	; 0x58
   1d1fe:	6263      	str	r3, [r4, #36]	; 0x24
   1d200:	4b05      	ldr	r3, [pc, #20]	; (1d218 <std.isra.0+0x48>)
   1d202:	62a3      	str	r3, [r4, #40]	; 0x28
   1d204:	4b05      	ldr	r3, [pc, #20]	; (1d21c <std.isra.0+0x4c>)
   1d206:	62e3      	str	r3, [r4, #44]	; 0x2c
   1d208:	f000 fb48 	bl	1d89c <__retarget_lock_init_recursive>
   1d20c:	bd10      	pop	{r4, pc}
   1d20e:	46c0      	nop			; (mov r8, r8)
   1d210:	0001e429 	.word	0x0001e429
   1d214:	0001e451 	.word	0x0001e451
   1d218:	0001e48d 	.word	0x0001e48d
   1d21c:	0001e4b9 	.word	0x0001e4b9

0001d220 <__sinit>:
   1d220:	b570      	push	{r4, r5, r6, lr}
   1d222:	0004      	movs	r4, r0
   1d224:	4d14      	ldr	r5, [pc, #80]	; (1d278 <__sinit+0x58>)
   1d226:	0028      	movs	r0, r5
   1d228:	f000 fb3c 	bl	1d8a4 <__retarget_lock_acquire_recursive>
   1d22c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   1d22e:	2b00      	cmp	r3, #0
   1d230:	d11d      	bne.n	1d26e <__sinit+0x4e>
   1d232:	4a12      	ldr	r2, [pc, #72]	; (1d27c <__sinit+0x5c>)
   1d234:	2104      	movs	r1, #4
   1d236:	63e2      	str	r2, [r4, #60]	; 0x3c
   1d238:	22b8      	movs	r2, #184	; 0xb8
   1d23a:	0092      	lsls	r2, r2, #2
   1d23c:	50a3      	str	r3, [r4, r2]
   1d23e:	23b9      	movs	r3, #185	; 0xb9
   1d240:	2203      	movs	r2, #3
   1d242:	009b      	lsls	r3, r3, #2
   1d244:	50e2      	str	r2, [r4, r3]
   1d246:	3308      	adds	r3, #8
   1d248:	18e2      	adds	r2, r4, r3
   1d24a:	3b04      	subs	r3, #4
   1d24c:	50e2      	str	r2, [r4, r3]
   1d24e:	6860      	ldr	r0, [r4, #4]
   1d250:	2200      	movs	r2, #0
   1d252:	f7ff ffbd 	bl	1d1d0 <std.isra.0>
   1d256:	2201      	movs	r2, #1
   1d258:	2109      	movs	r1, #9
   1d25a:	68a0      	ldr	r0, [r4, #8]
   1d25c:	f7ff ffb8 	bl	1d1d0 <std.isra.0>
   1d260:	2202      	movs	r2, #2
   1d262:	2112      	movs	r1, #18
   1d264:	68e0      	ldr	r0, [r4, #12]
   1d266:	f7ff ffb3 	bl	1d1d0 <std.isra.0>
   1d26a:	2301      	movs	r3, #1
   1d26c:	63a3      	str	r3, [r4, #56]	; 0x38
   1d26e:	0028      	movs	r0, r5
   1d270:	f000 fb1a 	bl	1d8a8 <__retarget_lock_release_recursive>
   1d274:	bd70      	pop	{r4, r5, r6, pc}
   1d276:	46c0      	nop			; (mov r8, r8)
   1d278:	20002fcc 	.word	0x20002fcc
   1d27c:	0001d1c1 	.word	0x0001d1c1

0001d280 <__sfp_lock_acquire>:
   1d280:	b510      	push	{r4, lr}
   1d282:	4802      	ldr	r0, [pc, #8]	; (1d28c <__sfp_lock_acquire+0xc>)
   1d284:	f000 fb0e 	bl	1d8a4 <__retarget_lock_acquire_recursive>
   1d288:	bd10      	pop	{r4, pc}
   1d28a:	46c0      	nop			; (mov r8, r8)
   1d28c:	20002fe0 	.word	0x20002fe0

0001d290 <__sfp_lock_release>:
   1d290:	b510      	push	{r4, lr}
   1d292:	4802      	ldr	r0, [pc, #8]	; (1d29c <__sfp_lock_release+0xc>)
   1d294:	f000 fb08 	bl	1d8a8 <__retarget_lock_release_recursive>
   1d298:	bd10      	pop	{r4, pc}
   1d29a:	46c0      	nop			; (mov r8, r8)
   1d29c:	20002fe0 	.word	0x20002fe0

0001d2a0 <__libc_fini_array>:
   1d2a0:	b570      	push	{r4, r5, r6, lr}
   1d2a2:	4b09      	ldr	r3, [pc, #36]	; (1d2c8 <__libc_fini_array+0x28>)
   1d2a4:	4c09      	ldr	r4, [pc, #36]	; (1d2cc <__libc_fini_array+0x2c>)
   1d2a6:	1ae4      	subs	r4, r4, r3
   1d2a8:	10a4      	asrs	r4, r4, #2
   1d2aa:	d009      	beq.n	1d2c0 <__libc_fini_array+0x20>
   1d2ac:	4a08      	ldr	r2, [pc, #32]	; (1d2d0 <__libc_fini_array+0x30>)
   1d2ae:	18a5      	adds	r5, r4, r2
   1d2b0:	00ad      	lsls	r5, r5, #2
   1d2b2:	18ed      	adds	r5, r5, r3
   1d2b4:	682b      	ldr	r3, [r5, #0]
   1d2b6:	3c01      	subs	r4, #1
   1d2b8:	4798      	blx	r3
   1d2ba:	3d04      	subs	r5, #4
   1d2bc:	2c00      	cmp	r4, #0
   1d2be:	d1f9      	bne.n	1d2b4 <__libc_fini_array+0x14>
   1d2c0:	f003 fb6e 	bl	209a0 <_fini>
   1d2c4:	bd70      	pop	{r4, r5, r6, pc}
   1d2c6:	46c0      	nop			; (mov r8, r8)
   1d2c8:	000209ac 	.word	0x000209ac
   1d2cc:	000209b0 	.word	0x000209b0
   1d2d0:	3fffffff 	.word	0x3fffffff

0001d2d4 <_malloc_trim_r>:
   1d2d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1d2d6:	000c      	movs	r4, r1
   1d2d8:	0006      	movs	r6, r0
   1d2da:	f7fc fe3f 	bl	19f5c <__malloc_lock>
   1d2de:	4f20      	ldr	r7, [pc, #128]	; (1d360 <_malloc_trim_r+0x8c>)
   1d2e0:	68bb      	ldr	r3, [r7, #8]
   1d2e2:	685d      	ldr	r5, [r3, #4]
   1d2e4:	2303      	movs	r3, #3
   1d2e6:	439d      	bics	r5, r3
   1d2e8:	4b1e      	ldr	r3, [pc, #120]	; (1d364 <_malloc_trim_r+0x90>)
   1d2ea:	1b2c      	subs	r4, r5, r4
   1d2ec:	469c      	mov	ip, r3
   1d2ee:	4464      	add	r4, ip
   1d2f0:	0b24      	lsrs	r4, r4, #12
   1d2f2:	4b1d      	ldr	r3, [pc, #116]	; (1d368 <_malloc_trim_r+0x94>)
   1d2f4:	3c01      	subs	r4, #1
   1d2f6:	0324      	lsls	r4, r4, #12
   1d2f8:	429c      	cmp	r4, r3
   1d2fa:	dd07      	ble.n	1d30c <_malloc_trim_r+0x38>
   1d2fc:	2100      	movs	r1, #0
   1d2fe:	0030      	movs	r0, r6
   1d300:	f7fc fecc 	bl	1a09c <_sbrk_r>
   1d304:	68bb      	ldr	r3, [r7, #8]
   1d306:	195b      	adds	r3, r3, r5
   1d308:	4298      	cmp	r0, r3
   1d30a:	d004      	beq.n	1d316 <_malloc_trim_r+0x42>
   1d30c:	0030      	movs	r0, r6
   1d30e:	f7fc fe2d 	bl	19f6c <__malloc_unlock>
   1d312:	2000      	movs	r0, #0
   1d314:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1d316:	4261      	negs	r1, r4
   1d318:	0030      	movs	r0, r6
   1d31a:	f7fc febf 	bl	1a09c <_sbrk_r>
   1d31e:	1c43      	adds	r3, r0, #1
   1d320:	d00d      	beq.n	1d33e <_malloc_trim_r+0x6a>
   1d322:	2201      	movs	r2, #1
   1d324:	68bb      	ldr	r3, [r7, #8]
   1d326:	1b2d      	subs	r5, r5, r4
   1d328:	4315      	orrs	r5, r2
   1d32a:	605d      	str	r5, [r3, #4]
   1d32c:	4b0f      	ldr	r3, [pc, #60]	; (1d36c <_malloc_trim_r+0x98>)
   1d32e:	0030      	movs	r0, r6
   1d330:	681a      	ldr	r2, [r3, #0]
   1d332:	1b14      	subs	r4, r2, r4
   1d334:	601c      	str	r4, [r3, #0]
   1d336:	f7fc fe19 	bl	19f6c <__malloc_unlock>
   1d33a:	2001      	movs	r0, #1
   1d33c:	e7ea      	b.n	1d314 <_malloc_trim_r+0x40>
   1d33e:	2100      	movs	r1, #0
   1d340:	0030      	movs	r0, r6
   1d342:	f7fc feab 	bl	1a09c <_sbrk_r>
   1d346:	68ba      	ldr	r2, [r7, #8]
   1d348:	1a83      	subs	r3, r0, r2
   1d34a:	2b0f      	cmp	r3, #15
   1d34c:	ddde      	ble.n	1d30c <_malloc_trim_r+0x38>
   1d34e:	4908      	ldr	r1, [pc, #32]	; (1d370 <_malloc_trim_r+0x9c>)
   1d350:	6809      	ldr	r1, [r1, #0]
   1d352:	1a40      	subs	r0, r0, r1
   1d354:	4905      	ldr	r1, [pc, #20]	; (1d36c <_malloc_trim_r+0x98>)
   1d356:	6008      	str	r0, [r1, #0]
   1d358:	2101      	movs	r1, #1
   1d35a:	430b      	orrs	r3, r1
   1d35c:	6053      	str	r3, [r2, #4]
   1d35e:	e7d5      	b.n	1d30c <_malloc_trim_r+0x38>
   1d360:	200005b4 	.word	0x200005b4
   1d364:	00000fef 	.word	0x00000fef
   1d368:	00000fff 	.word	0x00000fff
   1d36c:	20001138 	.word	0x20001138
   1d370:	200009bc 	.word	0x200009bc

0001d374 <_free_r>:
   1d374:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1d376:	0004      	movs	r4, r0
   1d378:	1e0d      	subs	r5, r1, #0
   1d37a:	d03c      	beq.n	1d3f6 <_free_r+0x82>
   1d37c:	f7fc fdee 	bl	19f5c <__malloc_lock>
   1d380:	0029      	movs	r1, r5
   1d382:	3908      	subs	r1, #8
   1d384:	6848      	ldr	r0, [r1, #4]
   1d386:	2301      	movs	r3, #1
   1d388:	0005      	movs	r5, r0
   1d38a:	2603      	movs	r6, #3
   1d38c:	439d      	bics	r5, r3
   1d38e:	194a      	adds	r2, r1, r5
   1d390:	469c      	mov	ip, r3
   1d392:	4f61      	ldr	r7, [pc, #388]	; (1d518 <_free_r+0x1a4>)
   1d394:	6853      	ldr	r3, [r2, #4]
   1d396:	43b3      	bics	r3, r6
   1d398:	68be      	ldr	r6, [r7, #8]
   1d39a:	42b2      	cmp	r2, r6
   1d39c:	d056      	beq.n	1d44c <_free_r+0xd8>
   1d39e:	4666      	mov	r6, ip
   1d3a0:	6053      	str	r3, [r2, #4]
   1d3a2:	4206      	tst	r6, r0
   1d3a4:	d10a      	bne.n	1d3bc <_free_r+0x48>
   1d3a6:	003e      	movs	r6, r7
   1d3a8:	6808      	ldr	r0, [r1, #0]
   1d3aa:	3608      	adds	r6, #8
   1d3ac:	1a09      	subs	r1, r1, r0
   1d3ae:	182d      	adds	r5, r5, r0
   1d3b0:	6888      	ldr	r0, [r1, #8]
   1d3b2:	42b0      	cmp	r0, r6
   1d3b4:	d065      	beq.n	1d482 <_free_r+0x10e>
   1d3b6:	68ce      	ldr	r6, [r1, #12]
   1d3b8:	60c6      	str	r6, [r0, #12]
   1d3ba:	60b0      	str	r0, [r6, #8]
   1d3bc:	2001      	movs	r0, #1
   1d3be:	18d6      	adds	r6, r2, r3
   1d3c0:	6876      	ldr	r6, [r6, #4]
   1d3c2:	4206      	tst	r6, r0
   1d3c4:	d033      	beq.n	1d42e <_free_r+0xba>
   1d3c6:	4b55      	ldr	r3, [pc, #340]	; (1d51c <_free_r+0x1a8>)
   1d3c8:	4328      	orrs	r0, r5
   1d3ca:	6048      	str	r0, [r1, #4]
   1d3cc:	514d      	str	r5, [r1, r5]
   1d3ce:	429d      	cmp	r5, r3
   1d3d0:	d812      	bhi.n	1d3f8 <_free_r+0x84>
   1d3d2:	08ed      	lsrs	r5, r5, #3
   1d3d4:	3bff      	subs	r3, #255	; 0xff
   1d3d6:	10aa      	asrs	r2, r5, #2
   1d3d8:	3bff      	subs	r3, #255	; 0xff
   1d3da:	4093      	lsls	r3, r2
   1d3dc:	687a      	ldr	r2, [r7, #4]
   1d3de:	00ed      	lsls	r5, r5, #3
   1d3e0:	4313      	orrs	r3, r2
   1d3e2:	607b      	str	r3, [r7, #4]
   1d3e4:	19ef      	adds	r7, r5, r7
   1d3e6:	68bb      	ldr	r3, [r7, #8]
   1d3e8:	60cf      	str	r7, [r1, #12]
   1d3ea:	608b      	str	r3, [r1, #8]
   1d3ec:	60b9      	str	r1, [r7, #8]
   1d3ee:	60d9      	str	r1, [r3, #12]
   1d3f0:	0020      	movs	r0, r4
   1d3f2:	f7fc fdbb 	bl	19f6c <__malloc_unlock>
   1d3f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1d3f8:	0a68      	lsrs	r0, r5, #9
   1d3fa:	2804      	cmp	r0, #4
   1d3fc:	d850      	bhi.n	1d4a0 <_free_r+0x12c>
   1d3fe:	09a8      	lsrs	r0, r5, #6
   1d400:	0002      	movs	r2, r0
   1d402:	3039      	adds	r0, #57	; 0x39
   1d404:	3238      	adds	r2, #56	; 0x38
   1d406:	00c0      	lsls	r0, r0, #3
   1d408:	1838      	adds	r0, r7, r0
   1d40a:	3808      	subs	r0, #8
   1d40c:	6883      	ldr	r3, [r0, #8]
   1d40e:	2603      	movs	r6, #3
   1d410:	4298      	cmp	r0, r3
   1d412:	d04c      	beq.n	1d4ae <_free_r+0x13a>
   1d414:	685a      	ldr	r2, [r3, #4]
   1d416:	43b2      	bics	r2, r6
   1d418:	4295      	cmp	r5, r2
   1d41a:	d230      	bcs.n	1d47e <_free_r+0x10a>
   1d41c:	689b      	ldr	r3, [r3, #8]
   1d41e:	4298      	cmp	r0, r3
   1d420:	d1f8      	bne.n	1d414 <_free_r+0xa0>
   1d422:	68c3      	ldr	r3, [r0, #12]
   1d424:	60cb      	str	r3, [r1, #12]
   1d426:	6088      	str	r0, [r1, #8]
   1d428:	6099      	str	r1, [r3, #8]
   1d42a:	60c1      	str	r1, [r0, #12]
   1d42c:	e7e0      	b.n	1d3f0 <_free_r+0x7c>
   1d42e:	18ed      	adds	r5, r5, r3
   1d430:	4e3b      	ldr	r6, [pc, #236]	; (1d520 <_free_r+0x1ac>)
   1d432:	6893      	ldr	r3, [r2, #8]
   1d434:	42b3      	cmp	r3, r6
   1d436:	d042      	beq.n	1d4be <_free_r+0x14a>
   1d438:	68d2      	ldr	r2, [r2, #12]
   1d43a:	4328      	orrs	r0, r5
   1d43c:	60da      	str	r2, [r3, #12]
   1d43e:	6093      	str	r3, [r2, #8]
   1d440:	4b36      	ldr	r3, [pc, #216]	; (1d51c <_free_r+0x1a8>)
   1d442:	6048      	str	r0, [r1, #4]
   1d444:	514d      	str	r5, [r1, r5]
   1d446:	429d      	cmp	r5, r3
   1d448:	d8d6      	bhi.n	1d3f8 <_free_r+0x84>
   1d44a:	e7c2      	b.n	1d3d2 <_free_r+0x5e>
   1d44c:	4662      	mov	r2, ip
   1d44e:	18eb      	adds	r3, r5, r3
   1d450:	4202      	tst	r2, r0
   1d452:	d106      	bne.n	1d462 <_free_r+0xee>
   1d454:	680a      	ldr	r2, [r1, #0]
   1d456:	1a89      	subs	r1, r1, r2
   1d458:	6888      	ldr	r0, [r1, #8]
   1d45a:	189b      	adds	r3, r3, r2
   1d45c:	68ca      	ldr	r2, [r1, #12]
   1d45e:	60c2      	str	r2, [r0, #12]
   1d460:	6090      	str	r0, [r2, #8]
   1d462:	2201      	movs	r2, #1
   1d464:	431a      	orrs	r2, r3
   1d466:	604a      	str	r2, [r1, #4]
   1d468:	4a2e      	ldr	r2, [pc, #184]	; (1d524 <_free_r+0x1b0>)
   1d46a:	60b9      	str	r1, [r7, #8]
   1d46c:	6812      	ldr	r2, [r2, #0]
   1d46e:	4293      	cmp	r3, r2
   1d470:	d3be      	bcc.n	1d3f0 <_free_r+0x7c>
   1d472:	4b2d      	ldr	r3, [pc, #180]	; (1d528 <_free_r+0x1b4>)
   1d474:	0020      	movs	r0, r4
   1d476:	6819      	ldr	r1, [r3, #0]
   1d478:	f7ff ff2c 	bl	1d2d4 <_malloc_trim_r>
   1d47c:	e7b8      	b.n	1d3f0 <_free_r+0x7c>
   1d47e:	0018      	movs	r0, r3
   1d480:	e7cf      	b.n	1d422 <_free_r+0xae>
   1d482:	4666      	mov	r6, ip
   1d484:	18d0      	adds	r0, r2, r3
   1d486:	6840      	ldr	r0, [r0, #4]
   1d488:	4230      	tst	r0, r6
   1d48a:	d13f      	bne.n	1d50c <_free_r+0x198>
   1d48c:	6890      	ldr	r0, [r2, #8]
   1d48e:	195d      	adds	r5, r3, r5
   1d490:	68d3      	ldr	r3, [r2, #12]
   1d492:	60c3      	str	r3, [r0, #12]
   1d494:	6098      	str	r0, [r3, #8]
   1d496:	4663      	mov	r3, ip
   1d498:	432b      	orrs	r3, r5
   1d49a:	604b      	str	r3, [r1, #4]
   1d49c:	514d      	str	r5, [r1, r5]
   1d49e:	e7a7      	b.n	1d3f0 <_free_r+0x7c>
   1d4a0:	2814      	cmp	r0, #20
   1d4a2:	d814      	bhi.n	1d4ce <_free_r+0x15a>
   1d4a4:	0002      	movs	r2, r0
   1d4a6:	305c      	adds	r0, #92	; 0x5c
   1d4a8:	325b      	adds	r2, #91	; 0x5b
   1d4aa:	00c0      	lsls	r0, r0, #3
   1d4ac:	e7ac      	b.n	1d408 <_free_r+0x94>
   1d4ae:	2301      	movs	r3, #1
   1d4b0:	1092      	asrs	r2, r2, #2
   1d4b2:	4093      	lsls	r3, r2
   1d4b4:	687a      	ldr	r2, [r7, #4]
   1d4b6:	4313      	orrs	r3, r2
   1d4b8:	607b      	str	r3, [r7, #4]
   1d4ba:	0003      	movs	r3, r0
   1d4bc:	e7b2      	b.n	1d424 <_free_r+0xb0>
   1d4be:	4328      	orrs	r0, r5
   1d4c0:	60d9      	str	r1, [r3, #12]
   1d4c2:	6099      	str	r1, [r3, #8]
   1d4c4:	60cb      	str	r3, [r1, #12]
   1d4c6:	608b      	str	r3, [r1, #8]
   1d4c8:	6048      	str	r0, [r1, #4]
   1d4ca:	514d      	str	r5, [r1, r5]
   1d4cc:	e790      	b.n	1d3f0 <_free_r+0x7c>
   1d4ce:	2854      	cmp	r0, #84	; 0x54
   1d4d0:	d805      	bhi.n	1d4de <_free_r+0x16a>
   1d4d2:	0b28      	lsrs	r0, r5, #12
   1d4d4:	0002      	movs	r2, r0
   1d4d6:	306f      	adds	r0, #111	; 0x6f
   1d4d8:	326e      	adds	r2, #110	; 0x6e
   1d4da:	00c0      	lsls	r0, r0, #3
   1d4dc:	e794      	b.n	1d408 <_free_r+0x94>
   1d4de:	22aa      	movs	r2, #170	; 0xaa
   1d4e0:	0052      	lsls	r2, r2, #1
   1d4e2:	4290      	cmp	r0, r2
   1d4e4:	d805      	bhi.n	1d4f2 <_free_r+0x17e>
   1d4e6:	0be8      	lsrs	r0, r5, #15
   1d4e8:	0002      	movs	r2, r0
   1d4ea:	3078      	adds	r0, #120	; 0x78
   1d4ec:	3277      	adds	r2, #119	; 0x77
   1d4ee:	00c0      	lsls	r0, r0, #3
   1d4f0:	e78a      	b.n	1d408 <_free_r+0x94>
   1d4f2:	4a0e      	ldr	r2, [pc, #56]	; (1d52c <_free_r+0x1b8>)
   1d4f4:	4290      	cmp	r0, r2
   1d4f6:	d805      	bhi.n	1d504 <_free_r+0x190>
   1d4f8:	0ca8      	lsrs	r0, r5, #18
   1d4fa:	0002      	movs	r2, r0
   1d4fc:	307d      	adds	r0, #125	; 0x7d
   1d4fe:	327c      	adds	r2, #124	; 0x7c
   1d500:	00c0      	lsls	r0, r0, #3
   1d502:	e781      	b.n	1d408 <_free_r+0x94>
   1d504:	20fe      	movs	r0, #254	; 0xfe
   1d506:	227e      	movs	r2, #126	; 0x7e
   1d508:	0080      	lsls	r0, r0, #2
   1d50a:	e77d      	b.n	1d408 <_free_r+0x94>
   1d50c:	4663      	mov	r3, ip
   1d50e:	432b      	orrs	r3, r5
   1d510:	604b      	str	r3, [r1, #4]
   1d512:	6015      	str	r5, [r2, #0]
   1d514:	e76c      	b.n	1d3f0 <_free_r+0x7c>
   1d516:	46c0      	nop			; (mov r8, r8)
   1d518:	200005b4 	.word	0x200005b4
   1d51c:	000001ff 	.word	0x000001ff
   1d520:	200005bc 	.word	0x200005bc
   1d524:	200009c0 	.word	0x200009c0
   1d528:	20001168 	.word	0x20001168
   1d52c:	00000554 	.word	0x00000554

0001d530 <__sfvwrite_r>:
   1d530:	b5f0      	push	{r4, r5, r6, r7, lr}
   1d532:	464e      	mov	r6, r9
   1d534:	46de      	mov	lr, fp
   1d536:	4657      	mov	r7, sl
   1d538:	4645      	mov	r5, r8
   1d53a:	b5e0      	push	{r5, r6, r7, lr}
   1d53c:	6893      	ldr	r3, [r2, #8]
   1d53e:	b083      	sub	sp, #12
   1d540:	9000      	str	r0, [sp, #0]
   1d542:	000c      	movs	r4, r1
   1d544:	0016      	movs	r6, r2
   1d546:	2b00      	cmp	r3, #0
   1d548:	d025      	beq.n	1d596 <__sfvwrite_r+0x66>
   1d54a:	898b      	ldrh	r3, [r1, #12]
   1d54c:	071a      	lsls	r2, r3, #28
   1d54e:	d52a      	bpl.n	1d5a6 <__sfvwrite_r+0x76>
   1d550:	690a      	ldr	r2, [r1, #16]
   1d552:	2a00      	cmp	r2, #0
   1d554:	d027      	beq.n	1d5a6 <__sfvwrite_r+0x76>
   1d556:	6832      	ldr	r2, [r6, #0]
   1d558:	4693      	mov	fp, r2
   1d55a:	079a      	lsls	r2, r3, #30
   1d55c:	d52f      	bpl.n	1d5be <__sfvwrite_r+0x8e>
   1d55e:	4bb2      	ldr	r3, [pc, #712]	; (1d828 <__sfvwrite_r+0x2f8>)
   1d560:	2700      	movs	r7, #0
   1d562:	2500      	movs	r5, #0
   1d564:	4698      	mov	r8, r3
   1d566:	46b1      	mov	r9, r6
   1d568:	2d00      	cmp	r5, #0
   1d56a:	d100      	bne.n	1d56e <__sfvwrite_r+0x3e>
   1d56c:	e072      	b.n	1d654 <__sfvwrite_r+0x124>
   1d56e:	002b      	movs	r3, r5
   1d570:	4545      	cmp	r5, r8
   1d572:	d900      	bls.n	1d576 <__sfvwrite_r+0x46>
   1d574:	4bac      	ldr	r3, [pc, #688]	; (1d828 <__sfvwrite_r+0x2f8>)
   1d576:	003a      	movs	r2, r7
   1d578:	69e1      	ldr	r1, [r4, #28]
   1d57a:	9800      	ldr	r0, [sp, #0]
   1d57c:	6a66      	ldr	r6, [r4, #36]	; 0x24
   1d57e:	47b0      	blx	r6
   1d580:	2800      	cmp	r0, #0
   1d582:	dc00      	bgt.n	1d586 <__sfvwrite_r+0x56>
   1d584:	e073      	b.n	1d66e <__sfvwrite_r+0x13e>
   1d586:	464b      	mov	r3, r9
   1d588:	689b      	ldr	r3, [r3, #8]
   1d58a:	183f      	adds	r7, r7, r0
   1d58c:	1a2d      	subs	r5, r5, r0
   1d58e:	1a18      	subs	r0, r3, r0
   1d590:	464b      	mov	r3, r9
   1d592:	6098      	str	r0, [r3, #8]
   1d594:	d1e8      	bne.n	1d568 <__sfvwrite_r+0x38>
   1d596:	2000      	movs	r0, #0
   1d598:	b003      	add	sp, #12
   1d59a:	bc3c      	pop	{r2, r3, r4, r5}
   1d59c:	4690      	mov	r8, r2
   1d59e:	4699      	mov	r9, r3
   1d5a0:	46a2      	mov	sl, r4
   1d5a2:	46ab      	mov	fp, r5
   1d5a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1d5a6:	0021      	movs	r1, r4
   1d5a8:	9800      	ldr	r0, [sp, #0]
   1d5aa:	f7fe fc4b 	bl	1be44 <__swsetup_r>
   1d5ae:	2800      	cmp	r0, #0
   1d5b0:	d000      	beq.n	1d5b4 <__sfvwrite_r+0x84>
   1d5b2:	e130      	b.n	1d816 <__sfvwrite_r+0x2e6>
   1d5b4:	6832      	ldr	r2, [r6, #0]
   1d5b6:	89a3      	ldrh	r3, [r4, #12]
   1d5b8:	4693      	mov	fp, r2
   1d5ba:	079a      	lsls	r2, r3, #30
   1d5bc:	d4cf      	bmi.n	1d55e <__sfvwrite_r+0x2e>
   1d5be:	07da      	lsls	r2, r3, #31
   1d5c0:	d55d      	bpl.n	1d67e <__sfvwrite_r+0x14e>
   1d5c2:	2300      	movs	r3, #0
   1d5c4:	2000      	movs	r0, #0
   1d5c6:	469a      	mov	sl, r3
   1d5c8:	2700      	movs	r7, #0
   1d5ca:	001d      	movs	r5, r3
   1d5cc:	46b1      	mov	r9, r6
   1d5ce:	e029      	b.n	1d624 <__sfvwrite_r+0xf4>
   1d5d0:	2800      	cmp	r0, #0
   1d5d2:	d033      	beq.n	1d63c <__sfvwrite_r+0x10c>
   1d5d4:	46a8      	mov	r8, r5
   1d5d6:	42bd      	cmp	r5, r7
   1d5d8:	d900      	bls.n	1d5dc <__sfvwrite_r+0xac>
   1d5da:	46b8      	mov	r8, r7
   1d5dc:	6820      	ldr	r0, [r4, #0]
   1d5de:	6922      	ldr	r2, [r4, #16]
   1d5e0:	4646      	mov	r6, r8
   1d5e2:	6963      	ldr	r3, [r4, #20]
   1d5e4:	4290      	cmp	r0, r2
   1d5e6:	d907      	bls.n	1d5f8 <__sfvwrite_r+0xc8>
   1d5e8:	68a2      	ldr	r2, [r4, #8]
   1d5ea:	4694      	mov	ip, r2
   1d5ec:	449c      	add	ip, r3
   1d5ee:	4662      	mov	r2, ip
   1d5f0:	9201      	str	r2, [sp, #4]
   1d5f2:	45e0      	cmp	r8, ip
   1d5f4:	dd00      	ble.n	1d5f8 <__sfvwrite_r+0xc8>
   1d5f6:	e0e9      	b.n	1d7cc <__sfvwrite_r+0x29c>
   1d5f8:	4598      	cmp	r8, r3
   1d5fa:	da00      	bge.n	1d5fe <__sfvwrite_r+0xce>
   1d5fc:	e08f      	b.n	1d71e <__sfvwrite_r+0x1ee>
   1d5fe:	6a66      	ldr	r6, [r4, #36]	; 0x24
   1d600:	4652      	mov	r2, sl
   1d602:	69e1      	ldr	r1, [r4, #28]
   1d604:	9800      	ldr	r0, [sp, #0]
   1d606:	47b0      	blx	r6
   1d608:	1e06      	subs	r6, r0, #0
   1d60a:	dd30      	ble.n	1d66e <__sfvwrite_r+0x13e>
   1d60c:	1bad      	subs	r5, r5, r6
   1d60e:	2001      	movs	r0, #1
   1d610:	2d00      	cmp	r5, #0
   1d612:	d026      	beq.n	1d662 <__sfvwrite_r+0x132>
   1d614:	464b      	mov	r3, r9
   1d616:	689b      	ldr	r3, [r3, #8]
   1d618:	44b2      	add	sl, r6
   1d61a:	1bbf      	subs	r7, r7, r6
   1d61c:	1b9e      	subs	r6, r3, r6
   1d61e:	464b      	mov	r3, r9
   1d620:	609e      	str	r6, [r3, #8]
   1d622:	d0b8      	beq.n	1d596 <__sfvwrite_r+0x66>
   1d624:	2f00      	cmp	r7, #0
   1d626:	d1d3      	bne.n	1d5d0 <__sfvwrite_r+0xa0>
   1d628:	465b      	mov	r3, fp
   1d62a:	681b      	ldr	r3, [r3, #0]
   1d62c:	469a      	mov	sl, r3
   1d62e:	465b      	mov	r3, fp
   1d630:	685f      	ldr	r7, [r3, #4]
   1d632:	2308      	movs	r3, #8
   1d634:	469c      	mov	ip, r3
   1d636:	44e3      	add	fp, ip
   1d638:	2f00      	cmp	r7, #0
   1d63a:	d0f5      	beq.n	1d628 <__sfvwrite_r+0xf8>
   1d63c:	003a      	movs	r2, r7
   1d63e:	210a      	movs	r1, #10
   1d640:	4650      	mov	r0, sl
   1d642:	f000 f9ab 	bl	1d99c <memchr>
   1d646:	2800      	cmp	r0, #0
   1d648:	d100      	bne.n	1d64c <__sfvwrite_r+0x11c>
   1d64a:	e0e2      	b.n	1d812 <__sfvwrite_r+0x2e2>
   1d64c:	4653      	mov	r3, sl
   1d64e:	3001      	adds	r0, #1
   1d650:	1ac5      	subs	r5, r0, r3
   1d652:	e7bf      	b.n	1d5d4 <__sfvwrite_r+0xa4>
   1d654:	465b      	mov	r3, fp
   1d656:	681f      	ldr	r7, [r3, #0]
   1d658:	685d      	ldr	r5, [r3, #4]
   1d65a:	2308      	movs	r3, #8
   1d65c:	469c      	mov	ip, r3
   1d65e:	44e3      	add	fp, ip
   1d660:	e782      	b.n	1d568 <__sfvwrite_r+0x38>
   1d662:	0021      	movs	r1, r4
   1d664:	9800      	ldr	r0, [sp, #0]
   1d666:	f7ff fd81 	bl	1d16c <_fflush_r>
   1d66a:	2800      	cmp	r0, #0
   1d66c:	d0d2      	beq.n	1d614 <__sfvwrite_r+0xe4>
   1d66e:	220c      	movs	r2, #12
   1d670:	5ea3      	ldrsh	r3, [r4, r2]
   1d672:	2240      	movs	r2, #64	; 0x40
   1d674:	2001      	movs	r0, #1
   1d676:	4313      	orrs	r3, r2
   1d678:	81a3      	strh	r3, [r4, #12]
   1d67a:	4240      	negs	r0, r0
   1d67c:	e78c      	b.n	1d598 <__sfvwrite_r+0x68>
   1d67e:	2200      	movs	r2, #0
   1d680:	4691      	mov	r9, r2
   1d682:	464d      	mov	r5, r9
   1d684:	2d00      	cmp	r5, #0
   1d686:	d023      	beq.n	1d6d0 <__sfvwrite_r+0x1a0>
   1d688:	68a2      	ldr	r2, [r4, #8]
   1d68a:	4690      	mov	r8, r2
   1d68c:	2280      	movs	r2, #128	; 0x80
   1d68e:	0092      	lsls	r2, r2, #2
   1d690:	4213      	tst	r3, r2
   1d692:	d026      	beq.n	1d6e2 <__sfvwrite_r+0x1b2>
   1d694:	46c2      	mov	sl, r8
   1d696:	4545      	cmp	r5, r8
   1d698:	d34d      	bcc.n	1d736 <__sfvwrite_r+0x206>
   1d69a:	2290      	movs	r2, #144	; 0x90
   1d69c:	00d2      	lsls	r2, r2, #3
   1d69e:	4213      	tst	r3, r2
   1d6a0:	d14e      	bne.n	1d740 <__sfvwrite_r+0x210>
   1d6a2:	002f      	movs	r7, r5
   1d6a4:	6820      	ldr	r0, [r4, #0]
   1d6a6:	4652      	mov	r2, sl
   1d6a8:	4649      	mov	r1, r9
   1d6aa:	f7fc fbbd 	bl	19e28 <memmove>
   1d6ae:	4642      	mov	r2, r8
   1d6b0:	68a3      	ldr	r3, [r4, #8]
   1d6b2:	1a98      	subs	r0, r3, r2
   1d6b4:	6823      	ldr	r3, [r4, #0]
   1d6b6:	60a0      	str	r0, [r4, #8]
   1d6b8:	4453      	add	r3, sl
   1d6ba:	6023      	str	r3, [r4, #0]
   1d6bc:	68b3      	ldr	r3, [r6, #8]
   1d6be:	44b9      	add	r9, r7
   1d6c0:	1bed      	subs	r5, r5, r7
   1d6c2:	1bdf      	subs	r7, r3, r7
   1d6c4:	60b7      	str	r7, [r6, #8]
   1d6c6:	d100      	bne.n	1d6ca <__sfvwrite_r+0x19a>
   1d6c8:	e765      	b.n	1d596 <__sfvwrite_r+0x66>
   1d6ca:	89a3      	ldrh	r3, [r4, #12]
   1d6cc:	2d00      	cmp	r5, #0
   1d6ce:	d1db      	bne.n	1d688 <__sfvwrite_r+0x158>
   1d6d0:	465a      	mov	r2, fp
   1d6d2:	6812      	ldr	r2, [r2, #0]
   1d6d4:	4691      	mov	r9, r2
   1d6d6:	465a      	mov	r2, fp
   1d6d8:	6855      	ldr	r5, [r2, #4]
   1d6da:	2208      	movs	r2, #8
   1d6dc:	4694      	mov	ip, r2
   1d6de:	44e3      	add	fp, ip
   1d6e0:	e7d0      	b.n	1d684 <__sfvwrite_r+0x154>
   1d6e2:	6820      	ldr	r0, [r4, #0]
   1d6e4:	6923      	ldr	r3, [r4, #16]
   1d6e6:	4298      	cmp	r0, r3
   1d6e8:	d802      	bhi.n	1d6f0 <__sfvwrite_r+0x1c0>
   1d6ea:	6967      	ldr	r7, [r4, #20]
   1d6ec:	42bd      	cmp	r5, r7
   1d6ee:	d259      	bcs.n	1d7a4 <__sfvwrite_r+0x274>
   1d6f0:	4647      	mov	r7, r8
   1d6f2:	42af      	cmp	r7, r5
   1d6f4:	d900      	bls.n	1d6f8 <__sfvwrite_r+0x1c8>
   1d6f6:	002f      	movs	r7, r5
   1d6f8:	003a      	movs	r2, r7
   1d6fa:	4649      	mov	r1, r9
   1d6fc:	f7fc fb94 	bl	19e28 <memmove>
   1d700:	68a3      	ldr	r3, [r4, #8]
   1d702:	6822      	ldr	r2, [r4, #0]
   1d704:	1bdb      	subs	r3, r3, r7
   1d706:	19d2      	adds	r2, r2, r7
   1d708:	60a3      	str	r3, [r4, #8]
   1d70a:	6022      	str	r2, [r4, #0]
   1d70c:	2b00      	cmp	r3, #0
   1d70e:	d1d5      	bne.n	1d6bc <__sfvwrite_r+0x18c>
   1d710:	0021      	movs	r1, r4
   1d712:	9800      	ldr	r0, [sp, #0]
   1d714:	f7ff fd2a 	bl	1d16c <_fflush_r>
   1d718:	2800      	cmp	r0, #0
   1d71a:	d0cf      	beq.n	1d6bc <__sfvwrite_r+0x18c>
   1d71c:	e7a7      	b.n	1d66e <__sfvwrite_r+0x13e>
   1d71e:	4642      	mov	r2, r8
   1d720:	4651      	mov	r1, sl
   1d722:	f7fc fb81 	bl	19e28 <memmove>
   1d726:	4642      	mov	r2, r8
   1d728:	68a3      	ldr	r3, [r4, #8]
   1d72a:	1a9b      	subs	r3, r3, r2
   1d72c:	60a3      	str	r3, [r4, #8]
   1d72e:	6823      	ldr	r3, [r4, #0]
   1d730:	4443      	add	r3, r8
   1d732:	6023      	str	r3, [r4, #0]
   1d734:	e76a      	b.n	1d60c <__sfvwrite_r+0xdc>
   1d736:	46a8      	mov	r8, r5
   1d738:	6820      	ldr	r0, [r4, #0]
   1d73a:	002f      	movs	r7, r5
   1d73c:	46aa      	mov	sl, r5
   1d73e:	e7b2      	b.n	1d6a6 <__sfvwrite_r+0x176>
   1d740:	6921      	ldr	r1, [r4, #16]
   1d742:	6822      	ldr	r2, [r4, #0]
   1d744:	1a52      	subs	r2, r2, r1
   1d746:	4692      	mov	sl, r2
   1d748:	6962      	ldr	r2, [r4, #20]
   1d74a:	0057      	lsls	r7, r2, #1
   1d74c:	18bf      	adds	r7, r7, r2
   1d74e:	0ffa      	lsrs	r2, r7, #31
   1d750:	19d7      	adds	r7, r2, r7
   1d752:	4652      	mov	r2, sl
   1d754:	1c50      	adds	r0, r2, #1
   1d756:	107f      	asrs	r7, r7, #1
   1d758:	1940      	adds	r0, r0, r5
   1d75a:	003a      	movs	r2, r7
   1d75c:	42b8      	cmp	r0, r7
   1d75e:	d901      	bls.n	1d764 <__sfvwrite_r+0x234>
   1d760:	0007      	movs	r7, r0
   1d762:	0002      	movs	r2, r0
   1d764:	055b      	lsls	r3, r3, #21
   1d766:	d542      	bpl.n	1d7ee <__sfvwrite_r+0x2be>
   1d768:	0011      	movs	r1, r2
   1d76a:	9800      	ldr	r0, [sp, #0]
   1d76c:	f7fc f82a 	bl	197c4 <_malloc_r>
   1d770:	4680      	mov	r8, r0
   1d772:	1e03      	subs	r3, r0, #0
   1d774:	d052      	beq.n	1d81c <__sfvwrite_r+0x2ec>
   1d776:	4652      	mov	r2, sl
   1d778:	6921      	ldr	r1, [r4, #16]
   1d77a:	f7fc fb13 	bl	19da4 <memcpy>
   1d77e:	89a3      	ldrh	r3, [r4, #12]
   1d780:	4a2a      	ldr	r2, [pc, #168]	; (1d82c <__sfvwrite_r+0x2fc>)
   1d782:	4013      	ands	r3, r2
   1d784:	2280      	movs	r2, #128	; 0x80
   1d786:	4313      	orrs	r3, r2
   1d788:	81a3      	strh	r3, [r4, #12]
   1d78a:	4643      	mov	r3, r8
   1d78c:	4640      	mov	r0, r8
   1d78e:	6123      	str	r3, [r4, #16]
   1d790:	4653      	mov	r3, sl
   1d792:	4450      	add	r0, sl
   1d794:	6167      	str	r7, [r4, #20]
   1d796:	1aff      	subs	r7, r7, r3
   1d798:	60a7      	str	r7, [r4, #8]
   1d79a:	6020      	str	r0, [r4, #0]
   1d79c:	46a8      	mov	r8, r5
   1d79e:	002f      	movs	r7, r5
   1d7a0:	46aa      	mov	sl, r5
   1d7a2:	e780      	b.n	1d6a6 <__sfvwrite_r+0x176>
   1d7a4:	4b22      	ldr	r3, [pc, #136]	; (1d830 <__sfvwrite_r+0x300>)
   1d7a6:	0028      	movs	r0, r5
   1d7a8:	429d      	cmp	r5, r3
   1d7aa:	d900      	bls.n	1d7ae <__sfvwrite_r+0x27e>
   1d7ac:	0018      	movs	r0, r3
   1d7ae:	0039      	movs	r1, r7
   1d7b0:	f7f8 ffd0 	bl	16754 <__divsi3>
   1d7b4:	003b      	movs	r3, r7
   1d7b6:	464a      	mov	r2, r9
   1d7b8:	4343      	muls	r3, r0
   1d7ba:	69e1      	ldr	r1, [r4, #28]
   1d7bc:	9800      	ldr	r0, [sp, #0]
   1d7be:	6a67      	ldr	r7, [r4, #36]	; 0x24
   1d7c0:	47b8      	blx	r7
   1d7c2:	2800      	cmp	r0, #0
   1d7c4:	dc00      	bgt.n	1d7c8 <__sfvwrite_r+0x298>
   1d7c6:	e752      	b.n	1d66e <__sfvwrite_r+0x13e>
   1d7c8:	0007      	movs	r7, r0
   1d7ca:	e777      	b.n	1d6bc <__sfvwrite_r+0x18c>
   1d7cc:	4666      	mov	r6, ip
   1d7ce:	4651      	mov	r1, sl
   1d7d0:	f7fc fb2a 	bl	19e28 <memmove>
   1d7d4:	46b4      	mov	ip, r6
   1d7d6:	6823      	ldr	r3, [r4, #0]
   1d7d8:	0021      	movs	r1, r4
   1d7da:	4463      	add	r3, ip
   1d7dc:	6023      	str	r3, [r4, #0]
   1d7de:	9800      	ldr	r0, [sp, #0]
   1d7e0:	f7ff fcc4 	bl	1d16c <_fflush_r>
   1d7e4:	2800      	cmp	r0, #0
   1d7e6:	d000      	beq.n	1d7ea <__sfvwrite_r+0x2ba>
   1d7e8:	e741      	b.n	1d66e <__sfvwrite_r+0x13e>
   1d7ea:	9e01      	ldr	r6, [sp, #4]
   1d7ec:	e70e      	b.n	1d60c <__sfvwrite_r+0xdc>
   1d7ee:	9800      	ldr	r0, [sp, #0]
   1d7f0:	f000 fc5c 	bl	1e0ac <_realloc_r>
   1d7f4:	4680      	mov	r8, r0
   1d7f6:	2800      	cmp	r0, #0
   1d7f8:	d1c7      	bne.n	1d78a <__sfvwrite_r+0x25a>
   1d7fa:	9d00      	ldr	r5, [sp, #0]
   1d7fc:	6921      	ldr	r1, [r4, #16]
   1d7fe:	0028      	movs	r0, r5
   1d800:	f7ff fdb8 	bl	1d374 <_free_r>
   1d804:	2280      	movs	r2, #128	; 0x80
   1d806:	89a3      	ldrh	r3, [r4, #12]
   1d808:	4393      	bics	r3, r2
   1d80a:	3a74      	subs	r2, #116	; 0x74
   1d80c:	b21b      	sxth	r3, r3
   1d80e:	602a      	str	r2, [r5, #0]
   1d810:	e72f      	b.n	1d672 <__sfvwrite_r+0x142>
   1d812:	1c7d      	adds	r5, r7, #1
   1d814:	e6de      	b.n	1d5d4 <__sfvwrite_r+0xa4>
   1d816:	2001      	movs	r0, #1
   1d818:	4240      	negs	r0, r0
   1d81a:	e6bd      	b.n	1d598 <__sfvwrite_r+0x68>
   1d81c:	9a00      	ldr	r2, [sp, #0]
   1d81e:	330c      	adds	r3, #12
   1d820:	6013      	str	r3, [r2, #0]
   1d822:	220c      	movs	r2, #12
   1d824:	5ea3      	ldrsh	r3, [r4, r2]
   1d826:	e724      	b.n	1d672 <__sfvwrite_r+0x142>
   1d828:	7ffffc00 	.word	0x7ffffc00
   1d82c:	fffffb7f 	.word	0xfffffb7f
   1d830:	7fffffff 	.word	0x7fffffff

0001d834 <_fwalk_reent>:
   1d834:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1d836:	4647      	mov	r7, r8
   1d838:	46ce      	mov	lr, r9
   1d83a:	b580      	push	{r7, lr}
   1d83c:	27b8      	movs	r7, #184	; 0xb8
   1d83e:	4680      	mov	r8, r0
   1d840:	00bf      	lsls	r7, r7, #2
   1d842:	4447      	add	r7, r8
   1d844:	4689      	mov	r9, r1
   1d846:	2600      	movs	r6, #0
   1d848:	2f00      	cmp	r7, #0
   1d84a:	d014      	beq.n	1d876 <_fwalk_reent+0x42>
   1d84c:	687b      	ldr	r3, [r7, #4]
   1d84e:	68bc      	ldr	r4, [r7, #8]
   1d850:	1e5d      	subs	r5, r3, #1
   1d852:	d40d      	bmi.n	1d870 <_fwalk_reent+0x3c>
   1d854:	89a3      	ldrh	r3, [r4, #12]
   1d856:	2b01      	cmp	r3, #1
   1d858:	d907      	bls.n	1d86a <_fwalk_reent+0x36>
   1d85a:	220e      	movs	r2, #14
   1d85c:	5ea3      	ldrsh	r3, [r4, r2]
   1d85e:	3301      	adds	r3, #1
   1d860:	d003      	beq.n	1d86a <_fwalk_reent+0x36>
   1d862:	0021      	movs	r1, r4
   1d864:	4640      	mov	r0, r8
   1d866:	47c8      	blx	r9
   1d868:	4306      	orrs	r6, r0
   1d86a:	3468      	adds	r4, #104	; 0x68
   1d86c:	3d01      	subs	r5, #1
   1d86e:	d2f1      	bcs.n	1d854 <_fwalk_reent+0x20>
   1d870:	683f      	ldr	r7, [r7, #0]
   1d872:	2f00      	cmp	r7, #0
   1d874:	d1ea      	bne.n	1d84c <_fwalk_reent+0x18>
   1d876:	0030      	movs	r0, r6
   1d878:	bc0c      	pop	{r2, r3}
   1d87a:	4690      	mov	r8, r2
   1d87c:	4699      	mov	r9, r3
   1d87e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001d880 <_localeconv_r>:
   1d880:	4b04      	ldr	r3, [pc, #16]	; (1d894 <_localeconv_r+0x14>)
   1d882:	681b      	ldr	r3, [r3, #0]
   1d884:	6b58      	ldr	r0, [r3, #52]	; 0x34
   1d886:	2800      	cmp	r0, #0
   1d888:	d001      	beq.n	1d88e <_localeconv_r+0xe>
   1d88a:	30f0      	adds	r0, #240	; 0xf0
   1d88c:	4770      	bx	lr
   1d88e:	4802      	ldr	r0, [pc, #8]	; (1d898 <_localeconv_r+0x18>)
   1d890:	e7fb      	b.n	1d88a <_localeconv_r+0xa>
   1d892:	46c0      	nop			; (mov r8, r8)
   1d894:	20000018 	.word	0x20000018
   1d898:	20000448 	.word	0x20000448

0001d89c <__retarget_lock_init_recursive>:
   1d89c:	4770      	bx	lr
   1d89e:	46c0      	nop			; (mov r8, r8)

0001d8a0 <__retarget_lock_close_recursive>:
   1d8a0:	4770      	bx	lr
   1d8a2:	46c0      	nop			; (mov r8, r8)

0001d8a4 <__retarget_lock_acquire_recursive>:
   1d8a4:	4770      	bx	lr
   1d8a6:	46c0      	nop			; (mov r8, r8)

0001d8a8 <__retarget_lock_release_recursive>:
   1d8a8:	4770      	bx	lr
   1d8aa:	46c0      	nop			; (mov r8, r8)

0001d8ac <__swhatbuf_r>:
   1d8ac:	b570      	push	{r4, r5, r6, lr}
   1d8ae:	000c      	movs	r4, r1
   1d8b0:	001e      	movs	r6, r3
   1d8b2:	230e      	movs	r3, #14
   1d8b4:	5ec9      	ldrsh	r1, [r1, r3]
   1d8b6:	b090      	sub	sp, #64	; 0x40
   1d8b8:	0015      	movs	r5, r2
   1d8ba:	2900      	cmp	r1, #0
   1d8bc:	db15      	blt.n	1d8ea <__swhatbuf_r+0x3e>
   1d8be:	aa01      	add	r2, sp, #4
   1d8c0:	f000 fff8 	bl	1e8b4 <_fstat_r>
   1d8c4:	2800      	cmp	r0, #0
   1d8c6:	db10      	blt.n	1d8ea <__swhatbuf_r+0x3e>
   1d8c8:	22f0      	movs	r2, #240	; 0xf0
   1d8ca:	9b02      	ldr	r3, [sp, #8]
   1d8cc:	0212      	lsls	r2, r2, #8
   1d8ce:	4013      	ands	r3, r2
   1d8d0:	4a0d      	ldr	r2, [pc, #52]	; (1d908 <__swhatbuf_r+0x5c>)
   1d8d2:	2080      	movs	r0, #128	; 0x80
   1d8d4:	4694      	mov	ip, r2
   1d8d6:	4463      	add	r3, ip
   1d8d8:	425a      	negs	r2, r3
   1d8da:	4153      	adcs	r3, r2
   1d8dc:	6033      	str	r3, [r6, #0]
   1d8de:	2380      	movs	r3, #128	; 0x80
   1d8e0:	00db      	lsls	r3, r3, #3
   1d8e2:	602b      	str	r3, [r5, #0]
   1d8e4:	0100      	lsls	r0, r0, #4
   1d8e6:	b010      	add	sp, #64	; 0x40
   1d8e8:	bd70      	pop	{r4, r5, r6, pc}
   1d8ea:	2300      	movs	r3, #0
   1d8ec:	6033      	str	r3, [r6, #0]
   1d8ee:	89a3      	ldrh	r3, [r4, #12]
   1d8f0:	061b      	lsls	r3, r3, #24
   1d8f2:	d503      	bpl.n	1d8fc <__swhatbuf_r+0x50>
   1d8f4:	2340      	movs	r3, #64	; 0x40
   1d8f6:	2000      	movs	r0, #0
   1d8f8:	602b      	str	r3, [r5, #0]
   1d8fa:	e7f4      	b.n	1d8e6 <__swhatbuf_r+0x3a>
   1d8fc:	2380      	movs	r3, #128	; 0x80
   1d8fe:	00db      	lsls	r3, r3, #3
   1d900:	602b      	str	r3, [r5, #0]
   1d902:	2000      	movs	r0, #0
   1d904:	e7ef      	b.n	1d8e6 <__swhatbuf_r+0x3a>
   1d906:	46c0      	nop			; (mov r8, r8)
   1d908:	ffffe000 	.word	0xffffe000

0001d90c <__smakebuf_r>:
   1d90c:	b570      	push	{r4, r5, r6, lr}
   1d90e:	898b      	ldrh	r3, [r1, #12]
   1d910:	b082      	sub	sp, #8
   1d912:	0006      	movs	r6, r0
   1d914:	000c      	movs	r4, r1
   1d916:	079b      	lsls	r3, r3, #30
   1d918:	d507      	bpl.n	1d92a <__smakebuf_r+0x1e>
   1d91a:	0023      	movs	r3, r4
   1d91c:	3343      	adds	r3, #67	; 0x43
   1d91e:	6023      	str	r3, [r4, #0]
   1d920:	6123      	str	r3, [r4, #16]
   1d922:	2301      	movs	r3, #1
   1d924:	6163      	str	r3, [r4, #20]
   1d926:	b002      	add	sp, #8
   1d928:	bd70      	pop	{r4, r5, r6, pc}
   1d92a:	ab01      	add	r3, sp, #4
   1d92c:	466a      	mov	r2, sp
   1d92e:	f7ff ffbd 	bl	1d8ac <__swhatbuf_r>
   1d932:	9900      	ldr	r1, [sp, #0]
   1d934:	0005      	movs	r5, r0
   1d936:	0030      	movs	r0, r6
   1d938:	f7fb ff44 	bl	197c4 <_malloc_r>
   1d93c:	2800      	cmp	r0, #0
   1d93e:	d01e      	beq.n	1d97e <__smakebuf_r+0x72>
   1d940:	2280      	movs	r2, #128	; 0x80
   1d942:	4b15      	ldr	r3, [pc, #84]	; (1d998 <__smakebuf_r+0x8c>)
   1d944:	63f3      	str	r3, [r6, #60]	; 0x3c
   1d946:	89a3      	ldrh	r3, [r4, #12]
   1d948:	6020      	str	r0, [r4, #0]
   1d94a:	4313      	orrs	r3, r2
   1d94c:	9a00      	ldr	r2, [sp, #0]
   1d94e:	b21b      	sxth	r3, r3
   1d950:	6162      	str	r2, [r4, #20]
   1d952:	9a01      	ldr	r2, [sp, #4]
   1d954:	81a3      	strh	r3, [r4, #12]
   1d956:	6120      	str	r0, [r4, #16]
   1d958:	2a00      	cmp	r2, #0
   1d95a:	d102      	bne.n	1d962 <__smakebuf_r+0x56>
   1d95c:	432b      	orrs	r3, r5
   1d95e:	81a3      	strh	r3, [r4, #12]
   1d960:	e7e1      	b.n	1d926 <__smakebuf_r+0x1a>
   1d962:	230e      	movs	r3, #14
   1d964:	5ee1      	ldrsh	r1, [r4, r3]
   1d966:	0030      	movs	r0, r6
   1d968:	f000 ffb8 	bl	1e8dc <_isatty_r>
   1d96c:	2800      	cmp	r0, #0
   1d96e:	d010      	beq.n	1d992 <__smakebuf_r+0x86>
   1d970:	2203      	movs	r2, #3
   1d972:	89a3      	ldrh	r3, [r4, #12]
   1d974:	4393      	bics	r3, r2
   1d976:	2201      	movs	r2, #1
   1d978:	4313      	orrs	r3, r2
   1d97a:	b21b      	sxth	r3, r3
   1d97c:	e7ee      	b.n	1d95c <__smakebuf_r+0x50>
   1d97e:	220c      	movs	r2, #12
   1d980:	5ea3      	ldrsh	r3, [r4, r2]
   1d982:	059a      	lsls	r2, r3, #22
   1d984:	d4cf      	bmi.n	1d926 <__smakebuf_r+0x1a>
   1d986:	2203      	movs	r2, #3
   1d988:	4393      	bics	r3, r2
   1d98a:	2202      	movs	r2, #2
   1d98c:	4313      	orrs	r3, r2
   1d98e:	81a3      	strh	r3, [r4, #12]
   1d990:	e7c3      	b.n	1d91a <__smakebuf_r+0xe>
   1d992:	220c      	movs	r2, #12
   1d994:	5ea3      	ldrsh	r3, [r4, r2]
   1d996:	e7e1      	b.n	1d95c <__smakebuf_r+0x50>
   1d998:	0001d1c1 	.word	0x0001d1c1

0001d99c <memchr>:
   1d99c:	b570      	push	{r4, r5, r6, lr}
   1d99e:	b2cd      	uxtb	r5, r1
   1d9a0:	0783      	lsls	r3, r0, #30
   1d9a2:	d034      	beq.n	1da0e <memchr+0x72>
   1d9a4:	1e54      	subs	r4, r2, #1
   1d9a6:	2a00      	cmp	r2, #0
   1d9a8:	d01b      	beq.n	1d9e2 <memchr+0x46>
   1d9aa:	7803      	ldrb	r3, [r0, #0]
   1d9ac:	42ab      	cmp	r3, r5
   1d9ae:	d019      	beq.n	1d9e4 <memchr+0x48>
   1d9b0:	2203      	movs	r2, #3
   1d9b2:	e004      	b.n	1d9be <memchr+0x22>
   1d9b4:	3c01      	subs	r4, #1
   1d9b6:	d314      	bcc.n	1d9e2 <memchr+0x46>
   1d9b8:	7803      	ldrb	r3, [r0, #0]
   1d9ba:	42ab      	cmp	r3, r5
   1d9bc:	d012      	beq.n	1d9e4 <memchr+0x48>
   1d9be:	3001      	adds	r0, #1
   1d9c0:	4210      	tst	r0, r2
   1d9c2:	d1f7      	bne.n	1d9b4 <memchr+0x18>
   1d9c4:	2c03      	cmp	r4, #3
   1d9c6:	d80e      	bhi.n	1d9e6 <memchr+0x4a>
   1d9c8:	2c00      	cmp	r4, #0
   1d9ca:	d00a      	beq.n	1d9e2 <memchr+0x46>
   1d9cc:	7803      	ldrb	r3, [r0, #0]
   1d9ce:	42ab      	cmp	r3, r5
   1d9d0:	d008      	beq.n	1d9e4 <memchr+0x48>
   1d9d2:	1904      	adds	r4, r0, r4
   1d9d4:	e002      	b.n	1d9dc <memchr+0x40>
   1d9d6:	7803      	ldrb	r3, [r0, #0]
   1d9d8:	42ab      	cmp	r3, r5
   1d9da:	d003      	beq.n	1d9e4 <memchr+0x48>
   1d9dc:	3001      	adds	r0, #1
   1d9de:	4284      	cmp	r4, r0
   1d9e0:	d1f9      	bne.n	1d9d6 <memchr+0x3a>
   1d9e2:	2000      	movs	r0, #0
   1d9e4:	bd70      	pop	{r4, r5, r6, pc}
   1d9e6:	22ff      	movs	r2, #255	; 0xff
   1d9e8:	060b      	lsls	r3, r1, #24
   1d9ea:	0c1b      	lsrs	r3, r3, #16
   1d9ec:	4011      	ands	r1, r2
   1d9ee:	4319      	orrs	r1, r3
   1d9f0:	040b      	lsls	r3, r1, #16
   1d9f2:	4e08      	ldr	r6, [pc, #32]	; (1da14 <memchr+0x78>)
   1d9f4:	4319      	orrs	r1, r3
   1d9f6:	6803      	ldr	r3, [r0, #0]
   1d9f8:	4a07      	ldr	r2, [pc, #28]	; (1da18 <memchr+0x7c>)
   1d9fa:	404b      	eors	r3, r1
   1d9fc:	189a      	adds	r2, r3, r2
   1d9fe:	439a      	bics	r2, r3
   1da00:	4232      	tst	r2, r6
   1da02:	d1e3      	bne.n	1d9cc <memchr+0x30>
   1da04:	3c04      	subs	r4, #4
   1da06:	3004      	adds	r0, #4
   1da08:	2c03      	cmp	r4, #3
   1da0a:	d8f4      	bhi.n	1d9f6 <memchr+0x5a>
   1da0c:	e7dc      	b.n	1d9c8 <memchr+0x2c>
   1da0e:	0014      	movs	r4, r2
   1da10:	e7d8      	b.n	1d9c4 <memchr+0x28>
   1da12:	46c0      	nop			; (mov r8, r8)
   1da14:	80808080 	.word	0x80808080
   1da18:	fefefeff 	.word	0xfefefeff

0001da1c <_Balloc>:
   1da1c:	b570      	push	{r4, r5, r6, lr}
   1da1e:	0004      	movs	r4, r0
   1da20:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
   1da22:	000d      	movs	r5, r1
   1da24:	2800      	cmp	r0, #0
   1da26:	d00a      	beq.n	1da3e <_Balloc+0x22>
   1da28:	00ab      	lsls	r3, r5, #2
   1da2a:	18c3      	adds	r3, r0, r3
   1da2c:	6818      	ldr	r0, [r3, #0]
   1da2e:	2800      	cmp	r0, #0
   1da30:	d00f      	beq.n	1da52 <_Balloc+0x36>
   1da32:	6802      	ldr	r2, [r0, #0]
   1da34:	601a      	str	r2, [r3, #0]
   1da36:	2300      	movs	r3, #0
   1da38:	6103      	str	r3, [r0, #16]
   1da3a:	60c3      	str	r3, [r0, #12]
   1da3c:	bd70      	pop	{r4, r5, r6, pc}
   1da3e:	2221      	movs	r2, #33	; 0x21
   1da40:	2104      	movs	r1, #4
   1da42:	0020      	movs	r0, r4
   1da44:	f000 fe18 	bl	1e678 <_calloc_r>
   1da48:	64e0      	str	r0, [r4, #76]	; 0x4c
   1da4a:	2800      	cmp	r0, #0
   1da4c:	d1ec      	bne.n	1da28 <_Balloc+0xc>
   1da4e:	2000      	movs	r0, #0
   1da50:	e7f4      	b.n	1da3c <_Balloc+0x20>
   1da52:	2601      	movs	r6, #1
   1da54:	40ae      	lsls	r6, r5
   1da56:	1d72      	adds	r2, r6, #5
   1da58:	0092      	lsls	r2, r2, #2
   1da5a:	2101      	movs	r1, #1
   1da5c:	0020      	movs	r0, r4
   1da5e:	f000 fe0b 	bl	1e678 <_calloc_r>
   1da62:	2800      	cmp	r0, #0
   1da64:	d0f3      	beq.n	1da4e <_Balloc+0x32>
   1da66:	6045      	str	r5, [r0, #4]
   1da68:	6086      	str	r6, [r0, #8]
   1da6a:	e7e4      	b.n	1da36 <_Balloc+0x1a>

0001da6c <_Bfree>:
   1da6c:	2900      	cmp	r1, #0
   1da6e:	d006      	beq.n	1da7e <_Bfree+0x12>
   1da70:	684b      	ldr	r3, [r1, #4]
   1da72:	009a      	lsls	r2, r3, #2
   1da74:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   1da76:	189b      	adds	r3, r3, r2
   1da78:	681a      	ldr	r2, [r3, #0]
   1da7a:	600a      	str	r2, [r1, #0]
   1da7c:	6019      	str	r1, [r3, #0]
   1da7e:	4770      	bx	lr

0001da80 <__multadd>:
   1da80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1da82:	46ce      	mov	lr, r9
   1da84:	4647      	mov	r7, r8
   1da86:	4681      	mov	r9, r0
   1da88:	0008      	movs	r0, r1
   1da8a:	b580      	push	{r7, lr}
   1da8c:	000d      	movs	r5, r1
   1da8e:	690c      	ldr	r4, [r1, #16]
   1da90:	001f      	movs	r7, r3
   1da92:	2100      	movs	r1, #0
   1da94:	3014      	adds	r0, #20
   1da96:	6803      	ldr	r3, [r0, #0]
   1da98:	3101      	adds	r1, #1
   1da9a:	041e      	lsls	r6, r3, #16
   1da9c:	0c36      	lsrs	r6, r6, #16
   1da9e:	4356      	muls	r6, r2
   1daa0:	0c1b      	lsrs	r3, r3, #16
   1daa2:	4353      	muls	r3, r2
   1daa4:	19f6      	adds	r6, r6, r7
   1daa6:	0c37      	lsrs	r7, r6, #16
   1daa8:	19db      	adds	r3, r3, r7
   1daaa:	0436      	lsls	r6, r6, #16
   1daac:	0c1f      	lsrs	r7, r3, #16
   1daae:	0c36      	lsrs	r6, r6, #16
   1dab0:	041b      	lsls	r3, r3, #16
   1dab2:	199b      	adds	r3, r3, r6
   1dab4:	c008      	stmia	r0!, {r3}
   1dab6:	428c      	cmp	r4, r1
   1dab8:	dced      	bgt.n	1da96 <__multadd+0x16>
   1daba:	2f00      	cmp	r7, #0
   1dabc:	d008      	beq.n	1dad0 <__multadd+0x50>
   1dabe:	68ab      	ldr	r3, [r5, #8]
   1dac0:	429c      	cmp	r4, r3
   1dac2:	da0a      	bge.n	1dada <__multadd+0x5a>
   1dac4:	1d23      	adds	r3, r4, #4
   1dac6:	009b      	lsls	r3, r3, #2
   1dac8:	18eb      	adds	r3, r5, r3
   1daca:	3401      	adds	r4, #1
   1dacc:	605f      	str	r7, [r3, #4]
   1dace:	612c      	str	r4, [r5, #16]
   1dad0:	0028      	movs	r0, r5
   1dad2:	bc0c      	pop	{r2, r3}
   1dad4:	4690      	mov	r8, r2
   1dad6:	4699      	mov	r9, r3
   1dad8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1dada:	686b      	ldr	r3, [r5, #4]
   1dadc:	4648      	mov	r0, r9
   1dade:	1c59      	adds	r1, r3, #1
   1dae0:	f7ff ff9c 	bl	1da1c <_Balloc>
   1dae4:	0029      	movs	r1, r5
   1dae6:	692b      	ldr	r3, [r5, #16]
   1dae8:	4680      	mov	r8, r0
   1daea:	1c9a      	adds	r2, r3, #2
   1daec:	0092      	lsls	r2, r2, #2
   1daee:	310c      	adds	r1, #12
   1daf0:	300c      	adds	r0, #12
   1daf2:	f7fc f957 	bl	19da4 <memcpy>
   1daf6:	686b      	ldr	r3, [r5, #4]
   1daf8:	009a      	lsls	r2, r3, #2
   1dafa:	464b      	mov	r3, r9
   1dafc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   1dafe:	189b      	adds	r3, r3, r2
   1db00:	681a      	ldr	r2, [r3, #0]
   1db02:	602a      	str	r2, [r5, #0]
   1db04:	601d      	str	r5, [r3, #0]
   1db06:	4645      	mov	r5, r8
   1db08:	e7dc      	b.n	1dac4 <__multadd+0x44>
   1db0a:	46c0      	nop			; (mov r8, r8)

0001db0c <__hi0bits>:
   1db0c:	0003      	movs	r3, r0
   1db0e:	0c02      	lsrs	r2, r0, #16
   1db10:	2000      	movs	r0, #0
   1db12:	2a00      	cmp	r2, #0
   1db14:	d101      	bne.n	1db1a <__hi0bits+0xe>
   1db16:	041b      	lsls	r3, r3, #16
   1db18:	3010      	adds	r0, #16
   1db1a:	0e1a      	lsrs	r2, r3, #24
   1db1c:	d101      	bne.n	1db22 <__hi0bits+0x16>
   1db1e:	3008      	adds	r0, #8
   1db20:	021b      	lsls	r3, r3, #8
   1db22:	0f1a      	lsrs	r2, r3, #28
   1db24:	d101      	bne.n	1db2a <__hi0bits+0x1e>
   1db26:	3004      	adds	r0, #4
   1db28:	011b      	lsls	r3, r3, #4
   1db2a:	0f9a      	lsrs	r2, r3, #30
   1db2c:	d101      	bne.n	1db32 <__hi0bits+0x26>
   1db2e:	3002      	adds	r0, #2
   1db30:	009b      	lsls	r3, r3, #2
   1db32:	2b00      	cmp	r3, #0
   1db34:	db03      	blt.n	1db3e <__hi0bits+0x32>
   1db36:	3001      	adds	r0, #1
   1db38:	005b      	lsls	r3, r3, #1
   1db3a:	d400      	bmi.n	1db3e <__hi0bits+0x32>
   1db3c:	2020      	movs	r0, #32
   1db3e:	4770      	bx	lr

0001db40 <__lo0bits>:
   1db40:	6803      	ldr	r3, [r0, #0]
   1db42:	075a      	lsls	r2, r3, #29
   1db44:	d009      	beq.n	1db5a <__lo0bits+0x1a>
   1db46:	2200      	movs	r2, #0
   1db48:	07d9      	lsls	r1, r3, #31
   1db4a:	d404      	bmi.n	1db56 <__lo0bits+0x16>
   1db4c:	079a      	lsls	r2, r3, #30
   1db4e:	d420      	bmi.n	1db92 <__lo0bits+0x52>
   1db50:	2202      	movs	r2, #2
   1db52:	089b      	lsrs	r3, r3, #2
   1db54:	6003      	str	r3, [r0, #0]
   1db56:	0010      	movs	r0, r2
   1db58:	4770      	bx	lr
   1db5a:	0419      	lsls	r1, r3, #16
   1db5c:	2200      	movs	r2, #0
   1db5e:	2900      	cmp	r1, #0
   1db60:	d101      	bne.n	1db66 <__lo0bits+0x26>
   1db62:	0c1b      	lsrs	r3, r3, #16
   1db64:	3210      	adds	r2, #16
   1db66:	21ff      	movs	r1, #255	; 0xff
   1db68:	4219      	tst	r1, r3
   1db6a:	d101      	bne.n	1db70 <__lo0bits+0x30>
   1db6c:	3208      	adds	r2, #8
   1db6e:	0a1b      	lsrs	r3, r3, #8
   1db70:	0719      	lsls	r1, r3, #28
   1db72:	d101      	bne.n	1db78 <__lo0bits+0x38>
   1db74:	3204      	adds	r2, #4
   1db76:	091b      	lsrs	r3, r3, #4
   1db78:	0799      	lsls	r1, r3, #30
   1db7a:	d101      	bne.n	1db80 <__lo0bits+0x40>
   1db7c:	3202      	adds	r2, #2
   1db7e:	089b      	lsrs	r3, r3, #2
   1db80:	07d9      	lsls	r1, r3, #31
   1db82:	d404      	bmi.n	1db8e <__lo0bits+0x4e>
   1db84:	085b      	lsrs	r3, r3, #1
   1db86:	d101      	bne.n	1db8c <__lo0bits+0x4c>
   1db88:	2220      	movs	r2, #32
   1db8a:	e7e4      	b.n	1db56 <__lo0bits+0x16>
   1db8c:	3201      	adds	r2, #1
   1db8e:	6003      	str	r3, [r0, #0]
   1db90:	e7e1      	b.n	1db56 <__lo0bits+0x16>
   1db92:	085b      	lsrs	r3, r3, #1
   1db94:	6003      	str	r3, [r0, #0]
   1db96:	2201      	movs	r2, #1
   1db98:	e7dd      	b.n	1db56 <__lo0bits+0x16>
   1db9a:	46c0      	nop			; (mov r8, r8)

0001db9c <__i2b>:
   1db9c:	b510      	push	{r4, lr}
   1db9e:	000c      	movs	r4, r1
   1dba0:	2101      	movs	r1, #1
   1dba2:	f7ff ff3b 	bl	1da1c <_Balloc>
   1dba6:	2301      	movs	r3, #1
   1dba8:	6144      	str	r4, [r0, #20]
   1dbaa:	6103      	str	r3, [r0, #16]
   1dbac:	bd10      	pop	{r4, pc}
   1dbae:	46c0      	nop			; (mov r8, r8)

0001dbb0 <__multiply>:
   1dbb0:	b5f0      	push	{r4, r5, r6, r7, lr}
   1dbb2:	4657      	mov	r7, sl
   1dbb4:	464e      	mov	r6, r9
   1dbb6:	4645      	mov	r5, r8
   1dbb8:	46de      	mov	lr, fp
   1dbba:	b5e0      	push	{r5, r6, r7, lr}
   1dbbc:	6914      	ldr	r4, [r2, #16]
   1dbbe:	690e      	ldr	r6, [r1, #16]
   1dbc0:	b085      	sub	sp, #20
   1dbc2:	000f      	movs	r7, r1
   1dbc4:	0015      	movs	r5, r2
   1dbc6:	42a6      	cmp	r6, r4
   1dbc8:	da04      	bge.n	1dbd4 <__multiply+0x24>
   1dbca:	0033      	movs	r3, r6
   1dbcc:	0017      	movs	r7, r2
   1dbce:	0026      	movs	r6, r4
   1dbd0:	000d      	movs	r5, r1
   1dbd2:	001c      	movs	r4, r3
   1dbd4:	1933      	adds	r3, r6, r4
   1dbd6:	4698      	mov	r8, r3
   1dbd8:	68bb      	ldr	r3, [r7, #8]
   1dbda:	6879      	ldr	r1, [r7, #4]
   1dbdc:	4598      	cmp	r8, r3
   1dbde:	dd00      	ble.n	1dbe2 <__multiply+0x32>
   1dbe0:	3101      	adds	r1, #1
   1dbe2:	f7ff ff1b 	bl	1da1c <_Balloc>
   1dbe6:	2214      	movs	r2, #20
   1dbe8:	0003      	movs	r3, r0
   1dbea:	4694      	mov	ip, r2
   1dbec:	4463      	add	r3, ip
   1dbee:	469b      	mov	fp, r3
   1dbf0:	4643      	mov	r3, r8
   1dbf2:	009b      	lsls	r3, r3, #2
   1dbf4:	445b      	add	r3, fp
   1dbf6:	0019      	movs	r1, r3
   1dbf8:	9302      	str	r3, [sp, #8]
   1dbfa:	9003      	str	r0, [sp, #12]
   1dbfc:	465b      	mov	r3, fp
   1dbfe:	2200      	movs	r2, #0
   1dc00:	458b      	cmp	fp, r1
   1dc02:	d203      	bcs.n	1dc0c <__multiply+0x5c>
   1dc04:	9902      	ldr	r1, [sp, #8]
   1dc06:	c304      	stmia	r3!, {r2}
   1dc08:	4299      	cmp	r1, r3
   1dc0a:	d8fc      	bhi.n	1dc06 <__multiply+0x56>
   1dc0c:	2314      	movs	r3, #20
   1dc0e:	00a4      	lsls	r4, r4, #2
   1dc10:	469a      	mov	sl, r3
   1dc12:	3714      	adds	r7, #20
   1dc14:	0023      	movs	r3, r4
   1dc16:	46bc      	mov	ip, r7
   1dc18:	44aa      	add	sl, r5
   1dc1a:	00b6      	lsls	r6, r6, #2
   1dc1c:	4453      	add	r3, sl
   1dc1e:	9700      	str	r7, [sp, #0]
   1dc20:	44b4      	add	ip, r6
   1dc22:	9301      	str	r3, [sp, #4]
   1dc24:	459a      	cmp	sl, r3
   1dc26:	d24f      	bcs.n	1dcc8 <__multiply+0x118>
   1dc28:	4653      	mov	r3, sl
   1dc2a:	681b      	ldr	r3, [r3, #0]
   1dc2c:	041e      	lsls	r6, r3, #16
   1dc2e:	0c36      	lsrs	r6, r6, #16
   1dc30:	d020      	beq.n	1dc74 <__multiply+0xc4>
   1dc32:	465c      	mov	r4, fp
   1dc34:	2700      	movs	r7, #0
   1dc36:	9d00      	ldr	r5, [sp, #0]
   1dc38:	0021      	movs	r1, r4
   1dc3a:	cc08      	ldmia	r4!, {r3}
   1dc3c:	cd04      	ldmia	r5!, {r2}
   1dc3e:	4699      	mov	r9, r3
   1dc40:	4648      	mov	r0, r9
   1dc42:	0413      	lsls	r3, r2, #16
   1dc44:	0c1b      	lsrs	r3, r3, #16
   1dc46:	4373      	muls	r3, r6
   1dc48:	0400      	lsls	r0, r0, #16
   1dc4a:	0c00      	lsrs	r0, r0, #16
   1dc4c:	181b      	adds	r3, r3, r0
   1dc4e:	19d8      	adds	r0, r3, r7
   1dc50:	0c13      	lsrs	r3, r2, #16
   1dc52:	464a      	mov	r2, r9
   1dc54:	4373      	muls	r3, r6
   1dc56:	0c12      	lsrs	r2, r2, #16
   1dc58:	189b      	adds	r3, r3, r2
   1dc5a:	0c02      	lsrs	r2, r0, #16
   1dc5c:	189b      	adds	r3, r3, r2
   1dc5e:	0402      	lsls	r2, r0, #16
   1dc60:	0c1f      	lsrs	r7, r3, #16
   1dc62:	0c12      	lsrs	r2, r2, #16
   1dc64:	041b      	lsls	r3, r3, #16
   1dc66:	4313      	orrs	r3, r2
   1dc68:	600b      	str	r3, [r1, #0]
   1dc6a:	45ac      	cmp	ip, r5
   1dc6c:	d8e4      	bhi.n	1dc38 <__multiply+0x88>
   1dc6e:	4653      	mov	r3, sl
   1dc70:	6027      	str	r7, [r4, #0]
   1dc72:	681b      	ldr	r3, [r3, #0]
   1dc74:	0c1e      	lsrs	r6, r3, #16
   1dc76:	d020      	beq.n	1dcba <__multiply+0x10a>
   1dc78:	465b      	mov	r3, fp
   1dc7a:	2100      	movs	r1, #0
   1dc7c:	681b      	ldr	r3, [r3, #0]
   1dc7e:	465c      	mov	r4, fp
   1dc80:	0018      	movs	r0, r3
   1dc82:	000f      	movs	r7, r1
   1dc84:	4662      	mov	r2, ip
   1dc86:	9d00      	ldr	r5, [sp, #0]
   1dc88:	8829      	ldrh	r1, [r5, #0]
   1dc8a:	0c00      	lsrs	r0, r0, #16
   1dc8c:	4371      	muls	r1, r6
   1dc8e:	1809      	adds	r1, r1, r0
   1dc90:	19c9      	adds	r1, r1, r7
   1dc92:	041b      	lsls	r3, r3, #16
   1dc94:	0408      	lsls	r0, r1, #16
   1dc96:	0c1b      	lsrs	r3, r3, #16
   1dc98:	4303      	orrs	r3, r0
   1dc9a:	6023      	str	r3, [r4, #0]
   1dc9c:	cd08      	ldmia	r5!, {r3}
   1dc9e:	6860      	ldr	r0, [r4, #4]
   1dca0:	0c1b      	lsrs	r3, r3, #16
   1dca2:	4373      	muls	r3, r6
   1dca4:	0407      	lsls	r7, r0, #16
   1dca6:	0c3f      	lsrs	r7, r7, #16
   1dca8:	19db      	adds	r3, r3, r7
   1dcaa:	0c09      	lsrs	r1, r1, #16
   1dcac:	185b      	adds	r3, r3, r1
   1dcae:	0c1f      	lsrs	r7, r3, #16
   1dcb0:	3404      	adds	r4, #4
   1dcb2:	42aa      	cmp	r2, r5
   1dcb4:	d8e8      	bhi.n	1dc88 <__multiply+0xd8>
   1dcb6:	4694      	mov	ip, r2
   1dcb8:	6023      	str	r3, [r4, #0]
   1dcba:	2304      	movs	r3, #4
   1dcbc:	4699      	mov	r9, r3
   1dcbe:	9b01      	ldr	r3, [sp, #4]
   1dcc0:	44ca      	add	sl, r9
   1dcc2:	44cb      	add	fp, r9
   1dcc4:	4553      	cmp	r3, sl
   1dcc6:	d8af      	bhi.n	1dc28 <__multiply+0x78>
   1dcc8:	4643      	mov	r3, r8
   1dcca:	2b00      	cmp	r3, #0
   1dccc:	dd0e      	ble.n	1dcec <__multiply+0x13c>
   1dcce:	9b02      	ldr	r3, [sp, #8]
   1dcd0:	3b04      	subs	r3, #4
   1dcd2:	681a      	ldr	r2, [r3, #0]
   1dcd4:	2a00      	cmp	r2, #0
   1dcd6:	d109      	bne.n	1dcec <__multiply+0x13c>
   1dcd8:	4642      	mov	r2, r8
   1dcda:	e003      	b.n	1dce4 <__multiply+0x134>
   1dcdc:	3b04      	subs	r3, #4
   1dcde:	6819      	ldr	r1, [r3, #0]
   1dce0:	2900      	cmp	r1, #0
   1dce2:	d102      	bne.n	1dcea <__multiply+0x13a>
   1dce4:	3a01      	subs	r2, #1
   1dce6:	2a00      	cmp	r2, #0
   1dce8:	d1f8      	bne.n	1dcdc <__multiply+0x12c>
   1dcea:	4690      	mov	r8, r2
   1dcec:	9b03      	ldr	r3, [sp, #12]
   1dcee:	4642      	mov	r2, r8
   1dcf0:	0018      	movs	r0, r3
   1dcf2:	611a      	str	r2, [r3, #16]
   1dcf4:	b005      	add	sp, #20
   1dcf6:	bc3c      	pop	{r2, r3, r4, r5}
   1dcf8:	4690      	mov	r8, r2
   1dcfa:	4699      	mov	r9, r3
   1dcfc:	46a2      	mov	sl, r4
   1dcfe:	46ab      	mov	fp, r5
   1dd00:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1dd02:	46c0      	nop			; (mov r8, r8)

0001dd04 <__pow5mult>:
   1dd04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1dd06:	4647      	mov	r7, r8
   1dd08:	46ce      	mov	lr, r9
   1dd0a:	2303      	movs	r3, #3
   1dd0c:	b580      	push	{r7, lr}
   1dd0e:	4680      	mov	r8, r0
   1dd10:	000f      	movs	r7, r1
   1dd12:	0014      	movs	r4, r2
   1dd14:	4013      	ands	r3, r2
   1dd16:	d13a      	bne.n	1dd8e <__pow5mult+0x8a>
   1dd18:	10a4      	asrs	r4, r4, #2
   1dd1a:	003e      	movs	r6, r7
   1dd1c:	2c00      	cmp	r4, #0
   1dd1e:	d025      	beq.n	1dd6c <__pow5mult+0x68>
   1dd20:	4643      	mov	r3, r8
   1dd22:	6c9d      	ldr	r5, [r3, #72]	; 0x48
   1dd24:	2d00      	cmp	r5, #0
   1dd26:	d03b      	beq.n	1dda0 <__pow5mult+0x9c>
   1dd28:	003e      	movs	r6, r7
   1dd2a:	2300      	movs	r3, #0
   1dd2c:	2701      	movs	r7, #1
   1dd2e:	4699      	mov	r9, r3
   1dd30:	4227      	tst	r7, r4
   1dd32:	d107      	bne.n	1dd44 <__pow5mult+0x40>
   1dd34:	1064      	asrs	r4, r4, #1
   1dd36:	d019      	beq.n	1dd6c <__pow5mult+0x68>
   1dd38:	6828      	ldr	r0, [r5, #0]
   1dd3a:	2800      	cmp	r0, #0
   1dd3c:	d01b      	beq.n	1dd76 <__pow5mult+0x72>
   1dd3e:	0005      	movs	r5, r0
   1dd40:	4227      	tst	r7, r4
   1dd42:	d0f7      	beq.n	1dd34 <__pow5mult+0x30>
   1dd44:	002a      	movs	r2, r5
   1dd46:	0031      	movs	r1, r6
   1dd48:	4640      	mov	r0, r8
   1dd4a:	f7ff ff31 	bl	1dbb0 <__multiply>
   1dd4e:	2e00      	cmp	r6, #0
   1dd50:	d01b      	beq.n	1dd8a <__pow5mult+0x86>
   1dd52:	4642      	mov	r2, r8
   1dd54:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
   1dd56:	6873      	ldr	r3, [r6, #4]
   1dd58:	4694      	mov	ip, r2
   1dd5a:	009b      	lsls	r3, r3, #2
   1dd5c:	4463      	add	r3, ip
   1dd5e:	681a      	ldr	r2, [r3, #0]
   1dd60:	1064      	asrs	r4, r4, #1
   1dd62:	6032      	str	r2, [r6, #0]
   1dd64:	601e      	str	r6, [r3, #0]
   1dd66:	0006      	movs	r6, r0
   1dd68:	2c00      	cmp	r4, #0
   1dd6a:	d1e5      	bne.n	1dd38 <__pow5mult+0x34>
   1dd6c:	0030      	movs	r0, r6
   1dd6e:	bc0c      	pop	{r2, r3}
   1dd70:	4690      	mov	r8, r2
   1dd72:	4699      	mov	r9, r3
   1dd74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1dd76:	002a      	movs	r2, r5
   1dd78:	0029      	movs	r1, r5
   1dd7a:	4640      	mov	r0, r8
   1dd7c:	f7ff ff18 	bl	1dbb0 <__multiply>
   1dd80:	464b      	mov	r3, r9
   1dd82:	6028      	str	r0, [r5, #0]
   1dd84:	6003      	str	r3, [r0, #0]
   1dd86:	0005      	movs	r5, r0
   1dd88:	e7da      	b.n	1dd40 <__pow5mult+0x3c>
   1dd8a:	0006      	movs	r6, r0
   1dd8c:	e7d2      	b.n	1dd34 <__pow5mult+0x30>
   1dd8e:	4a0b      	ldr	r2, [pc, #44]	; (1ddbc <__pow5mult+0xb8>)
   1dd90:	3b01      	subs	r3, #1
   1dd92:	009b      	lsls	r3, r3, #2
   1dd94:	589a      	ldr	r2, [r3, r2]
   1dd96:	2300      	movs	r3, #0
   1dd98:	f7ff fe72 	bl	1da80 <__multadd>
   1dd9c:	0007      	movs	r7, r0
   1dd9e:	e7bb      	b.n	1dd18 <__pow5mult+0x14>
   1dda0:	2101      	movs	r1, #1
   1dda2:	4640      	mov	r0, r8
   1dda4:	f7ff fe3a 	bl	1da1c <_Balloc>
   1dda8:	4b05      	ldr	r3, [pc, #20]	; (1ddc0 <__pow5mult+0xbc>)
   1ddaa:	0005      	movs	r5, r0
   1ddac:	6143      	str	r3, [r0, #20]
   1ddae:	2301      	movs	r3, #1
   1ddb0:	6103      	str	r3, [r0, #16]
   1ddb2:	4643      	mov	r3, r8
   1ddb4:	6498      	str	r0, [r3, #72]	; 0x48
   1ddb6:	2300      	movs	r3, #0
   1ddb8:	6003      	str	r3, [r0, #0]
   1ddba:	e7b5      	b.n	1dd28 <__pow5mult+0x24>
   1ddbc:	00020980 	.word	0x00020980
   1ddc0:	00000271 	.word	0x00000271

0001ddc4 <__lshift>:
   1ddc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1ddc6:	464e      	mov	r6, r9
   1ddc8:	4645      	mov	r5, r8
   1ddca:	46de      	mov	lr, fp
   1ddcc:	4657      	mov	r7, sl
   1ddce:	b5e0      	push	{r5, r6, r7, lr}
   1ddd0:	000e      	movs	r6, r1
   1ddd2:	6933      	ldr	r3, [r6, #16]
   1ddd4:	1154      	asrs	r4, r2, #5
   1ddd6:	4698      	mov	r8, r3
   1ddd8:	44a0      	add	r8, r4
   1ddda:	4643      	mov	r3, r8
   1dddc:	1c5d      	adds	r5, r3, #1
   1ddde:	68b3      	ldr	r3, [r6, #8]
   1dde0:	4683      	mov	fp, r0
   1dde2:	4691      	mov	r9, r2
   1dde4:	6849      	ldr	r1, [r1, #4]
   1dde6:	429d      	cmp	r5, r3
   1dde8:	dd03      	ble.n	1ddf2 <__lshift+0x2e>
   1ddea:	3101      	adds	r1, #1
   1ddec:	005b      	lsls	r3, r3, #1
   1ddee:	429d      	cmp	r5, r3
   1ddf0:	dcfb      	bgt.n	1ddea <__lshift+0x26>
   1ddf2:	4658      	mov	r0, fp
   1ddf4:	f7ff fe12 	bl	1da1c <_Balloc>
   1ddf8:	0003      	movs	r3, r0
   1ddfa:	4684      	mov	ip, r0
   1ddfc:	3314      	adds	r3, #20
   1ddfe:	2c00      	cmp	r4, #0
   1de00:	dd06      	ble.n	1de10 <__lshift+0x4c>
   1de02:	2100      	movs	r1, #0
   1de04:	00a4      	lsls	r4, r4, #2
   1de06:	001a      	movs	r2, r3
   1de08:	191b      	adds	r3, r3, r4
   1de0a:	c202      	stmia	r2!, {r1}
   1de0c:	4293      	cmp	r3, r2
   1de0e:	d1fc      	bne.n	1de0a <__lshift+0x46>
   1de10:	6932      	ldr	r2, [r6, #16]
   1de12:	4648      	mov	r0, r9
   1de14:	0097      	lsls	r7, r2, #2
   1de16:	0031      	movs	r1, r6
   1de18:	221f      	movs	r2, #31
   1de1a:	3114      	adds	r1, #20
   1de1c:	4010      	ands	r0, r2
   1de1e:	19cf      	adds	r7, r1, r7
   1de20:	4681      	mov	r9, r0
   1de22:	2800      	cmp	r0, #0
   1de24:	d025      	beq.n	1de72 <__lshift+0xae>
   1de26:	2220      	movs	r2, #32
   1de28:	1a12      	subs	r2, r2, r0
   1de2a:	4692      	mov	sl, r2
   1de2c:	2200      	movs	r2, #0
   1de2e:	4648      	mov	r0, r9
   1de30:	680c      	ldr	r4, [r1, #0]
   1de32:	4084      	lsls	r4, r0
   1de34:	4650      	mov	r0, sl
   1de36:	4314      	orrs	r4, r2
   1de38:	601c      	str	r4, [r3, #0]
   1de3a:	c904      	ldmia	r1!, {r2}
   1de3c:	3304      	adds	r3, #4
   1de3e:	40c2      	lsrs	r2, r0
   1de40:	428f      	cmp	r7, r1
   1de42:	d8f4      	bhi.n	1de2e <__lshift+0x6a>
   1de44:	601a      	str	r2, [r3, #0]
   1de46:	2a00      	cmp	r2, #0
   1de48:	d001      	beq.n	1de4e <__lshift+0x8a>
   1de4a:	4645      	mov	r5, r8
   1de4c:	3502      	adds	r5, #2
   1de4e:	4663      	mov	r3, ip
   1de50:	3d01      	subs	r5, #1
   1de52:	611d      	str	r5, [r3, #16]
   1de54:	6873      	ldr	r3, [r6, #4]
   1de56:	4660      	mov	r0, ip
   1de58:	009a      	lsls	r2, r3, #2
   1de5a:	465b      	mov	r3, fp
   1de5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   1de5e:	189b      	adds	r3, r3, r2
   1de60:	681a      	ldr	r2, [r3, #0]
   1de62:	6032      	str	r2, [r6, #0]
   1de64:	601e      	str	r6, [r3, #0]
   1de66:	bc3c      	pop	{r2, r3, r4, r5}
   1de68:	4690      	mov	r8, r2
   1de6a:	4699      	mov	r9, r3
   1de6c:	46a2      	mov	sl, r4
   1de6e:	46ab      	mov	fp, r5
   1de70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1de72:	c904      	ldmia	r1!, {r2}
   1de74:	c304      	stmia	r3!, {r2}
   1de76:	428f      	cmp	r7, r1
   1de78:	d9e9      	bls.n	1de4e <__lshift+0x8a>
   1de7a:	c904      	ldmia	r1!, {r2}
   1de7c:	c304      	stmia	r3!, {r2}
   1de7e:	428f      	cmp	r7, r1
   1de80:	d8f7      	bhi.n	1de72 <__lshift+0xae>
   1de82:	e7e4      	b.n	1de4e <__lshift+0x8a>

0001de84 <__mcmp>:
   1de84:	690a      	ldr	r2, [r1, #16]
   1de86:	6903      	ldr	r3, [r0, #16]
   1de88:	b530      	push	{r4, r5, lr}
   1de8a:	0005      	movs	r5, r0
   1de8c:	1a98      	subs	r0, r3, r2
   1de8e:	d111      	bne.n	1deb4 <__mcmp+0x30>
   1de90:	0092      	lsls	r2, r2, #2
   1de92:	3514      	adds	r5, #20
   1de94:	3114      	adds	r1, #20
   1de96:	18ab      	adds	r3, r5, r2
   1de98:	1889      	adds	r1, r1, r2
   1de9a:	e001      	b.n	1dea0 <__mcmp+0x1c>
   1de9c:	429d      	cmp	r5, r3
   1de9e:	d209      	bcs.n	1deb4 <__mcmp+0x30>
   1dea0:	3b04      	subs	r3, #4
   1dea2:	3904      	subs	r1, #4
   1dea4:	681c      	ldr	r4, [r3, #0]
   1dea6:	680a      	ldr	r2, [r1, #0]
   1dea8:	4294      	cmp	r4, r2
   1deaa:	d0f7      	beq.n	1de9c <__mcmp+0x18>
   1deac:	4294      	cmp	r4, r2
   1deae:	4180      	sbcs	r0, r0
   1deb0:	2201      	movs	r2, #1
   1deb2:	4310      	orrs	r0, r2
   1deb4:	bd30      	pop	{r4, r5, pc}
   1deb6:	46c0      	nop			; (mov r8, r8)

0001deb8 <__mdiff>:
   1deb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1deba:	4645      	mov	r5, r8
   1debc:	46de      	mov	lr, fp
   1debe:	4657      	mov	r7, sl
   1dec0:	464e      	mov	r6, r9
   1dec2:	0014      	movs	r4, r2
   1dec4:	690b      	ldr	r3, [r1, #16]
   1dec6:	6912      	ldr	r2, [r2, #16]
   1dec8:	b5e0      	push	{r5, r6, r7, lr}
   1deca:	4688      	mov	r8, r1
   1decc:	1a9d      	subs	r5, r3, r2
   1dece:	d11a      	bne.n	1df06 <__mdiff+0x4e>
   1ded0:	000f      	movs	r7, r1
   1ded2:	2114      	movs	r1, #20
   1ded4:	468c      	mov	ip, r1
   1ded6:	0092      	lsls	r2, r2, #2
   1ded8:	3714      	adds	r7, #20
   1deda:	44a4      	add	ip, r4
   1dedc:	18bb      	adds	r3, r7, r2
   1dede:	4462      	add	r2, ip
   1dee0:	e002      	b.n	1dee8 <__mdiff+0x30>
   1dee2:	429f      	cmp	r7, r3
   1dee4:	d300      	bcc.n	1dee8 <__mdiff+0x30>
   1dee6:	e070      	b.n	1dfca <__mdiff+0x112>
   1dee8:	3b04      	subs	r3, #4
   1deea:	3a04      	subs	r2, #4
   1deec:	681e      	ldr	r6, [r3, #0]
   1deee:	6811      	ldr	r1, [r2, #0]
   1def0:	428e      	cmp	r6, r1
   1def2:	d0f6      	beq.n	1dee2 <__mdiff+0x2a>
   1def4:	d300      	bcc.n	1def8 <__mdiff+0x40>
   1def6:	e071      	b.n	1dfdc <__mdiff+0x124>
   1def8:	4643      	mov	r3, r8
   1defa:	003e      	movs	r6, r7
   1defc:	46a0      	mov	r8, r4
   1defe:	4667      	mov	r7, ip
   1df00:	001c      	movs	r4, r3
   1df02:	2501      	movs	r5, #1
   1df04:	e006      	b.n	1df14 <__mdiff+0x5c>
   1df06:	2d00      	cmp	r5, #0
   1df08:	db6a      	blt.n	1dfe0 <__mdiff+0x128>
   1df0a:	4647      	mov	r7, r8
   1df0c:	0026      	movs	r6, r4
   1df0e:	2500      	movs	r5, #0
   1df10:	3714      	adds	r7, #20
   1df12:	3614      	adds	r6, #20
   1df14:	4643      	mov	r3, r8
   1df16:	6859      	ldr	r1, [r3, #4]
   1df18:	f7ff fd80 	bl	1da1c <_Balloc>
   1df1c:	4643      	mov	r3, r8
   1df1e:	4681      	mov	r9, r0
   1df20:	60c5      	str	r5, [r0, #12]
   1df22:	6918      	ldr	r0, [r3, #16]
   1df24:	464d      	mov	r5, r9
   1df26:	0083      	lsls	r3, r0, #2
   1df28:	469c      	mov	ip, r3
   1df2a:	6923      	ldr	r3, [r4, #16]
   1df2c:	44bc      	add	ip, r7
   1df2e:	009b      	lsls	r3, r3, #2
   1df30:	4698      	mov	r8, r3
   1df32:	2300      	movs	r3, #0
   1df34:	44b0      	add	r8, r6
   1df36:	3514      	adds	r5, #20
   1df38:	469a      	mov	sl, r3
   1df3a:	e000      	b.n	1df3e <__mdiff+0x86>
   1df3c:	0027      	movs	r7, r4
   1df3e:	ce04      	ldmia	r6!, {r2}
   1df40:	003c      	movs	r4, r7
   1df42:	4693      	mov	fp, r2
   1df44:	4659      	mov	r1, fp
   1df46:	cc08      	ldmia	r4!, {r3}
   1df48:	0409      	lsls	r1, r1, #16
   1df4a:	041a      	lsls	r2, r3, #16
   1df4c:	0c12      	lsrs	r2, r2, #16
   1df4e:	4452      	add	r2, sl
   1df50:	0c09      	lsrs	r1, r1, #16
   1df52:	1a52      	subs	r2, r2, r1
   1df54:	0c19      	lsrs	r1, r3, #16
   1df56:	465b      	mov	r3, fp
   1df58:	0c1b      	lsrs	r3, r3, #16
   1df5a:	1acb      	subs	r3, r1, r3
   1df5c:	1411      	asrs	r1, r2, #16
   1df5e:	185b      	adds	r3, r3, r1
   1df60:	0412      	lsls	r2, r2, #16
   1df62:	1419      	asrs	r1, r3, #16
   1df64:	0c12      	lsrs	r2, r2, #16
   1df66:	041b      	lsls	r3, r3, #16
   1df68:	468a      	mov	sl, r1
   1df6a:	4313      	orrs	r3, r2
   1df6c:	1d29      	adds	r1, r5, #4
   1df6e:	602b      	str	r3, [r5, #0]
   1df70:	000d      	movs	r5, r1
   1df72:	45b0      	cmp	r8, r6
   1df74:	d8e2      	bhi.n	1df3c <__mdiff+0x84>
   1df76:	45a4      	cmp	ip, r4
   1df78:	d916      	bls.n	1dfa8 <__mdiff+0xf0>
   1df7a:	cc08      	ldmia	r4!, {r3}
   1df7c:	041a      	lsls	r2, r3, #16
   1df7e:	0c12      	lsrs	r2, r2, #16
   1df80:	4452      	add	r2, sl
   1df82:	1416      	asrs	r6, r2, #16
   1df84:	0c1b      	lsrs	r3, r3, #16
   1df86:	199b      	adds	r3, r3, r6
   1df88:	0412      	lsls	r2, r2, #16
   1df8a:	141e      	asrs	r6, r3, #16
   1df8c:	0c12      	lsrs	r2, r2, #16
   1df8e:	041b      	lsls	r3, r3, #16
   1df90:	4313      	orrs	r3, r2
   1df92:	46b2      	mov	sl, r6
   1df94:	c508      	stmia	r5!, {r3}
   1df96:	45a4      	cmp	ip, r4
   1df98:	d8ef      	bhi.n	1df7a <__mdiff+0xc2>
   1df9a:	4662      	mov	r2, ip
   1df9c:	2403      	movs	r4, #3
   1df9e:	1bd2      	subs	r2, r2, r7
   1dfa0:	3a05      	subs	r2, #5
   1dfa2:	43a2      	bics	r2, r4
   1dfa4:	3204      	adds	r2, #4
   1dfa6:	1889      	adds	r1, r1, r2
   1dfa8:	3904      	subs	r1, #4
   1dfaa:	2b00      	cmp	r3, #0
   1dfac:	d104      	bne.n	1dfb8 <__mdiff+0x100>
   1dfae:	3904      	subs	r1, #4
   1dfb0:	680b      	ldr	r3, [r1, #0]
   1dfb2:	3801      	subs	r0, #1
   1dfb4:	2b00      	cmp	r3, #0
   1dfb6:	d0fa      	beq.n	1dfae <__mdiff+0xf6>
   1dfb8:	464b      	mov	r3, r9
   1dfba:	6118      	str	r0, [r3, #16]
   1dfbc:	4648      	mov	r0, r9
   1dfbe:	bc3c      	pop	{r2, r3, r4, r5}
   1dfc0:	4690      	mov	r8, r2
   1dfc2:	4699      	mov	r9, r3
   1dfc4:	46a2      	mov	sl, r4
   1dfc6:	46ab      	mov	fp, r5
   1dfc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1dfca:	2100      	movs	r1, #0
   1dfcc:	f7ff fd26 	bl	1da1c <_Balloc>
   1dfd0:	2301      	movs	r3, #1
   1dfd2:	6103      	str	r3, [r0, #16]
   1dfd4:	2300      	movs	r3, #0
   1dfd6:	4681      	mov	r9, r0
   1dfd8:	6143      	str	r3, [r0, #20]
   1dfda:	e7ef      	b.n	1dfbc <__mdiff+0x104>
   1dfdc:	4666      	mov	r6, ip
   1dfde:	e799      	b.n	1df14 <__mdiff+0x5c>
   1dfe0:	0027      	movs	r7, r4
   1dfe2:	000e      	movs	r6, r1
   1dfe4:	46a0      	mov	r8, r4
   1dfe6:	3714      	adds	r7, #20
   1dfe8:	3614      	adds	r6, #20
   1dfea:	000c      	movs	r4, r1
   1dfec:	2501      	movs	r5, #1
   1dfee:	e791      	b.n	1df14 <__mdiff+0x5c>

0001dff0 <__d2b>:
   1dff0:	b5f0      	push	{r4, r5, r6, r7, lr}
   1dff2:	2101      	movs	r1, #1
   1dff4:	001c      	movs	r4, r3
   1dff6:	b083      	sub	sp, #12
   1dff8:	9e08      	ldr	r6, [sp, #32]
   1dffa:	0015      	movs	r5, r2
   1dffc:	f7ff fd0e 	bl	1da1c <_Balloc>
   1e000:	0323      	lsls	r3, r4, #12
   1e002:	0064      	lsls	r4, r4, #1
   1e004:	0007      	movs	r7, r0
   1e006:	0b1b      	lsrs	r3, r3, #12
   1e008:	0d64      	lsrs	r4, r4, #21
   1e00a:	d002      	beq.n	1e012 <__d2b+0x22>
   1e00c:	2280      	movs	r2, #128	; 0x80
   1e00e:	0352      	lsls	r2, r2, #13
   1e010:	4313      	orrs	r3, r2
   1e012:	9301      	str	r3, [sp, #4]
   1e014:	2d00      	cmp	r5, #0
   1e016:	d019      	beq.n	1e04c <__d2b+0x5c>
   1e018:	4668      	mov	r0, sp
   1e01a:	9500      	str	r5, [sp, #0]
   1e01c:	f7ff fd90 	bl	1db40 <__lo0bits>
   1e020:	2800      	cmp	r0, #0
   1e022:	d130      	bne.n	1e086 <__d2b+0x96>
   1e024:	9b00      	ldr	r3, [sp, #0]
   1e026:	617b      	str	r3, [r7, #20]
   1e028:	9b01      	ldr	r3, [sp, #4]
   1e02a:	61bb      	str	r3, [r7, #24]
   1e02c:	1e5a      	subs	r2, r3, #1
   1e02e:	4193      	sbcs	r3, r2
   1e030:	1c5d      	adds	r5, r3, #1
   1e032:	613d      	str	r5, [r7, #16]
   1e034:	2c00      	cmp	r4, #0
   1e036:	d014      	beq.n	1e062 <__d2b+0x72>
   1e038:	4b19      	ldr	r3, [pc, #100]	; (1e0a0 <__d2b+0xb0>)
   1e03a:	469c      	mov	ip, r3
   1e03c:	2335      	movs	r3, #53	; 0x35
   1e03e:	4464      	add	r4, ip
   1e040:	1824      	adds	r4, r4, r0
   1e042:	1a18      	subs	r0, r3, r0
   1e044:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1e046:	6034      	str	r4, [r6, #0]
   1e048:	6018      	str	r0, [r3, #0]
   1e04a:	e019      	b.n	1e080 <__d2b+0x90>
   1e04c:	a801      	add	r0, sp, #4
   1e04e:	f7ff fd77 	bl	1db40 <__lo0bits>
   1e052:	9b01      	ldr	r3, [sp, #4]
   1e054:	3020      	adds	r0, #32
   1e056:	617b      	str	r3, [r7, #20]
   1e058:	2301      	movs	r3, #1
   1e05a:	2501      	movs	r5, #1
   1e05c:	613b      	str	r3, [r7, #16]
   1e05e:	2c00      	cmp	r4, #0
   1e060:	d1ea      	bne.n	1e038 <__d2b+0x48>
   1e062:	4b10      	ldr	r3, [pc, #64]	; (1e0a4 <__d2b+0xb4>)
   1e064:	469c      	mov	ip, r3
   1e066:	4b10      	ldr	r3, [pc, #64]	; (1e0a8 <__d2b+0xb8>)
   1e068:	4460      	add	r0, ip
   1e06a:	18eb      	adds	r3, r5, r3
   1e06c:	009b      	lsls	r3, r3, #2
   1e06e:	18fb      	adds	r3, r7, r3
   1e070:	6030      	str	r0, [r6, #0]
   1e072:	6958      	ldr	r0, [r3, #20]
   1e074:	f7ff fd4a 	bl	1db0c <__hi0bits>
   1e078:	016b      	lsls	r3, r5, #5
   1e07a:	1a18      	subs	r0, r3, r0
   1e07c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1e07e:	6018      	str	r0, [r3, #0]
   1e080:	0038      	movs	r0, r7
   1e082:	b003      	add	sp, #12
   1e084:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1e086:	9b01      	ldr	r3, [sp, #4]
   1e088:	2220      	movs	r2, #32
   1e08a:	0019      	movs	r1, r3
   1e08c:	1a12      	subs	r2, r2, r0
   1e08e:	4091      	lsls	r1, r2
   1e090:	000a      	movs	r2, r1
   1e092:	40c3      	lsrs	r3, r0
   1e094:	9900      	ldr	r1, [sp, #0]
   1e096:	9301      	str	r3, [sp, #4]
   1e098:	430a      	orrs	r2, r1
   1e09a:	617a      	str	r2, [r7, #20]
   1e09c:	e7c5      	b.n	1e02a <__d2b+0x3a>
   1e09e:	46c0      	nop			; (mov r8, r8)
   1e0a0:	fffffbcd 	.word	0xfffffbcd
   1e0a4:	fffffbce 	.word	0xfffffbce
   1e0a8:	3fffffff 	.word	0x3fffffff

0001e0ac <_realloc_r>:
   1e0ac:	b5f0      	push	{r4, r5, r6, r7, lr}
   1e0ae:	464e      	mov	r6, r9
   1e0b0:	4645      	mov	r5, r8
   1e0b2:	46de      	mov	lr, fp
   1e0b4:	4657      	mov	r7, sl
   1e0b6:	b5e0      	push	{r5, r6, r7, lr}
   1e0b8:	b085      	sub	sp, #20
   1e0ba:	9001      	str	r0, [sp, #4]
   1e0bc:	000e      	movs	r6, r1
   1e0be:	0015      	movs	r5, r2
   1e0c0:	2900      	cmp	r1, #0
   1e0c2:	d100      	bne.n	1e0c6 <_realloc_r+0x1a>
   1e0c4:	e09e      	b.n	1e204 <_realloc_r+0x158>
   1e0c6:	0037      	movs	r7, r6
   1e0c8:	9801      	ldr	r0, [sp, #4]
   1e0ca:	3f08      	subs	r7, #8
   1e0cc:	f7fb ff46 	bl	19f5c <__malloc_lock>
   1e0d0:	687a      	ldr	r2, [r7, #4]
   1e0d2:	2303      	movs	r3, #3
   1e0d4:	0014      	movs	r4, r2
   1e0d6:	439c      	bics	r4, r3
   1e0d8:	002b      	movs	r3, r5
   1e0da:	330b      	adds	r3, #11
   1e0dc:	46b9      	mov	r9, r7
   1e0de:	2b16      	cmp	r3, #22
   1e0e0:	d847      	bhi.n	1e172 <_realloc_r+0xc6>
   1e0e2:	2110      	movs	r1, #16
   1e0e4:	2310      	movs	r3, #16
   1e0e6:	4688      	mov	r8, r1
   1e0e8:	4545      	cmp	r5, r8
   1e0ea:	d846      	bhi.n	1e17a <_realloc_r+0xce>
   1e0ec:	429c      	cmp	r4, r3
   1e0ee:	da49      	bge.n	1e184 <_realloc_r+0xd8>
   1e0f0:	49cc      	ldr	r1, [pc, #816]	; (1e424 <_realloc_r+0x378>)
   1e0f2:	1938      	adds	r0, r7, r4
   1e0f4:	468b      	mov	fp, r1
   1e0f6:	6889      	ldr	r1, [r1, #8]
   1e0f8:	9002      	str	r0, [sp, #8]
   1e0fa:	4288      	cmp	r0, r1
   1e0fc:	d100      	bne.n	1e100 <_realloc_r+0x54>
   1e0fe:	e0c2      	b.n	1e286 <_realloc_r+0x1da>
   1e100:	2101      	movs	r1, #1
   1e102:	468a      	mov	sl, r1
   1e104:	6840      	ldr	r0, [r0, #4]
   1e106:	0001      	movs	r1, r0
   1e108:	9003      	str	r0, [sp, #12]
   1e10a:	4650      	mov	r0, sl
   1e10c:	4381      	bics	r1, r0
   1e10e:	468c      	mov	ip, r1
   1e110:	9902      	ldr	r1, [sp, #8]
   1e112:	468b      	mov	fp, r1
   1e114:	44dc      	add	ip, fp
   1e116:	4661      	mov	r1, ip
   1e118:	6849      	ldr	r1, [r1, #4]
   1e11a:	4201      	tst	r1, r0
   1e11c:	d04d      	beq.n	1e1ba <_realloc_r+0x10e>
   1e11e:	4210      	tst	r0, r2
   1e120:	d100      	bne.n	1e124 <_realloc_r+0x78>
   1e122:	e0a2      	b.n	1e26a <_realloc_r+0x1be>
   1e124:	0029      	movs	r1, r5
   1e126:	9801      	ldr	r0, [sp, #4]
   1e128:	f7fb fb4c 	bl	197c4 <_malloc_r>
   1e12c:	1e05      	subs	r5, r0, #0
   1e12e:	d039      	beq.n	1e1a4 <_realloc_r+0xf8>
   1e130:	2301      	movs	r3, #1
   1e132:	0002      	movs	r2, r0
   1e134:	6879      	ldr	r1, [r7, #4]
   1e136:	3a08      	subs	r2, #8
   1e138:	4399      	bics	r1, r3
   1e13a:	187f      	adds	r7, r7, r1
   1e13c:	42ba      	cmp	r2, r7
   1e13e:	d100      	bne.n	1e142 <_realloc_r+0x96>
   1e140:	e12e      	b.n	1e3a0 <_realloc_r+0x2f4>
   1e142:	1f22      	subs	r2, r4, #4
   1e144:	2a24      	cmp	r2, #36	; 0x24
   1e146:	d900      	bls.n	1e14a <_realloc_r+0x9e>
   1e148:	e114      	b.n	1e374 <_realloc_r+0x2c8>
   1e14a:	2a13      	cmp	r2, #19
   1e14c:	d900      	bls.n	1e150 <_realloc_r+0xa4>
   1e14e:	e0e8      	b.n	1e322 <_realloc_r+0x276>
   1e150:	0003      	movs	r3, r0
   1e152:	0032      	movs	r2, r6
   1e154:	6811      	ldr	r1, [r2, #0]
   1e156:	6019      	str	r1, [r3, #0]
   1e158:	6851      	ldr	r1, [r2, #4]
   1e15a:	6059      	str	r1, [r3, #4]
   1e15c:	6892      	ldr	r2, [r2, #8]
   1e15e:	609a      	str	r2, [r3, #8]
   1e160:	9c01      	ldr	r4, [sp, #4]
   1e162:	0031      	movs	r1, r6
   1e164:	0020      	movs	r0, r4
   1e166:	f7ff f905 	bl	1d374 <_free_r>
   1e16a:	0020      	movs	r0, r4
   1e16c:	f7fb fefe 	bl	19f6c <__malloc_unlock>
   1e170:	e01b      	b.n	1e1aa <_realloc_r+0xfe>
   1e172:	2107      	movs	r1, #7
   1e174:	438b      	bics	r3, r1
   1e176:	4698      	mov	r8, r3
   1e178:	d5b6      	bpl.n	1e0e8 <_realloc_r+0x3c>
   1e17a:	230c      	movs	r3, #12
   1e17c:	9a01      	ldr	r2, [sp, #4]
   1e17e:	2500      	movs	r5, #0
   1e180:	6013      	str	r3, [r2, #0]
   1e182:	e012      	b.n	1e1aa <_realloc_r+0xfe>
   1e184:	0035      	movs	r5, r6
   1e186:	4643      	mov	r3, r8
   1e188:	1ae3      	subs	r3, r4, r3
   1e18a:	2b0f      	cmp	r3, #15
   1e18c:	d825      	bhi.n	1e1da <_realloc_r+0x12e>
   1e18e:	464b      	mov	r3, r9
   1e190:	2201      	movs	r2, #1
   1e192:	4649      	mov	r1, r9
   1e194:	685b      	ldr	r3, [r3, #4]
   1e196:	4013      	ands	r3, r2
   1e198:	4323      	orrs	r3, r4
   1e19a:	604b      	str	r3, [r1, #4]
   1e19c:	444c      	add	r4, r9
   1e19e:	6863      	ldr	r3, [r4, #4]
   1e1a0:	431a      	orrs	r2, r3
   1e1a2:	6062      	str	r2, [r4, #4]
   1e1a4:	9801      	ldr	r0, [sp, #4]
   1e1a6:	f7fb fee1 	bl	19f6c <__malloc_unlock>
   1e1aa:	0028      	movs	r0, r5
   1e1ac:	b005      	add	sp, #20
   1e1ae:	bc3c      	pop	{r2, r3, r4, r5}
   1e1b0:	4690      	mov	r8, r2
   1e1b2:	4699      	mov	r9, r3
   1e1b4:	46a2      	mov	sl, r4
   1e1b6:	46ab      	mov	fp, r5
   1e1b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1e1ba:	2103      	movs	r1, #3
   1e1bc:	9803      	ldr	r0, [sp, #12]
   1e1be:	468c      	mov	ip, r1
   1e1c0:	4388      	bics	r0, r1
   1e1c2:	1821      	adds	r1, r4, r0
   1e1c4:	468b      	mov	fp, r1
   1e1c6:	4299      	cmp	r1, r3
   1e1c8:	db21      	blt.n	1e20e <_realloc_r+0x162>
   1e1ca:	9a02      	ldr	r2, [sp, #8]
   1e1cc:	0035      	movs	r5, r6
   1e1ce:	68d3      	ldr	r3, [r2, #12]
   1e1d0:	6892      	ldr	r2, [r2, #8]
   1e1d2:	465c      	mov	r4, fp
   1e1d4:	60d3      	str	r3, [r2, #12]
   1e1d6:	609a      	str	r2, [r3, #8]
   1e1d8:	e7d5      	b.n	1e186 <_realloc_r+0xda>
   1e1da:	464a      	mov	r2, r9
   1e1dc:	2001      	movs	r0, #1
   1e1de:	4646      	mov	r6, r8
   1e1e0:	6852      	ldr	r2, [r2, #4]
   1e1e2:	4649      	mov	r1, r9
   1e1e4:	4002      	ands	r2, r0
   1e1e6:	4332      	orrs	r2, r6
   1e1e8:	464e      	mov	r6, r9
   1e1ea:	4441      	add	r1, r8
   1e1ec:	4303      	orrs	r3, r0
   1e1ee:	6072      	str	r2, [r6, #4]
   1e1f0:	444c      	add	r4, r9
   1e1f2:	604b      	str	r3, [r1, #4]
   1e1f4:	6863      	ldr	r3, [r4, #4]
   1e1f6:	3108      	adds	r1, #8
   1e1f8:	4318      	orrs	r0, r3
   1e1fa:	6060      	str	r0, [r4, #4]
   1e1fc:	9801      	ldr	r0, [sp, #4]
   1e1fe:	f7ff f8b9 	bl	1d374 <_free_r>
   1e202:	e7cf      	b.n	1e1a4 <_realloc_r+0xf8>
   1e204:	0011      	movs	r1, r2
   1e206:	f7fb fadd 	bl	197c4 <_malloc_r>
   1e20a:	0005      	movs	r5, r0
   1e20c:	e7cd      	b.n	1e1aa <_realloc_r+0xfe>
   1e20e:	4651      	mov	r1, sl
   1e210:	4211      	tst	r1, r2
   1e212:	d000      	beq.n	1e216 <_realloc_r+0x16a>
   1e214:	e786      	b.n	1e124 <_realloc_r+0x78>
   1e216:	4661      	mov	r1, ip
   1e218:	683a      	ldr	r2, [r7, #0]
   1e21a:	1aba      	subs	r2, r7, r2
   1e21c:	4692      	mov	sl, r2
   1e21e:	6852      	ldr	r2, [r2, #4]
   1e220:	438a      	bics	r2, r1
   1e222:	1880      	adds	r0, r0, r2
   1e224:	4683      	mov	fp, r0
   1e226:	44a3      	add	fp, r4
   1e228:	459b      	cmp	fp, r3
   1e22a:	db26      	blt.n	1e27a <_realloc_r+0x1ce>
   1e22c:	9a02      	ldr	r2, [sp, #8]
   1e22e:	68d3      	ldr	r3, [r2, #12]
   1e230:	6892      	ldr	r2, [r2, #8]
   1e232:	60d3      	str	r3, [r2, #12]
   1e234:	609a      	str	r2, [r3, #8]
   1e236:	4653      	mov	r3, sl
   1e238:	4652      	mov	r2, sl
   1e23a:	4655      	mov	r5, sl
   1e23c:	6892      	ldr	r2, [r2, #8]
   1e23e:	68db      	ldr	r3, [r3, #12]
   1e240:	3508      	adds	r5, #8
   1e242:	60d3      	str	r3, [r2, #12]
   1e244:	609a      	str	r2, [r3, #8]
   1e246:	1f22      	subs	r2, r4, #4
   1e248:	2a24      	cmp	r2, #36	; 0x24
   1e24a:	d900      	bls.n	1e24e <_realloc_r+0x1a2>
   1e24c:	e096      	b.n	1e37c <_realloc_r+0x2d0>
   1e24e:	2a13      	cmp	r2, #19
   1e250:	d972      	bls.n	1e338 <_realloc_r+0x28c>
   1e252:	4653      	mov	r3, sl
   1e254:	6831      	ldr	r1, [r6, #0]
   1e256:	6099      	str	r1, [r3, #8]
   1e258:	6871      	ldr	r1, [r6, #4]
   1e25a:	60d9      	str	r1, [r3, #12]
   1e25c:	2a1b      	cmp	r2, #27
   1e25e:	d900      	bls.n	1e262 <_realloc_r+0x1b6>
   1e260:	e0a4      	b.n	1e3ac <_realloc_r+0x300>
   1e262:	0032      	movs	r2, r6
   1e264:	3310      	adds	r3, #16
   1e266:	3208      	adds	r2, #8
   1e268:	e068      	b.n	1e33c <_realloc_r+0x290>
   1e26a:	683a      	ldr	r2, [r7, #0]
   1e26c:	1aba      	subs	r2, r7, r2
   1e26e:	4692      	mov	sl, r2
   1e270:	4651      	mov	r1, sl
   1e272:	2203      	movs	r2, #3
   1e274:	6849      	ldr	r1, [r1, #4]
   1e276:	4391      	bics	r1, r2
   1e278:	000a      	movs	r2, r1
   1e27a:	4693      	mov	fp, r2
   1e27c:	44a3      	add	fp, r4
   1e27e:	459b      	cmp	fp, r3
   1e280:	da00      	bge.n	1e284 <_realloc_r+0x1d8>
   1e282:	e74f      	b.n	1e124 <_realloc_r+0x78>
   1e284:	e7d7      	b.n	1e236 <_realloc_r+0x18a>
   1e286:	2003      	movs	r0, #3
   1e288:	9902      	ldr	r1, [sp, #8]
   1e28a:	4684      	mov	ip, r0
   1e28c:	6849      	ldr	r1, [r1, #4]
   1e28e:	4381      	bics	r1, r0
   1e290:	4640      	mov	r0, r8
   1e292:	1909      	adds	r1, r1, r4
   1e294:	3010      	adds	r0, #16
   1e296:	9002      	str	r0, [sp, #8]
   1e298:	4281      	cmp	r1, r0
   1e29a:	da58      	bge.n	1e34e <_realloc_r+0x2a2>
   1e29c:	07d2      	lsls	r2, r2, #31
   1e29e:	d500      	bpl.n	1e2a2 <_realloc_r+0x1f6>
   1e2a0:	e740      	b.n	1e124 <_realloc_r+0x78>
   1e2a2:	4660      	mov	r0, ip
   1e2a4:	683a      	ldr	r2, [r7, #0]
   1e2a6:	1aba      	subs	r2, r7, r2
   1e2a8:	4692      	mov	sl, r2
   1e2aa:	6852      	ldr	r2, [r2, #4]
   1e2ac:	4382      	bics	r2, r0
   1e2ae:	9802      	ldr	r0, [sp, #8]
   1e2b0:	1851      	adds	r1, r2, r1
   1e2b2:	9103      	str	r1, [sp, #12]
   1e2b4:	4288      	cmp	r0, r1
   1e2b6:	dce0      	bgt.n	1e27a <_realloc_r+0x1ce>
   1e2b8:	4653      	mov	r3, sl
   1e2ba:	4652      	mov	r2, sl
   1e2bc:	4655      	mov	r5, sl
   1e2be:	6892      	ldr	r2, [r2, #8]
   1e2c0:	68db      	ldr	r3, [r3, #12]
   1e2c2:	3508      	adds	r5, #8
   1e2c4:	60d3      	str	r3, [r2, #12]
   1e2c6:	609a      	str	r2, [r3, #8]
   1e2c8:	1f22      	subs	r2, r4, #4
   1e2ca:	2a24      	cmp	r2, #36	; 0x24
   1e2cc:	d900      	bls.n	1e2d0 <_realloc_r+0x224>
   1e2ce:	e08e      	b.n	1e3ee <_realloc_r+0x342>
   1e2d0:	2a13      	cmp	r2, #19
   1e2d2:	d800      	bhi.n	1e2d6 <_realloc_r+0x22a>
   1e2d4:	e088      	b.n	1e3e8 <_realloc_r+0x33c>
   1e2d6:	4653      	mov	r3, sl
   1e2d8:	6831      	ldr	r1, [r6, #0]
   1e2da:	6099      	str	r1, [r3, #8]
   1e2dc:	6871      	ldr	r1, [r6, #4]
   1e2de:	60d9      	str	r1, [r3, #12]
   1e2e0:	2a1b      	cmp	r2, #27
   1e2e2:	d900      	bls.n	1e2e6 <_realloc_r+0x23a>
   1e2e4:	e088      	b.n	1e3f8 <_realloc_r+0x34c>
   1e2e6:	0032      	movs	r2, r6
   1e2e8:	3310      	adds	r3, #16
   1e2ea:	3208      	adds	r2, #8
   1e2ec:	6811      	ldr	r1, [r2, #0]
   1e2ee:	6019      	str	r1, [r3, #0]
   1e2f0:	6851      	ldr	r1, [r2, #4]
   1e2f2:	6059      	str	r1, [r3, #4]
   1e2f4:	6892      	ldr	r2, [r2, #8]
   1e2f6:	609a      	str	r2, [r3, #8]
   1e2f8:	4651      	mov	r1, sl
   1e2fa:	465b      	mov	r3, fp
   1e2fc:	4642      	mov	r2, r8
   1e2fe:	4441      	add	r1, r8
   1e300:	6099      	str	r1, [r3, #8]
   1e302:	9b03      	ldr	r3, [sp, #12]
   1e304:	9801      	ldr	r0, [sp, #4]
   1e306:	1a9a      	subs	r2, r3, r2
   1e308:	2301      	movs	r3, #1
   1e30a:	431a      	orrs	r2, r3
   1e30c:	604a      	str	r2, [r1, #4]
   1e30e:	4652      	mov	r2, sl
   1e310:	6852      	ldr	r2, [r2, #4]
   1e312:	4013      	ands	r3, r2
   1e314:	4642      	mov	r2, r8
   1e316:	4313      	orrs	r3, r2
   1e318:	4652      	mov	r2, sl
   1e31a:	6053      	str	r3, [r2, #4]
   1e31c:	f7fb fe26 	bl	19f6c <__malloc_unlock>
   1e320:	e743      	b.n	1e1aa <_realloc_r+0xfe>
   1e322:	6833      	ldr	r3, [r6, #0]
   1e324:	6003      	str	r3, [r0, #0]
   1e326:	6873      	ldr	r3, [r6, #4]
   1e328:	6043      	str	r3, [r0, #4]
   1e32a:	2a1b      	cmp	r2, #27
   1e32c:	d82d      	bhi.n	1e38a <_realloc_r+0x2de>
   1e32e:	0003      	movs	r3, r0
   1e330:	0032      	movs	r2, r6
   1e332:	3308      	adds	r3, #8
   1e334:	3208      	adds	r2, #8
   1e336:	e70d      	b.n	1e154 <_realloc_r+0xa8>
   1e338:	002b      	movs	r3, r5
   1e33a:	0032      	movs	r2, r6
   1e33c:	6811      	ldr	r1, [r2, #0]
   1e33e:	465c      	mov	r4, fp
   1e340:	6019      	str	r1, [r3, #0]
   1e342:	6851      	ldr	r1, [r2, #4]
   1e344:	46d1      	mov	r9, sl
   1e346:	6059      	str	r1, [r3, #4]
   1e348:	6892      	ldr	r2, [r2, #8]
   1e34a:	609a      	str	r2, [r3, #8]
   1e34c:	e71b      	b.n	1e186 <_realloc_r+0xda>
   1e34e:	4643      	mov	r3, r8
   1e350:	18fa      	adds	r2, r7, r3
   1e352:	465b      	mov	r3, fp
   1e354:	609a      	str	r2, [r3, #8]
   1e356:	4643      	mov	r3, r8
   1e358:	1ac9      	subs	r1, r1, r3
   1e35a:	2301      	movs	r3, #1
   1e35c:	4319      	orrs	r1, r3
   1e35e:	6051      	str	r1, [r2, #4]
   1e360:	687a      	ldr	r2, [r7, #4]
   1e362:	9801      	ldr	r0, [sp, #4]
   1e364:	4013      	ands	r3, r2
   1e366:	4642      	mov	r2, r8
   1e368:	4313      	orrs	r3, r2
   1e36a:	607b      	str	r3, [r7, #4]
   1e36c:	f7fb fdfe 	bl	19f6c <__malloc_unlock>
   1e370:	0035      	movs	r5, r6
   1e372:	e71a      	b.n	1e1aa <_realloc_r+0xfe>
   1e374:	0031      	movs	r1, r6
   1e376:	f7fb fd57 	bl	19e28 <memmove>
   1e37a:	e6f1      	b.n	1e160 <_realloc_r+0xb4>
   1e37c:	0031      	movs	r1, r6
   1e37e:	0028      	movs	r0, r5
   1e380:	f7fb fd52 	bl	19e28 <memmove>
   1e384:	465c      	mov	r4, fp
   1e386:	46d1      	mov	r9, sl
   1e388:	e6fd      	b.n	1e186 <_realloc_r+0xda>
   1e38a:	68b3      	ldr	r3, [r6, #8]
   1e38c:	6083      	str	r3, [r0, #8]
   1e38e:	68f3      	ldr	r3, [r6, #12]
   1e390:	60c3      	str	r3, [r0, #12]
   1e392:	2a24      	cmp	r2, #36	; 0x24
   1e394:	d015      	beq.n	1e3c2 <_realloc_r+0x316>
   1e396:	0003      	movs	r3, r0
   1e398:	0032      	movs	r2, r6
   1e39a:	3310      	adds	r3, #16
   1e39c:	3210      	adds	r2, #16
   1e39e:	e6d9      	b.n	1e154 <_realloc_r+0xa8>
   1e3a0:	6853      	ldr	r3, [r2, #4]
   1e3a2:	2203      	movs	r2, #3
   1e3a4:	4393      	bics	r3, r2
   1e3a6:	18e4      	adds	r4, r4, r3
   1e3a8:	0035      	movs	r5, r6
   1e3aa:	e6ec      	b.n	1e186 <_realloc_r+0xda>
   1e3ac:	4653      	mov	r3, sl
   1e3ae:	68b1      	ldr	r1, [r6, #8]
   1e3b0:	6119      	str	r1, [r3, #16]
   1e3b2:	68f1      	ldr	r1, [r6, #12]
   1e3b4:	6159      	str	r1, [r3, #20]
   1e3b6:	2a24      	cmp	r2, #36	; 0x24
   1e3b8:	d00c      	beq.n	1e3d4 <_realloc_r+0x328>
   1e3ba:	0032      	movs	r2, r6
   1e3bc:	3318      	adds	r3, #24
   1e3be:	3210      	adds	r2, #16
   1e3c0:	e7bc      	b.n	1e33c <_realloc_r+0x290>
   1e3c2:	6933      	ldr	r3, [r6, #16]
   1e3c4:	0032      	movs	r2, r6
   1e3c6:	6103      	str	r3, [r0, #16]
   1e3c8:	0003      	movs	r3, r0
   1e3ca:	6971      	ldr	r1, [r6, #20]
   1e3cc:	3318      	adds	r3, #24
   1e3ce:	3218      	adds	r2, #24
   1e3d0:	6141      	str	r1, [r0, #20]
   1e3d2:	e6bf      	b.n	1e154 <_realloc_r+0xa8>
   1e3d4:	4653      	mov	r3, sl
   1e3d6:	6932      	ldr	r2, [r6, #16]
   1e3d8:	4651      	mov	r1, sl
   1e3da:	619a      	str	r2, [r3, #24]
   1e3dc:	0032      	movs	r2, r6
   1e3de:	6970      	ldr	r0, [r6, #20]
   1e3e0:	3320      	adds	r3, #32
   1e3e2:	3218      	adds	r2, #24
   1e3e4:	61c8      	str	r0, [r1, #28]
   1e3e6:	e7a9      	b.n	1e33c <_realloc_r+0x290>
   1e3e8:	002b      	movs	r3, r5
   1e3ea:	0032      	movs	r2, r6
   1e3ec:	e77e      	b.n	1e2ec <_realloc_r+0x240>
   1e3ee:	0031      	movs	r1, r6
   1e3f0:	0028      	movs	r0, r5
   1e3f2:	f7fb fd19 	bl	19e28 <memmove>
   1e3f6:	e77f      	b.n	1e2f8 <_realloc_r+0x24c>
   1e3f8:	4653      	mov	r3, sl
   1e3fa:	68b1      	ldr	r1, [r6, #8]
   1e3fc:	6119      	str	r1, [r3, #16]
   1e3fe:	68f1      	ldr	r1, [r6, #12]
   1e400:	6159      	str	r1, [r3, #20]
   1e402:	2a24      	cmp	r2, #36	; 0x24
   1e404:	d003      	beq.n	1e40e <_realloc_r+0x362>
   1e406:	0032      	movs	r2, r6
   1e408:	3318      	adds	r3, #24
   1e40a:	3210      	adds	r2, #16
   1e40c:	e76e      	b.n	1e2ec <_realloc_r+0x240>
   1e40e:	4653      	mov	r3, sl
   1e410:	6932      	ldr	r2, [r6, #16]
   1e412:	4651      	mov	r1, sl
   1e414:	619a      	str	r2, [r3, #24]
   1e416:	0032      	movs	r2, r6
   1e418:	6970      	ldr	r0, [r6, #20]
   1e41a:	3320      	adds	r3, #32
   1e41c:	3218      	adds	r2, #24
   1e41e:	61c8      	str	r0, [r1, #28]
   1e420:	e764      	b.n	1e2ec <_realloc_r+0x240>
   1e422:	46c0      	nop			; (mov r8, r8)
   1e424:	200005b4 	.word	0x200005b4

0001e428 <__sread>:
   1e428:	b570      	push	{r4, r5, r6, lr}
   1e42a:	000c      	movs	r4, r1
   1e42c:	250e      	movs	r5, #14
   1e42e:	5f49      	ldrsh	r1, [r1, r5]
   1e430:	f000 fa7a 	bl	1e928 <_read_r>
   1e434:	2800      	cmp	r0, #0
   1e436:	db03      	blt.n	1e440 <__sread+0x18>
   1e438:	6d23      	ldr	r3, [r4, #80]	; 0x50
   1e43a:	181b      	adds	r3, r3, r0
   1e43c:	6523      	str	r3, [r4, #80]	; 0x50
   1e43e:	bd70      	pop	{r4, r5, r6, pc}
   1e440:	89a3      	ldrh	r3, [r4, #12]
   1e442:	4a02      	ldr	r2, [pc, #8]	; (1e44c <__sread+0x24>)
   1e444:	4013      	ands	r3, r2
   1e446:	81a3      	strh	r3, [r4, #12]
   1e448:	e7f9      	b.n	1e43e <__sread+0x16>
   1e44a:	46c0      	nop			; (mov r8, r8)
   1e44c:	ffffefff 	.word	0xffffefff

0001e450 <__swrite>:
   1e450:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1e452:	0016      	movs	r6, r2
   1e454:	001f      	movs	r7, r3
   1e456:	220c      	movs	r2, #12
   1e458:	5e8b      	ldrsh	r3, [r1, r2]
   1e45a:	0005      	movs	r5, r0
   1e45c:	000c      	movs	r4, r1
   1e45e:	05da      	lsls	r2, r3, #23
   1e460:	d507      	bpl.n	1e472 <__swrite+0x22>
   1e462:	230e      	movs	r3, #14
   1e464:	5ec9      	ldrsh	r1, [r1, r3]
   1e466:	2200      	movs	r2, #0
   1e468:	2302      	movs	r3, #2
   1e46a:	f000 fa49 	bl	1e900 <_lseek_r>
   1e46e:	220c      	movs	r2, #12
   1e470:	5ea3      	ldrsh	r3, [r4, r2]
   1e472:	4a05      	ldr	r2, [pc, #20]	; (1e488 <__swrite+0x38>)
   1e474:	0028      	movs	r0, r5
   1e476:	4013      	ands	r3, r2
   1e478:	81a3      	strh	r3, [r4, #12]
   1e47a:	0032      	movs	r2, r6
   1e47c:	230e      	movs	r3, #14
   1e47e:	5ee1      	ldrsh	r1, [r4, r3]
   1e480:	003b      	movs	r3, r7
   1e482:	f000 f86b 	bl	1e55c <_write_r>
   1e486:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1e488:	ffffefff 	.word	0xffffefff

0001e48c <__sseek>:
   1e48c:	b570      	push	{r4, r5, r6, lr}
   1e48e:	000c      	movs	r4, r1
   1e490:	250e      	movs	r5, #14
   1e492:	5f49      	ldrsh	r1, [r1, r5]
   1e494:	f000 fa34 	bl	1e900 <_lseek_r>
   1e498:	1c43      	adds	r3, r0, #1
   1e49a:	d006      	beq.n	1e4aa <__sseek+0x1e>
   1e49c:	2380      	movs	r3, #128	; 0x80
   1e49e:	89a2      	ldrh	r2, [r4, #12]
   1e4a0:	015b      	lsls	r3, r3, #5
   1e4a2:	4313      	orrs	r3, r2
   1e4a4:	81a3      	strh	r3, [r4, #12]
   1e4a6:	6520      	str	r0, [r4, #80]	; 0x50
   1e4a8:	bd70      	pop	{r4, r5, r6, pc}
   1e4aa:	89a3      	ldrh	r3, [r4, #12]
   1e4ac:	4a01      	ldr	r2, [pc, #4]	; (1e4b4 <__sseek+0x28>)
   1e4ae:	4013      	ands	r3, r2
   1e4b0:	81a3      	strh	r3, [r4, #12]
   1e4b2:	e7f9      	b.n	1e4a8 <__sseek+0x1c>
   1e4b4:	ffffefff 	.word	0xffffefff

0001e4b8 <__sclose>:
   1e4b8:	b510      	push	{r4, lr}
   1e4ba:	230e      	movs	r3, #14
   1e4bc:	5ec9      	ldrsh	r1, [r1, r3]
   1e4be:	f000 f907 	bl	1e6d0 <_close_r>
   1e4c2:	bd10      	pop	{r4, pc}

0001e4c4 <__sprint_r.part.0>:
   1e4c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1e4c6:	464e      	mov	r6, r9
   1e4c8:	4645      	mov	r5, r8
   1e4ca:	46de      	mov	lr, fp
   1e4cc:	4657      	mov	r7, sl
   1e4ce:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   1e4d0:	b5e0      	push	{r5, r6, r7, lr}
   1e4d2:	4680      	mov	r8, r0
   1e4d4:	000e      	movs	r6, r1
   1e4d6:	4691      	mov	r9, r2
   1e4d8:	049b      	lsls	r3, r3, #18
   1e4da:	d531      	bpl.n	1e540 <__sprint_r.part.0+0x7c>
   1e4dc:	6813      	ldr	r3, [r2, #0]
   1e4de:	469a      	mov	sl, r3
   1e4e0:	6893      	ldr	r3, [r2, #8]
   1e4e2:	2b00      	cmp	r3, #0
   1e4e4:	d02a      	beq.n	1e53c <__sprint_r.part.0+0x78>
   1e4e6:	4652      	mov	r2, sl
   1e4e8:	6852      	ldr	r2, [r2, #4]
   1e4ea:	2500      	movs	r5, #0
   1e4ec:	4693      	mov	fp, r2
   1e4ee:	0897      	lsrs	r7, r2, #2
   1e4f0:	4652      	mov	r2, sl
   1e4f2:	6814      	ldr	r4, [r2, #0]
   1e4f4:	d104      	bne.n	1e500 <__sprint_r.part.0+0x3c>
   1e4f6:	e016      	b.n	1e526 <__sprint_r.part.0+0x62>
   1e4f8:	3501      	adds	r5, #1
   1e4fa:	3404      	adds	r4, #4
   1e4fc:	42af      	cmp	r7, r5
   1e4fe:	d010      	beq.n	1e522 <__sprint_r.part.0+0x5e>
   1e500:	0032      	movs	r2, r6
   1e502:	6821      	ldr	r1, [r4, #0]
   1e504:	4640      	mov	r0, r8
   1e506:	f000 f9a7 	bl	1e858 <_fputwc_r>
   1e50a:	1c43      	adds	r3, r0, #1
   1e50c:	d1f4      	bne.n	1e4f8 <__sprint_r.part.0+0x34>
   1e50e:	464a      	mov	r2, r9
   1e510:	2300      	movs	r3, #0
   1e512:	6093      	str	r3, [r2, #8]
   1e514:	6053      	str	r3, [r2, #4]
   1e516:	bc3c      	pop	{r2, r3, r4, r5}
   1e518:	4690      	mov	r8, r2
   1e51a:	4699      	mov	r9, r3
   1e51c:	46a2      	mov	sl, r4
   1e51e:	46ab      	mov	fp, r5
   1e520:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1e522:	464b      	mov	r3, r9
   1e524:	689b      	ldr	r3, [r3, #8]
   1e526:	465a      	mov	r2, fp
   1e528:	2103      	movs	r1, #3
   1e52a:	438a      	bics	r2, r1
   1e52c:	1a9b      	subs	r3, r3, r2
   1e52e:	464a      	mov	r2, r9
   1e530:	6093      	str	r3, [r2, #8]
   1e532:	2208      	movs	r2, #8
   1e534:	4694      	mov	ip, r2
   1e536:	44e2      	add	sl, ip
   1e538:	2b00      	cmp	r3, #0
   1e53a:	d1d4      	bne.n	1e4e6 <__sprint_r.part.0+0x22>
   1e53c:	2000      	movs	r0, #0
   1e53e:	e7e6      	b.n	1e50e <__sprint_r.part.0+0x4a>
   1e540:	f7fe fff6 	bl	1d530 <__sfvwrite_r>
   1e544:	e7e3      	b.n	1e50e <__sprint_r.part.0+0x4a>
   1e546:	46c0      	nop			; (mov r8, r8)

0001e548 <__sprint_r>:
   1e548:	6893      	ldr	r3, [r2, #8]
   1e54a:	b510      	push	{r4, lr}
   1e54c:	2b00      	cmp	r3, #0
   1e54e:	d002      	beq.n	1e556 <__sprint_r+0xe>
   1e550:	f7ff ffb8 	bl	1e4c4 <__sprint_r.part.0>
   1e554:	bd10      	pop	{r4, pc}
   1e556:	6053      	str	r3, [r2, #4]
   1e558:	2000      	movs	r0, #0
   1e55a:	e7fb      	b.n	1e554 <__sprint_r+0xc>

0001e55c <_write_r>:
   1e55c:	b570      	push	{r4, r5, r6, lr}
   1e55e:	0005      	movs	r5, r0
   1e560:	0008      	movs	r0, r1
   1e562:	0011      	movs	r1, r2
   1e564:	2200      	movs	r2, #0
   1e566:	4c06      	ldr	r4, [pc, #24]	; (1e580 <_write_r+0x24>)
   1e568:	6022      	str	r2, [r4, #0]
   1e56a:	001a      	movs	r2, r3
   1e56c:	f7e9 fa4e 	bl	7a0c <_write>
   1e570:	1c43      	adds	r3, r0, #1
   1e572:	d000      	beq.n	1e576 <_write_r+0x1a>
   1e574:	bd70      	pop	{r4, r5, r6, pc}
   1e576:	6823      	ldr	r3, [r4, #0]
   1e578:	2b00      	cmp	r3, #0
   1e57a:	d0fb      	beq.n	1e574 <_write_r+0x18>
   1e57c:	602b      	str	r3, [r5, #0]
   1e57e:	e7f9      	b.n	1e574 <_write_r+0x18>
   1e580:	20002fe4 	.word	0x20002fe4

0001e584 <__register_exitproc>:
   1e584:	b5f0      	push	{r4, r5, r6, r7, lr}
   1e586:	464e      	mov	r6, r9
   1e588:	4645      	mov	r5, r8
   1e58a:	46de      	mov	lr, fp
   1e58c:	4657      	mov	r7, sl
   1e58e:	b5e0      	push	{r5, r6, r7, lr}
   1e590:	4d36      	ldr	r5, [pc, #216]	; (1e66c <__register_exitproc+0xe8>)
   1e592:	b083      	sub	sp, #12
   1e594:	0006      	movs	r6, r0
   1e596:	6828      	ldr	r0, [r5, #0]
   1e598:	4698      	mov	r8, r3
   1e59a:	000f      	movs	r7, r1
   1e59c:	4691      	mov	r9, r2
   1e59e:	f7ff f981 	bl	1d8a4 <__retarget_lock_acquire_recursive>
   1e5a2:	4b33      	ldr	r3, [pc, #204]	; (1e670 <__register_exitproc+0xec>)
   1e5a4:	681c      	ldr	r4, [r3, #0]
   1e5a6:	23a4      	movs	r3, #164	; 0xa4
   1e5a8:	005b      	lsls	r3, r3, #1
   1e5aa:	58e0      	ldr	r0, [r4, r3]
   1e5ac:	2800      	cmp	r0, #0
   1e5ae:	d052      	beq.n	1e656 <__register_exitproc+0xd2>
   1e5b0:	6843      	ldr	r3, [r0, #4]
   1e5b2:	2b1f      	cmp	r3, #31
   1e5b4:	dc13      	bgt.n	1e5de <__register_exitproc+0x5a>
   1e5b6:	1c5a      	adds	r2, r3, #1
   1e5b8:	9201      	str	r2, [sp, #4]
   1e5ba:	2e00      	cmp	r6, #0
   1e5bc:	d128      	bne.n	1e610 <__register_exitproc+0x8c>
   1e5be:	9a01      	ldr	r2, [sp, #4]
   1e5c0:	3302      	adds	r3, #2
   1e5c2:	009b      	lsls	r3, r3, #2
   1e5c4:	6042      	str	r2, [r0, #4]
   1e5c6:	501f      	str	r7, [r3, r0]
   1e5c8:	6828      	ldr	r0, [r5, #0]
   1e5ca:	f7ff f96d 	bl	1d8a8 <__retarget_lock_release_recursive>
   1e5ce:	2000      	movs	r0, #0
   1e5d0:	b003      	add	sp, #12
   1e5d2:	bc3c      	pop	{r2, r3, r4, r5}
   1e5d4:	4690      	mov	r8, r2
   1e5d6:	4699      	mov	r9, r3
   1e5d8:	46a2      	mov	sl, r4
   1e5da:	46ab      	mov	fp, r5
   1e5dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1e5de:	4b25      	ldr	r3, [pc, #148]	; (1e674 <__register_exitproc+0xf0>)
   1e5e0:	2b00      	cmp	r3, #0
   1e5e2:	d03d      	beq.n	1e660 <__register_exitproc+0xdc>
   1e5e4:	20c8      	movs	r0, #200	; 0xc8
   1e5e6:	0040      	lsls	r0, r0, #1
   1e5e8:	f7fb f8d8 	bl	1979c <malloc>
   1e5ec:	2800      	cmp	r0, #0
   1e5ee:	d037      	beq.n	1e660 <__register_exitproc+0xdc>
   1e5f0:	22a4      	movs	r2, #164	; 0xa4
   1e5f2:	2300      	movs	r3, #0
   1e5f4:	0052      	lsls	r2, r2, #1
   1e5f6:	58a1      	ldr	r1, [r4, r2]
   1e5f8:	6043      	str	r3, [r0, #4]
   1e5fa:	6001      	str	r1, [r0, #0]
   1e5fc:	50a0      	str	r0, [r4, r2]
   1e5fe:	3240      	adds	r2, #64	; 0x40
   1e600:	5083      	str	r3, [r0, r2]
   1e602:	3204      	adds	r2, #4
   1e604:	5083      	str	r3, [r0, r2]
   1e606:	3301      	adds	r3, #1
   1e608:	9301      	str	r3, [sp, #4]
   1e60a:	2300      	movs	r3, #0
   1e60c:	2e00      	cmp	r6, #0
   1e60e:	d0d6      	beq.n	1e5be <__register_exitproc+0x3a>
   1e610:	009a      	lsls	r2, r3, #2
   1e612:	4692      	mov	sl, r2
   1e614:	4482      	add	sl, r0
   1e616:	464a      	mov	r2, r9
   1e618:	2188      	movs	r1, #136	; 0x88
   1e61a:	4654      	mov	r4, sl
   1e61c:	5062      	str	r2, [r4, r1]
   1e61e:	22c4      	movs	r2, #196	; 0xc4
   1e620:	0052      	lsls	r2, r2, #1
   1e622:	4691      	mov	r9, r2
   1e624:	4481      	add	r9, r0
   1e626:	464a      	mov	r2, r9
   1e628:	3987      	subs	r1, #135	; 0x87
   1e62a:	4099      	lsls	r1, r3
   1e62c:	6812      	ldr	r2, [r2, #0]
   1e62e:	468b      	mov	fp, r1
   1e630:	430a      	orrs	r2, r1
   1e632:	4694      	mov	ip, r2
   1e634:	464a      	mov	r2, r9
   1e636:	4661      	mov	r1, ip
   1e638:	6011      	str	r1, [r2, #0]
   1e63a:	2284      	movs	r2, #132	; 0x84
   1e63c:	4641      	mov	r1, r8
   1e63e:	0052      	lsls	r2, r2, #1
   1e640:	50a1      	str	r1, [r4, r2]
   1e642:	2e02      	cmp	r6, #2
   1e644:	d1bb      	bne.n	1e5be <__register_exitproc+0x3a>
   1e646:	0002      	movs	r2, r0
   1e648:	465c      	mov	r4, fp
   1e64a:	328d      	adds	r2, #141	; 0x8d
   1e64c:	32ff      	adds	r2, #255	; 0xff
   1e64e:	6811      	ldr	r1, [r2, #0]
   1e650:	430c      	orrs	r4, r1
   1e652:	6014      	str	r4, [r2, #0]
   1e654:	e7b3      	b.n	1e5be <__register_exitproc+0x3a>
   1e656:	0020      	movs	r0, r4
   1e658:	304d      	adds	r0, #77	; 0x4d
   1e65a:	30ff      	adds	r0, #255	; 0xff
   1e65c:	50e0      	str	r0, [r4, r3]
   1e65e:	e7a7      	b.n	1e5b0 <__register_exitproc+0x2c>
   1e660:	6828      	ldr	r0, [r5, #0]
   1e662:	f7ff f921 	bl	1d8a8 <__retarget_lock_release_recursive>
   1e666:	2001      	movs	r0, #1
   1e668:	4240      	negs	r0, r0
   1e66a:	e7b1      	b.n	1e5d0 <__register_exitproc+0x4c>
   1e66c:	200009c4 	.word	0x200009c4
   1e670:	00020574 	.word	0x00020574
   1e674:	0001979d 	.word	0x0001979d

0001e678 <_calloc_r>:
   1e678:	b510      	push	{r4, lr}
   1e67a:	4351      	muls	r1, r2
   1e67c:	f7fb f8a2 	bl	197c4 <_malloc_r>
   1e680:	1e04      	subs	r4, r0, #0
   1e682:	d01c      	beq.n	1e6be <_calloc_r+0x46>
   1e684:	0003      	movs	r3, r0
   1e686:	3b08      	subs	r3, #8
   1e688:	685a      	ldr	r2, [r3, #4]
   1e68a:	2303      	movs	r3, #3
   1e68c:	439a      	bics	r2, r3
   1e68e:	3a04      	subs	r2, #4
   1e690:	2a24      	cmp	r2, #36	; 0x24
   1e692:	d816      	bhi.n	1e6c2 <_calloc_r+0x4a>
   1e694:	0003      	movs	r3, r0
   1e696:	2a13      	cmp	r2, #19
   1e698:	d90d      	bls.n	1e6b6 <_calloc_r+0x3e>
   1e69a:	2100      	movs	r1, #0
   1e69c:	3308      	adds	r3, #8
   1e69e:	6001      	str	r1, [r0, #0]
   1e6a0:	6041      	str	r1, [r0, #4]
   1e6a2:	2a1b      	cmp	r2, #27
   1e6a4:	d907      	bls.n	1e6b6 <_calloc_r+0x3e>
   1e6a6:	6081      	str	r1, [r0, #8]
   1e6a8:	60c1      	str	r1, [r0, #12]
   1e6aa:	2a24      	cmp	r2, #36	; 0x24
   1e6ac:	d10d      	bne.n	1e6ca <_calloc_r+0x52>
   1e6ae:	0003      	movs	r3, r0
   1e6b0:	6101      	str	r1, [r0, #16]
   1e6b2:	3318      	adds	r3, #24
   1e6b4:	6141      	str	r1, [r0, #20]
   1e6b6:	2200      	movs	r2, #0
   1e6b8:	601a      	str	r2, [r3, #0]
   1e6ba:	605a      	str	r2, [r3, #4]
   1e6bc:	609a      	str	r2, [r3, #8]
   1e6be:	0020      	movs	r0, r4
   1e6c0:	bd10      	pop	{r4, pc}
   1e6c2:	2100      	movs	r1, #0
   1e6c4:	f7fb fc00 	bl	19ec8 <memset>
   1e6c8:	e7f9      	b.n	1e6be <_calloc_r+0x46>
   1e6ca:	0003      	movs	r3, r0
   1e6cc:	3310      	adds	r3, #16
   1e6ce:	e7f2      	b.n	1e6b6 <_calloc_r+0x3e>

0001e6d0 <_close_r>:
   1e6d0:	2300      	movs	r3, #0
   1e6d2:	b570      	push	{r4, r5, r6, lr}
   1e6d4:	4c06      	ldr	r4, [pc, #24]	; (1e6f0 <_close_r+0x20>)
   1e6d6:	0005      	movs	r5, r0
   1e6d8:	0008      	movs	r0, r1
   1e6da:	6023      	str	r3, [r4, #0]
   1e6dc:	f7e9 f9d0 	bl	7a80 <_close>
   1e6e0:	1c43      	adds	r3, r0, #1
   1e6e2:	d000      	beq.n	1e6e6 <_close_r+0x16>
   1e6e4:	bd70      	pop	{r4, r5, r6, pc}
   1e6e6:	6823      	ldr	r3, [r4, #0]
   1e6e8:	2b00      	cmp	r3, #0
   1e6ea:	d0fb      	beq.n	1e6e4 <_close_r+0x14>
   1e6ec:	602b      	str	r3, [r5, #0]
   1e6ee:	e7f9      	b.n	1e6e4 <_close_r+0x14>
   1e6f0:	20002fe4 	.word	0x20002fe4

0001e6f4 <_fclose_r>:
   1e6f4:	b570      	push	{r4, r5, r6, lr}
   1e6f6:	0005      	movs	r5, r0
   1e6f8:	1e0c      	subs	r4, r1, #0
   1e6fa:	d040      	beq.n	1e77e <_fclose_r+0x8a>
   1e6fc:	2800      	cmp	r0, #0
   1e6fe:	d002      	beq.n	1e706 <_fclose_r+0x12>
   1e700:	6b83      	ldr	r3, [r0, #56]	; 0x38
   1e702:	2b00      	cmp	r3, #0
   1e704:	d03e      	beq.n	1e784 <_fclose_r+0x90>
   1e706:	2601      	movs	r6, #1
   1e708:	6e63      	ldr	r3, [r4, #100]	; 0x64
   1e70a:	4233      	tst	r3, r6
   1e70c:	d133      	bne.n	1e776 <_fclose_r+0x82>
   1e70e:	89a3      	ldrh	r3, [r4, #12]
   1e710:	059b      	lsls	r3, r3, #22
   1e712:	d543      	bpl.n	1e79c <_fclose_r+0xa8>
   1e714:	0021      	movs	r1, r4
   1e716:	0028      	movs	r0, r5
   1e718:	f7fe fc80 	bl	1d01c <__sflush_r>
   1e71c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   1e71e:	0006      	movs	r6, r0
   1e720:	2b00      	cmp	r3, #0
   1e722:	d004      	beq.n	1e72e <_fclose_r+0x3a>
   1e724:	69e1      	ldr	r1, [r4, #28]
   1e726:	0028      	movs	r0, r5
   1e728:	4798      	blx	r3
   1e72a:	2800      	cmp	r0, #0
   1e72c:	db44      	blt.n	1e7b8 <_fclose_r+0xc4>
   1e72e:	89a3      	ldrh	r3, [r4, #12]
   1e730:	061b      	lsls	r3, r3, #24
   1e732:	d42a      	bmi.n	1e78a <_fclose_r+0x96>
   1e734:	6b21      	ldr	r1, [r4, #48]	; 0x30
   1e736:	2900      	cmp	r1, #0
   1e738:	d008      	beq.n	1e74c <_fclose_r+0x58>
   1e73a:	0023      	movs	r3, r4
   1e73c:	3340      	adds	r3, #64	; 0x40
   1e73e:	4299      	cmp	r1, r3
   1e740:	d002      	beq.n	1e748 <_fclose_r+0x54>
   1e742:	0028      	movs	r0, r5
   1e744:	f7fe fe16 	bl	1d374 <_free_r>
   1e748:	2300      	movs	r3, #0
   1e74a:	6323      	str	r3, [r4, #48]	; 0x30
   1e74c:	6c61      	ldr	r1, [r4, #68]	; 0x44
   1e74e:	2900      	cmp	r1, #0
   1e750:	d004      	beq.n	1e75c <_fclose_r+0x68>
   1e752:	0028      	movs	r0, r5
   1e754:	f7fe fe0e 	bl	1d374 <_free_r>
   1e758:	2300      	movs	r3, #0
   1e75a:	6463      	str	r3, [r4, #68]	; 0x44
   1e75c:	f7fe fd90 	bl	1d280 <__sfp_lock_acquire>
   1e760:	2300      	movs	r3, #0
   1e762:	81a3      	strh	r3, [r4, #12]
   1e764:	6e63      	ldr	r3, [r4, #100]	; 0x64
   1e766:	07db      	lsls	r3, r3, #31
   1e768:	d514      	bpl.n	1e794 <_fclose_r+0xa0>
   1e76a:	6da0      	ldr	r0, [r4, #88]	; 0x58
   1e76c:	f7ff f898 	bl	1d8a0 <__retarget_lock_close_recursive>
   1e770:	f7fe fd8e 	bl	1d290 <__sfp_lock_release>
   1e774:	e004      	b.n	1e780 <_fclose_r+0x8c>
   1e776:	220c      	movs	r2, #12
   1e778:	5ea3      	ldrsh	r3, [r4, r2]
   1e77a:	2b00      	cmp	r3, #0
   1e77c:	d1ca      	bne.n	1e714 <_fclose_r+0x20>
   1e77e:	2600      	movs	r6, #0
   1e780:	0030      	movs	r0, r6
   1e782:	bd70      	pop	{r4, r5, r6, pc}
   1e784:	f7fe fd4c 	bl	1d220 <__sinit>
   1e788:	e7bd      	b.n	1e706 <_fclose_r+0x12>
   1e78a:	6921      	ldr	r1, [r4, #16]
   1e78c:	0028      	movs	r0, r5
   1e78e:	f7fe fdf1 	bl	1d374 <_free_r>
   1e792:	e7cf      	b.n	1e734 <_fclose_r+0x40>
   1e794:	6da0      	ldr	r0, [r4, #88]	; 0x58
   1e796:	f7ff f887 	bl	1d8a8 <__retarget_lock_release_recursive>
   1e79a:	e7e6      	b.n	1e76a <_fclose_r+0x76>
   1e79c:	6da0      	ldr	r0, [r4, #88]	; 0x58
   1e79e:	f7ff f881 	bl	1d8a4 <__retarget_lock_acquire_recursive>
   1e7a2:	220c      	movs	r2, #12
   1e7a4:	5ea3      	ldrsh	r3, [r4, r2]
   1e7a6:	2b00      	cmp	r3, #0
   1e7a8:	d1b4      	bne.n	1e714 <_fclose_r+0x20>
   1e7aa:	6e63      	ldr	r3, [r4, #100]	; 0x64
   1e7ac:	401e      	ands	r6, r3
   1e7ae:	d1e6      	bne.n	1e77e <_fclose_r+0x8a>
   1e7b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
   1e7b2:	f7ff f879 	bl	1d8a8 <__retarget_lock_release_recursive>
   1e7b6:	e7e3      	b.n	1e780 <_fclose_r+0x8c>
   1e7b8:	2601      	movs	r6, #1
   1e7ba:	4276      	negs	r6, r6
   1e7bc:	e7b7      	b.n	1e72e <_fclose_r+0x3a>
   1e7be:	46c0      	nop			; (mov r8, r8)

0001e7c0 <__fputwc>:
   1e7c0:	b5f0      	push	{r4, r5, r6, r7, lr}
   1e7c2:	46ce      	mov	lr, r9
   1e7c4:	4647      	mov	r7, r8
   1e7c6:	b580      	push	{r7, lr}
   1e7c8:	b085      	sub	sp, #20
   1e7ca:	4680      	mov	r8, r0
   1e7cc:	4689      	mov	r9, r1
   1e7ce:	0014      	movs	r4, r2
   1e7d0:	f7fa ffc2 	bl	19758 <__locale_mb_cur_max>
   1e7d4:	2801      	cmp	r0, #1
   1e7d6:	d031      	beq.n	1e83c <__fputwc+0x7c>
   1e7d8:	0023      	movs	r3, r4
   1e7da:	af03      	add	r7, sp, #12
   1e7dc:	335c      	adds	r3, #92	; 0x5c
   1e7de:	464a      	mov	r2, r9
   1e7e0:	0039      	movs	r1, r7
   1e7e2:	4640      	mov	r0, r8
   1e7e4:	f000 f912 	bl	1ea0c <_wcrtomb_r>
   1e7e8:	0006      	movs	r6, r0
   1e7ea:	1c43      	adds	r3, r0, #1
   1e7ec:	d021      	beq.n	1e832 <__fputwc+0x72>
   1e7ee:	2800      	cmp	r0, #0
   1e7f0:	d030      	beq.n	1e854 <__fputwc+0x94>
   1e7f2:	7839      	ldrb	r1, [r7, #0]
   1e7f4:	2500      	movs	r5, #0
   1e7f6:	e007      	b.n	1e808 <__fputwc+0x48>
   1e7f8:	6823      	ldr	r3, [r4, #0]
   1e7fa:	1c5a      	adds	r2, r3, #1
   1e7fc:	6022      	str	r2, [r4, #0]
   1e7fe:	7019      	strb	r1, [r3, #0]
   1e800:	3501      	adds	r5, #1
   1e802:	42b5      	cmp	r5, r6
   1e804:	d226      	bcs.n	1e854 <__fputwc+0x94>
   1e806:	5d79      	ldrb	r1, [r7, r5]
   1e808:	68a3      	ldr	r3, [r4, #8]
   1e80a:	3b01      	subs	r3, #1
   1e80c:	60a3      	str	r3, [r4, #8]
   1e80e:	2b00      	cmp	r3, #0
   1e810:	daf2      	bge.n	1e7f8 <__fputwc+0x38>
   1e812:	69a2      	ldr	r2, [r4, #24]
   1e814:	4293      	cmp	r3, r2
   1e816:	db01      	blt.n	1e81c <__fputwc+0x5c>
   1e818:	290a      	cmp	r1, #10
   1e81a:	d1ed      	bne.n	1e7f8 <__fputwc+0x38>
   1e81c:	0022      	movs	r2, r4
   1e81e:	4640      	mov	r0, r8
   1e820:	f000 f896 	bl	1e950 <__swbuf_r>
   1e824:	1c43      	adds	r3, r0, #1
   1e826:	d1eb      	bne.n	1e800 <__fputwc+0x40>
   1e828:	b005      	add	sp, #20
   1e82a:	bc0c      	pop	{r2, r3}
   1e82c:	4690      	mov	r8, r2
   1e82e:	4699      	mov	r9, r3
   1e830:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1e832:	2240      	movs	r2, #64	; 0x40
   1e834:	89a3      	ldrh	r3, [r4, #12]
   1e836:	4313      	orrs	r3, r2
   1e838:	81a3      	strh	r3, [r4, #12]
   1e83a:	e7f5      	b.n	1e828 <__fputwc+0x68>
   1e83c:	464b      	mov	r3, r9
   1e83e:	3b01      	subs	r3, #1
   1e840:	2bfe      	cmp	r3, #254	; 0xfe
   1e842:	d8c9      	bhi.n	1e7d8 <__fputwc+0x18>
   1e844:	466a      	mov	r2, sp
   1e846:	464b      	mov	r3, r9
   1e848:	71d3      	strb	r3, [r2, #7]
   1e84a:	79d1      	ldrb	r1, [r2, #7]
   1e84c:	af03      	add	r7, sp, #12
   1e84e:	7039      	strb	r1, [r7, #0]
   1e850:	2601      	movs	r6, #1
   1e852:	e7cf      	b.n	1e7f4 <__fputwc+0x34>
   1e854:	4648      	mov	r0, r9
   1e856:	e7e7      	b.n	1e828 <__fputwc+0x68>

0001e858 <_fputwc_r>:
   1e858:	6e53      	ldr	r3, [r2, #100]	; 0x64
   1e85a:	b570      	push	{r4, r5, r6, lr}
   1e85c:	0005      	movs	r5, r0
   1e85e:	000e      	movs	r6, r1
   1e860:	0014      	movs	r4, r2
   1e862:	07db      	lsls	r3, r3, #31
   1e864:	d41e      	bmi.n	1e8a4 <_fputwc_r+0x4c>
   1e866:	230c      	movs	r3, #12
   1e868:	5ed2      	ldrsh	r2, [r2, r3]
   1e86a:	b291      	uxth	r1, r2
   1e86c:	058b      	lsls	r3, r1, #22
   1e86e:	d516      	bpl.n	1e89e <_fputwc_r+0x46>
   1e870:	2380      	movs	r3, #128	; 0x80
   1e872:	019b      	lsls	r3, r3, #6
   1e874:	4219      	tst	r1, r3
   1e876:	d104      	bne.n	1e882 <_fputwc_r+0x2a>
   1e878:	431a      	orrs	r2, r3
   1e87a:	81a2      	strh	r2, [r4, #12]
   1e87c:	6e62      	ldr	r2, [r4, #100]	; 0x64
   1e87e:	4313      	orrs	r3, r2
   1e880:	6663      	str	r3, [r4, #100]	; 0x64
   1e882:	0028      	movs	r0, r5
   1e884:	0022      	movs	r2, r4
   1e886:	0031      	movs	r1, r6
   1e888:	f7ff ff9a 	bl	1e7c0 <__fputwc>
   1e88c:	6e63      	ldr	r3, [r4, #100]	; 0x64
   1e88e:	0005      	movs	r5, r0
   1e890:	07db      	lsls	r3, r3, #31
   1e892:	d402      	bmi.n	1e89a <_fputwc_r+0x42>
   1e894:	89a3      	ldrh	r3, [r4, #12]
   1e896:	059b      	lsls	r3, r3, #22
   1e898:	d508      	bpl.n	1e8ac <_fputwc_r+0x54>
   1e89a:	0028      	movs	r0, r5
   1e89c:	bd70      	pop	{r4, r5, r6, pc}
   1e89e:	6da0      	ldr	r0, [r4, #88]	; 0x58
   1e8a0:	f7ff f800 	bl	1d8a4 <__retarget_lock_acquire_recursive>
   1e8a4:	230c      	movs	r3, #12
   1e8a6:	5ee2      	ldrsh	r2, [r4, r3]
   1e8a8:	b291      	uxth	r1, r2
   1e8aa:	e7e1      	b.n	1e870 <_fputwc_r+0x18>
   1e8ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
   1e8ae:	f7fe fffb 	bl	1d8a8 <__retarget_lock_release_recursive>
   1e8b2:	e7f2      	b.n	1e89a <_fputwc_r+0x42>

0001e8b4 <_fstat_r>:
   1e8b4:	2300      	movs	r3, #0
   1e8b6:	b570      	push	{r4, r5, r6, lr}
   1e8b8:	4c07      	ldr	r4, [pc, #28]	; (1e8d8 <_fstat_r+0x24>)
   1e8ba:	0005      	movs	r5, r0
   1e8bc:	0008      	movs	r0, r1
   1e8be:	0011      	movs	r1, r2
   1e8c0:	6023      	str	r3, [r4, #0]
   1e8c2:	f7e9 f8e0 	bl	7a86 <_fstat>
   1e8c6:	1c43      	adds	r3, r0, #1
   1e8c8:	d000      	beq.n	1e8cc <_fstat_r+0x18>
   1e8ca:	bd70      	pop	{r4, r5, r6, pc}
   1e8cc:	6823      	ldr	r3, [r4, #0]
   1e8ce:	2b00      	cmp	r3, #0
   1e8d0:	d0fb      	beq.n	1e8ca <_fstat_r+0x16>
   1e8d2:	602b      	str	r3, [r5, #0]
   1e8d4:	e7f9      	b.n	1e8ca <_fstat_r+0x16>
   1e8d6:	46c0      	nop			; (mov r8, r8)
   1e8d8:	20002fe4 	.word	0x20002fe4

0001e8dc <_isatty_r>:
   1e8dc:	2300      	movs	r3, #0
   1e8de:	b570      	push	{r4, r5, r6, lr}
   1e8e0:	4c06      	ldr	r4, [pc, #24]	; (1e8fc <_isatty_r+0x20>)
   1e8e2:	0005      	movs	r5, r0
   1e8e4:	0008      	movs	r0, r1
   1e8e6:	6023      	str	r3, [r4, #0]
   1e8e8:	f7e9 f8d2 	bl	7a90 <_isatty>
   1e8ec:	1c43      	adds	r3, r0, #1
   1e8ee:	d000      	beq.n	1e8f2 <_isatty_r+0x16>
   1e8f0:	bd70      	pop	{r4, r5, r6, pc}
   1e8f2:	6823      	ldr	r3, [r4, #0]
   1e8f4:	2b00      	cmp	r3, #0
   1e8f6:	d0fb      	beq.n	1e8f0 <_isatty_r+0x14>
   1e8f8:	602b      	str	r3, [r5, #0]
   1e8fa:	e7f9      	b.n	1e8f0 <_isatty_r+0x14>
   1e8fc:	20002fe4 	.word	0x20002fe4

0001e900 <_lseek_r>:
   1e900:	b570      	push	{r4, r5, r6, lr}
   1e902:	0005      	movs	r5, r0
   1e904:	0008      	movs	r0, r1
   1e906:	0011      	movs	r1, r2
   1e908:	2200      	movs	r2, #0
   1e90a:	4c06      	ldr	r4, [pc, #24]	; (1e924 <_lseek_r+0x24>)
   1e90c:	6022      	str	r2, [r4, #0]
   1e90e:	001a      	movs	r2, r3
   1e910:	f7e9 f8c0 	bl	7a94 <_lseek>
   1e914:	1c43      	adds	r3, r0, #1
   1e916:	d000      	beq.n	1e91a <_lseek_r+0x1a>
   1e918:	bd70      	pop	{r4, r5, r6, pc}
   1e91a:	6823      	ldr	r3, [r4, #0]
   1e91c:	2b00      	cmp	r3, #0
   1e91e:	d0fb      	beq.n	1e918 <_lseek_r+0x18>
   1e920:	602b      	str	r3, [r5, #0]
   1e922:	e7f9      	b.n	1e918 <_lseek_r+0x18>
   1e924:	20002fe4 	.word	0x20002fe4

0001e928 <_read_r>:
   1e928:	b570      	push	{r4, r5, r6, lr}
   1e92a:	0005      	movs	r5, r0
   1e92c:	0008      	movs	r0, r1
   1e92e:	0011      	movs	r1, r2
   1e930:	2200      	movs	r2, #0
   1e932:	4c06      	ldr	r4, [pc, #24]	; (1e94c <_read_r+0x24>)
   1e934:	6022      	str	r2, [r4, #0]
   1e936:	001a      	movs	r2, r3
   1e938:	f7e9 f846 	bl	79c8 <_read>
   1e93c:	1c43      	adds	r3, r0, #1
   1e93e:	d000      	beq.n	1e942 <_read_r+0x1a>
   1e940:	bd70      	pop	{r4, r5, r6, pc}
   1e942:	6823      	ldr	r3, [r4, #0]
   1e944:	2b00      	cmp	r3, #0
   1e946:	d0fb      	beq.n	1e940 <_read_r+0x18>
   1e948:	602b      	str	r3, [r5, #0]
   1e94a:	e7f9      	b.n	1e940 <_read_r+0x18>
   1e94c:	20002fe4 	.word	0x20002fe4

0001e950 <__swbuf_r>:
   1e950:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1e952:	0006      	movs	r6, r0
   1e954:	000d      	movs	r5, r1
   1e956:	0014      	movs	r4, r2
   1e958:	2800      	cmp	r0, #0
   1e95a:	d002      	beq.n	1e962 <__swbuf_r+0x12>
   1e95c:	6b83      	ldr	r3, [r0, #56]	; 0x38
   1e95e:	2b00      	cmp	r3, #0
   1e960:	d04e      	beq.n	1ea00 <__swbuf_r+0xb0>
   1e962:	69a3      	ldr	r3, [r4, #24]
   1e964:	60a3      	str	r3, [r4, #8]
   1e966:	230c      	movs	r3, #12
   1e968:	5ee0      	ldrsh	r0, [r4, r3]
   1e96a:	b281      	uxth	r1, r0
   1e96c:	070b      	lsls	r3, r1, #28
   1e96e:	d53c      	bpl.n	1e9ea <__swbuf_r+0x9a>
   1e970:	6923      	ldr	r3, [r4, #16]
   1e972:	2b00      	cmp	r3, #0
   1e974:	d039      	beq.n	1e9ea <__swbuf_r+0x9a>
   1e976:	22ff      	movs	r2, #255	; 0xff
   1e978:	b2ef      	uxtb	r7, r5
   1e97a:	4015      	ands	r5, r2
   1e97c:	2280      	movs	r2, #128	; 0x80
   1e97e:	0192      	lsls	r2, r2, #6
   1e980:	4211      	tst	r1, r2
   1e982:	d015      	beq.n	1e9b0 <__swbuf_r+0x60>
   1e984:	6822      	ldr	r2, [r4, #0]
   1e986:	6961      	ldr	r1, [r4, #20]
   1e988:	1ad3      	subs	r3, r2, r3
   1e98a:	428b      	cmp	r3, r1
   1e98c:	da1b      	bge.n	1e9c6 <__swbuf_r+0x76>
   1e98e:	3301      	adds	r3, #1
   1e990:	68a1      	ldr	r1, [r4, #8]
   1e992:	3901      	subs	r1, #1
   1e994:	60a1      	str	r1, [r4, #8]
   1e996:	1c51      	adds	r1, r2, #1
   1e998:	6021      	str	r1, [r4, #0]
   1e99a:	7017      	strb	r7, [r2, #0]
   1e99c:	6962      	ldr	r2, [r4, #20]
   1e99e:	429a      	cmp	r2, r3
   1e9a0:	d01a      	beq.n	1e9d8 <__swbuf_r+0x88>
   1e9a2:	89a3      	ldrh	r3, [r4, #12]
   1e9a4:	07db      	lsls	r3, r3, #31
   1e9a6:	d501      	bpl.n	1e9ac <__swbuf_r+0x5c>
   1e9a8:	2d0a      	cmp	r5, #10
   1e9aa:	d015      	beq.n	1e9d8 <__swbuf_r+0x88>
   1e9ac:	0028      	movs	r0, r5
   1e9ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1e9b0:	4302      	orrs	r2, r0
   1e9b2:	6e61      	ldr	r1, [r4, #100]	; 0x64
   1e9b4:	81a2      	strh	r2, [r4, #12]
   1e9b6:	4a14      	ldr	r2, [pc, #80]	; (1ea08 <__swbuf_r+0xb8>)
   1e9b8:	400a      	ands	r2, r1
   1e9ba:	6662      	str	r2, [r4, #100]	; 0x64
   1e9bc:	6961      	ldr	r1, [r4, #20]
   1e9be:	6822      	ldr	r2, [r4, #0]
   1e9c0:	1ad3      	subs	r3, r2, r3
   1e9c2:	428b      	cmp	r3, r1
   1e9c4:	dbe3      	blt.n	1e98e <__swbuf_r+0x3e>
   1e9c6:	0021      	movs	r1, r4
   1e9c8:	0030      	movs	r0, r6
   1e9ca:	f7fe fbcf 	bl	1d16c <_fflush_r>
   1e9ce:	2800      	cmp	r0, #0
   1e9d0:	d108      	bne.n	1e9e4 <__swbuf_r+0x94>
   1e9d2:	6822      	ldr	r2, [r4, #0]
   1e9d4:	2301      	movs	r3, #1
   1e9d6:	e7db      	b.n	1e990 <__swbuf_r+0x40>
   1e9d8:	0021      	movs	r1, r4
   1e9da:	0030      	movs	r0, r6
   1e9dc:	f7fe fbc6 	bl	1d16c <_fflush_r>
   1e9e0:	2800      	cmp	r0, #0
   1e9e2:	d0e3      	beq.n	1e9ac <__swbuf_r+0x5c>
   1e9e4:	2501      	movs	r5, #1
   1e9e6:	426d      	negs	r5, r5
   1e9e8:	e7e0      	b.n	1e9ac <__swbuf_r+0x5c>
   1e9ea:	0021      	movs	r1, r4
   1e9ec:	0030      	movs	r0, r6
   1e9ee:	f7fd fa29 	bl	1be44 <__swsetup_r>
   1e9f2:	2800      	cmp	r0, #0
   1e9f4:	d1f6      	bne.n	1e9e4 <__swbuf_r+0x94>
   1e9f6:	230c      	movs	r3, #12
   1e9f8:	5ee0      	ldrsh	r0, [r4, r3]
   1e9fa:	6923      	ldr	r3, [r4, #16]
   1e9fc:	b281      	uxth	r1, r0
   1e9fe:	e7ba      	b.n	1e976 <__swbuf_r+0x26>
   1ea00:	f7fe fc0e 	bl	1d220 <__sinit>
   1ea04:	e7ad      	b.n	1e962 <__swbuf_r+0x12>
   1ea06:	46c0      	nop			; (mov r8, r8)
   1ea08:	ffffdfff 	.word	0xffffdfff

0001ea0c <_wcrtomb_r>:
   1ea0c:	b570      	push	{r4, r5, r6, lr}
   1ea0e:	001d      	movs	r5, r3
   1ea10:	4b11      	ldr	r3, [pc, #68]	; (1ea58 <_wcrtomb_r+0x4c>)
   1ea12:	b084      	sub	sp, #16
   1ea14:	681b      	ldr	r3, [r3, #0]
   1ea16:	0004      	movs	r4, r0
   1ea18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   1ea1a:	2900      	cmp	r1, #0
   1ea1c:	d00e      	beq.n	1ea3c <_wcrtomb_r+0x30>
   1ea1e:	2b00      	cmp	r3, #0
   1ea20:	d016      	beq.n	1ea50 <_wcrtomb_r+0x44>
   1ea22:	20e0      	movs	r0, #224	; 0xe0
   1ea24:	581e      	ldr	r6, [r3, r0]
   1ea26:	002b      	movs	r3, r5
   1ea28:	0020      	movs	r0, r4
   1ea2a:	47b0      	blx	r6
   1ea2c:	1c43      	adds	r3, r0, #1
   1ea2e:	d103      	bne.n	1ea38 <_wcrtomb_r+0x2c>
   1ea30:	2300      	movs	r3, #0
   1ea32:	602b      	str	r3, [r5, #0]
   1ea34:	338a      	adds	r3, #138	; 0x8a
   1ea36:	6023      	str	r3, [r4, #0]
   1ea38:	b004      	add	sp, #16
   1ea3a:	bd70      	pop	{r4, r5, r6, pc}
   1ea3c:	2b00      	cmp	r3, #0
   1ea3e:	d009      	beq.n	1ea54 <_wcrtomb_r+0x48>
   1ea40:	22e0      	movs	r2, #224	; 0xe0
   1ea42:	a901      	add	r1, sp, #4
   1ea44:	589e      	ldr	r6, [r3, r2]
   1ea46:	0020      	movs	r0, r4
   1ea48:	002b      	movs	r3, r5
   1ea4a:	2200      	movs	r2, #0
   1ea4c:	47b0      	blx	r6
   1ea4e:	e7ed      	b.n	1ea2c <_wcrtomb_r+0x20>
   1ea50:	4b02      	ldr	r3, [pc, #8]	; (1ea5c <_wcrtomb_r+0x50>)
   1ea52:	e7e6      	b.n	1ea22 <_wcrtomb_r+0x16>
   1ea54:	4b01      	ldr	r3, [pc, #4]	; (1ea5c <_wcrtomb_r+0x50>)
   1ea56:	e7f3      	b.n	1ea40 <_wcrtomb_r+0x34>
   1ea58:	20000018 	.word	0x20000018
   1ea5c:	20000448 	.word	0x20000448

0001ea60 <__aeabi_dcmpun>:
   1ea60:	b570      	push	{r4, r5, r6, lr}
   1ea62:	4e0e      	ldr	r6, [pc, #56]	; (1ea9c <__aeabi_dcmpun+0x3c>)
   1ea64:	030d      	lsls	r5, r1, #12
   1ea66:	031c      	lsls	r4, r3, #12
   1ea68:	0049      	lsls	r1, r1, #1
   1ea6a:	005b      	lsls	r3, r3, #1
   1ea6c:	0b2d      	lsrs	r5, r5, #12
   1ea6e:	0d49      	lsrs	r1, r1, #21
   1ea70:	0b24      	lsrs	r4, r4, #12
   1ea72:	0d5b      	lsrs	r3, r3, #21
   1ea74:	42b1      	cmp	r1, r6
   1ea76:	d004      	beq.n	1ea82 <__aeabi_dcmpun+0x22>
   1ea78:	4908      	ldr	r1, [pc, #32]	; (1ea9c <__aeabi_dcmpun+0x3c>)
   1ea7a:	2000      	movs	r0, #0
   1ea7c:	428b      	cmp	r3, r1
   1ea7e:	d008      	beq.n	1ea92 <__aeabi_dcmpun+0x32>
   1ea80:	bd70      	pop	{r4, r5, r6, pc}
   1ea82:	4305      	orrs	r5, r0
   1ea84:	2001      	movs	r0, #1
   1ea86:	2d00      	cmp	r5, #0
   1ea88:	d1fa      	bne.n	1ea80 <__aeabi_dcmpun+0x20>
   1ea8a:	4904      	ldr	r1, [pc, #16]	; (1ea9c <__aeabi_dcmpun+0x3c>)
   1ea8c:	2000      	movs	r0, #0
   1ea8e:	428b      	cmp	r3, r1
   1ea90:	d1f6      	bne.n	1ea80 <__aeabi_dcmpun+0x20>
   1ea92:	4314      	orrs	r4, r2
   1ea94:	0020      	movs	r0, r4
   1ea96:	1e44      	subs	r4, r0, #1
   1ea98:	41a0      	sbcs	r0, r4
   1ea9a:	e7f1      	b.n	1ea80 <__aeabi_dcmpun+0x20>
   1ea9c:	000007ff 	.word	0x000007ff

0001eaa0 <k.4571>:
   1eaa0:	428a2f98 71374491 b5c0fbcf e9b5dba5     ./.B.D7q........
   1eab0:	3956c25b 59f111f1 923f82a4 ab1c5ed5     [.V9...Y..?..^..
   1eac0:	d807aa98 12835b01 243185be 550c7dc3     .....[....1$.}.U
   1ead0:	72be5d74 80deb1fe 9bdc06a7 c19bf174     t].r........t...
   1eae0:	e49b69c1 efbe4786 0fc19dc6 240ca1cc     .i...G.........$
   1eaf0:	2de92c6f 4a7484aa 5cb0a9dc 76f988da     o,.-..tJ...\...v
   1eb00:	983e5152 a831c66d b00327c8 bf597fc7     RQ>.m.1..'....Y.
   1eb10:	c6e00bf3 d5a79147 06ca6351 14292967     ....G...Qc..g)).
   1eb20:	27b70a85 2e1b2138 4d2c6dfc 53380d13     ...'8!...m,M..8S
   1eb30:	650a7354 766a0abb 81c2c92e 92722c85     Ts.e..jv.....,r.
   1eb40:	a2bfe8a1 a81a664b c24b8b70 c76c51a3     ....Kf..p.K..Ql.
   1eb50:	d192e819 d6990624 f40e3585 106aa070     ....$....5..p.j.
   1eb60:	19a4c116 1e376c08 2748774c 34b0bcb5     .....l7.LwH'...4
   1eb70:	391c0cb3 4ed8aa4a 5b9cca4f 682e6ff3     ...9J..NO..[.o.h
   1eb80:	748f82ee 78a5636f 84c87814 8cc70208     ...toc.x.x......
   1eb90:	90befffa a4506ceb bef9a3f7 c67178f2     .....lP......xq.
   1eba0:	43331104 40c40704 0000147a 00001504     ..3C...@z.......
   1ebb0:	00001510 0000151c 00001528 00001534     ........(...4...
   1ebc0:	52455355 414f4220 00004452 5f534c4d     USER BOARD..MLS_
   1ebd0:	5f4b4453 5f305f31 00345f50 20626546     SDK_1_0_P_4.Feb 
   1ebe0:	32203631 00323230 333a3531 37323a39     16 2022.15:39:27
	...

0001ebf1 <gParserStartCmdSize>:
   1ebf1:	a4000002                                         ...

0001ebf4 <maParserBaseCmd>:
   1ebf4:	0001f2a4 0001ec14 00000000 00000009     ................
   1ec04:	0001f2a8 0001f1c4 00000000 00000005     ................

0001ec14 <maParserLoraCmd>:
   1ec14:	0001f2c0 00000000 000022e9 00000100     ........."......
   1ec24:	0001f334 00000000 000023e5 00000100     4........#......
   1ec34:	0001f33c 00000000 00002421 00000300     <.......!$......
   1ec44:	0001f2ac 0001ef94 00000000 00000022     ............"...
   1ec54:	0001f2c8 0001ecd4 00000000 00000028     ............(...
   1ec64:	0001f340 00000000 00002cb1 00000000     @........,......
   1ec74:	0001f348 00000000 00002cd5 00000000     H........,......
   1ec84:	0001f350 00000000 00002ced 00000000     P........,......
   1ec94:	0001f358 00000000 00002ee5 00000000     X...............

0001eca4 <maParserLoraGetChCmd>:
   1eca4:	0001f554 00000000 000028e5 00000100     T........(......
   1ecb4:	0001f39c 00000000 00002af1 00000100     .........*......
   1ecc4:	0001f55c 00000000 00002bcd 00000100     \........+......

0001ecd4 <maParserLoraGetCmd>:
   1ecd4:	0001f364 00000000 00002509 00000000     d........%......
   1ece4:	0001f368 00000000 00002579 00000000     h.......y%......
   1ecf4:	0001f36c 00000000 00002615 00000000     l........&......
   1ed04:	0001f374 00000000 000026ad 00000000     t........&......
   1ed14:	0001f37c 00000000 00002735 00000000     |.......5'......
   1ed24:	0001f714 0001eca4 00000000 00000003     ................
   1ed34:	0001f384 00000000 00002c7d 00000000     ........},......
   1ed44:	0001f38c 00000000 00002d65 00000000     ........e-......
   1ed54:	0001f390 00000000 000030e1 00000000     .........0......
   1ed64:	0001f39c 00000000 000031ed 00000000     .........1......
   1ed74:	0001f3a4 00000000 00003311 00000000     .........3......
   1ed84:	0001f3ac 00000000 00003345 00000000     ........E3......
   1ed94:	0001f3b4 00000000 00003379 00000000     ........y3......
   1eda4:	0001f3bc 00000000 000033ad 00000000     .........3......
   1edb4:	0001f3c4 00000000 0000341d 00000000     .........4......
   1edc4:	0001f3c8 00000000 00003499 00000000     .........4......
   1edd4:	0001f3d4 00000000 000034cd 00000000     .........4......
   1ede4:	0001f9a4 00000000 00003501 00000000     .........5......
   1edf4:	0001f3e0 00000000 00002ff9 00000000     ........./......
   1ee04:	0001f3e8 00000000 0000302d 00000000     ........-0......
   1ee14:	0001f3f0 00000000 0000305d 00000000     ........]0......
   1ee24:	0001f3f8 00000000 00002e1d 00000000     ................
   1ee34:	0001f3fc 00000000 00003579 00000000     ........y5......
   1ee44:	0001f404 00000000 000035bd 00000000     .........5......
   1ee54:	0001f418 00000000 00003645 00000100     ........E6......
   1ee64:	0001f424 00000000 00003691 00000100     $........6......
   1ee74:	0001f430 00000000 0000372d 00000100     0.......-7......
   1ee84:	0001f440 00000000 00003879 00000100     @.......y8......
   1ee94:	0001f44c 00000000 000038f9 00000100     L........8......
   1eea4:	0001f454 0001ef54 00000000 00000001     T...T...........
   1eeb4:	0001f45c 00000000 00003949 00000000     \.......I9......
   1eec4:	0001f464 00000000 0000397d 00000000     d.......}9......
   1eed4:	0001f470 00000000 000039a9 00000000     p........9......
   1eee4:	0001f478 00000000 000039d5 00000000     x........9......
   1eef4:	0001f4b4 00000000 00003a09 00000000     .........:......
   1ef04:	0001f484 00000000 00003a39 00000000     ........9:......
   1ef14:	0001f490 00000000 00003a45 00000000     ........E:......
   1ef24:	0001f4a0 00000000 00003a51 00000000     ........Q:......
   1ef34:	0001f4b0 00000000 00003a85 00000000     .........:......
   1ef44:	0001f4c4 00000000 00003b31 00000000     ........1;......

0001ef54 <maParserLoraGetSubBandCmd>:
   1ef54:	0001f39c 00000000 000029e1 00000100     .........)......

0001ef64 <maParserLoraSetChCmd>:
   1ef64:	0001f554 00000000 0000286d 00000200     T.......m(......
   1ef74:	0001f39c 00000000 00002a89 00000200     .........*......
   1ef84:	0001f55c 00000000 00002b3d 00000300     \.......=+......

0001ef94 <maParserLoraSetCmd>:
   1ef94:	0001f364 00000000 000024cd 00000100     d........$......
   1efa4:	0001f368 00000000 0000253d 00000100     h.......=%......
   1efb4:	0001f36c 00000000 000025a5 00000100     l........%......
   1efc4:	0001f374 00000000 00002655 00000100     t.......U&......
   1efd4:	0001f37c 00000000 000026dd 00000100     |........&......
   1efe4:	0001f4d8 00000000 00002765 00000100     ........e'......
   1eff4:	0001f4e0 00000000 000027bd 00000100     .........'......
   1f004:	0001f4e8 00000000 00002815 00000100     .........(......
   1f014:	0001f384 00000000 00002c41 00000100     ........A,......
   1f024:	0001f714 0001ef64 00000000 00000003     ....d...........
   1f034:	0001f38c 00000000 00002cf9 00000200     .........,......
   1f044:	0001f4f0 00000000 0000322d 00000100     ........-2......
   1f054:	0001f3a4 00000000 00003279 00000100     ........y2......
   1f064:	0001f3ac 00000000 000032c5 00000100     .........2......
   1f074:	0001f3c4 00000000 000033e1 00000100     .........3......
   1f084:	0001f3c8 00000000 00003449 00000100     ........I4......
   1f094:	0001f4f4 00000000 0000308d 00000100     .........0......
   1f0a4:	0001f3e0 00000000 00002f95 00000100     ........./......
   1f0b4:	0001f3e8 00000000 00002efd 00000100     ................
   1f0c4:	0001f3f0 00000000 00002f49 00000100     ........I/......
   1f0d4:	0001f3f8 00000000 00002dc5 00000500     .........-......
   1f0e4:	0001f3fc 00000000 0000352d 00000100     ........-5......
   1f0f4:	0001f418 00000000 0000361d 00000200     .........6......
   1f104:	0001f430 00000000 000036e1 00000200     0........6......
   1f114:	0001f4fc 00000000 0000378d 00000200     .........7......
   1f124:	0001f50c 00000000 000037dd 00000200     .........7......
   1f134:	0001f440 00000000 0000382d 00000200     @.......-8......
   1f144:	0001f44c 00000000 000038c9 00000200     L........8......
   1f154:	0001f390 00000000 00003115 00000100     .........1......
   1f164:	0001f51c 00000000 00003161 00000100     ........a1......
   1f174:	0001f530 00000000 000031b1 00000100     0........1......
   1f184:	0001f454 0001f1b4 00000000 00000001     T...............
   1f194:	0001f4c4 00000000 00003ab5 00000100     .........:......
   1f1a4:	0001f540 00000000 00003af5 00000100     @........:......

0001f1b4 <maParserLoraSetSubBandCmd>:
   1f1b4:	0001f39c 00000000 00002935 00000200     ........5)......

0001f1c4 <maParserSysCmd>:
   1f1c4:	0001f2ac 0001f294 00000000 00000001     ................
   1f1d4:	0001f2b0 00000000 00003e49 00000000     ........I>......
   1f1e4:	0001f2c0 00000000 00003e2d 00000000     ........->......
   1f1f4:	0001f2c8 0001f214 00000000 00000008     ................
   1f204:	0001f2cc 00000000 00003e6d 00000200     ........m>......

0001f214 <maParserSysGetCmd>:
   1f214:	0001f2d4 00000000 00003c05 00000000     .........<......
   1f224:	0001f2d8 00000000 00003bd9 00000000     .........;......
   1f234:	0001f2e0 00000000 00003c1d 00000000     .........<......
   1f244:	0001f2ec 00000000 00003cad 00000000     .........<......
   1f254:	0001f2f8 00000000 00003cf5 00000000     .........<......
   1f264:	0001f308 00000000 00003d51 00000000     ........Q=......
   1f274:	0001f318 00000000 00003da1 00000000     .........=......
   1f284:	0001f328 00000000 00003e15 00000000     (........>......

0001f294 <maParserSysSetCmd>:
   1f294:	0001f2e0 00000000 00003c4d 00000100     ........M<......
   1f2a4:	0063616d 00737973 00746573 74636166     mac.sys.set.fact
   1f2b4:	5279726f 54455345 00000000 65736572     oryRESET....rese
   1f2c4:	00000074 00746567 65656c73 00000070     t...get.sleep...
   1f2d4:	00726576 75657768 00000069 74737563     ver.hweui...cust
   1f2e4:	61706d6f 006d6172 70797263 6e736f74     omparam.cryptosn
   1f2f4:	00000000 70797263 65646f74 69756576     ....cryptodeveui
   1f304:	00000000 70797263 6f6a6f74 75656e69     ....cryptojoineu
   1f314:	00000069 70797263 6b746f74 666e696d     i...cryptotkminf
   1f324:	0000006f 74737563 64696d6f 00000000     o...customid....
   1f334:	6e696f6a 00000000 00007874 73756170     join....tx..paus
   1f344:	00000065 75736572 0000656d 65766173     e...resume..save
   1f354:	00000000 63726f66 414e4565 00454c42     ....forceENABLE.
   1f364:	00007264 00726461 61766564 00726464     dr..adr.devaddr.
   1f374:	65766564 00006975 6e696f6a 00697565     deveui..joineui.
   1f384:	69727770 00007864 00327872 64676761     pwridx..rx2.aggd
   1f394:	6c637963 00000065 74617473 00007375     cycle...status..
   1f3a4:	78746572 00000000 73706572 00000000     retx....reps....
   1f3b4:	6e67726d 00000000 626e7767 00000000     mrgn....gwnb....
   1f3c4:	00007261 65647872 3179616c 00000000     ar..rxdelay1....
   1f3d4:	65647872 3279616c 00000000 636e7973     rxdelay2....sync
   1f3e4:	00000000 74637075 00000072 74636e64     ....upctr...dnct
   1f3f4:	00000072 0074626c 6c636465 00737361     r...lbt.edclass.
   1f404:	6c636465 73737361 6f707075 64657472     edclasssupported
   1f414:	00000000 7361636d 616e6574 00656c62     ....mcastenable.
   1f424:	7361636d 636e6474 00007274 7361636d     mcastdnctr..mcas
   1f434:	76656474 72646461 00000000 7361636d     tdevaddr....mcas
   1f444:	65726674 00000071 7361636d 00726474     tfreq...mcastdr.
   1f454:	62627573 00646e61 72746b70 00697373     subband.pktrssi.
   1f464:	70667369 69646e65 0000676e 6c647369     isfpending..isdl
   1f474:	006b6361 7473616c 64696863 00000000     ack.lastchid....
   1f484:	72666e63 79727465 00746e63 6e636e75     cnfretrycnt.uncn
   1f494:	74657266 6e637972 00000074 5074786e     fretrycnt...nxtP
   1f4a4:	6f6c7961 69536461 0000657a 6e696f6a     ayloadSize..join
   1f4b4:	79747564 6c637963 6d697465 00000065     dutycycletime...
   1f4c4:	6e696f6a 6b636162 6566666f 6c62616e     joinbackoffenabl
   1f4d4:	00000065 736b776e 0079656b 73707061     e...nwkskey.apps
   1f4e4:	0079656b 6b707061 00007965 00746162     key.appkey..bat.
   1f4f4:	6b6e696c 006b6863 7361636d 6b776e74     linkchk.mcastnwk
   1f504:	79656b73 00000000 7361636d 70706174     skey....mcastapp
   1f514:	79656b73 00000000 70797263 65646f74     skey....cryptode
   1f524:	616e6576 64656c62 00000000 74736574     venabled....test
   1f534:	65646f6d 62616e65 0064656c 4678616d     modeenabled.maxF
   1f544:	50746e63 70557364 61567464 0000006c     cntPdsUpdtVal...
   1f554:	71657266 00000000 61727264 0065676e     freq....drrange.
   1f564:	00001fbe 00002030 0000203a 00002044     ....0 ..: ..D ..
   1f574:	0000204e 00002058 00002080 0000208a     N ..X ... ... ..
   1f584:	0000209e 000020a8 000020b2 000020bc     . ... ... ... ..
   1f594:	000020c6 000020d0 00001faa 00002062     . ... ......b ..
   1f5a4:	0000206c 00002076 00002094 00001faa     l ..v ... ......
   1f5b4:	00001faa 00001faa 000020da 000020fe     ......... ... ..
   1f5c4:	00002108 00002126 00002130 0000213a     .!..&!..0!..:!..
   1f5d4:	00002144 0000214e 00002158 000020f4     D!..N!..X!... ..
   1f5e4:	00002162 0000216c 00002176 00002180     b!..l!..v!...!..
   1f5f4:	0000218a 000021b2 000021bc 000021d0     .!...!...!...!..
   1f604:	000021da 000021e4 000021ee 000021f8     .!...!...!...!..
   1f614:	00002202 00001faa 00002194 0000219e     .".......!...!..
   1f624:	000021a8 000021c6 0000211c 00002112     .!...!...!...!..
   1f634:	00001faa 0000220c 5f63616d 00207872     ....."..mac_rx .
   1f644:	5f6b6361 65636572 64657669 00000000     ack_received....
   1f654:	5f746f6e 6e696f6a 00006465 61766e69     not_joined..inva
   1f664:	5f64696c 61726170 0000006d 7379656b     lid_param...keys
   1f674:	746f6e5f 696e695f 00000074 656c6973     _not_init...sile
   1f684:	0000746e 6d617266 756f635f 7265746e     nt..fram_counter
   1f694:	7272655f 6a65725f 5f6e696f 6465656e     _err_rejoin_need
   1f6a4:	00006465 61766e69 5f64696c 746e6366     ed..invalid_fcnt
   1f6b4:	00000072 5f63696d 6f727265 00000072     r...mic_error...
   1f6c4:	61766e69 5f64696c 7079746d 00000065     invalid_mtype...
   1f6d4:	61766e69 5f64696c 66667562 6c5f7265     invalid_buffer_l
   1f6e4:	74676e65 00000068 5f63616d 73756170     ength...mac_paus
   1f6f4:	00006465 7361636d 64685f74 6e695f72     ed..mcast_hdr_in
   1f704:	696c6176 00000064 665f6f6e 5f656572     valid...no_free_
   1f714:	00006863 79737562 00000000 615f6f6e     ch..busy....no_a
   1f724:	00206b63 6e696f6a 5f6e695f 676f7270     ck .join_in_prog
   1f734:	73736572 00000000 6f736572 65637275     ress....resource
   1f744:	616e755f 6c696176 656c6261 00000000     _unavailable....
   1f754:	61766e69 5f64696c 75716572 00747365     invalid_request.
   1f764:	61766e69 5f64696c 6b636170 00007465     invalid_packet..
   1f774:	5f63616d 6f5f7874 0000006b 69646172     mac_tx_ok...radi
   1f784:	78745f6f 006b6f5f 69646172 6f6e5f6f     o_tx_ok.radio_no
   1f794:	7461645f 00000061 69646172 78745f6f     _data...radio_tx
   1f7a4:	6d69745f 74756f65 00000000 745f7874     _timeout....tx_t
   1f7b4:	6f656d69 00007475 69646172 61645f6f     imeout..radio_da
   1f7c4:	735f6174 00657a69 69646172 6e695f6f     ta_size.radio_in
   1f7d4:	696c6176 65725f64 00000071 69646172     valid_req...radi
   1f7e4:	75625f6f 00007973 69646172 756f5f6f     o_busy..radio_ou
   1f7f4:	666f5f74 6e61725f 00006567 69646172     t_of_range..radi
   1f804:	6e755f6f 5f707573 72747461 00000000     o_unsup_attr....
   1f814:	69646172 68635f6f 656e6e61 75625f6c     radio_channel_bu
   1f824:	00007973 00706261 6161746f 00000000     sy..abp.otaa....
   1f834:	646e6142 20732520 20746f6e 70707573     Band %s not supp
   1f844:	6574726f 000a0d64 00006b6f 00666e63     orted...ok..cnf.
   1f854:	6e636e75 00000066                       uncnf...

0001f85c <gapParseIsmBand>:
   1f85c:	0001f9ac 0001f9b0 0001f9b4 0001f9bc     ................
   1f86c:	0001f9c4 0001f9cc 0001f9d4 0001f9dc     ................
   1f87c:	0001f9e4 0001f9ec 0001f9f4 0001f9fc     ................
   1f88c:	0001fa04 0001fa0c 0001fa14 0001fa1c     ................

0001f89c <gapParseJoinStatus>:
   1f89c:	0001fa2c 0001fa34 0001f70c 0001f7b0     ,...4...........
   1f8ac:	0001f6b8                                ....

0001f8b0 <gapParseOnOff>:
   1f8b0:	0001fa24 0001fa28                       $...(...

0001f8b8 <gapParserBool>:
   1f8b8:	0001f938 0001f940                       8...@...

0001f8c0 <gapParserEdClass>:
   1f8c0:	0001f948 0001f950 0001f958 0001f960     H...P...X...`...

0001f8d0 <gapParserLorawanStatus>:
   1f8d0:	0001f970 0001f78c 0001f7bc 0001f7cc     p...............
   1f8e0:	0001f7e0 0001f7ec 0001f800 0001f814     ................
   1f8f0:	0001f84c 0001f654 0001f660 0001f670     L...T...`...p...
   1f900:	0001f680 0001f688 0001f97c 0001f6ec     ........|.......
   1f910:	0001f70c 0001f718 0001f990 0001f728     ............(...
   1f920:	0001f73c 0001f754 0001f998 0001f7b0     <...T...........
   1f930:	0001f79c 0001f764 736c6166 00000065     ....d...false...
   1f940:	65757274 00000000 53414c43 00412053     true....CLASS A.
   1f950:	53414c43 00422053 53414c43 00432053     CLASS B.CLASS C.
   1f960:	53414c43 4e492053 494c4156 00000044     CLASS INVALID...
   1f970:	69646172 6b6f5f6f 00000000 61766e69     radio_ok....inva
   1f980:	5f64696c 61746164 6e656c5f 00000000     lid_data_len....
   1f990:	615f6f6e 00006b63 75736e75 726f7070     no_ack..unsuppor
   1f9a0:	5f646574 646e6162 00000000 00383638     ted_band....868.
   1f9b0:	00333334 3139616e 00000035 31397561     433.na915...au91
   1f9c0:	00000035 3239726b 00000030 396e706a     5...kr920...jpn9
   1f9d0:	00003332 396e7262 00003332 39626d63     23..brn923..cmb9
   1f9e0:	00003332 39736e69 00003332 736f616c     23..ins923..laos
   1f9f0:	00333239 32397a6e 00000033 32397073     923.nz923...sp92
   1fa00:	00000033 396e7774 00003332 69616874     3...twn923..thai
   1fa10:	00333239 396d7476 00003332 38646e69     923.vtm923..ind8
   1fa20:	00003536 0066666f 00006e6f 696e6564     65..off.on..deni
   1fa30:	00006465 65636361 64657470 00000000     ed..accepted....
   1fa40:	6c250a0d 000a0d64 6e617473 00796264     ..%ld...standby.
   1fa50:	6b636162 00007075 00727265 6978450a     backup..err..Exi
   1fa60:	676e6974 656c5320 0d0a7065 00000000     ting Sleep......

0001fa70 <gapParserSysStatus>:
   1fa70:	0001f84c 0001f660 0001fa58 656c730a     L...`...X....sle
   1fa80:	6f5f7065 6c25206b 736d2064 00000d0a     ep_ok %ld ms....
   1fa90:	00000a0d 00004c94 00004c94 00004c62     .....L...L..bL..
   1faa0:	00004c94 00004c62 00004c48 00004c48     .L..bL..HL..HL..
   1fab0:	00004c94 00004c94 00004c94 00004c94     .L...L...L...L..
   1fac0:	00004c94 00004c94 00004c94 00004c94     .L...L...L...L..
   1fad0:	00004c94 00004c94 00004c94 00004c94     .L...L...L...L..
   1fae0:	00004c94 00004c94 00004c94 00004c94     .L...L...L...L..
   1faf0:	00004c94 00004c94 00004c94 00004c62     .L...L...L..bL..
   1fb00:	00004c94 00004c62 00004c94 00004c94     .L..bL...L...L..
   1fb10:	00004c94 00004c94 00004c94 00004c94     .L...L...L...L..
   1fb20:	00004c94 00004c94 00004c94 00004c94     .L...L...L...L..
   1fb30:	00004c94 00004c94 00004c94 00004c94     .L...L...L...L..
   1fb40:	00004c94 00004c94 00004c94 00004c94     .L...L...L...L..
   1fb50:	00004c94 00004c94 00004c94 00004c94     .L...L...L...L..
   1fb60:	00004c94 00004c94 00004c94 00004c94     .L...L...L...L..
   1fb70:	00004c94 00004c94 00004c94 00004c94     .L...L...L...L..
   1fb80:	00004c94 00004c94 00004c94 00004c94     .L...L...L...L..
   1fb90:	00004c94 00004c62 00004c62 00004c6a     .L..bL..bL..jL..
   1fba0:	00004c6a 00004c6a 00004c6a 42000000     jL..jL..jL.....B
   1fbb0:	42000400 42000800 42000c00 42001000     ...B...B...B...B
   1fbc0:	43000400 00006b8e 00006b8a 00006b8a     ...C.k...k...k..
   1fbd0:	00006bf0 00006bf0 00006ba4 00006b94     .k...k...k...k..
   1fbe0:	00006baa 00006bde 00006d94 00006d74     .k...k...m..tm..
   1fbf0:	00006d74 00006e0e 00006d86 00006da2     tm...n...m...m..
   1fc00:	00006d78 00006db0 00006df2 00006e4c     xm...m...m..Ln..
   1fc10:	00006e8e 00006e8e 00006e8e 00006e3e     .n...n...n..>n..
   1fc20:	00006e5a 00006e30 00006e68 00006e7e     Zn..0n..hn..~n..
   1fc30:	00007666 0000775c 00007766 00007770     fv..\w..fw..pw..
   1fc40:	0000777a 000077ac 000077b6 000077c0     zw...w...w...w..
   1fc50:	000077ca 000077d4 42002000 42002400     .w...w... .B.$.B
   1fc60:	42002800 42002c00 43000800 00000002     .(.B.,.B...C....
   1fc70:	00000100 00000002 00000200 00000002     ................
   1fc80:	00000400 00000002 00000800 00000003     ................
   1fc90:	00000004                                ....

0001fc94 <AdvChannels923>:
   1fc94:	3706ea00 3706ea00 ff100100 3709f740     ...7...7....@..7
   1fca4:	3709f740 ff100100                       @..7....

0001fcac <DefaultChannels923>:
   1fcac:	50015001                                .P.P

0001fcb0 <DefaultDrParamsAS>:
   1fcb0:	00330008 01070cdf 0033000a 01070bce     ..3.......3.....
   1fcc0:	0b33000e 01070ac6 3573001a 010709c2     ..3.......s5....
   1fcd0:	7df20031 010708be f2f20053 010707bc     1..}....S.......
   1fce0:	f2f2003c 010807f1 f2f20064 000a00ce     <.......d.......

0001fcf0 <SubBandDutyCycle923>:
   1fcf0:	00000064                                d...

0001fcf4 <SubBandParams923>:
   1fcf4:	35c36d80 37502800 00000000              .m.5.(P7....

0001fd00 <pds_reg_as_item_list>:
   1fd00:	20002553 00200004 20002573 25c00104     S%. .. .s%. ...%
   1fd10:	200024fe ea010204                       .$. ....

0001fd18 <DefaultChannels915AU>:
   1fd18:	50015001 50015001 50015001 50015001     .P.P.P.P.P.P.P.P
   1fd28:	50015001 50015001 50015001 50015001     .P.P.P.P.P.P.P.P
   1fd38:	50015001 50015001 50015001 50015001     .P.P.P.P.P.P.P.P
   1fd48:	50015001 50015001 50015001 50015001     .P.P.P.P.P.P.P.P
   1fd58:	50015001 50015001 50015001 50015001     .P.P.P.P.P.P.P.P
   1fd68:	50015001 50015001 50015001 50015001     .P.P.P.P.P.P.P.P
   1fd78:	50015001 50015001 50015001 50015001     .P.P.P.P.P.P.P.P
   1fd88:	50015001 50015001 50015001 50015001     .P.P.P.P.P.P.P.P
   1fd98:	66016601 66016601 66016601 66016601     .f.f.f.f.f.f.f.f

0001fda8 <DefaultDrParamsAU>:
   1fda8:	00330008 01070cdf 0033000b 01070bce     ..3.......3.....
   1fdb8:	00330012 01070ac6 0073001c 010709c2     ..3.......s.....
   1fdc8:	00f2003d 010708be 00f20053 010707bc     =.......S.......
   1fdd8:	00f2003d 010908be 00000000 010a0000     =...............
   1fde8:	00350007 01090c0c 00810005 01090b06     ..5.............
   1fdf8:	00f20007 01090a01 00f2000c 010909fe     ................
   1fe08:	00f20016 010908fc 00f2002a 010907fc     ........*.......

0001fe18 <pds_reg_au_item_list>:
   1fe18:	20002583 00900008 20002627 95010108     .%. ....'&. ....

0001fe28 <AdvChannels433>:
   1fe28:	19d1b9d8 19d1b9d8 ff0c0101 19d4c718     ................
   1fe38:	19d4c718 ff0c0101 19d7d458 19d7d458     ........X...X...
   1fe48:	ff0c0101                                ....

0001fe4c <AdvChannels868>:
   1fe4c:	33be27a0 33be27a0 ff100101 33c134e0     .'.3.'.3.....4.3
   1fe5c:	33c134e0 ff100101 33c44220 33c44220     .4.3.... B.3 B.3
   1fe6c:	ff100101                                ....

0001fe70 <DefaultChannels433>:
   1fe70:	50015001 00005001                       .P.P.P..

0001fe78 <DefaultChannels868>:
   1fe78:	50015001 00005001                       .P.P.P..

0001fe80 <DefaultDrparamsEU>:
   1fe80:	00330008 01070cdf 0033000b 01070bd3     ..3.......3.....
   1fe90:	00330017 01070acc 0073001c 010709c2     ..3.......s.....
   1fea0:	00f2003d 010708be 00f20053 010707bc     =.......S.......
   1feb0:	00f2003c 010807f1 00f20064 000a00ce     <.......d.......

0001fec0 <SubBandDutyCycle868>:
   1fec0:	006403e8 03e80064 0064000a              ..d.d.....d.

0001fecc <SubBandParams433>:
   1fecc:	19cf0e40 19ea8580 00000000              @...........

0001fed8 <SubBandParams868>:
   1fed8:	337055c0 338eda40 00000000 338eda41     .Up3@..3....A..3
   1fee8:	33bca100 00000000 33bca101 33c5c8c0     ...3.......3...3
   1fef8:	00000000 33c74f60 33cef080 00000000     ....`O.3...3....
   1ff08:	33d1fdc0 33d5ce50 00000000 33d691a0     ...3P..3.......3
   1ff18:	33db2580 00000000                       .%.3....

0001ff20 <pds_reg_eu868_fid1_item_list>:
   1ff20:	20002553 00200003                       S%. .. .

0001ff28 <pds_reg_eu868_fid2_item_list>:
   1ff28:	20002573 00c0000b                       s%. ....

0001ff30 <AdvChannels865>:
   1ff30:	338fce64 338fce64 ff1e0100 3394fe84     d..3d..3.......3
   1ff40:	3394fe84 ff1e0100 339de1e8 339de1e8     ...3.......3...3
   1ff50:	ff1e0100                                ....

0001ff54 <DefaultChannels865>:
   1ff54:	50015001 00005001                       .P.P.P..

0001ff5c <DefaultDrParamsIN>:
   1ff5c:	00330008 01070cdf 0033000a 01070bce     ..3.......3.....
   1ff6c:	0033000e 01070ac6 0073001a 010709c2     ..3.......s.....
   1ff7c:	00f20031 010708be 00f20053 010707bc     1.......S.......
   1ff8c:	00000000 010a0000 00f20008 000a00fe     ................

0001ff9c <pds_reg_ind_item_list>:
   1ff9c:	20002553 00200006 20002573 25c00106     S%. .. .s%. ...%

0001ffac <AdvChannels923JP>:
   1ffac:	3706ea00 3706ea00 ff100101 3709f740     ...7...7....@..7
   1ffbc:	3709f740 ff100101                       @..7....

0001ffc4 <DefaultChannels923JP>:
   1ffc4:	50015001                                .P.P

0001ffc8 <DefaultDrParamsJP>:
   1ffc8:	00330008 01070cdf 0033000a 01070bce     ..3.......3.....
   1ffd8:	0b33000e 01070ac6 3573001a 010709c2     ..3.......s5....
   1ffe8:	7df20031 010708be f2f20053 010707bc     1..}....S.......
   1fff8:	f2f2003c 010807f1 f2f20064 000a00ce     <.......d.......

00020008 <SubBandDutyCycleJP923>:
   20008:	000a0064                                d...

0002000c <SubBandParamsJP923>:
   2000c:	36d61600 36f7a7c0 00000000 36fab500     ...6...6.......6
   2001c:	37502800 00000000                       .(P7....

00020024 <pds_reg_jpn_fid1_item_list>:
   20024:	20002553 00200007 20002573 25c00107     S%. .. .s%. ...%

00020034 <AdvChannels920KR>:
   20034:	36f62120 36f62120 ff0e0100 36f92e60      !.6 !.6....`..6
   20044:	36f92e60 ff0e0100 36fc3ba0 36fc3ba0     `..6.....;.6.;.6
   20054:	ff0e0100                                ....

00020058 <DefaultChannels920KR>:
   20058:	50015001 00005001                       .P.P.P..

00020060 <DefaultDrParamsKR>:
   20060:	00330008 01070cdf 0033000a 01070bce     ..3.......3.....
   20070:	0033000e 01070ac6 0073001a 010709c2     ..3.......s.....
   20080:	00f20031 010708be 00f20053 010707bc     1.......S.......

00020090 <pds_reg_kr_fid1_item_list>:
   20090:	20002553 00200005 20002573 25c00105     S%. .. .s%. ...%

000200a0 <DefaultChannels915>:
   200a0:	30013001 30013001 30013001 30013001     .0.0.0.0.0.0.0.0
   200b0:	30013001 30013001 30013001 30013001     .0.0.0.0.0.0.0.0
   200c0:	30013001 30013001 30013001 30013001     .0.0.0.0.0.0.0.0
   200d0:	30013001 30013001 30013001 30013001     .0.0.0.0.0.0.0.0
   200e0:	30013001 30013001 30013001 30013001     .0.0.0.0.0.0.0.0
   200f0:	30013001 30013001 30013001 30013001     .0.0.0.0.0.0.0.0
   20100:	30013001 30013001 30013001 30013001     .0.0.0.0.0.0.0.0
   20110:	30013001 30013001 30013001 30013001     .0.0.0.0.0.0.0.0
   20120:	44014401 44014401 44014401 44014401     .D.D.D.D.D.D.D.D

00020130 <DefaultDrParamsNA>:
   20130:	000b0012 01070ac6 00350005 01070906     ..........5.....
   20140:	007d0007 01070801 00f2000c 010707fe     ..}.............
   20150:	00f20016 010908fc 00000000 010a0000     ................
   20160:	00000000 010a0000 00000000 010a0000     ................
   20170:	00350023 01090cd5 00810007 01090b06     #.5.............
   20180:	00f20007 01090a01 00f2000c 010909fe     ................
   20190:	00f20016 010908fc 00f2002a 010907fc     ........*.......

000201a0 <pds_reg_na_item_list>:
   201a0:	20002583 00900002 20002627 95010102     .%. ....'&. ....
   201b0:	0000a724 0000a724 0000a724 0000a724     $...$...$...$...
   201c0:	0000a78a 0000a7f0 0000a7a2 0000a78a     ................

000201d0 <keySlots>:
   201d0:	0b030200 0a090e0c                       ........

000201d8 <taskHandlers>:
   201d8:	0000f131 00015515 00014b29 0000e7a9     1....U..)K......
   201e8:	0000fbe1                                ....

000201ec <tc_interrupt_vectors.13496>:
   201ec:	14131211 00000015 614c0a0d 72207473     ..........Last r
   201fc:	74657365 75616320 203a6573 00000000     eset cause: ....
   2020c:	74737953 52206d65 74657365 71655220     System Reset Req
   2021c:	74736575 0000000d 63746157 676f6468     uest....Watchdog
   2022c:	73655220 000d7465 65747845 6c616e72      Reset..External
   2023c:	73655220 000d7465 776f7242 754f206e      Reset..Brown Ou
   2024c:	33332074 74654420 6f746365 65522072     t 33 Detector Re
   2025c:	0d746573 00000000 776f7242 754f206e     set.....Brown Ou
   2026c:	32312074 74654420 6f746365 65522072     t 12 Detector Re
   2027c:	0d746573 00000000 65776f50 6e4f2d72     set.....Power-On
   2028c:	73655220 000d7465 61526f4c 204e4157      Reset..LoRaWAN 
   2029c:	63617453 5055206b 0080000d              Stack UP....

000202a8 <CSWTCH.144>:
   202a8:	00000000 40fe8480 00000000 410e8480     .......@.......A
   202b8:	00000000 411e8480                       .......A

000202c0 <FskSyncWordBuff>:
   202c0:	01c194c1                                         ...

000202c3 <macEndDevCmdReplyLen>:
   202c3:	02010201 01010203 01000002              ............

000202cf <maxEIRPTable>:
   202cf:	0d0c0a08 1412100e 1b1a1815 24211e1d     ..............!$
	...

000202e0 <pds_mac_fid1_item_list>:
   202e0:	20002c52 00010000 20002c50 06010100     R,. ....P,. ....
   202f0:	20002be4 0c040200 20002c53 15010300     .+. ....S,. ....
   20300:	20002c54 1b040400 20002ca4 24040500     T,. .....,. ...$
   20310:	20002c80 2d040600 20002c94 36100700     .,. ...-.,. ...6
   20320:	20002c84 4b100800 20002c6e 60040900     .,. ...Kn,. ...`
   20330:	20002c3d 69010b00 20002bec 6f010a00     =,. ...i.+. ...o
   20340:	20002c24 75020c00 20002c26 7c020d00     $,. ...u&,. ...|
   20350:	20002c28 83020e00 20002c2a 8a020f00     (,. ....*,. ....
   20360:	20002c2c 91021000 20002c2e 98021100     ,,. .....,. ....
   20370:	20002c30 9f011200 20002c31 a5011300     0,. ....1,. ....
   20380:	20002c36 b1011500 20002c35 ab011400     6,. ....5,. ....
   20390:	20002bdc b7041600                       .+. ....

00020398 <pds_mac_fid2_item_list>:
   20398:	20002bc6 00050001 20002c4a 0a010101     .+. ....J,. ....
   203a8:	20002b5c 10010201 20002b5d 16040301     \+. ....]+. ....
   203b8:	20002b61 1f100401 20002b71 34100501     a+. ....q+. ...4
   203c8:	20002ba1 49100601 20002bb1 5e080701     .+. ...I.+. ...^
   203d8:	20002bb9 6b080801 20002c32 78020901     .+. ...k2,. ...x
   203e8:	20002be0 7f040a01 20002bd8 88040b01     .+. .....+. ....
   203f8:	20002c3b 91010c01 20002d7c 97010d01     ;,. ....|-. ....
   20408:	20002d7d 9d010e01                       }-. ....

00020410 <lorawanHandlers>:
   20410:	000149d9 000148ed 00014ab1 000000fd     .I...H...J......

00020420 <radioTaskHandlers>:
   20420:	000160e5 000161e5 00015f29 000157ad     .`...a..)_...W..
   20430:	0001650d 0001718c 0001715c 0001716e     .e...q..\q..nq..
   20440:	000170b0 0001716e 00017152 0001716e     .p..nq..Rq..nq..
   20450:	000170b0 0001715c 0001715c 00017152     .p..\q..\q..Rq..
   20460:	000170b0 000170b8 000170b8 000170b8     .p...p...p...p..
   20470:	00017174 0001715c 0001715c 00017130     tq..\q..\q..0q..
   20480:	00017214 00017130 00017152 00017130     .r..0q..Rq..0q..
   20490:	00017214 0001715c 0001715c 00017152     .r..\q..\q..Rq..
   204a0:	00017214 000170b8 000170b8 000170b8     .r...p...p...p..
   204b0:	0001721e 0001750c 0001745c 0001745c     .r...u..\t..\t..
   204c0:	0001745a 000174fe 000174fe 000174f4     Zt...t...t...t..
   204d0:	0001745a 000174fe 000174f4 000174fe     Zt...t...t...t..
   204e0:	0001745a 00017504 00017504 00017504     Zt...u...u...u..
   204f0:	00017594 000182dc 000182be 00018278     .u..........x...
   20500:	00018196 00018278 000182b0 00018278     ....x.......x...
   20510:	00018196 000182be 000182be 000182b0     ................
   20520:	00018196 0001818e 0001818e 0001818e     ................
   20530:	000184f4 00018b3c 000189fc 000189fc     ....<...........
   20540:	000189f8 00018b14 00018b14 00018b06     ................
   20550:	000189f8 00018b14 00018b06 00018b14     ................
   20560:	000189f8 00018b1c 00018b1c 00018b1c     ................
   20570:	00018d20                                 ...

00020574 <_global_impure_ptr>:
   20574:	20000020 00000043 49534f50 00000058      .. C...POSIX...
   20584:	0000002e 0000000a 33323130 37363534     ........01234567
   20594:	62613938 66656463 6a696867 6e6d6c6b     89abcdefghijklmn
   205a4:	7271706f 76757473 7a797877 00000000     opqrstuvwxyz....
   205b4:	0001ace6 0001adba 0001adba 0001acd2     ................
   205c4:	0001adba 0001adba 0001adba 0001adba     ................
   205d4:	0001adba 0001adba 0001ad8c 0001a89e     ................
   205e4:	0001adba 0001a894 0001a8a8 0001adba     ................
   205f4:	0001acdc 0001aa68 0001aa68 0001aa68     ....h...h...h...
   20604:	0001aa68 0001aa68 0001aa68 0001aa68     h...h...h...h...
   20614:	0001aa68 0001aa68 0001adba 0001adba     h...h...........
   20624:	0001adba 0001adba 0001adba 0001adba     ................
   20634:	0001adba 0001adba 0001adba 0001adba     ................
   20644:	0001ada2 0001acf6 0001adba 0001acf6     ................
   20654:	0001adba 0001adba 0001adba 0001adba     ................
   20664:	0001ac5c 0001adba 0001adba 0001ac66     \...........f...
   20674:	0001adba 0001adba 0001adba 0001adba     ................
   20684:	0001adba 0001ac94 0001adba 0001adba     ................
   20694:	0001acc2 0001adba 0001adba 0001adba     ................
   206a4:	0001adba 0001adba 0001adba 0001adba     ................
   206b4:	0001adba 0001adba 0001adba 0001aaa8     ................
   206c4:	0001aade 0001acf6 0001acf6 0001acf6     ................
   206d4:	0001ab86 0001aade 0001adba 0001adba     ................
   206e4:	0001ab90 0001adba 0001aba2 0001adb6     ................
   206f4:	0001abd0 0001abfa 0001adba 0001ac04     ................
   20704:	0001adba 0001adb2 0001adba 0001adba     ................
   20714:	0001a8f6 00464e49 00666e69 004e414e     ....INF.inf.NAN.
   20724:	006e616e 33323130 37363534 42413938     nan.0123456789AB
   20734:	46454443 00000000 33323130 37363534     CDEF....01234567
   20744:	62613938 66656463 00000000 6c756e28     89abcdef....(nul
   20754:	0000296c                                l)..

00020758 <blanks.7238>:
   20758:	20202020 20202020 20202020 20202020                     

00020768 <zeroes.7239>:
   20768:	30303030 30303030 30303030 30303030     0000000000000000

00020778 <_ctype_>:
   20778:	20202000 20202020 28282020 20282828     .         ((((( 
   20788:	20202020 20202020 20202020 20202020                     
   20798:	10108820 10101010 10101010 10101010      ...............
   207a8:	04040410 04040404 10040404 10101010     ................
   207b8:	41411010 41414141 01010101 01010101     ..AAAAAA........
   207c8:	01010101 01010101 01010101 10101010     ................
   207d8:	42421010 42424242 02020202 02020202     ..BBBBBB........
   207e8:	02020202 02020202 02020202 10101010     ................
   207f8:	00000020 00000000 00000000 00000000      ...............
	...
   2087c:	69666e49 7974696e 00000000 004e614e     Infinity....NaN.
   2088c:	00000000                                ....

00020890 <__mprec_bigtens>:
   20890:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
   208a0:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
   208b0:	7f73bf3c 75154fdd                       <.s..O.u

000208b8 <__mprec_tens>:
   208b8:	00000000 3ff00000 00000000 40240000     .......?......$@
   208c8:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
   208d8:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
   208e8:	00000000 412e8480 00000000 416312d0     .......A......cA
   208f8:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
   20908:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
   20918:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
   20928:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
   20938:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
   20948:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
   20958:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
   20968:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
   20978:	79d99db4 44ea7843                       ...yCx.D

00020980 <p05.6055>:
   20980:	00000005 00000019 0000007d              ........}...

0002098c <_init>:
   2098c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2098e:	46c0      	nop			; (mov r8, r8)
   20990:	bcf8      	pop	{r3, r4, r5, r6, r7}
   20992:	bc08      	pop	{r3}
   20994:	469e      	mov	lr, r3
   20996:	4770      	bx	lr

00020998 <__init_array_start>:
   20998:	0001bf19 	.word	0x0001bf19

0002099c <__frame_dummy_init_array_entry>:
   2099c:	000000dd                                ....

000209a0 <_fini>:
   209a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   209a2:	46c0      	nop			; (mov r8, r8)
   209a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
   209a6:	bc08      	pop	{r3}
   209a8:	469e      	mov	lr, r3
   209aa:	4770      	bx	lr

000209ac <__fini_array_start>:
   209ac:	000000b5 	.word	0x000000b5
