
APPS_ENDDEVICE_DEMO2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00020998  00000000  00000000  00010000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00020998  00020998  00030998  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     000009c8  20000000  000209a0  00040000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .lpram        00000000  30000000  30000000  000409c8  2**0
                  CONTENTS
  4 .bss          00002620  200009c8  00021368  000409c8  2**3
                  ALLOC
  5 .stack        00002000  20002fe8  00023988  000409c8  2**0
                  ALLOC
  6 .ARM.attributes 00000028  00000000  00000000  000409c8  2**0
                  CONTENTS, READONLY
  7 .comment      0000008c  00000000  00000000  000409f0  2**0
                  CONTENTS, READONLY
  8 .debug_info   000a592f  00000000  00000000  00040a7c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00010445  00000000  00000000  000e63ab  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00027cb2  00000000  00000000  000f67f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00002120  00000000  00000000  0011e4a2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00002810  00000000  00000000  001205c2  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0003533e  00000000  00000000  00122dd2  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0003b579  00000000  00000000  00158110  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000ba309  00000000  00000000  00193689  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  000070a4  00000000  00000000  0024d994  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	e8 4f 00 20 15 79 00 00 11 79 00 00 11 79 00 00     .O. .y...y...y..
	...
      2c:	11 79 00 00 00 00 00 00 00 00 00 00 11 79 00 00     .y...........y..
      3c:	11 79 00 00 11 79 00 00 11 79 00 00 25 52 00 00     .y...y...y..%R..
      4c:	bd 49 00 00 11 79 00 00 11 79 00 00 11 79 00 00     .I...y...y...y..
      5c:	11 79 00 00 55 60 00 00 65 60 00 00 75 60 00 00     .y..U`..e`..u`..
      6c:	85 60 00 00 95 60 00 00 a5 60 00 00 11 79 00 00     .`...`...`...y..
      7c:	11 79 00 00 11 79 00 00 cd 74 00 00 dd 74 00 00     .y...y...t...t..
      8c:	ed 74 00 00 fd 74 00 00 0d 75 00 00 09 47 00 00     .t...t...u...G..
      9c:	11 79 00 00 11 79 00 00 11 79 00 00 11 79 00 00     .y...y...y...y..
      ac:	11 79 00 00 00 00 00 00                             .y......

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	200009c8 	.word	0x200009c8
      d4:	00000000 	.word	0x00000000
      d8:	000209a0 	.word	0x000209a0

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	200009cc 	.word	0x200009cc
     108:	000209a0 	.word	0x000209a0
     10c:	000209a0 	.word	0x000209a0
     110:	00000000 	.word	0x00000000

00000114 <atcab_release>:
/** \brief release (free) the global ATCADevice instance.
 *  This must be called in order to release or free up the interface.
 *  \return Returns ATCA_SUCCESS .
 */
ATCA_STATUS atcab_release(void)
{
     114:	b510      	push	{r4, lr}
    {
        return status;
    }
    _gDevice = NULL;
#else
    deleteATCADevice(&_gDevice);
     116:	4802      	ldr	r0, [pc, #8]	; (120 <atcab_release+0xc>)
     118:	4b02      	ldr	r3, [pc, #8]	; (124 <atcab_release+0x10>)
     11a:	4798      	blx	r3
#endif
    return ATCA_SUCCESS;
}
     11c:	2000      	movs	r0, #0
     11e:	bd10      	pop	{r4, pc}
     120:	200009e4 	.word	0x200009e4
     124:	00000cb9 	.word	0x00000cb9

00000128 <atcab_init>:
{
     128:	b510      	push	{r4, lr}
     12a:	b082      	sub	sp, #8
     12c:	0004      	movs	r4, r0
    if (_gDevice)
     12e:	4b14      	ldr	r3, [pc, #80]	; (180 <atcab_init+0x58>)
     130:	681b      	ldr	r3, [r3, #0]
     132:	2b00      	cmp	r3, #0
     134:	d001      	beq.n	13a <atcab_init+0x12>
        atcab_release();
     136:	4b13      	ldr	r3, [pc, #76]	; (184 <atcab_init+0x5c>)
     138:	4798      	blx	r3
    _gDevice = newATCADevice(cfg);
     13a:	0020      	movs	r0, r4
     13c:	4b12      	ldr	r3, [pc, #72]	; (188 <atcab_init+0x60>)
     13e:	4798      	blx	r3
     140:	4b0f      	ldr	r3, [pc, #60]	; (180 <atcab_init+0x58>)
     142:	6018      	str	r0, [r3, #0]
    if (_gDevice == NULL)
     144:	2800      	cmp	r0, #0
     146:	d019      	beq.n	17c <atcab_init+0x54>
    if (cfg->devtype == ATECC608A)
     148:	7862      	ldrb	r2, [r4, #1]
    return ATCA_SUCCESS;
     14a:	2300      	movs	r3, #0
    if (cfg->devtype == ATECC608A)
     14c:	2a03      	cmp	r2, #3
     14e:	d002      	beq.n	156 <atcab_init+0x2e>
}
     150:	0018      	movs	r0, r3
     152:	b002      	add	sp, #8
     154:	bd10      	pop	{r4, pc}
        if ((status = atcab_read_bytes_zone(ATCA_ZONE_CONFIG, 0, ATCA_CHIPMODE_OFFSET, &_gDevice->mCommands->clock_divider, 1)) != ATCA_SUCCESS)
     156:	6803      	ldr	r3, [r0, #0]
     158:	3301      	adds	r3, #1
     15a:	3a02      	subs	r2, #2
     15c:	9200      	str	r2, [sp, #0]
     15e:	3212      	adds	r2, #18
     160:	2100      	movs	r1, #0
     162:	2000      	movs	r0, #0
     164:	4c09      	ldr	r4, [pc, #36]	; (18c <atcab_init+0x64>)
     166:	47a0      	blx	r4
     168:	1e03      	subs	r3, r0, #0
     16a:	d1f1      	bne.n	150 <atcab_init+0x28>
        _gDevice->mCommands->clock_divider &= ATCA_CHIPMODE_CLOCK_DIV_MASK;
     16c:	4a04      	ldr	r2, [pc, #16]	; (180 <atcab_init+0x58>)
     16e:	6812      	ldr	r2, [r2, #0]
     170:	6811      	ldr	r1, [r2, #0]
     172:	784a      	ldrb	r2, [r1, #1]
     174:	2007      	movs	r0, #7
     176:	4382      	bics	r2, r0
     178:	704a      	strb	r2, [r1, #1]
     17a:	e7e9      	b.n	150 <atcab_init+0x28>
        return ATCA_GEN_FAIL;
     17c:	23e1      	movs	r3, #225	; 0xe1
     17e:	e7e7      	b.n	150 <atcab_init+0x28>
     180:	200009e4 	.word	0x200009e4
     184:	00000115 	.word	0x00000115
     188:	00000c2d 	.word	0x00000c2d
     18c:	0000077d 	.word	0x0000077d

00000190 <atcab_get_addr>:
 *  \param[in] offset Offset Number within the block of data or configuration or OTP zone.
 *  \param[out] addr  Pointer to the address of data or configuration or OTP zone.
 *  \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS atcab_get_addr(uint8_t zone, uint16_t slot, uint8_t block, uint8_t offset, uint16_t* addr)
{
     190:	b510      	push	{r4, lr}
    ATCA_STATUS status = ATCA_SUCCESS;
    uint8_t mem_zone = zone & 0x03;

    if (addr == NULL)
     192:	9c02      	ldr	r4, [sp, #8]
     194:	2c00      	cmp	r4, #0
     196:	d008      	beq.n	1aa <atcab_get_addr+0x1a>
    uint8_t mem_zone = zone & 0x03;
     198:	2403      	movs	r4, #3
     19a:	4020      	ands	r0, r4
    {
        return ATCA_BAD_PARAM;
    }
    if ((mem_zone != ATCA_ZONE_CONFIG) && (mem_zone != ATCA_ZONE_DATA) && (mem_zone != ATCA_ZONE_OTP))
     19c:	d007      	beq.n	1ae <atcab_get_addr+0x1e>
     19e:	2802      	cmp	r0, #2
     1a0:	d00d      	beq.n	1be <atcab_get_addr+0x2e>
     1a2:	2801      	cmp	r0, #1
     1a4:	d003      	beq.n	1ae <atcab_get_addr+0x1e>
    {
        return ATCA_BAD_PARAM;
     1a6:	20e2      	movs	r0, #226	; 0xe2
     1a8:	e012      	b.n	1d0 <atcab_get_addr+0x40>
        return ATCA_BAD_PARAM;
     1aa:	20e2      	movs	r0, #226	; 0xe2
     1ac:	e010      	b.n	1d0 <atcab_get_addr+0x40>
        *addr = 0;
        // Mask the offset
        offset = offset & (uint8_t)0x07;
        if ((mem_zone == ATCA_ZONE_CONFIG) || (mem_zone == ATCA_ZONE_OTP))
        {
            *addr = block << 3;
     1ae:	00d2      	lsls	r2, r2, #3
            *addr |= offset;
     1b0:	2007      	movs	r0, #7
     1b2:	4003      	ands	r3, r0
     1b4:	431a      	orrs	r2, r3
     1b6:	9b02      	ldr	r3, [sp, #8]
     1b8:	801a      	strh	r2, [r3, #0]
            *addr |= block << 8;
        }
    }
    while (0);

    return status;
     1ba:	2000      	movs	r0, #0
     1bc:	e008      	b.n	1d0 <atcab_get_addr+0x40>
            *addr = slot << 3;
     1be:	00c9      	lsls	r1, r1, #3
            *addr  |= offset;
     1c0:	2007      	movs	r0, #7
     1c2:	4003      	ands	r3, r0
     1c4:	430b      	orrs	r3, r1
            *addr |= block << 8;
     1c6:	0212      	lsls	r2, r2, #8
     1c8:	431a      	orrs	r2, r3
     1ca:	9b02      	ldr	r3, [sp, #8]
     1cc:	801a      	strh	r2, [r3, #0]
    return status;
     1ce:	2000      	movs	r0, #0
}
     1d0:	bd10      	pop	{r4, pc}
	...

000001d4 <atcab_get_zone_size>:
 */
ATCA_STATUS atcab_get_zone_size(uint8_t zone, uint16_t slot, size_t* size)
{
    ATCA_STATUS status = ATCA_SUCCESS;

    if (size == NULL)
     1d4:	2a00      	cmp	r2, #0
     1d6:	d03e      	beq.n	256 <atcab_get_zone_size+0x82>
    {
        return ATCA_BAD_PARAM;
    }

    if (_gDevice->mIface->mIfaceCFG->devtype == ATSHA204A)
     1d8:	4b20      	ldr	r3, [pc, #128]	; (25c <atcab_get_zone_size+0x88>)
     1da:	681b      	ldr	r3, [r3, #0]
     1dc:	685b      	ldr	r3, [r3, #4]
     1de:	685b      	ldr	r3, [r3, #4]
     1e0:	785b      	ldrb	r3, [r3, #1]
     1e2:	2b00      	cmp	r3, #0
     1e4:	d113      	bne.n	20e <atcab_get_zone_size+0x3a>
    {
        switch (zone)
     1e6:	2801      	cmp	r0, #1
     1e8:	d009      	beq.n	1fe <atcab_get_zone_size+0x2a>
     1ea:	2800      	cmp	r0, #0
     1ec:	d003      	beq.n	1f6 <atcab_get_zone_size+0x22>
     1ee:	2802      	cmp	r0, #2
     1f0:	d009      	beq.n	206 <atcab_get_zone_size+0x32>
        {
        case ATCA_ZONE_CONFIG: *size = 88; break;
        case ATCA_ZONE_OTP:    *size = 64; break;
        case ATCA_ZONE_DATA:   *size = 32; break;
        default: status = ATCA_BAD_PARAM; break;
     1f2:	20e2      	movs	r0, #226	; 0xe2
     1f4:	e030      	b.n	258 <atcab_get_zone_size+0x84>
        case ATCA_ZONE_CONFIG: *size = 88; break;
     1f6:	2358      	movs	r3, #88	; 0x58
     1f8:	6013      	str	r3, [r2, #0]
    ATCA_STATUS status = ATCA_SUCCESS;
     1fa:	2000      	movs	r0, #0
        case ATCA_ZONE_CONFIG: *size = 88; break;
     1fc:	e02c      	b.n	258 <atcab_get_zone_size+0x84>
        case ATCA_ZONE_OTP:    *size = 64; break;
     1fe:	2340      	movs	r3, #64	; 0x40
     200:	6013      	str	r3, [r2, #0]
    ATCA_STATUS status = ATCA_SUCCESS;
     202:	2000      	movs	r0, #0
        case ATCA_ZONE_OTP:    *size = 64; break;
     204:	e028      	b.n	258 <atcab_get_zone_size+0x84>
        case ATCA_ZONE_DATA:   *size = 32; break;
     206:	2320      	movs	r3, #32
     208:	6013      	str	r3, [r2, #0]
    ATCA_STATUS status = ATCA_SUCCESS;
     20a:	2000      	movs	r0, #0
        case ATCA_ZONE_DATA:   *size = 32; break;
     20c:	e024      	b.n	258 <atcab_get_zone_size+0x84>
        }
    }
    else
    {
        switch (zone)
     20e:	2801      	cmp	r0, #1
     210:	d009      	beq.n	226 <atcab_get_zone_size+0x52>
     212:	2800      	cmp	r0, #0
     214:	d003      	beq.n	21e <atcab_get_zone_size+0x4a>
     216:	2802      	cmp	r0, #2
     218:	d009      	beq.n	22e <atcab_get_zone_size+0x5a>
            else
            {
                status = ATCA_BAD_PARAM;
            }
            break;
        default: status = ATCA_BAD_PARAM; break;
     21a:	20e2      	movs	r0, #226	; 0xe2
     21c:	e01c      	b.n	258 <atcab_get_zone_size+0x84>
        case ATCA_ZONE_CONFIG: *size = 128; break;
     21e:	2380      	movs	r3, #128	; 0x80
     220:	6013      	str	r3, [r2, #0]
    ATCA_STATUS status = ATCA_SUCCESS;
     222:	2000      	movs	r0, #0
        case ATCA_ZONE_CONFIG: *size = 128; break;
     224:	e018      	b.n	258 <atcab_get_zone_size+0x84>
        case ATCA_ZONE_OTP:    *size = 64; break;
     226:	2340      	movs	r3, #64	; 0x40
     228:	6013      	str	r3, [r2, #0]
    ATCA_STATUS status = ATCA_SUCCESS;
     22a:	2000      	movs	r0, #0
        case ATCA_ZONE_OTP:    *size = 64; break;
     22c:	e014      	b.n	258 <atcab_get_zone_size+0x84>
            if (slot < 8)
     22e:	2907      	cmp	r1, #7
     230:	d908      	bls.n	244 <atcab_get_zone_size+0x70>
            else if (slot == 8)
     232:	2908      	cmp	r1, #8
     234:	d00a      	beq.n	24c <atcab_get_zone_size+0x78>
                status = ATCA_BAD_PARAM;
     236:	20e2      	movs	r0, #226	; 0xe2
            else if (slot < 16)
     238:	290f      	cmp	r1, #15
     23a:	d80d      	bhi.n	258 <atcab_get_zone_size+0x84>
                *size = 72;
     23c:	2348      	movs	r3, #72	; 0x48
     23e:	6013      	str	r3, [r2, #0]
    ATCA_STATUS status = ATCA_SUCCESS;
     240:	2000      	movs	r0, #0
     242:	e009      	b.n	258 <atcab_get_zone_size+0x84>
                *size = 36;
     244:	2324      	movs	r3, #36	; 0x24
     246:	6013      	str	r3, [r2, #0]
    ATCA_STATUS status = ATCA_SUCCESS;
     248:	2000      	movs	r0, #0
     24a:	e005      	b.n	258 <atcab_get_zone_size+0x84>
                *size = 416;
     24c:	23d0      	movs	r3, #208	; 0xd0
     24e:	005b      	lsls	r3, r3, #1
     250:	6013      	str	r3, [r2, #0]
    ATCA_STATUS status = ATCA_SUCCESS;
     252:	2000      	movs	r0, #0
     254:	e000      	b.n	258 <atcab_get_zone_size+0x84>
        return ATCA_BAD_PARAM;
     256:	20e2      	movs	r0, #226	; 0xe2
        }
    }

    return status;
}
     258:	4770      	bx	lr
     25a:	46c0      	nop			; (mov r8, r8)
     25c:	200009e4 	.word	0x200009e4

00000260 <atcab_aes>:
 *  \param[out] aes_out  Output data from the AES command is returned here (16
 *                       bytes).
 *  \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS atcab_aes(uint8_t mode, uint16_t key_id, const uint8_t* aes_in, uint8_t* aes_out)
{
     260:	b570      	push	{r4, r5, r6, lr}
     262:	b0b2      	sub	sp, #200	; 0xc8
     264:	0014      	movs	r4, r2
     266:	001d      	movs	r5, r3
    ATCACommand ca_cmd = _gDevice->mCommands;
    ATCA_STATUS status = ATCA_GEN_FAIL;

    do
    {
        if (aes_in == NULL)
     268:	2a00      	cmp	r2, #0
     26a:	d032      	beq.n	2d2 <atcab_aes+0x72>
    ATCACommand ca_cmd = _gDevice->mCommands;
     26c:	4b1a      	ldr	r3, [pc, #104]	; (2d8 <atcab_aes+0x78>)
     26e:	681b      	ldr	r3, [r3, #0]
     270:	681e      	ldr	r6, [r3, #0]
            status = ATCA_BAD_PARAM;
            break;
        }

        // build a AES command
        packet.param1 = mode;
     272:	466b      	mov	r3, sp
     274:	70d8      	strb	r0, [r3, #3]
        packet.param2 = key_id;
     276:	8099      	strh	r1, [r3, #4]
        if (AES_MODE_GFM == (mode & AES_MODE_GFM))
     278:	43c0      	mvns	r0, r0
     27a:	0783      	lsls	r3, r0, #30
     27c:	d00e      	beq.n	29c <atcab_aes+0x3c>
        {
            memcpy(packet.data, aes_in, ATCA_AES_GFM_SIZE);
        }
        else
        {
            memcpy(packet.data, aes_in, AES_DATA_SIZE);
     27e:	2210      	movs	r2, #16
     280:	0021      	movs	r1, r4
     282:	466b      	mov	r3, sp
     284:	1d98      	adds	r0, r3, #6
     286:	4b15      	ldr	r3, [pc, #84]	; (2dc <atcab_aes+0x7c>)
     288:	4798      	blx	r3
        }

        if ((status = atAES(ca_cmd, &packet)) != ATCA_SUCCESS)
     28a:	4669      	mov	r1, sp
     28c:	0030      	movs	r0, r6
     28e:	4b14      	ldr	r3, [pc, #80]	; (2e0 <atcab_aes+0x80>)
     290:	4798      	blx	r3
     292:	1e04      	subs	r4, r0, #0
     294:	d009      	beq.n	2aa <atcab_aes+0x4a>

    }
    while (0);

    return status;
}
     296:	0020      	movs	r0, r4
     298:	b032      	add	sp, #200	; 0xc8
     29a:	bd70      	pop	{r4, r5, r6, pc}
            memcpy(packet.data, aes_in, ATCA_AES_GFM_SIZE);
     29c:	2220      	movs	r2, #32
     29e:	0021      	movs	r1, r4
     2a0:	466b      	mov	r3, sp
     2a2:	1d98      	adds	r0, r3, #6
     2a4:	4b0d      	ldr	r3, [pc, #52]	; (2dc <atcab_aes+0x7c>)
     2a6:	4798      	blx	r3
     2a8:	e7ef      	b.n	28a <atcab_aes+0x2a>
        if ((status = atca_execute_command(&packet, _gDevice)) != ATCA_SUCCESS)
     2aa:	4b0b      	ldr	r3, [pc, #44]	; (2d8 <atcab_aes+0x78>)
     2ac:	6819      	ldr	r1, [r3, #0]
     2ae:	4668      	mov	r0, sp
     2b0:	4b0c      	ldr	r3, [pc, #48]	; (2e4 <atcab_aes+0x84>)
     2b2:	4798      	blx	r3
     2b4:	1e04      	subs	r4, r0, #0
     2b6:	d1ee      	bne.n	296 <atcab_aes+0x36>
        if (aes_out && packet.data[ATCA_COUNT_IDX] >= (3 + AES_DATA_SIZE))
     2b8:	2d00      	cmp	r5, #0
     2ba:	d0ec      	beq.n	296 <atcab_aes+0x36>
     2bc:	466b      	mov	r3, sp
     2be:	799b      	ldrb	r3, [r3, #6]
     2c0:	2b12      	cmp	r3, #18
     2c2:	d9e8      	bls.n	296 <atcab_aes+0x36>
            memcpy(aes_out, &packet.data[ATCA_RSP_DATA_IDX], AES_DATA_SIZE);
     2c4:	2210      	movs	r2, #16
     2c6:	466b      	mov	r3, sp
     2c8:	1dd9      	adds	r1, r3, #7
     2ca:	0028      	movs	r0, r5
     2cc:	4b03      	ldr	r3, [pc, #12]	; (2dc <atcab_aes+0x7c>)
     2ce:	4798      	blx	r3
     2d0:	e7e1      	b.n	296 <atcab_aes+0x36>
            status = ATCA_BAD_PARAM;
     2d2:	24e2      	movs	r4, #226	; 0xe2
     2d4:	e7df      	b.n	296 <atcab_aes+0x36>
     2d6:	46c0      	nop			; (mov r8, r8)
     2d8:	200009e4 	.word	0x200009e4
     2dc:	00019d89 	.word	0x00019d89
     2e0:	00000af1 	.word	0x00000af1
     2e4:	00000cf5 	.word	0x00000cf5

000002e8 <atcab_aes_encrypt>:
 * \param[out] ciphertext  Output ciphertext is returned here (16 bytes).
 *
 * \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS  atcab_aes_encrypt(uint16_t key_id, uint8_t key_block, const uint8_t* plaintext, uint8_t* ciphertext)
{
     2e8:	b510      	push	{r4, lr}
     2ea:	0004      	movs	r4, r0
    uint8_t mode;

    mode = AES_MODE_ENCRYPT | (AES_MODE_KEY_BLOCK_MASK & (key_block << AES_MODE_KEY_BLOCK_POS));
     2ec:	0189      	lsls	r1, r1, #6
    return atcab_aes(mode, key_id, plaintext, ciphertext);
     2ee:	b2c8      	uxtb	r0, r1
     2f0:	0021      	movs	r1, r4
     2f2:	4c01      	ldr	r4, [pc, #4]	; (2f8 <atcab_aes_encrypt+0x10>)
     2f4:	47a0      	blx	r4
}
     2f6:	bd10      	pop	{r4, pc}
     2f8:	00000261 	.word	0x00000261

000002fc <atcab_gendig>:
 *                              "Shared Nonce" mode, otherwise ignored (can be NULL).
 *  \param[in] other_data_size  Size of other_data in bytes.
 *  \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS atcab_gendig(uint8_t zone, uint16_t key_id, const uint8_t *other_data, uint8_t other_data_size)
{
     2fc:	b530      	push	{r4, r5, lr}
     2fe:	b0b3      	sub	sp, #204	; 0xcc
     300:	0014      	movs	r4, r2
    ATCAPacket packet;
    ATCACommand ca_cmd = _gDevice->mCommands;
     302:	4a1e      	ldr	r2, [pc, #120]	; (37c <atcab_gendig+0x80>)
     304:	6812      	ldr	r2, [r2, #0]
     306:	6815      	ldr	r5, [r2, #0]
    ATCA_STATUS status = ATCA_GEN_FAIL;
    bool is_no_mac_key = false;

    if (other_data_size > 0 && other_data == NULL)
     308:	2b00      	cmp	r3, #0
     30a:	d026      	beq.n	35a <atcab_gendig+0x5e>
     30c:	2c00      	cmp	r4, #0
     30e:	d022      	beq.n	356 <atcab_gendig+0x5a>
    }

    do
    {
        // build gendig command
        packet.param1 = zone;
     310:	466a      	mov	r2, sp
     312:	70d0      	strb	r0, [r2, #3]
        packet.param2 = key_id;
     314:	8091      	strh	r1, [r2, #4]

        if (packet.param1 == GENDIG_ZONE_SHARED_NONCE && other_data_size >= ATCA_BLOCK_SIZE)
     316:	2803      	cmp	r0, #3
     318:	d124      	bne.n	364 <atcab_gendig+0x68>
     31a:	2b1f      	cmp	r3, #31
     31c:	d911      	bls.n	342 <atcab_gendig+0x46>
        {
            memcpy(&packet.data[0], &other_data[0], ATCA_BLOCK_SIZE);
     31e:	2220      	movs	r2, #32
     320:	0021      	movs	r1, r4
     322:	466b      	mov	r3, sp
     324:	1d98      	adds	r0, r3, #6
     326:	4b16      	ldr	r3, [pc, #88]	; (380 <atcab_gendig+0x84>)
     328:	4798      	blx	r3
    bool is_no_mac_key = false;
     32a:	2200      	movs	r2, #0
            memcpy(&packet.data[0], &other_data[0], ATCA_BLOCK_SIZE);
     32c:	e01d      	b.n	36a <atcab_gendig+0x6e>
        }
        else if (packet.param1 == GENDIG_ZONE_DATA && other_data_size >= ATCA_WORD_SIZE)
     32e:	2b03      	cmp	r3, #3
     330:	d91b      	bls.n	36a <atcab_gendig+0x6e>
        {
            memcpy(&packet.data[0], &other_data[0], ATCA_WORD_SIZE);
     332:	3204      	adds	r2, #4
     334:	0021      	movs	r1, r4
     336:	466b      	mov	r3, sp
     338:	1d98      	adds	r0, r3, #6
     33a:	4b11      	ldr	r3, [pc, #68]	; (380 <atcab_gendig+0x84>)
     33c:	4798      	blx	r3
            is_no_mac_key = true;
     33e:	2201      	movs	r2, #1
     340:	e013      	b.n	36a <atcab_gendig+0x6e>
    bool is_no_mac_key = false;
     342:	2200      	movs	r2, #0
     344:	e011      	b.n	36a <atcab_gendig+0x6e>
     346:	2200      	movs	r2, #0
     348:	e00f      	b.n	36a <atcab_gendig+0x6e>
        if ((status = atGenDig(ca_cmd, &packet, is_no_mac_key)) != ATCA_SUCCESS)
        {
            break;
        }

        if ((status = atca_execute_command(&packet, _gDevice)) != ATCA_SUCCESS)
     34a:	4b0c      	ldr	r3, [pc, #48]	; (37c <atcab_gendig+0x80>)
     34c:	6819      	ldr	r1, [r3, #0]
     34e:	4668      	mov	r0, sp
     350:	4b0c      	ldr	r3, [pc, #48]	; (384 <atcab_gendig+0x88>)
     352:	4798      	blx	r3
     354:	e00f      	b.n	376 <atcab_gendig+0x7a>
        return ATCA_BAD_PARAM;
     356:	20e2      	movs	r0, #226	; 0xe2
     358:	e00d      	b.n	376 <atcab_gendig+0x7a>
        packet.param1 = zone;
     35a:	466a      	mov	r2, sp
     35c:	70d0      	strb	r0, [r2, #3]
        packet.param2 = key_id;
     35e:	8091      	strh	r1, [r2, #4]
        if (packet.param1 == GENDIG_ZONE_SHARED_NONCE && other_data_size >= ATCA_BLOCK_SIZE)
     360:	2803      	cmp	r0, #3
     362:	d0f0      	beq.n	346 <atcab_gendig+0x4a>
    bool is_no_mac_key = false;
     364:	2200      	movs	r2, #0
        else if (packet.param1 == GENDIG_ZONE_DATA && other_data_size >= ATCA_WORD_SIZE)
     366:	2802      	cmp	r0, #2
     368:	d0e1      	beq.n	32e <atcab_gendig+0x32>
        if ((status = atGenDig(ca_cmd, &packet, is_no_mac_key)) != ATCA_SUCCESS)
     36a:	4669      	mov	r1, sp
     36c:	0028      	movs	r0, r5
     36e:	4b06      	ldr	r3, [pc, #24]	; (388 <atcab_gendig+0x8c>)
     370:	4798      	blx	r3
     372:	2800      	cmp	r0, #0
     374:	d0e9      	beq.n	34a <atcab_gendig+0x4e>

    }
    while (0);

    return status;
}
     376:	b033      	add	sp, #204	; 0xcc
     378:	bd30      	pop	{r4, r5, pc}
     37a:	46c0      	nop			; (mov r8, r8)
     37c:	200009e4 	.word	0x200009e4
     380:	00019d89 	.word	0x00019d89
     384:	00000cf5 	.word	0x00000cf5
     388:	00000a21 	.word	0x00000a21

0000038c <atcab_kdf>:
 *                        encryption is not used, this can be NULL.
 *
 * \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS atcab_kdf(uint8_t mode, uint16_t key_id, const uint32_t details, const uint8_t* message, uint8_t* out_data, uint8_t* out_nonce)
{
     38c:	b5f0      	push	{r4, r5, r6, r7, lr}
     38e:	b0b3      	sub	sp, #204	; 0xcc
     390:	0015      	movs	r5, r2
    ATCA_STATUS status = ATCA_GEN_FAIL;
    uint16_t out_data_size = 0;

    do
    {
        if (message == NULL)
     392:	2b00      	cmp	r3, #0
     394:	d053      	beq.n	43e <atcab_kdf+0xb2>
    ATCACommand ca_cmd = _gDevice->mCommands;
     396:	4a2b      	ldr	r2, [pc, #172]	; (444 <atcab_kdf+0xb8>)
     398:	6812      	ldr	r2, [r2, #0]
     39a:	6814      	ldr	r4, [r2, #0]
        {
            return ATCA_BAD_PARAM;
        }

        // Build the KDF command
        packet.param1 = mode;
     39c:	466a      	mov	r2, sp
     39e:	70d0      	strb	r0, [r2, #3]
        packet.param2 = key_id;
     3a0:	8091      	strh	r1, [r2, #4]

        // Add details parameter
        packet.data[0] = details;
     3a2:	7195      	strb	r5, [r2, #6]
        packet.data[1] = details >> 8;
     3a4:	0a2a      	lsrs	r2, r5, #8
     3a6:	4669      	mov	r1, sp
     3a8:	71ca      	strb	r2, [r1, #7]
        packet.data[2] = details >> 16;
     3aa:	0c2a      	lsrs	r2, r5, #16
     3ac:	720a      	strb	r2, [r1, #8]
        packet.data[3] = details >> 24;
     3ae:	0e2a      	lsrs	r2, r5, #24
     3b0:	724a      	strb	r2, [r1, #9]
     3b2:	2660      	movs	r6, #96	; 0x60
     3b4:	4006      	ands	r6, r0

        // Add input message
        if ((mode & KDF_MODE_ALG_MASK) == KDF_MODE_ALG_AES)
     3b6:	2e20      	cmp	r6, #32
     3b8:	d00d      	beq.n	3d6 <atcab_kdf+0x4a>
            memcpy(&packet.data[KDF_DETAILS_SIZE], message, AES_DATA_SIZE);
        }
        else
        {
            // All other algorithms encode message size in the last byte of details
            memcpy(&packet.data[KDF_DETAILS_SIZE], message, packet.data[3]);
     3ba:	0019      	movs	r1, r3
     3bc:	200a      	movs	r0, #10
     3be:	4468      	add	r0, sp
     3c0:	4b21      	ldr	r3, [pc, #132]	; (448 <atcab_kdf+0xbc>)
     3c2:	4798      	blx	r3
        }

        // Build command
        if ((status = atKDF(ca_cmd, &packet)) != ATCA_SUCCESS)
     3c4:	4669      	mov	r1, sp
     3c6:	0020      	movs	r0, r4
     3c8:	4b20      	ldr	r3, [pc, #128]	; (44c <atcab_kdf+0xc0>)
     3ca:	4798      	blx	r3
     3cc:	1e04      	subs	r4, r0, #0
     3ce:	d009      	beq.n	3e4 <atcab_kdf+0x58>
        }
    }
    while (false);

    return status;
}
     3d0:	0020      	movs	r0, r4
     3d2:	b033      	add	sp, #204	; 0xcc
     3d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
            memcpy(&packet.data[KDF_DETAILS_SIZE], message, AES_DATA_SIZE);
     3d6:	2210      	movs	r2, #16
     3d8:	0019      	movs	r1, r3
     3da:	200a      	movs	r0, #10
     3dc:	4468      	add	r0, sp
     3de:	4b1a      	ldr	r3, [pc, #104]	; (448 <atcab_kdf+0xbc>)
     3e0:	4798      	blx	r3
     3e2:	e7ef      	b.n	3c4 <atcab_kdf+0x38>
        if ((status = atca_execute_command(&packet, _gDevice)) != ATCA_SUCCESS)
     3e4:	4b17      	ldr	r3, [pc, #92]	; (444 <atcab_kdf+0xb8>)
     3e6:	6819      	ldr	r1, [r3, #0]
     3e8:	4668      	mov	r0, sp
     3ea:	4b19      	ldr	r3, [pc, #100]	; (450 <atcab_kdf+0xc4>)
     3ec:	4798      	blx	r3
     3ee:	1e04      	subs	r4, r0, #0
     3f0:	d1ee      	bne.n	3d0 <atcab_kdf+0x44>
            out_data_size = 32;
     3f2:	2720      	movs	r7, #32
        if (((mode & KDF_MODE_ALG_MASK) == KDF_MODE_ALG_PRF) && (details & KDF_DETAILS_PRF_TARGET_LEN_64))
     3f4:	2e00      	cmp	r6, #0
     3f6:	d102      	bne.n	3fe <atcab_kdf+0x72>
     3f8:	05eb      	lsls	r3, r5, #23
     3fa:	d500      	bpl.n	3fe <atcab_kdf+0x72>
            out_data_size = 64;
     3fc:	3720      	adds	r7, #32
        if (out_data != NULL && packet.data[ATCA_COUNT_IDX] >= (ATCA_PACKET_OVERHEAD + out_data_size))
     3fe:	9b38      	ldr	r3, [sp, #224]	; 0xe0
     400:	2b00      	cmp	r3, #0
     402:	d004      	beq.n	40e <atcab_kdf+0x82>
     404:	466b      	mov	r3, sp
     406:	799a      	ldrb	r2, [r3, #6]
     408:	1cfb      	adds	r3, r7, #3
     40a:	429a      	cmp	r2, r3
     40c:	da10      	bge.n	430 <atcab_kdf+0xa4>
        if (out_nonce != NULL && packet.data[ATCA_COUNT_IDX] >= (ATCA_PACKET_OVERHEAD + out_data_size + 32))
     40e:	9b39      	ldr	r3, [sp, #228]	; 0xe4
     410:	2b00      	cmp	r3, #0
     412:	d0dd      	beq.n	3d0 <atcab_kdf+0x44>
     414:	466b      	mov	r3, sp
     416:	799a      	ldrb	r2, [r3, #6]
     418:	003b      	movs	r3, r7
     41a:	3323      	adds	r3, #35	; 0x23
     41c:	429a      	cmp	r2, r3
     41e:	dbd7      	blt.n	3d0 <atcab_kdf+0x44>
            memcpy(out_nonce, &packet.data[ATCA_RSP_DATA_IDX + out_data_size], 32);
     420:	ab32      	add	r3, sp, #200	; 0xc8
     422:	19d9      	adds	r1, r3, r7
     424:	39c1      	subs	r1, #193	; 0xc1
     426:	2220      	movs	r2, #32
     428:	9839      	ldr	r0, [sp, #228]	; 0xe4
     42a:	4b07      	ldr	r3, [pc, #28]	; (448 <atcab_kdf+0xbc>)
     42c:	4798      	blx	r3
     42e:	e7cf      	b.n	3d0 <atcab_kdf+0x44>
            memcpy(out_data, &packet.data[ATCA_RSP_DATA_IDX], out_data_size);
     430:	003a      	movs	r2, r7
     432:	466b      	mov	r3, sp
     434:	1dd9      	adds	r1, r3, #7
     436:	9838      	ldr	r0, [sp, #224]	; 0xe0
     438:	4b03      	ldr	r3, [pc, #12]	; (448 <atcab_kdf+0xbc>)
     43a:	4798      	blx	r3
     43c:	e7e7      	b.n	40e <atcab_kdf+0x82>
            return ATCA_BAD_PARAM;
     43e:	24e2      	movs	r4, #226	; 0xe2
     440:	e7c6      	b.n	3d0 <atcab_kdf+0x44>
     442:	46c0      	nop			; (mov r8, r8)
     444:	200009e4 	.word	0x200009e4
     448:	00019d89 	.word	0x00019d89
     44c:	00000b1d 	.word	0x00000b1d
     450:	00000cf5 	.word	0x00000cf5

00000454 <atcab_nonce_base>:
 *                          needed.
 *
 * \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS atcab_nonce_base(uint8_t mode, uint16_t zero, const uint8_t *num_in, uint8_t* rand_out)
{
     454:	b5f0      	push	{r4, r5, r6, r7, lr}
     456:	b0b3      	sub	sp, #204	; 0xcc
     458:	0016      	movs	r6, r2
     45a:	001d      	movs	r5, r3
    ATCAPacket packet;
    ATCACommand ca_cmd = _gDevice->mCommands;
     45c:	4b1f      	ldr	r3, [pc, #124]	; (4dc <atcab_nonce_base+0x88>)
     45e:	681b      	ldr	r3, [r3, #0]
     460:	681f      	ldr	r7, [r3, #0]
    ATCA_STATUS status = ATCA_GEN_FAIL;
    uint8_t nonce_mode = mode & NONCE_MODE_MASK;
     462:	2303      	movs	r3, #3
     464:	4003      	ands	r3, r0

    do
    {
        // build a nonce command
        packet.param1 = mode;
     466:	466a      	mov	r2, sp
     468:	70d0      	strb	r0, [r2, #3]
        packet.param2 = zero;
     46a:	8091      	strh	r1, [r2, #4]

        // Copy the right amount of NumIn data
        if ((nonce_mode == NONCE_MODE_SEED_UPDATE || nonce_mode == NONCE_MODE_NO_SEED_UPDATE))
     46c:	2b01      	cmp	r3, #1
     46e:	d905      	bls.n	47c <atcab_nonce_base+0x28>
                memcpy(packet.data, num_in, 32);
            }
        }
        else
        {
            return ATCA_BAD_PARAM;
     470:	24e2      	movs	r4, #226	; 0xe2
        else if (nonce_mode == NONCE_MODE_PASSTHROUGH)
     472:	2b03      	cmp	r3, #3
     474:	d022      	beq.n	4bc <atcab_nonce_base+0x68>

    }
    while (0);

    return status;
}
     476:	0020      	movs	r0, r4
     478:	b033      	add	sp, #204	; 0xcc
     47a:	bdf0      	pop	{r4, r5, r6, r7, pc}
            memcpy(packet.data, num_in, NONCE_NUMIN_SIZE);
     47c:	2214      	movs	r2, #20
     47e:	0031      	movs	r1, r6
     480:	466b      	mov	r3, sp
     482:	1d98      	adds	r0, r3, #6
     484:	4b16      	ldr	r3, [pc, #88]	; (4e0 <atcab_nonce_base+0x8c>)
     486:	4798      	blx	r3
        if ((status = atNonce(ca_cmd, &packet)) != ATCA_SUCCESS)
     488:	4669      	mov	r1, sp
     48a:	0038      	movs	r0, r7
     48c:	4b15      	ldr	r3, [pc, #84]	; (4e4 <atcab_nonce_base+0x90>)
     48e:	4798      	blx	r3
     490:	1e04      	subs	r4, r0, #0
     492:	d1f0      	bne.n	476 <atcab_nonce_base+0x22>
        if ((status = atca_execute_command(&packet, _gDevice)) != ATCA_SUCCESS)
     494:	4b11      	ldr	r3, [pc, #68]	; (4dc <atcab_nonce_base+0x88>)
     496:	6819      	ldr	r1, [r3, #0]
     498:	4668      	mov	r0, sp
     49a:	4b13      	ldr	r3, [pc, #76]	; (4e8 <atcab_nonce_base+0x94>)
     49c:	4798      	blx	r3
     49e:	1e04      	subs	r4, r0, #0
     4a0:	d1e9      	bne.n	476 <atcab_nonce_base+0x22>
        if ((rand_out != NULL) && (packet.data[ATCA_COUNT_IDX] >= 35))
     4a2:	2d00      	cmp	r5, #0
     4a4:	d0e7      	beq.n	476 <atcab_nonce_base+0x22>
     4a6:	466b      	mov	r3, sp
     4a8:	799b      	ldrb	r3, [r3, #6]
     4aa:	2b22      	cmp	r3, #34	; 0x22
     4ac:	d9e3      	bls.n	476 <atcab_nonce_base+0x22>
            memcpy(&rand_out[0], &packet.data[ATCA_RSP_DATA_IDX], 32);
     4ae:	2220      	movs	r2, #32
     4b0:	466b      	mov	r3, sp
     4b2:	1dd9      	adds	r1, r3, #7
     4b4:	0028      	movs	r0, r5
     4b6:	4b0a      	ldr	r3, [pc, #40]	; (4e0 <atcab_nonce_base+0x8c>)
     4b8:	4798      	blx	r3
     4ba:	e7dc      	b.n	476 <atcab_nonce_base+0x22>
            if ((mode & NONCE_MODE_INPUT_LEN_MASK) == NONCE_MODE_INPUT_LEN_64)
     4bc:	0683      	lsls	r3, r0, #26
     4be:	d506      	bpl.n	4ce <atcab_nonce_base+0x7a>
                memcpy(packet.data, num_in, 64);
     4c0:	2240      	movs	r2, #64	; 0x40
     4c2:	0031      	movs	r1, r6
     4c4:	466b      	mov	r3, sp
     4c6:	1d98      	adds	r0, r3, #6
     4c8:	4b05      	ldr	r3, [pc, #20]	; (4e0 <atcab_nonce_base+0x8c>)
     4ca:	4798      	blx	r3
     4cc:	e7dc      	b.n	488 <atcab_nonce_base+0x34>
                memcpy(packet.data, num_in, 32);
     4ce:	2220      	movs	r2, #32
     4d0:	0031      	movs	r1, r6
     4d2:	466b      	mov	r3, sp
     4d4:	1d98      	adds	r0, r3, #6
     4d6:	4b02      	ldr	r3, [pc, #8]	; (4e0 <atcab_nonce_base+0x8c>)
     4d8:	4798      	blx	r3
     4da:	e7d5      	b.n	488 <atcab_nonce_base+0x34>
     4dc:	200009e4 	.word	0x200009e4
     4e0:	00019d89 	.word	0x00019d89
     4e4:	00000a51 	.word	0x00000a51
     4e8:	00000cf5 	.word	0x00000cf5

000004ec <atcab_nonce_rand>:
 *                        here. Can be NULL if not needed.
 *
 *  \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS atcab_nonce_rand(const uint8_t *num_in, uint8_t* rand_out)
{
     4ec:	b510      	push	{r4, lr}
     4ee:	0002      	movs	r2, r0
     4f0:	000b      	movs	r3, r1
    return atcab_nonce_base(NONCE_MODE_SEED_UPDATE, 0, num_in, rand_out);
     4f2:	2100      	movs	r1, #0
     4f4:	2000      	movs	r0, #0
     4f6:	4c01      	ldr	r4, [pc, #4]	; (4fc <atcab_nonce_rand+0x10>)
     4f8:	47a0      	blx	r4
}
     4fa:	bd10      	pop	{r4, pc}
     4fc:	00000455 	.word	0x00000455

00000500 <atcab_random>:
 * \param[out] rand_out  32 bytes of random data is returned here.
 *
 * \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS atcab_random(uint8_t *rand_out)
{
     500:	b530      	push	{r4, r5, lr}
     502:	b0b3      	sub	sp, #204	; 0xcc
     504:	0005      	movs	r5, r0
    ATCAPacket packet;
    ATCACommand ca_cmd = _gDevice->mCommands;
     506:	4b12      	ldr	r3, [pc, #72]	; (550 <atcab_random+0x50>)
     508:	681b      	ldr	r3, [r3, #0]
     50a:	6818      	ldr	r0, [r3, #0]
    ATCA_STATUS status = ATCA_GEN_FAIL;

    do
    {
        // build an random command
        packet.param1 = RANDOM_SEED_UPDATE;
     50c:	2300      	movs	r3, #0
     50e:	466a      	mov	r2, sp
     510:	70d3      	strb	r3, [r2, #3]
        packet.param2 = 0x0000;
     512:	8093      	strh	r3, [r2, #4]

        if ((status = atRandom(ca_cmd, &packet)) != ATCA_SUCCESS)
     514:	4669      	mov	r1, sp
     516:	4b0f      	ldr	r3, [pc, #60]	; (554 <atcab_random+0x54>)
     518:	4798      	blx	r3
     51a:	1e04      	subs	r4, r0, #0
     51c:	d002      	beq.n	524 <atcab_random+0x24>
    }
    while (0);


    return status;
}
     51e:	0020      	movs	r0, r4
     520:	b033      	add	sp, #204	; 0xcc
     522:	bd30      	pop	{r4, r5, pc}
        if ((status = atca_execute_command(&packet, _gDevice)) != ATCA_SUCCESS)
     524:	4b0a      	ldr	r3, [pc, #40]	; (550 <atcab_random+0x50>)
     526:	6819      	ldr	r1, [r3, #0]
     528:	4668      	mov	r0, sp
     52a:	4b0b      	ldr	r3, [pc, #44]	; (558 <atcab_random+0x58>)
     52c:	4798      	blx	r3
     52e:	1e04      	subs	r4, r0, #0
     530:	d1f5      	bne.n	51e <atcab_random+0x1e>
        if (packet.data[ATCA_COUNT_IDX] != RANDOM_RSP_SIZE)
     532:	466b      	mov	r3, sp
     534:	799b      	ldrb	r3, [r3, #6]
     536:	2b23      	cmp	r3, #35	; 0x23
     538:	d001      	beq.n	53e <atcab_random+0x3e>
            status = ATCA_RX_FAIL;
     53a:	24e6      	movs	r4, #230	; 0xe6
     53c:	e7ef      	b.n	51e <atcab_random+0x1e>
        if (rand_out)
     53e:	2d00      	cmp	r5, #0
     540:	d0ed      	beq.n	51e <atcab_random+0x1e>
            memcpy(rand_out, &packet.data[ATCA_RSP_DATA_IDX], RANDOM_NUM_SIZE);
     542:	2220      	movs	r2, #32
     544:	466b      	mov	r3, sp
     546:	1dd9      	adds	r1, r3, #7
     548:	0028      	movs	r0, r5
     54a:	4b04      	ldr	r3, [pc, #16]	; (55c <atcab_random+0x5c>)
     54c:	4798      	blx	r3
     54e:	e7e6      	b.n	51e <atcab_random+0x1e>
     550:	200009e4 	.word	0x200009e4
     554:	00000a8d 	.word	0x00000a8d
     558:	00000cf5 	.word	0x00000cf5
     55c:	00019d89 	.word	0x00019d89

00000560 <atcab_read_zone>:
 *  \param[in]  len     Length of the data to be read. Must be either 4 or 32.
 *
 *  returns ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS atcab_read_zone(uint8_t zone, uint16_t slot, uint8_t block, uint8_t offset, uint8_t *data, uint8_t len)
{
     560:	b5f0      	push	{r4, r5, r6, r7, lr}
     562:	b0b9      	sub	sp, #228	; 0xe4
     564:	9003      	str	r0, [sp, #12]
     566:	a83e      	add	r0, sp, #248	; 0xf8
     568:	c880      	ldmia	r0!, {r7}
     56a:	7805      	ldrb	r5, [r0, #0]
    uint16_t addr;

    do
    {
        // Check the input parameters
        if (data == NULL)
     56c:	2f00      	cmp	r7, #0
     56e:	d00a      	beq.n	586 <atcab_read_zone+0x26>
    ATCACommand ca_cmd = _gDevice->mCommands;
     570:	4822      	ldr	r0, [pc, #136]	; (5fc <atcab_read_zone+0x9c>)
     572:	6800      	ldr	r0, [r0, #0]
     574:	6806      	ldr	r6, [r0, #0]
        {
            return ATCA_BAD_PARAM;
        }

        if (len != 4 && len != 32)
     576:	2d04      	cmp	r5, #4
     578:	d016      	beq.n	5a8 <atcab_read_zone+0x48>
        {
            return ATCA_BAD_PARAM;
     57a:	24e2      	movs	r4, #226	; 0xe2
        if (len != 4 && len != 32)
     57c:	2d20      	cmp	r5, #32
     57e:	d004      	beq.n	58a <atcab_read_zone+0x2a>
        memcpy(data, &packet.data[1], len);
    }
    while (0);

    return status;
}
     580:	0020      	movs	r0, r4
     582:	b039      	add	sp, #228	; 0xe4
     584:	bdf0      	pop	{r4, r5, r6, r7, pc}
            return ATCA_BAD_PARAM;
     586:	24e2      	movs	r4, #226	; 0xe2
     588:	e7fa      	b.n	580 <atcab_read_zone+0x20>
        if ((status = atcab_get_addr(zone, slot, block, offset, &addr)) != ATCA_SUCCESS)
     58a:	200e      	movs	r0, #14
     58c:	ac02      	add	r4, sp, #8
     58e:	46a4      	mov	ip, r4
     590:	4460      	add	r0, ip
     592:	9000      	str	r0, [sp, #0]
     594:	9803      	ldr	r0, [sp, #12]
     596:	4c1a      	ldr	r4, [pc, #104]	; (600 <atcab_read_zone+0xa0>)
     598:	47a0      	blx	r4
     59a:	1e04      	subs	r4, r0, #0
     59c:	d1f0      	bne.n	580 <atcab_read_zone+0x20>
            zone = zone | ATCA_ZONE_READWRITE_32;
     59e:	2380      	movs	r3, #128	; 0x80
     5a0:	9a03      	ldr	r2, [sp, #12]
     5a2:	431a      	orrs	r2, r3
     5a4:	9203      	str	r2, [sp, #12]
     5a6:	e009      	b.n	5bc <atcab_read_zone+0x5c>
        if ((status = atcab_get_addr(zone, slot, block, offset, &addr)) != ATCA_SUCCESS)
     5a8:	200e      	movs	r0, #14
     5aa:	ac02      	add	r4, sp, #8
     5ac:	46a4      	mov	ip, r4
     5ae:	4460      	add	r0, ip
     5b0:	9000      	str	r0, [sp, #0]
     5b2:	9803      	ldr	r0, [sp, #12]
     5b4:	4c12      	ldr	r4, [pc, #72]	; (600 <atcab_read_zone+0xa0>)
     5b6:	47a0      	blx	r4
     5b8:	1e04      	subs	r4, r0, #0
     5ba:	d1e1      	bne.n	580 <atcab_read_zone+0x20>
        packet.param1 = zone;
     5bc:	a906      	add	r1, sp, #24
     5be:	466b      	mov	r3, sp
     5c0:	7b1b      	ldrb	r3, [r3, #12]
     5c2:	70cb      	strb	r3, [r1, #3]
        packet.param2 = addr;
     5c4:	230e      	movs	r3, #14
     5c6:	aa02      	add	r2, sp, #8
     5c8:	4694      	mov	ip, r2
     5ca:	4463      	add	r3, ip
     5cc:	881b      	ldrh	r3, [r3, #0]
     5ce:	808b      	strh	r3, [r1, #4]
        if ((status = atRead(ca_cmd, &packet)) != ATCA_SUCCESS)
     5d0:	0030      	movs	r0, r6
     5d2:	4b0c      	ldr	r3, [pc, #48]	; (604 <atcab_read_zone+0xa4>)
     5d4:	4798      	blx	r3
     5d6:	1e04      	subs	r4, r0, #0
     5d8:	d1d2      	bne.n	580 <atcab_read_zone+0x20>
        if ((status = atca_execute_command(&packet, _gDevice)) != ATCA_SUCCESS)
     5da:	4b08      	ldr	r3, [pc, #32]	; (5fc <atcab_read_zone+0x9c>)
     5dc:	6819      	ldr	r1, [r3, #0]
     5de:	a806      	add	r0, sp, #24
     5e0:	4b09      	ldr	r3, [pc, #36]	; (608 <atcab_read_zone+0xa8>)
     5e2:	4798      	blx	r3
     5e4:	1e04      	subs	r4, r0, #0
     5e6:	d1cb      	bne.n	580 <atcab_read_zone+0x20>
        memcpy(data, &packet.data[1], len);
     5e8:	002a      	movs	r2, r5
     5ea:	2117      	movs	r1, #23
     5ec:	ab02      	add	r3, sp, #8
     5ee:	469c      	mov	ip, r3
     5f0:	4461      	add	r1, ip
     5f2:	0038      	movs	r0, r7
     5f4:	4b05      	ldr	r3, [pc, #20]	; (60c <atcab_read_zone+0xac>)
     5f6:	4798      	blx	r3
     5f8:	e7c2      	b.n	580 <atcab_read_zone+0x20>
     5fa:	46c0      	nop			; (mov r8, r8)
     5fc:	200009e4 	.word	0x200009e4
     600:	00000191 	.word	0x00000191
     604:	00000aa5 	.word	0x00000aa5
     608:	00000cf5 	.word	0x00000cf5
     60c:	00019d89 	.word	0x00019d89

00000610 <atcab_read_serial_number>:
 *  \param[out] serial_number  9 byte serial number is returned here.
 *
 *  \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS atcab_read_serial_number(uint8_t* serial_number)
{
     610:	b570      	push	{r4, r5, r6, lr}
     612:	b08a      	sub	sp, #40	; 0x28
     614:	0005      	movs	r5, r0
    ATCA_STATUS status = ATCA_GEN_FAIL;
    uint8_t read_buf[ATCA_BLOCK_SIZE];

    if (!serial_number)
    {
        return ATCA_BAD_PARAM;
     616:	24e2      	movs	r4, #226	; 0xe2
    if (!serial_number)
     618:	2800      	cmp	r0, #0
     61a:	d00b      	beq.n	634 <atcab_read_serial_number+0x24>
    }

    do
    {
        if ((status = atcab_read_zone(ATCA_ZONE_CONFIG, 0, 0, 0, read_buf, ATCA_BLOCK_SIZE)) != ATCA_SUCCESS)
     61c:	2320      	movs	r3, #32
     61e:	9301      	str	r3, [sp, #4]
     620:	ab02      	add	r3, sp, #8
     622:	9300      	str	r3, [sp, #0]
     624:	2300      	movs	r3, #0
     626:	2200      	movs	r2, #0
     628:	2100      	movs	r1, #0
     62a:	2000      	movs	r0, #0
     62c:	4c08      	ldr	r4, [pc, #32]	; (650 <atcab_read_serial_number+0x40>)
     62e:	47a0      	blx	r4
     630:	1e04      	subs	r4, r0, #0
     632:	d002      	beq.n	63a <atcab_read_serial_number+0x2a>
        memcpy(&serial_number[4], &read_buf[8], 5);
    }
    while (0);

    return status;
}
     634:	0020      	movs	r0, r4
     636:	b00a      	add	sp, #40	; 0x28
     638:	bd70      	pop	{r4, r5, r6, pc}
        memcpy(&serial_number[0], &read_buf[0], 4);
     63a:	2204      	movs	r2, #4
     63c:	a902      	add	r1, sp, #8
     63e:	0028      	movs	r0, r5
     640:	4e04      	ldr	r6, [pc, #16]	; (654 <atcab_read_serial_number+0x44>)
     642:	47b0      	blx	r6
        memcpy(&serial_number[4], &read_buf[8], 5);
     644:	1d28      	adds	r0, r5, #4
     646:	2205      	movs	r2, #5
     648:	a904      	add	r1, sp, #16
     64a:	47b0      	blx	r6
     64c:	e7f2      	b.n	634 <atcab_read_serial_number+0x24>
     64e:	46c0      	nop			; (mov r8, r8)
     650:	00000561 	.word	0x00000561
     654:	00019d89 	.word	0x00019d89

00000658 <atcab_read_enc>:
 *  \param[in]  enc_key_id  KeyID of the ReadKey being used.
 *
 *  returns ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS atcab_read_enc(uint16_t key_id, uint8_t block, uint8_t *data, const uint8_t* enc_key, const uint16_t enc_key_id)
{
     658:	b5f0      	push	{r4, r5, r6, r7, lr}
     65a:	46d6      	mov	lr, sl
     65c:	b500      	push	{lr}
     65e:	b0b6      	sub	sp, #216	; 0xd8
     660:	9002      	str	r0, [sp, #8]
     662:	9103      	str	r1, [sp, #12]
     664:	0015      	movs	r5, r2
     666:	001c      	movs	r4, r3
     668:	ab3c      	add	r3, sp, #240	; 0xf0
     66a:	881e      	ldrh	r6, [r3, #0]
    uint8_t zone = ATCA_ZONE_DATA | ATCA_ZONE_READWRITE_32;
    atca_nonce_in_out_t nonce_params;
    atca_gen_dig_in_out_t gen_dig_param;
    atca_temp_key_t temp_key;
    uint8_t serial_num[32];
    uint8_t num_in[NONCE_NUMIN_SIZE] = { 0 };
     66c:	2214      	movs	r2, #20
     66e:	2100      	movs	r1, #0
     670:	a80e      	add	r0, sp, #56	; 0x38
     672:	4f3b      	ldr	r7, [pc, #236]	; (760 <atcab_read_enc+0x108>)
     674:	47b8      	blx	r7
    uint8_t rand_out[RANDOM_NUM_SIZE] = { 0 };
     676:	2220      	movs	r2, #32
     678:	2100      	movs	r1, #0
     67a:	a806      	add	r0, sp, #24
     67c:	47b8      	blx	r7
    uint8_t other_data[4] = { 0 };
     67e:	2300      	movs	r3, #0
     680:	9305      	str	r3, [sp, #20]
    int i = 0;

    do
    {
        // Verify inputs parameters
        if (data == NULL || enc_key == NULL)
     682:	2d00      	cmp	r5, #0
     684:	d067      	beq.n	756 <atcab_read_enc+0xfe>
        {
            status = ATCA_BAD_PARAM;
     686:	20e2      	movs	r0, #226	; 0xe2
        if (data == NULL || enc_key == NULL)
     688:	2c00      	cmp	r4, #0
     68a:	d065      	beq.n	758 <atcab_read_enc+0x100>
            break;
        }

        // Read the device SN
        if ((status = atcab_read_zone(ATCA_ZONE_CONFIG, 0, 0, 0, serial_num, 32)) != ATCA_SUCCESS)
     68c:	3320      	adds	r3, #32
     68e:	9301      	str	r3, [sp, #4]
     690:	ab13      	add	r3, sp, #76	; 0x4c
     692:	9300      	str	r3, [sp, #0]
     694:	2300      	movs	r3, #0
     696:	2200      	movs	r2, #0
     698:	2100      	movs	r1, #0
     69a:	2000      	movs	r0, #0
     69c:	4f31      	ldr	r7, [pc, #196]	; (764 <atcab_read_enc+0x10c>)
     69e:	47b8      	blx	r7
     6a0:	2800      	cmp	r0, #0
     6a2:	d159      	bne.n	758 <atcab_read_enc+0x100>
        {
            break;
        }
        // Make the SN continuous by moving SN[4:8] right after SN[0:3]
        memmove(&serial_num[4], &serial_num[8], 5);
     6a4:	2205      	movs	r2, #5
     6a6:	a915      	add	r1, sp, #84	; 0x54
     6a8:	a814      	add	r0, sp, #80	; 0x50
     6aa:	4b2f      	ldr	r3, [pc, #188]	; (768 <atcab_read_enc+0x110>)
     6ac:	4798      	blx	r3

        // Send the random Nonce command
        if ((status = atcab_nonce_rand(num_in, rand_out)) != ATCA_SUCCESS)
     6ae:	a906      	add	r1, sp, #24
     6b0:	a80e      	add	r0, sp, #56	; 0x38
     6b2:	4b2e      	ldr	r3, [pc, #184]	; (76c <atcab_read_enc+0x114>)
     6b4:	4798      	blx	r3
     6b6:	2800      	cmp	r0, #0
     6b8:	d14e      	bne.n	758 <atcab_read_enc+0x100>
        {
            BREAK(status, "Nonce failed");
        }

        // Calculate Tempkey
        memset(&temp_key, 0, sizeof(temp_key));
     6ba:	af1b      	add	r7, sp, #108	; 0x6c
     6bc:	2244      	movs	r2, #68	; 0x44
     6be:	2100      	movs	r1, #0
     6c0:	0038      	movs	r0, r7
     6c2:	4b27      	ldr	r3, [pc, #156]	; (760 <atcab_read_enc+0x108>)
     6c4:	469a      	mov	sl, r3
     6c6:	4798      	blx	r3
        memset(&nonce_params, 0, sizeof(nonce_params));
     6c8:	2210      	movs	r2, #16
     6ca:	2100      	movs	r1, #0
     6cc:	a832      	add	r0, sp, #200	; 0xc8
     6ce:	47d0      	blx	sl
        nonce_params.mode = NONCE_MODE_SEED_UPDATE;
        nonce_params.zero = 0;
        nonce_params.num_in = (uint8_t*)&num_in;
     6d0:	ab0e      	add	r3, sp, #56	; 0x38
     6d2:	9333      	str	r3, [sp, #204]	; 0xcc
        nonce_params.rand_out = (uint8_t*)&rand_out;
     6d4:	ab06      	add	r3, sp, #24
     6d6:	9334      	str	r3, [sp, #208]	; 0xd0
        nonce_params.temp_key = &temp_key;
     6d8:	9735      	str	r7, [sp, #212]	; 0xd4
        if ((status = atcah_nonce(&nonce_params)) != ATCA_SUCCESS)
     6da:	a832      	add	r0, sp, #200	; 0xc8
     6dc:	4b24      	ldr	r3, [pc, #144]	; (770 <atcab_read_enc+0x118>)
     6de:	4798      	blx	r3
     6e0:	2800      	cmp	r0, #0
     6e2:	d139      	bne.n	758 <atcab_read_enc+0x100>
        {
            BREAK(status, "Calc TempKey failed");
        }

        // Supply OtherData so GenDig behavior is the same for keys with SlotConfig.NoMac set
        other_data[0] = ATCA_GENDIG;
     6e4:	aa05      	add	r2, sp, #20
     6e6:	2315      	movs	r3, #21
     6e8:	7013      	strb	r3, [r2, #0]
        other_data[1] = GENDIG_ZONE_DATA;
     6ea:	3b13      	subs	r3, #19
     6ec:	7053      	strb	r3, [r2, #1]
        other_data[2] = (uint8_t)(enc_key_id);
     6ee:	7096      	strb	r6, [r2, #2]
        other_data[3] = (uint8_t)(enc_key_id >> 8);
     6f0:	0a33      	lsrs	r3, r6, #8
     6f2:	70d3      	strb	r3, [r2, #3]

        // Send the GenDig command
        if ((status = atcab_gendig(GENDIG_ZONE_DATA, enc_key_id, other_data, sizeof(other_data))) != ATCA_SUCCESS)
     6f4:	2304      	movs	r3, #4
     6f6:	0031      	movs	r1, r6
     6f8:	3002      	adds	r0, #2
     6fa:	4f1e      	ldr	r7, [pc, #120]	; (774 <atcab_read_enc+0x11c>)
     6fc:	47b8      	blx	r7
     6fe:	2800      	cmp	r0, #0
     700:	d12a      	bne.n	758 <atcab_read_enc+0x100>
        }

        // Calculate Tempkey
        // NoMac bit isn't being considered here on purpose to remove having to read SlotConfig.
        // OtherData is built to get the same result regardless of the NoMac bit.
        memset(&gen_dig_param, 0, sizeof(gen_dig_param));
     702:	af2c      	add	r7, sp, #176	; 0xb0
     704:	2218      	movs	r2, #24
     706:	2100      	movs	r1, #0
     708:	0038      	movs	r0, r7
     70a:	4b15      	ldr	r3, [pc, #84]	; (760 <atcab_read_enc+0x108>)
     70c:	4798      	blx	r3
        gen_dig_param.key_id = enc_key_id;
     70e:	807e      	strh	r6, [r7, #2]
        gen_dig_param.is_key_nomac = false;
        gen_dig_param.sn = serial_num;
     710:	ab13      	add	r3, sp, #76	; 0x4c
     712:	60bb      	str	r3, [r7, #8]
        gen_dig_param.stored_value = enc_key;
     714:	60fc      	str	r4, [r7, #12]
        gen_dig_param.zone = GENDIG_ZONE_DATA;
     716:	2302      	movs	r3, #2
     718:	703b      	strb	r3, [r7, #0]
        gen_dig_param.other_data = other_data;
     71a:	ab05      	add	r3, sp, #20
     71c:	613b      	str	r3, [r7, #16]
        gen_dig_param.temp_key = &temp_key;
     71e:	ab1b      	add	r3, sp, #108	; 0x6c
     720:	617b      	str	r3, [r7, #20]
        if ((status = atcah_gen_dig(&gen_dig_param)) != ATCA_SUCCESS)
     722:	0038      	movs	r0, r7
     724:	4b14      	ldr	r3, [pc, #80]	; (778 <atcab_read_enc+0x120>)
     726:	4798      	blx	r3
     728:	2800      	cmp	r0, #0
     72a:	d115      	bne.n	758 <atcab_read_enc+0x100>
        {
            BREAK(status, "");
        }

        // Read Encrypted
        if ((status = atcab_read_zone(zone, key_id, block, 0, data, ATCA_BLOCK_SIZE)) != ATCA_SUCCESS)
     72c:	2320      	movs	r3, #32
     72e:	9301      	str	r3, [sp, #4]
     730:	9500      	str	r5, [sp, #0]
     732:	2300      	movs	r3, #0
     734:	9a03      	ldr	r2, [sp, #12]
     736:	9902      	ldr	r1, [sp, #8]
     738:	3082      	adds	r0, #130	; 0x82
     73a:	4c0a      	ldr	r4, [pc, #40]	; (764 <atcab_read_enc+0x10c>)
     73c:	47a0      	blx	r4
     73e:	2800      	cmp	r0, #0
     740:	d10a      	bne.n	758 <atcab_read_enc+0x100>
     742:	2300      	movs	r3, #0
        }

        // Decrypt
        for (i = 0; i < ATCA_BLOCK_SIZE; i++)
        {
            data[i] = data[i] ^ temp_key.value[i];
     744:	ac1b      	add	r4, sp, #108	; 0x6c
     746:	5cea      	ldrb	r2, [r5, r3]
     748:	5d19      	ldrb	r1, [r3, r4]
     74a:	404a      	eors	r2, r1
     74c:	54ea      	strb	r2, [r5, r3]
        for (i = 0; i < ATCA_BLOCK_SIZE; i++)
     74e:	3301      	adds	r3, #1
     750:	2b20      	cmp	r3, #32
     752:	d1f8      	bne.n	746 <atcab_read_enc+0xee>
     754:	e000      	b.n	758 <atcab_read_enc+0x100>
            status = ATCA_BAD_PARAM;
     756:	20e2      	movs	r0, #226	; 0xe2
    }
    while (0);


    return status;
}
     758:	b036      	add	sp, #216	; 0xd8
     75a:	bc04      	pop	{r2}
     75c:	4692      	mov	sl, r2
     75e:	bdf0      	pop	{r4, r5, r6, r7, pc}
     760:	00019ead 	.word	0x00019ead
     764:	00000561 	.word	0x00000561
     768:	00019e0d 	.word	0x00019e0d
     76c:	000004ed 	.word	0x000004ed
     770:	0000197d 	.word	0x0000197d
     774:	000002fd 	.word	0x000002fd
     778:	00001a45 	.word	0x00001a45

0000077c <atcab_read_bytes_zone>:
 *  \param[in]  length  Number of bytes to read starting from the offset.
 *
 *  \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS atcab_read_bytes_zone(uint8_t zone, uint16_t slot, size_t offset, uint8_t *data, size_t length)
{
     77c:	b5f0      	push	{r4, r5, r6, r7, lr}
     77e:	46de      	mov	lr, fp
     780:	4657      	mov	r7, sl
     782:	464e      	mov	r6, r9
     784:	4645      	mov	r5, r8
     786:	b5e0      	push	{r5, r6, r7, lr}
     788:	b091      	sub	sp, #68	; 0x44
     78a:	0005      	movs	r5, r0
     78c:	9102      	str	r1, [sp, #8]
     78e:	0017      	movs	r7, r2
     790:	9303      	str	r3, [sp, #12]
    ATCA_STATUS status = ATCA_GEN_FAIL;
    size_t zone_size = 0;
     792:	2300      	movs	r3, #0
     794:	930f      	str	r3, [sp, #60]	; 0x3c
    size_t copy_length = 0;
    size_t read_offset = 0;

    if (zone != ATCA_ZONE_CONFIG && zone != ATCA_ZONE_OTP && zone != ATCA_ZONE_DATA)
    {
        return ATCA_BAD_PARAM;
     796:	24e2      	movs	r4, #226	; 0xe2
    if (zone != ATCA_ZONE_CONFIG && zone != ATCA_ZONE_OTP && zone != ATCA_ZONE_DATA)
     798:	2802      	cmp	r0, #2
     79a:	d907      	bls.n	7ac <atcab_read_bytes_zone+0x30>
        }
    }
    while (false);

    return status;
}
     79c:	0020      	movs	r0, r4
     79e:	b011      	add	sp, #68	; 0x44
     7a0:	bc3c      	pop	{r2, r3, r4, r5}
     7a2:	4690      	mov	r8, r2
     7a4:	4699      	mov	r9, r3
     7a6:	46a2      	mov	sl, r4
     7a8:	46ab      	mov	fp, r5
     7aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (zone == ATCA_ZONE_DATA && slot > 15)
     7ac:	2802      	cmp	r0, #2
     7ae:	d01f      	beq.n	7f0 <atcab_read_bytes_zone+0x74>
        return ATCA_SUCCESS;  // Always succeed reading 0 bytes
     7b0:	2400      	movs	r4, #0
    if (length == 0)
     7b2:	9b1a      	ldr	r3, [sp, #104]	; 0x68
     7b4:	2b00      	cmp	r3, #0
     7b6:	d0f1      	beq.n	79c <atcab_read_bytes_zone+0x20>
        return ATCA_BAD_PARAM;
     7b8:	34e2      	adds	r4, #226	; 0xe2
    if (data == NULL)
     7ba:	9b03      	ldr	r3, [sp, #12]
     7bc:	2b00      	cmp	r3, #0
     7be:	d0ed      	beq.n	79c <atcab_read_bytes_zone+0x20>
        status = atcab_get_zone_size(zone, slot, &zone_size);
     7c0:	aa0f      	add	r2, sp, #60	; 0x3c
     7c2:	9902      	ldr	r1, [sp, #8]
     7c4:	0028      	movs	r0, r5
     7c6:	4b2e      	ldr	r3, [pc, #184]	; (880 <atcab_read_bytes_zone+0x104>)
     7c8:	4798      	blx	r3
     7ca:	1e04      	subs	r4, r0, #0
        if (status != ATCA_SUCCESS)
     7cc:	d1e6      	bne.n	79c <atcab_read_bytes_zone+0x20>
        if (offset + length > zone_size)
     7ce:	9b1a      	ldr	r3, [sp, #104]	; 0x68
     7d0:	19db      	adds	r3, r3, r7
            return ATCA_BAD_PARAM; // Can't read past the end of a zone
     7d2:	34e2      	adds	r4, #226	; 0xe2
        if (offset + length > zone_size)
     7d4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
     7d6:	4293      	cmp	r3, r2
     7d8:	d8e0      	bhi.n	79c <atcab_read_bytes_zone+0x20>
        cur_block = offset / ATCA_BLOCK_SIZE;
     7da:	097b      	lsrs	r3, r7, #5
     7dc:	4698      	mov	r8, r3
     7de:	2320      	movs	r3, #32
     7e0:	469a      	mov	sl, r3
     7e2:	2300      	movs	r3, #0
     7e4:	2600      	movs	r6, #0
            memcpy(&data[data_idx], &read_buf[read_buf_idx], copy_length);
     7e6:	46a9      	mov	r9, r5
     7e8:	001d      	movs	r5, r3
     7ea:	9705      	str	r7, [sp, #20]
     7ec:	4657      	mov	r7, sl
     7ee:	e01e      	b.n	82e <atcab_read_bytes_zone+0xb2>
    if (zone == ATCA_ZONE_DATA && slot > 15)
     7f0:	290f      	cmp	r1, #15
     7f2:	d8d3      	bhi.n	79c <atcab_read_bytes_zone+0x20>
     7f4:	e7dc      	b.n	7b0 <atcab_read_bytes_zone+0x34>
            if (read_size == ATCA_BLOCK_SIZE && zone_size - cur_block * ATCA_BLOCK_SIZE < ATCA_BLOCK_SIZE)
     7f6:	4643      	mov	r3, r8
     7f8:	015b      	lsls	r3, r3, #5
     7fa:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
     7fc:	1ad3      	subs	r3, r2, r3
     7fe:	2b1f      	cmp	r3, #31
     800:	d817      	bhi.n	832 <atcab_read_bytes_zone+0xb6>
                cur_offset = ((data_idx + offset) / ATCA_WORD_SIZE) % (ATCA_BLOCK_SIZE / ATCA_WORD_SIZE);
     802:	9b05      	ldr	r3, [sp, #20]
     804:	199b      	adds	r3, r3, r6
     806:	089b      	lsrs	r3, r3, #2
     808:	2507      	movs	r5, #7
     80a:	401d      	ands	r5, r3
                read_size = ATCA_WORD_SIZE;
     80c:	3f1c      	subs	r7, #28
     80e:	e010      	b.n	832 <atcab_read_bytes_zone+0xb6>
            memcpy(&data[data_idx], &read_buf[read_buf_idx], copy_length);
     810:	9b03      	ldr	r3, [sp, #12]
     812:	1998      	adds	r0, r3, r6
     814:	ab07      	add	r3, sp, #28
     816:	469c      	mov	ip, r3
     818:	4461      	add	r1, ip
     81a:	0022      	movs	r2, r4
     81c:	4b19      	ldr	r3, [pc, #100]	; (884 <atcab_read_bytes_zone+0x108>)
     81e:	4798      	blx	r3
            data_idx += copy_length;
     820:	1936      	adds	r6, r6, r4
            if (read_size == ATCA_BLOCK_SIZE)
     822:	2f20      	cmp	r7, #32
     824:	d024      	beq.n	870 <atcab_read_bytes_zone+0xf4>
                cur_offset += 1;
     826:	3501      	adds	r5, #1
        while (data_idx < length)
     828:	9b1a      	ldr	r3, [sp, #104]	; 0x68
     82a:	42b3      	cmp	r3, r6
     82c:	d924      	bls.n	878 <atcab_read_bytes_zone+0xfc>
            if (read_size == ATCA_BLOCK_SIZE && zone_size - cur_block * ATCA_BLOCK_SIZE < ATCA_BLOCK_SIZE)
     82e:	2f20      	cmp	r7, #32
     830:	d0e1      	beq.n	7f6 <atcab_read_bytes_zone+0x7a>
            status = atcab_read_zone(
     832:	b2eb      	uxtb	r3, r5
     834:	4642      	mov	r2, r8
     836:	4669      	mov	r1, sp
     838:	740a      	strb	r2, [r1, #16]
     83a:	7c0a      	ldrb	r2, [r1, #16]
     83c:	9701      	str	r7, [sp, #4]
     83e:	a907      	add	r1, sp, #28
     840:	9100      	str	r1, [sp, #0]
     842:	9902      	ldr	r1, [sp, #8]
     844:	4648      	mov	r0, r9
     846:	4c10      	ldr	r4, [pc, #64]	; (888 <atcab_read_bytes_zone+0x10c>)
     848:	47a0      	blx	r4
     84a:	9004      	str	r0, [sp, #16]
            if (status != ATCA_SUCCESS)
     84c:	2800      	cmp	r0, #0
     84e:	d115      	bne.n	87c <atcab_read_bytes_zone+0x100>
            read_offset = cur_block * ATCA_BLOCK_SIZE + cur_offset * ATCA_WORD_SIZE;
     850:	4643      	mov	r3, r8
     852:	00db      	lsls	r3, r3, #3
     854:	195b      	adds	r3, r3, r5
     856:	009b      	lsls	r3, r3, #2
                read_buf_idx = 0;                     // Read data is within the requested chunk
     858:	2100      	movs	r1, #0
            if (read_offset < offset)
     85a:	9805      	ldr	r0, [sp, #20]
     85c:	4298      	cmp	r0, r3
     85e:	d900      	bls.n	862 <atcab_read_bytes_zone+0xe6>
                read_buf_idx = offset - read_offset;  // Read data starts before the requested chunk
     860:	1ac1      	subs	r1, r0, r3
            if (length - data_idx < read_size - read_buf_idx)
     862:	1a7b      	subs	r3, r7, r1
     864:	9a1a      	ldr	r2, [sp, #104]	; 0x68
     866:	1b94      	subs	r4, r2, r6
     868:	429c      	cmp	r4, r3
     86a:	d9d1      	bls.n	810 <atcab_read_bytes_zone+0x94>
     86c:	001c      	movs	r4, r3
     86e:	e7cf      	b.n	810 <atcab_read_bytes_zone+0x94>
                cur_block += 1;
     870:	2301      	movs	r3, #1
     872:	469c      	mov	ip, r3
     874:	44e0      	add	r8, ip
     876:	e7d7      	b.n	828 <atcab_read_bytes_zone+0xac>
     878:	9c04      	ldr	r4, [sp, #16]
     87a:	e78f      	b.n	79c <atcab_read_bytes_zone+0x20>
     87c:	9c04      	ldr	r4, [sp, #16]
     87e:	e78d      	b.n	79c <atcab_read_bytes_zone+0x20>
     880:	000001d5 	.word	0x000001d5
     884:	00019d89 	.word	0x00019d89
     888:	00000561 	.word	0x00000561

0000088c <atcab_write>:
 *                     if not required.
 *
 * \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS atcab_write(uint8_t zone, uint16_t address, const uint8_t *value, const uint8_t *mac)
{
     88c:	b570      	push	{r4, r5, r6, lr}
     88e:	b0b2      	sub	sp, #200	; 0xc8
     890:	0014      	movs	r4, r2
     892:	001d      	movs	r5, r3
    ATCAPacket packet;
    ATCACommand ca_cmd = _gDevice->mCommands;
    ATCA_STATUS status = ATCA_GEN_FAIL;

    if (value == NULL)
     894:	2a00      	cmp	r2, #0
     896:	d02e      	beq.n	8f6 <atcab_write+0x6a>
    ATCACommand ca_cmd = _gDevice->mCommands;
     898:	4b18      	ldr	r3, [pc, #96]	; (8fc <atcab_write+0x70>)
     89a:	681b      	ldr	r3, [r3, #0]
     89c:	681e      	ldr	r6, [r3, #0]
    }

    do
    {
        // Build the write command
        packet.param1 = zone;
     89e:	466b      	mov	r3, sp
     8a0:	70d8      	strb	r0, [r3, #3]
        packet.param2 = address;
     8a2:	8099      	strh	r1, [r3, #4]
        if (zone & ATCA_ZONE_READWRITE_32)
     8a4:	b240      	sxtb	r0, r0
     8a6:	2800      	cmp	r0, #0
     8a8:	db0e      	blt.n	8c8 <atcab_write+0x3c>
            }
        }
        else
        {
            // 4-byte write
            memcpy(packet.data, value, 4);
     8aa:	2204      	movs	r2, #4
     8ac:	0021      	movs	r1, r4
     8ae:	466b      	mov	r3, sp
     8b0:	1d98      	adds	r0, r3, #6
     8b2:	4b13      	ldr	r3, [pc, #76]	; (900 <atcab_write+0x74>)
     8b4:	4798      	blx	r3
        }

        if ((status = atWrite(ca_cmd, &packet, mac && (zone & ATCA_ZONE_READWRITE_32))) != ATCA_SUCCESS)
     8b6:	2200      	movs	r2, #0
     8b8:	4669      	mov	r1, sp
     8ba:	0030      	movs	r0, r6
     8bc:	4b11      	ldr	r3, [pc, #68]	; (904 <atcab_write+0x78>)
     8be:	4798      	blx	r3
     8c0:	2800      	cmp	r0, #0
     8c2:	d012      	beq.n	8ea <atcab_write+0x5e>

    }
    while (0);

    return status;
}
     8c4:	b032      	add	sp, #200	; 0xc8
     8c6:	bd70      	pop	{r4, r5, r6, pc}
            memcpy(packet.data, value, 32);
     8c8:	2220      	movs	r2, #32
     8ca:	0021      	movs	r1, r4
     8cc:	1d98      	adds	r0, r3, #6
     8ce:	4b0c      	ldr	r3, [pc, #48]	; (900 <atcab_write+0x74>)
     8d0:	4798      	blx	r3
            if (mac)
     8d2:	2d00      	cmp	r5, #0
     8d4:	d007      	beq.n	8e6 <atcab_write+0x5a>
                memcpy(&packet.data[32], mac, 32);
     8d6:	2220      	movs	r2, #32
     8d8:	0029      	movs	r1, r5
     8da:	2026      	movs	r0, #38	; 0x26
     8dc:	4468      	add	r0, sp
     8de:	4b08      	ldr	r3, [pc, #32]	; (900 <atcab_write+0x74>)
     8e0:	4798      	blx	r3
        if ((status = atWrite(ca_cmd, &packet, mac && (zone & ATCA_ZONE_READWRITE_32))) != ATCA_SUCCESS)
     8e2:	2201      	movs	r2, #1
     8e4:	e7e8      	b.n	8b8 <atcab_write+0x2c>
     8e6:	2200      	movs	r2, #0
     8e8:	e7e6      	b.n	8b8 <atcab_write+0x2c>
        if ((status = atca_execute_command(&packet, _gDevice)) != ATCA_SUCCESS)
     8ea:	4b04      	ldr	r3, [pc, #16]	; (8fc <atcab_write+0x70>)
     8ec:	6819      	ldr	r1, [r3, #0]
     8ee:	4668      	mov	r0, sp
     8f0:	4b05      	ldr	r3, [pc, #20]	; (908 <atcab_write+0x7c>)
     8f2:	4798      	blx	r3
     8f4:	e7e6      	b.n	8c4 <atcab_write+0x38>
        return ATCA_BAD_PARAM;
     8f6:	20e2      	movs	r0, #226	; 0xe2
     8f8:	e7e4      	b.n	8c4 <atcab_write+0x38>
     8fa:	46c0      	nop			; (mov r8, r8)
     8fc:	200009e4 	.word	0x200009e4
     900:	00019d89 	.word	0x00019d89
     904:	00000abd 	.word	0x00000abd
     908:	00000cf5 	.word	0x00000cf5

0000090c <atcab_write_zone>:
 *  \param[in] len     Number of bytes to be written. Must be either 4 or 32.
 *
 *  \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS atcab_write_zone(uint8_t zone, uint16_t slot, uint8_t block, uint8_t offset, const uint8_t *data, uint8_t len)
{
     90c:	b570      	push	{r4, r5, r6, lr}
     90e:	b084      	sub	sp, #16
     910:	0004      	movs	r4, r0
     912:	a808      	add	r0, sp, #32
     914:	c840      	ldmia	r0!, {r6}
     916:	7805      	ldrb	r5, [r0, #0]
    ATCA_STATUS status = ATCA_GEN_FAIL;
    uint16_t addr;

    // Check the input parameters
    if (data == NULL)
     918:	2e00      	cmp	r6, #0
     91a:	d006      	beq.n	92a <atcab_write_zone+0x1e>
    {
        return ATCA_BAD_PARAM;
    }

    if (len != 4 && len != 32)
     91c:	2d04      	cmp	r5, #4
     91e:	d011      	beq.n	944 <atcab_write_zone+0x38>
    {
        return ATCA_BAD_PARAM;
     920:	20e2      	movs	r0, #226	; 0xe2
    if (len != 4 && len != 32)
     922:	2d20      	cmp	r5, #32
     924:	d003      	beq.n	92e <atcab_write_zone+0x22>

    }
    while (0);

    return status;
}
     926:	b004      	add	sp, #16
     928:	bd70      	pop	{r4, r5, r6, pc}
        return ATCA_BAD_PARAM;
     92a:	20e2      	movs	r0, #226	; 0xe2
     92c:	e7fb      	b.n	926 <atcab_write_zone+0x1a>
        if ((status = atcab_get_addr(zone, slot, block, offset, &addr)) != ATCA_SUCCESS)
     92e:	200e      	movs	r0, #14
     930:	4468      	add	r0, sp
     932:	9000      	str	r0, [sp, #0]
     934:	0020      	movs	r0, r4
     936:	4d0c      	ldr	r5, [pc, #48]	; (968 <atcab_write_zone+0x5c>)
     938:	47a8      	blx	r5
     93a:	2800      	cmp	r0, #0
     93c:	d1f3      	bne.n	926 <atcab_write_zone+0x1a>
            zone = zone | ATCA_ZONE_READWRITE_32;
     93e:	2380      	movs	r3, #128	; 0x80
     940:	431c      	orrs	r4, r3
     942:	e007      	b.n	954 <atcab_write_zone+0x48>
        if ((status = atcab_get_addr(zone, slot, block, offset, &addr)) != ATCA_SUCCESS)
     944:	200e      	movs	r0, #14
     946:	4468      	add	r0, sp
     948:	9000      	str	r0, [sp, #0]
     94a:	0020      	movs	r0, r4
     94c:	4d06      	ldr	r5, [pc, #24]	; (968 <atcab_write_zone+0x5c>)
     94e:	47a8      	blx	r5
     950:	2800      	cmp	r0, #0
     952:	d1e8      	bne.n	926 <atcab_write_zone+0x1a>
        status = atcab_write(zone, addr, data, NULL);
     954:	230e      	movs	r3, #14
     956:	446b      	add	r3, sp
     958:	8819      	ldrh	r1, [r3, #0]
     95a:	2300      	movs	r3, #0
     95c:	0032      	movs	r2, r6
     95e:	0020      	movs	r0, r4
     960:	4c02      	ldr	r4, [pc, #8]	; (96c <atcab_write_zone+0x60>)
     962:	47a0      	blx	r4
     964:	e7df      	b.n	926 <atcab_write_zone+0x1a>
     966:	46c0      	nop			; (mov r8, r8)
     968:	00000191 	.word	0x00000191
     96c:	0000088d 	.word	0x0000088d

00000970 <initATCACommand>:
 * \param[in] ca_cmd       Pre-allocated command structure to initialize.
 * \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS initATCACommand(ATCADeviceType device_type, ATCACommand ca_cmd)
{
    if (ca_cmd == NULL)
     970:	2900      	cmp	r1, #0
     972:	d004      	beq.n	97e <initATCACommand+0xe>
    {
        return ATCA_BAD_PARAM;
    }

    ca_cmd->dt = device_type;
     974:	7008      	strb	r0, [r1, #0]
    ca_cmd->clock_divider = 0;
     976:	2300      	movs	r3, #0
     978:	704b      	strb	r3, [r1, #1]

    return ATCA_SUCCESS;
     97a:	2000      	movs	r0, #0
}
     97c:	4770      	bx	lr
        return ATCA_BAD_PARAM;
     97e:	20e2      	movs	r0, #226	; 0xe2
     980:	e7fc      	b.n	97c <initATCACommand+0xc>
	...

00000984 <deleteATCACommand>:
#ifndef ATCA_NO_HEAP
/** \brief ATCACommand destructor
 * \param[in] ca_cmd instance of a command object
 */
void deleteATCACommand(ATCACommand *ca_cmd)
{
     984:	b510      	push	{r4, lr}
     986:	1e04      	subs	r4, r0, #0
    if (ca_cmd == NULL)
     988:	d004      	beq.n	994 <deleteATCACommand+0x10>
    {
        return;
    }

    free(*ca_cmd);
     98a:	6800      	ldr	r0, [r0, #0]
     98c:	4b02      	ldr	r3, [pc, #8]	; (998 <deleteATCACommand+0x14>)
     98e:	4798      	blx	r3
    *ca_cmd = NULL;
     990:	2300      	movs	r3, #0
     992:	6023      	str	r3, [r4, #0]
}
     994:	bd10      	pop	{r4, pc}
     996:	46c0      	nop			; (mov r8, r8)
     998:	00019795 	.word	0x00019795

0000099c <atCRC>:
 * \param[in]  data    Pointer to the data over which to compute the CRC
 * \param[out] crc_le  Pointer to the place where the two-bytes of CRC will be
 *                     returned in little-endian byte order.
 */
void atCRC(size_t length, const uint8_t *data, uint8_t *crc_le)
{
     99c:	b5f0      	push	{r4, r5, r6, r7, lr}
     99e:	46d6      	mov	lr, sl
     9a0:	464f      	mov	r7, r9
     9a2:	4646      	mov	r6, r8
     9a4:	b5c0      	push	{r6, r7, lr}
     9a6:	4694      	mov	ip, r2
    uint16_t crc_register = 0;
    uint16_t polynom = 0x8005;
    uint8_t shift_register;
    uint8_t data_bit, crc_bit;

    for (counter = 0; counter < length; counter++)
     9a8:	2800      	cmp	r0, #0
     9aa:	d021      	beq.n	9f0 <atCRC+0x54>
     9ac:	4689      	mov	r9, r1
     9ae:	4688      	mov	r8, r1
     9b0:	4480      	add	r8, r0
     9b2:	2300      	movs	r3, #0
            data_bit = (data[counter] & shift_register) ? 1 : 0;
            crc_bit = crc_register >> 15;
            crc_register <<= 1;
            if (data_bit != crc_bit)
            {
                crc_register ^= polynom;
     9b4:	4813      	ldr	r0, [pc, #76]	; (a04 <atCRC+0x68>)
     9b6:	e016      	b.n	9e6 <atCRC+0x4a>
        for (shift_register = 0x01; shift_register > 0x00; shift_register <<= 1)
     9b8:	006d      	lsls	r5, r5, #1
     9ba:	b2ed      	uxtb	r5, r5
     9bc:	3e01      	subs	r6, #1
     9be:	2e00      	cmp	r6, #0
     9c0:	d00c      	beq.n	9dc <atCRC+0x40>
            crc_bit = crc_register >> 15;
     9c2:	0bdf      	lsrs	r7, r3, #15
            crc_register <<= 1;
     9c4:	005b      	lsls	r3, r3, #1
     9c6:	b29b      	uxth	r3, r3
            data_bit = (data[counter] & shift_register) ? 1 : 0;
     9c8:	002c      	movs	r4, r5
     9ca:	400c      	ands	r4, r1
     9cc:	1e62      	subs	r2, r4, #1
     9ce:	4194      	sbcs	r4, r2
            if (data_bit != crc_bit)
     9d0:	b2e4      	uxtb	r4, r4
     9d2:	42bc      	cmp	r4, r7
     9d4:	d0f0      	beq.n	9b8 <atCRC+0x1c>
                crc_register ^= polynom;
     9d6:	4043      	eors	r3, r0
     9d8:	b29b      	uxth	r3, r3
     9da:	e7ed      	b.n	9b8 <atCRC+0x1c>
     9dc:	2201      	movs	r2, #1
     9de:	4692      	mov	sl, r2
     9e0:	44d1      	add	r9, sl
    for (counter = 0; counter < length; counter++)
     9e2:	45c1      	cmp	r9, r8
     9e4:	d005      	beq.n	9f2 <atCRC+0x56>
            data_bit = (data[counter] & shift_register) ? 1 : 0;
     9e6:	464a      	mov	r2, r9
     9e8:	7811      	ldrb	r1, [r2, #0]
     9ea:	2608      	movs	r6, #8
     9ec:	2501      	movs	r5, #1
     9ee:	e7e8      	b.n	9c2 <atCRC+0x26>
    uint16_t crc_register = 0;
     9f0:	2300      	movs	r3, #0
            }
        }
    }
    crc_le[0] = (uint8_t)(crc_register & 0x00FF);
     9f2:	4662      	mov	r2, ip
     9f4:	7013      	strb	r3, [r2, #0]
    crc_le[1] = (uint8_t)(crc_register >> 8);
     9f6:	0a1b      	lsrs	r3, r3, #8
     9f8:	7053      	strb	r3, [r2, #1]
}
     9fa:	bc1c      	pop	{r2, r3, r4}
     9fc:	4690      	mov	r8, r2
     9fe:	4699      	mov	r9, r3
     a00:	46a2      	mov	sl, r4
     a02:	bdf0      	pop	{r4, r5, r6, r7, pc}
     a04:	ffff8005 	.word	0xffff8005

00000a08 <atCalcCrc>:
/** \brief This function calculates CRC and adds it to the correct offset in the packet data
 * \param[in] packet Packet to calculate CRC data for
 */

void atCalcCrc(ATCAPacket *packet)
{
     a08:	b510      	push	{r4, lr}
    uint8_t length, *crc;

    length = packet->txsize - ATCA_CRC_SIZE;
    // computer pointer to CRC in the packet
    crc = &(packet->txsize) + length;
     a0a:	1c41      	adds	r1, r0, #1
    length = packet->txsize - ATCA_CRC_SIZE;
     a0c:	7840      	ldrb	r0, [r0, #1]
     a0e:	3802      	subs	r0, #2
    crc = &(packet->txsize) + length;
     a10:	b2c0      	uxtb	r0, r0
     a12:	180a      	adds	r2, r1, r0

    // stuff CRC into packet
    atCRC(length, &(packet->txsize), crc);
     a14:	4b01      	ldr	r3, [pc, #4]	; (a1c <atCalcCrc+0x14>)
     a16:	4798      	blx	r3
}
     a18:	bd10      	pop	{r4, pc}
     a1a:	46c0      	nop			; (mov r8, r8)
     a1c:	0000099d 	.word	0x0000099d

00000a20 <atGenDig>:
{
     a20:	b510      	push	{r4, lr}
    packet->opcode = ATCA_GENDIG;
     a22:	2315      	movs	r3, #21
     a24:	708b      	strb	r3, [r1, #2]
    if (packet->param1 == GENDIG_ZONE_SHARED_NONCE) // shared nonce mode
     a26:	78cb      	ldrb	r3, [r1, #3]
     a28:	2b03      	cmp	r3, #3
     a2a:	d008      	beq.n	a3e <atGenDig+0x1e>
    else if (is_no_mac_key)
     a2c:	2a00      	cmp	r2, #0
     a2e:	d109      	bne.n	a44 <atGenDig+0x24>
        packet->txsize = GENDIG_COUNT;
     a30:	2307      	movs	r3, #7
     a32:	704b      	strb	r3, [r1, #1]
    atCalcCrc(packet);
     a34:	0008      	movs	r0, r1
     a36:	4b05      	ldr	r3, [pc, #20]	; (a4c <atGenDig+0x2c>)
     a38:	4798      	blx	r3
}
     a3a:	2000      	movs	r0, #0
     a3c:	bd10      	pop	{r4, pc}
        packet->txsize = GENDIG_COUNT + 32;
     a3e:	3324      	adds	r3, #36	; 0x24
     a40:	704b      	strb	r3, [r1, #1]
     a42:	e7f7      	b.n	a34 <atGenDig+0x14>
        packet->txsize = GENDIG_COUNT + 4;  // noMac keys use 4 bytes of OtherData in calculation
     a44:	230b      	movs	r3, #11
     a46:	704b      	strb	r3, [r1, #1]
     a48:	e7f4      	b.n	a34 <atGenDig+0x14>
     a4a:	46c0      	nop			; (mov r8, r8)
     a4c:	00000a09 	.word	0x00000a09

00000a50 <atNonce>:
{
     a50:	b510      	push	{r4, lr}
    uint8_t calc_mode = packet->param1 & NONCE_MODE_MASK;
     a52:	78ca      	ldrb	r2, [r1, #3]
     a54:	2303      	movs	r3, #3
     a56:	4013      	ands	r3, r2
    packet->opcode = ATCA_NONCE;
     a58:	2016      	movs	r0, #22
     a5a:	7088      	strb	r0, [r1, #2]
    if ((calc_mode == NONCE_MODE_SEED_UPDATE || calc_mode == NONCE_MODE_NO_SEED_UPDATE))
     a5c:	2b01      	cmp	r3, #1
     a5e:	d903      	bls.n	a68 <atNonce+0x18>
        return ATCA_BAD_PARAM;
     a60:	20e2      	movs	r0, #226	; 0xe2
    else if (calc_mode == NONCE_MODE_PASSTHROUGH)
     a62:	2b03      	cmp	r3, #3
     a64:	d007      	beq.n	a76 <atNonce+0x26>
}
     a66:	bd10      	pop	{r4, pc}
        packet->txsize = NONCE_COUNT_SHORT;
     a68:	231b      	movs	r3, #27
     a6a:	704b      	strb	r3, [r1, #1]
    atCalcCrc(packet);
     a6c:	0008      	movs	r0, r1
     a6e:	4b06      	ldr	r3, [pc, #24]	; (a88 <atNonce+0x38>)
     a70:	4798      	blx	r3
    return ATCA_SUCCESS;
     a72:	2000      	movs	r0, #0
     a74:	e7f7      	b.n	a66 <atNonce+0x16>
        if ((packet->param1 & NONCE_MODE_INPUT_LEN_MASK) == NONCE_MODE_INPUT_LEN_64)
     a76:	0693      	lsls	r3, r2, #26
     a78:	d502      	bpl.n	a80 <atNonce+0x30>
            packet->txsize = NONCE_COUNT_LONG_64;
     a7a:	2347      	movs	r3, #71	; 0x47
     a7c:	704b      	strb	r3, [r1, #1]
     a7e:	e7f5      	b.n	a6c <atNonce+0x1c>
            packet->txsize = NONCE_COUNT_LONG;
     a80:	2327      	movs	r3, #39	; 0x27
     a82:	704b      	strb	r3, [r1, #1]
     a84:	e7f2      	b.n	a6c <atNonce+0x1c>
     a86:	46c0      	nop			; (mov r8, r8)
     a88:	00000a09 	.word	0x00000a09

00000a8c <atRandom>:
{
     a8c:	b510      	push	{r4, lr}
    packet->opcode = ATCA_RANDOM;
     a8e:	231b      	movs	r3, #27
     a90:	708b      	strb	r3, [r1, #2]
    packet->txsize = RANDOM_COUNT;
     a92:	3b14      	subs	r3, #20
     a94:	704b      	strb	r3, [r1, #1]
    atCalcCrc(packet);
     a96:	0008      	movs	r0, r1
     a98:	4b01      	ldr	r3, [pc, #4]	; (aa0 <atRandom+0x14>)
     a9a:	4798      	blx	r3
}
     a9c:	2000      	movs	r0, #0
     a9e:	bd10      	pop	{r4, pc}
     aa0:	00000a09 	.word	0x00000a09

00000aa4 <atRead>:
{
     aa4:	b510      	push	{r4, lr}
    packet->opcode = ATCA_READ;
     aa6:	2302      	movs	r3, #2
     aa8:	708b      	strb	r3, [r1, #2]
    packet->txsize = READ_COUNT;
     aaa:	3305      	adds	r3, #5
     aac:	704b      	strb	r3, [r1, #1]
    atCalcCrc(packet);
     aae:	0008      	movs	r0, r1
     ab0:	4b01      	ldr	r3, [pc, #4]	; (ab8 <atRead+0x14>)
     ab2:	4798      	blx	r3
}
     ab4:	2000      	movs	r0, #0
     ab6:	bd10      	pop	{r4, pc}
     ab8:	00000a09 	.word	0x00000a09

00000abc <atWrite>:
{
     abc:	b510      	push	{r4, lr}
    packet->opcode = ATCA_WRITE;
     abe:	2312      	movs	r3, #18
     ac0:	708b      	strb	r3, [r1, #2]
    packet->txsize = 7;
     ac2:	3b0b      	subs	r3, #11
     ac4:	704b      	strb	r3, [r1, #1]
    if (packet->param1 & ATCA_ZONE_READWRITE_32)
     ac6:	78cb      	ldrb	r3, [r1, #3]
     ac8:	2b7f      	cmp	r3, #127	; 0x7f
     aca:	d80b      	bhi.n	ae4 <atWrite+0x28>
        packet->txsize += ATCA_WORD_SIZE;
     acc:	230b      	movs	r3, #11
     ace:	704b      	strb	r3, [r1, #1]
    if (has_mac)
     ad0:	2a00      	cmp	r2, #0
     ad2:	d002      	beq.n	ada <atWrite+0x1e>
        packet->txsize += WRITE_MAC_SIZE;
     ad4:	784b      	ldrb	r3, [r1, #1]
     ad6:	3320      	adds	r3, #32
     ad8:	704b      	strb	r3, [r1, #1]
    atCalcCrc(packet);
     ada:	0008      	movs	r0, r1
     adc:	4b03      	ldr	r3, [pc, #12]	; (aec <atWrite+0x30>)
     ade:	4798      	blx	r3
}
     ae0:	2000      	movs	r0, #0
     ae2:	bd10      	pop	{r4, pc}
        packet->txsize += ATCA_BLOCK_SIZE;
     ae4:	2327      	movs	r3, #39	; 0x27
     ae6:	704b      	strb	r3, [r1, #1]
     ae8:	e7f2      	b.n	ad0 <atWrite+0x14>
     aea:	46c0      	nop			; (mov r8, r8)
     aec:	00000a09 	.word	0x00000a09

00000af0 <atAES>:
{
     af0:	b510      	push	{r4, lr}
    packet->opcode = ATCA_AES;
     af2:	2351      	movs	r3, #81	; 0x51
     af4:	708b      	strb	r3, [r1, #2]
    packet->txsize = ATCA_CMD_SIZE_MIN;
     af6:	3b4a      	subs	r3, #74	; 0x4a
     af8:	704b      	strb	r3, [r1, #1]
    if ((packet->param1 & AES_MODE_OP_MASK) == AES_MODE_GFM)
     afa:	78ca      	ldrb	r2, [r1, #3]
     afc:	4013      	ands	r3, r2
     afe:	2b03      	cmp	r3, #3
     b00:	d006      	beq.n	b10 <atAES+0x20>
        packet->txsize += AES_DATA_SIZE;
     b02:	2317      	movs	r3, #23
     b04:	704b      	strb	r3, [r1, #1]
    atCalcCrc(packet);
     b06:	0008      	movs	r0, r1
     b08:	4b03      	ldr	r3, [pc, #12]	; (b18 <atAES+0x28>)
     b0a:	4798      	blx	r3
}
     b0c:	2000      	movs	r0, #0
     b0e:	bd10      	pop	{r4, pc}
        packet->txsize += ATCA_AES_GFM_SIZE;
     b10:	3324      	adds	r3, #36	; 0x24
     b12:	704b      	strb	r3, [r1, #1]
     b14:	e7f7      	b.n	b06 <atAES+0x16>
     b16:	46c0      	nop			; (mov r8, r8)
     b18:	00000a09 	.word	0x00000a09

00000b1c <atKDF>:
{
     b1c:	b510      	push	{r4, lr}
    packet->opcode = ATCA_KDF;
     b1e:	2356      	movs	r3, #86	; 0x56
     b20:	708b      	strb	r3, [r1, #2]
    if ((packet->param1 & KDF_MODE_ALG_MASK) == KDF_MODE_ALG_AES)
     b22:	78ca      	ldrb	r2, [r1, #3]
     b24:	330a      	adds	r3, #10
     b26:	4013      	ands	r3, r2
     b28:	2b20      	cmp	r3, #32
     b2a:	d007      	beq.n	b3c <atKDF+0x20>
        packet->txsize = ATCA_CMD_SIZE_MIN + KDF_DETAILS_SIZE + packet->data[3];
     b2c:	7a4b      	ldrb	r3, [r1, #9]
     b2e:	330b      	adds	r3, #11
     b30:	704b      	strb	r3, [r1, #1]
    atCalcCrc(packet);
     b32:	0008      	movs	r0, r1
     b34:	4b03      	ldr	r3, [pc, #12]	; (b44 <atKDF+0x28>)
     b36:	4798      	blx	r3
}
     b38:	2000      	movs	r0, #0
     b3a:	bd10      	pop	{r4, pc}
        packet->txsize = ATCA_CMD_SIZE_MIN + KDF_DETAILS_SIZE + AES_DATA_SIZE;
     b3c:	3b05      	subs	r3, #5
     b3e:	704b      	strb	r3, [r1, #1]
     b40:	e7f7      	b.n	b32 <atKDF+0x16>
     b42:	46c0      	nop			; (mov r8, r8)
     b44:	00000a09 	.word	0x00000a09

00000b48 <atCheckCrc>:
 * \param[in] response pointer to response
 * \return ATCA_SUCCESS on success, otherwise ATCA_RX_CRC_ERROR
 */

ATCA_STATUS atCheckCrc(const uint8_t *response)
{
     b48:	b570      	push	{r4, r5, r6, lr}
     b4a:	b082      	sub	sp, #8
     b4c:	0005      	movs	r5, r0
    uint8_t crc[ATCA_CRC_SIZE];
    uint8_t count = response[ATCA_COUNT_IDX];
     b4e:	7804      	ldrb	r4, [r0, #0]

    count -= ATCA_CRC_SIZE;
     b50:	3c02      	subs	r4, #2
    atCRC(count, response, crc);
     b52:	b2e4      	uxtb	r4, r4
     b54:	ae01      	add	r6, sp, #4
     b56:	0032      	movs	r2, r6
     b58:	0001      	movs	r1, r0
     b5a:	0020      	movs	r0, r4
     b5c:	4b08      	ldr	r3, [pc, #32]	; (b80 <atCheckCrc+0x38>)
     b5e:	4798      	blx	r3

    return (crc[0] == response[count] && crc[1] == response[count + 1]) ? ATCA_SUCCESS : ATCA_RX_CRC_ERROR;
     b60:	7832      	ldrb	r2, [r6, #0]
     b62:	5d2b      	ldrb	r3, [r5, r4]
     b64:	20e5      	movs	r0, #229	; 0xe5
     b66:	429a      	cmp	r2, r3
     b68:	d001      	beq.n	b6e <atCheckCrc+0x26>
}
     b6a:	b002      	add	sp, #8
     b6c:	bd70      	pop	{r4, r5, r6, pc}
    return (crc[0] == response[count] && crc[1] == response[count + 1]) ? ATCA_SUCCESS : ATCA_RX_CRC_ERROR;
     b6e:	192c      	adds	r4, r5, r4
     b70:	ab01      	add	r3, sp, #4
     b72:	785a      	ldrb	r2, [r3, #1]
     b74:	7863      	ldrb	r3, [r4, #1]
     b76:	429a      	cmp	r2, r3
     b78:	d1f7      	bne.n	b6a <atCheckCrc+0x22>
     b7a:	2000      	movs	r0, #0
     b7c:	e7f5      	b.n	b6a <atCheckCrc+0x22>
     b7e:	46c0      	nop			; (mov r8, r8)
     b80:	0000099d 	.word	0x0000099d

00000b84 <isATCAError>:
 * \return ATCA_SUCCESS on success, otherwise an error code.
 */

ATCA_STATUS isATCAError(uint8_t *data)
{
    if (data[0] == 0x04)        // error packets are always 4 bytes long
     b84:	7802      	ldrb	r2, [r0, #0]
            break;
        }
    }
    else
    {
        return ATCA_SUCCESS;
     b86:	2300      	movs	r3, #0
    if (data[0] == 0x04)        // error packets are always 4 bytes long
     b88:	2a04      	cmp	r2, #4
     b8a:	d001      	beq.n	b90 <isATCAError+0xc>
    }
}
     b8c:	0018      	movs	r0, r3
     b8e:	4770      	bx	lr
        switch (data[1])
     b90:	7842      	ldrb	r2, [r0, #1]
     b92:	2a07      	cmp	r2, #7
     b94:	d021      	beq.n	bda <isATCAError+0x56>
     b96:	b2d3      	uxtb	r3, r2
     b98:	2b07      	cmp	r3, #7
     b9a:	d80b      	bhi.n	bb4 <isATCAError+0x30>
     b9c:	2a01      	cmp	r2, #1
     b9e:	d01a      	beq.n	bd6 <isATCAError+0x52>
     ba0:	2a00      	cmp	r2, #0
     ba2:	d01e      	beq.n	be2 <isATCAError+0x5e>
            return ATCA_PARSE_ERROR;
     ba4:	23d2      	movs	r3, #210	; 0xd2
        switch (data[1])
     ba6:	2a03      	cmp	r2, #3
     ba8:	d0f0      	beq.n	b8c <isATCAError+0x8>
            return ATCA_STATUS_ECC;
     baa:	3304      	adds	r3, #4
        switch (data[1])
     bac:	2a05      	cmp	r2, #5
     bae:	d0ed      	beq.n	b8c <isATCAError+0x8>
            return ATCA_GEN_FAIL;
     bb0:	23e1      	movs	r3, #225	; 0xe1
     bb2:	e7eb      	b.n	b8c <isATCAError+0x8>
        switch (data[1])
     bb4:	2a0f      	cmp	r2, #15
     bb6:	d012      	beq.n	bde <isATCAError+0x5a>
     bb8:	b2d3      	uxtb	r3, r2
     bba:	2b0f      	cmp	r3, #15
     bbc:	d907      	bls.n	bce <isATCAError+0x4a>
            return ATCA_WAKE_SUCCESS;
     bbe:	23f3      	movs	r3, #243	; 0xf3
        switch (data[1])
     bc0:	2a11      	cmp	r2, #17
     bc2:	d0e3      	beq.n	b8c <isATCAError+0x8>
     bc4:	b2d2      	uxtb	r2, r2
            return ATCA_STATUS_CRC;
     bc6:	3b1f      	subs	r3, #31
        switch (data[1])
     bc8:	2aff      	cmp	r2, #255	; 0xff
     bca:	d0df      	beq.n	b8c <isATCAError+0x8>
     bcc:	e7f0      	b.n	bb0 <isATCAError+0x2c>
            return ATCA_HEALTH_TEST_ERROR;
     bce:	23fa      	movs	r3, #250	; 0xfa
        switch (data[1])
     bd0:	2a08      	cmp	r2, #8
     bd2:	d0db      	beq.n	b8c <isATCAError+0x8>
     bd4:	e7ec      	b.n	bb0 <isATCAError+0x2c>
            return ATCA_CHECKMAC_VERIFY_FAILED;
     bd6:	23d1      	movs	r3, #209	; 0xd1
     bd8:	e7d8      	b.n	b8c <isATCAError+0x8>
            return ATCA_STATUS_SELFTEST_ERROR;
     bda:	23d7      	movs	r3, #215	; 0xd7
     bdc:	e7d6      	b.n	b8c <isATCAError+0x8>
            return ATCA_EXECUTION_ERROR;
     bde:	23f4      	movs	r3, #244	; 0xf4
     be0:	e7d4      	b.n	b8c <isATCAError+0x8>
            return ATCA_SUCCESS;
     be2:	2300      	movs	r3, #0
     be4:	e7d2      	b.n	b8c <isATCAError+0x8>
	...

00000be8 <initATCADevice>:
 *                       mCommands and mIface members should point to existing
 *                       structures to be initialized.
 * \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS initATCADevice(ATCAIfaceCfg *cfg, ATCADevice ca_dev)
{
     be8:	b570      	push	{r4, r5, r6, lr}
     bea:	0005      	movs	r5, r0
     bec:	000c      	movs	r4, r1
    ATCA_STATUS status;

    if (cfg == NULL || ca_dev == NULL || ca_dev->mCommands == NULL || ca_dev->mIface == NULL)
     bee:	2800      	cmp	r0, #0
     bf0:	d012      	beq.n	c18 <initATCADevice+0x30>
     bf2:	2900      	cmp	r1, #0
     bf4:	d012      	beq.n	c1c <initATCADevice+0x34>
     bf6:	6809      	ldr	r1, [r1, #0]
     bf8:	2900      	cmp	r1, #0
     bfa:	d011      	beq.n	c20 <initATCADevice+0x38>
    {
        return ATCA_BAD_PARAM;
     bfc:	20e2      	movs	r0, #226	; 0xe2
    if (cfg == NULL || ca_dev == NULL || ca_dev->mCommands == NULL || ca_dev->mIface == NULL)
     bfe:	6863      	ldr	r3, [r4, #4]
     c00:	2b00      	cmp	r3, #0
     c02:	d00a      	beq.n	c1a <initATCADevice+0x32>
    }

    status = initATCACommand(cfg->devtype, ca_dev->mCommands);
     c04:	7868      	ldrb	r0, [r5, #1]
     c06:	4b07      	ldr	r3, [pc, #28]	; (c24 <initATCADevice+0x3c>)
     c08:	4798      	blx	r3
    if (status != ATCA_SUCCESS)
     c0a:	2800      	cmp	r0, #0
     c0c:	d105      	bne.n	c1a <initATCADevice+0x32>
    {
        return status;
    }

    status = initATCAIface(cfg, ca_dev->mIface);
     c0e:	6861      	ldr	r1, [r4, #4]
     c10:	0028      	movs	r0, r5
     c12:	4b05      	ldr	r3, [pc, #20]	; (c28 <initATCADevice+0x40>)
     c14:	4798      	blx	r3
     c16:	e000      	b.n	c1a <initATCADevice+0x32>
        return ATCA_BAD_PARAM;
     c18:	20e2      	movs	r0, #226	; 0xe2
    {
        return status;
    }

    return ATCA_SUCCESS;
}
     c1a:	bd70      	pop	{r4, r5, r6, pc}
        return ATCA_BAD_PARAM;
     c1c:	20e2      	movs	r0, #226	; 0xe2
     c1e:	e7fc      	b.n	c1a <initATCADevice+0x32>
     c20:	20e2      	movs	r0, #226	; 0xe2
     c22:	e7fa      	b.n	c1a <initATCADevice+0x32>
     c24:	00000971 	.word	0x00000971
     c28:	00000f99 	.word	0x00000f99

00000c2c <newATCADevice>:
{
     c2c:	b570      	push	{r4, r5, r6, lr}
     c2e:	1e05      	subs	r5, r0, #0
    if (cfg == NULL)
     c30:	d02d      	beq.n	c8e <newATCADevice+0x62>
    ca_dev = (ATCADevice)malloc(sizeof(*ca_dev));
     c32:	2008      	movs	r0, #8
     c34:	4b17      	ldr	r3, [pc, #92]	; (c94 <newATCADevice+0x68>)
     c36:	4798      	blx	r3
     c38:	1e04      	subs	r4, r0, #0
    if (ca_dev == NULL)
     c3a:	d011      	beq.n	c60 <newATCADevice+0x34>
    ca_dev->mCommands = (ATCACommand)malloc(sizeof(*(ca_dev->mCommands)));
     c3c:	2004      	movs	r0, #4
     c3e:	4b15      	ldr	r3, [pc, #84]	; (c94 <newATCADevice+0x68>)
     c40:	4798      	blx	r3
     c42:	1e06      	subs	r6, r0, #0
     c44:	6020      	str	r0, [r4, #0]
    if (ca_dev->mCommands == NULL)
     c46:	d00d      	beq.n	c64 <newATCADevice+0x38>
    ca_dev->mIface = (ATCAIface)malloc(sizeof(*(ca_dev->mIface)));
     c48:	2028      	movs	r0, #40	; 0x28
     c4a:	4b12      	ldr	r3, [pc, #72]	; (c94 <newATCADevice+0x68>)
     c4c:	4798      	blx	r3
     c4e:	6060      	str	r0, [r4, #4]
    if (ca_dev->mIface == NULL)
     c50:	2800      	cmp	r0, #0
     c52:	d00c      	beq.n	c6e <newATCADevice+0x42>
    status = initATCADevice(cfg, ca_dev);
     c54:	0021      	movs	r1, r4
     c56:	0028      	movs	r0, r5
     c58:	4b0f      	ldr	r3, [pc, #60]	; (c98 <newATCADevice+0x6c>)
     c5a:	4798      	blx	r3
    if (status != ATCA_SUCCESS)
     c5c:	2800      	cmp	r0, #0
     c5e:	d10d      	bne.n	c7c <newATCADevice+0x50>
}
     c60:	0020      	movs	r0, r4
     c62:	bd70      	pop	{r4, r5, r6, pc}
        free(ca_dev);
     c64:	0020      	movs	r0, r4
     c66:	4b0d      	ldr	r3, [pc, #52]	; (c9c <newATCADevice+0x70>)
     c68:	4798      	blx	r3
        return NULL;
     c6a:	2400      	movs	r4, #0
     c6c:	e7f8      	b.n	c60 <newATCADevice+0x34>
        free(ca_dev->mCommands);
     c6e:	0030      	movs	r0, r6
     c70:	4d0a      	ldr	r5, [pc, #40]	; (c9c <newATCADevice+0x70>)
     c72:	47a8      	blx	r5
        free(ca_dev);
     c74:	0020      	movs	r0, r4
     c76:	47a8      	blx	r5
        return NULL;
     c78:	2400      	movs	r4, #0
     c7a:	e7f1      	b.n	c60 <newATCADevice+0x34>
        free(ca_dev->mIface);
     c7c:	6860      	ldr	r0, [r4, #4]
     c7e:	4d07      	ldr	r5, [pc, #28]	; (c9c <newATCADevice+0x70>)
     c80:	47a8      	blx	r5
        free(ca_dev->mCommands);
     c82:	6820      	ldr	r0, [r4, #0]
     c84:	47a8      	blx	r5
        free(ca_dev);
     c86:	0020      	movs	r0, r4
     c88:	47a8      	blx	r5
        return NULL;
     c8a:	2400      	movs	r4, #0
     c8c:	e7e8      	b.n	c60 <newATCADevice+0x34>
        return NULL;
     c8e:	2400      	movs	r4, #0
     c90:	e7e6      	b.n	c60 <newATCADevice+0x34>
     c92:	46c0      	nop			; (mov r8, r8)
     c94:	00019781 	.word	0x00019781
     c98:	00000be9 	.word	0x00000be9
     c9c:	00019795 	.word	0x00019795

00000ca0 <releaseATCADevice>:
/** \brief Release any resources associated with the device.
 *  \param[in] ca_dev  Device to release
 *  \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS releaseATCADevice(ATCADevice ca_dev)
{
     ca0:	b510      	push	{r4, lr}
    if (ca_dev == NULL)
    {
        return ATCA_BAD_PARAM;
     ca2:	23e2      	movs	r3, #226	; 0xe2
    if (ca_dev == NULL)
     ca4:	2800      	cmp	r0, #0
     ca6:	d003      	beq.n	cb0 <releaseATCADevice+0x10>
    }

    return releaseATCAIface(ca_dev->mIface);
     ca8:	6840      	ldr	r0, [r0, #4]
     caa:	4b02      	ldr	r3, [pc, #8]	; (cb4 <releaseATCADevice+0x14>)
     cac:	4798      	blx	r3
     cae:	0003      	movs	r3, r0
}
     cb0:	0018      	movs	r0, r3
     cb2:	bd10      	pop	{r4, pc}
     cb4:	00000f1d 	.word	0x00000f1d

00000cb8 <deleteATCADevice>:
{
     cb8:	b510      	push	{r4, lr}
     cba:	1e04      	subs	r4, r0, #0
    if (ca_dev == NULL)
     cbc:	d013      	beq.n	ce6 <deleteATCADevice+0x2e>
    releaseATCADevice(*ca_dev);
     cbe:	6800      	ldr	r0, [r0, #0]
     cc0:	4b09      	ldr	r3, [pc, #36]	; (ce8 <deleteATCADevice+0x30>)
     cc2:	4798      	blx	r3
    deleteATCACommand(&(*ca_dev)->mCommands);
     cc4:	6820      	ldr	r0, [r4, #0]
     cc6:	4b09      	ldr	r3, [pc, #36]	; (cec <deleteATCADevice+0x34>)
     cc8:	4798      	blx	r3
    if ((*ca_dev)->mIface)
     cca:	6823      	ldr	r3, [r4, #0]
     ccc:	6858      	ldr	r0, [r3, #4]
     cce:	2800      	cmp	r0, #0
     cd0:	d004      	beq.n	cdc <deleteATCADevice+0x24>
        free((*ca_dev)->mIface);
     cd2:	4b07      	ldr	r3, [pc, #28]	; (cf0 <deleteATCADevice+0x38>)
     cd4:	4798      	blx	r3
        (*ca_dev)->mIface = NULL;
     cd6:	6823      	ldr	r3, [r4, #0]
     cd8:	2200      	movs	r2, #0
     cda:	605a      	str	r2, [r3, #4]
    free(*ca_dev);
     cdc:	6820      	ldr	r0, [r4, #0]
     cde:	4b04      	ldr	r3, [pc, #16]	; (cf0 <deleteATCADevice+0x38>)
     ce0:	4798      	blx	r3
    *ca_dev = NULL;
     ce2:	2300      	movs	r3, #0
     ce4:	6023      	str	r3, [r4, #0]
}
     ce6:	bd10      	pop	{r4, pc}
     ce8:	00000ca1 	.word	0x00000ca1
     cec:	00000985 	.word	0x00000985
     cf0:	00019795 	.word	0x00019795

00000cf4 <atca_execute_command>:
 * \param[in]    device  CryptoAuthentication device to send the command to.
 *
 * \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS atca_execute_command(ATCAPacket* packet, ATCADevice device)
{
     cf4:	b5f0      	push	{r4, r5, r6, r7, lr}
     cf6:	46de      	mov	lr, fp
     cf8:	4657      	mov	r7, sl
     cfa:	464e      	mov	r6, r9
     cfc:	4645      	mov	r5, r8
     cfe:	b5e0      	push	{r5, r6, r7, lr}
     d00:	b083      	sub	sp, #12
     d02:	4681      	mov	r9, r0
     d04:	000f      	movs	r7, r1
#else
        execution_or_wait_time = ATCA_POLLING_INIT_TIME_MSEC;
        max_delay_count = ATCA_POLLING_MAX_TIME_MSEC / ATCA_POLLING_FREQUENCY_TIME_MSEC;
#endif

        if ((status = atwake(device->mIface)) != ATCA_SUCCESS)
     d06:	6848      	ldr	r0, [r1, #4]
     d08:	4b24      	ldr	r3, [pc, #144]	; (d9c <atca_execute_command+0xa8>)
     d0a:	4798      	blx	r3
     d0c:	1e04      	subs	r4, r0, #0
     d0e:	d00a      	beq.n	d26 <atca_execute_command+0x32>
            break;
        }
    }
    while (0);

    atidle(device->mIface);
     d10:	6878      	ldr	r0, [r7, #4]
     d12:	4b23      	ldr	r3, [pc, #140]	; (da0 <atca_execute_command+0xac>)
     d14:	4798      	blx	r3
    return status;
}
     d16:	0020      	movs	r0, r4
     d18:	b003      	add	sp, #12
     d1a:	bc3c      	pop	{r2, r3, r4, r5}
     d1c:	4690      	mov	r8, r2
     d1e:	4699      	mov	r9, r3
     d20:	46a2      	mov	sl, r4
     d22:	46ab      	mov	fp, r5
     d24:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if ((status = atsend(device->mIface, (uint8_t*)packet, packet->txsize)) != ATCA_SUCCESS)
     d26:	464b      	mov	r3, r9
     d28:	785a      	ldrb	r2, [r3, #1]
     d2a:	4649      	mov	r1, r9
     d2c:	6878      	ldr	r0, [r7, #4]
     d2e:	4b1d      	ldr	r3, [pc, #116]	; (da4 <atca_execute_command+0xb0>)
     d30:	4798      	blx	r3
     d32:	1e04      	subs	r4, r0, #0
     d34:	d1ec      	bne.n	d10 <atca_execute_command+0x1c>
        atca_delay_ms(execution_or_wait_time);
     d36:	2001      	movs	r0, #1
     d38:	4b1b      	ldr	r3, [pc, #108]	; (da8 <atca_execute_command+0xb4>)
     d3a:	4798      	blx	r3
     d3c:	4e1b      	ldr	r6, [pc, #108]	; (dac <atca_execute_command+0xb8>)
            memset(packet->data, 0, sizeof(packet->data));
     d3e:	23c0      	movs	r3, #192	; 0xc0
     d40:	4698      	mov	r8, r3
     d42:	4b1b      	ldr	r3, [pc, #108]	; (db0 <atca_execute_command+0xbc>)
     d44:	469b      	mov	fp, r3
            if ((status = atreceive(device->mIface, packet->data, &rxsize)) == ATCA_SUCCESS)
     d46:	4b1b      	ldr	r3, [pc, #108]	; (db4 <atca_execute_command+0xc0>)
     d48:	469a      	mov	sl, r3
            memset(packet->data, 0, sizeof(packet->data));
     d4a:	464b      	mov	r3, r9
     d4c:	1d9d      	adds	r5, r3, #6
     d4e:	4642      	mov	r2, r8
     d50:	2100      	movs	r1, #0
     d52:	0028      	movs	r0, r5
     d54:	47d8      	blx	fp
            rxsize = sizeof(packet->data);
     d56:	466b      	mov	r3, sp
     d58:	1d9a      	adds	r2, r3, #6
     d5a:	4643      	mov	r3, r8
     d5c:	8013      	strh	r3, [r2, #0]
            if ((status = atreceive(device->mIface, packet->data, &rxsize)) == ATCA_SUCCESS)
     d5e:	0029      	movs	r1, r5
     d60:	6878      	ldr	r0, [r7, #4]
     d62:	47d0      	blx	sl
     d64:	1e04      	subs	r4, r0, #0
     d66:	d010      	beq.n	d8a <atca_execute_command+0x96>
            atca_delay_ms(ATCA_POLLING_FREQUENCY_TIME_MSEC);
     d68:	2002      	movs	r0, #2
     d6a:	4b0f      	ldr	r3, [pc, #60]	; (da8 <atca_execute_command+0xb4>)
     d6c:	4798      	blx	r3
     d6e:	3e01      	subs	r6, #1
        while (max_delay_count-- > 0);
     d70:	2e00      	cmp	r6, #0
     d72:	d1ea      	bne.n	d4a <atca_execute_command+0x56>
     d74:	e7cc      	b.n	d10 <atca_execute_command+0x1c>
        if ((status = atCheckCrc(packet->data)) != ATCA_SUCCESS)
     d76:	0028      	movs	r0, r5
     d78:	4b0f      	ldr	r3, [pc, #60]	; (db8 <atca_execute_command+0xc4>)
     d7a:	4798      	blx	r3
     d7c:	1e04      	subs	r4, r0, #0
     d7e:	d1c7      	bne.n	d10 <atca_execute_command+0x1c>
        if ((status = isATCAError(packet->data)) != ATCA_SUCCESS)
     d80:	0028      	movs	r0, r5
     d82:	4b0e      	ldr	r3, [pc, #56]	; (dbc <atca_execute_command+0xc8>)
     d84:	4798      	blx	r3
     d86:	0004      	movs	r4, r0
     d88:	e7c2      	b.n	d10 <atca_execute_command+0x1c>
        if (rxsize < 4)
     d8a:	466b      	mov	r3, sp
     d8c:	88dc      	ldrh	r4, [r3, #6]
     d8e:	2c03      	cmp	r4, #3
     d90:	d8f1      	bhi.n	d76 <atca_execute_command+0x82>
                status = ATCA_RX_NO_RESPONSE;
     d92:	4260      	negs	r0, r4
     d94:	4160      	adcs	r0, r4
     d96:	30e6      	adds	r0, #230	; 0xe6
     d98:	0004      	movs	r4, r0
     d9a:	e7b9      	b.n	d10 <atca_execute_command+0x1c>
     d9c:	00000ee1 	.word	0x00000ee1
     da0:	00000f01 	.word	0x00000f01
     da4:	00000ed1 	.word	0x00000ed1
     da8:	00001961 	.word	0x00001961
     dac:	000004e3 	.word	0x000004e3
     db0:	00019ead 	.word	0x00019ead
     db4:	00000ed9 	.word	0x00000ed9
     db8:	00000b49 	.word	0x00000b49
     dbc:	00000b85 	.word	0x00000b85

00000dc0 <isHexAlpha>:
 * \param[in] c  character to check
 * \return True if the character is a hex
 */
bool isHexAlpha(char c)
{
    return ((c >= 'A') && (c <= 'F')) || ((c >= 'a') && (c <= 'f'));
     dc0:	0002      	movs	r2, r0
     dc2:	3a41      	subs	r2, #65	; 0x41
     dc4:	2301      	movs	r3, #1
     dc6:	2a05      	cmp	r2, #5
     dc8:	d906      	bls.n	dd8 <isHexAlpha+0x18>
     dca:	3861      	subs	r0, #97	; 0x61
     dcc:	b2c0      	uxtb	r0, r0
     dce:	2300      	movs	r3, #0
     dd0:	2205      	movs	r2, #5
     dd2:	4282      	cmp	r2, r0
     dd4:	415b      	adcs	r3, r3
     dd6:	b2db      	uxtb	r3, r3
}
     dd8:	0018      	movs	r0, r3
     dda:	4770      	bx	lr

00000ddc <isHexDigit>:
 * \brief Returns true if this character is a valid hex character.
 * \param[in] c  character to check
 * \return True if the character can be included in a valid hexstring
 */
bool isHexDigit(char c)
{
     ddc:	b510      	push	{r4, lr}
    return isDigit(c) || isHexAlpha(c);
     dde:	0002      	movs	r2, r0
     de0:	3a30      	subs	r2, #48	; 0x30
     de2:	2301      	movs	r3, #1
     de4:	2a09      	cmp	r2, #9
     de6:	d902      	bls.n	dee <isHexDigit+0x12>
     de8:	4b02      	ldr	r3, [pc, #8]	; (df4 <isHexDigit+0x18>)
     dea:	4798      	blx	r3
     dec:	0003      	movs	r3, r0
}
     dee:	0018      	movs	r0, r3
     df0:	bd10      	pop	{r4, pc}
     df2:	46c0      	nop			; (mov r8, r8)
     df4:	00000dc1 	.word	0x00000dc1

00000df8 <atcab_hex2bin>:
{
     df8:	b5f0      	push	{r4, r5, r6, r7, lr}
     dfa:	46de      	mov	lr, fp
     dfc:	4657      	mov	r7, sl
     dfe:	464e      	mov	r6, r9
     e00:	4645      	mov	r5, r8
     e02:	b5e0      	push	{r5, r6, r7, lr}
     e04:	b083      	sub	sp, #12
     e06:	1e0f      	subs	r7, r1, #0
     e08:	9201      	str	r2, [sp, #4]
     e0a:	469a      	mov	sl, r3
    for (hex_index = 0; hex_index < hex_size; hex_index++)
     e0c:	d057      	beq.n	ebe <atcab_hex2bin+0xc6>
     e0e:	0004      	movs	r4, r0
     e10:	4680      	mov	r8, r0
     e12:	4488      	add	r8, r1
     e14:	2601      	movs	r6, #1
     e16:	2700      	movs	r7, #0
        if (!isHexDigit(hex[hex_index]))
     e18:	4b2c      	ldr	r3, [pc, #176]	; (ecc <atcab_hex2bin+0xd4>)
     e1a:	4699      	mov	r9, r3
        is_upper_nibble = !is_upper_nibble;
     e1c:	2301      	movs	r3, #1
     e1e:	469b      	mov	fp, r3
     e20:	e00e      	b.n	e40 <atcab_hex2bin+0x48>
    return 16;
     e22:	2310      	movs	r3, #16
    if (c >= 'A' && c <= 'F')
     e24:	0029      	movs	r1, r5
     e26:	3941      	subs	r1, #65	; 0x41
     e28:	2905      	cmp	r1, #5
     e2a:	d801      	bhi.n	e30 <atcab_hex2bin+0x38>
        return (uint8_t)(c - 'A') + 10;
     e2c:	3d37      	subs	r5, #55	; 0x37
     e2e:	b2eb      	uxtb	r3, r5
            bin[bin_index] = hex_digit_to_num(hex[hex_index]) << 4;
     e30:	011b      	lsls	r3, r3, #4
     e32:	7013      	strb	r3, [r2, #0]
        is_upper_nibble = !is_upper_nibble;
     e34:	465b      	mov	r3, fp
     e36:	405e      	eors	r6, r3
     e38:	b2f6      	uxtb	r6, r6
     e3a:	3401      	adds	r4, #1
    for (hex_index = 0; hex_index < hex_size; hex_index++)
     e3c:	4544      	cmp	r4, r8
     e3e:	d034      	beq.n	eaa <atcab_hex2bin+0xb2>
        if (!isHexDigit(hex[hex_index]))
     e40:	7825      	ldrb	r5, [r4, #0]
     e42:	0028      	movs	r0, r5
     e44:	47c8      	blx	r9
     e46:	2800      	cmp	r0, #0
     e48:	d0f7      	beq.n	e3a <atcab_hex2bin+0x42>
        if (bin_index >= *bin_size)
     e4a:	4653      	mov	r3, sl
     e4c:	681b      	ldr	r3, [r3, #0]
     e4e:	42bb      	cmp	r3, r7
     e50:	d939      	bls.n	ec6 <atcab_hex2bin+0xce>
        if (is_upper_nibble)
     e52:	2e00      	cmp	r6, #0
     e54:	d00e      	beq.n	e74 <atcab_hex2bin+0x7c>
            bin[bin_index] = hex_digit_to_num(hex[hex_index]) << 4;
     e56:	9b01      	ldr	r3, [sp, #4]
     e58:	19da      	adds	r2, r3, r7
    if (c >= '0' && c <= '9')
     e5a:	0029      	movs	r1, r5
     e5c:	3930      	subs	r1, #48	; 0x30
     e5e:	b2c9      	uxtb	r1, r1
        return (uint8_t)(c - '0');
     e60:	000b      	movs	r3, r1
    if (c >= '0' && c <= '9')
     e62:	2909      	cmp	r1, #9
     e64:	d9e4      	bls.n	e30 <atcab_hex2bin+0x38>
    if (c >= 'a' && c <= 'f')
     e66:	002b      	movs	r3, r5
     e68:	3b61      	subs	r3, #97	; 0x61
     e6a:	2b05      	cmp	r3, #5
     e6c:	d8d9      	bhi.n	e22 <atcab_hex2bin+0x2a>
        return (uint8_t)(c - 'a') + 10;
     e6e:	3d57      	subs	r5, #87	; 0x57
     e70:	b2eb      	uxtb	r3, r5
     e72:	e7dd      	b.n	e30 <atcab_hex2bin+0x38>
    if (c >= '0' && c <= '9')
     e74:	002a      	movs	r2, r5
     e76:	3a30      	subs	r2, #48	; 0x30
     e78:	b2d2      	uxtb	r2, r2
        return (uint8_t)(c - '0');
     e7a:	0013      	movs	r3, r2
    if (c >= '0' && c <= '9')
     e7c:	2a09      	cmp	r2, #9
     e7e:	d905      	bls.n	e8c <atcab_hex2bin+0x94>
    if (c >= 'a' && c <= 'f')
     e80:	002b      	movs	r3, r5
     e82:	3b61      	subs	r3, #97	; 0x61
     e84:	2b05      	cmp	r3, #5
     e86:	d808      	bhi.n	e9a <atcab_hex2bin+0xa2>
        return (uint8_t)(c - 'a') + 10;
     e88:	3d57      	subs	r5, #87	; 0x57
     e8a:	b2eb      	uxtb	r3, r5
            bin[bin_index] += hex_digit_to_num(hex[hex_index]);
     e8c:	9a01      	ldr	r2, [sp, #4]
     e8e:	19d2      	adds	r2, r2, r7
     e90:	7815      	ldrb	r5, [r2, #0]
     e92:	195d      	adds	r5, r3, r5
     e94:	7015      	strb	r5, [r2, #0]
            bin_index++;
     e96:	3701      	adds	r7, #1
     e98:	e7cc      	b.n	e34 <atcab_hex2bin+0x3c>
    return 16;
     e9a:	2310      	movs	r3, #16
    if (c >= 'A' && c <= 'F')
     e9c:	002a      	movs	r2, r5
     e9e:	3a41      	subs	r2, #65	; 0x41
     ea0:	2a05      	cmp	r2, #5
     ea2:	d8f3      	bhi.n	e8c <atcab_hex2bin+0x94>
        return (uint8_t)(c - 'A') + 10;
     ea4:	3d37      	subs	r5, #55	; 0x37
     ea6:	b2eb      	uxtb	r3, r5
     ea8:	e7f0      	b.n	e8c <atcab_hex2bin+0x94>
        return ATCA_BAD_PARAM;
     eaa:	20e2      	movs	r0, #226	; 0xe2
    if (!is_upper_nibble)
     eac:	2e00      	cmp	r6, #0
     eae:	d106      	bne.n	ebe <atcab_hex2bin+0xc6>
}
     eb0:	b003      	add	sp, #12
     eb2:	bc3c      	pop	{r2, r3, r4, r5}
     eb4:	4690      	mov	r8, r2
     eb6:	4699      	mov	r9, r3
     eb8:	46a2      	mov	sl, r4
     eba:	46ab      	mov	fp, r5
     ebc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    *bin_size = bin_index;
     ebe:	4653      	mov	r3, sl
     ec0:	601f      	str	r7, [r3, #0]
    return ATCA_SUCCESS;
     ec2:	2000      	movs	r0, #0
     ec4:	e7f4      	b.n	eb0 <atcab_hex2bin+0xb8>
            return ATCA_SMALL_BUFFER;
     ec6:	20ed      	movs	r0, #237	; 0xed
     ec8:	e7f2      	b.n	eb0 <atcab_hex2bin+0xb8>
     eca:	46c0      	nop			; (mov r8, r8)
     ecc:	00000ddd 	.word	0x00000ddd

00000ed0 <atsend>:
 * \param[in] txdata    Data to be transmitted to the device.
 * \param[in] txlength  Number of bytes to be transmitted to the device.
 * \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS atsend(ATCAIface ca_iface, uint8_t *txdata, int txlength)
{
     ed0:	b510      	push	{r4, lr}
    return ca_iface->atsend(ca_iface, txdata, txlength);
     ed2:	6903      	ldr	r3, [r0, #16]
     ed4:	4798      	blx	r3
}
     ed6:	bd10      	pop	{r4, pc}

00000ed8 <atreceive>:
 * \param[inout] rxlength  As input, the size of the rxdata buffer.
 *                         As output, the number of bytes received.
 * \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS atreceive(ATCAIface ca_iface, uint8_t *rxdata, uint16_t *rxlength)
{
     ed8:	b510      	push	{r4, lr}
    return ca_iface->atreceive(ca_iface, rxdata, rxlength);
     eda:	6943      	ldr	r3, [r0, #20]
     edc:	4798      	blx	r3
}
     ede:	bd10      	pop	{r4, pc}

00000ee0 <atwake>:
 *         instead.
 * \param[in] ca_iface  Device to interact with.
 * \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS atwake(ATCAIface ca_iface)
{
     ee0:	b510      	push	{r4, lr}
     ee2:	0004      	movs	r4, r0
    ATCA_STATUS status = ca_iface->atwake(ca_iface);
     ee4:	6983      	ldr	r3, [r0, #24]
     ee6:	4798      	blx	r3

    if (status == ATCA_WAKE_FAILED)
     ee8:	28d0      	cmp	r0, #208	; 0xd0
     eea:	d000      	beq.n	eee <atwake+0xe>

        status = ca_iface->atwake(ca_iface);
    }

    return status;
}
     eec:	bd10      	pop	{r4, pc}
        atca_delay_ms(ATCA_POST_DELAY_MSEC);
     eee:	38b7      	subs	r0, #183	; 0xb7
     ef0:	4b02      	ldr	r3, [pc, #8]	; (efc <atwake+0x1c>)
     ef2:	4798      	blx	r3
        status = ca_iface->atwake(ca_iface);
     ef4:	69a3      	ldr	r3, [r4, #24]
     ef6:	0020      	movs	r0, r4
     ef8:	4798      	blx	r3
     efa:	e7f7      	b.n	eec <atwake+0xc>
     efc:	00001961 	.word	0x00001961

00000f00 <atidle>:
 *         be used instead.
 * \param[in] ca_iface  Device to interact with.
 * \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS atidle(ATCAIface ca_iface)
{
     f00:	b510      	push	{r4, lr}
    ATCA_STATUS status;

    status = ca_iface->atidle(ca_iface);
     f02:	69c3      	ldr	r3, [r0, #28]
     f04:	4798      	blx	r3
     f06:	0004      	movs	r4, r0
    atca_delay_ms(1);
     f08:	2001      	movs	r0, #1
     f0a:	4b02      	ldr	r3, [pc, #8]	; (f14 <atidle+0x14>)
     f0c:	4798      	blx	r3
    return status;
}
     f0e:	0020      	movs	r0, r4
     f10:	bd10      	pop	{r4, pc}
     f12:	46c0      	nop			; (mov r8, r8)
     f14:	00001961 	.word	0x00001961

00000f18 <atgetifacecfg>:
 * \param[in] ca_iface  Device interface.
 * \return Logical interface configuration.
 */
ATCAIfaceCfg * atgetifacecfg(ATCAIface ca_iface)
{
    return ca_iface->mIfaceCFG;
     f18:	6840      	ldr	r0, [r0, #4]
}
     f1a:	4770      	bx	lr

00000f1c <releaseATCAIface>:
 *         this interface.
 *  \param[in] ca_iface  Device interface.
 *  \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS releaseATCAIface(ATCAIface ca_iface)
{
     f1c:	b510      	push	{r4, lr}
    if (ca_iface == NULL)
    {
        return ATCA_BAD_PARAM;
     f1e:	23e2      	movs	r3, #226	; 0xe2
    if (ca_iface == NULL)
     f20:	2800      	cmp	r0, #0
     f22:	d004      	beq.n	f2e <releaseATCAIface+0x12>
    }

    return hal_iface_release(ca_iface->mType, ca_iface->hal_data);
     f24:	6a41      	ldr	r1, [r0, #36]	; 0x24
     f26:	7800      	ldrb	r0, [r0, #0]
     f28:	4b02      	ldr	r3, [pc, #8]	; (f34 <releaseATCAIface+0x18>)
     f2a:	4798      	blx	r3
     f2c:	0003      	movs	r3, r0
}
     f2e:	0018      	movs	r0, r3
     f30:	bd10      	pop	{r4, pc}
     f32:	46c0      	nop			; (mov r8, r8)
     f34:	00001369 	.word	0x00001369

00000f38 <_atinit>:
    *ca_iface = NULL;
}
#endif

ATCA_STATUS _atinit(ATCAIface ca_iface, ATCAHAL_t *hal)
{
     f38:	b570      	push	{r4, r5, r6, lr}
     f3a:	0004      	movs	r4, r0
     f3c:	000d      	movs	r5, r1
    // get method mapping to HAL methods for this interface
    hal_iface_init(ca_iface->mIfaceCFG, hal);
     f3e:	6840      	ldr	r0, [r0, #4]
     f40:	4b09      	ldr	r3, [pc, #36]	; (f68 <_atinit+0x30>)
     f42:	4798      	blx	r3
    ca_iface->atinit     = hal->halinit;
     f44:	682b      	ldr	r3, [r5, #0]
     f46:	60a3      	str	r3, [r4, #8]
    ca_iface->atpostinit = hal->halpostinit;
     f48:	686b      	ldr	r3, [r5, #4]
     f4a:	60e3      	str	r3, [r4, #12]
    ca_iface->atsend     = hal->halsend;
     f4c:	68ab      	ldr	r3, [r5, #8]
     f4e:	6123      	str	r3, [r4, #16]
    ca_iface->atreceive  = hal->halreceive;
     f50:	68eb      	ldr	r3, [r5, #12]
     f52:	6163      	str	r3, [r4, #20]
    ca_iface->atwake     = hal->halwake;
     f54:	692b      	ldr	r3, [r5, #16]
     f56:	61a3      	str	r3, [r4, #24]
    ca_iface->atsleep    = hal->halsleep;
     f58:	69ab      	ldr	r3, [r5, #24]
     f5a:	6223      	str	r3, [r4, #32]
    ca_iface->atidle     = hal->halidle;
     f5c:	696b      	ldr	r3, [r5, #20]
     f5e:	61e3      	str	r3, [r4, #28]
    ca_iface->hal_data   = hal->hal_data;
     f60:	6a2b      	ldr	r3, [r5, #32]
     f62:	6263      	str	r3, [r4, #36]	; 0x24

    return ATCA_SUCCESS;
}
     f64:	2000      	movs	r0, #0
     f66:	bd70      	pop	{r4, r5, r6, pc}
     f68:	00001315 	.word	0x00001315

00000f6c <atinit>:
{
     f6c:	b510      	push	{r4, lr}
     f6e:	b08a      	sub	sp, #40	; 0x28
     f70:	0004      	movs	r4, r0
    _atinit(ca_iface, &hal);
     f72:	a901      	add	r1, sp, #4
     f74:	4b07      	ldr	r3, [pc, #28]	; (f94 <atinit+0x28>)
     f76:	4798      	blx	r3
    status = ca_iface->atinit(&hal, ca_iface->mIfaceCFG);
     f78:	6861      	ldr	r1, [r4, #4]
     f7a:	a801      	add	r0, sp, #4
     f7c:	68a3      	ldr	r3, [r4, #8]
     f7e:	4798      	blx	r3
    if (status == ATCA_SUCCESS)
     f80:	2800      	cmp	r0, #0
     f82:	d001      	beq.n	f88 <atinit+0x1c>
}
     f84:	b00a      	add	sp, #40	; 0x28
     f86:	bd10      	pop	{r4, pc}
        ca_iface->hal_data = hal.hal_data;
     f88:	9b09      	ldr	r3, [sp, #36]	; 0x24
     f8a:	6263      	str	r3, [r4, #36]	; 0x24
        status = ca_iface->atpostinit(ca_iface);
     f8c:	68e3      	ldr	r3, [r4, #12]
     f8e:	0020      	movs	r0, r4
     f90:	4798      	blx	r3
     f92:	e7f7      	b.n	f84 <atinit+0x18>
     f94:	00000f39 	.word	0x00000f39

00000f98 <initATCAIface>:
{
     f98:	b510      	push	{r4, lr}
    if (cfg == NULL || ca_iface == NULL)
     f9a:	2800      	cmp	r0, #0
     f9c:	d00b      	beq.n	fb6 <initATCAIface+0x1e>
        return ATCA_BAD_PARAM;
     f9e:	23e2      	movs	r3, #226	; 0xe2
    if (cfg == NULL || ca_iface == NULL)
     fa0:	2900      	cmp	r1, #0
     fa2:	d006      	beq.n	fb2 <initATCAIface+0x1a>
    ca_iface->mType = cfg->iface_type;
     fa4:	7803      	ldrb	r3, [r0, #0]
     fa6:	700b      	strb	r3, [r1, #0]
    ca_iface->mIfaceCFG = cfg;
     fa8:	6048      	str	r0, [r1, #4]
    status = atinit(ca_iface);
     faa:	0008      	movs	r0, r1
     fac:	4b03      	ldr	r3, [pc, #12]	; (fbc <initATCAIface+0x24>)
     fae:	4798      	blx	r3
     fb0:	0003      	movs	r3, r0
}
     fb2:	0018      	movs	r0, r3
     fb4:	bd10      	pop	{r4, pc}
        return ATCA_BAD_PARAM;
     fb6:	23e2      	movs	r3, #226	; 0xe2
     fb8:	e7fb      	b.n	fb2 <initATCAIface+0x1a>
     fba:	46c0      	nop			; (mov r8, r8)
     fbc:	00000f6d 	.word	0x00000f6d

00000fc0 <atcac_sw_sha2_256>:
 * \param[out] digest     result
 * \return ATCA_SUCCESS on success, otherwise an error code.
 */

int atcac_sw_sha2_256(const uint8_t* data, size_t data_size, uint8_t digest[ATCA_SHA2_256_DIGEST_SIZE])
{
     fc0:	b570      	push	{r4, r5, r6, lr}
     fc2:	b0b0      	sub	sp, #192	; 0xc0
     fc4:	0005      	movs	r5, r0
     fc6:	000e      	movs	r6, r1
     fc8:	0014      	movs	r4, r2
    sw_sha256_init((sw_sha256_ctx*)ctx);
     fca:	4668      	mov	r0, sp
     fcc:	4b06      	ldr	r3, [pc, #24]	; (fe8 <atcac_sw_sha2_256+0x28>)
     fce:	4798      	blx	r3
    sw_sha256_update((sw_sha256_ctx*)ctx, data, (uint32_t)data_size);
     fd0:	0032      	movs	r2, r6
     fd2:	0029      	movs	r1, r5
     fd4:	4668      	mov	r0, sp
     fd6:	4b05      	ldr	r3, [pc, #20]	; (fec <atcac_sw_sha2_256+0x2c>)
     fd8:	4798      	blx	r3
    sw_sha256_final((sw_sha256_ctx*)ctx, digest);
     fda:	0021      	movs	r1, r4
     fdc:	4668      	mov	r0, sp
     fde:	4b04      	ldr	r3, [pc, #16]	; (ff0 <atcac_sw_sha2_256+0x30>)
     fe0:	4798      	blx	r3
    {
        return ret;
    }

    return ATCA_SUCCESS;
     fe2:	2000      	movs	r0, #0
     fe4:	b030      	add	sp, #192	; 0xc0
     fe6:	bd70      	pop	{r4, r5, r6, pc}
     fe8:	000011a1 	.word	0x000011a1
     fec:	00001205 	.word	0x00001205
     ff0:	00001291 	.word	0x00001291

00000ff4 <sw_sha256_process>:
 * \param[in] ctx          SHA256 hash context
 * \param[in] blocks       Raw blocks to be processed
 * \param[in] block_count  Number of 64-byte blocks to process
 */
static void sw_sha256_process(sw_sha256_ctx* ctx, const uint8_t* blocks, uint32_t block_count)
{
     ff4:	b5f0      	push	{r4, r5, r6, r7, lr}
     ff6:	46de      	mov	lr, fp
     ff8:	4657      	mov	r7, sl
     ffa:	464e      	mov	r6, r9
     ffc:	4645      	mov	r5, r8
     ffe:	b5e0      	push	{r5, r6, r7, lr}
    1000:	b0d5      	sub	sp, #340	; 0x154
    1002:	900b      	str	r0, [sp, #44]	; 0x2c
        0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,
        0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2
    };

    // Loop through all the blocks to process
    for (block = 0; block < block_count; block++)
    1004:	2a00      	cmp	r2, #0
    1006:	d100      	bne.n	100a <sw_sha256_process+0x16>
    1008:	e0c0      	b.n	118c <sw_sha256_process+0x198>
    100a:	000b      	movs	r3, r1
    100c:	0192      	lsls	r2, r2, #6
    100e:	1889      	adds	r1, r1, r2
    1010:	910a      	str	r1, [sp, #40]	; 0x28
    1012:	0002      	movs	r2, r0
    1014:	32a8      	adds	r2, #168	; 0xa8
    1016:	9209      	str	r2, [sp, #36]	; 0x24
            s1 = rotate_right(rotate_register[4], 6)
                 ^ rotate_right(rotate_register[4], 11)
                 ^ rotate_right(rotate_register[4], 25);
            ch = (rotate_register[4] & rotate_register[5])
                 ^ (~rotate_register[4] & rotate_register[6]);
            t1 = rotate_register[7] + s1 + ch + k[i] + w_union.w_word[i];
    1018:	4a60      	ldr	r2, [pc, #384]	; (119c <sw_sha256_process+0x1a8>)
    101a:	4691      	mov	r9, r2
    101c:	e05c      	b.n	10d8 <sw_sha256_process+0xe4>

            rotate_register[7] = rotate_register[6];
            rotate_register[6] = rotate_register[5];
    101e:	9d02      	ldr	r5, [sp, #8]
    1020:	9501      	str	r5, [sp, #4]
            rotate_register[5] = rotate_register[4];
    1022:	9002      	str	r0, [sp, #8]
            rotate_register[4] = rotate_register[3] + t1;
    1024:	4658      	mov	r0, fp
            rotate_register[3] = rotate_register[2];
            rotate_register[2] = rotate_register[1];
    1026:	46bc      	mov	ip, r7
            rotate_register[1] = rotate_register[0];
    1028:	0027      	movs	r7, r4
            rotate_register[0] = t1 + t2;
    102a:	0014      	movs	r4, r2
                 ^ rotate_right(rotate_register[4], 11)
    102c:	0002      	movs	r2, r0
    102e:	250b      	movs	r5, #11
    1030:	41ea      	rors	r2, r5
    1032:	0005      	movs	r5, r0
    1034:	2606      	movs	r6, #6
    1036:	41f5      	rors	r5, r6
    1038:	4055      	eors	r5, r2
                 ^ rotate_right(rotate_register[4], 25);
    103a:	0002      	movs	r2, r0
    103c:	3613      	adds	r6, #19
    103e:	41f2      	rors	r2, r6
            s1 = rotate_right(rotate_register[4], 6)
    1040:	4055      	eors	r5, r2
            t1 = rotate_register[7] + s1 + ch + k[i] + w_union.w_word[i];
    1042:	464a      	mov	r2, r9
    1044:	588a      	ldr	r2, [r1, r2]
    1046:	9e04      	ldr	r6, [sp, #16]
    1048:	598e      	ldr	r6, [r1, r6]
    104a:	46b0      	mov	r8, r6
    104c:	4442      	add	r2, r8
    104e:	18ad      	adds	r5, r5, r2
            ch = (rotate_register[4] & rotate_register[5])
    1050:	9a02      	ldr	r2, [sp, #8]
    1052:	4002      	ands	r2, r0
    1054:	4690      	mov	r8, r2
    1056:	9a01      	ldr	r2, [sp, #4]
    1058:	4382      	bics	r2, r0
    105a:	4646      	mov	r6, r8
    105c:	4072      	eors	r2, r6
            t1 = rotate_register[7] + s1 + ch + k[i] + w_union.w_word[i];
    105e:	18aa      	adds	r2, r5, r2
    1060:	18d3      	adds	r3, r2, r3
            rotate_register[4] = rotate_register[3] + t1;
    1062:	9d03      	ldr	r5, [sp, #12]
    1064:	46ab      	mov	fp, r5
    1066:	449b      	add	fp, r3
                 ^ rotate_right(rotate_register[0], 13)
    1068:	0025      	movs	r5, r4
    106a:	260d      	movs	r6, #13
    106c:	41f5      	rors	r5, r6
    106e:	0022      	movs	r2, r4
    1070:	3e0b      	subs	r6, #11
    1072:	41f2      	rors	r2, r6
    1074:	406a      	eors	r2, r5
                 ^ rotate_right(rotate_register[0], 22);
    1076:	0025      	movs	r5, r4
    1078:	4656      	mov	r6, sl
    107a:	41f5      	rors	r5, r6
            s0 = rotate_right(rotate_register[0], 2)
    107c:	406a      	eors	r2, r5
                  ^ (rotate_register[0] & rotate_register[2])
    107e:	4665      	mov	r5, ip
    1080:	407d      	eors	r5, r7
    1082:	4025      	ands	r5, r4
                  ^ (rotate_register[1] & rotate_register[2]);
    1084:	4666      	mov	r6, ip
    1086:	403e      	ands	r6, r7
            maj = (rotate_register[0] & rotate_register[1])
    1088:	4075      	eors	r5, r6
            t2 = s0 + maj;
    108a:	1952      	adds	r2, r2, r5
            rotate_register[0] = t1 + t2;
    108c:	18d2      	adds	r2, r2, r3
    108e:	3104      	adds	r1, #4
            rotate_register[7] = rotate_register[6];
    1090:	9b01      	ldr	r3, [sp, #4]
            rotate_register[3] = rotate_register[2];
    1092:	4665      	mov	r5, ip
    1094:	9503      	str	r5, [sp, #12]
        for (i = 0; i < SHA256_BLOCK_SIZE; i++)
    1096:	2580      	movs	r5, #128	; 0x80
    1098:	006d      	lsls	r5, r5, #1
    109a:	42a9      	cmp	r1, r5
    109c:	d1bf      	bne.n	101e <sw_sha256_process+0x2a>
    109e:	003d      	movs	r5, r7
    10a0:	4667      	mov	r7, ip
    10a2:	9b08      	ldr	r3, [sp, #32]
    10a4:	469c      	mov	ip, r3
    10a6:	4659      	mov	r1, fp
    10a8:	920c      	str	r2, [sp, #48]	; 0x30
    10aa:	940d      	str	r4, [sp, #52]	; 0x34
    10ac:	950e      	str	r5, [sp, #56]	; 0x38
    10ae:	9110      	str	r1, [sp, #64]	; 0x40
    10b0:	9011      	str	r0, [sp, #68]	; 0x44
    10b2:	9b02      	ldr	r3, [sp, #8]
    10b4:	9312      	str	r3, [sp, #72]	; 0x48
    10b6:	9b01      	ldr	r3, [sp, #4]
    10b8:	9313      	str	r3, [sp, #76]	; 0x4c
    10ba:	970f      	str	r7, [sp, #60]	; 0x3c
    10bc:	4663      	mov	r3, ip
    10be:	9905      	ldr	r1, [sp, #20]
    10c0:	9807      	ldr	r0, [sp, #28]
        }

        // Add the hash of this block to current result.
        for (i = 0; i < 8; i++)
        {
            ctx->hash[i] += rotate_register[i];
    10c2:	c904      	ldmia	r1!, {r2}
    10c4:	681c      	ldr	r4, [r3, #0]
    10c6:	46a4      	mov	ip, r4
    10c8:	4462      	add	r2, ip
    10ca:	c304      	stmia	r3!, {r2}
        for (i = 0; i < 8; i++)
    10cc:	4283      	cmp	r3, r0
    10ce:	d1f8      	bne.n	10c2 <sw_sha256_process+0xce>
    10d0:	9b06      	ldr	r3, [sp, #24]
    for (block = 0; block < block_count; block++)
    10d2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    10d4:	429a      	cmp	r2, r3
    10d6:	d059      	beq.n	118c <sw_sha256_process+0x198>
    10d8:	a814      	add	r0, sp, #80	; 0x50
    10da:	2240      	movs	r2, #64	; 0x40
    10dc:	4694      	mov	ip, r2
    10de:	449c      	add	ip, r3
    10e0:	4662      	mov	r2, ip
    10e2:	4664      	mov	r4, ip
    10e4:	9206      	str	r2, [sp, #24]
{
    10e6:	0002      	movs	r2, r0
            w_union.w_byte[i + 3] = cur_msg_block[i + 0];
    10e8:	7819      	ldrb	r1, [r3, #0]
    10ea:	70d1      	strb	r1, [r2, #3]
            w_union.w_byte[i + 2] = cur_msg_block[i + 1];
    10ec:	7859      	ldrb	r1, [r3, #1]
    10ee:	7091      	strb	r1, [r2, #2]
            w_union.w_byte[i + 1] = cur_msg_block[i + 2];
    10f0:	7899      	ldrb	r1, [r3, #2]
    10f2:	7051      	strb	r1, [r2, #1]
            w_union.w_byte[i + 0] = cur_msg_block[i + 3];
    10f4:	78d9      	ldrb	r1, [r3, #3]
    10f6:	7011      	strb	r1, [r2, #0]
    10f8:	3304      	adds	r3, #4
    10fa:	3204      	adds	r2, #4
        for (i = 0; i < SHA256_BLOCK_SIZE; i += 4)
    10fc:	42a3      	cmp	r3, r4
    10fe:	d1f3      	bne.n	10e8 <sw_sha256_process+0xf4>
            word_value = w_union.w_word[w_index - 15];
    1100:	6842      	ldr	r2, [r0, #4]
            word_value = w_union.w_word[w_index - 2];
    1102:	6b81      	ldr	r1, [r0, #56]	; 0x38
            s0 = rotate_right(word_value, 7) ^ rotate_right(word_value, 18) ^ (word_value >> 3);
    1104:	0013      	movs	r3, r2
    1106:	2407      	movs	r4, #7
    1108:	41e3      	rors	r3, r4
    110a:	0014      	movs	r4, r2
    110c:	2512      	movs	r5, #18
    110e:	41ec      	rors	r4, r5
    1110:	4063      	eors	r3, r4
    1112:	08d2      	lsrs	r2, r2, #3
    1114:	4053      	eors	r3, r2
            w_union.w_word[w_index] = w_union.w_word[w_index - 16] + s0 + w_union.w_word[w_index - 7] + s1;
    1116:	6802      	ldr	r2, [r0, #0]
    1118:	6a44      	ldr	r4, [r0, #36]	; 0x24
    111a:	46a4      	mov	ip, r4
    111c:	4462      	add	r2, ip
    111e:	189b      	adds	r3, r3, r2
            s1 = rotate_right(word_value, 17) ^ rotate_right(word_value, 19) ^ (word_value >> 10);
    1120:	000a      	movs	r2, r1
    1122:	2411      	movs	r4, #17
    1124:	41e2      	rors	r2, r4
    1126:	000c      	movs	r4, r1
    1128:	3501      	adds	r5, #1
    112a:	41ec      	rors	r4, r5
    112c:	4062      	eors	r2, r4
    112e:	0a89      	lsrs	r1, r1, #10
    1130:	404a      	eors	r2, r1
            w_union.w_word[w_index] = w_union.w_word[w_index - 16] + s0 + w_union.w_word[w_index - 7] + s1;
    1132:	189b      	adds	r3, r3, r2
    1134:	6403      	str	r3, [r0, #64]	; 0x40
    1136:	3004      	adds	r0, #4
        while (w_index < SHA256_BLOCK_SIZE)
    1138:	ab44      	add	r3, sp, #272	; 0x110
    113a:	4298      	cmp	r0, r3
    113c:	d1e0      	bne.n	1100 <sw_sha256_process+0x10c>
    113e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    1140:	2288      	movs	r2, #136	; 0x88
    1142:	4690      	mov	r8, r2
    1144:	4443      	add	r3, r8
    1146:	469c      	mov	ip, r3
    1148:	ab0c      	add	r3, sp, #48	; 0x30
    114a:	9305      	str	r3, [sp, #20]
    114c:	4662      	mov	r2, ip
    114e:	9809      	ldr	r0, [sp, #36]	; 0x24
            rotate_register[i] = ctx->hash[i];
    1150:	ca02      	ldmia	r2!, {r1}
    1152:	c302      	stmia	r3!, {r1}
        for (i = 0; i < 8; i++)
    1154:	4282      	cmp	r2, r0
    1156:	d1fb      	bne.n	1150 <sw_sha256_process+0x15c>
    1158:	9207      	str	r2, [sp, #28]
    115a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    115c:	9b12      	ldr	r3, [sp, #72]	; 0x48
    115e:	9301      	str	r3, [sp, #4]
    1160:	9b11      	ldr	r3, [sp, #68]	; 0x44
    1162:	9302      	str	r3, [sp, #8]
    1164:	9810      	ldr	r0, [sp, #64]	; 0x40
    1166:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    1168:	4698      	mov	r8, r3
    116a:	9f0e      	ldr	r7, [sp, #56]	; 0x38
    116c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    116e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    1170:	2500      	movs	r5, #0
            t1 = rotate_register[7] + s1 + ch + k[i] + w_union.w_word[i];
    1172:	a914      	add	r1, sp, #80	; 0x50
    1174:	9104      	str	r1, [sp, #16]
                 ^ rotate_right(rotate_register[0], 22);
    1176:	2116      	movs	r1, #22
    1178:	468a      	mov	sl, r1
    117a:	4661      	mov	r1, ip
    117c:	9108      	str	r1, [sp, #32]
    117e:	46bc      	mov	ip, r7
    1180:	001f      	movs	r7, r3
    1182:	0013      	movs	r3, r2
    1184:	0029      	movs	r1, r5
    1186:	4642      	mov	r2, r8
    1188:	9203      	str	r2, [sp, #12]
    118a:	e74f      	b.n	102c <sw_sha256_process+0x38>
        }
    }
}
    118c:	b055      	add	sp, #340	; 0x154
    118e:	bc3c      	pop	{r2, r3, r4, r5}
    1190:	4690      	mov	r8, r2
    1192:	4699      	mov	r9, r3
    1194:	46a2      	mov	sl, r4
    1196:	46ab      	mov	fp, r5
    1198:	bdf0      	pop	{r4, r5, r6, r7, pc}
    119a:	46c0      	nop			; (mov r8, r8)
    119c:	0001ea84 	.word	0x0001ea84

000011a0 <sw_sha256_init>:
 *
 * \param[in] ctx          SHA256 hash context
 */

void sw_sha256_init(sw_sha256_ctx* ctx)
{
    11a0:	b510      	push	{r4, lr}
    11a2:	0004      	movs	r4, r0
        0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a,
        0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19
    };
    int i;

    memset(ctx, 0, sizeof(*ctx));
    11a4:	22a8      	movs	r2, #168	; 0xa8
    11a6:	2100      	movs	r1, #0
    11a8:	4b0d      	ldr	r3, [pc, #52]	; (11e0 <sw_sha256_init+0x40>)
    11aa:	4798      	blx	r3
    for (i = 0; i < 8; i++)
    {
        ctx->hash[i] = hash_init[i];
    11ac:	4a0d      	ldr	r2, [pc, #52]	; (11e4 <sw_sha256_init+0x44>)
    11ae:	2388      	movs	r3, #136	; 0x88
    11b0:	50e2      	str	r2, [r4, r3]
    11b2:	4a0d      	ldr	r2, [pc, #52]	; (11e8 <sw_sha256_init+0x48>)
    11b4:	3304      	adds	r3, #4
    11b6:	50e2      	str	r2, [r4, r3]
    11b8:	4a0c      	ldr	r2, [pc, #48]	; (11ec <sw_sha256_init+0x4c>)
    11ba:	3304      	adds	r3, #4
    11bc:	50e2      	str	r2, [r4, r3]
    11be:	4a0c      	ldr	r2, [pc, #48]	; (11f0 <sw_sha256_init+0x50>)
    11c0:	3304      	adds	r3, #4
    11c2:	50e2      	str	r2, [r4, r3]
    11c4:	4a0b      	ldr	r2, [pc, #44]	; (11f4 <sw_sha256_init+0x54>)
    11c6:	3304      	adds	r3, #4
    11c8:	50e2      	str	r2, [r4, r3]
    11ca:	4a0b      	ldr	r2, [pc, #44]	; (11f8 <sw_sha256_init+0x58>)
    11cc:	3304      	adds	r3, #4
    11ce:	50e2      	str	r2, [r4, r3]
    11d0:	4a0a      	ldr	r2, [pc, #40]	; (11fc <sw_sha256_init+0x5c>)
    11d2:	3304      	adds	r3, #4
    11d4:	50e2      	str	r2, [r4, r3]
    11d6:	4a0a      	ldr	r2, [pc, #40]	; (1200 <sw_sha256_init+0x60>)
    11d8:	3304      	adds	r3, #4
    11da:	50e2      	str	r2, [r4, r3]
    }
}
    11dc:	bd10      	pop	{r4, pc}
    11de:	46c0      	nop			; (mov r8, r8)
    11e0:	00019ead 	.word	0x00019ead
    11e4:	6a09e667 	.word	0x6a09e667
    11e8:	bb67ae85 	.word	0xbb67ae85
    11ec:	3c6ef372 	.word	0x3c6ef372
    11f0:	a54ff53a 	.word	0xa54ff53a
    11f4:	510e527f 	.word	0x510e527f
    11f8:	9b05688c 	.word	0x9b05688c
    11fc:	1f83d9ab 	.word	0x1f83d9ab
    1200:	5be0cd19 	.word	0x5be0cd19

00001204 <sw_sha256_update>:
 * \param[in] ctx          SHA256 hash context
 * \param[in] msg          Raw blocks to be processed
 * \param[in] msg_size     The size of the message passed
 */
void sw_sha256_update(sw_sha256_ctx* ctx, const uint8_t* msg, uint32_t msg_size)
{
    1204:	b5f0      	push	{r4, r5, r6, r7, lr}
    1206:	46d6      	mov	lr, sl
    1208:	464f      	mov	r7, r9
    120a:	b580      	push	{r7, lr}
    120c:	b083      	sub	sp, #12
    120e:	0006      	movs	r6, r0
    1210:	000d      	movs	r5, r1
    1212:	0014      	movs	r4, r2
    uint32_t block_count;
    uint32_t rem_size = SHA256_BLOCK_SIZE - ctx->block_size;
    1214:	6840      	ldr	r0, [r0, #4]
    1216:	2740      	movs	r7, #64	; 0x40
    1218:	1a3f      	subs	r7, r7, r0
    uint32_t copy_size = msg_size > rem_size ? rem_size : msg_size;
    121a:	4297      	cmp	r7, r2
    121c:	d900      	bls.n	1220 <sw_sha256_update+0x1c>
    121e:	0017      	movs	r7, r2

    // Copy data into current block
    memcpy(&ctx->block[ctx->block_size], msg, copy_size);
    1220:	3008      	adds	r0, #8
    1222:	1830      	adds	r0, r6, r0
    1224:	003a      	movs	r2, r7
    1226:	0029      	movs	r1, r5
    1228:	4b17      	ldr	r3, [pc, #92]	; (1288 <sw_sha256_update+0x84>)
    122a:	4798      	blx	r3

    if (ctx->block_size + msg_size < SHA256_BLOCK_SIZE)
    122c:	6873      	ldr	r3, [r6, #4]
    122e:	18e3      	adds	r3, r4, r3
    1230:	2b3f      	cmp	r3, #63	; 0x3f
    1232:	d805      	bhi.n	1240 <sw_sha256_update+0x3c>
    {
        // Not enough data to finish off the current block
        ctx->block_size += msg_size;
    1234:	6073      	str	r3, [r6, #4]

    // Save any remaining data
    ctx->total_msg_size += (block_count + 1) * SHA256_BLOCK_SIZE;
    ctx->block_size = msg_size % SHA256_BLOCK_SIZE;
    memcpy(ctx->block, &msg[copy_size + block_count * SHA256_BLOCK_SIZE], ctx->block_size);
}
    1236:	b003      	add	sp, #12
    1238:	bc0c      	pop	{r2, r3}
    123a:	4691      	mov	r9, r2
    123c:	469a      	mov	sl, r3
    123e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    sw_sha256_process(ctx, ctx->block, 1);
    1240:	2308      	movs	r3, #8
    1242:	469c      	mov	ip, r3
    1244:	44b4      	add	ip, r6
    1246:	4663      	mov	r3, ip
    1248:	2201      	movs	r2, #1
    124a:	9301      	str	r3, [sp, #4]
    124c:	4661      	mov	r1, ip
    124e:	0030      	movs	r0, r6
    1250:	4b0e      	ldr	r3, [pc, #56]	; (128c <sw_sha256_update+0x88>)
    1252:	469a      	mov	sl, r3
    1254:	4798      	blx	r3
    msg_size -= copy_size; // Adjust to the remaining message bytes
    1256:	1be4      	subs	r4, r4, r7
    block_count = msg_size / SHA256_BLOCK_SIZE;
    1258:	09a2      	lsrs	r2, r4, #6
    125a:	4691      	mov	r9, r2
    sw_sha256_process(ctx, &msg[copy_size], block_count);
    125c:	19e9      	adds	r1, r5, r7
    125e:	0030      	movs	r0, r6
    1260:	47d0      	blx	sl
    ctx->total_msg_size += (block_count + 1) * SHA256_BLOCK_SIZE;
    1262:	464a      	mov	r2, r9
    1264:	1c53      	adds	r3, r2, #1
    1266:	019b      	lsls	r3, r3, #6
    1268:	6832      	ldr	r2, [r6, #0]
    126a:	4694      	mov	ip, r2
    126c:	4463      	add	r3, ip
    126e:	6033      	str	r3, [r6, #0]
    ctx->block_size = msg_size % SHA256_BLOCK_SIZE;
    1270:	233f      	movs	r3, #63	; 0x3f
    1272:	001a      	movs	r2, r3
    1274:	4022      	ands	r2, r4
    1276:	6072      	str	r2, [r6, #4]
    memcpy(ctx->block, &msg[copy_size + block_count * SHA256_BLOCK_SIZE], ctx->block_size);
    1278:	0021      	movs	r1, r4
    127a:	4399      	bics	r1, r3
    127c:	19c9      	adds	r1, r1, r7
    127e:	1869      	adds	r1, r5, r1
    1280:	9801      	ldr	r0, [sp, #4]
    1282:	4b01      	ldr	r3, [pc, #4]	; (1288 <sw_sha256_update+0x84>)
    1284:	4798      	blx	r3
    1286:	e7d6      	b.n	1236 <sw_sha256_update+0x32>
    1288:	00019d89 	.word	0x00019d89
    128c:	00000ff5 	.word	0x00000ff5

00001290 <sw_sha256_final>:
/** \brief completes the final SHA256 calculation and returns the final digest/hash
 * \param[in]  ctx     ptr to context data structure
 * \param[out] digest  receives the computed digest of the SHA 256
 */
void sw_sha256_final(sw_sha256_ctx* ctx, uint8_t digest[SHA256_DIGEST_SIZE])
{
    1290:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1292:	0005      	movs	r5, r0
    1294:	000c      	movs	r4, r1
    int i, j;
    uint32_t msg_size_bits;
    uint32_t pad_zero_count;

    // Calculate the total message size in bits
    ctx->total_msg_size += ctx->block_size;
    1296:	6840      	ldr	r0, [r0, #4]
    1298:	682b      	ldr	r3, [r5, #0]
    129a:	18c7      	adds	r7, r0, r3
    129c:	602f      	str	r7, [r5, #0]
    msg_size_bits = ctx->total_msg_size * 8;
    129e:	00ff      	lsls	r7, r7, #3

    // Calculate the number of padding zero bytes required between the 1 bit byte and the 64 bit message size in bits.
    pad_zero_count = (SHA256_BLOCK_SIZE - ((ctx->block_size + 9) % SHA256_BLOCK_SIZE)) % SHA256_BLOCK_SIZE;
    12a0:	2309      	movs	r3, #9
    12a2:	425b      	negs	r3, r3
    12a4:	1a1b      	subs	r3, r3, r0
    12a6:	263f      	movs	r6, #63	; 0x3f
    12a8:	401e      	ands	r6, r3

    // Append a single 1 bit
    ctx->block[ctx->block_size++] = 0x80;
    12aa:	1c43      	adds	r3, r0, #1
    12ac:	606b      	str	r3, [r5, #4]
    12ae:	182b      	adds	r3, r5, r0
    12b0:	2280      	movs	r2, #128	; 0x80
    12b2:	721a      	strb	r2, [r3, #8]

    // Add padding zeros plus upper 4 bytes of total msg size in bits (only supporting 32bit message bit counts)
    memset(&ctx->block[ctx->block_size], 0, pad_zero_count + 4);
    12b4:	1d32      	adds	r2, r6, #4
    12b6:	3009      	adds	r0, #9
    12b8:	1828      	adds	r0, r5, r0
    12ba:	2100      	movs	r1, #0
    12bc:	4b13      	ldr	r3, [pc, #76]	; (130c <sw_sha256_final+0x7c>)
    12be:	4798      	blx	r3
    ctx->block_size += pad_zero_count + 4;
    12c0:	686b      	ldr	r3, [r5, #4]
    12c2:	469c      	mov	ip, r3
    12c4:	4466      	add	r6, ip

    // Add the total message size in bits to the end of the current block. Technically this is
    // supposed to be 8 bytes. This shortcut will reduce the max message size to 536,870,911 bytes.
    ctx->block[ctx->block_size++] = (uint8_t)(msg_size_bits >> 24);
    12c6:	19ab      	adds	r3, r5, r6
    12c8:	0e3a      	lsrs	r2, r7, #24
    12ca:	731a      	strb	r2, [r3, #12]
    ctx->block[ctx->block_size++] = (uint8_t)(msg_size_bits >> 16);
    12cc:	0c3a      	lsrs	r2, r7, #16
    12ce:	735a      	strb	r2, [r3, #13]
    ctx->block[ctx->block_size++] = (uint8_t)(msg_size_bits >> 8);
    12d0:	0a3a      	lsrs	r2, r7, #8
    12d2:	739a      	strb	r2, [r3, #14]
    ctx->block[ctx->block_size++] = (uint8_t)(msg_size_bits >> 0);
    12d4:	0032      	movs	r2, r6
    12d6:	3208      	adds	r2, #8
    12d8:	606a      	str	r2, [r5, #4]
    12da:	73df      	strb	r7, [r3, #15]

    sw_sha256_process(ctx, ctx->block, ctx->block_size / SHA256_BLOCK_SIZE);
    12dc:	0992      	lsrs	r2, r2, #6
    12de:	0029      	movs	r1, r5
    12e0:	3108      	adds	r1, #8
    12e2:	0028      	movs	r0, r5
    12e4:	4b0a      	ldr	r3, [pc, #40]	; (1310 <sw_sha256_final+0x80>)
    12e6:	4798      	blx	r3
    12e8:	0028      	movs	r0, r5
    12ea:	3088      	adds	r0, #136	; 0x88
    12ec:	35a8      	adds	r5, #168	; 0xa8
    12ee:	e003      	b.n	12f8 <sw_sha256_final+0x68>
    12f0:	3004      	adds	r0, #4
    12f2:	3404      	adds	r4, #4

    // All blocks have been processed.
    // Concatenate the hashes to produce digest, MSB of every hash first.
    for (i = 0; i < 8; i++)
    12f4:	42a8      	cmp	r0, r5
    12f6:	d008      	beq.n	130a <sw_sha256_final+0x7a>
{
    12f8:	2303      	movs	r3, #3
    {
        for (j = sizeof(int32_t) - 1; j >= 0; j--, ctx->hash[i] >>= 8)
        {
            digest[i * sizeof(int32_t) + j] = ctx->hash[i] & 0xFF;
    12fa:	7802      	ldrb	r2, [r0, #0]
    12fc:	54e2      	strb	r2, [r4, r3]
        for (j = sizeof(int32_t) - 1; j >= 0; j--, ctx->hash[i] >>= 8)
    12fe:	6802      	ldr	r2, [r0, #0]
    1300:	0a12      	lsrs	r2, r2, #8
    1302:	6002      	str	r2, [r0, #0]
    1304:	3b01      	subs	r3, #1
    1306:	d2f8      	bcs.n	12fa <sw_sha256_final+0x6a>
    1308:	e7f2      	b.n	12f0 <sw_sha256_final+0x60>
        }
    }
}
    130a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    130c:	00019ead 	.word	0x00019ead
    1310:	00000ff5 	.word	0x00000ff5

00001314 <hal_iface_init>:
    // The key here is to provide the flexibility to include just the types of interfaces you want/need without breaking the
    // object model.  The former is needed so in an embedded, constrained memory environment, you don't have to pay the price
    // (in terms of memory) for interfaces you don't use in your application.
    ATCA_STATUS status = ATCA_COMM_FAIL;

    switch (cfg->iface_type)
    1314:	7803      	ldrb	r3, [r0, #0]
    ATCA_STATUS status = ATCA_COMM_FAIL;
    1316:	20f0      	movs	r0, #240	; 0xf0
    switch (cfg->iface_type)
    1318:	2b00      	cmp	r3, #0
    131a:	d000      	beq.n	131e <hal_iface_init+0xa>
        break;
    default:
        break;
    }
    return status;
}
    131c:	4770      	bx	lr
        hal->halinit = &hal_i2c_init;
    131e:	4b0a      	ldr	r3, [pc, #40]	; (1348 <hal_iface_init+0x34>)
    1320:	600b      	str	r3, [r1, #0]
        hal->halpostinit = &hal_i2c_post_init;
    1322:	4b0a      	ldr	r3, [pc, #40]	; (134c <hal_iface_init+0x38>)
    1324:	604b      	str	r3, [r1, #4]
        hal->halreceive = &hal_i2c_receive;
    1326:	4b0a      	ldr	r3, [pc, #40]	; (1350 <hal_iface_init+0x3c>)
    1328:	60cb      	str	r3, [r1, #12]
        hal->halsend = &hal_i2c_send;
    132a:	4b0a      	ldr	r3, [pc, #40]	; (1354 <hal_iface_init+0x40>)
    132c:	608b      	str	r3, [r1, #8]
        hal->halsleep = &hal_i2c_sleep;
    132e:	4b0a      	ldr	r3, [pc, #40]	; (1358 <hal_iface_init+0x44>)
    1330:	618b      	str	r3, [r1, #24]
        hal->halwake = &hal_i2c_wake;
    1332:	4b0a      	ldr	r3, [pc, #40]	; (135c <hal_iface_init+0x48>)
    1334:	610b      	str	r3, [r1, #16]
        hal->halidle = &hal_i2c_idle;
    1336:	4b0a      	ldr	r3, [pc, #40]	; (1360 <hal_iface_init+0x4c>)
    1338:	614b      	str	r3, [r1, #20]
        hal->halrelease = &hal_i2c_release;
    133a:	4b0a      	ldr	r3, [pc, #40]	; (1364 <hal_iface_init+0x50>)
    133c:	61cb      	str	r3, [r1, #28]
        hal->hal_data = NULL;
    133e:	2300      	movs	r3, #0
    1340:	620b      	str	r3, [r1, #32]
        status = ATCA_SUCCESS;
    1342:	2000      	movs	r0, #0
        break;
    1344:	e7ea      	b.n	131c <hal_iface_init+0x8>
    1346:	46c0      	nop			; (mov r8, r8)
    1348:	000013d9 	.word	0x000013d9
    134c:	00001585 	.word	0x00001585
    1350:	000015dd 	.word	0x000015dd
    1354:	00001589 	.word	0x00001589
    1358:	000018d1 	.word	0x000018d1
    135c:	00001799 	.word	0x00001799
    1360:	0000187d 	.word	0x0000187d
    1364:	00001925 	.word	0x00001925

00001368 <hal_iface_release>:
 * \param[in] hal_data - pointer to opaque hal data maintained by HAL implementation for this interface type
 *  \return ATCA_SUCCESS on success, otherwise an error code.
 */

ATCA_STATUS hal_iface_release(ATCAIfaceType iface_type, void *hal_data)
{
    1368:	b510      	push	{r4, lr}
    ATCA_STATUS status = ATCA_GEN_FAIL;

    switch (iface_type)
    136a:	2800      	cmp	r0, #0
    136c:	d001      	beq.n	1372 <hal_iface_release+0xa>
    ATCA_STATUS status = ATCA_GEN_FAIL;
    136e:	20e1      	movs	r0, #225	; 0xe1
    default:
        break;
    }

    return status;
}
    1370:	bd10      	pop	{r4, pc}
        status = hal_i2c_release(hal_data);
    1372:	0008      	movs	r0, r1
    1374:	4b01      	ldr	r3, [pc, #4]	; (137c <hal_iface_release+0x14>)
    1376:	4798      	blx	r3
        break;
    1378:	e7fa      	b.n	1370 <hal_iface_release+0x8>
    137a:	46c0      	nop			; (mov r8, r8)
    137c:	00001925 	.word	0x00001925

00001380 <hal_check_wake>:
 * \param[in] response_size  Size of the response to check.
 * \return ATCA_SUCCESS for expected wake, ATCA_STATUS_SELFTEST_ERROR if the
 *         power on self test failed, ATCA_WAKE_FAILED for other failures.
 */
ATCA_STATUS hal_check_wake(const uint8_t* response, int response_size)
{
    1380:	b510      	push	{r4, lr}
    1382:	b082      	sub	sp, #8
    1384:	0004      	movs	r4, r0
    const uint8_t expected_response[4] = { 0x04, 0x11, 0x33, 0x43 };
    1386:	4b0f      	ldr	r3, [pc, #60]	; (13c4 <hal_check_wake+0x44>)
    1388:	681a      	ldr	r2, [r3, #0]
    138a:	9201      	str	r2, [sp, #4]
    uint8_t selftest_fail_resp[4] = { 0x04, 0x07, 0xC4, 0x40 };
    138c:	685b      	ldr	r3, [r3, #4]
    138e:	9300      	str	r3, [sp, #0]

    if (response_size != 4)
    {
        return ATCA_WAKE_FAILED;
    1390:	20d0      	movs	r0, #208	; 0xd0
    if (response_size != 4)
    1392:	2904      	cmp	r1, #4
    1394:	d001      	beq.n	139a <hal_check_wake+0x1a>
    if (memcmp(response, selftest_fail_resp, 4) == 0)
    {
        return ATCA_STATUS_SELFTEST_ERROR;
    }
    return ATCA_WAKE_FAILED;
    1396:	b002      	add	sp, #8
    1398:	bd10      	pop	{r4, pc}
    if (memcmp(response, expected_response, 4) == 0)
    139a:	2204      	movs	r2, #4
    139c:	a901      	add	r1, sp, #4
    139e:	0020      	movs	r0, r4
    13a0:	4b09      	ldr	r3, [pc, #36]	; (13c8 <hal_check_wake+0x48>)
    13a2:	4798      	blx	r3
    13a4:	0003      	movs	r3, r0
        return ATCA_SUCCESS;
    13a6:	2000      	movs	r0, #0
    if (memcmp(response, expected_response, 4) == 0)
    13a8:	2b00      	cmp	r3, #0
    13aa:	d0f4      	beq.n	1396 <hal_check_wake+0x16>
    if (memcmp(response, selftest_fail_resp, 4) == 0)
    13ac:	2204      	movs	r2, #4
    13ae:	4669      	mov	r1, sp
    13b0:	0020      	movs	r0, r4
    13b2:	4b05      	ldr	r3, [pc, #20]	; (13c8 <hal_check_wake+0x48>)
    13b4:	4798      	blx	r3
    13b6:	0003      	movs	r3, r0
        return ATCA_STATUS_SELFTEST_ERROR;
    13b8:	20d7      	movs	r0, #215	; 0xd7
    if (memcmp(response, selftest_fail_resp, 4) == 0)
    13ba:	2b00      	cmp	r3, #0
    13bc:	d0eb      	beq.n	1396 <hal_check_wake+0x16>
    return ATCA_WAKE_FAILED;
    13be:	3807      	subs	r0, #7
    13c0:	e7e9      	b.n	1396 <hal_check_wake+0x16>
    13c2:	46c0      	nop			; (mov r8, r8)
    13c4:	0001eb84 	.word	0x0001eb84
    13c8:	00019d3d 	.word	0x00019d3d

000013cc <_i2c_master_wait_for_sync>:
{
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
    13cc:	6801      	ldr	r1, [r0, #0]

#if defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_1)
	return (i2c_hw->STATUS.reg & SERCOM_I2CM_STATUS_SYNCBUSY);
#elif defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_2)
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
    13ce:	2207      	movs	r2, #7
    13d0:	69cb      	ldr	r3, [r1, #28]
		const struct i2c_master_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (i2c_master_is_syncing(module)) {
    13d2:	421a      	tst	r2, r3
    13d4:	d1fc      	bne.n	13d0 <_i2c_master_wait_for_sync+0x4>
		/* Wait for I2C module to sync. */
	}
}
    13d6:	4770      	bx	lr

000013d8 <hal_i2c_init>:
 * \param[in] hal - opaque ptr to HAL data
 * \param[in] cfg - interface configuration
 * \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS hal_i2c_init(void *hal, ATCAIfaceCfg *cfg)
{
    13d8:	b5f0      	push	{r4, r5, r6, r7, lr}
    13da:	46de      	mov	lr, fp
    13dc:	464f      	mov	r7, r9
    13de:	4646      	mov	r6, r8
    13e0:	b5c0      	push	{r6, r7, lr}
    13e2:	b082      	sub	sp, #8
    13e4:	4681      	mov	r9, r0
    13e6:	000d      	movs	r5, r1
    if (cfg->atcai2c.bus >= MAX_I2C_BUSES)
    13e8:	794c      	ldrb	r4, [r1, #5]
    {
        return ATCA_COMM_FAIL;
    13ea:	20f0      	movs	r0, #240	; 0xf0
    if (cfg->atcai2c.bus >= MAX_I2C_BUSES)
    13ec:	2c05      	cmp	r4, #5
    13ee:	d905      	bls.n	13fc <hal_i2c_init+0x24>
    }

    ((ATCAHAL_t*)hal)->hal_data = data;

    return ATCA_SUCCESS;
}
    13f0:	b002      	add	sp, #8
    13f2:	bc1c      	pop	{r2, r3, r4}
    13f4:	4690      	mov	r8, r2
    13f6:	4699      	mov	r9, r3
    13f8:	46a3      	mov	fp, r4
    13fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ATCAI2CMaster_t* data = &i2c_hal_data[cfg->atcai2c.bus];
    13fc:	9400      	str	r4, [sp, #0]
    13fe:	2734      	movs	r7, #52	; 0x34
    1400:	4367      	muls	r7, r4
    1402:	4b50      	ldr	r3, [pc, #320]	; (1544 <hal_i2c_init+0x16c>)
    1404:	4698      	mov	r8, r3
    1406:	44b8      	add	r8, r7
    if (data->ref_ct <= 0)
    1408:	4643      	mov	r3, r8
    140a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    140c:	2b00      	cmp	r3, #0
    140e:	dd0a      	ble.n	1426 <hal_i2c_init+0x4e>
        data->ref_ct++;
    1410:	2234      	movs	r2, #52	; 0x34
    1412:	4362      	muls	r2, r4
    1414:	4c4b      	ldr	r4, [pc, #300]	; (1544 <hal_i2c_init+0x16c>)
    1416:	18a4      	adds	r4, r4, r2
    1418:	3301      	adds	r3, #1
    141a:	62e3      	str	r3, [r4, #44]	; 0x2c
    ((ATCAHAL_t*)hal)->hal_data = data;
    141c:	464b      	mov	r3, r9
    141e:	4642      	mov	r2, r8
    1420:	621a      	str	r2, [r3, #32]
    return ATCA_SUCCESS;
    1422:	2000      	movs	r0, #0
    1424:	e7e4      	b.n	13f0 <hal_i2c_init+0x18>
{
	/*Sanity check argument */
	Assert(config);
	config->baud_rate        = I2C_MASTER_BAUD_RATE_100KHZ;
#ifdef FEATURE_I2C_FAST_MODE_PLUS_AND_HIGH_SPEED
	config->baud_rate_high_speed = I2C_MASTER_BAUD_RATE_3400KHZ;
    1426:	4e48      	ldr	r6, [pc, #288]	; (1548 <hal_i2c_init+0x170>)
    1428:	4b48      	ldr	r3, [pc, #288]	; (154c <hal_i2c_init+0x174>)
    142a:	6073      	str	r3, [r6, #4]
	config->transfer_speed       = I2C_MASTER_SPEED_STANDARD_AND_FAST;
    142c:	2300      	movs	r3, #0
    142e:	60b3      	str	r3, [r6, #8]
#endif
	config->generator_source = GCLK_GENERATOR_0;
    1430:	7333      	strb	r3, [r6, #12]
	config->run_in_standby   = false;
    1432:	7633      	strb	r3, [r6, #24]
	config->start_hold_time  = I2C_MASTER_START_HOLD_TIME_300NS_600NS;
    1434:	2280      	movs	r2, #128	; 0x80
    1436:	0392      	lsls	r2, r2, #14
    1438:	6132      	str	r2, [r6, #16]
	config->buffer_timeout   = 65535;
    143a:	2201      	movs	r2, #1
    143c:	4252      	negs	r2, r2
    143e:	82f2      	strh	r2, [r6, #22]
	config->unknown_bus_state_timeout = 65535;
	config->pinmux_pad0      = PINMUX_DEFAULT;
    1440:	61f3      	str	r3, [r6, #28]
	config->pinmux_pad1      = PINMUX_DEFAULT;
    1442:	6233      	str	r3, [r6, #32]
	config->scl_low_timeout  = false;
    1444:	3225      	adds	r2, #37	; 0x25
    1446:	54b3      	strb	r3, [r6, r2]
	config->inactive_timeout = I2C_MASTER_INACTIVE_TIMEOUT_DISABLED;
    1448:	62b3      	str	r3, [r6, #40]	; 0x28
#ifdef FEATURE_I2C_SCL_STRETCH_MODE
	config->scl_stretch_only_after_ack_bit = false;
    144a:	3208      	adds	r2, #8
    144c:	54b3      	strb	r3, [r6, r2]
#endif
#ifdef FEATURE_I2C_SCL_EXTEND_TIMEOUT
	config->slave_scl_low_extend_timeout   = false;
    144e:	3201      	adds	r2, #1
    1450:	54b3      	strb	r3, [r6, r2]
	config->master_scl_low_extend_timeout  = false;
    1452:	3201      	adds	r2, #1
    1454:	54b3      	strb	r3, [r6, r2]
#endif
	/* The typical value is 215ns */
	config->sda_scl_rise_time_ns = 215;
    1456:	33d7      	adds	r3, #215	; 0xd7
    1458:	8633      	strh	r3, [r6, #48]	; 0x30
        config_i2c_master.unknown_bus_state_timeout = 500;
    145a:	331e      	adds	r3, #30
    145c:	33ff      	adds	r3, #255	; 0xff
    145e:	82b3      	strh	r3, [r6, #20]
        config_i2c_master.baud_rate = cfg->atcai2c.baud / 1000;
    1460:	21fa      	movs	r1, #250	; 0xfa
    1462:	0089      	lsls	r1, r1, #2
    1464:	68a8      	ldr	r0, [r5, #8]
    1466:	4b3a      	ldr	r3, [pc, #232]	; (1550 <hal_i2c_init+0x178>)
    1468:	4798      	blx	r3
    146a:	6030      	str	r0, [r6, #0]
        switch (cfg->atcai2c.bus)
    146c:	796b      	ldrb	r3, [r5, #5]
    146e:	2b05      	cmp	r3, #5
    1470:	d866      	bhi.n	1540 <hal_i2c_init+0x168>
    1472:	009b      	lsls	r3, r3, #2
    1474:	4a37      	ldr	r2, [pc, #220]	; (1554 <hal_i2c_init+0x17c>)
    1476:	58d3      	ldr	r3, [r2, r3]
    1478:	469f      	mov	pc, r3
            data->i2c_sercom = SERCOM0;
    147a:	2334      	movs	r3, #52	; 0x34
    147c:	4363      	muls	r3, r4
    147e:	2184      	movs	r1, #132	; 0x84
    1480:	05c9      	lsls	r1, r1, #23
    1482:	4a30      	ldr	r2, [pc, #192]	; (1544 <hal_i2c_init+0x16c>)
    1484:	5099      	str	r1, [r3, r2]
		config_i2c_master.pinmux_pad0 = ATCAD_HOST_I2C_SERCOM_PINMUX_PAD0;
    1486:	4a30      	ldr	r2, [pc, #192]	; (1548 <hal_i2c_init+0x170>)
    1488:	4b33      	ldr	r3, [pc, #204]	; (1558 <hal_i2c_init+0x180>)
    148a:	61d3      	str	r3, [r2, #28]
		config_i2c_master.pinmux_pad1 = ATCAD_HOST_I2C_SERCOM_PINMUX_PAD1;
    148c:	4b33      	ldr	r3, [pc, #204]	; (155c <hal_i2c_init+0x184>)
    148e:	6213      	str	r3, [r2, #32]
        i2c_master_init(&data->i2c_master_instance, data->i2c_sercom, &config_i2c_master);
    1490:	4e2c      	ldr	r6, [pc, #176]	; (1544 <hal_i2c_init+0x16c>)
    1492:	3704      	adds	r7, #4
    1494:	19f3      	adds	r3, r6, r7
    1496:	2734      	movs	r7, #52	; 0x34
    1498:	4367      	muls	r7, r4
    149a:	59b9      	ldr	r1, [r7, r6]
    149c:	9301      	str	r3, [sp, #4]
    149e:	0018      	movs	r0, r3
    14a0:	4b2f      	ldr	r3, [pc, #188]	; (1560 <hal_i2c_init+0x188>)
    14a2:	4798      	blx	r3
{
	/* Sanity check of arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    14a4:	46b3      	mov	fp, r6
    14a6:	44bb      	add	fp, r7
    14a8:	465a      	mov	r2, fp
    14aa:	6857      	ldr	r7, [r2, #4]

	/* Timeout counter used to force bus state */
	uint32_t timeout_counter = 0;

	/* Wait for module to sync */
	_i2c_master_wait_for_sync(module);
    14ac:	9801      	ldr	r0, [sp, #4]
    14ae:	4b2d      	ldr	r3, [pc, #180]	; (1564 <hal_i2c_init+0x18c>)
    14b0:	4798      	blx	r3

	/* Enable module */
	i2c_module->CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
    14b2:	683b      	ldr	r3, [r7, #0]
    14b4:	2202      	movs	r2, #2
    14b6:	4313      	orrs	r3, r2
    14b8:	603b      	str	r3, [r7, #0]

#if I2C_MASTER_CALLBACK_MODE == true
	/* Enable module interrupts */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    14ba:	465b      	mov	r3, fp
    14bc:	6858      	ldr	r0, [r3, #4]
    14be:	4b2a      	ldr	r3, [pc, #168]	; (1568 <hal_i2c_init+0x190>)
    14c0:	4798      	blx	r3
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    14c2:	231f      	movs	r3, #31
    14c4:	4018      	ands	r0, r3
    14c6:	3b1e      	subs	r3, #30
    14c8:	4083      	lsls	r3, r0
    14ca:	4a28      	ldr	r2, [pc, #160]	; (156c <hal_i2c_init+0x194>)
    14cc:	6013      	str	r3, [r2, #0]
	uint32_t timeout_counter = 0;
    14ce:	2300      	movs	r3, #0
#endif
	/* Start timeout if bus state is unknown */
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
    14d0:	2110      	movs	r1, #16
		timeout_counter++;
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
    14d2:	2234      	movs	r2, #52	; 0x34
    14d4:	9e00      	ldr	r6, [sp, #0]
    14d6:	4356      	muls	r6, r2
    14d8:	4a1a      	ldr	r2, [pc, #104]	; (1544 <hal_i2c_init+0x16c>)
    14da:	4694      	mov	ip, r2
    14dc:	4466      	add	r6, ip
    14de:	360a      	adds	r6, #10
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
    14e0:	8b7a      	ldrh	r2, [r7, #26]
    14e2:	420a      	tst	r2, r1
    14e4:	d105      	bne.n	14f2 <hal_i2c_init+0x11a>
		timeout_counter++;
    14e6:	3301      	adds	r3, #1
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
    14e8:	8832      	ldrh	r2, [r6, #0]
    14ea:	4293      	cmp	r3, r2
    14ec:	d3f8      	bcc.n	14e0 <hal_i2c_init+0x108>
			/* Timeout, force bus state to idle */
			i2c_module->STATUS.reg = SERCOM_I2CM_STATUS_BUSSTATE(1);
    14ee:	2310      	movs	r3, #16
    14f0:	837b      	strh	r3, [r7, #26]
        data->bus_index = cfg->atcai2c.bus;
    14f2:	2334      	movs	r3, #52	; 0x34
    14f4:	4363      	muls	r3, r4
    14f6:	4c13      	ldr	r4, [pc, #76]	; (1544 <hal_i2c_init+0x16c>)
    14f8:	18e4      	adds	r4, r4, r3
    14fa:	796b      	ldrb	r3, [r5, #5]
    14fc:	6323      	str	r3, [r4, #48]	; 0x30
        data->ref_ct = 1;
    14fe:	2301      	movs	r3, #1
    1500:	62e3      	str	r3, [r4, #44]	; 0x2c
    1502:	e78b      	b.n	141c <hal_i2c_init+0x44>
            data->i2c_sercom = SERCOM1;
    1504:	2334      	movs	r3, #52	; 0x34
    1506:	4363      	muls	r3, r4
    1508:	4919      	ldr	r1, [pc, #100]	; (1570 <hal_i2c_init+0x198>)
    150a:	4a0e      	ldr	r2, [pc, #56]	; (1544 <hal_i2c_init+0x16c>)
    150c:	5099      	str	r1, [r3, r2]
            break;
    150e:	e7ba      	b.n	1486 <hal_i2c_init+0xae>
            data->i2c_sercom = SERCOM2;
    1510:	2334      	movs	r3, #52	; 0x34
    1512:	4363      	muls	r3, r4
    1514:	4917      	ldr	r1, [pc, #92]	; (1574 <hal_i2c_init+0x19c>)
    1516:	4a0b      	ldr	r2, [pc, #44]	; (1544 <hal_i2c_init+0x16c>)
    1518:	5099      	str	r1, [r3, r2]
            break;
    151a:	e7b4      	b.n	1486 <hal_i2c_init+0xae>
            data->i2c_sercom = SERCOM3;
    151c:	2334      	movs	r3, #52	; 0x34
    151e:	4363      	muls	r3, r4
    1520:	4915      	ldr	r1, [pc, #84]	; (1578 <hal_i2c_init+0x1a0>)
    1522:	4a08      	ldr	r2, [pc, #32]	; (1544 <hal_i2c_init+0x16c>)
    1524:	5099      	str	r1, [r3, r2]
            break;
    1526:	e7ae      	b.n	1486 <hal_i2c_init+0xae>
            data->i2c_sercom = SERCOM4;
    1528:	2334      	movs	r3, #52	; 0x34
    152a:	4363      	muls	r3, r4
    152c:	4913      	ldr	r1, [pc, #76]	; (157c <hal_i2c_init+0x1a4>)
    152e:	4a05      	ldr	r2, [pc, #20]	; (1544 <hal_i2c_init+0x16c>)
    1530:	5099      	str	r1, [r3, r2]
            break;
    1532:	e7a8      	b.n	1486 <hal_i2c_init+0xae>
            data->i2c_sercom = SERCOM5;
    1534:	2334      	movs	r3, #52	; 0x34
    1536:	4363      	muls	r3, r4
    1538:	4911      	ldr	r1, [pc, #68]	; (1580 <hal_i2c_init+0x1a8>)
    153a:	4a02      	ldr	r2, [pc, #8]	; (1544 <hal_i2c_init+0x16c>)
    153c:	5099      	str	r1, [r3, r2]
            break;
    153e:	e7a2      	b.n	1486 <hal_i2c_init+0xae>
            return ATCA_COMM_FAIL;
    1540:	20f0      	movs	r0, #240	; 0xf0
    1542:	e755      	b.n	13f0 <hal_i2c_init+0x18>
    1544:	20000a1c 	.word	0x20000a1c
    1548:	200009e8 	.word	0x200009e8
    154c:	00000d48 	.word	0x00000d48
    1550:	00016625 	.word	0x00016625
    1554:	0001eb8c 	.word	0x0001eb8c
    1558:	00100002 	.word	0x00100002
    155c:	00110002 	.word	0x00110002
    1560:	000052f5 	.word	0x000052f5
    1564:	000013cd 	.word	0x000013cd
    1568:	00006025 	.word	0x00006025
    156c:	e000e100 	.word	0xe000e100
    1570:	42000400 	.word	0x42000400
    1574:	42000800 	.word	0x42000800
    1578:	42000c00 	.word	0x42000c00
    157c:	42001000 	.word	0x42001000
    1580:	43000400 	.word	0x43000400

00001584 <hal_i2c_post_init>:
 * \return ATCA_SUCCESS
 */
ATCA_STATUS hal_i2c_post_init(ATCAIface iface)
{
    return ATCA_SUCCESS;
}
    1584:	2000      	movs	r0, #0
    1586:	4770      	bx	lr

00001588 <hal_i2c_send>:
 * \param[in] txlength  number of bytes to send
 * \return ATCA_SUCCESS on success, otherwise an error code.
 */

ATCA_STATUS hal_i2c_send(ATCAIface iface, uint8_t *txdata, int txlength)
{
    1588:	b530      	push	{r4, r5, lr}
    158a:	b085      	sub	sp, #20
    158c:	000d      	movs	r5, r1
    158e:	0014      	movs	r4, r2
    ATCAIfaceCfg *cfg = atgetifacecfg(iface);
    1590:	4b0f      	ldr	r3, [pc, #60]	; (15d0 <hal_i2c_send+0x48>)
    1592:	4798      	blx	r3

    struct i2c_master_packet packet = {
    1594:	a901      	add	r1, sp, #4
    1596:	7903      	ldrb	r3, [r0, #4]
    1598:	085b      	lsrs	r3, r3, #1
    159a:	800b      	strh	r3, [r1, #0]
    159c:	604d      	str	r5, [r1, #4]
    159e:	2300      	movs	r3, #0
    15a0:	720b      	strb	r3, [r1, #8]
    15a2:	724b      	strb	r3, [r1, #9]
    15a4:	728b      	strb	r3, [r1, #10]

    // for this implementation of I2C with CryptoAuth chips, txdata is assumed to have ATCAPacket format
    // other device types that don't require i/o tokens on the front end of a command need a different hal_i2c_send and wire it up instead of this one
    // this covers devices such as ATSHA204A and ATECCx08A that require a word address value pre-pended to the packet
    // txdata[0] is using _reserved byte of the ATCAPacket
    txdata[0] = 0x03;   // insert the Word Address Value, Command token
    15a6:	3303      	adds	r3, #3
    15a8:	702b      	strb	r3, [r5, #0]
    txlength++;         // account for word address value byte.
    15aa:	3401      	adds	r4, #1
    packet.data_length = txlength;
    15ac:	804c      	strh	r4, [r1, #2]

    if (i2c_master_write_packet_wait(&i2c_hal_data[cfg->atcai2c.bus].i2c_master_instance, &packet) != STATUS_OK)
    15ae:	7943      	ldrb	r3, [r0, #5]
    15b0:	2034      	movs	r0, #52	; 0x34
    15b2:	4358      	muls	r0, r3
    15b4:	3004      	adds	r0, #4
    15b6:	4b07      	ldr	r3, [pc, #28]	; (15d4 <hal_i2c_send+0x4c>)
    15b8:	1818      	adds	r0, r3, r0
    15ba:	4b07      	ldr	r3, [pc, #28]	; (15d8 <hal_i2c_send+0x50>)
    15bc:	4798      	blx	r3
    15be:	0003      	movs	r3, r0
    {
        return ATCA_COMM_FAIL;
    15c0:	20f0      	movs	r0, #240	; 0xf0
    }

    return ATCA_SUCCESS;
    15c2:	1e5a      	subs	r2, r3, #1
    15c4:	4193      	sbcs	r3, r2
    15c6:	425b      	negs	r3, r3
    15c8:	4018      	ands	r0, r3
}
    15ca:	b005      	add	sp, #20
    15cc:	bd30      	pop	{r4, r5, pc}
    15ce:	46c0      	nop			; (mov r8, r8)
    15d0:	00000f19 	.word	0x00000f19
    15d4:	20000a1c 	.word	0x20000a1c
    15d8:	000059ad 	.word	0x000059ad

000015dc <hal_i2c_receive>:
 * \param[inout] rxlength  As input, the size of the rxdata buffer.
 *                         As output, the number of bytes received.
 * \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS hal_i2c_receive(ATCAIface iface, uint8_t *rxdata, uint16_t *rxlength)
{
    15dc:	b5f0      	push	{r4, r5, r6, r7, lr}
    15de:	46d6      	mov	lr, sl
    15e0:	464f      	mov	r7, r9
    15e2:	4646      	mov	r6, r8
    15e4:	b5c0      	push	{r6, r7, lr}
    15e6:	b084      	sub	sp, #16
    15e8:	4689      	mov	r9, r1
    15ea:	4690      	mov	r8, r2
    ATCAIfaceCfg *cfg = atgetifacecfg(iface);
    15ec:	4b2c      	ldr	r3, [pc, #176]	; (16a0 <hal_i2c_receive+0xc4>)
    15ee:	4798      	blx	r3
    15f0:	0005      	movs	r5, r0
    int retries = cfg->rx_retries;
    15f2:	6a84      	ldr	r4, [r0, #40]	; 0x28
    int status = !ATCA_SUCCESS;
    uint16_t rxdata_max_size = *rxlength;
    15f4:	4643      	mov	r3, r8
    15f6:	881b      	ldrh	r3, [r3, #0]
    15f8:	469a      	mov	sl, r3

    struct i2c_master_packet packet = {
    15fa:	ab01      	add	r3, sp, #4
    15fc:	7902      	ldrb	r2, [r0, #4]
    15fe:	0852      	lsrs	r2, r2, #1
    1600:	801a      	strh	r2, [r3, #0]
    1602:	2201      	movs	r2, #1
    1604:	805a      	strh	r2, [r3, #2]
    1606:	464a      	mov	r2, r9
    1608:	9202      	str	r2, [sp, #8]
    160a:	2200      	movs	r2, #0
    160c:	721a      	strb	r2, [r3, #8]
    160e:	725a      	strb	r2, [r3, #9]
    1610:	729a      	strb	r2, [r3, #10]
        .ten_bit_address    = false,
        .high_speed         = false,
        .hs_master_code     = 0x0,
    };

    *rxlength = 0;
    1612:	4643      	mov	r3, r8
    1614:	801a      	strh	r2, [r3, #0]
    if (rxdata_max_size < 1)
    {
        return ATCA_SMALL_BUFFER;
    1616:	20ed      	movs	r0, #237	; 0xed
    if (rxdata_max_size < 1)
    1618:	4653      	mov	r3, sl
    161a:	2b00      	cmp	r3, #0
    161c:	d105      	bne.n	162a <hal_i2c_receive+0x4e>
    }

    *rxlength = rxdata[0];

    return ATCA_SUCCESS;
}
    161e:	b004      	add	sp, #16
    1620:	bc1c      	pop	{r2, r3, r4}
    1622:	4690      	mov	r8, r2
    1624:	4699      	mov	r9, r3
    1626:	46a2      	mov	sl, r4
    1628:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (rxdata_max_size < 1)
    162a:	2301      	movs	r3, #1
        if (i2c_master_read_packet_wait(&i2c_hal_data[cfg->atcai2c.bus].i2c_master_instance, &packet) != STATUS_OK)
    162c:	4f1d      	ldr	r7, [pc, #116]	; (16a4 <hal_i2c_receive+0xc8>)
    162e:	4e1e      	ldr	r6, [pc, #120]	; (16a8 <hal_i2c_receive+0xcc>)
    1630:	e00c      	b.n	164c <hal_i2c_receive+0x70>
    1632:	796b      	ldrb	r3, [r5, #5]
    1634:	2034      	movs	r0, #52	; 0x34
    1636:	4358      	muls	r0, r3
    1638:	3004      	adds	r0, #4
    163a:	1838      	adds	r0, r7, r0
    163c:	a901      	add	r1, sp, #4
    163e:	47b0      	blx	r6
            status = ATCA_COMM_FAIL;
    1640:	23f0      	movs	r3, #240	; 0xf0
            status = ATCA_SUCCESS;
    1642:	1e42      	subs	r2, r0, #1
    1644:	4190      	sbcs	r0, r2
    1646:	4240      	negs	r0, r0
    1648:	4003      	ands	r3, r0
    164a:	3c01      	subs	r4, #1
    while (retries-- > 0 && status != ATCA_SUCCESS)
    164c:	2c00      	cmp	r4, #0
    164e:	dd1c      	ble.n	168a <hal_i2c_receive+0xae>
    1650:	2b00      	cmp	r3, #0
    1652:	d1ee      	bne.n	1632 <hal_i2c_receive+0x56>
    if (rxdata[0] < ATCA_RSP_SIZE_MIN)
    1654:	464b      	mov	r3, r9
    1656:	781b      	ldrb	r3, [r3, #0]
        return ATCA_INVALID_SIZE;
    1658:	20e4      	movs	r0, #228	; 0xe4
    if (rxdata[0] < ATCA_RSP_SIZE_MIN)
    165a:	2b03      	cmp	r3, #3
    165c:	d9df      	bls.n	161e <hal_i2c_receive+0x42>
    if (rxdata[0] > rxdata_max_size)
    165e:	b29b      	uxth	r3, r3
        return ATCA_SMALL_BUFFER;
    1660:	3009      	adds	r0, #9
    if (rxdata[0] > rxdata_max_size)
    1662:	459a      	cmp	sl, r3
    1664:	d3db      	bcc.n	161e <hal_i2c_receive+0x42>
    packet.data_length = rxdata[0] - 1;
    1666:	a901      	add	r1, sp, #4
    1668:	3b01      	subs	r3, #1
    166a:	804b      	strh	r3, [r1, #2]
    packet.data = &rxdata[1];
    166c:	464b      	mov	r3, r9
    166e:	3301      	adds	r3, #1
    1670:	604b      	str	r3, [r1, #4]
    if (i2c_master_read_packet_wait(&i2c_hal_data[cfg->atcai2c.bus].i2c_master_instance, &packet) != STATUS_OK)
    1672:	796b      	ldrb	r3, [r5, #5]
    1674:	38b9      	subs	r0, #185	; 0xb9
    1676:	4358      	muls	r0, r3
    1678:	3004      	adds	r0, #4
    167a:	4b0a      	ldr	r3, [pc, #40]	; (16a4 <hal_i2c_receive+0xc8>)
    167c:	1818      	adds	r0, r3, r0
    167e:	4b0a      	ldr	r3, [pc, #40]	; (16a8 <hal_i2c_receive+0xcc>)
    1680:	4798      	blx	r3
    1682:	2800      	cmp	r0, #0
    1684:	d005      	beq.n	1692 <hal_i2c_receive+0xb6>
        return status;
    1686:	20f0      	movs	r0, #240	; 0xf0
    1688:	e7c9      	b.n	161e <hal_i2c_receive+0x42>
    if (status != ATCA_SUCCESS)
    168a:	2b00      	cmp	r3, #0
    168c:	d0e2      	beq.n	1654 <hal_i2c_receive+0x78>
        return status;
    168e:	b2d8      	uxtb	r0, r3
    1690:	e7c5      	b.n	161e <hal_i2c_receive+0x42>
    *rxlength = rxdata[0];
    1692:	464b      	mov	r3, r9
    1694:	781b      	ldrb	r3, [r3, #0]
    1696:	4642      	mov	r2, r8
    1698:	8013      	strh	r3, [r2, #0]
    return ATCA_SUCCESS;
    169a:	2000      	movs	r0, #0
    169c:	e7bf      	b.n	161e <hal_i2c_receive+0x42>
    169e:	46c0      	nop			; (mov r8, r8)
    16a0:	00000f19 	.word	0x00000f19
    16a4:	20000a1c 	.word	0x20000a1c
    16a8:	00005989 	.word	0x00005989

000016ac <change_i2c_speed>:
 * \param[in] iface  interface on which to change bus speed
 * \param[in] speed  baud rate (typically 100000 or 400000)
 */

void change_i2c_speed(ATCAIface iface, uint32_t speed)
{
    16ac:	b5f0      	push	{r4, r5, r6, r7, lr}
    16ae:	46de      	mov	lr, fp
    16b0:	4657      	mov	r7, sl
    16b2:	464e      	mov	r6, r9
    16b4:	4645      	mov	r5, r8
    16b6:	b5e0      	push	{r5, r6, r7, lr}
    16b8:	b085      	sub	sp, #20
    16ba:	9103      	str	r1, [sp, #12]
    ATCAIfaceCfg *cfg = atgetifacecfg(iface);
    16bc:	4b2d      	ldr	r3, [pc, #180]	; (1774 <change_i2c_speed+0xc8>)
    16be:	4798      	blx	r3
    ATCAI2CMaster_t* data = &i2c_hal_data[cfg->atcai2c.bus];
    16c0:	7943      	ldrb	r3, [r0, #5]

    i2c_master_disable(&data->i2c_master_instance);
    16c2:	4a2d      	ldr	r2, [pc, #180]	; (1778 <change_i2c_speed+0xcc>)
    16c4:	4690      	mov	r8, r2
    16c6:	2534      	movs	r5, #52	; 0x34
    16c8:	9302      	str	r3, [sp, #8]
    16ca:	435d      	muls	r5, r3
    16cc:	1d2c      	adds	r4, r5, #4
    16ce:	4444      	add	r4, r8
    16d0:	9401      	str	r4, [sp, #4]
{
	/* Sanity check of arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    16d2:	1957      	adds	r7, r2, r5
    16d4:	687e      	ldr	r6, [r7, #4]

#if I2C_MASTER_CALLBACK_MODE == true
		/* Disable module interrupts */
		system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
    16d6:	0030      	movs	r0, r6
    16d8:	4c28      	ldr	r4, [pc, #160]	; (177c <change_i2c_speed+0xd0>)
    16da:	46a2      	mov	sl, r4
    16dc:	47a0      	blx	r4
 * \param[in] vector  Interrupt vector to disable
 */
static inline void system_interrupt_disable(
		const enum system_interrupt_vector vector)
{
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    16de:	241f      	movs	r4, #31
    16e0:	4020      	ands	r0, r4
    16e2:	3c1e      	subs	r4, #30
    16e4:	0022      	movs	r2, r4
    16e6:	4082      	lsls	r2, r0
    16e8:	4925      	ldr	r1, [pc, #148]	; (1780 <change_i2c_speed+0xd4>)
    16ea:	4689      	mov	r9, r1
    16ec:	2380      	movs	r3, #128	; 0x80
    16ee:	50ca      	str	r2, [r1, r3]
#endif

	/* Wait for module to sync */
	_i2c_master_wait_for_sync(module);
    16f0:	9801      	ldr	r0, [sp, #4]
    16f2:	4a24      	ldr	r2, [pc, #144]	; (1784 <change_i2c_speed+0xd8>)
    16f4:	4693      	mov	fp, r2
    16f6:	4790      	blx	r2

	/* Disbale interrupt */
	i2c_module->INTENCLR.reg = SERCOM_I2CM_INTENCLR_MASK;
    16f8:	2383      	movs	r3, #131	; 0x83
    16fa:	7533      	strb	r3, [r6, #20]
	/* Clear interrupt flag */
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_MASK;
    16fc:	7633      	strb	r3, [r6, #24]

	/* Disable module */
	i2c_module->CTRLA.reg &= ~SERCOM_I2CM_CTRLA_ENABLE;
    16fe:	6833      	ldr	r3, [r6, #0]
    1700:	2202      	movs	r2, #2
    1702:	4393      	bics	r3, r2
    1704:	6033      	str	r3, [r6, #0]
    config_i2c_master.buffer_timeout = 10000;
    1706:	4e20      	ldr	r6, [pc, #128]	; (1788 <change_i2c_speed+0xdc>)
    1708:	4b20      	ldr	r3, [pc, #128]	; (178c <change_i2c_speed+0xe0>)
    170a:	82f3      	strh	r3, [r6, #22]
    config_i2c_master.baud_rate = speed / 1000;
    170c:	21fa      	movs	r1, #250	; 0xfa
    170e:	0089      	lsls	r1, r1, #2
    1710:	9803      	ldr	r0, [sp, #12]
    1712:	4b1f      	ldr	r3, [pc, #124]	; (1790 <change_i2c_speed+0xe4>)
    1714:	4798      	blx	r3
    1716:	6030      	str	r0, [r6, #0]
    i2c_master_init(&data->i2c_master_instance, data->i2c_sercom, &config_i2c_master);
    1718:	4641      	mov	r1, r8
    171a:	5869      	ldr	r1, [r5, r1]
    171c:	0032      	movs	r2, r6
    171e:	9e01      	ldr	r6, [sp, #4]
    1720:	0030      	movs	r0, r6
    1722:	4b1c      	ldr	r3, [pc, #112]	; (1794 <change_i2c_speed+0xe8>)
    1724:	4798      	blx	r3
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    1726:	687d      	ldr	r5, [r7, #4]
	_i2c_master_wait_for_sync(module);
    1728:	0030      	movs	r0, r6
    172a:	47d8      	blx	fp
	i2c_module->CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
    172c:	682b      	ldr	r3, [r5, #0]
    172e:	2102      	movs	r1, #2
    1730:	430b      	orrs	r3, r1
    1732:	602b      	str	r3, [r5, #0]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    1734:	6878      	ldr	r0, [r7, #4]
    1736:	47d0      	blx	sl
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    1738:	211f      	movs	r1, #31
    173a:	4008      	ands	r0, r1
    173c:	4084      	lsls	r4, r0
    173e:	4649      	mov	r1, r9
    1740:	600c      	str	r4, [r1, #0]
	uint32_t timeout_counter = 0;
    1742:	2300      	movs	r3, #0
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
    1744:	2010      	movs	r0, #16
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
    1746:	2134      	movs	r1, #52	; 0x34
    1748:	9a02      	ldr	r2, [sp, #8]
    174a:	4351      	muls	r1, r2
    174c:	4a0a      	ldr	r2, [pc, #40]	; (1778 <change_i2c_speed+0xcc>)
    174e:	4694      	mov	ip, r2
    1750:	4461      	add	r1, ip
    1752:	310a      	adds	r1, #10
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
    1754:	8b6a      	ldrh	r2, [r5, #26]
    1756:	4202      	tst	r2, r0
    1758:	d105      	bne.n	1766 <change_i2c_speed+0xba>
		timeout_counter++;
    175a:	3301      	adds	r3, #1
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
    175c:	880a      	ldrh	r2, [r1, #0]
    175e:	4293      	cmp	r3, r2
    1760:	d3f8      	bcc.n	1754 <change_i2c_speed+0xa8>
			i2c_module->STATUS.reg = SERCOM_I2CM_STATUS_BUSSTATE(1);
    1762:	2310      	movs	r3, #16
    1764:	836b      	strh	r3, [r5, #26]
    i2c_master_enable(&data->i2c_master_instance);
}
    1766:	b005      	add	sp, #20
    1768:	bc3c      	pop	{r2, r3, r4, r5}
    176a:	4690      	mov	r8, r2
    176c:	4699      	mov	r9, r3
    176e:	46a2      	mov	sl, r4
    1770:	46ab      	mov	fp, r5
    1772:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1774:	00000f19 	.word	0x00000f19
    1778:	20000a1c 	.word	0x20000a1c
    177c:	00006025 	.word	0x00006025
    1780:	e000e100 	.word	0xe000e100
    1784:	000013cd 	.word	0x000013cd
    1788:	200009e8 	.word	0x200009e8
    178c:	00002710 	.word	0x00002710
    1790:	00016625 	.word	0x00016625
    1794:	000052f5 	.word	0x000052f5

00001798 <hal_i2c_wake>:
 * \param[in] iface  interface to logical device to wakeup
 * \return ATCA_SUCCESS on success, otherwise an error code.
 */

ATCA_STATUS hal_i2c_wake(ATCAIface iface)
{
    1798:	b5f0      	push	{r4, r5, r6, r7, lr}
    179a:	46ce      	mov	lr, r9
    179c:	4647      	mov	r7, r8
    179e:	b580      	push	{r7, lr}
    17a0:	b087      	sub	sp, #28
    17a2:	0004      	movs	r4, r0
    17a4:	9001      	str	r0, [sp, #4]
    ATCAIfaceCfg *cfg = atgetifacecfg(iface);
    17a6:	4b2d      	ldr	r3, [pc, #180]	; (185c <hal_i2c_wake+0xc4>)
    17a8:	4798      	blx	r3
    17aa:	0006      	movs	r6, r0
    int retries = cfg->rx_retries;
    17ac:	6a87      	ldr	r7, [r0, #40]	; 0x28
    uint32_t bdrt = cfg->atcai2c.baud;
    17ae:	6883      	ldr	r3, [r0, #8]
    17b0:	4699      	mov	r9, r3
    int status = !STATUS_OK;
    uint8_t data[4];

    if (bdrt != 100000)    // if not already at 100KHz, change it
    17b2:	4b2b      	ldr	r3, [pc, #172]	; (1860 <hal_i2c_wake+0xc8>)
    17b4:	4599      	cmp	r9, r3
    17b6:	d003      	beq.n	17c0 <hal_i2c_wake+0x28>
    {
        change_i2c_speed(iface, 100000);
    17b8:	0019      	movs	r1, r3
    17ba:	0020      	movs	r0, r4
    17bc:	4b29      	ldr	r3, [pc, #164]	; (1864 <hal_i2c_wake+0xcc>)
    17be:	4798      	blx	r3
    }

    // Send the wake by writing to an address of 0x00
    struct i2c_master_packet packet = {
    17c0:	2200      	movs	r2, #0
    17c2:	2300      	movs	r3, #0
    17c4:	a902      	add	r1, sp, #8
    17c6:	800a      	strh	r2, [r1, #0]
    17c8:	804a      	strh	r2, [r1, #2]
    17ca:	ac05      	add	r4, sp, #20
    17cc:	9403      	str	r4, [sp, #12]
    17ce:	720b      	strb	r3, [r1, #8]
    17d0:	724b      	strb	r3, [r1, #9]
    17d2:	728b      	strb	r3, [r1, #10]
        .hs_master_code     = 0x0,
    };

    // Send the 00 address as the wake pulse
    // part will NACK, so don't check for status
    i2c_master_write_packet_wait(&i2c_hal_data[cfg->atcai2c.bus].i2c_master_instance, &packet);
    17d4:	7973      	ldrb	r3, [r6, #5]
    17d6:	2034      	movs	r0, #52	; 0x34
    17d8:	4358      	muls	r0, r3
    17da:	3004      	adds	r0, #4
    17dc:	4b22      	ldr	r3, [pc, #136]	; (1868 <hal_i2c_wake+0xd0>)
    17de:	1818      	adds	r0, r3, r0
    17e0:	4b22      	ldr	r3, [pc, #136]	; (186c <hal_i2c_wake+0xd4>)
    17e2:	4798      	blx	r3

    // wait tWHI + tWLO which is configured based on device type and configuration structure
    atca_delay_us(cfg->wake_delay);
    17e4:	8cb0      	ldrh	r0, [r6, #36]	; 0x24
    17e6:	4b22      	ldr	r3, [pc, #136]	; (1870 <hal_i2c_wake+0xd8>)
    17e8:	4798      	blx	r3

    packet.address = cfg->atcai2c.slave_address >> 1;
    17ea:	7933      	ldrb	r3, [r6, #4]
    17ec:	085b      	lsrs	r3, r3, #1
    17ee:	aa02      	add	r2, sp, #8
    17f0:	8013      	strh	r3, [r2, #0]
    packet.data_length = 4;
    17f2:	2304      	movs	r3, #4
    17f4:	8053      	strh	r3, [r2, #2]
    packet.data = data;
    17f6:	9403      	str	r4, [sp, #12]

    while (retries-- > 0 && status != STATUS_OK)
    17f8:	1e7c      	subs	r4, r7, #1
    17fa:	2f00      	cmp	r7, #0
    17fc:	dd28      	ble.n	1850 <hal_i2c_wake+0xb8>
    {
        status = i2c_master_read_packet_wait(&i2c_hal_data[cfg->atcai2c.bus].i2c_master_instance, &packet);
    17fe:	4b1a      	ldr	r3, [pc, #104]	; (1868 <hal_i2c_wake+0xd0>)
    1800:	4698      	mov	r8, r3
    1802:	4f1c      	ldr	r7, [pc, #112]	; (1874 <hal_i2c_wake+0xdc>)
    1804:	7973      	ldrb	r3, [r6, #5]
    1806:	2034      	movs	r0, #52	; 0x34
    1808:	4358      	muls	r0, r3
    180a:	3004      	adds	r0, #4
    180c:	4440      	add	r0, r8
    180e:	a902      	add	r1, sp, #8
    1810:	47b8      	blx	r7
    1812:	0005      	movs	r5, r0
    while (retries-- > 0 && status != STATUS_OK)
    1814:	3c01      	subs	r4, #1
    1816:	d310      	bcc.n	183a <hal_i2c_wake+0xa2>
    1818:	2800      	cmp	r0, #0
    181a:	d1f3      	bne.n	1804 <hal_i2c_wake+0x6c>
    }

    // if necessary, revert baud rate to what came in.
    if (bdrt != 100000)
    181c:	4b10      	ldr	r3, [pc, #64]	; (1860 <hal_i2c_wake+0xc8>)
    181e:	4599      	cmp	r9, r3
    1820:	d011      	beq.n	1846 <hal_i2c_wake+0xae>
    {
        change_i2c_speed(iface, bdrt);
    1822:	4649      	mov	r1, r9
    1824:	9801      	ldr	r0, [sp, #4]
    1826:	4b0f      	ldr	r3, [pc, #60]	; (1864 <hal_i2c_wake+0xcc>)
    1828:	4798      	blx	r3
    }

    if (status != STATUS_OK)
    {
        return ATCA_COMM_FAIL;
    182a:	20f0      	movs	r0, #240	; 0xf0
    if (status != STATUS_OK)
    182c:	2d00      	cmp	r5, #0
    182e:	d00a      	beq.n	1846 <hal_i2c_wake+0xae>
    }

    return hal_check_wake(data, 4);
}
    1830:	b007      	add	sp, #28
    1832:	bc0c      	pop	{r2, r3}
    1834:	4690      	mov	r8, r2
    1836:	4699      	mov	r9, r3
    1838:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (bdrt != 100000)
    183a:	4b09      	ldr	r3, [pc, #36]	; (1860 <hal_i2c_wake+0xc8>)
    183c:	4599      	cmp	r9, r3
    183e:	d0f4      	beq.n	182a <hal_i2c_wake+0x92>
    1840:	e7ef      	b.n	1822 <hal_i2c_wake+0x8a>
    int status = !STATUS_OK;
    1842:	2501      	movs	r5, #1
    1844:	e7ed      	b.n	1822 <hal_i2c_wake+0x8a>
    return hal_check_wake(data, 4);
    1846:	2104      	movs	r1, #4
    1848:	a805      	add	r0, sp, #20
    184a:	4b0b      	ldr	r3, [pc, #44]	; (1878 <hal_i2c_wake+0xe0>)
    184c:	4798      	blx	r3
    184e:	e7ef      	b.n	1830 <hal_i2c_wake+0x98>
    if (bdrt != 100000)
    1850:	4b03      	ldr	r3, [pc, #12]	; (1860 <hal_i2c_wake+0xc8>)
    1852:	4599      	cmp	r9, r3
    1854:	d1f5      	bne.n	1842 <hal_i2c_wake+0xaa>
        return ATCA_COMM_FAIL;
    1856:	20f0      	movs	r0, #240	; 0xf0
    1858:	e7ea      	b.n	1830 <hal_i2c_wake+0x98>
    185a:	46c0      	nop			; (mov r8, r8)
    185c:	00000f19 	.word	0x00000f19
    1860:	000186a0 	.word	0x000186a0
    1864:	000016ad 	.word	0x000016ad
    1868:	20000a1c 	.word	0x20000a1c
    186c:	000059ad 	.word	0x000059ad
    1870:	00001949 	.word	0x00001949
    1874:	00005989 	.word	0x00005989
    1878:	00001381 	.word	0x00001381

0000187c <hal_i2c_idle>:
 * \param[in] iface  interface to logical device to idle
 * \return ATCA_SUCCESS on success, otherwise an error code.
 */

ATCA_STATUS hal_i2c_idle(ATCAIface iface)
{
    187c:	b500      	push	{lr}
    187e:	b085      	sub	sp, #20
    ATCAIfaceCfg *cfg = atgetifacecfg(iface);
    1880:	4b10      	ldr	r3, [pc, #64]	; (18c4 <hal_i2c_idle+0x48>)
    1882:	4798      	blx	r3
    uint8_t data[4];

    struct i2c_master_packet packet = {
    1884:	7903      	ldrb	r3, [r0, #4]
    1886:	085b      	lsrs	r3, r3, #1
    1888:	466a      	mov	r2, sp
    188a:	8013      	strh	r3, [r2, #0]
    188c:	2301      	movs	r3, #1
    188e:	8053      	strh	r3, [r2, #2]
    1890:	aa03      	add	r2, sp, #12
    1892:	9201      	str	r2, [sp, #4]
    1894:	2300      	movs	r3, #0
    1896:	4669      	mov	r1, sp
    1898:	720b      	strb	r3, [r1, #8]
    189a:	724b      	strb	r3, [r1, #9]
    189c:	728b      	strb	r3, [r1, #10]
        .ten_bit_address    = false,
        .high_speed         = false,
        .hs_master_code     = 0x0,
    };

    data[0] = 0x02;  // idle word address value
    189e:	3302      	adds	r3, #2
    18a0:	7013      	strb	r3, [r2, #0]
    if (i2c_master_write_packet_wait(&i2c_hal_data[cfg->atcai2c.bus].i2c_master_instance, &packet) != STATUS_OK)
    18a2:	7943      	ldrb	r3, [r0, #5]
    18a4:	2034      	movs	r0, #52	; 0x34
    18a6:	4358      	muls	r0, r3
    18a8:	3004      	adds	r0, #4
    18aa:	4b07      	ldr	r3, [pc, #28]	; (18c8 <hal_i2c_idle+0x4c>)
    18ac:	1818      	adds	r0, r3, r0
    18ae:	4b07      	ldr	r3, [pc, #28]	; (18cc <hal_i2c_idle+0x50>)
    18b0:	4798      	blx	r3
    18b2:	0003      	movs	r3, r0
    {
        return ATCA_COMM_FAIL;
    18b4:	20f0      	movs	r0, #240	; 0xf0
    }

    return ATCA_SUCCESS;
    18b6:	1e5a      	subs	r2, r3, #1
    18b8:	4193      	sbcs	r3, r2
    18ba:	425b      	negs	r3, r3
    18bc:	4018      	ands	r0, r3

}
    18be:	b005      	add	sp, #20
    18c0:	bd00      	pop	{pc}
    18c2:	46c0      	nop			; (mov r8, r8)
    18c4:	00000f19 	.word	0x00000f19
    18c8:	20000a1c 	.word	0x20000a1c
    18cc:	000059ad 	.word	0x000059ad

000018d0 <hal_i2c_sleep>:
 * \param[in] iface  interface to logical device to sleep
 * \return ATCA_SUCCESS on success, otherwise an error code.
 */

ATCA_STATUS hal_i2c_sleep(ATCAIface iface)
{
    18d0:	b500      	push	{lr}
    18d2:	b085      	sub	sp, #20
    ATCAIfaceCfg *cfg = atgetifacecfg(iface);
    18d4:	4b10      	ldr	r3, [pc, #64]	; (1918 <hal_i2c_sleep+0x48>)
    18d6:	4798      	blx	r3
    uint8_t data[4];

    struct i2c_master_packet packet = {
    18d8:	7903      	ldrb	r3, [r0, #4]
    18da:	085b      	lsrs	r3, r3, #1
    18dc:	466a      	mov	r2, sp
    18de:	8013      	strh	r3, [r2, #0]
    18e0:	2301      	movs	r3, #1
    18e2:	8053      	strh	r3, [r2, #2]
    18e4:	aa03      	add	r2, sp, #12
    18e6:	9201      	str	r2, [sp, #4]
    18e8:	2300      	movs	r3, #0
    18ea:	4669      	mov	r1, sp
    18ec:	720b      	strb	r3, [r1, #8]
    18ee:	724b      	strb	r3, [r1, #9]
    18f0:	728b      	strb	r3, [r1, #10]
        .ten_bit_address    = false,
        .high_speed         = false,
        .hs_master_code     = 0x0,
    };

    data[0] = 0x01;  // sleep word address value
    18f2:	2301      	movs	r3, #1
    18f4:	7013      	strb	r3, [r2, #0]
    if (i2c_master_write_packet_wait(&i2c_hal_data[cfg->atcai2c.bus].i2c_master_instance, &packet) != STATUS_OK)
    18f6:	7943      	ldrb	r3, [r0, #5]
    18f8:	2034      	movs	r0, #52	; 0x34
    18fa:	4358      	muls	r0, r3
    18fc:	3004      	adds	r0, #4
    18fe:	4b07      	ldr	r3, [pc, #28]	; (191c <hal_i2c_sleep+0x4c>)
    1900:	1818      	adds	r0, r3, r0
    1902:	4b07      	ldr	r3, [pc, #28]	; (1920 <hal_i2c_sleep+0x50>)
    1904:	4798      	blx	r3
    1906:	0003      	movs	r3, r0
    {
        return ATCA_COMM_FAIL;
    1908:	20f0      	movs	r0, #240	; 0xf0
    }

    return ATCA_SUCCESS;
    190a:	1e5a      	subs	r2, r3, #1
    190c:	4193      	sbcs	r3, r2
    190e:	425b      	negs	r3, r3
    1910:	4018      	ands	r0, r3
}
    1912:	b005      	add	sp, #20
    1914:	bd00      	pop	{pc}
    1916:	46c0      	nop			; (mov r8, r8)
    1918:	00000f19 	.word	0x00000f19
    191c:	20000a1c 	.word	0x20000a1c
    1920:	000059ad 	.word	0x000059ad

00001924 <hal_i2c_release>:
 * \param[in] hal_data - opaque pointer to hal data structure - known only to the HAL implementation
 * return ATCA_SUCCESS
 */

ATCA_STATUS hal_i2c_release(void *hal_data)
{
    1924:	b510      	push	{r4, lr}
    1926:	1e04      	subs	r4, r0, #0
    ATCAI2CMaster_t *hal = (ATCAI2CMaster_t*)hal_data;

    // if the use count for this bus has gone to 0 references, disable it.  protect against an unbracketed release
    if (hal && --(hal->ref_ct) <= 0)
    1928:	d004      	beq.n	1934 <hal_i2c_release+0x10>
    192a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    192c:	3b01      	subs	r3, #1
    192e:	62c3      	str	r3, [r0, #44]	; 0x2c
    1930:	2b00      	cmp	r3, #0
    1932:	dd01      	ble.n	1938 <hal_i2c_release+0x14>
        i2c_master_reset(&(hal->i2c_master_instance));
        hal->ref_ct = 0;
    }

    return ATCA_SUCCESS;
}
    1934:	2000      	movs	r0, #0
    1936:	bd10      	pop	{r4, pc}
        i2c_master_reset(&(hal->i2c_master_instance));
    1938:	3004      	adds	r0, #4
    193a:	4b02      	ldr	r3, [pc, #8]	; (1944 <hal_i2c_release+0x20>)
    193c:	4798      	blx	r3
        hal->ref_ct = 0;
    193e:	2300      	movs	r3, #0
    1940:	62e3      	str	r3, [r4, #44]	; 0x2c
    1942:	e7f7      	b.n	1934 <hal_i2c_release+0x10>
    1944:	00005601 	.word	0x00005601

00001948 <atca_delay_us>:
/** \brief This function delays for a number of microseconds.
 *
 * \param[in] delay number of 0.001 milliseconds to delay
 */
void atca_delay_us(uint32_t delay)
{
    1948:	b510      	push	{r4, lr}
    // use ASF supplied delay
    delay_us(delay);
    194a:	2800      	cmp	r0, #0
    194c:	d103      	bne.n	1956 <atca_delay_us+0xe>
    194e:	2001      	movs	r0, #1
    1950:	4b02      	ldr	r3, [pc, #8]	; (195c <atca_delay_us+0x14>)
    1952:	4798      	blx	r3
}
    1954:	bd10      	pop	{r4, pc}
    delay_us(delay);
    1956:	4b01      	ldr	r3, [pc, #4]	; (195c <atca_delay_us+0x14>)
    1958:	4798      	blx	r3
    195a:	e7fb      	b.n	1954 <atca_delay_us+0xc>
    195c:	00004591 	.word	0x00004591

00001960 <atca_delay_ms>:
 * \param[in] delay number of milliseconds to delay
 */

/* ASF already has delay_ms - see delay.h */
void atca_delay_ms(uint32_t delay)
{
    1960:	b510      	push	{r4, lr}
    // use ASF supplied delay
    delay_ms(delay);
    1962:	2800      	cmp	r0, #0
    1964:	d103      	bne.n	196e <atca_delay_ms+0xe>
    1966:	2001      	movs	r0, #1
    1968:	4b02      	ldr	r3, [pc, #8]	; (1974 <atca_delay_ms+0x14>)
    196a:	4798      	blx	r3
}
    196c:	bd10      	pop	{r4, pc}
    delay_ms(delay);
    196e:	4b02      	ldr	r3, [pc, #8]	; (1978 <atca_delay_ms+0x18>)
    1970:	4798      	blx	r3
    1972:	e7fb      	b.n	196c <atca_delay_ms+0xc>
    1974:	00004591 	.word	0x00004591
    1978:	000045bd 	.word	0x000045bd

0000197c <atcah_nonce>:
/** \brief This function calculates host side nonce with the parameters passed.
 *    \param[in, out] param pointer to parameter structure
 *   \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS atcah_nonce(struct atca_nonce_in_out *param)
{
    197c:	b5f0      	push	{r4, r5, r6, r7, lr}
    197e:	46c6      	mov	lr, r8
    1980:	b500      	push	{lr}
    1982:	b08e      	sub	sp, #56	; 0x38
    1984:	0004      	movs	r4, r0
    uint8_t temporary[ATCA_MSG_SIZE_NONCE];
    uint8_t *p_temp;
    uint8_t calc_mode = param->mode & NONCE_MODE_MASK;

    // Check parameters
    if (param->temp_key == NULL || param->num_in == NULL)
    1986:	68c5      	ldr	r5, [r0, #12]
    1988:	2d00      	cmp	r5, #0
    198a:	d050      	beq.n	1a2e <atcah_nonce+0xb2>
    198c:	6846      	ldr	r6, [r0, #4]
    198e:	2e00      	cmp	r6, #0
    1990:	d04f      	beq.n	1a32 <atcah_nonce+0xb6>
    uint8_t calc_mode = param->mode & NONCE_MODE_MASK;
    1992:	7807      	ldrb	r7, [r0, #0]
    {
        return ATCA_BAD_PARAM;
    }

    // Calculate or pass-through the nonce to TempKey->Value
    if ((calc_mode == NONCE_MODE_SEED_UPDATE) || (calc_mode == NONCE_MODE_NO_SEED_UPDATE))
    1994:	2303      	movs	r3, #3
    1996:	403b      	ands	r3, r7
        param->temp_key->gen_dig_data = 0;
        param->temp_key->no_mac_flag = 0;
        param->temp_key->valid = 1;
    }

    return ATCA_SUCCESS;
    1998:	2000      	movs	r0, #0
    if ((calc_mode == NONCE_MODE_SEED_UPDATE) || (calc_mode == NONCE_MODE_NO_SEED_UPDATE))
    199a:	2b01      	cmp	r3, #1
    199c:	d903      	bls.n	19a6 <atcah_nonce+0x2a>
}
    199e:	b00e      	add	sp, #56	; 0x38
    19a0:	bc04      	pop	{r2}
    19a2:	4690      	mov	r8, r2
    19a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if (param->rand_out == NULL)
    19a6:	68a1      	ldr	r1, [r4, #8]
    19a8:	2900      	cmp	r1, #0
    19aa:	d044      	beq.n	1a36 <atcah_nonce+0xba>
        if ((param->zero & NONCE_ZERO_CALC_MASK) == NONCE_ZERO_CALC_TEMPKEY)
    19ac:	2202      	movs	r2, #2
    19ae:	5ea3      	ldrsh	r3, [r4, r2]
    19b0:	2b00      	cmp	r3, #0
    19b2:	db37      	blt.n	1a24 <atcah_nonce+0xa8>
            memcpy(p_temp, param->rand_out, RANDOM_NUM_SIZE);
    19b4:	2220      	movs	r2, #32
    19b6:	4668      	mov	r0, sp
    19b8:	4b20      	ldr	r3, [pc, #128]	; (1a3c <atcah_nonce+0xc0>)
    19ba:	4698      	mov	r8, r3
    19bc:	4798      	blx	r3
            memcpy(p_temp, param->num_in, NONCE_NUMIN_SIZE);
    19be:	2214      	movs	r2, #20
    19c0:	0031      	movs	r1, r6
    19c2:	a808      	add	r0, sp, #32
    19c4:	47c0      	blx	r8
            *p_temp++ = ATCA_NONCE;
    19c6:	2216      	movs	r2, #22
    19c8:	2334      	movs	r3, #52	; 0x34
    19ca:	4669      	mov	r1, sp
    19cc:	54ca      	strb	r2, [r1, r3]
            *p_temp++ = param->mode;
    19ce:	3301      	adds	r3, #1
    19d0:	54cf      	strb	r7, [r1, r3]
            *p_temp++ = 0x00;
    19d2:	2200      	movs	r2, #0
    19d4:	3301      	adds	r3, #1
    19d6:	54ca      	strb	r2, [r1, r3]
            atcac_sw_sha2_256(temporary, ATCA_MSG_SIZE_NONCE, param->temp_key->value);
    19d8:	002a      	movs	r2, r5
    19da:	2137      	movs	r1, #55	; 0x37
    19dc:	4668      	mov	r0, sp
    19de:	4b18      	ldr	r3, [pc, #96]	; (1a40 <atcah_nonce+0xc4>)
    19e0:	4798      	blx	r3
            param->temp_key->source_flag = 0; // Random
    19e2:	68e1      	ldr	r1, [r4, #12]
    19e4:	2340      	movs	r3, #64	; 0x40
    19e6:	5cca      	ldrb	r2, [r1, r3]
    19e8:	2010      	movs	r0, #16
    19ea:	4382      	bics	r2, r0
    19ec:	54ca      	strb	r2, [r1, r3]
            param->temp_key->key_id = 0;
    19ee:	68e1      	ldr	r1, [r4, #12]
    19f0:	5cca      	ldrb	r2, [r1, r3]
    19f2:	3801      	subs	r0, #1
    19f4:	4382      	bics	r2, r0
    19f6:	54ca      	strb	r2, [r1, r3]
            param->temp_key->gen_dig_data = 0;
    19f8:	68e1      	ldr	r1, [r4, #12]
    19fa:	5cca      	ldrb	r2, [r1, r3]
    19fc:	3011      	adds	r0, #17
    19fe:	4382      	bics	r2, r0
    1a00:	54ca      	strb	r2, [r1, r3]
            param->temp_key->no_mac_flag = 0;
    1a02:	68e1      	ldr	r1, [r4, #12]
    1a04:	5cc8      	ldrb	r0, [r1, r3]
    1a06:	227f      	movs	r2, #127	; 0x7f
    1a08:	4002      	ands	r2, r0
    1a0a:	54ca      	strb	r2, [r1, r3]
            param->temp_key->valid = 1;
    1a0c:	68e3      	ldr	r3, [r4, #12]
    1a0e:	3340      	adds	r3, #64	; 0x40
    1a10:	785a      	ldrb	r2, [r3, #1]
    1a12:	2101      	movs	r1, #1
    1a14:	430a      	orrs	r2, r1
    1a16:	705a      	strb	r2, [r3, #1]
        param->temp_key->is_64 = 0;
    1a18:	68e2      	ldr	r2, [r4, #12]
    1a1a:	2100      	movs	r1, #0
    1a1c:	2342      	movs	r3, #66	; 0x42
    1a1e:	54d1      	strb	r1, [r2, r3]
    return ATCA_SUCCESS;
    1a20:	2000      	movs	r0, #0
    1a22:	e7bc      	b.n	199e <atcah_nonce+0x22>
            memcpy(param->temp_key->value, param->rand_out, 32);
    1a24:	2220      	movs	r2, #32
    1a26:	0028      	movs	r0, r5
    1a28:	4b04      	ldr	r3, [pc, #16]	; (1a3c <atcah_nonce+0xc0>)
    1a2a:	4798      	blx	r3
    1a2c:	e7f4      	b.n	1a18 <atcah_nonce+0x9c>
        return ATCA_BAD_PARAM;
    1a2e:	20e2      	movs	r0, #226	; 0xe2
    1a30:	e7b5      	b.n	199e <atcah_nonce+0x22>
    1a32:	20e2      	movs	r0, #226	; 0xe2
    1a34:	e7b3      	b.n	199e <atcah_nonce+0x22>
            return ATCA_BAD_PARAM;
    1a36:	20e2      	movs	r0, #226	; 0xe2
    1a38:	e7b1      	b.n	199e <atcah_nonce+0x22>
    1a3a:	46c0      	nop			; (mov r8, r8)
    1a3c:	00019d89 	.word	0x00019d89
    1a40:	00000fc1 	.word	0x00000fc1

00001a44 <atcah_gen_dig>:

 * \param[in, out] param pointer to parameter structure
 * \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS atcah_gen_dig(struct atca_gen_dig_in_out *param)
{
    1a44:	b530      	push	{r4, r5, lr}
    1a46:	b099      	sub	sp, #100	; 0x64
    1a48:	0004      	movs	r4, r0
    uint8_t temporary[ATCA_MSG_SIZE_GEN_DIG];
    uint8_t *p_temp;

    // Check parameters
    if (param->sn == NULL || param->temp_key == NULL)
    1a4a:	6883      	ldr	r3, [r0, #8]
    1a4c:	2b00      	cmp	r3, #0
    1a4e:	d100      	bne.n	1a52 <atcah_gen_dig+0xe>
    1a50:	e093      	b.n	1b7a <atcah_gen_dig+0x136>
    1a52:	6943      	ldr	r3, [r0, #20]
    1a54:	2b00      	cmp	r3, #0
    1a56:	d100      	bne.n	1a5a <atcah_gen_dig+0x16>
    1a58:	e092      	b.n	1b80 <atcah_gen_dig+0x13c>
    {
        return ATCA_BAD_PARAM;
    }
    if (param->zone != GENDIG_ZONE_SHARED_NONCE && param->stored_value == NULL)
    1a5a:	7805      	ldrb	r5, [r0, #0]
    1a5c:	2d03      	cmp	r5, #3
    1a5e:	d01c      	beq.n	1a9a <atcah_gen_dig+0x56>
    1a60:	68c3      	ldr	r3, [r0, #12]
    1a62:	2b00      	cmp	r3, #0
    1a64:	d100      	bne.n	1a68 <atcah_gen_dig+0x24>
    1a66:	e08d      	b.n	1b84 <atcah_gen_dig+0x140>
    {
        return ATCA_BAD_PARAM;  // Stored value can only be null with the shared_nonce mode
    }
    if ((param->zone == GENDIG_ZONE_SHARED_NONCE || (param->zone == GENDIG_ZONE_DATA && param->is_key_nomac)) && param->other_data == NULL)
    1a68:	2d02      	cmp	r5, #2
    1a6a:	d004      	beq.n	1a76 <atcah_gen_dig+0x32>
    {
        return ATCA_BAD_PARAM;  // Other data is required in these cases
    }
    if (param->zone > 5)
    {
        return ATCA_BAD_PARAM;  // Unknown zone
    1a6c:	20e2      	movs	r0, #226	; 0xe2
    if (param->zone > 5)
    1a6e:	2d05      	cmp	r5, #5
    1a70:	d900      	bls.n	1a74 <atcah_gen_dig+0x30>
    1a72:	e083      	b.n	1b7c <atcah_gen_dig+0x138>
    1a74:	e019      	b.n	1aaa <atcah_gen_dig+0x66>
    if ((param->zone == GENDIG_ZONE_SHARED_NONCE || (param->zone == GENDIG_ZONE_DATA && param->is_key_nomac)) && param->other_data == NULL)
    1a76:	7903      	ldrb	r3, [r0, #4]
    1a78:	2b00      	cmp	r3, #0
    1a7a:	d000      	beq.n	1a7e <atcah_gen_dig+0x3a>
    1a7c:	e086      	b.n	1b8c <atcah_gen_dig+0x148>
    {
        memcpy(p_temp, param->other_data, ATCA_KEY_SIZE);
    }
    else
    {
        memcpy(p_temp, param->stored_value, ATCA_KEY_SIZE);
    1a7e:	2220      	movs	r2, #32
    1a80:	68e1      	ldr	r1, [r4, #12]
    1a82:	4668      	mov	r0, sp
    1a84:	4b44      	ldr	r3, [pc, #272]	; (1b98 <atcah_gen_dig+0x154>)
    1a86:	4798      	blx	r3
    }
    p_temp += ATCA_KEY_SIZE;

    if (param->zone == GENDIG_ZONE_DATA && param->is_key_nomac)
    1a88:	7923      	ldrb	r3, [r4, #4]
    1a8a:	2b00      	cmp	r3, #0
    1a8c:	d012      	beq.n	1ab4 <atcah_gen_dig+0x70>
    {
        // If a key has the SlotConfig.NoMac bit set, then opcode and parameters come from OtherData
        memcpy(p_temp, param->other_data, 4);
    1a8e:	2204      	movs	r2, #4
    1a90:	6921      	ldr	r1, [r4, #16]
    1a92:	a808      	add	r0, sp, #32
    1a94:	4b40      	ldr	r3, [pc, #256]	; (1b98 <atcah_gen_dig+0x154>)
    1a96:	4798      	blx	r3
        p_temp += 4;
    1a98:	e018      	b.n	1acc <atcah_gen_dig+0x88>
    if ((param->zone == GENDIG_ZONE_SHARED_NONCE || (param->zone == GENDIG_ZONE_DATA && param->is_key_nomac)) && param->other_data == NULL)
    1a9a:	6901      	ldr	r1, [r0, #16]
    1a9c:	2900      	cmp	r1, #0
    1a9e:	d100      	bne.n	1aa2 <atcah_gen_dig+0x5e>
    1aa0:	e072      	b.n	1b88 <atcah_gen_dig+0x144>
    if (param->zone == GENDIG_ZONE_SHARED_NONCE && param->key_id & 0x8000)
    1aa2:	2202      	movs	r2, #2
    1aa4:	5e83      	ldrsh	r3, [r0, r2]
    1aa6:	2b00      	cmp	r3, #0
    1aa8:	db44      	blt.n	1b34 <atcah_gen_dig+0xf0>
        memcpy(p_temp, param->stored_value, ATCA_KEY_SIZE);
    1aaa:	2220      	movs	r2, #32
    1aac:	68e1      	ldr	r1, [r4, #12]
    1aae:	4668      	mov	r0, sp
    1ab0:	4b39      	ldr	r3, [pc, #228]	; (1b98 <atcah_gen_dig+0x154>)
    1ab2:	4798      	blx	r3
    }
    else
    {
        // (2) 1 byte Opcode
        *p_temp++ = ATCA_GENDIG;
    1ab4:	2215      	movs	r2, #21
    1ab6:	2320      	movs	r3, #32
    1ab8:	4669      	mov	r1, sp
    1aba:	54ca      	strb	r2, [r1, r3]

        // (3) 1 byte Param1 (zone)
        *p_temp++ = param->zone;
    1abc:	3301      	adds	r3, #1
    1abe:	54cd      	strb	r5, [r1, r3]

        // (4) 2 bytes Param2 (keyID)
        *p_temp++ = (uint8_t)(param->key_id & 0xFF);
    1ac0:	8863      	ldrh	r3, [r4, #2]
    1ac2:	2222      	movs	r2, #34	; 0x22
    1ac4:	548b      	strb	r3, [r1, r2]
        *p_temp++ = (uint8_t)(param->key_id >> 8);
    1ac6:	0a1b      	lsrs	r3, r3, #8
    1ac8:	3201      	adds	r2, #1
    1aca:	548b      	strb	r3, [r1, r2]
    }

    // (5) 1 byte SN[8]
    *p_temp++ = param->sn[8];
    1acc:	68a3      	ldr	r3, [r4, #8]
    1ace:	7a19      	ldrb	r1, [r3, #8]
    1ad0:	2224      	movs	r2, #36	; 0x24
    1ad2:	4668      	mov	r0, sp
    1ad4:	5481      	strb	r1, [r0, r2]

    // (6) 2 bytes SN[0:1]
    *p_temp++ = param->sn[0];
    1ad6:	7819      	ldrb	r1, [r3, #0]
    1ad8:	3201      	adds	r2, #1
    1ada:	5481      	strb	r1, [r0, r2]
    *p_temp++ = param->sn[1];
    1adc:	785a      	ldrb	r2, [r3, #1]
    1ade:	2326      	movs	r3, #38	; 0x26
    1ae0:	54c2      	strb	r2, [r0, r3]

    // (7) 25 zeros
    memset(p_temp, 0, ATCA_GENDIG_ZEROS_SIZE);
    1ae2:	2219      	movs	r2, #25
    1ae4:	2100      	movs	r1, #0
    1ae6:	2027      	movs	r0, #39	; 0x27
    1ae8:	4468      	add	r0, sp
    1aea:	4b2c      	ldr	r3, [pc, #176]	; (1b9c <atcah_gen_dig+0x158>)
    1aec:	4798      	blx	r3
    p_temp += ATCA_GENDIG_ZEROS_SIZE;

    if (param->zone == GENDIG_ZONE_SHARED_NONCE && !(param->key_id & 0x8000))
    1aee:	7823      	ldrb	r3, [r4, #0]
    1af0:	2b03      	cmp	r3, #3
    1af2:	d024      	beq.n	1b3e <atcah_gen_dig+0xfa>
    {
        memcpy(p_temp, param->other_data, ATCA_KEY_SIZE);       // (8) 32 bytes OtherData
    }
    else
    {
        memcpy(p_temp, param->temp_key->value, ATCA_KEY_SIZE);  // (8) 32 bytes TempKey
    1af4:	2220      	movs	r2, #32
    1af6:	6961      	ldr	r1, [r4, #20]
    1af8:	a810      	add	r0, sp, #64	; 0x40
    1afa:	4b27      	ldr	r3, [pc, #156]	; (1b98 <atcah_gen_dig+0x154>)
    1afc:	4798      	blx	r3

    }
    // Calculate SHA256 to get the new TempKey
    atcac_sw_sha2_256(temporary, ATCA_MSG_SIZE_GEN_DIG, param->temp_key->value);
    1afe:	6962      	ldr	r2, [r4, #20]
    1b00:	2160      	movs	r1, #96	; 0x60
    1b02:	4668      	mov	r0, sp
    1b04:	4b26      	ldr	r3, [pc, #152]	; (1ba0 <atcah_gen_dig+0x15c>)
    1b06:	4798      	blx	r3

    // Update TempKey fields
    param->temp_key->valid = 1;
    1b08:	6963      	ldr	r3, [r4, #20]
    1b0a:	3340      	adds	r3, #64	; 0x40
    1b0c:	785a      	ldrb	r2, [r3, #1]
    1b0e:	2101      	movs	r1, #1
    1b10:	430a      	orrs	r2, r1
    1b12:	705a      	strb	r2, [r3, #1]

    if ((param->zone == GENDIG_ZONE_DATA) && (param->key_id <= 15))
    1b14:	7823      	ldrb	r3, [r4, #0]
    1b16:	2b02      	cmp	r3, #2
    1b18:	d01b      	beq.n	1b52 <atcah_gen_dig+0x10e>
        param->temp_key->gen_dig_data = 1;
        param->temp_key->key_id = (param->key_id & 0xF);    // mask lower 4-bit only
    }
    else
    {
        param->temp_key->gen_dig_data = 0;
    1b1a:	6961      	ldr	r1, [r4, #20]
    1b1c:	2340      	movs	r3, #64	; 0x40
    1b1e:	5cca      	ldrb	r2, [r1, r3]
    1b20:	2020      	movs	r0, #32
    1b22:	4382      	bics	r2, r0
    1b24:	54ca      	strb	r2, [r1, r3]
        param->temp_key->key_id = 0;
    1b26:	6961      	ldr	r1, [r4, #20]
    1b28:	5cca      	ldrb	r2, [r1, r3]
    1b2a:	3811      	subs	r0, #17
    1b2c:	4382      	bics	r2, r0
    1b2e:	54ca      	strb	r2, [r1, r3]
    }

    return ATCA_SUCCESS;
    1b30:	2000      	movs	r0, #0
    1b32:	e023      	b.n	1b7c <atcah_gen_dig+0x138>
        memcpy(p_temp, param->other_data, ATCA_KEY_SIZE);
    1b34:	2220      	movs	r2, #32
    1b36:	4668      	mov	r0, sp
    1b38:	4b17      	ldr	r3, [pc, #92]	; (1b98 <atcah_gen_dig+0x154>)
    1b3a:	4798      	blx	r3
    1b3c:	e7ba      	b.n	1ab4 <atcah_gen_dig+0x70>
    if (param->zone == GENDIG_ZONE_SHARED_NONCE && !(param->key_id & 0x8000))
    1b3e:	2202      	movs	r2, #2
    1b40:	5ea3      	ldrsh	r3, [r4, r2]
    1b42:	2b00      	cmp	r3, #0
    1b44:	dbd6      	blt.n	1af4 <atcah_gen_dig+0xb0>
        memcpy(p_temp, param->other_data, ATCA_KEY_SIZE);       // (8) 32 bytes OtherData
    1b46:	2220      	movs	r2, #32
    1b48:	6921      	ldr	r1, [r4, #16]
    1b4a:	a810      	add	r0, sp, #64	; 0x40
    1b4c:	4b12      	ldr	r3, [pc, #72]	; (1b98 <atcah_gen_dig+0x154>)
    1b4e:	4798      	blx	r3
    1b50:	e7d5      	b.n	1afe <atcah_gen_dig+0xba>
    if ((param->zone == GENDIG_ZONE_DATA) && (param->key_id <= 15))
    1b52:	8863      	ldrh	r3, [r4, #2]
    1b54:	2b0f      	cmp	r3, #15
    1b56:	d8e0      	bhi.n	1b1a <atcah_gen_dig+0xd6>
        param->temp_key->gen_dig_data = 1;
    1b58:	6961      	ldr	r1, [r4, #20]
    1b5a:	2240      	movs	r2, #64	; 0x40
    1b5c:	5c8b      	ldrb	r3, [r1, r2]
    1b5e:	2020      	movs	r0, #32
    1b60:	4303      	orrs	r3, r0
    1b62:	548b      	strb	r3, [r1, r2]
        param->temp_key->key_id = (param->key_id & 0xF);    // mask lower 4-bit only
    1b64:	6960      	ldr	r0, [r4, #20]
    1b66:	8861      	ldrh	r1, [r4, #2]
    1b68:	230f      	movs	r3, #15
    1b6a:	4019      	ands	r1, r3
    1b6c:	5c83      	ldrb	r3, [r0, r2]
    1b6e:	240f      	movs	r4, #15
    1b70:	43a3      	bics	r3, r4
    1b72:	430b      	orrs	r3, r1
    1b74:	5483      	strb	r3, [r0, r2]
    return ATCA_SUCCESS;
    1b76:	2000      	movs	r0, #0
        param->temp_key->key_id = (param->key_id & 0xF);    // mask lower 4-bit only
    1b78:	e000      	b.n	1b7c <atcah_gen_dig+0x138>
        return ATCA_BAD_PARAM;
    1b7a:	20e2      	movs	r0, #226	; 0xe2
}
    1b7c:	b019      	add	sp, #100	; 0x64
    1b7e:	bd30      	pop	{r4, r5, pc}
        return ATCA_BAD_PARAM;
    1b80:	20e2      	movs	r0, #226	; 0xe2
    1b82:	e7fb      	b.n	1b7c <atcah_gen_dig+0x138>
        return ATCA_BAD_PARAM;  // Stored value can only be null with the shared_nonce mode
    1b84:	20e2      	movs	r0, #226	; 0xe2
    1b86:	e7f9      	b.n	1b7c <atcah_gen_dig+0x138>
        return ATCA_BAD_PARAM;  // Other data is required in these cases
    1b88:	20e2      	movs	r0, #226	; 0xe2
    1b8a:	e7f7      	b.n	1b7c <atcah_gen_dig+0x138>
    if ((param->zone == GENDIG_ZONE_SHARED_NONCE || (param->zone == GENDIG_ZONE_DATA && param->is_key_nomac)) && param->other_data == NULL)
    1b8c:	6903      	ldr	r3, [r0, #16]
    1b8e:	2b00      	cmp	r3, #0
    1b90:	d000      	beq.n	1b94 <atcah_gen_dig+0x150>
    1b92:	e774      	b.n	1a7e <atcah_gen_dig+0x3a>
        return ATCA_BAD_PARAM;  // Other data is required in these cases
    1b94:	20e2      	movs	r0, #226	; 0xe2
    1b96:	e7f1      	b.n	1b7c <atcah_gen_dig+0x138>
    1b98:	00019d89 	.word	0x00019d89
    1b9c:	00019ead 	.word	0x00019ead
    1ba0:	00000fc1 	.word	0x00000fc1

00001ba4 <parser_serial_data_handler>:
};

char aParserData[PARSER_MAX_DATA_LEN];

void parser_serial_data_handler(void)
{
    1ba4:	b510      	push	{r4, lr}
    int rxChar;
   /* verify if there was any character received*/
    if((-1) != (rxChar = sio2host_getchar_nowait()))
    1ba6:	4b05      	ldr	r3, [pc, #20]	; (1bbc <parser_serial_data_handler+0x18>)
    1ba8:	4798      	blx	r3
    1baa:	1c43      	adds	r3, r0, #1
    1bac:	d005      	beq.n	1bba <parser_serial_data_handler+0x16>
    {
        Parser_RxAddChar( (uint8_t)rxChar );
    1bae:	b2c0      	uxtb	r0, r0
    1bb0:	4b03      	ldr	r3, [pc, #12]	; (1bc0 <parser_serial_data_handler+0x1c>)
    1bb2:	4798      	blx	r3
        SYSTEM_PostTask(APP_TASK_ID);
    1bb4:	2010      	movs	r0, #16
    1bb6:	4b03      	ldr	r3, [pc, #12]	; (1bc4 <parser_serial_data_handler+0x20>)
    1bb8:	4798      	blx	r3
    }
}
    1bba:	bd10      	pop	{r4, pc}
    1bbc:	00007d99 	.word	0x00007d99
    1bc0:	00004025 	.word	0x00004025
    1bc4:	0000f4a1 	.word	0x0000f4a1

00001bc8 <Parser_Init>:

void Parser_Init(void)
{
    1bc8:	b510      	push	{r4, lr}
    1bca:	b086      	sub	sp, #24
    Parser_RxClearBuffer();
    1bcc:	4b08      	ldr	r3, [pc, #32]	; (1bf0 <Parser_Init+0x28>)
    1bce:	4798      	blx	r3
    /* Initialize LoRaWAN stack */
    Parser_LorawanInit();
    1bd0:	4b08      	ldr	r3, [pc, #32]	; (1bf4 <Parser_Init+0x2c>)
    1bd2:	4798      	blx	r3
	
	{
		PdsFileMarks_t appFileMarks;
		appFileMarks.fileMarkListAddr = appPdsFileOps;
    1bd4:	ab02      	add	r3, sp, #8
		appFileMarks.numItems = (uint8_t)(PDS_APP_FILEID_MAX_VALUE & 0x00FF);
    1bd6:	2201      	movs	r2, #1
    1bd8:	711a      	strb	r2, [r3, #4]
		appFileMarks.itemListAddr = appPdsFileItemList;
		appFileMarks.fIDcb = NULL;
    1bda:	2200      	movs	r2, #0
		PDS_RegFile(PDS_FILE_APP_DATA1_13_IDX, appFileMarks);
    1bdc:	9200      	str	r2, [sp, #0]
    1bde:	4906      	ldr	r1, [pc, #24]	; (1bf8 <Parser_Init+0x30>)
    1be0:	9a03      	ldr	r2, [sp, #12]
    1be2:	4b06      	ldr	r3, [pc, #24]	; (1bfc <Parser_Init+0x34>)
    1be4:	200c      	movs	r0, #12
    1be6:	4c06      	ldr	r4, [pc, #24]	; (1c00 <Parser_Init+0x38>)
    1be8:	47a0      	blx	r4
	}
}
    1bea:	b006      	add	sp, #24
    1bec:	bd10      	pop	{r4, pc}
    1bee:	46c0      	nop			; (mov r8, r8)
    1bf0:	00003f9d 	.word	0x00003f9d
    1bf4:	000022ad 	.word	0x000022ad
    1bf8:	20001384 	.word	0x20001384
    1bfc:	20000000 	.word	0x20000000
    1c00:	0000e3c1 	.word	0x0000e3c1

00001c04 <Parser_Main>:

void Parser_Main (void)
{
    1c04:	b5f0      	push	{r4, r5, r6, r7, lr}
    1c06:	46de      	mov	lr, fp
    1c08:	4657      	mov	r7, sl
    1c0a:	464e      	mov	r6, r9
    1c0c:	4645      	mov	r5, r8
    1c0e:	b5e0      	push	{r5, r6, r7, lr}
    1c10:	b08b      	sub	sp, #44	; 0x2c
    uint8_t cmdTotalNb;
    uint8_t startCmdSize = gParserStartCmdSize;
    1c12:	4b83      	ldr	r3, [pc, #524]	; (1e20 <Parser_Main+0x21c>)
    1c14:	781b      	ldrb	r3, [r3, #0]
    1c16:	4698      	mov	r8, r3
    const parserCmdEntry_t* pStartCmd = gpParserStartCmd;
    1c18:	4b82      	ldr	r3, [pc, #520]	; (1e24 <Parser_Main+0x220>)
    1c1a:	681b      	ldr	r3, [r3, #0]
    1c1c:	9301      	str	r3, [sp, #4]
    uint8_t savedCmdIdx;
    parserCmdEntry_t tempCmd;

    /* verify if there was any character received */
    int rxChar;
    while((-1) != (rxChar = sio2host_getchar_nowait()))
    1c1e:	4c82      	ldr	r4, [pc, #520]	; (1e28 <Parser_Main+0x224>)
    {
        Parser_RxAddChar( (uint8_t)rxChar );
    1c20:	4d82      	ldr	r5, [pc, #520]	; (1e2c <Parser_Main+0x228>)
    while((-1) != (rxChar = sio2host_getchar_nowait()))
    1c22:	e001      	b.n	1c28 <Parser_Main+0x24>
        Parser_RxAddChar( (uint8_t)rxChar );
    1c24:	b2c0      	uxtb	r0, r0
    1c26:	47a8      	blx	r5
    while((-1) != (rxChar = sio2host_getchar_nowait()))
    1c28:	47a0      	blx	r4
    1c2a:	1c43      	adds	r3, r0, #1
    1c2c:	d1fa      	bne.n	1c24 <Parser_Main+0x20>
    }

    /* Verify if an entire command is received */
    if(mRxParserCmd.bCmdStatus)
    1c2e:	4b80      	ldr	r3, [pc, #512]	; (1e30 <Parser_Main+0x22c>)
    1c30:	4a80      	ldr	r2, [pc, #512]	; (1e34 <Parser_Main+0x230>)
    1c32:	5cd3      	ldrb	r3, [r2, r3]
    1c34:	2b00      	cmp	r3, #0
    1c36:	d100      	bne.n	1c3a <Parser_Main+0x36>
    1c38:	e0d7      	b.n	1dea <Parser_Main+0x1e6>
    {
        cmdTotalNb = mRxParserCmd.crtWordIdx + 1;
    1c3a:	4b7f      	ldr	r3, [pc, #508]	; (1e38 <Parser_Main+0x234>)
    1c3c:	5cd3      	ldrb	r3, [r2, r3]
    1c3e:	3301      	adds	r3, #1
    1c40:	b2db      	uxtb	r3, r3
    1c42:	469a      	mov	sl, r3
        crtWordIdx = 0;

        while(cmdTotalNb)
    1c44:	2b00      	cmp	r3, #0
    1c46:	d100      	bne.n	1c4a <Parser_Main+0x46>
    1c48:	e0cd      	b.n	1de6 <Parser_Main+0x1e2>
    1c4a:	2300      	movs	r3, #0
    1c4c:	469b      	mov	fp, r3

    /* Validate and find the group command */
    for(cmdCtr = 0; cmdCtr < nbParserCmd; cmdCtr ++)
    {
        parserCmdEntry = *(pParserCmd + cmdCtr);
        if(strcmp(parserCmdEntry.pCommand, (char*)&mRxParserCmd.cmd[mRxParserCmd.wordStartPos[rxCmdIdx]]) == 0U)
    1c4e:	4691      	mov	r9, r2
    1c50:	4f7a      	ldr	r7, [pc, #488]	; (1e3c <Parser_Main+0x238>)
    1c52:	4646      	mov	r6, r8
    1c54:	46d8      	mov	r8, fp
    1c56:	46d3      	mov	fp, sl
    1c58:	e01b      	b.n	1c92 <Parser_Main+0x8e>
    1c5a:	4656      	mov	r6, sl
            /* Command found */
            break;
        }
    }

    if(cmdCtr < nbParserCmd)
    1c5c:	42a6      	cmp	r6, r4
    1c5e:	d800      	bhi.n	1c62 <Parser_Main+0x5e>
    1c60:	e0c1      	b.n	1de6 <Parser_Main+0x1e2>
    {
        if(parserCmdEntry.pNextParserCmd == NULL)
    1c62:	9b00      	ldr	r3, [sp, #0]
    1c64:	685b      	ldr	r3, [r3, #4]
    1c66:	9303      	str	r3, [sp, #12]
    1c68:	2b00      	cmp	r3, #0
    1c6a:	d02f      	beq.n	1ccc <Parser_Main+0xc8>
                tempCmd = *(pStartCmd + savedCmdIdx);
    1c6c:	0124      	lsls	r4, r4, #4
    1c6e:	9b01      	ldr	r3, [sp, #4]
    1c70:	469c      	mov	ip, r3
    1c72:	4464      	add	r4, ip
                crtWordIdx ++;
    1c74:	4643      	mov	r3, r8
    1c76:	3301      	adds	r3, #1
    1c78:	b2db      	uxtb	r3, r3
    1c7a:	4698      	mov	r8, r3
                cmdTotalNb --;
    1c7c:	465b      	mov	r3, fp
    1c7e:	3b01      	subs	r3, #1
    1c80:	b2db      	uxtb	r3, r3
    1c82:	469b      	mov	fp, r3
                startCmdSize = tempCmd.nextParserCmdSize;
    1c84:	7b26      	ldrb	r6, [r4, #12]
                pStartCmd = tempCmd.pNextParserCmd;
    1c86:	6863      	ldr	r3, [r4, #4]
    1c88:	9301      	str	r3, [sp, #4]
        while(cmdTotalNb)
    1c8a:	465b      	mov	r3, fp
    1c8c:	2b00      	cmp	r3, #0
    1c8e:	d100      	bne.n	1c92 <Parser_Main+0x8e>
    1c90:	e0a9      	b.n	1de6 <Parser_Main+0x1e2>
    parserCmdInfo.pReplyCmd = NULL; // (char*)gapParserStatus[INVALID_PARAM_IDX]; /* Reply with error by default */;
    1c92:	2300      	movs	r3, #0
    1c94:	9309      	str	r3, [sp, #36]	; 0x24
    for(cmdCtr = 0; cmdCtr < nbParserCmd; cmdCtr ++)
    1c96:	2e00      	cmp	r6, #0
    1c98:	d100      	bne.n	1c9c <Parser_Main+0x98>
    1c9a:	e0a4      	b.n	1de6 <Parser_Main+0x1e2>
    1c9c:	9d01      	ldr	r5, [sp, #4]
    1c9e:	2400      	movs	r4, #0
        if(strcmp(parserCmdEntry.pCommand, (char*)&mRxParserCmd.cmd[mRxParserCmd.wordStartPos[rxCmdIdx]]) == 0U)
    1ca0:	4643      	mov	r3, r8
    1ca2:	9302      	str	r3, [sp, #8]
    1ca4:	331d      	adds	r3, #29
    1ca6:	33ff      	adds	r3, #255	; 0xff
    1ca8:	005b      	lsls	r3, r3, #1
    1caa:	444b      	add	r3, r9
    1cac:	3302      	adds	r3, #2
    1cae:	46b2      	mov	sl, r6
    1cb0:	001e      	movs	r6, r3
        parserCmdEntry = *(pParserCmd + cmdCtr);
    1cb2:	9500      	str	r5, [sp, #0]
        if(strcmp(parserCmdEntry.pCommand, (char*)&mRxParserCmd.cmd[mRxParserCmd.wordStartPos[rxCmdIdx]]) == 0U)
    1cb4:	8831      	ldrh	r1, [r6, #0]
    1cb6:	4449      	add	r1, r9
    1cb8:	6828      	ldr	r0, [r5, #0]
    1cba:	47b8      	blx	r7
    1cbc:	2800      	cmp	r0, #0
    1cbe:	d0cc      	beq.n	1c5a <Parser_Main+0x56>
    for(cmdCtr = 0; cmdCtr < nbParserCmd; cmdCtr ++)
    1cc0:	3401      	adds	r4, #1
    1cc2:	b2e4      	uxtb	r4, r4
    1cc4:	3510      	adds	r5, #16
    1cc6:	4554      	cmp	r4, sl
    1cc8:	d1f3      	bne.n	1cb2 <Parser_Main+0xae>
    1cca:	e08c      	b.n	1de6 <Parser_Main+0x1e2>
    1ccc:	46c3      	mov	fp, r8
        parserCmdEntry = *(pParserCmd + cmdCtr);
    1cce:	9b00      	ldr	r3, [sp, #0]
    1cd0:	689c      	ldr	r4, [r3, #8]
        {
            /* No other commands, just execute the callback */
            if(parserCmdEntry.pActionCbFct)
    1cd2:	2c00      	cmp	r4, #0
    1cd4:	d100      	bne.n	1cd8 <Parser_Main+0xd4>
    1cd6:	e086      	b.n	1de6 <Parser_Main+0x1e2>
        parserCmdEntry = *(pParserCmd + cmdCtr);
    1cd8:	7b5a      	ldrb	r2, [r3, #13]
            {
                if((mRxParserCmd.crtWordIdx - rxCmdIdx) == parserCmdEntry.flags)
    1cda:	4b57      	ldr	r3, [pc, #348]	; (1e38 <Parser_Main+0x234>)
    1cdc:	4955      	ldr	r1, [pc, #340]	; (1e34 <Parser_Main+0x230>)
    1cde:	5ccb      	ldrb	r3, [r1, r3]
    1ce0:	9902      	ldr	r1, [sp, #8]
    1ce2:	1a5b      	subs	r3, r3, r1
    1ce4:	4293      	cmp	r3, r2
    1ce6:	d000      	beq.n	1cea <Parser_Main+0xe6>
    1ce8:	e07d      	b.n	1de6 <Parser_Main+0x1e2>
                {
                    uint8_t iCtr = rxCmdIdx + 1;
                    bool bInvalidParam = false;
                    if(parserCmdEntry.flags > 0)
    1cea:	2a00      	cmp	r2, #0
    1cec:	d014      	beq.n	1d18 <Parser_Main+0x114>
                    uint8_t iCtr = rxCmdIdx + 1;
    1cee:	4643      	mov	r3, r8
    1cf0:	3301      	adds	r3, #1
    1cf2:	b2db      	uxtb	r3, r3
                    {
                        do
                        {
                            //Make sure that the parameters are not empty
                            if(mRxParserCmd.wordLen[iCtr ++] == 0)
    1cf4:	4e4f      	ldr	r6, [pc, #316]	; (1e34 <Parser_Main+0x230>)
                            {
                                bInvalidParam = true;
                                break;
                            }
                        }while(iCtr <= mRxParserCmd.crtWordIdx);
    1cf6:	0035      	movs	r5, r6
    1cf8:	484f      	ldr	r0, [pc, #316]	; (1e38 <Parser_Main+0x234>)
                            if(mRxParserCmd.wordLen[iCtr ++] == 0)
    1cfa:	1c59      	adds	r1, r3, #1
    1cfc:	b2c9      	uxtb	r1, r1
    1cfe:	3311      	adds	r3, #17
    1d00:	33ff      	adds	r3, #255	; 0xff
    1d02:	005b      	lsls	r3, r3, #1
    1d04:	18f3      	adds	r3, r6, r3
    1d06:	88db      	ldrh	r3, [r3, #6]
    1d08:	b29b      	uxth	r3, r3
    1d0a:	2b00      	cmp	r3, #0
    1d0c:	d06b      	beq.n	1de6 <Parser_Main+0x1e2>
                        }while(iCtr <= mRxParserCmd.crtWordIdx);
    1d0e:	5c2a      	ldrb	r2, [r5, r0]
    1d10:	b2d2      	uxtb	r2, r2
                            if(mRxParserCmd.wordLen[iCtr ++] == 0)
    1d12:	000b      	movs	r3, r1
                        }while(iCtr <= mRxParserCmd.crtWordIdx);
    1d14:	4291      	cmp	r1, r2
    1d16:	d9f0      	bls.n	1cfa <Parser_Main+0xf6>
                    }

                    if(bInvalidParam == false)
                    {
                        memset(&parserCmdInfo, 0, sizeof(parserCmdInfo_t));
    1d18:	2218      	movs	r2, #24
    1d1a:	2100      	movs	r1, #0
    1d1c:	a804      	add	r0, sp, #16
    1d1e:	4b48      	ldr	r3, [pc, #288]	; (1e40 <Parser_Main+0x23c>)
    1d20:	4798      	blx	r3

                        if((rxCmdIdx + 1U < PARSER_DEF_CMD_MAX_IDX) && (mRxParserCmd.wordLen[rxCmdIdx + 1U] > 0U))
    1d22:	465a      	mov	r2, fp
    1d24:	465b      	mov	r3, fp
    1d26:	3301      	adds	r3, #1
    1d28:	2b09      	cmp	r3, #9
    1d2a:	d965      	bls.n	1df8 <Parser_Main+0x1f4>
                        {
                            parserCmdInfo.pParam1 = (char*)(&mRxParserCmd.cmd[mRxParserCmd.wordStartPos[rxCmdIdx + 1]]);
                        }

                        if((rxCmdIdx + 2U < PARSER_DEF_CMD_MAX_IDX) && (mRxParserCmd.wordLen[rxCmdIdx + 2U] > 0U))
    1d2c:	1c93      	adds	r3, r2, #2
    1d2e:	2b09      	cmp	r3, #9
    1d30:	d810      	bhi.n	1d54 <Parser_Main+0x150>
    1d32:	3311      	adds	r3, #17
    1d34:	33ff      	adds	r3, #255	; 0xff
    1d36:	005b      	lsls	r3, r3, #1
    1d38:	493e      	ldr	r1, [pc, #248]	; (1e34 <Parser_Main+0x230>)
    1d3a:	18cb      	adds	r3, r1, r3
    1d3c:	88db      	ldrh	r3, [r3, #6]
    1d3e:	b29b      	uxth	r3, r3
    1d40:	2b00      	cmp	r3, #0
    1d42:	d007      	beq.n	1d54 <Parser_Main+0x150>
                        {
                            parserCmdInfo.pParam2 = (char*)(&mRxParserCmd.cmd[mRxParserCmd.wordStartPos[rxCmdIdx + 2]]);
    1d44:	9b02      	ldr	r3, [sp, #8]
    1d46:	331f      	adds	r3, #31
    1d48:	33ff      	adds	r3, #255	; 0xff
    1d4a:	005b      	lsls	r3, r3, #1
    1d4c:	18cb      	adds	r3, r1, r3
    1d4e:	885b      	ldrh	r3, [r3, #2]
    1d50:	18c9      	adds	r1, r1, r3
    1d52:	9105      	str	r1, [sp, #20]
                        }

                        if((rxCmdIdx + 3U < PARSER_DEF_CMD_MAX_IDX) && (mRxParserCmd.wordLen[rxCmdIdx + 3U] > 0U))
    1d54:	1cd3      	adds	r3, r2, #3
    1d56:	2b09      	cmp	r3, #9
    1d58:	d810      	bhi.n	1d7c <Parser_Main+0x178>
    1d5a:	3311      	adds	r3, #17
    1d5c:	33ff      	adds	r3, #255	; 0xff
    1d5e:	005b      	lsls	r3, r3, #1
    1d60:	4934      	ldr	r1, [pc, #208]	; (1e34 <Parser_Main+0x230>)
    1d62:	18cb      	adds	r3, r1, r3
    1d64:	88db      	ldrh	r3, [r3, #6]
    1d66:	b29b      	uxth	r3, r3
    1d68:	2b00      	cmp	r3, #0
    1d6a:	d007      	beq.n	1d7c <Parser_Main+0x178>
                        {
                            parserCmdInfo.pParam3 = (char*)(&mRxParserCmd.cmd[mRxParserCmd.wordStartPos[rxCmdIdx + 3]]);
    1d6c:	9b02      	ldr	r3, [sp, #8]
    1d6e:	3320      	adds	r3, #32
    1d70:	33ff      	adds	r3, #255	; 0xff
    1d72:	005b      	lsls	r3, r3, #1
    1d74:	18cb      	adds	r3, r1, r3
    1d76:	885b      	ldrh	r3, [r3, #2]
    1d78:	18c9      	adds	r1, r1, r3
    1d7a:	9106      	str	r1, [sp, #24]
                        }

                        if((rxCmdIdx + 4U < PARSER_DEF_CMD_MAX_IDX) && (mRxParserCmd.wordLen[rxCmdIdx + 4U] > 0U))
    1d7c:	1d13      	adds	r3, r2, #4
    1d7e:	2b09      	cmp	r3, #9
    1d80:	d810      	bhi.n	1da4 <Parser_Main+0x1a0>
    1d82:	3311      	adds	r3, #17
    1d84:	33ff      	adds	r3, #255	; 0xff
    1d86:	005b      	lsls	r3, r3, #1
    1d88:	492a      	ldr	r1, [pc, #168]	; (1e34 <Parser_Main+0x230>)
    1d8a:	18cb      	adds	r3, r1, r3
    1d8c:	88db      	ldrh	r3, [r3, #6]
    1d8e:	b29b      	uxth	r3, r3
    1d90:	2b00      	cmp	r3, #0
    1d92:	d007      	beq.n	1da4 <Parser_Main+0x1a0>
                        {
                            parserCmdInfo.pParam4 = (char*)(&mRxParserCmd.cmd[mRxParserCmd.wordStartPos[rxCmdIdx + 4]]);
    1d94:	9b02      	ldr	r3, [sp, #8]
    1d96:	3321      	adds	r3, #33	; 0x21
    1d98:	33ff      	adds	r3, #255	; 0xff
    1d9a:	005b      	lsls	r3, r3, #1
    1d9c:	18cb      	adds	r3, r1, r3
    1d9e:	885b      	ldrh	r3, [r3, #2]
    1da0:	18c9      	adds	r1, r1, r3
    1da2:	9107      	str	r1, [sp, #28]
                        }

                        if((rxCmdIdx + 5U < PARSER_DEF_CMD_MAX_IDX) && (mRxParserCmd.wordLen[rxCmdIdx + 5U] > 0U))
    1da4:	3205      	adds	r2, #5
    1da6:	2a09      	cmp	r2, #9
    1da8:	d811      	bhi.n	1dce <Parser_Main+0x1ca>
    1daa:	3211      	adds	r2, #17
    1dac:	32ff      	adds	r2, #255	; 0xff
    1dae:	0052      	lsls	r2, r2, #1
    1db0:	4b20      	ldr	r3, [pc, #128]	; (1e34 <Parser_Main+0x230>)
    1db2:	189a      	adds	r2, r3, r2
    1db4:	88d3      	ldrh	r3, [r2, #6]
    1db6:	b29b      	uxth	r3, r3
    1db8:	2b00      	cmp	r3, #0
    1dba:	d008      	beq.n	1dce <Parser_Main+0x1ca>
                        {
                            parserCmdInfo.pParam5 = (char*)(&mRxParserCmd.cmd[mRxParserCmd.wordStartPos[rxCmdIdx + 5]]);
    1dbc:	4a1d      	ldr	r2, [pc, #116]	; (1e34 <Parser_Main+0x230>)
    1dbe:	9b02      	ldr	r3, [sp, #8]
    1dc0:	3322      	adds	r3, #34	; 0x22
    1dc2:	33ff      	adds	r3, #255	; 0xff
    1dc4:	005b      	lsls	r3, r3, #1
    1dc6:	18d3      	adds	r3, r2, r3
    1dc8:	885b      	ldrh	r3, [r3, #2]
    1dca:	18d2      	adds	r2, r2, r3
    1dcc:	9208      	str	r2, [sp, #32]
                        }

                        /* Execute callback */
                        parserCmdEntry.pActionCbFct(&parserCmdInfo);
    1dce:	a804      	add	r0, sp, #16
    1dd0:	47a0      	blx	r4
            /* DO not send a reply yet */
            parserCmdInfo.pReplyCmd = NULL;
        }
    }

    if(parserCmdInfo.pReplyCmd)
    1dd2:	9c09      	ldr	r4, [sp, #36]	; 0x24
    1dd4:	2c00      	cmp	r4, #0
    1dd6:	d006      	beq.n	1de6 <Parser_Main+0x1e2>
    {
        Parser_TxAddReply(parserCmdInfo.pReplyCmd, strlen(parserCmdInfo.pReplyCmd));
    1dd8:	0020      	movs	r0, r4
    1dda:	4b1a      	ldr	r3, [pc, #104]	; (1e44 <Parser_Main+0x240>)
    1ddc:	4798      	blx	r3
    1dde:	b281      	uxth	r1, r0
    1de0:	0020      	movs	r0, r4
    1de2:	4b19      	ldr	r3, [pc, #100]	; (1e48 <Parser_Main+0x244>)
    1de4:	4798      	blx	r3
        Parser_RxClearBuffer();
    1de6:	4b19      	ldr	r3, [pc, #100]	; (1e4c <Parser_Main+0x248>)
    1de8:	4798      	blx	r3
}
    1dea:	b00b      	add	sp, #44	; 0x2c
    1dec:	bc3c      	pop	{r2, r3, r4, r5}
    1dee:	4690      	mov	r8, r2
    1df0:	4699      	mov	r9, r3
    1df2:	46a2      	mov	sl, r4
    1df4:	46ab      	mov	fp, r5
    1df6:	bdf0      	pop	{r4, r5, r6, r7, pc}
                        if((rxCmdIdx + 1U < PARSER_DEF_CMD_MAX_IDX) && (mRxParserCmd.wordLen[rxCmdIdx + 1U] > 0U))
    1df8:	3311      	adds	r3, #17
    1dfa:	33ff      	adds	r3, #255	; 0xff
    1dfc:	005b      	lsls	r3, r3, #1
    1dfe:	490d      	ldr	r1, [pc, #52]	; (1e34 <Parser_Main+0x230>)
    1e00:	18cb      	adds	r3, r1, r3
    1e02:	88db      	ldrh	r3, [r3, #6]
    1e04:	b29b      	uxth	r3, r3
    1e06:	2b00      	cmp	r3, #0
    1e08:	d100      	bne.n	1e0c <Parser_Main+0x208>
    1e0a:	e78f      	b.n	1d2c <Parser_Main+0x128>
                            parserCmdInfo.pParam1 = (char*)(&mRxParserCmd.cmd[mRxParserCmd.wordStartPos[rxCmdIdx + 1]]);
    1e0c:	9b02      	ldr	r3, [sp, #8]
    1e0e:	331e      	adds	r3, #30
    1e10:	33ff      	adds	r3, #255	; 0xff
    1e12:	005b      	lsls	r3, r3, #1
    1e14:	18cb      	adds	r3, r1, r3
    1e16:	885b      	ldrh	r3, [r3, #2]
    1e18:	18c9      	adds	r1, r1, r3
    1e1a:	9104      	str	r1, [sp, #16]
    1e1c:	e786      	b.n	1d2c <Parser_Main+0x128>
    1e1e:	46c0      	nop			; (mov r8, r8)
    1e20:	0001ebd5 	.word	0x0001ebd5
    1e24:	20000008 	.word	0x20000008
    1e28:	00007d99 	.word	0x00007d99
    1e2c:	00004025 	.word	0x00004025
    1e30:	0000024e 	.word	0x0000024e
    1e34:	20001f98 	.word	0x20001f98
    1e38:	0000024f 	.word	0x0000024f
    1e3c:	0001a259 	.word	0x0001a259
    1e40:	00019ead 	.word	0x00019ead
    1e44:	0001a2e1 	.word	0x0001a2e1
    1e48:	00003fe9 	.word	0x00003fe9
    1e4c:	00003f9d 	.word	0x00003f9d

00001e50 <Parser_GetCustomID>:
{
    1e50:	b530      	push	{r4, r5, lr}
    1e52:	b085      	sub	sp, #20
    1e54:	0005      	movs	r5, r0
	uint8_t AddressPins[9] = {128,0,0,0,0,0,0,0,0};
    1e56:	ac01      	add	r4, sp, #4
    1e58:	2209      	movs	r2, #9
    1e5a:	2100      	movs	r1, #0
    1e5c:	0020      	movs	r0, r4
    1e5e:	4b21      	ldr	r3, [pc, #132]	; (1ee4 <Parser_GetCustomID+0x94>)
    1e60:	4798      	blx	r3
    1e62:	2380      	movs	r3, #128	; 0x80
    1e64:	7023      	strb	r3, [r4, #0]
		const uint8_t gpio_pin)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	return (port_base->IN.reg & pin_mask);
    1e66:	4b20      	ldr	r3, [pc, #128]	; (1ee8 <Parser_GetCustomID+0x98>)
    1e68:	6a1b      	ldr	r3, [r3, #32]
	if(port_pin_get_input_level(PIN_PA14))AddressPins[1]=1;
    1e6a:	045b      	lsls	r3, r3, #17
    1e6c:	d502      	bpl.n	1e74 <Parser_GetCustomID+0x24>
    1e6e:	2201      	movs	r2, #1
    1e70:	ab01      	add	r3, sp, #4
    1e72:	705a      	strb	r2, [r3, #1]
    1e74:	4b1c      	ldr	r3, [pc, #112]	; (1ee8 <Parser_GetCustomID+0x98>)
    1e76:	6a1b      	ldr	r3, [r3, #32]
	if(port_pin_get_input_level(PIN_PA28))AddressPins[2]=1;
    1e78:	00db      	lsls	r3, r3, #3
    1e7a:	d502      	bpl.n	1e82 <Parser_GetCustomID+0x32>
    1e7c:	2201      	movs	r2, #1
    1e7e:	ab01      	add	r3, sp, #4
    1e80:	709a      	strb	r2, [r3, #2]
    1e82:	4b19      	ldr	r3, [pc, #100]	; (1ee8 <Parser_GetCustomID+0x98>)
    1e84:	6a1b      	ldr	r3, [r3, #32]
	if(port_pin_get_input_level(PIN_PA15))AddressPins[3]=1;
    1e86:	041b      	lsls	r3, r3, #16
    1e88:	d502      	bpl.n	1e90 <Parser_GetCustomID+0x40>
    1e8a:	2201      	movs	r2, #1
    1e8c:	ab01      	add	r3, sp, #4
    1e8e:	70da      	strb	r2, [r3, #3]
    1e90:	4b15      	ldr	r3, [pc, #84]	; (1ee8 <Parser_GetCustomID+0x98>)
    1e92:	6a1b      	ldr	r3, [r3, #32]
	if(port_pin_get_input_level(PIN_PA19))AddressPins[4]=1;
    1e94:	031b      	lsls	r3, r3, #12
    1e96:	d502      	bpl.n	1e9e <Parser_GetCustomID+0x4e>
    1e98:	2201      	movs	r2, #1
    1e9a:	ab01      	add	r3, sp, #4
    1e9c:	711a      	strb	r2, [r3, #4]
    1e9e:	4b12      	ldr	r3, [pc, #72]	; (1ee8 <Parser_GetCustomID+0x98>)
    1ea0:	6a1b      	ldr	r3, [r3, #32]
	if(port_pin_get_input_level(PIN_PA18))AddressPins[5]=1;
    1ea2:	035b      	lsls	r3, r3, #13
    1ea4:	d502      	bpl.n	1eac <Parser_GetCustomID+0x5c>
    1ea6:	2201      	movs	r2, #1
    1ea8:	ab01      	add	r3, sp, #4
    1eaa:	715a      	strb	r2, [r3, #5]
    1eac:	4b0e      	ldr	r3, [pc, #56]	; (1ee8 <Parser_GetCustomID+0x98>)
    1eae:	6a1b      	ldr	r3, [r3, #32]
	if(port_pin_get_input_level(PIN_PA27))AddressPins[6]=1;
    1eb0:	011b      	lsls	r3, r3, #4
    1eb2:	d502      	bpl.n	1eba <Parser_GetCustomID+0x6a>
    1eb4:	2201      	movs	r2, #1
    1eb6:	ab01      	add	r3, sp, #4
    1eb8:	719a      	strb	r2, [r3, #6]
    1eba:	4b0b      	ldr	r3, [pc, #44]	; (1ee8 <Parser_GetCustomID+0x98>)
    1ebc:	6a1b      	ldr	r3, [r3, #32]
	if(port_pin_get_input_level(PIN_PA08))AddressPins[7]=1;
    1ebe:	05db      	lsls	r3, r3, #23
    1ec0:	d502      	bpl.n	1ec8 <Parser_GetCustomID+0x78>
    1ec2:	2201      	movs	r2, #1
    1ec4:	ab01      	add	r3, sp, #4
    1ec6:	71da      	strb	r2, [r3, #7]
    1ec8:	4b07      	ldr	r3, [pc, #28]	; (1ee8 <Parser_GetCustomID+0x98>)
    1eca:	6a1b      	ldr	r3, [r3, #32]
	if(port_pin_get_input_level(PIN_PA07))AddressPins[8]=1;
    1ecc:	061b      	lsls	r3, r3, #24
    1ece:	d502      	bpl.n	1ed6 <Parser_GetCustomID+0x86>
    1ed0:	2201      	movs	r2, #1
    1ed2:	ab01      	add	r3, sp, #4
    1ed4:	721a      	strb	r2, [r3, #8]
	Parser_IntArrayToHexAscii(9, AddressPins, pBuffData);
    1ed6:	002a      	movs	r2, r5
    1ed8:	a901      	add	r1, sp, #4
    1eda:	2009      	movs	r0, #9
    1edc:	4b03      	ldr	r3, [pc, #12]	; (1eec <Parser_GetCustomID+0x9c>)
    1ede:	4798      	blx	r3
}
    1ee0:	b005      	add	sp, #20
    1ee2:	bd30      	pop	{r4, r5, pc}
    1ee4:	00019ead 	.word	0x00019ead
    1ee8:	40002800 	.word	0x40002800
    1eec:	000041e1 	.word	0x000041e1

00001ef0 <Parser_GetSwVersion>:
{
    1ef0:	b570      	push	{r4, r5, r6, lr}
    1ef2:	0004      	movs	r4, r0
    memcpy(pBuffData, HW_STR, sizeof(HW_STR));
    1ef4:	220b      	movs	r2, #11
    1ef6:	490d      	ldr	r1, [pc, #52]	; (1f2c <Parser_GetSwVersion+0x3c>)
    1ef8:	4d0d      	ldr	r5, [pc, #52]	; (1f30 <Parser_GetSwVersion+0x40>)
    1efa:	47a8      	blx	r5
    pBuffData[sizeof(HW_STR) - 1] = ' ';
    1efc:	2620      	movs	r6, #32
    1efe:	72a6      	strb	r6, [r4, #10]
    memcpy(&pBuffData[sizeof(HW_STR)], VER_STR, sizeof(VER_STR));
    1f00:	0020      	movs	r0, r4
    1f02:	300b      	adds	r0, #11
    1f04:	2210      	movs	r2, #16
    1f06:	490b      	ldr	r1, [pc, #44]	; (1f34 <Parser_GetSwVersion+0x44>)
    1f08:	47a8      	blx	r5
    pBuffData[sizeof(HW_STR) + sizeof(VER_STR) - 1] = ' ';
    1f0a:	76a6      	strb	r6, [r4, #26]
    memcpy(&pBuffData[sizeof(HW_STR) + sizeof(VER_STR)], __DATE__, sizeof(__DATE__));
    1f0c:	0020      	movs	r0, r4
    1f0e:	301b      	adds	r0, #27
    1f10:	220c      	movs	r2, #12
    1f12:	4909      	ldr	r1, [pc, #36]	; (1f38 <Parser_GetSwVersion+0x48>)
    1f14:	47a8      	blx	r5
    pBuffData[sizeof(HW_STR) + sizeof(VER_STR) + sizeof(__DATE__) - 1] = ' ';
    1f16:	2326      	movs	r3, #38	; 0x26
    1f18:	54e6      	strb	r6, [r4, r3]
    memcpy(&pBuffData[sizeof(HW_STR) + sizeof(VER_STR) + sizeof(__DATE__)], __TIME__, sizeof(__TIME__));
    1f1a:	0020      	movs	r0, r4
    1f1c:	3027      	adds	r0, #39	; 0x27
    1f1e:	2209      	movs	r2, #9
    1f20:	4906      	ldr	r1, [pc, #24]	; (1f3c <Parser_GetSwVersion+0x4c>)
    1f22:	47a8      	blx	r5
    pBuffData[sizeof(HW_STR) + sizeof(VER_STR) + sizeof(__DATE__) + sizeof(__TIME__)] = '\0';
    1f24:	2200      	movs	r2, #0
    1f26:	2330      	movs	r3, #48	; 0x30
    1f28:	54e2      	strb	r2, [r4, r3]
}
    1f2a:	bd70      	pop	{r4, r5, r6, pc}
    1f2c:	0001eba4 	.word	0x0001eba4
    1f30:	00019d89 	.word	0x00019d89
    1f34:	0001ebb0 	.word	0x0001ebb0
    1f38:	0001ebc0 	.word	0x0001ebc0
    1f3c:	0001ebcc 	.word	0x0001ebcc

00001f40 <ParserJoinData>:
	
	appHandle = NULL;
}

static void ParserJoinData(StackRetStatus_t status)
{
    1f40:	b510      	push	{r4, lr}
    uint8_t statusIdx = JOIN_DENY_STR_IDX;

    //TODO: make sure this does not interfere with the receiving commands

    //This is called every time the join process is finished
    if(LORAWAN_SUCCESS == status)
    1f42:	2808      	cmp	r0, #8
    1f44:	d012      	beq.n	1f6c <ParserJoinData+0x2c>
    {
        //Sucessful join
        statusIdx = JOIN_ACCEPT_STR_IDX;
    }
	else if (LORAWAN_NO_CHANNELS_FOUND == status)
    1f46:	2810      	cmp	r0, #16
    1f48:	d012      	beq.n	1f70 <ParserJoinData+0x30>
	{
		statusIdx = JOIN_NO_FREE_CHANNEL_STR_IDX;
	}
	else if (LORAWAN_TX_TIMEOUT == status)
    1f4a:	281b      	cmp	r0, #27
    1f4c:	d012      	beq.n	1f74 <ParserJoinData+0x34>
	{
		statusIdx = JOIN_TX_TIMEOUT_STR_IDX;
	}
	else if (LORAWAN_MIC_ERROR == status)
	{
		statusIdx = JOIN_MIC_ERROR_STR_IDX;
    1f4e:	3818      	subs	r0, #24
    1f50:	4243      	negs	r3, r0
    1f52:	4158      	adcs	r0, r3
    1f54:	0080      	lsls	r0, r0, #2
	}
				
    Parser_TxAddReply((char*)gapParseJoinStatus[statusIdx], strlen((char*)gapParseJoinStatus[statusIdx]));
    1f56:	0080      	lsls	r0, r0, #2
    1f58:	4b07      	ldr	r3, [pc, #28]	; (1f78 <ParserJoinData+0x38>)
    1f5a:	58c4      	ldr	r4, [r0, r3]
    1f5c:	0020      	movs	r0, r4
    1f5e:	4b07      	ldr	r3, [pc, #28]	; (1f7c <ParserJoinData+0x3c>)
    1f60:	4798      	blx	r3
    1f62:	b281      	uxth	r1, r0
    1f64:	0020      	movs	r0, r4
    1f66:	4b06      	ldr	r3, [pc, #24]	; (1f80 <ParserJoinData+0x40>)
    1f68:	4798      	blx	r3
}
    1f6a:	bd10      	pop	{r4, pc}
        statusIdx = JOIN_ACCEPT_STR_IDX;
    1f6c:	2001      	movs	r0, #1
    1f6e:	e7f2      	b.n	1f56 <ParserJoinData+0x16>
		statusIdx = JOIN_NO_FREE_CHANNEL_STR_IDX;
    1f70:	2002      	movs	r0, #2
    1f72:	e7f0      	b.n	1f56 <ParserJoinData+0x16>
		statusIdx = JOIN_TX_TIMEOUT_STR_IDX;
    1f74:	2003      	movs	r0, #3
    1f76:	e7ee      	b.n	1f56 <ParserJoinData+0x16>
    1f78:	0001f880 	.word	0x0001f880
    1f7c:	0001a2e1 	.word	0x0001a2e1
    1f80:	00003fe9 	.word	0x00003fe9

00001f84 <ParserAppData>:
{
    1f84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (data->evt == LORAWAN_EVT_RX_DATA_AVAILABLE)
    1f86:	780b      	ldrb	r3, [r1, #0]
    1f88:	2b02      	cmp	r3, #2
    1f8a:	d003      	beq.n	1f94 <ParserAppData+0x10>
    else if(data->evt == LORAWAN_EVT_TRANSACTION_COMPLETE)
    1f8c:	2b04      	cmp	r3, #4
    1f8e:	d100      	bne.n	1f92 <ParserAppData+0xe>
    1f90:	e09c      	b.n	20cc <STACK_SIZE+0xcc>
}
    1f92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        switch(status)
    1f94:	7b4b      	ldrb	r3, [r1, #13]
    1f96:	3b08      	subs	r3, #8
    1f98:	b2da      	uxtb	r2, r3
    1f9a:	2a16      	cmp	r2, #22
    1f9c:	d8f9      	bhi.n	1f92 <ParserAppData+0xe>
    1f9e:	0093      	lsls	r3, r2, #2
    1fa0:	4a97      	ldr	r2, [pc, #604]	; (2200 <STACK_SIZE+0x200>)
    1fa2:	58d3      	ldr	r3, [r2, r3]
    1fa4:	469f      	mov	pc, r3
        uint8_t dataLength = data->param.rxData.dataLength;
    1fa6:	7b0d      	ldrb	r5, [r1, #12]
                if((dataLength > 0U) && (NULL != pData))
    1fa8:	2d00      	cmp	r5, #0
    1faa:	d030      	beq.n	200e <STACK_SIZE+0xe>
        uint8_t *pData = data->param.rxData.pData;
    1fac:	688e      	ldr	r6, [r1, #8]
                if((dataLength > 0U) && (NULL != pData))
    1fae:	2e00      	cmp	r6, #0
    1fb0:	d02d      	beq.n	200e <STACK_SIZE+0xe>
                    strcpy(aParserData, gapParserRxStatus[MAC_RX_DATA_STR_IDX]);
    1fb2:	4c94      	ldr	r4, [pc, #592]	; (2204 <STACK_SIZE+0x204>)
    1fb4:	2208      	movs	r2, #8
    1fb6:	4994      	ldr	r1, [pc, #592]	; (2208 <STACK_SIZE+0x208>)
    1fb8:	0020      	movs	r0, r4
    1fba:	4b94      	ldr	r3, [pc, #592]	; (220c <STACK_SIZE+0x20c>)
    1fbc:	4798      	blx	r3
                    dataLen = strlen(aParserData);
    1fbe:	0020      	movs	r0, r4
    1fc0:	4f93      	ldr	r7, [pc, #588]	; (2210 <STACK_SIZE+0x210>)
    1fc2:	47b8      	blx	r7
                    itoa( *pData, &aParserData[dataLen],10);
    1fc4:	0401      	lsls	r1, r0, #16
    1fc6:	0c09      	lsrs	r1, r1, #16
    1fc8:	1909      	adds	r1, r1, r4
    1fca:	7830      	ldrb	r0, [r6, #0]
    1fcc:	220a      	movs	r2, #10
    1fce:	4b91      	ldr	r3, [pc, #580]	; (2214 <STACK_SIZE+0x214>)
    1fd0:	4798      	blx	r3
                    dataLen = strlen(aParserData);
    1fd2:	0020      	movs	r0, r4
    1fd4:	47b8      	blx	r7
                    aParserData[dataLen] = ' ';
    1fd6:	0403      	lsls	r3, r0, #16
    1fd8:	0c1b      	lsrs	r3, r3, #16
    1fda:	2220      	movs	r2, #32
    1fdc:	54e2      	strb	r2, [r4, r3]
                    dataLen ++;
    1fde:	3001      	adds	r0, #1
    1fe0:	b280      	uxth	r0, r0
                    Parser_IntArrayToHexAscii(maxDataLenToTx, &pData[1],  &aParserData[dataLen]);
    1fe2:	1902      	adds	r2, r0, r4
    1fe4:	1c71      	adds	r1, r6, #1
                    maxDataLenToTx = ((dataLength - 1) <= ((uint16_t)((PARSER_MAX_DATA_LEN - dataLen) >> 1))) ? (dataLength - 1) : ((uint16_t)((PARSER_MAX_DATA_LEN - dataLen) >> 1));
    1fe6:	4b8c      	ldr	r3, [pc, #560]	; (2218 <STACK_SIZE+0x218>)
    1fe8:	1a1b      	subs	r3, r3, r0
    1fea:	03db      	lsls	r3, r3, #15
    1fec:	3d01      	subs	r5, #1
    1fee:	0c1b      	lsrs	r3, r3, #16
    1ff0:	42ab      	cmp	r3, r5
    1ff2:	dd00      	ble.n	1ff6 <ParserAppData+0x72>
    1ff4:	002b      	movs	r3, r5
                    Parser_IntArrayToHexAscii(maxDataLenToTx, &pData[1],  &aParserData[dataLen]);
    1ff6:	b2d8      	uxtb	r0, r3
    1ff8:	4b88      	ldr	r3, [pc, #544]	; (221c <STACK_SIZE+0x21c>)
    1ffa:	4798      	blx	r3
                    Parser_TxAddReply(aParserData, strlen(aParserData));
    1ffc:	4c81      	ldr	r4, [pc, #516]	; (2204 <STACK_SIZE+0x204>)
    1ffe:	0020      	movs	r0, r4
    2000:	4b83      	ldr	r3, [pc, #524]	; (2210 <STACK_SIZE+0x210>)
    2002:	4798      	blx	r3
    2004:	b281      	uxth	r1, r0
    2006:	0020      	movs	r0, r4
    2008:	4b85      	ldr	r3, [pc, #532]	; (2220 <STACK_SIZE+0x220>)
    200a:	4798      	blx	r3
    200c:	e7c1      	b.n	1f92 <ParserAppData+0xe>
                    Parser_TxAddReply((char*)gapParserRxStatus[MAC_ACK_RXED_STR_IDX], strlen((char*)gapParserRxStatus[MAC_ACK_RXED_STR_IDX]));
    200e:	210c      	movs	r1, #12
    2010:	4884      	ldr	r0, [pc, #528]	; (2224 <STACK_SIZE+0x224>)
    2012:	4b83      	ldr	r3, [pc, #524]	; (2220 <STACK_SIZE+0x220>)
    2014:	4798      	blx	r3
    2016:	e7bc      	b.n	1f92 <ParserAppData+0xe>
				Parser_TxAddReply((char*)gapParserLorawanStatus[NOT_JOINED_STR_IDX], strlen((char*)gapParserRxStatus[RADIO_ERR_STR_IDX]));
    2018:	2109      	movs	r1, #9
    201a:	4883      	ldr	r0, [pc, #524]	; (2228 <STACK_SIZE+0x228>)
    201c:	4b80      	ldr	r3, [pc, #512]	; (2220 <STACK_SIZE+0x220>)
    201e:	4798      	blx	r3
				break;
    2020:	e7b7      	b.n	1f92 <ParserAppData+0xe>
				Parser_TxAddReply((char*)gapParserLorawanStatus[INVALID_PARAM_STR_IDX], strlen((char*)gapParserLorawanStatus[INVALID_PARAM_STR_IDX]));
    2022:	210d      	movs	r1, #13
    2024:	4881      	ldr	r0, [pc, #516]	; (222c <STACK_SIZE+0x22c>)
    2026:	4b7e      	ldr	r3, [pc, #504]	; (2220 <STACK_SIZE+0x220>)
    2028:	4798      	blx	r3
				break;
    202a:	e7b2      	b.n	1f92 <ParserAppData+0xe>
				Parser_TxAddReply((char*)gapParserLorawanStatus[KEYS_NOT_INIT_STR_IDX], strlen((char*)gapParserLorawanStatus[KEYS_NOT_INIT_STR_IDX]));
    202c:	210d      	movs	r1, #13
    202e:	4880      	ldr	r0, [pc, #512]	; (2230 <STACK_SIZE+0x230>)
    2030:	4b7b      	ldr	r3, [pc, #492]	; (2220 <STACK_SIZE+0x220>)
    2032:	4798      	blx	r3
				break;
    2034:	e7ad      	b.n	1f92 <ParserAppData+0xe>
				Parser_TxAddReply((char*)gapParserLorawanStatus[SILENT_STR_IDX], strlen((char*)gapParserLorawanStatus[SILENT_STR_IDX]));
    2036:	2106      	movs	r1, #6
    2038:	487e      	ldr	r0, [pc, #504]	; (2234 <STACK_SIZE+0x234>)
    203a:	4b79      	ldr	r3, [pc, #484]	; (2220 <STACK_SIZE+0x220>)
    203c:	4798      	blx	r3
				break;
    203e:	e7a8      	b.n	1f92 <ParserAppData+0xe>
				Parser_TxAddReply((char*)gapParserLorawanStatus[FRAME_CNTR_ERR_REJOIN_NEEDED_STR_IDX], strlen((char*)gapParserLorawanStatus[FRAME_CNTR_ERR_REJOIN_NEEDED_STR_IDX]));
    2040:	211e      	movs	r1, #30
    2042:	487d      	ldr	r0, [pc, #500]	; (2238 <STACK_SIZE+0x238>)
    2044:	4b76      	ldr	r3, [pc, #472]	; (2220 <STACK_SIZE+0x220>)
    2046:	4798      	blx	r3
				break;
    2048:	e7a3      	b.n	1f92 <ParserAppData+0xe>
				Parser_TxAddReply((char*)gapParserRxStatus[INVALID_FCNTR_STR_IDX], strlen((char*)gapParserRxStatus[INVALID_FCNTR_STR_IDX]));
    204a:	210d      	movs	r1, #13
    204c:	487b      	ldr	r0, [pc, #492]	; (223c <STACK_SIZE+0x23c>)
    204e:	4b74      	ldr	r3, [pc, #464]	; (2220 <STACK_SIZE+0x220>)
    2050:	4798      	blx	r3
				break;
    2052:	e79e      	b.n	1f92 <ParserAppData+0xe>
				Parser_TxAddReply((char*)gapParserRxStatus[MIC_ERROR_STR_IDX], strlen((char*)gapParserRxStatus[MIC_ERROR_STR_IDX]));
    2054:	2109      	movs	r1, #9
    2056:	487a      	ldr	r0, [pc, #488]	; (2240 <STACK_SIZE+0x240>)
    2058:	4b71      	ldr	r3, [pc, #452]	; (2220 <STACK_SIZE+0x220>)
    205a:	4798      	blx	r3
				break;
    205c:	e799      	b.n	1f92 <ParserAppData+0xe>
				Parser_TxAddReply((char*)gapParserRxStatus[INVALID_MTYPE_STR_IDX], strlen((char*)gapParserRxStatus[INVALID_MTYPE_STR_IDX]));
    205e:	210d      	movs	r1, #13
    2060:	4878      	ldr	r0, [pc, #480]	; (2244 <STACK_SIZE+0x244>)
    2062:	4b6f      	ldr	r3, [pc, #444]	; (2220 <STACK_SIZE+0x220>)
    2064:	4798      	blx	r3
				break;
    2066:	e794      	b.n	1f92 <ParserAppData+0xe>
				Parser_TxAddReply((char*)gapParserRxStatus[INVALID_BUFFER_LEN_STR_IDX], strlen((char*)gapParserRxStatus[INVALID_BUFFER_LEN_STR_IDX]));
    2068:	2115      	movs	r1, #21
    206a:	4877      	ldr	r0, [pc, #476]	; (2248 <STACK_SIZE+0x248>)
    206c:	4b6c      	ldr	r3, [pc, #432]	; (2220 <STACK_SIZE+0x220>)
    206e:	4798      	blx	r3
				break;
    2070:	e78f      	b.n	1f92 <ParserAppData+0xe>
				Parser_TxAddReply((char*)gapParserLorawanStatus[MAC_PAUSED_STR_IDX], strlen((char*)gapParserLorawanStatus[MAC_PAUSED_STR_IDX]));
    2072:	210a      	movs	r1, #10
    2074:	4875      	ldr	r0, [pc, #468]	; (224c <STACK_SIZE+0x24c>)
    2076:	4b6a      	ldr	r3, [pc, #424]	; (2220 <STACK_SIZE+0x220>)
    2078:	4798      	blx	r3
				break;
    207a:	e78a      	b.n	1f92 <ParserAppData+0xe>
				Parser_TxAddReply((char*)gapParserRxStatus[MCAST_HDR_INVALID_STR_IDX], strlen((char*)gapParserRxStatus[MCAST_HDR_INVALID_STR_IDX]));
    207c:	2111      	movs	r1, #17
    207e:	4874      	ldr	r0, [pc, #464]	; (2250 <STACK_SIZE+0x250>)
    2080:	4b67      	ldr	r3, [pc, #412]	; (2220 <STACK_SIZE+0x220>)
    2082:	4798      	blx	r3
				break;
    2084:	e785      	b.n	1f92 <ParserAppData+0xe>
				Parser_TxAddReply((char*)gapParserLorawanStatus[NO_FREE_CHANNEL_STR_IDX], strlen((char*)gapParserLorawanStatus[NO_FREE_CHANNEL_STR_IDX]));
    2086:	210a      	movs	r1, #10
    2088:	4872      	ldr	r0, [pc, #456]	; (2254 <STACK_SIZE+0x254>)
    208a:	4b65      	ldr	r3, [pc, #404]	; (2220 <STACK_SIZE+0x220>)
    208c:	4798      	blx	r3
				break;
    208e:	e780      	b.n	1f92 <ParserAppData+0xe>
				Parser_TxAddReply((char*)gapParserLorawanStatus[BUSY_STR_IDX], strlen((char*)gapParserLorawanStatus[BUSY_STR_IDX]));
    2090:	2104      	movs	r1, #4
    2092:	4871      	ldr	r0, [pc, #452]	; (2258 <STACK_SIZE+0x258>)
    2094:	4b62      	ldr	r3, [pc, #392]	; (2220 <STACK_SIZE+0x220>)
    2096:	4798      	blx	r3
				break;
    2098:	e77b      	b.n	1f92 <ParserAppData+0xe>
				Parser_TxAddReply((char*)gapParserRxStatus[NO_ACK_STR_IDX], strlen((char*)gapParserRxStatus[NO_ACK_STR_IDX]));
    209a:	2107      	movs	r1, #7
    209c:	486f      	ldr	r0, [pc, #444]	; (225c <STACK_SIZE+0x25c>)
    209e:	4b60      	ldr	r3, [pc, #384]	; (2220 <STACK_SIZE+0x220>)
    20a0:	4798      	blx	r3
				break;
    20a2:	e776      	b.n	1f92 <ParserAppData+0xe>
				Parser_TxAddReply((char*)gapParserLorawanStatus[JOIN_IN_PROGRESS_STR_IDX], strlen((char*)gapParserLorawanStatus[JOIN_IN_PROGRESS_STR_IDX]));
    20a4:	2110      	movs	r1, #16
    20a6:	486e      	ldr	r0, [pc, #440]	; (2260 <STACK_SIZE+0x260>)
    20a8:	4b5d      	ldr	r3, [pc, #372]	; (2220 <STACK_SIZE+0x220>)
    20aa:	4798      	blx	r3
				break;
    20ac:	e771      	b.n	1f92 <ParserAppData+0xe>
				Parser_TxAddReply((char*)gapParserLorawanStatus[RESOURCE_UNAVAILABLE_STR_IDX], strlen((char*)gapParserLorawanStatus[RESOURCE_UNAVAILABLE_STR_IDX]));
    20ae:	2114      	movs	r1, #20
    20b0:	486c      	ldr	r0, [pc, #432]	; (2264 <STACK_SIZE+0x264>)
    20b2:	4b5b      	ldr	r3, [pc, #364]	; (2220 <STACK_SIZE+0x220>)
    20b4:	4798      	blx	r3
				break;
    20b6:	e76c      	b.n	1f92 <ParserAppData+0xe>
				Parser_TxAddReply((char*)gapParserLorawanStatus[INVALID_REQ_STR_IDX], strlen((char*)gapParserLorawanStatus[INVALID_REQ_STR_IDX]));
    20b8:	210f      	movs	r1, #15
    20ba:	486b      	ldr	r0, [pc, #428]	; (2268 <STACK_SIZE+0x268>)
    20bc:	4b58      	ldr	r3, [pc, #352]	; (2220 <STACK_SIZE+0x220>)
    20be:	4798      	blx	r3
				break;	
    20c0:	e767      	b.n	1f92 <ParserAppData+0xe>
           		Parser_TxAddReply((char*)gapParserLorawanStatus[INVALID_PACKET_STR_IDX], strlen((char*)gapParserLorawanStatus[INVALID_PACKET_STR_IDX]));
    20c2:	210e      	movs	r1, #14
    20c4:	4869      	ldr	r0, [pc, #420]	; (226c <STACK_SIZE+0x26c>)
    20c6:	4b56      	ldr	r3, [pc, #344]	; (2220 <STACK_SIZE+0x220>)
    20c8:	4798      	blx	r3
           		break;
    20ca:	e762      	b.n	1f92 <ParserAppData+0xe>
        switch(data->param.transCmpl.status)
    20cc:	790b      	ldrb	r3, [r1, #4]
    20ce:	2b1e      	cmp	r3, #30
    20d0:	d900      	bls.n	20d4 <STACK_SIZE+0xd4>
    20d2:	e75e      	b.n	1f92 <ParserAppData+0xe>
    20d4:	009b      	lsls	r3, r3, #2
    20d6:	4a66      	ldr	r2, [pc, #408]	; (2270 <STACK_SIZE+0x270>)
    20d8:	58d3      	ldr	r3, [r2, r3]
    20da:	469f      	mov	pc, r3
		        Parser_TxAddReply((char*)gapParserTxStatus[MAC_TX_OK_STR_IDX], strlen((char*)gapParserTxStatus[MAC_TX_OK_STR_IDX]));
    20dc:	2109      	movs	r1, #9
    20de:	4865      	ldr	r0, [pc, #404]	; (2274 <STACK_SIZE+0x274>)
    20e0:	4b4f      	ldr	r3, [pc, #316]	; (2220 <STACK_SIZE+0x220>)
    20e2:	4798      	blx	r3
	        break;
    20e4:	e755      	b.n	1f92 <ParserAppData+0xe>
		        Parser_TxAddReply((char*)gapParserTxStatus[RADIO_TX_OK_STR_IDX], strlen((char*)gapParserTxStatus[RADIO_TX_OK_STR_IDX]));
    20e6:	210b      	movs	r1, #11
    20e8:	4863      	ldr	r0, [pc, #396]	; (2278 <STACK_SIZE+0x278>)
    20ea:	4b4d      	ldr	r3, [pc, #308]	; (2220 <STACK_SIZE+0x220>)
    20ec:	4798      	blx	r3
	        break;
    20ee:	e750      	b.n	1f92 <ParserAppData+0xe>
				Parser_TxAddReply((char*)gapParserLorawanStatus[RADIO_NO_DATA_STR_IDX], strlen((char*)gapParserLorawanStatus[RADIO_NO_DATA_STR_IDX]));
    20f0:	210d      	movs	r1, #13
    20f2:	4862      	ldr	r0, [pc, #392]	; (227c <STACK_SIZE+0x27c>)
    20f4:	4b4a      	ldr	r3, [pc, #296]	; (2220 <STACK_SIZE+0x220>)
    20f6:	4798      	blx	r3
			    break;
    20f8:	e74b      	b.n	1f92 <ParserAppData+0xe>
				Parser_TxAddReply((char*)gapParserLorawanStatus[RADIO_TX_TIMEOUT_IDX], strlen((char*)gapParserLorawanStatus[RADIO_TX_TIMEOUT_IDX]));
    20fa:	2110      	movs	r1, #16
    20fc:	4860      	ldr	r0, [pc, #384]	; (2280 <STACK_SIZE+0x280>)
    20fe:	4b48      	ldr	r3, [pc, #288]	; (2220 <STACK_SIZE+0x220>)
    2100:	4798      	blx	r3
				break;
    2102:	e746      	b.n	1f92 <ParserAppData+0xe>
				Parser_TxAddReply((char*)gapParserLorawanStatus[TX_TIMEOUT_IDX], strlen((char*)gapParserLorawanStatus[TX_TIMEOUT_IDX]));
    2104:	210a      	movs	r1, #10
    2106:	485f      	ldr	r0, [pc, #380]	; (2284 <STACK_SIZE+0x284>)
    2108:	4b45      	ldr	r3, [pc, #276]	; (2220 <STACK_SIZE+0x220>)
    210a:	4798      	blx	r3
				break;				
    210c:	e741      	b.n	1f92 <ParserAppData+0xe>
				Parser_TxAddReply((char*)gapParserLorawanStatus[RADIO_DATA_SIZE_STR_IDX], strlen((char*)gapParserLorawanStatus[RADIO_DATA_SIZE_STR_IDX]));
    210e:	210f      	movs	r1, #15
    2110:	485d      	ldr	r0, [pc, #372]	; (2288 <STACK_SIZE+0x288>)
    2112:	4b43      	ldr	r3, [pc, #268]	; (2220 <STACK_SIZE+0x220>)
    2114:	4798      	blx	r3
				break;
    2116:	e73c      	b.n	1f92 <ParserAppData+0xe>
				Parser_TxAddReply((char*)gapParserLorawanStatus[RADIO_INVALID_REQ_STR_IDX], strlen((char*)gapParserLorawanStatus[RADIO_INVALID_REQ_STR_IDX]));
    2118:	2111      	movs	r1, #17
    211a:	485c      	ldr	r0, [pc, #368]	; (228c <STACK_SIZE+0x28c>)
    211c:	4b40      	ldr	r3, [pc, #256]	; (2220 <STACK_SIZE+0x220>)
    211e:	4798      	blx	r3
				break;
    2120:	e737      	b.n	1f92 <ParserAppData+0xe>
				Parser_TxAddReply((char*)gapParserLorawanStatus[LORAWAN_RADIO_BUSY_STR_IDX], strlen((char*)gapParserLorawanStatus[LORAWAN_RADIO_BUSY_STR_IDX]));
    2122:	210a      	movs	r1, #10
    2124:	485a      	ldr	r0, [pc, #360]	; (2290 <STACK_SIZE+0x290>)
    2126:	4b3e      	ldr	r3, [pc, #248]	; (2220 <STACK_SIZE+0x220>)
    2128:	4798      	blx	r3
				break;
    212a:	e732      	b.n	1f92 <ParserAppData+0xe>
				Parser_TxAddReply((char*)gapParserLorawanStatus[RADIO_OUT_OF_RANGE_STR_IDX], strlen((char*)gapParserLorawanStatus[RADIO_OUT_OF_RANGE_STR_IDX]));
    212c:	2112      	movs	r1, #18
    212e:	4859      	ldr	r0, [pc, #356]	; (2294 <STACK_SIZE+0x294>)
    2130:	4b3b      	ldr	r3, [pc, #236]	; (2220 <STACK_SIZE+0x220>)
    2132:	4798      	blx	r3
				break;
    2134:	e72d      	b.n	1f92 <ParserAppData+0xe>
				Parser_TxAddReply((char*)gapParserLorawanStatus[RADIO_UNSUP_ATTR_STR_IDX], strlen((char*)gapParserLorawanStatus[RADIO_UNSUP_ATTR_STR_IDX]));
    2136:	2110      	movs	r1, #16
    2138:	4857      	ldr	r0, [pc, #348]	; (2298 <STACK_SIZE+0x298>)
    213a:	4b39      	ldr	r3, [pc, #228]	; (2220 <STACK_SIZE+0x220>)
    213c:	4798      	blx	r3
				break;
    213e:	e728      	b.n	1f92 <ParserAppData+0xe>
				Parser_TxAddReply((char*)gapParserLorawanStatus[RADIO_CHANNEL_BUSY_STR_IDX], strlen((char*)gapParserLorawanStatus[RADIO_CHANNEL_BUSY_STR_IDX]));
    2140:	2112      	movs	r1, #18
    2142:	4856      	ldr	r0, [pc, #344]	; (229c <STACK_SIZE+0x29c>)
    2144:	4b36      	ldr	r3, [pc, #216]	; (2220 <STACK_SIZE+0x220>)
    2146:	4798      	blx	r3
				break;
    2148:	e723      	b.n	1f92 <ParserAppData+0xe>
				Parser_TxAddReply((char*)gapParserLorawanStatus[NOT_JOINED_STR_IDX], strlen((char*)gapParserRxStatus[RADIO_ERR_STR_IDX]));
    214a:	2109      	movs	r1, #9
    214c:	4836      	ldr	r0, [pc, #216]	; (2228 <STACK_SIZE+0x228>)
    214e:	4b34      	ldr	r3, [pc, #208]	; (2220 <STACK_SIZE+0x220>)
    2150:	4798      	blx	r3
				break;
    2152:	e71e      	b.n	1f92 <ParserAppData+0xe>
				Parser_TxAddReply((char*)gapParserLorawanStatus[INVALID_PARAM_STR_IDX], strlen((char*)gapParserLorawanStatus[INVALID_PARAM_STR_IDX]));
    2154:	210d      	movs	r1, #13
    2156:	4835      	ldr	r0, [pc, #212]	; (222c <STACK_SIZE+0x22c>)
    2158:	4b31      	ldr	r3, [pc, #196]	; (2220 <STACK_SIZE+0x220>)
    215a:	4798      	blx	r3
				break;
    215c:	e719      	b.n	1f92 <ParserAppData+0xe>
				Parser_TxAddReply((char*)gapParserLorawanStatus[KEYS_NOT_INIT_STR_IDX], strlen((char*)gapParserLorawanStatus[KEYS_NOT_INIT_STR_IDX]));
    215e:	210d      	movs	r1, #13
    2160:	4833      	ldr	r0, [pc, #204]	; (2230 <STACK_SIZE+0x230>)
    2162:	4b2f      	ldr	r3, [pc, #188]	; (2220 <STACK_SIZE+0x220>)
    2164:	4798      	blx	r3
				break;
    2166:	e714      	b.n	1f92 <ParserAppData+0xe>
				Parser_TxAddReply((char*)gapParserLorawanStatus[SILENT_STR_IDX], strlen((char*)gapParserLorawanStatus[SILENT_STR_IDX]));
    2168:	2106      	movs	r1, #6
    216a:	4832      	ldr	r0, [pc, #200]	; (2234 <STACK_SIZE+0x234>)
    216c:	4b2c      	ldr	r3, [pc, #176]	; (2220 <STACK_SIZE+0x220>)
    216e:	4798      	blx	r3
				break;
    2170:	e70f      	b.n	1f92 <ParserAppData+0xe>
				Parser_TxAddReply((char*)gapParserLorawanStatus[FRAME_CNTR_ERR_REJOIN_NEEDED_STR_IDX], strlen((char*)gapParserLorawanStatus[FRAME_CNTR_ERR_REJOIN_NEEDED_STR_IDX]));
    2172:	211e      	movs	r1, #30
    2174:	4830      	ldr	r0, [pc, #192]	; (2238 <STACK_SIZE+0x238>)
    2176:	4b2a      	ldr	r3, [pc, #168]	; (2220 <STACK_SIZE+0x220>)
    2178:	4798      	blx	r3
				break;
    217a:	e70a      	b.n	1f92 <ParserAppData+0xe>
				Parser_TxAddReply((char*)gapParserRxStatus[INVALID_FCNTR_STR_IDX], strlen((char*)gapParserRxStatus[INVALID_FCNTR_STR_IDX]));
    217c:	210d      	movs	r1, #13
    217e:	482f      	ldr	r0, [pc, #188]	; (223c <STACK_SIZE+0x23c>)
    2180:	4b27      	ldr	r3, [pc, #156]	; (2220 <STACK_SIZE+0x220>)
    2182:	4798      	blx	r3
				break;
    2184:	e705      	b.n	1f92 <ParserAppData+0xe>
				Parser_TxAddReply((char*)gapParserRxStatus[MIC_ERROR_STR_IDX], strlen((char*)gapParserRxStatus[MIC_ERROR_STR_IDX]));
    2186:	2109      	movs	r1, #9
    2188:	482d      	ldr	r0, [pc, #180]	; (2240 <STACK_SIZE+0x240>)
    218a:	4b25      	ldr	r3, [pc, #148]	; (2220 <STACK_SIZE+0x220>)
    218c:	4798      	blx	r3
				break;
    218e:	e700      	b.n	1f92 <ParserAppData+0xe>
				Parser_TxAddReply((char*)gapParserRxStatus[INVALID_MTYPE_STR_IDX], strlen((char*)gapParserRxStatus[INVALID_MTYPE_STR_IDX]));
    2190:	210d      	movs	r1, #13
    2192:	482c      	ldr	r0, [pc, #176]	; (2244 <STACK_SIZE+0x244>)
    2194:	4b22      	ldr	r3, [pc, #136]	; (2220 <STACK_SIZE+0x220>)
    2196:	4798      	blx	r3
				break;
    2198:	e6fb      	b.n	1f92 <ParserAppData+0xe>
				Parser_TxAddReply((char*)gapParserRxStatus[INVALID_BUFFER_LEN_STR_IDX], strlen((char*)gapParserRxStatus[INVALID_BUFFER_LEN_STR_IDX]));
    219a:	2115      	movs	r1, #21
    219c:	482a      	ldr	r0, [pc, #168]	; (2248 <STACK_SIZE+0x248>)
    219e:	4b20      	ldr	r3, [pc, #128]	; (2220 <STACK_SIZE+0x220>)
    21a0:	4798      	blx	r3
				break;
    21a2:	e6f6      	b.n	1f92 <ParserAppData+0xe>
				Parser_TxAddReply((char*)gapParserLorawanStatus[MAC_PAUSED_STR_IDX], strlen((char*)gapParserLorawanStatus[MAC_PAUSED_STR_IDX]));
    21a4:	210a      	movs	r1, #10
    21a6:	4829      	ldr	r0, [pc, #164]	; (224c <STACK_SIZE+0x24c>)
    21a8:	4b1d      	ldr	r3, [pc, #116]	; (2220 <STACK_SIZE+0x220>)
    21aa:	4798      	blx	r3
				break;
    21ac:	e6f1      	b.n	1f92 <ParserAppData+0xe>
				Parser_TxAddReply((char*)gapParserRxStatus[MCAST_HDR_INVALID_STR_IDX], strlen((char*)gapParserRxStatus[MCAST_HDR_INVALID_STR_IDX]));
    21ae:	2111      	movs	r1, #17
    21b0:	4827      	ldr	r0, [pc, #156]	; (2250 <STACK_SIZE+0x250>)
    21b2:	4b1b      	ldr	r3, [pc, #108]	; (2220 <STACK_SIZE+0x220>)
    21b4:	4798      	blx	r3
				break;
    21b6:	e6ec      	b.n	1f92 <ParserAppData+0xe>
				Parser_TxAddReply((char*)gapParserLorawanStatus[NO_FREE_CHANNEL_STR_IDX], strlen((char*)gapParserLorawanStatus[NO_FREE_CHANNEL_STR_IDX]));
    21b8:	210a      	movs	r1, #10
    21ba:	4826      	ldr	r0, [pc, #152]	; (2254 <STACK_SIZE+0x254>)
    21bc:	4b18      	ldr	r3, [pc, #96]	; (2220 <STACK_SIZE+0x220>)
    21be:	4798      	blx	r3
				break;
    21c0:	e6e7      	b.n	1f92 <ParserAppData+0xe>
				Parser_TxAddReply((char*)gapParserLorawanStatus[BUSY_STR_IDX], strlen((char*)gapParserLorawanStatus[BUSY_STR_IDX]));
    21c2:	2104      	movs	r1, #4
    21c4:	4824      	ldr	r0, [pc, #144]	; (2258 <STACK_SIZE+0x258>)
    21c6:	4b16      	ldr	r3, [pc, #88]	; (2220 <STACK_SIZE+0x220>)
    21c8:	4798      	blx	r3
				break;
    21ca:	e6e2      	b.n	1f92 <ParserAppData+0xe>
				Parser_TxAddReply((char*)gapParserRxStatus[NO_ACK_STR_IDX], strlen((char*)gapParserRxStatus[NO_ACK_STR_IDX]));
    21cc:	2107      	movs	r1, #7
    21ce:	4823      	ldr	r0, [pc, #140]	; (225c <STACK_SIZE+0x25c>)
    21d0:	4b13      	ldr	r3, [pc, #76]	; (2220 <STACK_SIZE+0x220>)
    21d2:	4798      	blx	r3
				break;
    21d4:	e6dd      	b.n	1f92 <ParserAppData+0xe>
				Parser_TxAddReply((char*)gapParserLorawanStatus[JOIN_IN_PROGRESS_STR_IDX], strlen((char*)gapParserLorawanStatus[JOIN_IN_PROGRESS_STR_IDX]));
    21d6:	2110      	movs	r1, #16
    21d8:	4821      	ldr	r0, [pc, #132]	; (2260 <STACK_SIZE+0x260>)
    21da:	4b11      	ldr	r3, [pc, #68]	; (2220 <STACK_SIZE+0x220>)
    21dc:	4798      	blx	r3
				break;
    21de:	e6d8      	b.n	1f92 <ParserAppData+0xe>
				Parser_TxAddReply((char*)gapParserLorawanStatus[RESOURCE_UNAVAILABLE_STR_IDX], strlen((char*)gapParserLorawanStatus[RESOURCE_UNAVAILABLE_STR_IDX]));
    21e0:	2114      	movs	r1, #20
    21e2:	4820      	ldr	r0, [pc, #128]	; (2264 <STACK_SIZE+0x264>)
    21e4:	4b0e      	ldr	r3, [pc, #56]	; (2220 <STACK_SIZE+0x220>)
    21e6:	4798      	blx	r3
				break;
    21e8:	e6d3      	b.n	1f92 <ParserAppData+0xe>
				Parser_TxAddReply((char*)gapParserLorawanStatus[INVALID_REQ_STR_IDX], strlen((char*)gapParserLorawanStatus[INVALID_REQ_STR_IDX]));
    21ea:	210f      	movs	r1, #15
    21ec:	481e      	ldr	r0, [pc, #120]	; (2268 <STACK_SIZE+0x268>)
    21ee:	4b0c      	ldr	r3, [pc, #48]	; (2220 <STACK_SIZE+0x220>)
    21f0:	4798      	blx	r3
				break;
    21f2:	e6ce      	b.n	1f92 <ParserAppData+0xe>
				Parser_TxAddReply((char*)gapParserLorawanStatus[INVALID_PACKET_STR_IDX], strlen((char*)gapParserLorawanStatus[INVALID_PACKET_STR_IDX]));
    21f4:	210e      	movs	r1, #14
    21f6:	481d      	ldr	r0, [pc, #116]	; (226c <STACK_SIZE+0x26c>)
    21f8:	4b09      	ldr	r3, [pc, #36]	; (2220 <STACK_SIZE+0x220>)
    21fa:	4798      	blx	r3
}
    21fc:	e6c9      	b.n	1f92 <ParserAppData+0xe>
    21fe:	46c0      	nop			; (mov r8, r8)
    2200:	0001f548 	.word	0x0001f548
    2204:	2000116c 	.word	0x2000116c
    2208:	0001f620 	.word	0x0001f620
    220c:	00019d89 	.word	0x00019d89
    2210:	0001a2e1 	.word	0x0001a2e1
    2214:	00019735 	.word	0x00019735
    2218:	00000212 	.word	0x00000212
    221c:	000041e1 	.word	0x000041e1
    2220:	00003fe9 	.word	0x00003fe9
    2224:	0001f628 	.word	0x0001f628
    2228:	0001f638 	.word	0x0001f638
    222c:	0001f644 	.word	0x0001f644
    2230:	0001f654 	.word	0x0001f654
    2234:	0001f664 	.word	0x0001f664
    2238:	0001f66c 	.word	0x0001f66c
    223c:	0001f68c 	.word	0x0001f68c
    2240:	0001f69c 	.word	0x0001f69c
    2244:	0001f6a8 	.word	0x0001f6a8
    2248:	0001f6b8 	.word	0x0001f6b8
    224c:	0001f6d0 	.word	0x0001f6d0
    2250:	0001f6dc 	.word	0x0001f6dc
    2254:	0001f6f0 	.word	0x0001f6f0
    2258:	0001f6fc 	.word	0x0001f6fc
    225c:	0001f704 	.word	0x0001f704
    2260:	0001f70c 	.word	0x0001f70c
    2264:	0001f720 	.word	0x0001f720
    2268:	0001f738 	.word	0x0001f738
    226c:	0001f748 	.word	0x0001f748
    2270:	0001f5a4 	.word	0x0001f5a4
    2274:	0001f758 	.word	0x0001f758
    2278:	0001f764 	.word	0x0001f764
    227c:	0001f770 	.word	0x0001f770
    2280:	0001f780 	.word	0x0001f780
    2284:	0001f794 	.word	0x0001f794
    2288:	0001f7a0 	.word	0x0001f7a0
    228c:	0001f7b0 	.word	0x0001f7b0
    2290:	0001f7c4 	.word	0x0001f7c4
    2294:	0001f7d0 	.word	0x0001f7d0
    2298:	0001f7e4 	.word	0x0001f7e4
    229c:	0001f7f8 	.word	0x0001f7f8

000022a0 <Parser_SetConfiguredJoinParameters>:
    gParserConfiguredJoinParameters.value = val;
    22a0:	4b01      	ldr	r3, [pc, #4]	; (22a8 <Parser_SetConfiguredJoinParameters+0x8>)
    22a2:	8018      	strh	r0, [r3, #0]
}
    22a4:	4770      	bx	lr
    22a6:	46c0      	nop			; (mov r8, r8)
    22a8:	20001f88 	.word	0x20001f88

000022ac <Parser_LorawanInit>:
{
    22ac:	b510      	push	{r4, lr}
    LORAWAN_Init(ParserAppData, ParserJoinData);
    22ae:	4904      	ldr	r1, [pc, #16]	; (22c0 <Parser_LorawanInit+0x14>)
    22b0:	4804      	ldr	r0, [pc, #16]	; (22c4 <Parser_LorawanInit+0x18>)
    22b2:	4b05      	ldr	r3, [pc, #20]	; (22c8 <Parser_LorawanInit+0x1c>)
    22b4:	4798      	blx	r3
    gParserConfiguredJoinParameters.value = 0x00;
    22b6:	2200      	movs	r2, #0
    22b8:	4b04      	ldr	r3, [pc, #16]	; (22cc <Parser_LorawanInit+0x20>)
    22ba:	801a      	strh	r2, [r3, #0]
}
    22bc:	bd10      	pop	{r4, pc}
    22be:	46c0      	nop			; (mov r8, r8)
    22c0:	00001f41 	.word	0x00001f41
    22c4:	00001f85 	.word	0x00001f85
    22c8:	0001036d 	.word	0x0001036d
    22cc:	20001f88 	.word	0x20001f88

000022d0 <Parser_LoraReset>:
{
    22d0:	b5f0      	push	{r4, r5, r6, r7, lr}
    22d2:	46d6      	mov	lr, sl
    22d4:	4647      	mov	r7, r8
    22d6:	b580      	push	{r7, lr}
    22d8:	b085      	sub	sp, #20
    22da:	0007      	movs	r7, r0
    22dc:	4d2f      	ldr	r5, [pc, #188]	; (239c <Parser_LoraReset+0xcc>)
    22de:	2400      	movs	r4, #0
	    if(0 == stricmp(pParserCmdInfo->pParam1, gapParseIsmBand[iCount]))
    22e0:	4b2f      	ldr	r3, [pc, #188]	; (23a0 <Parser_LoraReset+0xd0>)
    22e2:	469a      	mov	sl, r3
    22e4:	b2e3      	uxtb	r3, r4
    22e6:	4698      	mov	r8, r3
    22e8:	9401      	str	r4, [sp, #4]
    22ea:	682e      	ldr	r6, [r5, #0]
    22ec:	0031      	movs	r1, r6
    22ee:	6838      	ldr	r0, [r7, #0]
    22f0:	47d0      	blx	sl
    22f2:	2800      	cmp	r0, #0
    22f4:	d00d      	beq.n	2312 <Parser_LoraReset+0x42>
    22f6:	3401      	adds	r4, #1
    22f8:	3504      	adds	r5, #4
    for(iCount = 0; iCount < sizeof(gapParseIsmBand)/sizeof(gapParseIsmBand[0]); iCount++)
    22fa:	2c10      	cmp	r4, #16
    22fc:	d1f2      	bne.n	22e4 <Parser_LoraReset+0x14>
    StackRetStatus_t status = LORAWAN_INVALID_PARAMETER;
    22fe:	3c06      	subs	r4, #6
    pParserCmdInfo->pReplyCmd = (char*)gapParserLorawanStatus[status];
    2300:	00a4      	lsls	r4, r4, #2
    2302:	4b28      	ldr	r3, [pc, #160]	; (23a4 <Parser_LoraReset+0xd4>)
    2304:	58e3      	ldr	r3, [r4, r3]
    2306:	617b      	str	r3, [r7, #20]
}
    2308:	b005      	add	sp, #20
    230a:	bc0c      	pop	{r2, r3}
    230c:	4690      	mov	r8, r2
    230e:	469a      	mov	sl, r3
    2310:	bdf0      	pop	{r4, r5, r6, r7, pc}
			uint16_t supportedBands = 0;
    2312:	ab02      	add	r3, sp, #8
    2314:	1d9c      	adds	r4, r3, #6
    2316:	2300      	movs	r3, #0
    2318:	8023      	strh	r3, [r4, #0]
			LORAWAN_GetAttr(SUPPORTED_BANDS,NULL,&supportedBands);
    231a:	0022      	movs	r2, r4
    231c:	2100      	movs	r1, #0
    231e:	3034      	adds	r0, #52	; 0x34
    2320:	4b21      	ldr	r3, [pc, #132]	; (23a8 <Parser_LoraReset+0xd8>)
    2322:	4798      	blx	r3
			if(((1 << iCount) & supportedBands) == 0)
    2324:	8823      	ldrh	r3, [r4, #0]
    2326:	9a01      	ldr	r2, [sp, #4]
    2328:	4113      	asrs	r3, r2
    232a:	07db      	lsls	r3, r3, #31
    232c:	d405      	bmi.n	233a <Parser_LoraReset+0x6a>
				printf("Band %s not supported\r\n",gapParseIsmBand[iCount]);
    232e:	0031      	movs	r1, r6
    2330:	481e      	ldr	r0, [pc, #120]	; (23ac <Parser_LoraReset+0xdc>)
    2332:	4b1f      	ldr	r3, [pc, #124]	; (23b0 <Parser_LoraReset+0xe0>)
    2334:	4798      	blx	r3
				status = LORAWAN_UNSUPPORTED_BAND;
    2336:	2416      	movs	r4, #22
				break;
    2338:	e7e2      	b.n	2300 <Parser_LoraReset+0x30>
			if(PDS_IsRestorable())
    233a:	4b1e      	ldr	r3, [pc, #120]	; (23b4 <Parser_LoraReset+0xe4>)
    233c:	4798      	blx	r3
    233e:	2800      	cmp	r0, #0
    2340:	d018      	beq.n	2374 <Parser_LoraReset+0xa4>
				uint8_t prevBand = 0xFF;
    2342:	ab02      	add	r3, sp, #8
    2344:	1d5c      	adds	r4, r3, #5
    2346:	23ff      	movs	r3, #255	; 0xff
    2348:	7023      	strb	r3, [r4, #0]
				PDS_RestoreAll();
    234a:	4b1b      	ldr	r3, [pc, #108]	; (23b8 <Parser_LoraReset+0xe8>)
    234c:	4798      	blx	r3
				LORAWAN_GetAttr(ISMBAND,NULL,&prevBand);
    234e:	0022      	movs	r2, r4
    2350:	2100      	movs	r1, #0
    2352:	2023      	movs	r0, #35	; 0x23
    2354:	4b14      	ldr	r3, [pc, #80]	; (23a8 <Parser_LoraReset+0xd8>)
    2356:	4798      	blx	r3
				if(prevBand != iCount)
    2358:	7823      	ldrb	r3, [r4, #0]
    235a:	4543      	cmp	r3, r8
    235c:	d013      	beq.n	2386 <Parser_LoraReset+0xb6>
					PDS_DeleteAll();
    235e:	4b17      	ldr	r3, [pc, #92]	; (23bc <Parser_LoraReset+0xec>)
    2360:	4798      	blx	r3
				status = LORAWAN_Reset(iCount);
    2362:	4640      	mov	r0, r8
    2364:	4b16      	ldr	r3, [pc, #88]	; (23c0 <Parser_LoraReset+0xf0>)
    2366:	4798      	blx	r3
    2368:	0004      	movs	r4, r0
				if(isSwitchReq == true && status == LORAWAN_SUCCESS)
    236a:	2808      	cmp	r0, #8
    236c:	d10f      	bne.n	238e <Parser_LoraReset+0xbe>
					PDS_StoreAll();
    236e:	4b15      	ldr	r3, [pc, #84]	; (23c4 <Parser_LoraReset+0xf4>)
    2370:	4798      	blx	r3
    2372:	e00e      	b.n	2392 <Parser_LoraReset+0xc2>
				status = LORAWAN_Reset(iCount);
    2374:	4640      	mov	r0, r8
    2376:	4b12      	ldr	r3, [pc, #72]	; (23c0 <Parser_LoraReset+0xf0>)
    2378:	4798      	blx	r3
    237a:	0004      	movs	r4, r0
				if(status == LORAWAN_SUCCESS)
    237c:	2808      	cmp	r0, #8
    237e:	d108      	bne.n	2392 <Parser_LoraReset+0xc2>
				    PDS_StoreAll();					
    2380:	4b10      	ldr	r3, [pc, #64]	; (23c4 <Parser_LoraReset+0xf4>)
    2382:	4798      	blx	r3
    2384:	e005      	b.n	2392 <Parser_LoraReset+0xc2>
				status = LORAWAN_Reset(iCount);
    2386:	4640      	mov	r0, r8
    2388:	4b0d      	ldr	r3, [pc, #52]	; (23c0 <Parser_LoraReset+0xf0>)
    238a:	4798      	blx	r3
    238c:	0004      	movs	r4, r0
					PDS_RestoreAll();
    238e:	4b0a      	ldr	r3, [pc, #40]	; (23b8 <Parser_LoraReset+0xe8>)
    2390:	4798      	blx	r3
		    gParserConfiguredJoinParameters.value = 0x00;		    
    2392:	2200      	movs	r2, #0
    2394:	4b0c      	ldr	r3, [pc, #48]	; (23c8 <Parser_LoraReset+0xf8>)
    2396:	801a      	strh	r2, [r3, #0]
		    break;
    2398:	e7b2      	b.n	2300 <Parser_LoraReset+0x30>
    239a:	46c0      	nop			; (mov r8, r8)
    239c:	0001f840 	.word	0x0001f840
    23a0:	00004359 	.word	0x00004359
    23a4:	0001f8b4 	.word	0x0001f8b4
    23a8:	000119a1 	.word	0x000119a1
    23ac:	0001f818 	.word	0x0001f818
    23b0:	00019f61 	.word	0x00019f61
    23b4:	0000e20d 	.word	0x0000e20d
    23b8:	0000e271 	.word	0x0000e271
    23bc:	0000e255 	.word	0x0000e255
    23c0:	00013f1d 	.word	0x00013f1d
    23c4:	0000e35d 	.word	0x0000e35d
    23c8:	20001f88 	.word	0x20001f88

000023cc <Parser_LoraJoin>:
{
    23cc:	b510      	push	{r4, lr}
    23ce:	0004      	movs	r4, r0
    validationVal = Validate_Str1Str2AsciiValue(pParserCmdInfo->pParam1, gapParseJoinMode[OTAA_STR_IDX], gapParseJoinMode[ABP_STR_IDX]);
    23d0:	4a08      	ldr	r2, [pc, #32]	; (23f4 <Parser_LoraJoin+0x28>)
    23d2:	4909      	ldr	r1, [pc, #36]	; (23f8 <Parser_LoraJoin+0x2c>)
    23d4:	6800      	ldr	r0, [r0, #0]
    23d6:	4b09      	ldr	r3, [pc, #36]	; (23fc <Parser_LoraJoin+0x30>)
    23d8:	4798      	blx	r3
    StackRetStatus_t status = LORAWAN_INVALID_PARAMETER;
    23da:	230a      	movs	r3, #10
    if(validationVal < 2U)
    23dc:	2801      	cmp	r0, #1
    23de:	d904      	bls.n	23ea <Parser_LoraJoin+0x1e>
	pParserCmdInfo->pReplyCmd = (char*)gapParserLorawanStatus[status];
    23e0:	009b      	lsls	r3, r3, #2
    23e2:	4a07      	ldr	r2, [pc, #28]	; (2400 <Parser_LoraJoin+0x34>)
    23e4:	589b      	ldr	r3, [r3, r2]
    23e6:	6163      	str	r3, [r4, #20]
}
    23e8:	bd10      	pop	{r4, pc}
        status = LORAWAN_Join(validationVal);
    23ea:	4b06      	ldr	r3, [pc, #24]	; (2404 <Parser_LoraJoin+0x38>)
    23ec:	4798      	blx	r3
    23ee:	0003      	movs	r3, r0
    23f0:	e7f6      	b.n	23e0 <Parser_LoraJoin+0x14>
    23f2:	46c0      	nop			; (mov r8, r8)
    23f4:	0001f80c 	.word	0x0001f80c
    23f8:	0001f810 	.word	0x0001f810
    23fc:	0000441d 	.word	0x0000441d
    2400:	0001f8b4 	.word	0x0001f8b4
    2404:	000112d5 	.word	0x000112d5

00002408 <Parser_LoraSend>:
{    
    2408:	b5f0      	push	{r4, r5, r6, r7, lr}
    240a:	b085      	sub	sp, #20
    240c:	0007      	movs	r7, r0
    uint16_t asciiDataLen = strlen(pParserCmdInfo->pParam3);
    240e:	6880      	ldr	r0, [r0, #8]
    2410:	4b1d      	ldr	r3, [pc, #116]	; (2488 <Parser_LoraSend+0x80>)
    2412:	4798      	blx	r3
    2414:	0004      	movs	r4, r0
    validationVal = Validate_Str1Str2AsciiValue(pParserCmdInfo->pParam1, gapParserSendMode[UNCNF_STR_IDX], gapParserSendMode[CNF_STR_IDX]);
    2416:	4a1d      	ldr	r2, [pc, #116]	; (248c <Parser_LoraSend+0x84>)
    2418:	491d      	ldr	r1, [pc, #116]	; (2490 <Parser_LoraSend+0x88>)
    241a:	6838      	ldr	r0, [r7, #0]
    241c:	4b1d      	ldr	r3, [pc, #116]	; (2494 <Parser_LoraSend+0x8c>)
    241e:	4798      	blx	r3
    2420:	9001      	str	r0, [sp, #4]
    2422:	0006      	movs	r6, r0
    if(Validate_Uint8DecAsciiValue(pParserCmdInfo->pParam2, &portValue) && (dataLen <= 255) &&
    2424:	ab02      	add	r3, sp, #8
    2426:	1dd9      	adds	r1, r3, #7
    2428:	6878      	ldr	r0, [r7, #4]
    242a:	4b1b      	ldr	r3, [pc, #108]	; (2498 <Parser_LoraSend+0x90>)
    242c:	4798      	blx	r3
    StackRetStatus_t status = LORAWAN_INVALID_PARAMETER;
    242e:	230a      	movs	r3, #10
    if(Validate_Uint8DecAsciiValue(pParserCmdInfo->pParam2, &portValue) && (dataLen <= 255) &&
    2430:	2800      	cmp	r0, #0
    2432:	d005      	beq.n	2440 <Parser_LoraSend+0x38>
    uint16_t asciiDataLen = strlen(pParserCmdInfo->pParam3);
    2434:	b2a4      	uxth	r4, r4
    uint16_t  dataLen = asciiDataLen >> 1;
    2436:	0865      	lsrs	r5, r4, #1
    if(Validate_Uint8DecAsciiValue(pParserCmdInfo->pParam2, &portValue) && (dataLen <= 255) &&
    2438:	2dff      	cmp	r5, #255	; 0xff
    243a:	d801      	bhi.n	2440 <Parser_LoraSend+0x38>
    243c:	2e01      	cmp	r6, #1
    243e:	d905      	bls.n	244c <Parser_LoraSend+0x44>
        pParserCmdInfo->pReplyCmd = (char*)gapParserLorawanStatus[status];
    2440:	009b      	lsls	r3, r3, #2
    2442:	4a16      	ldr	r2, [pc, #88]	; (249c <Parser_LoraSend+0x94>)
    2444:	589b      	ldr	r3, [r3, r2]
    2446:	617b      	str	r3, [r7, #20]
}
    2448:	b005      	add	sp, #20
    244a:	bdf0      	pop	{r4, r5, r6, r7, pc}
       (validationVal < 2U) && Validate_HexValue(pParserCmdInfo->pParam3))
    244c:	68b8      	ldr	r0, [r7, #8]
    244e:	4b14      	ldr	r3, [pc, #80]	; (24a0 <Parser_LoraSend+0x98>)
    2450:	4798      	blx	r3
    StackRetStatus_t status = LORAWAN_INVALID_PARAMETER;
    2452:	230a      	movs	r3, #10
       (validationVal < 2U) && Validate_HexValue(pParserCmdInfo->pParam3))
    2454:	2800      	cmp	r0, #0
    2456:	d0f3      	beq.n	2440 <Parser_LoraSend+0x38>
        Parser_HexAsciiToInt(asciiDataLen, pParserCmdInfo->pParam3, (uint8_t *)aParserData);
    2458:	4a12      	ldr	r2, [pc, #72]	; (24a4 <Parser_LoraSend+0x9c>)
    245a:	68b9      	ldr	r1, [r7, #8]
    245c:	0020      	movs	r0, r4
    245e:	4b12      	ldr	r3, [pc, #72]	; (24a8 <Parser_LoraSend+0xa0>)
    2460:	4798      	blx	r3
        if(asciiDataLen % 2 == 1)
    2462:	07e3      	lsls	r3, r4, #31
    2464:	d500      	bpl.n	2468 <Parser_LoraSend+0x60>
            dataLen += 1;
    2466:	3501      	adds	r5, #1
        parser_data.confirmed = validationVal;
    2468:	4810      	ldr	r0, [pc, #64]	; (24ac <Parser_LoraSend+0xa4>)
    246a:	466b      	mov	r3, sp
    246c:	791b      	ldrb	r3, [r3, #4]
    246e:	7003      	strb	r3, [r0, #0]
        parser_data.port = portValue;
    2470:	ab02      	add	r3, sp, #8
    2472:	3307      	adds	r3, #7
    2474:	781b      	ldrb	r3, [r3, #0]
    2476:	7043      	strb	r3, [r0, #1]
        parser_data.buffer = aParserData;
    2478:	4b0a      	ldr	r3, [pc, #40]	; (24a4 <Parser_LoraSend+0x9c>)
    247a:	6043      	str	r3, [r0, #4]
        parser_data.bufferLength = (uint8_t)dataLen;
    247c:	7205      	strb	r5, [r0, #8]
        status = LORAWAN_Send(&parser_data);
    247e:	4b0c      	ldr	r3, [pc, #48]	; (24b0 <Parser_LoraSend+0xa8>)
    2480:	4798      	blx	r3
    2482:	0003      	movs	r3, r0
    2484:	e7dc      	b.n	2440 <Parser_LoraSend+0x38>
    2486:	46c0      	nop			; (mov r8, r8)
    2488:	0001a2e1 	.word	0x0001a2e1
    248c:	0001f834 	.word	0x0001f834
    2490:	0001f838 	.word	0x0001f838
    2494:	0000441d 	.word	0x0000441d
    2498:	00004241 	.word	0x00004241
    249c:	0001f8b4 	.word	0x0001f8b4
    24a0:	000041ad 	.word	0x000041ad
    24a4:	2000116c 	.word	0x2000116c
    24a8:	000044b5 	.word	0x000044b5
    24ac:	20001f8c 	.word	0x20001f8c
    24b0:	00010545 	.word	0x00010545

000024b4 <Parser_LoraSetCrtDataRate>:
{
    24b4:	b510      	push	{r4, lr}
    24b6:	b082      	sub	sp, #8
    24b8:	0004      	movs	r4, r0
    if(Validate_Uint8DecAsciiValue(pParserCmdInfo->pParam1, &datarate))
    24ba:	466b      	mov	r3, sp
    24bc:	1dd9      	adds	r1, r3, #7
    24be:	6800      	ldr	r0, [r0, #0]
    24c0:	4b08      	ldr	r3, [pc, #32]	; (24e4 <Parser_LoraSetCrtDataRate+0x30>)
    24c2:	4798      	blx	r3
    StackRetStatus_t status = LORAWAN_INVALID_PARAMETER;
    24c4:	230a      	movs	r3, #10
    if(Validate_Uint8DecAsciiValue(pParserCmdInfo->pParam1, &datarate))
    24c6:	2800      	cmp	r0, #0
    24c8:	d105      	bne.n	24d6 <Parser_LoraSetCrtDataRate+0x22>
    pParserCmdInfo->pReplyCmd = (char*)gapParserLorawanStatus[status];
    24ca:	009b      	lsls	r3, r3, #2
    24cc:	4a06      	ldr	r2, [pc, #24]	; (24e8 <Parser_LoraSetCrtDataRate+0x34>)
    24ce:	589b      	ldr	r3, [r3, r2]
    24d0:	6163      	str	r3, [r4, #20]
}
    24d2:	b002      	add	sp, #8
    24d4:	bd10      	pop	{r4, pc}
        status = LORAWAN_SetAttr(CURRENT_DATARATE,&datarate);
    24d6:	466b      	mov	r3, sp
    24d8:	1dd9      	adds	r1, r3, #7
    24da:	2007      	movs	r0, #7
    24dc:	4b03      	ldr	r3, [pc, #12]	; (24ec <Parser_LoraSetCrtDataRate+0x38>)
    24de:	4798      	blx	r3
    24e0:	0003      	movs	r3, r0
    24e2:	e7f2      	b.n	24ca <Parser_LoraSetCrtDataRate+0x16>
    24e4:	00004241 	.word	0x00004241
    24e8:	0001f8b4 	.word	0x0001f8b4
    24ec:	000139e5 	.word	0x000139e5

000024f0 <Parser_LoraGetCrtDataRate>:
{
    24f0:	b570      	push	{r4, r5, r6, lr}
    24f2:	b082      	sub	sp, #8
    24f4:	0006      	movs	r6, r0
	LORAWAN_GetAttr(CURRENT_DATARATE,NULL,&crtDatarate);
    24f6:	466b      	mov	r3, sp
    24f8:	1ddd      	adds	r5, r3, #7
    24fa:	002a      	movs	r2, r5
    24fc:	2100      	movs	r1, #0
    24fe:	2007      	movs	r0, #7
    2500:	4b05      	ldr	r3, [pc, #20]	; (2518 <Parser_LoraGetCrtDataRate+0x28>)
    2502:	4798      	blx	r3
 	itoa(crtDatarate, aParserData, 10U);
    2504:	4c05      	ldr	r4, [pc, #20]	; (251c <Parser_LoraGetCrtDataRate+0x2c>)
    2506:	7828      	ldrb	r0, [r5, #0]
    2508:	220a      	movs	r2, #10
    250a:	0021      	movs	r1, r4
    250c:	4b04      	ldr	r3, [pc, #16]	; (2520 <Parser_LoraGetCrtDataRate+0x30>)
    250e:	4798      	blx	r3
	pParserCmdInfo->pReplyCmd = aParserData;
    2510:	6174      	str	r4, [r6, #20]
}
    2512:	b002      	add	sp, #8
    2514:	bd70      	pop	{r4, r5, r6, pc}
    2516:	46c0      	nop			; (mov r8, r8)
    2518:	000119a1 	.word	0x000119a1
    251c:	2000116c 	.word	0x2000116c
    2520:	00019735 	.word	0x00019735

00002524 <Parser_LoraSetAdr>:
{
    2524:	b510      	push	{r4, lr}
    2526:	b082      	sub	sp, #8
    2528:	0004      	movs	r4, r0
    validationVal = Validate_OnOffAsciiValue(pParserCmdInfo->pParam1);
    252a:	6800      	ldr	r0, [r0, #0]
    252c:	4b09      	ldr	r3, [pc, #36]	; (2554 <Parser_LoraSetAdr+0x30>)
    252e:	4798      	blx	r3
    2530:	466b      	mov	r3, sp
    2532:	71d8      	strb	r0, [r3, #7]
    StackRetStatus_t status = LORAWAN_INVALID_PARAMETER;
    2534:	230a      	movs	r3, #10
    if(validationVal < 2U)
    2536:	2801      	cmp	r0, #1
    2538:	d905      	bls.n	2546 <Parser_LoraSetAdr+0x22>
    pParserCmdInfo->pReplyCmd = (char*)gapParserLorawanStatus[status];
    253a:	009b      	lsls	r3, r3, #2
    253c:	4a06      	ldr	r2, [pc, #24]	; (2558 <Parser_LoraSetAdr+0x34>)
    253e:	589b      	ldr	r3, [r3, r2]
    2540:	6163      	str	r3, [r4, #20]
}
    2542:	b002      	add	sp, #8
    2544:	bd10      	pop	{r4, pc}
        status = LORAWAN_SetAttr(ADR,&validationVal);
    2546:	466b      	mov	r3, sp
    2548:	1dd9      	adds	r1, r3, #7
    254a:	2006      	movs	r0, #6
    254c:	4b03      	ldr	r3, [pc, #12]	; (255c <Parser_LoraSetAdr+0x38>)
    254e:	4798      	blx	r3
    2550:	0003      	movs	r3, r0
    2552:	e7f2      	b.n	253a <Parser_LoraSetAdr+0x16>
    2554:	000043e9 	.word	0x000043e9
    2558:	0001f8b4 	.word	0x0001f8b4
    255c:	000139e5 	.word	0x000139e5

00002560 <Parser_LoraGetAdr>:
{
    2560:	b530      	push	{r4, r5, lr}
    2562:	b083      	sub	sp, #12
    2564:	0005      	movs	r5, r0
    LORAWAN_GetAttr(ADR,NULL,&adrEnabled);
    2566:	466b      	mov	r3, sp
    2568:	1ddc      	adds	r4, r3, #7
    256a:	0022      	movs	r2, r4
    256c:	2100      	movs	r1, #0
    256e:	2006      	movs	r0, #6
    2570:	4b04      	ldr	r3, [pc, #16]	; (2584 <Parser_LoraGetAdr+0x24>)
    2572:	4798      	blx	r3
    pParserCmdInfo->pReplyCmd = (char*)gapParseOnOff[adrEnabled];
    2574:	7823      	ldrb	r3, [r4, #0]
    2576:	009b      	lsls	r3, r3, #2
    2578:	4a03      	ldr	r2, [pc, #12]	; (2588 <Parser_LoraGetAdr+0x28>)
    257a:	589b      	ldr	r3, [r3, r2]
    257c:	616b      	str	r3, [r5, #20]
}
    257e:	b003      	add	sp, #12
    2580:	bd30      	pop	{r4, r5, pc}
    2582:	46c0      	nop			; (mov r8, r8)
    2584:	000119a1 	.word	0x000119a1
    2588:	0001f894 	.word	0x0001f894

0000258c <Parser_LoraSetDevAddr>:
{
    258c:	b510      	push	{r4, lr}
    258e:	b082      	sub	sp, #8
    2590:	0004      	movs	r4, r0
    if(Validate_HexValue(pParserCmdInfo->pParam1))
    2592:	6800      	ldr	r0, [r0, #0]
    2594:	4b14      	ldr	r3, [pc, #80]	; (25e8 <Parser_LoraSetDevAddr+0x5c>)
    2596:	4798      	blx	r3
    StackRetStatus_t statusIdx = LORAWAN_INVALID_PARAMETER;
    2598:	230a      	movs	r3, #10
    if(Validate_HexValue(pParserCmdInfo->pParam1))
    259a:	2800      	cmp	r0, #0
    259c:	d105      	bne.n	25aa <Parser_LoraSetDevAddr+0x1e>
    pParserCmdInfo->pReplyCmd = (char*)gapParserLorawanStatus[statusIdx];
    259e:	009b      	lsls	r3, r3, #2
    25a0:	4a12      	ldr	r2, [pc, #72]	; (25ec <Parser_LoraSetDevAddr+0x60>)
    25a2:	589b      	ldr	r3, [r3, r2]
    25a4:	6163      	str	r3, [r4, #20]
}
    25a6:	b002      	add	sp, #8
    25a8:	bd10      	pop	{r4, pc}
        if(Parser_HexAsciiToInt(sizeof(devAddr) << 1, pParserCmdInfo->pParam1, tempBuff))
    25aa:	aa01      	add	r2, sp, #4
    25ac:	6821      	ldr	r1, [r4, #0]
    25ae:	2008      	movs	r0, #8
    25b0:	4b0f      	ldr	r3, [pc, #60]	; (25f0 <Parser_LoraSetDevAddr+0x64>)
    25b2:	4798      	blx	r3
    StackRetStatus_t statusIdx = LORAWAN_INVALID_PARAMETER;
    25b4:	230a      	movs	r3, #10
        if(Parser_HexAsciiToInt(sizeof(devAddr) << 1, pParserCmdInfo->pParam1, tempBuff))
    25b6:	2800      	cmp	r0, #0
    25b8:	d0f1      	beq.n	259e <Parser_LoraSetDevAddr+0x12>
            devAddr += ((uint32_t)tempBuff[2]) << 8;
    25ba:	aa01      	add	r2, sp, #4
    25bc:	7893      	ldrb	r3, [r2, #2]
    25be:	021b      	lsls	r3, r3, #8
            devAddr += ((uint32_t)tempBuff[1]) << 16;
    25c0:	7851      	ldrb	r1, [r2, #1]
    25c2:	0409      	lsls	r1, r1, #16
    25c4:	185b      	adds	r3, r3, r1
            devAddr = (uint32_t)tempBuff[3];
    25c6:	78d1      	ldrb	r1, [r2, #3]
            devAddr += ((uint32_t)tempBuff[1]) << 16;
    25c8:	185b      	adds	r3, r3, r1
            devAddr += ((uint32_t)tempBuff[0]) << 24;
    25ca:	7812      	ldrb	r2, [r2, #0]
    25cc:	0612      	lsls	r2, r2, #24
    25ce:	189b      	adds	r3, r3, r2
    25d0:	9300      	str	r3, [sp, #0]
            statusIdx = LORAWAN_SetAttr (DEV_ADDR,&devAddr);
    25d2:	4669      	mov	r1, sp
    25d4:	2002      	movs	r0, #2
    25d6:	4b07      	ldr	r3, [pc, #28]	; (25f4 <Parser_LoraSetDevAddr+0x68>)
    25d8:	4798      	blx	r3
    25da:	0003      	movs	r3, r0
            gParserConfiguredJoinParameters.flags.devaddr = 1;
    25dc:	4906      	ldr	r1, [pc, #24]	; (25f8 <Parser_LoraSetDevAddr+0x6c>)
    25de:	780a      	ldrb	r2, [r1, #0]
    25e0:	2008      	movs	r0, #8
    25e2:	4302      	orrs	r2, r0
    25e4:	700a      	strb	r2, [r1, #0]
    25e6:	e7da      	b.n	259e <Parser_LoraSetDevAddr+0x12>
    25e8:	000041ad 	.word	0x000041ad
    25ec:	0001f8b4 	.word	0x0001f8b4
    25f0:	000044b5 	.word	0x000044b5
    25f4:	000139e5 	.word	0x000139e5
    25f8:	20001f88 	.word	0x20001f88

000025fc <Parser_LoraGetDevAddr>:
{
    25fc:	b530      	push	{r4, r5, lr}
    25fe:	b083      	sub	sp, #12
    2600:	0005      	movs	r5, r0
    LORAWAN_GetAttr(DEV_ADDR, NULL, &devAddr);
    2602:	aa01      	add	r2, sp, #4
    2604:	2100      	movs	r1, #0
    2606:	2002      	movs	r0, #2
    2608:	4b09      	ldr	r3, [pc, #36]	; (2630 <Parser_LoraGetDevAddr+0x34>)
    260a:	4798      	blx	r3
    tempBuff[3] = (uint8_t)devAddr;
    260c:	9b01      	ldr	r3, [sp, #4]
    260e:	466a      	mov	r2, sp
    2610:	70d3      	strb	r3, [r2, #3]
    tempBuff[2] = (uint8_t)(devAddr >> 8);
    2612:	0a1a      	lsrs	r2, r3, #8
    2614:	4669      	mov	r1, sp
    2616:	708a      	strb	r2, [r1, #2]
    tempBuff[1] = (uint8_t)(devAddr >> 16);
    2618:	0c1a      	lsrs	r2, r3, #16
    261a:	704a      	strb	r2, [r1, #1]
    tempBuff[0] = (uint8_t)(devAddr >> 24);
    261c:	0e1b      	lsrs	r3, r3, #24
    261e:	700b      	strb	r3, [r1, #0]
    Parser_IntArrayToHexAscii(4, tempBuff, aParserData);
    2620:	4c04      	ldr	r4, [pc, #16]	; (2634 <Parser_LoraGetDevAddr+0x38>)
    2622:	0022      	movs	r2, r4
    2624:	2004      	movs	r0, #4
    2626:	4b04      	ldr	r3, [pc, #16]	; (2638 <Parser_LoraGetDevAddr+0x3c>)
    2628:	4798      	blx	r3
    pParserCmdInfo->pReplyCmd = aParserData;
    262a:	616c      	str	r4, [r5, #20]
}
    262c:	b003      	add	sp, #12
    262e:	bd30      	pop	{r4, r5, pc}
    2630:	000119a1 	.word	0x000119a1
    2634:	2000116c 	.word	0x2000116c
    2638:	000041e1 	.word	0x000041e1

0000263c <Parser_LoraSetDevEui>:
{
    263c:	b510      	push	{r4, lr}
    263e:	0004      	movs	r4, r0
    if(Validate_HexValue(pParserCmdInfo->pParam1))
    2640:	6800      	ldr	r0, [r0, #0]
    2642:	4b0e      	ldr	r3, [pc, #56]	; (267c <Parser_LoraSetDevEui+0x40>)
    2644:	4798      	blx	r3
    StackRetStatus_t statusIdx = LORAWAN_INVALID_PARAMETER;
    2646:	230a      	movs	r3, #10
    if(Validate_HexValue(pParserCmdInfo->pParam1))
    2648:	2800      	cmp	r0, #0
    264a:	d104      	bne.n	2656 <Parser_LoraSetDevEui+0x1a>
    pParserCmdInfo->pReplyCmd = (char*)gapParserLorawanStatus[statusIdx];
    264c:	009b      	lsls	r3, r3, #2
    264e:	4a0c      	ldr	r2, [pc, #48]	; (2680 <Parser_LoraSetDevEui+0x44>)
    2650:	589b      	ldr	r3, [r3, r2]
    2652:	6163      	str	r3, [r4, #20]
}
    2654:	bd10      	pop	{r4, pc}
        if(Parser_HexAsciiToInt(16, pParserCmdInfo->pParam1, (uint8_t *)aParserData))
    2656:	4a0b      	ldr	r2, [pc, #44]	; (2684 <Parser_LoraSetDevEui+0x48>)
    2658:	6821      	ldr	r1, [r4, #0]
    265a:	2010      	movs	r0, #16
    265c:	4b0a      	ldr	r3, [pc, #40]	; (2688 <Parser_LoraSetDevEui+0x4c>)
    265e:	4798      	blx	r3
    StackRetStatus_t statusIdx = LORAWAN_INVALID_PARAMETER;
    2660:	230a      	movs	r3, #10
        if(Parser_HexAsciiToInt(16, pParserCmdInfo->pParam1, (uint8_t *)aParserData))
    2662:	2800      	cmp	r0, #0
    2664:	d0f2      	beq.n	264c <Parser_LoraSetDevEui+0x10>
            statusIdx = LORAWAN_SetAttr (DEV_EUI,aParserData);
    2666:	4907      	ldr	r1, [pc, #28]	; (2684 <Parser_LoraSetDevEui+0x48>)
    2668:	2000      	movs	r0, #0
    266a:	4b08      	ldr	r3, [pc, #32]	; (268c <Parser_LoraSetDevEui+0x50>)
    266c:	4798      	blx	r3
    266e:	0003      	movs	r3, r0
            gParserConfiguredJoinParameters.flags.deveui = 1;
    2670:	4907      	ldr	r1, [pc, #28]	; (2690 <Parser_LoraSetDevEui+0x54>)
    2672:	780a      	ldrb	r2, [r1, #0]
    2674:	2001      	movs	r0, #1
    2676:	4302      	orrs	r2, r0
    2678:	700a      	strb	r2, [r1, #0]
    267a:	e7e7      	b.n	264c <Parser_LoraSetDevEui+0x10>
    267c:	000041ad 	.word	0x000041ad
    2680:	0001f8b4 	.word	0x0001f8b4
    2684:	2000116c 	.word	0x2000116c
    2688:	000044b5 	.word	0x000044b5
    268c:	000139e5 	.word	0x000139e5
    2690:	20001f88 	.word	0x20001f88

00002694 <Parser_LoraGetDevEui>:
{
    2694:	b530      	push	{r4, r5, lr}
    2696:	b083      	sub	sp, #12
    2698:	0005      	movs	r5, r0
    LORAWAN_GetAttr (DEV_EUI, NULL, aDevEui);
    269a:	466a      	mov	r2, sp
    269c:	2100      	movs	r1, #0
    269e:	2000      	movs	r0, #0
    26a0:	4b05      	ldr	r3, [pc, #20]	; (26b8 <Parser_LoraGetDevEui+0x24>)
    26a2:	4798      	blx	r3
	Parser_IntArrayToHexAscii(DEV_EUI_LEN, aDevEui, aParserData);
    26a4:	4c05      	ldr	r4, [pc, #20]	; (26bc <Parser_LoraGetDevEui+0x28>)
    26a6:	0022      	movs	r2, r4
    26a8:	4669      	mov	r1, sp
    26aa:	2008      	movs	r0, #8
    26ac:	4b04      	ldr	r3, [pc, #16]	; (26c0 <Parser_LoraGetDevEui+0x2c>)
    26ae:	4798      	blx	r3
	pParserCmdInfo->pReplyCmd = aParserData;
    26b0:	616c      	str	r4, [r5, #20]
}
    26b2:	b003      	add	sp, #12
    26b4:	bd30      	pop	{r4, r5, pc}
    26b6:	46c0      	nop			; (mov r8, r8)
    26b8:	000119a1 	.word	0x000119a1
    26bc:	2000116c 	.word	0x2000116c
    26c0:	000041e1 	.word	0x000041e1

000026c4 <Parser_LoraSetJoinEui>:
{
    26c4:	b510      	push	{r4, lr}
    26c6:	0004      	movs	r4, r0
    if(Validate_HexValue(pParserCmdInfo->pParam1))
    26c8:	6800      	ldr	r0, [r0, #0]
    26ca:	4b0e      	ldr	r3, [pc, #56]	; (2704 <Parser_LoraSetJoinEui+0x40>)
    26cc:	4798      	blx	r3
    StackRetStatus_t statusIdx = LORAWAN_INVALID_PARAMETER;
    26ce:	230a      	movs	r3, #10
    if(Validate_HexValue(pParserCmdInfo->pParam1))
    26d0:	2800      	cmp	r0, #0
    26d2:	d104      	bne.n	26de <Parser_LoraSetJoinEui+0x1a>
    pParserCmdInfo->pReplyCmd = (char*)gapParserLorawanStatus[statusIdx];
    26d4:	009b      	lsls	r3, r3, #2
    26d6:	4a0c      	ldr	r2, [pc, #48]	; (2708 <Parser_LoraSetJoinEui+0x44>)
    26d8:	589b      	ldr	r3, [r3, r2]
    26da:	6163      	str	r3, [r4, #20]
}
    26dc:	bd10      	pop	{r4, pc}
        if(Parser_HexAsciiToInt(16, pParserCmdInfo->pParam1, (uint8_t *)aParserData))
    26de:	4a0b      	ldr	r2, [pc, #44]	; (270c <Parser_LoraSetJoinEui+0x48>)
    26e0:	6821      	ldr	r1, [r4, #0]
    26e2:	2010      	movs	r0, #16
    26e4:	4b0a      	ldr	r3, [pc, #40]	; (2710 <Parser_LoraSetJoinEui+0x4c>)
    26e6:	4798      	blx	r3
    StackRetStatus_t statusIdx = LORAWAN_INVALID_PARAMETER;
    26e8:	230a      	movs	r3, #10
        if(Parser_HexAsciiToInt(16, pParserCmdInfo->pParam1, (uint8_t *)aParserData))
    26ea:	2800      	cmp	r0, #0
    26ec:	d0f2      	beq.n	26d4 <Parser_LoraSetJoinEui+0x10>
            statusIdx = LORAWAN_SetAttr(APP_EUI,aParserData);
    26ee:	4907      	ldr	r1, [pc, #28]	; (270c <Parser_LoraSetJoinEui+0x48>)
    26f0:	2001      	movs	r0, #1
    26f2:	4b08      	ldr	r3, [pc, #32]	; (2714 <Parser_LoraSetJoinEui+0x50>)
    26f4:	4798      	blx	r3
    26f6:	0003      	movs	r3, r0
            gParserConfiguredJoinParameters.flags.joineui = 1;          
    26f8:	4907      	ldr	r1, [pc, #28]	; (2718 <Parser_LoraSetJoinEui+0x54>)
    26fa:	780a      	ldrb	r2, [r1, #0]
    26fc:	2002      	movs	r0, #2
    26fe:	4302      	orrs	r2, r0
    2700:	700a      	strb	r2, [r1, #0]
    2702:	e7e7      	b.n	26d4 <Parser_LoraSetJoinEui+0x10>
    2704:	000041ad 	.word	0x000041ad
    2708:	0001f8b4 	.word	0x0001f8b4
    270c:	2000116c 	.word	0x2000116c
    2710:	000044b5 	.word	0x000044b5
    2714:	000139e5 	.word	0x000139e5
    2718:	20001f88 	.word	0x20001f88

0000271c <Parser_LoraGetJoinEui>:
{
    271c:	b530      	push	{r4, r5, lr}
    271e:	b083      	sub	sp, #12
    2720:	0005      	movs	r5, r0
    LORAWAN_GetAttr(APP_EUI, NULL, aJoinEui);
    2722:	466a      	mov	r2, sp
    2724:	2100      	movs	r1, #0
    2726:	2001      	movs	r0, #1
    2728:	4b05      	ldr	r3, [pc, #20]	; (2740 <Parser_LoraGetJoinEui+0x24>)
    272a:	4798      	blx	r3
	Parser_IntArrayToHexAscii(JOIN_EUI_LEN, aJoinEui, aParserData);
    272c:	4c05      	ldr	r4, [pc, #20]	; (2744 <Parser_LoraGetJoinEui+0x28>)
    272e:	0022      	movs	r2, r4
    2730:	4669      	mov	r1, sp
    2732:	2008      	movs	r0, #8
    2734:	4b04      	ldr	r3, [pc, #16]	; (2748 <Parser_LoraGetJoinEui+0x2c>)
    2736:	4798      	blx	r3
	pParserCmdInfo->pReplyCmd = aParserData;
    2738:	616c      	str	r4, [r5, #20]
}
    273a:	b003      	add	sp, #12
    273c:	bd30      	pop	{r4, r5, pc}
    273e:	46c0      	nop			; (mov r8, r8)
    2740:	000119a1 	.word	0x000119a1
    2744:	2000116c 	.word	0x2000116c
    2748:	000041e1 	.word	0x000041e1

0000274c <Parser_LoraSetNwkSKey>:
{
    274c:	b510      	push	{r4, lr}
    274e:	0004      	movs	r4, r0
    if(Validate_HexValue(pParserCmdInfo->pParam1))
    2750:	6800      	ldr	r0, [r0, #0]
    2752:	4b0e      	ldr	r3, [pc, #56]	; (278c <Parser_LoraSetNwkSKey+0x40>)
    2754:	4798      	blx	r3
    StackRetStatus_t statusIdx = LORAWAN_INVALID_PARAMETER;
    2756:	230a      	movs	r3, #10
    if(Validate_HexValue(pParserCmdInfo->pParam1))
    2758:	2800      	cmp	r0, #0
    275a:	d104      	bne.n	2766 <Parser_LoraSetNwkSKey+0x1a>
    pParserCmdInfo->pReplyCmd = (char*)gapParserLorawanStatus[statusIdx];
    275c:	009b      	lsls	r3, r3, #2
    275e:	4a0c      	ldr	r2, [pc, #48]	; (2790 <Parser_LoraSetNwkSKey+0x44>)
    2760:	589b      	ldr	r3, [r3, r2]
    2762:	6163      	str	r3, [r4, #20]
}
    2764:	bd10      	pop	{r4, pc}
        if(Parser_HexAsciiToInt(32U, pParserCmdInfo->pParam1, (uint8_t *)aParserData))
    2766:	4a0b      	ldr	r2, [pc, #44]	; (2794 <Parser_LoraSetNwkSKey+0x48>)
    2768:	6821      	ldr	r1, [r4, #0]
    276a:	2020      	movs	r0, #32
    276c:	4b0a      	ldr	r3, [pc, #40]	; (2798 <Parser_LoraSetNwkSKey+0x4c>)
    276e:	4798      	blx	r3
    StackRetStatus_t statusIdx = LORAWAN_INVALID_PARAMETER;
    2770:	230a      	movs	r3, #10
        if(Parser_HexAsciiToInt(32U, pParserCmdInfo->pParam1, (uint8_t *)aParserData))
    2772:	2800      	cmp	r0, #0
    2774:	d0f2      	beq.n	275c <Parser_LoraSetNwkSKey+0x10>
            statusIdx = LORAWAN_SetAttr(NWKS_KEY,aParserData);
    2776:	4907      	ldr	r1, [pc, #28]	; (2794 <Parser_LoraSetNwkSKey+0x48>)
    2778:	2004      	movs	r0, #4
    277a:	4b08      	ldr	r3, [pc, #32]	; (279c <Parser_LoraSetNwkSKey+0x50>)
    277c:	4798      	blx	r3
    277e:	0003      	movs	r3, r0
            gParserConfiguredJoinParameters.flags.nwkskey = 1;
    2780:	4907      	ldr	r1, [pc, #28]	; (27a0 <Parser_LoraSetNwkSKey+0x54>)
    2782:	780a      	ldrb	r2, [r1, #0]
    2784:	2010      	movs	r0, #16
    2786:	4302      	orrs	r2, r0
    2788:	700a      	strb	r2, [r1, #0]
    278a:	e7e7      	b.n	275c <Parser_LoraSetNwkSKey+0x10>
    278c:	000041ad 	.word	0x000041ad
    2790:	0001f8b4 	.word	0x0001f8b4
    2794:	2000116c 	.word	0x2000116c
    2798:	000044b5 	.word	0x000044b5
    279c:	000139e5 	.word	0x000139e5
    27a0:	20001f88 	.word	0x20001f88

000027a4 <Parser_LoraSetAppSKey>:
{
    27a4:	b510      	push	{r4, lr}
    27a6:	0004      	movs	r4, r0
    if(Validate_HexValue(pParserCmdInfo->pParam1))
    27a8:	6800      	ldr	r0, [r0, #0]
    27aa:	4b0e      	ldr	r3, [pc, #56]	; (27e4 <Parser_LoraSetAppSKey+0x40>)
    27ac:	4798      	blx	r3
    StackRetStatus_t statusIdx = LORAWAN_INVALID_PARAMETER;
    27ae:	230a      	movs	r3, #10
    if(Validate_HexValue(pParserCmdInfo->pParam1))
    27b0:	2800      	cmp	r0, #0
    27b2:	d104      	bne.n	27be <Parser_LoraSetAppSKey+0x1a>
    pParserCmdInfo->pReplyCmd = (char*)gapParserLorawanStatus[statusIdx];
    27b4:	009b      	lsls	r3, r3, #2
    27b6:	4a0c      	ldr	r2, [pc, #48]	; (27e8 <Parser_LoraSetAppSKey+0x44>)
    27b8:	589b      	ldr	r3, [r3, r2]
    27ba:	6163      	str	r3, [r4, #20]
}
    27bc:	bd10      	pop	{r4, pc}
        if(Parser_HexAsciiToInt(32U, pParserCmdInfo->pParam1, (uint8_t *)aParserData))
    27be:	4a0b      	ldr	r2, [pc, #44]	; (27ec <Parser_LoraSetAppSKey+0x48>)
    27c0:	6821      	ldr	r1, [r4, #0]
    27c2:	2020      	movs	r0, #32
    27c4:	4b0a      	ldr	r3, [pc, #40]	; (27f0 <Parser_LoraSetAppSKey+0x4c>)
    27c6:	4798      	blx	r3
    StackRetStatus_t statusIdx = LORAWAN_INVALID_PARAMETER;
    27c8:	230a      	movs	r3, #10
        if(Parser_HexAsciiToInt(32U, pParserCmdInfo->pParam1, (uint8_t *)aParserData))
    27ca:	2800      	cmp	r0, #0
    27cc:	d0f2      	beq.n	27b4 <Parser_LoraSetAppSKey+0x10>
            statusIdx = LORAWAN_SetAttr(APPS_KEY, aParserData);
    27ce:	4907      	ldr	r1, [pc, #28]	; (27ec <Parser_LoraSetAppSKey+0x48>)
    27d0:	2005      	movs	r0, #5
    27d2:	4b08      	ldr	r3, [pc, #32]	; (27f4 <Parser_LoraSetAppSKey+0x50>)
    27d4:	4798      	blx	r3
    27d6:	0003      	movs	r3, r0
            gParserConfiguredJoinParameters.flags.appskey = 1;
    27d8:	4907      	ldr	r1, [pc, #28]	; (27f8 <Parser_LoraSetAppSKey+0x54>)
    27da:	780a      	ldrb	r2, [r1, #0]
    27dc:	2020      	movs	r0, #32
    27de:	4302      	orrs	r2, r0
    27e0:	700a      	strb	r2, [r1, #0]
    27e2:	e7e7      	b.n	27b4 <Parser_LoraSetAppSKey+0x10>
    27e4:	000041ad 	.word	0x000041ad
    27e8:	0001f8b4 	.word	0x0001f8b4
    27ec:	2000116c 	.word	0x2000116c
    27f0:	000044b5 	.word	0x000044b5
    27f4:	000139e5 	.word	0x000139e5
    27f8:	20001f88 	.word	0x20001f88

000027fc <Parser_LoraSetAppKey>:
{
    27fc:	b510      	push	{r4, lr}
    27fe:	0004      	movs	r4, r0
    if(Validate_HexValue(pParserCmdInfo->pParam1))
    2800:	6800      	ldr	r0, [r0, #0]
    2802:	4b0e      	ldr	r3, [pc, #56]	; (283c <Parser_LoraSetAppKey+0x40>)
    2804:	4798      	blx	r3
    StackRetStatus_t statusIdx = LORAWAN_INVALID_PARAMETER;
    2806:	230a      	movs	r3, #10
    if(Validate_HexValue(pParserCmdInfo->pParam1))
    2808:	2800      	cmp	r0, #0
    280a:	d104      	bne.n	2816 <Parser_LoraSetAppKey+0x1a>
    pParserCmdInfo->pReplyCmd = (char*)gapParserLorawanStatus[statusIdx];
    280c:	009b      	lsls	r3, r3, #2
    280e:	4a0c      	ldr	r2, [pc, #48]	; (2840 <Parser_LoraSetAppKey+0x44>)
    2810:	589b      	ldr	r3, [r3, r2]
    2812:	6163      	str	r3, [r4, #20]
}
    2814:	bd10      	pop	{r4, pc}
        if(Parser_HexAsciiToInt(32U, pParserCmdInfo->pParam1, (uint8_t *)aParserData))
    2816:	4a0b      	ldr	r2, [pc, #44]	; (2844 <Parser_LoraSetAppKey+0x48>)
    2818:	6821      	ldr	r1, [r4, #0]
    281a:	2020      	movs	r0, #32
    281c:	4b0a      	ldr	r3, [pc, #40]	; (2848 <Parser_LoraSetAppKey+0x4c>)
    281e:	4798      	blx	r3
    StackRetStatus_t statusIdx = LORAWAN_INVALID_PARAMETER;
    2820:	230a      	movs	r3, #10
        if(Parser_HexAsciiToInt(32U, pParserCmdInfo->pParam1, (uint8_t *)aParserData))
    2822:	2800      	cmp	r0, #0
    2824:	d0f2      	beq.n	280c <Parser_LoraSetAppKey+0x10>
             statusIdx = LORAWAN_SetAttr(APP_KEY,aParserData);
    2826:	4907      	ldr	r1, [pc, #28]	; (2844 <Parser_LoraSetAppKey+0x48>)
    2828:	2003      	movs	r0, #3
    282a:	4b08      	ldr	r3, [pc, #32]	; (284c <Parser_LoraSetAppKey+0x50>)
    282c:	4798      	blx	r3
    282e:	0003      	movs	r3, r0
            gParserConfiguredJoinParameters.flags.appkey = 1;
    2830:	4907      	ldr	r1, [pc, #28]	; (2850 <Parser_LoraSetAppKey+0x54>)
    2832:	780a      	ldrb	r2, [r1, #0]
    2834:	2004      	movs	r0, #4
    2836:	4302      	orrs	r2, r0
    2838:	700a      	strb	r2, [r1, #0]
    283a:	e7e7      	b.n	280c <Parser_LoraSetAppKey+0x10>
    283c:	000041ad 	.word	0x000041ad
    2840:	0001f8b4 	.word	0x0001f8b4
    2844:	2000116c 	.word	0x2000116c
    2848:	000044b5 	.word	0x000044b5
    284c:	000139e5 	.word	0x000139e5
    2850:	20001f88 	.word	0x20001f88

00002854 <Parser_LoraSetChannelFreq>:
{
    2854:	b530      	push	{r4, r5, lr}
    2856:	b085      	sub	sp, #20
    2858:	0004      	movs	r4, r0
    unsigned long freq = strtoul(pParserCmdInfo->pParam2, NULL, 10);
    285a:	220a      	movs	r2, #10
    285c:	2100      	movs	r1, #0
    285e:	6840      	ldr	r0, [r0, #4]
    2860:	4b14      	ldr	r3, [pc, #80]	; (28b4 <Parser_LoraSetChannelFreq+0x60>)
    2862:	4798      	blx	r3
    2864:	0005      	movs	r5, r0
    ChannelParameters_t ch_params = {0};
    2866:	2208      	movs	r2, #8
    2868:	2100      	movs	r1, #0
    286a:	a801      	add	r0, sp, #4
    286c:	4b12      	ldr	r3, [pc, #72]	; (28b8 <Parser_LoraSetChannelFreq+0x64>)
    286e:	4798      	blx	r3
    if(Validate_Uint8DecAsciiValue(pParserCmdInfo->pParam1, &channelId) &&
    2870:	210f      	movs	r1, #15
    2872:	4469      	add	r1, sp
    2874:	6820      	ldr	r0, [r4, #0]
    2876:	4b11      	ldr	r3, [pc, #68]	; (28bc <Parser_LoraSetChannelFreq+0x68>)
    2878:	4798      	blx	r3
    StackRetStatus_t status = LORAWAN_INVALID_PARAMETER;
    287a:	230a      	movs	r3, #10
    if(Validate_Uint8DecAsciiValue(pParserCmdInfo->pParam1, &channelId) &&
    287c:	2800      	cmp	r0, #0
    287e:	d105      	bne.n	288c <Parser_LoraSetChannelFreq+0x38>
    pParserCmdInfo->pReplyCmd = (char*)gapParserLorawanStatus[status];
    2880:	009b      	lsls	r3, r3, #2
    2882:	4a0f      	ldr	r2, [pc, #60]	; (28c0 <Parser_LoraSetChannelFreq+0x6c>)
    2884:	589b      	ldr	r3, [r3, r2]
    2886:	6163      	str	r3, [r4, #20]
}
    2888:	b005      	add	sp, #20
    288a:	bd30      	pop	{r4, r5, pc}
       Validate_UintDecAsciiValue(pParserCmdInfo->pParam2, 10, UINT32_MAX))
    288c:	2201      	movs	r2, #1
    288e:	4252      	negs	r2, r2
    2890:	210a      	movs	r1, #10
    2892:	6860      	ldr	r0, [r4, #4]
    2894:	4b0b      	ldr	r3, [pc, #44]	; (28c4 <Parser_LoraSetChannelFreq+0x70>)
    2896:	4798      	blx	r3
    StackRetStatus_t status = LORAWAN_INVALID_PARAMETER;
    2898:	230a      	movs	r3, #10
    if(Validate_Uint8DecAsciiValue(pParserCmdInfo->pParam1, &channelId) &&
    289a:	2800      	cmp	r0, #0
    289c:	d0f0      	beq.n	2880 <Parser_LoraSetChannelFreq+0x2c>
        ch_params.channelId = channelId;
    289e:	a901      	add	r1, sp, #4
    28a0:	3305      	adds	r3, #5
    28a2:	446b      	add	r3, sp
    28a4:	781b      	ldrb	r3, [r3, #0]
    28a6:	700b      	strb	r3, [r1, #0]
        ch_params.channelAttr.frequency = (uint32_t)freq;
    28a8:	604d      	str	r5, [r1, #4]
        status = LORAWAN_SetAttr(CH_PARAM_FREQUENCY,&ch_params);
    28aa:	201a      	movs	r0, #26
    28ac:	4b06      	ldr	r3, [pc, #24]	; (28c8 <Parser_LoraSetChannelFreq+0x74>)
    28ae:	4798      	blx	r3
    28b0:	0003      	movs	r3, r0
    28b2:	e7e5      	b.n	2880 <Parser_LoraSetChannelFreq+0x2c>
    28b4:	0001a5ed 	.word	0x0001a5ed
    28b8:	00019ead 	.word	0x00019ead
    28bc:	00004241 	.word	0x00004241
    28c0:	0001f8b4 	.word	0x0001f8b4
    28c4:	00004315 	.word	0x00004315
    28c8:	000139e5 	.word	0x000139e5

000028cc <Parser_LoraGetChannelFreq>:
{
    28cc:	b530      	push	{r4, r5, lr}
    28ce:	b083      	sub	sp, #12
    28d0:	0004      	movs	r4, r0
    pParserCmdInfo->pReplyCmd = (char*)gapParserLorawanStatus[LORAWAN_INVALID_PARAMETER];
    28d2:	4b0d      	ldr	r3, [pc, #52]	; (2908 <Parser_LoraGetChannelFreq+0x3c>)
    28d4:	6143      	str	r3, [r0, #20]
    if(Validate_Uint8DecAsciiValue(pParserCmdInfo->pParam1, &channelId))
    28d6:	466b      	mov	r3, sp
    28d8:	1cd9      	adds	r1, r3, #3
    28da:	6800      	ldr	r0, [r0, #0]
    28dc:	4b0b      	ldr	r3, [pc, #44]	; (290c <Parser_LoraGetChannelFreq+0x40>)
    28de:	4798      	blx	r3
    28e0:	2800      	cmp	r0, #0
    28e2:	d101      	bne.n	28e8 <Parser_LoraGetChannelFreq+0x1c>
}
    28e4:	b003      	add	sp, #12
    28e6:	bd30      	pop	{r4, r5, pc}
        status = LORAWAN_GetAttr(CH_PARAM_FREQUENCY,&channelId,&freq);
    28e8:	aa01      	add	r2, sp, #4
    28ea:	466b      	mov	r3, sp
    28ec:	1cd9      	adds	r1, r3, #3
    28ee:	201a      	movs	r0, #26
    28f0:	4b07      	ldr	r3, [pc, #28]	; (2910 <Parser_LoraGetChannelFreq+0x44>)
    28f2:	4798      	blx	r3
		if(status == LORAWAN_SUCCESS)
    28f4:	2808      	cmp	r0, #8
    28f6:	d1f5      	bne.n	28e4 <Parser_LoraGetChannelFreq+0x18>
			ultoa(aParserData, freq, 10U);
    28f8:	4d06      	ldr	r5, [pc, #24]	; (2914 <Parser_LoraGetChannelFreq+0x48>)
    28fa:	220a      	movs	r2, #10
    28fc:	9901      	ldr	r1, [sp, #4]
    28fe:	0028      	movs	r0, r5
    2900:	4b05      	ldr	r3, [pc, #20]	; (2918 <Parser_LoraGetChannelFreq+0x4c>)
    2902:	4798      	blx	r3
			pParserCmdInfo->pReplyCmd = aParserData;	
    2904:	6165      	str	r5, [r4, #20]
}
    2906:	e7ed      	b.n	28e4 <Parser_LoraGetChannelFreq+0x18>
    2908:	0001f644 	.word	0x0001f644
    290c:	00004241 	.word	0x00004241
    2910:	000119a1 	.word	0x000119a1
    2914:	2000116c 	.word	0x2000116c
    2918:	00004299 	.word	0x00004299

0000291c <Parser_LoraSetSubBandStatus>:
{
    291c:	b5f0      	push	{r4, r5, r6, r7, lr}
    291e:	46ce      	mov	lr, r9
    2920:	b500      	push	{lr}
    2922:	b086      	sub	sp, #24
    2924:	0006      	movs	r6, r0
    validationVal = Validate_OnOffAsciiValue(pParserCmdInfo->pParam2);
    2926:	6840      	ldr	r0, [r0, #4]
    2928:	4b23      	ldr	r3, [pc, #140]	; (29b8 <Parser_LoraSetSubBandStatus+0x9c>)
    292a:	4798      	blx	r3
    292c:	9001      	str	r0, [sp, #4]
    292e:	0005      	movs	r5, r0
    if (Validate_Uint8DecAsciiValue(pParserCmdInfo->pParam1, &subBandId) && 
    2930:	210f      	movs	r1, #15
    2932:	ab02      	add	r3, sp, #8
    2934:	469c      	mov	ip, r3
    2936:	4461      	add	r1, ip
    2938:	6830      	ldr	r0, [r6, #0]
    293a:	4b20      	ldr	r3, [pc, #128]	; (29bc <Parser_LoraSetSubBandStatus+0xa0>)
    293c:	4798      	blx	r3
    StackRetStatus_t status = LORAWAN_INVALID_PARAMETER;
    293e:	230a      	movs	r3, #10
    if (Validate_Uint8DecAsciiValue(pParserCmdInfo->pParam1, &subBandId) && 
    2940:	2800      	cmp	r0, #0
    2942:	d001      	beq.n	2948 <Parser_LoraSetSubBandStatus+0x2c>
    2944:	2d01      	cmp	r5, #1
    2946:	d907      	bls.n	2958 <Parser_LoraSetSubBandStatus+0x3c>
    pParserCmdInfo->pReplyCmd = (char*)gapParserLorawanStatus[status];
    2948:	009b      	lsls	r3, r3, #2
    294a:	4a1d      	ldr	r2, [pc, #116]	; (29c0 <Parser_LoraSetSubBandStatus+0xa4>)
    294c:	589b      	ldr	r3, [r3, r2]
    294e:	6173      	str	r3, [r6, #20]
}
    2950:	b006      	add	sp, #24
    2952:	bc04      	pop	{r2}
    2954:	4691      	mov	r9, r2
    2956:	bdf0      	pop	{r4, r5, r6, r7, pc}
            (subBandId >= 1) && 
    2958:	3305      	adds	r3, #5
    295a:	aa02      	add	r2, sp, #8
    295c:	4694      	mov	ip, r2
    295e:	4463      	add	r3, ip
    2960:	781a      	ldrb	r2, [r3, #0]
            (validationVal < 2U) && 
    2962:	1e51      	subs	r1, r2, #1
    StackRetStatus_t status = LORAWAN_INVALID_PARAMETER;
    2964:	230a      	movs	r3, #10
            (validationVal < 2U) && 
    2966:	2907      	cmp	r1, #7
    2968:	d8ee      	bhi.n	2948 <Parser_LoraSetSubBandStatus+0x2c>
           for (i = ((subBandId - 1) * 8); i <= ((subBandId * 8) - 1); i++)
    296a:	00cc      	lsls	r4, r1, #3
    296c:	b2e4      	uxtb	r4, r4
    296e:	00d3      	lsls	r3, r2, #3
    2970:	3b01      	subs	r3, #1
    2972:	429c      	cmp	r4, r3
    2974:	dc14      	bgt.n	29a0 <Parser_LoraSetSubBandStatus+0x84>
			   ch_params.channelId = i;
    2976:	af03      	add	r7, sp, #12
			   ch_params.channelAttr.status = validationVal;
    2978:	1e6b      	subs	r3, r5, #1
    297a:	419d      	sbcs	r5, r3
               status = LORAWAN_SetAttr(CH_PARAM_STATUS, &ch_params);
    297c:	4b11      	ldr	r3, [pc, #68]	; (29c4 <Parser_LoraSetSubBandStatus+0xa8>)
    297e:	4699      	mov	r9, r3
			   ch_params.channelId = i;
    2980:	703c      	strb	r4, [r7, #0]
			   ch_params.channelAttr.status = validationVal;
    2982:	713d      	strb	r5, [r7, #4]
               status = LORAWAN_SetAttr(CH_PARAM_STATUS, &ch_params);
    2984:	0039      	movs	r1, r7
    2986:	201c      	movs	r0, #28
    2988:	47c8      	blx	r9
           for (i = ((subBandId - 1) * 8); i <= ((subBandId * 8) - 1); i++)
    298a:	3401      	adds	r4, #1
    298c:	b2e4      	uxtb	r4, r4
    298e:	230f      	movs	r3, #15
    2990:	aa02      	add	r2, sp, #8
    2992:	4694      	mov	ip, r2
    2994:	4463      	add	r3, ip
    2996:	781a      	ldrb	r2, [r3, #0]
    2998:	00d3      	lsls	r3, r2, #3
    299a:	3b01      	subs	r3, #1
    299c:	429c      	cmp	r4, r3
    299e:	ddef      	ble.n	2980 <Parser_LoraSetSubBandStatus+0x64>
               ch_params.channelId = (63 + subBandId);
    29a0:	a903      	add	r1, sp, #12
    29a2:	323f      	adds	r2, #63	; 0x3f
    29a4:	700a      	strb	r2, [r1, #0]
               ch_params.channelAttr.status = validationVal;
    29a6:	9a01      	ldr	r2, [sp, #4]
    29a8:	1e53      	subs	r3, r2, #1
    29aa:	419a      	sbcs	r2, r3
    29ac:	710a      	strb	r2, [r1, #4]
               status = LORAWAN_SetAttr(CH_PARAM_STATUS, &ch_params);
    29ae:	201c      	movs	r0, #28
    29b0:	4b04      	ldr	r3, [pc, #16]	; (29c4 <Parser_LoraSetSubBandStatus+0xa8>)
    29b2:	4798      	blx	r3
    29b4:	0003      	movs	r3, r0
    29b6:	e7c7      	b.n	2948 <Parser_LoraSetSubBandStatus+0x2c>
    29b8:	000043e9 	.word	0x000043e9
    29bc:	00004241 	.word	0x00004241
    29c0:	0001f8b4 	.word	0x0001f8b4
    29c4:	000139e5 	.word	0x000139e5

000029c8 <Parser_LoraGetSubBandStatus>:
{
    29c8:	b5f0      	push	{r4, r5, r6, r7, lr}
    29ca:	46c6      	mov	lr, r8
    29cc:	b500      	push	{lr}
    29ce:	b082      	sub	sp, #8
    29d0:	0006      	movs	r6, r0
    pParserCmdInfo->pReplyCmd = (char*)gapParserLorawanStatus[LORAWAN_INVALID_PARAMETER];
    29d2:	4b23      	ldr	r3, [pc, #140]	; (2a60 <Parser_LoraGetSubBandStatus+0x98>)
    29d4:	6143      	str	r3, [r0, #20]
    if (Validate_Uint8DecAsciiValue(pParserCmdInfo->pParam1, &subBandId) && 
    29d6:	466b      	mov	r3, sp
    29d8:	1dd9      	adds	r1, r3, #7
    29da:	6800      	ldr	r0, [r0, #0]
    29dc:	4b21      	ldr	r3, [pc, #132]	; (2a64 <Parser_LoraGetSubBandStatus+0x9c>)
    29de:	4798      	blx	r3
    29e0:	2800      	cmp	r0, #0
    29e2:	d030      	beq.n	2a46 <Parser_LoraGetSubBandStatus+0x7e>
            (subBandId >= 1) && 
    29e4:	466b      	mov	r3, sp
    29e6:	79da      	ldrb	r2, [r3, #7]
    if (Validate_Uint8DecAsciiValue(pParserCmdInfo->pParam1, &subBandId) && 
    29e8:	1e53      	subs	r3, r2, #1
    29ea:	2b07      	cmp	r3, #7
    29ec:	d82b      	bhi.n	2a46 <Parser_LoraGetSubBandStatus+0x7e>
        for (i = ((subBandId - 1) * 8); i <= ((subBandId * 8) - 1); i++)
    29ee:	00dc      	lsls	r4, r3, #3
    29f0:	b2e4      	uxtb	r4, r4
    29f2:	00d3      	lsls	r3, r2, #3
    29f4:	3b01      	subs	r3, #1
    29f6:	429c      	cmp	r4, r3
    29f8:	dc1b      	bgt.n	2a32 <Parser_LoraGetSubBandStatus+0x6a>
             if(LORAWAN_GetAttr(CH_PARAM_STATUS, &subBandId, &chStatus) == LORAWAN_SUCCESS)
    29fa:	466b      	mov	r3, sp
    29fc:	1ddd      	adds	r5, r3, #7
    29fe:	4f1a      	ldr	r7, [pc, #104]	; (2a68 <Parser_LoraGetSubBandStatus+0xa0>)
				pParserCmdInfo->pReplyCmd = (char*)gapParseOnOff[chStatus];
    2a00:	4b1a      	ldr	r3, [pc, #104]	; (2a6c <Parser_LoraGetSubBandStatus+0xa4>)
    2a02:	4698      	mov	r8, r3
    2a04:	e006      	b.n	2a14 <Parser_LoraGetSubBandStatus+0x4c>
        for (i = ((subBandId - 1) * 8); i <= ((subBandId * 8) - 1); i++)
    2a06:	3401      	adds	r4, #1
    2a08:	b2e4      	uxtb	r4, r4
    2a0a:	782a      	ldrb	r2, [r5, #0]
    2a0c:	00d3      	lsls	r3, r2, #3
    2a0e:	3b01      	subs	r3, #1
    2a10:	429c      	cmp	r4, r3
    2a12:	dc0e      	bgt.n	2a32 <Parser_LoraGetSubBandStatus+0x6a>
             if(LORAWAN_GetAttr(CH_PARAM_STATUS, &subBandId, &chStatus) == LORAWAN_SUCCESS)
    2a14:	466b      	mov	r3, sp
    2a16:	1d9a      	adds	r2, r3, #6
    2a18:	0029      	movs	r1, r5
    2a1a:	201c      	movs	r0, #28
    2a1c:	47b8      	blx	r7
    2a1e:	2808      	cmp	r0, #8
    2a20:	d1f1      	bne.n	2a06 <Parser_LoraGetSubBandStatus+0x3e>
				pParserCmdInfo->pReplyCmd = (char*)gapParseOnOff[chStatus];
    2a22:	466b      	mov	r3, sp
    2a24:	3306      	adds	r3, #6
    2a26:	781b      	ldrb	r3, [r3, #0]
    2a28:	009b      	lsls	r3, r3, #2
    2a2a:	4642      	mov	r2, r8
    2a2c:	589b      	ldr	r3, [r3, r2]
    2a2e:	6173      	str	r3, [r6, #20]
    2a30:	e7e9      	b.n	2a06 <Parser_LoraGetSubBandStatus+0x3e>
             uint8_t chId = 63 + subBandId;
    2a32:	466b      	mov	r3, sp
    2a34:	1d59      	adds	r1, r3, #5
    2a36:	323f      	adds	r2, #63	; 0x3f
    2a38:	700a      	strb	r2, [r1, #0]
             if(LORAWAN_GetAttr(CH_PARAM_STATUS, &chId, &chStatus) == LORAWAN_SUCCESS)
    2a3a:	1d9a      	adds	r2, r3, #6
    2a3c:	201c      	movs	r0, #28
    2a3e:	4b0a      	ldr	r3, [pc, #40]	; (2a68 <Parser_LoraGetSubBandStatus+0xa0>)
    2a40:	4798      	blx	r3
    2a42:	2808      	cmp	r0, #8
    2a44:	d003      	beq.n	2a4e <Parser_LoraGetSubBandStatus+0x86>
}
    2a46:	b002      	add	sp, #8
    2a48:	bc04      	pop	{r2}
    2a4a:	4690      	mov	r8, r2
    2a4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
				pParserCmdInfo->pReplyCmd = (char*)gapParseOnOff[chStatus];
    2a4e:	466b      	mov	r3, sp
    2a50:	3306      	adds	r3, #6
    2a52:	781b      	ldrb	r3, [r3, #0]
    2a54:	009b      	lsls	r3, r3, #2
    2a56:	4a05      	ldr	r2, [pc, #20]	; (2a6c <Parser_LoraGetSubBandStatus+0xa4>)
    2a58:	589b      	ldr	r3, [r3, r2]
    2a5a:	6173      	str	r3, [r6, #20]
}
    2a5c:	e7f3      	b.n	2a46 <Parser_LoraGetSubBandStatus+0x7e>
    2a5e:	46c0      	nop			; (mov r8, r8)
    2a60:	0001f644 	.word	0x0001f644
    2a64:	00004241 	.word	0x00004241
    2a68:	000119a1 	.word	0x000119a1
    2a6c:	0001f894 	.word	0x0001f894

00002a70 <Parser_LoraSetChannelStatus>:
{
    2a70:	b570      	push	{r4, r5, r6, lr}
    2a72:	b084      	sub	sp, #16
    2a74:	0004      	movs	r4, r0
    ChannelParameters_t ch_params = {0};
    2a76:	2208      	movs	r2, #8
    2a78:	2100      	movs	r1, #0
    2a7a:	a801      	add	r0, sp, #4
    2a7c:	4b11      	ldr	r3, [pc, #68]	; (2ac4 <Parser_LoraSetChannelStatus+0x54>)
    2a7e:	4798      	blx	r3
    validationVal = Validate_OnOffAsciiValue(pParserCmdInfo->pParam2);
    2a80:	6860      	ldr	r0, [r4, #4]
    2a82:	4b11      	ldr	r3, [pc, #68]	; (2ac8 <Parser_LoraSetChannelStatus+0x58>)
    2a84:	4798      	blx	r3
    2a86:	0005      	movs	r5, r0
    if(Validate_Uint8DecAsciiValue(pParserCmdInfo->pParam1, &channelId) &&(validationVal < 2U))
    2a88:	210f      	movs	r1, #15
    2a8a:	4469      	add	r1, sp
    2a8c:	6820      	ldr	r0, [r4, #0]
    2a8e:	4b0f      	ldr	r3, [pc, #60]	; (2acc <Parser_LoraSetChannelStatus+0x5c>)
    2a90:	4798      	blx	r3
    StackRetStatus_t status = LORAWAN_INVALID_PARAMETER;
    2a92:	230a      	movs	r3, #10
    if(Validate_Uint8DecAsciiValue(pParserCmdInfo->pParam1, &channelId) &&(validationVal < 2U))
    2a94:	2800      	cmp	r0, #0
    2a96:	d001      	beq.n	2a9c <Parser_LoraSetChannelStatus+0x2c>
    2a98:	2d01      	cmp	r5, #1
    2a9a:	d905      	bls.n	2aa8 <Parser_LoraSetChannelStatus+0x38>
    pParserCmdInfo->pReplyCmd = (char*)gapParserLorawanStatus[status];
    2a9c:	009b      	lsls	r3, r3, #2
    2a9e:	4a0c      	ldr	r2, [pc, #48]	; (2ad0 <Parser_LoraSetChannelStatus+0x60>)
    2aa0:	589b      	ldr	r3, [r3, r2]
    2aa2:	6163      	str	r3, [r4, #20]
}
    2aa4:	b004      	add	sp, #16
    2aa6:	bd70      	pop	{r4, r5, r6, pc}
        ch_params.channelId = channelId;
    2aa8:	a901      	add	r1, sp, #4
    2aaa:	3305      	adds	r3, #5
    2aac:	446b      	add	r3, sp
    2aae:	781b      	ldrb	r3, [r3, #0]
    2ab0:	700b      	strb	r3, [r1, #0]
        ch_params.channelAttr.status = validationVal;
    2ab2:	1e6b      	subs	r3, r5, #1
    2ab4:	419d      	sbcs	r5, r3
    2ab6:	710d      	strb	r5, [r1, #4]
        status = LORAWAN_SetAttr(CH_PARAM_STATUS,&ch_params);
    2ab8:	201c      	movs	r0, #28
    2aba:	4b06      	ldr	r3, [pc, #24]	; (2ad4 <Parser_LoraSetChannelStatus+0x64>)
    2abc:	4798      	blx	r3
    2abe:	0003      	movs	r3, r0
    2ac0:	e7ec      	b.n	2a9c <Parser_LoraSetChannelStatus+0x2c>
    2ac2:	46c0      	nop			; (mov r8, r8)
    2ac4:	00019ead 	.word	0x00019ead
    2ac8:	000043e9 	.word	0x000043e9
    2acc:	00004241 	.word	0x00004241
    2ad0:	0001f8b4 	.word	0x0001f8b4
    2ad4:	000139e5 	.word	0x000139e5

00002ad8 <Parser_LoraGetChannelStatus>:
{
    2ad8:	b510      	push	{r4, lr}
    2ada:	b082      	sub	sp, #8
    2adc:	0004      	movs	r4, r0
    pParserCmdInfo->pReplyCmd = (char*)gapParserLorawanStatus[LORAWAN_INVALID_PARAMETER];
    2ade:	4b0d      	ldr	r3, [pc, #52]	; (2b14 <Parser_LoraGetChannelStatus+0x3c>)
    2ae0:	6143      	str	r3, [r0, #20]
    if(Validate_Uint8DecAsciiValue(pParserCmdInfo->pParam1, &channelId))
    2ae2:	466b      	mov	r3, sp
    2ae4:	1d99      	adds	r1, r3, #6
    2ae6:	6800      	ldr	r0, [r0, #0]
    2ae8:	4b0b      	ldr	r3, [pc, #44]	; (2b18 <Parser_LoraGetChannelStatus+0x40>)
    2aea:	4798      	blx	r3
    2aec:	2800      	cmp	r0, #0
    2aee:	d101      	bne.n	2af4 <Parser_LoraGetChannelStatus+0x1c>
}
    2af0:	b002      	add	sp, #8
    2af2:	bd10      	pop	{r4, pc}
        if(LORAWAN_GetAttr(CH_PARAM_STATUS,&channelId,&chStatus) == LORAWAN_SUCCESS)
    2af4:	466b      	mov	r3, sp
    2af6:	1dda      	adds	r2, r3, #7
    2af8:	1d99      	adds	r1, r3, #6
    2afa:	201c      	movs	r0, #28
    2afc:	4b07      	ldr	r3, [pc, #28]	; (2b1c <Parser_LoraGetChannelStatus+0x44>)
    2afe:	4798      	blx	r3
    2b00:	2808      	cmp	r0, #8
    2b02:	d1f5      	bne.n	2af0 <Parser_LoraGetChannelStatus+0x18>
			pParserCmdInfo->pReplyCmd = (char*)gapParseOnOff[chStatus];
    2b04:	466b      	mov	r3, sp
    2b06:	3307      	adds	r3, #7
    2b08:	781b      	ldrb	r3, [r3, #0]
    2b0a:	009b      	lsls	r3, r3, #2
    2b0c:	4a04      	ldr	r2, [pc, #16]	; (2b20 <Parser_LoraGetChannelStatus+0x48>)
    2b0e:	589b      	ldr	r3, [r3, r2]
    2b10:	6163      	str	r3, [r4, #20]
}
    2b12:	e7ed      	b.n	2af0 <Parser_LoraGetChannelStatus+0x18>
    2b14:	0001f644 	.word	0x0001f644
    2b18:	00004241 	.word	0x00004241
    2b1c:	000119a1 	.word	0x000119a1
    2b20:	0001f894 	.word	0x0001f894

00002b24 <Parser_LoraSetDatarateRange>:
{
    2b24:	b510      	push	{r4, lr}
    2b26:	b084      	sub	sp, #16
    2b28:	0004      	movs	r4, r0
    ChannelParameters_t ch_params = {0};
    2b2a:	2208      	movs	r2, #8
    2b2c:	2100      	movs	r1, #0
    2b2e:	a801      	add	r0, sp, #4
    2b30:	4b1c      	ldr	r3, [pc, #112]	; (2ba4 <Parser_LoraSetDatarateRange+0x80>)
    2b32:	4798      	blx	r3
    if(Validate_Uint8DecAsciiValue(pParserCmdInfo->pParam1, &channelId) &&
    2b34:	210f      	movs	r1, #15
    2b36:	4469      	add	r1, sp
    2b38:	6820      	ldr	r0, [r4, #0]
    2b3a:	4b1b      	ldr	r3, [pc, #108]	; (2ba8 <Parser_LoraSetDatarateRange+0x84>)
    2b3c:	4798      	blx	r3
    StackRetStatus_t status = LORAWAN_INVALID_PARAMETER;
    2b3e:	230a      	movs	r3, #10
    if(Validate_Uint8DecAsciiValue(pParserCmdInfo->pParam1, &channelId) &&
    2b40:	2800      	cmp	r0, #0
    2b42:	d105      	bne.n	2b50 <Parser_LoraSetDatarateRange+0x2c>
    pParserCmdInfo->pReplyCmd = (char*)gapParserLorawanStatus[status];
    2b44:	009b      	lsls	r3, r3, #2
    2b46:	4a19      	ldr	r2, [pc, #100]	; (2bac <Parser_LoraSetDatarateRange+0x88>)
    2b48:	589b      	ldr	r3, [r3, r2]
    2b4a:	6163      	str	r3, [r4, #20]
}
    2b4c:	b004      	add	sp, #16
    2b4e:	bd10      	pop	{r4, pc}
       Validate_Uint8DecAsciiValue(pParserCmdInfo->pParam2, &minDr) &&
    2b50:	210e      	movs	r1, #14
    2b52:	4469      	add	r1, sp
    2b54:	6860      	ldr	r0, [r4, #4]
    2b56:	4b14      	ldr	r3, [pc, #80]	; (2ba8 <Parser_LoraSetDatarateRange+0x84>)
    2b58:	4798      	blx	r3
    StackRetStatus_t status = LORAWAN_INVALID_PARAMETER;
    2b5a:	230a      	movs	r3, #10
    if(Validate_Uint8DecAsciiValue(pParserCmdInfo->pParam1, &channelId) &&
    2b5c:	2800      	cmp	r0, #0
    2b5e:	d0f1      	beq.n	2b44 <Parser_LoraSetDatarateRange+0x20>
       Validate_Uint8DecAsciiValue(pParserCmdInfo->pParam3, &maxDr) &&
    2b60:	210d      	movs	r1, #13
    2b62:	4469      	add	r1, sp
    2b64:	68a0      	ldr	r0, [r4, #8]
    2b66:	4b10      	ldr	r3, [pc, #64]	; (2ba8 <Parser_LoraSetDatarateRange+0x84>)
    2b68:	4798      	blx	r3
    StackRetStatus_t status = LORAWAN_INVALID_PARAMETER;
    2b6a:	230a      	movs	r3, #10
       Validate_Uint8DecAsciiValue(pParserCmdInfo->pParam2, &minDr) &&
    2b6c:	2800      	cmp	r0, #0
    2b6e:	d0e9      	beq.n	2b44 <Parser_LoraSetDatarateRange+0x20>
       minDr < 16 && maxDr < 16)
    2b70:	3304      	adds	r3, #4
    2b72:	446b      	add	r3, sp
    2b74:	7818      	ldrb	r0, [r3, #0]
    StackRetStatus_t status = LORAWAN_INVALID_PARAMETER;
    2b76:	230a      	movs	r3, #10
       Validate_Uint8DecAsciiValue(pParserCmdInfo->pParam3, &maxDr) &&
    2b78:	280f      	cmp	r0, #15
    2b7a:	d8e3      	bhi.n	2b44 <Parser_LoraSetDatarateRange+0x20>
       minDr < 16 && maxDr < 16)
    2b7c:	3303      	adds	r3, #3
    2b7e:	446b      	add	r3, sp
    2b80:	781a      	ldrb	r2, [r3, #0]
    StackRetStatus_t status = LORAWAN_INVALID_PARAMETER;
    2b82:	230a      	movs	r3, #10
       minDr < 16 && maxDr < 16)
    2b84:	2a0f      	cmp	r2, #15
    2b86:	d8dd      	bhi.n	2b44 <Parser_LoraSetDatarateRange+0x20>
        ch_params.channelId = channelId;
    2b88:	a901      	add	r1, sp, #4
    2b8a:	3305      	adds	r3, #5
    2b8c:	446b      	add	r3, sp
    2b8e:	781b      	ldrb	r3, [r3, #0]
    2b90:	700b      	strb	r3, [r1, #0]
        ch_params.channelAttr.dataRange = ((maxDr << 4) | minDr);
    2b92:	0112      	lsls	r2, r2, #4
    2b94:	4302      	orrs	r2, r0
    2b96:	710a      	strb	r2, [r1, #4]
        status = LORAWAN_SetAttr(CH_PARAM_DR_RANGE, &ch_params);
    2b98:	201b      	movs	r0, #27
    2b9a:	4b05      	ldr	r3, [pc, #20]	; (2bb0 <Parser_LoraSetDatarateRange+0x8c>)
    2b9c:	4798      	blx	r3
    2b9e:	0003      	movs	r3, r0
    2ba0:	e7d0      	b.n	2b44 <Parser_LoraSetDatarateRange+0x20>
    2ba2:	46c0      	nop			; (mov r8, r8)
    2ba4:	00019ead 	.word	0x00019ead
    2ba8:	00004241 	.word	0x00004241
    2bac:	0001f8b4 	.word	0x0001f8b4
    2bb0:	000139e5 	.word	0x000139e5

00002bb4 <Parser_LoraGetDatarateRange>:
{
    2bb4:	b5f0      	push	{r4, r5, r6, r7, lr}
    2bb6:	b083      	sub	sp, #12
    2bb8:	0004      	movs	r4, r0
    pParserCmdInfo->pReplyCmd = (char*)gapParserLorawanStatus[LORAWAN_INVALID_PARAMETER];
    2bba:	4b15      	ldr	r3, [pc, #84]	; (2c10 <Parser_LoraGetDatarateRange+0x5c>)
    2bbc:	6143      	str	r3, [r0, #20]
    if(Validate_Uint8DecAsciiValue(pParserCmdInfo->pParam1, &channelId))
    2bbe:	466b      	mov	r3, sp
    2bc0:	1dd9      	adds	r1, r3, #7
    2bc2:	6800      	ldr	r0, [r0, #0]
    2bc4:	4b13      	ldr	r3, [pc, #76]	; (2c14 <Parser_LoraGetDatarateRange+0x60>)
    2bc6:	4798      	blx	r3
    2bc8:	2800      	cmp	r0, #0
    2bca:	d101      	bne.n	2bd0 <Parser_LoraGetDatarateRange+0x1c>
}
    2bcc:	b003      	add	sp, #12
    2bce:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if(LORAWAN_GetAttr(CH_PARAM_DR_RANGE,&channelId,&drRange) == LORAWAN_SUCCESS)
    2bd0:	466b      	mov	r3, sp
    2bd2:	1d9a      	adds	r2, r3, #6
    2bd4:	1dd9      	adds	r1, r3, #7
    2bd6:	201b      	movs	r0, #27
    2bd8:	4b0f      	ldr	r3, [pc, #60]	; (2c18 <Parser_LoraGetDatarateRange+0x64>)
    2bda:	4798      	blx	r3
    2bdc:	2808      	cmp	r0, #8
    2bde:	d1f5      	bne.n	2bcc <Parser_LoraGetDatarateRange+0x18>
			minDr = drRange & 0x0F;
    2be0:	466b      	mov	r3, sp
    2be2:	799e      	ldrb	r6, [r3, #6]
			itoa(minDr, aParserData, 10U);
    2be4:	4d0d      	ldr	r5, [pc, #52]	; (2c1c <Parser_LoraGetDatarateRange+0x68>)
    2be6:	3007      	adds	r0, #7
    2be8:	4030      	ands	r0, r6
    2bea:	220a      	movs	r2, #10
    2bec:	0029      	movs	r1, r5
    2bee:	4f0c      	ldr	r7, [pc, #48]	; (2c20 <Parser_LoraGetDatarateRange+0x6c>)
    2bf0:	47b8      	blx	r7
			crtIdx = strlen(aParserData);
    2bf2:	0028      	movs	r0, r5
    2bf4:	4b0b      	ldr	r3, [pc, #44]	; (2c24 <Parser_LoraGetDatarateRange+0x70>)
    2bf6:	4798      	blx	r3
			aParserData[crtIdx] = ' ';
    2bf8:	0403      	lsls	r3, r0, #16
    2bfa:	0c1b      	lsrs	r3, r3, #16
    2bfc:	2220      	movs	r2, #32
    2bfe:	54ea      	strb	r2, [r5, r3]
			crtIdx ++;
    2c00:	3001      	adds	r0, #1
			itoa(maxDr, &aParserData[crtIdx], 10U);
    2c02:	b281      	uxth	r1, r0
    2c04:	1949      	adds	r1, r1, r5
    2c06:	0930      	lsrs	r0, r6, #4
    2c08:	3a16      	subs	r2, #22
    2c0a:	47b8      	blx	r7
			pParserCmdInfo->pReplyCmd = aParserData;
    2c0c:	6165      	str	r5, [r4, #20]
}
    2c0e:	e7dd      	b.n	2bcc <Parser_LoraGetDatarateRange+0x18>
    2c10:	0001f644 	.word	0x0001f644
    2c14:	00004241 	.word	0x00004241
    2c18:	000119a1 	.word	0x000119a1
    2c1c:	2000116c 	.word	0x2000116c
    2c20:	00019735 	.word	0x00019735
    2c24:	0001a2e1 	.word	0x0001a2e1

00002c28 <Parser_LoraSetTxPower>:
{
    2c28:	b510      	push	{r4, lr}
    2c2a:	b082      	sub	sp, #8
    2c2c:	0004      	movs	r4, r0
    if((Validate_Uint8DecAsciiValue(pParserCmdInfo->pParam1, &txPower)))
    2c2e:	466b      	mov	r3, sp
    2c30:	1dd9      	adds	r1, r3, #7
    2c32:	6800      	ldr	r0, [r0, #0]
    2c34:	4b08      	ldr	r3, [pc, #32]	; (2c58 <Parser_LoraSetTxPower+0x30>)
    2c36:	4798      	blx	r3
    StackRetStatus_t status = LORAWAN_INVALID_PARAMETER;
    2c38:	230a      	movs	r3, #10
    if((Validate_Uint8DecAsciiValue(pParserCmdInfo->pParam1, &txPower)))
    2c3a:	2800      	cmp	r0, #0
    2c3c:	d105      	bne.n	2c4a <Parser_LoraSetTxPower+0x22>
    pParserCmdInfo->pReplyCmd = (char*)gapParserLorawanStatus[status];
    2c3e:	009b      	lsls	r3, r3, #2
    2c40:	4a06      	ldr	r2, [pc, #24]	; (2c5c <Parser_LoraSetTxPower+0x34>)
    2c42:	589b      	ldr	r3, [r3, r2]
    2c44:	6163      	str	r3, [r4, #20]
}
    2c46:	b002      	add	sp, #8
    2c48:	bd10      	pop	{r4, pc}
        status = LORAWAN_SetAttr(TX_POWER, &txPower);
    2c4a:	466b      	mov	r3, sp
    2c4c:	1dd9      	adds	r1, r3, #7
    2c4e:	2008      	movs	r0, #8
    2c50:	4b03      	ldr	r3, [pc, #12]	; (2c60 <Parser_LoraSetTxPower+0x38>)
    2c52:	4798      	blx	r3
    2c54:	0003      	movs	r3, r0
    2c56:	e7f2      	b.n	2c3e <Parser_LoraSetTxPower+0x16>
    2c58:	00004241 	.word	0x00004241
    2c5c:	0001f8b4 	.word	0x0001f8b4
    2c60:	000139e5 	.word	0x000139e5

00002c64 <Parser_LoraGetTxPower>:
{
    2c64:	b570      	push	{r4, r5, r6, lr}
    2c66:	b082      	sub	sp, #8
    2c68:	0006      	movs	r6, r0
    LORAWAN_GetAttr(TX_POWER,NULL,&txPowerIdx);
    2c6a:	466b      	mov	r3, sp
    2c6c:	1ddd      	adds	r5, r3, #7
    2c6e:	002a      	movs	r2, r5
    2c70:	2100      	movs	r1, #0
    2c72:	2008      	movs	r0, #8
    2c74:	4b05      	ldr	r3, [pc, #20]	; (2c8c <Parser_LoraGetTxPower+0x28>)
    2c76:	4798      	blx	r3
    itoa( txPowerIdx, aParserData, 10);
    2c78:	4c05      	ldr	r4, [pc, #20]	; (2c90 <Parser_LoraGetTxPower+0x2c>)
    2c7a:	7828      	ldrb	r0, [r5, #0]
    2c7c:	220a      	movs	r2, #10
    2c7e:	0021      	movs	r1, r4
    2c80:	4b04      	ldr	r3, [pc, #16]	; (2c94 <Parser_LoraGetTxPower+0x30>)
    2c82:	4798      	blx	r3
    pParserCmdInfo->pReplyCmd = aParserData;
    2c84:	6174      	str	r4, [r6, #20]
}
    2c86:	b002      	add	sp, #8
    2c88:	bd70      	pop	{r4, r5, r6, pc}
    2c8a:	46c0      	nop			; (mov r8, r8)
    2c8c:	000119a1 	.word	0x000119a1
    2c90:	2000116c 	.word	0x2000116c
    2c94:	00019735 	.word	0x00019735

00002c98 <Parser_LoraPause>:
{
    2c98:	b570      	push	{r4, r5, r6, lr}
    2c9a:	0005      	movs	r5, r0
    resumeInterval = LORAWAN_Pause();
    2c9c:	4b04      	ldr	r3, [pc, #16]	; (2cb0 <Parser_LoraPause+0x18>)
    2c9e:	4798      	blx	r3
    2ca0:	0001      	movs	r1, r0
    ultoa(aParserData, resumeInterval, 10);
    2ca2:	4c04      	ldr	r4, [pc, #16]	; (2cb4 <Parser_LoraPause+0x1c>)
    2ca4:	220a      	movs	r2, #10
    2ca6:	0020      	movs	r0, r4
    2ca8:	4b03      	ldr	r3, [pc, #12]	; (2cb8 <Parser_LoraPause+0x20>)
    2caa:	4798      	blx	r3
    pParserCmdInfo->pReplyCmd = aParserData;
    2cac:	616c      	str	r4, [r5, #20]
}
    2cae:	bd70      	pop	{r4, r5, r6, pc}
    2cb0:	00010681 	.word	0x00010681
    2cb4:	2000116c 	.word	0x2000116c
    2cb8:	00004299 	.word	0x00004299

00002cbc <Parser_LoraResume>:
{
    2cbc:	b510      	push	{r4, lr}
    2cbe:	0004      	movs	r4, r0
    LORAWAN_Resume();
    2cc0:	4b02      	ldr	r3, [pc, #8]	; (2ccc <Parser_LoraResume+0x10>)
    2cc2:	4798      	blx	r3
    pParserCmdInfo->pReplyCmd = (char*)gapParserLorawanStatus[LORAWAN_SUCCESS];
    2cc4:	4b02      	ldr	r3, [pc, #8]	; (2cd0 <Parser_LoraResume+0x14>)
    2cc6:	6163      	str	r3, [r4, #20]
}
    2cc8:	bd10      	pop	{r4, pc}
    2cca:	46c0      	nop			; (mov r8, r8)
    2ccc:	00010745 	.word	0x00010745
    2cd0:	0001f830 	.word	0x0001f830

00002cd4 <Parser_LoraSave>:
    pParserCmdInfo->pReplyCmd = (char*)gapParserLorawanStatus[LORAWAN_SUCCESS];
    2cd4:	4b01      	ldr	r3, [pc, #4]	; (2cdc <Parser_LoraSave+0x8>)
    2cd6:	6143      	str	r3, [r0, #20]
}
    2cd8:	4770      	bx	lr
    2cda:	46c0      	nop			; (mov r8, r8)
    2cdc:	0001f830 	.word	0x0001f830

00002ce0 <Parser_LoraSetRx2WindowParams>:
{
    2ce0:	b530      	push	{r4, r5, lr}
    2ce2:	b085      	sub	sp, #20
    2ce4:	0004      	movs	r4, r0
    unsigned long freq = strtoul(pParserCmdInfo->pParam2, NULL, 10);
    2ce6:	220a      	movs	r2, #10
    2ce8:	2100      	movs	r1, #0
    2cea:	6840      	ldr	r0, [r0, #4]
    2cec:	4b12      	ldr	r3, [pc, #72]	; (2d38 <Parser_LoraSetRx2WindowParams+0x58>)
    2cee:	4798      	blx	r3
    2cf0:	0005      	movs	r5, r0
    if(Validate_Uint8DecAsciiValue(pParserCmdInfo->pParam1, &datarate) &&
    2cf2:	210f      	movs	r1, #15
    2cf4:	4469      	add	r1, sp
    2cf6:	6820      	ldr	r0, [r4, #0]
    2cf8:	4b10      	ldr	r3, [pc, #64]	; (2d3c <Parser_LoraSetRx2WindowParams+0x5c>)
    2cfa:	4798      	blx	r3
    StackRetStatus_t status = LORAWAN_INVALID_PARAMETER;
    2cfc:	230a      	movs	r3, #10
    if(Validate_Uint8DecAsciiValue(pParserCmdInfo->pParam1, &datarate) &&
    2cfe:	2800      	cmp	r0, #0
    2d00:	d105      	bne.n	2d0e <Parser_LoraSetRx2WindowParams+0x2e>
    pParserCmdInfo->pReplyCmd = (char*)gapParserLorawanStatus[status];
    2d02:	009b      	lsls	r3, r3, #2
    2d04:	4a0e      	ldr	r2, [pc, #56]	; (2d40 <Parser_LoraSetRx2WindowParams+0x60>)
    2d06:	589b      	ldr	r3, [r3, r2]
    2d08:	6163      	str	r3, [r4, #20]
}
    2d0a:	b005      	add	sp, #20
    2d0c:	bd30      	pop	{r4, r5, pc}
       Validate_UintDecAsciiValue(pParserCmdInfo->pParam2, 10, UINT32_MAX))
    2d0e:	2201      	movs	r2, #1
    2d10:	4252      	negs	r2, r2
    2d12:	210a      	movs	r1, #10
    2d14:	6860      	ldr	r0, [r4, #4]
    2d16:	4b0b      	ldr	r3, [pc, #44]	; (2d44 <Parser_LoraSetRx2WindowParams+0x64>)
    2d18:	4798      	blx	r3
    StackRetStatus_t status = LORAWAN_INVALID_PARAMETER;
    2d1a:	230a      	movs	r3, #10
    if(Validate_Uint8DecAsciiValue(pParserCmdInfo->pParam1, &datarate) &&
    2d1c:	2800      	cmp	r0, #0
    2d1e:	d0f0      	beq.n	2d02 <Parser_LoraSetRx2WindowParams+0x22>
        rx2Params.dataRate = datarate;
    2d20:	a901      	add	r1, sp, #4
    2d22:	3305      	adds	r3, #5
    2d24:	446b      	add	r3, sp
    2d26:	781b      	ldrb	r3, [r3, #0]
    2d28:	710b      	strb	r3, [r1, #4]
        rx2Params.frequency = freq;
    2d2a:	9501      	str	r5, [sp, #4]
        status = LORAWAN_SetAttr(RX2_WINDOW_PARAMS,&rx2Params);
    2d2c:	2015      	movs	r0, #21
    2d2e:	4b06      	ldr	r3, [pc, #24]	; (2d48 <Parser_LoraSetRx2WindowParams+0x68>)
    2d30:	4798      	blx	r3
    2d32:	0003      	movs	r3, r0
    2d34:	e7e5      	b.n	2d02 <Parser_LoraSetRx2WindowParams+0x22>
    2d36:	46c0      	nop			; (mov r8, r8)
    2d38:	0001a5ed 	.word	0x0001a5ed
    2d3c:	00004241 	.word	0x00004241
    2d40:	0001f8b4 	.word	0x0001f8b4
    2d44:	00004315 	.word	0x00004315
    2d48:	000139e5 	.word	0x000139e5

00002d4c <Parser_LoraGetRx2WindowParams>:
{
    2d4c:	b5f0      	push	{r4, r5, r6, r7, lr}
    2d4e:	b083      	sub	sp, #12
    2d50:	0004      	movs	r4, r0
     pParserCmdInfo->pReplyCmd = (char*)gapParserLorawanStatus[LORAWAN_INVALID_PARAMETER];
    2d52:	4b11      	ldr	r3, [pc, #68]	; (2d98 <Parser_LoraGetRx2WindowParams+0x4c>)
    2d54:	6143      	str	r3, [r0, #20]
    if(LORAWAN_GetAttr(RX2_WINDOW_PARAMS, NULL, &rx2Params) == LORAWAN_SUCCESS)
    2d56:	466a      	mov	r2, sp
    2d58:	2100      	movs	r1, #0
    2d5a:	2015      	movs	r0, #21
    2d5c:	4b0f      	ldr	r3, [pc, #60]	; (2d9c <Parser_LoraGetRx2WindowParams+0x50>)
    2d5e:	4798      	blx	r3
    2d60:	2808      	cmp	r0, #8
    2d62:	d001      	beq.n	2d68 <Parser_LoraGetRx2WindowParams+0x1c>
}
    2d64:	b003      	add	sp, #12
    2d66:	bdf0      	pop	{r4, r5, r6, r7, pc}
		freq = rx2Params.frequency;
    2d68:	9f00      	ldr	r7, [sp, #0]
		ultoa(aParserData, datarate, 10U);
    2d6a:	466b      	mov	r3, sp
    2d6c:	7919      	ldrb	r1, [r3, #4]
    2d6e:	4d0c      	ldr	r5, [pc, #48]	; (2da0 <Parser_LoraGetRx2WindowParams+0x54>)
    2d70:	220a      	movs	r2, #10
    2d72:	0028      	movs	r0, r5
    2d74:	4e0b      	ldr	r6, [pc, #44]	; (2da4 <Parser_LoraGetRx2WindowParams+0x58>)
    2d76:	47b0      	blx	r6
		dataLen = strlen(aParserData);
    2d78:	0028      	movs	r0, r5
    2d7a:	4b0b      	ldr	r3, [pc, #44]	; (2da8 <Parser_LoraGetRx2WindowParams+0x5c>)
    2d7c:	4798      	blx	r3
		aParserData[dataLen ++] = ' ';
    2d7e:	23ff      	movs	r3, #255	; 0xff
    2d80:	4003      	ands	r3, r0
    2d82:	2220      	movs	r2, #32
    2d84:	54ea      	strb	r2, [r5, r3]
    2d86:	3001      	adds	r0, #1
		ultoa(&aParserData[dataLen], freq, 10U);
    2d88:	b2c0      	uxtb	r0, r0
    2d8a:	1940      	adds	r0, r0, r5
    2d8c:	3a16      	subs	r2, #22
    2d8e:	0039      	movs	r1, r7
    2d90:	47b0      	blx	r6
		pParserCmdInfo->pReplyCmd = aParserData;
    2d92:	6165      	str	r5, [r4, #20]
}
    2d94:	e7e6      	b.n	2d64 <Parser_LoraGetRx2WindowParams+0x18>
    2d96:	46c0      	nop			; (mov r8, r8)
    2d98:	0001f644 	.word	0x0001f644
    2d9c:	000119a1 	.word	0x000119a1
    2da0:	2000116c 	.word	0x2000116c
    2da4:	00004299 	.word	0x00004299
    2da8:	0001a2e1 	.word	0x0001a2e1

00002dac <Parser_LoraSetLbt>:
{
    2dac:	b570      	push	{r4, r5, r6, lr}
    2dae:	b084      	sub	sp, #16
    2db0:	0004      	movs	r4, r0
	lorawanLBTParams.lbtScanPeriod = atoi(pParserCmdInfo->pParam1);
    2db2:	6800      	ldr	r0, [r0, #0]
    2db4:	4e0f      	ldr	r6, [pc, #60]	; (2df4 <Parser_LoraSetLbt+0x48>)
    2db6:	47b0      	blx	r6
    2db8:	ad02      	add	r5, sp, #8
    2dba:	8028      	strh	r0, [r5, #0]
	lorawanLBTParams.lbtThreshold = strtoul(pParserCmdInfo->pParam2, &pEnd, 10) ;
    2dbc:	220a      	movs	r2, #10
    2dbe:	a901      	add	r1, sp, #4
    2dc0:	6860      	ldr	r0, [r4, #4]
    2dc2:	4b0d      	ldr	r3, [pc, #52]	; (2df8 <Parser_LoraSetLbt+0x4c>)
    2dc4:	4798      	blx	r3
    2dc6:	8068      	strh	r0, [r5, #2]
	lorawanLBTParams.maxRetryChannels = atoi(pParserCmdInfo->pParam3);
    2dc8:	68a0      	ldr	r0, [r4, #8]
    2dca:	47b0      	blx	r6
    2dcc:	80a8      	strh	r0, [r5, #4]
	lorawanLBTParams.lbtNumOfSamples = atoi(pParserCmdInfo->pParam4);
    2dce:	68e0      	ldr	r0, [r4, #12]
    2dd0:	47b0      	blx	r6
    2dd2:	71a8      	strb	r0, [r5, #6]
	lorawanLBTParams.lbtTransmitOn = atoi(pParserCmdInfo->pParam5);
    2dd4:	6920      	ldr	r0, [r4, #16]
    2dd6:	47b0      	blx	r6
    2dd8:	1e43      	subs	r3, r0, #1
    2dda:	4198      	sbcs	r0, r3
    2ddc:	71e8      	strb	r0, [r5, #7]
	status = LORAWAN_SetAttr(LORAWAN_LBT_PARAMS, &lorawanLBTParams);
    2dde:	0029      	movs	r1, r5
    2de0:	2027      	movs	r0, #39	; 0x27
    2de2:	4b06      	ldr	r3, [pc, #24]	; (2dfc <Parser_LoraSetLbt+0x50>)
    2de4:	4798      	blx	r3
	pParserCmdInfo->pReplyCmd = (char*)gapParserLorawanStatus[status];
    2de6:	0080      	lsls	r0, r0, #2
    2de8:	4b05      	ldr	r3, [pc, #20]	; (2e00 <Parser_LoraSetLbt+0x54>)
    2dea:	58c3      	ldr	r3, [r0, r3]
    2dec:	6163      	str	r3, [r4, #20]
}
    2dee:	b004      	add	sp, #16
    2df0:	bd70      	pop	{r4, r5, r6, pc}
    2df2:	46c0      	nop			; (mov r8, r8)
    2df4:	000196b1 	.word	0x000196b1
    2df8:	0001a5ed 	.word	0x0001a5ed
    2dfc:	000139e5 	.word	0x000139e5
    2e00:	0001f8b4 	.word	0x0001f8b4

00002e04 <Parser_LoraGetLbt>:
{
    2e04:	b5f0      	push	{r4, r5, r6, r7, lr}
    2e06:	46ce      	mov	lr, r9
    2e08:	4647      	mov	r7, r8
    2e0a:	b580      	push	{r7, lr}
    2e0c:	b083      	sub	sp, #12
    2e0e:	0005      	movs	r5, r0
	status = LORAWAN_GetAttr(LORAWAN_LBT_PARAMS, NULL, &lorawanLBTParams);
    2e10:	466a      	mov	r2, sp
    2e12:	2100      	movs	r1, #0
    2e14:	2027      	movs	r0, #39	; 0x27
    2e16:	4b27      	ldr	r3, [pc, #156]	; (2eb4 <Parser_LoraGetLbt+0xb0>)
    2e18:	4798      	blx	r3
	pParserCmdInfo->pReplyCmd = (char*)gapParserLorawanStatus[status];
    2e1a:	0082      	lsls	r2, r0, #2
    2e1c:	4b26      	ldr	r3, [pc, #152]	; (2eb8 <Parser_LoraGetLbt+0xb4>)
    2e1e:	58d3      	ldr	r3, [r2, r3]
    2e20:	616b      	str	r3, [r5, #20]
	if (LORAWAN_SUCCESS == status)
    2e22:	2808      	cmp	r0, #8
    2e24:	d004      	beq.n	2e30 <Parser_LoraGetLbt+0x2c>
}
    2e26:	b003      	add	sp, #12
    2e28:	bc0c      	pop	{r2, r3}
    2e2a:	4690      	mov	r8, r2
    2e2c:	4699      	mov	r9, r3
    2e2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		ultoa(aParserData, lorawanLBTParams.lbtScanPeriod, 10U);
    2e30:	466b      	mov	r3, sp
    2e32:	8819      	ldrh	r1, [r3, #0]
    2e34:	4c21      	ldr	r4, [pc, #132]	; (2ebc <Parser_LoraGetLbt+0xb8>)
    2e36:	220a      	movs	r2, #10
    2e38:	0020      	movs	r0, r4
    2e3a:	4e21      	ldr	r6, [pc, #132]	; (2ec0 <Parser_LoraGetLbt+0xbc>)
    2e3c:	47b0      	blx	r6
        dataLen = strlen(aParserData);
    2e3e:	0020      	movs	r0, r4
    2e40:	4b20      	ldr	r3, [pc, #128]	; (2ec4 <Parser_LoraGetLbt+0xc0>)
    2e42:	4699      	mov	r9, r3
    2e44:	4798      	blx	r3
        aParserData[dataLen ++] = ' ';
    2e46:	27ff      	movs	r7, #255	; 0xff
    2e48:	003b      	movs	r3, r7
    2e4a:	4003      	ands	r3, r0
    2e4c:	2220      	movs	r2, #32
    2e4e:	4690      	mov	r8, r2
    2e50:	54e2      	strb	r2, [r4, r3]
    2e52:	3001      	adds	r0, #1
		itoa(lorawanLBTParams.lbtThreshold, &aParserData[dataLen], 10U);
    2e54:	b2c1      	uxtb	r1, r0
    2e56:	1909      	adds	r1, r1, r4
    2e58:	466b      	mov	r3, sp
    2e5a:	2002      	movs	r0, #2
    2e5c:	5e18      	ldrsh	r0, [r3, r0]
    2e5e:	220a      	movs	r2, #10
    2e60:	4b19      	ldr	r3, [pc, #100]	; (2ec8 <Parser_LoraGetLbt+0xc4>)
    2e62:	4798      	blx	r3
		dataLen = strlen(aParserData);
    2e64:	0020      	movs	r0, r4
    2e66:	47c8      	blx	r9
        aParserData[dataLen ++] = ' ';
    2e68:	003b      	movs	r3, r7
    2e6a:	4003      	ands	r3, r0
    2e6c:	4642      	mov	r2, r8
    2e6e:	54e2      	strb	r2, [r4, r3]
        ultoa(&aParserData[dataLen], lorawanLBTParams.maxRetryChannels, 10U);
    2e70:	466b      	mov	r3, sp
    2e72:	8899      	ldrh	r1, [r3, #4]
        aParserData[dataLen ++] = ' ';
    2e74:	3001      	adds	r0, #1
        ultoa(&aParserData[dataLen], lorawanLBTParams.maxRetryChannels, 10U);
    2e76:	b2c0      	uxtb	r0, r0
    2e78:	1900      	adds	r0, r0, r4
    2e7a:	220a      	movs	r2, #10
    2e7c:	47b0      	blx	r6
		dataLen = strlen(aParserData);
    2e7e:	0020      	movs	r0, r4
    2e80:	47c8      	blx	r9
        aParserData[dataLen ++] = ' ';
    2e82:	003b      	movs	r3, r7
    2e84:	4003      	ands	r3, r0
    2e86:	4642      	mov	r2, r8
    2e88:	54e2      	strb	r2, [r4, r3]
        ultoa(&aParserData[dataLen], lorawanLBTParams.lbtNumOfSamples, 10U);
    2e8a:	466b      	mov	r3, sp
    2e8c:	7999      	ldrb	r1, [r3, #6]
        aParserData[dataLen ++] = ' ';
    2e8e:	3001      	adds	r0, #1
        ultoa(&aParserData[dataLen], lorawanLBTParams.lbtNumOfSamples, 10U);
    2e90:	b2c0      	uxtb	r0, r0
    2e92:	1900      	adds	r0, r0, r4
    2e94:	220a      	movs	r2, #10
    2e96:	47b0      	blx	r6
		dataLen = strlen(aParserData);
    2e98:	0020      	movs	r0, r4
    2e9a:	47c8      	blx	r9
        aParserData[dataLen ++] = ' ';
    2e9c:	4007      	ands	r7, r0
    2e9e:	4643      	mov	r3, r8
    2ea0:	55e3      	strb	r3, [r4, r7]
        ultoa(&aParserData[dataLen], lorawanLBTParams.lbtTransmitOn, 10U);
    2ea2:	466b      	mov	r3, sp
    2ea4:	79d9      	ldrb	r1, [r3, #7]
        aParserData[dataLen ++] = ' ';
    2ea6:	3001      	adds	r0, #1
        ultoa(&aParserData[dataLen], lorawanLBTParams.lbtTransmitOn, 10U);
    2ea8:	b2c0      	uxtb	r0, r0
    2eaa:	1900      	adds	r0, r0, r4
    2eac:	220a      	movs	r2, #10
    2eae:	47b0      	blx	r6
        pParserCmdInfo->pReplyCmd = aParserData;
    2eb0:	616c      	str	r4, [r5, #20]
}
    2eb2:	e7b8      	b.n	2e26 <Parser_LoraGetLbt+0x22>
    2eb4:	000119a1 	.word	0x000119a1
    2eb8:	0001f8b4 	.word	0x0001f8b4
    2ebc:	2000116c 	.word	0x2000116c
    2ec0:	00004299 	.word	0x00004299
    2ec4:	0001a2e1 	.word	0x0001a2e1
    2ec8:	00019735 	.word	0x00019735

00002ecc <Parser_LoraForceEnable>:
{
    2ecc:	b510      	push	{r4, lr}
    2ece:	0004      	movs	r4, r0
    LORAWAN_ForceEnable();
    2ed0:	4b02      	ldr	r3, [pc, #8]	; (2edc <Parser_LoraForceEnable+0x10>)
    2ed2:	4798      	blx	r3
    pParserCmdInfo->pReplyCmd = (char*)gapParserLorawanStatus[LORAWAN_SUCCESS];
    2ed4:	4b02      	ldr	r3, [pc, #8]	; (2ee0 <Parser_LoraForceEnable+0x14>)
    2ed6:	6163      	str	r3, [r4, #20]
}
    2ed8:	bd10      	pop	{r4, pc}
    2eda:	46c0      	nop			; (mov r8, r8)
    2edc:	0001081d 	.word	0x0001081d
    2ee0:	0001f830 	.word	0x0001f830

00002ee4 <Parser_LoraSetUplinkCounter>:
{
    2ee4:	b510      	push	{r4, lr}
    2ee6:	b082      	sub	sp, #8
    2ee8:	0004      	movs	r4, r0
    uint32_t param1Value = (uint32_t)strtoul(pParserCmdInfo->pParam1, NULL, 10U);
    2eea:	220a      	movs	r2, #10
    2eec:	2100      	movs	r1, #0
    2eee:	6800      	ldr	r0, [r0, #0]
    2ef0:	4b0b      	ldr	r3, [pc, #44]	; (2f20 <Parser_LoraSetUplinkCounter+0x3c>)
    2ef2:	4798      	blx	r3
    2ef4:	9001      	str	r0, [sp, #4]
    if (Validate_UintDecAsciiValue(pParserCmdInfo->pParam1, 10, UINT32_MAX))
    2ef6:	2201      	movs	r2, #1
    2ef8:	4252      	negs	r2, r2
    2efa:	210a      	movs	r1, #10
    2efc:	6820      	ldr	r0, [r4, #0]
    2efe:	4b09      	ldr	r3, [pc, #36]	; (2f24 <Parser_LoraSetUplinkCounter+0x40>)
    2f00:	4798      	blx	r3
	StackRetStatus_t status = LORAWAN_INVALID_PARAMETER;
    2f02:	230a      	movs	r3, #10
    if (Validate_UintDecAsciiValue(pParserCmdInfo->pParam1, 10, UINT32_MAX))
    2f04:	2800      	cmp	r0, #0
    2f06:	d105      	bne.n	2f14 <Parser_LoraSetUplinkCounter+0x30>
    pParserCmdInfo->pReplyCmd = (char*)gapParserLorawanStatus[status];
    2f08:	009b      	lsls	r3, r3, #2
    2f0a:	4a07      	ldr	r2, [pc, #28]	; (2f28 <Parser_LoraSetUplinkCounter+0x44>)
    2f0c:	589b      	ldr	r3, [r3, r2]
    2f0e:	6163      	str	r3, [r4, #20]
}
    2f10:	b002      	add	sp, #8
    2f12:	bd10      	pop	{r4, pc}
        status = LORAWAN_SetAttr(UPLINK_COUNTER, &param1Value);       
    2f14:	a901      	add	r1, sp, #4
    2f16:	200a      	movs	r0, #10
    2f18:	4b04      	ldr	r3, [pc, #16]	; (2f2c <Parser_LoraSetUplinkCounter+0x48>)
    2f1a:	4798      	blx	r3
    2f1c:	0003      	movs	r3, r0
    2f1e:	e7f3      	b.n	2f08 <Parser_LoraSetUplinkCounter+0x24>
    2f20:	0001a5ed 	.word	0x0001a5ed
    2f24:	00004315 	.word	0x00004315
    2f28:	0001f8b4 	.word	0x0001f8b4
    2f2c:	000139e5 	.word	0x000139e5

00002f30 <Parser_LoraSetDownlinkCounter>:
{
    2f30:	b510      	push	{r4, lr}
    2f32:	b082      	sub	sp, #8
    2f34:	0004      	movs	r4, r0
    uint32_t param1Value = (uint32_t)strtoul(pParserCmdInfo->pParam1, NULL, 10U);
    2f36:	220a      	movs	r2, #10
    2f38:	2100      	movs	r1, #0
    2f3a:	6800      	ldr	r0, [r0, #0]
    2f3c:	4b0b      	ldr	r3, [pc, #44]	; (2f6c <Parser_LoraSetDownlinkCounter+0x3c>)
    2f3e:	4798      	blx	r3
    2f40:	9001      	str	r0, [sp, #4]
    if (Validate_UintDecAsciiValue(pParserCmdInfo->pParam1, 10, UINT32_MAX))
    2f42:	2201      	movs	r2, #1
    2f44:	4252      	negs	r2, r2
    2f46:	210a      	movs	r1, #10
    2f48:	6820      	ldr	r0, [r4, #0]
    2f4a:	4b09      	ldr	r3, [pc, #36]	; (2f70 <Parser_LoraSetDownlinkCounter+0x40>)
    2f4c:	4798      	blx	r3
    StackRetStatus_t status = LORAWAN_INVALID_PARAMETER;
    2f4e:	230a      	movs	r3, #10
    if (Validate_UintDecAsciiValue(pParserCmdInfo->pParam1, 10, UINT32_MAX))
    2f50:	2800      	cmp	r0, #0
    2f52:	d105      	bne.n	2f60 <Parser_LoraSetDownlinkCounter+0x30>
     pParserCmdInfo->pReplyCmd = (char*)gapParserLorawanStatus[status];
    2f54:	009b      	lsls	r3, r3, #2
    2f56:	4a07      	ldr	r2, [pc, #28]	; (2f74 <Parser_LoraSetDownlinkCounter+0x44>)
    2f58:	589b      	ldr	r3, [r3, r2]
    2f5a:	6163      	str	r3, [r4, #20]
}
    2f5c:	b002      	add	sp, #8
    2f5e:	bd10      	pop	{r4, pc}
        status = LORAWAN_SetAttr(DOWNLINK_COUNTER, &param1Value);   
    2f60:	a901      	add	r1, sp, #4
    2f62:	200b      	movs	r0, #11
    2f64:	4b04      	ldr	r3, [pc, #16]	; (2f78 <Parser_LoraSetDownlinkCounter+0x48>)
    2f66:	4798      	blx	r3
    2f68:	0003      	movs	r3, r0
    2f6a:	e7f3      	b.n	2f54 <Parser_LoraSetDownlinkCounter+0x24>
    2f6c:	0001a5ed 	.word	0x0001a5ed
    2f70:	00004315 	.word	0x00004315
    2f74:	0001f8b4 	.word	0x0001f8b4
    2f78:	000139e5 	.word	0x000139e5

00002f7c <Parser_LoraSetSyncWord>:
{
    2f7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2f7e:	0004      	movs	r4, r0
    uint16_t asciiDataLen = strlen(pParserCmdInfo->pParam1);
    2f80:	6805      	ldr	r5, [r0, #0]
    2f82:	0028      	movs	r0, r5
    2f84:	4b10      	ldr	r3, [pc, #64]	; (2fc8 <Parser_LoraSetSyncWord+0x4c>)
    2f86:	4798      	blx	r3
    2f88:	0006      	movs	r6, r0
    if (Validate_HexValue(pParserCmdInfo->pParam1) && (2 == strlen(pParserCmdInfo->pParam1)))
    2f8a:	0028      	movs	r0, r5
    2f8c:	4b0f      	ldr	r3, [pc, #60]	; (2fcc <Parser_LoraSetSyncWord+0x50>)
    2f8e:	4798      	blx	r3
    StackRetStatus_t status = LORAWAN_INVALID_PARAMETER;
    2f90:	230a      	movs	r3, #10
    if (Validate_HexValue(pParserCmdInfo->pParam1) && (2 == strlen(pParserCmdInfo->pParam1)))
    2f92:	2800      	cmp	r0, #0
    2f94:	d006      	beq.n	2fa4 <Parser_LoraSetSyncWord+0x28>
    2f96:	6827      	ldr	r7, [r4, #0]
    2f98:	0038      	movs	r0, r7
    2f9a:	4b0b      	ldr	r3, [pc, #44]	; (2fc8 <Parser_LoraSetSyncWord+0x4c>)
    2f9c:	4798      	blx	r3
    StackRetStatus_t status = LORAWAN_INVALID_PARAMETER;
    2f9e:	230a      	movs	r3, #10
    if (Validate_HexValue(pParserCmdInfo->pParam1) && (2 == strlen(pParserCmdInfo->pParam1)))
    2fa0:	2802      	cmp	r0, #2
    2fa2:	d004      	beq.n	2fae <Parser_LoraSetSyncWord+0x32>
    pParserCmdInfo->pReplyCmd = (char*)gapParserLorawanStatus[status];
    2fa4:	009b      	lsls	r3, r3, #2
    2fa6:	4a0a      	ldr	r2, [pc, #40]	; (2fd0 <Parser_LoraSetSyncWord+0x54>)
    2fa8:	589b      	ldr	r3, [r3, r2]
    2faa:	6163      	str	r3, [r4, #20]
}
    2fac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        Parser_HexAsciiToInt(asciiDataLen, pParserCmdInfo->pParam1, (uint8_t *)aParserData);
    2fae:	4d09      	ldr	r5, [pc, #36]	; (2fd4 <Parser_LoraSetSyncWord+0x58>)
    2fb0:	b2b0      	uxth	r0, r6
    2fb2:	002a      	movs	r2, r5
    2fb4:	0039      	movs	r1, r7
    2fb6:	4b08      	ldr	r3, [pc, #32]	; (2fd8 <Parser_LoraSetSyncWord+0x5c>)
    2fb8:	4798      	blx	r3
        status = LORAWAN_SetAttr(SYNC_WORD,aParserData);    
    2fba:	0029      	movs	r1, r5
    2fbc:	2009      	movs	r0, #9
    2fbe:	4b07      	ldr	r3, [pc, #28]	; (2fdc <Parser_LoraSetSyncWord+0x60>)
    2fc0:	4798      	blx	r3
    2fc2:	0003      	movs	r3, r0
    2fc4:	e7ee      	b.n	2fa4 <Parser_LoraSetSyncWord+0x28>
    2fc6:	46c0      	nop			; (mov r8, r8)
    2fc8:	0001a2e1 	.word	0x0001a2e1
    2fcc:	000041ad 	.word	0x000041ad
    2fd0:	0001f8b4 	.word	0x0001f8b4
    2fd4:	2000116c 	.word	0x2000116c
    2fd8:	000044b5 	.word	0x000044b5
    2fdc:	000139e5 	.word	0x000139e5

00002fe0 <Parser_LoraGetSyncWord>:
{
    2fe0:	b530      	push	{r4, r5, lr}
    2fe2:	b083      	sub	sp, #12
    2fe4:	0005      	movs	r5, r0
    LORAWAN_GetAttr(SYNC_WORD, NULL, &syncWord);
    2fe6:	466b      	mov	r3, sp
    2fe8:	1dda      	adds	r2, r3, #7
    2fea:	2100      	movs	r1, #0
    2fec:	2009      	movs	r0, #9
    2fee:	4b06      	ldr	r3, [pc, #24]	; (3008 <Parser_LoraGetSyncWord+0x28>)
    2ff0:	4798      	blx	r3
    Parser_IntArrayToHexAscii(1, &syncWord, aParserData);
    2ff2:	4c06      	ldr	r4, [pc, #24]	; (300c <Parser_LoraGetSyncWord+0x2c>)
    2ff4:	0022      	movs	r2, r4
    2ff6:	466b      	mov	r3, sp
    2ff8:	1dd9      	adds	r1, r3, #7
    2ffa:	2001      	movs	r0, #1
    2ffc:	4b04      	ldr	r3, [pc, #16]	; (3010 <Parser_LoraGetSyncWord+0x30>)
    2ffe:	4798      	blx	r3
    pParserCmdInfo->pReplyCmd = aParserData;
    3000:	616c      	str	r4, [r5, #20]
}
    3002:	b003      	add	sp, #12
    3004:	bd30      	pop	{r4, r5, pc}
    3006:	46c0      	nop			; (mov r8, r8)
    3008:	000119a1 	.word	0x000119a1
    300c:	2000116c 	.word	0x2000116c
    3010:	000041e1 	.word	0x000041e1

00003014 <Parser_LoraGetUplinkCounter>:
{
    3014:	b530      	push	{r4, r5, lr}
    3016:	b083      	sub	sp, #12
    3018:	0005      	movs	r5, r0
    LORAWAN_GetAttr(UPLINK_COUNTER, NULL, &ctr);
    301a:	aa01      	add	r2, sp, #4
    301c:	2100      	movs	r1, #0
    301e:	200a      	movs	r0, #10
    3020:	4b05      	ldr	r3, [pc, #20]	; (3038 <Parser_LoraGetUplinkCounter+0x24>)
    3022:	4798      	blx	r3
    ultoa(aParserData, ctr, 10U);
    3024:	4c05      	ldr	r4, [pc, #20]	; (303c <Parser_LoraGetUplinkCounter+0x28>)
    3026:	220a      	movs	r2, #10
    3028:	9901      	ldr	r1, [sp, #4]
    302a:	0020      	movs	r0, r4
    302c:	4b04      	ldr	r3, [pc, #16]	; (3040 <Parser_LoraGetUplinkCounter+0x2c>)
    302e:	4798      	blx	r3
    pParserCmdInfo->pReplyCmd = aParserData;
    3030:	616c      	str	r4, [r5, #20]
}
    3032:	b003      	add	sp, #12
    3034:	bd30      	pop	{r4, r5, pc}
    3036:	46c0      	nop			; (mov r8, r8)
    3038:	000119a1 	.word	0x000119a1
    303c:	2000116c 	.word	0x2000116c
    3040:	00004299 	.word	0x00004299

00003044 <Parser_LoraGetDownlinkCounter>:
{
    3044:	b530      	push	{r4, r5, lr}
    3046:	b083      	sub	sp, #12
    3048:	0005      	movs	r5, r0
    LORAWAN_GetAttr(DOWNLINK_COUNTER, NULL, &ctr);
    304a:	aa01      	add	r2, sp, #4
    304c:	2100      	movs	r1, #0
    304e:	200b      	movs	r0, #11
    3050:	4b05      	ldr	r3, [pc, #20]	; (3068 <Parser_LoraGetDownlinkCounter+0x24>)
    3052:	4798      	blx	r3
    ultoa(aParserData, ctr, 10U);
    3054:	4c05      	ldr	r4, [pc, #20]	; (306c <Parser_LoraGetDownlinkCounter+0x28>)
    3056:	220a      	movs	r2, #10
    3058:	9901      	ldr	r1, [sp, #4]
    305a:	0020      	movs	r0, r4
    305c:	4b04      	ldr	r3, [pc, #16]	; (3070 <Parser_LoraGetDownlinkCounter+0x2c>)
    305e:	4798      	blx	r3
    pParserCmdInfo->pReplyCmd = aParserData;
    3060:	616c      	str	r4, [r5, #20]
}
    3062:	b003      	add	sp, #12
    3064:	bd30      	pop	{r4, r5, pc}
    3066:	46c0      	nop			; (mov r8, r8)
    3068:	000119a1 	.word	0x000119a1
    306c:	2000116c 	.word	0x2000116c
    3070:	00004299 	.word	0x00004299

00003074 <Parser_LoraLinkCheck>:
{
    3074:	b510      	push	{r4, lr}
    3076:	b082      	sub	sp, #8
    3078:	0004      	movs	r4, r0
    uint16_t period = strtoul(pParserCmdInfo->pParam1, NULL, 10);
    307a:	220a      	movs	r2, #10
    307c:	2100      	movs	r1, #0
    307e:	6800      	ldr	r0, [r0, #0]
    3080:	4b0c      	ldr	r3, [pc, #48]	; (30b4 <Parser_LoraLinkCheck+0x40>)
    3082:	4798      	blx	r3
    3084:	466b      	mov	r3, sp
    3086:	80d8      	strh	r0, [r3, #6]
    if(Validate_UintDecAsciiValue(pParserCmdInfo->pParam1, 5, UINT16_MAX))
    3088:	4a0b      	ldr	r2, [pc, #44]	; (30b8 <Parser_LoraLinkCheck+0x44>)
    308a:	2105      	movs	r1, #5
    308c:	6820      	ldr	r0, [r4, #0]
    308e:	4b0b      	ldr	r3, [pc, #44]	; (30bc <Parser_LoraLinkCheck+0x48>)
    3090:	4798      	blx	r3
    StackRetStatus_t status = LORAWAN_INVALID_PARAMETER;
    3092:	230a      	movs	r3, #10
    if(Validate_UintDecAsciiValue(pParserCmdInfo->pParam1, 5, UINT16_MAX))
    3094:	2800      	cmp	r0, #0
    3096:	d105      	bne.n	30a4 <Parser_LoraLinkCheck+0x30>
    pParserCmdInfo->pReplyCmd = (char*)gapParserLorawanStatus[status];
    3098:	009b      	lsls	r3, r3, #2
    309a:	4a09      	ldr	r2, [pc, #36]	; (30c0 <Parser_LoraLinkCheck+0x4c>)
    309c:	589b      	ldr	r3, [r3, r2]
    309e:	6163      	str	r3, [r4, #20]
}
    30a0:	b002      	add	sp, #8
    30a2:	bd10      	pop	{r4, pc}
        status = LORAWAN_SetAttr(LINK_CHECK_PERIOD,&period);      
    30a4:	466b      	mov	r3, sp
    30a6:	1d99      	adds	r1, r3, #6
    30a8:	2018      	movs	r0, #24
    30aa:	4b06      	ldr	r3, [pc, #24]	; (30c4 <Parser_LoraLinkCheck+0x50>)
    30ac:	4798      	blx	r3
    30ae:	0003      	movs	r3, r0
    30b0:	e7f2      	b.n	3098 <Parser_LoraLinkCheck+0x24>
    30b2:	46c0      	nop			; (mov r8, r8)
    30b4:	0001a5ed 	.word	0x0001a5ed
    30b8:	0000ffff 	.word	0x0000ffff
    30bc:	00004315 	.word	0x00004315
    30c0:	0001f8b4 	.word	0x0001f8b4
    30c4:	000139e5 	.word	0x000139e5

000030c8 <Parser_LoraGetAggregatedDutyCycle>:
{
    30c8:	b570      	push	{r4, r5, r6, lr}
    30ca:	b082      	sub	sp, #8
    30cc:	0006      	movs	r6, r0
    LORAWAN_GetAttr(AGGREGATED_DUTYCYCLE, NULL, &aggregatedDutyCycle);
    30ce:	466b      	mov	r3, sp
    30d0:	1d9d      	adds	r5, r3, #6
    30d2:	002a      	movs	r2, r5
    30d4:	2100      	movs	r1, #0
    30d6:	201f      	movs	r0, #31
    30d8:	4b05      	ldr	r3, [pc, #20]	; (30f0 <Parser_LoraGetAggregatedDutyCycle+0x28>)
    30da:	4798      	blx	r3
    utoa(aggregatedDutyCycle, aParserData,  10);
    30dc:	4c05      	ldr	r4, [pc, #20]	; (30f4 <Parser_LoraGetAggregatedDutyCycle+0x2c>)
    30de:	8828      	ldrh	r0, [r5, #0]
    30e0:	220a      	movs	r2, #10
    30e2:	0021      	movs	r1, r4
    30e4:	4b04      	ldr	r3, [pc, #16]	; (30f8 <Parser_LoraGetAggregatedDutyCycle+0x30>)
    30e6:	4798      	blx	r3
    pParserCmdInfo->pReplyCmd = aParserData;
    30e8:	6174      	str	r4, [r6, #20]
}
    30ea:	b002      	add	sp, #8
    30ec:	bd70      	pop	{r4, r5, r6, pc}
    30ee:	46c0      	nop			; (mov r8, r8)
    30f0:	000119a1 	.word	0x000119a1
    30f4:	2000116c 	.word	0x2000116c
    30f8:	0001a6a5 	.word	0x0001a6a5

000030fc <Parser_LoraSetAggregatedDutyCycle>:
{
    30fc:	b510      	push	{r4, lr}
    30fe:	b082      	sub	sp, #8
    3100:	0004      	movs	r4, r0
    uint16_t aggregatedDutyCycle = atoi(pParserCmdInfo->pParam1);
    3102:	6800      	ldr	r0, [r0, #0]
    3104:	4b0c      	ldr	r3, [pc, #48]	; (3138 <Parser_LoraSetAggregatedDutyCycle+0x3c>)
    3106:	4798      	blx	r3
    3108:	466b      	mov	r3, sp
    310a:	80d8      	strh	r0, [r3, #6]
    if(Validate_UintDecAsciiValue(pParserCmdInfo->pParam1, 2, UINT8_MAX))
    310c:	22ff      	movs	r2, #255	; 0xff
    310e:	2102      	movs	r1, #2
    3110:	6820      	ldr	r0, [r4, #0]
    3112:	4b0a      	ldr	r3, [pc, #40]	; (313c <Parser_LoraSetAggregatedDutyCycle+0x40>)
    3114:	4798      	blx	r3
    StackRetStatus_t status = LORAWAN_INVALID_PARAMETER;
    3116:	230a      	movs	r3, #10
    if(Validate_UintDecAsciiValue(pParserCmdInfo->pParam1, 2, UINT8_MAX))
    3118:	2800      	cmp	r0, #0
    311a:	d105      	bne.n	3128 <Parser_LoraSetAggregatedDutyCycle+0x2c>
    pParserCmdInfo->pReplyCmd = (char*)gapParserLorawanStatus[status];
    311c:	009b      	lsls	r3, r3, #2
    311e:	4a08      	ldr	r2, [pc, #32]	; (3140 <Parser_LoraSetAggregatedDutyCycle+0x44>)
    3120:	589b      	ldr	r3, [r3, r2]
    3122:	6163      	str	r3, [r4, #20]
}
    3124:	b002      	add	sp, #8
    3126:	bd10      	pop	{r4, pc}
		status = LORAWAN_SetAttr(AGGREGATED_DUTYCYCLE,&aggregatedDutyCycle);
    3128:	466b      	mov	r3, sp
    312a:	1d99      	adds	r1, r3, #6
    312c:	201f      	movs	r0, #31
    312e:	4b05      	ldr	r3, [pc, #20]	; (3144 <Parser_LoraSetAggregatedDutyCycle+0x48>)
    3130:	4798      	blx	r3
    3132:	0003      	movs	r3, r0
    3134:	e7f2      	b.n	311c <Parser_LoraSetAggregatedDutyCycle+0x20>
    3136:	46c0      	nop			; (mov r8, r8)
    3138:	000196b1 	.word	0x000196b1
    313c:	00004315 	.word	0x00004315
    3140:	0001f8b4 	.word	0x0001f8b4
    3144:	000139e5 	.word	0x000139e5

00003148 <Parser_LoraSetCryptoDevEnabled>:
{
    3148:	b570      	push	{r4, r5, r6, lr}
    314a:	b082      	sub	sp, #8
    314c:	0005      	movs	r5, r0
	validationVal = Validate_OnOffAsciiValue(pParserCmdInfo->pParam1);
    314e:	6800      	ldr	r0, [r0, #0]
    3150:	4b0d      	ldr	r3, [pc, #52]	; (3188 <Parser_LoraSetCryptoDevEnabled+0x40>)
    3152:	4798      	blx	r3
    3154:	466b      	mov	r3, sp
    3156:	71d8      	strb	r0, [r3, #7]
	uint8_t returnVal = LORAWAN_INVALID_PARAMETER;
    3158:	240a      	movs	r4, #10
	if (validationVal < 2U)
    315a:	2801      	cmp	r0, #1
    315c:	d905      	bls.n	316a <Parser_LoraSetCryptoDevEnabled+0x22>
	pParserCmdInfo->pReplyCmd = (char*)gapParserLorawanStatus[returnVal];
    315e:	00a4      	lsls	r4, r4, #2
    3160:	4b0a      	ldr	r3, [pc, #40]	; (318c <Parser_LoraSetCryptoDevEnabled+0x44>)
    3162:	58e3      	ldr	r3, [r4, r3]
    3164:	616b      	str	r3, [r5, #20]
}
    3166:	b002      	add	sp, #8
    3168:	bd70      	pop	{r4, r5, r6, pc}
		returnVal = LORAWAN_SetAttr(CRYPTODEVICE_ENABLED, &validationVal);
    316a:	466b      	mov	r3, sp
    316c:	1dde      	adds	r6, r3, #7
    316e:	0031      	movs	r1, r6
    3170:	203e      	movs	r0, #62	; 0x3e
    3172:	4b07      	ldr	r3, [pc, #28]	; (3190 <Parser_LoraSetCryptoDevEnabled+0x48>)
    3174:	4798      	blx	r3
    3176:	0004      	movs	r4, r0
		SAL_Init(validationVal) ;
    3178:	7830      	ldrb	r0, [r6, #0]
    317a:	1e43      	subs	r3, r0, #1
    317c:	4198      	sbcs	r0, r3
    317e:	b2c0      	uxtb	r0, r0
    3180:	4b04      	ldr	r3, [pc, #16]	; (3194 <Parser_LoraSetCryptoDevEnabled+0x4c>)
    3182:	4798      	blx	r3
    3184:	e7eb      	b.n	315e <Parser_LoraSetCryptoDevEnabled+0x16>
    3186:	46c0      	nop			; (mov r8, r8)
    3188:	000043e9 	.word	0x000043e9
    318c:	0001f8b4 	.word	0x0001f8b4
    3190:	000139e5 	.word	0x000139e5
    3194:	0000dbed 	.word	0x0000dbed

00003198 <Parser_LoraSetTestModeEnabled>:
{
    3198:	b510      	push	{r4, lr}
    319a:	b082      	sub	sp, #8
    319c:	0004      	movs	r4, r0
	validationVal = Validate_OnOffAsciiValue(pParserCmdInfo->pParam1);
    319e:	6800      	ldr	r0, [r0, #0]
    31a0:	4b09      	ldr	r3, [pc, #36]	; (31c8 <Parser_LoraSetTestModeEnabled+0x30>)
    31a2:	4798      	blx	r3
    31a4:	466b      	mov	r3, sp
    31a6:	71d8      	strb	r0, [r3, #7]
	uint8_t returnVal = LORAWAN_INVALID_PARAMETER;
    31a8:	230a      	movs	r3, #10
	if (validationVal < 2U)
    31aa:	2801      	cmp	r0, #1
    31ac:	d905      	bls.n	31ba <Parser_LoraSetTestModeEnabled+0x22>
	pParserCmdInfo->pReplyCmd = (char*)gapParserLorawanStatus[returnVal];
    31ae:	009b      	lsls	r3, r3, #2
    31b0:	4a06      	ldr	r2, [pc, #24]	; (31cc <Parser_LoraSetTestModeEnabled+0x34>)
    31b2:	589b      	ldr	r3, [r3, r2]
    31b4:	6163      	str	r3, [r4, #20]
}
    31b6:	b002      	add	sp, #8
    31b8:	bd10      	pop	{r4, pc}
		returnVal = LORAWAN_SetAttr(TEST_MODE_ENABLE, &validationVal);
    31ba:	466b      	mov	r3, sp
    31bc:	1dd9      	adds	r1, r3, #7
    31be:	2032      	movs	r0, #50	; 0x32
    31c0:	4b03      	ldr	r3, [pc, #12]	; (31d0 <Parser_LoraSetTestModeEnabled+0x38>)
    31c2:	4798      	blx	r3
    31c4:	0003      	movs	r3, r0
    31c6:	e7f2      	b.n	31ae <Parser_LoraSetTestModeEnabled+0x16>
    31c8:	000043e9 	.word	0x000043e9
    31cc:	0001f8b4 	.word	0x0001f8b4
    31d0:	000139e5 	.word	0x000139e5

000031d4 <Parser_LoraGetMacStatus>:
{
    31d4:	b530      	push	{r4, r5, lr}
    31d6:	b083      	sub	sp, #12
    31d8:	0005      	movs	r5, r0
    LORAWAN_GetAttr(LORAWAN_STATUS,NULL, &macStatusMask);
    31da:	aa01      	add	r2, sp, #4
    31dc:	2100      	movs	r1, #0
    31de:	2020      	movs	r0, #32
    31e0:	4b09      	ldr	r3, [pc, #36]	; (3208 <Parser_LoraGetMacStatus+0x34>)
    31e2:	4798      	blx	r3
    tempBuff[3] = (uint8_t)macStatusMask;
    31e4:	9b01      	ldr	r3, [sp, #4]
    31e6:	466a      	mov	r2, sp
    31e8:	70d3      	strb	r3, [r2, #3]
    tempBuff[2] = (uint8_t)(macStatusMask >> 8);
    31ea:	0a1a      	lsrs	r2, r3, #8
    31ec:	4669      	mov	r1, sp
    31ee:	708a      	strb	r2, [r1, #2]
    tempBuff[1] = (uint8_t)(macStatusMask >> 16);
    31f0:	0c1a      	lsrs	r2, r3, #16
    31f2:	704a      	strb	r2, [r1, #1]
    tempBuff[0] = (uint8_t)(macStatusMask >> 24);    
    31f4:	0e1b      	lsrs	r3, r3, #24
    31f6:	700b      	strb	r3, [r1, #0]
    Parser_IntArrayToHexAscii(4, tempBuff, aParserData);
    31f8:	4c04      	ldr	r4, [pc, #16]	; (320c <Parser_LoraGetMacStatus+0x38>)
    31fa:	0022      	movs	r2, r4
    31fc:	2004      	movs	r0, #4
    31fe:	4b04      	ldr	r3, [pc, #16]	; (3210 <Parser_LoraGetMacStatus+0x3c>)
    3200:	4798      	blx	r3
    pParserCmdInfo->pReplyCmd = aParserData;
    3202:	616c      	str	r4, [r5, #20]
}
    3204:	b003      	add	sp, #12
    3206:	bd30      	pop	{r4, r5, pc}
    3208:	000119a1 	.word	0x000119a1
    320c:	2000116c 	.word	0x2000116c
    3210:	000041e1 	.word	0x000041e1

00003214 <Parser_LoraSetBatLevel>:
{
    3214:	b510      	push	{r4, lr}
    3216:	b082      	sub	sp, #8
    3218:	0004      	movs	r4, r0
    uint8_t batLevel = atoi(pParserCmdInfo->pParam1);
    321a:	6800      	ldr	r0, [r0, #0]
    321c:	4b0c      	ldr	r3, [pc, #48]	; (3250 <Parser_LoraSetBatLevel+0x3c>)
    321e:	4798      	blx	r3
    3220:	466b      	mov	r3, sp
    3222:	71d8      	strb	r0, [r3, #7]
    if(Validate_UintDecAsciiValue(pParserCmdInfo->pParam1, 3, UINT8_MAX))
    3224:	22ff      	movs	r2, #255	; 0xff
    3226:	2103      	movs	r1, #3
    3228:	6820      	ldr	r0, [r4, #0]
    322a:	4b0a      	ldr	r3, [pc, #40]	; (3254 <Parser_LoraSetBatLevel+0x40>)
    322c:	4798      	blx	r3
    StackRetStatus_t status = LORAWAN_INVALID_PARAMETER;
    322e:	230a      	movs	r3, #10
    if(Validate_UintDecAsciiValue(pParserCmdInfo->pParam1, 3, UINT8_MAX))
    3230:	2800      	cmp	r0, #0
    3232:	d105      	bne.n	3240 <Parser_LoraSetBatLevel+0x2c>
    pParserCmdInfo->pReplyCmd = (char*)gapParserLorawanStatus[status];
    3234:	009b      	lsls	r3, r3, #2
    3236:	4a08      	ldr	r2, [pc, #32]	; (3258 <Parser_LoraSetBatLevel+0x44>)
    3238:	589b      	ldr	r3, [r3, r2]
    323a:	6163      	str	r3, [r4, #20]
}
    323c:	b002      	add	sp, #8
    323e:	bd10      	pop	{r4, pc}
        status = LORAWAN_SetAttr(BATTERY, &batLevel);
    3240:	466b      	mov	r3, sp
    3242:	1dd9      	adds	r1, r3, #7
    3244:	2017      	movs	r0, #23
    3246:	4b05      	ldr	r3, [pc, #20]	; (325c <Parser_LoraSetBatLevel+0x48>)
    3248:	4798      	blx	r3
    324a:	0003      	movs	r3, r0
    324c:	e7f2      	b.n	3234 <Parser_LoraSetBatLevel+0x20>
    324e:	46c0      	nop			; (mov r8, r8)
    3250:	000196b1 	.word	0x000196b1
    3254:	00004315 	.word	0x00004315
    3258:	0001f8b4 	.word	0x0001f8b4
    325c:	000139e5 	.word	0x000139e5

00003260 <Parser_LoraSetReTxNb>:
{
    3260:	b510      	push	{r4, lr}
    3262:	b082      	sub	sp, #8
    3264:	0004      	movs	r4, r0
    uint8_t reTxNb = atoi(pParserCmdInfo->pParam1);
    3266:	6800      	ldr	r0, [r0, #0]
    3268:	4b0c      	ldr	r3, [pc, #48]	; (329c <Parser_LoraSetReTxNb+0x3c>)
    326a:	4798      	blx	r3
    326c:	466b      	mov	r3, sp
    326e:	71d8      	strb	r0, [r3, #7]
    if(Validate_UintDecAsciiValue(pParserCmdInfo->pParam1, 3, UINT8_MAX))
    3270:	22ff      	movs	r2, #255	; 0xff
    3272:	2103      	movs	r1, #3
    3274:	6820      	ldr	r0, [r4, #0]
    3276:	4b0a      	ldr	r3, [pc, #40]	; (32a0 <Parser_LoraSetReTxNb+0x40>)
    3278:	4798      	blx	r3
    StackRetStatus_t status = LORAWAN_INVALID_PARAMETER;
    327a:	230a      	movs	r3, #10
    if(Validate_UintDecAsciiValue(pParserCmdInfo->pParam1, 3, UINT8_MAX))
    327c:	2800      	cmp	r0, #0
    327e:	d105      	bne.n	328c <Parser_LoraSetReTxNb+0x2c>
    pParserCmdInfo->pReplyCmd = (char*)gapParserLorawanStatus[status];
    3280:	009b      	lsls	r3, r3, #2
    3282:	4a08      	ldr	r2, [pc, #32]	; (32a4 <Parser_LoraSetReTxNb+0x44>)
    3284:	589b      	ldr	r3, [r3, r2]
    3286:	6163      	str	r3, [r4, #20]
}
    3288:	b002      	add	sp, #8
    328a:	bd10      	pop	{r4, pc}
        status = LORAWAN_SetAttr(CNF_RETRANSMISSION_NUM,&reTxNb);
    328c:	466b      	mov	r3, sp
    328e:	1dd9      	adds	r1, r3, #7
    3290:	2013      	movs	r0, #19
    3292:	4b05      	ldr	r3, [pc, #20]	; (32a8 <Parser_LoraSetReTxNb+0x48>)
    3294:	4798      	blx	r3
    3296:	0003      	movs	r3, r0
    3298:	e7f2      	b.n	3280 <Parser_LoraSetReTxNb+0x20>
    329a:	46c0      	nop			; (mov r8, r8)
    329c:	000196b1 	.word	0x000196b1
    32a0:	00004315 	.word	0x00004315
    32a4:	0001f8b4 	.word	0x0001f8b4
    32a8:	000139e5 	.word	0x000139e5

000032ac <Parser_LoraSetRepsNb>:
{
    32ac:	b510      	push	{r4, lr}
    32ae:	b082      	sub	sp, #8
    32b0:	0004      	movs	r4, r0
	uint8_t reTxNb = atoi(pParserCmdInfo->pParam1);
    32b2:	6800      	ldr	r0, [r0, #0]
    32b4:	4b0c      	ldr	r3, [pc, #48]	; (32e8 <Parser_LoraSetRepsNb+0x3c>)
    32b6:	4798      	blx	r3
    32b8:	466b      	mov	r3, sp
    32ba:	71d8      	strb	r0, [r3, #7]
	if(Validate_UintDecAsciiValue(pParserCmdInfo->pParam1, 3, UINT8_MAX))
    32bc:	22ff      	movs	r2, #255	; 0xff
    32be:	2103      	movs	r1, #3
    32c0:	6820      	ldr	r0, [r4, #0]
    32c2:	4b0a      	ldr	r3, [pc, #40]	; (32ec <Parser_LoraSetRepsNb+0x40>)
    32c4:	4798      	blx	r3
	StackRetStatus_t status = LORAWAN_INVALID_PARAMETER;
    32c6:	230a      	movs	r3, #10
	if(Validate_UintDecAsciiValue(pParserCmdInfo->pParam1, 3, UINT8_MAX))
    32c8:	2800      	cmp	r0, #0
    32ca:	d105      	bne.n	32d8 <Parser_LoraSetRepsNb+0x2c>
	pParserCmdInfo->pReplyCmd = (char*)gapParserLorawanStatus[status];
    32cc:	009b      	lsls	r3, r3, #2
    32ce:	4a08      	ldr	r2, [pc, #32]	; (32f0 <Parser_LoraSetRepsNb+0x44>)
    32d0:	589b      	ldr	r3, [r3, r2]
    32d2:	6163      	str	r3, [r4, #20]
}
    32d4:	b002      	add	sp, #8
    32d6:	bd10      	pop	{r4, pc}
		status = LORAWAN_SetAttr(UNCNF_REPETITION_NUM,&reTxNb);
    32d8:	466b      	mov	r3, sp
    32da:	1dd9      	adds	r1, r3, #7
    32dc:	2014      	movs	r0, #20
    32de:	4b05      	ldr	r3, [pc, #20]	; (32f4 <Parser_LoraSetRepsNb+0x48>)
    32e0:	4798      	blx	r3
    32e2:	0003      	movs	r3, r0
    32e4:	e7f2      	b.n	32cc <Parser_LoraSetRepsNb+0x20>
    32e6:	46c0      	nop			; (mov r8, r8)
    32e8:	000196b1 	.word	0x000196b1
    32ec:	00004315 	.word	0x00004315
    32f0:	0001f8b4 	.word	0x0001f8b4
    32f4:	000139e5 	.word	0x000139e5

000032f8 <Parser_LoraGetReTxNb>:
{
    32f8:	b570      	push	{r4, r5, r6, lr}
    32fa:	b082      	sub	sp, #8
    32fc:	0006      	movs	r6, r0
    LORAWAN_GetAttr(CNF_RETRANSMISSION_NUM, NULL, &reTxNb);
    32fe:	466b      	mov	r3, sp
    3300:	1ddd      	adds	r5, r3, #7
    3302:	002a      	movs	r2, r5
    3304:	2100      	movs	r1, #0
    3306:	2013      	movs	r0, #19
    3308:	4b05      	ldr	r3, [pc, #20]	; (3320 <Parser_LoraGetReTxNb+0x28>)
    330a:	4798      	blx	r3
    utoa(reTxNb, aParserData, 10);
    330c:	4c05      	ldr	r4, [pc, #20]	; (3324 <Parser_LoraGetReTxNb+0x2c>)
    330e:	7828      	ldrb	r0, [r5, #0]
    3310:	220a      	movs	r2, #10
    3312:	0021      	movs	r1, r4
    3314:	4b04      	ldr	r3, [pc, #16]	; (3328 <Parser_LoraGetReTxNb+0x30>)
    3316:	4798      	blx	r3
    pParserCmdInfo->pReplyCmd = aParserData;
    3318:	6174      	str	r4, [r6, #20]
}
    331a:	b002      	add	sp, #8
    331c:	bd70      	pop	{r4, r5, r6, pc}
    331e:	46c0      	nop			; (mov r8, r8)
    3320:	000119a1 	.word	0x000119a1
    3324:	2000116c 	.word	0x2000116c
    3328:	0001a6a5 	.word	0x0001a6a5

0000332c <Parser_LoraGetRepsNb>:
{
    332c:	b570      	push	{r4, r5, r6, lr}
    332e:	b082      	sub	sp, #8
    3330:	0006      	movs	r6, r0
	LORAWAN_GetAttr(UNCNF_REPETITION_NUM, NULL, &reTxNb);
    3332:	466b      	mov	r3, sp
    3334:	1ddd      	adds	r5, r3, #7
    3336:	002a      	movs	r2, r5
    3338:	2100      	movs	r1, #0
    333a:	2014      	movs	r0, #20
    333c:	4b05      	ldr	r3, [pc, #20]	; (3354 <Parser_LoraGetRepsNb+0x28>)
    333e:	4798      	blx	r3
	utoa(reTxNb, aParserData, 10);
    3340:	4c05      	ldr	r4, [pc, #20]	; (3358 <Parser_LoraGetRepsNb+0x2c>)
    3342:	7828      	ldrb	r0, [r5, #0]
    3344:	220a      	movs	r2, #10
    3346:	0021      	movs	r1, r4
    3348:	4b04      	ldr	r3, [pc, #16]	; (335c <Parser_LoraGetRepsNb+0x30>)
    334a:	4798      	blx	r3
	pParserCmdInfo->pReplyCmd = aParserData;
    334c:	6174      	str	r4, [r6, #20]
}
    334e:	b002      	add	sp, #8
    3350:	bd70      	pop	{r4, r5, r6, pc}
    3352:	46c0      	nop			; (mov r8, r8)
    3354:	000119a1 	.word	0x000119a1
    3358:	2000116c 	.word	0x2000116c
    335c:	0001a6a5 	.word	0x0001a6a5

00003360 <Parser_LoraGetLinkCheckMargin>:
{
    3360:	b570      	push	{r4, r5, r6, lr}
    3362:	b082      	sub	sp, #8
    3364:	0006      	movs	r6, r0
    LORAWAN_GetAttr(LINK_CHECK_MARGIN, NULL, &mrgn);
    3366:	466b      	mov	r3, sp
    3368:	1ddd      	adds	r5, r3, #7
    336a:	002a      	movs	r2, r5
    336c:	2100      	movs	r1, #0
    336e:	2021      	movs	r0, #33	; 0x21
    3370:	4b05      	ldr	r3, [pc, #20]	; (3388 <Parser_LoraGetLinkCheckMargin+0x28>)
    3372:	4798      	blx	r3
    utoa(mrgn, aParserData,  10);
    3374:	4c05      	ldr	r4, [pc, #20]	; (338c <Parser_LoraGetLinkCheckMargin+0x2c>)
    3376:	7828      	ldrb	r0, [r5, #0]
    3378:	220a      	movs	r2, #10
    337a:	0021      	movs	r1, r4
    337c:	4b04      	ldr	r3, [pc, #16]	; (3390 <Parser_LoraGetLinkCheckMargin+0x30>)
    337e:	4798      	blx	r3
    pParserCmdInfo->pReplyCmd = aParserData;
    3380:	6174      	str	r4, [r6, #20]
}
    3382:	b002      	add	sp, #8
    3384:	bd70      	pop	{r4, r5, r6, pc}
    3386:	46c0      	nop			; (mov r8, r8)
    3388:	000119a1 	.word	0x000119a1
    338c:	2000116c 	.word	0x2000116c
    3390:	0001a6a5 	.word	0x0001a6a5

00003394 <Parser_LoraGetLinkCheckGwCnt>:
{
    3394:	b570      	push	{r4, r5, r6, lr}
    3396:	b082      	sub	sp, #8
    3398:	0006      	movs	r6, r0
    LORAWAN_GetAttr(LINK_CHECK_GWCNT, NULL, &gwCnt);
    339a:	466b      	mov	r3, sp
    339c:	1ddd      	adds	r5, r3, #7
    339e:	002a      	movs	r2, r5
    33a0:	2100      	movs	r1, #0
    33a2:	2022      	movs	r0, #34	; 0x22
    33a4:	4b05      	ldr	r3, [pc, #20]	; (33bc <Parser_LoraGetLinkCheckGwCnt+0x28>)
    33a6:	4798      	blx	r3
    utoa(gwCnt, aParserData, 10);
    33a8:	4c05      	ldr	r4, [pc, #20]	; (33c0 <Parser_LoraGetLinkCheckGwCnt+0x2c>)
    33aa:	7828      	ldrb	r0, [r5, #0]
    33ac:	220a      	movs	r2, #10
    33ae:	0021      	movs	r1, r4
    33b0:	4b04      	ldr	r3, [pc, #16]	; (33c4 <Parser_LoraGetLinkCheckGwCnt+0x30>)
    33b2:	4798      	blx	r3
    pParserCmdInfo->pReplyCmd = aParserData;
    33b4:	6174      	str	r4, [r6, #20]
}
    33b6:	b002      	add	sp, #8
    33b8:	bd70      	pop	{r4, r5, r6, pc}
    33ba:	46c0      	nop			; (mov r8, r8)
    33bc:	000119a1 	.word	0x000119a1
    33c0:	2000116c 	.word	0x2000116c
    33c4:	0001a6a5 	.word	0x0001a6a5

000033c8 <Parser_LoraSetAutoReply>:
{
    33c8:	b510      	push	{r4, lr}
    33ca:	b082      	sub	sp, #8
    33cc:	0004      	movs	r4, r0
    validationVal = Validate_OnOffAsciiValue(pParserCmdInfo->pParam1);
    33ce:	6800      	ldr	r0, [r0, #0]
    33d0:	4b09      	ldr	r3, [pc, #36]	; (33f8 <Parser_LoraSetAutoReply+0x30>)
    33d2:	4798      	blx	r3
    33d4:	466b      	mov	r3, sp
    33d6:	71d8      	strb	r0, [r3, #7]
    StackRetStatus_t status = LORAWAN_INVALID_PARAMETER;
    33d8:	230a      	movs	r3, #10
    if(validationVal < 2U)
    33da:	2801      	cmp	r0, #1
    33dc:	d905      	bls.n	33ea <Parser_LoraSetAutoReply+0x22>
    pParserCmdInfo->pReplyCmd = (char*)gapParserLorawanStatus[status];
    33de:	009b      	lsls	r3, r3, #2
    33e0:	4a06      	ldr	r2, [pc, #24]	; (33fc <Parser_LoraSetAutoReply+0x34>)
    33e2:	589b      	ldr	r3, [r3, r2]
    33e4:	6163      	str	r3, [r4, #20]
}
    33e6:	b002      	add	sp, #8
    33e8:	bd10      	pop	{r4, pc}
        status = LORAWAN_SetAttr(AUTOREPLY, &validationVal);      
    33ea:	466b      	mov	r3, sp
    33ec:	1dd9      	adds	r1, r3, #7
    33ee:	2016      	movs	r0, #22
    33f0:	4b03      	ldr	r3, [pc, #12]	; (3400 <Parser_LoraSetAutoReply+0x38>)
    33f2:	4798      	blx	r3
    33f4:	0003      	movs	r3, r0
    33f6:	e7f2      	b.n	33de <Parser_LoraSetAutoReply+0x16>
    33f8:	000043e9 	.word	0x000043e9
    33fc:	0001f8b4 	.word	0x0001f8b4
    3400:	000139e5 	.word	0x000139e5

00003404 <Parser_LoraGetAutoReply>:
{
    3404:	b530      	push	{r4, r5, lr}
    3406:	b083      	sub	sp, #12
    3408:	0005      	movs	r5, r0
    LORAWAN_GetAttr(AUTOREPLY, NULL, &arEnabled);
    340a:	466b      	mov	r3, sp
    340c:	1ddc      	adds	r4, r3, #7
    340e:	0022      	movs	r2, r4
    3410:	2100      	movs	r1, #0
    3412:	2016      	movs	r0, #22
    3414:	4b04      	ldr	r3, [pc, #16]	; (3428 <Parser_LoraGetAutoReply+0x24>)
    3416:	4798      	blx	r3
    pParserCmdInfo->pReplyCmd = (char*)gapParseOnOff[arEnabled];
    3418:	7823      	ldrb	r3, [r4, #0]
    341a:	009b      	lsls	r3, r3, #2
    341c:	4a03      	ldr	r2, [pc, #12]	; (342c <Parser_LoraGetAutoReply+0x28>)
    341e:	589b      	ldr	r3, [r3, r2]
    3420:	616b      	str	r3, [r5, #20]
}
    3422:	b003      	add	sp, #12
    3424:	bd30      	pop	{r4, r5, pc}
    3426:	46c0      	nop			; (mov r8, r8)
    3428:	000119a1 	.word	0x000119a1
    342c:	0001f894 	.word	0x0001f894

00003430 <Parser_LoraSetRxDelay1>:
{
    3430:	b510      	push	{r4, lr}
    3432:	b082      	sub	sp, #8
    3434:	0004      	movs	r4, r0
    uint16_t rxDelay1 = atoi(pParserCmdInfo->pParam1);
    3436:	6800      	ldr	r0, [r0, #0]
    3438:	4b0c      	ldr	r3, [pc, #48]	; (346c <Parser_LoraSetRxDelay1+0x3c>)
    343a:	4798      	blx	r3
    343c:	466b      	mov	r3, sp
    343e:	80d8      	strh	r0, [r3, #6]
    if(Validate_UintDecAsciiValue(pParserCmdInfo->pParam1, 5, UINT16_MAX))
    3440:	4a0b      	ldr	r2, [pc, #44]	; (3470 <Parser_LoraSetRxDelay1+0x40>)
    3442:	2105      	movs	r1, #5
    3444:	6820      	ldr	r0, [r4, #0]
    3446:	4b0b      	ldr	r3, [pc, #44]	; (3474 <Parser_LoraSetRxDelay1+0x44>)
    3448:	4798      	blx	r3
    StackRetStatus_t status = LORAWAN_INVALID_PARAMETER;
    344a:	230a      	movs	r3, #10
    if(Validate_UintDecAsciiValue(pParserCmdInfo->pParam1, 5, UINT16_MAX))
    344c:	2800      	cmp	r0, #0
    344e:	d105      	bne.n	345c <Parser_LoraSetRxDelay1+0x2c>
    pParserCmdInfo->pReplyCmd = (char*)gapParserLorawanStatus[status];
    3450:	009b      	lsls	r3, r3, #2
    3452:	4a09      	ldr	r2, [pc, #36]	; (3478 <Parser_LoraSetRxDelay1+0x48>)
    3454:	589b      	ldr	r3, [r3, r2]
    3456:	6163      	str	r3, [r4, #20]
}
    3458:	b002      	add	sp, #8
    345a:	bd10      	pop	{r4, pc}
        status = LORAWAN_SetAttr(RX_DELAY1,&rxDelay1);        
    345c:	466b      	mov	r3, sp
    345e:	1d99      	adds	r1, r3, #6
    3460:	200c      	movs	r0, #12
    3462:	4b06      	ldr	r3, [pc, #24]	; (347c <Parser_LoraSetRxDelay1+0x4c>)
    3464:	4798      	blx	r3
    3466:	0003      	movs	r3, r0
    3468:	e7f2      	b.n	3450 <Parser_LoraSetRxDelay1+0x20>
    346a:	46c0      	nop			; (mov r8, r8)
    346c:	000196b1 	.word	0x000196b1
    3470:	0000ffff 	.word	0x0000ffff
    3474:	00004315 	.word	0x00004315
    3478:	0001f8b4 	.word	0x0001f8b4
    347c:	000139e5 	.word	0x000139e5

00003480 <Parser_LoraGetRxDelay1>:
{
    3480:	b570      	push	{r4, r5, r6, lr}
    3482:	b082      	sub	sp, #8
    3484:	0006      	movs	r6, r0
    LORAWAN_GetAttr(RX_DELAY1,NULL,&rxDelay1);
    3486:	466b      	mov	r3, sp
    3488:	1d9d      	adds	r5, r3, #6
    348a:	002a      	movs	r2, r5
    348c:	2100      	movs	r1, #0
    348e:	200c      	movs	r0, #12
    3490:	4b05      	ldr	r3, [pc, #20]	; (34a8 <Parser_LoraGetRxDelay1+0x28>)
    3492:	4798      	blx	r3
    utoa(rxDelay1, aParserData, 10);
    3494:	4c05      	ldr	r4, [pc, #20]	; (34ac <Parser_LoraGetRxDelay1+0x2c>)
    3496:	8828      	ldrh	r0, [r5, #0]
    3498:	220a      	movs	r2, #10
    349a:	0021      	movs	r1, r4
    349c:	4b04      	ldr	r3, [pc, #16]	; (34b0 <Parser_LoraGetRxDelay1+0x30>)
    349e:	4798      	blx	r3
    pParserCmdInfo->pReplyCmd = aParserData;
    34a0:	6174      	str	r4, [r6, #20]
}
    34a2:	b002      	add	sp, #8
    34a4:	bd70      	pop	{r4, r5, r6, pc}
    34a6:	46c0      	nop			; (mov r8, r8)
    34a8:	000119a1 	.word	0x000119a1
    34ac:	2000116c 	.word	0x2000116c
    34b0:	0001a6a5 	.word	0x0001a6a5

000034b4 <Parser_LoraGetRxDelay2>:
{
    34b4:	b570      	push	{r4, r5, r6, lr}
    34b6:	b082      	sub	sp, #8
    34b8:	0006      	movs	r6, r0
    LORAWAN_GetAttr(RX_DELAY2, NULL, &rxDelay2);
    34ba:	466b      	mov	r3, sp
    34bc:	1d9d      	adds	r5, r3, #6
    34be:	002a      	movs	r2, r5
    34c0:	2100      	movs	r1, #0
    34c2:	201e      	movs	r0, #30
    34c4:	4b05      	ldr	r3, [pc, #20]	; (34dc <Parser_LoraGetRxDelay2+0x28>)
    34c6:	4798      	blx	r3
    utoa(rxDelay2, aParserData, 10);
    34c8:	4c05      	ldr	r4, [pc, #20]	; (34e0 <Parser_LoraGetRxDelay2+0x2c>)
    34ca:	8828      	ldrh	r0, [r5, #0]
    34cc:	220a      	movs	r2, #10
    34ce:	0021      	movs	r1, r4
    34d0:	4b04      	ldr	r3, [pc, #16]	; (34e4 <Parser_LoraGetRxDelay2+0x30>)
    34d2:	4798      	blx	r3
    pParserCmdInfo->pReplyCmd = aParserData;
    34d4:	6174      	str	r4, [r6, #20]
}
    34d6:	b002      	add	sp, #8
    34d8:	bd70      	pop	{r4, r5, r6, pc}
    34da:	46c0      	nop			; (mov r8, r8)
    34dc:	000119a1 	.word	0x000119a1
    34e0:	2000116c 	.word	0x2000116c
    34e4:	0001a6a5 	.word	0x0001a6a5

000034e8 <Parser_LoraGetIsm>:
{
    34e8:	b530      	push	{r4, r5, lr}
    34ea:	b083      	sub	sp, #12
    34ec:	0005      	movs	r5, r0
    LORAWAN_GetAttr(ISMBAND, NULL, &ismBand);
    34ee:	466b      	mov	r3, sp
    34f0:	1ddc      	adds	r4, r3, #7
    34f2:	0022      	movs	r2, r4
    34f4:	2100      	movs	r1, #0
    34f6:	2023      	movs	r0, #35	; 0x23
    34f8:	4b04      	ldr	r3, [pc, #16]	; (350c <Parser_LoraGetIsm+0x24>)
    34fa:	4798      	blx	r3
    pParserCmdInfo->pReplyCmd = (char*)gapParseIsmBand[ismBand];
    34fc:	7823      	ldrb	r3, [r4, #0]
    34fe:	009b      	lsls	r3, r3, #2
    3500:	4a03      	ldr	r2, [pc, #12]	; (3510 <Parser_LoraGetIsm+0x28>)
    3502:	589b      	ldr	r3, [r3, r2]
    3504:	616b      	str	r3, [r5, #20]
}
    3506:	b003      	add	sp, #12
    3508:	bd30      	pop	{r4, r5, pc}
    350a:	46c0      	nop			; (mov r8, r8)
    350c:	000119a1 	.word	0x000119a1
    3510:	0001f840 	.word	0x0001f840

00003514 <Parser_LoraSetClass>:
{
    3514:	b510      	push	{r4, lr}
    3516:	b082      	sub	sp, #8
    3518:	0004      	movs	r4, r0
	if ((pParserCmdInfo->pParam1[0] == 'A') || (pParserCmdInfo->pParam1[0] == 'a'))
    351a:	6803      	ldr	r3, [r0, #0]
    351c:	781b      	ldrb	r3, [r3, #0]
    351e:	2220      	movs	r2, #32
    3520:	4393      	bics	r3, r2
    3522:	2b41      	cmp	r3, #65	; 0x41
    3524:	d008      	beq.n	3538 <Parser_LoraSetClass+0x24>
	uint8_t statusIdx = LORAWAN_INVALID_PARAMETER;
    3526:	200a      	movs	r0, #10
	else if ((pParserCmdInfo->pParam1[0] == 'C') || (pParserCmdInfo->pParam1[0] == 'c'))
    3528:	2b43      	cmp	r3, #67	; 0x43
    352a:	d00d      	beq.n	3548 <Parser_LoraSetClass+0x34>
	pParserCmdInfo->pReplyCmd = (char*)gapParserLorawanStatus[statusIdx];
    352c:	0080      	lsls	r0, r0, #2
    352e:	4b0a      	ldr	r3, [pc, #40]	; (3558 <Parser_LoraSetClass+0x44>)
    3530:	58c3      	ldr	r3, [r0, r3]
    3532:	6163      	str	r3, [r4, #20]
}
    3534:	b002      	add	sp, #8
    3536:	bd10      	pop	{r4, pc}
		edClass = CLASS_A;
    3538:	466b      	mov	r3, sp
    353a:	1dd9      	adds	r1, r3, #7
    353c:	2301      	movs	r3, #1
    353e:	700b      	strb	r3, [r1, #0]
		statusIdx = LORAWAN_SetAttr(EDCLASS, &edClass);
    3540:	2019      	movs	r0, #25
    3542:	4b06      	ldr	r3, [pc, #24]	; (355c <Parser_LoraSetClass+0x48>)
    3544:	4798      	blx	r3
    3546:	e7f1      	b.n	352c <Parser_LoraSetClass+0x18>
		edClass = CLASS_C;
    3548:	466b      	mov	r3, sp
    354a:	1dd9      	adds	r1, r3, #7
    354c:	2304      	movs	r3, #4
    354e:	700b      	strb	r3, [r1, #0]
		statusIdx = LORAWAN_SetAttr(EDCLASS, &edClass);
    3550:	300f      	adds	r0, #15
    3552:	4b02      	ldr	r3, [pc, #8]	; (355c <Parser_LoraSetClass+0x48>)
    3554:	4798      	blx	r3
    3556:	e7e9      	b.n	352c <Parser_LoraSetClass+0x18>
    3558:	0001f8b4 	.word	0x0001f8b4
    355c:	000139e5 	.word	0x000139e5

00003560 <Parser_LoraGetClass>:
{
    3560:	b530      	push	{r4, r5, lr}
    3562:	b083      	sub	sp, #12
    3564:	0005      	movs	r5, r0
	LORAWAN_GetAttr(EDCLASS, NULL, &edClass);
    3566:	466b      	mov	r3, sp
    3568:	1ddc      	adds	r4, r3, #7
    356a:	0022      	movs	r2, r4
    356c:	2100      	movs	r1, #0
    356e:	2019      	movs	r0, #25
    3570:	4b0a      	ldr	r3, [pc, #40]	; (359c <Parser_LoraGetClass+0x3c>)
    3572:	4798      	blx	r3
	switch (edClass)
    3574:	7823      	ldrb	r3, [r4, #0]
    3576:	2b02      	cmp	r3, #2
    3578:	d005      	beq.n	3586 <Parser_LoraGetClass+0x26>
    357a:	2b04      	cmp	r3, #4
    357c:	d00a      	beq.n	3594 <Parser_LoraGetClass+0x34>
    357e:	2b01      	cmp	r3, #1
    3580:	d00a      	beq.n	3598 <Parser_LoraGetClass+0x38>
			index = 3;
    3582:	2303      	movs	r3, #3
		break;
    3584:	e000      	b.n	3588 <Parser_LoraGetClass+0x28>
			index = 1;
    3586:	2301      	movs	r3, #1
	pParserCmdInfo->pReplyCmd = (char *)gapParserEdClass[index];
    3588:	009b      	lsls	r3, r3, #2
    358a:	4a05      	ldr	r2, [pc, #20]	; (35a0 <Parser_LoraGetClass+0x40>)
    358c:	589b      	ldr	r3, [r3, r2]
    358e:	616b      	str	r3, [r5, #20]
}
    3590:	b003      	add	sp, #12
    3592:	bd30      	pop	{r4, r5, pc}
			index = 2;
    3594:	2302      	movs	r3, #2
		break;
    3596:	e7f7      	b.n	3588 <Parser_LoraGetClass+0x28>
			index = 0;
    3598:	2300      	movs	r3, #0
    359a:	e7f5      	b.n	3588 <Parser_LoraGetClass+0x28>
    359c:	000119a1 	.word	0x000119a1
    35a0:	0001f8a4 	.word	0x0001f8a4

000035a4 <Parser_LoraGetSupportedEdClass>:
{
    35a4:	b530      	push	{r4, r5, lr}
    35a6:	b083      	sub	sp, #12
    35a8:	0005      	movs	r5, r0
	LORAWAN_GetAttr(EDCLASS_SUPPORTED, NULL, &edClassSupported);
    35aa:	466b      	mov	r3, sp
    35ac:	1ddc      	adds	r4, r3, #7
    35ae:	0022      	movs	r2, r4
    35b0:	2100      	movs	r1, #0
    35b2:	2024      	movs	r0, #36	; 0x24
    35b4:	4b11      	ldr	r3, [pc, #68]	; (35fc <Parser_LoraGetSupportedEdClass+0x58>)
    35b6:	4798      	blx	r3
	if ((CLASS_A | CLASS_B) == edClassSupported)
    35b8:	7823      	ldrb	r3, [r4, #0]
    35ba:	2b03      	cmp	r3, #3
    35bc:	d00a      	beq.n	35d4 <Parser_LoraGetSupportedEdClass+0x30>
	else if  ((CLASS_A | CLASS_C) == edClassSupported)
    35be:	2b05      	cmp	r3, #5
    35c0:	d012      	beq.n	35e8 <Parser_LoraGetSupportedEdClass+0x44>
		aParserData[0] = 'A';
    35c2:	4b0f      	ldr	r3, [pc, #60]	; (3600 <Parser_LoraGetSupportedEdClass+0x5c>)
    35c4:	2241      	movs	r2, #65	; 0x41
    35c6:	701a      	strb	r2, [r3, #0]
		aParserData[1] = '\0';
    35c8:	2200      	movs	r2, #0
    35ca:	705a      	strb	r2, [r3, #1]
 	pParserCmdInfo->pReplyCmd = aParserData;
    35cc:	4b0c      	ldr	r3, [pc, #48]	; (3600 <Parser_LoraGetSupportedEdClass+0x5c>)
    35ce:	616b      	str	r3, [r5, #20]
}
    35d0:	b003      	add	sp, #12
    35d2:	bd30      	pop	{r4, r5, pc}
		aParserData[0] = 'A';
    35d4:	4b0a      	ldr	r3, [pc, #40]	; (3600 <Parser_LoraGetSupportedEdClass+0x5c>)
    35d6:	2241      	movs	r2, #65	; 0x41
    35d8:	701a      	strb	r2, [r3, #0]
		aParserData[1] = '&';
    35da:	3a1b      	subs	r2, #27
    35dc:	705a      	strb	r2, [r3, #1]
		aParserData[2] = 'B';
    35de:	321c      	adds	r2, #28
    35e0:	709a      	strb	r2, [r3, #2]
		aParserData[3] = '\0';
    35e2:	2200      	movs	r2, #0
    35e4:	70da      	strb	r2, [r3, #3]
    35e6:	e7f1      	b.n	35cc <Parser_LoraGetSupportedEdClass+0x28>
		aParserData[0] = 'A';
    35e8:	4b05      	ldr	r3, [pc, #20]	; (3600 <Parser_LoraGetSupportedEdClass+0x5c>)
    35ea:	2241      	movs	r2, #65	; 0x41
    35ec:	701a      	strb	r2, [r3, #0]
		aParserData[1] = '&';
    35ee:	3a1b      	subs	r2, #27
    35f0:	705a      	strb	r2, [r3, #1]
		aParserData[2] = 'C';
    35f2:	321d      	adds	r2, #29
    35f4:	709a      	strb	r2, [r3, #2]
	    aParserData[3] = '\0';
    35f6:	2200      	movs	r2, #0
    35f8:	70da      	strb	r2, [r3, #3]
    35fa:	e7e7      	b.n	35cc <Parser_LoraGetSupportedEdClass+0x28>
    35fc:	000119a1 	.word	0x000119a1
    3600:	2000116c 	.word	0x2000116c

00003604 <Parser_LoraSetMcast>:
{
    3604:	b510      	push	{r4, lr}
    3606:	0004      	movs	r4, r0
	validationVal = Validate_OnOffAsciiValue(pParserCmdInfo->pParam1);
    3608:	6800      	ldr	r0, [r0, #0]
    360a:	4b05      	ldr	r3, [pc, #20]	; (3620 <Parser_LoraSetMcast+0x1c>)
    360c:	4798      	blx	r3
	if (validationVal < 2U)
    360e:	2801      	cmp	r0, #1
    3610:	d902      	bls.n	3618 <Parser_LoraSetMcast+0x14>
	pParserCmdInfo->pReplyCmd = (char*)gapParserLorawanStatus[returnVal];
    3612:	4b04      	ldr	r3, [pc, #16]	; (3624 <Parser_LoraSetMcast+0x20>)
    3614:	6163      	str	r3, [r4, #20]
}
    3616:	bd10      	pop	{r4, pc}
		mcastStatus.groupId = atoi(pParserCmdInfo->pParam2);
    3618:	6860      	ldr	r0, [r4, #4]
    361a:	4b03      	ldr	r3, [pc, #12]	; (3628 <Parser_LoraSetMcast+0x24>)
    361c:	4798      	blx	r3
    361e:	e7f8      	b.n	3612 <Parser_LoraSetMcast+0xe>
    3620:	000043e9 	.word	0x000043e9
    3624:	0001f644 	.word	0x0001f644
    3628:	000196b1 	.word	0x000196b1

0000362c <Parser_LoraGetMcast>:
{
    362c:	b510      	push	{r4, lr}
    362e:	b082      	sub	sp, #8
    3630:	0004      	movs	r4, r0
	uint8_t groupId = atoi(pParserCmdInfo->pParam1);
    3632:	6800      	ldr	r0, [r0, #0]
    3634:	4b0c      	ldr	r3, [pc, #48]	; (3668 <Parser_LoraGetMcast+0x3c>)
    3636:	4798      	blx	r3
    3638:	466b      	mov	r3, sp
    363a:	1d99      	adds	r1, r3, #6
    363c:	7008      	strb	r0, [r1, #0]
	status = LORAWAN_GetAttr(MCAST_ENABLE, &groupId, &mcastStatus);
    363e:	1dda      	adds	r2, r3, #7
    3640:	2028      	movs	r0, #40	; 0x28
    3642:	4b0a      	ldr	r3, [pc, #40]	; (366c <Parser_LoraGetMcast+0x40>)
    3644:	4798      	blx	r3
	if(status == LORAWAN_SUCCESS)
    3646:	2808      	cmp	r0, #8
    3648:	d005      	beq.n	3656 <Parser_LoraGetMcast+0x2a>
		pParserCmdInfo->pReplyCmd = (char*)gapParserLorawanStatus[status];
    364a:	0080      	lsls	r0, r0, #2
    364c:	4b08      	ldr	r3, [pc, #32]	; (3670 <Parser_LoraGetMcast+0x44>)
    364e:	58c3      	ldr	r3, [r0, r3]
    3650:	6163      	str	r3, [r4, #20]
}
    3652:	b002      	add	sp, #8
    3654:	bd10      	pop	{r4, pc}
		pParserCmdInfo->pReplyCmd = (char*)gapParseOnOff[mcastStatus];
    3656:	466b      	mov	r3, sp
    3658:	3307      	adds	r3, #7
    365a:	781b      	ldrb	r3, [r3, #0]
    365c:	009b      	lsls	r3, r3, #2
    365e:	4a05      	ldr	r2, [pc, #20]	; (3674 <Parser_LoraGetMcast+0x48>)
    3660:	589b      	ldr	r3, [r3, r2]
    3662:	6163      	str	r3, [r4, #20]
    3664:	e7f5      	b.n	3652 <Parser_LoraGetMcast+0x26>
    3666:	46c0      	nop			; (mov r8, r8)
    3668:	000196b1 	.word	0x000196b1
    366c:	000119a1 	.word	0x000119a1
    3670:	0001f8b4 	.word	0x0001f8b4
    3674:	0001f894 	.word	0x0001f894

00003678 <Parser_LoraGetMcastDownCounter>:
{
    3678:	b570      	push	{r4, r5, r6, lr}
    367a:	b082      	sub	sp, #8
    367c:	0005      	movs	r5, r0
	uint8_t groupId = atoi(pParserCmdInfo->pParam1);
    367e:	6800      	ldr	r0, [r0, #0]
    3680:	4b0c      	ldr	r3, [pc, #48]	; (36b4 <Parser_LoraGetMcastDownCounter+0x3c>)
    3682:	4798      	blx	r3
    3684:	466b      	mov	r3, sp
    3686:	1cd9      	adds	r1, r3, #3
    3688:	7008      	strb	r0, [r1, #0]
	status = LORAWAN_GetAttr(MCAST_FCNT_DOWN, &groupId, &ctr);
    368a:	aa01      	add	r2, sp, #4
    368c:	202c      	movs	r0, #44	; 0x2c
    368e:	4b0a      	ldr	r3, [pc, #40]	; (36b8 <Parser_LoraGetMcastDownCounter+0x40>)
    3690:	4798      	blx	r3
    3692:	0004      	movs	r4, r0
	ultoa(aParserData, ctr, 10U);
    3694:	220a      	movs	r2, #10
    3696:	9901      	ldr	r1, [sp, #4]
    3698:	4808      	ldr	r0, [pc, #32]	; (36bc <Parser_LoraGetMcastDownCounter+0x44>)
    369a:	4b09      	ldr	r3, [pc, #36]	; (36c0 <Parser_LoraGetMcastDownCounter+0x48>)
    369c:	4798      	blx	r3
	if(status == LORAWAN_SUCCESS)
    369e:	2c08      	cmp	r4, #8
    36a0:	d005      	beq.n	36ae <Parser_LoraGetMcastDownCounter+0x36>
		pParserCmdInfo->pReplyCmd = (char*)gapParserLorawanStatus[status];
    36a2:	00a4      	lsls	r4, r4, #2
    36a4:	4b07      	ldr	r3, [pc, #28]	; (36c4 <Parser_LoraGetMcastDownCounter+0x4c>)
    36a6:	58e3      	ldr	r3, [r4, r3]
    36a8:	616b      	str	r3, [r5, #20]
}
    36aa:	b002      	add	sp, #8
    36ac:	bd70      	pop	{r4, r5, r6, pc}
		pParserCmdInfo->pReplyCmd = aParserData;
    36ae:	4b03      	ldr	r3, [pc, #12]	; (36bc <Parser_LoraGetMcastDownCounter+0x44>)
    36b0:	616b      	str	r3, [r5, #20]
    36b2:	e7fa      	b.n	36aa <Parser_LoraGetMcastDownCounter+0x32>
    36b4:	000196b1 	.word	0x000196b1
    36b8:	000119a1 	.word	0x000119a1
    36bc:	2000116c 	.word	0x2000116c
    36c0:	00004299 	.word	0x00004299
    36c4:	0001f8b4 	.word	0x0001f8b4

000036c8 <Parser_LoraSetMcastDevAddr>:
{
    36c8:	b510      	push	{r4, lr}
    36ca:	b082      	sub	sp, #8
    36cc:	0004      	movs	r4, r0
	if(Validate_HexValue(pParserCmdInfo->pParam1))
    36ce:	6800      	ldr	r0, [r0, #0]
    36d0:	4b0b      	ldr	r3, [pc, #44]	; (3700 <Parser_LoraSetMcastDevAddr+0x38>)
    36d2:	4798      	blx	r3
    36d4:	2800      	cmp	r0, #0
    36d6:	d103      	bne.n	36e0 <Parser_LoraSetMcastDevAddr+0x18>
	pParserCmdInfo->pReplyCmd = (char*)gapParserLorawanStatus[statusIdx];
    36d8:	4b0a      	ldr	r3, [pc, #40]	; (3704 <Parser_LoraSetMcastDevAddr+0x3c>)
    36da:	6163      	str	r3, [r4, #20]
}
    36dc:	b002      	add	sp, #8
    36de:	bd10      	pop	{r4, pc}
		if(Parser_HexAsciiToInt(sizeof(devMultiAddr) << 1, pParserCmdInfo->pParam1, tempBuff))
    36e0:	aa01      	add	r2, sp, #4
    36e2:	6821      	ldr	r1, [r4, #0]
    36e4:	2008      	movs	r0, #8
    36e6:	4b08      	ldr	r3, [pc, #32]	; (3708 <Parser_LoraSetMcastDevAddr+0x40>)
    36e8:	4798      	blx	r3
    36ea:	2800      	cmp	r0, #0
    36ec:	d0f4      	beq.n	36d8 <Parser_LoraSetMcastDevAddr+0x10>
			addr.groupId = atoi(pParserCmdInfo->pParam2);
    36ee:	6860      	ldr	r0, [r4, #4]
    36f0:	4b06      	ldr	r3, [pc, #24]	; (370c <Parser_LoraSetMcastDevAddr+0x44>)
    36f2:	4798      	blx	r3
			gParserConfiguredJoinParameters.flags.mcastdevaddr = 1;
    36f4:	4a06      	ldr	r2, [pc, #24]	; (3710 <Parser_LoraSetMcastDevAddr+0x48>)
    36f6:	7813      	ldrb	r3, [r2, #0]
    36f8:	2140      	movs	r1, #64	; 0x40
    36fa:	430b      	orrs	r3, r1
    36fc:	7013      	strb	r3, [r2, #0]
    36fe:	e7eb      	b.n	36d8 <Parser_LoraSetMcastDevAddr+0x10>
    3700:	000041ad 	.word	0x000041ad
    3704:	0001f644 	.word	0x0001f644
    3708:	000044b5 	.word	0x000044b5
    370c:	000196b1 	.word	0x000196b1
    3710:	20001f88 	.word	0x20001f88

00003714 <Parser_LoraGetMcastDevAddr>:
{
    3714:	b530      	push	{r4, r5, lr}
    3716:	b085      	sub	sp, #20
    3718:	0004      	movs	r4, r0
	uint8_t groupId = atoi(pParserCmdInfo->pParam1);
    371a:	6800      	ldr	r0, [r0, #0]
    371c:	4b10      	ldr	r3, [pc, #64]	; (3760 <Parser_LoraGetMcastDevAddr+0x4c>)
    371e:	4798      	blx	r3
    3720:	466b      	mov	r3, sp
    3722:	1dd9      	adds	r1, r3, #7
    3724:	7008      	strb	r0, [r1, #0]
	status = LORAWAN_GetAttr(MCAST_GROUP_ADDR, &groupId, &devMultiAddr);
    3726:	aa03      	add	r2, sp, #12
    3728:	2029      	movs	r0, #41	; 0x29
    372a:	4b0e      	ldr	r3, [pc, #56]	; (3764 <Parser_LoraGetMcastDevAddr+0x50>)
    372c:	4798      	blx	r3
	tempBuff[3] = (uint8_t)devMultiAddr;
    372e:	9b03      	ldr	r3, [sp, #12]
    3730:	aa02      	add	r2, sp, #8
    3732:	70d3      	strb	r3, [r2, #3]
	tempBuff[2] = (uint8_t)(devMultiAddr >> 8);
    3734:	0a19      	lsrs	r1, r3, #8
    3736:	7091      	strb	r1, [r2, #2]
	tempBuff[1] = (uint8_t)(devMultiAddr >> 16);
    3738:	0c19      	lsrs	r1, r3, #16
    373a:	7051      	strb	r1, [r2, #1]
	tempBuff[0] = (uint8_t)(devMultiAddr >> 24);
    373c:	0e1b      	lsrs	r3, r3, #24
    373e:	7013      	strb	r3, [r2, #0]
	if (status == LORAWAN_SUCCESS)
    3740:	2808      	cmp	r0, #8
    3742:	d005      	beq.n	3750 <Parser_LoraGetMcastDevAddr+0x3c>
		pParserCmdInfo->pReplyCmd = (char*)gapParserLorawanStatus[status];
    3744:	0080      	lsls	r0, r0, #2
    3746:	4b08      	ldr	r3, [pc, #32]	; (3768 <Parser_LoraGetMcastDevAddr+0x54>)
    3748:	58c3      	ldr	r3, [r0, r3]
    374a:	6163      	str	r3, [r4, #20]
}
    374c:	b005      	add	sp, #20
    374e:	bd30      	pop	{r4, r5, pc}
		Parser_IntArrayToHexAscii(4, tempBuff, aParserData);
    3750:	4d06      	ldr	r5, [pc, #24]	; (376c <Parser_LoraGetMcastDevAddr+0x58>)
    3752:	002a      	movs	r2, r5
    3754:	a902      	add	r1, sp, #8
    3756:	3804      	subs	r0, #4
    3758:	4b05      	ldr	r3, [pc, #20]	; (3770 <Parser_LoraGetMcastDevAddr+0x5c>)
    375a:	4798      	blx	r3
		pParserCmdInfo->pReplyCmd = aParserData;
    375c:	6165      	str	r5, [r4, #20]
    375e:	e7f5      	b.n	374c <Parser_LoraGetMcastDevAddr+0x38>
    3760:	000196b1 	.word	0x000196b1
    3764:	000119a1 	.word	0x000119a1
    3768:	0001f8b4 	.word	0x0001f8b4
    376c:	2000116c 	.word	0x2000116c
    3770:	000041e1 	.word	0x000041e1

00003774 <Parser_LoraSetMcastNwksKey>:
{
    3774:	b510      	push	{r4, lr}
    3776:	b086      	sub	sp, #24
    3778:	0004      	movs	r4, r0
	if(Validate_HexValue(pParserCmdInfo->pParam1))
    377a:	6800      	ldr	r0, [r0, #0]
    377c:	4b0c      	ldr	r3, [pc, #48]	; (37b0 <Parser_LoraSetMcastNwksKey+0x3c>)
    377e:	4798      	blx	r3
    3780:	2800      	cmp	r0, #0
    3782:	d103      	bne.n	378c <Parser_LoraSetMcastNwksKey+0x18>
	pParserCmdInfo->pReplyCmd = (char*)gapParserLorawanStatus[statusIdx];
    3784:	4b0b      	ldr	r3, [pc, #44]	; (37b4 <Parser_LoraSetMcastNwksKey+0x40>)
    3786:	6163      	str	r3, [r4, #20]
}
    3788:	b006      	add	sp, #24
    378a:	bd10      	pop	{r4, pc}
		if(Parser_HexAsciiToInt(32U, pParserCmdInfo->pParam1, (uint8_t *)(key.mcastNwkSKey)))
    378c:	466b      	mov	r3, sp
    378e:	1d5a      	adds	r2, r3, #5
    3790:	6821      	ldr	r1, [r4, #0]
    3792:	2020      	movs	r0, #32
    3794:	4b08      	ldr	r3, [pc, #32]	; (37b8 <Parser_LoraSetMcastNwksKey+0x44>)
    3796:	4798      	blx	r3
    3798:	2800      	cmp	r0, #0
    379a:	d0f3      	beq.n	3784 <Parser_LoraSetMcastNwksKey+0x10>
			key.groupId = atoi(pParserCmdInfo->pParam2);
    379c:	6860      	ldr	r0, [r4, #4]
    379e:	4b07      	ldr	r3, [pc, #28]	; (37bc <Parser_LoraSetMcastNwksKey+0x48>)
    37a0:	4798      	blx	r3
			gParserConfiguredJoinParameters.flags.mcastnwkskey = 1;
    37a2:	4a07      	ldr	r2, [pc, #28]	; (37c0 <Parser_LoraSetMcastNwksKey+0x4c>)
    37a4:	7811      	ldrb	r1, [r2, #0]
    37a6:	2380      	movs	r3, #128	; 0x80
    37a8:	425b      	negs	r3, r3
    37aa:	430b      	orrs	r3, r1
    37ac:	7013      	strb	r3, [r2, #0]
    37ae:	e7e9      	b.n	3784 <Parser_LoraSetMcastNwksKey+0x10>
    37b0:	000041ad 	.word	0x000041ad
    37b4:	0001f644 	.word	0x0001f644
    37b8:	000044b5 	.word	0x000044b5
    37bc:	000196b1 	.word	0x000196b1
    37c0:	20001f88 	.word	0x20001f88

000037c4 <Parser_LoraSetMcastAppsKey>:
{
    37c4:	b510      	push	{r4, lr}
    37c6:	b086      	sub	sp, #24
    37c8:	0004      	movs	r4, r0
	if(Validate_HexValue(pParserCmdInfo->pParam1))
    37ca:	6800      	ldr	r0, [r0, #0]
    37cc:	4b0c      	ldr	r3, [pc, #48]	; (3800 <Parser_LoraSetMcastAppsKey+0x3c>)
    37ce:	4798      	blx	r3
    37d0:	2800      	cmp	r0, #0
    37d2:	d103      	bne.n	37dc <Parser_LoraSetMcastAppsKey+0x18>
	pParserCmdInfo->pReplyCmd = (char*)gapParserLorawanStatus[statusIdx];
    37d4:	4b0b      	ldr	r3, [pc, #44]	; (3804 <Parser_LoraSetMcastAppsKey+0x40>)
    37d6:	6163      	str	r3, [r4, #20]
}
    37d8:	b006      	add	sp, #24
    37da:	bd10      	pop	{r4, pc}
		if(Parser_HexAsciiToInt(32U, pParserCmdInfo->pParam1,(uint8_t *)(key.mcastNwkSKey)))
    37dc:	466b      	mov	r3, sp
    37de:	1d5a      	adds	r2, r3, #5
    37e0:	6821      	ldr	r1, [r4, #0]
    37e2:	2020      	movs	r0, #32
    37e4:	4b08      	ldr	r3, [pc, #32]	; (3808 <Parser_LoraSetMcastAppsKey+0x44>)
    37e6:	4798      	blx	r3
    37e8:	2800      	cmp	r0, #0
    37ea:	d0f3      	beq.n	37d4 <Parser_LoraSetMcastAppsKey+0x10>
			key.groupId = atoi(pParserCmdInfo->pParam2);			
    37ec:	6860      	ldr	r0, [r4, #4]
    37ee:	4b07      	ldr	r3, [pc, #28]	; (380c <Parser_LoraSetMcastAppsKey+0x48>)
    37f0:	4798      	blx	r3
			gParserConfiguredJoinParameters.flags.mcastappskey = 1;
    37f2:	4a07      	ldr	r2, [pc, #28]	; (3810 <Parser_LoraSetMcastAppsKey+0x4c>)
    37f4:	7853      	ldrb	r3, [r2, #1]
    37f6:	2101      	movs	r1, #1
    37f8:	430b      	orrs	r3, r1
    37fa:	7053      	strb	r3, [r2, #1]
    37fc:	e7ea      	b.n	37d4 <Parser_LoraSetMcastAppsKey+0x10>
    37fe:	46c0      	nop			; (mov r8, r8)
    3800:	000041ad 	.word	0x000041ad
    3804:	0001f644 	.word	0x0001f644
    3808:	000044b5 	.word	0x000044b5
    380c:	000196b1 	.word	0x000196b1
    3810:	20001f88 	.word	0x20001f88

00003814 <Parser_LoraSetMcastFreq>:
{
    3814:	b510      	push	{r4, lr}
    3816:	0004      	movs	r4, r0
	key.dlFrequency = strtoul(pParserCmdInfo->pParam1, NULL, 10);
    3818:	220a      	movs	r2, #10
    381a:	2100      	movs	r1, #0
    381c:	6800      	ldr	r0, [r0, #0]
    381e:	4b0b      	ldr	r3, [pc, #44]	; (384c <Parser_LoraSetMcastFreq+0x38>)
    3820:	4798      	blx	r3
	  if(Validate_UintDecAsciiValue(pParserCmdInfo->pParam1, 10, UINT32_MAX))
    3822:	2201      	movs	r2, #1
    3824:	4252      	negs	r2, r2
    3826:	210a      	movs	r1, #10
    3828:	6820      	ldr	r0, [r4, #0]
    382a:	4b09      	ldr	r3, [pc, #36]	; (3850 <Parser_LoraSetMcastFreq+0x3c>)
    382c:	4798      	blx	r3
    382e:	2800      	cmp	r0, #0
    3830:	d102      	bne.n	3838 <Parser_LoraSetMcastFreq+0x24>
	 pParserCmdInfo->pReplyCmd = (char*)gapParserLorawanStatus[statusIdx];
    3832:	4b08      	ldr	r3, [pc, #32]	; (3854 <Parser_LoraSetMcastFreq+0x40>)
    3834:	6163      	str	r3, [r4, #20]
}
    3836:	bd10      	pop	{r4, pc}
		  key.groupId = atoi(pParserCmdInfo->pParam2);
    3838:	6860      	ldr	r0, [r4, #4]
    383a:	4b07      	ldr	r3, [pc, #28]	; (3858 <Parser_LoraSetMcastFreq+0x44>)
    383c:	4798      	blx	r3
		  gParserConfiguredJoinParameters.flags.mcastfreq = 1;
    383e:	4a07      	ldr	r2, [pc, #28]	; (385c <Parser_LoraSetMcastFreq+0x48>)
    3840:	7853      	ldrb	r3, [r2, #1]
    3842:	2102      	movs	r1, #2
    3844:	430b      	orrs	r3, r1
    3846:	7053      	strb	r3, [r2, #1]
    3848:	e7f3      	b.n	3832 <Parser_LoraSetMcastFreq+0x1e>
    384a:	46c0      	nop			; (mov r8, r8)
    384c:	0001a5ed 	.word	0x0001a5ed
    3850:	00004315 	.word	0x00004315
    3854:	0001f644 	.word	0x0001f644
    3858:	000196b1 	.word	0x000196b1
    385c:	20001f88 	.word	0x20001f88

00003860 <Parser_LoraGetMcastFreq>:
{
    3860:	b570      	push	{r4, r5, r6, lr}
    3862:	b082      	sub	sp, #8
    3864:	0005      	movs	r5, r0
  uint8_t groupId = atoi(pParserCmdInfo->pParam1);
    3866:	6800      	ldr	r0, [r0, #0]
    3868:	4b0c      	ldr	r3, [pc, #48]	; (389c <Parser_LoraGetMcastFreq+0x3c>)
    386a:	4798      	blx	r3
    386c:	466b      	mov	r3, sp
    386e:	1cd9      	adds	r1, r3, #3
    3870:	7008      	strb	r0, [r1, #0]
  status = LORAWAN_GetAttr(MCAST_FREQUENCY,&groupId,&freq);
    3872:	aa01      	add	r2, sp, #4
    3874:	202f      	movs	r0, #47	; 0x2f
    3876:	4b0a      	ldr	r3, [pc, #40]	; (38a0 <Parser_LoraGetMcastFreq+0x40>)
    3878:	4798      	blx	r3
    387a:	0004      	movs	r4, r0
  ultoa(aParserData, freq, 10U);
    387c:	220a      	movs	r2, #10
    387e:	9901      	ldr	r1, [sp, #4]
    3880:	4808      	ldr	r0, [pc, #32]	; (38a4 <Parser_LoraGetMcastFreq+0x44>)
    3882:	4b09      	ldr	r3, [pc, #36]	; (38a8 <Parser_LoraGetMcastFreq+0x48>)
    3884:	4798      	blx	r3
  if(status == LORAWAN_SUCCESS)
    3886:	2c08      	cmp	r4, #8
    3888:	d005      	beq.n	3896 <Parser_LoraGetMcastFreq+0x36>
	  pParserCmdInfo->pReplyCmd = (char*)gapParserLorawanStatus[status];
    388a:	00a4      	lsls	r4, r4, #2
    388c:	4b07      	ldr	r3, [pc, #28]	; (38ac <Parser_LoraGetMcastFreq+0x4c>)
    388e:	58e3      	ldr	r3, [r4, r3]
    3890:	616b      	str	r3, [r5, #20]
}
    3892:	b002      	add	sp, #8
    3894:	bd70      	pop	{r4, r5, r6, pc}
	  pParserCmdInfo->pReplyCmd = aParserData;
    3896:	4b03      	ldr	r3, [pc, #12]	; (38a4 <Parser_LoraGetMcastFreq+0x44>)
    3898:	616b      	str	r3, [r5, #20]
    389a:	e7fa      	b.n	3892 <Parser_LoraGetMcastFreq+0x32>
    389c:	000196b1 	.word	0x000196b1
    38a0:	000119a1 	.word	0x000119a1
    38a4:	2000116c 	.word	0x2000116c
    38a8:	00004299 	.word	0x00004299
    38ac:	0001f8b4 	.word	0x0001f8b4

000038b0 <Parser_LoraSetMcastDr>:
{
    38b0:	b510      	push	{r4, lr}
    38b2:	b082      	sub	sp, #8
    38b4:	0004      	movs	r4, r0
	if(Validate_Uint8DecAsciiValue(pParserCmdInfo->pParam1, &(key.datarate)))
    38b6:	466b      	mov	r3, sp
    38b8:	1d59      	adds	r1, r3, #5
    38ba:	6800      	ldr	r0, [r0, #0]
    38bc:	4b05      	ldr	r3, [pc, #20]	; (38d4 <Parser_LoraSetMcastDr+0x24>)
    38be:	4798      	blx	r3
    38c0:	2800      	cmp	r0, #0
    38c2:	d103      	bne.n	38cc <Parser_LoraSetMcastDr+0x1c>
	pParserCmdInfo->pReplyCmd = (char*)gapParserLorawanStatus[statusIdx];
    38c4:	4b04      	ldr	r3, [pc, #16]	; (38d8 <Parser_LoraSetMcastDr+0x28>)
    38c6:	6163      	str	r3, [r4, #20]
}
    38c8:	b002      	add	sp, #8
    38ca:	bd10      	pop	{r4, pc}
		key.groupId = atoi(pParserCmdInfo->pParam2);
    38cc:	6860      	ldr	r0, [r4, #4]
    38ce:	4b03      	ldr	r3, [pc, #12]	; (38dc <Parser_LoraSetMcastDr+0x2c>)
    38d0:	4798      	blx	r3
    38d2:	e7f7      	b.n	38c4 <Parser_LoraSetMcastDr+0x14>
    38d4:	00004241 	.word	0x00004241
    38d8:	0001f644 	.word	0x0001f644
    38dc:	000196b1 	.word	0x000196b1

000038e0 <Parser_LoraGetMcastDr>:
{
    38e0:	b530      	push	{r4, r5, lr}
    38e2:	b083      	sub	sp, #12
    38e4:	0004      	movs	r4, r0
	uint8_t groupId = atoi(pParserCmdInfo->pParam1);
    38e6:	6800      	ldr	r0, [r0, #0]
    38e8:	4b0c      	ldr	r3, [pc, #48]	; (391c <Parser_LoraGetMcastDr+0x3c>)
    38ea:	4798      	blx	r3
    38ec:	466b      	mov	r3, sp
    38ee:	1d99      	adds	r1, r3, #6
    38f0:	7008      	strb	r0, [r1, #0]
	status = LORAWAN_GetAttr(MCAST_DATARATE,&groupId,&dr);
    38f2:	1dda      	adds	r2, r3, #7
    38f4:	2030      	movs	r0, #48	; 0x30
    38f6:	4b0a      	ldr	r3, [pc, #40]	; (3920 <Parser_LoraGetMcastDr+0x40>)
    38f8:	4798      	blx	r3
	if(status == LORAWAN_SUCCESS)
    38fa:	2808      	cmp	r0, #8
    38fc:	d005      	beq.n	390a <Parser_LoraGetMcastDr+0x2a>
	  pParserCmdInfo->pReplyCmd = (char*)gapParserLorawanStatus[status];	
    38fe:	0080      	lsls	r0, r0, #2
    3900:	4b08      	ldr	r3, [pc, #32]	; (3924 <Parser_LoraGetMcastDr+0x44>)
    3902:	58c3      	ldr	r3, [r0, r3]
    3904:	6163      	str	r3, [r4, #20]
}
    3906:	b003      	add	sp, #12
    3908:	bd30      	pop	{r4, r5, pc}
	   itoa(dr, aParserData, 10U);
    390a:	4d07      	ldr	r5, [pc, #28]	; (3928 <Parser_LoraGetMcastDr+0x48>)
    390c:	466b      	mov	r3, sp
    390e:	79d8      	ldrb	r0, [r3, #7]
    3910:	220a      	movs	r2, #10
    3912:	0029      	movs	r1, r5
    3914:	4b05      	ldr	r3, [pc, #20]	; (392c <Parser_LoraGetMcastDr+0x4c>)
    3916:	4798      	blx	r3
	   pParserCmdInfo->pReplyCmd = aParserData;
    3918:	6165      	str	r5, [r4, #20]
    391a:	e7f4      	b.n	3906 <Parser_LoraGetMcastDr+0x26>
    391c:	000196b1 	.word	0x000196b1
    3920:	000119a1 	.word	0x000119a1
    3924:	0001f8b4 	.word	0x0001f8b4
    3928:	2000116c 	.word	0x2000116c
    392c:	00019735 	.word	0x00019735

00003930 <Parser_LoraGetMacLastPacketRssi>:

void Parser_LoraGetMacLastPacketRssi(parserCmdInfo_t* pParserCmdInfo)
{
    3930:	b570      	push	{r4, r5, r6, lr}
    3932:	b082      	sub	sp, #8
    3934:	0006      	movs	r6, r0
	int16_t rssi;

	LORAWAN_GetAttr(LAST_PACKET_RSSI, NULL, &rssi);
    3936:	466b      	mov	r3, sp
    3938:	1d9d      	adds	r5, r3, #6
    393a:	002a      	movs	r2, r5
    393c:	2100      	movs	r1, #0
    393e:	2035      	movs	r0, #53	; 0x35
    3940:	4b05      	ldr	r3, [pc, #20]	; (3958 <Parser_LoraGetMacLastPacketRssi+0x28>)
    3942:	4798      	blx	r3
	itoa(rssi,aParserData, 10U);
    3944:	4c05      	ldr	r4, [pc, #20]	; (395c <Parser_LoraGetMacLastPacketRssi+0x2c>)
    3946:	2300      	movs	r3, #0
    3948:	5ee8      	ldrsh	r0, [r5, r3]
    394a:	220a      	movs	r2, #10
    394c:	0021      	movs	r1, r4
    394e:	4b04      	ldr	r3, [pc, #16]	; (3960 <Parser_LoraGetMacLastPacketRssi+0x30>)
    3950:	4798      	blx	r3

	pParserCmdInfo->pReplyCmd = aParserData;
    3952:	6174      	str	r4, [r6, #20]
}
    3954:	b002      	add	sp, #8
    3956:	bd70      	pop	{r4, r5, r6, pc}
    3958:	000119a1 	.word	0x000119a1
    395c:	2000116c 	.word	0x2000116c
    3960:	00019735 	.word	0x00019735

00003964 <Parser_LoraGetIsFpending>:
void Parser_LoraGetIsFpending(parserCmdInfo_t* pParserCmdInfo)
{
    3964:	b530      	push	{r4, r5, lr}
    3966:	b083      	sub	sp, #12
    3968:	0005      	movs	r5, r0
	bool isFpending;

	LORAWAN_GetAttr(IS_FPENDING, NULL, &isFpending);
    396a:	466b      	mov	r3, sp
    396c:	1ddc      	adds	r4, r3, #7
    396e:	0022      	movs	r2, r4
    3970:	2100      	movs	r1, #0
    3972:	2036      	movs	r0, #54	; 0x36
    3974:	4b04      	ldr	r3, [pc, #16]	; (3988 <Parser_LoraGetIsFpending+0x24>)
    3976:	4798      	blx	r3
	pParserCmdInfo->pReplyCmd = (char*)gapParserBool[isFpending];
    3978:	7823      	ldrb	r3, [r4, #0]
    397a:	009b      	lsls	r3, r3, #2
    397c:	4a03      	ldr	r2, [pc, #12]	; (398c <Parser_LoraGetIsFpending+0x28>)
    397e:	589b      	ldr	r3, [r3, r2]
    3980:	616b      	str	r3, [r5, #20]
}
    3982:	b003      	add	sp, #12
    3984:	bd30      	pop	{r4, r5, pc}
    3986:	46c0      	nop			; (mov r8, r8)
    3988:	000119a1 	.word	0x000119a1
    398c:	0001f89c 	.word	0x0001f89c

00003990 <Parser_LoraGetMacDlAckReqd>:
void Parser_LoraGetMacDlAckReqd(parserCmdInfo_t* pParserCmdInfo)
{
    3990:	b530      	push	{r4, r5, lr}
    3992:	b083      	sub	sp, #12
    3994:	0005      	movs	r5, r0
	uint8_t req;

	LORAWAN_GetAttr(DL_ACK_REQD, NULL, &req);
    3996:	466b      	mov	r3, sp
    3998:	1ddc      	adds	r4, r3, #7
    399a:	0022      	movs	r2, r4
    399c:	2100      	movs	r1, #0
    399e:	2037      	movs	r0, #55	; 0x37
    39a0:	4b04      	ldr	r3, [pc, #16]	; (39b4 <Parser_LoraGetMacDlAckReqd+0x24>)
    39a2:	4798      	blx	r3
	pParserCmdInfo->pReplyCmd = (char*)gapParserBool[req];
    39a4:	7823      	ldrb	r3, [r4, #0]
    39a6:	009b      	lsls	r3, r3, #2
    39a8:	4a03      	ldr	r2, [pc, #12]	; (39b8 <Parser_LoraGetMacDlAckReqd+0x28>)
    39aa:	589b      	ldr	r3, [r3, r2]
    39ac:	616b      	str	r3, [r5, #20]
	
}
    39ae:	b003      	add	sp, #12
    39b0:	bd30      	pop	{r4, r5, pc}
    39b2:	46c0      	nop			; (mov r8, r8)
    39b4:	000119a1 	.word	0x000119a1
    39b8:	0001f89c 	.word	0x0001f89c

000039bc <Parser_LoraGetMacLastChId>:
void Parser_LoraGetMacLastChId(parserCmdInfo_t* pParserCmdInfo)
{
    39bc:	b570      	push	{r4, r5, r6, lr}
    39be:	b082      	sub	sp, #8
    39c0:	0006      	movs	r6, r0
	uint8_t id;

	LORAWAN_GetAttr(LAST_CH_ID, NULL, &id);
    39c2:	466b      	mov	r3, sp
    39c4:	1ddd      	adds	r5, r3, #7
    39c6:	002a      	movs	r2, r5
    39c8:	2100      	movs	r1, #0
    39ca:	2038      	movs	r0, #56	; 0x38
    39cc:	4b05      	ldr	r3, [pc, #20]	; (39e4 <Parser_LoraGetMacLastChId+0x28>)
    39ce:	4798      	blx	r3
	utoa(id, aParserData,  10U);
    39d0:	4c05      	ldr	r4, [pc, #20]	; (39e8 <Parser_LoraGetMacLastChId+0x2c>)
    39d2:	7828      	ldrb	r0, [r5, #0]
    39d4:	220a      	movs	r2, #10
    39d6:	0021      	movs	r1, r4
    39d8:	4b04      	ldr	r3, [pc, #16]	; (39ec <Parser_LoraGetMacLastChId+0x30>)
    39da:	4798      	blx	r3

	pParserCmdInfo->pReplyCmd = aParserData;	
    39dc:	6174      	str	r4, [r6, #20]
}
    39de:	b002      	add	sp, #8
    39e0:	bd70      	pop	{r4, r5, r6, pc}
    39e2:	46c0      	nop			; (mov r8, r8)
    39e4:	000119a1 	.word	0x000119a1
    39e8:	2000116c 	.word	0x2000116c
    39ec:	0001a6a5 	.word	0x0001a6a5

000039f0 <Parser_LoraGetMacPendingDutyCycle>:
void Parser_LoraGetMacPendingDutyCycle(parserCmdInfo_t* pParserCmdInfo)
{
    39f0:	b530      	push	{r4, r5, lr}
    39f2:	b083      	sub	sp, #12
    39f4:	0005      	movs	r5, r0
	uint32_t value;

	LORAWAN_GetAttr(PENDING_DUTY_CYCLE_TIME, NULL, &value);
    39f6:	aa01      	add	r2, sp, #4
    39f8:	2100      	movs	r1, #0
    39fa:	2039      	movs	r0, #57	; 0x39
    39fc:	4b05      	ldr	r3, [pc, #20]	; (3a14 <Parser_LoraGetMacPendingDutyCycle+0x24>)
    39fe:	4798      	blx	r3
	utoa(value, aParserData,  10U);
    3a00:	4c05      	ldr	r4, [pc, #20]	; (3a18 <Parser_LoraGetMacPendingDutyCycle+0x28>)
    3a02:	220a      	movs	r2, #10
    3a04:	0021      	movs	r1, r4
    3a06:	9801      	ldr	r0, [sp, #4]
    3a08:	4b04      	ldr	r3, [pc, #16]	; (3a1c <Parser_LoraGetMacPendingDutyCycle+0x2c>)
    3a0a:	4798      	blx	r3

	pParserCmdInfo->pReplyCmd = aParserData;	
    3a0c:	616c      	str	r4, [r5, #20]
}
    3a0e:	b003      	add	sp, #12
    3a10:	bd30      	pop	{r4, r5, pc}
    3a12:	46c0      	nop			; (mov r8, r8)
    3a14:	000119a1 	.word	0x000119a1
    3a18:	2000116c 	.word	0x2000116c
    3a1c:	0001a6a5 	.word	0x0001a6a5

00003a20 <Parser_LoraGetMacCnfRetryCnt>:
	uint8_t ctr;

	//LORAWAN_GetAttr(RETRY_COUNTER_CNF, NULL, &ctr);
	//utoa(ctr, aParserData,  10U);

	pParserCmdInfo->pReplyCmd = aParserData;	
    3a20:	4b01      	ldr	r3, [pc, #4]	; (3a28 <Parser_LoraGetMacCnfRetryCnt+0x8>)
    3a22:	6143      	str	r3, [r0, #20]
}
    3a24:	4770      	bx	lr
    3a26:	46c0      	nop			; (mov r8, r8)
    3a28:	2000116c 	.word	0x2000116c

00003a2c <Parser_LoraGetMacUncnfRetryCnt>:
	uint8_t ctr;

	//LORAWAN_GetAttr(RETRY_COUNTER_UNCNF, NULL, &ctr);
	//utoa(ctr, aParserData,  10U);

	pParserCmdInfo->pReplyCmd = aParserData;	
    3a2c:	4b01      	ldr	r3, [pc, #4]	; (3a34 <Parser_LoraGetMacUncnfRetryCnt+0x8>)
    3a2e:	6143      	str	r3, [r0, #20]
}
    3a30:	4770      	bx	lr
    3a32:	46c0      	nop			; (mov r8, r8)
    3a34:	2000116c 	.word	0x2000116c

00003a38 <Parser_LoraGetMacNextPayloadSize>:
void Parser_LoraGetMacNextPayloadSize(parserCmdInfo_t* pParserCmdInfo)
{
    3a38:	b570      	push	{r4, r5, r6, lr}
    3a3a:	b082      	sub	sp, #8
    3a3c:	0006      	movs	r6, r0
	uint16_t size;

	LORAWAN_GetAttr(NEXT_PAYLOAD_SIZE, NULL, &size);
    3a3e:	466b      	mov	r3, sp
    3a40:	1d9d      	adds	r5, r3, #6
    3a42:	002a      	movs	r2, r5
    3a44:	2100      	movs	r1, #0
    3a46:	203b      	movs	r0, #59	; 0x3b
    3a48:	4b05      	ldr	r3, [pc, #20]	; (3a60 <Parser_LoraGetMacNextPayloadSize+0x28>)
    3a4a:	4798      	blx	r3
	utoa(size, aParserData,  10U);
    3a4c:	4c05      	ldr	r4, [pc, #20]	; (3a64 <Parser_LoraGetMacNextPayloadSize+0x2c>)
    3a4e:	8828      	ldrh	r0, [r5, #0]
    3a50:	220a      	movs	r2, #10
    3a52:	0021      	movs	r1, r4
    3a54:	4b04      	ldr	r3, [pc, #16]	; (3a68 <Parser_LoraGetMacNextPayloadSize+0x30>)
    3a56:	4798      	blx	r3

	pParserCmdInfo->pReplyCmd = aParserData;	
    3a58:	6174      	str	r4, [r6, #20]
}
    3a5a:	b002      	add	sp, #8
    3a5c:	bd70      	pop	{r4, r5, r6, pc}
    3a5e:	46c0      	nop			; (mov r8, r8)
    3a60:	000119a1 	.word	0x000119a1
    3a64:	2000116c 	.word	0x2000116c
    3a68:	0001a6a5 	.word	0x0001a6a5

00003a6c <Parser_LoraGetJoindutycycleremaining>:

void Parser_LoraGetJoindutycycleremaining(parserCmdInfo_t* pParserCmdInfo)
{
    3a6c:	b530      	push	{r4, r5, lr}
    3a6e:	b083      	sub	sp, #12
    3a70:	0005      	movs	r5, r0
	uint32_t remainingtime;
	LORAWAN_GetAttr(PENDING_JOIN_DUTY_CYCLE_TIME,NULL, &remainingtime);
    3a72:	aa01      	add	r2, sp, #4
    3a74:	2100      	movs	r1, #0
    3a76:	203c      	movs	r0, #60	; 0x3c
    3a78:	4b05      	ldr	r3, [pc, #20]	; (3a90 <Parser_LoraGetJoindutycycleremaining+0x24>)
    3a7a:	4798      	blx	r3
	utoa(remainingtime, aParserData, 10U);
    3a7c:	4c05      	ldr	r4, [pc, #20]	; (3a94 <Parser_LoraGetJoindutycycleremaining+0x28>)
    3a7e:	220a      	movs	r2, #10
    3a80:	0021      	movs	r1, r4
    3a82:	9801      	ldr	r0, [sp, #4]
    3a84:	4b04      	ldr	r3, [pc, #16]	; (3a98 <Parser_LoraGetJoindutycycleremaining+0x2c>)
    3a86:	4798      	blx	r3
	pParserCmdInfo->pReplyCmd = aParserData;
    3a88:	616c      	str	r4, [r5, #20]
}
    3a8a:	b003      	add	sp, #12
    3a8c:	bd30      	pop	{r4, r5, pc}
    3a8e:	46c0      	nop			; (mov r8, r8)
    3a90:	000119a1 	.word	0x000119a1
    3a94:	2000116c 	.word	0x2000116c
    3a98:	0001a6a5 	.word	0x0001a6a5

00003a9c <Parser_LoraSetJoinBackoff>:

void Parser_LoraSetJoinBackoff(parserCmdInfo_t* pParserCmdInfo)
{
    3a9c:	b510      	push	{r4, lr}
    3a9e:	b082      	sub	sp, #8
    3aa0:	0004      	movs	r4, r0
	uint8_t validationVal;
	uint8_t returnVal = LORAWAN_INVALID_PARAMETER;
	bool joinBackoffEnable;

	validationVal = Validate_OnOffAsciiValue(pParserCmdInfo->pParam1);
    3aa2:	6800      	ldr	r0, [r0, #0]
    3aa4:	4b0a      	ldr	r3, [pc, #40]	; (3ad0 <Parser_LoraSetJoinBackoff+0x34>)
    3aa6:	4798      	blx	r3
	uint8_t returnVal = LORAWAN_INVALID_PARAMETER;
    3aa8:	230a      	movs	r3, #10
	if (validationVal < 2U)
    3aaa:	2801      	cmp	r0, #1
    3aac:	d905      	bls.n	3aba <Parser_LoraSetJoinBackoff+0x1e>
	{
		joinBackoffEnable = validationVal;
		returnVal = LORAWAN_SetAttr(JOIN_BACKOFF_ENABLE, &joinBackoffEnable);
	}
	
	pParserCmdInfo->pReplyCmd = (char*)gapParserLorawanStatus[returnVal];
    3aae:	009b      	lsls	r3, r3, #2
    3ab0:	4a08      	ldr	r2, [pc, #32]	; (3ad4 <Parser_LoraSetJoinBackoff+0x38>)
    3ab2:	589b      	ldr	r3, [r3, r2]
    3ab4:	6163      	str	r3, [r4, #20]
}
    3ab6:	b002      	add	sp, #8
    3ab8:	bd10      	pop	{r4, pc}
		joinBackoffEnable = validationVal;
    3aba:	466b      	mov	r3, sp
    3abc:	1dd9      	adds	r1, r3, #7
    3abe:	1e43      	subs	r3, r0, #1
    3ac0:	4198      	sbcs	r0, r3
    3ac2:	7008      	strb	r0, [r1, #0]
		returnVal = LORAWAN_SetAttr(JOIN_BACKOFF_ENABLE, &joinBackoffEnable);
    3ac4:	2033      	movs	r0, #51	; 0x33
    3ac6:	4b04      	ldr	r3, [pc, #16]	; (3ad8 <Parser_LoraSetJoinBackoff+0x3c>)
    3ac8:	4798      	blx	r3
    3aca:	0003      	movs	r3, r0
    3acc:	e7ef      	b.n	3aae <Parser_LoraSetJoinBackoff+0x12>
    3ace:	46c0      	nop			; (mov r8, r8)
    3ad0:	000043e9 	.word	0x000043e9
    3ad4:	0001f8b4 	.word	0x0001f8b4
    3ad8:	000139e5 	.word	0x000139e5

00003adc <Parser_LoraSetMaxFcntPdsUpdtVal>:

void Parser_LoraSetMaxFcntPdsUpdtVal(parserCmdInfo_t* pParserCmdInfo)
{
    3adc:	b510      	push	{r4, lr}
    3ade:	b082      	sub	sp, #8
    3ae0:	0004      	movs	r4, r0
	uint8_t status = LORAWAN_INVALID_PARAMETER;
	uint8_t fcnt;

	// Parameter validation
	if(Validate_Uint8DecAsciiValue(pParserCmdInfo->pParam1, &fcnt))
    3ae2:	466b      	mov	r3, sp
    3ae4:	1dd9      	adds	r1, r3, #7
    3ae6:	6800      	ldr	r0, [r0, #0]
    3ae8:	4b08      	ldr	r3, [pc, #32]	; (3b0c <Parser_LoraSetMaxFcntPdsUpdtVal+0x30>)
    3aea:	4798      	blx	r3
	uint8_t status = LORAWAN_INVALID_PARAMETER;
    3aec:	230a      	movs	r3, #10
	if(Validate_Uint8DecAsciiValue(pParserCmdInfo->pParam1, &fcnt))
    3aee:	2800      	cmp	r0, #0
    3af0:	d105      	bne.n	3afe <Parser_LoraSetMaxFcntPdsUpdtVal+0x22>
	{
		status = LORAWAN_SetAttr(MAX_FCNT_PDS_UPDATE_VAL,&fcnt);
	}

	pParserCmdInfo->pReplyCmd = (char*)gapParserLorawanStatus[status];
    3af2:	009b      	lsls	r3, r3, #2
    3af4:	4a06      	ldr	r2, [pc, #24]	; (3b10 <Parser_LoraSetMaxFcntPdsUpdtVal+0x34>)
    3af6:	589b      	ldr	r3, [r3, r2]
    3af8:	6163      	str	r3, [r4, #20]
}
    3afa:	b002      	add	sp, #8
    3afc:	bd10      	pop	{r4, pc}
		status = LORAWAN_SetAttr(MAX_FCNT_PDS_UPDATE_VAL,&fcnt);
    3afe:	466b      	mov	r3, sp
    3b00:	1dd9      	adds	r1, r3, #7
    3b02:	203d      	movs	r0, #61	; 0x3d
    3b04:	4b03      	ldr	r3, [pc, #12]	; (3b14 <Parser_LoraSetMaxFcntPdsUpdtVal+0x38>)
    3b06:	4798      	blx	r3
    3b08:	0003      	movs	r3, r0
    3b0a:	e7f2      	b.n	3af2 <Parser_LoraSetMaxFcntPdsUpdtVal+0x16>
    3b0c:	00004241 	.word	0x00004241
    3b10:	0001f8b4 	.word	0x0001f8b4
    3b14:	000139e5 	.word	0x000139e5

00003b18 <Parser_LoraGetJoinBackoff>:

void Parser_LoraGetJoinBackoff(parserCmdInfo_t* pParserCmdInfo)
{
    3b18:	b510      	push	{r4, lr}
    3b1a:	b082      	sub	sp, #8
    3b1c:	0004      	movs	r4, r0
	bool joinBackoffEnable ;
	StackRetStatus_t status;

	status = LORAWAN_GetAttr(JOIN_BACKOFF_ENABLE, NULL, &joinBackoffEnable);
    3b1e:	466b      	mov	r3, sp
    3b20:	1dda      	adds	r2, r3, #7
    3b22:	2100      	movs	r1, #0
    3b24:	2033      	movs	r0, #51	; 0x33
    3b26:	4b09      	ldr	r3, [pc, #36]	; (3b4c <Parser_LoraGetJoinBackoff+0x34>)
    3b28:	4798      	blx	r3
	if(status == LORAWAN_SUCCESS)
    3b2a:	2808      	cmp	r0, #8
    3b2c:	d005      	beq.n	3b3a <Parser_LoraGetJoinBackoff+0x22>
	{
		pParserCmdInfo->pReplyCmd = (char*)gapParseOnOff[joinBackoffEnable];
	}
	else
	{
		pParserCmdInfo->pReplyCmd = (char*)gapParserLorawanStatus[status];
    3b2e:	0080      	lsls	r0, r0, #2
    3b30:	4b07      	ldr	r3, [pc, #28]	; (3b50 <Parser_LoraGetJoinBackoff+0x38>)
    3b32:	58c3      	ldr	r3, [r0, r3]
    3b34:	6163      	str	r3, [r4, #20]
	}
    3b36:	b002      	add	sp, #8
    3b38:	bd10      	pop	{r4, pc}
		pParserCmdInfo->pReplyCmd = (char*)gapParseOnOff[joinBackoffEnable];
    3b3a:	466b      	mov	r3, sp
    3b3c:	3307      	adds	r3, #7
    3b3e:	781b      	ldrb	r3, [r3, #0]
    3b40:	009b      	lsls	r3, r3, #2
    3b42:	4a04      	ldr	r2, [pc, #16]	; (3b54 <Parser_LoraGetJoinBackoff+0x3c>)
    3b44:	589b      	ldr	r3, [r3, r2]
    3b46:	6163      	str	r3, [r4, #20]
    3b48:	e7f5      	b.n	3b36 <Parser_LoraGetJoinBackoff+0x1e>
    3b4a:	46c0      	nop			; (mov r8, r8)
    3b4c:	000119a1 	.word	0x000119a1
    3b50:	0001f8b4 	.word	0x0001f8b4
    3b54:	0001f894 	.word	0x0001f894

00003b58 <parserSleepCallback>:
/*********************************************************************//**
\brief	Callback function of parser to power manager.
\param[in]	sleptDuration - duration for which sleep is done
*************************************************************************/
static void parserSleepCallback(uint32_t sleptDuration)
{
    3b58:	b510      	push	{r4, lr}
    3b5a:	0004      	movs	r4, r0
	HAL_Radio_resources_init();
    3b5c:	4b04      	ldr	r3, [pc, #16]	; (3b70 <parserSleepCallback+0x18>)
    3b5e:	4798      	blx	r3
	sio2host_init();
    3b60:	4b04      	ldr	r3, [pc, #16]	; (3b74 <parserSleepCallback+0x1c>)
    3b62:	4798      	blx	r3
	printf("\nsleep_ok %ld ms\n\r", sleptDuration);
    3b64:	0021      	movs	r1, r4
    3b66:	4804      	ldr	r0, [pc, #16]	; (3b78 <parserSleepCallback+0x20>)
    3b68:	4b04      	ldr	r3, [pc, #16]	; (3b7c <parserSleepCallback+0x24>)
    3b6a:	4798      	blx	r3
}
    3b6c:	bd10      	pop	{r4, pc}
    3b6e:	46c0      	nop			; (mov r8, r8)
    3b70:	00008081 	.word	0x00008081
    3b74:	00007b21 	.word	0x00007b21
    3b78:	0001fa60 	.word	0x0001fa60
    3b7c:	00019f61 	.word	0x00019f61

00003b80 <extint_callback>:
{
    3b80:	b510      	push	{r4, lr}
	PMM_Wakeup();
    3b82:	4b09      	ldr	r3, [pc, #36]	; (3ba8 <extint_callback+0x28>)
    3b84:	4798      	blx	r3
	if(SleepEnabled)
    3b86:	4b09      	ldr	r3, [pc, #36]	; (3bac <extint_callback+0x2c>)
    3b88:	781b      	ldrb	r3, [r3, #0]
    3b8a:	2b00      	cmp	r3, #0
    3b8c:	d100      	bne.n	3b90 <extint_callback+0x10>
}
    3b8e:	bd10      	pop	{r4, pc}
	    HAL_Radio_resources_init();
    3b90:	4b07      	ldr	r3, [pc, #28]	; (3bb0 <extint_callback+0x30>)
    3b92:	4798      	blx	r3
		sio2host_init();
    3b94:	4b07      	ldr	r3, [pc, #28]	; (3bb4 <extint_callback+0x34>)
    3b96:	4798      	blx	r3
		printf("\nExiting Sleep\n\r");
    3b98:	4807      	ldr	r0, [pc, #28]	; (3bb8 <extint_callback+0x38>)
    3b9a:	4b08      	ldr	r3, [pc, #32]	; (3bbc <extint_callback+0x3c>)
    3b9c:	4798      	blx	r3
		SleepEnabled = false;
    3b9e:	2200      	movs	r2, #0
    3ba0:	4b02      	ldr	r3, [pc, #8]	; (3bac <extint_callback+0x2c>)
    3ba2:	701a      	strb	r2, [r3, #0]
}
    3ba4:	e7f3      	b.n	3b8e <extint_callback+0xe>
    3ba6:	46c0      	nop			; (mov r8, r8)
    3ba8:	000083cd 	.word	0x000083cd
    3bac:	20000b54 	.word	0x20000b54
    3bb0:	00008081 	.word	0x00008081
    3bb4:	00007b21 	.word	0x00007b21
    3bb8:	0001fa40 	.word	0x0001fa40
    3bbc:	00019f61 	.word	0x00019f61

00003bc0 <Parser_SystemGetHwEui>:
{
    3bc0:	b530      	push	{r4, r5, lr}
    3bc2:	b083      	sub	sp, #12
    3bc4:	0005      	movs	r5, r0
    System_GetExternalEui(aDevEui);
    3bc6:	4668      	mov	r0, sp
    3bc8:	4b05      	ldr	r3, [pc, #20]	; (3be0 <Parser_SystemGetHwEui+0x20>)
    3bca:	4798      	blx	r3
    Parser_IntArrayToHexAscii(8, aDevEui, aParserData);
    3bcc:	4c05      	ldr	r4, [pc, #20]	; (3be4 <Parser_SystemGetHwEui+0x24>)
    3bce:	0022      	movs	r2, r4
    3bd0:	4669      	mov	r1, sp
    3bd2:	2008      	movs	r0, #8
    3bd4:	4b04      	ldr	r3, [pc, #16]	; (3be8 <Parser_SystemGetHwEui+0x28>)
    3bd6:	4798      	blx	r3
    pParserCmdInfo->pReplyCmd = aParserData;
    3bd8:	616c      	str	r4, [r5, #20]
}
    3bda:	b003      	add	sp, #12
    3bdc:	bd30      	pop	{r4, r5, pc}
    3bde:	46c0      	nop			; (mov r8, r8)
    3be0:	0000837d 	.word	0x0000837d
    3be4:	2000116c 	.word	0x2000116c
    3be8:	000041e1 	.word	0x000041e1

00003bec <Parser_SystemGetVer>:
{
    3bec:	b570      	push	{r4, r5, r6, lr}
    3bee:	0005      	movs	r5, r0
	Parser_GetSwVersion(aParserData);
    3bf0:	4c02      	ldr	r4, [pc, #8]	; (3bfc <Parser_SystemGetVer+0x10>)
    3bf2:	0020      	movs	r0, r4
    3bf4:	4b02      	ldr	r3, [pc, #8]	; (3c00 <Parser_SystemGetVer+0x14>)
    3bf6:	4798      	blx	r3
	pParserCmdInfo->pReplyCmd = aParserData;
    3bf8:	616c      	str	r4, [r5, #20]
}
    3bfa:	bd70      	pop	{r4, r5, r6, pc}
    3bfc:	2000116c 	.word	0x2000116c
    3c00:	00001ef1 	.word	0x00001ef1

00003c04 <Parser_SystemGetCustomParam>:
{
    3c04:	b570      	push	{r4, r5, r6, lr}
    3c06:	0005      	movs	r5, r0
	PDS_RESTORE(PDS_APP_CUSTOMPARAMETER) ;
    3c08:	2100      	movs	r1, #0
    3c0a:	200c      	movs	r0, #12
    3c0c:	4b05      	ldr	r3, [pc, #20]	; (3c24 <Parser_SystemGetCustomParam+0x20>)
    3c0e:	4798      	blx	r3
	utoa(pdsAppCustomParameter, aParserData,  10U);
    3c10:	4c05      	ldr	r4, [pc, #20]	; (3c28 <Parser_SystemGetCustomParam+0x24>)
    3c12:	4b06      	ldr	r3, [pc, #24]	; (3c2c <Parser_SystemGetCustomParam+0x28>)
    3c14:	6818      	ldr	r0, [r3, #0]
    3c16:	220a      	movs	r2, #10
    3c18:	0021      	movs	r1, r4
    3c1a:	4b05      	ldr	r3, [pc, #20]	; (3c30 <Parser_SystemGetCustomParam+0x2c>)
    3c1c:	4798      	blx	r3
	pParserCmdInfo->pReplyCmd = aParserData;
    3c1e:	616c      	str	r4, [r5, #20]
}
    3c20:	bd70      	pop	{r4, r5, r6, pc}
    3c22:	46c0      	nop			; (mov r8, r8)
    3c24:	0000e141 	.word	0x0000e141
    3c28:	2000116c 	.word	0x2000116c
    3c2c:	20001380 	.word	0x20001380
    3c30:	0001a6a5 	.word	0x0001a6a5

00003c34 <Parser_SystemSetCustomParam>:
{
    3c34:	b510      	push	{r4, lr}
    3c36:	0004      	movs	r4, r0
	pdsAppCustomParameter = (uint32_t)strtoul(pParserCmdInfo->pParam1, NULL, 10);
    3c38:	220a      	movs	r2, #10
    3c3a:	2100      	movs	r1, #0
    3c3c:	6800      	ldr	r0, [r0, #0]
    3c3e:	4b0e      	ldr	r3, [pc, #56]	; (3c78 <Parser_SystemSetCustomParam+0x44>)
    3c40:	4798      	blx	r3
    3c42:	4b0e      	ldr	r3, [pc, #56]	; (3c7c <Parser_SystemSetCustomParam+0x48>)
    3c44:	6018      	str	r0, [r3, #0]
	if (Validate_UintDecAsciiValue(pParserCmdInfo->pParam1, 10, UINT32_MAX))
    3c46:	2201      	movs	r2, #1
    3c48:	4252      	negs	r2, r2
    3c4a:	210a      	movs	r1, #10
    3c4c:	6820      	ldr	r0, [r4, #0]
    3c4e:	4b0c      	ldr	r3, [pc, #48]	; (3c80 <Parser_SystemSetCustomParam+0x4c>)
    3c50:	4798      	blx	r3
	StackRetStatus_t status = INVALID_PARAM_IDX ;
    3c52:	2301      	movs	r3, #1
	if (Validate_UintDecAsciiValue(pParserCmdInfo->pParam1, 10, UINT32_MAX))
    3c54:	2800      	cmp	r0, #0
    3c56:	d104      	bne.n	3c62 <Parser_SystemSetCustomParam+0x2e>
	pParserCmdInfo->pReplyCmd = (char*)gapParserSysStatus[status] ;
    3c58:	009b      	lsls	r3, r3, #2
    3c5a:	4a0a      	ldr	r2, [pc, #40]	; (3c84 <Parser_SystemSetCustomParam+0x50>)
    3c5c:	589b      	ldr	r3, [r3, r2]
    3c5e:	6163      	str	r3, [r4, #20]
}
    3c60:	bd10      	pop	{r4, pc}
		printf("\r\n%ld\r\n", pdsAppCustomParameter) ;
    3c62:	4b06      	ldr	r3, [pc, #24]	; (3c7c <Parser_SystemSetCustomParam+0x48>)
    3c64:	6819      	ldr	r1, [r3, #0]
    3c66:	4808      	ldr	r0, [pc, #32]	; (3c88 <Parser_SystemSetCustomParam+0x54>)
    3c68:	4b08      	ldr	r3, [pc, #32]	; (3c8c <Parser_SystemSetCustomParam+0x58>)
    3c6a:	4798      	blx	r3
		PDS_STORE(PDS_APP_CUSTOMPARAMETER) ;
    3c6c:	2100      	movs	r1, #0
    3c6e:	200c      	movs	r0, #12
    3c70:	4b07      	ldr	r3, [pc, #28]	; (3c90 <Parser_SystemSetCustomParam+0x5c>)
    3c72:	4798      	blx	r3
		status = OK_STATUS_IDX ;
    3c74:	2300      	movs	r3, #0
    3c76:	e7ef      	b.n	3c58 <Parser_SystemSetCustomParam+0x24>
    3c78:	0001a5ed 	.word	0x0001a5ed
    3c7c:	20001380 	.word	0x20001380
    3c80:	00004315 	.word	0x00004315
    3c84:	0001fa54 	.word	0x0001fa54
    3c88:	0001fa24 	.word	0x0001fa24
    3c8c:	00019f61 	.word	0x00019f61
    3c90:	0000e0dd 	.word	0x0000e0dd

00003c94 <Parser_SystemGetCryptoSn>:
{
    3c94:	b530      	push	{r4, r5, lr}
    3c96:	b085      	sub	sp, #20
    3c98:	0005      	movs	r5, r0
    uint8_t aCryptoSn[9] = {0} ;
    3c9a:	2209      	movs	r2, #9
    3c9c:	2100      	movs	r1, #0
    3c9e:	a801      	add	r0, sp, #4
    3ca0:	4b09      	ldr	r3, [pc, #36]	; (3cc8 <Parser_SystemGetCryptoSn+0x34>)
    3ca2:	4798      	blx	r3
	if (useCryptoDev)
    3ca4:	4b09      	ldr	r3, [pc, #36]	; (3ccc <Parser_SystemGetCryptoSn+0x38>)
    3ca6:	781b      	ldrb	r3, [r3, #0]
    3ca8:	2b00      	cmp	r3, #0
    3caa:	d108      	bne.n	3cbe <Parser_SystemGetCryptoSn+0x2a>
    Parser_IntArrayToHexAscii(9, aCryptoSn, aParserData);
    3cac:	4c08      	ldr	r4, [pc, #32]	; (3cd0 <Parser_SystemGetCryptoSn+0x3c>)
    3cae:	0022      	movs	r2, r4
    3cb0:	a901      	add	r1, sp, #4
    3cb2:	2009      	movs	r0, #9
    3cb4:	4b07      	ldr	r3, [pc, #28]	; (3cd4 <Parser_SystemGetCryptoSn+0x40>)
    3cb6:	4798      	blx	r3
    pParserCmdInfo->pReplyCmd = aParserData;
    3cb8:	616c      	str	r4, [r5, #20]
}
    3cba:	b005      	add	sp, #20
    3cbc:	bd30      	pop	{r4, r5, pc}
		atcab_read_serial_number(aCryptoSn) ;
    3cbe:	a801      	add	r0, sp, #4
    3cc0:	4b05      	ldr	r3, [pc, #20]	; (3cd8 <Parser_SystemGetCryptoSn+0x44>)
    3cc2:	4798      	blx	r3
    3cc4:	e7f2      	b.n	3cac <Parser_SystemGetCryptoSn+0x18>
    3cc6:	46c0      	nop			; (mov r8, r8)
    3cc8:	00019ead 	.word	0x00019ead
    3ccc:	20000fa8 	.word	0x20000fa8
    3cd0:	2000116c 	.word	0x2000116c
    3cd4:	000041e1 	.word	0x000041e1
    3cd8:	00000611 	.word	0x00000611

00003cdc <Parser_SystemGetCryptoDevEui>:
{
    3cdc:	b570      	push	{r4, r5, r6, lr}
    3cde:	b088      	sub	sp, #32
    3ce0:	0005      	movs	r5, r0
	char aCryptoDevEui[17] = {'0'} ;
    3ce2:	ac03      	add	r4, sp, #12
    3ce4:	2211      	movs	r2, #17
    3ce6:	2100      	movs	r1, #0
    3ce8:	0020      	movs	r0, r4
    3cea:	4b0e      	ldr	r3, [pc, #56]	; (3d24 <Parser_SystemGetCryptoDevEui+0x48>)
    3cec:	4798      	blx	r3
    3cee:	2330      	movs	r3, #48	; 0x30
    3cf0:	7023      	strb	r3, [r4, #0]
	if (useCryptoDev)
    3cf2:	4b0d      	ldr	r3, [pc, #52]	; (3d28 <Parser_SystemGetCryptoDevEui+0x4c>)
    3cf4:	781b      	ldrb	r3, [r3, #0]
    3cf6:	2b00      	cmp	r3, #0
    3cf8:	d108      	bne.n	3d0c <Parser_SystemGetCryptoDevEui+0x30>
	memcpy(aParserData, aCryptoDevEui, sizeof(aCryptoDevEui)) ;
    3cfa:	4c0c      	ldr	r4, [pc, #48]	; (3d2c <Parser_SystemGetCryptoDevEui+0x50>)
    3cfc:	2211      	movs	r2, #17
    3cfe:	a903      	add	r1, sp, #12
    3d00:	0020      	movs	r0, r4
    3d02:	4b0b      	ldr	r3, [pc, #44]	; (3d30 <Parser_SystemGetCryptoDevEui+0x54>)
    3d04:	4798      	blx	r3
	pParserCmdInfo->pReplyCmd = aParserData ;
    3d06:	616c      	str	r4, [r5, #20]
}
    3d08:	b008      	add	sp, #32
    3d0a:	bd70      	pop	{r4, r5, r6, pc}
		atcab_read_bytes_zone(ATCA_ZONE_DATA, DEV_EUI_SLOT, 0, (uint8_t*)aCryptoDevEui, 16) ;
    3d0c:	ac03      	add	r4, sp, #12
    3d0e:	2310      	movs	r3, #16
    3d10:	9300      	str	r3, [sp, #0]
    3d12:	0023      	movs	r3, r4
    3d14:	2200      	movs	r2, #0
    3d16:	210a      	movs	r1, #10
    3d18:	2002      	movs	r0, #2
    3d1a:	4e06      	ldr	r6, [pc, #24]	; (3d34 <Parser_SystemGetCryptoDevEui+0x58>)
    3d1c:	47b0      	blx	r6
		aCryptoDevEui[16] = '\0' ;
    3d1e:	2300      	movs	r3, #0
    3d20:	7423      	strb	r3, [r4, #16]
    3d22:	e7ea      	b.n	3cfa <Parser_SystemGetCryptoDevEui+0x1e>
    3d24:	00019ead 	.word	0x00019ead
    3d28:	20000fa8 	.word	0x20000fa8
    3d2c:	2000116c 	.word	0x2000116c
    3d30:	00019d89 	.word	0x00019d89
    3d34:	0000077d 	.word	0x0000077d

00003d38 <Parser_SystemGetCryptoJoinEui>:
{
    3d38:	b530      	push	{r4, r5, lr}
    3d3a:	b085      	sub	sp, #20
    3d3c:	0005      	movs	r5, r0
	uint8_t aCryptoJoinEui[8] = {0} ;
    3d3e:	2208      	movs	r2, #8
    3d40:	2100      	movs	r1, #0
    3d42:	a802      	add	r0, sp, #8
    3d44:	4b0b      	ldr	r3, [pc, #44]	; (3d74 <Parser_SystemGetCryptoJoinEui+0x3c>)
    3d46:	4798      	blx	r3
	if (useCryptoDev)
    3d48:	4b0b      	ldr	r3, [pc, #44]	; (3d78 <Parser_SystemGetCryptoJoinEui+0x40>)
    3d4a:	781b      	ldrb	r3, [r3, #0]
    3d4c:	2b00      	cmp	r3, #0
    3d4e:	d108      	bne.n	3d62 <Parser_SystemGetCryptoJoinEui+0x2a>
    Parser_IntArrayToHexAscii(8, aCryptoJoinEui, aParserData) ;
    3d50:	4c0a      	ldr	r4, [pc, #40]	; (3d7c <Parser_SystemGetCryptoJoinEui+0x44>)
    3d52:	0022      	movs	r2, r4
    3d54:	a902      	add	r1, sp, #8
    3d56:	2008      	movs	r0, #8
    3d58:	4b09      	ldr	r3, [pc, #36]	; (3d80 <Parser_SystemGetCryptoJoinEui+0x48>)
    3d5a:	4798      	blx	r3
    pParserCmdInfo->pReplyCmd = aParserData ;
    3d5c:	616c      	str	r4, [r5, #20]
}
    3d5e:	b005      	add	sp, #20
    3d60:	bd30      	pop	{r4, r5, pc}
		atcab_read_bytes_zone(ATCA_ZONE_DATA, APP_EUI_SLOT, 0, (uint8_t*)aCryptoJoinEui, 8) ;
    3d62:	2308      	movs	r3, #8
    3d64:	9300      	str	r3, [sp, #0]
    3d66:	ab02      	add	r3, sp, #8
    3d68:	2200      	movs	r2, #0
    3d6a:	2109      	movs	r1, #9
    3d6c:	2002      	movs	r0, #2
    3d6e:	4c05      	ldr	r4, [pc, #20]	; (3d84 <Parser_SystemGetCryptoJoinEui+0x4c>)
    3d70:	47a0      	blx	r4
    3d72:	e7ed      	b.n	3d50 <Parser_SystemGetCryptoJoinEui+0x18>
    3d74:	00019ead 	.word	0x00019ead
    3d78:	20000fa8 	.word	0x20000fa8
    3d7c:	2000116c 	.word	0x2000116c
    3d80:	000041e1 	.word	0x000041e1
    3d84:	0000077d 	.word	0x0000077d

00003d88 <Parser_SystemGetCryptoTkmInfo>:
{
    3d88:	b570      	push	{r4, r5, r6, lr}
    3d8a:	b08a      	sub	sp, #40	; 0x28
    3d8c:	0005      	movs	r5, r0
	uint8_t aCryptoTkmInfo[10] = {0} ;
    3d8e:	220a      	movs	r2, #10
    3d90:	2100      	movs	r1, #0
    3d92:	a803      	add	r0, sp, #12
    3d94:	4b12      	ldr	r3, [pc, #72]	; (3de0 <Parser_SystemGetCryptoTkmInfo+0x58>)
    3d96:	4798      	blx	r3
	if (useCryptoDev)
    3d98:	4b12      	ldr	r3, [pc, #72]	; (3de4 <Parser_SystemGetCryptoTkmInfo+0x5c>)
    3d9a:	781b      	ldrb	r3, [r3, #0]
    3d9c:	2b00      	cmp	r3, #0
    3d9e:	d108      	bne.n	3db2 <Parser_SystemGetCryptoTkmInfo+0x2a>
	Parser_IntArrayToHexAscii(10, aCryptoTkmInfo, aParserData) ;
    3da0:	4c11      	ldr	r4, [pc, #68]	; (3de8 <Parser_SystemGetCryptoTkmInfo+0x60>)
    3da2:	0022      	movs	r2, r4
    3da4:	a903      	add	r1, sp, #12
    3da6:	200a      	movs	r0, #10
    3da8:	4b10      	ldr	r3, [pc, #64]	; (3dec <Parser_SystemGetCryptoTkmInfo+0x64>)
    3daa:	4798      	blx	r3
	pParserCmdInfo->pReplyCmd = aParserData ;
    3dac:	616c      	str	r4, [r5, #20]
}
    3dae:	b00a      	add	sp, #40	; 0x28
    3db0:	bd70      	pop	{r4, r5, r6, pc}
		atcab_read_serial_number(aCryptoSn) ;
    3db2:	a807      	add	r0, sp, #28
    3db4:	4b0e      	ldr	r3, [pc, #56]	; (3df0 <Parser_SystemGetCryptoTkmInfo+0x68>)
    3db6:	4798      	blx	r3
		atcab_read_bytes_zone(ATCA_ZONE_DATA, 10, 70, aInfo, sizeof(aInfo)) ;
    3db8:	ac06      	add	r4, sp, #24
    3dba:	2302      	movs	r3, #2
    3dbc:	9300      	str	r3, [sp, #0]
    3dbe:	0023      	movs	r3, r4
    3dc0:	2246      	movs	r2, #70	; 0x46
    3dc2:	210a      	movs	r1, #10
    3dc4:	2002      	movs	r0, #2
    3dc6:	4e0b      	ldr	r6, [pc, #44]	; (3df4 <Parser_SystemGetCryptoTkmInfo+0x6c>)
    3dc8:	47b0      	blx	r6
		memcpy(aCryptoTkmInfo, aInfo, 2) ;
    3dca:	8822      	ldrh	r2, [r4, #0]
    3dcc:	ab03      	add	r3, sp, #12
    3dce:	801a      	strh	r2, [r3, #0]
		memcpy(&aCryptoTkmInfo[2], aCryptoSn, 8) ;
    3dd0:	2208      	movs	r2, #8
    3dd2:	a907      	add	r1, sp, #28
    3dd4:	200e      	movs	r0, #14
    3dd6:	4468      	add	r0, sp
    3dd8:	4b07      	ldr	r3, [pc, #28]	; (3df8 <Parser_SystemGetCryptoTkmInfo+0x70>)
    3dda:	4798      	blx	r3
    3ddc:	e7e0      	b.n	3da0 <Parser_SystemGetCryptoTkmInfo+0x18>
    3dde:	46c0      	nop			; (mov r8, r8)
    3de0:	00019ead 	.word	0x00019ead
    3de4:	20000fa8 	.word	0x20000fa8
    3de8:	2000116c 	.word	0x2000116c
    3dec:	000041e1 	.word	0x000041e1
    3df0:	00000611 	.word	0x00000611
    3df4:	0000077d 	.word	0x0000077d
    3df8:	00019d89 	.word	0x00019d89

00003dfc <Parser_SystemGetCustomID>:
{
    3dfc:	b570      	push	{r4, r5, r6, lr}
    3dfe:	0005      	movs	r5, r0
	Parser_GetCustomID(aParserData);
    3e00:	4c02      	ldr	r4, [pc, #8]	; (3e0c <Parser_SystemGetCustomID+0x10>)
    3e02:	0020      	movs	r0, r4
    3e04:	4b02      	ldr	r3, [pc, #8]	; (3e10 <Parser_SystemGetCustomID+0x14>)
    3e06:	4798      	blx	r3
	pParserCmdInfo->pReplyCmd = aParserData;
    3e08:	616c      	str	r4, [r5, #20]
}
    3e0a:	bd70      	pop	{r4, r5, r6, pc}
    3e0c:	2000116c 	.word	0x2000116c
    3e10:	00001e51 	.word	0x00001e51

00003e14 <Parser_SystemReboot>:
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    3e14:	f3bf 8f4f 	dsb	sy
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
    3e18:	4a03      	ldr	r2, [pc, #12]	; (3e28 <Parser_SystemReboot+0x14>)
    3e1a:	4b04      	ldr	r3, [pc, #16]	; (3e2c <Parser_SystemReboot+0x18>)
    3e1c:	60da      	str	r2, [r3, #12]
    3e1e:	f3bf 8f4f 	dsb	sy
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    3e22:	46c0      	nop			; (mov r8, r8)
    3e24:	e7fd      	b.n	3e22 <Parser_SystemReboot+0xe>
    3e26:	46c0      	nop			; (mov r8, r8)
    3e28:	05fa0004 	.word	0x05fa0004
    3e2c:	e000ed00 	.word	0xe000ed00

00003e30 <Parser_SystemFactReset>:
{
    3e30:	b510      	push	{r4, lr}
	PDS_DeleteAll();
    3e32:	4b05      	ldr	r3, [pc, #20]	; (3e48 <Parser_SystemFactReset+0x18>)
    3e34:	4798      	blx	r3
    3e36:	f3bf 8f4f 	dsb	sy
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
    3e3a:	4a04      	ldr	r2, [pc, #16]	; (3e4c <Parser_SystemFactReset+0x1c>)
    3e3c:	4b04      	ldr	r3, [pc, #16]	; (3e50 <Parser_SystemFactReset+0x20>)
    3e3e:	60da      	str	r2, [r3, #12]
    3e40:	f3bf 8f4f 	dsb	sy
    __NOP();
    3e44:	46c0      	nop			; (mov r8, r8)
    3e46:	e7fd      	b.n	3e44 <Parser_SystemFactReset+0x14>
    3e48:	0000e255 	.word	0x0000e255
    3e4c:	05fa0004 	.word	0x05fa0004
    3e50:	e000ed00 	.word	0xe000ed00

00003e54 <Parser_SystemSleep>:
{
    3e54:	b530      	push	{r4, r5, lr}
    3e56:	b085      	sub	sp, #20
    3e58:	0004      	movs	r4, r0
    PMM_SleepReq_t sleepRequest = {
    3e5a:	ab01      	add	r3, sp, #4
    3e5c:	2200      	movs	r2, #0
    3e5e:	9201      	str	r2, [sp, #4]
    3e60:	21ff      	movs	r1, #255	; 0xff
    3e62:	7119      	strb	r1, [r3, #4]
    3e64:	9203      	str	r2, [sp, #12]
    uint32_t sleepDuration = strtoul(pParserCmdInfo->pParam2, NULL, 10);
    3e66:	320a      	adds	r2, #10
    3e68:	2100      	movs	r1, #0
    3e6a:	6840      	ldr	r0, [r0, #4]
    3e6c:	4b24      	ldr	r3, [pc, #144]	; (3f00 <Parser_SystemSleep+0xac>)
    3e6e:	4798      	blx	r3
    3e70:	0005      	movs	r5, r0
		if(0 == stricmp(pParserCmdInfo->pParam1, gapParseSleepMode[iCount]))
    3e72:	4924      	ldr	r1, [pc, #144]	; (3f04 <Parser_SystemSleep+0xb0>)
    3e74:	6820      	ldr	r0, [r4, #0]
    3e76:	4b24      	ldr	r3, [pc, #144]	; (3f08 <Parser_SystemSleep+0xb4>)
    3e78:	4798      	blx	r3
    3e7a:	2800      	cmp	r0, #0
    3e7c:	d009      	beq.n	3e92 <Parser_SystemSleep+0x3e>
    3e7e:	4923      	ldr	r1, [pc, #140]	; (3f0c <Parser_SystemSleep+0xb8>)
    3e80:	6820      	ldr	r0, [r4, #0]
    3e82:	4b21      	ldr	r3, [pc, #132]	; (3f08 <Parser_SystemSleep+0xb4>)
    3e84:	4798      	blx	r3
    3e86:	2800      	cmp	r0, #0
    3e88:	d038      	beq.n	3efc <Parser_SystemSleep+0xa8>
        pParserCmdInfo->pReplyCmd = (char *) gapParserSysStatus[INVALID_PARAM_IDX];
    3e8a:	4b21      	ldr	r3, [pc, #132]	; (3f10 <Parser_SystemSleep+0xbc>)
    3e8c:	6163      	str	r3, [r4, #20]
}
    3e8e:	b005      	add	sp, #20
    3e90:	bd30      	pop	{r4, r5, pc}
	for(uint8_t iCount = 0; iCount < sizeof(gapParseSleepMode)/sizeof(gapParseSleepMode[0]); iCount++)
    3e92:	2200      	movs	r2, #0
    if ( (1 /* invalid range */ < sleepModeValue) || \
    3e94:	491f      	ldr	r1, [pc, #124]	; (3f14 <Parser_SystemSleep+0xc0>)
    3e96:	4b20      	ldr	r3, [pc, #128]	; (3f18 <Parser_SystemSleep+0xc4>)
    3e98:	18eb      	adds	r3, r5, r3
    3e9a:	428b      	cmp	r3, r1
    3e9c:	d8f5      	bhi.n	3e8a <Parser_SystemSleep+0x36>
        sleepRequest.sleepTimeMs = sleepDuration;
    3e9e:	9501      	str	r5, [sp, #4]
        sleepRequest.pmmWakeupCallback = parserSleepCallback;
    3ea0:	4b1e      	ldr	r3, [pc, #120]	; (3f1c <Parser_SystemSleep+0xc8>)
    3ea2:	9303      	str	r3, [sp, #12]
        sleepRequest.sleep_mode = ( 0 /* standby */ == sleepModeValue ) ? SLEEP_MODE_STANDBY : SLEEP_MODE_BACKUP;
    3ea4:	0013      	movs	r3, r2
    3ea6:	1e5a      	subs	r2, r3, #1
    3ea8:	4193      	sbcs	r3, r2
    3eaa:	3301      	adds	r3, #1
    3eac:	aa01      	add	r2, sp, #4
    3eae:	7113      	strb	r3, [r2, #4]
    SleepEnabled = true;
    3eb0:	2201      	movs	r2, #1
    3eb2:	4b1b      	ldr	r3, [pc, #108]	; (3f20 <Parser_SystemSleep+0xcc>)
    3eb4:	701a      	strb	r2, [r3, #0]
    if ( LORAWAN_ReadyToSleep( deviceResetsForWakeup ) )
    3eb6:	4b1b      	ldr	r3, [pc, #108]	; (3f24 <Parser_SystemSleep+0xd0>)
    3eb8:	7818      	ldrb	r0, [r3, #0]
    3eba:	4b1b      	ldr	r3, [pc, #108]	; (3f28 <Parser_SystemSleep+0xd4>)
    3ebc:	4798      	blx	r3
    3ebe:	2800      	cmp	r0, #0
    3ec0:	d0e5      	beq.n	3e8e <Parser_SystemSleep+0x3a>
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
    3ec2:	2300      	movs	r3, #0
    3ec4:	466a      	mov	r2, sp
    3ec6:	7013      	strb	r3, [r2, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    3ec8:	3301      	adds	r3, #1
    3eca:	7053      	strb	r3, [r2, #1]
static void app_resources_uninit(void)
{
	/* Disable USART TX and RX Pins */
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
	pin_conf.powersave  = true;
    3ecc:	7093      	strb	r3, [r2, #2]
#ifdef HOST_SERCOM_PAD0_PIN
	port_pin_set_config(HOST_SERCOM_PAD0_PIN, &pin_conf);
    3ece:	4669      	mov	r1, sp
    3ed0:	2004      	movs	r0, #4
    3ed2:	4d16      	ldr	r5, [pc, #88]	; (3f2c <Parser_SystemSleep+0xd8>)
    3ed4:	47a8      	blx	r5
#endif
#ifdef HOST_SERCOM_PAD1_PIN
	port_pin_set_config(HOST_SERCOM_PAD1_PIN, &pin_conf);
    3ed6:	4669      	mov	r1, sp
    3ed8:	2005      	movs	r0, #5
    3eda:	47a8      	blx	r5
#endif
	/* Disable UART module */
	sio2host_deinit();
    3edc:	4b14      	ldr	r3, [pc, #80]	; (3f30 <Parser_SystemSleep+0xdc>)
    3ede:	4798      	blx	r3
	/* Disable Transceiver SPI Module */
	HAL_RadioDeInit();
    3ee0:	4b14      	ldr	r3, [pc, #80]	; (3f34 <Parser_SystemSleep+0xe0>)
    3ee2:	4798      	blx	r3
        if ( PMM_SLEEP_REQ_DENIED == PMM_Sleep( &sleepRequest ) )
    3ee4:	a801      	add	r0, sp, #4
    3ee6:	4b14      	ldr	r3, [pc, #80]	; (3f38 <Parser_SystemSleep+0xe4>)
    3ee8:	4798      	blx	r3
    3eea:	2800      	cmp	r0, #0
    3eec:	d1cf      	bne.n	3e8e <Parser_SystemSleep+0x3a>
            HAL_Radio_resources_init();
    3eee:	4b13      	ldr	r3, [pc, #76]	; (3f3c <Parser_SystemSleep+0xe8>)
    3ef0:	4798      	blx	r3
            sio2host_init();
    3ef2:	4b13      	ldr	r3, [pc, #76]	; (3f40 <Parser_SystemSleep+0xec>)
    3ef4:	4798      	blx	r3
            pParserCmdInfo->pReplyCmd = (char *) gapParserSysStatus[ERR_STATUS_IDX];
    3ef6:	4b13      	ldr	r3, [pc, #76]	; (3f44 <Parser_SystemSleep+0xf0>)
    3ef8:	6163      	str	r3, [r4, #20]
    3efa:	e7c8      	b.n	3e8e <Parser_SystemSleep+0x3a>
	for(uint8_t iCount = 0; iCount < sizeof(gapParseSleepMode)/sizeof(gapParseSleepMode[0]); iCount++)
    3efc:	2201      	movs	r2, #1
    3efe:	e7c9      	b.n	3e94 <Parser_SystemSleep+0x40>
    3f00:	0001a5ed 	.word	0x0001a5ed
    3f04:	0001fa2c 	.word	0x0001fa2c
    3f08:	00004359 	.word	0x00004359
    3f0c:	0001fa34 	.word	0x0001fa34
    3f10:	0001f644 	.word	0x0001f644
    3f14:	07cebbc8 	.word	0x07cebbc8
    3f18:	fffffc18 	.word	0xfffffc18
    3f1c:	00003b59 	.word	0x00003b59
    3f20:	20000b54 	.word	0x20000b54
    3f24:	20000b55 	.word	0x20000b55
    3f28:	000141a1 	.word	0x000141a1
    3f2c:	00004f19 	.word	0x00004f19
    3f30:	00007c6d 	.word	0x00007c6d
    3f34:	000080a5 	.word	0x000080a5
    3f38:	00008451 	.word	0x00008451
    3f3c:	00008081 	.word	0x00008081
    3f40:	00007b21 	.word	0x00007b21
    3f44:	0001fa3c 	.word	0x0001fa3c

00003f48 <configure_extint>:
{
    3f48:	b510      	push	{r4, lr}
    3f4a:	b084      	sub	sp, #16
	extint_chan_get_config_defaults(&eint_chan_conf);
    3f4c:	ac01      	add	r4, sp, #4
    3f4e:	0020      	movs	r0, r4
    3f50:	4b07      	ldr	r3, [pc, #28]	; (3f70 <configure_extint+0x28>)
    3f52:	4798      	blx	r3
	eint_chan_conf.gpio_pin           = BUTTON_0_EIC_PIN;
    3f54:	231c      	movs	r3, #28
    3f56:	9301      	str	r3, [sp, #4]
	eint_chan_conf.gpio_pin_mux       = BUTTON_0_EIC_MUX;
    3f58:	2300      	movs	r3, #0
    3f5a:	6063      	str	r3, [r4, #4]
	eint_chan_conf.detection_criteria = EXTINT_DETECT_FALLING;
    3f5c:	3302      	adds	r3, #2
    3f5e:	72e3      	strb	r3, [r4, #11]
	eint_chan_conf.filter_input_signal = true;
    3f60:	3b01      	subs	r3, #1
    3f62:	72a3      	strb	r3, [r4, #10]
	extint_chan_set_config(BUTTON_0_EIC_LINE, &eint_chan_conf);
    3f64:	0021      	movs	r1, r4
    3f66:	2008      	movs	r0, #8
    3f68:	4b02      	ldr	r3, [pc, #8]	; (3f74 <configure_extint+0x2c>)
    3f6a:	4798      	blx	r3
}
    3f6c:	b004      	add	sp, #16
    3f6e:	bd10      	pop	{r4, pc}
    3f70:	00004ab1 	.word	0x00004ab1
    3f74:	00004ac5 	.word	0x00004ac5

00003f78 <configure_eic_callback>:
{
    3f78:	b510      	push	{r4, lr}
	extint_register_callback(
    3f7a:	2200      	movs	r2, #0
    3f7c:	2108      	movs	r1, #8
    3f7e:	4804      	ldr	r0, [pc, #16]	; (3f90 <configure_eic_callback+0x18>)
    3f80:	4b04      	ldr	r3, [pc, #16]	; (3f94 <configure_eic_callback+0x1c>)
    3f82:	4798      	blx	r3
	extint_chan_enable_callback(BUTTON_0_EIC_LINE, EXTINT_CALLBACK_TYPE_DETECT);
    3f84:	2100      	movs	r1, #0
    3f86:	2008      	movs	r0, #8
    3f88:	4b03      	ldr	r3, [pc, #12]	; (3f98 <configure_eic_callback+0x20>)
    3f8a:	4798      	blx	r3
}
    3f8c:	bd10      	pop	{r4, pc}
    3f8e:	46c0      	nop			; (mov r8, r8)
    3f90:	00003b81 	.word	0x00003b81
    3f94:	00004971 	.word	0x00004971
    3f98:	0000499d 	.word	0x0000499d

00003f9c <Parser_RxClearBuffer>:
    "invalid_param",
    "err"
};

void Parser_RxClearBuffer(void)
{
    3f9c:	b570      	push	{r4, r5, r6, lr}
    mRxParserCmd.bCmdStatus = 0;
    3f9e:	4c0b      	ldr	r4, [pc, #44]	; (3fcc <Parser_RxClearBuffer+0x30>)
    3fa0:	2300      	movs	r3, #0
    3fa2:	4a0b      	ldr	r2, [pc, #44]	; (3fd0 <Parser_RxClearBuffer+0x34>)
    3fa4:	54a3      	strb	r3, [r4, r2]
    mRxParserCmd.crtWordIdx = 0;
    3fa6:	4a0b      	ldr	r2, [pc, #44]	; (3fd4 <Parser_RxClearBuffer+0x38>)
    3fa8:	54a3      	strb	r3, [r4, r2]
    mRxParserCmd.crtCmdPos = 0;
    3faa:	3201      	adds	r2, #1
    3fac:	52a3      	strh	r3, [r4, r2]
    mRxParserCmd.crtWordPos = 0;
    3fae:	4a0a      	ldr	r2, [pc, #40]	; (3fd8 <Parser_RxClearBuffer+0x3c>)
    3fb0:	52a3      	strh	r3, [r4, r2]
    
    memset((_PTR)mRxParserCmd.wordLen, 0, PARSER_DEF_CMD_MAX_IDX << 1);
    3fb2:	4b0a      	ldr	r3, [pc, #40]	; (3fdc <Parser_RxClearBuffer+0x40>)
    3fb4:	18e0      	adds	r0, r4, r3
    3fb6:	2214      	movs	r2, #20
    3fb8:	2100      	movs	r1, #0
    3fba:	4d09      	ldr	r5, [pc, #36]	; (3fe0 <Parser_RxClearBuffer+0x44>)
    3fbc:	47a8      	blx	r5
    memset((_PTR)mRxParserCmd.wordStartPos, 0, PARSER_DEF_CMD_MAX_IDX << 1);
    3fbe:	4b09      	ldr	r3, [pc, #36]	; (3fe4 <Parser_RxClearBuffer+0x48>)
    3fc0:	18e0      	adds	r0, r4, r3
    3fc2:	2214      	movs	r2, #20
    3fc4:	2100      	movs	r1, #0
    3fc6:	47a8      	blx	r5
}
    3fc8:	bd70      	pop	{r4, r5, r6, pc}
    3fca:	46c0      	nop			; (mov r8, r8)
    3fcc:	20001f98 	.word	0x20001f98
    3fd0:	0000024e 	.word	0x0000024e
    3fd4:	0000024f 	.word	0x0000024f
    3fd8:	00000252 	.word	0x00000252
    3fdc:	00000226 	.word	0x00000226
    3fe0:	00019ead 	.word	0x00019ead
    3fe4:	0000023a 	.word	0x0000023a

00003fe8 <Parser_TxAddReply>:
    }

}

void Parser_TxAddReply(char* pReplyStr, uint16_t replyStrLen)
{
    3fe8:	b570      	push	{r4, r5, r6, lr}
    3fea:	0005      	movs	r5, r0
    3fec:	1e0c      	subs	r4, r1, #0
    uint16_t iCtr = replyStrLen;
	
	/* Check if the length of UART String is can be fit in SIO2HOST TX Buffer */
	while(0 != iCtr)
    3fee:	d00f      	beq.n	4010 <Parser_TxAddReply+0x28>
			sio2host_tx((uint8_t *)pReplyStr,(uint8_t)iCtr);
			iCtr = 0;
		}
		else
		{
			sio2host_tx((uint8_t *)pReplyStr, BYTE_VALUE_LEN);
    3ff0:	4e0a      	ldr	r6, [pc, #40]	; (401c <Parser_TxAddReply+0x34>)
    3ff2:	e007      	b.n	4004 <Parser_TxAddReply+0x1c>
    3ff4:	21ff      	movs	r1, #255	; 0xff
    3ff6:	0028      	movs	r0, r5
    3ff8:	47b0      	blx	r6
			iCtr -= BYTE_VALUE_LEN;
    3ffa:	3cff      	subs	r4, #255	; 0xff
    3ffc:	b2a4      	uxth	r4, r4
			pReplyStr = pReplyStr + BYTE_VALUE_LEN;
    3ffe:	35ff      	adds	r5, #255	; 0xff
	while(0 != iCtr)
    4000:	2c00      	cmp	r4, #0
    4002:	d005      	beq.n	4010 <Parser_TxAddReply+0x28>
		if(BYTE_VALUE_LEN >= iCtr)
    4004:	2cff      	cmp	r4, #255	; 0xff
    4006:	d8f5      	bhi.n	3ff4 <Parser_TxAddReply+0xc>
			sio2host_tx((uint8_t *)pReplyStr,(uint8_t)iCtr);
    4008:	b2e1      	uxtb	r1, r4
    400a:	0028      	movs	r0, r5
    400c:	4b03      	ldr	r3, [pc, #12]	; (401c <Parser_TxAddReply+0x34>)
    400e:	4798      	blx	r3
		}
	}
	
    /* Put the delimiter string in UART */
	sio2host_tx((uint8_t *)gpParserLineDelim,strlen(gpParserLineDelim));
    4010:	2102      	movs	r1, #2
    4012:	4803      	ldr	r0, [pc, #12]	; (4020 <Parser_TxAddReply+0x38>)
    4014:	4b01      	ldr	r3, [pc, #4]	; (401c <Parser_TxAddReply+0x34>)
    4016:	4798      	blx	r3
	
}
    4018:	bd70      	pop	{r4, r5, r6, pc}
    401a:	46c0      	nop			; (mov r8, r8)
    401c:	00007cd9 	.word	0x00007cd9
    4020:	0001fa74 	.word	0x0001fa74

00004024 <Parser_RxAddChar>:
{
    4024:	b570      	push	{r4, r5, r6, lr}
    if(rxChar == '\b')
    4026:	2808      	cmp	r0, #8
    4028:	d047      	beq.n	40ba <Parser_RxAddChar+0x96>
    if(mRxParserCmd.crtCmdPos < PARSER_DEF_CMD_MAX_LEN - 1)
    402a:	2394      	movs	r3, #148	; 0x94
    402c:	009b      	lsls	r3, r3, #2
    402e:	4a58      	ldr	r2, [pc, #352]	; (4190 <Parser_RxAddChar+0x16c>)
    4030:	5ad3      	ldrh	r3, [r2, r3]
    4032:	b29b      	uxth	r3, r3
    4034:	2289      	movs	r2, #137	; 0x89
    4036:	0092      	lsls	r2, r2, #2
    4038:	4293      	cmp	r3, r2
    403a:	d900      	bls.n	403e <Parser_RxAddChar+0x1a>
    403c:	e0a1      	b.n	4182 <Parser_RxAddChar+0x15e>
        if(rxChar == ' ')
    403e:	2820      	cmp	r0, #32
    4040:	d100      	bne.n	4044 <Parser_RxAddChar+0x20>
    4042:	e073      	b.n	412c <Parser_RxAddChar+0x108>
            mRxParserCmd.cmd[mRxParserCmd.crtCmdPos ++] = rxChar;
    4044:	4b52      	ldr	r3, [pc, #328]	; (4190 <Parser_RxAddChar+0x16c>)
    4046:	2194      	movs	r1, #148	; 0x94
    4048:	0089      	lsls	r1, r1, #2
    404a:	5a5a      	ldrh	r2, [r3, r1]
    404c:	b292      	uxth	r2, r2
    404e:	1c54      	adds	r4, r2, #1
    4050:	b2a4      	uxth	r4, r4
    4052:	525c      	strh	r4, [r3, r1]
    4054:	5498      	strb	r0, [r3, r2]
            mRxParserCmd.crtWordPos ++;
    4056:	484f      	ldr	r0, [pc, #316]	; (4194 <Parser_RxAddChar+0x170>)
    4058:	5a1a      	ldrh	r2, [r3, r0]
    405a:	3201      	adds	r2, #1
    405c:	b292      	uxth	r2, r2
    405e:	521a      	strh	r2, [r3, r0]
            if(mRxParserCmd.crtCmdPos >= strlen(gpParserLineDelim))
    4060:	5a5b      	ldrh	r3, [r3, r1]
    4062:	b29b      	uxth	r3, r3
    4064:	2b01      	cmp	r3, #1
    4066:	d959      	bls.n	411c <Parser_RxAddChar+0xf8>
                    if(mRxParserCmd.cmd[mRxParserCmd.crtCmdPos - iCount] != gpParserLineDelim[strlen(gpParserLineDelim) - iCount])
    4068:	4a49      	ldr	r2, [pc, #292]	; (4190 <Parser_RxAddChar+0x16c>)
    406a:	5a53      	ldrh	r3, [r2, r1]
    406c:	3b02      	subs	r3, #2
    406e:	5cd3      	ldrb	r3, [r2, r3]
                for(iCount = strlen(gpParserLineDelim); (iCount > 0U) && bIsEndLine; iCount --)
    4070:	2b0d      	cmp	r3, #13
    4072:	d153      	bne.n	411c <Parser_RxAddChar+0xf8>
                    if(mRxParserCmd.cmd[mRxParserCmd.crtCmdPos - iCount] != gpParserLineDelim[strlen(gpParserLineDelim) - iCount])
    4074:	5a53      	ldrh	r3, [r2, r1]
    4076:	3b01      	subs	r3, #1
    4078:	5cd3      	ldrb	r3, [r2, r3]
            if(bIsEndLine)
    407a:	2b0a      	cmp	r3, #10
    407c:	d14e      	bne.n	411c <Parser_RxAddChar+0xf8>
                mRxParserCmd.cmd[mRxParserCmd.crtCmdPos - strlen(gpParserLineDelim)] = '\0';
    407e:	0013      	movs	r3, r2
    4080:	000c      	movs	r4, r1
    4082:	5a52      	ldrh	r2, [r2, r1]
    4084:	3a02      	subs	r2, #2
    4086:	2100      	movs	r1, #0
    4088:	5499      	strb	r1, [r3, r2]
                mRxParserCmd.wordLen[mRxParserCmd.crtWordIdx] = mRxParserCmd.crtWordPos - strlen(gpParserLineDelim);
    408a:	4d43      	ldr	r5, [pc, #268]	; (4198 <Parser_RxAddChar+0x174>)
    408c:	5d5a      	ldrb	r2, [r3, r5]
    408e:	5a19      	ldrh	r1, [r3, r0]
    4090:	3902      	subs	r1, #2
    4092:	b289      	uxth	r1, r1
    4094:	3211      	adds	r2, #17
    4096:	32ff      	adds	r2, #255	; 0xff
    4098:	0052      	lsls	r2, r2, #1
    409a:	189a      	adds	r2, r3, r2
    409c:	80d1      	strh	r1, [r2, #6]
                mRxParserCmd.wordStartPos[mRxParserCmd.crtWordIdx] = mRxParserCmd.crtCmdPos - mRxParserCmd.crtWordPos;
    409e:	5d5a      	ldrb	r2, [r3, r5]
    40a0:	5b19      	ldrh	r1, [r3, r4]
    40a2:	5a18      	ldrh	r0, [r3, r0]
    40a4:	1a09      	subs	r1, r1, r0
    40a6:	b289      	uxth	r1, r1
    40a8:	321d      	adds	r2, #29
    40aa:	32ff      	adds	r2, #255	; 0xff
    40ac:	0052      	lsls	r2, r2, #1
    40ae:	189a      	adds	r2, r3, r2
    40b0:	8051      	strh	r1, [r2, #2]
                mRxParserCmd.bCmdStatus = 1;
    40b2:	2101      	movs	r1, #1
    40b4:	4a39      	ldr	r2, [pc, #228]	; (419c <Parser_RxAddChar+0x178>)
    40b6:	5499      	strb	r1, [r3, r2]
    40b8:	e030      	b.n	411c <Parser_RxAddChar+0xf8>
        if(mRxParserCmd.crtCmdPos > 0U)
    40ba:	2394      	movs	r3, #148	; 0x94
    40bc:	009b      	lsls	r3, r3, #2
    40be:	4a34      	ldr	r2, [pc, #208]	; (4190 <Parser_RxAddChar+0x16c>)
    40c0:	5ad3      	ldrh	r3, [r2, r3]
    40c2:	b29b      	uxth	r3, r3
    40c4:	2b00      	cmp	r3, #0
    40c6:	d029      	beq.n	411c <Parser_RxAddChar+0xf8>
            if(mRxParserCmd.cmd[mRxParserCmd.crtCmdPos - 1] == '\0')
    40c8:	2394      	movs	r3, #148	; 0x94
    40ca:	009b      	lsls	r3, r3, #2
    40cc:	5ad3      	ldrh	r3, [r2, r3]
    40ce:	3b01      	subs	r3, #1
    40d0:	5cd3      	ldrb	r3, [r2, r3]
    40d2:	2b00      	cmp	r3, #0
    40d4:	d123      	bne.n	411e <Parser_RxAddChar+0xfa>
                mRxParserCmd.crtWordIdx --;
    40d6:	0013      	movs	r3, r2
    40d8:	492f      	ldr	r1, [pc, #188]	; (4198 <Parser_RxAddChar+0x174>)
    40da:	5c52      	ldrb	r2, [r2, r1]
    40dc:	3a01      	subs	r2, #1
    40de:	b2d2      	uxtb	r2, r2
    40e0:	545a      	strb	r2, [r3, r1]
                mRxParserCmd.crtWordPos = mRxParserCmd.wordLen[mRxParserCmd.crtWordIdx];
    40e2:	5c5a      	ldrb	r2, [r3, r1]
    40e4:	3211      	adds	r2, #17
    40e6:	32ff      	adds	r2, #255	; 0xff
    40e8:	0052      	lsls	r2, r2, #1
    40ea:	189a      	adds	r2, r3, r2
    40ec:	88d2      	ldrh	r2, [r2, #6]
    40ee:	b292      	uxth	r2, r2
    40f0:	4828      	ldr	r0, [pc, #160]	; (4194 <Parser_RxAddChar+0x170>)
    40f2:	521a      	strh	r2, [r3, r0]
                mRxParserCmd.wordLen[mRxParserCmd.crtWordIdx] = 0U;
    40f4:	5c5a      	ldrb	r2, [r3, r1]
    40f6:	3211      	adds	r2, #17
    40f8:	32ff      	adds	r2, #255	; 0xff
    40fa:	0052      	lsls	r2, r2, #1
    40fc:	189a      	adds	r2, r3, r2
    40fe:	2000      	movs	r0, #0
    4100:	80d0      	strh	r0, [r2, #6]
                mRxParserCmd.wordStartPos[mRxParserCmd.crtWordIdx] = 0U;
    4102:	5c5a      	ldrb	r2, [r3, r1]
    4104:	321d      	adds	r2, #29
    4106:	32ff      	adds	r2, #255	; 0xff
    4108:	0052      	lsls	r2, r2, #1
    410a:	189b      	adds	r3, r3, r2
    410c:	8058      	strh	r0, [r3, #2]
            mRxParserCmd.crtCmdPos --;
    410e:	4920      	ldr	r1, [pc, #128]	; (4190 <Parser_RxAddChar+0x16c>)
    4110:	2294      	movs	r2, #148	; 0x94
    4112:	0092      	lsls	r2, r2, #2
    4114:	5a8b      	ldrh	r3, [r1, r2]
    4116:	3b01      	subs	r3, #1
    4118:	b29b      	uxth	r3, r3
    411a:	528b      	strh	r3, [r1, r2]
}
    411c:	bd70      	pop	{r4, r5, r6, pc}
                mRxParserCmd.crtWordPos --;
    411e:	491c      	ldr	r1, [pc, #112]	; (4190 <Parser_RxAddChar+0x16c>)
    4120:	4a1c      	ldr	r2, [pc, #112]	; (4194 <Parser_RxAddChar+0x170>)
    4122:	5a8b      	ldrh	r3, [r1, r2]
    4124:	3b01      	subs	r3, #1
    4126:	b29b      	uxth	r3, r3
    4128:	528b      	strh	r3, [r1, r2]
    412a:	e7f0      	b.n	410e <Parser_RxAddChar+0xea>
            if(mRxParserCmd.crtWordIdx < PARSER_DEF_CMD_MAX_IDX - 1)
    412c:	4b1a      	ldr	r3, [pc, #104]	; (4198 <Parser_RxAddChar+0x174>)
    412e:	4a18      	ldr	r2, [pc, #96]	; (4190 <Parser_RxAddChar+0x16c>)
    4130:	5cd3      	ldrb	r3, [r2, r3]
    4132:	b2db      	uxtb	r3, r3
    4134:	2b08      	cmp	r3, #8
    4136:	d824      	bhi.n	4182 <Parser_RxAddChar+0x15e>
                mRxParserCmd.cmd[mRxParserCmd.crtCmdPos ++] = '\0';
    4138:	0013      	movs	r3, r2
    413a:	2194      	movs	r1, #148	; 0x94
    413c:	0089      	lsls	r1, r1, #2
    413e:	5a52      	ldrh	r2, [r2, r1]
    4140:	b292      	uxth	r2, r2
    4142:	1c50      	adds	r0, r2, #1
    4144:	b280      	uxth	r0, r0
    4146:	5258      	strh	r0, [r3, r1]
    4148:	2500      	movs	r5, #0
    414a:	549d      	strb	r5, [r3, r2]
                mRxParserCmd.wordLen[mRxParserCmd.crtWordIdx] = mRxParserCmd.crtWordPos;
    414c:	4812      	ldr	r0, [pc, #72]	; (4198 <Parser_RxAddChar+0x174>)
    414e:	5c1a      	ldrb	r2, [r3, r0]
    4150:	4c10      	ldr	r4, [pc, #64]	; (4194 <Parser_RxAddChar+0x170>)
    4152:	5b1e      	ldrh	r6, [r3, r4]
    4154:	b2b6      	uxth	r6, r6
    4156:	3211      	adds	r2, #17
    4158:	32ff      	adds	r2, #255	; 0xff
    415a:	0052      	lsls	r2, r2, #1
    415c:	189a      	adds	r2, r3, r2
    415e:	80d6      	strh	r6, [r2, #6]
                mRxParserCmd.wordStartPos[mRxParserCmd.crtWordIdx] = mRxParserCmd.crtCmdPos - mRxParserCmd.crtWordPos - 1;
    4160:	5c1a      	ldrb	r2, [r3, r0]
    4162:	5a59      	ldrh	r1, [r3, r1]
    4164:	5b1e      	ldrh	r6, [r3, r4]
    4166:	3901      	subs	r1, #1
    4168:	1b89      	subs	r1, r1, r6
    416a:	b289      	uxth	r1, r1
    416c:	321d      	adds	r2, #29
    416e:	32ff      	adds	r2, #255	; 0xff
    4170:	0052      	lsls	r2, r2, #1
    4172:	189a      	adds	r2, r3, r2
    4174:	8051      	strh	r1, [r2, #2]
                mRxParserCmd.crtWordIdx ++;
    4176:	5c1a      	ldrb	r2, [r3, r0]
    4178:	3201      	adds	r2, #1
    417a:	b2d2      	uxtb	r2, r2
    417c:	541a      	strb	r2, [r3, r0]
                mRxParserCmd.crtWordPos = 0;
    417e:	531d      	strh	r5, [r3, r4]
    4180:	e7cc      	b.n	411c <Parser_RxAddChar+0xf8>
        Parser_RxClearBuffer();
    4182:	4b07      	ldr	r3, [pc, #28]	; (41a0 <Parser_RxAddChar+0x17c>)
    4184:	4798      	blx	r3
        Parser_TxAddReply((char*)gapParserTspStatus[ERR_STATUS_IDX], strlen(gapParserTspStatus[ERR_STATUS_IDX]));
    4186:	2103      	movs	r1, #3
    4188:	4806      	ldr	r0, [pc, #24]	; (41a4 <Parser_RxAddChar+0x180>)
    418a:	4b07      	ldr	r3, [pc, #28]	; (41a8 <Parser_RxAddChar+0x184>)
    418c:	4798      	blx	r3
    418e:	e7c5      	b.n	411c <Parser_RxAddChar+0xf8>
    4190:	20001f98 	.word	0x20001f98
    4194:	00000252 	.word	0x00000252
    4198:	0000024f 	.word	0x0000024f
    419c:	0000024e 	.word	0x0000024e
    41a0:	00003f9d 	.word	0x00003f9d
    41a4:	0001fa3c 	.word	0x0001fa3c
    41a8:	00003fe9 	.word	0x00003fe9

000041ac <Validate_HexValue>:
    "off",
    "on"
};

bool Validate_HexValue(void* pValue)
 {
    41ac:	b570      	push	{r4, r5, r6, lr}
    bool flag = true;
    char* character;

    for(character = pValue; *character; character++)
    41ae:	7803      	ldrb	r3, [r0, #0]
    41b0:	2b00      	cmp	r3, #0
    41b2:	d00e      	beq.n	41d2 <Validate_HexValue+0x26>
    41b4:	0004      	movs	r4, r0
    {
        if(isxdigit(*character) == 0)
    41b6:	4e09      	ldr	r6, [pc, #36]	; (41dc <Validate_HexValue+0x30>)
    41b8:	2544      	movs	r5, #68	; 0x44
    41ba:	47b0      	blx	r6
    41bc:	7823      	ldrb	r3, [r4, #0]
    41be:	18c0      	adds	r0, r0, r3
    41c0:	7843      	ldrb	r3, [r0, #1]
    41c2:	421d      	tst	r5, r3
    41c4:	d007      	beq.n	41d6 <Validate_HexValue+0x2a>
    for(character = pValue; *character; character++)
    41c6:	3401      	adds	r4, #1
    41c8:	7823      	ldrb	r3, [r4, #0]
    41ca:	2b00      	cmp	r3, #0
    41cc:	d1f5      	bne.n	41ba <Validate_HexValue+0xe>
    bool flag = true;
    41ce:	2001      	movs	r0, #1
    41d0:	e002      	b.n	41d8 <Validate_HexValue+0x2c>
    41d2:	2001      	movs	r0, #1
    41d4:	e000      	b.n	41d8 <Validate_HexValue+0x2c>
        {
            flag = false;
    41d6:	2000      	movs	r0, #0
            break;
        }
    }

    return flag;
}
    41d8:	bd70      	pop	{r4, r5, r6, pc}
    41da:	46c0      	nop			; (mov r8, r8)
    41dc:	00019765 	.word	0x00019765

000041e0 <Parser_IntArrayToHexAscii>:

    return retValue;
}

void Parser_IntArrayToHexAscii(uint8_t arrayLen, uint8_t* pInArray, char* pOutHexAscii)
{
    41e0:	b5f0      	push	{r4, r5, r6, r7, lr}
    41e2:	46ce      	mov	lr, r9
    41e4:	4647      	mov	r7, r8
    41e6:	b580      	push	{r7, lr}
    41e8:	b083      	sub	sp, #12
    41ea:	4680      	mov	r8, r0
    41ec:	9201      	str	r2, [sp, #4]
    uint8_t iCtr = 0U;

    for(iCtr = 0; iCtr < arrayLen; iCtr ++)
    41ee:	2800      	cmp	r0, #0
    41f0:	d019      	beq.n	4226 <Parser_IntArrayToHexAscii+0x46>
    41f2:	000c      	movs	r4, r1
    41f4:	0015      	movs	r5, r2
    41f6:	1e47      	subs	r7, r0, #1
    41f8:	b2ff      	uxtb	r7, r7
    41fa:	3701      	adds	r7, #1
    41fc:	19cf      	adds	r7, r1, r7
    {
        itoa(pInArray[iCtr], (char *)&pOutHexAscii[iCtr << 1], 16);
    41fe:	4e0f      	ldr	r6, [pc, #60]	; (423c <Parser_IntArrayToHexAscii+0x5c>)

        if(pInArray[iCtr] <= 15)
        {
            /* Special treatment for figures [0..9]  */
            pOutHexAscii[(iCtr << 1) + 1] = pOutHexAscii[iCtr << 1];
            pOutHexAscii[iCtr << 1] = '0';
    4200:	2330      	movs	r3, #48	; 0x30
    4202:	4699      	mov	r9, r3
    4204:	e003      	b.n	420e <Parser_IntArrayToHexAscii+0x2e>
    4206:	3401      	adds	r4, #1
    4208:	3502      	adds	r5, #2
    for(iCtr = 0; iCtr < arrayLen; iCtr ++)
    420a:	42bc      	cmp	r4, r7
    420c:	d00b      	beq.n	4226 <Parser_IntArrayToHexAscii+0x46>
        itoa(pInArray[iCtr], (char *)&pOutHexAscii[iCtr << 1], 16);
    420e:	7820      	ldrb	r0, [r4, #0]
    4210:	2210      	movs	r2, #16
    4212:	0029      	movs	r1, r5
    4214:	47b0      	blx	r6
        if(pInArray[iCtr] <= 15)
    4216:	7823      	ldrb	r3, [r4, #0]
    4218:	2b0f      	cmp	r3, #15
    421a:	d8f4      	bhi.n	4206 <Parser_IntArrayToHexAscii+0x26>
            pOutHexAscii[(iCtr << 1) + 1] = pOutHexAscii[iCtr << 1];
    421c:	782b      	ldrb	r3, [r5, #0]
    421e:	706b      	strb	r3, [r5, #1]
            pOutHexAscii[iCtr << 1] = '0';
    4220:	464b      	mov	r3, r9
    4222:	702b      	strb	r3, [r5, #0]
    4224:	e7ef      	b.n	4206 <Parser_IntArrayToHexAscii+0x26>
        }
    }

    pOutHexAscii[(iCtr << 1)] = '\0';
    4226:	4643      	mov	r3, r8
    4228:	005b      	lsls	r3, r3, #1
    422a:	2200      	movs	r2, #0
    422c:	9901      	ldr	r1, [sp, #4]
    422e:	54ca      	strb	r2, [r1, r3]
}
    4230:	b003      	add	sp, #12
    4232:	bc0c      	pop	{r2, r3}
    4234:	4690      	mov	r8, r2
    4236:	4699      	mov	r9, r3
    4238:	bdf0      	pop	{r4, r5, r6, r7, pc}
    423a:	46c0      	nop			; (mov r8, r8)
    423c:	00019735 	.word	0x00019735

00004240 <Validate_Uint8DecAsciiValue>:

bool Validate_Uint8DecAsciiValue(void* pValue, uint8_t* pDecValue)
{
    4240:	b5f0      	push	{r4, r5, r6, r7, lr}
    4242:	b083      	sub	sp, #12
    4244:	0004      	movs	r4, r0
    4246:	9101      	str	r1, [sp, #4]
    bool flag = false;
    char* character;
    uint16_t valueLen = strlen(pValue);
    4248:	4b10      	ldr	r3, [pc, #64]	; (428c <Validate_Uint8DecAsciiValue+0x4c>)
    424a:	4798      	blx	r3
    424c:	0006      	movs	r6, r0
    int32_t value = atoi(pValue);
    424e:	0020      	movs	r0, r4
    4250:	4b0f      	ldr	r3, [pc, #60]	; (4290 <Validate_Uint8DecAsciiValue+0x50>)
    4252:	4798      	blx	r3
    4254:	0007      	movs	r7, r0

    // Maximum 3 ascii characters 0-> 255
    if((valueLen <= 3U) && (value >= 0) && (value <= 255))
    4256:	b2b6      	uxth	r6, r6
    4258:	2e03      	cmp	r6, #3
    425a:	d814      	bhi.n	4286 <Validate_Uint8DecAsciiValue+0x46>
    425c:	28ff      	cmp	r0, #255	; 0xff
    425e:	d812      	bhi.n	4286 <Validate_Uint8DecAsciiValue+0x46>
    {
        flag = true;

        for(character = pValue; *character; character++)
    4260:	7823      	ldrb	r3, [r4, #0]
    4262:	2b00      	cmp	r3, #0
    4264:	d00b      	beq.n	427e <Validate_Uint8DecAsciiValue+0x3e>
        {
            if(isdigit(*character) == 0)
    4266:	4d0b      	ldr	r5, [pc, #44]	; (4294 <Validate_Uint8DecAsciiValue+0x54>)
    4268:	2604      	movs	r6, #4
    426a:	47a8      	blx	r5
    426c:	7823      	ldrb	r3, [r4, #0]
    426e:	18c0      	adds	r0, r0, r3
    4270:	7843      	ldrb	r3, [r0, #1]
    4272:	421e      	tst	r6, r3
    4274:	d007      	beq.n	4286 <Validate_Uint8DecAsciiValue+0x46>
        for(character = pValue; *character; character++)
    4276:	3401      	adds	r4, #1
    4278:	7823      	ldrb	r3, [r4, #0]
    427a:	2b00      	cmp	r3, #0
    427c:	d1f5      	bne.n	426a <Validate_Uint8DecAsciiValue+0x2a>
        }
    }

    if(flag)
    {
        *pDecValue = (uint8_t)value;
    427e:	9b01      	ldr	r3, [sp, #4]
    4280:	701f      	strb	r7, [r3, #0]
    4282:	2001      	movs	r0, #1
    4284:	e000      	b.n	4288 <Validate_Uint8DecAsciiValue+0x48>
        for(character = pValue; *character; character++)
    4286:	2000      	movs	r0, #0
    }

    return flag;
}
    4288:	b003      	add	sp, #12
    428a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    428c:	0001a2e1 	.word	0x0001a2e1
    4290:	000196b1 	.word	0x000196b1
    4294:	00019765 	.word	0x00019765

00004298 <ultoa>:

/*
 * \brief Converts String to Un-singed Long Integer
 */ 
char * ultoa(char * str, unsigned long num,  int radix)
{
    4298:	b5f0      	push	{r4, r5, r6, r7, lr}
    429a:	46d6      	mov	lr, sl
    429c:	b500      	push	{lr}
    429e:	b08e      	sub	sp, #56	; 0x38
    42a0:	9003      	str	r0, [sp, #12]
    42a2:	000c      	movs	r4, r1
    42a4:	9201      	str	r2, [sp, #4]
    42a6:	2500      	movs	r5, #0
   int digit;
   int str_loc = 0;

   /*construct a backward string of the number. */
   do {
	   digit = (unsigned long)num % radix;
    42a8:	4b18      	ldr	r3, [pc, #96]	; (430c <ultoa+0x74>)
    42aa:	469a      	mov	sl, r3
	   if (digit < 10)
	   temp[temp_loc++] = digit + '0';
	   else
	   temp[temp_loc++] = digit - 10 + 'A';
    42ac:	af05      	add	r7, sp, #20
	   num = ((unsigned long)num) / radix;
    42ae:	4e18      	ldr	r6, [pc, #96]	; (4310 <ultoa+0x78>)
    42b0:	e009      	b.n	42c6 <ultoa+0x2e>
	   temp[temp_loc++] = digit - 10 + 'A';
    42b2:	3137      	adds	r1, #55	; 0x37
    42b4:	55e9      	strb	r1, [r5, r7]
	   num = ((unsigned long)num) / radix;
    42b6:	9901      	ldr	r1, [sp, #4]
    42b8:	0020      	movs	r0, r4
    42ba:	47b0      	blx	r6
    42bc:	0004      	movs	r4, r0
    42be:	1c6b      	adds	r3, r5, #1
   } while ((unsigned long)num > 0);
    42c0:	2800      	cmp	r0, #0
    42c2:	d009      	beq.n	42d8 <ultoa+0x40>
    42c4:	001d      	movs	r5, r3
    42c6:	9502      	str	r5, [sp, #8]
	   digit = (unsigned long)num % radix;
    42c8:	9901      	ldr	r1, [sp, #4]
    42ca:	0020      	movs	r0, r4
    42cc:	47d0      	blx	sl
	   if (digit < 10)
    42ce:	2909      	cmp	r1, #9
    42d0:	dcef      	bgt.n	42b2 <ultoa+0x1a>
	   temp[temp_loc++] = digit + '0';
    42d2:	3130      	adds	r1, #48	; 0x30
    42d4:	55e9      	strb	r1, [r5, r7]
    42d6:	e7ee      	b.n	42b6 <ultoa+0x1e>

   temp_loc--;


   /* now reverse the string. */
   while ( temp_loc >=0 ) {
    42d8:	9b02      	ldr	r3, [sp, #8]
    42da:	2b00      	cmp	r3, #0
    42dc:	db14      	blt.n	4308 <ultoa+0x70>
    42de:	ab05      	add	r3, sp, #20
    42e0:	195b      	adds	r3, r3, r5
    42e2:	9a03      	ldr	r2, [sp, #12]
    42e4:	a904      	add	r1, sp, #16
    42e6:	1cc8      	adds	r0, r1, #3
	   /* while there are still chars */
	   str[str_loc++] = temp[temp_loc--];
    42e8:	7819      	ldrb	r1, [r3, #0]
    42ea:	7011      	strb	r1, [r2, #0]
    42ec:	3b01      	subs	r3, #1
    42ee:	3201      	adds	r2, #1
   while ( temp_loc >=0 ) {
    42f0:	4283      	cmp	r3, r0
    42f2:	d1f9      	bne.n	42e8 <ultoa+0x50>
    42f4:	9e02      	ldr	r6, [sp, #8]
    42f6:	3601      	adds	r6, #1
   }
   /* add null termination. */
   str[str_loc] = 0; 
    42f8:	2300      	movs	r3, #0
    42fa:	9a03      	ldr	r2, [sp, #12]
    42fc:	5593      	strb	r3, [r2, r6]

   return str;
}
    42fe:	0010      	movs	r0, r2
    4300:	b00e      	add	sp, #56	; 0x38
    4302:	bc04      	pop	{r2}
    4304:	4692      	mov	sl, r2
    4306:	bdf0      	pop	{r4, r5, r6, r7, pc}
   while ( temp_loc >=0 ) {
    4308:	2600      	movs	r6, #0
    430a:	e7f5      	b.n	42f8 <ultoa+0x60>
    430c:	00016731 	.word	0x00016731
    4310:	00016625 	.word	0x00016625

00004314 <Validate_UintDecAsciiValue>:
{
    4314:	b570      	push	{r4, r5, r6, lr}
    4316:	b084      	sub	sp, #16
    4318:	0005      	movs	r5, r0
    431a:	0016      	movs	r6, r2
    unsigned long value = strtoul(pValue, NULL, 10);
    431c:	220a      	movs	r2, #10
    431e:	2100      	movs	r1, #0
    4320:	4b0a      	ldr	r3, [pc, #40]	; (434c <Validate_UintDecAsciiValue+0x38>)
    4322:	4798      	blx	r3
    4324:	0004      	movs	r4, r0
    ultoa(buf, value, 10U);
    4326:	220a      	movs	r2, #10
    4328:	0001      	movs	r1, r0
    432a:	a801      	add	r0, sp, #4
    432c:	4b08      	ldr	r3, [pc, #32]	; (4350 <Validate_UintDecAsciiValue+0x3c>)
    432e:	4798      	blx	r3
    if (0 != strcmp((char*)pValue, buf))
    4330:	a901      	add	r1, sp, #4
    4332:	0028      	movs	r0, r5
    4334:	4b07      	ldr	r3, [pc, #28]	; (4354 <Validate_UintDecAsciiValue+0x40>)
    4336:	4798      	blx	r3
    4338:	0003      	movs	r3, r0
        flag = false;
    433a:	2000      	movs	r0, #0
    if (value > maxValue)
    433c:	42b4      	cmp	r4, r6
    433e:	d901      	bls.n	4344 <Validate_UintDecAsciiValue+0x30>
}
    4340:	b004      	add	sp, #16
    4342:	bd70      	pop	{r4, r5, r6, pc}
    if (0 != strcmp((char*)pValue, buf))
    4344:	4258      	negs	r0, r3
    4346:	4158      	adcs	r0, r3
    4348:	b2c0      	uxtb	r0, r0
    434a:	e7f9      	b.n	4340 <Validate_UintDecAsciiValue+0x2c>
    434c:	0001a5ed 	.word	0x0001a5ed
    4350:	00004299 	.word	0x00004299
    4354:	0001a259 	.word	0x0001a259

00004358 <stricmp>:

/*
 * \brief Compare Strings without Case Sensitivity
 */ 
int stricmp( char *s1, const char *s2 )
{
    4358:	b5f0      	push	{r4, r5, r6, r7, lr}
    435a:	46de      	mov	lr, fp
    435c:	4657      	mov	r7, sl
    435e:	464e      	mov	r6, r9
    4360:	b5c0      	push	{r6, r7, lr}
    4362:	b082      	sub	sp, #8
    4364:	0004      	movs	r4, r0
    4366:	000e      	movs	r6, r1
	if (s1 == NULL) return s2 == NULL ? 0 : -(*s2);
    4368:	2800      	cmp	r0, #0
    436a:	d006      	beq.n	437a <stricmp+0x22>
	if (s2 == NULL) return *s1;
    436c:	2900      	cmp	r1, #0
    436e:	d009      	beq.n	4384 <stricmp+0x2c>

	char c1, c2;
	while ((c1 = tolower (*s1)) == (c2 = tolower (*s2)))
    4370:	4b1c      	ldr	r3, [pc, #112]	; (43e4 <stricmp+0x8c>)
    4372:	469b      	mov	fp, r3
    4374:	2703      	movs	r7, #3
    4376:	469a      	mov	sl, r3
    4378:	e011      	b.n	439e <stricmp+0x46>
	if (s1 == NULL) return s2 == NULL ? 0 : -(*s2);
    437a:	2900      	cmp	r1, #0
    437c:	d02f      	beq.n	43de <stricmp+0x86>
    437e:	7808      	ldrb	r0, [r1, #0]
    4380:	4240      	negs	r0, r0
    4382:	e026      	b.n	43d2 <stricmp+0x7a>
	if (s2 == NULL) return *s1;
    4384:	7800      	ldrb	r0, [r0, #0]
    4386:	e024      	b.n	43d2 <stricmp+0x7a>
	while ((c1 = tolower (*s1)) == (c2 = tolower (*s2)))
    4388:	3520      	adds	r5, #32
    438a:	9501      	str	r5, [sp, #4]
    438c:	e00f      	b.n	43ae <stricmp+0x56>
    438e:	b2d3      	uxtb	r3, r2
    4390:	4599      	cmp	r9, r3
    4392:	d119      	bne.n	43c8 <stricmp+0x70>
	{
		if (*s1 == '\0') break;
    4394:	7823      	ldrb	r3, [r4, #0]
    4396:	2b00      	cmp	r3, #0
    4398:	d016      	beq.n	43c8 <stricmp+0x70>
		++s1; ++s2;
    439a:	3401      	adds	r4, #1
    439c:	3601      	adds	r6, #1
	while ((c1 = tolower (*s1)) == (c2 = tolower (*s2)))
    439e:	7825      	ldrb	r5, [r4, #0]
    43a0:	47d8      	blx	fp
    43a2:	1940      	adds	r0, r0, r5
    43a4:	7843      	ldrb	r3, [r0, #1]
    43a6:	403b      	ands	r3, r7
    43a8:	9501      	str	r5, [sp, #4]
    43aa:	2b01      	cmp	r3, #1
    43ac:	d0ec      	beq.n	4388 <stricmp+0x30>
    43ae:	466b      	mov	r3, sp
    43b0:	791b      	ldrb	r3, [r3, #4]
    43b2:	4699      	mov	r9, r3
    43b4:	7835      	ldrb	r5, [r6, #0]
    43b6:	47d0      	blx	sl
    43b8:	1940      	adds	r0, r0, r5
    43ba:	7843      	ldrb	r3, [r0, #1]
    43bc:	403b      	ands	r3, r7
    43be:	002a      	movs	r2, r5
    43c0:	2b01      	cmp	r3, #1
    43c2:	d1e4      	bne.n	438e <stricmp+0x36>
    43c4:	3220      	adds	r2, #32
    43c6:	e7e2      	b.n	438e <stricmp+0x36>
	}

	return c1 - c2;
    43c8:	20ff      	movs	r0, #255	; 0xff
    43ca:	9f01      	ldr	r7, [sp, #4]
    43cc:	4007      	ands	r7, r0
    43ce:	4010      	ands	r0, r2
    43d0:	1a38      	subs	r0, r7, r0
}
    43d2:	b002      	add	sp, #8
    43d4:	bc1c      	pop	{r2, r3, r4}
    43d6:	4691      	mov	r9, r2
    43d8:	469a      	mov	sl, r3
    43da:	46a3      	mov	fp, r4
    43dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (s1 == NULL) return s2 == NULL ? 0 : -(*s2);
    43de:	2000      	movs	r0, #0
    43e0:	e7f7      	b.n	43d2 <stricmp+0x7a>
    43e2:	46c0      	nop			; (mov r8, r8)
    43e4:	00019765 	.word	0x00019765

000043e8 <Validate_OnOffAsciiValue>:
{
    43e8:	b510      	push	{r4, lr}
    43ea:	0004      	movs	r4, r0
    if(0U == stricmp(pValue, gapParseOnOff[OFF_STR_IDX]))
    43ec:	4908      	ldr	r1, [pc, #32]	; (4410 <Validate_OnOffAsciiValue+0x28>)
    43ee:	4b09      	ldr	r3, [pc, #36]	; (4414 <Validate_OnOffAsciiValue+0x2c>)
    43f0:	4798      	blx	r3
        result = OFF_STR_IDX;
    43f2:	2300      	movs	r3, #0
    if(0U == stricmp(pValue, gapParseOnOff[OFF_STR_IDX]))
    43f4:	2800      	cmp	r0, #0
    43f6:	d101      	bne.n	43fc <Validate_OnOffAsciiValue+0x14>
}
    43f8:	0018      	movs	r0, r3
    43fa:	bd10      	pop	{r4, pc}
    else if (0U == stricmp(pValue, gapParseOnOff[ON_STR_IDX]))
    43fc:	4906      	ldr	r1, [pc, #24]	; (4418 <Validate_OnOffAsciiValue+0x30>)
    43fe:	0020      	movs	r0, r4
    4400:	4b04      	ldr	r3, [pc, #16]	; (4414 <Validate_OnOffAsciiValue+0x2c>)
    4402:	4798      	blx	r3
        result = ON_STR_IDX;
    4404:	0003      	movs	r3, r0
    4406:	1e58      	subs	r0, r3, #1
    4408:	4183      	sbcs	r3, r0
    440a:	3301      	adds	r3, #1
    440c:	e7f4      	b.n	43f8 <Validate_OnOffAsciiValue+0x10>
    440e:	46c0      	nop			; (mov r8, r8)
    4410:	0001fa08 	.word	0x0001fa08
    4414:	00004359 	.word	0x00004359
    4418:	0001fa0c 	.word	0x0001fa0c

0000441c <Validate_Str1Str2AsciiValue>:
{
    441c:	b570      	push	{r4, r5, r6, lr}
    441e:	0004      	movs	r4, r0
    4420:	0015      	movs	r5, r2
    if(0U == stricmp(pValue, pStr1))
    4422:	4b08      	ldr	r3, [pc, #32]	; (4444 <Validate_Str1Str2AsciiValue+0x28>)
    4424:	4798      	blx	r3
        result = FIRST_STR_IDX;
    4426:	2300      	movs	r3, #0
    if(0U == stricmp(pValue, pStr1))
    4428:	2800      	cmp	r0, #0
    442a:	d101      	bne.n	4430 <Validate_Str1Str2AsciiValue+0x14>
}
    442c:	0018      	movs	r0, r3
    442e:	bd70      	pop	{r4, r5, r6, pc}
    else if (0U == stricmp(pValue, pStr2))
    4430:	0029      	movs	r1, r5
    4432:	0020      	movs	r0, r4
    4434:	4b03      	ldr	r3, [pc, #12]	; (4444 <Validate_Str1Str2AsciiValue+0x28>)
    4436:	4798      	blx	r3
        result = SECOND_STR_IDX;
    4438:	0003      	movs	r3, r0
    443a:	1e58      	subs	r0, r3, #1
    443c:	4183      	sbcs	r3, r0
    443e:	3301      	adds	r3, #1
    4440:	e7f4      	b.n	442c <Validate_Str1Str2AsciiValue+0x10>
    4442:	46c0      	nop			; (mov r8, r8)
    4444:	00004359 	.word	0x00004359

00004448 <xtoi>:

/*
 * \brief Converts the input string consisting of hexadecimal digits into an integer value
 */ 
int xtoi(char *c)
{
    4448:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    444a:	46ce      	mov	lr, r9
    444c:	4647      	mov	r7, r8
    444e:	b580      	push	{r7, lr}
    4450:	0007      	movs	r7, r0
  size_t szlen = strlen(c);
    4452:	4b16      	ldr	r3, [pc, #88]	; (44ac <xtoi+0x64>)
    4454:	4798      	blx	r3
  int idx, ptr, factor,result =0;

  if(szlen > 0){
    4456:	3801      	subs	r0, #1
  int idx, ptr, factor,result =0;
    4458:	2600      	movs	r6, #0
  if(szlen > 0){
    445a:	2807      	cmp	r0, #7
    445c:	d821      	bhi.n	44a2 <xtoi+0x5a>
    if(szlen > 8) return 0;
    result = 0;
    factor = 1;

    for(idx = szlen-1; idx >= 0; --idx){
    445e:	1e04      	subs	r4, r0, #0
    4460:	db1c      	blt.n	449c <xtoi+0x54>
    4462:	2501      	movs	r5, #1
    if(isxdigit( *(c+idx))){
    4464:	4b12      	ldr	r3, [pc, #72]	; (44b0 <xtoi+0x68>)
    4466:	4699      	mov	r9, r3
    4468:	2344      	movs	r3, #68	; 0x44
    446a:	4698      	mov	r8, r3
    446c:	e00a      	b.n	4484 <xtoi+0x3c>
	if( *(c + idx) >= 97){
	  ptr = ( *(c + idx) - 97) + 10;
	}else if( *(c + idx) >= 65){
	  ptr = ( *(c + idx) - 65) + 10;
	}else{
	  ptr = *(c + idx) - 48;
    446e:	001a      	movs	r2, r3
    4470:	3a30      	subs	r2, #48	; 0x30
	}else if( *(c + idx) >= 65){
    4472:	2b40      	cmp	r3, #64	; 0x40
    4474:	d901      	bls.n	447a <xtoi+0x32>
	  ptr = ( *(c + idx) - 65) + 10;
    4476:	3b37      	subs	r3, #55	; 0x37
    4478:	001a      	movs	r2, r3
	}
	result += (ptr * factor);
    447a:	436a      	muls	r2, r5
    447c:	18b6      	adds	r6, r6, r2
	factor *= 16;
    447e:	012d      	lsls	r5, r5, #4
    for(idx = szlen-1; idx >= 0; --idx){
    4480:	3c01      	subs	r4, #1
    4482:	d40e      	bmi.n	44a2 <xtoi+0x5a>
    if(isxdigit( *(c+idx))){
    4484:	47c8      	blx	r9
    4486:	5d3b      	ldrb	r3, [r7, r4]
    4488:	18c0      	adds	r0, r0, r3
    448a:	7842      	ldrb	r2, [r0, #1]
    448c:	4641      	mov	r1, r8
    448e:	4211      	tst	r1, r2
    4490:	d006      	beq.n	44a0 <xtoi+0x58>
	if( *(c + idx) >= 97){
    4492:	2b60      	cmp	r3, #96	; 0x60
    4494:	d9eb      	bls.n	446e <xtoi+0x26>
	  ptr = ( *(c + idx) - 97) + 10;
    4496:	3b57      	subs	r3, #87	; 0x57
    4498:	001a      	movs	r2, r3
    449a:	e7ee      	b.n	447a <xtoi+0x32>
    result = 0;
    449c:	2600      	movs	r6, #0
    449e:	e000      	b.n	44a2 <xtoi+0x5a>
    }else{
		return 4;
    44a0:	2604      	movs	r6, #4
    }
    }
  }

  return result;
    44a2:	0030      	movs	r0, r6
    44a4:	bc0c      	pop	{r2, r3}
    44a6:	4690      	mov	r8, r2
    44a8:	4699      	mov	r9, r3
    44aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    44ac:	0001a2e1 	.word	0x0001a2e1
    44b0:	00019765 	.word	0x00019765

000044b4 <Parser_HexAsciiToInt>:
{
    44b4:	b5f0      	push	{r4, r5, r6, r7, lr}
    44b6:	46de      	mov	lr, fp
    44b8:	4657      	mov	r7, sl
    44ba:	464e      	mov	r6, r9
    44bc:	4645      	mov	r5, r8
    44be:	b5e0      	push	{r5, r6, r7, lr}
    44c0:	b083      	sub	sp, #12
    44c2:	0004      	movs	r4, r0
    44c4:	000f      	movs	r7, r1
    44c6:	4690      	mov	r8, r2
    uint16_t rxHexAsciiLen = strlen(pInHexAscii);
    44c8:	0008      	movs	r0, r1
    44ca:	4b1f      	ldr	r3, [pc, #124]	; (4548 <Parser_HexAsciiToInt+0x94>)
    44cc:	4798      	blx	r3
    44ce:	b283      	uxth	r3, r0
    uint16_t jCtr = rxHexAsciiLen >> 1;
    44d0:	085d      	lsrs	r5, r3, #1
    if(rxHexAsciiLen % 2 == 0)
    44d2:	07da      	lsls	r2, r3, #31
    44d4:	d401      	bmi.n	44da <Parser_HexAsciiToInt+0x26>
        jCtr --;
    44d6:	3d01      	subs	r5, #1
    44d8:	b2ad      	uxth	r5, r5
    uint8_t retValue = 0;
    44da:	2000      	movs	r0, #0
    if(hexAsciiLen == rxHexAsciiLen)
    44dc:	42a3      	cmp	r3, r4
    44de:	d006      	beq.n	44ee <Parser_HexAsciiToInt+0x3a>
}
    44e0:	b003      	add	sp, #12
    44e2:	bc3c      	pop	{r2, r3, r4, r5}
    44e4:	4690      	mov	r8, r2
    44e6:	4699      	mov	r9, r3
    44e8:	46a2      	mov	sl, r4
    44ea:	46ab      	mov	fp, r5
    44ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
        while(rxHexAsciiLen > 0)
    44ee:	2c00      	cmp	r4, #0
    44f0:	d027      	beq.n	4542 <Parser_HexAsciiToInt+0x8e>
                tempBuff[iCtr] = *(((char*)pInHexAscii) + (rxHexAsciiLen - 2));
    44f2:	ae01      	add	r6, sp, #4
            tempBuff[iCtr] = '\0';
    44f4:	2300      	movs	r3, #0
    44f6:	469a      	mov	sl, r3
            *(pOutInt + jCtr) = xtoi(tempBuff); 
    44f8:	4b14      	ldr	r3, [pc, #80]	; (454c <Parser_HexAsciiToInt+0x98>)
    44fa:	4699      	mov	r9, r3
    44fc:	e013      	b.n	4526 <Parser_HexAsciiToInt+0x72>
                tempBuff[iCtr] = '0';
    44fe:	2330      	movs	r3, #48	; 0x30
    4500:	7033      	strb	r3, [r6, #0]
                tempBuff[iCtr] = *(((char*)pInHexAscii) + (rxHexAsciiLen - 1));
    4502:	193b      	adds	r3, r7, r4
    4504:	3b01      	subs	r3, #1
    4506:	781b      	ldrb	r3, [r3, #0]
    4508:	7073      	strb	r3, [r6, #1]
                rxHexAsciiLen --;
    450a:	3c01      	subs	r4, #1
    450c:	b2a4      	uxth	r4, r4
            tempBuff[iCtr] = '\0';
    450e:	4653      	mov	r3, sl
    4510:	70b3      	strb	r3, [r6, #2]
            *(pOutInt + jCtr) = xtoi(tempBuff); 
    4512:	46ab      	mov	fp, r5
    4514:	44c3      	add	fp, r8
    4516:	0030      	movs	r0, r6
    4518:	47c8      	blx	r9
    451a:	465b      	mov	r3, fp
    451c:	7018      	strb	r0, [r3, #0]
            jCtr --;
    451e:	3d01      	subs	r5, #1
    4520:	b2ad      	uxth	r5, r5
        while(rxHexAsciiLen > 0)
    4522:	2c00      	cmp	r4, #0
    4524:	d00b      	beq.n	453e <Parser_HexAsciiToInt+0x8a>
            if(rxHexAsciiLen >= 2U)
    4526:	2c01      	cmp	r4, #1
    4528:	d9e9      	bls.n	44fe <Parser_HexAsciiToInt+0x4a>
                tempBuff[iCtr] = *(((char*)pInHexAscii) + (rxHexAsciiLen - 2));
    452a:	193b      	adds	r3, r7, r4
    452c:	1e9a      	subs	r2, r3, #2
    452e:	7812      	ldrb	r2, [r2, #0]
    4530:	7032      	strb	r2, [r6, #0]
                tempBuff[iCtr] = *(((char*)pInHexAscii) + (rxHexAsciiLen - 1));
    4532:	3b01      	subs	r3, #1
    4534:	781b      	ldrb	r3, [r3, #0]
    4536:	7073      	strb	r3, [r6, #1]
                rxHexAsciiLen -= 2U;
    4538:	3c02      	subs	r4, #2
    453a:	b2a4      	uxth	r4, r4
    453c:	e7e7      	b.n	450e <Parser_HexAsciiToInt+0x5a>
        retValue = 1;
    453e:	2001      	movs	r0, #1
    4540:	e7ce      	b.n	44e0 <Parser_HexAsciiToInt+0x2c>
    4542:	2001      	movs	r0, #1
    4544:	e7cc      	b.n	44e0 <Parser_HexAsciiToInt+0x2c>
    4546:	46c0      	nop			; (mov r8, r8)
    4548:	0001a2e1 	.word	0x0001a2e1
    454c:	00004449 	.word	0x00004449

00004550 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
    4550:	b570      	push	{r4, r5, r6, lr}
	cycles_per_ms = system_gclk_gen_get_hz(0);
    4552:	2000      	movs	r0, #0
    4554:	4b08      	ldr	r3, [pc, #32]	; (4578 <delay_init+0x28>)
    4556:	4798      	blx	r3
    4558:	0005      	movs	r5, r0
	cycles_per_ms /= 1000;
    455a:	4c08      	ldr	r4, [pc, #32]	; (457c <delay_init+0x2c>)
    455c:	21fa      	movs	r1, #250	; 0xfa
    455e:	0089      	lsls	r1, r1, #2
    4560:	47a0      	blx	r4
    4562:	4b07      	ldr	r3, [pc, #28]	; (4580 <delay_init+0x30>)
    4564:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
    4566:	4907      	ldr	r1, [pc, #28]	; (4584 <delay_init+0x34>)
    4568:	0028      	movs	r0, r5
    456a:	47a0      	blx	r4
    456c:	4b06      	ldr	r3, [pc, #24]	; (4588 <delay_init+0x38>)
    456e:	6018      	str	r0, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
    4570:	2205      	movs	r2, #5
    4572:	4b06      	ldr	r3, [pc, #24]	; (458c <delay_init+0x3c>)
    4574:	601a      	str	r2, [r3, #0]
}
    4576:	bd70      	pop	{r4, r5, r6, pc}
    4578:	000071cd 	.word	0x000071cd
    457c:	00016625 	.word	0x00016625
    4580:	2000000c 	.word	0x2000000c
    4584:	000f4240 	.word	0x000f4240
    4588:	20000010 	.word	0x20000010
    458c:	e000e010 	.word	0xe000e010

00004590 <delay_cycles_us>:
 *
 * \param n  Number of microseconds to wait
 */
void delay_cycles_us(
		uint32_t n)
{
    4590:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 10u */
		delay_cycles(cycles_per_us);
    4592:	4b08      	ldr	r3, [pc, #32]	; (45b4 <delay_cycles_us+0x24>)
    4594:	681c      	ldr	r4, [r3, #0]
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
		SysTick->LOAD = n;
    4596:	4a08      	ldr	r2, [pc, #32]	; (45b8 <delay_cycles_us+0x28>)
		SysTick->VAL = 0;
    4598:	2500      	movs	r5, #0

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    459a:	2180      	movs	r1, #128	; 0x80
    459c:	0249      	lsls	r1, r1, #9
	while (n--) {
    459e:	3801      	subs	r0, #1
    45a0:	d307      	bcc.n	45b2 <delay_cycles_us+0x22>
	if (n > 0) {
    45a2:	2c00      	cmp	r4, #0
    45a4:	d0fb      	beq.n	459e <delay_cycles_us+0xe>
		SysTick->LOAD = n;
    45a6:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
    45a8:	6095      	str	r5, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    45aa:	6813      	ldr	r3, [r2, #0]
    45ac:	420b      	tst	r3, r1
    45ae:	d0fc      	beq.n	45aa <delay_cycles_us+0x1a>
    45b0:	e7f5      	b.n	459e <delay_cycles_us+0xe>
	}
}
    45b2:	bd30      	pop	{r4, r5, pc}
    45b4:	20000010 	.word	0x20000010
    45b8:	e000e010 	.word	0xe000e010

000045bc <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
    45bc:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
    45be:	4b08      	ldr	r3, [pc, #32]	; (45e0 <delay_cycles_ms+0x24>)
    45c0:	681c      	ldr	r4, [r3, #0]
		SysTick->LOAD = n;
    45c2:	4a08      	ldr	r2, [pc, #32]	; (45e4 <delay_cycles_ms+0x28>)
		SysTick->VAL = 0;
    45c4:	2500      	movs	r5, #0
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    45c6:	2180      	movs	r1, #128	; 0x80
    45c8:	0249      	lsls	r1, r1, #9
	while (n--) {
    45ca:	3801      	subs	r0, #1
    45cc:	d307      	bcc.n	45de <delay_cycles_ms+0x22>
	if (n > 0) {
    45ce:	2c00      	cmp	r4, #0
    45d0:	d0fb      	beq.n	45ca <delay_cycles_ms+0xe>
		SysTick->LOAD = n;
    45d2:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
    45d4:	6095      	str	r5, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    45d6:	6813      	ldr	r3, [r2, #0]
    45d8:	420b      	tst	r3, r1
    45da:	d0fc      	beq.n	45d6 <delay_cycles_ms+0x1a>
    45dc:	e7f5      	b.n	45ca <delay_cycles_ms+0xe>
	}
}
    45de:	bd30      	pop	{r4, r5, pc}
    45e0:	2000000c 	.word	0x2000000c
    45e4:	e000e010 	.word	0xe000e010

000045e8 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
    45e8:	4b0c      	ldr	r3, [pc, #48]	; (461c <cpu_irq_enter_critical+0x34>)
    45ea:	681b      	ldr	r3, [r3, #0]
    45ec:	2b00      	cmp	r3, #0
    45ee:	d106      	bne.n	45fe <cpu_irq_enter_critical+0x16>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    45f0:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
    45f4:	2b00      	cmp	r3, #0
    45f6:	d007      	beq.n	4608 <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    45f8:	2200      	movs	r2, #0
    45fa:	4b09      	ldr	r3, [pc, #36]	; (4620 <cpu_irq_enter_critical+0x38>)
    45fc:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    45fe:	4a07      	ldr	r2, [pc, #28]	; (461c <cpu_irq_enter_critical+0x34>)
    4600:	6813      	ldr	r3, [r2, #0]
    4602:	3301      	adds	r3, #1
    4604:	6013      	str	r3, [r2, #0]
}
    4606:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
    4608:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    460a:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    460e:	2200      	movs	r2, #0
    4610:	4b04      	ldr	r3, [pc, #16]	; (4624 <cpu_irq_enter_critical+0x3c>)
    4612:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    4614:	3201      	adds	r2, #1
    4616:	4b02      	ldr	r3, [pc, #8]	; (4620 <cpu_irq_enter_critical+0x38>)
    4618:	701a      	strb	r2, [r3, #0]
    461a:	e7f0      	b.n	45fe <cpu_irq_enter_critical+0x16>
    461c:	20000b58 	.word	0x20000b58
    4620:	20000b5c 	.word	0x20000b5c
    4624:	20000014 	.word	0x20000014

00004628 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    4628:	4b08      	ldr	r3, [pc, #32]	; (464c <cpu_irq_leave_critical+0x24>)
    462a:	681a      	ldr	r2, [r3, #0]
    462c:	3a01      	subs	r2, #1
    462e:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    4630:	681b      	ldr	r3, [r3, #0]
    4632:	2b00      	cmp	r3, #0
    4634:	d109      	bne.n	464a <cpu_irq_leave_critical+0x22>
    4636:	4b06      	ldr	r3, [pc, #24]	; (4650 <cpu_irq_leave_critical+0x28>)
    4638:	781b      	ldrb	r3, [r3, #0]
    463a:	2b00      	cmp	r3, #0
    463c:	d005      	beq.n	464a <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
    463e:	2201      	movs	r2, #1
    4640:	4b04      	ldr	r3, [pc, #16]	; (4654 <cpu_irq_leave_critical+0x2c>)
    4642:	701a      	strb	r2, [r3, #0]
    4644:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    4648:	b662      	cpsie	i
	}
}
    464a:	4770      	bx	lr
    464c:	20000b58 	.word	0x20000b58
    4650:	20000b5c 	.word	0x20000b5c
    4654:	20000014 	.word	0x20000014

00004658 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
    4658:	b5f0      	push	{r4, r5, r6, r7, lr}
    465a:	46c6      	mov	lr, r8
    465c:	b500      	push	{lr}
    465e:	b082      	sub	sp, #8
    4660:	ac01      	add	r4, sp, #4
    4662:	2601      	movs	r6, #1
    4664:	7066      	strb	r6, [r4, #1]
	config->powersave  = false;
    4666:	2700      	movs	r7, #0
    4668:	70a7      	strb	r7, [r4, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    466a:	7026      	strb	r6, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
    466c:	0021      	movs	r1, r4
    466e:	2013      	movs	r0, #19
    4670:	4d23      	ldr	r5, [pc, #140]	; (4700 <system_board_init+0xa8>)
    4672:	47a8      	blx	r5
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    4674:	4b23      	ldr	r3, [pc, #140]	; (4704 <system_board_init+0xac>)
    4676:	4698      	mov	r8, r3
    4678:	2380      	movs	r3, #128	; 0x80
    467a:	031b      	lsls	r3, r3, #12
    467c:	4642      	mov	r2, r8
    467e:	6193      	str	r3, [r2, #24]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);
	
	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    4680:	7026      	strb	r6, [r4, #0]
	port_pin_set_config(LED_1_PIN, &pin_conf);
    4682:	0021      	movs	r1, r4
    4684:	2012      	movs	r0, #18
    4686:	47a8      	blx	r5
    4688:	2380      	movs	r3, #128	; 0x80
    468a:	02db      	lsls	r3, r3, #11
    468c:	4642      	mov	r2, r8
    468e:	6193      	str	r3, [r2, #24]
	port_pin_set_output_level(LED_1_PIN, LED_1_INACTIVE);
#ifdef RFSWITCH_ENABLE
	/* Configure RFSWITCH as output */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    4690:	7026      	strb	r6, [r4, #0]
	port_pin_set_config(RF_SWITCH_PIN, &pin_conf);
    4692:	0021      	movs	r1, r4
    4694:	200d      	movs	r0, #13
    4696:	47a8      	blx	r5
	} else {
		port_base->OUTCLR.reg = pin_mask;
    4698:	2380      	movs	r3, #128	; 0x80
    469a:	019b      	lsls	r3, r3, #6
    469c:	4642      	mov	r2, r8
    469e:	6153      	str	r3, [r2, #20]
	port_pin_set_output_level(RF_SWITCH_PIN, RF_SWITCH_INACTIVE);	
#endif

#ifdef TCXO_ENABLE
	/* Configure TXPO PWR as output */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    46a0:	7026      	strb	r6, [r4, #0]
	port_pin_set_config(TCXO_PWR_PIN, &pin_conf);
    46a2:	0021      	movs	r1, r4
    46a4:	2009      	movs	r0, #9
    46a6:	47a8      	blx	r5
    46a8:	2380      	movs	r3, #128	; 0x80
    46aa:	009b      	lsls	r3, r3, #2
    46ac:	4642      	mov	r2, r8
    46ae:	6153      	str	r3, [r2, #20]
	port_pin_set_output_level(TCXO_PWR_PIN, TCXO_PWR_INACTIVE);
#endif
	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
    46b0:	7027      	strb	r7, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
    46b2:	7066      	strb	r6, [r4, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
    46b4:	0021      	movs	r1, r4
    46b6:	201c      	movs	r0, #28
    46b8:	47a8      	blx	r5
	#define AD6_PIN PIN_PA27
	#define AD7_PIN PIN_PA08
	#define AD8_PIN PIN_PA07

	//This pin is uset for uart logging to nRF52840 from nRF9160. If USB is set up this can be received here and sent over USB
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
    46ba:	7027      	strb	r7, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
    46bc:	7066      	strb	r6, [r4, #1]
	port_pin_set_config(PIN_PA06, &pin_conf);
    46be:	0021      	movs	r1, r4
    46c0:	2006      	movs	r0, #6
    46c2:	47a8      	blx	r5
	

#ifdef ADDRESS_SWITCH_ENABLE 

	pin_conf.direction  = PORT_PIN_DIR_INPUT;
    46c4:	7027      	strb	r7, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
    46c6:	7066      	strb	r6, [r4, #1]
	
	port_pin_set_config(AD1_PIN, &pin_conf);
    46c8:	0021      	movs	r1, r4
    46ca:	200e      	movs	r0, #14
    46cc:	47a8      	blx	r5
	port_pin_set_config(AD2_PIN, &pin_conf);
    46ce:	0021      	movs	r1, r4
    46d0:	201c      	movs	r0, #28
    46d2:	47a8      	blx	r5
	port_pin_set_config(AD3_PIN, &pin_conf);
    46d4:	0021      	movs	r1, r4
    46d6:	200f      	movs	r0, #15
    46d8:	47a8      	blx	r5
	port_pin_set_config(AD4_PIN, &pin_conf);
    46da:	0021      	movs	r1, r4
    46dc:	2013      	movs	r0, #19
    46de:	47a8      	blx	r5
	port_pin_set_config(AD5_PIN, &pin_conf);
    46e0:	0021      	movs	r1, r4
    46e2:	2012      	movs	r0, #18
    46e4:	47a8      	blx	r5
	port_pin_set_config(AD6_PIN, &pin_conf);
    46e6:	0021      	movs	r1, r4
    46e8:	201b      	movs	r0, #27
    46ea:	47a8      	blx	r5
	port_pin_set_config(AD7_PIN, &pin_conf);
    46ec:	0021      	movs	r1, r4
    46ee:	2008      	movs	r0, #8
    46f0:	47a8      	blx	r5
	port_pin_set_config(AD8_PIN, &pin_conf);
    46f2:	0021      	movs	r1, r4
    46f4:	2007      	movs	r0, #7
    46f6:	47a8      	blx	r5
	
#endif
}
    46f8:	b002      	add	sp, #8
    46fa:	bc04      	pop	{r2}
    46fc:	4690      	mov	r8, r2
    46fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4700:	00004f19 	.word	0x00004f19
    4704:	40002800 	.word	0x40002800

00004708 <ADC_Handler>:
		}

	MREPEAT(ADC_INST_NUM, _ADC_INTERRUPT_HANDLER, 0)
#else
void ADC_Handler(void)
{
    4708:	b570      	push	{r4, r5, r6, lr}
	struct adc_module *module = _adc_instances[instance];
    470a:	4b2f      	ldr	r3, [pc, #188]	; (47c8 <ADC_Handler+0xc0>)
    470c:	681c      	ldr	r4, [r3, #0]
	uint32_t flags = module->hw->INTFLAG.reg & module->hw->INTENSET.reg;
    470e:	6823      	ldr	r3, [r4, #0]
    4710:	799a      	ldrb	r2, [r3, #6]
    4712:	795d      	ldrb	r5, [r3, #5]
    4714:	4015      	ands	r5, r2
	if (flags & ADC_INTFLAG_RESRDY) {
    4716:	07ea      	lsls	r2, r5, #31
    4718:	d52a      	bpl.n	4770 <ADC_Handler+0x68>
		module->hw->INTFLAG.reg = ADC_INTFLAG_RESRDY;
    471a:	2201      	movs	r2, #1
    471c:	719a      	strb	r2, [r3, #6]
		*(module->job_buffer++) = module->hw->RESULT.reg;
    471e:	6962      	ldr	r2, [r4, #20]
    4720:	1c93      	adds	r3, r2, #2
    4722:	6163      	str	r3, [r4, #20]
    4724:	6823      	ldr	r3, [r4, #0]
    4726:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
    4728:	b29b      	uxth	r3, r3
    472a:	8013      	strh	r3, [r2, #0]
		if (--module->remaining_conversions > 0) {
    472c:	8b23      	ldrh	r3, [r4, #24]
    472e:	3b01      	subs	r3, #1
    4730:	b29b      	uxth	r3, r3
    4732:	8323      	strh	r3, [r4, #24]
    4734:	2b00      	cmp	r3, #0
    4736:	d015      	beq.n	4764 <ADC_Handler+0x5c>
			if (module->software_trigger == true
    4738:	7f63      	ldrb	r3, [r4, #29]
    473a:	2b00      	cmp	r3, #0
    473c:	d018      	beq.n	4770 <ADC_Handler+0x68>
				&& (!(module->hw->SEQSTATUS.reg & ADC_SEQSTATUS_SEQBUSY))) {
    473e:	6822      	ldr	r2, [r4, #0]
    4740:	79d3      	ldrb	r3, [r2, #7]
    4742:	b25b      	sxtb	r3, r3
    4744:	2b00      	cmp	r3, #0
    4746:	db13      	blt.n	4770 <ADC_Handler+0x68>
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;

	if (adc_module->SYNCBUSY.reg) {
    4748:	8c13      	ldrh	r3, [r2, #32]
    474a:	b29b      	uxth	r3, r3
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;

	while (adc_is_syncing(module_inst)) {
    474c:	2b00      	cmp	r3, #0
    474e:	d1fb      	bne.n	4748 <ADC_Handler+0x40>
		/* Wait for synchronization */
	}

	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
    4750:	7e13      	ldrb	r3, [r2, #24]
    4752:	2102      	movs	r1, #2
    4754:	430b      	orrs	r3, r1
    4756:	7613      	strb	r3, [r2, #24]
	Adc *const adc_module = module_inst->hw;
    4758:	6822      	ldr	r2, [r4, #0]
	if (adc_module->SYNCBUSY.reg) {
    475a:	8c13      	ldrh	r3, [r2, #32]
    475c:	b29b      	uxth	r3, r3

	while (adc_is_syncing(module_inst)) {
    475e:	2b00      	cmp	r3, #0
    4760:	d1fb      	bne.n	475a <ADC_Handler+0x52>
    4762:	e005      	b.n	4770 <ADC_Handler+0x68>
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
	/* Enable interrupt */
	adc_module->INTENCLR.reg = interrupt;
    4764:	2301      	movs	r3, #1
    4766:	6822      	ldr	r2, [r4, #0]
    4768:	7113      	strb	r3, [r2, #4]
			if (module->job_status == STATUS_BUSY) {
    476a:	7f23      	ldrb	r3, [r4, #28]
    476c:	2b05      	cmp	r3, #5
    476e:	d016      	beq.n	479e <ADC_Handler+0x96>
	if (flags & ADC_INTFLAG_WINMON) {
    4770:	076b      	lsls	r3, r5, #29
    4772:	d508      	bpl.n	4786 <ADC_Handler+0x7e>
		module->hw->INTFLAG.reg = ADC_INTFLAG_WINMON;
    4774:	2304      	movs	r3, #4
    4776:	6822      	ldr	r2, [r4, #0]
    4778:	7193      	strb	r3, [r2, #6]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_WINDOW)) &&
    477a:	7ee3      	ldrb	r3, [r4, #27]
    477c:	079b      	lsls	r3, r3, #30
    477e:	d502      	bpl.n	4786 <ADC_Handler+0x7e>
    4780:	7ea3      	ldrb	r3, [r4, #26]
    4782:	079b      	lsls	r3, r3, #30
    4784:	d417      	bmi.n	47b6 <ADC_Handler+0xae>
	if (flags & ADC_INTFLAG_OVERRUN) {
    4786:	07ab      	lsls	r3, r5, #30
    4788:	d508      	bpl.n	479c <ADC_Handler+0x94>
		module->hw->INTFLAG.reg = ADC_INTFLAG_OVERRUN;
    478a:	2302      	movs	r3, #2
    478c:	6822      	ldr	r2, [r4, #0]
    478e:	7193      	strb	r3, [r2, #6]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_ERROR)) &&
    4790:	7ee3      	ldrb	r3, [r4, #27]
    4792:	075b      	lsls	r3, r3, #29
    4794:	d502      	bpl.n	479c <ADC_Handler+0x94>
    4796:	7ea3      	ldrb	r3, [r4, #26]
    4798:	075b      	lsls	r3, r3, #29
    479a:	d410      	bmi.n	47be <ADC_Handler+0xb6>
	_adc_interrupt_handler(0);
}
    479c:	bd70      	pop	{r4, r5, r6, pc}
				module->job_status = STATUS_OK;
    479e:	2300      	movs	r3, #0
    47a0:	7723      	strb	r3, [r4, #28]
				if ((module->enabled_callback_mask &
    47a2:	7ee3      	ldrb	r3, [r4, #27]
    47a4:	07db      	lsls	r3, r3, #31
    47a6:	d5e3      	bpl.n	4770 <ADC_Handler+0x68>
						(1 << ADC_CALLBACK_READ_BUFFER)) &&
    47a8:	7ea3      	ldrb	r3, [r4, #26]
    47aa:	07db      	lsls	r3, r3, #31
    47ac:	d5e0      	bpl.n	4770 <ADC_Handler+0x68>
					(module->callback[ADC_CALLBACK_READ_BUFFER])(module);
    47ae:	0020      	movs	r0, r4
    47b0:	68a3      	ldr	r3, [r4, #8]
    47b2:	4798      	blx	r3
    47b4:	e7dc      	b.n	4770 <ADC_Handler+0x68>
			(module->callback[ADC_CALLBACK_WINDOW])(module);
    47b6:	0020      	movs	r0, r4
    47b8:	68e3      	ldr	r3, [r4, #12]
    47ba:	4798      	blx	r3
    47bc:	e7e3      	b.n	4786 <ADC_Handler+0x7e>
			(module->callback[ADC_CALLBACK_ERROR])(module);
    47be:	6923      	ldr	r3, [r4, #16]
    47c0:	0020      	movs	r0, r4
    47c2:	4798      	blx	r3
}
    47c4:	e7ea      	b.n	479c <ADC_Handler+0x94>
    47c6:	46c0      	nop			; (mov r8, r8)
    47c8:	200021ec 	.word	0x200021ec

000047cc <aes_get_config_defaults>:
		struct aes_config *const config)
{

	/* Sanity check arguments */
	Assert(config);
	config->encrypt_mode = AES_ENCRYPTION;
    47cc:	2301      	movs	r3, #1
    47ce:	7003      	strb	r3, [r0, #0]
	config->key_size = AES_KEY_SIZE_128;
    47d0:	2300      	movs	r3, #0
    47d2:	7043      	strb	r3, [r0, #1]
	config->start_mode = AES_MANUAL_START;
    47d4:	7083      	strb	r3, [r0, #2]
	config->opmode= AES_ECB_MODE;
    47d6:	70c3      	strb	r3, [r0, #3]
	config->cfb_size = AES_CFB_SIZE_128;
    47d8:	7103      	strb	r3, [r0, #4]
	config->ctype = AES_COUNTERMEASURE_TYPE_ALL;
    47da:	220f      	movs	r2, #15
    47dc:	7142      	strb	r2, [r0, #5]
	config->enable_xor_key = false;
    47de:	7183      	strb	r3, [r0, #6]
	config->enable_key_gen = false;
    47e0:	71c3      	strb	r3, [r0, #7]
	config->lod = false;
    47e2:	7203      	strb	r3, [r0, #8]
}
    47e4:	4770      	bx	lr

000047e6 <aes_enable>:
 */
void aes_enable(struct aes_module *const module)
{
	Assert(module);
	Assert(module->hw);
	module->hw->CTRLA.reg |= AES_CTRLA_ENABLE;
    47e6:	6802      	ldr	r2, [r0, #0]
    47e8:	6813      	ldr	r3, [r2, #0]
    47ea:	2102      	movs	r1, #2
    47ec:	430b      	orrs	r3, r1
    47ee:	6013      	str	r3, [r2, #0]

}
    47f0:	4770      	bx	lr

000047f2 <aes_disable>:
{
	Assert(module);
	Assert(module->hw);

	/* Disbale interrupt */
	module->hw->INTENCLR.reg = AES_INTENCLR_MASK;
    47f2:	2303      	movs	r3, #3
    47f4:	6802      	ldr	r2, [r0, #0]
    47f6:	7153      	strb	r3, [r2, #5]
	/* Clear interrupt flag */
	module->hw->INTFLAG.reg = AES_INTFLAG_MASK;
    47f8:	6802      	ldr	r2, [r0, #0]
    47fa:	71d3      	strb	r3, [r2, #7]

	module->hw->CTRLA.reg &= (~AES_CTRLA_ENABLE);
    47fc:	6802      	ldr	r2, [r0, #0]
    47fe:	6813      	ldr	r3, [r2, #0]
    4800:	2102      	movs	r1, #2
    4802:	438b      	bics	r3, r1
    4804:	6013      	str	r3, [r2, #0]
}
    4806:	4770      	bx	lr

00004808 <aes_set_config>:
 */
void aes_set_config(
		struct aes_module *const module,
		Aes *const hw,
		struct aes_config *const config)
{
    4808:	b570      	push	{r4, r5, r6, lr}
    480a:	0004      	movs	r4, r0
    480c:	000d      	movs	r5, r1
	/* Validate arguments. */
	Assert(hw);
	Assert(config);
	Assert(module);

	module->opmode = config->opmode;
    480e:	78d3      	ldrb	r3, [r2, #3]
    4810:	7103      	strb	r3, [r0, #4]
	module->hw = hw;
    4812:	6021      	str	r1, [r4, #0]
	module->key_size = config->key_size;
    4814:	7853      	ldrb	r3, [r2, #1]
    4816:	7143      	strb	r3, [r0, #5]
	module->cfb_size = config->cfb_size;
    4818:	7913      	ldrb	r3, [r2, #4]
    481a:	7183      	strb	r3, [r0, #6]

	ul_mode |= (config->encrypt_mode << AES_CTRLA_CIPHER_Pos)
    481c:	7813      	ldrb	r3, [r2, #0]
    481e:	029b      	lsls	r3, r3, #10
			 | (config->start_mode << AES_CTRLA_STARTMODE_Pos)
    4820:	7891      	ldrb	r1, [r2, #2]
    4822:	02c9      	lsls	r1, r1, #11
    4824:	430b      	orrs	r3, r1
			 | (config->key_size << AES_CTRLA_KEYSIZE_Pos)
    4826:	7851      	ldrb	r1, [r2, #1]
    4828:	0209      	lsls	r1, r1, #8
    482a:	430b      	orrs	r3, r1
			 | (config->opmode << AES_CTRLA_AESMODE_Pos)
    482c:	78d1      	ldrb	r1, [r2, #3]
    482e:	0089      	lsls	r1, r1, #2
    4830:	430b      	orrs	r3, r1
			 | (config->cfb_size << AES_CTRLA_CFBS_Pos)
    4832:	7911      	ldrb	r1, [r2, #4]
    4834:	0149      	lsls	r1, r1, #5
    4836:	430b      	orrs	r3, r1
			 | (AES_CTRLA_CTYPE(config->ctype))
			 | (config->enable_xor_key << AES_CTRLA_XORKEY_Pos)
    4838:	7991      	ldrb	r1, [r2, #6]
    483a:	0389      	lsls	r1, r1, #14
			 | (config->enable_key_gen << AES_CTRLA_KEYGEN_Pos)
    483c:	79d0      	ldrb	r0, [r2, #7]
    483e:	0340      	lsls	r0, r0, #13
			 | (config->lod << AES_CTRLA_LOD_Pos);
    4840:	4301      	orrs	r1, r0
    4842:	7a10      	ldrb	r0, [r2, #8]
    4844:	0300      	lsls	r0, r0, #12
    4846:	4301      	orrs	r1, r0
			 | (AES_CTRLA_CTYPE(config->ctype))
    4848:	7952      	ldrb	r2, [r2, #5]
    484a:	0412      	lsls	r2, r2, #16
    484c:	20f0      	movs	r0, #240	; 0xf0
    484e:	0300      	lsls	r0, r0, #12
    4850:	4002      	ands	r2, r0
			 | (config->lod << AES_CTRLA_LOD_Pos);
    4852:	430a      	orrs	r2, r1
    4854:	4313      	orrs	r3, r2
    4856:	001e      	movs	r6, r3
	if (hw->CTRLA.reg & AES_CTRLA_ENABLE) {
    4858:	682b      	ldr	r3, [r5, #0]
    485a:	079b      	lsls	r3, r3, #30
    485c:	d401      	bmi.n	4862 <aes_set_config+0x5a>
		aes_disable(module);
		hw->CTRLA.reg = ul_mode;
		aes_enable(module);
	} else {
		hw->CTRLA.reg = ul_mode;
    485e:	602e      	str	r6, [r5, #0]
	}
}
    4860:	bd70      	pop	{r4, r5, r6, pc}
		aes_disable(module);
    4862:	0020      	movs	r0, r4
    4864:	4b03      	ldr	r3, [pc, #12]	; (4874 <aes_set_config+0x6c>)
    4866:	4798      	blx	r3
		hw->CTRLA.reg = ul_mode;
    4868:	602e      	str	r6, [r5, #0]
		aes_enable(module);
    486a:	0020      	movs	r0, r4
    486c:	4b02      	ldr	r3, [pc, #8]	; (4878 <aes_set_config+0x70>)
    486e:	4798      	blx	r3
    4870:	e7f6      	b.n	4860 <aes_set_config+0x58>
    4872:	46c0      	nop			; (mov r8, r8)
    4874:	000047f3 	.word	0x000047f3
    4878:	000047e7 	.word	0x000047e7

0000487c <aes_init>:
{
    487c:	b570      	push	{r4, r5, r6, lr}
		case SYSTEM_CLOCK_APB_APBB:
			MCLK->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			MCLK->APBCMASK.reg |= mask;
    487e:	4c05      	ldr	r4, [pc, #20]	; (4894 <aes_init+0x18>)
    4880:	69e5      	ldr	r5, [r4, #28]
    4882:	2380      	movs	r3, #128	; 0x80
    4884:	019b      	lsls	r3, r3, #6
    4886:	432b      	orrs	r3, r5
    4888:	61e3      	str	r3, [r4, #28]
	hw->CTRLA.reg = AES_CTRLA_SWRST;
    488a:	2301      	movs	r3, #1
    488c:	600b      	str	r3, [r1, #0]
	aes_set_config(module,hw, config);
    488e:	4b02      	ldr	r3, [pc, #8]	; (4898 <aes_init+0x1c>)
    4890:	4798      	blx	r3
}
    4892:	bd70      	pop	{r4, r5, r6, pc}
    4894:	40000400 	.word	0x40000400
    4898:	00004809 	.word	0x00004809

0000489c <aes_write_key>:
 * \note The key size depends on the current AES configuration.
 */
void aes_write_key(
		struct aes_module *const module,
		const uint32_t *key)
{
    489c:	b570      	push	{r4, r5, r6, lr}
	/* Validate arguments. */
	Assert(module);
	Assert(module->hw);
	Assert(key);

	switch (module->key_size) {
    489e:	7943      	ldrb	r3, [r0, #5]
    48a0:	2b01      	cmp	r3, #1
    48a2:	d005      	beq.n	48b0 <aes_write_key+0x14>
    48a4:	2b00      	cmp	r3, #0
    48a6:	d010      	beq.n	48ca <aes_write_key+0x2e>
    48a8:	2b02      	cmp	r3, #2
    48aa:	d10d      	bne.n	48c8 <aes_write_key+0x2c>
	case AES_KEY_SIZE_192:
		key_length = 6;
		break;

	case AES_KEY_SIZE_256:
		key_length = 8;
    48ac:	2508      	movs	r5, #8
    48ae:	e000      	b.n	48b2 <aes_write_key+0x16>
		key_length = 6;
    48b0:	2506      	movs	r5, #6
{
    48b2:	2300      	movs	r3, #0
	default:
		break;
	}

	for (i = 0; i < key_length; i++) {
		module->hw->KEYWORD[i].reg = *key;
    48b4:	c910      	ldmia	r1!, {r4}
    48b6:	1c9a      	adds	r2, r3, #2
    48b8:	0092      	lsls	r2, r2, #2
    48ba:	6806      	ldr	r6, [r0, #0]
    48bc:	46b4      	mov	ip, r6
    48be:	4462      	add	r2, ip
    48c0:	6054      	str	r4, [r2, #4]
	for (i = 0; i < key_length; i++) {
    48c2:	3301      	adds	r3, #1
    48c4:	42ab      	cmp	r3, r5
    48c6:	d3f5      	bcc.n	48b4 <aes_write_key+0x18>
		key++;
	}
}
    48c8:	bd70      	pop	{r4, r5, r6, pc}
		key_length = 4;
    48ca:	2504      	movs	r5, #4
    48cc:	e7f1      	b.n	48b2 <aes_write_key+0x16>
	...

000048d0 <aes_write_input_data>:
 * \param[in] input_data_buffer Pointer to an input data buffer
 */
void aes_write_input_data(
		struct aes_module *const module,
		const uint32_t *input_data_buffer)
{
    48d0:	b510      	push	{r4, lr}
	/* Validate arguments. */
	Assert(module);
	Assert(module->hw);;
	Assert(input_data_buffer);

	module->hw->DATABUFPTR.reg = 0;
    48d2:	2300      	movs	r3, #0
    48d4:	6802      	ldr	r2, [r0, #0]
    48d6:	7213      	strb	r3, [r2, #8]
	if (module->opmode == AES_CFB_MODE
		&& module->cfb_size == AES_CFB_SIZE_64){
    48d8:	4b0f      	ldr	r3, [pc, #60]	; (4918 <aes_write_input_data+0x48>)
    48da:	6842      	ldr	r2, [r0, #4]
    48dc:	4013      	ands	r3, r2
	if (module->opmode == AES_CFB_MODE
    48de:	4a0f      	ldr	r2, [pc, #60]	; (491c <aes_write_input_data+0x4c>)
    48e0:	4293      	cmp	r3, r2
    48e2:	d00a      	beq.n	48fa <aes_write_input_data+0x2a>
		for (i = 0; i < 2; i++) {
			module->hw->INDATA.reg = *input_data_buffer;
			input_data_buffer++;
		}
	} else if (module->opmode == AES_CFB_MODE
    48e4:	7903      	ldrb	r3, [r0, #4]
    48e6:	2b03      	cmp	r3, #3
    48e8:	d00e      	beq.n	4908 <aes_write_input_data+0x38>
    48ea:	000c      	movs	r4, r1
    48ec:	3410      	adds	r4, #16
		&& (module->cfb_size == AES_CFB_SIZE_32 || module->cfb_size == AES_CFB_SIZE_16)){
		module->hw->INDATA.reg = *input_data_buffer;
	} else {
		for (i = 0; i < 4; i++) {
			module->hw->INDATA.reg = *input_data_buffer;
    48ee:	6803      	ldr	r3, [r0, #0]
    48f0:	c904      	ldmia	r1!, {r2}
    48f2:	639a      	str	r2, [r3, #56]	; 0x38
		for (i = 0; i < 4; i++) {
    48f4:	428c      	cmp	r4, r1
    48f6:	d1fa      	bne.n	48ee <aes_write_input_data+0x1e>
			input_data_buffer++;
		}
	}
}
    48f8:	bd10      	pop	{r4, pc}
			module->hw->INDATA.reg = *input_data_buffer;
    48fa:	6803      	ldr	r3, [r0, #0]
    48fc:	680a      	ldr	r2, [r1, #0]
    48fe:	639a      	str	r2, [r3, #56]	; 0x38
    4900:	6803      	ldr	r3, [r0, #0]
    4902:	684a      	ldr	r2, [r1, #4]
    4904:	639a      	str	r2, [r3, #56]	; 0x38
    4906:	e7f7      	b.n	48f8 <aes_write_input_data+0x28>
		&& (module->cfb_size == AES_CFB_SIZE_32 || module->cfb_size == AES_CFB_SIZE_16)){
    4908:	7983      	ldrb	r3, [r0, #6]
    490a:	3b02      	subs	r3, #2
    490c:	2b01      	cmp	r3, #1
    490e:	d8ec      	bhi.n	48ea <aes_write_input_data+0x1a>
		module->hw->INDATA.reg = *input_data_buffer;
    4910:	6803      	ldr	r3, [r0, #0]
    4912:	680a      	ldr	r2, [r1, #0]
    4914:	639a      	str	r2, [r3, #56]	; 0x38
    4916:	e7ef      	b.n	48f8 <aes_write_input_data+0x28>
    4918:	00ff00ff 	.word	0x00ff00ff
    491c:	00010003 	.word	0x00010003

00004920 <aes_read_output_data>:
	/* Validate arguments. */
	Assert(module);
	Assert(module->hw);
	Assert(output_data_buffer);

	module->hw->DATABUFPTR.reg = 0;
    4920:	2300      	movs	r3, #0
    4922:	6802      	ldr	r2, [r0, #0]
    4924:	7213      	strb	r3, [r2, #8]
	if (module->opmode == AES_CFB_MODE
		&& module->cfb_size == AES_CFB_SIZE_64){
    4926:	4b10      	ldr	r3, [pc, #64]	; (4968 <aes_read_output_data+0x48>)
    4928:	6842      	ldr	r2, [r0, #4]
    492a:	4013      	ands	r3, r2
	if (module->opmode == AES_CFB_MODE
    492c:	4a0f      	ldr	r2, [pc, #60]	; (496c <aes_read_output_data+0x4c>)
    492e:	4293      	cmp	r3, r2
    4930:	d00a      	beq.n	4948 <aes_read_output_data+0x28>
		for (i = 0; i < 2; i++) {
			*output_data_buffer = module->hw->INDATA.reg;
			output_data_buffer++;
		}
	} else if (module->opmode == AES_CFB_MODE
    4932:	7903      	ldrb	r3, [r0, #4]
    4934:	2b03      	cmp	r3, #3
    4936:	d00e      	beq.n	4956 <aes_read_output_data+0x36>
    4938:	000a      	movs	r2, r1
    493a:	3210      	adds	r2, #16
		&& (module->cfb_size == AES_CFB_SIZE_32 || module->cfb_size == AES_CFB_SIZE_16)){
		*output_data_buffer = module->hw->INDATA.reg;
	} else {
		for (i = 0; i < 4; i++) {
			*output_data_buffer = module->hw->INDATA.reg;
    493c:	6803      	ldr	r3, [r0, #0]
    493e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    4940:	c108      	stmia	r1!, {r3}
		for (i = 0; i < 4; i++) {
    4942:	428a      	cmp	r2, r1
    4944:	d1fa      	bne.n	493c <aes_read_output_data+0x1c>
			output_data_buffer++;
		}
	}
}
    4946:	4770      	bx	lr
			*output_data_buffer = module->hw->INDATA.reg;
    4948:	6803      	ldr	r3, [r0, #0]
    494a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    494c:	600b      	str	r3, [r1, #0]
    494e:	6803      	ldr	r3, [r0, #0]
    4950:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    4952:	604b      	str	r3, [r1, #4]
    4954:	e7f7      	b.n	4946 <aes_read_output_data+0x26>
		&& (module->cfb_size == AES_CFB_SIZE_32 || module->cfb_size == AES_CFB_SIZE_16)){
    4956:	7983      	ldrb	r3, [r0, #6]
    4958:	3b02      	subs	r3, #2
    495a:	2b01      	cmp	r3, #1
    495c:	d8ec      	bhi.n	4938 <aes_read_output_data+0x18>
		*output_data_buffer = module->hw->INDATA.reg;
    495e:	6803      	ldr	r3, [r0, #0]
    4960:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    4962:	600b      	str	r3, [r1, #0]
    4964:	e7ef      	b.n	4946 <aes_read_output_data+0x26>
    4966:	46c0      	nop			; (mov r8, r8)
    4968:	00ff00ff 	.word	0x00ff00ff
    496c:	00010003 	.word	0x00010003

00004970 <extint_register_callback>:
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    4970:	2317      	movs	r3, #23
	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
    4972:	2a00      	cmp	r2, #0
    4974:	d001      	beq.n	497a <extint_register_callback+0xa>
	} else if (_extint_dev.callbacks[channel] == callback) {
		return STATUS_OK;
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
}
    4976:	0018      	movs	r0, r3
    4978:	4770      	bx	lr
	if (_extint_dev.callbacks[channel] == NULL) {
    497a:	008b      	lsls	r3, r1, #2
    497c:	4a06      	ldr	r2, [pc, #24]	; (4998 <extint_register_callback+0x28>)
    497e:	589b      	ldr	r3, [r3, r2]
    4980:	2b00      	cmp	r3, #0
    4982:	d003      	beq.n	498c <extint_register_callback+0x1c>
	} else if (_extint_dev.callbacks[channel] == callback) {
    4984:	4283      	cmp	r3, r0
    4986:	d005      	beq.n	4994 <extint_register_callback+0x24>
	return STATUS_ERR_ALREADY_INITIALIZED;
    4988:	231d      	movs	r3, #29
    498a:	e7f4      	b.n	4976 <extint_register_callback+0x6>
		_extint_dev.callbacks[channel] = callback;
    498c:	0089      	lsls	r1, r1, #2
    498e:	5088      	str	r0, [r1, r2]
		return STATUS_OK;
    4990:	2300      	movs	r3, #0
    4992:	e7f0      	b.n	4976 <extint_register_callback+0x6>
		return STATUS_OK;
    4994:	2300      	movs	r3, #0
    4996:	e7ee      	b.n	4976 <extint_register_callback+0x6>
    4998:	200021f4 	.word	0x200021f4

0000499c <extint_chan_enable_callback>:

		eic->INTENSET.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    499c:	2317      	movs	r3, #23
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
    499e:	2900      	cmp	r1, #0
    49a0:	d001      	beq.n	49a6 <extint_chan_enable_callback+0xa>
	}

	return STATUS_OK;
}
    49a2:	0018      	movs	r0, r3
    49a4:	4770      	bx	lr
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
	} else {
		Assert(false);
		return NULL;
    49a6:	2200      	movs	r2, #0
	if (eic_index < EIC_INST_NUM) {
    49a8:	281f      	cmp	r0, #31
    49aa:	d800      	bhi.n	49ae <extint_chan_enable_callback+0x12>
		return eics[eic_index];
    49ac:	4a02      	ldr	r2, [pc, #8]	; (49b8 <extint_chan_enable_callback+0x1c>)
		eic->INTENSET.reg = (1UL << channel);
    49ae:	2301      	movs	r3, #1
    49b0:	4083      	lsls	r3, r0
    49b2:	6113      	str	r3, [r2, #16]
	return STATUS_OK;
    49b4:	2300      	movs	r3, #0
    49b6:	e7f4      	b.n	49a2 <extint_chan_enable_callback+0x6>
    49b8:	40002400 	.word	0x40002400

000049bc <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
    49bc:	b570      	push	{r4, r5, r6, lr}
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    49be:	2200      	movs	r2, #0
    49c0:	4b10      	ldr	r3, [pc, #64]	; (4a04 <EIC_Handler+0x48>)
    49c2:	701a      	strb	r2, [r3, #0]
    49c4:	2300      	movs	r3, #0
    49c6:	4910      	ldr	r1, [pc, #64]	; (4a08 <EIC_Handler+0x4c>)
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
    49c8:	251f      	movs	r5, #31
		if (extint_chan_is_detected(_current_channel)) {
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    49ca:	4e10      	ldr	r6, [pc, #64]	; (4a0c <EIC_Handler+0x50>)
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    49cc:	4c0d      	ldr	r4, [pc, #52]	; (4a04 <EIC_Handler+0x48>)
    49ce:	e00a      	b.n	49e6 <EIC_Handler+0x2a>
		return eics[eic_index];
    49d0:	490d      	ldr	r1, [pc, #52]	; (4a08 <EIC_Handler+0x4c>)
    49d2:	e008      	b.n	49e6 <EIC_Handler+0x2a>
    49d4:	7823      	ldrb	r3, [r4, #0]
    49d6:	3301      	adds	r3, #1
    49d8:	b2db      	uxtb	r3, r3
    49da:	7023      	strb	r3, [r4, #0]
    49dc:	2b0f      	cmp	r3, #15
    49de:	d810      	bhi.n	4a02 <EIC_Handler+0x46>
		return NULL;
    49e0:	2100      	movs	r1, #0
	if (eic_index < EIC_INST_NUM) {
    49e2:	2b1f      	cmp	r3, #31
    49e4:	d9f4      	bls.n	49d0 <EIC_Handler+0x14>
	uint32_t eic_mask   = (1UL << (channel % 32));
    49e6:	0028      	movs	r0, r5
    49e8:	4018      	ands	r0, r3
    49ea:	2201      	movs	r2, #1
    49ec:	4082      	lsls	r2, r0

	return (eic_module->INTFLAG.reg & eic_mask);
    49ee:	6948      	ldr	r0, [r1, #20]
		if (extint_chan_is_detected(_current_channel)) {
    49f0:	4210      	tst	r0, r2
    49f2:	d0ef      	beq.n	49d4 <EIC_Handler+0x18>
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));

	eic_module->INTFLAG.reg = eic_mask;
    49f4:	614a      	str	r2, [r1, #20]
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    49f6:	009b      	lsls	r3, r3, #2
    49f8:	599b      	ldr	r3, [r3, r6]
    49fa:	2b00      	cmp	r3, #0
    49fc:	d0ea      	beq.n	49d4 <EIC_Handler+0x18>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
    49fe:	4798      	blx	r3
    4a00:	e7e8      	b.n	49d4 <EIC_Handler+0x18>
			}
		}
	}
}
    4a02:	bd70      	pop	{r4, r5, r6, pc}
    4a04:	200021f0 	.word	0x200021f0
    4a08:	40002400 	.word	0x40002400
    4a0c:	200021f4 	.word	0x200021f4

00004a10 <_extint_enable>:
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRLA.reg |= EIC_CTRLA_ENABLE;
    4a10:	4a06      	ldr	r2, [pc, #24]	; (4a2c <_extint_enable+0x1c>)
    4a12:	7813      	ldrb	r3, [r2, #0]
    4a14:	2102      	movs	r1, #2
    4a16:	430b      	orrs	r3, r1
    4a18:	7013      	strb	r3, [r2, #0]
		 || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
    4a1a:	2001      	movs	r0, #1
		if((eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_ENABLE)
    4a1c:	6853      	ldr	r3, [r2, #4]
    4a1e:	4219      	tst	r1, r3
    4a20:	d1fc      	bne.n	4a1c <_extint_enable+0xc>
		 || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
    4a22:	6853      	ldr	r3, [r2, #4]
    4a24:	4218      	tst	r0, r3
    4a26:	d1f9      	bne.n	4a1c <_extint_enable+0xc>
	}

	while (extint_is_syncing()) {
		/* Wait for all hardware modules to complete synchronization */
	}
}
    4a28:	4770      	bx	lr
    4a2a:	46c0      	nop			; (mov r8, r8)
    4a2c:	40002400 	.word	0x40002400

00004a30 <_extint_disable>:
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Disable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRLA.reg &= ~EIC_CTRLA_ENABLE;
    4a30:	4a06      	ldr	r2, [pc, #24]	; (4a4c <_extint_disable+0x1c>)
    4a32:	7813      	ldrb	r3, [r2, #0]
    4a34:	2102      	movs	r1, #2
    4a36:	438b      	bics	r3, r1
    4a38:	7013      	strb	r3, [r2, #0]
		 || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
    4a3a:	2001      	movs	r0, #1
		if((eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_ENABLE)
    4a3c:	6853      	ldr	r3, [r2, #4]
    4a3e:	4219      	tst	r1, r3
    4a40:	d1fc      	bne.n	4a3c <_extint_disable+0xc>
		 || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
    4a42:	6853      	ldr	r3, [r2, #4]
    4a44:	4218      	tst	r0, r3
    4a46:	d1f9      	bne.n	4a3c <_extint_disable+0xc>
	}

	while (extint_is_syncing()) {
		/* Wait for all hardware modules to complete synchronization */
	}
}
    4a48:	4770      	bx	lr
    4a4a:	46c0      	nop			; (mov r8, r8)
    4a4c:	40002400 	.word	0x40002400

00004a50 <_system_extint_init>:
{
    4a50:	b510      	push	{r4, lr}
			MCLK->APBAMASK.reg |= mask;
    4a52:	4a12      	ldr	r2, [pc, #72]	; (4a9c <_system_extint_init+0x4c>)
    4a54:	6951      	ldr	r1, [r2, #20]
    4a56:	2380      	movs	r3, #128	; 0x80
    4a58:	009b      	lsls	r3, r3, #2
    4a5a:	430b      	orrs	r3, r1
    4a5c:	6153      	str	r3, [r2, #20]
		eics[i]->CTRLA.reg |= EIC_CTRLA_SWRST;
    4a5e:	4a10      	ldr	r2, [pc, #64]	; (4aa0 <_system_extint_init+0x50>)
    4a60:	7813      	ldrb	r3, [r2, #0]
    4a62:	2101      	movs	r1, #1
    4a64:	430b      	orrs	r3, r1
    4a66:	7013      	strb	r3, [r2, #0]
		if((eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_ENABLE)
    4a68:	3101      	adds	r1, #1
		 || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
    4a6a:	2001      	movs	r0, #1
		if((eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_ENABLE)
    4a6c:	6853      	ldr	r3, [r2, #4]
    4a6e:	4219      	tst	r1, r3
    4a70:	d1fc      	bne.n	4a6c <_system_extint_init+0x1c>
		 || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
    4a72:	6853      	ldr	r3, [r2, #4]
    4a74:	4218      	tst	r0, r3
    4a76:	d1f9      	bne.n	4a6c <_system_extint_init+0x1c>
		eics[i]->CTRLA.bit.CKSEL = EXTINT_CLK_ULP32K;
    4a78:	4a09      	ldr	r2, [pc, #36]	; (4aa0 <_system_extint_init+0x50>)
    4a7a:	7813      	ldrb	r3, [r2, #0]
    4a7c:	2110      	movs	r1, #16
    4a7e:	430b      	orrs	r3, r1
    4a80:	7013      	strb	r3, [r2, #0]
    4a82:	4b08      	ldr	r3, [pc, #32]	; (4aa4 <_system_extint_init+0x54>)
    4a84:	0019      	movs	r1, r3
    4a86:	3140      	adds	r1, #64	; 0x40
		_extint_dev.callbacks[j] = NULL;
    4a88:	2200      	movs	r2, #0
    4a8a:	c304      	stmia	r3!, {r2}
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
    4a8c:	428b      	cmp	r3, r1
    4a8e:	d1fc      	bne.n	4a8a <_system_extint_init+0x3a>
    4a90:	2208      	movs	r2, #8
    4a92:	4b05      	ldr	r3, [pc, #20]	; (4aa8 <_system_extint_init+0x58>)
    4a94:	601a      	str	r2, [r3, #0]
	_extint_enable();
    4a96:	4b05      	ldr	r3, [pc, #20]	; (4aac <_system_extint_init+0x5c>)
    4a98:	4798      	blx	r3
}
    4a9a:	bd10      	pop	{r4, pc}
    4a9c:	40000400 	.word	0x40000400
    4aa0:	40002400 	.word	0x40002400
    4aa4:	200021f4 	.word	0x200021f4
    4aa8:	e000e100 	.word	0xe000e100
    4aac:	00004a11 	.word	0x00004a11

00004ab0 <extint_chan_get_config_defaults>:
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->gpio_pin            = 0;
    4ab0:	2300      	movs	r3, #0
    4ab2:	6003      	str	r3, [r0, #0]
	config->gpio_pin_mux        = 0;
    4ab4:	6043      	str	r3, [r0, #4]
	config->gpio_pin_pull       = EXTINT_PULL_UP;
    4ab6:	2201      	movs	r2, #1
    4ab8:	7202      	strb	r2, [r0, #8]
	config->filter_input_signal = false;
    4aba:	7283      	strb	r3, [r0, #10]
	config->detection_criteria  = EXTINT_DETECT_FALLING;
    4abc:	3201      	adds	r2, #1
    4abe:	72c2      	strb	r2, [r0, #11]
	config->enable_async_edge_detection = false;
    4ac0:	7243      	strb	r3, [r0, #9]
}
    4ac2:	4770      	bx	lr

00004ac4 <extint_chan_set_config>:

 */
void extint_chan_set_config(
		const uint8_t channel,
		const struct extint_chan_conf *const config)
{
    4ac4:	b5f0      	push	{r4, r5, r6, r7, lr}
    4ac6:	b083      	sub	sp, #12
    4ac8:	0005      	movs	r5, r0
    4aca:	000c      	movs	r4, r1
	/* Sanity check arguments */
	Assert(config);
	_extint_disable();
    4acc:	4b1c      	ldr	r3, [pc, #112]	; (4b40 <extint_chan_set_config+0x7c>)
    4ace:	4798      	blx	r3
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    4ad0:	a901      	add	r1, sp, #4
    4ad2:	2300      	movs	r3, #0
    4ad4:	704b      	strb	r3, [r1, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
    4ad6:	70cb      	strb	r3, [r1, #3]
			config->detection_criteria)));
#endif
	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = config->gpio_pin_mux;
    4ad8:	7923      	ldrb	r3, [r4, #4]
    4ada:	700b      	strb	r3, [r1, #0]
	pinmux_config.direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->gpio_pin_pull;
    4adc:	7a23      	ldrb	r3, [r4, #8]
    4ade:	708b      	strb	r3, [r1, #2]
	system_pinmux_pin_set_config(config->gpio_pin, &pinmux_config);
    4ae0:	7820      	ldrb	r0, [r4, #0]
    4ae2:	4b18      	ldr	r3, [pc, #96]	; (4b44 <extint_chan_set_config+0x80>)
    4ae4:	4798      	blx	r3
		return NULL;
    4ae6:	2100      	movs	r1, #0
	if (eic_index < EIC_INST_NUM) {
    4ae8:	2d1f      	cmp	r5, #31
    4aea:	d800      	bhi.n	4aee <extint_chan_set_config+0x2a>
		return eics[eic_index];
    4aec:	4916      	ldr	r1, [pc, #88]	; (4b48 <extint_chan_set_config+0x84>)

	/* Get a pointer to the module hardware instance */
	Eic *const EIC_module = _extint_get_eic_from_channel(channel);

	uint32_t config_pos = (4 * (channel % 8));
    4aee:	2207      	movs	r2, #7
    4af0:	402a      	ands	r2, r5
    4af2:	0092      	lsls	r2, r2, #2
	uint32_t new_config;

	/* Determine the channel's new edge detection configuration */
	new_config = (config->detection_criteria << EIC_CONFIG_SENSE0_Pos);
    4af4:	7ae7      	ldrb	r7, [r4, #11]

	/* Enable the hardware signal filter if requested in the config */
	if (config->filter_input_signal) {
    4af6:	7aa3      	ldrb	r3, [r4, #10]
    4af8:	2b00      	cmp	r3, #0
    4afa:	d001      	beq.n	4b00 <extint_chan_set_config+0x3c>
    4afc:	2308      	movs	r3, #8
    4afe:	431f      	orrs	r7, r3
    4b00:	08eb      	lsrs	r3, r5, #3
    4b02:	009b      	lsls	r3, r3, #2
    4b04:	18cb      	adds	r3, r1, r3
		new_config |= EIC_CONFIG_FILTEN0;
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
    4b06:	69d8      	ldr	r0, [r3, #28]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
    4b08:	260f      	movs	r6, #15
    4b0a:	4096      	lsls	r6, r2
		= (EIC_module->CONFIG[channel / 8].reg &
    4b0c:	43b0      	bics	r0, r6
			(new_config << config_pos);
    4b0e:	4097      	lsls	r7, r2
    4b10:	003a      	movs	r2, r7
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
    4b12:	4302      	orrs	r2, r0
		= (EIC_module->CONFIG[channel / 8].reg &
    4b14:	61da      	str	r2, [r3, #28]
#if (SAML22) || (SAML21XXXB) || (SAMC20) || (SAMR30) || (SAMR34) || (SAMR35) || (WLR089)
	/* Config asynchronous edge detection */
	if (config->enable_async_edge_detection) {
    4b16:	7a63      	ldrb	r3, [r4, #9]
    4b18:	2b00      	cmp	r3, #0
    4b1a:	d10b      	bne.n	4b34 <extint_chan_set_config+0x70>
		EIC_module->ASYNCH.reg |= (1UL << channel);
	} else {
		EIC_module->ASYNCH.reg &= (EIC_ASYNCH_MASK & (~(1UL << channel)));
    4b1c:	698a      	ldr	r2, [r1, #24]
    4b1e:	2301      	movs	r3, #1
    4b20:	40ab      	lsls	r3, r5
    4b22:	43db      	mvns	r3, r3
    4b24:	041b      	lsls	r3, r3, #16
    4b26:	0c1b      	lsrs	r3, r3, #16
    4b28:	4013      	ands	r3, r2
    4b2a:	618b      	str	r3, [r1, #24]
		EIC_module->EIC_ASYNCH.reg |= (1UL << channel);
	} else {
		EIC_module->EIC_ASYNCH.reg &= (EIC_EIC_ASYNCH_MASK & (~(1UL << channel)));
	}
#endif
	_extint_enable();
    4b2c:	4b07      	ldr	r3, [pc, #28]	; (4b4c <extint_chan_set_config+0x88>)
    4b2e:	4798      	blx	r3
}
    4b30:	b003      	add	sp, #12
    4b32:	bdf0      	pop	{r4, r5, r6, r7, pc}
		EIC_module->ASYNCH.reg |= (1UL << channel);
    4b34:	698a      	ldr	r2, [r1, #24]
    4b36:	2301      	movs	r3, #1
    4b38:	40ab      	lsls	r3, r5
    4b3a:	4313      	orrs	r3, r2
    4b3c:	618b      	str	r3, [r1, #24]
    4b3e:	e7f5      	b.n	4b2c <extint_chan_set_config+0x68>
    4b40:	00004a31 	.word	0x00004a31
    4b44:	000073d5 	.word	0x000073d5
    4b48:	40002400 	.word	0x40002400
    4b4c:	00004a11 	.word	0x00004a11

00004b50 <nvm_set_config>:
 *                        EEPROM and/or auxiliary space configuration from being
 *                        altered
 */
enum status_code nvm_set_config(
		const struct nvm_config *const config)
{
    4b50:	b510      	push	{r4, lr}
			MCLK->APBBMASK.reg |= mask;
    4b52:	4a1e      	ldr	r2, [pc, #120]	; (4bcc <nvm_set_config+0x7c>)
    4b54:	6993      	ldr	r3, [r2, #24]
    4b56:	2104      	movs	r1, #4
    4b58:	430b      	orrs	r3, r1
    4b5a:	6193      	str	r3, [r2, #24]
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBB, PM_APBBMASK_NVMCTRL);
#endif

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
    4b5c:	4b1c      	ldr	r3, [pc, #112]	; (4bd0 <nvm_set_config+0x80>)
    4b5e:	2220      	movs	r2, #32
    4b60:	32ff      	adds	r2, #255	; 0xff
    4b62:	831a      	strh	r2, [r3, #24]
static inline bool nvm_is_ready(void)
{
	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;

	return nvm_module->INTFLAG.reg & NVMCTRL_INTFLAG_READY;
    4b64:	7d1a      	ldrb	r2, [r3, #20]

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
		return STATUS_BUSY;
    4b66:	2305      	movs	r3, #5
	if (!nvm_is_ready()) {
    4b68:	07d2      	lsls	r2, r2, #31
    4b6a:	d401      	bmi.n	4b70 <nvm_set_config+0x20>
	if (nvm_module->STATUS.reg & NVMCTRL_STATUS_SB) {
		return STATUS_ERR_IO;
	}

	return STATUS_OK;
}
    4b6c:	0018      	movs	r0, r3
    4b6e:	bd10      	pop	{r4, pc}
			NVMCTRL_CTRLB_SLEEPPRM(config->sleep_power_mode) |
    4b70:	7803      	ldrb	r3, [r0, #0]
    4b72:	021b      	lsls	r3, r3, #8
    4b74:	22c0      	movs	r2, #192	; 0xc0
    4b76:	0092      	lsls	r2, r2, #2
    4b78:	4013      	ands	r3, r2
			((config->manual_page_write & 0x01) << NVMCTRL_CTRLB_MANW_Pos) |
    4b7a:	7841      	ldrb	r1, [r0, #1]
    4b7c:	01c9      	lsls	r1, r1, #7
    4b7e:	22ff      	movs	r2, #255	; 0xff
    4b80:	400a      	ands	r2, r1
			NVMCTRL_CTRLB_SLEEPPRM(config->sleep_power_mode) |
    4b82:	4313      	orrs	r3, r2
			NVMCTRL_CTRLB_RWS(config->wait_states) |
    4b84:	7881      	ldrb	r1, [r0, #2]
    4b86:	0049      	lsls	r1, r1, #1
    4b88:	221e      	movs	r2, #30
    4b8a:	400a      	ands	r2, r1
			((config->manual_page_write & 0x01) << NVMCTRL_CTRLB_MANW_Pos) |
    4b8c:	4313      	orrs	r3, r2
			((config->disable_cache & 0x01) << NVMCTRL_CTRLB_CACHEDIS_Pos) |
    4b8e:	78c2      	ldrb	r2, [r0, #3]
    4b90:	0492      	lsls	r2, r2, #18
    4b92:	2180      	movs	r1, #128	; 0x80
    4b94:	02c9      	lsls	r1, r1, #11
    4b96:	400a      	ands	r2, r1
			NVMCTRL_CTRLB_RWS(config->wait_states) |
    4b98:	4313      	orrs	r3, r2
			NVMCTRL_CTRLB_READMODE(config->cache_readmode);
    4b9a:	7902      	ldrb	r2, [r0, #4]
    4b9c:	0412      	lsls	r2, r2, #16
    4b9e:	21c0      	movs	r1, #192	; 0xc0
    4ba0:	0289      	lsls	r1, r1, #10
    4ba2:	400a      	ands	r2, r1
			((config->disable_cache & 0x01) << NVMCTRL_CTRLB_CACHEDIS_Pos) |
    4ba4:	4313      	orrs	r3, r2
	nvm_module->CTRLB.reg =
    4ba6:	4a0a      	ldr	r2, [pc, #40]	; (4bd0 <nvm_set_config+0x80>)
    4ba8:	6053      	str	r3, [r2, #4]
	_nvm_dev.page_size         = (8 << nvm_module->PARAM.bit.PSZ);
    4baa:	6893      	ldr	r3, [r2, #8]
    4bac:	035b      	lsls	r3, r3, #13
    4bae:	0f5b      	lsrs	r3, r3, #29
    4bb0:	4908      	ldr	r1, [pc, #32]	; (4bd4 <nvm_set_config+0x84>)
    4bb2:	2408      	movs	r4, #8
    4bb4:	409c      	lsls	r4, r3
    4bb6:	800c      	strh	r4, [r1, #0]
	_nvm_dev.number_of_pages   = nvm_module->PARAM.bit.NVMP;
    4bb8:	6893      	ldr	r3, [r2, #8]
    4bba:	804b      	strh	r3, [r1, #2]
	_nvm_dev.manual_page_write = config->manual_page_write;
    4bbc:	7843      	ldrb	r3, [r0, #1]
    4bbe:	710b      	strb	r3, [r1, #4]
	if (nvm_module->STATUS.reg & NVMCTRL_STATUS_SB) {
    4bc0:	8b13      	ldrh	r3, [r2, #24]
    4bc2:	05db      	lsls	r3, r3, #23
	return STATUS_OK;
    4bc4:	0fdb      	lsrs	r3, r3, #31
    4bc6:	011b      	lsls	r3, r3, #4
    4bc8:	e7d0      	b.n	4b6c <nvm_set_config+0x1c>
    4bca:	46c0      	nop			; (mov r8, r8)
    4bcc:	40000400 	.word	0x40000400
    4bd0:	41004000 	.word	0x41004000
    4bd4:	20000b60 	.word	0x20000b60

00004bd8 <nvm_execute_command>:
 */
enum status_code nvm_execute_command(
		const enum nvm_command command,
		const uint32_t address,
		const uint32_t parameter)
{
    4bd8:	b530      	push	{r4, r5, lr}
	uint32_t ctrlb_bak;

	/* Check that the address given is valid  */
	if (address > ((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)
    4bda:	4a30      	ldr	r2, [pc, #192]	; (4c9c <nvm_execute_command+0xc4>)
    4bdc:	8814      	ldrh	r4, [r2, #0]
    4bde:	8853      	ldrh	r3, [r2, #2]
    4be0:	4363      	muls	r3, r4
    4be2:	428b      	cmp	r3, r1
    4be4:	d20b      	bcs.n	4bfe <nvm_execute_command+0x26>
		&& !(address >= NVMCTRL_AUX0_ADDRESS && address <= NVMCTRL_AUX1_ADDRESS )){
    4be6:	2280      	movs	r2, #128	; 0x80
    4be8:	0192      	lsls	r2, r2, #6
    4bea:	4b2d      	ldr	r3, [pc, #180]	; (4ca0 <nvm_execute_command+0xc8>)
    4bec:	18cb      	adds	r3, r1, r3
    4bee:	4293      	cmp	r3, r2
    4bf0:	d905      	bls.n	4bfe <nvm_execute_command+0x26>
#ifdef FEATURE_NVM_RWWEE
		if (address >= ((uint32_t)NVMCTRL_RWW_EEPROM_SIZE + NVMCTRL_RWW_EEPROM_ADDR)
    4bf2:	4c2c      	ldr	r4, [pc, #176]	; (4ca4 <nvm_execute_command+0xcc>)
			|| address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
    4bf4:	2318      	movs	r3, #24
		if (address >= ((uint32_t)NVMCTRL_RWW_EEPROM_SIZE + NVMCTRL_RWW_EEPROM_ADDR)
    4bf6:	4a2c      	ldr	r2, [pc, #176]	; (4ca8 <nvm_execute_command+0xd0>)
    4bf8:	188a      	adds	r2, r1, r2
    4bfa:	42a2      	cmp	r2, r4
    4bfc:	d80e      	bhi.n	4c1c <nvm_execute_command+0x44>

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;

	/* Turn off cache before issuing flash commands */
	ctrlb_bak = nvm_module->CTRLB.reg;
    4bfe:	4b2b      	ldr	r3, [pc, #172]	; (4cac <nvm_execute_command+0xd4>)
    4c00:	685c      	ldr	r4, [r3, #4]
#if (SAMC20) || (SAMC21)
	nvm_module->CTRLB.reg = ((ctrlb_bak &(~(NVMCTRL_CTRLB_CACHEDIS(0x2))))
							| NVMCTRL_CTRLB_CACHEDIS(0x1));
#else
	nvm_module->CTRLB.reg = ctrlb_bak | NVMCTRL_CTRLB_CACHEDIS;
    4c02:	2280      	movs	r2, #128	; 0x80
    4c04:	02d2      	lsls	r2, r2, #11
    4c06:	4322      	orrs	r2, r4
    4c08:	605a      	str	r2, [r3, #4]
#endif

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
    4c0a:	2220      	movs	r2, #32
    4c0c:	32ff      	adds	r2, #255	; 0xff
    4c0e:	831a      	strh	r2, [r3, #24]
    4c10:	7d1b      	ldrb	r3, [r3, #20]

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
    4c12:	07db      	lsls	r3, r3, #31
    4c14:	d404      	bmi.n	4c20 <nvm_execute_command+0x48>
		/* Restore the setting */
		nvm_module->CTRLB.reg = ctrlb_bak;
    4c16:	4b25      	ldr	r3, [pc, #148]	; (4cac <nvm_execute_command+0xd4>)
    4c18:	605c      	str	r4, [r3, #4]
		return STATUS_BUSY;
    4c1a:	2305      	movs	r3, #5

	/* Restore the setting */
	nvm_module->CTRLB.reg = ctrlb_bak;

	return STATUS_OK;
}
    4c1c:	0018      	movs	r0, r3
    4c1e:	bd30      	pop	{r4, r5, pc}
	switch (command) {
    4c20:	2845      	cmp	r0, #69	; 0x45
    4c22:	d829      	bhi.n	4c78 <nvm_execute_command+0xa0>
    4c24:	0083      	lsls	r3, r0, #2
    4c26:	4a22      	ldr	r2, [pc, #136]	; (4cb0 <nvm_execute_command+0xd8>)
    4c28:	58d3      	ldr	r3, [r2, r3]
    4c2a:	469f      	mov	pc, r3
			if (nvm_module->STATUS.reg & NVMCTRL_STATUS_SB) {
    4c2c:	4b1f      	ldr	r3, [pc, #124]	; (4cac <nvm_execute_command+0xd4>)
    4c2e:	8b1b      	ldrh	r3, [r3, #24]
    4c30:	05db      	lsls	r3, r3, #23
    4c32:	d503      	bpl.n	4c3c <nvm_execute_command+0x64>
				nvm_module->CTRLB.reg = ctrlb_bak;
    4c34:	4b1d      	ldr	r3, [pc, #116]	; (4cac <nvm_execute_command+0xd4>)
    4c36:	605c      	str	r4, [r3, #4]
				return STATUS_ERR_IO;
    4c38:	2310      	movs	r3, #16
    4c3a:	e7ef      	b.n	4c1c <nvm_execute_command+0x44>
			nvm_module->ADDR.reg = (uintptr_t)&NVM_MEMORY[address / 4];
    4c3c:	0889      	lsrs	r1, r1, #2
    4c3e:	0049      	lsls	r1, r1, #1
    4c40:	4b1a      	ldr	r3, [pc, #104]	; (4cac <nvm_execute_command+0xd4>)
    4c42:	61d9      	str	r1, [r3, #28]
			break;
    4c44:	e003      	b.n	4c4e <nvm_execute_command+0x76>
			nvm_module->ADDR.reg = (uintptr_t)&NVM_MEMORY[address / 4];
    4c46:	0889      	lsrs	r1, r1, #2
    4c48:	0049      	lsls	r1, r1, #1
    4c4a:	4b18      	ldr	r3, [pc, #96]	; (4cac <nvm_execute_command+0xd4>)
    4c4c:	61d9      	str	r1, [r3, #28]
	if( command == NVM_COMMAND_RWWEE_ERASE_ROW || command == NVM_COMMAND_RWWEE_WRITE_PAGE)
    4c4e:	23fd      	movs	r3, #253	; 0xfd
    4c50:	0005      	movs	r5, r0
    4c52:	3d1a      	subs	r5, #26
    4c54:	401d      	ands	r5, r3
    4c56:	d013      	beq.n	4c80 <nvm_execute_command+0xa8>
	nvm_module->CTRLA.reg = command | NVMCTRL_CTRLA_CMDEX_KEY;
    4c58:	23a5      	movs	r3, #165	; 0xa5
    4c5a:	021b      	lsls	r3, r3, #8
    4c5c:	4318      	orrs	r0, r3
    4c5e:	4b13      	ldr	r3, [pc, #76]	; (4cac <nvm_execute_command+0xd4>)
    4c60:	8018      	strh	r0, [r3, #0]
    4c62:	0019      	movs	r1, r3
	while (!nvm_is_ready()) {
    4c64:	2201      	movs	r2, #1
    4c66:	7d0b      	ldrb	r3, [r1, #20]
    4c68:	4213      	tst	r3, r2
    4c6a:	d0fc      	beq.n	4c66 <nvm_execute_command+0x8e>
	if( command == NVM_COMMAND_RWWEE_ERASE_ROW || command == NVM_COMMAND_RWWEE_WRITE_PAGE)
    4c6c:	2d00      	cmp	r5, #0
    4c6e:	d00f      	beq.n	4c90 <nvm_execute_command+0xb8>
	nvm_module->CTRLB.reg = ctrlb_bak;
    4c70:	4b0e      	ldr	r3, [pc, #56]	; (4cac <nvm_execute_command+0xd4>)
    4c72:	605c      	str	r4, [r3, #4]
	return STATUS_OK;
    4c74:	2300      	movs	r3, #0
    4c76:	e7d1      	b.n	4c1c <nvm_execute_command+0x44>
			nvm_module->CTRLB.reg = ctrlb_bak;
    4c78:	4b0c      	ldr	r3, [pc, #48]	; (4cac <nvm_execute_command+0xd4>)
    4c7a:	605c      	str	r4, [r3, #4]
			return STATUS_ERR_INVALID_ARG;
    4c7c:	2317      	movs	r3, #23
    4c7e:	e7cd      	b.n	4c1c <nvm_execute_command+0x44>
		nvm_module->CTRLB.bit.CACHEDIS = 1;
    4c80:	4b0a      	ldr	r3, [pc, #40]	; (4cac <nvm_execute_command+0xd4>)
    4c82:	6859      	ldr	r1, [r3, #4]
    4c84:	2280      	movs	r2, #128	; 0x80
    4c86:	02d2      	lsls	r2, r2, #11
    4c88:	430a      	orrs	r2, r1
    4c8a:	605a      	str	r2, [r3, #4]
		nvm_module->CTRLB.reg;
    4c8c:	685b      	ldr	r3, [r3, #4]
    4c8e:	e7e3      	b.n	4c58 <nvm_execute_command+0x80>
		nvm_module->CTRLB.bit.CACHEDIS = 0;
    4c90:	4a06      	ldr	r2, [pc, #24]	; (4cac <nvm_execute_command+0xd4>)
    4c92:	6853      	ldr	r3, [r2, #4]
    4c94:	4907      	ldr	r1, [pc, #28]	; (4cb4 <nvm_execute_command+0xdc>)
    4c96:	400b      	ands	r3, r1
    4c98:	6053      	str	r3, [r2, #4]
    4c9a:	e7e9      	b.n	4c70 <nvm_execute_command+0x98>
    4c9c:	20000b60 	.word	0x20000b60
    4ca0:	ff7fc000 	.word	0xff7fc000
    4ca4:	00001fff 	.word	0x00001fff
    4ca8:	ffc00000 	.word	0xffc00000
    4cac:	41004000 	.word	0x41004000
    4cb0:	0001fa78 	.word	0x0001fa78
    4cb4:	fffbffff 	.word	0xfffbffff

00004cb8 <nvm_write_buffer>:
 */
enum status_code nvm_write_buffer(
		const uint32_t destination_address,
		const uint8_t *buffer,
		uint16_t length)
{
    4cb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	bool is_rww_eeprom = false;
#endif

	/* Check if the destination address is valid */
	if (destination_address >
			((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)) {
    4cba:	4b2f      	ldr	r3, [pc, #188]	; (4d78 <nvm_write_buffer+0xc0>)
    4cbc:	881c      	ldrh	r4, [r3, #0]
    4cbe:	885b      	ldrh	r3, [r3, #2]
    4cc0:	4363      	muls	r3, r4
	if (destination_address >
    4cc2:	4283      	cmp	r3, r0
    4cc4:	d207      	bcs.n	4cd6 <nvm_write_buffer+0x1e>
#ifdef FEATURE_NVM_RWWEE
		if (destination_address >= ((uint32_t)NVMCTRL_RWW_EEPROM_SIZE + NVMCTRL_RWW_EEPROM_ADDR)
    4cc6:	4e2d      	ldr	r6, [pc, #180]	; (4d7c <nvm_write_buffer+0xc4>)
			|| destination_address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
    4cc8:	2518      	movs	r5, #24
		if (destination_address >= ((uint32_t)NVMCTRL_RWW_EEPROM_SIZE + NVMCTRL_RWW_EEPROM_ADDR)
    4cca:	4b2d      	ldr	r3, [pc, #180]	; (4d80 <nvm_write_buffer+0xc8>)
    4ccc:	18c3      	adds	r3, r0, r3
    4cce:	42b3      	cmp	r3, r6
    4cd0:	d806      	bhi.n	4ce0 <nvm_write_buffer+0x28>
		}
		is_rww_eeprom = true;
    4cd2:	2601      	movs	r6, #1
    4cd4:	e000      	b.n	4cd8 <nvm_write_buffer+0x20>
	bool is_rww_eeprom = false;
    4cd6:	2600      	movs	r6, #0
		return STATUS_ERR_BAD_ADDRESS;
#endif
	}

	/* Check if the write address not aligned to the start of a page */
	if (destination_address & (_nvm_dev.page_size - 1)) {
    4cd8:	1e63      	subs	r3, r4, #1
		return STATUS_ERR_BAD_ADDRESS;
    4cda:	2518      	movs	r5, #24
	if (destination_address & (_nvm_dev.page_size - 1)) {
    4cdc:	4218      	tst	r0, r3
    4cde:	d001      	beq.n	4ce4 <nvm_write_buffer+0x2c>
				destination_address, 0);
#endif
	}

	return STATUS_OK;
}
    4ce0:	0028      	movs	r0, r5
    4ce2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return STATUS_ERR_INVALID_ARG;
    4ce4:	3d01      	subs	r5, #1
	if (length > _nvm_dev.page_size) {
    4ce6:	4294      	cmp	r4, r2
    4ce8:	d3fa      	bcc.n	4ce0 <nvm_write_buffer+0x28>
    4cea:	4b26      	ldr	r3, [pc, #152]	; (4d84 <nvm_write_buffer+0xcc>)
    4cec:	7d1b      	ldrb	r3, [r3, #20]
		return STATUS_BUSY;
    4cee:	3d12      	subs	r5, #18
	if (!nvm_is_ready()) {
    4cf0:	07db      	lsls	r3, r3, #31
    4cf2:	d5f5      	bpl.n	4ce0 <nvm_write_buffer+0x28>
	nvm_module->CTRLA.reg = NVM_COMMAND_PAGE_BUFFER_CLEAR | NVMCTRL_CTRLA_CMDEX_KEY;
    4cf4:	4c24      	ldr	r4, [pc, #144]	; (4d88 <nvm_write_buffer+0xd0>)
    4cf6:	4b23      	ldr	r3, [pc, #140]	; (4d84 <nvm_write_buffer+0xcc>)
    4cf8:	801c      	strh	r4, [r3, #0]
    4cfa:	001d      	movs	r5, r3
	while (!nvm_is_ready()) {
    4cfc:	2401      	movs	r4, #1
    4cfe:	7d2b      	ldrb	r3, [r5, #20]
    4d00:	4223      	tst	r3, r4
    4d02:	d0fc      	beq.n	4cfe <nvm_write_buffer+0x46>
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
    4d04:	2420      	movs	r4, #32
    4d06:	34ff      	adds	r4, #255	; 0xff
    4d08:	4b1e      	ldr	r3, [pc, #120]	; (4d84 <nvm_write_buffer+0xcc>)
    4d0a:	831c      	strh	r4, [r3, #24]
	for (uint16_t i = 0; i < length; i += 2) {
    4d0c:	2a00      	cmp	r2, #0
    4d0e:	d02c      	beq.n	4d6a <nvm_write_buffer+0xb2>
    4d10:	2301      	movs	r3, #1
    4d12:	0005      	movs	r5, r0
    4d14:	439d      	bics	r5, r3
    4d16:	2300      	movs	r3, #0
		if (i < (length - 1)) {
    4d18:	1e54      	subs	r4, r2, #1
    4d1a:	46a4      	mov	ip, r4
    4d1c:	e009      	b.n	4d32 <nvm_write_buffer+0x7a>
			data |= (buffer[i + 1] << 8);
    4d1e:	18cf      	adds	r7, r1, r3
    4d20:	787f      	ldrb	r7, [r7, #1]
    4d22:	023f      	lsls	r7, r7, #8
    4d24:	433c      	orrs	r4, r7
		NVM_MEMORY[nvm_address++] = data;
    4d26:	802c      	strh	r4, [r5, #0]
	for (uint16_t i = 0; i < length; i += 2) {
    4d28:	3302      	adds	r3, #2
    4d2a:	b29b      	uxth	r3, r3
    4d2c:	3502      	adds	r5, #2
    4d2e:	429a      	cmp	r2, r3
    4d30:	d904      	bls.n	4d3c <nvm_write_buffer+0x84>
		data = buffer[i];
    4d32:	5ccc      	ldrb	r4, [r1, r3]
		if (i < (length - 1)) {
    4d34:	4563      	cmp	r3, ip
    4d36:	dbf2      	blt.n	4d1e <nvm_write_buffer+0x66>
		data = buffer[i];
    4d38:	b2a4      	uxth	r4, r4
    4d3a:	e7f4      	b.n	4d26 <nvm_write_buffer+0x6e>
	if ((_nvm_dev.manual_page_write == false) && (length < NVMCTRL_PAGE_SIZE)) {
    4d3c:	4b0e      	ldr	r3, [pc, #56]	; (4d78 <nvm_write_buffer+0xc0>)
    4d3e:	791b      	ldrb	r3, [r3, #4]
	return STATUS_OK;
    4d40:	2500      	movs	r5, #0
	if ((_nvm_dev.manual_page_write == false) && (length < NVMCTRL_PAGE_SIZE)) {
    4d42:	2b00      	cmp	r3, #0
    4d44:	d1cc      	bne.n	4ce0 <nvm_write_buffer+0x28>
    4d46:	2a3f      	cmp	r2, #63	; 0x3f
    4d48:	d8ca      	bhi.n	4ce0 <nvm_write_buffer+0x28>
				(nvm_execute_command(NVM_COMMAND_RWWEE_WRITE_PAGE,destination_address, 0)):
    4d4a:	2e00      	cmp	r6, #0
    4d4c:	d106      	bne.n	4d5c <nvm_write_buffer+0xa4>
    4d4e:	2200      	movs	r2, #0
    4d50:	0001      	movs	r1, r0
    4d52:	2004      	movs	r0, #4
    4d54:	4b0d      	ldr	r3, [pc, #52]	; (4d8c <nvm_write_buffer+0xd4>)
    4d56:	4798      	blx	r3
    4d58:	0005      	movs	r5, r0
    4d5a:	e7c1      	b.n	4ce0 <nvm_write_buffer+0x28>
    4d5c:	2200      	movs	r2, #0
    4d5e:	0001      	movs	r1, r0
    4d60:	201c      	movs	r0, #28
    4d62:	4b0a      	ldr	r3, [pc, #40]	; (4d8c <nvm_write_buffer+0xd4>)
    4d64:	4798      	blx	r3
    4d66:	0005      	movs	r5, r0
    4d68:	e7ba      	b.n	4ce0 <nvm_write_buffer+0x28>
	if ((_nvm_dev.manual_page_write == false) && (length < NVMCTRL_PAGE_SIZE)) {
    4d6a:	4b03      	ldr	r3, [pc, #12]	; (4d78 <nvm_write_buffer+0xc0>)
    4d6c:	791b      	ldrb	r3, [r3, #4]
	return STATUS_OK;
    4d6e:	2500      	movs	r5, #0
	if ((_nvm_dev.manual_page_write == false) && (length < NVMCTRL_PAGE_SIZE)) {
    4d70:	2b00      	cmp	r3, #0
    4d72:	d0ea      	beq.n	4d4a <nvm_write_buffer+0x92>
    4d74:	e7b4      	b.n	4ce0 <nvm_write_buffer+0x28>
    4d76:	46c0      	nop			; (mov r8, r8)
    4d78:	20000b60 	.word	0x20000b60
    4d7c:	00001fff 	.word	0x00001fff
    4d80:	ffc00000 	.word	0xffc00000
    4d84:	41004000 	.word	0x41004000
    4d88:	ffffa544 	.word	0xffffa544
    4d8c:	00004bd9 	.word	0x00004bd9

00004d90 <nvm_read_buffer>:
 */
enum status_code nvm_read_buffer(
		const uint32_t source_address,
		uint8_t *const buffer,
		uint16_t length)
{
    4d90:	b570      	push	{r4, r5, r6, lr}
	/* Check if the source address is valid */
	if (source_address >
			((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)) {
    4d92:	4b1b      	ldr	r3, [pc, #108]	; (4e00 <nvm_read_buffer+0x70>)
    4d94:	881c      	ldrh	r4, [r3, #0]
    4d96:	885b      	ldrh	r3, [r3, #2]
    4d98:	4363      	muls	r3, r4
	if (source_address >
    4d9a:	4283      	cmp	r3, r0
    4d9c:	d205      	bcs.n	4daa <nvm_read_buffer+0x1a>
#ifdef FEATURE_NVM_RWWEE
		if (source_address >= ((uint32_t)NVMCTRL_RWW_EEPROM_SIZE + NVMCTRL_RWW_EEPROM_ADDR)
    4d9e:	4e19      	ldr	r6, [pc, #100]	; (4e04 <nvm_read_buffer+0x74>)
			|| source_address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
    4da0:	2518      	movs	r5, #24
		if (source_address >= ((uint32_t)NVMCTRL_RWW_EEPROM_SIZE + NVMCTRL_RWW_EEPROM_ADDR)
    4da2:	4b19      	ldr	r3, [pc, #100]	; (4e08 <nvm_read_buffer+0x78>)
    4da4:	18c3      	adds	r3, r0, r3
    4da6:	42b3      	cmp	r3, r6
    4da8:	d803      	bhi.n	4db2 <nvm_read_buffer+0x22>
		return STATUS_ERR_BAD_ADDRESS;
#endif
	}

	/* Check if the read address is not aligned to the start of a page */
	if (source_address & (_nvm_dev.page_size - 1)) {
    4daa:	1e63      	subs	r3, r4, #1
		return STATUS_ERR_BAD_ADDRESS;
    4dac:	2518      	movs	r5, #24
	if (source_address & (_nvm_dev.page_size - 1)) {
    4dae:	4218      	tst	r0, r3
    4db0:	d001      	beq.n	4db6 <nvm_read_buffer+0x26>
			buffer[i + 1] = (data >> 8);
		}
	}

	return STATUS_OK;
}
    4db2:	0028      	movs	r0, r5
    4db4:	bd70      	pop	{r4, r5, r6, pc}
		return STATUS_ERR_INVALID_ARG;
    4db6:	3d01      	subs	r5, #1
	if (length > _nvm_dev.page_size) {
    4db8:	4294      	cmp	r4, r2
    4dba:	d3fa      	bcc.n	4db2 <nvm_read_buffer+0x22>
    4dbc:	4b13      	ldr	r3, [pc, #76]	; (4e0c <nvm_read_buffer+0x7c>)
    4dbe:	7d1b      	ldrb	r3, [r3, #20]
		return STATUS_BUSY;
    4dc0:	3d12      	subs	r5, #18
	if (!nvm_is_ready()) {
    4dc2:	07db      	lsls	r3, r3, #31
    4dc4:	d5f5      	bpl.n	4db2 <nvm_read_buffer+0x22>
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
    4dc6:	2420      	movs	r4, #32
    4dc8:	34ff      	adds	r4, #255	; 0xff
    4dca:	4b10      	ldr	r3, [pc, #64]	; (4e0c <nvm_read_buffer+0x7c>)
    4dcc:	831c      	strh	r4, [r3, #24]
	for (uint16_t i = 0; i < length; i += 2) {
    4dce:	2a00      	cmp	r2, #0
    4dd0:	d014      	beq.n	4dfc <nvm_read_buffer+0x6c>
    4dd2:	2301      	movs	r3, #1
    4dd4:	4398      	bics	r0, r3
    4dd6:	2300      	movs	r3, #0
		if (i < (length - 1)) {
    4dd8:	1e56      	subs	r6, r2, #1
    4dda:	e004      	b.n	4de6 <nvm_read_buffer+0x56>
	for (uint16_t i = 0; i < length; i += 2) {
    4ddc:	3302      	adds	r3, #2
    4dde:	b29b      	uxth	r3, r3
    4de0:	3002      	adds	r0, #2
    4de2:	429a      	cmp	r2, r3
    4de4:	d908      	bls.n	4df8 <nvm_read_buffer+0x68>
		uint16_t data = NVM_MEMORY[page_address++];
    4de6:	8804      	ldrh	r4, [r0, #0]
    4de8:	b2a4      	uxth	r4, r4
		buffer[i] = (data & 0xFF);
    4dea:	54cc      	strb	r4, [r1, r3]
		if (i < (length - 1)) {
    4dec:	42b3      	cmp	r3, r6
    4dee:	daf5      	bge.n	4ddc <nvm_read_buffer+0x4c>
			buffer[i + 1] = (data >> 8);
    4df0:	18cd      	adds	r5, r1, r3
    4df2:	0a24      	lsrs	r4, r4, #8
    4df4:	706c      	strb	r4, [r5, #1]
    4df6:	e7f1      	b.n	4ddc <nvm_read_buffer+0x4c>
	return STATUS_OK;
    4df8:	2500      	movs	r5, #0
    4dfa:	e7da      	b.n	4db2 <nvm_read_buffer+0x22>
    4dfc:	2500      	movs	r5, #0
    4dfe:	e7d8      	b.n	4db2 <nvm_read_buffer+0x22>
    4e00:	20000b60 	.word	0x20000b60
    4e04:	00001fff 	.word	0x00001fff
    4e08:	ffc00000 	.word	0xffc00000
    4e0c:	41004000 	.word	0x41004000

00004e10 <nvm_erase_row>:
 *                                 not aligned to the start of a row
 * \retval STATUS_ABORTED          NVM erased error
 */
enum status_code nvm_erase_row(
		const uint32_t row_address)
{
    4e10:	b510      	push	{r4, lr}
		bool is_rww_eeprom = false;
#endif

	/* Check if the row address is valid */
	if (row_address >
			((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)) {
    4e12:	4a22      	ldr	r2, [pc, #136]	; (4e9c <nvm_erase_row+0x8c>)
    4e14:	8813      	ldrh	r3, [r2, #0]
    4e16:	8852      	ldrh	r2, [r2, #2]
    4e18:	435a      	muls	r2, r3
	if (row_address >
    4e1a:	4282      	cmp	r2, r0
    4e1c:	d207      	bcs.n	4e2e <nvm_erase_row+0x1e>
#ifdef FEATURE_NVM_RWWEE
		if (row_address >= ((uint32_t)NVMCTRL_RWW_EEPROM_SIZE + NVMCTRL_RWW_EEPROM_ADDR)
    4e1e:	4c20      	ldr	r4, [pc, #128]	; (4ea0 <nvm_erase_row+0x90>)
			|| row_address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
    4e20:	2218      	movs	r2, #24
		if (row_address >= ((uint32_t)NVMCTRL_RWW_EEPROM_SIZE + NVMCTRL_RWW_EEPROM_ADDR)
    4e22:	4920      	ldr	r1, [pc, #128]	; (4ea4 <nvm_erase_row+0x94>)
    4e24:	1841      	adds	r1, r0, r1
    4e26:	42a1      	cmp	r1, r4
    4e28:	d807      	bhi.n	4e3a <nvm_erase_row+0x2a>
		}
		is_rww_eeprom = true;
    4e2a:	2401      	movs	r4, #1
    4e2c:	e000      	b.n	4e30 <nvm_erase_row+0x20>
		bool is_rww_eeprom = false;
    4e2e:	2400      	movs	r4, #0
		return STATUS_ERR_BAD_ADDRESS;
#endif
	}

	/* Check if the address to erase is not aligned to the start of a row */
	if (row_address & ((_nvm_dev.page_size * NVMCTRL_ROW_PAGES) - 1)) {
    4e30:	009b      	lsls	r3, r3, #2
    4e32:	3b01      	subs	r3, #1
		return STATUS_ERR_BAD_ADDRESS;
    4e34:	2218      	movs	r2, #24
	if (row_address & ((_nvm_dev.page_size * NVMCTRL_ROW_PAGES) - 1)) {
    4e36:	4218      	tst	r0, r3
    4e38:	d001      	beq.n	4e3e <nvm_erase_row+0x2e>
	if ((enum nvm_error)(nvm_module->STATUS.reg & NVM_ERRORS_MASK) != NVM_ERROR_NONE) {
		return STATUS_ABORTED;
	}

	return STATUS_OK;
}
    4e3a:	0010      	movs	r0, r2
    4e3c:	bd10      	pop	{r4, pc}
    4e3e:	4b1a      	ldr	r3, [pc, #104]	; (4ea8 <nvm_erase_row+0x98>)
    4e40:	7d1b      	ldrb	r3, [r3, #20]
		return STATUS_BUSY;
    4e42:	3a13      	subs	r2, #19
	if (!nvm_is_ready()) {
    4e44:	07db      	lsls	r3, r3, #31
    4e46:	d5f8      	bpl.n	4e3a <nvm_erase_row+0x2a>
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
    4e48:	4b17      	ldr	r3, [pc, #92]	; (4ea8 <nvm_erase_row+0x98>)
    4e4a:	2220      	movs	r2, #32
    4e4c:	32ff      	adds	r2, #255	; 0xff
    4e4e:	831a      	strh	r2, [r3, #24]
	nvm_module->ADDR.reg  = (uintptr_t)&NVM_MEMORY[row_address / 4];
    4e50:	0880      	lsrs	r0, r0, #2
    4e52:	0040      	lsls	r0, r0, #1
    4e54:	61d8      	str	r0, [r3, #28]
	if (is_rww_eeprom) {
    4e56:	2c00      	cmp	r4, #0
    4e58:	d01b      	beq.n	4e92 <nvm_erase_row+0x82>
		nvm_module->CTRLB.bit.CACHEDIS = 1;
    4e5a:	6859      	ldr	r1, [r3, #4]
    4e5c:	2280      	movs	r2, #128	; 0x80
    4e5e:	02d2      	lsls	r2, r2, #11
    4e60:	430a      	orrs	r2, r1
    4e62:	605a      	str	r2, [r3, #4]
		nvm_module->CTRLB.reg;
    4e64:	685a      	ldr	r2, [r3, #4]
		nvm_module->CTRLA.reg = NVM_COMMAND_RWWEE_ERASE_ROW | NVMCTRL_CTRLA_CMDEX_KEY;
    4e66:	4a11      	ldr	r2, [pc, #68]	; (4eac <nvm_erase_row+0x9c>)
    4e68:	801a      	strh	r2, [r3, #0]
    4e6a:	490f      	ldr	r1, [pc, #60]	; (4ea8 <nvm_erase_row+0x98>)
	while (!nvm_is_ready()) {
    4e6c:	2201      	movs	r2, #1
    4e6e:	7d0b      	ldrb	r3, [r1, #20]
    4e70:	4213      	tst	r3, r2
    4e72:	d0fc      	beq.n	4e6e <nvm_erase_row+0x5e>
	if (is_rww_eeprom) {
    4e74:	2c00      	cmp	r4, #0
    4e76:	d004      	beq.n	4e82 <nvm_erase_row+0x72>
		nvm_module->CTRLB.bit.CACHEDIS = 0;
    4e78:	4a0b      	ldr	r2, [pc, #44]	; (4ea8 <nvm_erase_row+0x98>)
    4e7a:	6853      	ldr	r3, [r2, #4]
    4e7c:	490c      	ldr	r1, [pc, #48]	; (4eb0 <nvm_erase_row+0xa0>)
    4e7e:	400b      	ands	r3, r1
    4e80:	6053      	str	r3, [r2, #4]
	if ((enum nvm_error)(nvm_module->STATUS.reg & NVM_ERRORS_MASK) != NVM_ERROR_NONE) {
    4e82:	4b09      	ldr	r3, [pc, #36]	; (4ea8 <nvm_erase_row+0x98>)
    4e84:	8b1a      	ldrh	r2, [r3, #24]
    4e86:	201c      	movs	r0, #28
    4e88:	4002      	ands	r2, r0
	return STATUS_OK;
    4e8a:	1e50      	subs	r0, r2, #1
    4e8c:	4182      	sbcs	r2, r0
    4e8e:	0092      	lsls	r2, r2, #2
    4e90:	e7d3      	b.n	4e3a <nvm_erase_row+0x2a>
		nvm_module->CTRLA.reg = NVM_COMMAND_ERASE_ROW | NVMCTRL_CTRLA_CMDEX_KEY;
    4e92:	4a08      	ldr	r2, [pc, #32]	; (4eb4 <nvm_erase_row+0xa4>)
    4e94:	4b04      	ldr	r3, [pc, #16]	; (4ea8 <nvm_erase_row+0x98>)
    4e96:	801a      	strh	r2, [r3, #0]
    4e98:	e7e7      	b.n	4e6a <nvm_erase_row+0x5a>
    4e9a:	46c0      	nop			; (mov r8, r8)
    4e9c:	20000b60 	.word	0x20000b60
    4ea0:	00001fff 	.word	0x00001fff
    4ea4:	ffc00000 	.word	0xffc00000
    4ea8:	41004000 	.word	0x41004000
    4eac:	ffffa51a 	.word	0xffffa51a
    4eb0:	fffbffff 	.word	0xfffbffff
    4eb4:	ffffa502 	.word	0xffffa502

00004eb8 <nvm_get_parameters>:

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
    4eb8:	4b15      	ldr	r3, [pc, #84]	; (4f10 <nvm_get_parameters+0x58>)
    4eba:	2220      	movs	r2, #32
    4ebc:	32ff      	adds	r2, #255	; 0xff
    4ebe:	831a      	strh	r2, [r3, #24]

	/* Read out from the PARAM register */
	uint32_t param_reg = nvm_module->PARAM.reg;
    4ec0:	689b      	ldr	r3, [r3, #8]

	/* Mask out page size exponent and convert to a number of bytes */
	parameters->page_size =
			8 << ((param_reg & NVMCTRL_PARAM_PSZ_Msk) >> NVMCTRL_PARAM_PSZ_Pos);
    4ec2:	0359      	lsls	r1, r3, #13
    4ec4:	0f49      	lsrs	r1, r1, #29
    4ec6:	3a18      	subs	r2, #24
    4ec8:	3aff      	subs	r2, #255	; 0xff
    4eca:	408a      	lsls	r2, r1
	parameters->page_size =
    4ecc:	7002      	strb	r2, [r0, #0]

	/* Mask out number of pages count */
	parameters->nvm_number_of_pages =
    4ece:	8043      	strh	r3, [r0, #2]
			(param_reg & NVMCTRL_PARAM_NVMP_Msk) >> NVMCTRL_PARAM_NVMP_Pos;

#ifdef FEATURE_NVM_RWWEE
	/* Mask out rwwee number of pages count */
	parameters->rww_eeprom_number_of_pages =
			(param_reg & NVMCTRL_PARAM_RWWEEP_Msk) >> NVMCTRL_PARAM_RWWEEP_Pos;
    4ed0:	0d1b      	lsrs	r3, r3, #20
	parameters->rww_eeprom_number_of_pages =
    4ed2:	8183      	strh	r3, [r0, #12]
#endif

	/* Read the current EEPROM fuse value from the USER row */
	uint16_t eeprom_fuse_value =
			(NVM_USER_MEMORY[NVMCTRL_FUSES_EEPROM_SIZE_Pos / 16] &
    4ed4:	4b0f      	ldr	r3, [pc, #60]	; (4f14 <nvm_get_parameters+0x5c>)
    4ed6:	881b      	ldrh	r3, [r3, #0]
	uint16_t eeprom_fuse_value =
    4ed8:	065b      	lsls	r3, r3, #25
    4eda:	0f5b      	lsrs	r3, r3, #29
			NVMCTRL_FUSES_EEPROM_SIZE_Msk) >> NVMCTRL_FUSES_EEPROM_SIZE_Pos;

	/* Translate the EEPROM fuse byte value to a number of NVM pages */
	if (eeprom_fuse_value == 7) {
    4edc:	2b07      	cmp	r3, #7
    4ede:	d010      	beq.n	4f02 <nvm_get_parameters+0x4a>
		parameters->eeprom_number_of_pages = 0;
	}
	else {
		parameters->eeprom_number_of_pages =
				NVMCTRL_ROW_PAGES << (6 - eeprom_fuse_value);
    4ee0:	2206      	movs	r2, #6
    4ee2:	1ad2      	subs	r2, r2, r3
    4ee4:	2304      	movs	r3, #4
    4ee6:	4093      	lsls	r3, r2
		parameters->eeprom_number_of_pages =
    4ee8:	6043      	str	r3, [r0, #4]
	}

	/* Read the current BOOTSZ fuse value from the USER row */
	uint16_t boot_fuse_value =
			(NVM_USER_MEMORY[NVMCTRL_FUSES_BOOTPROT_Pos / 16] &
    4eea:	4b0a      	ldr	r3, [pc, #40]	; (4f14 <nvm_get_parameters+0x5c>)
    4eec:	881b      	ldrh	r3, [r3, #0]
	uint16_t boot_fuse_value =
    4eee:	2207      	movs	r2, #7
    4ef0:	4013      	ands	r3, r2
			NVMCTRL_FUSES_BOOTPROT_Msk) >> NVMCTRL_FUSES_BOOTPROT_Pos;

	/* Translate the BOOTSZ fuse byte value to a number of NVM pages */
	if (boot_fuse_value == 7) {
    4ef2:	2b07      	cmp	r3, #7
    4ef4:	d008      	beq.n	4f08 <nvm_get_parameters+0x50>
		parameters->bootloader_number_of_pages = 0;
	}
	else {
		parameters->bootloader_number_of_pages =
				NVMCTRL_ROW_PAGES << (7 - boot_fuse_value);
    4ef6:	2207      	movs	r2, #7
    4ef8:	1ad2      	subs	r2, r2, r3
    4efa:	2304      	movs	r3, #4
    4efc:	4093      	lsls	r3, r2
		parameters->bootloader_number_of_pages =
    4efe:	6083      	str	r3, [r0, #8]
	}
}
    4f00:	4770      	bx	lr
		parameters->eeprom_number_of_pages = 0;
    4f02:	2300      	movs	r3, #0
    4f04:	6043      	str	r3, [r0, #4]
    4f06:	e7f0      	b.n	4eea <nvm_get_parameters+0x32>
		parameters->bootloader_number_of_pages = 0;
    4f08:	2300      	movs	r3, #0
    4f0a:	6083      	str	r3, [r0, #8]
    4f0c:	e7f8      	b.n	4f00 <nvm_get_parameters+0x48>
    4f0e:	46c0      	nop			; (mov r8, r8)
    4f10:	41004000 	.word	0x41004000
    4f14:	00804000 	.word	0x00804000

00004f18 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    4f18:	b500      	push	{lr}
    4f1a:	b083      	sub	sp, #12
	config->mux_position = SYSTEM_PINMUX_GPIO;
    4f1c:	ab01      	add	r3, sp, #4
    4f1e:	2280      	movs	r2, #128	; 0x80
    4f20:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    4f22:	780a      	ldrb	r2, [r1, #0]
    4f24:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    4f26:	784a      	ldrb	r2, [r1, #1]
    4f28:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    4f2a:	788a      	ldrb	r2, [r1, #2]
    4f2c:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    4f2e:	0019      	movs	r1, r3
    4f30:	4b01      	ldr	r3, [pc, #4]	; (4f38 <port_pin_set_config+0x20>)
    4f32:	4798      	blx	r3
}
    4f34:	b003      	add	sp, #12
    4f36:	bd00      	pop	{pc}
    4f38:	000073d5 	.word	0x000073d5

00004f3c <rtc_count_is_syncing>:
{
 	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    4f3c:	6803      	ldr	r3, [r0, #0]

	if (rtc_module->MODE0.SYNCBUSY.reg) {
    4f3e:	6918      	ldr	r0, [r3, #16]
    4f40:	1e43      	subs	r3, r0, #1
    4f42:	4198      	sbcs	r0, r3
    4f44:	b2c0      	uxtb	r0, r0
		return true;
	}

	return false;
}
    4f46:	4770      	bx	lr

00004f48 <rtc_count_enable>:
 * module configuration parameters cannot be altered while the module is enabled.
 *
 * \param[in,out]  module  RTC hardware module
 */
void rtc_count_enable(struct rtc_module *const module)
{
    4f48:	b570      	push	{r4, r5, r6, lr}
    4f4a:	0004      	movs	r4, r0
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    4f4c:	6806      	ldr	r6, [r0, #0]
    4f4e:	2204      	movs	r2, #4
    4f50:	4b08      	ldr	r3, [pc, #32]	; (4f74 <rtc_count_enable+0x2c>)
    4f52:	601a      	str	r2, [r3, #0]

#if RTC_COUNT_ASYNC == true
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_RTC);
#endif

	while (rtc_count_is_syncing(module)) {
    4f54:	4d08      	ldr	r5, [pc, #32]	; (4f78 <rtc_count_enable+0x30>)
    4f56:	0020      	movs	r0, r4
    4f58:	47a8      	blx	r5
    4f5a:	2800      	cmp	r0, #0
    4f5c:	d1fb      	bne.n	4f56 <rtc_count_enable+0xe>
		/* Wait for synchronization */
	}

	/* Enable RTC module. */
	rtc_module->MODE0.CTRLA.reg |= RTC_MODE0_CTRLA_ENABLE;
    4f5e:	8833      	ldrh	r3, [r6, #0]
    4f60:	2202      	movs	r2, #2
    4f62:	4313      	orrs	r3, r2
    4f64:	8033      	strh	r3, [r6, #0]

	while (rtc_count_is_syncing(module)) {
    4f66:	4d04      	ldr	r5, [pc, #16]	; (4f78 <rtc_count_enable+0x30>)
    4f68:	0020      	movs	r0, r4
    4f6a:	47a8      	blx	r5
    4f6c:	2800      	cmp	r0, #0
    4f6e:	d1fb      	bne.n	4f68 <rtc_count_enable+0x20>
		/* Wait for synchronization */
	}
}
    4f70:	bd70      	pop	{r4, r5, r6, pc}
    4f72:	46c0      	nop			; (mov r8, r8)
    4f74:	e000e100 	.word	0xe000e100
    4f78:	00004f3d 	.word	0x00004f3d

00004f7c <rtc_count_disable>:
 * Disables the RTC module.
 *
 * \param[in,out]  module  RTC hardware module
 */
void rtc_count_disable(struct rtc_module *const module)
{
    4f7c:	b570      	push	{r4, r5, r6, lr}
    4f7e:	0004      	movs	r4, r0
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    4f80:	6806      	ldr	r6, [r0, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    4f82:	2104      	movs	r1, #4
    4f84:	2380      	movs	r3, #128	; 0x80
    4f86:	4a0a      	ldr	r2, [pc, #40]	; (4fb0 <rtc_count_disable+0x34>)
    4f88:	50d1      	str	r1, [r2, r3]

#if RTC_COUNT_ASYNC == true
	system_interrupt_disable(SYSTEM_INTERRUPT_MODULE_RTC);
#endif

	while (rtc_count_is_syncing(module)) {
    4f8a:	4d0a      	ldr	r5, [pc, #40]	; (4fb4 <rtc_count_disable+0x38>)
    4f8c:	0020      	movs	r0, r4
    4f8e:	47a8      	blx	r5
    4f90:	2800      	cmp	r0, #0
    4f92:	d1fb      	bne.n	4f8c <rtc_count_disable+0x10>
		/* Wait for synchronization */
	}

	/* Disbale interrupt */
	rtc_module->MODE0.INTENCLR.reg = RTC_MODE0_INTENCLR_MASK;
    4f94:	4b08      	ldr	r3, [pc, #32]	; (4fb8 <rtc_count_disable+0x3c>)
    4f96:	8133      	strh	r3, [r6, #8]
	/* Clear interrupt flag */
	rtc_module->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_MASK;
    4f98:	81b3      	strh	r3, [r6, #12]

	/* Disable RTC module. */
	rtc_module->MODE0.CTRLA.reg &= ~RTC_MODE0_CTRLA_ENABLE;
    4f9a:	8833      	ldrh	r3, [r6, #0]
    4f9c:	2202      	movs	r2, #2
    4f9e:	4393      	bics	r3, r2
    4fa0:	8033      	strh	r3, [r6, #0]

	while (rtc_count_is_syncing(module)) {
    4fa2:	4d04      	ldr	r5, [pc, #16]	; (4fb4 <rtc_count_disable+0x38>)
    4fa4:	0020      	movs	r0, r4
    4fa6:	47a8      	blx	r5
    4fa8:	2800      	cmp	r0, #0
    4faa:	d1fb      	bne.n	4fa4 <rtc_count_disable+0x28>
		/* Wait for synchronization */
	}
}
    4fac:	bd70      	pop	{r4, r5, r6, pc}
    4fae:	46c0      	nop			; (mov r8, r8)
    4fb0:	e000e100 	.word	0xe000e100
    4fb4:	00004f3d 	.word	0x00004f3d
    4fb8:	ffff81ff 	.word	0xffff81ff

00004fbc <rtc_count_reset>:
 * Resets the RTC to hardware defaults.
 *
 * \param[in,out]  module  Pointer to the software instance struct
 */
void rtc_count_reset(struct rtc_module *const module)
{
    4fbc:	b570      	push	{r4, r5, r6, lr}
    4fbe:	0004      	movs	r4, r0
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    4fc0:	6806      	ldr	r6, [r0, #0]

	/* Disable module before reset. */
	rtc_count_disable(module);
    4fc2:	4b0a      	ldr	r3, [pc, #40]	; (4fec <rtc_count_reset+0x30>)
    4fc4:	4798      	blx	r3

#if RTC_COUNT_ASYNC == true
	module->registered_callback = 0;
    4fc6:	2300      	movs	r3, #0
    4fc8:	86a3      	strh	r3, [r4, #52]	; 0x34
	module->enabled_callback    = 0;
    4fca:	86e3      	strh	r3, [r4, #54]	; 0x36
#endif

	while (rtc_count_is_syncing(module)) {
    4fcc:	4d08      	ldr	r5, [pc, #32]	; (4ff0 <rtc_count_reset+0x34>)
    4fce:	0020      	movs	r0, r4
    4fd0:	47a8      	blx	r5
    4fd2:	2800      	cmp	r0, #0
    4fd4:	d1fb      	bne.n	4fce <rtc_count_reset+0x12>
		/* Wait for synchronization */
	}

	/* Initiate software reset. */
	rtc_module->MODE0.CTRLA.reg |= RTC_MODE0_CTRLA_SWRST;
    4fd6:	8833      	ldrh	r3, [r6, #0]
    4fd8:	2201      	movs	r2, #1
    4fda:	4313      	orrs	r3, r2
    4fdc:	8033      	strh	r3, [r6, #0]

	while (rtc_count_is_syncing(module)) {
    4fde:	4d04      	ldr	r5, [pc, #16]	; (4ff0 <rtc_count_reset+0x34>)
    4fe0:	0020      	movs	r0, r4
    4fe2:	47a8      	blx	r5
    4fe4:	2800      	cmp	r0, #0
    4fe6:	d1fb      	bne.n	4fe0 <rtc_count_reset+0x24>
		/* Wait for synchronization */
	}
}
    4fe8:	bd70      	pop	{r4, r5, r6, pc}
    4fea:	46c0      	nop			; (mov r8, r8)
    4fec:	00004f7d 	.word	0x00004f7d
    4ff0:	00004f3d 	.word	0x00004f3d

00004ff4 <rtc_count_set_count>:
 * \retval STATUS_ERR_INVALID_ARG  If invalid argument(s) were provided
 */
enum status_code rtc_count_set_count(
		struct rtc_module *const module,
		const uint32_t count_value)
{
    4ff4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4ff6:	0004      	movs	r4, r0
    4ff8:	000e      	movs	r6, r1
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    4ffa:	6807      	ldr	r7, [r0, #0]

	while (rtc_count_is_syncing(module)) {
    4ffc:	4d0c      	ldr	r5, [pc, #48]	; (5030 <rtc_count_set_count+0x3c>)
    4ffe:	0020      	movs	r0, r4
    5000:	47a8      	blx	r5
    5002:	2800      	cmp	r0, #0
    5004:	d1fb      	bne.n	4ffe <rtc_count_set_count+0xa>
		/* Wait for synchronization */
	}

	/* Set count according to mode */
	switch(module->mode){
    5006:	7923      	ldrb	r3, [r4, #4]
    5008:	2b00      	cmp	r3, #0
    500a:	d009      	beq.n	5020 <rtc_count_set_count+0x2c>

			break;

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
    500c:	2017      	movs	r0, #23
	switch(module->mode){
    500e:	2b01      	cmp	r3, #1
    5010:	d105      	bne.n	501e <rtc_count_set_count+0x2a>
			rtc_module->MODE0.COUNT.reg = count_value;
    5012:	61be      	str	r6, [r7, #24]
	}

	while (rtc_count_is_syncing(module)) {
    5014:	4d06      	ldr	r5, [pc, #24]	; (5030 <rtc_count_set_count+0x3c>)
    5016:	0020      	movs	r0, r4
    5018:	47a8      	blx	r5
    501a:	2800      	cmp	r0, #0
    501c:	d1fb      	bne.n	5016 <rtc_count_set_count+0x22>
		/* Wait for synchronization */
	}
	return STATUS_OK;
}
    501e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if(count_value > 0xffff){
    5020:	4b04      	ldr	r3, [pc, #16]	; (5034 <rtc_count_set_count+0x40>)
				return STATUS_ERR_INVALID_ARG;
    5022:	2017      	movs	r0, #23
			if(count_value > 0xffff){
    5024:	429e      	cmp	r6, r3
    5026:	d8fa      	bhi.n	501e <rtc_count_set_count+0x2a>
			rtc_module->MODE1.COUNT.reg = (uint32_t)count_value;
    5028:	b2b6      	uxth	r6, r6
    502a:	833e      	strh	r6, [r7, #24]
			break;
    502c:	e7f2      	b.n	5014 <rtc_count_set_count+0x20>
    502e:	46c0      	nop			; (mov r8, r8)
    5030:	00004f3d 	.word	0x00004f3d
    5034:	0000ffff 	.word	0x0000ffff

00005038 <rtc_count_get_count>:
 * Returns the current count value.
 *
 * \return The current counter value as a 32-bit unsigned integer.
 */
uint32_t rtc_count_get_count(struct rtc_module *const module)
{
    5038:	b570      	push	{r4, r5, r6, lr}
    503a:	0004      	movs	r4, r0
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    503c:	6806      	ldr	r6, [r0, #0]

	/* Initialize return value. */
	uint32_t ret_val;

	while (rtc_count_is_syncing(module)) {
    503e:	4d08      	ldr	r5, [pc, #32]	; (5060 <rtc_count_get_count+0x28>)
    5040:	0020      	movs	r0, r4
    5042:	47a8      	blx	r5
    5044:	2800      	cmp	r0, #0
    5046:	d1fb      	bne.n	5040 <rtc_count_get_count+0x8>
		/* Wait for synchronization */
	}

	/* Read value based on mode. */
	switch (module->mode) {
    5048:	7923      	ldrb	r3, [r4, #4]
    504a:	2b00      	cmp	r3, #0
    504c:	d004      	beq.n	5058 <rtc_count_get_count+0x20>
			break;

		default:
			Assert(false);
			/* Counter not initialized. Assume counter value 0.*/
			ret_val = 0;
    504e:	2000      	movs	r0, #0
	switch (module->mode) {
    5050:	2b01      	cmp	r3, #1
    5052:	d100      	bne.n	5056 <rtc_count_get_count+0x1e>
			ret_val = rtc_module->MODE0.COUNT.reg;
    5054:	69b0      	ldr	r0, [r6, #24]
			break;
	}

	return ret_val;
}
    5056:	bd70      	pop	{r4, r5, r6, pc}
			ret_val = (uint32_t)rtc_module->MODE1.COUNT.reg;
    5058:	8b30      	ldrh	r0, [r6, #24]
    505a:	b280      	uxth	r0, r0
			break;
    505c:	e7fb      	b.n	5056 <rtc_count_get_count+0x1e>
    505e:	46c0      	nop			; (mov r8, r8)
    5060:	00004f3d 	.word	0x00004f3d

00005064 <rtc_count_set_compare>:
 */
enum status_code rtc_count_set_compare(
		struct rtc_module *const module,
		const uint32_t comp_value,
		const enum rtc_count_compare comp_index)
{
    5064:	b5f0      	push	{r4, r5, r6, r7, lr}
    5066:	b083      	sub	sp, #12
    5068:	0004      	movs	r4, r0
    506a:	9101      	str	r1, [sp, #4]
    506c:	0015      	movs	r5, r2
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    506e:	6806      	ldr	r6, [r0, #0]

	while (rtc_count_is_syncing(module)) {
    5070:	4f13      	ldr	r7, [pc, #76]	; (50c0 <rtc_count_set_compare+0x5c>)
    5072:	0020      	movs	r0, r4
    5074:	47b8      	blx	r7
    5076:	2800      	cmp	r0, #0
    5078:	d1fb      	bne.n	5072 <rtc_count_set_compare+0xe>
		/* Wait for synchronization */
	}

	/* Set compare values based on operation mode. */
	switch (module->mode) {
    507a:	7923      	ldrb	r3, [r4, #4]
    507c:	2b00      	cmp	r3, #0
    507e:	d00e      	beq.n	509e <rtc_count_set_compare+0x3a>
    5080:	2b01      	cmp	r3, #1
    5082:	d119      	bne.n	50b8 <rtc_count_set_compare+0x54>
		case RTC_COUNT_MODE_32BIT:
			/* Check sanity of comp_index. */
			if ((uint32_t)comp_index > RTC_COMP32_NUM) {
				return STATUS_ERR_INVALID_ARG;
    5084:	3017      	adds	r0, #23
			if ((uint32_t)comp_index > RTC_COMP32_NUM) {
    5086:	2d01      	cmp	r5, #1
    5088:	d817      	bhi.n	50ba <rtc_count_set_compare+0x56>
			}

			/* Set compare value for COMP. */
			rtc_module->MODE0.COMP[comp_index].reg = comp_value;
    508a:	3508      	adds	r5, #8
    508c:	00ad      	lsls	r5, r5, #2
    508e:	9b01      	ldr	r3, [sp, #4]
    5090:	51ab      	str	r3, [r5, r6]
		default:
			Assert(false);
			return STATUS_ERR_BAD_FORMAT;
	}

	while (rtc_count_is_syncing(module)) {
    5092:	4d0b      	ldr	r5, [pc, #44]	; (50c0 <rtc_count_set_compare+0x5c>)
    5094:	0020      	movs	r0, r4
    5096:	47a8      	blx	r5
    5098:	2800      	cmp	r0, #0
    509a:	d1fb      	bne.n	5094 <rtc_count_set_compare+0x30>
    509c:	e00d      	b.n	50ba <rtc_count_set_compare+0x56>
				return STATUS_ERR_INVALID_ARG;
    509e:	2017      	movs	r0, #23
			if ((uint32_t)comp_index > RTC_NUM_OF_COMP16) {
    50a0:	2d02      	cmp	r5, #2
    50a2:	d80a      	bhi.n	50ba <rtc_count_set_compare+0x56>
			if (comp_value > 0xffff) {
    50a4:	4b07      	ldr	r3, [pc, #28]	; (50c4 <rtc_count_set_compare+0x60>)
    50a6:	9a01      	ldr	r2, [sp, #4]
    50a8:	429a      	cmp	r2, r3
    50aa:	d806      	bhi.n	50ba <rtc_count_set_compare+0x56>
			rtc_module->MODE1.COMP[comp_index].reg = comp_value & 0xffff;
    50ac:	466b      	mov	r3, sp
    50ae:	889b      	ldrh	r3, [r3, #4]
    50b0:	3510      	adds	r5, #16
    50b2:	006d      	lsls	r5, r5, #1
    50b4:	53ab      	strh	r3, [r5, r6]
			break;
    50b6:	e7ec      	b.n	5092 <rtc_count_set_compare+0x2e>
			return STATUS_ERR_BAD_FORMAT;
    50b8:	201a      	movs	r0, #26
		/* Wait for synchronization */
	}

	/* Return status if everything is OK. */
	return STATUS_OK;
}
    50ba:	b003      	add	sp, #12
    50bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    50be:	46c0      	nop			; (mov r8, r8)
    50c0:	00004f3d 	.word	0x00004f3d
    50c4:	0000ffff 	.word	0x0000ffff

000050c8 <rtc_count_init>:
{
    50c8:	b570      	push	{r4, r5, r6, lr}
    50ca:	0004      	movs	r4, r0
    50cc:	0015      	movs	r5, r2
	module->hw = hw;
    50ce:	6001      	str	r1, [r0, #0]
			MCLK->APBAMASK.reg |= mask;
    50d0:	4a1f      	ldr	r2, [pc, #124]	; (5150 <rtc_count_init+0x88>)
    50d2:	6951      	ldr	r1, [r2, #20]
    50d4:	2380      	movs	r3, #128	; 0x80
    50d6:	005b      	lsls	r3, r3, #1
    50d8:	430b      	orrs	r3, r1
    50da:	6153      	str	r3, [r2, #20]
	OSC32KCTRL->RTCCTRL.reg = RTC_CLOCK_SOURCE;
    50dc:	2205      	movs	r2, #5
    50de:	4b1d      	ldr	r3, [pc, #116]	; (5154 <rtc_count_init+0x8c>)
    50e0:	611a      	str	r2, [r3, #16]
	rtc_count_reset(module);
    50e2:	4b1d      	ldr	r3, [pc, #116]	; (5158 <rtc_count_init+0x90>)
    50e4:	4798      	blx	r3
	module->mode                = config->mode;
    50e6:	78ab      	ldrb	r3, [r5, #2]
    50e8:	7123      	strb	r3, [r4, #4]
	_rtc_instance[0] = module;
    50ea:	4b1c      	ldr	r3, [pc, #112]	; (515c <rtc_count_init+0x94>)
    50ec:	601c      	str	r4, [r3, #0]
	Rtc *const rtc_module = module->hw;
    50ee:	6822      	ldr	r2, [r4, #0]
				    | (config->enable_read_sync << RTC_MODE0_CTRLA_COUNTSYNC_Pos)
    50f0:	792b      	ldrb	r3, [r5, #4]
    50f2:	03db      	lsls	r3, r3, #15
				    | config->prescaler;
    50f4:	8829      	ldrh	r1, [r5, #0]
    50f6:	430b      	orrs	r3, r1
    50f8:	b29b      	uxth	r3, r3
	rtc_module->MODE0.CTRLA.reg = RTC_MODE0_CTRLA_MODE(0)
    50fa:	8013      	strh	r3, [r2, #0]
	switch (config->mode) {
    50fc:	78ab      	ldrb	r3, [r5, #2]
    50fe:	2b00      	cmp	r3, #0
    5100:	d013      	beq.n	512a <rtc_count_init+0x62>
			return STATUS_ERR_INVALID_ARG;
    5102:	2017      	movs	r0, #23
	switch (config->mode) {
    5104:	2b01      	cmp	r3, #1
    5106:	d10f      	bne.n	5128 <rtc_count_init+0x60>
			rtc_module->MODE0.CTRLA.reg |= RTC_MODE0_CTRLA_MODE(0);
    5108:	8813      	ldrh	r3, [r2, #0]
    510a:	b29b      	uxth	r3, r3
    510c:	8013      	strh	r3, [r2, #0]
			if (config->clear_on_match) {
    510e:	78eb      	ldrb	r3, [r5, #3]
    5110:	2b00      	cmp	r3, #0
    5112:	d003      	beq.n	511c <rtc_count_init+0x54>
				rtc_module->MODE0.CTRLA.reg |= RTC_MODE0_CTRLA_MATCHCLR;
    5114:	8813      	ldrh	r3, [r2, #0]
    5116:	2180      	movs	r1, #128	; 0x80
    5118:	430b      	orrs	r3, r1
    511a:	8013      	strh	r3, [r2, #0]
				rtc_count_set_compare(module, config->compare_values[i],
    511c:	68a9      	ldr	r1, [r5, #8]
    511e:	2200      	movs	r2, #0
    5120:	0020      	movs	r0, r4
    5122:	4b0f      	ldr	r3, [pc, #60]	; (5160 <rtc_count_init+0x98>)
    5124:	4798      	blx	r3
	return STATUS_OK;
    5126:	2000      	movs	r0, #0
}
    5128:	bd70      	pop	{r4, r5, r6, pc}
			rtc_module->MODE1.CTRLA.reg |= RTC_MODE1_CTRLA_MODE(1);
    512a:	8813      	ldrh	r3, [r2, #0]
    512c:	2104      	movs	r1, #4
    512e:	430b      	orrs	r3, r1
    5130:	8013      	strh	r3, [r2, #0]
			if (config->clear_on_match) {
    5132:	78eb      	ldrb	r3, [r5, #3]
				return STATUS_ERR_INVALID_ARG;
    5134:	2017      	movs	r0, #23
			if (config->clear_on_match) {
    5136:	2b00      	cmp	r3, #0
    5138:	d1f6      	bne.n	5128 <rtc_count_init+0x60>
				rtc_count_set_compare(module, config->compare_values[i],
    513a:	2200      	movs	r2, #0
    513c:	68a9      	ldr	r1, [r5, #8]
    513e:	0020      	movs	r0, r4
    5140:	4e07      	ldr	r6, [pc, #28]	; (5160 <rtc_count_init+0x98>)
    5142:	47b0      	blx	r6
    5144:	68e9      	ldr	r1, [r5, #12]
    5146:	2201      	movs	r2, #1
    5148:	0020      	movs	r0, r4
    514a:	47b0      	blx	r6
	return STATUS_OK;
    514c:	2000      	movs	r0, #0
    514e:	e7eb      	b.n	5128 <rtc_count_init+0x60>
    5150:	40000400 	.word	0x40000400
    5154:	40001000 	.word	0x40001000
    5158:	00004fbd 	.word	0x00004fbd
    515c:	20002234 	.word	0x20002234
    5160:	00005065 	.word	0x00005065

00005164 <rtc_count_register_callback>:
{

	enum status_code status = STATUS_OK;

	/* Overflow callback */
	if (callback_type == RTC_COUNT_CALLBACK_OVERFLOW
    5164:	2a0a      	cmp	r2, #10
    5166:	d009      	beq.n	517c <rtc_count_register_callback+0x18>
#ifdef FEATURE_RTC_TAMPER_DETECTION
		|| callback_type == RTC_COUNT_CALLBACK_TAMPER
#endif
		|| (callback_type >= RTC_COUNT_CALLBACK_PERIODIC_INTERVAL_0
    5168:	2a07      	cmp	r2, #7
    516a:	d907      	bls.n	517c <rtc_count_register_callback+0x18>
			&& callback_type <= RTC_COUNT_CALLBACK_PERIODIC_INTERVAL_7)) {
		status = STATUS_OK;
	} else {
		/* Make sure callback type can be registered */
		switch (module->mode) {
    516c:	7903      	ldrb	r3, [r0, #4]
    516e:	2b00      	cmp	r3, #0
    5170:	d010      	beq.n	5194 <rtc_count_register_callback+0x30>
    5172:	2b01      	cmp	r3, #1
    5174:	d112      	bne.n	519c <rtc_count_register_callback+0x38>
    5176:	3316      	adds	r3, #22
		case RTC_COUNT_MODE_32BIT:
			/* Check sanity for 32-bit mode. */
			if (callback_type > (RTC_COMP32_NUM + RTC_PER_NUM)) {
    5178:	2a09      	cmp	r2, #9
    517a:	d809      	bhi.n	5190 <rtc_count_register_callback+0x2c>
		}
	}

	if (status == STATUS_OK) {
		/* Register callback */
		module->callbacks[callback_type] = callback;
    517c:	1c93      	adds	r3, r2, #2
    517e:	009b      	lsls	r3, r3, #2
    5180:	5019      	str	r1, [r3, r0]
		/* Set corresponding bit to set callback as registered */
		module->registered_callback |= (1 << callback_type);
    5182:	8e83      	ldrh	r3, [r0, #52]	; 0x34
    5184:	2101      	movs	r1, #1
    5186:	4091      	lsls	r1, r2
    5188:	430b      	orrs	r3, r1
    518a:	b29b      	uxth	r3, r3
    518c:	8683      	strh	r3, [r0, #52]	; 0x34
    518e:	2300      	movs	r3, #0
	}

	return status;
}
    5190:	0018      	movs	r0, r3
    5192:	4770      	bx	lr
    5194:	2317      	movs	r3, #23
			if (callback_type > (RTC_NUM_OF_COMP16 + RTC_PER_NUM)) {
    5196:	2a0a      	cmp	r2, #10
    5198:	d8fa      	bhi.n	5190 <rtc_count_register_callback+0x2c>
    519a:	e7ef      	b.n	517c <rtc_count_register_callback+0x18>
			status = STATUS_ERR_INVALID_ARG;
    519c:	2317      	movs	r3, #23
    519e:	e7f7      	b.n	5190 <rtc_count_register_callback+0x2c>

000051a0 <rtc_count_enable_callback>:
 * \param[in]     callback_type Callback type to enable
 */
void rtc_count_enable_callback(
		struct rtc_module *const module,
		enum rtc_count_callback callback_type)
{
    51a0:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    51a2:	6802      	ldr	r2, [r0, #0]

	if (callback_type == RTC_COUNT_CALLBACK_OVERFLOW) {
    51a4:	290a      	cmp	r1, #10
    51a6:	d011      	beq.n	51cc <rtc_count_enable_callback+0x2c>
		rtc_module->MODE0.INTENSET.reg = RTC_MODE0_INTFLAG_OVF;
#ifdef FEATURE_RTC_TAMPER_DETECTION
	} else if (callback_type == RTC_COUNT_CALLBACK_TAMPER) {
		rtc_module->MODE0.INTENSET.reg = RTC_MODE0_INTFLAG_TAMPER;
#endif
	} else if (callback_type >= RTC_COUNT_CALLBACK_PERIODIC_INTERVAL_0
    51a8:	2907      	cmp	r1, #7
    51aa:	d912      	bls.n	51d2 <rtc_count_enable_callback+0x32>
			&& callback_type <= RTC_COUNT_CALLBACK_PERIODIC_INTERVAL_7) {
		rtc_module->MODE0.INTENSET.reg = RTC_MODE1_INTFLAG_PER(1 << callback_type);
	}else {
		rtc_module->MODE0.INTENSET.reg = RTC_MODE1_INTFLAG_CMP(1 << (callback_type - RTC_PER_NUM));
    51ac:	2380      	movs	r3, #128	; 0x80
    51ae:	005b      	lsls	r3, r3, #1
    51b0:	000c      	movs	r4, r1
    51b2:	3c08      	subs	r4, #8
    51b4:	40a3      	lsls	r3, r4
    51b6:	24c0      	movs	r4, #192	; 0xc0
    51b8:	00a4      	lsls	r4, r4, #2
    51ba:	4023      	ands	r3, r4
    51bc:	8153      	strh	r3, [r2, #10]
	}
	/* Mark callback as enabled. */
	module->enabled_callback |= (1 << callback_type);
    51be:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
    51c0:	2201      	movs	r2, #1
    51c2:	408a      	lsls	r2, r1
    51c4:	4313      	orrs	r3, r2
    51c6:	b29b      	uxth	r3, r3
    51c8:	86c3      	strh	r3, [r0, #54]	; 0x36
}
    51ca:	bd10      	pop	{r4, pc}
		rtc_module->MODE0.INTENSET.reg = RTC_MODE0_INTFLAG_OVF;
    51cc:	4b04      	ldr	r3, [pc, #16]	; (51e0 <rtc_count_enable_callback+0x40>)
    51ce:	8153      	strh	r3, [r2, #10]
    51d0:	e7f5      	b.n	51be <rtc_count_enable_callback+0x1e>
		rtc_module->MODE0.INTENSET.reg = RTC_MODE1_INTFLAG_PER(1 << callback_type);
    51d2:	2401      	movs	r4, #1
    51d4:	408c      	lsls	r4, r1
    51d6:	23ff      	movs	r3, #255	; 0xff
    51d8:	4023      	ands	r3, r4
    51da:	8153      	strh	r3, [r2, #10]
    51dc:	e7ef      	b.n	51be <rtc_count_enable_callback+0x1e>
    51de:	46c0      	nop			; (mov r8, r8)
    51e0:	ffff8000 	.word	0xffff8000

000051e4 <rtc_count_disable_callback>:
 * \param[in]     callback_type Callback type to disable
 */
void rtc_count_disable_callback(
		struct rtc_module *const module,
		enum rtc_count_callback callback_type)
{
    51e4:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    51e6:	6802      	ldr	r2, [r0, #0]

	/* Disable interrupt */
	if (callback_type == RTC_COUNT_CALLBACK_OVERFLOW) {
    51e8:	290a      	cmp	r1, #10
    51ea:	d010      	beq.n	520e <rtc_count_disable_callback+0x2a>
		rtc_module->MODE0.INTENCLR.reg = RTC_MODE0_INTFLAG_OVF;
#ifdef FEATURE_RTC_TAMPER_DETECTION
	} else if (callback_type == RTC_COUNT_CALLBACK_TAMPER) {
		rtc_module->MODE0.INTENCLR.reg = RTC_MODE0_INTFLAG_TAMPER;
#endif
	} else if(callback_type >= RTC_COUNT_CALLBACK_PERIODIC_INTERVAL_0
    51ec:	2907      	cmp	r1, #7
    51ee:	d911      	bls.n	5214 <rtc_count_disable_callback+0x30>
			&& callback_type <= RTC_COUNT_CALLBACK_PERIODIC_INTERVAL_7){
		rtc_module->MODE0.INTENCLR.reg = RTC_MODE1_INTFLAG_PER(1 << callback_type);;
	}else {
		rtc_module->MODE0.INTENCLR.reg = RTC_MODE1_INTFLAG_CMP(1 << (callback_type - RTC_PER_NUM));
    51f0:	2380      	movs	r3, #128	; 0x80
    51f2:	005b      	lsls	r3, r3, #1
    51f4:	000c      	movs	r4, r1
    51f6:	3c08      	subs	r4, #8
    51f8:	40a3      	lsls	r3, r4
    51fa:	24c0      	movs	r4, #192	; 0xc0
    51fc:	00a4      	lsls	r4, r4, #2
    51fe:	4023      	ands	r3, r4
    5200:	8113      	strh	r3, [r2, #8]
	}

	/* Mark callback as disabled. */
	module->enabled_callback &= ~(1 << callback_type);
    5202:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
    5204:	2201      	movs	r2, #1
    5206:	408a      	lsls	r2, r1
    5208:	4393      	bics	r3, r2
    520a:	86c3      	strh	r3, [r0, #54]	; 0x36
}
    520c:	bd10      	pop	{r4, pc}
		rtc_module->MODE0.INTENCLR.reg = RTC_MODE0_INTFLAG_OVF;
    520e:	4b04      	ldr	r3, [pc, #16]	; (5220 <rtc_count_disable_callback+0x3c>)
    5210:	8113      	strh	r3, [r2, #8]
    5212:	e7f6      	b.n	5202 <rtc_count_disable_callback+0x1e>
		rtc_module->MODE0.INTENCLR.reg = RTC_MODE1_INTFLAG_PER(1 << callback_type);;
    5214:	2401      	movs	r4, #1
    5216:	408c      	lsls	r4, r1
    5218:	23ff      	movs	r3, #255	; 0xff
    521a:	4023      	ands	r3, r4
    521c:	8113      	strh	r3, [r2, #8]
    521e:	e7f0      	b.n	5202 <rtc_count_disable_callback+0x1e>
    5220:	ffff8000 	.word	0xffff8000

00005224 <RTC_Handler>:
/**
 * \internal ISR handler for RTC
 */
#if (RTC_INST_NUM == 1)
void RTC_Handler(void)
{
    5224:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5226:	46de      	mov	lr, fp
    5228:	4657      	mov	r7, sl
    522a:	464e      	mov	r6, r9
    522c:	4645      	mov	r5, r8
    522e:	b5e0      	push	{r5, r6, r7, lr}
	struct rtc_module *module = _rtc_instance[instance_index];
    5230:	4b2b      	ldr	r3, [pc, #172]	; (52e0 <RTC_Handler+0xbc>)
    5232:	681b      	ldr	r3, [r3, #0]
    5234:	469a      	mov	sl, r3
	Rtc *const rtc_module = module->hw;
    5236:	681e      	ldr	r6, [r3, #0]
	uint16_t callback_mask = module->enabled_callback;
    5238:	8edb      	ldrh	r3, [r3, #54]	; 0x36
	callback_mask &= module->registered_callback;
    523a:	4652      	mov	r2, sl
    523c:	8e92      	ldrh	r2, [r2, #52]	; 0x34
    523e:	401a      	ands	r2, r3
    5240:	4690      	mov	r8, r2
	uint16_t interrupt_status = rtc_module->MODE0.INTFLAG.reg;
    5242:	89b2      	ldrh	r2, [r6, #12]
	interrupt_status &= rtc_module->MODE0.INTENSET.reg;
    5244:	8973      	ldrh	r3, [r6, #10]
    5246:	4013      	ands	r3, r2
	if (interrupt_status & RTC_MODE0_INTFLAG_OVF) {
    5248:	b21a      	sxth	r2, r3
    524a:	2a00      	cmp	r2, #0
    524c:	db08      	blt.n	5260 <RTC_Handler+0x3c>
    524e:	27ff      	movs	r7, #255	; 0xff
    5250:	401f      	ands	r7, r3
	} else if (interrupt_status & RTC_MODE1_INTFLAG_PER(0xff)) {
    5252:	d02a      	beq.n	52aa <RTC_Handler+0x86>
    5254:	2400      	movs	r4, #0
			if ((interrupt_status & RTC_MODE1_INTFLAG_PER(1 << i))
    5256:	2301      	movs	r3, #1
    5258:	4699      	mov	r9, r3
			rtc_module->MODE0.INTFLAG.reg = RTC_MODE1_INTFLAG_PER(1<<i);
    525a:	33fe      	adds	r3, #254	; 0xfe
    525c:	469b      	mov	fp, r3
    525e:	e014      	b.n	528a <RTC_Handler+0x66>
		if (callback_mask & (1 << RTC_COUNT_CALLBACK_OVERFLOW)) {
    5260:	4643      	mov	r3, r8
    5262:	055b      	lsls	r3, r3, #21
    5264:	d407      	bmi.n	5276 <RTC_Handler+0x52>
		rtc_module->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_OVF;
    5266:	4b1f      	ldr	r3, [pc, #124]	; (52e4 <RTC_Handler+0xc0>)
    5268:	81b3      	strh	r3, [r6, #12]
	_rtc_interrupt_handler(0);
}
    526a:	bc3c      	pop	{r2, r3, r4, r5}
    526c:	4690      	mov	r8, r2
    526e:	4699      	mov	r9, r3
    5270:	46a2      	mov	sl, r4
    5272:	46ab      	mov	fp, r5
    5274:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			module->callbacks[RTC_COUNT_CALLBACK_OVERFLOW]();
    5276:	4653      	mov	r3, sl
    5278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    527a:	4798      	blx	r3
    527c:	e7f3      	b.n	5266 <RTC_Handler+0x42>
			rtc_module->MODE0.INTFLAG.reg = RTC_MODE1_INTFLAG_PER(1<<i);
    527e:	465b      	mov	r3, fp
    5280:	401d      	ands	r5, r3
    5282:	81b5      	strh	r5, [r6, #12]
    5284:	3401      	adds	r4, #1
		for ( i = 0;i < RTC_PER_NUM;i++) {
    5286:	2c08      	cmp	r4, #8
    5288:	d0ef      	beq.n	526a <RTC_Handler+0x46>
			if ((interrupt_status & RTC_MODE1_INTFLAG_PER(1 << i))
    528a:	0023      	movs	r3, r4
    528c:	464d      	mov	r5, r9
    528e:	40a5      	lsls	r5, r4
    5290:	422f      	tst	r7, r5
    5292:	d0f4      	beq.n	527e <RTC_Handler+0x5a>
			  && (callback_mask & (1 << i))) {
    5294:	4642      	mov	r2, r8
    5296:	4122      	asrs	r2, r4
    5298:	4649      	mov	r1, r9
    529a:	4211      	tst	r1, r2
    529c:	d0ef      	beq.n	527e <RTC_Handler+0x5a>
				module->callbacks[i]();
    529e:	3302      	adds	r3, #2
    52a0:	009b      	lsls	r3, r3, #2
    52a2:	4652      	mov	r2, sl
    52a4:	589b      	ldr	r3, [r3, r2]
    52a6:	4798      	blx	r3
    52a8:	e7e9      	b.n	527e <RTC_Handler+0x5a>
	}else if (interrupt_status & RTC_MODE1_INTFLAG_CMP(1 << 0)) {
    52aa:	05da      	lsls	r2, r3, #23
    52ac:	d50a      	bpl.n	52c4 <RTC_Handler+0xa0>
		if (callback_mask & (1 << RTC_COUNT_CALLBACK_COMPARE_0)) {
    52ae:	4643      	mov	r3, r8
    52b0:	05db      	lsls	r3, r3, #23
    52b2:	d403      	bmi.n	52bc <RTC_Handler+0x98>
		rtc_module->MODE0.INTFLAG.reg = RTC_MODE1_INTFLAG_CMP(1 << 0);
    52b4:	2380      	movs	r3, #128	; 0x80
    52b6:	005b      	lsls	r3, r3, #1
    52b8:	81b3      	strh	r3, [r6, #12]
    52ba:	e7d6      	b.n	526a <RTC_Handler+0x46>
			module->callbacks[RTC_COUNT_CALLBACK_COMPARE_0]();
    52bc:	4653      	mov	r3, sl
    52be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    52c0:	4798      	blx	r3
    52c2:	e7f7      	b.n	52b4 <RTC_Handler+0x90>
	} else if (interrupt_status & RTC_MODE1_INTFLAG_CMP(1 << 1)) {
    52c4:	059b      	lsls	r3, r3, #22
    52c6:	d5d0      	bpl.n	526a <RTC_Handler+0x46>
		if (callback_mask & (1 << RTC_COUNT_CALLBACK_COMPARE_1)) {
    52c8:	4643      	mov	r3, r8
    52ca:	059b      	lsls	r3, r3, #22
    52cc:	d403      	bmi.n	52d6 <RTC_Handler+0xb2>
		rtc_module->MODE0.INTFLAG.reg = RTC_MODE1_INTFLAG_CMP(1 << 1);
    52ce:	2380      	movs	r3, #128	; 0x80
    52d0:	009b      	lsls	r3, r3, #2
    52d2:	81b3      	strh	r3, [r6, #12]
}
    52d4:	e7c9      	b.n	526a <RTC_Handler+0x46>
			module->callbacks[RTC_COUNT_CALLBACK_COMPARE_1]();
    52d6:	4653      	mov	r3, sl
    52d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    52da:	4798      	blx	r3
    52dc:	e7f7      	b.n	52ce <RTC_Handler+0xaa>
    52de:	46c0      	nop			; (mov r8, r8)
    52e0:	20002234 	.word	0x20002234
    52e4:	ffff8000 	.word	0xffff8000

000052e8 <_i2c_master_wait_for_sync>:
	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
    52e8:	6801      	ldr	r1, [r0, #0]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
    52ea:	2207      	movs	r2, #7
    52ec:	69cb      	ldr	r3, [r1, #28]
	while (i2c_master_is_syncing(module)) {
    52ee:	421a      	tst	r2, r3
    52f0:	d1fc      	bne.n	52ec <_i2c_master_wait_for_sync+0x4>
}
    52f2:	4770      	bx	lr

000052f4 <i2c_master_init>:
 */
enum status_code i2c_master_init(
		struct i2c_master_module *const module,
		Sercom *const hw,
		const struct i2c_master_config *const config)
{
    52f4:	b5f0      	push	{r4, r5, r6, r7, lr}
    52f6:	46d6      	mov	lr, sl
    52f8:	464f      	mov	r7, r9
    52fa:	4646      	mov	r6, r8
    52fc:	b5c0      	push	{r6, r7, lr}
    52fe:	b08a      	sub	sp, #40	; 0x28
    5300:	0007      	movs	r7, r0
    5302:	000e      	movs	r6, r1
    5304:	0014      	movs	r4, r2
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize software module */
	module->hw = hw;
    5306:	6039      	str	r1, [r7, #0]

	SercomI2cm *const i2c_module = &(module->hw->I2CM);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    5308:	0008      	movs	r0, r1
    530a:	4ba5      	ldr	r3, [pc, #660]	; (55a0 <i2c_master_init+0x2ac>)
    530c:	4798      	blx	r3

#if (SAML22) || (SAMC20)
	pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#elif (SAML21) || (SAMR30) || (SAMR34) || (SAMR35) || (WLR089)
	if (sercom_index == 5) {
    530e:	2805      	cmp	r0, #5
    5310:	d100      	bne.n	5314 <i2c_master_init+0x20>
    5312:	e13d      	b.n	5590 <i2c_master_init+0x29c>
		pm_index     = MCLK_APBDMASK_SERCOM5_Pos;
		gclk_index   = SERCOM5_GCLK_ID_CORE;
	} else {
		pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    5314:	0005      	movs	r5, r0
    5316:	3512      	adds	r5, #18
			MCLK->APBCMASK.reg |= mask;
    5318:	4aa2      	ldr	r2, [pc, #648]	; (55a4 <i2c_master_init+0x2b0>)
    531a:	69d1      	ldr	r1, [r2, #28]
	/* Turn on module in PM */
#if (SAML21) || (SAMR30) || (SAMR34) || (SAMR35) || (WLR089)
	if (sercom_index == 5) {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    531c:	2301      	movs	r3, #1
    531e:	4083      	lsls	r3, r0
    5320:	430b      	orrs	r3, r1
    5322:	61d3      	str	r3, [r2, #28]
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
    5324:	a909      	add	r1, sp, #36	; 0x24
    5326:	7b23      	ldrb	r3, [r4, #12]
    5328:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    532a:	b2ed      	uxtb	r5, r5
    532c:	0028      	movs	r0, r5
    532e:	4b9e      	ldr	r3, [pc, #632]	; (55a8 <i2c_master_init+0x2b4>)
    5330:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    5332:	0028      	movs	r0, r5
    5334:	4b9d      	ldr	r3, [pc, #628]	; (55ac <i2c_master_init+0x2b8>)
    5336:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    5338:	7b20      	ldrb	r0, [r4, #12]
    533a:	2100      	movs	r1, #0
    533c:	4b9c      	ldr	r3, [pc, #624]	; (55b0 <i2c_master_init+0x2bc>)
    533e:	4798      	blx	r3

	/* Check if module is enabled. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
    5340:	6833      	ldr	r3, [r6, #0]
		return STATUS_ERR_DENIED;
    5342:	201c      	movs	r0, #28
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
    5344:	079b      	lsls	r3, r3, #30
    5346:	d505      	bpl.n	5354 <i2c_master_init+0x60>
	/* Set sercom module to operate in I2C master mode. */
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE(0x5);

	/* Set config and return status. */
	return _i2c_master_set_config(module, config);
}
    5348:	b00a      	add	sp, #40	; 0x28
    534a:	bc1c      	pop	{r2, r3, r4}
    534c:	4690      	mov	r8, r2
    534e:	4699      	mov	r9, r3
    5350:	46a2      	mov	sl, r4
    5352:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
    5354:	6833      	ldr	r3, [r6, #0]
		return STATUS_BUSY;
    5356:	3817      	subs	r0, #23
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
    5358:	07db      	lsls	r3, r3, #31
    535a:	d4f5      	bmi.n	5348 <i2c_master_init+0x54>
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    535c:	6838      	ldr	r0, [r7, #0]
    535e:	4b90      	ldr	r3, [pc, #576]	; (55a0 <i2c_master_init+0x2ac>)
    5360:	4699      	mov	r9, r3
    5362:	4798      	blx	r3
    5364:	0005      	movs	r5, r0
	_sercom_set_handler(instance_index, _i2c_master_interrupt_handler);
    5366:	4993      	ldr	r1, [pc, #588]	; (55b4 <i2c_master_init+0x2c0>)
    5368:	4b93      	ldr	r3, [pc, #588]	; (55b8 <i2c_master_init+0x2c4>)
    536a:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    536c:	00ad      	lsls	r5, r5, #2
    536e:	4b93      	ldr	r3, [pc, #588]	; (55bc <i2c_master_init+0x2c8>)
    5370:	50ef      	str	r7, [r5, r3]
	module->registered_callback = 0;
    5372:	2300      	movs	r3, #0
    5374:	763b      	strb	r3, [r7, #24]
	module->enabled_callback = 0;
    5376:	767b      	strb	r3, [r7, #25]
	module->buffer_length = 0;
    5378:	2500      	movs	r5, #0
    537a:	837b      	strh	r3, [r7, #26]
	module->buffer_remaining = 0;
    537c:	83bb      	strh	r3, [r7, #28]
	module->status = STATUS_OK;
    537e:	2225      	movs	r2, #37	; 0x25
    5380:	54bd      	strb	r5, [r7, r2]
	module->buffer = NULL;
    5382:	623b      	str	r3, [r7, #32]
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE(0x5);
    5384:	3314      	adds	r3, #20
    5386:	6033      	str	r3, [r6, #0]
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    5388:	683b      	ldr	r3, [r7, #0]
    538a:	4698      	mov	r8, r3
	uint8_t sercom_index = _sercom_get_sercom_inst_index(sercom_hw);
    538c:	0018      	movs	r0, r3
    538e:	47c8      	blx	r9
    5390:	4681      	mov	r9, r0
    5392:	2380      	movs	r3, #128	; 0x80
    5394:	aa08      	add	r2, sp, #32
    5396:	7013      	strb	r3, [r2, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    5398:	7055      	strb	r5, [r2, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    539a:	2301      	movs	r3, #1
    539c:	7093      	strb	r3, [r2, #2]
	config->powersave    = false;
    539e:	70d5      	strb	r5, [r2, #3]
	uint32_t pad0 = config->pinmux_pad0;
    53a0:	69e0      	ldr	r0, [r4, #28]
	uint32_t pad1 = config->pinmux_pad1;
    53a2:	6a26      	ldr	r6, [r4, #32]
	if (pad0 == PINMUX_DEFAULT) {
    53a4:	2800      	cmp	r0, #0
    53a6:	d100      	bne.n	53aa <i2c_master_init+0xb6>
    53a8:	e0af      	b.n	550a <i2c_master_init+0x216>
	pin_conf.mux_position = pad0 & 0xFFFF;
    53aa:	ab08      	add	r3, sp, #32
    53ac:	7018      	strb	r0, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
    53ae:	2302      	movs	r3, #2
    53b0:	aa08      	add	r2, sp, #32
    53b2:	7053      	strb	r3, [r2, #1]
	system_pinmux_pin_set_config(pad0 >> 16, &pin_conf);
    53b4:	0c00      	lsrs	r0, r0, #16
    53b6:	b2c0      	uxtb	r0, r0
    53b8:	0011      	movs	r1, r2
    53ba:	4b81      	ldr	r3, [pc, #516]	; (55c0 <i2c_master_init+0x2cc>)
    53bc:	4798      	blx	r3
	if (pad1 == PINMUX_DEFAULT) {
    53be:	2e00      	cmp	r6, #0
    53c0:	d100      	bne.n	53c4 <i2c_master_init+0xd0>
    53c2:	e0a7      	b.n	5514 <i2c_master_init+0x220>
	pin_conf.mux_position = pad1 & 0xFFFF;
    53c4:	ab08      	add	r3, sp, #32
    53c6:	701e      	strb	r6, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
    53c8:	2302      	movs	r3, #2
    53ca:	aa08      	add	r2, sp, #32
    53cc:	7053      	strb	r3, [r2, #1]
	system_pinmux_pin_set_config(pad1 >> 16, &pin_conf);
    53ce:	0c36      	lsrs	r6, r6, #16
    53d0:	b2f0      	uxtb	r0, r6
    53d2:	0011      	movs	r1, r2
    53d4:	4b7a      	ldr	r3, [pc, #488]	; (55c0 <i2c_master_init+0x2cc>)
    53d6:	4798      	blx	r3
	module->unknown_bus_state_timeout = config->unknown_bus_state_timeout;
    53d8:	8aa3      	ldrh	r3, [r4, #20]
    53da:	80fb      	strh	r3, [r7, #6]
	module->buffer_timeout = config->buffer_timeout;
    53dc:	8ae3      	ldrh	r3, [r4, #22]
    53de:	813b      	strh	r3, [r7, #8]
	if (config->run_in_standby || system_is_debugger_present()) {
    53e0:	7e23      	ldrb	r3, [r4, #24]
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
    53e2:	2280      	movs	r2, #128	; 0x80
	if (config->run_in_standby || system_is_debugger_present()) {
    53e4:	2b00      	cmp	r3, #0
    53e6:	d104      	bne.n	53f2 <i2c_master_init+0xfe>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    53e8:	4b76      	ldr	r3, [pc, #472]	; (55c4 <i2c_master_init+0x2d0>)
    53ea:	789b      	ldrb	r3, [r3, #2]
    53ec:	079b      	lsls	r3, r3, #30
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
    53ee:	0fdb      	lsrs	r3, r3, #31
    53f0:	01da      	lsls	r2, r3, #7
	tmp_ctrla |= config->transfer_speed;
    53f2:	68a1      	ldr	r1, [r4, #8]
    53f4:	6923      	ldr	r3, [r4, #16]
    53f6:	430b      	orrs	r3, r1
    53f8:	4313      	orrs	r3, r2
	if (config->scl_low_timeout) {
    53fa:	2224      	movs	r2, #36	; 0x24
    53fc:	5ca2      	ldrb	r2, [r4, r2]
    53fe:	2a00      	cmp	r2, #0
    5400:	d002      	beq.n	5408 <i2c_master_init+0x114>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_LOWTOUTEN;
    5402:	2280      	movs	r2, #128	; 0x80
    5404:	05d2      	lsls	r2, r2, #23
    5406:	4313      	orrs	r3, r2
		tmp_ctrla |= config->inactive_timeout;
    5408:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    540a:	4313      	orrs	r3, r2
	if (config->scl_stretch_only_after_ack_bit || (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED)) {
    540c:	222c      	movs	r2, #44	; 0x2c
    540e:	5ca2      	ldrb	r2, [r4, r2]
    5410:	2a00      	cmp	r2, #0
    5412:	d103      	bne.n	541c <i2c_master_init+0x128>
    5414:	2280      	movs	r2, #128	; 0x80
    5416:	0492      	lsls	r2, r2, #18
    5418:	4291      	cmp	r1, r2
    541a:	d102      	bne.n	5422 <i2c_master_init+0x12e>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SCLSM;
    541c:	2280      	movs	r2, #128	; 0x80
    541e:	0512      	lsls	r2, r2, #20
    5420:	4313      	orrs	r3, r2
	if (config->slave_scl_low_extend_timeout) {
    5422:	222d      	movs	r2, #45	; 0x2d
    5424:	5ca2      	ldrb	r2, [r4, r2]
    5426:	2a00      	cmp	r2, #0
    5428:	d002      	beq.n	5430 <i2c_master_init+0x13c>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SEXTTOEN;
    542a:	2280      	movs	r2, #128	; 0x80
    542c:	0412      	lsls	r2, r2, #16
    542e:	4313      	orrs	r3, r2
	if (config->master_scl_low_extend_timeout) {
    5430:	222e      	movs	r2, #46	; 0x2e
    5432:	5ca2      	ldrb	r2, [r4, r2]
    5434:	2a00      	cmp	r2, #0
    5436:	d002      	beq.n	543e <i2c_master_init+0x14a>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_MEXTTOEN;
    5438:	2280      	movs	r2, #128	; 0x80
    543a:	03d2      	lsls	r2, r2, #15
    543c:	4313      	orrs	r3, r2
	i2c_module->CTRLA.reg |= tmp_ctrla;
    543e:	4642      	mov	r2, r8
    5440:	6812      	ldr	r2, [r2, #0]
    5442:	4313      	orrs	r3, r2
    5444:	4642      	mov	r2, r8
    5446:	6013      	str	r3, [r2, #0]
	i2c_module->CTRLB.reg = SERCOM_I2CM_CTRLB_SMEN;
    5448:	2380      	movs	r3, #128	; 0x80
    544a:	005b      	lsls	r3, r3, #1
    544c:	6053      	str	r3, [r2, #4]
	uint32_t fgclk       = system_gclk_chan_get_hz(SERCOM0_GCLK_ID_CORE + sercom_index);
    544e:	464d      	mov	r5, r9
    5450:	3512      	adds	r5, #18
    5452:	b2e8      	uxtb	r0, r5
    5454:	4b5c      	ldr	r3, [pc, #368]	; (55c8 <i2c_master_init+0x2d4>)
    5456:	4798      	blx	r3
    5458:	9007      	str	r0, [sp, #28]
	uint32_t fscl        = 1000 * config->baud_rate;
    545a:	23fa      	movs	r3, #250	; 0xfa
    545c:	009b      	lsls	r3, r3, #2
    545e:	6822      	ldr	r2, [r4, #0]
    5460:	435a      	muls	r2, r3
    5462:	4691      	mov	r9, r2
	uint32_t fscl_hs     = 1000 * config->baud_rate_high_speed;
    5464:	6863      	ldr	r3, [r4, #4]
    5466:	469a      	mov	sl, r3
	tmp_baud = (int32_t)(div_ceil(
    5468:	4d58      	ldr	r5, [pc, #352]	; (55cc <i2c_master_init+0x2d8>)
    546a:	47a8      	blx	r5
    546c:	9000      	str	r0, [sp, #0]
    546e:	9101      	str	r1, [sp, #4]
    5470:	464b      	mov	r3, r9
    5472:	0058      	lsls	r0, r3, #1
    5474:	47a8      	blx	r5
    5476:	9002      	str	r0, [sp, #8]
    5478:	9103      	str	r1, [sp, #12]
    547a:	8e20      	ldrh	r0, [r4, #48]	; 0x30
    547c:	47a8      	blx	r5
    547e:	9004      	str	r0, [sp, #16]
    5480:	9105      	str	r1, [sp, #20]
    5482:	4f53      	ldr	r7, [pc, #332]	; (55d0 <i2c_master_init+0x2dc>)
    5484:	4a53      	ldr	r2, [pc, #332]	; (55d4 <i2c_master_init+0x2e0>)
    5486:	4b54      	ldr	r3, [pc, #336]	; (55d8 <i2c_master_init+0x2e4>)
    5488:	9800      	ldr	r0, [sp, #0]
    548a:	9901      	ldr	r1, [sp, #4]
    548c:	47b8      	blx	r7
    548e:	0002      	movs	r2, r0
    5490:	000b      	movs	r3, r1
    5492:	9804      	ldr	r0, [sp, #16]
    5494:	9905      	ldr	r1, [sp, #20]
    5496:	47b8      	blx	r7
    5498:	4e50      	ldr	r6, [pc, #320]	; (55dc <i2c_master_init+0x2e8>)
    549a:	2200      	movs	r2, #0
    549c:	4b50      	ldr	r3, [pc, #320]	; (55e0 <i2c_master_init+0x2ec>)
    549e:	47b0      	blx	r6
    54a0:	9004      	str	r0, [sp, #16]
    54a2:	9105      	str	r1, [sp, #20]
    54a4:	4648      	mov	r0, r9
    54a6:	47a8      	blx	r5
    54a8:	0002      	movs	r2, r0
    54aa:	000b      	movs	r3, r1
    54ac:	9804      	ldr	r0, [sp, #16]
    54ae:	9905      	ldr	r1, [sp, #20]
    54b0:	47b8      	blx	r7
    54b2:	0002      	movs	r2, r0
    54b4:	000b      	movs	r3, r1
    54b6:	4d4b      	ldr	r5, [pc, #300]	; (55e4 <i2c_master_init+0x2f0>)
    54b8:	9800      	ldr	r0, [sp, #0]
    54ba:	9901      	ldr	r1, [sp, #4]
    54bc:	47a8      	blx	r5
    54be:	9a02      	ldr	r2, [sp, #8]
    54c0:	9b03      	ldr	r3, [sp, #12]
    54c2:	47b0      	blx	r6
    54c4:	2200      	movs	r2, #0
    54c6:	4b48      	ldr	r3, [pc, #288]	; (55e8 <i2c_master_init+0x2f4>)
    54c8:	47a8      	blx	r5
    54ca:	9a02      	ldr	r2, [sp, #8]
    54cc:	9b03      	ldr	r3, [sp, #12]
    54ce:	4d47      	ldr	r5, [pc, #284]	; (55ec <i2c_master_init+0x2f8>)
    54d0:	47a8      	blx	r5
    54d2:	4b47      	ldr	r3, [pc, #284]	; (55f0 <i2c_master_init+0x2fc>)
    54d4:	4798      	blx	r3
    54d6:	0005      	movs	r5, r0
	if (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED) {
    54d8:	2380      	movs	r3, #128	; 0x80
    54da:	049b      	lsls	r3, r3, #18
    54dc:	68a2      	ldr	r2, [r4, #8]
    54de:	429a      	cmp	r2, r3
    54e0:	d01e      	beq.n	5520 <i2c_master_init+0x22c>
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
    54e2:	0003      	movs	r3, r0
    54e4:	2040      	movs	r0, #64	; 0x40
    54e6:	2dff      	cmp	r5, #255	; 0xff
    54e8:	d900      	bls.n	54ec <i2c_master_init+0x1f8>
    54ea:	e72d      	b.n	5348 <i2c_master_init+0x54>
	int32_t tmp_baudlow_hs = 0;
    54ec:	2400      	movs	r4, #0
	int32_t tmp_baud_hs = 0;
    54ee:	2000      	movs	r0, #0
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
    54f0:	25ff      	movs	r5, #255	; 0xff
    54f2:	401d      	ands	r5, r3
			SERCOM_I2CM_BAUD_HSBAUD(tmp_baud_hs) | SERCOM_I2CM_BAUD_HSBAUDLOW(tmp_baudlow_hs);
    54f4:	0624      	lsls	r4, r4, #24
    54f6:	4325      	orrs	r5, r4
    54f8:	0400      	lsls	r0, r0, #16
    54fa:	23ff      	movs	r3, #255	; 0xff
    54fc:	041b      	lsls	r3, r3, #16
    54fe:	4018      	ands	r0, r3
    5500:	4305      	orrs	r5, r0
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
    5502:	4643      	mov	r3, r8
    5504:	60dd      	str	r5, [r3, #12]
	enum status_code tmp_status_code = STATUS_OK;
    5506:	2000      	movs	r0, #0
    5508:	e71e      	b.n	5348 <i2c_master_init+0x54>
		pad0 = _sercom_get_default_pad(sercom_hw, 0);
    550a:	2100      	movs	r1, #0
    550c:	4640      	mov	r0, r8
    550e:	4b39      	ldr	r3, [pc, #228]	; (55f4 <i2c_master_init+0x300>)
    5510:	4798      	blx	r3
    5512:	e74a      	b.n	53aa <i2c_master_init+0xb6>
		pad1 = _sercom_get_default_pad(sercom_hw, 1);
    5514:	2101      	movs	r1, #1
    5516:	4640      	mov	r0, r8
    5518:	4b36      	ldr	r3, [pc, #216]	; (55f4 <i2c_master_init+0x300>)
    551a:	4798      	blx	r3
    551c:	0006      	movs	r6, r0
    551e:	e751      	b.n	53c4 <i2c_master_init+0xd0>
	uint32_t fscl_hs     = 1000 * config->baud_rate_high_speed;
    5520:	26fa      	movs	r6, #250	; 0xfa
    5522:	00b6      	lsls	r6, r6, #2
    5524:	4653      	mov	r3, sl
    5526:	435e      	muls	r6, r3
		tmp_baudlow_hs = (int32_t)((fgclk * 2.0) / (3.0 * fscl_hs) - 1);
    5528:	9800      	ldr	r0, [sp, #0]
    552a:	9901      	ldr	r1, [sp, #4]
    552c:	0002      	movs	r2, r0
    552e:	000b      	movs	r3, r1
    5530:	4c2a      	ldr	r4, [pc, #168]	; (55dc <i2c_master_init+0x2e8>)
    5532:	47a0      	blx	r4
    5534:	9000      	str	r0, [sp, #0]
    5536:	9101      	str	r1, [sp, #4]
    5538:	0030      	movs	r0, r6
    553a:	4b24      	ldr	r3, [pc, #144]	; (55cc <i2c_master_init+0x2d8>)
    553c:	4798      	blx	r3
    553e:	2200      	movs	r2, #0
    5540:	4b2d      	ldr	r3, [pc, #180]	; (55f8 <i2c_master_init+0x304>)
    5542:	47b8      	blx	r7
    5544:	0002      	movs	r2, r0
    5546:	000b      	movs	r3, r1
    5548:	9800      	ldr	r0, [sp, #0]
    554a:	9901      	ldr	r1, [sp, #4]
    554c:	4c27      	ldr	r4, [pc, #156]	; (55ec <i2c_master_init+0x2f8>)
    554e:	47a0      	blx	r4
    5550:	2200      	movs	r2, #0
    5552:	4b25      	ldr	r3, [pc, #148]	; (55e8 <i2c_master_init+0x2f4>)
    5554:	4c23      	ldr	r4, [pc, #140]	; (55e4 <i2c_master_init+0x2f0>)
    5556:	47a0      	blx	r4
    5558:	4b25      	ldr	r3, [pc, #148]	; (55f0 <i2c_master_init+0x2fc>)
    555a:	4798      	blx	r3
    555c:	1e04      	subs	r4, r0, #0
		if (tmp_baudlow_hs) {
    555e:	d00c      	beq.n	557a <i2c_master_init+0x286>
			tmp_baud_hs = (int32_t)(fgclk / fscl_hs) - 2 - tmp_baudlow_hs;
    5560:	0031      	movs	r1, r6
    5562:	9807      	ldr	r0, [sp, #28]
    5564:	4b25      	ldr	r3, [pc, #148]	; (55fc <i2c_master_init+0x308>)
    5566:	4798      	blx	r3
    5568:	3802      	subs	r0, #2
    556a:	1b00      	subs	r0, r0, r4
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
    556c:	002b      	movs	r3, r5
    556e:	2dff      	cmp	r5, #255	; 0xff
    5570:	d80c      	bhi.n	558c <i2c_master_init+0x298>
    5572:	28ff      	cmp	r0, #255	; 0xff
    5574:	d9bc      	bls.n	54f0 <i2c_master_init+0x1fc>
    5576:	2040      	movs	r0, #64	; 0x40
    5578:	e6e6      	b.n	5348 <i2c_master_init+0x54>
			tmp_baud_hs = (int32_t)(div_ceil(fgclk, 2 * fscl_hs)) - 1;
    557a:	0071      	lsls	r1, r6, #1
    557c:	1e48      	subs	r0, r1, #1
    557e:	9b07      	ldr	r3, [sp, #28]
    5580:	469c      	mov	ip, r3
    5582:	4460      	add	r0, ip
    5584:	4b1d      	ldr	r3, [pc, #116]	; (55fc <i2c_master_init+0x308>)
    5586:	4798      	blx	r3
    5588:	3801      	subs	r0, #1
    558a:	e7ef      	b.n	556c <i2c_master_init+0x278>
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
    558c:	2040      	movs	r0, #64	; 0x40
    558e:	e6db      	b.n	5348 <i2c_master_init+0x54>
			break;
		case SYSTEM_CLOCK_APB_APBD:
			MCLK->APBDMASK.reg |= mask;
    5590:	4a04      	ldr	r2, [pc, #16]	; (55a4 <i2c_master_init+0x2b0>)
    5592:	6a13      	ldr	r3, [r2, #32]
    5594:	2102      	movs	r1, #2
    5596:	430b      	orrs	r3, r1
    5598:	6213      	str	r3, [r2, #32]
		gclk_index   = SERCOM5_GCLK_ID_CORE;
    559a:	2518      	movs	r5, #24
    559c:	e6c2      	b.n	5324 <i2c_master_init+0x30>
    559e:	46c0      	nop			; (mov r8, r8)
    55a0:	00005fad 	.word	0x00005fad
    55a4:	40000400 	.word	0x40000400
    55a8:	000072a9 	.word	0x000072a9
    55ac:	00007239 	.word	0x00007239
    55b0:	00005e05 	.word	0x00005e05
    55b4:	00005aa1 	.word	0x00005aa1
    55b8:	00005fe9 	.word	0x00005fe9
    55bc:	20002238 	.word	0x20002238
    55c0:	000073d5 	.word	0x000073d5
    55c4:	41002000 	.word	0x41002000
    55c8:	000072cd 	.word	0x000072cd
    55cc:	00019549 	.word	0x00019549
    55d0:	00018931 	.word	0x00018931
    55d4:	e826d695 	.word	0xe826d695
    55d8:	3e112e0b 	.word	0x3e112e0b
    55dc:	00017aa9 	.word	0x00017aa9
    55e0:	40240000 	.word	0x40240000
    55e4:	00018e31 	.word	0x00018e31
    55e8:	3ff00000 	.word	0x3ff00000
    55ec:	000180c9 	.word	0x000180c9
    55f0:	0001945d 	.word	0x0001945d
    55f4:	00005e51 	.word	0x00005e51
    55f8:	40080000 	.word	0x40080000
    55fc:	00016625 	.word	0x00016625

00005600 <i2c_master_reset>:
 * Reset the module to hardware defaults.
 *
 * \param[in,out] module Pointer to software module structure
 */
void i2c_master_reset(struct i2c_master_module *const module)
{
    5600:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5602:	46ce      	mov	lr, r9
    5604:	4647      	mov	r7, r8
    5606:	b580      	push	{r7, lr}
    5608:	0004      	movs	r4, r0
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    560a:	6803      	ldr	r3, [r0, #0]
    560c:	4699      	mov	r9, r3

	/* Wait for sync */
	_i2c_master_wait_for_sync(module);
    560e:	4e14      	ldr	r6, [pc, #80]	; (5660 <i2c_master_reset+0x60>)
    5610:	47b0      	blx	r6
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    5612:	6825      	ldr	r5, [r4, #0]
		system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
    5614:	0028      	movs	r0, r5
    5616:	4b13      	ldr	r3, [pc, #76]	; (5664 <i2c_master_reset+0x64>)
    5618:	4698      	mov	r8, r3
    561a:	4798      	blx	r3
    561c:	231f      	movs	r3, #31
    561e:	4018      	ands	r0, r3
    5620:	2701      	movs	r7, #1
    5622:	0039      	movs	r1, r7
    5624:	4081      	lsls	r1, r0
    5626:	3361      	adds	r3, #97	; 0x61
    5628:	4a0f      	ldr	r2, [pc, #60]	; (5668 <i2c_master_reset+0x68>)
    562a:	50d1      	str	r1, [r2, r3]
	_i2c_master_wait_for_sync(module);
    562c:	0020      	movs	r0, r4
    562e:	47b0      	blx	r6
	i2c_module->INTENCLR.reg = SERCOM_I2CM_INTENCLR_MASK;
    5630:	2383      	movs	r3, #131	; 0x83
    5632:	752b      	strb	r3, [r5, #20]
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_MASK;
    5634:	762b      	strb	r3, [r5, #24]
	i2c_module->CTRLA.reg &= ~SERCOM_I2CM_CTRLA_ENABLE;
    5636:	682b      	ldr	r3, [r5, #0]
    5638:	2202      	movs	r2, #2
    563a:	4393      	bics	r3, r2
    563c:	602b      	str	r3, [r5, #0]
	cpu_irq_enter_critical();
    563e:	4b0b      	ldr	r3, [pc, #44]	; (566c <i2c_master_reset+0x6c>)
    5640:	4798      	blx	r3
	i2c_master_disable(module);

#if I2C_MASTER_CALLBACK_MODE == true
	/* Clear all pending interrupts */
	system_interrupt_enter_critical_section();
	system_interrupt_clear_pending(_sercom_get_interrupt_vector(module->hw));
    5642:	6820      	ldr	r0, [r4, #0]
    5644:	47c0      	blx	r8
    5646:	4b0a      	ldr	r3, [pc, #40]	; (5670 <i2c_master_reset+0x70>)
    5648:	4798      	blx	r3
	cpu_irq_leave_critical();
    564a:	4b0a      	ldr	r3, [pc, #40]	; (5674 <i2c_master_reset+0x74>)
    564c:	4798      	blx	r3
	system_interrupt_leave_critical_section();
#endif

	/* Wait for sync */
	_i2c_master_wait_for_sync(module);
    564e:	0020      	movs	r0, r4
    5650:	47b0      	blx	r6

	/* Reset module */
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_SWRST;
    5652:	464b      	mov	r3, r9
    5654:	601f      	str	r7, [r3, #0]
}
    5656:	bc0c      	pop	{r2, r3}
    5658:	4690      	mov	r8, r2
    565a:	4699      	mov	r9, r3
    565c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    565e:	46c0      	nop			; (mov r8, r8)
    5660:	000052e9 	.word	0x000052e9
    5664:	00006025 	.word	0x00006025
    5668:	e000e100 	.word	0xe000e100
    566c:	000045e9 	.word	0x000045e9
    5670:	000072fd 	.word	0x000072fd
    5674:	00004629 	.word	0x00004629

00005678 <_i2c_master_address_response>:
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    5678:	6803      	ldr	r3, [r0, #0]

	/* Check for error and ignore bus-error; workaround for BUSSTATE stuck in
	 * BUSY */
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
    567a:	7e1a      	ldrb	r2, [r3, #24]
    567c:	0792      	lsls	r2, r2, #30
    567e:	d507      	bpl.n	5690 <_i2c_master_address_response+0x18>

		/* Clear write interrupt flag */
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    5680:	2202      	movs	r2, #2
    5682:	761a      	strb	r2, [r3, #24]

		/* Check arbitration. */
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
    5684:	8b5b      	ldrh	r3, [r3, #26]
    5686:	079b      	lsls	r3, r3, #30
			/* Return packet collision. */
			return STATUS_ERR_PACKET_COLLISION;
    5688:	2041      	movs	r0, #65	; 0x41

		/* Return bad address value. */
		return STATUS_ERR_BAD_ADDRESS;
	}

	return STATUS_OK;
    568a:	17db      	asrs	r3, r3, #31
    568c:	4018      	ands	r0, r3
}
    568e:	4770      	bx	lr
	} else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
    5690:	8b5a      	ldrh	r2, [r3, #26]
    5692:	0752      	lsls	r2, r2, #29
    5694:	d506      	bpl.n	56a4 <_i2c_master_address_response+0x2c>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    5696:	6859      	ldr	r1, [r3, #4]
    5698:	22c0      	movs	r2, #192	; 0xc0
    569a:	0292      	lsls	r2, r2, #10
    569c:	430a      	orrs	r2, r1
    569e:	605a      	str	r2, [r3, #4]
		return STATUS_ERR_BAD_ADDRESS;
    56a0:	2018      	movs	r0, #24
    56a2:	e7f4      	b.n	568e <_i2c_master_address_response+0x16>
	return STATUS_OK;
    56a4:	2000      	movs	r0, #0
    56a6:	e7f2      	b.n	568e <_i2c_master_address_response+0x16>

000056a8 <_i2c_master_wait_for_bus>:
 * \retval STATUS_ERR_TIMEOUT  If no response was given within specified timeout
 *                             period
 */
enum status_code _i2c_master_wait_for_bus(
		struct i2c_master_module *const module)
{
    56a8:	b530      	push	{r4, r5, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    56aa:	6802      	ldr	r2, [r0, #0]

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
    56ac:	2300      	movs	r3, #0
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
    56ae:	2401      	movs	r4, #1
    56b0:	2502      	movs	r5, #2
    56b2:	7e11      	ldrb	r1, [r2, #24]
    56b4:	4221      	tst	r1, r4
    56b6:	d10b      	bne.n	56d0 <_i2c_master_wait_for_bus+0x28>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {
    56b8:	7e11      	ldrb	r1, [r2, #24]
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
    56ba:	4229      	tst	r1, r5
    56bc:	d106      	bne.n	56cc <_i2c_master_wait_for_bus+0x24>

		/* Check timeout condition. */
		if (++timeout_counter >= module->buffer_timeout) {
    56be:	3301      	adds	r3, #1
    56c0:	b29b      	uxth	r3, r3
    56c2:	8901      	ldrh	r1, [r0, #8]
    56c4:	4299      	cmp	r1, r3
    56c6:	d8f4      	bhi.n	56b2 <_i2c_master_wait_for_bus+0xa>
			return STATUS_ERR_TIMEOUT;
    56c8:	2012      	movs	r0, #18
    56ca:	e002      	b.n	56d2 <_i2c_master_wait_for_bus+0x2a>
		}
	}
	return STATUS_OK;
    56cc:	2000      	movs	r0, #0
    56ce:	e000      	b.n	56d2 <_i2c_master_wait_for_bus+0x2a>
    56d0:	2000      	movs	r0, #0
}
    56d2:	bd30      	pop	{r4, r5, pc}

000056d4 <_i2c_master_send_hs_master_code>:
 * \retval STATUS_OK           No error happen
 */
enum status_code _i2c_master_send_hs_master_code(
		struct i2c_master_module *const module,
		uint8_t hs_master_code)
{
    56d4:	b510      	push	{r4, lr}
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    56d6:	6804      	ldr	r4, [r0, #0]
	/* Return value. */
	enum status_code tmp_status;

	/* Set NACK for high speed code */
	i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    56d8:	6862      	ldr	r2, [r4, #4]
    56da:	2380      	movs	r3, #128	; 0x80
    56dc:	02db      	lsls	r3, r3, #11
    56de:	4313      	orrs	r3, r2
    56e0:	6063      	str	r3, [r4, #4]
	/* Send high speed code */
	i2c_module->ADDR.reg = hs_master_code;
    56e2:	6261      	str	r1, [r4, #36]	; 0x24
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
    56e4:	4b02      	ldr	r3, [pc, #8]	; (56f0 <_i2c_master_send_hs_master_code+0x1c>)
    56e6:	4798      	blx	r3
	/* Clear write interrupt flag */
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
    56e8:	2301      	movs	r3, #1
    56ea:	7623      	strb	r3, [r4, #24]

	return tmp_status;
}
    56ec:	bd10      	pop	{r4, pc}
    56ee:	46c0      	nop			; (mov r8, r8)
    56f0:	000056a9 	.word	0x000056a9

000056f4 <_i2c_master_read_packet>:
 *
 */
static enum status_code _i2c_master_read_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    56f4:	b5f0      	push	{r4, r5, r6, r7, lr}
    56f6:	46de      	mov	lr, fp
    56f8:	4657      	mov	r7, sl
    56fa:	464e      	mov	r6, r9
    56fc:	4645      	mov	r5, r8
    56fe:	b5e0      	push	{r5, r6, r7, lr}
    5700:	b083      	sub	sp, #12
    5702:	0006      	movs	r6, r0
    5704:	4689      	mov	r9, r1
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    5706:	6805      	ldr	r5, [r0, #0]

	/* Return value. */
	enum status_code tmp_status;
	uint16_t tmp_data_length = packet->data_length;
    5708:	884c      	ldrh	r4, [r1, #2]

	/* Written buffer counter. */
	uint16_t counter = 0;

	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
    570a:	682b      	ldr	r3, [r5, #0]
    570c:	011b      	lsls	r3, r3, #4
    570e:	0fdb      	lsrs	r3, r3, #31
    5710:	469a      	mov	sl, r3

	/* Switch to high speed mode */
	if (packet->high_speed) {
    5712:	7a4b      	ldrb	r3, [r1, #9]
    5714:	2b00      	cmp	r3, #0
    5716:	d12b      	bne.n	5770 <_i2c_master_read_packet+0x7c>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
	}

	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    5718:	686b      	ldr	r3, [r5, #4]
    571a:	4a58      	ldr	r2, [pc, #352]	; (587c <_i2c_master_read_packet+0x188>)
    571c:	4013      	ands	r3, r2
    571e:	606b      	str	r3, [r5, #4]

	/* Set address and direction bit. Will send start command on bus. */
	if (packet->ten_bit_address) {
    5720:	464b      	mov	r3, r9
    5722:	7a1b      	ldrb	r3, [r3, #8]
    5724:	2b00      	cmp	r3, #0
    5726:	d127      	bne.n	5778 <_i2c_master_read_packet+0x84>
				I2C_TRANSFER_READ;
		} else {
			return tmp_status;
		}
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
    5728:	464b      	mov	r3, r9
    572a:	881b      	ldrh	r3, [r3, #0]
    572c:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
    572e:	464a      	mov	r2, r9
    5730:	7a52      	ldrb	r2, [r2, #9]
    5732:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
    5734:	4313      	orrs	r3, r2
    5736:	2201      	movs	r2, #1
    5738:	4313      	orrs	r3, r2
    573a:	626b      	str	r3, [r5, #36]	; 0x24
	}

	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
    573c:	0030      	movs	r0, r6
    573e:	4b50      	ldr	r3, [pc, #320]	; (5880 <_i2c_master_read_packet+0x18c>)
    5740:	4798      	blx	r3
    5742:	9001      	str	r0, [sp, #4]

	/* Set action to ack or nack. */
	if ((sclsm_flag) && (packet->data_length == 1)) {
    5744:	4653      	mov	r3, sl
    5746:	2b00      	cmp	r3, #0
    5748:	d003      	beq.n	5752 <_i2c_master_read_packet+0x5e>
    574a:	464b      	mov	r3, r9
    574c:	885b      	ldrh	r3, [r3, #2]
    574e:	2b01      	cmp	r3, #1
    5750:	d03b      	beq.n	57ca <_i2c_master_read_packet+0xd6>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
	} else {
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;	
    5752:	686b      	ldr	r3, [r5, #4]
    5754:	4a49      	ldr	r2, [pc, #292]	; (587c <_i2c_master_read_packet+0x188>)
    5756:	4013      	ands	r3, r2
    5758:	606b      	str	r3, [r5, #4]
	}

	/* Check for address response error unless previous error is
	 * detected. */
	if (tmp_status == STATUS_OK) {
    575a:	9b01      	ldr	r3, [sp, #4]
    575c:	2b00      	cmp	r3, #0
    575e:	d03a      	beq.n	57d6 <_i2c_master_read_packet+0xe2>
		_i2c_master_wait_for_sync(module);
		packet->data[counter] = i2c_module->DATA.reg;
	}

	return tmp_status;
}
    5760:	9801      	ldr	r0, [sp, #4]
    5762:	b003      	add	sp, #12
    5764:	bc3c      	pop	{r2, r3, r4, r5}
    5766:	4690      	mov	r8, r2
    5768:	4699      	mov	r9, r3
    576a:	46a2      	mov	sl, r4
    576c:	46ab      	mov	fp, r5
    576e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
    5770:	7a89      	ldrb	r1, [r1, #10]
    5772:	4b44      	ldr	r3, [pc, #272]	; (5884 <_i2c_master_read_packet+0x190>)
    5774:	4798      	blx	r3
    5776:	e7cf      	b.n	5718 <_i2c_master_read_packet+0x24>
		i2c_module->ADDR.reg = (packet->address << 1) |
    5778:	464b      	mov	r3, r9
    577a:	881b      	ldrh	r3, [r3, #0]
    577c:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    577e:	464a      	mov	r2, r9
    5780:	7a52      	ldrb	r2, [r2, #9]
    5782:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) |
    5784:	4313      	orrs	r3, r2
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    5786:	2280      	movs	r2, #128	; 0x80
    5788:	0212      	lsls	r2, r2, #8
    578a:	4313      	orrs	r3, r2
		i2c_module->ADDR.reg = (packet->address << 1) |
    578c:	626b      	str	r3, [r5, #36]	; 0x24
		tmp_status = _i2c_master_wait_for_bus(module);
    578e:	0030      	movs	r0, r6
    5790:	4b3b      	ldr	r3, [pc, #236]	; (5880 <_i2c_master_read_packet+0x18c>)
    5792:	4798      	blx	r3
    5794:	9001      	str	r0, [sp, #4]
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    5796:	686b      	ldr	r3, [r5, #4]
    5798:	4a38      	ldr	r2, [pc, #224]	; (587c <_i2c_master_read_packet+0x188>)
    579a:	4013      	ands	r3, r2
    579c:	606b      	str	r3, [r5, #4]
		if (tmp_status == STATUS_OK) {
    579e:	2800      	cmp	r0, #0
    57a0:	d1de      	bne.n	5760 <_i2c_master_read_packet+0x6c>
			tmp_status = _i2c_master_address_response(module);
    57a2:	0030      	movs	r0, r6
    57a4:	4b38      	ldr	r3, [pc, #224]	; (5888 <_i2c_master_read_packet+0x194>)
    57a6:	4798      	blx	r3
    57a8:	9001      	str	r0, [sp, #4]
		if (tmp_status == STATUS_OK) {
    57aa:	2800      	cmp	r0, #0
    57ac:	d1d8      	bne.n	5760 <_i2c_master_read_packet+0x6c>
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
    57ae:	464b      	mov	r3, r9
    57b0:	881b      	ldrh	r3, [r3, #0]
    57b2:	0a1b      	lsrs	r3, r3, #8
    57b4:	2278      	movs	r2, #120	; 0x78
    57b6:	4313      	orrs	r3, r2
    57b8:	005b      	lsls	r3, r3, #1
				(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    57ba:	464a      	mov	r2, r9
    57bc:	7a52      	ldrb	r2, [r2, #9]
    57be:	0392      	lsls	r2, r2, #14
    57c0:	2101      	movs	r1, #1
    57c2:	430a      	orrs	r2, r1
    57c4:	4313      	orrs	r3, r2
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
    57c6:	626b      	str	r3, [r5, #36]	; 0x24
    57c8:	e7b8      	b.n	573c <_i2c_master_read_packet+0x48>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    57ca:	686a      	ldr	r2, [r5, #4]
    57cc:	2380      	movs	r3, #128	; 0x80
    57ce:	02db      	lsls	r3, r3, #11
    57d0:	4313      	orrs	r3, r2
    57d2:	606b      	str	r3, [r5, #4]
    57d4:	e7c1      	b.n	575a <_i2c_master_read_packet+0x66>
		tmp_status = _i2c_master_address_response(module);
    57d6:	0030      	movs	r0, r6
    57d8:	4b2b      	ldr	r3, [pc, #172]	; (5888 <_i2c_master_read_packet+0x194>)
    57da:	4798      	blx	r3
    57dc:	9001      	str	r0, [sp, #4]
	if (tmp_status == STATUS_OK) {
    57de:	2800      	cmp	r0, #0
    57e0:	d1be      	bne.n	5760 <_i2c_master_read_packet+0x6c>
    57e2:	3c01      	subs	r4, #1
    57e4:	b2a4      	uxth	r4, r4
    57e6:	4680      	mov	r8, r0
		while (tmp_data_length--) {
    57e8:	4b28      	ldr	r3, [pc, #160]	; (588c <_i2c_master_read_packet+0x198>)
    57ea:	469b      	mov	fp, r3
    57ec:	e015      	b.n	581a <_i2c_master_read_packet+0x126>
					((sclsm_flag) && (tmp_data_length == 1)))) {
    57ee:	2c01      	cmp	r4, #1
    57f0:	d020      	beq.n	5834 <_i2c_master_read_packet+0x140>
				_i2c_master_wait_for_sync(module);
    57f2:	0030      	movs	r0, r6
    57f4:	4b26      	ldr	r3, [pc, #152]	; (5890 <_i2c_master_read_packet+0x19c>)
    57f6:	4798      	blx	r3
				packet->data[counter++] = i2c_module->DATA.reg;
    57f8:	4643      	mov	r3, r8
    57fa:	1c5f      	adds	r7, r3, #1
    57fc:	b2bf      	uxth	r7, r7
    57fe:	2328      	movs	r3, #40	; 0x28
    5800:	5ceb      	ldrb	r3, [r5, r3]
    5802:	464a      	mov	r2, r9
    5804:	6852      	ldr	r2, [r2, #4]
    5806:	4641      	mov	r1, r8
    5808:	5453      	strb	r3, [r2, r1]
				tmp_status = _i2c_master_wait_for_bus(module);
    580a:	0030      	movs	r0, r6
    580c:	4b1c      	ldr	r3, [pc, #112]	; (5880 <_i2c_master_read_packet+0x18c>)
    580e:	4798      	blx	r3
    5810:	3c01      	subs	r4, #1
    5812:	b2a4      	uxth	r4, r4
			if (tmp_status != STATUS_OK) {
    5814:	2800      	cmp	r0, #0
    5816:	d115      	bne.n	5844 <_i2c_master_read_packet+0x150>
				packet->data[counter++] = i2c_module->DATA.reg;
    5818:	46b8      	mov	r8, r7
		while (tmp_data_length--) {
    581a:	455c      	cmp	r4, fp
    581c:	d014      	beq.n	5848 <_i2c_master_read_packet+0x154>
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
    581e:	8b6b      	ldrh	r3, [r5, #26]
    5820:	069b      	lsls	r3, r3, #26
    5822:	d527      	bpl.n	5874 <_i2c_master_read_packet+0x180>
			if (module->send_nack && (((!sclsm_flag) && (tmp_data_length == 0)) ||
    5824:	7af3      	ldrb	r3, [r6, #11]
    5826:	2b00      	cmp	r3, #0
    5828:	d0e3      	beq.n	57f2 <_i2c_master_read_packet+0xfe>
    582a:	4653      	mov	r3, sl
    582c:	2b00      	cmp	r3, #0
    582e:	d1de      	bne.n	57ee <_i2c_master_read_packet+0xfa>
    5830:	2c00      	cmp	r4, #0
    5832:	d1de      	bne.n	57f2 <_i2c_master_read_packet+0xfe>
				i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    5834:	686a      	ldr	r2, [r5, #4]
    5836:	2380      	movs	r3, #128	; 0x80
    5838:	02db      	lsls	r3, r3, #11
    583a:	4313      	orrs	r3, r2
    583c:	606b      	str	r3, [r5, #4]
    583e:	3c01      	subs	r4, #1
    5840:	b2a4      	uxth	r4, r4
    5842:	e7ea      	b.n	581a <_i2c_master_read_packet+0x126>
				packet->data[counter++] = i2c_module->DATA.reg;
    5844:	46b8      	mov	r8, r7
				tmp_status = _i2c_master_wait_for_bus(module);
    5846:	9001      	str	r0, [sp, #4]
		if (module->send_stop) {
    5848:	7ab3      	ldrb	r3, [r6, #10]
    584a:	2b00      	cmp	r3, #0
    584c:	d109      	bne.n	5862 <_i2c_master_read_packet+0x16e>
		_i2c_master_wait_for_sync(module);
    584e:	0030      	movs	r0, r6
    5850:	4b0f      	ldr	r3, [pc, #60]	; (5890 <_i2c_master_read_packet+0x19c>)
    5852:	4798      	blx	r3
		packet->data[counter] = i2c_module->DATA.reg;
    5854:	2328      	movs	r3, #40	; 0x28
    5856:	5cea      	ldrb	r2, [r5, r3]
    5858:	464b      	mov	r3, r9
    585a:	685b      	ldr	r3, [r3, #4]
    585c:	4641      	mov	r1, r8
    585e:	545a      	strb	r2, [r3, r1]
    5860:	e77e      	b.n	5760 <_i2c_master_read_packet+0x6c>
			_i2c_master_wait_for_sync(module);
    5862:	0030      	movs	r0, r6
    5864:	4b0a      	ldr	r3, [pc, #40]	; (5890 <_i2c_master_read_packet+0x19c>)
    5866:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    5868:	686a      	ldr	r2, [r5, #4]
    586a:	23c0      	movs	r3, #192	; 0xc0
    586c:	029b      	lsls	r3, r3, #10
    586e:	4313      	orrs	r3, r2
    5870:	606b      	str	r3, [r5, #4]
    5872:	e7ec      	b.n	584e <_i2c_master_read_packet+0x15a>
				return STATUS_ERR_PACKET_COLLISION;
    5874:	2341      	movs	r3, #65	; 0x41
    5876:	9301      	str	r3, [sp, #4]
    5878:	e772      	b.n	5760 <_i2c_master_read_packet+0x6c>
    587a:	46c0      	nop			; (mov r8, r8)
    587c:	fffbffff 	.word	0xfffbffff
    5880:	000056a9 	.word	0x000056a9
    5884:	000056d5 	.word	0x000056d5
    5888:	00005679 	.word	0x00005679
    588c:	0000ffff 	.word	0x0000ffff
    5890:	000052e9 	.word	0x000052e9

00005894 <_i2c_master_write_packet>:
 *                                      acknowledged the address
 */
static enum status_code _i2c_master_write_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    5894:	b5f0      	push	{r4, r5, r6, r7, lr}
    5896:	46de      	mov	lr, fp
    5898:	4657      	mov	r7, sl
    589a:	464e      	mov	r6, r9
    589c:	4645      	mov	r5, r8
    589e:	b5e0      	push	{r5, r6, r7, lr}
    58a0:	b083      	sub	sp, #12
    58a2:	0006      	movs	r6, r0
    58a4:	000f      	movs	r7, r1
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    58a6:	6805      	ldr	r5, [r0, #0]

	/* Return value. */
	enum status_code tmp_status;
	uint16_t tmp_data_length = packet->data_length;
    58a8:	884c      	ldrh	r4, [r1, #2]

	_i2c_master_wait_for_sync(module);
    58aa:	4b32      	ldr	r3, [pc, #200]	; (5974 <_i2c_master_write_packet+0xe0>)
    58ac:	4798      	blx	r3

	/* Switch to high speed mode */
	if (packet->high_speed) {
    58ae:	7a7b      	ldrb	r3, [r7, #9]
    58b0:	2b00      	cmp	r3, #0
    58b2:	d11d      	bne.n	58f0 <_i2c_master_write_packet+0x5c>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
	}

	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    58b4:	686b      	ldr	r3, [r5, #4]
    58b6:	4a30      	ldr	r2, [pc, #192]	; (5978 <_i2c_master_write_packet+0xe4>)
    58b8:	4013      	ands	r3, r2
    58ba:	606b      	str	r3, [r5, #4]

	/* Set address and direction bit. Will send start command on bus. */
	if (packet->ten_bit_address) {
    58bc:	7a3b      	ldrb	r3, [r7, #8]
    58be:	2b00      	cmp	r3, #0
    58c0:	d01b      	beq.n	58fa <_i2c_master_write_packet+0x66>
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    58c2:	883b      	ldrh	r3, [r7, #0]
    58c4:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    58c6:	7a7a      	ldrb	r2, [r7, #9]
    58c8:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    58ca:	4313      	orrs	r3, r2
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    58cc:	2280      	movs	r2, #128	; 0x80
    58ce:	0212      	lsls	r2, r2, #8
    58d0:	4313      	orrs	r3, r2
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    58d2:	626b      	str	r3, [r5, #36]	; 0x24
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
	}
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
    58d4:	0030      	movs	r0, r6
    58d6:	4b29      	ldr	r3, [pc, #164]	; (597c <_i2c_master_write_packet+0xe8>)
    58d8:	4798      	blx	r3
    58da:	9001      	str	r0, [sp, #4]

	/* Check for address response error unless previous error is
	 * detected. */
	if (tmp_status == STATUS_OK) {
    58dc:	2800      	cmp	r0, #0
    58de:	d013      	beq.n	5908 <_i2c_master_write_packet+0x74>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
		}
	}

	return tmp_status;
}
    58e0:	9801      	ldr	r0, [sp, #4]
    58e2:	b003      	add	sp, #12
    58e4:	bc3c      	pop	{r2, r3, r4, r5}
    58e6:	4690      	mov	r8, r2
    58e8:	4699      	mov	r9, r3
    58ea:	46a2      	mov	sl, r4
    58ec:	46ab      	mov	fp, r5
    58ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
    58f0:	7ab9      	ldrb	r1, [r7, #10]
    58f2:	0030      	movs	r0, r6
    58f4:	4b22      	ldr	r3, [pc, #136]	; (5980 <_i2c_master_write_packet+0xec>)
    58f6:	4798      	blx	r3
    58f8:	e7dc      	b.n	58b4 <_i2c_master_write_packet+0x20>
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    58fa:	883b      	ldrh	r3, [r7, #0]
    58fc:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
    58fe:	7a7a      	ldrb	r2, [r7, #9]
    5900:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    5902:	4313      	orrs	r3, r2
    5904:	626b      	str	r3, [r5, #36]	; 0x24
    5906:	e7e5      	b.n	58d4 <_i2c_master_write_packet+0x40>
		tmp_status = _i2c_master_address_response(module);
    5908:	0030      	movs	r0, r6
    590a:	4b1e      	ldr	r3, [pc, #120]	; (5984 <_i2c_master_write_packet+0xf0>)
    590c:	4798      	blx	r3
    590e:	1e03      	subs	r3, r0, #0
    5910:	9001      	str	r0, [sp, #4]
	if (tmp_status == STATUS_OK) {
    5912:	d1e5      	bne.n	58e0 <_i2c_master_write_packet+0x4c>
    5914:	46a0      	mov	r8, r4
    5916:	2400      	movs	r4, #0
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
    5918:	3320      	adds	r3, #32
    591a:	4699      	mov	r9, r3
			_i2c_master_wait_for_sync(module);
    591c:	4b15      	ldr	r3, [pc, #84]	; (5974 <_i2c_master_write_packet+0xe0>)
    591e:	469b      	mov	fp, r3
			tmp_status = _i2c_master_wait_for_bus(module);
    5920:	4b16      	ldr	r3, [pc, #88]	; (597c <_i2c_master_write_packet+0xe8>)
    5922:	469a      	mov	sl, r3
		while (tmp_data_length--) {
    5924:	4544      	cmp	r4, r8
    5926:	d015      	beq.n	5954 <_i2c_master_write_packet+0xc0>
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
    5928:	8b6b      	ldrh	r3, [r5, #26]
    592a:	464a      	mov	r2, r9
    592c:	4213      	tst	r3, r2
    592e:	d01d      	beq.n	596c <_i2c_master_write_packet+0xd8>
			_i2c_master_wait_for_sync(module);
    5930:	0030      	movs	r0, r6
    5932:	47d8      	blx	fp
			i2c_module->DATA.reg = packet->data[buffer_counter++];
    5934:	687b      	ldr	r3, [r7, #4]
    5936:	5d1a      	ldrb	r2, [r3, r4]
    5938:	2328      	movs	r3, #40	; 0x28
    593a:	54ea      	strb	r2, [r5, r3]
			tmp_status = _i2c_master_wait_for_bus(module);
    593c:	0030      	movs	r0, r6
    593e:	47d0      	blx	sl
			if (tmp_status != STATUS_OK) {
    5940:	2800      	cmp	r0, #0
    5942:	d106      	bne.n	5952 <_i2c_master_write_packet+0xbe>
			if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
    5944:	8b6b      	ldrh	r3, [r5, #26]
    5946:	3401      	adds	r4, #1
    5948:	075b      	lsls	r3, r3, #29
    594a:	d5eb      	bpl.n	5924 <_i2c_master_write_packet+0x90>
				tmp_status = STATUS_ERR_OVERFLOW;
    594c:	231e      	movs	r3, #30
    594e:	9301      	str	r3, [sp, #4]
    5950:	e000      	b.n	5954 <_i2c_master_write_packet+0xc0>
			tmp_status = _i2c_master_wait_for_bus(module);
    5952:	9001      	str	r0, [sp, #4]
		if (module->send_stop) {
    5954:	7ab3      	ldrb	r3, [r6, #10]
    5956:	2b00      	cmp	r3, #0
    5958:	d0c2      	beq.n	58e0 <_i2c_master_write_packet+0x4c>
			_i2c_master_wait_for_sync(module);
    595a:	0030      	movs	r0, r6
    595c:	4b05      	ldr	r3, [pc, #20]	; (5974 <_i2c_master_write_packet+0xe0>)
    595e:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    5960:	686a      	ldr	r2, [r5, #4]
    5962:	23c0      	movs	r3, #192	; 0xc0
    5964:	029b      	lsls	r3, r3, #10
    5966:	4313      	orrs	r3, r2
    5968:	606b      	str	r3, [r5, #4]
    596a:	e7b9      	b.n	58e0 <_i2c_master_write_packet+0x4c>
				return STATUS_ERR_PACKET_COLLISION;
    596c:	2341      	movs	r3, #65	; 0x41
    596e:	9301      	str	r3, [sp, #4]
    5970:	e7b6      	b.n	58e0 <_i2c_master_write_packet+0x4c>
    5972:	46c0      	nop			; (mov r8, r8)
    5974:	000052e9 	.word	0x000052e9
    5978:	fffbffff 	.word	0xfffbffff
    597c:	000056a9 	.word	0x000056a9
    5980:	000056d5 	.word	0x000056d5
    5984:	00005679 	.word	0x00005679

00005988 <i2c_master_read_packet_wait>:
{
    5988:	b510      	push	{r4, lr}
	if (module->buffer_remaining > 0) {
    598a:	8b83      	ldrh	r3, [r0, #28]
    598c:	b29b      	uxth	r3, r3
		return STATUS_BUSY;
    598e:	2205      	movs	r2, #5
	if (module->buffer_remaining > 0) {
    5990:	2b00      	cmp	r3, #0
    5992:	d001      	beq.n	5998 <i2c_master_read_packet_wait+0x10>
}
    5994:	0010      	movs	r0, r2
    5996:	bd10      	pop	{r4, pc}
	module->send_stop = true;
    5998:	3301      	adds	r3, #1
    599a:	7283      	strb	r3, [r0, #10]
	module->send_nack = true;
    599c:	72c3      	strb	r3, [r0, #11]
	return _i2c_master_read_packet(module, packet);
    599e:	4b02      	ldr	r3, [pc, #8]	; (59a8 <i2c_master_read_packet_wait+0x20>)
    59a0:	4798      	blx	r3
    59a2:	0002      	movs	r2, r0
    59a4:	e7f6      	b.n	5994 <i2c_master_read_packet_wait+0xc>
    59a6:	46c0      	nop			; (mov r8, r8)
    59a8:	000056f5 	.word	0x000056f5

000059ac <i2c_master_write_packet_wait>:
 *                                      last data sent
 */
enum status_code i2c_master_write_packet_wait(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    59ac:	b510      	push	{r4, lr}
	Assert(module->hw);
	Assert(packet);

#if I2C_MASTER_CALLBACK_MODE == true
	/* Check if the I2C module is busy with a job */
	if (module->buffer_remaining > 0) {
    59ae:	8b83      	ldrh	r3, [r0, #28]
    59b0:	b29b      	uxth	r3, r3
		return STATUS_BUSY;
    59b2:	2205      	movs	r2, #5
	if (module->buffer_remaining > 0) {
    59b4:	2b00      	cmp	r3, #0
    59b6:	d001      	beq.n	59bc <i2c_master_write_packet_wait+0x10>

	module->send_stop = true;
	module->send_nack = true;

	return _i2c_master_write_packet(module, packet);
}
    59b8:	0010      	movs	r0, r2
    59ba:	bd10      	pop	{r4, pc}
	module->send_stop = true;
    59bc:	3301      	adds	r3, #1
    59be:	7283      	strb	r3, [r0, #10]
	module->send_nack = true;
    59c0:	72c3      	strb	r3, [r0, #11]
	return _i2c_master_write_packet(module, packet);
    59c2:	4b02      	ldr	r3, [pc, #8]	; (59cc <i2c_master_write_packet_wait+0x20>)
    59c4:	4798      	blx	r3
    59c6:	0002      	movs	r2, r0
    59c8:	e7f6      	b.n	59b8 <i2c_master_write_packet_wait+0xc>
    59ca:	46c0      	nop			; (mov r8, r8)
    59cc:	00005895 	.word	0x00005895

000059d0 <_i2c_master_wait_for_sync>:
	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
    59d0:	6801      	ldr	r1, [r0, #0]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
    59d2:	2207      	movs	r2, #7
    59d4:	69cb      	ldr	r3, [r1, #28]
	while (i2c_master_is_syncing(module)) {
    59d6:	421a      	tst	r2, r3
    59d8:	d1fc      	bne.n	59d4 <_i2c_master_wait_for_sync+0x4>
}
    59da:	4770      	bx	lr

000059dc <_i2c_master_read>:
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_read(
		struct i2c_master_module *const module)
{
    59dc:	b570      	push	{r4, r5, r6, lr}
    59de:	0004      	movs	r4, r0
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    59e0:	6806      	ldr	r6, [r0, #0]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
    59e2:	6832      	ldr	r2, [r6, #0]

	/* Find index to save next value in buffer */
	uint16_t buffer_index = module->buffer_length;
    59e4:	8b45      	ldrh	r5, [r0, #26]
	buffer_index -= module->buffer_remaining;
    59e6:	8b83      	ldrh	r3, [r0, #28]
    59e8:	1aed      	subs	r5, r5, r3
    59ea:	b2ad      	uxth	r5, r5

	module->buffer_remaining--;
    59ec:	8b83      	ldrh	r3, [r0, #28]
    59ee:	3b01      	subs	r3, #1
    59f0:	b29b      	uxth	r3, r3
    59f2:	8383      	strh	r3, [r0, #28]

	if (sclsm_flag) {
    59f4:	0113      	lsls	r3, r2, #4
    59f6:	d51d      	bpl.n	5a34 <_i2c_master_read+0x58>
		if (module->send_nack && module->buffer_remaining == 1) {
    59f8:	7ac3      	ldrb	r3, [r0, #11]
    59fa:	2b00      	cmp	r3, #0
    59fc:	d003      	beq.n	5a06 <_i2c_master_read+0x2a>
    59fe:	8b83      	ldrh	r3, [r0, #28]
    5a00:	b29b      	uxth	r3, r3
    5a02:	2b01      	cmp	r3, #1
    5a04:	d010      	beq.n	5a28 <_i2c_master_read+0x4c>
			/* Set action to NACK. */
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
		}
	}

	if (module->buffer_remaining == 0) {
    5a06:	8ba3      	ldrh	r3, [r4, #28]
    5a08:	b29b      	uxth	r3, r3
    5a0a:	2b00      	cmp	r3, #0
    5a0c:	d102      	bne.n	5a14 <_i2c_master_read+0x38>
		if (module->send_stop) {
    5a0e:	7aa3      	ldrb	r3, [r4, #10]
    5a10:	2b00      	cmp	r3, #0
    5a12:	d11c      	bne.n	5a4e <_i2c_master_read+0x72>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
		}
	}
	
	/* Read byte from slave and put in buffer */
	_i2c_master_wait_for_sync(module);
    5a14:	0020      	movs	r0, r4
    5a16:	4b12      	ldr	r3, [pc, #72]	; (5a60 <_i2c_master_read+0x84>)
    5a18:	4798      	blx	r3
	module->buffer[buffer_index] = i2c_module->DATA.reg;
    5a1a:	6a23      	ldr	r3, [r4, #32]
    5a1c:	195d      	adds	r5, r3, r5
    5a1e:	2328      	movs	r3, #40	; 0x28
    5a20:	5cf3      	ldrb	r3, [r6, r3]
    5a22:	b2db      	uxtb	r3, r3
    5a24:	702b      	strb	r3, [r5, #0]
}
    5a26:	bd70      	pop	{r4, r5, r6, pc}
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    5a28:	6872      	ldr	r2, [r6, #4]
    5a2a:	2380      	movs	r3, #128	; 0x80
    5a2c:	02db      	lsls	r3, r3, #11
    5a2e:	4313      	orrs	r3, r2
    5a30:	6073      	str	r3, [r6, #4]
    5a32:	e7e8      	b.n	5a06 <_i2c_master_read+0x2a>
		if (module->send_nack && module->buffer_remaining == 0) {
    5a34:	7ac3      	ldrb	r3, [r0, #11]
    5a36:	2b00      	cmp	r3, #0
    5a38:	d0e5      	beq.n	5a06 <_i2c_master_read+0x2a>
    5a3a:	8b83      	ldrh	r3, [r0, #28]
    5a3c:	b29b      	uxth	r3, r3
    5a3e:	2b00      	cmp	r3, #0
    5a40:	d1e1      	bne.n	5a06 <_i2c_master_read+0x2a>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    5a42:	6872      	ldr	r2, [r6, #4]
    5a44:	2380      	movs	r3, #128	; 0x80
    5a46:	02db      	lsls	r3, r3, #11
    5a48:	4313      	orrs	r3, r2
    5a4a:	6073      	str	r3, [r6, #4]
    5a4c:	e7db      	b.n	5a06 <_i2c_master_read+0x2a>
			_i2c_master_wait_for_sync(module);
    5a4e:	0020      	movs	r0, r4
    5a50:	4b03      	ldr	r3, [pc, #12]	; (5a60 <_i2c_master_read+0x84>)
    5a52:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    5a54:	6872      	ldr	r2, [r6, #4]
    5a56:	23c0      	movs	r3, #192	; 0xc0
    5a58:	029b      	lsls	r3, r3, #10
    5a5a:	4313      	orrs	r3, r2
    5a5c:	6073      	str	r3, [r6, #4]
    5a5e:	e7d9      	b.n	5a14 <_i2c_master_read+0x38>
    5a60:	000059d1 	.word	0x000059d1

00005a64 <_i2c_master_write>:
 * Write next data. Used by interrupt handler to send next data byte to slave.
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_write(struct i2c_master_module *const module)
{
    5a64:	b570      	push	{r4, r5, r6, lr}
    5a66:	0004      	movs	r4, r0
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    5a68:	6805      	ldr	r5, [r0, #0]

	/* Check for ack from slave */
	if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK)
    5a6a:	8b6b      	ldrh	r3, [r5, #26]
    5a6c:	075b      	lsls	r3, r3, #29
    5a6e:	d503      	bpl.n	5a78 <_i2c_master_write+0x14>
	{
		/* Set status */
		module->status = STATUS_ERR_OVERFLOW;
    5a70:	221e      	movs	r2, #30
    5a72:	2325      	movs	r3, #37	; 0x25
    5a74:	54c2      	strb	r2, [r0, r3]
	module->buffer_remaining--;

	/* Write byte from buffer to slave */
	_i2c_master_wait_for_sync(module);
	i2c_module->DATA.reg = module->buffer[buffer_index];
}
    5a76:	bd70      	pop	{r4, r5, r6, pc}
	uint16_t buffer_index = module->buffer_length;
    5a78:	8b46      	ldrh	r6, [r0, #26]
	buffer_index -= module->buffer_remaining;
    5a7a:	8b83      	ldrh	r3, [r0, #28]
    5a7c:	1af6      	subs	r6, r6, r3
    5a7e:	b2b6      	uxth	r6, r6
	module->buffer_remaining--;
    5a80:	8b83      	ldrh	r3, [r0, #28]
    5a82:	3b01      	subs	r3, #1
    5a84:	b29b      	uxth	r3, r3
    5a86:	8383      	strh	r3, [r0, #28]
	_i2c_master_wait_for_sync(module);
    5a88:	4b04      	ldr	r3, [pc, #16]	; (5a9c <_i2c_master_write+0x38>)
    5a8a:	4798      	blx	r3
	i2c_module->DATA.reg = module->buffer[buffer_index];
    5a8c:	6a23      	ldr	r3, [r4, #32]
    5a8e:	199e      	adds	r6, r3, r6
    5a90:	7833      	ldrb	r3, [r6, #0]
    5a92:	b2db      	uxtb	r3, r3
    5a94:	2228      	movs	r2, #40	; 0x28
    5a96:	54ab      	strb	r3, [r5, r2]
    5a98:	e7ed      	b.n	5a76 <_i2c_master_write+0x12>
    5a9a:	46c0      	nop			; (mov r8, r8)
    5a9c:	000059d1 	.word	0x000059d1

00005aa0 <_i2c_master_interrupt_handler>:
 *
 * \param[in] instance  SERCOM instance that triggered the interrupt
 */
void _i2c_master_interrupt_handler(
		uint8_t instance)
{
    5aa0:	b570      	push	{r4, r5, r6, lr}
	/* Get software module for callback handling */
	struct i2c_master_module *module =
    5aa2:	0080      	lsls	r0, r0, #2
    5aa4:	4b75      	ldr	r3, [pc, #468]	; (5c7c <_i2c_master_interrupt_handler+0x1dc>)
    5aa6:	58c4      	ldr	r4, [r0, r3]
			(struct i2c_master_module*)_sercom_instances[instance];

	Assert(module);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    5aa8:	6825      	ldr	r5, [r4, #0]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
    5aaa:	682b      	ldr	r3, [r5, #0]
    5aac:	011b      	lsls	r3, r3, #4
    5aae:	0fda      	lsrs	r2, r3, #31

	/* Combine callback registered and enabled masks */
	uint8_t callback_mask = module->enabled_callback;
    5ab0:	7e63      	ldrb	r3, [r4, #25]
	callback_mask &= module->registered_callback;
    5ab2:	7e26      	ldrb	r6, [r4, #24]
    5ab4:	401e      	ands	r6, r3

	/* Check if the module should respond to address ack */
	if ((module->buffer_length <= 0) && (module->buffer_remaining > 0)) {
    5ab6:	8b63      	ldrh	r3, [r4, #26]
    5ab8:	b29b      	uxth	r3, r3
    5aba:	2b00      	cmp	r3, #0
    5abc:	d103      	bne.n	5ac6 <_i2c_master_interrupt_handler+0x26>
    5abe:	8ba3      	ldrh	r3, [r4, #28]
    5ac0:	b29b      	uxth	r3, r3
    5ac2:	2b00      	cmp	r3, #0
    5ac4:	d123      	bne.n	5b0e <_i2c_master_interrupt_handler+0x6e>
		/* Call function for address response */
		_i2c_master_async_address_response(module);

	/* Check if buffer write is done */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
    5ac6:	8b63      	ldrh	r3, [r4, #26]
    5ac8:	b29b      	uxth	r3, r3
    5aca:	2b00      	cmp	r3, #0
    5acc:	d008      	beq.n	5ae0 <_i2c_master_interrupt_handler+0x40>
    5ace:	8ba3      	ldrh	r3, [r4, #28]
    5ad0:	b29b      	uxth	r3, r3
    5ad2:	2b00      	cmp	r3, #0
    5ad4:	d104      	bne.n	5ae0 <_i2c_master_interrupt_handler+0x40>
			(module->status == STATUS_BUSY) &&
    5ad6:	3325      	adds	r3, #37	; 0x25
    5ad8:	5ce3      	ldrb	r3, [r4, r3]
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
    5ada:	2b05      	cmp	r3, #5
    5adc:	d100      	bne.n	5ae0 <_i2c_master_interrupt_handler+0x40>
    5ade:	e06d      	b.n	5bbc <_i2c_master_interrupt_handler+0x11c>
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE)) {
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
		}

	/* Continue buffer write/read */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining > 0)){
    5ae0:	8b63      	ldrh	r3, [r4, #26]
    5ae2:	b29b      	uxth	r3, r3
    5ae4:	2b00      	cmp	r3, #0
    5ae6:	d024      	beq.n	5b32 <_i2c_master_interrupt_handler+0x92>
    5ae8:	8ba3      	ldrh	r3, [r4, #28]
    5aea:	b29b      	uxth	r3, r3
    5aec:	2b00      	cmp	r3, #0
    5aee:	d020      	beq.n	5b32 <_i2c_master_interrupt_handler+0x92>
		/* Check that bus ownership is not lost */
		if ((!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) &&
    5af0:	8b6b      	ldrh	r3, [r5, #26]
    5af2:	069b      	lsls	r3, r3, #26
    5af4:	d500      	bpl.n	5af8 <_i2c_master_interrupt_handler+0x58>
    5af6:	e081      	b.n	5bfc <_i2c_master_interrupt_handler+0x15c>
    5af8:	2a00      	cmp	r2, #0
    5afa:	d004      	beq.n	5b06 <_i2c_master_interrupt_handler+0x66>
				(!(sclsm_flag && (module->buffer_remaining == 1))))	{
    5afc:	8ba3      	ldrh	r3, [r4, #28]
    5afe:	b29b      	uxth	r3, r3
    5b00:	2b01      	cmp	r3, #1
    5b02:	d100      	bne.n	5b06 <_i2c_master_interrupt_handler+0x66>
    5b04:	e07a      	b.n	5bfc <_i2c_master_interrupt_handler+0x15c>
			module->status = STATUS_ERR_PACKET_COLLISION;
    5b06:	2241      	movs	r2, #65	; 0x41
    5b08:	2325      	movs	r3, #37	; 0x25
    5b0a:	54e2      	strb	r2, [r4, r3]
    5b0c:	e011      	b.n	5b32 <_i2c_master_interrupt_handler+0x92>
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB)
    5b0e:	7e2b      	ldrb	r3, [r5, #24]
    5b10:	07db      	lsls	r3, r3, #31
    5b12:	d507      	bpl.n	5b24 <_i2c_master_interrupt_handler+0x84>
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
    5b14:	2301      	movs	r3, #1
    5b16:	762b      	strb	r3, [r5, #24]
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
    5b18:	8b6b      	ldrh	r3, [r5, #26]
    5b1a:	079b      	lsls	r3, r3, #30
    5b1c:	d52e      	bpl.n	5b7c <_i2c_master_interrupt_handler+0xdc>
			module->status = STATUS_ERR_PACKET_COLLISION;
    5b1e:	2241      	movs	r2, #65	; 0x41
    5b20:	2325      	movs	r3, #37	; 0x25
    5b22:	54e2      	strb	r2, [r4, r3]
	module->buffer_length = module->buffer_remaining;
    5b24:	8ba3      	ldrh	r3, [r4, #28]
    5b26:	b29b      	uxth	r3, r3
    5b28:	8363      	strh	r3, [r4, #26]
	if (module->status == STATUS_BUSY) {
    5b2a:	2325      	movs	r3, #37	; 0x25
    5b2c:	5ce3      	ldrb	r3, [r4, r3]
    5b2e:	2b05      	cmp	r3, #5
    5b30:	d038      	beq.n	5ba4 <_i2c_master_interrupt_handler+0x104>
			_i2c_master_read(module);
		}
	}

	/* Check if read buffer transfer is complete */
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
    5b32:	8b63      	ldrh	r3, [r4, #26]
    5b34:	b29b      	uxth	r3, r3
    5b36:	2b00      	cmp	r3, #0
    5b38:	d007      	beq.n	5b4a <_i2c_master_interrupt_handler+0xaa>
    5b3a:	8ba3      	ldrh	r3, [r4, #28]
    5b3c:	b29b      	uxth	r3, r3
    5b3e:	2b00      	cmp	r3, #0
    5b40:	d103      	bne.n	5b4a <_i2c_master_interrupt_handler+0xaa>
			(module->status == STATUS_BUSY) &&
    5b42:	3325      	adds	r3, #37	; 0x25
    5b44:	5ce3      	ldrb	r3, [r4, r3]
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
    5b46:	2b05      	cmp	r3, #5
    5b48:	d064      	beq.n	5c14 <_i2c_master_interrupt_handler+0x174>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
		}
	}

	/* Check for error */
	if ((module->status != STATUS_BUSY) && (module->status != STATUS_OK)) {
    5b4a:	2325      	movs	r3, #37	; 0x25
    5b4c:	5ce3      	ldrb	r3, [r4, r3]
    5b4e:	2b05      	cmp	r3, #5
    5b50:	d013      	beq.n	5b7a <_i2c_master_interrupt_handler+0xda>
    5b52:	2325      	movs	r3, #37	; 0x25
    5b54:	5ce3      	ldrb	r3, [r4, r3]
    5b56:	2b00      	cmp	r3, #0
    5b58:	d00f      	beq.n	5b7a <_i2c_master_interrupt_handler+0xda>
		/* Stop packet operation */
		i2c_module->INTENCLR.reg = SERCOM_I2CM_INTENCLR_MB |
    5b5a:	2303      	movs	r3, #3
    5b5c:	752b      	strb	r3, [r5, #20]
				SERCOM_I2CM_INTENCLR_SB;

		module->buffer_length = 0;
    5b5e:	2300      	movs	r3, #0
    5b60:	8363      	strh	r3, [r4, #26]
		module->buffer_remaining = 0;
    5b62:	83a3      	strh	r3, [r4, #28]

		/* Send nack and stop command unless arbitration is lost */
		if ((module->status != STATUS_ERR_PACKET_COLLISION) &&
    5b64:	3325      	adds	r3, #37	; 0x25
    5b66:	5ce3      	ldrb	r3, [r4, r3]
    5b68:	2b41      	cmp	r3, #65	; 0x41
    5b6a:	d003      	beq.n	5b74 <_i2c_master_interrupt_handler+0xd4>
    5b6c:	7aa3      	ldrb	r3, [r4, #10]
    5b6e:	2b00      	cmp	r3, #0
    5b70:	d000      	beq.n	5b74 <_i2c_master_interrupt_handler+0xd4>
    5b72:	e075      	b.n	5c60 <_i2c_master_interrupt_handler+0x1c0>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT |
					SERCOM_I2CM_CTRLB_CMD(3);
		}

		/* Call error callback if enabled and registered */
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_ERROR)) {
    5b74:	0773      	lsls	r3, r6, #29
    5b76:	d500      	bpl.n	5b7a <_i2c_master_interrupt_handler+0xda>
    5b78:	e07b      	b.n	5c72 <_i2c_master_interrupt_handler+0x1d2>
			module->callbacks[I2C_MASTER_CALLBACK_ERROR](module);
		}
	}
}
    5b7a:	bd70      	pop	{r4, r5, r6, pc}
		else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
    5b7c:	8b6b      	ldrh	r3, [r5, #26]
    5b7e:	075b      	lsls	r3, r3, #29
    5b80:	d5d0      	bpl.n	5b24 <_i2c_master_interrupt_handler+0x84>
			module->status           = STATUS_ERR_BAD_ADDRESS;
    5b82:	2218      	movs	r2, #24
    5b84:	2325      	movs	r3, #37	; 0x25
    5b86:	54e2      	strb	r2, [r4, r3]
			module->buffer_remaining = 0;
    5b88:	2300      	movs	r3, #0
    5b8a:	83a3      	strh	r3, [r4, #28]
			if (module->send_stop) {
    5b8c:	7aa3      	ldrb	r3, [r4, #10]
    5b8e:	2b00      	cmp	r3, #0
    5b90:	d0c8      	beq.n	5b24 <_i2c_master_interrupt_handler+0x84>
				_i2c_master_wait_for_sync(module);
    5b92:	0020      	movs	r0, r4
    5b94:	4b3a      	ldr	r3, [pc, #232]	; (5c80 <_i2c_master_interrupt_handler+0x1e0>)
    5b96:	4798      	blx	r3
				i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    5b98:	686a      	ldr	r2, [r5, #4]
    5b9a:	23c0      	movs	r3, #192	; 0xc0
    5b9c:	029b      	lsls	r3, r3, #10
    5b9e:	4313      	orrs	r3, r2
    5ba0:	606b      	str	r3, [r5, #4]
    5ba2:	e7bf      	b.n	5b24 <_i2c_master_interrupt_handler+0x84>
		if (module->transfer_direction == I2C_TRANSFER_WRITE) {
    5ba4:	331f      	adds	r3, #31
    5ba6:	5ce3      	ldrb	r3, [r4, r3]
    5ba8:	2b00      	cmp	r3, #0
    5baa:	d003      	beq.n	5bb4 <_i2c_master_interrupt_handler+0x114>
			_i2c_master_read(module);
    5bac:	0020      	movs	r0, r4
    5bae:	4b35      	ldr	r3, [pc, #212]	; (5c84 <_i2c_master_interrupt_handler+0x1e4>)
    5bb0:	4798      	blx	r3
    5bb2:	e7be      	b.n	5b32 <_i2c_master_interrupt_handler+0x92>
			_i2c_master_write(module);
    5bb4:	0020      	movs	r0, r4
    5bb6:	4b34      	ldr	r3, [pc, #208]	; (5c88 <_i2c_master_interrupt_handler+0x1e8>)
    5bb8:	4798      	blx	r3
    5bba:	e7ba      	b.n	5b32 <_i2c_master_interrupt_handler+0x92>
			(module->transfer_direction == I2C_TRANSFER_WRITE)) {
    5bbc:	331f      	adds	r3, #31
    5bbe:	5ce3      	ldrb	r3, [r4, r3]
			(module->status == STATUS_BUSY) &&
    5bc0:	2b00      	cmp	r3, #0
    5bc2:	d000      	beq.n	5bc6 <_i2c_master_interrupt_handler+0x126>
    5bc4:	e78c      	b.n	5ae0 <_i2c_master_interrupt_handler+0x40>
		i2c_module->INTENCLR.reg =
    5bc6:	3303      	adds	r3, #3
    5bc8:	752b      	strb	r3, [r5, #20]
		module->buffer_length = 0;
    5bca:	2300      	movs	r3, #0
    5bcc:	8363      	strh	r3, [r4, #26]
		module->status        = STATUS_OK;
    5bce:	3325      	adds	r3, #37	; 0x25
    5bd0:	2200      	movs	r2, #0
    5bd2:	54e2      	strb	r2, [r4, r3]
		if (module->send_stop) {
    5bd4:	7aa3      	ldrb	r3, [r4, #10]
    5bd6:	2b00      	cmp	r3, #0
    5bd8:	d107      	bne.n	5bea <_i2c_master_interrupt_handler+0x14a>
			i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
    5bda:	2301      	movs	r3, #1
    5bdc:	762b      	strb	r3, [r5, #24]
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE)) {
    5bde:	07f3      	lsls	r3, r6, #31
    5be0:	d5a7      	bpl.n	5b32 <_i2c_master_interrupt_handler+0x92>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
    5be2:	68e3      	ldr	r3, [r4, #12]
    5be4:	0020      	movs	r0, r4
    5be6:	4798      	blx	r3
    5be8:	e7a3      	b.n	5b32 <_i2c_master_interrupt_handler+0x92>
			_i2c_master_wait_for_sync(module);
    5bea:	0020      	movs	r0, r4
    5bec:	4b24      	ldr	r3, [pc, #144]	; (5c80 <_i2c_master_interrupt_handler+0x1e0>)
    5bee:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    5bf0:	686a      	ldr	r2, [r5, #4]
    5bf2:	23c0      	movs	r3, #192	; 0xc0
    5bf4:	029b      	lsls	r3, r3, #10
    5bf6:	4313      	orrs	r3, r2
    5bf8:	606b      	str	r3, [r5, #4]
    5bfa:	e7f0      	b.n	5bde <_i2c_master_interrupt_handler+0x13e>
		} else if (module->transfer_direction == I2C_TRANSFER_WRITE) {
    5bfc:	2324      	movs	r3, #36	; 0x24
    5bfe:	5ce3      	ldrb	r3, [r4, r3]
    5c00:	2b00      	cmp	r3, #0
    5c02:	d103      	bne.n	5c0c <_i2c_master_interrupt_handler+0x16c>
			_i2c_master_write(module);
    5c04:	0020      	movs	r0, r4
    5c06:	4b20      	ldr	r3, [pc, #128]	; (5c88 <_i2c_master_interrupt_handler+0x1e8>)
    5c08:	4798      	blx	r3
    5c0a:	e792      	b.n	5b32 <_i2c_master_interrupt_handler+0x92>
			_i2c_master_read(module);
    5c0c:	0020      	movs	r0, r4
    5c0e:	4b1d      	ldr	r3, [pc, #116]	; (5c84 <_i2c_master_interrupt_handler+0x1e4>)
    5c10:	4798      	blx	r3
    5c12:	e78e      	b.n	5b32 <_i2c_master_interrupt_handler+0x92>
			(module->transfer_direction == I2C_TRANSFER_READ)) {
    5c14:	331f      	adds	r3, #31
    5c16:	5ce3      	ldrb	r3, [r4, r3]
			(module->status == STATUS_BUSY) &&
    5c18:	2b01      	cmp	r3, #1
    5c1a:	d196      	bne.n	5b4a <_i2c_master_interrupt_handler+0xaa>
		if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
    5c1c:	7e2b      	ldrb	r3, [r5, #24]
    5c1e:	079b      	lsls	r3, r3, #30
    5c20:	d501      	bpl.n	5c26 <_i2c_master_interrupt_handler+0x186>
			i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    5c22:	2302      	movs	r3, #2
    5c24:	762b      	strb	r3, [r5, #24]
		i2c_module->INTENCLR.reg =
    5c26:	2303      	movs	r3, #3
    5c28:	752b      	strb	r3, [r5, #20]
		module->buffer_length = 0;
    5c2a:	2300      	movs	r3, #0
    5c2c:	8363      	strh	r3, [r4, #26]
		module->status        = STATUS_OK;
    5c2e:	3325      	adds	r3, #37	; 0x25
    5c30:	2200      	movs	r2, #0
    5c32:	54e2      	strb	r2, [r4, r3]
		if ((callback_mask & (1 << I2C_MASTER_CALLBACK_READ_COMPLETE))
    5c34:	07b3      	lsls	r3, r6, #30
    5c36:	d503      	bpl.n	5c40 <_i2c_master_interrupt_handler+0x1a0>
				&& (module->transfer_direction == I2C_TRANSFER_READ)) {
    5c38:	2324      	movs	r3, #36	; 0x24
    5c3a:	5ce3      	ldrb	r3, [r4, r3]
    5c3c:	2b01      	cmp	r3, #1
    5c3e:	d00b      	beq.n	5c58 <_i2c_master_interrupt_handler+0x1b8>
		} else if ((callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE))
    5c40:	07f3      	lsls	r3, r6, #31
    5c42:	d400      	bmi.n	5c46 <_i2c_master_interrupt_handler+0x1a6>
    5c44:	e781      	b.n	5b4a <_i2c_master_interrupt_handler+0xaa>
				&& (module->transfer_direction == I2C_TRANSFER_WRITE)) {
    5c46:	2324      	movs	r3, #36	; 0x24
    5c48:	5ce3      	ldrb	r3, [r4, r3]
    5c4a:	2b00      	cmp	r3, #0
    5c4c:	d000      	beq.n	5c50 <_i2c_master_interrupt_handler+0x1b0>
    5c4e:	e77c      	b.n	5b4a <_i2c_master_interrupt_handler+0xaa>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
    5c50:	68e3      	ldr	r3, [r4, #12]
    5c52:	0020      	movs	r0, r4
    5c54:	4798      	blx	r3
    5c56:	e778      	b.n	5b4a <_i2c_master_interrupt_handler+0xaa>
			module->callbacks[I2C_MASTER_CALLBACK_READ_COMPLETE](module);
    5c58:	6923      	ldr	r3, [r4, #16]
    5c5a:	0020      	movs	r0, r4
    5c5c:	4798      	blx	r3
    5c5e:	e774      	b.n	5b4a <_i2c_master_interrupt_handler+0xaa>
			_i2c_master_wait_for_sync(module);
    5c60:	0020      	movs	r0, r4
    5c62:	4b07      	ldr	r3, [pc, #28]	; (5c80 <_i2c_master_interrupt_handler+0x1e0>)
    5c64:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT |
    5c66:	686a      	ldr	r2, [r5, #4]
    5c68:	23e0      	movs	r3, #224	; 0xe0
    5c6a:	02db      	lsls	r3, r3, #11
    5c6c:	4313      	orrs	r3, r2
    5c6e:	606b      	str	r3, [r5, #4]
    5c70:	e780      	b.n	5b74 <_i2c_master_interrupt_handler+0xd4>
			module->callbacks[I2C_MASTER_CALLBACK_ERROR](module);
    5c72:	6963      	ldr	r3, [r4, #20]
    5c74:	0020      	movs	r0, r4
    5c76:	4798      	blx	r3
}
    5c78:	e77f      	b.n	5b7a <_i2c_master_interrupt_handler+0xda>
    5c7a:	46c0      	nop			; (mov r8, r8)
    5c7c:	20002238 	.word	0x20002238
    5c80:	000059d1 	.word	0x000059d1
    5c84:	000059dd 	.word	0x000059dd
    5c88:	00005a65 	.word	0x00005a65

00005c8c <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
    5c8c:	b5f0      	push	{r4, r5, r6, r7, lr}
    5c8e:	46de      	mov	lr, fp
    5c90:	4657      	mov	r7, sl
    5c92:	464e      	mov	r6, r9
    5c94:	4645      	mov	r5, r8
    5c96:	b5e0      	push	{r5, r6, r7, lr}
    5c98:	b087      	sub	sp, #28
    5c9a:	4680      	mov	r8, r0
    5c9c:	9104      	str	r1, [sp, #16]
    5c9e:	0016      	movs	r6, r2
    5ca0:	001f      	movs	r7, r3
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
    5ca2:	2200      	movs	r2, #0
    5ca4:	2300      	movs	r3, #0
    5ca6:	2100      	movs	r1, #0
    5ca8:	468b      	mov	fp, r1
	for (i = 63; i >= 0; i--) {
    5caa:	243f      	movs	r4, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
    5cac:	2001      	movs	r0, #1
    5cae:	0021      	movs	r1, r4
    5cb0:	9600      	str	r6, [sp, #0]
    5cb2:	9701      	str	r7, [sp, #4]
    5cb4:	465c      	mov	r4, fp
    5cb6:	9403      	str	r4, [sp, #12]
    5cb8:	4644      	mov	r4, r8
    5cba:	9405      	str	r4, [sp, #20]
    5cbc:	e013      	b.n	5ce6 <long_division+0x5a>
    5cbe:	2420      	movs	r4, #32
    5cc0:	1a64      	subs	r4, r4, r1
    5cc2:	0005      	movs	r5, r0
    5cc4:	40e5      	lsrs	r5, r4
    5cc6:	46a8      	mov	r8, r5
    5cc8:	e014      	b.n	5cf4 <long_division+0x68>
		if (n & bit_shift) {
			r |= 0x01;
		}

		if (r >= d) {
			r = r - d;
    5cca:	9c00      	ldr	r4, [sp, #0]
    5ccc:	9d01      	ldr	r5, [sp, #4]
    5cce:	1b12      	subs	r2, r2, r4
    5cd0:	41ab      	sbcs	r3, r5
			q |= bit_shift;
    5cd2:	465c      	mov	r4, fp
    5cd4:	464d      	mov	r5, r9
    5cd6:	432c      	orrs	r4, r5
    5cd8:	46a3      	mov	fp, r4
    5cda:	9c03      	ldr	r4, [sp, #12]
    5cdc:	4645      	mov	r5, r8
    5cde:	432c      	orrs	r4, r5
    5ce0:	9403      	str	r4, [sp, #12]
	for (i = 63; i >= 0; i--) {
    5ce2:	3901      	subs	r1, #1
    5ce4:	d325      	bcc.n	5d32 <long_division+0xa6>
		bit_shift = (uint64_t)1 << i;
    5ce6:	2420      	movs	r4, #32
    5ce8:	4264      	negs	r4, r4
    5cea:	190c      	adds	r4, r1, r4
    5cec:	d4e7      	bmi.n	5cbe <long_division+0x32>
    5cee:	0005      	movs	r5, r0
    5cf0:	40a5      	lsls	r5, r4
    5cf2:	46a8      	mov	r8, r5
    5cf4:	0004      	movs	r4, r0
    5cf6:	408c      	lsls	r4, r1
    5cf8:	46a1      	mov	r9, r4
		r = r << 1;
    5cfa:	1892      	adds	r2, r2, r2
    5cfc:	415b      	adcs	r3, r3
    5cfe:	0014      	movs	r4, r2
    5d00:	001d      	movs	r5, r3
		if (n & bit_shift) {
    5d02:	9e05      	ldr	r6, [sp, #20]
    5d04:	464f      	mov	r7, r9
    5d06:	403e      	ands	r6, r7
    5d08:	46b4      	mov	ip, r6
    5d0a:	9e04      	ldr	r6, [sp, #16]
    5d0c:	4647      	mov	r7, r8
    5d0e:	403e      	ands	r6, r7
    5d10:	46b2      	mov	sl, r6
    5d12:	4666      	mov	r6, ip
    5d14:	4657      	mov	r7, sl
    5d16:	433e      	orrs	r6, r7
    5d18:	d003      	beq.n	5d22 <long_division+0x96>
			r |= 0x01;
    5d1a:	0006      	movs	r6, r0
    5d1c:	4326      	orrs	r6, r4
    5d1e:	0032      	movs	r2, r6
    5d20:	002b      	movs	r3, r5
		if (r >= d) {
    5d22:	9c00      	ldr	r4, [sp, #0]
    5d24:	9d01      	ldr	r5, [sp, #4]
    5d26:	429d      	cmp	r5, r3
    5d28:	d8db      	bhi.n	5ce2 <long_division+0x56>
    5d2a:	d1ce      	bne.n	5cca <long_division+0x3e>
    5d2c:	4294      	cmp	r4, r2
    5d2e:	d8d8      	bhi.n	5ce2 <long_division+0x56>
    5d30:	e7cb      	b.n	5cca <long_division+0x3e>
    5d32:	9b03      	ldr	r3, [sp, #12]
		}
	}

	return q;
}
    5d34:	4658      	mov	r0, fp
    5d36:	0019      	movs	r1, r3
    5d38:	b007      	add	sp, #28
    5d3a:	bc3c      	pop	{r2, r3, r4, r5}
    5d3c:	4690      	mov	r8, r2
    5d3e:	4699      	mov	r9, r3
    5d40:	46a2      	mov	sl, r4
    5d42:	46ab      	mov	fp, r5
    5d44:	bdf0      	pop	{r4, r5, r6, r7, pc}

00005d46 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
    5d46:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
    5d48:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    5d4a:	2340      	movs	r3, #64	; 0x40
    5d4c:	2400      	movs	r4, #0
	if (baudrate > (external_clock / 2)) {
    5d4e:	4281      	cmp	r1, r0
    5d50:	d202      	bcs.n	5d58 <_sercom_get_sync_baud_val+0x12>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
		return STATUS_OK;
	}
}
    5d52:	0018      	movs	r0, r3
    5d54:	bd10      	pop	{r4, pc}
		baud_calculated++;
    5d56:	001c      	movs	r4, r3
		clock_value = clock_value - baudrate;
    5d58:	1a09      	subs	r1, r1, r0
		baud_calculated++;
    5d5a:	1c63      	adds	r3, r4, #1
    5d5c:	b29b      	uxth	r3, r3
	while (clock_value >= baudrate) {
    5d5e:	4288      	cmp	r0, r1
    5d60:	d9f9      	bls.n	5d56 <_sercom_get_sync_baud_val+0x10>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    5d62:	2340      	movs	r3, #64	; 0x40
	if (baud_calculated > 0xFF) {
    5d64:	2cff      	cmp	r4, #255	; 0xff
    5d66:	d8f4      	bhi.n	5d52 <_sercom_get_sync_baud_val+0xc>
		*baudvalue = baud_calculated;
    5d68:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
    5d6a:	2300      	movs	r3, #0
    5d6c:	e7f1      	b.n	5d52 <_sercom_get_sync_baud_val+0xc>
	...

00005d70 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
    5d70:	b5f0      	push	{r4, r5, r6, r7, lr}
    5d72:	b083      	sub	sp, #12
    5d74:	000f      	movs	r7, r1
    5d76:	0016      	movs	r6, r2
    5d78:	aa08      	add	r2, sp, #32
    5d7a:	7811      	ldrb	r1, [r2, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
    5d7c:	0004      	movs	r4, r0
    5d7e:	434c      	muls	r4, r1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    5d80:	2240      	movs	r2, #64	; 0x40
	if ((baudrate * sample_num) > peripheral_clock) {
    5d82:	42bc      	cmp	r4, r7
    5d84:	d902      	bls.n	5d8c <_sercom_get_async_baud_val+0x1c>
		baud_calculated = baud_int | (baud_fp << 13);
	}

	*baudval = baud_calculated;
	return STATUS_OK;
}
    5d86:	0010      	movs	r0, r2
    5d88:	b003      	add	sp, #12
    5d8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
    5d8c:	2b00      	cmp	r3, #0
    5d8e:	d114      	bne.n	5dba <_sercom_get_async_baud_val+0x4a>
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
    5d90:	0002      	movs	r2, r0
    5d92:	0008      	movs	r0, r1
    5d94:	2100      	movs	r1, #0
    5d96:	4c19      	ldr	r4, [pc, #100]	; (5dfc <_sercom_get_async_baud_val+0x8c>)
    5d98:	47a0      	blx	r4
    5d9a:	0001      	movs	r1, r0
		ratio = long_division(temp1, peripheral_clock);
    5d9c:	003a      	movs	r2, r7
    5d9e:	2300      	movs	r3, #0
    5da0:	2000      	movs	r0, #0
    5da2:	4c17      	ldr	r4, [pc, #92]	; (5e00 <_sercom_get_async_baud_val+0x90>)
    5da4:	47a0      	blx	r4
		scale = ((uint64_t)1 << SHIFT) - ratio;
    5da6:	2200      	movs	r2, #0
    5da8:	2301      	movs	r3, #1
    5daa:	1a12      	subs	r2, r2, r0
    5dac:	418b      	sbcs	r3, r1
		baud_calculated = (65536 * scale) >> SHIFT;
    5dae:	0c12      	lsrs	r2, r2, #16
    5db0:	041b      	lsls	r3, r3, #16
    5db2:	431a      	orrs	r2, r3
	*baudval = baud_calculated;
    5db4:	8032      	strh	r2, [r6, #0]
	return STATUS_OK;
    5db6:	2200      	movs	r2, #0
    5db8:	e7e5      	b.n	5d86 <_sercom_get_async_baud_val+0x16>
	uint64_t baud_calculated = 0;
    5dba:	2200      	movs	r2, #0
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
    5dbc:	2b01      	cmp	r3, #1
    5dbe:	d1f9      	bne.n	5db4 <_sercom_get_async_baud_val+0x44>
		temp1 = ((uint64_t)baudrate * sample_num);
    5dc0:	000a      	movs	r2, r1
    5dc2:	2300      	movs	r3, #0
    5dc4:	2100      	movs	r1, #0
    5dc6:	4c0d      	ldr	r4, [pc, #52]	; (5dfc <_sercom_get_async_baud_val+0x8c>)
    5dc8:	47a0      	blx	r4
    5dca:	0002      	movs	r2, r0
    5dcc:	000b      	movs	r3, r1
    5dce:	9200      	str	r2, [sp, #0]
    5dd0:	9301      	str	r3, [sp, #4]
		baud_int = long_division( peripheral_clock, temp1);
    5dd2:	0038      	movs	r0, r7
    5dd4:	2100      	movs	r1, #0
    5dd6:	4c0a      	ldr	r4, [pc, #40]	; (5e00 <_sercom_get_async_baud_val+0x90>)
    5dd8:	47a0      	blx	r4
    5dda:	0005      	movs	r5, r0
		if(baud_int > BAUD_INT_MAX) {
    5ddc:	2380      	movs	r3, #128	; 0x80
    5dde:	019b      	lsls	r3, r3, #6
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    5de0:	2240      	movs	r2, #64	; 0x40
		if(baud_int > BAUD_INT_MAX) {
    5de2:	4298      	cmp	r0, r3
    5de4:	d8cf      	bhi.n	5d86 <_sercom_get_async_baud_val+0x16>
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
    5de6:	0f79      	lsrs	r1, r7, #29
    5de8:	00f8      	lsls	r0, r7, #3
    5dea:	9a00      	ldr	r2, [sp, #0]
    5dec:	9b01      	ldr	r3, [sp, #4]
    5dee:	47a0      	blx	r4
		baud_fp = temp1 - 8 * baud_int;
    5df0:	00ea      	lsls	r2, r5, #3
    5df2:	1a82      	subs	r2, r0, r2
		baud_calculated = baud_int | (baud_fp << 13);
    5df4:	b2d2      	uxtb	r2, r2
    5df6:	0352      	lsls	r2, r2, #13
    5df8:	432a      	orrs	r2, r5
    5dfa:	e7db      	b.n	5db4 <_sercom_get_async_baud_val+0x44>
    5dfc:	00016a41 	.word	0x00016a41
    5e00:	00005c8d 	.word	0x00005c8d

00005e04 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
    5e04:	b510      	push	{r4, lr}
    5e06:	b082      	sub	sp, #8
    5e08:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
    5e0a:	4b0e      	ldr	r3, [pc, #56]	; (5e44 <sercom_set_gclk_generator+0x40>)
    5e0c:	781b      	ldrb	r3, [r3, #0]
    5e0e:	2b00      	cmp	r3, #0
    5e10:	d007      	beq.n	5e22 <sercom_set_gclk_generator+0x1e>
    5e12:	2900      	cmp	r1, #0
    5e14:	d105      	bne.n	5e22 <sercom_set_gclk_generator+0x1e>
		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
    5e16:	4b0b      	ldr	r3, [pc, #44]	; (5e44 <sercom_set_gclk_generator+0x40>)
    5e18:	785b      	ldrb	r3, [r3, #1]
    5e1a:	4283      	cmp	r3, r0
    5e1c:	d010      	beq.n	5e40 <sercom_set_gclk_generator+0x3c>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
    5e1e:	201d      	movs	r0, #29
    5e20:	e00c      	b.n	5e3c <sercom_set_gclk_generator+0x38>
		gclk_chan_conf.source_generator = generator_source;
    5e22:	a901      	add	r1, sp, #4
    5e24:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
    5e26:	2011      	movs	r0, #17
    5e28:	4b07      	ldr	r3, [pc, #28]	; (5e48 <sercom_set_gclk_generator+0x44>)
    5e2a:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
    5e2c:	2011      	movs	r0, #17
    5e2e:	4b07      	ldr	r3, [pc, #28]	; (5e4c <sercom_set_gclk_generator+0x48>)
    5e30:	4798      	blx	r3
		_sercom_config.generator_source = generator_source;
    5e32:	4b04      	ldr	r3, [pc, #16]	; (5e44 <sercom_set_gclk_generator+0x40>)
    5e34:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
    5e36:	2201      	movs	r2, #1
    5e38:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
    5e3a:	2000      	movs	r0, #0
}
    5e3c:	b002      	add	sp, #8
    5e3e:	bd10      	pop	{r4, pc}
		return STATUS_OK;
    5e40:	2000      	movs	r0, #0
    5e42:	e7fb      	b.n	5e3c <sercom_set_gclk_generator+0x38>
    5e44:	20000b68 	.word	0x20000b68
    5e48:	000072a9 	.word	0x000072a9
    5e4c:	00007239 	.word	0x00007239

00005e50 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
    5e50:	4b3c      	ldr	r3, [pc, #240]	; (5f44 <_sercom_get_default_pad+0xf4>)
    5e52:	4298      	cmp	r0, r3
    5e54:	d032      	beq.n	5ebc <_sercom_get_default_pad+0x6c>
    5e56:	d90a      	bls.n	5e6e <_sercom_get_default_pad+0x1e>
    5e58:	4b3b      	ldr	r3, [pc, #236]	; (5f48 <_sercom_get_default_pad+0xf8>)
    5e5a:	4298      	cmp	r0, r3
    5e5c:	d04e      	beq.n	5efc <_sercom_get_default_pad+0xac>
    5e5e:	4b3b      	ldr	r3, [pc, #236]	; (5f4c <_sercom_get_default_pad+0xfc>)
    5e60:	4298      	cmp	r0, r3
    5e62:	d055      	beq.n	5f10 <_sercom_get_default_pad+0xc0>
    5e64:	4b3a      	ldr	r3, [pc, #232]	; (5f50 <_sercom_get_default_pad+0x100>)
    5e66:	4298      	cmp	r0, r3
    5e68:	d038      	beq.n	5edc <_sercom_get_default_pad+0x8c>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
    5e6a:	2000      	movs	r0, #0
}
    5e6c:	4770      	bx	lr
	switch ((uintptr_t)sercom_module) {
    5e6e:	2384      	movs	r3, #132	; 0x84
    5e70:	05db      	lsls	r3, r3, #23
    5e72:	4298      	cmp	r0, r3
    5e74:	d00c      	beq.n	5e90 <_sercom_get_default_pad+0x40>
    5e76:	4b37      	ldr	r3, [pc, #220]	; (5f54 <_sercom_get_default_pad+0x104>)
    5e78:	4298      	cmp	r0, r3
    5e7a:	d1f6      	bne.n	5e6a <_sercom_get_default_pad+0x1a>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    5e7c:	2901      	cmp	r1, #1
    5e7e:	d017      	beq.n	5eb0 <_sercom_get_default_pad+0x60>
    5e80:	2900      	cmp	r1, #0
    5e82:	d057      	beq.n	5f34 <_sercom_get_default_pad+0xe4>
    5e84:	2902      	cmp	r1, #2
    5e86:	d015      	beq.n	5eb4 <_sercom_get_default_pad+0x64>
    5e88:	2903      	cmp	r1, #3
    5e8a:	d015      	beq.n	5eb8 <_sercom_get_default_pad+0x68>
	return 0;
    5e8c:	2000      	movs	r0, #0
    5e8e:	e7ed      	b.n	5e6c <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    5e90:	2901      	cmp	r1, #1
    5e92:	d007      	beq.n	5ea4 <_sercom_get_default_pad+0x54>
    5e94:	2900      	cmp	r1, #0
    5e96:	d04b      	beq.n	5f30 <_sercom_get_default_pad+0xe0>
    5e98:	2902      	cmp	r1, #2
    5e9a:	d005      	beq.n	5ea8 <_sercom_get_default_pad+0x58>
    5e9c:	2903      	cmp	r1, #3
    5e9e:	d005      	beq.n	5eac <_sercom_get_default_pad+0x5c>
	return 0;
    5ea0:	2000      	movs	r0, #0
    5ea2:	e7e3      	b.n	5e6c <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    5ea4:	482c      	ldr	r0, [pc, #176]	; (5f58 <_sercom_get_default_pad+0x108>)
    5ea6:	e7e1      	b.n	5e6c <_sercom_get_default_pad+0x1c>
    5ea8:	482c      	ldr	r0, [pc, #176]	; (5f5c <_sercom_get_default_pad+0x10c>)
    5eaa:	e7df      	b.n	5e6c <_sercom_get_default_pad+0x1c>
    5eac:	482c      	ldr	r0, [pc, #176]	; (5f60 <_sercom_get_default_pad+0x110>)
    5eae:	e7dd      	b.n	5e6c <_sercom_get_default_pad+0x1c>
    5eb0:	482c      	ldr	r0, [pc, #176]	; (5f64 <_sercom_get_default_pad+0x114>)
    5eb2:	e7db      	b.n	5e6c <_sercom_get_default_pad+0x1c>
    5eb4:	482c      	ldr	r0, [pc, #176]	; (5f68 <_sercom_get_default_pad+0x118>)
    5eb6:	e7d9      	b.n	5e6c <_sercom_get_default_pad+0x1c>
    5eb8:	482c      	ldr	r0, [pc, #176]	; (5f6c <_sercom_get_default_pad+0x11c>)
    5eba:	e7d7      	b.n	5e6c <_sercom_get_default_pad+0x1c>
    5ebc:	2901      	cmp	r1, #1
    5ebe:	d007      	beq.n	5ed0 <_sercom_get_default_pad+0x80>
    5ec0:	2900      	cmp	r1, #0
    5ec2:	d039      	beq.n	5f38 <_sercom_get_default_pad+0xe8>
    5ec4:	2902      	cmp	r1, #2
    5ec6:	d005      	beq.n	5ed4 <_sercom_get_default_pad+0x84>
    5ec8:	2903      	cmp	r1, #3
    5eca:	d005      	beq.n	5ed8 <_sercom_get_default_pad+0x88>
	return 0;
    5ecc:	2000      	movs	r0, #0
    5ece:	e7cd      	b.n	5e6c <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    5ed0:	4827      	ldr	r0, [pc, #156]	; (5f70 <_sercom_get_default_pad+0x120>)
    5ed2:	e7cb      	b.n	5e6c <_sercom_get_default_pad+0x1c>
    5ed4:	4827      	ldr	r0, [pc, #156]	; (5f74 <_sercom_get_default_pad+0x124>)
    5ed6:	e7c9      	b.n	5e6c <_sercom_get_default_pad+0x1c>
    5ed8:	4827      	ldr	r0, [pc, #156]	; (5f78 <_sercom_get_default_pad+0x128>)
    5eda:	e7c7      	b.n	5e6c <_sercom_get_default_pad+0x1c>
    5edc:	2901      	cmp	r1, #1
    5ede:	d007      	beq.n	5ef0 <_sercom_get_default_pad+0xa0>
    5ee0:	2900      	cmp	r1, #0
    5ee2:	d02b      	beq.n	5f3c <_sercom_get_default_pad+0xec>
    5ee4:	2902      	cmp	r1, #2
    5ee6:	d005      	beq.n	5ef4 <_sercom_get_default_pad+0xa4>
    5ee8:	2903      	cmp	r1, #3
    5eea:	d005      	beq.n	5ef8 <_sercom_get_default_pad+0xa8>
	return 0;
    5eec:	2000      	movs	r0, #0
    5eee:	e7bd      	b.n	5e6c <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    5ef0:	4822      	ldr	r0, [pc, #136]	; (5f7c <_sercom_get_default_pad+0x12c>)
    5ef2:	e7bb      	b.n	5e6c <_sercom_get_default_pad+0x1c>
    5ef4:	4822      	ldr	r0, [pc, #136]	; (5f80 <_sercom_get_default_pad+0x130>)
    5ef6:	e7b9      	b.n	5e6c <_sercom_get_default_pad+0x1c>
    5ef8:	4822      	ldr	r0, [pc, #136]	; (5f84 <_sercom_get_default_pad+0x134>)
    5efa:	e7b7      	b.n	5e6c <_sercom_get_default_pad+0x1c>
    5efc:	2902      	cmp	r1, #2
    5efe:	d003      	beq.n	5f08 <_sercom_get_default_pad+0xb8>
    5f00:	2903      	cmp	r1, #3
    5f02:	d003      	beq.n	5f0c <_sercom_get_default_pad+0xbc>
    5f04:	2000      	movs	r0, #0
    5f06:	e7b1      	b.n	5e6c <_sercom_get_default_pad+0x1c>
    5f08:	481f      	ldr	r0, [pc, #124]	; (5f88 <_sercom_get_default_pad+0x138>)
    5f0a:	e7af      	b.n	5e6c <_sercom_get_default_pad+0x1c>
    5f0c:	481f      	ldr	r0, [pc, #124]	; (5f8c <_sercom_get_default_pad+0x13c>)
    5f0e:	e7ad      	b.n	5e6c <_sercom_get_default_pad+0x1c>
    5f10:	2901      	cmp	r1, #1
    5f12:	d007      	beq.n	5f24 <_sercom_get_default_pad+0xd4>
    5f14:	2900      	cmp	r1, #0
    5f16:	d013      	beq.n	5f40 <_sercom_get_default_pad+0xf0>
    5f18:	2902      	cmp	r1, #2
    5f1a:	d005      	beq.n	5f28 <_sercom_get_default_pad+0xd8>
    5f1c:	2903      	cmp	r1, #3
    5f1e:	d005      	beq.n	5f2c <_sercom_get_default_pad+0xdc>
	return 0;
    5f20:	2000      	movs	r0, #0
    5f22:	e7a3      	b.n	5e6c <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    5f24:	481a      	ldr	r0, [pc, #104]	; (5f90 <_sercom_get_default_pad+0x140>)
    5f26:	e7a1      	b.n	5e6c <_sercom_get_default_pad+0x1c>
    5f28:	481a      	ldr	r0, [pc, #104]	; (5f94 <_sercom_get_default_pad+0x144>)
    5f2a:	e79f      	b.n	5e6c <_sercom_get_default_pad+0x1c>
    5f2c:	481a      	ldr	r0, [pc, #104]	; (5f98 <_sercom_get_default_pad+0x148>)
    5f2e:	e79d      	b.n	5e6c <_sercom_get_default_pad+0x1c>
    5f30:	481a      	ldr	r0, [pc, #104]	; (5f9c <_sercom_get_default_pad+0x14c>)
    5f32:	e79b      	b.n	5e6c <_sercom_get_default_pad+0x1c>
    5f34:	2003      	movs	r0, #3
    5f36:	e799      	b.n	5e6c <_sercom_get_default_pad+0x1c>
    5f38:	4819      	ldr	r0, [pc, #100]	; (5fa0 <_sercom_get_default_pad+0x150>)
    5f3a:	e797      	b.n	5e6c <_sercom_get_default_pad+0x1c>
    5f3c:	4819      	ldr	r0, [pc, #100]	; (5fa4 <_sercom_get_default_pad+0x154>)
    5f3e:	e795      	b.n	5e6c <_sercom_get_default_pad+0x1c>
    5f40:	4819      	ldr	r0, [pc, #100]	; (5fa8 <_sercom_get_default_pad+0x158>)
    5f42:	e793      	b.n	5e6c <_sercom_get_default_pad+0x1c>
    5f44:	42000800 	.word	0x42000800
    5f48:	42001000 	.word	0x42001000
    5f4c:	43000400 	.word	0x43000400
    5f50:	42000c00 	.word	0x42000c00
    5f54:	42000400 	.word	0x42000400
    5f58:	00050003 	.word	0x00050003
    5f5c:	00060003 	.word	0x00060003
    5f60:	00070003 	.word	0x00070003
    5f64:	00010003 	.word	0x00010003
    5f68:	001e0003 	.word	0x001e0003
    5f6c:	001f0003 	.word	0x001f0003
    5f70:	00090003 	.word	0x00090003
    5f74:	000a0003 	.word	0x000a0003
    5f78:	000b0003 	.word	0x000b0003
    5f7c:	00110003 	.word	0x00110003
    5f80:	00120003 	.word	0x00120003
    5f84:	00130003 	.word	0x00130003
    5f88:	000e0003 	.word	0x000e0003
    5f8c:	000f0003 	.word	0x000f0003
    5f90:	00170003 	.word	0x00170003
    5f94:	00180003 	.word	0x00180003
    5f98:	00190003 	.word	0x00190003
    5f9c:	00040003 	.word	0x00040003
    5fa0:	00080003 	.word	0x00080003
    5fa4:	00100003 	.word	0x00100003
    5fa8:	00160003 	.word	0x00160003

00005fac <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
    5fac:	b530      	push	{r4, r5, lr}
    5fae:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
    5fb0:	4b0b      	ldr	r3, [pc, #44]	; (5fe0 <_sercom_get_sercom_inst_index+0x34>)
    5fb2:	466a      	mov	r2, sp
    5fb4:	cb32      	ldmia	r3!, {r1, r4, r5}
    5fb6:	c232      	stmia	r2!, {r1, r4, r5}
    5fb8:	cb32      	ldmia	r3!, {r1, r4, r5}
    5fba:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    5fbc:	9b00      	ldr	r3, [sp, #0]
    5fbe:	4283      	cmp	r3, r0
    5fc0:	d00b      	beq.n	5fda <_sercom_get_sercom_inst_index+0x2e>
    5fc2:	2301      	movs	r3, #1
    5fc4:	009a      	lsls	r2, r3, #2
    5fc6:	4669      	mov	r1, sp
    5fc8:	5852      	ldr	r2, [r2, r1]
    5fca:	4282      	cmp	r2, r0
    5fcc:	d006      	beq.n	5fdc <_sercom_get_sercom_inst_index+0x30>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    5fce:	3301      	adds	r3, #1
    5fd0:	2b06      	cmp	r3, #6
    5fd2:	d1f7      	bne.n	5fc4 <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
    5fd4:	2000      	movs	r0, #0
}
    5fd6:	b007      	add	sp, #28
    5fd8:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    5fda:	2300      	movs	r3, #0
			return i;
    5fdc:	b2d8      	uxtb	r0, r3
    5fde:	e7fa      	b.n	5fd6 <_sercom_get_sercom_inst_index+0x2a>
    5fe0:	0001fb90 	.word	0x0001fb90

00005fe4 <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
    5fe4:	4770      	bx	lr
	...

00005fe8 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    5fe8:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
    5fea:	4b0a      	ldr	r3, [pc, #40]	; (6014 <_sercom_set_handler+0x2c>)
    5fec:	781b      	ldrb	r3, [r3, #0]
    5fee:	2b00      	cmp	r3, #0
    5ff0:	d10c      	bne.n	600c <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    5ff2:	4f09      	ldr	r7, [pc, #36]	; (6018 <_sercom_set_handler+0x30>)
    5ff4:	4e09      	ldr	r6, [pc, #36]	; (601c <_sercom_set_handler+0x34>)
			_sercom_instances[i] = NULL;
    5ff6:	4d0a      	ldr	r5, [pc, #40]	; (6020 <_sercom_set_handler+0x38>)
    5ff8:	2400      	movs	r4, #0
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    5ffa:	51de      	str	r6, [r3, r7]
			_sercom_instances[i] = NULL;
    5ffc:	195a      	adds	r2, r3, r5
    5ffe:	6014      	str	r4, [r2, #0]
    6000:	3304      	adds	r3, #4
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    6002:	2b18      	cmp	r3, #24
    6004:	d1f9      	bne.n	5ffa <_sercom_set_handler+0x12>
		}

		_handler_table_initialized = true;
    6006:	2201      	movs	r2, #1
    6008:	4b02      	ldr	r3, [pc, #8]	; (6014 <_sercom_set_handler+0x2c>)
    600a:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    600c:	0080      	lsls	r0, r0, #2
    600e:	4b02      	ldr	r3, [pc, #8]	; (6018 <_sercom_set_handler+0x30>)
    6010:	50c1      	str	r1, [r0, r3]
}
    6012:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6014:	20000b6a 	.word	0x20000b6a
    6018:	20000b6c 	.word	0x20000b6c
    601c:	00005fe5 	.word	0x00005fe5
    6020:	20002238 	.word	0x20002238

00006024 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    6024:	b500      	push	{lr}
    6026:	b083      	sub	sp, #12
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    6028:	2308      	movs	r3, #8
    602a:	466a      	mov	r2, sp
    602c:	7013      	strb	r3, [r2, #0]
    602e:	3301      	adds	r3, #1
    6030:	7053      	strb	r3, [r2, #1]
    6032:	3301      	adds	r3, #1
    6034:	7093      	strb	r3, [r2, #2]
    6036:	3301      	adds	r3, #1
    6038:	70d3      	strb	r3, [r2, #3]
    603a:	3301      	adds	r3, #1
    603c:	7113      	strb	r3, [r2, #4]
    603e:	3301      	adds	r3, #1
    6040:	7153      	strb	r3, [r2, #5]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    6042:	4b03      	ldr	r3, [pc, #12]	; (6050 <_sercom_get_interrupt_vector+0x2c>)
    6044:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    6046:	466b      	mov	r3, sp
    6048:	5618      	ldrsb	r0, [r3, r0]
}
    604a:	b003      	add	sp, #12
    604c:	bd00      	pop	{pc}
    604e:	46c0      	nop			; (mov r8, r8)
    6050:	00005fad 	.word	0x00005fad

00006054 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    6054:	b510      	push	{r4, lr}
    6056:	4b02      	ldr	r3, [pc, #8]	; (6060 <SERCOM0_Handler+0xc>)
    6058:	681b      	ldr	r3, [r3, #0]
    605a:	2000      	movs	r0, #0
    605c:	4798      	blx	r3
    605e:	bd10      	pop	{r4, pc}
    6060:	20000b6c 	.word	0x20000b6c

00006064 <SERCOM1_Handler>:
    6064:	b510      	push	{r4, lr}
    6066:	4b02      	ldr	r3, [pc, #8]	; (6070 <SERCOM1_Handler+0xc>)
    6068:	685b      	ldr	r3, [r3, #4]
    606a:	2001      	movs	r0, #1
    606c:	4798      	blx	r3
    606e:	bd10      	pop	{r4, pc}
    6070:	20000b6c 	.word	0x20000b6c

00006074 <SERCOM2_Handler>:
    6074:	b510      	push	{r4, lr}
    6076:	4b02      	ldr	r3, [pc, #8]	; (6080 <SERCOM2_Handler+0xc>)
    6078:	689b      	ldr	r3, [r3, #8]
    607a:	2002      	movs	r0, #2
    607c:	4798      	blx	r3
    607e:	bd10      	pop	{r4, pc}
    6080:	20000b6c 	.word	0x20000b6c

00006084 <SERCOM3_Handler>:
    6084:	b510      	push	{r4, lr}
    6086:	4b02      	ldr	r3, [pc, #8]	; (6090 <SERCOM3_Handler+0xc>)
    6088:	68db      	ldr	r3, [r3, #12]
    608a:	2003      	movs	r0, #3
    608c:	4798      	blx	r3
    608e:	bd10      	pop	{r4, pc}
    6090:	20000b6c 	.word	0x20000b6c

00006094 <SERCOM4_Handler>:
    6094:	b510      	push	{r4, lr}
    6096:	4b02      	ldr	r3, [pc, #8]	; (60a0 <SERCOM4_Handler+0xc>)
    6098:	691b      	ldr	r3, [r3, #16]
    609a:	2004      	movs	r0, #4
    609c:	4798      	blx	r3
    609e:	bd10      	pop	{r4, pc}
    60a0:	20000b6c 	.word	0x20000b6c

000060a4 <SERCOM5_Handler>:
    60a4:	b510      	push	{r4, lr}
    60a6:	4b02      	ldr	r3, [pc, #8]	; (60b0 <SERCOM5_Handler+0xc>)
    60a8:	695b      	ldr	r3, [r3, #20]
    60aa:	2005      	movs	r0, #5
    60ac:	4798      	blx	r3
    60ae:	bd10      	pop	{r4, pc}
    60b0:	20000b6c 	.word	0x20000b6c

000060b4 <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
    60b4:	b5f0      	push	{r4, r5, r6, r7, lr}
    60b6:	46d6      	mov	lr, sl
    60b8:	464f      	mov	r7, r9
    60ba:	4646      	mov	r6, r8
    60bc:	b5c0      	push	{r6, r7, lr}
    60be:	b08a      	sub	sp, #40	; 0x28
    60c0:	0006      	movs	r6, r0
    60c2:	000f      	movs	r7, r1
    60c4:	0014      	movs	r4, r2
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
    60c6:	6031      	str	r1, [r6, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
    60c8:	680b      	ldr	r3, [r1, #0]
    60ca:	079b      	lsls	r3, r3, #30
    60cc:	d40a      	bmi.n	60e4 <spi_init+0x30>
		return STATUS_ERR_DENIED;
#  endif
	}

	/* Check if reset is in progress. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    60ce:	680b      	ldr	r3, [r1, #0]
		return STATUS_BUSY;
    60d0:	2005      	movs	r0, #5
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    60d2:	07db      	lsls	r3, r3, #31
    60d4:	d400      	bmi.n	60d8 <spi_init+0x24>
    60d6:	e097      	b.n	6208 <spi_init+0x154>
	_sercom_instances[instance_index] = module;
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
}
    60d8:	b00a      	add	sp, #40	; 0x28
    60da:	bc1c      	pop	{r2, r3, r4}
    60dc:	4690      	mov	r8, r2
    60de:	4699      	mov	r9, r3
    60e0:	46a2      	mov	sl, r4
    60e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint32_t pad_pinmuxes[] = {
    60e4:	6a93      	ldr	r3, [r2, #40]	; 0x28
    60e6:	9305      	str	r3, [sp, #20]
    60e8:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    60ea:	9306      	str	r3, [sp, #24]
    60ec:	6b13      	ldr	r3, [r2, #48]	; 0x30
    60ee:	9307      	str	r3, [sp, #28]
    60f0:	6b53      	ldr	r3, [r2, #52]	; 0x34
    60f2:	9308      	str	r3, [sp, #32]
    60f4:	2500      	movs	r5, #0
    60f6:	e00a      	b.n	610e <spi_init+0x5a>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    60f8:	0038      	movs	r0, r7
    60fa:	4b9a      	ldr	r3, [pc, #616]	; (6364 <spi_init+0x2b0>)
    60fc:	4798      	blx	r3
    60fe:	e00e      	b.n	611e <spi_init+0x6a>

	if (pin_index & 1) {
		return (pmux_reg & PORT_PMUX_PMUXO_Msk) >> PORT_PMUX_PMUXO_Pos;
	}
	else {
		return (pmux_reg & PORT_PMUX_PMUXE_Msk) >> PORT_PMUX_PMUXE_Pos;
    6100:	230f      	movs	r3, #15
    6102:	4018      	ands	r0, r3
		if ((current_pinmux & 0xFFFF) !=
    6104:	4581      	cmp	r9, r0
    6106:	d130      	bne.n	616a <spi_init+0xb6>
    6108:	3501      	adds	r5, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    610a:	2d04      	cmp	r5, #4
    610c:	d031      	beq.n	6172 <spi_init+0xbe>
    610e:	b2e9      	uxtb	r1, r5
		uint32_t current_pinmux = pad_pinmuxes[pad];
    6110:	00ab      	lsls	r3, r5, #2
    6112:	aa02      	add	r2, sp, #8
    6114:	200c      	movs	r0, #12
    6116:	1812      	adds	r2, r2, r0
    6118:	58d0      	ldr	r0, [r2, r3]
		if (current_pinmux == PINMUX_DEFAULT) {
    611a:	2800      	cmp	r0, #0
    611c:	d0ec      	beq.n	60f8 <spi_init+0x44>
		if (current_pinmux == PINMUX_UNUSED) {
    611e:	1c43      	adds	r3, r0, #1
    6120:	d0f2      	beq.n	6108 <spi_init+0x54>
		if ((current_pinmux & 0xFFFF) !=
    6122:	0401      	lsls	r1, r0, #16
    6124:	0c0b      	lsrs	r3, r1, #16
    6126:	4699      	mov	r9, r3
				system_pinmux_pin_get_mux_position(current_pinmux >> 16)) {
    6128:	0c00      	lsrs	r0, r0, #16
	if (port_index < PORT_INST_NUM) {
    612a:	b2c3      	uxtb	r3, r0
    612c:	469c      	mov	ip, r3
		return NULL;
    612e:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    6130:	0602      	lsls	r2, r0, #24
    6132:	d405      	bmi.n	6140 <spi_init+0x8c>
		return &(ports[port_index]->Group[group_index]);
    6134:	4663      	mov	r3, ip
    6136:	095b      	lsrs	r3, r3, #5
    6138:	01db      	lsls	r3, r3, #7
    613a:	4a8b      	ldr	r2, [pc, #556]	; (6368 <spi_init+0x2b4>)
    613c:	4690      	mov	r8, r2
    613e:	4443      	add	r3, r8
	uint32_t pin_index = (gpio_pin % 32);
    6140:	221f      	movs	r2, #31
    6142:	4660      	mov	r0, ip
    6144:	4002      	ands	r2, r0
	if (!(port->PINCFG[pin_index].reg & PORT_PINCFG_PMUXEN)) {
    6146:	1898      	adds	r0, r3, r2
    6148:	3040      	adds	r0, #64	; 0x40
    614a:	7800      	ldrb	r0, [r0, #0]
    614c:	4682      	mov	sl, r0
		return SYSTEM_PINMUX_GPIO;
    614e:	2080      	movs	r0, #128	; 0x80
	if (!(port->PINCFG[pin_index].reg & PORT_PINCFG_PMUXEN)) {
    6150:	4651      	mov	r1, sl
    6152:	07c9      	lsls	r1, r1, #31
    6154:	d5d6      	bpl.n	6104 <spi_init+0x50>
	uint32_t pmux_reg = port->PMUX[pin_index / 2].reg;
    6156:	0852      	lsrs	r2, r2, #1
    6158:	189b      	adds	r3, r3, r2
    615a:	3330      	adds	r3, #48	; 0x30
    615c:	7818      	ldrb	r0, [r3, #0]
    615e:	b2c0      	uxtb	r0, r0
	if (pin_index & 1) {
    6160:	4663      	mov	r3, ip
    6162:	07db      	lsls	r3, r3, #31
    6164:	d5cc      	bpl.n	6100 <spi_init+0x4c>
		return (pmux_reg & PORT_PMUX_PMUXO_Msk) >> PORT_PMUX_PMUXO_Pos;
    6166:	0900      	lsrs	r0, r0, #4
    6168:	e7cc      	b.n	6104 <spi_init+0x50>
			module->hw = NULL;
    616a:	2300      	movs	r3, #0
    616c:	6033      	str	r3, [r6, #0]
			return STATUS_ERR_DENIED;
    616e:	201c      	movs	r0, #28
    6170:	e7b2      	b.n	60d8 <spi_init+0x24>
	uint32_t external_clock = system_gclk_chan_get_hz(SERCOM_GCLK_ID);
    6172:	2011      	movs	r0, #17
    6174:	4b7d      	ldr	r3, [pc, #500]	; (636c <spi_init+0x2b8>)
    6176:	4798      	blx	r3
	if (config->mode == SPI_MODE_MASTER) {
    6178:	7822      	ldrb	r2, [r4, #0]
	uint32_t ctrla = 0;
    617a:	2500      	movs	r5, #0
	if (config->mode == SPI_MODE_MASTER) {
    617c:	2a01      	cmp	r2, #1
    617e:	d026      	beq.n	61ce <spi_init+0x11a>
	ctrla |= config->mux_setting;
    6180:	6863      	ldr	r3, [r4, #4]
    6182:	68a2      	ldr	r2, [r4, #8]
    6184:	4313      	orrs	r3, r2
    6186:	68e2      	ldr	r2, [r4, #12]
    6188:	4313      	orrs	r3, r2
    618a:	432b      	orrs	r3, r5
	ctrlb |= config->character_size;
    618c:	7c22      	ldrb	r2, [r4, #16]
	if (config->run_in_standby) {
    618e:	7c61      	ldrb	r1, [r4, #17]
    6190:	2900      	cmp	r1, #0
    6192:	d001      	beq.n	6198 <spi_init+0xe4>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
    6194:	2180      	movs	r1, #128	; 0x80
    6196:	430b      	orrs	r3, r1
	if (config->receiver_enable) {
    6198:	7ca1      	ldrb	r1, [r4, #18]
    619a:	2900      	cmp	r1, #0
    619c:	d002      	beq.n	61a4 <spi_init+0xf0>
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
    619e:	2180      	movs	r1, #128	; 0x80
    61a0:	0289      	lsls	r1, r1, #10
    61a2:	430a      	orrs	r2, r1
	if (config->select_slave_low_detect_enable) {
    61a4:	7ce1      	ldrb	r1, [r4, #19]
    61a6:	2900      	cmp	r1, #0
    61a8:	d002      	beq.n	61b0 <spi_init+0xfc>
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
    61aa:	2180      	movs	r1, #128	; 0x80
    61ac:	0089      	lsls	r1, r1, #2
    61ae:	430a      	orrs	r2, r1
	if (config->master_slave_select_enable) {
    61b0:	7d21      	ldrb	r1, [r4, #20]
    61b2:	2900      	cmp	r1, #0
    61b4:	d002      	beq.n	61bc <spi_init+0x108>
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
    61b6:	2180      	movs	r1, #128	; 0x80
    61b8:	0189      	lsls	r1, r1, #6
    61ba:	430a      	orrs	r2, r1
	if (spi_module->CTRLA.reg == ctrla &&
    61bc:	6839      	ldr	r1, [r7, #0]
	ctrla |= SERCOM_SPI_CTRLA_ENABLE;
    61be:	2002      	movs	r0, #2
    61c0:	4303      	orrs	r3, r0
	if (spi_module->CTRLA.reg == ctrla &&
    61c2:	428b      	cmp	r3, r1
    61c4:	d017      	beq.n	61f6 <spi_init+0x142>
	module->hw = NULL;
    61c6:	2300      	movs	r3, #0
    61c8:	6033      	str	r3, [r6, #0]
	return STATUS_ERR_DENIED;
    61ca:	201c      	movs	r0, #28
    61cc:	e784      	b.n	60d8 <spi_init+0x24>
		enum status_code error_code = _sercom_get_sync_baud_val(
    61ce:	aa04      	add	r2, sp, #16
    61d0:	0001      	movs	r1, r0
    61d2:	69a0      	ldr	r0, [r4, #24]
    61d4:	4b66      	ldr	r3, [pc, #408]	; (6370 <spi_init+0x2bc>)
    61d6:	4798      	blx	r3
    61d8:	0003      	movs	r3, r0
			return STATUS_ERR_INVALID_ARG;
    61da:	2017      	movs	r0, #23
		if (error_code != STATUS_OK) {
    61dc:	2b00      	cmp	r3, #0
    61de:	d000      	beq.n	61e2 <spi_init+0x12e>
    61e0:	e77a      	b.n	60d8 <spi_init+0x24>
		if (spi_module->BAUD.reg !=  (uint8_t)baud) {
    61e2:	7b3b      	ldrb	r3, [r7, #12]
    61e4:	b2db      	uxtb	r3, r3
    61e6:	aa04      	add	r2, sp, #16
    61e8:	7812      	ldrb	r2, [r2, #0]
			return STATUS_ERR_DENIED;
    61ea:	3005      	adds	r0, #5
		if (spi_module->BAUD.reg !=  (uint8_t)baud) {
    61ec:	429a      	cmp	r2, r3
    61ee:	d000      	beq.n	61f2 <spi_init+0x13e>
    61f0:	e772      	b.n	60d8 <spi_init+0x24>
		ctrla |= SERCOM_SPI_CTRLA_MODE(0x3);
    61f2:	350c      	adds	r5, #12
    61f4:	e7c4      	b.n	6180 <spi_init+0xcc>
			spi_module->CTRLB.reg == ctrlb) {
    61f6:	687b      	ldr	r3, [r7, #4]
	if (spi_module->CTRLA.reg == ctrla &&
    61f8:	4293      	cmp	r3, r2
    61fa:	d1e4      	bne.n	61c6 <spi_init+0x112>
		module->mode           = config->mode;
    61fc:	7823      	ldrb	r3, [r4, #0]
    61fe:	7173      	strb	r3, [r6, #5]
		module->character_size = config->character_size;
    6200:	7c23      	ldrb	r3, [r4, #16]
    6202:	71b3      	strb	r3, [r6, #6]
		return STATUS_OK;
    6204:	2000      	movs	r0, #0
    6206:	e767      	b.n	60d8 <spi_init+0x24>
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    6208:	0008      	movs	r0, r1
    620a:	4b5a      	ldr	r3, [pc, #360]	; (6374 <spi_init+0x2c0>)
    620c:	4798      	blx	r3
	if (sercom_index == 5) {
    620e:	2805      	cmp	r0, #5
    6210:	d100      	bne.n	6214 <spi_init+0x160>
    6212:	e09f      	b.n	6354 <spi_init+0x2a0>
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    6214:	0003      	movs	r3, r0
    6216:	3312      	adds	r3, #18
			MCLK->APBCMASK.reg |= mask;
    6218:	4957      	ldr	r1, [pc, #348]	; (6378 <spi_init+0x2c4>)
    621a:	69cd      	ldr	r5, [r1, #28]
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    621c:	2201      	movs	r2, #1
    621e:	4082      	lsls	r2, r0
    6220:	432a      	orrs	r2, r5
    6222:	61ca      	str	r2, [r1, #28]
	gclk_chan_conf.source_generator = config->generator_source;
    6224:	a909      	add	r1, sp, #36	; 0x24
    6226:	2524      	movs	r5, #36	; 0x24
    6228:	5d62      	ldrb	r2, [r4, r5]
    622a:	700a      	strb	r2, [r1, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    622c:	b2db      	uxtb	r3, r3
    622e:	9301      	str	r3, [sp, #4]
    6230:	0018      	movs	r0, r3
    6232:	4b52      	ldr	r3, [pc, #328]	; (637c <spi_init+0x2c8>)
    6234:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    6236:	9801      	ldr	r0, [sp, #4]
    6238:	4b51      	ldr	r3, [pc, #324]	; (6380 <spi_init+0x2cc>)
    623a:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    623c:	5d60      	ldrb	r0, [r4, r5]
    623e:	2100      	movs	r1, #0
    6240:	4b50      	ldr	r3, [pc, #320]	; (6384 <spi_init+0x2d0>)
    6242:	4798      	blx	r3
	if (config->mode == SPI_MODE_MASTER) {
    6244:	7823      	ldrb	r3, [r4, #0]
    6246:	2b01      	cmp	r3, #1
    6248:	d019      	beq.n	627e <spi_init+0x1ca>
	SercomSpi *const spi_module = &(module->hw->SPI);
    624a:	6833      	ldr	r3, [r6, #0]
    624c:	4698      	mov	r8, r3
	config->mux_position = SYSTEM_PINMUX_GPIO;
    624e:	ab04      	add	r3, sp, #16
    6250:	2280      	movs	r2, #128	; 0x80
    6252:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    6254:	2200      	movs	r2, #0
    6256:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    6258:	2101      	movs	r1, #1
    625a:	7099      	strb	r1, [r3, #2]
	config->powersave    = false;
    625c:	70da      	strb	r2, [r3, #3]
	if(config->mode == SPI_MODE_SLAVE) {
    625e:	7823      	ldrb	r3, [r4, #0]
    6260:	2b00      	cmp	r3, #0
    6262:	d101      	bne.n	6268 <spi_init+0x1b4>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    6264:	ab04      	add	r3, sp, #16
    6266:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
    6268:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    626a:	9305      	str	r3, [sp, #20]
    626c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    626e:	9306      	str	r3, [sp, #24]
    6270:	6b23      	ldr	r3, [r4, #48]	; 0x30
    6272:	9307      	str	r3, [sp, #28]
    6274:	6b63      	ldr	r3, [r4, #52]	; 0x34
    6276:	9308      	str	r3, [sp, #32]
    6278:	2700      	movs	r7, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
    627a:	ad05      	add	r5, sp, #20
    627c:	e011      	b.n	62a2 <spi_init+0x1ee>
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
    627e:	683b      	ldr	r3, [r7, #0]
    6280:	220c      	movs	r2, #12
    6282:	4313      	orrs	r3, r2
    6284:	603b      	str	r3, [r7, #0]
    6286:	e7e0      	b.n	624a <spi_init+0x196>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    6288:	4640      	mov	r0, r8
    628a:	4b36      	ldr	r3, [pc, #216]	; (6364 <spi_init+0x2b0>)
    628c:	4798      	blx	r3
    628e:	e00d      	b.n	62ac <spi_init+0x1f8>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    6290:	a904      	add	r1, sp, #16
    6292:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    6294:	0c00      	lsrs	r0, r0, #16
    6296:	b2c0      	uxtb	r0, r0
    6298:	4b3b      	ldr	r3, [pc, #236]	; (6388 <spi_init+0x2d4>)
    629a:	4798      	blx	r3
    629c:	3701      	adds	r7, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    629e:	2f04      	cmp	r7, #4
    62a0:	d007      	beq.n	62b2 <spi_init+0x1fe>
    62a2:	b2f9      	uxtb	r1, r7
		uint32_t current_pinmux = pad_pinmuxes[pad];
    62a4:	00bb      	lsls	r3, r7, #2
    62a6:	5958      	ldr	r0, [r3, r5]
		if (current_pinmux == PINMUX_DEFAULT) {
    62a8:	2800      	cmp	r0, #0
    62aa:	d0ed      	beq.n	6288 <spi_init+0x1d4>
		if (current_pinmux != PINMUX_UNUSED) {
    62ac:	1c43      	adds	r3, r0, #1
    62ae:	d1ef      	bne.n	6290 <spi_init+0x1dc>
    62b0:	e7f4      	b.n	629c <spi_init+0x1e8>
	module->mode             = config->mode;
    62b2:	7823      	ldrb	r3, [r4, #0]
    62b4:	7173      	strb	r3, [r6, #5]
	module->character_size   = config->character_size;
    62b6:	7c23      	ldrb	r3, [r4, #16]
    62b8:	71b3      	strb	r3, [r6, #6]
	module->receiver_enabled = config->receiver_enable;
    62ba:	7ca3      	ldrb	r3, [r4, #18]
    62bc:	71f3      	strb	r3, [r6, #7]
	module->master_slave_select_enable = config->master_slave_select_enable;
    62be:	7d23      	ldrb	r3, [r4, #20]
    62c0:	7233      	strb	r3, [r6, #8]
	uint16_t baud = 0;
    62c2:	2200      	movs	r2, #0
    62c4:	ab02      	add	r3, sp, #8
    62c6:	80da      	strh	r2, [r3, #6]
	if (config->mode == SPI_MODE_MASTER) {
    62c8:	7823      	ldrb	r3, [r4, #0]
    62ca:	2b01      	cmp	r3, #1
    62cc:	d02a      	beq.n	6324 <spi_init+0x270>
	ctrla |= config->transfer_mode;
    62ce:	6863      	ldr	r3, [r4, #4]
    62d0:	68a2      	ldr	r2, [r4, #8]
    62d2:	4313      	orrs	r3, r2
	ctrla |= config->mux_setting;
    62d4:	68e2      	ldr	r2, [r4, #12]
    62d6:	4313      	orrs	r3, r2
	ctrlb |= config->character_size;
    62d8:	7c21      	ldrb	r1, [r4, #16]
	if (config->run_in_standby || system_is_debugger_present()) {
    62da:	7c62      	ldrb	r2, [r4, #17]
    62dc:	2a00      	cmp	r2, #0
    62de:	d103      	bne.n	62e8 <spi_init+0x234>
    62e0:	4a2a      	ldr	r2, [pc, #168]	; (638c <spi_init+0x2d8>)
    62e2:	7892      	ldrb	r2, [r2, #2]
    62e4:	0792      	lsls	r2, r2, #30
    62e6:	d501      	bpl.n	62ec <spi_init+0x238>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
    62e8:	2280      	movs	r2, #128	; 0x80
    62ea:	4313      	orrs	r3, r2
	if (config->receiver_enable) {
    62ec:	7ca2      	ldrb	r2, [r4, #18]
    62ee:	2a00      	cmp	r2, #0
    62f0:	d002      	beq.n	62f8 <spi_init+0x244>
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
    62f2:	2280      	movs	r2, #128	; 0x80
    62f4:	0292      	lsls	r2, r2, #10
    62f6:	4311      	orrs	r1, r2
	if (config->select_slave_low_detect_enable) {
    62f8:	7ce2      	ldrb	r2, [r4, #19]
    62fa:	2a00      	cmp	r2, #0
    62fc:	d002      	beq.n	6304 <spi_init+0x250>
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
    62fe:	2280      	movs	r2, #128	; 0x80
    6300:	0092      	lsls	r2, r2, #2
    6302:	4311      	orrs	r1, r2
	if (config->master_slave_select_enable) {
    6304:	7d22      	ldrb	r2, [r4, #20]
    6306:	2a00      	cmp	r2, #0
    6308:	d002      	beq.n	6310 <spi_init+0x25c>
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
    630a:	2280      	movs	r2, #128	; 0x80
    630c:	0192      	lsls	r2, r2, #6
    630e:	4311      	orrs	r1, r2
	spi_module->CTRLA.reg |= ctrla;
    6310:	4642      	mov	r2, r8
    6312:	6812      	ldr	r2, [r2, #0]
    6314:	4313      	orrs	r3, r2
    6316:	4642      	mov	r2, r8
    6318:	6013      	str	r3, [r2, #0]
	spi_module->CTRLB.reg |= ctrlb;
    631a:	6853      	ldr	r3, [r2, #4]
    631c:	430b      	orrs	r3, r1
    631e:	6053      	str	r3, [r2, #4]
	return STATUS_OK;
    6320:	2000      	movs	r0, #0
    6322:	e6d9      	b.n	60d8 <spi_init+0x24>
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    6324:	6830      	ldr	r0, [r6, #0]
    6326:	4b13      	ldr	r3, [pc, #76]	; (6374 <spi_init+0x2c0>)
    6328:	4798      	blx	r3
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    632a:	3012      	adds	r0, #18
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
    632c:	b2c0      	uxtb	r0, r0
    632e:	4b0f      	ldr	r3, [pc, #60]	; (636c <spi_init+0x2b8>)
    6330:	4798      	blx	r3
    6332:	0001      	movs	r1, r0
		enum status_code error_code = _sercom_get_sync_baud_val(
    6334:	ab02      	add	r3, sp, #8
    6336:	1d9a      	adds	r2, r3, #6
    6338:	69a0      	ldr	r0, [r4, #24]
    633a:	4b0d      	ldr	r3, [pc, #52]	; (6370 <spi_init+0x2bc>)
    633c:	4798      	blx	r3
    633e:	0003      	movs	r3, r0
			return STATUS_ERR_INVALID_ARG;
    6340:	2017      	movs	r0, #23
		if (error_code != STATUS_OK) {
    6342:	2b00      	cmp	r3, #0
    6344:	d000      	beq.n	6348 <spi_init+0x294>
    6346:	e6c7      	b.n	60d8 <spi_init+0x24>
		spi_module->BAUD.reg = (uint8_t)baud;
    6348:	ab02      	add	r3, sp, #8
    634a:	3306      	adds	r3, #6
    634c:	781b      	ldrb	r3, [r3, #0]
    634e:	4642      	mov	r2, r8
    6350:	7313      	strb	r3, [r2, #12]
    6352:	e7bc      	b.n	62ce <spi_init+0x21a>
			MCLK->APBDMASK.reg |= mask;
    6354:	4a08      	ldr	r2, [pc, #32]	; (6378 <spi_init+0x2c4>)
    6356:	6a13      	ldr	r3, [r2, #32]
    6358:	2102      	movs	r1, #2
    635a:	430b      	orrs	r3, r1
    635c:	6213      	str	r3, [r2, #32]
		gclk_index   =  SERCOM5_GCLK_ID_CORE;
    635e:	2318      	movs	r3, #24
    6360:	e760      	b.n	6224 <spi_init+0x170>
    6362:	46c0      	nop			; (mov r8, r8)
    6364:	00005e51 	.word	0x00005e51
    6368:	40002800 	.word	0x40002800
    636c:	000072cd 	.word	0x000072cd
    6370:	00005d47 	.word	0x00005d47
    6374:	00005fad 	.word	0x00005fad
    6378:	40000400 	.word	0x40000400
    637c:	000072a9 	.word	0x000072a9
    6380:	00007239 	.word	0x00007239
    6384:	00005e05 	.word	0x00005e05
    6388:	000073d5 	.word	0x000073d5
    638c:	41002000 	.word	0x41002000

00006390 <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		const bool select)
{
    6390:	b510      	push	{r4, lr}
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
    6392:	7944      	ldrb	r4, [r0, #5]
		return STATUS_ERR_UNSUPPORTED_DEV;
    6394:	2315      	movs	r3, #21
	if (module->mode != SPI_MODE_MASTER) {
    6396:	2c01      	cmp	r4, #1
    6398:	d001      	beq.n	639e <spi_select_slave+0xe>
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
		}
	}
	return STATUS_OK;
}
    639a:	0018      	movs	r0, r3
    639c:	bd10      	pop	{r4, pc}
	if(!(module->master_slave_select_enable))
    639e:	7a04      	ldrb	r4, [r0, #8]
	return STATUS_OK;
    63a0:	2300      	movs	r3, #0
	if(!(module->master_slave_select_enable))
    63a2:	2c00      	cmp	r4, #0
    63a4:	d1f9      	bne.n	639a <spi_select_slave+0xa>
		if (select) {
    63a6:	2a00      	cmp	r2, #0
    63a8:	d058      	beq.n	645c <spi_select_slave+0xcc>
			if (slave->address_enabled) {
    63aa:	784b      	ldrb	r3, [r1, #1]
    63ac:	2b00      	cmp	r3, #0
    63ae:	d044      	beq.n	643a <spi_select_slave+0xaa>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    63b0:	6803      	ldr	r3, [r0, #0]
    63b2:	7e1b      	ldrb	r3, [r3, #24]
				if (!spi_is_ready_to_write(module)) {
    63b4:	07db      	lsls	r3, r3, #31
    63b6:	d410      	bmi.n	63da <spi_select_slave+0x4a>
					port_pin_set_output_level(slave->ss_pin, true);
    63b8:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    63ba:	09d1      	lsrs	r1, r2, #7
		return NULL;
    63bc:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    63be:	2900      	cmp	r1, #0
    63c0:	d104      	bne.n	63cc <spi_select_slave+0x3c>
		return &(ports[port_index]->Group[group_index]);
    63c2:	0953      	lsrs	r3, r2, #5
    63c4:	01db      	lsls	r3, r3, #7
    63c6:	492e      	ldr	r1, [pc, #184]	; (6480 <spi_select_slave+0xf0>)
    63c8:	468c      	mov	ip, r1
    63ca:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    63cc:	211f      	movs	r1, #31
    63ce:	4011      	ands	r1, r2
    63d0:	2201      	movs	r2, #1
    63d2:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    63d4:	619a      	str	r2, [r3, #24]
					return STATUS_BUSY;
    63d6:	2305      	movs	r3, #5
    63d8:	e7df      	b.n	639a <spi_select_slave+0xa>
				port_pin_set_output_level(slave->ss_pin, false);
    63da:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    63dc:	09d4      	lsrs	r4, r2, #7
		return NULL;
    63de:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    63e0:	2c00      	cmp	r4, #0
    63e2:	d104      	bne.n	63ee <spi_select_slave+0x5e>
		return &(ports[port_index]->Group[group_index]);
    63e4:	0953      	lsrs	r3, r2, #5
    63e6:	01db      	lsls	r3, r3, #7
    63e8:	4c25      	ldr	r4, [pc, #148]	; (6480 <spi_select_slave+0xf0>)
    63ea:	46a4      	mov	ip, r4
    63ec:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    63ee:	241f      	movs	r4, #31
    63f0:	4014      	ands	r4, r2
    63f2:	2201      	movs	r2, #1
    63f4:	40a2      	lsls	r2, r4
		port_base->OUTCLR.reg = pin_mask;
    63f6:	615a      	str	r2, [r3, #20]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    63f8:	6803      	ldr	r3, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    63fa:	7e1a      	ldrb	r2, [r3, #24]

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    63fc:	07d2      	lsls	r2, r2, #31
    63fe:	d501      	bpl.n	6404 <spi_select_slave+0x74>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    6400:	788a      	ldrb	r2, [r1, #2]
    6402:	629a      	str	r2, [r3, #40]	; 0x28
				if (!(module->receiver_enabled)) {
    6404:	79c2      	ldrb	r2, [r0, #7]
	return STATUS_OK;
    6406:	2300      	movs	r3, #0
				if (!(module->receiver_enabled)) {
    6408:	2a00      	cmp	r2, #0
    640a:	d1c6      	bne.n	639a <spi_select_slave+0xa>
	SercomSpi *const spi_module = &(module->hw->SPI);
    640c:	6802      	ldr	r2, [r0, #0]
					while (!spi_is_ready_to_read(module)) {
    640e:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    6410:	7e13      	ldrb	r3, [r2, #24]
    6412:	420b      	tst	r3, r1
    6414:	d0fc      	beq.n	6410 <spi_select_slave+0x80>
    6416:	7e11      	ldrb	r1, [r2, #24]
	return STATUS_OK;
    6418:	2300      	movs	r3, #0
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    641a:	0749      	lsls	r1, r1, #29
    641c:	d5bd      	bpl.n	639a <spi_select_slave+0xa>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    641e:	8b53      	ldrh	r3, [r2, #26]
    6420:	075b      	lsls	r3, r3, #29
    6422:	d501      	bpl.n	6428 <spi_select_slave+0x98>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    6424:	2304      	movs	r3, #4
    6426:	8353      	strh	r3, [r2, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    6428:	7983      	ldrb	r3, [r0, #6]
    642a:	2b01      	cmp	r3, #1
    642c:	d002      	beq.n	6434 <spi_select_slave+0xa4>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    642e:	6a93      	ldr	r3, [r2, #40]	; 0x28
    6430:	2300      	movs	r3, #0
    6432:	e7b2      	b.n	639a <spi_select_slave+0xa>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    6434:	6a93      	ldr	r3, [r2, #40]	; 0x28
    6436:	2300      	movs	r3, #0
    6438:	e7af      	b.n	639a <spi_select_slave+0xa>
				port_pin_set_output_level(slave->ss_pin, false);
    643a:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    643c:	09d1      	lsrs	r1, r2, #7
		return NULL;
    643e:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    6440:	2900      	cmp	r1, #0
    6442:	d104      	bne.n	644e <spi_select_slave+0xbe>
		return &(ports[port_index]->Group[group_index]);
    6444:	0953      	lsrs	r3, r2, #5
    6446:	01db      	lsls	r3, r3, #7
    6448:	490d      	ldr	r1, [pc, #52]	; (6480 <spi_select_slave+0xf0>)
    644a:	468c      	mov	ip, r1
    644c:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    644e:	211f      	movs	r1, #31
    6450:	4011      	ands	r1, r2
    6452:	2201      	movs	r2, #1
    6454:	408a      	lsls	r2, r1
		port_base->OUTCLR.reg = pin_mask;
    6456:	615a      	str	r2, [r3, #20]
	return STATUS_OK;
    6458:	2300      	movs	r3, #0
    645a:	e79e      	b.n	639a <spi_select_slave+0xa>
			port_pin_set_output_level(slave->ss_pin, true);
    645c:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    645e:	09d1      	lsrs	r1, r2, #7
		return NULL;
    6460:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    6462:	2900      	cmp	r1, #0
    6464:	d104      	bne.n	6470 <spi_select_slave+0xe0>
		return &(ports[port_index]->Group[group_index]);
    6466:	0953      	lsrs	r3, r2, #5
    6468:	01db      	lsls	r3, r3, #7
    646a:	4905      	ldr	r1, [pc, #20]	; (6480 <spi_select_slave+0xf0>)
    646c:	468c      	mov	ip, r1
    646e:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    6470:	211f      	movs	r1, #31
    6472:	4011      	ands	r1, r2
    6474:	2201      	movs	r2, #1
    6476:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    6478:	619a      	str	r2, [r3, #24]
	return STATUS_OK;
    647a:	2300      	movs	r3, #0
    647c:	e78d      	b.n	639a <spi_select_slave+0xa>
    647e:	46c0      	nop			; (mov r8, r8)
    6480:	40002800 	.word	0x40002800

00006484 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
    6484:	b5f0      	push	{r4, r5, r6, r7, lr}
    6486:	46de      	mov	lr, fp
    6488:	4657      	mov	r7, sl
    648a:	464e      	mov	r6, r9
    648c:	4645      	mov	r5, r8
    648e:	b5e0      	push	{r5, r6, r7, lr}
    6490:	b091      	sub	sp, #68	; 0x44
    6492:	0005      	movs	r5, r0
    6494:	000c      	movs	r4, r1
    6496:	0016      	movs	r6, r2
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
    6498:	6029      	str	r1, [r5, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    649a:	0008      	movs	r0, r1
    649c:	4bc4      	ldr	r3, [pc, #784]	; (67b0 <usart_init+0x32c>)
    649e:	4798      	blx	r3
    64a0:	0002      	movs	r2, r0
	uint32_t pm_index, gclk_index; 
#if (SAML22) || (SAMC20) 
	pm_index	= sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
	gclk_index	= sercom_index + SERCOM0_GCLK_ID_CORE;
#elif (SAML21) || (SAMR30) || (SAMR34) || (SAMR35) || (WLR089)
	if (sercom_index == 5) {
    64a2:	2805      	cmp	r0, #5
    64a4:	d00d      	beq.n	64c2 <usart_init+0x3e>
		pm_index     = MCLK_APBDMASK_SERCOM5_Pos;
		gclk_index   = SERCOM5_GCLK_ID_CORE;
	} else {
		pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    64a6:	0007      	movs	r7, r0
    64a8:	3712      	adds	r7, #18
		pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
    64aa:	0003      	movs	r3, r0
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    64ac:	6821      	ldr	r1, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
    64ae:	2005      	movs	r0, #5
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    64b0:	07c9      	lsls	r1, r1, #31
    64b2:	d509      	bpl.n	64c8 <usart_init+0x44>
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
}
    64b4:	b011      	add	sp, #68	; 0x44
    64b6:	bc3c      	pop	{r2, r3, r4, r5}
    64b8:	4690      	mov	r8, r2
    64ba:	4699      	mov	r9, r3
    64bc:	46a2      	mov	sl, r4
    64be:	46ab      	mov	fp, r5
    64c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		gclk_index   = SERCOM5_GCLK_ID_CORE;
    64c2:	2718      	movs	r7, #24
		pm_index     = MCLK_APBDMASK_SERCOM5_Pos;
    64c4:	2301      	movs	r3, #1
    64c6:	e7f1      	b.n	64ac <usart_init+0x28>
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    64c8:	6821      	ldr	r1, [r4, #0]
		return STATUS_ERR_DENIED;
    64ca:	3017      	adds	r0, #23
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    64cc:	0789      	lsls	r1, r1, #30
    64ce:	d4f1      	bmi.n	64b4 <usart_init+0x30>
	if (sercom_index == 5) {
    64d0:	2a05      	cmp	r2, #5
    64d2:	d049      	beq.n	6568 <usart_init+0xe4>
			MCLK->APBCMASK.reg |= mask;
    64d4:	49b7      	ldr	r1, [pc, #732]	; (67b4 <usart_init+0x330>)
    64d6:	69c8      	ldr	r0, [r1, #28]
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);	
    64d8:	2201      	movs	r2, #1
    64da:	409a      	lsls	r2, r3
    64dc:	0013      	movs	r3, r2
    64de:	4303      	orrs	r3, r0
    64e0:	61cb      	str	r3, [r1, #28]
	gclk_chan_conf.source_generator = config->generator_source;
    64e2:	a90f      	add	r1, sp, #60	; 0x3c
    64e4:	232d      	movs	r3, #45	; 0x2d
    64e6:	4698      	mov	r8, r3
    64e8:	5cf3      	ldrb	r3, [r6, r3]
    64ea:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    64ec:	b2ff      	uxtb	r7, r7
    64ee:	0038      	movs	r0, r7
    64f0:	4bb1      	ldr	r3, [pc, #708]	; (67b8 <usart_init+0x334>)
    64f2:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    64f4:	0038      	movs	r0, r7
    64f6:	4bb1      	ldr	r3, [pc, #708]	; (67bc <usart_init+0x338>)
    64f8:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    64fa:	4643      	mov	r3, r8
    64fc:	5cf0      	ldrb	r0, [r6, r3]
    64fe:	2100      	movs	r1, #0
    6500:	4baf      	ldr	r3, [pc, #700]	; (67c0 <usart_init+0x33c>)
    6502:	4798      	blx	r3
	module->character_size = config->character_size;
    6504:	7af3      	ldrb	r3, [r6, #11]
    6506:	716b      	strb	r3, [r5, #5]
	module->receiver_enabled = config->receiver_enable;
    6508:	2324      	movs	r3, #36	; 0x24
    650a:	5cf3      	ldrb	r3, [r6, r3]
    650c:	71ab      	strb	r3, [r5, #6]
	module->transmitter_enabled = config->transmitter_enable;
    650e:	2325      	movs	r3, #37	; 0x25
    6510:	5cf3      	ldrb	r3, [r6, r3]
    6512:	71eb      	strb	r3, [r5, #7]
	module->lin_slave_enabled = config->lin_slave_enable;
    6514:	7ef3      	ldrb	r3, [r6, #27]
    6516:	722b      	strb	r3, [r5, #8]
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
    6518:	7f33      	ldrb	r3, [r6, #28]
    651a:	726b      	strb	r3, [r5, #9]
	SercomUsart *const usart_hw = &(module->hw->USART);
    651c:	682b      	ldr	r3, [r5, #0]
    651e:	4698      	mov	r8, r3
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    6520:	0018      	movs	r0, r3
    6522:	4ba3      	ldr	r3, [pc, #652]	; (67b0 <usart_init+0x32c>)
    6524:	4798      	blx	r3
	if (sercom_index == 5) {
    6526:	2805      	cmp	r0, #5
    6528:	d026      	beq.n	6578 <usart_init+0xf4>
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    652a:	3012      	adds	r0, #18
	uint16_t baud  = 0;
    652c:	2200      	movs	r2, #0
    652e:	230e      	movs	r3, #14
    6530:	a906      	add	r1, sp, #24
    6532:	468c      	mov	ip, r1
    6534:	4463      	add	r3, ip
    6536:	801a      	strh	r2, [r3, #0]
	switch (config->sample_rate) {
    6538:	8a32      	ldrh	r2, [r6, #16]
    653a:	9202      	str	r2, [sp, #8]
    653c:	2380      	movs	r3, #128	; 0x80
    653e:	01db      	lsls	r3, r3, #7
    6540:	429a      	cmp	r2, r3
    6542:	d100      	bne.n	6546 <usart_init+0xc2>
    6544:	e0a7      	b.n	6696 <usart_init+0x212>
    6546:	d919      	bls.n	657c <usart_init+0xf8>
    6548:	23c0      	movs	r3, #192	; 0xc0
    654a:	01db      	lsls	r3, r3, #7
    654c:	9a02      	ldr	r2, [sp, #8]
    654e:	429a      	cmp	r2, r3
    6550:	d100      	bne.n	6554 <usart_init+0xd0>
    6552:	e09b      	b.n	668c <usart_init+0x208>
    6554:	2380      	movs	r3, #128	; 0x80
    6556:	021b      	lsls	r3, r3, #8
    6558:	429a      	cmp	r2, r3
    655a:	d000      	beq.n	655e <usart_init+0xda>
    655c:	e123      	b.n	67a6 <usart_init+0x322>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
    655e:	2303      	movs	r3, #3
    6560:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    6562:	2300      	movs	r3, #0
    6564:	9307      	str	r3, [sp, #28]
    6566:	e012      	b.n	658e <usart_init+0x10a>
			MCLK->APBDMASK.reg |= mask;
    6568:	4992      	ldr	r1, [pc, #584]	; (67b4 <usart_init+0x330>)
    656a:	6a08      	ldr	r0, [r1, #32]
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
    656c:	3a04      	subs	r2, #4
    656e:	409a      	lsls	r2, r3
    6570:	0013      	movs	r3, r2
    6572:	4303      	orrs	r3, r0
    6574:	620b      	str	r3, [r1, #32]
    6576:	e7b4      	b.n	64e2 <usart_init+0x5e>
		gclk_index   = SERCOM5_GCLK_ID_CORE;
    6578:	2018      	movs	r0, #24
    657a:	e7d7      	b.n	652c <usart_init+0xa8>
	switch (config->sample_rate) {
    657c:	2380      	movs	r3, #128	; 0x80
    657e:	019b      	lsls	r3, r3, #6
    6580:	429a      	cmp	r2, r3
    6582:	d000      	beq.n	6586 <usart_init+0x102>
    6584:	e10f      	b.n	67a6 <usart_init+0x322>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    6586:	2310      	movs	r3, #16
    6588:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    658a:	3b0f      	subs	r3, #15
    658c:	9307      	str	r3, [sp, #28]
	ctrla = (uint32_t)config->data_order |
    658e:	6833      	ldr	r3, [r6, #0]
    6590:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    6592:	68f3      	ldr	r3, [r6, #12]
    6594:	469b      	mov	fp, r3
		config->sample_adjustment |
    6596:	6973      	ldr	r3, [r6, #20]
    6598:	9303      	str	r3, [sp, #12]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    659a:	7e33      	ldrb	r3, [r6, #24]
    659c:	9304      	str	r3, [sp, #16]
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    659e:	2326      	movs	r3, #38	; 0x26
    65a0:	5cf3      	ldrb	r3, [r6, r3]
    65a2:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
    65a4:	6873      	ldr	r3, [r6, #4]
    65a6:	4699      	mov	r9, r3
	switch (transfer_mode)
    65a8:	2b00      	cmp	r3, #0
    65aa:	d100      	bne.n	65ae <usart_init+0x12a>
    65ac:	e09b      	b.n	66e6 <usart_init+0x262>
    65ae:	2380      	movs	r3, #128	; 0x80
    65b0:	055b      	lsls	r3, r3, #21
    65b2:	4599      	cmp	r9, r3
    65b4:	d104      	bne.n	65c0 <usart_init+0x13c>
			if (!config->use_external_clock) {
    65b6:	2327      	movs	r3, #39	; 0x27
    65b8:	5cf3      	ldrb	r3, [r6, r3]
    65ba:	2b00      	cmp	r3, #0
    65bc:	d100      	bne.n	65c0 <usart_init+0x13c>
    65be:	e080      	b.n	66c2 <usart_init+0x23e>
	if(config->encoding_format_enable) {
    65c0:	7e73      	ldrb	r3, [r6, #25]
    65c2:	2b00      	cmp	r3, #0
    65c4:	d002      	beq.n	65cc <usart_init+0x148>
		usart_hw->RXPL.reg = config->receive_pulse_length;
    65c6:	7eb3      	ldrb	r3, [r6, #26]
    65c8:	4642      	mov	r2, r8
    65ca:	7393      	strb	r3, [r2, #14]
	usart_hw->BAUD.reg = baud;
    65cc:	230e      	movs	r3, #14
    65ce:	aa06      	add	r2, sp, #24
    65d0:	4694      	mov	ip, r2
    65d2:	4463      	add	r3, ip
    65d4:	881b      	ldrh	r3, [r3, #0]
    65d6:	4642      	mov	r2, r8
    65d8:	8193      	strh	r3, [r2, #12]
	ctrla |= transfer_mode;
    65da:	9b05      	ldr	r3, [sp, #20]
    65dc:	465a      	mov	r2, fp
    65de:	4313      	orrs	r3, r2
    65e0:	9a03      	ldr	r2, [sp, #12]
    65e2:	4313      	orrs	r3, r2
    65e4:	464a      	mov	r2, r9
    65e6:	4313      	orrs	r3, r2
    65e8:	9f02      	ldr	r7, [sp, #8]
    65ea:	431f      	orrs	r7, r3
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    65ec:	9b04      	ldr	r3, [sp, #16]
    65ee:	021b      	lsls	r3, r3, #8
	ctrla |= transfer_mode;
    65f0:	431f      	orrs	r7, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    65f2:	4653      	mov	r3, sl
    65f4:	075b      	lsls	r3, r3, #29
	ctrla |= transfer_mode;
    65f6:	431f      	orrs	r7, r3
	if (config->use_external_clock == false) {
    65f8:	2327      	movs	r3, #39	; 0x27
    65fa:	5cf3      	ldrb	r3, [r6, r3]
    65fc:	2b00      	cmp	r3, #0
    65fe:	d101      	bne.n	6604 <usart_init+0x180>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
    6600:	3304      	adds	r3, #4
    6602:	431f      	orrs	r7, r3
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    6604:	7e73      	ldrb	r3, [r6, #25]
    6606:	029b      	lsls	r3, r3, #10
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    6608:	7f32      	ldrb	r2, [r6, #28]
    660a:	0252      	lsls	r2, r2, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    660c:	4313      	orrs	r3, r2
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    660e:	7f72      	ldrb	r2, [r6, #29]
    6610:	0212      	lsls	r2, r2, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    6612:	4313      	orrs	r3, r2
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    6614:	2224      	movs	r2, #36	; 0x24
    6616:	5cb2      	ldrb	r2, [r6, r2]
    6618:	0452      	lsls	r2, r2, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    661a:	4313      	orrs	r3, r2
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
    661c:	2225      	movs	r2, #37	; 0x25
    661e:	5cb2      	ldrb	r2, [r6, r2]
    6620:	0412      	lsls	r2, r2, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    6622:	4313      	orrs	r3, r2
	ctrlb |= (uint32_t)config->character_size;
    6624:	7ab1      	ldrb	r1, [r6, #10]
    6626:	7af2      	ldrb	r2, [r6, #11]
    6628:	4311      	orrs	r1, r2
    662a:	4319      	orrs	r1, r3
	if (config->parity != USART_PARITY_NONE) {
    662c:	8933      	ldrh	r3, [r6, #8]
    662e:	2bff      	cmp	r3, #255	; 0xff
    6630:	d07d      	beq.n	672e <usart_init+0x2aa>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
    6632:	2280      	movs	r2, #128	; 0x80
    6634:	0452      	lsls	r2, r2, #17
    6636:	4317      	orrs	r7, r2
		ctrlb |= config->parity;
    6638:	4319      	orrs	r1, r3
	if (config->run_in_standby || system_is_debugger_present()) {
    663a:	232c      	movs	r3, #44	; 0x2c
    663c:	5cf3      	ldrb	r3, [r6, r3]
    663e:	2b00      	cmp	r3, #0
    6640:	d103      	bne.n	664a <usart_init+0x1c6>
    6642:	4b60      	ldr	r3, [pc, #384]	; (67c4 <usart_init+0x340>)
    6644:	789b      	ldrb	r3, [r3, #2]
    6646:	079b      	lsls	r3, r3, #30
    6648:	d501      	bpl.n	664e <usart_init+0x1ca>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
    664a:	2380      	movs	r3, #128	; 0x80
    664c:	431f      	orrs	r7, r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    664e:	682a      	ldr	r2, [r5, #0]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    6650:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    6652:	2b00      	cmp	r3, #0
    6654:	d1fc      	bne.n	6650 <usart_init+0x1cc>
	usart_hw->CTRLB.reg = ctrlb;
    6656:	4643      	mov	r3, r8
    6658:	6059      	str	r1, [r3, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
    665a:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    665c:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    665e:	2b00      	cmp	r3, #0
    6660:	d1fc      	bne.n	665c <usart_init+0x1d8>
	usart_hw->CTRLA.reg = ctrla;
    6662:	4643      	mov	r3, r8
    6664:	601f      	str	r7, [r3, #0]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    6666:	ab0e      	add	r3, sp, #56	; 0x38
    6668:	2280      	movs	r2, #128	; 0x80
    666a:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    666c:	2200      	movs	r2, #0
    666e:	705a      	strb	r2, [r3, #1]
	config->powersave    = false;
    6670:	70da      	strb	r2, [r3, #3]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    6672:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
    6674:	6b33      	ldr	r3, [r6, #48]	; 0x30
    6676:	930a      	str	r3, [sp, #40]	; 0x28
    6678:	6b73      	ldr	r3, [r6, #52]	; 0x34
    667a:	930b      	str	r3, [sp, #44]	; 0x2c
    667c:	6bb3      	ldr	r3, [r6, #56]	; 0x38
    667e:	930c      	str	r3, [sp, #48]	; 0x30
    6680:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    6682:	9302      	str	r3, [sp, #8]
    6684:	930d      	str	r3, [sp, #52]	; 0x34
    6686:	2700      	movs	r7, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
    6688:	ae0a      	add	r6, sp, #40	; 0x28
    668a:	e05e      	b.n	674a <usart_init+0x2c6>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    668c:	2308      	movs	r3, #8
    668e:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    6690:	3b07      	subs	r3, #7
    6692:	9307      	str	r3, [sp, #28]
    6694:	e77b      	b.n	658e <usart_init+0x10a>
	ctrla = (uint32_t)config->data_order |
    6696:	6833      	ldr	r3, [r6, #0]
    6698:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    669a:	68f3      	ldr	r3, [r6, #12]
    669c:	469b      	mov	fp, r3
		config->sample_adjustment |
    669e:	6973      	ldr	r3, [r6, #20]
    66a0:	9303      	str	r3, [sp, #12]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    66a2:	7e33      	ldrb	r3, [r6, #24]
    66a4:	9304      	str	r3, [sp, #16]
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    66a6:	2326      	movs	r3, #38	; 0x26
    66a8:	5cf3      	ldrb	r3, [r6, r3]
    66aa:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
    66ac:	6873      	ldr	r3, [r6, #4]
    66ae:	4699      	mov	r9, r3
	switch (transfer_mode)
    66b0:	2b00      	cmp	r3, #0
    66b2:	d014      	beq.n	66de <usart_init+0x25a>
    66b4:	2380      	movs	r3, #128	; 0x80
    66b6:	055b      	lsls	r3, r3, #21
    66b8:	4599      	cmp	r9, r3
    66ba:	d100      	bne.n	66be <usart_init+0x23a>
    66bc:	e77b      	b.n	65b6 <usart_init+0x132>
	enum status_code status_code = STATUS_OK;
    66be:	2000      	movs	r0, #0
    66c0:	e020      	b.n	6704 <usart_init+0x280>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
    66c2:	6a33      	ldr	r3, [r6, #32]
    66c4:	001f      	movs	r7, r3
    66c6:	b2c0      	uxtb	r0, r0
    66c8:	4b3f      	ldr	r3, [pc, #252]	; (67c8 <usart_init+0x344>)
    66ca:	4798      	blx	r3
    66cc:	0001      	movs	r1, r0
    66ce:	220e      	movs	r2, #14
    66d0:	ab06      	add	r3, sp, #24
    66d2:	469c      	mov	ip, r3
    66d4:	4462      	add	r2, ip
    66d6:	0038      	movs	r0, r7
    66d8:	4b3c      	ldr	r3, [pc, #240]	; (67cc <usart_init+0x348>)
    66da:	4798      	blx	r3
    66dc:	e012      	b.n	6704 <usart_init+0x280>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    66de:	2308      	movs	r3, #8
    66e0:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    66e2:	2300      	movs	r3, #0
    66e4:	9307      	str	r3, [sp, #28]
			if (config->use_external_clock) {
    66e6:	2327      	movs	r3, #39	; 0x27
    66e8:	5cf3      	ldrb	r3, [r6, r3]
    66ea:	2b00      	cmp	r3, #0
    66ec:	d00e      	beq.n	670c <usart_init+0x288>
				status_code =
    66ee:	9b06      	ldr	r3, [sp, #24]
    66f0:	9300      	str	r3, [sp, #0]
    66f2:	9b07      	ldr	r3, [sp, #28]
    66f4:	220e      	movs	r2, #14
    66f6:	a906      	add	r1, sp, #24
    66f8:	468c      	mov	ip, r1
    66fa:	4462      	add	r2, ip
    66fc:	6ab1      	ldr	r1, [r6, #40]	; 0x28
    66fe:	6a30      	ldr	r0, [r6, #32]
    6700:	4f33      	ldr	r7, [pc, #204]	; (67d0 <usart_init+0x34c>)
    6702:	47b8      	blx	r7
	if (status_code != STATUS_OK) {
    6704:	2800      	cmp	r0, #0
    6706:	d000      	beq.n	670a <usart_init+0x286>
    6708:	e6d4      	b.n	64b4 <usart_init+0x30>
    670a:	e759      	b.n	65c0 <usart_init+0x13c>
						_sercom_get_async_baud_val(config->baudrate,
    670c:	6a33      	ldr	r3, [r6, #32]
    670e:	001f      	movs	r7, r3
    6710:	b2c0      	uxtb	r0, r0
    6712:	4b2d      	ldr	r3, [pc, #180]	; (67c8 <usart_init+0x344>)
    6714:	4798      	blx	r3
    6716:	0001      	movs	r1, r0
				status_code =
    6718:	9b06      	ldr	r3, [sp, #24]
    671a:	9300      	str	r3, [sp, #0]
    671c:	9b07      	ldr	r3, [sp, #28]
    671e:	220e      	movs	r2, #14
    6720:	a806      	add	r0, sp, #24
    6722:	4684      	mov	ip, r0
    6724:	4462      	add	r2, ip
    6726:	0038      	movs	r0, r7
    6728:	4f29      	ldr	r7, [pc, #164]	; (67d0 <usart_init+0x34c>)
    672a:	47b8      	blx	r7
    672c:	e7ea      	b.n	6704 <usart_init+0x280>
		if(config->lin_slave_enable) {
    672e:	7ef3      	ldrb	r3, [r6, #27]
    6730:	2b00      	cmp	r3, #0
    6732:	d082      	beq.n	663a <usart_init+0x1b6>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
    6734:	2380      	movs	r3, #128	; 0x80
    6736:	04db      	lsls	r3, r3, #19
    6738:	431f      	orrs	r7, r3
    673a:	e77e      	b.n	663a <usart_init+0x1b6>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    673c:	0020      	movs	r0, r4
    673e:	4b25      	ldr	r3, [pc, #148]	; (67d4 <usart_init+0x350>)
    6740:	4798      	blx	r3
    6742:	e007      	b.n	6754 <usart_init+0x2d0>
    6744:	3701      	adds	r7, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    6746:	2f04      	cmp	r7, #4
    6748:	d00d      	beq.n	6766 <usart_init+0x2e2>
    674a:	b2f9      	uxtb	r1, r7
		uint32_t current_pinmux = pad_pinmuxes[pad];
    674c:	00bb      	lsls	r3, r7, #2
    674e:	5998      	ldr	r0, [r3, r6]
		if (current_pinmux == PINMUX_DEFAULT) {
    6750:	2800      	cmp	r0, #0
    6752:	d0f3      	beq.n	673c <usart_init+0x2b8>
		if (current_pinmux != PINMUX_UNUSED) {
    6754:	1c43      	adds	r3, r0, #1
    6756:	d0f5      	beq.n	6744 <usart_init+0x2c0>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    6758:	a90e      	add	r1, sp, #56	; 0x38
    675a:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    675c:	0c00      	lsrs	r0, r0, #16
    675e:	b2c0      	uxtb	r0, r0
    6760:	4b1d      	ldr	r3, [pc, #116]	; (67d8 <usart_init+0x354>)
    6762:	4798      	blx	r3
    6764:	e7ee      	b.n	6744 <usart_init+0x2c0>
		module->callback[i]            = NULL;
    6766:	2300      	movs	r3, #0
    6768:	60eb      	str	r3, [r5, #12]
    676a:	612b      	str	r3, [r5, #16]
    676c:	616b      	str	r3, [r5, #20]
    676e:	61ab      	str	r3, [r5, #24]
    6770:	61eb      	str	r3, [r5, #28]
    6772:	622b      	str	r3, [r5, #32]
	module->tx_buffer_ptr              = NULL;
    6774:	62ab      	str	r3, [r5, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
    6776:	626b      	str	r3, [r5, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
    6778:	2200      	movs	r2, #0
    677a:	85eb      	strh	r3, [r5, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
    677c:	85ab      	strh	r3, [r5, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
    677e:	3330      	adds	r3, #48	; 0x30
    6780:	54ea      	strb	r2, [r5, r3]
	module->callback_enable_mask       = 0x00;
    6782:	3301      	adds	r3, #1
    6784:	54ea      	strb	r2, [r5, r3]
	module->rx_status                  = STATUS_OK;
    6786:	3301      	adds	r3, #1
    6788:	54ea      	strb	r2, [r5, r3]
	module->tx_status                  = STATUS_OK;
    678a:	3301      	adds	r3, #1
    678c:	54ea      	strb	r2, [r5, r3]
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    678e:	6828      	ldr	r0, [r5, #0]
    6790:	4b07      	ldr	r3, [pc, #28]	; (67b0 <usart_init+0x32c>)
    6792:	4798      	blx	r3
    6794:	0004      	movs	r4, r0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
    6796:	4911      	ldr	r1, [pc, #68]	; (67dc <usart_init+0x358>)
    6798:	4b11      	ldr	r3, [pc, #68]	; (67e0 <usart_init+0x35c>)
    679a:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    679c:	00a4      	lsls	r4, r4, #2
    679e:	4b11      	ldr	r3, [pc, #68]	; (67e4 <usart_init+0x360>)
    67a0:	50e5      	str	r5, [r4, r3]
	return status_code;
    67a2:	2000      	movs	r0, #0
    67a4:	e686      	b.n	64b4 <usart_init+0x30>
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    67a6:	2310      	movs	r3, #16
    67a8:	9306      	str	r3, [sp, #24]
	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    67aa:	2300      	movs	r3, #0
    67ac:	9307      	str	r3, [sp, #28]
    67ae:	e6ee      	b.n	658e <usart_init+0x10a>
    67b0:	00005fad 	.word	0x00005fad
    67b4:	40000400 	.word	0x40000400
    67b8:	000072a9 	.word	0x000072a9
    67bc:	00007239 	.word	0x00007239
    67c0:	00005e05 	.word	0x00005e05
    67c4:	41002000 	.word	0x41002000
    67c8:	000072cd 	.word	0x000072cd
    67cc:	00005d47 	.word	0x00005d47
    67d0:	00005d71 	.word	0x00005d71
    67d4:	00005e51 	.word	0x00005e51
    67d8:	000073d5 	.word	0x000073d5
    67dc:	000069cd 	.word	0x000069cd
    67e0:	00005fe9 	.word	0x00005fe9
    67e4:	20002238 	.word	0x20002238

000067e8 <usart_write_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    67e8:	79c2      	ldrb	r2, [r0, #7]
		return STATUS_ERR_DENIED;
    67ea:	231c      	movs	r3, #28
	if (!(module->transmitter_enabled)) {
    67ec:	2a00      	cmp	r2, #0
    67ee:	d101      	bne.n	67f4 <usart_write_wait+0xc>
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
		/* Wait until data is sent */
	}

	return STATUS_OK;
}
    67f0:	0018      	movs	r0, r3
    67f2:	4770      	bx	lr
	if (module->remaining_tx_buffer_length > 0) {
    67f4:	8dc2      	ldrh	r2, [r0, #46]	; 0x2e
    67f6:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    67f8:	3b17      	subs	r3, #23
	if (module->remaining_tx_buffer_length > 0) {
    67fa:	2a00      	cmp	r2, #0
    67fc:	d1f8      	bne.n	67f0 <usart_write_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
    67fe:	6802      	ldr	r2, [r0, #0]
	usart_hw->DATA.reg = tx_data;
    6800:	8511      	strh	r1, [r2, #40]	; 0x28
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
    6802:	2102      	movs	r1, #2
    6804:	7e13      	ldrb	r3, [r2, #24]
    6806:	420b      	tst	r3, r1
    6808:	d0fc      	beq.n	6804 <usart_write_wait+0x1c>
	return STATUS_OK;
    680a:	2300      	movs	r3, #0
    680c:	e7f0      	b.n	67f0 <usart_write_wait+0x8>

0000680e <usart_read_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    680e:	7982      	ldrb	r2, [r0, #6]
		return STATUS_ERR_DENIED;
    6810:	231c      	movs	r3, #28
	if (!(module->receiver_enabled)) {
    6812:	2a00      	cmp	r2, #0
    6814:	d101      	bne.n	681a <usart_read_wait+0xc>

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;

	return STATUS_OK;
}
    6816:	0018      	movs	r0, r3
    6818:	4770      	bx	lr
	if (module->remaining_rx_buffer_length > 0) {
    681a:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
    681c:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    681e:	3b17      	subs	r3, #23
	if (module->remaining_rx_buffer_length > 0) {
    6820:	2a00      	cmp	r2, #0
    6822:	d1f8      	bne.n	6816 <usart_read_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
    6824:	6802      	ldr	r2, [r0, #0]
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
    6826:	7e10      	ldrb	r0, [r2, #24]
    6828:	0740      	lsls	r0, r0, #29
    682a:	d5f4      	bpl.n	6816 <usart_read_wait+0x8>
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    682c:	8b53      	ldrh	r3, [r2, #26]
    682e:	b2db      	uxtb	r3, r3
	if (error_code) {
    6830:	0698      	lsls	r0, r3, #26
    6832:	d01d      	beq.n	6870 <usart_read_wait+0x62>
		if (error_code & SERCOM_USART_STATUS_FERR) {
    6834:	0798      	lsls	r0, r3, #30
    6836:	d503      	bpl.n	6840 <usart_read_wait+0x32>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    6838:	2302      	movs	r3, #2
    683a:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_FORMAT;
    683c:	3318      	adds	r3, #24
    683e:	e7ea      	b.n	6816 <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    6840:	0758      	lsls	r0, r3, #29
    6842:	d503      	bpl.n	684c <usart_read_wait+0x3e>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    6844:	2304      	movs	r3, #4
    6846:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_OVERFLOW;
    6848:	331a      	adds	r3, #26
    684a:	e7e4      	b.n	6816 <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
    684c:	07d8      	lsls	r0, r3, #31
    684e:	d503      	bpl.n	6858 <usart_read_wait+0x4a>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    6850:	2301      	movs	r3, #1
    6852:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_DATA;
    6854:	3312      	adds	r3, #18
    6856:	e7de      	b.n	6816 <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_ISF) {
    6858:	06d8      	lsls	r0, r3, #27
    685a:	d503      	bpl.n	6864 <usart_read_wait+0x56>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    685c:	2310      	movs	r3, #16
    685e:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PROTOCOL;
    6860:	3332      	adds	r3, #50	; 0x32
    6862:	e7d8      	b.n	6816 <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_COLL) {
    6864:	069b      	lsls	r3, r3, #26
    6866:	d503      	bpl.n	6870 <usart_read_wait+0x62>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    6868:	2320      	movs	r3, #32
    686a:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PACKET_COLLISION;
    686c:	3321      	adds	r3, #33	; 0x21
    686e:	e7d2      	b.n	6816 <usart_read_wait+0x8>
	*rx_data = usart_hw->DATA.reg;
    6870:	8d13      	ldrh	r3, [r2, #40]	; 0x28
    6872:	800b      	strh	r3, [r1, #0]
	return STATUS_OK;
    6874:	2300      	movs	r3, #0
    6876:	e7ce      	b.n	6816 <usart_read_wait+0x8>

00006878 <usart_write_buffer_wait>:
 */
enum status_code usart_write_buffer_wait(
		struct usart_module *const module,
		const uint8_t *tx_data,
		uint16_t length)
{
    6878:	b5f0      	push	{r4, r5, r6, r7, lr}
    687a:	46ce      	mov	lr, r9
    687c:	4647      	mov	r7, r8
    687e:	b580      	push	{r7, lr}
    6880:	b083      	sub	sp, #12
    6882:	0005      	movs	r5, r0
    6884:	9101      	str	r1, [sp, #4]
	Assert(module);
	Assert(module->hw);

	/* Check if the buffer length is valid */
	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    6886:	2017      	movs	r0, #23
	if (length == 0) {
    6888:	2a00      	cmp	r2, #0
    688a:	d104      	bne.n	6896 <usart_write_buffer_wait+0x1e>
			return STATUS_ERR_TIMEOUT;
		}
	}

	return STATUS_OK;
}
    688c:	b003      	add	sp, #12
    688e:	bc0c      	pop	{r2, r3}
    6890:	4690      	mov	r8, r2
    6892:	4699      	mov	r9, r3
    6894:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!(module->transmitter_enabled)) {
    6896:	79eb      	ldrb	r3, [r5, #7]
		return STATUS_ERR_DENIED;
    6898:	3005      	adds	r0, #5
	if (!(module->transmitter_enabled)) {
    689a:	2b00      	cmp	r3, #0
    689c:	d0f6      	beq.n	688c <usart_write_buffer_wait+0x14>
	SercomUsart *const usart_hw = &(module->hw->USART);
    689e:	682c      	ldr	r4, [r5, #0]
	while (length--) {
    68a0:	3a01      	subs	r2, #1
    68a2:	b293      	uxth	r3, r2
    68a4:	4699      	mov	r9, r3
    68a6:	2600      	movs	r6, #0
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) {
    68a8:	2701      	movs	r7, #1
	while (length--) {
    68aa:	4b20      	ldr	r3, [pc, #128]	; (692c <usart_write_buffer_wait+0xb4>)
    68ac:	4698      	mov	r8, r3
    68ae:	e011      	b.n	68d4 <usart_write_buffer_wait+0x5c>
		uint16_t data_to_send = tx_data[tx_pos++];
    68b0:	1c73      	adds	r3, r6, #1
    68b2:	b29b      	uxth	r3, r3
    68b4:	9a01      	ldr	r2, [sp, #4]
    68b6:	5d91      	ldrb	r1, [r2, r6]
		if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    68b8:	796a      	ldrb	r2, [r5, #5]
    68ba:	2a01      	cmp	r2, #1
    68bc:	d017      	beq.n	68ee <usart_write_buffer_wait+0x76>
		uint16_t data_to_send = tx_data[tx_pos++];
    68be:	b289      	uxth	r1, r1
    68c0:	001e      	movs	r6, r3
		usart_write_wait(module, data_to_send);
    68c2:	0028      	movs	r0, r5
    68c4:	4b1a      	ldr	r3, [pc, #104]	; (6930 <usart_write_buffer_wait+0xb8>)
    68c6:	4798      	blx	r3
	while (length--) {
    68c8:	464b      	mov	r3, r9
    68ca:	3b01      	subs	r3, #1
    68cc:	b29b      	uxth	r3, r3
    68ce:	4699      	mov	r9, r3
    68d0:	4543      	cmp	r3, r8
    68d2:	d013      	beq.n	68fc <usart_write_buffer_wait+0x84>
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) {
    68d4:	7e23      	ldrb	r3, [r4, #24]
    68d6:	423b      	tst	r3, r7
    68d8:	d1ea      	bne.n	68b0 <usart_write_buffer_wait+0x38>
    68da:	4b14      	ldr	r3, [pc, #80]	; (692c <usart_write_buffer_wait+0xb4>)
    68dc:	7e22      	ldrb	r2, [r4, #24]
    68de:	423a      	tst	r2, r7
    68e0:	d1e6      	bne.n	68b0 <usart_write_buffer_wait+0x38>
			} else if (i == USART_TIMEOUT) {
    68e2:	2b01      	cmp	r3, #1
    68e4:	d019      	beq.n	691a <usart_write_buffer_wait+0xa2>
    68e6:	3b01      	subs	r3, #1
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
    68e8:	2b00      	cmp	r3, #0
    68ea:	d1f7      	bne.n	68dc <usart_write_buffer_wait+0x64>
    68ec:	e7e0      	b.n	68b0 <usart_write_buffer_wait+0x38>
			data_to_send |= (tx_data[tx_pos++] << 8);
    68ee:	3602      	adds	r6, #2
    68f0:	b2b6      	uxth	r6, r6
    68f2:	9a01      	ldr	r2, [sp, #4]
    68f4:	5cd3      	ldrb	r3, [r2, r3]
    68f6:	021b      	lsls	r3, r3, #8
    68f8:	4319      	orrs	r1, r3
    68fa:	e7e2      	b.n	68c2 <usart_write_buffer_wait+0x4a>
		if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) {
    68fc:	7e23      	ldrb	r3, [r4, #24]
    68fe:	079b      	lsls	r3, r3, #30
    6900:	d40d      	bmi.n	691e <usart_write_buffer_wait+0xa6>
    6902:	4b0a      	ldr	r3, [pc, #40]	; (692c <usart_write_buffer_wait+0xb4>)
    6904:	2102      	movs	r1, #2
    6906:	7e22      	ldrb	r2, [r4, #24]
    6908:	420a      	tst	r2, r1
    690a:	d10a      	bne.n	6922 <usart_write_buffer_wait+0xaa>
		} else if (i == USART_TIMEOUT) {
    690c:	2b01      	cmp	r3, #1
    690e:	d00a      	beq.n	6926 <usart_write_buffer_wait+0xae>
    6910:	3b01      	subs	r3, #1
	for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
    6912:	2b00      	cmp	r3, #0
    6914:	d1f7      	bne.n	6906 <usart_write_buffer_wait+0x8e>
	return STATUS_OK;
    6916:	2000      	movs	r0, #0
    6918:	e7b8      	b.n	688c <usart_write_buffer_wait+0x14>
				return STATUS_ERR_TIMEOUT;
    691a:	2012      	movs	r0, #18
    691c:	e7b6      	b.n	688c <usart_write_buffer_wait+0x14>
	return STATUS_OK;
    691e:	2000      	movs	r0, #0
    6920:	e7b4      	b.n	688c <usart_write_buffer_wait+0x14>
    6922:	2000      	movs	r0, #0
    6924:	e7b2      	b.n	688c <usart_write_buffer_wait+0x14>
			return STATUS_ERR_TIMEOUT;
    6926:	2012      	movs	r0, #18
    6928:	e7b0      	b.n	688c <usart_write_buffer_wait+0x14>
    692a:	46c0      	nop			; (mov r8, r8)
    692c:	0000ffff 	.word	0x0000ffff
    6930:	000067e9 	.word	0x000067e9

00006934 <usart_read_buffer_wait>:
 */
enum status_code usart_read_buffer_wait(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
    6934:	b5f0      	push	{r4, r5, r6, r7, lr}
    6936:	46d6      	mov	lr, sl
    6938:	b500      	push	{lr}
    693a:	b084      	sub	sp, #16
    693c:	0004      	movs	r4, r0
    693e:	9101      	str	r1, [sp, #4]
	Assert(module);
	Assert(module->hw);

	/* Check if the buffer length is valid */
	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    6940:	2017      	movs	r0, #23
	if (length == 0) {
    6942:	2a00      	cmp	r2, #0
    6944:	d103      	bne.n	694e <usart_read_buffer_wait+0x1a>
			rx_data[rx_pos++] = (received_data >> 8);
		}
	}

	return STATUS_OK;
}
    6946:	b004      	add	sp, #16
    6948:	bc04      	pop	{r2}
    694a:	4692      	mov	sl, r2
    694c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!(module->receiver_enabled)) {
    694e:	79a3      	ldrb	r3, [r4, #6]
		return STATUS_ERR_DENIED;
    6950:	3005      	adds	r0, #5
	if (!(module->receiver_enabled)) {
    6952:	2b00      	cmp	r3, #0
    6954:	d0f7      	beq.n	6946 <usart_read_buffer_wait+0x12>
	SercomUsart *const usart_hw = &(module->hw->USART);
    6956:	6826      	ldr	r6, [r4, #0]
	while (length--) {
    6958:	3a01      	subs	r2, #1
    695a:	b293      	uxth	r3, r2
    695c:	469a      	mov	sl, r3
    695e:	2500      	movs	r5, #0
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) {
    6960:	2704      	movs	r7, #4
    6962:	e019      	b.n	6998 <usart_read_buffer_wait+0x64>
		uint16_t received_data = 0;
    6964:	2300      	movs	r3, #0
    6966:	aa02      	add	r2, sp, #8
    6968:	80d3      	strh	r3, [r2, #6]
		retval = usart_read_wait(module, &received_data);
    696a:	1d91      	adds	r1, r2, #6
    696c:	0020      	movs	r0, r4
    696e:	4b15      	ldr	r3, [pc, #84]	; (69c4 <usart_read_buffer_wait+0x90>)
    6970:	4798      	blx	r3
		if (retval != STATUS_OK) {
    6972:	2800      	cmp	r0, #0
    6974:	d1e7      	bne.n	6946 <usart_read_buffer_wait+0x12>
		rx_data[rx_pos++] = received_data;
    6976:	1c69      	adds	r1, r5, #1
    6978:	b289      	uxth	r1, r1
    697a:	ab02      	add	r3, sp, #8
    697c:	88db      	ldrh	r3, [r3, #6]
    697e:	9a01      	ldr	r2, [sp, #4]
    6980:	5553      	strb	r3, [r2, r5]
		if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    6982:	7962      	ldrb	r2, [r4, #5]
    6984:	2a01      	cmp	r2, #1
    6986:	d014      	beq.n	69b2 <usart_read_buffer_wait+0x7e>
		rx_data[rx_pos++] = received_data;
    6988:	000d      	movs	r5, r1
	while (length--) {
    698a:	4653      	mov	r3, sl
    698c:	3b01      	subs	r3, #1
    698e:	b29b      	uxth	r3, r3
    6990:	469a      	mov	sl, r3
    6992:	4b0d      	ldr	r3, [pc, #52]	; (69c8 <usart_read_buffer_wait+0x94>)
    6994:	459a      	cmp	sl, r3
    6996:	d0d6      	beq.n	6946 <usart_read_buffer_wait+0x12>
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) {
    6998:	7e33      	ldrb	r3, [r6, #24]
    699a:	423b      	tst	r3, r7
    699c:	d1e2      	bne.n	6964 <usart_read_buffer_wait+0x30>
    699e:	4b0a      	ldr	r3, [pc, #40]	; (69c8 <usart_read_buffer_wait+0x94>)
    69a0:	7e32      	ldrb	r2, [r6, #24]
    69a2:	423a      	tst	r2, r7
    69a4:	d1de      	bne.n	6964 <usart_read_buffer_wait+0x30>
			} else if (i == USART_TIMEOUT) {
    69a6:	2b01      	cmp	r3, #1
    69a8:	d009      	beq.n	69be <usart_read_buffer_wait+0x8a>
    69aa:	3b01      	subs	r3, #1
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
    69ac:	2b00      	cmp	r3, #0
    69ae:	d1f7      	bne.n	69a0 <usart_read_buffer_wait+0x6c>
    69b0:	e7d8      	b.n	6964 <usart_read_buffer_wait+0x30>
			rx_data[rx_pos++] = (received_data >> 8);
    69b2:	3502      	adds	r5, #2
    69b4:	b2ad      	uxth	r5, r5
    69b6:	0a1b      	lsrs	r3, r3, #8
    69b8:	9a01      	ldr	r2, [sp, #4]
    69ba:	5453      	strb	r3, [r2, r1]
    69bc:	e7e5      	b.n	698a <usart_read_buffer_wait+0x56>
				return STATUS_ERR_TIMEOUT;
    69be:	2012      	movs	r0, #18
    69c0:	e7c1      	b.n	6946 <usart_read_buffer_wait+0x12>
    69c2:	46c0      	nop			; (mov r8, r8)
    69c4:	0000680f 	.word	0x0000680f
    69c8:	0000ffff 	.word	0x0000ffff

000069cc <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
    69cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
    69ce:	0080      	lsls	r0, r0, #2
    69d0:	4b62      	ldr	r3, [pc, #392]	; (6b5c <_usart_interrupt_handler+0x190>)
    69d2:	58c5      	ldr	r5, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
    69d4:	682c      	ldr	r4, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    69d6:	69e3      	ldr	r3, [r4, #28]
	while (usart_is_syncing(module)) {
    69d8:	2b00      	cmp	r3, #0
    69da:	d1fc      	bne.n	69d6 <_usart_interrupt_handler+0xa>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    69dc:	7e23      	ldrb	r3, [r4, #24]
	interrupt_status &= usart_hw->INTENSET.reg;
    69de:	7da6      	ldrb	r6, [r4, #22]
    69e0:	401e      	ands	r6, r3
	callback_status = module->callback_reg_mask &
    69e2:	2330      	movs	r3, #48	; 0x30
    69e4:	5ceb      	ldrb	r3, [r5, r3]
    69e6:	2231      	movs	r2, #49	; 0x31
    69e8:	5caf      	ldrb	r7, [r5, r2]
    69ea:	401f      	ands	r7, r3
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    69ec:	07f3      	lsls	r3, r6, #31
    69ee:	d522      	bpl.n	6a36 <_usart_interrupt_handler+0x6a>
		if (module->remaining_tx_buffer_length) {
    69f0:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    69f2:	b29b      	uxth	r3, r3
    69f4:	2b00      	cmp	r3, #0
    69f6:	d01c      	beq.n	6a32 <_usart_interrupt_handler+0x66>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    69f8:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    69fa:	7813      	ldrb	r3, [r2, #0]
    69fc:	b2db      	uxtb	r3, r3
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
    69fe:	1c51      	adds	r1, r2, #1
    6a00:	62a9      	str	r1, [r5, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    6a02:	7969      	ldrb	r1, [r5, #5]
    6a04:	2901      	cmp	r1, #1
    6a06:	d00e      	beq.n	6a26 <_usart_interrupt_handler+0x5a>
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    6a08:	b29b      	uxth	r3, r3
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    6a0a:	05db      	lsls	r3, r3, #23
    6a0c:	0ddb      	lsrs	r3, r3, #23
    6a0e:	8523      	strh	r3, [r4, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
    6a10:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    6a12:	3b01      	subs	r3, #1
    6a14:	b29b      	uxth	r3, r3
    6a16:	85eb      	strh	r3, [r5, #46]	; 0x2e
    6a18:	2b00      	cmp	r3, #0
    6a1a:	d10c      	bne.n	6a36 <_usart_interrupt_handler+0x6a>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    6a1c:	3301      	adds	r3, #1
    6a1e:	7523      	strb	r3, [r4, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    6a20:	3301      	adds	r3, #1
    6a22:	75a3      	strb	r3, [r4, #22]
    6a24:	e007      	b.n	6a36 <_usart_interrupt_handler+0x6a>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    6a26:	7851      	ldrb	r1, [r2, #1]
    6a28:	0209      	lsls	r1, r1, #8
    6a2a:	430b      	orrs	r3, r1
				(module->tx_buffer_ptr)++;
    6a2c:	3202      	adds	r2, #2
    6a2e:	62aa      	str	r2, [r5, #40]	; 0x28
    6a30:	e7eb      	b.n	6a0a <_usart_interrupt_handler+0x3e>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    6a32:	2301      	movs	r3, #1
    6a34:	7523      	strb	r3, [r4, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    6a36:	07b3      	lsls	r3, r6, #30
    6a38:	d506      	bpl.n	6a48 <_usart_interrupt_handler+0x7c>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    6a3a:	2302      	movs	r3, #2
    6a3c:	7523      	strb	r3, [r4, #20]
		module->tx_status = STATUS_OK;
    6a3e:	2200      	movs	r2, #0
    6a40:	3331      	adds	r3, #49	; 0x31
    6a42:	54ea      	strb	r2, [r5, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    6a44:	07fb      	lsls	r3, r7, #31
    6a46:	d41a      	bmi.n	6a7e <_usart_interrupt_handler+0xb2>
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    6a48:	0773      	lsls	r3, r6, #29
    6a4a:	d565      	bpl.n	6b18 <_usart_interrupt_handler+0x14c>

		if (module->remaining_rx_buffer_length) {
    6a4c:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    6a4e:	b29b      	uxth	r3, r3
    6a50:	2b00      	cmp	r3, #0
    6a52:	d05f      	beq.n	6b14 <_usart_interrupt_handler+0x148>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    6a54:	8b63      	ldrh	r3, [r4, #26]
    6a56:	b2db      	uxtb	r3, r3
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
    6a58:	071a      	lsls	r2, r3, #28
    6a5a:	d414      	bmi.n	6a86 <_usart_interrupt_handler+0xba>
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    6a5c:	223f      	movs	r2, #63	; 0x3f
    6a5e:	4013      	ands	r3, r2
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
    6a60:	2b00      	cmp	r3, #0
    6a62:	d034      	beq.n	6ace <_usart_interrupt_handler+0x102>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    6a64:	079a      	lsls	r2, r3, #30
    6a66:	d511      	bpl.n	6a8c <_usart_interrupt_handler+0xc0>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    6a68:	221a      	movs	r2, #26
    6a6a:	2332      	movs	r3, #50	; 0x32
    6a6c:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    6a6e:	3b30      	subs	r3, #48	; 0x30
    6a70:	8363      	strh	r3, [r4, #26]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
    6a72:	077b      	lsls	r3, r7, #29
    6a74:	d550      	bpl.n	6b18 <_usart_interrupt_handler+0x14c>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    6a76:	0028      	movs	r0, r5
    6a78:	696b      	ldr	r3, [r5, #20]
    6a7a:	4798      	blx	r3
    6a7c:	e04c      	b.n	6b18 <_usart_interrupt_handler+0x14c>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    6a7e:	0028      	movs	r0, r5
    6a80:	68eb      	ldr	r3, [r5, #12]
    6a82:	4798      	blx	r3
    6a84:	e7e0      	b.n	6a48 <_usart_interrupt_handler+0x7c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
    6a86:	2237      	movs	r2, #55	; 0x37
    6a88:	4013      	ands	r3, r2
    6a8a:	e7e9      	b.n	6a60 <_usart_interrupt_handler+0x94>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    6a8c:	075a      	lsls	r2, r3, #29
    6a8e:	d505      	bpl.n	6a9c <_usart_interrupt_handler+0xd0>
					module->rx_status = STATUS_ERR_OVERFLOW;
    6a90:	221e      	movs	r2, #30
    6a92:	2332      	movs	r3, #50	; 0x32
    6a94:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    6a96:	3b2e      	subs	r3, #46	; 0x2e
    6a98:	8363      	strh	r3, [r4, #26]
    6a9a:	e7ea      	b.n	6a72 <_usart_interrupt_handler+0xa6>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    6a9c:	07da      	lsls	r2, r3, #31
    6a9e:	d505      	bpl.n	6aac <_usart_interrupt_handler+0xe0>
					module->rx_status = STATUS_ERR_BAD_DATA;
    6aa0:	2213      	movs	r2, #19
    6aa2:	2332      	movs	r3, #50	; 0x32
    6aa4:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    6aa6:	3b31      	subs	r3, #49	; 0x31
    6aa8:	8363      	strh	r3, [r4, #26]
    6aaa:	e7e2      	b.n	6a72 <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_ISF) {
    6aac:	06da      	lsls	r2, r3, #27
    6aae:	d505      	bpl.n	6abc <_usart_interrupt_handler+0xf0>
					module->rx_status = STATUS_ERR_PROTOCOL;
    6ab0:	2242      	movs	r2, #66	; 0x42
    6ab2:	2332      	movs	r3, #50	; 0x32
    6ab4:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    6ab6:	3b22      	subs	r3, #34	; 0x22
    6ab8:	8363      	strh	r3, [r4, #26]
    6aba:	e7da      	b.n	6a72 <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_COLL) {
    6abc:	2220      	movs	r2, #32
    6abe:	421a      	tst	r2, r3
    6ac0:	d0d7      	beq.n	6a72 <_usart_interrupt_handler+0xa6>
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
    6ac2:	3221      	adds	r2, #33	; 0x21
    6ac4:	2332      	movs	r3, #50	; 0x32
    6ac6:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    6ac8:	3b12      	subs	r3, #18
    6aca:	8363      	strh	r3, [r4, #26]
    6acc:	e7d1      	b.n	6a72 <_usart_interrupt_handler+0xa6>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    6ace:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    6ad0:	05db      	lsls	r3, r3, #23
    6ad2:	0ddb      	lsrs	r3, r3, #23

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
    6ad4:	b2da      	uxtb	r2, r3
    6ad6:	6a69      	ldr	r1, [r5, #36]	; 0x24
    6ad8:	700a      	strb	r2, [r1, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
    6ada:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    6adc:	1c51      	adds	r1, r2, #1
    6ade:	6269      	str	r1, [r5, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    6ae0:	7969      	ldrb	r1, [r5, #5]
    6ae2:	2901      	cmp	r1, #1
    6ae4:	d010      	beq.n	6b08 <_usart_interrupt_handler+0x13c>
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
    6ae6:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    6ae8:	3b01      	subs	r3, #1
    6aea:	b29b      	uxth	r3, r3
    6aec:	85ab      	strh	r3, [r5, #44]	; 0x2c
    6aee:	2b00      	cmp	r3, #0
    6af0:	d112      	bne.n	6b18 <_usart_interrupt_handler+0x14c>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    6af2:	3304      	adds	r3, #4
    6af4:	7523      	strb	r3, [r4, #20]
					module->rx_status = STATUS_OK;
    6af6:	2200      	movs	r2, #0
    6af8:	332e      	adds	r3, #46	; 0x2e
    6afa:	54ea      	strb	r2, [r5, r3]

					/* Run callback if registered and enabled */
					if (callback_status
    6afc:	07bb      	lsls	r3, r7, #30
    6afe:	d50b      	bpl.n	6b18 <_usart_interrupt_handler+0x14c>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    6b00:	0028      	movs	r0, r5
    6b02:	692b      	ldr	r3, [r5, #16]
    6b04:	4798      	blx	r3
    6b06:	e007      	b.n	6b18 <_usart_interrupt_handler+0x14c>
					*(module->rx_buffer_ptr) = (received_data >> 8);
    6b08:	0a1b      	lsrs	r3, r3, #8
    6b0a:	7053      	strb	r3, [r2, #1]
					module->rx_buffer_ptr += 1;
    6b0c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    6b0e:	3301      	adds	r3, #1
    6b10:	626b      	str	r3, [r5, #36]	; 0x24
    6b12:	e7e8      	b.n	6ae6 <_usart_interrupt_handler+0x11a>
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    6b14:	2304      	movs	r3, #4
    6b16:	7523      	strb	r3, [r4, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    6b18:	06f3      	lsls	r3, r6, #27
    6b1a:	d504      	bpl.n	6b26 <_usart_interrupt_handler+0x15a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    6b1c:	2310      	movs	r3, #16
    6b1e:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    6b20:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    6b22:	06fb      	lsls	r3, r7, #27
    6b24:	d40e      	bmi.n	6b44 <_usart_interrupt_handler+0x178>
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    6b26:	06b3      	lsls	r3, r6, #26
    6b28:	d504      	bpl.n	6b34 <_usart_interrupt_handler+0x168>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    6b2a:	2320      	movs	r3, #32
    6b2c:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    6b2e:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    6b30:	073b      	lsls	r3, r7, #28
    6b32:	d40b      	bmi.n	6b4c <_usart_interrupt_handler+0x180>
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    6b34:	0733      	lsls	r3, r6, #28
    6b36:	d504      	bpl.n	6b42 <_usart_interrupt_handler+0x176>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    6b38:	2308      	movs	r3, #8
    6b3a:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    6b3c:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    6b3e:	06bb      	lsls	r3, r7, #26
    6b40:	d408      	bmi.n	6b54 <_usart_interrupt_handler+0x188>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
		}
	}
#endif
}
    6b42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    6b44:	0028      	movs	r0, r5
    6b46:	69eb      	ldr	r3, [r5, #28]
    6b48:	4798      	blx	r3
    6b4a:	e7ec      	b.n	6b26 <_usart_interrupt_handler+0x15a>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    6b4c:	0028      	movs	r0, r5
    6b4e:	69ab      	ldr	r3, [r5, #24]
    6b50:	4798      	blx	r3
    6b52:	e7ef      	b.n	6b34 <_usart_interrupt_handler+0x168>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    6b54:	6a2b      	ldr	r3, [r5, #32]
    6b56:	0028      	movs	r0, r5
    6b58:	4798      	blx	r3
}
    6b5a:	e7f2      	b.n	6b42 <_usart_interrupt_handler+0x176>
    6b5c:	20002238 	.word	0x20002238

00006b60 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    6b60:	b510      	push	{r4, lr}
	switch (clock_source) {
    6b62:	2808      	cmp	r0, #8
    6b64:	d803      	bhi.n	6b6e <system_clock_source_get_hz+0xe>
    6b66:	0080      	lsls	r0, r0, #2
    6b68:	4b1c      	ldr	r3, [pc, #112]	; (6bdc <system_clock_source_get_hz+0x7c>)
    6b6a:	581b      	ldr	r3, [r3, r0]
    6b6c:	469f      	mov	pc, r3
		}

		return _system_clock_inst.dpll.frequency;

	default:
		return 0;
    6b6e:	2000      	movs	r0, #0
    6b70:	e032      	b.n	6bd8 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.xosc.frequency;
    6b72:	4b1b      	ldr	r3, [pc, #108]	; (6be0 <system_clock_source_get_hz+0x80>)
    6b74:	6918      	ldr	r0, [r3, #16]
    6b76:	e02f      	b.n	6bd8 <system_clock_source_get_hz+0x78>
		return (OSCCTRL->OSC16MCTRL.bit.FSEL+1)*4000000UL;
    6b78:	4b1a      	ldr	r3, [pc, #104]	; (6be4 <system_clock_source_get_hz+0x84>)
    6b7a:	7d18      	ldrb	r0, [r3, #20]
    6b7c:	0700      	lsls	r0, r0, #28
    6b7e:	0f80      	lsrs	r0, r0, #30
    6b80:	1c43      	adds	r3, r0, #1
    6b82:	4819      	ldr	r0, [pc, #100]	; (6be8 <system_clock_source_get_hz+0x88>)
    6b84:	4358      	muls	r0, r3
    6b86:	e027      	b.n	6bd8 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.xosc32k.frequency;
    6b88:	4b15      	ldr	r3, [pc, #84]	; (6be0 <system_clock_source_get_hz+0x80>)
    6b8a:	6958      	ldr	r0, [r3, #20]
    6b8c:	e024      	b.n	6bd8 <system_clock_source_get_hz+0x78>
		if (!(_system_clock_inst.dfll.control & OSCCTRL_DFLLCTRL_ENABLE))
    6b8e:	4b14      	ldr	r3, [pc, #80]	; (6be0 <system_clock_source_get_hz+0x80>)
    6b90:	681b      	ldr	r3, [r3, #0]
			return 0;
    6b92:	2000      	movs	r0, #0
		if (!(_system_clock_inst.dfll.control & OSCCTRL_DFLLCTRL_ENABLE))
    6b94:	079b      	lsls	r3, r3, #30
    6b96:	d51f      	bpl.n	6bd8 <system_clock_source_get_hz+0x78>
	while (!(OSCCTRL->STATUS.reg & OSCCTRL_STATUS_DFLLRDY)) {
    6b98:	4912      	ldr	r1, [pc, #72]	; (6be4 <system_clock_source_get_hz+0x84>)
    6b9a:	2280      	movs	r2, #128	; 0x80
    6b9c:	0052      	lsls	r2, r2, #1
    6b9e:	68cb      	ldr	r3, [r1, #12]
    6ba0:	4213      	tst	r3, r2
    6ba2:	d0fc      	beq.n	6b9e <system_clock_source_get_hz+0x3e>
		if (_system_clock_inst.dfll.control & OSCCTRL_DFLLCTRL_MODE) {
    6ba4:	4b0e      	ldr	r3, [pc, #56]	; (6be0 <system_clock_source_get_hz+0x80>)
    6ba6:	681b      	ldr	r3, [r3, #0]
    6ba8:	075b      	lsls	r3, r3, #29
    6baa:	d401      	bmi.n	6bb0 <system_clock_source_get_hz+0x50>
		return 48000000UL;
    6bac:	480f      	ldr	r0, [pc, #60]	; (6bec <system_clock_source_get_hz+0x8c>)
    6bae:	e013      	b.n	6bd8 <system_clock_source_get_hz+0x78>
			return system_gclk_chan_get_hz(OSCCTRL_GCLK_ID_DFLL48) *
    6bb0:	2000      	movs	r0, #0
    6bb2:	4b0f      	ldr	r3, [pc, #60]	; (6bf0 <system_clock_source_get_hz+0x90>)
    6bb4:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    6bb6:	4b0a      	ldr	r3, [pc, #40]	; (6be0 <system_clock_source_get_hz+0x80>)
    6bb8:	689b      	ldr	r3, [r3, #8]
    6bba:	041b      	lsls	r3, r3, #16
    6bbc:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(OSCCTRL_GCLK_ID_DFLL48) *
    6bbe:	4358      	muls	r0, r3
    6bc0:	e00a      	b.n	6bd8 <system_clock_source_get_hz+0x78>
		if (!(OSCCTRL->DPLLCTRLA.reg & OSCCTRL_DPLLCTRLA_ENABLE)) {
    6bc2:	2328      	movs	r3, #40	; 0x28
    6bc4:	4a07      	ldr	r2, [pc, #28]	; (6be4 <system_clock_source_get_hz+0x84>)
    6bc6:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
    6bc8:	2000      	movs	r0, #0
		if (!(OSCCTRL->DPLLCTRLA.reg & OSCCTRL_DPLLCTRLA_ENABLE)) {
    6bca:	079b      	lsls	r3, r3, #30
    6bcc:	d504      	bpl.n	6bd8 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.dpll.frequency;
    6bce:	4b04      	ldr	r3, [pc, #16]	; (6be0 <system_clock_source_get_hz+0x80>)
    6bd0:	68d8      	ldr	r0, [r3, #12]
    6bd2:	e001      	b.n	6bd8 <system_clock_source_get_hz+0x78>
		return 32768UL;
    6bd4:	2080      	movs	r0, #128	; 0x80
    6bd6:	0200      	lsls	r0, r0, #8
	}
}
    6bd8:	bd10      	pop	{r4, pc}
    6bda:	46c0      	nop			; (mov r8, r8)
    6bdc:	0001fba8 	.word	0x0001fba8
    6be0:	20000b84 	.word	0x20000b84
    6be4:	40000c00 	.word	0x40000c00
    6be8:	003d0900 	.word	0x003d0900
    6bec:	02dc6c00 	.word	0x02dc6c00
    6bf0:	000072cd 	.word	0x000072cd

00006bf4 <system_clock_source_osc16m_set_config>:
 *
 * \param[in] config  OSC16M configuration structure containing the new config
 */
void system_clock_source_osc16m_set_config(
		struct system_clock_source_osc16m_config *const config)
{
    6bf4:	b570      	push	{r4, r5, r6, lr}
	OSCCTRL_OSC16MCTRL_Type temp = OSCCTRL->OSC16MCTRL;
    6bf6:	4c0b      	ldr	r4, [pc, #44]	; (6c24 <system_clock_source_osc16m_set_config+0x30>)
    6bf8:	7d23      	ldrb	r3, [r4, #20]

	/* Use temporary struct to reduce register access */
	temp.bit.FSEL    = config->fsel;
	temp.bit.ONDEMAND = config->on_demand;
    6bfa:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;
    6bfc:	7846      	ldrb	r6, [r0, #1]

	OSCCTRL->OSC16MCTRL = temp;
    6bfe:	7802      	ldrb	r2, [r0, #0]
    6c00:	2103      	movs	r1, #3
    6c02:	4011      	ands	r1, r2
    6c04:	0089      	lsls	r1, r1, #2
    6c06:	220c      	movs	r2, #12
    6c08:	4393      	bics	r3, r2
    6c0a:	430b      	orrs	r3, r1
    6c0c:	3a0b      	subs	r2, #11
    6c0e:	4032      	ands	r2, r6
    6c10:	0192      	lsls	r2, r2, #6
    6c12:	2140      	movs	r1, #64	; 0x40
    6c14:	438b      	bics	r3, r1
    6c16:	4313      	orrs	r3, r2
    6c18:	01ed      	lsls	r5, r5, #7
    6c1a:	227f      	movs	r2, #127	; 0x7f
    6c1c:	4013      	ands	r3, r2
    6c1e:	432b      	orrs	r3, r5
    6c20:	7523      	strb	r3, [r4, #20]
}
    6c22:	bd70      	pop	{r4, r5, r6, pc}
    6c24:	40000c00 	.word	0x40000c00

00006c28 <system_clock_source_xosc32k_set_config>:
 *
 * \param[in] config  XOSC32K configuration structure containing the new config
 */
void system_clock_source_xosc32k_set_config(
		struct system_clock_source_xosc32k_config *const config)
{
    6c28:	b5f0      	push	{r4, r5, r6, r7, lr}
    6c2a:	46d6      	mov	lr, sl
    6c2c:	464f      	mov	r7, r9
    6c2e:	4646      	mov	r6, r8
    6c30:	b5c0      	push	{r6, r7, lr}
	OSC32KCTRL_XOSC32K_Type temp = OSC32KCTRL->XOSC32K;
    6c32:	4b20      	ldr	r3, [pc, #128]	; (6cb4 <system_clock_source_xosc32k_set_config+0x8c>)
    6c34:	469a      	mov	sl, r3
    6c36:	695b      	ldr	r3, [r3, #20]

	temp.bit.STARTUP = config->startup_time;
    6c38:	7845      	ldrb	r5, [r0, #1]

	if (config->external_clock == SYSTEM_CLOCK_EXTERNAL_CRYSTAL) {
    6c3a:	7801      	ldrb	r1, [r0, #0]
    6c3c:	424c      	negs	r4, r1
    6c3e:	414c      	adcs	r4, r1
    6c40:	46a1      	mov	r9, r4
		temp.bit.XTALEN = 1;
	} else {
		temp.bit.XTALEN = 0;
	}

	temp.bit.EN1K = config->enable_1khz_output;
    6c42:	7881      	ldrb	r1, [r0, #2]
    6c44:	468c      	mov	ip, r1
	temp.bit.EN32K = config->enable_32khz_output;
    6c46:	78c1      	ldrb	r1, [r0, #3]
    6c48:	4688      	mov	r8, r1

	temp.bit.ONDEMAND = config->on_demand;
    6c4a:	7a46      	ldrb	r6, [r0, #9]
	temp.bit.RUNSTDBY = config->run_in_standby;
    6c4c:	7a07      	ldrb	r7, [r0, #8]
	temp.bit.WRTLOCK  = config->write_once;
    6c4e:	7a84      	ldrb	r4, [r0, #10]

	/* Cache the new frequency in case the user needs to check the current
	 * operating frequency later */
	_system_clock_inst.xosc32k.frequency = config->frequency;
    6c50:	6840      	ldr	r0, [r0, #4]
    6c52:	4919      	ldr	r1, [pc, #100]	; (6cb8 <system_clock_source_xosc32k_set_config+0x90>)
    6c54:	6148      	str	r0, [r1, #20]

	OSC32KCTRL->XOSC32K = temp;
    6c56:	2101      	movs	r1, #1
    6c58:	4648      	mov	r0, r9
    6c5a:	0080      	lsls	r0, r0, #2
    6c5c:	2204      	movs	r2, #4
    6c5e:	4393      	bics	r3, r2
    6c60:	4303      	orrs	r3, r0
    6c62:	4640      	mov	r0, r8
    6c64:	4008      	ands	r0, r1
    6c66:	00c0      	lsls	r0, r0, #3
    6c68:	3204      	adds	r2, #4
    6c6a:	4393      	bics	r3, r2
    6c6c:	4303      	orrs	r3, r0
    6c6e:	4660      	mov	r0, ip
    6c70:	4008      	ands	r0, r1
    6c72:	0100      	lsls	r0, r0, #4
    6c74:	3208      	adds	r2, #8
    6c76:	4393      	bics	r3, r2
    6c78:	4303      	orrs	r3, r0
    6c7a:	400f      	ands	r7, r1
    6c7c:	01bf      	lsls	r7, r7, #6
    6c7e:	2040      	movs	r0, #64	; 0x40
    6c80:	4383      	bics	r3, r0
    6c82:	433b      	orrs	r3, r7
    6c84:	400e      	ands	r6, r1
    6c86:	01f6      	lsls	r6, r6, #7
    6c88:	3040      	adds	r0, #64	; 0x40
    6c8a:	4383      	bics	r3, r0
    6c8c:	4333      	orrs	r3, r6
    6c8e:	3879      	subs	r0, #121	; 0x79
    6c90:	4005      	ands	r5, r0
    6c92:	022d      	lsls	r5, r5, #8
    6c94:	4809      	ldr	r0, [pc, #36]	; (6cbc <system_clock_source_xosc32k_set_config+0x94>)
    6c96:	4003      	ands	r3, r0
    6c98:	432b      	orrs	r3, r5
    6c9a:	4021      	ands	r1, r4
    6c9c:	0309      	lsls	r1, r1, #12
    6c9e:	4808      	ldr	r0, [pc, #32]	; (6cc0 <system_clock_source_xosc32k_set_config+0x98>)
    6ca0:	4003      	ands	r3, r0
    6ca2:	430b      	orrs	r3, r1
    6ca4:	4652      	mov	r2, sl
    6ca6:	6153      	str	r3, [r2, #20]
}
    6ca8:	bc1c      	pop	{r2, r3, r4}
    6caa:	4690      	mov	r8, r2
    6cac:	4699      	mov	r9, r3
    6cae:	46a2      	mov	sl, r4
    6cb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6cb2:	46c0      	nop			; (mov r8, r8)
    6cb4:	40001000 	.word	0x40001000
    6cb8:	20000b84 	.word	0x20000b84
    6cbc:	fffff8ff 	.word	0xfffff8ff
    6cc0:	ffffefff 	.word	0xffffefff

00006cc4 <system_clock_source_dfll_set_config>:
 *
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
    6cc4:	b510      	push	{r4, lr}
	_system_clock_inst.dfll.val =
			OSCCTRL_DFLLVAL_COARSE(config->coarse_value) |
    6cc6:	7a83      	ldrb	r3, [r0, #10]
    6cc8:	069b      	lsls	r3, r3, #26
    6cca:	0c1b      	lsrs	r3, r3, #16
			OSCCTRL_DFLLVAL_FINE(config->fine_value);
    6ccc:	8982      	ldrh	r2, [r0, #12]
    6cce:	0592      	lsls	r2, r2, #22
    6cd0:	0d92      	lsrs	r2, r2, #22
			OSCCTRL_DFLLVAL_COARSE(config->coarse_value) |
    6cd2:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.val =
    6cd4:	491a      	ldr	r1, [pc, #104]	; (6d40 <system_clock_source_dfll_set_config+0x7c>)
    6cd6:	604b      	str	r3, [r1, #4]

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
    6cd8:	7a03      	ldrb	r3, [r0, #8]
    6cda:	7a42      	ldrb	r2, [r0, #9]
    6cdc:	4313      	orrs	r3, r2
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
    6cde:	8882      	ldrh	r2, [r0, #4]
    6ce0:	88c4      	ldrh	r4, [r0, #6]
    6ce2:	4322      	orrs	r2, r4
    6ce4:	4313      	orrs	r3, r2
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << OSCCTRL_DFLLCTRL_ONDEMAND_Pos) |
    6ce6:	7842      	ldrb	r2, [r0, #1]
    6ce8:	01d2      	lsls	r2, r2, #7
			(uint32_t)config->chill_cycle     |
    6cea:	4313      	orrs	r3, r2
			((uint32_t)config->run_in_stanby << OSCCTRL_DFLLCTRL_RUNSTDBY_Pos);
    6cec:	7882      	ldrb	r2, [r0, #2]
    6cee:	0192      	lsls	r2, r2, #6
			((uint32_t)config->on_demand << OSCCTRL_DFLLCTRL_ONDEMAND_Pos) |
    6cf0:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.control =
    6cf2:	600b      	str	r3, [r1, #0]

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
    6cf4:	7803      	ldrb	r3, [r0, #0]
    6cf6:	2b04      	cmp	r3, #4
    6cf8:	d011      	beq.n	6d1e <system_clock_source_dfll_set_config+0x5a>
				OSCCTRL_DFLLMUL_MUL(config->multiply_factor);

		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
    6cfa:	2b20      	cmp	r3, #32
    6cfc:	d10e      	bne.n	6d1c <system_clock_source_dfll_set_config+0x58>

		_system_clock_inst.dfll.mul =
				OSCCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    6cfe:	7b83      	ldrb	r3, [r0, #14]
    6d00:	069b      	lsls	r3, r3, #26
				OSCCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				OSCCTRL_DFLLMUL_MUL(config->multiply_factor);
    6d02:	8a42      	ldrh	r2, [r0, #18]
				OSCCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    6d04:	4313      	orrs	r3, r2
    6d06:	8a02      	ldrh	r2, [r0, #16]
    6d08:	0412      	lsls	r2, r2, #16
    6d0a:	490e      	ldr	r1, [pc, #56]	; (6d44 <system_clock_source_dfll_set_config+0x80>)
    6d0c:	400a      	ands	r2, r1
    6d0e:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    6d10:	4a0b      	ldr	r2, [pc, #44]	; (6d40 <system_clock_source_dfll_set_config+0x7c>)
    6d12:	6093      	str	r3, [r2, #8]

		/* Enable the USB recovery mode */
		_system_clock_inst.dfll.control |= config->loop_mode |
    6d14:	6811      	ldr	r1, [r2, #0]
    6d16:	4b0c      	ldr	r3, [pc, #48]	; (6d48 <system_clock_source_dfll_set_config+0x84>)
    6d18:	430b      	orrs	r3, r1
    6d1a:	6013      	str	r3, [r2, #0]
				OSCCTRL_DFLLCTRL_MODE | OSCCTRL_DFLLCTRL_BPLCKC;
	}
}
    6d1c:	bd10      	pop	{r4, pc}
				OSCCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    6d1e:	7b83      	ldrb	r3, [r0, #14]
    6d20:	069b      	lsls	r3, r3, #26
				OSCCTRL_DFLLMUL_MUL(config->multiply_factor);
    6d22:	8a42      	ldrh	r2, [r0, #18]
				OSCCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    6d24:	4313      	orrs	r3, r2
    6d26:	8a02      	ldrh	r2, [r0, #16]
    6d28:	0412      	lsls	r2, r2, #16
    6d2a:	4906      	ldr	r1, [pc, #24]	; (6d44 <system_clock_source_dfll_set_config+0x80>)
    6d2c:	400a      	ands	r2, r1
    6d2e:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    6d30:	4a03      	ldr	r2, [pc, #12]	; (6d40 <system_clock_source_dfll_set_config+0x7c>)
    6d32:	6093      	str	r3, [r2, #8]
		_system_clock_inst.dfll.control |= config->loop_mode;
    6d34:	6813      	ldr	r3, [r2, #0]
    6d36:	2104      	movs	r1, #4
    6d38:	430b      	orrs	r3, r1
    6d3a:	6013      	str	r3, [r2, #0]
    6d3c:	e7ee      	b.n	6d1c <system_clock_source_dfll_set_config+0x58>
    6d3e:	46c0      	nop			; (mov r8, r8)
    6d40:	20000b84 	.word	0x20000b84
    6d44:	03ff0000 	.word	0x03ff0000
    6d48:	00000424 	.word	0x00000424

00006d4c <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    6d4c:	2808      	cmp	r0, #8
    6d4e:	d803      	bhi.n	6d58 <system_clock_source_enable+0xc>
    6d50:	0080      	lsls	r0, r0, #2
    6d52:	4b29      	ldr	r3, [pc, #164]	; (6df8 <system_clock_source_enable+0xac>)
    6d54:	581b      	ldr	r3, [r3, r0]
    6d56:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    6d58:	2017      	movs	r0, #23
    6d5a:	e04b      	b.n	6df4 <system_clock_source_enable+0xa8>
		OSCCTRL->OSC16MCTRL.reg |= OSCCTRL_OSC16MCTRL_ENABLE;
    6d5c:	4a27      	ldr	r2, [pc, #156]	; (6dfc <system_clock_source_enable+0xb0>)
    6d5e:	7d13      	ldrb	r3, [r2, #20]
    6d60:	2102      	movs	r1, #2
    6d62:	430b      	orrs	r3, r1
    6d64:	7513      	strb	r3, [r2, #20]
		return STATUS_OK;
    6d66:	2000      	movs	r0, #0
    6d68:	e044      	b.n	6df4 <system_clock_source_enable+0xa8>
		OSC32KCTRL->OSC32K.reg |= OSC32KCTRL_OSC32K_ENABLE;
    6d6a:	4a25      	ldr	r2, [pc, #148]	; (6e00 <system_clock_source_enable+0xb4>)
    6d6c:	6993      	ldr	r3, [r2, #24]
    6d6e:	2102      	movs	r1, #2
    6d70:	430b      	orrs	r3, r1
    6d72:	6193      	str	r3, [r2, #24]
	}

	return STATUS_OK;
    6d74:	2000      	movs	r0, #0
		break;
    6d76:	e03d      	b.n	6df4 <system_clock_source_enable+0xa8>
		OSCCTRL->XOSCCTRL.reg |= OSCCTRL_XOSCCTRL_ENABLE;
    6d78:	4a20      	ldr	r2, [pc, #128]	; (6dfc <system_clock_source_enable+0xb0>)
    6d7a:	8a13      	ldrh	r3, [r2, #16]
    6d7c:	2102      	movs	r1, #2
    6d7e:	430b      	orrs	r3, r1
    6d80:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
    6d82:	2000      	movs	r0, #0
		break;
    6d84:	e036      	b.n	6df4 <system_clock_source_enable+0xa8>
		OSC32KCTRL->XOSC32K.reg |= OSC32KCTRL_XOSC32K_ENABLE;
    6d86:	4a1e      	ldr	r2, [pc, #120]	; (6e00 <system_clock_source_enable+0xb4>)
    6d88:	6953      	ldr	r3, [r2, #20]
    6d8a:	2102      	movs	r1, #2
    6d8c:	430b      	orrs	r3, r1
    6d8e:	6153      	str	r3, [r2, #20]
	return STATUS_OK;
    6d90:	2000      	movs	r0, #0
		break;
    6d92:	e02f      	b.n	6df4 <system_clock_source_enable+0xa8>
		_system_clock_inst.dfll.control |= OSCCTRL_DFLLCTRL_ENABLE;
    6d94:	491b      	ldr	r1, [pc, #108]	; (6e04 <system_clock_source_enable+0xb8>)
    6d96:	680b      	ldr	r3, [r1, #0]
    6d98:	2202      	movs	r2, #2
    6d9a:	4313      	orrs	r3, r2
    6d9c:	600b      	str	r3, [r1, #0]
	OSCCTRL->DFLLCTRL.reg = OSCCTRL_DFLLCTRL_ENABLE;
    6d9e:	4b17      	ldr	r3, [pc, #92]	; (6dfc <system_clock_source_enable+0xb0>)
    6da0:	831a      	strh	r2, [r3, #24]
	while (!(OSCCTRL->STATUS.reg & OSCCTRL_STATUS_DFLLRDY)) {
    6da2:	0019      	movs	r1, r3
    6da4:	32fe      	adds	r2, #254	; 0xfe
    6da6:	68cb      	ldr	r3, [r1, #12]
    6da8:	4213      	tst	r3, r2
    6daa:	d0fc      	beq.n	6da6 <system_clock_source_enable+0x5a>
	OSCCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    6dac:	4a15      	ldr	r2, [pc, #84]	; (6e04 <system_clock_source_enable+0xb8>)
    6dae:	6891      	ldr	r1, [r2, #8]
    6db0:	4b12      	ldr	r3, [pc, #72]	; (6dfc <system_clock_source_enable+0xb0>)
    6db2:	6219      	str	r1, [r3, #32]
	OSCCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    6db4:	6852      	ldr	r2, [r2, #4]
    6db6:	61da      	str	r2, [r3, #28]
	OSCCTRL->DFLLCTRL.reg = 0;
    6db8:	2200      	movs	r2, #0
    6dba:	831a      	strh	r2, [r3, #24]
	while (!(OSCCTRL->STATUS.reg & OSCCTRL_STATUS_DFLLRDY)) {
    6dbc:	0019      	movs	r1, r3
    6dbe:	3201      	adds	r2, #1
    6dc0:	32ff      	adds	r2, #255	; 0xff
    6dc2:	68cb      	ldr	r3, [r1, #12]
    6dc4:	4213      	tst	r3, r2
    6dc6:	d0fc      	beq.n	6dc2 <system_clock_source_enable+0x76>
	OSCCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    6dc8:	4b0e      	ldr	r3, [pc, #56]	; (6e04 <system_clock_source_enable+0xb8>)
    6dca:	681b      	ldr	r3, [r3, #0]
    6dcc:	b29b      	uxth	r3, r3
    6dce:	4a0b      	ldr	r2, [pc, #44]	; (6dfc <system_clock_source_enable+0xb0>)
    6dd0:	8313      	strh	r3, [r2, #24]
	return STATUS_OK;
    6dd2:	2000      	movs	r0, #0
    6dd4:	e00e      	b.n	6df4 <system_clock_source_enable+0xa8>
		OSCCTRL->DPLLCTRLA.reg |= OSCCTRL_DPLLCTRLA_ENABLE;
    6dd6:	4909      	ldr	r1, [pc, #36]	; (6dfc <system_clock_source_enable+0xb0>)
    6dd8:	2228      	movs	r2, #40	; 0x28
    6dda:	5c8b      	ldrb	r3, [r1, r2]
    6ddc:	2002      	movs	r0, #2
    6dde:	4303      	orrs	r3, r0
    6de0:	548b      	strb	r3, [r1, r2]
		while(OSCCTRL->DPLLSYNCBUSY.reg & OSCCTRL_DPLLSYNCBUSY_ENABLE){
    6de2:	0008      	movs	r0, r1
    6de4:	2138      	movs	r1, #56	; 0x38
    6de6:	3a26      	subs	r2, #38	; 0x26
    6de8:	5c43      	ldrb	r3, [r0, r1]
    6dea:	4213      	tst	r3, r2
    6dec:	d1fc      	bne.n	6de8 <system_clock_source_enable+0x9c>
	return STATUS_OK;
    6dee:	2000      	movs	r0, #0
    6df0:	e000      	b.n	6df4 <system_clock_source_enable+0xa8>
		return STATUS_OK;
    6df2:	2000      	movs	r0, #0
}
    6df4:	4770      	bx	lr
    6df6:	46c0      	nop			; (mov r8, r8)
    6df8:	0001fbcc 	.word	0x0001fbcc
    6dfc:	40000c00 	.word	0x40000c00
    6e00:	40001000 	.word	0x40001000
    6e04:	20000b84 	.word	0x20000b84

00006e08 <system_clock_source_disable>:
 *                                 given
 */
enum status_code system_clock_source_disable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    6e08:	2808      	cmp	r0, #8
    6e0a:	d832      	bhi.n	6e72 <system_clock_source_disable+0x6a>
    6e0c:	0080      	lsls	r0, r0, #2
    6e0e:	4b1a      	ldr	r3, [pc, #104]	; (6e78 <system_clock_source_disable+0x70>)
    6e10:	581b      	ldr	r3, [r3, r0]
    6e12:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC16M:
		OSCCTRL->OSC16MCTRL.reg &= ~OSCCTRL_OSC16MCTRL_ENABLE;
    6e14:	4a19      	ldr	r2, [pc, #100]	; (6e7c <system_clock_source_disable+0x74>)
    6e16:	7d13      	ldrb	r3, [r2, #20]
    6e18:	2102      	movs	r1, #2
    6e1a:	438b      	bics	r3, r1
    6e1c:	7513      	strb	r3, [r2, #20]
		Assert(false);
		return STATUS_ERR_INVALID_ARG;

	}

	return STATUS_OK;
    6e1e:	2000      	movs	r0, #0
}
    6e20:	4770      	bx	lr
		OSC32KCTRL->OSC32K.reg &= ~OSC32KCTRL_OSC32K_ENABLE;
    6e22:	4a17      	ldr	r2, [pc, #92]	; (6e80 <system_clock_source_disable+0x78>)
    6e24:	6993      	ldr	r3, [r2, #24]
    6e26:	2102      	movs	r1, #2
    6e28:	438b      	bics	r3, r1
    6e2a:	6193      	str	r3, [r2, #24]
	return STATUS_OK;
    6e2c:	2000      	movs	r0, #0
		break;
    6e2e:	e7f7      	b.n	6e20 <system_clock_source_disable+0x18>
		OSCCTRL->XOSCCTRL.reg &= ~OSCCTRL_XOSCCTRL_ENABLE;
    6e30:	4a12      	ldr	r2, [pc, #72]	; (6e7c <system_clock_source_disable+0x74>)
    6e32:	8a13      	ldrh	r3, [r2, #16]
    6e34:	2102      	movs	r1, #2
    6e36:	438b      	bics	r3, r1
    6e38:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
    6e3a:	2000      	movs	r0, #0
		break;
    6e3c:	e7f0      	b.n	6e20 <system_clock_source_disable+0x18>
		OSC32KCTRL->XOSC32K.reg &= ~OSC32KCTRL_XOSC32K_ENABLE;
    6e3e:	4a10      	ldr	r2, [pc, #64]	; (6e80 <system_clock_source_disable+0x78>)
    6e40:	6953      	ldr	r3, [r2, #20]
    6e42:	2102      	movs	r1, #2
    6e44:	438b      	bics	r3, r1
    6e46:	6153      	str	r3, [r2, #20]
	return STATUS_OK;
    6e48:	2000      	movs	r0, #0
		break;
    6e4a:	e7e9      	b.n	6e20 <system_clock_source_disable+0x18>
		_system_clock_inst.dfll.control &= ~OSCCTRL_DFLLCTRL_ENABLE;
    6e4c:	4b0d      	ldr	r3, [pc, #52]	; (6e84 <system_clock_source_disable+0x7c>)
    6e4e:	681a      	ldr	r2, [r3, #0]
    6e50:	2102      	movs	r1, #2
    6e52:	438a      	bics	r2, r1
    6e54:	601a      	str	r2, [r3, #0]
		OSCCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    6e56:	681b      	ldr	r3, [r3, #0]
    6e58:	b29b      	uxth	r3, r3
    6e5a:	4a08      	ldr	r2, [pc, #32]	; (6e7c <system_clock_source_disable+0x74>)
    6e5c:	8313      	strh	r3, [r2, #24]
	return STATUS_OK;
    6e5e:	2000      	movs	r0, #0
		break;
    6e60:	e7de      	b.n	6e20 <system_clock_source_disable+0x18>
		OSCCTRL->DPLLCTRLA.reg &= ~OSCCTRL_DPLLCTRLA_ENABLE;
    6e62:	4906      	ldr	r1, [pc, #24]	; (6e7c <system_clock_source_disable+0x74>)
    6e64:	2228      	movs	r2, #40	; 0x28
    6e66:	5c8b      	ldrb	r3, [r1, r2]
    6e68:	2002      	movs	r0, #2
    6e6a:	4383      	bics	r3, r0
    6e6c:	548b      	strb	r3, [r1, r2]
	return STATUS_OK;
    6e6e:	2000      	movs	r0, #0
		break;
    6e70:	e7d6      	b.n	6e20 <system_clock_source_disable+0x18>
		return STATUS_ERR_INVALID_ARG;
    6e72:	2017      	movs	r0, #23
    6e74:	e7d4      	b.n	6e20 <system_clock_source_disable+0x18>
    6e76:	46c0      	nop			; (mov r8, r8)
    6e78:	0001fbf0 	.word	0x0001fbf0
    6e7c:	40000c00 	.word	0x40000c00
    6e80:	40001000 	.word	0x40001000
    6e84:	20000b84 	.word	0x20000b84

00006e88 <system_clock_init>:
 * \note OSC16M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC16M default enable can be disabled after system_clock_init. Make sure the
 * clock switches successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    6e88:	b5f0      	push	{r4, r5, r6, r7, lr}
    6e8a:	46ce      	mov	lr, r9
    6e8c:	4647      	mov	r7, r8
    6e8e:	b580      	push	{r7, lr}
    6e90:	b08d      	sub	sp, #52	; 0x34
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	OSCCTRL->INTFLAG.reg = OSCCTRL_INTFLAG_DFLLRDY;
    6e92:	2280      	movs	r2, #128	; 0x80
    6e94:	0052      	lsls	r2, r2, #1
    6e96:	4b76      	ldr	r3, [pc, #472]	; (7070 <system_clock_init+0x1e8>)
    6e98:	609a      	str	r2, [r3, #8]
	SUPC->INTFLAG.reg = SUPC_INTFLAG_BOD33RDY | SUPC_INTFLAG_BOD33DET;
    6e9a:	3afd      	subs	r2, #253	; 0xfd
    6e9c:	4b75      	ldr	r3, [pc, #468]	; (7074 <system_clock_init+0x1ec>)
    6e9e:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    6ea0:	4a75      	ldr	r2, [pc, #468]	; (7078 <system_clock_init+0x1f0>)
    6ea2:	6853      	ldr	r3, [r2, #4]
    6ea4:	211e      	movs	r1, #30
    6ea6:	438b      	bics	r3, r1
    6ea8:	391a      	subs	r1, #26
    6eaa:	430b      	orrs	r3, r1
    6eac:	6053      	str	r3, [r2, #4]
 */
static inline enum status_code system_switch_performance_level(
					const enum system_performance_level performance_level)
{

	if (performance_level == (enum system_performance_level)PM->PLCFG.reg) {
    6eae:	2380      	movs	r3, #128	; 0x80
    6eb0:	05db      	lsls	r3, r3, #23
    6eb2:	789b      	ldrb	r3, [r3, #2]
    6eb4:	2b02      	cmp	r3, #2
    6eb6:	d00f      	beq.n	6ed8 <system_clock_init+0x50>
		return STATUS_OK;
	}

#if SAML22 || SAML21XXXB || SAMR34J || SAMR35J || (WLR089U0)
	if (PM->PLCFG.reg & PM_PLCFG_PLDIS) {
    6eb8:	2380      	movs	r3, #128	; 0x80
    6eba:	05db      	lsls	r3, r3, #23
    6ebc:	789b      	ldrb	r3, [r3, #2]
    6ebe:	b25b      	sxtb	r3, r3
    6ec0:	2b00      	cmp	r3, #0
    6ec2:	db09      	blt.n	6ed8 <system_clock_init+0x50>
		return STATUS_ERR_INVALID_ARG;
	}
#endif

	/* Clear performance level status */
	PM->INTFLAG.reg = PM_INTFLAG_PLRDY;
    6ec4:	2380      	movs	r3, #128	; 0x80
    6ec6:	05db      	lsls	r3, r3, #23
    6ec8:	2201      	movs	r2, #1
    6eca:	719a      	strb	r2, [r3, #6]

	/* Switch performance level */
	PM->PLCFG.reg = performance_level;
    6ecc:	3201      	adds	r2, #1
    6ece:	709a      	strb	r2, [r3, #2]

	/* Waiting performance level ready */
	while (!PM->INTFLAG.reg) {
    6ed0:	001a      	movs	r2, r3
    6ed2:	7993      	ldrb	r3, [r2, #6]
    6ed4:	2b00      	cmp	r3, #0
    6ed6:	d0fc      	beq.n	6ed2 <system_clock_init+0x4a>
	config->external_clock      = SYSTEM_CLOCK_EXTERNAL_CRYSTAL;
    6ed8:	a809      	add	r0, sp, #36	; 0x24
    6eda:	2300      	movs	r3, #0
    6edc:	7003      	strb	r3, [r0, #0]
	config->frequency           = 32768UL;
    6ede:	2280      	movs	r2, #128	; 0x80
    6ee0:	0212      	lsls	r2, r2, #8
    6ee2:	6042      	str	r2, [r0, #4]
	config->enable_1khz_output  = false;
    6ee4:	7083      	strb	r3, [r0, #2]
	config->enable_32khz_output = true;
    6ee6:	2201      	movs	r2, #1
    6ee8:	70c2      	strb	r2, [r0, #3]
	config->run_in_standby      = false;
    6eea:	7203      	strb	r3, [r0, #8]
	config->write_once          = false;
    6eec:	7283      	strb	r3, [r0, #10]
	struct system_clock_source_xosc32k_config xosc32k_conf;
	system_clock_source_xosc32k_get_config_defaults(&xosc32k_conf);

	xosc32k_conf.frequency           = 32768UL;
	xosc32k_conf.external_clock      = CONF_CLOCK_XOSC32K_EXTERNAL_CRYSTAL;
	xosc32k_conf.startup_time        = CONF_CLOCK_XOSC32K_STARTUP_TIME;
    6eee:	3203      	adds	r2, #3
    6ef0:	7042      	strb	r2, [r0, #1]
	xosc32k_conf.enable_1khz_output  = CONF_CLOCK_XOSC32K_ENABLE_1KHZ_OUPUT;
	xosc32k_conf.enable_32khz_output = CONF_CLOCK_XOSC32K_ENABLE_32KHZ_OUTPUT;
	xosc32k_conf.on_demand           = false;
    6ef2:	7243      	strb	r3, [r0, #9]
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;

	system_clock_source_xosc32k_set_config(&xosc32k_conf);
    6ef4:	4b61      	ldr	r3, [pc, #388]	; (707c <system_clock_init+0x1f4>)
    6ef6:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
    6ef8:	2005      	movs	r0, #5
    6efa:	4b61      	ldr	r3, [pc, #388]	; (7080 <system_clock_init+0x1f8>)
    6efc:	4798      	blx	r3
		return ((OSC32KCTRL->STATUS.reg & mask) == mask);
    6efe:	4961      	ldr	r1, [pc, #388]	; (7084 <system_clock_init+0x1fc>)
    6f00:	2201      	movs	r2, #1
    6f02:	68cb      	ldr	r3, [r1, #12]
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_XOSC32K));
    6f04:	421a      	tst	r2, r3
    6f06:	d0fc      	beq.n	6f02 <system_clock_init+0x7a>
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    6f08:	a901      	add	r1, sp, #4
    6f0a:	2501      	movs	r5, #1
    6f0c:	604d      	str	r5, [r1, #4]
	config->high_when_disabled = false;
    6f0e:	2400      	movs	r4, #0
    6f10:	704c      	strb	r4, [r1, #1]
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
#endif
	config->run_in_standby     = false;
    6f12:	720c      	strb	r4, [r1, #8]
	config->output_enable      = false;
    6f14:	724c      	strb	r4, [r1, #9]
	gclk_conf.source_clock = SYSTEM_CLOCK_SOURCE_ULP32K;
    6f16:	2303      	movs	r3, #3
    6f18:	700b      	strb	r3, [r1, #0]
	system_gclk_gen_set_config(GCLK_GENERATOR_0, &gclk_conf);
    6f1a:	2000      	movs	r0, #0
    6f1c:	4b5a      	ldr	r3, [pc, #360]	; (7088 <system_clock_init+0x200>)
    6f1e:	4798      	blx	r3
	system_clock_source_disable(SYSTEM_CLOCK_SOURCE_OSC16M);
    6f20:	2006      	movs	r0, #6
    6f22:	4b5a      	ldr	r3, [pc, #360]	; (708c <system_clock_init+0x204>)
    6f24:	4798      	blx	r3
	config->run_in_standby  = false;
    6f26:	466b      	mov	r3, sp
    6f28:	705c      	strb	r4, [r3, #1]
	osc16m_conf.fsel      		= CONF_CLOCK_OSC16M_FREQ_SEL;
    6f2a:	701d      	strb	r5, [r3, #0]
	osc16m_conf.on_demand       = 0;
    6f2c:	709c      	strb	r4, [r3, #2]
	system_clock_source_osc16m_set_config(&osc16m_conf);
    6f2e:	4668      	mov	r0, sp
    6f30:	4b57      	ldr	r3, [pc, #348]	; (7090 <system_clock_init+0x208>)
    6f32:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC16M);
    6f34:	2006      	movs	r0, #6
    6f36:	4b52      	ldr	r3, [pc, #328]	; (7080 <system_clock_init+0x1f8>)
    6f38:	4798      	blx	r3
		return ((OSCCTRL->STATUS.reg & mask) == mask);
    6f3a:	494d      	ldr	r1, [pc, #308]	; (7070 <system_clock_init+0x1e8>)
    6f3c:	2210      	movs	r2, #16
    6f3e:	68cb      	ldr	r3, [r1, #12]
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_OSC16M));
    6f40:	421a      	tst	r2, r3
    6f42:	d0fc      	beq.n	6f3e <system_clock_init+0xb6>
	config->division_factor    = 1;
    6f44:	a901      	add	r1, sp, #4
    6f46:	2301      	movs	r3, #1
    6f48:	604b      	str	r3, [r1, #4]
	config->high_when_disabled = false;
    6f4a:	2400      	movs	r4, #0
    6f4c:	704c      	strb	r4, [r1, #1]
	config->source_clock       = GCLK_SOURCE_OSC16M;
    6f4e:	3305      	adds	r3, #5
    6f50:	700b      	strb	r3, [r1, #0]
	config->run_in_standby     = false;
    6f52:	720c      	strb	r4, [r1, #8]
	config->output_enable      = false;
    6f54:	724c      	strb	r4, [r1, #9]
	system_gclk_gen_set_config(GCLK_GENERATOR_0, &gclk_conf);
    6f56:	2000      	movs	r0, #0
    6f58:	4b4b      	ldr	r3, [pc, #300]	; (7088 <system_clock_init+0x200>)
    6f5a:	4798      	blx	r3
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    6f5c:	ab04      	add	r3, sp, #16
    6f5e:	2200      	movs	r2, #0
    6f60:	809c      	strh	r4, [r3, #4]
	config->chill_cycle     = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
    6f62:	80dc      	strh	r4, [r3, #6]
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    6f64:	721a      	strb	r2, [r3, #8]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    6f66:	725a      	strb	r2, [r3, #9]
	config->run_in_stanby   = false;
    6f68:	709a      	strb	r2, [r3, #2]
	config->fine_value      = 0xff / 4; /* Midpoint */
    6f6a:	213f      	movs	r1, #63	; 0x3f
    6f6c:	8199      	strh	r1, [r3, #12]
	/* DFLL Config (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	struct system_clock_source_dfll_config dfll_conf;
	system_clock_source_dfll_get_config_defaults(&dfll_conf);

	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
    6f6e:	393b      	subs	r1, #59	; 0x3b
    6f70:	7019      	strb	r1, [r3, #0]
	dfll_conf.on_demand      = false;
    6f72:	705a      	strb	r2, [r3, #1]
	/* Using DFLL48M COARSE CAL value from NVM Software Calibration Area Mapping 
	   in DFLL.COARSE helps to output a frequency close to 48 MHz.*/
#define NVM_DFLL_COARSE_POS    26 /* DFLL48M Coarse calibration value bit position.*/
#define NVM_DFLL_COARSE_SIZE   6  /* DFLL48M Coarse calibration value bit size.*/

	uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP5)
    6f74:	4b47      	ldr	r3, [pc, #284]	; (7094 <system_clock_init+0x20c>)
    6f76:	681b      	ldr	r3, [r3, #0]
    6f78:	0e9b      	lsrs	r3, r3, #26
			+ (NVM_DFLL_COARSE_POS / 32))
		>> (NVM_DFLL_COARSE_POS % 32))
		& ((1 << NVM_DFLL_COARSE_SIZE) - 1);
	/* In some revision chip, the Calibration value is not correct */
	if (coarse == 0x3f) {
    6f7a:	2b3f      	cmp	r3, #63	; 0x3f
    6f7c:	d100      	bne.n	6f80 <system_clock_init+0xf8>
    6f7e:	e074      	b.n	706a <system_clock_init+0x1e2>
		coarse = 0x1f;
	}

	dfll_conf.coarse_value = coarse;
    6f80:	a804      	add	r0, sp, #16
    6f82:	7283      	strb	r3, [r0, #10]
#  else
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;
#  endif

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
    6f84:	23b7      	movs	r3, #183	; 0xb7
    6f86:	00db      	lsls	r3, r3, #3
    6f88:	8243      	strh	r3, [r0, #18]
	}

	dfll_conf.coarse_max_step = CONF_CLOCK_DFLL_MAX_COARSE_STEP_SIZE;
    6f8a:	2307      	movs	r3, #7
    6f8c:	7383      	strb	r3, [r0, #14]
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;
    6f8e:	3338      	adds	r3, #56	; 0x38
    6f90:	8203      	strh	r3, [r0, #16]
		dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;

		dfll_conf.multiply_factor = 48000;
	}

	system_clock_source_dfll_set_config(&dfll_conf);
    6f92:	4b41      	ldr	r3, [pc, #260]	; (7098 <system_clock_init+0x210>)
    6f94:	4798      	blx	r3
#endif

	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    6f96:	4b41      	ldr	r3, [pc, #260]	; (709c <system_clock_init+0x214>)
    6f98:	4798      	blx	r3
	config->division_factor    = 1;
    6f9a:	ac01      	add	r4, sp, #4
    6f9c:	2601      	movs	r6, #1
    6f9e:	9602      	str	r6, [sp, #8]
	config->high_when_disabled = false;
    6fa0:	2500      	movs	r5, #0
    6fa2:	7065      	strb	r5, [r4, #1]
	config->output_enable      = false;
    6fa4:	7265      	strb	r5, [r4, #9]

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    6fa6:	2305      	movs	r3, #5
    6fa8:	4699      	mov	r9, r3
    6faa:	7023      	strb	r3, [r4, #0]
    6fac:	7226      	strb	r6, [r4, #8]
    6fae:	0021      	movs	r1, r4
    6fb0:	2001      	movs	r0, #1
    6fb2:	4b35      	ldr	r3, [pc, #212]	; (7088 <system_clock_init+0x200>)
    6fb4:	4698      	mov	r8, r3
    6fb6:	4798      	blx	r3
    6fb8:	2001      	movs	r0, #1
    6fba:	4f39      	ldr	r7, [pc, #228]	; (70a0 <system_clock_init+0x218>)
    6fbc:	47b8      	blx	r7
	config->high_when_disabled = false;
    6fbe:	7065      	strb	r5, [r4, #1]
	config->source_clock       = GCLK_SOURCE_OSC16M;
    6fc0:	2306      	movs	r3, #6
    6fc2:	7023      	strb	r3, [r4, #0]
	config->run_in_standby     = false;
    6fc4:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    6fc6:	7265      	strb	r5, [r4, #9]
    6fc8:	464b      	mov	r3, r9
    6fca:	6063      	str	r3, [r4, #4]
    6fcc:	0021      	movs	r1, r4
    6fce:	2002      	movs	r0, #2
    6fd0:	47c0      	blx	r8
    6fd2:	2002      	movs	r0, #2
    6fd4:	47b8      	blx	r7
	/* Enable DFLL reference clock if in closed loop mode */
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		struct system_gclk_chan_config dfll_gclk_chan_conf;

		system_gclk_chan_get_config_defaults(&dfll_gclk_chan_conf);
		dfll_gclk_chan_conf.source_generator = CONF_CLOCK_DFLL_SOURCE_GCLK_GENERATOR;
    6fd6:	7026      	strb	r6, [r4, #0]
		system_gclk_chan_set_config(OSCCTRL_GCLK_ID_DFLL48, &dfll_gclk_chan_conf);
    6fd8:	0021      	movs	r1, r4
    6fda:	2000      	movs	r0, #0
    6fdc:	4b31      	ldr	r3, [pc, #196]	; (70a4 <system_clock_init+0x21c>)
    6fde:	4798      	blx	r3
		system_gclk_chan_enable(OSCCTRL_GCLK_ID_DFLL48);
    6fe0:	2000      	movs	r0, #0
    6fe2:	4b31      	ldr	r3, [pc, #196]	; (70a8 <system_clock_init+0x220>)
    6fe4:	4798      	blx	r3
#  endif
#endif

	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
    6fe6:	2007      	movs	r0, #7
    6fe8:	4b25      	ldr	r3, [pc, #148]	; (7080 <system_clock_init+0x1f8>)
    6fea:	4798      	blx	r3
		return ((OSCCTRL->STATUS.reg & mask) == mask);
    6fec:	4920      	ldr	r1, [pc, #128]	; (7070 <system_clock_init+0x1e8>)
    6fee:	22d0      	movs	r2, #208	; 0xd0
    6ff0:	0112      	lsls	r2, r2, #4
    6ff2:	68cb      	ldr	r3, [r1, #12]
    6ff4:	4013      	ands	r3, r2
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
    6ff6:	4293      	cmp	r3, r2
    6ff8:	d1fb      	bne.n	6ff2 <system_clock_init+0x16a>
	MCLK->BUPDIV.reg = MCLK_BUPDIV_BUPDIV(1 << divider);
    6ffa:	4c2c      	ldr	r4, [pc, #176]	; (70ac <system_clock_init+0x224>)
    6ffc:	2301      	movs	r3, #1
    6ffe:	71a3      	strb	r3, [r4, #6]
	MCLK->LPDIV.reg = MCLK_LPDIV_LPDIV(1 << divider);
    7000:	7163      	strb	r3, [r4, #5]
	MCLK->CPUDIV.reg = MCLK_CPUDIV_CPUDIV(1 << divider);
    7002:	7123      	strb	r3, [r4, #4]
	config->high_when_disabled = false;
    7004:	a901      	add	r1, sp, #4
    7006:	2300      	movs	r3, #0
    7008:	704b      	strb	r3, [r1, #1]
	config->run_in_standby     = false;
    700a:	720b      	strb	r3, [r1, #8]
	config->output_enable      = false;
    700c:	724b      	strb	r3, [r1, #9]
	system_main_clock_set_failure_detect(CONF_CLOCK_CPU_CLOCK_FAILURE_DETECT);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    700e:	3307      	adds	r3, #7
    7010:	700b      	strb	r3, [r1, #0]
    7012:	3b01      	subs	r3, #1
    7014:	604b      	str	r3, [r1, #4]
    7016:	2000      	movs	r0, #0
    7018:	4b1b      	ldr	r3, [pc, #108]	; (7088 <system_clock_init+0x200>)
    701a:	4798      	blx	r3
    701c:	2000      	movs	r0, #0
    701e:	4b20      	ldr	r3, [pc, #128]	; (70a0 <system_clock_init+0x218>)
    7020:	4798      	blx	r3
	return (system_gclk_gen_get_hz(GCLK_GENERATOR_0) / MCLK->CPUDIV.reg);
    7022:	2000      	movs	r0, #0
    7024:	4b22      	ldr	r3, [pc, #136]	; (70b0 <system_clock_init+0x228>)
    7026:	4798      	blx	r3
    7028:	7921      	ldrb	r1, [r4, #4]
    702a:	b2c9      	uxtb	r1, r1
    702c:	4b21      	ldr	r3, [pc, #132]	; (70b4 <system_clock_init+0x22c>)
    702e:	4798      	blx	r3
#endif

	/* If CPU frequency is less than 12MHz, scale down performance level to PL0 */
	uint32_t cpu_freq = system_cpu_clock_get_hz();
	if (cpu_freq <= 12000000) {
    7030:	4b21      	ldr	r3, [pc, #132]	; (70b8 <system_clock_init+0x230>)
    7032:	4298      	cmp	r0, r3
    7034:	d814      	bhi.n	7060 <system_clock_init+0x1d8>
	if (performance_level == (enum system_performance_level)PM->PLCFG.reg) {
    7036:	2380      	movs	r3, #128	; 0x80
    7038:	05db      	lsls	r3, r3, #23
    703a:	789b      	ldrb	r3, [r3, #2]
    703c:	2b00      	cmp	r3, #0
    703e:	d00f      	beq.n	7060 <system_clock_init+0x1d8>
	if (PM->PLCFG.reg & PM_PLCFG_PLDIS) {
    7040:	2380      	movs	r3, #128	; 0x80
    7042:	05db      	lsls	r3, r3, #23
    7044:	789b      	ldrb	r3, [r3, #2]
    7046:	b25b      	sxtb	r3, r3
    7048:	2b00      	cmp	r3, #0
    704a:	db09      	blt.n	7060 <system_clock_init+0x1d8>
	PM->INTFLAG.reg = PM_INTFLAG_PLRDY;
    704c:	2380      	movs	r3, #128	; 0x80
    704e:	05db      	lsls	r3, r3, #23
    7050:	2201      	movs	r2, #1
    7052:	719a      	strb	r2, [r3, #6]
	PM->PLCFG.reg = performance_level;
    7054:	2200      	movs	r2, #0
    7056:	709a      	strb	r2, [r3, #2]
	while (!PM->INTFLAG.reg) {
    7058:	001a      	movs	r2, r3
    705a:	7993      	ldrb	r3, [r2, #6]
    705c:	2b00      	cmp	r3, #0
    705e:	d0fc      	beq.n	705a <system_clock_init+0x1d2>
		system_switch_performance_level(SYSTEM_PERFORMANCE_LEVEL_0);
	}
}
    7060:	b00d      	add	sp, #52	; 0x34
    7062:	bc0c      	pop	{r2, r3}
    7064:	4690      	mov	r8, r2
    7066:	4699      	mov	r9, r3
    7068:	bdf0      	pop	{r4, r5, r6, r7, pc}
		coarse = 0x1f;
    706a:	3b20      	subs	r3, #32
    706c:	e788      	b.n	6f80 <system_clock_init+0xf8>
    706e:	46c0      	nop			; (mov r8, r8)
    7070:	40000c00 	.word	0x40000c00
    7074:	40001400 	.word	0x40001400
    7078:	41004000 	.word	0x41004000
    707c:	00006c29 	.word	0x00006c29
    7080:	00006d4d 	.word	0x00006d4d
    7084:	40001000 	.word	0x40001000
    7088:	000070e1 	.word	0x000070e1
    708c:	00006e09 	.word	0x00006e09
    7090:	00006bf5 	.word	0x00006bf5
    7094:	00806020 	.word	0x00806020
    7098:	00006cc5 	.word	0x00006cc5
    709c:	000070bd 	.word	0x000070bd
    70a0:	0000718d 	.word	0x0000718d
    70a4:	000072a9 	.word	0x000072a9
    70a8:	00007239 	.word	0x00007239
    70ac:	40000400 	.word	0x40000400
    70b0:	000071cd 	.word	0x000071cd
    70b4:	00016625 	.word	0x00016625
    70b8:	00b71b00 	.word	0x00b71b00

000070bc <system_gclk_init>:
			MCLK->APBAMASK.reg |= mask;
    70bc:	4a06      	ldr	r2, [pc, #24]	; (70d8 <system_gclk_init+0x1c>)
    70be:	6953      	ldr	r3, [r2, #20]
    70c0:	2140      	movs	r1, #64	; 0x40
    70c2:	430b      	orrs	r3, r1
    70c4:	6153      	str	r3, [r2, #20]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, MCLK_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRLA.reg = GCLK_CTRLA_SWRST;
    70c6:	2201      	movs	r2, #1
    70c8:	4b04      	ldr	r3, [pc, #16]	; (70dc <system_gclk_init+0x20>)
    70ca:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRLA.reg & GCLK_CTRLA_SWRST) {
    70cc:	0019      	movs	r1, r3
    70ce:	780b      	ldrb	r3, [r1, #0]
    70d0:	4213      	tst	r3, r2
    70d2:	d1fc      	bne.n	70ce <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    70d4:	4770      	bx	lr
    70d6:	46c0      	nop			; (mov r8, r8)
    70d8:	40000400 	.word	0x40000400
    70dc:	40001800 	.word	0x40001800

000070e0 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    70e0:	b570      	push	{r4, r5, r6, lr}
    70e2:	0004      	movs	r4, r0
	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config ;


	/* Select the requested source clock for the generator */
	new_genctrl_config = config->source_clock << GCLK_GENCTRL_SRC_Pos;
    70e4:	780d      	ldrb	r5, [r1, #0]

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    70e6:	784b      	ldrb	r3, [r1, #1]
    70e8:	2b00      	cmp	r3, #0
    70ea:	d002      	beq.n	70f2 <system_gclk_gen_set_config+0x12>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    70ec:	2380      	movs	r3, #128	; 0x80
    70ee:	00db      	lsls	r3, r3, #3
    70f0:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    70f2:	7a4b      	ldrb	r3, [r1, #9]
    70f4:	2b00      	cmp	r3, #0
    70f6:	d002      	beq.n	70fe <system_gclk_gen_set_config+0x1e>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    70f8:	2380      	movs	r3, #128	; 0x80
    70fa:	011b      	lsls	r3, r3, #4
    70fc:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    70fe:	6848      	ldr	r0, [r1, #4]
    7100:	2801      	cmp	r0, #1
    7102:	d90f      	bls.n	7124 <system_gclk_gen_set_config+0x44>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    7104:	1e43      	subs	r3, r0, #1
    7106:	4218      	tst	r0, r3
    7108:	d131      	bne.n	716e <system_gclk_gen_set_config+0x8e>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    710a:	2802      	cmp	r0, #2
    710c:	d92d      	bls.n	716a <system_gclk_gen_set_config+0x8a>
    710e:	2302      	movs	r3, #2
    7110:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    7112:	3201      	adds	r2, #1
						mask <<= 1) {
    7114:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
    7116:	4298      	cmp	r0, r3
    7118:	d8fb      	bhi.n	7112 <system_gclk_gen_set_config+0x32>
    711a:	2380      	movs	r3, #128	; 0x80
    711c:	015b      	lsls	r3, r3, #5
    711e:	431d      	orrs	r5, r3
			}

			/* Set binary divider power of 2 division factor */
			new_genctrl_config  |= div2_count << GCLK_GENCTRL_DIV_Pos;
    7120:	0412      	lsls	r2, r2, #16
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    7122:	4315      	orrs	r5, r2
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    7124:	7a0b      	ldrb	r3, [r1, #8]
    7126:	2b00      	cmp	r3, #0
    7128:	d002      	beq.n	7130 <system_gclk_gen_set_config+0x50>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    712a:	2380      	movs	r3, #128	; 0x80
    712c:	019b      	lsls	r3, r3, #6
    712e:	431d      	orrs	r5, r3
	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    7130:	2604      	movs	r6, #4
    7132:	40a6      	lsls	r6, r4
    7134:	4911      	ldr	r1, [pc, #68]	; (717c <system_gclk_gen_set_config+0x9c>)
    7136:	4a12      	ldr	r2, [pc, #72]	; (7180 <system_gclk_gen_set_config+0xa0>)
    7138:	684b      	ldr	r3, [r1, #4]
    713a:	4013      	ands	r3, r2
	}

	while (system_gclk_is_syncing(generator)) {
    713c:	421e      	tst	r6, r3
    713e:	d1fb      	bne.n	7138 <system_gclk_gen_set_config+0x58>
	cpu_irq_enter_critical();
    7140:	4b10      	ldr	r3, [pc, #64]	; (7184 <system_gclk_gen_set_config+0xa4>)
    7142:	4798      	blx	r3
    7144:	00a4      	lsls	r4, r4, #2
    7146:	4b0d      	ldr	r3, [pc, #52]	; (717c <system_gclk_gen_set_config+0x9c>)
    7148:	469c      	mov	ip, r3
    714a:	4464      	add	r4, ip
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();

	GCLK->GENCTRL[generator].reg = new_genctrl_config | (GCLK->GENCTRL[generator].reg & GCLK_GENCTRL_GENEN);
    714c:	6a22      	ldr	r2, [r4, #32]
    714e:	2380      	movs	r3, #128	; 0x80
    7150:	005b      	lsls	r3, r3, #1
    7152:	401a      	ands	r2, r3
    7154:	432a      	orrs	r2, r5
    7156:	6222      	str	r2, [r4, #32]
	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    7158:	4661      	mov	r1, ip
    715a:	4a09      	ldr	r2, [pc, #36]	; (7180 <system_gclk_gen_set_config+0xa0>)
    715c:	684b      	ldr	r3, [r1, #4]
    715e:	4013      	ands	r3, r2

	while (system_gclk_is_syncing(generator)) {
    7160:	421e      	tst	r6, r3
    7162:	d1fb      	bne.n	715c <system_gclk_gen_set_config+0x7c>
	cpu_irq_leave_critical();
    7164:	4b08      	ldr	r3, [pc, #32]	; (7188 <system_gclk_gen_set_config+0xa8>)
    7166:	4798      	blx	r3
		/* Wait for synchronization */
	};

	system_interrupt_leave_critical_section();
}
    7168:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
    716a:	2200      	movs	r2, #0
    716c:	e7d5      	b.n	711a <system_gclk_gen_set_config+0x3a>
					(config->division_factor) << GCLK_GENCTRL_DIV_Pos;
    716e:	0400      	lsls	r0, r0, #16
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    7170:	2380      	movs	r3, #128	; 0x80
    7172:	009b      	lsls	r3, r3, #2
    7174:	4318      	orrs	r0, r3
    7176:	4305      	orrs	r5, r0
    7178:	e7d4      	b.n	7124 <system_gclk_gen_set_config+0x44>
    717a:	46c0      	nop			; (mov r8, r8)
    717c:	40001800 	.word	0x40001800
    7180:	000007fc 	.word	0x000007fc
    7184:	000045e9 	.word	0x000045e9
    7188:	00004629 	.word	0x00004629

0000718c <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    718c:	b510      	push	{r4, lr}
    718e:	0004      	movs	r4, r0
	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    7190:	2204      	movs	r2, #4
    7192:	4082      	lsls	r2, r0
    7194:	4809      	ldr	r0, [pc, #36]	; (71bc <system_gclk_gen_enable+0x30>)
    7196:	490a      	ldr	r1, [pc, #40]	; (71c0 <system_gclk_gen_enable+0x34>)
    7198:	6843      	ldr	r3, [r0, #4]
    719a:	400b      	ands	r3, r1
	while (system_gclk_is_syncing(generator)) {
    719c:	421a      	tst	r2, r3
    719e:	d1fb      	bne.n	7198 <system_gclk_gen_enable+0xc>
	cpu_irq_enter_critical();
    71a0:	4b08      	ldr	r3, [pc, #32]	; (71c4 <system_gclk_gen_enable+0x38>)
    71a2:	4798      	blx	r3
    71a4:	00a4      	lsls	r4, r4, #2
    71a6:	4b05      	ldr	r3, [pc, #20]	; (71bc <system_gclk_gen_enable+0x30>)
    71a8:	469c      	mov	ip, r3
    71aa:	4464      	add	r4, ip
	};

	system_interrupt_enter_critical_section();

	/* Enable generator */
	GCLK->GENCTRL[generator].reg |= GCLK_GENCTRL_GENEN;
    71ac:	6a22      	ldr	r2, [r4, #32]
    71ae:	2380      	movs	r3, #128	; 0x80
    71b0:	005b      	lsls	r3, r3, #1
    71b2:	4313      	orrs	r3, r2
    71b4:	6223      	str	r3, [r4, #32]
	cpu_irq_leave_critical();
    71b6:	4b04      	ldr	r3, [pc, #16]	; (71c8 <system_gclk_gen_enable+0x3c>)
    71b8:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    71ba:	bd10      	pop	{r4, pc}
    71bc:	40001800 	.word	0x40001800
    71c0:	000007fc 	.word	0x000007fc
    71c4:	000045e9 	.word	0x000045e9
    71c8:	00004629 	.word	0x00004629

000071cc <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    71cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    71ce:	0004      	movs	r4, r0
	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    71d0:	2204      	movs	r2, #4
    71d2:	4082      	lsls	r2, r0
    71d4:	4812      	ldr	r0, [pc, #72]	; (7220 <system_gclk_gen_get_hz+0x54>)
    71d6:	4913      	ldr	r1, [pc, #76]	; (7224 <system_gclk_gen_get_hz+0x58>)
    71d8:	6843      	ldr	r3, [r0, #4]
    71da:	400b      	ands	r3, r1
	while (system_gclk_is_syncing(generator)) {
    71dc:	421a      	tst	r2, r3
    71de:	d1fb      	bne.n	71d8 <system_gclk_gen_get_hz+0xc>
	cpu_irq_enter_critical();
    71e0:	4b11      	ldr	r3, [pc, #68]	; (7228 <system_gclk_gen_get_hz+0x5c>)
    71e2:	4798      	blx	r3

	system_interrupt_enter_critical_section();

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL[generator].bit.SRC);
    71e4:	4f0e      	ldr	r7, [pc, #56]	; (7220 <system_gclk_gen_get_hz+0x54>)
    71e6:	3408      	adds	r4, #8
    71e8:	00a4      	lsls	r4, r4, #2
    71ea:	59e0      	ldr	r0, [r4, r7]
    71ec:	0700      	lsls	r0, r0, #28
    71ee:	0f00      	lsrs	r0, r0, #28
	uint32_t gen_input_hz = system_clock_source_get_hz(
    71f0:	4b0e      	ldr	r3, [pc, #56]	; (722c <system_gclk_gen_get_hz+0x60>)
    71f2:	4798      	blx	r3
    71f4:	0006      	movs	r6, r0

	uint8_t divsel = GCLK->GENCTRL[generator].bit.DIVSEL;
    71f6:	59e5      	ldr	r5, [r4, r7]
    71f8:	04ed      	lsls	r5, r5, #19
    71fa:	0fed      	lsrs	r5, r5, #31
	uint32_t divider = GCLK->GENCTRL[generator].bit.DIV;
    71fc:	59e4      	ldr	r4, [r4, r7]
    71fe:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
    7200:	4b0b      	ldr	r3, [pc, #44]	; (7230 <system_gclk_gen_get_hz+0x64>)
    7202:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    7204:	2d00      	cmp	r5, #0
    7206:	d107      	bne.n	7218 <system_gclk_gen_get_hz+0x4c>
    7208:	2c01      	cmp	r4, #1
    720a:	d907      	bls.n	721c <system_gclk_gen_get_hz+0x50>
		gen_input_hz /= divider;
    720c:	0021      	movs	r1, r4
    720e:	0030      	movs	r0, r6
    7210:	4b08      	ldr	r3, [pc, #32]	; (7234 <system_gclk_gen_get_hz+0x68>)
    7212:	4798      	blx	r3
    7214:	0006      	movs	r6, r0
    7216:	e001      	b.n	721c <system_gclk_gen_get_hz+0x50>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    7218:	3401      	adds	r4, #1
    721a:	40e6      	lsrs	r6, r4
	}

	return gen_input_hz;
}
    721c:	0030      	movs	r0, r6
    721e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7220:	40001800 	.word	0x40001800
    7224:	000007fc 	.word	0x000007fc
    7228:	000045e9 	.word	0x000045e9
    722c:	00006b61 	.word	0x00006b61
    7230:	00004629 	.word	0x00004629
    7234:	00016625 	.word	0x00016625

00007238 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    7238:	b510      	push	{r4, lr}
    723a:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    723c:	4b09      	ldr	r3, [pc, #36]	; (7264 <system_gclk_chan_enable+0x2c>)
    723e:	4798      	blx	r3
    7240:	00a0      	lsls	r0, r4, #2
    7242:	4b09      	ldr	r3, [pc, #36]	; (7268 <system_gclk_chan_enable+0x30>)
    7244:	469c      	mov	ip, r3
    7246:	4460      	add	r0, ip
	system_interrupt_enter_critical_section();

	/* Enable the peripheral channel */
	GCLK->PCHCTRL[channel].reg |= GCLK_PCHCTRL_CHEN;
    7248:	2280      	movs	r2, #128	; 0x80
    724a:	5883      	ldr	r3, [r0, r2]
    724c:	2140      	movs	r1, #64	; 0x40
    724e:	430b      	orrs	r3, r1
    7250:	5083      	str	r3, [r0, r2]

	while (!(GCLK->PCHCTRL[channel].reg & GCLK_PCHCTRL_CHEN)) {
    7252:	3140      	adds	r1, #64	; 0x40
    7254:	3a40      	subs	r2, #64	; 0x40
    7256:	5843      	ldr	r3, [r0, r1]
    7258:	421a      	tst	r2, r3
    725a:	d0fc      	beq.n	7256 <system_gclk_chan_enable+0x1e>
	cpu_irq_leave_critical();
    725c:	4b03      	ldr	r3, [pc, #12]	; (726c <system_gclk_chan_enable+0x34>)
    725e:	4798      	blx	r3
		/* Wait for clock synchronization */
	}

	system_interrupt_leave_critical_section();
}
    7260:	bd10      	pop	{r4, pc}
    7262:	46c0      	nop			; (mov r8, r8)
    7264:	000045e9 	.word	0x000045e9
    7268:	40001800 	.word	0x40001800
    726c:	00004629 	.word	0x00004629

00007270 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    7270:	b510      	push	{r4, lr}
    7272:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    7274:	4b09      	ldr	r3, [pc, #36]	; (729c <system_gclk_chan_disable+0x2c>)
    7276:	4798      	blx	r3
    7278:	00a0      	lsls	r0, r4, #2
    727a:	4b09      	ldr	r3, [pc, #36]	; (72a0 <system_gclk_chan_disable+0x30>)
    727c:	469c      	mov	ip, r3
    727e:	4460      	add	r0, ip

	/* Sanity check WRTLOCK */
	Assert(!GCLK->PCHCTRL[channel].bit.WRTLOCK);

	/* Disable the peripheral channel */
	GCLK->PCHCTRL[channel].reg &= ~GCLK_PCHCTRL_CHEN;
    7280:	2280      	movs	r2, #128	; 0x80
    7282:	5883      	ldr	r3, [r0, r2]
    7284:	2140      	movs	r1, #64	; 0x40
    7286:	438b      	bics	r3, r1
    7288:	5083      	str	r3, [r0, r2]

	while (GCLK->PCHCTRL[channel].reg & GCLK_PCHCTRL_CHEN) {
    728a:	3140      	adds	r1, #64	; 0x40
    728c:	3a40      	subs	r2, #64	; 0x40
    728e:	5843      	ldr	r3, [r0, r1]
    7290:	421a      	tst	r2, r3
    7292:	d1fc      	bne.n	728e <system_gclk_chan_disable+0x1e>
	cpu_irq_leave_critical();
    7294:	4b03      	ldr	r3, [pc, #12]	; (72a4 <system_gclk_chan_disable+0x34>)
    7296:	4798      	blx	r3
		/* Wait for clock synchronization */
	}

	system_interrupt_leave_critical_section();
}
    7298:	bd10      	pop	{r4, pc}
    729a:	46c0      	nop			; (mov r8, r8)
    729c:	000045e9 	.word	0x000045e9
    72a0:	40001800 	.word	0x40001800
    72a4:	00004629 	.word	0x00004629

000072a8 <system_gclk_chan_set_config>:
{
    72a8:	b570      	push	{r4, r5, r6, lr}
    72aa:	0004      	movs	r4, r0
    72ac:	000d      	movs	r5, r1
	system_gclk_chan_disable(channel);
    72ae:	4b05      	ldr	r3, [pc, #20]	; (72c4 <system_gclk_chan_set_config+0x1c>)
    72b0:	4798      	blx	r3
	GCLK->PCHCTRL[channel].reg = GCLK_PCHCTRL_GEN(config->source_generator);
    72b2:	782a      	ldrb	r2, [r5, #0]
    72b4:	230f      	movs	r3, #15
    72b6:	4013      	ands	r3, r2
    72b8:	3420      	adds	r4, #32
    72ba:	00a4      	lsls	r4, r4, #2
    72bc:	4a02      	ldr	r2, [pc, #8]	; (72c8 <system_gclk_chan_set_config+0x20>)
    72be:	50a3      	str	r3, [r4, r2]
}
    72c0:	bd70      	pop	{r4, r5, r6, pc}
    72c2:	46c0      	nop			; (mov r8, r8)
    72c4:	00007271 	.word	0x00007271
    72c8:	40001800 	.word	0x40001800

000072cc <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    72cc:	b510      	push	{r4, lr}
    72ce:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    72d0:	4b06      	ldr	r3, [pc, #24]	; (72ec <system_gclk_chan_get_hz+0x20>)
    72d2:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();
	/* Select the requested generic clock channel */
	gen_id = GCLK->PCHCTRL[channel].bit.GEN;
    72d4:	3420      	adds	r4, #32
    72d6:	00a4      	lsls	r4, r4, #2
    72d8:	4b05      	ldr	r3, [pc, #20]	; (72f0 <system_gclk_chan_get_hz+0x24>)
    72da:	58e4      	ldr	r4, [r4, r3]
    72dc:	0724      	lsls	r4, r4, #28
    72de:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
    72e0:	4b04      	ldr	r3, [pc, #16]	; (72f4 <system_gclk_chan_get_hz+0x28>)
    72e2:	4798      	blx	r3
	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    72e4:	0020      	movs	r0, r4
    72e6:	4b04      	ldr	r3, [pc, #16]	; (72f8 <system_gclk_chan_get_hz+0x2c>)
    72e8:	4798      	blx	r3
}
    72ea:	bd10      	pop	{r4, pc}
    72ec:	000045e9 	.word	0x000045e9
    72f0:	40001800 	.word	0x40001800
    72f4:	00004629 	.word	0x00004629
    72f8:	000071cd 	.word	0x000071cd

000072fc <system_interrupt_clear_pending>:
enum status_code system_interrupt_clear_pending(
		const enum system_interrupt_vector vector)
{
	enum status_code status = STATUS_OK;

	if (vector >= _SYSTEM_INTERRUPT_EXTERNAL_VECTOR_START) {
    72fc:	2800      	cmp	r0, #0
    72fe:	db08      	blt.n	7312 <system_interrupt_clear_pending+0x16>
		NVIC->ICPR[0] = (1 << vector);
    7300:	2301      	movs	r3, #1
    7302:	4083      	lsls	r3, r0
    7304:	22c0      	movs	r2, #192	; 0xc0
    7306:	0052      	lsls	r2, r2, #1
    7308:	4906      	ldr	r1, [pc, #24]	; (7324 <system_interrupt_clear_pending+0x28>)
    730a:	508b      	str	r3, [r1, r2]
	enum status_code status = STATUS_OK;
    730c:	2300      	movs	r3, #0
		Assert(false);
		status = STATUS_ERR_INVALID_ARG;
	}

	return status;
}
    730e:	0018      	movs	r0, r3
    7310:	4770      	bx	lr
		status = STATUS_ERR_INVALID_ARG;
    7312:	2317      	movs	r3, #23
	} else if (vector == SYSTEM_INTERRUPT_SYSTICK) {
    7314:	1c42      	adds	r2, r0, #1
    7316:	d1fa      	bne.n	730e <system_interrupt_clear_pending+0x12>
		SCB->ICSR = SCB_ICSR_PENDSTCLR_Msk;
    7318:	2280      	movs	r2, #128	; 0x80
    731a:	0492      	lsls	r2, r2, #18
    731c:	4b02      	ldr	r3, [pc, #8]	; (7328 <system_interrupt_clear_pending+0x2c>)
    731e:	605a      	str	r2, [r3, #4]
	enum status_code status = STATUS_OK;
    7320:	2300      	movs	r3, #0
    7322:	e7f4      	b.n	730e <system_interrupt_clear_pending+0x12>
    7324:	e000e100 	.word	0xe000e100
    7328:	e000ed00 	.word	0xe000ed00

0000732c <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    732c:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    732e:	78d3      	ldrb	r3, [r2, #3]
    7330:	2b00      	cmp	r3, #0
    7332:	d135      	bne.n	73a0 <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    7334:	7813      	ldrb	r3, [r2, #0]
    7336:	2b80      	cmp	r3, #128	; 0x80
    7338:	d029      	beq.n	738e <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    733a:	061b      	lsls	r3, r3, #24
    733c:	2480      	movs	r4, #128	; 0x80
    733e:	0264      	lsls	r4, r4, #9
    7340:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    7342:	7854      	ldrb	r4, [r2, #1]
    7344:	2502      	movs	r5, #2
    7346:	43ac      	bics	r4, r5
    7348:	d106      	bne.n	7358 <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    734a:	7894      	ldrb	r4, [r2, #2]
    734c:	2c00      	cmp	r4, #0
    734e:	d120      	bne.n	7392 <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
    7350:	2480      	movs	r4, #128	; 0x80
    7352:	02a4      	lsls	r4, r4, #10
    7354:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    7356:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    7358:	7854      	ldrb	r4, [r2, #1]
    735a:	3c01      	subs	r4, #1
    735c:	2c01      	cmp	r4, #1
    735e:	d91c      	bls.n	739a <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    7360:	040d      	lsls	r5, r1, #16
    7362:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    7364:	24a0      	movs	r4, #160	; 0xa0
    7366:	05e4      	lsls	r4, r4, #23
    7368:	432c      	orrs	r4, r5
    736a:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    736c:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    736e:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    7370:	24d0      	movs	r4, #208	; 0xd0
    7372:	0624      	lsls	r4, r4, #24
    7374:	432c      	orrs	r4, r5
    7376:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    7378:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    737a:	78d4      	ldrb	r4, [r2, #3]
    737c:	2c00      	cmp	r4, #0
    737e:	d122      	bne.n	73c6 <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    7380:	035b      	lsls	r3, r3, #13
    7382:	d51c      	bpl.n	73be <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    7384:	7893      	ldrb	r3, [r2, #2]
    7386:	2b01      	cmp	r3, #1
    7388:	d01e      	beq.n	73c8 <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
    738a:	6141      	str	r1, [r0, #20]
    738c:	e017      	b.n	73be <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
    738e:	2300      	movs	r3, #0
    7390:	e7d7      	b.n	7342 <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    7392:	24c0      	movs	r4, #192	; 0xc0
    7394:	02e4      	lsls	r4, r4, #11
    7396:	4323      	orrs	r3, r4
    7398:	e7dd      	b.n	7356 <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    739a:	4c0d      	ldr	r4, [pc, #52]	; (73d0 <_system_pinmux_config+0xa4>)
    739c:	4023      	ands	r3, r4
    739e:	e7df      	b.n	7360 <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
    73a0:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    73a2:	040c      	lsls	r4, r1, #16
    73a4:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    73a6:	23a0      	movs	r3, #160	; 0xa0
    73a8:	05db      	lsls	r3, r3, #23
    73aa:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    73ac:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    73ae:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    73b0:	23d0      	movs	r3, #208	; 0xd0
    73b2:	061b      	lsls	r3, r3, #24
    73b4:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    73b6:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
    73b8:	78d3      	ldrb	r3, [r2, #3]
    73ba:	2b00      	cmp	r3, #0
    73bc:	d103      	bne.n	73c6 <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    73be:	7853      	ldrb	r3, [r2, #1]
    73c0:	3b01      	subs	r3, #1
    73c2:	2b01      	cmp	r3, #1
    73c4:	d902      	bls.n	73cc <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
    73c6:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
    73c8:	6181      	str	r1, [r0, #24]
    73ca:	e7f8      	b.n	73be <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
    73cc:	6081      	str	r1, [r0, #8]
}
    73ce:	e7fa      	b.n	73c6 <_system_pinmux_config+0x9a>
    73d0:	fffbffff 	.word	0xfffbffff

000073d4 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    73d4:	b510      	push	{r4, lr}
    73d6:	000a      	movs	r2, r1
	if (port_index < PORT_INST_NUM) {
    73d8:	09c1      	lsrs	r1, r0, #7
		return NULL;
    73da:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    73dc:	2900      	cmp	r1, #0
    73de:	d104      	bne.n	73ea <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    73e0:	0943      	lsrs	r3, r0, #5
    73e2:	01db      	lsls	r3, r3, #7
    73e4:	4905      	ldr	r1, [pc, #20]	; (73fc <system_pinmux_pin_set_config+0x28>)
    73e6:	468c      	mov	ip, r1
    73e8:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    73ea:	241f      	movs	r4, #31
    73ec:	4020      	ands	r0, r4
    73ee:	2101      	movs	r1, #1
    73f0:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
    73f2:	0018      	movs	r0, r3
    73f4:	4b02      	ldr	r3, [pc, #8]	; (7400 <system_pinmux_pin_set_config+0x2c>)
    73f6:	4798      	blx	r3
}
    73f8:	bd10      	pop	{r4, pc}
    73fa:	46c0      	nop			; (mov r8, r8)
    73fc:	40002800 	.word	0x40002800
    7400:	0000732d 	.word	0x0000732d

00007404 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    7404:	4770      	bx	lr
	...

00007408 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    7408:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    740a:	4b05      	ldr	r3, [pc, #20]	; (7420 <system_init+0x18>)
    740c:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    740e:	4b05      	ldr	r3, [pc, #20]	; (7424 <system_init+0x1c>)
    7410:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    7412:	4b05      	ldr	r3, [pc, #20]	; (7428 <system_init+0x20>)
    7414:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    7416:	4b05      	ldr	r3, [pc, #20]	; (742c <system_init+0x24>)
    7418:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    741a:	4b05      	ldr	r3, [pc, #20]	; (7430 <system_init+0x28>)
    741c:	4798      	blx	r3
}
    741e:	bd10      	pop	{r4, pc}
    7420:	00006e89 	.word	0x00006e89
    7424:	00004659 	.word	0x00004659
    7428:	00007405 	.word	0x00007405
    742c:	00004a51 	.word	0x00004a51
    7430:	00007405 	.word	0x00007405

00007434 <tc_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    7434:	1c93      	adds	r3, r2, #2
    7436:	009b      	lsls	r3, r3, #2
    7438:	5019      	str	r1, [r3, r0]

	/* Set the bit corresponding to the callback_type */
	if (callback_type == TC_CALLBACK_CC_CHANNEL0) {
    743a:	2a02      	cmp	r2, #2
    743c:	d009      	beq.n	7452 <tc_register_callback+0x1e>
		module->register_callback_mask |= TC_INTFLAG_MC(1);
	}
	else if (callback_type == TC_CALLBACK_CC_CHANNEL1) {
    743e:	2a03      	cmp	r2, #3
    7440:	d00c      	beq.n	745c <tc_register_callback+0x28>
		module->register_callback_mask |= TC_INTFLAG_MC(2);
	}
	else {
		module->register_callback_mask |= (1 << callback_type);
    7442:	2301      	movs	r3, #1
    7444:	4093      	lsls	r3, r2
    7446:	001a      	movs	r2, r3
    7448:	7e03      	ldrb	r3, [r0, #24]
    744a:	4313      	orrs	r3, r2
    744c:	7603      	strb	r3, [r0, #24]
	}
	return STATUS_OK;
}
    744e:	2000      	movs	r0, #0
    7450:	4770      	bx	lr
		module->register_callback_mask |= TC_INTFLAG_MC(1);
    7452:	7e03      	ldrb	r3, [r0, #24]
    7454:	2210      	movs	r2, #16
    7456:	4313      	orrs	r3, r2
    7458:	7603      	strb	r3, [r0, #24]
    745a:	e7f8      	b.n	744e <tc_register_callback+0x1a>
		module->register_callback_mask |= TC_INTFLAG_MC(2);
    745c:	7e03      	ldrb	r3, [r0, #24]
    745e:	2220      	movs	r2, #32
    7460:	4313      	orrs	r3, r2
    7462:	7603      	strb	r3, [r0, #24]
    7464:	e7f3      	b.n	744e <tc_register_callback+0x1a>
	...

00007468 <_tc_interrupt_handler>:
 * \param[in]  instance  ID of the TC instance calling the interrupt
 *                       handler
 */
void _tc_interrupt_handler(
		uint8_t instance)
{
    7468:	b570      	push	{r4, r5, r6, lr}
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */
	struct tc_module *module
    746a:	0080      	lsls	r0, r0, #2
    746c:	4b16      	ldr	r3, [pc, #88]	; (74c8 <_tc_interrupt_handler+0x60>)
    746e:	58c4      	ldr	r4, [r0, r3]
			= (struct tc_module *)_tc_instances[instance];

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
    7470:	6823      	ldr	r3, [r4, #0]
    7472:	7a9d      	ldrb	r5, [r3, #10]
    7474:	7e22      	ldrb	r2, [r4, #24]
    7476:	7e63      	ldrb	r3, [r4, #25]
    7478:	4013      	ands	r3, r2
    747a:	401d      	ands	r5, r3
			module->register_callback_mask &
			module->enable_callback_mask;

	/* Check if an Overflow interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
    747c:	07eb      	lsls	r3, r5, #31
    747e:	d406      	bmi.n	748e <_tc_interrupt_handler+0x26>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
	}

	/* Check if an Error interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_ERR) {
    7480:	07ab      	lsls	r3, r5, #30
    7482:	d40b      	bmi.n	749c <_tc_interrupt_handler+0x34>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
	}

	/* Check if an Match/Capture Channel 0 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(1)) {
    7484:	06eb      	lsls	r3, r5, #27
    7486:	d410      	bmi.n	74aa <_tc_interrupt_handler+0x42>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
	}

	/* Check if an Match/Capture Channel 1 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(2)) {
    7488:	06ab      	lsls	r3, r5, #26
    748a:	d415      	bmi.n	74b8 <_tc_interrupt_handler+0x50>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
	}
}
    748c:	bd70      	pop	{r4, r5, r6, pc}
		(module->callback[TC_CALLBACK_OVERFLOW])(module);
    748e:	0020      	movs	r0, r4
    7490:	68a3      	ldr	r3, [r4, #8]
    7492:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
    7494:	2301      	movs	r3, #1
    7496:	6822      	ldr	r2, [r4, #0]
    7498:	7293      	strb	r3, [r2, #10]
    749a:	e7f1      	b.n	7480 <_tc_interrupt_handler+0x18>
		(module->callback[TC_CALLBACK_ERROR])(module);
    749c:	0020      	movs	r0, r4
    749e:	68e3      	ldr	r3, [r4, #12]
    74a0:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
    74a2:	2302      	movs	r3, #2
    74a4:	6822      	ldr	r2, [r4, #0]
    74a6:	7293      	strb	r3, [r2, #10]
    74a8:	e7ec      	b.n	7484 <_tc_interrupt_handler+0x1c>
		(module->callback[TC_CALLBACK_CC_CHANNEL0])(module);
    74aa:	0020      	movs	r0, r4
    74ac:	6923      	ldr	r3, [r4, #16]
    74ae:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
    74b0:	2310      	movs	r3, #16
    74b2:	6822      	ldr	r2, [r4, #0]
    74b4:	7293      	strb	r3, [r2, #10]
    74b6:	e7e7      	b.n	7488 <_tc_interrupt_handler+0x20>
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
    74b8:	0020      	movs	r0, r4
    74ba:	6963      	ldr	r3, [r4, #20]
    74bc:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
    74be:	6823      	ldr	r3, [r4, #0]
    74c0:	2220      	movs	r2, #32
    74c2:	729a      	strb	r2, [r3, #10]
}
    74c4:	e7e2      	b.n	748c <_tc_interrupt_handler+0x24>
    74c6:	46c0      	nop			; (mov r8, r8)
    74c8:	20002250 	.word	0x20002250

000074cc <TC0_Handler>:
	MRECURSION(TC_INST_NUM, _TC_INTERRUPT_HANDLER, TC_INST_MAX_ID)
    74cc:	b510      	push	{r4, lr}
    74ce:	2000      	movs	r0, #0
    74d0:	4b01      	ldr	r3, [pc, #4]	; (74d8 <TC0_Handler+0xc>)
    74d2:	4798      	blx	r3
    74d4:	bd10      	pop	{r4, pc}
    74d6:	46c0      	nop			; (mov r8, r8)
    74d8:	00007469 	.word	0x00007469

000074dc <TC1_Handler>:
    74dc:	b510      	push	{r4, lr}
    74de:	2001      	movs	r0, #1
    74e0:	4b01      	ldr	r3, [pc, #4]	; (74e8 <TC1_Handler+0xc>)
    74e2:	4798      	blx	r3
    74e4:	bd10      	pop	{r4, pc}
    74e6:	46c0      	nop			; (mov r8, r8)
    74e8:	00007469 	.word	0x00007469

000074ec <TC2_Handler>:
    74ec:	b510      	push	{r4, lr}
    74ee:	2002      	movs	r0, #2
    74f0:	4b01      	ldr	r3, [pc, #4]	; (74f8 <TC2_Handler+0xc>)
    74f2:	4798      	blx	r3
    74f4:	bd10      	pop	{r4, pc}
    74f6:	46c0      	nop			; (mov r8, r8)
    74f8:	00007469 	.word	0x00007469

000074fc <TC3_Handler>:
    74fc:	b510      	push	{r4, lr}
    74fe:	2003      	movs	r0, #3
    7500:	4b01      	ldr	r3, [pc, #4]	; (7508 <TC3_Handler+0xc>)
    7502:	4798      	blx	r3
    7504:	bd10      	pop	{r4, pc}
    7506:	46c0      	nop			; (mov r8, r8)
    7508:	00007469 	.word	0x00007469

0000750c <TC4_Handler>:
    750c:	b510      	push	{r4, lr}
    750e:	2004      	movs	r0, #4
    7510:	4b01      	ldr	r3, [pc, #4]	; (7518 <TC4_Handler+0xc>)
    7512:	4798      	blx	r3
    7514:	bd10      	pop	{r4, pc}
    7516:	46c0      	nop			; (mov r8, r8)
    7518:	00007469 	.word	0x00007469

0000751c <_tc_get_inst_index>:
 *
 * \return Index of the given TC module instance.
 */
uint8_t _tc_get_inst_index(
		Tc *const hw)
{
    751c:	b530      	push	{r4, r5, lr}
    751e:	b087      	sub	sp, #28
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
    7520:	a901      	add	r1, sp, #4
    7522:	4b0c      	ldr	r3, [pc, #48]	; (7554 <_tc_get_inst_index+0x38>)
    7524:	000a      	movs	r2, r1
    7526:	cb32      	ldmia	r3!, {r1, r4, r5}
    7528:	c232      	stmia	r2!, {r1, r4, r5}
    752a:	cb12      	ldmia	r3!, {r1, r4}
    752c:	c212      	stmia	r2!, {r1, r4}

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
		if (hw == tc_modules[i]) {
    752e:	9b01      	ldr	r3, [sp, #4]
    7530:	4298      	cmp	r0, r3
    7532:	d00b      	beq.n	754c <_tc_get_inst_index+0x30>
    7534:	2301      	movs	r3, #1
    7536:	a901      	add	r1, sp, #4
    7538:	009a      	lsls	r2, r3, #2
    753a:	5852      	ldr	r2, [r2, r1]
    753c:	4282      	cmp	r2, r0
    753e:	d006      	beq.n	754e <_tc_get_inst_index+0x32>
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    7540:	3301      	adds	r3, #1
    7542:	2b05      	cmp	r3, #5
    7544:	d1f8      	bne.n	7538 <_tc_get_inst_index+0x1c>
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
    7546:	2000      	movs	r0, #0
}
    7548:	b007      	add	sp, #28
    754a:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    754c:	2300      	movs	r3, #0
			return i;
    754e:	b2d8      	uxtb	r0, r3
    7550:	e7fa      	b.n	7548 <_tc_get_inst_index+0x2c>
    7552:	46c0      	nop			; (mov r8, r8)
    7554:	0001fc3c 	.word	0x0001fc3c

00007558 <tc_init>:
 */
enum status_code tc_init(
		struct tc_module *const module_inst,
		Tc *const hw,
		const struct tc_config *const config)
{
    7558:	b5f0      	push	{r4, r5, r6, r7, lr}
    755a:	46c6      	mov	lr, r8
    755c:	b500      	push	{lr}
    755e:	b08e      	sub	sp, #56	; 0x38
    7560:	0004      	movs	r4, r0
    7562:	000d      	movs	r5, r1
    7564:	0016      	movs	r6, r2
	uint32_t ctrla_tmp = 0;
	/* Temporary variable to hold all updates to the CTRLBSET
	 * register before they are written to it */
	uint8_t ctrlbset_tmp = 0;
	/* Temporary variable to hold TC instance number */
	uint8_t instance = _tc_get_inst_index(hw);
    7566:	0008      	movs	r0, r1
    7568:	4bae      	ldr	r3, [pc, #696]	; (7824 <tc_init+0x2cc>)
    756a:	4798      	blx	r3
    756c:	4680      	mov	r8, r0
									SYSTEM_CLOCK_APB_APBC, MCLK_APBCMASK_TC2,
									SYSTEM_CLOCK_APB_APBC, MCLK_APBCMASK_TC3,
									SYSTEM_CLOCK_APB_APBC, MCLK_APBCMASK_TC4};
#elif (SAML21J) || (SAMR34J) || (SAMR35J) || (WLR089U0)
	/* Array of GLCK ID for different TC instances */
	uint8_t inst_gclk_id[] = {TC0_GCLK_ID, TC1_GCLK_ID, TC2_GCLK_ID, TC3_GCLK_ID, TC4_GCLK_ID};
    756e:	ab0c      	add	r3, sp, #48	; 0x30
    7570:	221b      	movs	r2, #27
    7572:	701a      	strb	r2, [r3, #0]
    7574:	705a      	strb	r2, [r3, #1]
    7576:	3201      	adds	r2, #1
    7578:	709a      	strb	r2, [r3, #2]
    757a:	70da      	strb	r2, [r3, #3]
    757c:	3201      	adds	r2, #1
    757e:	711a      	strb	r2, [r3, #4]
	/* Array of MCLK APB mask bit position for different TC instances */
	uint32_t inst_mclk_apbmask[] = {SYSTEM_CLOCK_APB_APBC, MCLK_APBCMASK_TC0,
    7580:	a902      	add	r1, sp, #8
    7582:	4ba9      	ldr	r3, [pc, #676]	; (7828 <tc_init+0x2d0>)
    7584:	3314      	adds	r3, #20
    7586:	000a      	movs	r2, r1
    7588:	cb83      	ldmia	r3!, {r0, r1, r7}
    758a:	c283      	stmia	r2!, {r0, r1, r7}
    758c:	cb83      	ldmia	r3!, {r0, r1, r7}
    758e:	c283      	stmia	r2!, {r0, r1, r7}
    7590:	cb83      	ldmia	r3!, {r0, r1, r7}
    7592:	c283      	stmia	r2!, {r0, r1, r7}
    7594:	681b      	ldr	r3, [r3, #0]
    7596:	6013      	str	r3, [r2, #0]
	struct system_gclk_chan_config gclk_chan_config;

#if TC_ASYNC == true
	/* Initialize parameters */
	for (uint8_t i = 0; i < TC_CALLBACK_N; i++) {
		module_inst->callback[i]        = NULL;
    7598:	2300      	movs	r3, #0
    759a:	60a3      	str	r3, [r4, #8]
    759c:	60e3      	str	r3, [r4, #12]
    759e:	6123      	str	r3, [r4, #16]
    75a0:	6163      	str	r3, [r4, #20]
	}
	module_inst->register_callback_mask     = 0x00;
    75a2:	7623      	strb	r3, [r4, #24]
	module_inst->enable_callback_mask       = 0x00;
    75a4:	7663      	strb	r3, [r4, #25]

	/* Register this instance for callbacks*/
	_tc_instances[instance] = module_inst;
    75a6:	4643      	mov	r3, r8
    75a8:	009a      	lsls	r2, r3, #2
    75aa:	4ba0      	ldr	r3, [pc, #640]	; (782c <tc_init+0x2d4>)
    75ac:	50d4      	str	r4, [r2, r3]
#endif

	/* Associate the given device instance with the hardware module */
	module_inst->hw = hw;
    75ae:	6025      	str	r5, [r4, #0]

	module_inst->double_buffering_enabled = config->double_buffering_enabled;
    75b0:	2334      	movs	r3, #52	; 0x34
    75b2:	5cf3      	ldrb	r3, [r6, r3]
    75b4:	76a3      	strb	r3, [r4, #26]

	/* Check if odd numbered TC modules are being configured in 32-bit
	 * counter size. Only even numbered counters are allowed to be
	 * configured in 32-bit counter size.
	 */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
    75b6:	78f3      	ldrb	r3, [r6, #3]
    75b8:	2b08      	cmp	r3, #8
    75ba:	d008      	beq.n	75ce <tc_init+0x76>
	}

	/* Make the counter size variable in the module_inst struct reflect
	 * the counter size in the module
	 */
	module_inst->counter_size = config->counter_size;
    75bc:	7123      	strb	r3, [r4, #4]

	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
    75be:	682b      	ldr	r3, [r5, #0]
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
    75c0:	2005      	movs	r0, #5
	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
    75c2:	07db      	lsls	r3, r3, #31
    75c4:	d508      	bpl.n	75d8 <tc_init+0x80>
			return STATUS_OK;
	}

	Assert(false);
	return STATUS_ERR_INVALID_ARG;
}
    75c6:	b00e      	add	sp, #56	; 0x38
    75c8:	bc04      	pop	{r2}
    75ca:	4690      	mov	r8, r2
    75cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return STATUS_ERR_INVALID_ARG;
    75ce:	2017      	movs	r0, #23
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
    75d0:	4642      	mov	r2, r8
    75d2:	07d2      	lsls	r2, r2, #31
    75d4:	d4f7      	bmi.n	75c6 <tc_init+0x6e>
    75d6:	e7f1      	b.n	75bc <tc_init+0x64>
	if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE) {
    75d8:	7aeb      	ldrb	r3, [r5, #11]
		return STATUS_ERR_DENIED;
    75da:	3017      	adds	r0, #23
	if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE) {
    75dc:	079b      	lsls	r3, r3, #30
    75de:	d4f2      	bmi.n	75c6 <tc_init+0x6e>
	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_ENABLE) {
    75e0:	682b      	ldr	r3, [r5, #0]
    75e2:	079b      	lsls	r3, r3, #30
    75e4:	d4ef      	bmi.n	75c6 <tc_init+0x6e>
	if (config->pwm_channel[0].enabled) {
    75e6:	7c33      	ldrb	r3, [r6, #16]
    75e8:	2b00      	cmp	r3, #0
    75ea:	d112      	bne.n	7612 <tc_init+0xba>
	if (config->pwm_channel[1].enabled) {
    75ec:	7f33      	ldrb	r3, [r6, #28]
    75ee:	2b00      	cmp	r3, #0
    75f0:	d11b      	bne.n	762a <tc_init+0xd2>
	system_apb_clock_set_mask((enum system_clock_apb_bus)inst_mclk_apbmask[instance*2],
    75f2:	4643      	mov	r3, r8
    75f4:	005a      	lsls	r2, r3, #1
    75f6:	a902      	add	r1, sp, #8
    75f8:	1c53      	adds	r3, r2, #1
    75fa:	009b      	lsls	r3, r3, #2
    75fc:	5858      	ldr	r0, [r3, r1]
    75fe:	4643      	mov	r3, r8
    7600:	00db      	lsls	r3, r3, #3
    7602:	585b      	ldr	r3, [r3, r1]
	switch (bus) {
    7604:	b2d9      	uxtb	r1, r3
    7606:	2904      	cmp	r1, #4
    7608:	d823      	bhi.n	7652 <tc_init+0xfa>
    760a:	008b      	lsls	r3, r1, #2
    760c:	4988      	ldr	r1, [pc, #544]	; (7830 <tc_init+0x2d8>)
    760e:	58cb      	ldr	r3, [r1, r3]
    7610:	469f      	mov	pc, r3
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    7612:	a901      	add	r1, sp, #4
    7614:	2301      	movs	r3, #1
    7616:	708b      	strb	r3, [r1, #2]
	config->powersave    = false;
    7618:	2200      	movs	r2, #0
    761a:	70ca      	strb	r2, [r1, #3]
		pin_config.mux_position = config->pwm_channel[0].pin_mux;
    761c:	7e32      	ldrb	r2, [r6, #24]
    761e:	700a      	strb	r2, [r1, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    7620:	704b      	strb	r3, [r1, #1]
		system_pinmux_pin_set_config(
    7622:	7d30      	ldrb	r0, [r6, #20]
    7624:	4b83      	ldr	r3, [pc, #524]	; (7834 <tc_init+0x2dc>)
    7626:	4798      	blx	r3
    7628:	e7e0      	b.n	75ec <tc_init+0x94>
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    762a:	a901      	add	r1, sp, #4
    762c:	2301      	movs	r3, #1
    762e:	708b      	strb	r3, [r1, #2]
	config->powersave    = false;
    7630:	2200      	movs	r2, #0
    7632:	70ca      	strb	r2, [r1, #3]
		pin_config.mux_position = config->pwm_channel[1].pin_mux;
    7634:	3224      	adds	r2, #36	; 0x24
    7636:	18b2      	adds	r2, r6, r2
    7638:	7812      	ldrb	r2, [r2, #0]
    763a:	700a      	strb	r2, [r1, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    763c:	704b      	strb	r3, [r1, #1]
		system_pinmux_pin_set_config(
    763e:	331f      	adds	r3, #31
    7640:	18f3      	adds	r3, r6, r3
    7642:	7818      	ldrb	r0, [r3, #0]
    7644:	4b7b      	ldr	r3, [pc, #492]	; (7834 <tc_init+0x2dc>)
    7646:	4798      	blx	r3
    7648:	e7d3      	b.n	75f2 <tc_init+0x9a>
			MCLK->APBAMASK.reg |= mask;
    764a:	497b      	ldr	r1, [pc, #492]	; (7838 <tc_init+0x2e0>)
    764c:	694b      	ldr	r3, [r1, #20]
    764e:	4318      	orrs	r0, r3
    7650:	6148      	str	r0, [r1, #20]
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) && (instance+1 < TC_INST_NUM))
    7652:	78f3      	ldrb	r3, [r6, #3]
    7654:	2b08      	cmp	r3, #8
    7656:	d100      	bne.n	765a <tc_init+0x102>
    7658:	e086      	b.n	7768 <tc_init+0x210>
	gclk_chan_config.source_generator = config->clock_source;
    765a:	7833      	ldrb	r3, [r6, #0]
    765c:	466a      	mov	r2, sp
    765e:	7013      	strb	r3, [r2, #0]
	system_gclk_chan_set_config(inst_gclk_id[instance], &gclk_chan_config);
    7660:	ab0c      	add	r3, sp, #48	; 0x30
    7662:	4642      	mov	r2, r8
    7664:	5c9f      	ldrb	r7, [r3, r2]
    7666:	4669      	mov	r1, sp
    7668:	0038      	movs	r0, r7
    766a:	4b74      	ldr	r3, [pc, #464]	; (783c <tc_init+0x2e4>)
    766c:	4798      	blx	r3
	system_gclk_chan_enable(inst_gclk_id[instance]);
    766e:	0038      	movs	r0, r7
    7670:	4b73      	ldr	r3, [pc, #460]	; (7840 <tc_init+0x2e8>)
    7672:	4798      	blx	r3
			(uint32_t)config->counter_size |
    7674:	78f3      	ldrb	r3, [r6, #3]
    7676:	79f2      	ldrb	r2, [r6, #7]
    7678:	4313      	orrs	r3, r2
			(uint32_t)config->clock_prescaler;
    767a:	88b2      	ldrh	r2, [r6, #4]
	ctrla_tmp =
    767c:	4313      	orrs	r3, r2
		if (config->enable_capture_on_channel[i] == true) {
    767e:	7a72      	ldrb	r2, [r6, #9]
    7680:	2a00      	cmp	r2, #0
    7682:	d002      	beq.n	768a <tc_init+0x132>
			ctrla_tmp |= (TC_CTRLA_CAPTEN(1) << i);
    7684:	2280      	movs	r2, #128	; 0x80
    7686:	0252      	lsls	r2, r2, #9
    7688:	4313      	orrs	r3, r2
		if (config->enable_capture_on_channel[i] == true) {
    768a:	7ab2      	ldrb	r2, [r6, #10]
    768c:	2a00      	cmp	r2, #0
    768e:	d002      	beq.n	7696 <tc_init+0x13e>
			ctrla_tmp |= (TC_CTRLA_CAPTEN(1) << i);
    7690:	2280      	movs	r2, #128	; 0x80
    7692:	0292      	lsls	r2, r2, #10
    7694:	4313      	orrs	r3, r2
		if (config->enable_capture_on_IO[i] == true) {
    7696:	7af2      	ldrb	r2, [r6, #11]
    7698:	2a00      	cmp	r2, #0
    769a:	d002      	beq.n	76a2 <tc_init+0x14a>
			ctrla_tmp |= (TC_CTRLA_COPEN(1) << i);
    769c:	2280      	movs	r2, #128	; 0x80
    769e:	0352      	lsls	r2, r2, #13
    76a0:	4313      	orrs	r3, r2
		if (config->enable_capture_on_IO[i] == true) {
    76a2:	7b32      	ldrb	r2, [r6, #12]
    76a4:	2a00      	cmp	r2, #0
    76a6:	d002      	beq.n	76ae <tc_init+0x156>
			ctrla_tmp |= (TC_CTRLA_COPEN(1) << i);
    76a8:	2280      	movs	r2, #128	; 0x80
    76aa:	0392      	lsls	r2, r2, #14
    76ac:	4313      	orrs	r3, r2
	ctrla_tmp |= (config->run_in_standby << TC_CTRLA_RUNSTDBY_Pos)
    76ae:	7871      	ldrb	r1, [r6, #1]
    76b0:	0189      	lsls	r1, r1, #6
				|(config->on_demand << TC_CTRLA_ONDEMAND_Pos);
    76b2:	78b2      	ldrb	r2, [r6, #2]
    76b4:	01d2      	lsls	r2, r2, #7
    76b6:	4311      	orrs	r1, r2
	ctrla_tmp |= (config->run_in_standby << TC_CTRLA_RUNSTDBY_Pos)
    76b8:	4319      	orrs	r1, r3
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    76ba:	6822      	ldr	r2, [r4, #0]

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30) || (SAMR34) || (SAMR35) || (WLR089)
	return (tc_module->SYNCBUSY.reg);
    76bc:	6913      	ldr	r3, [r2, #16]
	while (tc_is_syncing(module_inst)) {
    76be:	2b00      	cmp	r3, #0
    76c0:	d1fc      	bne.n	76bc <tc_init+0x164>
	hw->COUNT8.CTRLA.reg = ctrla_tmp;
    76c2:	6029      	str	r1, [r5, #0]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    76c4:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    76c6:	6913      	ldr	r3, [r2, #16]
	while (tc_is_syncing(module_inst)) {
    76c8:	2b00      	cmp	r3, #0
    76ca:	d1fc      	bne.n	76c6 <tc_init+0x16e>
	hw->COUNT8.WAVE.reg = config->wave_generation;
    76cc:	79b3      	ldrb	r3, [r6, #6]
    76ce:	732b      	strb	r3, [r5, #12]
	if (config->oneshot) {
    76d0:	7b71      	ldrb	r1, [r6, #13]
		ctrlbset_tmp = TC_CTRLBSET_ONESHOT;
    76d2:	1e4b      	subs	r3, r1, #1
    76d4:	4199      	sbcs	r1, r3
    76d6:	0089      	lsls	r1, r1, #2
	if (config->count_direction) {
    76d8:	7bb3      	ldrb	r3, [r6, #14]
    76da:	2b00      	cmp	r3, #0
    76dc:	d001      	beq.n	76e2 <tc_init+0x18a>
		ctrlbset_tmp |= TC_CTRLBSET_DIR;
    76de:	2301      	movs	r3, #1
    76e0:	4319      	orrs	r1, r3
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    76e2:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    76e4:	6913      	ldr	r3, [r2, #16]
	while (tc_is_syncing(module_inst)) {
    76e6:	2b00      	cmp	r3, #0
    76e8:	d1fc      	bne.n	76e4 <tc_init+0x18c>
	hw->COUNT8.CTRLBCLR.reg = 0xFF;
    76ea:	33ff      	adds	r3, #255	; 0xff
    76ec:	712b      	strb	r3, [r5, #4]
	if (ctrlbset_tmp) {
    76ee:	2900      	cmp	r1, #0
    76f0:	d004      	beq.n	76fc <tc_init+0x1a4>
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    76f2:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    76f4:	6913      	ldr	r3, [r2, #16]
		while (tc_is_syncing(module_inst)) {
    76f6:	2b00      	cmp	r3, #0
    76f8:	d1fc      	bne.n	76f4 <tc_init+0x19c>
		hw->COUNT8.CTRLBSET.reg = ctrlbset_tmp;
    76fa:	7169      	strb	r1, [r5, #5]
	hw->COUNT8.DRVCTRL.reg = config->waveform_invert_output;
    76fc:	7a33      	ldrb	r3, [r6, #8]
    76fe:	736b      	strb	r3, [r5, #13]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    7700:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    7702:	6913      	ldr	r3, [r2, #16]
	while (tc_is_syncing(module_inst)) {
    7704:	2b00      	cmp	r3, #0
    7706:	d1fc      	bne.n	7702 <tc_init+0x1aa>
	switch (module_inst->counter_size) {
    7708:	7923      	ldrb	r3, [r4, #4]
    770a:	2b04      	cmp	r3, #4
    770c:	d059      	beq.n	77c2 <tc_init+0x26a>
    770e:	2b08      	cmp	r3, #8
    7710:	d074      	beq.n	77fc <tc_init+0x2a4>
	return STATUS_ERR_INVALID_ARG;
    7712:	2017      	movs	r0, #23
	switch (module_inst->counter_size) {
    7714:	2b00      	cmp	r3, #0
    7716:	d000      	beq.n	771a <tc_init+0x1c2>
    7718:	e755      	b.n	75c6 <tc_init+0x6e>
    771a:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
    771c:	2b00      	cmp	r3, #0
    771e:	d1fc      	bne.n	771a <tc_init+0x1c2>
				= config->counter_16_bit.value;
    7720:	8d33      	ldrh	r3, [r6, #40]	; 0x28
    7722:	82ab      	strh	r3, [r5, #20]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    7724:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    7726:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
    7728:	2b00      	cmp	r3, #0
    772a:	d1fc      	bne.n	7726 <tc_init+0x1ce>
					config->counter_16_bit.compare_capture_channel[0];
    772c:	8d73      	ldrh	r3, [r6, #42]	; 0x2a
			hw->COUNT16.CC[0].reg =
    772e:	83ab      	strh	r3, [r5, #28]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    7730:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    7732:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
    7734:	2b00      	cmp	r3, #0
    7736:	d1fc      	bne.n	7732 <tc_init+0x1da>
					config->counter_16_bit.compare_capture_channel[1];
    7738:	8db3      	ldrh	r3, [r6, #44]	; 0x2c
			hw->COUNT16.CC[1].reg =
    773a:	83eb      	strh	r3, [r5, #30]
			return STATUS_OK;
    773c:	2000      	movs	r0, #0
    773e:	e742      	b.n	75c6 <tc_init+0x6e>
			MCLK->APBBMASK.reg |= mask;
    7740:	493d      	ldr	r1, [pc, #244]	; (7838 <tc_init+0x2e0>)
    7742:	698b      	ldr	r3, [r1, #24]
    7744:	4318      	orrs	r0, r3
    7746:	6188      	str	r0, [r1, #24]
    7748:	e783      	b.n	7652 <tc_init+0xfa>
			MCLK->APBCMASK.reg |= mask;
    774a:	493b      	ldr	r1, [pc, #236]	; (7838 <tc_init+0x2e0>)
    774c:	69cb      	ldr	r3, [r1, #28]
    774e:	4318      	orrs	r0, r3
    7750:	61c8      	str	r0, [r1, #28]
    7752:	e77e      	b.n	7652 <tc_init+0xfa>
			MCLK->APBDMASK.reg |= mask;
    7754:	4938      	ldr	r1, [pc, #224]	; (7838 <tc_init+0x2e0>)
    7756:	6a0b      	ldr	r3, [r1, #32]
    7758:	4318      	orrs	r0, r3
    775a:	6208      	str	r0, [r1, #32]
    775c:	e779      	b.n	7652 <tc_init+0xfa>
			MCLK->APBEMASK.reg |= mask;
    775e:	4b36      	ldr	r3, [pc, #216]	; (7838 <tc_init+0x2e0>)
    7760:	6a59      	ldr	r1, [r3, #36]	; 0x24
    7762:	4308      	orrs	r0, r1
    7764:	6258      	str	r0, [r3, #36]	; 0x24
    7766:	e774      	b.n	7652 <tc_init+0xfa>
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) && (instance+1 < TC_INST_NUM))
    7768:	4643      	mov	r3, r8
    776a:	3301      	adds	r3, #1
    776c:	2b04      	cmp	r3, #4
    776e:	dd00      	ble.n	7772 <tc_init+0x21a>
    7770:	e773      	b.n	765a <tc_init+0x102>
		system_apb_clock_set_mask((enum system_clock_apb_bus)inst_mclk_apbmask[(instance+1)*2],
    7772:	ab02      	add	r3, sp, #8
    7774:	1cd1      	adds	r1, r2, #3
    7776:	0089      	lsls	r1, r1, #2
    7778:	58c9      	ldr	r1, [r1, r3]
    777a:	3202      	adds	r2, #2
    777c:	0092      	lsls	r2, r2, #2
    777e:	58d3      	ldr	r3, [r2, r3]
	switch (bus) {
    7780:	b2da      	uxtb	r2, r3
    7782:	2a04      	cmp	r2, #4
    7784:	d900      	bls.n	7788 <tc_init+0x230>
    7786:	e768      	b.n	765a <tc_init+0x102>
    7788:	0093      	lsls	r3, r2, #2
    778a:	4a2e      	ldr	r2, [pc, #184]	; (7844 <tc_init+0x2ec>)
    778c:	58d3      	ldr	r3, [r2, r3]
    778e:	469f      	mov	pc, r3
			MCLK->APBAMASK.reg |= mask;
    7790:	4a29      	ldr	r2, [pc, #164]	; (7838 <tc_init+0x2e0>)
    7792:	6953      	ldr	r3, [r2, #20]
    7794:	4319      	orrs	r1, r3
    7796:	6151      	str	r1, [r2, #20]
    7798:	e75f      	b.n	765a <tc_init+0x102>
			MCLK->APBBMASK.reg |= mask;
    779a:	4a27      	ldr	r2, [pc, #156]	; (7838 <tc_init+0x2e0>)
    779c:	6993      	ldr	r3, [r2, #24]
    779e:	4319      	orrs	r1, r3
    77a0:	6191      	str	r1, [r2, #24]
    77a2:	e75a      	b.n	765a <tc_init+0x102>
			MCLK->APBCMASK.reg |= mask;
    77a4:	4a24      	ldr	r2, [pc, #144]	; (7838 <tc_init+0x2e0>)
    77a6:	69d3      	ldr	r3, [r2, #28]
    77a8:	4319      	orrs	r1, r3
    77aa:	61d1      	str	r1, [r2, #28]
    77ac:	e755      	b.n	765a <tc_init+0x102>
			MCLK->APBDMASK.reg |= mask;
    77ae:	4a22      	ldr	r2, [pc, #136]	; (7838 <tc_init+0x2e0>)
    77b0:	6a13      	ldr	r3, [r2, #32]
    77b2:	4319      	orrs	r1, r3
    77b4:	6211      	str	r1, [r2, #32]
    77b6:	e750      	b.n	765a <tc_init+0x102>
			MCLK->APBEMASK.reg |= mask;
    77b8:	4b1f      	ldr	r3, [pc, #124]	; (7838 <tc_init+0x2e0>)
    77ba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    77bc:	4311      	orrs	r1, r2
    77be:	6259      	str	r1, [r3, #36]	; 0x24
    77c0:	e74b      	b.n	765a <tc_init+0x102>
    77c2:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
    77c4:	2b00      	cmp	r3, #0
    77c6:	d1fc      	bne.n	77c2 <tc_init+0x26a>
					config->counter_8_bit.value;
    77c8:	3328      	adds	r3, #40	; 0x28
    77ca:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.COUNT.reg =
    77cc:	752b      	strb	r3, [r5, #20]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    77ce:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    77d0:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
    77d2:	2b00      	cmp	r3, #0
    77d4:	d1fc      	bne.n	77d0 <tc_init+0x278>
					config->counter_8_bit.period;
    77d6:	3329      	adds	r3, #41	; 0x29
    77d8:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.PER.reg =
    77da:	76eb      	strb	r3, [r5, #27]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    77dc:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    77de:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
    77e0:	2b00      	cmp	r3, #0
    77e2:	d1fc      	bne.n	77de <tc_init+0x286>
					config->counter_8_bit.compare_capture_channel[0];
    77e4:	332a      	adds	r3, #42	; 0x2a
    77e6:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.CC[0].reg =
    77e8:	772b      	strb	r3, [r5, #28]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    77ea:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    77ec:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
    77ee:	2b00      	cmp	r3, #0
    77f0:	d1fc      	bne.n	77ec <tc_init+0x294>
					config->counter_8_bit.compare_capture_channel[1];
    77f2:	332b      	adds	r3, #43	; 0x2b
    77f4:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.CC[1].reg =
    77f6:	776b      	strb	r3, [r5, #29]
			return STATUS_OK;
    77f8:	2000      	movs	r0, #0
    77fa:	e6e4      	b.n	75c6 <tc_init+0x6e>
    77fc:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
    77fe:	2b00      	cmp	r3, #0
    7800:	d1fc      	bne.n	77fc <tc_init+0x2a4>
				= config->counter_32_bit.value;
    7802:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    7804:	616b      	str	r3, [r5, #20]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    7806:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    7808:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
    780a:	2b00      	cmp	r3, #0
    780c:	d1fc      	bne.n	7808 <tc_init+0x2b0>
			hw->COUNT32.CC[0].reg =
    780e:	6af3      	ldr	r3, [r6, #44]	; 0x2c
    7810:	61eb      	str	r3, [r5, #28]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    7812:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    7814:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
    7816:	2b00      	cmp	r3, #0
    7818:	d1fc      	bne.n	7814 <tc_init+0x2bc>
					config->counter_32_bit.compare_capture_channel[1];
    781a:	6b33      	ldr	r3, [r6, #48]	; 0x30
			hw->COUNT32.CC[1].reg =
    781c:	622b      	str	r3, [r5, #32]
			return STATUS_OK;
    781e:	2000      	movs	r0, #0
    7820:	e6d1      	b.n	75c6 <tc_init+0x6e>
    7822:	46c0      	nop			; (mov r8, r8)
    7824:	0000751d 	.word	0x0000751d
    7828:	0001fc3c 	.word	0x0001fc3c
    782c:	20002250 	.word	0x20002250
    7830:	0001fc14 	.word	0x0001fc14
    7834:	000073d5 	.word	0x000073d5
    7838:	40000400 	.word	0x40000400
    783c:	000072a9 	.word	0x000072a9
    7840:	00007239 	.word	0x00007239
    7844:	0001fc28 	.word	0x0001fc28

00007848 <tc_get_count_value>:
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    7848:	6802      	ldr	r2, [r0, #0]
	return (tc_module->SYNCBUSY.reg);
    784a:	6913      	ldr	r3, [r2, #16]

	while (tc_is_syncing(module_inst)) {
    784c:	2b00      	cmp	r3, #0
    784e:	d1fc      	bne.n	784a <tc_get_count_value+0x2>
		/* Wait for sync */
	}

	/* Make certain that there are no conflicting commands in the register */
	tc_module->CTRLBCLR.reg = TC_CTRLBCLR_CMD_NONE;
    7850:	7113      	strb	r3, [r2, #4]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    7852:	6801      	ldr	r1, [r0, #0]
	return (tc_module->SYNCBUSY.reg);
    7854:	690b      	ldr	r3, [r1, #16]

	while (tc_is_syncing(module_inst)) {
    7856:	2b00      	cmp	r3, #0
    7858:	d1fc      	bne.n	7854 <tc_get_count_value+0xc>
		/* Wait for sync */
	}

	/* Write command to execute */
	tc_module->CTRLBSET.reg = TC_CTRLBSET_CMD(TC_CTRLBSET_CMD_READSYNC_Val);
    785a:	3380      	adds	r3, #128	; 0x80
    785c:	7153      	strb	r3, [r2, #5]

	/* Read synchronization */
	tc_sync_read_count(module_inst);
	
	/* Get a pointer to the module's hardware instance */
	Tc *const tc_module = module_inst->hw;
    785e:	6802      	ldr	r2, [r0, #0]
	return (tc_module->SYNCBUSY.reg);
    7860:	6913      	ldr	r3, [r2, #16]

	while (tc_is_syncing(module_inst)) {
    7862:	2b00      	cmp	r3, #0
    7864:	d1fc      	bne.n	7860 <tc_get_count_value+0x18>
		/* Wait for sync */
	}

	/* Read from based on the TC counter size */
	switch (module_inst->counter_size) {
    7866:	7903      	ldrb	r3, [r0, #4]
    7868:	2b04      	cmp	r3, #4
    786a:	d005      	beq.n	7878 <tc_get_count_value+0x30>
    786c:	2b08      	cmp	r3, #8
    786e:	d009      	beq.n	7884 <tc_get_count_value+0x3c>
		case TC_COUNTER_SIZE_32BIT:
			return tc_module->COUNT32.COUNT.reg;
	}

	Assert(false);
	return 0;
    7870:	2000      	movs	r0, #0
	switch (module_inst->counter_size) {
    7872:	2b00      	cmp	r3, #0
    7874:	d003      	beq.n	787e <tc_get_count_value+0x36>
}
    7876:	4770      	bx	lr
			return (uint32_t)tc_module->COUNT8.COUNT.reg;
    7878:	7d10      	ldrb	r0, [r2, #20]
    787a:	b2c0      	uxtb	r0, r0
    787c:	e7fb      	b.n	7876 <tc_get_count_value+0x2e>
			return (uint32_t)tc_module->COUNT16.COUNT.reg;
    787e:	8a90      	ldrh	r0, [r2, #20]
    7880:	b280      	uxth	r0, r0
    7882:	e7f8      	b.n	7876 <tc_get_count_value+0x2e>
			return tc_module->COUNT32.COUNT.reg;
    7884:	6950      	ldr	r0, [r2, #20]
    7886:	e7f6      	b.n	7876 <tc_get_count_value+0x2e>

00007888 <tc_set_compare_value>:
 */
enum status_code tc_set_compare_value(
		const struct tc_module *const module_inst,
		const enum tc_compare_capture_channel channel_index,
		const uint32_t compare)
{
    7888:	b510      	push	{r4, lr}
	Assert(module_inst);
	Assert(module_inst->hw);
	Assert(compare);

	/* Get a pointer to the module's hardware instance */
	Tc *const tc_module = module_inst->hw;
    788a:	6804      	ldr	r4, [r0, #0]
    788c:	6923      	ldr	r3, [r4, #16]

	while (tc_is_syncing(module_inst)) {
    788e:	2b00      	cmp	r3, #0
    7890:	d1fc      	bne.n	788c <tc_set_compare_value+0x4>
		/* Wait for sync */
	}

	/* Read out based on the TC counter size */
	switch (module_inst->counter_size) {
    7892:	7903      	ldrb	r3, [r0, #4]
    7894:	2b04      	cmp	r3, #4
    7896:	d006      	beq.n	78a6 <tc_set_compare_value+0x1e>
    7898:	2b08      	cmp	r3, #8
    789a:	d028      	beq.n	78ee <tc_set_compare_value+0x66>
    789c:	2b00      	cmp	r3, #0
    789e:	d013      	beq.n	78c8 <tc_set_compare_value+0x40>
				}
				return STATUS_OK;
			}
	}

	return STATUS_ERR_INVALID_ARG;
    78a0:	2317      	movs	r3, #23
}
    78a2:	0018      	movs	r0, r3
    78a4:	bd10      	pop	{r4, pc}
	return STATUS_ERR_INVALID_ARG;
    78a6:	2317      	movs	r3, #23
			if (channel_index <
    78a8:	2901      	cmp	r1, #1
    78aa:	d8fa      	bhi.n	78a2 <tc_set_compare_value+0x1a>
				if (module_inst->double_buffering_enabled){
    78ac:	7e83      	ldrb	r3, [r0, #26]
    78ae:	2b00      	cmp	r3, #0
    78b0:	d005      	beq.n	78be <tc_set_compare_value+0x36>
							(uint8_t)compare;
    78b2:	b2d2      	uxtb	r2, r2
					tc_module->COUNT8.CCBUF[channel_index].reg =
    78b4:	1861      	adds	r1, r4, r1
    78b6:	3130      	adds	r1, #48	; 0x30
    78b8:	700a      	strb	r2, [r1, #0]
				return STATUS_OK;
    78ba:	2300      	movs	r3, #0
    78bc:	e7f1      	b.n	78a2 <tc_set_compare_value+0x1a>
							(uint8_t)compare;
    78be:	b2d2      	uxtb	r2, r2
					tc_module->COUNT8.CC[channel_index].reg  =
    78c0:	1864      	adds	r4, r4, r1
    78c2:	7722      	strb	r2, [r4, #28]
				return STATUS_OK;
    78c4:	2300      	movs	r3, #0
    78c6:	e7ec      	b.n	78a2 <tc_set_compare_value+0x1a>
	return STATUS_ERR_INVALID_ARG;
    78c8:	2317      	movs	r3, #23
			if (channel_index <
    78ca:	2901      	cmp	r1, #1
    78cc:	d8e9      	bhi.n	78a2 <tc_set_compare_value+0x1a>
				if (module_inst->double_buffering_enabled){
    78ce:	7e83      	ldrb	r3, [r0, #26]
    78d0:	2b00      	cmp	r3, #0
    78d2:	d005      	beq.n	78e0 <tc_set_compare_value+0x58>
							(uint16_t)compare;
    78d4:	b292      	uxth	r2, r2
					tc_module->COUNT16.CCBUF[channel_index].reg =
    78d6:	3118      	adds	r1, #24
    78d8:	0049      	lsls	r1, r1, #1
    78da:	530a      	strh	r2, [r1, r4]
				return STATUS_OK;
    78dc:	2300      	movs	r3, #0
    78de:	e7e0      	b.n	78a2 <tc_set_compare_value+0x1a>
							(uint16_t)compare;
    78e0:	b292      	uxth	r2, r2
					tc_module->COUNT16.CC[channel_index].reg =
    78e2:	310c      	adds	r1, #12
    78e4:	0049      	lsls	r1, r1, #1
    78e6:	1864      	adds	r4, r4, r1
    78e8:	80a2      	strh	r2, [r4, #4]
				return STATUS_OK;
    78ea:	2300      	movs	r3, #0
    78ec:	e7d9      	b.n	78a2 <tc_set_compare_value+0x1a>
	return STATUS_ERR_INVALID_ARG;
    78ee:	2317      	movs	r3, #23
			if (channel_index <
    78f0:	2901      	cmp	r1, #1
    78f2:	d8d6      	bhi.n	78a2 <tc_set_compare_value+0x1a>
				if (module_inst->double_buffering_enabled){
    78f4:	7e83      	ldrb	r3, [r0, #26]
    78f6:	2b00      	cmp	r3, #0
    78f8:	d105      	bne.n	7906 <tc_set_compare_value+0x7e>
					tc_module->COUNT32.CC[channel_index].reg =
    78fa:	3106      	adds	r1, #6
    78fc:	0089      	lsls	r1, r1, #2
    78fe:	1864      	adds	r4, r4, r1
    7900:	6062      	str	r2, [r4, #4]
				return STATUS_OK;
    7902:	2300      	movs	r3, #0
    7904:	e7cd      	b.n	78a2 <tc_set_compare_value+0x1a>
					tc_module->COUNT32.CCBUF[channel_index].reg =
    7906:	310c      	adds	r1, #12
    7908:	0089      	lsls	r1, r1, #2
    790a:	510a      	str	r2, [r1, r4]
				return STATUS_OK;
    790c:	2300      	movs	r3, #0
    790e:	e7c8      	b.n	78a2 <tc_set_compare_value+0x1a>

00007910 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    7910:	e7fe      	b.n	7910 <Dummy_Handler>
	...

00007914 <Reset_Handler>:
{
    7914:	b510      	push	{r4, lr}
        if (pSrc != pDest) {
    7916:	4a1a      	ldr	r2, [pc, #104]	; (7980 <Reset_Handler+0x6c>)
    7918:	4b1a      	ldr	r3, [pc, #104]	; (7984 <Reset_Handler+0x70>)
    791a:	429a      	cmp	r2, r3
    791c:	d011      	beq.n	7942 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
    791e:	001a      	movs	r2, r3
    7920:	4b19      	ldr	r3, [pc, #100]	; (7988 <Reset_Handler+0x74>)
    7922:	429a      	cmp	r2, r3
    7924:	d20d      	bcs.n	7942 <Reset_Handler+0x2e>
    7926:	4a19      	ldr	r2, [pc, #100]	; (798c <Reset_Handler+0x78>)
    7928:	3303      	adds	r3, #3
    792a:	1a9b      	subs	r3, r3, r2
    792c:	089b      	lsrs	r3, r3, #2
    792e:	3301      	adds	r3, #1
    7930:	009b      	lsls	r3, r3, #2
    7932:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    7934:	4813      	ldr	r0, [pc, #76]	; (7984 <Reset_Handler+0x70>)
    7936:	4912      	ldr	r1, [pc, #72]	; (7980 <Reset_Handler+0x6c>)
    7938:	588c      	ldr	r4, [r1, r2]
    793a:	5084      	str	r4, [r0, r2]
    793c:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
    793e:	429a      	cmp	r2, r3
    7940:	d1fa      	bne.n	7938 <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
    7942:	4a13      	ldr	r2, [pc, #76]	; (7990 <Reset_Handler+0x7c>)
    7944:	4b13      	ldr	r3, [pc, #76]	; (7994 <Reset_Handler+0x80>)
    7946:	429a      	cmp	r2, r3
    7948:	d20a      	bcs.n	7960 <Reset_Handler+0x4c>
    794a:	43d3      	mvns	r3, r2
    794c:	4911      	ldr	r1, [pc, #68]	; (7994 <Reset_Handler+0x80>)
    794e:	185b      	adds	r3, r3, r1
    7950:	2103      	movs	r1, #3
    7952:	438b      	bics	r3, r1
    7954:	3304      	adds	r3, #4
    7956:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
    7958:	2100      	movs	r1, #0
    795a:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
    795c:	4293      	cmp	r3, r2
    795e:	d1fc      	bne.n	795a <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    7960:	4a0d      	ldr	r2, [pc, #52]	; (7998 <Reset_Handler+0x84>)
    7962:	21ff      	movs	r1, #255	; 0xff
    7964:	4b0d      	ldr	r3, [pc, #52]	; (799c <Reset_Handler+0x88>)
    7966:	438b      	bics	r3, r1
    7968:	6093      	str	r3, [r2, #8]
        NVMCTRL->CTRLB.bit.MANW = 1;
    796a:	4a0d      	ldr	r2, [pc, #52]	; (79a0 <Reset_Handler+0x8c>)
    796c:	6853      	ldr	r3, [r2, #4]
    796e:	397f      	subs	r1, #127	; 0x7f
    7970:	430b      	orrs	r3, r1
    7972:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    7974:	4b0b      	ldr	r3, [pc, #44]	; (79a4 <Reset_Handler+0x90>)
    7976:	4798      	blx	r3
        main();
    7978:	4b0b      	ldr	r3, [pc, #44]	; (79a8 <Reset_Handler+0x94>)
    797a:	4798      	blx	r3
    797c:	e7fe      	b.n	797c <Reset_Handler+0x68>
    797e:	46c0      	nop			; (mov r8, r8)
    7980:	000209a0 	.word	0x000209a0
    7984:	20000000 	.word	0x20000000
    7988:	200009c8 	.word	0x200009c8
    798c:	20000004 	.word	0x20000004
    7990:	200009c8 	.word	0x200009c8
    7994:	20002fe8 	.word	0x20002fe8
    7998:	e000ed00 	.word	0xe000ed00
    799c:	00000000 	.word	0x00000000
    79a0:	41004000 	.word	0x41004000
    79a4:	000196bd 	.word	0x000196bd
    79a8:	0000fa81 	.word	0x0000fa81

000079ac <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
    79ac:	b5f0      	push	{r4, r5, r6, r7, lr}
    79ae:	46c6      	mov	lr, r8
    79b0:	b500      	push	{lr}
    79b2:	000c      	movs	r4, r1
    79b4:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
    79b6:	2800      	cmp	r0, #0
    79b8:	d10f      	bne.n	79da <_read+0x2e>
		return -1;
	}

	for (; len > 0; --len) {
    79ba:	2a00      	cmp	r2, #0
    79bc:	dd11      	ble.n	79e2 <_read+0x36>
    79be:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
    79c0:	4e09      	ldr	r6, [pc, #36]	; (79e8 <_read+0x3c>)
    79c2:	4d0a      	ldr	r5, [pc, #40]	; (79ec <_read+0x40>)
    79c4:	6830      	ldr	r0, [r6, #0]
    79c6:	0021      	movs	r1, r4
    79c8:	682b      	ldr	r3, [r5, #0]
    79ca:	4798      	blx	r3
		ptr++;
    79cc:	3401      	adds	r4, #1
	for (; len > 0; --len) {
    79ce:	42bc      	cmp	r4, r7
    79d0:	d1f8      	bne.n	79c4 <_read+0x18>
		nChars++;
	}
	return nChars;
}
    79d2:	4640      	mov	r0, r8
    79d4:	bc04      	pop	{r2}
    79d6:	4690      	mov	r8, r2
    79d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -1;
    79da:	2301      	movs	r3, #1
    79dc:	425b      	negs	r3, r3
    79de:	4698      	mov	r8, r3
    79e0:	e7f7      	b.n	79d2 <_read+0x26>
	for (; len > 0; --len) {
    79e2:	4680      	mov	r8, r0
    79e4:	e7f5      	b.n	79d2 <_read+0x26>
    79e6:	46c0      	nop			; (mov r8, r8)
    79e8:	2000226c 	.word	0x2000226c
    79ec:	20002264 	.word	0x20002264

000079f0 <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
    79f0:	b5f0      	push	{r4, r5, r6, r7, lr}
    79f2:	46c6      	mov	lr, r8
    79f4:	b500      	push	{lr}
    79f6:	000e      	movs	r6, r1
    79f8:	0015      	movs	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
    79fa:	3801      	subs	r0, #1
    79fc:	2802      	cmp	r0, #2
    79fe:	d810      	bhi.n	7a22 <_write+0x32>
		return -1;
	}

	for (; len != 0; --len) {
    7a00:	2a00      	cmp	r2, #0
    7a02:	d011      	beq.n	7a28 <_write+0x38>
    7a04:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
    7a06:	4b0c      	ldr	r3, [pc, #48]	; (7a38 <_write+0x48>)
    7a08:	4698      	mov	r8, r3
    7a0a:	4f0c      	ldr	r7, [pc, #48]	; (7a3c <_write+0x4c>)
    7a0c:	4643      	mov	r3, r8
    7a0e:	6818      	ldr	r0, [r3, #0]
    7a10:	5d31      	ldrb	r1, [r6, r4]
    7a12:	683b      	ldr	r3, [r7, #0]
    7a14:	4798      	blx	r3
    7a16:	2800      	cmp	r0, #0
    7a18:	db08      	blt.n	7a2c <_write+0x3c>
			return -1;
		}
		++nChars;
    7a1a:	3401      	adds	r4, #1
	for (; len != 0; --len) {
    7a1c:	42a5      	cmp	r5, r4
    7a1e:	d1f5      	bne.n	7a0c <_write+0x1c>
    7a20:	e006      	b.n	7a30 <_write+0x40>
		return -1;
    7a22:	2401      	movs	r4, #1
    7a24:	4264      	negs	r4, r4
    7a26:	e003      	b.n	7a30 <_write+0x40>
	for (; len != 0; --len) {
    7a28:	0014      	movs	r4, r2
    7a2a:	e001      	b.n	7a30 <_write+0x40>
			return -1;
    7a2c:	2401      	movs	r4, #1
    7a2e:	4264      	negs	r4, r4
	}
	return nChars;
}
    7a30:	0020      	movs	r0, r4
    7a32:	bc04      	pop	{r2}
    7a34:	4690      	mov	r8, r2
    7a36:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7a38:	2000226c 	.word	0x2000226c
    7a3c:	20002268 	.word	0x20002268

00007a40 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    7a40:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    7a42:	4a06      	ldr	r2, [pc, #24]	; (7a5c <_sbrk+0x1c>)
    7a44:	6812      	ldr	r2, [r2, #0]
    7a46:	2a00      	cmp	r2, #0
    7a48:	d004      	beq.n	7a54 <_sbrk+0x14>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
    7a4a:	4a04      	ldr	r2, [pc, #16]	; (7a5c <_sbrk+0x1c>)
    7a4c:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    7a4e:	18c3      	adds	r3, r0, r3
    7a50:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
    7a52:	4770      	bx	lr
		heap = (unsigned char *)&_end;
    7a54:	4902      	ldr	r1, [pc, #8]	; (7a60 <_sbrk+0x20>)
    7a56:	4a01      	ldr	r2, [pc, #4]	; (7a5c <_sbrk+0x1c>)
    7a58:	6011      	str	r1, [r2, #0]
    7a5a:	e7f6      	b.n	7a4a <_sbrk+0xa>
    7a5c:	20000b9c 	.word	0x20000b9c
    7a60:	20004fe8 	.word	0x20004fe8

00007a64 <_close>:
}

extern int _close(int file)
{
	return -1;
}
    7a64:	2001      	movs	r0, #1
    7a66:	4240      	negs	r0, r0
    7a68:	4770      	bx	lr

00007a6a <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
    7a6a:	2380      	movs	r3, #128	; 0x80
    7a6c:	019b      	lsls	r3, r3, #6
    7a6e:	604b      	str	r3, [r1, #4]

	return 0;
}
    7a70:	2000      	movs	r0, #0
    7a72:	4770      	bx	lr

00007a74 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
    7a74:	2001      	movs	r0, #1
    7a76:	4770      	bx	lr

00007a78 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
    7a78:	2000      	movs	r0, #0
    7a7a:	4770      	bx	lr

00007a7c <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct usart_module *const module,
		uint8_t *c)
{
    7a7c:	b570      	push	{r4, r5, r6, lr}
    7a7e:	b082      	sub	sp, #8
    7a80:	0005      	movs	r5, r0
    7a82:	000e      	movs	r6, r1
	uint16_t temp = 0;
    7a84:	2200      	movs	r2, #0
    7a86:	466b      	mov	r3, sp
    7a88:	80da      	strh	r2, [r3, #6]

	while(STATUS_OK != usart_read_wait(module, &temp));
    7a8a:	4c06      	ldr	r4, [pc, #24]	; (7aa4 <usart_serial_getchar+0x28>)
    7a8c:	466b      	mov	r3, sp
    7a8e:	1d99      	adds	r1, r3, #6
    7a90:	0028      	movs	r0, r5
    7a92:	47a0      	blx	r4
    7a94:	2800      	cmp	r0, #0
    7a96:	d1f9      	bne.n	7a8c <usart_serial_getchar+0x10>

	*c = temp;
    7a98:	466b      	mov	r3, sp
    7a9a:	3306      	adds	r3, #6
    7a9c:	881b      	ldrh	r3, [r3, #0]
    7a9e:	7033      	strb	r3, [r6, #0]
}
    7aa0:	b002      	add	sp, #8
    7aa2:	bd70      	pop	{r4, r5, r6, pc}
    7aa4:	0000680f 	.word	0x0000680f

00007aa8 <usart_serial_putchar>:
{
    7aa8:	b570      	push	{r4, r5, r6, lr}
    7aaa:	0005      	movs	r5, r0
	while(STATUS_OK !=usart_write_wait(module, c));
    7aac:	b28c      	uxth	r4, r1
    7aae:	4e03      	ldr	r6, [pc, #12]	; (7abc <usart_serial_putchar+0x14>)
    7ab0:	0021      	movs	r1, r4
    7ab2:	0028      	movs	r0, r5
    7ab4:	47b0      	blx	r6
    7ab6:	2800      	cmp	r0, #0
    7ab8:	d1fa      	bne.n	7ab0 <usart_serial_putchar+0x8>
}
    7aba:	bd70      	pop	{r4, r5, r6, pc}
    7abc:	000067e9 	.word	0x000067e9

00007ac0 <USART_HOST_ISR_VECT>:
#if SAMD || SAMR21 || SAML21 || SAMR30 || SAMR34 || SAMR35 || WLR089
void USART_HOST_ISR_VECT(uint8_t instance)
#else
USART_HOST_ISR_VECT()
#endif
{
    7ac0:	b510      	push	{r4, lr}
    7ac2:	b082      	sub	sp, #8
static inline enum status_code usart_serial_read_packet(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
	return usart_read_buffer_wait(module, rx_data, length);
    7ac4:	466b      	mov	r3, sp
    7ac6:	1ddc      	adds	r4, r3, #7
    7ac8:	2201      	movs	r2, #1
    7aca:	0021      	movs	r1, r4
    7acc:	480f      	ldr	r0, [pc, #60]	; (7b0c <USART_HOST_ISR_VECT+0x4c>)
    7ace:	4b10      	ldr	r3, [pc, #64]	; (7b10 <USART_HOST_ISR_VECT+0x50>)
    7ad0:	4798      	blx	r3
  __ASM volatile ("cpsid i" : : : "memory");
    7ad2:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
    7ad4:	f3bf 8f5f 	dmb	sy
#else
    usart_serial_read_packet(USART_HOST, &temp, 1);
#endif

	/* Introducing critical section to avoid buffer corruption. */
	cpu_irq_disable();
    7ad8:	2200      	movs	r2, #0
    7ada:	4b0e      	ldr	r3, [pc, #56]	; (7b14 <USART_HOST_ISR_VECT+0x54>)
    7adc:	701a      	strb	r2, [r3, #0]

	/* The number of data in the receive buffer is incremented and the
	 * buffer is updated. */

	serial_rx_buf[serial_rx_buf_tail] = temp;
    7ade:	4b0e      	ldr	r3, [pc, #56]	; (7b18 <USART_HOST_ISR_VECT+0x58>)
    7ae0:	781b      	ldrb	r3, [r3, #0]
    7ae2:	7821      	ldrb	r1, [r4, #0]
    7ae4:	4a0d      	ldr	r2, [pc, #52]	; (7b1c <USART_HOST_ISR_VECT+0x5c>)
    7ae6:	54d1      	strb	r1, [r2, r3]

	if ((SERIAL_RX_BUF_SIZE_HOST - 1) == serial_rx_buf_tail) {
    7ae8:	2b7f      	cmp	r3, #127	; 0x7f
    7aea:	d00a      	beq.n	7b02 <USART_HOST_ISR_VECT+0x42>
		/* Reached the end of buffer, revert back to beginning of
		 * buffer. */
		serial_rx_buf_tail = 0x00;
	} else {
		serial_rx_buf_tail++;
    7aec:	3301      	adds	r3, #1
    7aee:	4a0a      	ldr	r2, [pc, #40]	; (7b18 <USART_HOST_ISR_VECT+0x58>)
    7af0:	7013      	strb	r3, [r2, #0]
	}

	cpu_irq_enable();
    7af2:	2201      	movs	r2, #1
    7af4:	4b07      	ldr	r3, [pc, #28]	; (7b14 <USART_HOST_ISR_VECT+0x54>)
    7af6:	701a      	strb	r2, [r3, #0]
    7af8:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    7afc:	b662      	cpsie	i
}
    7afe:	b002      	add	sp, #8
    7b00:	bd10      	pop	{r4, pc}
		serial_rx_buf_tail = 0x00;
    7b02:	2200      	movs	r2, #0
    7b04:	4b04      	ldr	r3, [pc, #16]	; (7b18 <USART_HOST_ISR_VECT+0x58>)
    7b06:	701a      	strb	r2, [r3, #0]
    7b08:	e7f3      	b.n	7af2 <USART_HOST_ISR_VECT+0x32>
    7b0a:	46c0      	nop			; (mov r8, r8)
    7b0c:	20000ba0 	.word	0x20000ba0
    7b10:	00006935 	.word	0x00006935
    7b14:	20000014 	.word	0x20000014
    7b18:	20000c55 	.word	0x20000c55
    7b1c:	20000bd4 	.word	0x20000bd4

00007b20 <sio2host_init>:
{
    7b20:	b5f0      	push	{r4, r5, r6, r7, lr}
    7b22:	b091      	sub	sp, #68	; 0x44
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    7b24:	2380      	movs	r3, #128	; 0x80
    7b26:	05db      	lsls	r3, r3, #23
    7b28:	9300      	str	r3, [sp, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    7b2a:	2300      	movs	r3, #0
    7b2c:	9301      	str	r3, [sp, #4]
	config->parity           = USART_PARITY_NONE;
    7b2e:	22ff      	movs	r2, #255	; 0xff
    7b30:	4669      	mov	r1, sp
    7b32:	810a      	strh	r2, [r1, #8]
	config->stopbits         = USART_STOPBITS_1;
    7b34:	2200      	movs	r2, #0
    7b36:	728b      	strb	r3, [r1, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    7b38:	72cb      	strb	r3, [r1, #11]
	config->baudrate         = 9600;
	config->receiver_enable  = true;
    7b3a:	2401      	movs	r4, #1
    7b3c:	2124      	movs	r1, #36	; 0x24
    7b3e:	4668      	mov	r0, sp
    7b40:	5444      	strb	r4, [r0, r1]
	config->transmitter_enable = true;
    7b42:	3101      	adds	r1, #1
    7b44:	5444      	strb	r4, [r0, r1]
	config->clock_polarity_inverted = false;
    7b46:	3101      	adds	r1, #1
    7b48:	5443      	strb	r3, [r0, r1]
	config->use_external_clock = false;
    7b4a:	3101      	adds	r1, #1
    7b4c:	5443      	strb	r3, [r0, r1]
	config->ext_clock_freq   = 0;
    7b4e:	930a      	str	r3, [sp, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
    7b50:	3105      	adds	r1, #5
    7b52:	5443      	strb	r3, [r0, r1]
	config->generator_source = GCLK_GENERATOR_0;
    7b54:	3101      	adds	r1, #1
    7b56:	5443      	strb	r3, [r0, r1]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->pinmux_pad2      = PINMUX_DEFAULT;
	config->pinmux_pad3      = PINMUX_DEFAULT;
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    7b58:	9305      	str	r3, [sp, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    7b5a:	8203      	strh	r3, [r0, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
    7b5c:	76c3      	strb	r3, [r0, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
    7b5e:	7602      	strb	r2, [r0, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
    7b60:	7702      	strb	r2, [r0, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
    7b62:	7642      	strb	r2, [r0, #25]
	config->receive_pulse_length                    = 19;
    7b64:	2313      	movs	r3, #19
    7b66:	7683      	strb	r3, [r0, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
    7b68:	7742      	strb	r2, [r0, #29]
	host_uart_config.mux_setting = HOST_SERCOM_MUX_SETTING;
    7b6a:	2380      	movs	r3, #128	; 0x80
    7b6c:	035b      	lsls	r3, r3, #13
    7b6e:	9303      	str	r3, [sp, #12]
	host_uart_config.pinmux_pad0 = HOST_SERCOM_PINMUX_PAD0;
    7b70:	4b2f      	ldr	r3, [pc, #188]	; (7c30 <sio2host_init+0x110>)
    7b72:	930c      	str	r3, [sp, #48]	; 0x30
	host_uart_config.pinmux_pad1 = HOST_SERCOM_PINMUX_PAD1;
    7b74:	4b2f      	ldr	r3, [pc, #188]	; (7c34 <sio2host_init+0x114>)
    7b76:	930d      	str	r3, [sp, #52]	; 0x34
	host_uart_config.pinmux_pad2 = HOST_SERCOM_PINMUX_PAD2;
    7b78:	2301      	movs	r3, #1
    7b7a:	425b      	negs	r3, r3
    7b7c:	930e      	str	r3, [sp, #56]	; 0x38
	host_uart_config.pinmux_pad3 = HOST_SERCOM_PINMUX_PAD3;
    7b7e:	930f      	str	r3, [sp, #60]	; 0x3c
	host_uart_config.baudrate    = USART_HOST_BAUDRATE;
    7b80:	23e1      	movs	r3, #225	; 0xe1
    7b82:	025b      	lsls	r3, r3, #9
    7b84:	9308      	str	r3, [sp, #32]
static inline void stdio_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
	stdio_base = (void *)module;
    7b86:	4d2c      	ldr	r5, [pc, #176]	; (7c38 <sio2host_init+0x118>)
    7b88:	4b2c      	ldr	r3, [pc, #176]	; (7c3c <sio2host_init+0x11c>)
    7b8a:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
    7b8c:	4a2c      	ldr	r2, [pc, #176]	; (7c40 <sio2host_init+0x120>)
    7b8e:	4b2d      	ldr	r3, [pc, #180]	; (7c44 <sio2host_init+0x124>)
    7b90:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
    7b92:	4a2d      	ldr	r2, [pc, #180]	; (7c48 <sio2host_init+0x128>)
    7b94:	4b2d      	ldr	r3, [pc, #180]	; (7c4c <sio2host_init+0x12c>)
    7b96:	601a      	str	r2, [r3, #0]
	if (usart_init(module, hw, config) == STATUS_OK) {
    7b98:	466a      	mov	r2, sp
    7b9a:	2184      	movs	r1, #132	; 0x84
    7b9c:	05c9      	lsls	r1, r1, #23
    7b9e:	0028      	movs	r0, r5
    7ba0:	4b2b      	ldr	r3, [pc, #172]	; (7c50 <sio2host_init+0x130>)
    7ba2:	4798      	blx	r3

	usart_serial_init(module, hw, config);
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
    7ba4:	4f2b      	ldr	r7, [pc, #172]	; (7c54 <sio2host_init+0x134>)
    7ba6:	683b      	ldr	r3, [r7, #0]
    7ba8:	6898      	ldr	r0, [r3, #8]
    7baa:	2100      	movs	r1, #0
    7bac:	4e2a      	ldr	r6, [pc, #168]	; (7c58 <sio2host_init+0x138>)
    7bae:	47b0      	blx	r6
	setbuf(stdin, NULL);
    7bb0:	683b      	ldr	r3, [r7, #0]
    7bb2:	6858      	ldr	r0, [r3, #4]
    7bb4:	2100      	movs	r1, #0
    7bb6:	47b0      	blx	r6
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    7bb8:	682e      	ldr	r6, [r5, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    7bba:	0030      	movs	r0, r6
    7bbc:	4b27      	ldr	r3, [pc, #156]	; (7c5c <sio2host_init+0x13c>)
    7bbe:	4798      	blx	r3
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    7bc0:	231f      	movs	r3, #31
    7bc2:	4018      	ands	r0, r3
    7bc4:	4084      	lsls	r4, r0
    7bc6:	4b26      	ldr	r3, [pc, #152]	; (7c60 <sio2host_init+0x140>)
    7bc8:	601c      	str	r4, [r3, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
    7bca:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    7bcc:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    7bce:	2b00      	cmp	r3, #0
    7bd0:	d1fc      	bne.n	7bcc <sio2host_init+0xac>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    7bd2:	6833      	ldr	r3, [r6, #0]
    7bd4:	2202      	movs	r2, #2
    7bd6:	4313      	orrs	r3, r2
    7bd8:	6033      	str	r3, [r6, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    7bda:	4b17      	ldr	r3, [pc, #92]	; (7c38 <sio2host_init+0x118>)
    7bdc:	681b      	ldr	r3, [r3, #0]
	return (usart_hw->SYNCBUSY.reg);
    7bde:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    7be0:	2a00      	cmp	r2, #0
    7be2:	d1fc      	bne.n	7bde <sio2host_init+0xbe>
			module->receiver_enabled = true;
			break;

		case USART_TRANSCEIVER_TX:
			/* Enable TX */
			usart_hw->CTRLB.reg |= SERCOM_USART_CTRLB_TXEN;
    7be4:	6859      	ldr	r1, [r3, #4]
    7be6:	2280      	movs	r2, #128	; 0x80
    7be8:	0252      	lsls	r2, r2, #9
    7bea:	430a      	orrs	r2, r1
    7bec:	605a      	str	r2, [r3, #4]
			module->transmitter_enabled = true;
    7bee:	2101      	movs	r1, #1
    7bf0:	4a11      	ldr	r2, [pc, #68]	; (7c38 <sio2host_init+0x118>)
    7bf2:	71d1      	strb	r1, [r2, #7]
	return (usart_hw->SYNCBUSY.reg);
    7bf4:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    7bf6:	2a00      	cmp	r2, #0
    7bf8:	d1fc      	bne.n	7bf4 <sio2host_init+0xd4>
	return (usart_hw->SYNCBUSY.reg);
    7bfa:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    7bfc:	2a00      	cmp	r2, #0
    7bfe:	d1fc      	bne.n	7bfa <sio2host_init+0xda>
			usart_hw->CTRLB.reg |= SERCOM_USART_CTRLB_RXEN;
    7c00:	6859      	ldr	r1, [r3, #4]
    7c02:	2280      	movs	r2, #128	; 0x80
    7c04:	0292      	lsls	r2, r2, #10
    7c06:	430a      	orrs	r2, r1
    7c08:	605a      	str	r2, [r3, #4]
			module->receiver_enabled = true;
    7c0a:	2101      	movs	r1, #1
    7c0c:	4a0a      	ldr	r2, [pc, #40]	; (7c38 <sio2host_init+0x118>)
    7c0e:	7191      	strb	r1, [r2, #6]
	return (usart_hw->SYNCBUSY.reg);
    7c10:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    7c12:	2a00      	cmp	r2, #0
    7c14:	d1fc      	bne.n	7c10 <sio2host_init+0xf0>
	USART_HOST_RX_ISR_ENABLE();
    7c16:	4913      	ldr	r1, [pc, #76]	; (7c64 <sio2host_init+0x144>)
    7c18:	2000      	movs	r0, #0
    7c1a:	4b13      	ldr	r3, [pc, #76]	; (7c68 <sio2host_init+0x148>)
    7c1c:	4798      	blx	r3
    7c1e:	2204      	movs	r2, #4
    7c20:	2384      	movs	r3, #132	; 0x84
    7c22:	05db      	lsls	r3, r3, #23
    7c24:	759a      	strb	r2, [r3, #22]
    7c26:	32fc      	adds	r2, #252	; 0xfc
    7c28:	4b0d      	ldr	r3, [pc, #52]	; (7c60 <sio2host_init+0x140>)
    7c2a:	601a      	str	r2, [r3, #0]
}
    7c2c:	b011      	add	sp, #68	; 0x44
    7c2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7c30:	00040003 	.word	0x00040003
    7c34:	00050003 	.word	0x00050003
    7c38:	20000ba0 	.word	0x20000ba0
    7c3c:	2000226c 	.word	0x2000226c
    7c40:	00007aa9 	.word	0x00007aa9
    7c44:	20002268 	.word	0x20002268
    7c48:	00007a7d 	.word	0x00007a7d
    7c4c:	20002264 	.word	0x20002264
    7c50:	00006485 	.word	0x00006485
    7c54:	20000018 	.word	0x20000018
    7c58:	0001a0a5 	.word	0x0001a0a5
    7c5c:	00006025 	.word	0x00006025
    7c60:	e000e100 	.word	0xe000e100
    7c64:	00007ac1 	.word	0x00007ac1
    7c68:	00005fe9 	.word	0x00005fe9

00007c6c <sio2host_deinit>:
{
    7c6c:	b570      	push	{r4, r5, r6, lr}
	SercomUsart *const usart_hw = &(module->hw->USART);
    7c6e:	4d15      	ldr	r5, [pc, #84]	; (7cc4 <sio2host_deinit+0x58>)
    7c70:	682c      	ldr	r4, [r5, #0]
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
    7c72:	0020      	movs	r0, r4
    7c74:	4b14      	ldr	r3, [pc, #80]	; (7cc8 <sio2host_deinit+0x5c>)
    7c76:	4798      	blx	r3
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    7c78:	231f      	movs	r3, #31
    7c7a:	4018      	ands	r0, r3
    7c7c:	3b1e      	subs	r3, #30
    7c7e:	4083      	lsls	r3, r0
    7c80:	2280      	movs	r2, #128	; 0x80
    7c82:	4912      	ldr	r1, [pc, #72]	; (7ccc <sio2host_deinit+0x60>)
    7c84:	508b      	str	r3, [r1, r2]
	SercomUsart *const usart_hw = &(module->hw->USART);
    7c86:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    7c88:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    7c8a:	2b00      	cmp	r3, #0
    7c8c:	d1fc      	bne.n	7c88 <sio2host_deinit+0x1c>
	usart_hw->CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
    7c8e:	6823      	ldr	r3, [r4, #0]
    7c90:	2202      	movs	r2, #2
    7c92:	4393      	bics	r3, r2
    7c94:	6023      	str	r3, [r4, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    7c96:	4b0b      	ldr	r3, [pc, #44]	; (7cc4 <sio2host_deinit+0x58>)
    7c98:	681b      	ldr	r3, [r3, #0]
	return (usart_hw->SYNCBUSY.reg);
    7c9a:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    7c9c:	2a00      	cmp	r2, #0
    7c9e:	d1fc      	bne.n	7c9a <sio2host_deinit+0x2e>
			module->receiver_enabled = false;
			break;

		case USART_TRANSCEIVER_TX:
			/* Disable TX */
			usart_hw->CTRLB.reg &= ~SERCOM_USART_CTRLB_TXEN;
    7ca0:	685a      	ldr	r2, [r3, #4]
    7ca2:	490b      	ldr	r1, [pc, #44]	; (7cd0 <sio2host_deinit+0x64>)
    7ca4:	400a      	ands	r2, r1
    7ca6:	605a      	str	r2, [r3, #4]
			module->transmitter_enabled = false;
    7ca8:	2100      	movs	r1, #0
    7caa:	4a06      	ldr	r2, [pc, #24]	; (7cc4 <sio2host_deinit+0x58>)
    7cac:	71d1      	strb	r1, [r2, #7]
	return (usart_hw->SYNCBUSY.reg);
    7cae:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    7cb0:	2a00      	cmp	r2, #0
    7cb2:	d1fc      	bne.n	7cae <sio2host_deinit+0x42>
			usart_hw->CTRLB.reg &= ~SERCOM_USART_CTRLB_RXEN;
    7cb4:	685a      	ldr	r2, [r3, #4]
    7cb6:	4907      	ldr	r1, [pc, #28]	; (7cd4 <sio2host_deinit+0x68>)
    7cb8:	400a      	ands	r2, r1
    7cba:	605a      	str	r2, [r3, #4]
			module->receiver_enabled = false;
    7cbc:	2200      	movs	r2, #0
    7cbe:	4b01      	ldr	r3, [pc, #4]	; (7cc4 <sio2host_deinit+0x58>)
    7cc0:	719a      	strb	r2, [r3, #6]
}
    7cc2:	bd70      	pop	{r4, r5, r6, pc}
    7cc4:	20000ba0 	.word	0x20000ba0
    7cc8:	00006025 	.word	0x00006025
    7ccc:	e000e100 	.word	0xe000e100
    7cd0:	fffeffff 	.word	0xfffeffff
    7cd4:	fffdffff 	.word	0xfffdffff

00007cd8 <sio2host_tx>:
{
    7cd8:	b5f0      	push	{r4, r5, r6, r7, lr}
    7cda:	b083      	sub	sp, #12
    7cdc:	0006      	movs	r6, r0
    7cde:	9101      	str	r1, [sp, #4]
	return usart_write_buffer_wait(module, tx_data, length);
    7ce0:	466b      	mov	r3, sp
    7ce2:	889d      	ldrh	r5, [r3, #4]
    7ce4:	4c05      	ldr	r4, [pc, #20]	; (7cfc <sio2host_tx+0x24>)
    7ce6:	4f06      	ldr	r7, [pc, #24]	; (7d00 <sio2host_tx+0x28>)
    7ce8:	002a      	movs	r2, r5
    7cea:	0031      	movs	r1, r6
    7cec:	0020      	movs	r0, r4
    7cee:	47b8      	blx	r7
	} while (status != STATUS_OK);
    7cf0:	2800      	cmp	r0, #0
    7cf2:	d1f9      	bne.n	7ce8 <sio2host_tx+0x10>
}
    7cf4:	9801      	ldr	r0, [sp, #4]
    7cf6:	b003      	add	sp, #12
    7cf8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7cfa:	46c0      	nop			; (mov r8, r8)
    7cfc:	20000ba0 	.word	0x20000ba0
    7d00:	00006879 	.word	0x00006879

00007d04 <sio2host_rx>:
{
    7d04:	b570      	push	{r4, r5, r6, lr}
    7d06:	0002      	movs	r2, r0
	if(serial_rx_buf_tail >= serial_rx_buf_head)
    7d08:	4b1f      	ldr	r3, [pc, #124]	; (7d88 <sio2host_rx+0x84>)
    7d0a:	781c      	ldrb	r4, [r3, #0]
    7d0c:	4b1f      	ldr	r3, [pc, #124]	; (7d8c <sio2host_rx+0x88>)
    7d0e:	781b      	ldrb	r3, [r3, #0]
    7d10:	429c      	cmp	r4, r3
    7d12:	d319      	bcc.n	7d48 <sio2host_rx+0x44>
		serial_rx_count = serial_rx_buf_tail - serial_rx_buf_head;
    7d14:	1ae3      	subs	r3, r4, r3
    7d16:	481e      	ldr	r0, [pc, #120]	; (7d90 <sio2host_rx+0x8c>)
    7d18:	7003      	strb	r3, [r0, #0]
	if (0 == serial_rx_count) {
    7d1a:	4b1d      	ldr	r3, [pc, #116]	; (7d90 <sio2host_rx+0x8c>)
    7d1c:	7818      	ldrb	r0, [r3, #0]
    7d1e:	2800      	cmp	r0, #0
    7d20:	d031      	beq.n	7d86 <sio2host_rx+0x82>
	if (SERIAL_RX_BUF_SIZE_HOST <= serial_rx_count) {
    7d22:	b243      	sxtb	r3, r0
    7d24:	2b00      	cmp	r3, #0
    7d26:	db15      	blt.n	7d54 <sio2host_rx+0x50>
    7d28:	1c03      	adds	r3, r0, #0
    7d2a:	4288      	cmp	r0, r1
    7d2c:	d900      	bls.n	7d30 <sio2host_rx+0x2c>
    7d2e:	1c0b      	adds	r3, r1, #0
    7d30:	b2d8      	uxtb	r0, r3
	while (max_length > 0) {
    7d32:	2800      	cmp	r0, #0
    7d34:	d027      	beq.n	7d86 <sio2host_rx+0x82>
    7d36:	4b15      	ldr	r3, [pc, #84]	; (7d8c <sio2host_rx+0x88>)
    7d38:	781b      	ldrb	r3, [r3, #0]
    7d3a:	1e44      	subs	r4, r0, #1
    7d3c:	b2e4      	uxtb	r4, r4
    7d3e:	3401      	adds	r4, #1
    7d40:	1914      	adds	r4, r2, r4
		*data = serial_rx_buf[serial_rx_buf_head];
    7d42:	4d14      	ldr	r5, [pc, #80]	; (7d94 <sio2host_rx+0x90>)
			serial_rx_buf_head = 0;
    7d44:	2600      	movs	r6, #0
    7d46:	e014      	b.n	7d72 <sio2host_rx+0x6e>
		serial_rx_count = serial_rx_buf_tail + (SERIAL_RX_BUF_SIZE_HOST - serial_rx_buf_head);
    7d48:	0020      	movs	r0, r4
    7d4a:	3880      	subs	r0, #128	; 0x80
    7d4c:	1ac3      	subs	r3, r0, r3
    7d4e:	4810      	ldr	r0, [pc, #64]	; (7d90 <sio2host_rx+0x8c>)
    7d50:	7003      	strb	r3, [r0, #0]
    7d52:	e7e2      	b.n	7d1a <sio2host_rx+0x16>
		serial_rx_buf_head = serial_rx_buf_tail;
    7d54:	4b0d      	ldr	r3, [pc, #52]	; (7d8c <sio2host_rx+0x88>)
    7d56:	701c      	strb	r4, [r3, #0]
		serial_rx_count = SERIAL_RX_BUF_SIZE_HOST;
    7d58:	2080      	movs	r0, #128	; 0x80
    7d5a:	4b0d      	ldr	r3, [pc, #52]	; (7d90 <sio2host_rx+0x8c>)
    7d5c:	7018      	strb	r0, [r3, #0]
		if (SERIAL_RX_BUF_SIZE_HOST <= max_length) {
    7d5e:	b24b      	sxtb	r3, r1
    7d60:	2b00      	cmp	r3, #0
    7d62:	db01      	blt.n	7d68 <sio2host_rx+0x64>
    7d64:	0008      	movs	r0, r1
    7d66:	e7e4      	b.n	7d32 <sio2host_rx+0x2e>
			max_length = SERIAL_RX_BUF_SIZE_HOST;
    7d68:	2080      	movs	r0, #128	; 0x80
    7d6a:	e7e4      	b.n	7d36 <sio2host_rx+0x32>
			serial_rx_buf_head = 0;
    7d6c:	0033      	movs	r3, r6
	while (max_length > 0) {
    7d6e:	4294      	cmp	r4, r2
    7d70:	d007      	beq.n	7d82 <sio2host_rx+0x7e>
		*data = serial_rx_buf[serial_rx_buf_head];
    7d72:	5ce9      	ldrb	r1, [r5, r3]
    7d74:	7011      	strb	r1, [r2, #0]
		data++;
    7d76:	3201      	adds	r2, #1
		if ((SERIAL_RX_BUF_SIZE_HOST - 1) == serial_rx_buf_head) {
    7d78:	2b7f      	cmp	r3, #127	; 0x7f
    7d7a:	d0f7      	beq.n	7d6c <sio2host_rx+0x68>
			serial_rx_buf_head++;
    7d7c:	3301      	adds	r3, #1
    7d7e:	b2db      	uxtb	r3, r3
    7d80:	e7f5      	b.n	7d6e <sio2host_rx+0x6a>
    7d82:	4a02      	ldr	r2, [pc, #8]	; (7d8c <sio2host_rx+0x88>)
    7d84:	7013      	strb	r3, [r2, #0]
}
    7d86:	bd70      	pop	{r4, r5, r6, pc}
    7d88:	20000c55 	.word	0x20000c55
    7d8c:	20000c54 	.word	0x20000c54
    7d90:	20000c56 	.word	0x20000c56
    7d94:	20000bd4 	.word	0x20000bd4

00007d98 <sio2host_getchar_nowait>:
{
    7d98:	b500      	push	{lr}
    7d9a:	b083      	sub	sp, #12
	int back = sio2host_rx(&c, 1);
    7d9c:	2101      	movs	r1, #1
    7d9e:	466b      	mov	r3, sp
    7da0:	1dd8      	adds	r0, r3, #7
    7da2:	4b05      	ldr	r3, [pc, #20]	; (7db8 <sio2host_getchar_nowait+0x20>)
    7da4:	4798      	blx	r3
	if (back >= 1) {
    7da6:	2800      	cmp	r0, #0
    7da8:	dd03      	ble.n	7db2 <sio2host_getchar_nowait+0x1a>
		return c;
    7daa:	466b      	mov	r3, sp
    7dac:	79d8      	ldrb	r0, [r3, #7]
}
    7dae:	b003      	add	sp, #12
    7db0:	bd00      	pop	{pc}
		return (-1);
    7db2:	2001      	movs	r0, #1
    7db4:	4240      	negs	r0, r0
    7db6:	e7fa      	b.n	7dae <sio2host_getchar_nowait+0x16>
    7db8:	00007d05 	.word	0x00007d05

00007dbc <HAL_SPISend>:
	SercomSpi *const spi_module = &(module->hw->SPI);
    7dbc:	4b13      	ldr	r3, [pc, #76]	; (7e0c <HAL_SPISend+0x50>)
    7dbe:	681b      	ldr	r3, [r3, #0]
static uint8_t HAL_SPISend(uint8_t data)
{
	uint16_t read_val = 0;
	
	/* Write the byte in the transceiver data register */
	while (!spi_is_ready_to_write(&master));
    7dc0:	2101      	movs	r1, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    7dc2:	7e1a      	ldrb	r2, [r3, #24]
    7dc4:	420a      	tst	r2, r1
    7dc6:	d0fc      	beq.n	7dc2 <HAL_SPISend+0x6>
    7dc8:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    7dca:	07d2      	lsls	r2, r2, #31
    7dcc:	d500      	bpl.n	7dd0 <HAL_SPISend+0x14>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    7dce:	6298      	str	r0, [r3, #40]	; 0x28
	spi_write(&master, data);
	while (!spi_is_write_complete(&master));
    7dd0:	2102      	movs	r1, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    7dd2:	7e1a      	ldrb	r2, [r3, #24]
    7dd4:	420a      	tst	r2, r1
    7dd6:	d0fc      	beq.n	7dd2 <HAL_SPISend+0x16>
	
	while (!spi_is_ready_to_read(&master));
    7dd8:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    7dda:	7e1a      	ldrb	r2, [r3, #24]
    7ddc:	420a      	tst	r2, r1
    7dde:	d0fc      	beq.n	7dda <HAL_SPISend+0x1e>
    7de0:	7e1a      	ldrb	r2, [r3, #24]
	uint16_t read_val = 0;
    7de2:	2000      	movs	r0, #0
	if (!spi_is_ready_to_read(module)) {
    7de4:	0752      	lsls	r2, r2, #29
    7de6:	d50a      	bpl.n	7dfe <HAL_SPISend+0x42>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    7de8:	8b5a      	ldrh	r2, [r3, #26]
    7dea:	0752      	lsls	r2, r2, #29
    7dec:	d501      	bpl.n	7df2 <HAL_SPISend+0x36>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    7dee:	2204      	movs	r2, #4
    7df0:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    7df2:	4a06      	ldr	r2, [pc, #24]	; (7e0c <HAL_SPISend+0x50>)
    7df4:	7992      	ldrb	r2, [r2, #6]
    7df6:	2a01      	cmp	r2, #1
    7df8:	d003      	beq.n	7e02 <HAL_SPISend+0x46>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    7dfa:	6a98      	ldr	r0, [r3, #40]	; 0x28
    7dfc:	b2c0      	uxtb	r0, r0
	spi_read(&master, &read_val);
	
	return ((uint8_t)read_val);
    7dfe:	b2c0      	uxtb	r0, r0
}
    7e00:	4770      	bx	lr
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    7e02:	6a98      	ldr	r0, [r3, #40]	; 0x28
    7e04:	05c0      	lsls	r0, r0, #23
    7e06:	0dc0      	lsrs	r0, r0, #23
    7e08:	e7f9      	b.n	7dfe <HAL_SPISend+0x42>
    7e0a:	46c0      	nop			; (mov r8, r8)
    7e0c:	20000c64 	.word	0x20000c64

00007e10 <HAL_ResetPinMakeOutput>:
{
    7e10:	b500      	push	{lr}
    7e12:	b083      	sub	sp, #12
	config->input_pull = PORT_PIN_PULL_UP;
    7e14:	a901      	add	r1, sp, #4
    7e16:	2301      	movs	r3, #1
    7e18:	704b      	strb	r3, [r1, #1]
	config->powersave  = false;
    7e1a:	2200      	movs	r2, #0
    7e1c:	708a      	strb	r2, [r1, #2]
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
    7e1e:	700b      	strb	r3, [r1, #0]
	port_pin_set_config(SX_RF_RESET_PIN,&pin_conf);
    7e20:	202f      	movs	r0, #47	; 0x2f
    7e22:	4b02      	ldr	r3, [pc, #8]	; (7e2c <HAL_ResetPinMakeOutput+0x1c>)
    7e24:	4798      	blx	r3
}
    7e26:	b003      	add	sp, #12
    7e28:	bd00      	pop	{pc}
    7e2a:	46c0      	nop			; (mov r8, r8)
    7e2c:	00004f19 	.word	0x00004f19

00007e30 <HAL_RadioDIO2Callback>:
{
    7e30:	b510      	push	{r4, lr}
  if (interruptHandlerDio2)
    7e32:	4b05      	ldr	r3, [pc, #20]	; (7e48 <HAL_RadioDIO2Callback+0x18>)
    7e34:	681b      	ldr	r3, [r3, #0]
    7e36:	2b00      	cmp	r3, #0
    7e38:	d004      	beq.n	7e44 <HAL_RadioDIO2Callback+0x14>
	PMM_Wakeup();
    7e3a:	4b04      	ldr	r3, [pc, #16]	; (7e4c <HAL_RadioDIO2Callback+0x1c>)
    7e3c:	4798      	blx	r3
    interruptHandlerDio2();
    7e3e:	4b02      	ldr	r3, [pc, #8]	; (7e48 <HAL_RadioDIO2Callback+0x18>)
    7e40:	681b      	ldr	r3, [r3, #0]
    7e42:	4798      	blx	r3
}
    7e44:	bd10      	pop	{r4, pc}
    7e46:	46c0      	nop			; (mov r8, r8)
    7e48:	20000c60 	.word	0x20000c60
    7e4c:	000083cd 	.word	0x000083cd

00007e50 <HAL_RadioDIO1Callback>:
{
    7e50:	b510      	push	{r4, lr}
  if (interruptHandlerDio1)
    7e52:	4b05      	ldr	r3, [pc, #20]	; (7e68 <HAL_RadioDIO1Callback+0x18>)
    7e54:	681b      	ldr	r3, [r3, #0]
    7e56:	2b00      	cmp	r3, #0
    7e58:	d004      	beq.n	7e64 <HAL_RadioDIO1Callback+0x14>
	PMM_Wakeup();
    7e5a:	4b04      	ldr	r3, [pc, #16]	; (7e6c <HAL_RadioDIO1Callback+0x1c>)
    7e5c:	4798      	blx	r3
    interruptHandlerDio1();
    7e5e:	4b02      	ldr	r3, [pc, #8]	; (7e68 <HAL_RadioDIO1Callback+0x18>)
    7e60:	681b      	ldr	r3, [r3, #0]
    7e62:	4798      	blx	r3
}
    7e64:	bd10      	pop	{r4, pc}
    7e66:	46c0      	nop			; (mov r8, r8)
    7e68:	20000c5c 	.word	0x20000c5c
    7e6c:	000083cd 	.word	0x000083cd

00007e70 <HAL_RadioDIO0Callback>:
{
    7e70:	b510      	push	{r4, lr}
  if (interruptHandlerDio0)
    7e72:	4b05      	ldr	r3, [pc, #20]	; (7e88 <HAL_RadioDIO0Callback+0x18>)
    7e74:	681b      	ldr	r3, [r3, #0]
    7e76:	2b00      	cmp	r3, #0
    7e78:	d004      	beq.n	7e84 <HAL_RadioDIO0Callback+0x14>
	PMM_Wakeup();
    7e7a:	4b04      	ldr	r3, [pc, #16]	; (7e8c <HAL_RadioDIO0Callback+0x1c>)
    7e7c:	4798      	blx	r3
    interruptHandlerDio0();
    7e7e:	4b02      	ldr	r3, [pc, #8]	; (7e88 <HAL_RadioDIO0Callback+0x18>)
    7e80:	681b      	ldr	r3, [r3, #0]
    7e82:	4798      	blx	r3
}
    7e84:	bd10      	pop	{r4, pc}
    7e86:	46c0      	nop			; (mov r8, r8)
    7e88:	20000c58 	.word	0x20000c58
    7e8c:	000083cd 	.word	0x000083cd

00007e90 <HAL_SPICSAssert>:
{
    7e90:	b510      	push	{r4, lr}
	spi_select_slave(&master, &slave, true);
    7e92:	2201      	movs	r2, #1
    7e94:	4902      	ldr	r1, [pc, #8]	; (7ea0 <HAL_SPICSAssert+0x10>)
    7e96:	4803      	ldr	r0, [pc, #12]	; (7ea4 <HAL_SPICSAssert+0x14>)
    7e98:	4b03      	ldr	r3, [pc, #12]	; (7ea8 <HAL_SPICSAssert+0x18>)
    7e9a:	4798      	blx	r3
}
    7e9c:	bd10      	pop	{r4, pc}
    7e9e:	46c0      	nop			; (mov r8, r8)
    7ea0:	20002270 	.word	0x20002270
    7ea4:	20000c64 	.word	0x20000c64
    7ea8:	00006391 	.word	0x00006391

00007eac <HAL_SPICSDeassert>:
{
    7eac:	b510      	push	{r4, lr}
	spi_select_slave(&master, &slave, false);
    7eae:	2200      	movs	r2, #0
    7eb0:	4902      	ldr	r1, [pc, #8]	; (7ebc <HAL_SPICSDeassert+0x10>)
    7eb2:	4803      	ldr	r0, [pc, #12]	; (7ec0 <HAL_SPICSDeassert+0x14>)
    7eb4:	4b03      	ldr	r3, [pc, #12]	; (7ec4 <HAL_SPICSDeassert+0x18>)
    7eb6:	4798      	blx	r3
}
    7eb8:	bd10      	pop	{r4, pc}
    7eba:	46c0      	nop			; (mov r8, r8)
    7ebc:	20002270 	.word	0x20002270
    7ec0:	20000c64 	.word	0x20000c64
    7ec4:	00006391 	.word	0x00006391

00007ec8 <HAL_RadioInit>:
{
    7ec8:	b5f0      	push	{r4, r5, r6, r7, lr}
    7eca:	46d6      	mov	lr, sl
    7ecc:	464f      	mov	r7, r9
    7ece:	4646      	mov	r6, r8
    7ed0:	b5c0      	push	{r6, r7, lr}
    7ed2:	b090      	sub	sp, #64	; 0x40
	config->input_pull = PORT_PIN_PULL_UP;
    7ed4:	ac01      	add	r4, sp, #4
    7ed6:	2601      	movs	r6, #1
    7ed8:	7066      	strb	r6, [r4, #1]
	config->powersave  = false;
    7eda:	2500      	movs	r5, #0
    7edc:	70a5      	strb	r5, [r4, #2]
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    7ede:	7026      	strb	r6, [r4, #0]
	port_pin_set_config(SX_RF_SPI_SCK, &pin_conf);
    7ee0:	0021      	movs	r1, r4
    7ee2:	2052      	movs	r0, #82	; 0x52
    7ee4:	4f52      	ldr	r7, [pc, #328]	; (8030 <HAL_RadioInit+0x168>)
    7ee6:	47b8      	blx	r7
	port_pin_set_config(SX_RF_SPI_MOSI, &pin_conf);
    7ee8:	0021      	movs	r1, r4
    7eea:	203e      	movs	r0, #62	; 0x3e
    7eec:	47b8      	blx	r7
	port_pin_set_config(SX_RF_SPI_CS, &pin_conf);
    7eee:	0021      	movs	r1, r4
    7ef0:	203f      	movs	r0, #63	; 0x3f
    7ef2:	47b8      	blx	r7
	port_pin_set_config(SX_RF_RESET_PIN, &pin_conf);
    7ef4:	0021      	movs	r1, r4
    7ef6:	202f      	movs	r0, #47	; 0x2f
    7ef8:	47b8      	blx	r7
		port_base->OUTSET.reg = pin_mask;
    7efa:	2280      	movs	r2, #128	; 0x80
    7efc:	02d2      	lsls	r2, r2, #11
    7efe:	4b4d      	ldr	r3, [pc, #308]	; (8034 <HAL_RadioInit+0x16c>)
    7f00:	619a      	str	r2, [r3, #24]
    7f02:	4b4d      	ldr	r3, [pc, #308]	; (8038 <HAL_RadioInit+0x170>)
    7f04:	2280      	movs	r2, #128	; 0x80
    7f06:	05d2      	lsls	r2, r2, #23
    7f08:	619a      	str	r2, [r3, #24]
    7f0a:	2280      	movs	r2, #128	; 0x80
    7f0c:	0612      	lsls	r2, r2, #24
    7f0e:	619a      	str	r2, [r3, #24]
    7f10:	2280      	movs	r2, #128	; 0x80
    7f12:	0212      	lsls	r2, r2, #8
    7f14:	619a      	str	r2, [r3, #24]
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
    7f16:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(SX_RF_SPI_MISO, &pin_conf);
    7f18:	0021      	movs	r1, r4
    7f1a:	2053      	movs	r0, #83	; 0x53
    7f1c:	47b8      	blx	r7
	extint_chan_get_config_defaults(&config_extint_chan);
    7f1e:	ac02      	add	r4, sp, #8
    7f20:	0020      	movs	r0, r4
    7f22:	4b46      	ldr	r3, [pc, #280]	; (803c <HAL_RadioInit+0x174>)
    7f24:	4798      	blx	r3
	config_extint_chan.gpio_pin           = DIO0_EIC_PIN;
    7f26:	2330      	movs	r3, #48	; 0x30
    7f28:	9302      	str	r3, [sp, #8]
	config_extint_chan.gpio_pin_mux       = DIO0_EIC_MUX;
    7f2a:	6065      	str	r5, [r4, #4]
	config_extint_chan.gpio_pin_pull      = EXTINT_PULL_NONE;
    7f2c:	7225      	strb	r5, [r4, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_RISING;
    7f2e:	72e6      	strb	r6, [r4, #11]
	extint_chan_set_config(DIO0_EIC_LINE, &config_extint_chan);
    7f30:	0021      	movs	r1, r4
    7f32:	2000      	movs	r0, #0
    7f34:	4b42      	ldr	r3, [pc, #264]	; (8040 <HAL_RadioInit+0x178>)
    7f36:	469a      	mov	sl, r3
    7f38:	4798      	blx	r3
	extint_register_callback(HAL_RadioDIO0Callback,DIO0_EIC_LINE,EXTINT_CALLBACK_TYPE_DETECT);
    7f3a:	2200      	movs	r2, #0
    7f3c:	2100      	movs	r1, #0
    7f3e:	4841      	ldr	r0, [pc, #260]	; (8044 <HAL_RadioInit+0x17c>)
    7f40:	4b41      	ldr	r3, [pc, #260]	; (8048 <HAL_RadioInit+0x180>)
    7f42:	4699      	mov	r9, r3
    7f44:	4798      	blx	r3
	extint_chan_enable_callback(DIO0_EIC_LINE,EXTINT_CALLBACK_TYPE_DETECT);
    7f46:	2100      	movs	r1, #0
    7f48:	2000      	movs	r0, #0
    7f4a:	4b40      	ldr	r3, [pc, #256]	; (804c <HAL_RadioInit+0x184>)
    7f4c:	4698      	mov	r8, r3
    7f4e:	4798      	blx	r3
	config_extint_chan.gpio_pin           = DIO1_EIC_PIN;
    7f50:	230b      	movs	r3, #11
    7f52:	9302      	str	r3, [sp, #8]
	config_extint_chan.gpio_pin_mux       = DIO1_EIC_MUX;
    7f54:	6065      	str	r5, [r4, #4]
	config_extint_chan.gpio_pin_pull      = EXTINT_PULL_NONE;
    7f56:	7225      	strb	r5, [r4, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_RISING;
    7f58:	72e6      	strb	r6, [r4, #11]
	extint_chan_set_config(DIO1_EIC_LINE, &config_extint_chan);
    7f5a:	0021      	movs	r1, r4
    7f5c:	200b      	movs	r0, #11
    7f5e:	47d0      	blx	sl
	extint_register_callback(HAL_RadioDIO1Callback,DIO1_EIC_LINE,EXTINT_CALLBACK_TYPE_DETECT);
    7f60:	2200      	movs	r2, #0
    7f62:	210b      	movs	r1, #11
    7f64:	483a      	ldr	r0, [pc, #232]	; (8050 <HAL_RadioInit+0x188>)
    7f66:	47c8      	blx	r9
	extint_chan_enable_callback(DIO1_EIC_LINE,EXTINT_CALLBACK_TYPE_DETECT);
    7f68:	2100      	movs	r1, #0
    7f6a:	200b      	movs	r0, #11
    7f6c:	47c0      	blx	r8
	config_extint_chan.gpio_pin           = DIO2_EIC_PIN;
    7f6e:	230c      	movs	r3, #12
    7f70:	9302      	str	r3, [sp, #8]
	config_extint_chan.gpio_pin_mux       = DIO2_EIC_MUX;
    7f72:	6065      	str	r5, [r4, #4]
	config_extint_chan.gpio_pin_pull      = EXTINT_PULL_NONE;
    7f74:	7225      	strb	r5, [r4, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_RISING;
    7f76:	72e6      	strb	r6, [r4, #11]
	extint_chan_set_config(DIO2_EIC_LINE, &config_extint_chan);
    7f78:	0021      	movs	r1, r4
    7f7a:	200c      	movs	r0, #12
    7f7c:	47d0      	blx	sl
	extint_register_callback(HAL_RadioDIO2Callback,DIO2_EIC_LINE,EXTINT_CALLBACK_TYPE_DETECT);
    7f7e:	2200      	movs	r2, #0
    7f80:	210c      	movs	r1, #12
    7f82:	4834      	ldr	r0, [pc, #208]	; (8054 <HAL_RadioInit+0x18c>)
    7f84:	47c8      	blx	r9
	extint_chan_enable_callback(DIO2_EIC_LINE,EXTINT_CALLBACK_TYPE_DETECT);
    7f86:	2100      	movs	r1, #0
    7f88:	200c      	movs	r0, #12
    7f8a:	47c0      	blx	r8
	slave->ss_pin          = config->ss_pin;
    7f8c:	4b32      	ldr	r3, [pc, #200]	; (8058 <HAL_RadioInit+0x190>)
    7f8e:	4698      	mov	r8, r3
    7f90:	233f      	movs	r3, #63	; 0x3f
    7f92:	4642      	mov	r2, r8
    7f94:	7013      	strb	r3, [r2, #0]
	slave->address_enabled = config->address_enabled;
    7f96:	7055      	strb	r5, [r2, #1]
	slave->address         = config->address;
    7f98:	7095      	strb	r5, [r2, #2]
	config->input_pull = PORT_PIN_PULL_UP;
    7f9a:	7066      	strb	r6, [r4, #1]
	config->powersave  = false;
    7f9c:	70a5      	strb	r5, [r4, #2]
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
    7f9e:	7026      	strb	r6, [r4, #0]
	port_pin_set_config(slave->ss_pin, &pin_conf);
    7fa0:	0021      	movs	r1, r4
    7fa2:	203f      	movs	r0, #63	; 0x3f
    7fa4:	47b8      	blx	r7
	port_pin_set_output_level(slave->ss_pin, true);
    7fa6:	4643      	mov	r3, r8
    7fa8:	781a      	ldrb	r2, [r3, #0]
	if (port_index < PORT_INST_NUM) {
    7faa:	09d1      	lsrs	r1, r2, #7
		return NULL;
    7fac:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    7fae:	2900      	cmp	r1, #0
    7fb0:	d104      	bne.n	7fbc <HAL_RadioInit+0xf4>
		return &(ports[port_index]->Group[group_index]);
    7fb2:	0953      	lsrs	r3, r2, #5
    7fb4:	01db      	lsls	r3, r3, #7
    7fb6:	4929      	ldr	r1, [pc, #164]	; (805c <HAL_RadioInit+0x194>)
    7fb8:	468c      	mov	ip, r1
    7fba:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    7fbc:	211f      	movs	r1, #31
    7fbe:	4011      	ands	r1, r2
    7fc0:	2201      	movs	r2, #1
    7fc2:	0010      	movs	r0, r2
    7fc4:	4088      	lsls	r0, r1
		port_base->OUTSET.reg = pin_mask;
    7fc6:	6198      	str	r0, [r3, #24]
	config->mode             = SPI_MODE_MASTER;
    7fc8:	ac02      	add	r4, sp, #8
    7fca:	7022      	strb	r2, [r4, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
    7fcc:	2300      	movs	r3, #0
    7fce:	9303      	str	r3, [sp, #12]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
    7fd0:	9304      	str	r3, [sp, #16]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
    7fd2:	7423      	strb	r3, [r4, #16]
	config->run_in_standby   = false;
    7fd4:	7463      	strb	r3, [r4, #17]
	config->receiver_enable  = true;
    7fd6:	74a2      	strb	r2, [r4, #18]
	config->select_slave_low_detect_enable= true;
    7fd8:	74e2      	strb	r2, [r4, #19]
	config->master_slave_select_enable= false;
    7fda:	7523      	strb	r3, [r4, #20]
	config->generator_source = GCLK_GENERATOR_0;
    7fdc:	3223      	adds	r2, #35	; 0x23
    7fde:	54a3      	strb	r3, [r4, r2]
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
    7fe0:	3a18      	subs	r2, #24
    7fe2:	2100      	movs	r1, #0
    7fe4:	a808      	add	r0, sp, #32
    7fe6:	4b1e      	ldr	r3, [pc, #120]	; (8060 <HAL_RadioInit+0x198>)
    7fe8:	4798      	blx	r3
	config_spi_master.mode_specific.master.baudrate = SX_RF_SPI_BAUDRATE;
    7fea:	4b1e      	ldr	r3, [pc, #120]	; (8064 <HAL_RadioInit+0x19c>)
    7fec:	61a3      	str	r3, [r4, #24]
	config_spi_master.mux_setting = SX_RF_SPI_SERCOM_MUX_SETTING;
    7fee:	2380      	movs	r3, #128	; 0x80
    7ff0:	025b      	lsls	r3, r3, #9
    7ff2:	60e3      	str	r3, [r4, #12]
	config_spi_master.pinmux_pad0 = SX_RF_SPI_SERCOM_PINMUX_PAD0;
    7ff4:	4b1c      	ldr	r3, [pc, #112]	; (8068 <HAL_RadioInit+0x1a0>)
    7ff6:	62a3      	str	r3, [r4, #40]	; 0x28
	config_spi_master.pinmux_pad1 = PINMUX_UNUSED;
    7ff8:	2301      	movs	r3, #1
    7ffa:	425b      	negs	r3, r3
    7ffc:	62e3      	str	r3, [r4, #44]	; 0x2c
	config_spi_master.pinmux_pad2 = SX_RF_SPI_SERCOM_PINMUX_PAD2;
    7ffe:	4b1b      	ldr	r3, [pc, #108]	; (806c <HAL_RadioInit+0x1a4>)
    8000:	6323      	str	r3, [r4, #48]	; 0x30
	config_spi_master.pinmux_pad3 = SX_RF_SPI_SERCOM_PINMUX_PAD3;
    8002:	4b1b      	ldr	r3, [pc, #108]	; (8070 <HAL_RadioInit+0x1a8>)
    8004:	6363      	str	r3, [r4, #52]	; 0x34
	spi_init(&master, SX_RF_SPI, &config_spi_master);	
    8006:	4d1b      	ldr	r5, [pc, #108]	; (8074 <HAL_RadioInit+0x1ac>)
    8008:	0022      	movs	r2, r4
    800a:	491b      	ldr	r1, [pc, #108]	; (8078 <HAL_RadioInit+0x1b0>)
    800c:	0028      	movs	r0, r5
    800e:	4b1b      	ldr	r3, [pc, #108]	; (807c <HAL_RadioInit+0x1b4>)
    8010:	4798      	blx	r3
	SercomSpi *const spi_module = &(module->hw->SPI);
    8012:	682a      	ldr	r2, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
    8014:	69d3      	ldr	r3, [r2, #28]
	while (spi_is_syncing(module)) {
    8016:	2b00      	cmp	r3, #0
    8018:	d1fc      	bne.n	8014 <HAL_RadioInit+0x14c>
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    801a:	6813      	ldr	r3, [r2, #0]
    801c:	2102      	movs	r1, #2
    801e:	430b      	orrs	r3, r1
    8020:	6013      	str	r3, [r2, #0]
}
    8022:	b010      	add	sp, #64	; 0x40
    8024:	bc1c      	pop	{r2, r3, r4}
    8026:	4690      	mov	r8, r2
    8028:	4699      	mov	r9, r3
    802a:	46a2      	mov	sl, r4
    802c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    802e:	46c0      	nop			; (mov r8, r8)
    8030:	00004f19 	.word	0x00004f19
    8034:	40002900 	.word	0x40002900
    8038:	40002880 	.word	0x40002880
    803c:	00004ab1 	.word	0x00004ab1
    8040:	00004ac5 	.word	0x00004ac5
    8044:	00007e71 	.word	0x00007e71
    8048:	00004971 	.word	0x00004971
    804c:	0000499d 	.word	0x0000499d
    8050:	00007e51 	.word	0x00007e51
    8054:	00007e31 	.word	0x00007e31
    8058:	20002270 	.word	0x20002270
    805c:	40002800 	.word	0x40002800
    8060:	00019ead 	.word	0x00019ead
    8064:	001e8480 	.word	0x001e8480
    8068:	00530005 	.word	0x00530005
    806c:	003e0005 	.word	0x003e0005
    8070:	00520005 	.word	0x00520005
    8074:	20000c64 	.word	0x20000c64
    8078:	42001000 	.word	0x42001000
    807c:	000060b5 	.word	0x000060b5

00008080 <HAL_Radio_resources_init>:
	SercomSpi *const spi_module = &(module->hw->SPI);
    8080:	4b07      	ldr	r3, [pc, #28]	; (80a0 <HAL_Radio_resources_init+0x20>)
    8082:	681a      	ldr	r2, [r3, #0]
	return (spi_module->SYNCBUSY.reg);
    8084:	69d3      	ldr	r3, [r2, #28]
	while (spi_is_syncing(module)) {
    8086:	2b00      	cmp	r3, #0
    8088:	d1fc      	bne.n	8084 <HAL_Radio_resources_init+0x4>
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    808a:	6813      	ldr	r3, [r2, #0]
    808c:	2102      	movs	r1, #2
    808e:	430b      	orrs	r3, r1
    8090:	6013      	str	r3, [r2, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    8092:	4b03      	ldr	r3, [pc, #12]	; (80a0 <HAL_Radio_resources_init+0x20>)
    8094:	681a      	ldr	r2, [r3, #0]
	return (spi_module->SYNCBUSY.reg);
    8096:	69d3      	ldr	r3, [r2, #28]
	while (spi_is_syncing(&master)) {
    8098:	2b00      	cmp	r3, #0
    809a:	d1fc      	bne.n	8096 <HAL_Radio_resources_init+0x16>
}
    809c:	4770      	bx	lr
    809e:	46c0      	nop			; (mov r8, r8)
    80a0:	20000c64 	.word	0x20000c64

000080a4 <HAL_RadioDeInit>:
	SercomSpi *const spi_module = &(module->hw->SPI);
    80a4:	4b06      	ldr	r3, [pc, #24]	; (80c0 <HAL_RadioDeInit+0x1c>)
    80a6:	681a      	ldr	r2, [r3, #0]
	return (spi_module->SYNCBUSY.reg);
    80a8:	69d3      	ldr	r3, [r2, #28]
	while (spi_is_syncing(module)) {
    80aa:	2b00      	cmp	r3, #0
    80ac:	d1fc      	bne.n	80a8 <HAL_RadioDeInit+0x4>
	spi_module->INTENCLR.reg = SERCOM_SPI_INTENCLR_MASK;
    80ae:	338f      	adds	r3, #143	; 0x8f
    80b0:	7513      	strb	r3, [r2, #20]
	spi_module->INTFLAG.reg = SERCOM_SPI_INTFLAG_MASK;
    80b2:	7613      	strb	r3, [r2, #24]
	spi_module->CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    80b4:	6813      	ldr	r3, [r2, #0]
    80b6:	2102      	movs	r1, #2
    80b8:	438b      	bics	r3, r1
    80ba:	6013      	str	r3, [r2, #0]
}
    80bc:	4770      	bx	lr
    80be:	46c0      	nop			; (mov r8, r8)
    80c0:	20000c64 	.word	0x20000c64

000080c4 <RADIO_Reset>:
{
    80c4:	b570      	push	{r4, r5, r6, lr}
    80c6:	b082      	sub	sp, #8
	HAL_ResetPinMakeOutput();
    80c8:	4c0a      	ldr	r4, [pc, #40]	; (80f4 <RADIO_Reset+0x30>)
    80ca:	47a0      	blx	r4
		port_base->OUTCLR.reg = pin_mask;
    80cc:	4d0a      	ldr	r5, [pc, #40]	; (80f8 <RADIO_Reset+0x34>)
    80ce:	2680      	movs	r6, #128	; 0x80
    80d0:	0236      	lsls	r6, r6, #8
    80d2:	616e      	str	r6, [r5, #20]
	SystemBlockingWaitMs(1);
    80d4:	2001      	movs	r0, #1
    80d6:	4b09      	ldr	r3, [pc, #36]	; (80fc <RADIO_Reset+0x38>)
    80d8:	4798      	blx	r3
	config->direction  = PORT_PIN_DIR_INPUT;
    80da:	a901      	add	r1, sp, #4
    80dc:	2300      	movs	r3, #0
    80de:	700b      	strb	r3, [r1, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    80e0:	2201      	movs	r2, #1
    80e2:	704a      	strb	r2, [r1, #1]
	config->powersave  = false;
    80e4:	708b      	strb	r3, [r1, #2]
	port_pin_set_config(SX_RF_RESET_PIN,&pin_conf);
    80e6:	202f      	movs	r0, #47	; 0x2f
    80e8:	4b05      	ldr	r3, [pc, #20]	; (8100 <RADIO_Reset+0x3c>)
    80ea:	4798      	blx	r3
		port_base->OUTSET.reg = pin_mask;
    80ec:	61ae      	str	r6, [r5, #24]
	HAL_ResetPinMakeOutput();
    80ee:	47a0      	blx	r4
}
    80f0:	b002      	add	sp, #8
    80f2:	bd70      	pop	{r4, r5, r6, pc}
    80f4:	00007e11 	.word	0x00007e11
    80f8:	40002880 	.word	0x40002880
    80fc:	00008361 	.word	0x00008361
    8100:	00004f19 	.word	0x00004f19

00008104 <RADIO_RegisterWrite>:
{
    8104:	b570      	push	{r4, r5, r6, lr}
    8106:	0004      	movs	r4, r0
    8108:	000d      	movs	r5, r1
	HAL_SPICSAssert();
    810a:	4b05      	ldr	r3, [pc, #20]	; (8120 <RADIO_RegisterWrite+0x1c>)
    810c:	4798      	blx	r3
	HAL_SPISend(REG_WRITE_CMD | reg);
    810e:	2080      	movs	r0, #128	; 0x80
    8110:	4320      	orrs	r0, r4
    8112:	4c04      	ldr	r4, [pc, #16]	; (8124 <RADIO_RegisterWrite+0x20>)
    8114:	47a0      	blx	r4
	HAL_SPISend(value);
    8116:	0028      	movs	r0, r5
    8118:	47a0      	blx	r4
	HAL_SPICSDeassert();
    811a:	4b03      	ldr	r3, [pc, #12]	; (8128 <RADIO_RegisterWrite+0x24>)
    811c:	4798      	blx	r3
}
    811e:	bd70      	pop	{r4, r5, r6, pc}
    8120:	00007e91 	.word	0x00007e91
    8124:	00007dbd 	.word	0x00007dbd
    8128:	00007ead 	.word	0x00007ead

0000812c <RADIO_RegisterRead>:
{
    812c:	b510      	push	{r4, lr}
    812e:	0004      	movs	r4, r0
	HAL_SPICSAssert();
    8130:	4b06      	ldr	r3, [pc, #24]	; (814c <RADIO_RegisterRead+0x20>)
    8132:	4798      	blx	r3
	HAL_SPISend(reg);
    8134:	207f      	movs	r0, #127	; 0x7f
    8136:	4020      	ands	r0, r4
    8138:	4c05      	ldr	r4, [pc, #20]	; (8150 <RADIO_RegisterRead+0x24>)
    813a:	47a0      	blx	r4
	readValue = HAL_SPISend(0xFF);
    813c:	20ff      	movs	r0, #255	; 0xff
    813e:	47a0      	blx	r4
    8140:	0004      	movs	r4, r0
	HAL_SPICSDeassert();
    8142:	4b04      	ldr	r3, [pc, #16]	; (8154 <RADIO_RegisterRead+0x28>)
    8144:	4798      	blx	r3
}
    8146:	0020      	movs	r0, r4
    8148:	bd10      	pop	{r4, pc}
    814a:	46c0      	nop			; (mov r8, r8)
    814c:	00007e91 	.word	0x00007e91
    8150:	00007dbd 	.word	0x00007dbd
    8154:	00007ead 	.word	0x00007ead

00008158 <RADIO_FrameWrite>:
{
    8158:	b570      	push	{r4, r5, r6, lr}
    815a:	0004      	movs	r4, r0
    815c:	000e      	movs	r6, r1
    815e:	0015      	movs	r5, r2
    HAL_SPICSAssert();
    8160:	4b0a      	ldr	r3, [pc, #40]	; (818c <RADIO_FrameWrite+0x34>)
    8162:	4798      	blx	r3
    HAL_SPISend(REG_WRITE_CMD | offset);
    8164:	2080      	movs	r0, #128	; 0x80
    8166:	4320      	orrs	r0, r4
    8168:	4b09      	ldr	r3, [pc, #36]	; (8190 <RADIO_FrameWrite+0x38>)
    816a:	4798      	blx	r3
    for (uint8_t i = 0; i < bufferLen; i++)
    816c:	2d00      	cmp	r5, #0
    816e:	d00a      	beq.n	8186 <RADIO_FrameWrite+0x2e>
    8170:	0034      	movs	r4, r6
    8172:	3d01      	subs	r5, #1
    8174:	b2ed      	uxtb	r5, r5
    8176:	3501      	adds	r5, #1
    8178:	1975      	adds	r5, r6, r5
	    HAL_SPISend(buffer[i]);
    817a:	4e05      	ldr	r6, [pc, #20]	; (8190 <RADIO_FrameWrite+0x38>)
    817c:	7820      	ldrb	r0, [r4, #0]
    817e:	47b0      	blx	r6
    8180:	3401      	adds	r4, #1
    for (uint8_t i = 0; i < bufferLen; i++)
    8182:	42ac      	cmp	r4, r5
    8184:	d1fa      	bne.n	817c <RADIO_FrameWrite+0x24>
    HAL_SPICSDeassert();
    8186:	4b03      	ldr	r3, [pc, #12]	; (8194 <RADIO_FrameWrite+0x3c>)
    8188:	4798      	blx	r3
}
    818a:	bd70      	pop	{r4, r5, r6, pc}
    818c:	00007e91 	.word	0x00007e91
    8190:	00007dbd 	.word	0x00007dbd
    8194:	00007ead 	.word	0x00007ead

00008198 <RADIO_FrameRead>:
{
    8198:	b570      	push	{r4, r5, r6, lr}
    819a:	0004      	movs	r4, r0
    819c:	000e      	movs	r6, r1
    819e:	0015      	movs	r5, r2
    HAL_SPICSAssert();
    81a0:	4b0a      	ldr	r3, [pc, #40]	; (81cc <RADIO_FrameRead+0x34>)
    81a2:	4798      	blx	r3
    HAL_SPISend(offset);
    81a4:	0020      	movs	r0, r4
    81a6:	4b0a      	ldr	r3, [pc, #40]	; (81d0 <RADIO_FrameRead+0x38>)
    81a8:	4798      	blx	r3
    for (uint8_t i = 0; i < bufferLen; i++)
    81aa:	2d00      	cmp	r5, #0
    81ac:	d00b      	beq.n	81c6 <RADIO_FrameRead+0x2e>
    81ae:	0034      	movs	r4, r6
    81b0:	3d01      	subs	r5, #1
    81b2:	b2ed      	uxtb	r5, r5
    81b4:	3501      	adds	r5, #1
    81b6:	1975      	adds	r5, r6, r5
	    buffer[i] = HAL_SPISend(0xFF);
    81b8:	4e05      	ldr	r6, [pc, #20]	; (81d0 <RADIO_FrameRead+0x38>)
    81ba:	20ff      	movs	r0, #255	; 0xff
    81bc:	47b0      	blx	r6
    81be:	7020      	strb	r0, [r4, #0]
    81c0:	3401      	adds	r4, #1
    for (uint8_t i = 0; i < bufferLen; i++)
    81c2:	42ac      	cmp	r4, r5
    81c4:	d1f9      	bne.n	81ba <RADIO_FrameRead+0x22>
    HAL_SPICSDeassert();
    81c6:	4b03      	ldr	r3, [pc, #12]	; (81d4 <RADIO_FrameRead+0x3c>)
    81c8:	4798      	blx	r3
}
    81ca:	bd70      	pop	{r4, r5, r6, pc}
    81cc:	00007e91 	.word	0x00007e91
    81d0:	00007dbd 	.word	0x00007dbd
    81d4:	00007ead 	.word	0x00007ead

000081d8 <HAL_RegisterDioInterruptHandler>:
 * \param[in] dioPin  - DIO pin
 * \param[in] handler - function to be called upon given DIO interrupt
 */
void HAL_RegisterDioInterruptHandler(uint8_t dioPin, DioInterruptHandler_t handler)
{
  switch (dioPin)
    81d8:	2802      	cmp	r0, #2
    81da:	d007      	beq.n	81ec <HAL_RegisterDioInterruptHandler+0x14>
    81dc:	2804      	cmp	r0, #4
    81de:	d008      	beq.n	81f2 <HAL_RegisterDioInterruptHandler+0x1a>
    81e0:	2801      	cmp	r0, #1
    81e2:	d000      	beq.n	81e6 <HAL_RegisterDioInterruptHandler+0xe>
#endif

    default:
      break;
  }
}
    81e4:	4770      	bx	lr
      interruptHandlerDio0 = handler;
    81e6:	4b04      	ldr	r3, [pc, #16]	; (81f8 <HAL_RegisterDioInterruptHandler+0x20>)
    81e8:	6019      	str	r1, [r3, #0]
      break;
    81ea:	e7fb      	b.n	81e4 <HAL_RegisterDioInterruptHandler+0xc>
      interruptHandlerDio1 = handler;
    81ec:	4b03      	ldr	r3, [pc, #12]	; (81fc <HAL_RegisterDioInterruptHandler+0x24>)
    81ee:	6019      	str	r1, [r3, #0]
      break;
    81f0:	e7f8      	b.n	81e4 <HAL_RegisterDioInterruptHandler+0xc>
      interruptHandlerDio2 = handler;
    81f2:	4b03      	ldr	r3, [pc, #12]	; (8200 <HAL_RegisterDioInterruptHandler+0x28>)
    81f4:	6019      	str	r1, [r3, #0]
}
    81f6:	e7f5      	b.n	81e4 <HAL_RegisterDioInterruptHandler+0xc>
    81f8:	20000c58 	.word	0x20000c58
    81fc:	20000c5c 	.word	0x20000c5c
    8200:	20000c60 	.word	0x20000c60

00008204 <HAL_EnableRFCtrl>:

void HAL_EnableRFCtrl(RFCtrl1_t RFCtrl1, RFCtrl2_t RFCtrl2)
{
	/* In standard SAMR34_XPRO, Only RFO_HF and PA_BOOST needs to be controlled by a GPIO pin */
#ifdef RFSWITCH_ENABLE
   if ((RFCtrl1 == RFO_HF) || (RFCtrl2 == RX))
    8204:	2801      	cmp	r0, #1
    8206:	d00a      	beq.n	821e <HAL_EnableRFCtrl+0x1a>
    8208:	2900      	cmp	r1, #0
    820a:	d008      	beq.n	821e <HAL_EnableRFCtrl+0x1a>
   {
		port_pin_set_output_level(RF_SWITCH_PIN, RF_SWITCH_ACTIVE);		
   }
   else if ((RFCtrl1 == PA_BOOST) && (RFCtrl2 == TX))
    820c:	2802      	cmp	r0, #2
    820e:	d10a      	bne.n	8226 <HAL_EnableRFCtrl+0x22>
    8210:	2901      	cmp	r1, #1
    8212:	d108      	bne.n	8226 <HAL_EnableRFCtrl+0x22>
		port_base->OUTCLR.reg = pin_mask;
    8214:	2280      	movs	r2, #128	; 0x80
    8216:	0192      	lsls	r2, r2, #6
    8218:	4b03      	ldr	r3, [pc, #12]	; (8228 <HAL_EnableRFCtrl+0x24>)
    821a:	615a      	str	r2, [r3, #20]
   {
	   port_pin_set_output_level(RF_SWITCH_PIN, RF_SWITCH_INACTIVE);
   }
#endif	
}
    821c:	e003      	b.n	8226 <HAL_EnableRFCtrl+0x22>
		port_base->OUTSET.reg = pin_mask;
    821e:	2280      	movs	r2, #128	; 0x80
    8220:	0192      	lsls	r2, r2, #6
    8222:	4b01      	ldr	r3, [pc, #4]	; (8228 <HAL_EnableRFCtrl+0x24>)
    8224:	619a      	str	r2, [r3, #24]
    8226:	4770      	bx	lr
    8228:	40002800 	.word	0x40002800

0000822c <HAL_DisableRFCtrl>:

void HAL_DisableRFCtrl(RFCtrl1_t RFCtrl1, RFCtrl2_t RFCtrl2)
{
	/* In standard SAMR34_XPRO, Only RFO_HF and PA_BOOST needs to be controlled by a GPIO pin */
#ifdef RFSWITCH_ENABLE
	if ((RFCtrl1 == RFO_HF) || (RFCtrl2 == RX))
    822c:	2801      	cmp	r0, #1
    822e:	d001      	beq.n	8234 <HAL_DisableRFCtrl+0x8>
    8230:	2900      	cmp	r1, #0
    8232:	d103      	bne.n	823c <HAL_DisableRFCtrl+0x10>
		port_base->OUTCLR.reg = pin_mask;
    8234:	2280      	movs	r2, #128	; 0x80
    8236:	0192      	lsls	r2, r2, #6
    8238:	4b01      	ldr	r3, [pc, #4]	; (8240 <HAL_DisableRFCtrl+0x14>)
    823a:	615a      	str	r2, [r3, #20]
	{
		port_pin_set_output_level(RF_SWITCH_PIN, RF_SWITCH_INACTIVE);	
	}
#endif	
}
    823c:	4770      	bx	lr
    823e:	46c0      	nop			; (mov r8, r8)
    8240:	40002800 	.word	0x40002800

00008244 <HAL_GetRadioClkStabilizationDelay>:
 * \param[out] Time value in ms
 */
uint8_t HAL_GetRadioClkStabilizationDelay(void)
{
	return RADIO_CLK_STABILITATION_DELAY;
}
    8244:	2002      	movs	r0, #2
    8246:	4770      	bx	lr

00008248 <HAL_GetRadioClkSrc>:
 * \param[out] Type of clock source TCXO or XTAL
 */
RadioClockSources_t HAL_GetRadioClkSrc(void)
{
	return RADIO_CLK_SRC;
}
    8248:	2000      	movs	r0, #0
    824a:	4770      	bx	lr

0000824c <HAL_TCXOPowerOn>:
 *
 * \param[in] None
 * \param[out] None
 */
void HAL_TCXOPowerOn(void)
{
    824c:	b510      	push	{r4, lr}
		port_base->OUTSET.reg = pin_mask;
    824e:	2280      	movs	r2, #128	; 0x80
    8250:	0092      	lsls	r2, r2, #2
    8252:	4b03      	ldr	r3, [pc, #12]	; (8260 <HAL_TCXOPowerOn+0x14>)
    8254:	619a      	str	r2, [r3, #24]
#ifdef TCXO_ENABLE
	port_pin_set_output_level(TCXO_PWR_PIN, TCXO_PWR_ACTIVE);
	delay_ms(RADIO_CLK_STABILITATION_DELAY);
    8256:	2002      	movs	r0, #2
    8258:	4b02      	ldr	r3, [pc, #8]	; (8264 <HAL_TCXOPowerOn+0x18>)
    825a:	4798      	blx	r3
#endif
}
    825c:	bd10      	pop	{r4, pc}
    825e:	46c0      	nop			; (mov r8, r8)
    8260:	40002800 	.word	0x40002800
    8264:	000045bd 	.word	0x000045bd

00008268 <HAL_TCXOPowerOff>:
		port_base->OUTCLR.reg = pin_mask;
    8268:	2280      	movs	r2, #128	; 0x80
    826a:	0092      	lsls	r2, r2, #2
    826c:	4b01      	ldr	r3, [pc, #4]	; (8274 <HAL_TCXOPowerOff+0xc>)
    826e:	615a      	str	r2, [r3, #20]
#ifdef TCXO_ENABLE
#ifndef TCXO_ALWAYS_ON
	port_pin_set_output_level(TCXO_PWR_PIN, TCXO_PWR_INACTIVE);
#endif
#endif
}
    8270:	4770      	bx	lr
    8272:	46c0      	nop			; (mov r8, r8)
    8274:	40002800 	.word	0x40002800

00008278 <HAL_Sleep>:
 *
 * \param[in] mode - sleep mode
 */
void HAL_Sleep(HAL_SleepMode_t mode)
{
	switch (mode)
    8278:	2801      	cmp	r0, #1
    827a:	d002      	beq.n	8282 <HAL_Sleep+0xa>
    827c:	2802      	cmp	r0, #2
    827e:	d00c      	beq.n	829a <HAL_Sleep+0x22>
		{
			/* other sleep modes are not implemented currently */
			break;
		}
	}
}
    8280:	4770      	bx	lr
	PM->SLEEPCFG.reg = sleep_mode;
    8282:	2204      	movs	r2, #4
    8284:	2380      	movs	r3, #128	; 0x80
    8286:	05db      	lsls	r3, r3, #23
    8288:	705a      	strb	r2, [r3, #1]
	while(PM->SLEEPCFG.reg != sleep_mode) ;
    828a:	001a      	movs	r2, r3
    828c:	7853      	ldrb	r3, [r2, #1]
    828e:	2b04      	cmp	r3, #4
    8290:	d1fc      	bne.n	828c <HAL_Sleep+0x14>
  __ASM volatile ("dsb 0xF":::"memory");
    8292:	f3bf 8f4f 	dsb	sy
	__WFI();
    8296:	bf30      	wfi
    8298:	e7f2      	b.n	8280 <HAL_Sleep+0x8>
	PM->SLEEPCFG.reg = sleep_mode;
    829a:	2205      	movs	r2, #5
    829c:	2380      	movs	r3, #128	; 0x80
    829e:	05db      	lsls	r3, r3, #23
    82a0:	705a      	strb	r2, [r3, #1]
	while(PM->SLEEPCFG.reg != sleep_mode) ;
    82a2:	001a      	movs	r2, r3
    82a4:	7853      	ldrb	r3, [r2, #1]
    82a6:	2b05      	cmp	r3, #5
    82a8:	d1fc      	bne.n	82a4 <HAL_Sleep+0x2c>
    82aa:	f3bf 8f4f 	dsb	sy
	__WFI();
    82ae:	bf30      	wfi
    82b0:	e7e6      	b.n	8280 <HAL_Sleep+0x8>
	...

000082b4 <SleepTimerInit>:
/************************************** IMPLEMENTATION************************/
/**
* \brief Initializes the sleep timer module
*/
void SleepTimerInit(void)
{
    82b4:	b510      	push	{r4, lr}
    82b6:	b084      	sub	sp, #16
	/* Sanity check argument */
	Assert(config);

	/* Set default into configuration structure */
	config->prescaler           = RTC_COUNT_PRESCALER_DIV_1024;
	config->mode                = RTC_COUNT_MODE_32BIT;
    82b8:	2201      	movs	r2, #1
    82ba:	466b      	mov	r3, sp
    82bc:	709a      	strb	r2, [r3, #2]
	config->clear_on_match      = false;
    82be:	2300      	movs	r3, #0
    82c0:	4669      	mov	r1, sp
    82c2:	70cb      	strb	r3, [r1, #3]

#ifdef FEATURE_RTC_CONTINUOUSLY_UPDATED
	config->continuously_update = false;
#endif
#if (SAML21XXXB) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30) || (SAMR34) || (SAMR35) || (WLR089)
	config->enable_read_sync    = true;
    82c4:	710a      	strb	r2, [r1, #4]
	struct rtc_count_config rtc_config;
	rtc_count_get_config_defaults(&rtc_config);
	
	rtc_config.prescaler = RTC_COUNT_PRESCALER_OFF;
    82c6:	466a      	mov	r2, sp
    82c8:	800b      	strh	r3, [r1, #0]
	rtc_config.enable_read_sync = true;
	rtc_config.compare_values[0] = COMPARE_COUNT_MAX_VALUE;
    82ca:	3b01      	subs	r3, #1
    82cc:	9302      	str	r3, [sp, #8]
	rtc_config.compare_values[1] = COMPARE_COUNT_MAX_VALUE;
    82ce:	9303      	str	r3, [sp, #12]
	rtc_count_init(&rtc, RTC, &rtc_config);
    82d0:	4c04      	ldr	r4, [pc, #16]	; (82e4 <SleepTimerInit+0x30>)
    82d2:	4905      	ldr	r1, [pc, #20]	; (82e8 <SleepTimerInit+0x34>)
    82d4:	0020      	movs	r0, r4
    82d6:	4b05      	ldr	r3, [pc, #20]	; (82ec <SleepTimerInit+0x38>)
    82d8:	4798      	blx	r3
	rtc_count_enable(&rtc);
    82da:	0020      	movs	r0, r4
    82dc:	4b04      	ldr	r3, [pc, #16]	; (82f0 <SleepTimerInit+0x3c>)
    82de:	4798      	blx	r3
}
    82e0:	b004      	add	sp, #16
    82e2:	bd10      	pop	{r4, pc}
    82e4:	20002274 	.word	0x20002274
    82e8:	40002000 	.word	0x40002000
    82ec:	000050c9 	.word	0x000050c9
    82f0:	00004f49 	.word	0x00004f49

000082f4 <SleepTimerGetElapsedTime>:
/**
* \brief Calculate the Elapsed Time from the previous call of this function
* \retval Elapsed time in ticks
*/
uint32_t SleepTimerGetElapsedTime(void)
{
    82f4:	b510      	push	{r4, lr}
	return rtc_count_get_count(&rtc);
    82f6:	4802      	ldr	r0, [pc, #8]	; (8300 <SleepTimerGetElapsedTime+0xc>)
    82f8:	4b02      	ldr	r3, [pc, #8]	; (8304 <SleepTimerGetElapsedTime+0x10>)
    82fa:	4798      	blx	r3
}
    82fc:	bd10      	pop	{r4, pc}
    82fe:	46c0      	nop			; (mov r8, r8)
    8300:	20002274 	.word	0x20002274
    8304:	00005039 	.word	0x00005039

00008308 <SleepTimerStart>:

/**
* \brief Initializes the sleep timer
*/
void SleepTimerStart(uint32_t sleepTicks, void (*cb)(void))
{
    8308:	b570      	push	{r4, r5, r6, lr}
    830a:	0005      	movs	r5, r0
    830c:	000e      	movs	r6, r1
	rtc_count_set_count(&rtc, 0);
    830e:	4c0a      	ldr	r4, [pc, #40]	; (8338 <SleepTimerStart+0x30>)
    8310:	2100      	movs	r1, #0
    8312:	0020      	movs	r0, r4
    8314:	4b09      	ldr	r3, [pc, #36]	; (833c <SleepTimerStart+0x34>)
    8316:	4798      	blx	r3
	rtc_count_register_callback(&rtc, cb, RTC_COUNT_CALLBACK_COMPARE_0);
    8318:	2208      	movs	r2, #8
    831a:	0031      	movs	r1, r6
    831c:	0020      	movs	r0, r4
    831e:	4b08      	ldr	r3, [pc, #32]	; (8340 <SleepTimerStart+0x38>)
    8320:	4798      	blx	r3
	rtc_count_set_compare(&rtc, sleepTicks, RTC_COUNT_COMPARE_0);
    8322:	2200      	movs	r2, #0
    8324:	0029      	movs	r1, r5
    8326:	0020      	movs	r0, r4
    8328:	4b06      	ldr	r3, [pc, #24]	; (8344 <SleepTimerStart+0x3c>)
    832a:	4798      	blx	r3
	rtc_count_enable_callback(&rtc, RTC_COUNT_CALLBACK_COMPARE_0);
    832c:	2108      	movs	r1, #8
    832e:	0020      	movs	r0, r4
    8330:	4b05      	ldr	r3, [pc, #20]	; (8348 <SleepTimerStart+0x40>)
    8332:	4798      	blx	r3
}
    8334:	bd70      	pop	{r4, r5, r6, pc}
    8336:	46c0      	nop			; (mov r8, r8)
    8338:	20002274 	.word	0x20002274
    833c:	00004ff5 	.word	0x00004ff5
    8340:	00005165 	.word	0x00005165
    8344:	00005065 	.word	0x00005065
    8348:	000051a1 	.word	0x000051a1

0000834c <SleepTimerStop>:

/**
* \brief Stop the sleep timer
*/
void SleepTimerStop(void)
{
    834c:	b510      	push	{r4, lr}
	rtc_count_disable_callback(&rtc, RTC_COUNT_CALLBACK_COMPARE_0);
    834e:	2108      	movs	r1, #8
    8350:	4801      	ldr	r0, [pc, #4]	; (8358 <SleepTimerStop+0xc>)
    8352:	4b02      	ldr	r3, [pc, #8]	; (835c <SleepTimerStop+0x10>)
    8354:	4798      	blx	r3
}
    8356:	bd10      	pop	{r4, pc}
    8358:	20002274 	.word	0x20002274
    835c:	000051e5 	.word	0x000051e5

00008360 <SystemBlockingWaitMs>:
 * waiting with the MCU in sleep.
 * Find out how long it takes the MCU to go to and wake up from sleep to see if
 * it makes sense to go to sleep at all 
 */
void SystemBlockingWaitMs(uint32_t ms)
{
    8360:	b510      	push	{r4, lr}
#ifndef UT
    delay_ms(ms);
    8362:	2800      	cmp	r0, #0
    8364:	d103      	bne.n	836e <SystemBlockingWaitMs+0xe>
    8366:	2001      	movs	r0, #1
    8368:	4b02      	ldr	r3, [pc, #8]	; (8374 <SystemBlockingWaitMs+0x14>)
    836a:	4798      	blx	r3
#endif
}
    836c:	bd10      	pop	{r4, pc}
    delay_ms(ms);
    836e:	4b02      	ldr	r3, [pc, #8]	; (8378 <SystemBlockingWaitMs+0x18>)
    8370:	4798      	blx	r3
    8372:	e7fb      	b.n	836c <SystemBlockingWaitMs+0xc>
    8374:	00004591 	.word	0x00004591
    8378:	000045bd 	.word	0x000045bd

0000837c <System_GetExternalEui>:
#if (EDBG_EUI_READ == 1)
#include "edbg_eui.h"
#endif

void System_GetExternalEui(uint8_t *id)
{
    837c:	b510      	push	{r4, lr}
    837e:	b082      	sub	sp, #8
    8380:	466a      	mov	r2, sp
    8382:	4b0a      	ldr	r3, [pc, #40]	; (83ac <System_GetExternalEui+0x30>)
#elif (defined(__WLR089U0__) && MODULE_EUI_READ == 1)

	#define NVM_UID_ADDRESS   ((volatile uint16_t *)(0x0080400AU))
	uint8_t i = 0, j = 0 ;
	uint8_t moduleDevEUI[8] ;
	for (i = 0; i < 8; i += 2, j++)
    8384:	4c0a      	ldr	r4, [pc, #40]	; (83b0 <System_GetExternalEui+0x34>)
	{
		moduleDevEUI[i] = (NVM_UID_ADDRESS[j] & 0xFF) ;
    8386:	8819      	ldrh	r1, [r3, #0]
    8388:	7011      	strb	r1, [r2, #0]
		moduleDevEUI[i + 1] = (NVM_UID_ADDRESS[j] >> 8) ;
    838a:	8819      	ldrh	r1, [r3, #0]
    838c:	0a09      	lsrs	r1, r1, #8
    838e:	7051      	strb	r1, [r2, #1]
    8390:	3302      	adds	r3, #2
    8392:	3202      	adds	r2, #2
	for (i = 0; i < 8; i += 2, j++)
    8394:	42a3      	cmp	r3, r4
    8396:	d1f6      	bne.n	8386 <System_GetExternalEui+0xa>
    8398:	2300      	movs	r3, #0
	}
	for (i= 0; i < 8; i++)
	{
		*id = moduleDevEUI[i] ;
    839a:	466a      	mov	r2, sp
    839c:	5c9a      	ldrb	r2, [r3, r2]
    839e:	54c2      	strb	r2, [r0, r3]
    83a0:	3301      	adds	r3, #1
	for (i= 0; i < 8; i++)
    83a2:	2b08      	cmp	r3, #8
    83a4:	d1f9      	bne.n	839a <System_GetExternalEui+0x1e>
		id++ ;
	}
#endif
}
    83a6:	b002      	add	sp, #8
    83a8:	bd10      	pop	{r4, pc}
    83aa:	46c0      	nop			; (mov r8, r8)
    83ac:	0080400a 	.word	0x0080400a
    83b0:	00804012 	.word	0x00804012

000083b4 <system_enter_critical_section>:

void system_enter_critical_section(void)
{
    83b4:	b510      	push	{r4, lr}
	cpu_irq_enter_critical();
    83b6:	4b01      	ldr	r3, [pc, #4]	; (83bc <system_enter_critical_section+0x8>)
    83b8:	4798      	blx	r3
#ifndef UT
	system_interrupt_enter_critical_section();
#endif
}
    83ba:	bd10      	pop	{r4, pc}
    83bc:	000045e9 	.word	0x000045e9

000083c0 <system_leave_critical_section>:

void system_leave_critical_section(void)
{
    83c0:	b510      	push	{r4, lr}
	cpu_irq_leave_critical();
    83c2:	4b01      	ldr	r3, [pc, #4]	; (83c8 <system_leave_critical_section+0x8>)
    83c4:	4798      	blx	r3
#ifndef UT
	system_interrupt_leave_critical_section();
#endif
}
    83c6:	bd10      	pop	{r4, pc}
    83c8:	00004629 	.word	0x00004629

000083cc <PMM_Wakeup>:

/**
* \brief Wakeup from sleep
*/
void PMM_Wakeup(void)
{
    83cc:	b570      	push	{r4, r5, r6, lr}
    uint64_t sleptTimeUs = 0;

    if (PMM_STATE_SLEEP == pmmState)
    83ce:	4b16      	ldr	r3, [pc, #88]	; (8428 <PMM_Wakeup+0x5c>)
    83d0:	781b      	ldrb	r3, [r3, #0]
    83d2:	2b01      	cmp	r3, #1
    83d4:	d000      	beq.n	83d8 <PMM_Wakeup+0xc>
        {
            sleepReq->pmmWakeupCallback(US_TO_MS(sleptTimeUs));
            sleepReq = NULL;
        }
    }
}
    83d6:	bd70      	pop	{r4, r5, r6, pc}
		pmmState = PMM_STATE_ACTIVE;
    83d8:	2200      	movs	r2, #0
    83da:	4b13      	ldr	r3, [pc, #76]	; (8428 <PMM_Wakeup+0x5c>)
    83dc:	701a      	strb	r2, [r3, #0]
        sleptTimeUs = SLEEP_TICKS_TO_US(SleepTimerGetElapsedTime());
    83de:	4b13      	ldr	r3, [pc, #76]	; (842c <PMM_Wakeup+0x60>)
    83e0:	4798      	blx	r3
    83e2:	4b13      	ldr	r3, [pc, #76]	; (8430 <PMM_Wakeup+0x64>)
    83e4:	4798      	blx	r3
    83e6:	4913      	ldr	r1, [pc, #76]	; (8434 <PMM_Wakeup+0x68>)
    83e8:	4b13      	ldr	r3, [pc, #76]	; (8438 <PMM_Wakeup+0x6c>)
    83ea:	4798      	blx	r3
    83ec:	4b13      	ldr	r3, [pc, #76]	; (843c <PMM_Wakeup+0x70>)
    83ee:	4798      	blx	r3
    83f0:	0004      	movs	r4, r0
    83f2:	000d      	movs	r5, r1
        SleepTimerStop();
    83f4:	4b12      	ldr	r3, [pc, #72]	; (8440 <PMM_Wakeup+0x74>)
    83f6:	4798      	blx	r3
        SystemTimerSync(sleptTimeUs);
    83f8:	0020      	movs	r0, r4
    83fa:	0029      	movs	r1, r5
    83fc:	4b11      	ldr	r3, [pc, #68]	; (8444 <PMM_Wakeup+0x78>)
    83fe:	4798      	blx	r3
        if (sleepReq && sleepReq->pmmWakeupCallback)
    8400:	4b11      	ldr	r3, [pc, #68]	; (8448 <PMM_Wakeup+0x7c>)
    8402:	681b      	ldr	r3, [r3, #0]
    8404:	2b00      	cmp	r3, #0
    8406:	d0e6      	beq.n	83d6 <PMM_Wakeup+0xa>
    8408:	689e      	ldr	r6, [r3, #8]
    840a:	2e00      	cmp	r6, #0
    840c:	d0e3      	beq.n	83d6 <PMM_Wakeup+0xa>
            sleepReq->pmmWakeupCallback(US_TO_MS(sleptTimeUs));
    840e:	22fa      	movs	r2, #250	; 0xfa
    8410:	0092      	lsls	r2, r2, #2
    8412:	2300      	movs	r3, #0
    8414:	0020      	movs	r0, r4
    8416:	0029      	movs	r1, r5
    8418:	4c0c      	ldr	r4, [pc, #48]	; (844c <PMM_Wakeup+0x80>)
    841a:	47a0      	blx	r4
    841c:	47b0      	blx	r6
            sleepReq = NULL;
    841e:	2200      	movs	r2, #0
    8420:	4b09      	ldr	r3, [pc, #36]	; (8448 <PMM_Wakeup+0x7c>)
    8422:	601a      	str	r2, [r3, #0]
}
    8424:	e7d7      	b.n	83d6 <PMM_Wakeup+0xa>
    8426:	46c0      	nop			; (mov r8, r8)
    8428:	20000c70 	.word	0x20000c70
    842c:	000082f5 	.word	0x000082f5
    8430:	00017a1d 	.word	0x00017a1d
    8434:	41f423d7 	.word	0x41f423d7
    8438:	000173c5 	.word	0x000173c5
    843c:	00016b01 	.word	0x00016b01
    8440:	0000834d 	.word	0x0000834d
    8444:	0000f301 	.word	0x0000f301
    8448:	20000c74 	.word	0x20000c74
    844c:	00016a01 	.word	0x00016a01

00008450 <PMM_Sleep>:
{
    8450:	b570      	push	{r4, r5, r6, lr}
    8452:	1e04      	subs	r4, r0, #0
    if ( req && (PMM_STATE_ACTIVE == pmmState) )
    8454:	d055      	beq.n	8502 <PMM_Sleep+0xb2>
    8456:	4b2c      	ldr	r3, [pc, #176]	; (8508 <PMM_Sleep+0xb8>)
    8458:	781b      	ldrb	r3, [r3, #0]
    PMM_Status_t status = PMM_SLEEP_REQ_DENIED;
    845a:	2000      	movs	r0, #0
    if ( req && (PMM_STATE_ACTIVE == pmmState) )
    845c:	2b00      	cmp	r3, #0
    845e:	d000      	beq.n	8462 <PMM_Sleep+0x12>
}
    8460:	bd70      	pop	{r4, r5, r6, pc}
        canSleep = SYSTEM_ReadyToSleep();
    8462:	4b2a      	ldr	r3, [pc, #168]	; (850c <PMM_Sleep+0xbc>)
    8464:	4798      	blx	r3
    8466:	0003      	movs	r3, r0
            return status;
    8468:	2000      	movs	r0, #0
        canSleep = canSleep && validateSleepDuration( req->sleepTimeMs );
    846a:	2b00      	cmp	r3, #0
    846c:	d0f8      	beq.n	8460 <PMM_Sleep+0x10>
        (PMM_SLEEPTIME_MAX_MS >= durationMs) && \
    846e:	6823      	ldr	r3, [r4, #0]
    8470:	4a27      	ldr	r2, [pc, #156]	; (8510 <PMM_Sleep+0xc0>)
    8472:	4694      	mov	ip, r2
    8474:	4463      	add	r3, ip
        if ( false == canSleep )
    8476:	4a27      	ldr	r2, [pc, #156]	; (8514 <PMM_Sleep+0xc4>)
    8478:	4293      	cmp	r3, r2
    847a:	d8f1      	bhi.n	8460 <PMM_Sleep+0x10>
        if ( SLEEP_MODE_BACKUP == req->sleep_mode )
    847c:	7923      	ldrb	r3, [r4, #4]
    847e:	2b02      	cmp	r3, #2
    8480:	d021      	beq.n	84c6 <PMM_Sleep+0x76>
        else if ( SLEEP_MODE_STANDBY == req->sleep_mode )
    8482:	2b01      	cmp	r3, #1
    8484:	d025      	beq.n	84d2 <PMM_Sleep+0x82>
    uint32_t sysSleepTime = ~0u; /* 0xffFFffFF is invalid */
    8486:	2501      	movs	r5, #1
    8488:	426d      	negs	r5, r5
        if ( canSleep && SYSTEM_ReadyToSleep() )
    848a:	4b20      	ldr	r3, [pc, #128]	; (850c <PMM_Sleep+0xbc>)
    848c:	4798      	blx	r3
    848e:	0003      	movs	r3, r0
    PMM_Status_t status = PMM_SLEEP_REQ_DENIED;
    8490:	2000      	movs	r0, #0
        if ( canSleep && SYSTEM_ReadyToSleep() )
    8492:	2b00      	cmp	r3, #0
    8494:	d0e4      	beq.n	8460 <PMM_Sleep+0x10>
            SystemTimerSuspend();
    8496:	4b20      	ldr	r3, [pc, #128]	; (8518 <PMM_Sleep+0xc8>)
    8498:	4798      	blx	r3
            SleepTimerStart( MS_TO_SLEEP_TICKS( sysSleepTime - PMM_WAKEUPTIME_MS ), PMM_Wakeup );
    849a:	0028      	movs	r0, r5
    849c:	380a      	subs	r0, #10
    849e:	4b1f      	ldr	r3, [pc, #124]	; (851c <PMM_Sleep+0xcc>)
    84a0:	4798      	blx	r3
    84a2:	491f      	ldr	r1, [pc, #124]	; (8520 <PMM_Sleep+0xd0>)
    84a4:	4b1f      	ldr	r3, [pc, #124]	; (8524 <PMM_Sleep+0xd4>)
    84a6:	4798      	blx	r3
    84a8:	4b1f      	ldr	r3, [pc, #124]	; (8528 <PMM_Sleep+0xd8>)
    84aa:	4798      	blx	r3
    84ac:	491f      	ldr	r1, [pc, #124]	; (852c <PMM_Sleep+0xdc>)
    84ae:	4b20      	ldr	r3, [pc, #128]	; (8530 <PMM_Sleep+0xe0>)
    84b0:	4798      	blx	r3
            pmmState = PMM_STATE_SLEEP;
    84b2:	2201      	movs	r2, #1
    84b4:	4b14      	ldr	r3, [pc, #80]	; (8508 <PMM_Sleep+0xb8>)
    84b6:	701a      	strb	r2, [r3, #0]
            sleepReq = req;
    84b8:	4b1e      	ldr	r3, [pc, #120]	; (8534 <PMM_Sleep+0xe4>)
    84ba:	601c      	str	r4, [r3, #0]
            HAL_Sleep(req->sleep_mode);
    84bc:	7920      	ldrb	r0, [r4, #4]
    84be:	4b1e      	ldr	r3, [pc, #120]	; (8538 <PMM_Sleep+0xe8>)
    84c0:	4798      	blx	r3
            status = PMM_SLEEP_REQ_PROCESSED;
    84c2:	2001      	movs	r0, #1
    84c4:	e7cc      	b.n	8460 <PMM_Sleep+0x10>
            canSleep = canSleep && ( SWTIMER_INVALID_TIMEOUT == SwTimerNextExpiryDuration() );
    84c6:	4b1d      	ldr	r3, [pc, #116]	; (853c <PMM_Sleep+0xec>)
    84c8:	4798      	blx	r3
        if ( canSleep && SYSTEM_ReadyToSleep() )
    84ca:	1c43      	adds	r3, r0, #1
    84cc:	d017      	beq.n	84fe <PMM_Sleep+0xae>
    PMM_Status_t status = PMM_SLEEP_REQ_DENIED;
    84ce:	2000      	movs	r0, #0
    84d0:	e7c6      	b.n	8460 <PMM_Sleep+0x10>
            sysSleepTime = SwTimerNextExpiryDuration();
    84d2:	4b1a      	ldr	r3, [pc, #104]	; (853c <PMM_Sleep+0xec>)
    84d4:	4798      	blx	r3
            sysSleepTime = (SWTIMER_INVALID_TIMEOUT == sysSleepTime) ? PMM_SLEEPTIME_MAX_MS : US_TO_MS( sysSleepTime );
    84d6:	1c43      	adds	r3, r0, #1
    84d8:	d00b      	beq.n	84f2 <PMM_Sleep+0xa2>
    84da:	21fa      	movs	r1, #250	; 0xfa
    84dc:	0089      	lsls	r1, r1, #2
    84de:	4b18      	ldr	r3, [pc, #96]	; (8540 <PMM_Sleep+0xf0>)
    84e0:	4798      	blx	r3
    84e2:	0003      	movs	r3, r0
        (PMM_SLEEPTIME_MAX_MS >= durationMs) && \
    84e4:	4a0a      	ldr	r2, [pc, #40]	; (8510 <PMM_Sleep+0xc0>)
    84e6:	1881      	adds	r1, r0, r2
            if ( canSleep && (req->sleepTimeMs < sysSleepTime) )
    84e8:	4a0a      	ldr	r2, [pc, #40]	; (8514 <PMM_Sleep+0xc4>)
    PMM_Status_t status = PMM_SLEEP_REQ_DENIED;
    84ea:	2000      	movs	r0, #0
            if ( canSleep && (req->sleepTimeMs < sysSleepTime) )
    84ec:	4291      	cmp	r1, r2
    84ee:	d8b7      	bhi.n	8460 <PMM_Sleep+0x10>
    84f0:	e000      	b.n	84f4 <PMM_Sleep+0xa4>
            sysSleepTime = (SWTIMER_INVALID_TIMEOUT == sysSleepTime) ? PMM_SLEEPTIME_MAX_MS : US_TO_MS( sysSleepTime );
    84f2:	4b14      	ldr	r3, [pc, #80]	; (8544 <PMM_Sleep+0xf4>)
    84f4:	6825      	ldr	r5, [r4, #0]
    84f6:	429d      	cmp	r5, r3
    84f8:	d9c7      	bls.n	848a <PMM_Sleep+0x3a>
    84fa:	001d      	movs	r5, r3
    84fc:	e7c5      	b.n	848a <PMM_Sleep+0x3a>
            sysSleepTime = req->sleepTimeMs;
    84fe:	6825      	ldr	r5, [r4, #0]
    8500:	e7c3      	b.n	848a <PMM_Sleep+0x3a>
    PMM_Status_t status = PMM_SLEEP_REQ_DENIED;
    8502:	2000      	movs	r0, #0
    8504:	e7ac      	b.n	8460 <PMM_Sleep+0x10>
    8506:	46c0      	nop			; (mov r8, r8)
    8508:	20000c70 	.word	0x20000c70
    850c:	0000f4c5 	.word	0x0000f4c5
    8510:	fffffc18 	.word	0xfffffc18
    8514:	07cebbc8 	.word	0x07cebbc8
    8518:	0000f2cd 	.word	0x0000f2cd
    851c:	00017a1d 	.word	0x00017a1d
    8520:	42031375 	.word	0x42031375
    8524:	000173c5 	.word	0x000173c5
    8528:	00016a95 	.word	0x00016a95
    852c:	000083cd 	.word	0x000083cd
    8530:	00008309 	.word	0x00008309
    8534:	20000c74 	.word	0x20000c74
    8538:	00008279 	.word	0x00008279
    853c:	0000f009 	.word	0x0000f009
    8540:	00016625 	.word	0x00016625
    8544:	07cebfb0 	.word	0x07cebfb0

00008548 <LorawanReg_AS_Pds_Cb>:
}
#if (ENABLE_PDS == 1)
void LorawanReg_AS_Pds_Cb(void)
{
	; // nothing to do
}
    8548:	4770      	bx	lr
	...

0000854c <LORAReg_InitAS>:
{
    854c:	b570      	push	{r4, r5, r6, lr}
    854e:	b086      	sub	sp, #24
	RegParams.TxCurDataRate = MAC_DEF_TX_CURRENT_DATARATE_AS;
    8550:	4b8e      	ldr	r3, [pc, #568]	; (878c <LORAReg_InitAS+0x240>)
    8552:	2103      	movs	r1, #3
    8554:	2226      	movs	r2, #38	; 0x26
    8556:	5499      	strb	r1, [r3, r2]
	RegParams.maxChannels = MAX_CHANNELS_AS;
    8558:	2410      	movs	r4, #16
    855a:	3204      	adds	r2, #4
    855c:	549c      	strb	r4, [r3, r2]
	RegParams.maxSubBands = MAX_NUM_SUBBANDS_AS;
    855e:	3a29      	subs	r2, #41	; 0x29
    8560:	3126      	adds	r1, #38	; 0x26
    8562:	545a      	strb	r2, [r3, r1]
	RegParams.MacTxPower = MAC_DEF_TX_POWER_AS;
    8564:	3902      	subs	r1, #2
    8566:	545a      	strb	r2, [r3, r1]
	RegParams.pChParams = &RegParams.cmnParams.paramsType2.chParams[0];
    8568:	001a      	movs	r2, r3
    856a:	3283      	adds	r2, #131	; 0x83
    856c:	2100      	movs	r1, #0
    856e:	711a      	strb	r2, [r3, #4]
    8570:	0a15      	lsrs	r5, r2, #8
    8572:	715d      	strb	r5, [r3, #5]
    8574:	0c15      	lsrs	r5, r2, #16
    8576:	719d      	strb	r5, [r3, #6]
    8578:	0e12      	lsrs	r2, r2, #24
    857a:	71da      	strb	r2, [r3, #7]
	RegParams.pDrParams = &RegParams.cmnParams.paramsType2.DRParams[0];
    857c:	001a      	movs	r2, r3
    857e:	3243      	adds	r2, #67	; 0x43
    8580:	701a      	strb	r2, [r3, #0]
    8582:	0a15      	lsrs	r5, r2, #8
    8584:	705d      	strb	r5, [r3, #1]
    8586:	0c15      	lsrs	r5, r2, #16
    8588:	709d      	strb	r5, [r3, #2]
    858a:	0e12      	lsrs	r2, r2, #24
    858c:	70da      	strb	r2, [r3, #3]
	RegParams.pOtherChParams = &RegParams.cmnParams.paramsType2.othChParams[0];
    858e:	001a      	movs	r2, r3
    8590:	32a3      	adds	r2, #163	; 0xa3
    8592:	721a      	strb	r2, [r3, #8]
    8594:	0a15      	lsrs	r5, r2, #8
    8596:	725d      	strb	r5, [r3, #9]
    8598:	0c15      	lsrs	r5, r2, #16
    859a:	729d      	strb	r5, [r3, #10]
    859c:	0e12      	lsrs	r2, r2, #24
    859e:	72da      	strb	r2, [r3, #11]
	RegParams.pDutyCycleTimer = &RegParams.cmnParams.paramsType2.DutyCycleTimer;
    85a0:	001a      	movs	r2, r3
    85a2:	3264      	adds	r2, #100	; 0x64
    85a4:	32ff      	adds	r2, #255	; 0xff
    85a6:	741a      	strb	r2, [r3, #16]
    85a8:	0a15      	lsrs	r5, r2, #8
    85aa:	745d      	strb	r5, [r3, #17]
    85ac:	0c15      	lsrs	r5, r2, #16
    85ae:	749d      	strb	r5, [r3, #18]
    85b0:	0e12      	lsrs	r2, r2, #24
    85b2:	74da      	strb	r2, [r3, #19]
	RegParams.pJoinDutyCycleTimer = &RegParams.joinDutyCycleTimer;
    85b4:	001a      	movs	r2, r3
    85b6:	3234      	adds	r2, #52	; 0x34
    85b8:	751a      	strb	r2, [r3, #20]
    85ba:	0a15      	lsrs	r5, r2, #8
    85bc:	755d      	strb	r5, [r3, #21]
    85be:	0c15      	lsrs	r5, r2, #16
    85c0:	759d      	strb	r5, [r3, #22]
    85c2:	0e12      	lsrs	r2, r2, #24
    85c4:	75da      	strb	r2, [r3, #23]
	RegParams.pJoinBackoffTimer = &RegParams.joinBackoffTimer;
    85c6:	001a      	movs	r2, r3
    85c8:	323d      	adds	r2, #61	; 0x3d
    85ca:	761a      	strb	r2, [r3, #24]
    85cc:	0a15      	lsrs	r5, r2, #8
    85ce:	765d      	strb	r5, [r3, #25]
    85d0:	0c15      	lsrs	r5, r2, #16
    85d2:	769d      	strb	r5, [r3, #26]
    85d4:	0e12      	lsrs	r2, r2, #24
    85d6:	76da      	strb	r2, [r3, #27]
	RegParams.pSubBandParams = &RegParams.cmnParams.paramsType2.SubBands[0];
    85d8:	001a      	movs	r2, r3
    85da:	32c4      	adds	r2, #196	; 0xc4
    85dc:	32ff      	adds	r2, #255	; 0xff
    85de:	731a      	strb	r2, [r3, #12]
    85e0:	0a15      	lsrs	r5, r2, #8
    85e2:	735d      	strb	r5, [r3, #13]
    85e4:	0c15      	lsrs	r5, r2, #16
    85e6:	739d      	strb	r5, [r3, #14]
    85e8:	0e12      	lsrs	r2, r2, #24
    85ea:	73da      	strb	r2, [r3, #15]
	RegParams.DefRx1DataRate = MAC_RX1_WINDOW_DATARATE_AS;
    85ec:	2202      	movs	r2, #2
    85ee:	2522      	movs	r5, #34	; 0x22
    85f0:	555a      	strb	r2, [r3, r5]
	RegParams.DefRx2DataRate = MAC_RX2_WINDOW_DATARATE_AS;
    85f2:	3501      	adds	r5, #1
    85f4:	555a      	strb	r2, [r3, r5]
	RegParams.DefRx2Freq = MAC_RX2_WINDOW_FREQ_AS;	
    85f6:	2500      	movs	r5, #0
    85f8:	771d      	strb	r5, [r3, #28]
    85fa:	3d16      	subs	r5, #22
    85fc:	775d      	strb	r5, [r3, #29]
    85fe:	351c      	adds	r5, #28
    8600:	779d      	strb	r5, [r3, #30]
    8602:	3531      	adds	r5, #49	; 0x31
    8604:	77dd      	strb	r5, [r3, #31]
	RegParams.MinNewChIndex = NEW_CHANNEL_INDEX_AS;
    8606:	3d16      	subs	r5, #22
    8608:	555a      	strb	r2, [r3, r5]
	RegParams.FeaturesSupport = FEATURES_SUPPORTED_AS;
    860a:	2632      	movs	r6, #50	; 0x32
    860c:	3d01      	subs	r5, #1
    860e:	555e      	strb	r6, [r3, r5]
	RegParams.minDataRate = MAC_DATARATE_MIN_AS;
    8610:	3d19      	subs	r5, #25
    8612:	3e0e      	subs	r6, #14
    8614:	559d      	strb	r5, [r3, r6]
	RegParams.maxDataRate = MAC_DATARATE_MAX_AS;
    8616:	3601      	adds	r6, #1
    8618:	5599      	strb	r1, [r3, r6]
	RegParams.Rx1DrOffset = 7;
    861a:	3607      	adds	r6, #7
    861c:	559d      	strb	r5, [r3, r6]
	RegParams.maxTxPwrIndx = MAX_TX_PWR_INDEX_AS;
    861e:	3601      	adds	r6, #1
    8620:	559d      	strb	r5, [r3, r6]
	RegParams.maxTxPwr = DEFAULT_EIRP_AS;
    8622:	3521      	adds	r5, #33	; 0x21
    8624:	555c      	strb	r4, [r3, r5]
	RegParams.cmnParams.paramsType2.minNonDefChId = 2;
    8626:	34b1      	adds	r4, #177	; 0xb1
    8628:	34ff      	adds	r4, #255	; 0xff
    862a:	551a      	strb	r2, [r3, r4]
	RegParams.pDutyCycleTimer->timerId = regTimerId[0];
    862c:	4a58      	ldr	r2, [pc, #352]	; (8790 <LORAReg_InitAS+0x244>)
    862e:	7815      	ldrb	r5, [r2, #0]
    8630:	2468      	movs	r4, #104	; 0x68
    8632:	34ff      	adds	r4, #255	; 0xff
    8634:	551d      	strb	r5, [r3, r4]
	RegParams.pJoinBackoffTimer->timerId = regTimerId[1];
    8636:	7855      	ldrb	r5, [r2, #1]
    8638:	3c2b      	subs	r4, #43	; 0x2b
    863a:	3cff      	subs	r4, #255	; 0xff
    863c:	551d      	strb	r5, [r3, r4]
    RegParams.pJoinDutyCycleTimer->timerId = regTimerId[2];
    863e:	7894      	ldrb	r4, [r2, #2]
    8640:	223c      	movs	r2, #60	; 0x3c
    8642:	549c      	strb	r4, [r3, r2]
	RegParams.pJoinDutyCycleTimer->remainingtime = 0;
    8644:	2400      	movs	r4, #0
    8646:	3a04      	subs	r2, #4
    8648:	549c      	strb	r4, [r3, r2]
    864a:	3201      	adds	r2, #1
    864c:	549c      	strb	r4, [r3, r2]
    864e:	3201      	adds	r2, #1
    8650:	549c      	strb	r4, [r3, r2]
    8652:	3201      	adds	r2, #1
    8654:	549c      	strb	r4, [r3, r2]
	RegParams.joinbccount =0;
    8656:	3207      	adds	r2, #7
    8658:	5499      	strb	r1, [r3, r2]
	RegParams.joinDutyCycleTimeout =0;
    865a:	001a      	movs	r2, r3
    865c:	323e      	adds	r2, #62	; 0x3e
    865e:	7011      	strb	r1, [r2, #0]
    8660:	7051      	strb	r1, [r2, #1]
    8662:	7091      	strb	r1, [r2, #2]
    8664:	70d1      	strb	r1, [r2, #3]
	RegParams.cmnParams.paramsType2.txParams.uplinkDwellTime = 1;
    8666:	31c3      	adds	r1, #195	; 0xc3
    8668:	31ff      	adds	r1, #255	; 0xff
    866a:	5c5a      	ldrb	r2, [r3, r1]
    866c:	2401      	movs	r4, #1
    866e:	4322      	orrs	r2, r4
	RegParams.cmnParams.paramsType2.txParams.downlinkDwellTime = 1;
    8670:	2402      	movs	r4, #2
    8672:	4322      	orrs	r2, r4
    8674:	545a      	strb	r2, [r3, r1]
	RegParams.band = ismBand;
    8676:	222e      	movs	r2, #46	; 0x2e
    8678:	5498      	strb	r0, [r3, r2]
	if(ismBand >= ISM_BRN923 && ismBand <= ISM_VTM923)
    867a:	3806      	subs	r0, #6
		result =  LORAWAN_INVALID_PARAMETER;
    867c:	240a      	movs	r4, #10
	if(ismBand >= ISM_BRN923 && ismBand <= ISM_VTM923)
    867e:	2808      	cmp	r0, #8
    8680:	d91a      	bls.n	86b8 <LORAReg_InitAS+0x16c>
	if(!initialized)
    8682:	4b44      	ldr	r3, [pc, #272]	; (8794 <LORAReg_InitAS+0x248>)
    8684:	781b      	ldrb	r3, [r3, #0]
    8686:	2b00      	cmp	r3, #0
    8688:	d102      	bne.n	8690 <LORAReg_InitAS+0x144>
		initialized = true;
    868a:	2201      	movs	r2, #1
    868c:	4b41      	ldr	r3, [pc, #260]	; (8794 <LORAReg_InitAS+0x248>)
    868e:	701a      	strb	r2, [r3, #0]
    LORAREG_InitGetAttrFnPtrsAS();	
    8690:	4b41      	ldr	r3, [pc, #260]	; (8798 <LORAReg_InitAS+0x24c>)
    8692:	4798      	blx	r3
	LORAREG_InitValidateAttrFnPtrsAS();
    8694:	4b41      	ldr	r3, [pc, #260]	; (879c <LORAReg_InitAS+0x250>)
    8696:	4798      	blx	r3
	LORAREG_InitSetAttrFnPtrsAS();
    8698:	4b41      	ldr	r3, [pc, #260]	; (87a0 <LORAReg_InitAS+0x254>)
    869a:	4798      	blx	r3
	PDS_STORE(RegParams.regParamItems.band_item_id);
    869c:	4b3b      	ldr	r3, [pc, #236]	; (878c <LORAReg_InitAS+0x240>)
    869e:	4a41      	ldr	r2, [pc, #260]	; (87a4 <LORAReg_InitAS+0x258>)
    86a0:	5c9a      	ldrb	r2, [r3, r2]
    86a2:	4941      	ldr	r1, [pc, #260]	; (87a8 <LORAReg_InitAS+0x25c>)
    86a4:	5c58      	ldrb	r0, [r3, r1]
    86a6:	0200      	lsls	r0, r0, #8
    86a8:	4310      	orrs	r0, r2
    86aa:	b2c1      	uxtb	r1, r0
    86ac:	0a00      	lsrs	r0, r0, #8
    86ae:	4b3f      	ldr	r3, [pc, #252]	; (87ac <LORAReg_InitAS+0x260>)
    86b0:	4798      	blx	r3
}
    86b2:	0020      	movs	r0, r4
    86b4:	b006      	add	sp, #24
    86b6:	bd70      	pop	{r4, r5, r6, pc}
	memcpy (RegParams.pChParams, DefaultChannels923, sizeof(DefaultChannels923));
    86b8:	001c      	movs	r4, r3
    86ba:	0018      	movs	r0, r3
    86bc:	3083      	adds	r0, #131	; 0x83
    86be:	3a2a      	subs	r2, #42	; 0x2a
    86c0:	493b      	ldr	r1, [pc, #236]	; (87b0 <LORAReg_InitAS+0x264>)
    86c2:	4d3c      	ldr	r5, [pc, #240]	; (87b4 <LORAReg_InitAS+0x268>)
    86c4:	47a8      	blx	r5
	memcpy (RegParams.pOtherChParams, AdvChannels923, sizeof(AdvChannels923));
    86c6:	0020      	movs	r0, r4
    86c8:	30a3      	adds	r0, #163	; 0xa3
    86ca:	2218      	movs	r2, #24
    86cc:	493a      	ldr	r1, [pc, #232]	; (87b8 <LORAReg_InitAS+0x26c>)
    86ce:	47a8      	blx	r5
	memcpy (RegParams.pSubBandParams, SubBandParams923, sizeof(SubBandParams923) );
    86d0:	0020      	movs	r0, r4
    86d2:	30c4      	adds	r0, #196	; 0xc4
    86d4:	30ff      	adds	r0, #255	; 0xff
    86d6:	220c      	movs	r2, #12
    86d8:	4938      	ldr	r1, [pc, #224]	; (87bc <LORAReg_InitAS+0x270>)
    86da:	47a8      	blx	r5
	memcpy(RegParams.cmnParams.paramsType2.subBandDutyCycle,SubBandDutyCycle923,sizeof(SubBandDutyCycle923));
    86dc:	0020      	movs	r0, r4
    86de:	30ae      	adds	r0, #174	; 0xae
    86e0:	30ff      	adds	r0, #255	; 0xff
    86e2:	2202      	movs	r2, #2
    86e4:	4936      	ldr	r1, [pc, #216]	; (87c0 <LORAReg_InitAS+0x274>)
    86e6:	47a8      	blx	r5
    86e8:	2302      	movs	r3, #2
		RegParams.pChParams[i].dataRange.value = UINT8_MAX;
    86ea:	4828      	ldr	r0, [pc, #160]	; (878c <LORAReg_InitAS+0x240>)
    86ec:	25ff      	movs	r5, #255	; 0xff
	for (i = 2; i < RegParams.maxChannels; i++)
    86ee:	242a      	movs	r4, #42	; 0x2a
		RegParams.pChParams[i].dataRange.value = UINT8_MAX;
    86f0:	7902      	ldrb	r2, [r0, #4]
    86f2:	7941      	ldrb	r1, [r0, #5]
    86f4:	0209      	lsls	r1, r1, #8
    86f6:	4311      	orrs	r1, r2
    86f8:	7982      	ldrb	r2, [r0, #6]
    86fa:	0412      	lsls	r2, r2, #16
    86fc:	4311      	orrs	r1, r2
    86fe:	79c2      	ldrb	r2, [r0, #7]
    8700:	0612      	lsls	r2, r2, #24
    8702:	430a      	orrs	r2, r1
    8704:	0059      	lsls	r1, r3, #1
    8706:	188a      	adds	r2, r1, r2
    8708:	7055      	strb	r5, [r2, #1]
	for (i = 2; i < RegParams.maxChannels; i++)
    870a:	3301      	adds	r3, #1
    870c:	b2db      	uxtb	r3, r3
    870e:	5702      	ldrsb	r2, [r0, r4]
    8710:	4293      	cmp	r3, r2
    8712:	dbed      	blt.n	86f0 <LORAReg_InitAS+0x1a4>
		RegParams.cmnParams.paramsType2.txParams.maxEIRP = DEFAULT_EIRP_AS;
    8714:	4c1d      	ldr	r4, [pc, #116]	; (878c <LORAReg_InitAS+0x240>)
    8716:	2210      	movs	r2, #16
    8718:	23c2      	movs	r3, #194	; 0xc2
    871a:	33ff      	adds	r3, #255	; 0xff
    871c:	54e2      	strb	r2, [r4, r3]
		memcpy (RegParams.pDrParams, DefaultDrParamsAS, sizeof(DefaultDrParamsAS) );
    871e:	7820      	ldrb	r0, [r4, #0]
    8720:	7863      	ldrb	r3, [r4, #1]
    8722:	021b      	lsls	r3, r3, #8
    8724:	4303      	orrs	r3, r0
    8726:	78a0      	ldrb	r0, [r4, #2]
    8728:	0400      	lsls	r0, r0, #16
    872a:	4303      	orrs	r3, r0
    872c:	78e0      	ldrb	r0, [r4, #3]
    872e:	0600      	lsls	r0, r0, #24
    8730:	4318      	orrs	r0, r3
    8732:	3230      	adds	r2, #48	; 0x30
    8734:	4923      	ldr	r1, [pc, #140]	; (87c4 <LORAReg_InitAS+0x278>)
    8736:	4b1f      	ldr	r3, [pc, #124]	; (87b4 <LORAReg_InitAS+0x268>)
    8738:	4798      	blx	r3
		RegParams.regParamItems.fileid = PDS_FILE_REG_AS_05_IDX;
    873a:	2304      	movs	r3, #4
    873c:	2104      	movs	r1, #4
    873e:	4a22      	ldr	r2, [pc, #136]	; (87c8 <LORAReg_InitAS+0x27c>)
    8740:	54a1      	strb	r1, [r4, r2]
		RegParams.regParamItems.ch_param_1_item_id = PDS_REG_AS_CH_PARAM_1;
    8742:	2100      	movs	r1, #0
    8744:	4a21      	ldr	r2, [pc, #132]	; (87cc <LORAReg_InitAS+0x280>)
    8746:	54a1      	strb	r1, [r4, r2]
    8748:	18a2      	adds	r2, r4, r2
    874a:	7053      	strb	r3, [r2, #1]
		RegParams.regParamItems.ch_param_2_item_id = PDS_REG_AS_CH_PARAM_2;
    874c:	3101      	adds	r1, #1
    874e:	2284      	movs	r2, #132	; 0x84
    8750:	0092      	lsls	r2, r2, #2
    8752:	54a1      	strb	r1, [r4, r2]
    8754:	18a2      	adds	r2, r4, r2
    8756:	7053      	strb	r3, [r2, #1]
		RegParams.regParamItems.band_item_id = PDS_REG_AS_BAND;
    8758:	3101      	adds	r1, #1
    875a:	4a12      	ldr	r2, [pc, #72]	; (87a4 <LORAReg_InitAS+0x258>)
    875c:	54a1      	strb	r1, [r4, r2]
    875e:	18a2      	adds	r2, r4, r2
    8760:	7053      	strb	r3, [r2, #1]
		RegParams.regParamItems.lastUsedSB = 0;
    8762:	2200      	movs	r2, #0
    8764:	2383      	movs	r3, #131	; 0x83
    8766:	009b      	lsls	r3, r3, #2
    8768:	54e2      	strb	r2, [r4, r3]
    876a:	469c      	mov	ip, r3
    876c:	4464      	add	r4, ip
    876e:	2300      	movs	r3, #0
    8770:	7063      	strb	r3, [r4, #1]
		filemarks.fileMarkListAddr = aRegAsPdsOps;
    8772:	ab02      	add	r3, sp, #8
		filemarks.numItems =  (uint8_t)(PDS_REG_AS_MAX_VALUE & 0x00FF);
    8774:	3203      	adds	r2, #3
    8776:	711a      	strb	r2, [r3, #4]
		filemarks.fIDcb = LorawanReg_AS_Pds_Cb;
    8778:	4a15      	ldr	r2, [pc, #84]	; (87d0 <LORAReg_InitAS+0x284>)
		PDS_RegFile(PDS_FILE_REG_AS_05_IDX,filemarks);
    877a:	9200      	str	r2, [sp, #0]
    877c:	4915      	ldr	r1, [pc, #84]	; (87d4 <LORAReg_InitAS+0x288>)
    877e:	9a03      	ldr	r2, [sp, #12]
    8780:	4b15      	ldr	r3, [pc, #84]	; (87d8 <LORAReg_InitAS+0x28c>)
    8782:	2004      	movs	r0, #4
    8784:	4c15      	ldr	r4, [pc, #84]	; (87dc <LORAReg_InitAS+0x290>)
    8786:	47a0      	blx	r4
	StackRetStatus_t result = LORAWAN_SUCCESS;
    8788:	2408      	movs	r4, #8
    878a:	e77a      	b.n	8682 <LORAReg_InitAS+0x136>
    878c:	200024d0 	.word	0x200024d0
    8790:	200024cc 	.word	0x200024cc
    8794:	20000c78 	.word	0x20000c78
    8798:	0000cce1 	.word	0x0000cce1
    879c:	0000d411 	.word	0x0000d411
    87a0:	0000d6e5 	.word	0x0000d6e5
    87a4:	00000212 	.word	0x00000212
    87a8:	00000213 	.word	0x00000213
    87ac:	0000e0dd 	.word	0x0000e0dd
    87b0:	0001fc90 	.word	0x0001fc90
    87b4:	00019d89 	.word	0x00019d89
    87b8:	0001fc78 	.word	0x0001fc78
    87bc:	0001fcd8 	.word	0x0001fcd8
    87c0:	0001fcd4 	.word	0x0001fcd4
    87c4:	0001fc94 	.word	0x0001fc94
    87c8:	0000020b 	.word	0x0000020b
    87cc:	0000020e 	.word	0x0000020e
    87d0:	00008549 	.word	0x00008549
    87d4:	200022ac 	.word	0x200022ac
    87d8:	0001fce4 	.word	0x0001fce4
    87dc:	0000e3c1 	.word	0x0000e3c1

000087e0 <LorawanReg_AU_Pds_Cb>:
}
#if (ENABLE_PDS == 1)
void LorawanReg_AU_Pds_Cb(void)
{
	
}
    87e0:	4770      	bx	lr
	...

000087e4 <LORAReg_InitAU>:
{
    87e4:	b5f0      	push	{r4, r5, r6, r7, lr}
    87e6:	46de      	mov	lr, fp
    87e8:	4657      	mov	r7, sl
    87ea:	464e      	mov	r6, r9
    87ec:	4645      	mov	r5, r8
    87ee:	b5e0      	push	{r5, r6, r7, lr}
    87f0:	b087      	sub	sp, #28
    87f2:	4683      	mov	fp, r0
    RegParams.TxCurDataRate = MAC_DEF_TX_CURRENT_DATARATE_AU;
    87f4:	4c83      	ldr	r4, [pc, #524]	; (8a04 <LORAReg_InitAU+0x220>)
    87f6:	2103      	movs	r1, #3
    87f8:	2326      	movs	r3, #38	; 0x26
    87fa:	54e1      	strb	r1, [r4, r3]
	RegParams.maxChannels = MAX_CHANNELS_AU_NA;
    87fc:	3145      	adds	r1, #69	; 0x45
    87fe:	3304      	adds	r3, #4
    8800:	54e1      	strb	r1, [r4, r3]
	RegParams.MacTxPower = MAC_DEF_TX_POWER_AU;
    8802:	3941      	subs	r1, #65	; 0x41
    8804:	3b03      	subs	r3, #3
    8806:	54e1      	strb	r1, [r4, r3]
	RegParams.pChParams = &RegParams.cmnParams.paramsType1.chParams[0];
    8808:	0020      	movs	r0, r4
    880a:	30b3      	adds	r0, #179	; 0xb3
    880c:	2600      	movs	r6, #0
    880e:	7120      	strb	r0, [r4, #4]
    8810:	0a03      	lsrs	r3, r0, #8
    8812:	7163      	strb	r3, [r4, #5]
    8814:	0c03      	lsrs	r3, r0, #16
    8816:	71a3      	strb	r3, [r4, #6]
    8818:	0e03      	lsrs	r3, r0, #24
    881a:	71e3      	strb	r3, [r4, #7]
	RegParams.pDrParams = &RegParams.cmnParams.paramsType1.DRParams[0];
    881c:	2343      	movs	r3, #67	; 0x43
    881e:	4698      	mov	r8, r3
    8820:	44a0      	add	r8, r4
    8822:	4643      	mov	r3, r8
    8824:	7023      	strb	r3, [r4, #0]
    8826:	4643      	mov	r3, r8
    8828:	0a1b      	lsrs	r3, r3, #8
    882a:	7063      	strb	r3, [r4, #1]
    882c:	4643      	mov	r3, r8
    882e:	0c1b      	lsrs	r3, r3, #16
    8830:	70a3      	strb	r3, [r4, #2]
    8832:	4643      	mov	r3, r8
    8834:	0e1b      	lsrs	r3, r3, #24
    8836:	70e3      	strb	r3, [r4, #3]
	RegParams.MinNewChIndex = 0xFF;
    8838:	2321      	movs	r3, #33	; 0x21
    883a:	31f8      	adds	r1, #248	; 0xf8
    883c:	54e1      	strb	r1, [r4, r3]
	RegParams.DefRx1DataRate = MAC_RX1_WINDOW_DATARATE_AU;
    883e:	2508      	movs	r5, #8
    8840:	2708      	movs	r7, #8
    8842:	3301      	adds	r3, #1
    8844:	54e5      	strb	r5, [r4, r3]
	RegParams.DefRx2DataRate = MAC_RX2_WINDOW_DATARATE_AU;
    8846:	3301      	adds	r3, #1
    8848:	54e5      	strb	r5, [r4, r3]
	RegParams.DefRx2Freq = MAC_RX2_WINDOW_FREQ_AU;
    884a:	3b83      	subs	r3, #131	; 0x83
    884c:	469c      	mov	ip, r3
    884e:	7723      	strb	r3, [r4, #28]
    8850:	2370      	movs	r3, #112	; 0x70
    8852:	7763      	strb	r3, [r4, #29]
    8854:	77a7      	strb	r7, [r4, #30]
    8856:	3b39      	subs	r3, #57	; 0x39
    8858:	77e3      	strb	r3, [r4, #31]
	RegParams.FeaturesSupport = FEATURES_SUPPORTED_AU;
    885a:	39c7      	subs	r1, #199	; 0xc7
    885c:	3b17      	subs	r3, #23
    885e:	54e1      	strb	r1, [r4, r3]
	RegParams.minDataRate = MAC_DATARATE_MIN_AU;
    8860:	2224      	movs	r2, #36	; 0x24
    8862:	3b1a      	subs	r3, #26
    8864:	54a3      	strb	r3, [r4, r2]
	RegParams.maxDataRate = MAC_DATARATE_MAX_AU;
    8866:	3201      	adds	r2, #1
    8868:	54a6      	strb	r6, [r4, r2]
	RegParams.cmnParams.paramsType1.Max_125khzChan = MAX_CHANNELS_BANDWIDTH_125_AU_NA;
    886a:	321b      	adds	r2, #27
    886c:	4692      	mov	sl, r2
    886e:	2254      	movs	r2, #84	; 0x54
    8870:	32ff      	adds	r2, #255	; 0xff
    8872:	4653      	mov	r3, sl
    8874:	54a3      	strb	r3, [r4, r2]
	RegParams.cmnParams.paramsType1.Max_500khzChan = MAX_CHANNELS_BANDWIDTH_500_AU_NA;
    8876:	23aa      	movs	r3, #170	; 0xaa
    8878:	005b      	lsls	r3, r3, #1
    887a:	54e5      	strb	r5, [r4, r3]
	RegParams.cmnParams.paramsType1.minTxDR = DR0;
    887c:	2350      	movs	r3, #80	; 0x50
    887e:	33ff      	adds	r3, #255	; 0xff
    8880:	54e6      	strb	r6, [r4, r3]
	RegParams.cmnParams.paramsType1.maxTxDR = DR6;
    8882:	3301      	adds	r3, #1
    8884:	3a4e      	subs	r2, #78	; 0x4e
    8886:	3aff      	subs	r2, #255	; 0xff
    8888:	54e2      	strb	r2, [r4, r3]
	RegParams.cmnParams.paramsType1.minRxDR = DR8;
    888a:	2352      	movs	r3, #82	; 0x52
    888c:	33ff      	adds	r3, #255	; 0xff
    888e:	54e5      	strb	r5, [r4, r3]
	RegParams.cmnParams.paramsType1.maxRxDR = DR13;
    8890:	3b45      	subs	r3, #69	; 0x45
    8892:	3bff      	subs	r3, #255	; 0xff
    8894:	4699      	mov	r9, r3
    8896:	3346      	adds	r3, #70	; 0x46
    8898:	33ff      	adds	r3, #255	; 0xff
    889a:	464a      	mov	r2, r9
    889c:	54e2      	strb	r2, [r4, r3]
	RegParams.cmnParams.paramsType1.RxParamWindowOffset1 = 8;
    889e:	2356      	movs	r3, #86	; 0x56
    88a0:	33ff      	adds	r3, #255	; 0xff
    88a2:	54e5      	strb	r5, [r4, r3]
	RegParams.cmnParams.paramsType1.UpStreamCh0Freq = UPSTREAM_CH0_AU;
    88a4:	2300      	movs	r3, #0
    88a6:	4699      	mov	r9, r3
    88a8:	2344      	movs	r3, #68	; 0x44
    88aa:	33ff      	adds	r3, #255	; 0xff
    88ac:	464a      	mov	r2, r9
    88ae:	54e2      	strb	r2, [r4, r3]
    88b0:	0023      	movs	r3, r4
    88b2:	3344      	adds	r3, #68	; 0x44
    88b4:	33ff      	adds	r3, #255	; 0xff
    88b6:	2228      	movs	r2, #40	; 0x28
    88b8:	4252      	negs	r2, r2
    88ba:	705a      	strb	r2, [r3, #1]
    88bc:	2274      	movs	r2, #116	; 0x74
    88be:	4252      	negs	r2, r2
    88c0:	709a      	strb	r2, [r3, #2]
    88c2:	2236      	movs	r2, #54	; 0x36
    88c4:	70da      	strb	r2, [r3, #3]
	RegParams.cmnParams.paramsType1.UpStreamCh64Freq = UPSTREAM_CH64_AU;
    88c6:	2360      	movs	r3, #96	; 0x60
    88c8:	4699      	mov	r9, r3
    88ca:	2348      	movs	r3, #72	; 0x48
    88cc:	33ff      	adds	r3, #255	; 0xff
    88ce:	464a      	mov	r2, r9
    88d0:	54e2      	strb	r2, [r4, r3]
    88d2:	0023      	movs	r3, r4
    88d4:	3348      	adds	r3, #72	; 0x48
    88d6:	33ff      	adds	r3, #255	; 0xff
    88d8:	227a      	movs	r2, #122	; 0x7a
    88da:	4252      	negs	r2, r2
    88dc:	705a      	strb	r2, [r3, #1]
    88de:	2269      	movs	r2, #105	; 0x69
    88e0:	4252      	negs	r2, r2
    88e2:	709a      	strb	r2, [r3, #2]
    88e4:	2236      	movs	r2, #54	; 0x36
    88e6:	70da      	strb	r2, [r3, #3]
	RegParams.cmnParams.paramsType1.DownStreamCh0Freq = DOWNSTREAM_CH0_AU;
    88e8:	234c      	movs	r3, #76	; 0x4c
    88ea:	33ff      	adds	r3, #255	; 0xff
    88ec:	4662      	mov	r2, ip
    88ee:	54e2      	strb	r2, [r4, r3]
    88f0:	0023      	movs	r3, r4
    88f2:	334c      	adds	r3, #76	; 0x4c
    88f4:	33ff      	adds	r3, #255	; 0xff
    88f6:	2270      	movs	r2, #112	; 0x70
    88f8:	705a      	strb	r2, [r3, #1]
    88fa:	709f      	strb	r7, [r3, #2]
    88fc:	2237      	movs	r2, #55	; 0x37
    88fe:	70da      	strb	r2, [r3, #3]
    RegParams.pJoinDutyCycleTimer = &RegParams.joinDutyCycleTimer;
    8900:	0023      	movs	r3, r4
    8902:	3334      	adds	r3, #52	; 0x34
    8904:	7523      	strb	r3, [r4, #20]
    8906:	0a1a      	lsrs	r2, r3, #8
    8908:	7562      	strb	r2, [r4, #21]
    890a:	0c1a      	lsrs	r2, r3, #16
    890c:	75a2      	strb	r2, [r4, #22]
    890e:	0e1b      	lsrs	r3, r3, #24
    8910:	75e3      	strb	r3, [r4, #23]
	RegParams.pJoinBackoffTimer = &RegParams.joinBackoffTimer;
    8912:	0023      	movs	r3, r4
    8914:	333d      	adds	r3, #61	; 0x3d
    8916:	7623      	strb	r3, [r4, #24]
    8918:	0a1a      	lsrs	r2, r3, #8
    891a:	7662      	strb	r2, [r4, #25]
    891c:	0c1a      	lsrs	r2, r3, #16
    891e:	76a2      	strb	r2, [r4, #26]
    8920:	0e1b      	lsrs	r3, r3, #24
    8922:	76e3      	strb	r3, [r4, #27]
    RegParams.Rx1DrOffset = 5;
    8924:	2305      	movs	r3, #5
    8926:	469c      	mov	ip, r3
    8928:	3327      	adds	r3, #39	; 0x27
    892a:	4662      	mov	r2, ip
    892c:	54e2      	strb	r2, [r4, r3]
	RegParams.maxTxPwrIndx = 10;
    892e:	3b22      	subs	r3, #34	; 0x22
    8930:	469c      	mov	ip, r3
    8932:	3323      	adds	r3, #35	; 0x23
    8934:	4662      	mov	r2, ip
    8936:	54e2      	strb	r2, [r4, r3]
	RegParams.maxTxPwr = DEFAULT_EIRP_AU;
    8938:	3b0f      	subs	r3, #15
    893a:	469c      	mov	ip, r3
    893c:	330a      	adds	r3, #10
    893e:	4662      	mov	r2, ip
    8940:	54e2      	strb	r2, [r4, r3]
	RegParams.cmnParams.paramsType1.lastUsedSB = 0;
    8942:	2358      	movs	r3, #88	; 0x58
    8944:	33ff      	adds	r3, #255	; 0xff
    8946:	54e6      	strb	r6, [r4, r3]
	RegParams.pJoinBackoffTimer->timerId = regTimerId[0];	
    8948:	4b2f      	ldr	r3, [pc, #188]	; (8a08 <LORAReg_InitAU+0x224>)
    894a:	469a      	mov	sl, r3
    894c:	781a      	ldrb	r2, [r3, #0]
    894e:	4691      	mov	r9, r2
    8950:	223d      	movs	r2, #61	; 0x3d
    8952:	464b      	mov	r3, r9
    8954:	54a3      	strb	r3, [r4, r2]
	RegParams.pJoinDutyCycleTimer->timerId = regTimerId[1];
    8956:	4653      	mov	r3, sl
    8958:	785b      	ldrb	r3, [r3, #1]
    895a:	469c      	mov	ip, r3
    895c:	233c      	movs	r3, #60	; 0x3c
    895e:	4662      	mov	r2, ip
    8960:	54e2      	strb	r2, [r4, r3]
	RegParams.pJoinDutyCycleTimer->remainingtime = 0;
    8962:	2300      	movs	r3, #0
    8964:	5463      	strb	r3, [r4, r1]
    8966:	2100      	movs	r1, #0
    8968:	3339      	adds	r3, #57	; 0x39
    896a:	54e1      	strb	r1, [r4, r3]
    896c:	3301      	adds	r3, #1
    896e:	54e1      	strb	r1, [r4, r3]
    8970:	3301      	adds	r3, #1
    8972:	54e1      	strb	r1, [r4, r3]
	RegParams.joinbccount =0;
    8974:	3307      	adds	r3, #7
    8976:	54e6      	strb	r6, [r4, r3]
	RegParams.joinDutyCycleTimeout =0;
    8978:	0023      	movs	r3, r4
    897a:	333e      	adds	r3, #62	; 0x3e
    897c:	7019      	strb	r1, [r3, #0]
    897e:	7059      	strb	r1, [r3, #1]
    8980:	7099      	strb	r1, [r3, #2]
    8982:	70d9      	strb	r1, [r3, #3]
	RegParams.band = ismBand;
    8984:	232e      	movs	r3, #46	; 0x2e
    8986:	465a      	mov	r2, fp
    8988:	54e2      	strb	r2, [r4, r3]
	memcpy (RegParams.pChParams, DefaultChannels915AU, sizeof(DefaultChannels915AU) );
    898a:	2290      	movs	r2, #144	; 0x90
    898c:	491f      	ldr	r1, [pc, #124]	; (8a0c <LORAReg_InitAU+0x228>)
    898e:	4b20      	ldr	r3, [pc, #128]	; (8a10 <LORAReg_InitAU+0x22c>)
    8990:	4699      	mov	r9, r3
    8992:	4798      	blx	r3
	memcpy (RegParams.pDrParams, DefaultDrParamsAU, sizeof(DefaultDrParamsAU) );
    8994:	2270      	movs	r2, #112	; 0x70
    8996:	491f      	ldr	r1, [pc, #124]	; (8a14 <LORAReg_InitAU+0x230>)
    8998:	4640      	mov	r0, r8
    899a:	47c8      	blx	r9
	RegParams.cmnParams.paramsType1.alternativeChannel = 0;
    899c:	23ab      	movs	r3, #171	; 0xab
    899e:	005b      	lsls	r3, r3, #1
    89a0:	54e6      	strb	r6, [r4, r3]
	RegParams.regParamItems.fileid = PDS_FILE_REG_AU_09_IDX;
    89a2:	4b1d      	ldr	r3, [pc, #116]	; (8a18 <LORAReg_InitAU+0x234>)
    89a4:	54e5      	strb	r5, [r4, r3]
	RegParams.regParamItems.ch_param_1_item_id = PDS_REG_AU_CH_PARAM;
    89a6:	2200      	movs	r2, #0
    89a8:	4b1c      	ldr	r3, [pc, #112]	; (8a1c <LORAReg_InitAU+0x238>)
    89aa:	54e2      	strb	r2, [r4, r3]
    89ac:	18e3      	adds	r3, r4, r3
    89ae:	705f      	strb	r7, [r3, #1]
	RegParams.regParamItems.ch_param_2_item_id = 0;
    89b0:	2384      	movs	r3, #132	; 0x84
    89b2:	009b      	lsls	r3, r3, #2
    89b4:	54e2      	strb	r2, [r4, r3]
    89b6:	18e3      	adds	r3, r4, r3
    89b8:	705a      	strb	r2, [r3, #1]
	RegParams.regParamItems.band_item_id = 0;
    89ba:	4b19      	ldr	r3, [pc, #100]	; (8a20 <LORAReg_InitAU+0x23c>)
    89bc:	54e2      	strb	r2, [r4, r3]
    89be:	18e3      	adds	r3, r4, r3
    89c0:	705a      	strb	r2, [r3, #1]
	RegParams.regParamItems.lastUsedSB = PDS_REG_AU_LAST_USED_SB;
    89c2:	3201      	adds	r2, #1
    89c4:	2383      	movs	r3, #131	; 0x83
    89c6:	009b      	lsls	r3, r3, #2
    89c8:	54e2      	strb	r2, [r4, r3]
    89ca:	469c      	mov	ip, r3
    89cc:	4464      	add	r4, ip
    89ce:	7067      	strb	r7, [r4, #1]
	filemarks.fileMarkListAddr = aRegAuPdsOps;
    89d0:	ab02      	add	r3, sp, #8
	filemarks.numItems =  (uint8_t)(PDS_REG_AU_MAX_VALUE & 0x00FF);
    89d2:	3201      	adds	r2, #1
    89d4:	711a      	strb	r2, [r3, #4]
	filemarks.fIDcb = LorawanReg_AU_Pds_Cb;
    89d6:	4a13      	ldr	r2, [pc, #76]	; (8a24 <LORAReg_InitAU+0x240>)
	PDS_RegFile(PDS_FILE_REG_AU_09_IDX,filemarks);
    89d8:	9200      	str	r2, [sp, #0]
    89da:	4913      	ldr	r1, [pc, #76]	; (8a28 <LORAReg_InitAU+0x244>)
    89dc:	9a03      	ldr	r2, [sp, #12]
    89de:	4b13      	ldr	r3, [pc, #76]	; (8a2c <LORAReg_InitAU+0x248>)
    89e0:	2008      	movs	r0, #8
    89e2:	4c13      	ldr	r4, [pc, #76]	; (8a30 <LORAReg_InitAU+0x24c>)
    89e4:	47a0      	blx	r4
    LORAREG_InitGetAttrFnPtrsAU();
    89e6:	4b13      	ldr	r3, [pc, #76]	; (8a34 <LORAReg_InitAU+0x250>)
    89e8:	4798      	blx	r3
	LORAREG_InitValidateAttrFnPtrsAU();
    89ea:	4b13      	ldr	r3, [pc, #76]	; (8a38 <LORAReg_InitAU+0x254>)
    89ec:	4798      	blx	r3
	LORAREG_InitSetAttrFnPtrsAU();
    89ee:	4b13      	ldr	r3, [pc, #76]	; (8a3c <LORAReg_InitAU+0x258>)
    89f0:	4798      	blx	r3
}
    89f2:	2008      	movs	r0, #8
    89f4:	b007      	add	sp, #28
    89f6:	bc3c      	pop	{r2, r3, r4, r5}
    89f8:	4690      	mov	r8, r2
    89fa:	4699      	mov	r9, r3
    89fc:	46a2      	mov	sl, r4
    89fe:	46ab      	mov	fp, r5
    8a00:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8a02:	46c0      	nop			; (mov r8, r8)
    8a04:	200024d0 	.word	0x200024d0
    8a08:	200024cc 	.word	0x200024cc
    8a0c:	0001fcfc 	.word	0x0001fcfc
    8a10:	00019d89 	.word	0x00019d89
    8a14:	0001fd8c 	.word	0x0001fd8c
    8a18:	0000020b 	.word	0x0000020b
    8a1c:	0000020e 	.word	0x0000020e
    8a20:	00000212 	.word	0x00000212
    8a24:	000087e1 	.word	0x000087e1
    8a28:	200022b0 	.word	0x200022b0
    8a2c:	0001fdfc 	.word	0x0001fdfc
    8a30:	0000e3c1 	.word	0x0000e3c1
    8a34:	0000ce29 	.word	0x0000ce29
    8a38:	0000d47d 	.word	0x0000d47d
    8a3c:	0000d759 	.word	0x0000d759

00008a40 <LorawanReg_EU868_Pds_Cb>:

#if (ENABLE_PDS == 1)
void LorawanReg_EU868_Pds_Cb(void)
{
	
}
    8a40:	4770      	bx	lr
	...

00008a44 <LORAReg_InitEU>:
{
    8a44:	b5f0      	push	{r4, r5, r6, r7, lr}
    8a46:	b08b      	sub	sp, #44	; 0x2c
	RegParams.TxCurDataRate = MAC_DEF_TX_CURRENT_DATARATE_EU;
    8a48:	4ba2      	ldr	r3, [pc, #648]	; (8cd4 <LORAReg_InitEU+0x290>)
    8a4a:	2103      	movs	r1, #3
    8a4c:	2226      	movs	r2, #38	; 0x26
    8a4e:	5499      	strb	r1, [r3, r2]
	RegParams.maxChannels = MAX_CHANNELS_T2;
    8a50:	2510      	movs	r5, #16
    8a52:	3204      	adds	r2, #4
    8a54:	549d      	strb	r5, [r3, r2]
	RegParams.maxSubBands = MAX_NUM_SUBBANDS_EU;
    8a56:	2406      	movs	r4, #6
    8a58:	3a01      	subs	r2, #1
    8a5a:	549c      	strb	r4, [r3, r2]
	RegParams.MacTxPower = MAC_DEF_TX_POWER_EU;
    8a5c:	3c05      	subs	r4, #5
    8a5e:	3a02      	subs	r2, #2
    8a60:	549c      	strb	r4, [r3, r2]
	RegParams.pChParams = &RegParams.cmnParams.paramsType2.chParams[0];
    8a62:	001a      	movs	r2, r3
    8a64:	3283      	adds	r2, #131	; 0x83
    8a66:	2400      	movs	r4, #0
    8a68:	711a      	strb	r2, [r3, #4]
    8a6a:	0a16      	lsrs	r6, r2, #8
    8a6c:	715e      	strb	r6, [r3, #5]
    8a6e:	0c16      	lsrs	r6, r2, #16
    8a70:	719e      	strb	r6, [r3, #6]
    8a72:	0e12      	lsrs	r2, r2, #24
    8a74:	71da      	strb	r2, [r3, #7]
	RegParams.pDrParams = &RegParams.cmnParams.paramsType2.DRParams[0];
    8a76:	001a      	movs	r2, r3
    8a78:	3243      	adds	r2, #67	; 0x43
    8a7a:	701a      	strb	r2, [r3, #0]
    8a7c:	0a16      	lsrs	r6, r2, #8
    8a7e:	705e      	strb	r6, [r3, #1]
    8a80:	0c16      	lsrs	r6, r2, #16
    8a82:	709e      	strb	r6, [r3, #2]
    8a84:	0e12      	lsrs	r2, r2, #24
    8a86:	70da      	strb	r2, [r3, #3]
	RegParams.pSubBandParams = &RegParams.cmnParams.paramsType2.SubBands[0];
    8a88:	001a      	movs	r2, r3
    8a8a:	32c4      	adds	r2, #196	; 0xc4
    8a8c:	32ff      	adds	r2, #255	; 0xff
    8a8e:	731a      	strb	r2, [r3, #12]
    8a90:	0a16      	lsrs	r6, r2, #8
    8a92:	735e      	strb	r6, [r3, #13]
    8a94:	0c16      	lsrs	r6, r2, #16
    8a96:	739e      	strb	r6, [r3, #14]
    8a98:	0e12      	lsrs	r2, r2, #24
    8a9a:	73da      	strb	r2, [r3, #15]
	RegParams.pOtherChParams = &RegParams.cmnParams.paramsType2.othChParams[0];
    8a9c:	001a      	movs	r2, r3
    8a9e:	32a3      	adds	r2, #163	; 0xa3
    8aa0:	721a      	strb	r2, [r3, #8]
    8aa2:	0a16      	lsrs	r6, r2, #8
    8aa4:	725e      	strb	r6, [r3, #9]
    8aa6:	0c16      	lsrs	r6, r2, #16
    8aa8:	729e      	strb	r6, [r3, #10]
    8aaa:	0e12      	lsrs	r2, r2, #24
    8aac:	72da      	strb	r2, [r3, #11]
	RegParams.pDutyCycleTimer = &RegParams.cmnParams.paramsType2.DutyCycleTimer;
    8aae:	001a      	movs	r2, r3
    8ab0:	3264      	adds	r2, #100	; 0x64
    8ab2:	32ff      	adds	r2, #255	; 0xff
    8ab4:	741a      	strb	r2, [r3, #16]
    8ab6:	0a16      	lsrs	r6, r2, #8
    8ab8:	745e      	strb	r6, [r3, #17]
    8aba:	0c16      	lsrs	r6, r2, #16
    8abc:	749e      	strb	r6, [r3, #18]
    8abe:	0e12      	lsrs	r2, r2, #24
    8ac0:	74da      	strb	r2, [r3, #19]
    RegParams.pJoinDutyCycleTimer = &RegParams.joinDutyCycleTimer;
    8ac2:	001a      	movs	r2, r3
    8ac4:	3234      	adds	r2, #52	; 0x34
    8ac6:	751a      	strb	r2, [r3, #20]
    8ac8:	0a16      	lsrs	r6, r2, #8
    8aca:	755e      	strb	r6, [r3, #21]
    8acc:	0c16      	lsrs	r6, r2, #16
    8ace:	759e      	strb	r6, [r3, #22]
    8ad0:	0e12      	lsrs	r2, r2, #24
    8ad2:	75da      	strb	r2, [r3, #23]
	RegParams.pJoinBackoffTimer = &RegParams.joinBackoffTimer;
    8ad4:	001a      	movs	r2, r3
    8ad6:	323d      	adds	r2, #61	; 0x3d
    8ad8:	761a      	strb	r2, [r3, #24]
    8ada:	0a16      	lsrs	r6, r2, #8
    8adc:	765e      	strb	r6, [r3, #25]
    8ade:	0c16      	lsrs	r6, r2, #16
    8ae0:	769e      	strb	r6, [r3, #26]
    8ae2:	0e12      	lsrs	r2, r2, #24
    8ae4:	76da      	strb	r2, [r3, #27]
	RegParams.MinNewChIndex = 3;
    8ae6:	2221      	movs	r2, #33	; 0x21
    8ae8:	5499      	strb	r1, [r3, r2]
	RegParams.FeaturesSupport = FEATURES_SUPPORTED_EU;
    8aea:	2622      	movs	r6, #34	; 0x22
    8aec:	3a01      	subs	r2, #1
    8aee:	549e      	strb	r6, [r3, r2]
	RegParams.minDataRate = MAC_DATARATE_MIN_EU;
    8af0:	3a19      	subs	r2, #25
    8af2:	3602      	adds	r6, #2
    8af4:	559a      	strb	r2, [r3, r6]
	RegParams.maxDataRate = MAC_DATARATE_MAX_EU;
    8af6:	3601      	adds	r6, #1
    8af8:	559c      	strb	r4, [r3, r6]
	RegParams.Rx1DrOffset = 5;
    8afa:	2705      	movs	r7, #5
    8afc:	3607      	adds	r6, #7
    8afe:	559f      	strb	r7, [r3, r6]
	RegParams.maxTxPwrIndx = 7;
    8b00:	3601      	adds	r6, #1
    8b02:	559a      	strb	r2, [r3, r6]
	RegParams.cmnParams.paramsType2.minNonDefChId = 3;
    8b04:	32ba      	adds	r2, #186	; 0xba
    8b06:	32ff      	adds	r2, #255	; 0xff
    8b08:	5499      	strb	r1, [r3, r2]
	RegParams.maxTxPwr = DEFAULT_EIRP_EU;
    8b0a:	3a99      	subs	r2, #153	; 0x99
    8b0c:	3aff      	subs	r2, #255	; 0xff
    8b0e:	549d      	strb	r5, [r3, r2]
	RegParams.pDutyCycleTimer->timerId = regTimerId[0];
    8b10:	4a71      	ldr	r2, [pc, #452]	; (8cd8 <LORAReg_InitEU+0x294>)
    8b12:	7815      	ldrb	r5, [r2, #0]
    8b14:	2168      	movs	r1, #104	; 0x68
    8b16:	31ff      	adds	r1, #255	; 0xff
    8b18:	545d      	strb	r5, [r3, r1]
	RegParams.pJoinBackoffTimer->timerId = regTimerId[1];
    8b1a:	7855      	ldrb	r5, [r2, #1]
    8b1c:	392b      	subs	r1, #43	; 0x2b
    8b1e:	39ff      	subs	r1, #255	; 0xff
    8b20:	545d      	strb	r5, [r3, r1]
    RegParams.pJoinDutyCycleTimer->timerId = regTimerId[2];
    8b22:	7891      	ldrb	r1, [r2, #2]
    8b24:	223c      	movs	r2, #60	; 0x3c
    8b26:	5499      	strb	r1, [r3, r2]
	RegParams.pJoinDutyCycleTimer->remainingtime =0;
    8b28:	2100      	movs	r1, #0
    8b2a:	3a04      	subs	r2, #4
    8b2c:	5499      	strb	r1, [r3, r2]
    8b2e:	3201      	adds	r2, #1
    8b30:	5499      	strb	r1, [r3, r2]
    8b32:	3201      	adds	r2, #1
    8b34:	5499      	strb	r1, [r3, r2]
    8b36:	3201      	adds	r2, #1
    8b38:	5499      	strb	r1, [r3, r2]
	RegParams.joinbccount =0;
    8b3a:	3207      	adds	r2, #7
    8b3c:	549c      	strb	r4, [r3, r2]
	RegParams.joinDutyCycleTimeout =0;
    8b3e:	001a      	movs	r2, r3
    8b40:	323e      	adds	r2, #62	; 0x3e
    8b42:	7011      	strb	r1, [r2, #0]
    8b44:	7051      	strb	r1, [r2, #1]
    8b46:	7091      	strb	r1, [r2, #2]
    8b48:	70d1      	strb	r1, [r2, #3]
	RegParams.band = ismBand;
    8b4a:	222e      	movs	r2, #46	; 0x2e
    8b4c:	5498      	strb	r0, [r3, r2]
	if(ismBand == ISM_EU868)
    8b4e:	2800      	cmp	r0, #0
    8b50:	d006      	beq.n	8b60 <LORAReg_InitEU+0x11c>
		return UNSUPPORTED_BAND;
    8b52:	23c6      	movs	r3, #198	; 0xc6
	else if(ismBand == ISM_EU433)
    8b54:	2801      	cmp	r0, #1
    8b56:	d100      	bne.n	8b5a <LORAReg_InitEU+0x116>
    8b58:	e084      	b.n	8c64 <LORAReg_InitEU+0x220>
}
    8b5a:	0018      	movs	r0, r3
    8b5c:	b00b      	add	sp, #44	; 0x2c
    8b5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    memcpy (RegParams.pChParams, DefaultChannels868, sizeof(DefaultChannels868) );
    8b60:	001c      	movs	r4, r3
    8b62:	0018      	movs	r0, r3
    8b64:	3083      	adds	r0, #131	; 0x83
    8b66:	3a28      	subs	r2, #40	; 0x28
    8b68:	495c      	ldr	r1, [pc, #368]	; (8cdc <LORAReg_InitEU+0x298>)
    8b6a:	4d5d      	ldr	r5, [pc, #372]	; (8ce0 <LORAReg_InitEU+0x29c>)
    8b6c:	47a8      	blx	r5
    memcpy (RegParams.pOtherChParams, AdvChannels868, sizeof(AdvChannels868) );	
    8b6e:	0020      	movs	r0, r4
    8b70:	30a3      	adds	r0, #163	; 0xa3
    8b72:	2224      	movs	r2, #36	; 0x24
    8b74:	495b      	ldr	r1, [pc, #364]	; (8ce4 <LORAReg_InitEU+0x2a0>)
    8b76:	47a8      	blx	r5
	memcpy (RegParams.pSubBandParams, SubBandParams868, sizeof(SubBandParams868) );
    8b78:	0020      	movs	r0, r4
    8b7a:	30c4      	adds	r0, #196	; 0xc4
    8b7c:	30ff      	adds	r0, #255	; 0xff
    8b7e:	2248      	movs	r2, #72	; 0x48
    8b80:	4959      	ldr	r1, [pc, #356]	; (8ce8 <LORAReg_InitEU+0x2a4>)
    8b82:	47a8      	blx	r5
	memcpy(RegParams.cmnParams.paramsType2.subBandDutyCycle,SubBandDutyCycle868,sizeof(SubBandDutyCycle868));
    8b84:	0020      	movs	r0, r4
    8b86:	30ae      	adds	r0, #174	; 0xae
    8b88:	30ff      	adds	r0, #255	; 0xff
    8b8a:	220c      	movs	r2, #12
    8b8c:	4957      	ldr	r1, [pc, #348]	; (8cec <LORAReg_InitEU+0x2a8>)
    8b8e:	47a8      	blx	r5
    8b90:	2303      	movs	r3, #3
        RegParams.pChParams[i].dataRange.value = UINT8_MAX;		
    8b92:	4850      	ldr	r0, [pc, #320]	; (8cd4 <LORAReg_InitEU+0x290>)
    8b94:	25ff      	movs	r5, #255	; 0xff
    for (i = 3; i < RegParams.maxChannels; i++)
    8b96:	242a      	movs	r4, #42	; 0x2a
        RegParams.pChParams[i].dataRange.value = UINT8_MAX;		
    8b98:	7902      	ldrb	r2, [r0, #4]
    8b9a:	7941      	ldrb	r1, [r0, #5]
    8b9c:	0209      	lsls	r1, r1, #8
    8b9e:	4311      	orrs	r1, r2
    8ba0:	7982      	ldrb	r2, [r0, #6]
    8ba2:	0412      	lsls	r2, r2, #16
    8ba4:	4311      	orrs	r1, r2
    8ba6:	79c2      	ldrb	r2, [r0, #7]
    8ba8:	0612      	lsls	r2, r2, #24
    8baa:	430a      	orrs	r2, r1
    8bac:	0059      	lsls	r1, r3, #1
    8bae:	188a      	adds	r2, r1, r2
    8bb0:	7055      	strb	r5, [r2, #1]
    for (i = 3; i < RegParams.maxChannels; i++)
    8bb2:	3301      	adds	r3, #1
    8bb4:	b2db      	uxtb	r3, r3
    8bb6:	5702      	ldrsb	r2, [r0, r4]
    8bb8:	4293      	cmp	r3, r2
    8bba:	dbed      	blt.n	8b98 <LORAReg_InitEU+0x154>
		RegParams.DefRx1DataRate = MAC_868_RX1_WINDOW_DATARATE;
    8bbc:	4b45      	ldr	r3, [pc, #276]	; (8cd4 <LORAReg_InitEU+0x290>)
    8bbe:	2200      	movs	r2, #0
    8bc0:	2122      	movs	r1, #34	; 0x22
    8bc2:	545a      	strb	r2, [r3, r1]
		RegParams.DefRx2DataRate = MAC_868_RX2_WINDOW_DATARATE;
    8bc4:	3101      	adds	r1, #1
    8bc6:	545a      	strb	r2, [r3, r1]
		RegParams.DefRx2Freq = MAC_868_RX2_WINDOW_FREQ;
    8bc8:	3208      	adds	r2, #8
    8bca:	771a      	strb	r2, [r3, #28]
    8bcc:	3a22      	subs	r2, #34	; 0x22
    8bce:	775a      	strb	r2, [r3, #29]
    8bd0:	3a13      	subs	r2, #19
    8bd2:	779a      	strb	r2, [r3, #30]
    8bd4:	3260      	adds	r2, #96	; 0x60
    8bd6:	77da      	strb	r2, [r3, #31]
		RegParams.regParamItems.fileid = PDS_FILE_REG_EU868_04_IDX;
    8bd8:	3920      	subs	r1, #32
    8bda:	4a45      	ldr	r2, [pc, #276]	; (8cf0 <LORAReg_InitEU+0x2ac>)
    8bdc:	5499      	strb	r1, [r3, r2]
		RegParams.regParamItems.ch_param_1_item_id = PDS_REG_EU868_CH_PARAM_1;
    8bde:	2100      	movs	r1, #0
    8be0:	4a44      	ldr	r2, [pc, #272]	; (8cf4 <LORAReg_InitEU+0x2b0>)
    8be2:	5499      	strb	r1, [r3, r2]
    8be4:	189a      	adds	r2, r3, r2
    8be6:	2103      	movs	r1, #3
    8be8:	7051      	strb	r1, [r2, #1]
		RegParams.regParamItems.ch_param_2_item_id = PDS_REG_EU868_CH_PARAM_2;
    8bea:	2100      	movs	r1, #0
    8bec:	2284      	movs	r2, #132	; 0x84
    8bee:	0092      	lsls	r2, r2, #2
    8bf0:	5499      	strb	r1, [r3, r2]
    8bf2:	189a      	adds	r2, r3, r2
    8bf4:	310b      	adds	r1, #11
    8bf6:	7051      	strb	r1, [r2, #1]
		RegParams.regParamItems.band_item_id = 0;
    8bf8:	2100      	movs	r1, #0
    8bfa:	4a3f      	ldr	r2, [pc, #252]	; (8cf8 <LORAReg_InitEU+0x2b4>)
    8bfc:	5499      	strb	r1, [r3, r2]
    8bfe:	189a      	adds	r2, r3, r2
    8c00:	7051      	strb	r1, [r2, #1]
		RegParams.regParamItems.lastUsedSB = 0;
    8c02:	2283      	movs	r2, #131	; 0x83
    8c04:	0092      	lsls	r2, r2, #2
    8c06:	5499      	strb	r1, [r3, r2]
    8c08:	4694      	mov	ip, r2
    8c0a:	4463      	add	r3, ip
    8c0c:	2200      	movs	r2, #0
    8c0e:	705a      	strb	r2, [r3, #1]
		filemarks_fid1.fileMarkListAddr = aRegEu868Fid1PdsOps;
    8c10:	ab02      	add	r3, sp, #8
		filemarks_fid1.numItems =  (uint8_t)(PDS_REG_EU868_FID1_MAX_VALUE & 0x00FF);
    8c12:	2601      	movs	r6, #1
    8c14:	711e      	strb	r6, [r3, #4]
		filemarks_fid1.fIDcb = LorawanReg_EU868_Pds_Cb;
    8c16:	4d39      	ldr	r5, [pc, #228]	; (8cfc <LORAReg_InitEU+0x2b8>)
		PDS_RegFile(PDS_FILE_REG_EU868_04_IDX,filemarks_fid1);
    8c18:	9500      	str	r5, [sp, #0]
    8c1a:	4939      	ldr	r1, [pc, #228]	; (8d00 <LORAReg_InitEU+0x2bc>)
    8c1c:	9a03      	ldr	r2, [sp, #12]
    8c1e:	4b39      	ldr	r3, [pc, #228]	; (8d04 <LORAReg_InitEU+0x2c0>)
    8c20:	2003      	movs	r0, #3
    8c22:	4c39      	ldr	r4, [pc, #228]	; (8d08 <LORAReg_InitEU+0x2c4>)
    8c24:	47a0      	blx	r4
		filemarks_fid2.fileMarkListAddr = aRegEu868Fid2PdsOps;
    8c26:	ab06      	add	r3, sp, #24
		filemarks_fid2.numItems =  (uint8_t)(PDS_REG_EU868_FID2_MAX_VALUE & 0x00FF);
    8c28:	711e      	strb	r6, [r3, #4]
		PDS_RegFile(PDS_FILE_REG_EU868_12_IDX,filemarks_fid2);
    8c2a:	9500      	str	r5, [sp, #0]
    8c2c:	4937      	ldr	r1, [pc, #220]	; (8d0c <LORAReg_InitEU+0x2c8>)
    8c2e:	9a07      	ldr	r2, [sp, #28]
    8c30:	4b37      	ldr	r3, [pc, #220]	; (8d10 <LORAReg_InitEU+0x2cc>)
    8c32:	200b      	movs	r0, #11
    8c34:	47a0      	blx	r4
	memcpy (RegParams.pDrParams, DefaultDrparamsEU, sizeof(DefaultDrparamsEU) );
    8c36:	4a27      	ldr	r2, [pc, #156]	; (8cd4 <LORAReg_InitEU+0x290>)
    8c38:	7810      	ldrb	r0, [r2, #0]
    8c3a:	7853      	ldrb	r3, [r2, #1]
    8c3c:	021b      	lsls	r3, r3, #8
    8c3e:	4303      	orrs	r3, r0
    8c40:	7890      	ldrb	r0, [r2, #2]
    8c42:	0400      	lsls	r0, r0, #16
    8c44:	4303      	orrs	r3, r0
    8c46:	78d0      	ldrb	r0, [r2, #3]
    8c48:	0600      	lsls	r0, r0, #24
    8c4a:	4318      	orrs	r0, r3
    8c4c:	2240      	movs	r2, #64	; 0x40
    8c4e:	4931      	ldr	r1, [pc, #196]	; (8d14 <LORAReg_InitEU+0x2d0>)
    8c50:	4b23      	ldr	r3, [pc, #140]	; (8ce0 <LORAReg_InitEU+0x29c>)
    8c52:	4798      	blx	r3
    LORAREG_InitGetAttrFnPtrsEU();
    8c54:	4b30      	ldr	r3, [pc, #192]	; (8d18 <LORAReg_InitEU+0x2d4>)
    8c56:	4798      	blx	r3
	LORAREG_InitValidateAttrFnPtrsEU();
    8c58:	4b30      	ldr	r3, [pc, #192]	; (8d1c <LORAReg_InitEU+0x2d8>)
    8c5a:	4798      	blx	r3
	LORAREG_InitSetAttrFnPtrsEU();
    8c5c:	4b30      	ldr	r3, [pc, #192]	; (8d20 <LORAReg_InitEU+0x2dc>)
    8c5e:	4798      	blx	r3
	return status;
    8c60:	2308      	movs	r3, #8
    8c62:	e77a      	b.n	8b5a <LORAReg_InitEU+0x116>
    memcpy (RegParams.pChParams, DefaultChannels433, sizeof(DefaultChannels433) );
    8c64:	4c1b      	ldr	r4, [pc, #108]	; (8cd4 <LORAReg_InitEU+0x290>)
    8c66:	0020      	movs	r0, r4
    8c68:	3083      	adds	r0, #131	; 0x83
    8c6a:	2206      	movs	r2, #6
    8c6c:	492d      	ldr	r1, [pc, #180]	; (8d24 <LORAReg_InitEU+0x2e0>)
    8c6e:	4d1c      	ldr	r5, [pc, #112]	; (8ce0 <LORAReg_InitEU+0x29c>)
    8c70:	47a8      	blx	r5
    memcpy (RegParams.pOtherChParams, AdvChannels433, sizeof(AdvChannels433) );
    8c72:	0020      	movs	r0, r4
    8c74:	30a3      	adds	r0, #163	; 0xa3
    8c76:	2224      	movs	r2, #36	; 0x24
    8c78:	492b      	ldr	r1, [pc, #172]	; (8d28 <LORAReg_InitEU+0x2e4>)
    8c7a:	47a8      	blx	r5
	memcpy (RegParams.pSubBandParams, SubBandParams433, sizeof(SubBandParams433) );	
    8c7c:	0020      	movs	r0, r4
    8c7e:	30c4      	adds	r0, #196	; 0xc4
    8c80:	30ff      	adds	r0, #255	; 0xff
    8c82:	220c      	movs	r2, #12
    8c84:	4929      	ldr	r1, [pc, #164]	; (8d2c <LORAReg_InitEU+0x2e8>)
    8c86:	47a8      	blx	r5
    8c88:	2303      	movs	r3, #3
        RegParams.pChParams[i].dataRange.value = UINT8_MAX;
    8c8a:	4812      	ldr	r0, [pc, #72]	; (8cd4 <LORAReg_InitEU+0x290>)
    8c8c:	25ff      	movs	r5, #255	; 0xff
    for (i = 3; i < RegParams.maxChannels; i++)
    8c8e:	242a      	movs	r4, #42	; 0x2a
        RegParams.pChParams[i].dataRange.value = UINT8_MAX;
    8c90:	7902      	ldrb	r2, [r0, #4]
    8c92:	7941      	ldrb	r1, [r0, #5]
    8c94:	0209      	lsls	r1, r1, #8
    8c96:	4311      	orrs	r1, r2
    8c98:	7982      	ldrb	r2, [r0, #6]
    8c9a:	0412      	lsls	r2, r2, #16
    8c9c:	4311      	orrs	r1, r2
    8c9e:	79c2      	ldrb	r2, [r0, #7]
    8ca0:	0612      	lsls	r2, r2, #24
    8ca2:	430a      	orrs	r2, r1
    8ca4:	0059      	lsls	r1, r3, #1
    8ca6:	188a      	adds	r2, r1, r2
    8ca8:	7055      	strb	r5, [r2, #1]
    for (i = 3; i < RegParams.maxChannels; i++)
    8caa:	3301      	adds	r3, #1
    8cac:	b2db      	uxtb	r3, r3
    8cae:	5702      	ldrsb	r2, [r0, r4]
    8cb0:	4293      	cmp	r3, r2
    8cb2:	dbed      	blt.n	8c90 <LORAReg_InitEU+0x24c>
		RegParams.DefRx1DataRate = MAC_433_RX1_WINDOW_DATARATE;
    8cb4:	4b07      	ldr	r3, [pc, #28]	; (8cd4 <LORAReg_InitEU+0x290>)
    8cb6:	2105      	movs	r1, #5
    8cb8:	2222      	movs	r2, #34	; 0x22
    8cba:	5499      	strb	r1, [r3, r2]
		RegParams.DefRx2DataRate = MAC_433_RX2_WINDOW_DATARATE;
    8cbc:	2100      	movs	r1, #0
    8cbe:	3201      	adds	r2, #1
    8cc0:	5499      	strb	r1, [r3, r2]
		RegParams.DefRx2Freq = MAC_433_RX2_WINDOW_FREQ;
    8cc2:	3a93      	subs	r2, #147	; 0x93
    8cc4:	771a      	strb	r2, [r3, #28]
    8cc6:	3241      	adds	r2, #65	; 0x41
    8cc8:	775a      	strb	r2, [r3, #29]
    8cca:	3a02      	subs	r2, #2
    8ccc:	779a      	strb	r2, [r3, #30]
    8cce:	324a      	adds	r2, #74	; 0x4a
    8cd0:	77da      	strb	r2, [r3, #31]
    8cd2:	e7b0      	b.n	8c36 <LORAReg_InitEU+0x1f2>
    8cd4:	200024d0 	.word	0x200024d0
    8cd8:	200024cc 	.word	0x200024cc
    8cdc:	0001fe5c 	.word	0x0001fe5c
    8ce0:	00019d89 	.word	0x00019d89
    8ce4:	0001fe30 	.word	0x0001fe30
    8ce8:	0001febc 	.word	0x0001febc
    8cec:	0001fea4 	.word	0x0001fea4
    8cf0:	0000020b 	.word	0x0000020b
    8cf4:	0000020e 	.word	0x0000020e
    8cf8:	00000212 	.word	0x00000212
    8cfc:	00008a41 	.word	0x00008a41
    8d00:	200022b4 	.word	0x200022b4
    8d04:	0001ff04 	.word	0x0001ff04
    8d08:	0000e3c1 	.word	0x0000e3c1
    8d0c:	200022b8 	.word	0x200022b8
    8d10:	0001ff0c 	.word	0x0001ff0c
    8d14:	0001fe64 	.word	0x0001fe64
    8d18:	0000cb99 	.word	0x0000cb99
    8d1c:	0000d3a9 	.word	0x0000d3a9
    8d20:	0000d679 	.word	0x0000d679
    8d24:	0001fe54 	.word	0x0001fe54
    8d28:	0001fe0c 	.word	0x0001fe0c
    8d2c:	0001feb0 	.word	0x0001feb0

00008d30 <LorawanReg_IND_Pds_Cb>:
#if (ENABLE_PDS == 1)
/* PDS Callback function */
void LorawanReg_IND_Pds_Cb(void)
{
	
}
    8d30:	4770      	bx	lr
	...

00008d34 <LORAReg_InitIN>:
{
    8d34:	b530      	push	{r4, r5, lr}
    8d36:	b087      	sub	sp, #28
	RegParams.TxCurDataRate = MAC_DEF_TX_CURRENT_DATARATE_IN;
    8d38:	4b72      	ldr	r3, [pc, #456]	; (8f04 <LORAReg_InitIN+0x1d0>)
    8d3a:	2403      	movs	r4, #3
    8d3c:	2226      	movs	r2, #38	; 0x26
    8d3e:	549c      	strb	r4, [r3, r2]
	RegParams.maxChannels = MAX_CHANNELS_IN;
    8d40:	2110      	movs	r1, #16
    8d42:	3204      	adds	r2, #4
    8d44:	5499      	strb	r1, [r3, r2]
	RegParams.maxSubBands = MAX_NUM_SUBBANDS_IN;
    8d46:	3a29      	subs	r2, #41	; 0x29
    8d48:	3119      	adds	r1, #25
    8d4a:	545a      	strb	r2, [r3, r1]
	RegParams.MacTxPower = MAC_DEF_TX_POWER_IN;
    8d4c:	3902      	subs	r1, #2
    8d4e:	545a      	strb	r2, [r3, r1]
	RegParams.pChParams = &RegParams.cmnParams.paramsType2.chParams[0];
    8d50:	001a      	movs	r2, r3
    8d52:	3283      	adds	r2, #131	; 0x83
    8d54:	2100      	movs	r1, #0
    8d56:	711a      	strb	r2, [r3, #4]
    8d58:	0a15      	lsrs	r5, r2, #8
    8d5a:	715d      	strb	r5, [r3, #5]
    8d5c:	0c15      	lsrs	r5, r2, #16
    8d5e:	719d      	strb	r5, [r3, #6]
    8d60:	0e12      	lsrs	r2, r2, #24
    8d62:	71da      	strb	r2, [r3, #7]
	RegParams.pDrParams = &RegParams.cmnParams.paramsType2.DRParams[0];
    8d64:	001a      	movs	r2, r3
    8d66:	3243      	adds	r2, #67	; 0x43
    8d68:	701a      	strb	r2, [r3, #0]
    8d6a:	0a15      	lsrs	r5, r2, #8
    8d6c:	705d      	strb	r5, [r3, #1]
    8d6e:	0c15      	lsrs	r5, r2, #16
    8d70:	709d      	strb	r5, [r3, #2]
    8d72:	0e12      	lsrs	r2, r2, #24
    8d74:	70da      	strb	r2, [r3, #3]
	RegParams.pOtherChParams = &RegParams.cmnParams.paramsType2.othChParams[0];
    8d76:	001a      	movs	r2, r3
    8d78:	32a3      	adds	r2, #163	; 0xa3
    8d7a:	721a      	strb	r2, [r3, #8]
    8d7c:	0a15      	lsrs	r5, r2, #8
    8d7e:	725d      	strb	r5, [r3, #9]
    8d80:	0c15      	lsrs	r5, r2, #16
    8d82:	729d      	strb	r5, [r3, #10]
    8d84:	0e12      	lsrs	r2, r2, #24
    8d86:	72da      	strb	r2, [r3, #11]
	RegParams.pDutyCycleTimer = &RegParams.cmnParams.paramsType2.DutyCycleTimer;
    8d88:	001a      	movs	r2, r3
    8d8a:	3264      	adds	r2, #100	; 0x64
    8d8c:	32ff      	adds	r2, #255	; 0xff
    8d8e:	741a      	strb	r2, [r3, #16]
    8d90:	0a15      	lsrs	r5, r2, #8
    8d92:	745d      	strb	r5, [r3, #17]
    8d94:	0c15      	lsrs	r5, r2, #16
    8d96:	749d      	strb	r5, [r3, #18]
    8d98:	0e12      	lsrs	r2, r2, #24
    8d9a:	74da      	strb	r2, [r3, #19]
    RegParams.pJoinDutyCycleTimer = &RegParams.joinDutyCycleTimer;
    8d9c:	001a      	movs	r2, r3
    8d9e:	3234      	adds	r2, #52	; 0x34
    8da0:	751a      	strb	r2, [r3, #20]
    8da2:	0a15      	lsrs	r5, r2, #8
    8da4:	755d      	strb	r5, [r3, #21]
    8da6:	0c15      	lsrs	r5, r2, #16
    8da8:	759d      	strb	r5, [r3, #22]
    8daa:	0e12      	lsrs	r2, r2, #24
    8dac:	75da      	strb	r2, [r3, #23]
	RegParams.pJoinBackoffTimer = &RegParams.joinBackoffTimer;
    8dae:	001a      	movs	r2, r3
    8db0:	323d      	adds	r2, #61	; 0x3d
    8db2:	761a      	strb	r2, [r3, #24]
    8db4:	0a15      	lsrs	r5, r2, #8
    8db6:	765d      	strb	r5, [r3, #25]
    8db8:	0c15      	lsrs	r5, r2, #16
    8dba:	769d      	strb	r5, [r3, #26]
    8dbc:	0e12      	lsrs	r2, r2, #24
    8dbe:	76da      	strb	r2, [r3, #27]
	RegParams.DefRx1DataRate = MAC_RX1_WINDOW_DATARATE_IN;
    8dc0:	2222      	movs	r2, #34	; 0x22
    8dc2:	5499      	strb	r1, [r3, r2]
	RegParams.DefRx2DataRate = MAC_RX2_WINDOW_DATARATE_IN;
    8dc4:	2502      	movs	r5, #2
    8dc6:	3201      	adds	r2, #1
    8dc8:	549d      	strb	r5, [r3, r2]
	RegParams.DefRx2Freq = MAC_RX2_WINDOW_FREQ_IN;	
    8dca:	3a33      	subs	r2, #51	; 0x33
    8dcc:	771a      	strb	r2, [r3, #28]
    8dce:	3a70      	subs	r2, #112	; 0x70
    8dd0:	775a      	strb	r2, [r3, #29]
    8dd2:	3226      	adds	r2, #38	; 0x26
    8dd4:	779a      	strb	r2, [r3, #30]
    8dd6:	328d      	adds	r2, #141	; 0x8d
    8dd8:	77da      	strb	r2, [r3, #31]
	RegParams.MinNewChIndex = MIN_CHANNEL_INDEX_IN;
    8dda:	3a12      	subs	r2, #18
    8ddc:	549c      	strb	r4, [r3, r2]
	RegParams.FeaturesSupport = FEATURES_SUPPORTED_IN;
    8dde:	352e      	adds	r5, #46	; 0x2e
    8de0:	3a01      	subs	r2, #1
    8de2:	549d      	strb	r5, [r3, r2]
	RegParams.minDataRate = MAC_DATARATE_MIN_IN;
    8de4:	3a19      	subs	r2, #25
    8de6:	3d0c      	subs	r5, #12
    8de8:	555a      	strb	r2, [r3, r5]
	RegParams.maxDataRate = MAC_DATARATE_MAX_IN;
    8dea:	3501      	adds	r5, #1
    8dec:	5559      	strb	r1, [r3, r5]
	RegParams.cmnParams.paramsType2.minNonDefChId = 3;
    8dee:	359c      	adds	r5, #156	; 0x9c
    8df0:	35ff      	adds	r5, #255	; 0xff
    8df2:	555c      	strb	r4, [r3, r5]
	RegParams.Rx1DrOffset = 7;
    8df4:	3429      	adds	r4, #41	; 0x29
    8df6:	551a      	strb	r2, [r3, r4]
	RegParams.maxTxPwrIndx = 10;
    8df8:	3c22      	subs	r4, #34	; 0x22
    8dfa:	3226      	adds	r2, #38	; 0x26
    8dfc:	549c      	strb	r4, [r3, r2]
	RegParams.maxTxPwr = DEFAULT_EIRP_IN;
    8dfe:	3414      	adds	r4, #20
    8e00:	3a05      	subs	r2, #5
    8e02:	549c      	strb	r4, [r3, r2]
	RegParams.pJoinDutyCycleTimer->timerId = regTimerId[0];
    8e04:	4a40      	ldr	r2, [pc, #256]	; (8f08 <LORAReg_InitIN+0x1d4>)
    8e06:	7815      	ldrb	r5, [r2, #0]
    8e08:	341e      	adds	r4, #30
    8e0a:	551d      	strb	r5, [r3, r4]
	RegParams.pJoinDutyCycleTimer->remainingtime = 0;
    8e0c:	2500      	movs	r5, #0
    8e0e:	3c04      	subs	r4, #4
    8e10:	551d      	strb	r5, [r3, r4]
    8e12:	3401      	adds	r4, #1
    8e14:	551d      	strb	r5, [r3, r4]
    8e16:	3401      	adds	r4, #1
    8e18:	551d      	strb	r5, [r3, r4]
    8e1a:	3401      	adds	r4, #1
    8e1c:	551d      	strb	r5, [r3, r4]
	RegParams.pJoinBackoffTimer->timerId = regTimerId[1];
    8e1e:	7854      	ldrb	r4, [r2, #1]
    8e20:	223d      	movs	r2, #61	; 0x3d
    8e22:	549c      	strb	r4, [r3, r2]
	RegParams.joinbccount =0;
    8e24:	3205      	adds	r2, #5
    8e26:	5499      	strb	r1, [r3, r2]
	RegParams.joinDutyCycleTimeout =0;
    8e28:	001a      	movs	r2, r3
    8e2a:	323e      	adds	r2, #62	; 0x3e
    8e2c:	7011      	strb	r1, [r2, #0]
    8e2e:	7051      	strb	r1, [r2, #1]
    8e30:	7091      	strb	r1, [r2, #2]
    8e32:	70d1      	strb	r1, [r2, #3]
	RegParams.band = ismBand;
    8e34:	222e      	movs	r2, #46	; 0x2e
    8e36:	5498      	strb	r0, [r3, r2]
		result = LORAWAN_INVALID_PARAMETER;
    8e38:	240a      	movs	r4, #10
	if(ismBand == ISM_IND865)
    8e3a:	280f      	cmp	r0, #15
    8e3c:	d008      	beq.n	8e50 <LORAReg_InitIN+0x11c>
    LORAREG_InitGetAttrFnPtrsIN();
    8e3e:	4b33      	ldr	r3, [pc, #204]	; (8f0c <LORAReg_InitIN+0x1d8>)
    8e40:	4798      	blx	r3
	LORAREG_InitValidateAttrFnPtrsIN();
    8e42:	4b33      	ldr	r3, [pc, #204]	; (8f10 <LORAReg_InitIN+0x1dc>)
    8e44:	4798      	blx	r3
	LORAREG_InitSetAttrFnPtrsIN();
    8e46:	4b33      	ldr	r3, [pc, #204]	; (8f14 <LORAReg_InitIN+0x1e0>)
    8e48:	4798      	blx	r3
}
    8e4a:	0020      	movs	r0, r4
    8e4c:	b007      	add	sp, #28
    8e4e:	bd30      	pop	{r4, r5, pc}
    memcpy (RegParams.pChParams, DefaultChannels865, sizeof(DefaultChannels865) );
    8e50:	001c      	movs	r4, r3
    8e52:	0018      	movs	r0, r3
    8e54:	3083      	adds	r0, #131	; 0x83
    8e56:	3a28      	subs	r2, #40	; 0x28
    8e58:	492f      	ldr	r1, [pc, #188]	; (8f18 <LORAReg_InitIN+0x1e4>)
    8e5a:	4d30      	ldr	r5, [pc, #192]	; (8f1c <LORAReg_InitIN+0x1e8>)
    8e5c:	47a8      	blx	r5
	memcpy (RegParams.pOtherChParams, AdvChannels865, sizeof(AdvChannels865) );
    8e5e:	0020      	movs	r0, r4
    8e60:	30a3      	adds	r0, #163	; 0xa3
    8e62:	2224      	movs	r2, #36	; 0x24
    8e64:	492e      	ldr	r1, [pc, #184]	; (8f20 <LORAReg_InitIN+0x1ec>)
    8e66:	47a8      	blx	r5
    8e68:	2006      	movs	r0, #6
	    RegParams.pChParams[i].dataRange.value = UINT8_MAX;
    8e6a:	4926      	ldr	r1, [pc, #152]	; (8f04 <LORAReg_InitIN+0x1d0>)
    8e6c:	24ff      	movs	r4, #255	; 0xff
    8e6e:	790b      	ldrb	r3, [r1, #4]
    8e70:	794a      	ldrb	r2, [r1, #5]
    8e72:	0212      	lsls	r2, r2, #8
    8e74:	431a      	orrs	r2, r3
    8e76:	798b      	ldrb	r3, [r1, #6]
    8e78:	041b      	lsls	r3, r3, #16
    8e7a:	431a      	orrs	r2, r3
    8e7c:	79cb      	ldrb	r3, [r1, #7]
    8e7e:	061b      	lsls	r3, r3, #24
    8e80:	4313      	orrs	r3, r2
    8e82:	181b      	adds	r3, r3, r0
    8e84:	705c      	strb	r4, [r3, #1]
    8e86:	3002      	adds	r0, #2
    for (i = MIN_CHANNEL_INDEX_IN; i < MAX_CHANNELS_IN; i++)
    8e88:	2820      	cmp	r0, #32
    8e8a:	d1f0      	bne.n	8e6e <LORAReg_InitIN+0x13a>
		RegParams.cmnParams.paramsType2.txParams.maxEIRP = DEFAULT_EIRP_IN;
    8e8c:	4c1d      	ldr	r4, [pc, #116]	; (8f04 <LORAReg_InitIN+0x1d0>)
    8e8e:	221e      	movs	r2, #30
    8e90:	23c2      	movs	r3, #194	; 0xc2
    8e92:	33ff      	adds	r3, #255	; 0xff
    8e94:	54e2      	strb	r2, [r4, r3]
		memcpy (RegParams.pDrParams, DefaultDrParamsIN, sizeof(DefaultDrParamsIN) );
    8e96:	7820      	ldrb	r0, [r4, #0]
    8e98:	7863      	ldrb	r3, [r4, #1]
    8e9a:	021b      	lsls	r3, r3, #8
    8e9c:	4303      	orrs	r3, r0
    8e9e:	78a0      	ldrb	r0, [r4, #2]
    8ea0:	0400      	lsls	r0, r0, #16
    8ea2:	4303      	orrs	r3, r0
    8ea4:	78e0      	ldrb	r0, [r4, #3]
    8ea6:	0600      	lsls	r0, r0, #24
    8ea8:	4318      	orrs	r0, r3
    8eaa:	3222      	adds	r2, #34	; 0x22
    8eac:	491d      	ldr	r1, [pc, #116]	; (8f24 <LORAReg_InitIN+0x1f0>)
    8eae:	4b1b      	ldr	r3, [pc, #108]	; (8f1c <LORAReg_InitIN+0x1e8>)
    8eb0:	4798      	blx	r3
		RegParams.regParamItems.fileid = PDS_FILE_REG_IND_07_IDX;
    8eb2:	2306      	movs	r3, #6
    8eb4:	2106      	movs	r1, #6
    8eb6:	4a1c      	ldr	r2, [pc, #112]	; (8f28 <LORAReg_InitIN+0x1f4>)
    8eb8:	54a1      	strb	r1, [r4, r2]
		RegParams.regParamItems.ch_param_1_item_id = PDS_REG_IND_CH_PARAM_1;
    8eba:	2100      	movs	r1, #0
    8ebc:	4a1b      	ldr	r2, [pc, #108]	; (8f2c <LORAReg_InitIN+0x1f8>)
    8ebe:	54a1      	strb	r1, [r4, r2]
    8ec0:	18a2      	adds	r2, r4, r2
    8ec2:	7053      	strb	r3, [r2, #1]
		RegParams.regParamItems.ch_param_2_item_id = PDS_REG_IND_CH_PARAM_2;
    8ec4:	3101      	adds	r1, #1
    8ec6:	2284      	movs	r2, #132	; 0x84
    8ec8:	0092      	lsls	r2, r2, #2
    8eca:	54a1      	strb	r1, [r4, r2]
    8ecc:	18a2      	adds	r2, r4, r2
    8ece:	7053      	strb	r3, [r2, #1]
		RegParams.regParamItems.band_item_id = 0;
    8ed0:	2200      	movs	r2, #0
    8ed2:	4b17      	ldr	r3, [pc, #92]	; (8f30 <LORAReg_InitIN+0x1fc>)
    8ed4:	54e2      	strb	r2, [r4, r3]
    8ed6:	18e3      	adds	r3, r4, r3
    8ed8:	705a      	strb	r2, [r3, #1]
		RegParams.regParamItems.lastUsedSB = 0;
    8eda:	2383      	movs	r3, #131	; 0x83
    8edc:	009b      	lsls	r3, r3, #2
    8ede:	54e2      	strb	r2, [r4, r3]
    8ee0:	469c      	mov	ip, r3
    8ee2:	4464      	add	r4, ip
    8ee4:	2300      	movs	r3, #0
    8ee6:	7063      	strb	r3, [r4, #1]
		filemarks.fileMarkListAddr = aRegIndPdsOps;
    8ee8:	ab02      	add	r3, sp, #8
		filemarks.numItems =  (uint8_t)(PDS_REG_IND_MAX_VALUE & 0x00FF);
    8eea:	3202      	adds	r2, #2
    8eec:	711a      	strb	r2, [r3, #4]
		filemarks.fIDcb = LorawanReg_IND_Pds_Cb;
    8eee:	4a11      	ldr	r2, [pc, #68]	; (8f34 <LORAReg_InitIN+0x200>)
		PDS_RegFile(PDS_FILE_REG_IND_07_IDX,filemarks);
    8ef0:	9200      	str	r2, [sp, #0]
    8ef2:	4911      	ldr	r1, [pc, #68]	; (8f38 <LORAReg_InitIN+0x204>)
    8ef4:	9a03      	ldr	r2, [sp, #12]
    8ef6:	4b11      	ldr	r3, [pc, #68]	; (8f3c <LORAReg_InitIN+0x208>)
    8ef8:	2006      	movs	r0, #6
    8efa:	4c11      	ldr	r4, [pc, #68]	; (8f40 <LORAReg_InitIN+0x20c>)
    8efc:	47a0      	blx	r4
	StackRetStatus_t result = LORAWAN_SUCCESS;
    8efe:	2408      	movs	r4, #8
    8f00:	e79d      	b.n	8e3e <LORAReg_InitIN+0x10a>
    8f02:	46c0      	nop			; (mov r8, r8)
    8f04:	200024d0 	.word	0x200024d0
    8f08:	200024cc 	.word	0x200024cc
    8f0c:	0000cf65 	.word	0x0000cf65
    8f10:	0000d4e9 	.word	0x0000d4e9
    8f14:	0000d7ad 	.word	0x0000d7ad
    8f18:	0001ff38 	.word	0x0001ff38
    8f1c:	00019d89 	.word	0x00019d89
    8f20:	0001ff14 	.word	0x0001ff14
    8f24:	0001ff40 	.word	0x0001ff40
    8f28:	0000020b 	.word	0x0000020b
    8f2c:	0000020e 	.word	0x0000020e
    8f30:	00000212 	.word	0x00000212
    8f34:	00008d31 	.word	0x00008d31
    8f38:	200022bc 	.word	0x200022bc
    8f3c:	0001ff80 	.word	0x0001ff80
    8f40:	0000e3c1 	.word	0x0000e3c1

00008f44 <LorawanReg_JPN_Pds_Cb>:
#if (ENABLE_PDS == 1)
/* PDS Callback function */
void LorawanReg_JPN_Pds_Cb(void)
{

}
    8f44:	4770      	bx	lr
	...

00008f48 <LORAReg_InitJP>:
{
    8f48:	b5f0      	push	{r4, r5, r6, r7, lr}
    8f4a:	46c6      	mov	lr, r8
    8f4c:	b500      	push	{lr}
    8f4e:	b086      	sub	sp, #24
	RegParams.TxCurDataRate = MAC_DEF_TX_CURRENT_DATARATE_JP;
    8f50:	4b97      	ldr	r3, [pc, #604]	; (91b0 <LORAReg_InitJP+0x268>)
    8f52:	2103      	movs	r1, #3
    8f54:	2226      	movs	r2, #38	; 0x26
    8f56:	5499      	strb	r1, [r3, r2]
	RegParams.maxChannels = MAX_CHANNELS_JP;
    8f58:	2510      	movs	r5, #16
    8f5a:	3204      	adds	r2, #4
    8f5c:	549d      	strb	r5, [r3, r2]
	RegParams.maxSubBands = MAX_NUM_SUBBANDS_JP;
    8f5e:	3901      	subs	r1, #1
    8f60:	3a01      	subs	r2, #1
    8f62:	5499      	strb	r1, [r3, r2]
	RegParams.MacTxPower = MAC_DEF_TX_POWER_JP;
    8f64:	2401      	movs	r4, #1
    8f66:	3a02      	subs	r2, #2
    8f68:	549c      	strb	r4, [r3, r2]
	RegParams.pChParams = &RegParams.cmnParams.paramsType2.chParams[0];
    8f6a:	001a      	movs	r2, r3
    8f6c:	3283      	adds	r2, #131	; 0x83
    8f6e:	2400      	movs	r4, #0
    8f70:	46a0      	mov	r8, r4
    8f72:	711a      	strb	r2, [r3, #4]
    8f74:	0a16      	lsrs	r6, r2, #8
    8f76:	715e      	strb	r6, [r3, #5]
    8f78:	0c16      	lsrs	r6, r2, #16
    8f7a:	719e      	strb	r6, [r3, #6]
    8f7c:	0e12      	lsrs	r2, r2, #24
    8f7e:	71da      	strb	r2, [r3, #7]
	RegParams.pDrParams = &RegParams.cmnParams.paramsType2.DRParams[0];
    8f80:	001a      	movs	r2, r3
    8f82:	3243      	adds	r2, #67	; 0x43
    8f84:	701a      	strb	r2, [r3, #0]
    8f86:	0a16      	lsrs	r6, r2, #8
    8f88:	705e      	strb	r6, [r3, #1]
    8f8a:	0c16      	lsrs	r6, r2, #16
    8f8c:	709e      	strb	r6, [r3, #2]
    8f8e:	0e12      	lsrs	r2, r2, #24
    8f90:	70da      	strb	r2, [r3, #3]
	RegParams.pSubBandParams = &RegParams.cmnParams.paramsType2.SubBands[0];
    8f92:	001a      	movs	r2, r3
    8f94:	32c4      	adds	r2, #196	; 0xc4
    8f96:	32ff      	adds	r2, #255	; 0xff
    8f98:	731a      	strb	r2, [r3, #12]
    8f9a:	0a16      	lsrs	r6, r2, #8
    8f9c:	735e      	strb	r6, [r3, #13]
    8f9e:	0c16      	lsrs	r6, r2, #16
    8fa0:	739e      	strb	r6, [r3, #14]
    8fa2:	0e12      	lsrs	r2, r2, #24
    8fa4:	73da      	strb	r2, [r3, #15]
	RegParams.pOtherChParams = &RegParams.cmnParams.paramsType2.othChParams[0];
    8fa6:	001a      	movs	r2, r3
    8fa8:	32a3      	adds	r2, #163	; 0xa3
    8faa:	721a      	strb	r2, [r3, #8]
    8fac:	0a16      	lsrs	r6, r2, #8
    8fae:	725e      	strb	r6, [r3, #9]
    8fb0:	0c16      	lsrs	r6, r2, #16
    8fb2:	729e      	strb	r6, [r3, #10]
    8fb4:	0e12      	lsrs	r2, r2, #24
    8fb6:	72da      	strb	r2, [r3, #11]
	RegParams.pDutyCycleTimer = &RegParams.cmnParams.paramsType2.DutyCycleTimer;
    8fb8:	001a      	movs	r2, r3
    8fba:	3264      	adds	r2, #100	; 0x64
    8fbc:	32ff      	adds	r2, #255	; 0xff
    8fbe:	741a      	strb	r2, [r3, #16]
    8fc0:	0a16      	lsrs	r6, r2, #8
    8fc2:	745e      	strb	r6, [r3, #17]
    8fc4:	0c16      	lsrs	r6, r2, #16
    8fc6:	749e      	strb	r6, [r3, #18]
    8fc8:	0e12      	lsrs	r2, r2, #24
    8fca:	74da      	strb	r2, [r3, #19]
    RegParams.pJoinDutyCycleTimer = &RegParams.joinDutyCycleTimer;
    8fcc:	001a      	movs	r2, r3
    8fce:	3234      	adds	r2, #52	; 0x34
    8fd0:	751a      	strb	r2, [r3, #20]
    8fd2:	0a16      	lsrs	r6, r2, #8
    8fd4:	755e      	strb	r6, [r3, #21]
    8fd6:	0c16      	lsrs	r6, r2, #16
    8fd8:	759e      	strb	r6, [r3, #22]
    8fda:	0e12      	lsrs	r2, r2, #24
    8fdc:	75da      	strb	r2, [r3, #23]
	RegParams.pJoinBackoffTimer = &RegParams.joinBackoffTimer;
    8fde:	001a      	movs	r2, r3
    8fe0:	323d      	adds	r2, #61	; 0x3d
    8fe2:	761a      	strb	r2, [r3, #24]
    8fe4:	0a16      	lsrs	r6, r2, #8
    8fe6:	765e      	strb	r6, [r3, #25]
    8fe8:	0c16      	lsrs	r6, r2, #16
    8fea:	769e      	strb	r6, [r3, #26]
    8fec:	0e12      	lsrs	r2, r2, #24
    8fee:	76da      	strb	r2, [r3, #27]
	RegParams.DefRx1DataRate = MAC_RX1_WINDOW_DATARATE_JP;
    8ff0:	2222      	movs	r2, #34	; 0x22
    8ff2:	5499      	strb	r1, [r3, r2]
	RegParams.DefRx2DataRate = MAC_RX2_WINDOW_DATARATE_JP;
    8ff4:	3201      	adds	r2, #1
    8ff6:	5499      	strb	r1, [r3, r2]
	RegParams.DefRx2Freq = MAC_RX2_WINDOW_FREQ_JP;	
    8ff8:	2200      	movs	r2, #0
    8ffa:	771a      	strb	r2, [r3, #28]
    8ffc:	3a16      	subs	r2, #22
    8ffe:	775a      	strb	r2, [r3, #29]
    9000:	321c      	adds	r2, #28
    9002:	779a      	strb	r2, [r3, #30]
    9004:	3231      	adds	r2, #49	; 0x31
    9006:	77da      	strb	r2, [r3, #31]
	RegParams.MinNewChIndex = MIN_CHANNEL_INDEX_JP;
    9008:	3a16      	subs	r2, #22
    900a:	5499      	strb	r1, [r3, r2]
	RegParams.FeaturesSupport = FEATURES_SUPPORTED_JP;
    900c:	2636      	movs	r6, #54	; 0x36
    900e:	3a01      	subs	r2, #1
    9010:	549e      	strb	r6, [r3, r2]
	RegParams.minDataRate = MAC_DATARATE_MIN_JP;
    9012:	3a19      	subs	r2, #25
    9014:	3e12      	subs	r6, #18
    9016:	559a      	strb	r2, [r3, r6]
	RegParams.maxDataRate = MAC_DATARATE_MAX_JP;
    9018:	3601      	adds	r6, #1
    901a:	559c      	strb	r4, [r3, r6]
	RegParams.cmnParams.paramsType2.LBTScanPeriod = LBT_SCAN_PERIOD_JP;
    901c:	3e20      	subs	r6, #32
    901e:	27be      	movs	r7, #190	; 0xbe
    9020:	37ff      	adds	r7, #255	; 0xff
    9022:	55de      	strb	r6, [r3, r7]
	RegParams.cmnParams.paramsType2.LBTSignalThreshold = LBT_SIGNAL_THRESHOLD_JP;
    9024:	3f0e      	subs	r7, #14
    9026:	3fff      	subs	r7, #255	; 0xff
    9028:	46bc      	mov	ip, r7
    902a:	370f      	adds	r7, #15
    902c:	37ff      	adds	r7, #255	; 0xff
    902e:	4664      	mov	r4, ip
    9030:	55dc      	strb	r4, [r3, r7]
	RegParams.cmnParams.paramsType2.LBT_RSSISamplesCount = LBT_RSSI_SAMPLES_COUNT_JP;
    9032:	27c0      	movs	r7, #192	; 0xc0
    9034:	37ff      	adds	r7, #255	; 0xff
    9036:	55de      	strb	r6, [r3, r7]
	RegParams.cmnParams.paramsType2.minNonDefChId = 2;
    9038:	36bc      	adds	r6, #188	; 0xbc
    903a:	36ff      	adds	r6, #255	; 0xff
    903c:	5599      	strb	r1, [r3, r6]
	RegParams.Rx1DrOffset = 7;
    903e:	312a      	adds	r1, #42	; 0x2a
    9040:	545a      	strb	r2, [r3, r1]
	RegParams.maxTxPwrIndx = 7;
    9042:	3101      	adds	r1, #1
    9044:	545a      	strb	r2, [r3, r1]
	RegParams.maxTxPwr = DEFAULT_EIRP_JP;
    9046:	3221      	adds	r2, #33	; 0x21
    9048:	549d      	strb	r5, [r3, r2]
	RegParams.cmnParams.paramsType2.LBTTimer.timerId = regTimerId[0];
    904a:	4a5a      	ldr	r2, [pc, #360]	; (91b4 <LORAReg_InitJP+0x26c>)
    904c:	7815      	ldrb	r5, [r2, #0]
    904e:	3180      	adds	r1, #128	; 0x80
    9050:	31ff      	adds	r1, #255	; 0xff
    9052:	545d      	strb	r5, [r3, r1]
	RegParams.pDutyCycleTimer->timerId = regTimerId[1];
    9054:	7855      	ldrb	r5, [r2, #1]
    9056:	2168      	movs	r1, #104	; 0x68
    9058:	31ff      	adds	r1, #255	; 0xff
    905a:	545d      	strb	r5, [r3, r1]
	RegParams.pJoinBackoffTimer->timerId = regTimerId[2];
    905c:	7895      	ldrb	r5, [r2, #2]
    905e:	392b      	subs	r1, #43	; 0x2b
    9060:	39ff      	subs	r1, #255	; 0xff
    9062:	545d      	strb	r5, [r3, r1]
    RegParams.pJoinDutyCycleTimer->timerId = regTimerId[3];
    9064:	78d1      	ldrb	r1, [r2, #3]
    9066:	223c      	movs	r2, #60	; 0x3c
    9068:	5499      	strb	r1, [r3, r2]
	RegParams.pJoinDutyCycleTimer->remainingtime =0;
    906a:	2100      	movs	r1, #0
    906c:	3a04      	subs	r2, #4
    906e:	5499      	strb	r1, [r3, r2]
    9070:	3201      	adds	r2, #1
    9072:	5499      	strb	r1, [r3, r2]
    9074:	3201      	adds	r2, #1
    9076:	5499      	strb	r1, [r3, r2]
    9078:	3201      	adds	r2, #1
    907a:	5499      	strb	r1, [r3, r2]
	RegParams.joinbccount =0;
    907c:	3207      	adds	r2, #7
    907e:	4641      	mov	r1, r8
    9080:	5499      	strb	r1, [r3, r2]
	RegParams.joinDutyCycleTimeout =0;
    9082:	001a      	movs	r2, r3
    9084:	323e      	adds	r2, #62	; 0x3e
    9086:	2100      	movs	r1, #0
    9088:	7011      	strb	r1, [r2, #0]
    908a:	7051      	strb	r1, [r2, #1]
    908c:	7091      	strb	r1, [r2, #2]
    908e:	70d1      	strb	r1, [r2, #3]
	RegParams.cmnParams.paramsType2.txParams.uplinkDwellTime = 1;
    9090:	31c3      	adds	r1, #195	; 0xc3
    9092:	31ff      	adds	r1, #255	; 0xff
    9094:	5c5a      	ldrb	r2, [r3, r1]
    9096:	2401      	movs	r4, #1
    9098:	4322      	orrs	r2, r4
	RegParams.cmnParams.paramsType2.txParams.downlinkDwellTime = 1;
    909a:	2402      	movs	r4, #2
    909c:	4322      	orrs	r2, r4
    909e:	545a      	strb	r2, [r3, r1]
	RegParams.band = ismBand;
    90a0:	222e      	movs	r2, #46	; 0x2e
    90a2:	5498      	strb	r0, [r3, r2]
		result = LORAWAN_INVALID_PARAMETER;
    90a4:	240a      	movs	r4, #10
	if(ismBand == ISM_JPN923)
    90a6:	2805      	cmp	r0, #5
    90a8:	d00a      	beq.n	90c0 <LORAReg_InitJP+0x178>
    LORAREG_InitGetAttrFnPtrsJP();
    90aa:	4b43      	ldr	r3, [pc, #268]	; (91b8 <LORAReg_InitJP+0x270>)
    90ac:	4798      	blx	r3
	LORAREG_InitValidateAttrFnPtrsJP();
    90ae:	4b43      	ldr	r3, [pc, #268]	; (91bc <LORAReg_InitJP+0x274>)
    90b0:	4798      	blx	r3
	LORAREG_InitSetAttrFnPtrsJP();
    90b2:	4b43      	ldr	r3, [pc, #268]	; (91c0 <LORAReg_InitJP+0x278>)
    90b4:	4798      	blx	r3
}
    90b6:	0020      	movs	r0, r4
    90b8:	b006      	add	sp, #24
    90ba:	bc04      	pop	{r2}
    90bc:	4690      	mov	r8, r2
    90be:	bdf0      	pop	{r4, r5, r6, r7, pc}
    memcpy (RegParams.pChParams, DefaultChannels923JP, sizeof(DefaultChannels923JP) );
    90c0:	001c      	movs	r4, r3
    90c2:	0018      	movs	r0, r3
    90c4:	3083      	adds	r0, #131	; 0x83
    90c6:	3a2a      	subs	r2, #42	; 0x2a
    90c8:	493e      	ldr	r1, [pc, #248]	; (91c4 <LORAReg_InitJP+0x27c>)
    90ca:	4d3f      	ldr	r5, [pc, #252]	; (91c8 <LORAReg_InitJP+0x280>)
    90cc:	47a8      	blx	r5
	memcpy (RegParams.pOtherChParams, AdvChannels923JP, sizeof(AdvChannels923JP) );
    90ce:	0020      	movs	r0, r4
    90d0:	30a3      	adds	r0, #163	; 0xa3
    90d2:	2218      	movs	r2, #24
    90d4:	493d      	ldr	r1, [pc, #244]	; (91cc <LORAReg_InitJP+0x284>)
    90d6:	47a8      	blx	r5
	memcpy (RegParams.pSubBandParams, SubBandParamsJP923, sizeof(SubBandParamsJP923) );
    90d8:	0020      	movs	r0, r4
    90da:	30c4      	adds	r0, #196	; 0xc4
    90dc:	30ff      	adds	r0, #255	; 0xff
    90de:	2218      	movs	r2, #24
    90e0:	493b      	ldr	r1, [pc, #236]	; (91d0 <LORAReg_InitJP+0x288>)
    90e2:	47a8      	blx	r5
	memcpy (RegParams.cmnParams.paramsType2.subBandDutyCycle,SubBandDutyCycleJP923,sizeof(SubBandDutyCycleJP923));
    90e4:	0020      	movs	r0, r4
    90e6:	30ae      	adds	r0, #174	; 0xae
    90e8:	30ff      	adds	r0, #255	; 0xff
    90ea:	2204      	movs	r2, #4
    90ec:	4939      	ldr	r1, [pc, #228]	; (91d4 <LORAReg_InitJP+0x28c>)
    90ee:	47a8      	blx	r5
    90f0:	2302      	movs	r3, #2
    90f2:	2202      	movs	r2, #2
	    RegParams.pChParams[i].dataRange.value = UINT8_MAX;
    90f4:	492e      	ldr	r1, [pc, #184]	; (91b0 <LORAReg_InitJP+0x268>)
    90f6:	3fc0      	subs	r7, #192	; 0xc0
		RegParams.cmnParams.paramsType2.channelTimer[i] = 0;
    90f8:	2500      	movs	r5, #0
    for (i = 2; i < RegParams.maxChannels; i++)
    90fa:	3e97      	subs	r6, #151	; 0x97
    90fc:	3eff      	subs	r6, #255	; 0xff
	    RegParams.pChParams[i].dataRange.value = UINT8_MAX;
    90fe:	7908      	ldrb	r0, [r1, #4]
    9100:	794c      	ldrb	r4, [r1, #5]
    9102:	0224      	lsls	r4, r4, #8
    9104:	4304      	orrs	r4, r0
    9106:	7988      	ldrb	r0, [r1, #6]
    9108:	0400      	lsls	r0, r0, #16
    910a:	4304      	orrs	r4, r0
    910c:	79c8      	ldrb	r0, [r1, #7]
    910e:	0600      	lsls	r0, r0, #24
    9110:	4320      	orrs	r0, r4
    9112:	0054      	lsls	r4, r2, #1
    9114:	1820      	adds	r0, r4, r0
    9116:	7047      	strb	r7, [r0, #1]
		RegParams.cmnParams.paramsType2.channelTimer[i] = 0;
    9118:	3358      	adds	r3, #88	; 0x58
    911a:	009b      	lsls	r3, r3, #2
    911c:	18cb      	adds	r3, r1, r3
    911e:	721d      	strb	r5, [r3, #8]
    9120:	725d      	strb	r5, [r3, #9]
    9122:	729d      	strb	r5, [r3, #10]
    9124:	72dd      	strb	r5, [r3, #11]
    for (i = 2; i < RegParams.maxChannels; i++)
    9126:	3201      	adds	r2, #1
    9128:	b2d2      	uxtb	r2, r2
    912a:	0013      	movs	r3, r2
    912c:	5788      	ldrsb	r0, [r1, r6]
    912e:	4282      	cmp	r2, r0
    9130:	dbe5      	blt.n	90fe <LORAReg_InitJP+0x1b6>
	RegParams.lastUsedChannelIndex = UINT8_MAX;
    9132:	4c1f      	ldr	r4, [pc, #124]	; (91b0 <LORAReg_InitJP+0x268>)
    9134:	22ff      	movs	r2, #255	; 0xff
    9136:	232f      	movs	r3, #47	; 0x2f
    9138:	54e2      	strb	r2, [r4, r3]
		RegParams.cmnParams.paramsType2.txParams.maxEIRP = DEFAULT_EIRP_JP;//MAX_EIRP_JP;
    913a:	3aef      	subs	r2, #239	; 0xef
    913c:	23c2      	movs	r3, #194	; 0xc2
    913e:	33ff      	adds	r3, #255	; 0xff
    9140:	54e2      	strb	r2, [r4, r3]
		memcpy (RegParams.pDrParams, DefaultDrParamsJP, sizeof(DefaultDrParamsJP) );
    9142:	7820      	ldrb	r0, [r4, #0]
    9144:	7863      	ldrb	r3, [r4, #1]
    9146:	021b      	lsls	r3, r3, #8
    9148:	4303      	orrs	r3, r0
    914a:	78a0      	ldrb	r0, [r4, #2]
    914c:	0400      	lsls	r0, r0, #16
    914e:	4303      	orrs	r3, r0
    9150:	78e0      	ldrb	r0, [r4, #3]
    9152:	0600      	lsls	r0, r0, #24
    9154:	4318      	orrs	r0, r3
    9156:	3230      	adds	r2, #48	; 0x30
    9158:	491f      	ldr	r1, [pc, #124]	; (91d8 <LORAReg_InitJP+0x290>)
    915a:	4b1b      	ldr	r3, [pc, #108]	; (91c8 <LORAReg_InitJP+0x280>)
    915c:	4798      	blx	r3
		RegParams.regParamItems.fileid = PDS_FILE_REG_JPN_08_IDX;
    915e:	2307      	movs	r3, #7
    9160:	2107      	movs	r1, #7
    9162:	4a1e      	ldr	r2, [pc, #120]	; (91dc <LORAReg_InitJP+0x294>)
    9164:	54a1      	strb	r1, [r4, r2]
		RegParams.regParamItems.ch_param_1_item_id = PDS_REG_JPN_CH_PARAM_1;
    9166:	2100      	movs	r1, #0
    9168:	4a1d      	ldr	r2, [pc, #116]	; (91e0 <LORAReg_InitJP+0x298>)
    916a:	54a1      	strb	r1, [r4, r2]
    916c:	18a2      	adds	r2, r4, r2
    916e:	7053      	strb	r3, [r2, #1]
		RegParams.regParamItems.ch_param_2_item_id = PDS_REG_JPN_CH_PARAM_2;
    9170:	3101      	adds	r1, #1
    9172:	2284      	movs	r2, #132	; 0x84
    9174:	0092      	lsls	r2, r2, #2
    9176:	54a1      	strb	r1, [r4, r2]
    9178:	18a2      	adds	r2, r4, r2
    917a:	7053      	strb	r3, [r2, #1]
		RegParams.regParamItems.band_item_id = 0;
    917c:	2200      	movs	r2, #0
    917e:	4b19      	ldr	r3, [pc, #100]	; (91e4 <LORAReg_InitJP+0x29c>)
    9180:	54e2      	strb	r2, [r4, r3]
    9182:	18e3      	adds	r3, r4, r3
    9184:	705a      	strb	r2, [r3, #1]
		RegParams.regParamItems.lastUsedSB = 0;
    9186:	2383      	movs	r3, #131	; 0x83
    9188:	009b      	lsls	r3, r3, #2
    918a:	54e2      	strb	r2, [r4, r3]
    918c:	469c      	mov	ip, r3
    918e:	4464      	add	r4, ip
    9190:	2300      	movs	r3, #0
    9192:	7063      	strb	r3, [r4, #1]
		filemarks.fileMarkListAddr = aRegJpnFid1PdsOps;
    9194:	ab02      	add	r3, sp, #8
		filemarks.numItems =  (uint8_t)(PDS_REG_JPN_FID1_MAX_VALUE & 0x00FF);
    9196:	3202      	adds	r2, #2
    9198:	711a      	strb	r2, [r3, #4]
		filemarks.fIDcb = LorawanReg_JPN_Pds_Cb;
    919a:	4a13      	ldr	r2, [pc, #76]	; (91e8 <LORAReg_InitJP+0x2a0>)
		PDS_RegFile(PDS_FILE_REG_JPN_08_IDX,filemarks);
    919c:	9200      	str	r2, [sp, #0]
    919e:	4913      	ldr	r1, [pc, #76]	; (91ec <LORAReg_InitJP+0x2a4>)
    91a0:	9a03      	ldr	r2, [sp, #12]
    91a2:	4b13      	ldr	r3, [pc, #76]	; (91f0 <LORAReg_InitJP+0x2a8>)
    91a4:	2007      	movs	r0, #7
    91a6:	4c13      	ldr	r4, [pc, #76]	; (91f4 <LORAReg_InitJP+0x2ac>)
    91a8:	47a0      	blx	r4
	StackRetStatus_t result = LORAWAN_SUCCESS;
    91aa:	2408      	movs	r4, #8
    91ac:	e77d      	b.n	90aa <LORAReg_InitJP+0x162>
    91ae:	46c0      	nop			; (mov r8, r8)
    91b0:	200024d0 	.word	0x200024d0
    91b4:	200024cc 	.word	0x200024cc
    91b8:	0000d099 	.word	0x0000d099
    91bc:	0000d551 	.word	0x0000d551
    91c0:	0000d811 	.word	0x0000d811
    91c4:	0001ffa8 	.word	0x0001ffa8
    91c8:	00019d89 	.word	0x00019d89
    91cc:	0001ff90 	.word	0x0001ff90
    91d0:	0001fff0 	.word	0x0001fff0
    91d4:	0001ffec 	.word	0x0001ffec
    91d8:	0001ffac 	.word	0x0001ffac
    91dc:	0000020b 	.word	0x0000020b
    91e0:	0000020e 	.word	0x0000020e
    91e4:	00000212 	.word	0x00000212
    91e8:	00008f45 	.word	0x00008f45
    91ec:	200022c0 	.word	0x200022c0
    91f0:	00020008 	.word	0x00020008
    91f4:	0000e3c1 	.word	0x0000e3c1

000091f8 <LorawanReg_KR_Pds_Cb>:
#if (ENABLE_PDS == 1)
/* PDS Callback */
void LorawanReg_KR_Pds_Cb(void)
{

}
    91f8:	4770      	bx	lr
	...

000091fc <LORAReg_InitKR>:
{
    91fc:	b5f0      	push	{r4, r5, r6, r7, lr}
    91fe:	46de      	mov	lr, fp
    9200:	4657      	mov	r7, sl
    9202:	464e      	mov	r6, r9
    9204:	4645      	mov	r5, r8
    9206:	b5e0      	push	{r5, r6, r7, lr}
    9208:	b087      	sub	sp, #28
	RegParams.TxCurDataRate = MAC_DEF_TX_CURRENT_DATARATE_KR;
    920a:	4ba9      	ldr	r3, [pc, #676]	; (94b0 <LORAReg_InitKR+0x2b4>)
    920c:	2403      	movs	r4, #3
    920e:	2226      	movs	r2, #38	; 0x26
    9210:	549c      	strb	r4, [r3, r2]
	RegParams.maxChannels = MAX_CHANNELS_KR;
    9212:	2110      	movs	r1, #16
    9214:	3204      	adds	r2, #4
    9216:	5499      	strb	r1, [r3, r2]
	RegParams.maxSubBands = MAX_NUM_SUBBANDS_KR;
    9218:	3a29      	subs	r2, #41	; 0x29
    921a:	3119      	adds	r1, #25
    921c:	545a      	strb	r2, [r3, r1]
	RegParams.MacTxPower = MAC_DEF_TX_POWER_KR;
    921e:	3902      	subs	r1, #2
    9220:	545a      	strb	r2, [r3, r1]
	RegParams.pChParams = &RegParams.cmnParams.paramsType2.chParams[0];
    9222:	001a      	movs	r2, r3
    9224:	3283      	adds	r2, #131	; 0x83
    9226:	2100      	movs	r1, #0
    9228:	711a      	strb	r2, [r3, #4]
    922a:	0a15      	lsrs	r5, r2, #8
    922c:	715d      	strb	r5, [r3, #5]
    922e:	0c15      	lsrs	r5, r2, #16
    9230:	719d      	strb	r5, [r3, #6]
    9232:	0e12      	lsrs	r2, r2, #24
    9234:	71da      	strb	r2, [r3, #7]
	RegParams.pDrParams = &RegParams.cmnParams.paramsType2.DRParams[0];
    9236:	001a      	movs	r2, r3
    9238:	3243      	adds	r2, #67	; 0x43
    923a:	701a      	strb	r2, [r3, #0]
    923c:	0a15      	lsrs	r5, r2, #8
    923e:	705d      	strb	r5, [r3, #1]
    9240:	0c15      	lsrs	r5, r2, #16
    9242:	709d      	strb	r5, [r3, #2]
    9244:	0e12      	lsrs	r2, r2, #24
    9246:	70da      	strb	r2, [r3, #3]
	RegParams.pOtherChParams = &RegParams.cmnParams.paramsType2.othChParams[0];
    9248:	001a      	movs	r2, r3
    924a:	32a3      	adds	r2, #163	; 0xa3
    924c:	721a      	strb	r2, [r3, #8]
    924e:	0a15      	lsrs	r5, r2, #8
    9250:	725d      	strb	r5, [r3, #9]
    9252:	0c15      	lsrs	r5, r2, #16
    9254:	729d      	strb	r5, [r3, #10]
    9256:	0e12      	lsrs	r2, r2, #24
    9258:	72da      	strb	r2, [r3, #11]
	RegParams.pDutyCycleTimer = &RegParams.cmnParams.paramsType2.DutyCycleTimer;
    925a:	001a      	movs	r2, r3
    925c:	3264      	adds	r2, #100	; 0x64
    925e:	32ff      	adds	r2, #255	; 0xff
    9260:	741a      	strb	r2, [r3, #16]
    9262:	0a15      	lsrs	r5, r2, #8
    9264:	745d      	strb	r5, [r3, #17]
    9266:	0c15      	lsrs	r5, r2, #16
    9268:	749d      	strb	r5, [r3, #18]
    926a:	0e12      	lsrs	r2, r2, #24
    926c:	74da      	strb	r2, [r3, #19]
    RegParams.pJoinDutyCycleTimer = &RegParams.joinDutyCycleTimer;
    926e:	001a      	movs	r2, r3
    9270:	3234      	adds	r2, #52	; 0x34
    9272:	751a      	strb	r2, [r3, #20]
    9274:	0a15      	lsrs	r5, r2, #8
    9276:	755d      	strb	r5, [r3, #21]
    9278:	0c15      	lsrs	r5, r2, #16
    927a:	759d      	strb	r5, [r3, #22]
    927c:	0e12      	lsrs	r2, r2, #24
    927e:	75da      	strb	r2, [r3, #23]
	RegParams.pJoinBackoffTimer = &RegParams.joinBackoffTimer;
    9280:	001a      	movs	r2, r3
    9282:	323d      	adds	r2, #61	; 0x3d
    9284:	761a      	strb	r2, [r3, #24]
    9286:	0a15      	lsrs	r5, r2, #8
    9288:	765d      	strb	r5, [r3, #25]
    928a:	0c15      	lsrs	r5, r2, #16
    928c:	769d      	strb	r5, [r3, #26]
    928e:	0e12      	lsrs	r2, r2, #24
    9290:	76da      	strb	r2, [r3, #27]
	RegParams.DefRx1DataRate = MAC_RX1_WINDOW_DATARATE_KR;
    9292:	2222      	movs	r2, #34	; 0x22
    9294:	5499      	strb	r1, [r3, r2]
	RegParams.DefRx2DataRate = MAC_RX2_WINDOW_DATARATE_KR;
    9296:	3201      	adds	r2, #1
    9298:	5499      	strb	r1, [r3, r2]
	RegParams.DefRx2Freq = MAC_RX2_WINDOW_FREQ_KR;	
    929a:	3a43      	subs	r2, #67	; 0x43
    929c:	771a      	strb	r2, [r3, #28]
    929e:	3233      	adds	r2, #51	; 0x33
    92a0:	775a      	strb	r2, [r3, #29]
    92a2:	3a20      	subs	r2, #32
    92a4:	779a      	strb	r2, [r3, #30]
    92a6:	3243      	adds	r2, #67	; 0x43
    92a8:	77da      	strb	r2, [r3, #31]
	RegParams.MinNewChIndex = MIN_CHANNEL_INDEX_KR;
    92aa:	3a15      	subs	r2, #21
    92ac:	549c      	strb	r4, [r3, r2]
	RegParams.FeaturesSupport = FEATURES_SUPPORTED_KR;
    92ae:	2534      	movs	r5, #52	; 0x34
    92b0:	3a01      	subs	r2, #1
    92b2:	549d      	strb	r5, [r3, r2]
	RegParams.minDataRate = MAC_DATARATE_MIN_KR;
    92b4:	3a1b      	subs	r2, #27
    92b6:	3d10      	subs	r5, #16
    92b8:	555a      	strb	r2, [r3, r5]
	RegParams.maxDataRate = MAC_DATARATE_MAX_KR;
    92ba:	3501      	adds	r5, #1
    92bc:	5559      	strb	r1, [r3, r5]
	RegParams.cmnParams.paramsType2.LBTScanPeriod = LBT_SCAN_PERIOD_KR;
    92be:	3d1b      	subs	r5, #27
    92c0:	26be      	movs	r6, #190	; 0xbe
    92c2:	36ff      	adds	r6, #255	; 0xff
    92c4:	559d      	strb	r5, [r3, r6]
	RegParams.cmnParams.paramsType2.LBTSignalThreshold = LBT_SIGNAL_THRESHOLD_KR;
    92c6:	27bf      	movs	r7, #191	; 0xbf
    92c8:	3601      	adds	r6, #1
    92ca:	559f      	strb	r7, [r3, r6]
	RegParams.cmnParams.paramsType2.LBT_RSSISamplesCount = LBT_RSSI_SAMPLES_COUNT_KR;
    92cc:	26c0      	movs	r6, #192	; 0xc0
    92ce:	36ff      	adds	r6, #255	; 0xff
    92d0:	559d      	strb	r5, [r3, r6]
	RegParams.cmnParams.paramsType2.minNonDefChId = 3;
    92d2:	35b7      	adds	r5, #183	; 0xb7
    92d4:	35ff      	adds	r5, #255	; 0xff
    92d6:	555c      	strb	r4, [r3, r5]
	RegParams.Rx1DrOffset = 5;
    92d8:	3429      	adds	r4, #41	; 0x29
    92da:	551a      	strb	r2, [r3, r4]
	RegParams.maxTxPwrIndx = 7;
    92dc:	3c25      	subs	r4, #37	; 0x25
    92de:	3228      	adds	r2, #40	; 0x28
    92e0:	549c      	strb	r4, [r3, r2]
	RegParams.maxTxPwr = DEFAULT_EIRP_KR_HF;
    92e2:	3407      	adds	r4, #7
    92e4:	3a05      	subs	r2, #5
    92e6:	549c      	strb	r4, [r3, r2]
	RegParams.cmnParams.paramsType2.LBTTimer.timerId = regTimerId[0];
    92e8:	4a72      	ldr	r2, [pc, #456]	; (94b4 <LORAReg_InitKR+0x2b8>)
    92ea:	7815      	ldrb	r5, [r2, #0]
    92ec:	349f      	adds	r4, #159	; 0x9f
    92ee:	34ff      	adds	r4, #255	; 0xff
    92f0:	551d      	strb	r5, [r3, r4]
	RegParams.pJoinBackoffTimer->timerId = regTimerId[1];
    92f2:	7855      	ldrb	r5, [r2, #1]
    92f4:	3c70      	subs	r4, #112	; 0x70
    92f6:	3cff      	subs	r4, #255	; 0xff
    92f8:	551d      	strb	r5, [r3, r4]
    RegParams.pJoinDutyCycleTimer->timerId = regTimerId[2];
    92fa:	7894      	ldrb	r4, [r2, #2]
    92fc:	223c      	movs	r2, #60	; 0x3c
    92fe:	549c      	strb	r4, [r3, r2]
	RegParams.pJoinDutyCycleTimer->remainingtime =0;
    9300:	2400      	movs	r4, #0
    9302:	3a04      	subs	r2, #4
    9304:	549c      	strb	r4, [r3, r2]
    9306:	3201      	adds	r2, #1
    9308:	549c      	strb	r4, [r3, r2]
    930a:	3201      	adds	r2, #1
    930c:	549c      	strb	r4, [r3, r2]
    930e:	3201      	adds	r2, #1
    9310:	549c      	strb	r4, [r3, r2]
	RegParams.joinbccount =0;
    9312:	3207      	adds	r2, #7
    9314:	5499      	strb	r1, [r3, r2]
	RegParams.joinDutyCycleTimeout =0;
    9316:	001a      	movs	r2, r3
    9318:	323e      	adds	r2, #62	; 0x3e
    931a:	7011      	strb	r1, [r2, #0]
    931c:	7051      	strb	r1, [r2, #1]
    931e:	7091      	strb	r1, [r2, #2]
    9320:	70d1      	strb	r1, [r2, #3]
	RegParams.band = ismBand;
    9322:	222e      	movs	r2, #46	; 0x2e
    9324:	5498      	strb	r0, [r3, r2]
		result = UNSUPPORTED_BAND;
    9326:	34c6      	adds	r4, #198	; 0xc6
	if(ismBand == ISM_KR920)
    9328:	2804      	cmp	r0, #4
    932a:	d00d      	beq.n	9348 <LORAReg_InitKR+0x14c>
    LORAREG_InitGetAttrFnPtrsKR();
    932c:	4b62      	ldr	r3, [pc, #392]	; (94b8 <LORAReg_InitKR+0x2bc>)
    932e:	4798      	blx	r3
	LORAREG_InitValidateAttrFnPtrsKR();
    9330:	4b62      	ldr	r3, [pc, #392]	; (94bc <LORAReg_InitKR+0x2c0>)
    9332:	4798      	blx	r3
	LORAREG_InitSetAttrFnPtrsKR();
    9334:	4b62      	ldr	r3, [pc, #392]	; (94c0 <LORAReg_InitKR+0x2c4>)
    9336:	4798      	blx	r3
}
    9338:	0020      	movs	r0, r4
    933a:	b007      	add	sp, #28
    933c:	bc3c      	pop	{r2, r3, r4, r5}
    933e:	4690      	mov	r8, r2
    9340:	4699      	mov	r9, r3
    9342:	46a2      	mov	sl, r4
    9344:	46ab      	mov	fp, r5
    9346:	bdf0      	pop	{r4, r5, r6, r7, pc}
    memcpy (RegParams.pChParams, DefaultChannels920KR, sizeof(DefaultChannels920KR) );
    9348:	001c      	movs	r4, r3
    934a:	0018      	movs	r0, r3
    934c:	3083      	adds	r0, #131	; 0x83
    934e:	3a28      	subs	r2, #40	; 0x28
    9350:	495c      	ldr	r1, [pc, #368]	; (94c4 <LORAReg_InitKR+0x2c8>)
    9352:	4d5d      	ldr	r5, [pc, #372]	; (94c8 <LORAReg_InitKR+0x2cc>)
    9354:	47a8      	blx	r5
	memcpy (RegParams.pOtherChParams, AdvChannels920KR, sizeof(AdvChannels920KR) );
    9356:	0020      	movs	r0, r4
    9358:	30a3      	adds	r0, #163	; 0xa3
    935a:	2224      	movs	r2, #36	; 0x24
    935c:	495b      	ldr	r1, [pc, #364]	; (94cc <LORAReg_InitKR+0x2d0>)
    935e:	47a8      	blx	r5
    9360:	2103      	movs	r1, #3
    9362:	2003      	movs	r0, #3
	    RegParams.pChParams[i].dataRange.value = UINT8_MAX;
    9364:	4b52      	ldr	r3, [pc, #328]	; (94b0 <LORAReg_InitKR+0x2b4>)
    9366:	22ff      	movs	r2, #255	; 0xff
    9368:	4692      	mov	sl, r2
		RegParams.pChParams[i].status = DISABLED;
    936a:	2400      	movs	r4, #0
		RegParams.cmnParams.paramsType2.txParams.maxEIRP = UINT8_MAX;
    936c:	22c2      	movs	r2, #194	; 0xc2
    936e:	32ff      	adds	r2, #255	; 0xff
    9370:	4694      	mov	ip, r2
    9372:	4657      	mov	r7, sl
    for (i = 3; i < RegParams.maxChannels; i++)
    9374:	3a98      	subs	r2, #152	; 0x98
    9376:	3aff      	subs	r2, #255	; 0xff
    9378:	4693      	mov	fp, r2
	    RegParams.pChParams[i].dataRange.value = UINT8_MAX;
    937a:	0042      	lsls	r2, r0, #1
    937c:	791e      	ldrb	r6, [r3, #4]
    937e:	46b0      	mov	r8, r6
    9380:	795e      	ldrb	r6, [r3, #5]
    9382:	0236      	lsls	r6, r6, #8
    9384:	46b1      	mov	r9, r6
    9386:	4646      	mov	r6, r8
    9388:	464d      	mov	r5, r9
    938a:	432e      	orrs	r6, r5
    938c:	799d      	ldrb	r5, [r3, #6]
    938e:	042d      	lsls	r5, r5, #16
    9390:	432e      	orrs	r6, r5
    9392:	79dd      	ldrb	r5, [r3, #7]
    9394:	062d      	lsls	r5, r5, #24
    9396:	432e      	orrs	r6, r5
    9398:	46b0      	mov	r8, r6
    939a:	4490      	add	r8, r2
    939c:	4645      	mov	r5, r8
    939e:	4656      	mov	r6, sl
    93a0:	706e      	strb	r6, [r5, #1]
		RegParams.pChParams[i].status = DISABLED;
    93a2:	791d      	ldrb	r5, [r3, #4]
    93a4:	46a8      	mov	r8, r5
    93a6:	795d      	ldrb	r5, [r3, #5]
    93a8:	022d      	lsls	r5, r5, #8
    93aa:	4646      	mov	r6, r8
    93ac:	432e      	orrs	r6, r5
    93ae:	799d      	ldrb	r5, [r3, #6]
    93b0:	042d      	lsls	r5, r5, #16
    93b2:	432e      	orrs	r6, r5
    93b4:	79dd      	ldrb	r5, [r3, #7]
    93b6:	062d      	lsls	r5, r5, #24
    93b8:	432e      	orrs	r6, r5
    93ba:	54b4      	strb	r4, [r6, r2]
		RegParams.pOtherChParams[i].joinRequestChannel = DISABLED;
    93bc:	7a1d      	ldrb	r5, [r3, #8]
    93be:	46a8      	mov	r8, r5
    93c0:	7a5d      	ldrb	r5, [r3, #9]
    93c2:	022d      	lsls	r5, r5, #8
    93c4:	4646      	mov	r6, r8
    93c6:	432e      	orrs	r6, r5
    93c8:	7a9d      	ldrb	r5, [r3, #10]
    93ca:	042d      	lsls	r5, r5, #16
    93cc:	432e      	orrs	r6, r5
    93ce:	7add      	ldrb	r5, [r3, #11]
    93d0:	062d      	lsls	r5, r5, #24
    93d2:	432e      	orrs	r6, r5
    93d4:	46b0      	mov	r8, r6
    93d6:	1812      	adds	r2, r2, r0
    93d8:	0092      	lsls	r2, r2, #2
    93da:	4442      	add	r2, r8
    93dc:	7254      	strb	r4, [r2, #9]
		RegParams.cmnParams.paramsType2.txParams.maxEIRP = UINT8_MAX;
    93de:	4662      	mov	r2, ip
    93e0:	549f      	strb	r7, [r3, r2]
		RegParams.cmnParams.paramsType2.channelTimer[i] = 0;
    93e2:	000a      	movs	r2, r1
    93e4:	3258      	adds	r2, #88	; 0x58
    93e6:	0092      	lsls	r2, r2, #2
    93e8:	189a      	adds	r2, r3, r2
    93ea:	7214      	strb	r4, [r2, #8]
    93ec:	7254      	strb	r4, [r2, #9]
    93ee:	7294      	strb	r4, [r2, #10]
    93f0:	72d4      	strb	r4, [r2, #11]
    for (i = 3; i < RegParams.maxChannels; i++)
    93f2:	3001      	adds	r0, #1
    93f4:	b2c0      	uxtb	r0, r0
    93f6:	0001      	movs	r1, r0
    93f8:	465a      	mov	r2, fp
    93fa:	569a      	ldrsb	r2, [r3, r2]
    93fc:	4290      	cmp	r0, r2
    93fe:	dbbc      	blt.n	937a <LORAReg_InitKR+0x17e>
	RegParams.lastUsedChannelIndex = UINT8_MAX;
    9400:	4c2b      	ldr	r4, [pc, #172]	; (94b0 <LORAReg_InitKR+0x2b4>)
    9402:	22ff      	movs	r2, #255	; 0xff
    9404:	232f      	movs	r3, #47	; 0x2f
    9406:	54e2      	strb	r2, [r4, r3]
		memcpy (RegParams.pDrParams, DefaultDrParamsKR, sizeof(DefaultDrParamsKR) );
    9408:	7820      	ldrb	r0, [r4, #0]
    940a:	7863      	ldrb	r3, [r4, #1]
    940c:	021b      	lsls	r3, r3, #8
    940e:	4303      	orrs	r3, r0
    9410:	78a0      	ldrb	r0, [r4, #2]
    9412:	0400      	lsls	r0, r0, #16
    9414:	4303      	orrs	r3, r0
    9416:	78e0      	ldrb	r0, [r4, #3]
    9418:	0600      	lsls	r0, r0, #24
    941a:	4318      	orrs	r0, r3
    941c:	3acf      	subs	r2, #207	; 0xcf
    941e:	492c      	ldr	r1, [pc, #176]	; (94d0 <LORAReg_InitKR+0x2d4>)
    9420:	4b29      	ldr	r3, [pc, #164]	; (94c8 <LORAReg_InitKR+0x2cc>)
    9422:	4798      	blx	r3
		for(int8_t dataRate = 0; dataRate < RegParams.maxDataRate; dataRate++)
    9424:	2325      	movs	r3, #37	; 0x25
    9426:	5ce3      	ldrb	r3, [r4, r3]
    9428:	2b00      	cmp	r3, #0
    942a:	dd18      	ble.n	945e <LORAReg_InitKR+0x262>
			RegParams.pDrParams[dataRate].modulation = MODULATION_LORA;
    942c:	4a20      	ldr	r2, [pc, #128]	; (94b0 <LORAReg_InitKR+0x2b4>)
    942e:	7811      	ldrb	r1, [r2, #0]
    9430:	7853      	ldrb	r3, [r2, #1]
    9432:	021b      	lsls	r3, r3, #8
    9434:	430b      	orrs	r3, r1
    9436:	7891      	ldrb	r1, [r2, #2]
    9438:	0409      	lsls	r1, r1, #16
    943a:	430b      	orrs	r3, r1
    943c:	78d1      	ldrb	r1, [r2, #3]
    943e:	0609      	lsls	r1, r1, #24
    9440:	4319      	orrs	r1, r3
    9442:	2300      	movs	r3, #0
    9444:	2601      	movs	r6, #1
			RegParams.pDrParams[dataRate].bandwidth = BW_125KHZ;
    9446:	2507      	movs	r5, #7
		for(int8_t dataRate = 0; dataRate < RegParams.maxDataRate; dataRate++)
    9448:	0014      	movs	r4, r2
    944a:	2025      	movs	r0, #37	; 0x25
			RegParams.pDrParams[dataRate].modulation = MODULATION_LORA;
    944c:	00da      	lsls	r2, r3, #3
    944e:	188a      	adds	r2, r1, r2
    9450:	71d6      	strb	r6, [r2, #7]
			RegParams.pDrParams[dataRate].bandwidth = BW_125KHZ;
    9452:	7195      	strb	r5, [r2, #6]
    9454:	3301      	adds	r3, #1
    9456:	b25b      	sxtb	r3, r3
		for(int8_t dataRate = 0; dataRate < RegParams.maxDataRate; dataRate++)
    9458:	5c22      	ldrb	r2, [r4, r0]
    945a:	4293      	cmp	r3, r2
    945c:	dbf6      	blt.n	944c <LORAReg_InitKR+0x250>
		RegParams.regParamItems.fileid = PDS_FILE_REG_KR_06_IDX;
    945e:	4b14      	ldr	r3, [pc, #80]	; (94b0 <LORAReg_InitKR+0x2b4>)
    9460:	2205      	movs	r2, #5
    9462:	2005      	movs	r0, #5
    9464:	491b      	ldr	r1, [pc, #108]	; (94d4 <LORAReg_InitKR+0x2d8>)
    9466:	5458      	strb	r0, [r3, r1]
		RegParams.regParamItems.ch_param_1_item_id = PDS_REG_KR_CH_PARAM_1;
    9468:	2000      	movs	r0, #0
    946a:	491b      	ldr	r1, [pc, #108]	; (94d8 <LORAReg_InitKR+0x2dc>)
    946c:	5458      	strb	r0, [r3, r1]
    946e:	1859      	adds	r1, r3, r1
    9470:	704a      	strb	r2, [r1, #1]
		RegParams.regParamItems.ch_param_2_item_id = PDS_REG_KR_CH_PARAM_2;
    9472:	3001      	adds	r0, #1
    9474:	2184      	movs	r1, #132	; 0x84
    9476:	0089      	lsls	r1, r1, #2
    9478:	5458      	strb	r0, [r3, r1]
    947a:	1859      	adds	r1, r3, r1
    947c:	704a      	strb	r2, [r1, #1]
		RegParams.regParamItems.band_item_id = 0;
    947e:	2100      	movs	r1, #0
    9480:	4a16      	ldr	r2, [pc, #88]	; (94dc <LORAReg_InitKR+0x2e0>)
    9482:	5499      	strb	r1, [r3, r2]
    9484:	189a      	adds	r2, r3, r2
    9486:	7051      	strb	r1, [r2, #1]
		RegParams.regParamItems.lastUsedSB = 0;
    9488:	2283      	movs	r2, #131	; 0x83
    948a:	0092      	lsls	r2, r2, #2
    948c:	5499      	strb	r1, [r3, r2]
    948e:	4694      	mov	ip, r2
    9490:	4463      	add	r3, ip
    9492:	2200      	movs	r2, #0
    9494:	705a      	strb	r2, [r3, #1]
		filemarks.fileMarkListAddr = aRegKrFid1PdsOps;
    9496:	ab02      	add	r3, sp, #8
		filemarks.numItems =  (uint8_t)(PDS_REG_KR_FID1_MAX_VALUE & 0x00FF);
    9498:	3202      	adds	r2, #2
    949a:	711a      	strb	r2, [r3, #4]
		filemarks.fIDcb = LorawanReg_KR_Pds_Cb;
    949c:	4a10      	ldr	r2, [pc, #64]	; (94e0 <LORAReg_InitKR+0x2e4>)
		PDS_RegFile(PDS_FILE_REG_KR_06_IDX,filemarks);
    949e:	9200      	str	r2, [sp, #0]
    94a0:	4910      	ldr	r1, [pc, #64]	; (94e4 <LORAReg_InitKR+0x2e8>)
    94a2:	9a03      	ldr	r2, [sp, #12]
    94a4:	4b10      	ldr	r3, [pc, #64]	; (94e8 <LORAReg_InitKR+0x2ec>)
    94a6:	3004      	adds	r0, #4
    94a8:	4c10      	ldr	r4, [pc, #64]	; (94ec <LORAReg_InitKR+0x2f0>)
    94aa:	47a0      	blx	r4
	StackRetStatus_t result = LORAWAN_SUCCESS;
    94ac:	2408      	movs	r4, #8
    94ae:	e73d      	b.n	932c <LORAReg_InitKR+0x130>
    94b0:	200024d0 	.word	0x200024d0
    94b4:	200024cc 	.word	0x200024cc
    94b8:	0000d1f5 	.word	0x0000d1f5
    94bc:	0000d5bd 	.word	0x0000d5bd
    94c0:	0000d891 	.word	0x0000d891
    94c4:	0002003c 	.word	0x0002003c
    94c8:	00019d89 	.word	0x00019d89
    94cc:	00020018 	.word	0x00020018
    94d0:	00020044 	.word	0x00020044
    94d4:	0000020b 	.word	0x0000020b
    94d8:	0000020e 	.word	0x0000020e
    94dc:	00000212 	.word	0x00000212
    94e0:	000091f9 	.word	0x000091f9
    94e4:	200022c4 	.word	0x200022c4
    94e8:	00020074 	.word	0x00020074
    94ec:	0000e3c1 	.word	0x0000e3c1

000094f0 <LorawanReg_NA_Pds_Cb>:

#if (ENABLE_PDS == 1)
void LorawanReg_NA_Pds_Cb(void)
{
	
}
    94f0:	4770      	bx	lr
	...

000094f4 <LORAReg_InitNA>:
{
    94f4:	b5f0      	push	{r4, r5, r6, r7, lr}
    94f6:	46de      	mov	lr, fp
    94f8:	4657      	mov	r7, sl
    94fa:	464e      	mov	r6, r9
    94fc:	4645      	mov	r5, r8
    94fe:	b5e0      	push	{r5, r6, r7, lr}
    9500:	b089      	sub	sp, #36	; 0x24
    9502:	9003      	str	r0, [sp, #12]
    RegParams.TxCurDataRate = MAC_DEF_TX_CURRENT_DATARATE_NA;
    9504:	4c7d      	ldr	r4, [pc, #500]	; (96fc <LORAReg_InitNA+0x208>)
    9506:	2702      	movs	r7, #2
    9508:	2302      	movs	r3, #2
    950a:	469b      	mov	fp, r3
    950c:	2326      	movs	r3, #38	; 0x26
    950e:	54e7      	strb	r7, [r4, r3]
	RegParams.maxChannels = MAX_CHANNELS_T1;
    9510:	2248      	movs	r2, #72	; 0x48
    9512:	3304      	adds	r3, #4
    9514:	54e2      	strb	r2, [r4, r3]
	RegParams.MacTxPower = MAC_DEF_TX_POWER_NA;
    9516:	3a41      	subs	r2, #65	; 0x41
    9518:	3b03      	subs	r3, #3
    951a:	54e2      	strb	r2, [r4, r3]
	RegParams.maxTxPwr = DEFAULT_EIRP_NA;
    951c:	3217      	adds	r2, #23
    951e:	3301      	adds	r3, #1
    9520:	54e2      	strb	r2, [r4, r3]
	RegParams.pChParams = &RegParams.cmnParams.paramsType1.chParams[0];
    9522:	0023      	movs	r3, r4
    9524:	33b3      	adds	r3, #179	; 0xb3
    9526:	0018      	movs	r0, r3
    9528:	2500      	movs	r5, #0
    952a:	7123      	strb	r3, [r4, #4]
    952c:	0a1b      	lsrs	r3, r3, #8
    952e:	7163      	strb	r3, [r4, #5]
    9530:	0c03      	lsrs	r3, r0, #16
    9532:	71a3      	strb	r3, [r4, #6]
    9534:	0e03      	lsrs	r3, r0, #24
    9536:	71e3      	strb	r3, [r4, #7]
	RegParams.pDrParams = &RegParams.cmnParams.paramsType1.DRParams[0];
    9538:	0026      	movs	r6, r4
    953a:	3643      	adds	r6, #67	; 0x43
    953c:	7026      	strb	r6, [r4, #0]
    953e:	0a33      	lsrs	r3, r6, #8
    9540:	7063      	strb	r3, [r4, #1]
    9542:	0c33      	lsrs	r3, r6, #16
    9544:	70a3      	strb	r3, [r4, #2]
    9546:	0e33      	lsrs	r3, r6, #24
    9548:	70e3      	strb	r3, [r4, #3]
	RegParams.MinNewChIndex = 0xFF;
    954a:	2321      	movs	r3, #33	; 0x21
    954c:	32e1      	adds	r2, #225	; 0xe1
    954e:	54e2      	strb	r2, [r4, r3]
	RegParams.DefRx1DataRate = MAC_RX1_WINDOW_DATARATE_NA;
    9550:	3add      	subs	r2, #221	; 0xdd
    9552:	3b17      	subs	r3, #23
    9554:	54a3      	strb	r3, [r4, r2]
	RegParams.DefRx2DataRate = MAC_RX2_WINDOW_DATARATE_NA;
    9556:	3a1a      	subs	r2, #26
    9558:	2108      	movs	r1, #8
    955a:	468c      	mov	ip, r1
    955c:	2123      	movs	r1, #35	; 0x23
    955e:	5462      	strb	r2, [r4, r1]
	RegParams.DefRx2Freq = MAC_RX2_WINDOW_FREQ_NA;
    9560:	3983      	subs	r1, #131	; 0x83
    9562:	4688      	mov	r8, r1
    9564:	7721      	strb	r1, [r4, #28]
    9566:	2170      	movs	r1, #112	; 0x70
    9568:	7761      	strb	r1, [r4, #29]
    956a:	4661      	mov	r1, ip
    956c:	77a1      	strb	r1, [r4, #30]
    956e:	2137      	movs	r1, #55	; 0x37
    9570:	77e1      	strb	r1, [r4, #31]
	RegParams.FeaturesSupport = FEATURES_SUPPORTED_NA;
    9572:	3917      	subs	r1, #23
    9574:	2338      	movs	r3, #56	; 0x38
    9576:	5463      	strb	r3, [r4, r1]
	RegParams.minDataRate = MAC_DATARATE_MIN_NA;
    9578:	391c      	subs	r1, #28
    957a:	4689      	mov	r9, r1
    957c:	3120      	adds	r1, #32
    957e:	464b      	mov	r3, r9
    9580:	5463      	strb	r3, [r4, r1]
	RegParams.maxDataRate = MAC_DATARATE_MAX_NA;
    9582:	2325      	movs	r3, #37	; 0x25
    9584:	54e5      	strb	r5, [r4, r3]
	RegParams.cmnParams.paramsType1.Max_125khzChan = MAX_CHANNELS_BANDWIDTH_125_AU_NA;
    9586:	2354      	movs	r3, #84	; 0x54
    9588:	33ff      	adds	r3, #255	; 0xff
    958a:	311c      	adds	r1, #28
    958c:	54e1      	strb	r1, [r4, r3]
	RegParams.cmnParams.paramsType1.Max_500khzChan = MAX_CHANNELS_BANDWIDTH_500_AU_NA;
    958e:	3301      	adds	r3, #1
    9590:	54e2      	strb	r2, [r4, r3]
	RegParams.cmnParams.paramsType1.minTxDR = DR0;
    9592:	2350      	movs	r3, #80	; 0x50
    9594:	33ff      	adds	r3, #255	; 0xff
    9596:	54e5      	strb	r5, [r4, r3]
	RegParams.cmnParams.paramsType1.maxTxDR = DR4;
    9598:	3301      	adds	r3, #1
    959a:	4649      	mov	r1, r9
    959c:	54e1      	strb	r1, [r4, r3]
	RegParams.cmnParams.paramsType1.minRxDR = DR8;
    959e:	2352      	movs	r3, #82	; 0x52
    95a0:	33ff      	adds	r3, #255	; 0xff
    95a2:	54e2      	strb	r2, [r4, r3]
	RegParams.cmnParams.paramsType1.maxRxDR = DR13;
    95a4:	3b45      	subs	r3, #69	; 0x45
    95a6:	3bff      	subs	r3, #255	; 0xff
    95a8:	324b      	adds	r2, #75	; 0x4b
    95aa:	32ff      	adds	r2, #255	; 0xff
    95ac:	54a3      	strb	r3, [r4, r2]
	RegParams.cmnParams.paramsType1.RxParamWindowOffset1 = 10;
    95ae:	2256      	movs	r2, #86	; 0x56
    95b0:	32ff      	adds	r2, #255	; 0xff
    95b2:	230a      	movs	r3, #10
    95b4:	54a3      	strb	r3, [r4, r2]
	RegParams.pJoinDutyCycleTimer = &RegParams.joinDutyCycleTimer;
    95b6:	0022      	movs	r2, r4
    95b8:	3234      	adds	r2, #52	; 0x34
    95ba:	7522      	strb	r2, [r4, #20]
    95bc:	0a13      	lsrs	r3, r2, #8
    95be:	7563      	strb	r3, [r4, #21]
    95c0:	0c13      	lsrs	r3, r2, #16
    95c2:	75a3      	strb	r3, [r4, #22]
    95c4:	0e12      	lsrs	r2, r2, #24
    95c6:	75e2      	strb	r2, [r4, #23]
	RegParams.pJoinBackoffTimer = &RegParams.joinBackoffTimer;
    95c8:	0022      	movs	r2, r4
    95ca:	323d      	adds	r2, #61	; 0x3d
    95cc:	7622      	strb	r2, [r4, #24]
    95ce:	0a13      	lsrs	r3, r2, #8
    95d0:	7663      	strb	r3, [r4, #25]
    95d2:	0c13      	lsrs	r3, r2, #16
    95d4:	76a3      	strb	r3, [r4, #26]
    95d6:	0e12      	lsrs	r2, r2, #24
    95d8:	76e2      	strb	r2, [r4, #27]
	RegParams.cmnParams.paramsType1.UpStreamCh0Freq = UPSTREAM_CH0_NA;
    95da:	2360      	movs	r3, #96	; 0x60
    95dc:	2244      	movs	r2, #68	; 0x44
    95de:	32ff      	adds	r2, #255	; 0xff
    95e0:	54a3      	strb	r3, [r4, r2]
    95e2:	0022      	movs	r2, r4
    95e4:	3244      	adds	r2, #68	; 0x44
    95e6:	32ff      	adds	r2, #255	; 0xff
    95e8:	2301      	movs	r3, #1
    95ea:	7053      	strb	r3, [r2, #1]
    95ec:	2338      	movs	r3, #56	; 0x38
    95ee:	425b      	negs	r3, r3
    95f0:	7093      	strb	r3, [r2, #2]
    95f2:	2335      	movs	r3, #53	; 0x35
    95f4:	70d3      	strb	r3, [r2, #3]
	RegParams.cmnParams.paramsType1.UpStreamCh64Freq = UPSTREAM_CH64_NA;
    95f6:	2340      	movs	r3, #64	; 0x40
    95f8:	425b      	negs	r3, r3
    95fa:	2248      	movs	r2, #72	; 0x48
    95fc:	32ff      	adds	r2, #255	; 0xff
    95fe:	54a3      	strb	r3, [r4, r2]
    9600:	0022      	movs	r2, r4
    9602:	3248      	adds	r2, #72	; 0x48
    9604:	32ff      	adds	r2, #255	; 0xff
    9606:	2351      	movs	r3, #81	; 0x51
    9608:	425b      	negs	r3, r3
    960a:	7053      	strb	r3, [r2, #1]
    960c:	232e      	movs	r3, #46	; 0x2e
    960e:	425b      	negs	r3, r3
    9610:	7093      	strb	r3, [r2, #2]
    9612:	2335      	movs	r3, #53	; 0x35
    9614:	70d3      	strb	r3, [r2, #3]
	RegParams.cmnParams.paramsType1.DownStreamCh0Freq = DOWNSTREAM_CH0_NA;
    9616:	224c      	movs	r2, #76	; 0x4c
    9618:	32ff      	adds	r2, #255	; 0xff
    961a:	4643      	mov	r3, r8
    961c:	54a3      	strb	r3, [r4, r2]
    961e:	0022      	movs	r2, r4
    9620:	324c      	adds	r2, #76	; 0x4c
    9622:	32ff      	adds	r2, #255	; 0xff
    9624:	2370      	movs	r3, #112	; 0x70
    9626:	7053      	strb	r3, [r2, #1]
    9628:	4663      	mov	r3, ip
    962a:	7093      	strb	r3, [r2, #2]
    962c:	2337      	movs	r3, #55	; 0x37
    962e:	70d3      	strb	r3, [r2, #3]
	RegParams.Rx1DrOffset = 3;
    9630:	2303      	movs	r3, #3
    9632:	222c      	movs	r2, #44	; 0x2c
    9634:	54a3      	strb	r3, [r4, r2]
	RegParams.maxTxPwrIndx = 10;
    9636:	3201      	adds	r2, #1
    9638:	230a      	movs	r3, #10
    963a:	54a3      	strb	r3, [r4, r2]
	RegParams.cmnParams.paramsType1.lastUsedSB = 0;
    963c:	2358      	movs	r3, #88	; 0x58
    963e:	33ff      	adds	r3, #255	; 0xff
    9640:	54e5      	strb	r5, [r4, r3]
	RegParams.pJoinBackoffTimer->timerId = regTimerId[0];
    9642:	4b2f      	ldr	r3, [pc, #188]	; (9700 <LORAReg_InitNA+0x20c>)
    9644:	781a      	ldrb	r2, [r3, #0]
    9646:	4694      	mov	ip, r2
    9648:	223d      	movs	r2, #61	; 0x3d
    964a:	4661      	mov	r1, ip
    964c:	54a1      	strb	r1, [r4, r2]
	RegParams.pJoinDutyCycleTimer->timerId = regTimerId[1];
    964e:	785a      	ldrb	r2, [r3, #1]
    9650:	233c      	movs	r3, #60	; 0x3c
    9652:	54e2      	strb	r2, [r4, r3]
	RegParams.pJoinDutyCycleTimer->remainingtime =0;
    9654:	2300      	movs	r3, #0
    9656:	2238      	movs	r2, #56	; 0x38
    9658:	54a3      	strb	r3, [r4, r2]
    965a:	2200      	movs	r2, #0
    965c:	3339      	adds	r3, #57	; 0x39
    965e:	54e2      	strb	r2, [r4, r3]
    9660:	3301      	adds	r3, #1
    9662:	54e2      	strb	r2, [r4, r3]
    9664:	3301      	adds	r3, #1
    9666:	54e2      	strb	r2, [r4, r3]
	RegParams.joinbccount =0;
    9668:	3307      	adds	r3, #7
    966a:	54e5      	strb	r5, [r4, r3]
	RegParams.joinDutyCycleTimeout =0;
    966c:	0023      	movs	r3, r4
    966e:	333e      	adds	r3, #62	; 0x3e
    9670:	701a      	strb	r2, [r3, #0]
    9672:	705a      	strb	r2, [r3, #1]
    9674:	709a      	strb	r2, [r3, #2]
    9676:	70da      	strb	r2, [r3, #3]
	RegParams.band = ismBand;
    9678:	232e      	movs	r3, #46	; 0x2e
    967a:	466a      	mov	r2, sp
    967c:	7b12      	ldrb	r2, [r2, #12]
    967e:	54e2      	strb	r2, [r4, r3]
	memcpy (RegParams.pChParams, DefaultChannels915, sizeof(DefaultChannels915) );
    9680:	2290      	movs	r2, #144	; 0x90
    9682:	4920      	ldr	r1, [pc, #128]	; (9704 <LORAReg_InitNA+0x210>)
    9684:	4b20      	ldr	r3, [pc, #128]	; (9708 <LORAReg_InitNA+0x214>)
    9686:	4698      	mov	r8, r3
    9688:	4798      	blx	r3
	memcpy (RegParams.pDrParams, DefaultDrParamsNA, sizeof(DefaultDrParamsNA) );
    968a:	2270      	movs	r2, #112	; 0x70
    968c:	491f      	ldr	r1, [pc, #124]	; (970c <LORAReg_InitNA+0x218>)
    968e:	0030      	movs	r0, r6
    9690:	47c0      	blx	r8
	RegParams.cmnParams.paramsType1.alternativeChannel = 0;
    9692:	23ab      	movs	r3, #171	; 0xab
    9694:	005b      	lsls	r3, r3, #1
    9696:	54e5      	strb	r5, [r4, r3]
	RegParams.regParamItems.fileid = PDS_FILE_REG_NA_03_IDX;
    9698:	4b1d      	ldr	r3, [pc, #116]	; (9710 <LORAReg_InitNA+0x21c>)
    969a:	54e7      	strb	r7, [r4, r3]
	RegParams.regParamItems.ch_param_1_item_id = PDS_REG_NA_CH_PARAM;
    969c:	2200      	movs	r2, #0
    969e:	4b1d      	ldr	r3, [pc, #116]	; (9714 <LORAReg_InitNA+0x220>)
    96a0:	54e2      	strb	r2, [r4, r3]
    96a2:	18e3      	adds	r3, r4, r3
    96a4:	465a      	mov	r2, fp
    96a6:	705a      	strb	r2, [r3, #1]
	RegParams.regParamItems.ch_param_2_item_id = 0;
    96a8:	2200      	movs	r2, #0
    96aa:	2384      	movs	r3, #132	; 0x84
    96ac:	009b      	lsls	r3, r3, #2
    96ae:	54e2      	strb	r2, [r4, r3]
    96b0:	18e3      	adds	r3, r4, r3
    96b2:	705a      	strb	r2, [r3, #1]
	RegParams.regParamItems.band_item_id = 0;
    96b4:	4b18      	ldr	r3, [pc, #96]	; (9718 <LORAReg_InitNA+0x224>)
    96b6:	54e2      	strb	r2, [r4, r3]
    96b8:	18e3      	adds	r3, r4, r3
    96ba:	705a      	strb	r2, [r3, #1]
	RegParams.regParamItems.lastUsedSB = PDS_REG_NA_LAST_USED_SB;
    96bc:	2383      	movs	r3, #131	; 0x83
    96be:	009b      	lsls	r3, r3, #2
    96c0:	2201      	movs	r2, #1
    96c2:	54e2      	strb	r2, [r4, r3]
    96c4:	469c      	mov	ip, r3
    96c6:	4464      	add	r4, ip
    96c8:	465b      	mov	r3, fp
    96ca:	7063      	strb	r3, [r4, #1]
	filemarks.fileMarkListAddr = aRegNaPdsOps;
    96cc:	ab04      	add	r3, sp, #16
	filemarks.numItems =  (uint8_t)(PDS_REG_NA_MAX_VALUE & 0x00FF);
    96ce:	711f      	strb	r7, [r3, #4]
	filemarks.fIDcb = LorawanReg_NA_Pds_Cb;
    96d0:	4a12      	ldr	r2, [pc, #72]	; (971c <LORAReg_InitNA+0x228>)
	PDS_RegFile(PDS_FILE_REG_NA_03_IDX,filemarks);
    96d2:	9200      	str	r2, [sp, #0]
    96d4:	4912      	ldr	r1, [pc, #72]	; (9720 <LORAReg_InitNA+0x22c>)
    96d6:	9a05      	ldr	r2, [sp, #20]
    96d8:	4b12      	ldr	r3, [pc, #72]	; (9724 <LORAReg_InitNA+0x230>)
    96da:	2002      	movs	r0, #2
    96dc:	4c12      	ldr	r4, [pc, #72]	; (9728 <LORAReg_InitNA+0x234>)
    96de:	47a0      	blx	r4
    LORAREG_InitGetAttrFnPtrsNA();
    96e0:	4b12      	ldr	r3, [pc, #72]	; (972c <LORAReg_InitNA+0x238>)
    96e2:	4798      	blx	r3
	LORAREG_InitValidateAttrFnPtrsNA();
    96e4:	4b12      	ldr	r3, [pc, #72]	; (9730 <LORAReg_InitNA+0x23c>)
    96e6:	4798      	blx	r3
	LORAREG_InitSetAttrFnPtrsNA();
    96e8:	4b12      	ldr	r3, [pc, #72]	; (9734 <LORAReg_InitNA+0x240>)
    96ea:	4798      	blx	r3
}
    96ec:	2008      	movs	r0, #8
    96ee:	b009      	add	sp, #36	; 0x24
    96f0:	bc3c      	pop	{r2, r3, r4, r5}
    96f2:	4690      	mov	r8, r2
    96f4:	4699      	mov	r9, r3
    96f6:	46a2      	mov	sl, r4
    96f8:	46ab      	mov	fp, r5
    96fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    96fc:	200024d0 	.word	0x200024d0
    9700:	200024cc 	.word	0x200024cc
    9704:	00020084 	.word	0x00020084
    9708:	00019d89 	.word	0x00019d89
    970c:	00020114 	.word	0x00020114
    9710:	0000020b 	.word	0x0000020b
    9714:	0000020e 	.word	0x0000020e
    9718:	00000212 	.word	0x00000212
    971c:	000094f1 	.word	0x000094f1
    9720:	200022c8 	.word	0x200022c8
    9724:	00020184 	.word	0x00020184
    9728:	0000e3c1 	.word	0x0000e3c1
    972c:	0000ca5d 	.word	0x0000ca5d
    9730:	0000d33d 	.word	0x0000d33d
    9734:	0000d625 	.word	0x0000d625

00009738 <InValidGetAttr>:
/****************************** FUNCTIONS *************************************/

StackRetStatus_t InValidGetAttr(LorawanRegionalAttributes_t attr, void * attrInput, void * attrOutput)
{
	return LORAWAN_INVALID_REQUEST;
}
    9738:	2015      	movs	r0, #21
    973a:	4770      	bx	lr

0000973c <InValidAttr>:

StackRetStatus_t InValidAttr(LorawanRegionalAttributes_t attr, void * attrInput)
{
	return LORAWAN_INVALID_REQUEST;
}
    973c:	2015      	movs	r0, #21
    973e:	4770      	bx	lr

00009740 <LORAREG_GetAttr_MaxChannel>:
#endif


static StackRetStatus_t LORAREG_GetAttr_MaxChannel(LorawanRegionalAttributes_t attr, void *attrInput, void *attrOutput)
{
	*(uint8_t *)attrOutput = RegParams.maxChannels;
    9740:	232a      	movs	r3, #42	; 0x2a
    9742:	4902      	ldr	r1, [pc, #8]	; (974c <LORAREG_GetAttr_MaxChannel+0xc>)
    9744:	5ccb      	ldrb	r3, [r1, r3]
    9746:	7013      	strb	r3, [r2, #0]
	return LORAWAN_SUCCESS;
}
    9748:	2008      	movs	r0, #8
    974a:	4770      	bx	lr
    974c:	200024d0 	.word	0x200024d0

00009750 <LORAREG_GetAttr_MinNewChIndex>:


static StackRetStatus_t LORAREG_GetAttr_MinNewChIndex(LorawanRegionalAttributes_t attr, void *attrInput, void *attrOutput)
{
	StackRetStatus_t result = LORAWAN_SUCCESS;
	*(uint8_t *)attrOutput = (uint8_t)RegParams.MinNewChIndex;
    9750:	4905      	ldr	r1, [pc, #20]	; (9768 <LORAREG_GetAttr_MinNewChIndex+0x18>)
    9752:	2321      	movs	r3, #33	; 0x21
    9754:	5cc8      	ldrb	r0, [r1, r3]
    9756:	7010      	strb	r0, [r2, #0]
	if(RegParams.MinNewChIndex == 0xFF)
    9758:	5ccb      	ldrb	r3, [r1, r3]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    975a:	2008      	movs	r0, #8
	if(RegParams.MinNewChIndex == 0xFF)
    975c:	2bff      	cmp	r3, #255	; 0xff
    975e:	d000      	beq.n	9762 <LORAREG_GetAttr_MinNewChIndex+0x12>
	{
		result = LORAWAN_INVALID_PARAMETER;
	}
	
	return result;
}
    9760:	4770      	bx	lr
		result = LORAWAN_INVALID_PARAMETER;
    9762:	3002      	adds	r0, #2
    9764:	e7fc      	b.n	9760 <LORAREG_GetAttr_MinNewChIndex+0x10>
    9766:	46c0      	nop			; (mov r8, r8)
    9768:	200024d0 	.word	0x200024d0

0000976c <LORAREG_GetAttr_DefRx1DataRate>:
}
#endif

static StackRetStatus_t LORAREG_GetAttr_DefRx1DataRate(LorawanRegionalAttributes_t attr, void *attrInput, void *attrOutput)
{
	*(uint8_t *)attrOutput = RegParams.DefRx1DataRate;
    976c:	2322      	movs	r3, #34	; 0x22
    976e:	4902      	ldr	r1, [pc, #8]	; (9778 <LORAREG_GetAttr_DefRx1DataRate+0xc>)
    9770:	5ccb      	ldrb	r3, [r1, r3]
    9772:	7013      	strb	r3, [r2, #0]
	return LORAWAN_SUCCESS;
}
    9774:	2008      	movs	r0, #8
    9776:	4770      	bx	lr
    9778:	200024d0 	.word	0x200024d0

0000977c <LORAREG_GetAttr_DefRx2DataRate>:

static StackRetStatus_t LORAREG_GetAttr_DefRx2DataRate(LorawanRegionalAttributes_t attr, void *attrInput, void *attrOutput)
{
	*(uint8_t *)attrOutput = RegParams.DefRx2DataRate;
    977c:	2323      	movs	r3, #35	; 0x23
    977e:	4902      	ldr	r1, [pc, #8]	; (9788 <LORAREG_GetAttr_DefRx2DataRate+0xc>)
    9780:	5ccb      	ldrb	r3, [r1, r3]
    9782:	7013      	strb	r3, [r2, #0]
	return LORAWAN_SUCCESS;
}
    9784:	2008      	movs	r0, #8
    9786:	4770      	bx	lr
    9788:	200024d0 	.word	0x200024d0

0000978c <LORAREG_GetAttr_RegFeatures>:
	return LORAWAN_SUCCESS;
}

static StackRetStatus_t LORAREG_GetAttr_RegFeatures(LorawanRegionalAttributes_t attr, void *attrInput, void *attrOutput)
{
	*(uint32_t *)attrOutput = RegParams.FeaturesSupport;
    978c:	2320      	movs	r3, #32
    978e:	4902      	ldr	r1, [pc, #8]	; (9798 <LORAREG_GetAttr_RegFeatures+0xc>)
    9790:	5ccb      	ldrb	r3, [r1, r3]
    9792:	6013      	str	r3, [r2, #0]
	return LORAWAN_SUCCESS;
}
    9794:	2008      	movs	r0, #8
    9796:	4770      	bx	lr
    9798:	200024d0 	.word	0x200024d0

0000979c <LORAREG_GetAttr_DataRange>:

static StackRetStatus_t LORAREG_GetAttr_DataRange(LorawanRegionalAttributes_t attr, void *attrInput, void *attrOutput)
{
    979c:	b530      	push	{r4, r5, lr}
    979e:	b083      	sub	sp, #12
    97a0:	0015      	movs	r5, r2
	StackRetStatus_t result = LORAWAN_SUCCESS;
	uint8_t  channelId;
	ValChId_t valChid;
	valChid.channelIndex = *(uint8_t *)attrInput;
    97a2:	780c      	ldrb	r4, [r1, #0]
    97a4:	a901      	add	r1, sp, #4
    97a6:	700c      	strb	r4, [r1, #0]
	valChid.allowedForDefaultChannels = ALL_CHANNELS;
    97a8:	2301      	movs	r3, #1
    97aa:	704b      	strb	r3, [r1, #1]
	channelId = *(uint8_t *)attrInput;
	if (pValidateAttr[CHANNEL_ID](CHANNEL_ID, &valChid) == LORAWAN_SUCCESS)
    97ac:	4b0d      	ldr	r3, [pc, #52]	; (97e4 <LORAREG_GetAttr_DataRange+0x48>)
    97ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    97b0:	2015      	movs	r0, #21
    97b2:	4798      	blx	r3
    97b4:	2808      	cmp	r0, #8
    97b6:	d004      	beq.n	97c2 <LORAREG_GetAttr_DataRange+0x26>
	{
	    *(uint8_t *)attrOutput = RegParams.pChParams[channelId].dataRange.value;
	}
	else
	{
		*(uint8_t *)attrOutput = 0xFF;
    97b8:	23ff      	movs	r3, #255	; 0xff
    97ba:	702b      	strb	r3, [r5, #0]
	    result = LORAWAN_INVALID_PARAMETER;
    97bc:	200a      	movs	r0, #10
	}
	return result;
}
    97be:	b003      	add	sp, #12
    97c0:	bd30      	pop	{r4, r5, pc}
	    *(uint8_t *)attrOutput = RegParams.pChParams[channelId].dataRange.value;
    97c2:	4909      	ldr	r1, [pc, #36]	; (97e8 <LORAREG_GetAttr_DataRange+0x4c>)
    97c4:	790b      	ldrb	r3, [r1, #4]
    97c6:	794a      	ldrb	r2, [r1, #5]
    97c8:	0212      	lsls	r2, r2, #8
    97ca:	4313      	orrs	r3, r2
    97cc:	798a      	ldrb	r2, [r1, #6]
    97ce:	0412      	lsls	r2, r2, #16
    97d0:	431a      	orrs	r2, r3
    97d2:	79cb      	ldrb	r3, [r1, #7]
    97d4:	061b      	lsls	r3, r3, #24
    97d6:	431a      	orrs	r2, r3
    97d8:	0063      	lsls	r3, r4, #1
    97da:	189b      	adds	r3, r3, r2
    97dc:	785b      	ldrb	r3, [r3, #1]
    97de:	702b      	strb	r3, [r5, #0]
    97e0:	e7ed      	b.n	97be <LORAREG_GetAttr_DataRange+0x22>
    97e2:	46c0      	nop			; (mov r8, r8)
    97e4:	20000e64 	.word	0x20000e64
    97e8:	200024d0 	.word	0x200024d0

000097ec <LORAREG_GetAttr_ChIdStatus>:
}
#endif


static StackRetStatus_t LORAREG_GetAttr_ChIdStatus(LorawanRegionalAttributes_t attr, void *attrInput, void *attrOutput)
{
    97ec:	b530      	push	{r4, r5, lr}
    97ee:	b083      	sub	sp, #12
    97f0:	0015      	movs	r5, r2
	StackRetStatus_t result = LORAWAN_SUCCESS;
	ValChId_t val_chid;
	uint8_t  channelId;
	channelId = *(uint8_t *)attrInput;
    97f2:	780c      	ldrb	r4, [r1, #0]
	val_chid.channelIndex = *(uint8_t *)attrInput;
    97f4:	a901      	add	r1, sp, #4
    97f6:	700c      	strb	r4, [r1, #0]
	val_chid.allowedForDefaultChannels = ALL_CHANNELS;
    97f8:	2301      	movs	r3, #1
    97fa:	704b      	strb	r3, [r1, #1]
	
	if (pValidateAttr[CHANNEL_ID](CHANNEL_ID, &val_chid) == LORAWAN_SUCCESS)
    97fc:	4b0c      	ldr	r3, [pc, #48]	; (9830 <LORAREG_GetAttr_ChIdStatus+0x44>)
    97fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    9800:	2015      	movs	r0, #21
    9802:	4798      	blx	r3
    9804:	2808      	cmp	r0, #8
    9806:	d004      	beq.n	9812 <LORAREG_GetAttr_ChIdStatus+0x26>
	{
		*(uint8_t *)attrOutput = RegParams.pChParams[channelId].status;
	}
	else
	{
		*(uint8_t *)attrOutput = DISABLED;
    9808:	2300      	movs	r3, #0
    980a:	702b      	strb	r3, [r5, #0]
		result = LORAWAN_INVALID_PARAMETER;
    980c:	200a      	movs	r0, #10
	}
	return result;
}
    980e:	b003      	add	sp, #12
    9810:	bd30      	pop	{r4, r5, pc}
		*(uint8_t *)attrOutput = RegParams.pChParams[channelId].status;
    9812:	4908      	ldr	r1, [pc, #32]	; (9834 <LORAREG_GetAttr_ChIdStatus+0x48>)
    9814:	790a      	ldrb	r2, [r1, #4]
    9816:	794b      	ldrb	r3, [r1, #5]
    9818:	021b      	lsls	r3, r3, #8
    981a:	4313      	orrs	r3, r2
    981c:	798a      	ldrb	r2, [r1, #6]
    981e:	0412      	lsls	r2, r2, #16
    9820:	4313      	orrs	r3, r2
    9822:	79ca      	ldrb	r2, [r1, #7]
    9824:	0612      	lsls	r2, r2, #24
    9826:	431a      	orrs	r2, r3
    9828:	0064      	lsls	r4, r4, #1
    982a:	5ca3      	ldrb	r3, [r4, r2]
    982c:	702b      	strb	r3, [r5, #0]
    982e:	e7ee      	b.n	980e <LORAREG_GetAttr_ChIdStatus+0x22>
    9830:	20000e64 	.word	0x20000e64
    9834:	200024d0 	.word	0x200024d0

00009838 <LORAREG_GetAttr_DutyCycleT1>:

#if (NA_BAND == 1 || AU_BAND == 1)
static StackRetStatus_t LORAREG_GetAttr_DutyCycleT1(LorawanRegionalAttributes_t attr, void *attrInput, void *attrOutput)
{
	*(uint16_t *)attrOutput = UINT16_MAX;
    9838:	2301      	movs	r3, #1
    983a:	425b      	negs	r3, r3
    983c:	8013      	strh	r3, [r2, #0]
	return LORAWAN_INVALID_PARAMETER;
}
    983e:	200a      	movs	r0, #10
    9840:	4770      	bx	lr

00009842 <LORAREG_GetAttr_MinDutyCycleTimer>:
#endif

#if (NA_BAND == 1 || AU_BAND == 1)
static StackRetStatus_t LORAREG_GetAttr_MinDutyCycleTimer(LorawanRegionalAttributes_t attr, void *attrInput, void *attrOutput)
{
	*(uint32_t *)attrOutput = UINT32_MAX;
    9842:	2301      	movs	r3, #1
    9844:	425b      	negs	r3, r3
    9846:	6013      	str	r3, [r2, #0]
	return LORAWAN_INVALID_PARAMETER;
}
    9848:	200a      	movs	r0, #10
    984a:	4770      	bx	lr

0000984c <LORAREG_GetAttr_MacRecvDelay1>:
#endif

static StackRetStatus_t LORAREG_GetAttr_MacRecvDelay1(LorawanRegionalAttributes_t attr, void *attrInput, void *attrOutput)
{
	*(uint16_t *)attrOutput = RECEIVE_DELAY1;
    984c:	23fa      	movs	r3, #250	; 0xfa
    984e:	009b      	lsls	r3, r3, #2
    9850:	8013      	strh	r3, [r2, #0]
	return LORAWAN_SUCCESS;
}
    9852:	2008      	movs	r0, #8
    9854:	4770      	bx	lr

00009856 <LORAREG_GetAttr_MacRecvDelay2>:

static StackRetStatus_t LORAREG_GetAttr_MacRecvDelay2(LorawanRegionalAttributes_t attr, void *attrInput, void *attrOutput)
{
	*(uint16_t *)attrOutput = RECEIVE_DELAY2;
    9856:	23fa      	movs	r3, #250	; 0xfa
    9858:	00db      	lsls	r3, r3, #3
    985a:	8013      	strh	r3, [r2, #0]
	return LORAWAN_SUCCESS;
}
    985c:	2008      	movs	r0, #8
    985e:	4770      	bx	lr

00009860 <LORAREG_GetAttr_MacJoinAcptDelay1>:

static StackRetStatus_t LORAREG_GetAttr_MacJoinAcptDelay1(LorawanRegionalAttributes_t attr, void *attrInput, void *attrOutput)
{
	*(uint16_t *)attrOutput = JOIN_ACCEPT_DELAY1;
    9860:	4b01      	ldr	r3, [pc, #4]	; (9868 <LORAREG_GetAttr_MacJoinAcptDelay1+0x8>)
    9862:	8013      	strh	r3, [r2, #0]
	return LORAWAN_SUCCESS;
}
    9864:	2008      	movs	r0, #8
    9866:	4770      	bx	lr
    9868:	00001388 	.word	0x00001388

0000986c <LORAREG_GetAttr_MacJoinAcptDelay2>:

static StackRetStatus_t LORAREG_GetAttr_MacJoinAcptDelay2(LorawanRegionalAttributes_t attr, void *attrInput, void *attrOutput)
{
	*(uint16_t *)attrOutput = JOIN_ACCEPT_DELAY2;
    986c:	4b01      	ldr	r3, [pc, #4]	; (9874 <LORAREG_GetAttr_MacJoinAcptDelay2+0x8>)
    986e:	8013      	strh	r3, [r2, #0]
	return LORAWAN_SUCCESS;
}
    9870:	2008      	movs	r0, #8
    9872:	4770      	bx	lr
    9874:	00001770 	.word	0x00001770

00009878 <LORAREG_GetAttr_MacAckTimeout>:

static StackRetStatus_t LORAREG_GetAttr_MacAckTimeout(LorawanRegionalAttributes_t attr, void *attrInput, void *attrOutput)
{
	*(uint16_t *)attrOutput = ACK_TIMEOUT;
    9878:	23fa      	movs	r3, #250	; 0xfa
    987a:	00db      	lsls	r3, r3, #3
    987c:	8013      	strh	r3, [r2, #0]
	return LORAWAN_SUCCESS;
}
    987e:	2008      	movs	r0, #8
    9880:	4770      	bx	lr

00009882 <LORAREG_GetAttr_MacAdrAckDelay>:

static StackRetStatus_t LORAREG_GetAttr_MacAdrAckDelay(LorawanRegionalAttributes_t attr, void *attrInput, void *attrOutput)
{
	*(uint8_t *)attrOutput = ADR_ACK_DELAY;
    9882:	2320      	movs	r3, #32
    9884:	7013      	strb	r3, [r2, #0]
	return LORAWAN_SUCCESS;
}
    9886:	2008      	movs	r0, #8
    9888:	4770      	bx	lr

0000988a <LORAREG_GetAttr_MacAdrAckLimit>:

static StackRetStatus_t LORAREG_GetAttr_MacAdrAckLimit(LorawanRegionalAttributes_t attr, void *attrInput, void *attrOutput)
{
	*(uint8_t *)attrOutput = ADR_ACK_LIMIT;
    988a:	2340      	movs	r3, #64	; 0x40
    988c:	7013      	strb	r3, [r2, #0]
	return LORAWAN_SUCCESS;
}
    988e:	2008      	movs	r0, #8
    9890:	4770      	bx	lr

00009892 <LORAREG_GetAttr_MacMaxFcntGap>:

static StackRetStatus_t LORAREG_GetAttr_MacMaxFcntGap(LorawanRegionalAttributes_t attr, void *attrInput, void *attrOutput)
{
	*(uint16_t *)attrOutput = MAX_FCNT_GAP;
    9892:	2380      	movs	r3, #128	; 0x80
    9894:	01db      	lsls	r3, r3, #7
    9896:	8013      	strh	r3, [r2, #0]
	return LORAWAN_SUCCESS;
}
    9898:	2008      	movs	r0, #8
    989a:	4770      	bx	lr

0000989c <LORAREG_GetAttr_RegDefTxPwr>:

static StackRetStatus_t LORAREG_GetAttr_RegDefTxPwr(LorawanRegionalAttributes_t attr, void *attrInput, void *attrOutput)
{
	*(uint8_t *)attrOutput = RegParams.MacTxPower;
    989c:	2327      	movs	r3, #39	; 0x27
    989e:	4902      	ldr	r1, [pc, #8]	; (98a8 <LORAREG_GetAttr_RegDefTxPwr+0xc>)
    98a0:	5ccb      	ldrb	r3, [r1, r3]
    98a2:	7013      	strb	r3, [r2, #0]
	return LORAWAN_SUCCESS;
}
    98a4:	2008      	movs	r0, #8
    98a6:	4770      	bx	lr
    98a8:	200024d0 	.word	0x200024d0

000098ac <LORAREG_GetAttr_RegDefTxDR>:

static StackRetStatus_t LORAREG_GetAttr_RegDefTxDR(LorawanRegionalAttributes_t attr, void *attrInput, void *attrOutput)
{
	*(uint8_t *)attrOutput = RegParams.TxCurDataRate;
    98ac:	2326      	movs	r3, #38	; 0x26
    98ae:	4902      	ldr	r1, [pc, #8]	; (98b8 <LORAREG_GetAttr_RegDefTxDR+0xc>)
    98b0:	5ccb      	ldrb	r3, [r1, r3]
    98b2:	7013      	strb	r3, [r2, #0]
	return LORAWAN_SUCCESS;
}
    98b4:	2008      	movs	r0, #8
    98b6:	4770      	bx	lr
    98b8:	200024d0 	.word	0x200024d0

000098bc <LORAREG_GetAttr_CurChIndx>:

static StackRetStatus_t LORAREG_GetAttr_CurChIndx(LorawanRegionalAttributes_t attr, void *attrInput, void *attrOutput)
{
	*(uint8_t *)attrOutput = RegParams.lastUsedChannelIndex;
    98bc:	232f      	movs	r3, #47	; 0x2f
    98be:	4902      	ldr	r1, [pc, #8]	; (98c8 <LORAREG_GetAttr_CurChIndx+0xc>)
    98c0:	5ccb      	ldrb	r3, [r1, r3]
    98c2:	7013      	strb	r3, [r2, #0]
	return LORAWAN_SUCCESS;
}
    98c4:	2008      	movs	r0, #8
    98c6:	4770      	bx	lr
    98c8:	200024d0 	.word	0x200024d0

000098cc <LORAREG_GetAttr_DefLBTParams>:
static StackRetStatus_t LORAREG_GetAttr_DefLBTParams(LorawanRegionalAttributes_t attr, void *attrInput, void *attrOutput)
{
	LorawanLBTParams_t* lorawanLBTParams;
	lorawanLBTParams = (LorawanLBTParams_t *)attrOutput;
			
	lorawanLBTParams->lbtNumOfSamples	= RegParams.cmnParams.paramsType2.LBT_RSSISamplesCount;
    98cc:	4b09      	ldr	r3, [pc, #36]	; (98f4 <LORAREG_GetAttr_DefLBTParams+0x28>)
    98ce:	21c0      	movs	r1, #192	; 0xc0
    98d0:	31ff      	adds	r1, #255	; 0xff
    98d2:	5c59      	ldrb	r1, [r3, r1]
    98d4:	7191      	strb	r1, [r2, #6]
	lorawanLBTParams->lbtScanPeriod		= RegParams.cmnParams.paramsType2.LBTScanPeriod;
    98d6:	21be      	movs	r1, #190	; 0xbe
    98d8:	31ff      	adds	r1, #255	; 0xff
    98da:	5c59      	ldrb	r1, [r3, r1]
    98dc:	8011      	strh	r1, [r2, #0]
	lorawanLBTParams->lbtThreshold		= RegParams.cmnParams.paramsType2.LBTSignalThreshold;
    98de:	21df      	movs	r1, #223	; 0xdf
    98e0:	0049      	lsls	r1, r1, #1
    98e2:	565b      	ldrsb	r3, [r3, r1]
    98e4:	8053      	strh	r3, [r2, #2]
	lorawanLBTParams->lbtTransmitOn		= LBT_ENABLE;
    98e6:	2301      	movs	r3, #1
    98e8:	71d3      	strb	r3, [r2, #7]
	lorawanLBTParams->maxRetryChannels	= LBT_MAX_RETRY_CHANNELS;
    98ea:	3304      	adds	r3, #4
    98ec:	8093      	strh	r3, [r2, #4]
	return 0;
}
    98ee:	2000      	movs	r0, #0
    98f0:	4770      	bx	lr
    98f2:	46c0      	nop			; (mov r8, r8)
    98f4:	200024d0 	.word	0x200024d0

000098f8 <LORAREG_GetAttr_FreqT1>:
{
    98f8:	b530      	push	{r4, r5, lr}
	channelId = *(uint8_t *)attrInput;
    98fa:	780b      	ldrb	r3, [r1, #0]
	if(channelId > RegParams.maxChannels)
    98fc:	212a      	movs	r1, #42	; 0x2a
    98fe:	4820      	ldr	r0, [pc, #128]	; (9980 <LORAREG_GetAttr_FreqT1+0x88>)
    9900:	5641      	ldrsb	r1, [r0, r1]
		return LORAWAN_INVALID_PARAMETER;
    9902:	200a      	movs	r0, #10
	if(channelId > RegParams.maxChannels)
    9904:	428b      	cmp	r3, r1
    9906:	dc39      	bgt.n	997c <LORAREG_GetAttr_FreqT1+0x84>
	if (channelId < RegParams.cmnParams.paramsType1.Max_125khzChan)
    9908:	2054      	movs	r0, #84	; 0x54
    990a:	30ff      	adds	r0, #255	; 0xff
    990c:	4c1c      	ldr	r4, [pc, #112]	; (9980 <LORAREG_GetAttr_FreqT1+0x88>)
    990e:	5c24      	ldrb	r4, [r4, r0]
    9910:	42a3      	cmp	r3, r4
    9912:	d31c      	bcc.n	994e <LORAREG_GetAttr_FreqT1+0x56>
		result = LORAWAN_INVALID_PARAMETER;
    9914:	200a      	movs	r0, #10
	else if ( (channelId < RegParams.maxChannels) && (channelId >= RegParams.cmnParams.paramsType1.Max_125khzChan) )
    9916:	428b      	cmp	r3, r1
    9918:	da30      	bge.n	997c <LORAREG_GetAttr_FreqT1+0x84>
static uint32_t GenerateFrequency2 (uint8_t channelIndex)
{
    uint32_t channelFrequency;

    channelFrequency = RegParams.cmnParams.paramsType1.UpStreamCh64Freq + 
	                   FREQ_1600KHZ * (channelIndex - RegParams.cmnParams.paramsType1.Max_125khzChan);
    991a:	1b1b      	subs	r3, r3, r4
    991c:	4919      	ldr	r1, [pc, #100]	; (9984 <LORAREG_GetAttr_FreqT1+0x8c>)
    991e:	434b      	muls	r3, r1
    channelFrequency = RegParams.cmnParams.paramsType1.UpStreamCh64Freq + 
    9920:	4c17      	ldr	r4, [pc, #92]	; (9980 <LORAREG_GetAttr_FreqT1+0x88>)
    9922:	2148      	movs	r1, #72	; 0x48
    9924:	31ff      	adds	r1, #255	; 0xff
    9926:	5c61      	ldrb	r1, [r4, r1]
    9928:	303f      	adds	r0, #63	; 0x3f
    992a:	30ff      	adds	r0, #255	; 0xff
    992c:	5c20      	ldrb	r0, [r4, r0]
    992e:	0200      	lsls	r0, r0, #8
    9930:	4301      	orrs	r1, r0
    9932:	204a      	movs	r0, #74	; 0x4a
    9934:	30ff      	adds	r0, #255	; 0xff
    9936:	5c20      	ldrb	r0, [r4, r0]
    9938:	0400      	lsls	r0, r0, #16
    993a:	4308      	orrs	r0, r1
    993c:	21a5      	movs	r1, #165	; 0xa5
    993e:	0049      	lsls	r1, r1, #1
    9940:	5c61      	ldrb	r1, [r4, r1]
    9942:	0609      	lsls	r1, r1, #24
    9944:	4301      	orrs	r1, r0
    9946:	1859      	adds	r1, r3, r1
		*(uint32_t *)attrOutput = GenerateFrequency2 (channelId);
    9948:	6011      	str	r1, [r2, #0]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    994a:	2008      	movs	r0, #8
		*(uint32_t *)attrOutput = GenerateFrequency2 (channelId);
    994c:	e016      	b.n	997c <LORAREG_GetAttr_FreqT1+0x84>
    channelFrequency = RegParams.cmnParams.paramsType1.UpStreamCh0Freq + FREQ_200KHZ * channelIndex;
    994e:	4c0c      	ldr	r4, [pc, #48]	; (9980 <LORAREG_GetAttr_FreqT1+0x88>)
    9950:	2144      	movs	r1, #68	; 0x44
    9952:	31ff      	adds	r1, #255	; 0xff
    9954:	5c61      	ldrb	r1, [r4, r1]
    9956:	380f      	subs	r0, #15
    9958:	5c20      	ldrb	r0, [r4, r0]
    995a:	0200      	lsls	r0, r0, #8
    995c:	4308      	orrs	r0, r1
    995e:	2146      	movs	r1, #70	; 0x46
    9960:	31ff      	adds	r1, #255	; 0xff
    9962:	5c61      	ldrb	r1, [r4, r1]
    9964:	0409      	lsls	r1, r1, #16
    9966:	4308      	orrs	r0, r1
    9968:	21a3      	movs	r1, #163	; 0xa3
    996a:	0049      	lsls	r1, r1, #1
    996c:	5c61      	ldrb	r1, [r4, r1]
    996e:	0609      	lsls	r1, r1, #24
    9970:	4301      	orrs	r1, r0
    9972:	4805      	ldr	r0, [pc, #20]	; (9988 <LORAREG_GetAttr_FreqT1+0x90>)
    9974:	4343      	muls	r3, r0
    9976:	18cb      	adds	r3, r1, r3
		*(uint32_t *)attrOutput = GenerateFrequency1 (channelId);
    9978:	6013      	str	r3, [r2, #0]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    997a:	2008      	movs	r0, #8
}
    997c:	bd30      	pop	{r4, r5, pc}
    997e:	46c0      	nop			; (mov r8, r8)
    9980:	200024d0 	.word	0x200024d0
    9984:	00186a00 	.word	0x00186a00
    9988:	00030d40 	.word	0x00030d40

0000998c <ValidateDataRateTxT1>:
{
	StackRetStatus_t result = LORAWAN_SUCCESS;
	
	uint8_t dataRate = *(uint8_t *)attrInput;

	if (dataRate > RegParams.cmnParams.paramsType1.maxTxDR)
    998c:	780a      	ldrb	r2, [r1, #0]
    998e:	23a8      	movs	r3, #168	; 0xa8
    9990:	005b      	lsls	r3, r3, #1
    9992:	4903      	ldr	r1, [pc, #12]	; (99a0 <ValidateDataRateTxT1+0x14>)
    9994:	5ccb      	ldrb	r3, [r1, r3]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    9996:	2008      	movs	r0, #8
	if (dataRate > RegParams.cmnParams.paramsType1.maxTxDR)
    9998:	429a      	cmp	r2, r3
    999a:	d900      	bls.n	999e <ValidateDataRateTxT1+0x12>
	{
		result = LORAWAN_INVALID_PARAMETER;
    999c:	3002      	adds	r0, #2
	}
	
	return result;
}
    999e:	4770      	bx	lr
    99a0:	200024d0 	.word	0x200024d0

000099a4 <ValidateDataRateTxT2>:
#if (AS_BAND == 1 || JPN_BAND == 1)
static StackRetStatus_t ValidateDataRateTxT2(LorawanRegionalAttributes_t attr, void *attrInput)
{
	StackRetStatus_t result = LORAWAN_SUCCESS;
	
	uint8_t dataRate = *(uint8_t *)attrInput;
    99a4:	780b      	ldrb	r3, [r1, #0]
	
	if(dataRate > RegParams.minDataRate ||
    99a6:	2224      	movs	r2, #36	; 0x24
    99a8:	4908      	ldr	r1, [pc, #32]	; (99cc <ValidateDataRateTxT2+0x28>)
    99aa:	5c8a      	ldrb	r2, [r1, r2]
	(RegParams.cmnParams.paramsType2.txParams.uplinkDwellTime == 1 && dataRate < RegParams.DefRx1DataRate))
	{
		result = LORAWAN_INVALID_PARAMETER;
    99ac:	200a      	movs	r0, #10
	if(dataRate > RegParams.minDataRate ||
    99ae:	429a      	cmp	r2, r3
    99b0:	d30a      	bcc.n	99c8 <ValidateDataRateTxT2+0x24>
	(RegParams.cmnParams.paramsType2.txParams.uplinkDwellTime == 1 && dataRate < RegParams.DefRx1DataRate))
    99b2:	22e1      	movs	r2, #225	; 0xe1
    99b4:	0052      	lsls	r2, r2, #1
    99b6:	5c8a      	ldrb	r2, [r1, r2]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    99b8:	3802      	subs	r0, #2
	if(dataRate > RegParams.minDataRate ||
    99ba:	07d2      	lsls	r2, r2, #31
    99bc:	d504      	bpl.n	99c8 <ValidateDataRateTxT2+0x24>
	(RegParams.cmnParams.paramsType2.txParams.uplinkDwellTime == 1 && dataRate < RegParams.DefRx1DataRate))
    99be:	2222      	movs	r2, #34	; 0x22
    99c0:	5c8a      	ldrb	r2, [r1, r2]
    99c2:	429a      	cmp	r2, r3
    99c4:	d900      	bls.n	99c8 <ValidateDataRateTxT2+0x24>
		result = LORAWAN_INVALID_PARAMETER;
    99c6:	3002      	adds	r0, #2
	}
	
	return result;
}
    99c8:	4770      	bx	lr
    99ca:	46c0      	nop			; (mov r8, r8)
    99cc:	200024d0 	.word	0x200024d0

000099d0 <ValidateDataRateRxT1>:
#if (NA_BAND == 1 || AU_BAND == 1)
static StackRetStatus_t ValidateDataRateRxT1 (LorawanRegionalAttributes_t attr, void *attrInput)
{
	StackRetStatus_t result = LORAWAN_SUCCESS;
	
	uint8_t dataRate = *(uint8_t *)attrInput;
    99d0:	780b      	ldrb	r3, [r1, #0]

	if((dataRate > RegParams.cmnParams.paramsType1.maxRxDR) || (dataRate < RegParams.cmnParams.paramsType1.minRxDR) )
    99d2:	22a9      	movs	r2, #169	; 0xa9
    99d4:	0052      	lsls	r2, r2, #1
    99d6:	4906      	ldr	r1, [pc, #24]	; (99f0 <ValidateDataRateRxT1+0x20>)
    99d8:	5c8a      	ldrb	r2, [r1, r2]
	{
		result = LORAWAN_INVALID_PARAMETER;
    99da:	200a      	movs	r0, #10
	if((dataRate > RegParams.cmnParams.paramsType1.maxRxDR) || (dataRate < RegParams.cmnParams.paramsType1.minRxDR) )
    99dc:	429a      	cmp	r2, r3
    99de:	d306      	bcc.n	99ee <ValidateDataRateRxT1+0x1e>
    99e0:	2252      	movs	r2, #82	; 0x52
    99e2:	32ff      	adds	r2, #255	; 0xff
    99e4:	5c8a      	ldrb	r2, [r1, r2]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    99e6:	3802      	subs	r0, #2
	if((dataRate > RegParams.cmnParams.paramsType1.maxRxDR) || (dataRate < RegParams.cmnParams.paramsType1.minRxDR) )
    99e8:	429a      	cmp	r2, r3
    99ea:	d900      	bls.n	99ee <ValidateDataRateRxT1+0x1e>
		result = LORAWAN_INVALID_PARAMETER;
    99ec:	3002      	adds	r0, #2
	}
	return result;
}
    99ee:	4770      	bx	lr
    99f0:	200024d0 	.word	0x200024d0

000099f4 <ValidateDataRateRxT2>:
#if (AS_BAND == 1 || JPN_BAND == 1)
static StackRetStatus_t ValidateDataRateRxT2 (LorawanRegionalAttributes_t attr, void *attrInput)
{
	StackRetStatus_t result = LORAWAN_SUCCESS;
	
	uint8_t dataRate = *(uint8_t *)attrInput;
    99f4:	780b      	ldrb	r3, [r1, #0]

    if(dataRate > RegParams.minDataRate || (
    99f6:	2224      	movs	r2, #36	; 0x24
    99f8:	4908      	ldr	r1, [pc, #32]	; (9a1c <ValidateDataRateRxT2+0x28>)
    99fa:	5c8a      	ldrb	r2, [r1, r2]
	RegParams.cmnParams.paramsType2.txParams.downlinkDwellTime == 1 && dataRate < RegParams.DefRx1DataRate))
	{
		result = LORAWAN_INVALID_PARAMETER;
    99fc:	200a      	movs	r0, #10
    if(dataRate > RegParams.minDataRate || (
    99fe:	429a      	cmp	r2, r3
    9a00:	d30a      	bcc.n	9a18 <ValidateDataRateRxT2+0x24>
	RegParams.cmnParams.paramsType2.txParams.downlinkDwellTime == 1 && dataRate < RegParams.DefRx1DataRate))
    9a02:	22e1      	movs	r2, #225	; 0xe1
    9a04:	0052      	lsls	r2, r2, #1
    9a06:	5c8a      	ldrb	r2, [r1, r2]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    9a08:	3802      	subs	r0, #2
    if(dataRate > RegParams.minDataRate || (
    9a0a:	0792      	lsls	r2, r2, #30
    9a0c:	d504      	bpl.n	9a18 <ValidateDataRateRxT2+0x24>
	RegParams.cmnParams.paramsType2.txParams.downlinkDwellTime == 1 && dataRate < RegParams.DefRx1DataRate))
    9a0e:	2222      	movs	r2, #34	; 0x22
    9a10:	5c8a      	ldrb	r2, [r1, r2]
    9a12:	429a      	cmp	r2, r3
    9a14:	d900      	bls.n	9a18 <ValidateDataRateRxT2+0x24>
		result = LORAWAN_INVALID_PARAMETER;
    9a16:	3002      	adds	r0, #2
	}

	return result;
}
    9a18:	4770      	bx	lr
    9a1a:	46c0      	nop			; (mov r8, r8)
    9a1c:	200024d0 	.word	0x200024d0

00009a20 <ValidateChannelId>:
{
    StackRetStatus_t result = LORAWAN_SUCCESS;
	
    uint8_t channelId = *(uint8_t *)attrInput;
	
    if (channelId >= RegParams.maxChannels)
    9a20:	780a      	ldrb	r2, [r1, #0]
    9a22:	232a      	movs	r3, #42	; 0x2a
    9a24:	4903      	ldr	r1, [pc, #12]	; (9a34 <ValidateChannelId+0x14>)
    9a26:	56cb      	ldrsb	r3, [r1, r3]
    StackRetStatus_t result = LORAWAN_SUCCESS;
    9a28:	2008      	movs	r0, #8
    if (channelId >= RegParams.maxChannels)
    9a2a:	429a      	cmp	r2, r3
    9a2c:	db00      	blt.n	9a30 <ValidateChannelId+0x10>
    {
        result = LORAWAN_INVALID_PARAMETER ;
    9a2e:	3002      	adds	r0, #2
    }
	
    return result;
}
    9a30:	4770      	bx	lr
    9a32:	46c0      	nop			; (mov r8, r8)
    9a34:	200024d0 	.word	0x200024d0

00009a38 <ValidateChannelIdT2>:
static StackRetStatus_t ValidateChannelIdT2 (LorawanRegionalAttributes_t attr, void *attrInput)
{
	StackRetStatus_t retVal = LORAWAN_SUCCESS;
	ValChId_t val_chid;
	
	memcpy(&val_chid,attrInput,sizeof(ValChId_t));
    9a38:	780b      	ldrb	r3, [r1, #0]
	if((val_chid.channelIndex >= RegParams.maxChannels) || (val_chid.allowedForDefaultChannels == WITHOUT_DEFAULT_CHANNELS &&
    9a3a:	222a      	movs	r2, #42	; 0x2a
    9a3c:	4808      	ldr	r0, [pc, #32]	; (9a60 <ValidateChannelIdT2+0x28>)
    9a3e:	5682      	ldrsb	r2, [r0, r2]
	 val_chid.channelIndex < RegParams.cmnParams.paramsType2.minNonDefChId))
	 {
		 retVal = LORAWAN_INVALID_PARAMETER;
    9a40:	200a      	movs	r0, #10
	if((val_chid.channelIndex >= RegParams.maxChannels) || (val_chid.allowedForDefaultChannels == WITHOUT_DEFAULT_CHANNELS &&
    9a42:	4293      	cmp	r3, r2
    9a44:	da0a      	bge.n	9a5c <ValidateChannelIdT2+0x24>
    9a46:	784a      	ldrb	r2, [r1, #1]
	StackRetStatus_t retVal = LORAWAN_SUCCESS;
    9a48:	3802      	subs	r0, #2
	if((val_chid.channelIndex >= RegParams.maxChannels) || (val_chid.allowedForDefaultChannels == WITHOUT_DEFAULT_CHANNELS &&
    9a4a:	2a00      	cmp	r2, #0
    9a4c:	d106      	bne.n	9a5c <ValidateChannelIdT2+0x24>
	 val_chid.channelIndex < RegParams.cmnParams.paramsType2.minNonDefChId))
    9a4e:	32c1      	adds	r2, #193	; 0xc1
    9a50:	32ff      	adds	r2, #255	; 0xff
	if((val_chid.channelIndex >= RegParams.maxChannels) || (val_chid.allowedForDefaultChannels == WITHOUT_DEFAULT_CHANNELS &&
    9a52:	4903      	ldr	r1, [pc, #12]	; (9a60 <ValidateChannelIdT2+0x28>)
    9a54:	5c8a      	ldrb	r2, [r1, r2]
    9a56:	429a      	cmp	r2, r3
    9a58:	d900      	bls.n	9a5c <ValidateChannelIdT2+0x24>
		 retVal = LORAWAN_INVALID_PARAMETER;
    9a5a:	3002      	adds	r0, #2
	 }
	 return retVal;
}
    9a5c:	4770      	bx	lr
    9a5e:	46c0      	nop			; (mov r8, r8)
    9a60:	200024d0 	.word	0x200024d0

00009a64 <LORAREG_GetAttr_DutyCycleT2>:
{
    9a64:	b530      	push	{r4, r5, lr}
    9a66:	b083      	sub	sp, #12
    9a68:	0014      	movs	r4, r2
	valChid.channelIndex = *(uint8_t *)attrInput;
    9a6a:	780d      	ldrb	r5, [r1, #0]
    9a6c:	a901      	add	r1, sp, #4
    9a6e:	700d      	strb	r5, [r1, #0]
	valChid.allowedForDefaultChannels = ALL_CHANNELS;
    9a70:	2301      	movs	r3, #1
    9a72:	704b      	strb	r3, [r1, #1]
    if (ValidateChannelIdT2(CHANNEL_ID, &valChid) == LORAWAN_SUCCESS)
    9a74:	2015      	movs	r0, #21
    9a76:	4b0b      	ldr	r3, [pc, #44]	; (9aa4 <LORAREG_GetAttr_DutyCycleT2+0x40>)
    9a78:	4798      	blx	r3
    9a7a:	2808      	cmp	r0, #8
    9a7c:	d002      	beq.n	9a84 <LORAREG_GetAttr_DutyCycleT2+0x20>
	    result = LORAWAN_INVALID_PARAMETER;
    9a7e:	200a      	movs	r0, #10
}
    9a80:	b003      	add	sp, #12
    9a82:	bd30      	pop	{r4, r5, pc}
	    *(uint16_t *)attrOutput = RegParams.cmnParams.paramsType2.subBandDutyCycle[subBandId];
    9a84:	4a08      	ldr	r2, [pc, #32]	; (9aa8 <LORAREG_GetAttr_DutyCycleT2+0x44>)
	    subBandId = RegParams.cmnParams.paramsType2.othChParams[channelId].subBandId;
    9a86:	006b      	lsls	r3, r5, #1
    9a88:	195b      	adds	r3, r3, r5
    9a8a:	009b      	lsls	r3, r3, #2
    9a8c:	18d3      	adds	r3, r2, r3
    9a8e:	33ab      	adds	r3, #171	; 0xab
	    *(uint16_t *)attrOutput = RegParams.cmnParams.paramsType2.subBandDutyCycle[subBandId];
    9a90:	781b      	ldrb	r3, [r3, #0]
    9a92:	33d4      	adds	r3, #212	; 0xd4
    9a94:	005b      	lsls	r3, r3, #1
    9a96:	18d2      	adds	r2, r2, r3
    9a98:	7951      	ldrb	r1, [r2, #5]
    9a9a:	7993      	ldrb	r3, [r2, #6]
    9a9c:	021b      	lsls	r3, r3, #8
    9a9e:	430b      	orrs	r3, r1
    9aa0:	8023      	strh	r3, [r4, #0]
    9aa2:	e7ed      	b.n	9a80 <LORAREG_GetAttr_DutyCycleT2+0x1c>
    9aa4:	00009a39 	.word	0x00009a39
    9aa8:	200024d0 	.word	0x200024d0

00009aac <LORAREG_GetAttr_MinMaxDr>:
{
    9aac:	b5f0      	push	{r4, r5, r6, r7, lr}
    9aae:	4694      	mov	ip, r2
{
	uint8_t i;
	
	// after updating the data range of a channel we need to check if the minimum dataRange has changed or not.
	// The user cannot set the current data rate outside the range of the data range
	uint8_t minDataRate = RegParams.minDataRate;
    9ab0:	4b21      	ldr	r3, [pc, #132]	; (9b38 <LORAREG_GetAttr_MinMaxDr+0x8c>)
    9ab2:	2124      	movs	r1, #36	; 0x24
    9ab4:	5c5c      	ldrb	r4, [r3, r1]
	uint8_t maxDataRate = RegParams.maxDataRate;
    9ab6:	3101      	adds	r1, #1
    9ab8:	5c5f      	ldrb	r7, [r3, r1]

	for (i = 0; i < RegParams.maxChannels; i++)
    9aba:	3105      	adds	r1, #5
    9abc:	565e      	ldrsb	r6, [r3, r1]
    9abe:	2e00      	cmp	r6, #0
    9ac0:	dd28      	ble.n	9b14 <LORAREG_GetAttr_MinMaxDr+0x68>
	{
		if ( (RegParams.pChParams[i].dataRange.min < minDataRate) && (RegParams.pChParams[i].status == ENABLED) )
    9ac2:	0019      	movs	r1, r3
    9ac4:	791d      	ldrb	r5, [r3, #4]
    9ac6:	795b      	ldrb	r3, [r3, #5]
    9ac8:	021b      	lsls	r3, r3, #8
    9aca:	432b      	orrs	r3, r5
    9acc:	798d      	ldrb	r5, [r1, #6]
    9ace:	042d      	lsls	r5, r5, #16
    9ad0:	432b      	orrs	r3, r5
    9ad2:	79cd      	ldrb	r5, [r1, #7]
    9ad4:	062d      	lsls	r5, r5, #24
    9ad6:	431d      	orrs	r5, r3
    9ad8:	2100      	movs	r1, #0
    9ada:	e00b      	b.n	9af4 <LORAREG_GetAttr_MinMaxDr+0x48>
		{
			minDataRate = RegParams.pChParams[i].dataRange.min;
		}
		if ( (RegParams.pChParams[i].dataRange.max > maxDataRate) && (RegParams.pChParams[i].status == ENABLED) )
    9adc:	7843      	ldrb	r3, [r0, #1]
    9ade:	091b      	lsrs	r3, r3, #4
    9ae0:	42bb      	cmp	r3, r7
    9ae2:	dd03      	ble.n	9aec <LORAREG_GetAttr_MinMaxDr+0x40>
    9ae4:	7800      	ldrb	r0, [r0, #0]
    9ae6:	2800      	cmp	r0, #0
    9ae8:	d000      	beq.n	9aec <LORAREG_GetAttr_MinMaxDr+0x40>
		{
			maxDataRate = RegParams.pChParams[i].dataRange.max;
    9aea:	001f      	movs	r7, r3
	for (i = 0; i < RegParams.maxChannels; i++)
    9aec:	3101      	adds	r1, #1
    9aee:	b2c9      	uxtb	r1, r1
    9af0:	42b1      	cmp	r1, r6
    9af2:	da0f      	bge.n	9b14 <LORAREG_GetAttr_MinMaxDr+0x68>
		if ( (RegParams.pChParams[i].dataRange.min < minDataRate) && (RegParams.pChParams[i].status == ENABLED) )
    9af4:	0048      	lsls	r0, r1, #1
    9af6:	1828      	adds	r0, r5, r0
    9af8:	7843      	ldrb	r3, [r0, #1]
    9afa:	071b      	lsls	r3, r3, #28
    9afc:	0f1b      	lsrs	r3, r3, #28
    9afe:	42a3      	cmp	r3, r4
    9b00:	daec      	bge.n	9adc <LORAREG_GetAttr_MinMaxDr+0x30>
    9b02:	7802      	ldrb	r2, [r0, #0]
    9b04:	2a00      	cmp	r2, #0
    9b06:	d0f1      	beq.n	9aec <LORAREG_GetAttr_MinMaxDr+0x40>
			minDataRate = RegParams.pChParams[i].dataRange.min;
    9b08:	001c      	movs	r4, r3
		if ( (RegParams.pChParams[i].dataRange.max > maxDataRate) && (RegParams.pChParams[i].status == ENABLED) )
    9b0a:	7843      	ldrb	r3, [r0, #1]
    9b0c:	091b      	lsrs	r3, r3, #4
    9b0e:	42bb      	cmp	r3, r7
    9b10:	dceb      	bgt.n	9aea <LORAREG_GetAttr_MinMaxDr+0x3e>
    9b12:	e7eb      	b.n	9aec <LORAREG_GetAttr_MinMaxDr+0x40>
		}
	}
	
	if ((RegParams.cmnParams.paramsType2.txParams.uplinkDwellTime == 1) && ((((1 << RegParams.band) & (ISM_ASBAND)) || ((1 << RegParams.band) & (1 << ISM_JPN923))) != 0))
    9b14:	23e1      	movs	r3, #225	; 0xe1
    9b16:	005b      	lsls	r3, r3, #1
    9b18:	4907      	ldr	r1, [pc, #28]	; (9b38 <LORAREG_GetAttr_MinMaxDr+0x8c>)
    9b1a:	5ccb      	ldrb	r3, [r1, r3]
    9b1c:	07db      	lsls	r3, r3, #31
    9b1e:	d506      	bpl.n	9b2e <LORAREG_GetAttr_MinMaxDr+0x82>
    9b20:	232e      	movs	r3, #46	; 0x2e
    9b22:	5cc9      	ldrb	r1, [r1, r3]
    9b24:	4b05      	ldr	r3, [pc, #20]	; (9b3c <LORAREG_GetAttr_MinMaxDr+0x90>)
    9b26:	410b      	asrs	r3, r1
    9b28:	07db      	lsls	r3, r3, #31
    9b2a:	d500      	bpl.n	9b2e <LORAREG_GetAttr_MinMaxDr+0x82>
	{
		minDataRate = DR2;
    9b2c:	2402      	movs	r4, #2
	memcpy(attrOutput,&minmaxDr,sizeof(MinMaxDr_t));
    9b2e:	4663      	mov	r3, ip
    9b30:	701c      	strb	r4, [r3, #0]
    9b32:	705f      	strb	r7, [r3, #1]
}
    9b34:	2008      	movs	r0, #8
    9b36:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9b38:	200024d0 	.word	0x200024d0
    9b3c:	00007fe0 	.word	0x00007fe0

00009b40 <ValidateChannelMaskCntl>:
#if (NA_BAND == 1 || AU_BAND == 1)
static StackRetStatus_t ValidateChannelMaskCntl (LorawanRegionalAttributes_t attr, void *attrInput)
{
    StackRetStatus_t result = LORAWAN_SUCCESS;
	
	uint8_t channelMaskCntl = *(uint8_t *)attrInput;
    9b40:	780b      	ldrb	r3, [r1, #0]

    // 5 is RFU for channel mask for US
    if ((channelMaskCntl == 5) || (channelMaskCntl > 7))
    9b42:	2b05      	cmp	r3, #5
    9b44:	d004      	beq.n	9b50 <ValidateChannelMaskCntl+0x10>
    StackRetStatus_t result = LORAWAN_SUCCESS;
    9b46:	2008      	movs	r0, #8
    if ((channelMaskCntl == 5) || (channelMaskCntl > 7))
    9b48:	2b07      	cmp	r3, #7
    9b4a:	d900      	bls.n	9b4e <ValidateChannelMaskCntl+0xe>
    {
        result = LORAWAN_INVALID_PARAMETER;
    9b4c:	3002      	adds	r0, #2
    }

    return result;
}
    9b4e:	4770      	bx	lr
        result = LORAWAN_INVALID_PARAMETER;
    9b50:	200a      	movs	r0, #10
    9b52:	e7fc      	b.n	9b4e <ValidateChannelMaskCntl+0xe>

00009b54 <ValidateTxPower>:
{
	StackRetStatus_t result = LORAWAN_SUCCESS;
	uint8_t txPowerNew = *(uint8_t *)attrInput;
	
	//if ((txPowerNew < 5) || (txPowerNew > 10) || (txPowerNew == 6))
	if (txPowerNew > RegParams.maxTxPwrIndx)
    9b54:	780a      	ldrb	r2, [r1, #0]
    9b56:	232d      	movs	r3, #45	; 0x2d
    9b58:	4903      	ldr	r1, [pc, #12]	; (9b68 <ValidateTxPower+0x14>)
    9b5a:	56cb      	ldrsb	r3, [r1, r3]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    9b5c:	2008      	movs	r0, #8
	if (txPowerNew > RegParams.maxTxPwrIndx)
    9b5e:	429a      	cmp	r2, r3
    9b60:	dd00      	ble.n	9b64 <ValidateTxPower+0x10>
	{
		result = LORAWAN_INVALID_PARAMETER;
    9b62:	3002      	adds	r0, #2
	}

	return result;
}
    9b64:	4770      	bx	lr
    9b66:	46c0      	nop			; (mov r8, r8)
    9b68:	200024d0 	.word	0x200024d0

00009b6c <ValidateChannelMask>:
 */
#if (NA_BAND == 1 || AU_BAND == 1)
static StackRetStatus_t ValidateChannelMask (LorawanRegionalAttributes_t attr, void *attrInput)
{
	return LORAWAN_SUCCESS;	
}
    9b6c:	2008      	movs	r0, #8
    9b6e:	4770      	bx	lr

00009b70 <ValidateChannelMaskT2>:
#endif

#if (EU_BAND == 1 || AS_BAND == 1 || IND_BAND == 1 || JPN_BAND == 1 || KR_BAND == 1)
static StackRetStatus_t ValidateChannelMaskT2 (LorawanRegionalAttributes_t attr, void *attrInput)
{
    9b70:	b530      	push	{r4, r5, lr}
	StackRetStatus_t retVal = LORAWAN_SUCCESS;
	
	uint16_t channelMask = * (uint16_t *)attrInput;
    9b72:	8809      	ldrh	r1, [r1, #0]
	
	if(channelMask != 0x0000U)
    9b74:	2900      	cmp	r1, #0
    9b76:	d020      	beq.n	9bba <ValidateChannelMaskT2+0x4a>
	{
		for(uint8_t i = 0; i< RegParams.maxChannels;i++)
    9b78:	232a      	movs	r3, #42	; 0x2a
    9b7a:	4a11      	ldr	r2, [pc, #68]	; (9bc0 <ValidateChannelMaskT2+0x50>)
    9b7c:	56d0      	ldrsb	r0, [r2, r3]
    9b7e:	2800      	cmp	r0, #0
    9b80:	dd1b      	ble.n	9bba <ValidateChannelMaskT2+0x4a>
		{
			if(((channelMask && BIT0) == BIT0) && ((RegParams.pOtherChParams[i].parametersDefined & (FREQUENCY_DEFINED | DATA_RANGE_DEFINED)) != (FREQUENCY_DEFINED | DATA_RANGE_DEFINED)))
    9b82:	7a14      	ldrb	r4, [r2, #8]
    9b84:	7a53      	ldrb	r3, [r2, #9]
    9b86:	021b      	lsls	r3, r3, #8
    9b88:	4323      	orrs	r3, r4
    9b8a:	7a94      	ldrb	r4, [r2, #10]
    9b8c:	0424      	lsls	r4, r4, #16
    9b8e:	4323      	orrs	r3, r4
    9b90:	7ad4      	ldrb	r4, [r2, #11]
    9b92:	0624      	lsls	r4, r4, #24
    9b94:	431c      	orrs	r4, r3
    9b96:	2300      	movs	r3, #0
    9b98:	2503      	movs	r5, #3
    9b9a:	e004      	b.n	9ba6 <ValidateChannelMaskT2+0x36>
				retVal = LORAWAN_INVALID_PARAMETER;
				break;
			}
			else
			{
				channelMask = channelMask >> SHIFT1;
    9b9c:	0849      	lsrs	r1, r1, #1
		for(uint8_t i = 0; i< RegParams.maxChannels;i++)
    9b9e:	3301      	adds	r3, #1
    9ba0:	b2db      	uxtb	r3, r3
    9ba2:	4283      	cmp	r3, r0
    9ba4:	da09      	bge.n	9bba <ValidateChannelMaskT2+0x4a>
			if(((channelMask && BIT0) == BIT0) && ((RegParams.pOtherChParams[i].parametersDefined & (FREQUENCY_DEFINED | DATA_RANGE_DEFINED)) != (FREQUENCY_DEFINED | DATA_RANGE_DEFINED)))
    9ba6:	2900      	cmp	r1, #0
    9ba8:	d0f8      	beq.n	9b9c <ValidateChannelMaskT2+0x2c>
    9baa:	005a      	lsls	r2, r3, #1
    9bac:	18d2      	adds	r2, r2, r3
    9bae:	0092      	lsls	r2, r2, #2
    9bb0:	18a2      	adds	r2, r4, r2
    9bb2:	7ad2      	ldrb	r2, [r2, #11]
    9bb4:	402a      	ands	r2, r5
    9bb6:	2a03      	cmp	r2, #3
    9bb8:	d0f0      	beq.n	9b9c <ValidateChannelMaskT2+0x2c>
		////ChMask can be set to 0 if ChMaskCtrl is set to 6
		return retVal = LORAWAN_SUCCESS;
	}
	
	return retVal;
}
    9bba:	2008      	movs	r0, #8
    9bbc:	bd30      	pop	{r4, r5, pc}
    9bbe:	46c0      	nop			; (mov r8, r8)
    9bc0:	200024d0 	.word	0x200024d0

00009bc4 <ValidateChannelMaskCntlT2>:
#endif

#if (EU_BAND == 1 || AS_BAND == 1 || IND_BAND == 1 || JPN_BAND == 1 || KR_BAND == 1)
static StackRetStatus_t ValidateChannelMaskCntlT2 (LorawanRegionalAttributes_t attr, void *attrInput)
{
	uint8_t channelMaskCntl = * (uint16_t *)attrInput;
    9bc4:	780b      	ldrb	r3, [r1, #0]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    9bc6:	2008      	movs	r0, #8
	
    if ( (channelMaskCntl != 0) && (channelMaskCntl != 6) )
    9bc8:	2b00      	cmp	r3, #0
    9bca:	d002      	beq.n	9bd2 <ValidateChannelMaskCntlT2+0xe>
    9bcc:	2b06      	cmp	r3, #6
    9bce:	d001      	beq.n	9bd4 <ValidateChannelMaskCntlT2+0x10>
    {
	    result = LORAWAN_INVALID_PARAMETER;
    9bd0:	3002      	adds	r0, #2
    }
	return result;
}
    9bd2:	4770      	bx	lr
	StackRetStatus_t result = LORAWAN_SUCCESS;
    9bd4:	2008      	movs	r0, #8
    9bd6:	e7fc      	b.n	9bd2 <ValidateChannelMaskCntlT2+0xe>

00009bd8 <ValidateChMaskChCntlT2>:
{
    9bd8:	b510      	push	{r4, lr}
    9bda:	b082      	sub	sp, #8
	ValChMaskCntl_t chMaskchCntl = * (ValChMaskCntl_t *)attrInput;
    9bdc:	ac01      	add	r4, sp, #4
    9bde:	2204      	movs	r2, #4
    9be0:	0020      	movs	r0, r4
    9be2:	4b0f      	ldr	r3, [pc, #60]	; (9c20 <ValidateChMaskChCntlT2+0x48>)
    9be4:	4798      	blx	r3
    if ( chMaskchCntl.chnlMask || chMaskchCntl.chnlMaskCntl )
    9be6:	8863      	ldrh	r3, [r4, #2]
    9be8:	2b00      	cmp	r3, #0
    9bea:	d104      	bne.n	9bf6 <ValidateChMaskChCntlT2+0x1e>
    9bec:	ab01      	add	r3, sp, #4
    9bee:	781a      	ldrb	r2, [r3, #0]
		return LORAWAN_INVALID_PARAMETER;
    9bf0:	230a      	movs	r3, #10
    if ( chMaskchCntl.chnlMask || chMaskchCntl.chnlMaskCntl )
    9bf2:	2a00      	cmp	r2, #0
    9bf4:	d007      	beq.n	9c06 <ValidateChMaskChCntlT2+0x2e>
		if(((ValidateChannelMaskT2(CHANNEL_MASK, (void *)&chMaskchCntl.chnlMask)) == LORAWAN_SUCCESS) && (ValidateChannelMaskCntlT2(CHANNEL_MASK_CNTL, (void *)&chMaskchCntl.chnlMaskCntl)) == LORAWAN_SUCCESS)
    9bf6:	466b      	mov	r3, sp
    9bf8:	1d99      	adds	r1, r3, #6
    9bfa:	201a      	movs	r0, #26
    9bfc:	4b09      	ldr	r3, [pc, #36]	; (9c24 <ValidateChMaskChCntlT2+0x4c>)
    9bfe:	4798      	blx	r3
			return LORAWAN_INVALID_PARAMETER;
    9c00:	230a      	movs	r3, #10
		if(((ValidateChannelMaskT2(CHANNEL_MASK, (void *)&chMaskchCntl.chnlMask)) == LORAWAN_SUCCESS) && (ValidateChannelMaskCntlT2(CHANNEL_MASK_CNTL, (void *)&chMaskchCntl.chnlMaskCntl)) == LORAWAN_SUCCESS)
    9c02:	2808      	cmp	r0, #8
    9c04:	d002      	beq.n	9c0c <ValidateChMaskChCntlT2+0x34>
}
    9c06:	0018      	movs	r0, r3
    9c08:	b002      	add	sp, #8
    9c0a:	bd10      	pop	{r4, pc}
		if(((ValidateChannelMaskT2(CHANNEL_MASK, (void *)&chMaskchCntl.chnlMask)) == LORAWAN_SUCCESS) && (ValidateChannelMaskCntlT2(CHANNEL_MASK_CNTL, (void *)&chMaskchCntl.chnlMaskCntl)) == LORAWAN_SUCCESS)
    9c0c:	a901      	add	r1, sp, #4
    9c0e:	3013      	adds	r0, #19
    9c10:	4b05      	ldr	r3, [pc, #20]	; (9c28 <ValidateChMaskChCntlT2+0x50>)
    9c12:	4798      	blx	r3
    9c14:	0003      	movs	r3, r0
    9c16:	2808      	cmp	r0, #8
    9c18:	d0f5      	beq.n	9c06 <ValidateChMaskChCntlT2+0x2e>
			return LORAWAN_INVALID_PARAMETER;
    9c1a:	230a      	movs	r3, #10
    9c1c:	e7f3      	b.n	9c06 <ValidateChMaskChCntlT2+0x2e>
    9c1e:	46c0      	nop			; (mov r8, r8)
    9c20:	00019d89 	.word	0x00019d89
    9c24:	00009b71 	.word	0x00009b71
    9c28:	00009bc5 	.word	0x00009bc5

00009c2c <ValidateDataRate>:
{
    StackRetStatus_t result = LORAWAN_SUCCESS;
	
	uint8_t dataRate = *(uint8_t *)attrInput;

    if ( dataRate > RegParams.minDataRate )
    9c2c:	780a      	ldrb	r2, [r1, #0]
    9c2e:	2324      	movs	r3, #36	; 0x24
    9c30:	4903      	ldr	r1, [pc, #12]	; (9c40 <ValidateDataRate+0x14>)
    9c32:	5ccb      	ldrb	r3, [r1, r3]
    StackRetStatus_t result = LORAWAN_SUCCESS;
    9c34:	2008      	movs	r0, #8
    if ( dataRate > RegParams.minDataRate )
    9c36:	429a      	cmp	r2, r3
    9c38:	d900      	bls.n	9c3c <ValidateDataRate+0x10>
    {
        result = LORAWAN_INVALID_PARAMETER;
    9c3a:	3002      	adds	r0, #2
    }

    return result;
}
    9c3c:	4770      	bx	lr
    9c3e:	46c0      	nop			; (mov r8, r8)
    9c40:	200024d0 	.word	0x200024d0

00009c44 <ValidateSupportedDr>:
#endif

static StackRetStatus_t ValidateSupportedDr (LorawanRegionalAttributes_t attr, void *attrInput)
{
    9c44:	b570      	push	{r4, r5, r6, lr}
	StackRetStatus_t result = LORAWAN_INVALID_PARAMETER;
	uint8_t  dataRate;
	dataRate = *(uint8_t *)attrInput;
    9c46:	780d      	ldrb	r5, [r1, #0]
	
	for(uint8_t i = 0; i <RegParams.maxChannels; i++)
    9c48:	232a      	movs	r3, #42	; 0x2a
    9c4a:	4a14      	ldr	r2, [pc, #80]	; (9c9c <ValidateSupportedDr+0x58>)
    9c4c:	56d4      	ldrsb	r4, [r2, r3]
    9c4e:	2c00      	cmp	r4, #0
    9c50:	dd22      	ble.n	9c98 <ValidateSupportedDr+0x54>
	{
		if(RegParams.pChParams[i].status == ENABLED && dataRate >= RegParams.pChParams[i].dataRange.min &&
    9c52:	7910      	ldrb	r0, [r2, #4]
    9c54:	7953      	ldrb	r3, [r2, #5]
    9c56:	021b      	lsls	r3, r3, #8
    9c58:	4303      	orrs	r3, r0
    9c5a:	7990      	ldrb	r0, [r2, #6]
    9c5c:	0400      	lsls	r0, r0, #16
    9c5e:	4303      	orrs	r3, r0
    9c60:	79d0      	ldrb	r0, [r2, #7]
    9c62:	0600      	lsls	r0, r0, #24
    9c64:	4318      	orrs	r0, r3
    9c66:	2300      	movs	r3, #0
    9c68:	002e      	movs	r6, r5
    9c6a:	e003      	b.n	9c74 <ValidateSupportedDr+0x30>
	for(uint8_t i = 0; i <RegParams.maxChannels; i++)
    9c6c:	3301      	adds	r3, #1
    9c6e:	b2db      	uxtb	r3, r3
    9c70:	42a3      	cmp	r3, r4
    9c72:	da0f      	bge.n	9c94 <ValidateSupportedDr+0x50>
		if(RegParams.pChParams[i].status == ENABLED && dataRate >= RegParams.pChParams[i].dataRange.min &&
    9c74:	005a      	lsls	r2, r3, #1
    9c76:	1882      	adds	r2, r0, r2
    9c78:	7811      	ldrb	r1, [r2, #0]
    9c7a:	2900      	cmp	r1, #0
    9c7c:	d0f6      	beq.n	9c6c <ValidateSupportedDr+0x28>
    9c7e:	7851      	ldrb	r1, [r2, #1]
    9c80:	0709      	lsls	r1, r1, #28
    9c82:	0f09      	lsrs	r1, r1, #28
    9c84:	428d      	cmp	r5, r1
    9c86:	dbf1      	blt.n	9c6c <ValidateSupportedDr+0x28>
		   dataRate <= RegParams.pChParams[i].dataRange.max)
    9c88:	7852      	ldrb	r2, [r2, #1]
    9c8a:	0912      	lsrs	r2, r2, #4
		if(RegParams.pChParams[i].status == ENABLED && dataRate >= RegParams.pChParams[i].dataRange.min &&
    9c8c:	4296      	cmp	r6, r2
    9c8e:	dced      	bgt.n	9c6c <ValidateSupportedDr+0x28>
		{
			result = LORAWAN_SUCCESS;
    9c90:	2008      	movs	r0, #8
    9c92:	e000      	b.n	9c96 <ValidateSupportedDr+0x52>
	StackRetStatus_t result = LORAWAN_INVALID_PARAMETER;
    9c94:	200a      	movs	r0, #10
			break;
		}
	}
	return result;	
}
    9c96:	bd70      	pop	{r4, r5, r6, pc}
	StackRetStatus_t result = LORAWAN_INVALID_PARAMETER;
    9c98:	200a      	movs	r0, #10
    9c9a:	e7fc      	b.n	9c96 <ValidateSupportedDr+0x52>
    9c9c:	200024d0 	.word	0x200024d0

00009ca0 <ValidateRxFreqT1>:

#if (NA_BAND == 1 || AU_BAND == 1)
static StackRetStatus_t ValidateRxFreqT1 (LorawanRegionalAttributes_t attr, void *attrInput)
{
    9ca0:	b510      	push	{r4, lr}
	StackRetStatus_t result = LORAWAN_SUCCESS;
	uint32_t FreqNew = *(uint32_t *)attrInput;
	
	if(FreqNew < FREQ_923300KHZ || FreqNew > FREQ_927500KHZ || (FreqNew - FREQ_923300KHZ) % FREQ_600KHZ != 0)
    9ca2:	6808      	ldr	r0, [r1, #0]
    9ca4:	4b07      	ldr	r3, [pc, #28]	; (9cc4 <ValidateRxFreqT1+0x24>)
    9ca6:	469c      	mov	ip, r3
    9ca8:	4460      	add	r0, ip
    9caa:	4a07      	ldr	r2, [pc, #28]	; (9cc8 <ValidateRxFreqT1+0x28>)
	{
		result = LORAWAN_INVALID_PARAMETER;
    9cac:	230a      	movs	r3, #10
	if(FreqNew < FREQ_923300KHZ || FreqNew > FREQ_927500KHZ || (FreqNew - FREQ_923300KHZ) % FREQ_600KHZ != 0)
    9cae:	4290      	cmp	r0, r2
    9cb0:	d806      	bhi.n	9cc0 <ValidateRxFreqT1+0x20>
    9cb2:	4906      	ldr	r1, [pc, #24]	; (9ccc <ValidateRxFreqT1+0x2c>)
    9cb4:	4b06      	ldr	r3, [pc, #24]	; (9cd0 <ValidateRxFreqT1+0x30>)
    9cb6:	4798      	blx	r3
	StackRetStatus_t result = LORAWAN_SUCCESS;
    9cb8:	2308      	movs	r3, #8
	if(FreqNew < FREQ_923300KHZ || FreqNew > FREQ_927500KHZ || (FreqNew - FREQ_923300KHZ) % FREQ_600KHZ != 0)
    9cba:	2900      	cmp	r1, #0
    9cbc:	d000      	beq.n	9cc0 <ValidateRxFreqT1+0x20>
		result = LORAWAN_INVALID_PARAMETER;
    9cbe:	3302      	adds	r3, #2
	}
	return result;
}
    9cc0:	0018      	movs	r0, r3
    9cc2:	bd10      	pop	{r4, pc}
    9cc4:	c8f78f60 	.word	0xc8f78f60
    9cc8:	00401640 	.word	0x00401640
    9ccc:	000927c0 	.word	0x000927c0
    9cd0:	00016731 	.word	0x00016731

00009cd4 <ValidateRx1DataRateOffset>:
{
	StackRetStatus_t retVal = LORAWAN_INVALID_PARAMETER;
	
	uint8_t rx1DrOffset = *(uint8_t *)attrInput;
	
	if(rx1DrOffset <= RegParams.Rx1DrOffset)
    9cd4:	780a      	ldrb	r2, [r1, #0]
    9cd6:	232c      	movs	r3, #44	; 0x2c
    9cd8:	4903      	ldr	r1, [pc, #12]	; (9ce8 <ValidateRx1DataRateOffset+0x14>)
    9cda:	56cb      	ldrsb	r3, [r1, r3]
	StackRetStatus_t retVal = LORAWAN_INVALID_PARAMETER;
    9cdc:	200a      	movs	r0, #10
	if(rx1DrOffset <= RegParams.Rx1DrOffset)
    9cde:	429a      	cmp	r2, r3
    9ce0:	dc00      	bgt.n	9ce4 <ValidateRx1DataRateOffset+0x10>
	{
		retVal = LORAWAN_SUCCESS;
    9ce2:	3802      	subs	r0, #2
	}
	
	return retVal;
}
    9ce4:	4770      	bx	lr
    9ce6:	46c0      	nop			; (mov r8, r8)
    9ce8:	200024d0 	.word	0x200024d0

00009cec <getSubBandId>:
}
#endif

#if (EU_BAND == 1 || AS_BAND == 1 || IND_BAND == 1 || JPN_BAND == 1 || KR_BAND == 1)
static uint8_t getSubBandId(uint32_t frequency)
{
    9cec:	b530      	push	{r4, r5, lr}
    9cee:	0004      	movs	r4, r0
	uint8_t subBandId = 0xFF;
#if (EU_BAND == 1)	|| (JPN_BAND == 1)
	for(uint8_t i = 0; i < RegParams.maxSubBands; i++)
    9cf0:	2329      	movs	r3, #41	; 0x29
    9cf2:	4a19      	ldr	r2, [pc, #100]	; (9d58 <getSubBandId+0x6c>)
    9cf4:	5cd5      	ldrb	r5, [r2, r3]
    9cf6:	2d00      	cmp	r5, #0
    9cf8:	d02c      	beq.n	9d54 <getSubBandId+0x68>
	{
		if(frequency >= RegParams.pSubBandParams[i].freqMin && frequency <= RegParams.pSubBandParams[i].freqMax)
    9cfa:	0011      	movs	r1, r2
    9cfc:	7b13      	ldrb	r3, [r2, #12]
    9cfe:	7b52      	ldrb	r2, [r2, #13]
    9d00:	0212      	lsls	r2, r2, #8
    9d02:	431a      	orrs	r2, r3
    9d04:	7b8b      	ldrb	r3, [r1, #14]
    9d06:	041b      	lsls	r3, r3, #16
    9d08:	431a      	orrs	r2, r3
    9d0a:	7bcb      	ldrb	r3, [r1, #15]
    9d0c:	061b      	lsls	r3, r3, #24
    9d0e:	4313      	orrs	r3, r2
    9d10:	2000      	movs	r0, #0
    9d12:	e004      	b.n	9d1e <getSubBandId+0x32>
	for(uint8_t i = 0; i < RegParams.maxSubBands; i++)
    9d14:	3001      	adds	r0, #1
    9d16:	b2c0      	uxtb	r0, r0
    9d18:	330c      	adds	r3, #12
    9d1a:	42a8      	cmp	r0, r5
    9d1c:	d018      	beq.n	9d50 <getSubBandId+0x64>
		if(frequency >= RegParams.pSubBandParams[i].freqMin && frequency <= RegParams.pSubBandParams[i].freqMax)
    9d1e:	781a      	ldrb	r2, [r3, #0]
    9d20:	7859      	ldrb	r1, [r3, #1]
    9d22:	0209      	lsls	r1, r1, #8
    9d24:	4311      	orrs	r1, r2
    9d26:	789a      	ldrb	r2, [r3, #2]
    9d28:	0412      	lsls	r2, r2, #16
    9d2a:	4311      	orrs	r1, r2
    9d2c:	78da      	ldrb	r2, [r3, #3]
    9d2e:	0612      	lsls	r2, r2, #24
    9d30:	430a      	orrs	r2, r1
    9d32:	42a2      	cmp	r2, r4
    9d34:	d8ee      	bhi.n	9d14 <getSubBandId+0x28>
    9d36:	791a      	ldrb	r2, [r3, #4]
    9d38:	7959      	ldrb	r1, [r3, #5]
    9d3a:	0209      	lsls	r1, r1, #8
    9d3c:	4311      	orrs	r1, r2
    9d3e:	799a      	ldrb	r2, [r3, #6]
    9d40:	0412      	lsls	r2, r2, #16
    9d42:	4311      	orrs	r1, r2
    9d44:	79da      	ldrb	r2, [r3, #7]
    9d46:	0612      	lsls	r2, r2, #24
    9d48:	430a      	orrs	r2, r1
    9d4a:	4294      	cmp	r4, r2
    9d4c:	d8e2      	bhi.n	9d14 <getSubBandId+0x28>
    9d4e:	e000      	b.n	9d52 <getSubBandId+0x66>
	uint8_t subBandId = 0xFF;
    9d50:	20ff      	movs	r0, #255	; 0xff
#elif (AS_BAND == 1)
	// whole ASIA 923 spectrum is one band
	subBandId = 0;
#endif
	return subBandId;
}
    9d52:	bd30      	pop	{r4, r5, pc}
	uint8_t subBandId = 0xFF;
    9d54:	20ff      	movs	r0, #255	; 0xff
    9d56:	e7fc      	b.n	9d52 <getSubBandId+0x66>
    9d58:	200024d0 	.word	0x200024d0

00009d5c <ValidateFreq>:
{
    9d5c:	b510      	push	{r4, lr}
    if(getSubBandId(frequencyNew) == 0xFF)
    9d5e:	6808      	ldr	r0, [r1, #0]
    9d60:	4b04      	ldr	r3, [pc, #16]	; (9d74 <ValidateFreq+0x18>)
    9d62:	4798      	blx	r3
	StackRetStatus_t retVal = LORAWAN_SUCCESS;
    9d64:	2308      	movs	r3, #8
    if(getSubBandId(frequencyNew) == 0xFF)
    9d66:	28ff      	cmp	r0, #255	; 0xff
    9d68:	d001      	beq.n	9d6e <ValidateFreq+0x12>
}
    9d6a:	0018      	movs	r0, r3
    9d6c:	bd10      	pop	{r4, pc}
		retVal = LORAWAN_INVALID_PARAMETER;
    9d6e:	3302      	adds	r3, #2
    9d70:	e7fb      	b.n	9d6a <ValidateFreq+0xe>
    9d72:	46c0      	nop			; (mov r8, r8)
    9d74:	00009ced 	.word	0x00009ced

00009d78 <ValidateFrequencyAS>:
 */
#if (AS_BAND == 1)
static StackRetStatus_t ValidateFrequencyAS (LorawanRegionalAttributes_t attr, void *attrInput)
{
	StackRetStatus_t result = LORAWAN_SUCCESS;
	uint32_t frequencyNew = * (uint32_t *)attrInput;
    9d78:	680b      	ldr	r3, [r1, #0]

    /*Bands Supporting Freq 923-925MHz*/
    if(RegParams.band == ISM_BRN923 || RegParams.band == ISM_CMB923 || RegParams.band == ISM_INS923 || RegParams.band == ISM_LAOS923)
    9d7a:	222e      	movs	r2, #46	; 0x2e
    9d7c:	4919      	ldr	r1, [pc, #100]	; (9de4 <ValidateFrequencyAS+0x6c>)
    9d7e:	5c8a      	ldrb	r2, [r1, r2]
    9d80:	1f91      	subs	r1, r2, #6
    9d82:	2903      	cmp	r1, #3
    9d84:	d808      	bhi.n	9d98 <ValidateFrequencyAS+0x20>
	{
		if ( (frequencyNew < FREQ_923000KHZ) || (frequencyNew > FREQ_925000KHZ) )
    9d86:	4a18      	ldr	r2, [pc, #96]	; (9de8 <ValidateFrequencyAS+0x70>)
    9d88:	4694      	mov	ip, r2
    9d8a:	4463      	add	r3, ip
    9d8c:	4a17      	ldr	r2, [pc, #92]	; (9dec <ValidateFrequencyAS+0x74>)
	StackRetStatus_t result = LORAWAN_SUCCESS;
    9d8e:	2008      	movs	r0, #8
		if ( (frequencyNew < FREQ_923000KHZ) || (frequencyNew > FREQ_925000KHZ) )
    9d90:	4293      	cmp	r3, r2
    9d92:	d900      	bls.n	9d96 <ValidateFrequencyAS+0x1e>
		{
			result = LORAWAN_INVALID_PARAMETER;
    9d94:	3002      	adds	r0, #2
	else
	{
		result = LORAWAN_INVALID_PARAMETER;
	}
	return result;
}
    9d96:	4770      	bx	lr
	else if(RegParams.band == ISM_NZ923)
    9d98:	2a0a      	cmp	r2, #10
    9d9a:	d011      	beq.n	9dc0 <ValidateFrequencyAS+0x48>
	else if(RegParams.band == ISM_SP923 || RegParams.band == ISM_THAI923 || RegParams.band == ISM_VTM923)
    9d9c:	2a0b      	cmp	r2, #11
    9d9e:	d018      	beq.n	9dd2 <ValidateFrequencyAS+0x5a>
    9da0:	0011      	movs	r1, r2
    9da2:	390d      	subs	r1, #13
    9da4:	2901      	cmp	r1, #1
    9da6:	d914      	bls.n	9dd2 <ValidateFrequencyAS+0x5a>
		result = LORAWAN_INVALID_PARAMETER;
    9da8:	200a      	movs	r0, #10
	else if(RegParams.band == ISM_TWN923)
    9daa:	2a0c      	cmp	r2, #12
    9dac:	d1f3      	bne.n	9d96 <ValidateFrequencyAS+0x1e>
		if ( (frequencyNew < FREQ_922000KHZ) || (frequencyNew > FREQ_928000KHZ) )
    9dae:	4a10      	ldr	r2, [pc, #64]	; (9df0 <ValidateFrequencyAS+0x78>)
    9db0:	4694      	mov	ip, r2
    9db2:	4463      	add	r3, ip
    9db4:	4a0f      	ldr	r2, [pc, #60]	; (9df4 <ValidateFrequencyAS+0x7c>)
	StackRetStatus_t result = LORAWAN_SUCCESS;
    9db6:	3802      	subs	r0, #2
		if ( (frequencyNew < FREQ_922000KHZ) || (frequencyNew > FREQ_928000KHZ) )
    9db8:	4293      	cmp	r3, r2
    9dba:	d9ec      	bls.n	9d96 <ValidateFrequencyAS+0x1e>
			result = LORAWAN_INVALID_PARAMETER;
    9dbc:	3002      	adds	r0, #2
    9dbe:	e7ea      	b.n	9d96 <ValidateFrequencyAS+0x1e>
		if ( (frequencyNew < FREQ_915000KHZ) || (frequencyNew > FREQ_928000KHZ) )
    9dc0:	4a0d      	ldr	r2, [pc, #52]	; (9df8 <ValidateFrequencyAS+0x80>)
    9dc2:	4694      	mov	ip, r2
    9dc4:	4463      	add	r3, ip
    9dc6:	4a0d      	ldr	r2, [pc, #52]	; (9dfc <ValidateFrequencyAS+0x84>)
	StackRetStatus_t result = LORAWAN_SUCCESS;
    9dc8:	2008      	movs	r0, #8
		if ( (frequencyNew < FREQ_915000KHZ) || (frequencyNew > FREQ_928000KHZ) )
    9dca:	4293      	cmp	r3, r2
    9dcc:	d9e3      	bls.n	9d96 <ValidateFrequencyAS+0x1e>
			result = LORAWAN_INVALID_PARAMETER;
    9dce:	3002      	adds	r0, #2
    9dd0:	e7e1      	b.n	9d96 <ValidateFrequencyAS+0x1e>
		if ( (frequencyNew < FREQ_920000KHZ) || (frequencyNew > FREQ_925000KHZ) )
    9dd2:	4a0b      	ldr	r2, [pc, #44]	; (9e00 <ValidateFrequencyAS+0x88>)
    9dd4:	4694      	mov	ip, r2
    9dd6:	4463      	add	r3, ip
    9dd8:	4a0a      	ldr	r2, [pc, #40]	; (9e04 <ValidateFrequencyAS+0x8c>)
	StackRetStatus_t result = LORAWAN_SUCCESS;
    9dda:	2008      	movs	r0, #8
		if ( (frequencyNew < FREQ_920000KHZ) || (frequencyNew > FREQ_925000KHZ) )
    9ddc:	4293      	cmp	r3, r2
    9dde:	d9da      	bls.n	9d96 <ValidateFrequencyAS+0x1e>
			result = LORAWAN_INVALID_PARAMETER;
    9de0:	3002      	adds	r0, #2
    9de2:	e7d8      	b.n	9d96 <ValidateFrequencyAS+0x1e>
    9de4:	200024d0 	.word	0x200024d0
    9de8:	c8fc2340 	.word	0xc8fc2340
    9dec:	001e8480 	.word	0x001e8480
    9df0:	c90b6580 	.word	0xc90b6580
    9df4:	005b8d80 	.word	0x005b8d80
    9df8:	c9763540 	.word	0xc9763540
    9dfc:	00c65d40 	.word	0x00c65d40
    9e00:	c929ea00 	.word	0xc929ea00
    9e04:	004c4b40 	.word	0x004c4b40

00009e08 <setTxParams>:
}
#endif

#if ( AS_BAND == 1 || IND_BAND == 1 || JPN_BAND == 1 || KR_BAND == 1)
static StackRetStatus_t setTxParams(LorawanRegionalAttributes_t attr, void *attrInput)
{
    9e08:	b5f0      	push	{r4, r5, r6, r7, lr}
	TxParams_t updateTxParams;

	memcpy(&updateTxParams,attrInput,sizeof(TxParams_t));
    9e0a:	780c      	ldrb	r4, [r1, #0]
    9e0c:	784a      	ldrb	r2, [r1, #1]
    9e0e:	0791      	lsls	r1, r2, #30
    9e10:	0fc9      	lsrs	r1, r1, #31
	
	RegParams.cmnParams.paramsType2.txParams.uplinkDwellTime = updateTxParams.uplinkDwellTime;
    9e12:	4e11      	ldr	r6, [pc, #68]	; (9e58 <setTxParams+0x50>)
    9e14:	25e1      	movs	r5, #225	; 0xe1
    9e16:	006d      	lsls	r5, r5, #1
    9e18:	2001      	movs	r0, #1
    9e1a:	4002      	ands	r2, r0
    9e1c:	5d73      	ldrb	r3, [r6, r5]
    9e1e:	2701      	movs	r7, #1
    9e20:	43bb      	bics	r3, r7
    9e22:	4313      	orrs	r3, r2
    9e24:	5573      	strb	r3, [r6, r5]
	if (RegParams.cmnParams.paramsType2.txParams.uplinkDwellTime == 1)
    9e26:	4218      	tst	r0, r3
    9e28:	d111      	bne.n	9e4e <setTxParams+0x46>
	{
		RegParams.maxDataRate = DR2;
	}
	else
	{
		RegParams.maxDataRate = DR0;
    9e2a:	2000      	movs	r0, #0
    9e2c:	2325      	movs	r3, #37	; 0x25
    9e2e:	4a0a      	ldr	r2, [pc, #40]	; (9e58 <setTxParams+0x50>)
    9e30:	54d0      	strb	r0, [r2, r3]
	}
	RegParams.cmnParams.paramsType2.txParams.downlinkDwellTime = updateTxParams.downlinkDwellTime;
    9e32:	4a09      	ldr	r2, [pc, #36]	; (9e58 <setTxParams+0x50>)
    9e34:	20e1      	movs	r0, #225	; 0xe1
    9e36:	0040      	lsls	r0, r0, #1
    9e38:	0049      	lsls	r1, r1, #1
    9e3a:	5c13      	ldrb	r3, [r2, r0]
    9e3c:	2502      	movs	r5, #2
    9e3e:	43ab      	bics	r3, r5
    9e40:	430b      	orrs	r3, r1
    9e42:	5413      	strb	r3, [r2, r0]
	RegParams.maxTxPwr = updateTxParams.maxEIRP;
    9e44:	2328      	movs	r3, #40	; 0x28
    9e46:	54d4      	strb	r4, [r2, r3]
	
	return LORAWAN_SUCCESS;
}
    9e48:	38bb      	subs	r0, #187	; 0xbb
    9e4a:	38ff      	subs	r0, #255	; 0xff
    9e4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		RegParams.maxDataRate = DR2;
    9e4e:	3001      	adds	r0, #1
    9e50:	2325      	movs	r3, #37	; 0x25
    9e52:	54f0      	strb	r0, [r6, r3]
    9e54:	e7ed      	b.n	9e32 <setTxParams+0x2a>
    9e56:	46c0      	nop			; (mov r8, r8)
    9e58:	200024d0 	.word	0x200024d0

00009e5c <setChlistDefaultState>:
	return status;
}
#endif
#if (EU_BAND == 1 || AS_BAND == 1 || IND_BAND == 1 || JPN_BAND == 1 || KR_BAND == 1)
static StackRetStatus_t setChlistDefaultState(LorawanRegionalAttributes_t attr, void *attrInput)
{
    9e5c:	b5f0      	push	{r4, r5, r6, r7, lr}
	StackRetStatus_t status = LORAWAN_SUCCESS;
	/* Traverse the entire channel list and disable the all the Channel status except Default channels */
	for (uint8_t i = 0; i <= RegParams.maxChannels; i++)
    9e5e:	232a      	movs	r3, #42	; 0x2a
    9e60:	4a17      	ldr	r2, [pc, #92]	; (9ec0 <setChlistDefaultState+0x64>)
    9e62:	5cd3      	ldrb	r3, [r2, r3]
    9e64:	2b7f      	cmp	r3, #127	; 0x7f
    9e66:	d829      	bhi.n	9ebc <setChlistDefaultState+0x60>
    9e68:	2200      	movs	r2, #0
	{
		if(RegParams.pOtherChParams[i].joinRequestChannel != true)
    9e6a:	4815      	ldr	r0, [pc, #84]	; (9ec0 <setChlistDefaultState+0x64>)
		{
			RegParams.pChParams[i].status = DISABLED;
    9e6c:	0004      	movs	r4, r0
    9e6e:	2700      	movs	r7, #0
	for (uint8_t i = 0; i <= RegParams.maxChannels; i++)
    9e70:	0006      	movs	r6, r0
    9e72:	252a      	movs	r5, #42	; 0x2a
    9e74:	e004      	b.n	9e80 <setChlistDefaultState+0x24>
    9e76:	3201      	adds	r2, #1
    9e78:	b2d2      	uxtb	r2, r2
    9e7a:	5773      	ldrsb	r3, [r6, r5]
    9e7c:	429a      	cmp	r2, r3
    9e7e:	dc1d      	bgt.n	9ebc <setChlistDefaultState+0x60>
		if(RegParams.pOtherChParams[i].joinRequestChannel != true)
    9e80:	7a03      	ldrb	r3, [r0, #8]
    9e82:	7a41      	ldrb	r1, [r0, #9]
    9e84:	0209      	lsls	r1, r1, #8
    9e86:	430b      	orrs	r3, r1
    9e88:	7a81      	ldrb	r1, [r0, #10]
    9e8a:	0409      	lsls	r1, r1, #16
    9e8c:	4319      	orrs	r1, r3
    9e8e:	7ac3      	ldrb	r3, [r0, #11]
    9e90:	061b      	lsls	r3, r3, #24
    9e92:	4319      	orrs	r1, r3
    9e94:	0053      	lsls	r3, r2, #1
    9e96:	189b      	adds	r3, r3, r2
    9e98:	009b      	lsls	r3, r3, #2
    9e9a:	185b      	adds	r3, r3, r1
    9e9c:	7a5b      	ldrb	r3, [r3, #9]
    9e9e:	2b00      	cmp	r3, #0
    9ea0:	d1e9      	bne.n	9e76 <setChlistDefaultState+0x1a>
			RegParams.pChParams[i].status = DISABLED;
    9ea2:	7923      	ldrb	r3, [r4, #4]
    9ea4:	7961      	ldrb	r1, [r4, #5]
    9ea6:	0209      	lsls	r1, r1, #8
    9ea8:	4319      	orrs	r1, r3
    9eaa:	79a3      	ldrb	r3, [r4, #6]
    9eac:	041b      	lsls	r3, r3, #16
    9eae:	4319      	orrs	r1, r3
    9eb0:	79e3      	ldrb	r3, [r4, #7]
    9eb2:	061b      	lsls	r3, r3, #24
    9eb4:	430b      	orrs	r3, r1
    9eb6:	0051      	lsls	r1, r2, #1
    9eb8:	54cf      	strb	r7, [r1, r3]
    9eba:	e7dc      	b.n	9e76 <setChlistDefaultState+0x1a>
		}
	}
	return status;
}
    9ebc:	2008      	movs	r0, #8
    9ebe:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9ec0:	200024d0 	.word	0x200024d0

00009ec4 <SearchAvailableChannel1>:
{
    9ec4:	b5f0      	push	{r4, r5, r6, r7, lr}
    9ec6:	46de      	mov	lr, fp
    9ec8:	4657      	mov	r7, sl
    9eca:	464e      	mov	r6, r9
    9ecc:	4645      	mov	r5, r8
    9ece:	b5e0      	push	{r5, r6, r7, lr}
    9ed0:	b0af      	sub	sp, #188	; 0xbc
    9ed2:	000d      	movs	r5, r1
    9ed4:	0017      	movs	r7, r2
    9ed6:	9309      	str	r3, [sp, #36]	; 0x24
	memset(ChList, 0, (MAX_CHANNELS_BANDWIDTH_125_AU_NA + MAX_CHANNELS_BANDWIDTH_500_AU_NA) * 2);  
    9ed8:	2290      	movs	r2, #144	; 0x90
    9eda:	2100      	movs	r1, #0
    9edc:	a80a      	add	r0, sp, #40	; 0x28
    9ede:	4b77      	ldr	r3, [pc, #476]	; (a0bc <SearchAvailableChannel1+0x1f8>)
    9ee0:	4798      	blx	r3
	if(transmissionType == false)
    9ee2:	2d00      	cmp	r5, #0
    9ee4:	d01a      	beq.n	9f1c <SearchAvailableChannel1+0x58>
					((!transmissionType) &&((RegParams.pChParams[i + j].status == ENABLED) && ((i+j) != RegParams.lastUsedChannelIndex))
    9ee6:	4b76      	ldr	r3, [pc, #472]	; (a0c0 <SearchAvailableChannel1+0x1fc>)
    9ee8:	222f      	movs	r2, #47	; 0x2f
    9eea:	5c9a      	ldrb	r2, [r3, r2]
    9eec:	4693      	mov	fp, r2
					((((i+j) < MAX_CHANNELS_BANDWIDTH_125_AU_NA) && (RegParams.cmnParams.paramsType1.lastUsedSB == k))
    9eee:	2258      	movs	r2, #88	; 0x58
    9ef0:	32ff      	adds	r2, #255	; 0xff
    9ef2:	5c9a      	ldrb	r2, [r3, r2]
    9ef4:	9207      	str	r2, [sp, #28]
					(RegParams.cmnParams.paramsType1.lastUsedSB == ((i + j) - MAX_CHANNELS_BANDWIDTH_125_AU_NA))))
    9ef6:	9208      	str	r2, [sp, #32]
					((!transmissionType) &&((RegParams.pChParams[i + j].status == ENABLED) && ((i+j) != RegParams.lastUsedChannelIndex))
    9ef8:	7919      	ldrb	r1, [r3, #4]
    9efa:	795a      	ldrb	r2, [r3, #5]
    9efc:	0212      	lsls	r2, r2, #8
    9efe:	4311      	orrs	r1, r2
    9f00:	799a      	ldrb	r2, [r3, #6]
    9f02:	0412      	lsls	r2, r2, #16
    9f04:	430a      	orrs	r2, r1
    9f06:	79db      	ldrb	r3, [r3, #7]
    9f08:	061b      	lsls	r3, r3, #24
    9f0a:	4313      	orrs	r3, r2
    9f0c:	9302      	str	r3, [sp, #8]
					(RegParams.cmnParams.paramsType1.lastUsedSB == ((i + j) - MAX_CHANNELS_BANDWIDTH_125_AU_NA))))
    9f0e:	9303      	str	r3, [sp, #12]
    9f10:	2100      	movs	r1, #0
    9f12:	2600      	movs	r6, #0
				if (((transmissionType) && (currDr >= RegParams.pChParams[i + j].dataRange.min) && (currDr <= RegParams.pChParams[i + j].dataRange.max) 
    9f14:	46b9      	mov	r9, r7
    9f16:	46bc      	mov	ip, r7
    9f18:	0037      	movs	r7, r6
    9f1a:	e03a      	b.n	9f92 <SearchAvailableChannel1+0xce>
		if(RegParams.FeaturesSupport & JOIN_BACKOFF_SUPPORT)
    9f1c:	2320      	movs	r3, #32
    9f1e:	4a68      	ldr	r2, [pc, #416]	; (a0c0 <SearchAvailableChannel1+0x1fc>)
    9f20:	5cd3      	ldrb	r3, [r2, r3]
    9f22:	069b      	lsls	r3, r3, #26
    9f24:	d5df      	bpl.n	9ee6 <SearchAvailableChannel1+0x22>
			if(SwTimerIsRunning(RegParams.pJoinDutyCycleTimer->timerId)) 
    9f26:	0011      	movs	r1, r2
    9f28:	7d13      	ldrb	r3, [r2, #20]
    9f2a:	7d52      	ldrb	r2, [r2, #21]
    9f2c:	0212      	lsls	r2, r2, #8
    9f2e:	431a      	orrs	r2, r3
    9f30:	7d8b      	ldrb	r3, [r1, #22]
    9f32:	041b      	lsls	r3, r3, #16
    9f34:	431a      	orrs	r2, r3
    9f36:	7dcb      	ldrb	r3, [r1, #23]
    9f38:	061b      	lsls	r3, r3, #24
    9f3a:	4313      	orrs	r3, r2
    9f3c:	7a18      	ldrb	r0, [r3, #8]
    9f3e:	4b61      	ldr	r3, [pc, #388]	; (a0c4 <SearchAvailableChannel1+0x200>)
    9f40:	4798      	blx	r3
    9f42:	0003      	movs	r3, r0
					return LORAWAN_NO_CHANNELS_FOUND;
    9f44:	2010      	movs	r0, #16
			if(SwTimerIsRunning(RegParams.pJoinDutyCycleTimer->timerId)) 
    9f46:	2b00      	cmp	r3, #0
    9f48:	d0cd      	beq.n	9ee6 <SearchAvailableChannel1+0x22>
    9f4a:	e053      	b.n	9ff4 <SearchAvailableChannel1+0x130>
					((!transmissionType) &&((RegParams.pChParams[i + j].status == ENABLED) && ((i+j) != RegParams.lastUsedChannelIndex))
    9f4c:	7806      	ldrb	r6, [r0, #0]
    9f4e:	2e00      	cmp	r6, #0
    9f50:	d100      	bne.n	9f54 <SearchAvailableChannel1+0x90>
    9f52:	e088      	b.n	a066 <SearchAvailableChannel1+0x1a2>
    9f54:	001e      	movs	r6, r3
    9f56:	459b      	cmp	fp, r3
    9f58:	d100      	bne.n	9f5c <SearchAvailableChannel1+0x98>
    9f5a:	e084      	b.n	a066 <SearchAvailableChannel1+0x1a2>
					&&
    9f5c:	2b3f      	cmp	r3, #63	; 0x3f
    9f5e:	dc02      	bgt.n	9f66 <SearchAvailableChannel1+0xa2>
					((((i+j) < MAX_CHANNELS_BANDWIDTH_125_AU_NA) && (RegParams.cmnParams.paramsType1.lastUsedSB == k))
    9f60:	9f07      	ldr	r7, [sp, #28]
    9f62:	4547      	cmp	r7, r8
    9f64:	d06c      	beq.n	a040 <SearchAvailableChannel1+0x17c>
					|| 
    9f66:	2e40      	cmp	r6, #64	; 0x40
    9f68:	dc00      	bgt.n	9f6c <SearchAvailableChannel1+0xa8>
    9f6a:	e07c      	b.n	a066 <SearchAvailableChannel1+0x1a2>
					(((i+j) > MAX_CHANNELS_BANDWIDTH_125_AU_NA) && 
    9f6c:	001e      	movs	r6, r3
    9f6e:	3e40      	subs	r6, #64	; 0x40
    9f70:	9f08      	ldr	r7, [sp, #32]
    9f72:	42b7      	cmp	r7, r6
    9f74:	d000      	beq.n	9f78 <SearchAvailableChannel1+0xb4>
    9f76:	e076      	b.n	a066 <SearchAvailableChannel1+0x1a2>
    9f78:	e08d      	b.n	a096 <SearchAvailableChannel1+0x1d2>
    9f7a:	9f01      	ldr	r7, [sp, #4]
    9f7c:	9b00      	ldr	r3, [sp, #0]
    9f7e:	469c      	mov	ip, r3
    9f80:	9b02      	ldr	r3, [sp, #8]
    9f82:	3310      	adds	r3, #16
    9f84:	9302      	str	r3, [sp, #8]
    9f86:	9b03      	ldr	r3, [sp, #12]
    9f88:	3310      	adds	r3, #16
    9f8a:	9303      	str	r3, [sp, #12]
    9f8c:	9904      	ldr	r1, [sp, #16]
	for (i = 0, k = 0; i < (MAX_CHANNELS_BANDWIDTH_125_AU_NA + MAX_CHANNELS_BANDWIDTH_500_AU_NA); i += 8, k++)
    9f8e:	2909      	cmp	r1, #9
    9f90:	d00e      	beq.n	9fb0 <SearchAvailableChannel1+0xec>
    9f92:	00cb      	lsls	r3, r1, #3
    9f94:	1c4a      	adds	r2, r1, #1
    9f96:	9204      	str	r2, [sp, #16]
    9f98:	001c      	movs	r4, r3
    9f9a:	3408      	adds	r4, #8
{
    9f9c:	9803      	ldr	r0, [sp, #12]
    9f9e:	9a02      	ldr	r2, [sp, #8]
								ChList[num][1] = k + 1;    
    9fa0:	1c4e      	adds	r6, r1, #1
					((((i+j) < MAX_CHANNELS_BANDWIDTH_125_AU_NA) && (RegParams.cmnParams.paramsType1.lastUsedSB == k))
    9fa2:	b2c9      	uxtb	r1, r1
    9fa4:	9701      	str	r7, [sp, #4]
    9fa6:	9605      	str	r6, [sp, #20]
    9fa8:	4688      	mov	r8, r1
    9faa:	4661      	mov	r1, ip
    9fac:	9100      	str	r1, [sp, #0]
    9fae:	e060      	b.n	a072 <SearchAvailableChannel1+0x1ae>
    9fb0:	1e3e      	subs	r6, r7, #0
    9fb2:	4667      	mov	r7, ip
	if(0 != num)
    9fb4:	d125      	bne.n	a002 <SearchAvailableChannel1+0x13e>
		if ((RegParams.pChParams[RegParams.lastUsedChannelIndex].status == ENABLED) &&
    9fb6:	4942      	ldr	r1, [pc, #264]	; (a0c0 <SearchAvailableChannel1+0x1fc>)
    9fb8:	232f      	movs	r3, #47	; 0x2f
    9fba:	5ccc      	ldrb	r4, [r1, r3]
    9fbc:	790b      	ldrb	r3, [r1, #4]
    9fbe:	794a      	ldrb	r2, [r1, #5]
    9fc0:	0212      	lsls	r2, r2, #8
    9fc2:	431a      	orrs	r2, r3
    9fc4:	798b      	ldrb	r3, [r1, #6]
    9fc6:	041b      	lsls	r3, r3, #16
    9fc8:	431a      	orrs	r2, r3
    9fca:	79cb      	ldrb	r3, [r1, #7]
    9fcc:	061b      	lsls	r3, r3, #24
    9fce:	4313      	orrs	r3, r2
    9fd0:	0062      	lsls	r2, r4, #1
    9fd2:	189b      	adds	r3, r3, r2
    9fd4:	781a      	ldrb	r2, [r3, #0]
			result = LORAWAN_NO_CHANNELS_FOUND;
    9fd6:	2010      	movs	r0, #16
		if ((RegParams.pChParams[RegParams.lastUsedChannelIndex].status == ENABLED) &&
    9fd8:	2a00      	cmp	r2, #0
    9fda:	d00b      	beq.n	9ff4 <SearchAvailableChannel1+0x130>
		(currDr >= RegParams.pChParams[RegParams.lastUsedChannelIndex].dataRange.min) &&
    9fdc:	785a      	ldrb	r2, [r3, #1]
    9fde:	0712      	lsls	r2, r2, #28
    9fe0:	0f12      	lsrs	r2, r2, #28
		if ((RegParams.pChParams[RegParams.lastUsedChannelIndex].status == ENABLED) &&
    9fe2:	4297      	cmp	r7, r2
    9fe4:	db06      	blt.n	9ff4 <SearchAvailableChannel1+0x130>
		(currDr <= RegParams.pChParams[RegParams.lastUsedChannelIndex].dataRange.max))
    9fe6:	785b      	ldrb	r3, [r3, #1]
    9fe8:	091b      	lsrs	r3, r3, #4
		(currDr >= RegParams.pChParams[RegParams.lastUsedChannelIndex].dataRange.min) &&
    9fea:	429f      	cmp	r7, r3
    9fec:	dc02      	bgt.n	9ff4 <SearchAvailableChannel1+0x130>
			*channelIndex = RegParams.lastUsedChannelIndex;
    9fee:	9b09      	ldr	r3, [sp, #36]	; 0x24
    9ff0:	701c      	strb	r4, [r3, #0]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    9ff2:	3808      	subs	r0, #8
}
    9ff4:	b02f      	add	sp, #188	; 0xbc
    9ff6:	bc3c      	pop	{r2, r3, r4, r5}
    9ff8:	4690      	mov	r8, r2
    9ffa:	4699      	mov	r9, r3
    9ffc:	46a2      	mov	sl, r4
    9ffe:	46ab      	mov	fp, r5
    a000:	bdf0      	pop	{r4, r5, r6, r7, pc}
		randomNumber = rand() % num;
    a002:	4b31      	ldr	r3, [pc, #196]	; (a0c8 <SearchAvailableChannel1+0x204>)
    a004:	4798      	blx	r3
    a006:	0031      	movs	r1, r6
    a008:	4b30      	ldr	r3, [pc, #192]	; (a0cc <SearchAvailableChannel1+0x208>)
    a00a:	4798      	blx	r3
    a00c:	23ff      	movs	r3, #255	; 0xff
    a00e:	400b      	ands	r3, r1
		*channelIndex = ChList[randomNumber][0];
    a010:	005b      	lsls	r3, r3, #1
    a012:	aa0a      	add	r2, sp, #40	; 0x28
    a014:	5c9a      	ldrb	r2, [r3, r2]
    a016:	9909      	ldr	r1, [sp, #36]	; 0x24
    a018:	700a      	strb	r2, [r1, #0]
		RegParams.cmnParams.paramsType1.lastUsedSB = ChList[randomNumber][1];
    a01a:	aa0a      	add	r2, sp, #40	; 0x28
    a01c:	4694      	mov	ip, r2
    a01e:	4463      	add	r3, ip
    a020:	785b      	ldrb	r3, [r3, #1]
		if(RegParams.cmnParams.paramsType1.lastUsedSB >= MAX_SUBBANDS)
    a022:	2b07      	cmp	r3, #7
    a024:	d805      	bhi.n	a032 <SearchAvailableChannel1+0x16e>
		RegParams.cmnParams.paramsType1.lastUsedSB = ChList[randomNumber][1];
    a026:	2258      	movs	r2, #88	; 0x58
    a028:	32ff      	adds	r2, #255	; 0xff
    a02a:	4925      	ldr	r1, [pc, #148]	; (a0c0 <SearchAvailableChannel1+0x1fc>)
    a02c:	548b      	strb	r3, [r1, r2]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    a02e:	2008      	movs	r0, #8
    a030:	e7e0      	b.n	9ff4 <SearchAvailableChannel1+0x130>
				RegParams.cmnParams.paramsType1.lastUsedSB = 0;
    a032:	2100      	movs	r1, #0
    a034:	2358      	movs	r3, #88	; 0x58
    a036:	33ff      	adds	r3, #255	; 0xff
    a038:	4a21      	ldr	r2, [pc, #132]	; (a0c0 <SearchAvailableChannel1+0x1fc>)
    a03a:	54d1      	strb	r1, [r2, r3]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    a03c:	2008      	movs	r0, #8
    a03e:	e7d9      	b.n	9ff4 <SearchAvailableChannel1+0x130>
						ChList[num][0] = i+j;
    a040:	9901      	ldr	r1, [sp, #4]
    a042:	9106      	str	r1, [sp, #24]
    a044:	0049      	lsls	r1, r1, #1
    a046:	468c      	mov	ip, r1
    a048:	a90a      	add	r1, sp, #40	; 0x28
    a04a:	4666      	mov	r6, ip
    a04c:	5473      	strb	r3, [r6, r1]
								ChList[num][1] = k + 1;    
    a04e:	9906      	ldr	r1, [sp, #24]
    a050:	004e      	lsls	r6, r1, #1
    a052:	a90a      	add	r1, sp, #40	; 0x28
    a054:	468c      	mov	ip, r1
    a056:	4466      	add	r6, ip
    a058:	4669      	mov	r1, sp
    a05a:	7d09      	ldrb	r1, [r1, #20]
    a05c:	7071      	strb	r1, [r6, #1]
						num++;
    a05e:	9f01      	ldr	r7, [sp, #4]
    a060:	3701      	adds	r7, #1
    a062:	b2f9      	uxtb	r1, r7
    a064:	9101      	str	r1, [sp, #4]
    a066:	3202      	adds	r2, #2
    a068:	3002      	adds	r0, #2
    a06a:	3301      	adds	r3, #1
			for (j = 0; j < NO_OF_CH_IN_SUBBAND; j++)
    a06c:	42a3      	cmp	r3, r4
    a06e:	d100      	bne.n	a072 <SearchAvailableChannel1+0x1ae>
    a070:	e783      	b.n	9f7a <SearchAvailableChannel1+0xb6>
				if (((transmissionType) && (currDr >= RegParams.pChParams[i + j].dataRange.min) && (currDr <= RegParams.pChParams[i + j].dataRange.max) 
    a072:	2d00      	cmp	r5, #0
    a074:	d100      	bne.n	a078 <SearchAvailableChannel1+0x1b4>
    a076:	e769      	b.n	9f4c <SearchAvailableChannel1+0x88>
    a078:	7856      	ldrb	r6, [r2, #1]
    a07a:	0736      	lsls	r6, r6, #28
    a07c:	0f36      	lsrs	r6, r6, #28
    a07e:	9f00      	ldr	r7, [sp, #0]
    a080:	42b7      	cmp	r7, r6
    a082:	dbf0      	blt.n	a066 <SearchAvailableChannel1+0x1a2>
    a084:	7856      	ldrb	r6, [r2, #1]
    a086:	0936      	lsrs	r6, r6, #4
    a088:	45b1      	cmp	r9, r6
    a08a:	dcec      	bgt.n	a066 <SearchAvailableChannel1+0x1a2>
					&& ((RegParams.pChParams[i + j].status == ENABLED) && ((i+j) != RegParams.lastUsedChannelIndex))) 
    a08c:	7816      	ldrb	r6, [r2, #0]
    a08e:	2e00      	cmp	r6, #0
    a090:	d0e9      	beq.n	a066 <SearchAvailableChannel1+0x1a2>
    a092:	459b      	cmp	fp, r3
    a094:	d0e7      	beq.n	a066 <SearchAvailableChannel1+0x1a2>
						ChList[num][0] = i+j;
    a096:	9901      	ldr	r1, [sp, #4]
    a098:	9106      	str	r1, [sp, #24]
    a09a:	b2de      	uxtb	r6, r3
    a09c:	46b4      	mov	ip, r6
    a09e:	004e      	lsls	r6, r1, #1
    a0a0:	af0a      	add	r7, sp, #40	; 0x28
    a0a2:	4661      	mov	r1, ip
    a0a4:	55f1      	strb	r1, [r6, r7]
						if((i+j) >= MAX_CHANNELS_BANDWIDTH_125_AU_NA)
    a0a6:	2b3f      	cmp	r3, #63	; 0x3f
    a0a8:	ddd1      	ble.n	a04e <SearchAvailableChannel1+0x18a>
								ChList[num][1] = ((i + j) - MAX_CHANNELS_BANDWIDTH_125_AU_NA + 1);
    a0aa:	46ba      	mov	sl, r7
    a0ac:	4456      	add	r6, sl
    a0ae:	213f      	movs	r1, #63	; 0x3f
    a0b0:	4249      	negs	r1, r1
    a0b2:	468a      	mov	sl, r1
    a0b4:	44d4      	add	ip, sl
    a0b6:	4661      	mov	r1, ip
    a0b8:	7071      	strb	r1, [r6, #1]
    a0ba:	e7d0      	b.n	a05e <SearchAvailableChannel1+0x19a>
    a0bc:	00019ead 	.word	0x00019ead
    a0c0:	200024d0 	.word	0x200024d0
    a0c4:	0000efa5 	.word	0x0000efa5
    a0c8:	0001a04d 	.word	0x0001a04d
    a0cc:	00016905 	.word	0x00016905

0000a0d0 <LORAREG_GetAttr_FreeChannel1>:
{
    a0d0:	b570      	push	{r4, r5, r6, lr}
	memcpy(&newFreeChannelReq,(NewFreeChannelReq_t *)attrInput,sizeof(NewFreeChannelReq_t));
    a0d2:	784c      	ldrb	r4, [r1, #1]
	if(newFreeChannelReq.maxChannels > RegParams.maxChannels)
    a0d4:	202a      	movs	r0, #42	; 0x2a
    a0d6:	4d07      	ldr	r5, [pc, #28]	; (a0f4 <LORAREG_GetAttr_FreeChannel1+0x24>)
    a0d8:	562d      	ldrsb	r5, [r5, r0]
		return LORAWAN_INVALID_PARAMETER;
    a0da:	3820      	subs	r0, #32
	if(newFreeChannelReq.maxChannels > RegParams.maxChannels)
    a0dc:	42ac      	cmp	r4, r5
    a0de:	dd00      	ble.n	a0e2 <LORAREG_GetAttr_FreeChannel1+0x12>
}
    a0e0:	bd70      	pop	{r4, r5, r6, pc}
		result = SearchAvailableChannel1(newFreeChannelReq.maxChannels,newFreeChannelReq.transmissionType,newFreeChannelReq.currDr,(uint8_t*)attrOutput);
    a0e2:	7888      	ldrb	r0, [r1, #2]
    a0e4:	7809      	ldrb	r1, [r1, #0]
    a0e6:	0013      	movs	r3, r2
    a0e8:	0002      	movs	r2, r0
    a0ea:	0020      	movs	r0, r4
    a0ec:	4c02      	ldr	r4, [pc, #8]	; (a0f8 <LORAREG_GetAttr_FreeChannel1+0x28>)
    a0ee:	47a0      	blx	r4
	return result;
    a0f0:	e7f6      	b.n	a0e0 <LORAREG_GetAttr_FreeChannel1+0x10>
    a0f2:	46c0      	nop			; (mov r8, r8)
    a0f4:	200024d0 	.word	0x200024d0
    a0f8:	00009ec5 	.word	0x00009ec5

0000a0fc <setEnableAllChs>:
{
    a0fc:	b570      	push	{r4, r5, r6, lr}
    a0fe:	2000      	movs	r0, #0
		RegParams.pChParams[i].status = ENABLED;	
    a100:	4915      	ldr	r1, [pc, #84]	; (a158 <setEnableAllChs+0x5c>)
    a102:	2401      	movs	r4, #1
    a104:	790b      	ldrb	r3, [r1, #4]
    a106:	794a      	ldrb	r2, [r1, #5]
    a108:	0212      	lsls	r2, r2, #8
    a10a:	431a      	orrs	r2, r3
    a10c:	798b      	ldrb	r3, [r1, #6]
    a10e:	041b      	lsls	r3, r3, #16
    a110:	431a      	orrs	r2, r3
    a112:	79cb      	ldrb	r3, [r1, #7]
    a114:	061b      	lsls	r3, r3, #24
    a116:	4313      	orrs	r3, r2
    a118:	541c      	strb	r4, [r3, r0]
    a11a:	3002      	adds	r0, #2
	for(uint8_t i = 0; i < (NO_OF_CH_IN_SUBBAND * (MAX_SUBBANDS + 1)); i++)
    a11c:	2890      	cmp	r0, #144	; 0x90
    a11e:	d1f1      	bne.n	a104 <setEnableAllChs+0x8>
	RegParams.cmnParams.paramsType1.lastUsedSB = 0;
    a120:	4c0d      	ldr	r4, [pc, #52]	; (a158 <setEnableAllChs+0x5c>)
    a122:	2200      	movs	r2, #0
    a124:	2358      	movs	r3, #88	; 0x58
    a126:	33ff      	adds	r3, #255	; 0xff
    a128:	54e2      	strb	r2, [r4, r3]
	PDS_STORE(RegParams.regParamItems.ch_param_1_item_id);
    a12a:	4b0c      	ldr	r3, [pc, #48]	; (a15c <setEnableAllChs+0x60>)
    a12c:	5ce3      	ldrb	r3, [r4, r3]
    a12e:	4a0c      	ldr	r2, [pc, #48]	; (a160 <setEnableAllChs+0x64>)
    a130:	5ca0      	ldrb	r0, [r4, r2]
    a132:	0200      	lsls	r0, r0, #8
    a134:	4318      	orrs	r0, r3
    a136:	b2c1      	uxtb	r1, r0
    a138:	0a00      	lsrs	r0, r0, #8
    a13a:	4d0a      	ldr	r5, [pc, #40]	; (a164 <setEnableAllChs+0x68>)
    a13c:	47a8      	blx	r5
	PDS_STORE(RegParams.regParamItems.lastUsedSB);
    a13e:	2383      	movs	r3, #131	; 0x83
    a140:	009b      	lsls	r3, r3, #2
    a142:	5ce3      	ldrb	r3, [r4, r3]
    a144:	4a08      	ldr	r2, [pc, #32]	; (a168 <setEnableAllChs+0x6c>)
    a146:	5ca0      	ldrb	r0, [r4, r2]
    a148:	0200      	lsls	r0, r0, #8
    a14a:	4318      	orrs	r0, r3
    a14c:	b2c1      	uxtb	r1, r0
    a14e:	0a00      	lsrs	r0, r0, #8
    a150:	47a8      	blx	r5
}
    a152:	2008      	movs	r0, #8
    a154:	bd70      	pop	{r4, r5, r6, pc}
    a156:	46c0      	nop			; (mov r8, r8)
    a158:	200024d0 	.word	0x200024d0
    a15c:	0000020e 	.word	0x0000020e
    a160:	0000020f 	.word	0x0000020f
    a164:	0000e0dd 	.word	0x0000e0dd
    a168:	0000020d 	.word	0x0000020d

0000a16c <setJoinSuccess>:
{
    a16c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if(RegParams.cmnParams.paramsType1.lastUsedSB == 0)
    a16e:	2358      	movs	r3, #88	; 0x58
    a170:	33ff      	adds	r3, #255	; 0xff
    a172:	4a1a      	ldr	r2, [pc, #104]	; (a1dc <setJoinSuccess+0x70>)
    a174:	5cd7      	ldrb	r7, [r2, r3]
    a176:	2f00      	cmp	r7, #0
    a178:	d100      	bne.n	a17c <setJoinSuccess+0x10>
		lastUsedSB = 8;
    a17a:	3708      	adds	r7, #8
		if(((i < MAX_CHANNELS_BANDWIDTH_125_AU_NA) && ((i < ((lastUsedSB - 1) * NO_OF_CH_IN_SUBBAND)) 
    a17c:	1e7c      	subs	r4, r7, #1
    a17e:	00e4      	lsls	r4, r4, #3
			|| (i >= (((lastUsedSB - 1) * NO_OF_CH_IN_SUBBAND) + 8) )))
    a180:	0026      	movs	r6, r4
    a182:	3608      	adds	r6, #8
    a184:	2300      	movs	r3, #0
			RegParams.pChParams[i].status = DISABLED;	
    a186:	4815      	ldr	r0, [pc, #84]	; (a1dc <setJoinSuccess+0x70>)
    a188:	2500      	movs	r5, #0
			|| ((i >= MAX_CHANNELS_BANDWIDTH_125_AU_NA) && (i != lastUsedSB + MAX_CHANNELS_BANDWIDTH_125_AU_NA - 1)))
    a18a:	373f      	adds	r7, #63	; 0x3f
    a18c:	e010      	b.n	a1b0 <setJoinSuccess+0x44>
    a18e:	429f      	cmp	r7, r3
    a190:	d00b      	beq.n	a1aa <setJoinSuccess+0x3e>
			RegParams.pChParams[i].status = DISABLED;	
    a192:	7902      	ldrb	r2, [r0, #4]
    a194:	7941      	ldrb	r1, [r0, #5]
    a196:	0209      	lsls	r1, r1, #8
    a198:	4311      	orrs	r1, r2
    a19a:	7982      	ldrb	r2, [r0, #6]
    a19c:	0412      	lsls	r2, r2, #16
    a19e:	4311      	orrs	r1, r2
    a1a0:	79c2      	ldrb	r2, [r0, #7]
    a1a2:	0612      	lsls	r2, r2, #24
    a1a4:	430a      	orrs	r2, r1
    a1a6:	0059      	lsls	r1, r3, #1
    a1a8:	548d      	strb	r5, [r1, r2]
    a1aa:	3301      	adds	r3, #1
	for(uint8_t i = 0; i < (NO_OF_CH_IN_SUBBAND * (MAX_SUBBANDS + 1)); i++)
    a1ac:	2b48      	cmp	r3, #72	; 0x48
    a1ae:	d007      	beq.n	a1c0 <setJoinSuccess+0x54>
		if(((i < MAX_CHANNELS_BANDWIDTH_125_AU_NA) && ((i < ((lastUsedSB - 1) * NO_OF_CH_IN_SUBBAND)) 
    a1b0:	b2da      	uxtb	r2, r3
    a1b2:	2a3f      	cmp	r2, #63	; 0x3f
    a1b4:	d8eb      	bhi.n	a18e <setJoinSuccess+0x22>
    a1b6:	429c      	cmp	r4, r3
    a1b8:	dceb      	bgt.n	a192 <setJoinSuccess+0x26>
			|| (i >= (((lastUsedSB - 1) * NO_OF_CH_IN_SUBBAND) + 8) )))
    a1ba:	429e      	cmp	r6, r3
    a1bc:	dde9      	ble.n	a192 <setJoinSuccess+0x26>
    a1be:	e7f4      	b.n	a1aa <setJoinSuccess+0x3e>
	PDS_STORE(RegParams.regParamItems.ch_param_1_item_id);
    a1c0:	4b06      	ldr	r3, [pc, #24]	; (a1dc <setJoinSuccess+0x70>)
    a1c2:	4a07      	ldr	r2, [pc, #28]	; (a1e0 <setJoinSuccess+0x74>)
    a1c4:	5c9a      	ldrb	r2, [r3, r2]
    a1c6:	4907      	ldr	r1, [pc, #28]	; (a1e4 <setJoinSuccess+0x78>)
    a1c8:	5c58      	ldrb	r0, [r3, r1]
    a1ca:	0200      	lsls	r0, r0, #8
    a1cc:	4310      	orrs	r0, r2
    a1ce:	b2c1      	uxtb	r1, r0
    a1d0:	0a00      	lsrs	r0, r0, #8
    a1d2:	4b05      	ldr	r3, [pc, #20]	; (a1e8 <setJoinSuccess+0x7c>)
    a1d4:	4798      	blx	r3
}
    a1d6:	2008      	movs	r0, #8
    a1d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    a1da:	46c0      	nop			; (mov r8, r8)
    a1dc:	200024d0 	.word	0x200024d0
    a1e0:	0000020e 	.word	0x0000020e
    a1e4:	0000020f 	.word	0x0000020f
    a1e8:	0000e0dd 	.word	0x0000e0dd

0000a1ec <UpdateChannelIdStatus>:
{
    a1ec:	b510      	push	{r4, lr}
	if(chid < RegParams.maxChannels || ((((1 << RegParams.band) & (ISM_NAAUBAND)) == 0) && chid >= RegParams.cmnParams.paramsType2.minNonDefChId))
    a1ee:	232a      	movs	r3, #42	; 0x2a
    a1f0:	4a13      	ldr	r2, [pc, #76]	; (a240 <UpdateChannelIdStatus+0x54>)
    a1f2:	56d3      	ldrsb	r3, [r2, r3]
    a1f4:	4298      	cmp	r0, r3
    a1f6:	db0b      	blt.n	a210 <UpdateChannelIdStatus+0x24>
    a1f8:	232e      	movs	r3, #46	; 0x2e
    a1fa:	5cd2      	ldrb	r2, [r2, r3]
    a1fc:	3b22      	subs	r3, #34	; 0x22
    a1fe:	4113      	asrs	r3, r2
    a200:	07db      	lsls	r3, r3, #31
    a202:	d41c      	bmi.n	a23e <UpdateChannelIdStatus+0x52>
    a204:	23e0      	movs	r3, #224	; 0xe0
    a206:	005b      	lsls	r3, r3, #1
    a208:	4a0d      	ldr	r2, [pc, #52]	; (a240 <UpdateChannelIdStatus+0x54>)
    a20a:	5cd3      	ldrb	r3, [r2, r3]
    a20c:	4283      	cmp	r3, r0
    a20e:	d816      	bhi.n	a23e <UpdateChannelIdStatus+0x52>
		RegParams.pChParams[chid].status = statusNew;
    a210:	4b0b      	ldr	r3, [pc, #44]	; (a240 <UpdateChannelIdStatus+0x54>)
    a212:	791a      	ldrb	r2, [r3, #4]
    a214:	795c      	ldrb	r4, [r3, #5]
    a216:	0224      	lsls	r4, r4, #8
    a218:	4314      	orrs	r4, r2
    a21a:	799a      	ldrb	r2, [r3, #6]
    a21c:	0412      	lsls	r2, r2, #16
    a21e:	4314      	orrs	r4, r2
    a220:	79da      	ldrb	r2, [r3, #7]
    a222:	0612      	lsls	r2, r2, #24
    a224:	4322      	orrs	r2, r4
    a226:	0040      	lsls	r0, r0, #1
    a228:	5481      	strb	r1, [r0, r2]
		PDS_STORE(RegParams.regParamItems.ch_param_1_item_id);
    a22a:	4a06      	ldr	r2, [pc, #24]	; (a244 <UpdateChannelIdStatus+0x58>)
    a22c:	5c9a      	ldrb	r2, [r3, r2]
    a22e:	4906      	ldr	r1, [pc, #24]	; (a248 <UpdateChannelIdStatus+0x5c>)
    a230:	5c58      	ldrb	r0, [r3, r1]
    a232:	0200      	lsls	r0, r0, #8
    a234:	4310      	orrs	r0, r2
    a236:	b2c1      	uxtb	r1, r0
    a238:	0a00      	lsrs	r0, r0, #8
    a23a:	4b04      	ldr	r3, [pc, #16]	; (a24c <UpdateChannelIdStatus+0x60>)
    a23c:	4798      	blx	r3
}
    a23e:	bd10      	pop	{r4, pc}
    a240:	200024d0 	.word	0x200024d0
    a244:	0000020e 	.word	0x0000020e
    a248:	0000020f 	.word	0x0000020f
    a24c:	0000e0dd 	.word	0x0000e0dd

0000a250 <EnableChannels2>:
{
    a250:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a252:	46ce      	mov	lr, r9
    a254:	4647      	mov	r7, r8
    a256:	b580      	push	{r7, lr}
    a258:	0004      	movs	r4, r0
    a25a:	000f      	movs	r7, r1
    a25c:	0015      	movs	r5, r2
	for(i = startIndx; i <= endIndx; i++)
    a25e:	4288      	cmp	r0, r1
    a260:	d812      	bhi.n	a288 <EnableChannels2+0x38>
		if((chMask & (0x0001)) == 0x0001)
    a262:	2601      	movs	r6, #1
			UpdateChannelIdStatus(i, ENABLED);
    a264:	4b0a      	ldr	r3, [pc, #40]	; (a290 <EnableChannels2+0x40>)
    a266:	4699      	mov	r9, r3
			UpdateChannelIdStatus(i, DISABLED);
    a268:	4698      	mov	r8, r3
    a26a:	e007      	b.n	a27c <EnableChannels2+0x2c>
    a26c:	2100      	movs	r1, #0
    a26e:	0020      	movs	r0, r4
    a270:	47c0      	blx	r8
		chMask = chMask >> SHIFT1;
    a272:	086d      	lsrs	r5, r5, #1
	for(i = startIndx; i <= endIndx; i++)
    a274:	3401      	adds	r4, #1
    a276:	b2e4      	uxtb	r4, r4
    a278:	42a7      	cmp	r7, r4
    a27a:	d305      	bcc.n	a288 <EnableChannels2+0x38>
		if((chMask & (0x0001)) == 0x0001)
    a27c:	422e      	tst	r6, r5
    a27e:	d0f5      	beq.n	a26c <EnableChannels2+0x1c>
			UpdateChannelIdStatus(i, ENABLED);
    a280:	0031      	movs	r1, r6
    a282:	0020      	movs	r0, r4
    a284:	47c8      	blx	r9
    a286:	e7f4      	b.n	a272 <EnableChannels2+0x22>
}
    a288:	bc0c      	pop	{r2, r3}
    a28a:	4690      	mov	r8, r2
    a28c:	4699      	mov	r9, r3
    a28e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    a290:	0000a1ed 	.word	0x0000a1ed

0000a294 <UpdateChannelIdStatusT2>:
{
    a294:	b570      	push	{r4, r5, r6, lr}
    a296:	000c      	movs	r4, r1
	if(chid < RegParams.maxChannels && chid >= RegParams.cmnParams.paramsType2.minNonDefChId &&
    a298:	232a      	movs	r3, #42	; 0x2a
    a29a:	4a3f      	ldr	r2, [pc, #252]	; (a398 <UpdateChannelIdStatusT2+0x104>)
    a29c:	56d3      	ldrsb	r3, [r2, r3]
    a29e:	4298      	cmp	r0, r3
    a2a0:	da17      	bge.n	a2d2 <UpdateChannelIdStatusT2+0x3e>
    a2a2:	23e0      	movs	r3, #224	; 0xe0
    a2a4:	005b      	lsls	r3, r3, #1
    a2a6:	5cd3      	ldrb	r3, [r2, r3]
    a2a8:	4283      	cmp	r3, r0
    a2aa:	d812      	bhi.n	a2d2 <UpdateChannelIdStatusT2+0x3e>
	   (RegParams.pOtherChParams[chid].parametersDefined & (FREQUENCY_DEFINED | DATA_RANGE_DEFINED)) == (FREQUENCY_DEFINED | DATA_RANGE_DEFINED))
    a2ac:	0045      	lsls	r5, r0, #1
    a2ae:	182d      	adds	r5, r5, r0
    a2b0:	00ad      	lsls	r5, r5, #2
    a2b2:	0011      	movs	r1, r2
    a2b4:	7a13      	ldrb	r3, [r2, #8]
    a2b6:	7a52      	ldrb	r2, [r2, #9]
    a2b8:	0212      	lsls	r2, r2, #8
    a2ba:	431a      	orrs	r2, r3
    a2bc:	7a8b      	ldrb	r3, [r1, #10]
    a2be:	041b      	lsls	r3, r3, #16
    a2c0:	431a      	orrs	r2, r3
    a2c2:	7acb      	ldrb	r3, [r1, #11]
    a2c4:	061b      	lsls	r3, r3, #24
    a2c6:	4313      	orrs	r3, r2
    a2c8:	195b      	adds	r3, r3, r5
	if(chid < RegParams.maxChannels && chid >= RegParams.cmnParams.paramsType2.minNonDefChId &&
    a2ca:	7adb      	ldrb	r3, [r3, #11]
    a2cc:	43db      	mvns	r3, r3
    a2ce:	079b      	lsls	r3, r3, #30
    a2d0:	d000      	beq.n	a2d4 <UpdateChannelIdStatusT2+0x40>
}
    a2d2:	bd70      	pop	{r4, r5, r6, pc}
		RegParams.pChParams[chid].status = statusNew;
    a2d4:	000e      	movs	r6, r1
    a2d6:	790b      	ldrb	r3, [r1, #4]
    a2d8:	794a      	ldrb	r2, [r1, #5]
    a2da:	0212      	lsls	r2, r2, #8
    a2dc:	431a      	orrs	r2, r3
    a2de:	798b      	ldrb	r3, [r1, #6]
    a2e0:	041b      	lsls	r3, r3, #16
    a2e2:	431a      	orrs	r2, r3
    a2e4:	79cb      	ldrb	r3, [r1, #7]
    a2e6:	061b      	lsls	r3, r3, #24
    a2e8:	4313      	orrs	r3, r2
    a2ea:	0040      	lsls	r0, r0, #1
    a2ec:	54c4      	strb	r4, [r0, r3]
		PDS_STORE(RegParams.regParamItems.ch_param_1_item_id);
    a2ee:	4b2b      	ldr	r3, [pc, #172]	; (a39c <UpdateChannelIdStatusT2+0x108>)
    a2f0:	5ccb      	ldrb	r3, [r1, r3]
    a2f2:	4a2b      	ldr	r2, [pc, #172]	; (a3a0 <UpdateChannelIdStatusT2+0x10c>)
    a2f4:	5c88      	ldrb	r0, [r1, r2]
    a2f6:	0200      	lsls	r0, r0, #8
    a2f8:	4318      	orrs	r0, r3
    a2fa:	b2c1      	uxtb	r1, r0
    a2fc:	0a00      	lsrs	r0, r0, #8
    a2fe:	4b29      	ldr	r3, [pc, #164]	; (a3a4 <UpdateChannelIdStatusT2+0x110>)
    a300:	4798      	blx	r3
		if(((1 << RegParams.band) & (ISM_EUBAND)) != 0 && statusNew == DISABLED)
    a302:	232e      	movs	r3, #46	; 0x2e
    a304:	5cf2      	ldrb	r2, [r6, r3]
    a306:	3b2b      	subs	r3, #43	; 0x2b
    a308:	4113      	asrs	r3, r2
    a30a:	07db      	lsls	r3, r3, #31
    a30c:	d5e1      	bpl.n	a2d2 <UpdateChannelIdStatusT2+0x3e>
    a30e:	2c00      	cmp	r4, #0
    a310:	d1df      	bne.n	a2d2 <UpdateChannelIdStatusT2+0x3e>
			subBandId = RegParams.pOtherChParams[chid].subBandId;
    a312:	4b21      	ldr	r3, [pc, #132]	; (a398 <UpdateChannelIdStatusT2+0x104>)
    a314:	7a18      	ldrb	r0, [r3, #8]
    a316:	7a5a      	ldrb	r2, [r3, #9]
    a318:	0212      	lsls	r2, r2, #8
    a31a:	4302      	orrs	r2, r0
    a31c:	7a98      	ldrb	r0, [r3, #10]
    a31e:	0400      	lsls	r0, r0, #16
    a320:	4302      	orrs	r2, r0
    a322:	7ad8      	ldrb	r0, [r3, #11]
    a324:	0600      	lsls	r0, r0, #24
    a326:	4310      	orrs	r0, r2
    a328:	1945      	adds	r5, r0, r5
    a32a:	7a2d      	ldrb	r5, [r5, #8]
			for(uint8_t i = 0; i < RegParams.maxChannels; i++)
    a32c:	222a      	movs	r2, #42	; 0x2a
    a32e:	569c      	ldrsb	r4, [r3, r2]
    a330:	2c00      	cmp	r4, #0
    a332:	dd1c      	ble.n	a36e <UpdateChannelIdStatusT2+0xda>
				if(RegParams.pChParams[i].status == ENABLED &&
    a334:	001a      	movs	r2, r3
    a336:	7919      	ldrb	r1, [r3, #4]
    a338:	795b      	ldrb	r3, [r3, #5]
    a33a:	021b      	lsls	r3, r3, #8
    a33c:	430b      	orrs	r3, r1
    a33e:	7991      	ldrb	r1, [r2, #6]
    a340:	0409      	lsls	r1, r1, #16
    a342:	430b      	orrs	r3, r1
    a344:	79d1      	ldrb	r1, [r2, #7]
    a346:	0609      	lsls	r1, r1, #24
    a348:	4319      	orrs	r1, r3
    a34a:	2300      	movs	r3, #0
    a34c:	e003      	b.n	a356 <UpdateChannelIdStatusT2+0xc2>
			for(uint8_t i = 0; i < RegParams.maxChannels; i++)
    a34e:	3301      	adds	r3, #1
    a350:	b2db      	uxtb	r3, r3
    a352:	42a3      	cmp	r3, r4
    a354:	da0b      	bge.n	a36e <UpdateChannelIdStatusT2+0xda>
				if(RegParams.pChParams[i].status == ENABLED &&
    a356:	005a      	lsls	r2, r3, #1
    a358:	5c52      	ldrb	r2, [r2, r1]
    a35a:	2a00      	cmp	r2, #0
    a35c:	d0f7      	beq.n	a34e <UpdateChannelIdStatusT2+0xba>
				 subBandId == RegParams.pOtherChParams[i].subBandId)
    a35e:	005a      	lsls	r2, r3, #1
    a360:	18d2      	adds	r2, r2, r3
    a362:	0092      	lsls	r2, r2, #2
    a364:	1882      	adds	r2, r0, r2
				if(RegParams.pChParams[i].status == ENABLED &&
    a366:	7a12      	ldrb	r2, [r2, #8]
    a368:	42aa      	cmp	r2, r5
    a36a:	d1f0      	bne.n	a34e <UpdateChannelIdStatusT2+0xba>
    a36c:	e7b1      	b.n	a2d2 <UpdateChannelIdStatusT2+0x3e>
			RegParams.pSubBandParams[subBandId].subBandTimeout = 0;
    a36e:	490a      	ldr	r1, [pc, #40]	; (a398 <UpdateChannelIdStatusT2+0x104>)
    a370:	7b0a      	ldrb	r2, [r1, #12]
    a372:	7b4b      	ldrb	r3, [r1, #13]
    a374:	021b      	lsls	r3, r3, #8
    a376:	4313      	orrs	r3, r2
    a378:	7b8a      	ldrb	r2, [r1, #14]
    a37a:	0412      	lsls	r2, r2, #16
    a37c:	4313      	orrs	r3, r2
    a37e:	7bca      	ldrb	r2, [r1, #15]
    a380:	0612      	lsls	r2, r2, #24
    a382:	431a      	orrs	r2, r3
    a384:	006b      	lsls	r3, r5, #1
    a386:	195d      	adds	r5, r3, r5
    a388:	00ad      	lsls	r5, r5, #2
    a38a:	18ad      	adds	r5, r5, r2
    a38c:	2300      	movs	r3, #0
    a38e:	722b      	strb	r3, [r5, #8]
    a390:	726b      	strb	r3, [r5, #9]
    a392:	72ab      	strb	r3, [r5, #10]
    a394:	72eb      	strb	r3, [r5, #11]
    a396:	e79c      	b.n	a2d2 <UpdateChannelIdStatusT2+0x3e>
    a398:	200024d0 	.word	0x200024d0
    a39c:	0000020e 	.word	0x0000020e
    a3a0:	0000020f 	.word	0x0000020f
    a3a4:	0000e0dd 	.word	0x0000e0dd

0000a3a8 <setChannelIdStatusT2>:
{
    a3a8:	b570      	push	{r4, r5, r6, lr}
    a3aa:	b082      	sub	sp, #8
	memcpy(&updateChid,attrInput,sizeof(UpdateChId_t));
    a3ac:	780d      	ldrb	r5, [r1, #0]
    a3ae:	784e      	ldrb	r6, [r1, #1]
	valChid.channelIndex = updateChid.channelIndex;
    a3b0:	a901      	add	r1, sp, #4
    a3b2:	700d      	strb	r5, [r1, #0]
	valChid.allowedForDefaultChannels = /*WITHOUT_DEFAULT_CHANNELS*/ALL_CHANNELS;
    a3b4:	2301      	movs	r3, #1
    a3b6:	704b      	strb	r3, [r1, #1]
	if(ValidateChannelIdT2(CHANNEL_ID, &valChid) == LORAWAN_SUCCESS)
    a3b8:	2015      	movs	r0, #21
    a3ba:	4b0c      	ldr	r3, [pc, #48]	; (a3ec <setChannelIdStatusT2+0x44>)
    a3bc:	4798      	blx	r3
    a3be:	0004      	movs	r4, r0
    a3c0:	2808      	cmp	r0, #8
    a3c2:	d003      	beq.n	a3cc <setChannelIdStatusT2+0x24>
		retVal = LORAWAN_INVALID_PARAMETER;
    a3c4:	240a      	movs	r4, #10
}
    a3c6:	0020      	movs	r0, r4
    a3c8:	b002      	add	sp, #8
    a3ca:	bd70      	pop	{r4, r5, r6, pc}
		if(RegParams.band ==  ISM_IND865)
    a3cc:	232e      	movs	r3, #46	; 0x2e
    a3ce:	4a08      	ldr	r2, [pc, #32]	; (a3f0 <setChannelIdStatusT2+0x48>)
    a3d0:	5cd3      	ldrb	r3, [r2, r3]
    a3d2:	2b0f      	cmp	r3, #15
    a3d4:	d004      	beq.n	a3e0 <setChannelIdStatusT2+0x38>
		    UpdateChannelIdStatusT2(updateChid.channelIndex,updateChid.statusNew);
    a3d6:	0031      	movs	r1, r6
    a3d8:	0028      	movs	r0, r5
    a3da:	4b06      	ldr	r3, [pc, #24]	; (a3f4 <setChannelIdStatusT2+0x4c>)
    a3dc:	4798      	blx	r3
    a3de:	e7f2      	b.n	a3c6 <setChannelIdStatusT2+0x1e>
			UpdateChannelIdStatus(updateChid.channelIndex,updateChid.statusNew);
    a3e0:	0031      	movs	r1, r6
    a3e2:	0028      	movs	r0, r5
    a3e4:	4b04      	ldr	r3, [pc, #16]	; (a3f8 <setChannelIdStatusT2+0x50>)
    a3e6:	4798      	blx	r3
    a3e8:	e7ed      	b.n	a3c6 <setChannelIdStatusT2+0x1e>
    a3ea:	46c0      	nop			; (mov r8, r8)
    a3ec:	00009a39 	.word	0x00009a39
    a3f0:	200024d0 	.word	0x200024d0
    a3f4:	0000a295 	.word	0x0000a295
    a3f8:	0000a1ed 	.word	0x0000a1ed

0000a3fc <UpdateChannelIdStatusT4>:
{
    a3fc:	b570      	push	{r4, r5, r6, lr}
    a3fe:	0004      	movs	r4, r0
    a400:	000d      	movs	r5, r1
	RegParams.pChParams[chid].status = statusNew;
    a402:	4923      	ldr	r1, [pc, #140]	; (a490 <UpdateChannelIdStatusT4+0x94>)
    a404:	790b      	ldrb	r3, [r1, #4]
    a406:	794a      	ldrb	r2, [r1, #5]
    a408:	0212      	lsls	r2, r2, #8
    a40a:	431a      	orrs	r2, r3
    a40c:	798b      	ldrb	r3, [r1, #6]
    a40e:	041b      	lsls	r3, r3, #16
    a410:	431a      	orrs	r2, r3
    a412:	79cb      	ldrb	r3, [r1, #7]
    a414:	061b      	lsls	r3, r3, #24
    a416:	4313      	orrs	r3, r2
    a418:	0042      	lsls	r2, r0, #1
    a41a:	54d5      	strb	r5, [r2, r3]
	PDS_STORE(RegParams.regParamItems.ch_param_1_item_id);
    a41c:	4b1d      	ldr	r3, [pc, #116]	; (a494 <UpdateChannelIdStatusT4+0x98>)
    a41e:	5ccb      	ldrb	r3, [r1, r3]
    a420:	4a1d      	ldr	r2, [pc, #116]	; (a498 <UpdateChannelIdStatusT4+0x9c>)
    a422:	5c88      	ldrb	r0, [r1, r2]
    a424:	0200      	lsls	r0, r0, #8
    a426:	4318      	orrs	r0, r3
    a428:	b2c1      	uxtb	r1, r0
    a42a:	0a00      	lsrs	r0, r0, #8
    a42c:	4b1b      	ldr	r3, [pc, #108]	; (a49c <UpdateChannelIdStatusT4+0xa0>)
    a42e:	4798      	blx	r3
	if(statusNew == ENABLED)
    a430:	2d00      	cmp	r5, #0
    a432:	d029      	beq.n	a488 <UpdateChannelIdStatusT4+0x8c>
		if(RegParams.pOtherChParams[chid].ulfrequency < FREQ_922100KHZ)
    a434:	4a16      	ldr	r2, [pc, #88]	; (a490 <UpdateChannelIdStatusT4+0x94>)
    a436:	7a10      	ldrb	r0, [r2, #8]
    a438:	7a53      	ldrb	r3, [r2, #9]
    a43a:	021b      	lsls	r3, r3, #8
    a43c:	4303      	orrs	r3, r0
    a43e:	7a90      	ldrb	r0, [r2, #10]
    a440:	0400      	lsls	r0, r0, #16
    a442:	4303      	orrs	r3, r0
    a444:	7ad0      	ldrb	r0, [r2, #11]
    a446:	0600      	lsls	r0, r0, #24
    a448:	4318      	orrs	r0, r3
    a44a:	0063      	lsls	r3, r4, #1
    a44c:	191c      	adds	r4, r3, r4
    a44e:	00a4      	lsls	r4, r4, #2
    a450:	1900      	adds	r0, r0, r4
    a452:	7803      	ldrb	r3, [r0, #0]
    a454:	7842      	ldrb	r2, [r0, #1]
    a456:	0212      	lsls	r2, r2, #8
    a458:	431a      	orrs	r2, r3
    a45a:	7883      	ldrb	r3, [r0, #2]
    a45c:	041b      	lsls	r3, r3, #16
    a45e:	431a      	orrs	r2, r3
    a460:	78c3      	ldrb	r3, [r0, #3]
    a462:	061b      	lsls	r3, r3, #24
    a464:	4313      	orrs	r3, r2
    a466:	4a0e      	ldr	r2, [pc, #56]	; (a4a0 <UpdateChannelIdStatusT4+0xa4>)
    a468:	4293      	cmp	r3, r2
    a46a:	d80e      	bhi.n	a48a <UpdateChannelIdStatusT4+0x8e>
			RegParams.pOtherChParams[chid].maxEIRP = DEFAULT_EIRP_KR_LF;
    a46c:	230a      	movs	r3, #10
    a46e:	7283      	strb	r3, [r0, #10]
		PDS_STORE(RegParams.regParamItems.ch_param_2_item_id);
    a470:	4b07      	ldr	r3, [pc, #28]	; (a490 <UpdateChannelIdStatusT4+0x94>)
    a472:	2284      	movs	r2, #132	; 0x84
    a474:	0092      	lsls	r2, r2, #2
    a476:	5c9a      	ldrb	r2, [r3, r2]
    a478:	490a      	ldr	r1, [pc, #40]	; (a4a4 <UpdateChannelIdStatusT4+0xa8>)
    a47a:	5c58      	ldrb	r0, [r3, r1]
    a47c:	0200      	lsls	r0, r0, #8
    a47e:	4310      	orrs	r0, r2
    a480:	b2c1      	uxtb	r1, r0
    a482:	0a00      	lsrs	r0, r0, #8
    a484:	4b05      	ldr	r3, [pc, #20]	; (a49c <UpdateChannelIdStatusT4+0xa0>)
    a486:	4798      	blx	r3
}
    a488:	bd70      	pop	{r4, r5, r6, pc}
			RegParams.pOtherChParams[chid].maxEIRP = DEFAULT_EIRP_KR_HF;
    a48a:	230e      	movs	r3, #14
    a48c:	7283      	strb	r3, [r0, #10]
    a48e:	e7ef      	b.n	a470 <UpdateChannelIdStatusT4+0x74>
    a490:	200024d0 	.word	0x200024d0
    a494:	0000020e 	.word	0x0000020e
    a498:	0000020f 	.word	0x0000020f
    a49c:	0000e0dd 	.word	0x0000e0dd
    a4a0:	36f6211f 	.word	0x36f6211f
    a4a4:	00000211 	.word	0x00000211

0000a4a8 <UpdateChannelIdStatusT3>:
{
    a4a8:	b570      	push	{r4, r5, r6, lr}
    a4aa:	0005      	movs	r5, r0
	RegParams.pChParams[chid].status = statusNew;
    a4ac:	4c17      	ldr	r4, [pc, #92]	; (a50c <UpdateChannelIdStatusT3+0x64>)
    a4ae:	7923      	ldrb	r3, [r4, #4]
    a4b0:	7962      	ldrb	r2, [r4, #5]
    a4b2:	0212      	lsls	r2, r2, #8
    a4b4:	431a      	orrs	r2, r3
    a4b6:	79a3      	ldrb	r3, [r4, #6]
    a4b8:	041b      	lsls	r3, r3, #16
    a4ba:	431a      	orrs	r2, r3
    a4bc:	79e3      	ldrb	r3, [r4, #7]
    a4be:	061b      	lsls	r3, r3, #24
    a4c0:	4313      	orrs	r3, r2
    a4c2:	0042      	lsls	r2, r0, #1
    a4c4:	54d1      	strb	r1, [r2, r3]
	PDS_STORE(RegParams.regParamItems.ch_param_1_item_id);
    a4c6:	4b12      	ldr	r3, [pc, #72]	; (a510 <UpdateChannelIdStatusT3+0x68>)
    a4c8:	5ce3      	ldrb	r3, [r4, r3]
    a4ca:	4a12      	ldr	r2, [pc, #72]	; (a514 <UpdateChannelIdStatusT3+0x6c>)
    a4cc:	5ca0      	ldrb	r0, [r4, r2]
    a4ce:	0200      	lsls	r0, r0, #8
    a4d0:	4318      	orrs	r0, r3
    a4d2:	b2c1      	uxtb	r1, r0
    a4d4:	0a00      	lsrs	r0, r0, #8
    a4d6:	4e10      	ldr	r6, [pc, #64]	; (a518 <UpdateChannelIdStatusT3+0x70>)
    a4d8:	47b0      	blx	r6
	PDS_STORE(RegParams.regParamItems.ch_param_2_item_id);
    a4da:	2384      	movs	r3, #132	; 0x84
    a4dc:	009b      	lsls	r3, r3, #2
    a4de:	5ce3      	ldrb	r3, [r4, r3]
    a4e0:	4a0e      	ldr	r2, [pc, #56]	; (a51c <UpdateChannelIdStatusT3+0x74>)
    a4e2:	5ca0      	ldrb	r0, [r4, r2]
    a4e4:	0200      	lsls	r0, r0, #8
    a4e6:	4318      	orrs	r0, r3
    a4e8:	b2c1      	uxtb	r1, r0
    a4ea:	0a00      	lsrs	r0, r0, #8
    a4ec:	47b0      	blx	r6
	if( RegParams.band == ISM_JPN923)
    a4ee:	232e      	movs	r3, #46	; 0x2e
    a4f0:	5ce3      	ldrb	r3, [r4, r3]
    a4f2:	2b05      	cmp	r3, #5
    a4f4:	d000      	beq.n	a4f8 <UpdateChannelIdStatusT3+0x50>
}
    a4f6:	bd70      	pop	{r4, r5, r6, pc}
		RegParams.cmnParams.paramsType2.channelTimer[chid] = 0;
    a4f8:	3558      	adds	r5, #88	; 0x58
    a4fa:	00ad      	lsls	r5, r5, #2
    a4fc:	4b03      	ldr	r3, [pc, #12]	; (a50c <UpdateChannelIdStatusT3+0x64>)
    a4fe:	195d      	adds	r5, r3, r5
    a500:	2300      	movs	r3, #0
    a502:	722b      	strb	r3, [r5, #8]
    a504:	726b      	strb	r3, [r5, #9]
    a506:	72ab      	strb	r3, [r5, #10]
    a508:	72eb      	strb	r3, [r5, #11]
}
    a50a:	e7f4      	b.n	a4f6 <UpdateChannelIdStatusT3+0x4e>
    a50c:	200024d0 	.word	0x200024d0
    a510:	0000020e 	.word	0x0000020e
    a514:	0000020f 	.word	0x0000020f
    a518:	0000e0dd 	.word	0x0000e0dd
    a51c:	00000211 	.word	0x00000211

0000a520 <setChannelIdStatusT3>:
{
    a520:	b570      	push	{r4, r5, r6, lr}
    a522:	b082      	sub	sp, #8
	memcpy(&updateChid,attrInput,sizeof(UpdateChId_t));
    a524:	780d      	ldrb	r5, [r1, #0]
    a526:	784e      	ldrb	r6, [r1, #1]
	valChid.channelIndex = updateChid.channelIndex;
    a528:	a901      	add	r1, sp, #4
    a52a:	700d      	strb	r5, [r1, #0]
	valChid.allowedForDefaultChannels = ALL_CHANNELS;
    a52c:	2301      	movs	r3, #1
    a52e:	704b      	strb	r3, [r1, #1]
	if(ValidateChannelIdT2(CHANNEL_ID, &valChid) == LORAWAN_SUCCESS)
    a530:	2015      	movs	r0, #21
    a532:	4b0c      	ldr	r3, [pc, #48]	; (a564 <setChannelIdStatusT3+0x44>)
    a534:	4798      	blx	r3
    a536:	0004      	movs	r4, r0
    a538:	2808      	cmp	r0, #8
    a53a:	d003      	beq.n	a544 <setChannelIdStatusT3+0x24>
		retVal = LORAWAN_INVALID_PARAMETER;
    a53c:	240a      	movs	r4, #10
}
    a53e:	0020      	movs	r0, r4
    a540:	b002      	add	sp, #8
    a542:	bd70      	pop	{r4, r5, r6, pc}
		if( RegParams.band == ISM_KR920)
    a544:	232e      	movs	r3, #46	; 0x2e
    a546:	4a08      	ldr	r2, [pc, #32]	; (a568 <setChannelIdStatusT3+0x48>)
    a548:	5cd3      	ldrb	r3, [r2, r3]
    a54a:	2b04      	cmp	r3, #4
    a54c:	d004      	beq.n	a558 <setChannelIdStatusT3+0x38>
		    UpdateChannelIdStatusT3(updateChid.channelIndex,updateChid.statusNew);
    a54e:	0031      	movs	r1, r6
    a550:	0028      	movs	r0, r5
    a552:	4b06      	ldr	r3, [pc, #24]	; (a56c <setChannelIdStatusT3+0x4c>)
    a554:	4798      	blx	r3
    a556:	e7f2      	b.n	a53e <setChannelIdStatusT3+0x1e>
			UpdateChannelIdStatusT4(updateChid.channelIndex,updateChid.statusNew);
    a558:	0031      	movs	r1, r6
    a55a:	0028      	movs	r0, r5
    a55c:	4b04      	ldr	r3, [pc, #16]	; (a570 <setChannelIdStatusT3+0x50>)
    a55e:	4798      	blx	r3
    a560:	e7ed      	b.n	a53e <setChannelIdStatusT3+0x1e>
    a562:	46c0      	nop			; (mov r8, r8)
    a564:	00009a39 	.word	0x00009a39
    a568:	200024d0 	.word	0x200024d0
    a56c:	0000a4a9 	.word	0x0000a4a9
    a570:	0000a3fd 	.word	0x0000a3fd

0000a574 <LORAREG_GetAttr_JoinDutyCycleRemainingTime>:
{
    a574:	b530      	push	{r4, r5, lr}
    a576:	b083      	sub	sp, #12
    a578:	0014      	movs	r4, r2
	uint32_t timeremaining =0;
    a57a:	2300      	movs	r3, #0
    a57c:	9301      	str	r3, [sp, #4]
	if(SwTimerIsRunning(RegParams.pJoinDutyCycleTimer->timerId))
    a57e:	4920      	ldr	r1, [pc, #128]	; (a600 <LORAREG_GetAttr_JoinDutyCycleRemainingTime+0x8c>)
    a580:	7d0b      	ldrb	r3, [r1, #20]
    a582:	7d4a      	ldrb	r2, [r1, #21]
    a584:	0212      	lsls	r2, r2, #8
    a586:	431a      	orrs	r2, r3
    a588:	7d8b      	ldrb	r3, [r1, #22]
    a58a:	041b      	lsls	r3, r3, #16
    a58c:	431a      	orrs	r2, r3
    a58e:	7dcb      	ldrb	r3, [r1, #23]
    a590:	061b      	lsls	r3, r3, #24
    a592:	4313      	orrs	r3, r2
    a594:	7a18      	ldrb	r0, [r3, #8]
    a596:	4b1b      	ldr	r3, [pc, #108]	; (a604 <LORAREG_GetAttr_JoinDutyCycleRemainingTime+0x90>)
    a598:	4798      	blx	r3
    a59a:	2800      	cmp	r0, #0
    a59c:	d107      	bne.n	a5ae <LORAREG_GetAttr_JoinDutyCycleRemainingTime+0x3a>
	memcpy(attrOutput,&timeremaining,sizeof(uint32_t));
    a59e:	2204      	movs	r2, #4
    a5a0:	a901      	add	r1, sp, #4
    a5a2:	0020      	movs	r0, r4
    a5a4:	4b18      	ldr	r3, [pc, #96]	; (a608 <LORAREG_GetAttr_JoinDutyCycleRemainingTime+0x94>)
    a5a6:	4798      	blx	r3
}
    a5a8:	2008      	movs	r0, #8
    a5aa:	b003      	add	sp, #12
    a5ac:	bd30      	pop	{r4, r5, pc}
		timeremaining = US_TO_MS(SwTimerReadValue (RegParams.pJoinDutyCycleTimer->timerId));
    a5ae:	4d14      	ldr	r5, [pc, #80]	; (a600 <LORAREG_GetAttr_JoinDutyCycleRemainingTime+0x8c>)
    a5b0:	7d2b      	ldrb	r3, [r5, #20]
    a5b2:	7d6a      	ldrb	r2, [r5, #21]
    a5b4:	0212      	lsls	r2, r2, #8
    a5b6:	431a      	orrs	r2, r3
    a5b8:	7dab      	ldrb	r3, [r5, #22]
    a5ba:	041b      	lsls	r3, r3, #16
    a5bc:	431a      	orrs	r2, r3
    a5be:	7deb      	ldrb	r3, [r5, #23]
    a5c0:	061b      	lsls	r3, r3, #24
    a5c2:	4313      	orrs	r3, r2
    a5c4:	7a18      	ldrb	r0, [r3, #8]
    a5c6:	4b11      	ldr	r3, [pc, #68]	; (a60c <LORAREG_GetAttr_JoinDutyCycleRemainingTime+0x98>)
    a5c8:	4798      	blx	r3
		timeremaining = timeremaining + RegParams.pJoinDutyCycleTimer->remainingtime;
    a5ca:	7d2b      	ldrb	r3, [r5, #20]
    a5cc:	7d6a      	ldrb	r2, [r5, #21]
    a5ce:	0212      	lsls	r2, r2, #8
    a5d0:	431a      	orrs	r2, r3
    a5d2:	7dab      	ldrb	r3, [r5, #22]
    a5d4:	041b      	lsls	r3, r3, #16
    a5d6:	431a      	orrs	r2, r3
    a5d8:	7deb      	ldrb	r3, [r5, #23]
    a5da:	061b      	lsls	r3, r3, #24
    a5dc:	4313      	orrs	r3, r2
    a5de:	791d      	ldrb	r5, [r3, #4]
    a5e0:	795a      	ldrb	r2, [r3, #5]
    a5e2:	0212      	lsls	r2, r2, #8
    a5e4:	432a      	orrs	r2, r5
    a5e6:	799d      	ldrb	r5, [r3, #6]
    a5e8:	042d      	lsls	r5, r5, #16
    a5ea:	432a      	orrs	r2, r5
    a5ec:	79dd      	ldrb	r5, [r3, #7]
    a5ee:	062d      	lsls	r5, r5, #24
    a5f0:	4315      	orrs	r5, r2
		timeremaining = US_TO_MS(SwTimerReadValue (RegParams.pJoinDutyCycleTimer->timerId));
    a5f2:	21fa      	movs	r1, #250	; 0xfa
    a5f4:	0089      	lsls	r1, r1, #2
    a5f6:	4b06      	ldr	r3, [pc, #24]	; (a610 <LORAREG_GetAttr_JoinDutyCycleRemainingTime+0x9c>)
    a5f8:	4798      	blx	r3
		timeremaining = timeremaining + RegParams.pJoinDutyCycleTimer->remainingtime;
    a5fa:	182d      	adds	r5, r5, r0
    a5fc:	9501      	str	r5, [sp, #4]
    a5fe:	e7ce      	b.n	a59e <LORAREG_GetAttr_JoinDutyCycleRemainingTime+0x2a>
    a600:	200024d0 	.word	0x200024d0
    a604:	0000efa5 	.word	0x0000efa5
    a608:	00019d89 	.word	0x00019d89
    a60c:	0000efb9 	.word	0x0000efb9
    a610:	00016625 	.word	0x00016625

0000a614 <LORAREG_GetAttr_Rx1WindowparamsType1>:
{
    a614:	b510      	push	{r4, lr}
    a616:	b082      	sub	sp, #8
    a618:	0010      	movs	r0, r2
	memcpy(&rx1WindowParamsReq,(Rx1WindowParamsReq_t *)attrInput,sizeof(Rx1WindowParamsReq_t));
    a61a:	784c      	ldrb	r4, [r1, #1]
    a61c:	788b      	ldrb	r3, [r1, #2]
	if(rx1WindowParamReq->joining)
    a61e:	780a      	ldrb	r2, [r1, #0]
    a620:	2a00      	cmp	r2, #0
    a622:	d007      	beq.n	a634 <LORAREG_GetAttr_Rx1WindowparamsType1+0x20>
		if (RegParams.lastUsedChannelIndex <= MAX_CHANNELS_BANDWIDTH_125_AU_NA) 
    a624:	232f      	movs	r3, #47	; 0x2f
    a626:	4a23      	ldr	r2, [pc, #140]	; (a6b4 <LORAREG_GetAttr_Rx1WindowparamsType1+0xa0>)
    a628:	5cd3      	ldrb	r3, [r2, r3]
    a62a:	2b40      	cmp	r3, #64	; 0x40
    a62c:	d819      	bhi.n	a662 <LORAREG_GetAttr_Rx1WindowparamsType1+0x4e>
			rx1WindowParamReq->currDr = RegParams.cmnParams.paramsType1.minTxDR;
    a62e:	2350      	movs	r3, #80	; 0x50
    a630:	33ff      	adds	r3, #255	; 0xff
    a632:	5cd3      	ldrb	r3, [r2, r3]
		            RegParams.cmnParams.paramsType1.RxParamWindowOffset1 - rx1WindowParamReq->drOffset;
    a634:	491f      	ldr	r1, [pc, #124]	; (a6b4 <LORAREG_GetAttr_Rx1WindowparamsType1+0xa0>)
    a636:	2256      	movs	r2, #86	; 0x56
    a638:	32ff      	adds	r2, #255	; 0xff
    a63a:	5c8a      	ldrb	r2, [r1, r2]
    a63c:	1b12      	subs	r2, r2, r4
    a63e:	189b      	adds	r3, r3, r2
    a640:	b2db      	uxtb	r3, r3
	rx1WindowParams->rx1Dr = rx1WindowParamReq->currDr + 
    a642:	466a      	mov	r2, sp
    a644:	7113      	strb	r3, [r2, #4]
	if(rx1WindowParams->rx1Dr > RegParams.cmnParams.paramsType1.maxRxDR)
    a646:	22a9      	movs	r2, #169	; 0xa9
    a648:	0052      	lsls	r2, r2, #1
    a64a:	5c8a      	ldrb	r2, [r1, r2]
    a64c:	4293      	cmp	r3, r2
    a64e:	d80d      	bhi.n	a66c <LORAREG_GetAttr_Rx1WindowparamsType1+0x58>
	else if(rx1WindowParams->rx1Dr < RegParams.cmnParams.paramsType1.minRxDR)
    a650:	2252      	movs	r2, #82	; 0x52
    a652:	32ff      	adds	r2, #255	; 0xff
    a654:	4917      	ldr	r1, [pc, #92]	; (a6b4 <LORAREG_GetAttr_Rx1WindowparamsType1+0xa0>)
    a656:	5c8a      	ldrb	r2, [r1, r2]
    a658:	4293      	cmp	r3, r2
    a65a:	d209      	bcs.n	a670 <LORAREG_GetAttr_Rx1WindowparamsType1+0x5c>
		rx1WindowParams->rx1Dr = RegParams.cmnParams.paramsType1.minRxDR;
    a65c:	466b      	mov	r3, sp
    a65e:	711a      	strb	r2, [r3, #4]
    a660:	e006      	b.n	a670 <LORAREG_GetAttr_Rx1WindowparamsType1+0x5c>
			rx1WindowParamReq->currDr = RegParams.cmnParams.paramsType1.maxTxDR;
    a662:	23a8      	movs	r3, #168	; 0xa8
    a664:	005b      	lsls	r3, r3, #1
    a666:	4a13      	ldr	r2, [pc, #76]	; (a6b4 <LORAREG_GetAttr_Rx1WindowparamsType1+0xa0>)
    a668:	5cd3      	ldrb	r3, [r2, r3]
    a66a:	e7e3      	b.n	a634 <LORAREG_GetAttr_Rx1WindowparamsType1+0x20>
		rx1WindowParams->rx1Dr = RegParams.cmnParams.paramsType1.maxRxDR;
    a66c:	466b      	mov	r3, sp
    a66e:	711a      	strb	r2, [r3, #4]
	rx1WindowParams->rx1Freq = GenerateFrequencyReception(RegParams.lastUsedChannelIndex % 8);
    a670:	4910      	ldr	r1, [pc, #64]	; (a6b4 <LORAREG_GetAttr_Rx1WindowparamsType1+0xa0>)
    a672:	232f      	movs	r3, #47	; 0x2f
    a674:	5ccc      	ldrb	r4, [r1, r3]
	channelFrequency = RegParams.cmnParams.paramsType1.DownStreamCh0Freq + FREQ_600KHZ * channelIndex;
    a676:	3b28      	subs	r3, #40	; 0x28
    a678:	4023      	ands	r3, r4
    a67a:	4c0f      	ldr	r4, [pc, #60]	; (a6b8 <LORAREG_GetAttr_Rx1WindowparamsType1+0xa4>)
    a67c:	435c      	muls	r4, r3
    a67e:	234c      	movs	r3, #76	; 0x4c
    a680:	33ff      	adds	r3, #255	; 0xff
    a682:	5ccb      	ldrb	r3, [r1, r3]
    a684:	22a6      	movs	r2, #166	; 0xa6
    a686:	0052      	lsls	r2, r2, #1
    a688:	5c8a      	ldrb	r2, [r1, r2]
    a68a:	0212      	lsls	r2, r2, #8
    a68c:	4313      	orrs	r3, r2
    a68e:	224e      	movs	r2, #78	; 0x4e
    a690:	32ff      	adds	r2, #255	; 0xff
    a692:	5c8a      	ldrb	r2, [r1, r2]
    a694:	0412      	lsls	r2, r2, #16
    a696:	431a      	orrs	r2, r3
    a698:	23a7      	movs	r3, #167	; 0xa7
    a69a:	005b      	lsls	r3, r3, #1
    a69c:	5ccb      	ldrb	r3, [r1, r3]
    a69e:	061b      	lsls	r3, r3, #24
    a6a0:	4313      	orrs	r3, r2
    a6a2:	18e3      	adds	r3, r4, r3
	rx1WindowParams->rx1Freq = GenerateFrequencyReception(RegParams.lastUsedChannelIndex % 8);
    a6a4:	9300      	str	r3, [sp, #0]
	memcpy(attrOutput,&rx1WindowParamsResp,sizeof(Rx1WindowParams_t));
    a6a6:	2208      	movs	r2, #8
    a6a8:	4669      	mov	r1, sp
    a6aa:	4b04      	ldr	r3, [pc, #16]	; (a6bc <LORAREG_GetAttr_Rx1WindowparamsType1+0xa8>)
    a6ac:	4798      	blx	r3
}
    a6ae:	2008      	movs	r0, #8
    a6b0:	b002      	add	sp, #8
    a6b2:	bd10      	pop	{r4, pc}
    a6b4:	200024d0 	.word	0x200024d0
    a6b8:	000927c0 	.word	0x000927c0
    a6bc:	00019d89 	.word	0x00019d89

0000a6c0 <LORAREG_GetAttr_DRangeChBandT1>:
{
    a6c0:	b5f0      	push	{r4, r5, r6, r7, lr}
    a6c2:	46c6      	mov	lr, r8
    a6c4:	b500      	push	{lr}
    a6c6:	b084      	sub	sp, #16
    a6c8:	9201      	str	r2, [sp, #4]
	memcpy(&bandDrReq,(BandDrReq_t *)attrInput,sizeof(BandDrReq_t));
    a6ca:	2204      	movs	r2, #4
    a6cc:	a803      	add	r0, sp, #12
    a6ce:	4b43      	ldr	r3, [pc, #268]	; (a7dc <LORAREG_GetAttr_DRangeChBandT1+0x11c>)
    a6d0:	4798      	blx	r3
	if(ValidateChannelMaskCntl(CHANNEL_MASK_CNTL, (void *)&bandDrReq.chnlMaskCntl)	!= LORAWAN_SUCCESS)
    a6d2:	a903      	add	r1, sp, #12
    a6d4:	201b      	movs	r0, #27
    a6d6:	4b42      	ldr	r3, [pc, #264]	; (a7e0 <LORAREG_GetAttr_DRangeChBandT1+0x120>)
    a6d8:	4798      	blx	r3
    a6da:	2808      	cmp	r0, #8
    a6dc:	d004      	beq.n	a6e8 <LORAREG_GetAttr_DRangeChBandT1+0x28>
		result = LORAWAN_INVALID_PARAMETER;
    a6de:	200a      	movs	r0, #10
}
    a6e0:	b004      	add	sp, #16
    a6e2:	bc04      	pop	{r2}
    a6e4:	4690      	mov	r8, r2
    a6e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		chBandDr = getChBandDrT1(bandDrReq.chnlMaskCntl,bandDrReq.chnlMask);
    a6e8:	aa03      	add	r2, sp, #12
    a6ea:	7813      	ldrb	r3, [r2, #0]
    a6ec:	8857      	ldrh	r7, [r2, #2]
	if( RegParams.band == ISM_AU915)
    a6ee:	222e      	movs	r2, #46	; 0x2e
    a6f0:	493c      	ldr	r1, [pc, #240]	; (a7e4 <LORAREG_GetAttr_DRangeChBandT1+0x124>)
    a6f2:	5c89      	ldrb	r1, [r1, r2]
		auxMinDataRate = DR6;
    a6f4:	3903      	subs	r1, #3
    a6f6:	1e4a      	subs	r2, r1, #1
    a6f8:	4191      	sbcs	r1, r2
    a6fa:	3106      	adds	r1, #6
	switch (chMaskCntl)
    a6fc:	2b07      	cmp	r3, #7
    a6fe:	d869      	bhi.n	a7d4 <LORAREG_GetAttr_DRangeChBandT1+0x114>
    a700:	009a      	lsls	r2, r3, #2
    a702:	4d39      	ldr	r5, [pc, #228]	; (a7e8 <LORAREG_GetAttr_DRangeChBandT1+0x128>)
    a704:	58aa      	ldr	r2, [r5, r2]
    a706:	4697      	mov	pc, r2
			startingIndex = chMaskCntl << SHIFT4;
    a708:	011b      	lsls	r3, r3, #4
    a70a:	b2db      	uxtb	r3, r3
			endingIndex = startingIndex + 16;
    a70c:	001a      	movs	r2, r3
    a70e:	3210      	adds	r2, #16
    a710:	b2d2      	uxtb	r2, r2
    a712:	4690      	mov	r8, r2
			for (i = startingIndex; i < endingIndex; i++)
    a714:	4293      	cmp	r3, r2
    a716:	d25f      	bcs.n	a7d8 <LORAREG_GetAttr_DRangeChBandT1+0x118>
				if ((RegParams.pChParams[i].dataRange.min < auxMinDataRate) && (((auxChannelMask & 0x0001) == 0x0001) || (auxChannelMask == 0)))
    a718:	4e32      	ldr	r6, [pc, #200]	; (a7e4 <LORAREG_GetAttr_DRangeChBandT1+0x124>)
    a71a:	7935      	ldrb	r5, [r6, #4]
    a71c:	7972      	ldrb	r2, [r6, #5]
    a71e:	0212      	lsls	r2, r2, #8
    a720:	4315      	orrs	r5, r2
    a722:	79b2      	ldrb	r2, [r6, #6]
    a724:	0412      	lsls	r2, r2, #16
    a726:	432a      	orrs	r2, r5
    a728:	79f5      	ldrb	r5, [r6, #7]
    a72a:	062d      	lsls	r5, r5, #24
    a72c:	4315      	orrs	r5, r2
    a72e:	46ac      	mov	ip, r5
    a730:	2500      	movs	r5, #0
				if ((RegParams.pChParams[i].dataRange.max > auxMaxDataRate) && (((auxChannelMask & 0x0001) == 0x0001) || (auxChannelMask == 0)))
    a732:	2401      	movs	r4, #1
    a734:	e00c      	b.n	a750 <LORAREG_GetAttr_DRangeChBandT1+0x90>
					auxMinDataRate = RegParams.pChParams[i].dataRange.min;
    a736:	0011      	movs	r1, r2
				if ((RegParams.pChParams[i].dataRange.max > auxMaxDataRate) && (((auxChannelMask & 0x0001) == 0x0001) || (auxChannelMask == 0)))
    a738:	7872      	ldrb	r2, [r6, #1]
    a73a:	0912      	lsrs	r2, r2, #4
    a73c:	42aa      	cmp	r2, r5
    a73e:	dd02      	ble.n	a746 <LORAREG_GetAttr_DRangeChBandT1+0x86>
    a740:	423c      	tst	r4, r7
    a742:	d011      	beq.n	a768 <LORAREG_GetAttr_DRangeChBandT1+0xa8>
					auxMaxDataRate = RegParams.pChParams[i].dataRange.max;
    a744:	0015      	movs	r5, r2
				auxChannelMask = auxChannelMask >> SHIFT1;
    a746:	087f      	lsrs	r7, r7, #1
			for (i = startingIndex; i < endingIndex; i++)
    a748:	3301      	adds	r3, #1
    a74a:	b2db      	uxtb	r3, r3
    a74c:	4598      	cmp	r8, r3
    a74e:	d013      	beq.n	a778 <LORAREG_GetAttr_DRangeChBandT1+0xb8>
				if ((RegParams.pChParams[i].dataRange.min < auxMinDataRate) && (((auxChannelMask & 0x0001) == 0x0001) || (auxChannelMask == 0)))
    a750:	005e      	lsls	r6, r3, #1
    a752:	4466      	add	r6, ip
    a754:	7872      	ldrb	r2, [r6, #1]
    a756:	0712      	lsls	r2, r2, #28
    a758:	0f12      	lsrs	r2, r2, #28
    a75a:	428a      	cmp	r2, r1
    a75c:	daec      	bge.n	a738 <LORAREG_GetAttr_DRangeChBandT1+0x78>
    a75e:	423c      	tst	r4, r7
    a760:	d1e9      	bne.n	a736 <LORAREG_GetAttr_DRangeChBandT1+0x76>
    a762:	2f00      	cmp	r7, #0
    a764:	d1ef      	bne.n	a746 <LORAREG_GetAttr_DRangeChBandT1+0x86>
    a766:	e7e6      	b.n	a736 <LORAREG_GetAttr_DRangeChBandT1+0x76>
				if ((RegParams.pChParams[i].dataRange.max > auxMaxDataRate) && (((auxChannelMask & 0x0001) == 0x0001) || (auxChannelMask == 0)))
    a768:	2f00      	cmp	r7, #0
    a76a:	d0eb      	beq.n	a744 <LORAREG_GetAttr_DRangeChBandT1+0x84>
    a76c:	e7eb      	b.n	a746 <LORAREG_GetAttr_DRangeChBandT1+0x86>
			auxMinDataRate = RegParams.cmnParams.paramsType1.maxTxDR;
    a76e:	23a8      	movs	r3, #168	; 0xa8
    a770:	005b      	lsls	r3, r3, #1
    a772:	4a1c      	ldr	r2, [pc, #112]	; (a7e4 <LORAREG_GetAttr_DRangeChBandT1+0x124>)
    a774:	5cd1      	ldrb	r1, [r2, r3]
			auxMaxDataRate = RegParams.cmnParams.paramsType1.maxTxDR;
    a776:	000d      	movs	r5, r1
    a778:	012d      	lsls	r5, r5, #4
    a77a:	230f      	movs	r3, #15
    a77c:	4019      	ands	r1, r3
    a77e:	430d      	orrs	r5, r1
		memcpy(attrOutput,&chBandDr,sizeof(DataRange_t));
    a780:	9b01      	ldr	r3, [sp, #4]
    a782:	701d      	strb	r5, [r3, #0]
    a784:	e7ac      	b.n	a6e0 <LORAREG_GetAttr_DRangeChBandT1+0x20>
				if (RegParams.pChParams[i].dataRange.min < auxMinDataRate)
    a786:	4d17      	ldr	r5, [pc, #92]	; (a7e4 <LORAREG_GetAttr_DRangeChBandT1+0x124>)
    a788:	792b      	ldrb	r3, [r5, #4]
    a78a:	796a      	ldrb	r2, [r5, #5]
    a78c:	0212      	lsls	r2, r2, #8
    a78e:	431a      	orrs	r2, r3
    a790:	79ab      	ldrb	r3, [r5, #6]
    a792:	041b      	lsls	r3, r3, #16
    a794:	431a      	orrs	r2, r3
    a796:	79eb      	ldrb	r3, [r5, #7]
    a798:	061b      	lsls	r3, r3, #24
    a79a:	4313      	orrs	r3, r2
    a79c:	001a      	movs	r2, r3
    a79e:	3380      	adds	r3, #128	; 0x80
    a7a0:	001c      	movs	r4, r3
    a7a2:	2500      	movs	r5, #0
    a7a4:	e002      	b.n	a7ac <LORAREG_GetAttr_DRangeChBandT1+0xec>
    a7a6:	3202      	adds	r2, #2
			for (i = 0; i < 64; i++)
    a7a8:	42a2      	cmp	r2, r4
    a7aa:	d00c      	beq.n	a7c6 <LORAREG_GetAttr_DRangeChBandT1+0x106>
				if (RegParams.pChParams[i].dataRange.min < auxMinDataRate)
    a7ac:	0016      	movs	r6, r2
    a7ae:	7853      	ldrb	r3, [r2, #1]
    a7b0:	071b      	lsls	r3, r3, #28
    a7b2:	0f1b      	lsrs	r3, r3, #28
    a7b4:	428b      	cmp	r3, r1
    a7b6:	da00      	bge.n	a7ba <LORAREG_GetAttr_DRangeChBandT1+0xfa>
					auxMinDataRate = RegParams.pChParams[i].dataRange.min;
    a7b8:	0019      	movs	r1, r3
				if (RegParams.pChParams[i].dataRange.max > auxMaxDataRate)
    a7ba:	7873      	ldrb	r3, [r6, #1]
    a7bc:	091b      	lsrs	r3, r3, #4
    a7be:	42ab      	cmp	r3, r5
    a7c0:	ddf1      	ble.n	a7a6 <LORAREG_GetAttr_DRangeChBandT1+0xe6>
					auxMaxDataRate = RegParams.pChParams[i].dataRange.max;
    a7c2:	001d      	movs	r5, r3
    a7c4:	e7ef      	b.n	a7a6 <LORAREG_GetAttr_DRangeChBandT1+0xe6>
			if (channelMask != 0)    // if there is at least one channel enabled with DR4
    a7c6:	2f00      	cmp	r7, #0
    a7c8:	d0d6      	beq.n	a778 <LORAREG_GetAttr_DRangeChBandT1+0xb8>
				auxMaxDataRate = RegParams.cmnParams.paramsType1.maxTxDR;
    a7ca:	23a8      	movs	r3, #168	; 0xa8
    a7cc:	005b      	lsls	r3, r3, #1
    a7ce:	4a05      	ldr	r2, [pc, #20]	; (a7e4 <LORAREG_GetAttr_DRangeChBandT1+0x124>)
    a7d0:	5cd5      	ldrb	r5, [r2, r3]
    a7d2:	e7d1      	b.n	a778 <LORAREG_GetAttr_DRangeChBandT1+0xb8>
	uint8_t auxMinDataRate = DR7, auxMaxDataRate = DR0, i;
    a7d4:	2500      	movs	r5, #0
    a7d6:	e7cf      	b.n	a778 <LORAREG_GetAttr_DRangeChBandT1+0xb8>
    a7d8:	2500      	movs	r5, #0
    a7da:	e7cd      	b.n	a778 <LORAREG_GetAttr_DRangeChBandT1+0xb8>
    a7dc:	00019d89 	.word	0x00019d89
    a7e0:	00009b41 	.word	0x00009b41
    a7e4:	200024d0 	.word	0x200024d0
    a7e8:	00020194 	.word	0x00020194

0000a7ec <LORAREG_GetAttr_DefRx2Freq>:
{
    a7ec:	b510      	push	{r4, lr}
    a7ee:	0010      	movs	r0, r2
	memcpy(attrOutput,&RegParams.DefRx2Freq,sizeof(uint32_t));
    a7f0:	2204      	movs	r2, #4
    a7f2:	4902      	ldr	r1, [pc, #8]	; (a7fc <LORAREG_GetAttr_DefRx2Freq+0x10>)
    a7f4:	4b02      	ldr	r3, [pc, #8]	; (a800 <LORAREG_GetAttr_DefRx2Freq+0x14>)
    a7f6:	4798      	blx	r3
}
    a7f8:	2008      	movs	r0, #8
    a7fa:	bd10      	pop	{r4, pc}
    a7fc:	200024ec 	.word	0x200024ec
    a800:	00019d89 	.word	0x00019d89

0000a804 <LORAREG_GetAttr_DlFrequency>:
{
    a804:	b510      	push	{r4, lr}
    a806:	0013      	movs	r3, r2
	channelId = *(uint8_t *)attrInput;
    a808:	780a      	ldrb	r2, [r1, #0]
	if (channelId > RegParams.maxChannels)
    a80a:	212a      	movs	r1, #42	; 0x2a
    a80c:	480d      	ldr	r0, [pc, #52]	; (a844 <LORAREG_GetAttr_DlFrequency+0x40>)
    a80e:	5641      	ldrsb	r1, [r0, r1]
		result = LORAWAN_INVALID_PARAMETER;
    a810:	200a      	movs	r0, #10
	if (channelId > RegParams.maxChannels)
    a812:	428a      	cmp	r2, r1
    a814:	dd00      	ble.n	a818 <LORAREG_GetAttr_DlFrequency+0x14>
}
    a816:	bd10      	pop	{r4, pc}
		memcpy(attrOutput,&(RegParams.pOtherChParams[channelId].rx1Frequency),sizeof(uint32_t));
    a818:	4c0a      	ldr	r4, [pc, #40]	; (a844 <LORAREG_GetAttr_DlFrequency+0x40>)
    a81a:	7a21      	ldrb	r1, [r4, #8]
    a81c:	7a60      	ldrb	r0, [r4, #9]
    a81e:	0200      	lsls	r0, r0, #8
    a820:	4308      	orrs	r0, r1
    a822:	7aa1      	ldrb	r1, [r4, #10]
    a824:	0409      	lsls	r1, r1, #16
    a826:	4308      	orrs	r0, r1
    a828:	7ae1      	ldrb	r1, [r4, #11]
    a82a:	0609      	lsls	r1, r1, #24
    a82c:	4301      	orrs	r1, r0
    a82e:	0050      	lsls	r0, r2, #1
    a830:	1882      	adds	r2, r0, r2
    a832:	0092      	lsls	r2, r2, #2
    a834:	1889      	adds	r1, r1, r2
    a836:	3104      	adds	r1, #4
    a838:	2204      	movs	r2, #4
    a83a:	0018      	movs	r0, r3
    a83c:	4b02      	ldr	r3, [pc, #8]	; (a848 <LORAREG_GetAttr_DlFrequency+0x44>)
    a83e:	4798      	blx	r3
	StackRetStatus_t result = LORAWAN_SUCCESS;
    a840:	2008      	movs	r0, #8
    a842:	e7e8      	b.n	a816 <LORAREG_GetAttr_DlFrequency+0x12>
    a844:	200024d0 	.word	0x200024d0
    a848:	00019d89 	.word	0x00019d89

0000a84c <LORAREG_GetAttr_DutyCycleTimer>:
{
    a84c:	b5f0      	push	{r4, r5, r6, r7, lr}
    a84e:	46d6      	mov	lr, sl
    a850:	464f      	mov	r7, r9
    a852:	4646      	mov	r6, r8
    a854:	b5c0      	push	{r6, r7, lr}
    a856:	b084      	sub	sp, #16
    a858:	9200      	str	r2, [sp, #0]
    currentDataRate = *(uint8_t *)attrInput;
    a85a:	780b      	ldrb	r3, [r1, #0]
    a85c:	469c      	mov	ip, r3
    for (uint8_t i = 0; i < RegParams.maxChannels; i++)
    a85e:	232a      	movs	r3, #42	; 0x2a
    a860:	4a5b      	ldr	r2, [pc, #364]	; (a9d0 <LORAREG_GetAttr_DutyCycleTimer+0x184>)
    a862:	56d6      	ldrsb	r6, [r2, r3]
    a864:	2e00      	cmp	r6, #0
    a866:	dd66      	ble.n	a936 <LORAREG_GetAttr_DutyCycleTimer+0xea>
	    if ( (RegParams.pChParams[i].status == ENABLED) )
    a868:	0013      	movs	r3, r2
    a86a:	7910      	ldrb	r0, [r2, #4]
    a86c:	7952      	ldrb	r2, [r2, #5]
    a86e:	0212      	lsls	r2, r2, #8
    a870:	4302      	orrs	r2, r0
    a872:	7998      	ldrb	r0, [r3, #6]
    a874:	0400      	lsls	r0, r0, #16
    a876:	4302      	orrs	r2, r0
    a878:	79d8      	ldrb	r0, [r3, #7]
    a87a:	0600      	lsls	r0, r0, #24
    a87c:	4310      	orrs	r0, r2
		    if((RegParams.pSubBandParams[bandId].subBandTimeout != 0) && 
    a87e:	7b1f      	ldrb	r7, [r3, #12]
    a880:	7b5a      	ldrb	r2, [r3, #13]
    a882:	0212      	lsls	r2, r2, #8
    a884:	433a      	orrs	r2, r7
    a886:	7b9f      	ldrb	r7, [r3, #14]
    a888:	043f      	lsls	r7, r7, #16
    a88a:	433a      	orrs	r2, r7
    a88c:	7bdf      	ldrb	r7, [r3, #15]
    a88e:	063f      	lsls	r7, r7, #24
    a890:	4317      	orrs	r7, r2
    a892:	2500      	movs	r5, #0
    a894:	2300      	movs	r3, #0
    a896:	2201      	movs	r2, #1
    a898:	4252      	negs	r2, r2
    a89a:	4691      	mov	r9, r2
		    bandId = RegParams.cmnParams.paramsType2.othChParams[i].subBandId;
    a89c:	4a4c      	ldr	r2, [pc, #304]	; (a9d0 <LORAREG_GetAttr_DutyCycleTimer+0x184>)
    a89e:	4690      	mov	r8, r2
			   (currentDataRate >= RegParams.pChParams[i].dataRange.min) && 
    a8a0:	4662      	mov	r2, ip
    a8a2:	9201      	str	r2, [sp, #4]
    a8a4:	e004      	b.n	a8b0 <LORAREG_GetAttr_DutyCycleTimer+0x64>
    for (uint8_t i = 0; i < RegParams.maxChannels; i++)
    a8a6:	3301      	adds	r3, #1
    a8a8:	b2db      	uxtb	r3, r3
    a8aa:	001d      	movs	r5, r3
    a8ac:	42b3      	cmp	r3, r6
    a8ae:	da27      	bge.n	a900 <LORAREG_GetAttr_DutyCycleTimer+0xb4>
	    if ( (RegParams.pChParams[i].status == ENABLED) )
    a8b0:	0059      	lsls	r1, r3, #1
    a8b2:	1841      	adds	r1, r0, r1
    a8b4:	780a      	ldrb	r2, [r1, #0]
    a8b6:	2a00      	cmp	r2, #0
    a8b8:	d0f5      	beq.n	a8a6 <LORAREG_GetAttr_DutyCycleTimer+0x5a>
		    bandId = RegParams.cmnParams.paramsType2.othChParams[i].subBandId;
    a8ba:	006a      	lsls	r2, r5, #1
    a8bc:	1952      	adds	r2, r2, r5
    a8be:	0092      	lsls	r2, r2, #2
    a8c0:	4442      	add	r2, r8
    a8c2:	32ab      	adds	r2, #171	; 0xab
		    if((RegParams.pSubBandParams[bandId].subBandTimeout != 0) && 
    a8c4:	7815      	ldrb	r5, [r2, #0]
    a8c6:	006a      	lsls	r2, r5, #1
    a8c8:	1952      	adds	r2, r2, r5
    a8ca:	0092      	lsls	r2, r2, #2
    a8cc:	18ba      	adds	r2, r7, r2
    a8ce:	7a15      	ldrb	r5, [r2, #8]
    a8d0:	7a54      	ldrb	r4, [r2, #9]
    a8d2:	0224      	lsls	r4, r4, #8
    a8d4:	4325      	orrs	r5, r4
    a8d6:	7a94      	ldrb	r4, [r2, #10]
    a8d8:	0424      	lsls	r4, r4, #16
    a8da:	4325      	orrs	r5, r4
    a8dc:	7ad2      	ldrb	r2, [r2, #11]
    a8de:	0612      	lsls	r2, r2, #24
    a8e0:	432a      	orrs	r2, r5
    a8e2:	d0e0      	beq.n	a8a6 <LORAREG_GetAttr_DutyCycleTimer+0x5a>
    a8e4:	454a      	cmp	r2, r9
    a8e6:	d8de      	bhi.n	a8a6 <LORAREG_GetAttr_DutyCycleTimer+0x5a>
			   (currentDataRate >= RegParams.pChParams[i].dataRange.min) && 
    a8e8:	784d      	ldrb	r5, [r1, #1]
    a8ea:	072d      	lsls	r5, r5, #28
    a8ec:	0f2d      	lsrs	r5, r5, #28
			   (RegParams.pSubBandParams[bandId].subBandTimeout <= minimSubBandTimer) && 
    a8ee:	45ac      	cmp	ip, r5
    a8f0:	dbd9      	blt.n	a8a6 <LORAREG_GetAttr_DutyCycleTimer+0x5a>
			   (currentDataRate <= RegParams.pChParams[i].dataRange.max) )
    a8f2:	7849      	ldrb	r1, [r1, #1]
    a8f4:	0909      	lsrs	r1, r1, #4
			   (currentDataRate >= RegParams.pChParams[i].dataRange.min) && 
    a8f6:	9c01      	ldr	r4, [sp, #4]
    a8f8:	428c      	cmp	r4, r1
    a8fa:	dcd4      	bgt.n	a8a6 <LORAREG_GetAttr_DutyCycleTimer+0x5a>
			    minimSubBandTimer = RegParams.pSubBandParams[bandId].subBandTimeout;
    a8fc:	4691      	mov	r9, r2
    a8fe:	e7d2      	b.n	a8a6 <LORAREG_GetAttr_DutyCycleTimer+0x5a>
    if((UINT32_MAX != minimSubBandTimer) && (minimSubBandTimer >= RegParams.cmnParams.paramsType2.aggregatedDutyCycleTimeout))
    a900:	464b      	mov	r3, r9
    a902:	3301      	adds	r3, #1
    a904:	d017      	beq.n	a936 <LORAREG_GetAttr_DutyCycleTimer+0xea>
    a906:	4932      	ldr	r1, [pc, #200]	; (a9d0 <LORAREG_GetAttr_DutyCycleTimer+0x184>)
    a908:	23ba      	movs	r3, #186	; 0xba
    a90a:	33ff      	adds	r3, #255	; 0xff
    a90c:	5ccb      	ldrb	r3, [r1, r3]
    a90e:	22dd      	movs	r2, #221	; 0xdd
    a910:	0052      	lsls	r2, r2, #1
    a912:	5c8a      	ldrb	r2, [r1, r2]
    a914:	0212      	lsls	r2, r2, #8
    a916:	431a      	orrs	r2, r3
    a918:	23bc      	movs	r3, #188	; 0xbc
    a91a:	33ff      	adds	r3, #255	; 0xff
    a91c:	5ccb      	ldrb	r3, [r1, r3]
    a91e:	041b      	lsls	r3, r3, #16
    a920:	431a      	orrs	r2, r3
    a922:	23de      	movs	r3, #222	; 0xde
    a924:	005b      	lsls	r3, r3, #1
    a926:	5ccb      	ldrb	r3, [r1, r3]
    a928:	061b      	lsls	r3, r3, #24
    a92a:	4313      	orrs	r3, r2
    a92c:	4599      	cmp	r9, r3
    a92e:	d302      	bcc.n	a936 <LORAREG_GetAttr_DutyCycleTimer+0xea>
	    minDutyCycleTimer = minimSubBandTimer;
    a930:	464b      	mov	r3, r9
    a932:	9303      	str	r3, [sp, #12]
    a934:	e013      	b.n	a95e <LORAREG_GetAttr_DutyCycleTimer+0x112>
	    minDutyCycleTimer = RegParams.cmnParams.paramsType2.aggregatedDutyCycleTimeout;
    a936:	4926      	ldr	r1, [pc, #152]	; (a9d0 <LORAREG_GetAttr_DutyCycleTimer+0x184>)
    a938:	23ba      	movs	r3, #186	; 0xba
    a93a:	33ff      	adds	r3, #255	; 0xff
    a93c:	5ccb      	ldrb	r3, [r1, r3]
    a93e:	22dd      	movs	r2, #221	; 0xdd
    a940:	0052      	lsls	r2, r2, #1
    a942:	5c8a      	ldrb	r2, [r1, r2]
    a944:	0212      	lsls	r2, r2, #8
    a946:	431a      	orrs	r2, r3
    a948:	23bc      	movs	r3, #188	; 0xbc
    a94a:	33ff      	adds	r3, #255	; 0xff
    a94c:	5ccb      	ldrb	r3, [r1, r3]
    a94e:	041b      	lsls	r3, r3, #16
    a950:	431a      	orrs	r2, r3
    a952:	23de      	movs	r3, #222	; 0xde
    a954:	005b      	lsls	r3, r3, #1
    a956:	5ccb      	ldrb	r3, [r1, r3]
    a958:	061b      	lsls	r3, r3, #24
    a95a:	4313      	orrs	r3, r2
    a95c:	9303      	str	r3, [sp, #12]
    ticks = SwTimerReadValue (RegParams.pDutyCycleTimer->timerId);
    a95e:	491c      	ldr	r1, [pc, #112]	; (a9d0 <LORAREG_GetAttr_DutyCycleTimer+0x184>)
    a960:	7c0b      	ldrb	r3, [r1, #16]
    a962:	7c4a      	ldrb	r2, [r1, #17]
    a964:	0212      	lsls	r2, r2, #8
    a966:	431a      	orrs	r2, r3
    a968:	7c8b      	ldrb	r3, [r1, #18]
    a96a:	041b      	lsls	r3, r3, #16
    a96c:	431a      	orrs	r2, r3
    a96e:	7ccb      	ldrb	r3, [r1, #19]
    a970:	061b      	lsls	r3, r3, #24
    a972:	4313      	orrs	r3, r2
    a974:	7918      	ldrb	r0, [r3, #4]
    a976:	4b17      	ldr	r3, [pc, #92]	; (a9d4 <LORAREG_GetAttr_DutyCycleTimer+0x188>)
    a978:	4798      	blx	r3
	if( minDutyCycleTimer != 0)
    a97a:	9e03      	ldr	r6, [sp, #12]
    a97c:	2e00      	cmp	r6, #0
    a97e:	d01b      	beq.n	a9b8 <LORAREG_GetAttr_DutyCycleTimer+0x16c>
    delta = RegParams.pDutyCycleTimer->lastTimerValue - US_TO_MS(ticks);
    a980:	4913      	ldr	r1, [pc, #76]	; (a9d0 <LORAREG_GetAttr_DutyCycleTimer+0x184>)
    a982:	7c0b      	ldrb	r3, [r1, #16]
    a984:	7c4a      	ldrb	r2, [r1, #17]
    a986:	0212      	lsls	r2, r2, #8
    a988:	431a      	orrs	r2, r3
    a98a:	7c8b      	ldrb	r3, [r1, #18]
    a98c:	041b      	lsls	r3, r3, #16
    a98e:	431a      	orrs	r2, r3
    a990:	7ccb      	ldrb	r3, [r1, #19]
    a992:	061b      	lsls	r3, r3, #24
    a994:	4313      	orrs	r3, r2
    a996:	781d      	ldrb	r5, [r3, #0]
    a998:	785a      	ldrb	r2, [r3, #1]
    a99a:	0212      	lsls	r2, r2, #8
    a99c:	432a      	orrs	r2, r5
    a99e:	789d      	ldrb	r5, [r3, #2]
    a9a0:	042d      	lsls	r5, r5, #16
    a9a2:	432a      	orrs	r2, r5
    a9a4:	78dd      	ldrb	r5, [r3, #3]
    a9a6:	062d      	lsls	r5, r5, #24
    a9a8:	4315      	orrs	r5, r2
    a9aa:	21fa      	movs	r1, #250	; 0xfa
    a9ac:	0089      	lsls	r1, r1, #2
    a9ae:	4b0a      	ldr	r3, [pc, #40]	; (a9d8 <LORAREG_GetAttr_DutyCycleTimer+0x18c>)
    a9b0:	4798      	blx	r3
    a9b2:	1a2d      	subs	r5, r5, r0
		minDutyCycleTimer = minDutyCycleTimer - delta; //Logically delta will not be greater than minDcTimer
    a9b4:	1b75      	subs	r5, r6, r5
    a9b6:	9503      	str	r5, [sp, #12]
    memcpy(attrOutput,&minDutyCycleTimer,sizeof(uint32_t));
    a9b8:	2204      	movs	r2, #4
    a9ba:	a903      	add	r1, sp, #12
    a9bc:	9800      	ldr	r0, [sp, #0]
    a9be:	4b07      	ldr	r3, [pc, #28]	; (a9dc <LORAREG_GetAttr_DutyCycleTimer+0x190>)
    a9c0:	4798      	blx	r3
}
    a9c2:	2008      	movs	r0, #8
    a9c4:	b004      	add	sp, #16
    a9c6:	bc1c      	pop	{r2, r3, r4}
    a9c8:	4690      	mov	r8, r2
    a9ca:	4699      	mov	r9, r3
    a9cc:	46a2      	mov	sl, r4
    a9ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
    a9d0:	200024d0 	.word	0x200024d0
    a9d4:	0000efb9 	.word	0x0000efb9
    a9d8:	00016625 	.word	0x00016625
    a9dc:	00019d89 	.word	0x00019d89

0000a9e0 <LORAREG_GetAttr_Rx1WindowparamsType2>:
{
    a9e0:	b500      	push	{lr}
    a9e2:	b083      	sub	sp, #12
    a9e4:	0010      	movs	r0, r2
	memcpy(&rx1WindowParamsReq,(Rx1WindowParamsReq_t *)attrInput,sizeof(Rx1WindowParamsReq_t));
    a9e6:	784a      	ldrb	r2, [r1, #1]
    a9e8:	788b      	ldrb	r3, [r1, #2]
    if (rx1WindowParamReq->currDr >= rx1WindowParamReq->drOffset)
    a9ea:	429a      	cmp	r2, r3
    a9ec:	d925      	bls.n	aa3a <LORAREG_GetAttr_Rx1WindowparamsType2+0x5a>
        rx1WindowParams->rx1Dr = DR0;
    a9ee:	2300      	movs	r3, #0
    a9f0:	466a      	mov	r2, sp
    a9f2:	7113      	strb	r3, [r2, #4]
	rx1WindowParams->rx1Freq = RegParams.pOtherChParams[RegParams.lastUsedChannelIndex].rx1Frequency;			
    a9f4:	4913      	ldr	r1, [pc, #76]	; (aa44 <LORAREG_GetAttr_Rx1WindowparamsType2+0x64>)
    a9f6:	7a0b      	ldrb	r3, [r1, #8]
    a9f8:	7a4a      	ldrb	r2, [r1, #9]
    a9fa:	0212      	lsls	r2, r2, #8
    a9fc:	4313      	orrs	r3, r2
    a9fe:	7a8a      	ldrb	r2, [r1, #10]
    aa00:	0412      	lsls	r2, r2, #16
    aa02:	431a      	orrs	r2, r3
    aa04:	7acb      	ldrb	r3, [r1, #11]
    aa06:	061b      	lsls	r3, r3, #24
    aa08:	431a      	orrs	r2, r3
    aa0a:	232f      	movs	r3, #47	; 0x2f
    aa0c:	5cc9      	ldrb	r1, [r1, r3]
    aa0e:	004b      	lsls	r3, r1, #1
    aa10:	185b      	adds	r3, r3, r1
    aa12:	009b      	lsls	r3, r3, #2
    aa14:	189b      	adds	r3, r3, r2
    aa16:	7919      	ldrb	r1, [r3, #4]
    aa18:	795a      	ldrb	r2, [r3, #5]
    aa1a:	0212      	lsls	r2, r2, #8
    aa1c:	4311      	orrs	r1, r2
    aa1e:	799a      	ldrb	r2, [r3, #6]
    aa20:	0412      	lsls	r2, r2, #16
    aa22:	430a      	orrs	r2, r1
    aa24:	79db      	ldrb	r3, [r3, #7]
    aa26:	061b      	lsls	r3, r3, #24
    aa28:	4313      	orrs	r3, r2
    aa2a:	9300      	str	r3, [sp, #0]
	memcpy(attrOutput,&rx1WindowParamsResp,sizeof(Rx1WindowParams_t));
    aa2c:	2208      	movs	r2, #8
    aa2e:	4669      	mov	r1, sp
    aa30:	4b05      	ldr	r3, [pc, #20]	; (aa48 <LORAREG_GetAttr_Rx1WindowparamsType2+0x68>)
    aa32:	4798      	blx	r3
}
    aa34:	2008      	movs	r0, #8
    aa36:	b003      	add	sp, #12
    aa38:	bd00      	pop	{pc}
        rx1WindowParams->rx1Dr = rx1WindowParamReq->currDr - rx1WindowParamReq->drOffset;
    aa3a:	1a9b      	subs	r3, r3, r2
    aa3c:	466a      	mov	r2, sp
    aa3e:	7113      	strb	r3, [r2, #4]
    aa40:	e7d8      	b.n	a9f4 <LORAREG_GetAttr_Rx1WindowparamsType2+0x14>
    aa42:	46c0      	nop			; (mov r8, r8)
    aa44:	200024d0 	.word	0x200024d0
    aa48:	00019d89 	.word	0x00019d89

0000aa4c <LORAREG_GetAttr_DRangeChBandT2>:
{
    aa4c:	b5f0      	push	{r4, r5, r6, r7, lr}
    aa4e:	46c6      	mov	lr, r8
    aa50:	b500      	push	{lr}
    aa52:	b082      	sub	sp, #8
    aa54:	4690      	mov	r8, r2
	memcpy(&bandDrReq,(BandDrReq_t *)attrInput,sizeof(BandDrReq_t));
    aa56:	ad01      	add	r5, sp, #4
    aa58:	2204      	movs	r2, #4
    aa5a:	0028      	movs	r0, r5
    aa5c:	4b38      	ldr	r3, [pc, #224]	; (ab40 <LORAREG_GetAttr_DRangeChBandT2+0xf4>)
    aa5e:	4798      	blx	r3
	switch (chMaskCntl)
    aa60:	782b      	ldrb	r3, [r5, #0]
    aa62:	2b00      	cmp	r3, #0
    aa64:	d017      	beq.n	aa96 <LORAREG_GetAttr_DRangeChBandT2+0x4a>
    aa66:	2b06      	cmp	r3, #6
    aa68:	d159      	bne.n	ab1e <LORAREG_GetAttr_DRangeChBandT2+0xd2>
			for (i = 0; i < RegParams.maxChannels; i++)
    aa6a:	3324      	adds	r3, #36	; 0x24
    aa6c:	4a35      	ldr	r2, [pc, #212]	; (ab44 <LORAREG_GetAttr_DRangeChBandT2+0xf8>)
    aa6e:	56d7      	ldrsb	r7, [r2, r3]
    aa70:	2000      	movs	r0, #0
    aa72:	2507      	movs	r5, #7
    aa74:	2f00      	cmp	r7, #0
    aa76:	dd54      	ble.n	ab22 <LORAREG_GetAttr_DRangeChBandT2+0xd6>
				if (RegParams.pChParams[i].dataRange.min < auxMinDataRate)
    aa78:	4a32      	ldr	r2, [pc, #200]	; (ab44 <LORAREG_GetAttr_DRangeChBandT2+0xf8>)
    aa7a:	7916      	ldrb	r6, [r2, #4]
    aa7c:	7953      	ldrb	r3, [r2, #5]
    aa7e:	021b      	lsls	r3, r3, #8
    aa80:	4333      	orrs	r3, r6
    aa82:	7996      	ldrb	r6, [r2, #6]
    aa84:	0436      	lsls	r6, r6, #16
    aa86:	4333      	orrs	r3, r6
    aa88:	79d6      	ldrb	r6, [r2, #7]
    aa8a:	0636      	lsls	r6, r6, #24
    aa8c:	431e      	orrs	r6, r3
    aa8e:	2000      	movs	r0, #0
    aa90:	2507      	movs	r5, #7
    aa92:	2200      	movs	r2, #0
    aa94:	e035      	b.n	ab02 <LORAREG_GetAttr_DRangeChBandT2+0xb6>
			for (i = 0; i < RegParams.maxChannels; i++)
    aa96:	232a      	movs	r3, #42	; 0x2a
    aa98:	4a2a      	ldr	r2, [pc, #168]	; (ab44 <LORAREG_GetAttr_DRangeChBandT2+0xf8>)
    aa9a:	56d3      	ldrsb	r3, [r2, r3]
    aa9c:	469c      	mov	ip, r3
    aa9e:	2b00      	cmp	r3, #0
    aaa0:	dd4a      	ble.n	ab38 <LORAREG_GetAttr_DRangeChBandT2+0xec>
		chBandDr = getChBandDrT2(bandDrReq.chnlMaskCntl,bandDrReq.chnlMask);
    aaa2:	ab01      	add	r3, sp, #4
    aaa4:	885e      	ldrh	r6, [r3, #2]
				if ((RegParams.pChParams[i].dataRange.min < auxMinDataRate) && ((auxChannelMask & 0x0001) == 0x0001))
    aaa6:	7917      	ldrb	r7, [r2, #4]
    aaa8:	7953      	ldrb	r3, [r2, #5]
    aaaa:	021b      	lsls	r3, r3, #8
    aaac:	433b      	orrs	r3, r7
    aaae:	7997      	ldrb	r7, [r2, #6]
    aab0:	043f      	lsls	r7, r7, #16
    aab2:	433b      	orrs	r3, r7
    aab4:	79d7      	ldrb	r7, [r2, #7]
    aab6:	063f      	lsls	r7, r7, #24
    aab8:	431f      	orrs	r7, r3
    aaba:	2000      	movs	r0, #0
    aabc:	2507      	movs	r5, #7
    aabe:	2200      	movs	r2, #0
				if ((RegParams.pChParams[i].dataRange.max > auxMaxDataRate) && ((auxChannelMask & 0x0001) == 0x0001))
    aac0:	2401      	movs	r4, #1
    aac2:	e00b      	b.n	aadc <LORAREG_GetAttr_DRangeChBandT2+0x90>
    aac4:	784b      	ldrb	r3, [r1, #1]
    aac6:	091b      	lsrs	r3, r3, #4
    aac8:	4283      	cmp	r3, r0
    aaca:	dd02      	ble.n	aad2 <LORAREG_GetAttr_DRangeChBandT2+0x86>
    aacc:	4234      	tst	r4, r6
    aace:	d000      	beq.n	aad2 <LORAREG_GetAttr_DRangeChBandT2+0x86>
					auxMaxDataRate = RegParams.pChParams[i].dataRange.max;
    aad0:	0018      	movs	r0, r3
				auxChannelMask = auxChannelMask >> SHIFT1;
    aad2:	0876      	lsrs	r6, r6, #1
			for (i = 0; i < RegParams.maxChannels; i++)
    aad4:	3201      	adds	r2, #1
    aad6:	b2d2      	uxtb	r2, r2
    aad8:	4562      	cmp	r2, ip
    aada:	da22      	bge.n	ab22 <LORAREG_GetAttr_DRangeChBandT2+0xd6>
				if ((RegParams.pChParams[i].dataRange.min < auxMinDataRate) && ((auxChannelMask & 0x0001) == 0x0001))
    aadc:	0051      	lsls	r1, r2, #1
    aade:	1879      	adds	r1, r7, r1
    aae0:	784b      	ldrb	r3, [r1, #1]
    aae2:	071b      	lsls	r3, r3, #28
    aae4:	0f1b      	lsrs	r3, r3, #28
    aae6:	42ab      	cmp	r3, r5
    aae8:	daec      	bge.n	aac4 <LORAREG_GetAttr_DRangeChBandT2+0x78>
    aaea:	4234      	tst	r4, r6
    aaec:	d0f1      	beq.n	aad2 <LORAREG_GetAttr_DRangeChBandT2+0x86>
					auxMinDataRate = RegParams.pChParams[i].dataRange.min;
    aaee:	001d      	movs	r5, r3
				if ((RegParams.pChParams[i].dataRange.max > auxMaxDataRate) && ((auxChannelMask & 0x0001) == 0x0001))
    aaf0:	784b      	ldrb	r3, [r1, #1]
    aaf2:	091b      	lsrs	r3, r3, #4
    aaf4:	4298      	cmp	r0, r3
    aaf6:	dbeb      	blt.n	aad0 <LORAREG_GetAttr_DRangeChBandT2+0x84>
    aaf8:	e7eb      	b.n	aad2 <LORAREG_GetAttr_DRangeChBandT2+0x86>
			for (i = 0; i < RegParams.maxChannels; i++)
    aafa:	3201      	adds	r2, #1
    aafc:	b2d2      	uxtb	r2, r2
    aafe:	42ba      	cmp	r2, r7
    ab00:	da0f      	bge.n	ab22 <LORAREG_GetAttr_DRangeChBandT2+0xd6>
				if (RegParams.pChParams[i].dataRange.min < auxMinDataRate)
    ab02:	0051      	lsls	r1, r2, #1
    ab04:	1871      	adds	r1, r6, r1
    ab06:	784b      	ldrb	r3, [r1, #1]
    ab08:	071b      	lsls	r3, r3, #28
    ab0a:	0f1b      	lsrs	r3, r3, #28
    ab0c:	42ab      	cmp	r3, r5
    ab0e:	da00      	bge.n	ab12 <LORAREG_GetAttr_DRangeChBandT2+0xc6>
					auxMinDataRate = RegParams.pChParams[i].dataRange.min;
    ab10:	001d      	movs	r5, r3
				if (RegParams.pChParams[i].dataRange.max > auxMaxDataRate)
    ab12:	784b      	ldrb	r3, [r1, #1]
    ab14:	091b      	lsrs	r3, r3, #4
    ab16:	4283      	cmp	r3, r0
    ab18:	ddef      	ble.n	aafa <LORAREG_GetAttr_DRangeChBandT2+0xae>
					auxMaxDataRate = RegParams.pChParams[i].dataRange.max;
    ab1a:	0018      	movs	r0, r3
    ab1c:	e7ed      	b.n	aafa <LORAREG_GetAttr_DRangeChBandT2+0xae>
			auxMaxDataRate = 0xFF;
    ab1e:	20ff      	movs	r0, #255	; 0xff
			auxMinDataRate = 0xFF;
    ab20:	25ff      	movs	r5, #255	; 0xff
    ab22:	0100      	lsls	r0, r0, #4
    ab24:	230f      	movs	r3, #15
    ab26:	401d      	ands	r5, r3
    ab28:	4328      	orrs	r0, r5
		memcpy(attrOutput,&chBandDr,sizeof(DataRange_t));
    ab2a:	4643      	mov	r3, r8
    ab2c:	7018      	strb	r0, [r3, #0]
}
    ab2e:	2008      	movs	r0, #8
    ab30:	b002      	add	sp, #8
    ab32:	bc04      	pop	{r2}
    ab34:	4690      	mov	r8, r2
    ab36:	bdf0      	pop	{r4, r5, r6, r7, pc}
			for (i = 0; i < RegParams.maxChannels; i++)
    ab38:	2000      	movs	r0, #0
    ab3a:	2507      	movs	r5, #7
    ab3c:	e7f1      	b.n	ab22 <LORAREG_GetAttr_DRangeChBandT2+0xd6>
    ab3e:	46c0      	nop			; (mov r8, r8)
    ab40:	00019d89 	.word	0x00019d89
    ab44:	200024d0 	.word	0x200024d0

0000ab48 <LORAREG_GetAttr_FreqT2>:
{
    ab48:	b510      	push	{r4, lr}
    ab4a:	0014      	movs	r4, r2
	channelId = *(uint8_t *)attrInput;
    ab4c:	780b      	ldrb	r3, [r1, #0]
	if(channelId > RegParams.maxChannels)
    ab4e:	222a      	movs	r2, #42	; 0x2a
    ab50:	490d      	ldr	r1, [pc, #52]	; (ab88 <LORAREG_GetAttr_FreqT2+0x40>)
    ab52:	568a      	ldrsb	r2, [r1, r2]
		return LORAWAN_INVALID_PARAMETER;
    ab54:	200a      	movs	r0, #10
	if(channelId > RegParams.maxChannels)
    ab56:	4293      	cmp	r3, r2
    ab58:	dd00      	ble.n	ab5c <LORAREG_GetAttr_FreqT2+0x14>
}
    ab5a:	bd10      	pop	{r4, pc}
		memcpy(attrOutput,(&RegParams.pOtherChParams[channelId].ulfrequency),sizeof(uint32_t));
    ab5c:	0008      	movs	r0, r1
    ab5e:	7a09      	ldrb	r1, [r1, #8]
    ab60:	7a42      	ldrb	r2, [r0, #9]
    ab62:	0212      	lsls	r2, r2, #8
    ab64:	430a      	orrs	r2, r1
    ab66:	7a81      	ldrb	r1, [r0, #10]
    ab68:	0409      	lsls	r1, r1, #16
    ab6a:	430a      	orrs	r2, r1
    ab6c:	7ac1      	ldrb	r1, [r0, #11]
    ab6e:	0609      	lsls	r1, r1, #24
    ab70:	4311      	orrs	r1, r2
    ab72:	005a      	lsls	r2, r3, #1
    ab74:	18d3      	adds	r3, r2, r3
    ab76:	009b      	lsls	r3, r3, #2
    ab78:	18c9      	adds	r1, r1, r3
    ab7a:	2204      	movs	r2, #4
    ab7c:	0020      	movs	r0, r4
    ab7e:	4b03      	ldr	r3, [pc, #12]	; (ab8c <LORAREG_GetAttr_FreqT2+0x44>)
    ab80:	4798      	blx	r3
	return result;
    ab82:	2008      	movs	r0, #8
    ab84:	e7e9      	b.n	ab5a <LORAREG_GetAttr_FreqT2+0x12>
    ab86:	46c0      	nop			; (mov r8, r8)
    ab88:	200024d0 	.word	0x200024d0
    ab8c:	00019d89 	.word	0x00019d89

0000ab90 <LORAREG_GetAttr_Rx1WindowparamsType4>:
{
    ab90:	b510      	push	{r4, lr}
    ab92:	b082      	sub	sp, #8
    ab94:	0010      	movs	r0, r2
	if((((1 << RegParams.band) & (ISM_ASBAND)) || ((1 << RegParams.band) & (1 << ISM_JPN923)) != 0) &&  rx1WindowParamReq->joining)
    ab96:	232e      	movs	r3, #46	; 0x2e
    ab98:	4a37      	ldr	r2, [pc, #220]	; (ac78 <LORAREG_GetAttr_Rx1WindowparamsType4+0xe8>)
    ab9a:	5cd2      	ldrb	r2, [r2, r3]
    ab9c:	4b37      	ldr	r3, [pc, #220]	; (ac7c <LORAREG_GetAttr_Rx1WindowparamsType4+0xec>)
    ab9e:	4113      	asrs	r3, r2
    aba0:	07db      	lsls	r3, r3, #31
    aba2:	d502      	bpl.n	abaa <LORAREG_GetAttr_Rx1WindowparamsType4+0x1a>
    aba4:	780b      	ldrb	r3, [r1, #0]
    aba6:	2b00      	cmp	r3, #0
    aba8:	d116      	bne.n	abd8 <LORAREG_GetAttr_Rx1WindowparamsType4+0x48>
	if(RegParams.cmnParams.paramsType2.txParams.downlinkDwellTime == 1)
    abaa:	23e1      	movs	r3, #225	; 0xe1
    abac:	005b      	lsls	r3, r3, #1
    abae:	4a32      	ldr	r2, [pc, #200]	; (ac78 <LORAREG_GetAttr_Rx1WindowparamsType4+0xe8>)
    abb0:	5cd4      	ldrb	r4, [r2, r3]
		minDR = DR2;
    abb2:	3bc1      	subs	r3, #193	; 0xc1
    abb4:	3bff      	subs	r3, #255	; 0xff
    abb6:	401c      	ands	r4, r3
	memcpy(&rx1WindowParamsReq,(Rx1WindowParamsReq_t *)attrInput,sizeof(Rx1WindowParamsReq_t));
    abb8:	784b      	ldrb	r3, [r1, #1]
	effectiveDROffset = (rx1WindowParamReq->drOffset > maxDR) ? (maxDR - rx1WindowParamReq->drOffset) : (rx1WindowParamReq->drOffset);
    abba:	2b05      	cmp	r3, #5
    abbc:	d92c      	bls.n	ac18 <LORAREG_GetAttr_Rx1WindowparamsType4+0x88>
    abbe:	2205      	movs	r2, #5
    abc0:	1ad3      	subs	r3, r2, r3
    abc2:	b25b      	sxtb	r3, r3
	memcpy(&rx1WindowParamsReq,(Rx1WindowParamsReq_t *)attrInput,sizeof(Rx1WindowParamsReq_t));
    abc4:	788a      	ldrb	r2, [r1, #2]
	if (rx1WindowParamReq->currDr >= effectiveDROffset)
    abc6:	429a      	cmp	r2, r3
    abc8:	db31      	blt.n	ac2e <LORAREG_GetAttr_Rx1WindowparamsType4+0x9e>
		rx1WindowParams->rx1Dr = rx1WindowParamReq->currDr - effectiveDROffset;
    abca:	1ad3      	subs	r3, r2, r3
    abcc:	b2db      	uxtb	r3, r3
		if(rx1WindowParams->rx1Dr < minDR)
    abce:	42a3      	cmp	r3, r4
    abd0:	d224      	bcs.n	ac1c <LORAREG_GetAttr_Rx1WindowparamsType4+0x8c>
			rx1WindowParams->rx1Dr = minDR;
    abd2:	466b      	mov	r3, sp
    abd4:	711c      	strb	r4, [r3, #4]
    abd6:	e02c      	b.n	ac32 <LORAREG_GetAttr_Rx1WindowparamsType4+0xa2>
		rx1WindowParams->rx1Dr = DR2;
    abd8:	2302      	movs	r3, #2
    abda:	466a      	mov	r2, sp
    abdc:	7113      	strb	r3, [r2, #4]
		rx1WindowParams->rx1Freq = RegParams.pOtherChParams[RegParams.lastUsedChannelIndex].rx1Frequency;
    abde:	4926      	ldr	r1, [pc, #152]	; (ac78 <LORAREG_GetAttr_Rx1WindowparamsType4+0xe8>)
    abe0:	7a0b      	ldrb	r3, [r1, #8]
    abe2:	7a4a      	ldrb	r2, [r1, #9]
    abe4:	0212      	lsls	r2, r2, #8
    abe6:	4313      	orrs	r3, r2
    abe8:	7a8a      	ldrb	r2, [r1, #10]
    abea:	0412      	lsls	r2, r2, #16
    abec:	431a      	orrs	r2, r3
    abee:	7acb      	ldrb	r3, [r1, #11]
    abf0:	061b      	lsls	r3, r3, #24
    abf2:	431a      	orrs	r2, r3
    abf4:	232f      	movs	r3, #47	; 0x2f
    abf6:	5cc9      	ldrb	r1, [r1, r3]
    abf8:	004b      	lsls	r3, r1, #1
    abfa:	185b      	adds	r3, r3, r1
    abfc:	009b      	lsls	r3, r3, #2
    abfe:	189b      	adds	r3, r3, r2
    ac00:	7919      	ldrb	r1, [r3, #4]
    ac02:	795a      	ldrb	r2, [r3, #5]
    ac04:	0212      	lsls	r2, r2, #8
    ac06:	4311      	orrs	r1, r2
    ac08:	799a      	ldrb	r2, [r3, #6]
    ac0a:	0412      	lsls	r2, r2, #16
    ac0c:	430a      	orrs	r2, r1
    ac0e:	79db      	ldrb	r3, [r3, #7]
    ac10:	061b      	lsls	r3, r3, #24
    ac12:	4313      	orrs	r3, r2
    ac14:	9300      	str	r3, [sp, #0]
    ac16:	e028      	b.n	ac6a <LORAREG_GetAttr_Rx1WindowparamsType4+0xda>
	effectiveDROffset = (rx1WindowParamReq->drOffset > maxDR) ? (maxDR - rx1WindowParamReq->drOffset) : (rx1WindowParamReq->drOffset);
    ac18:	b25b      	sxtb	r3, r3
    ac1a:	e7d3      	b.n	abc4 <LORAREG_GetAttr_Rx1WindowparamsType4+0x34>
		else if(rx1WindowParams->rx1Dr > maxDR)
    ac1c:	2b05      	cmp	r3, #5
    ac1e:	d802      	bhi.n	ac26 <LORAREG_GetAttr_Rx1WindowparamsType4+0x96>
		rx1WindowParams->rx1Dr = rx1WindowParamReq->currDr - effectiveDROffset;
    ac20:	466a      	mov	r2, sp
    ac22:	7113      	strb	r3, [r2, #4]
    ac24:	e005      	b.n	ac32 <LORAREG_GetAttr_Rx1WindowparamsType4+0xa2>
			rx1WindowParams->rx1Dr = maxDR;
    ac26:	2305      	movs	r3, #5
    ac28:	466a      	mov	r2, sp
    ac2a:	7113      	strb	r3, [r2, #4]
    ac2c:	e001      	b.n	ac32 <LORAREG_GetAttr_Rx1WindowparamsType4+0xa2>
		rx1WindowParams->rx1Dr = minDR;
    ac2e:	466b      	mov	r3, sp
    ac30:	711c      	strb	r4, [r3, #4]
	rx1WindowParams->rx1Freq = RegParams.pOtherChParams[RegParams.lastUsedChannelIndex].rx1Frequency;
    ac32:	4911      	ldr	r1, [pc, #68]	; (ac78 <LORAREG_GetAttr_Rx1WindowparamsType4+0xe8>)
    ac34:	7a0b      	ldrb	r3, [r1, #8]
    ac36:	7a4a      	ldrb	r2, [r1, #9]
    ac38:	0212      	lsls	r2, r2, #8
    ac3a:	4313      	orrs	r3, r2
    ac3c:	7a8a      	ldrb	r2, [r1, #10]
    ac3e:	0412      	lsls	r2, r2, #16
    ac40:	431a      	orrs	r2, r3
    ac42:	7acb      	ldrb	r3, [r1, #11]
    ac44:	061b      	lsls	r3, r3, #24
    ac46:	431a      	orrs	r2, r3
    ac48:	232f      	movs	r3, #47	; 0x2f
    ac4a:	5cc9      	ldrb	r1, [r1, r3]
    ac4c:	004b      	lsls	r3, r1, #1
    ac4e:	185b      	adds	r3, r3, r1
    ac50:	009b      	lsls	r3, r3, #2
    ac52:	189b      	adds	r3, r3, r2
    ac54:	7919      	ldrb	r1, [r3, #4]
    ac56:	795a      	ldrb	r2, [r3, #5]
    ac58:	0212      	lsls	r2, r2, #8
    ac5a:	4311      	orrs	r1, r2
    ac5c:	799a      	ldrb	r2, [r3, #6]
    ac5e:	0412      	lsls	r2, r2, #16
    ac60:	430a      	orrs	r2, r1
    ac62:	79db      	ldrb	r3, [r3, #7]
    ac64:	061b      	lsls	r3, r3, #24
    ac66:	4313      	orrs	r3, r2
    ac68:	9300      	str	r3, [sp, #0]
	memcpy(attrOutput,&rx1WindowParamsResp,sizeof(Rx1WindowParams_t));
    ac6a:	2208      	movs	r2, #8
    ac6c:	4669      	mov	r1, sp
    ac6e:	4b04      	ldr	r3, [pc, #16]	; (ac80 <LORAREG_GetAttr_Rx1WindowparamsType4+0xf0>)
    ac70:	4798      	blx	r3
}
    ac72:	2008      	movs	r0, #8
    ac74:	b002      	add	sp, #8
    ac76:	bd10      	pop	{r4, pc}
    ac78:	200024d0 	.word	0x200024d0
    ac7c:	00007fe0 	.word	0x00007fe0
    ac80:	00019d89 	.word	0x00019d89

0000ac84 <LORAREG_GetAttr_FreqT3>:
{
    ac84:	b510      	push	{r4, lr}
    ac86:	0014      	movs	r4, r2
	channelId = *(uint8_t *)attrInput;
    ac88:	780b      	ldrb	r3, [r1, #0]
	if(channelId > RegParams.maxChannels) 
    ac8a:	222a      	movs	r2, #42	; 0x2a
    ac8c:	490d      	ldr	r1, [pc, #52]	; (acc4 <LORAREG_GetAttr_FreqT3+0x40>)
    ac8e:	568a      	ldrsb	r2, [r1, r2]
		result = LORAWAN_INVALID_PARAMETER;
    ac90:	200a      	movs	r0, #10
	if(channelId > RegParams.maxChannels) 
    ac92:	4293      	cmp	r3, r2
    ac94:	dd00      	ble.n	ac98 <LORAREG_GetAttr_FreqT3+0x14>
}
    ac96:	bd10      	pop	{r4, pc}
		memcpy(attrOutput,(&RegParams.pOtherChParams[channelId].ulfrequency),sizeof(uint32_t));
    ac98:	0008      	movs	r0, r1
    ac9a:	7a09      	ldrb	r1, [r1, #8]
    ac9c:	7a42      	ldrb	r2, [r0, #9]
    ac9e:	0212      	lsls	r2, r2, #8
    aca0:	430a      	orrs	r2, r1
    aca2:	7a81      	ldrb	r1, [r0, #10]
    aca4:	0409      	lsls	r1, r1, #16
    aca6:	430a      	orrs	r2, r1
    aca8:	7ac1      	ldrb	r1, [r0, #11]
    acaa:	0609      	lsls	r1, r1, #24
    acac:	4311      	orrs	r1, r2
    acae:	005a      	lsls	r2, r3, #1
    acb0:	18d3      	adds	r3, r2, r3
    acb2:	009b      	lsls	r3, r3, #2
    acb4:	18c9      	adds	r1, r1, r3
    acb6:	2204      	movs	r2, #4
    acb8:	0020      	movs	r0, r4
    acba:	4b03      	ldr	r3, [pc, #12]	; (acc8 <LORAREG_GetAttr_FreqT3+0x44>)
    acbc:	4798      	blx	r3
	StackRetStatus_t result = LORAWAN_SUCCESS;
    acbe:	2008      	movs	r0, #8
    acc0:	e7e9      	b.n	ac96 <LORAREG_GetAttr_FreqT3+0x12>
    acc2:	46c0      	nop			; (mov r8, r8)
    acc4:	200024d0 	.word	0x200024d0
    acc8:	00019d89 	.word	0x00019d89

0000accc <LORAREG_GetAttr_Rx1WindowparamsType3>:
{
    accc:	b500      	push	{lr}
    acce:	b083      	sub	sp, #12
    acd0:	0010      	movs	r0, r2
	memcpy(&rx1WindowParamsReq,(Rx1WindowParamsReq_t *)attrInput,sizeof(Rx1WindowParamsReq_t));
    acd2:	784b      	ldrb	r3, [r1, #1]
    acd4:	788a      	ldrb	r2, [r1, #2]
	effectiveDROffset = (rx1WindowParamReq->drOffset > maxDR) ? (maxDR - rx1WindowParamReq->drOffset) : (rx1WindowParamReq->drOffset);
    acd6:	2b05      	cmp	r3, #5
    acd8:	d90b      	bls.n	acf2 <LORAREG_GetAttr_Rx1WindowparamsType3+0x26>
    acda:	2105      	movs	r1, #5
    acdc:	1acb      	subs	r3, r1, r3
    acde:	b25b      	sxtb	r3, r3
    if (rx1WindowParamReq->currDr >= effectiveDROffset)
    ace0:	429a      	cmp	r2, r3
    ace2:	db0c      	blt.n	acfe <LORAREG_GetAttr_Rx1WindowparamsType3+0x32>
        rx1WindowParams->rx1Dr = rx1WindowParamReq->currDr - effectiveDROffset;
    ace4:	1ad3      	subs	r3, r2, r3
    ace6:	b2db      	uxtb	r3, r3
		else if(rx1WindowParams->rx1Dr > maxDR)
    ace8:	2b05      	cmp	r3, #5
    acea:	d804      	bhi.n	acf6 <LORAREG_GetAttr_Rx1WindowparamsType3+0x2a>
        rx1WindowParams->rx1Dr = rx1WindowParamReq->currDr - effectiveDROffset;
    acec:	466a      	mov	r2, sp
    acee:	7113      	strb	r3, [r2, #4]
    acf0:	e008      	b.n	ad04 <LORAREG_GetAttr_Rx1WindowparamsType3+0x38>
	effectiveDROffset = (rx1WindowParamReq->drOffset > maxDR) ? (maxDR - rx1WindowParamReq->drOffset) : (rx1WindowParamReq->drOffset);
    acf2:	b25b      	sxtb	r3, r3
    acf4:	e7f4      	b.n	ace0 <LORAREG_GetAttr_Rx1WindowparamsType3+0x14>
			rx1WindowParams->rx1Dr = maxDR;
    acf6:	2305      	movs	r3, #5
    acf8:	466a      	mov	r2, sp
    acfa:	7113      	strb	r3, [r2, #4]
    acfc:	e002      	b.n	ad04 <LORAREG_GetAttr_Rx1WindowparamsType3+0x38>
        rx1WindowParams->rx1Dr = minDR;
    acfe:	2300      	movs	r3, #0
    ad00:	466a      	mov	r2, sp
    ad02:	7113      	strb	r3, [r2, #4]
	rx1WindowParams->rx1Freq = RegParams.pOtherChParams[RegParams.lastUsedChannelIndex].rx1Frequency;			
    ad04:	4911      	ldr	r1, [pc, #68]	; (ad4c <LORAREG_GetAttr_Rx1WindowparamsType3+0x80>)
    ad06:	7a0b      	ldrb	r3, [r1, #8]
    ad08:	7a4a      	ldrb	r2, [r1, #9]
    ad0a:	0212      	lsls	r2, r2, #8
    ad0c:	4313      	orrs	r3, r2
    ad0e:	7a8a      	ldrb	r2, [r1, #10]
    ad10:	0412      	lsls	r2, r2, #16
    ad12:	431a      	orrs	r2, r3
    ad14:	7acb      	ldrb	r3, [r1, #11]
    ad16:	061b      	lsls	r3, r3, #24
    ad18:	431a      	orrs	r2, r3
    ad1a:	232f      	movs	r3, #47	; 0x2f
    ad1c:	5cc9      	ldrb	r1, [r1, r3]
    ad1e:	004b      	lsls	r3, r1, #1
    ad20:	185b      	adds	r3, r3, r1
    ad22:	009b      	lsls	r3, r3, #2
    ad24:	189b      	adds	r3, r3, r2
    ad26:	7919      	ldrb	r1, [r3, #4]
    ad28:	795a      	ldrb	r2, [r3, #5]
    ad2a:	0212      	lsls	r2, r2, #8
    ad2c:	4311      	orrs	r1, r2
    ad2e:	799a      	ldrb	r2, [r3, #6]
    ad30:	0412      	lsls	r2, r2, #16
    ad32:	430a      	orrs	r2, r1
    ad34:	79db      	ldrb	r3, [r3, #7]
    ad36:	061b      	lsls	r3, r3, #24
    ad38:	4313      	orrs	r3, r2
    ad3a:	9300      	str	r3, [sp, #0]
	memcpy(attrOutput,&rx1WindowParamsResp,sizeof(Rx1WindowParams_t));
    ad3c:	2208      	movs	r2, #8
    ad3e:	4669      	mov	r1, sp
    ad40:	4b03      	ldr	r3, [pc, #12]	; (ad50 <LORAREG_GetAttr_Rx1WindowparamsType3+0x84>)
    ad42:	4798      	blx	r3
}
    ad44:	2008      	movs	r0, #8
    ad46:	b003      	add	sp, #12
    ad48:	bd00      	pop	{pc}
    ad4a:	46c0      	nop			; (mov r8, r8)
    ad4c:	200024d0 	.word	0x200024d0
    ad50:	00019d89 	.word	0x00019d89

0000ad54 <LORAREG_GetAttr_minLBTChPauseTimer>:
{
    ad54:	b5f0      	push	{r4, r5, r6, r7, lr}
    ad56:	46de      	mov	lr, fp
    ad58:	4657      	mov	r7, sl
    ad5a:	464e      	mov	r6, r9
    ad5c:	4645      	mov	r5, r8
    ad5e:	b5e0      	push	{r5, r6, r7, lr}
    ad60:	b085      	sub	sp, #20
    ad62:	9200      	str	r2, [sp, #0]
	uint32_t minim = UINT32_MAX;
    ad64:	2301      	movs	r3, #1
    ad66:	425b      	negs	r3, r3
    ad68:	9303      	str	r3, [sp, #12]
	currentDataRate = *(uint8_t *)attrInput;
    ad6a:	780b      	ldrb	r3, [r1, #0]
    ad6c:	4699      	mov	r9, r3
	for (uint8_t i = 0; i < RegParams.maxChannels; i++)
    ad6e:	232a      	movs	r3, #42	; 0x2a
    ad70:	4a2a      	ldr	r2, [pc, #168]	; (ae1c <LORAREG_GetAttr_minLBTChPauseTimer+0xc8>)
    ad72:	56d7      	ldrsb	r7, [r2, r3]
    ad74:	2f00      	cmp	r7, #0
    ad76:	dd40      	ble.n	adfa <LORAREG_GetAttr_minLBTChPauseTimer+0xa6>
		if ( (RegParams.pChParams[i].status == ENABLED) && (RegParams.cmnParams.paramsType2.channelTimer[i] != 0) 
    ad78:	7916      	ldrb	r6, [r2, #4]
    ad7a:	7953      	ldrb	r3, [r2, #5]
    ad7c:	021b      	lsls	r3, r3, #8
    ad7e:	4333      	orrs	r3, r6
    ad80:	7996      	ldrb	r6, [r2, #6]
    ad82:	0436      	lsls	r6, r6, #16
    ad84:	4333      	orrs	r3, r6
    ad86:	79d6      	ldrb	r6, [r2, #7]
    ad88:	0636      	lsls	r6, r6, #24
    ad8a:	431e      	orrs	r6, r3
    ad8c:	2300      	movs	r3, #0
    ad8e:	469a      	mov	sl, r3
    ad90:	3b01      	subs	r3, #1
    ad92:	4698      	mov	r8, r3
    ad94:	2300      	movs	r3, #0
    ad96:	2100      	movs	r1, #0
    ad98:	4694      	mov	ip, r2
			 && (currentDataRate >= RegParams.pChParams[i].dataRange.min) 
    ad9a:	464a      	mov	r2, r9
    ad9c:	9201      	str	r2, [sp, #4]
    ad9e:	46c3      	mov	fp, r8
    ada0:	e004      	b.n	adac <LORAREG_GetAttr_minLBTChPauseTimer+0x58>
	for (uint8_t i = 0; i < RegParams.maxChannels; i++)
    ada2:	3101      	adds	r1, #1
    ada4:	b2c9      	uxtb	r1, r1
    ada6:	000b      	movs	r3, r1
    ada8:	42b9      	cmp	r1, r7
    adaa:	da23      	bge.n	adf4 <LORAREG_GetAttr_minLBTChPauseTimer+0xa0>
		if ( (RegParams.pChParams[i].status == ENABLED) && (RegParams.cmnParams.paramsType2.channelTimer[i] != 0) 
    adac:	004a      	lsls	r2, r1, #1
    adae:	18b2      	adds	r2, r6, r2
    adb0:	7814      	ldrb	r4, [r2, #0]
    adb2:	2c00      	cmp	r4, #0
    adb4:	d0f5      	beq.n	ada2 <LORAREG_GetAttr_minLBTChPauseTimer+0x4e>
    adb6:	3358      	adds	r3, #88	; 0x58
    adb8:	009b      	lsls	r3, r3, #2
    adba:	4463      	add	r3, ip
    adbc:	7a18      	ldrb	r0, [r3, #8]
    adbe:	4680      	mov	r8, r0
    adc0:	7a58      	ldrb	r0, [r3, #9]
    adc2:	0200      	lsls	r0, r0, #8
    adc4:	4645      	mov	r5, r8
    adc6:	4305      	orrs	r5, r0
    adc8:	7a98      	ldrb	r0, [r3, #10]
    adca:	0400      	lsls	r0, r0, #16
    adcc:	4328      	orrs	r0, r5
    adce:	7adb      	ldrb	r3, [r3, #11]
    add0:	061b      	lsls	r3, r3, #24
    add2:	4303      	orrs	r3, r0
    add4:	d0e5      	beq.n	ada2 <LORAREG_GetAttr_minLBTChPauseTimer+0x4e>
		     && (RegParams.cmnParams.paramsType2.channelTimer[i] <= minim) 
    add6:	459b      	cmp	fp, r3
    add8:	d3e3      	bcc.n	ada2 <LORAREG_GetAttr_minLBTChPauseTimer+0x4e>
			 && (currentDataRate >= RegParams.pChParams[i].dataRange.min) 
    adda:	7850      	ldrb	r0, [r2, #1]
    addc:	0700      	lsls	r0, r0, #28
    adde:	0f00      	lsrs	r0, r0, #28
    ade0:	4581      	cmp	r9, r0
    ade2:	dbde      	blt.n	ada2 <LORAREG_GetAttr_minLBTChPauseTimer+0x4e>
			 && (currentDataRate <= RegParams.pChParams[i].dataRange.max) )
    ade4:	7852      	ldrb	r2, [r2, #1]
    ade6:	0912      	lsrs	r2, r2, #4
    ade8:	9801      	ldr	r0, [sp, #4]
    adea:	4290      	cmp	r0, r2
    adec:	dcd9      	bgt.n	ada2 <LORAREG_GetAttr_minLBTChPauseTimer+0x4e>
    adee:	46a2      	mov	sl, r4
			minim = RegParams.cmnParams.paramsType2.channelTimer[i];
    adf0:	469b      	mov	fp, r3
    adf2:	e7d6      	b.n	ada2 <LORAREG_GetAttr_minLBTChPauseTimer+0x4e>
    adf4:	4653      	mov	r3, sl
    adf6:	2b00      	cmp	r3, #0
    adf8:	d10c      	bne.n	ae14 <LORAREG_GetAttr_minLBTChPauseTimer+0xc0>
	memcpy(attrOutput,&minim,sizeof(uint32_t));
    adfa:	2204      	movs	r2, #4
    adfc:	a903      	add	r1, sp, #12
    adfe:	9800      	ldr	r0, [sp, #0]
    ae00:	4b07      	ldr	r3, [pc, #28]	; (ae20 <LORAREG_GetAttr_minLBTChPauseTimer+0xcc>)
    ae02:	4798      	blx	r3
}
    ae04:	2008      	movs	r0, #8
    ae06:	b005      	add	sp, #20
    ae08:	bc3c      	pop	{r2, r3, r4, r5}
    ae0a:	4690      	mov	r8, r2
    ae0c:	4699      	mov	r9, r3
    ae0e:	46a2      	mov	sl, r4
    ae10:	46ab      	mov	fp, r5
    ae12:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ae14:	465b      	mov	r3, fp
    ae16:	9303      	str	r3, [sp, #12]
    ae18:	e7ef      	b.n	adfa <LORAREG_GetAttr_minLBTChPauseTimer+0xa6>
    ae1a:	46c0      	nop			; (mov r8, r8)
    ae1c:	200024d0 	.word	0x200024d0
    ae20:	00019d89 	.word	0x00019d89

0000ae24 <ValidateTxFreqT2>:
{
    ae24:	b500      	push	{lr}
    ae26:	b083      	sub	sp, #12
	memcpy(&val_freqTx,attrInput,sizeof(ValUpdateFreqTx_t));
    ae28:	2208      	movs	r2, #8
    ae2a:	4668      	mov	r0, sp
    ae2c:	4b04      	ldr	r3, [pc, #16]	; (ae40 <ValidateTxFreqT2+0x1c>)
    ae2e:	4798      	blx	r3
	retVal = pValidateAttr[RX_FREQUENCY](RX_FREQUENCY,(void *)&val_freqTx.frequencyNew);
    ae30:	4b04      	ldr	r3, [pc, #16]	; (ae44 <ValidateTxFreqT2+0x20>)
    ae32:	685b      	ldr	r3, [r3, #4]
    ae34:	4669      	mov	r1, sp
    ae36:	2001      	movs	r0, #1
    ae38:	4798      	blx	r3
}
    ae3a:	b003      	add	sp, #12
    ae3c:	bd00      	pop	{pc}
    ae3e:	46c0      	nop			; (mov r8, r8)
    ae40:	00019d89 	.word	0x00019d89
    ae44:	20000e64 	.word	0x20000e64

0000ae48 <ValidateFreqIN>:
{
    ae48:	b500      	push	{lr}
    ae4a:	b083      	sub	sp, #12
	memcpy(&newFreq,attrInput,sizeof(uint32_t));
    ae4c:	2204      	movs	r2, #4
    ae4e:	a801      	add	r0, sp, #4
    ae50:	4b06      	ldr	r3, [pc, #24]	; (ae6c <ValidateFreqIN+0x24>)
    ae52:	4798      	blx	r3
	if(newFreq > FREQ_867000KHZ || newFreq < FREQ_865000KHZ)
    ae54:	9b01      	ldr	r3, [sp, #4]
    ae56:	4a06      	ldr	r2, [pc, #24]	; (ae70 <ValidateFreqIN+0x28>)
    ae58:	4694      	mov	ip, r2
    ae5a:	4463      	add	r3, ip
    ae5c:	4a05      	ldr	r2, [pc, #20]	; (ae74 <ValidateFreqIN+0x2c>)
	StackRetStatus_t result = LORAWAN_SUCCESS;
    ae5e:	2008      	movs	r0, #8
	if(newFreq > FREQ_867000KHZ || newFreq < FREQ_865000KHZ)
    ae60:	4293      	cmp	r3, r2
    ae62:	d900      	bls.n	ae66 <ValidateFreqIN+0x1e>
		result = LORAWAN_INVALID_PARAMETER;
    ae64:	3002      	adds	r0, #2
}
    ae66:	b003      	add	sp, #12
    ae68:	bd00      	pop	{pc}
    ae6a:	46c0      	nop			; (mov r8, r8)
    ae6c:	00019d89 	.word	0x00019d89
    ae70:	cc7125c0 	.word	0xcc7125c0
    ae74:	001e8480 	.word	0x001e8480

0000ae78 <ValidateFreqJP>:
{
    ae78:	b500      	push	{lr}
    ae7a:	b083      	sub	sp, #12
	memcpy(&newFreq,attrInput,sizeof(uint32_t));
    ae7c:	2204      	movs	r2, #4
    ae7e:	a801      	add	r0, sp, #4
    ae80:	4b06      	ldr	r3, [pc, #24]	; (ae9c <ValidateFreqJP+0x24>)
    ae82:	4798      	blx	r3
	if(newFreq > FREQ_928000KHZ || newFreq < FREQ_920000KHZ)
    ae84:	9b01      	ldr	r3, [sp, #4]
    ae86:	4a06      	ldr	r2, [pc, #24]	; (aea0 <ValidateFreqJP+0x28>)
    ae88:	4694      	mov	ip, r2
    ae8a:	4463      	add	r3, ip
    ae8c:	4a05      	ldr	r2, [pc, #20]	; (aea4 <ValidateFreqJP+0x2c>)
	StackRetStatus_t result = LORAWAN_SUCCESS;
    ae8e:	2008      	movs	r0, #8
	if(newFreq > FREQ_928000KHZ || newFreq < FREQ_920000KHZ)
    ae90:	4293      	cmp	r3, r2
    ae92:	d900      	bls.n	ae96 <ValidateFreqJP+0x1e>
		result = LORAWAN_INVALID_PARAMETER;
    ae94:	3002      	adds	r0, #2
}
    ae96:	b003      	add	sp, #12
    ae98:	bd00      	pop	{pc}
    ae9a:	46c0      	nop			; (mov r8, r8)
    ae9c:	00019d89 	.word	0x00019d89
    aea0:	c929ea00 	.word	0xc929ea00
    aea4:	007a1200 	.word	0x007a1200

0000aea8 <ValidateFreqKR>:
{
    aea8:	b500      	push	{lr}
    aeaa:	b083      	sub	sp, #12
	memcpy(&freqNew,attrInput,sizeof(uint32_t));
    aeac:	2204      	movs	r2, #4
    aeae:	a801      	add	r0, sp, #4
    aeb0:	4b0a      	ldr	r3, [pc, #40]	; (aedc <ValidateFreqKR+0x34>)
    aeb2:	4798      	blx	r3
		if(freq == freqNew)
    aeb4:	9a01      	ldr	r2, [sp, #4]
    aeb6:	4b0a      	ldr	r3, [pc, #40]	; (aee0 <ValidateFreqKR+0x38>)
    aeb8:	429a      	cmp	r2, r3
    aeba:	d00b      	beq.n	aed4 <ValidateFreqKR+0x2c>
    aebc:	4b09      	ldr	r3, [pc, #36]	; (aee4 <ValidateFreqKR+0x3c>)
	for(freq = FREQ_920900KHZ; freq <= FREQ_923300KHZ; freq += freqwidth)
    aebe:	490a      	ldr	r1, [pc, #40]	; (aee8 <ValidateFreqKR+0x40>)
		if(freq == freqNew)
    aec0:	429a      	cmp	r2, r3
    aec2:	d009      	beq.n	aed8 <ValidateFreqKR+0x30>
	for(freq = FREQ_920900KHZ; freq <= FREQ_923300KHZ; freq += freqwidth)
    aec4:	4809      	ldr	r0, [pc, #36]	; (aeec <ValidateFreqKR+0x44>)
    aec6:	4684      	mov	ip, r0
    aec8:	4463      	add	r3, ip
    aeca:	428b      	cmp	r3, r1
    aecc:	d1f8      	bne.n	aec0 <ValidateFreqKR+0x18>
    StackRetStatus_t result = LORAWAN_INVALID_PARAMETER;
    aece:	200a      	movs	r0, #10
}
    aed0:	b003      	add	sp, #12
    aed2:	bd00      	pop	{pc}
			result = LORAWAN_SUCCESS;
    aed4:	2008      	movs	r0, #8
    aed6:	e7fb      	b.n	aed0 <ValidateFreqKR+0x28>
    aed8:	2008      	movs	r0, #8
    aeda:	e7f9      	b.n	aed0 <ValidateFreqKR+0x28>
    aedc:	00019d89 	.word	0x00019d89
    aee0:	36e3d1a0 	.word	0x36e3d1a0
    aee4:	36e6dee0 	.word	0x36e6dee0
    aee8:	370b7de0 	.word	0x370b7de0
    aeec:	00030d40 	.word	0x00030d40

0000aef0 <setNewChannelsT1>:
{
    aef0:	b5f0      	push	{r4, r5, r6, r7, lr}
    aef2:	b083      	sub	sp, #12
	memcpy(&updateNewCh,attrInput,sizeof(UpdateNewCh_t));
    aef4:	ac01      	add	r4, sp, #4
    aef6:	2204      	movs	r2, #4
    aef8:	0020      	movs	r0, r4
    aefa:	4b1f      	ldr	r3, [pc, #124]	; (af78 <setNewChannelsT1+0x88>)
    aefc:	4798      	blx	r3
	chMask = updateNewCh.channelMask;
    aefe:	8827      	ldrh	r7, [r4, #0]
	chMaskCtrl = updateNewCh.channelMaskCntl;
    af00:	78a6      	ldrb	r6, [r4, #2]
    af02:	466b      	mov	r3, sp
    af04:	1cd9      	adds	r1, r3, #3
    af06:	700e      	strb	r6, [r1, #0]
	if(ValidateChannelMaskCntl(CHANNEL_MASK_CNTL, &chMaskCtrl) == LORAWAN_SUCCESS)
    af08:	201b      	movs	r0, #27
    af0a:	4b1c      	ldr	r3, [pc, #112]	; (af7c <setNewChannelsT1+0x8c>)
    af0c:	4798      	blx	r3
    af0e:	0005      	movs	r5, r0
    af10:	2808      	cmp	r0, #8
    af12:	d003      	beq.n	af1c <setNewChannelsT1+0x2c>
		retVal = LORAWAN_INVALID_PARAMETER;
    af14:	250a      	movs	r5, #10
}
    af16:	0028      	movs	r0, r5
    af18:	b003      	add	sp, #12
    af1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		switch(chMaskCtrl)
    af1c:	2e06      	cmp	r6, #6
    af1e:	d01c      	beq.n	af5a <setNewChannelsT1+0x6a>
    af20:	d80a      	bhi.n	af38 <setNewChannelsT1+0x48>
    af22:	2e04      	cmp	r6, #4
    af24:	d8f7      	bhi.n	af16 <setNewChannelsT1+0x26>
		channel = chMaskCtrl << SHIFT4;
    af26:	0136      	lsls	r6, r6, #4
    af28:	b2f0      	uxtb	r0, r6
				EnableChannels2(channel, channel + 15, chMask);
    af2a:	0001      	movs	r1, r0
    af2c:	310f      	adds	r1, #15
    af2e:	b2c9      	uxtb	r1, r1
    af30:	003a      	movs	r2, r7
    af32:	4b13      	ldr	r3, [pc, #76]	; (af80 <setNewChannelsT1+0x90>)
    af34:	4798      	blx	r3
				break;
    af36:	e7ee      	b.n	af16 <setNewChannelsT1+0x26>
		switch(chMaskCtrl)
    af38:	2400      	movs	r4, #0
    af3a:	2e07      	cmp	r6, #7
    af3c:	d1eb      	bne.n	af16 <setNewChannelsT1+0x26>
					UpdateChannelIdStatus(i, DISABLED);
    af3e:	4e11      	ldr	r6, [pc, #68]	; (af84 <setNewChannelsT1+0x94>)
    af40:	2100      	movs	r1, #0
    af42:	0020      	movs	r0, r4
    af44:	47b0      	blx	r6
				for(i = 0; i< 63; i++)
    af46:	3401      	adds	r4, #1
    af48:	b2e4      	uxtb	r4, r4
    af4a:	2c3f      	cmp	r4, #63	; 0x3f
    af4c:	d1f8      	bne.n	af40 <setNewChannelsT1+0x50>
				EnableChannels2(64, 71, chMask);
    af4e:	003a      	movs	r2, r7
    af50:	2147      	movs	r1, #71	; 0x47
    af52:	2040      	movs	r0, #64	; 0x40
    af54:	4b0a      	ldr	r3, [pc, #40]	; (af80 <setNewChannelsT1+0x90>)
    af56:	4798      	blx	r3
				break;
    af58:	e7dd      	b.n	af16 <setNewChannelsT1+0x26>
		switch(chMaskCtrl)
    af5a:	2400      	movs	r4, #0
					UpdateChannelIdStatus(i, ENABLED);
    af5c:	4e09      	ldr	r6, [pc, #36]	; (af84 <setNewChannelsT1+0x94>)
    af5e:	2101      	movs	r1, #1
    af60:	0020      	movs	r0, r4
    af62:	47b0      	blx	r6
				for(i = 0; i < 63; i++)
    af64:	3401      	adds	r4, #1
    af66:	b2e4      	uxtb	r4, r4
    af68:	2c3f      	cmp	r4, #63	; 0x3f
    af6a:	d1f8      	bne.n	af5e <setNewChannelsT1+0x6e>
				EnableChannels2(64, 71, chMask);
    af6c:	003a      	movs	r2, r7
    af6e:	2147      	movs	r1, #71	; 0x47
    af70:	2040      	movs	r0, #64	; 0x40
    af72:	4b03      	ldr	r3, [pc, #12]	; (af80 <setNewChannelsT1+0x90>)
    af74:	4798      	blx	r3
			    break;
    af76:	e7ce      	b.n	af16 <setNewChannelsT1+0x26>
    af78:	00019d89 	.word	0x00019d89
    af7c:	00009b41 	.word	0x00009b41
    af80:	0000a251 	.word	0x0000a251
    af84:	0000a1ed 	.word	0x0000a1ed

0000af88 <setDlFrequency>:
{
    af88:	b530      	push	{r4, r5, lr}
    af8a:	b085      	sub	sp, #20
	memcpy(&updateDlFreq,attrInput,sizeof(ValUpdateFreqTx_t));
    af8c:	ac02      	add	r4, sp, #8
    af8e:	2208      	movs	r2, #8
    af90:	0020      	movs	r0, r4
    af92:	4b20      	ldr	r3, [pc, #128]	; (b014 <setDlFrequency+0x8c>)
    af94:	4798      	blx	r3
	Chid.channelIndex = updateDlFreq.channelIndex;
    af96:	ab01      	add	r3, sp, #4
    af98:	7922      	ldrb	r2, [r4, #4]
    af9a:	701a      	strb	r2, [r3, #0]
		Chid.allowedForDefaultChannels = ALL_CHANNELS;
    af9c:	2201      	movs	r2, #1
    af9e:	705a      	strb	r2, [r3, #1]
	if(pValidateAttr[RX_FREQUENCY](RX_FREQUENCY, &updateDlFreq.frequencyNew) != LORAWAN_SUCCESS || ValidateChannelIdT2(CHANNEL_ID, &Chid) != LORAWAN_SUCCESS)
    afa0:	4b1d      	ldr	r3, [pc, #116]	; (b018 <setDlFrequency+0x90>)
    afa2:	685b      	ldr	r3, [r3, #4]
    afa4:	0021      	movs	r1, r4
    afa6:	2001      	movs	r0, #1
    afa8:	4798      	blx	r3
		result = LORAWAN_INVALID_PARAMETER;
    afaa:	240a      	movs	r4, #10
	if(pValidateAttr[RX_FREQUENCY](RX_FREQUENCY, &updateDlFreq.frequencyNew) != LORAWAN_SUCCESS || ValidateChannelIdT2(CHANNEL_ID, &Chid) != LORAWAN_SUCCESS)
    afac:	2808      	cmp	r0, #8
    afae:	d002      	beq.n	afb6 <setDlFrequency+0x2e>
}
    afb0:	0020      	movs	r0, r4
    afb2:	b005      	add	sp, #20
    afb4:	bd30      	pop	{r4, r5, pc}
	if(pValidateAttr[RX_FREQUENCY](RX_FREQUENCY, &updateDlFreq.frequencyNew) != LORAWAN_SUCCESS || ValidateChannelIdT2(CHANNEL_ID, &Chid) != LORAWAN_SUCCESS)
    afb6:	a901      	add	r1, sp, #4
    afb8:	300d      	adds	r0, #13
    afba:	4b18      	ldr	r3, [pc, #96]	; (b01c <setDlFrequency+0x94>)
    afbc:	4798      	blx	r3
    afbe:	0004      	movs	r4, r0
    afc0:	2808      	cmp	r0, #8
    afc2:	d001      	beq.n	afc8 <setDlFrequency+0x40>
		result = LORAWAN_INVALID_PARAMETER;
    afc4:	240a      	movs	r4, #10
    afc6:	e7f3      	b.n	afb0 <setDlFrequency+0x28>
		RegParams.pOtherChParams[updateDlFreq.channelIndex].rx1Frequency = updateDlFreq.frequencyNew;
    afc8:	4a15      	ldr	r2, [pc, #84]	; (b020 <setDlFrequency+0x98>)
    afca:	7a13      	ldrb	r3, [r2, #8]
    afcc:	7a50      	ldrb	r0, [r2, #9]
    afce:	0200      	lsls	r0, r0, #8
    afd0:	4303      	orrs	r3, r0
    afd2:	7a90      	ldrb	r0, [r2, #10]
    afd4:	0400      	lsls	r0, r0, #16
    afd6:	4318      	orrs	r0, r3
    afd8:	7ad3      	ldrb	r3, [r2, #11]
    afda:	061b      	lsls	r3, r3, #24
    afdc:	4318      	orrs	r0, r3
    afde:	a902      	add	r1, sp, #8
    afe0:	790d      	ldrb	r5, [r1, #4]
    afe2:	006b      	lsls	r3, r5, #1
    afe4:	195b      	adds	r3, r3, r5
    afe6:	009b      	lsls	r3, r3, #2
    afe8:	181b      	adds	r3, r3, r0
    afea:	7808      	ldrb	r0, [r1, #0]
    afec:	7118      	strb	r0, [r3, #4]
    afee:	7848      	ldrb	r0, [r1, #1]
    aff0:	7158      	strb	r0, [r3, #5]
    aff2:	7888      	ldrb	r0, [r1, #2]
    aff4:	7198      	strb	r0, [r3, #6]
    aff6:	78c9      	ldrb	r1, [r1, #3]
    aff8:	71d9      	strb	r1, [r3, #7]
		PDS_STORE(RegParams.regParamItems.ch_param_2_item_id);
    affa:	2384      	movs	r3, #132	; 0x84
    affc:	009b      	lsls	r3, r3, #2
    affe:	5cd3      	ldrb	r3, [r2, r3]
    b000:	4908      	ldr	r1, [pc, #32]	; (b024 <setDlFrequency+0x9c>)
    b002:	5c50      	ldrb	r0, [r2, r1]
    b004:	0200      	lsls	r0, r0, #8
    b006:	4318      	orrs	r0, r3
    b008:	b2c1      	uxtb	r1, r0
    b00a:	0a00      	lsrs	r0, r0, #8
    b00c:	4b06      	ldr	r3, [pc, #24]	; (b028 <setDlFrequency+0xa0>)
    b00e:	4798      	blx	r3
    b010:	e7ce      	b.n	afb0 <setDlFrequency+0x28>
    b012:	46c0      	nop			; (mov r8, r8)
    b014:	00019d89 	.word	0x00019d89
    b018:	20000e64 	.word	0x20000e64
    b01c:	00009a39 	.word	0x00009a39
    b020:	200024d0 	.word	0x200024d0
    b024:	00000211 	.word	0x00000211
    b028:	0000e0dd 	.word	0x0000e0dd

0000b02c <setFrequency>:
{
    b02c:	b570      	push	{r4, r5, r6, lr}
    b02e:	b084      	sub	sp, #16
	memcpy(&updateTxFreq,attrInput,sizeof(ValUpdateFreqTx_t));
    b030:	ac02      	add	r4, sp, #8
    b032:	2208      	movs	r2, #8
    b034:	0020      	movs	r0, r4
    b036:	4b3f      	ldr	r3, [pc, #252]	; (b134 <setFrequency+0x108>)
    b038:	4798      	blx	r3
	valChid.channelIndex = updateTxFreq.channelIndex;
    b03a:	ab01      	add	r3, sp, #4
    b03c:	7922      	ldrb	r2, [r4, #4]
    b03e:	701a      	strb	r2, [r3, #0]
	valChid.allowedForDefaultChannels = WITHOUT_DEFAULT_CHANNELS;
    b040:	2200      	movs	r2, #0
    b042:	705a      	strb	r2, [r3, #1]
	if(pValidateAttr[RX_FREQUENCY](RX_FREQUENCY,&updateTxFreq.frequencyNew) != LORAWAN_SUCCESS || ValidateChannelIdT2(CHANNEL_ID, &valChid) != LORAWAN_SUCCESS)
    b044:	4b3c      	ldr	r3, [pc, #240]	; (b138 <setFrequency+0x10c>)
    b046:	685b      	ldr	r3, [r3, #4]
    b048:	0021      	movs	r1, r4
    b04a:	2001      	movs	r0, #1
    b04c:	4798      	blx	r3
		result = LORAWAN_INVALID_PARAMETER;
    b04e:	240a      	movs	r4, #10
	if(pValidateAttr[RX_FREQUENCY](RX_FREQUENCY,&updateTxFreq.frequencyNew) != LORAWAN_SUCCESS || ValidateChannelIdT2(CHANNEL_ID, &valChid) != LORAWAN_SUCCESS)
    b050:	2808      	cmp	r0, #8
    b052:	d002      	beq.n	b05a <setFrequency+0x2e>
}
    b054:	0020      	movs	r0, r4
    b056:	b004      	add	sp, #16
    b058:	bd70      	pop	{r4, r5, r6, pc}
	if(pValidateAttr[RX_FREQUENCY](RX_FREQUENCY,&updateTxFreq.frequencyNew) != LORAWAN_SUCCESS || ValidateChannelIdT2(CHANNEL_ID, &valChid) != LORAWAN_SUCCESS)
    b05a:	a901      	add	r1, sp, #4
    b05c:	300d      	adds	r0, #13
    b05e:	4b37      	ldr	r3, [pc, #220]	; (b13c <setFrequency+0x110>)
    b060:	4798      	blx	r3
    b062:	0004      	movs	r4, r0
    b064:	2808      	cmp	r0, #8
    b066:	d001      	beq.n	b06c <setFrequency+0x40>
		result = LORAWAN_INVALID_PARAMETER;
    b068:	240a      	movs	r4, #10
    b06a:	e7f3      	b.n	b054 <setFrequency+0x28>
		uint8_t chIndx = updateTxFreq.channelIndex;
    b06c:	ab02      	add	r3, sp, #8
    b06e:	791d      	ldrb	r5, [r3, #4]
		if((((1 << RegParams.band) & ((ISM_EUBAND) | (1 << ISM_JPN923))) != 0))
    b070:	232e      	movs	r3, #46	; 0x2e
    b072:	4a33      	ldr	r2, [pc, #204]	; (b140 <setFrequency+0x114>)
    b074:	5cd2      	ldrb	r2, [r2, r3]
    b076:	3b0b      	subs	r3, #11
    b078:	4113      	asrs	r3, r2
    b07a:	07db      	lsls	r3, r3, #31
    b07c:	d445      	bmi.n	b10a <setFrequency+0xde>
		RegParams.pOtherChParams[chIndx].ulfrequency = updateTxFreq.frequencyNew;
    b07e:	006a      	lsls	r2, r5, #1
    b080:	1952      	adds	r2, r2, r5
    b082:	0090      	lsls	r0, r2, #2
    b084:	a902      	add	r1, sp, #8
    b086:	9d02      	ldr	r5, [sp, #8]
    b088:	4b2d      	ldr	r3, [pc, #180]	; (b140 <setFrequency+0x114>)
    b08a:	7a1a      	ldrb	r2, [r3, #8]
    b08c:	7a5e      	ldrb	r6, [r3, #9]
    b08e:	0236      	lsls	r6, r6, #8
    b090:	4316      	orrs	r6, r2
    b092:	7a9a      	ldrb	r2, [r3, #10]
    b094:	0412      	lsls	r2, r2, #16
    b096:	4316      	orrs	r6, r2
    b098:	7ada      	ldrb	r2, [r3, #11]
    b09a:	0612      	lsls	r2, r2, #24
    b09c:	4332      	orrs	r2, r6
    b09e:	5415      	strb	r5, [r2, r0]
    b0a0:	0a2e      	lsrs	r6, r5, #8
    b0a2:	1812      	adds	r2, r2, r0
    b0a4:	7056      	strb	r6, [r2, #1]
    b0a6:	0c2e      	lsrs	r6, r5, #16
    b0a8:	7096      	strb	r6, [r2, #2]
    b0aa:	0e2d      	lsrs	r5, r5, #24
    b0ac:	70d5      	strb	r5, [r2, #3]
		RegParams.pOtherChParams[chIndx].rx1Frequency = updateTxFreq.frequencyNew;
    b0ae:	7a1a      	ldrb	r2, [r3, #8]
    b0b0:	7a5d      	ldrb	r5, [r3, #9]
    b0b2:	022d      	lsls	r5, r5, #8
    b0b4:	4315      	orrs	r5, r2
    b0b6:	7a9a      	ldrb	r2, [r3, #10]
    b0b8:	0412      	lsls	r2, r2, #16
    b0ba:	4315      	orrs	r5, r2
    b0bc:	7ada      	ldrb	r2, [r3, #11]
    b0be:	0612      	lsls	r2, r2, #24
    b0c0:	432a      	orrs	r2, r5
    b0c2:	1812      	adds	r2, r2, r0
    b0c4:	780d      	ldrb	r5, [r1, #0]
    b0c6:	7115      	strb	r5, [r2, #4]
    b0c8:	784d      	ldrb	r5, [r1, #1]
    b0ca:	7155      	strb	r5, [r2, #5]
    b0cc:	788d      	ldrb	r5, [r1, #2]
    b0ce:	7195      	strb	r5, [r2, #6]
    b0d0:	78c9      	ldrb	r1, [r1, #3]
    b0d2:	71d1      	strb	r1, [r2, #7]
		RegParams.pOtherChParams[chIndx].parametersDefined |= FREQUENCY_DEFINED;
    b0d4:	7a1a      	ldrb	r2, [r3, #8]
    b0d6:	7a59      	ldrb	r1, [r3, #9]
    b0d8:	0209      	lsls	r1, r1, #8
    b0da:	4311      	orrs	r1, r2
    b0dc:	7a9a      	ldrb	r2, [r3, #10]
    b0de:	0412      	lsls	r2, r2, #16
    b0e0:	4311      	orrs	r1, r2
    b0e2:	7ada      	ldrb	r2, [r3, #11]
    b0e4:	0612      	lsls	r2, r2, #24
    b0e6:	430a      	orrs	r2, r1
    b0e8:	1812      	adds	r2, r2, r0
    b0ea:	7ad1      	ldrb	r1, [r2, #11]
    b0ec:	2001      	movs	r0, #1
    b0ee:	4301      	orrs	r1, r0
    b0f0:	72d1      	strb	r1, [r2, #11]
		PDS_STORE(RegParams.regParamItems.ch_param_2_item_id);
    b0f2:	2284      	movs	r2, #132	; 0x84
    b0f4:	0092      	lsls	r2, r2, #2
    b0f6:	5c9a      	ldrb	r2, [r3, r2]
    b0f8:	4912      	ldr	r1, [pc, #72]	; (b144 <setFrequency+0x118>)
    b0fa:	5c58      	ldrb	r0, [r3, r1]
    b0fc:	0200      	lsls	r0, r0, #8
    b0fe:	4310      	orrs	r0, r2
    b100:	b2c1      	uxtb	r1, r0
    b102:	0a00      	lsrs	r0, r0, #8
    b104:	4b10      	ldr	r3, [pc, #64]	; (b148 <setFrequency+0x11c>)
    b106:	4798      	blx	r3
    b108:	e7a4      	b.n	b054 <setFrequency+0x28>
		    RegParams.pOtherChParams[chIndx].subBandId = getSubBandId(updateTxFreq.frequencyNew);
    b10a:	4a0d      	ldr	r2, [pc, #52]	; (b140 <setFrequency+0x114>)
    b10c:	7a16      	ldrb	r6, [r2, #8]
    b10e:	7a53      	ldrb	r3, [r2, #9]
    b110:	021b      	lsls	r3, r3, #8
    b112:	4333      	orrs	r3, r6
    b114:	7a96      	ldrb	r6, [r2, #10]
    b116:	0436      	lsls	r6, r6, #16
    b118:	4333      	orrs	r3, r6
    b11a:	7ad6      	ldrb	r6, [r2, #11]
    b11c:	0636      	lsls	r6, r6, #24
    b11e:	431e      	orrs	r6, r3
    b120:	006b      	lsls	r3, r5, #1
    b122:	195b      	adds	r3, r3, r5
    b124:	009b      	lsls	r3, r3, #2
    b126:	18f6      	adds	r6, r6, r3
    b128:	9802      	ldr	r0, [sp, #8]
    b12a:	4b08      	ldr	r3, [pc, #32]	; (b14c <setFrequency+0x120>)
    b12c:	4798      	blx	r3
    b12e:	7230      	strb	r0, [r6, #8]
    b130:	e7a5      	b.n	b07e <setFrequency+0x52>
    b132:	46c0      	nop			; (mov r8, r8)
    b134:	00019d89 	.word	0x00019d89
    b138:	20000e64 	.word	0x20000e64
    b13c:	00009a39 	.word	0x00009a39
    b140:	200024d0 	.word	0x200024d0
    b144:	00000211 	.word	0x00000211
    b148:	0000e0dd 	.word	0x0000e0dd
    b14c:	00009ced 	.word	0x00009ced

0000b150 <setDutyCycle>:
{
    b150:	b570      	push	{r4, r5, r6, lr}
    b152:	b082      	sub	sp, #8
    memcpy(&updateDCycle,attrInput,sizeof(UpdateDutyCycle_t));
    b154:	ac01      	add	r4, sp, #4
    b156:	2204      	movs	r2, #4
    b158:	0020      	movs	r0, r4
    b15a:	4b2d      	ldr	r3, [pc, #180]	; (b210 <setDutyCycle+0xc0>)
    b15c:	4798      	blx	r3
	val_chid.channelIndex = updateDCycle.channelIndex;
    b15e:	78a5      	ldrb	r5, [r4, #2]
    b160:	466b      	mov	r3, sp
    b162:	701d      	strb	r5, [r3, #0]
	val_chid.allowedForDefaultChannels = ALL_CHANNELS;
    b164:	2301      	movs	r3, #1
    b166:	466a      	mov	r2, sp
    b168:	7053      	strb	r3, [r2, #1]
	if(ValidateChannelIdT2(CHANNEL_ID, &val_chid) == LORAWAN_SUCCESS)
    b16a:	4669      	mov	r1, sp
    b16c:	2015      	movs	r0, #21
    b16e:	4b29      	ldr	r3, [pc, #164]	; (b214 <setDutyCycle+0xc4>)
    b170:	4798      	blx	r3
    b172:	0004      	movs	r4, r0
    b174:	2808      	cmp	r0, #8
    b176:	d003      	beq.n	b180 <setDutyCycle+0x30>
		result = LORAWAN_INVALID_PARAMETER;
    b178:	240a      	movs	r4, #10
}
    b17a:	0020      	movs	r0, r4
    b17c:	b002      	add	sp, #8
    b17e:	bd70      	pop	{r4, r5, r6, pc}
		bandId = RegParams.pOtherChParams[updateDCycle.channelIndex].subBandId;
    b180:	0069      	lsls	r1, r5, #1
    b182:	1949      	adds	r1, r1, r5
    b184:	0089      	lsls	r1, r1, #2
    b186:	4b24      	ldr	r3, [pc, #144]	; (b218 <setDutyCycle+0xc8>)
    b188:	7a1a      	ldrb	r2, [r3, #8]
    b18a:	7a58      	ldrb	r0, [r3, #9]
    b18c:	0200      	lsls	r0, r0, #8
    b18e:	4310      	orrs	r0, r2
    b190:	7a9a      	ldrb	r2, [r3, #10]
    b192:	0412      	lsls	r2, r2, #16
    b194:	4310      	orrs	r0, r2
    b196:	7ada      	ldrb	r2, [r3, #11]
    b198:	0612      	lsls	r2, r2, #24
    b19a:	4302      	orrs	r2, r0
    b19c:	1852      	adds	r2, r2, r1
    b19e:	7a15      	ldrb	r5, [r2, #8]
		RegParams.cmnParams.paramsType2.subBandDutyCycle[bandId] = updateDCycle.dutyCycleNew;
    b1a0:	0028      	movs	r0, r5
    b1a2:	30d4      	adds	r0, #212	; 0xd4
    b1a4:	0040      	lsls	r0, r0, #1
    b1a6:	aa01      	add	r2, sp, #4
    b1a8:	1818      	adds	r0, r3, r0
    b1aa:	7816      	ldrb	r6, [r2, #0]
    b1ac:	7146      	strb	r6, [r0, #5]
    b1ae:	7852      	ldrb	r2, [r2, #1]
    b1b0:	7182      	strb	r2, [r0, #6]
		RegParams.pSubBandParams[bandId].subBandTimeout = 0;
    b1b2:	7b18      	ldrb	r0, [r3, #12]
    b1b4:	7b5a      	ldrb	r2, [r3, #13]
    b1b6:	0212      	lsls	r2, r2, #8
    b1b8:	4302      	orrs	r2, r0
    b1ba:	7b98      	ldrb	r0, [r3, #14]
    b1bc:	0400      	lsls	r0, r0, #16
    b1be:	4302      	orrs	r2, r0
    b1c0:	7bd8      	ldrb	r0, [r3, #15]
    b1c2:	0600      	lsls	r0, r0, #24
    b1c4:	4310      	orrs	r0, r2
    b1c6:	006a      	lsls	r2, r5, #1
    b1c8:	1952      	adds	r2, r2, r5
    b1ca:	0092      	lsls	r2, r2, #2
    b1cc:	1812      	adds	r2, r2, r0
    b1ce:	2000      	movs	r0, #0
    b1d0:	7210      	strb	r0, [r2, #8]
    b1d2:	7250      	strb	r0, [r2, #9]
    b1d4:	7290      	strb	r0, [r2, #10]
    b1d6:	72d0      	strb	r0, [r2, #11]
		RegParams.pOtherChParams[updateDCycle.channelIndex].parametersDefined |= DUTY_CYCLE_DEFINED;
    b1d8:	7a1d      	ldrb	r5, [r3, #8]
    b1da:	7a5a      	ldrb	r2, [r3, #9]
    b1dc:	0212      	lsls	r2, r2, #8
    b1de:	432a      	orrs	r2, r5
    b1e0:	7a9d      	ldrb	r5, [r3, #10]
    b1e2:	042d      	lsls	r5, r5, #16
    b1e4:	432a      	orrs	r2, r5
    b1e6:	7add      	ldrb	r5, [r3, #11]
    b1e8:	062d      	lsls	r5, r5, #24
    b1ea:	4315      	orrs	r5, r2
    b1ec:	186d      	adds	r5, r5, r1
    b1ee:	7aea      	ldrb	r2, [r5, #11]
    b1f0:	2104      	movs	r1, #4
    b1f2:	430a      	orrs	r2, r1
    b1f4:	72ea      	strb	r2, [r5, #11]
		PDS_STORE(RegParams.regParamItems.ch_param_2_item_id);
    b1f6:	2284      	movs	r2, #132	; 0x84
    b1f8:	0092      	lsls	r2, r2, #2
    b1fa:	5c9a      	ldrb	r2, [r3, r2]
    b1fc:	4907      	ldr	r1, [pc, #28]	; (b21c <setDutyCycle+0xcc>)
    b1fe:	5c58      	ldrb	r0, [r3, r1]
    b200:	0200      	lsls	r0, r0, #8
    b202:	4310      	orrs	r0, r2
    b204:	b2c1      	uxtb	r1, r0
    b206:	0a00      	lsrs	r0, r0, #8
    b208:	4b05      	ldr	r3, [pc, #20]	; (b220 <setDutyCycle+0xd0>)
    b20a:	4798      	blx	r3
    b20c:	e7b5      	b.n	b17a <setDutyCycle+0x2a>
    b20e:	46c0      	nop			; (mov r8, r8)
    b210:	00019d89 	.word	0x00019d89
    b214:	00009a39 	.word	0x00009a39
    b218:	200024d0 	.word	0x200024d0
    b21c:	00000211 	.word	0x00000211
    b220:	0000e0dd 	.word	0x0000e0dd

0000b224 <SearchAvailableChannel2>:
{
    b224:	b5f0      	push	{r4, r5, r6, r7, lr}
    b226:	46de      	mov	lr, fp
    b228:	4657      	mov	r7, sl
    b22a:	464e      	mov	r6, r9
    b22c:	4645      	mov	r5, r8
    b22e:	b5e0      	push	{r5, r6, r7, lr}
    b230:	b087      	sub	sp, #28
    b232:	af00      	add	r7, sp, #0
    b234:	0004      	movs	r4, r0
    b236:	4688      	mov	r8, r1
    b238:	60f9      	str	r1, [r7, #12]
    b23a:	0015      	movs	r5, r2
    b23c:	607b      	str	r3, [r7, #4]
	uint8_t ChList[maxChannels];
    b23e:	1dc3      	adds	r3, r0, #7
    b240:	08db      	lsrs	r3, r3, #3
    b242:	00db      	lsls	r3, r3, #3
    b244:	466a      	mov	r2, sp
    b246:	1ad3      	subs	r3, r2, r3
    b248:	469d      	mov	sp, r3
    b24a:	613b      	str	r3, [r7, #16]
	memset(ChList, 0, sizeof(ChList));
    b24c:	0002      	movs	r2, r0
    b24e:	2100      	movs	r1, #0
    b250:	4668      	mov	r0, sp
    b252:	4b5c      	ldr	r3, [pc, #368]	; (b3c4 <SearchAvailableChannel2+0x1a0>)
    b254:	4798      	blx	r3
	bool bandWithoutDutyCycle = (((1 << RegParams.band) & (ISM_EUBAND | ISM_ASBAND | (1 << ISM_JPN923))) == 0);
    b256:	232e      	movs	r3, #46	; 0x2e
    b258:	4a5b      	ldr	r2, [pc, #364]	; (b3c8 <SearchAvailableChannel2+0x1a4>)
    b25a:	5cd6      	ldrb	r6, [r2, r3]
    if(transmissionType == false)
    b25c:	4643      	mov	r3, r8
    b25e:	2b00      	cmp	r3, #0
    b260:	d148      	bne.n	b2f4 <SearchAvailableChannel2+0xd0>
	    if(RegParams.FeaturesSupport & JOIN_BACKOFF_SUPPORT)
    b262:	3320      	adds	r3, #32
    b264:	5cd3      	ldrb	r3, [r2, r3]
    b266:	069b      	lsls	r3, r3, #26
    b268:	d431      	bmi.n	b2ce <SearchAvailableChannel2+0xaa>
		result = LORAWAN_NO_CHANNELS_FOUND;
    b26a:	2010      	movs	r0, #16
	for (i = 0; i < maxChannels; i++)
    b26c:	2c00      	cmp	r4, #0
    b26e:	d100      	bne.n	b272 <SearchAvailableChannel2+0x4e>
    b270:	e093      	b.n	b39a <SearchAvailableChannel2+0x176>
	bool bandWithoutDutyCycle = (((1 << RegParams.band) & (ISM_EUBAND | ISM_ASBAND | (1 << ISM_JPN923))) == 0);
    b272:	4b56      	ldr	r3, [pc, #344]	; (b3cc <SearchAvailableChannel2+0x1a8>)
    b274:	4133      	asrs	r3, r6
    b276:	2201      	movs	r2, #1
    b278:	401a      	ands	r2, r3
    b27a:	4690      	mov	r8, r2
				(bandWithoutDutyCycle || RegParams.pSubBandParams[RegParams.pOtherChParams[i].subBandId].subBandTimeout == 0))
    b27c:	4b52      	ldr	r3, [pc, #328]	; (b3c8 <SearchAvailableChannel2+0x1a4>)
    b27e:	7b19      	ldrb	r1, [r3, #12]
    b280:	7b5a      	ldrb	r2, [r3, #13]
    b282:	0212      	lsls	r2, r2, #8
    b284:	4311      	orrs	r1, r2
    b286:	7b9a      	ldrb	r2, [r3, #14]
    b288:	0412      	lsls	r2, r2, #16
    b28a:	430a      	orrs	r2, r1
    b28c:	7bd9      	ldrb	r1, [r3, #15]
    b28e:	0609      	lsls	r1, r1, #24
    b290:	4311      	orrs	r1, r2
    b292:	468c      	mov	ip, r1
    b294:	7a18      	ldrb	r0, [r3, #8]
    b296:	7a5a      	ldrb	r2, [r3, #9]
    b298:	0212      	lsls	r2, r2, #8
    b29a:	4302      	orrs	r2, r0
    b29c:	7a98      	ldrb	r0, [r3, #10]
    b29e:	0400      	lsls	r0, r0, #16
    b2a0:	4302      	orrs	r2, r0
    b2a2:	7ad8      	ldrb	r0, [r3, #11]
    b2a4:	0600      	lsls	r0, r0, #24
    b2a6:	4310      	orrs	r0, r2
			if ((RegParams.pChParams[i].status == ENABLED) &&
    b2a8:	791a      	ldrb	r2, [r3, #4]
    b2aa:	7959      	ldrb	r1, [r3, #5]
    b2ac:	0209      	lsls	r1, r1, #8
    b2ae:	4311      	orrs	r1, r2
    b2b0:	799a      	ldrb	r2, [r3, #6]
    b2b2:	0412      	lsls	r2, r2, #16
    b2b4:	4311      	orrs	r1, r2
    b2b6:	79da      	ldrb	r2, [r3, #7]
    b2b8:	0612      	lsls	r2, r2, #24
    b2ba:	430a      	orrs	r2, r1
    b2bc:	0006      	movs	r6, r0
    b2be:	3608      	adds	r6, #8
    b2c0:	3009      	adds	r0, #9
				(bandWithoutDutyCycle || RegParams.pSubBandParams[RegParams.pOtherChParams[i].subBandId].subBandTimeout == 0))
    b2c2:	2300      	movs	r3, #0
    b2c4:	617b      	str	r3, [r7, #20]
				(currDr >= RegParams.pChParams[i].dataRange.min) &&
    b2c6:	46aa      	mov	sl, r5
    b2c8:	46a9      	mov	r9, r5
    b2ca:	0025      	movs	r5, r4
    b2cc:	e036      	b.n	b33c <SearchAvailableChannel2+0x118>
		    if(SwTimerIsRunning(RegParams.pJoinDutyCycleTimer->timerId)) //check timerrunning
    b2ce:	0011      	movs	r1, r2
    b2d0:	7d13      	ldrb	r3, [r2, #20]
    b2d2:	7d52      	ldrb	r2, [r2, #21]
    b2d4:	0212      	lsls	r2, r2, #8
    b2d6:	431a      	orrs	r2, r3
    b2d8:	7d8b      	ldrb	r3, [r1, #22]
    b2da:	041b      	lsls	r3, r3, #16
    b2dc:	431a      	orrs	r2, r3
    b2de:	7dcb      	ldrb	r3, [r1, #23]
    b2e0:	061b      	lsls	r3, r3, #24
    b2e2:	4313      	orrs	r3, r2
    b2e4:	7a18      	ldrb	r0, [r3, #8]
    b2e6:	4b3a      	ldr	r3, [pc, #232]	; (b3d0 <SearchAvailableChannel2+0x1ac>)
    b2e8:	4798      	blx	r3
    b2ea:	0003      	movs	r3, r0
			    return LORAWAN_NO_CHANNELS_FOUND;
    b2ec:	2010      	movs	r0, #16
		    if(SwTimerIsRunning(RegParams.pJoinDutyCycleTimer->timerId)) //check timerrunning
    b2ee:	2b00      	cmp	r3, #0
    b2f0:	d0bb      	beq.n	b26a <SearchAvailableChannel2+0x46>
    b2f2:	e052      	b.n	b39a <SearchAvailableChannel2+0x176>
	    if(RegParams.cmnParams.paramsType2.aggregatedDutyCycleTimeout)
    b2f4:	4934      	ldr	r1, [pc, #208]	; (b3c8 <SearchAvailableChannel2+0x1a4>)
    b2f6:	23ba      	movs	r3, #186	; 0xba
    b2f8:	33ff      	adds	r3, #255	; 0xff
    b2fa:	5ccb      	ldrb	r3, [r1, r3]
    b2fc:	22dd      	movs	r2, #221	; 0xdd
    b2fe:	0052      	lsls	r2, r2, #1
    b300:	5c8a      	ldrb	r2, [r1, r2]
    b302:	0212      	lsls	r2, r2, #8
    b304:	431a      	orrs	r2, r3
    b306:	23bc      	movs	r3, #188	; 0xbc
    b308:	33ff      	adds	r3, #255	; 0xff
    b30a:	5ccb      	ldrb	r3, [r1, r3]
    b30c:	041b      	lsls	r3, r3, #16
    b30e:	431a      	orrs	r2, r3
    b310:	23de      	movs	r3, #222	; 0xde
    b312:	005b      	lsls	r3, r3, #1
    b314:	5ccb      	ldrb	r3, [r1, r3]
    b316:	061b      	lsls	r3, r3, #24
    b318:	4313      	orrs	r3, r2
		    return LORAWAN_NO_CHANNELS_FOUND;
    b31a:	2010      	movs	r0, #16
	    if(RegParams.cmnParams.paramsType2.aggregatedDutyCycleTimeout)
    b31c:	2b00      	cmp	r3, #0
    b31e:	d0a4      	beq.n	b26a <SearchAvailableChannel2+0x46>
    b320:	e03b      	b.n	b39a <SearchAvailableChannel2+0x176>
					ChList[num] = i;
    b322:	693c      	ldr	r4, [r7, #16]
    b324:	6979      	ldr	r1, [r7, #20]
    b326:	5463      	strb	r3, [r4, r1]
					num++;
    b328:	3101      	adds	r1, #1
    b32a:	b2c9      	uxtb	r1, r1
    b32c:	6179      	str	r1, [r7, #20]
	for (i = 0; i < maxChannels; i++)
    b32e:	3301      	adds	r3, #1
    b330:	b2db      	uxtb	r3, r3
    b332:	3202      	adds	r2, #2
    b334:	360c      	adds	r6, #12
    b336:	300c      	adds	r0, #12
    b338:	429d      	cmp	r5, r3
    b33a:	d02a      	beq.n	b392 <SearchAvailableChannel2+0x16e>
			if ((RegParams.pChParams[i].status == ENABLED) &&
    b33c:	7811      	ldrb	r1, [r2, #0]
    b33e:	2900      	cmp	r1, #0
    b340:	d0f5      	beq.n	b32e <SearchAvailableChannel2+0x10a>
				(currDr >= RegParams.pChParams[i].dataRange.min) &&
    b342:	7851      	ldrb	r1, [r2, #1]
    b344:	0709      	lsls	r1, r1, #28
    b346:	0f09      	lsrs	r1, r1, #28
			if ((RegParams.pChParams[i].status == ENABLED) &&
    b348:	4589      	cmp	r9, r1
    b34a:	dbf0      	blt.n	b32e <SearchAvailableChannel2+0x10a>
				(currDr <= RegParams.pChParams[i].dataRange.max)&&
    b34c:	7851      	ldrb	r1, [r2, #1]
    b34e:	0909      	lsrs	r1, r1, #4
				(currDr >= RegParams.pChParams[i].dataRange.min) &&
    b350:	458a      	cmp	sl, r1
    b352:	dcec      	bgt.n	b32e <SearchAvailableChannel2+0x10a>
				(currDr <= RegParams.pChParams[i].dataRange.max)&&
    b354:	4641      	mov	r1, r8
    b356:	2900      	cmp	r1, #0
    b358:	d014      	beq.n	b384 <SearchAvailableChannel2+0x160>
				(bandWithoutDutyCycle || RegParams.pSubBandParams[RegParams.pOtherChParams[i].subBandId].subBandTimeout == 0))
    b35a:	7834      	ldrb	r4, [r6, #0]
    b35c:	0061      	lsls	r1, r4, #1
    b35e:	1909      	adds	r1, r1, r4
    b360:	0089      	lsls	r1, r1, #2
    b362:	4461      	add	r1, ip
    b364:	7a0c      	ldrb	r4, [r1, #8]
    b366:	46a3      	mov	fp, r4
    b368:	60b9      	str	r1, [r7, #8]
    b36a:	7a4c      	ldrb	r4, [r1, #9]
    b36c:	0224      	lsls	r4, r4, #8
    b36e:	4659      	mov	r1, fp
    b370:	430c      	orrs	r4, r1
    b372:	68b9      	ldr	r1, [r7, #8]
    b374:	7a89      	ldrb	r1, [r1, #10]
    b376:	0409      	lsls	r1, r1, #16
    b378:	430c      	orrs	r4, r1
    b37a:	68b9      	ldr	r1, [r7, #8]
    b37c:	7ac9      	ldrb	r1, [r1, #11]
    b37e:	0609      	lsls	r1, r1, #24
    b380:	4321      	orrs	r1, r4
    b382:	d1d4      	bne.n	b32e <SearchAvailableChannel2+0x10a>
				if(((transmissionType == 0)  && (RegParams.pOtherChParams[i].joinRequestChannel == 1)) || (transmissionType != 0)) 
    b384:	68f9      	ldr	r1, [r7, #12]
    b386:	2900      	cmp	r1, #0
    b388:	d1cb      	bne.n	b322 <SearchAvailableChannel2+0xfe>
    b38a:	7801      	ldrb	r1, [r0, #0]
    b38c:	2900      	cmp	r1, #0
    b38e:	d0ce      	beq.n	b32e <SearchAvailableChannel2+0x10a>
    b390:	e7c7      	b.n	b322 <SearchAvailableChannel2+0xfe>
		result = LORAWAN_NO_CHANNELS_FOUND;
    b392:	2010      	movs	r0, #16
	if(0 != num)
    b394:	697c      	ldr	r4, [r7, #20]
    b396:	2c00      	cmp	r4, #0
    b398:	d107      	bne.n	b3aa <SearchAvailableChannel2+0x186>
}
    b39a:	46bd      	mov	sp, r7
    b39c:	b007      	add	sp, #28
    b39e:	bc3c      	pop	{r2, r3, r4, r5}
    b3a0:	4690      	mov	r8, r2
    b3a2:	4699      	mov	r9, r3
    b3a4:	46a2      	mov	sl, r4
    b3a6:	46ab      	mov	fp, r5
    b3a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		randomNumber = rand() % num;
    b3aa:	4b0a      	ldr	r3, [pc, #40]	; (b3d4 <SearchAvailableChannel2+0x1b0>)
    b3ac:	4798      	blx	r3
    b3ae:	0021      	movs	r1, r4
    b3b0:	4b09      	ldr	r3, [pc, #36]	; (b3d8 <SearchAvailableChannel2+0x1b4>)
    b3b2:	4798      	blx	r3
		*channelIndex = ChList[randomNumber];
    b3b4:	23ff      	movs	r3, #255	; 0xff
    b3b6:	4019      	ands	r1, r3
    b3b8:	693b      	ldr	r3, [r7, #16]
    b3ba:	5c5b      	ldrb	r3, [r3, r1]
    b3bc:	687a      	ldr	r2, [r7, #4]
    b3be:	7013      	strb	r3, [r2, #0]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    b3c0:	2008      	movs	r0, #8
    b3c2:	e7ea      	b.n	b39a <SearchAvailableChannel2+0x176>
    b3c4:	00019ead 	.word	0x00019ead
    b3c8:	200024d0 	.word	0x200024d0
    b3cc:	00007fe3 	.word	0x00007fe3
    b3d0:	0000efa5 	.word	0x0000efa5
    b3d4:	0001a04d 	.word	0x0001a04d
    b3d8:	00016905 	.word	0x00016905

0000b3dc <LORAREG_GetAttr_FreeChannel2>:
{
    b3dc:	b570      	push	{r4, r5, r6, lr}
	memcpy(&newFreeChannelReq,(NewFreeChannelReq_t *)attrInput,sizeof(NewFreeChannelReq_t));
    b3de:	784c      	ldrb	r4, [r1, #1]
	if(newFreeChannelReq.maxChannels > RegParams.maxChannels)
    b3e0:	202a      	movs	r0, #42	; 0x2a
    b3e2:	4d07      	ldr	r5, [pc, #28]	; (b400 <LORAREG_GetAttr_FreeChannel2+0x24>)
    b3e4:	562d      	ldrsb	r5, [r5, r0]
		return LORAWAN_INVALID_PARAMETER;
    b3e6:	3820      	subs	r0, #32
	if(newFreeChannelReq.maxChannels > RegParams.maxChannels)
    b3e8:	42ac      	cmp	r4, r5
    b3ea:	dd00      	ble.n	b3ee <LORAREG_GetAttr_FreeChannel2+0x12>
}
    b3ec:	bd70      	pop	{r4, r5, r6, pc}
		result = SearchAvailableChannel2(newFreeChannelReq.maxChannels,newFreeChannelReq.transmissionType,newFreeChannelReq.currDr,(uint8_t*)attrOutput);
    b3ee:	7888      	ldrb	r0, [r1, #2]
    b3f0:	7809      	ldrb	r1, [r1, #0]
    b3f2:	0013      	movs	r3, r2
    b3f4:	0002      	movs	r2, r0
    b3f6:	0020      	movs	r0, r4
    b3f8:	4c02      	ldr	r4, [pc, #8]	; (b404 <LORAREG_GetAttr_FreeChannel2+0x28>)
    b3fa:	47a0      	blx	r4
	return result;
    b3fc:	e7f6      	b.n	b3ec <LORAREG_GetAttr_FreeChannel2+0x10>
    b3fe:	46c0      	nop			; (mov r8, r8)
    b400:	200024d0 	.word	0x200024d0
    b404:	0000b225 	.word	0x0000b225

0000b408 <setJoinBackoffCntl>:
{   
    b408:	b500      	push	{lr}
    b40a:	b083      	sub	sp, #12
	memcpy(&joinbackoffcntl,attrInput,sizeof(bool));
    b40c:	780b      	ldrb	r3, [r1, #0]
    b40e:	466a      	mov	r2, sp
    b410:	71d3      	strb	r3, [r2, #7]
	if(joinbackoffcntl == false)
    b412:	2b00      	cmp	r3, #0
    b414:	d145      	bne.n	b4a2 <setJoinBackoffCntl+0x9a>
		if(RegParams.FeaturesSupport & JOIN_BACKOFF_SUPPORT)
    b416:	3320      	adds	r3, #32
    b418:	4a26      	ldr	r2, [pc, #152]	; (b4b4 <setJoinBackoffCntl+0xac>)
    b41a:	5cd3      	ldrb	r3, [r2, r3]
    b41c:	069a      	lsls	r2, r3, #26
    b41e:	d546      	bpl.n	b4ae <setJoinBackoffCntl+0xa6>
			RegParams.FeaturesSupport &= ~JOIN_BACKOFF_SUPPORT;
    b420:	4924      	ldr	r1, [pc, #144]	; (b4b4 <setJoinBackoffCntl+0xac>)
    b422:	2220      	movs	r2, #32
    b424:	4393      	bics	r3, r2
    b426:	548b      	strb	r3, [r1, r2]
			if (SwTimerIsRunning(RegParams.pJoinBackoffTimer->timerId))
    b428:	7e0b      	ldrb	r3, [r1, #24]
    b42a:	7e4a      	ldrb	r2, [r1, #25]
    b42c:	0212      	lsls	r2, r2, #8
    b42e:	431a      	orrs	r2, r3
    b430:	7e8b      	ldrb	r3, [r1, #26]
    b432:	041b      	lsls	r3, r3, #16
    b434:	431a      	orrs	r2, r3
    b436:	7ecb      	ldrb	r3, [r1, #27]
    b438:	061b      	lsls	r3, r3, #24
    b43a:	4313      	orrs	r3, r2
    b43c:	7818      	ldrb	r0, [r3, #0]
    b43e:	4b1e      	ldr	r3, [pc, #120]	; (b4b8 <setJoinBackoffCntl+0xb0>)
    b440:	4798      	blx	r3
    b442:	2800      	cmp	r0, #0
    b444:	d11e      	bne.n	b484 <setJoinBackoffCntl+0x7c>
			if (SwTimerIsRunning(RegParams.pJoinDutyCycleTimer->timerId))
    b446:	491b      	ldr	r1, [pc, #108]	; (b4b4 <setJoinBackoffCntl+0xac>)
    b448:	7d0b      	ldrb	r3, [r1, #20]
    b44a:	7d4a      	ldrb	r2, [r1, #21]
    b44c:	0212      	lsls	r2, r2, #8
    b44e:	431a      	orrs	r2, r3
    b450:	7d8b      	ldrb	r3, [r1, #22]
    b452:	041b      	lsls	r3, r3, #16
    b454:	431a      	orrs	r2, r3
    b456:	7dcb      	ldrb	r3, [r1, #23]
    b458:	061b      	lsls	r3, r3, #24
    b45a:	4313      	orrs	r3, r2
    b45c:	7a18      	ldrb	r0, [r3, #8]
    b45e:	4b16      	ldr	r3, [pc, #88]	; (b4b8 <setJoinBackoffCntl+0xb0>)
    b460:	4798      	blx	r3
    b462:	2800      	cmp	r0, #0
    b464:	d023      	beq.n	b4ae <setJoinBackoffCntl+0xa6>
				SwTimerStop(RegParams.pJoinDutyCycleTimer->timerId);
    b466:	4913      	ldr	r1, [pc, #76]	; (b4b4 <setJoinBackoffCntl+0xac>)
    b468:	7d0b      	ldrb	r3, [r1, #20]
    b46a:	7d4a      	ldrb	r2, [r1, #21]
    b46c:	0212      	lsls	r2, r2, #8
    b46e:	431a      	orrs	r2, r3
    b470:	7d8b      	ldrb	r3, [r1, #22]
    b472:	041b      	lsls	r3, r3, #16
    b474:	431a      	orrs	r2, r3
    b476:	7dcb      	ldrb	r3, [r1, #23]
    b478:	061b      	lsls	r3, r3, #24
    b47a:	4313      	orrs	r3, r2
    b47c:	7a18      	ldrb	r0, [r3, #8]
    b47e:	4b0f      	ldr	r3, [pc, #60]	; (b4bc <setJoinBackoffCntl+0xb4>)
    b480:	4798      	blx	r3
    b482:	e014      	b.n	b4ae <setJoinBackoffCntl+0xa6>
				SwTimerStop(RegParams.pJoinBackoffTimer->timerId);
    b484:	490b      	ldr	r1, [pc, #44]	; (b4b4 <setJoinBackoffCntl+0xac>)
    b486:	7e0b      	ldrb	r3, [r1, #24]
    b488:	7e4a      	ldrb	r2, [r1, #25]
    b48a:	0212      	lsls	r2, r2, #8
    b48c:	431a      	orrs	r2, r3
    b48e:	7e8b      	ldrb	r3, [r1, #26]
    b490:	041b      	lsls	r3, r3, #16
    b492:	431a      	orrs	r2, r3
    b494:	7ecb      	ldrb	r3, [r1, #27]
    b496:	061b      	lsls	r3, r3, #24
    b498:	4313      	orrs	r3, r2
    b49a:	7818      	ldrb	r0, [r3, #0]
    b49c:	4b07      	ldr	r3, [pc, #28]	; (b4bc <setJoinBackoffCntl+0xb4>)
    b49e:	4798      	blx	r3
    b4a0:	e7d1      	b.n	b446 <setJoinBackoffCntl+0x3e>
		RegParams.FeaturesSupport |= JOIN_BACKOFF_SUPPORT;
    b4a2:	4904      	ldr	r1, [pc, #16]	; (b4b4 <setJoinBackoffCntl+0xac>)
    b4a4:	2220      	movs	r2, #32
    b4a6:	5c8b      	ldrb	r3, [r1, r2]
    b4a8:	2020      	movs	r0, #32
    b4aa:	4303      	orrs	r3, r0
    b4ac:	548b      	strb	r3, [r1, r2]
}
    b4ae:	2008      	movs	r0, #8
    b4b0:	b003      	add	sp, #12
    b4b2:	bd00      	pop	{pc}
    b4b4:	200024d0 	.word	0x200024d0
    b4b8:	0000efa5 	.word	0x0000efa5
    b4bc:	0000f125 	.word	0x0000f125

0000b4c0 <setJoinBackOffTimer>:
{
    b4c0:	b510      	push	{r4, lr}
    b4c2:	b084      	sub	sp, #16
	memcpy(&startJoinBackOffTimer,attrInput,sizeof(bool));
    b4c4:	780b      	ldrb	r3, [r1, #0]
    b4c6:	220f      	movs	r2, #15
    b4c8:	446a      	add	r2, sp
    b4ca:	7013      	strb	r3, [r2, #0]
	if(startJoinBackOffTimer == true)
    b4cc:	2b00      	cmp	r3, #0
    b4ce:	d113      	bne.n	b4f8 <setJoinBackOffTimer+0x38>
		SwTimerStop(RegParams.pJoinBackoffTimer->timerId);
    b4d0:	4c13      	ldr	r4, [pc, #76]	; (b520 <setJoinBackOffTimer+0x60>)
    b4d2:	7e23      	ldrb	r3, [r4, #24]
    b4d4:	7e62      	ldrb	r2, [r4, #25]
    b4d6:	0212      	lsls	r2, r2, #8
    b4d8:	431a      	orrs	r2, r3
    b4da:	7ea3      	ldrb	r3, [r4, #26]
    b4dc:	041b      	lsls	r3, r3, #16
    b4de:	431a      	orrs	r2, r3
    b4e0:	7ee3      	ldrb	r3, [r4, #27]
    b4e2:	061b      	lsls	r3, r3, #24
    b4e4:	4313      	orrs	r3, r2
    b4e6:	7818      	ldrb	r0, [r3, #0]
    b4e8:	4b0e      	ldr	r3, [pc, #56]	; (b524 <setJoinBackOffTimer+0x64>)
    b4ea:	4798      	blx	r3
		RegParams.joinbccount = 0;
    b4ec:	2200      	movs	r2, #0
    b4ee:	2342      	movs	r3, #66	; 0x42
    b4f0:	54e2      	strb	r2, [r4, r3]
}
    b4f2:	2008      	movs	r0, #8
    b4f4:	b004      	add	sp, #16
    b4f6:	bd10      	pop	{r4, pc}
		SwTimerStart (RegParams.pJoinBackoffTimer->timerId, MS_TO_US(BACKOFF_BASE_TIME_IN_MS), SW_TIMEOUT_RELATIVE, (void *)JoinBackoffCallback, NULL);
    b4f8:	4909      	ldr	r1, [pc, #36]	; (b520 <setJoinBackOffTimer+0x60>)
    b4fa:	7e0b      	ldrb	r3, [r1, #24]
    b4fc:	7e4a      	ldrb	r2, [r1, #25]
    b4fe:	0212      	lsls	r2, r2, #8
    b500:	431a      	orrs	r2, r3
    b502:	7e8b      	ldrb	r3, [r1, #26]
    b504:	041b      	lsls	r3, r3, #16
    b506:	431a      	orrs	r2, r3
    b508:	7ecb      	ldrb	r3, [r1, #27]
    b50a:	061b      	lsls	r3, r3, #24
    b50c:	4313      	orrs	r3, r2
    b50e:	7818      	ldrb	r0, [r3, #0]
    b510:	2300      	movs	r3, #0
    b512:	9300      	str	r3, [sp, #0]
    b514:	4b04      	ldr	r3, [pc, #16]	; (b528 <setJoinBackOffTimer+0x68>)
    b516:	2200      	movs	r2, #0
    b518:	4904      	ldr	r1, [pc, #16]	; (b52c <setJoinBackOffTimer+0x6c>)
    b51a:	4c05      	ldr	r4, [pc, #20]	; (b530 <setJoinBackOffTimer+0x70>)
    b51c:	47a0      	blx	r4
    b51e:	e7e8      	b.n	b4f2 <setJoinBackOffTimer+0x32>
    b520:	200024d0 	.word	0x200024d0
    b524:	0000f125 	.word	0x0000f125
    b528:	0000c141 	.word	0x0000c141
    b52c:	6b49d200 	.word	0x6b49d200
    b530:	0000ee0d 	.word	0x0000ee0d

0000b534 <setJoinDutyCycleTimer>:
{
    b534:	b530      	push	{r4, r5, lr}
    b536:	b085      	sub	sp, #20
	memcpy(&UpdateJoinDutyCycleTimer,attrInput,sizeof(UpdateJoinDutyCycleTimer_t));
    b538:	ac02      	add	r4, sp, #8
    b53a:	2208      	movs	r2, #8
    b53c:	0020      	movs	r0, r4
    b53e:	4b93      	ldr	r3, [pc, #588]	; (b78c <setJoinDutyCycleTimer+0x258>)
    b540:	4798      	blx	r3
	if(UpdateJoinDutyCycleTimer.startJoinDutyCycleTimer == true)
    b542:	7923      	ldrb	r3, [r4, #4]
    b544:	2b00      	cmp	r3, #0
    b546:	d100      	bne.n	b54a <setJoinDutyCycleTimer+0x16>
    b548:	e0f8      	b.n	b73c <setJoinDutyCycleTimer+0x208>
			if(RegParams.joinbccount < AGGREGATEDTIME_1HR)
    b54a:	2342      	movs	r3, #66	; 0x42
    b54c:	4a90      	ldr	r2, [pc, #576]	; (b790 <setJoinDutyCycleTimer+0x25c>)
    b54e:	5cd3      	ldrb	r3, [r2, r3]
    b550:	2b01      	cmp	r3, #1
    b552:	d800      	bhi.n	b556 <setJoinDutyCycleTimer+0x22>
    b554:	e081      	b.n	b65a <setJoinDutyCycleTimer+0x126>
			else if (RegParams.joinbccount < AGGREGATEDTIME_10HR)
    b556:	2b13      	cmp	r3, #19
    b558:	d900      	bls.n	b55c <setJoinDutyCycleTimer+0x28>
    b55a:	e08d      	b.n	b678 <setJoinDutyCycleTimer+0x144>
				RegParams.joinDutyCycleTimeout = (uint32_t)UpdateJoinDutyCycleTimer.joinreqTimeonAir * (JOIN_BACKOFF_PRESCALAR_10HR - 1);
    b55c:	4b8d      	ldr	r3, [pc, #564]	; (b794 <setJoinDutyCycleTimer+0x260>)
    b55e:	9a02      	ldr	r2, [sp, #8]
    b560:	4353      	muls	r3, r2
    b562:	4a8b      	ldr	r2, [pc, #556]	; (b790 <setJoinDutyCycleTimer+0x25c>)
    b564:	323e      	adds	r2, #62	; 0x3e
    b566:	7013      	strb	r3, [r2, #0]
    b568:	0a19      	lsrs	r1, r3, #8
    b56a:	7051      	strb	r1, [r2, #1]
    b56c:	0c19      	lsrs	r1, r3, #16
    b56e:	7091      	strb	r1, [r2, #2]
    b570:	0e1b      	lsrs	r3, r3, #24
    b572:	70d3      	strb	r3, [r2, #3]
		if(SwTimerIsRunning(RegParams.pJoinDutyCycleTimer->timerId))
    b574:	4986      	ldr	r1, [pc, #536]	; (b790 <setJoinDutyCycleTimer+0x25c>)
    b576:	7d0b      	ldrb	r3, [r1, #20]
    b578:	7d4a      	ldrb	r2, [r1, #21]
    b57a:	0212      	lsls	r2, r2, #8
    b57c:	431a      	orrs	r2, r3
    b57e:	7d8b      	ldrb	r3, [r1, #22]
    b580:	041b      	lsls	r3, r3, #16
    b582:	431a      	orrs	r2, r3
    b584:	7dcb      	ldrb	r3, [r1, #23]
    b586:	061b      	lsls	r3, r3, #24
    b588:	4313      	orrs	r3, r2
    b58a:	7a18      	ldrb	r0, [r3, #8]
    b58c:	4b82      	ldr	r3, [pc, #520]	; (b798 <setJoinDutyCycleTimer+0x264>)
    b58e:	4798      	blx	r3
	uint32_t delta = 0,ticks;
    b590:	2400      	movs	r4, #0
		if(SwTimerIsRunning(RegParams.pJoinDutyCycleTimer->timerId))
    b592:	2800      	cmp	r0, #0
    b594:	d17d      	bne.n	b692 <setJoinDutyCycleTimer+0x15e>
		if(RegParams.joinDutyCycleTimeout != 0)
    b596:	4b7e      	ldr	r3, [pc, #504]	; (b790 <setJoinDutyCycleTimer+0x25c>)
    b598:	213e      	movs	r1, #62	; 0x3e
    b59a:	5c59      	ldrb	r1, [r3, r1]
    b59c:	203f      	movs	r0, #63	; 0x3f
    b59e:	5c18      	ldrb	r0, [r3, r0]
    b5a0:	0200      	lsls	r0, r0, #8
    b5a2:	4308      	orrs	r0, r1
    b5a4:	2140      	movs	r1, #64	; 0x40
    b5a6:	5c59      	ldrb	r1, [r3, r1]
    b5a8:	0409      	lsls	r1, r1, #16
    b5aa:	4308      	orrs	r0, r1
    b5ac:	2141      	movs	r1, #65	; 0x41
    b5ae:	5c59      	ldrb	r1, [r3, r1]
    b5b0:	0609      	lsls	r1, r1, #24
    b5b2:	4301      	orrs	r1, r0
    b5b4:	d100      	bne.n	b5b8 <setJoinDutyCycleTimer+0x84>
    b5b6:	e0e5      	b.n	b784 <setJoinDutyCycleTimer+0x250>
			if(RegParams.joinDutyCycleTimeout > delta)
    b5b8:	428c      	cmp	r4, r1
    b5ba:	d300      	bcc.n	b5be <setJoinDutyCycleTimer+0x8a>
    b5bc:	e0b6      	b.n	b72c <setJoinDutyCycleTimer+0x1f8>
				RegParams.joinDutyCycleTimeout = RegParams.joinDutyCycleTimeout - delta;
    b5be:	1b09      	subs	r1, r1, r4
    b5c0:	333e      	adds	r3, #62	; 0x3e
    b5c2:	7019      	strb	r1, [r3, #0]
    b5c4:	0a0a      	lsrs	r2, r1, #8
    b5c6:	705a      	strb	r2, [r3, #1]
    b5c8:	0c0a      	lsrs	r2, r1, #16
    b5ca:	709a      	strb	r2, [r3, #2]
    b5cc:	0e0a      	lsrs	r2, r1, #24
    b5ce:	70da      	strb	r2, [r3, #3]
				if(RegParams.joinDutyCycleTimeout > US_TO_MS(SWTIMER_MAX_TIMEOUT))
    b5d0:	4b72      	ldr	r3, [pc, #456]	; (b79c <setJoinDutyCycleTimer+0x268>)
    b5d2:	4299      	cmp	r1, r3
    b5d4:	d800      	bhi.n	b5d8 <setJoinDutyCycleTimer+0xa4>
    b5d6:	e093      	b.n	b700 <setJoinDutyCycleTimer+0x1cc>
					RegParams.pJoinDutyCycleTimer->remainingtime =RegParams.joinDutyCycleTimeout - (US_TO_MS(SWTIMER_MAX_TIMEOUT)) ;
    b5d8:	4c6d      	ldr	r4, [pc, #436]	; (b790 <setJoinDutyCycleTimer+0x25c>)
    b5da:	7d23      	ldrb	r3, [r4, #20]
    b5dc:	7d62      	ldrb	r2, [r4, #21]
    b5de:	0212      	lsls	r2, r2, #8
    b5e0:	431a      	orrs	r2, r3
    b5e2:	7da3      	ldrb	r3, [r4, #22]
    b5e4:	041b      	lsls	r3, r3, #16
    b5e6:	431a      	orrs	r2, r3
    b5e8:	7de3      	ldrb	r3, [r4, #23]
    b5ea:	061b      	lsls	r3, r3, #24
    b5ec:	4313      	orrs	r3, r2
    b5ee:	4a6c      	ldr	r2, [pc, #432]	; (b7a0 <setJoinDutyCycleTimer+0x26c>)
    b5f0:	4694      	mov	ip, r2
    b5f2:	4461      	add	r1, ip
    b5f4:	7119      	strb	r1, [r3, #4]
    b5f6:	0a0a      	lsrs	r2, r1, #8
    b5f8:	715a      	strb	r2, [r3, #5]
    b5fa:	0c0a      	lsrs	r2, r1, #16
    b5fc:	719a      	strb	r2, [r3, #6]
    b5fe:	0e09      	lsrs	r1, r1, #24
    b600:	71d9      	strb	r1, [r3, #7]
					SwTimerStart(RegParams.pJoinDutyCycleTimer->timerId, SWTIMER_MAX_TIMEOUT, SW_TIMEOUT_RELATIVE, (void *)JoinDutyCycleCallback, NULL);
    b602:	7d23      	ldrb	r3, [r4, #20]
    b604:	7d62      	ldrb	r2, [r4, #21]
    b606:	0212      	lsls	r2, r2, #8
    b608:	431a      	orrs	r2, r3
    b60a:	7da3      	ldrb	r3, [r4, #22]
    b60c:	041b      	lsls	r3, r3, #16
    b60e:	431a      	orrs	r2, r3
    b610:	7de3      	ldrb	r3, [r4, #23]
    b612:	061b      	lsls	r3, r3, #24
    b614:	4313      	orrs	r3, r2
    b616:	7a18      	ldrb	r0, [r3, #8]
    b618:	2300      	movs	r3, #0
    b61a:	9300      	str	r3, [sp, #0]
    b61c:	4b61      	ldr	r3, [pc, #388]	; (b7a4 <setJoinDutyCycleTimer+0x270>)
    b61e:	2200      	movs	r2, #0
    b620:	4961      	ldr	r1, [pc, #388]	; (b7a8 <setJoinDutyCycleTimer+0x274>)
    b622:	4d62      	ldr	r5, [pc, #392]	; (b7ac <setJoinDutyCycleTimer+0x278>)
    b624:	47a8      	blx	r5
					RegParams.joinDutyCycleTimeout = RegParams.joinDutyCycleTimeout - (US_TO_MS(SWTIMER_MAX_TIMEOUT));
    b626:	233e      	movs	r3, #62	; 0x3e
    b628:	5ce3      	ldrb	r3, [r4, r3]
    b62a:	223f      	movs	r2, #63	; 0x3f
    b62c:	5ca2      	ldrb	r2, [r4, r2]
    b62e:	0212      	lsls	r2, r2, #8
    b630:	431a      	orrs	r2, r3
    b632:	2340      	movs	r3, #64	; 0x40
    b634:	5ce3      	ldrb	r3, [r4, r3]
    b636:	041b      	lsls	r3, r3, #16
    b638:	431a      	orrs	r2, r3
    b63a:	2341      	movs	r3, #65	; 0x41
    b63c:	5ce3      	ldrb	r3, [r4, r3]
    b63e:	061b      	lsls	r3, r3, #24
    b640:	4313      	orrs	r3, r2
    b642:	4a57      	ldr	r2, [pc, #348]	; (b7a0 <setJoinDutyCycleTimer+0x26c>)
    b644:	4694      	mov	ip, r2
    b646:	4463      	add	r3, ip
    b648:	343e      	adds	r4, #62	; 0x3e
    b64a:	7023      	strb	r3, [r4, #0]
    b64c:	0a1a      	lsrs	r2, r3, #8
    b64e:	7062      	strb	r2, [r4, #1]
    b650:	0c1a      	lsrs	r2, r3, #16
    b652:	70a2      	strb	r2, [r4, #2]
    b654:	0e1b      	lsrs	r3, r3, #24
    b656:	70e3      	strb	r3, [r4, #3]
    b658:	e094      	b.n	b784 <setJoinDutyCycleTimer+0x250>
				RegParams.joinDutyCycleTimeout = (uint32_t)UpdateJoinDutyCycleTimer.joinreqTimeonAir * (JOIN_BACKOFF_PRESCALAR_1HR - 1);
    b65a:	9a02      	ldr	r2, [sp, #8]
    b65c:	0053      	lsls	r3, r2, #1
    b65e:	189b      	adds	r3, r3, r2
    b660:	015a      	lsls	r2, r3, #5
    b662:	189b      	adds	r3, r3, r2
    b664:	4a4a      	ldr	r2, [pc, #296]	; (b790 <setJoinDutyCycleTimer+0x25c>)
    b666:	323e      	adds	r2, #62	; 0x3e
    b668:	7013      	strb	r3, [r2, #0]
    b66a:	0a19      	lsrs	r1, r3, #8
    b66c:	7051      	strb	r1, [r2, #1]
    b66e:	0c19      	lsrs	r1, r3, #16
    b670:	7091      	strb	r1, [r2, #2]
    b672:	0e1b      	lsrs	r3, r3, #24
    b674:	70d3      	strb	r3, [r2, #3]
    b676:	e77d      	b.n	b574 <setJoinDutyCycleTimer+0x40>
				RegParams.joinDutyCycleTimeout = (uint32_t)UpdateJoinDutyCycleTimer.joinreqTimeonAir * (JOIN_BACKOFF_PRESCALAR_24HR - 1);
    b678:	4b4d      	ldr	r3, [pc, #308]	; (b7b0 <setJoinDutyCycleTimer+0x27c>)
    b67a:	9a02      	ldr	r2, [sp, #8]
    b67c:	4353      	muls	r3, r2
    b67e:	4a44      	ldr	r2, [pc, #272]	; (b790 <setJoinDutyCycleTimer+0x25c>)
    b680:	323e      	adds	r2, #62	; 0x3e
    b682:	7013      	strb	r3, [r2, #0]
    b684:	0a19      	lsrs	r1, r3, #8
    b686:	7051      	strb	r1, [r2, #1]
    b688:	0c19      	lsrs	r1, r3, #16
    b68a:	7091      	strb	r1, [r2, #2]
    b68c:	0e1b      	lsrs	r3, r3, #24
    b68e:	70d3      	strb	r3, [r2, #3]
    b690:	e770      	b.n	b574 <setJoinDutyCycleTimer+0x40>
			ticks = SwTimerReadValue(RegParams.pJoinDutyCycleTimer->timerId);
    b692:	4c3f      	ldr	r4, [pc, #252]	; (b790 <setJoinDutyCycleTimer+0x25c>)
    b694:	7d23      	ldrb	r3, [r4, #20]
    b696:	7d62      	ldrb	r2, [r4, #21]
    b698:	0212      	lsls	r2, r2, #8
    b69a:	431a      	orrs	r2, r3
    b69c:	7da3      	ldrb	r3, [r4, #22]
    b69e:	041b      	lsls	r3, r3, #16
    b6a0:	431a      	orrs	r2, r3
    b6a2:	7de3      	ldrb	r3, [r4, #23]
    b6a4:	061b      	lsls	r3, r3, #24
    b6a6:	4313      	orrs	r3, r2
    b6a8:	7a18      	ldrb	r0, [r3, #8]
    b6aa:	4b42      	ldr	r3, [pc, #264]	; (b7b4 <setJoinDutyCycleTimer+0x280>)
    b6ac:	4798      	blx	r3
    b6ae:	0005      	movs	r5, r0
			SwTimerStop(RegParams.pJoinDutyCycleTimer->timerId);
    b6b0:	7d23      	ldrb	r3, [r4, #20]
    b6b2:	7d62      	ldrb	r2, [r4, #21]
    b6b4:	0212      	lsls	r2, r2, #8
    b6b6:	431a      	orrs	r2, r3
    b6b8:	7da3      	ldrb	r3, [r4, #22]
    b6ba:	041b      	lsls	r3, r3, #16
    b6bc:	431a      	orrs	r2, r3
    b6be:	7de3      	ldrb	r3, [r4, #23]
    b6c0:	061b      	lsls	r3, r3, #24
    b6c2:	4313      	orrs	r3, r2
    b6c4:	7a18      	ldrb	r0, [r3, #8]
    b6c6:	4b3c      	ldr	r3, [pc, #240]	; (b7b8 <setJoinDutyCycleTimer+0x284>)
    b6c8:	4798      	blx	r3
			delta = RegParams.pJoinDutyCycleTimer->lastTimerInterval- US_TO_MS(ticks);
    b6ca:	7d23      	ldrb	r3, [r4, #20]
    b6cc:	7d62      	ldrb	r2, [r4, #21]
    b6ce:	0212      	lsls	r2, r2, #8
    b6d0:	431a      	orrs	r2, r3
    b6d2:	7da3      	ldrb	r3, [r4, #22]
    b6d4:	041b      	lsls	r3, r3, #16
    b6d6:	431a      	orrs	r2, r3
    b6d8:	7de3      	ldrb	r3, [r4, #23]
    b6da:	061b      	lsls	r3, r3, #24
    b6dc:	4313      	orrs	r3, r2
    b6de:	781a      	ldrb	r2, [r3, #0]
    b6e0:	785c      	ldrb	r4, [r3, #1]
    b6e2:	0224      	lsls	r4, r4, #8
    b6e4:	4322      	orrs	r2, r4
    b6e6:	789c      	ldrb	r4, [r3, #2]
    b6e8:	0424      	lsls	r4, r4, #16
    b6ea:	4314      	orrs	r4, r2
    b6ec:	78da      	ldrb	r2, [r3, #3]
    b6ee:	0612      	lsls	r2, r2, #24
    b6f0:	4314      	orrs	r4, r2
    b6f2:	21fa      	movs	r1, #250	; 0xfa
    b6f4:	0089      	lsls	r1, r1, #2
    b6f6:	0028      	movs	r0, r5
    b6f8:	4b30      	ldr	r3, [pc, #192]	; (b7bc <setJoinDutyCycleTimer+0x288>)
    b6fa:	4798      	blx	r3
    b6fc:	1a24      	subs	r4, r4, r0
    b6fe:	e74a      	b.n	b596 <setJoinDutyCycleTimer+0x62>
				SwTimerStart (RegParams.pJoinDutyCycleTimer->timerId, MS_TO_US(RegParams.joinDutyCycleTimeout), SW_TIMEOUT_RELATIVE, (void *)JoinDutyCycleCallback, NULL);
    b700:	20fa      	movs	r0, #250	; 0xfa
    b702:	0080      	lsls	r0, r0, #2
    b704:	4341      	muls	r1, r0
    b706:	4c22      	ldr	r4, [pc, #136]	; (b790 <setJoinDutyCycleTimer+0x25c>)
    b708:	7d23      	ldrb	r3, [r4, #20]
    b70a:	7d62      	ldrb	r2, [r4, #21]
    b70c:	0212      	lsls	r2, r2, #8
    b70e:	431a      	orrs	r2, r3
    b710:	7da3      	ldrb	r3, [r4, #22]
    b712:	041b      	lsls	r3, r3, #16
    b714:	431a      	orrs	r2, r3
    b716:	7de3      	ldrb	r3, [r4, #23]
    b718:	061b      	lsls	r3, r3, #24
    b71a:	4313      	orrs	r3, r2
    b71c:	7a18      	ldrb	r0, [r3, #8]
    b71e:	2300      	movs	r3, #0
    b720:	9300      	str	r3, [sp, #0]
    b722:	4b20      	ldr	r3, [pc, #128]	; (b7a4 <setJoinDutyCycleTimer+0x270>)
    b724:	2200      	movs	r2, #0
    b726:	4c21      	ldr	r4, [pc, #132]	; (b7ac <setJoinDutyCycleTimer+0x278>)
    b728:	47a0      	blx	r4
    b72a:	e02b      	b.n	b784 <setJoinDutyCycleTimer+0x250>
				RegParams.joinDutyCycleTimeout = 0;
    b72c:	4b18      	ldr	r3, [pc, #96]	; (b790 <setJoinDutyCycleTimer+0x25c>)
    b72e:	333e      	adds	r3, #62	; 0x3e
    b730:	2200      	movs	r2, #0
    b732:	701a      	strb	r2, [r3, #0]
    b734:	705a      	strb	r2, [r3, #1]
    b736:	709a      	strb	r2, [r3, #2]
    b738:	70da      	strb	r2, [r3, #3]
    b73a:	e023      	b.n	b784 <setJoinDutyCycleTimer+0x250>
		SwTimerStop(RegParams.pJoinDutyCycleTimer->timerId);
    b73c:	4c14      	ldr	r4, [pc, #80]	; (b790 <setJoinDutyCycleTimer+0x25c>)
    b73e:	7d23      	ldrb	r3, [r4, #20]
    b740:	7d62      	ldrb	r2, [r4, #21]
    b742:	0212      	lsls	r2, r2, #8
    b744:	431a      	orrs	r2, r3
    b746:	7da3      	ldrb	r3, [r4, #22]
    b748:	041b      	lsls	r3, r3, #16
    b74a:	431a      	orrs	r2, r3
    b74c:	7de3      	ldrb	r3, [r4, #23]
    b74e:	061b      	lsls	r3, r3, #24
    b750:	4313      	orrs	r3, r2
    b752:	7a18      	ldrb	r0, [r3, #8]
    b754:	4b18      	ldr	r3, [pc, #96]	; (b7b8 <setJoinDutyCycleTimer+0x284>)
    b756:	4798      	blx	r3
		RegParams.joinDutyCycleTimeout = 0;
    b758:	0023      	movs	r3, r4
    b75a:	333e      	adds	r3, #62	; 0x3e
    b75c:	2200      	movs	r2, #0
    b75e:	701a      	strb	r2, [r3, #0]
    b760:	705a      	strb	r2, [r3, #1]
    b762:	709a      	strb	r2, [r3, #2]
    b764:	70da      	strb	r2, [r3, #3]
		RegParams.pJoinDutyCycleTimer->remainingtime =0;
    b766:	7d23      	ldrb	r3, [r4, #20]
    b768:	7d62      	ldrb	r2, [r4, #21]
    b76a:	0212      	lsls	r2, r2, #8
    b76c:	431a      	orrs	r2, r3
    b76e:	7da3      	ldrb	r3, [r4, #22]
    b770:	041b      	lsls	r3, r3, #16
    b772:	431a      	orrs	r2, r3
    b774:	7de3      	ldrb	r3, [r4, #23]
    b776:	061b      	lsls	r3, r3, #24
    b778:	4313      	orrs	r3, r2
    b77a:	2200      	movs	r2, #0
    b77c:	711a      	strb	r2, [r3, #4]
    b77e:	715a      	strb	r2, [r3, #5]
    b780:	719a      	strb	r2, [r3, #6]
    b782:	71da      	strb	r2, [r3, #7]
}
    b784:	2008      	movs	r0, #8
    b786:	b005      	add	sp, #20
    b788:	bd30      	pop	{r4, r5, pc}
    b78a:	46c0      	nop			; (mov r8, r8)
    b78c:	00019d89 	.word	0x00019d89
    b790:	200024d0 	.word	0x200024d0
    b794:	000003e7 	.word	0x000003e7
    b798:	0000efa5 	.word	0x0000efa5
    b79c:	0020c49b 	.word	0x0020c49b
    b7a0:	ffdf3b65 	.word	0xffdf3b65
    b7a4:	0000c065 	.word	0x0000c065
    b7a8:	7fffffff 	.word	0x7fffffff
    b7ac:	0000ee0d 	.word	0x0000ee0d
    b7b0:	0000270f 	.word	0x0000270f
    b7b4:	0000efb9 	.word	0x0000efb9
    b7b8:	0000f125 	.word	0x0000f125
    b7bc:	00016625 	.word	0x00016625

0000b7c0 <setDutyCycleTimer>:
{
    b7c0:	b5f0      	push	{r4, r5, r6, r7, lr}
    b7c2:	46de      	mov	lr, fp
    b7c4:	4657      	mov	r7, sl
    b7c6:	464e      	mov	r6, r9
    b7c8:	4645      	mov	r5, r8
    b7ca:	b5e0      	push	{r5, r6, r7, lr}
    b7cc:	b087      	sub	sp, #28
	memcpy(&updateDCTimer,attrInput,sizeof(UpdateDutyCycleTimer_t));
    b7ce:	2206      	movs	r2, #6
    b7d0:	a804      	add	r0, sp, #16
    b7d2:	4bc9      	ldr	r3, [pc, #804]	; (baf8 <setDutyCycleTimer+0x338>)
    b7d4:	4798      	blx	r3
    bandId = RegParams.pOtherChParams[RegParams.lastUsedChannelIndex].subBandId;
    b7d6:	49c9      	ldr	r1, [pc, #804]	; (bafc <setDutyCycleTimer+0x33c>)
    b7d8:	7a0b      	ldrb	r3, [r1, #8]
    b7da:	7a4a      	ldrb	r2, [r1, #9]
    b7dc:	0212      	lsls	r2, r2, #8
    b7de:	4313      	orrs	r3, r2
    b7e0:	7a8a      	ldrb	r2, [r1, #10]
    b7e2:	0412      	lsls	r2, r2, #16
    b7e4:	431a      	orrs	r2, r3
    b7e6:	7acb      	ldrb	r3, [r1, #11]
    b7e8:	061b      	lsls	r3, r3, #24
    b7ea:	431a      	orrs	r2, r3
    b7ec:	232f      	movs	r3, #47	; 0x2f
    b7ee:	5cc9      	ldrb	r1, [r1, r3]
    b7f0:	004b      	lsls	r3, r1, #1
    b7f2:	185b      	adds	r3, r3, r1
    b7f4:	009b      	lsls	r3, r3, #2
    b7f6:	189b      	adds	r3, r3, r2
    b7f8:	7a1e      	ldrb	r6, [r3, #8]
	if (bandId == 0 && RegParams.band == ISM_JPN923)
    b7fa:	2e00      	cmp	r6, #0
    b7fc:	d105      	bne.n	b80a <setDutyCycleTimer+0x4a>
    b7fe:	232e      	movs	r3, #46	; 0x2e
    b800:	4abe      	ldr	r2, [pc, #760]	; (bafc <setDutyCycleTimer+0x33c>)
    b802:	5cd3      	ldrb	r3, [r2, r3]
    b804:	2b05      	cmp	r3, #5
    b806:	d100      	bne.n	b80a <setDutyCycleTimer+0x4a>
    b808:	e162      	b.n	bad0 <setDutyCycleTimer+0x310>
	if(updateDCTimer.joining != 1)
    b80a:	ab04      	add	r3, sp, #16
    b80c:	791b      	ldrb	r3, [r3, #4]
    b80e:	2b00      	cmp	r3, #0
    b810:	d16a      	bne.n	b8e8 <setDutyCycleTimer+0x128>
		RegParams.pSubBandParams[bandId].subBandTimeout = ((uint32_t)updateDCTimer.timeOnAir * ((uint32_t)RegParams.cmnParams.paramsType2.subBandDutyCycle[bandId] - 1));
    b812:	a904      	add	r1, sp, #16
    b814:	880a      	ldrh	r2, [r1, #0]
    b816:	48b9      	ldr	r0, [pc, #740]	; (bafc <setDutyCycleTimer+0x33c>)
    b818:	7b07      	ldrb	r7, [r0, #12]
    b81a:	7b43      	ldrb	r3, [r0, #13]
    b81c:	021b      	lsls	r3, r3, #8
    b81e:	433b      	orrs	r3, r7
    b820:	7b87      	ldrb	r7, [r0, #14]
    b822:	043f      	lsls	r7, r7, #16
    b824:	431f      	orrs	r7, r3
    b826:	7bc4      	ldrb	r4, [r0, #15]
    b828:	0624      	lsls	r4, r4, #24
    b82a:	4327      	orrs	r7, r4
    b82c:	0074      	lsls	r4, r6, #1
    b82e:	19a4      	adds	r4, r4, r6
    b830:	00a4      	lsls	r4, r4, #2
    b832:	0035      	movs	r5, r6
    b834:	35d4      	adds	r5, #212	; 0xd4
    b836:	006d      	lsls	r5, r5, #1
    b838:	1945      	adds	r5, r0, r5
    b83a:	796b      	ldrb	r3, [r5, #5]
    b83c:	469c      	mov	ip, r3
    b83e:	79ab      	ldrb	r3, [r5, #6]
    b840:	021b      	lsls	r3, r3, #8
    b842:	4665      	mov	r5, ip
    b844:	432b      	orrs	r3, r5
    b846:	3b01      	subs	r3, #1
    b848:	4353      	muls	r3, r2
    b84a:	19e4      	adds	r4, r4, r7
    b84c:	7223      	strb	r3, [r4, #8]
    b84e:	0a1d      	lsrs	r5, r3, #8
    b850:	7265      	strb	r5, [r4, #9]
    b852:	0c1d      	lsrs	r5, r3, #16
    b854:	72a5      	strb	r5, [r4, #10]
    b856:	0e1b      	lsrs	r3, r3, #24
    b858:	72e3      	strb	r3, [r4, #11]
		RegParams.cmnParams.paramsType2.aggregatedDutyCycleTimeout = (uint32_t)updateDCTimer.timeOnAir * ((uint32_t) updateDCTimer.aggDutyCycle - 1);
    b85a:	884b      	ldrh	r3, [r1, #2]
    b85c:	3b01      	subs	r3, #1
    b85e:	435a      	muls	r2, r3
    b860:	23ba      	movs	r3, #186	; 0xba
    b862:	33ff      	adds	r3, #255	; 0xff
    b864:	54c2      	strb	r2, [r0, r3]
    b866:	0a11      	lsrs	r1, r2, #8
    b868:	18c0      	adds	r0, r0, r3
    b86a:	7041      	strb	r1, [r0, #1]
    b86c:	0c11      	lsrs	r1, r2, #16
    b86e:	7081      	strb	r1, [r0, #2]
    b870:	0e12      	lsrs	r2, r2, #24
    b872:	70c2      	strb	r2, [r0, #3]
	if(SwTimerIsRunning(RegParams.pDutyCycleTimer->timerId))
    b874:	49a1      	ldr	r1, [pc, #644]	; (bafc <setDutyCycleTimer+0x33c>)
    b876:	7c0b      	ldrb	r3, [r1, #16]
    b878:	7c4a      	ldrb	r2, [r1, #17]
    b87a:	0212      	lsls	r2, r2, #8
    b87c:	431a      	orrs	r2, r3
    b87e:	7c8b      	ldrb	r3, [r1, #18]
    b880:	041b      	lsls	r3, r3, #16
    b882:	431a      	orrs	r2, r3
    b884:	7ccb      	ldrb	r3, [r1, #19]
    b886:	061b      	lsls	r3, r3, #24
    b888:	4313      	orrs	r3, r2
    b88a:	7918      	ldrb	r0, [r3, #4]
    b88c:	4b9c      	ldr	r3, [pc, #624]	; (bb00 <setDutyCycleTimer+0x340>)
    b88e:	4798      	blx	r3
    uint32_t delta = 0, minimSubBandTimer = UINT32_MAX, ticks,nextTimer;
    b890:	2300      	movs	r3, #0
    b892:	4699      	mov	r9, r3
	if(SwTimerIsRunning(RegParams.pDutyCycleTimer->timerId))
    b894:	2800      	cmp	r0, #0
    b896:	d136      	bne.n	b906 <setDutyCycleTimer+0x146>
	minimSubBandTimer = RegParams.pSubBandParams[bandId].subBandTimeout;
    b898:	4a98      	ldr	r2, [pc, #608]	; (bafc <setDutyCycleTimer+0x33c>)
    b89a:	7b13      	ldrb	r3, [r2, #12]
    b89c:	7b51      	ldrb	r1, [r2, #13]
    b89e:	0209      	lsls	r1, r1, #8
    b8a0:	430b      	orrs	r3, r1
    b8a2:	7b91      	ldrb	r1, [r2, #14]
    b8a4:	0409      	lsls	r1, r1, #16
    b8a6:	4319      	orrs	r1, r3
    b8a8:	7bd3      	ldrb	r3, [r2, #15]
    b8aa:	061b      	lsls	r3, r3, #24
    b8ac:	4319      	orrs	r1, r3
    b8ae:	0073      	lsls	r3, r6, #1
    b8b0:	199b      	adds	r3, r3, r6
    b8b2:	009b      	lsls	r3, r3, #2
    b8b4:	185b      	adds	r3, r3, r1
    b8b6:	7a18      	ldrb	r0, [r3, #8]
    b8b8:	7a59      	ldrb	r1, [r3, #9]
    b8ba:	0209      	lsls	r1, r1, #8
    b8bc:	4301      	orrs	r1, r0
    b8be:	7a98      	ldrb	r0, [r3, #10]
    b8c0:	0400      	lsls	r0, r0, #16
    b8c2:	4301      	orrs	r1, r0
    b8c4:	7ad8      	ldrb	r0, [r3, #11]
    b8c6:	0600      	lsls	r0, r0, #24
    b8c8:	4308      	orrs	r0, r1
    b8ca:	9003      	str	r0, [sp, #12]
	for(i = 0; i < RegParams.maxSubBands; i++)
    b8cc:	2329      	movs	r3, #41	; 0x29
    b8ce:	5cd3      	ldrb	r3, [r2, r3]
    b8d0:	2b00      	cmp	r3, #0
    b8d2:	d100      	bne.n	b8d6 <setDutyCycleTimer+0x116>
    b8d4:	e09c      	b.n	ba10 <setDutyCycleTimer+0x250>
    b8d6:	2200      	movs	r2, #0
		if((i != bandId) && (RegParams.pSubBandParams[i].subBandTimeout != 0))
    b8d8:	4d88      	ldr	r5, [pc, #544]	; (bafc <setDutyCycleTimer+0x33c>)
			if(RegParams.pSubBandParams[i].subBandTimeout <= minimSubBandTimer && RegParams.pSubBandParams[i].subBandTimeout != 0)
    b8da:	002f      	movs	r7, r5
				RegParams.pSubBandParams[i].subBandTimeout = 0;
    b8dc:	2300      	movs	r3, #0
    b8de:	469a      	mov	sl, r3
	for(i = 0; i < RegParams.maxSubBands; i++)
    b8e0:	46a8      	mov	r8, r5
    b8e2:	2329      	movs	r3, #41	; 0x29
    b8e4:	469c      	mov	ip, r3
    b8e6:	e051      	b.n	b98c <setDutyCycleTimer+0x1cc>
		RegParams.joinDutyCycleTimeout = (uint32_t)updateDCTimer.timeOnAir * ((uint32_t) updateDCTimer.aggDutyCycle - 1);
    b8e8:	a904      	add	r1, sp, #16
    b8ea:	884a      	ldrh	r2, [r1, #2]
    b8ec:	3a01      	subs	r2, #1
    b8ee:	880b      	ldrh	r3, [r1, #0]
    b8f0:	4353      	muls	r3, r2
    b8f2:	4a82      	ldr	r2, [pc, #520]	; (bafc <setDutyCycleTimer+0x33c>)
    b8f4:	323e      	adds	r2, #62	; 0x3e
    b8f6:	7013      	strb	r3, [r2, #0]
    b8f8:	0a19      	lsrs	r1, r3, #8
    b8fa:	7051      	strb	r1, [r2, #1]
    b8fc:	0c19      	lsrs	r1, r3, #16
    b8fe:	7091      	strb	r1, [r2, #2]
    b900:	0e1b      	lsrs	r3, r3, #24
    b902:	70d3      	strb	r3, [r2, #3]
    b904:	e7b6      	b.n	b874 <setDutyCycleTimer+0xb4>
		SwTimerStop(RegParams.pDutyCycleTimer->timerId);
    b906:	4c7d      	ldr	r4, [pc, #500]	; (bafc <setDutyCycleTimer+0x33c>)
    b908:	7c23      	ldrb	r3, [r4, #16]
    b90a:	7c62      	ldrb	r2, [r4, #17]
    b90c:	0212      	lsls	r2, r2, #8
    b90e:	431a      	orrs	r2, r3
    b910:	7ca3      	ldrb	r3, [r4, #18]
    b912:	041b      	lsls	r3, r3, #16
    b914:	431a      	orrs	r2, r3
    b916:	7ce3      	ldrb	r3, [r4, #19]
    b918:	061b      	lsls	r3, r3, #24
    b91a:	4313      	orrs	r3, r2
    b91c:	7918      	ldrb	r0, [r3, #4]
    b91e:	4b79      	ldr	r3, [pc, #484]	; (bb04 <setDutyCycleTimer+0x344>)
    b920:	4798      	blx	r3
		ticks = SwTimerReadValue(RegParams.pDutyCycleTimer->timerId);
    b922:	7c23      	ldrb	r3, [r4, #16]
    b924:	7c62      	ldrb	r2, [r4, #17]
    b926:	0212      	lsls	r2, r2, #8
    b928:	431a      	orrs	r2, r3
    b92a:	7ca3      	ldrb	r3, [r4, #18]
    b92c:	041b      	lsls	r3, r3, #16
    b92e:	431a      	orrs	r2, r3
    b930:	7ce3      	ldrb	r3, [r4, #19]
    b932:	061b      	lsls	r3, r3, #24
    b934:	4313      	orrs	r3, r2
    b936:	7918      	ldrb	r0, [r3, #4]
    b938:	4b73      	ldr	r3, [pc, #460]	; (bb08 <setDutyCycleTimer+0x348>)
    b93a:	4798      	blx	r3
		delta = RegParams.pDutyCycleTimer->lastTimerValue - US_TO_MS(ticks);
    b93c:	7c23      	ldrb	r3, [r4, #16]
    b93e:	7c62      	ldrb	r2, [r4, #17]
    b940:	0212      	lsls	r2, r2, #8
    b942:	431a      	orrs	r2, r3
    b944:	7ca3      	ldrb	r3, [r4, #18]
    b946:	041b      	lsls	r3, r3, #16
    b948:	431a      	orrs	r2, r3
    b94a:	7ce3      	ldrb	r3, [r4, #19]
    b94c:	061b      	lsls	r3, r3, #24
    b94e:	4313      	orrs	r3, r2
    b950:	781c      	ldrb	r4, [r3, #0]
    b952:	785a      	ldrb	r2, [r3, #1]
    b954:	0212      	lsls	r2, r2, #8
    b956:	4322      	orrs	r2, r4
    b958:	789c      	ldrb	r4, [r3, #2]
    b95a:	0424      	lsls	r4, r4, #16
    b95c:	4322      	orrs	r2, r4
    b95e:	78dc      	ldrb	r4, [r3, #3]
    b960:	0624      	lsls	r4, r4, #24
    b962:	4314      	orrs	r4, r2
    b964:	21fa      	movs	r1, #250	; 0xfa
    b966:	0089      	lsls	r1, r1, #2
    b968:	4b68      	ldr	r3, [pc, #416]	; (bb0c <setDutyCycleTimer+0x34c>)
    b96a:	4798      	blx	r3
    b96c:	1a23      	subs	r3, r4, r0
    b96e:	4699      	mov	r9, r3
    b970:	e792      	b.n	b898 <setDutyCycleTimer+0xd8>
				RegParams.pSubBandParams[i].subBandTimeout = 0;
    b972:	4651      	mov	r1, sl
    b974:	7219      	strb	r1, [r3, #8]
    b976:	7259      	strb	r1, [r3, #9]
    b978:	7299      	strb	r1, [r3, #10]
    b97a:	72d9      	strb	r1, [r3, #11]
    b97c:	e02c      	b.n	b9d8 <setDutyCycleTimer+0x218>
	for(i = 0; i < RegParams.maxSubBands; i++)
    b97e:	3201      	adds	r2, #1
    b980:	b2d2      	uxtb	r2, r2
    b982:	4643      	mov	r3, r8
    b984:	4661      	mov	r1, ip
    b986:	5c5b      	ldrb	r3, [r3, r1]
    b988:	4293      	cmp	r3, r2
    b98a:	d941      	bls.n	ba10 <setDutyCycleTimer+0x250>
		if((i != bandId) && (RegParams.pSubBandParams[i].subBandTimeout != 0))
    b98c:	4296      	cmp	r6, r2
    b98e:	d0f6      	beq.n	b97e <setDutyCycleTimer+0x1be>
    b990:	0054      	lsls	r4, r2, #1
    b992:	18a4      	adds	r4, r4, r2
    b994:	00a4      	lsls	r4, r4, #2
    b996:	7b2b      	ldrb	r3, [r5, #12]
    b998:	7b69      	ldrb	r1, [r5, #13]
    b99a:	0209      	lsls	r1, r1, #8
    b99c:	4319      	orrs	r1, r3
    b99e:	7bab      	ldrb	r3, [r5, #14]
    b9a0:	041b      	lsls	r3, r3, #16
    b9a2:	4319      	orrs	r1, r3
    b9a4:	7beb      	ldrb	r3, [r5, #15]
    b9a6:	061b      	lsls	r3, r3, #24
    b9a8:	430b      	orrs	r3, r1
    b9aa:	191b      	adds	r3, r3, r4
    b9ac:	7a18      	ldrb	r0, [r3, #8]
    b9ae:	7a59      	ldrb	r1, [r3, #9]
    b9b0:	0209      	lsls	r1, r1, #8
    b9b2:	4301      	orrs	r1, r0
    b9b4:	7a98      	ldrb	r0, [r3, #10]
    b9b6:	0400      	lsls	r0, r0, #16
    b9b8:	4308      	orrs	r0, r1
    b9ba:	7ad9      	ldrb	r1, [r3, #11]
    b9bc:	0609      	lsls	r1, r1, #24
    b9be:	4301      	orrs	r1, r0
    b9c0:	d0dd      	beq.n	b97e <setDutyCycleTimer+0x1be>
			if(RegParams.pSubBandParams[i].subBandTimeout > delta)
    b9c2:	4589      	cmp	r9, r1
    b9c4:	d2d5      	bcs.n	b972 <setDutyCycleTimer+0x1b2>
				          RegParams.pSubBandParams[i].subBandTimeout - delta;
    b9c6:	4648      	mov	r0, r9
    b9c8:	1a09      	subs	r1, r1, r0
				RegParams.pSubBandParams[i].subBandTimeout = 
    b9ca:	7219      	strb	r1, [r3, #8]
    b9cc:	0a08      	lsrs	r0, r1, #8
    b9ce:	7258      	strb	r0, [r3, #9]
    b9d0:	0c08      	lsrs	r0, r1, #16
    b9d2:	7298      	strb	r0, [r3, #10]
    b9d4:	0e09      	lsrs	r1, r1, #24
    b9d6:	72d9      	strb	r1, [r3, #11]
			if(RegParams.pSubBandParams[i].subBandTimeout <= minimSubBandTimer && RegParams.pSubBandParams[i].subBandTimeout != 0)
    b9d8:	7b3b      	ldrb	r3, [r7, #12]
    b9da:	7b79      	ldrb	r1, [r7, #13]
    b9dc:	0209      	lsls	r1, r1, #8
    b9de:	4319      	orrs	r1, r3
    b9e0:	7bbb      	ldrb	r3, [r7, #14]
    b9e2:	041b      	lsls	r3, r3, #16
    b9e4:	4319      	orrs	r1, r3
    b9e6:	7bfb      	ldrb	r3, [r7, #15]
    b9e8:	061b      	lsls	r3, r3, #24
    b9ea:	430b      	orrs	r3, r1
    b9ec:	191c      	adds	r4, r3, r4
    b9ee:	7a23      	ldrb	r3, [r4, #8]
    b9f0:	7a61      	ldrb	r1, [r4, #9]
    b9f2:	0209      	lsls	r1, r1, #8
    b9f4:	4319      	orrs	r1, r3
    b9f6:	7aa3      	ldrb	r3, [r4, #10]
    b9f8:	041b      	lsls	r3, r3, #16
    b9fa:	4319      	orrs	r1, r3
    b9fc:	7ae3      	ldrb	r3, [r4, #11]
    b9fe:	061b      	lsls	r3, r3, #24
    ba00:	430b      	orrs	r3, r1
    ba02:	9903      	ldr	r1, [sp, #12]
    ba04:	428b      	cmp	r3, r1
    ba06:	d8ba      	bhi.n	b97e <setDutyCycleTimer+0x1be>
    ba08:	2b00      	cmp	r3, #0
    ba0a:	d0b8      	beq.n	b97e <setDutyCycleTimer+0x1be>
				minimSubBandTimer = RegParams.pSubBandParams[i].subBandTimeout;
    ba0c:	9303      	str	r3, [sp, #12]
    ba0e:	e7b6      	b.n	b97e <setDutyCycleTimer+0x1be>
	if(RegParams.cmnParams.paramsType2.aggregatedDutyCycleTimeout != 0)
    ba10:	493a      	ldr	r1, [pc, #232]	; (bafc <setDutyCycleTimer+0x33c>)
    ba12:	23ba      	movs	r3, #186	; 0xba
    ba14:	33ff      	adds	r3, #255	; 0xff
    ba16:	5ccb      	ldrb	r3, [r1, r3]
    ba18:	22dd      	movs	r2, #221	; 0xdd
    ba1a:	0052      	lsls	r2, r2, #1
    ba1c:	5c8a      	ldrb	r2, [r1, r2]
    ba1e:	0212      	lsls	r2, r2, #8
    ba20:	431a      	orrs	r2, r3
    ba22:	23bc      	movs	r3, #188	; 0xbc
    ba24:	33ff      	adds	r3, #255	; 0xff
    ba26:	5ccb      	ldrb	r3, [r1, r3]
    ba28:	041b      	lsls	r3, r3, #16
    ba2a:	431a      	orrs	r2, r3
    ba2c:	23de      	movs	r3, #222	; 0xde
    ba2e:	005b      	lsls	r3, r3, #1
    ba30:	5ccb      	ldrb	r3, [r1, r3]
    ba32:	061b      	lsls	r3, r3, #24
    ba34:	4313      	orrs	r3, r2
    ba36:	d00f      	beq.n	ba58 <setDutyCycleTimer+0x298>
		if(RegParams.cmnParams.paramsType2.aggregatedDutyCycleTimeout > delta)
    ba38:	4599      	cmp	r9, r3
    ba3a:	d251      	bcs.n	bae0 <setDutyCycleTimer+0x320>
			RegParams.cmnParams.paramsType2.aggregatedDutyCycleTimeout = RegParams.cmnParams.paramsType2.aggregatedDutyCycleTimeout - delta;
    ba3c:	000a      	movs	r2, r1
    ba3e:	4649      	mov	r1, r9
    ba40:	1a5b      	subs	r3, r3, r1
    ba42:	21ba      	movs	r1, #186	; 0xba
    ba44:	31ff      	adds	r1, #255	; 0xff
    ba46:	5453      	strb	r3, [r2, r1]
    ba48:	0a19      	lsrs	r1, r3, #8
    ba4a:	32ba      	adds	r2, #186	; 0xba
    ba4c:	32ff      	adds	r2, #255	; 0xff
    ba4e:	7051      	strb	r1, [r2, #1]
    ba50:	0c19      	lsrs	r1, r3, #16
    ba52:	7091      	strb	r1, [r2, #2]
    ba54:	0e1b      	lsrs	r3, r3, #24
    ba56:	70d3      	strb	r3, [r2, #3]
		if(RegParams.cmnParams.paramsType2.aggregatedDutyCycleTimeout >= minimSubBandTimer)
    ba58:	4a28      	ldr	r2, [pc, #160]	; (bafc <setDutyCycleTimer+0x33c>)
    ba5a:	23ba      	movs	r3, #186	; 0xba
    ba5c:	33ff      	adds	r3, #255	; 0xff
    ba5e:	5cd1      	ldrb	r1, [r2, r3]
    ba60:	3301      	adds	r3, #1
    ba62:	5cd3      	ldrb	r3, [r2, r3]
    ba64:	021b      	lsls	r3, r3, #8
    ba66:	430b      	orrs	r3, r1
    ba68:	21bc      	movs	r1, #188	; 0xbc
    ba6a:	31ff      	adds	r1, #255	; 0xff
    ba6c:	5c51      	ldrb	r1, [r2, r1]
    ba6e:	0409      	lsls	r1, r1, #16
    ba70:	430b      	orrs	r3, r1
    ba72:	21de      	movs	r1, #222	; 0xde
    ba74:	0049      	lsls	r1, r1, #1
    ba76:	5c51      	ldrb	r1, [r2, r1]
    ba78:	0609      	lsls	r1, r1, #24
    ba7a:	4319      	orrs	r1, r3
    ba7c:	9a03      	ldr	r2, [sp, #12]
    ba7e:	4291      	cmp	r1, r2
    ba80:	d200      	bcs.n	ba84 <setDutyCycleTimer+0x2c4>
    ba82:	0011      	movs	r1, r2
		RegParams.pDutyCycleTimer->lastTimerValue = nextTimer;
    ba84:	4b1d      	ldr	r3, [pc, #116]	; (bafc <setDutyCycleTimer+0x33c>)
    ba86:	7c1a      	ldrb	r2, [r3, #16]
    ba88:	7c58      	ldrb	r0, [r3, #17]
    ba8a:	0200      	lsls	r0, r0, #8
    ba8c:	4310      	orrs	r0, r2
    ba8e:	7c9a      	ldrb	r2, [r3, #18]
    ba90:	0412      	lsls	r2, r2, #16
    ba92:	4310      	orrs	r0, r2
    ba94:	7cda      	ldrb	r2, [r3, #19]
    ba96:	0612      	lsls	r2, r2, #24
    ba98:	4302      	orrs	r2, r0
    ba9a:	7011      	strb	r1, [r2, #0]
    ba9c:	0a08      	lsrs	r0, r1, #8
    ba9e:	7050      	strb	r0, [r2, #1]
    baa0:	0c08      	lsrs	r0, r1, #16
    baa2:	7090      	strb	r0, [r2, #2]
    baa4:	0e08      	lsrs	r0, r1, #24
    baa6:	70d0      	strb	r0, [r2, #3]
		SwTimerStart (RegParams.pDutyCycleTimer->timerId, MS_TO_US(nextTimer), SW_TIMEOUT_RELATIVE, (void *)DutyCycleCallback, NULL);
    baa8:	22fa      	movs	r2, #250	; 0xfa
    baaa:	0092      	lsls	r2, r2, #2
    baac:	4351      	muls	r1, r2
    baae:	7c18      	ldrb	r0, [r3, #16]
    bab0:	7c5a      	ldrb	r2, [r3, #17]
    bab2:	0212      	lsls	r2, r2, #8
    bab4:	4310      	orrs	r0, r2
    bab6:	7c9a      	ldrb	r2, [r3, #18]
    bab8:	0412      	lsls	r2, r2, #16
    baba:	4302      	orrs	r2, r0
    babc:	7cdb      	ldrb	r3, [r3, #19]
    babe:	061b      	lsls	r3, r3, #24
    bac0:	4313      	orrs	r3, r2
    bac2:	7918      	ldrb	r0, [r3, #4]
    bac4:	2300      	movs	r3, #0
    bac6:	9300      	str	r3, [sp, #0]
    bac8:	4b11      	ldr	r3, [pc, #68]	; (bb10 <setDutyCycleTimer+0x350>)
    baca:	2200      	movs	r2, #0
    bacc:	4c11      	ldr	r4, [pc, #68]	; (bb14 <setDutyCycleTimer+0x354>)
    bace:	47a0      	blx	r4
}
    bad0:	2008      	movs	r0, #8
    bad2:	b007      	add	sp, #28
    bad4:	bc3c      	pop	{r2, r3, r4, r5}
    bad6:	4690      	mov	r8, r2
    bad8:	4699      	mov	r9, r3
    bada:	46a2      	mov	sl, r4
    badc:	46ab      	mov	fp, r5
    bade:	bdf0      	pop	{r4, r5, r6, r7, pc}
			RegParams.cmnParams.paramsType2.aggregatedDutyCycleTimeout = 0;
    bae0:	4b06      	ldr	r3, [pc, #24]	; (bafc <setDutyCycleTimer+0x33c>)
    bae2:	2100      	movs	r1, #0
    bae4:	22ba      	movs	r2, #186	; 0xba
    bae6:	32ff      	adds	r2, #255	; 0xff
    bae8:	5499      	strb	r1, [r3, r2]
    baea:	189b      	adds	r3, r3, r2
    baec:	2200      	movs	r2, #0
    baee:	705a      	strb	r2, [r3, #1]
    baf0:	709a      	strb	r2, [r3, #2]
    baf2:	70da      	strb	r2, [r3, #3]
    baf4:	e7b0      	b.n	ba58 <setDutyCycleTimer+0x298>
    baf6:	46c0      	nop			; (mov r8, r8)
    baf8:	00019d89 	.word	0x00019d89
    bafc:	200024d0 	.word	0x200024d0
    bb00:	0000efa5 	.word	0x0000efa5
    bb04:	0000f125 	.word	0x0000f125
    bb08:	0000efb9 	.word	0x0000efb9
    bb0c:	00016625 	.word	0x00016625
    bb10:	0000bb19 	.word	0x0000bb19
    bb14:	0000ee0d 	.word	0x0000ee0d

0000bb18 <DutyCycleCallback>:
{
    bb18:	b5f0      	push	{r4, r5, r6, r7, lr}
    bb1a:	46de      	mov	lr, fp
    bb1c:	4657      	mov	r7, sl
    bb1e:	464e      	mov	r6, r9
    bb20:	4645      	mov	r5, r8
    bb22:	b5e0      	push	{r5, r6, r7, lr}
    bb24:	b087      	sub	sp, #28
	uint32_t DutyCycleTimeout = RegParams.cmnParams.paramsType2.aggregatedDutyCycleTimeout;
    bb26:	4980      	ldr	r1, [pc, #512]	; (bd28 <DutyCycleCallback+0x210>)
    bb28:	23ba      	movs	r3, #186	; 0xba
    bb2a:	33ff      	adds	r3, #255	; 0xff
    bb2c:	5cca      	ldrb	r2, [r1, r3]
    bb2e:	3301      	adds	r3, #1
    bb30:	5ccb      	ldrb	r3, [r1, r3]
    bb32:	021b      	lsls	r3, r3, #8
    bb34:	431a      	orrs	r2, r3
    bb36:	23bc      	movs	r3, #188	; 0xbc
    bb38:	33ff      	adds	r3, #255	; 0xff
    bb3a:	5ccb      	ldrb	r3, [r1, r3]
    bb3c:	041b      	lsls	r3, r3, #16
    bb3e:	4313      	orrs	r3, r2
    bb40:	22de      	movs	r2, #222	; 0xde
    bb42:	0052      	lsls	r2, r2, #1
    bb44:	5c8a      	ldrb	r2, [r1, r2]
    bb46:	0612      	lsls	r2, r2, #24
    bb48:	431a      	orrs	r2, r3
    bb4a:	9205      	str	r2, [sp, #20]
    for (i=0; i < RegParams.maxSubBands; i++)
    bb4c:	2329      	movs	r3, #41	; 0x29
    bb4e:	5ccb      	ldrb	r3, [r1, r3]
    bb50:	2b00      	cmp	r3, #0
    bb52:	d100      	bne.n	bb56 <DutyCycleCallback+0x3e>
    bb54:	e0df      	b.n	bd16 <DutyCycleCallback+0x1fe>
    bb56:	2600      	movs	r6, #0
    bb58:	2300      	movs	r3, #0
    bb5a:	9304      	str	r3, [sp, #16]
    bb5c:	3b01      	subs	r3, #1
    bb5e:	9303      	str	r3, [sp, #12]
        if (( RegParams.pSubBandParams[i].subBandTimeout != 0 ))
    bb60:	000f      	movs	r7, r1
            if ( RegParams.pSubBandParams[i].subBandTimeout > RegParams.pDutyCycleTimer->lastTimerValue )
    bb62:	4688      	mov	r8, r1
            if ( (RegParams.pSubBandParams[i].subBandTimeout <= minimSubBandTimer) && (RegParams.pSubBandParams[i].subBandTimeout != 0) )
    bb64:	468c      	mov	ip, r1
                RegParams.pSubBandParams[i].subBandTimeout = 0;
    bb66:	2300      	movs	r3, #0
    bb68:	469b      	mov	fp, r3
    for (i=0; i < RegParams.maxSubBands; i++)
    bb6a:	468a      	mov	sl, r1
    bb6c:	2329      	movs	r3, #41	; 0x29
    bb6e:	4699      	mov	r9, r3
    bb70:	e00c      	b.n	bb8c <DutyCycleCallback+0x74>
                RegParams.pSubBandParams[i].subBandTimeout = 0;
    bb72:	465a      	mov	r2, fp
    bb74:	721a      	strb	r2, [r3, #8]
    bb76:	725a      	strb	r2, [r3, #9]
    bb78:	729a      	strb	r2, [r3, #10]
    bb7a:	72da      	strb	r2, [r3, #11]
    bb7c:	e03f      	b.n	bbfe <DutyCycleCallback+0xe6>
    for (i=0; i < RegParams.maxSubBands; i++)
    bb7e:	3601      	adds	r6, #1
    bb80:	b2f6      	uxtb	r6, r6
    bb82:	4653      	mov	r3, sl
    bb84:	464a      	mov	r2, r9
    bb86:	5c9b      	ldrb	r3, [r3, r2]
    bb88:	42b3      	cmp	r3, r6
    bb8a:	d95a      	bls.n	bc42 <DutyCycleCallback+0x12a>
        if (( RegParams.pSubBandParams[i].subBandTimeout != 0 ))
    bb8c:	0071      	lsls	r1, r6, #1
    bb8e:	1989      	adds	r1, r1, r6
    bb90:	0089      	lsls	r1, r1, #2
    bb92:	7b3b      	ldrb	r3, [r7, #12]
    bb94:	7b7a      	ldrb	r2, [r7, #13]
    bb96:	0212      	lsls	r2, r2, #8
    bb98:	431a      	orrs	r2, r3
    bb9a:	7bbb      	ldrb	r3, [r7, #14]
    bb9c:	041b      	lsls	r3, r3, #16
    bb9e:	431a      	orrs	r2, r3
    bba0:	7bfb      	ldrb	r3, [r7, #15]
    bba2:	061b      	lsls	r3, r3, #24
    bba4:	4313      	orrs	r3, r2
    bba6:	185b      	adds	r3, r3, r1
    bba8:	7a1a      	ldrb	r2, [r3, #8]
    bbaa:	7a58      	ldrb	r0, [r3, #9]
    bbac:	0200      	lsls	r0, r0, #8
    bbae:	4310      	orrs	r0, r2
    bbb0:	7a9a      	ldrb	r2, [r3, #10]
    bbb2:	0412      	lsls	r2, r2, #16
    bbb4:	4310      	orrs	r0, r2
    bbb6:	7ada      	ldrb	r2, [r3, #11]
    bbb8:	0612      	lsls	r2, r2, #24
    bbba:	4302      	orrs	r2, r0
    bbbc:	d0df      	beq.n	bb7e <DutyCycleCallback+0x66>
            if ( RegParams.pSubBandParams[i].subBandTimeout > RegParams.pDutyCycleTimer->lastTimerValue )
    bbbe:	4640      	mov	r0, r8
    bbc0:	7c05      	ldrb	r5, [r0, #16]
    bbc2:	7c44      	ldrb	r4, [r0, #17]
    bbc4:	0224      	lsls	r4, r4, #8
    bbc6:	4325      	orrs	r5, r4
    bbc8:	7c80      	ldrb	r0, [r0, #18]
    bbca:	0400      	lsls	r0, r0, #16
    bbcc:	4305      	orrs	r5, r0
    bbce:	4640      	mov	r0, r8
    bbd0:	7cc0      	ldrb	r0, [r0, #19]
    bbd2:	0600      	lsls	r0, r0, #24
    bbd4:	4328      	orrs	r0, r5
    bbd6:	7804      	ldrb	r4, [r0, #0]
    bbd8:	7845      	ldrb	r5, [r0, #1]
    bbda:	022d      	lsls	r5, r5, #8
    bbdc:	4325      	orrs	r5, r4
    bbde:	7884      	ldrb	r4, [r0, #2]
    bbe0:	0424      	lsls	r4, r4, #16
    bbe2:	4325      	orrs	r5, r4
    bbe4:	78c4      	ldrb	r4, [r0, #3]
    bbe6:	0624      	lsls	r4, r4, #24
    bbe8:	432c      	orrs	r4, r5
    bbea:	42a2      	cmp	r2, r4
    bbec:	d9c1      	bls.n	bb72 <DutyCycleCallback+0x5a>
                RegParams.pSubBandParams[i].subBandTimeout = RegParams.pSubBandParams[i].subBandTimeout - RegParams.pDutyCycleTimer->lastTimerValue;
    bbee:	1b12      	subs	r2, r2, r4
    bbf0:	721a      	strb	r2, [r3, #8]
    bbf2:	0a10      	lsrs	r0, r2, #8
    bbf4:	7258      	strb	r0, [r3, #9]
    bbf6:	0c10      	lsrs	r0, r2, #16
    bbf8:	7298      	strb	r0, [r3, #10]
    bbfa:	0e12      	lsrs	r2, r2, #24
    bbfc:	72da      	strb	r2, [r3, #11]
            if ( (RegParams.pSubBandParams[i].subBandTimeout <= minimSubBandTimer) && (RegParams.pSubBandParams[i].subBandTimeout != 0) )
    bbfe:	4663      	mov	r3, ip
    bc00:	7b1b      	ldrb	r3, [r3, #12]
    bc02:	4662      	mov	r2, ip
    bc04:	7b52      	ldrb	r2, [r2, #13]
    bc06:	0212      	lsls	r2, r2, #8
    bc08:	431a      	orrs	r2, r3
    bc0a:	4663      	mov	r3, ip
    bc0c:	7b9b      	ldrb	r3, [r3, #14]
    bc0e:	041b      	lsls	r3, r3, #16
    bc10:	431a      	orrs	r2, r3
    bc12:	4663      	mov	r3, ip
    bc14:	7bdb      	ldrb	r3, [r3, #15]
    bc16:	061b      	lsls	r3, r3, #24
    bc18:	4313      	orrs	r3, r2
    bc1a:	1859      	adds	r1, r3, r1
    bc1c:	7a0b      	ldrb	r3, [r1, #8]
    bc1e:	7a4a      	ldrb	r2, [r1, #9]
    bc20:	0212      	lsls	r2, r2, #8
    bc22:	431a      	orrs	r2, r3
    bc24:	7a8b      	ldrb	r3, [r1, #10]
    bc26:	041b      	lsls	r3, r3, #16
    bc28:	431a      	orrs	r2, r3
    bc2a:	7acb      	ldrb	r3, [r1, #11]
    bc2c:	061b      	lsls	r3, r3, #24
    bc2e:	4313      	orrs	r3, r2
    bc30:	9a03      	ldr	r2, [sp, #12]
    bc32:	4293      	cmp	r3, r2
    bc34:	d8a3      	bhi.n	bb7e <DutyCycleCallback+0x66>
    bc36:	2b00      	cmp	r3, #0
    bc38:	d0a1      	beq.n	bb7e <DutyCycleCallback+0x66>
                minimSubBandTimer  = RegParams.pSubBandParams[i].subBandTimeout;
    bc3a:	9303      	str	r3, [sp, #12]
                found = 1;
    bc3c:	2301      	movs	r3, #1
    bc3e:	9304      	str	r3, [sp, #16]
    bc40:	e79d      	b.n	bb7e <DutyCycleCallback+0x66>
    if (( DutyCycleTimeout != 0 ))
    bc42:	9b05      	ldr	r3, [sp, #20]
    bc44:	2b00      	cmp	r3, #0
    bc46:	d031      	beq.n	bcac <DutyCycleCallback+0x194>
	    if (DutyCycleTimeout > RegParams.pDutyCycleTimer->lastTimerValue)
    bc48:	4937      	ldr	r1, [pc, #220]	; (bd28 <DutyCycleCallback+0x210>)
    bc4a:	7c0b      	ldrb	r3, [r1, #16]
    bc4c:	7c4a      	ldrb	r2, [r1, #17]
    bc4e:	0212      	lsls	r2, r2, #8
    bc50:	431a      	orrs	r2, r3
    bc52:	7c8b      	ldrb	r3, [r1, #18]
    bc54:	041b      	lsls	r3, r3, #16
    bc56:	431a      	orrs	r2, r3
    bc58:	7ccb      	ldrb	r3, [r1, #19]
    bc5a:	061b      	lsls	r3, r3, #24
    bc5c:	4313      	orrs	r3, r2
    bc5e:	7819      	ldrb	r1, [r3, #0]
    bc60:	785a      	ldrb	r2, [r3, #1]
    bc62:	0212      	lsls	r2, r2, #8
    bc64:	430a      	orrs	r2, r1
    bc66:	7899      	ldrb	r1, [r3, #2]
    bc68:	0409      	lsls	r1, r1, #16
    bc6a:	430a      	orrs	r2, r1
    bc6c:	78d9      	ldrb	r1, [r3, #3]
    bc6e:	0609      	lsls	r1, r1, #24
    bc70:	4311      	orrs	r1, r2
    bc72:	9a05      	ldr	r2, [sp, #20]
    bc74:	428a      	cmp	r2, r1
    bc76:	d90f      	bls.n	bc98 <DutyCycleCallback+0x180>
		    RegParams.cmnParams.paramsType2.aggregatedDutyCycleTimeout = DutyCycleTimeout - RegParams.pDutyCycleTimer->lastTimerValue;
    bc78:	1a51      	subs	r1, r2, r1
    bc7a:	4b2b      	ldr	r3, [pc, #172]	; (bd28 <DutyCycleCallback+0x210>)
    bc7c:	22ba      	movs	r2, #186	; 0xba
    bc7e:	32ff      	adds	r2, #255	; 0xff
    bc80:	5499      	strb	r1, [r3, r2]
    bc82:	0a0a      	lsrs	r2, r1, #8
    bc84:	33ba      	adds	r3, #186	; 0xba
    bc86:	33ff      	adds	r3, #255	; 0xff
    bc88:	705a      	strb	r2, [r3, #1]
    bc8a:	0c0a      	lsrs	r2, r1, #16
    bc8c:	709a      	strb	r2, [r3, #2]
    bc8e:	0e0a      	lsrs	r2, r1, #24
    bc90:	70da      	strb	r2, [r3, #3]
		if(DutyCycleTimeout)
    bc92:	2900      	cmp	r1, #0
    bc94:	d10e      	bne.n	bcb4 <DutyCycleCallback+0x19c>
    bc96:	e009      	b.n	bcac <DutyCycleCallback+0x194>
		    RegParams.cmnParams.paramsType2.aggregatedDutyCycleTimeout = 0;
    bc98:	4b23      	ldr	r3, [pc, #140]	; (bd28 <DutyCycleCallback+0x210>)
    bc9a:	2100      	movs	r1, #0
    bc9c:	22ba      	movs	r2, #186	; 0xba
    bc9e:	32ff      	adds	r2, #255	; 0xff
    bca0:	5499      	strb	r1, [r3, r2]
    bca2:	189b      	adds	r3, r3, r2
    bca4:	2200      	movs	r2, #0
    bca6:	705a      	strb	r2, [r3, #1]
    bca8:	709a      	strb	r2, [r3, #2]
    bcaa:	70da      	strb	r2, [r3, #3]
    if ( found == 1 )
    bcac:	9b04      	ldr	r3, [sp, #16]
    bcae:	2b00      	cmp	r3, #0
    bcb0:	d02a      	beq.n	bd08 <DutyCycleCallback+0x1f0>
    bcb2:	2100      	movs	r1, #0
    bcb4:	9a03      	ldr	r2, [sp, #12]
    bcb6:	4291      	cmp	r1, r2
    bcb8:	d200      	bcs.n	bcbc <DutyCycleCallback+0x1a4>
    bcba:	0011      	movs	r1, r2
        RegParams.pDutyCycleTimer->lastTimerValue = nextTimer;
    bcbc:	4b1a      	ldr	r3, [pc, #104]	; (bd28 <DutyCycleCallback+0x210>)
    bcbe:	7c1a      	ldrb	r2, [r3, #16]
    bcc0:	7c58      	ldrb	r0, [r3, #17]
    bcc2:	0200      	lsls	r0, r0, #8
    bcc4:	4310      	orrs	r0, r2
    bcc6:	7c9a      	ldrb	r2, [r3, #18]
    bcc8:	0412      	lsls	r2, r2, #16
    bcca:	4310      	orrs	r0, r2
    bccc:	7cda      	ldrb	r2, [r3, #19]
    bcce:	0612      	lsls	r2, r2, #24
    bcd0:	4302      	orrs	r2, r0
    bcd2:	7011      	strb	r1, [r2, #0]
    bcd4:	0a08      	lsrs	r0, r1, #8
    bcd6:	7050      	strb	r0, [r2, #1]
    bcd8:	0c08      	lsrs	r0, r1, #16
    bcda:	7090      	strb	r0, [r2, #2]
    bcdc:	0e08      	lsrs	r0, r1, #24
    bcde:	70d0      	strb	r0, [r2, #3]
		SwTimerStart (RegParams.pDutyCycleTimer->timerId, MS_TO_US(nextTimer), SW_TIMEOUT_RELATIVE, (void *)DutyCycleCallback, NULL);
    bce0:	22fa      	movs	r2, #250	; 0xfa
    bce2:	0092      	lsls	r2, r2, #2
    bce4:	4351      	muls	r1, r2
    bce6:	7c18      	ldrb	r0, [r3, #16]
    bce8:	7c5a      	ldrb	r2, [r3, #17]
    bcea:	0212      	lsls	r2, r2, #8
    bcec:	4310      	orrs	r0, r2
    bcee:	7c9a      	ldrb	r2, [r3, #18]
    bcf0:	0412      	lsls	r2, r2, #16
    bcf2:	4302      	orrs	r2, r0
    bcf4:	7cdb      	ldrb	r3, [r3, #19]
    bcf6:	061b      	lsls	r3, r3, #24
    bcf8:	4313      	orrs	r3, r2
    bcfa:	7918      	ldrb	r0, [r3, #4]
    bcfc:	2300      	movs	r3, #0
    bcfe:	9300      	str	r3, [sp, #0]
    bd00:	4b0a      	ldr	r3, [pc, #40]	; (bd2c <DutyCycleCallback+0x214>)
    bd02:	2200      	movs	r2, #0
    bd04:	4c0a      	ldr	r4, [pc, #40]	; (bd30 <DutyCycleCallback+0x218>)
    bd06:	47a0      	blx	r4
}
    bd08:	b007      	add	sp, #28
    bd0a:	bc3c      	pop	{r2, r3, r4, r5}
    bd0c:	4690      	mov	r8, r2
    bd0e:	4699      	mov	r9, r3
    bd10:	46a2      	mov	sl, r4
    bd12:	46ab      	mov	fp, r5
    bd14:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (( DutyCycleTimeout != 0 ))
    bd16:	9b05      	ldr	r3, [sp, #20]
    bd18:	2b00      	cmp	r3, #0
    bd1a:	d0f5      	beq.n	bd08 <DutyCycleCallback+0x1f0>
    bool found = 0;
    bd1c:	2300      	movs	r3, #0
    bd1e:	9304      	str	r3, [sp, #16]
    uint32_t minimSubBandTimer = UINT32_MAX;
    bd20:	3b01      	subs	r3, #1
    bd22:	9303      	str	r3, [sp, #12]
    bd24:	e790      	b.n	bc48 <DutyCycleCallback+0x130>
    bd26:	46c0      	nop			; (mov r8, r8)
    bd28:	200024d0 	.word	0x200024d0
    bd2c:	0000bb19 	.word	0x0000bb19
    bd30:	0000ee0d 	.word	0x0000ee0d

0000bd34 <setLBTTimer>:
{
    bd34:	b5f0      	push	{r4, r5, r6, r7, lr}
    bd36:	46de      	mov	lr, fp
    bd38:	4657      	mov	r7, sl
    bd3a:	464e      	mov	r6, r9
    bd3c:	4645      	mov	r5, r8
    bd3e:	b5e0      	push	{r5, r6, r7, lr}
    bd40:	b085      	sub	sp, #20
    i = RegParams.lastUsedChannelIndex;
    bd42:	4a70      	ldr	r2, [pc, #448]	; (bf04 <setLBTTimer+0x1d0>)
    bd44:	232f      	movs	r3, #47	; 0x2f
	RegParams.cmnParams.paramsType2.channelTimer[i] = LBT_TRANSMIT_CHANNEL_PAUSE_DURATION;
    bd46:	5cd4      	ldrb	r4, [r2, r3]
    bd48:	0023      	movs	r3, r4
    bd4a:	3358      	adds	r3, #88	; 0x58
    bd4c:	009b      	lsls	r3, r3, #2
    bd4e:	18d3      	adds	r3, r2, r3
    bd50:	2132      	movs	r1, #50	; 0x32
    bd52:	7219      	strb	r1, [r3, #8]
    bd54:	2100      	movs	r1, #0
    bd56:	7259      	strb	r1, [r3, #9]
    bd58:	7299      	strb	r1, [r3, #10]
    bd5a:	72d9      	strb	r1, [r3, #11]
	if(SwTimerIsRunning(pLBTTimer->timerId))
    bd5c:	23d6      	movs	r3, #214	; 0xd6
    bd5e:	005b      	lsls	r3, r3, #1
    bd60:	5cd0      	ldrb	r0, [r2, r3]
    bd62:	4b69      	ldr	r3, [pc, #420]	; (bf08 <setLBTTimer+0x1d4>)
    bd64:	4798      	blx	r3
    bd66:	2800      	cmp	r0, #0
    bd68:	d12f      	bne.n	bdca <setLBTTimer+0x96>
		minim = RegParams.cmnParams.paramsType2.channelTimer[i];
    bd6a:	4866      	ldr	r0, [pc, #408]	; (bf04 <setLBTTimer+0x1d0>)
    bd6c:	0023      	movs	r3, r4
    bd6e:	3358      	adds	r3, #88	; 0x58
    bd70:	009b      	lsls	r3, r3, #2
    bd72:	18c3      	adds	r3, r0, r3
    bd74:	7a19      	ldrb	r1, [r3, #8]
    bd76:	7a5a      	ldrb	r2, [r3, #9]
    bd78:	0212      	lsls	r2, r2, #8
    bd7a:	4311      	orrs	r1, r2
    bd7c:	7a9a      	ldrb	r2, [r3, #10]
    bd7e:	0412      	lsls	r2, r2, #16
    bd80:	430a      	orrs	r2, r1
    bd82:	7ad9      	ldrb	r1, [r3, #11]
    bd84:	0609      	lsls	r1, r1, #24
    bd86:	4311      	orrs	r1, r2
    bd88:	4689      	mov	r9, r1
	for(i = 0; i < RegParams.maxChannels; i++)
    bd8a:	232a      	movs	r3, #42	; 0x2a
    bd8c:	56c3      	ldrsb	r3, [r0, r3]
    bd8e:	4698      	mov	r8, r3
    bd90:	2b00      	cmp	r3, #0
    bd92:	dc00      	bgt.n	bd96 <setLBTTimer+0x62>
    bd94:	e08b      	b.n	beae <setLBTTimer+0x17a>
    uint32_t delta = 0, minim = UINT32_MAX, ticks;
    bd96:	2300      	movs	r3, #0
    bd98:	469a      	mov	sl, r3
		found = 1;
    bd9a:	3301      	adds	r3, #1
    bd9c:	9303      	str	r3, [sp, #12]
		if(i != RegParams.lastUsedChannelIndex)
    bd9e:	4a59      	ldr	r2, [pc, #356]	; (bf04 <setLBTTimer+0x1d0>)
    bda0:	232f      	movs	r3, #47	; 0x2f
    bda2:	5cd0      	ldrb	r0, [r2, r3]
			if((RegParams.pChParams[i].status == ENABLED) && (RegParams.cmnParams.paramsType2.channelTimer[i] != 0))
    bda4:	7911      	ldrb	r1, [r2, #4]
    bda6:	7953      	ldrb	r3, [r2, #5]
    bda8:	021b      	lsls	r3, r3, #8
    bdaa:	430b      	orrs	r3, r1
    bdac:	7991      	ldrb	r1, [r2, #6]
    bdae:	0409      	lsls	r1, r1, #16
    bdb0:	430b      	orrs	r3, r1
    bdb2:	79d1      	ldrb	r1, [r2, #7]
    bdb4:	0609      	lsls	r1, r1, #24
    bdb6:	4319      	orrs	r1, r3
    bdb8:	2600      	movs	r6, #0
    bdba:	2200      	movs	r2, #0
					RegParams.cmnParams.paramsType2.channelTimer[i] = 0;
    bdbc:	2300      	movs	r3, #0
    bdbe:	469c      	mov	ip, r3
					RegParams.cmnParams.paramsType2.channelTimer[i] = RegParams.cmnParams.paramsType2.channelTimer[i] - delta;
    bdc0:	4653      	mov	r3, sl
    bdc2:	9302      	str	r3, [sp, #8]
    bdc4:	468b      	mov	fp, r1
    bdc6:	4645      	mov	r5, r8
    bdc8:	e03b      	b.n	be42 <setLBTTimer+0x10e>
		SwTimerStop(pLBTTimer->timerId);
    bdca:	4c4e      	ldr	r4, [pc, #312]	; (bf04 <setLBTTimer+0x1d0>)
    bdcc:	25d6      	movs	r5, #214	; 0xd6
    bdce:	006d      	lsls	r5, r5, #1
    bdd0:	5d60      	ldrb	r0, [r4, r5]
    bdd2:	4b4e      	ldr	r3, [pc, #312]	; (bf0c <setLBTTimer+0x1d8>)
    bdd4:	4798      	blx	r3
		ticks = SwTimerReadValue(pLBTTimer->timerId);
    bdd6:	5d60      	ldrb	r0, [r4, r5]
    bdd8:	4b4d      	ldr	r3, [pc, #308]	; (bf10 <setLBTTimer+0x1dc>)
    bdda:	4798      	blx	r3
	for(i = 0; i < RegParams.maxChannels; i++)
    bddc:	232a      	movs	r3, #42	; 0x2a
    bdde:	56e3      	ldrsb	r3, [r4, r3]
    bde0:	4698      	mov	r8, r3
    bde2:	2b00      	cmp	r3, #0
    bde4:	dd66      	ble.n	beb4 <setLBTTimer+0x180>
		delta = pLBTTimer->lastTimerValue - US_TO_MS(ticks);
    bde6:	4a47      	ldr	r2, [pc, #284]	; (bf04 <setLBTTimer+0x1d0>)
    bde8:	23d4      	movs	r3, #212	; 0xd4
    bdea:	005b      	lsls	r3, r3, #1
    bdec:	5cd4      	ldrb	r4, [r2, r3]
    bdee:	23aa      	movs	r3, #170	; 0xaa
    bdf0:	33ff      	adds	r3, #255	; 0xff
    bdf2:	5cd3      	ldrb	r3, [r2, r3]
    bdf4:	021b      	lsls	r3, r3, #8
    bdf6:	4323      	orrs	r3, r4
    bdf8:	21d5      	movs	r1, #213	; 0xd5
    bdfa:	0049      	lsls	r1, r1, #1
    bdfc:	5c54      	ldrb	r4, [r2, r1]
    bdfe:	0424      	lsls	r4, r4, #16
    be00:	4323      	orrs	r3, r4
    be02:	21ac      	movs	r1, #172	; 0xac
    be04:	31ff      	adds	r1, #255	; 0xff
    be06:	5c54      	ldrb	r4, [r2, r1]
    be08:	0624      	lsls	r4, r4, #24
    be0a:	431c      	orrs	r4, r3
    be0c:	21fa      	movs	r1, #250	; 0xfa
    be0e:	0089      	lsls	r1, r1, #2
    be10:	4b40      	ldr	r3, [pc, #256]	; (bf14 <setLBTTimer+0x1e0>)
    be12:	4798      	blx	r3
    be14:	1a23      	subs	r3, r4, r0
    be16:	469a      	mov	sl, r3
    uint32_t delta = 0, minim = UINT32_MAX, ticks;
    be18:	2301      	movs	r3, #1
    be1a:	425b      	negs	r3, r3
    be1c:	4699      	mov	r9, r3
    bool found = 0;
    be1e:	2300      	movs	r3, #0
    be20:	9303      	str	r3, [sp, #12]
    be22:	e7bc      	b.n	bd9e <setLBTTimer+0x6a>
					RegParams.cmnParams.paramsType2.channelTimer[i] = 0;
    be24:	3658      	adds	r6, #88	; 0x58
    be26:	00b6      	lsls	r6, r6, #2
    be28:	4b36      	ldr	r3, [pc, #216]	; (bf04 <setLBTTimer+0x1d0>)
    be2a:	4698      	mov	r8, r3
    be2c:	4446      	add	r6, r8
    be2e:	4663      	mov	r3, ip
    be30:	7233      	strb	r3, [r6, #8]
    be32:	7273      	strb	r3, [r6, #9]
    be34:	72b3      	strb	r3, [r6, #10]
    be36:	72f3      	strb	r3, [r6, #11]
	for(i = 0; i < RegParams.maxChannels; i++)
    be38:	3201      	adds	r2, #1
    be3a:	b2d2      	uxtb	r2, r2
    be3c:	0016      	movs	r6, r2
    be3e:	42aa      	cmp	r2, r5
    be40:	da32      	bge.n	bea8 <setLBTTimer+0x174>
		if(i != RegParams.lastUsedChannelIndex)
    be42:	4290      	cmp	r0, r2
    be44:	d0f8      	beq.n	be38 <setLBTTimer+0x104>
			if((RegParams.pChParams[i].status == ENABLED) && (RegParams.cmnParams.paramsType2.channelTimer[i] != 0))
    be46:	0053      	lsls	r3, r2, #1
    be48:	4659      	mov	r1, fp
    be4a:	5c5c      	ldrb	r4, [r3, r1]
    be4c:	2c00      	cmp	r4, #0
    be4e:	d0f3      	beq.n	be38 <setLBTTimer+0x104>
    be50:	0033      	movs	r3, r6
    be52:	3358      	adds	r3, #88	; 0x58
    be54:	009b      	lsls	r3, r3, #2
    be56:	4f2b      	ldr	r7, [pc, #172]	; (bf04 <setLBTTimer+0x1d0>)
    be58:	46b8      	mov	r8, r7
    be5a:	4443      	add	r3, r8
    be5c:	7a1f      	ldrb	r7, [r3, #8]
    be5e:	46ba      	mov	sl, r7
    be60:	7a5f      	ldrb	r7, [r3, #9]
    be62:	023f      	lsls	r7, r7, #8
    be64:	46b8      	mov	r8, r7
    be66:	4657      	mov	r7, sl
    be68:	4641      	mov	r1, r8
    be6a:	430f      	orrs	r7, r1
    be6c:	7a99      	ldrb	r1, [r3, #10]
    be6e:	0409      	lsls	r1, r1, #16
    be70:	430f      	orrs	r7, r1
    be72:	7adb      	ldrb	r3, [r3, #11]
    be74:	061b      	lsls	r3, r3, #24
    be76:	433b      	orrs	r3, r7
    be78:	d0de      	beq.n	be38 <setLBTTimer+0x104>
				if(RegParams.cmnParams.paramsType2.channelTimer[i] > delta)
    be7a:	9f02      	ldr	r7, [sp, #8]
    be7c:	42bb      	cmp	r3, r7
    be7e:	d9d1      	bls.n	be24 <setLBTTimer+0xf0>
					RegParams.cmnParams.paramsType2.channelTimer[i] = RegParams.cmnParams.paramsType2.channelTimer[i] - delta;
    be80:	1bdb      	subs	r3, r3, r7
    be82:	3658      	adds	r6, #88	; 0x58
    be84:	00b6      	lsls	r6, r6, #2
    be86:	491f      	ldr	r1, [pc, #124]	; (bf04 <setLBTTimer+0x1d0>)
    be88:	4688      	mov	r8, r1
    be8a:	4446      	add	r6, r8
    be8c:	7233      	strb	r3, [r6, #8]
    be8e:	0a19      	lsrs	r1, r3, #8
    be90:	7271      	strb	r1, [r6, #9]
    be92:	0c19      	lsrs	r1, r3, #16
    be94:	72b1      	strb	r1, [r6, #10]
    be96:	0e19      	lsrs	r1, r3, #24
    be98:	72f1      	strb	r1, [r6, #11]
				if((RegParams.cmnParams.paramsType2.channelTimer[i] <= minim) && (RegParams.cmnParams.paramsType2.channelTimer[i] != 0))
    be9a:	454b      	cmp	r3, r9
    be9c:	d8cc      	bhi.n	be38 <setLBTTimer+0x104>
    be9e:	2b00      	cmp	r3, #0
    bea0:	d0ca      	beq.n	be38 <setLBTTimer+0x104>
    bea2:	4699      	mov	r9, r3
					found = 1;
    bea4:	9403      	str	r4, [sp, #12]
    bea6:	e7c7      	b.n	be38 <setLBTTimer+0x104>
	if((found == 1) && minim)
    bea8:	9b03      	ldr	r3, [sp, #12]
    beaa:	2b00      	cmp	r3, #0
    beac:	d002      	beq.n	beb4 <setLBTTimer+0x180>
    beae:	464b      	mov	r3, r9
    beb0:	2b00      	cmp	r3, #0
    beb2:	d107      	bne.n	bec4 <setLBTTimer+0x190>
}
    beb4:	2008      	movs	r0, #8
    beb6:	b005      	add	sp, #20
    beb8:	bc3c      	pop	{r2, r3, r4, r5}
    beba:	4690      	mov	r8, r2
    bebc:	4699      	mov	r9, r3
    bebe:	46a2      	mov	sl, r4
    bec0:	46ab      	mov	fp, r5
    bec2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		pLBTTimer->lastTimerValue = minim;
    bec4:	4b0f      	ldr	r3, [pc, #60]	; (bf04 <setLBTTimer+0x1d0>)
    bec6:	22d4      	movs	r2, #212	; 0xd4
    bec8:	0052      	lsls	r2, r2, #1
    beca:	4649      	mov	r1, r9
    becc:	5499      	strb	r1, [r3, r2]
    bece:	464a      	mov	r2, r9
    bed0:	0a11      	lsrs	r1, r2, #8
    bed2:	001a      	movs	r2, r3
    bed4:	32a9      	adds	r2, #169	; 0xa9
    bed6:	32ff      	adds	r2, #255	; 0xff
    bed8:	7051      	strb	r1, [r2, #1]
    beda:	4649      	mov	r1, r9
    bedc:	0c09      	lsrs	r1, r1, #16
    bede:	7091      	strb	r1, [r2, #2]
    bee0:	4649      	mov	r1, r9
    bee2:	0e09      	lsrs	r1, r1, #24
    bee4:	70d1      	strb	r1, [r2, #3]
		SwTimerStart (pLBTTimer->timerId, MS_TO_US(minim), SW_TIMEOUT_RELATIVE, (void *)LBTChannelPauseCallback, NULL);
    bee6:	21fa      	movs	r1, #250	; 0xfa
    bee8:	0089      	lsls	r1, r1, #2
    beea:	464a      	mov	r2, r9
    beec:	4351      	muls	r1, r2
    beee:	22d6      	movs	r2, #214	; 0xd6
    bef0:	0052      	lsls	r2, r2, #1
    bef2:	5c98      	ldrb	r0, [r3, r2]
    bef4:	2300      	movs	r3, #0
    bef6:	9300      	str	r3, [sp, #0]
    bef8:	4b07      	ldr	r3, [pc, #28]	; (bf18 <setLBTTimer+0x1e4>)
    befa:	2200      	movs	r2, #0
    befc:	4c07      	ldr	r4, [pc, #28]	; (bf1c <setLBTTimer+0x1e8>)
    befe:	47a0      	blx	r4
    bf00:	e7d8      	b.n	beb4 <setLBTTimer+0x180>
    bf02:	46c0      	nop			; (mov r8, r8)
    bf04:	200024d0 	.word	0x200024d0
    bf08:	0000efa5 	.word	0x0000efa5
    bf0c:	0000f125 	.word	0x0000f125
    bf10:	0000efb9 	.word	0x0000efb9
    bf14:	00016625 	.word	0x00016625
    bf18:	0000bf21 	.word	0x0000bf21
    bf1c:	0000ee0d 	.word	0x0000ee0d

0000bf20 <LBTChannelPauseCallback>:
{
    bf20:	b5f0      	push	{r4, r5, r6, r7, lr}
    bf22:	46de      	mov	lr, fp
    bf24:	4657      	mov	r7, sl
    bf26:	464e      	mov	r6, r9
    bf28:	4645      	mov	r5, r8
    bf2a:	b5e0      	push	{r5, r6, r7, lr}
    bf2c:	b085      	sub	sp, #20
    for (i=0; i < RegParams.maxChannels; i++)
    bf2e:	232a      	movs	r3, #42	; 0x2a
    bf30:	4a49      	ldr	r2, [pc, #292]	; (c058 <LBTChannelPauseCallback+0x138>)
    bf32:	56d6      	ldrsb	r6, [r2, r3]
    bf34:	2e00      	cmp	r6, #0
    bf36:	dd68      	ble.n	c00a <LBTChannelPauseCallback+0xea>
        if ((RegParams.pChParams[i].status == ENABLED) && ( RegParams.cmnParams.paramsType2.channelTimer[i] != 0 ))
    bf38:	0013      	movs	r3, r2
    bf3a:	7915      	ldrb	r5, [r2, #4]
    bf3c:	7952      	ldrb	r2, [r2, #5]
    bf3e:	0212      	lsls	r2, r2, #8
    bf40:	432a      	orrs	r2, r5
    bf42:	799d      	ldrb	r5, [r3, #6]
    bf44:	042d      	lsls	r5, r5, #16
    bf46:	432a      	orrs	r2, r5
    bf48:	79dd      	ldrb	r5, [r3, #7]
    bf4a:	062d      	lsls	r5, r5, #24
    bf4c:	4315      	orrs	r5, r2
            if ( RegParams.cmnParams.paramsType2.channelTimer[i] > pLBTTimer->lastTimerValue)
    bf4e:	22d4      	movs	r2, #212	; 0xd4
    bf50:	0052      	lsls	r2, r2, #1
    bf52:	5c9f      	ldrb	r7, [r3, r2]
    bf54:	22aa      	movs	r2, #170	; 0xaa
    bf56:	32ff      	adds	r2, #255	; 0xff
    bf58:	5c9a      	ldrb	r2, [r3, r2]
    bf5a:	0212      	lsls	r2, r2, #8
    bf5c:	433a      	orrs	r2, r7
    bf5e:	21d5      	movs	r1, #213	; 0xd5
    bf60:	0049      	lsls	r1, r1, #1
    bf62:	5c5f      	ldrb	r7, [r3, r1]
    bf64:	043f      	lsls	r7, r7, #16
    bf66:	433a      	orrs	r2, r7
    bf68:	21ac      	movs	r1, #172	; 0xac
    bf6a:	31ff      	adds	r1, #255	; 0xff
    bf6c:	5c5f      	ldrb	r7, [r3, r1]
    bf6e:	063f      	lsls	r7, r7, #24
    bf70:	4317      	orrs	r7, r2
    bf72:	9703      	str	r7, [sp, #12]
    bf74:	2000      	movs	r0, #0
    bf76:	2300      	movs	r3, #0
    bf78:	2200      	movs	r2, #0
    bf7a:	4691      	mov	r9, r2
    bf7c:	3a01      	subs	r2, #1
    bf7e:	4690      	mov	r8, r2
                RegParams.cmnParams.paramsType2.channelTimer[i] = 0;
    bf80:	2200      	movs	r2, #0
    bf82:	4694      	mov	ip, r2
    bf84:	e00e      	b.n	bfa4 <LBTChannelPauseCallback+0x84>
    bf86:	3058      	adds	r0, #88	; 0x58
    bf88:	0080      	lsls	r0, r0, #2
    bf8a:	4a33      	ldr	r2, [pc, #204]	; (c058 <LBTChannelPauseCallback+0x138>)
    bf8c:	4692      	mov	sl, r2
    bf8e:	4450      	add	r0, sl
    bf90:	4662      	mov	r2, ip
    bf92:	7202      	strb	r2, [r0, #8]
    bf94:	7242      	strb	r2, [r0, #9]
    bf96:	7282      	strb	r2, [r0, #10]
    bf98:	72c2      	strb	r2, [r0, #11]
    for (i=0; i < RegParams.maxChannels; i++)
    bf9a:	3301      	adds	r3, #1
    bf9c:	b2db      	uxtb	r3, r3
    bf9e:	0018      	movs	r0, r3
    bfa0:	42b3      	cmp	r3, r6
    bfa2:	da2f      	bge.n	c004 <LBTChannelPauseCallback+0xe4>
        if ((RegParams.pChParams[i].status == ENABLED) && ( RegParams.cmnParams.paramsType2.channelTimer[i] != 0 ))
    bfa4:	005a      	lsls	r2, r3, #1
    bfa6:	5d54      	ldrb	r4, [r2, r5]
    bfa8:	2c00      	cmp	r4, #0
    bfaa:	d0f6      	beq.n	bf9a <LBTChannelPauseCallback+0x7a>
    bfac:	0002      	movs	r2, r0
    bfae:	3258      	adds	r2, #88	; 0x58
    bfb0:	0092      	lsls	r2, r2, #2
    bfb2:	4929      	ldr	r1, [pc, #164]	; (c058 <LBTChannelPauseCallback+0x138>)
    bfb4:	468a      	mov	sl, r1
    bfb6:	4452      	add	r2, sl
    bfb8:	7a17      	ldrb	r7, [r2, #8]
    bfba:	46bb      	mov	fp, r7
    bfbc:	7a57      	ldrb	r7, [r2, #9]
    bfbe:	023f      	lsls	r7, r7, #8
    bfc0:	46ba      	mov	sl, r7
    bfc2:	465f      	mov	r7, fp
    bfc4:	4651      	mov	r1, sl
    bfc6:	430f      	orrs	r7, r1
    bfc8:	7a91      	ldrb	r1, [r2, #10]
    bfca:	0409      	lsls	r1, r1, #16
    bfcc:	430f      	orrs	r7, r1
    bfce:	7ad2      	ldrb	r2, [r2, #11]
    bfd0:	0612      	lsls	r2, r2, #24
    bfd2:	433a      	orrs	r2, r7
    bfd4:	d0e1      	beq.n	bf9a <LBTChannelPauseCallback+0x7a>
            if ( RegParams.cmnParams.paramsType2.channelTimer[i] > pLBTTimer->lastTimerValue)
    bfd6:	9f03      	ldr	r7, [sp, #12]
    bfd8:	42ba      	cmp	r2, r7
    bfda:	d9d4      	bls.n	bf86 <LBTChannelPauseCallback+0x66>
                RegParams.cmnParams.paramsType2.channelTimer[i] = RegParams.cmnParams.paramsType2.channelTimer[i] - pLBTTimer->lastTimerValue;
    bfdc:	1bd2      	subs	r2, r2, r7
    bfde:	3058      	adds	r0, #88	; 0x58
    bfe0:	0080      	lsls	r0, r0, #2
    bfe2:	491d      	ldr	r1, [pc, #116]	; (c058 <LBTChannelPauseCallback+0x138>)
    bfe4:	468a      	mov	sl, r1
    bfe6:	4450      	add	r0, sl
    bfe8:	7202      	strb	r2, [r0, #8]
    bfea:	0a11      	lsrs	r1, r2, #8
    bfec:	7241      	strb	r1, [r0, #9]
    bfee:	0c11      	lsrs	r1, r2, #16
    bff0:	7281      	strb	r1, [r0, #10]
    bff2:	0e11      	lsrs	r1, r2, #24
    bff4:	72c1      	strb	r1, [r0, #11]
            if ( (RegParams.cmnParams.paramsType2.channelTimer[i] <= minim) && (RegParams.cmnParams.paramsType2.channelTimer[i] != 0) )
    bff6:	4542      	cmp	r2, r8
    bff8:	d8cf      	bhi.n	bf9a <LBTChannelPauseCallback+0x7a>
    bffa:	2a00      	cmp	r2, #0
    bffc:	d0cd      	beq.n	bf9a <LBTChannelPauseCallback+0x7a>
                found = 1;
    bffe:	46a1      	mov	r9, r4
            if ( (RegParams.cmnParams.paramsType2.channelTimer[i] <= minim) && (RegParams.cmnParams.paramsType2.channelTimer[i] != 0) )
    c000:	4690      	mov	r8, r2
    c002:	e7ca      	b.n	bf9a <LBTChannelPauseCallback+0x7a>
    if ( found == 1 )
    c004:	464b      	mov	r3, r9
    c006:	2b00      	cmp	r3, #0
    c008:	d106      	bne.n	c018 <LBTChannelPauseCallback+0xf8>
}
    c00a:	b005      	add	sp, #20
    c00c:	bc3c      	pop	{r2, r3, r4, r5}
    c00e:	4690      	mov	r8, r2
    c010:	4699      	mov	r9, r3
    c012:	46a2      	mov	sl, r4
    c014:	46ab      	mov	fp, r5
    c016:	bdf0      	pop	{r4, r5, r6, r7, pc}
        pLBTTimer->lastTimerValue = minim;
    c018:	4b0f      	ldr	r3, [pc, #60]	; (c058 <LBTChannelPauseCallback+0x138>)
    c01a:	22d4      	movs	r2, #212	; 0xd4
    c01c:	0052      	lsls	r2, r2, #1
    c01e:	4641      	mov	r1, r8
    c020:	5499      	strb	r1, [r3, r2]
    c022:	4642      	mov	r2, r8
    c024:	0a11      	lsrs	r1, r2, #8
    c026:	001a      	movs	r2, r3
    c028:	32a9      	adds	r2, #169	; 0xa9
    c02a:	32ff      	adds	r2, #255	; 0xff
    c02c:	7051      	strb	r1, [r2, #1]
    c02e:	4641      	mov	r1, r8
    c030:	0c09      	lsrs	r1, r1, #16
    c032:	7091      	strb	r1, [r2, #2]
    c034:	4641      	mov	r1, r8
    c036:	0e09      	lsrs	r1, r1, #24
    c038:	70d1      	strb	r1, [r2, #3]
        SwTimerStart (pLBTTimer->timerId, MS_TO_US(minim), SW_TIMEOUT_RELATIVE, (void *)LBTChannelPauseCallback, NULL);
    c03a:	21fa      	movs	r1, #250	; 0xfa
    c03c:	0089      	lsls	r1, r1, #2
    c03e:	4642      	mov	r2, r8
    c040:	4351      	muls	r1, r2
    c042:	22d6      	movs	r2, #214	; 0xd6
    c044:	0052      	lsls	r2, r2, #1
    c046:	5c98      	ldrb	r0, [r3, r2]
    c048:	2300      	movs	r3, #0
    c04a:	9300      	str	r3, [sp, #0]
    c04c:	4b03      	ldr	r3, [pc, #12]	; (c05c <LBTChannelPauseCallback+0x13c>)
    c04e:	2200      	movs	r2, #0
    c050:	4c03      	ldr	r4, [pc, #12]	; (c060 <LBTChannelPauseCallback+0x140>)
    c052:	47a0      	blx	r4
}
    c054:	e7d9      	b.n	c00a <LBTChannelPauseCallback+0xea>
    c056:	46c0      	nop			; (mov r8, r8)
    c058:	200024d0 	.word	0x200024d0
    c05c:	0000bf21 	.word	0x0000bf21
    c060:	0000ee0d 	.word	0x0000ee0d

0000c064 <JoinDutyCycleCallback>:
{   
    c064:	b510      	push	{r4, lr}
    c066:	b082      	sub	sp, #8
	if(RegParams.pJoinDutyCycleTimer->remainingtime!=0)
    c068:	492e      	ldr	r1, [pc, #184]	; (c124 <JoinDutyCycleCallback+0xc0>)
    c06a:	7d0b      	ldrb	r3, [r1, #20]
    c06c:	7d4a      	ldrb	r2, [r1, #21]
    c06e:	0212      	lsls	r2, r2, #8
    c070:	431a      	orrs	r2, r3
    c072:	7d8b      	ldrb	r3, [r1, #22]
    c074:	041b      	lsls	r3, r3, #16
    c076:	431a      	orrs	r2, r3
    c078:	7dcb      	ldrb	r3, [r1, #23]
    c07a:	061b      	lsls	r3, r3, #24
    c07c:	4313      	orrs	r3, r2
    c07e:	7919      	ldrb	r1, [r3, #4]
    c080:	795a      	ldrb	r2, [r3, #5]
    c082:	0212      	lsls	r2, r2, #8
    c084:	430a      	orrs	r2, r1
    c086:	7999      	ldrb	r1, [r3, #6]
    c088:	0409      	lsls	r1, r1, #16
    c08a:	430a      	orrs	r2, r1
    c08c:	79d9      	ldrb	r1, [r3, #7]
    c08e:	0609      	lsls	r1, r1, #24
    c090:	4311      	orrs	r1, r2
    c092:	d03c      	beq.n	c10e <JoinDutyCycleCallback+0xaa>
		if(RegParams.pJoinDutyCycleTimer->remainingtime>US_TO_MS(SWTIMER_MAX_TIMEOUT))
    c094:	4a24      	ldr	r2, [pc, #144]	; (c128 <JoinDutyCycleCallback+0xc4>)
    c096:	4291      	cmp	r1, r2
    c098:	d91e      	bls.n	c0d8 <JoinDutyCycleCallback+0x74>
			RegParams.pJoinDutyCycleTimer->remainingtime = RegParams.pJoinDutyCycleTimer->remainingtime-(US_TO_MS(SWTIMER_MAX_TIMEOUT));
    c09a:	4a24      	ldr	r2, [pc, #144]	; (c12c <JoinDutyCycleCallback+0xc8>)
    c09c:	4694      	mov	ip, r2
    c09e:	4461      	add	r1, ip
    c0a0:	7119      	strb	r1, [r3, #4]
    c0a2:	0a0a      	lsrs	r2, r1, #8
    c0a4:	715a      	strb	r2, [r3, #5]
    c0a6:	0c0a      	lsrs	r2, r1, #16
    c0a8:	719a      	strb	r2, [r3, #6]
    c0aa:	0e09      	lsrs	r1, r1, #24
    c0ac:	71d9      	strb	r1, [r3, #7]
			SwTimerStart(RegParams.pJoinDutyCycleTimer->timerId, SWTIMER_MAX_TIMEOUT, SW_TIMEOUT_RELATIVE, (void *)JoinDutyCycleCallback, NULL);
    c0ae:	491d      	ldr	r1, [pc, #116]	; (c124 <JoinDutyCycleCallback+0xc0>)
    c0b0:	7d0b      	ldrb	r3, [r1, #20]
    c0b2:	7d4a      	ldrb	r2, [r1, #21]
    c0b4:	0212      	lsls	r2, r2, #8
    c0b6:	431a      	orrs	r2, r3
    c0b8:	7d8b      	ldrb	r3, [r1, #22]
    c0ba:	041b      	lsls	r3, r3, #16
    c0bc:	431a      	orrs	r2, r3
    c0be:	7dcb      	ldrb	r3, [r1, #23]
    c0c0:	061b      	lsls	r3, r3, #24
    c0c2:	4313      	orrs	r3, r2
    c0c4:	7a18      	ldrb	r0, [r3, #8]
    c0c6:	2300      	movs	r3, #0
    c0c8:	9300      	str	r3, [sp, #0]
    c0ca:	4b19      	ldr	r3, [pc, #100]	; (c130 <JoinDutyCycleCallback+0xcc>)
    c0cc:	2200      	movs	r2, #0
    c0ce:	4919      	ldr	r1, [pc, #100]	; (c134 <JoinDutyCycleCallback+0xd0>)
    c0d0:	4c19      	ldr	r4, [pc, #100]	; (c138 <JoinDutyCycleCallback+0xd4>)
    c0d2:	47a0      	blx	r4
}
    c0d4:	b002      	add	sp, #8
    c0d6:	bd10      	pop	{r4, pc}
			SwTimerStart(RegParams.pJoinDutyCycleTimer->timerId, MS_TO_US(RegParams.pJoinDutyCycleTimer->remainingtime), SW_TIMEOUT_RELATIVE, (void *)JoinDutyCycleCallback, NULL);
    c0d8:	22fa      	movs	r2, #250	; 0xfa
    c0da:	0092      	lsls	r2, r2, #2
    c0dc:	4351      	muls	r1, r2
    c0de:	7a18      	ldrb	r0, [r3, #8]
    c0e0:	2300      	movs	r3, #0
    c0e2:	9300      	str	r3, [sp, #0]
    c0e4:	4b12      	ldr	r3, [pc, #72]	; (c130 <JoinDutyCycleCallback+0xcc>)
    c0e6:	2200      	movs	r2, #0
    c0e8:	4c13      	ldr	r4, [pc, #76]	; (c138 <JoinDutyCycleCallback+0xd4>)
    c0ea:	47a0      	blx	r4
			RegParams.pJoinDutyCycleTimer->remainingtime =0;
    c0ec:	490d      	ldr	r1, [pc, #52]	; (c124 <JoinDutyCycleCallback+0xc0>)
    c0ee:	7d0b      	ldrb	r3, [r1, #20]
    c0f0:	7d4a      	ldrb	r2, [r1, #21]
    c0f2:	0212      	lsls	r2, r2, #8
    c0f4:	431a      	orrs	r2, r3
    c0f6:	7d8b      	ldrb	r3, [r1, #22]
    c0f8:	041b      	lsls	r3, r3, #16
    c0fa:	431a      	orrs	r2, r3
    c0fc:	7dcb      	ldrb	r3, [r1, #23]
    c0fe:	061b      	lsls	r3, r3, #24
    c100:	4313      	orrs	r3, r2
    c102:	2200      	movs	r2, #0
    c104:	711a      	strb	r2, [r3, #4]
    c106:	715a      	strb	r2, [r3, #5]
    c108:	719a      	strb	r2, [r3, #6]
    c10a:	71da      	strb	r2, [r3, #7]
    c10c:	e7e2      	b.n	c0d4 <JoinDutyCycleCallback+0x70>
	SwTimerStop(RegParams.pJoinDutyCycleTimer->timerId);
    c10e:	7a18      	ldrb	r0, [r3, #8]
    c110:	4b0a      	ldr	r3, [pc, #40]	; (c13c <JoinDutyCycleCallback+0xd8>)
    c112:	4798      	blx	r3
	RegParams.joinDutyCycleTimeout = 0;
    c114:	4b03      	ldr	r3, [pc, #12]	; (c124 <JoinDutyCycleCallback+0xc0>)
    c116:	333e      	adds	r3, #62	; 0x3e
    c118:	2200      	movs	r2, #0
    c11a:	701a      	strb	r2, [r3, #0]
    c11c:	705a      	strb	r2, [r3, #1]
    c11e:	709a      	strb	r2, [r3, #2]
    c120:	70da      	strb	r2, [r3, #3]
}
    c122:	e7d7      	b.n	c0d4 <JoinDutyCycleCallback+0x70>
    c124:	200024d0 	.word	0x200024d0
    c128:	0020c49b 	.word	0x0020c49b
    c12c:	ffdf3b65 	.word	0xffdf3b65
    c130:	0000c065 	.word	0x0000c065
    c134:	7fffffff 	.word	0x7fffffff
    c138:	0000ee0d 	.word	0x0000ee0d
    c13c:	0000f125 	.word	0x0000f125

0000c140 <JoinBackoffCallback>:
{
    c140:	b510      	push	{r4, lr}
    c142:	b082      	sub	sp, #8
	RegParams.joinbccount ++;
    c144:	4b0c      	ldr	r3, [pc, #48]	; (c178 <JoinBackoffCallback+0x38>)
    c146:	2142      	movs	r1, #66	; 0x42
    c148:	5c5a      	ldrb	r2, [r3, r1]
    c14a:	3201      	adds	r2, #1
    c14c:	545a      	strb	r2, [r3, r1]
	SwTimerStart (RegParams.pJoinBackoffTimer->timerId, MS_TO_US(BACKOFF_BASE_TIME_IN_MS), SW_TIMEOUT_RELATIVE, (void *)JoinBackoffCallback, NULL);
    c14e:	7e19      	ldrb	r1, [r3, #24]
    c150:	7e5a      	ldrb	r2, [r3, #25]
    c152:	0212      	lsls	r2, r2, #8
    c154:	4311      	orrs	r1, r2
    c156:	7e9a      	ldrb	r2, [r3, #26]
    c158:	0412      	lsls	r2, r2, #16
    c15a:	430a      	orrs	r2, r1
    c15c:	7edb      	ldrb	r3, [r3, #27]
    c15e:	061b      	lsls	r3, r3, #24
    c160:	4313      	orrs	r3, r2
    c162:	7818      	ldrb	r0, [r3, #0]
    c164:	2300      	movs	r3, #0
    c166:	9300      	str	r3, [sp, #0]
    c168:	4b04      	ldr	r3, [pc, #16]	; (c17c <JoinBackoffCallback+0x3c>)
    c16a:	2200      	movs	r2, #0
    c16c:	4904      	ldr	r1, [pc, #16]	; (c180 <JoinBackoffCallback+0x40>)
    c16e:	4c05      	ldr	r4, [pc, #20]	; (c184 <JoinBackoffCallback+0x44>)
    c170:	47a0      	blx	r4
}
    c172:	b002      	add	sp, #8
    c174:	bd10      	pop	{r4, pc}
    c176:	46c0      	nop			; (mov r8, r8)
    c178:	200024d0 	.word	0x200024d0
    c17c:	0000c141 	.word	0x0000c141
    c180:	6b49d200 	.word	0x6b49d200
    c184:	0000ee0d 	.word	0x0000ee0d

0000c188 <ValidateDataRangeT2>:
	memcpy(&val_drange,attrInput,sizeof(ValUpdateDrange_t));
    c188:	784a      	ldrb	r2, [r1, #1]
	dataRateMin = val_drange.dataRangeNew & LAST_NIBBLE;
    c18a:	230f      	movs	r3, #15
    c18c:	4013      	ands	r3, r2
    if ( dataRate > RegParams.minDataRate )
    c18e:	2124      	movs	r1, #36	; 0x24
    c190:	4807      	ldr	r0, [pc, #28]	; (c1b0 <ValidateDataRangeT2+0x28>)
    c192:	5c41      	ldrb	r1, [r0, r1]
		retVal = LORAWAN_INVALID_PARAMETER;
    c194:	200a      	movs	r0, #10
    if ( dataRate > RegParams.minDataRate )
    c196:	428b      	cmp	r3, r1
    c198:	d900      	bls.n	c19c <ValidateDataRangeT2+0x14>
}
    c19a:	4770      	bx	lr
	dataRateMax = (val_drange.dataRangeNew & FIRST_NIBBLE) >> SHIFT4;
    c19c:	0912      	lsrs	r2, r2, #4
		retVal = LORAWAN_INVALID_PARAMETER;
    c19e:	200a      	movs	r0, #10
    if ( dataRate > RegParams.minDataRate )
    c1a0:	428a      	cmp	r2, r1
    c1a2:	d8fa      	bhi.n	c19a <ValidateDataRangeT2+0x12>
	StackRetStatus_t retVal = LORAWAN_SUCCESS;
    c1a4:	3802      	subs	r0, #2
	   || (dataRateMax < dataRateMin) )
    c1a6:	4293      	cmp	r3, r2
    c1a8:	d9f7      	bls.n	c19a <ValidateDataRangeT2+0x12>
		retVal = LORAWAN_INVALID_PARAMETER;
    c1aa:	3002      	adds	r0, #2
	return retVal;
    c1ac:	e7f5      	b.n	c19a <ValidateDataRangeT2+0x12>
    c1ae:	46c0      	nop			; (mov r8, r8)
    c1b0:	200024d0 	.word	0x200024d0

0000c1b4 <setDataRangeT2>:
{
    c1b4:	b5f0      	push	{r4, r5, r6, r7, lr}
    c1b6:	46c6      	mov	lr, r8
    c1b8:	b500      	push	{lr}
    c1ba:	b082      	sub	sp, #8
	memcpy((void *)&update_dr,attrInput,sizeof(ValUpdateDrange_t));
    c1bc:	780d      	ldrb	r5, [r1, #0]
    c1be:	784e      	ldrb	r6, [r1, #1]
	val_chid.channelIndex = update_dr.channelIndex;
    c1c0:	ab01      	add	r3, sp, #4
    c1c2:	701d      	strb	r5, [r3, #0]
	val_chid.allowedForDefaultChannels = ALL_CHANNELS;
    c1c4:	2201      	movs	r2, #1
    c1c6:	705a      	strb	r2, [r3, #1]
	if((ValidateDataRangeT2(DATA_RANGE, attrInput) != LORAWAN_SUCCESS) || (ValidateChannelIdT2(CHANNEL_ID, &val_chid) != LORAWAN_SUCCESS))
    c1c8:	2012      	movs	r0, #18
    c1ca:	4b24      	ldr	r3, [pc, #144]	; (c25c <setDataRangeT2+0xa8>)
    c1cc:	4798      	blx	r3
		retVal = LORAWAN_INVALID_PARAMETER;
    c1ce:	240a      	movs	r4, #10
	if((ValidateDataRangeT2(DATA_RANGE, attrInput) != LORAWAN_SUCCESS) || (ValidateChannelIdT2(CHANNEL_ID, &val_chid) != LORAWAN_SUCCESS))
    c1d0:	2808      	cmp	r0, #8
    c1d2:	d004      	beq.n	c1de <setDataRangeT2+0x2a>
}
    c1d4:	0020      	movs	r0, r4
    c1d6:	b002      	add	sp, #8
    c1d8:	bc04      	pop	{r2}
    c1da:	4690      	mov	r8, r2
    c1dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if((ValidateDataRangeT2(DATA_RANGE, attrInput) != LORAWAN_SUCCESS) || (ValidateChannelIdT2(CHANNEL_ID, &val_chid) != LORAWAN_SUCCESS))
    c1de:	a901      	add	r1, sp, #4
    c1e0:	300d      	adds	r0, #13
    c1e2:	4b1f      	ldr	r3, [pc, #124]	; (c260 <setDataRangeT2+0xac>)
    c1e4:	4798      	blx	r3
    c1e6:	0004      	movs	r4, r0
    c1e8:	2808      	cmp	r0, #8
    c1ea:	d001      	beq.n	c1f0 <setDataRangeT2+0x3c>
		retVal = LORAWAN_INVALID_PARAMETER;
    c1ec:	240a      	movs	r4, #10
    c1ee:	e7f1      	b.n	c1d4 <setDataRangeT2+0x20>
		RegParams.pChParams[update_dr.channelIndex].dataRange.value = update_dr.dataRangeNew;
    c1f0:	4f1c      	ldr	r7, [pc, #112]	; (c264 <setDataRangeT2+0xb0>)
    c1f2:	793b      	ldrb	r3, [r7, #4]
    c1f4:	797a      	ldrb	r2, [r7, #5]
    c1f6:	0212      	lsls	r2, r2, #8
    c1f8:	431a      	orrs	r2, r3
    c1fa:	79bb      	ldrb	r3, [r7, #6]
    c1fc:	041b      	lsls	r3, r3, #16
    c1fe:	431a      	orrs	r2, r3
    c200:	79fb      	ldrb	r3, [r7, #7]
    c202:	061b      	lsls	r3, r3, #24
    c204:	4313      	orrs	r3, r2
    c206:	006a      	lsls	r2, r5, #1
    c208:	4690      	mov	r8, r2
    c20a:	4443      	add	r3, r8
    c20c:	705e      	strb	r6, [r3, #1]
		PDS_STORE(RegParams.regParamItems.ch_param_1_item_id);
    c20e:	4b16      	ldr	r3, [pc, #88]	; (c268 <setDataRangeT2+0xb4>)
    c210:	5cfb      	ldrb	r3, [r7, r3]
    c212:	4a16      	ldr	r2, [pc, #88]	; (c26c <setDataRangeT2+0xb8>)
    c214:	5cb8      	ldrb	r0, [r7, r2]
    c216:	0200      	lsls	r0, r0, #8
    c218:	4318      	orrs	r0, r3
    c21a:	b2c1      	uxtb	r1, r0
    c21c:	0a00      	lsrs	r0, r0, #8
    c21e:	4e14      	ldr	r6, [pc, #80]	; (c270 <setDataRangeT2+0xbc>)
    c220:	47b0      	blx	r6
		RegParams.pOtherChParams[update_dr.channelIndex].parametersDefined |= DATA_RANGE_DEFINED;
    c222:	7a3b      	ldrb	r3, [r7, #8]
    c224:	7a7a      	ldrb	r2, [r7, #9]
    c226:	0212      	lsls	r2, r2, #8
    c228:	431a      	orrs	r2, r3
    c22a:	7abb      	ldrb	r3, [r7, #10]
    c22c:	041b      	lsls	r3, r3, #16
    c22e:	431a      	orrs	r2, r3
    c230:	7afb      	ldrb	r3, [r7, #11]
    c232:	061b      	lsls	r3, r3, #24
    c234:	4313      	orrs	r3, r2
    c236:	4445      	add	r5, r8
    c238:	00ad      	lsls	r5, r5, #2
    c23a:	195d      	adds	r5, r3, r5
    c23c:	7aeb      	ldrb	r3, [r5, #11]
    c23e:	2202      	movs	r2, #2
    c240:	4313      	orrs	r3, r2
    c242:	72eb      	strb	r3, [r5, #11]
		PDS_STORE(RegParams.regParamItems.ch_param_2_item_id);
    c244:	2384      	movs	r3, #132	; 0x84
    c246:	009b      	lsls	r3, r3, #2
    c248:	5cfb      	ldrb	r3, [r7, r3]
    c24a:	4a0a      	ldr	r2, [pc, #40]	; (c274 <setDataRangeT2+0xc0>)
    c24c:	5cb8      	ldrb	r0, [r7, r2]
    c24e:	0200      	lsls	r0, r0, #8
    c250:	4318      	orrs	r0, r3
    c252:	b2c1      	uxtb	r1, r0
    c254:	0a00      	lsrs	r0, r0, #8
    c256:	47b0      	blx	r6
    c258:	e7bc      	b.n	c1d4 <setDataRangeT2+0x20>
    c25a:	46c0      	nop			; (mov r8, r8)
    c25c:	0000c189 	.word	0x0000c189
    c260:	00009a39 	.word	0x00009a39
    c264:	200024d0 	.word	0x200024d0
    c268:	0000020e 	.word	0x0000020e
    c26c:	0000020f 	.word	0x0000020f
    c270:	0000e0dd 	.word	0x0000e0dd
    c274:	00000211 	.word	0x00000211

0000c278 <LORAREG_GetAttr_MaxPayloadT3>:
{
    c278:	b530      	push	{r4, r5, lr}
	dataRate = *(uint8_t *)attrInput;
    c27a:	780b      	ldrb	r3, [r1, #0]
    if ( dataRate > RegParams.minDataRate )
    c27c:	2124      	movs	r1, #36	; 0x24
    c27e:	4816      	ldr	r0, [pc, #88]	; (c2d8 <LORAREG_GetAttr_MaxPayloadT3+0x60>)
    c280:	5c41      	ldrb	r1, [r0, r1]
		result =  LORAWAN_INVALID_PARAMETER;
    c282:	200a      	movs	r0, #10
    if ( dataRate > RegParams.minDataRate )
    c284:	4299      	cmp	r1, r3
    c286:	d215      	bcs.n	c2b4 <LORAREG_GetAttr_MaxPayloadT3+0x3c>
	if(RegParams.cmnParams.paramsType2.txParams.uplinkDwellTime == 1)
    c288:	21e1      	movs	r1, #225	; 0xe1
    c28a:	0049      	lsls	r1, r1, #1
    c28c:	4c12      	ldr	r4, [pc, #72]	; (c2d8 <LORAREG_GetAttr_MaxPayloadT3+0x60>)
    c28e:	5c61      	ldrb	r1, [r4, r1]
    c290:	07c9      	lsls	r1, r1, #31
    c292:	d411      	bmi.n	c2b8 <LORAREG_GetAttr_MaxPayloadT3+0x40>
		*(uint8_t *)attrOutput = RegParams.pDrParams[dataRate].maxPayloadSizeDt0;
    c294:	4d10      	ldr	r5, [pc, #64]	; (c2d8 <LORAREG_GetAttr_MaxPayloadT3+0x60>)
    c296:	7829      	ldrb	r1, [r5, #0]
    c298:	786c      	ldrb	r4, [r5, #1]
    c29a:	0224      	lsls	r4, r4, #8
    c29c:	430c      	orrs	r4, r1
    c29e:	78a9      	ldrb	r1, [r5, #2]
    c2a0:	0409      	lsls	r1, r1, #16
    c2a2:	430c      	orrs	r4, r1
    c2a4:	78e9      	ldrb	r1, [r5, #3]
    c2a6:	0609      	lsls	r1, r1, #24
    c2a8:	4321      	orrs	r1, r4
    c2aa:	00db      	lsls	r3, r3, #3
    c2ac:	185b      	adds	r3, r3, r1
    c2ae:	789b      	ldrb	r3, [r3, #2]
    c2b0:	7013      	strb	r3, [r2, #0]
}
    c2b2:	bd30      	pop	{r4, r5, pc}
	StackRetStatus_t result = LORAWAN_SUCCESS;
    c2b4:	3802      	subs	r0, #2
    c2b6:	e7e7      	b.n	c288 <LORAREG_GetAttr_MaxPayloadT3+0x10>
		*(uint8_t *)attrOutput = RegParams.pDrParams[dataRate].maxPayloadSizeDt1;
    c2b8:	0025      	movs	r5, r4
    c2ba:	7821      	ldrb	r1, [r4, #0]
    c2bc:	7864      	ldrb	r4, [r4, #1]
    c2be:	0224      	lsls	r4, r4, #8
    c2c0:	430c      	orrs	r4, r1
    c2c2:	78a9      	ldrb	r1, [r5, #2]
    c2c4:	0409      	lsls	r1, r1, #16
    c2c6:	430c      	orrs	r4, r1
    c2c8:	78e9      	ldrb	r1, [r5, #3]
    c2ca:	0609      	lsls	r1, r1, #24
    c2cc:	4321      	orrs	r1, r4
    c2ce:	00db      	lsls	r3, r3, #3
    c2d0:	1859      	adds	r1, r3, r1
    c2d2:	78cb      	ldrb	r3, [r1, #3]
    c2d4:	7013      	strb	r3, [r2, #0]
    c2d6:	e7ec      	b.n	c2b2 <LORAREG_GetAttr_MaxPayloadT3+0x3a>
    c2d8:	200024d0 	.word	0x200024d0

0000c2dc <LORAREG_GetAttr_RxWindowSizeT2>:
{
    c2dc:	b510      	push	{r4, lr}
	dataRate = *(uint8_t *)attrInput;
    c2de:	780b      	ldrb	r3, [r1, #0]
    if ( dataRate > RegParams.minDataRate )
    c2e0:	2124      	movs	r1, #36	; 0x24
    c2e2:	480d      	ldr	r0, [pc, #52]	; (c318 <LORAREG_GetAttr_RxWindowSizeT2+0x3c>)
    c2e4:	5c41      	ldrb	r1, [r0, r1]
		return LORAWAN_INVALID_PARAMETER;
    c2e6:	200a      	movs	r0, #10
    if ( dataRate > RegParams.minDataRate )
    c2e8:	4299      	cmp	r1, r3
    c2ea:	d200      	bcs.n	c2ee <LORAREG_GetAttr_RxWindowSizeT2+0x12>
}
    c2ec:	bd10      	pop	{r4, pc}
		*(uint16_t *)attrOutput = RegParams.pDrParams[dataRate].rxWindowSize;
    c2ee:	4c0a      	ldr	r4, [pc, #40]	; (c318 <LORAREG_GetAttr_RxWindowSizeT2+0x3c>)
    c2f0:	7821      	ldrb	r1, [r4, #0]
    c2f2:	7860      	ldrb	r0, [r4, #1]
    c2f4:	0200      	lsls	r0, r0, #8
    c2f6:	4308      	orrs	r0, r1
    c2f8:	78a1      	ldrb	r1, [r4, #2]
    c2fa:	0409      	lsls	r1, r1, #16
    c2fc:	4308      	orrs	r0, r1
    c2fe:	78e1      	ldrb	r1, [r4, #3]
    c300:	0609      	lsls	r1, r1, #24
    c302:	4301      	orrs	r1, r0
    c304:	00db      	lsls	r3, r3, #3
    c306:	5c58      	ldrb	r0, [r3, r1]
    c308:	185b      	adds	r3, r3, r1
    c30a:	785b      	ldrb	r3, [r3, #1]
    c30c:	021b      	lsls	r3, r3, #8
    c30e:	4303      	orrs	r3, r0
    c310:	8013      	strh	r3, [r2, #0]
	return result;
    c312:	2008      	movs	r0, #8
    c314:	e7ea      	b.n	c2ec <LORAREG_GetAttr_RxWindowSizeT2+0x10>
    c316:	46c0      	nop			; (mov r8, r8)
    c318:	200024d0 	.word	0x200024d0

0000c31c <LORAREG_GetAttr_RxWindowOffsetT2>:
{
    c31c:	b510      	push	{r4, lr}
	dataRate = *(uint8_t *)attrInput;
    c31e:	780b      	ldrb	r3, [r1, #0]
    if ( dataRate > RegParams.minDataRate )
    c320:	2124      	movs	r1, #36	; 0x24
    c322:	480c      	ldr	r0, [pc, #48]	; (c354 <LORAREG_GetAttr_RxWindowOffsetT2+0x38>)
    c324:	5c41      	ldrb	r1, [r0, r1]
		return LORAWAN_INVALID_PARAMETER;
    c326:	200a      	movs	r0, #10
    if ( dataRate > RegParams.minDataRate )
    c328:	4299      	cmp	r1, r3
    c32a:	d200      	bcs.n	c32e <LORAREG_GetAttr_RxWindowOffsetT2+0x12>
}
    c32c:	bd10      	pop	{r4, pc}
		*(int8_t *)attrOutput = RegParams.pDrParams[dataRate].rxWindowOffset;
    c32e:	4c09      	ldr	r4, [pc, #36]	; (c354 <LORAREG_GetAttr_RxWindowOffsetT2+0x38>)
    c330:	7821      	ldrb	r1, [r4, #0]
    c332:	7860      	ldrb	r0, [r4, #1]
    c334:	0200      	lsls	r0, r0, #8
    c336:	4308      	orrs	r0, r1
    c338:	78a1      	ldrb	r1, [r4, #2]
    c33a:	0409      	lsls	r1, r1, #16
    c33c:	4308      	orrs	r0, r1
    c33e:	78e1      	ldrb	r1, [r4, #3]
    c340:	0609      	lsls	r1, r1, #24
    c342:	4301      	orrs	r1, r0
    c344:	00db      	lsls	r3, r3, #3
    c346:	185b      	adds	r3, r3, r1
    c348:	791b      	ldrb	r3, [r3, #4]
    c34a:	b25b      	sxtb	r3, r3
    c34c:	7013      	strb	r3, [r2, #0]
	return result;
    c34e:	2008      	movs	r0, #8
    c350:	e7ec      	b.n	c32c <LORAREG_GetAttr_RxWindowOffsetT2+0x10>
    c352:	46c0      	nop			; (mov r8, r8)
    c354:	200024d0 	.word	0x200024d0

0000c358 <LORAREG_GetAttr_MaxPayloadT2>:
{
    c358:	b510      	push	{r4, lr}
	dataRate = *(uint8_t *)attrInput;
    c35a:	780b      	ldrb	r3, [r1, #0]
    if ( dataRate > RegParams.minDataRate )
    c35c:	2124      	movs	r1, #36	; 0x24
    c35e:	480b      	ldr	r0, [pc, #44]	; (c38c <LORAREG_GetAttr_MaxPayloadT2+0x34>)
    c360:	5c41      	ldrb	r1, [r0, r1]
		result =  LORAWAN_INVALID_PARAMETER;
    c362:	200a      	movs	r0, #10
    if ( dataRate > RegParams.minDataRate )
    c364:	4299      	cmp	r1, r3
    c366:	d200      	bcs.n	c36a <LORAREG_GetAttr_MaxPayloadT2+0x12>
}
    c368:	bd10      	pop	{r4, pc}
		*(uint8_t *)attrOutput = RegParams.pDrParams[dataRate].maxPayloadSizeDt0;
    c36a:	4c08      	ldr	r4, [pc, #32]	; (c38c <LORAREG_GetAttr_MaxPayloadT2+0x34>)
    c36c:	7821      	ldrb	r1, [r4, #0]
    c36e:	7860      	ldrb	r0, [r4, #1]
    c370:	0200      	lsls	r0, r0, #8
    c372:	4308      	orrs	r0, r1
    c374:	78a1      	ldrb	r1, [r4, #2]
    c376:	0409      	lsls	r1, r1, #16
    c378:	4308      	orrs	r0, r1
    c37a:	78e1      	ldrb	r1, [r4, #3]
    c37c:	0609      	lsls	r1, r1, #24
    c37e:	4301      	orrs	r1, r0
    c380:	00db      	lsls	r3, r3, #3
    c382:	185b      	adds	r3, r3, r1
    c384:	789b      	ldrb	r3, [r3, #2]
    c386:	7013      	strb	r3, [r2, #0]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    c388:	2008      	movs	r0, #8
	return result;
    c38a:	e7ed      	b.n	c368 <LORAREG_GetAttr_MaxPayloadT2+0x10>
    c38c:	200024d0 	.word	0x200024d0

0000c390 <LORAREG_GetAttr_ModulationAttrT2>:
{
    c390:	b510      	push	{r4, lr}
	dataRate = *(uint8_t *)attrInput;
    c392:	780b      	ldrb	r3, [r1, #0]
    if ( dataRate > RegParams.minDataRate )
    c394:	2124      	movs	r1, #36	; 0x24
    c396:	480b      	ldr	r0, [pc, #44]	; (c3c4 <LORAREG_GetAttr_ModulationAttrT2+0x34>)
    c398:	5c41      	ldrb	r1, [r0, r1]
		result = LORAWAN_INVALID_PARAMETER;
    c39a:	200a      	movs	r0, #10
    if ( dataRate > RegParams.minDataRate )
    c39c:	4299      	cmp	r1, r3
    c39e:	d200      	bcs.n	c3a2 <LORAREG_GetAttr_ModulationAttrT2+0x12>
}
    c3a0:	bd10      	pop	{r4, pc}
		*(uint8_t *)attrOutput = RegParams.pDrParams[dataRate].modulation;
    c3a2:	4c08      	ldr	r4, [pc, #32]	; (c3c4 <LORAREG_GetAttr_ModulationAttrT2+0x34>)
    c3a4:	7821      	ldrb	r1, [r4, #0]
    c3a6:	7860      	ldrb	r0, [r4, #1]
    c3a8:	0200      	lsls	r0, r0, #8
    c3aa:	4308      	orrs	r0, r1
    c3ac:	78a1      	ldrb	r1, [r4, #2]
    c3ae:	0409      	lsls	r1, r1, #16
    c3b0:	4308      	orrs	r0, r1
    c3b2:	78e1      	ldrb	r1, [r4, #3]
    c3b4:	0609      	lsls	r1, r1, #24
    c3b6:	4301      	orrs	r1, r0
    c3b8:	00db      	lsls	r3, r3, #3
    c3ba:	185b      	adds	r3, r3, r1
    c3bc:	79db      	ldrb	r3, [r3, #7]
    c3be:	7013      	strb	r3, [r2, #0]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    c3c0:	2008      	movs	r0, #8
	return result;
    c3c2:	e7ed      	b.n	c3a0 <LORAREG_GetAttr_ModulationAttrT2+0x10>
    c3c4:	200024d0 	.word	0x200024d0

0000c3c8 <LORAREG_GetAttr_BandwidthAttrT2>:
{
    c3c8:	b510      	push	{r4, lr}
	dataRate = *(uint8_t *)attrInput;
    c3ca:	780b      	ldrb	r3, [r1, #0]
    if ( dataRate > RegParams.minDataRate )
    c3cc:	2124      	movs	r1, #36	; 0x24
    c3ce:	480b      	ldr	r0, [pc, #44]	; (c3fc <LORAREG_GetAttr_BandwidthAttrT2+0x34>)
    c3d0:	5c41      	ldrb	r1, [r0, r1]
		result = LORAWAN_INVALID_PARAMETER;
    c3d2:	200a      	movs	r0, #10
    if ( dataRate > RegParams.minDataRate )
    c3d4:	4299      	cmp	r1, r3
    c3d6:	d200      	bcs.n	c3da <LORAREG_GetAttr_BandwidthAttrT2+0x12>
}
    c3d8:	bd10      	pop	{r4, pc}
		*(uint8_t *)attrOutput = RegParams.pDrParams[dataRate].bandwidth;
    c3da:	4c08      	ldr	r4, [pc, #32]	; (c3fc <LORAREG_GetAttr_BandwidthAttrT2+0x34>)
    c3dc:	7821      	ldrb	r1, [r4, #0]
    c3de:	7860      	ldrb	r0, [r4, #1]
    c3e0:	0200      	lsls	r0, r0, #8
    c3e2:	4308      	orrs	r0, r1
    c3e4:	78a1      	ldrb	r1, [r4, #2]
    c3e6:	0409      	lsls	r1, r1, #16
    c3e8:	4308      	orrs	r0, r1
    c3ea:	78e1      	ldrb	r1, [r4, #3]
    c3ec:	0609      	lsls	r1, r1, #24
    c3ee:	4301      	orrs	r1, r0
    c3f0:	00db      	lsls	r3, r3, #3
    c3f2:	185b      	adds	r3, r3, r1
    c3f4:	799b      	ldrb	r3, [r3, #6]
    c3f6:	7013      	strb	r3, [r2, #0]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    c3f8:	2008      	movs	r0, #8
	return result;
    c3fa:	e7ed      	b.n	c3d8 <LORAREG_GetAttr_BandwidthAttrT2+0x10>
    c3fc:	200024d0 	.word	0x200024d0

0000c400 <LORAREG_GetAttr_SpreadFactorT2>:
{
    c400:	b510      	push	{r4, lr}
	dataRate = *(uint8_t *)attrInput;
    c402:	780b      	ldrb	r3, [r1, #0]
    if ( dataRate > RegParams.minDataRate )
    c404:	2124      	movs	r1, #36	; 0x24
    c406:	480b      	ldr	r0, [pc, #44]	; (c434 <LORAREG_GetAttr_SpreadFactorT2+0x34>)
    c408:	5c41      	ldrb	r1, [r0, r1]
		result =  LORAWAN_INVALID_PARAMETER;
    c40a:	200a      	movs	r0, #10
    if ( dataRate > RegParams.minDataRate )
    c40c:	4299      	cmp	r1, r3
    c40e:	d200      	bcs.n	c412 <LORAREG_GetAttr_SpreadFactorT2+0x12>
}
    c410:	bd10      	pop	{r4, pc}
		*(RadioDataRate_t *)attrOutput = RegParams.pDrParams[dataRate].spreadingFactor;
    c412:	4c08      	ldr	r4, [pc, #32]	; (c434 <LORAREG_GetAttr_SpreadFactorT2+0x34>)
    c414:	7821      	ldrb	r1, [r4, #0]
    c416:	7860      	ldrb	r0, [r4, #1]
    c418:	0200      	lsls	r0, r0, #8
    c41a:	4308      	orrs	r0, r1
    c41c:	78a1      	ldrb	r1, [r4, #2]
    c41e:	0409      	lsls	r1, r1, #16
    c420:	4308      	orrs	r0, r1
    c422:	78e1      	ldrb	r1, [r4, #3]
    c424:	0609      	lsls	r1, r1, #24
    c426:	4301      	orrs	r1, r0
    c428:	00db      	lsls	r3, r3, #3
    c42a:	185b      	adds	r3, r3, r1
    c42c:	795b      	ldrb	r3, [r3, #5]
    c42e:	7013      	strb	r3, [r2, #0]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    c430:	2008      	movs	r0, #8
	return result;
    c432:	e7ed      	b.n	c410 <LORAREG_GetAttr_SpreadFactorT2+0x10>
    c434:	200024d0 	.word	0x200024d0

0000c438 <ValidateChMaskChCntl>:
{
    c438:	b510      	push	{r4, lr}
    c43a:	b082      	sub	sp, #8
	ValChMaskCntl_t chMaskchCntl = * (ValChMaskCntl_t *)attrInput;
    c43c:	ac01      	add	r4, sp, #4
    c43e:	2204      	movs	r2, #4
    c440:	0020      	movs	r0, r4
    c442:	4b09      	ldr	r3, [pc, #36]	; (c468 <ValidateChMaskChCntl+0x30>)
    c444:	4798      	blx	r3
    if(chMaskchCntl.chnlMask == 0 && chMaskchCntl.chnlMaskCntl == 7)
    c446:	8863      	ldrh	r3, [r4, #2]
    c448:	2b00      	cmp	r3, #0
    c44a:	d104      	bne.n	c456 <ValidateChMaskChCntl+0x1e>
    c44c:	ab01      	add	r3, sp, #4
    c44e:	781b      	ldrb	r3, [r3, #0]
        result = LORAWAN_INVALID_PARAMETER;
    c450:	200a      	movs	r0, #10
    if(chMaskchCntl.chnlMask == 0 && chMaskchCntl.chnlMaskCntl == 7)
    c452:	2b07      	cmp	r3, #7
    c454:	d006      	beq.n	c464 <ValidateChMaskChCntl+0x2c>
		result = ((ValidateChannelMask(CHANNEL_MASK, (void *)&chMaskchCntl.chnlMask)) | (ValidateChannelMaskCntl(CHANNEL_MASK_CNTL,  (void *)&chMaskchCntl.chnlMaskCntl)));
    c456:	a901      	add	r1, sp, #4
    c458:	201b      	movs	r0, #27
    c45a:	4b04      	ldr	r3, [pc, #16]	; (c46c <ValidateChMaskChCntl+0x34>)
    c45c:	4798      	blx	r3
    c45e:	2308      	movs	r3, #8
    c460:	4318      	orrs	r0, r3
    c462:	b2c0      	uxtb	r0, r0
}
    c464:	b002      	add	sp, #8
    c466:	bd10      	pop	{r4, pc}
    c468:	00019d89 	.word	0x00019d89
    c46c:	00009b41 	.word	0x00009b41

0000c470 <LORAREG_GetAttr_NewTxChConfigT2>:
{
    c470:	b5f0      	push	{r4, r5, r6, r7, lr}
    c472:	b083      	sub	sp, #12
    c474:	0015      	movs	r5, r2
	memcpy(&newTxChannelReq,(NewTxChannelReq_t *)attrInput,sizeof(NewTxChannelReq_t));
    c476:	788c      	ldrb	r4, [r1, #2]
    if ( dataRate > RegParams.minDataRate )
    c478:	2324      	movs	r3, #36	; 0x24
    c47a:	4a2e      	ldr	r2, [pc, #184]	; (c534 <LORAREG_GetAttr_NewTxChConfigT2+0xc4>)
    c47c:	5cd3      	ldrb	r3, [r2, r3]
		result = LORAWAN_INVALID_PARAMETER;
    c47e:	200a      	movs	r0, #10
    if ( dataRate > RegParams.minDataRate )
    c480:	42a3      	cmp	r3, r4
    c482:	d205      	bcs.n	c490 <LORAREG_GetAttr_NewTxChConfigT2+0x20>
}
    c484:	b003      	add	sp, #12
    c486:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(((((1 << RegParams.band) & (ISM_ASBAND)) || ((1 << RegParams.band) & (1 << ISM_JPN923))) != 0) && (transmissionType == 0))
    c488:	2900      	cmp	r1, #0
    c48a:	d10f      	bne.n	c4ac <LORAREG_GetAttr_NewTxChConfigT2+0x3c>
		currDr = DR2;
    c48c:	2402      	movs	r4, #2
    c48e:	e00d      	b.n	c4ac <LORAREG_GetAttr_NewTxChConfigT2+0x3c>
	memcpy(&newTxChannelReq,(NewTxChannelReq_t *)attrInput,sizeof(NewTxChannelReq_t));
    c490:	784e      	ldrb	r6, [r1, #1]
	if (txPowerNew > RegParams.maxTxPwrIndx)
    c492:	232d      	movs	r3, #45	; 0x2d
    c494:	4a27      	ldr	r2, [pc, #156]	; (c534 <LORAREG_GetAttr_NewTxChConfigT2+0xc4>)
    c496:	56d3      	ldrsb	r3, [r2, r3]
		result = LORAWAN_INVALID_PARAMETER;
    c498:	200a      	movs	r0, #10
	if (txPowerNew > RegParams.maxTxPwrIndx)
    c49a:	429e      	cmp	r6, r3
    c49c:	dcf2      	bgt.n	c484 <LORAREG_GetAttr_NewTxChConfigT2+0x14>
		result = GetTxChannelConfig2(newTxChannelReq.transmissionType,newTxChannelReq.txPwr,newTxChannelReq.currDr,(radioConfig_t*)attrOutput);
    c49e:	7809      	ldrb	r1, [r1, #0]
	if(((((1 << RegParams.band) & (ISM_ASBAND)) || ((1 << RegParams.band) & (1 << ISM_JPN923))) != 0) && (transmissionType == 0))
    c4a0:	232e      	movs	r3, #46	; 0x2e
    c4a2:	5cd2      	ldrb	r2, [r2, r3]
    c4a4:	4b24      	ldr	r3, [pc, #144]	; (c538 <LORAREG_GetAttr_NewTxChConfigT2+0xc8>)
    c4a6:	4113      	asrs	r3, r2
    c4a8:	07db      	lsls	r3, r3, #31
    c4aa:	d4ed      	bmi.n	c488 <LORAREG_GetAttr_NewTxChConfigT2+0x18>
	result = SearchAvailableChannel2 (RegParams.maxChannels, transmissionType,currDr, &channelIndex);
    c4ac:	232a      	movs	r3, #42	; 0x2a
    c4ae:	4a21      	ldr	r2, [pc, #132]	; (c534 <LORAREG_GetAttr_NewTxChConfigT2+0xc4>)
    c4b0:	5cd0      	ldrb	r0, [r2, r3]
    c4b2:	466b      	mov	r3, sp
    c4b4:	3307      	adds	r3, #7
    c4b6:	0022      	movs	r2, r4
    c4b8:	4f20      	ldr	r7, [pc, #128]	; (c53c <LORAREG_GetAttr_NewTxChConfigT2+0xcc>)
    c4ba:	47b8      	blx	r7
	if (result == LORAWAN_SUCCESS)
    c4bc:	2808      	cmp	r0, #8
    c4be:	d1e1      	bne.n	c484 <LORAREG_GetAttr_NewTxChConfigT2+0x14>
		RegParams.lastUsedChannelIndex = channelIndex;
    c4c0:	466b      	mov	r3, sp
    c4c2:	79df      	ldrb	r7, [r3, #7]
    c4c4:	4b1b      	ldr	r3, [pc, #108]	; (c534 <LORAREG_GetAttr_NewTxChConfigT2+0xc4>)
    c4c6:	222f      	movs	r2, #47	; 0x2f
    c4c8:	549f      	strb	r7, [r3, r2]
		radioConfig->frequency = RegParams.pOtherChParams[channelIndex].ulfrequency;
    c4ca:	7a19      	ldrb	r1, [r3, #8]
    c4cc:	7a5a      	ldrb	r2, [r3, #9]
    c4ce:	0212      	lsls	r2, r2, #8
    c4d0:	430a      	orrs	r2, r1
    c4d2:	7a99      	ldrb	r1, [r3, #10]
    c4d4:	0409      	lsls	r1, r1, #16
    c4d6:	430a      	orrs	r2, r1
    c4d8:	7ad9      	ldrb	r1, [r3, #11]
    c4da:	0609      	lsls	r1, r1, #24
    c4dc:	4311      	orrs	r1, r2
    c4de:	007a      	lsls	r2, r7, #1
    c4e0:	19d2      	adds	r2, r2, r7
    c4e2:	0092      	lsls	r2, r2, #2
    c4e4:	5c57      	ldrb	r7, [r2, r1]
    c4e6:	1852      	adds	r2, r2, r1
    c4e8:	7851      	ldrb	r1, [r2, #1]
    c4ea:	0209      	lsls	r1, r1, #8
    c4ec:	430f      	orrs	r7, r1
    c4ee:	7891      	ldrb	r1, [r2, #2]
    c4f0:	0409      	lsls	r1, r1, #16
    c4f2:	4339      	orrs	r1, r7
    c4f4:	78d2      	ldrb	r2, [r2, #3]
    c4f6:	0612      	lsls	r2, r2, #24
    c4f8:	430a      	orrs	r2, r1
    c4fa:	602a      	str	r2, [r5, #0]
		radioConfig->txPower = RegParams.maxTxPwr - 2 *txPwrIndx;
    c4fc:	0076      	lsls	r6, r6, #1
    c4fe:	2228      	movs	r2, #40	; 0x28
    c500:	5c9a      	ldrb	r2, [r3, r2]
    c502:	1b96      	subs	r6, r2, r6
    c504:	722e      	strb	r6, [r5, #8]
		radioConfig->freq_hop_period = DISABLED ;
    c506:	2200      	movs	r2, #0
    c508:	80aa      	strh	r2, [r5, #4]
		radioConfig->modulation = RegParams.pDrParams[currDr].modulation;
    c50a:	7819      	ldrb	r1, [r3, #0]
    c50c:	785a      	ldrb	r2, [r3, #1]
    c50e:	0212      	lsls	r2, r2, #8
    c510:	4311      	orrs	r1, r2
    c512:	789a      	ldrb	r2, [r3, #2]
    c514:	0412      	lsls	r2, r2, #16
    c516:	430a      	orrs	r2, r1
    c518:	78db      	ldrb	r3, [r3, #3]
    c51a:	061b      	lsls	r3, r3, #24
    c51c:	4313      	orrs	r3, r2
    c51e:	00e4      	lsls	r4, r4, #3
    c520:	191c      	adds	r4, r3, r4
    c522:	79e3      	ldrb	r3, [r4, #7]
    c524:	726b      	strb	r3, [r5, #9]
		radioConfig->bandwidth = RegParams.pDrParams[currDr].bandwidth;
    c526:	79a3      	ldrb	r3, [r4, #6]
    c528:	72ab      	strb	r3, [r5, #10]
		radioConfig->sf = RegParams.pDrParams[currDr].spreadingFactor;
    c52a:	7963      	ldrb	r3, [r4, #5]
    c52c:	72eb      	strb	r3, [r5, #11]
		radioConfig->ecrConfig.override = false;
    c52e:	2300      	movs	r3, #0
    c530:	71eb      	strb	r3, [r5, #7]
    c532:	e7a7      	b.n	c484 <LORAREG_GetAttr_NewTxChConfigT2+0x14>
    c534:	200024d0 	.word	0x200024d0
    c538:	00007fe0 	.word	0x00007fe0
    c53c:	0000b225 	.word	0x0000b225

0000c540 <setChannelIdStatus>:
{
    c540:	b510      	push	{r4, lr}
    uint8_t channelId = *(uint8_t *)attrInput;
    c542:	7808      	ldrb	r0, [r1, #0]
    if (channelId >= RegParams.maxChannels)
    c544:	232a      	movs	r3, #42	; 0x2a
    c546:	4a05      	ldr	r2, [pc, #20]	; (c55c <setChannelIdStatus+0x1c>)
    c548:	56d3      	ldrsb	r3, [r2, r3]
    c54a:	4298      	cmp	r0, r3
    c54c:	db01      	blt.n	c552 <setChannelIdStatus+0x12>
		retVal = LORAWAN_INVALID_PARAMETER;
    c54e:	200a      	movs	r0, #10
}
    c550:	bd10      	pop	{r4, pc}
		UpdateChannelIdStatus(updateChid.channelIndex,updateChid.statusNew);
    c552:	7849      	ldrb	r1, [r1, #1]
    c554:	4b02      	ldr	r3, [pc, #8]	; (c560 <setChannelIdStatus+0x20>)
    c556:	4798      	blx	r3
	StackRetStatus_t retVal = LORAWAN_SUCCESS;
    c558:	2008      	movs	r0, #8
	return retVal;
    c55a:	e7f9      	b.n	c550 <setChannelIdStatus+0x10>
    c55c:	200024d0 	.word	0x200024d0
    c560:	0000a1ed 	.word	0x0000a1ed

0000c564 <ValidateDataRange>:
{
    c564:	b530      	push	{r4, r5, lr}
	uint8_t maxTxDR = RegParams.cmnParams.paramsType1.maxTxDR;
    c566:	23a8      	movs	r3, #168	; 0xa8
    c568:	005b      	lsls	r3, r3, #1
    c56a:	4a17      	ldr	r2, [pc, #92]	; (c5c8 <ValidateDataRange+0x64>)
    c56c:	5cd3      	ldrb	r3, [r2, r3]
	memcpy(&val_drange,attrInput,sizeof(ValUpdateDrange_t));
    c56e:	784a      	ldrb	r2, [r1, #1]
	dataRateMax = (val_drange.dataRangeNew & FIRST_NIBBLE) >> SHIFT4;
    c570:	0914      	lsrs	r4, r2, #4
	    retVal = LORAWAN_INVALID_PARAMETER;	   
    c572:	200a      	movs	r0, #10
	if (dataRate > RegParams.cmnParams.paramsType1.maxTxDR)
    c574:	42a3      	cmp	r3, r4
    c576:	d213      	bcs.n	c5a0 <ValidateDataRange+0x3c>
}
    c578:	bd30      	pop	{r4, r5, pc}
	   ((chId >= RegParams.cmnParams.paramsType1.Max_125khzChan) && (chId < RegParams.maxChannels) && (dataRateMin != maxTxDR)) ||
    c57a:	202a      	movs	r0, #42	; 0x2a
    c57c:	4d12      	ldr	r5, [pc, #72]	; (c5c8 <ValidateDataRange+0x64>)
    c57e:	562d      	ldrsb	r5, [r5, r0]
	StackRetStatus_t retVal = LORAWAN_SUCCESS;
    c580:	3822      	subs	r0, #34	; 0x22
	   ((chId >= RegParams.cmnParams.paramsType1.Max_125khzChan) && (chId < RegParams.maxChannels) && (dataRateMin != maxTxDR)) ||
    c582:	42a9      	cmp	r1, r5
    c584:	daf8      	bge.n	c578 <ValidateDataRange+0x14>
	    retVal = LORAWAN_INVALID_PARAMETER;	   
    c586:	3002      	adds	r0, #2
	   ((chId >= RegParams.cmnParams.paramsType1.Max_125khzChan) && (chId < RegParams.maxChannels) && (dataRateMin != maxTxDR)) ||
    c588:	4293      	cmp	r3, r2
    c58a:	d1f5      	bne.n	c578 <ValidateDataRange+0x14>
	   ((chId >= RegParams.cmnParams.paramsType1.Max_125khzChan) && (chId < RegParams.maxChannels) && (dataRateMax != maxTxDR)))
    c58c:	42a3      	cmp	r3, r4
    c58e:	d005      	beq.n	c59c <ValidateDataRange+0x38>
	    retVal = LORAWAN_INVALID_PARAMETER;	   
    c590:	200a      	movs	r0, #10
	return retVal;
    c592:	e7f1      	b.n	c578 <ValidateDataRange+0x14>
	    retVal = LORAWAN_INVALID_PARAMETER;	   
    c594:	200a      	movs	r0, #10
    c596:	e7ef      	b.n	c578 <ValidateDataRange+0x14>
    c598:	200a      	movs	r0, #10
    c59a:	e7ed      	b.n	c578 <ValidateDataRange+0x14>
	StackRetStatus_t retVal = LORAWAN_SUCCESS;
    c59c:	2008      	movs	r0, #8
    c59e:	e7eb      	b.n	c578 <ValidateDataRange+0x14>
	dataRateMin = val_drange.dataRangeNew & LAST_NIBBLE;
    c5a0:	200f      	movs	r0, #15
    c5a2:	4002      	ands	r2, r0
	    retVal = LORAWAN_INVALID_PARAMETER;	   
    c5a4:	3805      	subs	r0, #5
	if (dataRate > RegParams.cmnParams.paramsType1.maxTxDR)
    c5a6:	4293      	cmp	r3, r2
    c5a8:	d3e6      	bcc.n	c578 <ValidateDataRange+0x14>
	if((ValidateDataRateTxT1(TX_DATARATE, (void *)&dataRateMax) != LORAWAN_SUCCESS ) || (ValidateDataRateTxT1(TX_DATARATE, (void *)&dataRateMin) != LORAWAN_SUCCESS ) || dataRateMax < dataRateMin || 
    c5aa:	42a2      	cmp	r2, r4
    c5ac:	d8e4      	bhi.n	c578 <ValidateDataRange+0x14>
	memcpy(&val_drange,attrInput,sizeof(ValUpdateDrange_t));
    c5ae:	7809      	ldrb	r1, [r1, #0]
	   ((chId < RegParams.cmnParams.paramsType1.Max_125khzChan) && ((dataRateMin == maxTxDR) || (dataRateMax == maxTxDR))) || 
    c5b0:	2054      	movs	r0, #84	; 0x54
    c5b2:	30ff      	adds	r0, #255	; 0xff
	if((ValidateDataRateTxT1(TX_DATARATE, (void *)&dataRateMax) != LORAWAN_SUCCESS ) || (ValidateDataRateTxT1(TX_DATARATE, (void *)&dataRateMin) != LORAWAN_SUCCESS ) || dataRateMax < dataRateMin || 
    c5b4:	4d04      	ldr	r5, [pc, #16]	; (c5c8 <ValidateDataRange+0x64>)
    c5b6:	5c28      	ldrb	r0, [r5, r0]
    c5b8:	4288      	cmp	r0, r1
    c5ba:	d9de      	bls.n	c57a <ValidateDataRange+0x16>
	   ((chId < RegParams.cmnParams.paramsType1.Max_125khzChan) && ((dataRateMin == maxTxDR) || (dataRateMax == maxTxDR))) || 
    c5bc:	4293      	cmp	r3, r2
    c5be:	d0e9      	beq.n	c594 <ValidateDataRange+0x30>
    c5c0:	42a3      	cmp	r3, r4
    c5c2:	d0e9      	beq.n	c598 <ValidateDataRange+0x34>
	StackRetStatus_t retVal = LORAWAN_SUCCESS;
    c5c4:	2008      	movs	r0, #8
    c5c6:	e7d7      	b.n	c578 <ValidateDataRange+0x14>
    c5c8:	200024d0 	.word	0x200024d0

0000c5cc <setDataRange>:
{
    c5cc:	b570      	push	{r4, r5, r6, lr}
    c5ce:	000d      	movs	r5, r1
	if((ValidateDataRange(DATA_RANGE, attrInput) != LORAWAN_SUCCESS) || (ValidateChannelId(CHANNEL_ID, &update_dr.channelIndex) != LORAWAN_SUCCESS))
    c5d0:	2012      	movs	r0, #18
    c5d2:	4b15      	ldr	r3, [pc, #84]	; (c628 <setDataRange+0x5c>)
    c5d4:	4798      	blx	r3
    c5d6:	0004      	movs	r4, r0
    c5d8:	2808      	cmp	r0, #8
    c5da:	d002      	beq.n	c5e2 <setDataRange+0x16>
		retVal = LORAWAN_INVALID_PARAMETER;
    c5dc:	240a      	movs	r4, #10
}
    c5de:	0020      	movs	r0, r4
    c5e0:	bd70      	pop	{r4, r5, r6, pc}
	memcpy((void *)&update_dr,attrInput,sizeof(ValUpdateDrange_t));
    c5e2:	782b      	ldrb	r3, [r5, #0]
    if (channelId >= RegParams.maxChannels)
    c5e4:	222a      	movs	r2, #42	; 0x2a
    c5e6:	4911      	ldr	r1, [pc, #68]	; (c62c <setDataRange+0x60>)
    c5e8:	568a      	ldrsb	r2, [r1, r2]
    c5ea:	4293      	cmp	r3, r2
    c5ec:	db01      	blt.n	c5f2 <setDataRange+0x26>
		retVal = LORAWAN_INVALID_PARAMETER;
    c5ee:	3402      	adds	r4, #2
    c5f0:	e7f5      	b.n	c5de <setDataRange+0x12>
	memcpy((void *)&update_dr,attrInput,sizeof(ValUpdateDrange_t));
    c5f2:	786d      	ldrb	r5, [r5, #1]
		RegParams.pChParams[update_dr.channelIndex].dataRange.value = update_dr.dataRangeNew;
    c5f4:	4a0d      	ldr	r2, [pc, #52]	; (c62c <setDataRange+0x60>)
    c5f6:	7911      	ldrb	r1, [r2, #4]
    c5f8:	7950      	ldrb	r0, [r2, #5]
    c5fa:	0200      	lsls	r0, r0, #8
    c5fc:	4308      	orrs	r0, r1
    c5fe:	7991      	ldrb	r1, [r2, #6]
    c600:	0409      	lsls	r1, r1, #16
    c602:	4308      	orrs	r0, r1
    c604:	79d1      	ldrb	r1, [r2, #7]
    c606:	0609      	lsls	r1, r1, #24
    c608:	4301      	orrs	r1, r0
    c60a:	005b      	lsls	r3, r3, #1
    c60c:	185b      	adds	r3, r3, r1
    c60e:	705d      	strb	r5, [r3, #1]
		PDS_STORE(RegParams.regParamItems.ch_param_1_item_id);
    c610:	4b07      	ldr	r3, [pc, #28]	; (c630 <setDataRange+0x64>)
    c612:	5cd3      	ldrb	r3, [r2, r3]
    c614:	4907      	ldr	r1, [pc, #28]	; (c634 <setDataRange+0x68>)
    c616:	5c50      	ldrb	r0, [r2, r1]
    c618:	0200      	lsls	r0, r0, #8
    c61a:	4318      	orrs	r0, r3
    c61c:	b2c1      	uxtb	r1, r0
    c61e:	0a00      	lsrs	r0, r0, #8
    c620:	4b05      	ldr	r3, [pc, #20]	; (c638 <setDataRange+0x6c>)
    c622:	4798      	blx	r3
	return retVal;
    c624:	e7db      	b.n	c5de <setDataRange+0x12>
    c626:	46c0      	nop			; (mov r8, r8)
    c628:	0000c565 	.word	0x0000c565
    c62c:	200024d0 	.word	0x200024d0
    c630:	0000020e 	.word	0x0000020e
    c634:	0000020f 	.word	0x0000020f
    c638:	0000e0dd 	.word	0x0000e0dd

0000c63c <LORAREG_GetAttr_RxWindowSizeT1>:
{
    c63c:	b570      	push	{r4, r5, r6, lr}
    c63e:	0015      	movs	r5, r2
	dataRate = *(uint8_t *)attrInput;
    c640:	780c      	ldrb	r4, [r1, #0]
	if (dataRate > RegParams.cmnParams.paramsType1.maxTxDR)
    c642:	23a8      	movs	r3, #168	; 0xa8
    c644:	005b      	lsls	r3, r3, #1
    c646:	4a0f      	ldr	r2, [pc, #60]	; (c684 <LORAREG_GetAttr_RxWindowSizeT1+0x48>)
    c648:	5cd3      	ldrb	r3, [r2, r3]
    c64a:	42a3      	cmp	r3, r4
    c64c:	d205      	bcs.n	c65a <LORAREG_GetAttr_RxWindowSizeT1+0x1e>
	if((ValidateDataRateTxT1(TX_DATARATE, attrInput) != LORAWAN_SUCCESS) && (ValidateDataRateRxT1(RX_DATARATE, attrInput) != LORAWAN_SUCCESS))
    c64e:	200f      	movs	r0, #15
    c650:	4b0d      	ldr	r3, [pc, #52]	; (c688 <LORAREG_GetAttr_RxWindowSizeT1+0x4c>)
    c652:	4798      	blx	r3
		return LORAWAN_INVALID_PARAMETER;
    c654:	230a      	movs	r3, #10
	if((ValidateDataRateTxT1(TX_DATARATE, attrInput) != LORAWAN_SUCCESS) && (ValidateDataRateRxT1(RX_DATARATE, attrInput) != LORAWAN_SUCCESS))
    c656:	2808      	cmp	r0, #8
    c658:	d112      	bne.n	c680 <LORAREG_GetAttr_RxWindowSizeT1+0x44>
	    *(uint16_t *)attrOutput = RegParams.pDrParams[dataRate].rxWindowSize;	
    c65a:	490a      	ldr	r1, [pc, #40]	; (c684 <LORAREG_GetAttr_RxWindowSizeT1+0x48>)
    c65c:	780b      	ldrb	r3, [r1, #0]
    c65e:	784a      	ldrb	r2, [r1, #1]
    c660:	0212      	lsls	r2, r2, #8
    c662:	431a      	orrs	r2, r3
    c664:	788b      	ldrb	r3, [r1, #2]
    c666:	041b      	lsls	r3, r3, #16
    c668:	431a      	orrs	r2, r3
    c66a:	78cb      	ldrb	r3, [r1, #3]
    c66c:	061b      	lsls	r3, r3, #24
    c66e:	4313      	orrs	r3, r2
    c670:	00e4      	lsls	r4, r4, #3
    c672:	5ce2      	ldrb	r2, [r4, r3]
    c674:	18e4      	adds	r4, r4, r3
    c676:	7863      	ldrb	r3, [r4, #1]
    c678:	021b      	lsls	r3, r3, #8
    c67a:	4313      	orrs	r3, r2
    c67c:	802b      	strh	r3, [r5, #0]
	return result;
    c67e:	2308      	movs	r3, #8
}
    c680:	0018      	movs	r0, r3
    c682:	bd70      	pop	{r4, r5, r6, pc}
    c684:	200024d0 	.word	0x200024d0
    c688:	000099d1 	.word	0x000099d1

0000c68c <LORAREG_GetAttr_RxWindowOffsetT1>:
{
    c68c:	b570      	push	{r4, r5, r6, lr}
    c68e:	0015      	movs	r5, r2
	dataRate = *(uint8_t *)attrInput;
    c690:	780c      	ldrb	r4, [r1, #0]
	if (dataRate > RegParams.cmnParams.paramsType1.maxTxDR)
    c692:	23a8      	movs	r3, #168	; 0xa8
    c694:	005b      	lsls	r3, r3, #1
    c696:	4a0e      	ldr	r2, [pc, #56]	; (c6d0 <LORAREG_GetAttr_RxWindowOffsetT1+0x44>)
    c698:	5cd3      	ldrb	r3, [r2, r3]
    c69a:	42a3      	cmp	r3, r4
    c69c:	d205      	bcs.n	c6aa <LORAREG_GetAttr_RxWindowOffsetT1+0x1e>
	if((ValidateDataRateTxT1(TX_DATARATE, attrInput) != LORAWAN_SUCCESS) && (ValidateDataRateRxT1(RX_DATARATE, attrInput) != LORAWAN_SUCCESS))
    c69e:	200f      	movs	r0, #15
    c6a0:	4b0c      	ldr	r3, [pc, #48]	; (c6d4 <LORAREG_GetAttr_RxWindowOffsetT1+0x48>)
    c6a2:	4798      	blx	r3
		return LORAWAN_INVALID_PARAMETER;
    c6a4:	230a      	movs	r3, #10
	if((ValidateDataRateTxT1(TX_DATARATE, attrInput) != LORAWAN_SUCCESS) && (ValidateDataRateRxT1(RX_DATARATE, attrInput) != LORAWAN_SUCCESS))
    c6a6:	2808      	cmp	r0, #8
    c6a8:	d110      	bne.n	c6cc <LORAREG_GetAttr_RxWindowOffsetT1+0x40>
		*(int8_t *)attrOutput = RegParams.pDrParams[dataRate].rxWindowOffset;
    c6aa:	4909      	ldr	r1, [pc, #36]	; (c6d0 <LORAREG_GetAttr_RxWindowOffsetT1+0x44>)
    c6ac:	780b      	ldrb	r3, [r1, #0]
    c6ae:	784a      	ldrb	r2, [r1, #1]
    c6b0:	0212      	lsls	r2, r2, #8
    c6b2:	431a      	orrs	r2, r3
    c6b4:	788b      	ldrb	r3, [r1, #2]
    c6b6:	041b      	lsls	r3, r3, #16
    c6b8:	431a      	orrs	r2, r3
    c6ba:	78cb      	ldrb	r3, [r1, #3]
    c6bc:	061b      	lsls	r3, r3, #24
    c6be:	4313      	orrs	r3, r2
    c6c0:	00e4      	lsls	r4, r4, #3
    c6c2:	18e3      	adds	r3, r4, r3
    c6c4:	791b      	ldrb	r3, [r3, #4]
    c6c6:	b25b      	sxtb	r3, r3
    c6c8:	702b      	strb	r3, [r5, #0]
	return result;
    c6ca:	2308      	movs	r3, #8
}
    c6cc:	0018      	movs	r0, r3
    c6ce:	bd70      	pop	{r4, r5, r6, pc}
    c6d0:	200024d0 	.word	0x200024d0
    c6d4:	000099d1 	.word	0x000099d1

0000c6d8 <LORAREG_GetAttr_MaxPayloadT1>:
{
    c6d8:	b570      	push	{r4, r5, r6, lr}
    c6da:	0015      	movs	r5, r2
	dataRate = *(uint8_t *)attrInput;
    c6dc:	780c      	ldrb	r4, [r1, #0]
	if (dataRate > RegParams.cmnParams.paramsType1.maxTxDR)
    c6de:	23a8      	movs	r3, #168	; 0xa8
    c6e0:	005b      	lsls	r3, r3, #1
    c6e2:	4a0e      	ldr	r2, [pc, #56]	; (c71c <LORAREG_GetAttr_MaxPayloadT1+0x44>)
    c6e4:	5cd3      	ldrb	r3, [r2, r3]
    c6e6:	42a3      	cmp	r3, r4
    c6e8:	d205      	bcs.n	c6f6 <LORAREG_GetAttr_MaxPayloadT1+0x1e>
	if((ValidateDataRateTxT1(TX_DATARATE, attrInput) != LORAWAN_SUCCESS) && (ValidateDataRateRxT1(RX_DATARATE, attrInput) != LORAWAN_SUCCESS))
    c6ea:	200f      	movs	r0, #15
    c6ec:	4b0c      	ldr	r3, [pc, #48]	; (c720 <LORAREG_GetAttr_MaxPayloadT1+0x48>)
    c6ee:	4798      	blx	r3
		result =  LORAWAN_INVALID_PARAMETER;
    c6f0:	230a      	movs	r3, #10
	if((ValidateDataRateTxT1(TX_DATARATE, attrInput) != LORAWAN_SUCCESS) && (ValidateDataRateRxT1(RX_DATARATE, attrInput) != LORAWAN_SUCCESS))
    c6f2:	2808      	cmp	r0, #8
    c6f4:	d10f      	bne.n	c716 <LORAREG_GetAttr_MaxPayloadT1+0x3e>
		*(uint8_t *)attrOutput = RegParams.pDrParams[dataRate].maxPayloadSizeDt0;
    c6f6:	4909      	ldr	r1, [pc, #36]	; (c71c <LORAREG_GetAttr_MaxPayloadT1+0x44>)
    c6f8:	780b      	ldrb	r3, [r1, #0]
    c6fa:	784a      	ldrb	r2, [r1, #1]
    c6fc:	0212      	lsls	r2, r2, #8
    c6fe:	431a      	orrs	r2, r3
    c700:	788b      	ldrb	r3, [r1, #2]
    c702:	041b      	lsls	r3, r3, #16
    c704:	431a      	orrs	r2, r3
    c706:	78cb      	ldrb	r3, [r1, #3]
    c708:	061b      	lsls	r3, r3, #24
    c70a:	4313      	orrs	r3, r2
    c70c:	00e4      	lsls	r4, r4, #3
    c70e:	18e3      	adds	r3, r4, r3
    c710:	789b      	ldrb	r3, [r3, #2]
    c712:	702b      	strb	r3, [r5, #0]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    c714:	2308      	movs	r3, #8
}
    c716:	0018      	movs	r0, r3
    c718:	bd70      	pop	{r4, r5, r6, pc}
    c71a:	46c0      	nop			; (mov r8, r8)
    c71c:	200024d0 	.word	0x200024d0
    c720:	000099d1 	.word	0x000099d1

0000c724 <LORAREG_GetAttr_ModulationAttrT1>:
{
    c724:	b570      	push	{r4, r5, r6, lr}
    c726:	0015      	movs	r5, r2
	dataRate = *(uint8_t *)attrInput;
    c728:	780c      	ldrb	r4, [r1, #0]
	if (dataRate > RegParams.cmnParams.paramsType1.maxTxDR)
    c72a:	23a8      	movs	r3, #168	; 0xa8
    c72c:	005b      	lsls	r3, r3, #1
    c72e:	4a0e      	ldr	r2, [pc, #56]	; (c768 <LORAREG_GetAttr_ModulationAttrT1+0x44>)
    c730:	5cd3      	ldrb	r3, [r2, r3]
    c732:	42a3      	cmp	r3, r4
    c734:	d205      	bcs.n	c742 <LORAREG_GetAttr_ModulationAttrT1+0x1e>
	if((ValidateDataRateTxT1(TX_DATARATE, attrInput) != LORAWAN_SUCCESS) && (ValidateDataRateRxT1(RX_DATARATE, attrInput) != LORAWAN_SUCCESS))
    c736:	200f      	movs	r0, #15
    c738:	4b0c      	ldr	r3, [pc, #48]	; (c76c <LORAREG_GetAttr_ModulationAttrT1+0x48>)
    c73a:	4798      	blx	r3
		result = LORAWAN_INVALID_PARAMETER;
    c73c:	230a      	movs	r3, #10
	if((ValidateDataRateTxT1(TX_DATARATE, attrInput) != LORAWAN_SUCCESS) && (ValidateDataRateRxT1(RX_DATARATE, attrInput) != LORAWAN_SUCCESS))
    c73e:	2808      	cmp	r0, #8
    c740:	d10f      	bne.n	c762 <LORAREG_GetAttr_ModulationAttrT1+0x3e>
	    *(uint8_t *)attrOutput = RegParams.pDrParams[dataRate].modulation;
    c742:	4909      	ldr	r1, [pc, #36]	; (c768 <LORAREG_GetAttr_ModulationAttrT1+0x44>)
    c744:	780b      	ldrb	r3, [r1, #0]
    c746:	784a      	ldrb	r2, [r1, #1]
    c748:	0212      	lsls	r2, r2, #8
    c74a:	431a      	orrs	r2, r3
    c74c:	788b      	ldrb	r3, [r1, #2]
    c74e:	041b      	lsls	r3, r3, #16
    c750:	431a      	orrs	r2, r3
    c752:	78cb      	ldrb	r3, [r1, #3]
    c754:	061b      	lsls	r3, r3, #24
    c756:	4313      	orrs	r3, r2
    c758:	00e4      	lsls	r4, r4, #3
    c75a:	18e3      	adds	r3, r4, r3
    c75c:	79db      	ldrb	r3, [r3, #7]
    c75e:	702b      	strb	r3, [r5, #0]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    c760:	2308      	movs	r3, #8
}
    c762:	0018      	movs	r0, r3
    c764:	bd70      	pop	{r4, r5, r6, pc}
    c766:	46c0      	nop			; (mov r8, r8)
    c768:	200024d0 	.word	0x200024d0
    c76c:	000099d1 	.word	0x000099d1

0000c770 <LORAREG_GetAttr_BandwidthAttrT1>:
{
    c770:	b570      	push	{r4, r5, r6, lr}
    c772:	0015      	movs	r5, r2
	dataRate = *(uint8_t *)attrInput;
    c774:	780c      	ldrb	r4, [r1, #0]
	if (dataRate > RegParams.cmnParams.paramsType1.maxTxDR)
    c776:	23a8      	movs	r3, #168	; 0xa8
    c778:	005b      	lsls	r3, r3, #1
    c77a:	4a0e      	ldr	r2, [pc, #56]	; (c7b4 <LORAREG_GetAttr_BandwidthAttrT1+0x44>)
    c77c:	5cd3      	ldrb	r3, [r2, r3]
    c77e:	42a3      	cmp	r3, r4
    c780:	d205      	bcs.n	c78e <LORAREG_GetAttr_BandwidthAttrT1+0x1e>
	if((ValidateDataRateTxT1(TX_DATARATE, attrInput) != LORAWAN_SUCCESS) && (ValidateDataRateRxT1(RX_DATARATE, attrInput) != LORAWAN_SUCCESS))
    c782:	200f      	movs	r0, #15
    c784:	4b0c      	ldr	r3, [pc, #48]	; (c7b8 <LORAREG_GetAttr_BandwidthAttrT1+0x48>)
    c786:	4798      	blx	r3
		result = LORAWAN_INVALID_PARAMETER;
    c788:	230a      	movs	r3, #10
	if((ValidateDataRateTxT1(TX_DATARATE, attrInput) != LORAWAN_SUCCESS) && (ValidateDataRateRxT1(RX_DATARATE, attrInput) != LORAWAN_SUCCESS))
    c78a:	2808      	cmp	r0, #8
    c78c:	d10f      	bne.n	c7ae <LORAREG_GetAttr_BandwidthAttrT1+0x3e>
		*(uint8_t *)attrOutput = RegParams.pDrParams[dataRate].bandwidth;
    c78e:	4909      	ldr	r1, [pc, #36]	; (c7b4 <LORAREG_GetAttr_BandwidthAttrT1+0x44>)
    c790:	780b      	ldrb	r3, [r1, #0]
    c792:	784a      	ldrb	r2, [r1, #1]
    c794:	0212      	lsls	r2, r2, #8
    c796:	431a      	orrs	r2, r3
    c798:	788b      	ldrb	r3, [r1, #2]
    c79a:	041b      	lsls	r3, r3, #16
    c79c:	431a      	orrs	r2, r3
    c79e:	78cb      	ldrb	r3, [r1, #3]
    c7a0:	061b      	lsls	r3, r3, #24
    c7a2:	4313      	orrs	r3, r2
    c7a4:	00e4      	lsls	r4, r4, #3
    c7a6:	18e3      	adds	r3, r4, r3
    c7a8:	799b      	ldrb	r3, [r3, #6]
    c7aa:	702b      	strb	r3, [r5, #0]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    c7ac:	2308      	movs	r3, #8
}
    c7ae:	0018      	movs	r0, r3
    c7b0:	bd70      	pop	{r4, r5, r6, pc}
    c7b2:	46c0      	nop			; (mov r8, r8)
    c7b4:	200024d0 	.word	0x200024d0
    c7b8:	000099d1 	.word	0x000099d1

0000c7bc <LORAREG_GetAttr_SpreadFactorT1>:
{
    c7bc:	b570      	push	{r4, r5, r6, lr}
    c7be:	0015      	movs	r5, r2
	dataRate = *(uint8_t *)attrInput;
    c7c0:	780c      	ldrb	r4, [r1, #0]
	if (dataRate > RegParams.cmnParams.paramsType1.maxTxDR)
    c7c2:	23a8      	movs	r3, #168	; 0xa8
    c7c4:	005b      	lsls	r3, r3, #1
    c7c6:	4a0e      	ldr	r2, [pc, #56]	; (c800 <LORAREG_GetAttr_SpreadFactorT1+0x44>)
    c7c8:	5cd3      	ldrb	r3, [r2, r3]
    c7ca:	42a3      	cmp	r3, r4
    c7cc:	d205      	bcs.n	c7da <LORAREG_GetAttr_SpreadFactorT1+0x1e>
	if((ValidateDataRateTxT1(TX_DATARATE, attrInput) != LORAWAN_SUCCESS) && (ValidateDataRateRxT1(RX_DATARATE, attrInput) != LORAWAN_SUCCESS))
    c7ce:	200f      	movs	r0, #15
    c7d0:	4b0c      	ldr	r3, [pc, #48]	; (c804 <LORAREG_GetAttr_SpreadFactorT1+0x48>)
    c7d2:	4798      	blx	r3
		result =  LORAWAN_INVALID_PARAMETER;
    c7d4:	230a      	movs	r3, #10
	if((ValidateDataRateTxT1(TX_DATARATE, attrInput) != LORAWAN_SUCCESS) && (ValidateDataRateRxT1(RX_DATARATE, attrInput) != LORAWAN_SUCCESS))
    c7d6:	2808      	cmp	r0, #8
    c7d8:	d10f      	bne.n	c7fa <LORAREG_GetAttr_SpreadFactorT1+0x3e>
		*(RadioDataRate_t *)attrOutput = RegParams.pDrParams[dataRate].spreadingFactor;
    c7da:	4909      	ldr	r1, [pc, #36]	; (c800 <LORAREG_GetAttr_SpreadFactorT1+0x44>)
    c7dc:	780b      	ldrb	r3, [r1, #0]
    c7de:	784a      	ldrb	r2, [r1, #1]
    c7e0:	0212      	lsls	r2, r2, #8
    c7e2:	431a      	orrs	r2, r3
    c7e4:	788b      	ldrb	r3, [r1, #2]
    c7e6:	041b      	lsls	r3, r3, #16
    c7e8:	431a      	orrs	r2, r3
    c7ea:	78cb      	ldrb	r3, [r1, #3]
    c7ec:	061b      	lsls	r3, r3, #24
    c7ee:	4313      	orrs	r3, r2
    c7f0:	00e4      	lsls	r4, r4, #3
    c7f2:	18e3      	adds	r3, r4, r3
    c7f4:	795b      	ldrb	r3, [r3, #5]
    c7f6:	702b      	strb	r3, [r5, #0]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    c7f8:	2308      	movs	r3, #8
}
    c7fa:	0018      	movs	r0, r3
    c7fc:	bd70      	pop	{r4, r5, r6, pc}
    c7fe:	46c0      	nop			; (mov r8, r8)
    c800:	200024d0 	.word	0x200024d0
    c804:	000099d1 	.word	0x000099d1

0000c808 <ValidateTxFreqT1>:
{
    c808:	b530      	push	{r4, r5, lr}
    c80a:	b083      	sub	sp, #12
	memcpy(&val_freqTx,attrInput,sizeof(ValUpdateFreqTx_t));
    c80c:	2208      	movs	r2, #8
    c80e:	4668      	mov	r0, sp
    c810:	4b20      	ldr	r3, [pc, #128]	; (c894 <ValidateTxFreqT1+0x8c>)
    c812:	4798      	blx	r3
	if(ChIndex > RegParams.maxChannels)
    c814:	466b      	mov	r3, sp
    c816:	7919      	ldrb	r1, [r3, #4]
    c818:	232a      	movs	r3, #42	; 0x2a
    c81a:	4a1f      	ldr	r2, [pc, #124]	; (c898 <ValidateTxFreqT1+0x90>)
    c81c:	56d3      	ldrsb	r3, [r2, r3]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    c81e:	2008      	movs	r0, #8
	if(ChIndex > RegParams.maxChannels)
    c820:	4299      	cmp	r1, r3
    c822:	dd00      	ble.n	c826 <ValidateTxFreqT1+0x1e>
		result = LORAWAN_INVALID_PARAMETER;
    c824:	3002      	adds	r0, #2
	if(val_freqTx.frequencyNew != GenerateFrequency1(ChIndex) && 
    c826:	9c00      	ldr	r4, [sp, #0]
    channelFrequency = RegParams.cmnParams.paramsType1.UpStreamCh0Freq + FREQ_200KHZ * channelIndex;
    c828:	4d1b      	ldr	r5, [pc, #108]	; (c898 <ValidateTxFreqT1+0x90>)
    c82a:	2344      	movs	r3, #68	; 0x44
    c82c:	33ff      	adds	r3, #255	; 0xff
    c82e:	5ceb      	ldrb	r3, [r5, r3]
    c830:	22a2      	movs	r2, #162	; 0xa2
    c832:	0052      	lsls	r2, r2, #1
    c834:	5caa      	ldrb	r2, [r5, r2]
    c836:	0212      	lsls	r2, r2, #8
    c838:	431a      	orrs	r2, r3
    c83a:	2346      	movs	r3, #70	; 0x46
    c83c:	33ff      	adds	r3, #255	; 0xff
    c83e:	5ceb      	ldrb	r3, [r5, r3]
    c840:	041b      	lsls	r3, r3, #16
    c842:	431a      	orrs	r2, r3
    c844:	23a3      	movs	r3, #163	; 0xa3
    c846:	005b      	lsls	r3, r3, #1
    c848:	5ceb      	ldrb	r3, [r5, r3]
    c84a:	061b      	lsls	r3, r3, #24
    c84c:	4313      	orrs	r3, r2
    c84e:	4a13      	ldr	r2, [pc, #76]	; (c89c <ValidateTxFreqT1+0x94>)
    c850:	434a      	muls	r2, r1
    c852:	189b      	adds	r3, r3, r2
	if(val_freqTx.frequencyNew != GenerateFrequency1(ChIndex) && 
    c854:	429c      	cmp	r4, r3
    c856:	d01b      	beq.n	c890 <ValidateTxFreqT1+0x88>
	                   FREQ_1600KHZ * (channelIndex - RegParams.cmnParams.paramsType1.Max_125khzChan);
    c858:	2354      	movs	r3, #84	; 0x54
    c85a:	33ff      	adds	r3, #255	; 0xff
    c85c:	5ceb      	ldrb	r3, [r5, r3]
    c85e:	1ac9      	subs	r1, r1, r3
    c860:	4b0f      	ldr	r3, [pc, #60]	; (c8a0 <ValidateTxFreqT1+0x98>)
    c862:	4359      	muls	r1, r3
    channelFrequency = RegParams.cmnParams.paramsType1.UpStreamCh64Freq + 
    c864:	2348      	movs	r3, #72	; 0x48
    c866:	33ff      	adds	r3, #255	; 0xff
    c868:	5ceb      	ldrb	r3, [r5, r3]
    c86a:	22a4      	movs	r2, #164	; 0xa4
    c86c:	0052      	lsls	r2, r2, #1
    c86e:	5caa      	ldrb	r2, [r5, r2]
    c870:	0212      	lsls	r2, r2, #8
    c872:	4313      	orrs	r3, r2
    c874:	224a      	movs	r2, #74	; 0x4a
    c876:	32ff      	adds	r2, #255	; 0xff
    c878:	5caa      	ldrb	r2, [r5, r2]
    c87a:	0412      	lsls	r2, r2, #16
    c87c:	431a      	orrs	r2, r3
    c87e:	23a5      	movs	r3, #165	; 0xa5
    c880:	005b      	lsls	r3, r3, #1
    c882:	5ceb      	ldrb	r3, [r5, r3]
    c884:	061b      	lsls	r3, r3, #24
    c886:	4313      	orrs	r3, r2
    c888:	18cb      	adds	r3, r1, r3
	if(val_freqTx.frequencyNew != GenerateFrequency1(ChIndex) && 
    c88a:	429c      	cmp	r4, r3
    c88c:	d000      	beq.n	c890 <ValidateTxFreqT1+0x88>
		result = LORAWAN_INVALID_PARAMETER;
    c88e:	200a      	movs	r0, #10
}
    c890:	b003      	add	sp, #12
    c892:	bd30      	pop	{r4, r5, pc}
    c894:	00019d89 	.word	0x00019d89
    c898:	200024d0 	.word	0x200024d0
    c89c:	00030d40 	.word	0x00030d40
    c8a0:	00186a00 	.word	0x00186a00

0000c8a4 <LORAREG_GetAttr_NewTxChConfigT1>:
{
    c8a4:	b5f0      	push	{r4, r5, r6, r7, lr}
    c8a6:	46ce      	mov	lr, r9
    c8a8:	4647      	mov	r7, r8
    c8aa:	b580      	push	{r7, lr}
    c8ac:	b083      	sub	sp, #12
    c8ae:	0016      	movs	r6, r2
	memcpy(&newTxChannelReq,(NewTxChannelReq_t *)attrInput,sizeof(NewTxChannelReq_t));
    c8b0:	788d      	ldrb	r5, [r1, #2]
	if (dataRate > RegParams.cmnParams.paramsType1.maxTxDR)
    c8b2:	23a8      	movs	r3, #168	; 0xa8
    c8b4:	005b      	lsls	r3, r3, #1
    c8b6:	4a63      	ldr	r2, [pc, #396]	; (ca44 <LORAREG_GetAttr_NewTxChConfigT1+0x1a0>)
    c8b8:	5cd3      	ldrb	r3, [r2, r3]
		result = LORAWAN_INVALID_PARAMETER;
    c8ba:	240a      	movs	r4, #10
	if (dataRate > RegParams.cmnParams.paramsType1.maxTxDR)
    c8bc:	42ab      	cmp	r3, r5
    c8be:	d300      	bcc.n	c8c2 <LORAREG_GetAttr_NewTxChConfigT1+0x1e>
    c8c0:	e09a      	b.n	c9f8 <LORAREG_GetAttr_NewTxChConfigT1+0x154>
}
    c8c2:	0020      	movs	r0, r4
    c8c4:	b003      	add	sp, #12
    c8c6:	bc0c      	pop	{r2, r3}
    c8c8:	4690      	mov	r8, r2
    c8ca:	4699      	mov	r9, r3
    c8cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		result = SearchAvailableChannel1 (RegParams.maxChannels, transmissionType,currDr, &channelIndex);
    c8ce:	4b5d      	ldr	r3, [pc, #372]	; (ca44 <LORAREG_GetAttr_NewTxChConfigT1+0x1a0>)
    c8d0:	4699      	mov	r9, r3
    c8d2:	232a      	movs	r3, #42	; 0x2a
    c8d4:	464a      	mov	r2, r9
    c8d6:	5cd0      	ldrb	r0, [r2, r3]
    c8d8:	466b      	mov	r3, sp
    c8da:	3307      	adds	r3, #7
    c8dc:	002a      	movs	r2, r5
    c8de:	2101      	movs	r1, #1
    c8e0:	4c59      	ldr	r4, [pc, #356]	; (ca48 <LORAREG_GetAttr_NewTxChConfigT1+0x1a4>)
    c8e2:	47a0      	blx	r4
    c8e4:	0004      	movs	r4, r0
		radioConfig->sf = RegParams.pDrParams[currDr].spreadingFactor;
    c8e6:	464b      	mov	r3, r9
    c8e8:	781b      	ldrb	r3, [r3, #0]
    c8ea:	464a      	mov	r2, r9
    c8ec:	7852      	ldrb	r2, [r2, #1]
    c8ee:	0212      	lsls	r2, r2, #8
    c8f0:	431a      	orrs	r2, r3
    c8f2:	464b      	mov	r3, r9
    c8f4:	789b      	ldrb	r3, [r3, #2]
    c8f6:	041b      	lsls	r3, r3, #16
    c8f8:	431a      	orrs	r2, r3
    c8fa:	464b      	mov	r3, r9
    c8fc:	78db      	ldrb	r3, [r3, #3]
    c8fe:	061b      	lsls	r3, r3, #24
    c900:	4313      	orrs	r3, r2
    c902:	00ed      	lsls	r5, r5, #3
    c904:	18eb      	adds	r3, r5, r3
    c906:	795b      	ldrb	r3, [r3, #5]
    c908:	72f3      	strb	r3, [r6, #11]
	if (result == LORAWAN_SUCCESS)
    c90a:	2c08      	cmp	r4, #8
    c90c:	d1d9      	bne.n	c8c2 <LORAREG_GetAttr_NewTxChConfigT1+0x1e>
	uint8_t txPower = RegParams.maxTxPwr - 2 * txPwrIndx;
    c90e:	007f      	lsls	r7, r7, #1
    c910:	4643      	mov	r3, r8
    c912:	1bdb      	subs	r3, r3, r7
    c914:	b2db      	uxtb	r3, r3
		if (channelIndex < RegParams.cmnParams.paramsType1.Max_125khzChan)
    c916:	466a      	mov	r2, sp
    c918:	3207      	adds	r2, #7
    c91a:	7812      	ldrb	r2, [r2, #0]
    c91c:	2154      	movs	r1, #84	; 0x54
    c91e:	31ff      	adds	r1, #255	; 0xff
    c920:	4848      	ldr	r0, [pc, #288]	; (ca44 <LORAREG_GetAttr_NewTxChConfigT1+0x1a0>)
    c922:	5c41      	ldrb	r1, [r0, r1]
    c924:	4291      	cmp	r1, r2
    c926:	d93c      	bls.n	c9a2 <LORAREG_GetAttr_NewTxChConfigT1+0xfe>
			radioConfig->bandwidth = BW_125KHZ;
    c928:	2107      	movs	r1, #7
    c92a:	72b1      	strb	r1, [r6, #10]
    channelFrequency = RegParams.cmnParams.paramsType1.UpStreamCh0Freq + FREQ_200KHZ * channelIndex;
    c92c:	2144      	movs	r1, #68	; 0x44
    c92e:	31ff      	adds	r1, #255	; 0xff
    c930:	5c41      	ldrb	r1, [r0, r1]
    c932:	25a2      	movs	r5, #162	; 0xa2
    c934:	006d      	lsls	r5, r5, #1
    c936:	5d45      	ldrb	r5, [r0, r5]
    c938:	022d      	lsls	r5, r5, #8
    c93a:	430d      	orrs	r5, r1
    c93c:	2146      	movs	r1, #70	; 0x46
    c93e:	31ff      	adds	r1, #255	; 0xff
    c940:	5c41      	ldrb	r1, [r0, r1]
    c942:	0409      	lsls	r1, r1, #16
    c944:	430d      	orrs	r5, r1
    c946:	21a3      	movs	r1, #163	; 0xa3
    c948:	0049      	lsls	r1, r1, #1
    c94a:	5c41      	ldrb	r1, [r0, r1]
    c94c:	0609      	lsls	r1, r1, #24
    c94e:	4329      	orrs	r1, r5
    c950:	4d3e      	ldr	r5, [pc, #248]	; (ca4c <LORAREG_GetAttr_NewTxChConfigT1+0x1a8>)
    c952:	436a      	muls	r2, r5
    c954:	188a      	adds	r2, r1, r2
			radioConfig->frequency = GenerateFrequency1 (channelIndex);
    c956:	6032      	str	r2, [r6, #0]
			radioConfig->txPower = txPower;
    c958:	7233      	strb	r3, [r6, #8]
			if(RegParams.band == ISM_NA915)
    c95a:	232e      	movs	r3, #46	; 0x2e
    c95c:	5cc3      	ldrb	r3, [r0, r3]
    c95e:	2b02      	cmp	r3, #2
    c960:	d01b      	beq.n	c99a <LORAREG_GetAttr_NewTxChConfigT1+0xf6>
		radioConfig->freq_hop_period = DISABLED;
    c962:	2300      	movs	r3, #0
    c964:	80b3      	strh	r3, [r6, #4]
		radioConfig->modulation = MODULATION_LORA;
    c966:	3301      	adds	r3, #1
    c968:	7273      	strb	r3, [r6, #9]
		RegParams.lastUsedChannelIndex = channelIndex;
    c96a:	466b      	mov	r3, sp
    c96c:	79d9      	ldrb	r1, [r3, #7]
    c96e:	232f      	movs	r3, #47	; 0x2f
    c970:	4a34      	ldr	r2, [pc, #208]	; (ca44 <LORAREG_GetAttr_NewTxChConfigT1+0x1a0>)
    c972:	54d1      	strb	r1, [r2, r3]
    c974:	e7a5      	b.n	c8c2 <LORAREG_GetAttr_NewTxChConfigT1+0x1e>
				radioConfig->sf = SF_10;
    c976:	3308      	adds	r3, #8
    c978:	72f3      	strb	r3, [r6, #11]
    c97a:	e001      	b.n	c980 <LORAREG_GetAttr_NewTxChConfigT1+0xdc>
			radioConfig->sf = SF_8;
    c97c:	2308      	movs	r3, #8
    c97e:	72f3      	strb	r3, [r6, #11]
		PDS_STORE(RegParams.regParamItems.lastUsedSB);
    c980:	4b30      	ldr	r3, [pc, #192]	; (ca44 <LORAREG_GetAttr_NewTxChConfigT1+0x1a0>)
    c982:	2283      	movs	r2, #131	; 0x83
    c984:	0092      	lsls	r2, r2, #2
    c986:	5c9a      	ldrb	r2, [r3, r2]
    c988:	4931      	ldr	r1, [pc, #196]	; (ca50 <LORAREG_GetAttr_NewTxChConfigT1+0x1ac>)
    c98a:	5c58      	ldrb	r0, [r3, r1]
    c98c:	0200      	lsls	r0, r0, #8
    c98e:	4310      	orrs	r0, r2
    c990:	b2c1      	uxtb	r1, r0
    c992:	0a00      	lsrs	r0, r0, #8
    c994:	4b2f      	ldr	r3, [pc, #188]	; (ca54 <LORAREG_GetAttr_NewTxChConfigT1+0x1b0>)
    c996:	4798      	blx	r3
    c998:	e7b7      	b.n	c90a <LORAREG_GetAttr_NewTxChConfigT1+0x66>
    			radioConfig->ecrConfig.override = true;
    c99a:	3b01      	subs	r3, #1
    c99c:	71f3      	strb	r3, [r6, #7]
			    radioConfig->ecrConfig.ecr = CR_4_5;	 
    c99e:	71b3      	strb	r3, [r6, #6]
    c9a0:	e7df      	b.n	c962 <LORAREG_GetAttr_NewTxChConfigT1+0xbe>
			radioConfig->bandwidth = BW_500KHZ;
    c9a2:	2109      	movs	r1, #9
    c9a4:	72b1      	strb	r1, [r6, #10]
	                   FREQ_1600KHZ * (channelIndex - RegParams.cmnParams.paramsType1.Max_125khzChan);
    c9a6:	4927      	ldr	r1, [pc, #156]	; (ca44 <LORAREG_GetAttr_NewTxChConfigT1+0x1a0>)
    c9a8:	2054      	movs	r0, #84	; 0x54
    c9aa:	30ff      	adds	r0, #255	; 0xff
    c9ac:	5c08      	ldrb	r0, [r1, r0]
    c9ae:	1a12      	subs	r2, r2, r0
    c9b0:	4829      	ldr	r0, [pc, #164]	; (ca58 <LORAREG_GetAttr_NewTxChConfigT1+0x1b4>)
    c9b2:	4342      	muls	r2, r0
    channelFrequency = RegParams.cmnParams.paramsType1.UpStreamCh64Freq + 
    c9b4:	2048      	movs	r0, #72	; 0x48
    c9b6:	30ff      	adds	r0, #255	; 0xff
    c9b8:	5c08      	ldrb	r0, [r1, r0]
    c9ba:	25a4      	movs	r5, #164	; 0xa4
    c9bc:	006d      	lsls	r5, r5, #1
    c9be:	5d4d      	ldrb	r5, [r1, r5]
    c9c0:	022d      	lsls	r5, r5, #8
    c9c2:	4305      	orrs	r5, r0
    c9c4:	204a      	movs	r0, #74	; 0x4a
    c9c6:	30ff      	adds	r0, #255	; 0xff
    c9c8:	5c08      	ldrb	r0, [r1, r0]
    c9ca:	0400      	lsls	r0, r0, #16
    c9cc:	4305      	orrs	r5, r0
    c9ce:	20a5      	movs	r0, #165	; 0xa5
    c9d0:	0040      	lsls	r0, r0, #1
    c9d2:	5c08      	ldrb	r0, [r1, r0]
    c9d4:	0600      	lsls	r0, r0, #24
    c9d6:	4328      	orrs	r0, r5
    c9d8:	1812      	adds	r2, r2, r0
			radioConfig->frequency = GenerateFrequency2 (channelIndex);
    c9da:	6032      	str	r2, [r6, #0]
			if( RegParams.band == ISM_NA915)
    c9dc:	222e      	movs	r2, #46	; 0x2e
    c9de:	5c8a      	ldrb	r2, [r1, r2]
    c9e0:	2a02      	cmp	r2, #2
    c9e2:	d003      	beq.n	c9ec <LORAREG_GetAttr_NewTxChConfigT1+0x148>
			if (txPower <= 26)
    c9e4:	2b1a      	cmp	r3, #26
    c9e6:	d804      	bhi.n	c9f2 <LORAREG_GetAttr_NewTxChConfigT1+0x14e>
				radioConfig->txPower = txPower;
    c9e8:	7233      	strb	r3, [r6, #8]
    c9ea:	e7ba      	b.n	c962 <LORAREG_GetAttr_NewTxChConfigT1+0xbe>
			    radioConfig->ecrConfig.override = false;
    c9ec:	2200      	movs	r2, #0
    c9ee:	71f2      	strb	r2, [r6, #7]
    c9f0:	e7f8      	b.n	c9e4 <LORAREG_GetAttr_NewTxChConfigT1+0x140>
				radioConfig->txPower = 26;
    c9f2:	231a      	movs	r3, #26
    c9f4:	7233      	strb	r3, [r6, #8]
    c9f6:	e7b4      	b.n	c962 <LORAREG_GetAttr_NewTxChConfigT1+0xbe>
	memcpy(&newTxChannelReq,(NewTxChannelReq_t *)attrInput,sizeof(NewTxChannelReq_t));
    c9f8:	784f      	ldrb	r7, [r1, #1]
	if (txPowerNew > RegParams.maxTxPwrIndx)
    c9fa:	232d      	movs	r3, #45	; 0x2d
    c9fc:	4a11      	ldr	r2, [pc, #68]	; (ca44 <LORAREG_GetAttr_NewTxChConfigT1+0x1a0>)
    c9fe:	56d3      	ldrsb	r3, [r2, r3]
		result = LORAWAN_INVALID_PARAMETER;
    ca00:	240a      	movs	r4, #10
	if (txPowerNew > RegParams.maxTxPwrIndx)
    ca02:	429f      	cmp	r7, r3
    ca04:	dd00      	ble.n	ca08 <LORAREG_GetAttr_NewTxChConfigT1+0x164>
    ca06:	e75c      	b.n	c8c2 <LORAREG_GetAttr_NewTxChConfigT1+0x1e>
	uint8_t txPower = RegParams.maxTxPwr - 2 * txPwrIndx;
    ca08:	2328      	movs	r3, #40	; 0x28
    ca0a:	5cd3      	ldrb	r3, [r2, r3]
    ca0c:	4698      	mov	r8, r3
	if (transmissionType == 1) // data message (not join request), it should search in all
    ca0e:	780b      	ldrb	r3, [r1, #0]
    ca10:	2b00      	cmp	r3, #0
    ca12:	d000      	beq.n	ca16 <LORAREG_GetAttr_NewTxChConfigT1+0x172>
    ca14:	e75b      	b.n	c8ce <LORAREG_GetAttr_NewTxChConfigT1+0x2a>
		result = SearchAvailableChannel1 (RegParams.cmnParams.paramsType1.Max_125khzChan, transmissionType,DR0, &channelIndex);
    ca16:	466b      	mov	r3, sp
    ca18:	1ddd      	adds	r5, r3, #7
    ca1a:	2354      	movs	r3, #84	; 0x54
    ca1c:	33ff      	adds	r3, #255	; 0xff
    ca1e:	4a09      	ldr	r2, [pc, #36]	; (ca44 <LORAREG_GetAttr_NewTxChConfigT1+0x1a0>)
    ca20:	5cd0      	ldrb	r0, [r2, r3]
    ca22:	002b      	movs	r3, r5
    ca24:	2200      	movs	r2, #0
    ca26:	2100      	movs	r1, #0
    ca28:	4c07      	ldr	r4, [pc, #28]	; (ca48 <LORAREG_GetAttr_NewTxChConfigT1+0x1a4>)
    ca2a:	47a0      	blx	r4
    ca2c:	0004      	movs	r4, r0
		if(channelIndex < MAX_CHANNELS_BANDWIDTH_125_AU_NA)
    ca2e:	782b      	ldrb	r3, [r5, #0]
    ca30:	2b3f      	cmp	r3, #63	; 0x3f
    ca32:	d8a3      	bhi.n	c97c <LORAREG_GetAttr_NewTxChConfigT1+0xd8>
			if( RegParams.band == ISM_NA915)
    ca34:	232e      	movs	r3, #46	; 0x2e
    ca36:	4a03      	ldr	r2, [pc, #12]	; (ca44 <LORAREG_GetAttr_NewTxChConfigT1+0x1a0>)
    ca38:	5cd3      	ldrb	r3, [r2, r3]
    ca3a:	2b02      	cmp	r3, #2
    ca3c:	d09b      	beq.n	c976 <LORAREG_GetAttr_NewTxChConfigT1+0xd2>
				radioConfig->sf = SF_12;
    ca3e:	230c      	movs	r3, #12
    ca40:	72f3      	strb	r3, [r6, #11]
    ca42:	e79d      	b.n	c980 <LORAREG_GetAttr_NewTxChConfigT1+0xdc>
    ca44:	200024d0 	.word	0x200024d0
    ca48:	00009ec5 	.word	0x00009ec5
    ca4c:	00030d40 	.word	0x00030d40
    ca50:	0000020d 	.word	0x0000020d
    ca54:	0000e0dd 	.word	0x0000e0dd
    ca58:	00186a00 	.word	0x00186a00

0000ca5c <LORAREG_InitGetAttrFnPtrsNA>:
    pGetAttr[FREQUENCY] = LORAREG_GetAttr_FreqT1;
    ca5c:	4b2b      	ldr	r3, [pc, #172]	; (cb0c <LORAREG_InitGetAttrFnPtrsNA+0xb0>)
    ca5e:	4a2c      	ldr	r2, [pc, #176]	; (cb10 <LORAREG_InitGetAttrFnPtrsNA+0xb4>)
    ca60:	601a      	str	r2, [r3, #0]
    pGetAttr[RX_WINDOW_SIZE] = LORAREG_GetAttr_RxWindowSizeT1;
    ca62:	4a2c      	ldr	r2, [pc, #176]	; (cb14 <LORAREG_InitGetAttrFnPtrsNA+0xb8>)
    ca64:	60da      	str	r2, [r3, #12]
    pGetAttr[RX_WINDOW_OFFSET] = LORAREG_GetAttr_RxWindowOffsetT1;
    ca66:	4a2c      	ldr	r2, [pc, #176]	; (cb18 <LORAREG_InitGetAttrFnPtrsNA+0xbc>)
    ca68:	611a      	str	r2, [r3, #16]
    pGetAttr[MAX_PAYLOAD_SIZE] = LORAREG_GetAttr_MaxPayloadT1;
    ca6a:	4a2c      	ldr	r2, [pc, #176]	; (cb1c <LORAREG_InitGetAttrFnPtrsNA+0xc0>)
    ca6c:	615a      	str	r2, [r3, #20]
    pGetAttr[MAX_CHANNELS] = LORAREG_GetAttr_MaxChannel;
    ca6e:	4a2c      	ldr	r2, [pc, #176]	; (cb20 <LORAREG_InitGetAttrFnPtrsNA+0xc4>)
    ca70:	619a      	str	r2, [r3, #24]
    pGetAttr[MIN_NEW_CH_INDEX] = LORAREG_GetAttr_MinNewChIndex;
    ca72:	4a2c      	ldr	r2, [pc, #176]	; (cb24 <LORAREG_InitGetAttrFnPtrsNA+0xc8>)
    ca74:	61da      	str	r2, [r3, #28]
    pGetAttr[DEFAULT_RX1_DATA_RATE] = LORAREG_GetAttr_DefRx1DataRate;
    ca76:	4a2c      	ldr	r2, [pc, #176]	; (cb28 <LORAREG_InitGetAttrFnPtrsNA+0xcc>)
    ca78:	621a      	str	r2, [r3, #32]
    pGetAttr[DEFAULT_RX2_DATA_RATE] = LORAREG_GetAttr_DefRx2DataRate;
    ca7a:	4a2c      	ldr	r2, [pc, #176]	; (cb2c <LORAREG_InitGetAttrFnPtrsNA+0xd0>)
    ca7c:	625a      	str	r2, [r3, #36]	; 0x24
    pGetAttr[DEFAULT_RX2_FREQUENCY] = LORAREG_GetAttr_DefRx2Freq;
    ca7e:	4a2c      	ldr	r2, [pc, #176]	; (cb30 <LORAREG_InitGetAttrFnPtrsNA+0xd4>)
    ca80:	629a      	str	r2, [r3, #40]	; 0x28
    pGetAttr[SUPPORTED_REGIONAL_FEATURES] = LORAREG_GetAttr_RegFeatures;
    ca82:	4a2c      	ldr	r2, [pc, #176]	; (cb34 <LORAREG_InitGetAttrFnPtrsNA+0xd8>)
    ca84:	639a      	str	r2, [r3, #56]	; 0x38
    pGetAttr[DATA_RANGE] = LORAREG_GetAttr_DataRange;
    ca86:	4a2c      	ldr	r2, [pc, #176]	; (cb38 <LORAREG_InitGetAttrFnPtrsNA+0xdc>)
    ca88:	649a      	str	r2, [r3, #72]	; 0x48
    pGetAttr[DATA_RANGE_CH_BAND] = LORAREG_GetAttr_DRangeChBandT1;
    ca8a:	4a2c      	ldr	r2, [pc, #176]	; (cb3c <LORAREG_InitGetAttrFnPtrsNA+0xe0>)
    ca8c:	64da      	str	r2, [r3, #76]	; 0x4c
    pGetAttr[MIN_MAX_DR] = LORAREG_GetAttr_MinMaxDr;
    ca8e:	4a2c      	ldr	r2, [pc, #176]	; (cb40 <LORAREG_InitGetAttrFnPtrsNA+0xe4>)
    ca90:	651a      	str	r2, [r3, #80]	; 0x50
    pGetAttr[CHANNEL_ID_STATUS] = LORAREG_GetAttr_ChIdStatus;
    ca92:	4a2c      	ldr	r2, [pc, #176]	; (cb44 <LORAREG_InitGetAttrFnPtrsNA+0xe8>)
    ca94:	659a      	str	r2, [r3, #88]	; 0x58
    pGetAttr[RX1_WINDOW_PARAMS] = LORAREG_GetAttr_Rx1WindowparamsType1;
    ca96:	4a2c      	ldr	r2, [pc, #176]	; (cb48 <LORAREG_InitGetAttrFnPtrsNA+0xec>)
    ca98:	665a      	str	r2, [r3, #100]	; 0x64
	pGetAttr[JOIN_DUTY_CYCLE_TIMER] = LORAREG_GetAttr_JoinDutyCycleRemainingTime;
    ca9a:	492c      	ldr	r1, [pc, #176]	; (cb4c <LORAREG_InitGetAttrFnPtrsNA+0xf0>)
    ca9c:	2280      	movs	r2, #128	; 0x80
    ca9e:	5099      	str	r1, [r3, r2]
    pGetAttr[DUTY_CYCLE] = LORAREG_GetAttr_DutyCycleT1;
    caa0:	4a2b      	ldr	r2, [pc, #172]	; (cb50 <LORAREG_InitGetAttrFnPtrsNA+0xf4>)
    caa2:	679a      	str	r2, [r3, #120]	; 0x78
    pGetAttr[MODULATION_ATTR] = LORAREG_GetAttr_ModulationAttrT1;
    caa4:	492b      	ldr	r1, [pc, #172]	; (cb54 <LORAREG_InitGetAttrFnPtrsNA+0xf8>)
    caa6:	228c      	movs	r2, #140	; 0x8c
    caa8:	5099      	str	r1, [r3, r2]
    pGetAttr[BANDWIDTH_ATTR] = LORAREG_GetAttr_BandwidthAttrT1;
    caaa:	492b      	ldr	r1, [pc, #172]	; (cb58 <LORAREG_InitGetAttrFnPtrsNA+0xfc>)
    caac:	3204      	adds	r2, #4
    caae:	5099      	str	r1, [r3, r2]
    pGetAttr[SPREADING_FACTOR_ATTR] = LORAREG_GetAttr_SpreadFactorT1;
    cab0:	492a      	ldr	r1, [pc, #168]	; (cb5c <LORAREG_InitGetAttrFnPtrsNA+0x100>)
    cab2:	3204      	adds	r2, #4
    cab4:	5099      	str	r1, [r3, r2]
    pGetAttr[MIN_DUTY_CYCLE_TIMER] = LORAREG_GetAttr_MinDutyCycleTimer;
    cab6:	492a      	ldr	r1, [pc, #168]	; (cb60 <LORAREG_InitGetAttrFnPtrsNA+0x104>)
    cab8:	3204      	adds	r2, #4
    caba:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_RECEIVE_DELAY1] = LORAREG_GetAttr_MacRecvDelay1;
    cabc:	4929      	ldr	r1, [pc, #164]	; (cb64 <LORAREG_InitGetAttrFnPtrsNA+0x108>)
    cabe:	3204      	adds	r2, #4
    cac0:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_RECEIVE_DELAY2] = LORAREG_GetAttr_MacRecvDelay2;
    cac2:	4929      	ldr	r1, [pc, #164]	; (cb68 <LORAREG_InitGetAttrFnPtrsNA+0x10c>)
    cac4:	3204      	adds	r2, #4
    cac6:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_JOIN_ACCEPT_DELAY1] = LORAREG_GetAttr_MacJoinAcptDelay1;
    cac8:	4928      	ldr	r1, [pc, #160]	; (cb6c <LORAREG_InitGetAttrFnPtrsNA+0x110>)
    caca:	3204      	adds	r2, #4
    cacc:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_JOIN_ACCEPT_DELAY2] = LORAREG_GetAttr_MacJoinAcptDelay2;
    cace:	4928      	ldr	r1, [pc, #160]	; (cb70 <LORAREG_InitGetAttrFnPtrsNA+0x114>)
    cad0:	3204      	adds	r2, #4
    cad2:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_ACK_TIMEOUT] = LORAREG_GetAttr_MacAckTimeout;
    cad4:	4927      	ldr	r1, [pc, #156]	; (cb74 <LORAREG_InitGetAttrFnPtrsNA+0x118>)
    cad6:	3204      	adds	r2, #4
    cad8:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_ADR_ACK_DELAY] = LORAREG_GetAttr_MacAdrAckDelay;
    cada:	4927      	ldr	r1, [pc, #156]	; (cb78 <LORAREG_InitGetAttrFnPtrsNA+0x11c>)
    cadc:	3204      	adds	r2, #4
    cade:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_ADR_ACK_LIMIT] = LORAREG_GetAttr_MacAdrAckLimit;
    cae0:	4926      	ldr	r1, [pc, #152]	; (cb7c <LORAREG_InitGetAttrFnPtrsNA+0x120>)
    cae2:	3204      	adds	r2, #4
    cae4:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_MAX_FCNT_GAP] = LORAREG_GetAttr_MacMaxFcntGap;
    cae6:	4926      	ldr	r1, [pc, #152]	; (cb80 <LORAREG_InitGetAttrFnPtrsNA+0x124>)
    cae8:	3204      	adds	r2, #4
    caea:	5099      	str	r1, [r3, r2]
    pGetAttr[NEW_TX_CHANNEL_CONFIG] = LORAREG_GetAttr_NewTxChConfigT1;
    caec:	4925      	ldr	r1, [pc, #148]	; (cb84 <LORAREG_InitGetAttrFnPtrsNA+0x128>)
    caee:	3204      	adds	r2, #4
    caf0:	5099      	str	r1, [r3, r2]
    pGetAttr[FREE_CHANNEL] = LORAREG_GetAttr_FreeChannel1;
    caf2:	4925      	ldr	r1, [pc, #148]	; (cb88 <LORAREG_InitGetAttrFnPtrsNA+0x12c>)
    caf4:	3204      	adds	r2, #4
    caf6:	5099      	str	r1, [r3, r2]
    pGetAttr[CURRENT_CHANNEL_INDEX] = LORAREG_GetAttr_CurChIndx;
    caf8:	4924      	ldr	r1, [pc, #144]	; (cb8c <LORAREG_InitGetAttrFnPtrsNA+0x130>)
    cafa:	3204      	adds	r2, #4
    cafc:	5099      	str	r1, [r3, r2]
    pGetAttr[REG_DEF_TX_POWER] = LORAREG_GetAttr_RegDefTxPwr;
    cafe:	4924      	ldr	r1, [pc, #144]	; (cb90 <LORAREG_InitGetAttrFnPtrsNA+0x134>)
    cb00:	3214      	adds	r2, #20
    cb02:	5099      	str	r1, [r3, r2]
    pGetAttr[REG_DEF_TX_DATARATE] = LORAREG_GetAttr_RegDefTxDR;
    cb04:	4923      	ldr	r1, [pc, #140]	; (cb94 <LORAREG_InitGetAttrFnPtrsNA+0x138>)
    cb06:	3204      	adds	r2, #4
    cb08:	5099      	str	r1, [r3, r2]
}
    cb0a:	4770      	bx	lr
    cb0c:	20000c7c 	.word	0x20000c7c
    cb10:	000098f9 	.word	0x000098f9
    cb14:	0000c63d 	.word	0x0000c63d
    cb18:	0000c68d 	.word	0x0000c68d
    cb1c:	0000c6d9 	.word	0x0000c6d9
    cb20:	00009741 	.word	0x00009741
    cb24:	00009751 	.word	0x00009751
    cb28:	0000976d 	.word	0x0000976d
    cb2c:	0000977d 	.word	0x0000977d
    cb30:	0000a7ed 	.word	0x0000a7ed
    cb34:	0000978d 	.word	0x0000978d
    cb38:	0000979d 	.word	0x0000979d
    cb3c:	0000a6c1 	.word	0x0000a6c1
    cb40:	00009aad 	.word	0x00009aad
    cb44:	000097ed 	.word	0x000097ed
    cb48:	0000a615 	.word	0x0000a615
    cb4c:	0000a575 	.word	0x0000a575
    cb50:	00009839 	.word	0x00009839
    cb54:	0000c725 	.word	0x0000c725
    cb58:	0000c771 	.word	0x0000c771
    cb5c:	0000c7bd 	.word	0x0000c7bd
    cb60:	00009843 	.word	0x00009843
    cb64:	0000984d 	.word	0x0000984d
    cb68:	00009857 	.word	0x00009857
    cb6c:	00009861 	.word	0x00009861
    cb70:	0000986d 	.word	0x0000986d
    cb74:	00009879 	.word	0x00009879
    cb78:	00009883 	.word	0x00009883
    cb7c:	0000988b 	.word	0x0000988b
    cb80:	00009893 	.word	0x00009893
    cb84:	0000c8a5 	.word	0x0000c8a5
    cb88:	0000a0d1 	.word	0x0000a0d1
    cb8c:	000098bd 	.word	0x000098bd
    cb90:	0000989d 	.word	0x0000989d
    cb94:	000098ad 	.word	0x000098ad

0000cb98 <LORAREG_InitGetAttrFnPtrsEU>:
    pGetAttr[FREQUENCY] = LORAREG_GetAttr_FreqT2;
    cb98:	4b2d      	ldr	r3, [pc, #180]	; (cc50 <LORAREG_InitGetAttrFnPtrsEU+0xb8>)
    cb9a:	4a2e      	ldr	r2, [pc, #184]	; (cc54 <LORAREG_InitGetAttrFnPtrsEU+0xbc>)
    cb9c:	601a      	str	r2, [r3, #0]
    pGetAttr[RX_WINDOW_SIZE] = LORAREG_GetAttr_RxWindowSizeT2;
    cb9e:	4a2e      	ldr	r2, [pc, #184]	; (cc58 <LORAREG_InitGetAttrFnPtrsEU+0xc0>)
    cba0:	60da      	str	r2, [r3, #12]
    pGetAttr[RX_WINDOW_OFFSET] = LORAREG_GetAttr_RxWindowOffsetT2;
    cba2:	4a2e      	ldr	r2, [pc, #184]	; (cc5c <LORAREG_InitGetAttrFnPtrsEU+0xc4>)
    cba4:	611a      	str	r2, [r3, #16]
    pGetAttr[MAX_PAYLOAD_SIZE] = LORAREG_GetAttr_MaxPayloadT2;
    cba6:	4a2e      	ldr	r2, [pc, #184]	; (cc60 <LORAREG_InitGetAttrFnPtrsEU+0xc8>)
    cba8:	615a      	str	r2, [r3, #20]
    pGetAttr[MAX_CHANNELS] = LORAREG_GetAttr_MaxChannel;
    cbaa:	4a2e      	ldr	r2, [pc, #184]	; (cc64 <LORAREG_InitGetAttrFnPtrsEU+0xcc>)
    cbac:	619a      	str	r2, [r3, #24]
    pGetAttr[MIN_NEW_CH_INDEX] = LORAREG_GetAttr_MinNewChIndex;
    cbae:	4a2e      	ldr	r2, [pc, #184]	; (cc68 <LORAREG_InitGetAttrFnPtrsEU+0xd0>)
    cbb0:	61da      	str	r2, [r3, #28]
    pGetAttr[DEFAULT_RX1_DATA_RATE] = LORAREG_GetAttr_DefRx1DataRate;
    cbb2:	4a2e      	ldr	r2, [pc, #184]	; (cc6c <LORAREG_InitGetAttrFnPtrsEU+0xd4>)
    cbb4:	621a      	str	r2, [r3, #32]
    pGetAttr[DEFAULT_RX2_DATA_RATE] = LORAREG_GetAttr_DefRx2DataRate;
    cbb6:	4a2e      	ldr	r2, [pc, #184]	; (cc70 <LORAREG_InitGetAttrFnPtrsEU+0xd8>)
    cbb8:	625a      	str	r2, [r3, #36]	; 0x24
    pGetAttr[DEFAULT_RX2_FREQUENCY] = LORAREG_GetAttr_DefRx2Freq;
    cbba:	4a2e      	ldr	r2, [pc, #184]	; (cc74 <LORAREG_InitGetAttrFnPtrsEU+0xdc>)
    cbbc:	629a      	str	r2, [r3, #40]	; 0x28
    pGetAttr[SUPPORTED_REGIONAL_FEATURES] = LORAREG_GetAttr_RegFeatures;
    cbbe:	4a2e      	ldr	r2, [pc, #184]	; (cc78 <LORAREG_InitGetAttrFnPtrsEU+0xe0>)
    cbc0:	639a      	str	r2, [r3, #56]	; 0x38
    pGetAttr[DATA_RANGE] = LORAREG_GetAttr_DataRange;
    cbc2:	4a2e      	ldr	r2, [pc, #184]	; (cc7c <LORAREG_InitGetAttrFnPtrsEU+0xe4>)
    cbc4:	649a      	str	r2, [r3, #72]	; 0x48
    pGetAttr[DATA_RANGE_CH_BAND] = LORAREG_GetAttr_DRangeChBandT2;
    cbc6:	4a2e      	ldr	r2, [pc, #184]	; (cc80 <LORAREG_InitGetAttrFnPtrsEU+0xe8>)
    cbc8:	64da      	str	r2, [r3, #76]	; 0x4c
    pGetAttr[MIN_MAX_DR] = LORAREG_GetAttr_MinMaxDr;
    cbca:	4a2e      	ldr	r2, [pc, #184]	; (cc84 <LORAREG_InitGetAttrFnPtrsEU+0xec>)
    cbcc:	651a      	str	r2, [r3, #80]	; 0x50
    pGetAttr[CHANNEL_ID_STATUS] = LORAREG_GetAttr_ChIdStatus;
    cbce:	4a2e      	ldr	r2, [pc, #184]	; (cc88 <LORAREG_InitGetAttrFnPtrsEU+0xf0>)
    cbd0:	659a      	str	r2, [r3, #88]	; 0x58
    pGetAttr[RX1_WINDOW_PARAMS] = LORAREG_GetAttr_Rx1WindowparamsType2;
    cbd2:	4a2e      	ldr	r2, [pc, #184]	; (cc8c <LORAREG_InitGetAttrFnPtrsEU+0xf4>)
    cbd4:	665a      	str	r2, [r3, #100]	; 0x64
	pGetAttr[JOIN_DUTY_CYCLE_TIMER]= LORAREG_GetAttr_JoinDutyCycleRemainingTime;
    cbd6:	492e      	ldr	r1, [pc, #184]	; (cc90 <LORAREG_InitGetAttrFnPtrsEU+0xf8>)
    cbd8:	2280      	movs	r2, #128	; 0x80
    cbda:	5099      	str	r1, [r3, r2]
    pGetAttr[DUTY_CYCLE] = LORAREG_GetAttr_DutyCycleT2;
    cbdc:	4a2d      	ldr	r2, [pc, #180]	; (cc94 <LORAREG_InitGetAttrFnPtrsEU+0xfc>)
    cbde:	679a      	str	r2, [r3, #120]	; 0x78
    pGetAttr[MODULATION_ATTR] = LORAREG_GetAttr_ModulationAttrT2;
    cbe0:	492d      	ldr	r1, [pc, #180]	; (cc98 <LORAREG_InitGetAttrFnPtrsEU+0x100>)
    cbe2:	228c      	movs	r2, #140	; 0x8c
    cbe4:	5099      	str	r1, [r3, r2]
    pGetAttr[BANDWIDTH_ATTR] = LORAREG_GetAttr_BandwidthAttrT2;
    cbe6:	492d      	ldr	r1, [pc, #180]	; (cc9c <LORAREG_InitGetAttrFnPtrsEU+0x104>)
    cbe8:	3204      	adds	r2, #4
    cbea:	5099      	str	r1, [r3, r2]
    pGetAttr[SPREADING_FACTOR_ATTR] = LORAREG_GetAttr_SpreadFactorT2;
    cbec:	492c      	ldr	r1, [pc, #176]	; (cca0 <LORAREG_InitGetAttrFnPtrsEU+0x108>)
    cbee:	3204      	adds	r2, #4
    cbf0:	5099      	str	r1, [r3, r2]
    pGetAttr[MIN_DUTY_CYCLE_TIMER] = LORAREG_GetAttr_DutyCycleTimer;
    cbf2:	492c      	ldr	r1, [pc, #176]	; (cca4 <LORAREG_InitGetAttrFnPtrsEU+0x10c>)
    cbf4:	3204      	adds	r2, #4
    cbf6:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_RECEIVE_DELAY1] = LORAREG_GetAttr_MacRecvDelay1;
    cbf8:	492b      	ldr	r1, [pc, #172]	; (cca8 <LORAREG_InitGetAttrFnPtrsEU+0x110>)
    cbfa:	3204      	adds	r2, #4
    cbfc:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_RECEIVE_DELAY2] = LORAREG_GetAttr_MacRecvDelay2;
    cbfe:	492b      	ldr	r1, [pc, #172]	; (ccac <LORAREG_InitGetAttrFnPtrsEU+0x114>)
    cc00:	3204      	adds	r2, #4
    cc02:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_JOIN_ACCEPT_DELAY1] = LORAREG_GetAttr_MacJoinAcptDelay1;
    cc04:	492a      	ldr	r1, [pc, #168]	; (ccb0 <LORAREG_InitGetAttrFnPtrsEU+0x118>)
    cc06:	3204      	adds	r2, #4
    cc08:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_JOIN_ACCEPT_DELAY2] = LORAREG_GetAttr_MacJoinAcptDelay2;
    cc0a:	492a      	ldr	r1, [pc, #168]	; (ccb4 <LORAREG_InitGetAttrFnPtrsEU+0x11c>)
    cc0c:	3204      	adds	r2, #4
    cc0e:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_ACK_TIMEOUT] = LORAREG_GetAttr_MacAckTimeout;
    cc10:	4929      	ldr	r1, [pc, #164]	; (ccb8 <LORAREG_InitGetAttrFnPtrsEU+0x120>)
    cc12:	3204      	adds	r2, #4
    cc14:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_ADR_ACK_DELAY] = LORAREG_GetAttr_MacAdrAckDelay;
    cc16:	4929      	ldr	r1, [pc, #164]	; (ccbc <LORAREG_InitGetAttrFnPtrsEU+0x124>)
    cc18:	3204      	adds	r2, #4
    cc1a:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_ADR_ACK_LIMIT] = LORAREG_GetAttr_MacAdrAckLimit;
    cc1c:	4928      	ldr	r1, [pc, #160]	; (ccc0 <LORAREG_InitGetAttrFnPtrsEU+0x128>)
    cc1e:	3204      	adds	r2, #4
    cc20:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_MAX_FCNT_GAP] = LORAREG_GetAttr_MacMaxFcntGap;
    cc22:	4928      	ldr	r1, [pc, #160]	; (ccc4 <LORAREG_InitGetAttrFnPtrsEU+0x12c>)
    cc24:	3204      	adds	r2, #4
    cc26:	5099      	str	r1, [r3, r2]
    pGetAttr[NEW_TX_CHANNEL_CONFIG] = LORAREG_GetAttr_NewTxChConfigT2;
    cc28:	4927      	ldr	r1, [pc, #156]	; (ccc8 <LORAREG_InitGetAttrFnPtrsEU+0x130>)
    cc2a:	3204      	adds	r2, #4
    cc2c:	5099      	str	r1, [r3, r2]
    pGetAttr[FREE_CHANNEL] = LORAREG_GetAttr_FreeChannel2;
    cc2e:	4927      	ldr	r1, [pc, #156]	; (cccc <LORAREG_InitGetAttrFnPtrsEU+0x134>)
    cc30:	3204      	adds	r2, #4
    cc32:	5099      	str	r1, [r3, r2]
    pGetAttr[CURRENT_CHANNEL_INDEX] = LORAREG_GetAttr_CurChIndx;
    cc34:	4926      	ldr	r1, [pc, #152]	; (ccd0 <LORAREG_InitGetAttrFnPtrsEU+0x138>)
    cc36:	3204      	adds	r2, #4
    cc38:	5099      	str	r1, [r3, r2]
    pGetAttr[DL_FREQUENCY] = LORAREG_GetAttr_DlFrequency;
    cc3a:	4926      	ldr	r1, [pc, #152]	; (ccd4 <LORAREG_InitGetAttrFnPtrsEU+0x13c>)
    cc3c:	320c      	adds	r2, #12
    cc3e:	5099      	str	r1, [r3, r2]
    pGetAttr[REG_DEF_TX_POWER] = LORAREG_GetAttr_RegDefTxPwr;
    cc40:	4925      	ldr	r1, [pc, #148]	; (ccd8 <LORAREG_InitGetAttrFnPtrsEU+0x140>)
    cc42:	3208      	adds	r2, #8
    cc44:	5099      	str	r1, [r3, r2]
    pGetAttr[REG_DEF_TX_DATARATE] = LORAREG_GetAttr_RegDefTxDR;
    cc46:	4925      	ldr	r1, [pc, #148]	; (ccdc <LORAREG_InitGetAttrFnPtrsEU+0x144>)
    cc48:	3204      	adds	r2, #4
    cc4a:	5099      	str	r1, [r3, r2]
}
    cc4c:	4770      	bx	lr
    cc4e:	46c0      	nop			; (mov r8, r8)
    cc50:	20000c7c 	.word	0x20000c7c
    cc54:	0000ab49 	.word	0x0000ab49
    cc58:	0000c2dd 	.word	0x0000c2dd
    cc5c:	0000c31d 	.word	0x0000c31d
    cc60:	0000c359 	.word	0x0000c359
    cc64:	00009741 	.word	0x00009741
    cc68:	00009751 	.word	0x00009751
    cc6c:	0000976d 	.word	0x0000976d
    cc70:	0000977d 	.word	0x0000977d
    cc74:	0000a7ed 	.word	0x0000a7ed
    cc78:	0000978d 	.word	0x0000978d
    cc7c:	0000979d 	.word	0x0000979d
    cc80:	0000aa4d 	.word	0x0000aa4d
    cc84:	00009aad 	.word	0x00009aad
    cc88:	000097ed 	.word	0x000097ed
    cc8c:	0000a9e1 	.word	0x0000a9e1
    cc90:	0000a575 	.word	0x0000a575
    cc94:	00009a65 	.word	0x00009a65
    cc98:	0000c391 	.word	0x0000c391
    cc9c:	0000c3c9 	.word	0x0000c3c9
    cca0:	0000c401 	.word	0x0000c401
    cca4:	0000a84d 	.word	0x0000a84d
    cca8:	0000984d 	.word	0x0000984d
    ccac:	00009857 	.word	0x00009857
    ccb0:	00009861 	.word	0x00009861
    ccb4:	0000986d 	.word	0x0000986d
    ccb8:	00009879 	.word	0x00009879
    ccbc:	00009883 	.word	0x00009883
    ccc0:	0000988b 	.word	0x0000988b
    ccc4:	00009893 	.word	0x00009893
    ccc8:	0000c471 	.word	0x0000c471
    cccc:	0000b3dd 	.word	0x0000b3dd
    ccd0:	000098bd 	.word	0x000098bd
    ccd4:	0000a805 	.word	0x0000a805
    ccd8:	0000989d 	.word	0x0000989d
    ccdc:	000098ad 	.word	0x000098ad

0000cce0 <LORAREG_InitGetAttrFnPtrsAS>:
    pGetAttr[FREQUENCY] = LORAREG_GetAttr_FreqT3;
    cce0:	4b2d      	ldr	r3, [pc, #180]	; (cd98 <LORAREG_InitGetAttrFnPtrsAS+0xb8>)
    cce2:	4a2e      	ldr	r2, [pc, #184]	; (cd9c <LORAREG_InitGetAttrFnPtrsAS+0xbc>)
    cce4:	601a      	str	r2, [r3, #0]
    pGetAttr[RX_WINDOW_SIZE] = LORAREG_GetAttr_RxWindowSizeT2;
    cce6:	4a2e      	ldr	r2, [pc, #184]	; (cda0 <LORAREG_InitGetAttrFnPtrsAS+0xc0>)
    cce8:	60da      	str	r2, [r3, #12]
    pGetAttr[RX_WINDOW_OFFSET] = LORAREG_GetAttr_RxWindowOffsetT2;
    ccea:	4a2e      	ldr	r2, [pc, #184]	; (cda4 <LORAREG_InitGetAttrFnPtrsAS+0xc4>)
    ccec:	611a      	str	r2, [r3, #16]
    pGetAttr[MAX_PAYLOAD_SIZE] = LORAREG_GetAttr_MaxPayloadT3;
    ccee:	4a2e      	ldr	r2, [pc, #184]	; (cda8 <LORAREG_InitGetAttrFnPtrsAS+0xc8>)
    ccf0:	615a      	str	r2, [r3, #20]
    pGetAttr[MAX_CHANNELS] = LORAREG_GetAttr_MaxChannel;
    ccf2:	4a2e      	ldr	r2, [pc, #184]	; (cdac <LORAREG_InitGetAttrFnPtrsAS+0xcc>)
    ccf4:	619a      	str	r2, [r3, #24]
    pGetAttr[MIN_NEW_CH_INDEX] = LORAREG_GetAttr_MinNewChIndex;
    ccf6:	4a2e      	ldr	r2, [pc, #184]	; (cdb0 <LORAREG_InitGetAttrFnPtrsAS+0xd0>)
    ccf8:	61da      	str	r2, [r3, #28]
    pGetAttr[DEFAULT_RX1_DATA_RATE] = LORAREG_GetAttr_DefRx1DataRate;
    ccfa:	4a2e      	ldr	r2, [pc, #184]	; (cdb4 <LORAREG_InitGetAttrFnPtrsAS+0xd4>)
    ccfc:	621a      	str	r2, [r3, #32]
    pGetAttr[DEFAULT_RX2_DATA_RATE] = LORAREG_GetAttr_DefRx2DataRate;
    ccfe:	4a2e      	ldr	r2, [pc, #184]	; (cdb8 <LORAREG_InitGetAttrFnPtrsAS+0xd8>)
    cd00:	625a      	str	r2, [r3, #36]	; 0x24
    pGetAttr[DEFAULT_RX2_FREQUENCY] = LORAREG_GetAttr_DefRx2Freq;
    cd02:	4a2e      	ldr	r2, [pc, #184]	; (cdbc <LORAREG_InitGetAttrFnPtrsAS+0xdc>)
    cd04:	629a      	str	r2, [r3, #40]	; 0x28
    pGetAttr[SUPPORTED_REGIONAL_FEATURES] = LORAREG_GetAttr_RegFeatures;
    cd06:	4a2e      	ldr	r2, [pc, #184]	; (cdc0 <LORAREG_InitGetAttrFnPtrsAS+0xe0>)
    cd08:	639a      	str	r2, [r3, #56]	; 0x38
    pGetAttr[DATA_RANGE] = LORAREG_GetAttr_DataRange;
    cd0a:	4a2e      	ldr	r2, [pc, #184]	; (cdc4 <LORAREG_InitGetAttrFnPtrsAS+0xe4>)
    cd0c:	649a      	str	r2, [r3, #72]	; 0x48
    pGetAttr[DATA_RANGE_CH_BAND] = LORAREG_GetAttr_DRangeChBandT2;
    cd0e:	4a2e      	ldr	r2, [pc, #184]	; (cdc8 <LORAREG_InitGetAttrFnPtrsAS+0xe8>)
    cd10:	64da      	str	r2, [r3, #76]	; 0x4c
    pGetAttr[MIN_MAX_DR] = LORAREG_GetAttr_MinMaxDr;
    cd12:	4a2e      	ldr	r2, [pc, #184]	; (cdcc <LORAREG_InitGetAttrFnPtrsAS+0xec>)
    cd14:	651a      	str	r2, [r3, #80]	; 0x50
    pGetAttr[CHANNEL_ID_STATUS] = LORAREG_GetAttr_ChIdStatus;
    cd16:	4a2e      	ldr	r2, [pc, #184]	; (cdd0 <LORAREG_InitGetAttrFnPtrsAS+0xf0>)
    cd18:	659a      	str	r2, [r3, #88]	; 0x58
    pGetAttr[RX1_WINDOW_PARAMS] = LORAREG_GetAttr_Rx1WindowparamsType4;
    cd1a:	4a2e      	ldr	r2, [pc, #184]	; (cdd4 <LORAREG_InitGetAttrFnPtrsAS+0xf4>)
    cd1c:	665a      	str	r2, [r3, #100]	; 0x64
	pGetAttr[JOIN_DUTY_CYCLE_TIMER]= LORAREG_GetAttr_JoinDutyCycleRemainingTime;
    cd1e:	492e      	ldr	r1, [pc, #184]	; (cdd8 <LORAREG_InitGetAttrFnPtrsAS+0xf8>)
    cd20:	2280      	movs	r2, #128	; 0x80
    cd22:	5099      	str	r1, [r3, r2]
    pGetAttr[MODULATION_ATTR] = LORAREG_GetAttr_ModulationAttrT2;
    cd24:	492d      	ldr	r1, [pc, #180]	; (cddc <LORAREG_InitGetAttrFnPtrsAS+0xfc>)
    cd26:	320c      	adds	r2, #12
    cd28:	5099      	str	r1, [r3, r2]
    pGetAttr[BANDWIDTH_ATTR] = LORAREG_GetAttr_BandwidthAttrT2;
    cd2a:	492d      	ldr	r1, [pc, #180]	; (cde0 <LORAREG_InitGetAttrFnPtrsAS+0x100>)
    cd2c:	3204      	adds	r2, #4
    cd2e:	5099      	str	r1, [r3, r2]
    pGetAttr[SPREADING_FACTOR_ATTR] = LORAREG_GetAttr_SpreadFactorT2;
    cd30:	492c      	ldr	r1, [pc, #176]	; (cde4 <LORAREG_InitGetAttrFnPtrsAS+0x104>)
    cd32:	3204      	adds	r2, #4
    cd34:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_RECEIVE_DELAY1] = LORAREG_GetAttr_MacRecvDelay1;
    cd36:	492c      	ldr	r1, [pc, #176]	; (cde8 <LORAREG_InitGetAttrFnPtrsAS+0x108>)
    cd38:	3208      	adds	r2, #8
    cd3a:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_RECEIVE_DELAY2] = LORAREG_GetAttr_MacRecvDelay2;
    cd3c:	492b      	ldr	r1, [pc, #172]	; (cdec <LORAREG_InitGetAttrFnPtrsAS+0x10c>)
    cd3e:	3204      	adds	r2, #4
    cd40:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_JOIN_ACCEPT_DELAY1] = LORAREG_GetAttr_MacJoinAcptDelay1;
    cd42:	492b      	ldr	r1, [pc, #172]	; (cdf0 <LORAREG_InitGetAttrFnPtrsAS+0x110>)
    cd44:	3204      	adds	r2, #4
    cd46:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_JOIN_ACCEPT_DELAY2] = LORAREG_GetAttr_MacJoinAcptDelay2;
    cd48:	492a      	ldr	r1, [pc, #168]	; (cdf4 <LORAREG_InitGetAttrFnPtrsAS+0x114>)
    cd4a:	3204      	adds	r2, #4
    cd4c:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_ACK_TIMEOUT] = LORAREG_GetAttr_MacAckTimeout;
    cd4e:	492a      	ldr	r1, [pc, #168]	; (cdf8 <LORAREG_InitGetAttrFnPtrsAS+0x118>)
    cd50:	3204      	adds	r2, #4
    cd52:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_ADR_ACK_DELAY] = LORAREG_GetAttr_MacAdrAckDelay;
    cd54:	4929      	ldr	r1, [pc, #164]	; (cdfc <LORAREG_InitGetAttrFnPtrsAS+0x11c>)
    cd56:	3204      	adds	r2, #4
    cd58:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_ADR_ACK_LIMIT] = LORAREG_GetAttr_MacAdrAckLimit;
    cd5a:	4929      	ldr	r1, [pc, #164]	; (ce00 <LORAREG_InitGetAttrFnPtrsAS+0x120>)
    cd5c:	3204      	adds	r2, #4
    cd5e:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_MAX_FCNT_GAP] = LORAREG_GetAttr_MacMaxFcntGap;
    cd60:	4928      	ldr	r1, [pc, #160]	; (ce04 <LORAREG_InitGetAttrFnPtrsAS+0x124>)
    cd62:	3204      	adds	r2, #4
    cd64:	5099      	str	r1, [r3, r2]
    pGetAttr[NEW_TX_CHANNEL_CONFIG] = LORAREG_GetAttr_NewTxChConfigT2;
    cd66:	4928      	ldr	r1, [pc, #160]	; (ce08 <LORAREG_InitGetAttrFnPtrsAS+0x128>)
    cd68:	3204      	adds	r2, #4
    cd6a:	5099      	str	r1, [r3, r2]
    pGetAttr[FREE_CHANNEL] = LORAREG_GetAttr_FreeChannel2;
    cd6c:	4927      	ldr	r1, [pc, #156]	; (ce0c <LORAREG_InitGetAttrFnPtrsAS+0x12c>)
    cd6e:	3204      	adds	r2, #4
    cd70:	5099      	str	r1, [r3, r2]
    pGetAttr[CURRENT_CHANNEL_INDEX] = LORAREG_GetAttr_CurChIndx;
    cd72:	4927      	ldr	r1, [pc, #156]	; (ce10 <LORAREG_InitGetAttrFnPtrsAS+0x130>)
    cd74:	3204      	adds	r2, #4
    cd76:	5099      	str	r1, [r3, r2]
    pGetAttr[DL_FREQUENCY] = LORAREG_GetAttr_DlFrequency;
    cd78:	4926      	ldr	r1, [pc, #152]	; (ce14 <LORAREG_InitGetAttrFnPtrsAS+0x134>)
    cd7a:	320c      	adds	r2, #12
    cd7c:	5099      	str	r1, [r3, r2]
    pGetAttr[REG_DEF_TX_POWER] = LORAREG_GetAttr_RegDefTxPwr;
    cd7e:	4926      	ldr	r1, [pc, #152]	; (ce18 <LORAREG_InitGetAttrFnPtrsAS+0x138>)
    cd80:	3208      	adds	r2, #8
    cd82:	5099      	str	r1, [r3, r2]
    pGetAttr[REG_DEF_TX_DATARATE] = LORAREG_GetAttr_RegDefTxDR;
    cd84:	4925      	ldr	r1, [pc, #148]	; (ce1c <LORAREG_InitGetAttrFnPtrsAS+0x13c>)
    cd86:	3204      	adds	r2, #4
    cd88:	5099      	str	r1, [r3, r2]
    pGetAttr[DUTY_CYCLE] = LORAREG_GetAttr_DutyCycleT2;
    cd8a:	4a25      	ldr	r2, [pc, #148]	; (ce20 <LORAREG_InitGetAttrFnPtrsAS+0x140>)
    cd8c:	679a      	str	r2, [r3, #120]	; 0x78
    pGetAttr[MIN_DUTY_CYCLE_TIMER] = LORAREG_GetAttr_DutyCycleTimer;
    cd8e:	4925      	ldr	r1, [pc, #148]	; (ce24 <LORAREG_InitGetAttrFnPtrsAS+0x144>)
    cd90:	2298      	movs	r2, #152	; 0x98
    cd92:	5099      	str	r1, [r3, r2]
}
    cd94:	4770      	bx	lr
    cd96:	46c0      	nop			; (mov r8, r8)
    cd98:	20000c7c 	.word	0x20000c7c
    cd9c:	0000ac85 	.word	0x0000ac85
    cda0:	0000c2dd 	.word	0x0000c2dd
    cda4:	0000c31d 	.word	0x0000c31d
    cda8:	0000c279 	.word	0x0000c279
    cdac:	00009741 	.word	0x00009741
    cdb0:	00009751 	.word	0x00009751
    cdb4:	0000976d 	.word	0x0000976d
    cdb8:	0000977d 	.word	0x0000977d
    cdbc:	0000a7ed 	.word	0x0000a7ed
    cdc0:	0000978d 	.word	0x0000978d
    cdc4:	0000979d 	.word	0x0000979d
    cdc8:	0000aa4d 	.word	0x0000aa4d
    cdcc:	00009aad 	.word	0x00009aad
    cdd0:	000097ed 	.word	0x000097ed
    cdd4:	0000ab91 	.word	0x0000ab91
    cdd8:	0000a575 	.word	0x0000a575
    cddc:	0000c391 	.word	0x0000c391
    cde0:	0000c3c9 	.word	0x0000c3c9
    cde4:	0000c401 	.word	0x0000c401
    cde8:	0000984d 	.word	0x0000984d
    cdec:	00009857 	.word	0x00009857
    cdf0:	00009861 	.word	0x00009861
    cdf4:	0000986d 	.word	0x0000986d
    cdf8:	00009879 	.word	0x00009879
    cdfc:	00009883 	.word	0x00009883
    ce00:	0000988b 	.word	0x0000988b
    ce04:	00009893 	.word	0x00009893
    ce08:	0000c471 	.word	0x0000c471
    ce0c:	0000b3dd 	.word	0x0000b3dd
    ce10:	000098bd 	.word	0x000098bd
    ce14:	0000a805 	.word	0x0000a805
    ce18:	0000989d 	.word	0x0000989d
    ce1c:	000098ad 	.word	0x000098ad
    ce20:	00009a65 	.word	0x00009a65
    ce24:	0000a84d 	.word	0x0000a84d

0000ce28 <LORAREG_InitGetAttrFnPtrsAU>:
    pGetAttr[FREQUENCY] = LORAREG_GetAttr_FreqT1;
    ce28:	4b2b      	ldr	r3, [pc, #172]	; (ced8 <LORAREG_InitGetAttrFnPtrsAU+0xb0>)
    ce2a:	4a2c      	ldr	r2, [pc, #176]	; (cedc <LORAREG_InitGetAttrFnPtrsAU+0xb4>)
    ce2c:	601a      	str	r2, [r3, #0]
    pGetAttr[RX_WINDOW_SIZE] = LORAREG_GetAttr_RxWindowSizeT1;
    ce2e:	4a2c      	ldr	r2, [pc, #176]	; (cee0 <LORAREG_InitGetAttrFnPtrsAU+0xb8>)
    ce30:	60da      	str	r2, [r3, #12]
    pGetAttr[RX_WINDOW_OFFSET] = LORAREG_GetAttr_RxWindowOffsetT1;
    ce32:	4a2c      	ldr	r2, [pc, #176]	; (cee4 <LORAREG_InitGetAttrFnPtrsAU+0xbc>)
    ce34:	611a      	str	r2, [r3, #16]
    pGetAttr[MAX_PAYLOAD_SIZE] = LORAREG_GetAttr_MaxPayloadT1;
    ce36:	4a2c      	ldr	r2, [pc, #176]	; (cee8 <LORAREG_InitGetAttrFnPtrsAU+0xc0>)
    ce38:	615a      	str	r2, [r3, #20]
    pGetAttr[MAX_CHANNELS] = LORAREG_GetAttr_MaxChannel;
    ce3a:	4a2c      	ldr	r2, [pc, #176]	; (ceec <LORAREG_InitGetAttrFnPtrsAU+0xc4>)
    ce3c:	619a      	str	r2, [r3, #24]
    pGetAttr[MIN_NEW_CH_INDEX] = LORAREG_GetAttr_MinNewChIndex;
    ce3e:	4a2c      	ldr	r2, [pc, #176]	; (cef0 <LORAREG_InitGetAttrFnPtrsAU+0xc8>)
    ce40:	61da      	str	r2, [r3, #28]
    pGetAttr[DEFAULT_RX1_DATA_RATE] = LORAREG_GetAttr_DefRx1DataRate;
    ce42:	4a2c      	ldr	r2, [pc, #176]	; (cef4 <LORAREG_InitGetAttrFnPtrsAU+0xcc>)
    ce44:	621a      	str	r2, [r3, #32]
    pGetAttr[DEFAULT_RX2_DATA_RATE] = LORAREG_GetAttr_DefRx2DataRate;
    ce46:	4a2c      	ldr	r2, [pc, #176]	; (cef8 <LORAREG_InitGetAttrFnPtrsAU+0xd0>)
    ce48:	625a      	str	r2, [r3, #36]	; 0x24
    pGetAttr[DEFAULT_RX2_FREQUENCY] = LORAREG_GetAttr_DefRx2Freq;
    ce4a:	4a2c      	ldr	r2, [pc, #176]	; (cefc <LORAREG_InitGetAttrFnPtrsAU+0xd4>)
    ce4c:	629a      	str	r2, [r3, #40]	; 0x28
    pGetAttr[SUPPORTED_REGIONAL_FEATURES] = LORAREG_GetAttr_RegFeatures;
    ce4e:	4a2c      	ldr	r2, [pc, #176]	; (cf00 <LORAREG_InitGetAttrFnPtrsAU+0xd8>)
    ce50:	639a      	str	r2, [r3, #56]	; 0x38
    pGetAttr[DATA_RANGE] = LORAREG_GetAttr_DataRange;
    ce52:	4a2c      	ldr	r2, [pc, #176]	; (cf04 <LORAREG_InitGetAttrFnPtrsAU+0xdc>)
    ce54:	649a      	str	r2, [r3, #72]	; 0x48
    pGetAttr[DATA_RANGE_CH_BAND] = LORAREG_GetAttr_DRangeChBandT1;
    ce56:	4a2c      	ldr	r2, [pc, #176]	; (cf08 <LORAREG_InitGetAttrFnPtrsAU+0xe0>)
    ce58:	64da      	str	r2, [r3, #76]	; 0x4c
    pGetAttr[MIN_MAX_DR] = LORAREG_GetAttr_MinMaxDr;
    ce5a:	4a2c      	ldr	r2, [pc, #176]	; (cf0c <LORAREG_InitGetAttrFnPtrsAU+0xe4>)
    ce5c:	651a      	str	r2, [r3, #80]	; 0x50
    pGetAttr[CHANNEL_ID_STATUS] = LORAREG_GetAttr_ChIdStatus;
    ce5e:	4a2c      	ldr	r2, [pc, #176]	; (cf10 <LORAREG_InitGetAttrFnPtrsAU+0xe8>)
    ce60:	659a      	str	r2, [r3, #88]	; 0x58
    pGetAttr[RX1_WINDOW_PARAMS] = LORAREG_GetAttr_Rx1WindowparamsType1;
    ce62:	4a2c      	ldr	r2, [pc, #176]	; (cf14 <LORAREG_InitGetAttrFnPtrsAU+0xec>)
    ce64:	665a      	str	r2, [r3, #100]	; 0x64
	pGetAttr[JOIN_DUTY_CYCLE_TIMER]= LORAREG_GetAttr_JoinDutyCycleRemainingTime;
    ce66:	492c      	ldr	r1, [pc, #176]	; (cf18 <LORAREG_InitGetAttrFnPtrsAU+0xf0>)
    ce68:	2280      	movs	r2, #128	; 0x80
    ce6a:	5099      	str	r1, [r3, r2]
    pGetAttr[DUTY_CYCLE] = LORAREG_GetAttr_DutyCycleT1;
    ce6c:	4a2b      	ldr	r2, [pc, #172]	; (cf1c <LORAREG_InitGetAttrFnPtrsAU+0xf4>)
    ce6e:	679a      	str	r2, [r3, #120]	; 0x78
    pGetAttr[DUTY_CYCLE_TIMER] = LORAREG_GetAttr_MinDutyCycleTimer;	
    ce70:	4a2b      	ldr	r2, [pc, #172]	; (cf20 <LORAREG_InitGetAttrFnPtrsAU+0xf8>)
    ce72:	67da      	str	r2, [r3, #124]	; 0x7c
    pGetAttr[MODULATION_ATTR] = LORAREG_GetAttr_ModulationAttrT1;
    ce74:	492b      	ldr	r1, [pc, #172]	; (cf24 <LORAREG_InitGetAttrFnPtrsAU+0xfc>)
    ce76:	228c      	movs	r2, #140	; 0x8c
    ce78:	5099      	str	r1, [r3, r2]
    pGetAttr[BANDWIDTH_ATTR] = LORAREG_GetAttr_BandwidthAttrT1;
    ce7a:	492b      	ldr	r1, [pc, #172]	; (cf28 <LORAREG_InitGetAttrFnPtrsAU+0x100>)
    ce7c:	3204      	adds	r2, #4
    ce7e:	5099      	str	r1, [r3, r2]
    pGetAttr[SPREADING_FACTOR_ATTR] = LORAREG_GetAttr_SpreadFactorT1;
    ce80:	492a      	ldr	r1, [pc, #168]	; (cf2c <LORAREG_InitGetAttrFnPtrsAU+0x104>)
    ce82:	3204      	adds	r2, #4
    ce84:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_RECEIVE_DELAY1] = LORAREG_GetAttr_MacRecvDelay1;
    ce86:	492a      	ldr	r1, [pc, #168]	; (cf30 <LORAREG_InitGetAttrFnPtrsAU+0x108>)
    ce88:	3208      	adds	r2, #8
    ce8a:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_RECEIVE_DELAY2] = LORAREG_GetAttr_MacRecvDelay2;
    ce8c:	4929      	ldr	r1, [pc, #164]	; (cf34 <LORAREG_InitGetAttrFnPtrsAU+0x10c>)
    ce8e:	3204      	adds	r2, #4
    ce90:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_JOIN_ACCEPT_DELAY1] = LORAREG_GetAttr_MacJoinAcptDelay1;
    ce92:	4929      	ldr	r1, [pc, #164]	; (cf38 <LORAREG_InitGetAttrFnPtrsAU+0x110>)
    ce94:	3204      	adds	r2, #4
    ce96:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_JOIN_ACCEPT_DELAY2] = LORAREG_GetAttr_MacJoinAcptDelay2;
    ce98:	4928      	ldr	r1, [pc, #160]	; (cf3c <LORAREG_InitGetAttrFnPtrsAU+0x114>)
    ce9a:	3204      	adds	r2, #4
    ce9c:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_ACK_TIMEOUT] = LORAREG_GetAttr_MacAckTimeout;
    ce9e:	4928      	ldr	r1, [pc, #160]	; (cf40 <LORAREG_InitGetAttrFnPtrsAU+0x118>)
    cea0:	3204      	adds	r2, #4
    cea2:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_ADR_ACK_DELAY] = LORAREG_GetAttr_MacAdrAckDelay;
    cea4:	4927      	ldr	r1, [pc, #156]	; (cf44 <LORAREG_InitGetAttrFnPtrsAU+0x11c>)
    cea6:	3204      	adds	r2, #4
    cea8:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_ADR_ACK_LIMIT] = LORAREG_GetAttr_MacAdrAckLimit;
    ceaa:	4927      	ldr	r1, [pc, #156]	; (cf48 <LORAREG_InitGetAttrFnPtrsAU+0x120>)
    ceac:	3204      	adds	r2, #4
    ceae:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_MAX_FCNT_GAP] = LORAREG_GetAttr_MacMaxFcntGap;
    ceb0:	4926      	ldr	r1, [pc, #152]	; (cf4c <LORAREG_InitGetAttrFnPtrsAU+0x124>)
    ceb2:	3204      	adds	r2, #4
    ceb4:	5099      	str	r1, [r3, r2]
    pGetAttr[NEW_TX_CHANNEL_CONFIG] = LORAREG_GetAttr_NewTxChConfigT1;
    ceb6:	4926      	ldr	r1, [pc, #152]	; (cf50 <LORAREG_InitGetAttrFnPtrsAU+0x128>)
    ceb8:	3204      	adds	r2, #4
    ceba:	5099      	str	r1, [r3, r2]
    pGetAttr[FREE_CHANNEL] = LORAREG_GetAttr_FreeChannel1;
    cebc:	4925      	ldr	r1, [pc, #148]	; (cf54 <LORAREG_InitGetAttrFnPtrsAU+0x12c>)
    cebe:	3204      	adds	r2, #4
    cec0:	5099      	str	r1, [r3, r2]
    pGetAttr[CURRENT_CHANNEL_INDEX] = LORAREG_GetAttr_CurChIndx;
    cec2:	4925      	ldr	r1, [pc, #148]	; (cf58 <LORAREG_InitGetAttrFnPtrsAU+0x130>)
    cec4:	3204      	adds	r2, #4
    cec6:	5099      	str	r1, [r3, r2]
    pGetAttr[REG_DEF_TX_POWER] = LORAREG_GetAttr_RegDefTxPwr;
    cec8:	4924      	ldr	r1, [pc, #144]	; (cf5c <LORAREG_InitGetAttrFnPtrsAU+0x134>)
    ceca:	3214      	adds	r2, #20
    cecc:	5099      	str	r1, [r3, r2]
    pGetAttr[REG_DEF_TX_DATARATE] = LORAREG_GetAttr_RegDefTxDR;
    cece:	4924      	ldr	r1, [pc, #144]	; (cf60 <LORAREG_InitGetAttrFnPtrsAU+0x138>)
    ced0:	3204      	adds	r2, #4
    ced2:	5099      	str	r1, [r3, r2]
}
    ced4:	4770      	bx	lr
    ced6:	46c0      	nop			; (mov r8, r8)
    ced8:	20000c7c 	.word	0x20000c7c
    cedc:	000098f9 	.word	0x000098f9
    cee0:	0000c63d 	.word	0x0000c63d
    cee4:	0000c68d 	.word	0x0000c68d
    cee8:	0000c6d9 	.word	0x0000c6d9
    ceec:	00009741 	.word	0x00009741
    cef0:	00009751 	.word	0x00009751
    cef4:	0000976d 	.word	0x0000976d
    cef8:	0000977d 	.word	0x0000977d
    cefc:	0000a7ed 	.word	0x0000a7ed
    cf00:	0000978d 	.word	0x0000978d
    cf04:	0000979d 	.word	0x0000979d
    cf08:	0000a6c1 	.word	0x0000a6c1
    cf0c:	00009aad 	.word	0x00009aad
    cf10:	000097ed 	.word	0x000097ed
    cf14:	0000a615 	.word	0x0000a615
    cf18:	0000a575 	.word	0x0000a575
    cf1c:	00009839 	.word	0x00009839
    cf20:	00009843 	.word	0x00009843
    cf24:	0000c725 	.word	0x0000c725
    cf28:	0000c771 	.word	0x0000c771
    cf2c:	0000c7bd 	.word	0x0000c7bd
    cf30:	0000984d 	.word	0x0000984d
    cf34:	00009857 	.word	0x00009857
    cf38:	00009861 	.word	0x00009861
    cf3c:	0000986d 	.word	0x0000986d
    cf40:	00009879 	.word	0x00009879
    cf44:	00009883 	.word	0x00009883
    cf48:	0000988b 	.word	0x0000988b
    cf4c:	00009893 	.word	0x00009893
    cf50:	0000c8a5 	.word	0x0000c8a5
    cf54:	0000a0d1 	.word	0x0000a0d1
    cf58:	000098bd 	.word	0x000098bd
    cf5c:	0000989d 	.word	0x0000989d
    cf60:	000098ad 	.word	0x000098ad

0000cf64 <LORAREG_InitGetAttrFnPtrsIN>:
    pGetAttr[FREQUENCY] = LORAREG_GetAttr_FreqT2;
    cf64:	4b2a      	ldr	r3, [pc, #168]	; (d010 <LORAREG_InitGetAttrFnPtrsIN+0xac>)
    cf66:	4a2b      	ldr	r2, [pc, #172]	; (d014 <LORAREG_InitGetAttrFnPtrsIN+0xb0>)
    cf68:	601a      	str	r2, [r3, #0]
    pGetAttr[RX_WINDOW_SIZE] = LORAREG_GetAttr_RxWindowSizeT2;
    cf6a:	4a2b      	ldr	r2, [pc, #172]	; (d018 <LORAREG_InitGetAttrFnPtrsIN+0xb4>)
    cf6c:	60da      	str	r2, [r3, #12]
    pGetAttr[RX_WINDOW_OFFSET] = LORAREG_GetAttr_RxWindowOffsetT2;
    cf6e:	4a2b      	ldr	r2, [pc, #172]	; (d01c <LORAREG_InitGetAttrFnPtrsIN+0xb8>)
    cf70:	611a      	str	r2, [r3, #16]
    pGetAttr[MAX_PAYLOAD_SIZE] = LORAREG_GetAttr_MaxPayloadT2;
    cf72:	4a2b      	ldr	r2, [pc, #172]	; (d020 <LORAREG_InitGetAttrFnPtrsIN+0xbc>)
    cf74:	615a      	str	r2, [r3, #20]
    pGetAttr[MAX_CHANNELS] = LORAREG_GetAttr_MaxChannel;
    cf76:	4a2b      	ldr	r2, [pc, #172]	; (d024 <LORAREG_InitGetAttrFnPtrsIN+0xc0>)
    cf78:	619a      	str	r2, [r3, #24]
    pGetAttr[MIN_NEW_CH_INDEX] = LORAREG_GetAttr_MinNewChIndex;
    cf7a:	4a2b      	ldr	r2, [pc, #172]	; (d028 <LORAREG_InitGetAttrFnPtrsIN+0xc4>)
    cf7c:	61da      	str	r2, [r3, #28]
    pGetAttr[DEFAULT_RX1_DATA_RATE] = LORAREG_GetAttr_DefRx1DataRate;
    cf7e:	4a2b      	ldr	r2, [pc, #172]	; (d02c <LORAREG_InitGetAttrFnPtrsIN+0xc8>)
    cf80:	621a      	str	r2, [r3, #32]
    pGetAttr[DEFAULT_RX2_DATA_RATE] = LORAREG_GetAttr_DefRx2DataRate;
    cf82:	4a2b      	ldr	r2, [pc, #172]	; (d030 <LORAREG_InitGetAttrFnPtrsIN+0xcc>)
    cf84:	625a      	str	r2, [r3, #36]	; 0x24
    pGetAttr[DEFAULT_RX2_FREQUENCY] = LORAREG_GetAttr_DefRx2Freq;
    cf86:	4a2b      	ldr	r2, [pc, #172]	; (d034 <LORAREG_InitGetAttrFnPtrsIN+0xd0>)
    cf88:	629a      	str	r2, [r3, #40]	; 0x28
    pGetAttr[SUPPORTED_REGIONAL_FEATURES] = LORAREG_GetAttr_RegFeatures;
    cf8a:	4a2b      	ldr	r2, [pc, #172]	; (d038 <LORAREG_InitGetAttrFnPtrsIN+0xd4>)
    cf8c:	639a      	str	r2, [r3, #56]	; 0x38
    pGetAttr[DATA_RANGE] = LORAREG_GetAttr_DataRange;
    cf8e:	4a2b      	ldr	r2, [pc, #172]	; (d03c <LORAREG_InitGetAttrFnPtrsIN+0xd8>)
    cf90:	649a      	str	r2, [r3, #72]	; 0x48
    pGetAttr[DATA_RANGE_CH_BAND] = LORAREG_GetAttr_DRangeChBandT2;
    cf92:	4a2b      	ldr	r2, [pc, #172]	; (d040 <LORAREG_InitGetAttrFnPtrsIN+0xdc>)
    cf94:	64da      	str	r2, [r3, #76]	; 0x4c
    pGetAttr[MIN_MAX_DR] = LORAREG_GetAttr_MinMaxDr;
    cf96:	4a2b      	ldr	r2, [pc, #172]	; (d044 <LORAREG_InitGetAttrFnPtrsIN+0xe0>)
    cf98:	651a      	str	r2, [r3, #80]	; 0x50
    pGetAttr[CHANNEL_ID_STATUS] = LORAREG_GetAttr_ChIdStatus;
    cf9a:	4a2b      	ldr	r2, [pc, #172]	; (d048 <LORAREG_InitGetAttrFnPtrsIN+0xe4>)
    cf9c:	659a      	str	r2, [r3, #88]	; 0x58
    pGetAttr[RX1_WINDOW_PARAMS] = LORAREG_GetAttr_Rx1WindowparamsType3;
    cf9e:	4a2b      	ldr	r2, [pc, #172]	; (d04c <LORAREG_InitGetAttrFnPtrsIN+0xe8>)
    cfa0:	665a      	str	r2, [r3, #100]	; 0x64
	pGetAttr[JOIN_DUTY_CYCLE_TIMER]= LORAREG_GetAttr_JoinDutyCycleRemainingTime;
    cfa2:	492b      	ldr	r1, [pc, #172]	; (d050 <LORAREG_InitGetAttrFnPtrsIN+0xec>)
    cfa4:	2280      	movs	r2, #128	; 0x80
    cfa6:	5099      	str	r1, [r3, r2]
    pGetAttr[MODULATION_ATTR] = LORAREG_GetAttr_ModulationAttrT2;
    cfa8:	492a      	ldr	r1, [pc, #168]	; (d054 <LORAREG_InitGetAttrFnPtrsIN+0xf0>)
    cfaa:	320c      	adds	r2, #12
    cfac:	5099      	str	r1, [r3, r2]
    pGetAttr[BANDWIDTH_ATTR] = LORAREG_GetAttr_BandwidthAttrT2;
    cfae:	492a      	ldr	r1, [pc, #168]	; (d058 <LORAREG_InitGetAttrFnPtrsIN+0xf4>)
    cfb0:	3204      	adds	r2, #4
    cfb2:	5099      	str	r1, [r3, r2]
    pGetAttr[SPREADING_FACTOR_ATTR] = LORAREG_GetAttr_SpreadFactorT2;
    cfb4:	4929      	ldr	r1, [pc, #164]	; (d05c <LORAREG_InitGetAttrFnPtrsIN+0xf8>)
    cfb6:	3204      	adds	r2, #4
    cfb8:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_RECEIVE_DELAY1] = LORAREG_GetAttr_MacRecvDelay1;
    cfba:	4929      	ldr	r1, [pc, #164]	; (d060 <LORAREG_InitGetAttrFnPtrsIN+0xfc>)
    cfbc:	3208      	adds	r2, #8
    cfbe:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_RECEIVE_DELAY2] = LORAREG_GetAttr_MacRecvDelay2;
    cfc0:	4928      	ldr	r1, [pc, #160]	; (d064 <LORAREG_InitGetAttrFnPtrsIN+0x100>)
    cfc2:	3204      	adds	r2, #4
    cfc4:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_JOIN_ACCEPT_DELAY1] = LORAREG_GetAttr_MacJoinAcptDelay1;
    cfc6:	4928      	ldr	r1, [pc, #160]	; (d068 <LORAREG_InitGetAttrFnPtrsIN+0x104>)
    cfc8:	3204      	adds	r2, #4
    cfca:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_JOIN_ACCEPT_DELAY2] = LORAREG_GetAttr_MacJoinAcptDelay2;
    cfcc:	4927      	ldr	r1, [pc, #156]	; (d06c <LORAREG_InitGetAttrFnPtrsIN+0x108>)
    cfce:	3204      	adds	r2, #4
    cfd0:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_ACK_TIMEOUT] = LORAREG_GetAttr_MacAckTimeout;
    cfd2:	4927      	ldr	r1, [pc, #156]	; (d070 <LORAREG_InitGetAttrFnPtrsIN+0x10c>)
    cfd4:	3204      	adds	r2, #4
    cfd6:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_ADR_ACK_DELAY] = LORAREG_GetAttr_MacAdrAckDelay;
    cfd8:	4926      	ldr	r1, [pc, #152]	; (d074 <LORAREG_InitGetAttrFnPtrsIN+0x110>)
    cfda:	3204      	adds	r2, #4
    cfdc:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_ADR_ACK_LIMIT] = LORAREG_GetAttr_MacAdrAckLimit;
    cfde:	4926      	ldr	r1, [pc, #152]	; (d078 <LORAREG_InitGetAttrFnPtrsIN+0x114>)
    cfe0:	3204      	adds	r2, #4
    cfe2:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_MAX_FCNT_GAP] = LORAREG_GetAttr_MacMaxFcntGap;
    cfe4:	4925      	ldr	r1, [pc, #148]	; (d07c <LORAREG_InitGetAttrFnPtrsIN+0x118>)
    cfe6:	3204      	adds	r2, #4
    cfe8:	5099      	str	r1, [r3, r2]
    pGetAttr[NEW_TX_CHANNEL_CONFIG] = LORAREG_GetAttr_NewTxChConfigT2;
    cfea:	4925      	ldr	r1, [pc, #148]	; (d080 <LORAREG_InitGetAttrFnPtrsIN+0x11c>)
    cfec:	3204      	adds	r2, #4
    cfee:	5099      	str	r1, [r3, r2]
    pGetAttr[FREE_CHANNEL] = LORAREG_GetAttr_FreeChannel2;
    cff0:	4924      	ldr	r1, [pc, #144]	; (d084 <LORAREG_InitGetAttrFnPtrsIN+0x120>)
    cff2:	3204      	adds	r2, #4
    cff4:	5099      	str	r1, [r3, r2]
    pGetAttr[CURRENT_CHANNEL_INDEX] = LORAREG_GetAttr_CurChIndx;
    cff6:	4924      	ldr	r1, [pc, #144]	; (d088 <LORAREG_InitGetAttrFnPtrsIN+0x124>)
    cff8:	3204      	adds	r2, #4
    cffa:	5099      	str	r1, [r3, r2]
    pGetAttr[DL_FREQUENCY] = LORAREG_GetAttr_DlFrequency;
    cffc:	4923      	ldr	r1, [pc, #140]	; (d08c <LORAREG_InitGetAttrFnPtrsIN+0x128>)
    cffe:	320c      	adds	r2, #12
    d000:	5099      	str	r1, [r3, r2]
    pGetAttr[REG_DEF_TX_POWER] = LORAREG_GetAttr_RegDefTxPwr;
    d002:	4923      	ldr	r1, [pc, #140]	; (d090 <LORAREG_InitGetAttrFnPtrsIN+0x12c>)
    d004:	3208      	adds	r2, #8
    d006:	5099      	str	r1, [r3, r2]
    pGetAttr[REG_DEF_TX_DATARATE] = LORAREG_GetAttr_RegDefTxDR;
    d008:	4922      	ldr	r1, [pc, #136]	; (d094 <LORAREG_InitGetAttrFnPtrsIN+0x130>)
    d00a:	3204      	adds	r2, #4
    d00c:	5099      	str	r1, [r3, r2]
}
    d00e:	4770      	bx	lr
    d010:	20000c7c 	.word	0x20000c7c
    d014:	0000ab49 	.word	0x0000ab49
    d018:	0000c2dd 	.word	0x0000c2dd
    d01c:	0000c31d 	.word	0x0000c31d
    d020:	0000c359 	.word	0x0000c359
    d024:	00009741 	.word	0x00009741
    d028:	00009751 	.word	0x00009751
    d02c:	0000976d 	.word	0x0000976d
    d030:	0000977d 	.word	0x0000977d
    d034:	0000a7ed 	.word	0x0000a7ed
    d038:	0000978d 	.word	0x0000978d
    d03c:	0000979d 	.word	0x0000979d
    d040:	0000aa4d 	.word	0x0000aa4d
    d044:	00009aad 	.word	0x00009aad
    d048:	000097ed 	.word	0x000097ed
    d04c:	0000accd 	.word	0x0000accd
    d050:	0000a575 	.word	0x0000a575
    d054:	0000c391 	.word	0x0000c391
    d058:	0000c3c9 	.word	0x0000c3c9
    d05c:	0000c401 	.word	0x0000c401
    d060:	0000984d 	.word	0x0000984d
    d064:	00009857 	.word	0x00009857
    d068:	00009861 	.word	0x00009861
    d06c:	0000986d 	.word	0x0000986d
    d070:	00009879 	.word	0x00009879
    d074:	00009883 	.word	0x00009883
    d078:	0000988b 	.word	0x0000988b
    d07c:	00009893 	.word	0x00009893
    d080:	0000c471 	.word	0x0000c471
    d084:	0000b3dd 	.word	0x0000b3dd
    d088:	000098bd 	.word	0x000098bd
    d08c:	0000a805 	.word	0x0000a805
    d090:	0000989d 	.word	0x0000989d
    d094:	000098ad 	.word	0x000098ad

0000d098 <LORAREG_InitGetAttrFnPtrsJP>:
    pGetAttr[FREQUENCY] = LORAREG_GetAttr_FreqT3;
    d098:	4b30      	ldr	r3, [pc, #192]	; (d15c <LORAREG_InitGetAttrFnPtrsJP+0xc4>)
    d09a:	4a31      	ldr	r2, [pc, #196]	; (d160 <LORAREG_InitGetAttrFnPtrsJP+0xc8>)
    d09c:	601a      	str	r2, [r3, #0]
    pGetAttr[RX_WINDOW_SIZE] = LORAREG_GetAttr_RxWindowSizeT2;
    d09e:	4a31      	ldr	r2, [pc, #196]	; (d164 <LORAREG_InitGetAttrFnPtrsJP+0xcc>)
    d0a0:	60da      	str	r2, [r3, #12]
    pGetAttr[RX_WINDOW_OFFSET] = LORAREG_GetAttr_RxWindowOffsetT2;
    d0a2:	4a31      	ldr	r2, [pc, #196]	; (d168 <LORAREG_InitGetAttrFnPtrsJP+0xd0>)
    d0a4:	611a      	str	r2, [r3, #16]
    pGetAttr[MAX_PAYLOAD_SIZE] = LORAREG_GetAttr_MaxPayloadT3;
    d0a6:	4a31      	ldr	r2, [pc, #196]	; (d16c <LORAREG_InitGetAttrFnPtrsJP+0xd4>)
    d0a8:	615a      	str	r2, [r3, #20]
    pGetAttr[MAX_CHANNELS] = LORAREG_GetAttr_MaxChannel;
    d0aa:	4a31      	ldr	r2, [pc, #196]	; (d170 <LORAREG_InitGetAttrFnPtrsJP+0xd8>)
    d0ac:	619a      	str	r2, [r3, #24]
    pGetAttr[MIN_NEW_CH_INDEX] = LORAREG_GetAttr_MinNewChIndex;
    d0ae:	4a31      	ldr	r2, [pc, #196]	; (d174 <LORAREG_InitGetAttrFnPtrsJP+0xdc>)
    d0b0:	61da      	str	r2, [r3, #28]
    pGetAttr[DEFAULT_RX1_DATA_RATE] = LORAREG_GetAttr_DefRx1DataRate;
    d0b2:	4a31      	ldr	r2, [pc, #196]	; (d178 <LORAREG_InitGetAttrFnPtrsJP+0xe0>)
    d0b4:	621a      	str	r2, [r3, #32]
    pGetAttr[DEFAULT_RX2_DATA_RATE] = LORAREG_GetAttr_DefRx2DataRate;
    d0b6:	4a31      	ldr	r2, [pc, #196]	; (d17c <LORAREG_InitGetAttrFnPtrsJP+0xe4>)
    d0b8:	625a      	str	r2, [r3, #36]	; 0x24
    pGetAttr[DEFAULT_RX2_FREQUENCY] = LORAREG_GetAttr_DefRx2Freq;
    d0ba:	4a31      	ldr	r2, [pc, #196]	; (d180 <LORAREG_InitGetAttrFnPtrsJP+0xe8>)
    d0bc:	629a      	str	r2, [r3, #40]	; 0x28
    pGetAttr[SUPPORTED_REGIONAL_FEATURES] = LORAREG_GetAttr_RegFeatures;
    d0be:	4a31      	ldr	r2, [pc, #196]	; (d184 <LORAREG_InitGetAttrFnPtrsJP+0xec>)
    d0c0:	639a      	str	r2, [r3, #56]	; 0x38
    pGetAttr[DATA_RANGE] = LORAREG_GetAttr_DataRange;
    d0c2:	4a31      	ldr	r2, [pc, #196]	; (d188 <LORAREG_InitGetAttrFnPtrsJP+0xf0>)
    d0c4:	649a      	str	r2, [r3, #72]	; 0x48
    pGetAttr[DATA_RANGE_CH_BAND] = LORAREG_GetAttr_DRangeChBandT2;
    d0c6:	4a31      	ldr	r2, [pc, #196]	; (d18c <LORAREG_InitGetAttrFnPtrsJP+0xf4>)
    d0c8:	64da      	str	r2, [r3, #76]	; 0x4c
    pGetAttr[MIN_MAX_DR] = LORAREG_GetAttr_MinMaxDr;
    d0ca:	4a31      	ldr	r2, [pc, #196]	; (d190 <LORAREG_InitGetAttrFnPtrsJP+0xf8>)
    d0cc:	651a      	str	r2, [r3, #80]	; 0x50
    pGetAttr[CHANNEL_ID_STATUS] = LORAREG_GetAttr_ChIdStatus;
    d0ce:	4a31      	ldr	r2, [pc, #196]	; (d194 <LORAREG_InitGetAttrFnPtrsJP+0xfc>)
    d0d0:	659a      	str	r2, [r3, #88]	; 0x58
    pGetAttr[RX1_WINDOW_PARAMS] = LORAREG_GetAttr_Rx1WindowparamsType4;
    d0d2:	4a31      	ldr	r2, [pc, #196]	; (d198 <LORAREG_InitGetAttrFnPtrsJP+0x100>)
    d0d4:	665a      	str	r2, [r3, #100]	; 0x64
	pGetAttr[JOIN_DUTY_CYCLE_TIMER]= LORAREG_GetAttr_JoinDutyCycleRemainingTime;
    d0d6:	4931      	ldr	r1, [pc, #196]	; (d19c <LORAREG_InitGetAttrFnPtrsJP+0x104>)
    d0d8:	2280      	movs	r2, #128	; 0x80
    d0da:	5099      	str	r1, [r3, r2]
    pGetAttr[MODULATION_ATTR] = LORAREG_GetAttr_ModulationAttrT2;
    d0dc:	4930      	ldr	r1, [pc, #192]	; (d1a0 <LORAREG_InitGetAttrFnPtrsJP+0x108>)
    d0de:	320c      	adds	r2, #12
    d0e0:	5099      	str	r1, [r3, r2]
    pGetAttr[BANDWIDTH_ATTR] = LORAREG_GetAttr_BandwidthAttrT2;
    d0e2:	4930      	ldr	r1, [pc, #192]	; (d1a4 <LORAREG_InitGetAttrFnPtrsJP+0x10c>)
    d0e4:	3204      	adds	r2, #4
    d0e6:	5099      	str	r1, [r3, r2]
    pGetAttr[SPREADING_FACTOR_ATTR] = LORAREG_GetAttr_SpreadFactorT2;
    d0e8:	492f      	ldr	r1, [pc, #188]	; (d1a8 <LORAREG_InitGetAttrFnPtrsJP+0x110>)
    d0ea:	3204      	adds	r2, #4
    d0ec:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_RECEIVE_DELAY1] = LORAREG_GetAttr_MacRecvDelay1;
    d0ee:	492f      	ldr	r1, [pc, #188]	; (d1ac <LORAREG_InitGetAttrFnPtrsJP+0x114>)
    d0f0:	3208      	adds	r2, #8
    d0f2:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_RECEIVE_DELAY2] = LORAREG_GetAttr_MacRecvDelay2;
    d0f4:	492e      	ldr	r1, [pc, #184]	; (d1b0 <LORAREG_InitGetAttrFnPtrsJP+0x118>)
    d0f6:	3204      	adds	r2, #4
    d0f8:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_JOIN_ACCEPT_DELAY1] = LORAREG_GetAttr_MacJoinAcptDelay1;
    d0fa:	492e      	ldr	r1, [pc, #184]	; (d1b4 <LORAREG_InitGetAttrFnPtrsJP+0x11c>)
    d0fc:	3204      	adds	r2, #4
    d0fe:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_JOIN_ACCEPT_DELAY2] = LORAREG_GetAttr_MacJoinAcptDelay2;
    d100:	492d      	ldr	r1, [pc, #180]	; (d1b8 <LORAREG_InitGetAttrFnPtrsJP+0x120>)
    d102:	3204      	adds	r2, #4
    d104:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_ACK_TIMEOUT] = LORAREG_GetAttr_MacAckTimeout;
    d106:	492d      	ldr	r1, [pc, #180]	; (d1bc <LORAREG_InitGetAttrFnPtrsJP+0x124>)
    d108:	3204      	adds	r2, #4
    d10a:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_ADR_ACK_DELAY] = LORAREG_GetAttr_MacAdrAckDelay;
    d10c:	492c      	ldr	r1, [pc, #176]	; (d1c0 <LORAREG_InitGetAttrFnPtrsJP+0x128>)
    d10e:	3204      	adds	r2, #4
    d110:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_ADR_ACK_LIMIT] = LORAREG_GetAttr_MacAdrAckLimit;
    d112:	492c      	ldr	r1, [pc, #176]	; (d1c4 <LORAREG_InitGetAttrFnPtrsJP+0x12c>)
    d114:	3204      	adds	r2, #4
    d116:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_MAX_FCNT_GAP] = LORAREG_GetAttr_MacMaxFcntGap;
    d118:	492b      	ldr	r1, [pc, #172]	; (d1c8 <LORAREG_InitGetAttrFnPtrsJP+0x130>)
    d11a:	3204      	adds	r2, #4
    d11c:	5099      	str	r1, [r3, r2]
    pGetAttr[NEW_TX_CHANNEL_CONFIG] = LORAREG_GetAttr_NewTxChConfigT2;
    d11e:	492b      	ldr	r1, [pc, #172]	; (d1cc <LORAREG_InitGetAttrFnPtrsJP+0x134>)
    d120:	3204      	adds	r2, #4
    d122:	5099      	str	r1, [r3, r2]
    pGetAttr[FREE_CHANNEL] = LORAREG_GetAttr_FreeChannel2;
    d124:	492a      	ldr	r1, [pc, #168]	; (d1d0 <LORAREG_InitGetAttrFnPtrsJP+0x138>)
    d126:	3204      	adds	r2, #4
    d128:	5099      	str	r1, [r3, r2]
    pGetAttr[CURRENT_CHANNEL_INDEX] = LORAREG_GetAttr_CurChIndx;
    d12a:	492a      	ldr	r1, [pc, #168]	; (d1d4 <LORAREG_InitGetAttrFnPtrsJP+0x13c>)
    d12c:	3204      	adds	r2, #4
    d12e:	5099      	str	r1, [r3, r2]
    pGetAttr[DEFAULT_LBT_PARAMS] = LORAREG_GetAttr_DefLBTParams;
    d130:	4929      	ldr	r1, [pc, #164]	; (d1d8 <LORAREG_InitGetAttrFnPtrsJP+0x140>)
    d132:	3204      	adds	r2, #4
    d134:	5099      	str	r1, [r3, r2]
    pGetAttr[MIN_LBT_CHANNEL_PAUSE_TIMER] = LORAREG_GetAttr_minLBTChPauseTimer;
    d136:	4929      	ldr	r1, [pc, #164]	; (d1dc <LORAREG_InitGetAttrFnPtrsJP+0x144>)
    d138:	3204      	adds	r2, #4
    d13a:	5099      	str	r1, [r3, r2]
    pGetAttr[DL_FREQUENCY] = LORAREG_GetAttr_DlFrequency;
    d13c:	4928      	ldr	r1, [pc, #160]	; (d1e0 <LORAREG_InitGetAttrFnPtrsJP+0x148>)
    d13e:	3204      	adds	r2, #4
    d140:	5099      	str	r1, [r3, r2]
    pGetAttr[REG_DEF_TX_POWER] = LORAREG_GetAttr_RegDefTxPwr;
    d142:	4928      	ldr	r1, [pc, #160]	; (d1e4 <LORAREG_InitGetAttrFnPtrsJP+0x14c>)
    d144:	3208      	adds	r2, #8
    d146:	5099      	str	r1, [r3, r2]
    pGetAttr[REG_DEF_TX_DATARATE] = LORAREG_GetAttr_RegDefTxDR;
    d148:	4927      	ldr	r1, [pc, #156]	; (d1e8 <LORAREG_InitGetAttrFnPtrsJP+0x150>)
    d14a:	3204      	adds	r2, #4
    d14c:	5099      	str	r1, [r3, r2]
	pGetAttr[DUTY_CYCLE] = LORAREG_GetAttr_DutyCycleT2;
    d14e:	4a27      	ldr	r2, [pc, #156]	; (d1ec <LORAREG_InitGetAttrFnPtrsJP+0x154>)
    d150:	679a      	str	r2, [r3, #120]	; 0x78
	pGetAttr[MIN_DUTY_CYCLE_TIMER] = LORAREG_GetAttr_DutyCycleTimer;
    d152:	4927      	ldr	r1, [pc, #156]	; (d1f0 <LORAREG_InitGetAttrFnPtrsJP+0x158>)
    d154:	2298      	movs	r2, #152	; 0x98
    d156:	5099      	str	r1, [r3, r2]
}
    d158:	4770      	bx	lr
    d15a:	46c0      	nop			; (mov r8, r8)
    d15c:	20000c7c 	.word	0x20000c7c
    d160:	0000ac85 	.word	0x0000ac85
    d164:	0000c2dd 	.word	0x0000c2dd
    d168:	0000c31d 	.word	0x0000c31d
    d16c:	0000c279 	.word	0x0000c279
    d170:	00009741 	.word	0x00009741
    d174:	00009751 	.word	0x00009751
    d178:	0000976d 	.word	0x0000976d
    d17c:	0000977d 	.word	0x0000977d
    d180:	0000a7ed 	.word	0x0000a7ed
    d184:	0000978d 	.word	0x0000978d
    d188:	0000979d 	.word	0x0000979d
    d18c:	0000aa4d 	.word	0x0000aa4d
    d190:	00009aad 	.word	0x00009aad
    d194:	000097ed 	.word	0x000097ed
    d198:	0000ab91 	.word	0x0000ab91
    d19c:	0000a575 	.word	0x0000a575
    d1a0:	0000c391 	.word	0x0000c391
    d1a4:	0000c3c9 	.word	0x0000c3c9
    d1a8:	0000c401 	.word	0x0000c401
    d1ac:	0000984d 	.word	0x0000984d
    d1b0:	00009857 	.word	0x00009857
    d1b4:	00009861 	.word	0x00009861
    d1b8:	0000986d 	.word	0x0000986d
    d1bc:	00009879 	.word	0x00009879
    d1c0:	00009883 	.word	0x00009883
    d1c4:	0000988b 	.word	0x0000988b
    d1c8:	00009893 	.word	0x00009893
    d1cc:	0000c471 	.word	0x0000c471
    d1d0:	0000b3dd 	.word	0x0000b3dd
    d1d4:	000098bd 	.word	0x000098bd
    d1d8:	000098cd 	.word	0x000098cd
    d1dc:	0000ad55 	.word	0x0000ad55
    d1e0:	0000a805 	.word	0x0000a805
    d1e4:	0000989d 	.word	0x0000989d
    d1e8:	000098ad 	.word	0x000098ad
    d1ec:	00009a65 	.word	0x00009a65
    d1f0:	0000a84d 	.word	0x0000a84d

0000d1f4 <LORAREG_InitGetAttrFnPtrsKR>:
    pGetAttr[FREQUENCY] = LORAREG_GetAttr_FreqT2;
    d1f4:	4b2d      	ldr	r3, [pc, #180]	; (d2ac <LORAREG_InitGetAttrFnPtrsKR+0xb8>)
    d1f6:	4a2e      	ldr	r2, [pc, #184]	; (d2b0 <LORAREG_InitGetAttrFnPtrsKR+0xbc>)
    d1f8:	601a      	str	r2, [r3, #0]
    pGetAttr[RX_WINDOW_SIZE] = LORAREG_GetAttr_RxWindowSizeT2;
    d1fa:	4a2e      	ldr	r2, [pc, #184]	; (d2b4 <LORAREG_InitGetAttrFnPtrsKR+0xc0>)
    d1fc:	60da      	str	r2, [r3, #12]
    pGetAttr[RX_WINDOW_OFFSET] = LORAREG_GetAttr_RxWindowOffsetT2;
    d1fe:	4a2e      	ldr	r2, [pc, #184]	; (d2b8 <LORAREG_InitGetAttrFnPtrsKR+0xc4>)
    d200:	611a      	str	r2, [r3, #16]
    pGetAttr[MAX_PAYLOAD_SIZE] = LORAREG_GetAttr_MaxPayloadT2;
    d202:	4a2e      	ldr	r2, [pc, #184]	; (d2bc <LORAREG_InitGetAttrFnPtrsKR+0xc8>)
    d204:	615a      	str	r2, [r3, #20]
    pGetAttr[MAX_CHANNELS] = LORAREG_GetAttr_MaxChannel;
    d206:	4a2e      	ldr	r2, [pc, #184]	; (d2c0 <LORAREG_InitGetAttrFnPtrsKR+0xcc>)
    d208:	619a      	str	r2, [r3, #24]
    pGetAttr[MIN_NEW_CH_INDEX] = LORAREG_GetAttr_MinNewChIndex;
    d20a:	4a2e      	ldr	r2, [pc, #184]	; (d2c4 <LORAREG_InitGetAttrFnPtrsKR+0xd0>)
    d20c:	61da      	str	r2, [r3, #28]
    pGetAttr[DEFAULT_RX1_DATA_RATE] = LORAREG_GetAttr_DefRx1DataRate;
    d20e:	4a2e      	ldr	r2, [pc, #184]	; (d2c8 <LORAREG_InitGetAttrFnPtrsKR+0xd4>)
    d210:	621a      	str	r2, [r3, #32]
    pGetAttr[DEFAULT_RX2_DATA_RATE] = LORAREG_GetAttr_DefRx2DataRate;
    d212:	4a2e      	ldr	r2, [pc, #184]	; (d2cc <LORAREG_InitGetAttrFnPtrsKR+0xd8>)
    d214:	625a      	str	r2, [r3, #36]	; 0x24
    pGetAttr[DEFAULT_RX2_FREQUENCY] = LORAREG_GetAttr_DefRx2Freq;
    d216:	4a2e      	ldr	r2, [pc, #184]	; (d2d0 <LORAREG_InitGetAttrFnPtrsKR+0xdc>)
    d218:	629a      	str	r2, [r3, #40]	; 0x28
    pGetAttr[SUPPORTED_REGIONAL_FEATURES] = LORAREG_GetAttr_RegFeatures;
    d21a:	4a2e      	ldr	r2, [pc, #184]	; (d2d4 <LORAREG_InitGetAttrFnPtrsKR+0xe0>)
    d21c:	639a      	str	r2, [r3, #56]	; 0x38
    pGetAttr[DATA_RANGE] = LORAREG_GetAttr_DataRange;
    d21e:	4a2e      	ldr	r2, [pc, #184]	; (d2d8 <LORAREG_InitGetAttrFnPtrsKR+0xe4>)
    d220:	649a      	str	r2, [r3, #72]	; 0x48
    pGetAttr[DATA_RANGE_CH_BAND] = LORAREG_GetAttr_DRangeChBandT2;
    d222:	4a2e      	ldr	r2, [pc, #184]	; (d2dc <LORAREG_InitGetAttrFnPtrsKR+0xe8>)
    d224:	64da      	str	r2, [r3, #76]	; 0x4c
    pGetAttr[MIN_MAX_DR] = LORAREG_GetAttr_MinMaxDr;
    d226:	4a2e      	ldr	r2, [pc, #184]	; (d2e0 <LORAREG_InitGetAttrFnPtrsKR+0xec>)
    d228:	651a      	str	r2, [r3, #80]	; 0x50
    pGetAttr[CHANNEL_ID_STATUS] = LORAREG_GetAttr_ChIdStatus;
    d22a:	4a2e      	ldr	r2, [pc, #184]	; (d2e4 <LORAREG_InitGetAttrFnPtrsKR+0xf0>)
    d22c:	659a      	str	r2, [r3, #88]	; 0x58
    pGetAttr[RX1_WINDOW_PARAMS] = LORAREG_GetAttr_Rx1WindowparamsType2;
    d22e:	4a2e      	ldr	r2, [pc, #184]	; (d2e8 <LORAREG_InitGetAttrFnPtrsKR+0xf4>)
    d230:	665a      	str	r2, [r3, #100]	; 0x64
	pGetAttr[JOIN_DUTY_CYCLE_TIMER]=LORAREG_GetAttr_JoinDutyCycleRemainingTime;
    d232:	492e      	ldr	r1, [pc, #184]	; (d2ec <LORAREG_InitGetAttrFnPtrsKR+0xf8>)
    d234:	2280      	movs	r2, #128	; 0x80
    d236:	5099      	str	r1, [r3, r2]
    pGetAttr[MODULATION_ATTR] = LORAREG_GetAttr_ModulationAttrT2;
    d238:	492d      	ldr	r1, [pc, #180]	; (d2f0 <LORAREG_InitGetAttrFnPtrsKR+0xfc>)
    d23a:	320c      	adds	r2, #12
    d23c:	5099      	str	r1, [r3, r2]
    pGetAttr[BANDWIDTH_ATTR] = LORAREG_GetAttr_BandwidthAttrT2;
    d23e:	492d      	ldr	r1, [pc, #180]	; (d2f4 <LORAREG_InitGetAttrFnPtrsKR+0x100>)
    d240:	3204      	adds	r2, #4
    d242:	5099      	str	r1, [r3, r2]
    pGetAttr[SPREADING_FACTOR_ATTR] = LORAREG_GetAttr_SpreadFactorT2;
    d244:	492c      	ldr	r1, [pc, #176]	; (d2f8 <LORAREG_InitGetAttrFnPtrsKR+0x104>)
    d246:	3204      	adds	r2, #4
    d248:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_RECEIVE_DELAY1] = LORAREG_GetAttr_MacRecvDelay1;
    d24a:	492c      	ldr	r1, [pc, #176]	; (d2fc <LORAREG_InitGetAttrFnPtrsKR+0x108>)
    d24c:	3208      	adds	r2, #8
    d24e:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_RECEIVE_DELAY2] = LORAREG_GetAttr_MacRecvDelay2;
    d250:	492b      	ldr	r1, [pc, #172]	; (d300 <LORAREG_InitGetAttrFnPtrsKR+0x10c>)
    d252:	3204      	adds	r2, #4
    d254:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_JOIN_ACCEPT_DELAY1] = LORAREG_GetAttr_MacJoinAcptDelay1;
    d256:	492b      	ldr	r1, [pc, #172]	; (d304 <LORAREG_InitGetAttrFnPtrsKR+0x110>)
    d258:	3204      	adds	r2, #4
    d25a:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_JOIN_ACCEPT_DELAY2] = LORAREG_GetAttr_MacJoinAcptDelay2;
    d25c:	492a      	ldr	r1, [pc, #168]	; (d308 <LORAREG_InitGetAttrFnPtrsKR+0x114>)
    d25e:	3204      	adds	r2, #4
    d260:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_ACK_TIMEOUT] = LORAREG_GetAttr_MacAckTimeout;
    d262:	492a      	ldr	r1, [pc, #168]	; (d30c <LORAREG_InitGetAttrFnPtrsKR+0x118>)
    d264:	3204      	adds	r2, #4
    d266:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_ADR_ACK_DELAY] = LORAREG_GetAttr_MacAdrAckDelay;
    d268:	4929      	ldr	r1, [pc, #164]	; (d310 <LORAREG_InitGetAttrFnPtrsKR+0x11c>)
    d26a:	3204      	adds	r2, #4
    d26c:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_ADR_ACK_LIMIT] = LORAREG_GetAttr_MacAdrAckLimit;
    d26e:	4929      	ldr	r1, [pc, #164]	; (d314 <LORAREG_InitGetAttrFnPtrsKR+0x120>)
    d270:	3204      	adds	r2, #4
    d272:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_MAX_FCNT_GAP] = LORAREG_GetAttr_MacMaxFcntGap;
    d274:	4928      	ldr	r1, [pc, #160]	; (d318 <LORAREG_InitGetAttrFnPtrsKR+0x124>)
    d276:	3204      	adds	r2, #4
    d278:	5099      	str	r1, [r3, r2]
    pGetAttr[NEW_TX_CHANNEL_CONFIG] = LORAREG_GetAttr_NewTxChConfigT2;
    d27a:	4928      	ldr	r1, [pc, #160]	; (d31c <LORAREG_InitGetAttrFnPtrsKR+0x128>)
    d27c:	3204      	adds	r2, #4
    d27e:	5099      	str	r1, [r3, r2]
    pGetAttr[FREE_CHANNEL] = LORAREG_GetAttr_FreeChannel2;
    d280:	4927      	ldr	r1, [pc, #156]	; (d320 <LORAREG_InitGetAttrFnPtrsKR+0x12c>)
    d282:	3204      	adds	r2, #4
    d284:	5099      	str	r1, [r3, r2]
    pGetAttr[CURRENT_CHANNEL_INDEX] = LORAREG_GetAttr_CurChIndx;
    d286:	4927      	ldr	r1, [pc, #156]	; (d324 <LORAREG_InitGetAttrFnPtrsKR+0x130>)
    d288:	3204      	adds	r2, #4
    d28a:	5099      	str	r1, [r3, r2]
    pGetAttr[DEFAULT_LBT_PARAMS] = LORAREG_GetAttr_DefLBTParams;
    d28c:	4926      	ldr	r1, [pc, #152]	; (d328 <LORAREG_InitGetAttrFnPtrsKR+0x134>)
    d28e:	3204      	adds	r2, #4
    d290:	5099      	str	r1, [r3, r2]
    pGetAttr[MIN_LBT_CHANNEL_PAUSE_TIMER] = LORAREG_GetAttr_minLBTChPauseTimer;
    d292:	4926      	ldr	r1, [pc, #152]	; (d32c <LORAREG_InitGetAttrFnPtrsKR+0x138>)
    d294:	3204      	adds	r2, #4
    d296:	5099      	str	r1, [r3, r2]
    pGetAttr[DL_FREQUENCY] = LORAREG_GetAttr_DlFrequency;
    d298:	4925      	ldr	r1, [pc, #148]	; (d330 <LORAREG_InitGetAttrFnPtrsKR+0x13c>)
    d29a:	3204      	adds	r2, #4
    d29c:	5099      	str	r1, [r3, r2]
    pGetAttr[REG_DEF_TX_POWER] = LORAREG_GetAttr_RegDefTxPwr;
    d29e:	4925      	ldr	r1, [pc, #148]	; (d334 <LORAREG_InitGetAttrFnPtrsKR+0x140>)
    d2a0:	3208      	adds	r2, #8
    d2a2:	5099      	str	r1, [r3, r2]
    pGetAttr[REG_DEF_TX_DATARATE] = LORAREG_GetAttr_RegDefTxDR;
    d2a4:	4924      	ldr	r1, [pc, #144]	; (d338 <LORAREG_InitGetAttrFnPtrsKR+0x144>)
    d2a6:	3204      	adds	r2, #4
    d2a8:	5099      	str	r1, [r3, r2]
}
    d2aa:	4770      	bx	lr
    d2ac:	20000c7c 	.word	0x20000c7c
    d2b0:	0000ab49 	.word	0x0000ab49
    d2b4:	0000c2dd 	.word	0x0000c2dd
    d2b8:	0000c31d 	.word	0x0000c31d
    d2bc:	0000c359 	.word	0x0000c359
    d2c0:	00009741 	.word	0x00009741
    d2c4:	00009751 	.word	0x00009751
    d2c8:	0000976d 	.word	0x0000976d
    d2cc:	0000977d 	.word	0x0000977d
    d2d0:	0000a7ed 	.word	0x0000a7ed
    d2d4:	0000978d 	.word	0x0000978d
    d2d8:	0000979d 	.word	0x0000979d
    d2dc:	0000aa4d 	.word	0x0000aa4d
    d2e0:	00009aad 	.word	0x00009aad
    d2e4:	000097ed 	.word	0x000097ed
    d2e8:	0000a9e1 	.word	0x0000a9e1
    d2ec:	0000a575 	.word	0x0000a575
    d2f0:	0000c391 	.word	0x0000c391
    d2f4:	0000c3c9 	.word	0x0000c3c9
    d2f8:	0000c401 	.word	0x0000c401
    d2fc:	0000984d 	.word	0x0000984d
    d300:	00009857 	.word	0x00009857
    d304:	00009861 	.word	0x00009861
    d308:	0000986d 	.word	0x0000986d
    d30c:	00009879 	.word	0x00009879
    d310:	00009883 	.word	0x00009883
    d314:	0000988b 	.word	0x0000988b
    d318:	00009893 	.word	0x00009893
    d31c:	0000c471 	.word	0x0000c471
    d320:	0000b3dd 	.word	0x0000b3dd
    d324:	000098bd 	.word	0x000098bd
    d328:	000098cd 	.word	0x000098cd
    d32c:	0000ad55 	.word	0x0000ad55
    d330:	0000a805 	.word	0x0000a805
    d334:	0000989d 	.word	0x0000989d
    d338:	000098ad 	.word	0x000098ad

0000d33c <LORAREG_InitValidateAttrFnPtrsNA>:
    pValidateAttr[RX_FREQUENCY] = ValidateRxFreqT1;
    d33c:	4b0d      	ldr	r3, [pc, #52]	; (d374 <LORAREG_InitValidateAttrFnPtrsNA+0x38>)
    d33e:	4a0e      	ldr	r2, [pc, #56]	; (d378 <LORAREG_InitValidateAttrFnPtrsNA+0x3c>)
    d340:	605a      	str	r2, [r3, #4]
    pValidateAttr[TX_FREQUENCY] = ValidateTxFreqT1;
    d342:	4a0e      	ldr	r2, [pc, #56]	; (d37c <LORAREG_InitValidateAttrFnPtrsNA+0x40>)
    d344:	609a      	str	r2, [r3, #8]
    pValidateAttr[RX_DATARATE] = ValidateDataRateRxT1;
    d346:	4a0e      	ldr	r2, [pc, #56]	; (d380 <LORAREG_InitValidateAttrFnPtrsNA+0x44>)
    d348:	63da      	str	r2, [r3, #60]	; 0x3c
    pValidateAttr[TX_DATARATE] = ValidateDataRateTxT1;
    d34a:	490e      	ldr	r1, [pc, #56]	; (d384 <LORAREG_InitValidateAttrFnPtrsNA+0x48>)
    d34c:	6419      	str	r1, [r3, #64]	; 0x40
    pValidateAttr[SUPPORTED_DR] = ValidateSupportedDr;
    d34e:	490e      	ldr	r1, [pc, #56]	; (d388 <LORAREG_InitValidateAttrFnPtrsNA+0x4c>)
    d350:	6459      	str	r1, [r3, #68]	; 0x44
    pValidateAttr[DATA_RANGE] = ValidateDataRange;
    d352:	490e      	ldr	r1, [pc, #56]	; (d38c <LORAREG_InitValidateAttrFnPtrsNA+0x50>)
    d354:	6499      	str	r1, [r3, #72]	; 0x48
    pValidateAttr[CHANNEL_ID] = ValidateChannelId;
    d356:	490e      	ldr	r1, [pc, #56]	; (d390 <LORAREG_InitValidateAttrFnPtrsNA+0x54>)
    d358:	6559      	str	r1, [r3, #84]	; 0x54
    pValidateAttr[RX2_DATARATE] = ValidateDataRateRxT1;
    d35a:	65da      	str	r2, [r3, #92]	; 0x5c
    pValidateAttr[RX1_DATARATE_OFFSET] = ValidateRx1DataRateOffset;
    d35c:	4a0d      	ldr	r2, [pc, #52]	; (d394 <LORAREG_InitValidateAttrFnPtrsNA+0x58>)
    d35e:	661a      	str	r2, [r3, #96]	; 0x60
    pValidateAttr[CHANNEL_MASK] = ValidateChannelMask;
    d360:	4a0d      	ldr	r2, [pc, #52]	; (d398 <LORAREG_InitValidateAttrFnPtrsNA+0x5c>)
    d362:	669a      	str	r2, [r3, #104]	; 0x68
    pValidateAttr[CHANNEL_MASK_CNTL] = ValidateChannelMaskCntl;
    d364:	4a0d      	ldr	r2, [pc, #52]	; (d39c <LORAREG_InitValidateAttrFnPtrsNA+0x60>)
    d366:	66da      	str	r2, [r3, #108]	; 0x6c
    pValidateAttr[TX_PWR] = ValidateTxPower;
    d368:	4a0d      	ldr	r2, [pc, #52]	; (d3a0 <LORAREG_InitValidateAttrFnPtrsNA+0x64>)
    d36a:	675a      	str	r2, [r3, #116]	; 0x74
    pValidateAttr[CHMASK_CHCNTL] = ValidateChMaskChCntl;
    d36c:	490d      	ldr	r1, [pc, #52]	; (d3a4 <LORAREG_InitValidateAttrFnPtrsNA+0x68>)
    d36e:	22e0      	movs	r2, #224	; 0xe0
    d370:	5099      	str	r1, [r3, r2]
}
    d372:	4770      	bx	lr
    d374:	20000e64 	.word	0x20000e64
    d378:	00009ca1 	.word	0x00009ca1
    d37c:	0000c809 	.word	0x0000c809
    d380:	000099d1 	.word	0x000099d1
    d384:	0000998d 	.word	0x0000998d
    d388:	00009c45 	.word	0x00009c45
    d38c:	0000c565 	.word	0x0000c565
    d390:	00009a21 	.word	0x00009a21
    d394:	00009cd5 	.word	0x00009cd5
    d398:	00009b6d 	.word	0x00009b6d
    d39c:	00009b41 	.word	0x00009b41
    d3a0:	00009b55 	.word	0x00009b55
    d3a4:	0000c439 	.word	0x0000c439

0000d3a8 <LORAREG_InitValidateAttrFnPtrsEU>:
	pValidateAttr[RX_FREQUENCY] = ValidateFreq;
    d3a8:	4b0d      	ldr	r3, [pc, #52]	; (d3e0 <LORAREG_InitValidateAttrFnPtrsEU+0x38>)
    d3aa:	4a0e      	ldr	r2, [pc, #56]	; (d3e4 <LORAREG_InitValidateAttrFnPtrsEU+0x3c>)
    d3ac:	605a      	str	r2, [r3, #4]
	pValidateAttr[TX_FREQUENCY] = ValidateTxFreqT2;
    d3ae:	4a0e      	ldr	r2, [pc, #56]	; (d3e8 <LORAREG_InitValidateAttrFnPtrsEU+0x40>)
    d3b0:	609a      	str	r2, [r3, #8]
	pValidateAttr[RX_DATARATE] = ValidateDataRate;
    d3b2:	4a0e      	ldr	r2, [pc, #56]	; (d3ec <LORAREG_InitValidateAttrFnPtrsEU+0x44>)
    d3b4:	63da      	str	r2, [r3, #60]	; 0x3c
	pValidateAttr[TX_DATARATE] = ValidateDataRate;
    d3b6:	641a      	str	r2, [r3, #64]	; 0x40
	pValidateAttr[SUPPORTED_DR] = ValidateSupportedDr;
    d3b8:	490d      	ldr	r1, [pc, #52]	; (d3f0 <LORAREG_InitValidateAttrFnPtrsEU+0x48>)
    d3ba:	6459      	str	r1, [r3, #68]	; 0x44
	pValidateAttr[DATA_RANGE] = ValidateDataRangeT2;
    d3bc:	490d      	ldr	r1, [pc, #52]	; (d3f4 <LORAREG_InitValidateAttrFnPtrsEU+0x4c>)
    d3be:	6499      	str	r1, [r3, #72]	; 0x48
	pValidateAttr[CHANNEL_ID] = ValidateChannelIdT2;
    d3c0:	490d      	ldr	r1, [pc, #52]	; (d3f8 <LORAREG_InitValidateAttrFnPtrsEU+0x50>)
    d3c2:	6559      	str	r1, [r3, #84]	; 0x54
	pValidateAttr[RX2_DATARATE] = ValidateDataRate;
    d3c4:	65da      	str	r2, [r3, #92]	; 0x5c
	pValidateAttr[RX1_DATARATE_OFFSET] = ValidateRx1DataRateOffset;
    d3c6:	4a0d      	ldr	r2, [pc, #52]	; (d3fc <LORAREG_InitValidateAttrFnPtrsEU+0x54>)
    d3c8:	661a      	str	r2, [r3, #96]	; 0x60
	pValidateAttr[CHANNEL_MASK] = ValidateChannelMaskT2;
    d3ca:	4a0d      	ldr	r2, [pc, #52]	; (d400 <LORAREG_InitValidateAttrFnPtrsEU+0x58>)
    d3cc:	669a      	str	r2, [r3, #104]	; 0x68
	pValidateAttr[CHANNEL_MASK_CNTL] = ValidateChannelMaskCntlT2;
    d3ce:	4a0d      	ldr	r2, [pc, #52]	; (d404 <LORAREG_InitValidateAttrFnPtrsEU+0x5c>)
    d3d0:	66da      	str	r2, [r3, #108]	; 0x6c
	pValidateAttr[TX_PWR] = ValidateTxPower;
    d3d2:	4a0d      	ldr	r2, [pc, #52]	; (d408 <LORAREG_InitValidateAttrFnPtrsEU+0x60>)
    d3d4:	675a      	str	r2, [r3, #116]	; 0x74
	pValidateAttr[CHMASK_CHCNTL] = ValidateChMaskChCntlT2;
    d3d6:	490d      	ldr	r1, [pc, #52]	; (d40c <LORAREG_InitValidateAttrFnPtrsEU+0x64>)
    d3d8:	22e0      	movs	r2, #224	; 0xe0
    d3da:	5099      	str	r1, [r3, r2]
}
    d3dc:	4770      	bx	lr
    d3de:	46c0      	nop			; (mov r8, r8)
    d3e0:	20000e64 	.word	0x20000e64
    d3e4:	00009d5d 	.word	0x00009d5d
    d3e8:	0000ae25 	.word	0x0000ae25
    d3ec:	00009c2d 	.word	0x00009c2d
    d3f0:	00009c45 	.word	0x00009c45
    d3f4:	0000c189 	.word	0x0000c189
    d3f8:	00009a39 	.word	0x00009a39
    d3fc:	00009cd5 	.word	0x00009cd5
    d400:	00009b71 	.word	0x00009b71
    d404:	00009bc5 	.word	0x00009bc5
    d408:	00009b55 	.word	0x00009b55
    d40c:	00009bd9 	.word	0x00009bd9

0000d410 <LORAREG_InitValidateAttrFnPtrsAS>:
	pValidateAttr[RX_FREQUENCY] = ValidateFrequencyAS;
    d410:	4b0d      	ldr	r3, [pc, #52]	; (d448 <LORAREG_InitValidateAttrFnPtrsAS+0x38>)
    d412:	4a0e      	ldr	r2, [pc, #56]	; (d44c <LORAREG_InitValidateAttrFnPtrsAS+0x3c>)
    d414:	605a      	str	r2, [r3, #4]
	pValidateAttr[TX_FREQUENCY] = ValidateTxFreqT2;
    d416:	4a0e      	ldr	r2, [pc, #56]	; (d450 <LORAREG_InitValidateAttrFnPtrsAS+0x40>)
    d418:	609a      	str	r2, [r3, #8]
	pValidateAttr[RX_DATARATE] = ValidateDataRateRxT2;
    d41a:	4a0e      	ldr	r2, [pc, #56]	; (d454 <LORAREG_InitValidateAttrFnPtrsAS+0x44>)
    d41c:	63da      	str	r2, [r3, #60]	; 0x3c
	pValidateAttr[TX_DATARATE] = ValidateDataRateTxT2;
    d41e:	490e      	ldr	r1, [pc, #56]	; (d458 <LORAREG_InitValidateAttrFnPtrsAS+0x48>)
    d420:	6419      	str	r1, [r3, #64]	; 0x40
	pValidateAttr[SUPPORTED_DR] = ValidateSupportedDr;
    d422:	490e      	ldr	r1, [pc, #56]	; (d45c <LORAREG_InitValidateAttrFnPtrsAS+0x4c>)
    d424:	6459      	str	r1, [r3, #68]	; 0x44
	pValidateAttr[DATA_RANGE] = ValidateDataRangeT2;
    d426:	490e      	ldr	r1, [pc, #56]	; (d460 <LORAREG_InitValidateAttrFnPtrsAS+0x50>)
    d428:	6499      	str	r1, [r3, #72]	; 0x48
	pValidateAttr[CHANNEL_ID] = ValidateChannelIdT2;
    d42a:	490e      	ldr	r1, [pc, #56]	; (d464 <LORAREG_InitValidateAttrFnPtrsAS+0x54>)
    d42c:	6559      	str	r1, [r3, #84]	; 0x54
	pValidateAttr[RX2_DATARATE] = ValidateDataRateRxT2;
    d42e:	65da      	str	r2, [r3, #92]	; 0x5c
	pValidateAttr[RX1_DATARATE_OFFSET] = ValidateRx1DataRateOffset;
    d430:	4a0d      	ldr	r2, [pc, #52]	; (d468 <LORAREG_InitValidateAttrFnPtrsAS+0x58>)
    d432:	661a      	str	r2, [r3, #96]	; 0x60
	pValidateAttr[CHANNEL_MASK] = ValidateChannelMaskT2;
    d434:	4a0d      	ldr	r2, [pc, #52]	; (d46c <LORAREG_InitValidateAttrFnPtrsAS+0x5c>)
    d436:	669a      	str	r2, [r3, #104]	; 0x68
	pValidateAttr[CHANNEL_MASK_CNTL] = ValidateChannelMaskCntlT2;
    d438:	4a0d      	ldr	r2, [pc, #52]	; (d470 <LORAREG_InitValidateAttrFnPtrsAS+0x60>)
    d43a:	66da      	str	r2, [r3, #108]	; 0x6c
	pValidateAttr[TX_PWR] = ValidateTxPower;
    d43c:	4a0d      	ldr	r2, [pc, #52]	; (d474 <LORAREG_InitValidateAttrFnPtrsAS+0x64>)
    d43e:	675a      	str	r2, [r3, #116]	; 0x74
	pValidateAttr[CHMASK_CHCNTL] = ValidateChMaskChCntlT2;
    d440:	490d      	ldr	r1, [pc, #52]	; (d478 <LORAREG_InitValidateAttrFnPtrsAS+0x68>)
    d442:	22e0      	movs	r2, #224	; 0xe0
    d444:	5099      	str	r1, [r3, r2]
}
    d446:	4770      	bx	lr
    d448:	20000e64 	.word	0x20000e64
    d44c:	00009d79 	.word	0x00009d79
    d450:	0000ae25 	.word	0x0000ae25
    d454:	000099f5 	.word	0x000099f5
    d458:	000099a5 	.word	0x000099a5
    d45c:	00009c45 	.word	0x00009c45
    d460:	0000c189 	.word	0x0000c189
    d464:	00009a39 	.word	0x00009a39
    d468:	00009cd5 	.word	0x00009cd5
    d46c:	00009b71 	.word	0x00009b71
    d470:	00009bc5 	.word	0x00009bc5
    d474:	00009b55 	.word	0x00009b55
    d478:	00009bd9 	.word	0x00009bd9

0000d47c <LORAREG_InitValidateAttrFnPtrsAU>:
	pValidateAttr[RX_FREQUENCY] = ValidateRxFreqT1;
    d47c:	4b0d      	ldr	r3, [pc, #52]	; (d4b4 <LORAREG_InitValidateAttrFnPtrsAU+0x38>)
    d47e:	4a0e      	ldr	r2, [pc, #56]	; (d4b8 <LORAREG_InitValidateAttrFnPtrsAU+0x3c>)
    d480:	605a      	str	r2, [r3, #4]
	pValidateAttr[TX_FREQUENCY] = ValidateTxFreqT1;
    d482:	4a0e      	ldr	r2, [pc, #56]	; (d4bc <LORAREG_InitValidateAttrFnPtrsAU+0x40>)
    d484:	609a      	str	r2, [r3, #8]
	pValidateAttr[RX_DATARATE] = ValidateDataRateRxT1;
    d486:	4a0e      	ldr	r2, [pc, #56]	; (d4c0 <LORAREG_InitValidateAttrFnPtrsAU+0x44>)
    d488:	63da      	str	r2, [r3, #60]	; 0x3c
	pValidateAttr[TX_DATARATE] = ValidateDataRateTxT1;
    d48a:	490e      	ldr	r1, [pc, #56]	; (d4c4 <LORAREG_InitValidateAttrFnPtrsAU+0x48>)
    d48c:	6419      	str	r1, [r3, #64]	; 0x40
	pValidateAttr[SUPPORTED_DR] = ValidateSupportedDr;
    d48e:	490e      	ldr	r1, [pc, #56]	; (d4c8 <LORAREG_InitValidateAttrFnPtrsAU+0x4c>)
    d490:	6459      	str	r1, [r3, #68]	; 0x44
	pValidateAttr[DATA_RANGE] = ValidateDataRange;
    d492:	490e      	ldr	r1, [pc, #56]	; (d4cc <LORAREG_InitValidateAttrFnPtrsAU+0x50>)
    d494:	6499      	str	r1, [r3, #72]	; 0x48
	pValidateAttr[CHANNEL_ID] = ValidateChannelId;
    d496:	490e      	ldr	r1, [pc, #56]	; (d4d0 <LORAREG_InitValidateAttrFnPtrsAU+0x54>)
    d498:	6559      	str	r1, [r3, #84]	; 0x54
	pValidateAttr[RX2_DATARATE] = ValidateDataRateRxT1;
    d49a:	65da      	str	r2, [r3, #92]	; 0x5c
	pValidateAttr[RX1_DATARATE_OFFSET] = ValidateRx1DataRateOffset;
    d49c:	4a0d      	ldr	r2, [pc, #52]	; (d4d4 <LORAREG_InitValidateAttrFnPtrsAU+0x58>)
    d49e:	661a      	str	r2, [r3, #96]	; 0x60
	pValidateAttr[CHANNEL_MASK] = ValidateChannelMask;
    d4a0:	4a0d      	ldr	r2, [pc, #52]	; (d4d8 <LORAREG_InitValidateAttrFnPtrsAU+0x5c>)
    d4a2:	669a      	str	r2, [r3, #104]	; 0x68
	pValidateAttr[CHANNEL_MASK_CNTL] = ValidateChannelMaskCntl;
    d4a4:	4a0d      	ldr	r2, [pc, #52]	; (d4dc <LORAREG_InitValidateAttrFnPtrsAU+0x60>)
    d4a6:	66da      	str	r2, [r3, #108]	; 0x6c
	pValidateAttr[TX_PWR] = ValidateTxPower;
    d4a8:	4a0d      	ldr	r2, [pc, #52]	; (d4e0 <LORAREG_InitValidateAttrFnPtrsAU+0x64>)
    d4aa:	675a      	str	r2, [r3, #116]	; 0x74
	pValidateAttr[CHMASK_CHCNTL] = ValidateChMaskChCntl;
    d4ac:	490d      	ldr	r1, [pc, #52]	; (d4e4 <LORAREG_InitValidateAttrFnPtrsAU+0x68>)
    d4ae:	22e0      	movs	r2, #224	; 0xe0
    d4b0:	5099      	str	r1, [r3, r2]
}
    d4b2:	4770      	bx	lr
    d4b4:	20000e64 	.word	0x20000e64
    d4b8:	00009ca1 	.word	0x00009ca1
    d4bc:	0000c809 	.word	0x0000c809
    d4c0:	000099d1 	.word	0x000099d1
    d4c4:	0000998d 	.word	0x0000998d
    d4c8:	00009c45 	.word	0x00009c45
    d4cc:	0000c565 	.word	0x0000c565
    d4d0:	00009a21 	.word	0x00009a21
    d4d4:	00009cd5 	.word	0x00009cd5
    d4d8:	00009b6d 	.word	0x00009b6d
    d4dc:	00009b41 	.word	0x00009b41
    d4e0:	00009b55 	.word	0x00009b55
    d4e4:	0000c439 	.word	0x0000c439

0000d4e8 <LORAREG_InitValidateAttrFnPtrsIN>:
	pValidateAttr[RX_FREQUENCY] = ValidateFreqIN;
    d4e8:	4b0d      	ldr	r3, [pc, #52]	; (d520 <LORAREG_InitValidateAttrFnPtrsIN+0x38>)
    d4ea:	4a0e      	ldr	r2, [pc, #56]	; (d524 <LORAREG_InitValidateAttrFnPtrsIN+0x3c>)
    d4ec:	605a      	str	r2, [r3, #4]
	pValidateAttr[TX_FREQUENCY] = ValidateTxFreqT2;
    d4ee:	4a0e      	ldr	r2, [pc, #56]	; (d528 <LORAREG_InitValidateAttrFnPtrsIN+0x40>)
    d4f0:	609a      	str	r2, [r3, #8]
	pValidateAttr[RX_DATARATE] = ValidateDataRate;
    d4f2:	4a0e      	ldr	r2, [pc, #56]	; (d52c <LORAREG_InitValidateAttrFnPtrsIN+0x44>)
    d4f4:	63da      	str	r2, [r3, #60]	; 0x3c
	pValidateAttr[TX_DATARATE] = ValidateDataRate;
    d4f6:	641a      	str	r2, [r3, #64]	; 0x40
	pValidateAttr[SUPPORTED_DR] = ValidateSupportedDr;
    d4f8:	490d      	ldr	r1, [pc, #52]	; (d530 <LORAREG_InitValidateAttrFnPtrsIN+0x48>)
    d4fa:	6459      	str	r1, [r3, #68]	; 0x44
	pValidateAttr[DATA_RANGE] = ValidateDataRangeT2;
    d4fc:	490d      	ldr	r1, [pc, #52]	; (d534 <LORAREG_InitValidateAttrFnPtrsIN+0x4c>)
    d4fe:	6499      	str	r1, [r3, #72]	; 0x48
	pValidateAttr[CHANNEL_ID] = ValidateChannelIdT2;
    d500:	490d      	ldr	r1, [pc, #52]	; (d538 <LORAREG_InitValidateAttrFnPtrsIN+0x50>)
    d502:	6559      	str	r1, [r3, #84]	; 0x54
	pValidateAttr[RX2_DATARATE] = ValidateDataRate;
    d504:	65da      	str	r2, [r3, #92]	; 0x5c
	pValidateAttr[RX1_DATARATE_OFFSET] = ValidateRx1DataRateOffset;
    d506:	4a0d      	ldr	r2, [pc, #52]	; (d53c <LORAREG_InitValidateAttrFnPtrsIN+0x54>)
    d508:	661a      	str	r2, [r3, #96]	; 0x60
	pValidateAttr[CHANNEL_MASK] = ValidateChannelMaskT2;
    d50a:	4a0d      	ldr	r2, [pc, #52]	; (d540 <LORAREG_InitValidateAttrFnPtrsIN+0x58>)
    d50c:	669a      	str	r2, [r3, #104]	; 0x68
	pValidateAttr[CHANNEL_MASK_CNTL] = ValidateChannelMaskCntlT2;
    d50e:	4a0d      	ldr	r2, [pc, #52]	; (d544 <LORAREG_InitValidateAttrFnPtrsIN+0x5c>)
    d510:	66da      	str	r2, [r3, #108]	; 0x6c
	pValidateAttr[TX_PWR] = ValidateTxPower;
    d512:	4a0d      	ldr	r2, [pc, #52]	; (d548 <LORAREG_InitValidateAttrFnPtrsIN+0x60>)
    d514:	675a      	str	r2, [r3, #116]	; 0x74
	pValidateAttr[CHMASK_CHCNTL] = ValidateChMaskChCntlT2;
    d516:	490d      	ldr	r1, [pc, #52]	; (d54c <LORAREG_InitValidateAttrFnPtrsIN+0x64>)
    d518:	22e0      	movs	r2, #224	; 0xe0
    d51a:	5099      	str	r1, [r3, r2]
}
    d51c:	4770      	bx	lr
    d51e:	46c0      	nop			; (mov r8, r8)
    d520:	20000e64 	.word	0x20000e64
    d524:	0000ae49 	.word	0x0000ae49
    d528:	0000ae25 	.word	0x0000ae25
    d52c:	00009c2d 	.word	0x00009c2d
    d530:	00009c45 	.word	0x00009c45
    d534:	0000c189 	.word	0x0000c189
    d538:	00009a39 	.word	0x00009a39
    d53c:	00009cd5 	.word	0x00009cd5
    d540:	00009b71 	.word	0x00009b71
    d544:	00009bc5 	.word	0x00009bc5
    d548:	00009b55 	.word	0x00009b55
    d54c:	00009bd9 	.word	0x00009bd9

0000d550 <LORAREG_InitValidateAttrFnPtrsJP>:
	pValidateAttr[RX_FREQUENCY] = ValidateFreqJP;
    d550:	4b0d      	ldr	r3, [pc, #52]	; (d588 <LORAREG_InitValidateAttrFnPtrsJP+0x38>)
    d552:	4a0e      	ldr	r2, [pc, #56]	; (d58c <LORAREG_InitValidateAttrFnPtrsJP+0x3c>)
    d554:	605a      	str	r2, [r3, #4]
	pValidateAttr[TX_FREQUENCY] = ValidateTxFreqT2;
    d556:	4a0e      	ldr	r2, [pc, #56]	; (d590 <LORAREG_InitValidateAttrFnPtrsJP+0x40>)
    d558:	609a      	str	r2, [r3, #8]
	pValidateAttr[RX_DATARATE] = ValidateDataRateRxT2;
    d55a:	4a0e      	ldr	r2, [pc, #56]	; (d594 <LORAREG_InitValidateAttrFnPtrsJP+0x44>)
    d55c:	63da      	str	r2, [r3, #60]	; 0x3c
	pValidateAttr[TX_DATARATE] = ValidateDataRateTxT2;
    d55e:	490e      	ldr	r1, [pc, #56]	; (d598 <LORAREG_InitValidateAttrFnPtrsJP+0x48>)
    d560:	6419      	str	r1, [r3, #64]	; 0x40
	pValidateAttr[SUPPORTED_DR] = ValidateSupportedDr;
    d562:	490e      	ldr	r1, [pc, #56]	; (d59c <LORAREG_InitValidateAttrFnPtrsJP+0x4c>)
    d564:	6459      	str	r1, [r3, #68]	; 0x44
	pValidateAttr[DATA_RANGE] = ValidateDataRangeT2;
    d566:	490e      	ldr	r1, [pc, #56]	; (d5a0 <LORAREG_InitValidateAttrFnPtrsJP+0x50>)
    d568:	6499      	str	r1, [r3, #72]	; 0x48
	pValidateAttr[CHANNEL_ID] = ValidateChannelIdT2;
    d56a:	490e      	ldr	r1, [pc, #56]	; (d5a4 <LORAREG_InitValidateAttrFnPtrsJP+0x54>)
    d56c:	6559      	str	r1, [r3, #84]	; 0x54
	pValidateAttr[RX2_DATARATE] = ValidateDataRateRxT2;
    d56e:	65da      	str	r2, [r3, #92]	; 0x5c
	pValidateAttr[RX1_DATARATE_OFFSET] = ValidateRx1DataRateOffset;
    d570:	4a0d      	ldr	r2, [pc, #52]	; (d5a8 <LORAREG_InitValidateAttrFnPtrsJP+0x58>)
    d572:	661a      	str	r2, [r3, #96]	; 0x60
	pValidateAttr[CHANNEL_MASK] = ValidateChannelMaskT2;
    d574:	4a0d      	ldr	r2, [pc, #52]	; (d5ac <LORAREG_InitValidateAttrFnPtrsJP+0x5c>)
    d576:	669a      	str	r2, [r3, #104]	; 0x68
	pValidateAttr[CHANNEL_MASK_CNTL] = ValidateChannelMaskCntlT2;
    d578:	4a0d      	ldr	r2, [pc, #52]	; (d5b0 <LORAREG_InitValidateAttrFnPtrsJP+0x60>)
    d57a:	66da      	str	r2, [r3, #108]	; 0x6c
	pValidateAttr[TX_PWR] = ValidateTxPower;
    d57c:	4a0d      	ldr	r2, [pc, #52]	; (d5b4 <LORAREG_InitValidateAttrFnPtrsJP+0x64>)
    d57e:	675a      	str	r2, [r3, #116]	; 0x74
	pValidateAttr[CHMASK_CHCNTL] = ValidateChMaskChCntlT2;
    d580:	490d      	ldr	r1, [pc, #52]	; (d5b8 <LORAREG_InitValidateAttrFnPtrsJP+0x68>)
    d582:	22e0      	movs	r2, #224	; 0xe0
    d584:	5099      	str	r1, [r3, r2]
}
    d586:	4770      	bx	lr
    d588:	20000e64 	.word	0x20000e64
    d58c:	0000ae79 	.word	0x0000ae79
    d590:	0000ae25 	.word	0x0000ae25
    d594:	000099f5 	.word	0x000099f5
    d598:	000099a5 	.word	0x000099a5
    d59c:	00009c45 	.word	0x00009c45
    d5a0:	0000c189 	.word	0x0000c189
    d5a4:	00009a39 	.word	0x00009a39
    d5a8:	00009cd5 	.word	0x00009cd5
    d5ac:	00009b71 	.word	0x00009b71
    d5b0:	00009bc5 	.word	0x00009bc5
    d5b4:	00009b55 	.word	0x00009b55
    d5b8:	00009bd9 	.word	0x00009bd9

0000d5bc <LORAREG_InitValidateAttrFnPtrsKR>:
	pValidateAttr[RX_FREQUENCY] = ValidateFreqKR;
    d5bc:	4b0d      	ldr	r3, [pc, #52]	; (d5f4 <LORAREG_InitValidateAttrFnPtrsKR+0x38>)
    d5be:	4a0e      	ldr	r2, [pc, #56]	; (d5f8 <LORAREG_InitValidateAttrFnPtrsKR+0x3c>)
    d5c0:	605a      	str	r2, [r3, #4]
	pValidateAttr[TX_FREQUENCY] = ValidateTxFreqT2;
    d5c2:	4a0e      	ldr	r2, [pc, #56]	; (d5fc <LORAREG_InitValidateAttrFnPtrsKR+0x40>)
    d5c4:	609a      	str	r2, [r3, #8]
	pValidateAttr[RX_DATARATE] = ValidateDataRate;
    d5c6:	4a0e      	ldr	r2, [pc, #56]	; (d600 <LORAREG_InitValidateAttrFnPtrsKR+0x44>)
    d5c8:	63da      	str	r2, [r3, #60]	; 0x3c
	pValidateAttr[TX_DATARATE] = ValidateDataRate;
    d5ca:	641a      	str	r2, [r3, #64]	; 0x40
	pValidateAttr[SUPPORTED_DR] = ValidateSupportedDr;
    d5cc:	490d      	ldr	r1, [pc, #52]	; (d604 <LORAREG_InitValidateAttrFnPtrsKR+0x48>)
    d5ce:	6459      	str	r1, [r3, #68]	; 0x44
	pValidateAttr[DATA_RANGE] = ValidateDataRangeT2;
    d5d0:	490d      	ldr	r1, [pc, #52]	; (d608 <LORAREG_InitValidateAttrFnPtrsKR+0x4c>)
    d5d2:	6499      	str	r1, [r3, #72]	; 0x48
	pValidateAttr[CHANNEL_ID] = ValidateChannelIdT2;
    d5d4:	490d      	ldr	r1, [pc, #52]	; (d60c <LORAREG_InitValidateAttrFnPtrsKR+0x50>)
    d5d6:	6559      	str	r1, [r3, #84]	; 0x54
	pValidateAttr[RX2_DATARATE] = ValidateDataRate;
    d5d8:	65da      	str	r2, [r3, #92]	; 0x5c
	pValidateAttr[RX1_DATARATE_OFFSET] = ValidateRx1DataRateOffset;
    d5da:	4a0d      	ldr	r2, [pc, #52]	; (d610 <LORAREG_InitValidateAttrFnPtrsKR+0x54>)
    d5dc:	661a      	str	r2, [r3, #96]	; 0x60
	pValidateAttr[CHANNEL_MASK] = ValidateChannelMaskT2;
    d5de:	4a0d      	ldr	r2, [pc, #52]	; (d614 <LORAREG_InitValidateAttrFnPtrsKR+0x58>)
    d5e0:	669a      	str	r2, [r3, #104]	; 0x68
	pValidateAttr[CHANNEL_MASK_CNTL] = ValidateChannelMaskCntlT2;
    d5e2:	4a0d      	ldr	r2, [pc, #52]	; (d618 <LORAREG_InitValidateAttrFnPtrsKR+0x5c>)
    d5e4:	66da      	str	r2, [r3, #108]	; 0x6c
	pValidateAttr[TX_PWR] = ValidateTxPower;
    d5e6:	4a0d      	ldr	r2, [pc, #52]	; (d61c <LORAREG_InitValidateAttrFnPtrsKR+0x60>)
    d5e8:	675a      	str	r2, [r3, #116]	; 0x74
	pValidateAttr[CHMASK_CHCNTL] = ValidateChMaskChCntlT2;
    d5ea:	490d      	ldr	r1, [pc, #52]	; (d620 <LORAREG_InitValidateAttrFnPtrsKR+0x64>)
    d5ec:	22e0      	movs	r2, #224	; 0xe0
    d5ee:	5099      	str	r1, [r3, r2]
}
    d5f0:	4770      	bx	lr
    d5f2:	46c0      	nop			; (mov r8, r8)
    d5f4:	20000e64 	.word	0x20000e64
    d5f8:	0000aea9 	.word	0x0000aea9
    d5fc:	0000ae25 	.word	0x0000ae25
    d600:	00009c2d 	.word	0x00009c2d
    d604:	00009c45 	.word	0x00009c45
    d608:	0000c189 	.word	0x0000c189
    d60c:	00009a39 	.word	0x00009a39
    d610:	00009cd5 	.word	0x00009cd5
    d614:	00009b71 	.word	0x00009b71
    d618:	00009bc5 	.word	0x00009bc5
    d61c:	00009b55 	.word	0x00009b55
    d620:	00009bd9 	.word	0x00009bd9

0000d624 <LORAREG_InitSetAttrFnPtrsNA>:
	pSetAttr[DATA_RANGE] = setDataRange;
    d624:	4b0b      	ldr	r3, [pc, #44]	; (d654 <LORAREG_InitSetAttrFnPtrsNA+0x30>)
    d626:	4a0c      	ldr	r2, [pc, #48]	; (d658 <LORAREG_InitSetAttrFnPtrsNA+0x34>)
    d628:	649a      	str	r2, [r3, #72]	; 0x48
	pSetAttr[CHANNEL_ID_STATUS] = setChannelIdStatus;
    d62a:	4a0c      	ldr	r2, [pc, #48]	; (d65c <LORAREG_InitSetAttrFnPtrsNA+0x38>)
    d62c:	659a      	str	r2, [r3, #88]	; 0x58
	pSetAttr[NEW_CHANNELS] = setNewChannelsT1;
    d62e:	4a0c      	ldr	r2, [pc, #48]	; (d660 <LORAREG_InitSetAttrFnPtrsNA+0x3c>)
    d630:	671a      	str	r2, [r3, #112]	; 0x70
	pSetAttr[REG_JOIN_SUCCESS] = setJoinSuccess;
    d632:	490c      	ldr	r1, [pc, #48]	; (d664 <LORAREG_InitSetAttrFnPtrsNA+0x40>)
    d634:	22e8      	movs	r2, #232	; 0xe8
    d636:	5099      	str	r1, [r3, r2]
	pSetAttr[REG_JOIN_ENABLE_ALL] = setEnableAllChs;
    d638:	490b      	ldr	r1, [pc, #44]	; (d668 <LORAREG_InitSetAttrFnPtrsNA+0x44>)
    d63a:	3204      	adds	r2, #4
    d63c:	5099      	str	r1, [r3, r2]
	pSetAttr[JOIN_DUTY_CYCLE_TIMER] = setJoinDutyCycleTimer;
    d63e:	490b      	ldr	r1, [pc, #44]	; (d66c <LORAREG_InitSetAttrFnPtrsNA+0x48>)
    d640:	3a6c      	subs	r2, #108	; 0x6c
    d642:	5099      	str	r1, [r3, r2]
	pSetAttr[JOIN_BACK_OFF_TIMER] = setJoinBackOffTimer;
    d644:	490a      	ldr	r1, [pc, #40]	; (d670 <LORAREG_InitSetAttrFnPtrsNA+0x4c>)
    d646:	3204      	adds	r2, #4
    d648:	5099      	str	r1, [r3, r2]
	pSetAttr[JOINBACKOFF_CNTL] = setJoinBackoffCntl;
    d64a:	490a      	ldr	r1, [pc, #40]	; (d674 <LORAREG_InitSetAttrFnPtrsNA+0x50>)
    d64c:	3260      	adds	r2, #96	; 0x60
    d64e:	5099      	str	r1, [r3, r2]
}
    d650:	4770      	bx	lr
    d652:	46c0      	nop			; (mov r8, r8)
    d654:	20000d70 	.word	0x20000d70
    d658:	0000c5cd 	.word	0x0000c5cd
    d65c:	0000c541 	.word	0x0000c541
    d660:	0000aef1 	.word	0x0000aef1
    d664:	0000a16d 	.word	0x0000a16d
    d668:	0000a0fd 	.word	0x0000a0fd
    d66c:	0000b535 	.word	0x0000b535
    d670:	0000b4c1 	.word	0x0000b4c1
    d674:	0000b409 	.word	0x0000b409

0000d678 <LORAREG_InitSetAttrFnPtrsEU>:
	pSetAttr[DATA_RANGE] = setDataRangeT2;
    d678:	4b0e      	ldr	r3, [pc, #56]	; (d6b4 <LORAREG_InitSetAttrFnPtrsEU+0x3c>)
    d67a:	4a0f      	ldr	r2, [pc, #60]	; (d6b8 <LORAREG_InitSetAttrFnPtrsEU+0x40>)
    d67c:	649a      	str	r2, [r3, #72]	; 0x48
	pSetAttr[CHANNEL_ID_STATUS] = setChannelIdStatusT2;
    d67e:	4a0f      	ldr	r2, [pc, #60]	; (d6bc <LORAREG_InitSetAttrFnPtrsEU+0x44>)
    d680:	659a      	str	r2, [r3, #88]	; 0x58
	pSetAttr[DUTY_CYCLE] = setDutyCycle;
    d682:	4a0f      	ldr	r2, [pc, #60]	; (d6c0 <LORAREG_InitSetAttrFnPtrsEU+0x48>)
    d684:	679a      	str	r2, [r3, #120]	; 0x78
	pSetAttr[DUTY_CYCLE_TIMER] = setDutyCycleTimer;
    d686:	4a0f      	ldr	r2, [pc, #60]	; (d6c4 <LORAREG_InitSetAttrFnPtrsEU+0x4c>)
    d688:	67da      	str	r2, [r3, #124]	; 0x7c
	pSetAttr[FREQUENCY] = setFrequency;
    d68a:	4a0f      	ldr	r2, [pc, #60]	; (d6c8 <LORAREG_InitSetAttrFnPtrsEU+0x50>)
    d68c:	601a      	str	r2, [r3, #0]
	pSetAttr[NEW_CHANNELS] = setNewChannel;
    d68e:	4a0f      	ldr	r2, [pc, #60]	; (d6cc <LORAREG_InitSetAttrFnPtrsEU+0x54>)
    d690:	671a      	str	r2, [r3, #112]	; 0x70
	pSetAttr[JOIN_DUTY_CYCLE_TIMER]= setJoinDutyCycleTimer;
    d692:	490f      	ldr	r1, [pc, #60]	; (d6d0 <LORAREG_InitSetAttrFnPtrsEU+0x58>)
    d694:	2280      	movs	r2, #128	; 0x80
    d696:	5099      	str	r1, [r3, r2]
	pSetAttr[JOIN_BACK_OFF_TIMER] = setJoinBackOffTimer;
    d698:	490e      	ldr	r1, [pc, #56]	; (d6d4 <LORAREG_InitSetAttrFnPtrsEU+0x5c>)
    d69a:	3204      	adds	r2, #4
    d69c:	5099      	str	r1, [r3, r2]
	pSetAttr[DL_FREQUENCY] = setDlFrequency;
    d69e:	490e      	ldr	r1, [pc, #56]	; (d6d8 <LORAREG_InitSetAttrFnPtrsEU+0x60>)
    d6a0:	324c      	adds	r2, #76	; 0x4c
    d6a2:	5099      	str	r1, [r3, r2]
	pSetAttr[JOINBACKOFF_CNTL] = setJoinBackoffCntl;
    d6a4:	490d      	ldr	r1, [pc, #52]	; (d6dc <LORAREG_InitSetAttrFnPtrsEU+0x64>)
    d6a6:	3214      	adds	r2, #20
    d6a8:	5099      	str	r1, [r3, r2]
	pSetAttr[CHLIST_DEFAULTS] = setChlistDefaultState;
    d6aa:	490d      	ldr	r1, [pc, #52]	; (d6e0 <LORAREG_InitSetAttrFnPtrsEU+0x68>)
    d6ac:	320c      	adds	r2, #12
    d6ae:	5099      	str	r1, [r3, r2]
}
    d6b0:	4770      	bx	lr
    d6b2:	46c0      	nop			; (mov r8, r8)
    d6b4:	20000d70 	.word	0x20000d70
    d6b8:	0000c1b5 	.word	0x0000c1b5
    d6bc:	0000a3a9 	.word	0x0000a3a9
    d6c0:	0000b151 	.word	0x0000b151
    d6c4:	0000b7c1 	.word	0x0000b7c1
    d6c8:	0000b02d 	.word	0x0000b02d
    d6cc:	0000d939 	.word	0x0000d939
    d6d0:	0000b535 	.word	0x0000b535
    d6d4:	0000b4c1 	.word	0x0000b4c1
    d6d8:	0000af89 	.word	0x0000af89
    d6dc:	0000b409 	.word	0x0000b409
    d6e0:	00009e5d 	.word	0x00009e5d

0000d6e4 <LORAREG_InitSetAttrFnPtrsAS>:
	pSetAttr[DATA_RANGE] = setDataRangeT2;
    d6e4:	4b0f      	ldr	r3, [pc, #60]	; (d724 <LORAREG_InitSetAttrFnPtrsAS+0x40>)
    d6e6:	4a10      	ldr	r2, [pc, #64]	; (d728 <LORAREG_InitSetAttrFnPtrsAS+0x44>)
    d6e8:	649a      	str	r2, [r3, #72]	; 0x48
	pSetAttr[CHANNEL_ID_STATUS] = setChannelIdStatusT3;
    d6ea:	4a10      	ldr	r2, [pc, #64]	; (d72c <LORAREG_InitSetAttrFnPtrsAS+0x48>)
    d6ec:	659a      	str	r2, [r3, #88]	; 0x58
	pSetAttr[FREQUENCY] = setFrequency;
    d6ee:	4a10      	ldr	r2, [pc, #64]	; (d730 <LORAREG_InitSetAttrFnPtrsAS+0x4c>)
    d6f0:	601a      	str	r2, [r3, #0]
	pSetAttr[DL_FREQUENCY] = setDlFrequency;
    d6f2:	4910      	ldr	r1, [pc, #64]	; (d734 <LORAREG_InitSetAttrFnPtrsAS+0x50>)
    d6f4:	22d0      	movs	r2, #208	; 0xd0
    d6f6:	5099      	str	r1, [r3, r2]
    pSetAttr[NEW_CHANNELS] = setNewChannel;
    d6f8:	4a0f      	ldr	r2, [pc, #60]	; (d738 <LORAREG_InitSetAttrFnPtrsAS+0x54>)
    d6fa:	671a      	str	r2, [r3, #112]	; 0x70
	pSetAttr[JOIN_DUTY_CYCLE_TIMER] = setJoinDutyCycleTimer;
    d6fc:	490f      	ldr	r1, [pc, #60]	; (d73c <LORAREG_InitSetAttrFnPtrsAS+0x58>)
    d6fe:	2280      	movs	r2, #128	; 0x80
    d700:	5099      	str	r1, [r3, r2]
	pSetAttr[JOIN_BACK_OFF_TIMER] = setJoinBackOffTimer;
    d702:	490f      	ldr	r1, [pc, #60]	; (d740 <LORAREG_InitSetAttrFnPtrsAS+0x5c>)
    d704:	3204      	adds	r2, #4
    d706:	5099      	str	r1, [r3, r2]
	pSetAttr[TX_PARAMS] = setTxParams;
    d708:	490e      	ldr	r1, [pc, #56]	; (d744 <LORAREG_InitSetAttrFnPtrsAS+0x60>)
    d70a:	3250      	adds	r2, #80	; 0x50
    d70c:	5099      	str	r1, [r3, r2]
	pSetAttr[DUTY_CYCLE] = setDutyCycle;
    d70e:	4a0e      	ldr	r2, [pc, #56]	; (d748 <LORAREG_InitSetAttrFnPtrsAS+0x64>)
    d710:	679a      	str	r2, [r3, #120]	; 0x78
	pSetAttr[DUTY_CYCLE_TIMER] = setDutyCycleTimer;
    d712:	4a0e      	ldr	r2, [pc, #56]	; (d74c <LORAREG_InitSetAttrFnPtrsAS+0x68>)
    d714:	67da      	str	r2, [r3, #124]	; 0x7c
	pSetAttr[JOINBACKOFF_CNTL] = setJoinBackoffCntl;
    d716:	490e      	ldr	r1, [pc, #56]	; (d750 <LORAREG_InitSetAttrFnPtrsAS+0x6c>)
    d718:	22e4      	movs	r2, #228	; 0xe4
    d71a:	5099      	str	r1, [r3, r2]
	pSetAttr[CHLIST_DEFAULTS] = setChlistDefaultState;
    d71c:	490d      	ldr	r1, [pc, #52]	; (d754 <LORAREG_InitSetAttrFnPtrsAS+0x70>)
    d71e:	320c      	adds	r2, #12
    d720:	5099      	str	r1, [r3, r2]
}
    d722:	4770      	bx	lr
    d724:	20000d70 	.word	0x20000d70
    d728:	0000c1b5 	.word	0x0000c1b5
    d72c:	0000a521 	.word	0x0000a521
    d730:	0000b02d 	.word	0x0000b02d
    d734:	0000af89 	.word	0x0000af89
    d738:	0000d939 	.word	0x0000d939
    d73c:	0000b535 	.word	0x0000b535
    d740:	0000b4c1 	.word	0x0000b4c1
    d744:	00009e09 	.word	0x00009e09
    d748:	0000b151 	.word	0x0000b151
    d74c:	0000b7c1 	.word	0x0000b7c1
    d750:	0000b409 	.word	0x0000b409
    d754:	00009e5d 	.word	0x00009e5d

0000d758 <LORAREG_InitSetAttrFnPtrsAU>:
	pSetAttr[DATA_RANGE] = setDataRange;
    d758:	4b0b      	ldr	r3, [pc, #44]	; (d788 <LORAREG_InitSetAttrFnPtrsAU+0x30>)
    d75a:	4a0c      	ldr	r2, [pc, #48]	; (d78c <LORAREG_InitSetAttrFnPtrsAU+0x34>)
    d75c:	649a      	str	r2, [r3, #72]	; 0x48
	pSetAttr[CHANNEL_ID_STATUS] = setChannelIdStatus;
    d75e:	4a0c      	ldr	r2, [pc, #48]	; (d790 <LORAREG_InitSetAttrFnPtrsAU+0x38>)
    d760:	659a      	str	r2, [r3, #88]	; 0x58
	pSetAttr[NEW_CHANNELS] = setNewChannelsT1;
    d762:	4a0c      	ldr	r2, [pc, #48]	; (d794 <LORAREG_InitSetAttrFnPtrsAU+0x3c>)
    d764:	671a      	str	r2, [r3, #112]	; 0x70
	pSetAttr[REG_JOIN_SUCCESS] = setJoinSuccess;
    d766:	490c      	ldr	r1, [pc, #48]	; (d798 <LORAREG_InitSetAttrFnPtrsAU+0x40>)
    d768:	22e8      	movs	r2, #232	; 0xe8
    d76a:	5099      	str	r1, [r3, r2]
	pSetAttr[REG_JOIN_ENABLE_ALL] = setEnableAllChs;
    d76c:	490b      	ldr	r1, [pc, #44]	; (d79c <LORAREG_InitSetAttrFnPtrsAU+0x44>)
    d76e:	3204      	adds	r2, #4
    d770:	5099      	str	r1, [r3, r2]
	pSetAttr[JOIN_DUTY_CYCLE_TIMER]= setJoinDutyCycleTimer;
    d772:	490b      	ldr	r1, [pc, #44]	; (d7a0 <LORAREG_InitSetAttrFnPtrsAU+0x48>)
    d774:	3a6c      	subs	r2, #108	; 0x6c
    d776:	5099      	str	r1, [r3, r2]
	pSetAttr[JOIN_BACK_OFF_TIMER] = setJoinBackOffTimer;
    d778:	490a      	ldr	r1, [pc, #40]	; (d7a4 <LORAREG_InitSetAttrFnPtrsAU+0x4c>)
    d77a:	3204      	adds	r2, #4
    d77c:	5099      	str	r1, [r3, r2]
	pSetAttr[JOINBACKOFF_CNTL] = setJoinBackoffCntl;
    d77e:	490a      	ldr	r1, [pc, #40]	; (d7a8 <LORAREG_InitSetAttrFnPtrsAU+0x50>)
    d780:	3260      	adds	r2, #96	; 0x60
    d782:	5099      	str	r1, [r3, r2]
}
    d784:	4770      	bx	lr
    d786:	46c0      	nop			; (mov r8, r8)
    d788:	20000d70 	.word	0x20000d70
    d78c:	0000c5cd 	.word	0x0000c5cd
    d790:	0000c541 	.word	0x0000c541
    d794:	0000aef1 	.word	0x0000aef1
    d798:	0000a16d 	.word	0x0000a16d
    d79c:	0000a0fd 	.word	0x0000a0fd
    d7a0:	0000b535 	.word	0x0000b535
    d7a4:	0000b4c1 	.word	0x0000b4c1
    d7a8:	0000b409 	.word	0x0000b409

0000d7ac <LORAREG_InitSetAttrFnPtrsIN>:
	pSetAttr[DATA_RANGE] = setDataRangeT2;
    d7ac:	4b0d      	ldr	r3, [pc, #52]	; (d7e4 <LORAREG_InitSetAttrFnPtrsIN+0x38>)
    d7ae:	4a0e      	ldr	r2, [pc, #56]	; (d7e8 <LORAREG_InitSetAttrFnPtrsIN+0x3c>)
    d7b0:	649a      	str	r2, [r3, #72]	; 0x48
	pSetAttr[CHANNEL_ID_STATUS] = setChannelIdStatusT2;
    d7b2:	4a0e      	ldr	r2, [pc, #56]	; (d7ec <LORAREG_InitSetAttrFnPtrsIN+0x40>)
    d7b4:	659a      	str	r2, [r3, #88]	; 0x58
	pSetAttr[FREQUENCY] = setFrequency;
    d7b6:	4a0e      	ldr	r2, [pc, #56]	; (d7f0 <LORAREG_InitSetAttrFnPtrsIN+0x44>)
    d7b8:	601a      	str	r2, [r3, #0]
	pSetAttr[NEW_CHANNELS] = setNewChannel;
    d7ba:	4a0e      	ldr	r2, [pc, #56]	; (d7f4 <LORAREG_InitSetAttrFnPtrsIN+0x48>)
    d7bc:	671a      	str	r2, [r3, #112]	; 0x70
	pSetAttr[JOIN_DUTY_CYCLE_TIMER]= setJoinDutyCycleTimer;
    d7be:	490e      	ldr	r1, [pc, #56]	; (d7f8 <LORAREG_InitSetAttrFnPtrsIN+0x4c>)
    d7c0:	2280      	movs	r2, #128	; 0x80
    d7c2:	5099      	str	r1, [r3, r2]
	pSetAttr[JOIN_BACK_OFF_TIMER] = setJoinBackOffTimer;
    d7c4:	490d      	ldr	r1, [pc, #52]	; (d7fc <LORAREG_InitSetAttrFnPtrsIN+0x50>)
    d7c6:	3204      	adds	r2, #4
    d7c8:	5099      	str	r1, [r3, r2]
	pSetAttr[DL_FREQUENCY] = setDlFrequency;
    d7ca:	490d      	ldr	r1, [pc, #52]	; (d800 <LORAREG_InitSetAttrFnPtrsIN+0x54>)
    d7cc:	324c      	adds	r2, #76	; 0x4c
    d7ce:	5099      	str	r1, [r3, r2]
	pSetAttr[TX_PARAMS] = setTxParams;
    d7d0:	490c      	ldr	r1, [pc, #48]	; (d804 <LORAREG_InitSetAttrFnPtrsIN+0x58>)
    d7d2:	3204      	adds	r2, #4
    d7d4:	5099      	str	r1, [r3, r2]
	pSetAttr[JOINBACKOFF_CNTL] = setJoinBackoffCntl;
    d7d6:	490c      	ldr	r1, [pc, #48]	; (d808 <LORAREG_InitSetAttrFnPtrsIN+0x5c>)
    d7d8:	3210      	adds	r2, #16
    d7da:	5099      	str	r1, [r3, r2]
	pSetAttr[CHLIST_DEFAULTS] = setChlistDefaultState;
    d7dc:	490b      	ldr	r1, [pc, #44]	; (d80c <LORAREG_InitSetAttrFnPtrsIN+0x60>)
    d7de:	320c      	adds	r2, #12
    d7e0:	5099      	str	r1, [r3, r2]
}
    d7e2:	4770      	bx	lr
    d7e4:	20000d70 	.word	0x20000d70
    d7e8:	0000c1b5 	.word	0x0000c1b5
    d7ec:	0000a3a9 	.word	0x0000a3a9
    d7f0:	0000b02d 	.word	0x0000b02d
    d7f4:	0000d939 	.word	0x0000d939
    d7f8:	0000b535 	.word	0x0000b535
    d7fc:	0000b4c1 	.word	0x0000b4c1
    d800:	0000af89 	.word	0x0000af89
    d804:	00009e09 	.word	0x00009e09
    d808:	0000b409 	.word	0x0000b409
    d80c:	00009e5d 	.word	0x00009e5d

0000d810 <LORAREG_InitSetAttrFnPtrsJP>:
	pSetAttr[DATA_RANGE] = setDataRangeT2;
    d810:	4b11      	ldr	r3, [pc, #68]	; (d858 <LORAREG_InitSetAttrFnPtrsJP+0x48>)
    d812:	4a12      	ldr	r2, [pc, #72]	; (d85c <LORAREG_InitSetAttrFnPtrsJP+0x4c>)
    d814:	649a      	str	r2, [r3, #72]	; 0x48
	pSetAttr[CHANNEL_ID_STATUS] = setChannelIdStatusT3;
    d816:	4a12      	ldr	r2, [pc, #72]	; (d860 <LORAREG_InitSetAttrFnPtrsJP+0x50>)
    d818:	659a      	str	r2, [r3, #88]	; 0x58
	pSetAttr[LBT_TIMER] = setLBTTimer;
    d81a:	4912      	ldr	r1, [pc, #72]	; (d864 <LORAREG_InitSetAttrFnPtrsJP+0x54>)
    d81c:	2288      	movs	r2, #136	; 0x88
    d81e:	5099      	str	r1, [r3, r2]
	pSetAttr[FREQUENCY] = setFrequency;
    d820:	4a11      	ldr	r2, [pc, #68]	; (d868 <LORAREG_InitSetAttrFnPtrsJP+0x58>)
    d822:	601a      	str	r2, [r3, #0]
	pSetAttr[DL_FREQUENCY] = setDlFrequency;
    d824:	4911      	ldr	r1, [pc, #68]	; (d86c <LORAREG_InitSetAttrFnPtrsJP+0x5c>)
    d826:	22d0      	movs	r2, #208	; 0xd0
    d828:	5099      	str	r1, [r3, r2]
	pSetAttr[NEW_CHANNELS] = setNewChannel;
    d82a:	4a11      	ldr	r2, [pc, #68]	; (d870 <LORAREG_InitSetAttrFnPtrsJP+0x60>)
    d82c:	671a      	str	r2, [r3, #112]	; 0x70
	pSetAttr[JOIN_DUTY_CYCLE_TIMER]= setJoinDutyCycleTimer;
    d82e:	4911      	ldr	r1, [pc, #68]	; (d874 <LORAREG_InitSetAttrFnPtrsJP+0x64>)
    d830:	2280      	movs	r2, #128	; 0x80
    d832:	5099      	str	r1, [r3, r2]
	pSetAttr[JOIN_BACK_OFF_TIMER] = setJoinBackOffTimer;
    d834:	4910      	ldr	r1, [pc, #64]	; (d878 <LORAREG_InitSetAttrFnPtrsJP+0x68>)
    d836:	3204      	adds	r2, #4
    d838:	5099      	str	r1, [r3, r2]
	pSetAttr[TX_PARAMS] = setTxParams;
    d83a:	4910      	ldr	r1, [pc, #64]	; (d87c <LORAREG_InitSetAttrFnPtrsJP+0x6c>)
    d83c:	3250      	adds	r2, #80	; 0x50
    d83e:	5099      	str	r1, [r3, r2]
	pSetAttr[DUTY_CYCLE] = setDutyCycle;
    d840:	4a0f      	ldr	r2, [pc, #60]	; (d880 <LORAREG_InitSetAttrFnPtrsJP+0x70>)
    d842:	679a      	str	r2, [r3, #120]	; 0x78
	pSetAttr[DUTY_CYCLE_TIMER] = setDutyCycleTimer;
    d844:	4a0f      	ldr	r2, [pc, #60]	; (d884 <LORAREG_InitSetAttrFnPtrsJP+0x74>)
    d846:	67da      	str	r2, [r3, #124]	; 0x7c
	pSetAttr[JOINBACKOFF_CNTL] = setJoinBackoffCntl;
    d848:	490f      	ldr	r1, [pc, #60]	; (d888 <LORAREG_InitSetAttrFnPtrsJP+0x78>)
    d84a:	22e4      	movs	r2, #228	; 0xe4
    d84c:	5099      	str	r1, [r3, r2]
	pSetAttr[CHLIST_DEFAULTS] = setChlistDefaultState;
    d84e:	490f      	ldr	r1, [pc, #60]	; (d88c <LORAREG_InitSetAttrFnPtrsJP+0x7c>)
    d850:	320c      	adds	r2, #12
    d852:	5099      	str	r1, [r3, r2]
}
    d854:	4770      	bx	lr
    d856:	46c0      	nop			; (mov r8, r8)
    d858:	20000d70 	.word	0x20000d70
    d85c:	0000c1b5 	.word	0x0000c1b5
    d860:	0000a521 	.word	0x0000a521
    d864:	0000bd35 	.word	0x0000bd35
    d868:	0000b02d 	.word	0x0000b02d
    d86c:	0000af89 	.word	0x0000af89
    d870:	0000d939 	.word	0x0000d939
    d874:	0000b535 	.word	0x0000b535
    d878:	0000b4c1 	.word	0x0000b4c1
    d87c:	00009e09 	.word	0x00009e09
    d880:	0000b151 	.word	0x0000b151
    d884:	0000b7c1 	.word	0x0000b7c1
    d888:	0000b409 	.word	0x0000b409
    d88c:	00009e5d 	.word	0x00009e5d

0000d890 <LORAREG_InitSetAttrFnPtrsKR>:
	pSetAttr[DATA_RANGE] = setDataRangeT2;
    d890:	4b0f      	ldr	r3, [pc, #60]	; (d8d0 <LORAREG_InitSetAttrFnPtrsKR+0x40>)
    d892:	4a10      	ldr	r2, [pc, #64]	; (d8d4 <LORAREG_InitSetAttrFnPtrsKR+0x44>)
    d894:	649a      	str	r2, [r3, #72]	; 0x48
	pSetAttr[CHANNEL_ID_STATUS] = setChannelIdStatusT3;
    d896:	4a10      	ldr	r2, [pc, #64]	; (d8d8 <LORAREG_InitSetAttrFnPtrsKR+0x48>)
    d898:	659a      	str	r2, [r3, #88]	; 0x58
	pSetAttr[LBT_TIMER] = setLBTTimer;
    d89a:	4910      	ldr	r1, [pc, #64]	; (d8dc <LORAREG_InitSetAttrFnPtrsKR+0x4c>)
    d89c:	2288      	movs	r2, #136	; 0x88
    d89e:	5099      	str	r1, [r3, r2]
	pSetAttr[FREQUENCY] = setFrequency;
    d8a0:	4a0f      	ldr	r2, [pc, #60]	; (d8e0 <LORAREG_InitSetAttrFnPtrsKR+0x50>)
    d8a2:	601a      	str	r2, [r3, #0]
	pSetAttr[DL_FREQUENCY] = setDlFrequency;
    d8a4:	490f      	ldr	r1, [pc, #60]	; (d8e4 <LORAREG_InitSetAttrFnPtrsKR+0x54>)
    d8a6:	22d0      	movs	r2, #208	; 0xd0
    d8a8:	5099      	str	r1, [r3, r2]
	pSetAttr[NEW_CHANNELS] = setNewChannel;
    d8aa:	4a0f      	ldr	r2, [pc, #60]	; (d8e8 <LORAREG_InitSetAttrFnPtrsKR+0x58>)
    d8ac:	671a      	str	r2, [r3, #112]	; 0x70
	pSetAttr[JOIN_DUTY_CYCLE_TIMER]= setJoinDutyCycleTimer;
    d8ae:	490f      	ldr	r1, [pc, #60]	; (d8ec <LORAREG_InitSetAttrFnPtrsKR+0x5c>)
    d8b0:	2280      	movs	r2, #128	; 0x80
    d8b2:	5099      	str	r1, [r3, r2]
	pSetAttr[JOIN_BACK_OFF_TIMER] = setJoinBackOffTimer;
    d8b4:	490e      	ldr	r1, [pc, #56]	; (d8f0 <LORAREG_InitSetAttrFnPtrsKR+0x60>)
    d8b6:	3204      	adds	r2, #4
    d8b8:	5099      	str	r1, [r3, r2]
	pSetAttr[TX_PARAMS] = setTxParams;
    d8ba:	490e      	ldr	r1, [pc, #56]	; (d8f4 <LORAREG_InitSetAttrFnPtrsKR+0x64>)
    d8bc:	3250      	adds	r2, #80	; 0x50
    d8be:	5099      	str	r1, [r3, r2]
	pSetAttr[JOINBACKOFF_CNTL] = setJoinBackoffCntl;
    d8c0:	490d      	ldr	r1, [pc, #52]	; (d8f8 <LORAREG_InitSetAttrFnPtrsKR+0x68>)
    d8c2:	3210      	adds	r2, #16
    d8c4:	5099      	str	r1, [r3, r2]
	pSetAttr[CHLIST_DEFAULTS] = setChlistDefaultState;
    d8c6:	490d      	ldr	r1, [pc, #52]	; (d8fc <LORAREG_InitSetAttrFnPtrsKR+0x6c>)
    d8c8:	320c      	adds	r2, #12
    d8ca:	5099      	str	r1, [r3, r2]
}
    d8cc:	4770      	bx	lr
    d8ce:	46c0      	nop			; (mov r8, r8)
    d8d0:	20000d70 	.word	0x20000d70
    d8d4:	0000c1b5 	.word	0x0000c1b5
    d8d8:	0000a521 	.word	0x0000a521
    d8dc:	0000bd35 	.word	0x0000bd35
    d8e0:	0000b02d 	.word	0x0000b02d
    d8e4:	0000af89 	.word	0x0000af89
    d8e8:	0000d939 	.word	0x0000d939
    d8ec:	0000b535 	.word	0x0000b535
    d8f0:	0000b4c1 	.word	0x0000b4c1
    d8f4:	00009e09 	.word	0x00009e09
    d8f8:	0000b409 	.word	0x0000b409
    d8fc:	00009e5d 	.word	0x00009e5d

0000d900 <LORAREG_GetAttr>:
{
    d900:	b510      	push	{r4, lr}
	StackRetStatus_t result = LORAWAN_INVALID_PARAMETER;
    d902:	230a      	movs	r3, #10
	if(attrType < REG_NUM_ATTRIBUTES)
    d904:	283c      	cmp	r0, #60	; 0x3c
    d906:	d901      	bls.n	d90c <LORAREG_GetAttr+0xc>
}
    d908:	0018      	movs	r0, r3
    d90a:	bd10      	pop	{r4, pc}
	    result = pGetAttr[attrType](attrType, attrInput,attrOutput);	
    d90c:	0084      	lsls	r4, r0, #2
    d90e:	4b02      	ldr	r3, [pc, #8]	; (d918 <LORAREG_GetAttr+0x18>)
    d910:	58e3      	ldr	r3, [r4, r3]
    d912:	4798      	blx	r3
    d914:	0003      	movs	r3, r0
    d916:	e7f7      	b.n	d908 <LORAREG_GetAttr+0x8>
    d918:	20000c7c 	.word	0x20000c7c

0000d91c <LORAREG_ValidateAttr>:
{
    d91c:	b510      	push	{r4, lr}
	StackRetStatus_t result = LORAWAN_INVALID_PARAMETER;
    d91e:	230a      	movs	r3, #10
	if(attrType < REG_NUM_ATTRIBUTES)
    d920:	283c      	cmp	r0, #60	; 0x3c
    d922:	d901      	bls.n	d928 <LORAREG_ValidateAttr+0xc>
}
    d924:	0018      	movs	r0, r3
    d926:	bd10      	pop	{r4, pc}
	    result = pValidateAttr[attrType](attrType, attrInput);		
    d928:	0082      	lsls	r2, r0, #2
    d92a:	4b02      	ldr	r3, [pc, #8]	; (d934 <LORAREG_ValidateAttr+0x18>)
    d92c:	58d3      	ldr	r3, [r2, r3]
    d92e:	4798      	blx	r3
    d930:	0003      	movs	r3, r0
    d932:	e7f7      	b.n	d924 <LORAREG_ValidateAttr+0x8>
    d934:	20000e64 	.word	0x20000e64

0000d938 <setNewChannel>:
{
    d938:	b5f0      	push	{r4, r5, r6, r7, lr}
    d93a:	46d6      	mov	lr, sl
    d93c:	464f      	mov	r7, r9
    d93e:	b580      	push	{r7, lr}
    d940:	b085      	sub	sp, #20
	if(((ISM_ASBAND) & (1 << RegParams.band)) != 0 || ((ISM_JPN923) == RegParams.band))
    d942:	232e      	movs	r3, #46	; 0x2e
    d944:	4a30      	ldr	r2, [pc, #192]	; (da08 <setNewChannel+0xd0>)
    d946:	5cd2      	ldrb	r2, [r2, r3]
    d948:	4b30      	ldr	r3, [pc, #192]	; (da0c <setNewChannel+0xd4>)
    d94a:	4113      	asrs	r3, r2
    d94c:	07db      	lsls	r3, r3, #31
    d94e:	d407      	bmi.n	d960 <setNewChannel+0x28>
    d950:	2a05      	cmp	r2, #5
    d952:	d020      	beq.n	d996 <setNewChannel+0x5e>
	else if( ISM_KR920 == RegParams.band)
    d954:	2a04      	cmp	r2, #4
    d956:	d020      	beq.n	d99a <setNewChannel+0x62>
	else if( ISM_IND865 == RegParams.band)
    d958:	2a0f      	cmp	r2, #15
    d95a:	d020      	beq.n	d99e <setNewChannel+0x66>
		pUpdateChidStatus = UpdateChannelIdStatusT2;
    d95c:	4e2c      	ldr	r6, [pc, #176]	; (da10 <setNewChannel+0xd8>)
    d95e:	e000      	b.n	d962 <setNewChannel+0x2a>
		pUpdateChidStatus = UpdateChannelIdStatusT3;
    d960:	4e2c      	ldr	r6, [pc, #176]	; (da14 <setNewChannel+0xdc>)
	memcpy(&newCh, attrInput,sizeof(UpdateNewCh_t));
    d962:	ac03      	add	r4, sp, #12
    d964:	2204      	movs	r2, #4
    d966:	0020      	movs	r0, r4
    d968:	4b2b      	ldr	r3, [pc, #172]	; (da18 <setNewChannel+0xe0>)
    d96a:	4798      	blx	r3
	valchMaskCntl.chnlMask = newCh.channelMask;
    d96c:	8823      	ldrh	r3, [r4, #0]
    d96e:	aa02      	add	r2, sp, #8
    d970:	8053      	strh	r3, [r2, #2]
	valchMaskCntl.chnlMaskCntl = newCh.channelMaskCntl;
    d972:	78a4      	ldrb	r4, [r4, #2]
    d974:	7014      	strb	r4, [r2, #0]
	if(LORAREG_ValidateAttr(CHMASK_CHCNTL,&valchMaskCntl) != LORAWAN_SUCCESS)
    d976:	0011      	movs	r1, r2
    d978:	2038      	movs	r0, #56	; 0x38
    d97a:	4b28      	ldr	r3, [pc, #160]	; (da1c <setNewChannel+0xe4>)
    d97c:	4798      	blx	r3
    d97e:	0003      	movs	r3, r0
    d980:	9001      	str	r0, [sp, #4]
    d982:	2808      	cmp	r0, #8
    d984:	d00d      	beq.n	d9a2 <setNewChannel+0x6a>
		result = LORAWAN_INVALID_PARAMETER;
    d986:	230a      	movs	r3, #10
    d988:	9301      	str	r3, [sp, #4]
}
    d98a:	9801      	ldr	r0, [sp, #4]
    d98c:	b005      	add	sp, #20
    d98e:	bc0c      	pop	{r2, r3}
    d990:	4691      	mov	r9, r2
    d992:	469a      	mov	sl, r3
    d994:	bdf0      	pop	{r4, r5, r6, r7, pc}
		pUpdateChidStatus = UpdateChannelIdStatusT3;
    d996:	4e1f      	ldr	r6, [pc, #124]	; (da14 <setNewChannel+0xdc>)
    d998:	e7e3      	b.n	d962 <setNewChannel+0x2a>
		pUpdateChidStatus = UpdateChannelIdStatusT4;
    d99a:	4e21      	ldr	r6, [pc, #132]	; (da20 <setNewChannel+0xe8>)
    d99c:	e7e1      	b.n	d962 <setNewChannel+0x2a>
		pUpdateChidStatus = UpdateChannelIdStatus;
    d99e:	4e21      	ldr	r6, [pc, #132]	; (da24 <setNewChannel+0xec>)
    d9a0:	e7df      	b.n	d962 <setNewChannel+0x2a>
		if(newCh.channelMaskCntl == 6)
    d9a2:	2c06      	cmp	r4, #6
    d9a4:	d00b      	beq.n	d9be <setNewChannel+0x86>
		else if(newCh.channelMaskCntl == 0)
    d9a6:	2c00      	cmp	r4, #0
    d9a8:	d1ef      	bne.n	d98a <setNewChannel+0x52>
			for(i = 0; i < RegParams.maxChannels; i++)
    d9aa:	232a      	movs	r3, #42	; 0x2a
    d9ac:	4a16      	ldr	r2, [pc, #88]	; (da08 <setNewChannel+0xd0>)
    d9ae:	56d3      	ldrsb	r3, [r2, r3]
    d9b0:	2b00      	cmp	r3, #0
    d9b2:	ddea      	ble.n	d98a <setNewChannel+0x52>
				if((newCh.channelMask & BIT0) == BIT0)
    d9b4:	af03      	add	r7, sp, #12
    d9b6:	2301      	movs	r3, #1
    d9b8:	4699      	mov	r9, r3
			for(i = 0; i < RegParams.maxChannels; i++)
    d9ba:	4692      	mov	sl, r2
    d9bc:	e01c      	b.n	d9f8 <setNewChannel+0xc0>
			for(i = 0; i < RegParams.maxChannels; i++)
    d9be:	3322      	adds	r3, #34	; 0x22
    d9c0:	4a11      	ldr	r2, [pc, #68]	; (da08 <setNewChannel+0xd0>)
    d9c2:	56d3      	ldrsb	r3, [r2, r3]
    d9c4:	2b00      	cmp	r3, #0
    d9c6:	dde0      	ble.n	d98a <setNewChannel+0x52>
    d9c8:	2400      	movs	r4, #0
    d9ca:	0017      	movs	r7, r2
    d9cc:	252a      	movs	r5, #42	; 0x2a
				pUpdateChidStatus(i,ENABLED);
    d9ce:	2101      	movs	r1, #1
    d9d0:	0020      	movs	r0, r4
    d9d2:	47b0      	blx	r6
			for(i = 0; i < RegParams.maxChannels; i++)
    d9d4:	3401      	adds	r4, #1
    d9d6:	b2e4      	uxtb	r4, r4
    d9d8:	577b      	ldrsb	r3, [r7, r5]
    d9da:	429c      	cmp	r4, r3
    d9dc:	dbf7      	blt.n	d9ce <setNewChannel+0x96>
    d9de:	e7d4      	b.n	d98a <setNewChannel+0x52>
					pUpdateChidStatus(i,DISABLED);
    d9e0:	2100      	movs	r1, #0
    d9e2:	0020      	movs	r0, r4
    d9e4:	47b0      	blx	r6
				newCh.channelMask = newCh.channelMask >> SHIFT1;
    d9e6:	086d      	lsrs	r5, r5, #1
    d9e8:	803d      	strh	r5, [r7, #0]
			for(i = 0; i < RegParams.maxChannels; i++)
    d9ea:	3401      	adds	r4, #1
    d9ec:	b2e4      	uxtb	r4, r4
    d9ee:	232a      	movs	r3, #42	; 0x2a
    d9f0:	4652      	mov	r2, sl
    d9f2:	56d3      	ldrsb	r3, [r2, r3]
    d9f4:	429c      	cmp	r4, r3
    d9f6:	dac8      	bge.n	d98a <setNewChannel+0x52>
				if((newCh.channelMask & BIT0) == BIT0)
    d9f8:	883d      	ldrh	r5, [r7, #0]
    d9fa:	464b      	mov	r3, r9
    d9fc:	422b      	tst	r3, r5
    d9fe:	d0ef      	beq.n	d9e0 <setNewChannel+0xa8>
					pUpdateChidStatus(i, ENABLED);
    da00:	4649      	mov	r1, r9
    da02:	0020      	movs	r0, r4
    da04:	47b0      	blx	r6
    da06:	e7ee      	b.n	d9e6 <setNewChannel+0xae>
    da08:	200024d0 	.word	0x200024d0
    da0c:	00007fc0 	.word	0x00007fc0
    da10:	0000a295 	.word	0x0000a295
    da14:	0000a4a9 	.word	0x0000a4a9
    da18:	00019d89 	.word	0x00019d89
    da1c:	0000d91d 	.word	0x0000d91d
    da20:	0000a3fd 	.word	0x0000a3fd
    da24:	0000a1ed 	.word	0x0000a1ed

0000da28 <LORAREG_SetAttr>:
{
    da28:	b510      	push	{r4, lr}
	StackRetStatus_t result = LORAWAN_INVALID_PARAMETER;
    da2a:	230a      	movs	r3, #10
	if(attrType < REG_NUM_ATTRIBUTES)
    da2c:	283c      	cmp	r0, #60	; 0x3c
    da2e:	d901      	bls.n	da34 <LORAREG_SetAttr+0xc>
}
    da30:	0018      	movs	r0, r3
    da32:	bd10      	pop	{r4, pc}
	    result = pSetAttr[attrType](attrType, attrInput);		
    da34:	0082      	lsls	r2, r0, #2
    da36:	4b02      	ldr	r3, [pc, #8]	; (da40 <LORAREG_SetAttr+0x18>)
    da38:	58d3      	ldr	r3, [r2, r3]
    da3a:	4798      	blx	r3
    da3c:	0003      	movs	r3, r0
    da3e:	e7f7      	b.n	da30 <LORAREG_SetAttr+0x8>
    da40:	20000d70 	.word	0x20000d70

0000da44 <CreateAllRegSoftwareTimers>:
{
    da44:	b510      	push	{r4, lr}
			status = SwTimerCreate(&regTimerId[i]);
    da46:	4809      	ldr	r0, [pc, #36]	; (da6c <CreateAllRegSoftwareTimers+0x28>)
    da48:	4b09      	ldr	r3, [pc, #36]	; (da70 <CreateAllRegSoftwareTimers+0x2c>)
    da4a:	4798      	blx	r3
		if(LORAWAN_SUCCESS == status)
    da4c:	2808      	cmp	r0, #8
    da4e:	d10c      	bne.n	da6a <CreateAllRegSoftwareTimers+0x26>
			status = SwTimerCreate(&regTimerId[i]);
    da50:	4808      	ldr	r0, [pc, #32]	; (da74 <CreateAllRegSoftwareTimers+0x30>)
    da52:	4b07      	ldr	r3, [pc, #28]	; (da70 <CreateAllRegSoftwareTimers+0x2c>)
    da54:	4798      	blx	r3
		if(LORAWAN_SUCCESS == status)
    da56:	2808      	cmp	r0, #8
    da58:	d107      	bne.n	da6a <CreateAllRegSoftwareTimers+0x26>
			status = SwTimerCreate(&regTimerId[i]);
    da5a:	4807      	ldr	r0, [pc, #28]	; (da78 <CreateAllRegSoftwareTimers+0x34>)
    da5c:	4b04      	ldr	r3, [pc, #16]	; (da70 <CreateAllRegSoftwareTimers+0x2c>)
    da5e:	4798      	blx	r3
		if(LORAWAN_SUCCESS == status)
    da60:	2808      	cmp	r0, #8
    da62:	d102      	bne.n	da6a <CreateAllRegSoftwareTimers+0x26>
			status = SwTimerCreate(&regTimerId[i]);
    da64:	4805      	ldr	r0, [pc, #20]	; (da7c <CreateAllRegSoftwareTimers+0x38>)
    da66:	4b02      	ldr	r3, [pc, #8]	; (da70 <CreateAllRegSoftwareTimers+0x2c>)
    da68:	4798      	blx	r3
}
    da6a:	bd10      	pop	{r4, pc}
    da6c:	200024cc 	.word	0x200024cc
    da70:	0000edd9 	.word	0x0000edd9
    da74:	200024cd 	.word	0x200024cd
    da78:	200024ce 	.word	0x200024ce
    da7c:	200024cf 	.word	0x200024cf

0000da80 <StopAllRegSoftwareTimers>:
{
    da80:	b570      	push	{r4, r5, r6, lr}
    da82:	2400      	movs	r4, #0
		SwTimerStop(regTimerId[i]);
    da84:	4e03      	ldr	r6, [pc, #12]	; (da94 <StopAllRegSoftwareTimers+0x14>)
    da86:	4d04      	ldr	r5, [pc, #16]	; (da98 <StopAllRegSoftwareTimers+0x18>)
    da88:	5d30      	ldrb	r0, [r6, r4]
    da8a:	47a8      	blx	r5
    da8c:	3401      	adds	r4, #1
	for (uint8_t i=0; i< REG_PARAMS_TIMERS_COUNT; i++)
    da8e:	2c04      	cmp	r4, #4
    da90:	d1fa      	bne.n	da88 <StopAllRegSoftwareTimers+0x8>
}
    da92:	bd70      	pop	{r4, r5, r6, pc}
    da94:	200024cc 	.word	0x200024cc
    da98:	0000f125 	.word	0x0000f125

0000da9c <LORAREG_Init>:
{	
    da9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    da9e:	0007      	movs	r7, r0
	if(!initialized)
    daa0:	4b24      	ldr	r3, [pc, #144]	; (db34 <LORAREG_Init+0x98>)
    daa2:	781b      	ldrb	r3, [r3, #0]
    daa4:	2b00      	cmp	r3, #0
    daa6:	d109      	bne.n	dabc <LORAREG_Init+0x20>
		if (LORAWAN_SUCCESS == CreateAllRegSoftwareTimers())
    daa8:	4b23      	ldr	r3, [pc, #140]	; (db38 <LORAREG_Init+0x9c>)
    daaa:	4798      	blx	r3
    daac:	2808      	cmp	r0, #8
    daae:	d001      	beq.n	dab4 <LORAREG_Init+0x18>
			result = LORAWAN_RESOURCE_UNAVAILABLE;
    dab0:	2014      	movs	r0, #20
    dab2:	e006      	b.n	dac2 <LORAREG_Init+0x26>
			initialized = true;
    dab4:	2201      	movs	r2, #1
    dab6:	4b1f      	ldr	r3, [pc, #124]	; (db34 <LORAREG_Init+0x98>)
    dab8:	701a      	strb	r2, [r3, #0]
    daba:	e002      	b.n	dac2 <LORAREG_Init+0x26>
		StopAllRegSoftwareTimers();	
    dabc:	4b1f      	ldr	r3, [pc, #124]	; (db3c <LORAREG_Init+0xa0>)
    dabe:	4798      	blx	r3
	StackRetStatus_t result = LORAWAN_SUCCESS;
    dac0:	2008      	movs	r0, #8
    dac2:	2300      	movs	r3, #0
		pGetAttr[i] = InValidGetAttr;
    dac4:	4e1e      	ldr	r6, [pc, #120]	; (db40 <LORAREG_Init+0xa4>)
    dac6:	4d1f      	ldr	r5, [pc, #124]	; (db44 <LORAREG_Init+0xa8>)
		pValidateAttr[i] = InValidAttr;
    dac8:	4c1f      	ldr	r4, [pc, #124]	; (db48 <LORAREG_Init+0xac>)
    daca:	4a20      	ldr	r2, [pc, #128]	; (db4c <LORAREG_Init+0xb0>)
		pSetAttr[i] = InValidAttr;
    dacc:	4920      	ldr	r1, [pc, #128]	; (db50 <LORAREG_Init+0xb4>)
		pGetAttr[i] = InValidGetAttr;
    dace:	519d      	str	r5, [r3, r6]
		pValidateAttr[i] = InValidAttr;
    dad0:	511a      	str	r2, [r3, r4]
		pSetAttr[i] = InValidAttr;
    dad2:	505a      	str	r2, [r3, r1]
    dad4:	3304      	adds	r3, #4
	for(int i = 0; i < REG_NUM_ATTRIBUTES; i++)
    dad6:	2bf4      	cmp	r3, #244	; 0xf4
    dad8:	d1f9      	bne.n	dace <LORAREG_Init+0x32>
	if(ismBand == ISM_NA915)
    dada:	2f02      	cmp	r7, #2
    dadc:	d00d      	beq.n	dafa <LORAREG_Init+0x5e>
	else if(ismBand == ISM_EU868 || ismBand == ISM_EU433)
    dade:	2f01      	cmp	r7, #1
    dae0:	d90f      	bls.n	db02 <LORAREG_Init+0x66>
	else if(ismBand >= ISM_BRN923 && ismBand <= ISM_VTM923)
    dae2:	1fbb      	subs	r3, r7, #6
    dae4:	2b08      	cmp	r3, #8
    dae6:	d910      	bls.n	db0a <LORAREG_Init+0x6e>
	else if(ismBand == ISM_AU915)
    dae8:	2f03      	cmp	r7, #3
    daea:	d012      	beq.n	db12 <LORAREG_Init+0x76>
	else if(ismBand == ISM_IND865)
    daec:	2f0f      	cmp	r7, #15
    daee:	d014      	beq.n	db1a <LORAREG_Init+0x7e>
	else if(ismBand == ISM_JPN923)
    daf0:	2f05      	cmp	r7, #5
    daf2:	d016      	beq.n	db22 <LORAREG_Init+0x86>
	else if(ismBand == ISM_KR920)
    daf4:	2f04      	cmp	r7, #4
    daf6:	d018      	beq.n	db2a <LORAREG_Init+0x8e>
}
    daf8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	    result = LORAReg_InitNA(ismBand);
    dafa:	2002      	movs	r0, #2
    dafc:	4b15      	ldr	r3, [pc, #84]	; (db54 <LORAREG_Init+0xb8>)
    dafe:	4798      	blx	r3
    db00:	e7fa      	b.n	daf8 <LORAREG_Init+0x5c>
	    result = LORAReg_InitEU(ismBand);		
    db02:	0038      	movs	r0, r7
    db04:	4b14      	ldr	r3, [pc, #80]	; (db58 <LORAREG_Init+0xbc>)
    db06:	4798      	blx	r3
    db08:	e7f6      	b.n	daf8 <LORAREG_Init+0x5c>
		result = LORAReg_InitAS(ismBand);
    db0a:	0038      	movs	r0, r7
    db0c:	4b13      	ldr	r3, [pc, #76]	; (db5c <LORAREG_Init+0xc0>)
    db0e:	4798      	blx	r3
    db10:	e7f2      	b.n	daf8 <LORAREG_Init+0x5c>
		result = LORAReg_InitAU(ismBand);
    db12:	2003      	movs	r0, #3
    db14:	4b12      	ldr	r3, [pc, #72]	; (db60 <LORAREG_Init+0xc4>)
    db16:	4798      	blx	r3
    db18:	e7ee      	b.n	daf8 <LORAREG_Init+0x5c>
		result = LORAReg_InitIN(ismBand);
    db1a:	200f      	movs	r0, #15
    db1c:	4b11      	ldr	r3, [pc, #68]	; (db64 <LORAREG_Init+0xc8>)
    db1e:	4798      	blx	r3
    db20:	e7ea      	b.n	daf8 <LORAREG_Init+0x5c>
		result = LORAReg_InitJP(ismBand);
    db22:	2005      	movs	r0, #5
    db24:	4b10      	ldr	r3, [pc, #64]	; (db68 <LORAREG_Init+0xcc>)
    db26:	4798      	blx	r3
    db28:	e7e6      	b.n	daf8 <LORAREG_Init+0x5c>
		result = LORAReg_InitKR(ismBand);
    db2a:	2004      	movs	r0, #4
    db2c:	4b0f      	ldr	r3, [pc, #60]	; (db6c <LORAREG_Init+0xd0>)
    db2e:	4798      	blx	r3
    db30:	e7e2      	b.n	daf8 <LORAREG_Init+0x5c>
    db32:	46c0      	nop			; (mov r8, r8)
    db34:	20000c79 	.word	0x20000c79
    db38:	0000da45 	.word	0x0000da45
    db3c:	0000da81 	.word	0x0000da81
    db40:	20000c7c 	.word	0x20000c7c
    db44:	00009739 	.word	0x00009739
    db48:	20000e64 	.word	0x20000e64
    db4c:	0000973d 	.word	0x0000973d
    db50:	20000d70 	.word	0x20000d70
    db54:	000094f5 	.word	0x000094f5
    db58:	00008a45 	.word	0x00008a45
    db5c:	0000854d 	.word	0x0000854d
    db60:	000087e5 	.word	0x000087e5
    db64:	00008d35 	.word	0x00008d35
    db68:	00008f49 	.word	0x00008f49
    db6c:	000091fd 	.word	0x000091fd

0000db70 <LORAREG_SupportedBands>:
	*bands = value;
    db70:	2301      	movs	r3, #1
    db72:	425b      	negs	r3, r3
    db74:	8003      	strh	r3, [r0, #0]
}
    db76:	2008      	movs	r0, #8
    db78:	4770      	bx	lr
	...

0000db7c <LORAREG_UnInit>:
{
    db7c:	b510      	push	{r4, lr}
	StopAllRegSoftwareTimers();
    db7e:	4b0d      	ldr	r3, [pc, #52]	; (dbb4 <LORAREG_UnInit+0x38>)
    db80:	4798      	blx	r3
	if(RegParams.regParamItems.fileid)
    db82:	4b0d      	ldr	r3, [pc, #52]	; (dbb8 <LORAREG_UnInit+0x3c>)
    db84:	4a0d      	ldr	r2, [pc, #52]	; (dbbc <LORAREG_UnInit+0x40>)
    db86:	5cd0      	ldrb	r0, [r2, r3]
    db88:	2800      	cmp	r0, #0
    db8a:	d107      	bne.n	db9c <LORAREG_UnInit+0x20>
	memset(&RegParams,0,sizeof(RegParams_t));
    db8c:	2285      	movs	r2, #133	; 0x85
    db8e:	0092      	lsls	r2, r2, #2
    db90:	2100      	movs	r1, #0
    db92:	480a      	ldr	r0, [pc, #40]	; (dbbc <LORAREG_UnInit+0x40>)
    db94:	4b0a      	ldr	r3, [pc, #40]	; (dbc0 <LORAREG_UnInit+0x44>)
    db96:	4798      	blx	r3
}
    db98:	200a      	movs	r0, #10
    db9a:	bd10      	pop	{r4, pc}
	    PDS_UnRegFile(RegParams.regParamItems.fileid);
    db9c:	4b09      	ldr	r3, [pc, #36]	; (dbc4 <LORAREG_UnInit+0x48>)
    db9e:	4798      	blx	r3
		if(RegParams.band == ISM_EU868)
    dba0:	232e      	movs	r3, #46	; 0x2e
    dba2:	4a06      	ldr	r2, [pc, #24]	; (dbbc <LORAREG_UnInit+0x40>)
    dba4:	5cd3      	ldrb	r3, [r2, r3]
    dba6:	2b00      	cmp	r3, #0
    dba8:	d1f0      	bne.n	db8c <LORAREG_UnInit+0x10>
			PDS_UnRegFile(PDS_FILE_REG_EU868_12_IDX);
    dbaa:	200b      	movs	r0, #11
    dbac:	4b05      	ldr	r3, [pc, #20]	; (dbc4 <LORAREG_UnInit+0x48>)
    dbae:	4798      	blx	r3
    dbb0:	e7ec      	b.n	db8c <LORAREG_UnInit+0x10>
    dbb2:	46c0      	nop			; (mov r8, r8)
    dbb4:	0000da81 	.word	0x0000da81
    dbb8:	0000020b 	.word	0x0000020b
    dbbc:	200024d0 	.word	0x200024d0
    dbc0:	00019ead 	.word	0x00019ead
    dbc4:	0000e401 	.word	0x0000e401

0000dbc8 <sal_FillSubKey>:
		}
	}
}

static void sal_FillSubKey( uint8_t *source, uint8_t *key, uint8_t size)
{
    dbc8:	b530      	push	{r4, r5, lr}
	uint8_t i = 0;
	uint8_t carry = 0;

	i=size;

	while(i--)
    dbca:	1e53      	subs	r3, r2, #1
    dbcc:	b2db      	uxtb	r3, r3
    dbce:	2a00      	cmp	r2, #0
    dbd0:	d00b      	beq.n	dbea <sal_FillSubKey+0x22>
    dbd2:	2400      	movs	r4, #0
	{
		key[i] = (source[i] << 1) | carry;
    dbd4:	18c5      	adds	r5, r0, r3
    dbd6:	782a      	ldrb	r2, [r5, #0]
    dbd8:	0052      	lsls	r2, r2, #1
    dbda:	4322      	orrs	r2, r4
    dbdc:	54ca      	strb	r2, [r1, r3]
		carry = !!(source[i] & 0x80);
    dbde:	782c      	ldrb	r4, [r5, #0]
    dbe0:	09e4      	lsrs	r4, r4, #7
	while(i--)
    dbe2:	3b01      	subs	r3, #1
    dbe4:	b2db      	uxtb	r3, r3
    dbe6:	2bff      	cmp	r3, #255	; 0xff
    dbe8:	d1f4      	bne.n	dbd4 <sal_FillSubKey+0xc>
	}
}
    dbea:	bd30      	pop	{r4, r5, pc}

0000dbec <SAL_Init>:
{
    dbec:	b510      	push	{r4, lr}
    dbee:	b082      	sub	sp, #8
    dbf0:	0004      	movs	r4, r0
	useCryptoDev = useECC608 ;
    dbf2:	4b19      	ldr	r3, [pc, #100]	; (dc58 <SAL_Init+0x6c>)
    dbf4:	7018      	strb	r0, [r3, #0]
	AESInit();
    dbf6:	4b19      	ldr	r3, [pc, #100]	; (dc5c <SAL_Init+0x70>)
    dbf8:	4798      	blx	r3
	SalStatus_t sal_status = SAL_SUCCESS;
    dbfa:	2000      	movs	r0, #0
	if (true == useECC608)
    dbfc:	2c00      	cmp	r4, #0
    dbfe:	d101      	bne.n	dc04 <SAL_Init+0x18>
}
    dc00:	b002      	add	sp, #8
    dc02:	bd10      	pop	{r4, pc}
		cfg_atecc608a_i2c_default .iface_type            = ATCA_I2C_IFACE;
    dc04:	4816      	ldr	r0, [pc, #88]	; (dc60 <SAL_Init+0x74>)
    dc06:	2300      	movs	r3, #0
    dc08:	7003      	strb	r3, [r0, #0]
		cfg_atecc608a_i2c_default.devtype                = ATECC608A;
    dc0a:	3303      	adds	r3, #3
    dc0c:	7043      	strb	r3, [r0, #1]
		cfg_atecc608a_i2c_default.atcai2c.slave_address  = ATCAD_SLAVE_I2C_ADDRESS;
    dc0e:	33af      	adds	r3, #175	; 0xaf
    dc10:	7103      	strb	r3, [r0, #4]
		cfg_atecc608a_i2c_default.atcai2c.bus            = ATCAD_HOST_I2C_SERCOM;
    dc12:	3bb1      	subs	r3, #177	; 0xb1
    dc14:	7143      	strb	r3, [r0, #5]
		cfg_atecc608a_i2c_default.atcai2c.baud           = ATCAD_HOST_I2C_BAUDRATE;
    dc16:	4b13      	ldr	r3, [pc, #76]	; (dc64 <SAL_Init+0x78>)
    dc18:	6083      	str	r3, [r0, #8]
		cfg_atecc608a_i2c_default.wake_delay             = 1500;
    dc1a:	4b13      	ldr	r3, [pc, #76]	; (dc68 <SAL_Init+0x7c>)
    dc1c:	8483      	strh	r3, [r0, #36]	; 0x24
		cfg_atecc608a_i2c_default.rx_retries             = 20;
    dc1e:	2314      	movs	r3, #20
    dc20:	6283      	str	r3, [r0, #40]	; 0x28
		status = atcab_init( &cfg_atecc608a_i2c_default );
    dc22:	4b12      	ldr	r3, [pc, #72]	; (dc6c <SAL_Init+0x80>)
    dc24:	4798      	blx	r3
    dc26:	0003      	movs	r3, r0
	SalStatus_t sal_status = SAL_SUCCESS;
    dc28:	2000      	movs	r0, #0
		if (ATCA_SUCCESS == status )
    dc2a:	2b00      	cmp	r3, #0
    dc2c:	d1e8      	bne.n	dc00 <SAL_Init+0x14>
	 *
     * \param[out] rand_out  32 bytes of random data is returned here.
     *
     * \return ATCA_SUCCESS on success, otherwise an error code.
     */
	status = atcab_random((uint8_t *)&keyEncryptionKey[0]);
    dc2e:	4810      	ldr	r0, [pc, #64]	; (dc70 <SAL_Init+0x84>)
    dc30:	4b10      	ldr	r3, [pc, #64]	; (dc74 <SAL_Init+0x88>)
    dc32:	4798      	blx	r3

	if (ATCA_SUCCESS == status)
    dc34:	2800      	cmp	r0, #0
    dc36:	d003      	beq.n	dc40 <SAL_Init+0x54>
	{
		/* Write Key Encryption Key of 32 Bytes in KEK_SLOT */
		status = atcab_write_zone(ATCA_ZONE_DATA, KEK_SLOT, 0, 0, keyEncryptionKey, 32);
	}
	
	if (ATCA_SUCCESS != status)
    dc38:	1e43      	subs	r3, r0, #1
    dc3a:	4198      	sbcs	r0, r3
	SalStatus_t sal_status = SAL_SUCCESS;
    dc3c:	b2c0      	uxtb	r0, r0
    dc3e:	e7df      	b.n	dc00 <SAL_Init+0x14>
		status = atcab_write_zone(ATCA_ZONE_DATA, KEK_SLOT, 0, 0, keyEncryptionKey, 32);
    dc40:	2320      	movs	r3, #32
    dc42:	9301      	str	r3, [sp, #4]
    dc44:	4b0a      	ldr	r3, [pc, #40]	; (dc70 <SAL_Init+0x84>)
    dc46:	9300      	str	r3, [sp, #0]
    dc48:	2300      	movs	r3, #0
    dc4a:	2200      	movs	r2, #0
    dc4c:	210e      	movs	r1, #14
    dc4e:	3002      	adds	r0, #2
    dc50:	4c09      	ldr	r4, [pc, #36]	; (dc78 <SAL_Init+0x8c>)
    dc52:	47a0      	blx	r4
    dc54:	e7f0      	b.n	dc38 <SAL_Init+0x4c>
    dc56:	46c0      	nop			; (mov r8, r8)
    dc58:	20000fa8 	.word	0x20000fa8
    dc5c:	0000e08d 	.word	0x0000e08d
    dc60:	20000f58 	.word	0x20000f58
    dc64:	00061a80 	.word	0x00061a80
    dc68:	000005dc 	.word	0x000005dc
    dc6c:	00000129 	.word	0x00000129
    dc70:	20000f88 	.word	0x20000f88
    dc74:	00000501 	.word	0x00000501
    dc78:	0000090d 	.word	0x0000090d

0000dc7c <SAL_AESEncode>:
{
    dc7c:	b530      	push	{r4, r5, lr}
    dc7e:	b089      	sub	sp, #36	; 0x24
    dc80:	0004      	movs	r4, r0
    dc82:	0015      	movs	r5, r2
if (!useCryptoDev)
    dc84:	4b18      	ldr	r3, [pc, #96]	; (dce8 <SAL_AESEncode+0x6c>)
    dc86:	781b      	ldrb	r3, [r3, #0]
    dc88:	2b00      	cmp	r3, #0
    dc8a:	d010      	beq.n	dcae <SAL_AESEncode+0x32>
	switch(key_type)
    dc8c:	2900      	cmp	r1, #0
    dc8e:	d019      	beq.n	dcc4 <SAL_AESEncode+0x48>
			sal_status = SAL_INVALID_KEY_TYPE;
    dc90:	2002      	movs	r0, #2
	switch(key_type)
    dc92:	2904      	cmp	r1, #4
    dc94:	d809      	bhi.n	dcaa <SAL_AESEncode+0x2e>
			memcpy(useKey, key, sizeof(useKey));
    dc96:	2210      	movs	r2, #16
    dc98:	0029      	movs	r1, r5
    dc9a:	a804      	add	r0, sp, #16
    dc9c:	4b13      	ldr	r3, [pc, #76]	; (dcec <SAL_AESEncode+0x70>)
    dc9e:	4798      	blx	r3
			AESEncode(buffer, useKey);
    dca0:	a904      	add	r1, sp, #16
    dca2:	0020      	movs	r0, r4
    dca4:	4b12      	ldr	r3, [pc, #72]	; (dcf0 <SAL_AESEncode+0x74>)
    dca6:	4798      	blx	r3
	SalStatus_t sal_status = SAL_SUCCESS;
    dca8:	2000      	movs	r0, #0
}
    dcaa:	b009      	add	sp, #36	; 0x24
    dcac:	bd30      	pop	{r4, r5, pc}
	memcpy(useKey, key, sizeof(useKey));
    dcae:	2210      	movs	r2, #16
    dcb0:	0029      	movs	r1, r5
    dcb2:	a804      	add	r0, sp, #16
    dcb4:	4b0d      	ldr	r3, [pc, #52]	; (dcec <SAL_AESEncode+0x70>)
    dcb6:	4798      	blx	r3
	AESEncode(buffer, useKey);
    dcb8:	a904      	add	r1, sp, #16
    dcba:	0020      	movs	r0, r4
    dcbc:	4b0c      	ldr	r3, [pc, #48]	; (dcf0 <SAL_AESEncode+0x74>)
    dcbe:	4798      	blx	r3
	SalStatus_t sal_status = SAL_SUCCESS;
    dcc0:	2000      	movs	r0, #0
    dcc2:	e7f2      	b.n	dcaa <SAL_AESEncode+0x2e>
			atcab_status = atcab_aes_encrypt(keySlot, APP_KEY_SLOT_BLOCK, buffer, encData);
    dcc4:	466b      	mov	r3, sp
    dcc6:	0002      	movs	r2, r0
    dcc8:	2101      	movs	r1, #1
    dcca:	2000      	movs	r0, #0
    dccc:	4d09      	ldr	r5, [pc, #36]	; (dcf4 <SAL_AESEncode+0x78>)
    dcce:	47a8      	blx	r5
    dcd0:	0003      	movs	r3, r0
				sal_status = SAL_FAILURE;
    dcd2:	2001      	movs	r0, #1
			if (atcab_status == ATCA_SUCCESS)
    dcd4:	2b00      	cmp	r3, #0
    dcd6:	d1e8      	bne.n	dcaa <SAL_AESEncode+0x2e>
				memcpy(buffer, encData, sizeof(encData));
    dcd8:	2210      	movs	r2, #16
    dcda:	4669      	mov	r1, sp
    dcdc:	0020      	movs	r0, r4
    dcde:	4b03      	ldr	r3, [pc, #12]	; (dcec <SAL_AESEncode+0x70>)
    dce0:	4798      	blx	r3
				sal_status = SAL_SUCCESS;
    dce2:	2000      	movs	r0, #0
    dce4:	e7e1      	b.n	dcaa <SAL_AESEncode+0x2e>
    dce6:	46c0      	nop			; (mov r8, r8)
    dce8:	20000fa8 	.word	0x20000fa8
    dcec:	00019d89 	.word	0x00019d89
    dcf0:	0000dfb1 	.word	0x0000dfb1
    dcf4:	000002e9 	.word	0x000002e9

0000dcf8 <SAL_DeriveSessionKey>:
{
    dcf8:	b510      	push	{r4, lr}
    dcfa:	b082      	sub	sp, #8
if (!useCryptoDev)
    dcfc:	4c0c      	ldr	r4, [pc, #48]	; (dd30 <SAL_DeriveSessionKey+0x38>)
    dcfe:	7824      	ldrb	r4, [r4, #0]
    dd00:	2c00      	cmp	r4, #0
    dd02:	d012      	beq.n	dd2a <SAL_DeriveSessionKey+0x32>
	if (SAL_APP_KEY == src_key)
    dd04:	424a      	negs	r2, r1
    dd06:	414a      	adcs	r2, r1
	uint8_t target_slot = keySlots[target_key];// Slot of Target Session Key which is being derived
    dd08:	4c0a      	ldr	r4, [pc, #40]	; (dd34 <SAL_DeriveSessionKey+0x3c>)
	uint16_t key_id = (target_slot << 8) | source_slot; //2 Byte key_id denotes Source and Target slot values (Target Slot(1 Byte) | Source Slot (1Byte))
    dd0a:	5ce3      	ldrb	r3, [r4, r3]
    dd0c:	021b      	lsls	r3, r3, #8
    dd0e:	5c61      	ldrb	r1, [r4, r1]
	 atcad_status = atcab_kdf(derive_mode, key_id, aes_details, block, NULL, NULL);
    dd10:	4319      	orrs	r1, r3
    dd12:	2300      	movs	r3, #0
    dd14:	9301      	str	r3, [sp, #4]
    dd16:	9300      	str	r3, [sp, #0]
    dd18:	0003      	movs	r3, r0
    dd1a:	202a      	movs	r0, #42	; 0x2a
    dd1c:	4c06      	ldr	r4, [pc, #24]	; (dd38 <SAL_DeriveSessionKey+0x40>)
    dd1e:	47a0      	blx	r4
	 if(ATCA_SUCCESS != atcad_status)
    dd20:	1e43      	subs	r3, r0, #1
    dd22:	4198      	sbcs	r0, r3
	sal_status = SAL_AESEncode(block, src_key, key);
    dd24:	b2c0      	uxtb	r0, r0
}
    dd26:	b002      	add	sp, #8
    dd28:	bd10      	pop	{r4, pc}
	sal_status = SAL_AESEncode(block, src_key, key);
    dd2a:	4b04      	ldr	r3, [pc, #16]	; (dd3c <SAL_DeriveSessionKey+0x44>)
    dd2c:	4798      	blx	r3
    dd2e:	e7fa      	b.n	dd26 <SAL_DeriveSessionKey+0x2e>
    dd30:	20000fa8 	.word	0x20000fa8
    dd34:	000201b4 	.word	0x000201b4
    dd38:	0000038d 	.word	0x0000038d
    dd3c:	0000dc7d 	.word	0x0000dc7d

0000dd40 <SAL_Read>:
{
    dd40:	b530      	push	{r4, r5, lr}
    dd42:	b089      	sub	sp, #36	; 0x24
    dd44:	000c      	movs	r4, r1
if (useCryptoDev)
    dd46:	4b21      	ldr	r3, [pc, #132]	; (ddcc <SAL_Read+0x8c>)
    dd48:	781a      	ldrb	r2, [r3, #0]
	SalStatus_t sal_status = SAL_SUCCESS;
    dd4a:	2300      	movs	r3, #0
if (useCryptoDev)
    dd4c:	2a00      	cmp	r2, #0
    dd4e:	d014      	beq.n	dd7a <SAL_Read+0x3a>
	uint8_t keyId = keySlots[key_type];
    dd50:	4b1f      	ldr	r3, [pc, #124]	; (ddd0 <SAL_Read+0x90>)
    dd52:	5c19      	ldrb	r1, [r3, r0]
	switch(key_type)
    dd54:	2806      	cmp	r0, #6
    dd56:	d02b      	beq.n	ddb0 <SAL_Read+0x70>
    dd58:	d812      	bhi.n	dd80 <SAL_Read+0x40>
    dd5a:	3801      	subs	r0, #1
    dd5c:	2803      	cmp	r0, #3
    dd5e:	d832      	bhi.n	ddc6 <SAL_Read+0x86>
			status = atcab_read_enc(keyId, block, key, &keyEncryptionKey[0], KEK_SLOT);
    dd60:	b288      	uxth	r0, r1
    dd62:	230e      	movs	r3, #14
    dd64:	9300      	str	r3, [sp, #0]
    dd66:	4b1b      	ldr	r3, [pc, #108]	; (ddd4 <SAL_Read+0x94>)
    dd68:	0022      	movs	r2, r4
    dd6a:	2100      	movs	r1, #0
    dd6c:	4c1a      	ldr	r4, [pc, #104]	; (ddd8 <SAL_Read+0x98>)
    dd6e:	47a0      	blx	r4
    dd70:	0005      	movs	r5, r0
	SalStatus_t sal_status = SAL_SUCCESS;
    dd72:	2300      	movs	r3, #0
	if (ATCA_SUCCESS != status)
    dd74:	2d00      	cmp	r5, #0
    dd76:	d000      	beq.n	dd7a <SAL_Read+0x3a>
		sal_status = SAL_FAILURE;
    dd78:	2301      	movs	r3, #1
}
    dd7a:	0018      	movs	r0, r3
    dd7c:	b009      	add	sp, #36	; 0x24
    dd7e:	bd30      	pop	{r4, r5, pc}
	switch(key_type)
    dd80:	2807      	cmp	r0, #7
    dd82:	d120      	bne.n	ddc6 <SAL_Read+0x86>
			size_t bin_size = SAL_EUI_LEN ;
    dd84:	2308      	movs	r3, #8
    dd86:	9303      	str	r3, [sp, #12]
			status = atcab_read_bytes_zone(ATCA_ZONE_DATA, DEV_EUI_SLOT, 0, devEUIascii, 16) ;
    dd88:	3308      	adds	r3, #8
    dd8a:	9300      	str	r3, [sp, #0]
    dd8c:	ab04      	add	r3, sp, #16
    dd8e:	2200      	movs	r2, #0
    dd90:	210a      	movs	r1, #10
    dd92:	2002      	movs	r0, #2
    dd94:	4d11      	ldr	r5, [pc, #68]	; (dddc <SAL_Read+0x9c>)
    dd96:	47a8      	blx	r5
    dd98:	0005      	movs	r5, r0
			atcab_hex2bin((char*)devEUIascii, strlen((char*)devEUIascii), key, &bin_size) ;		
    dd9a:	a804      	add	r0, sp, #16
    dd9c:	4b10      	ldr	r3, [pc, #64]	; (dde0 <SAL_Read+0xa0>)
    dd9e:	4798      	blx	r3
    dda0:	0001      	movs	r1, r0
    dda2:	ab03      	add	r3, sp, #12
    dda4:	0022      	movs	r2, r4
    dda6:	a804      	add	r0, sp, #16
    dda8:	4c0e      	ldr	r4, [pc, #56]	; (dde4 <SAL_Read+0xa4>)
    ddaa:	47a0      	blx	r4
	SalStatus_t sal_status = SAL_SUCCESS;
    ddac:	2300      	movs	r3, #0
		break;
    ddae:	e7e1      	b.n	dd74 <SAL_Read+0x34>
			status = atcab_read_bytes_zone(ATCA_ZONE_DATA, keyId, 0, key, SAL_EUI_LEN);
    ddb0:	b289      	uxth	r1, r1
    ddb2:	2308      	movs	r3, #8
    ddb4:	9300      	str	r3, [sp, #0]
    ddb6:	0023      	movs	r3, r4
    ddb8:	2200      	movs	r2, #0
    ddba:	2002      	movs	r0, #2
    ddbc:	4c07      	ldr	r4, [pc, #28]	; (dddc <SAL_Read+0x9c>)
    ddbe:	47a0      	blx	r4
    ddc0:	0005      	movs	r5, r0
	SalStatus_t sal_status = SAL_SUCCESS;
    ddc2:	2300      	movs	r3, #0
		break;
    ddc4:	e7d6      	b.n	dd74 <SAL_Read+0x34>
	ATCA_STATUS status = ATCA_SUCCESS;
    ddc6:	2500      	movs	r5, #0
			sal_status = SAL_INVALID_KEY_TYPE;
    ddc8:	2302      	movs	r3, #2
    ddca:	e7d3      	b.n	dd74 <SAL_Read+0x34>
    ddcc:	20000fa8 	.word	0x20000fa8
    ddd0:	000201b4 	.word	0x000201b4
    ddd4:	20000f88 	.word	0x20000f88
    ddd8:	00000659 	.word	0x00000659
    dddc:	0000077d 	.word	0x0000077d
    dde0:	0001a2e1 	.word	0x0001a2e1
    dde4:	00000df9 	.word	0x00000df9

0000dde8 <SAL_AESCmac>:
{
    dde8:	b5f0      	push	{r4, r5, r6, r7, lr}
    ddea:	46d6      	mov	lr, sl
    ddec:	464f      	mov	r7, r9
    ddee:	4646      	mov	r6, r8
    ddf0:	b5c0      	push	{r6, r7, lr}
    ddf2:	b0a4      	sub	sp, #144	; 0x90
    ddf4:	9001      	str	r0, [sp, #4]
    ddf6:	000f      	movs	r7, r1
    ddf8:	9102      	str	r1, [sp, #8]
    ddfa:	9203      	str	r2, [sp, #12]
    ddfc:	469a      	mov	sl, r3
    ddfe:	ab2c      	add	r3, sp, #176	; 0xb0
    de00:	881c      	ldrh	r4, [r3, #0]
	uint8_t const_Rb[16] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    de02:	ae08      	add	r6, sp, #32
    de04:	2210      	movs	r2, #16
    de06:	2100      	movs	r1, #0
    de08:	0030      	movs	r0, r6
    de0a:	4d64      	ldr	r5, [pc, #400]	; (df9c <SAL_AESCmac+0x1b4>)
    de0c:	47a8      	blx	r5
    de0e:	2387      	movs	r3, #135	; 0x87
    de10:	73f3      	strb	r3, [r6, #15]
	memset(l, 0, sizeof(l));
    de12:	2210      	movs	r2, #16
    de14:	2100      	movs	r1, #0
    de16:	a804      	add	r0, sp, #16
    de18:	47a8      	blx	r5
	SAL_AESEncode(l, key_type, key);
    de1a:	9a01      	ldr	r2, [sp, #4]
    de1c:	0039      	movs	r1, r7
    de1e:	a804      	add	r0, sp, #16
    de20:	4b5f      	ldr	r3, [pc, #380]	; (dfa0 <SAL_AESCmac+0x1b8>)
    de22:	4798      	blx	r3
	if ( (l[0] & 0x80) == 0x00 )  // MSB( bufferLocal[0] ) is '0'
    de24:	ab04      	add	r3, sp, #16
    de26:	781b      	ldrb	r3, [r3, #0]
    de28:	2b7f      	cmp	r3, #127	; 0x7f
    de2a:	d82d      	bhi.n	de88 <SAL_AESCmac+0xa0>
		sal_FillSubKey( l, k1, (sizeof(l) ) );
    de2c:	2210      	movs	r2, #16
    de2e:	a920      	add	r1, sp, #128	; 0x80
    de30:	a804      	add	r0, sp, #16
    de32:	4b5c      	ldr	r3, [pc, #368]	; (dfa4 <SAL_AESCmac+0x1bc>)
    de34:	4798      	blx	r3
	if ( (k1[0] & 0x80) == 0x00 )   // MSB( k1[0] ) is '0'
    de36:	ab20      	add	r3, sp, #128	; 0x80
    de38:	781b      	ldrb	r3, [r3, #0]
    de3a:	2b7f      	cmp	r3, #127	; 0x7f
    de3c:	d834      	bhi.n	dea8 <SAL_AESCmac+0xc0>
		sal_FillSubKey( k1, k2, (sizeof(l)) );
    de3e:	2210      	movs	r2, #16
    de40:	a91c      	add	r1, sp, #112	; 0x70
    de42:	a820      	add	r0, sp, #128	; 0x80
    de44:	4b57      	ldr	r3, [pc, #348]	; (dfa4 <SAL_AESCmac+0x1bc>)
    de46:	4798      	blx	r3
	n = (size + 15) >> 4;
    de48:	0023      	movs	r3, r4
    de4a:	330f      	adds	r3, #15
    de4c:	111d      	asrs	r5, r3, #4
    de4e:	b2aa      	uxth	r2, r5
    de50:	4690      	mov	r8, r2
	if (n == 0)
    de52:	2a00      	cmp	r2, #0
    de54:	d038      	beq.n	dec8 <SAL_AESCmac+0xe0>
	if ( flag == 1 )
    de56:	0722      	lsls	r2, r4, #28
    de58:	d138      	bne.n	decc <SAL_AESCmac+0xe4>
		for (i=((n-1) << 4); i<(n << 4); i++)
    de5a:	4642      	mov	r2, r8
    de5c:	3a01      	subs	r2, #1
    de5e:	0112      	lsls	r2, r2, #4
    de60:	b296      	uxth	r6, r2
    de62:	4f51      	ldr	r7, [pc, #324]	; (dfa8 <SAL_AESCmac+0x1c0>)
    de64:	401f      	ands	r7, r3
    de66:	42be      	cmp	r6, r7
    de68:	da54      	bge.n	df14 <SAL_AESCmac+0x12c>
    de6a:	0033      	movs	r3, r6
			mLast[j] = input[i] ^ k1[j];
    de6c:	a910      	add	r1, sp, #64	; 0x40
    de6e:	aa20      	add	r2, sp, #128	; 0x80
    de70:	1b98      	subs	r0, r3, r6
    de72:	b280      	uxth	r0, r0
    de74:	4654      	mov	r4, sl
    de76:	5ce4      	ldrb	r4, [r4, r3]
    de78:	5c15      	ldrb	r5, [r2, r0]
    de7a:	406c      	eors	r4, r5
    de7c:	540c      	strb	r4, [r1, r0]
		for (i=((n-1) << 4); i<(n << 4); i++)
    de7e:	3301      	adds	r3, #1
    de80:	b29b      	uxth	r3, r3
    de82:	42bb      	cmp	r3, r7
    de84:	dbf4      	blt.n	de70 <SAL_AESCmac+0x88>
    de86:	e045      	b.n	df14 <SAL_AESCmac+0x12c>
		sal_FillSubKey( l, k1, (sizeof(l) ) );
    de88:	2210      	movs	r2, #16
    de8a:	a920      	add	r1, sp, #128	; 0x80
    de8c:	a804      	add	r0, sp, #16
    de8e:	4b45      	ldr	r3, [pc, #276]	; (dfa4 <SAL_AESCmac+0x1bc>)
    de90:	4798      	blx	r3
    de92:	2300      	movs	r3, #0
			k1[i] ^= const_Rb[i];
    de94:	aa20      	add	r2, sp, #128	; 0x80
    de96:	a908      	add	r1, sp, #32
    de98:	5c98      	ldrb	r0, [r3, r2]
    de9a:	5c5d      	ldrb	r5, [r3, r1]
    de9c:	4068      	eors	r0, r5
    de9e:	5498      	strb	r0, [r3, r2]
    dea0:	3301      	adds	r3, #1
		for (i=0; i<sizeof(l); i++)
    dea2:	2b10      	cmp	r3, #16
    dea4:	d1f8      	bne.n	de98 <SAL_AESCmac+0xb0>
    dea6:	e7c6      	b.n	de36 <SAL_AESCmac+0x4e>
		sal_FillSubKey( k1, k2, (sizeof(l) ) );
    dea8:	2210      	movs	r2, #16
    deaa:	a91c      	add	r1, sp, #112	; 0x70
    deac:	a820      	add	r0, sp, #128	; 0x80
    deae:	4b3d      	ldr	r3, [pc, #244]	; (dfa4 <SAL_AESCmac+0x1bc>)
    deb0:	4798      	blx	r3
    deb2:	2300      	movs	r3, #0
			k2[i] = k2[i] ^ const_Rb[i];
    deb4:	aa1c      	add	r2, sp, #112	; 0x70
    deb6:	a908      	add	r1, sp, #32
    deb8:	5c98      	ldrb	r0, [r3, r2]
    deba:	5c5d      	ldrb	r5, [r3, r1]
    debc:	4068      	eors	r0, r5
    debe:	5498      	strb	r0, [r3, r2]
    dec0:	3301      	adds	r3, #1
		for (i=0; i<sizeof(l); i++)
    dec2:	2b10      	cmp	r3, #16
    dec4:	d1f8      	bne.n	deb8 <SAL_AESCmac+0xd0>
    dec6:	e7bf      	b.n	de48 <SAL_AESCmac+0x60>
		n = 1;
    dec8:	2301      	movs	r3, #1
    deca:	4698      	mov	r8, r3
		ptr = &input[size - (size%16)];
    decc:	230f      	movs	r3, #15
    dece:	0020      	movs	r0, r4
    ded0:	4398      	bics	r0, r3
    ded2:	2300      	movs	r3, #0
			if ( i < (size%16) )
    ded4:	220f      	movs	r2, #15
    ded6:	4014      	ands	r4, r2
					padded[i] = 0x00;
    ded8:	a90c      	add	r1, sp, #48	; 0x30
    deda:	2700      	movs	r7, #0
					padded[i] = 0x80;
    dedc:	2680      	movs	r6, #128	; 0x80
				padded[i] = ptr[i];
    dede:	4450      	add	r0, sl
    dee0:	e005      	b.n	deee <SAL_AESCmac+0x106>
				if ( i == (size%16) )
    dee2:	4294      	cmp	r4, r2
    dee4:	d009      	beq.n	defa <SAL_AESCmac+0x112>
					padded[i] = 0x00;
    dee6:	545f      	strb	r7, [r3, r1]
    dee8:	3301      	adds	r3, #1
		for (i=0; i<16; i++)
    deea:	2b10      	cmp	r3, #16
    deec:	d007      	beq.n	defe <SAL_AESCmac+0x116>
    deee:	b29a      	uxth	r2, r3
			if ( i < (size%16) )
    def0:	4294      	cmp	r4, r2
    def2:	d9f6      	bls.n	dee2 <SAL_AESCmac+0xfa>
				padded[i] = ptr[i];
    def4:	5cc2      	ldrb	r2, [r0, r3]
    def6:	545a      	strb	r2, [r3, r1]
    def8:	e7f6      	b.n	dee8 <SAL_AESCmac+0x100>
					padded[i] = 0x80;
    defa:	545e      	strb	r6, [r3, r1]
    defc:	e7f4      	b.n	dee8 <SAL_AESCmac+0x100>
    defe:	2300      	movs	r3, #0
			mLast[i] = padded[i] ^ k2[i];
    df00:	a810      	add	r0, sp, #64	; 0x40
    df02:	a90c      	add	r1, sp, #48	; 0x30
    df04:	aa1c      	add	r2, sp, #112	; 0x70
    df06:	5c5c      	ldrb	r4, [r3, r1]
    df08:	5c9d      	ldrb	r5, [r3, r2]
    df0a:	406c      	eors	r4, r5
    df0c:	541c      	strb	r4, [r3, r0]
    df0e:	3301      	adds	r3, #1
		for (i=0; i<sizeof(mLast); i++)
    df10:	2b10      	cmp	r3, #16
    df12:	d1f8      	bne.n	df06 <SAL_AESCmac+0x11e>
	memset(x, 0, sizeof(x));
    df14:	2210      	movs	r2, #16
    df16:	2100      	movs	r1, #0
    df18:	a818      	add	r0, sp, #96	; 0x60
    df1a:	4b20      	ldr	r3, [pc, #128]	; (df9c <SAL_AESCmac+0x1b4>)
    df1c:	4798      	blx	r3
	for (i=0; i<(n-1); i++)
    df1e:	2301      	movs	r3, #1
    df20:	425b      	negs	r3, r3
    df22:	4443      	add	r3, r8
    df24:	4699      	mov	r9, r3
    df26:	2000      	movs	r0, #0
    df28:	2700      	movs	r7, #0
    df2a:	2b00      	cmp	r3, #0
    df2c:	dd1a      	ble.n	df64 <SAL_AESCmac+0x17c>
			y[j] = x[j] ^ input[(i << 4)+j];
    df2e:	ad14      	add	r5, sp, #80	; 0x50
    df30:	ac18      	add	r4, sp, #96	; 0x60
		memcpy(x, y, sizeof(y));
    df32:	4e1e      	ldr	r6, [pc, #120]	; (dfac <SAL_AESCmac+0x1c4>)
			y[j] = x[j] ^ input[(i << 4)+j];
    df34:	0100      	lsls	r0, r0, #4
    df36:	2300      	movs	r3, #0
    df38:	4450      	add	r0, sl
    df3a:	5cc2      	ldrb	r2, [r0, r3]
    df3c:	5d19      	ldrb	r1, [r3, r4]
    df3e:	404a      	eors	r2, r1
    df40:	555a      	strb	r2, [r3, r5]
    df42:	3301      	adds	r3, #1
		for (j=0; j<16; j++)
    df44:	2b10      	cmp	r3, #16
    df46:	d1f8      	bne.n	df3a <SAL_AESCmac+0x152>
		memcpy(x, y, sizeof(y));
    df48:	2210      	movs	r2, #16
    df4a:	0029      	movs	r1, r5
    df4c:	0020      	movs	r0, r4
    df4e:	47b0      	blx	r6
		SAL_AESEncode(x, key_type, key);
    df50:	9a01      	ldr	r2, [sp, #4]
    df52:	9902      	ldr	r1, [sp, #8]
    df54:	0020      	movs	r0, r4
    df56:	4b12      	ldr	r3, [pc, #72]	; (dfa0 <SAL_AESCmac+0x1b8>)
    df58:	4798      	blx	r3
	for (i=0; i<(n-1); i++)
    df5a:	3701      	adds	r7, #1
    df5c:	b2bf      	uxth	r7, r7
    df5e:	0038      	movs	r0, r7
    df60:	454f      	cmp	r7, r9
    df62:	dbe7      	blt.n	df34 <SAL_AESCmac+0x14c>
    df64:	2300      	movs	r3, #0
		y[i] = x[i] ^ mLast[i];
    df66:	ac14      	add	r4, sp, #80	; 0x50
    df68:	a818      	add	r0, sp, #96	; 0x60
    df6a:	a910      	add	r1, sp, #64	; 0x40
    df6c:	5c1a      	ldrb	r2, [r3, r0]
    df6e:	5c5d      	ldrb	r5, [r3, r1]
    df70:	406a      	eors	r2, r5
    df72:	551a      	strb	r2, [r3, r4]
    df74:	3301      	adds	r3, #1
	for (i=0; i<sizeof(x); i++)
    df76:	2b10      	cmp	r3, #16
    df78:	d1f8      	bne.n	df6c <SAL_AESCmac+0x184>
	SAL_AESEncode(y, key_type, key);
    df7a:	9a01      	ldr	r2, [sp, #4]
    df7c:	9902      	ldr	r1, [sp, #8]
    df7e:	a814      	add	r0, sp, #80	; 0x50
    df80:	4b07      	ldr	r3, [pc, #28]	; (dfa0 <SAL_AESCmac+0x1b8>)
    df82:	4798      	blx	r3
	memcpy(output, y, sizeof(y));
    df84:	2210      	movs	r2, #16
    df86:	a914      	add	r1, sp, #80	; 0x50
    df88:	9803      	ldr	r0, [sp, #12]
    df8a:	4b08      	ldr	r3, [pc, #32]	; (dfac <SAL_AESCmac+0x1c4>)
    df8c:	4798      	blx	r3
}
    df8e:	2000      	movs	r0, #0
    df90:	b024      	add	sp, #144	; 0x90
    df92:	bc1c      	pop	{r2, r3, r4}
    df94:	4690      	mov	r8, r2
    df96:	4699      	mov	r9, r3
    df98:	46a2      	mov	sl, r4
    df9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    df9c:	00019ead 	.word	0x00019ead
    dfa0:	0000dc7d 	.word	0x0000dc7d
    dfa4:	0000dbc9 	.word	0x0000dbc9
    dfa8:	000ffff0 	.word	0x000ffff0
    dfac:	00019d89 	.word	0x00019d89

0000dfb0 <AESEncode>:
 * \brief Encrypts the given block of data
 * \param[in,out] block Block of input data to be encrypted
 * \param[in] key Cryptographic key to be used in AES encryption
 */
void AESEncode(unsigned char* block, unsigned char* masterKey)
{
    dfb0:	b5f0      	push	{r4, r5, r6, r7, lr}
    dfb2:	b083      	sub	sp, #12
    dfb4:	0004      	movs	r4, r0
    dfb6:	000e      	movs	r6, r1
#ifndef UT	
	
	/* Configure the AES. */
	g_aes_cfg.encrypt_mode = AES_ENCRYPTION;
    dfb8:	4a2b      	ldr	r2, [pc, #172]	; (e068 <AESEncode+0xb8>)
    dfba:	2101      	movs	r1, #1
    dfbc:	7011      	strb	r1, [r2, #0]
	g_aes_cfg.key_size = AES_KEY_SIZE_128;
    dfbe:	2300      	movs	r3, #0
    dfc0:	7053      	strb	r3, [r2, #1]
	g_aes_cfg.start_mode = AES_AUTO_START;
    dfc2:	7091      	strb	r1, [r2, #2]
	g_aes_cfg.opmode = AES_ECB_MODE;
    dfc4:	70d3      	strb	r3, [r2, #3]
	g_aes_cfg.cfb_size = AES_CFB_SIZE_128;
    dfc6:	7113      	strb	r3, [r2, #4]
	g_aes_cfg.lod = false;
    dfc8:	7213      	strb	r3, [r2, #8]
	aes_set_config(&aes_instance,AES, &g_aes_cfg);
    dfca:	4928      	ldr	r1, [pc, #160]	; (e06c <AESEncode+0xbc>)
    dfcc:	4828      	ldr	r0, [pc, #160]	; (e070 <AESEncode+0xc0>)
    dfce:	4b29      	ldr	r3, [pc, #164]	; (e074 <AESEncode+0xc4>)
    dfd0:	4798      	blx	r3
    dfd2:	2100      	movs	r1, #0
		uint8_t u8[4];
	}long_addr;
	uint8_t index;
	for (index = 0; index < 4; index++)
	{
		long_addr.u8[index] = *data++;
    dfd4:	ad01      	add	r5, sp, #4
	
	for(uint8_t i=0;i<SUB_BLOCK_COUNT;i++)
	{
		io_data[i] = convert_byte_array_to_32_bit(masterKey+(i*(sizeof(uint32_t))));
    dfd6:	4f28      	ldr	r7, [pc, #160]	; (e078 <AESEncode+0xc8>)
    dfd8:	1870      	adds	r0, r6, r1
    dfda:	2300      	movs	r3, #0
    dfdc:	5cc2      	ldrb	r2, [r0, r3]
    dfde:	555a      	strb	r2, [r3, r5]
    dfe0:	3301      	adds	r3, #1
	for (index = 0; index < 4; index++)
    dfe2:	2b04      	cmp	r3, #4
    dfe4:	d1fa      	bne.n	dfdc <AESEncode+0x2c>
    dfe6:	9b01      	ldr	r3, [sp, #4]
    dfe8:	51cb      	str	r3, [r1, r7]
    dfea:	3104      	adds	r1, #4
	for(uint8_t i=0;i<SUB_BLOCK_COUNT;i++)
    dfec:	2910      	cmp	r1, #16
    dfee:	d1f3      	bne.n	dfd8 <AESEncode+0x28>
	}
	
	/* Set the cryptographic key. */
	aes_write_key(&aes_instance, io_data);
    dff0:	4d1f      	ldr	r5, [pc, #124]	; (e070 <AESEncode+0xc0>)
    dff2:	4921      	ldr	r1, [pc, #132]	; (e078 <AESEncode+0xc8>)
    dff4:	0028      	movs	r0, r5
    dff6:	4b21      	ldr	r3, [pc, #132]	; (e07c <AESEncode+0xcc>)
    dff8:	4798      	blx	r3
 */
static inline void aes_set_new_message(struct aes_module *const module)
{
	Assert(module);
	Assert(module->hw);
	module->hw->CTRLB.reg |= AES_CTRLB_NEWMSG;
    dffa:	682a      	ldr	r2, [r5, #0]
    dffc:	7913      	ldrb	r3, [r2, #4]
    dffe:	2102      	movs	r1, #2
    e000:	430b      	orrs	r3, r1
    e002:	7113      	strb	r3, [r2, #4]
    e004:	2100      	movs	r1, #0
		long_addr.u8[index] = *data++;
    e006:	ad01      	add	r5, sp, #4
	
	aes_set_new_message(&aes_instance);
	
	for(uint8_t i=0;i<SUB_BLOCK_COUNT;i++)
	{
		io_data[i] = convert_byte_array_to_32_bit(block+(i*(sizeof(uint32_t))));			
    e008:	4e1b      	ldr	r6, [pc, #108]	; (e078 <AESEncode+0xc8>)
    e00a:	1860      	adds	r0, r4, r1
    e00c:	2300      	movs	r3, #0
    e00e:	5cc2      	ldrb	r2, [r0, r3]
    e010:	555a      	strb	r2, [r3, r5]
    e012:	3301      	adds	r3, #1
	for (index = 0; index < 4; index++)
    e014:	2b04      	cmp	r3, #4
    e016:	d1fa      	bne.n	e00e <AESEncode+0x5e>
    e018:	9b01      	ldr	r3, [sp, #4]
    e01a:	518b      	str	r3, [r1, r6]
    e01c:	3104      	adds	r1, #4
	for(uint8_t i=0;i<SUB_BLOCK_COUNT;i++)
    e01e:	2910      	cmp	r1, #16
    e020:	d1f3      	bne.n	e00a <AESEncode+0x5a>
	}
		
	/* Write the data to be ciphered to the input data registers. */
	aes_write_input_data(&aes_instance, io_data);
    e022:	4d13      	ldr	r5, [pc, #76]	; (e070 <AESEncode+0xc0>)
    e024:	4914      	ldr	r1, [pc, #80]	; (e078 <AESEncode+0xc8>)
    e026:	0028      	movs	r0, r5
    e028:	4b15      	ldr	r3, [pc, #84]	; (e080 <AESEncode+0xd0>)
    e02a:	4798      	blx	r3
 */
static inline void aes_clear_new_message(struct aes_module *const module)
{
	Assert(module);
	Assert(module->hw);
	module->hw->CTRLB.reg &= ~AES_CTRLB_NEWMSG;
    e02c:	682d      	ldr	r5, [r5, #0]
    e02e:	792b      	ldrb	r3, [r5, #4]
    e030:	2202      	movs	r2, #2
    e032:	4393      	bics	r3, r2
    e034:	712b      	strb	r3, [r5, #4]
	Assert(module->hw);

	uint32_t int_flags = module->hw->INTFLAG.reg;
	uint32_t status_flags = 0;

	if (int_flags & AES_INTFLAG_ENCCMP) {
    e036:	2101      	movs	r1, #1
		status_flags |= AES_ENCRYPTION_COMPLETE;
	}

	if (int_flags & AES_INTFLAG_GFMCMP) {
    e038:	2002      	movs	r0, #2
    e03a:	e001      	b.n	e040 <AESEncode+0x90>
	aes_clear_new_message(&aes_instance);
	/* Wait for the end of the encryption process. */
	while (!(aes_get_status(&aes_instance) & AES_ENCRYPTION_COMPLETE)) {
    e03c:	4211      	tst	r1, r2
    e03e:	d107      	bne.n	e050 <AESEncode+0xa0>
	uint32_t int_flags = module->hw->INTFLAG.reg;
    e040:	79eb      	ldrb	r3, [r5, #7]
    e042:	b2db      	uxtb	r3, r3
	if (int_flags & AES_INTFLAG_ENCCMP) {
    e044:	000a      	movs	r2, r1
    e046:	401a      	ands	r2, r3
	if (int_flags & AES_INTFLAG_GFMCMP) {
    e048:	4218      	tst	r0, r3
    e04a:	d0f7      	beq.n	e03c <AESEncode+0x8c>
		status_flags |= AES_GF_MULTI_COMPLETE;
    e04c:	4302      	orrs	r2, r0
    e04e:	e7f5      	b.n	e03c <AESEncode+0x8c>
	}
	aes_read_output_data(&aes_instance,io_data);
    e050:	4d09      	ldr	r5, [pc, #36]	; (e078 <AESEncode+0xc8>)
    e052:	0029      	movs	r1, r5
    e054:	4806      	ldr	r0, [pc, #24]	; (e070 <AESEncode+0xc0>)
    e056:	4b0b      	ldr	r3, [pc, #44]	; (e084 <AESEncode+0xd4>)
    e058:	4798      	blx	r3
	
	memcpy(block,io_data,BLOCKSIZE);
    e05a:	2210      	movs	r2, #16
    e05c:	0029      	movs	r1, r5
    e05e:	0020      	movs	r0, r4
    e060:	4b09      	ldr	r3, [pc, #36]	; (e088 <AESEncode+0xd8>)
    e062:	4798      	blx	r3
#endif	
}
    e064:	b003      	add	sp, #12
    e066:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e068:	200026e4 	.word	0x200026e4
    e06c:	42003400 	.word	0x42003400
    e070:	200026f0 	.word	0x200026f0
    e074:	00004809 	.word	0x00004809
    e078:	20000fac 	.word	0x20000fac
    e07c:	0000489d 	.word	0x0000489d
    e080:	000048d1 	.word	0x000048d1
    e084:	00004921 	.word	0x00004921
    e088:	00019d89 	.word	0x00019d89

0000e08c <AESInit>:

/**
 * \brief Initializes the AES Engine.
 */
void AESInit(void)
{
    e08c:	b570      	push	{r4, r5, r6, lr}
#ifndef UT	
	//! [setup_config]
	aes_get_config_defaults(&g_aes_cfg);
    e08e:	4d07      	ldr	r5, [pc, #28]	; (e0ac <AESInit+0x20>)
    e090:	0028      	movs	r0, r5
    e092:	4b07      	ldr	r3, [pc, #28]	; (e0b0 <AESInit+0x24>)
    e094:	4798      	blx	r3
	//! [setup_config]

	//! [setup_config_defaults]
	aes_init(&aes_instance,AES, &g_aes_cfg);
    e096:	4c07      	ldr	r4, [pc, #28]	; (e0b4 <AESInit+0x28>)
    e098:	002a      	movs	r2, r5
    e09a:	4907      	ldr	r1, [pc, #28]	; (e0b8 <AESInit+0x2c>)
    e09c:	0020      	movs	r0, r4
    e09e:	4b07      	ldr	r3, [pc, #28]	; (e0bc <AESInit+0x30>)
    e0a0:	4798      	blx	r3
	//! [setup_config_defaults]
	//! [module_enable]
	aes_enable(&aes_instance);
    e0a2:	0020      	movs	r0, r4
    e0a4:	4b06      	ldr	r3, [pc, #24]	; (e0c0 <AESInit+0x34>)
    e0a6:	4798      	blx	r3
#endif	
}
    e0a8:	bd70      	pop	{r4, r5, r6, pc}
    e0aa:	46c0      	nop			; (mov r8, r8)
    e0ac:	200026e4 	.word	0x200026e4
    e0b0:	000047cd 	.word	0x000047cd
    e0b4:	200026f0 	.word	0x200026f0
    e0b8:	42003400 	.word	0x42003400
    e0bc:	0000487d 	.word	0x0000487d
    e0c0:	000047e7 	.word	0x000047e7

0000e0c4 <PDS_Init>:

\param[in] none
\param[out] status - The return status of the function's operation of type PdsStatus_t.
******************************************************************************/
PdsStatus_t PDS_Init(void)
{
    e0c4:	b510      	push	{r4, lr}
#if (ENABLE_PDS == 1)	
	PdsStatus_t status = pdsWlInit();
    e0c6:	4b03      	ldr	r3, [pc, #12]	; (e0d4 <PDS_Init+0x10>)
    e0c8:	4798      	blx	r3
	pdsUnInitFlag = false;
    e0ca:	2200      	movs	r2, #0
    e0cc:	4b02      	ldr	r3, [pc, #8]	; (e0d8 <PDS_Init+0x14>)
    e0ce:	701a      	strb	r2, [r3, #0]
	return status;
#else
	return PDS_OK;
#endif
}
    e0d0:	bd10      	pop	{r4, pc}
    e0d2:	46c0      	nop			; (mov r8, r8)
    e0d4:	0000e901 	.word	0x0000e901
    e0d8:	20000fbc 	.word	0x20000fbc

0000e0dc <PDS_Store>:
\param[in] pdsFileItemIdx - The file id to register file to PDS.
\param[in] item - The item id of the item in PDS.
\param[out] status - The return status of the function's operation of type PdsStatus_t.
******************************************************************************/
PdsStatus_t PDS_Store(PdsFileItemIdx_t pdsFileItemIdx, uint8_t item)
{
    e0dc:	b510      	push	{r4, lr}
	PdsStatus_t status = PDS_OK;
#if (ENABLE_PDS == 1)
	if (false == pdsUnInitFlag)
    e0de:	4b14      	ldr	r3, [pc, #80]	; (e130 <PDS_Store+0x54>)
    e0e0:	781a      	ldrb	r2, [r3, #0]
	PdsStatus_t status = PDS_OK;
    e0e2:	2300      	movs	r3, #0
	if (false == pdsUnInitFlag)
    e0e4:	2a00      	cmp	r2, #0
    e0e6:	d106      	bne.n	e0f6 <PDS_Store+0x1a>
	{
		if ((0 != fileMarks[pdsFileItemIdx].numItems) && 				\
    e0e8:	0102      	lsls	r2, r0, #4
    e0ea:	4b12      	ldr	r3, [pc, #72]	; (e134 <PDS_Store+0x58>)
    e0ec:	189b      	adds	r3, r3, r2
    e0ee:	791a      	ldrb	r2, [r3, #4]
				status = PDS_INVLIAD_FILE_IDX;
			}
		}
		else
		{
			status = PDS_INVLIAD_FILE_IDX;
    e0f0:	2305      	movs	r3, #5
		if ((0 != fileMarks[pdsFileItemIdx].numItems) && 				\
    e0f2:	2a00      	cmp	r2, #0
    e0f4:	d101      	bne.n	e0fa <PDS_Store+0x1e>
		}
	}
#endif	
	return status; 
}
    e0f6:	0018      	movs	r0, r3
    e0f8:	bd10      	pop	{r4, pc}
				(0 != fileMarks[pdsFileItemIdx].fileMarkListAddr) &&	\
    e0fa:	0103      	lsls	r3, r0, #4
    e0fc:	4a0d      	ldr	r2, [pc, #52]	; (e134 <PDS_Store+0x58>)
    e0fe:	589c      	ldr	r4, [r3, r2]
		if ((0 != fileMarks[pdsFileItemIdx].numItems) && 				\
    e100:	2c00      	cmp	r4, #0
    e102:	d011      	beq.n	e128 <PDS_Store+0x4c>
				(0 != fileMarks[pdsFileItemIdx].itemListAddr)			\
    e104:	001a      	movs	r2, r3
    e106:	4b0b      	ldr	r3, [pc, #44]	; (e134 <PDS_Store+0x58>)
    e108:	189b      	adds	r3, r3, r2
				(0 != fileMarks[pdsFileItemIdx].fileMarkListAddr) &&	\
    e10a:	689b      	ldr	r3, [r3, #8]
    e10c:	2b00      	cmp	r3, #0
    e10e:	d00d      	beq.n	e12c <PDS_Store+0x50>
				status = PDS_INVLIAD_FILE_IDX;
    e110:	2305      	movs	r3, #5
			if (PDS_MAX_FILE_IDX > pdsFileItemIdx)
    e112:	280c      	cmp	r0, #12
    e114:	d8ef      	bhi.n	e0f6 <PDS_Store+0x1a>
				*((fileMarks[pdsFileItemIdx].fileMarkListAddr) + item) = PDS_OP_STORE;
    e116:	3b04      	subs	r3, #4
    e118:	5463      	strb	r3, [r4, r1]
				isFileSet[pdsFileItemIdx] = true;
    e11a:	4a07      	ldr	r2, [pc, #28]	; (e138 <PDS_Store+0x5c>)
    e11c:	5413      	strb	r3, [r2, r0]
				pdsPostTask(PDS_STORE_DELETE_TASK_ID);
    e11e:	2001      	movs	r0, #1
    e120:	4b06      	ldr	r3, [pc, #24]	; (e13c <PDS_Store+0x60>)
    e122:	4798      	blx	r3
	PdsStatus_t status = PDS_OK;
    e124:	2300      	movs	r3, #0
    e126:	e7e6      	b.n	e0f6 <PDS_Store+0x1a>
			status = PDS_INVLIAD_FILE_IDX;
    e128:	2305      	movs	r3, #5
    e12a:	e7e4      	b.n	e0f6 <PDS_Store+0x1a>
    e12c:	2305      	movs	r3, #5
    e12e:	e7e2      	b.n	e0f6 <PDS_Store+0x1a>
    e130:	20000fbc 	.word	0x20000fbc
    e134:	20002708 	.word	0x20002708
    e138:	200026f8 	.word	0x200026f8
    e13c:	0000e5d9 	.word	0x0000e5d9

0000e140 <PDS_Restore>:
\param[in] pdsFileItemIdx - The file id to register file to PDS.
\param[in] item - The item id of the item in PDS.
\param[out] status - The return status of the function's operation of type PdsStatus_t.
******************************************************************************/
PdsStatus_t PDS_Restore(PdsFileItemIdx_t pdsFileItemIdx, uint8_t item)
{
    e140:	b5f0      	push	{r4, r5, r6, r7, lr}
    e142:	b0c3      	sub	sp, #268	; 0x10c
    e144:	0006      	movs	r6, r0
    e146:	000d      	movs	r5, r1
	PdsStatus_t status = PDS_OK;
#if (ENABLE_PDS == 1)
	if (false == pdsUnInitFlag)
    e148:	4b2a      	ldr	r3, [pc, #168]	; (e1f4 <PDS_Restore+0xb4>)
    e14a:	781b      	ldrb	r3, [r3, #0]
	PdsStatus_t status = PDS_OK;
    e14c:	2400      	movs	r4, #0
	if (false == pdsUnInitFlag)
    e14e:	2b00      	cmp	r3, #0
    e150:	d106      	bne.n	e160 <PDS_Restore+0x20>
		uint8_t *ptr;
		ItemMap_t itemInfo;
		ItemHeader_t itemHeader;
		uint16_t size;
		
		if ((0 != fileMarks[pdsFileItemIdx].numItems) && 				\
    e152:	0102      	lsls	r2, r0, #4
    e154:	4b28      	ldr	r3, [pc, #160]	; (e1f8 <PDS_Restore+0xb8>)
    e156:	189b      	adds	r3, r3, r2
    e158:	791c      	ldrb	r4, [r3, #4]
    e15a:	2c00      	cmp	r4, #0
    e15c:	d103      	bne.n	e166 <PDS_Restore+0x26>
			
			return status;
		}
		else
		{
			status = PDS_INVLIAD_FILE_IDX;
    e15e:	2405      	movs	r4, #5
		}
	}
#endif	
	return status;
}
    e160:	0020      	movs	r0, r4
    e162:	b043      	add	sp, #268	; 0x10c
    e164:	bdf0      	pop	{r4, r5, r6, r7, pc}
		(0 != fileMarks[pdsFileItemIdx].fileMarkListAddr) &&	\
    e166:	0013      	movs	r3, r2
		if ((0 != fileMarks[pdsFileItemIdx].numItems) && 				\
    e168:	4a23      	ldr	r2, [pc, #140]	; (e1f8 <PDS_Restore+0xb8>)
    e16a:	589b      	ldr	r3, [r3, r2]
    e16c:	2b00      	cmp	r3, #0
    e16e:	d0f6      	beq.n	e15e <PDS_Restore+0x1e>
		(0 != fileMarks[pdsFileItemIdx].itemListAddr)			\
    e170:	0102      	lsls	r2, r0, #4
    e172:	4b21      	ldr	r3, [pc, #132]	; (e1f8 <PDS_Restore+0xb8>)
    e174:	189b      	adds	r3, r3, r2
    e176:	689f      	ldr	r7, [r3, #8]
		(0 != fileMarks[pdsFileItemIdx].fileMarkListAddr) &&	\
    e178:	2f00      	cmp	r7, #0
    e17a:	d0f0      	beq.n	e15e <PDS_Restore+0x1e>
			memset(&buffer, 0, sizeof(PdsMem_t));
    e17c:	2280      	movs	r2, #128	; 0x80
    e17e:	0052      	lsls	r2, r2, #1
    e180:	2100      	movs	r1, #0
    e182:	a802      	add	r0, sp, #8
    e184:	4b1d      	ldr	r3, [pc, #116]	; (e1fc <PDS_Restore+0xbc>)
    e186:	4798      	blx	r3
			memcpy((void *)&itemInfo, (void *)(fileMarks[pdsFileItemIdx].itemListAddr + (fileMarks[pdsFileItemIdx].numItems - 1)), sizeof(ItemMap_t));
    e188:	4b1d      	ldr	r3, [pc, #116]	; (e200 <PDS_Restore+0xc0>)
    e18a:	469c      	mov	ip, r3
    e18c:	4464      	add	r4, ip
    e18e:	00e4      	lsls	r4, r4, #3
    e190:	1939      	adds	r1, r7, r4
    e192:	2208      	movs	r2, #8
    e194:	4668      	mov	r0, sp
    e196:	4b1b      	ldr	r3, [pc, #108]	; (e204 <PDS_Restore+0xc4>)
    e198:	4798      	blx	r3
			size = itemInfo.itemOffset + itemInfo.size + sizeof(ItemHeader_t);
    e19a:	466b      	mov	r3, sp
    e19c:	79da      	ldrb	r2, [r3, #7]
    e19e:	799b      	ldrb	r3, [r3, #6]
    e1a0:	18d2      	adds	r2, r2, r3
			status = pdsWlRead(pdsFileItemIdx, &buffer, size);
    e1a2:	3205      	adds	r2, #5
    e1a4:	a902      	add	r1, sp, #8
    e1a6:	0030      	movs	r0, r6
    e1a8:	4b17      	ldr	r3, [pc, #92]	; (e208 <PDS_Restore+0xc8>)
    e1aa:	4798      	blx	r3
    e1ac:	1e04      	subs	r4, r0, #0
			if (status != PDS_OK)
    e1ae:	d1d7      	bne.n	e160 <PDS_Restore+0x20>
			memcpy((void *)&itemInfo, (void *)(fileMarks[pdsFileItemIdx].itemListAddr + item), sizeof(ItemMap_t));
    e1b0:	0136      	lsls	r6, r6, #4
    e1b2:	4b11      	ldr	r3, [pc, #68]	; (e1f8 <PDS_Restore+0xb8>)
    e1b4:	199e      	adds	r6, r3, r6
    e1b6:	00eb      	lsls	r3, r5, #3
    e1b8:	68b1      	ldr	r1, [r6, #8]
    e1ba:	18c9      	adds	r1, r1, r3
    e1bc:	2208      	movs	r2, #8
    e1be:	4668      	mov	r0, sp
    e1c0:	4b10      	ldr	r3, [pc, #64]	; (e204 <PDS_Restore+0xc4>)
    e1c2:	4798      	blx	r3
			if (item == itemInfo.itemId)
    e1c4:	466b      	mov	r3, sp
    e1c6:	795b      	ldrb	r3, [r3, #5]
    e1c8:	42ab      	cmp	r3, r5
    e1ca:	d001      	beq.n	e1d0 <PDS_Restore+0x90>
				return PDS_NOT_FOUND;
    e1cc:	2403      	movs	r4, #3
    e1ce:	e7c7      	b.n	e160 <PDS_Restore+0x20>
			ptr += itemInfo.itemOffset;
    e1d0:	466b      	mov	r3, sp
    e1d2:	79d9      	ldrb	r1, [r3, #7]
    e1d4:	2315      	movs	r3, #21
    e1d6:	446b      	add	r3, sp
    e1d8:	469c      	mov	ip, r3
    e1da:	4461      	add	r1, ip
				if (false == itemHeader.delete)
    e1dc:	790b      	ldrb	r3, [r1, #4]
    e1de:	2b00      	cmp	r3, #0
    e1e0:	d001      	beq.n	e1e6 <PDS_Restore+0xa6>
					return PDS_ITEM_DELETED;
    e1e2:	2406      	movs	r4, #6
    e1e4:	e7bc      	b.n	e160 <PDS_Restore+0x20>
					memcpy((void *)(itemInfo.ramAddress), (void *)(ptr), itemInfo.size);
    e1e6:	466b      	mov	r3, sp
    e1e8:	799a      	ldrb	r2, [r3, #6]
					ptr += sizeof(ItemHeader_t);
    e1ea:	3105      	adds	r1, #5
					memcpy((void *)(itemInfo.ramAddress), (void *)(ptr), itemInfo.size);
    e1ec:	9800      	ldr	r0, [sp, #0]
    e1ee:	4b05      	ldr	r3, [pc, #20]	; (e204 <PDS_Restore+0xc4>)
    e1f0:	4798      	blx	r3
			return status;
    e1f2:	e7b5      	b.n	e160 <PDS_Restore+0x20>
    e1f4:	20000fbc 	.word	0x20000fbc
    e1f8:	20002708 	.word	0x20002708
    e1fc:	00019ead 	.word	0x00019ead
    e200:	1fffffff 	.word	0x1fffffff
    e204:	00019d89 	.word	0x00019d89
    e208:	0000ea9d 	.word	0x0000ea9d

0000e20c <PDS_IsRestorable>:
\brief	This function checks if all the registered files are restorable.

\param[out] status - The return status of the function's operation.
******************************************************************************/
bool PDS_IsRestorable(void)
{
    e20c:	b570      	push	{r4, r5, r6, lr}
	bool return_status = false;
#if (ENABLE_PDS == 1)
	if (false == pdsUnInitFlag)
    e20e:	4b0e      	ldr	r3, [pc, #56]	; (e248 <PDS_IsRestorable+0x3c>)
    e210:	7818      	ldrb	r0, [r3, #0]
    e212:	2800      	cmp	r0, #0
    e214:	d117      	bne.n	e246 <PDS_IsRestorable+0x3a>
    e216:	4d0d      	ldr	r5, [pc, #52]	; (e24c <PDS_IsRestorable+0x40>)
    e218:	2400      	movs	r4, #0
			if ((0 != fileMarks[pdsFileItemIdx].numItems) && 			\
			(0 != fileMarks[pdsFileItemIdx].fileMarkListAddr) &&	\
			(0 != fileMarks[pdsFileItemIdx].itemListAddr)			\
			)
			{
				if ( !(isFileFound(pdsFileItemIdx)) )
    e21a:	4e0d      	ldr	r6, [pc, #52]	; (e250 <PDS_IsRestorable+0x44>)
    e21c:	e004      	b.n	e228 <PDS_IsRestorable+0x1c>
		for (uint8_t pdsFileItemIdx = 0; pdsFileItemIdx < PDS_MAX_FILE_IDX; pdsFileItemIdx++)
    e21e:	3401      	adds	r4, #1
    e220:	b2e4      	uxtb	r4, r4
    e222:	3510      	adds	r5, #16
    e224:	2c0d      	cmp	r4, #13
    e226:	d00d      	beq.n	e244 <PDS_IsRestorable+0x38>
			if ((0 != fileMarks[pdsFileItemIdx].numItems) && 			\
    e228:	792b      	ldrb	r3, [r5, #4]
    e22a:	2b00      	cmp	r3, #0
    e22c:	d0f7      	beq.n	e21e <PDS_IsRestorable+0x12>
    e22e:	682b      	ldr	r3, [r5, #0]
    e230:	2b00      	cmp	r3, #0
    e232:	d0f4      	beq.n	e21e <PDS_IsRestorable+0x12>
			(0 != fileMarks[pdsFileItemIdx].fileMarkListAddr) &&	\
    e234:	68ab      	ldr	r3, [r5, #8]
    e236:	2b00      	cmp	r3, #0
    e238:	d0f1      	beq.n	e21e <PDS_IsRestorable+0x12>
				if ( !(isFileFound(pdsFileItemIdx)) )
    e23a:	0020      	movs	r0, r4
    e23c:	47b0      	blx	r6
    e23e:	2800      	cmp	r0, #0
    e240:	d1ed      	bne.n	e21e <PDS_IsRestorable+0x12>
    e242:	e000      	b.n	e246 <PDS_IsRestorable+0x3a>
			}
		}
	}
	return_status = true;
#endif
	return return_status;
    e244:	2001      	movs	r0, #1
}
    e246:	bd70      	pop	{r4, r5, r6, pc}
    e248:	20000fbc 	.word	0x20000fbc
    e24c:	20002708 	.word	0x20002708
    e250:	0000eac9 	.word	0x0000eac9

0000e254 <PDS_DeleteAll>:
\brief This function will erase all the items stored in the PDS.

\param[out] status - The return status of the function's operation.
******************************************************************************/
PdsStatus_t PDS_DeleteAll(void)
{
    e254:	b510      	push	{r4, lr}
#if (ENABLE_PDS == 1)
	if (false == pdsUnInitFlag)
    e256:	4b04      	ldr	r3, [pc, #16]	; (e268 <PDS_DeleteAll+0x14>)
    e258:	781b      	ldrb	r3, [r3, #0]
    e25a:	2b00      	cmp	r3, #0
    e25c:	d001      	beq.n	e262 <PDS_DeleteAll+0xe>
	{
		pdsWlDeleteAll();
	}
#endif
	return PDS_OK;
}
    e25e:	2000      	movs	r0, #0
    e260:	bd10      	pop	{r4, pc}
		pdsWlDeleteAll();
    e262:	4b02      	ldr	r3, [pc, #8]	; (e26c <PDS_DeleteAll+0x18>)
    e264:	4798      	blx	r3
    e266:	e7fa      	b.n	e25e <PDS_DeleteAll+0xa>
    e268:	20000fbc 	.word	0x20000fbc
    e26c:	0000eae5 	.word	0x0000eae5

0000e270 <PDS_RestoreAll>:
		from all registered files.

\param[out] status - The return status of the function's operation.
******************************************************************************/
PdsStatus_t PDS_RestoreAll(void)
{
    e270:	b5f0      	push	{r4, r5, r6, r7, lr}
    e272:	46ce      	mov	lr, r9
    e274:	4647      	mov	r7, r8
    e276:	b580      	push	{r7, lr}
    e278:	b0c5      	sub	sp, #276	; 0x114
	PdsStatus_t status = PDS_OK;
#if (ENABLE_PDS == 1)
	if (false == pdsUnInitFlag)
    e27a:	4b32      	ldr	r3, [pc, #200]	; (e344 <PDS_RestoreAll+0xd4>)
    e27c:	781b      	ldrb	r3, [r3, #0]
	PdsStatus_t status = PDS_OK;
    e27e:	2000      	movs	r0, #0
	if (false == pdsUnInitFlag)
    e280:	2b00      	cmp	r3, #0
    e282:	d159      	bne.n	e338 <PDS_RestoreAll+0xc8>
    e284:	4e30      	ldr	r6, [pc, #192]	; (e348 <PDS_RestoreAll+0xd8>)
    e286:	2700      	movs	r7, #0
					ptr += itemInfo.itemOffset;
					memcpy((void *)(&itemHeader), (void *)(ptr), sizeof(ItemHeader_t));
					ptr += sizeof(ItemHeader_t);
					if (false == itemHeader.delete)
					{
						memcpy((void *)(itemInfo.ramAddress), (void *)(ptr), itemHeader.size);
    e288:	4b30      	ldr	r3, [pc, #192]	; (e34c <PDS_RestoreAll+0xdc>)
    e28a:	4698      	mov	r8, r3
    e28c:	e026      	b.n	e2dc <PDS_RestoreAll+0x6c>
				for (uint8_t itemIdx = 0; itemIdx < fileMarks[pdsFileItemIdx].numItems; itemIdx++)
    e28e:	3401      	adds	r4, #1
    e290:	b2e4      	uxtb	r4, r4
    e292:	792b      	ldrb	r3, [r5, #4]
    e294:	42a3      	cmp	r3, r4
    e296:	d918      	bls.n	e2ca <PDS_RestoreAll+0x5a>
					memcpy((void *)&itemInfo, (void *)(fileMarks[pdsFileItemIdx].itemListAddr + itemIdx), sizeof(ItemMap_t));
    e298:	00e1      	lsls	r1, r4, #3
    e29a:	68ab      	ldr	r3, [r5, #8]
    e29c:	469c      	mov	ip, r3
    e29e:	4461      	add	r1, ip
    e2a0:	2208      	movs	r2, #8
    e2a2:	a802      	add	r0, sp, #8
    e2a4:	47c8      	blx	r9
					ptr += itemInfo.itemOffset;
    e2a6:	ab02      	add	r3, sp, #8
    e2a8:	79d9      	ldrb	r1, [r3, #7]
    e2aa:	2315      	movs	r3, #21
    e2ac:	aa02      	add	r2, sp, #8
    e2ae:	4694      	mov	ip, r2
    e2b0:	4463      	add	r3, ip
    e2b2:	469c      	mov	ip, r3
    e2b4:	4461      	add	r1, ip
					if (false == itemHeader.delete)
    e2b6:	790b      	ldrb	r3, [r1, #4]
    e2b8:	2b00      	cmp	r3, #0
    e2ba:	d1e8      	bne.n	e28e <PDS_RestoreAll+0x1e>
						memcpy((void *)(itemInfo.ramAddress), (void *)(ptr), itemHeader.size);
    e2bc:	9b02      	ldr	r3, [sp, #8]
    e2be:	9301      	str	r3, [sp, #4]
    e2c0:	788a      	ldrb	r2, [r1, #2]
					ptr += sizeof(ItemHeader_t);
    e2c2:	3105      	adds	r1, #5
						memcpy((void *)(itemInfo.ramAddress), (void *)(ptr), itemHeader.size);
    e2c4:	0018      	movs	r0, r3
    e2c6:	47c0      	blx	r8
    e2c8:	e7e1      	b.n	e28e <PDS_RestoreAll+0x1e>
					}
				}
				if(fileMarks[pdsFileItemIdx].fIDcb != NULL)
    e2ca:	68eb      	ldr	r3, [r5, #12]
    e2cc:	2b00      	cmp	r3, #0
    e2ce:	d000      	beq.n	e2d2 <PDS_RestoreAll+0x62>
				{
					fileMarks[pdsFileItemIdx].fIDcb();
    e2d0:	4798      	blx	r3
		for (uint8_t pdsFileItemIdx = 0; pdsFileItemIdx < PDS_MAX_FILE_IDX; pdsFileItemIdx++)
    e2d2:	3701      	adds	r7, #1
    e2d4:	b2ff      	uxtb	r7, r7
    e2d6:	3610      	adds	r6, #16
    e2d8:	2f0d      	cmp	r7, #13
    e2da:	d02c      	beq.n	e336 <PDS_RestoreAll+0xc6>
    e2dc:	0035      	movs	r5, r6
			if ((0 != fileMarks[pdsFileItemIdx].numItems) && 			\
    e2de:	7934      	ldrb	r4, [r6, #4]
    e2e0:	2c00      	cmp	r4, #0
    e2e2:	d0f6      	beq.n	e2d2 <PDS_RestoreAll+0x62>
    e2e4:	6833      	ldr	r3, [r6, #0]
    e2e6:	2b00      	cmp	r3, #0
    e2e8:	d0f3      	beq.n	e2d2 <PDS_RestoreAll+0x62>
			(0 != fileMarks[pdsFileItemIdx].itemListAddr)			\
    e2ea:	68b3      	ldr	r3, [r6, #8]
    e2ec:	4699      	mov	r9, r3
			(0 != fileMarks[pdsFileItemIdx].fileMarkListAddr) &&	\
    e2ee:	2b00      	cmp	r3, #0
    e2f0:	d0ef      	beq.n	e2d2 <PDS_RestoreAll+0x62>
				memset(&buffer, 0, sizeof(PdsMem_t));
    e2f2:	2280      	movs	r2, #128	; 0x80
    e2f4:	0052      	lsls	r2, r2, #1
    e2f6:	2100      	movs	r1, #0
    e2f8:	a804      	add	r0, sp, #16
    e2fa:	4b15      	ldr	r3, [pc, #84]	; (e350 <PDS_RestoreAll+0xe0>)
    e2fc:	4798      	blx	r3
				memcpy((void *)&itemInfo, (void *)(fileMarks[pdsFileItemIdx].itemListAddr + (fileMarks[pdsFileItemIdx].numItems - 1)), sizeof(ItemMap_t));
    e2fe:	4b15      	ldr	r3, [pc, #84]	; (e354 <PDS_RestoreAll+0xe4>)
    e300:	469c      	mov	ip, r3
    e302:	4464      	add	r4, ip
    e304:	00e4      	lsls	r4, r4, #3
    e306:	0021      	movs	r1, r4
    e308:	4449      	add	r1, r9
    e30a:	2208      	movs	r2, #8
    e30c:	a802      	add	r0, sp, #8
    e30e:	4b0f      	ldr	r3, [pc, #60]	; (e34c <PDS_RestoreAll+0xdc>)
    e310:	4798      	blx	r3
				size = itemInfo.itemOffset + itemInfo.size + sizeof(ItemHeader_t);
    e312:	ab02      	add	r3, sp, #8
    e314:	79da      	ldrb	r2, [r3, #7]
    e316:	799b      	ldrb	r3, [r3, #6]
    e318:	18d2      	adds	r2, r2, r3
				status = pdsWlRead(pdsFileItemIdx, &buffer, size);
    e31a:	3205      	adds	r2, #5
    e31c:	a904      	add	r1, sp, #16
    e31e:	0038      	movs	r0, r7
    e320:	4b0d      	ldr	r3, [pc, #52]	; (e358 <PDS_RestoreAll+0xe8>)
    e322:	4798      	blx	r3
				if (status != PDS_OK)
    e324:	2800      	cmp	r0, #0
    e326:	d107      	bne.n	e338 <PDS_RestoreAll+0xc8>
				for (uint8_t itemIdx = 0; itemIdx < fileMarks[pdsFileItemIdx].numItems; itemIdx++)
    e328:	7933      	ldrb	r3, [r6, #4]
    e32a:	2400      	movs	r4, #0
    e32c:	2b00      	cmp	r3, #0
    e32e:	d0cc      	beq.n	e2ca <PDS_RestoreAll+0x5a>
					memcpy((void *)&itemInfo, (void *)(fileMarks[pdsFileItemIdx].itemListAddr + itemIdx), sizeof(ItemMap_t));
    e330:	4b06      	ldr	r3, [pc, #24]	; (e34c <PDS_RestoreAll+0xdc>)
    e332:	4699      	mov	r9, r3
    e334:	e7b0      	b.n	e298 <PDS_RestoreAll+0x28>
    e336:	2000      	movs	r0, #0
			}
		}
	}
#endif	
	return status;
}
    e338:	b045      	add	sp, #276	; 0x114
    e33a:	bc0c      	pop	{r2, r3}
    e33c:	4690      	mov	r8, r2
    e33e:	4699      	mov	r9, r3
    e340:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e342:	46c0      	nop			; (mov r8, r8)
    e344:	20000fbc 	.word	0x20000fbc
    e348:	20002708 	.word	0x20002708
    e34c:	00019d89 	.word	0x00019d89
    e350:	00019ead 	.word	0x00019ead
    e354:	1fffffff 	.word	0x1fffffff
    e358:	0000ea9d 	.word	0x0000ea9d

0000e35c <PDS_StoreAll>:

\param[in] none
\param[out] status - The return status of the function's operation of type PdsStatus_t.
******************************************************************************/
PdsStatus_t PDS_StoreAll(void)
{
    e35c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#if (ENABLE_PDS == 1)
	if (false == pdsUnInitFlag)
    e35e:	4b14      	ldr	r3, [pc, #80]	; (e3b0 <PDS_StoreAll+0x54>)
    e360:	781b      	ldrb	r3, [r3, #0]
    e362:	2b00      	cmp	r3, #0
    e364:	d121      	bne.n	e3aa <PDS_StoreAll+0x4e>
    e366:	4813      	ldr	r0, [pc, #76]	; (e3b4 <PDS_StoreAll+0x58>)
    e368:	4d13      	ldr	r5, [pc, #76]	; (e3b8 <PDS_StoreAll+0x5c>)
    e36a:	0007      	movs	r7, r0
    e36c:	37d0      	adds	r7, #208	; 0xd0
    e36e:	2600      	movs	r6, #0
			(0 != fileMarks[pdsFileItemIdx].itemListAddr)			\
			)
			{
				for (uint8_t itemIdx = 0; itemIdx < fileMarks[pdsFileItemIdx].numItems; itemIdx++)
				{
					*(fileMarks[pdsFileItemIdx].fileMarkListAddr + itemIdx) = PDS_OP_STORE;
    e370:	2401      	movs	r4, #1
    e372:	e004      	b.n	e37e <PDS_StoreAll+0x22>
				}
				isFileSet[pdsFileItemIdx] = true;
    e374:	702c      	strb	r4, [r5, #0]
    e376:	3010      	adds	r0, #16
    e378:	3501      	adds	r5, #1
		for (uint8_t pdsFileItemIdx = 0; pdsFileItemIdx < PDS_MAX_FILE_IDX; pdsFileItemIdx++)
    e37a:	4287      	cmp	r7, r0
    e37c:	d012      	beq.n	e3a4 <PDS_StoreAll+0x48>
    e37e:	0002      	movs	r2, r0
			if ((0 != fileMarks[pdsFileItemIdx].numItems) && 			\
    e380:	7903      	ldrb	r3, [r0, #4]
    e382:	2b00      	cmp	r3, #0
    e384:	d0f7      	beq.n	e376 <PDS_StoreAll+0x1a>
    e386:	6803      	ldr	r3, [r0, #0]
    e388:	2b00      	cmp	r3, #0
    e38a:	d0f4      	beq.n	e376 <PDS_StoreAll+0x1a>
			(0 != fileMarks[pdsFileItemIdx].fileMarkListAddr) &&	\
    e38c:	6883      	ldr	r3, [r0, #8]
    e38e:	2b00      	cmp	r3, #0
    e390:	d0f1      	beq.n	e376 <PDS_StoreAll+0x1a>
    e392:	0033      	movs	r3, r6
					*(fileMarks[pdsFileItemIdx].fileMarkListAddr + itemIdx) = PDS_OP_STORE;
    e394:	6811      	ldr	r1, [r2, #0]
    e396:	54cc      	strb	r4, [r1, r3]
				for (uint8_t itemIdx = 0; itemIdx < fileMarks[pdsFileItemIdx].numItems; itemIdx++)
    e398:	3301      	adds	r3, #1
    e39a:	b2db      	uxtb	r3, r3
    e39c:	7911      	ldrb	r1, [r2, #4]
    e39e:	4299      	cmp	r1, r3
    e3a0:	d8f8      	bhi.n	e394 <PDS_StoreAll+0x38>
    e3a2:	e7e7      	b.n	e374 <PDS_StoreAll+0x18>
			}
		}
		pdsPostTask(PDS_STORE_DELETE_TASK_ID);
    e3a4:	2001      	movs	r0, #1
    e3a6:	4b05      	ldr	r3, [pc, #20]	; (e3bc <PDS_StoreAll+0x60>)
    e3a8:	4798      	blx	r3
	}
#endif	
	return PDS_OK;
}
    e3aa:	2000      	movs	r0, #0
    e3ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    e3ae:	46c0      	nop			; (mov r8, r8)
    e3b0:	20000fbc 	.word	0x20000fbc
    e3b4:	20002708 	.word	0x20002708
    e3b8:	200026f8 	.word	0x200026f8
    e3bc:	0000e5d9 	.word	0x0000e5d9

0000e3c0 <PDS_RegFile>:

\param[in] argFileId - The file id to register file to PDS.
\param[out] status - The return status of the function's operation of type PdsStatus_t.
******************************************************************************/
PdsStatus_t PDS_RegFile(PdsFileItemIdx_t argFileId, PdsFileMarks_t argFileMarks)
{
    e3c0:	b084      	sub	sp, #16
    e3c2:	b510      	push	{r4, lr}
    e3c4:	9103      	str	r1, [sp, #12]
    e3c6:	9204      	str	r2, [sp, #16]
    e3c8:	9305      	str	r3, [sp, #20]
	PdsStatus_t status = PDS_OK;
#if (ENABLE_PDS == 1)
	if (false == pdsUnInitFlag)
    e3ca:	4b0b      	ldr	r3, [pc, #44]	; (e3f8 <PDS_RegFile+0x38>)
    e3cc:	781a      	ldrb	r2, [r3, #0]
	PdsStatus_t status = PDS_OK;
    e3ce:	2300      	movs	r3, #0
	if (false == pdsUnInitFlag)
    e3d0:	2a00      	cmp	r2, #0
    e3d2:	d102      	bne.n	e3da <PDS_RegFile+0x1a>
		{
			memcpy(&fileMarks[argFileId], &argFileMarks, sizeof(PdsFileMarks_t));
		}
		else
		{
			status = PDS_INVLIAD_FILE_IDX;
    e3d4:	3305      	adds	r3, #5
		if (PDS_MAX_FILE_IDX > argFileId)
    e3d6:	280c      	cmp	r0, #12
    e3d8:	d904      	bls.n	e3e4 <PDS_RegFile+0x24>
		}
	}
#endif	
	return status;
}
    e3da:	0018      	movs	r0, r3
    e3dc:	bc10      	pop	{r4}
    e3de:	bc08      	pop	{r3}
    e3e0:	b004      	add	sp, #16
    e3e2:	4718      	bx	r3
			memcpy(&fileMarks[argFileId], &argFileMarks, sizeof(PdsFileMarks_t));
    e3e4:	0100      	lsls	r0, r0, #4
    e3e6:	aa03      	add	r2, sp, #12
    e3e8:	4b04      	ldr	r3, [pc, #16]	; (e3fc <PDS_RegFile+0x3c>)
    e3ea:	1818      	adds	r0, r3, r0
    e3ec:	ca1a      	ldmia	r2!, {r1, r3, r4}
    e3ee:	c01a      	stmia	r0!, {r1, r3, r4}
    e3f0:	6813      	ldr	r3, [r2, #0]
    e3f2:	6003      	str	r3, [r0, #0]
	PdsStatus_t status = PDS_OK;
    e3f4:	2300      	movs	r3, #0
    e3f6:	e7f0      	b.n	e3da <PDS_RegFile+0x1a>
    e3f8:	20000fbc 	.word	0x20000fbc
    e3fc:	20002708 	.word	0x20002708

0000e400 <PDS_UnRegFile>:

\param[in] argFileId - The file id to register file to PDS.
\param[out] status - The return status of the function's operation of type PdsStatus_t.
******************************************************************************/
PdsStatus_t PDS_UnRegFile(PdsFileItemIdx_t argFileId)
{
    e400:	b510      	push	{r4, lr}
	PdsStatus_t status = PDS_OK;
#if (ENABLE_PDS == 1)
	if (false == pdsUnInitFlag)
    e402:	4b09      	ldr	r3, [pc, #36]	; (e428 <PDS_UnRegFile+0x28>)
    e404:	781a      	ldrb	r2, [r3, #0]
	PdsStatus_t status = PDS_OK;
    e406:	2300      	movs	r3, #0
	if (false == pdsUnInitFlag)
    e408:	2a00      	cmp	r2, #0
    e40a:	d102      	bne.n	e412 <PDS_UnRegFile+0x12>
		{
			memset(&fileMarks[argFileId], 0, sizeof(PdsFileMarks_t));
		}
		else
		{
			status = PDS_INVLIAD_FILE_IDX;
    e40c:	3305      	adds	r3, #5
		if (PDS_MAX_FILE_IDX > argFileId)
    e40e:	280c      	cmp	r0, #12
    e410:	d901      	bls.n	e416 <PDS_UnRegFile+0x16>
		}
	}
#endif
	return status;
}
    e412:	0018      	movs	r0, r3
    e414:	bd10      	pop	{r4, pc}
			memset(&fileMarks[argFileId], 0, sizeof(PdsFileMarks_t));
    e416:	0100      	lsls	r0, r0, #4
    e418:	4b04      	ldr	r3, [pc, #16]	; (e42c <PDS_UnRegFile+0x2c>)
    e41a:	18c0      	adds	r0, r0, r3
    e41c:	3210      	adds	r2, #16
    e41e:	2100      	movs	r1, #0
    e420:	4b03      	ldr	r3, [pc, #12]	; (e430 <PDS_UnRegFile+0x30>)
    e422:	4798      	blx	r3
	PdsStatus_t status = PDS_OK;
    e424:	2300      	movs	r3, #0
    e426:	e7f4      	b.n	e412 <PDS_UnRegFile+0x12>
    e428:	20000fbc 	.word	0x20000fbc
    e42c:	20002708 	.word	0x20002708
    e430:	00019ead 	.word	0x00019ead

0000e434 <pdsNvmInit>:

\param[in] none
\param[out] status - The return status of the function's operation of type PdsStatus_t.
******************************************************************************/
PdsStatus_t pdsNvmInit(void)
{
    e434:	b500      	push	{lr}
    e436:	b085      	sub	sp, #20
	PdsStatus_t status = PDS_OK;
	status_code_t statusCode;
	struct nvm_parameters parameters;

	nvm_get_parameters(&parameters);
    e438:	4668      	mov	r0, sp
    e43a:	4b0b      	ldr	r3, [pc, #44]	; (e468 <pdsNvmInit+0x34>)
    e43c:	4798      	blx	r3
	
	statusCode = nvm_init(INT_FLASH);
    e43e:	2000      	movs	r0, #0
    e440:	4b0a      	ldr	r3, [pc, #40]	; (e46c <pdsNvmInit+0x38>)
    e442:	4798      	blx	r3
	if (STATUS_OK != (status_code_genare_t) statusCode)
	{
		return PDS_ERROR;
    e444:	2302      	movs	r3, #2
	if (STATUS_OK != (status_code_genare_t) statusCode)
    e446:	2800      	cmp	r0, #0
    e448:	d002      	beq.n	e450 <pdsNvmInit+0x1c>
	{
		return PDS_NOT_ENOUGH_MEMORY;
	}
	
	return status;
}
    e44a:	0018      	movs	r0, r3
    e44c:	b005      	add	sp, #20
    e44e:	bd00      	pop	{pc}
	if (EEPROM_SIZE > ( (parameters.rww_eeprom_number_of_pages/NVMCTRL_ROW_PAGES) * NVMCTRL_ROW_SIZE) )
    e450:	466b      	mov	r3, sp
    e452:	899a      	ldrh	r2, [r3, #12]
    e454:	0892      	lsrs	r2, r2, #2
    e456:	0212      	lsls	r2, r2, #8
    e458:	4905      	ldr	r1, [pc, #20]	; (e470 <pdsNvmInit+0x3c>)
	return status;
    e45a:	0fd3      	lsrs	r3, r2, #31
    e45c:	17c8      	asrs	r0, r1, #31
    e45e:	4291      	cmp	r1, r2
    e460:	4143      	adcs	r3, r0
    e462:	009b      	lsls	r3, r3, #2
    e464:	e7f1      	b.n	e44a <pdsNvmInit+0x16>
    e466:	46c0      	nop			; (mov r8, r8)
    e468:	00004eb9 	.word	0x00004eb9
    e46c:	0000fa49 	.word	0x0000fa49
    e470:	00001fff 	.word	0x00001fff

0000e474 <pdsNvmRead>:
\param[in] 	buffer - The buffer containing data to be read.
\param[in] 	size - The size of the data in the buffer.
\param[out] status - The return status of the function's operation of type PdsStatus_t.
******************************************************************************/
PdsStatus_t pdsNvmRead(uint16_t rowId, PdsMem_t *buffer, uint16_t size)
{
    e474:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e476:	000c      	movs	r4, r1
\param[out] uint16_t - The calculated 16 bit CRC.
******************************************************************************/
static uint32_t nvmLogicalRowToPhysicalAddr(uint16_t logicalRow)
{
	//return (NVMCTRL_RWW_EEPROM_ADDR + (NVMCTRL_ROW_SIZE * logicalRow)); // PRVN
	 return (PDS_FLASH_START_ADDRESS + (NVMCTRL_ROW_SIZE * logicalRow));
    e478:	2380      	movs	r3, #128	; 0x80
    e47a:	01db      	lsls	r3, r3, #7
    e47c:	469c      	mov	ip, r3
    e47e:	4460      	add	r0, ip
    e480:	0205      	lsls	r5, r0, #8
	if (EEPROM_ROW_SIZE == size)
    e482:	2380      	movs	r3, #128	; 0x80
    e484:	005b      	lsls	r3, r3, #1
    e486:	429a      	cmp	r2, r3
    e488:	d00e      	beq.n	e4a8 <pdsNvmRead+0x34>
		size += sizeof(PdsNvmHeader_t);
    e48a:	3204      	adds	r2, #4
    e48c:	b296      	uxth	r6, r2
			statusCode = nvm_read(INT_FLASH, addr, (uint8_t *const)buffer, size);
    e48e:	4f1e      	ldr	r7, [pc, #120]	; (e508 <pdsNvmRead+0x94>)
    e490:	0033      	movs	r3, r6
    e492:	0022      	movs	r2, r4
    e494:	0029      	movs	r1, r5
    e496:	2000      	movs	r0, #0
    e498:	47b8      	blx	r7
    e49a:	b2c3      	uxtb	r3, r0
		} while (statusCode == STATUS_BUSY);		
    e49c:	2b05      	cmp	r3, #5
    e49e:	d0f7      	beq.n	e490 <pdsNvmRead+0x1c>
		return PDS_ERROR;
    e4a0:	2002      	movs	r0, #2
	if (STATUS_OK != statusCode)
    e4a2:	2b00      	cmp	r3, #0
    e4a4:	d00b      	beq.n	e4be <pdsNvmRead+0x4a>
}
    e4a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			statusCode = nvm_read(INT_FLASH, addr, (uint8_t *const)buffer, size);
    e4a8:	001e      	movs	r6, r3
    e4aa:	4f17      	ldr	r7, [pc, #92]	; (e508 <pdsNvmRead+0x94>)
    e4ac:	0033      	movs	r3, r6
    e4ae:	0022      	movs	r2, r4
    e4b0:	0029      	movs	r1, r5
    e4b2:	2000      	movs	r0, #0
    e4b4:	47b8      	blx	r7
    e4b6:	b2c3      	uxtb	r3, r0
		} while (statusCode == STATUS_BUSY);
    e4b8:	2b05      	cmp	r3, #5
    e4ba:	d0f7      	beq.n	e4ac <pdsNvmRead+0x38>
    e4bc:	e7f0      	b.n	e4a0 <pdsNvmRead+0x2c>
	crc = buffer->NVM_Struct.pdsNvmHeader.crc;
    e4be:	7823      	ldrb	r3, [r4, #0]
    e4c0:	7860      	ldrb	r0, [r4, #1]
    e4c2:	0200      	lsls	r0, r0, #8
    e4c4:	4318      	orrs	r0, r3
	if (crc != calculate_crc(buffer->NVM_Struct.pdsNvmHeader.size, (uint8_t *)&(buffer->NVM_Struct.pdsNvmData))) 
    e4c6:	78a6      	ldrb	r6, [r4, #2]
    e4c8:	3404      	adds	r4, #4
  for (uint16_t i = 0; i < length; i++)
    e4ca:	2e00      	cmp	r6, #0
    e4cc:	d017      	beq.n	e4fe <pdsNvmRead+0x8a>
    e4ce:	0025      	movs	r5, r4
    e4d0:	3e01      	subs	r6, #1
    e4d2:	b2b6      	uxth	r6, r6
    e4d4:	3601      	adds	r6, #1
    e4d6:	19a4      	adds	r4, r4, r6
    e4d8:	2600      	movs	r6, #0
  byte ^= initValue & 0xffU;
    e4da:	782b      	ldrb	r3, [r5, #0]
    e4dc:	4073      	eors	r3, r6
    e4de:	b2d9      	uxtb	r1, r3
  byte ^= byte << 4U;
    e4e0:	010b      	lsls	r3, r1, #4
    e4e2:	404b      	eors	r3, r1
    e4e4:	b2db      	uxtb	r3, r3
  return ((((uint16_t)byte << 8) | ((initValue & 0xff00U) >> 8))
    e4e6:	b29a      	uxth	r2, r3
          ^ (uint8_t)(byte >> 4) ^ ((uint16_t)byte << 3));
    e4e8:	091b      	lsrs	r3, r3, #4
    e4ea:	00d1      	lsls	r1, r2, #3
    e4ec:	404b      	eors	r3, r1
  return ((((uint16_t)byte << 8) | ((initValue & 0xff00U) >> 8))
    e4ee:	0212      	lsls	r2, r2, #8
    e4f0:	0a36      	lsrs	r6, r6, #8
    e4f2:	4332      	orrs	r2, r6
          ^ (uint8_t)(byte >> 4) ^ ((uint16_t)byte << 3));
    e4f4:	4053      	eors	r3, r2
    e4f6:	b29e      	uxth	r6, r3
    e4f8:	3501      	adds	r5, #1
  for (uint16_t i = 0; i < length; i++)
    e4fa:	42a5      	cmp	r5, r4
    e4fc:	d1ed      	bne.n	e4da <pdsNvmRead+0x66>
	if (crc != calculate_crc(buffer->NVM_Struct.pdsNvmHeader.size, (uint8_t *)&(buffer->NVM_Struct.pdsNvmData))) 
    e4fe:	1b80      	subs	r0, r0, r6
    e500:	1e46      	subs	r6, r0, #1
    e502:	41b0      	sbcs	r0, r6
		return PDS_ERROR;
    e504:	b2c0      	uxtb	r0, r0
    e506:	e7ce      	b.n	e4a6 <pdsNvmRead+0x32>
    e508:	0000f8d9 	.word	0x0000f8d9

0000e50c <pdsNvmWrite>:
{
    e50c:	b5f0      	push	{r4, r5, r6, r7, lr}
    e50e:	46c6      	mov	lr, r8
    e510:	b500      	push	{lr}
    e512:	4680      	mov	r8, r0
    e514:	000c      	movs	r4, r1
	buffer->NVM_Struct.pdsNvmHeader.version = PDS_NVM_VERSION;
    e516:	2301      	movs	r3, #1
    e518:	70cb      	strb	r3, [r1, #3]
	buffer->NVM_Struct.pdsNvmHeader.size = size;
    e51a:	708a      	strb	r2, [r1, #2]
    e51c:	27ff      	movs	r7, #255	; 0xff
    e51e:	4017      	ands	r7, r2
	buffer->NVM_Struct.pdsNvmHeader.crc = calculate_crc(buffer->NVM_Struct.pdsNvmHeader.size, (uint8_t *)(&(buffer->NVM_Struct.pdsNvmData)));
    e520:	1d0e      	adds	r6, r1, #4
  for (uint16_t i = 0; i < length; i++)
    e522:	2f00      	cmp	r7, #0
    e524:	d017      	beq.n	e556 <pdsNvmWrite+0x4a>
    e526:	0030      	movs	r0, r6
    e528:	3f01      	subs	r7, #1
    e52a:	b2bf      	uxth	r7, r7
    e52c:	3701      	adds	r7, #1
    e52e:	19f6      	adds	r6, r6, r7
    e530:	2700      	movs	r7, #0
  byte ^= initValue & 0xffU;
    e532:	7803      	ldrb	r3, [r0, #0]
    e534:	407b      	eors	r3, r7
    e536:	b2d9      	uxtb	r1, r3
  byte ^= byte << 4U;
    e538:	010b      	lsls	r3, r1, #4
    e53a:	404b      	eors	r3, r1
    e53c:	b2db      	uxtb	r3, r3
  return ((((uint16_t)byte << 8) | ((initValue & 0xff00U) >> 8))
    e53e:	b299      	uxth	r1, r3
          ^ (uint8_t)(byte >> 4) ^ ((uint16_t)byte << 3));
    e540:	091b      	lsrs	r3, r3, #4
    e542:	00cd      	lsls	r5, r1, #3
    e544:	406b      	eors	r3, r5
  return ((((uint16_t)byte << 8) | ((initValue & 0xff00U) >> 8))
    e546:	0209      	lsls	r1, r1, #8
    e548:	0a3f      	lsrs	r7, r7, #8
    e54a:	4339      	orrs	r1, r7
          ^ (uint8_t)(byte >> 4) ^ ((uint16_t)byte << 3));
    e54c:	404b      	eors	r3, r1
    e54e:	b29f      	uxth	r7, r3
    e550:	3001      	adds	r0, #1
  for (uint16_t i = 0; i < length; i++)
    e552:	42b0      	cmp	r0, r6
    e554:	d1ed      	bne.n	e532 <pdsNvmWrite+0x26>
	buffer->NVM_Struct.pdsNvmHeader.crc = calculate_crc(buffer->NVM_Struct.pdsNvmHeader.size, (uint8_t *)(&(buffer->NVM_Struct.pdsNvmData)));
    e556:	7027      	strb	r7, [r4, #0]
    e558:	0a3f      	lsrs	r7, r7, #8
    e55a:	7067      	strb	r7, [r4, #1]
	size += sizeof(PdsNvmHeader_t);
    e55c:	3204      	adds	r2, #4
    e55e:	b296      	uxth	r6, r2
	 return (PDS_FLASH_START_ADDRESS + (NVMCTRL_ROW_SIZE * logicalRow));
    e560:	2180      	movs	r1, #128	; 0x80
    e562:	01c9      	lsls	r1, r1, #7
    e564:	4441      	add	r1, r8
    e566:	0209      	lsls	r1, r1, #8
	statusCode = nvm_write(INT_FLASH, addr, (uint8_t *const)buffer, size);
    e568:	0033      	movs	r3, r6
    e56a:	0022      	movs	r2, r4
    e56c:	2000      	movs	r0, #0
    e56e:	4f08      	ldr	r7, [pc, #32]	; (e590 <pdsNvmWrite+0x84>)
    e570:	47b8      	blx	r7
		return PDS_ERROR;
    e572:	2302      	movs	r3, #2
	if (STATUS_OK != (status_code_genare_t) statusCode)
    e574:	2800      	cmp	r0, #0
    e576:	d003      	beq.n	e580 <pdsNvmWrite+0x74>
}
    e578:	0018      	movs	r0, r3
    e57a:	bc04      	pop	{r2}
    e57c:	4690      	mov	r8, r2
    e57e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	status = pdsNvmRead(rowId, (PdsMem_t *const)buffer, size);
    e580:	0032      	movs	r2, r6
    e582:	0021      	movs	r1, r4
    e584:	4640      	mov	r0, r8
    e586:	4b03      	ldr	r3, [pc, #12]	; (e594 <pdsNvmWrite+0x88>)
    e588:	4798      	blx	r3
    e58a:	0003      	movs	r3, r0
	return status;
    e58c:	e7f4      	b.n	e578 <pdsNvmWrite+0x6c>
    e58e:	46c0      	nop			; (mov r8, r8)
    e590:	0000f935 	.word	0x0000f935
    e594:	0000e475 	.word	0x0000e475

0000e598 <pdsNvmErase>:
{
    e598:	b570      	push	{r4, r5, r6, lr}
	 return (PDS_FLASH_START_ADDRESS + (NVMCTRL_ROW_SIZE * logicalRow));
    e59a:	2380      	movs	r3, #128	; 0x80
    e59c:	01db      	lsls	r3, r3, #7
    e59e:	18c4      	adds	r4, r0, r3
    e5a0:	0224      	lsls	r4, r4, #8
		statusCode = nvm_erase_row(addr);
    e5a2:	4d05      	ldr	r5, [pc, #20]	; (e5b8 <pdsNvmErase+0x20>)
    e5a4:	0020      	movs	r0, r4
    e5a6:	47a8      	blx	r5
    e5a8:	b240      	sxtb	r0, r0
	} while (statusCode == ERR_BUSY);
    e5aa:	0003      	movs	r3, r0
    e5ac:	330a      	adds	r3, #10
    e5ae:	d0f9      	beq.n	e5a4 <pdsNvmErase+0xc>
	return status;
    e5b0:	1e43      	subs	r3, r0, #1
    e5b2:	4198      	sbcs	r0, r3
    e5b4:	0040      	lsls	r0, r0, #1
}
    e5b6:	bd70      	pop	{r4, r5, r6, pc}
    e5b8:	00004e11 	.word	0x00004e11

0000e5bc <pdsNvmEraseAll>:
{
    e5bc:	b570      	push	{r4, r5, r6, lr}
    e5be:	2400      	movs	r4, #0
		statusCode = pdsNvmErase(row_idx);
    e5c0:	4d04      	ldr	r5, [pc, #16]	; (e5d4 <pdsNvmEraseAll+0x18>)
    e5c2:	b2a0      	uxth	r0, r4
    e5c4:	47a8      	blx	r5
		if (PDS_OK != statusCode)
    e5c6:	2800      	cmp	r0, #0
    e5c8:	d102      	bne.n	e5d0 <pdsNvmEraseAll+0x14>
    e5ca:	3401      	adds	r4, #1
	for(uint8_t row_idx = 0; row_idx< EEPROM_NUM_ROWS; row_idx++)
    e5cc:	2c20      	cmp	r4, #32
    e5ce:	d1f8      	bne.n	e5c2 <pdsNvmEraseAll+0x6>
}
    e5d0:	bd70      	pop	{r4, r5, r6, pc}
    e5d2:	46c0      	nop			; (mov r8, r8)
    e5d4:	0000e599 	.word	0x0000e599

0000e5d8 <pdsPostTask>:
\brief Set task for PDS task manager.

\param[in] id - a single value from the type PdsTaskIds_t
******************************************************************************/
void pdsPostTask(PdsTaskIds_t id)
{
    e5d8:	b510      	push	{r4, lr}
    e5da:	0004      	movs	r4, r0
    ATOMIC_SECTION_ENTER
    e5dc:	4b05      	ldr	r3, [pc, #20]	; (e5f4 <pdsPostTask+0x1c>)
    e5de:	4798      	blx	r3
    pdsTaskFlags |= id;
    e5e0:	4b05      	ldr	r3, [pc, #20]	; (e5f8 <pdsPostTask+0x20>)
    e5e2:	7818      	ldrb	r0, [r3, #0]
    e5e4:	4320      	orrs	r0, r4
    e5e6:	7018      	strb	r0, [r3, #0]
    ATOMIC_SECTION_EXIT
    e5e8:	4b04      	ldr	r3, [pc, #16]	; (e5fc <pdsPostTask+0x24>)
    e5ea:	4798      	blx	r3

    /* Also post a PDS task to the system */
    SYSTEM_PostTask(PDS_TASK_ID);
    e5ec:	2008      	movs	r0, #8
    e5ee:	4b04      	ldr	r3, [pc, #16]	; (e600 <pdsPostTask+0x28>)
    e5f0:	4798      	blx	r3
}
    e5f2:	bd10      	pop	{r4, pc}
    e5f4:	000083b5 	.word	0x000083b5
    e5f8:	20000fbd 	.word	0x20000fbd
    e5fc:	000083c1 	.word	0x000083c1
    e600:	0000f4a1 	.word	0x0000f4a1

0000e604 <pdsStoreDeleteHandler>:
		initiate store/delete operation.

\param[out] status - The return status of the function's operation.
******************************************************************************/
static SYSTEM_TaskStatus_t pdsStoreDeleteHandler(void)
{
    e604:	b5f0      	push	{r4, r5, r6, r7, lr}
    e606:	46de      	mov	lr, fp
    e608:	4657      	mov	r7, sl
    e60a:	464e      	mov	r6, r9
    e60c:	4645      	mov	r5, r8
    e60e:	b5e0      	push	{r5, r6, r7, lr}
    e610:	b0c5      	sub	sp, #276	; 0x114
	PdsStatus_t status = SYSTEM_TASK_SUCCESS;

	PdsFileItemIdx_t fileId = PDS_FILE_MAC_01_IDX;
	PdsMem_t buffer;

	memset(&buffer, 0, sizeof(PdsMem_t));
    e612:	2280      	movs	r2, #128	; 0x80
    e614:	0052      	lsls	r2, r2, #1
    e616:	2100      	movs	r1, #0
    e618:	a804      	add	r0, sp, #16
    e61a:	4b54      	ldr	r3, [pc, #336]	; (e76c <pdsStoreDeleteHandler+0x168>)
    e61c:	4798      	blx	r3
	for (; fileId < PDS_MAX_FILE_IDX; fileId++)
	{
		if (true == isFileSet[fileId])
    e61e:	4b54      	ldr	r3, [pc, #336]	; (e770 <pdsStoreDeleteHandler+0x16c>)
    e620:	781b      	ldrb	r3, [r3, #0]
    e622:	2b00      	cmp	r3, #0
    e624:	d112      	bne.n	e64c <pdsStoreDeleteHandler+0x48>
    e626:	2401      	movs	r4, #1
    e628:	4a51      	ldr	r2, [pc, #324]	; (e770 <pdsStoreDeleteHandler+0x16c>)
    e62a:	9400      	str	r4, [sp, #0]
    e62c:	5d13      	ldrb	r3, [r2, r4]
    e62e:	2b00      	cmp	r3, #0
    e630:	d10f      	bne.n	e652 <pdsStoreDeleteHandler+0x4e>
	for (; fileId < PDS_MAX_FILE_IDX; fileId++)
    e632:	3401      	adds	r4, #1
    e634:	b2e4      	uxtb	r4, r4
    e636:	2c0c      	cmp	r4, #12
    e638:	d9f7      	bls.n	e62a <pdsStoreDeleteHandler+0x26>
	PdsStatus_t status = SYSTEM_TASK_SUCCESS;
    e63a:	2500      	movs	r5, #0
			break;
		}
	}

	return status;
}
    e63c:	0028      	movs	r0, r5
    e63e:	b045      	add	sp, #276	; 0x114
    e640:	bc3c      	pop	{r2, r3, r4, r5}
    e642:	4690      	mov	r8, r2
    e644:	4699      	mov	r9, r3
    e646:	46a2      	mov	sl, r4
    e648:	46ab      	mov	fp, r5
    e64a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (true == isFileSet[fileId])
    e64c:	2300      	movs	r3, #0
    e64e:	9300      	str	r3, [sp, #0]
	PdsFileItemIdx_t fileId = PDS_FILE_MAC_01_IDX;
    e650:	2400      	movs	r4, #0
	uint8_t *ptr;
	ItemMap_t itemInfo;
	ItemHeader_t itemHeader;
	uint16_t size;

	memcpy((void *)&itemInfo, (void *)(fileMarks[pdsFileItemIdx].itemListAddr + (fileMarks[pdsFileItemIdx].numItems - 1)), sizeof(ItemMap_t));
    e652:	9b00      	ldr	r3, [sp, #0]
    e654:	011a      	lsls	r2, r3, #4
    e656:	4b47      	ldr	r3, [pc, #284]	; (e774 <pdsStoreDeleteHandler+0x170>)
    e658:	189b      	adds	r3, r3, r2
    e65a:	7919      	ldrb	r1, [r3, #4]
    e65c:	4a46      	ldr	r2, [pc, #280]	; (e778 <pdsStoreDeleteHandler+0x174>)
    e65e:	4694      	mov	ip, r2
    e660:	4461      	add	r1, ip
    e662:	00c9      	lsls	r1, r1, #3
    e664:	689b      	ldr	r3, [r3, #8]
    e666:	1859      	adds	r1, r3, r1
    e668:	2208      	movs	r2, #8
    e66a:	a802      	add	r0, sp, #8
    e66c:	4b43      	ldr	r3, [pc, #268]	; (e77c <pdsStoreDeleteHandler+0x178>)
    e66e:	4798      	blx	r3
	size = itemInfo.itemOffset + itemInfo.size + sizeof(ItemHeader_t);
    e670:	ab02      	add	r3, sp, #8
    e672:	79da      	ldrb	r2, [r3, #7]
    e674:	799b      	ldrb	r3, [r3, #6]
    e676:	18d2      	adds	r2, r2, r3
	status = pdsWlRead(pdsFileItemIdx, (PdsMem_t *)buffer, size);
    e678:	3205      	adds	r2, #5
    e67a:	a904      	add	r1, sp, #16
    e67c:	0020      	movs	r0, r4
    e67e:	4b40      	ldr	r3, [pc, #256]	; (e780 <pdsStoreDeleteHandler+0x17c>)
    e680:	4798      	blx	r3
    e682:	1e05      	subs	r5, r0, #0

	if ((PDS_OK != status) && (PDS_NOT_FOUND != status))
    e684:	d111      	bne.n	e6aa <pdsStoreDeleteHandler+0xa6>
	}

	itemHeader.magic = PDS_MAGIC;
	itemHeader.version = PDS_FILES_VERSION;

	for (uint8_t itemIdx = 0; itemIdx < fileMarks[pdsFileItemIdx].numItems; itemIdx++)
    e686:	9b00      	ldr	r3, [sp, #0]
    e688:	011a      	lsls	r2, r3, #4
    e68a:	4b3a      	ldr	r3, [pc, #232]	; (e774 <pdsStoreDeleteHandler+0x170>)
    e68c:	189b      	adds	r3, r3, r2
    e68e:	791b      	ldrb	r3, [r3, #4]
    e690:	2500      	movs	r5, #0
    e692:	2b00      	cmp	r3, #0
    e694:	d04a      	beq.n	e72c <pdsStoreDeleteHandler+0x128>
	{

		memcpy((void *)&itemInfo, (fileMarks[pdsFileItemIdx].itemListAddr) + itemIdx, sizeof(ItemMap_t));
    e696:	4b37      	ldr	r3, [pc, #220]	; (e774 <pdsStoreDeleteHandler+0x170>)
    e698:	4699      	mov	r9, r3
    e69a:	9b00      	ldr	r3, [sp, #0]
    e69c:	011e      	lsls	r6, r3, #4
    e69e:	46b3      	mov	fp, r6
    e6a0:	44cb      	add	fp, r9
    e6a2:	4b36      	ldr	r3, [pc, #216]	; (e77c <pdsStoreDeleteHandler+0x178>)
    e6a4:	469a      	mov	sl, r3
	for (uint8_t itemIdx = 0; itemIdx < fileMarks[pdsFileItemIdx].numItems; itemIdx++)
    e6a6:	465f      	mov	r7, fp
    e6a8:	e01b      	b.n	e6e2 <pdsStoreDeleteHandler+0xde>
	if ((PDS_OK != status) && (PDS_NOT_FOUND != status))
    e6aa:	2803      	cmp	r0, #3
    e6ac:	d144      	bne.n	e738 <pdsStoreDeleteHandler+0x134>
    e6ae:	e7ea      	b.n	e686 <pdsStoreDeleteHandler+0x82>
		ptr = (uint8_t *)(&(((PdsMem_t *)(buffer))->NVM_Struct.pdsNvmData.WL_Struct.pdsWlData));
		ptr += itemInfo.itemOffset;

		if (PDS_OP_STORE == *(fileMarks[pdsFileItemIdx].fileMarkListAddr + itemIdx))
		{
			*(fileMarks[pdsFileItemIdx].fileMarkListAddr + itemIdx) = PDS_OP_NONE;
    e6b0:	2100      	movs	r1, #0
    e6b2:	7019      	strb	r1, [r3, #0]
			itemHeader.size = itemInfo.size;
    e6b4:	ab02      	add	r3, sp, #8
    e6b6:	799a      	ldrb	r2, [r3, #6]
			itemHeader.itemId = itemInfo.itemId;
    e6b8:	795b      	ldrb	r3, [r3, #5]
    e6ba:	4698      	mov	r8, r3
			itemHeader.delete = false;
			memcpy((void *)(ptr), (void *)&itemHeader, sizeof(ItemHeader_t));
    e6bc:	23a5      	movs	r3, #165	; 0xa5
    e6be:	7003      	strb	r3, [r0, #0]
    e6c0:	2301      	movs	r3, #1
    e6c2:	7043      	strb	r3, [r0, #1]
    e6c4:	7082      	strb	r2, [r0, #2]
    e6c6:	4643      	mov	r3, r8
    e6c8:	70c3      	strb	r3, [r0, #3]
    e6ca:	7101      	strb	r1, [r0, #4]
			ptr += sizeof(ItemHeader_t);
    e6cc:	3005      	adds	r0, #5
			memcpy((void *)(ptr), (void *)itemInfo.ramAddress, itemInfo.size);
    e6ce:	9b02      	ldr	r3, [sp, #8]
    e6d0:	9301      	str	r3, [sp, #4]
    e6d2:	0019      	movs	r1, r3
    e6d4:	4b29      	ldr	r3, [pc, #164]	; (e77c <pdsStoreDeleteHandler+0x178>)
    e6d6:	4798      	blx	r3
	for (uint8_t itemIdx = 0; itemIdx < fileMarks[pdsFileItemIdx].numItems; itemIdx++)
    e6d8:	3501      	adds	r5, #1
    e6da:	b2ed      	uxtb	r5, r5
    e6dc:	793b      	ldrb	r3, [r7, #4]
    e6de:	42ab      	cmp	r3, r5
    e6e0:	d924      	bls.n	e72c <pdsStoreDeleteHandler+0x128>
		memcpy((void *)&itemInfo, (fileMarks[pdsFileItemIdx].itemListAddr) + itemIdx, sizeof(ItemMap_t));
    e6e2:	00e9      	lsls	r1, r5, #3
    e6e4:	465b      	mov	r3, fp
    e6e6:	689b      	ldr	r3, [r3, #8]
    e6e8:	469c      	mov	ip, r3
    e6ea:	4461      	add	r1, ip
    e6ec:	2208      	movs	r2, #8
    e6ee:	a802      	add	r0, sp, #8
    e6f0:	47d0      	blx	sl
		ptr += itemInfo.itemOffset;
    e6f2:	ab02      	add	r3, sp, #8
    e6f4:	79d8      	ldrb	r0, [r3, #7]
    e6f6:	2315      	movs	r3, #21
    e6f8:	aa02      	add	r2, sp, #8
    e6fa:	4694      	mov	ip, r2
    e6fc:	4463      	add	r3, ip
    e6fe:	469c      	mov	ip, r3
    e700:	4460      	add	r0, ip
		if (PDS_OP_STORE == *(fileMarks[pdsFileItemIdx].fileMarkListAddr + itemIdx))
    e702:	464b      	mov	r3, r9
    e704:	58f3      	ldr	r3, [r6, r3]
    e706:	195b      	adds	r3, r3, r5
    e708:	781a      	ldrb	r2, [r3, #0]
    e70a:	2a01      	cmp	r2, #1
    e70c:	d0d0      	beq.n	e6b0 <pdsStoreDeleteHandler+0xac>
		}
		else if (PDS_OP_DELETE == *(fileMarks[pdsFileItemIdx].fileMarkListAddr + itemIdx))
    e70e:	2a02      	cmp	r2, #2
    e710:	d1e2      	bne.n	e6d8 <pdsStoreDeleteHandler+0xd4>
		{
			*(fileMarks[pdsFileItemIdx].fileMarkListAddr + itemIdx) = PDS_OP_NONE;
    e712:	2200      	movs	r2, #0
    e714:	701a      	strb	r2, [r3, #0]
			itemHeader.size = itemInfo.size;
    e716:	ab02      	add	r3, sp, #8
    e718:	7999      	ldrb	r1, [r3, #6]
			itemHeader.itemId = itemInfo.itemId;
    e71a:	795a      	ldrb	r2, [r3, #5]
			itemHeader.delete = true;
			memcpy((void *)(ptr), (void *)&itemHeader, sizeof(ItemHeader_t));
    e71c:	23a5      	movs	r3, #165	; 0xa5
    e71e:	7003      	strb	r3, [r0, #0]
    e720:	3ba4      	subs	r3, #164	; 0xa4
    e722:	7043      	strb	r3, [r0, #1]
    e724:	7081      	strb	r1, [r0, #2]
    e726:	70c2      	strb	r2, [r0, #3]
    e728:	7103      	strb	r3, [r0, #4]
    e72a:	e7d5      	b.n	e6d8 <pdsStoreDeleteHandler+0xd4>
		}
	}

	memcpy((void *)&itemInfo, (void *)(fileMarks[pdsFileItemIdx].itemListAddr + fileMarks[pdsFileItemIdx].numItems), sizeof(ItemMap_t));
	size = itemInfo.itemOffset + itemInfo.size + sizeof(ItemHeader_t);
	status = pdsWlWrite(pdsFileItemIdx, (PdsMem_t *)buffer, PDS_WL_DATA_SIZE);
    e72c:	22f3      	movs	r2, #243	; 0xf3
    e72e:	a904      	add	r1, sp, #16
    e730:	0020      	movs	r0, r4
    e732:	4b14      	ldr	r3, [pc, #80]	; (e784 <pdsStoreDeleteHandler+0x180>)
    e734:	4798      	blx	r3
    e736:	0005      	movs	r5, r0
			isFileSet[fileId] = false;
    e738:	2200      	movs	r2, #0
    e73a:	4b0d      	ldr	r3, [pc, #52]	; (e770 <pdsStoreDeleteHandler+0x16c>)
    e73c:	9900      	ldr	r1, [sp, #0]
    e73e:	545a      	strb	r2, [r3, r1]
			fileId++;
    e740:	3401      	adds	r4, #1
    e742:	b2e3      	uxtb	r3, r4
	for (; fileId < PDS_MAX_FILE_IDX; fileId++)
    e744:	2b0c      	cmp	r3, #12
    e746:	d900      	bls.n	e74a <pdsStoreDeleteHandler+0x146>
    e748:	e778      	b.n	e63c <pdsStoreDeleteHandler+0x38>
		if (isFileSet[fileId])
    e74a:	4a09      	ldr	r2, [pc, #36]	; (e770 <pdsStoreDeleteHandler+0x16c>)
    e74c:	5cd2      	ldrb	r2, [r2, r3]
    e74e:	2a00      	cmp	r2, #0
    e750:	d108      	bne.n	e764 <pdsStoreDeleteHandler+0x160>
    e752:	4907      	ldr	r1, [pc, #28]	; (e770 <pdsStoreDeleteHandler+0x16c>)
	for (; fileId < PDS_MAX_FILE_IDX; fileId++)
    e754:	3301      	adds	r3, #1
    e756:	b2db      	uxtb	r3, r3
    e758:	2b0c      	cmp	r3, #12
    e75a:	d900      	bls.n	e75e <pdsStoreDeleteHandler+0x15a>
    e75c:	e76e      	b.n	e63c <pdsStoreDeleteHandler+0x38>
		if (isFileSet[fileId])
    e75e:	5cca      	ldrb	r2, [r1, r3]
    e760:	2a00      	cmp	r2, #0
    e762:	d0f7      	beq.n	e754 <pdsStoreDeleteHandler+0x150>
			pdsPostTask(PDS_STORE_DELETE_TASK_ID);
    e764:	2001      	movs	r0, #1
    e766:	4b08      	ldr	r3, [pc, #32]	; (e788 <pdsStoreDeleteHandler+0x184>)
    e768:	4798      	blx	r3
			break;
    e76a:	e767      	b.n	e63c <pdsStoreDeleteHandler+0x38>
    e76c:	00019ead 	.word	0x00019ead
    e770:	200026f8 	.word	0x200026f8
    e774:	20002708 	.word	0x20002708
    e778:	1fffffff 	.word	0x1fffffff
    e77c:	00019d89 	.word	0x00019d89
    e780:	0000ea9d 	.word	0x0000ea9d
    e784:	0000e9ad 	.word	0x0000e9ad
    e788:	0000e5d9 	.word	0x0000e5d9

0000e78c <PDS_TaskHandler>:
{
    e78c:	b510      	push	{r4, lr}
    if (pdsTaskFlags)
    e78e:	4b0e      	ldr	r3, [pc, #56]	; (e7c8 <PDS_TaskHandler+0x3c>)
    e790:	781b      	ldrb	r3, [r3, #0]
    e792:	2b00      	cmp	r3, #0
    e794:	d003      	beq.n	e79e <PDS_TaskHandler+0x12>
            if ((1 << taskId) & (pdsTaskFlags))
    e796:	4b0c      	ldr	r3, [pc, #48]	; (e7c8 <PDS_TaskHandler+0x3c>)
    e798:	781b      	ldrb	r3, [r3, #0]
    e79a:	07db      	lsls	r3, r3, #31
    e79c:	d401      	bmi.n	e7a2 <PDS_TaskHandler+0x16>
}
    e79e:	2000      	movs	r0, #0
    e7a0:	bd10      	pop	{r4, pc}
                ATOMIC_SECTION_ENTER
    e7a2:	4b0a      	ldr	r3, [pc, #40]	; (e7cc <PDS_TaskHandler+0x40>)
    e7a4:	4798      	blx	r3
                pdsTaskFlags &= ~(1 << taskId);
    e7a6:	4c08      	ldr	r4, [pc, #32]	; (e7c8 <PDS_TaskHandler+0x3c>)
    e7a8:	7823      	ldrb	r3, [r4, #0]
    e7aa:	2201      	movs	r2, #1
    e7ac:	4393      	bics	r3, r2
    e7ae:	7023      	strb	r3, [r4, #0]
                ATOMIC_SECTION_EXIT
    e7b0:	4b07      	ldr	r3, [pc, #28]	; (e7d0 <PDS_TaskHandler+0x44>)
    e7b2:	4798      	blx	r3
                pdsTaskHandlers[taskId]();
    e7b4:	4b07      	ldr	r3, [pc, #28]	; (e7d4 <PDS_TaskHandler+0x48>)
    e7b6:	4798      	blx	r3
				if (pdsTaskFlags)
    e7b8:	7823      	ldrb	r3, [r4, #0]
    e7ba:	2b00      	cmp	r3, #0
    e7bc:	d0ef      	beq.n	e79e <PDS_TaskHandler+0x12>
                    SYSTEM_PostTask(PDS_TASK_ID);
    e7be:	2008      	movs	r0, #8
    e7c0:	4b05      	ldr	r3, [pc, #20]	; (e7d8 <PDS_TaskHandler+0x4c>)
    e7c2:	4798      	blx	r3
    e7c4:	e7eb      	b.n	e79e <PDS_TaskHandler+0x12>
    e7c6:	46c0      	nop			; (mov r8, r8)
    e7c8:	20000fbd 	.word	0x20000fbd
    e7cc:	000083b5 	.word	0x000083b5
    e7d0:	000083c1 	.word	0x000083c1
    e7d4:	0000e605 	.word	0x0000e605
    e7d8:	0000f4a1 	.word	0x0000f4a1

0000e7dc <pdsUpdateRowMap>:
		in the row map.

\param[in] - return none
******************************************************************************/
static void pdsUpdateRowMap()
{
    e7dc:	b5f0      	push	{r4, r5, r6, r7, lr}
    e7de:	4e12      	ldr	r6, [pc, #72]	; (e828 <pdsUpdateRowMap+0x4c>)
    e7e0:	0037      	movs	r7, r6
    e7e2:	371a      	adds	r7, #26
	uint16_t rowIdx = USHRT_MAX;
    for(uint16_t memId = 0, rowIdxLocal = 0 ; memId < PDS_MAX_FILE_IDX; memId++)
    {
		
        // make all the previous indexes of the max_counter_row_idx invalid by writing 0xFF
		if(USHRT_MAX != fileMap[memId].maxCounterRowIdx)
    e7e4:	4d11      	ldr	r5, [pc, #68]	; (e82c <pdsUpdateRowMap+0x50>)
		{
			rowIdx = rowMap[fileMap[memId].maxCounterRowIdx].previousIdx;
    e7e6:	4b12      	ldr	r3, [pc, #72]	; (e830 <pdsUpdateRowMap+0x54>)
    e7e8:	469c      	mov	ip, r3
			rowMap[fileMap[memId].maxCounterRowIdx].previousIdx = USHRT_MAX;
    e7ea:	2101      	movs	r1, #1
    e7ec:	4249      	negs	r1, r1
			while(rowIdx != USHRT_MAX)
			{
				rowIdxLocal = rowMap[rowIdx].previousIdx;
    e7ee:	0018      	movs	r0, r3
    e7f0:	e002      	b.n	e7f8 <pdsUpdateRowMap+0x1c>
    e7f2:	3602      	adds	r6, #2
    for(uint16_t memId = 0, rowIdxLocal = 0 ; memId < PDS_MAX_FILE_IDX; memId++)
    e7f4:	42be      	cmp	r6, r7
    e7f6:	d015      	beq.n	e824 <pdsUpdateRowMap+0x48>
		if(USHRT_MAX != fileMap[memId].maxCounterRowIdx)
    e7f8:	8833      	ldrh	r3, [r6, #0]
    e7fa:	42ab      	cmp	r3, r5
    e7fc:	d0f9      	beq.n	e7f2 <pdsUpdateRowMap+0x16>
			rowIdx = rowMap[fileMap[memId].maxCounterRowIdx].previousIdx;
    e7fe:	00db      	lsls	r3, r3, #3
    e800:	4463      	add	r3, ip
    e802:	001a      	movs	r2, r3
    e804:	88db      	ldrh	r3, [r3, #6]
			rowMap[fileMap[memId].maxCounterRowIdx].previousIdx = USHRT_MAX;
    e806:	80d1      	strh	r1, [r2, #6]
			while(rowIdx != USHRT_MAX)
    e808:	42ab      	cmp	r3, r5
    e80a:	d0f2      	beq.n	e7f2 <pdsUpdateRowMap+0x16>
				rowIdxLocal = rowMap[rowIdx].previousIdx;
    e80c:	001a      	movs	r2, r3
    e80e:	00db      	lsls	r3, r3, #3
    e810:	18c3      	adds	r3, r0, r3
    e812:	88db      	ldrh	r3, [r3, #6]
				rowMap[rowIdx].previousIdx = USHRT_MAX;
    e814:	00d2      	lsls	r2, r2, #3
    e816:	1884      	adds	r4, r0, r2
    e818:	80e1      	strh	r1, [r4, #6]
				rowMap[rowIdx].counter = UINT_MAX;
    e81a:	5011      	str	r1, [r2, r0]
				rowMap[rowIdx].memId = USHRT_MAX;
    e81c:	80a1      	strh	r1, [r4, #4]
			while(rowIdx != USHRT_MAX)
    e81e:	42ab      	cmp	r3, r5
    e820:	d1f4      	bne.n	e80c <pdsUpdateRowMap+0x30>
    e822:	e7e6      	b.n	e7f2 <pdsUpdateRowMap+0x16>
				rowIdx = rowIdxLocal;
			}
		}
    }
}
    e824:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e826:	46c0      	nop			; (mov r8, r8)
    e828:	20000fc0 	.word	0x20000fc0
    e82c:	0000ffff 	.word	0x0000ffff
    e830:	20000fdc 	.word	0x20000fdc

0000e834 <pdsUpdateFileMap>:
\brief Updates the file map so that it points to the latest row index for a file id.

\param[out] - returns none
******************************************************************************/
static void pdsUpdateFileMap(UpdateFileMap_t *updateFileMap)
{
    e834:	b5f0      	push	{r4, r5, r6, r7, lr}
    e836:	46c6      	mov	lr, r8
    e838:	b500      	push	{lr}
    e83a:	b082      	sub	sp, #8
    e83c:	4684      	mov	ip, r0
    uint16_t *presentRowIdx;
    uint16_t *previousRowIdx;
    uint16_t *lastRowIdx;
    uint16_t prevTemp;
    if(USHRT_MAX == fileMap[updateFileMap->memId].maxCounterRowIdx)
    e83e:	8881      	ldrh	r1, [r0, #4]
    e840:	004a      	lsls	r2, r1, #1
    e842:	4b2c      	ldr	r3, [pc, #176]	; (e8f4 <pdsUpdateFileMap+0xc0>)
    e844:	5ad3      	ldrh	r3, [r2, r3]
    e846:	4a2c      	ldr	r2, [pc, #176]	; (e8f8 <pdsUpdateFileMap+0xc4>)
    e848:	4293      	cmp	r3, r2
    e84a:	d02c      	beq.n	e8a6 <pdsUpdateFileMap+0x72>
    {   
		/* If there is no entry in filemap update current rowidx as maxcounteridx*/
        fileMap[updateFileMap->memId].maxCounterRowIdx = updateFileMap->rowIdx;

    }
    else if(rowMap[fileMap[updateFileMap->memId].maxCounterRowIdx].counter < rowMap[updateFileMap->rowIdx].counter)
    e84c:	4a2b      	ldr	r2, [pc, #172]	; (e8fc <pdsUpdateFileMap+0xc8>)
    e84e:	00d8      	lsls	r0, r3, #3
    e850:	5880      	ldr	r0, [r0, r2]
    e852:	4664      	mov	r4, ip
    e854:	88e4      	ldrh	r4, [r4, #6]
    e856:	46a0      	mov	r8, r4
    e858:	00e4      	lsls	r4, r4, #3
    e85a:	58a6      	ldr	r6, [r4, r2]
    e85c:	42b0      	cmp	r0, r6
    e85e:	d327      	bcc.n	e8b0 <pdsUpdateFileMap+0x7c>
		// update the max counter rowIdx of the memId as previous_idx in the present row
        rowMap[updateFileMap->rowIdx].previousIdx = fileMap[updateFileMap->memId].maxCounterRowIdx;
        fileMap[updateFileMap->memId].maxCounterRowIdx = updateFileMap->rowIdx;

    }
	else if (rowMap[fileMap[updateFileMap->memId].maxCounterRowIdx].counter == rowMap[updateFileMap->rowIdx].counter)
    e860:	d02f      	beq.n	e8c2 <pdsUpdateFileMap+0x8e>

		return;
	}
    else
    {
        previousRowIdx = &rowMap[fileMap[updateFileMap->memId].maxCounterRowIdx].previousIdx;
    e862:	4a26      	ldr	r2, [pc, #152]	; (e8fc <pdsUpdateFileMap+0xc8>)
    e864:	00dd      	lsls	r5, r3, #3
    e866:	3506      	adds	r5, #6
    e868:	1950      	adds	r0, r2, r5
    e86a:	9001      	str	r0, [sp, #4]
    e86c:	00db      	lsls	r3, r3, #3
    e86e:	18d3      	adds	r3, r2, r3
    e870:	88da      	ldrh	r2, [r3, #6]
        presentRowIdx = &updateFileMap->rowIdx;
        lastRowIdx = &fileMap[updateFileMap->memId].maxCounterRowIdx;
		do
		{
			if (USHRT_MAX == *previousRowIdx)
    e872:	4b21      	ldr	r3, [pc, #132]	; (e8f8 <pdsUpdateFileMap+0xc4>)
    e874:	429a      	cmp	r2, r3
    e876:	d028      	beq.n	e8ca <pdsUpdateFileMap+0x96>
			{
				*previousRowIdx = *presentRowIdx;
				break;
			}
			if (rowMap[*previousRowIdx].counter > rowMap[*presentRowIdx].counter)
    e878:	0013      	movs	r3, r2
    e87a:	00d0      	lsls	r0, r2, #3
    e87c:	4c1f      	ldr	r4, [pc, #124]	; (e8fc <pdsUpdateFileMap+0xc8>)
    e87e:	5900      	ldr	r0, [r0, r4]
    e880:	4286      	cmp	r6, r0
    e882:	d226      	bcs.n	e8d2 <pdsUpdateFileMap+0x9e>
			{
				lastRowIdx = previousRowIdx;
				previousRowIdx = &rowMap[*previousRowIdx].previousIdx;
    e884:	4c1d      	ldr	r4, [pc, #116]	; (e8fc <pdsUpdateFileMap+0xc8>)
			if (USHRT_MAX == *previousRowIdx)
    e886:	4f1c      	ldr	r7, [pc, #112]	; (e8f8 <pdsUpdateFileMap+0xc4>)
			if (rowMap[*previousRowIdx].counter > rowMap[*presentRowIdx].counter)
    e888:	0020      	movs	r0, r4
				previousRowIdx = &rowMap[*previousRowIdx].previousIdx;
    e88a:	00db      	lsls	r3, r3, #3
    e88c:	1d99      	adds	r1, r3, #6
    e88e:	1861      	adds	r1, r4, r1
    e890:	18e3      	adds	r3, r4, r3
    e892:	88da      	ldrh	r2, [r3, #6]
			if (USHRT_MAX == *previousRowIdx)
    e894:	42ba      	cmp	r2, r7
    e896:	d019      	beq.n	e8cc <pdsUpdateFileMap+0x98>
			if (rowMap[*previousRowIdx].counter > rowMap[*presentRowIdx].counter)
    e898:	0013      	movs	r3, r2
    e89a:	00d5      	lsls	r5, r2, #3
    e89c:	582d      	ldr	r5, [r5, r0]
    e89e:	42ae      	cmp	r6, r5
    e8a0:	d21b      	bcs.n	e8da <pdsUpdateFileMap+0xa6>
				previousRowIdx = &rowMap[*previousRowIdx].previousIdx;
    e8a2:	9101      	str	r1, [sp, #4]
    e8a4:	e7f1      	b.n	e88a <pdsUpdateFileMap+0x56>
        fileMap[updateFileMap->memId].maxCounterRowIdx = updateFileMap->rowIdx;
    e8a6:	88c2      	ldrh	r2, [r0, #6]
    e8a8:	0049      	lsls	r1, r1, #1
    e8aa:	4b12      	ldr	r3, [pc, #72]	; (e8f4 <pdsUpdateFileMap+0xc0>)
    e8ac:	52ca      	strh	r2, [r1, r3]
    e8ae:	e008      	b.n	e8c2 <pdsUpdateFileMap+0x8e>
        rowMap[updateFileMap->rowIdx].previousIdx = fileMap[updateFileMap->memId].maxCounterRowIdx;
    e8b0:	4a12      	ldr	r2, [pc, #72]	; (e8fc <pdsUpdateFileMap+0xc8>)
    e8b2:	1912      	adds	r2, r2, r4
    e8b4:	80d3      	strh	r3, [r2, #6]
        fileMap[updateFileMap->memId].maxCounterRowIdx = updateFileMap->rowIdx;
    e8b6:	4663      	mov	r3, ip
    e8b8:	88d9      	ldrh	r1, [r3, #6]
    e8ba:	889b      	ldrh	r3, [r3, #4]
    e8bc:	005b      	lsls	r3, r3, #1
    e8be:	4a0d      	ldr	r2, [pc, #52]	; (e8f4 <pdsUpdateFileMap+0xc0>)
    e8c0:	5299      	strh	r1, [r3, r2]
				break;
			}
		} while(true);

    }
}
    e8c2:	b002      	add	sp, #8
    e8c4:	bc04      	pop	{r2}
    e8c6:	4690      	mov	r8, r2
    e8c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
        previousRowIdx = &rowMap[fileMap[updateFileMap->memId].maxCounterRowIdx].previousIdx;
    e8ca:	9901      	ldr	r1, [sp, #4]
				*previousRowIdx = *presentRowIdx;
    e8cc:	4643      	mov	r3, r8
    e8ce:	800b      	strh	r3, [r1, #0]
				break;
    e8d0:	e7f7      	b.n	e8c2 <pdsUpdateFileMap+0x8e>
        lastRowIdx = &fileMap[updateFileMap->memId].maxCounterRowIdx;
    e8d2:	0049      	lsls	r1, r1, #1
    e8d4:	4d07      	ldr	r5, [pc, #28]	; (e8f4 <pdsUpdateFileMap+0xc0>)
    e8d6:	186b      	adds	r3, r5, r1
    e8d8:	9301      	str	r3, [sp, #4]
				rowMap[*lastRowIdx].previousIdx = *presentRowIdx;
    e8da:	4908      	ldr	r1, [pc, #32]	; (e8fc <pdsUpdateFileMap+0xc8>)
    e8dc:	9b01      	ldr	r3, [sp, #4]
    e8de:	881b      	ldrh	r3, [r3, #0]
    e8e0:	00db      	lsls	r3, r3, #3
    e8e2:	18cb      	adds	r3, r1, r3
    e8e4:	4640      	mov	r0, r8
    e8e6:	80d8      	strh	r0, [r3, #6]
				rowMap[*presentRowIdx].previousIdx = prevTemp;
    e8e8:	4663      	mov	r3, ip
    e8ea:	88db      	ldrh	r3, [r3, #6]
    e8ec:	00db      	lsls	r3, r3, #3
    e8ee:	18c9      	adds	r1, r1, r3
    e8f0:	80ca      	strh	r2, [r1, #6]
				break;
    e8f2:	e7e6      	b.n	e8c2 <pdsUpdateFileMap+0x8e>
    e8f4:	20000fc0 	.word	0x20000fc0
    e8f8:	0000ffff 	.word	0x0000ffff
    e8fc:	20000fdc 	.word	0x20000fdc

0000e900 <pdsWlInit>:
{
    e900:	b5f0      	push	{r4, r5, r6, r7, lr}
    e902:	46c6      	mov	lr, r8
    e904:	b500      	push	{lr}
    e906:	b0c4      	sub	sp, #272	; 0x110
	PdsStatus_t status = pdsNvmInit();
    e908:	4b21      	ldr	r3, [pc, #132]	; (e990 <pdsWlInit+0x90>)
    e90a:	4798      	blx	r3
    e90c:	9001      	str	r0, [sp, #4]
	if (PDS_OK != status)
    e90e:	2800      	cmp	r0, #0
    e910:	d004      	beq.n	e91c <pdsWlInit+0x1c>
}
    e912:	9801      	ldr	r0, [sp, #4]
    e914:	b044      	add	sp, #272	; 0x110
    e916:	bc04      	pop	{r2}
    e918:	4690      	mov	r8, r2
    e91a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	memset(&rowMap, UCHAR_MAX, EEPROM_NUM_ROWS * sizeof(RowMap_t));
    e91c:	2680      	movs	r6, #128	; 0x80
    e91e:	0076      	lsls	r6, r6, #1
    e920:	4d1c      	ldr	r5, [pc, #112]	; (e994 <pdsWlInit+0x94>)
    e922:	0032      	movs	r2, r6
    e924:	21ff      	movs	r1, #255	; 0xff
    e926:	0028      	movs	r0, r5
    e928:	4c1b      	ldr	r4, [pc, #108]	; (e998 <pdsWlInit+0x98>)
    e92a:	47a0      	blx	r4
    memset(&fileMap, UCHAR_MAX, PDS_MAX_FILE_IDX * sizeof(FileMap_t));
    e92c:	221a      	movs	r2, #26
    e92e:	21ff      	movs	r1, #255	; 0xff
    e930:	481a      	ldr	r0, [pc, #104]	; (e99c <pdsWlInit+0x9c>)
    e932:	47a0      	blx	r4
	memset(&buffer, 0, sizeof(PdsMem_t));
    e934:	0032      	movs	r2, r6
    e936:	2100      	movs	r1, #0
    e938:	a804      	add	r0, sp, #16
    e93a:	47a0      	blx	r4
    e93c:	2400      	movs	r4, #0
		status = pdsNvmRead(rowIdx, &buffer, EEPROM_ROW_SIZE);
    e93e:	4e18      	ldr	r6, [pc, #96]	; (e9a0 <pdsWlInit+0xa0>)
            pdsUpdateFileMap(&updateFileMap);
    e940:	4b18      	ldr	r3, [pc, #96]	; (e9a4 <pdsWlInit+0xa4>)
    e942:	4698      	mov	r8, r3
    e944:	e003      	b.n	e94e <pdsWlInit+0x4e>
    e946:	3401      	adds	r4, #1
    e948:	3508      	adds	r5, #8
    for(uint8_t rowIdx = 0; rowIdx< EEPROM_NUM_ROWS; rowIdx++)
    e94a:	2c20      	cmp	r4, #32
    e94c:	d01d      	beq.n	e98a <pdsWlInit+0x8a>
		status = pdsNvmRead(rowIdx, &buffer, EEPROM_ROW_SIZE);
    e94e:	b2a7      	uxth	r7, r4
    e950:	2280      	movs	r2, #128	; 0x80
    e952:	0052      	lsls	r2, r2, #1
    e954:	a904      	add	r1, sp, #16
    e956:	0038      	movs	r0, r7
    e958:	47b0      	blx	r6
		if (PDS_OK == status)
    e95a:	2800      	cmp	r0, #0
    e95c:	d1f3      	bne.n	e946 <pdsWlInit+0x46>
			rowMap[rowIdx].counter = buffer.NVM_Struct.pdsNvmData.WL_Struct.pdsWlHeader.counter;
    e95e:	a904      	add	r1, sp, #16
    e960:	9b06      	ldr	r3, [sp, #24]
    e962:	0a1b      	lsrs	r3, r3, #8
    e964:	7b0a      	ldrb	r2, [r1, #12]
    e966:	0612      	lsls	r2, r2, #24
    e968:	431a      	orrs	r2, r3
    e96a:	602a      	str	r2, [r5, #0]
            rowMap[rowIdx].memId = buffer.NVM_Struct.pdsNvmData.WL_Struct.pdsWlHeader.memId;
    e96c:	79c8      	ldrb	r0, [r1, #7]
    e96e:	7a0b      	ldrb	r3, [r1, #8]
    e970:	021b      	lsls	r3, r3, #8
    e972:	4303      	orrs	r3, r0
    e974:	80ab      	strh	r3, [r5, #4]
            rowMap[rowIdx].previousIdx = USHRT_MAX;
    e976:	2101      	movs	r1, #1
    e978:	4249      	negs	r1, r1
    e97a:	80e9      	strh	r1, [r5, #6]
            updateFileMap.counter = buffer.NVM_Struct.pdsNvmData.WL_Struct.pdsWlHeader.counter;
    e97c:	9202      	str	r2, [sp, #8]
            updateFileMap.memId = buffer.NVM_Struct.pdsNvmData.WL_Struct.pdsWlHeader.memId;
    e97e:	aa02      	add	r2, sp, #8
    e980:	8093      	strh	r3, [r2, #4]
            updateFileMap.rowIdx = rowIdx;
    e982:	80d7      	strh	r7, [r2, #6]
            pdsUpdateFileMap(&updateFileMap);
    e984:	0010      	movs	r0, r2
    e986:	47c0      	blx	r8
    e988:	e7dd      	b.n	e946 <pdsWlInit+0x46>
    pdsUpdateRowMap();
    e98a:	4b07      	ldr	r3, [pc, #28]	; (e9a8 <pdsWlInit+0xa8>)
    e98c:	4798      	blx	r3
	return PDS_OK;
    e98e:	e7c0      	b.n	e912 <pdsWlInit+0x12>
    e990:	0000e435 	.word	0x0000e435
    e994:	20000fdc 	.word	0x20000fdc
    e998:	00019ead 	.word	0x00019ead
    e99c:	20000fc0 	.word	0x20000fc0
    e9a0:	0000e475 	.word	0x0000e475
    e9a4:	0000e835 	.word	0x0000e835
    e9a8:	0000e7dd 	.word	0x0000e7dd

0000e9ac <pdsWlWrite>:
{
    e9ac:	b5f0      	push	{r4, r5, r6, r7, lr}
    e9ae:	46ce      	mov	lr, r9
    e9b0:	4647      	mov	r7, r8
    e9b2:	b580      	push	{r7, lr}
    e9b4:	b083      	sub	sp, #12
    e9b6:	0005      	movs	r5, r0
    e9b8:	000f      	movs	r7, r1
    e9ba:	4690      	mov	r8, r2
    e9bc:	4e32      	ldr	r6, [pc, #200]	; (ea88 <pdsWlWrite+0xdc>)
    e9be:	0033      	movs	r3, r6
******************************************************************************/
static uint16_t pdsReturnFreeRowIdx(void)
{
    uint8_t rowIdx;
    bool found = 0;
    for(rowIdx = 0; rowIdx < EEPROM_NUM_ROWS; rowIdx++)
    e9c0:	2400      	movs	r4, #0
    {
        if( (UINT_MAX == rowMap[rowIdx].counter) &&
    e9c2:	4832      	ldr	r0, [pc, #200]	; (ea8c <pdsWlWrite+0xe0>)
    e9c4:	e004      	b.n	e9d0 <pdsWlWrite+0x24>
    for(rowIdx = 0; rowIdx < EEPROM_NUM_ROWS; rowIdx++)
    e9c6:	3401      	adds	r4, #1
    e9c8:	b2e4      	uxtb	r4, r4
    e9ca:	3308      	adds	r3, #8
    e9cc:	2c20      	cmp	r4, #32
    e9ce:	d055      	beq.n	ea7c <pdsWlWrite+0xd0>
        if( (UINT_MAX == rowMap[rowIdx].counter) &&
    e9d0:	6819      	ldr	r1, [r3, #0]
    e9d2:	3101      	adds	r1, #1
    e9d4:	d1f7      	bne.n	e9c6 <pdsWlWrite+0x1a>
    e9d6:	88d9      	ldrh	r1, [r3, #6]
    e9d8:	4281      	cmp	r1, r0
    e9da:	d1f4      	bne.n	e9c6 <pdsWlWrite+0x1a>
            (USHRT_MAX == rowMap[rowIdx].previousIdx) &&
    e9dc:	889a      	ldrh	r2, [r3, #4]
    e9de:	4282      	cmp	r2, r0
    e9e0:	d1f1      	bne.n	e9c6 <pdsWlWrite+0x1a>
            {
                break;
            }
        }
    }
	return rowIdx;
    e9e2:	b2a3      	uxth	r3, r4
    e9e4:	4699      	mov	r9, r3
	buffer->NVM_Struct.pdsNvmData.WL_Struct.pdsWlHeader.counter++;
    e9e6:	7a7e      	ldrb	r6, [r7, #9]
    e9e8:	7abb      	ldrb	r3, [r7, #10]
    e9ea:	021b      	lsls	r3, r3, #8
    e9ec:	4333      	orrs	r3, r6
    e9ee:	7afe      	ldrb	r6, [r7, #11]
    e9f0:	0436      	lsls	r6, r6, #16
    e9f2:	4333      	orrs	r3, r6
    e9f4:	7b3e      	ldrb	r6, [r7, #12]
    e9f6:	0636      	lsls	r6, r6, #24
    e9f8:	431e      	orrs	r6, r3
    e9fa:	3601      	adds	r6, #1
    e9fc:	727e      	strb	r6, [r7, #9]
    e9fe:	0a32      	lsrs	r2, r6, #8
    ea00:	72ba      	strb	r2, [r7, #10]
    ea02:	0c32      	lsrs	r2, r6, #16
    ea04:	72fa      	strb	r2, [r7, #11]
    ea06:	0e32      	lsrs	r2, r6, #24
    ea08:	733a      	strb	r2, [r7, #12]
	buffer->NVM_Struct.pdsNvmData.WL_Struct.pdsWlHeader.memId = pdsFileItemIdx;
    ea0a:	b2ad      	uxth	r5, r5
    ea0c:	71fd      	strb	r5, [r7, #7]
    ea0e:	2200      	movs	r2, #0
    ea10:	723a      	strb	r2, [r7, #8]
	buffer->NVM_Struct.pdsNvmData.WL_Struct.pdsWlHeader.magicNo = PDS_MAGIC;
    ea12:	23a5      	movs	r3, #165	; 0xa5
    ea14:	713b      	strb	r3, [r7, #4]
	buffer->NVM_Struct.pdsNvmData.WL_Struct.pdsWlHeader.version = PDS_WL_VERSION;
    ea16:	3ba4      	subs	r3, #164	; 0xa4
    ea18:	717b      	strb	r3, [r7, #5]
	buffer->NVM_Struct.pdsNvmData.WL_Struct.pdsWlHeader.size = size;
    ea1a:	4643      	mov	r3, r8
    ea1c:	71bb      	strb	r3, [r7, #6]
	size += sizeof(PdsWlHeader_t);
    ea1e:	4642      	mov	r2, r8
    ea20:	3209      	adds	r2, #9
	status = pdsNvmWrite(rowIdx, buffer, size);
    ea22:	b292      	uxth	r2, r2
    ea24:	0039      	movs	r1, r7
    ea26:	4648      	mov	r0, r9
    ea28:	4b19      	ldr	r3, [pc, #100]	; (ea90 <pdsWlWrite+0xe4>)
    ea2a:	4798      	blx	r3
    ea2c:	1e07      	subs	r7, r0, #0
	if (PDS_OK == status)
    ea2e:	d014      	beq.n	ea5a <pdsWlWrite+0xae>
}
    ea30:	0038      	movs	r0, r7
    ea32:	b003      	add	sp, #12
    ea34:	bc0c      	pop	{r2, r3}
    ea36:	4690      	mov	r8, r2
    ea38:	4699      	mov	r9, r3
    ea3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        for(rowIdx = 0; rowIdx < EEPROM_NUM_ROWS; rowIdx++)
    ea3c:	3401      	adds	r4, #1
    ea3e:	b2e4      	uxtb	r4, r4
    ea40:	3608      	adds	r6, #8
    ea42:	2c20      	cmp	r4, #32
    ea44:	d0cd      	beq.n	e9e2 <pdsWlWrite+0x36>
            if( (UINT_MAX == rowMap[rowIdx].counter) &&
    ea46:	6832      	ldr	r2, [r6, #0]
    ea48:	3201      	adds	r2, #1
    ea4a:	d1f7      	bne.n	ea3c <pdsWlWrite+0x90>
    ea4c:	88f2      	ldrh	r2, [r6, #6]
    ea4e:	428a      	cmp	r2, r1
    ea50:	d1f4      	bne.n	ea3c <pdsWlWrite+0x90>
                (USHRT_MAX == rowMap[rowIdx].previousIdx) &&
    ea52:	88b3      	ldrh	r3, [r6, #4]
    ea54:	428b      	cmp	r3, r1
    ea56:	d1f1      	bne.n	ea3c <pdsWlWrite+0x90>
    ea58:	e7c3      	b.n	e9e2 <pdsWlWrite+0x36>
		rowMap[rowIdx].counter = counter;
    ea5a:	4b0b      	ldr	r3, [pc, #44]	; (ea88 <pdsWlWrite+0xdc>)
    ea5c:	00e4      	lsls	r4, r4, #3
    ea5e:	50e6      	str	r6, [r4, r3]
		rowMap[rowIdx].memId = pdsFileItemIdx;
    ea60:	191c      	adds	r4, r3, r4
    ea62:	80a5      	strh	r5, [r4, #4]
		rowMap[rowIdx].previousIdx = USHRT_MAX;
    ea64:	2301      	movs	r3, #1
    ea66:	425b      	negs	r3, r3
    ea68:	80e3      	strh	r3, [r4, #6]
		updateFileMap.counter = rowMap[rowIdx].counter;
    ea6a:	9600      	str	r6, [sp, #0]
		updateFileMap.memId = rowMap[rowIdx].memId;
    ea6c:	466b      	mov	r3, sp
    ea6e:	809d      	strh	r5, [r3, #4]
		updateFileMap.rowIdx = rowIdx;
    ea70:	464a      	mov	r2, r9
    ea72:	80da      	strh	r2, [r3, #6]
		pdsUpdateFileMap(&updateFileMap);
    ea74:	4668      	mov	r0, sp
    ea76:	4b07      	ldr	r3, [pc, #28]	; (ea94 <pdsWlWrite+0xe8>)
    ea78:	4798      	blx	r3
	return status;
    ea7a:	e7d9      	b.n	ea30 <pdsWlWrite+0x84>
        pdsUpdateRowMap();
    ea7c:	4b06      	ldr	r3, [pc, #24]	; (ea98 <pdsWlWrite+0xec>)
    ea7e:	4798      	blx	r3
        for(rowIdx = 0; rowIdx < EEPROM_NUM_ROWS; rowIdx++)
    ea80:	2400      	movs	r4, #0
            if( (UINT_MAX == rowMap[rowIdx].counter) &&
    ea82:	4902      	ldr	r1, [pc, #8]	; (ea8c <pdsWlWrite+0xe0>)
    ea84:	e7df      	b.n	ea46 <pdsWlWrite+0x9a>
    ea86:	46c0      	nop			; (mov r8, r8)
    ea88:	20000fdc 	.word	0x20000fdc
    ea8c:	0000ffff 	.word	0x0000ffff
    ea90:	0000e50d 	.word	0x0000e50d
    ea94:	0000e835 	.word	0x0000e835
    ea98:	0000e7dd 	.word	0x0000e7dd

0000ea9c <pdsWlRead>:
{
    ea9c:	b510      	push	{r4, lr}
	uint16_t rowIdx = fileMap[pdsFileItemIdx].maxCounterRowIdx;
    ea9e:	0040      	lsls	r0, r0, #1
    eaa0:	4b06      	ldr	r3, [pc, #24]	; (eabc <pdsWlRead+0x20>)
    eaa2:	5ac3      	ldrh	r3, [r0, r3]
	if (USHRT_MAX == rowIdx)
    eaa4:	4c06      	ldr	r4, [pc, #24]	; (eac0 <pdsWlRead+0x24>)
		return PDS_NOT_FOUND;
    eaa6:	2003      	movs	r0, #3
	if (USHRT_MAX == rowIdx)
    eaa8:	42a3      	cmp	r3, r4
    eaaa:	d100      	bne.n	eaae <pdsWlRead+0x12>
}
    eaac:	bd10      	pop	{r4, pc}
	size += sizeof(PdsWlHeader_t);
    eaae:	3209      	adds	r2, #9
	status = pdsNvmRead(rowIdx, buffer, size);
    eab0:	b292      	uxth	r2, r2
    eab2:	0018      	movs	r0, r3
    eab4:	4b03      	ldr	r3, [pc, #12]	; (eac4 <pdsWlRead+0x28>)
    eab6:	4798      	blx	r3
	return status;
    eab8:	e7f8      	b.n	eaac <pdsWlRead+0x10>
    eaba:	46c0      	nop			; (mov r8, r8)
    eabc:	20000fc0 	.word	0x20000fc0
    eac0:	0000ffff 	.word	0x0000ffff
    eac4:	0000e475 	.word	0x0000e475

0000eac8 <isFileFound>:

\param[out] - return true or false
******************************************************************************/
bool isFileFound(PdsFileItemIdx_t pdsFileItemIdx)
{
	uint16_t rowIdx = fileMap[pdsFileItemIdx].maxCounterRowIdx;
    eac8:	0040      	lsls	r0, r0, #1
	if (USHRT_MAX == rowIdx)
    eaca:	4b04      	ldr	r3, [pc, #16]	; (eadc <isFileFound+0x14>)
    eacc:	5ac0      	ldrh	r0, [r0, r3]
    eace:	4b04      	ldr	r3, [pc, #16]	; (eae0 <isFileFound+0x18>)
    ead0:	469c      	mov	ip, r3
    ead2:	4460      	add	r0, ip
    ead4:	1e43      	subs	r3, r0, #1
    ead6:	4198      	sbcs	r0, r3
    ead8:	b2c0      	uxtb	r0, r0
	}
	else
	{
		return true;
	}
}
    eada:	4770      	bx	lr
    eadc:	20000fc0 	.word	0x20000fc0
    eae0:	ffff0001 	.word	0xffff0001

0000eae4 <pdsWlDeleteAll>:

void pdsWlDeleteAll(void)
{
    eae4:	b510      	push	{r4, lr}
	/* Clear Filemap array */
	memset(&rowMap, UCHAR_MAX, EEPROM_NUM_ROWS * sizeof(RowMap_t));
    eae6:	2280      	movs	r2, #128	; 0x80
    eae8:	0052      	lsls	r2, r2, #1
    eaea:	21ff      	movs	r1, #255	; 0xff
    eaec:	4804      	ldr	r0, [pc, #16]	; (eb00 <pdsWlDeleteAll+0x1c>)
    eaee:	4c05      	ldr	r4, [pc, #20]	; (eb04 <pdsWlDeleteAll+0x20>)
    eaf0:	47a0      	blx	r4
	/* Clear Row Map Array */
    memset(&fileMap, UCHAR_MAX, PDS_MAX_FILE_IDX * sizeof(FileMap_t));
    eaf2:	221a      	movs	r2, #26
    eaf4:	21ff      	movs	r1, #255	; 0xff
    eaf6:	4804      	ldr	r0, [pc, #16]	; (eb08 <pdsWlDeleteAll+0x24>)
    eaf8:	47a0      	blx	r4
	/* Call NVM Erase All */
	pdsNvmEraseAll();
    eafa:	4b04      	ldr	r3, [pc, #16]	; (eb0c <pdsWlDeleteAll+0x28>)
    eafc:	4798      	blx	r3
}
    eafe:	bd10      	pop	{r4, pc}
    eb00:	20000fdc 	.word	0x20000fdc
    eb04:	00019ead 	.word	0x00019ead
    eb08:	20000fc0 	.word	0x20000fc0
    eb0c:	0000e5bd 	.word	0x0000e5bd

0000eb10 <hwTimerExpiryCallback>:
    swtimerProcessOverflow();
}

/* ISR to handle CC0 interrupt from TC0 */
static void hwTimerExpiryCallback(void)
{
    eb10:	b510      	push	{r4, lr}
    if (0 < runningTimers)
    eb12:	4b06      	ldr	r3, [pc, #24]	; (eb2c <hwTimerExpiryCallback+0x1c>)
    eb14:	781b      	ldrb	r3, [r3, #0]
    eb16:	2b00      	cmp	r3, #0
    eb18:	d100      	bne.n	eb1c <hwTimerExpiryCallback+0xc>
    {
        isTimerTriggered = true;
        SYSTEM_PostTask(TIMER_TASK_ID);
    }
}
    eb1a:	bd10      	pop	{r4, pc}
        isTimerTriggered = true;
    eb1c:	2201      	movs	r2, #1
    eb1e:	4b04      	ldr	r3, [pc, #16]	; (eb30 <hwTimerExpiryCallback+0x20>)
    eb20:	701a      	strb	r2, [r3, #0]
        SYSTEM_PostTask(TIMER_TASK_ID);
    eb22:	2001      	movs	r0, #1
    eb24:	4b03      	ldr	r3, [pc, #12]	; (eb34 <hwTimerExpiryCallback+0x24>)
    eb26:	4798      	blx	r3
}
    eb28:	e7f7      	b.n	eb1a <hwTimerExpiryCallback+0xa>
    eb2a:	46c0      	nop			; (mov r8, r8)
    eb2c:	200010ec 	.word	0x200010ec
    eb30:	2000297a 	.word	0x2000297a
    eb34:	0000f4a1 	.word	0x0000f4a1

0000eb38 <hwTimerOverflowCallback>:
{
    eb38:	b510      	push	{r4, lr}
    eb3a:	b082      	sub	sp, #8
    uint16_t temp = sysTime;
    eb3c:	4924      	ldr	r1, [pc, #144]	; (ebd0 <hwTimerOverflowCallback+0x98>)
    eb3e:	880a      	ldrh	r2, [r1, #0]
    eb40:	b292      	uxth	r2, r2
    if (++sysTime < temp)
    eb42:	880b      	ldrh	r3, [r1, #0]
    eb44:	3301      	adds	r3, #1
    eb46:	b29b      	uxth	r3, r3
    eb48:	800b      	strh	r3, [r1, #0]
    eb4a:	429a      	cmp	r2, r3
    eb4c:	d903      	bls.n	eb56 <hwTimerOverflowCallback+0x1e>
        sysTimeOvf++;
    eb4e:	4a21      	ldr	r2, [pc, #132]	; (ebd4 <hwTimerOverflowCallback+0x9c>)
    eb50:	6813      	ldr	r3, [r2, #0]
    eb52:	3301      	adds	r3, #1
    eb54:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    eb56:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
    eb5a:	425a      	negs	r2, r3
    eb5c:	4153      	adcs	r3, r2
    eb5e:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    eb60:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
    eb62:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    eb66:	2200      	movs	r2, #0
    eb68:	4b1b      	ldr	r3, [pc, #108]	; (ebd8 <hwTimerOverflowCallback+0xa0>)
    eb6a:	701a      	strb	r2, [r3, #0]
	return flags;
    eb6c:	9c01      	ldr	r4, [sp, #4]
{
    uint32_t tmo32;
    uint16_t tmoHigh16, tmoLow16;
    uint8_t flags = cpu_irq_save();

    if (SWTIMER_INVALID != runningTimerQueueHead && !swTimers[runningTimerQueueHead].loaded)
    eb6e:	4b1b      	ldr	r3, [pc, #108]	; (ebdc <hwTimerOverflowCallback+0xa4>)
    eb70:	681b      	ldr	r3, [r3, #0]
    eb72:	2bff      	cmp	r3, #255	; 0xff
    eb74:	d00d      	beq.n	eb92 <hwTimerOverflowCallback+0x5a>
    eb76:	0119      	lsls	r1, r3, #4
    eb78:	4a19      	ldr	r2, [pc, #100]	; (ebe0 <hwTimerOverflowCallback+0xa8>)
    eb7a:	1852      	adds	r2, r2, r1
    eb7c:	7b52      	ldrb	r2, [r2, #13]
    eb7e:	2a00      	cmp	r2, #0
    eb80:	d107      	bne.n	eb92 <hwTimerOverflowCallback+0x5a>
    {
        tmo32 = swTimers[runningTimerQueueHead].absoluteExpiryTime;
    eb82:	4a17      	ldr	r2, [pc, #92]	; (ebe0 <hwTimerOverflowCallback+0xa8>)
    eb84:	5888      	ldr	r0, [r1, r2]
        tmoHigh16 = (uint16_t)(tmo32 >> SWTIMER_SYSTIME_SHIFTMASK);

        if (tmoHigh16 == sysTime)
    eb86:	4b12      	ldr	r3, [pc, #72]	; (ebd0 <hwTimerOverflowCallback+0x98>)
    eb88:	881b      	ldrh	r3, [r3, #0]
    eb8a:	b29b      	uxth	r3, r3
    eb8c:	0c02      	lsrs	r2, r0, #16
    eb8e:	429a      	cmp	r2, r3
    eb90:	d00a      	beq.n	eba8 <hwTimerOverflowCallback+0x70>
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    eb92:	23ff      	movs	r3, #255	; 0xff
    eb94:	4223      	tst	r3, r4
    eb96:	d005      	beq.n	eba4 <hwTimerOverflowCallback+0x6c>
		cpu_irq_enable();
    eb98:	2201      	movs	r2, #1
    eb9a:	4b0f      	ldr	r3, [pc, #60]	; (ebd8 <hwTimerOverflowCallback+0xa0>)
    eb9c:	701a      	strb	r2, [r3, #0]
    eb9e:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    eba2:	b662      	cpsie	i
}
    eba4:	b002      	add	sp, #8
    eba6:	bd10      	pop	{r4, pc}
        {
            tmoLow16 = (uint16_t)(tmo32 & SWTIMER_HWTIME_MASK);
    eba8:	b280      	uxth	r0, r0
            if (SWTIMER_MIN_TIMEOUT < tmoLow16)
    ebaa:	28ff      	cmp	r0, #255	; 0xff
    ebac:	d909      	bls.n	ebc2 <hwTimerOverflowCallback+0x8a>
            {
                common_tc_delay(tmoLow16);
    ebae:	4b0d      	ldr	r3, [pc, #52]	; (ebe4 <hwTimerOverflowCallback+0xac>)
    ebb0:	4798      	blx	r3
                swTimers[runningTimerQueueHead].loaded = true;
    ebb2:	4b0a      	ldr	r3, [pc, #40]	; (ebdc <hwTimerOverflowCallback+0xa4>)
    ebb4:	681a      	ldr	r2, [r3, #0]
    ebb6:	0112      	lsls	r2, r2, #4
    ebb8:	4b09      	ldr	r3, [pc, #36]	; (ebe0 <hwTimerOverflowCallback+0xa8>)
    ebba:	189b      	adds	r3, r3, r2
    ebbc:	2201      	movs	r2, #1
    ebbe:	735a      	strb	r2, [r3, #13]
    ebc0:	e7e7      	b.n	eb92 <hwTimerOverflowCallback+0x5a>
            }
            else
            {
                isTimerTriggered = true;
    ebc2:	2201      	movs	r2, #1
    ebc4:	4b08      	ldr	r3, [pc, #32]	; (ebe8 <hwTimerOverflowCallback+0xb0>)
    ebc6:	701a      	strb	r2, [r3, #0]
                SYSTEM_PostTask(TIMER_TASK_ID);
    ebc8:	2001      	movs	r0, #1
    ebca:	4b08      	ldr	r3, [pc, #32]	; (ebec <hwTimerOverflowCallback+0xb4>)
    ebcc:	4798      	blx	r3
    ebce:	e7e0      	b.n	eb92 <hwTimerOverflowCallback+0x5a>
    ebd0:	20002978 	.word	0x20002978
    ebd4:	2000297c 	.word	0x2000297c
    ebd8:	20000014 	.word	0x20000014
    ebdc:	200010e8 	.word	0x200010e8
    ebe0:	200027e8 	.word	0x200027e8
    ebe4:	0000fc7d 	.word	0x0000fc7d
    ebe8:	2000297a 	.word	0x2000297a
    ebec:	0000f4a1 	.word	0x0000f4a1

0000ebf0 <loadHwTimer>:
{
    ebf0:	b570      	push	{r4, r5, r6, lr}
    ebf2:	0004      	movs	r4, r0
    if (SWTIMER_INVALID != timerId)
    ebf4:	28ff      	cmp	r0, #255	; 0xff
    ebf6:	d030      	beq.n	ec5a <loadHwTimer+0x6a>
    time |= ((uint64_t) sysTimeOvf) << 32;
    ebf8:	4b19      	ldr	r3, [pc, #100]	; (ec60 <loadHwTimer+0x70>)
    ebfa:	681b      	ldr	r3, [r3, #0]
    time |= ((uint64_t) sysTime) << 16;
    ebfc:	4b19      	ldr	r3, [pc, #100]	; (ec64 <loadHwTimer+0x74>)
    ebfe:	881d      	ldrh	r5, [r3, #0]
    ec00:	042d      	lsls	r5, r5, #16
    time |= (uint64_t) common_tc_read_count();
    ec02:	4b19      	ldr	r3, [pc, #100]	; (ec68 <loadHwTimer+0x78>)
    ec04:	4798      	blx	r3
        uint32_t expiryTime = swTimers[timerId].absoluteExpiryTime;
    ec06:	0123      	lsls	r3, r4, #4
    time |= (uint64_t) common_tc_read_count();
    ec08:	4328      	orrs	r0, r5
    return ((t2 - t1) < INT32_MAX);
    ec0a:	4a18      	ldr	r2, [pc, #96]	; (ec6c <loadHwTimer+0x7c>)
    ec0c:	589b      	ldr	r3, [r3, r2]
    ec0e:	1a18      	subs	r0, r3, r0
        if (swtimerCompareTime(now, expiryTime))
    ec10:	4b17      	ldr	r3, [pc, #92]	; (ec70 <loadHwTimer+0x80>)
    ec12:	4298      	cmp	r0, r3
    ec14:	d81a      	bhi.n	ec4c <loadHwTimer+0x5c>
            if (!swTimers[timerId].loaded)
    ec16:	0122      	lsls	r2, r4, #4
    ec18:	4b14      	ldr	r3, [pc, #80]	; (ec6c <loadHwTimer+0x7c>)
    ec1a:	189b      	adds	r3, r3, r2
    ec1c:	7b5b      	ldrb	r3, [r3, #13]
    ec1e:	2b00      	cmp	r3, #0
    ec20:	d11d      	bne.n	ec5e <loadHwTimer+0x6e>
                if (SWTIMER_MIN_TIMEOUT >= timeDiff)
    ec22:	28ff      	cmp	r0, #255	; 0xff
    ec24:	d90b      	bls.n	ec3e <loadHwTimer+0x4e>
                else  if ((uint32_t)TIMER_PERIOD >= timeDiff)
    ec26:	4b13      	ldr	r3, [pc, #76]	; (ec74 <loadHwTimer+0x84>)
    ec28:	4298      	cmp	r0, r3
    ec2a:	d818      	bhi.n	ec5e <loadHwTimer+0x6e>
                    common_tc_delay((uint16_t)timeDiff);
    ec2c:	b280      	uxth	r0, r0
    ec2e:	4b12      	ldr	r3, [pc, #72]	; (ec78 <loadHwTimer+0x88>)
    ec30:	4798      	blx	r3
                    swTimers[timerId].loaded = true;
    ec32:	0124      	lsls	r4, r4, #4
    ec34:	4b0d      	ldr	r3, [pc, #52]	; (ec6c <loadHwTimer+0x7c>)
    ec36:	191c      	adds	r4, r3, r4
    ec38:	2301      	movs	r3, #1
    ec3a:	7363      	strb	r3, [r4, #13]
    ec3c:	e00f      	b.n	ec5e <loadHwTimer+0x6e>
                    isTimerTriggered = true;
    ec3e:	2201      	movs	r2, #1
    ec40:	4b0e      	ldr	r3, [pc, #56]	; (ec7c <loadHwTimer+0x8c>)
    ec42:	701a      	strb	r2, [r3, #0]
                    SYSTEM_PostTask(TIMER_TASK_ID);
    ec44:	2001      	movs	r0, #1
    ec46:	4b0e      	ldr	r3, [pc, #56]	; (ec80 <loadHwTimer+0x90>)
    ec48:	4798      	blx	r3
    ec4a:	e008      	b.n	ec5e <loadHwTimer+0x6e>
            isTimerTriggered = true;
    ec4c:	2201      	movs	r2, #1
    ec4e:	4b0b      	ldr	r3, [pc, #44]	; (ec7c <loadHwTimer+0x8c>)
    ec50:	701a      	strb	r2, [r3, #0]
            SYSTEM_PostTask(TIMER_TASK_ID);
    ec52:	2001      	movs	r0, #1
    ec54:	4b0a      	ldr	r3, [pc, #40]	; (ec80 <loadHwTimer+0x90>)
    ec56:	4798      	blx	r3
    ec58:	e001      	b.n	ec5e <loadHwTimer+0x6e>
        common_tc_compare_stop();
    ec5a:	4b0a      	ldr	r3, [pc, #40]	; (ec84 <loadHwTimer+0x94>)
    ec5c:	4798      	blx	r3
}
    ec5e:	bd70      	pop	{r4, r5, r6, pc}
    ec60:	2000297c 	.word	0x2000297c
    ec64:	20002978 	.word	0x20002978
    ec68:	0000fbd5 	.word	0x0000fbd5
    ec6c:	200027e8 	.word	0x200027e8
    ec70:	7ffffffe 	.word	0x7ffffffe
    ec74:	0000ffff 	.word	0x0000ffff
    ec78:	0000fc7d 	.word	0x0000fc7d
    ec7c:	2000297a 	.word	0x2000297a
    ec80:	0000f4a1 	.word	0x0000f4a1
    ec84:	0000fc21 	.word	0x0000fc21

0000ec88 <swtimerInternalHandler>:

/**************************************************************************//**
\brief Internal handler for the timer trigger
******************************************************************************/
static void swtimerInternalHandler(void)
{
    ec88:	b510      	push	{r4, lr}
    if (isTimerTriggered)
    ec8a:	4b1d      	ldr	r3, [pc, #116]	; (ed00 <swtimerInternalHandler+0x78>)
    ec8c:	781b      	ldrb	r3, [r3, #0]
    ec8e:	2b00      	cmp	r3, #0
    ec90:	d027      	beq.n	ece2 <swtimerInternalHandler+0x5a>
    {
        isTimerTriggered = false;
    ec92:	2200      	movs	r2, #0
    ec94:	4b1a      	ldr	r3, [pc, #104]	; (ed00 <swtimerInternalHandler+0x78>)
    ec96:	701a      	strb	r2, [r3, #0]

        if (0 < runningTimers)
    ec98:	4b1a      	ldr	r3, [pc, #104]	; (ed04 <swtimerInternalHandler+0x7c>)
    ec9a:	781b      	ldrb	r3, [r3, #0]
    ec9c:	2b00      	cmp	r3, #0
    ec9e:	d020      	beq.n	ece2 <swtimerInternalHandler+0x5a>
        { /* Holds the number of running timers */
            if ((expiredTimerQueueHead == SWTIMER_INVALID) && \
    eca0:	4b19      	ldr	r3, [pc, #100]	; (ed08 <swtimerInternalHandler+0x80>)
    eca2:	681b      	ldr	r3, [r3, #0]
    eca4:	2bff      	cmp	r3, #255	; 0xff
    eca6:	d01d      	beq.n	ece4 <swtimerInternalHandler+0x5c>
                expiredTimerQueueHead = runningTimerQueueHead;
                expiredTimerQueueTail = runningTimerQueueHead;
            }
            else
            { /* there were already some timers expired before this one */
                swTimers[expiredTimerQueueTail].nextTimer = runningTimerQueueHead;
    eca8:	4b18      	ldr	r3, [pc, #96]	; (ed0c <swtimerInternalHandler+0x84>)
    ecaa:	6818      	ldr	r0, [r3, #0]
    ecac:	4918      	ldr	r1, [pc, #96]	; (ed10 <swtimerInternalHandler+0x88>)
    ecae:	680b      	ldr	r3, [r1, #0]
    ecb0:	011a      	lsls	r2, r3, #4
    ecb2:	4b18      	ldr	r3, [pc, #96]	; (ed14 <swtimerInternalHandler+0x8c>)
    ecb4:	189b      	adds	r3, r3, r2
    ecb6:	7318      	strb	r0, [r3, #12]
                expiredTimerQueueTail = runningTimerQueueHead;
    ecb8:	6008      	str	r0, [r1, #0]
            }

            runningTimerQueueHead = swTimers[runningTimerQueueHead].nextTimer;
    ecba:	4a16      	ldr	r2, [pc, #88]	; (ed14 <swtimerInternalHandler+0x8c>)
    ecbc:	4913      	ldr	r1, [pc, #76]	; (ed0c <swtimerInternalHandler+0x84>)
    ecbe:	680b      	ldr	r3, [r1, #0]
    ecc0:	011b      	lsls	r3, r3, #4
    ecc2:	18d3      	adds	r3, r2, r3
    ecc4:	7b18      	ldrb	r0, [r3, #12]
    ecc6:	6008      	str	r0, [r1, #0]

            swTimers[expiredTimerQueueTail].nextTimer = SWTIMER_INVALID;
    ecc8:	4b11      	ldr	r3, [pc, #68]	; (ed10 <swtimerInternalHandler+0x88>)
    ecca:	681b      	ldr	r3, [r3, #0]
    eccc:	011b      	lsls	r3, r3, #4
    ecce:	18d2      	adds	r2, r2, r3
    ecd0:	23ff      	movs	r3, #255	; 0xff
    ecd2:	7313      	strb	r3, [r2, #12]

            if ((--runningTimers) > 0)
    ecd4:	4a0b      	ldr	r2, [pc, #44]	; (ed04 <swtimerInternalHandler+0x7c>)
    ecd6:	7813      	ldrb	r3, [r2, #0]
    ecd8:	3b01      	subs	r3, #1
    ecda:	b2db      	uxtb	r3, r3
    ecdc:	7013      	strb	r3, [r2, #0]
    ecde:	2b00      	cmp	r3, #0
    ece0:	d10b      	bne.n	ecfa <swtimerInternalHandler+0x72>
            { /* keep the ball rolling! load the next head timer from the queue */
                loadHwTimer(runningTimerQueueHead);
            }
        }
    }
}
    ece2:	bd10      	pop	{r4, pc}
                (expiredTimerQueueTail == SWTIMER_INVALID))
    ece4:	4b0a      	ldr	r3, [pc, #40]	; (ed10 <swtimerInternalHandler+0x88>)
            if ((expiredTimerQueueHead == SWTIMER_INVALID) && \
    ece6:	681b      	ldr	r3, [r3, #0]
    ece8:	2bff      	cmp	r3, #255	; 0xff
    ecea:	d1dd      	bne.n	eca8 <swtimerInternalHandler+0x20>
                expiredTimerQueueHead = runningTimerQueueHead;
    ecec:	4b07      	ldr	r3, [pc, #28]	; (ed0c <swtimerInternalHandler+0x84>)
    ecee:	681b      	ldr	r3, [r3, #0]
    ecf0:	4a05      	ldr	r2, [pc, #20]	; (ed08 <swtimerInternalHandler+0x80>)
    ecf2:	6013      	str	r3, [r2, #0]
                expiredTimerQueueTail = runningTimerQueueHead;
    ecf4:	4a06      	ldr	r2, [pc, #24]	; (ed10 <swtimerInternalHandler+0x88>)
    ecf6:	6013      	str	r3, [r2, #0]
    ecf8:	e7df      	b.n	ecba <swtimerInternalHandler+0x32>
                loadHwTimer(runningTimerQueueHead);
    ecfa:	4b07      	ldr	r3, [pc, #28]	; (ed18 <swtimerInternalHandler+0x90>)
    ecfc:	4798      	blx	r3
}
    ecfe:	e7f0      	b.n	ece2 <swtimerInternalHandler+0x5a>
    ed00:	2000297a 	.word	0x2000297a
    ed04:	200010ec 	.word	0x200010ec
    ed08:	200010e0 	.word	0x200010e0
    ed0c:	200010e8 	.word	0x200010e8
    ed10:	200010e4 	.word	0x200010e4
    ed14:	200027e8 	.word	0x200027e8
    ed18:	0000ebf1 	.word	0x0000ebf1

0000ed1c <SwTimerReset>:
    /*
    * Initialize the timer resources like timer arrays queues, timer registers
    */
    uint8_t index;

    runningTimers = 0u;
    ed1c:	2300      	movs	r3, #0
    ed1e:	4a0d      	ldr	r2, [pc, #52]	; (ed54 <SwTimerReset+0x38>)
    ed20:	7013      	strb	r3, [r2, #0]
    isTimerTriggered = false;
    ed22:	4a0d      	ldr	r2, [pc, #52]	; (ed58 <SwTimerReset+0x3c>)
    ed24:	7013      	strb	r3, [r2, #0]

    runningTimerQueueHead = SWTIMER_INVALID;
    ed26:	33ff      	adds	r3, #255	; 0xff
    ed28:	4a0c      	ldr	r2, [pc, #48]	; (ed5c <SwTimerReset+0x40>)
    ed2a:	6013      	str	r3, [r2, #0]
    expiredTimerQueueHead = SWTIMER_INVALID;
    ed2c:	4a0c      	ldr	r2, [pc, #48]	; (ed60 <SwTimerReset+0x44>)
    ed2e:	6013      	str	r3, [r2, #0]
    expiredTimerQueueTail = SWTIMER_INVALID;
    ed30:	4a0c      	ldr	r2, [pc, #48]	; (ed64 <SwTimerReset+0x48>)
    ed32:	6013      	str	r3, [r2, #0]
    ed34:	4b0c      	ldr	r3, [pc, #48]	; (ed68 <SwTimerReset+0x4c>)
    ed36:	0018      	movs	r0, r3
    ed38:	3091      	adds	r0, #145	; 0x91
    ed3a:	30ff      	adds	r0, #255	; 0xff

    for (index = 0; index < TOTAL_NUMBER_OF_SW_TIMERS; index++)
    {
        swTimers[index].nextTimer = SWTIMER_INVALID;
    ed3c:	21ff      	movs	r1, #255	; 0xff
        swTimers[index].timerCb = NULL;
    ed3e:	2200      	movs	r2, #0
        swTimers[index].nextTimer = SWTIMER_INVALID;
    ed40:	7219      	strb	r1, [r3, #8]
        swTimers[index].timerCb = NULL;
    ed42:	601a      	str	r2, [r3, #0]
    ed44:	3310      	adds	r3, #16
    for (index = 0; index < TOTAL_NUMBER_OF_SW_TIMERS; index++)
    ed46:	4283      	cmp	r3, r0
    ed48:	d1fa      	bne.n	ed40 <SwTimerReset+0x24>
    }

    allocatedTimerId = 0u;
    ed4a:	2200      	movs	r2, #0
    ed4c:	4b07      	ldr	r3, [pc, #28]	; (ed6c <SwTimerReset+0x50>)
    ed4e:	701a      	strb	r2, [r3, #0]
}
    ed50:	4770      	bx	lr
    ed52:	46c0      	nop			; (mov r8, r8)
    ed54:	200010ec 	.word	0x200010ec
    ed58:	2000297a 	.word	0x2000297a
    ed5c:	200010e8 	.word	0x200010e8
    ed60:	200010e0 	.word	0x200010e0
    ed64:	200010e4 	.word	0x200010e4
    ed68:	200027ec 	.word	0x200027ec
    ed6c:	200010dc 	.word	0x200010dc

0000ed70 <SystemTimerInit>:

/**************************************************************************//**
\brief Initializes the Software Timer module
******************************************************************************/
void SystemTimerInit(void)
{
    ed70:	b510      	push	{r4, lr}
    SwTimerReset();
    ed72:	4b08      	ldr	r3, [pc, #32]	; (ed94 <SystemTimerInit+0x24>)
    ed74:	4798      	blx	r3

    /* initialize system time parameters */
    sysTimeOvf = 0x00000000;
    ed76:	2300      	movs	r3, #0
    ed78:	4a07      	ldr	r2, [pc, #28]	; (ed98 <SystemTimerInit+0x28>)
    ed7a:	6013      	str	r3, [r2, #0]
    sysTime = 0x0000;
    ed7c:	4a07      	ldr	r2, [pc, #28]	; (ed9c <SystemTimerInit+0x2c>)
    ed7e:	8013      	strh	r3, [r2, #0]

    common_tc_init();
    ed80:	4b07      	ldr	r3, [pc, #28]	; (eda0 <SystemTimerInit+0x30>)
    ed82:	4798      	blx	r3
    set_common_tc_overflow_callback(hwTimerOverflowCallback);
    ed84:	4807      	ldr	r0, [pc, #28]	; (eda4 <SystemTimerInit+0x34>)
    ed86:	4b08      	ldr	r3, [pc, #32]	; (eda8 <SystemTimerInit+0x38>)
    ed88:	4798      	blx	r3
    set_common_tc_expiry_callback(hwTimerExpiryCallback);
    ed8a:	4808      	ldr	r0, [pc, #32]	; (edac <SystemTimerInit+0x3c>)
    ed8c:	4b08      	ldr	r3, [pc, #32]	; (edb0 <SystemTimerInit+0x40>)
    ed8e:	4798      	blx	r3
}
    ed90:	bd10      	pop	{r4, pc}
    ed92:	46c0      	nop			; (mov r8, r8)
    ed94:	0000ed1d 	.word	0x0000ed1d
    ed98:	2000297c 	.word	0x2000297c
    ed9c:	20002978 	.word	0x20002978
    eda0:	0000fce9 	.word	0x0000fce9
    eda4:	0000eb39 	.word	0x0000eb39
    eda8:	0000fd6d 	.word	0x0000fd6d
    edac:	0000eb11 	.word	0x0000eb11
    edb0:	0000fd79 	.word	0x0000fd79

0000edb4 <SwTimerGetTime>:
/**************************************************************************//**
\brief Get current system time.
\return Returns current system time in microseconds
******************************************************************************/
uint64_t SwTimerGetTime(void)
{
    edb4:	b570      	push	{r4, r5, r6, lr}
    time |= ((uint64_t) sysTimeOvf) << 32;
    edb6:	4b05      	ldr	r3, [pc, #20]	; (edcc <SwTimerGetTime+0x18>)
    edb8:	681c      	ldr	r4, [r3, #0]
    time |= ((uint64_t) sysTime) << 16;
    edba:	4b05      	ldr	r3, [pc, #20]	; (edd0 <SwTimerGetTime+0x1c>)
    edbc:	881d      	ldrh	r5, [r3, #0]
    edbe:	042d      	lsls	r5, r5, #16
    time |= (uint64_t) common_tc_read_count();
    edc0:	4b04      	ldr	r3, [pc, #16]	; (edd4 <SwTimerGetTime+0x20>)
    edc2:	4798      	blx	r3
    edc4:	4328      	orrs	r0, r5
    return gettime();
}
    edc6:	0021      	movs	r1, r4
    edc8:	bd70      	pop	{r4, r5, r6, pc}
    edca:	46c0      	nop			; (mov r8, r8)
    edcc:	2000297c 	.word	0x2000297c
    edd0:	20002978 	.word	0x20002978
    edd4:	0000fbd5 	.word	0x0000fbd5

0000edd8 <SwTimerCreate>:

\return LORAWAN_SUCCESS if new timerId is allocated
        LORAWAN_RESOURCE_UNAVAILABLE if there is no more timerId to allocate
******************************************************************************/
StackRetStatus_t SwTimerCreate(uint8_t *timerId)
{
    edd8:	b510      	push	{r4, lr}
    edda:	0004      	movs	r4, r0
    StackRetStatus_t retVal = LORAWAN_SUCCESS;

    if (allocatedTimerId < TOTAL_NUMBER_OF_SW_TIMERS)
    eddc:	4b08      	ldr	r3, [pc, #32]	; (ee00 <SwTimerCreate+0x28>)
    edde:	781b      	ldrb	r3, [r3, #0]
        * If you reach this spot it means the TOTAL_NUMBER_OF_SW_TIMERS
        * is #defined to a lower value than the number of timers that have
        * been SwTimerCreate()
        */
        SYS_ASSERT_FATAL(ASSERT_HAL_TIMERID_EXHAUSTED);
        retVal = LORAWAN_RESOURCE_UNAVAILABLE;
    ede0:	2014      	movs	r0, #20
    if (allocatedTimerId < TOTAL_NUMBER_OF_SW_TIMERS)
    ede2:	2b18      	cmp	r3, #24
    ede4:	d900      	bls.n	ede8 <SwTimerCreate+0x10>
    }

    return retVal;
}
    ede6:	bd10      	pop	{r4, pc}
        ATOMIC_SECTION_ENTER
    ede8:	4b06      	ldr	r3, [pc, #24]	; (ee04 <SwTimerCreate+0x2c>)
    edea:	4798      	blx	r3
        *timerId = allocatedTimerId;
    edec:	4a04      	ldr	r2, [pc, #16]	; (ee00 <SwTimerCreate+0x28>)
    edee:	7813      	ldrb	r3, [r2, #0]
    edf0:	7023      	strb	r3, [r4, #0]
        allocatedTimerId++;
    edf2:	3301      	adds	r3, #1
    edf4:	7013      	strb	r3, [r2, #0]
        ATOMIC_SECTION_EXIT
    edf6:	4b04      	ldr	r3, [pc, #16]	; (ee08 <SwTimerCreate+0x30>)
    edf8:	4798      	blx	r3
    StackRetStatus_t retVal = LORAWAN_SUCCESS;
    edfa:	2008      	movs	r0, #8
    edfc:	e7f3      	b.n	ede6 <SwTimerCreate+0xe>
    edfe:	46c0      	nop			; (mov r8, r8)
    ee00:	200010dc 	.word	0x200010dc
    ee04:	000083b5 	.word	0x000083b5
    ee08:	000083c1 	.word	0x000083c1

0000ee0c <SwTimerStart>:
        LORAWAN_INVALID_REQUEST if \timerId is already running
        LORAWAN_SUCCESS if \timerId is successfully queued for running
******************************************************************************/
StackRetStatus_t SwTimerStart(uint8_t timerId, uint32_t timerCount,
    SwTimeoutType_t timeoutType, void *timerCb, void *paramCb)
{
    ee0c:	b5f0      	push	{r4, r5, r6, r7, lr}
    ee0e:	46d6      	mov	lr, sl
    ee10:	464f      	mov	r7, r9
    ee12:	4646      	mov	r6, r8
    ee14:	b5c0      	push	{r6, r7, lr}
    ee16:	b084      	sub	sp, #16
    ee18:	0007      	movs	r7, r0
    ee1a:	000d      	movs	r5, r1
    ee1c:	0016      	movs	r6, r2
    ee1e:	001c      	movs	r4, r3
    uint32_t pointInTime;

    if (TOTAL_NUMBER_OF_SW_TIMERS <= timerId || NULL == timerCb)
    {
        SYS_ASSERT_INFO(ASSERT_HAL_TIMER_START_FAILURE);
        return LORAWAN_INVALID_PARAMETER;
    ee20:	200a      	movs	r0, #10
    if (TOTAL_NUMBER_OF_SW_TIMERS <= timerId || NULL == timerCb)
    ee22:	2f18      	cmp	r7, #24
    ee24:	d809      	bhi.n	ee3a <SwTimerStart+0x2e>
    ee26:	2b00      	cmp	r3, #0
    ee28:	d100      	bne.n	ee2c <SwTimerStart+0x20>
    ee2a:	e08c      	b.n	ef46 <SwTimerStart+0x13a>
    }

    if (NULL != swTimers[timerId].timerCb)
    ee2c:	013a      	lsls	r2, r7, #4
    ee2e:	4b52      	ldr	r3, [pc, #328]	; (ef78 <SwTimerStart+0x16c>)
    ee30:	189b      	adds	r3, r3, r2
    ee32:	685b      	ldr	r3, [r3, #4]
        /*
        * Timer is already running if the callback function of the
        * corresponding timer index in the timer array is not NULL.
        */
        SYS_ASSERT_INFO(ASSERT_HAL_TIMER_START_FAILURE);
        return LORAWAN_INVALID_REQUEST;
    ee34:	300b      	adds	r0, #11
    if (NULL != swTimers[timerId].timerCb)
    ee36:	2b00      	cmp	r3, #0
    ee38:	d005      	beq.n	ee46 <SwTimerStart+0x3a>
        }
    }

    swtimerStartAbsoluteTimer(timerId, pointInTime, timerCb, paramCb);
    return LORAWAN_SUCCESS;
}
    ee3a:	b004      	add	sp, #16
    ee3c:	bc1c      	pop	{r2, r3, r4}
    ee3e:	4690      	mov	r8, r2
    ee40:	4699      	mov	r9, r3
    ee42:	46a2      	mov	sl, r4
    ee44:	bdf0      	pop	{r4, r5, r6, r7, pc}
    time |= ((uint64_t) sysTimeOvf) << 32;
    ee46:	4b4d      	ldr	r3, [pc, #308]	; (ef7c <SwTimerStart+0x170>)
    ee48:	681b      	ldr	r3, [r3, #0]
    time |= ((uint64_t) sysTime) << 16;
    ee4a:	4b4d      	ldr	r3, [pc, #308]	; (ef80 <SwTimerStart+0x174>)
    ee4c:	8818      	ldrh	r0, [r3, #0]
    ee4e:	0403      	lsls	r3, r0, #16
    ee50:	4698      	mov	r8, r3
    time |= (uint64_t) common_tc_read_count();
    ee52:	4b4c      	ldr	r3, [pc, #304]	; (ef84 <SwTimerStart+0x178>)
    ee54:	4798      	blx	r3
    ee56:	4643      	mov	r3, r8
    ee58:	4303      	orrs	r3, r0
    switch (timeoutType)
    ee5a:	2e00      	cmp	r6, #0
    ee5c:	d003      	beq.n	ee66 <SwTimerStart+0x5a>
    ee5e:	2e01      	cmp	r6, #1
    ee60:	d038      	beq.n	eed4 <SwTimerStart+0xc8>
            return LORAWAN_INVALID_PARAMETER;
    ee62:	200a      	movs	r0, #10
    ee64:	e7e9      	b.n	ee3a <SwTimerStart+0x2e>
            if ((timerCount > SWTIMER_MAX_TIMEOUT) || \
    ee66:	4948      	ldr	r1, [pc, #288]	; (ef88 <SwTimerStart+0x17c>)
                return LORAWAN_INVALID_PARAMETER;
    ee68:	200a      	movs	r0, #10
            if ((timerCount > SWTIMER_MAX_TIMEOUT) || \
    ee6a:	002a      	movs	r2, r5
    ee6c:	3aff      	subs	r2, #255	; 0xff
            pointInTime = ADD_TIME(timerCount, now);
    ee6e:	18ed      	adds	r5, r5, r3
            if ((timerCount > SWTIMER_MAX_TIMEOUT) || \
    ee70:	428a      	cmp	r2, r1
    ee72:	d8e2      	bhi.n	ee3a <SwTimerStart+0x2e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    ee74:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    ee78:	425a      	negs	r2, r3
    ee7a:	4153      	adcs	r3, r2
    ee7c:	9303      	str	r3, [sp, #12]
  __ASM volatile ("cpsid i" : : : "memory");
    ee7e:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
    ee80:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    ee84:	2600      	movs	r6, #0
    ee86:	4b41      	ldr	r3, [pc, #260]	; (ef8c <SwTimerStart+0x180>)
    ee88:	701e      	strb	r6, [r3, #0]
	return flags;
    ee8a:	9b03      	ldr	r3, [sp, #12]
    ee8c:	4699      	mov	r9, r3
    swtimerInternalHandler();
    ee8e:	4b40      	ldr	r3, [pc, #256]	; (ef90 <SwTimerStart+0x184>)
    ee90:	4798      	blx	r3
    swTimers[timerId].absoluteExpiryTime = pointInTime;
    ee92:	4b39      	ldr	r3, [pc, #228]	; (ef78 <SwTimerStart+0x16c>)
    ee94:	013a      	lsls	r2, r7, #4
    ee96:	50d5      	str	r5, [r2, r3]
    swTimers[timerId].timerCb = (void (*)(void*))handlerCb;
    ee98:	189b      	adds	r3, r3, r2
    ee9a:	605c      	str	r4, [r3, #4]
    swTimers[timerId].paramCb = parameter;
    ee9c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    ee9e:	609a      	str	r2, [r3, #8]
    swTimers[timerId].loaded = false;
    eea0:	735e      	strb	r6, [r3, #13]
    runningTimers++;
    eea2:	4a3c      	ldr	r2, [pc, #240]	; (ef94 <SwTimerStart+0x188>)
    eea4:	7813      	ldrb	r3, [r2, #0]
    eea6:	3301      	adds	r3, #1
    eea8:	b2db      	uxtb	r3, r3
    eeaa:	7013      	strb	r3, [r2, #0]
    if (SWTIMER_INVALID == runningTimerQueueHead)
    eeac:	4b3a      	ldr	r3, [pc, #232]	; (ef98 <SwTimerStart+0x18c>)
    eeae:	681b      	ldr	r3, [r3, #0]
    eeb0:	469a      	mov	sl, r3
    eeb2:	2bff      	cmp	r3, #255	; 0xff
    eeb4:	d016      	beq.n	eee4 <SwTimerStart+0xd8>
        uint8_t currIndex = runningTimerQueueHead;
    eeb6:	466a      	mov	r2, sp
    eeb8:	7013      	strb	r3, [r2, #0]
    eeba:	7812      	ldrb	r2, [r2, #0]
        for (index = 0; index < runningTimers; index++)
    eebc:	4b35      	ldr	r3, [pc, #212]	; (ef94 <SwTimerStart+0x188>)
    eebe:	781b      	ldrb	r3, [r3, #0]
    eec0:	2b00      	cmp	r3, #0
    eec2:	d042      	beq.n	ef4a <SwTimerStart+0x13e>
    eec4:	9200      	str	r2, [sp, #0]
    eec6:	2300      	movs	r3, #0
                if (swtimerCompareTime(swTimers[currIndex].absoluteExpiryTime,
    eec8:	492b      	ldr	r1, [pc, #172]	; (ef78 <SwTimerStart+0x16c>)
    eeca:	4688      	mov	r8, r1
    eecc:	4833      	ldr	r0, [pc, #204]	; (ef9c <SwTimerStart+0x190>)
                    currIndex = swTimers[currIndex].nextTimer;
    eece:	468c      	mov	ip, r1
        for (index = 0; index < runningTimers; index++)
    eed0:	4c30      	ldr	r4, [pc, #192]	; (ef94 <SwTimerStart+0x188>)
    eed2:	e02a      	b.n	ef2a <SwTimerStart+0x11e>
            if ((timeout > SWTIMER_MAX_TIMEOUT) || \
    eed4:	0028      	movs	r0, r5
    eed6:	38ff      	subs	r0, #255	; 0xff
    eed8:	1ac3      	subs	r3, r0, r3
    eeda:	4a2b      	ldr	r2, [pc, #172]	; (ef88 <SwTimerStart+0x17c>)
                return LORAWAN_INVALID_PARAMETER;
    eedc:	200a      	movs	r0, #10
            if ((timeout > SWTIMER_MAX_TIMEOUT) || \
    eede:	4293      	cmp	r3, r2
    eee0:	d9c8      	bls.n	ee74 <SwTimerStart+0x68>
    eee2:	e7aa      	b.n	ee3a <SwTimerStart+0x2e>
        runningTimerQueueHead = timerId;
    eee4:	4b2c      	ldr	r3, [pc, #176]	; (ef98 <SwTimerStart+0x18c>)
    eee6:	601f      	str	r7, [r3, #0]
        loadHwTimer(runningTimerQueueHead);
    eee8:	0038      	movs	r0, r7
    eeea:	4b2d      	ldr	r3, [pc, #180]	; (efa0 <SwTimerStart+0x194>)
    eeec:	4798      	blx	r3
    eeee:	e036      	b.n	ef5e <SwTimerStart+0x152>
                    swTimers[timerId].nextTimer = currIndex;
    eef0:	4b21      	ldr	r3, [pc, #132]	; (ef78 <SwTimerStart+0x16c>)
    eef2:	013c      	lsls	r4, r7, #4
    eef4:	191c      	adds	r4, r3, r4
    eef6:	7322      	strb	r2, [r4, #12]
                    swTimers[currIndex].loaded = false;
    eef8:	9901      	ldr	r1, [sp, #4]
    eefa:	0109      	lsls	r1, r1, #4
    eefc:	1859      	adds	r1, r3, r1
    eefe:	2300      	movs	r3, #0
    ef00:	734b      	strb	r3, [r1, #13]
                    if (runningTimerQueueHead == currIndex)
    ef02:	4592      	cmp	sl, r2
    ef04:	d005      	beq.n	ef12 <SwTimerStart+0x106>
                        swTimers[prevIndex].nextTimer = timerId;
    ef06:	9b00      	ldr	r3, [sp, #0]
    ef08:	0118      	lsls	r0, r3, #4
    ef0a:	4b1b      	ldr	r3, [pc, #108]	; (ef78 <SwTimerStart+0x16c>)
    ef0c:	1818      	adds	r0, r3, r0
    ef0e:	7307      	strb	r7, [r0, #12]
    ef10:	e025      	b.n	ef5e <SwTimerStart+0x152>
                        runningTimerQueueHead = timerId;
    ef12:	4b21      	ldr	r3, [pc, #132]	; (ef98 <SwTimerStart+0x18c>)
    ef14:	601f      	str	r7, [r3, #0]
                        loadHwTimer(runningTimerQueueHead);
    ef16:	0038      	movs	r0, r7
    ef18:	4b21      	ldr	r3, [pc, #132]	; (efa0 <SwTimerStart+0x194>)
    ef1a:	4798      	blx	r3
    ef1c:	e01f      	b.n	ef5e <SwTimerStart+0x152>
        for (index = 0; index < runningTimers; index++)
    ef1e:	3301      	adds	r3, #1
    ef20:	b2db      	uxtb	r3, r3
    ef22:	7821      	ldrb	r1, [r4, #0]
    ef24:	b2c9      	uxtb	r1, r1
    ef26:	428b      	cmp	r3, r1
    ef28:	d210      	bcs.n	ef4c <SwTimerStart+0x140>
            if (SWTIMER_INVALID != currIndex)
    ef2a:	2aff      	cmp	r2, #255	; 0xff
    ef2c:	d0f7      	beq.n	ef1e <SwTimerStart+0x112>
                if (swtimerCompareTime(swTimers[currIndex].absoluteExpiryTime,
    ef2e:	9201      	str	r2, [sp, #4]
    ef30:	0111      	lsls	r1, r2, #4
    return ((t2 - t1) < INT32_MAX);
    ef32:	4646      	mov	r6, r8
    ef34:	5989      	ldr	r1, [r1, r6]
    ef36:	1a69      	subs	r1, r5, r1
                if (swtimerCompareTime(swTimers[currIndex].absoluteExpiryTime,
    ef38:	4281      	cmp	r1, r0
    ef3a:	d8d9      	bhi.n	eef0 <SwTimerStart+0xe4>
                    currIndex = swTimers[currIndex].nextTimer;
    ef3c:	0111      	lsls	r1, r2, #4
    ef3e:	4461      	add	r1, ip
    ef40:	9200      	str	r2, [sp, #0]
    ef42:	7b0a      	ldrb	r2, [r1, #12]
    ef44:	e7eb      	b.n	ef1e <SwTimerStart+0x112>
        return LORAWAN_INVALID_PARAMETER;
    ef46:	200a      	movs	r0, #10
    ef48:	e777      	b.n	ee3a <SwTimerStart+0x2e>
        uint8_t prevIndex = runningTimerQueueHead;
    ef4a:	9200      	str	r2, [sp, #0]
            swTimers[prevIndex].nextTimer = timerId;
    ef4c:	4b0a      	ldr	r3, [pc, #40]	; (ef78 <SwTimerStart+0x16c>)
    ef4e:	9a00      	ldr	r2, [sp, #0]
    ef50:	0110      	lsls	r0, r2, #4
    ef52:	1818      	adds	r0, r3, r0
    ef54:	7307      	strb	r7, [r0, #12]
            swTimers[timerId].nextTimer = SWTIMER_INVALID;
    ef56:	013f      	lsls	r7, r7, #4
    ef58:	19df      	adds	r7, r3, r7
    ef5a:	23ff      	movs	r3, #255	; 0xff
    ef5c:	733b      	strb	r3, [r7, #12]
	if (cpu_irq_is_enabled_flags(flags))
    ef5e:	23ff      	movs	r3, #255	; 0xff
    return LORAWAN_SUCCESS;
    ef60:	2008      	movs	r0, #8
    ef62:	464a      	mov	r2, r9
    ef64:	4213      	tst	r3, r2
    ef66:	d100      	bne.n	ef6a <SwTimerStart+0x15e>
    ef68:	e767      	b.n	ee3a <SwTimerStart+0x2e>
		cpu_irq_enable();
    ef6a:	2201      	movs	r2, #1
    ef6c:	4b07      	ldr	r3, [pc, #28]	; (ef8c <SwTimerStart+0x180>)
    ef6e:	701a      	strb	r2, [r3, #0]
    ef70:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    ef74:	b662      	cpsie	i
    ef76:	e760      	b.n	ee3a <SwTimerStart+0x2e>
    ef78:	200027e8 	.word	0x200027e8
    ef7c:	2000297c 	.word	0x2000297c
    ef80:	20002978 	.word	0x20002978
    ef84:	0000fbd5 	.word	0x0000fbd5
    ef88:	7fffff00 	.word	0x7fffff00
    ef8c:	20000014 	.word	0x20000014
    ef90:	0000ec89 	.word	0x0000ec89
    ef94:	200010ec 	.word	0x200010ec
    ef98:	200010e8 	.word	0x200010e8
    ef9c:	7ffffffe 	.word	0x7ffffffe
    efa0:	0000ebf1 	.word	0x0000ebf1

0000efa4 <SwTimerIsRunning>:
\param[in] timerId Timer ID to be checked for running
\return True if the timer is running else False
******************************************************************************/
bool SwTimerIsRunning(uint8_t timerId)
{
    if (NULL == swTimers[timerId].timerCb)
    efa4:	0103      	lsls	r3, r0, #4
    efa6:	4803      	ldr	r0, [pc, #12]	; (efb4 <SwTimerIsRunning+0x10>)
    efa8:	18c0      	adds	r0, r0, r3
    efaa:	6840      	ldr	r0, [r0, #4]
    efac:	1e43      	subs	r3, r0, #1
    efae:	4198      	sbcs	r0, r3
    efb0:	b2c0      	uxtb	r0, r0
    {
        return false;
    }

    return true;
}
    efb2:	4770      	bx	lr
    efb4:	200027e8 	.word	0x200027e8

0000efb8 <SwTimerReadValue>:
\brief Returns the remaining timeout for the given timerId
\param[in] timerId Timer ID to get the remaining time
\return Remaining time until expiry in microseconds
******************************************************************************/
uint32_t SwTimerReadValue(uint8_t timerId)
{
    efb8:	b570      	push	{r4, r5, r6, lr}
    uint32_t remainingTime = 0u;
    uint32_t timerExpiryTime = 0u;
    uint32_t currentSysTime = 0u;
    if ( NULL != swTimers[timerId].timerCb )
    efba:	0102      	lsls	r2, r0, #4
    efbc:	4b0d      	ldr	r3, [pc, #52]	; (eff4 <SwTimerReadValue+0x3c>)
    efbe:	189b      	adds	r3, r3, r2
    efc0:	685b      	ldr	r3, [r3, #4]
    efc2:	2b00      	cmp	r3, #0
    efc4:	d014      	beq.n	eff0 <SwTimerReadValue+0x38>
    {
	    timerExpiryTime = swTimers[timerId].absoluteExpiryTime;
    efc6:	4b0b      	ldr	r3, [pc, #44]	; (eff4 <SwTimerReadValue+0x3c>)
    efc8:	58d5      	ldr	r5, [r2, r3]
    time |= ((uint64_t) sysTimeOvf) << 32;
    efca:	4b0b      	ldr	r3, [pc, #44]	; (eff8 <SwTimerReadValue+0x40>)
    efcc:	681b      	ldr	r3, [r3, #0]
    time |= ((uint64_t) sysTime) << 16;
    efce:	4b0b      	ldr	r3, [pc, #44]	; (effc <SwTimerReadValue+0x44>)
    efd0:	881c      	ldrh	r4, [r3, #0]
    efd2:	0424      	lsls	r4, r4, #16
    time |= (uint64_t) common_tc_read_count();
    efd4:	4b0a      	ldr	r3, [pc, #40]	; (f000 <SwTimerReadValue+0x48>)
    efd6:	4798      	blx	r3
    efd8:	4320      	orrs	r0, r4
	    currentSysTime = (uint32_t) gettime();
	    if ( currentSysTime <= timerExpiryTime )
    efda:	4285      	cmp	r5, r0
    efdc:	d305      	bcc.n	efea <SwTimerReadValue+0x32>
	    {
		    remainingTime = timerExpiryTime - currentSysTime;
    efde:	1a28      	subs	r0, r5, r0
	    else if ( currentSysTime > timerExpiryTime )
	    {
		    remainingTime = (UINT32_MAX - currentSysTime) + timerExpiryTime;
	    }

        if (remainingTime >= SWTIMER_MAX_TIMEOUT)
    efe0:	4b08      	ldr	r3, [pc, #32]	; (f004 <SwTimerReadValue+0x4c>)
    efe2:	4298      	cmp	r0, r3
    efe4:	d900      	bls.n	efe8 <SwTimerReadValue+0x30>
        {
            /* Diff cannot be more than max timeout */
            remainingTime = 0;
    efe6:	2000      	movs	r0, #0
        }
    }
    return remainingTime;
}
    efe8:	bd70      	pop	{r4, r5, r6, pc}
		    remainingTime = (UINT32_MAX - currentSysTime) + timerExpiryTime;
    efea:	3d01      	subs	r5, #1
    efec:	1a28      	subs	r0, r5, r0
    efee:	e7f7      	b.n	efe0 <SwTimerReadValue+0x28>
    uint32_t remainingTime = 0u;
    eff0:	2000      	movs	r0, #0
    return remainingTime;
    eff2:	e7f9      	b.n	efe8 <SwTimerReadValue+0x30>
    eff4:	200027e8 	.word	0x200027e8
    eff8:	2000297c 	.word	0x2000297c
    effc:	20002978 	.word	0x20002978
    f000:	0000fbd5 	.word	0x0000fbd5
    f004:	7ffffffe 	.word	0x7ffffffe

0000f008 <SwTimerNextExpiryDuration>:
/**************************************************************************//**
\brief Returns the duration until the next timer expiry
\return Returns the duration until the next timeout in microseconds
******************************************************************************/
uint32_t SwTimerNextExpiryDuration(void)
{
    f008:	b510      	push	{r4, lr}
    uint32_t duration = SWTIMER_INVALID_TIMEOUT;

    if (SWTIMER_INVALID != runningTimerQueueHead)
    f00a:	4b05      	ldr	r3, [pc, #20]	; (f020 <SwTimerNextExpiryDuration+0x18>)
    f00c:	6818      	ldr	r0, [r3, #0]
    f00e:	28ff      	cmp	r0, #255	; 0xff
    f010:	d102      	bne.n	f018 <SwTimerNextExpiryDuration+0x10>
    uint32_t duration = SWTIMER_INVALID_TIMEOUT;
    f012:	2001      	movs	r0, #1
    f014:	4240      	negs	r0, r0
    {
        duration = SwTimerReadValue(runningTimerQueueHead);
    }

    return duration;
}
    f016:	bd10      	pop	{r4, pc}
        duration = SwTimerReadValue(runningTimerQueueHead);
    f018:	b2c0      	uxtb	r0, r0
    f01a:	4b02      	ldr	r3, [pc, #8]	; (f024 <SwTimerNextExpiryDuration+0x1c>)
    f01c:	4798      	blx	r3
    f01e:	e7fa      	b.n	f016 <SwTimerNextExpiryDuration+0xe>
    f020:	200010e8 	.word	0x200010e8
    f024:	0000efb9 	.word	0x0000efb9

0000f028 <SwTimersExecute>:

/**************************************************************************//**
\brief Handles Queues and Callbacks for Expired Timers
******************************************************************************/
void SwTimersExecute(void)
{
    f028:	b5f0      	push	{r4, r5, r6, r7, lr}
    f02a:	46de      	mov	lr, fp
    f02c:	4657      	mov	r7, sl
    f02e:	464e      	mov	r6, r9
    f030:	4645      	mov	r5, r8
    f032:	b5e0      	push	{r5, r6, r7, lr}
    f034:	b083      	sub	sp, #12
    time |= ((uint64_t) sysTimeOvf) << 32;
    f036:	4b2f      	ldr	r3, [pc, #188]	; (f0f4 <SwTimersExecute+0xcc>)
    f038:	681b      	ldr	r3, [r3, #0]
    time |= ((uint64_t) sysTime) << 16;
    f03a:	4b2f      	ldr	r3, [pc, #188]	; (f0f8 <SwTimersExecute+0xd0>)
    f03c:	881b      	ldrh	r3, [r3, #0]
    time |= (uint64_t) common_tc_read_count();
    f03e:	4b2f      	ldr	r3, [pc, #188]	; (f0fc <SwTimersExecute+0xd4>)
    f040:	4798      	blx	r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    f042:	f3ef 8210 	mrs	r2, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    f046:	4253      	negs	r3, r2
    f048:	4153      	adcs	r3, r2
    f04a:	9300      	str	r3, [sp, #0]
  __ASM volatile ("cpsid i" : : : "memory");
    f04c:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
    f04e:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    f052:	2200      	movs	r2, #0
    f054:	4b2a      	ldr	r3, [pc, #168]	; (f100 <SwTimersExecute+0xd8>)
    f056:	701a      	strb	r2, [r3, #0]
	return flags;
    f058:	9c00      	ldr	r4, [sp, #0]
    uint64_t now = gettime();

    uint8_t flags = cpu_irq_save();
    swtimerInternalHandler();
    f05a:	4b2a      	ldr	r3, [pc, #168]	; (f104 <SwTimersExecute+0xdc>)
    f05c:	4798      	blx	r3
	if (cpu_irq_is_enabled_flags(flags))
    f05e:	23ff      	movs	r3, #255	; 0xff
    f060:	4223      	tst	r3, r4
    f062:	d005      	beq.n	f070 <SwTimersExecute+0x48>
		cpu_irq_enable();
    f064:	2201      	movs	r2, #1
    f066:	4b26      	ldr	r3, [pc, #152]	; (f100 <SwTimersExecute+0xd8>)
    f068:	701a      	strb	r2, [r3, #0]
    f06a:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    f06e:	b662      	cpsie	i
	cpu_irq_disable();
    f070:	4b23      	ldr	r3, [pc, #140]	; (f100 <SwTimersExecute+0xd8>)
    f072:	469a      	mov	sl, r3
        /* Expired timer if any will be processed here */
        while (SWTIMER_INVALID != expiredTimerQueueHead)
        {
            flags = cpu_irq_save();

            nextExpiredTimer = swTimers[expiredTimerQueueHead].nextTimer;
    f074:	4c24      	ldr	r4, [pc, #144]	; (f108 <SwTimersExecute+0xe0>)
    f076:	4b25      	ldr	r3, [pc, #148]	; (f10c <SwTimersExecute+0xe4>)
    f078:	4699      	mov	r9, r3
    f07a:	2200      	movs	r2, #0

            /*
            * The expired timer's structure elements are updated
            * and the timer is taken out of expired timer queue
            */
            swTimers[expiredTimerQueueHead].nextTimer = SWTIMER_INVALID;
    f07c:	20ff      	movs	r0, #255	; 0xff
            */
            expiredTimerQueueHead = nextExpiredTimer;

            if (SWTIMER_INVALID == expiredTimerQueueHead)
            {
                expiredTimerQueueTail = SWTIMER_INVALID;
    f07e:	4b24      	ldr	r3, [pc, #144]	; (f110 <SwTimersExecute+0xe8>)
    f080:	4698      	mov	r8, r3
		cpu_irq_enable();
    f082:	4b1f      	ldr	r3, [pc, #124]	; (f100 <SwTimersExecute+0xd8>)
    f084:	469c      	mov	ip, r3
    f086:	e004      	b.n	f092 <SwTimersExecute+0x6a>
    f088:	4643      	mov	r3, r8
    f08a:	6018      	str	r0, [r3, #0]
    f08c:	e01e      	b.n	f0cc <SwTimersExecute+0xa4>
            }

            cpu_irq_restore(flags);

            if (NULL != callback)
    f08e:	2e00      	cmp	r6, #0
    f090:	d125      	bne.n	f0de <SwTimersExecute+0xb6>
        while (SWTIMER_INVALID != expiredTimerQueueHead)
    f092:	4b1d      	ldr	r3, [pc, #116]	; (f108 <SwTimersExecute+0xe0>)
    f094:	681b      	ldr	r3, [r3, #0]
    f096:	2bff      	cmp	r3, #255	; 0xff
    f098:	d024      	beq.n	f0e4 <SwTimersExecute+0xbc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    f09a:	f3ef 8110 	mrs	r1, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    f09e:	424b      	negs	r3, r1
    f0a0:	414b      	adcs	r3, r1
    f0a2:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    f0a4:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
    f0a6:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    f0aa:	4653      	mov	r3, sl
    f0ac:	701a      	strb	r2, [r3, #0]
	return flags;
    f0ae:	9f01      	ldr	r7, [sp, #4]
            nextExpiredTimer = swTimers[expiredTimerQueueHead].nextTimer;
    f0b0:	6823      	ldr	r3, [r4, #0]
    f0b2:	011b      	lsls	r3, r3, #4
    f0b4:	444b      	add	r3, r9
    f0b6:	7b19      	ldrb	r1, [r3, #12]
            callback = (SwTimerCallbackFunc_t)swTimers[expiredTimerQueueHead].timerCb;
    f0b8:	685e      	ldr	r6, [r3, #4]
            cbParam = swTimers[expiredTimerQueueHead].paramCb;
    f0ba:	689d      	ldr	r5, [r3, #8]
    f0bc:	46ab      	mov	fp, r5
            swTimers[expiredTimerQueueHead].nextTimer = SWTIMER_INVALID;
    f0be:	7318      	strb	r0, [r3, #12]
            swTimers[expiredTimerQueueHead].timerCb = NULL;
    f0c0:	605a      	str	r2, [r3, #4]
            swTimers[expiredTimerQueueHead].paramCb = NULL;
    f0c2:	609a      	str	r2, [r3, #8]
            swTimers[expiredTimerQueueHead].loaded = false;
    f0c4:	735a      	strb	r2, [r3, #13]
            expiredTimerQueueHead = nextExpiredTimer;
    f0c6:	6021      	str	r1, [r4, #0]
            if (SWTIMER_INVALID == expiredTimerQueueHead)
    f0c8:	29ff      	cmp	r1, #255	; 0xff
    f0ca:	d0dd      	beq.n	f088 <SwTimersExecute+0x60>
	if (cpu_irq_is_enabled_flags(flags))
    f0cc:	4238      	tst	r0, r7
    f0ce:	d0de      	beq.n	f08e <SwTimersExecute+0x66>
		cpu_irq_enable();
    f0d0:	2301      	movs	r3, #1
    f0d2:	4661      	mov	r1, ip
    f0d4:	700b      	strb	r3, [r1, #0]
    f0d6:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    f0da:	b662      	cpsie	i
    f0dc:	e7d7      	b.n	f08e <SwTimersExecute+0x66>
            {
                /* Callback function is called */
                callback(cbParam);
    f0de:	4658      	mov	r0, fp
    f0e0:	47b0      	blx	r6
    f0e2:	e7ca      	b.n	f07a <SwTimersExecute+0x52>
                (void)now;
            }
        }
    }
}
    f0e4:	b003      	add	sp, #12
    f0e6:	bc3c      	pop	{r2, r3, r4, r5}
    f0e8:	4690      	mov	r8, r2
    f0ea:	4699      	mov	r9, r3
    f0ec:	46a2      	mov	sl, r4
    f0ee:	46ab      	mov	fp, r5
    f0f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f0f2:	46c0      	nop			; (mov r8, r8)
    f0f4:	2000297c 	.word	0x2000297c
    f0f8:	20002978 	.word	0x20002978
    f0fc:	0000fbd5 	.word	0x0000fbd5
    f100:	20000014 	.word	0x20000014
    f104:	0000ec89 	.word	0x0000ec89
    f108:	200010e0 	.word	0x200010e0
    f10c:	200027e8 	.word	0x200027e8
    f110:	200010e4 	.word	0x200010e4

0000f114 <TIMER_TaskHandler>:
{
    f114:	b510      	push	{r4, lr}
    SwTimersExecute();
    f116:	4b02      	ldr	r3, [pc, #8]	; (f120 <TIMER_TaskHandler+0xc>)
    f118:	4798      	blx	r3
}
    f11a:	2000      	movs	r0, #0
    f11c:	bd10      	pop	{r4, pc}
    f11e:	46c0      	nop			; (mov r8, r8)
    f120:	0000f029 	.word	0x0000f029

0000f124 <SwTimerStop>:
        LORAWAN_INVALID_PARAMETER if timerId is not valid
        LORAWAN_INVALID_REQUEST if timerId was not started before
        LORAWAN_SUCCESS if it is successfully stopped
******************************************************************************/
StackRetStatus_t SwTimerStop(uint8_t timerId)
{
    f124:	b570      	push	{r4, r5, r6, lr}
    f126:	b082      	sub	sp, #8
    f128:	0004      	movs	r4, r0
    uint8_t prevIndex;

    if (TOTAL_NUMBER_OF_SW_TIMERS <= timerId)
    {
        SYS_ASSERT_INFO(ASSERT_HAL_TIMER_STOP_FAILURE);
        return LORAWAN_INVALID_PARAMETER;
    f12a:	200a      	movs	r0, #10
    if (TOTAL_NUMBER_OF_SW_TIMERS <= timerId)
    f12c:	2c18      	cmp	r4, #24
    f12e:	d901      	bls.n	f134 <SwTimerStop+0x10>
        return LORAWAN_SUCCESS;
    }

    SYS_ASSERT_INFO(ASSERT_HAL_TIMER_STOP_FAILURE);
    return LORAWAN_INVALID_REQUEST;
}
    f130:	b002      	add	sp, #8
    f132:	bd70      	pop	{r4, r5, r6, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    f134:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    f138:	425a      	negs	r2, r3
    f13a:	4153      	adcs	r3, r2
    f13c:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    f13e:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
    f140:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    f144:	2200      	movs	r2, #0
    f146:	4b47      	ldr	r3, [pc, #284]	; (f264 <SwTimerStop+0x140>)
    f148:	701a      	strb	r2, [r3, #0]
	return flags;
    f14a:	9d01      	ldr	r5, [sp, #4]
    swtimerInternalHandler();
    f14c:	4b46      	ldr	r3, [pc, #280]	; (f268 <SwTimerStop+0x144>)
    f14e:	4798      	blx	r3
    if (runningTimers > 0)
    f150:	4b46      	ldr	r3, [pc, #280]	; (f26c <SwTimerStop+0x148>)
    f152:	781b      	ldrb	r3, [r3, #0]
    f154:	2b00      	cmp	r3, #0
    f156:	d040      	beq.n	f1da <SwTimerStop+0xb6>
        uint8_t timer_count = runningTimers;
    f158:	4b44      	ldr	r3, [pc, #272]	; (f26c <SwTimerStop+0x148>)
    f15a:	781b      	ldrb	r3, [r3, #0]
    f15c:	b2db      	uxtb	r3, r3
        prevIndex = currIndex = runningTimerQueueHead;
    f15e:	4a44      	ldr	r2, [pc, #272]	; (f270 <SwTimerStop+0x14c>)
    f160:	6816      	ldr	r6, [r2, #0]
    f162:	b2f1      	uxtb	r1, r6
        while (timer_count > 0)
    f164:	2b00      	cmp	r3, #0
    f166:	d038      	beq.n	f1da <SwTimerStop+0xb6>
            if (timerId == currIndex)
    f168:	428c      	cmp	r4, r1
    f16a:	d00b      	beq.n	f184 <SwTimerStop+0x60>
                currIndex = swTimers[currIndex].nextTimer;
    f16c:	4841      	ldr	r0, [pc, #260]	; (f274 <SwTimerStop+0x150>)
    f16e:	010a      	lsls	r2, r1, #4
    f170:	1882      	adds	r2, r0, r2
    f172:	7b12      	ldrb	r2, [r2, #12]
            timer_count--;
    f174:	3b01      	subs	r3, #1
    f176:	b2db      	uxtb	r3, r3
        while (timer_count > 0)
    f178:	2b00      	cmp	r3, #0
    f17a:	d02e      	beq.n	f1da <SwTimerStop+0xb6>
            if (timerId == currIndex)
    f17c:	4294      	cmp	r4, r2
    f17e:	d001      	beq.n	f184 <SwTimerStop+0x60>
                currIndex = swTimers[currIndex].nextTimer;
    f180:	0011      	movs	r1, r2
    f182:	e7f4      	b.n	f16e <SwTimerStop+0x4a>
                if (timerId == runningTimerQueueHead)
    f184:	42a6      	cmp	r6, r4
    f186:	d01d      	beq.n	f1c4 <SwTimerStop+0xa0>
                    swTimers[prevIndex].nextTimer = swTimers[timerId].nextTimer;
    f188:	4b3a      	ldr	r3, [pc, #232]	; (f274 <SwTimerStop+0x150>)
    f18a:	0122      	lsls	r2, r4, #4
    f18c:	189a      	adds	r2, r3, r2
    f18e:	7b12      	ldrb	r2, [r2, #12]
    f190:	0109      	lsls	r1, r1, #4
    f192:	1859      	adds	r1, r3, r1
    f194:	730a      	strb	r2, [r1, #12]
                swTimers[timerId].nextTimer  = SWTIMER_INVALID;
    f196:	0122      	lsls	r2, r4, #4
    f198:	4b36      	ldr	r3, [pc, #216]	; (f274 <SwTimerStop+0x150>)
    f19a:	189b      	adds	r3, r3, r2
    f19c:	22ff      	movs	r2, #255	; 0xff
    f19e:	731a      	strb	r2, [r3, #12]
            runningTimers--;
    f1a0:	4a32      	ldr	r2, [pc, #200]	; (f26c <SwTimerStop+0x148>)
    f1a2:	7813      	ldrb	r3, [r2, #0]
    f1a4:	3b01      	subs	r3, #1
    f1a6:	b2db      	uxtb	r3, r3
    f1a8:	7013      	strb	r3, [r2, #0]
        swTimers[timerId].timerCb = NULL;
    f1aa:	0124      	lsls	r4, r4, #4
    f1ac:	4b31      	ldr	r3, [pc, #196]	; (f274 <SwTimerStop+0x150>)
    f1ae:	191c      	adds	r4, r3, r4
    f1b0:	2300      	movs	r3, #0
    f1b2:	6063      	str	r3, [r4, #4]
        swTimers[timerId].paramCb = NULL;
    f1b4:	60a3      	str	r3, [r4, #8]
        swTimers[timerId].loaded = false;
    f1b6:	7363      	strb	r3, [r4, #13]
	if (cpu_irq_is_enabled_flags(flags))
    f1b8:	33ff      	adds	r3, #255	; 0xff
        return LORAWAN_SUCCESS;
    f1ba:	2008      	movs	r0, #8
    f1bc:	422b      	tst	r3, r5
    f1be:	d0b7      	beq.n	f130 <SwTimerStop+0xc>
    f1c0:	2301      	movs	r3, #1
    f1c2:	e040      	b.n	f246 <SwTimerStop+0x122>
                    common_tc_compare_stop();
    f1c4:	4b2c      	ldr	r3, [pc, #176]	; (f278 <SwTimerStop+0x154>)
    f1c6:	4798      	blx	r3
                    runningTimerQueueHead = swTimers[timerId].nextTimer;
    f1c8:	0122      	lsls	r2, r4, #4
    f1ca:	4b2a      	ldr	r3, [pc, #168]	; (f274 <SwTimerStop+0x150>)
    f1cc:	189b      	adds	r3, r3, r2
    f1ce:	7b18      	ldrb	r0, [r3, #12]
    f1d0:	4b27      	ldr	r3, [pc, #156]	; (f270 <SwTimerStop+0x14c>)
    f1d2:	6018      	str	r0, [r3, #0]
                    loadHwTimer(runningTimerQueueHead);
    f1d4:	4b29      	ldr	r3, [pc, #164]	; (f27c <SwTimerStop+0x158>)
    f1d6:	4798      	blx	r3
    f1d8:	e7dd      	b.n	f196 <SwTimerStop+0x72>
        prevIndex = currIndex = expiredTimerQueueHead;
    f1da:	4b29      	ldr	r3, [pc, #164]	; (f280 <SwTimerStop+0x15c>)
    f1dc:	6818      	ldr	r0, [r3, #0]
    f1de:	b2c2      	uxtb	r2, r0
        while (SWTIMER_INVALID != currIndex)
    f1e0:	2aff      	cmp	r2, #255	; 0xff
    f1e2:	d02c      	beq.n	f23e <SwTimerStop+0x11a>
            if (timerId == currIndex)
    f1e4:	4294      	cmp	r4, r2
    f1e6:	d009      	beq.n	f1fc <SwTimerStop+0xd8>
                currIndex = swTimers[currIndex].nextTimer;
    f1e8:	4922      	ldr	r1, [pc, #136]	; (f274 <SwTimerStop+0x150>)
    f1ea:	0113      	lsls	r3, r2, #4
    f1ec:	18cb      	adds	r3, r1, r3
    f1ee:	7b1b      	ldrb	r3, [r3, #12]
        while (SWTIMER_INVALID != currIndex)
    f1f0:	2bff      	cmp	r3, #255	; 0xff
    f1f2:	d024      	beq.n	f23e <SwTimerStop+0x11a>
            if (timerId == currIndex)
    f1f4:	429c      	cmp	r4, r3
    f1f6:	d001      	beq.n	f1fc <SwTimerStop+0xd8>
                currIndex = swTimers[currIndex].nextTimer;
    f1f8:	001a      	movs	r2, r3
    f1fa:	e7f6      	b.n	f1ea <SwTimerStop+0xc6>
                if (timerId == expiredTimerQueueHead)
    f1fc:	42a0      	cmp	r0, r4
    f1fe:	d00d      	beq.n	f21c <SwTimerStop+0xf8>
                    swTimers[prevIndex].nextTimer = swTimers[timerId].nextTimer;
    f200:	4b1c      	ldr	r3, [pc, #112]	; (f274 <SwTimerStop+0x150>)
    f202:	0121      	lsls	r1, r4, #4
    f204:	1859      	adds	r1, r3, r1
    f206:	7b09      	ldrb	r1, [r1, #12]
    f208:	0110      	lsls	r0, r2, #4
    f20a:	181b      	adds	r3, r3, r0
    f20c:	7319      	strb	r1, [r3, #12]
                    if (timerId == expiredTimerQueueTail)
    f20e:	4b1d      	ldr	r3, [pc, #116]	; (f284 <SwTimerStop+0x160>)
    f210:	681b      	ldr	r3, [r3, #0]
    f212:	429c      	cmp	r4, r3
    f214:	d1c9      	bne.n	f1aa <SwTimerStop+0x86>
                        expiredTimerQueueTail = prevIndex;
    f216:	4b1b      	ldr	r3, [pc, #108]	; (f284 <SwTimerStop+0x160>)
    f218:	601a      	str	r2, [r3, #0]
    f21a:	e7c6      	b.n	f1aa <SwTimerStop+0x86>
                    if (expiredTimerQueueHead == expiredTimerQueueTail)
    f21c:	4b19      	ldr	r3, [pc, #100]	; (f284 <SwTimerStop+0x160>)
    f21e:	681b      	ldr	r3, [r3, #0]
    f220:	4298      	cmp	r0, r3
    f222:	d006      	beq.n	f232 <SwTimerStop+0x10e>
                        expiredTimerQueueHead = swTimers[expiredTimerQueueHead].nextTimer;
    f224:	0100      	lsls	r0, r0, #4
    f226:	4b13      	ldr	r3, [pc, #76]	; (f274 <SwTimerStop+0x150>)
    f228:	1818      	adds	r0, r3, r0
    f22a:	7b02      	ldrb	r2, [r0, #12]
    f22c:	4b14      	ldr	r3, [pc, #80]	; (f280 <SwTimerStop+0x15c>)
    f22e:	601a      	str	r2, [r3, #0]
    f230:	e7bb      	b.n	f1aa <SwTimerStop+0x86>
                        expiredTimerQueueHead = expiredTimerQueueTail = SWTIMER_INVALID;
    f232:	23ff      	movs	r3, #255	; 0xff
    f234:	4a13      	ldr	r2, [pc, #76]	; (f284 <SwTimerStop+0x160>)
    f236:	6013      	str	r3, [r2, #0]
    f238:	4a11      	ldr	r2, [pc, #68]	; (f280 <SwTimerStop+0x15c>)
    f23a:	6013      	str	r3, [r2, #0]
    f23c:	e7b5      	b.n	f1aa <SwTimerStop+0x86>
    f23e:	23ff      	movs	r3, #255	; 0xff
    f240:	422b      	tst	r3, r5
    f242:	d00a      	beq.n	f25a <SwTimerStop+0x136>
    f244:	2300      	movs	r3, #0
		cpu_irq_enable();
    f246:	2101      	movs	r1, #1
    f248:	4a06      	ldr	r2, [pc, #24]	; (f264 <SwTimerStop+0x140>)
    f24a:	7011      	strb	r1, [r2, #0]
    f24c:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    f250:	b662      	cpsie	i
    if (timerStopReqStatus)
    f252:	2b00      	cmp	r3, #0
    f254:	d103      	bne.n	f25e <SwTimerStop+0x13a>
    return LORAWAN_INVALID_REQUEST;
    f256:	2015      	movs	r0, #21
    f258:	e76a      	b.n	f130 <SwTimerStop+0xc>
    f25a:	2015      	movs	r0, #21
    f25c:	e768      	b.n	f130 <SwTimerStop+0xc>
        return LORAWAN_SUCCESS;
    f25e:	2008      	movs	r0, #8
    f260:	e766      	b.n	f130 <SwTimerStop+0xc>
    f262:	46c0      	nop			; (mov r8, r8)
    f264:	20000014 	.word	0x20000014
    f268:	0000ec89 	.word	0x0000ec89
    f26c:	200010ec 	.word	0x200010ec
    f270:	200010e8 	.word	0x200010e8
    f274:	200027e8 	.word	0x200027e8
    f278:	0000fc21 	.word	0x0000fc21
    f27c:	0000ebf1 	.word	0x0000ebf1
    f280:	200010e0 	.word	0x200010e0
    f284:	200010e4 	.word	0x200010e4

0000f288 <SwTimerRunRemainingTime>:
{
    f288:	b5f0      	push	{r4, r5, r6, r7, lr}
    f28a:	b083      	sub	sp, #12
    f28c:	0005      	movs	r5, r0
    void * timerCb = (void*)(swTimers[runningTimerQueueHead].timerCb);
    f28e:	4b0b      	ldr	r3, [pc, #44]	; (f2bc <SwTimerRunRemainingTime+0x34>)
    f290:	681c      	ldr	r4, [r3, #0]
    f292:	0122      	lsls	r2, r4, #4
    f294:	4b0a      	ldr	r3, [pc, #40]	; (f2c0 <SwTimerRunRemainingTime+0x38>)
    f296:	189b      	adds	r3, r3, r2
    f298:	685e      	ldr	r6, [r3, #4]
    void *paramCb = swTimers[runningTimerQueueHead].paramCb;
    f29a:	689f      	ldr	r7, [r3, #8]
    uint8_t timerId = runningTimerQueueHead;
    f29c:	b2e4      	uxtb	r4, r4
    if (LORAWAN_SUCCESS == SwTimerStop(runningTimerQueueHead))
    f29e:	0020      	movs	r0, r4
    f2a0:	4b08      	ldr	r3, [pc, #32]	; (f2c4 <SwTimerRunRemainingTime+0x3c>)
    f2a2:	4798      	blx	r3
    f2a4:	2808      	cmp	r0, #8
    f2a6:	d001      	beq.n	f2ac <SwTimerRunRemainingTime+0x24>
}
    f2a8:	b003      	add	sp, #12
    f2aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
        SwTimerStart(timerId, offset, SW_TIMEOUT_RELATIVE, timerCb, paramCb);
    f2ac:	9700      	str	r7, [sp, #0]
    f2ae:	0033      	movs	r3, r6
    f2b0:	2200      	movs	r2, #0
    f2b2:	0029      	movs	r1, r5
    f2b4:	0020      	movs	r0, r4
    f2b6:	4c04      	ldr	r4, [pc, #16]	; (f2c8 <SwTimerRunRemainingTime+0x40>)
    f2b8:	47a0      	blx	r4
}
    f2ba:	e7f5      	b.n	f2a8 <SwTimerRunRemainingTime+0x20>
    f2bc:	200010e8 	.word	0x200010e8
    f2c0:	200027e8 	.word	0x200027e8
    f2c4:	0000f125 	.word	0x0000f125
    f2c8:	0000ee0d 	.word	0x0000ee0d

0000f2cc <SystemTimerSuspend>:

/**************************************************************************//**
\brief Suspends the software timer
******************************************************************************/
void SystemTimerSuspend(void)
{
    f2cc:	b570      	push	{r4, r5, r6, lr}
    time |= ((uint64_t) sysTimeOvf) << 32;
    f2ce:	4b07      	ldr	r3, [pc, #28]	; (f2ec <SystemTimerSuspend+0x20>)
    f2d0:	681c      	ldr	r4, [r3, #0]
    time |= ((uint64_t) sysTime) << 16;
    f2d2:	4b07      	ldr	r3, [pc, #28]	; (f2f0 <SystemTimerSuspend+0x24>)
    f2d4:	881d      	ldrh	r5, [r3, #0]
    f2d6:	042d      	lsls	r5, r5, #16
    time |= (uint64_t) common_tc_read_count();
    f2d8:	4b06      	ldr	r3, [pc, #24]	; (f2f4 <SystemTimerSuspend+0x28>)
    f2da:	4798      	blx	r3
    sysTimeLastKnown = gettime();
    f2dc:	4b06      	ldr	r3, [pc, #24]	; (f2f8 <SystemTimerSuspend+0x2c>)
    time |= (uint64_t) common_tc_read_count();
    f2de:	4328      	orrs	r0, r5
    f2e0:	6018      	str	r0, [r3, #0]
    f2e2:	605c      	str	r4, [r3, #4]
    common_tc_stop();
    f2e4:	4b05      	ldr	r3, [pc, #20]	; (f2fc <SystemTimerSuspend+0x30>)
    f2e6:	4798      	blx	r3
}
    f2e8:	bd70      	pop	{r4, r5, r6, pc}
    f2ea:	46c0      	nop			; (mov r8, r8)
    f2ec:	2000297c 	.word	0x2000297c
    f2f0:	20002978 	.word	0x20002978
    f2f4:	0000fbd5 	.word	0x0000fbd5
    f2f8:	200010f0 	.word	0x200010f0
    f2fc:	0000fc61 	.word	0x0000fc61

0000f300 <SystemTimerSync>:
/**************************************************************************//**
\brief Resumes the software timer by offseting it with given time
\param[in] timeToSync Amount of duration to offset from known system time
******************************************************************************/
void SystemTimerSync(uint64_t timeToSync)
{
    f300:	b570      	push	{r4, r5, r6, lr}
    uint8_t timerId;
    uint16_t adjustOffset;

    sysTimeLastKnown += timeToSync;
    f302:	4b22      	ldr	r3, [pc, #136]	; (f38c <SystemTimerSync+0x8c>)
    f304:	681c      	ldr	r4, [r3, #0]
    f306:	685d      	ldr	r5, [r3, #4]
    f308:	1900      	adds	r0, r0, r4
    f30a:	4169      	adcs	r1, r5
    f30c:	6018      	str	r0, [r3, #0]
    f30e:	6059      	str	r1, [r3, #4]

    /* 1. Update system time */
    sysTimeOvf = (uint32_t) (sysTimeLastKnown >> 32);
    f310:	4b1f      	ldr	r3, [pc, #124]	; (f390 <SystemTimerSync+0x90>)
    f312:	6019      	str	r1, [r3, #0]
    sysTime = (uint16_t) ((sysTimeLastKnown >> SWTIMER_SYSTIME_SHIFTMASK) & 0xffff);
    f314:	0c02      	lsrs	r2, r0, #16
    f316:	4b1f      	ldr	r3, [pc, #124]	; (f394 <SystemTimerSync+0x94>)
    f318:	801a      	strh	r2, [r3, #0]

    /* 2. Adjust expiration of running timers */
    adjustOffset = (uint16_t) sysTimeLastKnown;
    f31a:	b280      	uxth	r0, r0
    timerId = runningTimerQueueHead;
    f31c:	4b1e      	ldr	r3, [pc, #120]	; (f398 <SystemTimerSync+0x98>)
    f31e:	781b      	ldrb	r3, [r3, #0]
    for (uint8_t index = 0; index < runningTimers; index++)
    f320:	4a1e      	ldr	r2, [pc, #120]	; (f39c <SystemTimerSync+0x9c>)
    f322:	7812      	ldrb	r2, [r2, #0]
    f324:	2a00      	cmp	r2, #0
    f326:	d012      	beq.n	f34e <SystemTimerSync+0x4e>
    f328:	2200      	movs	r2, #0
    {
        if (SWTIMER_INVALID != timerId)
        {
            swTimers[timerId].absoluteExpiryTime -= adjustOffset;
    f32a:	4c1d      	ldr	r4, [pc, #116]	; (f3a0 <SystemTimerSync+0xa0>)
    for (uint8_t index = 0; index < runningTimers; index++)
    f32c:	4d1b      	ldr	r5, [pc, #108]	; (f39c <SystemTimerSync+0x9c>)
    f32e:	e005      	b.n	f33c <SystemTimerSync+0x3c>
    f330:	3201      	adds	r2, #1
    f332:	b2d2      	uxtb	r2, r2
    f334:	7829      	ldrb	r1, [r5, #0]
    f336:	b2c9      	uxtb	r1, r1
    f338:	4291      	cmp	r1, r2
    f33a:	d908      	bls.n	f34e <SystemTimerSync+0x4e>
        if (SWTIMER_INVALID != timerId)
    f33c:	2bff      	cmp	r3, #255	; 0xff
    f33e:	d0f7      	beq.n	f330 <SystemTimerSync+0x30>
            swTimers[timerId].absoluteExpiryTime -= adjustOffset;
    f340:	011b      	lsls	r3, r3, #4
    f342:	5919      	ldr	r1, [r3, r4]
    f344:	1a09      	subs	r1, r1, r0
    f346:	5119      	str	r1, [r3, r4]
            timerId = swTimers[timerId].nextTimer;
    f348:	18e3      	adds	r3, r4, r3
    f34a:	7b1b      	ldrb	r3, [r3, #12]
    f34c:	e7f0      	b.n	f330 <SystemTimerSync+0x30>
        }
    }

    /* 3. Start hardware timer */
    common_tc_init();
    f34e:	4b15      	ldr	r3, [pc, #84]	; (f3a4 <SystemTimerSync+0xa4>)
    f350:	4798      	blx	r3
    set_common_tc_overflow_callback(hwTimerOverflowCallback);
    f352:	4815      	ldr	r0, [pc, #84]	; (f3a8 <SystemTimerSync+0xa8>)
    f354:	4b15      	ldr	r3, [pc, #84]	; (f3ac <SystemTimerSync+0xac>)
    f356:	4798      	blx	r3
    set_common_tc_expiry_callback(hwTimerExpiryCallback);
    f358:	4815      	ldr	r0, [pc, #84]	; (f3b0 <SystemTimerSync+0xb0>)
    f35a:	4b16      	ldr	r3, [pc, #88]	; (f3b4 <SystemTimerSync+0xb4>)
    f35c:	4798      	blx	r3

    /* 4. Resume timer queue operations */
    if (runningTimers && (SWTIMER_INVALID != runningTimerQueueHead))
    f35e:	4b0f      	ldr	r3, [pc, #60]	; (f39c <SystemTimerSync+0x9c>)
    f360:	781b      	ldrb	r3, [r3, #0]
    f362:	2b00      	cmp	r3, #0
    f364:	d009      	beq.n	f37a <SystemTimerSync+0x7a>
    f366:	4b0c      	ldr	r3, [pc, #48]	; (f398 <SystemTimerSync+0x98>)
    f368:	681b      	ldr	r3, [r3, #0]
    f36a:	2bff      	cmp	r3, #255	; 0xff
    f36c:	d005      	beq.n	f37a <SystemTimerSync+0x7a>
    {
        uint32_t remainingTime = SwTimerNextExpiryDuration();
    f36e:	4b12      	ldr	r3, [pc, #72]	; (f3b8 <SystemTimerSync+0xb8>)
    f370:	4798      	blx	r3

        if (SWTIMER_MIN_TIMEOUT > remainingTime)
    f372:	28fe      	cmp	r0, #254	; 0xfe
    f374:	d902      	bls.n	f37c <SystemTimerSync+0x7c>
        else
        {
            /*
            * There is some time left in head timer, so restart it.
            */
            SwTimerRunRemainingTime(remainingTime);
    f376:	4b11      	ldr	r3, [pc, #68]	; (f3bc <SystemTimerSync+0xbc>)
    f378:	4798      	blx	r3
        }
    }
}
    f37a:	bd70      	pop	{r4, r5, r6, pc}
            isTimerTriggered = true;
    f37c:	2201      	movs	r2, #1
    f37e:	4b10      	ldr	r3, [pc, #64]	; (f3c0 <SystemTimerSync+0xc0>)
    f380:	701a      	strb	r2, [r3, #0]
            SYSTEM_PostTask(TIMER_TASK_ID);
    f382:	2001      	movs	r0, #1
    f384:	4b0f      	ldr	r3, [pc, #60]	; (f3c4 <SystemTimerSync+0xc4>)
    f386:	4798      	blx	r3
    f388:	e7f7      	b.n	f37a <SystemTimerSync+0x7a>
    f38a:	46c0      	nop			; (mov r8, r8)
    f38c:	200010f0 	.word	0x200010f0
    f390:	2000297c 	.word	0x2000297c
    f394:	20002978 	.word	0x20002978
    f398:	200010e8 	.word	0x200010e8
    f39c:	200010ec 	.word	0x200010ec
    f3a0:	200027e8 	.word	0x200027e8
    f3a4:	0000fce9 	.word	0x0000fce9
    f3a8:	0000eb39 	.word	0x0000eb39
    f3ac:	0000fd6d 	.word	0x0000fd6d
    f3b0:	0000eb11 	.word	0x0000eb11
    f3b4:	0000fd79 	.word	0x0000fd79
    f3b8:	0000f009 	.word	0x0000f009
    f3bc:	0000f289 	.word	0x0000f289
    f3c0:	2000297a 	.word	0x2000297a
    f3c4:	0000f4a1 	.word	0x0000f4a1

0000f3c8 <SwTimerTimestampCreate>:

\return LORAWAN_SUCCESS if new timerId is allocated
        LORAWAN_RESOURCE_UNAVAILABLE if there is no more timerId to allocate
******************************************************************************/
StackRetStatus_t SwTimerTimestampCreate(uint8_t *timestampId)
{
    f3c8:	b510      	push	{r4, lr}
    f3ca:	0004      	movs	r4, r0
    StackRetStatus_t retVal = LORAWAN_SUCCESS;

    if (allocatedTimestampId < TOTAL_NUMBER_SW_TIMESTAMPS)
    f3cc:	4b08      	ldr	r3, [pc, #32]	; (f3f0 <SwTimerTimestampCreate+0x28>)
    f3ce:	781b      	ldrb	r3, [r3, #0]
        * If you reach this spot it means the TOTAL_NUMBER_SW_TIMESTAMPS
        * is #defined to a lower value than the number of timers that have
        * been SwTimerTimestampCreate()
        */
        SYS_ASSERT_FATAL(ASSERT_HAL_TIMESTAMPID_EXHAUSTED);
        retVal = LORAWAN_RESOURCE_UNAVAILABLE;
    f3d0:	2014      	movs	r0, #20
    if (allocatedTimestampId < TOTAL_NUMBER_SW_TIMESTAMPS)
    f3d2:	2b01      	cmp	r3, #1
    f3d4:	d900      	bls.n	f3d8 <SwTimerTimestampCreate+0x10>
    }

    return retVal;
}
    f3d6:	bd10      	pop	{r4, pc}
        ATOMIC_SECTION_ENTER
    f3d8:	4b06      	ldr	r3, [pc, #24]	; (f3f4 <SwTimerTimestampCreate+0x2c>)
    f3da:	4798      	blx	r3
        *timestampId = allocatedTimestampId;
    f3dc:	4a04      	ldr	r2, [pc, #16]	; (f3f0 <SwTimerTimestampCreate+0x28>)
    f3de:	7813      	ldrb	r3, [r2, #0]
    f3e0:	7023      	strb	r3, [r4, #0]
        allocatedTimestampId++;
    f3e2:	3301      	adds	r3, #1
    f3e4:	7013      	strb	r3, [r2, #0]
        ATOMIC_SECTION_EXIT
    f3e6:	4b04      	ldr	r3, [pc, #16]	; (f3f8 <SwTimerTimestampCreate+0x30>)
    f3e8:	4798      	blx	r3
    StackRetStatus_t retVal = LORAWAN_SUCCESS;
    f3ea:	2008      	movs	r0, #8
    f3ec:	e7f3      	b.n	f3d6 <SwTimerTimestampCreate+0xe>
    f3ee:	46c0      	nop			; (mov r8, r8)
    f3f0:	200010dd 	.word	0x200010dd
    f3f4:	000083b5 	.word	0x000083b5
    f3f8:	000083c1 	.word	0x000083c1

0000f3fc <SwTimerReadTimestamp>:
\param[in] index Index of the system timestamp
\param[out] *timestamp Pointer-to-timestamp to be read from the given index
******************************************************************************/
void SwTimerReadTimestamp(uint8_t index, SwTimestamp_t *timestamp)
{
	*timestamp = swTimestamp[index];
    f3fc:	00c3      	lsls	r3, r0, #3
    f3fe:	4803      	ldr	r0, [pc, #12]	; (f40c <SwTimerReadTimestamp+0x10>)
    f400:	18c0      	adds	r0, r0, r3
    f402:	6802      	ldr	r2, [r0, #0]
    f404:	6843      	ldr	r3, [r0, #4]
    f406:	600a      	str	r2, [r1, #0]
    f408:	604b      	str	r3, [r1, #4]
}
    f40a:	4770      	bx	lr
    f40c:	200027d8 	.word	0x200027d8

0000f410 <SwTimerWriteTimestamp>:
\param[in] index Index of the system timestamp
\param[in] *timestamp Pointer-to-timestamp to be stored in the given index
******************************************************************************/
void SwTimerWriteTimestamp(uint8_t index, SwTimestamp_t *timestamp)
{
    swTimestamp[index] = *timestamp;
    f410:	680a      	ldr	r2, [r1, #0]
    f412:	684b      	ldr	r3, [r1, #4]
    f414:	00c1      	lsls	r1, r0, #3
    f416:	4802      	ldr	r0, [pc, #8]	; (f420 <SwTimerWriteTimestamp+0x10>)
    f418:	1840      	adds	r0, r0, r1
    f41a:	6002      	str	r2, [r0, #0]
    f41c:	6043      	str	r3, [r0, #4]
}
    f41e:	4770      	bx	lr
    f420:	200027d8 	.word	0x200027d8

0000f424 <Stack_Init>:
/**************************************************************************//**
\brief Initializes the system. This is the first stack function to be called
       by the application in the main() function.
******************************************************************************/
void Stack_Init(void)
{
    f424:	b510      	push	{r4, lr}
	
	/* LORAWAN_Init() should have been called form here, 
	   but parser application has a round-about way to call it now */
 
	/* Post application task to initiate the execution from there */
	SYSTEM_PostTask(APP_TASK_ID);
    f426:	2010      	movs	r0, #16
    f428:	4b01      	ldr	r3, [pc, #4]	; (f430 <Stack_Init+0xc>)
    f42a:	4798      	blx	r3
}
    f42c:	bd10      	pop	{r4, pc}
    f42e:	46c0      	nop			; (mov r8, r8)
    f430:	0000f4a1 	.word	0x0000f4a1

0000f434 <SYSTEM_RunTasks>:
/************************************************************************/
/*********************************************************************//**
\brief System tasks execution entry point
*************************************************************************/
void SYSTEM_RunTasks(void)
{
    f434:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if ((1 << SYSTEM_TASK_ID_COUNT) > sysTaskFlag)
    f436:	4b16      	ldr	r3, [pc, #88]	; (f490 <SYSTEM_RunTasks+0x5c>)
    f438:	881b      	ldrh	r3, [r3, #0]
    f43a:	b29b      	uxth	r3, r3
    f43c:	2b1f      	cmp	r3, #31
    f43e:	d922      	bls.n	f486 <SYSTEM_RunTasks+0x52>
    f440:	e7fe      	b.n	f440 <SYSTEM_RunTasks+0xc>
    { /* Only valid task bits are set */
        while (sysTaskFlag)
        { /* One or more task are pending to execute */
            for (uint16_t taskId = 0; taskId < SYSTEM_TASK_ID_COUNT; taskId++)
            {
                if ((1 << taskId) & sysTaskFlag)
    f442:	2500      	movs	r5, #0
                    /*
                    * Reset the task bit since it is to be executed now.
                    * It is done inside atomic section to avoid any interrupt context
                    * corrupting the bits.
                    */
                    ATOMIC_SECTION_ENTER
    f444:	4b13      	ldr	r3, [pc, #76]	; (f494 <SYSTEM_RunTasks+0x60>)
    f446:	4798      	blx	r3
                    sysTaskFlag &= ~(1 << taskId);
    f448:	4911      	ldr	r1, [pc, #68]	; (f490 <SYSTEM_RunTasks+0x5c>)
    f44a:	880b      	ldrh	r3, [r1, #0]
    f44c:	2201      	movs	r2, #1
    f44e:	40aa      	lsls	r2, r5
    f450:	4393      	bics	r3, r2
    f452:	800b      	strh	r3, [r1, #0]
                    ATOMIC_SECTION_EXIT
    f454:	4b10      	ldr	r3, [pc, #64]	; (f498 <SYSTEM_RunTasks+0x64>)
    f456:	4798      	blx	r3

                    /* Return value is not used now, can be used later */
                    taskHandlers[taskId]();
    f458:	00ad      	lsls	r5, r5, #2
    f45a:	4b10      	ldr	r3, [pc, #64]	; (f49c <SYSTEM_RunTasks+0x68>)
    f45c:	58eb      	ldr	r3, [r5, r3]
    f45e:	4798      	blx	r3
                if ((1 << taskId) & sysTaskFlag)
    f460:	2101      	movs	r1, #1
        while (sysTaskFlag)
    f462:	883b      	ldrh	r3, [r7, #0]
    f464:	b29b      	uxth	r3, r3
    f466:	2b00      	cmp	r3, #0
    f468:	d011      	beq.n	f48e <SYSTEM_RunTasks+0x5a>
                if ((1 << taskId) & sysTaskFlag)
    f46a:	8823      	ldrh	r3, [r4, #0]
    f46c:	420b      	tst	r3, r1
    f46e:	d1e8      	bne.n	f442 <SYSTEM_RunTasks+0xe>
    f470:	2201      	movs	r2, #1
    f472:	8833      	ldrh	r3, [r6, #0]
    f474:	b29b      	uxth	r3, r3
    f476:	0015      	movs	r5, r2
    f478:	4113      	asrs	r3, r2
    f47a:	4219      	tst	r1, r3
    f47c:	d1e2      	bne.n	f444 <SYSTEM_RunTasks+0x10>
    f47e:	3201      	adds	r2, #1
            for (uint16_t taskId = 0; taskId < SYSTEM_TASK_ID_COUNT; taskId++)
    f480:	2a05      	cmp	r2, #5
    f482:	d1f6      	bne.n	f472 <SYSTEM_RunTasks+0x3e>
    f484:	e7ed      	b.n	f462 <SYSTEM_RunTasks+0x2e>
        while (sysTaskFlag)
    f486:	4f02      	ldr	r7, [pc, #8]	; (f490 <SYSTEM_RunTasks+0x5c>)
                if ((1 << taskId) & sysTaskFlag)
    f488:	003c      	movs	r4, r7
    f48a:	003e      	movs	r6, r7
    f48c:	e7e8      	b.n	f460 <SYSTEM_RunTasks+0x2c>
        * Can happen only due to corruption, so halt
        * TODO : replace this with assert implementation
        */
        while(1);
    }
}
    f48e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    f490:	200010f8 	.word	0x200010f8
    f494:	000083b5 	.word	0x000083b5
    f498:	000083c1 	.word	0x000083c1
    f49c:	000201bc 	.word	0x000201bc

0000f4a0 <SYSTEM_PostTask>:

\param[in] task - ID of the posted task.
*************************************************************************/

void SYSTEM_PostTask(SYSTEM_Task_t task)
{
    f4a0:	b510      	push	{r4, lr}
    f4a2:	0004      	movs	r4, r0
    ATOMIC_SECTION_ENTER
    f4a4:	4b04      	ldr	r3, [pc, #16]	; (f4b8 <SYSTEM_PostTask+0x18>)
    f4a6:	4798      	blx	r3
    sysTaskFlag |= task;
    f4a8:	4b04      	ldr	r3, [pc, #16]	; (f4bc <SYSTEM_PostTask+0x1c>)
    f4aa:	8818      	ldrh	r0, [r3, #0]
    f4ac:	4320      	orrs	r0, r4
    f4ae:	8018      	strh	r0, [r3, #0]
    ATOMIC_SECTION_EXIT
    f4b0:	4b03      	ldr	r3, [pc, #12]	; (f4c0 <SYSTEM_PostTask+0x20>)
    f4b2:	4798      	blx	r3
}
    f4b4:	bd10      	pop	{r4, pc}
    f4b6:	46c0      	nop			; (mov r8, r8)
    f4b8:	000083b5 	.word	0x000083b5
    f4bc:	200010f8 	.word	0x200010f8
    f4c0:	000083c1 	.word	0x000083c1

0000f4c4 <SYSTEM_ReadyToSleep>:

\return 'true' if the system is ready, 'false' otherwise
*************************************************************************/
bool SYSTEM_ReadyToSleep(void)
{
    return !(sysTaskFlag & 0xffff);
    f4c4:	4b03      	ldr	r3, [pc, #12]	; (f4d4 <SYSTEM_ReadyToSleep+0x10>)
    f4c6:	8818      	ldrh	r0, [r3, #0]
    f4c8:	b280      	uxth	r0, r0
    f4ca:	4243      	negs	r3, r0
    f4cc:	4158      	adcs	r0, r3
    f4ce:	b2c0      	uxtb	r0, r0
}
    f4d0:	4770      	bx	lr
    f4d2:	46c0      	nop			; (mov r8, r8)
    f4d4:	200010f8 	.word	0x200010f8

0000f4d8 <Radio_WriteMode>:
\param newModulation	- Sets the modulation.
\param blocking			- Sets if its blocking call or not.
\return					- none.
*************************************************************************/
void Radio_WriteMode(RadioMode_t newMode, RadioModulation_t newModulation, uint8_t blocking)
{
    f4d8:	b5f0      	push	{r4, r5, r6, r7, lr}
    f4da:	46d6      	mov	lr, sl
    f4dc:	464f      	mov	r7, r9
    f4de:	b580      	push	{r7, lr}
    f4e0:	b083      	sub	sp, #12
    f4e2:	9201      	str	r2, [sp, #4]
    uint8_t opMode;
    uint8_t dioMapping;
    RadioModulation_t currentModulation;
    RadioMode_t currentMode;

    if ((MODULATION_FSK == newModulation) &&
    f4e4:	2900      	cmp	r1, #0
    f4e6:	d102      	bne.n	f4ee <Radio_WriteMode+0x16>
    f4e8:	1f83      	subs	r3, r0, #6
    f4ea:	2b01      	cmp	r3, #1
    f4ec:	d92a      	bls.n	f544 <Radio_WriteMode+0x6c>
        // Unavailable modes for FSK. Just return.
        return;
    }

    // Sanity enforcement on parameters
    newMode &= 0x07;
    f4ee:	2307      	movs	r3, #7
    f4f0:	4699      	mov	r9, r3
    f4f2:	001c      	movs	r4, r3
    f4f4:	4004      	ands	r4, r0
    newModulation &= 0x01;
    f4f6:	2601      	movs	r6, #1
    f4f8:	400e      	ands	r6, r1

    opMode = RADIO_RegisterRead(REG_OPMODE);
    f4fa:	2001      	movs	r0, #1
    f4fc:	4b2b      	ldr	r3, [pc, #172]	; (f5ac <Radio_WriteMode+0xd4>)
    f4fe:	4798      	blx	r3
    f500:	0005      	movs	r5, r0
    f502:	0007      	movs	r7, r0

    if ((opMode & 0x80) != 0)
    f504:	b243      	sxtb	r3, r0
    f506:	469a      	mov	sl, r3
    else
    {
        currentModulation = MODULATION_FSK;
    }

    currentMode = opMode & 0x07;
    f508:	464b      	mov	r3, r9
    f50a:	4003      	ands	r3, r0

    // If we need to change modulation, we need to do this in sleep mode.
    // Otherwise, we can go straight to changing the current mode to newMode.
    if (newModulation != currentModulation)
    f50c:	4652      	mov	r2, sl
    f50e:	0fd2      	lsrs	r2, r2, #31
    f510:	4296      	cmp	r6, r2
    f512:	d00a      	beq.n	f52a <Radio_WriteMode+0x52>
    {
        // Go to sleep
        if (MODE_SLEEP != currentMode)
    f514:	2b00      	cmp	r3, #0
    f516:	d11a      	bne.n	f54e <Radio_WriteMode+0x76>
            // Clear mode bits, effectively going to sleep
            RADIO_RegisterWrite(REG_OPMODE, opMode & (~0x07));
            currentMode = MODE_SLEEP;
        }
        // Change modulation
        if (MODULATION_FSK == newModulation)
    f518:	2e00      	cmp	r6, #0
    f51a:	d11e      	bne.n	f55a <Radio_WriteMode+0x82>
        {
            // Clear MSB and sleep bits to make it stay in sleep
            opMode = opMode & (~0x87);
    f51c:	2778      	movs	r7, #120	; 0x78
    f51e:	402f      	ands	r7, r5
        else
        {
            // LoRa mode. Set MSB and clear sleep bits to make it stay in sleep
            opMode = 0x80 | (opMode & (~0x87));
        }
        RADIO_RegisterWrite(REG_OPMODE, opMode);
    f520:	0039      	movs	r1, r7
    f522:	2001      	movs	r0, #1
    f524:	4b22      	ldr	r3, [pc, #136]	; (f5b0 <Radio_WriteMode+0xd8>)
    f526:	4798      	blx	r3
    f528:	2300      	movs	r3, #0

    // From here on currentModulation is no longer current, we will use
    // newModulation instead as it reflects the chip configuration.
    // opMode reflects the actual configuration of the chip.

    if (newMode != currentMode)
    f52a:	42a3      	cmp	r3, r4
    f52c:	d00a      	beq.n	f544 <Radio_WriteMode+0x6c>
    {
        // If we need to block until the mode switch is ready, configure the
        // DIO5 pin to relay this information.
        if ((MODE_SLEEP != newMode) && (1 == blocking))
    f52e:	2c00      	cmp	r4, #0
    f530:	d030      	beq.n	f594 <Radio_WriteMode+0xbc>
    f532:	9b01      	ldr	r3, [sp, #4]
    f534:	2b01      	cmp	r3, #1
    f536:	d016      	beq.n	f566 <Radio_WriteMode+0x8e>
            }
            RADIO_RegisterWrite(REG_DIOMAPPING2, dioMapping);
        }

        // Do the actual mode switch.
        opMode &= ~0x07;                // Clear old mode bits
    f538:	21f8      	movs	r1, #248	; 0xf8
    f53a:	4039      	ands	r1, r7
        opMode |= newMode;              // Set new mode bits
        RADIO_RegisterWrite(REG_OPMODE, opMode);
    f53c:	4321      	orrs	r1, r4
    f53e:	2001      	movs	r0, #1
    f540:	4b1b      	ldr	r3, [pc, #108]	; (f5b0 <Radio_WriteMode+0xd8>)
    f542:	4798      	blx	r3
                SystemBlockingWaitMs(1);
            }
        }
    }
#endif
}
    f544:	b003      	add	sp, #12
    f546:	bc0c      	pop	{r2, r3}
    f548:	4691      	mov	r9, r2
    f54a:	469a      	mov	sl, r3
    f54c:	bdf0      	pop	{r4, r5, r6, r7, pc}
            RADIO_RegisterWrite(REG_OPMODE, opMode & (~0x07));
    f54e:	21f8      	movs	r1, #248	; 0xf8
    f550:	4001      	ands	r1, r0
    f552:	2001      	movs	r0, #1
    f554:	4b16      	ldr	r3, [pc, #88]	; (f5b0 <Radio_WriteMode+0xd8>)
    f556:	4798      	blx	r3
    f558:	e7de      	b.n	f518 <Radio_WriteMode+0x40>
            opMode = 0x80 | (opMode & (~0x87));
    f55a:	2778      	movs	r7, #120	; 0x78
    f55c:	4653      	mov	r3, sl
    f55e:	401f      	ands	r7, r3
    f560:	2180      	movs	r1, #128	; 0x80
    f562:	430f      	orrs	r7, r1
    f564:	e7dc      	b.n	f520 <Radio_WriteMode+0x48>
            dioMapping = RADIO_RegisterRead(REG_DIOMAPPING2);
    f566:	2041      	movs	r0, #65	; 0x41
    f568:	4b10      	ldr	r3, [pc, #64]	; (f5ac <Radio_WriteMode+0xd4>)
    f56a:	4798      	blx	r3
            if (MODULATION_FSK == newModulation)
    f56c:	2e00      	cmp	r6, #0
    f56e:	d10e      	bne.n	f58e <Radio_WriteMode+0xb6>
                dioMapping |= 0x30;     // DIO5 = 11 means ModeReady in FSK mode
    f570:	2130      	movs	r1, #48	; 0x30
    f572:	4301      	orrs	r1, r0
    f574:	b2c9      	uxtb	r1, r1
            RADIO_RegisterWrite(REG_DIOMAPPING2, dioMapping);
    f576:	2041      	movs	r0, #65	; 0x41
    f578:	4d0d      	ldr	r5, [pc, #52]	; (f5b0 <Radio_WriteMode+0xd8>)
    f57a:	47a8      	blx	r5
        opMode &= ~0x07;                // Clear old mode bits
    f57c:	21f8      	movs	r1, #248	; 0xf8
    f57e:	4039      	ands	r1, r7
        RADIO_RegisterWrite(REG_OPMODE, opMode);
    f580:	4321      	orrs	r1, r4
    f582:	2001      	movs	r0, #1
    f584:	47a8      	blx	r5
			   delay_ms(1);
    f586:	2001      	movs	r0, #1
    f588:	4b0a      	ldr	r3, [pc, #40]	; (f5b4 <Radio_WriteMode+0xdc>)
    f58a:	4798      	blx	r3
    f58c:	e7da      	b.n	f544 <Radio_WriteMode+0x6c>
                dioMapping &= ~0x30;    // DIO5 = 00 means ModeReady in LoRa mode
    f58e:	21cf      	movs	r1, #207	; 0xcf
    f590:	4001      	ands	r1, r0
    f592:	e7f0      	b.n	f576 <Radio_WriteMode+0x9e>
        opMode &= ~0x07;                // Clear old mode bits
    f594:	21f8      	movs	r1, #248	; 0xf8
        RADIO_RegisterWrite(REG_OPMODE, opMode);
    f596:	4039      	ands	r1, r7
    f598:	2001      	movs	r0, #1
    f59a:	4b05      	ldr	r3, [pc, #20]	; (f5b0 <Radio_WriteMode+0xd8>)
    f59c:	4798      	blx	r3
        if (1 == blocking)
    f59e:	9b01      	ldr	r3, [sp, #4]
    f5a0:	2b01      	cmp	r3, #1
    f5a2:	d1cf      	bne.n	f544 <Radio_WriteMode+0x6c>
                SystemBlockingWaitMs(1);
    f5a4:	2001      	movs	r0, #1
    f5a6:	4b04      	ldr	r3, [pc, #16]	; (f5b8 <Radio_WriteMode+0xe0>)
    f5a8:	4798      	blx	r3
    f5aa:	e7cb      	b.n	f544 <Radio_WriteMode+0x6c>
    f5ac:	0000812d 	.word	0x0000812d
    f5b0:	00008105 	.word	0x00008105
    f5b4:	000045bd 	.word	0x000045bd
    f5b8:	00008361 	.word	0x00008361

0000f5bc <RADIO_FHSSChangeChannel>:

\param		- none	
\return		- none.
*************************************************************************/
void RADIO_FHSSChangeChannel(void)
{
    f5bc:	b500      	push	{lr}
    f5be:	b083      	sub	sp, #12
    uint32_t freq;
    RADIO_RegisterRead(REG_LORA_IRQFLAGS);
    f5c0:	2012      	movs	r0, #18
    f5c2:	4b0d      	ldr	r3, [pc, #52]	; (f5f8 <RADIO_FHSSChangeChannel+0x3c>)
    f5c4:	4798      	blx	r3

    if (radioConfiguration.frequencyHopPeriod)
    f5c6:	4b0d      	ldr	r3, [pc, #52]	; (f5fc <RADIO_FHSSChangeChannel+0x40>)
    f5c8:	8adb      	ldrh	r3, [r3, #22]
    f5ca:	2b00      	cmp	r3, #0
    f5cc:	d007      	beq.n	f5de <RADIO_FHSSChangeChannel+0x22>
    {
        if ((radioConfiguration.radioCallback) &&
    f5ce:	4b0b      	ldr	r3, [pc, #44]	; (f5fc <RADIO_FHSSChangeChannel+0x40>)
    f5d0:	691b      	ldr	r3, [r3, #16]
    f5d2:	2b00      	cmp	r3, #0
    f5d4:	d003      	beq.n	f5de <RADIO_FHSSChangeChannel+0x22>
            (1 == radioCallbackMask.BitMask.radioFhssfreqCallback))
    f5d6:	4a0a      	ldr	r2, [pc, #40]	; (f600 <RADIO_FHSSChangeChannel+0x44>)
    f5d8:	7812      	ldrb	r2, [r2, #0]
        if ((radioConfiguration.radioCallback) &&
    f5da:	0692      	lsls	r2, r2, #26
    f5dc:	d405      	bmi.n	f5ea <RADIO_FHSSChangeChannel+0x2e>
            Radio_WriteFrequency(freq);
        }
    }

    // Clear FHSSChangeChannel interrupt
    RADIO_RegisterWrite(REG_LORA_IRQFLAGS, 1 << SHIFT1);
    f5de:	2102      	movs	r1, #2
    f5e0:	2012      	movs	r0, #18
    f5e2:	4b08      	ldr	r3, [pc, #32]	; (f604 <RADIO_FHSSChangeChannel+0x48>)
    f5e4:	4798      	blx	r3
}
    f5e6:	b003      	add	sp, #12
    f5e8:	bd00      	pop	{pc}
            radioConfiguration.radioCallback(RADIO_FHSS_NEXT_FREQ_CALLBACK, (void *)&freq);
    f5ea:	a901      	add	r1, sp, #4
    f5ec:	2020      	movs	r0, #32
    f5ee:	4798      	blx	r3
            Radio_WriteFrequency(freq);
    f5f0:	9801      	ldr	r0, [sp, #4]
    f5f2:	4b05      	ldr	r3, [pc, #20]	; (f608 <RADIO_FHSSChangeChannel+0x4c>)
    f5f4:	4798      	blx	r3
    f5f6:	e7f2      	b.n	f5de <RADIO_FHSSChangeChannel+0x22>
    f5f8:	0000812d 	.word	0x0000812d
    f5fc:	20002980 	.word	0x20002980
    f600:	20002fbe 	.word	0x20002fbe
    f604:	00008105 	.word	0x00008105
    f608:	00014ea1 	.word	0x00014ea1

0000f60c <RADIO_ReadRandom>:

\param		- none	
\return		- returns the random number generated.
*************************************************************************/
uint16_t RADIO_ReadRandom(void)
{
    f60c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint8_t i;
    uint16_t retVal;
    retVal = 0;
	
	// Turn on the RF switch.
	Radio_EnableRfControl(RADIO_RFCTRL_RX); 
    f60e:	2000      	movs	r0, #0
    f610:	4b1a      	ldr	r3, [pc, #104]	; (f67c <RADIO_ReadRandom+0x70>)
    f612:	4798      	blx	r3
	// Enabling Radio Clock
	Radio_SetClockInput();
    f614:	4b1a      	ldr	r3, [pc, #104]	; (f680 <RADIO_ReadRandom+0x74>)
    f616:	4798      	blx	r3
	
    // Mask all interrupts, do many measurements of RSSI
    Radio_WriteMode(MODE_SLEEP, MODULATION_LORA, 1);
    f618:	2201      	movs	r2, #1
    f61a:	2101      	movs	r1, #1
    f61c:	2000      	movs	r0, #0
    f61e:	4c19      	ldr	r4, [pc, #100]	; (f684 <RADIO_ReadRandom+0x78>)
    f620:	47a0      	blx	r4
    RADIO_RegisterWrite(REG_LORA_IRQFLAGSMASK, 0xFF);
    f622:	21ff      	movs	r1, #255	; 0xff
    f624:	2011      	movs	r0, #17
    f626:	4b18      	ldr	r3, [pc, #96]	; (f688 <RADIO_ReadRandom+0x7c>)
    f628:	4798      	blx	r3
    Radio_WriteMode(MODE_RXCONT, MODULATION_LORA, 1);
    f62a:	2201      	movs	r2, #1
    f62c:	2101      	movs	r1, #1
    f62e:	2005      	movs	r0, #5
    f630:	47a0      	blx	r4
    f632:	2410      	movs	r4, #16
    retVal = 0;
    f634:	2500      	movs	r5, #0
    for (i = 0; i < 16; i++)
    {
        SystemBlockingWaitMs(1);
    f636:	4f15      	ldr	r7, [pc, #84]	; (f68c <RADIO_ReadRandom+0x80>)
        retVal <<= SHIFT1;
        retVal |= RADIO_RegisterRead(REG_LORA_RSSIWIDEBAND) & 0x01;
    f638:	4e15      	ldr	r6, [pc, #84]	; (f690 <RADIO_ReadRandom+0x84>)
        SystemBlockingWaitMs(1);
    f63a:	2001      	movs	r0, #1
    f63c:	47b8      	blx	r7
        retVal |= RADIO_RegisterRead(REG_LORA_RSSIWIDEBAND) & 0x01;
    f63e:	202c      	movs	r0, #44	; 0x2c
    f640:	47b0      	blx	r6
    f642:	2301      	movs	r3, #1
    f644:	4018      	ands	r0, r3
        retVal <<= SHIFT1;
    f646:	006d      	lsls	r5, r5, #1
        retVal |= RADIO_RegisterRead(REG_LORA_RSSIWIDEBAND) & 0x01;
    f648:	4305      	orrs	r5, r0
    f64a:	b2ad      	uxth	r5, r5
    f64c:	3c01      	subs	r4, #1
    f64e:	b2e4      	uxtb	r4, r4
    for (i = 0; i < 16; i++)
    f650:	2c00      	cmp	r4, #0
    f652:	d1f2      	bne.n	f63a <RADIO_ReadRandom+0x2e>
    }
	
	// Turning off the RF switch now.
	Radio_DisableRfControl(RADIO_RFCTRL_RX);
    f654:	2000      	movs	r0, #0
    f656:	4b0f      	ldr	r3, [pc, #60]	; (f694 <RADIO_ReadRandom+0x88>)
    f658:	4798      	blx	r3
	
    // Return radio to sleep
    Radio_WriteMode(MODE_SLEEP, MODULATION_LORA, 1);
    f65a:	2201      	movs	r2, #1
    f65c:	2101      	movs	r1, #1
    f65e:	2000      	movs	r0, #0
    f660:	4b08      	ldr	r3, [pc, #32]	; (f684 <RADIO_ReadRandom+0x78>)
    f662:	4798      	blx	r3
    // Clear interrupts in case any have been generated
    RADIO_RegisterWrite(REG_LORA_IRQFLAGS, 0xFF);
    f664:	21ff      	movs	r1, #255	; 0xff
    f666:	2012      	movs	r0, #18
    f668:	4c07      	ldr	r4, [pc, #28]	; (f688 <RADIO_ReadRandom+0x7c>)
    f66a:	47a0      	blx	r4
    // Unmask all interrupts
    RADIO_RegisterWrite(REG_LORA_IRQFLAGSMASK, 0x00);
    f66c:	2100      	movs	r1, #0
    f66e:	2011      	movs	r0, #17
    f670:	47a0      	blx	r4
	// Disabling Radio Clock save power
	Radio_ResetClockInput();
    f672:	4b09      	ldr	r3, [pc, #36]	; (f698 <RADIO_ReadRandom+0x8c>)
    f674:	4798      	blx	r3
	
    return retVal;
}
    f676:	0028      	movs	r0, r5
    f678:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    f67a:	46c0      	nop			; (mov r8, r8)
    f67c:	0001575d 	.word	0x0001575d
    f680:	00015c0d 	.word	0x00015c0d
    f684:	0000f4d9 	.word	0x0000f4d9
    f688:	00008105 	.word	0x00008105
    f68c:	00008361 	.word	0x00008361
    f690:	0000812d 	.word	0x0000812d
    f694:	00015885 	.word	0x00015885
    f698:	00015c41 	.word	0x00015c41

0000f69c <Radio_ReadFSKRssi>:

\param rssi	- The RSSI measured in the channel.
\return		- ERR_NONE. Other types are not used now.
*************************************************************************/
RadioError_t Radio_ReadFSKRssi(int16_t *rssi)
{	
    f69c:	b510      	push	{r4, lr}
    f69e:	0004      	movs	r4, r0
#ifdef UT
	*rssi = testRssi;
#else // UT
	*rssi = -(RADIO_RegisterRead(REG_FSK_RSSIVALUE) >> 1);
    f6a0:	2011      	movs	r0, #17
    f6a2:	4b04      	ldr	r3, [pc, #16]	; (f6b4 <Radio_ReadFSKRssi+0x18>)
    f6a4:	4798      	blx	r3
    f6a6:	0840      	lsrs	r0, r0, #1
    f6a8:	b2c0      	uxtb	r0, r0
    f6aa:	4240      	negs	r0, r0
    f6ac:	8020      	strh	r0, [r4, #0]
#endif // UT
	
	return ERR_NONE;
}
    f6ae:	2000      	movs	r0, #0
    f6b0:	bd10      	pop	{r4, pc}
    f6b2:	46c0      	nop			; (mov r8, r8)
    f6b4:	0000812d 	.word	0x0000812d

0000f6b8 <tc_cca_callback>:
}

/*! \brief  hw timer compare callback
 */
static void tc_cca_callback(struct tc_module *const module_instance)
{
    f6b8:	b510      	push	{r4, lr}
	tmr_cca_callback();
    f6ba:	4b01      	ldr	r3, [pc, #4]	; (f6c0 <tc_cca_callback+0x8>)
    f6bc:	4798      	blx	r3
}
    f6be:	bd10      	pop	{r4, pc}
    f6c0:	0000fd51 	.word	0x0000fd51

0000f6c4 <tc_ovf_callback>:
{
    f6c4:	b510      	push	{r4, lr}
	tmr_ovf_callback();
    f6c6:	4b01      	ldr	r3, [pc, #4]	; (f6cc <tc_ovf_callback+0x8>)
    f6c8:	4798      	blx	r3
}
    f6ca:	bd10      	pop	{r4, pc}
    f6cc:	0000fd09 	.word	0x0000fd09

0000f6d0 <tmr_read_count>:
{
    f6d0:	b510      	push	{r4, lr}
	return ((uint16_t)tc_get_count_value(&module_inst));
    f6d2:	4802      	ldr	r0, [pc, #8]	; (f6dc <tmr_read_count+0xc>)
    f6d4:	4b02      	ldr	r3, [pc, #8]	; (f6e0 <tmr_read_count+0x10>)
    f6d6:	4798      	blx	r3
    f6d8:	b280      	uxth	r0, r0
}
    f6da:	bd10      	pop	{r4, pc}
    f6dc:	20002a14 	.word	0x20002a14
    f6e0:	00007849 	.word	0x00007849

0000f6e4 <tmr_disable_cc_interrupt>:
	/* Sanity check arguments */
	Assert(module);

	/* Disable callback */
	if (callback_type == TC_CALLBACK_CC_CHANNEL0) {
		module->hw->COUNT8.INTENCLR.reg = TC_INTFLAG_MC(1);
    f6e4:	4b03      	ldr	r3, [pc, #12]	; (f6f4 <tmr_disable_cc_interrupt+0x10>)
    f6e6:	2110      	movs	r1, #16
    f6e8:	681a      	ldr	r2, [r3, #0]
    f6ea:	7211      	strb	r1, [r2, #8]
		module->enable_callback_mask &= ~TC_INTFLAG_MC(1);
    f6ec:	7e5a      	ldrb	r2, [r3, #25]
    f6ee:	438a      	bics	r2, r1
    f6f0:	765a      	strb	r2, [r3, #25]
}
    f6f2:	4770      	bx	lr
    f6f4:	20002a14 	.word	0x20002a14

0000f6f8 <tmr_enable_cc_interrupt>:
{
    f6f8:	b570      	push	{r4, r5, r6, lr}
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    f6fa:	4c0b      	ldr	r4, [pc, #44]	; (f728 <tmr_enable_cc_interrupt+0x30>)
	if (status_flags & TC_STATUS_COUNT_OVERFLOW) {
		int_flags |= TC_INTFLAG_OVF;
	}

	/* Clear interrupt flag */
	tc_module->INTFLAG.reg = int_flags;
    f6fc:	2510      	movs	r5, #16
    f6fe:	6823      	ldr	r3, [r4, #0]
    f700:	729d      	strb	r5, [r3, #10]
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));
    f702:	0018      	movs	r0, r3
    f704:	4b09      	ldr	r3, [pc, #36]	; (f72c <tmr_enable_cc_interrupt+0x34>)
    f706:	4798      	blx	r3
	return (enum system_interrupt_vector)tc_interrupt_vectors[inst_num];
    f708:	4b09      	ldr	r3, [pc, #36]	; (f730 <tmr_enable_cc_interrupt+0x38>)
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    f70a:	5c1b      	ldrb	r3, [r3, r0]
    f70c:	221f      	movs	r2, #31
    f70e:	401a      	ands	r2, r3
    f710:	2301      	movs	r3, #1
    f712:	4093      	lsls	r3, r2
    f714:	4a07      	ldr	r2, [pc, #28]	; (f734 <tmr_enable_cc_interrupt+0x3c>)
    f716:	6013      	str	r3, [r2, #0]
		module->enable_callback_mask |= TC_INTFLAG_MC(1);
    f718:	7e63      	ldrb	r3, [r4, #25]
    f71a:	2210      	movs	r2, #16
    f71c:	4313      	orrs	r3, r2
    f71e:	7663      	strb	r3, [r4, #25]
		module->hw->COUNT8.INTENSET.reg = TC_INTFLAG_MC(1);
    f720:	6823      	ldr	r3, [r4, #0]
    f722:	725d      	strb	r5, [r3, #9]
}
    f724:	bd70      	pop	{r4, r5, r6, pc}
    f726:	46c0      	nop			; (mov r8, r8)
    f728:	20002a14 	.word	0x20002a14
    f72c:	0000751d 	.word	0x0000751d
    f730:	000201d0 	.word	0x000201d0
    f734:	e000e100 	.word	0xe000e100

0000f738 <tmr_disable_ovf_interrupt>:
	else if (callback_type == TC_CALLBACK_CC_CHANNEL1) {
		module->hw->COUNT8.INTENCLR.reg = TC_INTFLAG_MC(2);
		module->enable_callback_mask &= ~TC_INTFLAG_MC(2);
	}
	else {
		module->hw->COUNT8.INTENCLR.reg = (1 << callback_type);
    f738:	4b03      	ldr	r3, [pc, #12]	; (f748 <tmr_disable_ovf_interrupt+0x10>)
    f73a:	2101      	movs	r1, #1
    f73c:	681a      	ldr	r2, [r3, #0]
    f73e:	7211      	strb	r1, [r2, #8]
		module->enable_callback_mask &= ~(1 << callback_type);
    f740:	7e5a      	ldrb	r2, [r3, #25]
    f742:	438a      	bics	r2, r1
    f744:	765a      	strb	r2, [r3, #25]
}
    f746:	4770      	bx	lr
    f748:	20002a14 	.word	0x20002a14

0000f74c <tmr_stop>:
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    f74c:	4b06      	ldr	r3, [pc, #24]	; (f768 <tmr_stop+0x1c>)
    f74e:	681a      	ldr	r2, [r3, #0]
	return (tc_module->SYNCBUSY.reg);
    f750:	6913      	ldr	r3, [r2, #16]
	while (tc_is_syncing(module_inst)) {
    f752:	2b00      	cmp	r3, #0
    f754:	d1fc      	bne.n	f750 <tmr_stop+0x4>
	tc_module->INTENCLR.reg = TC_INTENCLR_MASK;
    f756:	3333      	adds	r3, #51	; 0x33
    f758:	7213      	strb	r3, [r2, #8]
	tc_module->INTFLAG.reg = TC_INTFLAG_MASK;
    f75a:	7293      	strb	r3, [r2, #10]
	tc_module->CTRLA.reg  &= ~TC_CTRLA_ENABLE;
    f75c:	6813      	ldr	r3, [r2, #0]
    f75e:	2102      	movs	r1, #2
    f760:	438b      	bics	r3, r1
    f762:	6013      	str	r3, [r2, #0]
}
    f764:	4770      	bx	lr
    f766:	46c0      	nop			; (mov r8, r8)
    f768:	20002a14 	.word	0x20002a14

0000f76c <tmr_write_cmpreg>:
{
    f76c:	b510      	push	{r4, lr}
    f76e:	0002      	movs	r2, r0
	tc_set_compare_value(&module_inst, TC_COMPARE_CAPTURE_CHANNEL_0,
    f770:	2100      	movs	r1, #0
    f772:	4802      	ldr	r0, [pc, #8]	; (f77c <tmr_write_cmpreg+0x10>)
    f774:	4b02      	ldr	r3, [pc, #8]	; (f780 <tmr_write_cmpreg+0x14>)
    f776:	4798      	blx	r3
}
    f778:	bd10      	pop	{r4, pc}
    f77a:	46c0      	nop			; (mov r8, r8)
    f77c:	20002a14 	.word	0x20002a14
    f780:	00007889 	.word	0x00007889

0000f784 <save_cpu_interrupt>:
{
    f784:	b082      	sub	sp, #8
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    f786:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    f78a:	425a      	negs	r2, r3
    f78c:	4153      	adcs	r3, r2
    f78e:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    f790:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
    f792:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    f796:	2200      	movs	r2, #0
    f798:	4b02      	ldr	r3, [pc, #8]	; (f7a4 <save_cpu_interrupt+0x20>)
    f79a:	701a      	strb	r2, [r3, #0]
	return flags;
    f79c:	9801      	ldr	r0, [sp, #4]
	return cpu_irq_save();
    f79e:	b2c0      	uxtb	r0, r0
}
    f7a0:	b002      	add	sp, #8
    f7a2:	4770      	bx	lr
    f7a4:	20000014 	.word	0x20000014

0000f7a8 <restore_cpu_interrupt>:
	if (cpu_irq_is_enabled_flags(flags))
    f7a8:	2800      	cmp	r0, #0
    f7aa:	d005      	beq.n	f7b8 <restore_cpu_interrupt+0x10>
		cpu_irq_enable();
    f7ac:	2201      	movs	r2, #1
    f7ae:	4b03      	ldr	r3, [pc, #12]	; (f7bc <restore_cpu_interrupt+0x14>)
    f7b0:	701a      	strb	r2, [r3, #0]
    f7b2:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    f7b6:	b662      	cpsie	i
}
    f7b8:	4770      	bx	lr
    f7ba:	46c0      	nop			; (mov r8, r8)
    f7bc:	20000014 	.word	0x20000014

0000f7c0 <tmr_init>:

/*! \brief  to initialize hw timer
 */
uint8_t tmr_init(void)
{
    f7c0:	b570      	push	{r4, r5, r6, lr}
	config->clock_source               = GCLK_GENERATOR_0;
    f7c2:	4a33      	ldr	r2, [pc, #204]	; (f890 <tmr_init+0xd0>)
    f7c4:	2100      	movs	r1, #0
    f7c6:	2300      	movs	r3, #0
    f7c8:	7011      	strb	r1, [r2, #0]
	config->counter_size               = TC_COUNTER_SIZE_16BIT;
    f7ca:	70d1      	strb	r1, [r2, #3]
	config->clock_prescaler            = TC_CLOCK_PRESCALER_DIV1;
    f7cc:	2000      	movs	r0, #0
    f7ce:	8091      	strh	r1, [r2, #4]
	config->wave_generation            = TC_WAVE_GENERATION_NORMAL_FREQ;
    f7d0:	7190      	strb	r0, [r2, #6]
	config->reload_action              = TC_RELOAD_ACTION_GCLK;
    f7d2:	71d3      	strb	r3, [r2, #7]
	config->run_in_standby             = false;
    f7d4:	7053      	strb	r3, [r2, #1]
	config->on_demand                  = false;
    f7d6:	7093      	strb	r3, [r2, #2]
	config->waveform_invert_output     = TC_WAVEFORM_INVERT_OUTPUT_NONE;
    f7d8:	7213      	strb	r3, [r2, #8]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
    f7da:	7253      	strb	r3, [r2, #9]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
    f7dc:	7293      	strb	r3, [r2, #10]
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
    f7de:	72d3      	strb	r3, [r2, #11]
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
    f7e0:	7313      	strb	r3, [r2, #12]
	config->count_direction            = TC_COUNT_DIRECTION_UP;
    f7e2:	7393      	strb	r3, [r2, #14]
	config->oneshot                    = false;
    f7e4:	7353      	strb	r3, [r2, #13]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].enabled = false;
    f7e6:	7413      	strb	r3, [r2, #16]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_out = 0;
    f7e8:	6151      	str	r1, [r2, #20]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_mux = 0;
    f7ea:	6191      	str	r1, [r2, #24]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].enabled = false;
    f7ec:	7713      	strb	r3, [r2, #28]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_out = 0;
    f7ee:	6211      	str	r1, [r2, #32]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_mux = 0;
    f7f0:	6251      	str	r1, [r2, #36]	; 0x24
	config->counter_16_bit.value                   = 0x0000;
    f7f2:	8511      	strh	r1, [r2, #40]	; 0x28
		[TC_COMPARE_CAPTURE_CHANNEL_1]                        = 0x0000;
    f7f4:	8591      	strh	r1, [r2, #44]	; 0x2c
	config->double_buffering_enabled = false;
    f7f6:	2334      	movs	r3, #52	; 0x34
    f7f8:	54d0      	strb	r0, [r2, r3]
		timer_config.clock_source = GCLK_GENERATOR_1;
		timer_config.clock_prescaler = TC_CLOCK_PRESCALER_DIV2;
		timer_config.run_in_standby = true;
	}
	#endif
	timer_config.counter_16_bit.compare_capture_channel[0] = TIMER_PERIOD;
    f7fa:	3b35      	subs	r3, #53	; 0x35
    f7fc:	8553      	strh	r3, [r2, #42]	; 0x2a
	tc_init(&module_inst, TIMER, &timer_config);
    f7fe:	4c25      	ldr	r4, [pc, #148]	; (f894 <tmr_init+0xd4>)
    f800:	4925      	ldr	r1, [pc, #148]	; (f898 <tmr_init+0xd8>)
    f802:	0020      	movs	r0, r4
    f804:	4b25      	ldr	r3, [pc, #148]	; (f89c <tmr_init+0xdc>)
    f806:	4798      	blx	r3
	tc_register_callback(&module_inst, tc_ovf_callback,
    f808:	2200      	movs	r2, #0
    f80a:	4925      	ldr	r1, [pc, #148]	; (f8a0 <tmr_init+0xe0>)
    f80c:	0020      	movs	r0, r4
    f80e:	4d25      	ldr	r5, [pc, #148]	; (f8a4 <tmr_init+0xe4>)
    f810:	47a8      	blx	r5
			TC_CALLBACK_OVERFLOW);
	tc_register_callback(&module_inst, tc_cca_callback,
    f812:	2202      	movs	r2, #2
    f814:	4924      	ldr	r1, [pc, #144]	; (f8a8 <tmr_init+0xe8>)
    f816:	0020      	movs	r0, r4
    f818:	47a8      	blx	r5
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));
    f81a:	6820      	ldr	r0, [r4, #0]
    f81c:	4b23      	ldr	r3, [pc, #140]	; (f8ac <tmr_init+0xec>)
    f81e:	4798      	blx	r3
	return (enum system_interrupt_vector)tc_interrupt_vectors[inst_num];
    f820:	4b23      	ldr	r3, [pc, #140]	; (f8b0 <tmr_init+0xf0>)
    f822:	5c1a      	ldrb	r2, [r3, r0]
    f824:	231f      	movs	r3, #31
    f826:	4013      	ands	r3, r2
    f828:	2101      	movs	r1, #1
    f82a:	000a      	movs	r2, r1
    f82c:	409a      	lsls	r2, r3
    f82e:	4b21      	ldr	r3, [pc, #132]	; (f8b4 <tmr_init+0xf4>)
    f830:	601a      	str	r2, [r3, #0]
		module->enable_callback_mask |= (1 << callback_type);
    f832:	7e63      	ldrb	r3, [r4, #25]
    f834:	2201      	movs	r2, #1
    f836:	4313      	orrs	r3, r2
    f838:	7663      	strb	r3, [r4, #25]
		module->hw->COUNT8.INTENSET.reg = (1 << callback_type);
    f83a:	6822      	ldr	r2, [r4, #0]
    f83c:	7251      	strb	r1, [r2, #9]
	return (tc_module->SYNCBUSY.reg);
    f83e:	6913      	ldr	r3, [r2, #16]
	while (tc_is_syncing(module_inst)) {
    f840:	2b00      	cmp	r3, #0
    f842:	d1fc      	bne.n	f83e <tmr_init+0x7e>
	tc_module->CTRLA.reg |= TC_CTRLA_ENABLE;
    f844:	6813      	ldr	r3, [r2, #0]
    f846:	2102      	movs	r1, #2
    f848:	430b      	orrs	r3, r1
    f84a:	6013      	str	r3, [r2, #0]
	} else {
		timer_multiplier = system_gclk_gen_get_hz(0) / (float) DEF_1MHZ;
	}

    #else
	timer_multiplier = system_gclk_gen_get_hz(0) / (float) DEF_1MHZ;	
    f84c:	2000      	movs	r0, #0
    f84e:	4b1a      	ldr	r3, [pc, #104]	; (f8b8 <tmr_init+0xf8>)
    f850:	4798      	blx	r3
    f852:	4d1a      	ldr	r5, [pc, #104]	; (f8bc <tmr_init+0xfc>)
    f854:	47a8      	blx	r5
    f856:	491a      	ldr	r1, [pc, #104]	; (f8c0 <tmr_init+0x100>)
    f858:	4b1a      	ldr	r3, [pc, #104]	; (f8c4 <tmr_init+0x104>)
    f85a:	4798      	blx	r3
    f85c:	1c04      	adds	r4, r0, #0
	#endif
	
	if ((timer_multiplier - (uint32_t)timer_multiplier) >= 0.5f)
    f85e:	4b1a      	ldr	r3, [pc, #104]	; (f8c8 <tmr_init+0x108>)
    f860:	4798      	blx	r3
    f862:	47a8      	blx	r5
    f864:	1c01      	adds	r1, r0, #0
    f866:	1c20      	adds	r0, r4, #0
    f868:	4b18      	ldr	r3, [pc, #96]	; (f8cc <tmr_init+0x10c>)
    f86a:	4798      	blx	r3
    f86c:	21fc      	movs	r1, #252	; 0xfc
    f86e:	0589      	lsls	r1, r1, #22
    f870:	4b17      	ldr	r3, [pc, #92]	; (f8d0 <tmr_init+0x110>)
    f872:	4798      	blx	r3
    f874:	2800      	cmp	r0, #0
    f876:	d005      	beq.n	f884 <tmr_init+0xc4>
	{
		timer_multiplier += 1.0f;
    f878:	21fe      	movs	r1, #254	; 0xfe
    f87a:	0589      	lsls	r1, r1, #22
    f87c:	1c20      	adds	r0, r4, #0
    f87e:	4b15      	ldr	r3, [pc, #84]	; (f8d4 <tmr_init+0x114>)
    f880:	4798      	blx	r3
    f882:	1c04      	adds	r4, r0, #0
	}
	
	return (uint8_t) timer_multiplier;
    f884:	1c20      	adds	r0, r4, #0
    f886:	4b10      	ldr	r3, [pc, #64]	; (f8c8 <tmr_init+0x108>)
    f888:	4798      	blx	r3
    f88a:	b2c0      	uxtb	r0, r0
}
    f88c:	bd70      	pop	{r4, r5, r6, pc}
    f88e:	46c0      	nop			; (mov r8, r8)
    f890:	200029dc 	.word	0x200029dc
    f894:	20002a14 	.word	0x20002a14
    f898:	42002000 	.word	0x42002000
    f89c:	00007559 	.word	0x00007559
    f8a0:	0000f6c5 	.word	0x0000f6c5
    f8a4:	00007435 	.word	0x00007435
    f8a8:	0000f6b9 	.word	0x0000f6b9
    f8ac:	0000751d 	.word	0x0000751d
    f8b0:	000201d0 	.word	0x000201d0
    f8b4:	e000e100 	.word	0xe000e100
    f8b8:	000071cd 	.word	0x000071cd
    f8bc:	00017a1d 	.word	0x00017a1d
    f8c0:	49742400 	.word	0x49742400
    f8c4:	00016fe5 	.word	0x00016fe5
    f8c8:	00016a95 	.word	0x00016a95
    f8cc:	00017605 	.word	0x00017605
    f8d0:	000169ed 	.word	0x000169ed
    f8d4:	00016cc1 	.word	0x00016cc1

0000f8d8 <nvm_read>:
 * \internal Pointer to the NVM MEMORY region start address
 */
#define NVM_MEMORY        ((volatile uint16_t *)FLASH_ADDR)
status_code_t nvm_read(mem_type_t mem, uint32_t address, void *buffer,
		uint32_t len)
{
    f8d8:	b570      	push	{r4, r5, r6, lr}

status_code_t nvm_sam0_read(mem_type_t mem, uint32_t address,
		uint8_t *const buffer,
		uint32_t len)
{
	switch (mem) {
    f8da:	2800      	cmp	r0, #0
    f8dc:	d122      	bne.n	f924 <nvm_read+0x4c>
    f8de:	4814      	ldr	r0, [pc, #80]	; (f930 <nvm_read+0x58>)
    f8e0:	7d04      	ldrb	r4, [r0, #20]
    {
		/* Get a pointer to the module hardware instance */
		Nvmctrl *const nvm_module = NVMCTRL;
		/* Check if the module is busy */
		if (!nvm_is_ready()) {
			return STATUS_BUSY;
    f8e2:	2005      	movs	r0, #5
		if (!nvm_is_ready()) {
    f8e4:	07e4      	lsls	r4, r4, #31
    f8e6:	d400      	bmi.n	f8ea <nvm_read+0x12>
}
    f8e8:	bd70      	pop	{r4, r5, r6, pc}
		}

		/* Clear error flags */
		nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
    f8ea:	2420      	movs	r4, #32
    f8ec:	34ff      	adds	r4, #255	; 0xff
    f8ee:	4810      	ldr	r0, [pc, #64]	; (f930 <nvm_read+0x58>)
    f8f0:	8304      	strh	r4, [r0, #24]
		uint32_t page_address = address / 2;

		/* NVM _must_ be accessed as a series of 16-bit words, perform
		 * manual copy
		 * to ensure alignment */
		for (uint16_t i = 0; i < len; i += 2) {
    f8f2:	2b00      	cmp	r3, #0
    f8f4:	d019      	beq.n	f92a <nvm_read+0x52>
    f8f6:	2001      	movs	r0, #1
    f8f8:	4381      	bics	r1, r0
    f8fa:	2000      	movs	r0, #0
    f8fc:	2500      	movs	r5, #0
			buffer[i] = (data & 0xFF);

			/* If we are not at the end of a read request with an
			 * odd byte count,
			 * store the next byte of data as well */
			if (i < (len - 1)) {
    f8fe:	1e5e      	subs	r6, r3, #1
    f900:	e005      	b.n	f90e <nvm_read+0x36>
		for (uint16_t i = 0; i < len; i += 2) {
    f902:	3002      	adds	r0, #2
    f904:	b280      	uxth	r0, r0
    f906:	0005      	movs	r5, r0
    f908:	3102      	adds	r1, #2
    f90a:	4283      	cmp	r3, r0
    f90c:	d908      	bls.n	f920 <nvm_read+0x48>
			uint16_t data = NVM_MEMORY[page_address++];
    f90e:	880c      	ldrh	r4, [r1, #0]
    f910:	b2a4      	uxth	r4, r4
			buffer[i] = (data & 0xFF);
    f912:	5554      	strb	r4, [r2, r5]
			if (i < (len - 1)) {
    f914:	42ae      	cmp	r6, r5
    f916:	d9f4      	bls.n	f902 <nvm_read+0x2a>
				buffer[i + 1] = (data >> 8);
    f918:	1955      	adds	r5, r2, r5
    f91a:	0a24      	lsrs	r4, r4, #8
    f91c:	706c      	strb	r4, [r5, #1]
    f91e:	e7f0      	b.n	f902 <nvm_read+0x2a>

	default:
		return ERR_INVALID_ARG;
	}

	return STATUS_OK;
    f920:	2000      	movs	r0, #0
    f922:	e7e1      	b.n	f8e8 <nvm_read+0x10>
		return ERR_INVALID_ARG;
    f924:	2008      	movs	r0, #8
    f926:	4240      	negs	r0, r0
    f928:	e7de      	b.n	f8e8 <nvm_read+0x10>
	return STATUS_OK;
    f92a:	2000      	movs	r0, #0
    f92c:	e7dc      	b.n	f8e8 <nvm_read+0x10>
    f92e:	46c0      	nop			; (mov r8, r8)
    f930:	41004000 	.word	0x41004000

0000f934 <nvm_write>:
	return error_code;
}

status_code_t nvm_write(mem_type_t mem, uint32_t address, void *buffer,
		uint32_t len)
{
    f934:	b5f0      	push	{r4, r5, r6, r7, lr}
    f936:	46de      	mov	lr, fp
    f938:	4657      	mov	r7, sl
    f93a:	464e      	mov	r6, r9
    f93c:	4645      	mov	r5, r8
    f93e:	b5e0      	push	{r5, r6, r7, lr}
    f940:	b0c5      	sub	sp, #276	; 0x114
	switch (mem) {
    f942:	2800      	cmp	r0, #0
    f944:	d168      	bne.n	fa18 <nvm_write+0xe4>
	case INT_FLASH:

		if (STATUS_OK != nvm_memcpy(address, buffer, len, true))
    f946:	b29b      	uxth	r3, r3
    f948:	469a      	mov	sl, r3
	volatile uint8_t *dest_add = (uint8_t *)destination_address;
    f94a:	4688      	mov	r8, r1
	uint32_t row_start_address
    f94c:	23ff      	movs	r3, #255	; 0xff
    f94e:	4399      	bics	r1, r3
    f950:	9100      	str	r1, [sp, #0]
	while (length) {
    f952:	4653      	mov	r3, sl
    f954:	2b00      	cmp	r3, #0
    f956:	d06b      	beq.n	fa30 <nvm_write+0xfc>
    f958:	ab04      	add	r3, sp, #16
    f95a:	1a5b      	subs	r3, r3, r1
    f95c:	9302      	str	r3, [sp, #8]
				error_code = nvm_read_buffer(
    f95e:	4e35      	ldr	r6, [pc, #212]	; (fa34 <nvm_write+0x100>)
				error_code = nvm_erase_row(row_start_address);
    f960:	4b35      	ldr	r3, [pc, #212]	; (fa38 <nvm_write+0x104>)
    f962:	469b      	mov	fp, r3
    f964:	9203      	str	r2, [sp, #12]
    f966:	e03a      	b.n	f9de <nvm_write+0xaa>
				(FLASH_PAGE_SIZE * NVMCTRL_ROW_PAGES); i++) {
    f968:	3301      	adds	r3, #1
		for (i = row_start_address;
    f96a:	42bb      	cmp	r3, r7
    f96c:	d20e      	bcs.n	f98c <nvm_write+0x58>
			if (length && ((uint8_t *)i == dest_add)) {
    f96e:	2a00      	cmp	r2, #0
    f970:	d0fa      	beq.n	f968 <nvm_write+0x34>
    f972:	4299      	cmp	r1, r3
    f974:	d1f8      	bne.n	f968 <nvm_write+0x34>
				row_buffer[i - row_start_address] = *src_buf++;
    f976:	9d03      	ldr	r5, [sp, #12]
    f978:	7828      	ldrb	r0, [r5, #0]
    f97a:	9c02      	ldr	r4, [sp, #8]
    f97c:	54e0      	strb	r0, [r4, r3]
				dest_add++;
    f97e:	3101      	adds	r1, #1
				length--;
    f980:	3a01      	subs	r2, #1
    f982:	b292      	uxth	r2, r2
				row_buffer[i - row_start_address] = *src_buf++;
    f984:	0028      	movs	r0, r5
    f986:	3001      	adds	r0, #1
    f988:	9003      	str	r0, [sp, #12]
    f98a:	e7ed      	b.n	f968 <nvm_write+0x34>
    f98c:	4692      	mov	sl, r2
    f98e:	4688      	mov	r8, r1
    f990:	9c01      	ldr	r4, [sp, #4]
	cpu_irq_enter_critical();
    f992:	4b2a      	ldr	r3, [pc, #168]	; (fa3c <nvm_write+0x108>)
    f994:	4798      	blx	r3
				error_code = nvm_erase_row(row_start_address);
    f996:	9800      	ldr	r0, [sp, #0]
    f998:	47d8      	blx	fp
			} while (error_code == STATUS_BUSY);
    f99a:	2805      	cmp	r0, #5
    f99c:	d0fb      	beq.n	f996 <nvm_write+0x62>
			if (error_code != STATUS_OK) {
    f99e:	2800      	cmp	r0, #0
    f9a0:	d13d      	bne.n	fa1e <nvm_write+0xea>
    f9a2:	9d00      	ldr	r5, [sp, #0]
				error_code = nvm_write_buffer(
    f9a4:	4f26      	ldr	r7, [pc, #152]	; (fa40 <nvm_write+0x10c>)
    f9a6:	9401      	str	r4, [sp, #4]
    f9a8:	9b00      	ldr	r3, [sp, #0]
    f9aa:	1aec      	subs	r4, r5, r3
    f9ac:	ab04      	add	r3, sp, #16
    f9ae:	469c      	mov	ip, r3
    f9b0:	4464      	add	r4, ip
    f9b2:	2240      	movs	r2, #64	; 0x40
    f9b4:	0021      	movs	r1, r4
    f9b6:	0028      	movs	r0, r5
    f9b8:	47b8      	blx	r7
			} while (error_code == STATUS_BUSY);
    f9ba:	2805      	cmp	r0, #5
    f9bc:	d0f9      	beq.n	f9b2 <nvm_write+0x7e>
			if (error_code != STATUS_OK) {
    f9be:	2800      	cmp	r0, #0
    f9c0:	d12d      	bne.n	fa1e <nvm_write+0xea>
    f9c2:	3540      	adds	r5, #64	; 0x40
		for (i = 0; i < NVMCTRL_ROW_PAGES; i++) {
    f9c4:	9b01      	ldr	r3, [sp, #4]
    f9c6:	42ab      	cmp	r3, r5
    f9c8:	d1ee      	bne.n	f9a8 <nvm_write+0x74>
	cpu_irq_leave_critical();
    f9ca:	4b1e      	ldr	r3, [pc, #120]	; (fa44 <nvm_write+0x110>)
    f9cc:	4798      	blx	r3
    f9ce:	9b02      	ldr	r3, [sp, #8]
    f9d0:	3b01      	subs	r3, #1
    f9d2:	3bff      	subs	r3, #255	; 0xff
    f9d4:	9302      	str	r3, [sp, #8]
    f9d6:	9500      	str	r5, [sp, #0]
	while (length) {
    f9d8:	4653      	mov	r3, sl
    f9da:	2b00      	cmp	r3, #0
    f9dc:	d028      	beq.n	fa30 <nvm_write+0xfc>
    f9de:	9b00      	ldr	r3, [sp, #0]
    f9e0:	1c5f      	adds	r7, r3, #1
    f9e2:	37ff      	adds	r7, #255	; 0xff
{
    f9e4:	001c      	movs	r4, r3
    f9e6:	46b9      	mov	r9, r7
    f9e8:	001f      	movs	r7, r3
    f9ea:	1be5      	subs	r5, r4, r7
    f9ec:	ab04      	add	r3, sp, #16
    f9ee:	469c      	mov	ip, r3
    f9f0:	4465      	add	r5, ip
				error_code = nvm_read_buffer(
    f9f2:	2240      	movs	r2, #64	; 0x40
    f9f4:	0029      	movs	r1, r5
    f9f6:	0020      	movs	r0, r4
    f9f8:	47b0      	blx	r6
			} while (error_code == STATUS_BUSY);
    f9fa:	2805      	cmp	r0, #5
    f9fc:	d0f9      	beq.n	f9f2 <nvm_write+0xbe>
			if (error_code != STATUS_OK) {
    f9fe:	2800      	cmp	r0, #0
    fa00:	d10d      	bne.n	fa1e <nvm_write+0xea>
    fa02:	3440      	adds	r4, #64	; 0x40
		for (i = 0; i < NVMCTRL_ROW_PAGES; i++) {
    fa04:	454c      	cmp	r4, r9
    fa06:	d1f0      	bne.n	f9ea <nvm_write+0xb6>
    fa08:	464f      	mov	r7, r9
		for (i = row_start_address;
    fa0a:	9b00      	ldr	r3, [sp, #0]
    fa0c:	429f      	cmp	r7, r3
    fa0e:	d9c0      	bls.n	f992 <nvm_write+0x5e>
    fa10:	4652      	mov	r2, sl
    fa12:	4641      	mov	r1, r8
    fa14:	9401      	str	r4, [sp, #4]
    fa16:	e7aa      	b.n	f96e <nvm_write+0x3a>
			return ERR_INVALID_ARG;
		}
		break;

	default:
		return ERR_INVALID_ARG;
    fa18:	2008      	movs	r0, #8
    fa1a:	4240      	negs	r0, r0
    fa1c:	e001      	b.n	fa22 <nvm_write+0xee>
			return ERR_INVALID_ARG;
    fa1e:	2008      	movs	r0, #8
    fa20:	4240      	negs	r0, r0
	}

	return STATUS_OK;
}
    fa22:	b045      	add	sp, #276	; 0x114
    fa24:	bc3c      	pop	{r2, r3, r4, r5}
    fa26:	4690      	mov	r8, r2
    fa28:	4699      	mov	r9, r3
    fa2a:	46a2      	mov	sl, r4
    fa2c:	46ab      	mov	fp, r5
    fa2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return STATUS_OK;
    fa30:	2000      	movs	r0, #0
    fa32:	e7f6      	b.n	fa22 <nvm_write+0xee>
    fa34:	00004d91 	.word	0x00004d91
    fa38:	00004e11 	.word	0x00004e11
    fa3c:	000045e9 	.word	0x000045e9
    fa40:	00004cb9 	.word	0x00004cb9
    fa44:	00004629 	.word	0x00004629

0000fa48 <nvm_init>:

status_code_t nvm_init(mem_type_t mem)
{
    fa48:	b500      	push	{lr}
    fa4a:	b083      	sub	sp, #12
	if (INT_FLASH == mem) {
    fa4c:	2800      	cmp	r0, #0
    fa4e:	d110      	bne.n	fa72 <nvm_init+0x2a>
	config->sleep_power_mode  = NVM_SLEEP_POWER_MODE_WAKEONACCESS;
    fa50:	2300      	movs	r3, #0
    fa52:	466a      	mov	r2, sp
    fa54:	7013      	strb	r3, [r2, #0]
	config->wait_states       = NVMCTRL->CTRLB.bit.RWS;
    fa56:	4a08      	ldr	r2, [pc, #32]	; (fa78 <nvm_init+0x30>)
    fa58:	6852      	ldr	r2, [r2, #4]
	config->disable_cache     = false;
    fa5a:	466a      	mov	r2, sp
    fa5c:	70d3      	strb	r3, [r2, #3]
	config->cache_readmode    = NVM_CACHE_READMODE_NO_MISS_PENALTY;
    fa5e:	7113      	strb	r3, [r2, #4]
		struct nvm_config config;
		/* Get the default configuration */
		nvm_get_config_defaults(&config);

		/* Enable automatic page write mode */
		config.manual_page_write = false;
    fa60:	7053      	strb	r3, [r2, #1]

		/* Set wait state to 1 */
		config.wait_states = 2;
    fa62:	3302      	adds	r3, #2
    fa64:	7093      	strb	r3, [r2, #2]

		/* Set the NVM configuration */
		nvm_set_config(&config);
    fa66:	4668      	mov	r0, sp
    fa68:	4b04      	ldr	r3, [pc, #16]	; (fa7c <nvm_init+0x34>)
    fa6a:	4798      	blx	r3

		return STATUS_OK;
    fa6c:	2000      	movs	r0, #0
	}

	return ERR_INVALID_ARG;
}
    fa6e:	b003      	add	sp, #12
    fa70:	bd00      	pop	{pc}
	return ERR_INVALID_ARG;
    fa72:	2008      	movs	r0, #8
    fa74:	4240      	negs	r0, r0
    fa76:	e7fa      	b.n	fa6e <nvm_init+0x26>
    fa78:	41004000 	.word	0x41004000
    fa7c:	00004b51 	.word	0x00004b51

0000fa80 <main>:
 * \section preface Preface
 * This is the reference manual for the LORAWAN Parser Application of EU Band
 */

int main(void)
{
    fa80:	b570      	push	{r4, r5, r6, lr}
	system_init();
    fa82:	4b30      	ldr	r3, [pc, #192]	; (fb44 <main+0xc4>)
    fa84:	4798      	blx	r3
	delay_init();
    fa86:	4b30      	ldr	r3, [pc, #192]	; (fb48 <main+0xc8>)
    fa88:	4798      	blx	r3
	board_init();
    fa8a:	4b30      	ldr	r3, [pc, #192]	; (fb4c <main+0xcc>)
    fa8c:	4798      	blx	r3
	INTERRUPT_GlobalInterruptEnable();
    fa8e:	2201      	movs	r2, #1
    fa90:	4b2f      	ldr	r3, [pc, #188]	; (fb50 <main+0xd0>)
    fa92:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
    fa94:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    fa98:	b662      	cpsie	i
	sio2host_init();
    fa9a:	4b2e      	ldr	r3, [pc, #184]	; (fb54 <main+0xd4>)
    fa9c:	4798      	blx	r3
 *
 * \return An enum value indicating the cause of the last system reset.
 */
static inline enum system_reset_cause system_get_reset_cause(void)
{
	return (enum system_reset_cause)RSTC->RCAUSE.reg;
    fa9e:	4b2e      	ldr	r3, [pc, #184]	; (fb58 <main+0xd8>)
    faa0:	781c      	ldrb	r4, [r3, #0]
    faa2:	b2e4      	uxtb	r4, r4
	printf("\r\nLast reset cause: ");
    faa4:	482d      	ldr	r0, [pc, #180]	; (fb5c <main+0xdc>)
    faa6:	4b2e      	ldr	r3, [pc, #184]	; (fb60 <main+0xe0>)
    faa8:	4798      	blx	r3
	if(rcause & (1 << 6)) {
    faaa:	0663      	lsls	r3, r4, #25
    faac:	d432      	bmi.n	fb14 <main+0x94>
	if(rcause & (1 << 5)) {
    faae:	06a3      	lsls	r3, r4, #26
    fab0:	d434      	bmi.n	fb1c <main+0x9c>
	if(rcause & (1 << 4)) {
    fab2:	06e3      	lsls	r3, r4, #27
    fab4:	d436      	bmi.n	fb24 <main+0xa4>
	if(rcause & (1 << 2)) {
    fab6:	0763      	lsls	r3, r4, #29
    fab8:	d438      	bmi.n	fb2c <main+0xac>
	if(rcause & (1 << 1)) {
    faba:	07a3      	lsls	r3, r4, #30
    fabc:	d43a      	bmi.n	fb34 <main+0xb4>
	if(rcause & (1 << 0)) {
    fabe:	07e3      	lsls	r3, r4, #31
    fac0:	d43c      	bmi.n	fb3c <main+0xbc>
#if (_DEBUG_ == 1)
	SYSTEM_AssertSubscribe(assertHandler);
#endif

	/* Configure board button as external interrupt pin */
	configure_extint();	
    fac2:	4b28      	ldr	r3, [pc, #160]	; (fb64 <main+0xe4>)
    fac4:	4798      	blx	r3
	/* Register External Interrupt callback */
	configure_eic_callback();
    fac6:	4b28      	ldr	r3, [pc, #160]	; (fb68 <main+0xe8>)
    fac8:	4798      	blx	r3
	printf("LoRaWAN Stack UP\r\n");
    faca:	4828      	ldr	r0, [pc, #160]	; (fb6c <main+0xec>)
    facc:	4b28      	ldr	r3, [pc, #160]	; (fb70 <main+0xf0>)
    face:	4798      	blx	r3
	HAL_RadioInit();
    fad0:	4b28      	ldr	r3, [pc, #160]	; (fb74 <main+0xf4>)
    fad2:	4798      	blx	r3
	// Initialize AES only (crypto is on-demand)
	SAL_Init(false) ;
    fad4:	2000      	movs	r0, #0
    fad6:	4b28      	ldr	r3, [pc, #160]	; (fb78 <main+0xf8>)
    fad8:	4798      	blx	r3
	// Initialize Timers
	SystemTimerInit();
    fada:	4b28      	ldr	r3, [pc, #160]	; (fb7c <main+0xfc>)
    fadc:	4798      	blx	r3
#ifdef CONF_PMM_ENABLE
	SleepTimerInit();
    fade:	4b28      	ldr	r3, [pc, #160]	; (fb80 <main+0x100>)
    fae0:	4798      	blx	r3
#endif /* CONF_PMM_ENABLE */

#if (ENABLE_PDS == 1)	
 	PDS_Init();
    fae2:	4b28      	ldr	r3, [pc, #160]	; (fb84 <main+0x104>)
    fae4:	4798      	blx	r3
#endif	
	Stack_Init();
    fae6:	4b28      	ldr	r3, [pc, #160]	; (fb88 <main+0x108>)
    fae8:	4798      	blx	r3
	Parser_Init();
    faea:	4b28      	ldr	r3, [pc, #160]	; (fb8c <main+0x10c>)
    faec:	4798      	blx	r3
    Parser_SetConfiguredJoinParameters(0x01);
    faee:	2001      	movs	r0, #1
    faf0:	4b27      	ldr	r3, [pc, #156]	; (fb90 <main+0x110>)
    faf2:	4798      	blx	r3
    Parser_GetSwVersion(aParserData);
    faf4:	4c27      	ldr	r4, [pc, #156]	; (fb94 <main+0x114>)
    faf6:	0020      	movs	r0, r4
    faf8:	4b27      	ldr	r3, [pc, #156]	; (fb98 <main+0x118>)
    fafa:	4798      	blx	r3
    Parser_TxAddReply((char *)aParserData, (uint16_t)strlen((char *)aParserData));
    fafc:	0020      	movs	r0, r4
    fafe:	4b27      	ldr	r3, [pc, #156]	; (fb9c <main+0x11c>)
    fb00:	4798      	blx	r3
    fb02:	b281      	uxth	r1, r0
    fb04:	0020      	movs	r0, r4
    fb06:	4b26      	ldr	r3, [pc, #152]	; (fba0 <main+0x120>)
    fb08:	4798      	blx	r3
	//port_pin_set_output_level(LED_1_PIN, LED_1_INACTIVE);
	*/
	
    while (1)
    {
		parser_serial_data_handler();
    fb0a:	4d26      	ldr	r5, [pc, #152]	; (fba4 <main+0x124>)
		SYSTEM_RunTasks();
    fb0c:	4c26      	ldr	r4, [pc, #152]	; (fba8 <main+0x128>)
		parser_serial_data_handler();
    fb0e:	47a8      	blx	r5
		SYSTEM_RunTasks();
    fb10:	47a0      	blx	r4
    fb12:	e7fc      	b.n	fb0e <main+0x8e>
		printf("System Reset Request\r\n");
    fb14:	4825      	ldr	r0, [pc, #148]	; (fbac <main+0x12c>)
    fb16:	4b16      	ldr	r3, [pc, #88]	; (fb70 <main+0xf0>)
    fb18:	4798      	blx	r3
    fb1a:	e7c8      	b.n	faae <main+0x2e>
		printf("Watchdog Reset\r\n");
    fb1c:	4824      	ldr	r0, [pc, #144]	; (fbb0 <main+0x130>)
    fb1e:	4b14      	ldr	r3, [pc, #80]	; (fb70 <main+0xf0>)
    fb20:	4798      	blx	r3
    fb22:	e7c6      	b.n	fab2 <main+0x32>
		printf("External Reset\r\n");
    fb24:	4823      	ldr	r0, [pc, #140]	; (fbb4 <main+0x134>)
    fb26:	4b12      	ldr	r3, [pc, #72]	; (fb70 <main+0xf0>)
    fb28:	4798      	blx	r3
    fb2a:	e7c4      	b.n	fab6 <main+0x36>
		printf("Brown Out 33 Detector Reset\r\n");
    fb2c:	4822      	ldr	r0, [pc, #136]	; (fbb8 <main+0x138>)
    fb2e:	4b10      	ldr	r3, [pc, #64]	; (fb70 <main+0xf0>)
    fb30:	4798      	blx	r3
    fb32:	e7c2      	b.n	faba <main+0x3a>
		printf("Brown Out 12 Detector Reset\r\n");
    fb34:	4821      	ldr	r0, [pc, #132]	; (fbbc <main+0x13c>)
    fb36:	4b0e      	ldr	r3, [pc, #56]	; (fb70 <main+0xf0>)
    fb38:	4798      	blx	r3
    fb3a:	e7c0      	b.n	fabe <main+0x3e>
		printf("Power-On Reset\r\n");
    fb3c:	4820      	ldr	r0, [pc, #128]	; (fbc0 <main+0x140>)
    fb3e:	4b0c      	ldr	r3, [pc, #48]	; (fb70 <main+0xf0>)
    fb40:	4798      	blx	r3
    fb42:	e7be      	b.n	fac2 <main+0x42>
    fb44:	00007409 	.word	0x00007409
    fb48:	00004551 	.word	0x00004551
    fb4c:	00004659 	.word	0x00004659
    fb50:	20000014 	.word	0x20000014
    fb54:	00007b21 	.word	0x00007b21
    fb58:	40000800 	.word	0x40000800
    fb5c:	000201d8 	.word	0x000201d8
    fb60:	00019f61 	.word	0x00019f61
    fb64:	00003f49 	.word	0x00003f49
    fb68:	00003f79 	.word	0x00003f79
    fb6c:	00020278 	.word	0x00020278
    fb70:	0001a025 	.word	0x0001a025
    fb74:	00007ec9 	.word	0x00007ec9
    fb78:	0000dbed 	.word	0x0000dbed
    fb7c:	0000ed71 	.word	0x0000ed71
    fb80:	000082b5 	.word	0x000082b5
    fb84:	0000e0c5 	.word	0x0000e0c5
    fb88:	0000f425 	.word	0x0000f425
    fb8c:	00001bc9 	.word	0x00001bc9
    fb90:	000022a1 	.word	0x000022a1
    fb94:	2000116c 	.word	0x2000116c
    fb98:	00001ef1 	.word	0x00001ef1
    fb9c:	0001a2e1 	.word	0x0001a2e1
    fba0:	00003fe9 	.word	0x00003fe9
    fba4:	00001ba5 	.word	0x00001ba5
    fba8:	0000f435 	.word	0x0000f435
    fbac:	000201f0 	.word	0x000201f0
    fbb0:	00020208 	.word	0x00020208
    fbb4:	00020218 	.word	0x00020218
    fbb8:	00020228 	.word	0x00020228
    fbbc:	00020248 	.word	0x00020248
    fbc0:	00020268 	.word	0x00020268

0000fbc4 <APP_TaskHandler>:
    }
}

SYSTEM_TaskStatus_t APP_TaskHandler(void)
{
    fbc4:	b510      	push	{r4, lr}
	Parser_Main();
    fbc6:	4b02      	ldr	r3, [pc, #8]	; (fbd0 <APP_TaskHandler+0xc>)
    fbc8:	4798      	blx	r3
	return SYSTEM_TASK_SUCCESS;
}
    fbca:	2000      	movs	r0, #0
    fbcc:	bd10      	pop	{r4, pc}
    fbce:	46c0      	nop			; (mov r8, r8)
    fbd0:	00001c05 	.word	0x00001c05

0000fbd4 <common_tc_read_count>:
    fbd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    fbd6:	4b0d      	ldr	r3, [pc, #52]	; (fc0c <common_tc_read_count+0x38>)
    fbd8:	4798      	blx	r3
    fbda:	4b0d      	ldr	r3, [pc, #52]	; (fc10 <common_tc_read_count+0x3c>)
    fbdc:	781b      	ldrb	r3, [r3, #0]
    fbde:	2b00      	cmp	r3, #0
    fbe0:	d00e      	beq.n	fc00 <common_tc_read_count+0x2c>
    fbe2:	4b0c      	ldr	r3, [pc, #48]	; (fc14 <common_tc_read_count+0x40>)
    fbe4:	781d      	ldrb	r5, [r3, #0]
    fbe6:	4b0a      	ldr	r3, [pc, #40]	; (fc10 <common_tc_read_count+0x3c>)
    fbe8:	781f      	ldrb	r7, [r3, #0]
    fbea:	4c0b      	ldr	r4, [pc, #44]	; (fc18 <common_tc_read_count+0x44>)
    fbec:	1c29      	adds	r1, r5, #0
    fbee:	47a0      	blx	r4
    fbf0:	1c06      	adds	r6, r0, #0
    fbf2:	480a      	ldr	r0, [pc, #40]	; (fc1c <common_tc_read_count+0x48>)
    fbf4:	1c29      	adds	r1, r5, #0
    fbf6:	47a0      	blx	r4
    fbf8:	4378      	muls	r0, r7
    fbfa:	1830      	adds	r0, r6, r0
    fbfc:	b280      	uxth	r0, r0
    fbfe:	e004      	b.n	fc0a <common_tc_read_count+0x36>
    fc00:	4b04      	ldr	r3, [pc, #16]	; (fc14 <common_tc_read_count+0x40>)
    fc02:	7819      	ldrb	r1, [r3, #0]
    fc04:	4b04      	ldr	r3, [pc, #16]	; (fc18 <common_tc_read_count+0x44>)
    fc06:	4798      	blx	r3
    fc08:	b280      	uxth	r0, r0
    fc0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    fc0c:	0000f6d1 	.word	0x0000f6d1
    fc10:	200010fc 	.word	0x200010fc
    fc14:	20002a30 	.word	0x20002a30
    fc18:	00016739 	.word	0x00016739
    fc1c:	0000ffff 	.word	0x0000ffff

0000fc20 <common_tc_compare_stop>:
    fc20:	b508      	push	{r3, lr}
    fc22:	4b05      	ldr	r3, [pc, #20]	; (fc38 <common_tc_compare_stop+0x18>)
    fc24:	4798      	blx	r3
    fc26:	4b05      	ldr	r3, [pc, #20]	; (fc3c <common_tc_compare_stop+0x1c>)
    fc28:	4798      	blx	r3
    fc2a:	4b05      	ldr	r3, [pc, #20]	; (fc40 <common_tc_compare_stop+0x20>)
    fc2c:	2200      	movs	r2, #0
    fc2e:	605a      	str	r2, [r3, #4]
    fc30:	811a      	strh	r2, [r3, #8]
    fc32:	4b04      	ldr	r3, [pc, #16]	; (fc44 <common_tc_compare_stop+0x24>)
    fc34:	4798      	blx	r3
    fc36:	bd08      	pop	{r3, pc}
    fc38:	0000f6e5 	.word	0x0000f6e5
    fc3c:	0000f785 	.word	0x0000f785
    fc40:	200010fc 	.word	0x200010fc
    fc44:	0000f7a9 	.word	0x0000f7a9

0000fc48 <common_tc_overflow_stop>:
    fc48:	b508      	push	{r3, lr}
    fc4a:	4b03      	ldr	r3, [pc, #12]	; (fc58 <common_tc_overflow_stop+0x10>)
    fc4c:	4798      	blx	r3
    fc4e:	2200      	movs	r2, #0
    fc50:	4b02      	ldr	r3, [pc, #8]	; (fc5c <common_tc_overflow_stop+0x14>)
    fc52:	701a      	strb	r2, [r3, #0]
    fc54:	bd08      	pop	{r3, pc}
    fc56:	46c0      	nop			; (mov r8, r8)
    fc58:	0000f739 	.word	0x0000f739
    fc5c:	200010fc 	.word	0x200010fc

0000fc60 <common_tc_stop>:
    fc60:	b508      	push	{r3, lr}
    fc62:	4b03      	ldr	r3, [pc, #12]	; (fc70 <common_tc_stop+0x10>)
    fc64:	4798      	blx	r3
    fc66:	4b03      	ldr	r3, [pc, #12]	; (fc74 <common_tc_stop+0x14>)
    fc68:	4798      	blx	r3
    fc6a:	4b03      	ldr	r3, [pc, #12]	; (fc78 <common_tc_stop+0x18>)
    fc6c:	4798      	blx	r3
    fc6e:	bd08      	pop	{r3, pc}
    fc70:	0000fc21 	.word	0x0000fc21
    fc74:	0000fc49 	.word	0x0000fc49
    fc78:	0000f74d 	.word	0x0000f74d

0000fc7c <common_tc_delay>:
    fc7c:	b510      	push	{r4, lr}
    fc7e:	1c04      	adds	r4, r0, #0
    fc80:	4b13      	ldr	r3, [pc, #76]	; (fcd0 <common_tc_delay+0x54>)
    fc82:	4798      	blx	r3
    fc84:	4b13      	ldr	r3, [pc, #76]	; (fcd4 <common_tc_delay+0x58>)
    fc86:	781a      	ldrb	r2, [r3, #0]
    fc88:	4362      	muls	r2, r4
    fc8a:	1881      	adds	r1, r0, r2
    fc8c:	4b12      	ldr	r3, [pc, #72]	; (fcd8 <common_tc_delay+0x5c>)
    fc8e:	6059      	str	r1, [r3, #4]
    fc90:	6859      	ldr	r1, [r3, #4]
    fc92:	0c09      	lsrs	r1, r1, #16
    fc94:	6059      	str	r1, [r3, #4]
    fc96:	685b      	ldr	r3, [r3, #4]
    fc98:	2b00      	cmp	r3, #0
    fc9a:	d007      	beq.n	fcac <common_tc_delay+0x30>
    fc9c:	4b0e      	ldr	r3, [pc, #56]	; (fcd8 <common_tc_delay+0x5c>)
    fc9e:	6859      	ldr	r1, [r3, #4]
    fca0:	3201      	adds	r2, #1
    fca2:	1880      	adds	r0, r0, r2
    fca4:	8118      	strh	r0, [r3, #8]
    fca6:	4b0d      	ldr	r3, [pc, #52]	; (fcdc <common_tc_delay+0x60>)
    fca8:	4798      	blx	r3
    fcaa:	e004      	b.n	fcb6 <common_tc_delay+0x3a>
    fcac:	1882      	adds	r2, r0, r2
    fcae:	4b0a      	ldr	r3, [pc, #40]	; (fcd8 <common_tc_delay+0x5c>)
    fcb0:	811a      	strh	r2, [r3, #8]
    fcb2:	4b0b      	ldr	r3, [pc, #44]	; (fce0 <common_tc_delay+0x64>)
    fcb4:	4798      	blx	r3
    fcb6:	4b08      	ldr	r3, [pc, #32]	; (fcd8 <common_tc_delay+0x5c>)
    fcb8:	891b      	ldrh	r3, [r3, #8]
    fcba:	2b63      	cmp	r3, #99	; 0x63
    fcbc:	d802      	bhi.n	fcc4 <common_tc_delay+0x48>
    fcbe:	3364      	adds	r3, #100	; 0x64
    fcc0:	4a05      	ldr	r2, [pc, #20]	; (fcd8 <common_tc_delay+0x5c>)
    fcc2:	8113      	strh	r3, [r2, #8]
    fcc4:	4b04      	ldr	r3, [pc, #16]	; (fcd8 <common_tc_delay+0x5c>)
    fcc6:	8918      	ldrh	r0, [r3, #8]
    fcc8:	4b06      	ldr	r3, [pc, #24]	; (fce4 <common_tc_delay+0x68>)
    fcca:	4798      	blx	r3
    fccc:	bd10      	pop	{r4, pc}
    fcce:	46c0      	nop			; (mov r8, r8)
    fcd0:	0000f6d1 	.word	0x0000f6d1
    fcd4:	20002a30 	.word	0x20002a30
    fcd8:	200010fc 	.word	0x200010fc
    fcdc:	0000f6e5 	.word	0x0000f6e5
    fce0:	0000f6f9 	.word	0x0000f6f9
    fce4:	0000f76d 	.word	0x0000f76d

0000fce8 <common_tc_init>:
    fce8:	b508      	push	{r3, lr}
    fcea:	2200      	movs	r2, #0
    fcec:	4b03      	ldr	r3, [pc, #12]	; (fcfc <common_tc_init+0x14>)
    fcee:	701a      	strb	r2, [r3, #0]
    fcf0:	4b03      	ldr	r3, [pc, #12]	; (fd00 <common_tc_init+0x18>)
    fcf2:	4798      	blx	r3
    fcf4:	4b03      	ldr	r3, [pc, #12]	; (fd04 <common_tc_init+0x1c>)
    fcf6:	7018      	strb	r0, [r3, #0]
    fcf8:	bd08      	pop	{r3, pc}
    fcfa:	46c0      	nop			; (mov r8, r8)
    fcfc:	200010fc 	.word	0x200010fc
    fd00:	0000f7c1 	.word	0x0000f7c1
    fd04:	20002a30 	.word	0x20002a30

0000fd08 <tmr_ovf_callback>:
    fd08:	b508      	push	{r3, lr}
    fd0a:	4b0e      	ldr	r3, [pc, #56]	; (fd44 <tmr_ovf_callback+0x3c>)
    fd0c:	685b      	ldr	r3, [r3, #4]
    fd0e:	2b00      	cmp	r3, #0
    fd10:	d007      	beq.n	fd22 <tmr_ovf_callback+0x1a>
    fd12:	4a0c      	ldr	r2, [pc, #48]	; (fd44 <tmr_ovf_callback+0x3c>)
    fd14:	6853      	ldr	r3, [r2, #4]
    fd16:	3b01      	subs	r3, #1
    fd18:	6053      	str	r3, [r2, #4]
    fd1a:	2b00      	cmp	r3, #0
    fd1c:	d101      	bne.n	fd22 <tmr_ovf_callback+0x1a>
    fd1e:	4b0a      	ldr	r3, [pc, #40]	; (fd48 <tmr_ovf_callback+0x40>)
    fd20:	4798      	blx	r3
    fd22:	4a08      	ldr	r2, [pc, #32]	; (fd44 <tmr_ovf_callback+0x3c>)
    fd24:	7813      	ldrb	r3, [r2, #0]
    fd26:	3301      	adds	r3, #1
    fd28:	b2db      	uxtb	r3, r3
    fd2a:	7013      	strb	r3, [r2, #0]
    fd2c:	4a07      	ldr	r2, [pc, #28]	; (fd4c <tmr_ovf_callback+0x44>)
    fd2e:	7812      	ldrb	r2, [r2, #0]
    fd30:	429a      	cmp	r2, r3
    fd32:	d806      	bhi.n	fd42 <tmr_ovf_callback+0x3a>
    fd34:	4b03      	ldr	r3, [pc, #12]	; (fd44 <tmr_ovf_callback+0x3c>)
    fd36:	2200      	movs	r2, #0
    fd38:	701a      	strb	r2, [r3, #0]
    fd3a:	68db      	ldr	r3, [r3, #12]
    fd3c:	2b00      	cmp	r3, #0
    fd3e:	d000      	beq.n	fd42 <tmr_ovf_callback+0x3a>
    fd40:	4798      	blx	r3
    fd42:	bd08      	pop	{r3, pc}
    fd44:	200010fc 	.word	0x200010fc
    fd48:	0000f6f9 	.word	0x0000f6f9
    fd4c:	20002a30 	.word	0x20002a30

0000fd50 <tmr_cca_callback>:
    fd50:	b508      	push	{r3, lr}
    fd52:	4b04      	ldr	r3, [pc, #16]	; (fd64 <tmr_cca_callback+0x14>)
    fd54:	4798      	blx	r3
    fd56:	4b04      	ldr	r3, [pc, #16]	; (fd68 <tmr_cca_callback+0x18>)
    fd58:	691b      	ldr	r3, [r3, #16]
    fd5a:	2b00      	cmp	r3, #0
    fd5c:	d000      	beq.n	fd60 <tmr_cca_callback+0x10>
    fd5e:	4798      	blx	r3
    fd60:	bd08      	pop	{r3, pc}
    fd62:	46c0      	nop			; (mov r8, r8)
    fd64:	0000f6e5 	.word	0x0000f6e5
    fd68:	200010fc 	.word	0x200010fc

0000fd6c <set_common_tc_overflow_callback>:
    fd6c:	4b01      	ldr	r3, [pc, #4]	; (fd74 <set_common_tc_overflow_callback+0x8>)
    fd6e:	60d8      	str	r0, [r3, #12]
    fd70:	4770      	bx	lr
    fd72:	46c0      	nop			; (mov r8, r8)
    fd74:	200010fc 	.word	0x200010fc

0000fd78 <set_common_tc_expiry_callback>:
    fd78:	4b01      	ldr	r3, [pc, #4]	; (fd80 <set_common_tc_expiry_callback+0x8>)
    fd7a:	6118      	str	r0, [r3, #16]
    fd7c:	4770      	bx	lr
    fd7e:	46c0      	nop			; (mov r8, r8)
    fd80:	200010fc 	.word	0x200010fc

0000fd84 <MacClearCommands>:
    fd84:	490e      	ldr	r1, [pc, #56]	; (fdc0 <MacClearCommands+0x3c>)
    fd86:	b570      	push	{r4, r5, r6, lr}
    fd88:	000b      	movs	r3, r1
    fd8a:	33d8      	adds	r3, #216	; 0xd8
    fd8c:	7818      	ldrb	r0, [r3, #0]
    fd8e:	2303      	movs	r3, #3
    fd90:	25a4      	movs	r5, #164	; 0xa4
    fd92:	4343      	muls	r3, r0
    fd94:	2401      	movs	r4, #1
    fd96:	20ff      	movs	r0, #255	; 0xff
    fd98:	3391      	adds	r3, #145	; 0x91
    fd9a:	4a0a      	ldr	r2, [pc, #40]	; (fdc4 <MacClearCommands+0x40>)
    fd9c:	185b      	adds	r3, r3, r1
    fd9e:	00ed      	lsls	r5, r5, #3
    fda0:	429a      	cmp	r2, r3
    fda2:	d100      	bne.n	fda6 <MacClearCommands+0x22>
    fda4:	bd70      	pop	{r4, r5, r6, pc}
    fda6:	7811      	ldrb	r1, [r2, #0]
    fda8:	29ff      	cmp	r1, #255	; 0xff
    fdaa:	d006      	beq.n	fdba <MacClearCommands+0x36>
    fdac:	290a      	cmp	r1, #10
    fdae:	d803      	bhi.n	fdb8 <MacClearCommands+0x34>
    fdb0:	0026      	movs	r6, r4
    fdb2:	408e      	lsls	r6, r1
    fdb4:	422e      	tst	r6, r5
    fdb6:	d100      	bne.n	fdba <MacClearCommands+0x36>
    fdb8:	7010      	strb	r0, [r2, #0]
    fdba:	3203      	adds	r2, #3
    fdbc:	e7f0      	b.n	fda0 <MacClearCommands+0x1c>
    fdbe:	46c0      	nop			; (mov r8, r8)
    fdc0:	20002b5c 	.word	0x20002b5c
    fdc4:	20002bed 	.word	0x20002bed

0000fdc8 <CountfOptsLength>:
    fdc8:	2200      	movs	r2, #0
    fdca:	490d      	ldr	r1, [pc, #52]	; (fe00 <CountfOptsLength+0x38>)
    fdcc:	b570      	push	{r4, r5, r6, lr}
    fdce:	000b      	movs	r3, r1
    fdd0:	0010      	movs	r0, r2
    fdd2:	2503      	movs	r5, #3
    fdd4:	33d8      	adds	r3, #216	; 0xd8
    fdd6:	781c      	ldrb	r4, [r3, #0]
    fdd8:	4e0a      	ldr	r6, [pc, #40]	; (fe04 <CountfOptsLength+0x3c>)
    fdda:	b2d3      	uxtb	r3, r2
    fddc:	429c      	cmp	r4, r3
    fdde:	d800      	bhi.n	fde2 <CountfOptsLength+0x1a>
    fde0:	bd70      	pop	{r4, r5, r6, pc}
    fde2:	002b      	movs	r3, r5
    fde4:	4353      	muls	r3, r2
    fde6:	3391      	adds	r3, #145	; 0x91
    fde8:	5ccb      	ldrb	r3, [r1, r3]
    fdea:	2bff      	cmp	r3, #255	; 0xff
    fdec:	d006      	beq.n	fdfc <CountfOptsLength+0x34>
    fdee:	18f3      	adds	r3, r6, r3
    fdf0:	3b02      	subs	r3, #2
    fdf2:	781b      	ldrb	r3, [r3, #0]
    fdf4:	18c3      	adds	r3, r0, r3
    fdf6:	2b0f      	cmp	r3, #15
    fdf8:	dcf2      	bgt.n	fde0 <CountfOptsLength+0x18>
    fdfa:	b2d8      	uxtb	r0, r3
    fdfc:	3201      	adds	r2, #1
    fdfe:	e7ec      	b.n	fdda <CountfOptsLength+0x12>
    fe00:	20002b5c 	.word	0x20002b5c
    fe04:	000202ab 	.word	0x000202ab

0000fe08 <StopAllSoftwareTimers>:
    fe08:	b570      	push	{r4, r5, r6, lr}
    fe0a:	4c17      	ldr	r4, [pc, #92]	; (fe68 <StopAllSoftwareTimers+0x60>)
    fe0c:	4d17      	ldr	r5, [pc, #92]	; (fe6c <StopAllSoftwareTimers+0x64>)
    fe0e:	0023      	movs	r3, r4
    fe10:	33e2      	adds	r3, #226	; 0xe2
    fe12:	7818      	ldrb	r0, [r3, #0]
    fe14:	47a8      	blx	r5
    fe16:	0023      	movs	r3, r4
    fe18:	33e3      	adds	r3, #227	; 0xe3
    fe1a:	7818      	ldrb	r0, [r3, #0]
    fe1c:	47a8      	blx	r5
    fe1e:	0023      	movs	r3, r4
    fe20:	33e7      	adds	r3, #231	; 0xe7
    fe22:	7818      	ldrb	r0, [r3, #0]
    fe24:	47a8      	blx	r5
    fe26:	0023      	movs	r3, r4
    fe28:	33e4      	adds	r3, #228	; 0xe4
    fe2a:	7818      	ldrb	r0, [r3, #0]
    fe2c:	47a8      	blx	r5
    fe2e:	0023      	movs	r3, r4
    fe30:	33e5      	adds	r3, #229	; 0xe5
    fe32:	7818      	ldrb	r0, [r3, #0]
    fe34:	47a8      	blx	r5
    fe36:	0023      	movs	r3, r4
    fe38:	33e8      	adds	r3, #232	; 0xe8
    fe3a:	7818      	ldrb	r0, [r3, #0]
    fe3c:	47a8      	blx	r5
    fe3e:	0023      	movs	r3, r4
    fe40:	33e6      	adds	r3, #230	; 0xe6
    fe42:	7818      	ldrb	r0, [r3, #0]
    fe44:	47a8      	blx	r5
    fe46:	0023      	movs	r3, r4
    fe48:	33e9      	adds	r3, #233	; 0xe9
    fe4a:	7818      	ldrb	r0, [r3, #0]
    fe4c:	47a8      	blx	r5
    fe4e:	0023      	movs	r3, r4
    fe50:	33f2      	adds	r3, #242	; 0xf2
    fe52:	7818      	ldrb	r0, [r3, #0]
    fe54:	47a8      	blx	r5
    fe56:	0023      	movs	r3, r4
    fe58:	33f3      	adds	r3, #243	; 0xf3
    fe5a:	7818      	ldrb	r0, [r3, #0]
    fe5c:	34ff      	adds	r4, #255	; 0xff
    fe5e:	47a8      	blx	r5
    fe60:	7f60      	ldrb	r0, [r4, #29]
    fe62:	47a8      	blx	r5
    fe64:	bd70      	pop	{r4, r5, r6, pc}
    fe66:	46c0      	nop			; (mov r8, r8)
    fe68:	20002b5c 	.word	0x20002b5c
    fe6c:	0000f125 	.word	0x0000f125

0000fe70 <LorawanGetMaxPayloadSize>:
    fe70:	b513      	push	{r0, r1, r4, lr}
    fe72:	466b      	mov	r3, sp
    fe74:	1ddc      	adds	r4, r3, #7
    fe76:	2300      	movs	r3, #0
    fe78:	0022      	movs	r2, r4
    fe7a:	7023      	strb	r3, [r4, #0]
    fe7c:	4902      	ldr	r1, [pc, #8]	; (fe88 <LorawanGetMaxPayloadSize+0x18>)
    fe7e:	4b03      	ldr	r3, [pc, #12]	; (fe8c <LorawanGetMaxPayloadSize+0x1c>)
    fe80:	2005      	movs	r0, #5
    fe82:	4798      	blx	r3
    fe84:	7820      	ldrb	r0, [r4, #0]
    fe86:	bd16      	pop	{r1, r2, r4, pc}
    fe88:	20002c3b 	.word	0x20002c3b
    fe8c:	0000d901 	.word	0x0000d901

0000fe90 <UpdateReceiveDelays>:
    fe90:	23fa      	movs	r3, #250	; 0xfa
    fe92:	b570      	push	{r4, r5, r6, lr}
    fe94:	009b      	lsls	r3, r3, #2
    fe96:	4c0b      	ldr	r4, [pc, #44]	; (fec4 <UpdateReceiveDelays+0x34>)
    fe98:	2800      	cmp	r0, #0
    fe9a:	d000      	beq.n	fe9e <UpdateReceiveDelays+0xe>
    fe9c:	4343      	muls	r3, r0
    fe9e:	0022      	movs	r2, r4
    fea0:	4d09      	ldr	r5, [pc, #36]	; (fec8 <UpdateReceiveDelays+0x38>)
    fea2:	32c8      	adds	r2, #200	; 0xc8
    fea4:	210c      	movs	r1, #12
    fea6:	2000      	movs	r0, #0
    fea8:	8013      	strh	r3, [r2, #0]
    feaa:	47a8      	blx	r5
    feac:	0023      	movs	r3, r4
    feae:	22fa      	movs	r2, #250	; 0xfa
    feb0:	33c8      	adds	r3, #200	; 0xc8
    feb2:	881b      	ldrh	r3, [r3, #0]
    feb4:	0092      	lsls	r2, r2, #2
    feb6:	189b      	adds	r3, r3, r2
    feb8:	34ca      	adds	r4, #202	; 0xca
    feba:	210d      	movs	r1, #13
    febc:	2000      	movs	r0, #0
    febe:	8023      	strh	r3, [r4, #0]
    fec0:	47a8      	blx	r5
    fec2:	bd70      	pop	{r4, r5, r6, pc}
    fec4:	20002b5c 	.word	0x20002b5c
    fec8:	0000e0dd 	.word	0x0000e0dd

0000fecc <IncludeMacCommandsResponse>:
    fecc:	b5f0      	push	{r4, r5, r6, r7, lr}
    fece:	0005      	movs	r5, r0
    fed0:	2600      	movs	r6, #0
    fed2:	b087      	sub	sp, #28
    fed4:	880c      	ldrh	r4, [r1, #0]
    fed6:	9101      	str	r1, [sp, #4]
    fed8:	9203      	str	r2, [sp, #12]
    feda:	4f77      	ldr	r7, [pc, #476]	; (100b8 <IncludeMacCommandsResponse+0x1ec>)
    fedc:	003b      	movs	r3, r7
    fede:	33d8      	adds	r3, #216	; 0xd8
    fee0:	781b      	ldrb	r3, [r3, #0]
    fee2:	42b3      	cmp	r3, r6
    fee4:	d913      	bls.n	ff0e <IncludeMacCommandsResponse+0x42>
    fee6:	9b03      	ldr	r3, [sp, #12]
    fee8:	2b00      	cmp	r3, #0
    feea:	d019      	beq.n	ff20 <IncludeMacCommandsResponse+0x54>
    feec:	2303      	movs	r3, #3
    feee:	4373      	muls	r3, r6
    fef0:	18fb      	adds	r3, r7, r3
    fef2:	3391      	adds	r3, #145	; 0x91
    fef4:	7819      	ldrb	r1, [r3, #0]
    fef6:	29ff      	cmp	r1, #255	; 0xff
    fef8:	d012      	beq.n	ff20 <IncludeMacCommandsResponse+0x54>
    fefa:	9b01      	ldr	r3, [sp, #4]
    fefc:	881a      	ldrh	r2, [r3, #0]
    fefe:	4b6f      	ldr	r3, [pc, #444]	; (100bc <IncludeMacCommandsResponse+0x1f0>)
    ff00:	1aa2      	subs	r2, r4, r2
    ff02:	185b      	adds	r3, r3, r1
    ff04:	3b02      	subs	r3, #2
    ff06:	781b      	ldrb	r3, [r3, #0]
    ff08:	18d3      	adds	r3, r2, r3
    ff0a:	2b0f      	cmp	r3, #15
    ff0c:	dd08      	ble.n	ff20 <IncludeMacCommandsResponse+0x54>
    ff0e:	2207      	movs	r2, #7
    ff10:	2100      	movs	r1, #0
    ff12:	4b6b      	ldr	r3, [pc, #428]	; (100c0 <IncludeMacCommandsResponse+0x1f4>)
    ff14:	486b      	ldr	r0, [pc, #428]	; (100c4 <IncludeMacCommandsResponse+0x1f8>)
    ff16:	4798      	blx	r3
    ff18:	9b01      	ldr	r3, [sp, #4]
    ff1a:	801c      	strh	r4, [r3, #0]
    ff1c:	b007      	add	sp, #28
    ff1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ff20:	2303      	movs	r3, #3
    ff22:	4373      	muls	r3, r6
    ff24:	18fb      	adds	r3, r7, r3
    ff26:	3391      	adds	r3, #145	; 0x91
    ff28:	781b      	ldrb	r3, [r3, #0]
    ff2a:	1e98      	subs	r0, r3, #2
    ff2c:	280b      	cmp	r0, #11
    ff2e:	d862      	bhi.n	fff6 <IncludeMacCommandsResponse+0x12a>
    ff30:	f006 fb64 	bl	165fc <__gnu_thumb1_case_uqi>
    ff34:	27a20698 	.word	0x27a20698
    ff38:	7da26748 	.word	0x7da26748
    ff3c:	a6616182 	.word	0xa6616182
    ff40:	2303      	movs	r3, #3
    ff42:	2200      	movs	r2, #0
    ff44:	552b      	strb	r3, [r5, r4]
    ff46:	1c63      	adds	r3, r4, #1
    ff48:	b29b      	uxth	r3, r3
    ff4a:	18eb      	adds	r3, r5, r3
    ff4c:	4f5a      	ldr	r7, [pc, #360]	; (100b8 <IncludeMacCommandsResponse+0x1ec>)
    ff4e:	485e      	ldr	r0, [pc, #376]	; (100c8 <IncludeMacCommandsResponse+0x1fc>)
    ff50:	701a      	strb	r2, [r3, #0]
    ff52:	5c39      	ldrb	r1, [r7, r0]
    ff54:	3201      	adds	r2, #1
    ff56:	4011      	ands	r1, r2
    ff58:	466a      	mov	r2, sp
    ff5a:	9102      	str	r1, [sp, #8]
    ff5c:	7a12      	ldrb	r2, [r2, #8]
    ff5e:	701a      	strb	r2, [r3, #0]
    ff60:	5c3a      	ldrb	r2, [r7, r0]
    ff62:	4694      	mov	ip, r2
    ff64:	2202      	movs	r2, #2
    ff66:	4661      	mov	r1, ip
    ff68:	4211      	tst	r1, r2
    ff6a:	d002      	beq.n	ff72 <IncludeMacCommandsResponse+0xa6>
    ff6c:	9902      	ldr	r1, [sp, #8]
    ff6e:	430a      	orrs	r2, r1
    ff70:	701a      	strb	r2, [r3, #0]
    ff72:	2204      	movs	r2, #4
    ff74:	5c39      	ldrb	r1, [r7, r0]
    ff76:	4211      	tst	r1, r2
    ff78:	d071      	beq.n	1005e <IncludeMacCommandsResponse+0x192>
    ff7a:	7819      	ldrb	r1, [r3, #0]
    ff7c:	430a      	orrs	r2, r1
    ff7e:	701a      	strb	r2, [r3, #0]
    ff80:	e06d      	b.n	1005e <IncludeMacCommandsResponse+0x192>
    ff82:	2305      	movs	r3, #5
    ff84:	2103      	movs	r1, #3
    ff86:	2200      	movs	r2, #0
    ff88:	552b      	strb	r3, [r5, r4]
    ff8a:	1c63      	adds	r3, r4, #1
    ff8c:	b29b      	uxth	r3, r3
    ff8e:	4371      	muls	r1, r6
    ff90:	18eb      	adds	r3, r5, r3
    ff92:	701a      	strb	r2, [r3, #0]
    ff94:	4a48      	ldr	r2, [pc, #288]	; (100b8 <IncludeMacCommandsResponse+0x1ec>)
    ff96:	1851      	adds	r1, r2, r1
    ff98:	3190      	adds	r1, #144	; 0x90
    ff9a:	7888      	ldrb	r0, [r1, #2]
    ff9c:	0700      	lsls	r0, r0, #28
    ff9e:	0fc0      	lsrs	r0, r0, #31
    ffa0:	7018      	strb	r0, [r3, #0]
    ffa2:	7889      	ldrb	r1, [r1, #2]
    ffa4:	b2c7      	uxtb	r7, r0
    ffa6:	06c9      	lsls	r1, r1, #27
    ffa8:	d502      	bpl.n	ffb0 <IncludeMacCommandsResponse+0xe4>
    ffaa:	2102      	movs	r1, #2
    ffac:	4339      	orrs	r1, r7
    ffae:	7019      	strb	r1, [r3, #0]
    ffb0:	2103      	movs	r1, #3
    ffb2:	4371      	muls	r1, r6
    ffb4:	1852      	adds	r2, r2, r1
    ffb6:	3290      	adds	r2, #144	; 0x90
    ffb8:	7892      	ldrb	r2, [r2, #2]
    ffba:	0692      	lsls	r2, r2, #26
    ffbc:	d54f      	bpl.n	1005e <IncludeMacCommandsResponse+0x192>
    ffbe:	7819      	ldrb	r1, [r3, #0]
    ffc0:	2204      	movs	r2, #4
    ffc2:	e7db      	b.n	ff7c <IncludeMacCommandsResponse+0xb0>
    ffc4:	a904      	add	r1, sp, #16
    ffc6:	4b41      	ldr	r3, [pc, #260]	; (100cc <IncludeMacCommandsResponse+0x200>)
    ffc8:	200e      	movs	r0, #14
    ffca:	4798      	blx	r3
    ffcc:	2306      	movs	r3, #6
    ffce:	4a3a      	ldr	r2, [pc, #232]	; (100b8 <IncludeMacCommandsResponse+0x1ec>)
    ffd0:	552b      	strb	r3, [r5, r4]
    ffd2:	32e0      	adds	r2, #224	; 0xe0
    ffd4:	7811      	ldrb	r1, [r2, #0]
    ffd6:	1c62      	adds	r2, r4, #1
    ffd8:	b292      	uxth	r2, r2
    ffda:	54a9      	strb	r1, [r5, r2]
    ffdc:	aa04      	add	r2, sp, #16
    ffde:	7812      	ldrb	r2, [r2, #0]
    ffe0:	1ca3      	adds	r3, r4, #2
    ffe2:	0011      	movs	r1, r2
    ffe4:	3120      	adds	r1, #32
    ffe6:	3403      	adds	r4, #3
    ffe8:	b2c9      	uxtb	r1, r1
    ffea:	b29b      	uxth	r3, r3
    ffec:	b2a4      	uxth	r4, r4
    ffee:	293f      	cmp	r1, #63	; 0x3f
    fff0:	d904      	bls.n	fffc <IncludeMacCommandsResponse+0x130>
    fff2:	2220      	movs	r2, #32
    fff4:	54ea      	strb	r2, [r5, r3]
    fff6:	3601      	adds	r6, #1
    fff8:	b2f6      	uxtb	r6, r6
    fffa:	e76e      	b.n	feda <IncludeMacCommandsResponse+0xe>
    fffc:	213f      	movs	r1, #63	; 0x3f
    fffe:	400a      	ands	r2, r1
   10000:	e7f8      	b.n	fff4 <IncludeMacCommandsResponse+0x128>
   10002:	2307      	movs	r3, #7
   10004:	2103      	movs	r1, #3
   10006:	2200      	movs	r2, #0
   10008:	552b      	strb	r3, [r5, r4]
   1000a:	1c63      	adds	r3, r4, #1
   1000c:	4371      	muls	r1, r6
   1000e:	b29b      	uxth	r3, r3
   10010:	18eb      	adds	r3, r5, r3
   10012:	701a      	strb	r2, [r3, #0]
   10014:	4a28      	ldr	r2, [pc, #160]	; (100b8 <IncludeMacCommandsResponse+0x1ec>)
   10016:	1852      	adds	r2, r2, r1
   10018:	3290      	adds	r2, #144	; 0x90
   1001a:	7891      	ldrb	r1, [r2, #2]
   1001c:	09c9      	lsrs	r1, r1, #7
   1001e:	7019      	strb	r1, [r3, #0]
   10020:	7892      	ldrb	r2, [r2, #2]
   10022:	b2c8      	uxtb	r0, r1
   10024:	0652      	lsls	r2, r2, #25
   10026:	d51a      	bpl.n	1005e <IncludeMacCommandsResponse+0x192>
   10028:	2202      	movs	r2, #2
   1002a:	4302      	orrs	r2, r0
   1002c:	e7a7      	b.n	ff7e <IncludeMacCommandsResponse+0xb2>
   1002e:	2209      	movs	r2, #9
   10030:	1c63      	adds	r3, r4, #1
   10032:	552a      	strb	r2, [r5, r4]
   10034:	b29c      	uxth	r4, r3
   10036:	e7de      	b.n	fff6 <IncludeMacCommandsResponse+0x12a>
   10038:	230a      	movs	r3, #10
   1003a:	2103      	movs	r1, #3
   1003c:	2200      	movs	r2, #0
   1003e:	552b      	strb	r3, [r5, r4]
   10040:	1c63      	adds	r3, r4, #1
   10042:	4371      	muls	r1, r6
   10044:	b29b      	uxth	r3, r3
   10046:	18eb      	adds	r3, r5, r3
   10048:	701a      	strb	r2, [r3, #0]
   1004a:	4a1b      	ldr	r2, [pc, #108]	; (100b8 <IncludeMacCommandsResponse+0x1ec>)
   1004c:	1852      	adds	r2, r2, r1
   1004e:	3290      	adds	r2, #144	; 0x90
   10050:	7891      	ldrb	r1, [r2, #2]
   10052:	09c9      	lsrs	r1, r1, #7
   10054:	7019      	strb	r1, [r3, #0]
   10056:	78d2      	ldrb	r2, [r2, #3]
   10058:	b2c8      	uxtb	r0, r1
   1005a:	07d2      	lsls	r2, r2, #31
   1005c:	d4e4      	bmi.n	10028 <IncludeMacCommandsResponse+0x15c>
   1005e:	3402      	adds	r4, #2
   10060:	b2a4      	uxth	r4, r4
   10062:	e7c8      	b.n	fff6 <IncludeMacCommandsResponse+0x12a>
   10064:	003b      	movs	r3, r7
   10066:	22ff      	movs	r2, #255	; 0xff
   10068:	33dd      	adds	r3, #221	; 0xdd
   1006a:	701a      	strb	r2, [r3, #0]
   1006c:	2300      	movs	r3, #0
   1006e:	37de      	adds	r7, #222	; 0xde
   10070:	703b      	strb	r3, [r7, #0]
   10072:	3afd      	subs	r2, #253	; 0xfd
   10074:	1c63      	adds	r3, r4, #1
   10076:	e7dc      	b.n	10032 <IncludeMacCommandsResponse+0x166>
   10078:	1c62      	adds	r2, r4, #1
   1007a:	552b      	strb	r3, [r5, r4]
   1007c:	b294      	uxth	r4, r2
   1007e:	e7ba      	b.n	fff6 <IncludeMacCommandsResponse+0x12a>
   10080:	2201      	movs	r2, #1
   10082:	4252      	negs	r2, r2
   10084:	17d3      	asrs	r3, r2, #31
   10086:	9204      	str	r2, [sp, #16]
   10088:	9305      	str	r3, [sp, #20]
   1008a:	4b11      	ldr	r3, [pc, #68]	; (100d0 <IncludeMacCommandsResponse+0x204>)
   1008c:	a904      	add	r1, sp, #16
   1008e:	5cf8      	ldrb	r0, [r7, r3]
   10090:	4b10      	ldr	r3, [pc, #64]	; (100d4 <IncludeMacCommandsResponse+0x208>)
   10092:	4798      	blx	r3
   10094:	2301      	movs	r3, #1
   10096:	228a      	movs	r2, #138	; 0x8a
   10098:	425b      	negs	r3, r3
   1009a:	0092      	lsls	r2, r2, #2
   1009c:	50bb      	str	r3, [r7, r2]
   1009e:	3204      	adds	r2, #4
   100a0:	54bb      	strb	r3, [r7, r2]
   100a2:	2389      	movs	r3, #137	; 0x89
   100a4:	2201      	movs	r2, #1
   100a6:	009b      	lsls	r3, r3, #2
   100a8:	54fa      	strb	r2, [r7, r3]
   100aa:	2303      	movs	r3, #3
   100ac:	4373      	muls	r3, r6
   100ae:	18ff      	adds	r7, r7, r3
   100b0:	3791      	adds	r7, #145	; 0x91
   100b2:	18a2      	adds	r2, r4, r2
   100b4:	783b      	ldrb	r3, [r7, #0]
   100b6:	e7e0      	b.n	1007a <IncludeMacCommandsResponse+0x1ae>
   100b8:	20002b5c 	.word	0x20002b5c
   100bc:	000202ab 	.word	0x000202ab
   100c0:	00019ead 	.word	0x00019ead
   100c4:	20002d73 	.word	0x20002d73
   100c8:	00000217 	.word	0x00000217
   100cc:	00014b5d 	.word	0x00014b5d
   100d0:	00000225 	.word	0x00000225
   100d4:	0000f411 	.word	0x0000f411

000100d8 <UpdateJoinSuccessState>:
   100d8:	b5f0      	push	{r4, r5, r6, r7, lr}
   100da:	4c35      	ldr	r4, [pc, #212]	; (101b0 <UpdateJoinSuccessState+0xd8>)
   100dc:	2104      	movs	r1, #4
   100de:	0022      	movs	r2, r4
   100e0:	328c      	adds	r2, #140	; 0x8c
   100e2:	7813      	ldrb	r3, [r2, #0]
   100e4:	2001      	movs	r0, #1
   100e6:	438b      	bics	r3, r1
   100e8:	7013      	strb	r3, [r2, #0]
   100ea:	0022      	movs	r2, r4
   100ec:	2500      	movs	r5, #0
   100ee:	327c      	adds	r2, #124	; 0x7c
   100f0:	7813      	ldrb	r3, [r2, #0]
   100f2:	b087      	sub	sp, #28
   100f4:	4303      	orrs	r3, r0
   100f6:	3107      	adds	r1, #7
   100f8:	4f2e      	ldr	r7, [pc, #184]	; (101b4 <UpdateJoinSuccessState+0xdc>)
   100fa:	7013      	strb	r3, [r2, #0]
   100fc:	47b8      	blx	r7
   100fe:	1d23      	adds	r3, r4, #4
   10100:	2116      	movs	r1, #22
   10102:	0028      	movs	r0, r5
   10104:	67dd      	str	r5, [r3, #124]	; 0x7c
   10106:	47b8      	blx	r7
   10108:	0023      	movs	r3, r4
   1010a:	2020      	movs	r0, #32
   1010c:	33ff      	adds	r3, #255	; 0xff
   1010e:	7c5b      	ldrb	r3, [r3, #17]
   10110:	4e29      	ldr	r6, [pc, #164]	; (101b8 <UpdateJoinSuccessState+0xe0>)
   10112:	4203      	tst	r3, r0
   10114:	d014      	beq.n	10140 <UpdateJoinSuccessState+0x68>
   10116:	0023      	movs	r3, r4
   10118:	337b      	adds	r3, #123	; 0x7b
   1011a:	701d      	strb	r5, [r3, #0]
   1011c:	0023      	movs	r3, r4
   1011e:	a904      	add	r1, sp, #16
   10120:	336f      	adds	r3, #111	; 0x6f
   10122:	710d      	strb	r5, [r1, #4]
   10124:	701d      	strb	r5, [r3, #0]
   10126:	705d      	strb	r5, [r3, #1]
   10128:	709d      	strb	r5, [r3, #2]
   1012a:	70dd      	strb	r5, [r3, #3]
   1012c:	711d      	strb	r5, [r3, #4]
   1012e:	715d      	strb	r5, [r3, #5]
   10130:	719d      	strb	r5, [r3, #6]
   10132:	71dd      	strb	r5, [r3, #7]
   10134:	47b0      	blx	r6
   10136:	210f      	movs	r1, #15
   10138:	2021      	movs	r0, #33	; 0x21
   1013a:	4469      	add	r1, sp
   1013c:	700d      	strb	r5, [r1, #0]
   1013e:	47b0      	blx	r6
   10140:	0023      	movs	r3, r4
   10142:	2500      	movs	r5, #0
   10144:	3308      	adds	r3, #8
   10146:	210a      	movs	r1, #10
   10148:	2001      	movs	r0, #1
   1014a:	67dd      	str	r5, [r3, #124]	; 0x7c
   1014c:	47b8      	blx	r7
   1014e:	0023      	movs	r3, r4
   10150:	33c2      	adds	r3, #194	; 0xc2
   10152:	801d      	strh	r5, [r3, #0]
   10154:	0022      	movs	r2, r4
   10156:	0023      	movs	r3, r4
   10158:	210e      	movs	r1, #14
   1015a:	327c      	adds	r2, #124	; 0x7c
   1015c:	33ed      	adds	r3, #237	; 0xed
   1015e:	701d      	strb	r5, [r3, #0]
   10160:	7813      	ldrb	r3, [r2, #0]
   10162:	203a      	movs	r0, #58	; 0x3a
   10164:	438b      	bics	r3, r1
   10166:	0029      	movs	r1, r5
   10168:	7013      	strb	r3, [r2, #0]
   1016a:	47b0      	blx	r6
   1016c:	0023      	movs	r3, r4
   1016e:	337d      	adds	r3, #125	; 0x7d
   10170:	781b      	ldrb	r3, [r3, #0]
   10172:	079b      	lsls	r3, r3, #30
   10174:	d50c      	bpl.n	10190 <UpdateJoinSuccessState+0xb8>
   10176:	0023      	movs	r3, r4
   10178:	21fa      	movs	r1, #250	; 0xfa
   1017a:	3388      	adds	r3, #136	; 0x88
   1017c:	681b      	ldr	r3, [r3, #0]
   1017e:	34e7      	adds	r4, #231	; 0xe7
   10180:	0089      	lsls	r1, r1, #2
   10182:	7820      	ldrb	r0, [r4, #0]
   10184:	4359      	muls	r1, r3
   10186:	9500      	str	r5, [sp, #0]
   10188:	4b0c      	ldr	r3, [pc, #48]	; (101bc <UpdateJoinSuccessState+0xe4>)
   1018a:	002a      	movs	r2, r5
   1018c:	4c0c      	ldr	r4, [pc, #48]	; (101c0 <UpdateJoinSuccessState+0xe8>)
   1018e:	47a0      	blx	r4
   10190:	490c      	ldr	r1, [pc, #48]	; (101c4 <UpdateJoinSuccessState+0xec>)
   10192:	794a      	ldrb	r2, [r1, #5]
   10194:	790b      	ldrb	r3, [r1, #4]
   10196:	0212      	lsls	r2, r2, #8
   10198:	431a      	orrs	r2, r3
   1019a:	798b      	ldrb	r3, [r1, #6]
   1019c:	041b      	lsls	r3, r3, #16
   1019e:	431a      	orrs	r2, r3
   101a0:	79cb      	ldrb	r3, [r1, #7]
   101a2:	061b      	lsls	r3, r3, #24
   101a4:	4313      	orrs	r3, r2
   101a6:	d001      	beq.n	101ac <UpdateJoinSuccessState+0xd4>
   101a8:	2008      	movs	r0, #8
   101aa:	4798      	blx	r3
   101ac:	b007      	add	sp, #28
   101ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
   101b0:	20002b5c 	.word	0x20002b5c
   101b4:	0000e0dd 	.word	0x0000e0dd
   101b8:	0000da29 	.word	0x0000da29
   101bc:	00010305 	.word	0x00010305
   101c0:	0000ee0d 	.word	0x0000ee0d
   101c4:	20002ea4 	.word	0x20002ea4

000101c8 <PrepareSessionKeys>:
   101c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   101ca:	0004      	movs	r4, r0
   101cc:	2603      	movs	r6, #3
   101ce:	000d      	movs	r5, r1
   101d0:	0017      	movs	r7, r2
   101d2:	4b09      	ldr	r3, [pc, #36]	; (101f8 <PrepareSessionKeys+0x30>)
   101d4:	2210      	movs	r2, #16
   101d6:	2100      	movs	r1, #0
   101d8:	4798      	blx	r3
   101da:	0032      	movs	r2, r6
   101dc:	0029      	movs	r1, r5
   101de:	1c60      	adds	r0, r4, #1
   101e0:	4d06      	ldr	r5, [pc, #24]	; (101fc <PrepareSessionKeys+0x34>)
   101e2:	47a8      	blx	r5
   101e4:	0032      	movs	r2, r6
   101e6:	0039      	movs	r1, r7
   101e8:	1d20      	adds	r0, r4, #4
   101ea:	47a8      	blx	r5
   101ec:	1de0      	adds	r0, r4, #7
   101ee:	2202      	movs	r2, #2
   101f0:	4903      	ldr	r1, [pc, #12]	; (10200 <PrepareSessionKeys+0x38>)
   101f2:	47a8      	blx	r5
   101f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   101f6:	46c0      	nop			; (mov r8, r8)
   101f8:	00019ead 	.word	0x00019ead
   101fc:	00019d89 	.word	0x00019d89
   10200:	20002c20 	.word	0x20002c20

00010204 <AssembleEncryptionBlock>:
   10204:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   10206:	001e      	movs	r6, r3
   10208:	4c0b      	ldr	r4, [pc, #44]	; (10238 <AssembleEncryptionBlock+0x34>)
   1020a:	0017      	movs	r7, r2
   1020c:	4b0b      	ldr	r3, [pc, #44]	; (1023c <AssembleEncryptionBlock+0x38>)
   1020e:	0005      	movs	r5, r0
   10210:	9101      	str	r1, [sp, #4]
   10212:	2210      	movs	r2, #16
   10214:	2100      	movs	r1, #0
   10216:	0020      	movs	r0, r4
   10218:	4798      	blx	r3
   1021a:	7026      	strb	r6, [r4, #0]
   1021c:	2604      	movs	r6, #4
   1021e:	7165      	strb	r5, [r4, #5]
   10220:	0032      	movs	r2, r6
   10222:	4d07      	ldr	r5, [pc, #28]	; (10240 <AssembleEncryptionBlock+0x3c>)
   10224:	a908      	add	r1, sp, #32
   10226:	1da0      	adds	r0, r4, #6
   10228:	47a8      	blx	r5
   1022a:	0020      	movs	r0, r4
   1022c:	0032      	movs	r2, r6
   1022e:	a901      	add	r1, sp, #4
   10230:	300a      	adds	r0, #10
   10232:	47a8      	blx	r5
   10234:	73e7      	strb	r7, [r4, #15]
   10236:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
   10238:	20001110 	.word	0x20001110
   1023c:	00019ead 	.word	0x00019ead
   10240:	00019d89 	.word	0x00019d89

00010244 <ConfigureRadio>:
   10244:	b537      	push	{r0, r1, r2, r4, r5, lr}
   10246:	0001      	movs	r1, r0
   10248:	0005      	movs	r5, r0
   1024a:	4c11      	ldr	r4, [pc, #68]	; (10290 <ConfigureRadio+0x4c>)
   1024c:	3109      	adds	r1, #9
   1024e:	2009      	movs	r0, #9
   10250:	47a0      	blx	r4
   10252:	0029      	movs	r1, r5
   10254:	2001      	movs	r0, #1
   10256:	47a0      	blx	r4
   10258:	1d29      	adds	r1, r5, #4
   1025a:	200a      	movs	r0, #10
   1025c:	47a0      	blx	r4
   1025e:	7a6b      	ldrb	r3, [r5, #9]
   10260:	2b01      	cmp	r3, #1
   10262:	d10b      	bne.n	1027c <ConfigureRadio+0x38>
   10264:	0029      	movs	r1, r5
   10266:	2016      	movs	r0, #22
   10268:	310b      	adds	r1, #11
   1026a:	47a0      	blx	r4
   1026c:	0029      	movs	r1, r5
   1026e:	2007      	movs	r0, #7
   10270:	310a      	adds	r1, #10
   10272:	47a0      	blx	r4
   10274:	2000      	movs	r0, #0
   10276:	4907      	ldr	r1, [pc, #28]	; (10294 <ConfigureRadio+0x50>)
   10278:	47a0      	blx	r4
   1027a:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
   1027c:	466b      	mov	r3, sp
   1027e:	1dd9      	adds	r1, r3, #7
   10280:	2303      	movs	r3, #3
   10282:	2013      	movs	r0, #19
   10284:	700b      	strb	r3, [r1, #0]
   10286:	47a0      	blx	r4
   10288:	4903      	ldr	r1, [pc, #12]	; (10298 <ConfigureRadio+0x54>)
   1028a:	2012      	movs	r0, #18
   1028c:	e7f4      	b.n	10278 <ConfigureRadio+0x34>
   1028e:	46c0      	nop			; (mov r8, r8)
   10290:	00014c4d 	.word	0x00014c4d
   10294:	20002c53 	.word	0x20002c53
   10298:	000202a8 	.word	0x000202a8

0001029c <StopReceiveWindow2Timer>:
   1029c:	b510      	push	{r4, lr}
   1029e:	4c0b      	ldr	r4, [pc, #44]	; (102cc <StopReceiveWindow2Timer+0x30>)
   102a0:	0022      	movs	r2, r4
   102a2:	32f4      	adds	r2, #244	; 0xf4
   102a4:	7812      	ldrb	r2, [r2, #0]
   102a6:	2a01      	cmp	r2, #1
   102a8:	d10e      	bne.n	102c8 <StopReceiveWindow2Timer+0x2c>
   102aa:	0021      	movs	r1, r4
   102ac:	200e      	movs	r0, #14
   102ae:	317c      	adds	r1, #124	; 0x7c
   102b0:	780a      	ldrb	r2, [r1, #0]
   102b2:	34e5      	adds	r4, #229	; 0xe5
   102b4:	4382      	bics	r2, r0
   102b6:	700a      	strb	r2, [r1, #0]
   102b8:	7820      	ldrb	r0, [r4, #0]
   102ba:	4b05      	ldr	r3, [pc, #20]	; (102d0 <StopReceiveWindow2Timer+0x34>)
   102bc:	4798      	blx	r3
   102be:	2800      	cmp	r0, #0
   102c0:	d002      	beq.n	102c8 <StopReceiveWindow2Timer+0x2c>
   102c2:	7820      	ldrb	r0, [r4, #0]
   102c4:	4b03      	ldr	r3, [pc, #12]	; (102d4 <StopReceiveWindow2Timer+0x38>)
   102c6:	4798      	blx	r3
   102c8:	bd10      	pop	{r4, pc}
   102ca:	46c0      	nop			; (mov r8, r8)
   102cc:	20002b5c 	.word	0x20002b5c
   102d0:	0000efa5 	.word	0x0000efa5
   102d4:	0000f125 	.word	0x0000f125

000102d8 <LorawanLinkCheckCallback.part.1>:
   102d8:	4b07      	ldr	r3, [pc, #28]	; (102f8 <LorawanLinkCheckCallback.part.1+0x20>)
   102da:	b513      	push	{r0, r1, r4, lr}
   102dc:	001a      	movs	r2, r3
   102de:	21fa      	movs	r1, #250	; 0xfa
   102e0:	3288      	adds	r2, #136	; 0x88
   102e2:	6812      	ldr	r2, [r2, #0]
   102e4:	0089      	lsls	r1, r1, #2
   102e6:	4351      	muls	r1, r2
   102e8:	2200      	movs	r2, #0
   102ea:	33e7      	adds	r3, #231	; 0xe7
   102ec:	7818      	ldrb	r0, [r3, #0]
   102ee:	4c03      	ldr	r4, [pc, #12]	; (102fc <LorawanLinkCheckCallback.part.1+0x24>)
   102f0:	9200      	str	r2, [sp, #0]
   102f2:	4b03      	ldr	r3, [pc, #12]	; (10300 <LorawanLinkCheckCallback.part.1+0x28>)
   102f4:	47a0      	blx	r4
   102f6:	bd13      	pop	{r0, r1, r4, pc}
   102f8:	20002b5c 	.word	0x20002b5c
   102fc:	0000ee0d 	.word	0x0000ee0d
   10300:	00010305 	.word	0x00010305

00010304 <LorawanLinkCheckCallback>:
   10304:	4b17      	ldr	r3, [pc, #92]	; (10364 <LorawanLinkCheckCallback+0x60>)
   10306:	20a0      	movs	r0, #160	; 0xa0
   10308:	001a      	movs	r2, r3
   1030a:	2180      	movs	r1, #128	; 0x80
   1030c:	b510      	push	{r4, lr}
   1030e:	327c      	adds	r2, #124	; 0x7c
   10310:	8812      	ldrh	r2, [r2, #0]
   10312:	0080      	lsls	r0, r0, #2
   10314:	0089      	lsls	r1, r1, #2
   10316:	4002      	ands	r2, r0
   10318:	428a      	cmp	r2, r1
   1031a:	d11c      	bne.n	10356 <LorawanLinkCheckCallback+0x52>
   1031c:	001a      	movs	r2, r3
   1031e:	32d8      	adds	r2, #216	; 0xd8
   10320:	7810      	ldrb	r0, [r2, #0]
   10322:	2403      	movs	r4, #3
   10324:	2200      	movs	r2, #0
   10326:	b2d1      	uxtb	r1, r2
   10328:	4281      	cmp	r1, r0
   1032a:	d30d      	bcc.n	10348 <LorawanLinkCheckCallback+0x44>
   1032c:	d113      	bne.n	10356 <LorawanLinkCheckCallback+0x52>
   1032e:	2203      	movs	r2, #3
   10330:	434a      	muls	r2, r1
   10332:	2102      	movs	r1, #2
   10334:	189a      	adds	r2, r3, r2
   10336:	3291      	adds	r2, #145	; 0x91
   10338:	7011      	strb	r1, [r2, #0]
   1033a:	280f      	cmp	r0, #15
   1033c:	d80b      	bhi.n	10356 <LorawanLinkCheckCallback+0x52>
   1033e:	001a      	movs	r2, r3
   10340:	3001      	adds	r0, #1
   10342:	32d8      	adds	r2, #216	; 0xd8
   10344:	7010      	strb	r0, [r2, #0]
   10346:	e006      	b.n	10356 <LorawanLinkCheckCallback+0x52>
   10348:	0021      	movs	r1, r4
   1034a:	3201      	adds	r2, #1
   1034c:	4351      	muls	r1, r2
   1034e:	318e      	adds	r1, #142	; 0x8e
   10350:	5c59      	ldrb	r1, [r3, r1]
   10352:	2902      	cmp	r1, #2
   10354:	d1e7      	bne.n	10326 <LorawanLinkCheckCallback+0x22>
   10356:	337d      	adds	r3, #125	; 0x7d
   10358:	781b      	ldrb	r3, [r3, #0]
   1035a:	079b      	lsls	r3, r3, #30
   1035c:	d501      	bpl.n	10362 <LorawanLinkCheckCallback+0x5e>
   1035e:	4b02      	ldr	r3, [pc, #8]	; (10368 <LorawanLinkCheckCallback+0x64>)
   10360:	4798      	blx	r3
   10362:	bd10      	pop	{r4, pc}
   10364:	20002b5c 	.word	0x20002b5c
   10368:	000102d9 	.word	0x000102d9

0001036c <LORAWAN_Init>:
   1036c:	2270      	movs	r2, #112	; 0x70
   1036e:	b5f0      	push	{r4, r5, r6, r7, lr}
   10370:	4b52      	ldr	r3, [pc, #328]	; (104bc <LORAWAN_Init+0x150>)
   10372:	b087      	sub	sp, #28
   10374:	781b      	ldrb	r3, [r3, #0]
   10376:	0006      	movs	r6, r0
   10378:	011b      	lsls	r3, r3, #4
   1037a:	4013      	ands	r3, r2
   1037c:	4a50      	ldr	r2, [pc, #320]	; (104c0 <LORAWAN_Init+0x154>)
   1037e:	000f      	movs	r7, r1
   10380:	7812      	ldrb	r2, [r2, #0]
   10382:	0912      	lsrs	r2, r2, #4
   10384:	4313      	orrs	r3, r2
   10386:	2b1f      	cmp	r3, #31
   10388:	d000      	beq.n	1038c <LORAWAN_Init+0x20>
   1038a:	e7fe      	b.n	1038a <LORAWAN_Init+0x1e>
   1038c:	4d4d      	ldr	r5, [pc, #308]	; (104c4 <LORAWAN_Init+0x158>)
   1038e:	002b      	movs	r3, r5
   10390:	33ef      	adds	r3, #239	; 0xef
   10392:	781b      	ldrb	r3, [r3, #0]
   10394:	2b00      	cmp	r3, #0
   10396:	d000      	beq.n	1039a <LORAWAN_Init+0x2e>
   10398:	e08c      	b.n	104b4 <LORAWAN_Init+0x148>
   1039a:	484b      	ldr	r0, [pc, #300]	; (104c8 <LORAWAN_Init+0x15c>)
   1039c:	4c4b      	ldr	r4, [pc, #300]	; (104cc <LORAWAN_Init+0x160>)
   1039e:	47a0      	blx	r4
   103a0:	2808      	cmp	r0, #8
   103a2:	d050      	beq.n	10446 <LORAWAN_Init+0xda>
   103a4:	4b4a      	ldr	r3, [pc, #296]	; (104d0 <LORAWAN_Init+0x164>)
   103a6:	4798      	blx	r3
   103a8:	002b      	movs	r3, r5
   103aa:	33ef      	adds	r3, #239	; 0xef
   103ac:	781b      	ldrb	r3, [r3, #0]
   103ae:	2b00      	cmp	r3, #0
   103b0:	d018      	beq.n	103e4 <LORAWAN_Init+0x78>
   103b2:	4b48      	ldr	r3, [pc, #288]	; (104d4 <LORAWAN_Init+0x168>)
   103b4:	0a32      	lsrs	r2, r6, #8
   103b6:	705a      	strb	r2, [r3, #1]
   103b8:	0c32      	lsrs	r2, r6, #16
   103ba:	709a      	strb	r2, [r3, #2]
   103bc:	0a3a      	lsrs	r2, r7, #8
   103be:	701e      	strb	r6, [r3, #0]
   103c0:	711f      	strb	r7, [r3, #4]
   103c2:	715a      	strb	r2, [r3, #5]
   103c4:	0e36      	lsrs	r6, r6, #24
   103c6:	0c3a      	lsrs	r2, r7, #16
   103c8:	0e3f      	lsrs	r7, r7, #24
   103ca:	719a      	strb	r2, [r3, #6]
   103cc:	70de      	strb	r6, [r3, #3]
   103ce:	71df      	strb	r7, [r3, #7]
   103d0:	4b41      	ldr	r3, [pc, #260]	; (104d8 <LORAWAN_Init+0x16c>)
   103d2:	4798      	blx	r3
   103d4:	4941      	ldr	r1, [pc, #260]	; (104dc <LORAWAN_Init+0x170>)
   103d6:	4b42      	ldr	r3, [pc, #264]	; (104e0 <LORAWAN_Init+0x174>)
   103d8:	201a      	movs	r0, #26
   103da:	4798      	blx	r3
   103dc:	4b41      	ldr	r3, [pc, #260]	; (104e4 <LORAWAN_Init+0x178>)
   103de:	4798      	blx	r3
   103e0:	4b41      	ldr	r3, [pc, #260]	; (104e8 <LORAWAN_Init+0x17c>)
   103e2:	4798      	blx	r3
   103e4:	2317      	movs	r3, #23
   103e6:	ac02      	add	r4, sp, #8
   103e8:	4a40      	ldr	r2, [pc, #256]	; (104ec <LORAWAN_Init+0x180>)
   103ea:	7123      	strb	r3, [r4, #4]
   103ec:	4940      	ldr	r1, [pc, #256]	; (104f0 <LORAWAN_Init+0x184>)
   103ee:	4b41      	ldr	r3, [pc, #260]	; (104f4 <LORAWAN_Init+0x188>)
   103f0:	9205      	str	r2, [sp, #20]
   103f2:	9200      	str	r2, [sp, #0]
   103f4:	4e40      	ldr	r6, [pc, #256]	; (104f8 <LORAWAN_Init+0x18c>)
   103f6:	9a03      	ldr	r2, [sp, #12]
   103f8:	2000      	movs	r0, #0
   103fa:	9102      	str	r1, [sp, #8]
   103fc:	9304      	str	r3, [sp, #16]
   103fe:	47b0      	blx	r6
   10400:	230f      	movs	r3, #15
   10402:	4a3e      	ldr	r2, [pc, #248]	; (104fc <LORAWAN_Init+0x190>)
   10404:	7123      	strb	r3, [r4, #4]
   10406:	4b3e      	ldr	r3, [pc, #248]	; (10500 <LORAWAN_Init+0x194>)
   10408:	60e2      	str	r2, [r4, #12]
   1040a:	60a3      	str	r3, [r4, #8]
   1040c:	493d      	ldr	r1, [pc, #244]	; (10504 <LORAWAN_Init+0x198>)
   1040e:	9200      	str	r2, [sp, #0]
   10410:	6862      	ldr	r2, [r4, #4]
   10412:	2001      	movs	r0, #1
   10414:	9102      	str	r1, [sp, #8]
   10416:	47b0      	blx	r6
   10418:	2201      	movs	r2, #1
   1041a:	4252      	negs	r2, r2
   1041c:	17d3      	asrs	r3, r2, #31
   1041e:	9202      	str	r2, [sp, #8]
   10420:	9303      	str	r3, [sp, #12]
   10422:	4b39      	ldr	r3, [pc, #228]	; (10508 <LORAWAN_Init+0x19c>)
   10424:	0021      	movs	r1, r4
   10426:	5ce8      	ldrb	r0, [r5, r3]
   10428:	4b38      	ldr	r3, [pc, #224]	; (1050c <LORAWAN_Init+0x1a0>)
   1042a:	4798      	blx	r3
   1042c:	238b      	movs	r3, #139	; 0x8b
   1042e:	22ff      	movs	r2, #255	; 0xff
   10430:	009b      	lsls	r3, r3, #2
   10432:	54ea      	strb	r2, [r5, r3]
   10434:	3a01      	subs	r2, #1
   10436:	3aff      	subs	r2, #255	; 0xff
   10438:	3b04      	subs	r3, #4
   1043a:	50ea      	str	r2, [r5, r3]
   1043c:	2200      	movs	r2, #0
   1043e:	3b04      	subs	r3, #4
   10440:	54ea      	strb	r2, [r5, r3]
   10442:	b007      	add	sp, #28
   10444:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10446:	4832      	ldr	r0, [pc, #200]	; (10510 <LORAWAN_Init+0x1a4>)
   10448:	47a0      	blx	r4
   1044a:	2808      	cmp	r0, #8
   1044c:	d1aa      	bne.n	103a4 <LORAWAN_Init+0x38>
   1044e:	4831      	ldr	r0, [pc, #196]	; (10514 <LORAWAN_Init+0x1a8>)
   10450:	47a0      	blx	r4
   10452:	2808      	cmp	r0, #8
   10454:	d1a6      	bne.n	103a4 <LORAWAN_Init+0x38>
   10456:	4830      	ldr	r0, [pc, #192]	; (10518 <LORAWAN_Init+0x1ac>)
   10458:	47a0      	blx	r4
   1045a:	2808      	cmp	r0, #8
   1045c:	d1a2      	bne.n	103a4 <LORAWAN_Init+0x38>
   1045e:	482f      	ldr	r0, [pc, #188]	; (1051c <LORAWAN_Init+0x1b0>)
   10460:	47a0      	blx	r4
   10462:	2808      	cmp	r0, #8
   10464:	d19e      	bne.n	103a4 <LORAWAN_Init+0x38>
   10466:	482e      	ldr	r0, [pc, #184]	; (10520 <LORAWAN_Init+0x1b4>)
   10468:	47a0      	blx	r4
   1046a:	2808      	cmp	r0, #8
   1046c:	d19a      	bne.n	103a4 <LORAWAN_Init+0x38>
   1046e:	482d      	ldr	r0, [pc, #180]	; (10524 <LORAWAN_Init+0x1b8>)
   10470:	47a0      	blx	r4
   10472:	2808      	cmp	r0, #8
   10474:	d196      	bne.n	103a4 <LORAWAN_Init+0x38>
   10476:	482c      	ldr	r0, [pc, #176]	; (10528 <LORAWAN_Init+0x1bc>)
   10478:	47a0      	blx	r4
   1047a:	2808      	cmp	r0, #8
   1047c:	d000      	beq.n	10480 <LORAWAN_Init+0x114>
   1047e:	e791      	b.n	103a4 <LORAWAN_Init+0x38>
   10480:	482a      	ldr	r0, [pc, #168]	; (1052c <LORAWAN_Init+0x1c0>)
   10482:	47a0      	blx	r4
   10484:	2808      	cmp	r0, #8
   10486:	d000      	beq.n	1048a <LORAWAN_Init+0x11e>
   10488:	e78c      	b.n	103a4 <LORAWAN_Init+0x38>
   1048a:	4829      	ldr	r0, [pc, #164]	; (10530 <LORAWAN_Init+0x1c4>)
   1048c:	47a0      	blx	r4
   1048e:	2808      	cmp	r0, #8
   10490:	d000      	beq.n	10494 <LORAWAN_Init+0x128>
   10492:	e787      	b.n	103a4 <LORAWAN_Init+0x38>
   10494:	4827      	ldr	r0, [pc, #156]	; (10534 <LORAWAN_Init+0x1c8>)
   10496:	47a0      	blx	r4
   10498:	2808      	cmp	r0, #8
   1049a:	d000      	beq.n	1049e <LORAWAN_Init+0x132>
   1049c:	e782      	b.n	103a4 <LORAWAN_Init+0x38>
   1049e:	4826      	ldr	r0, [pc, #152]	; (10538 <LORAWAN_Init+0x1cc>)
   104a0:	4b26      	ldr	r3, [pc, #152]	; (1053c <LORAWAN_Init+0x1d0>)
   104a2:	4798      	blx	r3
   104a4:	2808      	cmp	r0, #8
   104a6:	d000      	beq.n	104aa <LORAWAN_Init+0x13e>
   104a8:	e77c      	b.n	103a4 <LORAWAN_Init+0x38>
   104aa:	002b      	movs	r3, r5
   104ac:	2201      	movs	r2, #1
   104ae:	33ef      	adds	r3, #239	; 0xef
   104b0:	701a      	strb	r2, [r3, #0]
   104b2:	e779      	b.n	103a8 <LORAWAN_Init+0x3c>
   104b4:	4b22      	ldr	r3, [pc, #136]	; (10540 <LORAWAN_Init+0x1d4>)
   104b6:	4798      	blx	r3
   104b8:	e776      	b.n	103a8 <LORAWAN_Init+0x3c>
   104ba:	46c0      	nop			; (mov r8, r8)
   104bc:	41003fe8 	.word	0x41003fe8
   104c0:	41003fe4 	.word	0x41003fe4
   104c4:	20002b5c 	.word	0x20002b5c
   104c8:	20002c3e 	.word	0x20002c3e
   104cc:	0000edd9 	.word	0x0000edd9
   104d0:	0000ed1d 	.word	0x0000ed1d
   104d4:	20002ea4 	.word	0x20002ea4
   104d8:	00014e49 	.word	0x00014e49
   104dc:	000124ad 	.word	0x000124ad
   104e0:	00014c4d 	.word	0x00014c4d
   104e4:	0000f60d 	.word	0x0000f60d
   104e8:	0001a039 	.word	0x0001a039
   104ec:	000147f1 	.word	0x000147f1
   104f0:	20002b43 	.word	0x20002b43
   104f4:	000202c8 	.word	0x000202c8
   104f8:	0000e3c1 	.word	0x0000e3c1
   104fc:	000147f5 	.word	0x000147f5
   10500:	00020380 	.word	0x00020380
   10504:	20002a34 	.word	0x20002a34
   10508:	00000225 	.word	0x00000225
   1050c:	0000f411 	.word	0x0000f411
   10510:	20002c3f 	.word	0x20002c3f
   10514:	20002c40 	.word	0x20002c40
   10518:	20002c41 	.word	0x20002c41
   1051c:	20002c43 	.word	0x20002c43
   10520:	20002c44 	.word	0x20002c44
   10524:	20002c42 	.word	0x20002c42
   10528:	20002c45 	.word	0x20002c45
   1052c:	20002c4e 	.word	0x20002c4e
   10530:	20002c4f 	.word	0x20002c4f
   10534:	20002c78 	.word	0x20002c78
   10538:	20002d81 	.word	0x20002d81
   1053c:	0000f3c9 	.word	0x0000f3c9
   10540:	0000fe09 	.word	0x0000fe09

00010544 <LORAWAN_Send>:
   10544:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   10546:	4c37      	ldr	r4, [pc, #220]	; (10624 <LORAWAN_Send+0xe0>)
   10548:	0006      	movs	r6, r0
   1054a:	0023      	movs	r3, r4
   1054c:	337c      	adds	r3, #124	; 0x7c
   1054e:	781b      	ldrb	r3, [r3, #0]
   10550:	250f      	movs	r5, #15
   10552:	b25a      	sxtb	r2, r3
   10554:	2a00      	cmp	r2, #0
   10556:	db0b      	blt.n	10570 <LORAWAN_Send+0x2c>
   10558:	3d03      	subs	r5, #3
   1055a:	065a      	lsls	r2, r3, #25
   1055c:	d408      	bmi.n	10570 <LORAWAN_Send+0x2c>
   1055e:	3d03      	subs	r5, #3
   10560:	07db      	lsls	r3, r3, #31
   10562:	d505      	bpl.n	10570 <LORAWAN_Send+0x2c>
   10564:	2385      	movs	r3, #133	; 0x85
   10566:	009b      	lsls	r3, r3, #2
   10568:	5ce7      	ldrb	r7, [r4, r3]
   1056a:	2f00      	cmp	r7, #0
   1056c:	d102      	bne.n	10574 <LORAWAN_Send+0x30>
   1056e:	2511      	movs	r5, #17
   10570:	0028      	movs	r0, r5
   10572:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   10574:	2800      	cmp	r0, #0
   10576:	d10e      	bne.n	10596 <LORAWAN_Send+0x52>
   10578:	2700      	movs	r7, #0
   1057a:	1d23      	adds	r3, r4, #4
   1057c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   1057e:	3301      	adds	r3, #1
   10580:	d123      	bne.n	105ca <LORAWAN_Send+0x86>
   10582:	2001      	movs	r0, #1
   10584:	347c      	adds	r4, #124	; 0x7c
   10586:	78a3      	ldrb	r3, [r4, #2]
   10588:	210b      	movs	r1, #11
   1058a:	4303      	orrs	r3, r0
   1058c:	70a3      	strb	r3, [r4, #2]
   1058e:	4b26      	ldr	r3, [pc, #152]	; (10628 <LORAWAN_Send+0xe4>)
   10590:	4798      	blx	r3
   10592:	250d      	movs	r5, #13
   10594:	e7ec      	b.n	10570 <LORAWAN_Send+0x2c>
   10596:	7843      	ldrb	r3, [r0, #1]
   10598:	7a02      	ldrb	r2, [r0, #8]
   1059a:	3b01      	subs	r3, #1
   1059c:	b2db      	uxtb	r3, r3
   1059e:	9201      	str	r2, [sp, #4]
   105a0:	2bdf      	cmp	r3, #223	; 0xdf
   105a2:	d902      	bls.n	105aa <LORAWAN_Send+0x66>
   105a4:	250a      	movs	r5, #10
   105a6:	2a00      	cmp	r2, #0
   105a8:	d1e2      	bne.n	10570 <LORAWAN_Send+0x2c>
   105aa:	4b20      	ldr	r3, [pc, #128]	; (1062c <LORAWAN_Send+0xe8>)
   105ac:	4798      	blx	r3
   105ae:	4684      	mov	ip, r0
   105b0:	9b01      	ldr	r3, [sp, #4]
   105b2:	9000      	str	r0, [sp, #0]
   105b4:	4463      	add	r3, ip
   105b6:	001d      	movs	r5, r3
   105b8:	4b1d      	ldr	r3, [pc, #116]	; (10630 <LORAWAN_Send+0xec>)
   105ba:	4798      	blx	r3
   105bc:	4285      	cmp	r5, r0
   105be:	dddb      	ble.n	10578 <LORAWAN_Send+0x34>
   105c0:	9b00      	ldr	r3, [sp, #0]
   105c2:	250e      	movs	r5, #14
   105c4:	2b00      	cmp	r3, #0
   105c6:	d0d3      	beq.n	10570 <LORAWAN_Send+0x2c>
   105c8:	e7d7      	b.n	1057a <LORAWAN_Send+0x36>
   105ca:	0023      	movs	r3, r4
   105cc:	33f4      	adds	r3, #244	; 0xf4
   105ce:	781b      	ldrb	r3, [r3, #0]
   105d0:	2b04      	cmp	r3, #4
   105d2:	d01d      	beq.n	10610 <LORAWAN_Send+0xcc>
   105d4:	0023      	movs	r3, r4
   105d6:	33f4      	adds	r3, #244	; 0xf4
   105d8:	781b      	ldrb	r3, [r3, #0]
   105da:	2b01      	cmp	r3, #1
   105dc:	d105      	bne.n	105ea <LORAWAN_Send+0xa6>
   105de:	0023      	movs	r3, r4
   105e0:	337c      	adds	r3, #124	; 0x7c
   105e2:	781a      	ldrb	r2, [r3, #0]
   105e4:	230e      	movs	r3, #14
   105e6:	421a      	tst	r2, r3
   105e8:	d1c1      	bne.n	1056e <LORAWAN_Send+0x2a>
   105ea:	0023      	movs	r3, r4
   105ec:	33fc      	adds	r3, #252	; 0xfc
   105ee:	2f00      	cmp	r7, #0
   105f0:	d113      	bne.n	1061a <LORAWAN_Send+0xd6>
   105f2:	2508      	movs	r5, #8
   105f4:	601e      	str	r6, [r3, #0]
   105f6:	2385      	movs	r3, #133	; 0x85
   105f8:	2200      	movs	r2, #0
   105fa:	009b      	lsls	r3, r3, #2
   105fc:	54e2      	strb	r2, [r4, r3]
   105fe:	2001      	movs	r0, #1
   10600:	4b0c      	ldr	r3, [pc, #48]	; (10634 <LORAWAN_Send+0xf0>)
   10602:	4798      	blx	r3
   10604:	2320      	movs	r3, #32
   10606:	348c      	adds	r4, #140	; 0x8c
   10608:	7822      	ldrb	r2, [r4, #0]
   1060a:	4313      	orrs	r3, r2
   1060c:	7023      	strb	r3, [r4, #0]
   1060e:	e7af      	b.n	10570 <LORAWAN_Send+0x2c>
   10610:	4b09      	ldr	r3, [pc, #36]	; (10638 <LORAWAN_Send+0xf4>)
   10612:	4798      	blx	r3
   10614:	2808      	cmp	r0, #8
   10616:	d1aa      	bne.n	1056e <LORAWAN_Send+0x2a>
   10618:	e7dc      	b.n	105d4 <LORAWAN_Send+0x90>
   1061a:	2200      	movs	r2, #0
   1061c:	2511      	movs	r5, #17
   1061e:	601a      	str	r2, [r3, #0]
   10620:	e7e9      	b.n	105f6 <LORAWAN_Send+0xb2>
   10622:	46c0      	nop			; (mov r8, r8)
   10624:	20002b5c 	.word	0x20002b5c
   10628:	0000e0dd 	.word	0x0000e0dd
   1062c:	0000fdc9 	.word	0x0000fdc9
   10630:	0000fe71 	.word	0x0000fe71
   10634:	00014ad9 	.word	0x00014ad9
   10638:	000141dd 	.word	0x000141dd

0001063c <AutomaticReplyCallback>:
   1063c:	b510      	push	{r4, lr}
   1063e:	4c0d      	ldr	r4, [pc, #52]	; (10674 <AutomaticReplyCallback+0x38>)
   10640:	0023      	movs	r3, r4
   10642:	33f4      	adds	r3, #244	; 0xf4
   10644:	781b      	ldrb	r3, [r3, #0]
   10646:	2b01      	cmp	r3, #1
   10648:	d10e      	bne.n	10668 <AutomaticReplyCallback+0x2c>
   1064a:	0022      	movs	r2, r4
   1064c:	210e      	movs	r1, #14
   1064e:	327c      	adds	r2, #124	; 0x7c
   10650:	7813      	ldrb	r3, [r2, #0]
   10652:	438b      	bics	r3, r1
   10654:	7013      	strb	r3, [r2, #0]
   10656:	4b08      	ldr	r3, [pc, #32]	; (10678 <AutomaticReplyCallback+0x3c>)
   10658:	2000      	movs	r0, #0
   1065a:	4798      	blx	r3
   1065c:	2208      	movs	r2, #8
   1065e:	348c      	adds	r4, #140	; 0x8c
   10660:	7823      	ldrb	r3, [r4, #0]
   10662:	4393      	bics	r3, r2
   10664:	7023      	strb	r3, [r4, #0]
   10666:	bd10      	pop	{r4, pc}
   10668:	2b04      	cmp	r3, #4
   1066a:	d1f4      	bne.n	10656 <AutomaticReplyCallback+0x1a>
   1066c:	4b03      	ldr	r3, [pc, #12]	; (1067c <AutomaticReplyCallback+0x40>)
   1066e:	4798      	blx	r3
   10670:	e7f1      	b.n	10656 <AutomaticReplyCallback+0x1a>
   10672:	46c0      	nop			; (mov r8, r8)
   10674:	20002b5c 	.word	0x20002b5c
   10678:	00010545 	.word	0x00010545
   1067c:	00015561 	.word	0x00015561

00010680 <LORAWAN_Pause>:
   10680:	b510      	push	{r4, lr}
   10682:	4c2c      	ldr	r4, [pc, #176]	; (10734 <LORAWAN_Pause+0xb4>)
   10684:	0023      	movs	r3, r4
   10686:	33f4      	adds	r3, #244	; 0xf4
   10688:	781b      	ldrb	r3, [r3, #0]
   1068a:	2b04      	cmp	r3, #4
   1068c:	d110      	bne.n	106b0 <LORAWAN_Pause+0x30>
   1068e:	0023      	movs	r3, r4
   10690:	337c      	adds	r3, #124	; 0x7c
   10692:	781b      	ldrb	r3, [r3, #0]
   10694:	07db      	lsls	r3, r3, #31
   10696:	d50b      	bpl.n	106b0 <LORAWAN_Pause+0x30>
   10698:	4b27      	ldr	r3, [pc, #156]	; (10738 <LORAWAN_Pause+0xb8>)
   1069a:	4798      	blx	r3
   1069c:	28c7      	cmp	r0, #199	; 0xc7
   1069e:	d942      	bls.n	10726 <LORAWAN_Pause+0xa6>
   106a0:	2380      	movs	r3, #128	; 0x80
   106a2:	347c      	adds	r4, #124	; 0x7c
   106a4:	7822      	ldrb	r2, [r4, #0]
   106a6:	425b      	negs	r3, r3
   106a8:	4313      	orrs	r3, r2
   106aa:	3832      	subs	r0, #50	; 0x32
   106ac:	7023      	strb	r3, [r4, #0]
   106ae:	bd10      	pop	{r4, pc}
   106b0:	0023      	movs	r3, r4
   106b2:	337c      	adds	r3, #124	; 0x7c
   106b4:	7818      	ldrb	r0, [r3, #0]
   106b6:	0700      	lsls	r0, r0, #28
   106b8:	0f40      	lsrs	r0, r0, #29
   106ba:	2806      	cmp	r0, #6
   106bc:	d833      	bhi.n	10726 <LORAWAN_Pause+0xa6>
   106be:	f005 ff9d 	bl	165fc <__gnu_thumb1_case_uqi>
   106c2:	322f      	.short	0x322f
   106c4:	321b3204 	.word	0x321b3204
   106c8:	2c          	.byte	0x2c
   106c9:	00          	.byte	0x00
   106ca:	0023      	movs	r3, r4
   106cc:	338c      	adds	r3, #140	; 0x8c
   106ce:	781b      	ldrb	r3, [r3, #0]
   106d0:	075b      	lsls	r3, r3, #29
   106d2:	d509      	bpl.n	106e8 <LORAWAN_Pause+0x68>
   106d4:	0023      	movs	r3, r4
   106d6:	33e2      	adds	r3, #226	; 0xe2
   106d8:	7818      	ldrb	r0, [r3, #0]
   106da:	4b18      	ldr	r3, [pc, #96]	; (1073c <LORAWAN_Pause+0xbc>)
   106dc:	4798      	blx	r3
   106de:	21fa      	movs	r1, #250	; 0xfa
   106e0:	4b17      	ldr	r3, [pc, #92]	; (10740 <LORAWAN_Pause+0xc0>)
   106e2:	0089      	lsls	r1, r1, #2
   106e4:	4798      	blx	r3
   106e6:	e7d9      	b.n	1069c <LORAWAN_Pause+0x1c>
   106e8:	0023      	movs	r3, r4
   106ea:	337c      	adds	r3, #124	; 0x7c
   106ec:	781b      	ldrb	r3, [r3, #0]
   106ee:	07db      	lsls	r3, r3, #31
   106f0:	d519      	bpl.n	10726 <LORAWAN_Pause+0xa6>
   106f2:	0023      	movs	r3, r4
   106f4:	33e4      	adds	r3, #228	; 0xe4
   106f6:	e7ef      	b.n	106d8 <LORAWAN_Pause+0x58>
   106f8:	0023      	movs	r3, r4
   106fa:	338c      	adds	r3, #140	; 0x8c
   106fc:	7818      	ldrb	r0, [r3, #0]
   106fe:	2304      	movs	r3, #4
   10700:	4018      	ands	r0, r3
   10702:	0023      	movs	r3, r4
   10704:	2800      	cmp	r0, #0
   10706:	d001      	beq.n	1070c <LORAWAN_Pause+0x8c>
   10708:	33e3      	adds	r3, #227	; 0xe3
   1070a:	e7e5      	b.n	106d8 <LORAWAN_Pause+0x58>
   1070c:	337c      	adds	r3, #124	; 0x7c
   1070e:	781b      	ldrb	r3, [r3, #0]
   10710:	07db      	lsls	r3, r3, #31
   10712:	d5e4      	bpl.n	106de <LORAWAN_Pause+0x5e>
   10714:	0023      	movs	r3, r4
   10716:	33e5      	adds	r3, #229	; 0xe5
   10718:	e7de      	b.n	106d8 <LORAWAN_Pause+0x58>
   1071a:	0023      	movs	r3, r4
   1071c:	33e8      	adds	r3, #232	; 0xe8
   1071e:	e7db      	b.n	106d8 <LORAWAN_Pause+0x58>
   10720:	2001      	movs	r0, #1
   10722:	4240      	negs	r0, r0
   10724:	e7bc      	b.n	106a0 <LORAWAN_Pause+0x20>
   10726:	227f      	movs	r2, #127	; 0x7f
   10728:	347c      	adds	r4, #124	; 0x7c
   1072a:	7823      	ldrb	r3, [r4, #0]
   1072c:	2000      	movs	r0, #0
   1072e:	4013      	ands	r3, r2
   10730:	7023      	strb	r3, [r4, #0]
   10732:	e7bc      	b.n	106ae <LORAWAN_Pause+0x2e>
   10734:	20002b5c 	.word	0x20002b5c
   10738:	00014215 	.word	0x00014215
   1073c:	0000efb9 	.word	0x0000efb9
   10740:	00016625 	.word	0x00016625

00010744 <LORAWAN_Resume>:
   10744:	217f      	movs	r1, #127	; 0x7f
   10746:	4b03      	ldr	r3, [pc, #12]	; (10754 <LORAWAN_Resume+0x10>)
   10748:	337c      	adds	r3, #124	; 0x7c
   1074a:	781a      	ldrb	r2, [r3, #0]
   1074c:	400a      	ands	r2, r1
   1074e:	701a      	strb	r2, [r3, #0]
   10750:	4770      	bx	lr
   10752:	46c0      	nop			; (mov r8, r8)
   10754:	20002b5c 	.word	0x20002b5c

00010758 <LorawanLinkCheckConfigure>:
   10758:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1075a:	23fa      	movs	r3, #250	; 0xfa
   1075c:	4c21      	ldr	r4, [pc, #132]	; (107e4 <LorawanLinkCheckConfigure+0x8c>)
   1075e:	009b      	lsls	r3, r3, #2
   10760:	0022      	movs	r2, r4
   10762:	0025      	movs	r5, r4
   10764:	4343      	muls	r3, r0
   10766:	3288      	adds	r2, #136	; 0x88
   10768:	0006      	movs	r6, r0
   1076a:	2102      	movs	r1, #2
   1076c:	2000      	movs	r0, #0
   1076e:	4f1e      	ldr	r7, [pc, #120]	; (107e8 <LorawanLinkCheckConfigure+0x90>)
   10770:	6013      	str	r3, [r2, #0]
   10772:	357c      	adds	r5, #124	; 0x7c
   10774:	47b8      	blx	r7
   10776:	2e00      	cmp	r6, #0
   10778:	d127      	bne.n	107ca <LorawanLinkCheckConfigure+0x72>
   1077a:	0023      	movs	r3, r4
   1077c:	33e7      	adds	r3, #231	; 0xe7
   1077e:	7818      	ldrb	r0, [r3, #0]
   10780:	4b1a      	ldr	r3, [pc, #104]	; (107ec <LorawanLinkCheckConfigure+0x94>)
   10782:	4798      	blx	r3
   10784:	2202      	movs	r2, #2
   10786:	786b      	ldrb	r3, [r5, #1]
   10788:	210b      	movs	r1, #11
   1078a:	4393      	bics	r3, r2
   1078c:	706b      	strb	r3, [r5, #1]
   1078e:	2001      	movs	r0, #1
   10790:	47b8      	blx	r7
   10792:	0023      	movs	r3, r4
   10794:	2701      	movs	r7, #1
   10796:	33d8      	adds	r3, #216	; 0xd8
   10798:	781b      	ldrb	r3, [r3, #0]
   1079a:	0030      	movs	r0, r6
   1079c:	0032      	movs	r2, r6
   1079e:	36ff      	adds	r6, #255	; 0xff
   107a0:	429a      	cmp	r2, r3
   107a2:	d304      	bcc.n	107ae <LorawanLinkCheckConfigure+0x56>
   107a4:	2800      	cmp	r0, #0
   107a6:	d001      	beq.n	107ac <LorawanLinkCheckConfigure+0x54>
   107a8:	34d8      	adds	r4, #216	; 0xd8
   107aa:	7023      	strb	r3, [r4, #0]
   107ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   107ae:	2103      	movs	r1, #3
   107b0:	4351      	muls	r1, r2
   107b2:	1861      	adds	r1, r4, r1
   107b4:	3191      	adds	r1, #145	; 0x91
   107b6:	780d      	ldrb	r5, [r1, #0]
   107b8:	2d02      	cmp	r5, #2
   107ba:	d103      	bne.n	107c4 <LorawanLinkCheckConfigure+0x6c>
   107bc:	0038      	movs	r0, r7
   107be:	3b01      	subs	r3, #1
   107c0:	700e      	strb	r6, [r1, #0]
   107c2:	b2db      	uxtb	r3, r3
   107c4:	3201      	adds	r2, #1
   107c6:	b2d2      	uxtb	r2, r2
   107c8:	e7ea      	b.n	107a0 <LorawanLinkCheckConfigure+0x48>
   107ca:	2302      	movs	r3, #2
   107cc:	786a      	ldrb	r2, [r5, #1]
   107ce:	210b      	movs	r1, #11
   107d0:	4313      	orrs	r3, r2
   107d2:	706b      	strb	r3, [r5, #1]
   107d4:	2001      	movs	r0, #1
   107d6:	47b8      	blx	r7
   107d8:	782b      	ldrb	r3, [r5, #0]
   107da:	07db      	lsls	r3, r3, #31
   107dc:	d5e6      	bpl.n	107ac <LorawanLinkCheckConfigure+0x54>
   107de:	4b04      	ldr	r3, [pc, #16]	; (107f0 <LorawanLinkCheckConfigure+0x98>)
   107e0:	4798      	blx	r3
   107e2:	e7e3      	b.n	107ac <LorawanLinkCheckConfigure+0x54>
   107e4:	20002b5c 	.word	0x20002b5c
   107e8:	0000e0dd 	.word	0x0000e0dd
   107ec:	0000f125 	.word	0x0000f125
   107f0:	000102d9 	.word	0x000102d9

000107f4 <EncodeDeviceTimeReq>:
   107f4:	4b08      	ldr	r3, [pc, #32]	; (10818 <EncodeDeviceTimeReq+0x24>)
   107f6:	b510      	push	{r4, lr}
   107f8:	001c      	movs	r4, r3
   107fa:	34d8      	adds	r4, #216	; 0xd8
   107fc:	7822      	ldrb	r2, [r4, #0]
   107fe:	2015      	movs	r0, #21
   10800:	2a0f      	cmp	r2, #15
   10802:	d808      	bhi.n	10816 <EncodeDeviceTimeReq+0x22>
   10804:	2103      	movs	r1, #3
   10806:	4351      	muls	r1, r2
   10808:	185b      	adds	r3, r3, r1
   1080a:	210d      	movs	r1, #13
   1080c:	3391      	adds	r3, #145	; 0x91
   1080e:	3201      	adds	r2, #1
   10810:	7019      	strb	r1, [r3, #0]
   10812:	7022      	strb	r2, [r4, #0]
   10814:	380d      	subs	r0, #13
   10816:	bd10      	pop	{r4, pc}
   10818:	20002b5c 	.word	0x20002b5c

0001081c <LORAWAN_ForceEnable>:
   1081c:	2140      	movs	r1, #64	; 0x40
   1081e:	4b03      	ldr	r3, [pc, #12]	; (1082c <LORAWAN_ForceEnable+0x10>)
   10820:	337c      	adds	r3, #124	; 0x7c
   10822:	781a      	ldrb	r2, [r3, #0]
   10824:	438a      	bics	r2, r1
   10826:	701a      	strb	r2, [r3, #0]
   10828:	4770      	bx	lr
   1082a:	46c0      	nop			; (mov r8, r8)
   1082c:	20002b5c 	.word	0x20002b5c

00010830 <UpdateCurrentDataRate>:
   10830:	b510      	push	{r4, lr}
   10832:	4b04      	ldr	r3, [pc, #16]	; (10844 <UpdateCurrentDataRate+0x14>)
   10834:	210c      	movs	r1, #12
   10836:	33df      	adds	r3, #223	; 0xdf
   10838:	7018      	strb	r0, [r3, #0]
   1083a:	2001      	movs	r0, #1
   1083c:	4b02      	ldr	r3, [pc, #8]	; (10848 <UpdateCurrentDataRate+0x18>)
   1083e:	4798      	blx	r3
   10840:	bd10      	pop	{r4, pc}
   10842:	46c0      	nop			; (mov r8, r8)
   10844:	20002b5c 	.word	0x20002b5c
   10848:	0000e0dd 	.word	0x0000e0dd

0001084c <UpdateDLSettings>:
   1084c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1084e:	466b      	mov	r3, sp
   10850:	1dde      	adds	r6, r3, #7
   10852:	1d9c      	adds	r4, r3, #6
   10854:	71d8      	strb	r0, [r3, #7]
   10856:	7021      	strb	r1, [r4, #0]
   10858:	2017      	movs	r0, #23
   1085a:	0031      	movs	r1, r6
   1085c:	4d0c      	ldr	r5, [pc, #48]	; (10890 <UpdateDLSettings+0x44>)
   1085e:	47a8      	blx	r5
   10860:	2808      	cmp	r0, #8
   10862:	d107      	bne.n	10874 <UpdateDLSettings+0x28>
   10864:	4b0b      	ldr	r3, [pc, #44]	; (10894 <UpdateDLSettings+0x48>)
   10866:	7832      	ldrb	r2, [r6, #0]
   10868:	336e      	adds	r3, #110	; 0x6e
   1086a:	701a      	strb	r2, [r3, #0]
   1086c:	2100      	movs	r1, #0
   1086e:	3807      	subs	r0, #7
   10870:	4b09      	ldr	r3, [pc, #36]	; (10898 <UpdateDLSettings+0x4c>)
   10872:	4798      	blx	r3
   10874:	0021      	movs	r1, r4
   10876:	2018      	movs	r0, #24
   10878:	47a8      	blx	r5
   1087a:	2808      	cmp	r0, #8
   1087c:	d107      	bne.n	1088e <UpdateDLSettings+0x42>
   1087e:	2101      	movs	r1, #1
   10880:	4b04      	ldr	r3, [pc, #16]	; (10894 <UpdateDLSettings+0x48>)
   10882:	7822      	ldrb	r2, [r4, #0]
   10884:	33ee      	adds	r3, #238	; 0xee
   10886:	701a      	strb	r2, [r3, #0]
   10888:	0008      	movs	r0, r1
   1088a:	4b03      	ldr	r3, [pc, #12]	; (10898 <UpdateDLSettings+0x4c>)
   1088c:	4798      	blx	r3
   1088e:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
   10890:	0000d91d 	.word	0x0000d91d
   10894:	20002b5c 	.word	0x20002b5c
   10898:	0000e0dd 	.word	0x0000e0dd

0001089c <UpdateTxPower>:
   1089c:	b510      	push	{r4, lr}
   1089e:	4b04      	ldr	r3, [pc, #16]	; (108b0 <UpdateTxPower+0x14>)
   108a0:	210a      	movs	r1, #10
   108a2:	33e1      	adds	r3, #225	; 0xe1
   108a4:	7018      	strb	r0, [r3, #0]
   108a6:	2000      	movs	r0, #0
   108a8:	4b02      	ldr	r3, [pc, #8]	; (108b4 <UpdateTxPower+0x18>)
   108aa:	4798      	blx	r3
   108ac:	bd10      	pop	{r4, pc}
   108ae:	46c0      	nop			; (mov r8, r8)
   108b0:	20002b5c 	.word	0x20002b5c
   108b4:	0000e0dd 	.word	0x0000e0dd

000108b8 <UpdateRetransmissionAckTimeoutState>:
   108b8:	4b10      	ldr	r3, [pc, #64]	; (108fc <UpdateRetransmissionAckTimeoutState+0x44>)
   108ba:	b513      	push	{r0, r1, r4, lr}
   108bc:	001a      	movs	r2, r3
   108be:	32f4      	adds	r2, #244	; 0xf4
   108c0:	7812      	ldrb	r2, [r2, #0]
   108c2:	2a01      	cmp	r2, #1
   108c4:	d108      	bne.n	108d8 <UpdateRetransmissionAckTimeoutState+0x20>
   108c6:	0018      	movs	r0, r3
   108c8:	210e      	movs	r1, #14
   108ca:	307c      	adds	r0, #124	; 0x7c
   108cc:	7802      	ldrb	r2, [r0, #0]
   108ce:	438a      	bics	r2, r1
   108d0:	0011      	movs	r1, r2
   108d2:	220c      	movs	r2, #12
   108d4:	430a      	orrs	r2, r1
   108d6:	7002      	strb	r2, [r0, #0]
   108d8:	001a      	movs	r2, r3
   108da:	32d2      	adds	r2, #210	; 0xd2
   108dc:	8811      	ldrh	r1, [r2, #0]
   108de:	4a08      	ldr	r2, [pc, #32]	; (10900 <UpdateRetransmissionAckTimeoutState+0x48>)
   108e0:	4c08      	ldr	r4, [pc, #32]	; (10904 <UpdateRetransmissionAckTimeoutState+0x4c>)
   108e2:	5c9a      	ldrb	r2, [r3, r2]
   108e4:	33e8      	adds	r3, #232	; 0xe8
   108e6:	1a8a      	subs	r2, r1, r2
   108e8:	21fa      	movs	r1, #250	; 0xfa
   108ea:	0089      	lsls	r1, r1, #2
   108ec:	4351      	muls	r1, r2
   108ee:	2200      	movs	r2, #0
   108f0:	7818      	ldrb	r0, [r3, #0]
   108f2:	9200      	str	r2, [sp, #0]
   108f4:	4b04      	ldr	r3, [pc, #16]	; (10908 <UpdateRetransmissionAckTimeoutState+0x50>)
   108f6:	47a0      	blx	r4
   108f8:	bd13      	pop	{r0, r1, r4, pc}
   108fa:	46c0      	nop			; (mov r8, r8)
   108fc:	20002b5c 	.word	0x20002b5c
   10900:	0000021f 	.word	0x0000021f
   10904:	0000ee0d 	.word	0x0000ee0d
   10908:	00012605 	.word	0x00012605

0001090c <UpdateReceiveWindow2Parameters>:
   1090c:	4b06      	ldr	r3, [pc, #24]	; (10928 <UpdateReceiveWindow2Parameters+0x1c>)
   1090e:	b510      	push	{r4, lr}
   10910:	001a      	movs	r2, r3
   10912:	336a      	adds	r3, #106	; 0x6a
   10914:	8018      	strh	r0, [r3, #0]
   10916:	326e      	adds	r2, #110	; 0x6e
   10918:	0c00      	lsrs	r0, r0, #16
   1091a:	8058      	strh	r0, [r3, #2]
   1091c:	7011      	strb	r1, [r2, #0]
   1091e:	2001      	movs	r0, #1
   10920:	2100      	movs	r1, #0
   10922:	4b02      	ldr	r3, [pc, #8]	; (1092c <UpdateReceiveWindow2Parameters+0x20>)
   10924:	4798      	blx	r3
   10926:	bd10      	pop	{r4, pc}
   10928:	20002b5c 	.word	0x20002b5c
   1092c:	0000e0dd 	.word	0x0000e0dd

00010930 <ResetParametersForConfirmedTransmission>:
   10930:	4b0a      	ldr	r3, [pc, #40]	; (1095c <ResetParametersForConfirmedTransmission+0x2c>)
   10932:	001a      	movs	r2, r3
   10934:	32f4      	adds	r2, #244	; 0xf4
   10936:	7812      	ldrb	r2, [r2, #0]
   10938:	2a01      	cmp	r2, #1
   1093a:	d105      	bne.n	10948 <ResetParametersForConfirmedTransmission+0x18>
   1093c:	0019      	movs	r1, r3
   1093e:	200e      	movs	r0, #14
   10940:	317c      	adds	r1, #124	; 0x7c
   10942:	780a      	ldrb	r2, [r1, #0]
   10944:	4382      	bics	r2, r0
   10946:	700a      	strb	r2, [r1, #0]
   10948:	001a      	movs	r2, r3
   1094a:	2100      	movs	r1, #0
   1094c:	338c      	adds	r3, #140	; 0x8c
   1094e:	32dc      	adds	r2, #220	; 0xdc
   10950:	7011      	strb	r1, [r2, #0]
   10952:	781a      	ldrb	r2, [r3, #0]
   10954:	3101      	adds	r1, #1
   10956:	438a      	bics	r2, r1
   10958:	701a      	strb	r2, [r3, #0]
   1095a:	4770      	bx	lr
   1095c:	20002b5c 	.word	0x20002b5c

00010960 <ResetParametersForUnconfirmedTransmission>:
   10960:	4b07      	ldr	r3, [pc, #28]	; (10980 <ResetParametersForUnconfirmedTransmission+0x20>)
   10962:	001a      	movs	r2, r3
   10964:	32f4      	adds	r2, #244	; 0xf4
   10966:	7812      	ldrb	r2, [r2, #0]
   10968:	2a01      	cmp	r2, #1
   1096a:	d105      	bne.n	10978 <ResetParametersForUnconfirmedTransmission+0x18>
   1096c:	0019      	movs	r1, r3
   1096e:	200e      	movs	r0, #14
   10970:	317c      	adds	r1, #124	; 0x7c
   10972:	780a      	ldrb	r2, [r1, #0]
   10974:	4382      	bics	r2, r0
   10976:	700a      	strb	r2, [r1, #0]
   10978:	2200      	movs	r2, #0
   1097a:	33db      	adds	r3, #219	; 0xdb
   1097c:	701a      	strb	r2, [r3, #0]
   1097e:	4770      	bx	lr
   10980:	20002b5c 	.word	0x20002b5c

00010984 <SetJoinFailState>:
   10984:	b570      	push	{r4, r5, r6, lr}
   10986:	4c15      	ldr	r4, [pc, #84]	; (109dc <SetJoinFailState+0x58>)
   10988:	2604      	movs	r6, #4
   1098a:	0025      	movs	r5, r4
   1098c:	358c      	adds	r5, #140	; 0x8c
   1098e:	782a      	ldrb	r2, [r5, #0]
   10990:	0021      	movs	r1, r4
   10992:	43b2      	bics	r2, r6
   10994:	702a      	strb	r2, [r5, #0]
   10996:	22f0      	movs	r2, #240	; 0xf0
   10998:	317c      	adds	r1, #124	; 0x7c
   1099a:	780b      	ldrb	r3, [r1, #0]
   1099c:	4013      	ands	r3, r2
   1099e:	700b      	strb	r3, [r1, #0]
   109a0:	0023      	movs	r3, r4
   109a2:	33ff      	adds	r3, #255	; 0xff
   109a4:	7c5b      	ldrb	r3, [r3, #17]
   109a6:	069b      	lsls	r3, r3, #26
   109a8:	d503      	bpl.n	109b2 <SetJoinFailState+0x2e>
   109aa:	0023      	movs	r3, r4
   109ac:	2200      	movs	r2, #0
   109ae:	337b      	adds	r3, #123	; 0x7b
   109b0:	701a      	strb	r2, [r3, #0]
   109b2:	490b      	ldr	r1, [pc, #44]	; (109e0 <SetJoinFailState+0x5c>)
   109b4:	794a      	ldrb	r2, [r1, #5]
   109b6:	790b      	ldrb	r3, [r1, #4]
   109b8:	0212      	lsls	r2, r2, #8
   109ba:	431a      	orrs	r2, r3
   109bc:	798b      	ldrb	r3, [r1, #6]
   109be:	041b      	lsls	r3, r3, #16
   109c0:	431a      	orrs	r2, r3
   109c2:	79cb      	ldrb	r3, [r1, #7]
   109c4:	061b      	lsls	r3, r3, #24
   109c6:	4313      	orrs	r3, r2
   109c8:	d000      	beq.n	109cc <SetJoinFailState+0x48>
   109ca:	4798      	blx	r3
   109cc:	2300      	movs	r3, #0
   109ce:	34f0      	adds	r4, #240	; 0xf0
   109d0:	7023      	strb	r3, [r4, #0]
   109d2:	210b      	movs	r1, #11
   109d4:	4b03      	ldr	r3, [pc, #12]	; (109e4 <SetJoinFailState+0x60>)
   109d6:	2001      	movs	r0, #1
   109d8:	4798      	blx	r3
   109da:	bd70      	pop	{r4, r5, r6, pc}
   109dc:	20002b5c 	.word	0x20002b5c
   109e0:	20002ea4 	.word	0x20002ea4
   109e4:	0000e0dd 	.word	0x0000e0dd

000109e8 <ExecuteRxParamSetupReq>:
   109e8:	b5f0      	push	{r4, r5, r6, r7, lr}
   109ea:	b085      	sub	sp, #20
   109ec:	7805      	ldrb	r5, [r0, #0]
   109ee:	0004      	movs	r4, r0
   109f0:	1c41      	adds	r1, r0, #1
   109f2:	2204      	movs	r2, #4
   109f4:	4b36      	ldr	r3, [pc, #216]	; (10ad0 <ExecuteRxParamSetupReq+0xe8>)
   109f6:	a803      	add	r0, sp, #12
   109f8:	4798      	blx	r3
   109fa:	2264      	movs	r2, #100	; 0x64
   109fc:	9b03      	ldr	r3, [sp, #12]
   109fe:	a903      	add	r1, sp, #12
   10a00:	021b      	lsls	r3, r3, #8
   10a02:	0a1b      	lsrs	r3, r3, #8
   10a04:	4353      	muls	r3, r2
   10a06:	9303      	str	r3, [sp, #12]
   10a08:	1d23      	adds	r3, r4, #4
   10a0a:	9301      	str	r3, [sp, #4]
   10a0c:	072b      	lsls	r3, r5, #28
   10a0e:	0f1b      	lsrs	r3, r3, #28
   10a10:	b2da      	uxtb	r2, r3
   10a12:	9200      	str	r2, [sp, #0]
   10a14:	aa02      	add	r2, sp, #8
   10a16:	1c96      	adds	r6, r2, #2
   10a18:	066d      	lsls	r5, r5, #25
   10a1a:	7033      	strb	r3, [r6, #0]
   10a1c:	1cd7      	adds	r7, r2, #3
   10a1e:	0f6d      	lsrs	r5, r5, #29
   10a20:	2001      	movs	r0, #1
   10a22:	4b2c      	ldr	r3, [pc, #176]	; (10ad4 <ExecuteRxParamSetupReq+0xec>)
   10a24:	703d      	strb	r5, [r7, #0]
   10a26:	4798      	blx	r3
   10a28:	4c2b      	ldr	r4, [pc, #172]	; (10ad8 <ExecuteRxParamSetupReq+0xf0>)
   10a2a:	2808      	cmp	r0, #8
   10a2c:	d109      	bne.n	10a42 <ExecuteRxParamSetupReq+0x5a>
   10a2e:	0023      	movs	r3, r4
   10a30:	33d8      	adds	r3, #216	; 0xd8
   10a32:	781a      	ldrb	r2, [r3, #0]
   10a34:	2303      	movs	r3, #3
   10a36:	4353      	muls	r3, r2
   10a38:	18e3      	adds	r3, r4, r3
   10a3a:	3390      	adds	r3, #144	; 0x90
   10a3c:	789a      	ldrb	r2, [r3, #2]
   10a3e:	4310      	orrs	r0, r2
   10a40:	7098      	strb	r0, [r3, #2]
   10a42:	0031      	movs	r1, r6
   10a44:	200f      	movs	r0, #15
   10a46:	4e23      	ldr	r6, [pc, #140]	; (10ad4 <ExecuteRxParamSetupReq+0xec>)
   10a48:	47b0      	blx	r6
   10a4a:	2808      	cmp	r0, #8
   10a4c:	d10a      	bne.n	10a64 <ExecuteRxParamSetupReq+0x7c>
   10a4e:	0023      	movs	r3, r4
   10a50:	33d8      	adds	r3, #216	; 0xd8
   10a52:	781a      	ldrb	r2, [r3, #0]
   10a54:	2303      	movs	r3, #3
   10a56:	4353      	muls	r3, r2
   10a58:	2210      	movs	r2, #16
   10a5a:	18e3      	adds	r3, r4, r3
   10a5c:	3390      	adds	r3, #144	; 0x90
   10a5e:	7899      	ldrb	r1, [r3, #2]
   10a60:	430a      	orrs	r2, r1
   10a62:	709a      	strb	r2, [r3, #2]
   10a64:	0039      	movs	r1, r7
   10a66:	2018      	movs	r0, #24
   10a68:	47b0      	blx	r6
   10a6a:	2808      	cmp	r0, #8
   10a6c:	d10a      	bne.n	10a84 <ExecuteRxParamSetupReq+0x9c>
   10a6e:	0023      	movs	r3, r4
   10a70:	33d8      	adds	r3, #216	; 0xd8
   10a72:	781a      	ldrb	r2, [r3, #0]
   10a74:	2303      	movs	r3, #3
   10a76:	4353      	muls	r3, r2
   10a78:	2220      	movs	r2, #32
   10a7a:	18e3      	adds	r3, r4, r3
   10a7c:	3390      	adds	r3, #144	; 0x90
   10a7e:	7899      	ldrb	r1, [r3, #2]
   10a80:	430a      	orrs	r2, r1
   10a82:	709a      	strb	r2, [r3, #2]
   10a84:	0023      	movs	r3, r4
   10a86:	33d8      	adds	r3, #216	; 0xd8
   10a88:	781a      	ldrb	r2, [r3, #0]
   10a8a:	2303      	movs	r3, #3
   10a8c:	4353      	muls	r3, r2
   10a8e:	18e3      	adds	r3, r4, r3
   10a90:	3390      	adds	r3, #144	; 0x90
   10a92:	789e      	ldrb	r6, [r3, #2]
   10a94:	06f3      	lsls	r3, r6, #27
   10a96:	d518      	bpl.n	10aca <ExecuteRxParamSetupReq+0xe2>
   10a98:	0733      	lsls	r3, r6, #28
   10a9a:	d516      	bpl.n	10aca <ExecuteRxParamSetupReq+0xe2>
   10a9c:	06b6      	lsls	r6, r6, #26
   10a9e:	0ff6      	lsrs	r6, r6, #31
   10aa0:	2e01      	cmp	r6, #1
   10aa2:	d112      	bne.n	10aca <ExecuteRxParamSetupReq+0xe2>
   10aa4:	0023      	movs	r3, r4
   10aa6:	33ee      	adds	r3, #238	; 0xee
   10aa8:	701d      	strb	r5, [r3, #0]
   10aaa:	0031      	movs	r1, r6
   10aac:	0030      	movs	r0, r6
   10aae:	4d0b      	ldr	r5, [pc, #44]	; (10adc <ExecuteRxParamSetupReq+0xf4>)
   10ab0:	47a8      	blx	r5
   10ab2:	9900      	ldr	r1, [sp, #0]
   10ab4:	9803      	ldr	r0, [sp, #12]
   10ab6:	4b0a      	ldr	r3, [pc, #40]	; (10ae0 <ExecuteRxParamSetupReq+0xf8>)
   10ab8:	4798      	blx	r3
   10aba:	2340      	movs	r3, #64	; 0x40
   10abc:	347c      	adds	r4, #124	; 0x7c
   10abe:	7862      	ldrb	r2, [r4, #1]
   10ac0:	210b      	movs	r1, #11
   10ac2:	4313      	orrs	r3, r2
   10ac4:	7063      	strb	r3, [r4, #1]
   10ac6:	0030      	movs	r0, r6
   10ac8:	47a8      	blx	r5
   10aca:	9801      	ldr	r0, [sp, #4]
   10acc:	b005      	add	sp, #20
   10ace:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10ad0:	00019d89 	.word	0x00019d89
   10ad4:	0000d91d 	.word	0x0000d91d
   10ad8:	20002b5c 	.word	0x20002b5c
   10adc:	0000e0dd 	.word	0x0000e0dd
   10ae0:	0001090d 	.word	0x0001090d

00010ae4 <ExecuteDutyCycle>:
   10ae4:	b570      	push	{r4, r5, r6, lr}
   10ae6:	7803      	ldrb	r3, [r0, #0]
   10ae8:	1c46      	adds	r6, r0, #1
   10aea:	2b0f      	cmp	r3, #15
   10aec:	d80f      	bhi.n	10b0e <ExecuteDutyCycle+0x2a>
   10aee:	4c09      	ldr	r4, [pc, #36]	; (10b14 <ExecuteDutyCycle+0x30>)
   10af0:	210b      	movs	r1, #11
   10af2:	0022      	movs	r2, r4
   10af4:	2000      	movs	r0, #0
   10af6:	3290      	adds	r2, #144	; 0x90
   10af8:	4d07      	ldr	r5, [pc, #28]	; (10b18 <ExecuteDutyCycle+0x34>)
   10afa:	7013      	strb	r3, [r2, #0]
   10afc:	47a8      	blx	r5
   10afe:	2320      	movs	r3, #32
   10b00:	347c      	adds	r4, #124	; 0x7c
   10b02:	7862      	ldrb	r2, [r4, #1]
   10b04:	210b      	movs	r1, #11
   10b06:	4313      	orrs	r3, r2
   10b08:	7063      	strb	r3, [r4, #1]
   10b0a:	2001      	movs	r0, #1
   10b0c:	47a8      	blx	r5
   10b0e:	0030      	movs	r0, r6
   10b10:	bd70      	pop	{r4, r5, r6, pc}
   10b12:	46c0      	nop			; (mov r8, r8)
   10b14:	20002b5c 	.word	0x20002b5c
   10b18:	0000e0dd 	.word	0x0000e0dd

00010b1c <ExecuteDlChannel>:
   10b1c:	b5f0      	push	{r4, r5, r6, r7, lr}
   10b1e:	b089      	sub	sp, #36	; 0x24
   10b20:	7805      	ldrb	r5, [r0, #0]
   10b22:	ab02      	add	r3, sp, #8
   10b24:	1c41      	adds	r1, r0, #1
   10b26:	0007      	movs	r7, r0
   10b28:	719d      	strb	r5, [r3, #6]
   10b2a:	1d9e      	adds	r6, r3, #6
   10b2c:	2204      	movs	r2, #4
   10b2e:	4b23      	ldr	r3, [pc, #140]	; (10bbc <ExecuteDlChannel+0xa0>)
   10b30:	a805      	add	r0, sp, #20
   10b32:	4798      	blx	r3
   10b34:	9b05      	ldr	r3, [sp, #20]
   10b36:	a904      	add	r1, sp, #16
   10b38:	021c      	lsls	r4, r3, #8
   10b3a:	2364      	movs	r3, #100	; 0x64
   10b3c:	0a24      	lsrs	r4, r4, #8
   10b3e:	435c      	muls	r4, r3
   10b40:	1d3b      	adds	r3, r7, #4
   10b42:	9301      	str	r3, [sp, #4]
   10b44:	2301      	movs	r3, #1
   10b46:	2015      	movs	r0, #21
   10b48:	704b      	strb	r3, [r1, #1]
   10b4a:	4b1d      	ldr	r3, [pc, #116]	; (10bc0 <ExecuteDlChannel+0xa4>)
   10b4c:	9405      	str	r4, [sp, #20]
   10b4e:	700d      	strb	r5, [r1, #0]
   10b50:	4798      	blx	r3
   10b52:	2808      	cmp	r0, #8
   10b54:	d12f      	bne.n	10bb6 <ExecuteDlChannel+0x9a>
   10b56:	ab02      	add	r3, sp, #8
   10b58:	1ddd      	adds	r5, r3, #7
   10b5a:	2300      	movs	r3, #0
   10b5c:	702b      	strb	r3, [r5, #0]
   10b5e:	7833      	ldrb	r3, [r6, #0]
   10b60:	af06      	add	r7, sp, #24
   10b62:	713b      	strb	r3, [r7, #4]
   10b64:	002a      	movs	r2, r5
   10b66:	0031      	movs	r1, r6
   10b68:	300e      	adds	r0, #14
   10b6a:	4b16      	ldr	r3, [pc, #88]	; (10bc4 <ExecuteDlChannel+0xa8>)
   10b6c:	9406      	str	r4, [sp, #24]
   10b6e:	4798      	blx	r3
   10b70:	280a      	cmp	r0, #10
   10b72:	d00d      	beq.n	10b90 <ExecuteDlChannel+0x74>
   10b74:	782a      	ldrb	r2, [r5, #0]
   10b76:	2a01      	cmp	r2, #1
   10b78:	d10a      	bne.n	10b90 <ExecuteDlChannel+0x74>
   10b7a:	4b13      	ldr	r3, [pc, #76]	; (10bc8 <ExecuteDlChannel+0xac>)
   10b7c:	0019      	movs	r1, r3
   10b7e:	31d8      	adds	r1, #216	; 0xd8
   10b80:	7808      	ldrb	r0, [r1, #0]
   10b82:	2103      	movs	r1, #3
   10b84:	4341      	muls	r1, r0
   10b86:	185b      	adds	r3, r3, r1
   10b88:	3390      	adds	r3, #144	; 0x90
   10b8a:	78d9      	ldrb	r1, [r3, #3]
   10b8c:	430a      	orrs	r2, r1
   10b8e:	70da      	strb	r2, [r3, #3]
   10b90:	0039      	movs	r1, r7
   10b92:	2034      	movs	r0, #52	; 0x34
   10b94:	4b0d      	ldr	r3, [pc, #52]	; (10bcc <ExecuteDlChannel+0xb0>)
   10b96:	4798      	blx	r3
   10b98:	2808      	cmp	r0, #8
   10b9a:	d10c      	bne.n	10bb6 <ExecuteDlChannel+0x9a>
   10b9c:	4b0a      	ldr	r3, [pc, #40]	; (10bc8 <ExecuteDlChannel+0xac>)
   10b9e:	001a      	movs	r2, r3
   10ba0:	32d8      	adds	r2, #216	; 0xd8
   10ba2:	7811      	ldrb	r1, [r2, #0]
   10ba4:	2203      	movs	r2, #3
   10ba6:	434a      	muls	r2, r1
   10ba8:	189b      	adds	r3, r3, r2
   10baa:	2280      	movs	r2, #128	; 0x80
   10bac:	3390      	adds	r3, #144	; 0x90
   10bae:	7899      	ldrb	r1, [r3, #2]
   10bb0:	4252      	negs	r2, r2
   10bb2:	430a      	orrs	r2, r1
   10bb4:	709a      	strb	r2, [r3, #2]
   10bb6:	9801      	ldr	r0, [sp, #4]
   10bb8:	b009      	add	sp, #36	; 0x24
   10bba:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10bbc:	00019d89 	.word	0x00019d89
   10bc0:	0000d91d 	.word	0x0000d91d
   10bc4:	0000d901 	.word	0x0000d901
   10bc8:	20002b5c 	.word	0x20002b5c
   10bcc:	0000da29 	.word	0x0000da29

00010bd0 <ExecuteTxParamSetup>:
   10bd0:	220f      	movs	r2, #15
   10bd2:	b513      	push	{r0, r1, r4, lr}
   10bd4:	7803      	ldrb	r3, [r0, #0]
   10bd6:	4c0f      	ldr	r4, [pc, #60]	; (10c14 <ExecuteTxParamSetup+0x44>)
   10bd8:	401a      	ands	r2, r3
   10bda:	5ca2      	ldrb	r2, [r4, r2]
   10bdc:	2401      	movs	r4, #1
   10bde:	a901      	add	r1, sp, #4
   10be0:	700a      	strb	r2, [r1, #0]
   10be2:	111a      	asrs	r2, r3, #4
   10be4:	115b      	asrs	r3, r3, #5
   10be6:	4023      	ands	r3, r4
   10be8:	40a3      	lsls	r3, r4
   10bea:	4022      	ands	r2, r4
   10bec:	4313      	orrs	r3, r2
   10bee:	704b      	strb	r3, [r1, #1]
   10bf0:	1904      	adds	r4, r0, r4
   10bf2:	4b09      	ldr	r3, [pc, #36]	; (10c18 <ExecuteTxParamSetup+0x48>)
   10bf4:	2035      	movs	r0, #53	; 0x35
   10bf6:	4798      	blx	r3
   10bf8:	2808      	cmp	r0, #8
   10bfa:	d009      	beq.n	10c10 <ExecuteTxParamSetup+0x40>
   10bfc:	4b07      	ldr	r3, [pc, #28]	; (10c1c <ExecuteTxParamSetup+0x4c>)
   10bfe:	001a      	movs	r2, r3
   10c00:	32d8      	adds	r2, #216	; 0xd8
   10c02:	7811      	ldrb	r1, [r2, #0]
   10c04:	2203      	movs	r2, #3
   10c06:	434a      	muls	r2, r1
   10c08:	189b      	adds	r3, r3, r2
   10c0a:	22ff      	movs	r2, #255	; 0xff
   10c0c:	3391      	adds	r3, #145	; 0x91
   10c0e:	701a      	strb	r2, [r3, #0]
   10c10:	0020      	movs	r0, r4
   10c12:	bd16      	pop	{r1, r2, r4, pc}
   10c14:	000202b7 	.word	0x000202b7
   10c18:	0000da29 	.word	0x0000da29
   10c1c:	20002b5c 	.word	0x20002b5c

00010c20 <ExecuteLinkAdr>:
   10c20:	220f      	movs	r2, #15
   10c22:	b5f0      	push	{r4, r5, r6, r7, lr}
   10c24:	0005      	movs	r5, r0
   10c26:	7803      	ldrb	r3, [r0, #0]
   10c28:	b089      	sub	sp, #36	; 0x24
   10c2a:	401a      	ands	r2, r3
   10c2c:	a905      	add	r1, sp, #20
   10c2e:	700a      	strb	r2, [r1, #0]
   10c30:	aa04      	add	r2, sp, #16
   10c32:	1d96      	adds	r6, r2, #6
   10c34:	091b      	lsrs	r3, r3, #4
   10c36:	7153      	strb	r3, [r2, #5]
   10c38:	1c41      	adds	r1, r0, #1
   10c3a:	2202      	movs	r2, #2
   10c3c:	0030      	movs	r0, r6
   10c3e:	4b35      	ldr	r3, [pc, #212]	; (10d14 <ExecuteLinkAdr+0xf4>)
   10c40:	4798      	blx	r3
   10c42:	2201      	movs	r2, #1
   10c44:	1d2b      	adds	r3, r5, #4
   10c46:	9303      	str	r3, [sp, #12]
   10c48:	78eb      	ldrb	r3, [r5, #3]
   10c4a:	4f33      	ldr	r7, [pc, #204]	; (10d18 <ExecuteLinkAdr+0xf8>)
   10c4c:	4c33      	ldr	r4, [pc, #204]	; (10d1c <ExecuteLinkAdr+0xfc>)
   10c4e:	065b      	lsls	r3, r3, #25
   10c50:	0f5b      	lsrs	r3, r3, #29
   10c52:	9300      	str	r3, [sp, #0]
   10c54:	5d3b      	ldrb	r3, [r7, r4]
   10c56:	a906      	add	r1, sp, #24
   10c58:	4393      	bics	r3, r2
   10c5a:	1892      	adds	r2, r2, r2
   10c5c:	4393      	bics	r3, r2
   10c5e:	3202      	adds	r2, #2
   10c60:	4393      	bics	r3, r2
   10c62:	553b      	strb	r3, [r7, r4]
   10c64:	466b      	mov	r3, sp
   10c66:	781b      	ldrb	r3, [r3, #0]
   10c68:	8836      	ldrh	r6, [r6, #0]
   10c6a:	700b      	strb	r3, [r1, #0]
   10c6c:	2038      	movs	r0, #56	; 0x38
   10c6e:	4b2c      	ldr	r3, [pc, #176]	; (10d20 <ExecuteLinkAdr+0x100>)
   10c70:	804e      	strh	r6, [r1, #2]
   10c72:	4798      	blx	r3
   10c74:	2808      	cmp	r0, #8
   10c76:	d116      	bne.n	10ca6 <ExecuteLinkAdr+0x86>
   10c78:	466b      	mov	r3, sp
   10c7a:	781b      	ldrb	r3, [r3, #0]
   10c7c:	a907      	add	r1, sp, #28
   10c7e:	708b      	strb	r3, [r1, #2]
   10c80:	3014      	adds	r0, #20
   10c82:	4b28      	ldr	r3, [pc, #160]	; (10d24 <ExecuteLinkAdr+0x104>)
   10c84:	800e      	strh	r6, [r1, #0]
   10c86:	4798      	blx	r3
   10c88:	2201      	movs	r2, #1
   10c8a:	5d3b      	ldrb	r3, [r7, r4]
   10c8c:	2010      	movs	r0, #16
   10c8e:	4313      	orrs	r3, r2
   10c90:	553b      	strb	r3, [r7, r4]
   10c92:	ab04      	add	r3, sp, #16
   10c94:	1d59      	adds	r1, r3, #5
   10c96:	4b22      	ldr	r3, [pc, #136]	; (10d20 <ExecuteLinkAdr+0x100>)
   10c98:	4798      	blx	r3
   10c9a:	2808      	cmp	r0, #8
   10c9c:	d103      	bne.n	10ca6 <ExecuteLinkAdr+0x86>
   10c9e:	2202      	movs	r2, #2
   10ca0:	5d3b      	ldrb	r3, [r7, r4]
   10ca2:	4313      	orrs	r3, r2
   10ca4:	553b      	strb	r3, [r7, r4]
   10ca6:	af05      	add	r7, sp, #20
   10ca8:	4b1d      	ldr	r3, [pc, #116]	; (10d20 <ExecuteLinkAdr+0x100>)
   10caa:	0039      	movs	r1, r7
   10cac:	201d      	movs	r0, #29
   10cae:	4798      	blx	r3
   10cb0:	4b19      	ldr	r3, [pc, #100]	; (10d18 <ExecuteLinkAdr+0xf8>)
   10cb2:	2808      	cmp	r0, #8
   10cb4:	d103      	bne.n	10cbe <ExecuteLinkAdr+0x9e>
   10cb6:	2204      	movs	r2, #4
   10cb8:	5d19      	ldrb	r1, [r3, r4]
   10cba:	430a      	orrs	r2, r1
   10cbc:	551a      	strb	r2, [r3, r4]
   10cbe:	2207      	movs	r2, #7
   10cc0:	5d19      	ldrb	r1, [r3, r4]
   10cc2:	4011      	ands	r1, r2
   10cc4:	4291      	cmp	r1, r2
   10cc6:	d11d      	bne.n	10d04 <ExecuteLinkAdr+0xe4>
   10cc8:	4a17      	ldr	r2, [pc, #92]	; (10d28 <ExecuteLinkAdr+0x108>)
   10cca:	2470      	movs	r4, #112	; 0x70
   10ccc:	549e      	strb	r6, [r3, r2]
   10cce:	189a      	adds	r2, r3, r2
   10cd0:	0a36      	lsrs	r6, r6, #8
   10cd2:	7056      	strb	r6, [r2, #1]
   10cd4:	aa04      	add	r2, sp, #16
   10cd6:	7950      	ldrb	r0, [r2, #5]
   10cd8:	2286      	movs	r2, #134	; 0x86
   10cda:	0092      	lsls	r2, r2, #2
   10cdc:	5498      	strb	r0, [r3, r2]
   10cde:	78ea      	ldrb	r2, [r5, #3]
   10ce0:	4812      	ldr	r0, [pc, #72]	; (10d2c <ExecuteLinkAdr+0x10c>)
   10ce2:	0912      	lsrs	r2, r2, #4
   10ce4:	400a      	ands	r2, r1
   10ce6:	5c19      	ldrb	r1, [r3, r0]
   10ce8:	0112      	lsls	r2, r2, #4
   10cea:	43a1      	bics	r1, r4
   10cec:	430a      	orrs	r2, r1
   10cee:	541a      	strb	r2, [r3, r0]
   10cf0:	78e9      	ldrb	r1, [r5, #3]
   10cf2:	3c61      	subs	r4, #97	; 0x61
   10cf4:	b2d2      	uxtb	r2, r2
   10cf6:	4021      	ands	r1, r4
   10cf8:	43a2      	bics	r2, r4
   10cfa:	430a      	orrs	r2, r1
   10cfc:	541a      	strb	r2, [r3, r0]
   10cfe:	7839      	ldrb	r1, [r7, #0]
   10d00:	4a0b      	ldr	r2, [pc, #44]	; (10d30 <ExecuteLinkAdr+0x110>)
   10d02:	5499      	strb	r1, [r3, r2]
   10d04:	4904      	ldr	r1, [pc, #16]	; (10d18 <ExecuteLinkAdr+0xf8>)
   10d06:	4a0b      	ldr	r2, [pc, #44]	; (10d34 <ExecuteLinkAdr+0x114>)
   10d08:	9803      	ldr	r0, [sp, #12]
   10d0a:	5c8b      	ldrb	r3, [r1, r2]
   10d0c:	3301      	adds	r3, #1
   10d0e:	548b      	strb	r3, [r1, r2]
   10d10:	b009      	add	sp, #36	; 0x24
   10d12:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10d14:	00019d89 	.word	0x00019d89
   10d18:	20002b5c 	.word	0x20002b5c
   10d1c:	00000217 	.word	0x00000217
   10d20:	0000d91d 	.word	0x0000d91d
   10d24:	0000da29 	.word	0x0000da29
   10d28:	0000021b 	.word	0x0000021b
   10d2c:	0000021d 	.word	0x0000021d
   10d30:	00000219 	.word	0x00000219
   10d34:	0000021a 	.word	0x0000021a

00010d38 <ExecuteDevTimeAns>:
   10d38:	b510      	push	{r4, lr}
   10d3a:	0001      	movs	r1, r0
   10d3c:	0004      	movs	r4, r0
   10d3e:	2204      	movs	r2, #4
   10d40:	4b04      	ldr	r3, [pc, #16]	; (10d54 <ExecuteDevTimeAns+0x1c>)
   10d42:	4805      	ldr	r0, [pc, #20]	; (10d58 <ExecuteDevTimeAns+0x20>)
   10d44:	4798      	blx	r3
   10d46:	238b      	movs	r3, #139	; 0x8b
   10d48:	7921      	ldrb	r1, [r4, #4]
   10d4a:	4a04      	ldr	r2, [pc, #16]	; (10d5c <ExecuteDevTimeAns+0x24>)
   10d4c:	009b      	lsls	r3, r3, #2
   10d4e:	1d60      	adds	r0, r4, #5
   10d50:	54d1      	strb	r1, [r2, r3]
   10d52:	bd10      	pop	{r4, pc}
   10d54:	00019d89 	.word	0x00019d89
   10d58:	20002d84 	.word	0x20002d84
   10d5c:	20002b5c 	.word	0x20002b5c

00010d60 <PrepareJoinRequestFrame>:
   10d60:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   10d62:	2210      	movs	r2, #16
   10d64:	4d22      	ldr	r5, [pc, #136]	; (10df0 <PrepareJoinRequestFrame+0x90>)
   10d66:	4b23      	ldr	r3, [pc, #140]	; (10df4 <PrepareJoinRequestFrame+0x94>)
   10d68:	32ff      	adds	r2, #255	; 0xff
   10d6a:	2100      	movs	r1, #0
   10d6c:	0028      	movs	r0, r5
   10d6e:	4798      	blx	r3
   10d70:	2300      	movs	r3, #0
   10d72:	4c21      	ldr	r4, [pc, #132]	; (10df8 <PrepareJoinRequestFrame+0x98>)
   10d74:	702b      	strb	r3, [r5, #0]
   10d76:	4b21      	ldr	r3, [pc, #132]	; (10dfc <PrepareJoinRequestFrame+0x9c>)
   10d78:	5ce3      	ldrb	r3, [r4, r3]
   10d7a:	2b00      	cmp	r3, #0
   10d7c:	d006      	beq.n	10d8c <PrepareJoinRequestFrame+0x2c>
   10d7e:	4920      	ldr	r1, [pc, #128]	; (10e00 <PrepareJoinRequestFrame+0xa0>)
   10d80:	2006      	movs	r0, #6
   10d82:	4e20      	ldr	r6, [pc, #128]	; (10e04 <PrepareJoinRequestFrame+0xa4>)
   10d84:	47b0      	blx	r6
   10d86:	4920      	ldr	r1, [pc, #128]	; (10e08 <PrepareJoinRequestFrame+0xa8>)
   10d88:	2007      	movs	r0, #7
   10d8a:	47b0      	blx	r6
   10d8c:	2300      	movs	r3, #0
   10d8e:	205c      	movs	r0, #92	; 0x5c
   10d90:	1ac1      	subs	r1, r0, r3
   10d92:	5c61      	ldrb	r1, [r4, r1]
   10d94:	18ea      	adds	r2, r5, r3
   10d96:	3301      	adds	r3, #1
   10d98:	7051      	strb	r1, [r2, #1]
   10d9a:	2b08      	cmp	r3, #8
   10d9c:	d1f8      	bne.n	10d90 <PrepareJoinRequestFrame+0x30>
   10d9e:	2300      	movs	r3, #0
   10da0:	2064      	movs	r0, #100	; 0x64
   10da2:	1ac1      	subs	r1, r0, r3
   10da4:	5c61      	ldrb	r1, [r4, r1]
   10da6:	18ea      	adds	r2, r5, r3
   10da8:	3301      	adds	r3, #1
   10daa:	7251      	strb	r1, [r2, #9]
   10dac:	2b08      	cmp	r3, #8
   10dae:	d1f8      	bne.n	10da2 <PrepareJoinRequestFrame+0x42>
   10db0:	4b16      	ldr	r3, [pc, #88]	; (10e0c <PrepareJoinRequestFrame+0xac>)
   10db2:	4798      	blx	r3
   10db4:	4b16      	ldr	r3, [pc, #88]	; (10e10 <PrepareJoinRequestFrame+0xb0>)
   10db6:	4917      	ldr	r1, [pc, #92]	; (10e14 <PrepareJoinRequestFrame+0xb4>)
   10db8:	4798      	blx	r3
   10dba:	34c4      	adds	r4, #196	; 0xc4
   10dbc:	8021      	strh	r1, [r4, #0]
   10dbe:	2202      	movs	r2, #2
   10dc0:	0021      	movs	r1, r4
   10dc2:	4815      	ldr	r0, [pc, #84]	; (10e18 <PrepareJoinRequestFrame+0xb8>)
   10dc4:	4c15      	ldr	r4, [pc, #84]	; (10e1c <PrepareJoinRequestFrame+0xbc>)
   10dc6:	47a0      	blx	r4
   10dc8:	2313      	movs	r3, #19
   10dca:	4e15      	ldr	r6, [pc, #84]	; (10e20 <PrepareJoinRequestFrame+0xc0>)
   10dcc:	9300      	str	r3, [sp, #0]
   10dce:	0032      	movs	r2, r6
   10dd0:	002b      	movs	r3, r5
   10dd2:	2100      	movs	r1, #0
   10dd4:	4d13      	ldr	r5, [pc, #76]	; (10e24 <PrepareJoinRequestFrame+0xc4>)
   10dd6:	4814      	ldr	r0, [pc, #80]	; (10e28 <PrepareJoinRequestFrame+0xc8>)
   10dd8:	47a8      	blx	r5
   10dda:	0031      	movs	r1, r6
   10ddc:	2204      	movs	r2, #4
   10dde:	a803      	add	r0, sp, #12
   10de0:	47a0      	blx	r4
   10de2:	2204      	movs	r2, #4
   10de4:	a903      	add	r1, sp, #12
   10de6:	4811      	ldr	r0, [pc, #68]	; (10e2c <PrepareJoinRequestFrame+0xcc>)
   10de8:	47a0      	blx	r4
   10dea:	2017      	movs	r0, #23
   10dec:	b004      	add	sp, #16
   10dee:	bd70      	pop	{r4, r5, r6, pc}
   10df0:	20002d91 	.word	0x20002d91
   10df4:	00019ead 	.word	0x00019ead
   10df8:	20002b5c 	.word	0x20002b5c
   10dfc:	00000221 	.word	0x00000221
   10e00:	20002bb1 	.word	0x20002bb1
   10e04:	0000dd41 	.word	0x0000dd41
   10e08:	20002bb9 	.word	0x20002bb9
   10e0c:	0001a04d 	.word	0x0001a04d
   10e10:	00016905 	.word	0x00016905
   10e14:	0000ffff 	.word	0x0000ffff
   10e18:	20002da2 	.word	0x20002da2
   10e1c:	00019d89 	.word	0x00019d89
   10e20:	20001110 	.word	0x20001110
   10e24:	0000dde9 	.word	0x0000dde9
   10e28:	20002ba1 	.word	0x20002ba1
   10e2c:	20002da4 	.word	0x20002da4

00010e30 <ConfigureRadioRx>:
   10e30:	b5f0      	push	{r4, r5, r6, r7, lr}
   10e32:	b087      	sub	sp, #28
   10e34:	466b      	mov	r3, sp
   10e36:	2600      	movs	r6, #0
   10e38:	1ddc      	adds	r4, r3, #7
   10e3a:	71d8      	strb	r0, [r3, #7]
   10e3c:	729e      	strb	r6, [r3, #10]
   10e3e:	466a      	mov	r2, sp
   10e40:	2301      	movs	r3, #1
   10e42:	72d3      	strb	r3, [r2, #11]
   10e44:	2215      	movs	r2, #21
   10e46:	ad03      	add	r5, sp, #12
   10e48:	4f11      	ldr	r7, [pc, #68]	; (10e90 <ConfigureRadioRx+0x60>)
   10e4a:	9100      	str	r1, [sp, #0]
   10e4c:	446a      	add	r2, sp
   10e4e:	0021      	movs	r1, r4
   10e50:	2023      	movs	r0, #35	; 0x23
   10e52:	80ae      	strh	r6, [r5, #4]
   10e54:	47b8      	blx	r7
   10e56:	2216      	movs	r2, #22
   10e58:	0021      	movs	r1, r4
   10e5a:	446a      	add	r2, sp
   10e5c:	2024      	movs	r0, #36	; 0x24
   10e5e:	47b8      	blx	r7
   10e60:	2217      	movs	r2, #23
   10e62:	0021      	movs	r1, r4
   10e64:	446a      	add	r2, sp
   10e66:	2025      	movs	r0, #37	; 0x25
   10e68:	47b8      	blx	r7
   10e6a:	9b00      	ldr	r3, [sp, #0]
   10e6c:	0028      	movs	r0, r5
   10e6e:	9303      	str	r3, [sp, #12]
   10e70:	4b08      	ldr	r3, [pc, #32]	; (10e94 <ConfigureRadioRx+0x64>)
   10e72:	80ae      	strh	r6, [r5, #4]
   10e74:	4798      	blx	r3
   10e76:	230a      	movs	r3, #10
   10e78:	446b      	add	r3, sp
   10e7a:	0019      	movs	r1, r3
   10e7c:	4c06      	ldr	r4, [pc, #24]	; (10e98 <ConfigureRadioRx+0x68>)
   10e7e:	2014      	movs	r0, #20
   10e80:	47a0      	blx	r4
   10e82:	230b      	movs	r3, #11
   10e84:	446b      	add	r3, sp
   10e86:	0019      	movs	r1, r3
   10e88:	2006      	movs	r0, #6
   10e8a:	47a0      	blx	r4
   10e8c:	b007      	add	sp, #28
   10e8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10e90:	0000d901 	.word	0x0000d901
   10e94:	00010245 	.word	0x00010245
   10e98:	00014c4d 	.word	0x00014c4d

00010e9c <LorawanReceiveWindow1Callback>:
   10e9c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   10e9e:	4c18      	ldr	r4, [pc, #96]	; (10f00 <LorawanReceiveWindow1Callback+0x64>)
   10ea0:	0023      	movs	r3, r4
   10ea2:	337c      	adds	r3, #124	; 0x7c
   10ea4:	781b      	ldrb	r3, [r3, #0]
   10ea6:	b25a      	sxtb	r2, r3
   10ea8:	2a00      	cmp	r2, #0
   10eaa:	db28      	blt.n	10efe <LorawanReceiveWindow1Callback+0x62>
   10eac:	0022      	movs	r2, r4
   10eae:	32f4      	adds	r2, #244	; 0xf4
   10eb0:	7812      	ldrb	r2, [r2, #0]
   10eb2:	2a04      	cmp	r2, #4
   10eb4:	d103      	bne.n	10ebe <LorawanReceiveWindow1Callback+0x22>
   10eb6:	07db      	lsls	r3, r3, #31
   10eb8:	d501      	bpl.n	10ebe <LorawanReceiveWindow1Callback+0x22>
   10eba:	4b12      	ldr	r3, [pc, #72]	; (10f04 <LorawanReceiveWindow1Callback+0x68>)
   10ebc:	4798      	blx	r3
   10ebe:	0021      	movs	r1, r4
   10ec0:	220e      	movs	r2, #14
   10ec2:	317c      	adds	r1, #124	; 0x7c
   10ec4:	780b      	ldrb	r3, [r1, #0]
   10ec6:	ad01      	add	r5, sp, #4
   10ec8:	4393      	bics	r3, r2
   10eca:	001a      	movs	r2, r3
   10ecc:	2306      	movs	r3, #6
   10ece:	4313      	orrs	r3, r2
   10ed0:	0022      	movs	r2, r4
   10ed2:	700b      	strb	r3, [r1, #0]
   10ed4:	3268      	adds	r2, #104	; 0x68
   10ed6:	6e63      	ldr	r3, [r4, #100]	; 0x64
   10ed8:	7811      	ldrb	r1, [r2, #0]
   10eda:	0a1b      	lsrs	r3, r3, #8
   10edc:	3469      	adds	r4, #105	; 0x69
   10ede:	0609      	lsls	r1, r1, #24
   10ee0:	4319      	orrs	r1, r3
   10ee2:	7820      	ldrb	r0, [r4, #0]
   10ee4:	4b08      	ldr	r3, [pc, #32]	; (10f08 <LorawanReceiveWindow1Callback+0x6c>)
   10ee6:	4798      	blx	r3
   10ee8:	2300      	movs	r3, #0
   10eea:	702b      	strb	r3, [r5, #0]
   10eec:	466b      	mov	r3, sp
   10eee:	0021      	movs	r1, r4
   10ef0:	1d9a      	adds	r2, r3, #6
   10ef2:	2003      	movs	r0, #3
   10ef4:	4b05      	ldr	r3, [pc, #20]	; (10f0c <LorawanReceiveWindow1Callback+0x70>)
   10ef6:	4798      	blx	r3
   10ef8:	0028      	movs	r0, r5
   10efa:	4b05      	ldr	r3, [pc, #20]	; (10f10 <LorawanReceiveWindow1Callback+0x74>)
   10efc:	4798      	blx	r3
   10efe:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
   10f00:	20002b5c 	.word	0x20002b5c
   10f04:	0001427d 	.word	0x0001427d
   10f08:	00010e31 	.word	0x00010e31
   10f0c:	0000d901 	.word	0x0000d901
   10f10:	00015e51 	.word	0x00015e51

00010f14 <ConfigureRadioTx>:
   10f14:	b5f0      	push	{r4, r5, r6, r7, lr}
   10f16:	2517      	movs	r5, #23
   10f18:	2300      	movs	r3, #0
   10f1a:	2616      	movs	r6, #22
   10f1c:	2701      	movs	r7, #1
   10f1e:	b087      	sub	sp, #28
   10f20:	ac01      	add	r4, sp, #4
   10f22:	446d      	add	r5, sp
   10f24:	9001      	str	r0, [sp, #4]
   10f26:	702b      	strb	r3, [r5, #0]
   10f28:	0020      	movs	r0, r4
   10f2a:	4b10      	ldr	r3, [pc, #64]	; (10f6c <ConfigureRadioTx+0x58>)
   10f2c:	446e      	add	r6, sp
   10f2e:	9102      	str	r1, [sp, #8]
   10f30:	9203      	str	r2, [sp, #12]
   10f32:	7037      	strb	r7, [r6, #0]
   10f34:	4798      	blx	r3
   10f36:	79e3      	ldrb	r3, [r4, #7]
   10f38:	4c0d      	ldr	r4, [pc, #52]	; (10f70 <ConfigureRadioTx+0x5c>)
   10f3a:	2b00      	cmp	r3, #0
   10f3c:	d00a      	beq.n	10f54 <ConfigureRadioTx+0x40>
   10f3e:	4b0d      	ldr	r3, [pc, #52]	; (10f74 <ConfigureRadioTx+0x60>)
   10f40:	4a0d      	ldr	r2, [pc, #52]	; (10f78 <ConfigureRadioTx+0x64>)
   10f42:	490e      	ldr	r1, [pc, #56]	; (10f7c <ConfigureRadioTx+0x68>)
   10f44:	54d7      	strb	r7, [r2, r3]
   10f46:	200b      	movs	r0, #11
   10f48:	4b0d      	ldr	r3, [pc, #52]	; (10f80 <ConfigureRadioTx+0x6c>)
   10f4a:	4798      	blx	r3
   10f4c:	210a      	movs	r1, #10
   10f4e:	200b      	movs	r0, #11
   10f50:	4469      	add	r1, sp
   10f52:	47a0      	blx	r4
   10f54:	a903      	add	r1, sp, #12
   10f56:	2004      	movs	r0, #4
   10f58:	47a0      	blx	r4
   10f5a:	0031      	movs	r1, r6
   10f5c:	2014      	movs	r0, #20
   10f5e:	47a0      	blx	r4
   10f60:	0029      	movs	r1, r5
   10f62:	2006      	movs	r0, #6
   10f64:	47a0      	blx	r4
   10f66:	b007      	add	sp, #28
   10f68:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10f6a:	46c0      	nop			; (mov r8, r8)
   10f6c:	00010245 	.word	0x00010245
   10f70:	00014c4d 	.word	0x00014c4d
   10f74:	00000216 	.word	0x00000216
   10f78:	20002b5c 	.word	0x20002b5c
   10f7c:	20002d71 	.word	0x20002d71
   10f80:	00014b5d 	.word	0x00014b5d

00010f84 <LorawanGetChAndInitiateRadioTransmit>:
   10f84:	2301      	movs	r3, #1
   10f86:	b530      	push	{r4, r5, lr}
   10f88:	4c44      	ldr	r4, [pc, #272]	; (1109c <LorawanGetChAndInitiateRadioTransmit+0x118>)
   10f8a:	b089      	sub	sp, #36	; 0x24
   10f8c:	a902      	add	r1, sp, #8
   10f8e:	700b      	strb	r3, [r1, #0]
   10f90:	0023      	movs	r3, r4
   10f92:	33e1      	adds	r3, #225	; 0xe1
   10f94:	781b      	ldrb	r3, [r3, #0]
   10f96:	704b      	strb	r3, [r1, #1]
   10f98:	0023      	movs	r3, r4
   10f9a:	33df      	adds	r3, #223	; 0xdf
   10f9c:	781b      	ldrb	r3, [r3, #0]
   10f9e:	708b      	strb	r3, [r1, #2]
   10fa0:	0023      	movs	r3, r4
   10fa2:	33f4      	adds	r3, #244	; 0xf4
   10fa4:	781b      	ldrb	r3, [r3, #0]
   10fa6:	2b01      	cmp	r3, #1
   10fa8:	d108      	bne.n	10fbc <LorawanGetChAndInitiateRadioTransmit+0x38>
   10faa:	0020      	movs	r0, r4
   10fac:	220e      	movs	r2, #14
   10fae:	307c      	adds	r0, #124	; 0x7c
   10fb0:	7803      	ldrb	r3, [r0, #0]
   10fb2:	4393      	bics	r3, r2
   10fb4:	001a      	movs	r2, r3
   10fb6:	230c      	movs	r3, #12
   10fb8:	4313      	orrs	r3, r2
   10fba:	7003      	strb	r3, [r0, #0]
   10fbc:	aa05      	add	r2, sp, #20
   10fbe:	202f      	movs	r0, #47	; 0x2f
   10fc0:	4d37      	ldr	r5, [pc, #220]	; (110a0 <LorawanGetChAndInitiateRadioTransmit+0x11c>)
   10fc2:	47a8      	blx	r5
   10fc4:	0023      	movs	r3, r4
   10fc6:	2808      	cmp	r0, #8
   10fc8:	d131      	bne.n	1102e <LorawanGetChAndInitiateRadioTransmit+0xaa>
   10fca:	33f4      	adds	r3, #244	; 0xf4
   10fcc:	781b      	ldrb	r3, [r3, #0]
   10fce:	ad03      	add	r5, sp, #12
   10fd0:	2b04      	cmp	r3, #4
   10fd2:	d104      	bne.n	10fde <LorawanGetChAndInitiateRadioTransmit+0x5a>
   10fd4:	3b03      	subs	r3, #3
   10fd6:	702b      	strb	r3, [r5, #0]
   10fd8:	0028      	movs	r0, r5
   10fda:	4b32      	ldr	r3, [pc, #200]	; (110a4 <LorawanGetChAndInitiateRadioTransmit+0x120>)
   10fdc:	4798      	blx	r3
   10fde:	9805      	ldr	r0, [sp, #20]
   10fe0:	4b31      	ldr	r3, [pc, #196]	; (110a8 <LorawanGetChAndInitiateRadioTransmit+0x124>)
   10fe2:	9906      	ldr	r1, [sp, #24]
   10fe4:	9a07      	ldr	r2, [sp, #28]
   10fe6:	4798      	blx	r3
   10fe8:	0023      	movs	r3, r4
   10fea:	33c6      	adds	r3, #198	; 0xc6
   10fec:	881b      	ldrh	r3, [r3, #0]
   10fee:	0028      	movs	r0, r5
   10ff0:	702b      	strb	r3, [r5, #0]
   10ff2:	4b2e      	ldr	r3, [pc, #184]	; (110ac <LorawanGetChAndInitiateRadioTransmit+0x128>)
   10ff4:	606b      	str	r3, [r5, #4]
   10ff6:	4b2e      	ldr	r3, [pc, #184]	; (110b0 <LorawanGetChAndInitiateRadioTransmit+0x12c>)
   10ff8:	4798      	blx	r3
   10ffa:	2800      	cmp	r0, #0
   10ffc:	d109      	bne.n	11012 <LorawanGetChAndInitiateRadioTransmit+0x8e>
   10ffe:	220e      	movs	r2, #14
   11000:	347c      	adds	r4, #124	; 0x7c
   11002:	7823      	ldrb	r3, [r4, #0]
   11004:	4393      	bics	r3, r2
   11006:	001a      	movs	r2, r3
   11008:	2302      	movs	r3, #2
   1100a:	4313      	orrs	r3, r2
   1100c:	7023      	strb	r3, [r4, #0]
   1100e:	b009      	add	sp, #36	; 0x24
   11010:	bd30      	pop	{r4, r5, pc}
   11012:	2200      	movs	r2, #0
   11014:	4b27      	ldr	r3, [pc, #156]	; (110b4 <LorawanGetChAndInitiateRadioTransmit+0x130>)
   11016:	4928      	ldr	r1, [pc, #160]	; (110b8 <LorawanGetChAndInitiateRadioTransmit+0x134>)
   11018:	5ce3      	ldrb	r3, [r4, r3]
   1101a:	34f3      	adds	r4, #243	; 0xf3
   1101c:	4359      	muls	r1, r3
   1101e:	4b27      	ldr	r3, [pc, #156]	; (110bc <LorawanGetChAndInitiateRadioTransmit+0x138>)
   11020:	7820      	ldrb	r0, [r4, #0]
   11022:	18c9      	adds	r1, r1, r3
   11024:	4b26      	ldr	r3, [pc, #152]	; (110c0 <LorawanGetChAndInitiateRadioTransmit+0x13c>)
   11026:	9200      	str	r2, [sp, #0]
   11028:	4c26      	ldr	r4, [pc, #152]	; (110c4 <LorawanGetChAndInitiateRadioTransmit+0x140>)
   1102a:	47a0      	blx	r4
   1102c:	e7ef      	b.n	1100e <LorawanGetChAndInitiateRadioTransmit+0x8a>
   1102e:	33ff      	adds	r3, #255	; 0xff
   11030:	7c5b      	ldrb	r3, [r3, #17]
   11032:	079a      	lsls	r2, r3, #30
   11034:	d515      	bpl.n	11062 <LorawanGetChAndInitiateRadioTransmit+0xde>
   11036:	aa03      	add	r2, sp, #12
   11038:	4923      	ldr	r1, [pc, #140]	; (110c8 <LorawanGetChAndInitiateRadioTransmit+0x144>)
   1103a:	2026      	movs	r0, #38	; 0x26
   1103c:	47a8      	blx	r5
   1103e:	9b03      	ldr	r3, [sp, #12]
   11040:	1c5a      	adds	r2, r3, #1
   11042:	d001      	beq.n	11048 <LorawanGetChAndInitiateRadioTransmit+0xc4>
   11044:	3314      	adds	r3, #20
   11046:	9303      	str	r3, [sp, #12]
   11048:	21fa      	movs	r1, #250	; 0xfa
   1104a:	4b1a      	ldr	r3, [pc, #104]	; (110b4 <LorawanGetChAndInitiateRadioTransmit+0x130>)
   1104c:	9a03      	ldr	r2, [sp, #12]
   1104e:	5ce3      	ldrb	r3, [r4, r3]
   11050:	0089      	lsls	r1, r1, #2
   11052:	1ad3      	subs	r3, r2, r3
   11054:	2200      	movs	r2, #0
   11056:	4359      	muls	r1, r3
   11058:	34e9      	adds	r4, #233	; 0xe9
   1105a:	7820      	ldrb	r0, [r4, #0]
   1105c:	9200      	str	r2, [sp, #0]
   1105e:	4b1b      	ldr	r3, [pc, #108]	; (110cc <LorawanGetChAndInitiateRadioTransmit+0x148>)
   11060:	e7e2      	b.n	11028 <LorawanGetChAndInitiateRadioTransmit+0xa4>
   11062:	075b      	lsls	r3, r3, #29
   11064:	d508      	bpl.n	11078 <LorawanGetChAndInitiateRadioTransmit+0xf4>
   11066:	aa03      	add	r2, sp, #12
   11068:	4917      	ldr	r1, [pc, #92]	; (110c8 <LorawanGetChAndInitiateRadioTransmit+0x144>)
   1106a:	2033      	movs	r0, #51	; 0x33
   1106c:	47a8      	blx	r5
   1106e:	9b03      	ldr	r3, [sp, #12]
   11070:	1c5a      	adds	r2, r3, #1
   11072:	d0e9      	beq.n	11048 <LorawanGetChAndInitiateRadioTransmit+0xc4>
   11074:	3301      	adds	r3, #1
   11076:	e7e6      	b.n	11046 <LorawanGetChAndInitiateRadioTransmit+0xc2>
   11078:	0023      	movs	r3, r4
   1107a:	2201      	movs	r2, #1
   1107c:	338c      	adds	r3, #140	; 0x8c
   1107e:	781b      	ldrb	r3, [r3, #0]
   11080:	401a      	ands	r2, r3
   11082:	d108      	bne.n	11096 <LorawanGetChAndInitiateRadioTransmit+0x112>
   11084:	4b0b      	ldr	r3, [pc, #44]	; (110b4 <LorawanGetChAndInitiateRadioTransmit+0x130>)
   11086:	490c      	ldr	r1, [pc, #48]	; (110b8 <LorawanGetChAndInitiateRadioTransmit+0x134>)
   11088:	5ce3      	ldrb	r3, [r4, r3]
   1108a:	34e9      	adds	r4, #233	; 0xe9
   1108c:	4359      	muls	r1, r3
   1108e:	4b0b      	ldr	r3, [pc, #44]	; (110bc <LorawanGetChAndInitiateRadioTransmit+0x138>)
   11090:	7820      	ldrb	r0, [r4, #0]
   11092:	18c9      	adds	r1, r1, r3
   11094:	e7e2      	b.n	1105c <LorawanGetChAndInitiateRadioTransmit+0xd8>
   11096:	4b0e      	ldr	r3, [pc, #56]	; (110d0 <LorawanGetChAndInitiateRadioTransmit+0x14c>)
   11098:	4798      	blx	r3
   1109a:	e7b8      	b.n	1100e <LorawanGetChAndInitiateRadioTransmit+0x8a>
   1109c:	20002b5c 	.word	0x20002b5c
   110a0:	0000d901 	.word	0x0000d901
   110a4:	00015e51 	.word	0x00015e51
   110a8:	00010f15 	.word	0x00010f15
   110ac:	20002da1 	.word	0x20002da1
   110b0:	0001557d 	.word	0x0001557d
   110b4:	0000021f 	.word	0x0000021f
   110b8:	fffffc18 	.word	0xfffffc18
   110bc:	001e8480 	.word	0x001e8480
   110c0:	000110d5 	.word	0x000110d5
   110c4:	0000ee0d 	.word	0x0000ee0d
   110c8:	20002c3b 	.word	0x20002c3b
   110cc:	0001118d 	.word	0x0001118d
   110d0:	000108b9 	.word	0x000108b9

000110d4 <TransmissionErrorCallback>:
   110d4:	b530      	push	{r4, r5, lr}
   110d6:	4c22      	ldr	r4, [pc, #136]	; (11160 <TransmissionErrorCallback+0x8c>)
   110d8:	2501      	movs	r5, #1
   110da:	0023      	movs	r3, r4
   110dc:	b08b      	sub	sp, #44	; 0x2c
   110de:	a903      	add	r1, sp, #12
   110e0:	700d      	strb	r5, [r1, #0]
   110e2:	33e1      	adds	r3, #225	; 0xe1
   110e4:	781b      	ldrb	r3, [r3, #0]
   110e6:	aa07      	add	r2, sp, #28
   110e8:	704b      	strb	r3, [r1, #1]
   110ea:	0023      	movs	r3, r4
   110ec:	33df      	adds	r3, #223	; 0xdf
   110ee:	781b      	ldrb	r3, [r3, #0]
   110f0:	202f      	movs	r0, #47	; 0x2f
   110f2:	708b      	strb	r3, [r1, #2]
   110f4:	4b1b      	ldr	r3, [pc, #108]	; (11164 <TransmissionErrorCallback+0x90>)
   110f6:	4798      	blx	r3
   110f8:	2808      	cmp	r0, #8
   110fa:	d121      	bne.n	11140 <TransmissionErrorCallback+0x6c>
   110fc:	a804      	add	r0, sp, #16
   110fe:	4b1a      	ldr	r3, [pc, #104]	; (11168 <TransmissionErrorCallback+0x94>)
   11100:	7005      	strb	r5, [r0, #0]
   11102:	4798      	blx	r3
   11104:	9807      	ldr	r0, [sp, #28]
   11106:	4b19      	ldr	r3, [pc, #100]	; (1116c <TransmissionErrorCallback+0x98>)
   11108:	9908      	ldr	r1, [sp, #32]
   1110a:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1110c:	4798      	blx	r3
   1110e:	0023      	movs	r3, r4
   11110:	33c6      	adds	r3, #198	; 0xc6
   11112:	881b      	ldrh	r3, [r3, #0]
   11114:	a805      	add	r0, sp, #20
   11116:	7003      	strb	r3, [r0, #0]
   11118:	4b15      	ldr	r3, [pc, #84]	; (11170 <TransmissionErrorCallback+0x9c>)
   1111a:	6043      	str	r3, [r0, #4]
   1111c:	4b15      	ldr	r3, [pc, #84]	; (11174 <TransmissionErrorCallback+0xa0>)
   1111e:	4798      	blx	r3
   11120:	2800      	cmp	r0, #0
   11122:	d01a      	beq.n	1115a <TransmissionErrorCallback+0x86>
   11124:	0023      	movs	r3, r4
   11126:	33f4      	adds	r3, #244	; 0xf4
   11128:	781b      	ldrb	r3, [r3, #0]
   1112a:	42ab      	cmp	r3, r5
   1112c:	d108      	bne.n	11140 <TransmissionErrorCallback+0x6c>
   1112e:	0021      	movs	r1, r4
   11130:	220e      	movs	r2, #14
   11132:	317c      	adds	r1, #124	; 0x7c
   11134:	780b      	ldrb	r3, [r1, #0]
   11136:	4393      	bics	r3, r2
   11138:	001a      	movs	r2, r3
   1113a:	230c      	movs	r3, #12
   1113c:	4313      	orrs	r3, r2
   1113e:	700b      	strb	r3, [r1, #0]
   11140:	2200      	movs	r2, #0
   11142:	4b0d      	ldr	r3, [pc, #52]	; (11178 <TransmissionErrorCallback+0xa4>)
   11144:	490d      	ldr	r1, [pc, #52]	; (1117c <TransmissionErrorCallback+0xa8>)
   11146:	5ce3      	ldrb	r3, [r4, r3]
   11148:	34f3      	adds	r4, #243	; 0xf3
   1114a:	4359      	muls	r1, r3
   1114c:	4b0c      	ldr	r3, [pc, #48]	; (11180 <TransmissionErrorCallback+0xac>)
   1114e:	7820      	ldrb	r0, [r4, #0]
   11150:	18c9      	adds	r1, r1, r3
   11152:	9200      	str	r2, [sp, #0]
   11154:	4b0b      	ldr	r3, [pc, #44]	; (11184 <TransmissionErrorCallback+0xb0>)
   11156:	4c0c      	ldr	r4, [pc, #48]	; (11188 <TransmissionErrorCallback+0xb4>)
   11158:	47a0      	blx	r4
   1115a:	b00b      	add	sp, #44	; 0x2c
   1115c:	bd30      	pop	{r4, r5, pc}
   1115e:	46c0      	nop			; (mov r8, r8)
   11160:	20002b5c 	.word	0x20002b5c
   11164:	0000d901 	.word	0x0000d901
   11168:	00015e51 	.word	0x00015e51
   1116c:	00010f15 	.word	0x00010f15
   11170:	20002da1 	.word	0x20002da1
   11174:	0001557d 	.word	0x0001557d
   11178:	0000021f 	.word	0x0000021f
   1117c:	fffffc18 	.word	0xfffffc18
   11180:	001e8480 	.word	0x001e8480
   11184:	000110d5 	.word	0x000110d5
   11188:	0000ee0d 	.word	0x0000ee0d

0001118c <UnconfirmedTransmissionCallback>:
   1118c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1118e:	4c37      	ldr	r4, [pc, #220]	; (1126c <UnconfirmedTransmissionCallback+0xe0>)
   11190:	b08b      	sub	sp, #44	; 0x2c
   11192:	0023      	movs	r3, r4
   11194:	33c6      	adds	r3, #198	; 0xc6
   11196:	881b      	ldrh	r3, [r3, #0]
   11198:	af05      	add	r7, sp, #20
   1119a:	703b      	strb	r3, [r7, #0]
   1119c:	4b34      	ldr	r3, [pc, #208]	; (11270 <UnconfirmedTransmissionCallback+0xe4>)
   1119e:	a903      	add	r1, sp, #12
   111a0:	9306      	str	r3, [sp, #24]
   111a2:	2301      	movs	r3, #1
   111a4:	700b      	strb	r3, [r1, #0]
   111a6:	0023      	movs	r3, r4
   111a8:	0026      	movs	r6, r4
   111aa:	33e1      	adds	r3, #225	; 0xe1
   111ac:	781b      	ldrb	r3, [r3, #0]
   111ae:	36df      	adds	r6, #223	; 0xdf
   111b0:	704b      	strb	r3, [r1, #1]
   111b2:	7833      	ldrb	r3, [r6, #0]
   111b4:	aa07      	add	r2, sp, #28
   111b6:	202f      	movs	r0, #47	; 0x2f
   111b8:	4d2e      	ldr	r5, [pc, #184]	; (11274 <UnconfirmedTransmissionCallback+0xe8>)
   111ba:	708b      	strb	r3, [r1, #2]
   111bc:	47a8      	blx	r5
   111be:	2808      	cmp	r0, #8
   111c0:	d12b      	bne.n	1121a <UnconfirmedTransmissionCallback+0x8e>
   111c2:	2301      	movs	r3, #1
   111c4:	a804      	add	r0, sp, #16
   111c6:	7003      	strb	r3, [r0, #0]
   111c8:	4b2b      	ldr	r3, [pc, #172]	; (11278 <UnconfirmedTransmissionCallback+0xec>)
   111ca:	4798      	blx	r3
   111cc:	9807      	ldr	r0, [sp, #28]
   111ce:	4b2b      	ldr	r3, [pc, #172]	; (1127c <UnconfirmedTransmissionCallback+0xf0>)
   111d0:	9908      	ldr	r1, [sp, #32]
   111d2:	9a09      	ldr	r2, [sp, #36]	; 0x24
   111d4:	4798      	blx	r3
   111d6:	0038      	movs	r0, r7
   111d8:	4b29      	ldr	r3, [pc, #164]	; (11280 <UnconfirmedTransmissionCallback+0xf4>)
   111da:	4798      	blx	r3
   111dc:	2800      	cmp	r0, #0
   111de:	d01a      	beq.n	11216 <UnconfirmedTransmissionCallback+0x8a>
   111e0:	0023      	movs	r3, r4
   111e2:	33f4      	adds	r3, #244	; 0xf4
   111e4:	781b      	ldrb	r3, [r3, #0]
   111e6:	2b01      	cmp	r3, #1
   111e8:	d108      	bne.n	111fc <UnconfirmedTransmissionCallback+0x70>
   111ea:	0021      	movs	r1, r4
   111ec:	220e      	movs	r2, #14
   111ee:	317c      	adds	r1, #124	; 0x7c
   111f0:	780b      	ldrb	r3, [r1, #0]
   111f2:	4393      	bics	r3, r2
   111f4:	001a      	movs	r2, r3
   111f6:	230c      	movs	r3, #12
   111f8:	4313      	orrs	r3, r2
   111fa:	700b      	strb	r3, [r1, #0]
   111fc:	2200      	movs	r2, #0
   111fe:	4b21      	ldr	r3, [pc, #132]	; (11284 <UnconfirmedTransmissionCallback+0xf8>)
   11200:	4921      	ldr	r1, [pc, #132]	; (11288 <UnconfirmedTransmissionCallback+0xfc>)
   11202:	5ce3      	ldrb	r3, [r4, r3]
   11204:	34f3      	adds	r4, #243	; 0xf3
   11206:	4359      	muls	r1, r3
   11208:	4b20      	ldr	r3, [pc, #128]	; (1128c <UnconfirmedTransmissionCallback+0x100>)
   1120a:	7820      	ldrb	r0, [r4, #0]
   1120c:	18c9      	adds	r1, r1, r3
   1120e:	4b20      	ldr	r3, [pc, #128]	; (11290 <UnconfirmedTransmissionCallback+0x104>)
   11210:	9200      	str	r2, [sp, #0]
   11212:	4c20      	ldr	r4, [pc, #128]	; (11294 <UnconfirmedTransmissionCallback+0x108>)
   11214:	47a0      	blx	r4
   11216:	b00b      	add	sp, #44	; 0x2c
   11218:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1121a:	23fa      	movs	r3, #250	; 0xfa
   1121c:	00db      	lsls	r3, r3, #3
   1121e:	9304      	str	r3, [sp, #16]
   11220:	0023      	movs	r3, r4
   11222:	33ff      	adds	r3, #255	; 0xff
   11224:	7c5b      	ldrb	r3, [r3, #17]
   11226:	079a      	lsls	r2, r3, #30
   11228:	d515      	bpl.n	11256 <UnconfirmedTransmissionCallback+0xca>
   1122a:	aa04      	add	r2, sp, #16
   1122c:	0031      	movs	r1, r6
   1122e:	2026      	movs	r0, #38	; 0x26
   11230:	47a8      	blx	r5
   11232:	9b04      	ldr	r3, [sp, #16]
   11234:	1c5a      	adds	r2, r3, #1
   11236:	d001      	beq.n	1123c <UnconfirmedTransmissionCallback+0xb0>
   11238:	3314      	adds	r3, #20
   1123a:	9304      	str	r3, [sp, #16]
   1123c:	4b11      	ldr	r3, [pc, #68]	; (11284 <UnconfirmedTransmissionCallback+0xf8>)
   1123e:	9a04      	ldr	r2, [sp, #16]
   11240:	5ce3      	ldrb	r3, [r4, r3]
   11242:	21fa      	movs	r1, #250	; 0xfa
   11244:	1ad3      	subs	r3, r2, r3
   11246:	2200      	movs	r2, #0
   11248:	0089      	lsls	r1, r1, #2
   1124a:	34e9      	adds	r4, #233	; 0xe9
   1124c:	4359      	muls	r1, r3
   1124e:	7820      	ldrb	r0, [r4, #0]
   11250:	4b11      	ldr	r3, [pc, #68]	; (11298 <UnconfirmedTransmissionCallback+0x10c>)
   11252:	9200      	str	r2, [sp, #0]
   11254:	e7dd      	b.n	11212 <UnconfirmedTransmissionCallback+0x86>
   11256:	075b      	lsls	r3, r3, #29
   11258:	d5f0      	bpl.n	1123c <UnconfirmedTransmissionCallback+0xb0>
   1125a:	aa04      	add	r2, sp, #16
   1125c:	0031      	movs	r1, r6
   1125e:	2033      	movs	r0, #51	; 0x33
   11260:	47a8      	blx	r5
   11262:	9b04      	ldr	r3, [sp, #16]
   11264:	1c5a      	adds	r2, r3, #1
   11266:	d0e9      	beq.n	1123c <UnconfirmedTransmissionCallback+0xb0>
   11268:	3301      	adds	r3, #1
   1126a:	e7e6      	b.n	1123a <UnconfirmedTransmissionCallback+0xae>
   1126c:	20002b5c 	.word	0x20002b5c
   11270:	20002da1 	.word	0x20002da1
   11274:	0000d901 	.word	0x0000d901
   11278:	00015e51 	.word	0x00015e51
   1127c:	00010f15 	.word	0x00010f15
   11280:	0001557d 	.word	0x0001557d
   11284:	0000021f 	.word	0x0000021f
   11288:	fffffc18 	.word	0xfffffc18
   1128c:	001e8480 	.word	0x001e8480
   11290:	000110d5 	.word	0x000110d5
   11294:	0000ee0d 	.word	0x0000ee0d
   11298:	0001118d 	.word	0x0001118d

0001129c <UpdateJoinInProgress>:
   1129c:	b570      	push	{r4, r5, r6, lr}
   1129e:	2504      	movs	r5, #4
   112a0:	4c0a      	ldr	r4, [pc, #40]	; (112cc <UpdateJoinInProgress+0x30>)
   112a2:	0002      	movs	r2, r0
   112a4:	0021      	movs	r1, r4
   112a6:	348c      	adds	r4, #140	; 0x8c
   112a8:	7826      	ldrb	r6, [r4, #0]
   112aa:	2001      	movs	r0, #1
   112ac:	4335      	orrs	r5, r6
   112ae:	7025      	strb	r5, [r4, #0]
   112b0:	2407      	movs	r4, #7
   112b2:	4022      	ands	r2, r4
   112b4:	4082      	lsls	r2, r0
   112b6:	317c      	adds	r1, #124	; 0x7c
   112b8:	780b      	ldrb	r3, [r1, #0]
   112ba:	1924      	adds	r4, r4, r4
   112bc:	4383      	bics	r3, r0
   112be:	43a3      	bics	r3, r4
   112c0:	4313      	orrs	r3, r2
   112c2:	700b      	strb	r3, [r1, #0]
   112c4:	210b      	movs	r1, #11
   112c6:	4b02      	ldr	r3, [pc, #8]	; (112d0 <UpdateJoinInProgress+0x34>)
   112c8:	4798      	blx	r3
   112ca:	bd70      	pop	{r4, r5, r6, pc}
   112cc:	20002b5c 	.word	0x20002b5c
   112d0:	0000e0dd 	.word	0x0000e0dd

000112d4 <LORAWAN_Join>:
   112d4:	b573      	push	{r0, r1, r4, r5, r6, lr}
   112d6:	4c33      	ldr	r4, [pc, #204]	; (113a4 <LORAWAN_Join+0xd0>)
   112d8:	0006      	movs	r6, r0
   112da:	0023      	movs	r3, r4
   112dc:	337c      	adds	r3, #124	; 0x7c
   112de:	781b      	ldrb	r3, [r3, #0]
   112e0:	200f      	movs	r0, #15
   112e2:	b25a      	sxtb	r2, r3
   112e4:	2a00      	cmp	r2, #0
   112e6:	db4a      	blt.n	1137e <LORAWAN_Join+0xaa>
   112e8:	3803      	subs	r0, #3
   112ea:	065b      	lsls	r3, r3, #25
   112ec:	d447      	bmi.n	1137e <LORAWAN_Join+0xaa>
   112ee:	0023      	movs	r3, r4
   112f0:	338c      	adds	r3, #140	; 0x8c
   112f2:	781b      	ldrb	r3, [r3, #0]
   112f4:	3007      	adds	r0, #7
   112f6:	075b      	lsls	r3, r3, #29
   112f8:	d441      	bmi.n	1137e <LORAWAN_Join+0xaa>
   112fa:	0023      	movs	r3, r4
   112fc:	33f4      	adds	r3, #244	; 0xf4
   112fe:	781b      	ldrb	r3, [r3, #0]
   11300:	2b04      	cmp	r3, #4
   11302:	d037      	beq.n	11374 <LORAWAN_Join+0xa0>
   11304:	0023      	movs	r3, r4
   11306:	33f4      	adds	r3, #244	; 0xf4
   11308:	781b      	ldrb	r3, [r3, #0]
   1130a:	2b01      	cmp	r3, #1
   1130c:	d105      	bne.n	1131a <LORAWAN_Join+0x46>
   1130e:	0023      	movs	r3, r4
   11310:	337c      	adds	r3, #124	; 0x7c
   11312:	781a      	ldrb	r2, [r3, #0]
   11314:	230e      	movs	r3, #14
   11316:	421a      	tst	r2, r3
   11318:	d130      	bne.n	1137c <LORAWAN_Join+0xa8>
   1131a:	2102      	movs	r1, #2
   1131c:	2001      	movs	r0, #1
   1131e:	4d22      	ldr	r5, [pc, #136]	; (113a8 <LORAWAN_Join+0xd4>)
   11320:	7026      	strb	r6, [r4, #0]
   11322:	47a8      	blx	r5
   11324:	0023      	movs	r3, r4
   11326:	33d6      	adds	r3, #214	; 0xd6
   11328:	781b      	ldrb	r3, [r3, #0]
   1132a:	2e00      	cmp	r6, #0
   1132c:	d128      	bne.n	11380 <LORAWAN_Join+0xac>
   1132e:	200b      	movs	r0, #11
   11330:	4003      	ands	r3, r0
   11332:	4283      	cmp	r3, r0
   11334:	d003      	beq.n	1133e <LORAWAN_Join+0x6a>
   11336:	4b1d      	ldr	r3, [pc, #116]	; (113ac <LORAWAN_Join+0xd8>)
   11338:	5ce3      	ldrb	r3, [r4, r3]
   1133a:	2b00      	cmp	r3, #0
   1133c:	d01f      	beq.n	1137e <LORAWAN_Join+0xaa>
   1133e:	0023      	movs	r3, r4
   11340:	337c      	adds	r3, #124	; 0x7c
   11342:	781b      	ldrb	r3, [r3, #0]
   11344:	07db      	lsls	r3, r3, #31
   11346:	d503      	bpl.n	11350 <LORAWAN_Join+0x7c>
   11348:	2100      	movs	r1, #0
   1134a:	203b      	movs	r0, #59	; 0x3b
   1134c:	4b18      	ldr	r3, [pc, #96]	; (113b0 <LORAWAN_Join+0xdc>)
   1134e:	4798      	blx	r3
   11350:	0022      	movs	r2, r4
   11352:	2001      	movs	r0, #1
   11354:	327c      	adds	r2, #124	; 0x7c
   11356:	7813      	ldrb	r3, [r2, #0]
   11358:	348c      	adds	r4, #140	; 0x8c
   1135a:	4383      	bics	r3, r0
   1135c:	7013      	strb	r3, [r2, #0]
   1135e:	2304      	movs	r3, #4
   11360:	7822      	ldrb	r2, [r4, #0]
   11362:	210b      	movs	r1, #11
   11364:	4313      	orrs	r3, r2
   11366:	7023      	strb	r3, [r4, #0]
   11368:	47a8      	blx	r5
   1136a:	2000      	movs	r0, #0
   1136c:	4b11      	ldr	r3, [pc, #68]	; (113b4 <LORAWAN_Join+0xe0>)
   1136e:	4798      	blx	r3
   11370:	2008      	movs	r0, #8
   11372:	e004      	b.n	1137e <LORAWAN_Join+0xaa>
   11374:	4b10      	ldr	r3, [pc, #64]	; (113b8 <LORAWAN_Join+0xe4>)
   11376:	4798      	blx	r3
   11378:	2808      	cmp	r0, #8
   1137a:	d0c3      	beq.n	11304 <LORAWAN_Join+0x30>
   1137c:	2011      	movs	r0, #17
   1137e:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
   11380:	2234      	movs	r2, #52	; 0x34
   11382:	200b      	movs	r0, #11
   11384:	4013      	ands	r3, r2
   11386:	4293      	cmp	r3, r2
   11388:	d1f9      	bne.n	1137e <LORAWAN_Join+0xaa>
   1138a:	3804      	subs	r0, #4
   1138c:	4b0b      	ldr	r3, [pc, #44]	; (113bc <LORAWAN_Join+0xe8>)
   1138e:	4798      	blx	r3
   11390:	2200      	movs	r2, #0
   11392:	34f2      	adds	r4, #242	; 0xf2
   11394:	7820      	ldrb	r0, [r4, #0]
   11396:	4b0a      	ldr	r3, [pc, #40]	; (113c0 <LORAWAN_Join+0xec>)
   11398:	9200      	str	r2, [sp, #0]
   1139a:	490a      	ldr	r1, [pc, #40]	; (113c4 <LORAWAN_Join+0xf0>)
   1139c:	4c0a      	ldr	r4, [pc, #40]	; (113c8 <LORAWAN_Join+0xf4>)
   1139e:	47a0      	blx	r4
   113a0:	e7e6      	b.n	11370 <LORAWAN_Join+0x9c>
   113a2:	46c0      	nop			; (mov r8, r8)
   113a4:	20002b5c 	.word	0x20002b5c
   113a8:	0000e0dd 	.word	0x0000e0dd
   113ac:	00000221 	.word	0x00000221
   113b0:	0000da29 	.word	0x0000da29
   113b4:	00014ad9 	.word	0x00014ad9
   113b8:	000141dd 	.word	0x000141dd
   113bc:	0001129d 	.word	0x0001129d
   113c0:	000100d9 	.word	0x000100d9
   113c4:	0000c350 	.word	0x0000c350
   113c8:	0000ee0d 	.word	0x0000ee0d

000113cc <EncryptFRMPayload>:
   113cc:	b5f0      	push	{r4, r5, r6, r7, lr}
   113ce:	0007      	movs	r7, r0
   113d0:	2401      	movs	r4, #1
   113d2:	b089      	sub	sp, #36	; 0x24
   113d4:	9306      	str	r3, [sp, #24]
   113d6:	ab10      	add	r3, sp, #64	; 0x40
   113d8:	781d      	ldrb	r5, [r3, #0]
   113da:	090b      	lsrs	r3, r1, #4
   113dc:	9104      	str	r1, [sp, #16]
   113de:	9205      	str	r2, [sp, #20]
   113e0:	9303      	str	r3, [sp, #12]
   113e2:	9b03      	ldr	r3, [sp, #12]
   113e4:	429c      	cmp	r4, r3
   113e6:	d907      	bls.n	113f8 <EncryptFRMPayload+0x2c>
   113e8:	260f      	movs	r6, #15
   113ea:	9b04      	ldr	r3, [sp, #16]
   113ec:	4033      	ands	r3, r6
   113ee:	1e1e      	subs	r6, r3, #0
   113f0:	d126      	bne.n	11440 <EncryptFRMPayload+0x74>
   113f2:	2000      	movs	r0, #0
   113f4:	b009      	add	sp, #36	; 0x24
   113f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   113f8:	9b12      	ldr	r3, [sp, #72]	; 0x48
   113fa:	0022      	movs	r2, r4
   113fc:	9300      	str	r3, [sp, #0]
   113fe:	9906      	ldr	r1, [sp, #24]
   11400:	2301      	movs	r3, #1
   11402:	9805      	ldr	r0, [sp, #20]
   11404:	4e1e      	ldr	r6, [pc, #120]	; (11480 <EncryptFRMPayload+0xb4>)
   11406:	47b0      	blx	r6
   11408:	4e1e      	ldr	r6, [pc, #120]	; (11484 <EncryptFRMPayload+0xb8>)
   1140a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   1140c:	2101      	movs	r1, #1
   1140e:	0030      	movs	r0, r6
   11410:	4b1d      	ldr	r3, [pc, #116]	; (11488 <EncryptFRMPayload+0xbc>)
   11412:	4798      	blx	r3
   11414:	2800      	cmp	r0, #0
   11416:	d1ed      	bne.n	113f4 <EncryptFRMPayload+0x28>
   11418:	1e63      	subs	r3, r4, #1
   1141a:	011b      	lsls	r3, r3, #4
   1141c:	18fb      	adds	r3, r7, r3
   1141e:	9307      	str	r3, [sp, #28]
   11420:	9b07      	ldr	r3, [sp, #28]
   11422:	182a      	adds	r2, r5, r0
   11424:	5c19      	ldrb	r1, [r3, r0]
   11426:	5d83      	ldrb	r3, [r0, r6]
   11428:	b2d2      	uxtb	r2, r2
   1142a:	4059      	eors	r1, r3
   1142c:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1142e:	3001      	adds	r0, #1
   11430:	5499      	strb	r1, [r3, r2]
   11432:	2810      	cmp	r0, #16
   11434:	d1f4      	bne.n	11420 <EncryptFRMPayload+0x54>
   11436:	3510      	adds	r5, #16
   11438:	3401      	adds	r4, #1
   1143a:	b2ed      	uxtb	r5, r5
   1143c:	b2e4      	uxtb	r4, r4
   1143e:	e7d0      	b.n	113e2 <EncryptFRMPayload+0x16>
   11440:	9b12      	ldr	r3, [sp, #72]	; 0x48
   11442:	0022      	movs	r2, r4
   11444:	9300      	str	r3, [sp, #0]
   11446:	9906      	ldr	r1, [sp, #24]
   11448:	2301      	movs	r3, #1
   1144a:	9805      	ldr	r0, [sp, #20]
   1144c:	4c0c      	ldr	r4, [pc, #48]	; (11480 <EncryptFRMPayload+0xb4>)
   1144e:	47a0      	blx	r4
   11450:	4c0c      	ldr	r4, [pc, #48]	; (11484 <EncryptFRMPayload+0xb8>)
   11452:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   11454:	2101      	movs	r1, #1
   11456:	0020      	movs	r0, r4
   11458:	4b0b      	ldr	r3, [pc, #44]	; (11488 <EncryptFRMPayload+0xbc>)
   1145a:	4798      	blx	r3
   1145c:	2800      	cmp	r0, #0
   1145e:	d1c9      	bne.n	113f4 <EncryptFRMPayload+0x28>
   11460:	9b03      	ldr	r3, [sp, #12]
   11462:	011b      	lsls	r3, r3, #4
   11464:	18fb      	adds	r3, r7, r3
   11466:	5d07      	ldrb	r7, [r0, r4]
   11468:	5c19      	ldrb	r1, [r3, r0]
   1146a:	182a      	adds	r2, r5, r0
   1146c:	4079      	eors	r1, r7
   1146e:	9f11      	ldr	r7, [sp, #68]	; 0x44
   11470:	b2d2      	uxtb	r2, r2
   11472:	3001      	adds	r0, #1
   11474:	54b9      	strb	r1, [r7, r2]
   11476:	b2c2      	uxtb	r2, r0
   11478:	4296      	cmp	r6, r2
   1147a:	d8f4      	bhi.n	11466 <EncryptFRMPayload+0x9a>
   1147c:	e7b9      	b.n	113f2 <EncryptFRMPayload+0x26>
   1147e:	46c0      	nop			; (mov r8, r8)
   11480:	00010205 	.word	0x00010205
   11484:	20001110 	.word	0x20001110
   11488:	0000dc7d 	.word	0x0000dc7d

0001148c <UpdateTransactionCompleteCbParams>:
   1148c:	2385      	movs	r3, #133	; 0x85
   1148e:	2201      	movs	r2, #1
   11490:	b570      	push	{r4, r5, r6, lr}
   11492:	0001      	movs	r1, r0
   11494:	4c14      	ldr	r4, [pc, #80]	; (114e8 <UpdateTransactionCompleteCbParams+0x5c>)
   11496:	4815      	ldr	r0, [pc, #84]	; (114ec <UpdateTransactionCompleteCbParams+0x60>)
   11498:	009b      	lsls	r3, r3, #2
   1149a:	54e2      	strb	r2, [r4, r3]
   1149c:	7842      	ldrb	r2, [r0, #1]
   1149e:	7803      	ldrb	r3, [r0, #0]
   114a0:	0212      	lsls	r2, r2, #8
   114a2:	431a      	orrs	r2, r3
   114a4:	7883      	ldrb	r3, [r0, #2]
   114a6:	041b      	lsls	r3, r3, #16
   114a8:	431a      	orrs	r2, r3
   114aa:	78c3      	ldrb	r3, [r0, #3]
   114ac:	061b      	lsls	r3, r3, #24
   114ae:	4313      	orrs	r3, r2
   114b0:	d010      	beq.n	114d4 <UpdateTransactionCompleteCbParams+0x48>
   114b2:	0022      	movs	r2, r4
   114b4:	2504      	movs	r5, #4
   114b6:	32f8      	adds	r2, #248	; 0xf8
   114b8:	6812      	ldr	r2, [r2, #0]
   114ba:	422a      	tst	r2, r5
   114bc:	d00a      	beq.n	114d4 <UpdateTransactionCompleteCbParams+0x48>
   114be:	0022      	movs	r2, r4
   114c0:	32fc      	adds	r2, #252	; 0xfc
   114c2:	6810      	ldr	r0, [r2, #0]
   114c4:	2800      	cmp	r0, #0
   114c6:	d005      	beq.n	114d4 <UpdateTransactionCompleteCbParams+0x48>
   114c8:	0022      	movs	r2, r4
   114ca:	32ff      	adds	r2, #255	; 0xff
   114cc:	7151      	strb	r1, [r2, #5]
   114ce:	7055      	strb	r5, [r2, #1]
   114d0:	4907      	ldr	r1, [pc, #28]	; (114f0 <UpdateTransactionCompleteCbParams+0x64>)
   114d2:	4798      	blx	r3
   114d4:	2385      	movs	r3, #133	; 0x85
   114d6:	009b      	lsls	r3, r3, #2
   114d8:	5ce3      	ldrb	r3, [r4, r3]
   114da:	2b00      	cmp	r3, #0
   114dc:	d002      	beq.n	114e4 <UpdateTransactionCompleteCbParams+0x58>
   114de:	2300      	movs	r3, #0
   114e0:	34fc      	adds	r4, #252	; 0xfc
   114e2:	6023      	str	r3, [r4, #0]
   114e4:	bd70      	pop	{r4, r5, r6, pc}
   114e6:	46c0      	nop			; (mov r8, r8)
   114e8:	20002b5c 	.word	0x20002b5c
   114ec:	20002ea4 	.word	0x20002ea4
   114f0:	20002c5c 	.word	0x20002c5c

000114f4 <AssemblePacket>:
   114f4:	b5f0      	push	{r4, r5, r6, r7, lr}
   114f6:	2710      	movs	r7, #16
   114f8:	b08d      	sub	sp, #52	; 0x34
   114fa:	9306      	str	r3, [sp, #24]
   114fc:	ab04      	add	r3, sp, #16
   114fe:	839f      	strh	r7, [r3, #28]
   11500:	231e      	movs	r3, #30
   11502:	9208      	str	r2, [sp, #32]
   11504:	aa04      	add	r2, sp, #16
   11506:	189b      	adds	r3, r3, r2
   11508:	2500      	movs	r5, #0
   1150a:	2210      	movs	r2, #16
   1150c:	ac0a      	add	r4, sp, #40	; 0x28
   1150e:	9007      	str	r0, [sp, #28]
   11510:	9109      	str	r1, [sp, #36]	; 0x24
   11512:	32ff      	adds	r2, #255	; 0xff
   11514:	0029      	movs	r1, r5
   11516:	4eb5      	ldr	r6, [pc, #724]	; (117ec <AssemblePacket+0x2f8>)
   11518:	7025      	strb	r5, [r4, #0]
   1151a:	48b5      	ldr	r0, [pc, #724]	; (117f0 <AssemblePacket+0x2fc>)
   1151c:	801d      	strh	r5, [r3, #0]
   1151e:	47b0      	blx	r6
   11520:	003a      	movs	r2, r7
   11522:	0029      	movs	r1, r5
   11524:	48b3      	ldr	r0, [pc, #716]	; (117f4 <AssemblePacket+0x300>)
   11526:	47b0      	blx	r6
   11528:	221f      	movs	r2, #31
   1152a:	7823      	ldrb	r3, [r4, #0]
   1152c:	9907      	ldr	r1, [sp, #28]
   1152e:	4013      	ands	r3, r2
   11530:	42a9      	cmp	r1, r5
   11532:	d043      	beq.n	115bc <AssemblePacket+0xc8>
   11534:	3a9f      	subs	r2, #159	; 0x9f
   11536:	4313      	orrs	r3, r2
   11538:	7023      	strb	r3, [r4, #0]
   1153a:	4baf      	ldr	r3, [pc, #700]	; (117f8 <AssemblePacket+0x304>)
   1153c:	3281      	adds	r2, #129	; 0x81
   1153e:	338c      	adds	r3, #140	; 0x8c
   11540:	7819      	ldrb	r1, [r3, #0]
   11542:	430a      	orrs	r2, r1
   11544:	701a      	strb	r2, [r3, #0]
   11546:	22e0      	movs	r2, #224	; 0xe0
   11548:	7823      	ldrb	r3, [r4, #0]
   1154a:	48a9      	ldr	r0, [pc, #676]	; (117f0 <AssemblePacket+0x2fc>)
   1154c:	4013      	ands	r3, r2
   1154e:	7023      	strb	r3, [r4, #0]
   11550:	4ca9      	ldr	r4, [pc, #676]	; (117f8 <AssemblePacket+0x304>)
   11552:	7403      	strb	r3, [r0, #16]
   11554:	3adc      	subs	r2, #220	; 0xdc
   11556:	4ba9      	ldr	r3, [pc, #676]	; (117fc <AssemblePacket+0x308>)
   11558:	3011      	adds	r0, #17
   1155a:	1c61      	adds	r1, r4, #1
   1155c:	4798      	blx	r3
   1155e:	2315      	movs	r3, #21
   11560:	aa04      	add	r2, sp, #16
   11562:	8393      	strh	r3, [r2, #28]
   11564:	0023      	movs	r3, r4
   11566:	337c      	adds	r3, #124	; 0x7c
   11568:	781b      	ldrb	r3, [r3, #0]
   1156a:	2700      	movs	r7, #0
   1156c:	069b      	lsls	r3, r3, #26
   1156e:	d400      	bmi.n	11572 <AssemblePacket+0x7e>
   11570:	e0fd      	b.n	1176e <AssemblePacket+0x27a>
   11572:	0023      	movs	r3, r4
   11574:	33df      	adds	r3, #223	; 0xdf
   11576:	781a      	ldrb	r2, [r3, #0]
   11578:	23ea      	movs	r3, #234	; 0xea
   1157a:	469c      	mov	ip, r3
   1157c:	44a4      	add	ip, r4
   1157e:	4663      	mov	r3, ip
   11580:	781d      	ldrb	r5, [r3, #0]
   11582:	42aa      	cmp	r2, r5
   11584:	d200      	bcs.n	11588 <AssemblePacket+0x94>
   11586:	e0f2      	b.n	1176e <AssemblePacket+0x27a>
   11588:	0021      	movs	r1, r4
   1158a:	0026      	movs	r6, r4
   1158c:	4b9c      	ldr	r3, [pc, #624]	; (11800 <AssemblePacket+0x30c>)
   1158e:	31c2      	adds	r1, #194	; 0xc2
   11590:	7818      	ldrb	r0, [r3, #0]
   11592:	880b      	ldrh	r3, [r1, #0]
   11594:	36d4      	adds	r6, #212	; 0xd4
   11596:	3301      	adds	r3, #1
   11598:	b29b      	uxth	r3, r3
   1159a:	800b      	strh	r3, [r1, #0]
   1159c:	7836      	ldrb	r6, [r6, #0]
   1159e:	42b3      	cmp	r3, r6
   115a0:	d110      	bne.n	115c4 <AssemblePacket+0xd0>
   115a2:	0023      	movs	r3, r4
   115a4:	33ed      	adds	r3, #237	; 0xed
   115a6:	701f      	strb	r7, [r3, #0]
   115a8:	2380      	movs	r3, #128	; 0x80
   115aa:	2040      	movs	r0, #64	; 0x40
   115ac:	348c      	adds	r4, #140	; 0x8c
   115ae:	425b      	negs	r3, r3
   115b0:	7822      	ldrb	r2, [r4, #0]
   115b2:	4318      	orrs	r0, r3
   115b4:	3390      	adds	r3, #144	; 0x90
   115b6:	4313      	orrs	r3, r2
   115b8:	7023      	strb	r3, [r4, #0]
   115ba:	e02f      	b.n	1161c <AssemblePacket+0x128>
   115bc:	2240      	movs	r2, #64	; 0x40
   115be:	4313      	orrs	r3, r2
   115c0:	7023      	strb	r3, [r4, #0]
   115c2:	e7c0      	b.n	11546 <AssemblePacket+0x52>
   115c4:	42b3      	cmp	r3, r6
   115c6:	d929      	bls.n	1161c <AssemblePacket+0x128>
   115c8:	42aa      	cmp	r2, r5
   115ca:	d100      	bne.n	115ce <AssemblePacket+0xda>
   115cc:	e0c9      	b.n	11762 <AssemblePacket+0x26e>
   115ce:	0021      	movs	r1, r4
   115d0:	0020      	movs	r0, r4
   115d2:	31ed      	adds	r1, #237	; 0xed
   115d4:	780b      	ldrb	r3, [r1, #0]
   115d6:	30d5      	adds	r0, #213	; 0xd5
   115d8:	3301      	adds	r3, #1
   115da:	b2db      	uxtb	r3, r3
   115dc:	700b      	strb	r3, [r1, #0]
   115de:	7800      	ldrb	r0, [r0, #0]
   115e0:	3801      	subs	r0, #1
   115e2:	4283      	cmp	r3, r0
   115e4:	dbe0      	blt.n	115a8 <AssemblePacket+0xb4>
   115e6:	700f      	strb	r7, [r1, #0]
   115e8:	42aa      	cmp	r2, r5
   115ea:	d90d      	bls.n	11608 <AssemblePacket+0x114>
   115ec:	231b      	movs	r3, #27
   115ee:	4666      	mov	r6, ip
   115f0:	a904      	add	r1, sp, #16
   115f2:	3a01      	subs	r2, #1
   115f4:	185b      	adds	r3, r3, r1
   115f6:	701a      	strb	r2, [r3, #0]
   115f8:	251b      	movs	r5, #27
   115fa:	ab04      	add	r3, sp, #16
   115fc:	18ed      	adds	r5, r5, r3
   115fe:	7832      	ldrb	r2, [r6, #0]
   11600:	782b      	ldrb	r3, [r5, #0]
   11602:	429a      	cmp	r2, r3
   11604:	d800      	bhi.n	11608 <AssemblePacket+0x114>
   11606:	e098      	b.n	1173a <AssemblePacket+0x246>
   11608:	2380      	movs	r3, #128	; 0x80
   1160a:	2040      	movs	r0, #64	; 0x40
   1160c:	2210      	movs	r2, #16
   1160e:	425b      	negs	r3, r3
   11610:	4318      	orrs	r0, r3
   11612:	4b79      	ldr	r3, [pc, #484]	; (117f8 <AssemblePacket+0x304>)
   11614:	338c      	adds	r3, #140	; 0x8c
   11616:	7819      	ldrb	r1, [r3, #0]
   11618:	430a      	orrs	r2, r1
   1161a:	701a      	strb	r2, [r3, #0]
   1161c:	4d76      	ldr	r5, [pc, #472]	; (117f8 <AssemblePacket+0x304>)
   1161e:	2102      	movs	r1, #2
   11620:	002a      	movs	r2, r5
   11622:	328c      	adds	r2, #140	; 0x8c
   11624:	7813      	ldrb	r3, [r2, #0]
   11626:	420b      	tst	r3, r1
   11628:	d003      	beq.n	11632 <AssemblePacket+0x13e>
   1162a:	2420      	movs	r4, #32
   1162c:	438b      	bics	r3, r1
   1162e:	4320      	orrs	r0, r4
   11630:	7013      	strb	r3, [r2, #0]
   11632:	2310      	movs	r3, #16
   11634:	0004      	movs	r4, r0
   11636:	439c      	bics	r4, r3
   11638:	002b      	movs	r3, r5
   1163a:	33d8      	adds	r3, #216	; 0xd8
   1163c:	781b      	ldrb	r3, [r3, #0]
   1163e:	9307      	str	r3, [sp, #28]
   11640:	2b00      	cmp	r3, #0
   11642:	d003      	beq.n	1164c <AssemblePacket+0x158>
   11644:	9b06      	ldr	r3, [sp, #24]
   11646:	2b00      	cmp	r3, #0
   11648:	d000      	beq.n	1164c <AssemblePacket+0x158>
   1164a:	e092      	b.n	11772 <AssemblePacket+0x27e>
   1164c:	230f      	movs	r3, #15
   1164e:	439c      	bics	r4, r3
   11650:	0020      	movs	r0, r4
   11652:	ac0b      	add	r4, sp, #44	; 0x2c
   11654:	8826      	ldrh	r6, [r4, #0]
   11656:	4f66      	ldr	r7, [pc, #408]	; (117f0 <AssemblePacket+0x2fc>)
   11658:	4b68      	ldr	r3, [pc, #416]	; (117fc <AssemblePacket+0x308>)
   1165a:	55b8      	strb	r0, [r7, r6]
   1165c:	1c70      	adds	r0, r6, #1
   1165e:	b280      	uxth	r0, r0
   11660:	19c0      	adds	r0, r0, r7
   11662:	2202      	movs	r2, #2
   11664:	4967      	ldr	r1, [pc, #412]	; (11804 <AssemblePacket+0x310>)
   11666:	4798      	blx	r3
   11668:	9b07      	ldr	r3, [sp, #28]
   1166a:	3603      	adds	r6, #3
   1166c:	8026      	strh	r6, [r4, #0]
   1166e:	2b00      	cmp	r3, #0
   11670:	d100      	bne.n	11674 <AssemblePacket+0x180>
   11672:	e087      	b.n	11784 <AssemblePacket+0x290>
   11674:	9b06      	ldr	r3, [sp, #24]
   11676:	2b00      	cmp	r3, #0
   11678:	d004      	beq.n	11684 <AssemblePacket+0x190>
   1167a:	2201      	movs	r2, #1
   1167c:	0021      	movs	r1, r4
   1167e:	0038      	movs	r0, r7
   11680:	4b61      	ldr	r3, [pc, #388]	; (11808 <AssemblePacket+0x314>)
   11682:	4798      	blx	r3
   11684:	466a      	mov	r2, sp
   11686:	2124      	movs	r1, #36	; 0x24
   11688:	1852      	adds	r2, r2, r1
   1168a:	8823      	ldrh	r3, [r4, #0]
   1168c:	7812      	ldrb	r2, [r2, #0]
   1168e:	1c5e      	adds	r6, r3, #1
   11690:	54fa      	strb	r2, [r7, r3]
   11692:	9b06      	ldr	r3, [sp, #24]
   11694:	b2b6      	uxth	r6, r6
   11696:	8026      	strh	r6, [r4, #0]
   11698:	2b00      	cmp	r3, #0
   1169a:	d100      	bne.n	1169e <AssemblePacket+0x1aa>
   1169c:	e076      	b.n	1178c <AssemblePacket+0x298>
   1169e:	001a      	movs	r2, r3
   116a0:	19b8      	adds	r0, r7, r6
   116a2:	9908      	ldr	r1, [sp, #32]
   116a4:	4b55      	ldr	r3, [pc, #340]	; (117fc <AssemblePacket+0x308>)
   116a6:	4798      	blx	r3
   116a8:	466b      	mov	r3, sp
   116aa:	7e19      	ldrb	r1, [r3, #24]
   116ac:	682b      	ldr	r3, [r5, #0]
   116ae:	b2f6      	uxtb	r6, r6
   116b0:	0a18      	lsrs	r0, r3, #8
   116b2:	792b      	ldrb	r3, [r5, #4]
   116b4:	1d2a      	adds	r2, r5, #4
   116b6:	061b      	lsls	r3, r3, #24
   116b8:	4303      	orrs	r3, r0
   116ba:	9304      	str	r3, [sp, #16]
   116bc:	2301      	movs	r3, #1
   116be:	9301      	str	r3, [sp, #4]
   116c0:	4b52      	ldr	r3, [pc, #328]	; (1180c <AssemblePacket+0x318>)
   116c2:	9703      	str	r7, [sp, #12]
   116c4:	9602      	str	r6, [sp, #8]
   116c6:	9300      	str	r3, [sp, #0]
   116c8:	6fd3      	ldr	r3, [r2, #124]	; 0x7c
   116ca:	9808      	ldr	r0, [sp, #32]
   116cc:	2200      	movs	r2, #0
   116ce:	4c50      	ldr	r4, [pc, #320]	; (11810 <AssemblePacket+0x31c>)
   116d0:	47a0      	blx	r4
   116d2:	2800      	cmp	r0, #0
   116d4:	d002      	beq.n	116dc <AssemblePacket+0x1e8>
   116d6:	2020      	movs	r0, #32
   116d8:	4b4e      	ldr	r3, [pc, #312]	; (11814 <AssemblePacket+0x320>)
   116da:	4798      	blx	r3
   116dc:	aa0b      	add	r2, sp, #44	; 0x2c
   116de:	8813      	ldrh	r3, [r2, #0]
   116e0:	9906      	ldr	r1, [sp, #24]
   116e2:	18cb      	adds	r3, r1, r3
   116e4:	8013      	strh	r3, [r2, #0]
   116e6:	4c44      	ldr	r4, [pc, #272]	; (117f8 <AssemblePacket+0x304>)
   116e8:	ae0b      	add	r6, sp, #44	; 0x2c
   116ea:	6823      	ldr	r3, [r4, #0]
   116ec:	8832      	ldrh	r2, [r6, #0]
   116ee:	0a18      	lsrs	r0, r3, #8
   116f0:	7923      	ldrb	r3, [r4, #4]
   116f2:	1d21      	adds	r1, r4, #4
   116f4:	061b      	lsls	r3, r3, #24
   116f6:	4303      	orrs	r3, r0
   116f8:	9300      	str	r3, [sp, #0]
   116fa:	3a10      	subs	r2, #16
   116fc:	b2d2      	uxtb	r2, r2
   116fe:	2349      	movs	r3, #73	; 0x49
   11700:	6fc9      	ldr	r1, [r1, #124]	; 0x7c
   11702:	2000      	movs	r0, #0
   11704:	4d44      	ldr	r5, [pc, #272]	; (11818 <AssemblePacket+0x324>)
   11706:	47a8      	blx	r5
   11708:	4f39      	ldr	r7, [pc, #228]	; (117f0 <AssemblePacket+0x2fc>)
   1170a:	2210      	movs	r2, #16
   1170c:	4939      	ldr	r1, [pc, #228]	; (117f4 <AssemblePacket+0x300>)
   1170e:	0038      	movs	r0, r7
   11710:	4b3a      	ldr	r3, [pc, #232]	; (117fc <AssemblePacket+0x308>)
   11712:	4798      	blx	r3
   11714:	8833      	ldrh	r3, [r6, #0]
   11716:	4a37      	ldr	r2, [pc, #220]	; (117f4 <AssemblePacket+0x300>)
   11718:	9300      	str	r3, [sp, #0]
   1171a:	2102      	movs	r1, #2
   1171c:	003b      	movs	r3, r7
   1171e:	4d3f      	ldr	r5, [pc, #252]	; (1181c <AssemblePacket+0x328>)
   11720:	483f      	ldr	r0, [pc, #252]	; (11820 <AssemblePacket+0x32c>)
   11722:	47a8      	blx	r5
   11724:	8836      	ldrh	r6, [r6, #0]
   11726:	2204      	movs	r2, #4
   11728:	19f0      	adds	r0, r6, r7
   1172a:	4932      	ldr	r1, [pc, #200]	; (117f4 <AssemblePacket+0x300>)
   1172c:	4b33      	ldr	r3, [pc, #204]	; (117fc <AssemblePacket+0x308>)
   1172e:	4798      	blx	r3
   11730:	3e0c      	subs	r6, #12
   11732:	34c6      	adds	r4, #198	; 0xc6
   11734:	8026      	strh	r6, [r4, #0]
   11736:	b00d      	add	sp, #52	; 0x34
   11738:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1173a:	0029      	movs	r1, r5
   1173c:	2010      	movs	r0, #16
   1173e:	4f39      	ldr	r7, [pc, #228]	; (11824 <AssemblePacket+0x330>)
   11740:	47b8      	blx	r7
   11742:	2808      	cmp	r0, #8
   11744:	d000      	beq.n	11748 <AssemblePacket+0x254>
   11746:	e75f      	b.n	11608 <AssemblePacket+0x114>
   11748:	0029      	movs	r1, r5
   1174a:	3009      	adds	r0, #9
   1174c:	47b8      	blx	r7
   1174e:	782b      	ldrb	r3, [r5, #0]
   11750:	2808      	cmp	r0, #8
   11752:	d047      	beq.n	117e4 <AssemblePacket+0x2f0>
   11754:	7832      	ldrb	r2, [r6, #0]
   11756:	429a      	cmp	r2, r3
   11758:	d300      	bcc.n	1175c <AssemblePacket+0x268>
   1175a:	e74d      	b.n	115f8 <AssemblePacket+0x104>
   1175c:	3b01      	subs	r3, #1
   1175e:	702b      	strb	r3, [r5, #0]
   11760:	e74a      	b.n	115f8 <AssemblePacket+0x104>
   11762:	800f      	strh	r7, [r1, #0]
   11764:	2210      	movs	r2, #16
   11766:	348c      	adds	r4, #140	; 0x8c
   11768:	7823      	ldrb	r3, [r4, #0]
   1176a:	4393      	bics	r3, r2
   1176c:	e724      	b.n	115b8 <AssemblePacket+0xc4>
   1176e:	2000      	movs	r0, #0
   11770:	e7f8      	b.n	11764 <AssemblePacket+0x270>
   11772:	4b2d      	ldr	r3, [pc, #180]	; (11828 <AssemblePacket+0x334>)
   11774:	4798      	blx	r3
   11776:	220f      	movs	r2, #15
   11778:	0003      	movs	r3, r0
   1177a:	0020      	movs	r0, r4
   1177c:	4013      	ands	r3, r2
   1177e:	4390      	bics	r0, r2
   11780:	4318      	orrs	r0, r3
   11782:	e766      	b.n	11652 <AssemblePacket+0x15e>
   11784:	9b06      	ldr	r3, [sp, #24]
   11786:	2b00      	cmp	r3, #0
   11788:	d000      	beq.n	1178c <AssemblePacket+0x298>
   1178a:	e77b      	b.n	11684 <AssemblePacket+0x190>
   1178c:	4d1a      	ldr	r5, [pc, #104]	; (117f8 <AssemblePacket+0x304>)
   1178e:	002b      	movs	r3, r5
   11790:	33d8      	adds	r3, #216	; 0xd8
   11792:	781b      	ldrb	r3, [r3, #0]
   11794:	2b00      	cmp	r3, #0
   11796:	d0a6      	beq.n	116e6 <AssemblePacket+0x1f2>
   11798:	261e      	movs	r6, #30
   1179a:	ab04      	add	r3, sp, #16
   1179c:	18f6      	adds	r6, r6, r3
   1179e:	2200      	movs	r2, #0
   117a0:	0031      	movs	r1, r6
   117a2:	4822      	ldr	r0, [pc, #136]	; (1182c <AssemblePacket+0x338>)
   117a4:	4b18      	ldr	r3, [pc, #96]	; (11808 <AssemblePacket+0x314>)
   117a6:	4798      	blx	r3
   117a8:	682b      	ldr	r3, [r5, #0]
   117aa:	7831      	ldrb	r1, [r6, #0]
   117ac:	0a18      	lsrs	r0, r3, #8
   117ae:	792b      	ldrb	r3, [r5, #4]
   117b0:	9703      	str	r7, [sp, #12]
   117b2:	061b      	lsls	r3, r3, #24
   117b4:	4303      	orrs	r3, r0
   117b6:	9304      	str	r3, [sp, #16]
   117b8:	7823      	ldrb	r3, [r4, #0]
   117ba:	1d2a      	adds	r2, r5, #4
   117bc:	9302      	str	r3, [sp, #8]
   117be:	2302      	movs	r3, #2
   117c0:	9301      	str	r3, [sp, #4]
   117c2:	4b17      	ldr	r3, [pc, #92]	; (11820 <AssemblePacket+0x32c>)
   117c4:	4819      	ldr	r0, [pc, #100]	; (1182c <AssemblePacket+0x338>)
   117c6:	9300      	str	r3, [sp, #0]
   117c8:	6fd3      	ldr	r3, [r2, #124]	; 0x7c
   117ca:	4d11      	ldr	r5, [pc, #68]	; (11810 <AssemblePacket+0x31c>)
   117cc:	2200      	movs	r2, #0
   117ce:	47a8      	blx	r5
   117d0:	2800      	cmp	r0, #0
   117d2:	d002      	beq.n	117da <AssemblePacket+0x2e6>
   117d4:	2020      	movs	r0, #32
   117d6:	4b0f      	ldr	r3, [pc, #60]	; (11814 <AssemblePacket+0x320>)
   117d8:	4798      	blx	r3
   117da:	8823      	ldrh	r3, [r4, #0]
   117dc:	8832      	ldrh	r2, [r6, #0]
   117de:	189b      	adds	r3, r3, r2
   117e0:	8023      	strh	r3, [r4, #0]
   117e2:	e780      	b.n	116e6 <AssemblePacket+0x1f2>
   117e4:	34df      	adds	r4, #223	; 0xdf
   117e6:	7023      	strb	r3, [r4, #0]
   117e8:	e70e      	b.n	11608 <AssemblePacket+0x114>
   117ea:	46c0      	nop			; (mov r8, r8)
   117ec:	00019ead 	.word	0x00019ead
   117f0:	20002d91 	.word	0x20002d91
   117f4:	20001110 	.word	0x20001110
   117f8:	20002b5c 	.word	0x20002b5c
   117fc:	00019d89 	.word	0x00019d89
   11800:	0002028a 	.word	0x0002028a
   11804:	20002bdc 	.word	0x20002bdc
   11808:	0000fecd 	.word	0x0000fecd
   1180c:	20002b91 	.word	0x20002b91
   11810:	000113cd 	.word	0x000113cd
   11814:	0001148d 	.word	0x0001148d
   11818:	00010205 	.word	0x00010205
   1181c:	0000dde9 	.word	0x0000dde9
   11820:	20002b81 	.word	0x20002b81
   11824:	0000d91d 	.word	0x0000d91d
   11828:	0000fdc9 	.word	0x0000fdc9
   1182c:	20002eac 	.word	0x20002eac

00011830 <UpdateRxDataAvailableCbParams>:
   11830:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11832:	4e0f      	ldr	r6, [pc, #60]	; (11870 <UpdateRxDataAvailableCbParams+0x40>)
   11834:	7874      	ldrb	r4, [r6, #1]
   11836:	7835      	ldrb	r5, [r6, #0]
   11838:	0224      	lsls	r4, r4, #8
   1183a:	432c      	orrs	r4, r5
   1183c:	78b5      	ldrb	r5, [r6, #2]
   1183e:	042d      	lsls	r5, r5, #16
   11840:	432c      	orrs	r4, r5
   11842:	78f5      	ldrb	r5, [r6, #3]
   11844:	062d      	lsls	r5, r5, #24
   11846:	4325      	orrs	r5, r4
   11848:	d011      	beq.n	1186e <UpdateRxDataAvailableCbParams+0x3e>
   1184a:	4c0a      	ldr	r4, [pc, #40]	; (11874 <UpdateRxDataAvailableCbParams+0x44>)
   1184c:	2702      	movs	r7, #2
   1184e:	0026      	movs	r6, r4
   11850:	36f8      	adds	r6, #248	; 0xf8
   11852:	6836      	ldr	r6, [r6, #0]
   11854:	423e      	tst	r6, r7
   11856:	d00a      	beq.n	1186e <UpdateRxDataAvailableCbParams+0x3e>
   11858:	0026      	movs	r6, r4
   1185a:	34fc      	adds	r4, #252	; 0xfc
   1185c:	36ff      	adds	r6, #255	; 0xff
   1185e:	60a0      	str	r0, [r4, #8]
   11860:	60e1      	str	r1, [r4, #12]
   11862:	7077      	strb	r7, [r6, #1]
   11864:	7372      	strb	r2, [r6, #13]
   11866:	73b3      	strb	r3, [r6, #14]
   11868:	4903      	ldr	r1, [pc, #12]	; (11878 <UpdateRxDataAvailableCbParams+0x48>)
   1186a:	6820      	ldr	r0, [r4, #0]
   1186c:	47a8      	blx	r5
   1186e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   11870:	20002ea4 	.word	0x20002ea4
   11874:	20002b5c 	.word	0x20002b5c
   11878:	20002c5c 	.word	0x20002c5c

0001187c <LorawanNotifyAppOnRxdone>:
   1187c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1187e:	4c25      	ldr	r4, [pc, #148]	; (11914 <LorawanNotifyAppOnRxdone+0x98>)
   11880:	0007      	movs	r7, r0
   11882:	0023      	movs	r3, r4
   11884:	33f4      	adds	r3, #244	; 0xf4
   11886:	781b      	ldrb	r3, [r3, #0]
   11888:	000d      	movs	r5, r1
   1188a:	0016      	movs	r6, r2
   1188c:	2b01      	cmp	r3, #1
   1188e:	d136      	bne.n	118fe <LorawanNotifyAppOnRxdone+0x82>
   11890:	0022      	movs	r2, r4
   11892:	210e      	movs	r1, #14
   11894:	327c      	adds	r2, #124	; 0x7c
   11896:	7813      	ldrb	r3, [r2, #0]
   11898:	438b      	bics	r3, r1
   1189a:	7013      	strb	r3, [r2, #0]
   1189c:	491e      	ldr	r1, [pc, #120]	; (11918 <LorawanNotifyAppOnRxdone+0x9c>)
   1189e:	784a      	ldrb	r2, [r1, #1]
   118a0:	780b      	ldrb	r3, [r1, #0]
   118a2:	0212      	lsls	r2, r2, #8
   118a4:	431a      	orrs	r2, r3
   118a6:	788b      	ldrb	r3, [r1, #2]
   118a8:	041b      	lsls	r3, r3, #16
   118aa:	431a      	orrs	r2, r3
   118ac:	78cb      	ldrb	r3, [r1, #3]
   118ae:	061b      	lsls	r3, r3, #24
   118b0:	4313      	orrs	r3, r2
   118b2:	d023      	beq.n	118fc <LorawanNotifyAppOnRxdone+0x80>
   118b4:	0022      	movs	r2, r4
   118b6:	2120      	movs	r1, #32
   118b8:	328c      	adds	r2, #140	; 0x8c
   118ba:	7813      	ldrb	r3, [r2, #0]
   118bc:	438b      	bics	r3, r1
   118be:	7013      	strb	r3, [r2, #0]
   118c0:	0023      	movs	r3, r4
   118c2:	33f4      	adds	r3, #244	; 0xf4
   118c4:	781b      	ldrb	r3, [r3, #0]
   118c6:	7878      	ldrb	r0, [r7, #1]
   118c8:	469c      	mov	ip, r3
   118ca:	78fa      	ldrb	r2, [r7, #3]
   118cc:	78b9      	ldrb	r1, [r7, #2]
   118ce:	793b      	ldrb	r3, [r7, #4]
   118d0:	4667      	mov	r7, ip
   118d2:	0209      	lsls	r1, r1, #8
   118d4:	4301      	orrs	r1, r0
   118d6:	0410      	lsls	r0, r2, #16
   118d8:	4308      	orrs	r0, r1
   118da:	061b      	lsls	r3, r3, #24
   118dc:	4318      	orrs	r0, r3
   118de:	0032      	movs	r2, r6
   118e0:	2308      	movs	r3, #8
   118e2:	0029      	movs	r1, r5
   118e4:	2f04      	cmp	r7, #4
   118e6:	d112      	bne.n	1190e <LorawanNotifyAppOnRxdone+0x92>
   118e8:	4d0c      	ldr	r5, [pc, #48]	; (1191c <LorawanNotifyAppOnRxdone+0xa0>)
   118ea:	47a8      	blx	r5
   118ec:	2385      	movs	r3, #133	; 0x85
   118ee:	009b      	lsls	r3, r3, #2
   118f0:	5ce3      	ldrb	r3, [r4, r3]
   118f2:	2b00      	cmp	r3, #0
   118f4:	d102      	bne.n	118fc <LorawanNotifyAppOnRxdone+0x80>
   118f6:	2008      	movs	r0, #8
   118f8:	4b09      	ldr	r3, [pc, #36]	; (11920 <LorawanNotifyAppOnRxdone+0xa4>)
   118fa:	4798      	blx	r3
   118fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   118fe:	2b04      	cmp	r3, #4
   11900:	d1cc      	bne.n	1189c <LorawanNotifyAppOnRxdone+0x20>
   11902:	0023      	movs	r3, r4
   11904:	33e8      	adds	r3, #232	; 0xe8
   11906:	7818      	ldrb	r0, [r3, #0]
   11908:	4b06      	ldr	r3, [pc, #24]	; (11924 <LorawanNotifyAppOnRxdone+0xa8>)
   1190a:	4798      	blx	r3
   1190c:	e7c6      	b.n	1189c <LorawanNotifyAppOnRxdone+0x20>
   1190e:	4d06      	ldr	r5, [pc, #24]	; (11928 <LorawanNotifyAppOnRxdone+0xac>)
   11910:	47a8      	blx	r5
   11912:	e7eb      	b.n	118ec <LorawanNotifyAppOnRxdone+0x70>
   11914:	20002b5c 	.word	0x20002b5c
   11918:	20002ea4 	.word	0x20002ea4
   1191c:	000143ad 	.word	0x000143ad
   11920:	0001148d 	.word	0x0001148d
   11924:	0000f125 	.word	0x0000f125
   11928:	00011831 	.word	0x00011831

0001192c <LorawanSetReceiveWindow2Parameters>:
   1192c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1192e:	466b      	mov	r3, sp
   11930:	1cdd      	adds	r5, r3, #3
   11932:	9001      	str	r0, [sp, #4]
   11934:	7029      	strb	r1, [r5, #0]
   11936:	2001      	movs	r0, #1
   11938:	a901      	add	r1, sp, #4
   1193a:	4c09      	ldr	r4, [pc, #36]	; (11960 <LorawanSetReceiveWindow2Parameters+0x34>)
   1193c:	47a0      	blx	r4
   1193e:	2808      	cmp	r0, #8
   11940:	d002      	beq.n	11948 <LorawanSetReceiveWindow2Parameters+0x1c>
   11942:	240a      	movs	r4, #10
   11944:	0020      	movs	r0, r4
   11946:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
   11948:	0029      	movs	r1, r5
   1194a:	200f      	movs	r0, #15
   1194c:	47a0      	blx	r4
   1194e:	0004      	movs	r4, r0
   11950:	2808      	cmp	r0, #8
   11952:	d1f6      	bne.n	11942 <LorawanSetReceiveWindow2Parameters+0x16>
   11954:	7829      	ldrb	r1, [r5, #0]
   11956:	9801      	ldr	r0, [sp, #4]
   11958:	4b02      	ldr	r3, [pc, #8]	; (11964 <LorawanSetReceiveWindow2Parameters+0x38>)
   1195a:	4798      	blx	r3
   1195c:	e7f2      	b.n	11944 <LorawanSetReceiveWindow2Parameters+0x18>
   1195e:	46c0      	nop			; (mov r8, r8)
   11960:	0000d91d 	.word	0x0000d91d
   11964:	0001090d 	.word	0x0001090d

00011968 <LorawanSetFrequency>:
   11968:	b507      	push	{r0, r1, r2, lr}
   1196a:	466b      	mov	r3, sp
   1196c:	9100      	str	r1, [sp, #0]
   1196e:	7118      	strb	r0, [r3, #4]
   11970:	4669      	mov	r1, sp
   11972:	2000      	movs	r0, #0
   11974:	4b01      	ldr	r3, [pc, #4]	; (1197c <LorawanSetFrequency+0x14>)
   11976:	4798      	blx	r3
   11978:	bd0e      	pop	{r1, r2, r3, pc}
   1197a:	46c0      	nop			; (mov r8, r8)
   1197c:	0000da29 	.word	0x0000da29

00011980 <LorawanGetReceiveWindow2Parameters>:
   11980:	4a06      	ldr	r2, [pc, #24]	; (1199c <LorawanGetReceiveWindow2Parameters+0x1c>)
   11982:	0013      	movs	r3, r2
   11984:	336e      	adds	r3, #110	; 0x6e
   11986:	781b      	ldrb	r3, [r3, #0]
   11988:	7103      	strb	r3, [r0, #4]
   1198a:	0013      	movs	r3, r2
   1198c:	326c      	adds	r2, #108	; 0x6c
   1198e:	336a      	adds	r3, #106	; 0x6a
   11990:	8819      	ldrh	r1, [r3, #0]
   11992:	8813      	ldrh	r3, [r2, #0]
   11994:	041b      	lsls	r3, r3, #16
   11996:	430b      	orrs	r3, r1
   11998:	6003      	str	r3, [r0, #0]
   1199a:	4770      	bx	lr
   1199c:	20002b5c 	.word	0x20002b5c

000119a0 <LORAWAN_GetAttr>:
   119a0:	b5f0      	push	{r4, r5, r6, r7, lr}
   119a2:	000b      	movs	r3, r1
   119a4:	b093      	sub	sp, #76	; 0x4c
   119a6:	0016      	movs	r6, r2
   119a8:	2842      	cmp	r0, #66	; 0x42
   119aa:	d844      	bhi.n	11a36 <LORAWAN_GetAttr+0x96>
   119ac:	f004 fe30 	bl	16610 <__gnu_thumb1_case_uhi>
   119b0:	00620046 	.word	0x00620046
   119b4:	00760066 	.word	0x00760066
   119b8:	0072006e 	.word	0x0072006e
   119bc:	007f007a 	.word	0x007f007a
   119c0:	00870084 	.word	0x00870084
   119c4:	008e008a 	.word	0x008e008a
   119c8:	00990091 	.word	0x00990091
   119cc:	009f009c 	.word	0x009f009c
   119d0:	00a600a3 	.word	0x00a600a3
   119d4:	00ac00a9 	.word	0x00ac00a9
   119d8:	00d800af 	.word	0x00d800af
   119dc:	00b200b5 	.word	0x00b200b5
   119e0:	00df00e5 	.word	0x00df00e5
   119e4:	00ce00d3 	.word	0x00ce00d3
   119e8:	004300c7 	.word	0x004300c7
   119ec:	00c10096 	.word	0x00c10096
   119f0:	00be00c5 	.word	0x00be00c5
   119f4:	00dc00bb 	.word	0x00dc00bb
   119f8:	004c00e2 	.word	0x004c00e2
   119fc:	004e004c 	.word	0x004e004c
   11a00:	011500ee 	.word	0x011500ee
   11a04:	00ff010c 	.word	0x00ff010c
   11a08:	01300122 	.word	0x01300122
   11a0c:	0148013c 	.word	0x0148013c
   11a10:	01610154 	.word	0x01610154
   11a14:	01940043 	.word	0x01940043
   11a18:	0170016c 	.word	0x0170016c
   11a1c:	017a0175 	.word	0x017a0175
   11a20:	0183017f 	.word	0x0183017f
   11a24:	01890186 	.word	0x01890186
   11a28:	00430191 	.word	0x00430191
   11a2c:	00430043 	.word	0x00430043
   11a30:	019d0198 	.word	0x019d0198
   11a34:	01ee      	.short	0x01ee
   11a36:	200a      	movs	r0, #10
   11a38:	b013      	add	sp, #76	; 0x4c
   11a3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11a3c:	2208      	movs	r2, #8
   11a3e:	49c4      	ldr	r1, [pc, #784]	; (11d50 <LORAWAN_GetAttr+0x3b0>)
   11a40:	315d      	adds	r1, #93	; 0x5d
   11a42:	0030      	movs	r0, r6
   11a44:	4bc3      	ldr	r3, [pc, #780]	; (11d54 <LORAWAN_GetAttr+0x3b4>)
   11a46:	4798      	blx	r3
   11a48:	2008      	movs	r0, #8
   11a4a:	e7f5      	b.n	11a38 <LORAWAN_GetAttr+0x98>
   11a4c:	ac0e      	add	r4, sp, #56	; 0x38
   11a4e:	0021      	movs	r1, r4
   11a50:	4bc1      	ldr	r3, [pc, #772]	; (11d58 <LORAWAN_GetAttr+0x3b8>)
   11a52:	201d      	movs	r0, #29
   11a54:	4798      	blx	r3
   11a56:	4bbe      	ldr	r3, [pc, #760]	; (11d50 <LORAWAN_GetAttr+0x3b0>)
   11a58:	a910      	add	r1, sp, #64	; 0x40
   11a5a:	33fe      	adds	r3, #254	; 0xfe
   11a5c:	8adb      	ldrh	r3, [r3, #22]
   11a5e:	2208      	movs	r2, #8
   11a60:	808b      	strh	r3, [r1, #4]
   11a62:	7923      	ldrb	r3, [r4, #4]
   11a64:	718b      	strb	r3, [r1, #6]
   11a66:	8823      	ldrh	r3, [r4, #0]
   11a68:	800b      	strh	r3, [r1, #0]
   11a6a:	8863      	ldrh	r3, [r4, #2]
   11a6c:	804b      	strh	r3, [r1, #2]
   11a6e:	7963      	ldrb	r3, [r4, #5]
   11a70:	71cb      	strb	r3, [r1, #7]
   11a72:	e7e6      	b.n	11a42 <LORAWAN_GetAttr+0xa2>
   11a74:	49b6      	ldr	r1, [pc, #728]	; (11d50 <LORAWAN_GetAttr+0x3b0>)
   11a76:	2208      	movs	r2, #8
   11a78:	3155      	adds	r1, #85	; 0x55
   11a7a:	e7e2      	b.n	11a42 <LORAWAN_GetAttr+0xa2>
   11a7c:	4bb4      	ldr	r3, [pc, #720]	; (11d50 <LORAWAN_GetAttr+0x3b0>)
   11a7e:	681a      	ldr	r2, [r3, #0]
   11a80:	791b      	ldrb	r3, [r3, #4]
   11a82:	0a12      	lsrs	r2, r2, #8
   11a84:	061b      	lsls	r3, r3, #24
   11a86:	4313      	orrs	r3, r2
   11a88:	6033      	str	r3, [r6, #0]
   11a8a:	e7dd      	b.n	11a48 <LORAWAN_GetAttr+0xa8>
   11a8c:	49b0      	ldr	r1, [pc, #704]	; (11d50 <LORAWAN_GetAttr+0x3b0>)
   11a8e:	2210      	movs	r2, #16
   11a90:	3105      	adds	r1, #5
   11a92:	e7d6      	b.n	11a42 <LORAWAN_GetAttr+0xa2>
   11a94:	49ae      	ldr	r1, [pc, #696]	; (11d50 <LORAWAN_GetAttr+0x3b0>)
   11a96:	2210      	movs	r2, #16
   11a98:	3115      	adds	r1, #21
   11a9a:	e7d2      	b.n	11a42 <LORAWAN_GetAttr+0xa2>
   11a9c:	49ac      	ldr	r1, [pc, #688]	; (11d50 <LORAWAN_GetAttr+0x3b0>)
   11a9e:	2210      	movs	r2, #16
   11aa0:	3145      	adds	r1, #69	; 0x45
   11aa2:	e7ce      	b.n	11a42 <LORAWAN_GetAttr+0xa2>
   11aa4:	4baa      	ldr	r3, [pc, #680]	; (11d50 <LORAWAN_GetAttr+0x3b0>)
   11aa6:	337c      	adds	r3, #124	; 0x7c
   11aa8:	781b      	ldrb	r3, [r3, #0]
   11aaa:	069b      	lsls	r3, r3, #26
   11aac:	e039      	b.n	11b22 <LORAWAN_GetAttr+0x182>
   11aae:	4ba8      	ldr	r3, [pc, #672]	; (11d50 <LORAWAN_GetAttr+0x3b0>)
   11ab0:	33df      	adds	r3, #223	; 0xdf
   11ab2:	781b      	ldrb	r3, [r3, #0]
   11ab4:	7033      	strb	r3, [r6, #0]
   11ab6:	e7c7      	b.n	11a48 <LORAWAN_GetAttr+0xa8>
   11ab8:	4ba5      	ldr	r3, [pc, #660]	; (11d50 <LORAWAN_GetAttr+0x3b0>)
   11aba:	33e1      	adds	r3, #225	; 0xe1
   11abc:	e7f9      	b.n	11ab2 <LORAWAN_GetAttr+0x112>
   11abe:	4ba4      	ldr	r3, [pc, #656]	; (11d50 <LORAWAN_GetAttr+0x3b0>)
   11ac0:	33f7      	adds	r3, #247	; 0xf7
   11ac2:	e7f6      	b.n	11ab2 <LORAWAN_GetAttr+0x112>
   11ac4:	4ba2      	ldr	r3, [pc, #648]	; (11d50 <LORAWAN_GetAttr+0x3b0>)
   11ac6:	3304      	adds	r3, #4
   11ac8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   11aca:	e7dd      	b.n	11a88 <LORAWAN_GetAttr+0xe8>
   11acc:	4ba0      	ldr	r3, [pc, #640]	; (11d50 <LORAWAN_GetAttr+0x3b0>)
   11ace:	3308      	adds	r3, #8
   11ad0:	e7fa      	b.n	11ac8 <LORAWAN_GetAttr+0x128>
   11ad2:	4b9f      	ldr	r3, [pc, #636]	; (11d50 <LORAWAN_GetAttr+0x3b0>)
   11ad4:	33c8      	adds	r3, #200	; 0xc8
   11ad6:	881b      	ldrh	r3, [r3, #0]
   11ad8:	8033      	strh	r3, [r6, #0]
   11ada:	e7b5      	b.n	11a48 <LORAWAN_GetAttr+0xa8>
   11adc:	4b9c      	ldr	r3, [pc, #624]	; (11d50 <LORAWAN_GetAttr+0x3b0>)
   11ade:	33ca      	adds	r3, #202	; 0xca
   11ae0:	e7f9      	b.n	11ad6 <LORAWAN_GetAttr+0x136>
   11ae2:	4b9b      	ldr	r3, [pc, #620]	; (11d50 <LORAWAN_GetAttr+0x3b0>)
   11ae4:	33cc      	adds	r3, #204	; 0xcc
   11ae6:	e7f6      	b.n	11ad6 <LORAWAN_GetAttr+0x136>
   11ae8:	4b99      	ldr	r3, [pc, #612]	; (11d50 <LORAWAN_GetAttr+0x3b0>)
   11aea:	33ce      	adds	r3, #206	; 0xce
   11aec:	e7f3      	b.n	11ad6 <LORAWAN_GetAttr+0x136>
   11aee:	4b98      	ldr	r3, [pc, #608]	; (11d50 <LORAWAN_GetAttr+0x3b0>)
   11af0:	33d0      	adds	r3, #208	; 0xd0
   11af2:	881b      	ldrh	r3, [r3, #0]
   11af4:	e7de      	b.n	11ab4 <LORAWAN_GetAttr+0x114>
   11af6:	4b96      	ldr	r3, [pc, #600]	; (11d50 <LORAWAN_GetAttr+0x3b0>)
   11af8:	33d4      	adds	r3, #212	; 0xd4
   11afa:	e7da      	b.n	11ab2 <LORAWAN_GetAttr+0x112>
   11afc:	4b94      	ldr	r3, [pc, #592]	; (11d50 <LORAWAN_GetAttr+0x3b0>)
   11afe:	33d5      	adds	r3, #213	; 0xd5
   11b00:	e7d7      	b.n	11ab2 <LORAWAN_GetAttr+0x112>
   11b02:	4b93      	ldr	r3, [pc, #588]	; (11d50 <LORAWAN_GetAttr+0x3b0>)
   11b04:	33d2      	adds	r3, #210	; 0xd2
   11b06:	e7e6      	b.n	11ad6 <LORAWAN_GetAttr+0x136>
   11b08:	4b91      	ldr	r3, [pc, #580]	; (11d50 <LORAWAN_GetAttr+0x3b0>)
   11b0a:	33da      	adds	r3, #218	; 0xda
   11b0c:	e7d1      	b.n	11ab2 <LORAWAN_GetAttr+0x112>
   11b0e:	4b90      	ldr	r3, [pc, #576]	; (11d50 <LORAWAN_GetAttr+0x3b0>)
   11b10:	33d9      	adds	r3, #217	; 0xd9
   11b12:	e7ce      	b.n	11ab2 <LORAWAN_GetAttr+0x112>
   11b14:	4b8e      	ldr	r3, [pc, #568]	; (11d50 <LORAWAN_GetAttr+0x3b0>)
   11b16:	33e0      	adds	r3, #224	; 0xe0
   11b18:	e7cb      	b.n	11ab2 <LORAWAN_GetAttr+0x112>
   11b1a:	4b8d      	ldr	r3, [pc, #564]	; (11d50 <LORAWAN_GetAttr+0x3b0>)
   11b1c:	337c      	adds	r3, #124	; 0x7c
   11b1e:	781b      	ldrb	r3, [r3, #0]
   11b20:	06db      	lsls	r3, r3, #27
   11b22:	0fdb      	lsrs	r3, r3, #31
   11b24:	e7c6      	b.n	11ab4 <LORAWAN_GetAttr+0x114>
   11b26:	4b8a      	ldr	r3, [pc, #552]	; (11d50 <LORAWAN_GetAttr+0x3b0>)
   11b28:	33de      	adds	r3, #222	; 0xde
   11b2a:	e7c2      	b.n	11ab2 <LORAWAN_GetAttr+0x112>
   11b2c:	4b88      	ldr	r3, [pc, #544]	; (11d50 <LORAWAN_GetAttr+0x3b0>)
   11b2e:	33dd      	adds	r3, #221	; 0xdd
   11b30:	e7bf      	b.n	11ab2 <LORAWAN_GetAttr+0x112>
   11b32:	4b87      	ldr	r3, [pc, #540]	; (11d50 <LORAWAN_GetAttr+0x3b0>)
   11b34:	3390      	adds	r3, #144	; 0x90
   11b36:	781b      	ldrb	r3, [r3, #0]
   11b38:	e7ce      	b.n	11ad8 <LORAWAN_GetAttr+0x138>
   11b3a:	4b85      	ldr	r3, [pc, #532]	; (11d50 <LORAWAN_GetAttr+0x3b0>)
   11b3c:	e7c4      	b.n	11ac8 <LORAWAN_GetAttr+0x128>
   11b3e:	2016      	movs	r0, #22
   11b40:	781b      	ldrb	r3, [r3, #0]
   11b42:	a910      	add	r1, sp, #64	; 0x40
   11b44:	700b      	strb	r3, [r1, #0]
   11b46:	4b85      	ldr	r3, [pc, #532]	; (11d5c <LORAWAN_GetAttr+0x3bc>)
   11b48:	4798      	blx	r3
   11b4a:	e77d      	b.n	11a48 <LORAWAN_GetAttr+0xa8>
   11b4c:	781b      	ldrb	r3, [r3, #0]
   11b4e:	a910      	add	r1, sp, #64	; 0x40
   11b50:	700b      	strb	r3, [r1, #0]
   11b52:	2012      	movs	r0, #18
   11b54:	e7f7      	b.n	11b46 <LORAWAN_GetAttr+0x1a6>
   11b56:	781b      	ldrb	r3, [r3, #0]
   11b58:	a910      	add	r1, sp, #64	; 0x40
   11b5a:	700b      	strb	r3, [r1, #0]
   11b5c:	2000      	movs	r0, #0
   11b5e:	e7f2      	b.n	11b46 <LORAWAN_GetAttr+0x1a6>
   11b60:	0010      	movs	r0, r2
   11b62:	4b7f      	ldr	r3, [pc, #508]	; (11d60 <LORAWAN_GetAttr+0x3c0>)
   11b64:	4798      	blx	r3
   11b66:	e76f      	b.n	11a48 <LORAWAN_GetAttr+0xa8>
   11b68:	4b79      	ldr	r3, [pc, #484]	; (11d50 <LORAWAN_GetAttr+0x3b0>)
   11b6a:	33f6      	adds	r3, #246	; 0xf6
   11b6c:	e7a1      	b.n	11ab2 <LORAWAN_GetAttr+0x112>
   11b6e:	4b78      	ldr	r3, [pc, #480]	; (11d50 <LORAWAN_GetAttr+0x3b0>)
   11b70:	33f4      	adds	r3, #244	; 0xf4
   11b72:	e79e      	b.n	11ab2 <LORAWAN_GetAttr+0x112>
   11b74:	4b76      	ldr	r3, [pc, #472]	; (11d50 <LORAWAN_GetAttr+0x3b0>)
   11b76:	33f5      	adds	r3, #245	; 0xf5
   11b78:	e79b      	b.n	11ab2 <LORAWAN_GetAttr+0x112>
   11b7a:	21fa      	movs	r1, #250	; 0xfa
   11b7c:	4b74      	ldr	r3, [pc, #464]	; (11d50 <LORAWAN_GetAttr+0x3b0>)
   11b7e:	0089      	lsls	r1, r1, #2
   11b80:	3388      	adds	r3, #136	; 0x88
   11b82:	6818      	ldr	r0, [r3, #0]
   11b84:	4b77      	ldr	r3, [pc, #476]	; (11d64 <LORAWAN_GetAttr+0x3c4>)
   11b86:	4798      	blx	r3
   11b88:	8030      	strh	r0, [r6, #0]
   11b8a:	e75d      	b.n	11a48 <LORAWAN_GetAttr+0xa8>
   11b8c:	780a      	ldrb	r2, [r1, #0]
   11b8e:	200a      	movs	r0, #10
   11b90:	2a03      	cmp	r2, #3
   11b92:	d900      	bls.n	11b96 <LORAWAN_GetAttr+0x1f6>
   11b94:	e750      	b.n	11a38 <LORAWAN_GetAttr+0x98>
   11b96:	2322      	movs	r3, #34	; 0x22
   11b98:	496d      	ldr	r1, [pc, #436]	; (11d50 <LORAWAN_GetAttr+0x3b0>)
   11b9a:	33ff      	adds	r3, #255	; 0xff
   11b9c:	5cc9      	ldrb	r1, [r1, r3]
   11b9e:	3b21      	subs	r3, #33	; 0x21
   11ba0:	3bff      	subs	r3, #255	; 0xff
   11ba2:	4093      	lsls	r3, r2
   11ba4:	400b      	ands	r3, r1
   11ba6:	1e5a      	subs	r2, r3, #1
   11ba8:	4193      	sbcs	r3, r2
   11baa:	7033      	strb	r3, [r6, #0]
   11bac:	e02e      	b.n	11c0c <LORAWAN_GetAttr+0x26c>
   11bae:	780b      	ldrb	r3, [r1, #0]
   11bb0:	200a      	movs	r0, #10
   11bb2:	2b03      	cmp	r3, #3
   11bb4:	d900      	bls.n	11bb8 <LORAWAN_GetAttr+0x218>
   11bb6:	e73f      	b.n	11a38 <LORAWAN_GetAttr+0x98>
   11bb8:	213c      	movs	r1, #60	; 0x3c
   11bba:	4359      	muls	r1, r3
   11bbc:	3139      	adds	r1, #57	; 0x39
   11bbe:	4b64      	ldr	r3, [pc, #400]	; (11d50 <LORAWAN_GetAttr+0x3b0>)
   11bc0:	31ff      	adds	r1, #255	; 0xff
   11bc2:	18c9      	adds	r1, r1, r3
   11bc4:	2210      	movs	r2, #16
   11bc6:	e73c      	b.n	11a42 <LORAWAN_GetAttr+0xa2>
   11bc8:	780b      	ldrb	r3, [r1, #0]
   11bca:	200a      	movs	r0, #10
   11bcc:	2b03      	cmp	r3, #3
   11bce:	d900      	bls.n	11bd2 <LORAWAN_GetAttr+0x232>
   11bd0:	e732      	b.n	11a38 <LORAWAN_GetAttr+0x98>
   11bd2:	213c      	movs	r1, #60	; 0x3c
   11bd4:	4359      	muls	r1, r3
   11bd6:	3129      	adds	r1, #41	; 0x29
   11bd8:	e7f1      	b.n	11bbe <LORAWAN_GetAttr+0x21e>
   11bda:	780b      	ldrb	r3, [r1, #0]
   11bdc:	200a      	movs	r0, #10
   11bde:	2b03      	cmp	r3, #3
   11be0:	d900      	bls.n	11be4 <LORAWAN_GetAttr+0x244>
   11be2:	e729      	b.n	11a38 <LORAWAN_GetAttr+0x98>
   11be4:	213c      	movs	r1, #60	; 0x3c
   11be6:	4359      	muls	r1, r3
   11be8:	4b59      	ldr	r3, [pc, #356]	; (11d50 <LORAWAN_GetAttr+0x3b0>)
   11bea:	3125      	adds	r1, #37	; 0x25
   11bec:	31ff      	adds	r1, #255	; 0xff
   11bee:	18c9      	adds	r1, r1, r3
   11bf0:	2204      	movs	r2, #4
   11bf2:	e726      	b.n	11a42 <LORAWAN_GetAttr+0xa2>
   11bf4:	780a      	ldrb	r2, [r1, #0]
   11bf6:	200a      	movs	r0, #10
   11bf8:	2a03      	cmp	r2, #3
   11bfa:	d900      	bls.n	11bfe <LORAWAN_GetAttr+0x25e>
   11bfc:	e71c      	b.n	11a38 <LORAWAN_GetAttr+0x98>
   11bfe:	233c      	movs	r3, #60	; 0x3c
   11c00:	435a      	muls	r2, r3
   11c02:	4b53      	ldr	r3, [pc, #332]	; (11d50 <LORAWAN_GetAttr+0x3b0>)
   11c04:	189b      	adds	r3, r3, r2
   11c06:	33fc      	adds	r3, #252	; 0xfc
   11c08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   11c0a:	6033      	str	r3, [r6, #0]
   11c0c:	3802      	subs	r0, #2
   11c0e:	e713      	b.n	11a38 <LORAWAN_GetAttr+0x98>
   11c10:	780a      	ldrb	r2, [r1, #0]
   11c12:	200a      	movs	r0, #10
   11c14:	2a03      	cmp	r2, #3
   11c16:	d900      	bls.n	11c1a <LORAWAN_GetAttr+0x27a>
   11c18:	e70e      	b.n	11a38 <LORAWAN_GetAttr+0x98>
   11c1a:	233c      	movs	r3, #60	; 0x3c
   11c1c:	435a      	muls	r2, r3
   11c1e:	4b4c      	ldr	r3, [pc, #304]	; (11d50 <LORAWAN_GetAttr+0x3b0>)
   11c20:	189b      	adds	r3, r3, r2
   11c22:	33fc      	adds	r3, #252	; 0xfc
   11c24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   11c26:	e7f0      	b.n	11c0a <LORAWAN_GetAttr+0x26a>
   11c28:	780a      	ldrb	r2, [r1, #0]
   11c2a:	200a      	movs	r0, #10
   11c2c:	2a03      	cmp	r2, #3
   11c2e:	d900      	bls.n	11c32 <LORAWAN_GetAttr+0x292>
   11c30:	e702      	b.n	11a38 <LORAWAN_GetAttr+0x98>
   11c32:	233c      	movs	r3, #60	; 0x3c
   11c34:	435a      	muls	r2, r3
   11c36:	4b46      	ldr	r3, [pc, #280]	; (11d50 <LORAWAN_GetAttr+0x3b0>)
   11c38:	189b      	adds	r3, r3, r2
   11c3a:	33fc      	adds	r3, #252	; 0xfc
   11c3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   11c3e:	e7e4      	b.n	11c0a <LORAWAN_GetAttr+0x26a>
   11c40:	780a      	ldrb	r2, [r1, #0]
   11c42:	200a      	movs	r0, #10
   11c44:	2a03      	cmp	r2, #3
   11c46:	d900      	bls.n	11c4a <LORAWAN_GetAttr+0x2aa>
   11c48:	e6f6      	b.n	11a38 <LORAWAN_GetAttr+0x98>
   11c4a:	233c      	movs	r3, #60	; 0x3c
   11c4c:	435a      	muls	r2, r3
   11c4e:	4b40      	ldr	r3, [pc, #256]	; (11d50 <LORAWAN_GetAttr+0x3b0>)
   11c50:	189b      	adds	r3, r3, r2
   11c52:	33fc      	adds	r3, #252	; 0xfc
   11c54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   11c56:	e7d8      	b.n	11c0a <LORAWAN_GetAttr+0x26a>
   11c58:	780a      	ldrb	r2, [r1, #0]
   11c5a:	200a      	movs	r0, #10
   11c5c:	2a03      	cmp	r2, #3
   11c5e:	d900      	bls.n	11c62 <LORAWAN_GetAttr+0x2c2>
   11c60:	e6ea      	b.n	11a38 <LORAWAN_GetAttr+0x98>
   11c62:	233c      	movs	r3, #60	; 0x3c
   11c64:	435a      	muls	r2, r3
   11c66:	4b3a      	ldr	r3, [pc, #232]	; (11d50 <LORAWAN_GetAttr+0x3b0>)
   11c68:	189b      	adds	r3, r3, r2
   11c6a:	335d      	adds	r3, #93	; 0x5d
   11c6c:	33ff      	adds	r3, #255	; 0xff
   11c6e:	781b      	ldrb	r3, [r3, #0]
   11c70:	e79b      	b.n	11baa <LORAWAN_GetAttr+0x20a>
   11c72:	780a      	ldrb	r2, [r1, #0]
   11c74:	200a      	movs	r0, #10
   11c76:	2a03      	cmp	r2, #3
   11c78:	d900      	bls.n	11c7c <LORAWAN_GetAttr+0x2dc>
   11c7a:	e6dd      	b.n	11a38 <LORAWAN_GetAttr+0x98>
   11c7c:	233c      	movs	r3, #60	; 0x3c
   11c7e:	435a      	muls	r2, r3
   11c80:	4b33      	ldr	r3, [pc, #204]	; (11d50 <LORAWAN_GetAttr+0x3b0>)
   11c82:	189b      	adds	r3, r3, r2
   11c84:	335e      	adds	r3, #94	; 0x5e
   11c86:	e7f1      	b.n	11c6c <LORAWAN_GetAttr+0x2cc>
   11c88:	0010      	movs	r0, r2
   11c8a:	4b37      	ldr	r3, [pc, #220]	; (11d68 <LORAWAN_GetAttr+0x3c8>)
   11c8c:	4798      	blx	r3
   11c8e:	e6d3      	b.n	11a38 <LORAWAN_GetAttr+0x98>
   11c90:	0011      	movs	r1, r2
   11c92:	4b31      	ldr	r3, [pc, #196]	; (11d58 <LORAWAN_GetAttr+0x3b8>)
   11c94:	201f      	movs	r0, #31
   11c96:	4798      	blx	r3
   11c98:	e6d6      	b.n	11a48 <LORAWAN_GetAttr+0xa8>
   11c9a:	4b2d      	ldr	r3, [pc, #180]	; (11d50 <LORAWAN_GetAttr+0x3b0>)
   11c9c:	338c      	adds	r3, #140	; 0x8c
   11c9e:	781b      	ldrb	r3, [r3, #0]
   11ca0:	071b      	lsls	r3, r3, #28
   11ca2:	e73e      	b.n	11b22 <LORAWAN_GetAttr+0x182>
   11ca4:	4b2a      	ldr	r3, [pc, #168]	; (11d50 <LORAWAN_GetAttr+0x3b0>)
   11ca6:	338c      	adds	r3, #140	; 0x8c
   11ca8:	781b      	ldrb	r3, [r3, #0]
   11caa:	07db      	lsls	r3, r3, #31
   11cac:	e739      	b.n	11b22 <LORAWAN_GetAttr+0x182>
   11cae:	2031      	movs	r0, #49	; 0x31
   11cb0:	4b2a      	ldr	r3, [pc, #168]	; (11d5c <LORAWAN_GetAttr+0x3bc>)
   11cb2:	4798      	blx	r3
   11cb4:	e6c0      	b.n	11a38 <LORAWAN_GetAttr+0x98>
   11cb6:	492d      	ldr	r1, [pc, #180]	; (11d6c <LORAWAN_GetAttr+0x3cc>)
   11cb8:	2026      	movs	r0, #38	; 0x26
   11cba:	e7f9      	b.n	11cb0 <LORAWAN_GetAttr+0x310>
   11cbc:	4b24      	ldr	r3, [pc, #144]	; (11d50 <LORAWAN_GetAttr+0x3b0>)
   11cbe:	33dc      	adds	r3, #220	; 0xdc
   11cc0:	e6f7      	b.n	11ab2 <LORAWAN_GetAttr+0x112>
   11cc2:	4b2b      	ldr	r3, [pc, #172]	; (11d70 <LORAWAN_GetAttr+0x3d0>)
   11cc4:	4798      	blx	r3
   11cc6:	4b2b      	ldr	r3, [pc, #172]	; (11d74 <LORAWAN_GetAttr+0x3d4>)
   11cc8:	0004      	movs	r4, r0
   11cca:	4798      	blx	r3
   11ccc:	1b00      	subs	r0, r0, r4
   11cce:	7030      	strb	r0, [r6, #0]
   11cd0:	e6ba      	b.n	11a48 <LORAWAN_GetAttr+0xa8>
   11cd2:	2100      	movs	r1, #0
   11cd4:	2020      	movs	r0, #32
   11cd6:	e7eb      	b.n	11cb0 <LORAWAN_GetAttr+0x310>
   11cd8:	4b1d      	ldr	r3, [pc, #116]	; (11d50 <LORAWAN_GetAttr+0x3b0>)
   11cda:	33ff      	adds	r3, #255	; 0xff
   11cdc:	7c5b      	ldrb	r3, [r3, #17]
   11cde:	e6e4      	b.n	11aaa <LORAWAN_GetAttr+0x10a>
   11ce0:	238c      	movs	r3, #140	; 0x8c
   11ce2:	4a1b      	ldr	r2, [pc, #108]	; (11d50 <LORAWAN_GetAttr+0x3b0>)
   11ce4:	009b      	lsls	r3, r3, #2
   11ce6:	58d3      	ldr	r3, [r2, r3]
   11ce8:	e6ce      	b.n	11a88 <LORAWAN_GetAttr+0xe8>
   11cea:	258a      	movs	r5, #138	; 0x8a
   11cec:	4c18      	ldr	r4, [pc, #96]	; (11d50 <LORAWAN_GetAttr+0x3b0>)
   11cee:	00ad      	lsls	r5, r5, #2
   11cf0:	5963      	ldr	r3, [r4, r5]
   11cf2:	2015      	movs	r0, #21
   11cf4:	3301      	adds	r3, #1
   11cf6:	d100      	bne.n	11cfa <LORAWAN_GetAttr+0x35a>
   11cf8:	e69e      	b.n	11a38 <LORAWAN_GetAttr+0x98>
   11cfa:	4b1f      	ldr	r3, [pc, #124]	; (11d78 <LORAWAN_GetAttr+0x3d8>)
   11cfc:	a910      	add	r1, sp, #64	; 0x40
   11cfe:	5ce0      	ldrb	r0, [r4, r3]
   11d00:	4b1e      	ldr	r3, [pc, #120]	; (11d7c <LORAWAN_GetAttr+0x3dc>)
   11d02:	4798      	blx	r3
   11d04:	4b1e      	ldr	r3, [pc, #120]	; (11d80 <LORAWAN_GetAttr+0x3e0>)
   11d06:	4798      	blx	r3
   11d08:	22fa      	movs	r2, #250	; 0xfa
   11d0a:	9000      	str	r0, [sp, #0]
   11d0c:	9101      	str	r1, [sp, #4]
   11d0e:	0092      	lsls	r2, r2, #2
   11d10:	5960      	ldr	r0, [r4, r5]
   11d12:	2300      	movs	r3, #0
   11d14:	4d1b      	ldr	r5, [pc, #108]	; (11d84 <LORAWAN_GetAttr+0x3e4>)
   11d16:	2100      	movs	r1, #0
   11d18:	47a8      	blx	r5
   11d1a:	9a10      	ldr	r2, [sp, #64]	; 0x40
   11d1c:	9b11      	ldr	r3, [sp, #68]	; 0x44
   11d1e:	9002      	str	r0, [sp, #8]
   11d20:	9103      	str	r1, [sp, #12]
   11d22:	9800      	ldr	r0, [sp, #0]
   11d24:	9901      	ldr	r1, [sp, #4]
   11d26:	1a80      	subs	r0, r0, r2
   11d28:	4199      	sbcs	r1, r3
   11d2a:	22fa      	movs	r2, #250	; 0xfa
   11d2c:	2300      	movs	r3, #0
   11d2e:	0092      	lsls	r2, r2, #2
   11d30:	4d15      	ldr	r5, [pc, #84]	; (11d88 <LORAWAN_GetAttr+0x3e8>)
   11d32:	47a8      	blx	r5
   11d34:	238b      	movs	r3, #139	; 0x8b
   11d36:	009b      	lsls	r3, r3, #2
   11d38:	5ce4      	ldrb	r4, [r4, r3]
   11d3a:	2300      	movs	r3, #0
   11d3c:	00a2      	lsls	r2, r4, #2
   11d3e:	9c02      	ldr	r4, [sp, #8]
   11d40:	9d03      	ldr	r5, [sp, #12]
   11d42:	1912      	adds	r2, r2, r4
   11d44:	416b      	adcs	r3, r5
   11d46:	1812      	adds	r2, r2, r0
   11d48:	414b      	adcs	r3, r1
   11d4a:	6032      	str	r2, [r6, #0]
   11d4c:	6073      	str	r3, [r6, #4]
   11d4e:	e67b      	b.n	11a48 <LORAWAN_GetAttr+0xa8>
   11d50:	20002b5c 	.word	0x20002b5c
   11d54:	00019d89 	.word	0x00019d89
   11d58:	00014b5d 	.word	0x00014b5d
   11d5c:	0000d901 	.word	0x0000d901
   11d60:	00011981 	.word	0x00011981
   11d64:	00016625 	.word	0x00016625
   11d68:	0000db71 	.word	0x0000db71
   11d6c:	20002c3b 	.word	0x20002c3b
   11d70:	0000fdc9 	.word	0x0000fdc9
   11d74:	0000fe71 	.word	0x0000fe71
   11d78:	00000225 	.word	0x00000225
   11d7c:	0000f3fd 	.word	0x0000f3fd
   11d80:	0000edb5 	.word	0x0000edb5
   11d84:	00016a41 	.word	0x00016a41
   11d88:	00016a01 	.word	0x00016a01
   11d8c:	88ca      	ldrh	r2, [r1, #6]
   11d8e:	780b      	ldrb	r3, [r1, #0]
   11d90:	9206      	str	r2, [sp, #24]
   11d92:	784a      	ldrb	r2, [r1, #1]
   11d94:	af0e      	add	r7, sp, #56	; 0x38
   11d96:	9209      	str	r2, [sp, #36]	; 0x24
   11d98:	788a      	ldrb	r2, [r1, #2]
   11d9a:	2025      	movs	r0, #37	; 0x25
   11d9c:	920a      	str	r2, [sp, #40]	; 0x28
   11d9e:	78ca      	ldrb	r2, [r1, #3]
   11da0:	920b      	str	r2, [sp, #44]	; 0x2c
   11da2:	790a      	ldrb	r2, [r1, #4]
   11da4:	9208      	str	r2, [sp, #32]
   11da6:	aa0c      	add	r2, sp, #48	; 0x30
   11da8:	1d94      	adds	r4, r2, #6
   11daa:	7193      	strb	r3, [r2, #6]
   11dac:	0021      	movs	r1, r4
   11dae:	003a      	movs	r2, r7
   11db0:	4b5b      	ldr	r3, [pc, #364]	; (11f20 <LORAWAN_GetAttr+0x580>)
   11db2:	4798      	blx	r3
   11db4:	ab0c      	add	r3, sp, #48	; 0x30
   11db6:	1ddd      	adds	r5, r3, #7
   11db8:	002a      	movs	r2, r5
   11dba:	0021      	movs	r1, r4
   11dbc:	2023      	movs	r0, #35	; 0x23
   11dbe:	4b58      	ldr	r3, [pc, #352]	; (11f20 <LORAWAN_GetAttr+0x580>)
   11dc0:	4798      	blx	r3
   11dc2:	782d      	ldrb	r5, [r5, #0]
   11dc4:	2d01      	cmp	r5, #1
   11dc6:	d000      	beq.n	11dca <LORAWAN_GetAttr+0x42a>
   11dc8:	e0a1      	b.n	11f0e <LORAWAN_GetAttr+0x56e>
   11dca:	ac10      	add	r4, sp, #64	; 0x40
   11dcc:	4b55      	ldr	r3, [pc, #340]	; (11f24 <LORAWAN_GetAttr+0x584>)
   11dce:	0021      	movs	r1, r4
   11dd0:	2007      	movs	r0, #7
   11dd2:	4798      	blx	r3
   11dd4:	783b      	ldrb	r3, [r7, #0]
   11dd6:	2b0c      	cmp	r3, #12
   11dd8:	d000      	beq.n	11ddc <LORAWAN_GetAttr+0x43c>
   11dda:	e08a      	b.n	11ef2 <LORAWAN_GetAttr+0x552>
   11ddc:	2700      	movs	r7, #0
   11dde:	7823      	ldrb	r3, [r4, #0]
   11de0:	3b07      	subs	r3, #7
   11de2:	b2db      	uxtb	r3, r3
   11de4:	429d      	cmp	r5, r3
   11de6:	417f      	adcs	r7, r7
   11de8:	b2fb      	uxtb	r3, r7
   11dea:	9302      	str	r3, [sp, #8]
   11dec:	ac10      	add	r4, sp, #64	; 0x40
   11dee:	ab0c      	add	r3, sp, #48	; 0x30
   11df0:	1d99      	adds	r1, r3, #6
   11df2:	0022      	movs	r2, r4
   11df4:	4b4a      	ldr	r3, [pc, #296]	; (11f20 <LORAWAN_GetAttr+0x580>)
   11df6:	2024      	movs	r0, #36	; 0x24
   11df8:	4798      	blx	r3
   11dfa:	7823      	ldrb	r3, [r4, #0]
   11dfc:	3b07      	subs	r3, #7
   11dfe:	b2db      	uxtb	r3, r3
   11e00:	2b02      	cmp	r3, #2
   11e02:	d900      	bls.n	11e06 <LORAWAN_GetAttr+0x466>
   11e04:	e080      	b.n	11f08 <LORAWAN_GetAttr+0x568>
   11e06:	4a48      	ldr	r2, [pc, #288]	; (11f28 <LORAWAN_GetAttr+0x588>)
   11e08:	00db      	lsls	r3, r3, #3
   11e0a:	18d3      	adds	r3, r2, r3
   11e0c:	681c      	ldr	r4, [r3, #0]
   11e0e:	685d      	ldr	r5, [r3, #4]
   11e10:	2001      	movs	r0, #1
   11e12:	ab0e      	add	r3, sp, #56	; 0x38
   11e14:	781b      	ldrb	r3, [r3, #0]
   11e16:	4f45      	ldr	r7, [pc, #276]	; (11f2c <LORAWAN_GetAttr+0x58c>)
   11e18:	9300      	str	r3, [sp, #0]
   11e1a:	4098      	lsls	r0, r3
   11e1c:	47b8      	blx	r7
   11e1e:	0002      	movs	r2, r0
   11e20:	000b      	movs	r3, r1
   11e22:	0020      	movs	r0, r4
   11e24:	0029      	movs	r1, r5
   11e26:	4c42      	ldr	r4, [pc, #264]	; (11f30 <LORAWAN_GetAttr+0x590>)
   11e28:	47a0      	blx	r4
   11e2a:	0002      	movs	r2, r0
   11e2c:	000b      	movs	r3, r1
   11e2e:	2000      	movs	r0, #0
   11e30:	4940      	ldr	r1, [pc, #256]	; (11f34 <LORAWAN_GetAttr+0x594>)
   11e32:	47a0      	blx	r4
   11e34:	466b      	mov	r3, sp
   11e36:	9004      	str	r0, [sp, #16]
   11e38:	9105      	str	r1, [sp, #20]
   11e3a:	7e18      	ldrb	r0, [r3, #24]
   11e3c:	47b8      	blx	r7
   11e3e:	4c3e      	ldr	r4, [pc, #248]	; (11f38 <LORAWAN_GetAttr+0x598>)
   11e40:	2200      	movs	r2, #0
   11e42:	4b3e      	ldr	r3, [pc, #248]	; (11f3c <LORAWAN_GetAttr+0x59c>)
   11e44:	47a0      	blx	r4
   11e46:	9a04      	ldr	r2, [sp, #16]
   11e48:	9b05      	ldr	r3, [sp, #20]
   11e4a:	4c3d      	ldr	r4, [pc, #244]	; (11f40 <LORAWAN_GetAttr+0x5a0>)
   11e4c:	47a0      	blx	r4
   11e4e:	9b08      	ldr	r3, [sp, #32]
   11e50:	9006      	str	r0, [sp, #24]
   11e52:	9107      	str	r1, [sp, #28]
   11e54:	0058      	lsls	r0, r3, #1
   11e56:	9b00      	ldr	r3, [sp, #0]
   11e58:	2214      	movs	r2, #20
   11e5a:	1ac0      	subs	r0, r0, r3
   11e5c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   11e5e:	3007      	adds	r0, #7
   11e60:	009b      	lsls	r3, r3, #2
   11e62:	18c0      	adds	r0, r0, r3
   11e64:	9b09      	ldr	r3, [sp, #36]	; 0x24
   11e66:	0080      	lsls	r0, r0, #2
   11e68:	1e59      	subs	r1, r3, #1
   11e6a:	418b      	sbcs	r3, r1
   11e6c:	425b      	negs	r3, r3
   11e6e:	401a      	ands	r2, r3
   11e70:	1a80      	subs	r0, r0, r2
   11e72:	47b8      	blx	r7
   11e74:	0004      	movs	r4, r0
   11e76:	9802      	ldr	r0, [sp, #8]
   11e78:	000d      	movs	r5, r1
   11e7a:	1e43      	subs	r3, r0, #1
   11e7c:	4198      	sbcs	r0, r3
   11e7e:	9b00      	ldr	r3, [sp, #0]
   11e80:	0040      	lsls	r0, r0, #1
   11e82:	1a18      	subs	r0, r3, r0
   11e84:	0080      	lsls	r0, r0, #2
   11e86:	47b8      	blx	r7
   11e88:	0002      	movs	r2, r0
   11e8a:	000b      	movs	r3, r1
   11e8c:	0020      	movs	r0, r4
   11e8e:	0029      	movs	r1, r5
   11e90:	4c27      	ldr	r4, [pc, #156]	; (11f30 <LORAWAN_GetAttr+0x590>)
   11e92:	47a0      	blx	r4
   11e94:	4b2b      	ldr	r3, [pc, #172]	; (11f44 <LORAWAN_GetAttr+0x5a4>)
   11e96:	0004      	movs	r4, r0
   11e98:	000d      	movs	r5, r1
   11e9a:	4798      	blx	r3
   11e9c:	4b2a      	ldr	r3, [pc, #168]	; (11f48 <LORAWAN_GetAttr+0x5a8>)
   11e9e:	0007      	movs	r7, r0
   11ea0:	4798      	blx	r3
   11ea2:	0002      	movs	r2, r0
   11ea4:	000b      	movs	r3, r1
   11ea6:	0020      	movs	r0, r4
   11ea8:	0029      	movs	r1, r5
   11eaa:	4c28      	ldr	r4, [pc, #160]	; (11f4c <LORAWAN_GetAttr+0x5ac>)
   11eac:	47a0      	blx	r4
   11eae:	2200      	movs	r2, #0
   11eb0:	2300      	movs	r3, #0
   11eb2:	4c27      	ldr	r4, [pc, #156]	; (11f50 <LORAWAN_GetAttr+0x5b0>)
   11eb4:	47a0      	blx	r4
   11eb6:	1e43      	subs	r3, r0, #1
   11eb8:	4198      	sbcs	r0, r3
   11eba:	183f      	adds	r7, r7, r0
   11ebc:	003b      	movs	r3, r7
   11ebe:	980b      	ldr	r0, [sp, #44]	; 0x2c
   11ec0:	3004      	adds	r0, #4
   11ec2:	4343      	muls	r3, r0
   11ec4:	3308      	adds	r3, #8
   11ec6:	0018      	movs	r0, r3
   11ec8:	4b1f      	ldr	r3, [pc, #124]	; (11f48 <LORAWAN_GetAttr+0x5a8>)
   11eca:	4798      	blx	r3
   11ecc:	9a04      	ldr	r2, [sp, #16]
   11ece:	9b05      	ldr	r3, [sp, #20]
   11ed0:	4c1b      	ldr	r4, [pc, #108]	; (11f40 <LORAWAN_GetAttr+0x5a0>)
   11ed2:	47a0      	blx	r4
   11ed4:	9a06      	ldr	r2, [sp, #24]
   11ed6:	9b07      	ldr	r3, [sp, #28]
   11ed8:	4c17      	ldr	r4, [pc, #92]	; (11f38 <LORAWAN_GetAttr+0x598>)
   11eda:	47a0      	blx	r4
   11edc:	2200      	movs	r2, #0
   11ede:	4b1d      	ldr	r3, [pc, #116]	; (11f54 <LORAWAN_GetAttr+0x5b4>)
   11ee0:	4c17      	ldr	r4, [pc, #92]	; (11f40 <LORAWAN_GetAttr+0x5a0>)
   11ee2:	47a0      	blx	r4
   11ee4:	2200      	movs	r2, #0
   11ee6:	4b1b      	ldr	r3, [pc, #108]	; (11f54 <LORAWAN_GetAttr+0x5b4>)
   11ee8:	47a0      	blx	r4
   11eea:	4b16      	ldr	r3, [pc, #88]	; (11f44 <LORAWAN_GetAttr+0x5a4>)
   11eec:	4798      	blx	r3
   11eee:	6030      	str	r0, [r6, #0]
   11ef0:	e5aa      	b.n	11a48 <LORAWAN_GetAttr+0xa8>
   11ef2:	2200      	movs	r2, #0
   11ef4:	9202      	str	r2, [sp, #8]
   11ef6:	2b0b      	cmp	r3, #11
   11ef8:	d000      	beq.n	11efc <LORAWAN_GetAttr+0x55c>
   11efa:	e777      	b.n	11dec <LORAWAN_GetAttr+0x44c>
   11efc:	7827      	ldrb	r7, [r4, #0]
   11efe:	3f07      	subs	r7, #7
   11f00:	427a      	negs	r2, r7
   11f02:	417a      	adcs	r2, r7
   11f04:	b2d3      	uxtb	r3, r2
   11f06:	e770      	b.n	11dea <LORAWAN_GetAttr+0x44a>
   11f08:	2400      	movs	r4, #0
   11f0a:	2500      	movs	r5, #0
   11f0c:	e780      	b.n	11e10 <LORAWAN_GetAttr+0x470>
   11f0e:	20a0      	movs	r0, #160	; 0xa0
   11f10:	9b08      	ldr	r3, [sp, #32]
   11f12:	4358      	muls	r0, r3
   11f14:	23c8      	movs	r3, #200	; 0xc8
   11f16:	009b      	lsls	r3, r3, #2
   11f18:	18c0      	adds	r0, r0, r3
   11f1a:	4b0b      	ldr	r3, [pc, #44]	; (11f48 <LORAWAN_GetAttr+0x5a8>)
   11f1c:	4798      	blx	r3
   11f1e:	e7e4      	b.n	11eea <LORAWAN_GetAttr+0x54a>
   11f20:	0000d901 	.word	0x0000d901
   11f24:	00014b5d 	.word	0x00014b5d
   11f28:	00020290 	.word	0x00020290
   11f2c:	000194c5 	.word	0x000194c5
   11f30:	000180c9 	.word	0x000180c9
   11f34:	3ff00000 	.word	0x3ff00000
   11f38:	00017aa9 	.word	0x00017aa9
   11f3c:	40110000 	.word	0x40110000
   11f40:	00018931 	.word	0x00018931
   11f44:	00016ac5 	.word	0x00016ac5
   11f48:	00019549 	.word	0x00019549
   11f4c:	00018e31 	.word	0x00018e31
   11f50:	00016965 	.word	0x00016965
   11f54:	408f4000 	.word	0x408f4000

00011f58 <LORAWAN_TxDone>:
   11f58:	b5f0      	push	{r4, r5, r6, r7, lr}
   11f5a:	6843      	ldr	r3, [r0, #4]
   11f5c:	b091      	sub	sp, #68	; 0x44
   11f5e:	ad08      	add	r5, sp, #32
   11f60:	7804      	ldrb	r4, [r0, #0]
   11f62:	9302      	str	r3, [sp, #8]
   11f64:	2100      	movs	r1, #0
   11f66:	4b83      	ldr	r3, [pc, #524]	; (12174 <LORAWAN_TxDone+0x21c>)
   11f68:	002a      	movs	r2, r5
   11f6a:	2027      	movs	r0, #39	; 0x27
   11f6c:	4798      	blx	r3
   11f6e:	4f82      	ldr	r7, [pc, #520]	; (12178 <LORAWAN_TxDone+0x220>)
   11f70:	0039      	movs	r1, r7
   11f72:	317c      	adds	r1, #124	; 0x7c
   11f74:	780b      	ldrb	r3, [r1, #0]
   11f76:	2b7f      	cmp	r3, #127	; 0x7f
   11f78:	d900      	bls.n	11f7c <LORAWAN_TxDone+0x24>
   11f7a:	e259      	b.n	12430 <LORAWAN_TxDone+0x4d8>
   11f7c:	4a7f      	ldr	r2, [pc, #508]	; (1217c <LORAWAN_TxDone+0x224>)
   11f7e:	7810      	ldrb	r0, [r2, #0]
   11f80:	2804      	cmp	r0, #4
   11f82:	d10b      	bne.n	11f9c <LORAWAN_TxDone+0x44>
   11f84:	220e      	movs	r2, #14
   11f86:	4393      	bics	r3, r2
   11f88:	700b      	strb	r3, [r1, #0]
   11f8a:	3017      	adds	r0, #23
   11f8c:	07db      	lsls	r3, r3, #31
   11f8e:	d500      	bpl.n	11f92 <LORAWAN_TxDone+0x3a>
   11f90:	e0b0      	b.n	120f4 <LORAWAN_TxDone+0x19c>
   11f92:	201b      	movs	r0, #27
   11f94:	4b7a      	ldr	r3, [pc, #488]	; (12180 <LORAWAN_TxDone+0x228>)
   11f96:	4798      	blx	r3
   11f98:	b011      	add	sp, #68	; 0x44
   11f9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11f9c:	7813      	ldrb	r3, [r2, #0]
   11f9e:	2b02      	cmp	r3, #2
   11fa0:	d1fa      	bne.n	11f98 <LORAWAN_TxDone+0x40>
   11fa2:	4b78      	ldr	r3, [pc, #480]	; (12184 <LORAWAN_TxDone+0x22c>)
   11fa4:	5cfa      	ldrb	r2, [r7, r3]
   11fa6:	2a00      	cmp	r2, #0
   11fa8:	d005      	beq.n	11fb6 <LORAWAN_TxDone+0x5e>
   11faa:	2200      	movs	r2, #0
   11fac:	4976      	ldr	r1, [pc, #472]	; (12188 <LORAWAN_TxDone+0x230>)
   11fae:	54fa      	strb	r2, [r7, r3]
   11fb0:	200b      	movs	r0, #11
   11fb2:	4b76      	ldr	r3, [pc, #472]	; (1218c <LORAWAN_TxDone+0x234>)
   11fb4:	4798      	blx	r3
   11fb6:	2c07      	cmp	r4, #7
   11fb8:	d000      	beq.n	11fbc <LORAWAN_TxDone+0x64>
   11fba:	e09f      	b.n	120fc <LORAWAN_TxDone+0x1a4>
   11fbc:	79eb      	ldrb	r3, [r5, #7]
   11fbe:	2b00      	cmp	r3, #0
   11fc0:	d0ea      	beq.n	11f98 <LORAWAN_TxDone+0x40>
   11fc2:	003b      	movs	r3, r7
   11fc4:	338c      	adds	r3, #140	; 0x8c
   11fc6:	7818      	ldrb	r0, [r3, #0]
   11fc8:	003e      	movs	r6, r7
   11fca:	2304      	movs	r3, #4
   11fcc:	36fe      	adds	r6, #254	; 0xfe
   11fce:	4018      	ands	r0, r3
   11fd0:	4d6f      	ldr	r5, [pc, #444]	; (12190 <LORAWAN_TxDone+0x238>)
   11fd2:	d005      	beq.n	11fe0 <LORAWAN_TxDone+0x88>
   11fd4:	2000      	movs	r0, #0
   11fd6:	2109      	movs	r1, #9
   11fd8:	82b0      	strh	r0, [r6, #20]
   11fda:	47a8      	blx	r5
   11fdc:	0020      	movs	r0, r4
   11fde:	e7d9      	b.n	11f94 <LORAWAN_TxDone+0x3c>
   11fe0:	8ab3      	ldrh	r3, [r6, #20]
   11fe2:	2109      	movs	r1, #9
   11fe4:	3301      	adds	r3, #1
   11fe6:	82b3      	strh	r3, [r6, #20]
   11fe8:	47a8      	blx	r5
   11fea:	8af3      	ldrh	r3, [r6, #22]
   11fec:	4a69      	ldr	r2, [pc, #420]	; (12194 <LORAWAN_TxDone+0x23c>)
   11fee:	4293      	cmp	r3, r2
   11ff0:	d002      	beq.n	11ff8 <LORAWAN_TxDone+0xa0>
   11ff2:	8ab2      	ldrh	r2, [r6, #20]
   11ff4:	429a      	cmp	r2, r3
   11ff6:	d265      	bcs.n	120c4 <LORAWAN_TxDone+0x16c>
   11ff8:	4b67      	ldr	r3, [pc, #412]	; (12198 <LORAWAN_TxDone+0x240>)
   11ffa:	5cfb      	ldrb	r3, [r7, r3]
   11ffc:	2b00      	cmp	r3, #0
   11ffe:	d061      	beq.n	120c4 <LORAWAN_TxDone+0x16c>
   12000:	2601      	movs	r6, #1
   12002:	003b      	movs	r3, r7
   12004:	a906      	add	r1, sp, #24
   12006:	700e      	strb	r6, [r1, #0]
   12008:	33e1      	adds	r3, #225	; 0xe1
   1200a:	781b      	ldrb	r3, [r3, #0]
   1200c:	aa0c      	add	r2, sp, #48	; 0x30
   1200e:	704b      	strb	r3, [r1, #1]
   12010:	003b      	movs	r3, r7
   12012:	33df      	adds	r3, #223	; 0xdf
   12014:	781b      	ldrb	r3, [r3, #0]
   12016:	202f      	movs	r0, #47	; 0x2f
   12018:	708b      	strb	r3, [r1, #2]
   1201a:	4b60      	ldr	r3, [pc, #384]	; (1219c <LORAWAN_TxDone+0x244>)
   1201c:	4798      	blx	r3
   1201e:	2808      	cmp	r0, #8
   12020:	d135      	bne.n	1208e <LORAWAN_TxDone+0x136>
   12022:	a807      	add	r0, sp, #28
   12024:	4b5e      	ldr	r3, [pc, #376]	; (121a0 <LORAWAN_TxDone+0x248>)
   12026:	7006      	strb	r6, [r0, #0]
   12028:	4798      	blx	r3
   1202a:	980c      	ldr	r0, [sp, #48]	; 0x30
   1202c:	990d      	ldr	r1, [sp, #52]	; 0x34
   1202e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   12030:	4b5c      	ldr	r3, [pc, #368]	; (121a4 <LORAWAN_TxDone+0x24c>)
   12032:	4798      	blx	r3
   12034:	003b      	movs	r3, r7
   12036:	33c6      	adds	r3, #198	; 0xc6
   12038:	881b      	ldrh	r3, [r3, #0]
   1203a:	a80a      	add	r0, sp, #40	; 0x28
   1203c:	7003      	strb	r3, [r0, #0]
   1203e:	4b5a      	ldr	r3, [pc, #360]	; (121a8 <LORAWAN_TxDone+0x250>)
   12040:	6043      	str	r3, [r0, #4]
   12042:	4b5a      	ldr	r3, [pc, #360]	; (121ac <LORAWAN_TxDone+0x254>)
   12044:	4798      	blx	r3
   12046:	1e04      	subs	r4, r0, #0
   12048:	d108      	bne.n	1205c <LORAWAN_TxDone+0x104>
   1204a:	220e      	movs	r2, #14
   1204c:	377c      	adds	r7, #124	; 0x7c
   1204e:	783b      	ldrb	r3, [r7, #0]
   12050:	4393      	bics	r3, r2
   12052:	001a      	movs	r2, r3
   12054:	2302      	movs	r3, #2
   12056:	4313      	orrs	r3, r2
   12058:	703b      	strb	r3, [r7, #0]
   1205a:	e79d      	b.n	11f98 <LORAWAN_TxDone+0x40>
   1205c:	003b      	movs	r3, r7
   1205e:	338c      	adds	r3, #140	; 0x8c
   12060:	7818      	ldrb	r0, [r3, #0]
   12062:	003b      	movs	r3, r7
   12064:	4030      	ands	r0, r6
   12066:	33fe      	adds	r3, #254	; 0xfe
   12068:	4e51      	ldr	r6, [pc, #324]	; (121b0 <LORAWAN_TxDone+0x258>)
   1206a:	4f52      	ldr	r7, [pc, #328]	; (121b4 <LORAWAN_TxDone+0x25c>)
   1206c:	2800      	cmp	r0, #0
   1206e:	d009      	beq.n	12084 <LORAWAN_TxDone+0x12c>
   12070:	2000      	movs	r0, #0
   12072:	2109      	movs	r1, #9
   12074:	8298      	strh	r0, [r3, #20]
   12076:	47a8      	blx	r5
   12078:	4b4f      	ldr	r3, [pc, #316]	; (121b8 <LORAWAN_TxDone+0x260>)
   1207a:	4798      	blx	r3
   1207c:	47b8      	blx	r7
   1207e:	0020      	movs	r0, r4
   12080:	47b0      	blx	r6
   12082:	e789      	b.n	11f98 <LORAWAN_TxDone+0x40>
   12084:	2109      	movs	r1, #9
   12086:	8298      	strh	r0, [r3, #20]
   12088:	47a8      	blx	r5
   1208a:	4b4c      	ldr	r3, [pc, #304]	; (121bc <LORAWAN_TxDone+0x264>)
   1208c:	e7f5      	b.n	1207a <LORAWAN_TxDone+0x122>
   1208e:	003b      	movs	r3, r7
   12090:	338c      	adds	r3, #140	; 0x8c
   12092:	7818      	ldrb	r0, [r3, #0]
   12094:	003b      	movs	r3, r7
   12096:	4006      	ands	r6, r0
   12098:	4c45      	ldr	r4, [pc, #276]	; (121b0 <LORAWAN_TxDone+0x258>)
   1209a:	33fe      	adds	r3, #254	; 0xfe
   1209c:	4f45      	ldr	r7, [pc, #276]	; (121b4 <LORAWAN_TxDone+0x25c>)
   1209e:	2e00      	cmp	r6, #0
   120a0:	d00a      	beq.n	120b8 <LORAWAN_TxDone+0x160>
   120a2:	2600      	movs	r6, #0
   120a4:	2109      	movs	r1, #9
   120a6:	0030      	movs	r0, r6
   120a8:	829e      	strh	r6, [r3, #20]
   120aa:	47a8      	blx	r5
   120ac:	4b42      	ldr	r3, [pc, #264]	; (121b8 <LORAWAN_TxDone+0x260>)
   120ae:	4798      	blx	r3
   120b0:	47b8      	blx	r7
   120b2:	0030      	movs	r0, r6
   120b4:	47a0      	blx	r4
   120b6:	e76f      	b.n	11f98 <LORAWAN_TxDone+0x40>
   120b8:	2109      	movs	r1, #9
   120ba:	0030      	movs	r0, r6
   120bc:	829e      	strh	r6, [r3, #20]
   120be:	47a8      	blx	r5
   120c0:	4b3e      	ldr	r3, [pc, #248]	; (121bc <LORAWAN_TxDone+0x264>)
   120c2:	e7f4      	b.n	120ae <LORAWAN_TxDone+0x156>
   120c4:	003b      	movs	r3, r7
   120c6:	2000      	movs	r0, #0
   120c8:	33fe      	adds	r3, #254	; 0xfe
   120ca:	2109      	movs	r1, #9
   120cc:	8298      	strh	r0, [r3, #20]
   120ce:	47a8      	blx	r5
   120d0:	003a      	movs	r2, r7
   120d2:	210e      	movs	r1, #14
   120d4:	327c      	adds	r2, #124	; 0x7c
   120d6:	7813      	ldrb	r3, [r2, #0]
   120d8:	378c      	adds	r7, #140	; 0x8c
   120da:	438b      	bics	r3, r1
   120dc:	7013      	strb	r3, [r2, #0]
   120de:	2220      	movs	r2, #32
   120e0:	783b      	ldrb	r3, [r7, #0]
   120e2:	4c34      	ldr	r4, [pc, #208]	; (121b4 <LORAWAN_TxDone+0x25c>)
   120e4:	4393      	bics	r3, r2
   120e6:	703b      	strb	r3, [r7, #0]
   120e8:	07db      	lsls	r3, r3, #31
   120ea:	d505      	bpl.n	120f8 <LORAWAN_TxDone+0x1a0>
   120ec:	4b32      	ldr	r3, [pc, #200]	; (121b8 <LORAWAN_TxDone+0x260>)
   120ee:	4798      	blx	r3
   120f0:	47a0      	blx	r4
   120f2:	2007      	movs	r0, #7
   120f4:	4b2e      	ldr	r3, [pc, #184]	; (121b0 <LORAWAN_TxDone+0x258>)
   120f6:	e74e      	b.n	11f96 <LORAWAN_TxDone+0x3e>
   120f8:	4b30      	ldr	r3, [pc, #192]	; (121bc <LORAWAN_TxDone+0x264>)
   120fa:	e7f8      	b.n	120ee <LORAWAN_TxDone+0x196>
   120fc:	2c00      	cmp	r4, #0
   120fe:	d000      	beq.n	12102 <LORAWAN_TxDone+0x1aa>
   12100:	e74a      	b.n	11f98 <LORAWAN_TxDone+0x40>
   12102:	003b      	movs	r3, r7
   12104:	33fc      	adds	r3, #252	; 0xfc
   12106:	681d      	ldr	r5, [r3, #0]
   12108:	003b      	movs	r3, r7
   1210a:	33fe      	adds	r3, #254	; 0xfe
   1210c:	829c      	strh	r4, [r3, #20]
   1210e:	0020      	movs	r0, r4
   12110:	2109      	movs	r1, #9
   12112:	4c1f      	ldr	r4, [pc, #124]	; (12190 <LORAWAN_TxDone+0x238>)
   12114:	47a0      	blx	r4
   12116:	003b      	movs	r3, r7
   12118:	003e      	movs	r6, r7
   1211a:	33db      	adds	r3, #219	; 0xdb
   1211c:	781b      	ldrb	r3, [r3, #0]
   1211e:	367c      	adds	r6, #124	; 0x7c
   12120:	2b00      	cmp	r3, #0
   12122:	d14d      	bne.n	121c0 <LORAWAN_TxDone+0x268>
   12124:	003a      	movs	r2, r7
   12126:	32dc      	adds	r2, #220	; 0xdc
   12128:	7812      	ldrb	r2, [r2, #0]
   1212a:	2a00      	cmp	r2, #0
   1212c:	d148      	bne.n	121c0 <LORAWAN_TxDone+0x268>
   1212e:	7832      	ldrb	r2, [r6, #0]
   12130:	3301      	adds	r3, #1
   12132:	421a      	tst	r2, r3
   12134:	d053      	beq.n	121de <LORAWAN_TxDone+0x286>
   12136:	1d39      	adds	r1, r7, #4
   12138:	6fca      	ldr	r2, [r1, #124]	; 0x7c
   1213a:	18d2      	adds	r2, r2, r3
   1213c:	67ca      	str	r2, [r1, #124]	; 0x7c
   1213e:	2188      	movs	r1, #136	; 0x88
   12140:	0089      	lsls	r1, r1, #2
   12142:	5c79      	ldrb	r1, [r7, r1]
   12144:	2900      	cmp	r1, #0
   12146:	d003      	beq.n	12150 <LORAWAN_TxDone+0x1f8>
   12148:	408b      	lsls	r3, r1
   1214a:	3b01      	subs	r3, #1
   1214c:	421a      	tst	r2, r3
   1214e:	d102      	bne.n	12156 <LORAWAN_TxDone+0x1fe>
   12150:	2116      	movs	r1, #22
   12152:	2000      	movs	r0, #0
   12154:	47a0      	blx	r4
   12156:	782b      	ldrb	r3, [r5, #0]
   12158:	003a      	movs	r2, r7
   1215a:	2b01      	cmp	r3, #1
   1215c:	d106      	bne.n	1216c <LORAWAN_TxDone+0x214>
   1215e:	328c      	adds	r2, #140	; 0x8c
   12160:	7811      	ldrb	r1, [r2, #0]
   12162:	430b      	orrs	r3, r1
   12164:	7013      	strb	r3, [r2, #0]
   12166:	003a      	movs	r2, r7
   12168:	32dc      	adds	r2, #220	; 0xdc
   1216a:	e000      	b.n	1216e <LORAWAN_TxDone+0x216>
   1216c:	32db      	adds	r2, #219	; 0xdb
   1216e:	7813      	ldrb	r3, [r2, #0]
   12170:	3301      	adds	r3, #1
   12172:	e033      	b.n	121dc <LORAWAN_TxDone+0x284>
   12174:	000119a1 	.word	0x000119a1
   12178:	20002b5c 	.word	0x20002b5c
   1217c:	20002d90 	.word	0x20002d90
   12180:	00010985 	.word	0x00010985
   12184:	00000216 	.word	0x00000216
   12188:	20002d71 	.word	0x20002d71
   1218c:	00014c4d 	.word	0x00014c4d
   12190:	0000e0dd 	.word	0x0000e0dd
   12194:	0000ffff 	.word	0x0000ffff
   12198:	0000021e 	.word	0x0000021e
   1219c:	0000d901 	.word	0x0000d901
   121a0:	00015e51 	.word	0x00015e51
   121a4:	00010f15 	.word	0x00010f15
   121a8:	20002da1 	.word	0x20002da1
   121ac:	0001557d 	.word	0x0001557d
   121b0:	0001148d 	.word	0x0001148d
   121b4:	0000fd85 	.word	0x0000fd85
   121b8:	00010931 	.word	0x00010931
   121bc:	00010961 	.word	0x00010961
   121c0:	003a      	movs	r2, r7
   121c2:	327c      	adds	r2, #124	; 0x7c
   121c4:	7811      	ldrb	r1, [r2, #0]
   121c6:	2201      	movs	r2, #1
   121c8:	4211      	tst	r1, r2
   121ca:	d008      	beq.n	121de <LORAWAN_TxDone+0x286>
   121cc:	0039      	movs	r1, r7
   121ce:	318c      	adds	r1, #140	; 0x8c
   121d0:	7809      	ldrb	r1, [r1, #0]
   121d2:	4211      	tst	r1, r2
   121d4:	d1c7      	bne.n	12166 <LORAWAN_TxDone+0x20e>
   121d6:	189b      	adds	r3, r3, r2
   121d8:	003a      	movs	r2, r7
   121da:	32db      	adds	r2, #219	; 0xdb
   121dc:	7013      	strb	r3, [r2, #0]
   121de:	003b      	movs	r3, r7
   121e0:	2200      	movs	r2, #0
   121e2:	33f0      	adds	r3, #240	; 0xf0
   121e4:	701a      	strb	r2, [r3, #0]
   121e6:	003a      	movs	r2, r7
   121e8:	210e      	movs	r1, #14
   121ea:	2504      	movs	r5, #4
   121ec:	327c      	adds	r2, #124	; 0x7c
   121ee:	7813      	ldrb	r3, [r2, #0]
   121f0:	003e      	movs	r6, r7
   121f2:	438b      	bics	r3, r1
   121f4:	432b      	orrs	r3, r5
   121f6:	7013      	strb	r3, [r2, #0]
   121f8:	003b      	movs	r3, r7
   121fa:	33df      	adds	r3, #223	; 0xdf
   121fc:	781b      	ldrb	r3, [r3, #0]
   121fe:	a907      	add	r1, sp, #28
   12200:	708b      	strb	r3, [r1, #2]
   12202:	003b      	movs	r3, r7
   12204:	33ee      	adds	r3, #238	; 0xee
   12206:	781b      	ldrb	r3, [r3, #0]
   12208:	368c      	adds	r6, #140	; 0x8c
   1220a:	704b      	strb	r3, [r1, #1]
   1220c:	7833      	ldrb	r3, [r6, #0]
   1220e:	ac0a      	add	r4, sp, #40	; 0x28
   12210:	075b      	lsls	r3, r3, #29
   12212:	0fdb      	lsrs	r3, r3, #31
   12214:	700b      	strb	r3, [r1, #0]
   12216:	0022      	movs	r2, r4
   12218:	4b95      	ldr	r3, [pc, #596]	; (12470 <LORAWAN_TxDone+0x518>)
   1221a:	2019      	movs	r0, #25
   1221c:	4798      	blx	r3
   1221e:	7833      	ldrb	r3, [r6, #0]
   12220:	422b      	tst	r3, r5
   12222:	d100      	bne.n	12226 <LORAWAN_TxDone+0x2ce>
   12224:	e0cd      	b.n	123c2 <LORAWAN_TxDone+0x46a>
   12226:	2300      	movs	r3, #0
   12228:	ae0c      	add	r6, sp, #48	; 0x30
   1222a:	7033      	strb	r3, [r6, #0]
   1222c:	0032      	movs	r2, r6
   1222e:	2100      	movs	r1, #0
   12230:	2009      	movs	r0, #9
   12232:	4b8f      	ldr	r3, [pc, #572]	; (12470 <LORAWAN_TxDone+0x518>)
   12234:	4798      	blx	r3
   12236:	0031      	movs	r1, r6
   12238:	aa06      	add	r2, sp, #24
   1223a:	0028      	movs	r0, r5
   1223c:	4b8c      	ldr	r3, [pc, #560]	; (12470 <LORAWAN_TxDone+0x518>)
   1223e:	4798      	blx	r3
   12240:	0039      	movs	r1, r7
   12242:	7923      	ldrb	r3, [r4, #4]
   12244:	3169      	adds	r1, #105	; 0x69
   12246:	700b      	strb	r3, [r1, #0]
   12248:	003b      	movs	r3, r7
   1224a:	260f      	movs	r6, #15
   1224c:	7822      	ldrb	r2, [r4, #0]
   1224e:	3365      	adds	r3, #101	; 0x65
   12250:	701a      	strb	r2, [r3, #0]
   12252:	7862      	ldrb	r2, [r4, #1]
   12254:	2004      	movs	r0, #4
   12256:	705a      	strb	r2, [r3, #1]
   12258:	78a2      	ldrb	r2, [r4, #2]
   1225a:	2500      	movs	r5, #0
   1225c:	709a      	strb	r2, [r3, #2]
   1225e:	78e2      	ldrb	r2, [r4, #3]
   12260:	70da      	strb	r2, [r3, #3]
   12262:	ab02      	add	r3, sp, #8
   12264:	18f6      	adds	r6, r6, r3
   12266:	0032      	movs	r2, r6
   12268:	4b81      	ldr	r3, [pc, #516]	; (12470 <LORAWAN_TxDone+0x518>)
   1226a:	4798      	blx	r3
   1226c:	003b      	movs	r3, r7
   1226e:	338c      	adds	r3, #140	; 0x8c
   12270:	781c      	ldrb	r4, [r3, #0]
   12272:	2304      	movs	r3, #4
   12274:	401c      	ands	r4, r3
   12276:	2300      	movs	r3, #0
   12278:	003a      	movs	r2, r7
   1227a:	56f3      	ldrsb	r3, [r6, r3]
   1227c:	42ac      	cmp	r4, r5
   1227e:	d100      	bne.n	12282 <LORAWAN_TxDone+0x32a>
   12280:	e0a2      	b.n	123c8 <LORAWAN_TxDone+0x470>
   12282:	2100      	movs	r1, #0
   12284:	32ce      	adds	r2, #206	; 0xce
   12286:	8816      	ldrh	r6, [r2, #0]
   12288:	aa06      	add	r2, sp, #24
   1228a:	5651      	ldrsb	r1, [r2, r1]
   1228c:	4c79      	ldr	r4, [pc, #484]	; (12474 <LORAWAN_TxDone+0x51c>)
   1228e:	1872      	adds	r2, r6, r1
   12290:	9203      	str	r2, [sp, #12]
   12292:	003a      	movs	r2, r7
   12294:	32cc      	adds	r2, #204	; 0xcc
   12296:	8811      	ldrh	r1, [r2, #0]
   12298:	26fa      	movs	r6, #250	; 0xfa
   1229a:	18c9      	adds	r1, r1, r3
   1229c:	4b76      	ldr	r3, [pc, #472]	; (12478 <LORAWAN_TxDone+0x520>)
   1229e:	00b6      	lsls	r6, r6, #2
   122a0:	5cfb      	ldrb	r3, [r7, r3]
   122a2:	002a      	movs	r2, r5
   122a4:	1ac9      	subs	r1, r1, r3
   122a6:	003b      	movs	r3, r7
   122a8:	33e2      	adds	r3, #226	; 0xe2
   122aa:	7818      	ldrb	r0, [r3, #0]
   122ac:	4371      	muls	r1, r6
   122ae:	4b73      	ldr	r3, [pc, #460]	; (1247c <LORAWAN_TxDone+0x524>)
   122b0:	9500      	str	r5, [sp, #0]
   122b2:	47a0      	blx	r4
   122b4:	4b70      	ldr	r3, [pc, #448]	; (12478 <LORAWAN_TxDone+0x520>)
   122b6:	002a      	movs	r2, r5
   122b8:	5cf9      	ldrb	r1, [r7, r3]
   122ba:	9b03      	ldr	r3, [sp, #12]
   122bc:	1a59      	subs	r1, r3, r1
   122be:	003b      	movs	r3, r7
   122c0:	33e3      	adds	r3, #227	; 0xe3
   122c2:	7818      	ldrb	r0, [r3, #0]
   122c4:	4371      	muls	r1, r6
   122c6:	4b6e      	ldr	r3, [pc, #440]	; (12480 <LORAWAN_TxDone+0x528>)
   122c8:	9500      	str	r5, [sp, #0]
   122ca:	47a0      	blx	r4
   122cc:	003b      	movs	r3, r7
   122ce:	33ff      	adds	r3, #255	; 0xff
   122d0:	7c5b      	ldrb	r3, [r3, #17]
   122d2:	069b      	lsls	r3, r3, #26
   122d4:	d549      	bpl.n	1236a <LORAWAN_TxDone+0x412>
   122d6:	466a      	mov	r2, sp
   122d8:	003b      	movs	r3, r7
   122da:	7a12      	ldrb	r2, [r2, #8]
   122dc:	3377      	adds	r3, #119	; 0x77
   122de:	701a      	strb	r2, [r3, #0]
   122e0:	9a02      	ldr	r2, [sp, #8]
   122e2:	ad0c      	add	r5, sp, #48	; 0x30
   122e4:	0a12      	lsrs	r2, r2, #8
   122e6:	705a      	strb	r2, [r3, #1]
   122e8:	9a02      	ldr	r2, [sp, #8]
   122ea:	0c12      	lsrs	r2, r2, #16
   122ec:	709a      	strb	r2, [r3, #2]
   122ee:	9a02      	ldr	r2, [sp, #8]
   122f0:	0e12      	lsrs	r2, r2, #24
   122f2:	70da      	strb	r2, [r3, #3]
   122f4:	003b      	movs	r3, r7
   122f6:	337b      	adds	r3, #123	; 0x7b
   122f8:	781b      	ldrb	r3, [r3, #0]
   122fa:	2b00      	cmp	r3, #0
   122fc:	d027      	beq.n	1234e <LORAWAN_TxDone+0x3f6>
   122fe:	003c      	movs	r4, r7
   12300:	6f3a      	ldr	r2, [r7, #112]	; 0x70
   12302:	346f      	adds	r4, #111	; 0x6f
   12304:	0216      	lsls	r6, r2, #8
   12306:	003a      	movs	r2, r7
   12308:	7823      	ldrb	r3, [r4, #0]
   1230a:	3273      	adds	r2, #115	; 0x73
   1230c:	4333      	orrs	r3, r6
   1230e:	6f7e      	ldr	r6, [r7, #116]	; 0x74
   12310:	7812      	ldrb	r2, [r2, #0]
   12312:	0236      	lsls	r6, r6, #8
   12314:	4316      	orrs	r6, r2
   12316:	431e      	orrs	r6, r3
   12318:	d119      	bne.n	1234e <LORAWAN_TxDone+0x3f6>
   1231a:	2301      	movs	r3, #1
   1231c:	0029      	movs	r1, r5
   1231e:	702b      	strb	r3, [r5, #0]
   12320:	2021      	movs	r0, #33	; 0x21
   12322:	4b58      	ldr	r3, [pc, #352]	; (12484 <LORAWAN_TxDone+0x52c>)
   12324:	4798      	blx	r3
   12326:	4b58      	ldr	r3, [pc, #352]	; (12488 <LORAWAN_TxDone+0x530>)
   12328:	4798      	blx	r3
   1232a:	0033      	movs	r3, r6
   1232c:	9a02      	ldr	r2, [sp, #8]
   1232e:	1a80      	subs	r0, r0, r2
   12330:	4199      	sbcs	r1, r3
   12332:	0a03      	lsrs	r3, r0, #8
   12334:	7063      	strb	r3, [r4, #1]
   12336:	0c03      	lsrs	r3, r0, #16
   12338:	70a3      	strb	r3, [r4, #2]
   1233a:	0e03      	lsrs	r3, r0, #24
   1233c:	70e3      	strb	r3, [r4, #3]
   1233e:	0a0b      	lsrs	r3, r1, #8
   12340:	7163      	strb	r3, [r4, #5]
   12342:	0c0b      	lsrs	r3, r1, #16
   12344:	71a3      	strb	r3, [r4, #6]
   12346:	0e0b      	lsrs	r3, r1, #24
   12348:	7020      	strb	r0, [r4, #0]
   1234a:	7121      	strb	r1, [r4, #4]
   1234c:	71e3      	strb	r3, [r4, #7]
   1234e:	4a4f      	ldr	r2, [pc, #316]	; (1248c <LORAWAN_TxDone+0x534>)
   12350:	2020      	movs	r0, #32
   12352:	0013      	movs	r3, r2
   12354:	3377      	adds	r3, #119	; 0x77
   12356:	7819      	ldrb	r1, [r3, #0]
   12358:	6f93      	ldr	r3, [r2, #120]	; 0x78
   1235a:	021b      	lsls	r3, r3, #8
   1235c:	430b      	orrs	r3, r1
   1235e:	930c      	str	r3, [sp, #48]	; 0x30
   12360:	2301      	movs	r3, #1
   12362:	0029      	movs	r1, r5
   12364:	712b      	strb	r3, [r5, #4]
   12366:	4b47      	ldr	r3, [pc, #284]	; (12484 <LORAWAN_TxDone+0x52c>)
   12368:	4798      	blx	r3
   1236a:	4c48      	ldr	r4, [pc, #288]	; (1248c <LORAWAN_TxDone+0x534>)
   1236c:	2102      	movs	r1, #2
   1236e:	0023      	movs	r3, r4
   12370:	33ff      	adds	r3, #255	; 0xff
   12372:	7c5b      	ldrb	r3, [r3, #17]
   12374:	4019      	ands	r1, r3
   12376:	d057      	beq.n	12428 <LORAWAN_TxDone+0x4d0>
   12378:	466b      	mov	r3, sp
   1237a:	891b      	ldrh	r3, [r3, #8]
   1237c:	a90c      	add	r1, sp, #48	; 0x30
   1237e:	800b      	strh	r3, [r1, #0]
   12380:	0023      	movs	r3, r4
   12382:	338c      	adds	r3, #140	; 0x8c
   12384:	781b      	ldrb	r3, [r3, #0]
   12386:	201f      	movs	r0, #31
   12388:	075b      	lsls	r3, r3, #29
   1238a:	0fdb      	lsrs	r3, r3, #31
   1238c:	710b      	strb	r3, [r1, #4]
   1238e:	0023      	movs	r3, r4
   12390:	3390      	adds	r3, #144	; 0x90
   12392:	781a      	ldrb	r2, [r3, #0]
   12394:	2301      	movs	r3, #1
   12396:	4093      	lsls	r3, r2
   12398:	804b      	strh	r3, [r1, #2]
   1239a:	4b3a      	ldr	r3, [pc, #232]	; (12484 <LORAWAN_TxDone+0x52c>)
   1239c:	4798      	blx	r3
   1239e:	2589      	movs	r5, #137	; 0x89
   123a0:	00ad      	lsls	r5, r5, #2
   123a2:	5d63      	ldrb	r3, [r4, r5]
   123a4:	2b00      	cmp	r3, #0
   123a6:	d100      	bne.n	123aa <LORAWAN_TxDone+0x452>
   123a8:	e5f6      	b.n	11f98 <LORAWAN_TxDone+0x40>
   123aa:	4b37      	ldr	r3, [pc, #220]	; (12488 <LORAWAN_TxDone+0x530>)
   123ac:	4798      	blx	r3
   123ae:	2300      	movs	r3, #0
   123b0:	900c      	str	r0, [sp, #48]	; 0x30
   123b2:	910d      	str	r1, [sp, #52]	; 0x34
   123b4:	5563      	strb	r3, [r4, r5]
   123b6:	4b36      	ldr	r3, [pc, #216]	; (12490 <LORAWAN_TxDone+0x538>)
   123b8:	a90c      	add	r1, sp, #48	; 0x30
   123ba:	5ce0      	ldrb	r0, [r4, r3]
   123bc:	4b35      	ldr	r3, [pc, #212]	; (12494 <LORAWAN_TxDone+0x53c>)
   123be:	4798      	blx	r3
   123c0:	e5ea      	b.n	11f98 <LORAWAN_TxDone+0x40>
   123c2:	aa06      	add	r2, sp, #24
   123c4:	4934      	ldr	r1, [pc, #208]	; (12498 <LORAWAN_TxDone+0x540>)
   123c6:	e738      	b.n	1223a <LORAWAN_TxDone+0x2e2>
   123c8:	32c8      	adds	r2, #200	; 0xc8
   123ca:	8811      	ldrh	r1, [r2, #0]
   123cc:	25fa      	movs	r5, #250	; 0xfa
   123ce:	18c9      	adds	r1, r1, r3
   123d0:	4b29      	ldr	r3, [pc, #164]	; (12478 <LORAWAN_TxDone+0x520>)
   123d2:	00ad      	lsls	r5, r5, #2
   123d4:	5cfb      	ldrb	r3, [r7, r3]
   123d6:	0022      	movs	r2, r4
   123d8:	1ac9      	subs	r1, r1, r3
   123da:	003b      	movs	r3, r7
   123dc:	33e4      	adds	r3, #228	; 0xe4
   123de:	7818      	ldrb	r0, [r3, #0]
   123e0:	4369      	muls	r1, r5
   123e2:	4b26      	ldr	r3, [pc, #152]	; (1247c <LORAWAN_TxDone+0x524>)
   123e4:	9400      	str	r4, [sp, #0]
   123e6:	4e23      	ldr	r6, [pc, #140]	; (12474 <LORAWAN_TxDone+0x51c>)
   123e8:	47b0      	blx	r6
   123ea:	003b      	movs	r3, r7
   123ec:	33f4      	adds	r3, #244	; 0xf4
   123ee:	781b      	ldrb	r3, [r3, #0]
   123f0:	2b04      	cmp	r3, #4
   123f2:	d105      	bne.n	12400 <LORAWAN_TxDone+0x4a8>
   123f4:	2000      	movs	r0, #0
   123f6:	ab06      	add	r3, sp, #24
   123f8:	5618      	ldrsb	r0, [r3, r0]
   123fa:	4b28      	ldr	r3, [pc, #160]	; (1249c <LORAWAN_TxDone+0x544>)
   123fc:	4798      	blx	r3
   123fe:	e7b4      	b.n	1236a <LORAWAN_TxDone+0x412>
   12400:	2b01      	cmp	r3, #1
   12402:	d1b2      	bne.n	1236a <LORAWAN_TxDone+0x412>
   12404:	003b      	movs	r3, r7
   12406:	33ca      	adds	r3, #202	; 0xca
   12408:	8819      	ldrh	r1, [r3, #0]
   1240a:	ab06      	add	r3, sp, #24
   1240c:	781b      	ldrb	r3, [r3, #0]
   1240e:	0022      	movs	r2, r4
   12410:	b25b      	sxtb	r3, r3
   12412:	18c9      	adds	r1, r1, r3
   12414:	4b18      	ldr	r3, [pc, #96]	; (12478 <LORAWAN_TxDone+0x520>)
   12416:	5cfb      	ldrb	r3, [r7, r3]
   12418:	37e5      	adds	r7, #229	; 0xe5
   1241a:	1ac9      	subs	r1, r1, r3
   1241c:	7838      	ldrb	r0, [r7, #0]
   1241e:	4369      	muls	r1, r5
   12420:	9400      	str	r4, [sp, #0]
   12422:	4b17      	ldr	r3, [pc, #92]	; (12480 <LORAWAN_TxDone+0x528>)
   12424:	47b0      	blx	r6
   12426:	e7a0      	b.n	1236a <LORAWAN_TxDone+0x412>
   12428:	075b      	lsls	r3, r3, #29
   1242a:	d5b8      	bpl.n	1239e <LORAWAN_TxDone+0x446>
   1242c:	2022      	movs	r0, #34	; 0x22
   1242e:	e7b4      	b.n	1239a <LORAWAN_TxDone+0x442>
   12430:	491b      	ldr	r1, [pc, #108]	; (124a0 <LORAWAN_TxDone+0x548>)
   12432:	784a      	ldrb	r2, [r1, #1]
   12434:	780b      	ldrb	r3, [r1, #0]
   12436:	0212      	lsls	r2, r2, #8
   12438:	431a      	orrs	r2, r3
   1243a:	788b      	ldrb	r3, [r1, #2]
   1243c:	041b      	lsls	r3, r3, #16
   1243e:	431a      	orrs	r2, r3
   12440:	78cb      	ldrb	r3, [r1, #3]
   12442:	061b      	lsls	r3, r3, #24
   12444:	4313      	orrs	r3, r2
   12446:	d100      	bne.n	1244a <LORAWAN_TxDone+0x4f2>
   12448:	e5a6      	b.n	11f98 <LORAWAN_TxDone+0x40>
   1244a:	4a16      	ldr	r2, [pc, #88]	; (124a4 <LORAWAN_TxDone+0x54c>)
   1244c:	7811      	ldrb	r1, [r2, #0]
   1244e:	221c      	movs	r2, #28
   12450:	2904      	cmp	r1, #4
   12452:	d003      	beq.n	1245c <LORAWAN_TxDone+0x504>
   12454:	2200      	movs	r2, #0
   12456:	2c07      	cmp	r4, #7
   12458:	d100      	bne.n	1245c <LORAWAN_TxDone+0x504>
   1245a:	0022      	movs	r2, r4
   1245c:	0039      	movs	r1, r7
   1245e:	2004      	movs	r0, #4
   12460:	31ff      	adds	r1, #255	; 0xff
   12462:	37fc      	adds	r7, #252	; 0xfc
   12464:	7048      	strb	r0, [r1, #1]
   12466:	714a      	strb	r2, [r1, #5]
   12468:	6838      	ldr	r0, [r7, #0]
   1246a:	490f      	ldr	r1, [pc, #60]	; (124a8 <LORAWAN_TxDone+0x550>)
   1246c:	4798      	blx	r3
   1246e:	e593      	b.n	11f98 <LORAWAN_TxDone+0x40>
   12470:	0000d901 	.word	0x0000d901
   12474:	0000ee0d 	.word	0x0000ee0d
   12478:	0000021f 	.word	0x0000021f
   1247c:	00010e9d 	.word	0x00010e9d
   12480:	000127e9 	.word	0x000127e9
   12484:	0000da29 	.word	0x0000da29
   12488:	0000edb5 	.word	0x0000edb5
   1248c:	20002b5c 	.word	0x20002b5c
   12490:	00000225 	.word	0x00000225
   12494:	0000f411 	.word	0x0000f411
   12498:	20002bca 	.word	0x20002bca
   1249c:	000142fd 	.word	0x000142fd
   124a0:	20002ea4 	.word	0x20002ea4
   124a4:	20002d90 	.word	0x20002d90
   124a8:	20002c5c 	.word	0x20002c5c

000124ac <radioCallback>:
   124ac:	4b10      	ldr	r3, [pc, #64]	; (124f0 <radioCallback+0x44>)
   124ae:	b510      	push	{r4, lr}
   124b0:	7018      	strb	r0, [r3, #0]
   124b2:	3801      	subs	r0, #1
   124b4:	b2c0      	uxtb	r0, r0
   124b6:	000c      	movs	r4, r1
   124b8:	281f      	cmp	r0, #31
   124ba:	d809      	bhi.n	124d0 <radioCallback+0x24>
   124bc:	2301      	movs	r3, #1
   124be:	4083      	lsls	r3, r0
   124c0:	4a0c      	ldr	r2, [pc, #48]	; (124f4 <radioCallback+0x48>)
   124c2:	4213      	tst	r3, r2
   124c4:	d109      	bne.n	124da <radioCallback+0x2e>
   124c6:	220a      	movs	r2, #10
   124c8:	4213      	tst	r3, r2
   124ca:	d102      	bne.n	124d2 <radioCallback+0x26>
   124cc:	2b00      	cmp	r3, #0
   124ce:	db08      	blt.n	124e2 <radioCallback+0x36>
   124d0:	bd10      	pop	{r4, pc}
   124d2:	0008      	movs	r0, r1
   124d4:	4b08      	ldr	r3, [pc, #32]	; (124f8 <radioCallback+0x4c>)
   124d6:	4798      	blx	r3
   124d8:	e7fa      	b.n	124d0 <radioCallback+0x24>
   124da:	2002      	movs	r0, #2
   124dc:	4b07      	ldr	r3, [pc, #28]	; (124fc <radioCallback+0x50>)
   124de:	4798      	blx	r3
   124e0:	e7f6      	b.n	124d0 <radioCallback+0x24>
   124e2:	4b07      	ldr	r3, [pc, #28]	; (12500 <radioCallback+0x54>)
   124e4:	681b      	ldr	r3, [r3, #0]
   124e6:	2b00      	cmp	r3, #0
   124e8:	d0f2      	beq.n	124d0 <radioCallback+0x24>
   124ea:	4798      	blx	r3
   124ec:	6020      	str	r0, [r4, #0]
   124ee:	e7ef      	b.n	124d0 <radioCallback+0x24>
   124f0:	20002d90 	.word	0x20002d90
   124f4:	00008081 	.word	0x00008081
   124f8:	00011f59 	.word	0x00011f59
   124fc:	00014ad9 	.word	0x00014ad9
   12500:	20002ea0 	.word	0x20002ea0

00012504 <LorawanCheckAndDoRetryOnTimeout>:
   12504:	b513      	push	{r0, r1, r4, lr}
   12506:	4c33      	ldr	r4, [pc, #204]	; (125d4 <LorawanCheckAndDoRetryOnTimeout+0xd0>)
   12508:	0023      	movs	r3, r4
   1250a:	338c      	adds	r3, #140	; 0x8c
   1250c:	781b      	ldrb	r3, [r3, #0]
   1250e:	0022      	movs	r2, r4
   12510:	07db      	lsls	r3, r3, #31
   12512:	d54b      	bpl.n	125ac <LorawanCheckAndDoRetryOnTimeout+0xa8>
   12514:	0023      	movs	r3, r4
   12516:	32dc      	adds	r2, #220	; 0xdc
   12518:	33da      	adds	r3, #218	; 0xda
   1251a:	7812      	ldrb	r2, [r2, #0]
   1251c:	781b      	ldrb	r3, [r3, #0]
   1251e:	429a      	cmp	r2, r3
   12520:	d836      	bhi.n	12590 <LorawanCheckAndDoRetryOnTimeout+0x8c>
   12522:	4b2d      	ldr	r3, [pc, #180]	; (125d8 <LorawanCheckAndDoRetryOnTimeout+0xd4>)
   12524:	5ce3      	ldrb	r3, [r4, r3]
   12526:	2b00      	cmp	r3, #0
   12528:	d032      	beq.n	12590 <LorawanCheckAndDoRetryOnTimeout+0x8c>
   1252a:	0023      	movs	r3, r4
   1252c:	33f4      	adds	r3, #244	; 0xf4
   1252e:	781b      	ldrb	r3, [r3, #0]
   12530:	2b01      	cmp	r3, #1
   12532:	d119      	bne.n	12568 <LorawanCheckAndDoRetryOnTimeout+0x64>
   12534:	0021      	movs	r1, r4
   12536:	220e      	movs	r2, #14
   12538:	317c      	adds	r1, #124	; 0x7c
   1253a:	780b      	ldrb	r3, [r1, #0]
   1253c:	4393      	bics	r3, r2
   1253e:	001a      	movs	r2, r3
   12540:	230c      	movs	r3, #12
   12542:	4313      	orrs	r3, r2
   12544:	700b      	strb	r3, [r1, #0]
   12546:	0023      	movs	r3, r4
   12548:	33d2      	adds	r3, #210	; 0xd2
   1254a:	8819      	ldrh	r1, [r3, #0]
   1254c:	4b23      	ldr	r3, [pc, #140]	; (125dc <LorawanCheckAndDoRetryOnTimeout+0xd8>)
   1254e:	2200      	movs	r2, #0
   12550:	5ce3      	ldrb	r3, [r4, r3]
   12552:	34e8      	adds	r4, #232	; 0xe8
   12554:	1acb      	subs	r3, r1, r3
   12556:	21fa      	movs	r1, #250	; 0xfa
   12558:	0089      	lsls	r1, r1, #2
   1255a:	7820      	ldrb	r0, [r4, #0]
   1255c:	4359      	muls	r1, r3
   1255e:	9200      	str	r2, [sp, #0]
   12560:	4b1f      	ldr	r3, [pc, #124]	; (125e0 <LorawanCheckAndDoRetryOnTimeout+0xdc>)
   12562:	4c20      	ldr	r4, [pc, #128]	; (125e4 <LorawanCheckAndDoRetryOnTimeout+0xe0>)
   12564:	47a0      	blx	r4
   12566:	bd13      	pop	{r0, r1, r4, pc}
   12568:	2b04      	cmp	r3, #4
   1256a:	d1fc      	bne.n	12566 <LorawanCheckAndDoRetryOnTimeout+0x62>
   1256c:	4b1e      	ldr	r3, [pc, #120]	; (125e8 <LorawanCheckAndDoRetryOnTimeout+0xe4>)
   1256e:	4798      	blx	r3
   12570:	34c6      	adds	r4, #198	; 0xc6
   12572:	300d      	adds	r0, #13
   12574:	8823      	ldrh	r3, [r4, #0]
   12576:	b280      	uxth	r0, r0
   12578:	4283      	cmp	r3, r0
   1257a:	d802      	bhi.n	12582 <LorawanCheckAndDoRetryOnTimeout+0x7e>
   1257c:	4b1b      	ldr	r3, [pc, #108]	; (125ec <LorawanCheckAndDoRetryOnTimeout+0xe8>)
   1257e:	4798      	blx	r3
   12580:	e7f1      	b.n	12566 <LorawanCheckAndDoRetryOnTimeout+0x62>
   12582:	200e      	movs	r0, #14
   12584:	4b1a      	ldr	r3, [pc, #104]	; (125f0 <LorawanCheckAndDoRetryOnTimeout+0xec>)
   12586:	4798      	blx	r3
   12588:	4b1a      	ldr	r3, [pc, #104]	; (125f4 <LorawanCheckAndDoRetryOnTimeout+0xf0>)
   1258a:	4798      	blx	r3
   1258c:	4b1a      	ldr	r3, [pc, #104]	; (125f8 <LorawanCheckAndDoRetryOnTimeout+0xf4>)
   1258e:	e7f6      	b.n	1257e <LorawanCheckAndDoRetryOnTimeout+0x7a>
   12590:	2012      	movs	r0, #18
   12592:	4b17      	ldr	r3, [pc, #92]	; (125f0 <LorawanCheckAndDoRetryOnTimeout+0xec>)
   12594:	4798      	blx	r3
   12596:	4b17      	ldr	r3, [pc, #92]	; (125f4 <LorawanCheckAndDoRetryOnTimeout+0xf0>)
   12598:	4798      	blx	r3
   1259a:	34f4      	adds	r4, #244	; 0xf4
   1259c:	4b16      	ldr	r3, [pc, #88]	; (125f8 <LorawanCheckAndDoRetryOnTimeout+0xf4>)
   1259e:	4798      	blx	r3
   125a0:	7823      	ldrb	r3, [r4, #0]
   125a2:	2b04      	cmp	r3, #4
   125a4:	d1df      	bne.n	12566 <LorawanCheckAndDoRetryOnTimeout+0x62>
   125a6:	4b15      	ldr	r3, [pc, #84]	; (125fc <LorawanCheckAndDoRetryOnTimeout+0xf8>)
   125a8:	4798      	blx	r3
   125aa:	e7dc      	b.n	12566 <LorawanCheckAndDoRetryOnTimeout+0x62>
   125ac:	0023      	movs	r3, r4
   125ae:	32db      	adds	r2, #219	; 0xdb
   125b0:	33d9      	adds	r3, #217	; 0xd9
   125b2:	7812      	ldrb	r2, [r2, #0]
   125b4:	781b      	ldrb	r3, [r3, #0]
   125b6:	429a      	cmp	r2, r3
   125b8:	d803      	bhi.n	125c2 <LorawanCheckAndDoRetryOnTimeout+0xbe>
   125ba:	4b07      	ldr	r3, [pc, #28]	; (125d8 <LorawanCheckAndDoRetryOnTimeout+0xd4>)
   125bc:	5ce3      	ldrb	r3, [r4, r3]
   125be:	2b00      	cmp	r3, #0
   125c0:	d1dc      	bne.n	1257c <LorawanCheckAndDoRetryOnTimeout+0x78>
   125c2:	4b0f      	ldr	r3, [pc, #60]	; (12600 <LorawanCheckAndDoRetryOnTimeout+0xfc>)
   125c4:	4798      	blx	r3
   125c6:	4b0c      	ldr	r3, [pc, #48]	; (125f8 <LorawanCheckAndDoRetryOnTimeout+0xf4>)
   125c8:	4798      	blx	r3
   125ca:	2008      	movs	r0, #8
   125cc:	4b08      	ldr	r3, [pc, #32]	; (125f0 <LorawanCheckAndDoRetryOnTimeout+0xec>)
   125ce:	4798      	blx	r3
   125d0:	e7c9      	b.n	12566 <LorawanCheckAndDoRetryOnTimeout+0x62>
   125d2:	46c0      	nop			; (mov r8, r8)
   125d4:	20002b5c 	.word	0x20002b5c
   125d8:	0000021e 	.word	0x0000021e
   125dc:	0000021f 	.word	0x0000021f
   125e0:	00012605 	.word	0x00012605
   125e4:	0000ee0d 	.word	0x0000ee0d
   125e8:	0000fe71 	.word	0x0000fe71
   125ec:	00010f85 	.word	0x00010f85
   125f0:	0001148d 	.word	0x0001148d
   125f4:	00010931 	.word	0x00010931
   125f8:	0000fd85 	.word	0x0000fd85
   125fc:	00015561 	.word	0x00015561
   12600:	00010961 	.word	0x00010961

00012604 <AckRetransmissionCallback>:
   12604:	b510      	push	{r4, lr}
   12606:	4c1c      	ldr	r4, [pc, #112]	; (12678 <AckRetransmissionCallback+0x74>)
   12608:	0023      	movs	r3, r4
   1260a:	337c      	adds	r3, #124	; 0x7c
   1260c:	781b      	ldrb	r3, [r3, #0]
   1260e:	2b7f      	cmp	r3, #127	; 0x7f
   12610:	d82d      	bhi.n	1266e <AckRetransmissionCallback+0x6a>
   12612:	0023      	movs	r3, r4
   12614:	33f4      	adds	r3, #244	; 0xf4
   12616:	781b      	ldrb	r3, [r3, #0]
   12618:	2b04      	cmp	r3, #4
   1261a:	d102      	bne.n	12622 <AckRetransmissionCallback+0x1e>
   1261c:	4b17      	ldr	r3, [pc, #92]	; (1267c <AckRetransmissionCallback+0x78>)
   1261e:	4798      	blx	r3
   12620:	e01e      	b.n	12660 <AckRetransmissionCallback+0x5c>
   12622:	2b01      	cmp	r3, #1
   12624:	d11c      	bne.n	12660 <AckRetransmissionCallback+0x5c>
   12626:	0022      	movs	r2, r4
   12628:	0023      	movs	r3, r4
   1262a:	32dc      	adds	r2, #220	; 0xdc
   1262c:	33da      	adds	r3, #218	; 0xda
   1262e:	7812      	ldrb	r2, [r2, #0]
   12630:	781b      	ldrb	r3, [r3, #0]
   12632:	429a      	cmp	r2, r3
   12634:	d815      	bhi.n	12662 <AckRetransmissionCallback+0x5e>
   12636:	4b12      	ldr	r3, [pc, #72]	; (12680 <AckRetransmissionCallback+0x7c>)
   12638:	5ce3      	ldrb	r3, [r4, r3]
   1263a:	2b00      	cmp	r3, #0
   1263c:	d011      	beq.n	12662 <AckRetransmissionCallback+0x5e>
   1263e:	4b11      	ldr	r3, [pc, #68]	; (12684 <AckRetransmissionCallback+0x80>)
   12640:	4798      	blx	r3
   12642:	34c6      	adds	r4, #198	; 0xc6
   12644:	300d      	adds	r0, #13
   12646:	8823      	ldrh	r3, [r4, #0]
   12648:	b280      	uxth	r0, r0
   1264a:	4283      	cmp	r3, r0
   1264c:	d801      	bhi.n	12652 <AckRetransmissionCallback+0x4e>
   1264e:	4b0e      	ldr	r3, [pc, #56]	; (12688 <AckRetransmissionCallback+0x84>)
   12650:	e7e5      	b.n	1261e <AckRetransmissionCallback+0x1a>
   12652:	4b0e      	ldr	r3, [pc, #56]	; (1268c <AckRetransmissionCallback+0x88>)
   12654:	4798      	blx	r3
   12656:	4b0e      	ldr	r3, [pc, #56]	; (12690 <AckRetransmissionCallback+0x8c>)
   12658:	4798      	blx	r3
   1265a:	200e      	movs	r0, #14
   1265c:	4b0d      	ldr	r3, [pc, #52]	; (12694 <AckRetransmissionCallback+0x90>)
   1265e:	4798      	blx	r3
   12660:	bd10      	pop	{r4, pc}
   12662:	4b0a      	ldr	r3, [pc, #40]	; (1268c <AckRetransmissionCallback+0x88>)
   12664:	4798      	blx	r3
   12666:	4b0a      	ldr	r3, [pc, #40]	; (12690 <AckRetransmissionCallback+0x8c>)
   12668:	4798      	blx	r3
   1266a:	2012      	movs	r0, #18
   1266c:	e7f6      	b.n	1265c <AckRetransmissionCallback+0x58>
   1266e:	4b07      	ldr	r3, [pc, #28]	; (1268c <AckRetransmissionCallback+0x88>)
   12670:	4798      	blx	r3
   12672:	4b07      	ldr	r3, [pc, #28]	; (12690 <AckRetransmissionCallback+0x8c>)
   12674:	e7d3      	b.n	1261e <AckRetransmissionCallback+0x1a>
   12676:	46c0      	nop			; (mov r8, r8)
   12678:	20002b5c 	.word	0x20002b5c
   1267c:	00012505 	.word	0x00012505
   12680:	0000021e 	.word	0x0000021e
   12684:	0000fe71 	.word	0x0000fe71
   12688:	00010f85 	.word	0x00010f85
   1268c:	00010931 	.word	0x00010931
   12690:	0000fd85 	.word	0x0000fd85
   12694:	0001148d 	.word	0x0001148d

00012698 <LORAWAN_RxTimeout>:
   12698:	4b22      	ldr	r3, [pc, #136]	; (12724 <LORAWAN_RxTimeout+0x8c>)
   1269a:	b510      	push	{r4, lr}
   1269c:	001a      	movs	r2, r3
   1269e:	327c      	adds	r2, #124	; 0x7c
   126a0:	7812      	ldrb	r2, [r2, #0]
   126a2:	b251      	sxtb	r1, r2
   126a4:	2900      	cmp	r1, #0
   126a6:	db23      	blt.n	126f0 <LORAWAN_RxTimeout+0x58>
   126a8:	0019      	movs	r1, r3
   126aa:	31f4      	adds	r1, #244	; 0xf4
   126ac:	7809      	ldrb	r1, [r1, #0]
   126ae:	2904      	cmp	r1, #4
   126b0:	d104      	bne.n	126bc <LORAWAN_RxTimeout+0x24>
   126b2:	07d1      	lsls	r1, r2, #31
   126b4:	d502      	bpl.n	126bc <LORAWAN_RxTimeout+0x24>
   126b6:	4b1c      	ldr	r3, [pc, #112]	; (12728 <LORAWAN_RxTimeout+0x90>)
   126b8:	4798      	blx	r3
   126ba:	bd10      	pop	{r4, pc}
   126bc:	210e      	movs	r1, #14
   126be:	0010      	movs	r0, r2
   126c0:	4008      	ands	r0, r1
   126c2:	2806      	cmp	r0, #6
   126c4:	d107      	bne.n	126d6 <LORAWAN_RxTimeout+0x3e>
   126c6:	337c      	adds	r3, #124	; 0x7c
   126c8:	781a      	ldrb	r2, [r3, #0]
   126ca:	438a      	bics	r2, r1
   126cc:	0011      	movs	r1, r2
   126ce:	2208      	movs	r2, #8
   126d0:	430a      	orrs	r2, r1
   126d2:	701a      	strb	r2, [r3, #0]
   126d4:	e7f1      	b.n	126ba <LORAWAN_RxTimeout+0x22>
   126d6:	2004      	movs	r0, #4
   126d8:	338c      	adds	r3, #140	; 0x8c
   126da:	781b      	ldrb	r3, [r3, #0]
   126dc:	4203      	tst	r3, r0
   126de:	d002      	beq.n	126e6 <LORAWAN_RxTimeout+0x4e>
   126e0:	4b12      	ldr	r3, [pc, #72]	; (1272c <LORAWAN_RxTimeout+0x94>)
   126e2:	4798      	blx	r3
   126e4:	e7e9      	b.n	126ba <LORAWAN_RxTimeout+0x22>
   126e6:	07d3      	lsls	r3, r2, #31
   126e8:	d5e7      	bpl.n	126ba <LORAWAN_RxTimeout+0x22>
   126ea:	4b11      	ldr	r3, [pc, #68]	; (12730 <LORAWAN_RxTimeout+0x98>)
   126ec:	4798      	blx	r3
   126ee:	e7e4      	b.n	126ba <LORAWAN_RxTimeout+0x22>
   126f0:	4810      	ldr	r0, [pc, #64]	; (12734 <LORAWAN_RxTimeout+0x9c>)
   126f2:	7841      	ldrb	r1, [r0, #1]
   126f4:	7802      	ldrb	r2, [r0, #0]
   126f6:	0209      	lsls	r1, r1, #8
   126f8:	4311      	orrs	r1, r2
   126fa:	7882      	ldrb	r2, [r0, #2]
   126fc:	0412      	lsls	r2, r2, #16
   126fe:	4311      	orrs	r1, r2
   12700:	78c2      	ldrb	r2, [r0, #3]
   12702:	0612      	lsls	r2, r2, #24
   12704:	430a      	orrs	r2, r1
   12706:	d0d8      	beq.n	126ba <LORAWAN_RxTimeout+0x22>
   12708:	2185      	movs	r1, #133	; 0x85
   1270a:	2001      	movs	r0, #1
   1270c:	0089      	lsls	r1, r1, #2
   1270e:	5458      	strb	r0, [r3, r1]
   12710:	0019      	movs	r1, r3
   12712:	2404      	movs	r4, #4
   12714:	31ff      	adds	r1, #255	; 0xff
   12716:	33fc      	adds	r3, #252	; 0xfc
   12718:	704c      	strb	r4, [r1, #1]
   1271a:	7148      	strb	r0, [r1, #5]
   1271c:	4906      	ldr	r1, [pc, #24]	; (12738 <LORAWAN_RxTimeout+0xa0>)
   1271e:	6818      	ldr	r0, [r3, #0]
   12720:	4790      	blx	r2
   12722:	e7ca      	b.n	126ba <LORAWAN_RxTimeout+0x22>
   12724:	20002b5c 	.word	0x20002b5c
   12728:	00014381 	.word	0x00014381
   1272c:	00010985 	.word	0x00010985
   12730:	00012505 	.word	0x00012505
   12734:	20002ea4 	.word	0x20002ea4
   12738:	20002c5c 	.word	0x20002c5c

0001273c <LorawanConfigureRadioForRX2>:
   1273c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1273e:	466b      	mov	r3, sp
   12740:	4c21      	ldr	r4, [pc, #132]	; (127c8 <LorawanConfigureRadioForRX2+0x8c>)
   12742:	1cdd      	adds	r5, r3, #3
   12744:	0023      	movs	r3, r4
   12746:	2100      	movs	r1, #0
   12748:	338c      	adds	r3, #140	; 0x8c
   1274a:	781b      	ldrb	r3, [r3, #0]
   1274c:	0007      	movs	r7, r0
   1274e:	7029      	strb	r1, [r5, #0]
   12750:	075b      	lsls	r3, r3, #29
   12752:	d52c      	bpl.n	127ae <LorawanConfigureRadioForRX2+0x72>
   12754:	002a      	movs	r2, r5
   12756:	2009      	movs	r0, #9
   12758:	4b1c      	ldr	r3, [pc, #112]	; (127cc <LorawanConfigureRadioForRX2+0x90>)
   1275a:	4798      	blx	r3
   1275c:	0022      	movs	r2, r4
   1275e:	0023      	movs	r3, r4
   12760:	326c      	adds	r2, #108	; 0x6c
   12762:	8811      	ldrh	r1, [r2, #0]
   12764:	336a      	adds	r3, #106	; 0x6a
   12766:	881b      	ldrh	r3, [r3, #0]
   12768:	0409      	lsls	r1, r1, #16
   1276a:	4319      	orrs	r1, r3
   1276c:	7828      	ldrb	r0, [r5, #0]
   1276e:	4b18      	ldr	r3, [pc, #96]	; (127d0 <LorawanConfigureRadioForRX2+0x94>)
   12770:	4798      	blx	r3
   12772:	2300      	movs	r3, #0
   12774:	0022      	movs	r2, r4
   12776:	ae01      	add	r6, sp, #4
   12778:	7033      	strb	r3, [r6, #0]
   1277a:	32f4      	adds	r2, #244	; 0xf4
   1277c:	7812      	ldrb	r2, [r2, #0]
   1277e:	2a04      	cmp	r2, #4
   12780:	d11a      	bne.n	127b8 <LorawanConfigureRadioForRX2+0x7c>
   12782:	347c      	adds	r4, #124	; 0x7c
   12784:	7822      	ldrb	r2, [r4, #0]
   12786:	07d2      	lsls	r2, r2, #31
   12788:	d516      	bpl.n	127b8 <LorawanConfigureRadioForRX2+0x7c>
   1278a:	8073      	strh	r3, [r6, #2]
   1278c:	0030      	movs	r0, r6
   1278e:	4b11      	ldr	r3, [pc, #68]	; (127d4 <LorawanConfigureRadioForRX2+0x98>)
   12790:	4798      	blx	r3
   12792:	1e04      	subs	r4, r0, #0
   12794:	d00a      	beq.n	127ac <LorawanConfigureRadioForRX2+0x70>
   12796:	4b10      	ldr	r3, [pc, #64]	; (127d8 <LorawanConfigureRadioForRX2+0x9c>)
   12798:	4798      	blx	r3
   1279a:	4b10      	ldr	r3, [pc, #64]	; (127dc <LorawanConfigureRadioForRX2+0xa0>)
   1279c:	4798      	blx	r3
   1279e:	4b10      	ldr	r3, [pc, #64]	; (127e0 <LorawanConfigureRadioForRX2+0xa4>)
   127a0:	4798      	blx	r3
   127a2:	2f00      	cmp	r7, #0
   127a4:	d002      	beq.n	127ac <LorawanConfigureRadioForRX2+0x70>
   127a6:	0020      	movs	r0, r4
   127a8:	4b0e      	ldr	r3, [pc, #56]	; (127e4 <LorawanConfigureRadioForRX2+0xa8>)
   127aa:	4798      	blx	r3
   127ac:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
   127ae:	0023      	movs	r3, r4
   127b0:	336e      	adds	r3, #110	; 0x6e
   127b2:	781b      	ldrb	r3, [r3, #0]
   127b4:	702b      	strb	r3, [r5, #0]
   127b6:	e7d1      	b.n	1275c <LorawanConfigureRadioForRX2+0x20>
   127b8:	466b      	mov	r3, sp
   127ba:	0029      	movs	r1, r5
   127bc:	1d9a      	adds	r2, r3, #6
   127be:	2003      	movs	r0, #3
   127c0:	4b02      	ldr	r3, [pc, #8]	; (127cc <LorawanConfigureRadioForRX2+0x90>)
   127c2:	4798      	blx	r3
   127c4:	e7e2      	b.n	1278c <LorawanConfigureRadioForRX2+0x50>
   127c6:	46c0      	nop			; (mov r8, r8)
   127c8:	20002b5c 	.word	0x20002b5c
   127cc:	0000d901 	.word	0x0000d901
   127d0:	00010e31 	.word	0x00010e31
   127d4:	00015e51 	.word	0x00015e51
   127d8:	00010931 	.word	0x00010931
   127dc:	00010961 	.word	0x00010961
   127e0:	0000fd85 	.word	0x0000fd85
   127e4:	0001148d 	.word	0x0001148d

000127e8 <LorawanReceiveWindow2Callback>:
   127e8:	b570      	push	{r4, r5, r6, lr}
   127ea:	4c16      	ldr	r4, [pc, #88]	; (12844 <LorawanReceiveWindow2Callback+0x5c>)
   127ec:	0025      	movs	r5, r4
   127ee:	357c      	adds	r5, #124	; 0x7c
   127f0:	782b      	ldrb	r3, [r5, #0]
   127f2:	2b7f      	cmp	r3, #127	; 0x7f
   127f4:	d811      	bhi.n	1281a <LorawanReceiveWindow2Callback+0x32>
   127f6:	4b14      	ldr	r3, [pc, #80]	; (12848 <LorawanReceiveWindow2Callback+0x60>)
   127f8:	4798      	blx	r3
   127fa:	2801      	cmp	r0, #1
   127fc:	d109      	bne.n	12812 <LorawanReceiveWindow2Callback+0x2a>
   127fe:	220e      	movs	r2, #14
   12800:	782b      	ldrb	r3, [r5, #0]
   12802:	4393      	bics	r3, r2
   12804:	001a      	movs	r2, r3
   12806:	230a      	movs	r3, #10
   12808:	4313      	orrs	r3, r2
   1280a:	702b      	strb	r3, [r5, #0]
   1280c:	4b0f      	ldr	r3, [pc, #60]	; (1284c <LorawanReceiveWindow2Callback+0x64>)
   1280e:	4798      	blx	r3
   12810:	bd70      	pop	{r4, r5, r6, pc}
   12812:	2301      	movs	r3, #1
   12814:	34f0      	adds	r4, #240	; 0xf0
   12816:	7023      	strb	r3, [r4, #0]
   12818:	e7fa      	b.n	12810 <LorawanReceiveWindow2Callback+0x28>
   1281a:	2104      	movs	r1, #4
   1281c:	348c      	adds	r4, #140	; 0x8c
   1281e:	7822      	ldrb	r2, [r4, #0]
   12820:	420a      	tst	r2, r1
   12822:	d007      	beq.n	12834 <LorawanReceiveWindow2Callback+0x4c>
   12824:	2001      	movs	r0, #1
   12826:	4383      	bics	r3, r0
   12828:	438a      	bics	r2, r1
   1282a:	702b      	strb	r3, [r5, #0]
   1282c:	3107      	adds	r1, #7
   1282e:	4b08      	ldr	r3, [pc, #32]	; (12850 <LorawanReceiveWindow2Callback+0x68>)
   12830:	7022      	strb	r2, [r4, #0]
   12832:	4798      	blx	r3
   12834:	4b07      	ldr	r3, [pc, #28]	; (12854 <LorawanReceiveWindow2Callback+0x6c>)
   12836:	4798      	blx	r3
   12838:	4b07      	ldr	r3, [pc, #28]	; (12858 <LorawanReceiveWindow2Callback+0x70>)
   1283a:	4798      	blx	r3
   1283c:	4b07      	ldr	r3, [pc, #28]	; (1285c <LorawanReceiveWindow2Callback+0x74>)
   1283e:	4798      	blx	r3
   12840:	e7e6      	b.n	12810 <LorawanReceiveWindow2Callback+0x28>
   12842:	46c0      	nop			; (mov r8, r8)
   12844:	20002b5c 	.word	0x20002b5c
   12848:	00015561 	.word	0x00015561
   1284c:	0001273d 	.word	0x0001273d
   12850:	0000e0dd 	.word	0x0000e0dd
   12854:	00010961 	.word	0x00010961
   12858:	00010931 	.word	0x00010931
   1285c:	0000fd85 	.word	0x0000fd85

00012860 <SetReceptionNotOkState>:
   12860:	2285      	movs	r2, #133	; 0x85
   12862:	2101      	movs	r1, #1
   12864:	4b1c      	ldr	r3, [pc, #112]	; (128d8 <SetReceptionNotOkState+0x78>)
   12866:	0092      	lsls	r2, r2, #2
   12868:	b510      	push	{r4, lr}
   1286a:	5499      	strb	r1, [r3, r2]
   1286c:	001a      	movs	r2, r3
   1286e:	0019      	movs	r1, r3
   12870:	32f4      	adds	r2, #244	; 0xf4
   12872:	7812      	ldrb	r2, [r2, #0]
   12874:	317c      	adds	r1, #124	; 0x7c
   12876:	200e      	movs	r0, #14
   12878:	2a01      	cmp	r2, #1
   1287a:	d124      	bne.n	128c6 <SetReceptionNotOkState+0x66>
   1287c:	780a      	ldrb	r2, [r1, #0]
   1287e:	4002      	ands	r2, r0
   12880:	2a0a      	cmp	r2, #10
   12882:	d006      	beq.n	12892 <SetReceptionNotOkState+0x32>
   12884:	2a06      	cmp	r2, #6
   12886:	d11a      	bne.n	128be <SetReceptionNotOkState+0x5e>
   12888:	001a      	movs	r2, r3
   1288a:	32f0      	adds	r2, #240	; 0xf0
   1288c:	7812      	ldrb	r2, [r2, #0]
   1288e:	2a00      	cmp	r2, #0
   12890:	d015      	beq.n	128be <SetReceptionNotOkState+0x5e>
   12892:	0019      	movs	r1, r3
   12894:	2001      	movs	r0, #1
   12896:	318c      	adds	r1, #140	; 0x8c
   12898:	780a      	ldrb	r2, [r1, #0]
   1289a:	240e      	movs	r4, #14
   1289c:	4382      	bics	r2, r0
   1289e:	700a      	strb	r2, [r1, #0]
   128a0:	0019      	movs	r1, r3
   128a2:	2200      	movs	r2, #0
   128a4:	31db      	adds	r1, #219	; 0xdb
   128a6:	700a      	strb	r2, [r1, #0]
   128a8:	0019      	movs	r1, r3
   128aa:	31dc      	adds	r1, #220	; 0xdc
   128ac:	700a      	strb	r2, [r1, #0]
   128ae:	001a      	movs	r2, r3
   128b0:	327c      	adds	r2, #124	; 0x7c
   128b2:	7811      	ldrb	r1, [r2, #0]
   128b4:	43a1      	bics	r1, r4
   128b6:	7011      	strb	r1, [r2, #0]
   128b8:	7851      	ldrb	r1, [r2, #1]
   128ba:	4381      	bics	r1, r0
   128bc:	7051      	strb	r1, [r2, #1]
   128be:	2200      	movs	r2, #0
   128c0:	33f0      	adds	r3, #240	; 0xf0
   128c2:	701a      	strb	r2, [r3, #0]
   128c4:	bd10      	pop	{r4, pc}
   128c6:	230a      	movs	r3, #10
   128c8:	780a      	ldrb	r2, [r1, #0]
   128ca:	4382      	bics	r2, r0
   128cc:	4313      	orrs	r3, r2
   128ce:	700b      	strb	r3, [r1, #0]
   128d0:	2000      	movs	r0, #0
   128d2:	4b02      	ldr	r3, [pc, #8]	; (128dc <SetReceptionNotOkState+0x7c>)
   128d4:	4798      	blx	r3
   128d6:	e7f5      	b.n	128c4 <SetReceptionNotOkState+0x64>
   128d8:	20002b5c 	.word	0x20002b5c
   128dc:	0001273d 	.word	0x0001273d

000128e0 <LorawanProcessFcntDown>:
   128e0:	b570      	push	{r4, r5, r6, lr}
   128e2:	4c54      	ldr	r4, [pc, #336]	; (12a34 <LorawanProcessFcntDown+0x154>)
   128e4:	79c3      	ldrb	r3, [r0, #7]
   128e6:	0021      	movs	r1, r4
   128e8:	7982      	ldrb	r2, [r0, #6]
   128ea:	021b      	lsls	r3, r3, #8
   128ec:	3184      	adds	r1, #132	; 0x84
   128ee:	4313      	orrs	r3, r2
   128f0:	880a      	ldrh	r2, [r1, #0]
   128f2:	4293      	cmp	r3, r2
   128f4:	d352      	bcc.n	1299c <LorawanProcessFcntDown+0xbc>
   128f6:	0020      	movs	r0, r4
   128f8:	30d0      	adds	r0, #208	; 0xd0
   128fa:	8800      	ldrh	r0, [r0, #0]
   128fc:	1a9a      	subs	r2, r3, r2
   128fe:	4282      	cmp	r2, r0
   12900:	dd38      	ble.n	12974 <LorawanProcessFcntDown+0x94>
   12902:	0022      	movs	r2, r4
   12904:	2101      	movs	r1, #1
   12906:	328c      	adds	r2, #140	; 0x8c
   12908:	7813      	ldrb	r3, [r2, #0]
   1290a:	438b      	bics	r3, r1
   1290c:	7013      	strb	r3, [r2, #0]
   1290e:	0023      	movs	r3, r4
   12910:	33f4      	adds	r3, #244	; 0xf4
   12912:	781b      	ldrb	r3, [r3, #0]
   12914:	428b      	cmp	r3, r1
   12916:	d108      	bne.n	1292a <LorawanProcessFcntDown+0x4a>
   12918:	0023      	movs	r3, r4
   1291a:	220e      	movs	r2, #14
   1291c:	337c      	adds	r3, #124	; 0x7c
   1291e:	781b      	ldrb	r3, [r3, #0]
   12920:	4013      	ands	r3, r2
   12922:	2b06      	cmp	r3, #6
   12924:	d101      	bne.n	1292a <LorawanProcessFcntDown+0x4a>
   12926:	4b44      	ldr	r3, [pc, #272]	; (12a38 <LorawanProcessFcntDown+0x158>)
   12928:	4798      	blx	r3
   1292a:	4944      	ldr	r1, [pc, #272]	; (12a3c <LorawanProcessFcntDown+0x15c>)
   1292c:	784a      	ldrb	r2, [r1, #1]
   1292e:	780b      	ldrb	r3, [r1, #0]
   12930:	0212      	lsls	r2, r2, #8
   12932:	431a      	orrs	r2, r3
   12934:	788b      	ldrb	r3, [r1, #2]
   12936:	041b      	lsls	r3, r3, #16
   12938:	431a      	orrs	r2, r3
   1293a:	78cb      	ldrb	r3, [r1, #3]
   1293c:	061b      	lsls	r3, r3, #24
   1293e:	4313      	orrs	r3, r2
   12940:	d008      	beq.n	12954 <LorawanProcessFcntDown+0x74>
   12942:	0022      	movs	r2, r4
   12944:	2120      	movs	r1, #32
   12946:	328c      	adds	r2, #140	; 0x8c
   12948:	7813      	ldrb	r3, [r2, #0]
   1294a:	2017      	movs	r0, #23
   1294c:	438b      	bics	r3, r1
   1294e:	7013      	strb	r3, [r2, #0]
   12950:	4b3b      	ldr	r3, [pc, #236]	; (12a40 <LorawanProcessFcntDown+0x160>)
   12952:	4798      	blx	r3
   12954:	2501      	movs	r5, #1
   12956:	347c      	adds	r4, #124	; 0x7c
   12958:	7863      	ldrb	r3, [r4, #1]
   1295a:	43ab      	bics	r3, r5
   1295c:	7063      	strb	r3, [r4, #1]
   1295e:	78a3      	ldrb	r3, [r4, #2]
   12960:	432b      	orrs	r3, r5
   12962:	70a3      	strb	r3, [r4, #2]
   12964:	4b37      	ldr	r3, [pc, #220]	; (12a44 <LorawanProcessFcntDown+0x164>)
   12966:	4798      	blx	r3
   12968:	210b      	movs	r1, #11
   1296a:	0028      	movs	r0, r5
   1296c:	4b36      	ldr	r3, [pc, #216]	; (12a48 <LorawanProcessFcntDown+0x168>)
   1296e:	4798      	blx	r3
   12970:	200d      	movs	r0, #13
   12972:	e00d      	b.n	12990 <LorawanProcessFcntDown+0xb0>
   12974:	800b      	strh	r3, [r1, #0]
   12976:	2388      	movs	r3, #136	; 0x88
   12978:	009b      	lsls	r3, r3, #2
   1297a:	5ce2      	ldrb	r2, [r4, r3]
   1297c:	2a00      	cmp	r2, #0
   1297e:	d008      	beq.n	12992 <LorawanProcessFcntDown+0xb2>
   12980:	2301      	movs	r3, #1
   12982:	4093      	lsls	r3, r2
   12984:	3408      	adds	r4, #8
   12986:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
   12988:	3b01      	subs	r3, #1
   1298a:	421a      	tst	r2, r3
   1298c:	d001      	beq.n	12992 <LorawanProcessFcntDown+0xb2>
   1298e:	2008      	movs	r0, #8
   12990:	bd70      	pop	{r4, r5, r6, pc}
   12992:	210a      	movs	r1, #10
   12994:	4b2c      	ldr	r3, [pc, #176]	; (12a48 <LorawanProcessFcntDown+0x168>)
   12996:	2001      	movs	r0, #1
   12998:	4798      	blx	r3
   1299a:	e7f8      	b.n	1298e <LorawanProcessFcntDown+0xae>
   1299c:	482b      	ldr	r0, [pc, #172]	; (12a4c <LorawanProcessFcntDown+0x16c>)
   1299e:	1a9a      	subs	r2, r3, r2
   129a0:	1812      	adds	r2, r2, r0
   129a2:	482b      	ldr	r0, [pc, #172]	; (12a50 <LorawanProcessFcntDown+0x170>)
   129a4:	4282      	cmp	r2, r0
   129a6:	dc1f      	bgt.n	129e8 <LorawanProcessFcntDown+0x108>
   129a8:	0022      	movs	r2, r4
   129aa:	800b      	strh	r3, [r1, #0]
   129ac:	3286      	adds	r2, #134	; 0x86
   129ae:	8813      	ldrh	r3, [r2, #0]
   129b0:	3301      	adds	r3, #1
   129b2:	8013      	strh	r3, [r2, #0]
   129b4:	2388      	movs	r3, #136	; 0x88
   129b6:	009b      	lsls	r3, r3, #2
   129b8:	5ce2      	ldrb	r2, [r4, r3]
   129ba:	2a00      	cmp	r2, #0
   129bc:	d007      	beq.n	129ce <LorawanProcessFcntDown+0xee>
   129be:	2301      	movs	r3, #1
   129c0:	4093      	lsls	r3, r2
   129c2:	0022      	movs	r2, r4
   129c4:	3208      	adds	r2, #8
   129c6:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
   129c8:	3b01      	subs	r3, #1
   129ca:	421a      	tst	r2, r3
   129cc:	d103      	bne.n	129d6 <LorawanProcessFcntDown+0xf6>
   129ce:	210a      	movs	r1, #10
   129d0:	2001      	movs	r0, #1
   129d2:	4b1d      	ldr	r3, [pc, #116]	; (12a48 <LorawanProcessFcntDown+0x168>)
   129d4:	4798      	blx	r3
   129d6:	0023      	movs	r3, r4
   129d8:	3308      	adds	r3, #8
   129da:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   129dc:	3301      	adds	r3, #1
   129de:	d1d6      	bne.n	1298e <LorawanProcessFcntDown+0xae>
   129e0:	347c      	adds	r4, #124	; 0x7c
   129e2:	78a3      	ldrb	r3, [r4, #2]
   129e4:	2501      	movs	r5, #1
   129e6:	e7bb      	b.n	12960 <LorawanProcessFcntDown+0x80>
   129e8:	0023      	movs	r3, r4
   129ea:	33f4      	adds	r3, #244	; 0xf4
   129ec:	781b      	ldrb	r3, [r3, #0]
   129ee:	2b01      	cmp	r3, #1
   129f0:	d108      	bne.n	12a04 <LorawanProcessFcntDown+0x124>
   129f2:	0023      	movs	r3, r4
   129f4:	220e      	movs	r2, #14
   129f6:	337c      	adds	r3, #124	; 0x7c
   129f8:	781b      	ldrb	r3, [r3, #0]
   129fa:	4013      	ands	r3, r2
   129fc:	2b06      	cmp	r3, #6
   129fe:	d101      	bne.n	12a04 <LorawanProcessFcntDown+0x124>
   12a00:	4b0d      	ldr	r3, [pc, #52]	; (12a38 <LorawanProcessFcntDown+0x158>)
   12a02:	4798      	blx	r3
   12a04:	490d      	ldr	r1, [pc, #52]	; (12a3c <LorawanProcessFcntDown+0x15c>)
   12a06:	784a      	ldrb	r2, [r1, #1]
   12a08:	780b      	ldrb	r3, [r1, #0]
   12a0a:	0212      	lsls	r2, r2, #8
   12a0c:	431a      	orrs	r2, r3
   12a0e:	788b      	ldrb	r3, [r1, #2]
   12a10:	041b      	lsls	r3, r3, #16
   12a12:	431a      	orrs	r2, r3
   12a14:	78cb      	ldrb	r3, [r1, #3]
   12a16:	061b      	lsls	r3, r3, #24
   12a18:	4313      	orrs	r3, r2
   12a1a:	d007      	beq.n	12a2c <LorawanProcessFcntDown+0x14c>
   12a1c:	2220      	movs	r2, #32
   12a1e:	348c      	adds	r4, #140	; 0x8c
   12a20:	7823      	ldrb	r3, [r4, #0]
   12a22:	2017      	movs	r0, #23
   12a24:	4393      	bics	r3, r2
   12a26:	7023      	strb	r3, [r4, #0]
   12a28:	4b05      	ldr	r3, [pc, #20]	; (12a40 <LorawanProcessFcntDown+0x160>)
   12a2a:	4798      	blx	r3
   12a2c:	4b05      	ldr	r3, [pc, #20]	; (12a44 <LorawanProcessFcntDown+0x164>)
   12a2e:	4798      	blx	r3
   12a30:	200a      	movs	r0, #10
   12a32:	e7ad      	b.n	12990 <LorawanProcessFcntDown+0xb0>
   12a34:	20002b5c 	.word	0x20002b5c
   12a38:	0001029d 	.word	0x0001029d
   12a3c:	20002ea4 	.word	0x20002ea4
   12a40:	0001148d 	.word	0x0001148d
   12a44:	00012861 	.word	0x00012861
   12a48:	0000e0dd 	.word	0x0000e0dd
   12a4c:	0000ffff 	.word	0x0000ffff
   12a50:	00003fff 	.word	0x00003fff

00012a54 <UpdateCurrentDataRateAfterDataRangeChanges>:
   12a54:	4b09      	ldr	r3, [pc, #36]	; (12a7c <UpdateCurrentDataRateAfterDataRangeChanges+0x28>)
   12a56:	001a      	movs	r2, r3
   12a58:	32eb      	adds	r2, #235	; 0xeb
   12a5a:	7811      	ldrb	r1, [r2, #0]
   12a5c:	001a      	movs	r2, r3
   12a5e:	32df      	adds	r2, #223	; 0xdf
   12a60:	7810      	ldrb	r0, [r2, #0]
   12a62:	4288      	cmp	r0, r1
   12a64:	d900      	bls.n	12a68 <UpdateCurrentDataRateAfterDataRangeChanges+0x14>
   12a66:	7011      	strb	r1, [r2, #0]
   12a68:	001a      	movs	r2, r3
   12a6a:	33df      	adds	r3, #223	; 0xdf
   12a6c:	32ea      	adds	r2, #234	; 0xea
   12a6e:	7812      	ldrb	r2, [r2, #0]
   12a70:	7819      	ldrb	r1, [r3, #0]
   12a72:	4291      	cmp	r1, r2
   12a74:	d200      	bcs.n	12a78 <UpdateCurrentDataRateAfterDataRangeChanges+0x24>
   12a76:	701a      	strb	r2, [r3, #0]
   12a78:	4770      	bx	lr
   12a7a:	46c0      	nop			; (mov r8, r8)
   12a7c:	20002b5c 	.word	0x20002b5c

00012a80 <ExecuteNewChannel>:
   12a80:	b5f0      	push	{r4, r5, r6, r7, lr}
   12a82:	b08d      	sub	sp, #52	; 0x34
   12a84:	7807      	ldrb	r7, [r0, #0]
   12a86:	ab02      	add	r3, sp, #8
   12a88:	0006      	movs	r6, r0
   12a8a:	71df      	strb	r7, [r3, #7]
   12a8c:	1c41      	adds	r1, r0, #1
   12a8e:	4b59      	ldr	r3, [pc, #356]	; (12bf4 <ExecuteNewChannel+0x174>)
   12a90:	2204      	movs	r2, #4
   12a92:	a808      	add	r0, sp, #32
   12a94:	4798      	blx	r3
   12a96:	9b08      	ldr	r3, [sp, #32]
   12a98:	4c57      	ldr	r4, [pc, #348]	; (12bf8 <ExecuteNewChannel+0x178>)
   12a9a:	021d      	lsls	r5, r3, #8
   12a9c:	2364      	movs	r3, #100	; 0x64
   12a9e:	0a2d      	lsrs	r5, r5, #8
   12aa0:	435d      	muls	r5, r3
   12aa2:	1d73      	adds	r3, r6, #5
   12aa4:	9301      	str	r3, [sp, #4]
   12aa6:	0023      	movs	r3, r4
   12aa8:	9508      	str	r5, [sp, #32]
   12aaa:	33f6      	adds	r3, #246	; 0xf6
   12aac:	781b      	ldrb	r3, [r3, #0]
   12aae:	3b02      	subs	r3, #2
   12ab0:	2b01      	cmp	r3, #1
   12ab2:	d800      	bhi.n	12ab6 <ExecuteNewChannel+0x36>
   12ab4:	e092      	b.n	12bdc <ExecuteNewChannel+0x15c>
   12ab6:	7933      	ldrb	r3, [r6, #4]
   12ab8:	a904      	add	r1, sp, #16
   12aba:	9300      	str	r3, [sp, #0]
   12abc:	2300      	movs	r3, #0
   12abe:	2015      	movs	r0, #21
   12ac0:	4e4e      	ldr	r6, [pc, #312]	; (12bfc <ExecuteNewChannel+0x17c>)
   12ac2:	700f      	strb	r7, [r1, #0]
   12ac4:	704b      	strb	r3, [r1, #1]
   12ac6:	47b0      	blx	r6
   12ac8:	2808      	cmp	r0, #8
   12aca:	d12b      	bne.n	12b24 <ExecuteNewChannel+0xa4>
   12acc:	466a      	mov	r2, sp
   12ace:	ab02      	add	r3, sp, #8
   12ad0:	79db      	ldrb	r3, [r3, #7]
   12ad2:	7812      	ldrb	r2, [r2, #0]
   12ad4:	af06      	add	r7, sp, #24
   12ad6:	a90a      	add	r1, sp, #40	; 0x28
   12ad8:	3806      	subs	r0, #6
   12ada:	703b      	strb	r3, [r7, #0]
   12adc:	707a      	strb	r2, [r7, #1]
   12ade:	710b      	strb	r3, [r1, #4]
   12ae0:	950a      	str	r5, [sp, #40]	; 0x28
   12ae2:	47b0      	blx	r6
   12ae4:	2808      	cmp	r0, #8
   12ae6:	d001      	beq.n	12aec <ExecuteNewChannel+0x6c>
   12ae8:	2d00      	cmp	r5, #0
   12aea:	d10b      	bne.n	12b04 <ExecuteNewChannel+0x84>
   12aec:	0023      	movs	r3, r4
   12aee:	33d8      	adds	r3, #216	; 0xd8
   12af0:	781a      	ldrb	r2, [r3, #0]
   12af2:	2303      	movs	r3, #3
   12af4:	4353      	muls	r3, r2
   12af6:	2280      	movs	r2, #128	; 0x80
   12af8:	18e3      	adds	r3, r4, r3
   12afa:	3390      	adds	r3, #144	; 0x90
   12afc:	7899      	ldrb	r1, [r3, #2]
   12afe:	4252      	negs	r2, r2
   12b00:	430a      	orrs	r2, r1
   12b02:	709a      	strb	r2, [r3, #2]
   12b04:	0039      	movs	r1, r7
   12b06:	2012      	movs	r0, #18
   12b08:	47b0      	blx	r6
   12b0a:	2808      	cmp	r0, #8
   12b0c:	d10a      	bne.n	12b24 <ExecuteNewChannel+0xa4>
   12b0e:	0023      	movs	r3, r4
   12b10:	33d8      	adds	r3, #216	; 0xd8
   12b12:	781a      	ldrb	r2, [r3, #0]
   12b14:	2303      	movs	r3, #3
   12b16:	4353      	muls	r3, r2
   12b18:	2240      	movs	r2, #64	; 0x40
   12b1a:	18e3      	adds	r3, r4, r3
   12b1c:	3390      	adds	r3, #144	; 0x90
   12b1e:	7899      	ldrb	r1, [r3, #2]
   12b20:	430a      	orrs	r2, r1
   12b22:	709a      	strb	r2, [r3, #2]
   12b24:	0023      	movs	r3, r4
   12b26:	33d8      	adds	r3, #216	; 0xd8
   12b28:	781a      	ldrb	r2, [r3, #0]
   12b2a:	2303      	movs	r3, #3
   12b2c:	4353      	muls	r3, r2
   12b2e:	18e3      	adds	r3, r4, r3
   12b30:	3390      	adds	r3, #144	; 0x90
   12b32:	789b      	ldrb	r3, [r3, #2]
   12b34:	09da      	lsrs	r2, r3, #7
   12b36:	2a01      	cmp	r2, #1
   12b38:	d150      	bne.n	12bdc <ExecuteNewChannel+0x15c>
   12b3a:	065b      	lsls	r3, r3, #25
   12b3c:	d54e      	bpl.n	12bdc <ExecuteNewChannel+0x15c>
   12b3e:	4e30      	ldr	r6, [pc, #192]	; (12c00 <ExecuteNewChannel+0x180>)
   12b40:	2d00      	cmp	r5, #0
   12b42:	d04e      	beq.n	12be2 <ExecuteNewChannel+0x162>
   12b44:	a906      	add	r1, sp, #24
   12b46:	2012      	movs	r0, #18
   12b48:	47b0      	blx	r6
   12b4a:	ad07      	add	r5, sp, #28
   12b4c:	a90a      	add	r1, sp, #40	; 0x28
   12b4e:	2000      	movs	r0, #0
   12b50:	47b0      	blx	r6
   12b52:	002a      	movs	r2, r5
   12b54:	2100      	movs	r1, #0
   12b56:	2014      	movs	r0, #20
   12b58:	4f2a      	ldr	r7, [pc, #168]	; (12c04 <ExecuteNewChannel+0x184>)
   12b5a:	47b8      	blx	r7
   12b5c:	0023      	movs	r3, r4
   12b5e:	782a      	ldrb	r2, [r5, #0]
   12b60:	33ea      	adds	r3, #234	; 0xea
   12b62:	701a      	strb	r2, [r3, #0]
   12b64:	0023      	movs	r3, r4
   12b66:	786a      	ldrb	r2, [r5, #1]
   12b68:	33eb      	adds	r3, #235	; 0xeb
   12b6a:	701a      	strb	r2, [r3, #0]
   12b6c:	34ff      	adds	r4, #255	; 0xff
   12b6e:	4b26      	ldr	r3, [pc, #152]	; (12c08 <ExecuteNewChannel+0x188>)
   12b70:	4798      	blx	r3
   12b72:	7c63      	ldrb	r3, [r4, #17]
   12b74:	079b      	lsls	r3, r3, #30
   12b76:	d50e      	bpl.n	12b96 <ExecuteNewChannel+0x116>
   12b78:	2416      	movs	r4, #22
   12b7a:	ab02      	add	r3, sp, #8
   12b7c:	18e4      	adds	r4, r4, r3
   12b7e:	1dd9      	adds	r1, r3, #7
   12b80:	0022      	movs	r2, r4
   12b82:	201e      	movs	r0, #30
   12b84:	47b8      	blx	r7
   12b86:	ab02      	add	r3, sp, #8
   12b88:	79db      	ldrb	r3, [r3, #7]
   12b8a:	a909      	add	r1, sp, #36	; 0x24
   12b8c:	708b      	strb	r3, [r1, #2]
   12b8e:	8823      	ldrh	r3, [r4, #0]
   12b90:	201e      	movs	r0, #30
   12b92:	800b      	strh	r3, [r1, #0]
   12b94:	47b0      	blx	r6
   12b96:	ab02      	add	r3, sp, #8
   12b98:	79db      	ldrb	r3, [r3, #7]
   12b9a:	a905      	add	r1, sp, #20
   12b9c:	700b      	strb	r3, [r1, #0]
   12b9e:	2301      	movs	r3, #1
   12ba0:	2016      	movs	r0, #22
   12ba2:	704b      	strb	r3, [r1, #1]
   12ba4:	4b16      	ldr	r3, [pc, #88]	; (12c00 <ExecuteNewChannel+0x180>)
   12ba6:	4798      	blx	r3
   12ba8:	ad09      	add	r5, sp, #36	; 0x24
   12baa:	2100      	movs	r1, #0
   12bac:	002a      	movs	r2, r5
   12bae:	4b15      	ldr	r3, [pc, #84]	; (12c04 <ExecuteNewChannel+0x184>)
   12bb0:	2014      	movs	r0, #20
   12bb2:	4798      	blx	r3
   12bb4:	4c10      	ldr	r4, [pc, #64]	; (12bf8 <ExecuteNewChannel+0x178>)
   12bb6:	782a      	ldrb	r2, [r5, #0]
   12bb8:	0023      	movs	r3, r4
   12bba:	33ea      	adds	r3, #234	; 0xea
   12bbc:	701a      	strb	r2, [r3, #0]
   12bbe:	0023      	movs	r3, r4
   12bc0:	786a      	ldrb	r2, [r5, #1]
   12bc2:	33eb      	adds	r3, #235	; 0xeb
   12bc4:	701a      	strb	r2, [r3, #0]
   12bc6:	4b10      	ldr	r3, [pc, #64]	; (12c08 <ExecuteNewChannel+0x188>)
   12bc8:	4798      	blx	r3
   12bca:	2304      	movs	r3, #4
   12bcc:	347c      	adds	r4, #124	; 0x7c
   12bce:	7862      	ldrb	r2, [r4, #1]
   12bd0:	210b      	movs	r1, #11
   12bd2:	4313      	orrs	r3, r2
   12bd4:	7063      	strb	r3, [r4, #1]
   12bd6:	2001      	movs	r0, #1
   12bd8:	4b0c      	ldr	r3, [pc, #48]	; (12c0c <ExecuteNewChannel+0x18c>)
   12bda:	4798      	blx	r3
   12bdc:	9801      	ldr	r0, [sp, #4]
   12bde:	b00d      	add	sp, #52	; 0x34
   12be0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   12be2:	ab02      	add	r3, sp, #8
   12be4:	79db      	ldrb	r3, [r3, #7]
   12be6:	a905      	add	r1, sp, #20
   12be8:	2016      	movs	r0, #22
   12bea:	700b      	strb	r3, [r1, #0]
   12bec:	704d      	strb	r5, [r1, #1]
   12bee:	47b0      	blx	r6
   12bf0:	e7da      	b.n	12ba8 <ExecuteNewChannel+0x128>
   12bf2:	46c0      	nop			; (mov r8, r8)
   12bf4:	00019d89 	.word	0x00019d89
   12bf8:	20002b5c 	.word	0x20002b5c
   12bfc:	0000d91d 	.word	0x0000d91d
   12c00:	0000da29 	.word	0x0000da29
   12c04:	0000d901 	.word	0x0000d901
   12c08:	00012a55 	.word	0x00012a55
   12c0c:	0000e0dd 	.word	0x0000e0dd

00012c10 <MacExecuteCommands>:
   12c10:	2300      	movs	r3, #0
   12c12:	b5f0      	push	{r4, r5, r6, r7, lr}
   12c14:	0007      	movs	r7, r0
   12c16:	2503      	movs	r5, #3
   12c18:	b087      	sub	sp, #28
   12c1a:	9002      	str	r0, [sp, #8]
   12c1c:	9103      	str	r1, [sp, #12]
   12c1e:	9300      	str	r3, [sp, #0]
   12c20:	9a03      	ldr	r2, [sp, #12]
   12c22:	9b02      	ldr	r3, [sp, #8]
   12c24:	4694      	mov	ip, r2
   12c26:	4463      	add	r3, ip
   12c28:	9301      	str	r3, [sp, #4]
   12c2a:	4e65      	ldr	r6, [pc, #404]	; (12dc0 <MacExecuteCommands+0x1b0>)
   12c2c:	429f      	cmp	r7, r3
   12c2e:	d35c      	bcc.n	12cea <MacExecuteCommands+0xda>
   12c30:	4b64      	ldr	r3, [pc, #400]	; (12dc4 <MacExecuteCommands+0x1b4>)
   12c32:	5cf3      	ldrb	r3, [r6, r3]
   12c34:	2b00      	cmp	r3, #0
   12c36:	d000      	beq.n	12c3a <MacExecuteCommands+0x2a>
   12c38:	e07a      	b.n	12d30 <MacExecuteCommands+0x120>
   12c3a:	0038      	movs	r0, r7
   12c3c:	b007      	add	sp, #28
   12c3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   12c40:	0032      	movs	r2, r6
   12c42:	7879      	ldrb	r1, [r7, #1]
   12c44:	32dd      	adds	r2, #221	; 0xdd
   12c46:	7011      	strb	r1, [r2, #0]
   12c48:	0032      	movs	r2, r6
   12c4a:	78b9      	ldrb	r1, [r7, #2]
   12c4c:	32de      	adds	r2, #222	; 0xde
   12c4e:	1cfc      	adds	r4, r7, #3
   12c50:	7011      	strb	r1, [r2, #0]
   12c52:	22ff      	movs	r2, #255	; 0xff
   12c54:	436b      	muls	r3, r5
   12c56:	18f3      	adds	r3, r6, r3
   12c58:	3391      	adds	r3, #145	; 0x91
   12c5a:	701a      	strb	r2, [r3, #0]
   12c5c:	e003      	b.n	12c66 <MacExecuteCommands+0x56>
   12c5e:	0020      	movs	r0, r4
   12c60:	4b59      	ldr	r3, [pc, #356]	; (12dc8 <MacExecuteCommands+0x1b8>)
   12c62:	4798      	blx	r3
   12c64:	0004      	movs	r4, r0
   12c66:	0032      	movs	r2, r6
   12c68:	0029      	movs	r1, r5
   12c6a:	32d8      	adds	r2, #216	; 0xd8
   12c6c:	7813      	ldrb	r3, [r2, #0]
   12c6e:	4359      	muls	r1, r3
   12c70:	1876      	adds	r6, r6, r1
   12c72:	3691      	adds	r6, #145	; 0x91
   12c74:	7831      	ldrb	r1, [r6, #0]
   12c76:	29ff      	cmp	r1, #255	; 0xff
   12c78:	d003      	beq.n	12c82 <MacExecuteCommands+0x72>
   12c7a:	2b0f      	cmp	r3, #15
   12c7c:	d801      	bhi.n	12c82 <MacExecuteCommands+0x72>
   12c7e:	3301      	adds	r3, #1
   12c80:	7013      	strb	r3, [r2, #0]
   12c82:	0027      	movs	r7, r4
   12c84:	e7cc      	b.n	12c20 <MacExecuteCommands+0x10>
   12c86:	0020      	movs	r0, r4
   12c88:	4b50      	ldr	r3, [pc, #320]	; (12dcc <MacExecuteCommands+0x1bc>)
   12c8a:	e7ea      	b.n	12c62 <MacExecuteCommands+0x52>
   12c8c:	0020      	movs	r0, r4
   12c8e:	4b50      	ldr	r3, [pc, #320]	; (12dd0 <MacExecuteCommands+0x1c0>)
   12c90:	e7e7      	b.n	12c62 <MacExecuteCommands+0x52>
   12c92:	0020      	movs	r0, r4
   12c94:	4b4f      	ldr	r3, [pc, #316]	; (12dd4 <MacExecuteCommands+0x1c4>)
   12c96:	e7e4      	b.n	12c62 <MacExecuteCommands+0x52>
   12c98:	230f      	movs	r3, #15
   12c9a:	7878      	ldrb	r0, [r7, #1]
   12c9c:	1cbc      	adds	r4, r7, #2
   12c9e:	4018      	ands	r0, r3
   12ca0:	4b4d      	ldr	r3, [pc, #308]	; (12dd8 <MacExecuteCommands+0x1c8>)
   12ca2:	4798      	blx	r3
   12ca4:	0032      	movs	r2, r6
   12ca6:	2380      	movs	r3, #128	; 0x80
   12ca8:	327c      	adds	r2, #124	; 0x7c
   12caa:	7851      	ldrb	r1, [r2, #1]
   12cac:	425b      	negs	r3, r3
   12cae:	430b      	orrs	r3, r1
   12cb0:	7053      	strb	r3, [r2, #1]
   12cb2:	210b      	movs	r1, #11
   12cb4:	4b49      	ldr	r3, [pc, #292]	; (12ddc <MacExecuteCommands+0x1cc>)
   12cb6:	2001      	movs	r0, #1
   12cb8:	4798      	blx	r3
   12cba:	e7d4      	b.n	12c66 <MacExecuteCommands+0x56>
   12cbc:	0020      	movs	r0, r4
   12cbe:	4b48      	ldr	r3, [pc, #288]	; (12de0 <MacExecuteCommands+0x1d0>)
   12cc0:	e7cf      	b.n	12c62 <MacExecuteCommands+0x52>
   12cc2:	0020      	movs	r0, r4
   12cc4:	4b47      	ldr	r3, [pc, #284]	; (12de4 <MacExecuteCommands+0x1d4>)
   12cc6:	e7cc      	b.n	12c62 <MacExecuteCommands+0x52>
   12cc8:	0020      	movs	r0, r4
   12cca:	4b47      	ldr	r3, [pc, #284]	; (12de8 <MacExecuteCommands+0x1d8>)
   12ccc:	4798      	blx	r3
   12cce:	0033      	movs	r3, r6
   12cd0:	33d8      	adds	r3, #216	; 0xd8
   12cd2:	0004      	movs	r4, r0
   12cd4:	781b      	ldrb	r3, [r3, #0]
   12cd6:	e7bc      	b.n	12c52 <MacExecuteCommands+0x42>
   12cd8:	22ff      	movs	r2, #255	; 0xff
   12cda:	436b      	muls	r3, r5
   12cdc:	18f3      	adds	r3, r6, r3
   12cde:	3391      	adds	r3, #145	; 0x91
   12ce0:	701a      	strb	r2, [r3, #0]
   12ce2:	2301      	movs	r3, #1
   12ce4:	9c01      	ldr	r4, [sp, #4]
   12ce6:	9300      	str	r3, [sp, #0]
   12ce8:	e7bd      	b.n	12c66 <MacExecuteCommands+0x56>
   12cea:	9b00      	ldr	r3, [sp, #0]
   12cec:	2b00      	cmp	r3, #0
   12cee:	d19f      	bne.n	12c30 <MacExecuteCommands+0x20>
   12cf0:	0033      	movs	r3, r6
   12cf2:	002a      	movs	r2, r5
   12cf4:	33d8      	adds	r3, #216	; 0xd8
   12cf6:	781b      	ldrb	r3, [r3, #0]
   12cf8:	2401      	movs	r4, #1
   12cfa:	435a      	muls	r2, r3
   12cfc:	18b2      	adds	r2, r6, r2
   12cfe:	0010      	movs	r0, r2
   12d00:	3090      	adds	r0, #144	; 0x90
   12d02:	7881      	ldrb	r1, [r0, #2]
   12d04:	3291      	adds	r2, #145	; 0x91
   12d06:	43a1      	bics	r1, r4
   12d08:	4021      	ands	r1, r4
   12d0a:	7081      	strb	r1, [r0, #2]
   12d0c:	78c1      	ldrb	r1, [r0, #3]
   12d0e:	43a1      	bics	r1, r4
   12d10:	70c1      	strb	r1, [r0, #3]
   12d12:	7839      	ldrb	r1, [r7, #0]
   12d14:	193c      	adds	r4, r7, r4
   12d16:	7011      	strb	r1, [r2, #0]
   12d18:	7838      	ldrb	r0, [r7, #0]
   12d1a:	3802      	subs	r0, #2
   12d1c:	280b      	cmp	r0, #11
   12d1e:	d8db      	bhi.n	12cd8 <MacExecuteCommands+0xc8>
   12d20:	f003 fc62 	bl	165e8 <__gnu_thumb1_case_sqi>
   12d24:	b4b19d8e 	.word	0xb4b19d8e
   12d28:	ccbab7a1 	.word	0xccbab7a1
   12d2c:	d2dadacf 	.word	0xd2dadacf
   12d30:	4b2e      	ldr	r3, [pc, #184]	; (12dec <MacExecuteCommands+0x1dc>)
   12d32:	5cf3      	ldrb	r3, [r6, r3]
   12d34:	43db      	mvns	r3, r3
   12d36:	075b      	lsls	r3, r3, #29
   12d38:	d000      	beq.n	12d3c <MacExecuteCommands+0x12c>
   12d3a:	e77e      	b.n	12c3a <MacExecuteCommands+0x2a>
   12d3c:	4b2c      	ldr	r3, [pc, #176]	; (12df0 <MacExecuteCommands+0x1e0>)
   12d3e:	ad05      	add	r5, sp, #20
   12d40:	5cf4      	ldrb	r4, [r6, r3]
   12d42:	2100      	movs	r1, #0
   12d44:	0724      	lsls	r4, r4, #28
   12d46:	0f24      	lsrs	r4, r4, #28
   12d48:	b2e3      	uxtb	r3, r4
   12d4a:	9300      	str	r3, [sp, #0]
   12d4c:	4b29      	ldr	r3, [pc, #164]	; (12df4 <MacExecuteCommands+0x1e4>)
   12d4e:	002a      	movs	r2, r5
   12d50:	5cf3      	ldrb	r3, [r6, r3]
   12d52:	2014      	movs	r0, #20
   12d54:	9301      	str	r3, [sp, #4]
   12d56:	2386      	movs	r3, #134	; 0x86
   12d58:	009b      	lsls	r3, r3, #2
   12d5a:	5cf3      	ldrb	r3, [r6, r3]
   12d5c:	9302      	str	r3, [sp, #8]
   12d5e:	4b26      	ldr	r3, [pc, #152]	; (12df8 <MacExecuteCommands+0x1e8>)
   12d60:	4798      	blx	r3
   12d62:	0033      	movs	r3, r6
   12d64:	782a      	ldrb	r2, [r5, #0]
   12d66:	33ea      	adds	r3, #234	; 0xea
   12d68:	701a      	strb	r2, [r3, #0]
   12d6a:	0033      	movs	r3, r6
   12d6c:	786a      	ldrb	r2, [r5, #1]
   12d6e:	33eb      	adds	r3, #235	; 0xeb
   12d70:	701a      	strb	r2, [r3, #0]
   12d72:	4b22      	ldr	r3, [pc, #136]	; (12dfc <MacExecuteCommands+0x1ec>)
   12d74:	4798      	blx	r3
   12d76:	9801      	ldr	r0, [sp, #4]
   12d78:	4b21      	ldr	r3, [pc, #132]	; (12e00 <MacExecuteCommands+0x1f0>)
   12d7a:	4798      	blx	r3
   12d7c:	0032      	movs	r2, r6
   12d7e:	2308      	movs	r3, #8
   12d80:	327c      	adds	r2, #124	; 0x7c
   12d82:	7851      	ldrb	r1, [r2, #1]
   12d84:	430b      	orrs	r3, r1
   12d86:	7053      	strb	r3, [r2, #1]
   12d88:	9802      	ldr	r0, [sp, #8]
   12d8a:	4b1e      	ldr	r3, [pc, #120]	; (12e04 <MacExecuteCommands+0x1f4>)
   12d8c:	4798      	blx	r3
   12d8e:	0033      	movs	r3, r6
   12d90:	b2e2      	uxtb	r2, r4
   12d92:	33d9      	adds	r3, #217	; 0xd9
   12d94:	2a00      	cmp	r2, #0
   12d96:	d10e      	bne.n	12db6 <MacExecuteCommands+0x1a6>
   12d98:	701c      	strb	r4, [r3, #0]
   12d9a:	2114      	movs	r1, #20
   12d9c:	4c0f      	ldr	r4, [pc, #60]	; (12ddc <MacExecuteCommands+0x1cc>)
   12d9e:	2000      	movs	r0, #0
   12da0:	47a0      	blx	r4
   12da2:	2210      	movs	r2, #16
   12da4:	4b06      	ldr	r3, [pc, #24]	; (12dc0 <MacExecuteCommands+0x1b0>)
   12da6:	2001      	movs	r0, #1
   12da8:	337c      	adds	r3, #124	; 0x7c
   12daa:	7859      	ldrb	r1, [r3, #1]
   12dac:	430a      	orrs	r2, r1
   12dae:	705a      	strb	r2, [r3, #1]
   12db0:	210b      	movs	r1, #11
   12db2:	47a0      	blx	r4
   12db4:	e741      	b.n	12c3a <MacExecuteCommands+0x2a>
   12db6:	9a00      	ldr	r2, [sp, #0]
   12db8:	3a01      	subs	r2, #1
   12dba:	701a      	strb	r2, [r3, #0]
   12dbc:	e7ed      	b.n	12d9a <MacExecuteCommands+0x18a>
   12dbe:	46c0      	nop			; (mov r8, r8)
   12dc0:	20002b5c 	.word	0x20002b5c
   12dc4:	0000021a 	.word	0x0000021a
   12dc8:	00010c21 	.word	0x00010c21
   12dcc:	00010ae5 	.word	0x00010ae5
   12dd0:	000109e9 	.word	0x000109e9
   12dd4:	00012a81 	.word	0x00012a81
   12dd8:	0000fe91 	.word	0x0000fe91
   12ddc:	0000e0dd 	.word	0x0000e0dd
   12de0:	00010bd1 	.word	0x00010bd1
   12de4:	00010b1d 	.word	0x00010b1d
   12de8:	00010d39 	.word	0x00010d39
   12dec:	00000217 	.word	0x00000217
   12df0:	0000021d 	.word	0x0000021d
   12df4:	00000219 	.word	0x00000219
   12df8:	0000d901 	.word	0x0000d901
   12dfc:	00012a55 	.word	0x00012a55
   12e00:	0001089d 	.word	0x0001089d
   12e04:	00010831 	.word	0x00010831

00012e08 <LorawanSetDataRange>:
   12e08:	2201      	movs	r2, #1
   12e0a:	b530      	push	{r4, r5, lr}
   12e0c:	b085      	sub	sp, #20
   12e0e:	ab01      	add	r3, sp, #4
   12e10:	ac02      	add	r4, sp, #8
   12e12:	7018      	strb	r0, [r3, #0]
   12e14:	7020      	strb	r0, [r4, #0]
   12e16:	7061      	strb	r1, [r4, #1]
   12e18:	2015      	movs	r0, #21
   12e1a:	0019      	movs	r1, r3
   12e1c:	4d11      	ldr	r5, [pc, #68]	; (12e64 <LorawanSetDataRange+0x5c>)
   12e1e:	705a      	strb	r2, [r3, #1]
   12e20:	47a8      	blx	r5
   12e22:	2808      	cmp	r0, #8
   12e24:	d003      	beq.n	12e2e <LorawanSetDataRange+0x26>
   12e26:	250a      	movs	r5, #10
   12e28:	0028      	movs	r0, r5
   12e2a:	b005      	add	sp, #20
   12e2c:	bd30      	pop	{r4, r5, pc}
   12e2e:	0021      	movs	r1, r4
   12e30:	2012      	movs	r0, #18
   12e32:	47a8      	blx	r5
   12e34:	0005      	movs	r5, r0
   12e36:	2808      	cmp	r0, #8
   12e38:	d1f5      	bne.n	12e26 <LorawanSetDataRange+0x1e>
   12e3a:	0021      	movs	r1, r4
   12e3c:	4b0a      	ldr	r3, [pc, #40]	; (12e68 <LorawanSetDataRange+0x60>)
   12e3e:	ac03      	add	r4, sp, #12
   12e40:	2012      	movs	r0, #18
   12e42:	4798      	blx	r3
   12e44:	0022      	movs	r2, r4
   12e46:	2100      	movs	r1, #0
   12e48:	4b08      	ldr	r3, [pc, #32]	; (12e6c <LorawanSetDataRange+0x64>)
   12e4a:	2014      	movs	r0, #20
   12e4c:	4798      	blx	r3
   12e4e:	4b08      	ldr	r3, [pc, #32]	; (12e70 <LorawanSetDataRange+0x68>)
   12e50:	7821      	ldrb	r1, [r4, #0]
   12e52:	001a      	movs	r2, r3
   12e54:	32ea      	adds	r2, #234	; 0xea
   12e56:	7011      	strb	r1, [r2, #0]
   12e58:	7862      	ldrb	r2, [r4, #1]
   12e5a:	33eb      	adds	r3, #235	; 0xeb
   12e5c:	701a      	strb	r2, [r3, #0]
   12e5e:	4b05      	ldr	r3, [pc, #20]	; (12e74 <LorawanSetDataRange+0x6c>)
   12e60:	4798      	blx	r3
   12e62:	e7e1      	b.n	12e28 <LorawanSetDataRange+0x20>
   12e64:	0000d91d 	.word	0x0000d91d
   12e68:	0000da29 	.word	0x0000da29
   12e6c:	0000d901 	.word	0x0000d901
   12e70:	20002b5c 	.word	0x20002b5c
   12e74:	00012a55 	.word	0x00012a55

00012e78 <LorawanSetChannelIdStatus>:
   12e78:	b537      	push	{r0, r1, r2, r4, r5, lr}
   12e7a:	466b      	mov	r3, sp
   12e7c:	7018      	strb	r0, [r3, #0]
   12e7e:	7059      	strb	r1, [r3, #1]
   12e80:	2016      	movs	r0, #22
   12e82:	4669      	mov	r1, sp
   12e84:	4b0c      	ldr	r3, [pc, #48]	; (12eb8 <LorawanSetChannelIdStatus+0x40>)
   12e86:	4798      	blx	r3
   12e88:	0004      	movs	r4, r0
   12e8a:	2808      	cmp	r0, #8
   12e8c:	d111      	bne.n	12eb2 <LorawanSetChannelIdStatus+0x3a>
   12e8e:	ad01      	add	r5, sp, #4
   12e90:	002a      	movs	r2, r5
   12e92:	2100      	movs	r1, #0
   12e94:	4b09      	ldr	r3, [pc, #36]	; (12ebc <LorawanSetChannelIdStatus+0x44>)
   12e96:	2014      	movs	r0, #20
   12e98:	4798      	blx	r3
   12e9a:	4b09      	ldr	r3, [pc, #36]	; (12ec0 <LorawanSetChannelIdStatus+0x48>)
   12e9c:	7829      	ldrb	r1, [r5, #0]
   12e9e:	001a      	movs	r2, r3
   12ea0:	32ea      	adds	r2, #234	; 0xea
   12ea2:	7011      	strb	r1, [r2, #0]
   12ea4:	786a      	ldrb	r2, [r5, #1]
   12ea6:	33eb      	adds	r3, #235	; 0xeb
   12ea8:	701a      	strb	r2, [r3, #0]
   12eaa:	4b06      	ldr	r3, [pc, #24]	; (12ec4 <LorawanSetChannelIdStatus+0x4c>)
   12eac:	4798      	blx	r3
   12eae:	0020      	movs	r0, r4
   12eb0:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
   12eb2:	240a      	movs	r4, #10
   12eb4:	e7fb      	b.n	12eae <LorawanSetChannelIdStatus+0x36>
   12eb6:	46c0      	nop			; (mov r8, r8)
   12eb8:	0000da29 	.word	0x0000da29
   12ebc:	0000d901 	.word	0x0000d901
   12ec0:	20002b5c 	.word	0x20002b5c
   12ec4:	00012a55 	.word	0x00012a55

00012ec8 <LORAWAN_RxDone>:
   12ec8:	b5f0      	push	{r4, r5, r6, r7, lr}
   12eca:	4bc4      	ldr	r3, [pc, #784]	; (131dc <LORAWAN_RxDone+0x314>)
   12ecc:	b093      	sub	sp, #76	; 0x4c
   12ece:	781b      	ldrb	r3, [r3, #0]
   12ed0:	0007      	movs	r7, r0
   12ed2:	b25a      	sxtb	r2, r3
   12ed4:	9106      	str	r1, [sp, #24]
   12ed6:	4cc2      	ldr	r4, [pc, #776]	; (131e0 <LORAWAN_RxDone+0x318>)
   12ed8:	2a00      	cmp	r2, #0
   12eda:	da01      	bge.n	12ee0 <LORAWAN_RxDone+0x18>
   12edc:	f000 fc82 	bl	137e4 <LORAWAN_RxDone+0x91c>
   12ee0:	7801      	ldrb	r1, [r0, #0]
   12ee2:	221f      	movs	r2, #31
   12ee4:	000e      	movs	r6, r1
   12ee6:	4396      	bics	r6, r2
   12ee8:	2e20      	cmp	r6, #32
   12eea:	d000      	beq.n	12eee <LORAWAN_RxDone+0x26>
   12eec:	e1ae      	b.n	1324c <LORAWAN_RxDone+0x384>
   12eee:	7822      	ldrb	r2, [r4, #0]
   12ef0:	2a00      	cmp	r2, #0
   12ef2:	d001      	beq.n	12ef8 <LORAWAN_RxDone+0x30>
   12ef4:	f000 fc62 	bl	137bc <LORAWAN_RxDone+0x8f4>
   12ef8:	0022      	movs	r2, r4
   12efa:	328c      	adds	r2, #140	; 0x8c
   12efc:	7812      	ldrb	r2, [r2, #0]
   12efe:	0752      	lsls	r2, r2, #29
   12f00:	d401      	bmi.n	12f06 <LORAWAN_RxDone+0x3e>
   12f02:	f000 fc5b 	bl	137bc <LORAWAN_RxDone+0x8f4>
   12f06:	9b06      	ldr	r3, [sp, #24]
   12f08:	3b01      	subs	r3, #1
   12f0a:	b2db      	uxtb	r3, r3
   12f0c:	9307      	str	r3, [sp, #28]
   12f0e:	4bb5      	ldr	r3, [pc, #724]	; (131e4 <LORAWAN_RxDone+0x31c>)
   12f10:	469c      	mov	ip, r3
   12f12:	9b07      	ldr	r3, [sp, #28]
   12f14:	2b00      	cmp	r3, #0
   12f16:	d12c      	bne.n	12f72 <LORAWAN_RxDone+0xaa>
   12f18:	9b06      	ldr	r3, [sp, #24]
   12f1a:	4660      	mov	r0, ip
   12f1c:	1f1d      	subs	r5, r3, #4
   12f1e:	b2eb      	uxtb	r3, r5
   12f20:	9300      	str	r3, [sp, #0]
   12f22:	4ab1      	ldr	r2, [pc, #708]	; (131e8 <LORAWAN_RxDone+0x320>)
   12f24:	003b      	movs	r3, r7
   12f26:	9907      	ldr	r1, [sp, #28]
   12f28:	4eb0      	ldr	r6, [pc, #704]	; (131ec <LORAWAN_RxDone+0x324>)
   12f2a:	47b0      	blx	r6
   12f2c:	2204      	movs	r2, #4
   12f2e:	49ae      	ldr	r1, [pc, #696]	; (131e8 <LORAWAN_RxDone+0x320>)
   12f30:	4baf      	ldr	r3, [pc, #700]	; (131f0 <LORAWAN_RxDone+0x328>)
   12f32:	a810      	add	r0, sp, #64	; 0x40
   12f34:	4798      	blx	r3
   12f36:	9e10      	ldr	r6, [sp, #64]	; 0x40
   12f38:	1979      	adds	r1, r7, r5
   12f3a:	2204      	movs	r2, #4
   12f3c:	4bac      	ldr	r3, [pc, #688]	; (131f0 <LORAWAN_RxDone+0x328>)
   12f3e:	a810      	add	r0, sp, #64	; 0x40
   12f40:	960d      	str	r6, [sp, #52]	; 0x34
   12f42:	4798      	blx	r3
   12f44:	9a10      	ldr	r2, [sp, #64]	; 0x40
   12f46:	4ba6      	ldr	r3, [pc, #664]	; (131e0 <LORAWAN_RxDone+0x318>)
   12f48:	210e      	movs	r1, #14
   12f4a:	42b2      	cmp	r2, r6
   12f4c:	d029      	beq.n	12fa2 <LORAWAN_RxDone+0xda>
   12f4e:	001a      	movs	r2, r3
   12f50:	327c      	adds	r2, #124	; 0x7c
   12f52:	7812      	ldrb	r2, [r2, #0]
   12f54:	400a      	ands	r2, r1
   12f56:	2a0a      	cmp	r2, #10
   12f58:	d005      	beq.n	12f66 <LORAWAN_RxDone+0x9e>
   12f5a:	2a06      	cmp	r2, #6
   12f5c:	d106      	bne.n	12f6c <LORAWAN_RxDone+0xa4>
   12f5e:	33f0      	adds	r3, #240	; 0xf0
   12f60:	781b      	ldrb	r3, [r3, #0]
   12f62:	2b00      	cmp	r3, #0
   12f64:	d002      	beq.n	12f6c <LORAWAN_RxDone+0xa4>
   12f66:	2018      	movs	r0, #24
   12f68:	4ba2      	ldr	r3, [pc, #648]	; (131f4 <LORAWAN_RxDone+0x32c>)
   12f6a:	4798      	blx	r3
   12f6c:	4ba2      	ldr	r3, [pc, #648]	; (131f8 <LORAWAN_RxDone+0x330>)
   12f6e:	4798      	blx	r3
   12f70:	e1d0      	b.n	13314 <LORAWAN_RxDone+0x44c>
   12f72:	9b06      	ldr	r3, [sp, #24]
   12f74:	9a07      	ldr	r2, [sp, #28]
   12f76:	2100      	movs	r1, #0
   12f78:	1a98      	subs	r0, r3, r2
   12f7a:	1838      	adds	r0, r7, r0
   12f7c:	4662      	mov	r2, ip
   12f7e:	4b9f      	ldr	r3, [pc, #636]	; (131fc <LORAWAN_RxDone+0x334>)
   12f80:	4798      	blx	r3
   12f82:	2800      	cmp	r0, #0
   12f84:	d006      	beq.n	12f94 <LORAWAN_RxDone+0xcc>
   12f86:	4b9b      	ldr	r3, [pc, #620]	; (131f4 <LORAWAN_RxDone+0x32c>)
   12f88:	4798      	blx	r3
   12f8a:	4b9b      	ldr	r3, [pc, #620]	; (131f8 <LORAWAN_RxDone+0x330>)
   12f8c:	4798      	blx	r3
   12f8e:	201f      	movs	r0, #31
   12f90:	b013      	add	sp, #76	; 0x4c
   12f92:	bdf0      	pop	{r4, r5, r6, r7, pc}
   12f94:	9b07      	ldr	r3, [sp, #28]
   12f96:	2b10      	cmp	r3, #16
   12f98:	d901      	bls.n	12f9e <LORAWAN_RxDone+0xd6>
   12f9a:	3b10      	subs	r3, #16
   12f9c:	e7b5      	b.n	12f0a <LORAWAN_RxDone+0x42>
   12f9e:	9007      	str	r0, [sp, #28]
   12fa0:	e7b5      	b.n	12f0e <LORAWAN_RxDone+0x46>
   12fa2:	001a      	movs	r2, r3
   12fa4:	327c      	adds	r2, #124	; 0x7c
   12fa6:	7812      	ldrb	r2, [r2, #0]
   12fa8:	400a      	ands	r2, r1
   12faa:	2a06      	cmp	r2, #6
   12fac:	d103      	bne.n	12fb6 <LORAWAN_RxDone+0xee>
   12fae:	33e3      	adds	r3, #227	; 0xe3
   12fb0:	7818      	ldrb	r0, [r3, #0]
   12fb2:	4b93      	ldr	r3, [pc, #588]	; (13200 <LORAWAN_RxDone+0x338>)
   12fb4:	4798      	blx	r3
   12fb6:	7a3a      	ldrb	r2, [r7, #8]
   12fb8:	79fb      	ldrb	r3, [r7, #7]
   12fba:	0212      	lsls	r2, r2, #8
   12fbc:	431a      	orrs	r2, r3
   12fbe:	7a7b      	ldrb	r3, [r7, #9]
   12fc0:	2001      	movs	r0, #1
   12fc2:	041b      	lsls	r3, r3, #16
   12fc4:	431a      	orrs	r2, r3
   12fc6:	7abb      	ldrb	r3, [r7, #10]
   12fc8:	061b      	lsls	r3, r3, #24
   12fca:	4313      	orrs	r3, r2
   12fcc:	0a19      	lsrs	r1, r3, #8
   12fce:	7063      	strb	r3, [r4, #1]
   12fd0:	70a1      	strb	r1, [r4, #2]
   12fd2:	0c19      	lsrs	r1, r3, #16
   12fd4:	0e1b      	lsrs	r3, r3, #24
   12fd6:	70e1      	strb	r1, [r4, #3]
   12fd8:	7123      	strb	r3, [r4, #4]
   12fda:	240f      	movs	r4, #15
   12fdc:	2103      	movs	r1, #3
   12fde:	4b89      	ldr	r3, [pc, #548]	; (13204 <LORAWAN_RxDone+0x33c>)
   12fe0:	4798      	blx	r3
   12fe2:	7b38      	ldrb	r0, [r7, #12]
   12fe4:	4b88      	ldr	r3, [pc, #544]	; (13208 <LORAWAN_RxDone+0x340>)
   12fe6:	4020      	ands	r0, r4
   12fe8:	4798      	blx	r3
   12fea:	7af8      	ldrb	r0, [r7, #11]
   12fec:	4b87      	ldr	r3, [pc, #540]	; (1320c <LORAWAN_RxDone+0x344>)
   12fee:	0641      	lsls	r1, r0, #25
   12ff0:	0700      	lsls	r0, r0, #28
   12ff2:	0f49      	lsrs	r1, r1, #29
   12ff4:	0f00      	lsrs	r0, r0, #28
   12ff6:	4798      	blx	r3
   12ff8:	4b85      	ldr	r3, [pc, #532]	; (13210 <LORAWAN_RxDone+0x348>)
   12ffa:	2100      	movs	r1, #0
   12ffc:	203c      	movs	r0, #60	; 0x3c
   12ffe:	4798      	blx	r3
   13000:	9b06      	ldr	r3, [sp, #24]
   13002:	2b21      	cmp	r3, #33	; 0x21
   13004:	d000      	beq.n	13008 <LORAWAN_RxDone+0x140>
   13006:	e08c      	b.n	13122 <LORAWAN_RxDone+0x25a>
   13008:	251a      	movs	r5, #26
   1300a:	ab04      	add	r3, sp, #16
   1300c:	18ed      	adds	r5, r5, r3
   1300e:	002a      	movs	r2, r5
   13010:	4b80      	ldr	r3, [pc, #512]	; (13214 <LORAWAN_RxDone+0x34c>)
   13012:	4981      	ldr	r1, [pc, #516]	; (13218 <LORAWAN_RxDone+0x350>)
   13014:	2007      	movs	r0, #7
   13016:	4798      	blx	r3
   13018:	782b      	ldrb	r3, [r5, #0]
   1301a:	2bff      	cmp	r3, #255	; 0xff
   1301c:	d100      	bne.n	13020 <LORAWAN_RxDone+0x158>
   1301e:	e080      	b.n	13122 <LORAWAN_RxDone+0x25a>
   13020:	2350      	movs	r3, #80	; 0x50
   13022:	43a3      	bics	r3, r4
   13024:	9308      	str	r3, [sp, #32]
   13026:	003b      	movs	r3, r7
   13028:	330d      	adds	r3, #13
   1302a:	9306      	str	r3, [sp, #24]
   1302c:	2600      	movs	r6, #0
   1302e:	2203      	movs	r2, #3
   13030:	9906      	ldr	r1, [sp, #24]
   13032:	4b6f      	ldr	r3, [pc, #444]	; (131f0 <LORAWAN_RxDone+0x328>)
   13034:	a80e      	add	r0, sp, #56	; 0x38
   13036:	960e      	str	r6, [sp, #56]	; 0x38
   13038:	4798      	blx	r3
   1303a:	2364      	movs	r3, #100	; 0x64
   1303c:	990e      	ldr	r1, [sp, #56]	; 0x38
   1303e:	aa04      	add	r2, sp, #16
   13040:	4359      	muls	r1, r3
   13042:	3b4a      	subs	r3, #74	; 0x4a
   13044:	189b      	adds	r3, r3, r2
   13046:	7818      	ldrb	r0, [r3, #0]
   13048:	9b07      	ldr	r3, [sp, #28]
   1304a:	910e      	str	r1, [sp, #56]	; 0x38
   1304c:	1818      	adds	r0, r3, r0
   1304e:	b2c0      	uxtb	r0, r0
   13050:	76d0      	strb	r0, [r2, #27]
   13052:	42b1      	cmp	r1, r6
   13054:	d100      	bne.n	13058 <LORAWAN_RxDone+0x190>
   13056:	e0a7      	b.n	131a8 <LORAWAN_RxDone+0x2e0>
   13058:	466b      	mov	r3, sp
   1305a:	2220      	movs	r2, #32
   1305c:	189b      	adds	r3, r3, r2
   1305e:	781b      	ldrb	r3, [r3, #0]
   13060:	ad10      	add	r5, sp, #64	; 0x40
   13062:	ac0b      	add	r4, sp, #44	; 0x2c
   13064:	7128      	strb	r0, [r5, #4]
   13066:	9110      	str	r1, [sp, #64]	; 0x40
   13068:	7020      	strb	r0, [r4, #0]
   1306a:	7063      	strb	r3, [r4, #1]
   1306c:	0029      	movs	r1, r5
   1306e:	2002      	movs	r0, #2
   13070:	4b6a      	ldr	r3, [pc, #424]	; (1321c <LORAWAN_RxDone+0x354>)
   13072:	4798      	blx	r3
   13074:	2808      	cmp	r0, #8
   13076:	d140      	bne.n	130fa <LORAWAN_RxDone+0x232>
   13078:	0029      	movs	r1, r5
   1307a:	0030      	movs	r0, r6
   1307c:	4b64      	ldr	r3, [pc, #400]	; (13210 <LORAWAN_RxDone+0x348>)
   1307e:	4798      	blx	r3
   13080:	ad0c      	add	r5, sp, #48	; 0x30
   13082:	0021      	movs	r1, r4
   13084:	4b62      	ldr	r3, [pc, #392]	; (13210 <LORAWAN_RxDone+0x348>)
   13086:	2012      	movs	r0, #18
   13088:	4798      	blx	r3
   1308a:	0031      	movs	r1, r6
   1308c:	002a      	movs	r2, r5
   1308e:	4e61      	ldr	r6, [pc, #388]	; (13214 <LORAWAN_RxDone+0x34c>)
   13090:	2014      	movs	r0, #20
   13092:	47b0      	blx	r6
   13094:	4c52      	ldr	r4, [pc, #328]	; (131e0 <LORAWAN_RxDone+0x318>)
   13096:	782a      	ldrb	r2, [r5, #0]
   13098:	0023      	movs	r3, r4
   1309a:	33ea      	adds	r3, #234	; 0xea
   1309c:	701a      	strb	r2, [r3, #0]
   1309e:	0023      	movs	r3, r4
   130a0:	786a      	ldrb	r2, [r5, #1]
   130a2:	2522      	movs	r5, #34	; 0x22
   130a4:	33eb      	adds	r3, #235	; 0xeb
   130a6:	701a      	strb	r2, [r3, #0]
   130a8:	4b5d      	ldr	r3, [pc, #372]	; (13220 <LORAWAN_RxDone+0x358>)
   130aa:	4798      	blx	r3
   130ac:	ab04      	add	r3, sp, #16
   130ae:	18ed      	adds	r5, r5, r3
   130b0:	231b      	movs	r3, #27
   130b2:	a904      	add	r1, sp, #16
   130b4:	185b      	adds	r3, r3, r1
   130b6:	0019      	movs	r1, r3
   130b8:	002a      	movs	r2, r5
   130ba:	201e      	movs	r0, #30
   130bc:	47b0      	blx	r6
   130be:	0023      	movs	r3, r4
   130c0:	33ff      	adds	r3, #255	; 0xff
   130c2:	7c5b      	ldrb	r3, [r3, #17]
   130c4:	079b      	lsls	r3, r3, #30
   130c6:	d508      	bpl.n	130da <LORAWAN_RxDone+0x212>
   130c8:	ab04      	add	r3, sp, #16
   130ca:	7edb      	ldrb	r3, [r3, #27]
   130cc:	a90f      	add	r1, sp, #60	; 0x3c
   130ce:	708b      	strb	r3, [r1, #2]
   130d0:	882b      	ldrh	r3, [r5, #0]
   130d2:	201e      	movs	r0, #30
   130d4:	800b      	strh	r3, [r1, #0]
   130d6:	4b4e      	ldr	r3, [pc, #312]	; (13210 <LORAWAN_RxDone+0x348>)
   130d8:	4798      	blx	r3
   130da:	231b      	movs	r3, #27
   130dc:	aa04      	add	r2, sp, #16
   130de:	189b      	adds	r3, r3, r2
   130e0:	7818      	ldrb	r0, [r3, #0]
   130e2:	2101      	movs	r1, #1
   130e4:	4b4f      	ldr	r3, [pc, #316]	; (13224 <LORAWAN_RxDone+0x35c>)
   130e6:	4798      	blx	r3
   130e8:	2204      	movs	r2, #4
   130ea:	347c      	adds	r4, #124	; 0x7c
   130ec:	7863      	ldrb	r3, [r4, #1]
   130ee:	210b      	movs	r1, #11
   130f0:	4313      	orrs	r3, r2
   130f2:	7063      	strb	r3, [r4, #1]
   130f4:	2001      	movs	r0, #1
   130f6:	4b43      	ldr	r3, [pc, #268]	; (13204 <LORAWAN_RxDone+0x33c>)
   130f8:	4798      	blx	r3
   130fa:	9b07      	ldr	r3, [sp, #28]
   130fc:	3301      	adds	r3, #1
   130fe:	b2db      	uxtb	r3, r3
   13100:	9307      	str	r3, [sp, #28]
   13102:	9b06      	ldr	r3, [sp, #24]
   13104:	3303      	adds	r3, #3
   13106:	9306      	str	r3, [sp, #24]
   13108:	9b07      	ldr	r3, [sp, #28]
   1310a:	2b05      	cmp	r3, #5
   1310c:	d18e      	bne.n	1302c <LORAWAN_RxDone+0x164>
   1310e:	2204      	movs	r2, #4
   13110:	4b33      	ldr	r3, [pc, #204]	; (131e0 <LORAWAN_RxDone+0x318>)
   13112:	2001      	movs	r0, #1
   13114:	337c      	adds	r3, #124	; 0x7c
   13116:	7859      	ldrb	r1, [r3, #1]
   13118:	430a      	orrs	r2, r1
   1311a:	705a      	strb	r2, [r3, #1]
   1311c:	210b      	movs	r1, #11
   1311e:	4b39      	ldr	r3, [pc, #228]	; (13204 <LORAWAN_RxDone+0x33c>)
   13120:	4798      	blx	r3
   13122:	4d41      	ldr	r5, [pc, #260]	; (13228 <LORAWAN_RxDone+0x360>)
   13124:	1c7e      	adds	r6, r7, #1
   13126:	3704      	adds	r7, #4
   13128:	0028      	movs	r0, r5
   1312a:	003a      	movs	r2, r7
   1312c:	0031      	movs	r1, r6
   1312e:	4b3f      	ldr	r3, [pc, #252]	; (1322c <LORAWAN_RxDone+0x364>)
   13130:	4798      	blx	r3
   13132:	2302      	movs	r3, #2
   13134:	4c2a      	ldr	r4, [pc, #168]	; (131e0 <LORAWAN_RxDone+0x318>)
   13136:	0028      	movs	r0, r5
   13138:	7563      	strb	r3, [r4, #21]
   1313a:	4a2a      	ldr	r2, [pc, #168]	; (131e4 <LORAWAN_RxDone+0x31c>)
   1313c:	3b01      	subs	r3, #1
   1313e:	2100      	movs	r1, #0
   13140:	4d3b      	ldr	r5, [pc, #236]	; (13230 <LORAWAN_RxDone+0x368>)
   13142:	47a8      	blx	r5
   13144:	2800      	cmp	r0, #0
   13146:	d003      	beq.n	13150 <LORAWAN_RxDone+0x288>
   13148:	4b2a      	ldr	r3, [pc, #168]	; (131f4 <LORAWAN_RxDone+0x32c>)
   1314a:	4798      	blx	r3
   1314c:	4b2a      	ldr	r3, [pc, #168]	; (131f8 <LORAWAN_RxDone+0x330>)
   1314e:	4798      	blx	r3
   13150:	2105      	movs	r1, #5
   13152:	4b2c      	ldr	r3, [pc, #176]	; (13204 <LORAWAN_RxDone+0x33c>)
   13154:	2001      	movs	r0, #1
   13156:	4798      	blx	r3
   13158:	4d36      	ldr	r5, [pc, #216]	; (13234 <LORAWAN_RxDone+0x36c>)
   1315a:	003a      	movs	r2, r7
   1315c:	0028      	movs	r0, r5
   1315e:	0031      	movs	r1, r6
   13160:	4b32      	ldr	r3, [pc, #200]	; (1322c <LORAWAN_RxDone+0x364>)
   13162:	4798      	blx	r3
   13164:	2301      	movs	r3, #1
   13166:	0028      	movs	r0, r5
   13168:	7163      	strb	r3, [r4, #5]
   1316a:	4a1e      	ldr	r2, [pc, #120]	; (131e4 <LORAWAN_RxDone+0x31c>)
   1316c:	18db      	adds	r3, r3, r3
   1316e:	2100      	movs	r1, #0
   13170:	4d2f      	ldr	r5, [pc, #188]	; (13230 <LORAWAN_RxDone+0x368>)
   13172:	47a8      	blx	r5
   13174:	2800      	cmp	r0, #0
   13176:	d003      	beq.n	13180 <LORAWAN_RxDone+0x2b8>
   13178:	4b1e      	ldr	r3, [pc, #120]	; (131f4 <LORAWAN_RxDone+0x32c>)
   1317a:	4798      	blx	r3
   1317c:	4b1e      	ldr	r3, [pc, #120]	; (131f8 <LORAWAN_RxDone+0x330>)
   1317e:	4798      	blx	r3
   13180:	4b20      	ldr	r3, [pc, #128]	; (13204 <LORAWAN_RxDone+0x33c>)
   13182:	2104      	movs	r1, #4
   13184:	2001      	movs	r0, #1
   13186:	4798      	blx	r3
   13188:	4b2b      	ldr	r3, [pc, #172]	; (13238 <LORAWAN_RxDone+0x370>)
   1318a:	5ce3      	ldrb	r3, [r4, r3]
   1318c:	2b00      	cmp	r3, #0
   1318e:	d017      	beq.n	131c0 <LORAWAN_RxDone+0x2f8>
   13190:	492a      	ldr	r1, [pc, #168]	; (1323c <LORAWAN_RxDone+0x374>)
   13192:	2002      	movs	r0, #2
   13194:	4c2a      	ldr	r4, [pc, #168]	; (13240 <LORAWAN_RxDone+0x378>)
   13196:	47a0      	blx	r4
   13198:	2800      	cmp	r0, #0
   1319a:	d008      	beq.n	131ae <LORAWAN_RxDone+0x2e6>
   1319c:	4b15      	ldr	r3, [pc, #84]	; (131f4 <LORAWAN_RxDone+0x32c>)
   1319e:	4798      	blx	r3
   131a0:	4b15      	ldr	r3, [pc, #84]	; (131f8 <LORAWAN_RxDone+0x330>)
   131a2:	4798      	blx	r3
   131a4:	2023      	movs	r0, #35	; 0x23
   131a6:	e6f3      	b.n	12f90 <LORAWAN_RxDone+0xc8>
   131a8:	4b1e      	ldr	r3, [pc, #120]	; (13224 <LORAWAN_RxDone+0x35c>)
   131aa:	4798      	blx	r3
   131ac:	e7a5      	b.n	130fa <LORAWAN_RxDone+0x232>
   131ae:	4925      	ldr	r1, [pc, #148]	; (13244 <LORAWAN_RxDone+0x37c>)
   131b0:	2001      	movs	r0, #1
   131b2:	47a0      	blx	r4
   131b4:	2800      	cmp	r0, #0
   131b6:	d1f1      	bne.n	1319c <LORAWAN_RxDone+0x2d4>
   131b8:	4b23      	ldr	r3, [pc, #140]	; (13248 <LORAWAN_RxDone+0x380>)
   131ba:	4798      	blx	r3
   131bc:	2008      	movs	r0, #8
   131be:	e6e7      	b.n	12f90 <LORAWAN_RxDone+0xc8>
   131c0:	0020      	movs	r0, r4
   131c2:	0021      	movs	r1, r4
   131c4:	2210      	movs	r2, #16
   131c6:	3115      	adds	r1, #21
   131c8:	4d09      	ldr	r5, [pc, #36]	; (131f0 <LORAWAN_RxDone+0x328>)
   131ca:	3035      	adds	r0, #53	; 0x35
   131cc:	47a8      	blx	r5
   131ce:	0020      	movs	r0, r4
   131d0:	1d61      	adds	r1, r4, #5
   131d2:	2210      	movs	r2, #16
   131d4:	3025      	adds	r0, #37	; 0x25
   131d6:	47a8      	blx	r5
   131d8:	e7ee      	b.n	131b8 <LORAWAN_RxDone+0x2f0>
   131da:	46c0      	nop			; (mov r8, r8)
   131dc:	20002bd8 	.word	0x20002bd8
   131e0:	20002b5c 	.word	0x20002b5c
   131e4:	20002ba1 	.word	0x20002ba1
   131e8:	20001110 	.word	0x20001110
   131ec:	0000dde9 	.word	0x0000dde9
   131f0:	00019d89 	.word	0x00019d89
   131f4:	00010985 	.word	0x00010985
   131f8:	00012861 	.word	0x00012861
   131fc:	0000dc7d 	.word	0x0000dc7d
   13200:	0000f125 	.word	0x0000f125
   13204:	0000e0dd 	.word	0x0000e0dd
   13208:	0000fe91 	.word	0x0000fe91
   1320c:	0001084d 	.word	0x0001084d
   13210:	0000da29 	.word	0x0000da29
   13214:	0000d901 	.word	0x0000d901
   13218:	20002c3b 	.word	0x20002c3b
   1321c:	0000d91d 	.word	0x0000d91d
   13220:	00012a55 	.word	0x00012a55
   13224:	00012e79 	.word	0x00012e79
   13228:	20002b71 	.word	0x20002b71
   1322c:	000101c9 	.word	0x000101c9
   13230:	0000dcf9 	.word	0x0000dcf9
   13234:	20002b61 	.word	0x20002b61
   13238:	00000221 	.word	0x00000221
   1323c:	20002b81 	.word	0x20002b81
   13240:	0000dd41 	.word	0x0000dd41
   13244:	20002b91 	.word	0x20002b91
   13248:	000100d9 	.word	0x000100d9
   1324c:	22bf      	movs	r2, #191	; 0xbf
   1324e:	3e60      	subs	r6, #96	; 0x60
   13250:	4016      	ands	r6, r2
   13252:	d000      	beq.n	13256 <LORAWAN_RxDone+0x38e>
   13254:	e2b2      	b.n	137bc <LORAWAN_RxDone+0x8f4>
   13256:	2501      	movs	r5, #1
   13258:	422b      	tst	r3, r5
   1325a:	d100      	bne.n	1325e <LORAWAN_RxDone+0x396>
   1325c:	e2ae      	b.n	137bc <LORAWAN_RxDone+0x8f4>
   1325e:	7922      	ldrb	r2, [r4, #4]
   13260:	6823      	ldr	r3, [r4, #0]
   13262:	0612      	lsls	r2, r2, #24
   13264:	0a1b      	lsrs	r3, r3, #8
   13266:	431a      	orrs	r2, r3
   13268:	0023      	movs	r3, r4
   1326a:	33d8      	adds	r3, #216	; 0xd8
   1326c:	701e      	strb	r6, [r3, #0]
   1326e:	9207      	str	r2, [sp, #28]
   13270:	7882      	ldrb	r2, [r0, #2]
   13272:	7843      	ldrb	r3, [r0, #1]
   13274:	0212      	lsls	r2, r2, #8
   13276:	431a      	orrs	r2, r3
   13278:	78c3      	ldrb	r3, [r0, #3]
   1327a:	041b      	lsls	r3, r3, #16
   1327c:	431a      	orrs	r2, r3
   1327e:	7903      	ldrb	r3, [r0, #4]
   13280:	061b      	lsls	r3, r3, #24
   13282:	4313      	orrs	r3, r2
   13284:	9a07      	ldr	r2, [sp, #28]
   13286:	429a      	cmp	r2, r3
   13288:	d100      	bne.n	1328c <LORAWAN_RxDone+0x3c4>
   1328a:	e2c8      	b.n	1381e <LORAWAN_RxDone+0x956>
   1328c:	ab04      	add	r3, sp, #16
   1328e:	3521      	adds	r5, #33	; 0x21
   13290:	18ed      	adds	r5, r5, r3
   13292:	7a02      	ldrb	r2, [r0, #8]
   13294:	0949      	lsrs	r1, r1, #5
   13296:	002b      	movs	r3, r5
   13298:	4ed7      	ldr	r6, [pc, #860]	; (135f8 <LORAWAN_RxDone+0x730>)
   1329a:	47b0      	blx	r6
   1329c:	2808      	cmp	r0, #8
   1329e:	d131      	bne.n	13304 <LORAWAN_RxDone+0x43c>
   132a0:	233c      	movs	r3, #60	; 0x3c
   132a2:	7829      	ldrb	r1, [r5, #0]
   132a4:	434b      	muls	r3, r1
   132a6:	001d      	movs	r5, r3
   132a8:	3529      	adds	r5, #41	; 0x29
   132aa:	35ff      	adds	r5, #255	; 0xff
   132ac:	192d      	adds	r5, r5, r4
   132ae:	18e4      	adds	r4, r4, r3
   132b0:	0023      	movs	r3, r4
   132b2:	33fc      	adds	r3, #252	; 0xfc
   132b4:	6a98      	ldr	r0, [r3, #40]	; 0x28
   132b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   132b8:	9308      	str	r3, [sp, #32]
   132ba:	79fb      	ldrb	r3, [r7, #7]
   132bc:	79ba      	ldrb	r2, [r7, #6]
   132be:	021b      	lsls	r3, r3, #8
   132c0:	4313      	orrs	r3, r2
   132c2:	0022      	movs	r2, r4
   132c4:	3249      	adds	r2, #73	; 0x49
   132c6:	32ff      	adds	r2, #255	; 0xff
   132c8:	8816      	ldrh	r6, [r2, #0]
   132ca:	429e      	cmp	r6, r3
   132cc:	d908      	bls.n	132e0 <LORAWAN_RxDone+0x418>
   132ce:	344b      	adds	r4, #75	; 0x4b
   132d0:	34ff      	adds	r4, #255	; 0xff
   132d2:	8823      	ldrh	r3, [r4, #0]
   132d4:	3301      	adds	r3, #1
   132d6:	8023      	strh	r3, [r4, #0]
   132d8:	79fb      	ldrb	r3, [r7, #7]
   132da:	79bc      	ldrb	r4, [r7, #6]
   132dc:	021b      	lsls	r3, r3, #8
   132de:	4323      	orrs	r3, r4
   132e0:	8013      	strh	r3, [r2, #0]
   132e2:	9b06      	ldr	r3, [sp, #24]
   132e4:	9000      	str	r0, [sp, #0]
   132e6:	1f1a      	subs	r2, r3, #4
   132e8:	233c      	movs	r3, #60	; 0x3c
   132ea:	434b      	muls	r3, r1
   132ec:	49c3      	ldr	r1, [pc, #780]	; (135fc <LORAWAN_RxDone+0x734>)
   132ee:	b2d2      	uxtb	r2, r2
   132f0:	18c9      	adds	r1, r1, r3
   132f2:	31fc      	adds	r1, #252	; 0xfc
   132f4:	2349      	movs	r3, #73	; 0x49
   132f6:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
   132f8:	2001      	movs	r0, #1
   132fa:	4cc1      	ldr	r4, [pc, #772]	; (13600 <LORAWAN_RxDone+0x738>)
   132fc:	47a0      	blx	r4
   132fe:	2301      	movs	r3, #1
   13300:	9307      	str	r3, [sp, #28]
   13302:	e2a2      	b.n	1384a <LORAWAN_RxDone+0x982>
   13304:	220e      	movs	r2, #14
   13306:	4bbf      	ldr	r3, [pc, #764]	; (13604 <LORAWAN_RxDone+0x73c>)
   13308:	781b      	ldrb	r3, [r3, #0]
   1330a:	4013      	ands	r3, r2
   1330c:	2b0a      	cmp	r3, #10
   1330e:	d008      	beq.n	13322 <LORAWAN_RxDone+0x45a>
   13310:	2b06      	cmp	r3, #6
   13312:	d001      	beq.n	13318 <LORAWAN_RxDone+0x450>
   13314:	200a      	movs	r0, #10
   13316:	e63b      	b.n	12f90 <LORAWAN_RxDone+0xc8>
   13318:	0023      	movs	r3, r4
   1331a:	33f0      	adds	r3, #240	; 0xf0
   1331c:	781b      	ldrb	r3, [r3, #0]
   1331e:	2b00      	cmp	r3, #0
   13320:	d0f8      	beq.n	13314 <LORAWAN_RxDone+0x44c>
   13322:	2220      	movs	r2, #32
   13324:	201e      	movs	r0, #30
   13326:	348c      	adds	r4, #140	; 0x8c
   13328:	7823      	ldrb	r3, [r4, #0]
   1332a:	4393      	bics	r3, r2
   1332c:	7023      	strb	r3, [r4, #0]
   1332e:	4bb6      	ldr	r3, [pc, #728]	; (13608 <LORAWAN_RxDone+0x740>)
   13330:	e61b      	b.n	12f6a <LORAWAN_RxDone+0xa2>
   13332:	0022      	movs	r2, r4
   13334:	2102      	movs	r1, #2
   13336:	e2a2      	b.n	1387e <LORAWAN_RxDone+0x9b6>
   13338:	9b08      	ldr	r3, [sp, #32]
   1333a:	3408      	adds	r4, #8
   1333c:	67e3      	str	r3, [r4, #124]	; 0x7c
   1333e:	e2e1      	b.n	13904 <LORAWAN_RxDone+0xa3c>
   13340:	9b07      	ldr	r3, [sp, #28]
   13342:	2b00      	cmp	r3, #0
   13344:	d00a      	beq.n	1335c <LORAWAN_RxDone+0x494>
   13346:	2322      	movs	r3, #34	; 0x22
   13348:	aa04      	add	r2, sp, #16
   1334a:	189b      	adds	r3, r3, r2
   1334c:	781b      	ldrb	r3, [r3, #0]
   1334e:	003a      	movs	r2, r7
   13350:	9906      	ldr	r1, [sp, #24]
   13352:	0038      	movs	r0, r7
   13354:	4cad      	ldr	r4, [pc, #692]	; (1360c <LORAWAN_RxDone+0x744>)
   13356:	47a0      	blx	r4
   13358:	2001      	movs	r0, #1
   1335a:	e619      	b.n	12f90 <LORAWAN_RxDone+0xc8>
   1335c:	4ca7      	ldr	r4, [pc, #668]	; (135fc <LORAWAN_RxDone+0x734>)
   1335e:	466a      	mov	r2, sp
   13360:	0023      	movs	r3, r4
   13362:	7f12      	ldrb	r2, [r2, #28]
   13364:	33db      	adds	r3, #219	; 0xdb
   13366:	701a      	strb	r2, [r3, #0]
   13368:	797b      	ldrb	r3, [r7, #5]
   1336a:	2b7f      	cmp	r3, #127	; 0x7f
   1336c:	d909      	bls.n	13382 <LORAWAN_RxDone+0x4ba>
   1336e:	0022      	movs	r2, r4
   13370:	2320      	movs	r3, #32
   13372:	327c      	adds	r2, #124	; 0x7c
   13374:	7811      	ldrb	r1, [r2, #0]
   13376:	2001      	movs	r0, #1
   13378:	430b      	orrs	r3, r1
   1337a:	7013      	strb	r3, [r2, #0]
   1337c:	210b      	movs	r1, #11
   1337e:	4ba4      	ldr	r3, [pc, #656]	; (13610 <LORAWAN_RxDone+0x748>)
   13380:	4798      	blx	r3
   13382:	797b      	ldrb	r3, [r7, #5]
   13384:	06db      	lsls	r3, r3, #27
   13386:	d505      	bpl.n	13394 <LORAWAN_RxDone+0x4cc>
   13388:	0022      	movs	r2, r4
   1338a:	2308      	movs	r3, #8
   1338c:	328c      	adds	r2, #140	; 0x8c
   1338e:	7811      	ldrb	r1, [r2, #0]
   13390:	430b      	orrs	r3, r1
   13392:	7013      	strb	r3, [r2, #0]
   13394:	797b      	ldrb	r3, [r7, #5]
   13396:	065b      	lsls	r3, r3, #25
   13398:	d505      	bpl.n	133a6 <LORAWAN_RxDone+0x4de>
   1339a:	0022      	movs	r2, r4
   1339c:	2310      	movs	r3, #16
   1339e:	328c      	adds	r2, #140	; 0x8c
   133a0:	7811      	ldrb	r1, [r2, #0]
   133a2:	430b      	orrs	r3, r1
   133a4:	7013      	strb	r3, [r2, #0]
   133a6:	221f      	movs	r2, #31
   133a8:	783b      	ldrb	r3, [r7, #0]
   133aa:	4393      	bics	r3, r2
   133ac:	2ba0      	cmp	r3, #160	; 0xa0
   133ae:	d105      	bne.n	133bc <LORAWAN_RxDone+0x4f4>
   133b0:	0022      	movs	r2, r4
   133b2:	328c      	adds	r2, #140	; 0x8c
   133b4:	7811      	ldrb	r1, [r2, #0]
   133b6:	3b9e      	subs	r3, #158	; 0x9e
   133b8:	430b      	orrs	r3, r1
   133ba:	7013      	strb	r3, [r2, #0]
   133bc:	7979      	ldrb	r1, [r7, #5]
   133be:	070b      	lsls	r3, r1, #28
   133c0:	d100      	bne.n	133c4 <LORAWAN_RxDone+0x4fc>
   133c2:	e0da      	b.n	1357a <LORAWAN_RxDone+0x6b2>
   133c4:	0709      	lsls	r1, r1, #28
   133c6:	0f09      	lsrs	r1, r1, #28
   133c8:	187b      	adds	r3, r7, r1
   133ca:	7a1b      	ldrb	r3, [r3, #8]
   133cc:	2b00      	cmp	r3, #0
   133ce:	d100      	bne.n	133d2 <LORAWAN_RxDone+0x50a>
   133d0:	e0aa      	b.n	13528 <LORAWAN_RxDone+0x660>
   133d2:	0038      	movs	r0, r7
   133d4:	4b8f      	ldr	r3, [pc, #572]	; (13614 <LORAWAN_RxDone+0x74c>)
   133d6:	3008      	adds	r0, #8
   133d8:	4798      	blx	r3
   133da:	2301      	movs	r3, #1
   133dc:	0006      	movs	r6, r0
   133de:	9307      	str	r3, [sp, #28]
   133e0:	7978      	ldrb	r0, [r7, #5]
   133e2:	9906      	ldr	r1, [sp, #24]
   133e4:	0702      	lsls	r2, r0, #28
   133e6:	0f12      	lsrs	r2, r2, #28
   133e8:	0013      	movs	r3, r2
   133ea:	330c      	adds	r3, #12
   133ec:	4299      	cmp	r1, r3
   133ee:	d100      	bne.n	133f2 <LORAWAN_RxDone+0x52a>
   133f0:	e0fa      	b.n	135e8 <LORAWAN_RxDone+0x720>
   133f2:	7833      	ldrb	r3, [r6, #0]
   133f4:	1a89      	subs	r1, r1, r2
   133f6:	b2c9      	uxtb	r1, r1
   133f8:	9308      	str	r3, [sp, #32]
   133fa:	000b      	movs	r3, r1
   133fc:	3219      	adds	r2, #25
   133fe:	3b0c      	subs	r3, #12
   13400:	4694      	mov	ip, r2
   13402:	9a08      	ldr	r2, [sp, #32]
   13404:	b2db      	uxtb	r3, r3
   13406:	9306      	str	r3, [sp, #24]
   13408:	1c75      	adds	r5, r6, #1
   1340a:	4b7c      	ldr	r3, [pc, #496]	; (135fc <LORAWAN_RxDone+0x734>)
   1340c:	2a00      	cmp	r2, #0
   1340e:	d100      	bne.n	13412 <LORAWAN_RxDone+0x54a>
   13410:	e0b6      	b.n	13580 <LORAWAN_RxDone+0x6b8>
   13412:	681a      	ldr	r2, [r3, #0]
   13414:	0018      	movs	r0, r3
   13416:	791b      	ldrb	r3, [r3, #4]
   13418:	0a14      	lsrs	r4, r2, #8
   1341a:	061b      	lsls	r3, r3, #24
   1341c:	4323      	orrs	r3, r4
   1341e:	9304      	str	r3, [sp, #16]
   13420:	4b7d      	ldr	r3, [pc, #500]	; (13618 <LORAWAN_RxDone+0x750>)
   13422:	2201      	movs	r2, #1
   13424:	9303      	str	r3, [sp, #12]
   13426:	4663      	mov	r3, ip
   13428:	9302      	str	r3, [sp, #8]
   1342a:	4b7c      	ldr	r3, [pc, #496]	; (1361c <LORAWAN_RxDone+0x754>)
   1342c:	3008      	adds	r0, #8
   1342e:	390d      	subs	r1, #13
   13430:	9201      	str	r2, [sp, #4]
   13432:	9300      	str	r3, [sp, #0]
   13434:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
   13436:	b2c9      	uxtb	r1, r1
   13438:	0028      	movs	r0, r5
   1343a:	4c79      	ldr	r4, [pc, #484]	; (13620 <LORAWAN_RxDone+0x758>)
   1343c:	47a0      	blx	r4
   1343e:	2800      	cmp	r0, #0
   13440:	d004      	beq.n	1344c <LORAWAN_RxDone+0x584>
   13442:	4b78      	ldr	r3, [pc, #480]	; (13624 <LORAWAN_RxDone+0x75c>)
   13444:	4798      	blx	r3
   13446:	201f      	movs	r0, #31
   13448:	4b6f      	ldr	r3, [pc, #444]	; (13608 <LORAWAN_RxDone+0x740>)
   1344a:	4798      	blx	r3
   1344c:	4c6b      	ldr	r4, [pc, #428]	; (135fc <LORAWAN_RxDone+0x734>)
   1344e:	2300      	movs	r3, #0
   13450:	0022      	movs	r2, r4
   13452:	32c2      	adds	r2, #194	; 0xc2
   13454:	8013      	strh	r3, [r2, #0]
   13456:	0022      	movs	r2, r4
   13458:	32ed      	adds	r2, #237	; 0xed
   1345a:	7013      	strb	r3, [r2, #0]
   1345c:	0022      	movs	r2, r4
   1345e:	2110      	movs	r1, #16
   13460:	328c      	adds	r2, #140	; 0x8c
   13462:	7813      	ldrb	r3, [r2, #0]
   13464:	438b      	bics	r3, r1
   13466:	7013      	strb	r3, [r2, #0]
   13468:	0023      	movs	r3, r4
   1346a:	2201      	movs	r2, #1
   1346c:	337c      	adds	r3, #124	; 0x7c
   1346e:	7859      	ldrb	r1, [r3, #1]
   13470:	430a      	orrs	r2, r1
   13472:	705a      	strb	r2, [r3, #1]
   13474:	220e      	movs	r2, #14
   13476:	781b      	ldrb	r3, [r3, #0]
   13478:	4013      	ands	r3, r2
   1347a:	2b06      	cmp	r3, #6
   1347c:	d109      	bne.n	13492 <LORAWAN_RxDone+0x5ca>
   1347e:	0023      	movs	r3, r4
   13480:	33f4      	adds	r3, #244	; 0xf4
   13482:	781b      	ldrb	r3, [r3, #0]
   13484:	2b01      	cmp	r3, #1
   13486:	d104      	bne.n	13492 <LORAWAN_RxDone+0x5ca>
   13488:	0023      	movs	r3, r4
   1348a:	33e5      	adds	r3, #229	; 0xe5
   1348c:	7818      	ldrb	r0, [r3, #0]
   1348e:	4b66      	ldr	r3, [pc, #408]	; (13628 <LORAWAN_RxDone+0x760>)
   13490:	4798      	blx	r3
   13492:	0025      	movs	r5, r4
   13494:	2201      	movs	r2, #1
   13496:	358c      	adds	r5, #140	; 0x8c
   13498:	782b      	ldrb	r3, [r5, #0]
   1349a:	4213      	tst	r3, r2
   1349c:	d100      	bne.n	134a0 <LORAWAN_RxDone+0x5d8>
   1349e:	e10f      	b.n	136c0 <LORAWAN_RxDone+0x7f8>
   134a0:	797b      	ldrb	r3, [r7, #5]
   134a2:	321f      	adds	r2, #31
   134a4:	4213      	tst	r3, r2
   134a6:	d100      	bne.n	134aa <LORAWAN_RxDone+0x5e2>
   134a8:	e0f0      	b.n	1368c <LORAWAN_RxDone+0x7c4>
   134aa:	4b60      	ldr	r3, [pc, #384]	; (1362c <LORAWAN_RxDone+0x764>)
   134ac:	4798      	blx	r3
   134ae:	0023      	movs	r3, r4
   134b0:	2101      	movs	r1, #1
   134b2:	337c      	adds	r3, #124	; 0x7c
   134b4:	785a      	ldrb	r2, [r3, #1]
   134b6:	438a      	bics	r2, r1
   134b8:	705a      	strb	r2, [r3, #1]
   134ba:	9a08      	ldr	r2, [sp, #32]
   134bc:	2a00      	cmp	r2, #0
   134be:	d100      	bne.n	134c2 <LORAWAN_RxDone+0x5fa>
   134c0:	e0c4      	b.n	1364c <LORAWAN_RxDone+0x784>
   134c2:	9a06      	ldr	r2, [sp, #24]
   134c4:	0031      	movs	r1, r6
   134c6:	0038      	movs	r0, r7
   134c8:	4b59      	ldr	r3, [pc, #356]	; (13630 <LORAWAN_RxDone+0x768>)
   134ca:	4798      	blx	r3
   134cc:	4b4d      	ldr	r3, [pc, #308]	; (13604 <LORAWAN_RxDone+0x73c>)
   134ce:	4d4b      	ldr	r5, [pc, #300]	; (135fc <LORAWAN_RxDone+0x734>)
   134d0:	781b      	ldrb	r3, [r3, #0]
   134d2:	06db      	lsls	r3, r3, #27
   134d4:	d400      	bmi.n	134d8 <LORAWAN_RxDone+0x610>
   134d6:	e168      	b.n	137aa <LORAWAN_RxDone+0x8e2>
   134d8:	2220      	movs	r2, #32
   134da:	4b56      	ldr	r3, [pc, #344]	; (13634 <LORAWAN_RxDone+0x76c>)
   134dc:	781b      	ldrb	r3, [r3, #0]
   134de:	401a      	ands	r2, r3
   134e0:	9206      	str	r2, [sp, #24]
   134e2:	d000      	beq.n	134e6 <LORAWAN_RxDone+0x61e>
   134e4:	e161      	b.n	137aa <LORAWAN_RxDone+0x8e2>
   134e6:	320a      	adds	r2, #10
   134e8:	4213      	tst	r3, r2
   134ea:	d100      	bne.n	134ee <LORAWAN_RxDone+0x626>
   134ec:	e15d      	b.n	137aa <LORAWAN_RxDone+0x8e2>
   134ee:	002b      	movs	r3, r5
   134f0:	33ec      	adds	r3, #236	; 0xec
   134f2:	781b      	ldrb	r3, [r3, #0]
   134f4:	a90f      	add	r1, sp, #60	; 0x3c
   134f6:	704b      	strb	r3, [r1, #1]
   134f8:	002e      	movs	r6, r5
   134fa:	2301      	movs	r3, #1
   134fc:	36df      	adds	r6, #223	; 0xdf
   134fe:	700b      	strb	r3, [r1, #0]
   13500:	7833      	ldrb	r3, [r6, #0]
   13502:	aa0e      	add	r2, sp, #56	; 0x38
   13504:	2030      	movs	r0, #48	; 0x30
   13506:	4f4c      	ldr	r7, [pc, #304]	; (13638 <LORAWAN_RxDone+0x770>)
   13508:	708b      	strb	r3, [r1, #2]
   1350a:	47b8      	blx	r7
   1350c:	9007      	str	r0, [sp, #28]
   1350e:	2808      	cmp	r0, #8
   13510:	d000      	beq.n	13514 <LORAWAN_RxDone+0x64c>
   13512:	e103      	b.n	1371c <LORAWAN_RxDone+0x854>
   13514:	4b49      	ldr	r3, [pc, #292]	; (1363c <LORAWAN_RxDone+0x774>)
   13516:	9806      	ldr	r0, [sp, #24]
   13518:	4798      	blx	r3
   1351a:	4b46      	ldr	r3, [pc, #280]	; (13634 <LORAWAN_RxDone+0x76c>)
   1351c:	9a07      	ldr	r2, [sp, #28]
   1351e:	781b      	ldrb	r3, [r3, #0]
   13520:	4393      	bics	r3, r2
   13522:	4a44      	ldr	r2, [pc, #272]	; (13634 <LORAWAN_RxDone+0x76c>)
   13524:	7013      	strb	r3, [r2, #0]
   13526:	e717      	b.n	13358 <LORAWAN_RxDone+0x490>
   13528:	0023      	movs	r3, r4
   1352a:	33f4      	adds	r3, #244	; 0xf4
   1352c:	781b      	ldrb	r3, [r3, #0]
   1352e:	2b01      	cmp	r3, #1
   13530:	d108      	bne.n	13544 <LORAWAN_RxDone+0x67c>
   13532:	0023      	movs	r3, r4
   13534:	220e      	movs	r2, #14
   13536:	337c      	adds	r3, #124	; 0x7c
   13538:	781b      	ldrb	r3, [r3, #0]
   1353a:	4013      	ands	r3, r2
   1353c:	2b06      	cmp	r3, #6
   1353e:	d101      	bne.n	13544 <LORAWAN_RxDone+0x67c>
   13540:	4b3f      	ldr	r3, [pc, #252]	; (13640 <LORAWAN_RxDone+0x778>)
   13542:	4798      	blx	r3
   13544:	493f      	ldr	r1, [pc, #252]	; (13644 <LORAWAN_RxDone+0x77c>)
   13546:	784a      	ldrb	r2, [r1, #1]
   13548:	780b      	ldrb	r3, [r1, #0]
   1354a:	0212      	lsls	r2, r2, #8
   1354c:	431a      	orrs	r2, r3
   1354e:	788b      	ldrb	r3, [r1, #2]
   13550:	041b      	lsls	r3, r3, #16
   13552:	431a      	orrs	r2, r3
   13554:	78cb      	ldrb	r3, [r1, #3]
   13556:	061b      	lsls	r3, r3, #24
   13558:	4313      	orrs	r3, r2
   1355a:	d008      	beq.n	1356e <LORAWAN_RxDone+0x6a6>
   1355c:	0022      	movs	r2, r4
   1355e:	2120      	movs	r1, #32
   13560:	328c      	adds	r2, #140	; 0x8c
   13562:	7813      	ldrb	r3, [r2, #0]
   13564:	201e      	movs	r0, #30
   13566:	438b      	bics	r3, r1
   13568:	7013      	strb	r3, [r2, #0]
   1356a:	4b27      	ldr	r3, [pc, #156]	; (13608 <LORAWAN_RxDone+0x740>)
   1356c:	4798      	blx	r3
   1356e:	2300      	movs	r3, #0
   13570:	34d8      	adds	r4, #216	; 0xd8
   13572:	7023      	strb	r3, [r4, #0]
   13574:	4b2b      	ldr	r3, [pc, #172]	; (13624 <LORAWAN_RxDone+0x75c>)
   13576:	4798      	blx	r3
   13578:	e6ee      	b.n	13358 <LORAWAN_RxDone+0x490>
   1357a:	003e      	movs	r6, r7
   1357c:	3608      	adds	r6, #8
   1357e:	e72f      	b.n	133e0 <LORAWAN_RxDone+0x518>
   13580:	9a06      	ldr	r2, [sp, #24]
   13582:	2a00      	cmp	r2, #0
   13584:	d034      	beq.n	135f0 <LORAWAN_RxDone+0x728>
   13586:	0702      	lsls	r2, r0, #28
   13588:	d128      	bne.n	135dc <LORAWAN_RxDone+0x714>
   1358a:	390d      	subs	r1, #13
   1358c:	681a      	ldr	r2, [r3, #0]
   1358e:	b2cc      	uxtb	r4, r1
   13590:	0019      	movs	r1, r3
   13592:	791b      	ldrb	r3, [r3, #4]
   13594:	0a10      	lsrs	r0, r2, #8
   13596:	061b      	lsls	r3, r3, #24
   13598:	4303      	orrs	r3, r0
   1359a:	9304      	str	r3, [sp, #16]
   1359c:	4b1e      	ldr	r3, [pc, #120]	; (13618 <LORAWAN_RxDone+0x750>)
   1359e:	3108      	adds	r1, #8
   135a0:	9303      	str	r3, [sp, #12]
   135a2:	4663      	mov	r3, ip
   135a4:	9302      	str	r3, [sp, #8]
   135a6:	2302      	movs	r3, #2
   135a8:	9301      	str	r3, [sp, #4]
   135aa:	4b27      	ldr	r3, [pc, #156]	; (13648 <LORAWAN_RxDone+0x780>)
   135ac:	2201      	movs	r2, #1
   135ae:	9300      	str	r3, [sp, #0]
   135b0:	6fcb      	ldr	r3, [r1, #124]	; 0x7c
   135b2:	0028      	movs	r0, r5
   135b4:	0021      	movs	r1, r4
   135b6:	4e1a      	ldr	r6, [pc, #104]	; (13620 <LORAWAN_RxDone+0x758>)
   135b8:	47b0      	blx	r6
   135ba:	2800      	cmp	r0, #0
   135bc:	d004      	beq.n	135c8 <LORAWAN_RxDone+0x700>
   135be:	4b19      	ldr	r3, [pc, #100]	; (13624 <LORAWAN_RxDone+0x75c>)
   135c0:	4798      	blx	r3
   135c2:	201f      	movs	r0, #31
   135c4:	4b10      	ldr	r3, [pc, #64]	; (13608 <LORAWAN_RxDone+0x740>)
   135c6:	4798      	blx	r3
   135c8:	4b12      	ldr	r3, [pc, #72]	; (13614 <LORAWAN_RxDone+0x74c>)
   135ca:	0021      	movs	r1, r4
   135cc:	0028      	movs	r0, r5
   135ce:	4798      	blx	r3
   135d0:	2300      	movs	r3, #0
   135d2:	9306      	str	r3, [sp, #24]
   135d4:	3301      	adds	r3, #1
   135d6:	9307      	str	r3, [sp, #28]
   135d8:	2600      	movs	r6, #0
   135da:	e737      	b.n	1344c <LORAWAN_RxDone+0x584>
   135dc:	001a      	movs	r2, r3
   135de:	32f4      	adds	r2, #244	; 0xf4
   135e0:	7812      	ldrb	r2, [r2, #0]
   135e2:	2a01      	cmp	r2, #1
   135e4:	d1ae      	bne.n	13544 <LORAWAN_RxDone+0x67c>
   135e6:	e7a5      	b.n	13534 <LORAWAN_RxDone+0x66c>
   135e8:	2600      	movs	r6, #0
   135ea:	9608      	str	r6, [sp, #32]
   135ec:	9606      	str	r6, [sp, #24]
   135ee:	e72d      	b.n	1344c <LORAWAN_RxDone+0x584>
   135f0:	9b06      	ldr	r3, [sp, #24]
   135f2:	9308      	str	r3, [sp, #32]
   135f4:	001e      	movs	r6, r3
   135f6:	e729      	b.n	1344c <LORAWAN_RxDone+0x584>
   135f8:	000144ad 	.word	0x000144ad
   135fc:	20002b5c 	.word	0x20002b5c
   13600:	00010205 	.word	0x00010205
   13604:	20002bd8 	.word	0x20002bd8
   13608:	0001148d 	.word	0x0001148d
   1360c:	00014521 	.word	0x00014521
   13610:	0000e0dd 	.word	0x0000e0dd
   13614:	00012c11 	.word	0x00012c11
   13618:	20002eac 	.word	0x20002eac
   1361c:	20002b91 	.word	0x20002b91
   13620:	000113cd 	.word	0x000113cd
   13624:	00012861 	.word	0x00012861
   13628:	0000f125 	.word	0x0000f125
   1362c:	00010931 	.word	0x00010931
   13630:	0001187d 	.word	0x0001187d
   13634:	20002be8 	.word	0x20002be8
   13638:	0000d901 	.word	0x0000d901
   1363c:	00010545 	.word	0x00010545
   13640:	0001029d 	.word	0x0001029d
   13644:	20002ea4 	.word	0x20002ea4
   13648:	20002b81 	.word	0x20002b81
   1364c:	2120      	movs	r1, #32
   1364e:	782a      	ldrb	r2, [r5, #0]
   13650:	438a      	bics	r2, r1
   13652:	702a      	strb	r2, [r5, #0]
   13654:	0022      	movs	r2, r4
   13656:	32f4      	adds	r2, #244	; 0xf4
   13658:	7812      	ldrb	r2, [r2, #0]
   1365a:	2a01      	cmp	r2, #1
   1365c:	d10e      	bne.n	1367c <LORAWAN_RxDone+0x7b4>
   1365e:	781a      	ldrb	r2, [r3, #0]
   13660:	3912      	subs	r1, #18
   13662:	438a      	bics	r2, r1
   13664:	701a      	strb	r2, [r3, #0]
   13666:	2385      	movs	r3, #133	; 0x85
   13668:	4aa7      	ldr	r2, [pc, #668]	; (13908 <LORAWAN_RxDone+0xa40>)
   1366a:	009b      	lsls	r3, r3, #2
   1366c:	5cd3      	ldrb	r3, [r2, r3]
   1366e:	2b00      	cmp	r3, #0
   13670:	d000      	beq.n	13674 <LORAWAN_RxDone+0x7ac>
   13672:	e72b      	b.n	134cc <LORAWAN_RxDone+0x604>
   13674:	2008      	movs	r0, #8
   13676:	4ba5      	ldr	r3, [pc, #660]	; (1390c <LORAWAN_RxDone+0xa44>)
   13678:	4798      	blx	r3
   1367a:	e727      	b.n	134cc <LORAWAN_RxDone+0x604>
   1367c:	2a04      	cmp	r2, #4
   1367e:	d1f2      	bne.n	13666 <LORAWAN_RxDone+0x79e>
   13680:	0023      	movs	r3, r4
   13682:	33e8      	adds	r3, #232	; 0xe8
   13684:	7818      	ldrb	r0, [r3, #0]
   13686:	4ba2      	ldr	r3, [pc, #648]	; (13910 <LORAWAN_RxDone+0xa48>)
   13688:	4798      	blx	r3
   1368a:	e7ec      	b.n	13666 <LORAWAN_RxDone+0x79e>
   1368c:	9b07      	ldr	r3, [sp, #28]
   1368e:	2b00      	cmp	r3, #0
   13690:	d013      	beq.n	136ba <LORAWAN_RxDone+0x7f2>
   13692:	0023      	movs	r3, r4
   13694:	33f4      	adds	r3, #244	; 0xf4
   13696:	781e      	ldrb	r6, [r3, #0]
   13698:	2e01      	cmp	r6, #1
   1369a:	d10e      	bne.n	136ba <LORAWAN_RxDone+0x7f2>
   1369c:	4b9d      	ldr	r3, [pc, #628]	; (13914 <LORAWAN_RxDone+0xa4c>)
   1369e:	4798      	blx	r3
   136a0:	0022      	movs	r2, r4
   136a2:	327c      	adds	r2, #124	; 0x7c
   136a4:	7853      	ldrb	r3, [r2, #1]
   136a6:	43b3      	bics	r3, r6
   136a8:	7053      	strb	r3, [r2, #1]
   136aa:	2220      	movs	r2, #32
   136ac:	782b      	ldrb	r3, [r5, #0]
   136ae:	4393      	bics	r3, r2
   136b0:	702b      	strb	r3, [r5, #0]
   136b2:	2385      	movs	r3, #133	; 0x85
   136b4:	009b      	lsls	r3, r3, #2
   136b6:	5ce3      	ldrb	r3, [r4, r3]
   136b8:	e7d9      	b.n	1366e <LORAWAN_RxDone+0x7a6>
   136ba:	4b97      	ldr	r3, [pc, #604]	; (13918 <LORAWAN_RxDone+0xa50>)
   136bc:	4798      	blx	r3
   136be:	e705      	b.n	134cc <LORAWAN_RxDone+0x604>
   136c0:	9a08      	ldr	r2, [sp, #32]
   136c2:	2a00      	cmp	r2, #0
   136c4:	d00b      	beq.n	136de <LORAWAN_RxDone+0x816>
   136c6:	9a06      	ldr	r2, [sp, #24]
   136c8:	0031      	movs	r1, r6
   136ca:	0038      	movs	r0, r7
   136cc:	4b93      	ldr	r3, [pc, #588]	; (1391c <LORAWAN_RxDone+0xa54>)
   136ce:	4798      	blx	r3
   136d0:	0022      	movs	r2, r4
   136d2:	2101      	movs	r1, #1
   136d4:	327c      	adds	r2, #124	; 0x7c
   136d6:	7853      	ldrb	r3, [r2, #1]
   136d8:	438b      	bics	r3, r1
   136da:	7053      	strb	r3, [r2, #1]
   136dc:	e6f6      	b.n	134cc <LORAWAN_RxDone+0x604>
   136de:	2220      	movs	r2, #32
   136e0:	4393      	bics	r3, r2
   136e2:	702b      	strb	r3, [r5, #0]
   136e4:	0023      	movs	r3, r4
   136e6:	33f4      	adds	r3, #244	; 0xf4
   136e8:	781b      	ldrb	r3, [r3, #0]
   136ea:	2b01      	cmp	r3, #1
   136ec:	d10e      	bne.n	1370c <LORAWAN_RxDone+0x844>
   136ee:	0022      	movs	r2, r4
   136f0:	210e      	movs	r1, #14
   136f2:	327c      	adds	r2, #124	; 0x7c
   136f4:	7813      	ldrb	r3, [r2, #0]
   136f6:	438b      	bics	r3, r1
   136f8:	7013      	strb	r3, [r2, #0]
   136fa:	2385      	movs	r3, #133	; 0x85
   136fc:	009b      	lsls	r3, r3, #2
   136fe:	5ce3      	ldrb	r3, [r4, r3]
   13700:	2b00      	cmp	r3, #0
   13702:	d1e5      	bne.n	136d0 <LORAWAN_RxDone+0x808>
   13704:	2008      	movs	r0, #8
   13706:	4b81      	ldr	r3, [pc, #516]	; (1390c <LORAWAN_RxDone+0xa44>)
   13708:	4798      	blx	r3
   1370a:	e7e1      	b.n	136d0 <LORAWAN_RxDone+0x808>
   1370c:	2b04      	cmp	r3, #4
   1370e:	d1f4      	bne.n	136fa <LORAWAN_RxDone+0x832>
   13710:	0023      	movs	r3, r4
   13712:	33e8      	adds	r3, #232	; 0xe8
   13714:	7818      	ldrb	r0, [r3, #0]
   13716:	4b7e      	ldr	r3, [pc, #504]	; (13910 <LORAWAN_RxDone+0xa48>)
   13718:	4798      	blx	r3
   1371a:	e7ee      	b.n	136fa <LORAWAN_RxDone+0x832>
   1371c:	35ff      	adds	r5, #255	; 0xff
   1371e:	7c6b      	ldrb	r3, [r5, #17]
   13720:	079a      	lsls	r2, r3, #30
   13722:	d520      	bpl.n	13766 <LORAWAN_RxDone+0x89e>
   13724:	aa10      	add	r2, sp, #64	; 0x40
   13726:	0031      	movs	r1, r6
   13728:	2026      	movs	r0, #38	; 0x26
   1372a:	47b8      	blx	r7
   1372c:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1372e:	1c5a      	adds	r2, r3, #1
   13730:	d001      	beq.n	13736 <LORAWAN_RxDone+0x86e>
   13732:	3314      	adds	r3, #20
   13734:	9310      	str	r3, [sp, #64]	; 0x40
   13736:	0021      	movs	r1, r4
   13738:	220e      	movs	r2, #14
   1373a:	317c      	adds	r1, #124	; 0x7c
   1373c:	780b      	ldrb	r3, [r1, #0]
   1373e:	4393      	bics	r3, r2
   13740:	001a      	movs	r2, r3
   13742:	230c      	movs	r3, #12
   13744:	4313      	orrs	r3, r2
   13746:	700b      	strb	r3, [r1, #0]
   13748:	4b75      	ldr	r3, [pc, #468]	; (13920 <LORAWAN_RxDone+0xa58>)
   1374a:	9a10      	ldr	r2, [sp, #64]	; 0x40
   1374c:	5ce3      	ldrb	r3, [r4, r3]
   1374e:	21fa      	movs	r1, #250	; 0xfa
   13750:	1ad3      	subs	r3, r2, r3
   13752:	2200      	movs	r2, #0
   13754:	0089      	lsls	r1, r1, #2
   13756:	4359      	muls	r1, r3
   13758:	34e6      	adds	r4, #230	; 0xe6
   1375a:	4b72      	ldr	r3, [pc, #456]	; (13924 <LORAWAN_RxDone+0xa5c>)
   1375c:	7820      	ldrb	r0, [r4, #0]
   1375e:	9200      	str	r2, [sp, #0]
   13760:	4c71      	ldr	r4, [pc, #452]	; (13928 <LORAWAN_RxDone+0xa60>)
   13762:	47a0      	blx	r4
   13764:	e5f8      	b.n	13358 <LORAWAN_RxDone+0x490>
   13766:	075b      	lsls	r3, r3, #29
   13768:	d400      	bmi.n	1376c <LORAWAN_RxDone+0x8a4>
   1376a:	e5f5      	b.n	13358 <LORAWAN_RxDone+0x490>
   1376c:	aa10      	add	r2, sp, #64	; 0x40
   1376e:	0031      	movs	r1, r6
   13770:	2033      	movs	r0, #51	; 0x33
   13772:	47b8      	blx	r7
   13774:	220e      	movs	r2, #14
   13776:	4b6d      	ldr	r3, [pc, #436]	; (1392c <LORAWAN_RxDone+0xa64>)
   13778:	781b      	ldrb	r3, [r3, #0]
   1377a:	4393      	bics	r3, r2
   1377c:	001a      	movs	r2, r3
   1377e:	230c      	movs	r3, #12
   13780:	4313      	orrs	r3, r2
   13782:	4a6a      	ldr	r2, [pc, #424]	; (1392c <LORAWAN_RxDone+0xa64>)
   13784:	7013      	strb	r3, [r2, #0]
   13786:	9b10      	ldr	r3, [sp, #64]	; 0x40
   13788:	1c5a      	adds	r2, r3, #1
   1378a:	d001      	beq.n	13790 <LORAWAN_RxDone+0x8c8>
   1378c:	3301      	adds	r3, #1
   1378e:	9310      	str	r3, [sp, #64]	; 0x40
   13790:	4b63      	ldr	r3, [pc, #396]	; (13920 <LORAWAN_RxDone+0xa58>)
   13792:	9a10      	ldr	r2, [sp, #64]	; 0x40
   13794:	5ce3      	ldrb	r3, [r4, r3]
   13796:	21fa      	movs	r1, #250	; 0xfa
   13798:	1ad3      	subs	r3, r2, r3
   1379a:	2200      	movs	r2, #0
   1379c:	0089      	lsls	r1, r1, #2
   1379e:	34e9      	adds	r4, #233	; 0xe9
   137a0:	4359      	muls	r1, r3
   137a2:	7820      	ldrb	r0, [r4, #0]
   137a4:	4b62      	ldr	r3, [pc, #392]	; (13930 <LORAWAN_RxDone+0xa68>)
   137a6:	9200      	str	r2, [sp, #0]
   137a8:	e7da      	b.n	13760 <LORAWAN_RxDone+0x898>
   137aa:	35f4      	adds	r5, #244	; 0xf4
   137ac:	782b      	ldrb	r3, [r5, #0]
   137ae:	2b04      	cmp	r3, #4
   137b0:	d000      	beq.n	137b4 <LORAWAN_RxDone+0x8ec>
   137b2:	e5d1      	b.n	13358 <LORAWAN_RxDone+0x490>
   137b4:	0038      	movs	r0, r7
   137b6:	4b5f      	ldr	r3, [pc, #380]	; (13934 <LORAWAN_RxDone+0xa6c>)
   137b8:	4798      	blx	r3
   137ba:	e5cd      	b.n	13358 <LORAWAN_RxDone+0x490>
   137bc:	220e      	movs	r2, #14
   137be:	4013      	ands	r3, r2
   137c0:	2b0a      	cmp	r3, #10
   137c2:	d008      	beq.n	137d6 <LORAWAN_RxDone+0x90e>
   137c4:	2b06      	cmp	r3, #6
   137c6:	d000      	beq.n	137ca <LORAWAN_RxDone+0x902>
   137c8:	e5a4      	b.n	13314 <LORAWAN_RxDone+0x44c>
   137ca:	0023      	movs	r3, r4
   137cc:	33f0      	adds	r3, #240	; 0xf0
   137ce:	781b      	ldrb	r3, [r3, #0]
   137d0:	2b00      	cmp	r3, #0
   137d2:	d100      	bne.n	137d6 <LORAWAN_RxDone+0x90e>
   137d4:	e59e      	b.n	13314 <LORAWAN_RxDone+0x44c>
   137d6:	2220      	movs	r2, #32
   137d8:	348c      	adds	r4, #140	; 0x8c
   137da:	7823      	ldrb	r3, [r4, #0]
   137dc:	2019      	movs	r0, #25
   137de:	4393      	bics	r3, r2
   137e0:	7023      	strb	r3, [r4, #0]
   137e2:	e5a4      	b.n	1332e <LORAWAN_RxDone+0x466>
   137e4:	4954      	ldr	r1, [pc, #336]	; (13938 <LORAWAN_RxDone+0xa70>)
   137e6:	784a      	ldrb	r2, [r1, #1]
   137e8:	780b      	ldrb	r3, [r1, #0]
   137ea:	0212      	lsls	r2, r2, #8
   137ec:	431a      	orrs	r2, r3
   137ee:	788b      	ldrb	r3, [r1, #2]
   137f0:	041b      	lsls	r3, r3, #16
   137f2:	431a      	orrs	r2, r3
   137f4:	78cb      	ldrb	r3, [r1, #3]
   137f6:	061b      	lsls	r3, r3, #24
   137f8:	4313      	orrs	r3, r2
   137fa:	d100      	bne.n	137fe <LORAWAN_RxDone+0x936>
   137fc:	e5ac      	b.n	13358 <LORAWAN_RxDone+0x490>
   137fe:	4b4f      	ldr	r3, [pc, #316]	; (1393c <LORAWAN_RxDone+0xa74>)
   13800:	4c4f      	ldr	r4, [pc, #316]	; (13940 <LORAWAN_RxDone+0xa78>)
   13802:	781b      	ldrb	r3, [r3, #0]
   13804:	2b10      	cmp	r3, #16
   13806:	d105      	bne.n	13814 <LORAWAN_RxDone+0x94c>
   13808:	0001      	movs	r1, r0
   1380a:	2000      	movs	r0, #0
   1380c:	9a06      	ldr	r2, [sp, #24]
   1380e:	3b0c      	subs	r3, #12
   13810:	47a0      	blx	r4
   13812:	e5a1      	b.n	13358 <LORAWAN_RxDone+0x490>
   13814:	2300      	movs	r3, #0
   13816:	0001      	movs	r1, r0
   13818:	9a06      	ldr	r2, [sp, #24]
   1381a:	0018      	movs	r0, r3
   1381c:	e7f8      	b.n	13810 <LORAWAN_RxDone+0x948>
   1381e:	3408      	adds	r4, #8
   13820:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
   13822:	0031      	movs	r1, r6
   13824:	9308      	str	r3, [sp, #32]
   13826:	4b47      	ldr	r3, [pc, #284]	; (13944 <LORAWAN_RxDone+0xa7c>)
   13828:	4798      	blx	r3
   1382a:	2808      	cmp	r0, #8
   1382c:	d001      	beq.n	13832 <LORAWAN_RxDone+0x96a>
   1382e:	f7ff fbaf 	bl	12f90 <LORAWAN_RxDone+0xc8>
   13832:	9b06      	ldr	r3, [sp, #24]
   13834:	0028      	movs	r0, r5
   13836:	1f1a      	subs	r2, r3, #4
   13838:	9b07      	ldr	r3, [sp, #28]
   1383a:	b2d2      	uxtb	r2, r2
   1383c:	9300      	str	r3, [sp, #0]
   1383e:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
   13840:	2349      	movs	r3, #73	; 0x49
   13842:	4c41      	ldr	r4, [pc, #260]	; (13948 <LORAWAN_RxDone+0xa80>)
   13844:	47a0      	blx	r4
   13846:	4d41      	ldr	r5, [pc, #260]	; (1394c <LORAWAN_RxDone+0xa84>)
   13848:	9607      	str	r6, [sp, #28]
   1384a:	4e41      	ldr	r6, [pc, #260]	; (13950 <LORAWAN_RxDone+0xa88>)
   1384c:	4c41      	ldr	r4, [pc, #260]	; (13954 <LORAWAN_RxDone+0xa8c>)
   1384e:	2210      	movs	r2, #16
   13850:	0021      	movs	r1, r4
   13852:	4b41      	ldr	r3, [pc, #260]	; (13958 <LORAWAN_RxDone+0xa90>)
   13854:	0030      	movs	r0, r6
   13856:	4798      	blx	r3
   13858:	9b06      	ldr	r3, [sp, #24]
   1385a:	0039      	movs	r1, r7
   1385c:	3b04      	subs	r3, #4
   1385e:	001a      	movs	r2, r3
   13860:	9309      	str	r3, [sp, #36]	; 0x24
   13862:	483e      	ldr	r0, [pc, #248]	; (1395c <LORAWAN_RxDone+0xa94>)
   13864:	4b3c      	ldr	r3, [pc, #240]	; (13958 <LORAWAN_RxDone+0xa90>)
   13866:	4798      	blx	r3
   13868:	9b06      	ldr	r3, [sp, #24]
   1386a:	9a07      	ldr	r2, [sp, #28]
   1386c:	330c      	adds	r3, #12
   1386e:	b29b      	uxth	r3, r3
   13870:	9300      	str	r3, [sp, #0]
   13872:	0033      	movs	r3, r6
   13874:	2a00      	cmp	r2, #0
   13876:	d100      	bne.n	1387a <LORAWAN_RxDone+0x9b2>
   13878:	e55b      	b.n	13332 <LORAWAN_RxDone+0x46a>
   1387a:	0022      	movs	r2, r4
   1387c:	2104      	movs	r1, #4
   1387e:	4c38      	ldr	r4, [pc, #224]	; (13960 <LORAWAN_RxDone+0xa98>)
   13880:	0028      	movs	r0, r5
   13882:	47a0      	blx	r4
   13884:	2204      	movs	r2, #4
   13886:	4933      	ldr	r1, [pc, #204]	; (13954 <LORAWAN_RxDone+0xa8c>)
   13888:	4c33      	ldr	r4, [pc, #204]	; (13958 <LORAWAN_RxDone+0xa90>)
   1388a:	a80d      	add	r0, sp, #52	; 0x34
   1388c:	47a0      	blx	r4
   1388e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   13890:	2204      	movs	r2, #4
   13892:	18f9      	adds	r1, r7, r3
   13894:	a810      	add	r0, sp, #64	; 0x40
   13896:	47a0      	blx	r4
   13898:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1389a:	9a10      	ldr	r2, [sp, #64]	; 0x40
   1389c:	4293      	cmp	r3, r2
   1389e:	d100      	bne.n	138a2 <LORAWAN_RxDone+0x9da>
   138a0:	e54e      	b.n	13340 <LORAWAN_RxDone+0x478>
   138a2:	4c19      	ldr	r4, [pc, #100]	; (13908 <LORAWAN_RxDone+0xa40>)
   138a4:	0023      	movs	r3, r4
   138a6:	33f4      	adds	r3, #244	; 0xf4
   138a8:	781b      	ldrb	r3, [r3, #0]
   138aa:	2b01      	cmp	r3, #1
   138ac:	d108      	bne.n	138c0 <LORAWAN_RxDone+0x9f8>
   138ae:	0023      	movs	r3, r4
   138b0:	220e      	movs	r2, #14
   138b2:	337c      	adds	r3, #124	; 0x7c
   138b4:	781b      	ldrb	r3, [r3, #0]
   138b6:	4013      	ands	r3, r2
   138b8:	2b06      	cmp	r3, #6
   138ba:	d101      	bne.n	138c0 <LORAWAN_RxDone+0x9f8>
   138bc:	4b29      	ldr	r3, [pc, #164]	; (13964 <LORAWAN_RxDone+0xa9c>)
   138be:	4798      	blx	r3
   138c0:	491d      	ldr	r1, [pc, #116]	; (13938 <LORAWAN_RxDone+0xa70>)
   138c2:	784a      	ldrb	r2, [r1, #1]
   138c4:	780b      	ldrb	r3, [r1, #0]
   138c6:	0212      	lsls	r2, r2, #8
   138c8:	431a      	orrs	r2, r3
   138ca:	788b      	ldrb	r3, [r1, #2]
   138cc:	041b      	lsls	r3, r3, #16
   138ce:	431a      	orrs	r2, r3
   138d0:	78cb      	ldrb	r3, [r1, #3]
   138d2:	061b      	lsls	r3, r3, #24
   138d4:	4313      	orrs	r3, r2
   138d6:	d101      	bne.n	138dc <LORAWAN_RxDone+0xa14>
   138d8:	f7ff fb48 	bl	12f6c <LORAWAN_RxDone+0xa4>
   138dc:	0022      	movs	r2, r4
   138de:	2120      	movs	r1, #32
   138e0:	328c      	adds	r2, #140	; 0x8c
   138e2:	7813      	ldrb	r3, [r2, #0]
   138e4:	438b      	bics	r3, r1
   138e6:	7013      	strb	r3, [r2, #0]
   138e8:	9b07      	ldr	r3, [sp, #28]
   138ea:	2b00      	cmp	r3, #0
   138ec:	d100      	bne.n	138f0 <LORAWAN_RxDone+0xa28>
   138ee:	e523      	b.n	13338 <LORAWAN_RxDone+0x470>
   138f0:	2322      	movs	r3, #34	; 0x22
   138f2:	aa04      	add	r2, sp, #16
   138f4:	189b      	adds	r3, r3, r2
   138f6:	781a      	ldrb	r2, [r3, #0]
   138f8:	233c      	movs	r3, #60	; 0x3c
   138fa:	4353      	muls	r3, r2
   138fc:	18e4      	adds	r4, r4, r3
   138fe:	9b08      	ldr	r3, [sp, #32]
   13900:	34fc      	adds	r4, #252	; 0xfc
   13902:	64e3      	str	r3, [r4, #76]	; 0x4c
   13904:	2018      	movs	r0, #24
   13906:	e512      	b.n	1332e <LORAWAN_RxDone+0x466>
   13908:	20002b5c 	.word	0x20002b5c
   1390c:	0001148d 	.word	0x0001148d
   13910:	0000f125 	.word	0x0000f125
   13914:	00010931 	.word	0x00010931
   13918:	000108b9 	.word	0x000108b9
   1391c:	0001187d 	.word	0x0001187d
   13920:	0000021f 	.word	0x0000021f
   13924:	0001063d 	.word	0x0001063d
   13928:	0000ee0d 	.word	0x0000ee0d
   1392c:	20002bd8 	.word	0x20002bd8
   13930:	0001118d 	.word	0x0001118d
   13934:	00014291 	.word	0x00014291
   13938:	20002ea4 	.word	0x20002ea4
   1393c:	20002d90 	.word	0x20002d90
   13940:	00011831 	.word	0x00011831
   13944:	000128e1 	.word	0x000128e1
   13948:	00010205 	.word	0x00010205
   1394c:	20002b81 	.word	0x20002b81
   13950:	20002eac 	.word	0x20002eac
   13954:	20001110 	.word	0x20001110
   13958:	00019d89 	.word	0x00019d89
   1395c:	20002ebc 	.word	0x20002ebc
   13960:	0000dde9 	.word	0x0000dde9
   13964:	0001029d 	.word	0x0001029d

00013968 <LorawanSetEdClass>:
   13968:	2385      	movs	r3, #133	; 0x85
   1396a:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1396c:	4d19      	ldr	r5, [pc, #100]	; (139d4 <LorawanSetEdClass+0x6c>)
   1396e:	009b      	lsls	r3, r3, #2
   13970:	5ceb      	ldrb	r3, [r5, r3]
   13972:	0004      	movs	r4, r0
   13974:	2011      	movs	r0, #17
   13976:	2b00      	cmp	r3, #0
   13978:	d013      	beq.n	139a2 <LorawanSetEdClass+0x3a>
   1397a:	002b      	movs	r3, r5
   1397c:	33f5      	adds	r3, #245	; 0xf5
   1397e:	781b      	ldrb	r3, [r3, #0]
   13980:	3807      	subs	r0, #7
   13982:	4223      	tst	r3, r4
   13984:	d00d      	beq.n	139a2 <LorawanSetEdClass+0x3a>
   13986:	002b      	movs	r3, r5
   13988:	33f4      	adds	r3, #244	; 0xf4
   1398a:	7819      	ldrb	r1, [r3, #0]
   1398c:	428c      	cmp	r4, r1
   1398e:	d007      	beq.n	139a0 <LorawanSetEdClass+0x38>
   13990:	2901      	cmp	r1, #1
   13992:	d107      	bne.n	139a4 <LorawanSetEdClass+0x3c>
   13994:	2c04      	cmp	r4, #4
   13996:	d104      	bne.n	139a2 <LorawanSetEdClass+0x3a>
   13998:	701c      	strb	r4, [r3, #0]
   1399a:	2000      	movs	r0, #0
   1399c:	4b0e      	ldr	r3, [pc, #56]	; (139d8 <LorawanSetEdClass+0x70>)
   1399e:	4798      	blx	r3
   139a0:	2008      	movs	r0, #8
   139a2:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
   139a4:	2904      	cmp	r1, #4
   139a6:	d1fc      	bne.n	139a2 <LorawanSetEdClass+0x3a>
   139a8:	2c01      	cmp	r4, #1
   139aa:	d1fa      	bne.n	139a2 <LorawanSetEdClass+0x3a>
   139ac:	701c      	strb	r4, [r3, #0]
   139ae:	0021      	movs	r1, r4
   139b0:	4b09      	ldr	r3, [pc, #36]	; (139d8 <LorawanSetEdClass+0x70>)
   139b2:	2000      	movs	r0, #0
   139b4:	4798      	blx	r3
   139b6:	002a      	movs	r2, r5
   139b8:	210e      	movs	r1, #14
   139ba:	327c      	adds	r2, #124	; 0x7c
   139bc:	7813      	ldrb	r3, [r2, #0]
   139be:	a801      	add	r0, sp, #4
   139c0:	438b      	bics	r3, r1
   139c2:	7013      	strb	r3, [r2, #0]
   139c4:	35ff      	adds	r5, #255	; 0xff
   139c6:	4b05      	ldr	r3, [pc, #20]	; (139dc <LorawanSetEdClass+0x74>)
   139c8:	7004      	strb	r4, [r0, #0]
   139ca:	4798      	blx	r3
   139cc:	7f68      	ldrb	r0, [r5, #29]
   139ce:	4b04      	ldr	r3, [pc, #16]	; (139e0 <LorawanSetEdClass+0x78>)
   139d0:	4798      	blx	r3
   139d2:	e7e5      	b.n	139a0 <LorawanSetEdClass+0x38>
   139d4:	20002b5c 	.word	0x20002b5c
   139d8:	0000e0dd 	.word	0x0000e0dd
   139dc:	00015e51 	.word	0x00015e51
   139e0:	0000f125 	.word	0x0000f125

000139e4 <LORAWAN_SetAttr>:
   139e4:	2385      	movs	r3, #133	; 0x85
   139e6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   139e8:	4cbd      	ldr	r4, [pc, #756]	; (13ce0 <LORAWAN_SetAttr+0x2fc>)
   139ea:	009b      	lsls	r3, r3, #2
   139ec:	5ce3      	ldrb	r3, [r4, r3]
   139ee:	000d      	movs	r5, r1
   139f0:	2611      	movs	r6, #17
   139f2:	2b00      	cmp	r3, #0
   139f4:	d100      	bne.n	139f8 <LORAWAN_SetAttr+0x14>
   139f6:	e118      	b.n	13c2a <LORAWAN_SetAttr+0x246>
   139f8:	283f      	cmp	r0, #63	; 0x3f
   139fa:	d871      	bhi.n	13ae0 <LORAWAN_SetAttr+0xfc>
   139fc:	f002 fe08 	bl	16610 <__gnu_thumb1_case_uhi>
   13a00:	008c0040 	.word	0x008c0040
   13a04:	00f500ab 	.word	0x00f500ab
   13a08:	00df00be 	.word	0x00df00be
   13a0c:	012d0117 	.word	0x012d0117
   13a10:	015f014d 	.word	0x015f014d
   13a14:	017c0165 	.word	0x017c0165
   13a18:	019f0186 	.word	0x019f0186
   13a1c:	01a901a4 	.word	0x01a901a4
   13a20:	01b301ae 	.word	0x01b301ae
   13a24:	01bd01b8 	.word	0x01bd01b8
   13a28:	01e401c2 	.word	0x01e401c2
   13a2c:	01c601c9 	.word	0x01c601c9
   13a30:	01e901ed 	.word	0x01e901ed
   13a34:	01db01df 	.word	0x01db01df
   13a38:	007001d5 	.word	0x007001d5
   13a3c:	01970070 	.word	0x01970070
   13a40:	00700070 	.word	0x00700070
   13a44:	00700070 	.word	0x00700070
   13a48:	00700070 	.word	0x00700070
   13a4c:	005f01f1 	.word	0x005f01f1
   13a50:	020201f4 	.word	0x020201f4
   13a54:	01f901fe 	.word	0x01f901fe
   13a58:	02060070 	.word	0x02060070
   13a5c:	020e020a 	.word	0x020e020a
   13a60:	02160212 	.word	0x02160212
   13a64:	023a021a 	.word	0x023a021a
   13a68:	00700070 	.word	0x00700070
   13a6c:	00700070 	.word	0x00700070
   13a70:	00700070 	.word	0x00700070
   13a74:	00700070 	.word	0x00700070
   13a78:	02510070 	.word	0x02510070
   13a7c:	025f025b 	.word	0x025f025b
   13a80:	260a      	movs	r6, #10
   13a82:	2900      	cmp	r1, #0
   13a84:	d100      	bne.n	13a88 <LORAWAN_SetAttr+0xa4>
   13a86:	e0d0      	b.n	13c2a <LORAWAN_SetAttr+0x246>
   13a88:	0020      	movs	r0, r4
   13a8a:	2208      	movs	r2, #8
   13a8c:	4b95      	ldr	r3, [pc, #596]	; (13ce4 <LORAWAN_SetAttr+0x300>)
   13a8e:	305d      	adds	r0, #93	; 0x5d
   13a90:	4798      	blx	r3
   13a92:	2108      	movs	r1, #8
   13a94:	4e94      	ldr	r6, [pc, #592]	; (13ce8 <LORAWAN_SetAttr+0x304>)
   13a96:	2001      	movs	r0, #1
   13a98:	47b0      	blx	r6
   13a9a:	0022      	movs	r2, r4
   13a9c:	2501      	movs	r5, #1
   13a9e:	32d6      	adds	r2, #214	; 0xd6
   13aa0:	7813      	ldrb	r3, [r2, #0]
   13aa2:	2109      	movs	r1, #9
   13aa4:	432b      	orrs	r3, r5
   13aa6:	347c      	adds	r4, #124	; 0x7c
   13aa8:	0028      	movs	r0, r5
   13aaa:	7013      	strb	r3, [r2, #0]
   13aac:	47b0      	blx	r6
   13aae:	7823      	ldrb	r3, [r4, #0]
   13ab0:	210b      	movs	r1, #11
   13ab2:	43ab      	bics	r3, r5
   13ab4:	0028      	movs	r0, r5
   13ab6:	7023      	strb	r3, [r4, #0]
   13ab8:	47b0      	blx	r6
   13aba:	2608      	movs	r6, #8
   13abc:	e0b5      	b.n	13c2a <LORAWAN_SetAttr+0x246>
   13abe:	0023      	movs	r3, r4
   13ac0:	33ff      	adds	r3, #255	; 0xff
   13ac2:	7c5b      	ldrb	r3, [r3, #17]
   13ac4:	260a      	movs	r6, #10
   13ac6:	075b      	lsls	r3, r3, #29
   13ac8:	d400      	bmi.n	13acc <LORAWAN_SetAttr+0xe8>
   13aca:	e0ae      	b.n	13c2a <LORAWAN_SetAttr+0x246>
   13acc:	79ca      	ldrb	r2, [r1, #7]
   13ace:	4b87      	ldr	r3, [pc, #540]	; (13cec <LORAWAN_SetAttr+0x308>)
   13ad0:	2a00      	cmp	r2, #0
   13ad2:	d10e      	bne.n	13af2 <LORAWAN_SetAttr+0x10e>
   13ad4:	4669      	mov	r1, sp
   13ad6:	201d      	movs	r0, #29
   13ad8:	714a      	strb	r2, [r1, #5]
   13ada:	4798      	blx	r3
   13adc:	2800      	cmp	r0, #0
   13ade:	d001      	beq.n	13ae4 <LORAWAN_SetAttr+0x100>
   13ae0:	260a      	movs	r6, #10
   13ae2:	e0a2      	b.n	13c2a <LORAWAN_SetAttr+0x246>
   13ae4:	2109      	movs	r1, #9
   13ae6:	34fe      	adds	r4, #254	; 0xfe
   13ae8:	82e0      	strh	r0, [r4, #22]
   13aea:	82a0      	strh	r0, [r4, #20]
   13aec:	4b7e      	ldr	r3, [pc, #504]	; (13ce8 <LORAWAN_SetAttr+0x304>)
   13aee:	4798      	blx	r3
   13af0:	e7e3      	b.n	13aba <LORAWAN_SetAttr+0xd6>
   13af2:	2002      	movs	r0, #2
   13af4:	5e2a      	ldrsh	r2, [r5, r0]
   13af6:	88ae      	ldrh	r6, [r5, #4]
   13af8:	79a8      	ldrb	r0, [r5, #6]
   13afa:	466d      	mov	r5, sp
   13afc:	806a      	strh	r2, [r5, #2]
   13afe:	2201      	movs	r2, #1
   13b00:	8809      	ldrh	r1, [r1, #0]
   13b02:	7128      	strb	r0, [r5, #4]
   13b04:	8029      	strh	r1, [r5, #0]
   13b06:	201d      	movs	r0, #29
   13b08:	4669      	mov	r1, sp
   13b0a:	716a      	strb	r2, [r5, #5]
   13b0c:	4798      	blx	r3
   13b0e:	2800      	cmp	r0, #0
   13b10:	d1e6      	bne.n	13ae0 <LORAWAN_SetAttr+0xfc>
   13b12:	34fe      	adds	r4, #254	; 0xfe
   13b14:	82e6      	strh	r6, [r4, #22]
   13b16:	e7d0      	b.n	13aba <LORAWAN_SetAttr+0xd6>
   13b18:	260a      	movs	r6, #10
   13b1a:	2900      	cmp	r1, #0
   13b1c:	d100      	bne.n	13b20 <LORAWAN_SetAttr+0x13c>
   13b1e:	e084      	b.n	13c2a <LORAWAN_SetAttr+0x246>
   13b20:	0020      	movs	r0, r4
   13b22:	2208      	movs	r2, #8
   13b24:	4b6f      	ldr	r3, [pc, #444]	; (13ce4 <LORAWAN_SetAttr+0x300>)
   13b26:	3055      	adds	r0, #85	; 0x55
   13b28:	4798      	blx	r3
   13b2a:	2107      	movs	r1, #7
   13b2c:	4d6e      	ldr	r5, [pc, #440]	; (13ce8 <LORAWAN_SetAttr+0x304>)
   13b2e:	2001      	movs	r0, #1
   13b30:	47a8      	blx	r5
   13b32:	0022      	movs	r2, r4
   13b34:	2302      	movs	r3, #2
   13b36:	32d6      	adds	r2, #214	; 0xd6
   13b38:	7811      	ldrb	r1, [r2, #0]
   13b3a:	2001      	movs	r0, #1
   13b3c:	430b      	orrs	r3, r1
   13b3e:	2109      	movs	r1, #9
   13b40:	7013      	strb	r3, [r2, #0]
   13b42:	47a8      	blx	r5
   13b44:	2001      	movs	r0, #1
   13b46:	347c      	adds	r4, #124	; 0x7c
   13b48:	7823      	ldrb	r3, [r4, #0]
   13b4a:	210b      	movs	r1, #11
   13b4c:	4383      	bics	r3, r0
   13b4e:	7023      	strb	r3, [r4, #0]
   13b50:	47a8      	blx	r5
   13b52:	3e02      	subs	r6, #2
   13b54:	e069      	b.n	13c2a <LORAWAN_SetAttr+0x246>
   13b56:	680b      	ldr	r3, [r1, #0]
   13b58:	2001      	movs	r0, #1
   13b5a:	0a19      	lsrs	r1, r3, #8
   13b5c:	70a1      	strb	r1, [r4, #2]
   13b5e:	0c19      	lsrs	r1, r3, #16
   13b60:	7063      	strb	r3, [r4, #1]
   13b62:	70e1      	strb	r1, [r4, #3]
   13b64:	0e1b      	lsrs	r3, r3, #24
   13b66:	2103      	movs	r1, #3
   13b68:	4d5f      	ldr	r5, [pc, #380]	; (13ce8 <LORAWAN_SetAttr+0x304>)
   13b6a:	7123      	strb	r3, [r4, #4]
   13b6c:	47a8      	blx	r5
   13b6e:	0022      	movs	r2, r4
   13b70:	2304      	movs	r3, #4
   13b72:	32d6      	adds	r2, #214	; 0xd6
   13b74:	7811      	ldrb	r1, [r2, #0]
   13b76:	430b      	orrs	r3, r1
   13b78:	7013      	strb	r3, [r2, #0]
   13b7a:	e015      	b.n	13ba8 <LORAWAN_SetAttr+0x1c4>
   13b7c:	260a      	movs	r6, #10
   13b7e:	2900      	cmp	r1, #0
   13b80:	d053      	beq.n	13c2a <LORAWAN_SetAttr+0x246>
   13b82:	3606      	adds	r6, #6
   13b84:	0032      	movs	r2, r6
   13b86:	4f57      	ldr	r7, [pc, #348]	; (13ce4 <LORAWAN_SetAttr+0x300>)
   13b88:	1d60      	adds	r0, r4, #5
   13b8a:	47b8      	blx	r7
   13b8c:	0020      	movs	r0, r4
   13b8e:	0032      	movs	r2, r6
   13b90:	0029      	movs	r1, r5
   13b92:	3025      	adds	r0, #37	; 0x25
   13b94:	47b8      	blx	r7
   13b96:	2104      	movs	r1, #4
   13b98:	2001      	movs	r0, #1
   13b9a:	4d53      	ldr	r5, [pc, #332]	; (13ce8 <LORAWAN_SetAttr+0x304>)
   13b9c:	47a8      	blx	r5
   13b9e:	0023      	movs	r3, r4
   13ba0:	33d6      	adds	r3, #214	; 0xd6
   13ba2:	781a      	ldrb	r2, [r3, #0]
   13ba4:	4316      	orrs	r6, r2
   13ba6:	701e      	strb	r6, [r3, #0]
   13ba8:	2109      	movs	r1, #9
   13baa:	2001      	movs	r0, #1
   13bac:	47a8      	blx	r5
   13bae:	2001      	movs	r0, #1
   13bb0:	210b      	movs	r1, #11
   13bb2:	347c      	adds	r4, #124	; 0x7c
   13bb4:	7823      	ldrb	r3, [r4, #0]
   13bb6:	4383      	bics	r3, r0
   13bb8:	7023      	strb	r3, [r4, #0]
   13bba:	47a8      	blx	r5
   13bbc:	e77d      	b.n	13aba <LORAWAN_SetAttr+0xd6>
   13bbe:	260a      	movs	r6, #10
   13bc0:	2900      	cmp	r1, #0
   13bc2:	d032      	beq.n	13c2a <LORAWAN_SetAttr+0x246>
   13bc4:	0020      	movs	r0, r4
   13bc6:	2210      	movs	r2, #16
   13bc8:	4e46      	ldr	r6, [pc, #280]	; (13ce4 <LORAWAN_SetAttr+0x300>)
   13bca:	3015      	adds	r0, #21
   13bcc:	47b0      	blx	r6
   13bce:	0020      	movs	r0, r4
   13bd0:	2210      	movs	r2, #16
   13bd2:	0029      	movs	r1, r5
   13bd4:	3035      	adds	r0, #53	; 0x35
   13bd6:	47b0      	blx	r6
   13bd8:	2105      	movs	r1, #5
   13bda:	2001      	movs	r0, #1
   13bdc:	4d42      	ldr	r5, [pc, #264]	; (13ce8 <LORAWAN_SetAttr+0x304>)
   13bde:	47a8      	blx	r5
   13be0:	0022      	movs	r2, r4
   13be2:	32d6      	adds	r2, #214	; 0xd6
   13be4:	7811      	ldrb	r1, [r2, #0]
   13be6:	2320      	movs	r3, #32
   13be8:	e7c5      	b.n	13b76 <LORAWAN_SetAttr+0x192>
   13bea:	260a      	movs	r6, #10
   13bec:	2900      	cmp	r1, #0
   13bee:	d01c      	beq.n	13c2a <LORAWAN_SetAttr+0x246>
   13bf0:	4b3f      	ldr	r3, [pc, #252]	; (13cf0 <LORAWAN_SetAttr+0x30c>)
   13bf2:	3e02      	subs	r6, #2
   13bf4:	5ce3      	ldrb	r3, [r4, r3]
   13bf6:	2b00      	cmp	r3, #0
   13bf8:	d117      	bne.n	13c2a <LORAWAN_SetAttr+0x246>
   13bfa:	0020      	movs	r0, r4
   13bfc:	2210      	movs	r2, #16
   13bfe:	4b39      	ldr	r3, [pc, #228]	; (13ce4 <LORAWAN_SetAttr+0x300>)
   13c00:	3045      	adds	r0, #69	; 0x45
   13c02:	4798      	blx	r3
   13c04:	2106      	movs	r1, #6
   13c06:	4d38      	ldr	r5, [pc, #224]	; (13ce8 <LORAWAN_SetAttr+0x304>)
   13c08:	2001      	movs	r0, #1
   13c0a:	47a8      	blx	r5
   13c0c:	0022      	movs	r2, r4
   13c0e:	32d6      	adds	r2, #214	; 0xd6
   13c10:	7813      	ldrb	r3, [r2, #0]
   13c12:	2109      	movs	r1, #9
   13c14:	4333      	orrs	r3, r6
   13c16:	2001      	movs	r0, #1
   13c18:	7013      	strb	r3, [r2, #0]
   13c1a:	47a8      	blx	r5
   13c1c:	2001      	movs	r0, #1
   13c1e:	347c      	adds	r4, #124	; 0x7c
   13c20:	7823      	ldrb	r3, [r4, #0]
   13c22:	210b      	movs	r1, #11
   13c24:	4383      	bics	r3, r0
   13c26:	7023      	strb	r3, [r4, #0]
   13c28:	47a8      	blx	r5
   13c2a:	0030      	movs	r0, r6
   13c2c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   13c2e:	780b      	ldrb	r3, [r1, #0]
   13c30:	2001      	movs	r0, #1
   13c32:	0021      	movs	r1, r4
   13c34:	2520      	movs	r5, #32
   13c36:	317c      	adds	r1, #124	; 0x7c
   13c38:	4003      	ands	r3, r0
   13c3a:	015a      	lsls	r2, r3, #5
   13c3c:	780b      	ldrb	r3, [r1, #0]
   13c3e:	43ab      	bics	r3, r5
   13c40:	4313      	orrs	r3, r2
   13c42:	700b      	strb	r3, [r1, #0]
   13c44:	0023      	movs	r3, r4
   13c46:	2200      	movs	r2, #0
   13c48:	33c2      	adds	r3, #194	; 0xc2
   13c4a:	348c      	adds	r4, #140	; 0x8c
   13c4c:	801a      	strh	r2, [r3, #0]
   13c4e:	7823      	ldrb	r3, [r4, #0]
   13c50:	3210      	adds	r2, #16
   13c52:	4393      	bics	r3, r2
   13c54:	7023      	strb	r3, [r4, #0]
   13c56:	210b      	movs	r1, #11
   13c58:	e748      	b.n	13aec <LORAWAN_SetAttr+0x108>
   13c5a:	466a      	mov	r2, sp
   13c5c:	780b      	ldrb	r3, [r1, #0]
   13c5e:	7013      	strb	r3, [r2, #0]
   13c60:	0022      	movs	r2, r4
   13c62:	32ea      	adds	r2, #234	; 0xea
   13c64:	7812      	ldrb	r2, [r2, #0]
   13c66:	429a      	cmp	r2, r3
   13c68:	d900      	bls.n	13c6c <LORAWAN_SetAttr+0x288>
   13c6a:	e739      	b.n	13ae0 <LORAWAN_SetAttr+0xfc>
   13c6c:	0022      	movs	r2, r4
   13c6e:	32eb      	adds	r2, #235	; 0xeb
   13c70:	7812      	ldrb	r2, [r2, #0]
   13c72:	429a      	cmp	r2, r3
   13c74:	d200      	bcs.n	13c78 <LORAWAN_SetAttr+0x294>
   13c76:	e733      	b.n	13ae0 <LORAWAN_SetAttr+0xfc>
   13c78:	4669      	mov	r1, sp
   13c7a:	2010      	movs	r0, #16
   13c7c:	4b1d      	ldr	r3, [pc, #116]	; (13cf4 <LORAWAN_SetAttr+0x310>)
   13c7e:	4798      	blx	r3
   13c80:	0006      	movs	r6, r0
   13c82:	2808      	cmp	r0, #8
   13c84:	d000      	beq.n	13c88 <LORAWAN_SetAttr+0x2a4>
   13c86:	e72b      	b.n	13ae0 <LORAWAN_SetAttr+0xfc>
   13c88:	466b      	mov	r3, sp
   13c8a:	210c      	movs	r1, #12
   13c8c:	2001      	movs	r0, #1
   13c8e:	781b      	ldrb	r3, [r3, #0]
   13c90:	34df      	adds	r4, #223	; 0xdf
   13c92:	7023      	strb	r3, [r4, #0]
   13c94:	4b14      	ldr	r3, [pc, #80]	; (13ce8 <LORAWAN_SetAttr+0x304>)
   13c96:	4798      	blx	r3
   13c98:	e7c7      	b.n	13c2a <LORAWAN_SetAttr+0x246>
   13c9a:	466a      	mov	r2, sp
   13c9c:	780b      	ldrb	r3, [r1, #0]
   13c9e:	201d      	movs	r0, #29
   13ca0:	7013      	strb	r3, [r2, #0]
   13ca2:	4669      	mov	r1, sp
   13ca4:	4b13      	ldr	r3, [pc, #76]	; (13cf4 <LORAWAN_SetAttr+0x310>)
   13ca6:	4798      	blx	r3
   13ca8:	0006      	movs	r6, r0
   13caa:	2808      	cmp	r0, #8
   13cac:	d000      	beq.n	13cb0 <LORAWAN_SetAttr+0x2cc>
   13cae:	e717      	b.n	13ae0 <LORAWAN_SetAttr+0xfc>
   13cb0:	466b      	mov	r3, sp
   13cb2:	781b      	ldrb	r3, [r3, #0]
   13cb4:	34e1      	adds	r4, #225	; 0xe1
   13cb6:	7023      	strb	r3, [r4, #0]
   13cb8:	210a      	movs	r1, #10
   13cba:	2000      	movs	r0, #0
   13cbc:	e7ea      	b.n	13c94 <LORAWAN_SetAttr+0x2b0>
   13cbe:	780b      	ldrb	r3, [r1, #0]
   13cc0:	2103      	movs	r1, #3
   13cc2:	34f7      	adds	r4, #247	; 0xf7
   13cc4:	7023      	strb	r3, [r4, #0]
   13cc6:	2000      	movs	r0, #0
   13cc8:	e710      	b.n	13aec <LORAWAN_SetAttr+0x108>
   13cca:	680b      	ldr	r3, [r1, #0]
   13ccc:	260a      	movs	r6, #10
   13cce:	1c5a      	adds	r2, r3, #1
   13cd0:	d0ab      	beq.n	13c2a <LORAWAN_SetAttr+0x246>
   13cd2:	2116      	movs	r1, #22
   13cd4:	2000      	movs	r0, #0
   13cd6:	3404      	adds	r4, #4
   13cd8:	67e3      	str	r3, [r4, #124]	; 0x7c
   13cda:	4b03      	ldr	r3, [pc, #12]	; (13ce8 <LORAWAN_SetAttr+0x304>)
   13cdc:	4798      	blx	r3
   13cde:	e738      	b.n	13b52 <LORAWAN_SetAttr+0x16e>
   13ce0:	20002b5c 	.word	0x20002b5c
   13ce4:	00019d89 	.word	0x00019d89
   13ce8:	0000e0dd 	.word	0x0000e0dd
   13cec:	00014c4d 	.word	0x00014c4d
   13cf0:	00000221 	.word	0x00000221
   13cf4:	0000d91d 	.word	0x0000d91d
   13cf8:	680b      	ldr	r3, [r1, #0]
   13cfa:	260a      	movs	r6, #10
   13cfc:	1c5a      	adds	r2, r3, #1
   13cfe:	d100      	bne.n	13d02 <LORAWAN_SetAttr+0x31e>
   13d00:	e793      	b.n	13c2a <LORAWAN_SetAttr+0x246>
   13d02:	0031      	movs	r1, r6
   13d04:	3408      	adds	r4, #8
   13d06:	67e3      	str	r3, [r4, #124]	; 0x7c
   13d08:	2001      	movs	r0, #1
   13d0a:	e7e6      	b.n	13cda <LORAWAN_SetAttr+0x2f6>
   13d0c:	0026      	movs	r6, r4
   13d0e:	880b      	ldrh	r3, [r1, #0]
   13d10:	36c8      	adds	r6, #200	; 0xc8
   13d12:	210c      	movs	r1, #12
   13d14:	2000      	movs	r0, #0
   13d16:	4d6b      	ldr	r5, [pc, #428]	; (13ec4 <LORAWAN_SetAttr+0x4e0>)
   13d18:	8033      	strh	r3, [r6, #0]
   13d1a:	47a8      	blx	r5
   13d1c:	22fa      	movs	r2, #250	; 0xfa
   13d1e:	8833      	ldrh	r3, [r6, #0]
   13d20:	0092      	lsls	r2, r2, #2
   13d22:	189b      	adds	r3, r3, r2
   13d24:	34ca      	adds	r4, #202	; 0xca
   13d26:	8023      	strh	r3, [r4, #0]
   13d28:	210d      	movs	r1, #13
   13d2a:	2000      	movs	r0, #0
   13d2c:	e745      	b.n	13bba <LORAWAN_SetAttr+0x1d6>
   13d2e:	780b      	ldrb	r3, [r1, #0]
   13d30:	260a      	movs	r6, #10
   13d32:	2b0f      	cmp	r3, #15
   13d34:	d900      	bls.n	13d38 <LORAWAN_SetAttr+0x354>
   13d36:	e778      	b.n	13c2a <LORAWAN_SetAttr+0x246>
   13d38:	3490      	adds	r4, #144	; 0x90
   13d3a:	7023      	strb	r3, [r4, #0]
   13d3c:	e709      	b.n	13b52 <LORAWAN_SetAttr+0x16e>
   13d3e:	880b      	ldrh	r3, [r1, #0]
   13d40:	34cc      	adds	r4, #204	; 0xcc
   13d42:	8023      	strh	r3, [r4, #0]
   13d44:	210e      	movs	r1, #14
   13d46:	e7be      	b.n	13cc6 <LORAWAN_SetAttr+0x2e2>
   13d48:	880b      	ldrh	r3, [r1, #0]
   13d4a:	34ce      	adds	r4, #206	; 0xce
   13d4c:	8023      	strh	r3, [r4, #0]
   13d4e:	210f      	movs	r1, #15
   13d50:	e7b9      	b.n	13cc6 <LORAWAN_SetAttr+0x2e2>
   13d52:	880b      	ldrh	r3, [r1, #0]
   13d54:	34d0      	adds	r4, #208	; 0xd0
   13d56:	8023      	strh	r3, [r4, #0]
   13d58:	2110      	movs	r1, #16
   13d5a:	e7b4      	b.n	13cc6 <LORAWAN_SetAttr+0x2e2>
   13d5c:	780b      	ldrb	r3, [r1, #0]
   13d5e:	34d4      	adds	r4, #212	; 0xd4
   13d60:	7023      	strb	r3, [r4, #0]
   13d62:	2112      	movs	r1, #18
   13d64:	e7af      	b.n	13cc6 <LORAWAN_SetAttr+0x2e2>
   13d66:	780b      	ldrb	r3, [r1, #0]
   13d68:	34d5      	adds	r4, #213	; 0xd5
   13d6a:	7023      	strb	r3, [r4, #0]
   13d6c:	2113      	movs	r1, #19
   13d6e:	e7aa      	b.n	13cc6 <LORAWAN_SetAttr+0x2e2>
   13d70:	880b      	ldrh	r3, [r1, #0]
   13d72:	34d2      	adds	r4, #210	; 0xd2
   13d74:	8023      	strh	r3, [r4, #0]
   13d76:	2111      	movs	r1, #17
   13d78:	e7a5      	b.n	13cc6 <LORAWAN_SetAttr+0x2e2>
   13d7a:	780b      	ldrb	r3, [r1, #0]
   13d7c:	34da      	adds	r4, #218	; 0xda
   13d7e:	7023      	strb	r3, [r4, #0]
   13d80:	2115      	movs	r1, #21
   13d82:	e7a0      	b.n	13cc6 <LORAWAN_SetAttr+0x2e2>
   13d84:	780b      	ldrb	r3, [r1, #0]
   13d86:	34d9      	adds	r4, #217	; 0xd9
   13d88:	7023      	strb	r3, [r4, #0]
   13d8a:	e696      	b.n	13aba <LORAWAN_SetAttr+0xd6>
   13d8c:	780b      	ldrb	r3, [r1, #0]
   13d8e:	34e0      	adds	r4, #224	; 0xe0
   13d90:	e7fa      	b.n	13d88 <LORAWAN_SetAttr+0x3a4>
   13d92:	2001      	movs	r0, #1
   13d94:	780b      	ldrb	r3, [r1, #0]
   13d96:	2110      	movs	r1, #16
   13d98:	347c      	adds	r4, #124	; 0x7c
   13d9a:	4003      	ands	r3, r0
   13d9c:	011a      	lsls	r2, r3, #4
   13d9e:	7823      	ldrb	r3, [r4, #0]
   13da0:	438b      	bics	r3, r1
   13da2:	4313      	orrs	r3, r2
   13da4:	7023      	strb	r3, [r4, #0]
   13da6:	3905      	subs	r1, #5
   13da8:	e6a0      	b.n	13aec <LORAWAN_SetAttr+0x108>
   13daa:	7909      	ldrb	r1, [r1, #4]
   13dac:	7828      	ldrb	r0, [r5, #0]
   13dae:	4b46      	ldr	r3, [pc, #280]	; (13ec8 <LORAWAN_SetAttr+0x4e4>)
   13db0:	4798      	blx	r3
   13db2:	0006      	movs	r6, r0
   13db4:	e739      	b.n	13c2a <LORAWAN_SetAttr+0x246>
   13db6:	7909      	ldrb	r1, [r1, #4]
   13db8:	7828      	ldrb	r0, [r5, #0]
   13dba:	4b44      	ldr	r3, [pc, #272]	; (13ecc <LORAWAN_SetAttr+0x4e8>)
   13dbc:	e7f8      	b.n	13db0 <LORAWAN_SetAttr+0x3cc>
   13dbe:	7808      	ldrb	r0, [r1, #0]
   13dc0:	4b43      	ldr	r3, [pc, #268]	; (13ed0 <LORAWAN_SetAttr+0x4ec>)
   13dc2:	6849      	ldr	r1, [r1, #4]
   13dc4:	4798      	blx	r3
   13dc6:	e7f4      	b.n	13db2 <LORAWAN_SetAttr+0x3ce>
   13dc8:	7909      	ldrb	r1, [r1, #4]
   13dca:	6828      	ldr	r0, [r5, #0]
   13dcc:	4b41      	ldr	r3, [pc, #260]	; (13ed4 <LORAWAN_SetAttr+0x4f0>)
   13dce:	4798      	blx	r3
   13dd0:	e7ef      	b.n	13db2 <LORAWAN_SetAttr+0x3ce>
   13dd2:	7808      	ldrb	r0, [r1, #0]
   13dd4:	4b40      	ldr	r3, [pc, #256]	; (13ed8 <LORAWAN_SetAttr+0x4f4>)
   13dd6:	4798      	blx	r3
   13dd8:	e7eb      	b.n	13db2 <LORAWAN_SetAttr+0x3ce>
   13dda:	8808      	ldrh	r0, [r1, #0]
   13ddc:	4b3f      	ldr	r3, [pc, #252]	; (13edc <LORAWAN_SetAttr+0x4f8>)
   13dde:	4798      	blx	r3
   13de0:	e66b      	b.n	13aba <LORAWAN_SetAttr+0xd6>
   13de2:	4b3f      	ldr	r3, [pc, #252]	; (13ee0 <LORAWAN_SetAttr+0x4fc>)
   13de4:	6019      	str	r1, [r3, #0]
   13de6:	e67b      	b.n	13ae0 <LORAWAN_SetAttr+0xfc>
   13de8:	7809      	ldrb	r1, [r1, #0]
   13dea:	7868      	ldrb	r0, [r5, #1]
   13dec:	4b3d      	ldr	r3, [pc, #244]	; (13ee4 <LORAWAN_SetAttr+0x500>)
   13dee:	4798      	blx	r3
   13df0:	e7df      	b.n	13db2 <LORAWAN_SetAttr+0x3ce>
   13df2:	7809      	ldrb	r1, [r1, #0]
   13df4:	4b3c      	ldr	r3, [pc, #240]	; (13ee8 <LORAWAN_SetAttr+0x504>)
   13df6:	1c68      	adds	r0, r5, #1
   13df8:	4798      	blx	r3
   13dfa:	e7da      	b.n	13db2 <LORAWAN_SetAttr+0x3ce>
   13dfc:	7809      	ldrb	r1, [r1, #0]
   13dfe:	1c68      	adds	r0, r5, #1
   13e00:	4b3a      	ldr	r3, [pc, #232]	; (13eec <LORAWAN_SetAttr+0x508>)
   13e02:	e7f9      	b.n	13df8 <LORAWAN_SetAttr+0x414>
   13e04:	7809      	ldrb	r1, [r1, #0]
   13e06:	6868      	ldr	r0, [r5, #4]
   13e08:	4b39      	ldr	r3, [pc, #228]	; (13ef0 <LORAWAN_SetAttr+0x50c>)
   13e0a:	e7f5      	b.n	13df8 <LORAWAN_SetAttr+0x414>
   13e0c:	7809      	ldrb	r1, [r1, #0]
   13e0e:	6868      	ldr	r0, [r5, #4]
   13e10:	4b38      	ldr	r3, [pc, #224]	; (13ef4 <LORAWAN_SetAttr+0x510>)
   13e12:	e7f1      	b.n	13df8 <LORAWAN_SetAttr+0x414>
   13e14:	7809      	ldrb	r1, [r1, #0]
   13e16:	6868      	ldr	r0, [r5, #4]
   13e18:	4b37      	ldr	r3, [pc, #220]	; (13ef8 <LORAWAN_SetAttr+0x514>)
   13e1a:	e7ed      	b.n	13df8 <LORAWAN_SetAttr+0x414>
   13e1c:	7809      	ldrb	r1, [r1, #0]
   13e1e:	6868      	ldr	r0, [r5, #4]
   13e20:	4b36      	ldr	r3, [pc, #216]	; (13efc <LORAWAN_SetAttr+0x518>)
   13e22:	e7e9      	b.n	13df8 <LORAWAN_SetAttr+0x414>
   13e24:	7809      	ldrb	r1, [r1, #0]
   13e26:	7868      	ldrb	r0, [r5, #1]
   13e28:	4b35      	ldr	r3, [pc, #212]	; (13f00 <LORAWAN_SetAttr+0x51c>)
   13e2a:	e7e0      	b.n	13dee <LORAWAN_SetAttr+0x40a>
   13e2c:	7809      	ldrb	r1, [r1, #0]
   13e2e:	7868      	ldrb	r0, [r5, #1]
   13e30:	4b34      	ldr	r3, [pc, #208]	; (13f04 <LORAWAN_SetAttr+0x520>)
   13e32:	e7dc      	b.n	13dee <LORAWAN_SetAttr+0x40a>
   13e34:	2300      	movs	r3, #0
   13e36:	466a      	mov	r2, sp
   13e38:	7809      	ldrb	r1, [r1, #0]
   13e3a:	7013      	strb	r3, [r2, #0]
   13e3c:	4299      	cmp	r1, r3
   13e3e:	d014      	beq.n	13e6a <LORAWAN_SetAttr+0x486>
   13e40:	0022      	movs	r2, r4
   13e42:	2102      	movs	r1, #2
   13e44:	32ff      	adds	r2, #255	; 0xff
   13e46:	7c53      	ldrb	r3, [r2, #17]
   13e48:	420b      	tst	r3, r1
   13e4a:	d001      	beq.n	13e50 <LORAWAN_SetAttr+0x46c>
   13e4c:	438b      	bics	r3, r1
   13e4e:	7453      	strb	r3, [r2, #17]
   13e50:	2220      	movs	r2, #32
   13e52:	34ff      	adds	r4, #255	; 0xff
   13e54:	7c63      	ldrb	r3, [r4, #17]
   13e56:	4213      	tst	r3, r2
   13e58:	d100      	bne.n	13e5c <LORAWAN_SetAttr+0x478>
   13e5a:	e62e      	b.n	13aba <LORAWAN_SetAttr+0xd6>
   13e5c:	4393      	bics	r3, r2
   13e5e:	7463      	strb	r3, [r4, #17]
   13e60:	4669      	mov	r1, sp
   13e62:	4b29      	ldr	r3, [pc, #164]	; (13f08 <LORAWAN_SetAttr+0x524>)
   13e64:	2039      	movs	r0, #57	; 0x39
   13e66:	4798      	blx	r3
   13e68:	e627      	b.n	13aba <LORAWAN_SetAttr+0xd6>
   13e6a:	4a28      	ldr	r2, [pc, #160]	; (13f0c <LORAWAN_SetAttr+0x528>)
   13e6c:	4b28      	ldr	r3, [pc, #160]	; (13f10 <LORAWAN_SetAttr+0x52c>)
   13e6e:	200e      	movs	r0, #14
   13e70:	4798      	blx	r3
   13e72:	e622      	b.n	13aba <LORAWAN_SetAttr+0xd6>
   13e74:	466b      	mov	r3, sp
   13e76:	780a      	ldrb	r2, [r1, #0]
   13e78:	34ff      	adds	r4, #255	; 0xff
   13e7a:	701a      	strb	r2, [r3, #0]
   13e7c:	2320      	movs	r3, #32
   13e7e:	2a00      	cmp	r2, #0
   13e80:	d007      	beq.n	13e92 <LORAWAN_SetAttr+0x4ae>
   13e82:	7c62      	ldrb	r2, [r4, #17]
   13e84:	4313      	orrs	r3, r2
   13e86:	7463      	strb	r3, [r4, #17]
   13e88:	4669      	mov	r1, sp
   13e8a:	4b1f      	ldr	r3, [pc, #124]	; (13f08 <LORAWAN_SetAttr+0x524>)
   13e8c:	2039      	movs	r0, #57	; 0x39
   13e8e:	4798      	blx	r3
   13e90:	e78f      	b.n	13db2 <LORAWAN_SetAttr+0x3ce>
   13e92:	7c62      	ldrb	r2, [r4, #17]
   13e94:	260a      	movs	r6, #10
   13e96:	421a      	tst	r2, r3
   13e98:	d100      	bne.n	13e9c <LORAWAN_SetAttr+0x4b8>
   13e9a:	e6c6      	b.n	13c2a <LORAWAN_SetAttr+0x246>
   13e9c:	439a      	bics	r2, r3
   13e9e:	7462      	strb	r2, [r4, #17]
   13ea0:	e7f2      	b.n	13e88 <LORAWAN_SetAttr+0x4a4>
   13ea2:	780b      	ldrb	r3, [r1, #0]
   13ea4:	260a      	movs	r6, #10
   13ea6:	2b08      	cmp	r3, #8
   13ea8:	d900      	bls.n	13eac <LORAWAN_SetAttr+0x4c8>
   13eaa:	e6be      	b.n	13c2a <LORAWAN_SetAttr+0x246>
   13eac:	2288      	movs	r2, #136	; 0x88
   13eae:	0092      	lsls	r2, r2, #2
   13eb0:	54a3      	strb	r3, [r4, r2]
   13eb2:	210d      	movs	r1, #13
   13eb4:	e728      	b.n	13d08 <LORAWAN_SetAttr+0x324>
   13eb6:	780a      	ldrb	r2, [r1, #0]
   13eb8:	4b16      	ldr	r3, [pc, #88]	; (13f14 <LORAWAN_SetAttr+0x530>)
   13eba:	54e2      	strb	r2, [r4, r3]
   13ebc:	e5fd      	b.n	13aba <LORAWAN_SetAttr+0xd6>
   13ebe:	4b16      	ldr	r3, [pc, #88]	; (13f18 <LORAWAN_SetAttr+0x534>)
   13ec0:	4798      	blx	r3
   13ec2:	e776      	b.n	13db2 <LORAWAN_SetAttr+0x3ce>
   13ec4:	0000e0dd 	.word	0x0000e0dd
   13ec8:	00012e79 	.word	0x00012e79
   13ecc:	00012e09 	.word	0x00012e09
   13ed0:	00011969 	.word	0x00011969
   13ed4:	0001192d 	.word	0x0001192d
   13ed8:	00013969 	.word	0x00013969
   13edc:	00010759 	.word	0x00010759
   13ee0:	20002ea0 	.word	0x20002ea0
   13ee4:	00014435 	.word	0x00014435
   13ee8:	0001468d 	.word	0x0001468d
   13eec:	000146d9 	.word	0x000146d9
   13ef0:	00014645 	.word	0x00014645
   13ef4:	00014725 	.word	0x00014725
   13ef8:	00014745 	.word	0x00014745
   13efc:	00014761 	.word	0x00014761
   13f00:	00014795 	.word	0x00014795
   13f04:	000147cd 	.word	0x000147cd
   13f08:	0000da29 	.word	0x0000da29
   13f0c:	20002c6c 	.word	0x20002c6c
   13f10:	0000d901 	.word	0x0000d901
   13f14:	00000221 	.word	0x00000221
   13f18:	000107f5 	.word	0x000107f5

00013f1c <LORAWAN_Reset>:
   13f1c:	b5f0      	push	{r4, r5, r6, r7, lr}
   13f1e:	b087      	sub	sp, #28
   13f20:	ab02      	add	r3, sp, #8
   13f22:	1ddd      	adds	r5, r3, #7
   13f24:	23ff      	movs	r3, #255	; 0xff
   13f26:	4c83      	ldr	r4, [pc, #524]	; (14134 <LORAWAN_Reset+0x218>)
   13f28:	702b      	strb	r3, [r5, #0]
   13f2a:	0023      	movs	r3, r4
   13f2c:	9001      	str	r0, [sp, #4]
   13f2e:	33ef      	adds	r3, #239	; 0xef
   13f30:	781b      	ldrb	r3, [r3, #0]
   13f32:	2b00      	cmp	r3, #0
   13f34:	d001      	beq.n	13f3a <LORAWAN_Reset+0x1e>
   13f36:	4b80      	ldr	r3, [pc, #512]	; (14138 <LORAWAN_Reset+0x21c>)
   13f38:	4798      	blx	r3
   13f3a:	002a      	movs	r2, r5
   13f3c:	4b7f      	ldr	r3, [pc, #508]	; (1413c <LORAWAN_Reset+0x220>)
   13f3e:	2100      	movs	r1, #0
   13f40:	2023      	movs	r0, #35	; 0x23
   13f42:	4798      	blx	r3
   13f44:	782b      	ldrb	r3, [r5, #0]
   13f46:	9a01      	ldr	r2, [sp, #4]
   13f48:	4293      	cmp	r3, r2
   13f4a:	d001      	beq.n	13f50 <LORAWAN_Reset+0x34>
   13f4c:	4b7c      	ldr	r3, [pc, #496]	; (14140 <LORAWAN_Reset+0x224>)
   13f4e:	4798      	blx	r3
   13f50:	238c      	movs	r3, #140	; 0x8c
   13f52:	0021      	movs	r1, r4
   13f54:	4a7b      	ldr	r2, [pc, #492]	; (14144 <LORAWAN_Reset+0x228>)
   13f56:	009b      	lsls	r3, r3, #2
   13f58:	50e2      	str	r2, [r4, r3]
   13f5a:	3bfd      	subs	r3, #253	; 0xfd
   13f5c:	31f7      	adds	r1, #247	; 0xf7
   13f5e:	3bff      	subs	r3, #255	; 0xff
   13f60:	700b      	strb	r3, [r1, #0]
   13f62:	2000      	movs	r0, #0
   13f64:	4b78      	ldr	r3, [pc, #480]	; (14148 <LORAWAN_Reset+0x22c>)
   13f66:	4798      	blx	r3
   13f68:	0023      	movs	r3, r4
   13f6a:	2201      	movs	r2, #1
   13f6c:	33f4      	adds	r3, #244	; 0xf4
   13f6e:	701a      	strb	r2, [r3, #0]
   13f70:	0023      	movs	r3, r4
   13f72:	2205      	movs	r2, #5
   13f74:	33f5      	adds	r3, #245	; 0xf5
   13f76:	701a      	strb	r2, [r3, #0]
   13f78:	0023      	movs	r3, r4
   13f7a:	32fa      	adds	r2, #250	; 0xfa
   13f7c:	33dd      	adds	r3, #221	; 0xdd
   13f7e:	701a      	strb	r2, [r3, #0]
   13f80:	0023      	movs	r3, r4
   13f82:	2500      	movs	r5, #0
   13f84:	33de      	adds	r3, #222	; 0xde
   13f86:	701d      	strb	r5, [r3, #0]
   13f88:	0023      	movs	r3, r4
   13f8a:	33c6      	adds	r3, #198	; 0xc6
   13f8c:	801d      	strh	r5, [r3, #0]
   13f8e:	0023      	movs	r3, r4
   13f90:	3308      	adds	r3, #8
   13f92:	67dd      	str	r5, [r3, #124]	; 0x7c
   13f94:	1d23      	adds	r3, r4, #4
   13f96:	67dd      	str	r5, [r3, #124]	; 0x7c
   13f98:	0023      	movs	r3, r4
   13f9a:	33c4      	adds	r3, #196	; 0xc4
   13f9c:	801d      	strh	r5, [r3, #0]
   13f9e:	0023      	movs	r3, r4
   13fa0:	3390      	adds	r3, #144	; 0x90
   13fa2:	701d      	strb	r5, [r3, #0]
   13fa4:	0023      	movs	r3, r4
   13fa6:	33c2      	adds	r3, #194	; 0xc2
   13fa8:	801d      	strh	r5, [r3, #0]
   13faa:	0023      	movs	r3, r4
   13fac:	33ed      	adds	r3, #237	; 0xed
   13fae:	701d      	strb	r5, [r3, #0]
   13fb0:	0023      	movs	r3, r4
   13fb2:	33ee      	adds	r3, #238	; 0xee
   13fb4:	701d      	strb	r5, [r3, #0]
   13fb6:	0023      	movs	r3, r4
   13fb8:	3af9      	subs	r2, #249	; 0xf9
   13fba:	33f8      	adds	r3, #248	; 0xf8
   13fbc:	601a      	str	r2, [r3, #0]
   13fbe:	0023      	movs	r3, r4
   13fc0:	33fc      	adds	r3, #252	; 0xfc
   13fc2:	601d      	str	r5, [r3, #0]
   13fc4:	0023      	movs	r3, r4
   13fc6:	33fe      	adds	r3, #254	; 0xfe
   13fc8:	829d      	strh	r5, [r3, #20]
   13fca:	82dd      	strh	r5, [r3, #22]
   13fcc:	320a      	adds	r2, #10
   13fce:	0029      	movs	r1, r5
   13fd0:	4b5e      	ldr	r3, [pc, #376]	; (1414c <LORAWAN_Reset+0x230>)
   13fd2:	485f      	ldr	r0, [pc, #380]	; (14150 <LORAWAN_Reset+0x234>)
   13fd4:	4798      	blx	r3
   13fd6:	2385      	movs	r3, #133	; 0x85
   13fd8:	2201      	movs	r2, #1
   13fda:	2607      	movs	r6, #7
   13fdc:	009b      	lsls	r3, r3, #2
   13fde:	54e2      	strb	r2, [r4, r3]
   13fe0:	0029      	movs	r1, r5
   13fe2:	0032      	movs	r2, r6
   13fe4:	4b59      	ldr	r3, [pc, #356]	; (1414c <LORAWAN_Reset+0x230>)
   13fe6:	485b      	ldr	r0, [pc, #364]	; (14154 <LORAWAN_Reset+0x238>)
   13fe8:	4798      	blx	r3
   13fea:	2388      	movs	r3, #136	; 0x88
   13fec:	2201      	movs	r2, #1
   13fee:	009b      	lsls	r3, r3, #2
   13ff0:	54e2      	strb	r2, [r4, r3]
   13ff2:	0023      	movs	r3, r4
   13ff4:	338c      	adds	r3, #140	; 0x8c
   13ff6:	801d      	strh	r5, [r3, #0]
   13ff8:	0023      	movs	r3, r4
   13ffa:	33da      	adds	r3, #218	; 0xda
   13ffc:	701e      	strb	r6, [r3, #0]
   13ffe:	0023      	movs	r3, r4
   14000:	33d9      	adds	r3, #217	; 0xd9
   14002:	701d      	strb	r5, [r3, #0]
   14004:	0023      	movs	r3, r4
   14006:	33dc      	adds	r3, #220	; 0xdc
   14008:	701d      	strb	r5, [r3, #0]
   1400a:	0023      	movs	r3, r4
   1400c:	33db      	adds	r3, #219	; 0xdb
   1400e:	701d      	strb	r5, [r3, #0]
   14010:	9801      	ldr	r0, [sp, #4]
   14012:	4b51      	ldr	r3, [pc, #324]	; (14158 <LORAWAN_Reset+0x23c>)
   14014:	67e5      	str	r5, [r4, #124]	; 0x7c
   14016:	4798      	blx	r3
   14018:	0007      	movs	r7, r0
   1401a:	2808      	cmp	r0, #8
   1401c:	d000      	beq.n	14020 <LORAWAN_Reset+0x104>
   1401e:	e086      	b.n	1412e <LORAWAN_Reset+0x212>
   14020:	4e4e      	ldr	r6, [pc, #312]	; (1415c <LORAWAN_Reset+0x240>)
   14022:	4a4f      	ldr	r2, [pc, #316]	; (14160 <LORAWAN_Reset+0x244>)
   14024:	0029      	movs	r1, r5
   14026:	47b0      	blx	r6
   14028:	4a4e      	ldr	r2, [pc, #312]	; (14164 <LORAWAN_Reset+0x248>)
   1402a:	0029      	movs	r1, r5
   1402c:	200e      	movs	r0, #14
   1402e:	47b0      	blx	r6
   14030:	0023      	movs	r3, r4
   14032:	4a4d      	ldr	r2, [pc, #308]	; (14168 <LORAWAN_Reset+0x24c>)
   14034:	33e0      	adds	r3, #224	; 0xe0
   14036:	0029      	movs	r1, r5
   14038:	2006      	movs	r0, #6
   1403a:	701d      	strb	r5, [r3, #0]
   1403c:	47b0      	blx	r6
   1403e:	4b4b      	ldr	r3, [pc, #300]	; (1416c <LORAWAN_Reset+0x250>)
   14040:	4798      	blx	r3
   14042:	466a      	mov	r2, sp
   14044:	0023      	movs	r3, r4
   14046:	7912      	ldrb	r2, [r2, #4]
   14048:	33f6      	adds	r3, #246	; 0xf6
   1404a:	701a      	strb	r2, [r3, #0]
   1404c:	0029      	movs	r1, r5
   1404e:	4b48      	ldr	r3, [pc, #288]	; (14170 <LORAWAN_Reset+0x254>)
   14050:	0028      	movs	r0, r5
   14052:	4798      	blx	r3
   14054:	2210      	movs	r2, #16
   14056:	34ff      	adds	r4, #255	; 0xff
   14058:	7c63      	ldrb	r3, [r4, #17]
   1405a:	4213      	tst	r3, r2
   1405c:	d006      	beq.n	1406c <LORAWAN_Reset+0x150>
   1405e:	ab02      	add	r3, sp, #8
   14060:	1d99      	adds	r1, r3, #6
   14062:	2301      	movs	r3, #1
   14064:	0038      	movs	r0, r7
   14066:	700b      	strb	r3, [r1, #0]
   14068:	4b37      	ldr	r3, [pc, #220]	; (14148 <LORAWAN_Reset+0x22c>)
   1406a:	4798      	blx	r3
   1406c:	4b41      	ldr	r3, [pc, #260]	; (14174 <LORAWAN_Reset+0x258>)
   1406e:	4942      	ldr	r1, [pc, #264]	; (14178 <LORAWAN_Reset+0x25c>)
   14070:	201e      	movs	r0, #30
   14072:	4798      	blx	r3
   14074:	4c2f      	ldr	r4, [pc, #188]	; (14134 <LORAWAN_Reset+0x218>)
   14076:	0023      	movs	r3, r4
   14078:	33ff      	adds	r3, #255	; 0xff
   1407a:	7c5b      	ldrb	r3, [r3, #17]
   1407c:	075b      	lsls	r3, r3, #29
   1407e:	d507      	bpl.n	14090 <LORAWAN_Reset+0x174>
   14080:	2100      	movs	r1, #0
   14082:	aa04      	add	r2, sp, #16
   14084:	2032      	movs	r0, #50	; 0x32
   14086:	47b0      	blx	r6
   14088:	a904      	add	r1, sp, #16
   1408a:	2027      	movs	r0, #39	; 0x27
   1408c:	4b3b      	ldr	r3, [pc, #236]	; (1417c <LORAWAN_Reset+0x260>)
   1408e:	4798      	blx	r3
   14090:	4a3b      	ldr	r2, [pc, #236]	; (14180 <LORAWAN_Reset+0x264>)
   14092:	2100      	movs	r1, #0
   14094:	2009      	movs	r0, #9
   14096:	47b0      	blx	r6
   14098:	4a3a      	ldr	r2, [pc, #232]	; (14184 <LORAWAN_Reset+0x268>)
   1409a:	2100      	movs	r1, #0
   1409c:	200a      	movs	r0, #10
   1409e:	47b0      	blx	r6
   140a0:	4a39      	ldr	r2, [pc, #228]	; (14188 <LORAWAN_Reset+0x26c>)
   140a2:	2100      	movs	r1, #0
   140a4:	2036      	movs	r0, #54	; 0x36
   140a6:	47b0      	blx	r6
   140a8:	ad04      	add	r5, sp, #16
   140aa:	4a38      	ldr	r2, [pc, #224]	; (1418c <LORAWAN_Reset+0x270>)
   140ac:	2100      	movs	r1, #0
   140ae:	2037      	movs	r0, #55	; 0x37
   140b0:	47b0      	blx	r6
   140b2:	002a      	movs	r2, r5
   140b4:	2100      	movs	r1, #0
   140b6:	2014      	movs	r0, #20
   140b8:	47b0      	blx	r6
   140ba:	0023      	movs	r3, r4
   140bc:	782a      	ldrb	r2, [r5, #0]
   140be:	33ea      	adds	r3, #234	; 0xea
   140c0:	701a      	strb	r2, [r3, #0]
   140c2:	0023      	movs	r3, r4
   140c4:	786a      	ldrb	r2, [r5, #1]
   140c6:	33eb      	adds	r3, #235	; 0xeb
   140c8:	701a      	strb	r2, [r3, #0]
   140ca:	0023      	movs	r3, r4
   140cc:	2500      	movs	r5, #0
   140ce:	33d6      	adds	r3, #214	; 0xd6
   140d0:	801d      	strh	r5, [r3, #0]
   140d2:	2265      	movs	r2, #101	; 0x65
   140d4:	0029      	movs	r1, r5
   140d6:	0020      	movs	r0, r4
   140d8:	4b1c      	ldr	r3, [pc, #112]	; (1414c <LORAWAN_Reset+0x230>)
   140da:	4798      	blx	r3
   140dc:	0023      	movs	r3, r4
   140de:	22fa      	movs	r2, #250	; 0xfa
   140e0:	33c8      	adds	r3, #200	; 0xc8
   140e2:	0092      	lsls	r2, r2, #2
   140e4:	801a      	strh	r2, [r3, #0]
   140e6:	0022      	movs	r2, r4
   140e8:	23fa      	movs	r3, #250	; 0xfa
   140ea:	32ca      	adds	r2, #202	; 0xca
   140ec:	00db      	lsls	r3, r3, #3
   140ee:	8013      	strh	r3, [r2, #0]
   140f0:	0022      	movs	r2, r4
   140f2:	4927      	ldr	r1, [pc, #156]	; (14190 <LORAWAN_Reset+0x274>)
   140f4:	32cc      	adds	r2, #204	; 0xcc
   140f6:	8011      	strh	r1, [r2, #0]
   140f8:	0022      	movs	r2, r4
   140fa:	4926      	ldr	r1, [pc, #152]	; (14194 <LORAWAN_Reset+0x278>)
   140fc:	32ce      	adds	r2, #206	; 0xce
   140fe:	8011      	strh	r1, [r2, #0]
   14100:	0022      	movs	r2, r4
   14102:	32d2      	adds	r2, #210	; 0xd2
   14104:	8013      	strh	r3, [r2, #0]
   14106:	0023      	movs	r3, r4
   14108:	2220      	movs	r2, #32
   1410a:	33d5      	adds	r3, #213	; 0xd5
   1410c:	701a      	strb	r2, [r3, #0]
   1410e:	0023      	movs	r3, r4
   14110:	1892      	adds	r2, r2, r2
   14112:	33d4      	adds	r3, #212	; 0xd4
   14114:	701a      	strb	r2, [r3, #0]
   14116:	2380      	movs	r3, #128	; 0x80
   14118:	34d0      	adds	r4, #208	; 0xd0
   1411a:	01db      	lsls	r3, r3, #7
   1411c:	8023      	strh	r3, [r4, #0]
   1411e:	0028      	movs	r0, r5
   14120:	4b1d      	ldr	r3, [pc, #116]	; (14198 <LORAWAN_Reset+0x27c>)
   14122:	4798      	blx	r3
   14124:	4b1d      	ldr	r3, [pc, #116]	; (1419c <LORAWAN_Reset+0x280>)
   14126:	4798      	blx	r3
   14128:	0038      	movs	r0, r7
   1412a:	b007      	add	sp, #28
   1412c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1412e:	270a      	movs	r7, #10
   14130:	e7fa      	b.n	14128 <LORAWAN_Reset+0x20c>
   14132:	46c0      	nop			; (mov r8, r8)
   14134:	20002b5c 	.word	0x20002b5c
   14138:	0000fe09 	.word	0x0000fe09
   1413c:	000119a1 	.word	0x000119a1
   14140:	0000db7d 	.word	0x0000db7d
   14144:	01050000 	.word	0x01050000
   14148:	00014c4d 	.word	0x00014c4d
   1414c:	00019ead 	.word	0x00019ead
   14150:	20002c5c 	.word	0x20002c5c
   14154:	20002d73 	.word	0x20002d73
   14158:	0000da9d 	.word	0x0000da9d
   1415c:	0000d901 	.word	0x0000d901
   14160:	20002bc5 	.word	0x20002bc5
   14164:	20002c6c 	.word	0x20002c6c
   14168:	20002c48 	.word	0x20002c48
   1416c:	00014e49 	.word	0x00014e49
   14170:	0000e0dd 	.word	0x0000e0dd
   14174:	00014b5d 	.word	0x00014b5d
   14178:	20002d7b 	.word	0x20002d7b
   1417c:	000139e5 	.word	0x000139e5
   14180:	20002bca 	.word	0x20002bca
   14184:	20002bc6 	.word	0x20002bc6
   14188:	20002c3d 	.word	0x20002c3d
   1418c:	20002c3b 	.word	0x20002c3b
   14190:	00001388 	.word	0x00001388
   14194:	00001770 	.word	0x00001770
   14198:	00010759 	.word	0x00010759
   1419c:	000143e1 	.word	0x000143e1

000141a0 <LORAWAN_ReadyToSleep>:
   141a0:	4b08      	ldr	r3, [pc, #32]	; (141c4 <LORAWAN_ReadyToSleep+0x24>)
   141a2:	001a      	movs	r2, r3
   141a4:	32f4      	adds	r2, #244	; 0xf4
   141a6:	7812      	ldrb	r2, [r2, #0]
   141a8:	2a01      	cmp	r2, #1
   141aa:	d002      	beq.n	141b2 <LORAWAN_ReadyToSleep+0x12>
   141ac:	2000      	movs	r0, #0
   141ae:	2a04      	cmp	r2, #4
   141b0:	d106      	bne.n	141c0 <LORAWAN_ReadyToSleep+0x20>
   141b2:	337c      	adds	r3, #124	; 0x7c
   141b4:	7818      	ldrb	r0, [r3, #0]
   141b6:	230e      	movs	r3, #14
   141b8:	4018      	ands	r0, r3
   141ba:	4243      	negs	r3, r0
   141bc:	4158      	adcs	r0, r3
   141be:	b2c0      	uxtb	r0, r0
   141c0:	4770      	bx	lr
   141c2:	46c0      	nop			; (mov r8, r8)
   141c4:	20002b5c 	.word	0x20002b5c

000141c8 <LorawanClasscUlAckTimerCallback>:
   141c8:	2102      	movs	r1, #2
   141ca:	4b03      	ldr	r3, [pc, #12]	; (141d8 <LorawanClasscUlAckTimerCallback+0x10>)
   141cc:	338c      	adds	r3, #140	; 0x8c
   141ce:	781a      	ldrb	r2, [r3, #0]
   141d0:	438a      	bics	r2, r1
   141d2:	701a      	strb	r2, [r3, #0]
   141d4:	4770      	bx	lr
   141d6:	46c0      	nop			; (mov r8, r8)
   141d8:	20002b5c 	.word	0x20002b5c

000141dc <LorawanClasscValidateSend>:
   141dc:	2385      	movs	r3, #133	; 0x85
   141de:	b510      	push	{r4, lr}
   141e0:	4c0a      	ldr	r4, [pc, #40]	; (1420c <LorawanClasscValidateSend+0x30>)
   141e2:	009b      	lsls	r3, r3, #2
   141e4:	5ce3      	ldrb	r3, [r4, r3]
   141e6:	2b00      	cmp	r3, #0
   141e8:	d008      	beq.n	141fc <LorawanClasscValidateSend+0x20>
   141ea:	220e      	movs	r2, #14
   141ec:	347c      	adds	r4, #124	; 0x7c
   141ee:	7823      	ldrb	r3, [r4, #0]
   141f0:	2008      	movs	r0, #8
   141f2:	4013      	ands	r3, r2
   141f4:	2b02      	cmp	r3, #2
   141f6:	d100      	bne.n	141fa <LorawanClasscValidateSend+0x1e>
   141f8:	2011      	movs	r0, #17
   141fa:	bd10      	pop	{r4, pc}
   141fc:	0023      	movs	r3, r4
   141fe:	33ff      	adds	r3, #255	; 0xff
   14200:	7f58      	ldrb	r0, [r3, #29]
   14202:	4b03      	ldr	r3, [pc, #12]	; (14210 <LorawanClasscValidateSend+0x34>)
   14204:	4798      	blx	r3
   14206:	2800      	cmp	r0, #0
   14208:	d1ef      	bne.n	141ea <LorawanClasscValidateSend+0xe>
   1420a:	e7f5      	b.n	141f8 <LorawanClasscValidateSend+0x1c>
   1420c:	20002b5c 	.word	0x20002b5c
   14210:	0000efa5 	.word	0x0000efa5

00014214 <LorawanClasscPause>:
   14214:	b537      	push	{r0, r1, r2, r4, r5, lr}
   14216:	4c16      	ldr	r4, [pc, #88]	; (14270 <LorawanClasscPause+0x5c>)
   14218:	220e      	movs	r2, #14
   1421a:	0023      	movs	r3, r4
   1421c:	337c      	adds	r3, #124	; 0x7c
   1421e:	781b      	ldrb	r3, [r3, #0]
   14220:	4013      	ands	r3, r2
   14222:	2b0a      	cmp	r3, #10
   14224:	d121      	bne.n	1426a <LorawanClasscPause+0x56>
   14226:	2385      	movs	r3, #133	; 0x85
   14228:	009b      	lsls	r3, r3, #2
   1422a:	5ce3      	ldrb	r3, [r4, r3]
   1422c:	2b00      	cmp	r3, #0
   1422e:	d00c      	beq.n	1424a <LorawanClasscPause+0x36>
   14230:	2301      	movs	r3, #1
   14232:	a801      	add	r0, sp, #4
   14234:	7003      	strb	r3, [r0, #0]
   14236:	4b0f      	ldr	r3, [pc, #60]	; (14274 <LorawanClasscPause+0x60>)
   14238:	4798      	blx	r3
   1423a:	220e      	movs	r2, #14
   1423c:	2001      	movs	r0, #1
   1423e:	347c      	adds	r4, #124	; 0x7c
   14240:	7823      	ldrb	r3, [r4, #0]
   14242:	4240      	negs	r0, r0
   14244:	4393      	bics	r3, r2
   14246:	7023      	strb	r3, [r4, #0]
   14248:	e007      	b.n	1425a <LorawanClasscPause+0x46>
   1424a:	0023      	movs	r3, r4
   1424c:	33e8      	adds	r3, #232	; 0xe8
   1424e:	7818      	ldrb	r0, [r3, #0]
   14250:	4d09      	ldr	r5, [pc, #36]	; (14278 <LorawanClasscPause+0x64>)
   14252:	47a8      	blx	r5
   14254:	2800      	cmp	r0, #0
   14256:	d001      	beq.n	1425c <LorawanClasscPause+0x48>
   14258:	2000      	movs	r0, #0
   1425a:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
   1425c:	0023      	movs	r3, r4
   1425e:	33ff      	adds	r3, #255	; 0xff
   14260:	7f58      	ldrb	r0, [r3, #29]
   14262:	47a8      	blx	r5
   14264:	2800      	cmp	r0, #0
   14266:	d0e8      	beq.n	1423a <LorawanClasscPause+0x26>
   14268:	e7f6      	b.n	14258 <LorawanClasscPause+0x44>
   1426a:	2b00      	cmp	r3, #0
   1426c:	d0e5      	beq.n	1423a <LorawanClasscPause+0x26>
   1426e:	e7f3      	b.n	14258 <LorawanClasscPause+0x44>
   14270:	20002b5c 	.word	0x20002b5c
   14274:	00015e51 	.word	0x00015e51
   14278:	0000efa5 	.word	0x0000efa5

0001427c <LorawanClasscReceiveWindow1Callback>:
   1427c:	2301      	movs	r3, #1
   1427e:	b507      	push	{r0, r1, r2, lr}
   14280:	a801      	add	r0, sp, #4
   14282:	7003      	strb	r3, [r0, #0]
   14284:	4b01      	ldr	r3, [pc, #4]	; (1428c <LorawanClasscReceiveWindow1Callback+0x10>)
   14286:	4798      	blx	r3
   14288:	bd07      	pop	{r0, r1, r2, pc}
   1428a:	46c0      	nop			; (mov r8, r8)
   1428c:	00015e51 	.word	0x00015e51

00014290 <LorawanClasscRxDone>:
   14290:	b537      	push	{r0, r1, r2, r4, r5, lr}
   14292:	221f      	movs	r2, #31
   14294:	7803      	ldrb	r3, [r0, #0]
   14296:	4c13      	ldr	r4, [pc, #76]	; (142e4 <LorawanClasscRxDone+0x54>)
   14298:	4393      	bics	r3, r2
   1429a:	2ba0      	cmp	r3, #160	; 0xa0
   1429c:	d10c      	bne.n	142b8 <LorawanClasscRxDone+0x28>
   1429e:	0025      	movs	r5, r4
   142a0:	35ff      	adds	r5, #255	; 0xff
   142a2:	7f68      	ldrb	r0, [r5, #29]
   142a4:	4b10      	ldr	r3, [pc, #64]	; (142e8 <LorawanClasscRxDone+0x58>)
   142a6:	4798      	blx	r3
   142a8:	1e02      	subs	r2, r0, #0
   142aa:	d014      	beq.n	142d6 <LorawanClasscRxDone+0x46>
   142ac:	0022      	movs	r2, r4
   142ae:	2102      	movs	r1, #2
   142b0:	328c      	adds	r2, #140	; 0x8c
   142b2:	7813      	ldrb	r3, [r2, #0]
   142b4:	438b      	bics	r3, r1
   142b6:	7013      	strb	r3, [r2, #0]
   142b8:	347c      	adds	r4, #124	; 0x7c
   142ba:	7823      	ldrb	r3, [r4, #0]
   142bc:	220e      	movs	r2, #14
   142be:	0019      	movs	r1, r3
   142c0:	4011      	ands	r1, r2
   142c2:	2906      	cmp	r1, #6
   142c4:	d103      	bne.n	142ce <LorawanClasscRxDone+0x3e>
   142c6:	4393      	bics	r3, r2
   142c8:	3a04      	subs	r2, #4
   142ca:	4313      	orrs	r3, r2
   142cc:	7023      	strb	r3, [r4, #0]
   142ce:	2000      	movs	r0, #0
   142d0:	4b06      	ldr	r3, [pc, #24]	; (142ec <LorawanClasscRxDone+0x5c>)
   142d2:	4798      	blx	r3
   142d4:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
   142d6:	7f68      	ldrb	r0, [r5, #29]
   142d8:	4b05      	ldr	r3, [pc, #20]	; (142f0 <LorawanClasscRxDone+0x60>)
   142da:	9200      	str	r2, [sp, #0]
   142dc:	4905      	ldr	r1, [pc, #20]	; (142f4 <LorawanClasscRxDone+0x64>)
   142de:	4d06      	ldr	r5, [pc, #24]	; (142f8 <LorawanClasscRxDone+0x68>)
   142e0:	47a8      	blx	r5
   142e2:	e7e9      	b.n	142b8 <LorawanClasscRxDone+0x28>
   142e4:	20002b5c 	.word	0x20002b5c
   142e8:	0000efa5 	.word	0x0000efa5
   142ec:	0001273d 	.word	0x0001273d
   142f0:	000141c9 	.word	0x000141c9
   142f4:	001e8480 	.word	0x001e8480
   142f8:	0000ee0d 	.word	0x0000ee0d

000142fc <LorawanClasscTxDone>:
   142fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
   142fe:	4c1a      	ldr	r4, [pc, #104]	; (14368 <LorawanClasscTxDone+0x6c>)
   14300:	0023      	movs	r3, r4
   14302:	33ca      	adds	r3, #202	; 0xca
   14304:	881d      	ldrh	r5, [r3, #0]
   14306:	0023      	movs	r3, r4
   14308:	338c      	adds	r3, #140	; 0x8c
   1430a:	781b      	ldrb	r3, [r3, #0]
   1430c:	07db      	lsls	r3, r3, #31
   1430e:	d524      	bpl.n	1435a <LorawanClasscTxDone+0x5e>
   14310:	0023      	movs	r3, r4
   14312:	0022      	movs	r2, r4
   14314:	33da      	adds	r3, #218	; 0xda
   14316:	781b      	ldrb	r3, [r3, #0]
   14318:	32dc      	adds	r2, #220	; 0xdc
   1431a:	3301      	adds	r3, #1
   1431c:	7812      	ldrb	r2, [r2, #0]
   1431e:	4293      	cmp	r3, r2
   14320:	db06      	blt.n	14330 <LorawanClasscTxDone+0x34>
   14322:	4b12      	ldr	r3, [pc, #72]	; (1436c <LorawanClasscTxDone+0x70>)
   14324:	5ce3      	ldrb	r3, [r4, r3]
   14326:	2b00      	cmp	r3, #0
   14328:	d002      	beq.n	14330 <LorawanClasscTxDone+0x34>
   1432a:	23fa      	movs	r3, #250	; 0xfa
   1432c:	00db      	lsls	r3, r3, #3
   1432e:	18ed      	adds	r5, r5, r3
   14330:	0023      	movs	r3, r4
   14332:	33ff      	adds	r3, #255	; 0xff
   14334:	1945      	adds	r5, r0, r5
   14336:	7f58      	ldrb	r0, [r3, #29]
   14338:	4b0d      	ldr	r3, [pc, #52]	; (14370 <LorawanClasscTxDone+0x74>)
   1433a:	4798      	blx	r3
   1433c:	34e8      	adds	r4, #232	; 0xe8
   1433e:	21fa      	movs	r1, #250	; 0xfa
   14340:	7820      	ldrb	r0, [r4, #0]
   14342:	2400      	movs	r4, #0
   14344:	0089      	lsls	r1, r1, #2
   14346:	4369      	muls	r1, r5
   14348:	0022      	movs	r2, r4
   1434a:	4d0a      	ldr	r5, [pc, #40]	; (14374 <LorawanClasscTxDone+0x78>)
   1434c:	9400      	str	r4, [sp, #0]
   1434e:	4b0a      	ldr	r3, [pc, #40]	; (14378 <LorawanClasscTxDone+0x7c>)
   14350:	47a8      	blx	r5
   14352:	0020      	movs	r0, r4
   14354:	4b09      	ldr	r3, [pc, #36]	; (1437c <LorawanClasscTxDone+0x80>)
   14356:	4798      	blx	r3
   14358:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
   1435a:	0023      	movs	r3, r4
   1435c:	0022      	movs	r2, r4
   1435e:	33d9      	adds	r3, #217	; 0xd9
   14360:	781b      	ldrb	r3, [r3, #0]
   14362:	32db      	adds	r2, #219	; 0xdb
   14364:	3301      	adds	r3, #1
   14366:	e7d9      	b.n	1431c <LorawanClasscTxDone+0x20>
   14368:	20002b5c 	.word	0x20002b5c
   1436c:	0000021e 	.word	0x0000021e
   14370:	0000f125 	.word	0x0000f125
   14374:	0000ee0d 	.word	0x0000ee0d
   14378:	00012605 	.word	0x00012605
   1437c:	0001273d 	.word	0x0001273d

00014380 <LorawanClasscRxTimeout>:
   14380:	b510      	push	{r4, lr}
   14382:	4b08      	ldr	r3, [pc, #32]	; (143a4 <LorawanClasscRxTimeout+0x24>)
   14384:	210e      	movs	r1, #14
   14386:	337c      	adds	r3, #124	; 0x7c
   14388:	781a      	ldrb	r2, [r3, #0]
   1438a:	0010      	movs	r0, r2
   1438c:	4008      	ands	r0, r1
   1438e:	2806      	cmp	r0, #6
   14390:	d106      	bne.n	143a0 <LorawanClasscRxTimeout+0x20>
   14392:	438a      	bics	r2, r1
   14394:	3904      	subs	r1, #4
   14396:	430a      	orrs	r2, r1
   14398:	701a      	strb	r2, [r3, #0]
   1439a:	2000      	movs	r0, #0
   1439c:	4b02      	ldr	r3, [pc, #8]	; (143a8 <LorawanClasscRxTimeout+0x28>)
   1439e:	4798      	blx	r3
   143a0:	bd10      	pop	{r4, pc}
   143a2:	46c0      	nop			; (mov r8, r8)
   143a4:	20002b5c 	.word	0x20002b5c
   143a8:	0001273d 	.word	0x0001273d

000143ac <LorawanClasscNotifyAppOnReceive>:
   143ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   143ae:	001f      	movs	r7, r3
   143b0:	4b08      	ldr	r3, [pc, #32]	; (143d4 <LorawanClasscNotifyAppOnReceive+0x28>)
   143b2:	0004      	movs	r4, r0
   143b4:	33ff      	adds	r3, #255	; 0xff
   143b6:	7f58      	ldrb	r0, [r3, #29]
   143b8:	4b07      	ldr	r3, [pc, #28]	; (143d8 <LorawanClasscNotifyAppOnReceive+0x2c>)
   143ba:	000d      	movs	r5, r1
   143bc:	0016      	movs	r6, r2
   143be:	4798      	blx	r3
   143c0:	2800      	cmp	r0, #0
   143c2:	d105      	bne.n	143d0 <LorawanClasscNotifyAppOnReceive+0x24>
   143c4:	0020      	movs	r0, r4
   143c6:	003b      	movs	r3, r7
   143c8:	0032      	movs	r2, r6
   143ca:	0029      	movs	r1, r5
   143cc:	4c03      	ldr	r4, [pc, #12]	; (143dc <LorawanClasscNotifyAppOnReceive+0x30>)
   143ce:	47a0      	blx	r4
   143d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   143d2:	46c0      	nop			; (mov r8, r8)
   143d4:	20002b5c 	.word	0x20002b5c
   143d8:	0000efa5 	.word	0x0000efa5
   143dc:	00011831 	.word	0x00011831

000143e0 <LorawanMcastInit>:
   143e0:	2290      	movs	r2, #144	; 0x90
   143e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   143e4:	2500      	movs	r5, #0
   143e6:	4b0f      	ldr	r3, [pc, #60]	; (14424 <LorawanMcastInit+0x44>)
   143e8:	0052      	lsls	r2, r2, #1
   143ea:	549d      	strb	r5, [r3, r2]
   143ec:	2222      	movs	r2, #34	; 0x22
   143ee:	2701      	movs	r7, #1
   143f0:	32ff      	adds	r2, #255	; 0xff
   143f2:	4c0d      	ldr	r4, [pc, #52]	; (14428 <LorawanMcastInit+0x48>)
   143f4:	549d      	strb	r5, [r3, r2]
   143f6:	427f      	negs	r7, r7
   143f8:	0023      	movs	r3, r4
   143fa:	3b14      	subs	r3, #20
   143fc:	601f      	str	r7, [r3, #0]
   143fe:	2210      	movs	r2, #16
   14400:	2100      	movs	r1, #0
   14402:	0020      	movs	r0, r4
   14404:	4e09      	ldr	r6, [pc, #36]	; (1442c <LorawanMcastInit+0x4c>)
   14406:	47b0      	blx	r6
   14408:	0020      	movs	r0, r4
   1440a:	2210      	movs	r2, #16
   1440c:	3810      	subs	r0, #16
   1440e:	2100      	movs	r1, #0
   14410:	47b0      	blx	r6
   14412:	4b07      	ldr	r3, [pc, #28]	; (14430 <LorawanMcastInit+0x50>)
   14414:	6165      	str	r5, [r4, #20]
   14416:	61a5      	str	r5, [r4, #24]
   14418:	6125      	str	r5, [r4, #16]
   1441a:	343c      	adds	r4, #60	; 0x3c
   1441c:	429c      	cmp	r4, r3
   1441e:	d1eb      	bne.n	143f8 <LorawanMcastInit+0x18>
   14420:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   14422:	46c0      	nop			; (mov r8, r8)
   14424:	20002b5c 	.word	0x20002b5c
   14428:	20002c94 	.word	0x20002c94
   1442c:	00019ead 	.word	0x00019ead
   14430:	20002d84 	.word	0x20002d84

00014434 <LorawanMcastEnable>:
   14434:	0002      	movs	r2, r0
   14436:	b510      	push	{r4, lr}
   14438:	200a      	movs	r0, #10
   1443a:	2903      	cmp	r1, #3
   1443c:	d822      	bhi.n	14484 <LorawanMcastEnable+0x50>
   1443e:	4b1a      	ldr	r3, [pc, #104]	; (144a8 <LorawanMcastEnable+0x74>)
   14440:	2a00      	cmp	r2, #0
   14442:	d020      	beq.n	14486 <LorawanMcastEnable+0x52>
   14444:	223c      	movs	r2, #60	; 0x3c
   14446:	434a      	muls	r2, r1
   14448:	189a      	adds	r2, r3, r2
   1444a:	3251      	adds	r2, #81	; 0x51
   1444c:	32ff      	adds	r2, #255	; 0xff
   1444e:	7912      	ldrb	r2, [r2, #4]
   14450:	0754      	lsls	r4, r2, #29
   14452:	d512      	bpl.n	1447a <LorawanMcastEnable+0x46>
   14454:	0794      	lsls	r4, r2, #30
   14456:	d510      	bpl.n	1447a <LorawanMcastEnable+0x46>
   14458:	07d2      	lsls	r2, r2, #31
   1445a:	0fd2      	lsrs	r2, r2, #31
   1445c:	2a01      	cmp	r2, #1
   1445e:	d10c      	bne.n	1447a <LorawanMcastEnable+0x46>
   14460:	001c      	movs	r4, r3
   14462:	34f4      	adds	r4, #244	; 0xf4
   14464:	7824      	ldrb	r4, [r4, #0]
   14466:	0764      	lsls	r4, r4, #29
   14468:	d007      	beq.n	1447a <LorawanMcastEnable+0x46>
   1446a:	2022      	movs	r0, #34	; 0x22
   1446c:	408a      	lsls	r2, r1
   1446e:	30ff      	adds	r0, #255	; 0xff
   14470:	5c19      	ldrb	r1, [r3, r0]
   14472:	430a      	orrs	r2, r1
   14474:	541a      	strb	r2, [r3, r0]
   14476:	381a      	subs	r0, #26
   14478:	38ff      	subs	r0, #255	; 0xff
   1447a:	2190      	movs	r1, #144	; 0x90
   1447c:	0049      	lsls	r1, r1, #1
   1447e:	5c5a      	ldrb	r2, [r3, r1]
   14480:	3201      	adds	r2, #1
   14482:	545a      	strb	r2, [r3, r1]
   14484:	bd10      	pop	{r4, pc}
   14486:	2201      	movs	r2, #1
   14488:	408a      	lsls	r2, r1
   1448a:	2022      	movs	r0, #34	; 0x22
   1448c:	0011      	movs	r1, r2
   1448e:	30ff      	adds	r0, #255	; 0xff
   14490:	5c1a      	ldrb	r2, [r3, r0]
   14492:	438a      	bics	r2, r1
   14494:	2190      	movs	r1, #144	; 0x90
   14496:	541a      	strb	r2, [r3, r0]
   14498:	0049      	lsls	r1, r1, #1
   1449a:	5c5a      	ldrb	r2, [r3, r1]
   1449c:	381a      	subs	r0, #26
   1449e:	3a01      	subs	r2, #1
   144a0:	545a      	strb	r2, [r3, r1]
   144a2:	38ff      	subs	r0, #255	; 0xff
   144a4:	e7ee      	b.n	14484 <LorawanMcastEnable+0x50>
   144a6:	46c0      	nop			; (mov r8, r8)
   144a8:	20002b5c 	.word	0x20002b5c

000144ac <LorawanMcastValidateHdr>:
   144ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   144ae:	469c      	mov	ip, r3
   144b0:	2400      	movs	r4, #0
   144b2:	230a      	movs	r3, #10
   144b4:	4f18      	ldr	r7, [pc, #96]	; (14518 <LorawanMcastValidateHdr+0x6c>)
   144b6:	b2e5      	uxtb	r5, r4
   144b8:	9501      	str	r5, [sp, #4]
   144ba:	2522      	movs	r5, #34	; 0x22
   144bc:	35ff      	adds	r5, #255	; 0xff
   144be:	5d7d      	ldrb	r5, [r7, r5]
   144c0:	2601      	movs	r6, #1
   144c2:	4125      	asrs	r5, r4
   144c4:	4235      	tst	r5, r6
   144c6:	d022      	beq.n	1450e <LorawanMcastValidateHdr+0x62>
   144c8:	7886      	ldrb	r6, [r0, #2]
   144ca:	7845      	ldrb	r5, [r0, #1]
   144cc:	0236      	lsls	r6, r6, #8
   144ce:	432e      	orrs	r6, r5
   144d0:	78c5      	ldrb	r5, [r0, #3]
   144d2:	042d      	lsls	r5, r5, #16
   144d4:	432e      	orrs	r6, r5
   144d6:	7905      	ldrb	r5, [r0, #4]
   144d8:	062d      	lsls	r5, r5, #24
   144da:	4335      	orrs	r5, r6
   144dc:	263c      	movs	r6, #60	; 0x3c
   144de:	4366      	muls	r6, r4
   144e0:	3625      	adds	r6, #37	; 0x25
   144e2:	36ff      	adds	r6, #255	; 0xff
   144e4:	59be      	ldr	r6, [r7, r6]
   144e6:	42b5      	cmp	r5, r6
   144e8:	d111      	bne.n	1450e <LorawanMcastValidateHdr+0x62>
   144ea:	4d0c      	ldr	r5, [pc, #48]	; (1451c <LorawanMcastValidateHdr+0x70>)
   144ec:	782e      	ldrb	r6, [r5, #0]
   144ee:	2506      	movs	r5, #6
   144f0:	422e      	tst	r6, r5
   144f2:	d00c      	beq.n	1450e <LorawanMcastValidateHdr+0x62>
   144f4:	2a00      	cmp	r2, #0
   144f6:	d00a      	beq.n	1450e <LorawanMcastValidateHdr+0x62>
   144f8:	7946      	ldrb	r6, [r0, #5]
   144fa:	3569      	adds	r5, #105	; 0x69
   144fc:	422e      	tst	r6, r5
   144fe:	d106      	bne.n	1450e <LorawanMcastValidateHdr+0x62>
   14500:	2903      	cmp	r1, #3
   14502:	d104      	bne.n	1450e <LorawanMcastValidateHdr+0x62>
   14504:	466d      	mov	r5, sp
   14506:	4663      	mov	r3, ip
   14508:	792d      	ldrb	r5, [r5, #4]
   1450a:	701d      	strb	r5, [r3, #0]
   1450c:	2308      	movs	r3, #8
   1450e:	3401      	adds	r4, #1
   14510:	2c04      	cmp	r4, #4
   14512:	d1d0      	bne.n	144b6 <LorawanMcastValidateHdr+0xa>
   14514:	0018      	movs	r0, r3
   14516:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   14518:	20002b5c 	.word	0x20002b5c
   1451c:	20002c50 	.word	0x20002c50

00014520 <LorawanMcastProcessPkt>:
   14520:	b5f0      	push	{r4, r5, r6, r7, lr}
   14522:	0015      	movs	r5, r2
   14524:	223c      	movs	r2, #60	; 0x3c
   14526:	435a      	muls	r2, r3
   14528:	b089      	sub	sp, #36	; 0x24
   1452a:	9107      	str	r1, [sp, #28]
   1452c:	493d      	ldr	r1, [pc, #244]	; (14624 <LorawanMcastProcessPkt+0x104>)
   1452e:	9006      	str	r0, [sp, #24]
   14530:	1889      	adds	r1, r1, r2
   14532:	31fc      	adds	r1, #252	; 0xfc
   14534:	6d0c      	ldr	r4, [r1, #80]	; 0x50
   14536:	6d48      	ldr	r0, [r1, #84]	; 0x54
   14538:	6cca      	ldr	r2, [r1, #76]	; 0x4c
   1453a:	4284      	cmp	r4, r0
   1453c:	d21f      	bcs.n	1457e <LorawanMcastProcessPkt+0x5e>
   1453e:	2100      	movs	r1, #0
   14540:	4294      	cmp	r4, r2
   14542:	d802      	bhi.n	1454a <LorawanMcastProcessPkt+0x2a>
   14544:	4282      	cmp	r2, r0
   14546:	4192      	sbcs	r2, r2
   14548:	4251      	negs	r1, r2
   1454a:	270a      	movs	r7, #10
   1454c:	2900      	cmp	r1, #0
   1454e:	d118      	bne.n	14582 <LorawanMcastProcessPkt+0x62>
   14550:	4a34      	ldr	r2, [pc, #208]	; (14624 <LorawanMcastProcessPkt+0x104>)
   14552:	200e      	movs	r0, #14
   14554:	0011      	movs	r1, r2
   14556:	317c      	adds	r1, #124	; 0x7c
   14558:	780b      	ldrb	r3, [r1, #0]
   1455a:	001c      	movs	r4, r3
   1455c:	4004      	ands	r4, r0
   1455e:	2c06      	cmp	r4, #6
   14560:	d107      	bne.n	14572 <LorawanMcastProcessPkt+0x52>
   14562:	32f4      	adds	r2, #244	; 0xf4
   14564:	7812      	ldrb	r2, [r2, #0]
   14566:	2a04      	cmp	r2, #4
   14568:	d103      	bne.n	14572 <LorawanMcastProcessPkt+0x52>
   1456a:	4383      	bics	r3, r0
   1456c:	3206      	adds	r2, #6
   1456e:	4313      	orrs	r3, r2
   14570:	700b      	strb	r3, [r1, #0]
   14572:	2000      	movs	r0, #0
   14574:	4b2c      	ldr	r3, [pc, #176]	; (14628 <LorawanMcastProcessPkt+0x108>)
   14576:	4798      	blx	r3
   14578:	0038      	movs	r0, r7
   1457a:	b009      	add	sp, #36	; 0x24
   1457c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1457e:	4294      	cmp	r4, r2
   14580:	d8e0      	bhi.n	14544 <LorawanMcastProcessPkt+0x24>
   14582:	243c      	movs	r4, #60	; 0x3c
   14584:	435c      	muls	r4, r3
   14586:	4e27      	ldr	r6, [pc, #156]	; (14624 <LorawanMcastProcessPkt+0x104>)
   14588:	79ea      	ldrb	r2, [r5, #7]
   1458a:	1937      	adds	r7, r6, r4
   1458c:	003b      	movs	r3, r7
   1458e:	79a9      	ldrb	r1, [r5, #6]
   14590:	0212      	lsls	r2, r2, #8
   14592:	3349      	adds	r3, #73	; 0x49
   14594:	430a      	orrs	r2, r1
   14596:	33ff      	adds	r3, #255	; 0xff
   14598:	801a      	strh	r2, [r3, #0]
   1459a:	2105      	movs	r1, #5
   1459c:	4b23      	ldr	r3, [pc, #140]	; (1462c <LorawanMcastProcessPkt+0x10c>)
   1459e:	37fc      	adds	r7, #252	; 0xfc
   145a0:	2000      	movs	r0, #0
   145a2:	4798      	blx	r3
   145a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
   145a6:	3439      	adds	r4, #57	; 0x39
   145a8:	9304      	str	r3, [sp, #16]
   145aa:	4b21      	ldr	r3, [pc, #132]	; (14630 <LorawanMcastProcessPkt+0x110>)
   145ac:	9907      	ldr	r1, [sp, #28]
   145ae:	9303      	str	r3, [sp, #12]
   145b0:	2319      	movs	r3, #25
   145b2:	34ff      	adds	r4, #255	; 0xff
   145b4:	9302      	str	r3, [sp, #8]
   145b6:	19a4      	adds	r4, r4, r6
   145b8:	3b16      	subs	r3, #22
   145ba:	9806      	ldr	r0, [sp, #24]
   145bc:	9400      	str	r4, [sp, #0]
   145be:	390d      	subs	r1, #13
   145c0:	9301      	str	r3, [sp, #4]
   145c2:	b2c9      	uxtb	r1, r1
   145c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   145c6:	2201      	movs	r2, #1
   145c8:	3009      	adds	r0, #9
   145ca:	4c1a      	ldr	r4, [pc, #104]	; (14634 <LorawanMcastProcessPkt+0x114>)
   145cc:	47a0      	blx	r4
   145ce:	2800      	cmp	r0, #0
   145d0:	d002      	beq.n	145d8 <LorawanMcastProcessPkt+0xb8>
   145d2:	201f      	movs	r0, #31
   145d4:	4b18      	ldr	r3, [pc, #96]	; (14638 <LorawanMcastProcessPkt+0x118>)
   145d6:	4798      	blx	r3
   145d8:	4918      	ldr	r1, [pc, #96]	; (1463c <LorawanMcastProcessPkt+0x11c>)
   145da:	2708      	movs	r7, #8
   145dc:	784a      	ldrb	r2, [r1, #1]
   145de:	780b      	ldrb	r3, [r1, #0]
   145e0:	0212      	lsls	r2, r2, #8
   145e2:	431a      	orrs	r2, r3
   145e4:	788b      	ldrb	r3, [r1, #2]
   145e6:	041b      	lsls	r3, r3, #16
   145e8:	431a      	orrs	r2, r3
   145ea:	78cb      	ldrb	r3, [r1, #3]
   145ec:	061b      	lsls	r3, r3, #24
   145ee:	4313      	orrs	r3, r2
   145f0:	d0ae      	beq.n	14550 <LorawanMcastProcessPkt+0x30>
   145f2:	2220      	movs	r2, #32
   145f4:	368c      	adds	r6, #140	; 0x8c
   145f6:	7833      	ldrb	r3, [r6, #0]
   145f8:	9906      	ldr	r1, [sp, #24]
   145fa:	4393      	bics	r3, r2
   145fc:	7033      	strb	r3, [r6, #0]
   145fe:	78ab      	ldrb	r3, [r5, #2]
   14600:	7868      	ldrb	r0, [r5, #1]
   14602:	40bb      	lsls	r3, r7
   14604:	4303      	orrs	r3, r0
   14606:	78e8      	ldrb	r0, [r5, #3]
   14608:	9a07      	ldr	r2, [sp, #28]
   1460a:	0400      	lsls	r0, r0, #16
   1460c:	4303      	orrs	r3, r0
   1460e:	7928      	ldrb	r0, [r5, #4]
   14610:	3a0c      	subs	r2, #12
   14612:	0600      	lsls	r0, r0, #24
   14614:	4318      	orrs	r0, r3
   14616:	b2d2      	uxtb	r2, r2
   14618:	19c9      	adds	r1, r1, r7
   1461a:	003b      	movs	r3, r7
   1461c:	4c08      	ldr	r4, [pc, #32]	; (14640 <LorawanMcastProcessPkt+0x120>)
   1461e:	47a0      	blx	r4
   14620:	e796      	b.n	14550 <LorawanMcastProcessPkt+0x30>
   14622:	46c0      	nop			; (mov r8, r8)
   14624:	20002b5c 	.word	0x20002b5c
   14628:	0001273d 	.word	0x0001273d
   1462c:	0000e0dd 	.word	0x0000e0dd
   14630:	20002eac 	.word	0x20002eac
   14634:	000113cd 	.word	0x000113cd
   14638:	0001148d 	.word	0x0001148d
   1463c:	20002ea4 	.word	0x20002ea4
   14640:	00011831 	.word	0x00011831

00014644 <LorawanAddMcastAddr>:
   14644:	b570      	push	{r4, r5, r6, lr}
   14646:	260a      	movs	r6, #10
   14648:	2903      	cmp	r1, #3
   1464a:	d818      	bhi.n	1467e <LorawanAddMcastAddr+0x3a>
   1464c:	4b0d      	ldr	r3, [pc, #52]	; (14684 <LorawanAddMcastAddr+0x40>)
   1464e:	681a      	ldr	r2, [r3, #0]
   14650:	0a15      	lsrs	r5, r2, #8
   14652:	791a      	ldrb	r2, [r3, #4]
   14654:	0612      	lsls	r2, r2, #24
   14656:	432a      	orrs	r2, r5
   14658:	4282      	cmp	r2, r0
   1465a:	d010      	beq.n	1467e <LorawanAddMcastAddr+0x3a>
   1465c:	243c      	movs	r4, #60	; 0x3c
   1465e:	434c      	muls	r4, r1
   14660:	191c      	adds	r4, r3, r4
   14662:	0023      	movs	r3, r4
   14664:	33fc      	adds	r3, #252	; 0xfc
   14666:	6298      	str	r0, [r3, #40]	; 0x28
   14668:	2106      	movs	r1, #6
   1466a:	2000      	movs	r0, #0
   1466c:	4b06      	ldr	r3, [pc, #24]	; (14688 <LorawanAddMcastAddr+0x44>)
   1466e:	4798      	blx	r3
   14670:	2201      	movs	r2, #1
   14672:	3451      	adds	r4, #81	; 0x51
   14674:	34ff      	adds	r4, #255	; 0xff
   14676:	7921      	ldrb	r1, [r4, #4]
   14678:	3e02      	subs	r6, #2
   1467a:	430a      	orrs	r2, r1
   1467c:	7122      	strb	r2, [r4, #4]
   1467e:	0030      	movs	r0, r6
   14680:	bd70      	pop	{r4, r5, r6, pc}
   14682:	46c0      	nop			; (mov r8, r8)
   14684:	20002b5c 	.word	0x20002b5c
   14688:	0000e0dd 	.word	0x0000e0dd

0001468c <LorawanAddMcastAppskey>:
   1468c:	b570      	push	{r4, r5, r6, lr}
   1468e:	0006      	movs	r6, r0
   14690:	200a      	movs	r0, #10
   14692:	2903      	cmp	r1, #3
   14694:	d818      	bhi.n	146c8 <LorawanAddMcastAppskey+0x3c>
   14696:	2e00      	cmp	r6, #0
   14698:	d016      	beq.n	146c8 <LorawanAddMcastAppskey+0x3c>
   1469a:	253c      	movs	r5, #60	; 0x3c
   1469c:	434d      	muls	r5, r1
   1469e:	0028      	movs	r0, r5
   146a0:	4c0a      	ldr	r4, [pc, #40]	; (146cc <LorawanAddMcastAppskey+0x40>)
   146a2:	3039      	adds	r0, #57	; 0x39
   146a4:	30ff      	adds	r0, #255	; 0xff
   146a6:	2210      	movs	r2, #16
   146a8:	1900      	adds	r0, r0, r4
   146aa:	0031      	movs	r1, r6
   146ac:	4b08      	ldr	r3, [pc, #32]	; (146d0 <LorawanAddMcastAppskey+0x44>)
   146ae:	4798      	blx	r3
   146b0:	4b08      	ldr	r3, [pc, #32]	; (146d4 <LorawanAddMcastAppskey+0x48>)
   146b2:	2107      	movs	r1, #7
   146b4:	2000      	movs	r0, #0
   146b6:	4798      	blx	r3
   146b8:	2304      	movs	r3, #4
   146ba:	2008      	movs	r0, #8
   146bc:	1964      	adds	r4, r4, r5
   146be:	3451      	adds	r4, #81	; 0x51
   146c0:	34ff      	adds	r4, #255	; 0xff
   146c2:	7922      	ldrb	r2, [r4, #4]
   146c4:	4313      	orrs	r3, r2
   146c6:	7123      	strb	r3, [r4, #4]
   146c8:	bd70      	pop	{r4, r5, r6, pc}
   146ca:	46c0      	nop			; (mov r8, r8)
   146cc:	20002b5c 	.word	0x20002b5c
   146d0:	00019d89 	.word	0x00019d89
   146d4:	0000e0dd 	.word	0x0000e0dd

000146d8 <LorawanAddMcastNwkskey>:
   146d8:	b570      	push	{r4, r5, r6, lr}
   146da:	0006      	movs	r6, r0
   146dc:	200a      	movs	r0, #10
   146de:	2903      	cmp	r1, #3
   146e0:	d818      	bhi.n	14714 <LorawanAddMcastNwkskey+0x3c>
   146e2:	2e00      	cmp	r6, #0
   146e4:	d016      	beq.n	14714 <LorawanAddMcastNwkskey+0x3c>
   146e6:	253c      	movs	r5, #60	; 0x3c
   146e8:	434d      	muls	r5, r1
   146ea:	0028      	movs	r0, r5
   146ec:	4c0a      	ldr	r4, [pc, #40]	; (14718 <LorawanAddMcastNwkskey+0x40>)
   146ee:	3029      	adds	r0, #41	; 0x29
   146f0:	30ff      	adds	r0, #255	; 0xff
   146f2:	2210      	movs	r2, #16
   146f4:	1900      	adds	r0, r0, r4
   146f6:	0031      	movs	r1, r6
   146f8:	4b08      	ldr	r3, [pc, #32]	; (1471c <LorawanAddMcastNwkskey+0x44>)
   146fa:	4798      	blx	r3
   146fc:	4b08      	ldr	r3, [pc, #32]	; (14720 <LorawanAddMcastNwkskey+0x48>)
   146fe:	2108      	movs	r1, #8
   14700:	2000      	movs	r0, #0
   14702:	4798      	blx	r3
   14704:	2302      	movs	r3, #2
   14706:	2008      	movs	r0, #8
   14708:	1964      	adds	r4, r4, r5
   1470a:	3451      	adds	r4, #81	; 0x51
   1470c:	34ff      	adds	r4, #255	; 0xff
   1470e:	7922      	ldrb	r2, [r4, #4]
   14710:	4313      	orrs	r3, r2
   14712:	7123      	strb	r3, [r4, #4]
   14714:	bd70      	pop	{r4, r5, r6, pc}
   14716:	46c0      	nop			; (mov r8, r8)
   14718:	20002b5c 	.word	0x20002b5c
   1471c:	00019d89 	.word	0x00019d89
   14720:	0000e0dd 	.word	0x0000e0dd

00014724 <LorawanAddMcastFcntMin>:
   14724:	220a      	movs	r2, #10
   14726:	2903      	cmp	r1, #3
   14728:	d807      	bhi.n	1473a <LorawanAddMcastFcntMin+0x16>
   1472a:	233c      	movs	r3, #60	; 0x3c
   1472c:	434b      	muls	r3, r1
   1472e:	4904      	ldr	r1, [pc, #16]	; (14740 <LorawanAddMcastFcntMin+0x1c>)
   14730:	3a02      	subs	r2, #2
   14732:	18c9      	adds	r1, r1, r3
   14734:	31fc      	adds	r1, #252	; 0xfc
   14736:	6508      	str	r0, [r1, #80]	; 0x50
   14738:	64c8      	str	r0, [r1, #76]	; 0x4c
   1473a:	0010      	movs	r0, r2
   1473c:	4770      	bx	lr
   1473e:	46c0      	nop			; (mov r8, r8)
   14740:	20002b5c 	.word	0x20002b5c

00014744 <LorawanAddMcastFcntMax>:
   14744:	220a      	movs	r2, #10
   14746:	2903      	cmp	r1, #3
   14748:	d806      	bhi.n	14758 <LorawanAddMcastFcntMax+0x14>
   1474a:	233c      	movs	r3, #60	; 0x3c
   1474c:	434b      	muls	r3, r1
   1474e:	4903      	ldr	r1, [pc, #12]	; (1475c <LorawanAddMcastFcntMax+0x18>)
   14750:	3a02      	subs	r2, #2
   14752:	18c9      	adds	r1, r1, r3
   14754:	31fc      	adds	r1, #252	; 0xfc
   14756:	6548      	str	r0, [r1, #84]	; 0x54
   14758:	0010      	movs	r0, r2
   1475a:	4770      	bx	lr
   1475c:	20002b5c 	.word	0x20002b5c

00014760 <LorawanAddMcastDlFrequency>:
   14760:	b513      	push	{r0, r1, r4, lr}
   14762:	000c      	movs	r4, r1
   14764:	9001      	str	r0, [sp, #4]
   14766:	2903      	cmp	r1, #3
   14768:	d901      	bls.n	1476e <LorawanAddMcastDlFrequency+0xe>
   1476a:	200a      	movs	r0, #10
   1476c:	bd16      	pop	{r1, r2, r4, pc}
   1476e:	a901      	add	r1, sp, #4
   14770:	2001      	movs	r0, #1
   14772:	4b06      	ldr	r3, [pc, #24]	; (1478c <LorawanAddMcastDlFrequency+0x2c>)
   14774:	4798      	blx	r3
   14776:	2808      	cmp	r0, #8
   14778:	d1f7      	bne.n	1476a <LorawanAddMcastDlFrequency+0xa>
   1477a:	213c      	movs	r1, #60	; 0x3c
   1477c:	434c      	muls	r4, r1
   1477e:	4904      	ldr	r1, [pc, #16]	; (14790 <LorawanAddMcastDlFrequency+0x30>)
   14780:	9b01      	ldr	r3, [sp, #4]
   14782:	1909      	adds	r1, r1, r4
   14784:	31fc      	adds	r1, #252	; 0xfc
   14786:	65cb      	str	r3, [r1, #92]	; 0x5c
   14788:	e7f0      	b.n	1476c <LorawanAddMcastDlFrequency+0xc>
   1478a:	46c0      	nop			; (mov r8, r8)
   1478c:	0000d91d 	.word	0x0000d91d
   14790:	20002b5c 	.word	0x20002b5c

00014794 <LorawanAddMcastDatarate>:
   14794:	b537      	push	{r0, r1, r2, r4, r5, lr}
   14796:	466b      	mov	r3, sp
   14798:	1ddc      	adds	r4, r3, #7
   1479a:	000d      	movs	r5, r1
   1479c:	7020      	strb	r0, [r4, #0]
   1479e:	2903      	cmp	r1, #3
   147a0:	d901      	bls.n	147a6 <LorawanAddMcastDatarate+0x12>
   147a2:	200a      	movs	r0, #10
   147a4:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
   147a6:	0021      	movs	r1, r4
   147a8:	200f      	movs	r0, #15
   147aa:	4b06      	ldr	r3, [pc, #24]	; (147c4 <LorawanAddMcastDatarate+0x30>)
   147ac:	4798      	blx	r3
   147ae:	2808      	cmp	r0, #8
   147b0:	d1f7      	bne.n	147a2 <LorawanAddMcastDatarate+0xe>
   147b2:	213c      	movs	r1, #60	; 0x3c
   147b4:	434d      	muls	r5, r1
   147b6:	4904      	ldr	r1, [pc, #16]	; (147c8 <LorawanAddMcastDatarate+0x34>)
   147b8:	7823      	ldrb	r3, [r4, #0]
   147ba:	1949      	adds	r1, r1, r5
   147bc:	315d      	adds	r1, #93	; 0x5d
   147be:	31ff      	adds	r1, #255	; 0xff
   147c0:	700b      	strb	r3, [r1, #0]
   147c2:	e7ef      	b.n	147a4 <LorawanAddMcastDatarate+0x10>
   147c4:	0000d91d 	.word	0x0000d91d
   147c8:	20002b5c 	.word	0x20002b5c

000147cc <LorawanAddMcastPeriodicity>:
   147cc:	220a      	movs	r2, #10
   147ce:	2903      	cmp	r1, #3
   147d0:	d809      	bhi.n	147e6 <LorawanAddMcastPeriodicity+0x1a>
   147d2:	2807      	cmp	r0, #7
   147d4:	d807      	bhi.n	147e6 <LorawanAddMcastPeriodicity+0x1a>
   147d6:	233c      	movs	r3, #60	; 0x3c
   147d8:	434b      	muls	r3, r1
   147da:	4904      	ldr	r1, [pc, #16]	; (147ec <LorawanAddMcastPeriodicity+0x20>)
   147dc:	3a02      	subs	r2, #2
   147de:	18c9      	adds	r1, r1, r3
   147e0:	315e      	adds	r1, #94	; 0x5e
   147e2:	31ff      	adds	r1, #255	; 0xff
   147e4:	7008      	strb	r0, [r1, #0]
   147e6:	0010      	movs	r0, r2
   147e8:	4770      	bx	lr
   147ea:	46c0      	nop			; (mov r8, r8)
   147ec:	20002b5c 	.word	0x20002b5c

000147f0 <Lorawan_Pds_fid1_CB>:
   147f0:	4770      	bx	lr
	...

000147f4 <Lorawan_Pds_fid2_CB>:
   147f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   147f6:	2788      	movs	r7, #136	; 0x88
   147f8:	4c2d      	ldr	r4, [pc, #180]	; (148b0 <Lorawan_Pds_fid2_CB+0xbc>)
   147fa:	00bf      	lsls	r7, r7, #2
   147fc:	5de3      	ldrb	r3, [r4, r7]
   147fe:	2b00      	cmp	r3, #0
   14800:	d021      	beq.n	14846 <Lorawan_Pds_fid2_CB+0x52>
   14802:	2501      	movs	r5, #1
   14804:	0029      	movs	r1, r5
   14806:	4099      	lsls	r1, r3
   14808:	000b      	movs	r3, r1
   1480a:	1d22      	adds	r2, r4, #4
   1480c:	6fd1      	ldr	r1, [r2, #124]	; 0x7c
   1480e:	4e29      	ldr	r6, [pc, #164]	; (148b4 <Lorawan_Pds_fid2_CB+0xc0>)
   14810:	18cb      	adds	r3, r1, r3
   14812:	2000      	movs	r0, #0
   14814:	2116      	movs	r1, #22
   14816:	67d3      	str	r3, [r2, #124]	; 0x7c
   14818:	47b0      	blx	r6
   1481a:	0029      	movs	r1, r5
   1481c:	5de3      	ldrb	r3, [r4, r7]
   1481e:	0022      	movs	r2, r4
   14820:	4099      	lsls	r1, r3
   14822:	000b      	movs	r3, r1
   14824:	3208      	adds	r2, #8
   14826:	6fd1      	ldr	r1, [r2, #124]	; 0x7c
   14828:	0028      	movs	r0, r5
   1482a:	185b      	adds	r3, r3, r1
   1482c:	210a      	movs	r1, #10
   1482e:	67d3      	str	r3, [r2, #124]	; 0x7c
   14830:	47b0      	blx	r6
   14832:	0023      	movs	r3, r4
   14834:	5de2      	ldrb	r2, [r4, r7]
   14836:	33fc      	adds	r3, #252	; 0xfc
   14838:	4095      	lsls	r5, r2
   1483a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
   1483c:	2105      	movs	r1, #5
   1483e:	18ad      	adds	r5, r5, r2
   14840:	64dd      	str	r5, [r3, #76]	; 0x4c
   14842:	2000      	movs	r0, #0
   14844:	47b0      	blx	r6
   14846:	0025      	movs	r5, r4
   14848:	2271      	movs	r2, #113	; 0x71
   1484a:	2701      	movs	r7, #1
   1484c:	357c      	adds	r5, #124	; 0x7c
   1484e:	782b      	ldrb	r3, [r5, #0]
   14850:	4013      	ands	r3, r2
   14852:	702b      	strb	r3, [r5, #0]
   14854:	786b      	ldrb	r3, [r5, #1]
   14856:	43bb      	bics	r3, r7
   14858:	706b      	strb	r3, [r5, #1]
   1485a:	4b17      	ldr	r3, [pc, #92]	; (148b8 <Lorawan_Pds_fid2_CB+0xc4>)
   1485c:	5ce3      	ldrb	r3, [r4, r3]
   1485e:	2b00      	cmp	r3, #0
   14860:	d018      	beq.n	14894 <Lorawan_Pds_fid2_CB+0xa0>
   14862:	4916      	ldr	r1, [pc, #88]	; (148bc <Lorawan_Pds_fid2_CB+0xc8>)
   14864:	2006      	movs	r0, #6
   14866:	4e16      	ldr	r6, [pc, #88]	; (148c0 <Lorawan_Pds_fid2_CB+0xcc>)
   14868:	47b0      	blx	r6
   1486a:	2800      	cmp	r0, #0
   1486c:	d002      	beq.n	14874 <Lorawan_Pds_fid2_CB+0x80>
   1486e:	782b      	ldrb	r3, [r5, #0]
   14870:	43bb      	bics	r3, r7
   14872:	702b      	strb	r3, [r5, #0]
   14874:	0023      	movs	r3, r4
   14876:	2501      	movs	r5, #1
   14878:	337c      	adds	r3, #124	; 0x7c
   1487a:	781b      	ldrb	r3, [r3, #0]
   1487c:	422b      	tst	r3, r5
   1487e:	d008      	beq.n	14892 <Lorawan_Pds_fid2_CB+0x9e>
   14880:	7823      	ldrb	r3, [r4, #0]
   14882:	2b00      	cmp	r3, #0
   14884:	d106      	bne.n	14894 <Lorawan_Pds_fid2_CB+0xa0>
   14886:	490f      	ldr	r1, [pc, #60]	; (148c4 <Lorawan_Pds_fid2_CB+0xd0>)
   14888:	2002      	movs	r0, #2
   1488a:	47b0      	blx	r6
   1488c:	490e      	ldr	r1, [pc, #56]	; (148c8 <Lorawan_Pds_fid2_CB+0xd4>)
   1488e:	0028      	movs	r0, r5
   14890:	47b0      	blx	r6
   14892:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   14894:	0020      	movs	r0, r4
   14896:	0021      	movs	r1, r4
   14898:	2210      	movs	r2, #16
   1489a:	3115      	adds	r1, #21
   1489c:	4d0b      	ldr	r5, [pc, #44]	; (148cc <Lorawan_Pds_fid2_CB+0xd8>)
   1489e:	3035      	adds	r0, #53	; 0x35
   148a0:	47a8      	blx	r5
   148a2:	0020      	movs	r0, r4
   148a4:	1d61      	adds	r1, r4, #5
   148a6:	2210      	movs	r2, #16
   148a8:	3025      	adds	r0, #37	; 0x25
   148aa:	47a8      	blx	r5
   148ac:	e7f1      	b.n	14892 <Lorawan_Pds_fid2_CB+0x9e>
   148ae:	46c0      	nop			; (mov r8, r8)
   148b0:	20002b5c 	.word	0x20002b5c
   148b4:	0000e0dd 	.word	0x0000e0dd
   148b8:	00000221 	.word	0x00000221
   148bc:	20002bb1 	.word	0x20002bb1
   148c0:	0000dd41 	.word	0x0000dd41
   148c4:	20002b81 	.word	0x20002b81
   148c8:	20002b91 	.word	0x20002b91
   148cc:	00019d89 	.word	0x00019d89

000148d0 <LORAWAN_TxHandler>:
   148d0:	b5f0      	push	{r4, r5, r6, r7, lr}
   148d2:	b087      	sub	sp, #28
   148d4:	466b      	mov	r3, sp
   148d6:	2501      	movs	r5, #1
   148d8:	4c2f      	ldr	r4, [pc, #188]	; (14998 <LORAWAN_TxHandler+0xc8>)
   148da:	701d      	strb	r5, [r3, #0]
   148dc:	0023      	movs	r3, r4
   148de:	466a      	mov	r2, sp
   148e0:	33e1      	adds	r3, #225	; 0xe1
   148e2:	781b      	ldrb	r3, [r3, #0]
   148e4:	4669      	mov	r1, sp
   148e6:	7053      	strb	r3, [r2, #1]
   148e8:	0023      	movs	r3, r4
   148ea:	33df      	adds	r3, #223	; 0xdf
   148ec:	781b      	ldrb	r3, [r3, #0]
   148ee:	202f      	movs	r0, #47	; 0x2f
   148f0:	7093      	strb	r3, [r2, #2]
   148f2:	aa03      	add	r2, sp, #12
   148f4:	4b29      	ldr	r3, [pc, #164]	; (1499c <LORAWAN_TxHandler+0xcc>)
   148f6:	4798      	blx	r3
   148f8:	2808      	cmp	r0, #8
   148fa:	d004      	beq.n	14906 <LORAWAN_TxHandler+0x36>
   148fc:	4b28      	ldr	r3, [pc, #160]	; (149a0 <LORAWAN_TxHandler+0xd0>)
   148fe:	4798      	blx	r3
   14900:	2000      	movs	r0, #0
   14902:	b007      	add	sp, #28
   14904:	bdf0      	pop	{r4, r5, r6, r7, pc}
   14906:	0023      	movs	r3, r4
   14908:	33f4      	adds	r3, #244	; 0xf4
   1490a:	781b      	ldrb	r3, [r3, #0]
   1490c:	ae01      	add	r6, sp, #4
   1490e:	2b04      	cmp	r3, #4
   14910:	d103      	bne.n	1491a <LORAWAN_TxHandler+0x4a>
   14912:	0030      	movs	r0, r6
   14914:	4b23      	ldr	r3, [pc, #140]	; (149a4 <LORAWAN_TxHandler+0xd4>)
   14916:	7035      	strb	r5, [r6, #0]
   14918:	4798      	blx	r3
   1491a:	4b23      	ldr	r3, [pc, #140]	; (149a8 <LORAWAN_TxHandler+0xd8>)
   1491c:	9803      	ldr	r0, [sp, #12]
   1491e:	9904      	ldr	r1, [sp, #16]
   14920:	9a05      	ldr	r2, [sp, #20]
   14922:	4798      	blx	r3
   14924:	0023      	movs	r3, r4
   14926:	33fc      	adds	r3, #252	; 0xfc
   14928:	681d      	ldr	r5, [r3, #0]
   1492a:	4f20      	ldr	r7, [pc, #128]	; (149ac <LORAWAN_TxHandler+0xdc>)
   1492c:	4b20      	ldr	r3, [pc, #128]	; (149b0 <LORAWAN_TxHandler+0xe0>)
   1492e:	2d00      	cmp	r5, #0
   14930:	d023      	beq.n	1497a <LORAWAN_TxHandler+0xaa>
   14932:	2201      	movs	r2, #1
   14934:	54e2      	strb	r2, [r4, r3]
   14936:	7828      	ldrb	r0, [r5, #0]
   14938:	7a2b      	ldrb	r3, [r5, #8]
   1493a:	1e42      	subs	r2, r0, #1
   1493c:	4190      	sbcs	r0, r2
   1493e:	7869      	ldrb	r1, [r5, #1]
   14940:	686a      	ldr	r2, [r5, #4]
   14942:	b2c0      	uxtb	r0, r0
   14944:	47b8      	blx	r7
   14946:	0023      	movs	r3, r4
   14948:	33c6      	adds	r3, #198	; 0xc6
   1494a:	881b      	ldrh	r3, [r3, #0]
   1494c:	0030      	movs	r0, r6
   1494e:	7033      	strb	r3, [r6, #0]
   14950:	4b18      	ldr	r3, [pc, #96]	; (149b4 <LORAWAN_TxHandler+0xe4>)
   14952:	6073      	str	r3, [r6, #4]
   14954:	4b18      	ldr	r3, [pc, #96]	; (149b8 <LORAWAN_TxHandler+0xe8>)
   14956:	4798      	blx	r3
   14958:	2800      	cmp	r0, #0
   1495a:	d114      	bne.n	14986 <LORAWAN_TxHandler+0xb6>
   1495c:	0021      	movs	r1, r4
   1495e:	220e      	movs	r2, #14
   14960:	317c      	adds	r1, #124	; 0x7c
   14962:	780b      	ldrb	r3, [r1, #0]
   14964:	4393      	bics	r3, r2
   14966:	001a      	movs	r2, r3
   14968:	2302      	movs	r3, #2
   1496a:	4313      	orrs	r3, r2
   1496c:	700b      	strb	r3, [r1, #0]
   1496e:	2208      	movs	r2, #8
   14970:	348c      	adds	r4, #140	; 0x8c
   14972:	7823      	ldrb	r3, [r4, #0]
   14974:	4393      	bics	r3, r2
   14976:	7023      	strb	r3, [r4, #0]
   14978:	e7c2      	b.n	14900 <LORAWAN_TxHandler+0x30>
   1497a:	54e5      	strb	r5, [r4, r3]
   1497c:	002a      	movs	r2, r5
   1497e:	002b      	movs	r3, r5
   14980:	0029      	movs	r1, r5
   14982:	0028      	movs	r0, r5
   14984:	e7de      	b.n	14944 <LORAWAN_TxHandler+0x74>
   14986:	0022      	movs	r2, r4
   14988:	2120      	movs	r1, #32
   1498a:	328c      	adds	r2, #140	; 0x8c
   1498c:	7813      	ldrb	r3, [r2, #0]
   1498e:	438b      	bics	r3, r1
   14990:	7013      	strb	r3, [r2, #0]
   14992:	4b03      	ldr	r3, [pc, #12]	; (149a0 <LORAWAN_TxHandler+0xd0>)
   14994:	4798      	blx	r3
   14996:	e7ea      	b.n	1496e <LORAWAN_TxHandler+0x9e>
   14998:	20002b5c 	.word	0x20002b5c
   1499c:	0000d901 	.word	0x0000d901
   149a0:	0001148d 	.word	0x0001148d
   149a4:	00015e51 	.word	0x00015e51
   149a8:	00010f15 	.word	0x00010f15
   149ac:	000114f5 	.word	0x000114f5
   149b0:	0000021e 	.word	0x0000021e
   149b4:	20002da1 	.word	0x20002da1
   149b8:	0001557d 	.word	0x0001557d

000149bc <LORAWAN_JoinReqHandler>:
   149bc:	b530      	push	{r4, r5, lr}
   149be:	b087      	sub	sp, #28
   149c0:	466a      	mov	r2, sp
   149c2:	2300      	movs	r3, #0
   149c4:	4c2a      	ldr	r4, [pc, #168]	; (14a70 <LORAWAN_JoinReqHandler+0xb4>)
   149c6:	7013      	strb	r3, [r2, #0]
   149c8:	0023      	movs	r3, r4
   149ca:	33e1      	adds	r3, #225	; 0xe1
   149cc:	781b      	ldrb	r3, [r3, #0]
   149ce:	7053      	strb	r3, [r2, #1]
   149d0:	0023      	movs	r3, r4
   149d2:	33df      	adds	r3, #223	; 0xdf
   149d4:	781b      	ldrb	r3, [r3, #0]
   149d6:	7093      	strb	r3, [r2, #2]
   149d8:	0023      	movs	r3, r4
   149da:	33ff      	adds	r3, #255	; 0xff
   149dc:	7c5b      	ldrb	r3, [r3, #17]
   149de:	069b      	lsls	r3, r3, #26
   149e0:	d511      	bpl.n	14a06 <LORAWAN_JoinReqHandler+0x4a>
   149e2:	0023      	movs	r3, r4
   149e4:	336f      	adds	r3, #111	; 0x6f
   149e6:	781a      	ldrb	r2, [r3, #0]
   149e8:	6f23      	ldr	r3, [r4, #112]	; 0x70
   149ea:	021b      	lsls	r3, r3, #8
   149ec:	4313      	orrs	r3, r2
   149ee:	0022      	movs	r2, r4
   149f0:	3273      	adds	r2, #115	; 0x73
   149f2:	7811      	ldrb	r1, [r2, #0]
   149f4:	6f62      	ldr	r2, [r4, #116]	; 0x74
   149f6:	0212      	lsls	r2, r2, #8
   149f8:	430a      	orrs	r2, r1
   149fa:	4313      	orrs	r3, r2
   149fc:	d103      	bne.n	14a06 <LORAWAN_JoinReqHandler+0x4a>
   149fe:	0023      	movs	r3, r4
   14a00:	2201      	movs	r2, #1
   14a02:	337b      	adds	r3, #123	; 0x7b
   14a04:	701a      	strb	r2, [r3, #0]
   14a06:	aa03      	add	r2, sp, #12
   14a08:	4669      	mov	r1, sp
   14a0a:	202f      	movs	r0, #47	; 0x2f
   14a0c:	4b19      	ldr	r3, [pc, #100]	; (14a74 <LORAWAN_JoinReqHandler+0xb8>)
   14a0e:	4798      	blx	r3
   14a10:	2808      	cmp	r0, #8
   14a12:	d004      	beq.n	14a1e <LORAWAN_JoinReqHandler+0x62>
   14a14:	4b18      	ldr	r3, [pc, #96]	; (14a78 <LORAWAN_JoinReqHandler+0xbc>)
   14a16:	4798      	blx	r3
   14a18:	2000      	movs	r0, #0
   14a1a:	b007      	add	sp, #28
   14a1c:	bd30      	pop	{r4, r5, pc}
   14a1e:	4b17      	ldr	r3, [pc, #92]	; (14a7c <LORAWAN_JoinReqHandler+0xc0>)
   14a20:	9803      	ldr	r0, [sp, #12]
   14a22:	9904      	ldr	r1, [sp, #16]
   14a24:	9a05      	ldr	r2, [sp, #20]
   14a26:	4798      	blx	r3
   14a28:	0023      	movs	r3, r4
   14a2a:	33f4      	adds	r3, #244	; 0xf4
   14a2c:	781b      	ldrb	r3, [r3, #0]
   14a2e:	ad01      	add	r5, sp, #4
   14a30:	2b04      	cmp	r3, #4
   14a32:	d104      	bne.n	14a3e <LORAWAN_JoinReqHandler+0x82>
   14a34:	3b03      	subs	r3, #3
   14a36:	702b      	strb	r3, [r5, #0]
   14a38:	0028      	movs	r0, r5
   14a3a:	4b11      	ldr	r3, [pc, #68]	; (14a80 <LORAWAN_JoinReqHandler+0xc4>)
   14a3c:	4798      	blx	r3
   14a3e:	2200      	movs	r2, #0
   14a40:	4b10      	ldr	r3, [pc, #64]	; (14a84 <LORAWAN_JoinReqHandler+0xc8>)
   14a42:	54e2      	strb	r2, [r4, r3]
   14a44:	4b10      	ldr	r3, [pc, #64]	; (14a88 <LORAWAN_JoinReqHandler+0xcc>)
   14a46:	4798      	blx	r3
   14a48:	4b10      	ldr	r3, [pc, #64]	; (14a8c <LORAWAN_JoinReqHandler+0xd0>)
   14a4a:	7028      	strb	r0, [r5, #0]
   14a4c:	606b      	str	r3, [r5, #4]
   14a4e:	0028      	movs	r0, r5
   14a50:	4b0f      	ldr	r3, [pc, #60]	; (14a90 <LORAWAN_JoinReqHandler+0xd4>)
   14a52:	4798      	blx	r3
   14a54:	2800      	cmp	r0, #0
   14a56:	d001      	beq.n	14a5c <LORAWAN_JoinReqHandler+0xa0>
   14a58:	201b      	movs	r0, #27
   14a5a:	e7db      	b.n	14a14 <LORAWAN_JoinReqHandler+0x58>
   14a5c:	220e      	movs	r2, #14
   14a5e:	347c      	adds	r4, #124	; 0x7c
   14a60:	7823      	ldrb	r3, [r4, #0]
   14a62:	4393      	bics	r3, r2
   14a64:	001a      	movs	r2, r3
   14a66:	2302      	movs	r3, #2
   14a68:	4313      	orrs	r3, r2
   14a6a:	7023      	strb	r3, [r4, #0]
   14a6c:	e7d4      	b.n	14a18 <LORAWAN_JoinReqHandler+0x5c>
   14a6e:	46c0      	nop			; (mov r8, r8)
   14a70:	20002b5c 	.word	0x20002b5c
   14a74:	0000d901 	.word	0x0000d901
   14a78:	00010985 	.word	0x00010985
   14a7c:	00010f15 	.word	0x00010f15
   14a80:	00015e51 	.word	0x00015e51
   14a84:	0000021e 	.word	0x0000021e
   14a88:	00010d61 	.word	0x00010d61
   14a8c:	20002d91 	.word	0x20002d91
   14a90:	0001557d 	.word	0x0001557d

00014a94 <LORAWAN_RxHandler>:
   14a94:	b513      	push	{r0, r1, r4, lr}
   14a96:	4b0c      	ldr	r3, [pc, #48]	; (14ac8 <LORAWAN_RxHandler+0x34>)
   14a98:	781b      	ldrb	r3, [r3, #0]
   14a9a:	2b08      	cmp	r3, #8
   14a9c:	d011      	beq.n	14ac2 <LORAWAN_RxHandler+0x2e>
   14a9e:	2b10      	cmp	r3, #16
   14aa0:	d001      	beq.n	14aa6 <LORAWAN_RxHandler+0x12>
   14aa2:	2b01      	cmp	r3, #1
   14aa4:	d10b      	bne.n	14abe <LORAWAN_RxHandler+0x2a>
   14aa6:	466b      	mov	r3, sp
   14aa8:	1c9c      	adds	r4, r3, #2
   14aaa:	0021      	movs	r1, r4
   14aac:	a801      	add	r0, sp, #4
   14aae:	4b07      	ldr	r3, [pc, #28]	; (14acc <LORAWAN_RxHandler+0x38>)
   14ab0:	4798      	blx	r3
   14ab2:	9801      	ldr	r0, [sp, #4]
   14ab4:	2800      	cmp	r0, #0
   14ab6:	d002      	beq.n	14abe <LORAWAN_RxHandler+0x2a>
   14ab8:	7821      	ldrb	r1, [r4, #0]
   14aba:	4b05      	ldr	r3, [pc, #20]	; (14ad0 <LORAWAN_RxHandler+0x3c>)
   14abc:	4798      	blx	r3
   14abe:	2000      	movs	r0, #0
   14ac0:	bd16      	pop	{r1, r2, r4, pc}
   14ac2:	4b04      	ldr	r3, [pc, #16]	; (14ad4 <LORAWAN_RxHandler+0x40>)
   14ac4:	4798      	blx	r3
   14ac6:	e7fa      	b.n	14abe <LORAWAN_RxHandler+0x2a>
   14ac8:	20002d90 	.word	0x20002d90
   14acc:	00015749 	.word	0x00015749
   14ad0:	00012ec9 	.word	0x00012ec9
   14ad4:	00012699 	.word	0x00012699

00014ad8 <LORAWAN_PostTask>:
   14ad8:	b510      	push	{r4, lr}
   14ada:	4b08      	ldr	r3, [pc, #32]	; (14afc <LORAWAN_PostTask+0x24>)
   14adc:	0004      	movs	r4, r0
   14ade:	4798      	blx	r3
   14ae0:	2201      	movs	r2, #1
   14ae2:	40a2      	lsls	r2, r4
   14ae4:	4906      	ldr	r1, [pc, #24]	; (14b00 <LORAWAN_PostTask+0x28>)
   14ae6:	780b      	ldrb	r3, [r1, #0]
   14ae8:	4313      	orrs	r3, r2
   14aea:	b2db      	uxtb	r3, r3
   14aec:	700b      	strb	r3, [r1, #0]
   14aee:	4b05      	ldr	r3, [pc, #20]	; (14b04 <LORAWAN_PostTask+0x2c>)
   14af0:	4798      	blx	r3
   14af2:	2004      	movs	r0, #4
   14af4:	4b04      	ldr	r3, [pc, #16]	; (14b08 <LORAWAN_PostTask+0x30>)
   14af6:	4798      	blx	r3
   14af8:	bd10      	pop	{r4, pc}
   14afa:	46c0      	nop			; (mov r8, r8)
   14afc:	000083b5 	.word	0x000083b5
   14b00:	20001120 	.word	0x20001120
   14b04:	000083c1 	.word	0x000083c1
   14b08:	0000f4a1 	.word	0x0000f4a1

00014b0c <LORAWAN_TaskHandler>:
   14b0c:	b570      	push	{r4, r5, r6, lr}
   14b0e:	2601      	movs	r6, #1
   14b10:	4d0e      	ldr	r5, [pc, #56]	; (14b4c <LORAWAN_TaskHandler+0x40>)
   14b12:	e015      	b.n	14b40 <LORAWAN_TaskHandler+0x34>
   14b14:	2400      	movs	r4, #0
   14b16:	782b      	ldrb	r3, [r5, #0]
   14b18:	4123      	asrs	r3, r4
   14b1a:	4233      	tst	r3, r6
   14b1c:	d00d      	beq.n	14b3a <LORAWAN_TaskHandler+0x2e>
   14b1e:	4b0c      	ldr	r3, [pc, #48]	; (14b50 <LORAWAN_TaskHandler+0x44>)
   14b20:	4798      	blx	r3
   14b22:	0032      	movs	r2, r6
   14b24:	40a2      	lsls	r2, r4
   14b26:	782b      	ldrb	r3, [r5, #0]
   14b28:	00a4      	lsls	r4, r4, #2
   14b2a:	4393      	bics	r3, r2
   14b2c:	702b      	strb	r3, [r5, #0]
   14b2e:	4b09      	ldr	r3, [pc, #36]	; (14b54 <LORAWAN_TaskHandler+0x48>)
   14b30:	4798      	blx	r3
   14b32:	4b09      	ldr	r3, [pc, #36]	; (14b58 <LORAWAN_TaskHandler+0x4c>)
   14b34:	58e3      	ldr	r3, [r4, r3]
   14b36:	4798      	blx	r3
   14b38:	e7ea      	b.n	14b10 <LORAWAN_TaskHandler+0x4>
   14b3a:	3401      	adds	r4, #1
   14b3c:	2c03      	cmp	r4, #3
   14b3e:	d1ea      	bne.n	14b16 <LORAWAN_TaskHandler+0xa>
   14b40:	7828      	ldrb	r0, [r5, #0]
   14b42:	b2c0      	uxtb	r0, r0
   14b44:	2800      	cmp	r0, #0
   14b46:	d1e5      	bne.n	14b14 <LORAWAN_TaskHandler+0x8>
   14b48:	bd70      	pop	{r4, r5, r6, pc}
   14b4a:	46c0      	nop			; (mov r8, r8)
   14b4c:	20001120 	.word	0x20001120
   14b50:	000083b5 	.word	0x000083b5
   14b54:	000083c1 	.word	0x000083c1
   14b58:	000203f8 	.word	0x000203f8

00014b5c <RADIO_GetAttr>:
   14b5c:	b510      	push	{r4, lr}
   14b5e:	000b      	movs	r3, r1
   14b60:	281f      	cmp	r0, #31
   14b62:	d900      	bls.n	14b66 <RADIO_GetAttr+0xa>
   14b64:	e069      	b.n	14c3a <RADIO_GetAttr+0xde>
   14b66:	f001 fd49 	bl	165fc <__gnu_thumb1_case_uqi>
   14b6a:	1410      	.short	0x1410
   14b6c:	68201c19 	.word	0x68201c19
   14b70:	312e2a27 	.word	0x312e2a27
   14b74:	3d3a3734 	.word	0x3d3a3734
   14b78:	46434054 	.word	0x46434054
   14b7c:	68245149 	.word	0x68245149
   14b80:	68686859 	.word	0x68686859
   14b84:	5c686817 	.word	0x5c686817
   14b88:	6360      	.short	0x6360
   14b8a:	4a2d      	ldr	r2, [pc, #180]	; (14c40 <RADIO_GetAttr+0xe4>)
   14b8c:	7e12      	ldrb	r2, [r2, #24]
   14b8e:	701a      	strb	r2, [r3, #0]
   14b90:	e002      	b.n	14b98 <RADIO_GetAttr+0x3c>
   14b92:	4a2b      	ldr	r2, [pc, #172]	; (14c40 <RADIO_GetAttr+0xe4>)
   14b94:	6812      	ldr	r2, [r2, #0]
   14b96:	601a      	str	r2, [r3, #0]
   14b98:	2000      	movs	r0, #0
   14b9a:	bd10      	pop	{r4, pc}
   14b9c:	4a28      	ldr	r2, [pc, #160]	; (14c40 <RADIO_GetAttr+0xe4>)
   14b9e:	6852      	ldr	r2, [r2, #4]
   14ba0:	e7f9      	b.n	14b96 <RADIO_GetAttr+0x3a>
   14ba2:	4a27      	ldr	r2, [pc, #156]	; (14c40 <RADIO_GetAttr+0xe4>)
   14ba4:	8a92      	ldrh	r2, [r2, #20]
   14ba6:	801a      	strh	r2, [r3, #0]
   14ba8:	e7f6      	b.n	14b98 <RADIO_GetAttr+0x3c>
   14baa:	4a25      	ldr	r2, [pc, #148]	; (14c40 <RADIO_GetAttr+0xe4>)
   14bac:	3203      	adds	r2, #3
   14bae:	7fd2      	ldrb	r2, [r2, #31]
   14bb0:	e7ed      	b.n	14b8e <RADIO_GetAttr+0x32>
   14bb2:	4a23      	ldr	r2, [pc, #140]	; (14c40 <RADIO_GetAttr+0xe4>)
   14bb4:	3204      	adds	r2, #4
   14bb6:	e7fa      	b.n	14bae <RADIO_GetAttr+0x52>
   14bb8:	4a21      	ldr	r2, [pc, #132]	; (14c40 <RADIO_GetAttr+0xe4>)
   14bba:	3206      	adds	r2, #6
   14bbc:	e7f7      	b.n	14bae <RADIO_GetAttr+0x52>
   14bbe:	4a20      	ldr	r2, [pc, #128]	; (14c40 <RADIO_GetAttr+0xe4>)
   14bc0:	3236      	adds	r2, #54	; 0x36
   14bc2:	7812      	ldrb	r2, [r2, #0]
   14bc4:	e7e3      	b.n	14b8e <RADIO_GetAttr+0x32>
   14bc6:	4a1e      	ldr	r2, [pc, #120]	; (14c40 <RADIO_GetAttr+0xe4>)
   14bc8:	3205      	adds	r2, #5
   14bca:	e7f0      	b.n	14bae <RADIO_GetAttr+0x52>
   14bcc:	4a1c      	ldr	r2, [pc, #112]	; (14c40 <RADIO_GetAttr+0xe4>)
   14bce:	3234      	adds	r2, #52	; 0x34
   14bd0:	e7f7      	b.n	14bc2 <RADIO_GetAttr+0x66>
   14bd2:	4a1b      	ldr	r2, [pc, #108]	; (14c40 <RADIO_GetAttr+0xe4>)
   14bd4:	8ad2      	ldrh	r2, [r2, #22]
   14bd6:	e7e6      	b.n	14ba6 <RADIO_GetAttr+0x4a>
   14bd8:	4a19      	ldr	r2, [pc, #100]	; (14c40 <RADIO_GetAttr+0xe4>)
   14bda:	3233      	adds	r2, #51	; 0x33
   14bdc:	e7f1      	b.n	14bc2 <RADIO_GetAttr+0x66>
   14bde:	4a18      	ldr	r2, [pc, #96]	; (14c40 <RADIO_GetAttr+0xe4>)
   14be0:	68d2      	ldr	r2, [r2, #12]
   14be2:	e7d8      	b.n	14b96 <RADIO_GetAttr+0x3a>
   14be4:	4a16      	ldr	r2, [pc, #88]	; (14c40 <RADIO_GetAttr+0xe4>)
   14be6:	6892      	ldr	r2, [r2, #8]
   14be8:	e7d5      	b.n	14b96 <RADIO_GetAttr+0x3a>
   14bea:	4a15      	ldr	r2, [pc, #84]	; (14c40 <RADIO_GetAttr+0xe4>)
   14bec:	3237      	adds	r2, #55	; 0x37
   14bee:	e7e8      	b.n	14bc2 <RADIO_GetAttr+0x66>
   14bf0:	4a13      	ldr	r2, [pc, #76]	; (14c40 <RADIO_GetAttr+0xe4>)
   14bf2:	3238      	adds	r2, #56	; 0x38
   14bf4:	e7e5      	b.n	14bc2 <RADIO_GetAttr+0x66>
   14bf6:	4a12      	ldr	r2, [pc, #72]	; (14c40 <RADIO_GetAttr+0xe4>)
   14bf8:	3239      	adds	r2, #57	; 0x39
   14bfa:	e7e2      	b.n	14bc2 <RADIO_GetAttr+0x66>
   14bfc:	4a10      	ldr	r2, [pc, #64]	; (14c40 <RADIO_GetAttr+0xe4>)
   14bfe:	4911      	ldr	r1, [pc, #68]	; (14c44 <RADIO_GetAttr+0xe8>)
   14c00:	3202      	adds	r2, #2
   14c02:	7fd2      	ldrb	r2, [r2, #31]
   14c04:	0018      	movs	r0, r3
   14c06:	4b10      	ldr	r3, [pc, #64]	; (14c48 <RADIO_GetAttr+0xec>)
   14c08:	4798      	blx	r3
   14c0a:	e7c5      	b.n	14b98 <RADIO_GetAttr+0x3c>
   14c0c:	4a0c      	ldr	r2, [pc, #48]	; (14c40 <RADIO_GetAttr+0xe4>)
   14c0e:	3202      	adds	r2, #2
   14c10:	e7cd      	b.n	14bae <RADIO_GetAttr+0x52>
   14c12:	4a0b      	ldr	r2, [pc, #44]	; (14c40 <RADIO_GetAttr+0xe4>)
   14c14:	3232      	adds	r2, #50	; 0x32
   14c16:	7812      	ldrb	r2, [r2, #0]
   14c18:	b252      	sxtb	r2, r2
   14c1a:	e7b8      	b.n	14b8e <RADIO_GetAttr+0x32>
   14c1c:	4a08      	ldr	r2, [pc, #32]	; (14c40 <RADIO_GetAttr+0xe4>)
   14c1e:	3235      	adds	r2, #53	; 0x35
   14c20:	e7cf      	b.n	14bc2 <RADIO_GetAttr+0x66>
   14c22:	4907      	ldr	r1, [pc, #28]	; (14c40 <RADIO_GetAttr+0xe4>)
   14c24:	2206      	movs	r2, #6
   14c26:	313c      	adds	r1, #60	; 0x3c
   14c28:	e7ec      	b.n	14c04 <RADIO_GetAttr+0xa8>
   14c2a:	4a05      	ldr	r2, [pc, #20]	; (14c40 <RADIO_GetAttr+0xe4>)
   14c2c:	3254      	adds	r2, #84	; 0x54
   14c2e:	e7c8      	b.n	14bc2 <RADIO_GetAttr+0x66>
   14c30:	4a03      	ldr	r2, [pc, #12]	; (14c40 <RADIO_GetAttr+0xe4>)
   14c32:	3256      	adds	r2, #86	; 0x56
   14c34:	2100      	movs	r1, #0
   14c36:	5e52      	ldrsh	r2, [r2, r1]
   14c38:	e7b5      	b.n	14ba6 <RADIO_GetAttr+0x4a>
   14c3a:	2005      	movs	r0, #5
   14c3c:	e7ad      	b.n	14b9a <RADIO_GetAttr+0x3e>
   14c3e:	46c0      	nop			; (mov r8, r8)
   14c40:	20002980 	.word	0x20002980
   14c44:	20002999 	.word	0x20002999
   14c48:	00019d89 	.word	0x00019d89

00014c4c <RADIO_SetAttr>:
   14c4c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   14c4e:	4b71      	ldr	r3, [pc, #452]	; (14e14 <RADIO_SetAttr+0x1c8>)
   14c50:	0004      	movs	r4, r0
   14c52:	000d      	movs	r5, r1
   14c54:	4798      	blx	r3
   14c56:	2304      	movs	r3, #4
   14c58:	2801      	cmp	r0, #1
   14c5a:	d11a      	bne.n	14c92 <RADIO_SetAttr+0x46>
   14c5c:	2c1d      	cmp	r4, #29
   14c5e:	d900      	bls.n	14c62 <RADIO_SetAttr+0x16>
   14c60:	e0d5      	b.n	14e0e <RADIO_SetAttr+0x1c2>
   14c62:	0020      	movs	r0, r4
   14c64:	f001 fcca 	bl	165fc <__gnu_thumb1_case_uqi>
   14c68:	605c4844 	.word	0x605c4844
   14c6c:	7770d364 	.word	0x7770d364
   14c70:	908c8480 	.word	0x908c8480
   14c74:	a0d39c99 	.word	0xa0d39c99
   14c78:	c2bab1a8 	.word	0xc2bab1a8
   14c7c:	d3cad369 	.word	0xd3cad369
   14c80:	d30fd3d3 	.word	0xd30fd3d3
   14c84:	17d3      	.short	0x17d3
   14c86:	2303      	movs	r3, #3
   14c88:	2d00      	cmp	r5, #0
   14c8a:	d002      	beq.n	14c92 <RADIO_SetAttr+0x46>
   14c8c:	4b62      	ldr	r3, [pc, #392]	; (14e18 <RADIO_SetAttr+0x1cc>)
   14c8e:	611d      	str	r5, [r3, #16]
   14c90:	2300      	movs	r3, #0
   14c92:	0018      	movs	r0, r3
   14c94:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   14c96:	796c      	ldrb	r4, [r5, #5]
   14c98:	2c00      	cmp	r4, #0
   14c9a:	d109      	bne.n	14cb0 <RADIO_SetAttr+0x64>
   14c9c:	4b5e      	ldr	r3, [pc, #376]	; (14e18 <RADIO_SetAttr+0x1cc>)
   14c9e:	001a      	movs	r2, r3
   14ca0:	649c      	str	r4, [r3, #72]	; 0x48
   14ca2:	879c      	strh	r4, [r3, #60]	; 0x3c
   14ca4:	87dc      	strh	r4, [r3, #62]	; 0x3e
   14ca6:	3240      	adds	r2, #64	; 0x40
   14ca8:	3341      	adds	r3, #65	; 0x41
   14caa:	7014      	strb	r4, [r2, #0]
   14cac:	701c      	strb	r4, [r3, #0]
   14cae:	e7ef      	b.n	14c90 <RADIO_SetAttr+0x44>
   14cb0:	882f      	ldrh	r7, [r5, #0]
   14cb2:	2303      	movs	r3, #3
   14cb4:	2f00      	cmp	r7, #0
   14cb6:	d0ec      	beq.n	14c92 <RADIO_SetAttr+0x46>
   14cb8:	792e      	ldrb	r6, [r5, #4]
   14cba:	2e00      	cmp	r6, #0
   14cbc:	d0e9      	beq.n	14c92 <RADIO_SetAttr+0x46>
   14cbe:	20fa      	movs	r0, #250	; 0xfa
   14cc0:	2202      	movs	r2, #2
   14cc2:	5eab      	ldrsh	r3, [r5, r2]
   14cc4:	0080      	lsls	r0, r0, #2
   14cc6:	0031      	movs	r1, r6
   14cc8:	9301      	str	r3, [sp, #4]
   14cca:	4378      	muls	r0, r7
   14ccc:	4b53      	ldr	r3, [pc, #332]	; (14e1c <RADIO_SetAttr+0x1d0>)
   14cce:	4798      	blx	r3
   14cd0:	4b53      	ldr	r3, [pc, #332]	; (14e20 <RADIO_SetAttr+0x1d4>)
   14cd2:	4798      	blx	r3
   14cd4:	4b53      	ldr	r3, [pc, #332]	; (14e24 <RADIO_SetAttr+0x1d8>)
   14cd6:	4798      	blx	r3
   14cd8:	466b      	mov	r3, sp
   14cda:	4d4f      	ldr	r5, [pc, #316]	; (14e18 <RADIO_SetAttr+0x1cc>)
   14cdc:	889b      	ldrh	r3, [r3, #4]
   14cde:	64a8      	str	r0, [r5, #72]	; 0x48
   14ce0:	87eb      	strh	r3, [r5, #62]	; 0x3e
   14ce2:	002b      	movs	r3, r5
   14ce4:	87af      	strh	r7, [r5, #60]	; 0x3c
   14ce6:	3340      	adds	r3, #64	; 0x40
   14ce8:	3541      	adds	r5, #65	; 0x41
   14cea:	701e      	strb	r6, [r3, #0]
   14cec:	702c      	strb	r4, [r5, #0]
   14cee:	e7cf      	b.n	14c90 <RADIO_SetAttr+0x44>
   14cf0:	782a      	ldrb	r2, [r5, #0]
   14cf2:	4b49      	ldr	r3, [pc, #292]	; (14e18 <RADIO_SetAttr+0x1cc>)
   14cf4:	761a      	strb	r2, [r3, #24]
   14cf6:	e7cb      	b.n	14c90 <RADIO_SetAttr+0x44>
   14cf8:	4b4b      	ldr	r3, [pc, #300]	; (14e28 <RADIO_SetAttr+0x1dc>)
   14cfa:	682a      	ldr	r2, [r5, #0]
   14cfc:	18d1      	adds	r1, r2, r3
   14cfe:	4b4b      	ldr	r3, [pc, #300]	; (14e2c <RADIO_SetAttr+0x1e0>)
   14d00:	4299      	cmp	r1, r3
   14d02:	d90a      	bls.n	14d1a <RADIO_SetAttr+0xce>
   14d04:	4b4a      	ldr	r3, [pc, #296]	; (14e30 <RADIO_SetAttr+0x1e4>)
   14d06:	494b      	ldr	r1, [pc, #300]	; (14e34 <RADIO_SetAttr+0x1e8>)
   14d08:	18d3      	adds	r3, r2, r3
   14d0a:	428b      	cmp	r3, r1
   14d0c:	d905      	bls.n	14d1a <RADIO_SetAttr+0xce>
   14d0e:	494a      	ldr	r1, [pc, #296]	; (14e38 <RADIO_SetAttr+0x1ec>)
   14d10:	484a      	ldr	r0, [pc, #296]	; (14e3c <RADIO_SetAttr+0x1f0>)
   14d12:	1851      	adds	r1, r2, r1
   14d14:	2305      	movs	r3, #5
   14d16:	4281      	cmp	r1, r0
   14d18:	d8bb      	bhi.n	14c92 <RADIO_SetAttr+0x46>
   14d1a:	4b3f      	ldr	r3, [pc, #252]	; (14e18 <RADIO_SetAttr+0x1cc>)
   14d1c:	601a      	str	r2, [r3, #0]
   14d1e:	e7b7      	b.n	14c90 <RADIO_SetAttr+0x44>
   14d20:	682a      	ldr	r2, [r5, #0]
   14d22:	4b3d      	ldr	r3, [pc, #244]	; (14e18 <RADIO_SetAttr+0x1cc>)
   14d24:	605a      	str	r2, [r3, #4]
   14d26:	e7b3      	b.n	14c90 <RADIO_SetAttr+0x44>
   14d28:	882a      	ldrh	r2, [r5, #0]
   14d2a:	4b3b      	ldr	r3, [pc, #236]	; (14e18 <RADIO_SetAttr+0x1cc>)
   14d2c:	829a      	strh	r2, [r3, #20]
   14d2e:	e7af      	b.n	14c90 <RADIO_SetAttr+0x44>
   14d30:	4b39      	ldr	r3, [pc, #228]	; (14e18 <RADIO_SetAttr+0x1cc>)
   14d32:	782a      	ldrb	r2, [r5, #0]
   14d34:	3303      	adds	r3, #3
   14d36:	77da      	strb	r2, [r3, #31]
   14d38:	e7aa      	b.n	14c90 <RADIO_SetAttr+0x44>
   14d3a:	782a      	ldrb	r2, [r5, #0]
   14d3c:	2305      	movs	r3, #5
   14d3e:	2a01      	cmp	r2, #1
   14d40:	d8a7      	bhi.n	14c92 <RADIO_SetAttr+0x46>
   14d42:	4b35      	ldr	r3, [pc, #212]	; (14e18 <RADIO_SetAttr+0x1cc>)
   14d44:	3304      	adds	r3, #4
   14d46:	e7f6      	b.n	14d36 <RADIO_SetAttr+0xea>
   14d48:	782a      	ldrb	r2, [r5, #0]
   14d4a:	2305      	movs	r3, #5
   14d4c:	2a01      	cmp	r2, #1
   14d4e:	d8a0      	bhi.n	14c92 <RADIO_SetAttr+0x46>
   14d50:	4b31      	ldr	r3, [pc, #196]	; (14e18 <RADIO_SetAttr+0x1cc>)
   14d52:	3306      	adds	r3, #6
   14d54:	e7ef      	b.n	14d36 <RADIO_SetAttr+0xea>
   14d56:	782a      	ldrb	r2, [r5, #0]
   14d58:	2305      	movs	r3, #5
   14d5a:	1fd1      	subs	r1, r2, #7
   14d5c:	2902      	cmp	r1, #2
   14d5e:	d898      	bhi.n	14c92 <RADIO_SetAttr+0x46>
   14d60:	4b2d      	ldr	r3, [pc, #180]	; (14e18 <RADIO_SetAttr+0x1cc>)
   14d62:	3336      	adds	r3, #54	; 0x36
   14d64:	701a      	strb	r2, [r3, #0]
   14d66:	e793      	b.n	14c90 <RADIO_SetAttr+0x44>
   14d68:	4b2b      	ldr	r3, [pc, #172]	; (14e18 <RADIO_SetAttr+0x1cc>)
   14d6a:	782a      	ldrb	r2, [r5, #0]
   14d6c:	3305      	adds	r3, #5
   14d6e:	e7e2      	b.n	14d36 <RADIO_SetAttr+0xea>
   14d70:	782a      	ldrb	r2, [r5, #0]
   14d72:	2305      	movs	r3, #5
   14d74:	2a01      	cmp	r2, #1
   14d76:	d900      	bls.n	14d7a <RADIO_SetAttr+0x12e>
   14d78:	e78b      	b.n	14c92 <RADIO_SetAttr+0x46>
   14d7a:	4b27      	ldr	r3, [pc, #156]	; (14e18 <RADIO_SetAttr+0x1cc>)
   14d7c:	3334      	adds	r3, #52	; 0x34
   14d7e:	e7f1      	b.n	14d64 <RADIO_SetAttr+0x118>
   14d80:	882a      	ldrh	r2, [r5, #0]
   14d82:	4b25      	ldr	r3, [pc, #148]	; (14e18 <RADIO_SetAttr+0x1cc>)
   14d84:	82da      	strh	r2, [r3, #22]
   14d86:	e783      	b.n	14c90 <RADIO_SetAttr+0x44>
   14d88:	782a      	ldrb	r2, [r5, #0]
   14d8a:	2305      	movs	r3, #5
   14d8c:	1e51      	subs	r1, r2, #1
   14d8e:	2903      	cmp	r1, #3
   14d90:	d900      	bls.n	14d94 <RADIO_SetAttr+0x148>
   14d92:	e77e      	b.n	14c92 <RADIO_SetAttr+0x46>
   14d94:	4b20      	ldr	r3, [pc, #128]	; (14e18 <RADIO_SetAttr+0x1cc>)
   14d96:	3333      	adds	r3, #51	; 0x33
   14d98:	e7e4      	b.n	14d64 <RADIO_SetAttr+0x118>
   14d9a:	4b1f      	ldr	r3, [pc, #124]	; (14e18 <RADIO_SetAttr+0x1cc>)
   14d9c:	682a      	ldr	r2, [r5, #0]
   14d9e:	60da      	str	r2, [r3, #12]
   14da0:	682a      	ldr	r2, [r5, #0]
   14da2:	4b1d      	ldr	r3, [pc, #116]	; (14e18 <RADIO_SetAttr+0x1cc>)
   14da4:	609a      	str	r2, [r3, #8]
   14da6:	e773      	b.n	14c90 <RADIO_SetAttr+0x44>
   14da8:	782a      	ldrb	r2, [r5, #0]
   14daa:	2305      	movs	r3, #5
   14dac:	2a03      	cmp	r2, #3
   14dae:	d900      	bls.n	14db2 <RADIO_SetAttr+0x166>
   14db0:	e76f      	b.n	14c92 <RADIO_SetAttr+0x46>
   14db2:	4b19      	ldr	r3, [pc, #100]	; (14e18 <RADIO_SetAttr+0x1cc>)
   14db4:	3337      	adds	r3, #55	; 0x37
   14db6:	e7d5      	b.n	14d64 <RADIO_SetAttr+0x118>
   14db8:	782a      	ldrb	r2, [r5, #0]
   14dba:	2305      	movs	r3, #5
   14dbc:	1e51      	subs	r1, r2, #1
   14dbe:	2916      	cmp	r1, #22
   14dc0:	d900      	bls.n	14dc4 <RADIO_SetAttr+0x178>
   14dc2:	e766      	b.n	14c92 <RADIO_SetAttr+0x46>
   14dc4:	4b14      	ldr	r3, [pc, #80]	; (14e18 <RADIO_SetAttr+0x1cc>)
   14dc6:	3338      	adds	r3, #56	; 0x38
   14dc8:	e7cc      	b.n	14d64 <RADIO_SetAttr+0x118>
   14dca:	782a      	ldrb	r2, [r5, #0]
   14dcc:	2305      	movs	r3, #5
   14dce:	1e51      	subs	r1, r2, #1
   14dd0:	2916      	cmp	r1, #22
   14dd2:	d900      	bls.n	14dd6 <RADIO_SetAttr+0x18a>
   14dd4:	e75d      	b.n	14c92 <RADIO_SetAttr+0x46>
   14dd6:	4b10      	ldr	r3, [pc, #64]	; (14e18 <RADIO_SetAttr+0x1cc>)
   14dd8:	3339      	adds	r3, #57	; 0x39
   14dda:	e7c3      	b.n	14d64 <RADIO_SetAttr+0x118>
   14ddc:	4b0e      	ldr	r3, [pc, #56]	; (14e18 <RADIO_SetAttr+0x1cc>)
   14dde:	0029      	movs	r1, r5
   14de0:	3302      	adds	r3, #2
   14de2:	7fda      	ldrb	r2, [r3, #31]
   14de4:	4816      	ldr	r0, [pc, #88]	; (14e40 <RADIO_SetAttr+0x1f4>)
   14de6:	4b17      	ldr	r3, [pc, #92]	; (14e44 <RADIO_SetAttr+0x1f8>)
   14de8:	4798      	blx	r3
   14dea:	e751      	b.n	14c90 <RADIO_SetAttr+0x44>
   14dec:	782b      	ldrb	r3, [r5, #0]
   14dee:	1c1a      	adds	r2, r3, #0
   14df0:	2b08      	cmp	r3, #8
   14df2:	d900      	bls.n	14df6 <RADIO_SetAttr+0x1aa>
   14df4:	2208      	movs	r2, #8
   14df6:	4b08      	ldr	r3, [pc, #32]	; (14e18 <RADIO_SetAttr+0x1cc>)
   14df8:	3302      	adds	r3, #2
   14dfa:	e79c      	b.n	14d36 <RADIO_SetAttr+0xea>
   14dfc:	2305      	movs	r3, #5
   14dfe:	782a      	ldrb	r2, [r5, #0]
   14e00:	1fd1      	subs	r1, r2, #7
   14e02:	4299      	cmp	r1, r3
   14e04:	d900      	bls.n	14e08 <RADIO_SetAttr+0x1bc>
   14e06:	e744      	b.n	14c92 <RADIO_SetAttr+0x46>
   14e08:	4b03      	ldr	r3, [pc, #12]	; (14e18 <RADIO_SetAttr+0x1cc>)
   14e0a:	3335      	adds	r3, #53	; 0x35
   14e0c:	e7aa      	b.n	14d64 <RADIO_SetAttr+0x118>
   14e0e:	2305      	movs	r3, #5
   14e10:	e73f      	b.n	14c92 <RADIO_SetAttr+0x46>
   14e12:	46c0      	nop			; (mov r8, r8)
   14e14:	00015561 	.word	0x00015561
   14e18:	20002980 	.word	0x20002980
   14e1c:	00016739 	.word	0x00016739
   14e20:	0001797d 	.word	0x0001797d
   14e24:	00016a95 	.word	0x00016a95
   14e28:	f7d58bc0 	.word	0xf7d58bc0
   14e2c:	0243d580 	.word	0x0243d580
   14e30:	e78fe580 	.word	0xe78fe580
   14e34:	06dac2c0 	.word	0x06dac2c0
   14e38:	cc9eec80 	.word	0xcc9eec80
   14e3c:	096ae380 	.word	0x096ae380
   14e40:	20002999 	.word	0x20002999
   14e44:	00019d89 	.word	0x00019d89

00014e48 <RADIO_Init>:
   14e48:	b510      	push	{r4, lr}
   14e4a:	4b0c      	ldr	r3, [pc, #48]	; (14e7c <RADIO_Init+0x34>)
   14e4c:	4798      	blx	r3
   14e4e:	4b0c      	ldr	r3, [pc, #48]	; (14e80 <RADIO_Init+0x38>)
   14e50:	201f      	movs	r0, #31
   14e52:	4798      	blx	r3
   14e54:	4c0b      	ldr	r4, [pc, #44]	; (14e84 <RADIO_Init+0x3c>)
   14e56:	490c      	ldr	r1, [pc, #48]	; (14e88 <RADIO_Init+0x40>)
   14e58:	2001      	movs	r0, #1
   14e5a:	47a0      	blx	r4
   14e5c:	490b      	ldr	r1, [pc, #44]	; (14e8c <RADIO_Init+0x44>)
   14e5e:	2002      	movs	r0, #2
   14e60:	47a0      	blx	r4
   14e62:	490b      	ldr	r1, [pc, #44]	; (14e90 <RADIO_Init+0x48>)
   14e64:	2004      	movs	r0, #4
   14e66:	47a0      	blx	r4
   14e68:	490a      	ldr	r1, [pc, #40]	; (14e94 <RADIO_Init+0x4c>)
   14e6a:	2008      	movs	r0, #8
   14e6c:	47a0      	blx	r4
   14e6e:	490a      	ldr	r1, [pc, #40]	; (14e98 <RADIO_Init+0x50>)
   14e70:	2010      	movs	r0, #16
   14e72:	47a0      	blx	r4
   14e74:	4909      	ldr	r1, [pc, #36]	; (14e9c <RADIO_Init+0x54>)
   14e76:	2020      	movs	r0, #32
   14e78:	47a0      	blx	r4
   14e7a:	bd10      	pop	{r4, pc}
   14e7c:	00015c5d 	.word	0x00015c5d
   14e80:	0001556d 	.word	0x0001556d
   14e84:	000081d9 	.word	0x000081d9
   14e88:	000152f9 	.word	0x000152f9
   14e8c:	00015371 	.word	0x00015371
   14e90:	000153e1 	.word	0x000153e1
   14e94:	00015431 	.word	0x00015431
   14e98:	00015459 	.word	0x00015459
   14e9c:	00015481 	.word	0x00015481

00014ea0 <Radio_WriteFrequency>:
   14ea0:	b570      	push	{r4, r5, r6, lr}
   14ea2:	490d      	ldr	r1, [pc, #52]	; (14ed8 <Radio_WriteFrequency+0x38>)
   14ea4:	4d0d      	ldr	r5, [pc, #52]	; (14edc <Radio_WriteFrequency+0x3c>)
   14ea6:	0006      	movs	r6, r0
   14ea8:	47a8      	blx	r5
   14eaa:	4b0d      	ldr	r3, [pc, #52]	; (14ee0 <Radio_WriteFrequency+0x40>)
   14eac:	0004      	movs	r4, r0
   14eae:	490a      	ldr	r1, [pc, #40]	; (14ed8 <Radio_WriteFrequency+0x38>)
   14eb0:	0030      	movs	r0, r6
   14eb2:	4798      	blx	r3
   14eb4:	0208      	lsls	r0, r1, #8
   14eb6:	4908      	ldr	r1, [pc, #32]	; (14ed8 <Radio_WriteFrequency+0x38>)
   14eb8:	47a8      	blx	r5
   14eba:	0224      	lsls	r4, r4, #8
   14ebc:	1904      	adds	r4, r0, r4
   14ebe:	0c21      	lsrs	r1, r4, #16
   14ec0:	4d08      	ldr	r5, [pc, #32]	; (14ee4 <Radio_WriteFrequency+0x44>)
   14ec2:	b2c9      	uxtb	r1, r1
   14ec4:	2006      	movs	r0, #6
   14ec6:	47a8      	blx	r5
   14ec8:	0a21      	lsrs	r1, r4, #8
   14eca:	b2c9      	uxtb	r1, r1
   14ecc:	2007      	movs	r0, #7
   14ece:	47a8      	blx	r5
   14ed0:	b2e1      	uxtb	r1, r4
   14ed2:	2008      	movs	r0, #8
   14ed4:	47a8      	blx	r5
   14ed6:	bd70      	pop	{r4, r5, r6, pc}
   14ed8:	00003d09 	.word	0x00003d09
   14edc:	00016625 	.word	0x00016625
   14ee0:	00016731 	.word	0x00016731
   14ee4:	00008105 	.word	0x00008105

00014ee8 <Radio_WriteConfiguration>:
   14ee8:	b5f0      	push	{r4, r5, r6, r7, lr}
   14eea:	4cb0      	ldr	r4, [pc, #704]	; (151ac <Radio_WriteConfiguration+0x2c4>)
   14eec:	2200      	movs	r2, #0
   14eee:	0023      	movs	r3, r4
   14ef0:	b085      	sub	sp, #20
   14ef2:	9002      	str	r0, [sp, #8]
   14ef4:	3334      	adds	r3, #52	; 0x34
   14ef6:	0010      	movs	r0, r2
   14ef8:	7819      	ldrb	r1, [r3, #0]
   14efa:	4bad      	ldr	r3, [pc, #692]	; (151b0 <Radio_WriteConfiguration+0x2c8>)
   14efc:	4798      	blx	r3
   14efe:	4bad      	ldr	r3, [pc, #692]	; (151b4 <Radio_WriteConfiguration+0x2cc>)
   14f00:	6820      	ldr	r0, [r4, #0]
   14f02:	4798      	blx	r3
   14f04:	1ce3      	adds	r3, r4, #3
   14f06:	1d62      	adds	r2, r4, #5
   14f08:	7fdb      	ldrb	r3, [r3, #31]
   14f0a:	7fd2      	ldrb	r2, [r2, #31]
   14f0c:	b25b      	sxtb	r3, r3
   14f0e:	4eaa      	ldr	r6, [pc, #680]	; (151b8 <Radio_WriteConfiguration+0x2d0>)
   14f10:	4daa      	ldr	r5, [pc, #680]	; (151bc <Radio_WriteConfiguration+0x2d4>)
   14f12:	2a00      	cmp	r2, #0
   14f14:	d000      	beq.n	14f18 <Radio_WriteConfiguration+0x30>
   14f16:	e0fc      	b.n	15112 <Radio_WriteConfiguration+0x22a>
   14f18:	1c1f      	adds	r7, r3, #0
   14f1a:	2b0f      	cmp	r3, #15
   14f1c:	dc00      	bgt.n	14f20 <Radio_WriteConfiguration+0x38>
   14f1e:	e0ec      	b.n	150fa <Radio_WriteConfiguration+0x212>
   14f20:	270f      	movs	r7, #15
   14f22:	b27b      	sxtb	r3, r7
   14f24:	204d      	movs	r0, #77	; 0x4d
   14f26:	9301      	str	r3, [sp, #4]
   14f28:	47b0      	blx	r6
   14f2a:	21f8      	movs	r1, #248	; 0xf8
   14f2c:	4008      	ands	r0, r1
   14f2e:	39f4      	subs	r1, #244	; 0xf4
   14f30:	4301      	orrs	r1, r0
   14f32:	204d      	movs	r0, #77	; 0x4d
   14f34:	47a8      	blx	r5
   14f36:	b27b      	sxtb	r3, r7
   14f38:	2b00      	cmp	r3, #0
   14f3a:	db00      	blt.n	14f3e <Radio_WriteConfiguration+0x56>
   14f3c:	e0e4      	b.n	15108 <Radio_WriteConfiguration+0x220>
   14f3e:	3703      	adds	r7, #3
   14f40:	b2f9      	uxtb	r1, r7
   14f42:	2720      	movs	r7, #32
   14f44:	4339      	orrs	r1, r7
   14f46:	2009      	movs	r0, #9
   14f48:	47a8      	blx	r5
   14f4a:	0023      	movs	r3, r4
   14f4c:	3334      	adds	r3, #52	; 0x34
   14f4e:	781f      	ldrb	r7, [r3, #0]
   14f50:	2f01      	cmp	r7, #1
   14f52:	d000      	beq.n	14f56 <Radio_WriteConfiguration+0x6e>
   14f54:	e144      	b.n	151e0 <Radio_WriteConfiguration+0x2f8>
   14f56:	7e21      	ldrb	r1, [r4, #24]
   14f58:	2039      	movs	r0, #57	; 0x39
   14f5a:	47a8      	blx	r5
   14f5c:	4b98      	ldr	r3, [pc, #608]	; (151c0 <Radio_WriteConfiguration+0x2d8>)
   14f5e:	201d      	movs	r0, #29
   14f60:	7819      	ldrb	r1, [r3, #0]
   14f62:	0023      	movs	r3, r4
   14f64:	3333      	adds	r3, #51	; 0x33
   14f66:	781b      	ldrb	r3, [r3, #0]
   14f68:	0109      	lsls	r1, r1, #4
   14f6a:	005b      	lsls	r3, r3, #1
   14f6c:	4319      	orrs	r1, r3
   14f6e:	1de3      	adds	r3, r4, #7
   14f70:	7fdb      	ldrb	r3, [r3, #31]
   14f72:	401f      	ands	r7, r3
   14f74:	4339      	orrs	r1, r7
   14f76:	b2c9      	uxtb	r1, r1
   14f78:	47a8      	blx	r5
   14f7a:	1d23      	adds	r3, r4, #4
   14f7c:	7fd9      	ldrb	r1, [r3, #31]
   14f7e:	2304      	movs	r3, #4
   14f80:	0089      	lsls	r1, r1, #2
   14f82:	4019      	ands	r1, r3
   14f84:	0023      	movs	r3, r4
   14f86:	3335      	adds	r3, #53	; 0x35
   14f88:	781b      	ldrb	r3, [r3, #0]
   14f8a:	201e      	movs	r0, #30
   14f8c:	011b      	lsls	r3, r3, #4
   14f8e:	4319      	orrs	r1, r3
   14f90:	9b02      	ldr	r3, [sp, #8]
   14f92:	059b      	lsls	r3, r3, #22
   14f94:	0f9b      	lsrs	r3, r3, #30
   14f96:	4319      	orrs	r1, r3
   14f98:	b2c9      	uxtb	r1, r1
   14f9a:	47a8      	blx	r5
   14f9c:	2300      	movs	r3, #0
   14f9e:	8ae1      	ldrh	r1, [r4, #22]
   14fa0:	4299      	cmp	r1, r3
   14fa2:	d011      	beq.n	14fc8 <Radio_WriteConfiguration+0xe0>
   14fa4:	4a86      	ldr	r2, [pc, #536]	; (151c0 <Radio_WriteConfiguration+0x2d8>)
   14fa6:	7812      	ldrb	r2, [r2, #0]
   14fa8:	2a08      	cmp	r2, #8
   14faa:	d100      	bne.n	14fae <Radio_WriteConfiguration+0xc6>
   14fac:	e0e4      	b.n	15178 <Radio_WriteConfiguration+0x290>
   14fae:	2a09      	cmp	r2, #9
   14fb0:	d100      	bne.n	14fb4 <Radio_WriteConfiguration+0xcc>
   14fb2:	e0e3      	b.n	1517c <Radio_WriteConfiguration+0x294>
   14fb4:	2a07      	cmp	r2, #7
   14fb6:	d000      	beq.n	14fba <Radio_WriteConfiguration+0xd2>
   14fb8:	e0e3      	b.n	15182 <Radio_WriteConfiguration+0x29a>
   14fba:	337d      	adds	r3, #125	; 0x7d
   14fbc:	4359      	muls	r1, r3
   14fbe:	0023      	movs	r3, r4
   14fc0:	3335      	adds	r3, #53	; 0x35
   14fc2:	781b      	ldrb	r3, [r3, #0]
   14fc4:	40d9      	lsrs	r1, r3
   14fc6:	000b      	movs	r3, r1
   14fc8:	b2d9      	uxtb	r1, r3
   14fca:	2024      	movs	r0, #36	; 0x24
   14fcc:	4d7b      	ldr	r5, [pc, #492]	; (151bc <Radio_WriteConfiguration+0x2d4>)
   14fce:	47a8      	blx	r5
   14fd0:	466b      	mov	r3, sp
   14fd2:	201f      	movs	r0, #31
   14fd4:	7a19      	ldrb	r1, [r3, #8]
   14fd6:	47a8      	blx	r5
   14fd8:	2026      	movs	r0, #38	; 0x26
   14fda:	47b0      	blx	r6
   14fdc:	0023      	movs	r3, r4
   14fde:	3335      	adds	r3, #53	; 0x35
   14fe0:	781b      	ldrb	r3, [r3, #0]
   14fe2:	2b0c      	cmp	r3, #12
   14fe4:	d105      	bne.n	14ff2 <Radio_WriteConfiguration+0x10a>
   14fe6:	0023      	movs	r3, r4
   14fe8:	3336      	adds	r3, #54	; 0x36
   14fea:	781b      	ldrb	r3, [r3, #0]
   14fec:	3b07      	subs	r3, #7
   14fee:	2b01      	cmp	r3, #1
   14ff0:	d906      	bls.n	15000 <Radio_WriteConfiguration+0x118>
   14ff2:	6b62      	ldr	r2, [r4, #52]	; 0x34
   14ff4:	4b73      	ldr	r3, [pc, #460]	; (151c4 <Radio_WriteConfiguration+0x2dc>)
   14ff6:	4013      	ands	r3, r2
   14ff8:	4a73      	ldr	r2, [pc, #460]	; (151c8 <Radio_WriteConfiguration+0x2e0>)
   14ffa:	4293      	cmp	r3, r2
   14ffc:	d000      	beq.n	15000 <Radio_WriteConfiguration+0x118>
   14ffe:	e0c2      	b.n	15186 <Radio_WriteConfiguration+0x29e>
   15000:	2108      	movs	r1, #8
   15002:	4308      	orrs	r0, r1
   15004:	b2c0      	uxtb	r0, r0
   15006:	2104      	movs	r1, #4
   15008:	4301      	orrs	r1, r0
   1500a:	2026      	movs	r0, #38	; 0x26
   1500c:	47a8      	blx	r5
   1500e:	2031      	movs	r0, #49	; 0x31
   15010:	47b0      	blx	r6
   15012:	21f8      	movs	r1, #248	; 0xf8
   15014:	4008      	ands	r0, r1
   15016:	39f5      	subs	r1, #245	; 0xf5
   15018:	4301      	orrs	r1, r0
   1501a:	2031      	movs	r0, #49	; 0x31
   1501c:	47a8      	blx	r5
   1501e:	210a      	movs	r1, #10
   15020:	2037      	movs	r0, #55	; 0x37
   15022:	47a8      	blx	r5
   15024:	0023      	movs	r3, r4
   15026:	3331      	adds	r3, #49	; 0x31
   15028:	781b      	ldrb	r3, [r3, #0]
   1502a:	2b12      	cmp	r3, #18
   1502c:	d11e      	bne.n	1506c <Radio_WriteConfiguration+0x184>
   1502e:	0023      	movs	r3, r4
   15030:	3336      	adds	r3, #54	; 0x36
   15032:	781b      	ldrb	r3, [r3, #0]
   15034:	3b07      	subs	r3, #7
   15036:	2b01      	cmp	r3, #1
   15038:	d80b      	bhi.n	15052 <Radio_WriteConfiguration+0x16a>
   1503a:	2031      	movs	r0, #49	; 0x31
   1503c:	47b0      	blx	r6
   1503e:	217f      	movs	r1, #127	; 0x7f
   15040:	4001      	ands	r1, r0
   15042:	2031      	movs	r0, #49	; 0x31
   15044:	47a8      	blx	r5
   15046:	2140      	movs	r1, #64	; 0x40
   15048:	202f      	movs	r0, #47	; 0x2f
   1504a:	47a8      	blx	r5
   1504c:	2100      	movs	r1, #0
   1504e:	2030      	movs	r0, #48	; 0x30
   15050:	47a8      	blx	r5
   15052:	0023      	movs	r3, r4
   15054:	3336      	adds	r3, #54	; 0x36
   15056:	781b      	ldrb	r3, [r3, #0]
   15058:	2b09      	cmp	r3, #9
   1505a:	d107      	bne.n	1506c <Radio_WriteConfiguration+0x184>
   1505c:	2031      	movs	r0, #49	; 0x31
   1505e:	47b0      	blx	r6
   15060:	2180      	movs	r1, #128	; 0x80
   15062:	4249      	negs	r1, r1
   15064:	4301      	orrs	r1, r0
   15066:	b2c9      	uxtb	r1, r1
   15068:	2031      	movs	r0, #49	; 0x31
   1506a:	47a8      	blx	r5
   1506c:	2033      	movs	r0, #51	; 0x33
   1506e:	47b0      	blx	r6
   15070:	1da3      	adds	r3, r4, #6
   15072:	7fd9      	ldrb	r1, [r3, #31]
   15074:	2340      	movs	r3, #64	; 0x40
   15076:	0189      	lsls	r1, r1, #6
   15078:	4398      	bics	r0, r3
   1507a:	4019      	ands	r1, r3
   1507c:	4301      	orrs	r1, r0
   1507e:	b2c9      	uxtb	r1, r1
   15080:	2033      	movs	r0, #51	; 0x33
   15082:	47a8      	blx	r5
   15084:	8aa1      	ldrh	r1, [r4, #20]
   15086:	2020      	movs	r0, #32
   15088:	0a09      	lsrs	r1, r1, #8
   1508a:	47a8      	blx	r5
   1508c:	7d21      	ldrb	r1, [r4, #20]
   1508e:	2021      	movs	r0, #33	; 0x21
   15090:	47a8      	blx	r5
   15092:	2100      	movs	r1, #0
   15094:	200d      	movs	r0, #13
   15096:	47a8      	blx	r5
   15098:	2100      	movs	r1, #0
   1509a:	200e      	movs	r0, #14
   1509c:	47a8      	blx	r5
   1509e:	2100      	movs	r1, #0
   150a0:	200f      	movs	r0, #15
   150a2:	47a8      	blx	r5
   150a4:	0023      	movs	r3, r4
   150a6:	3331      	adds	r3, #49	; 0x31
   150a8:	781b      	ldrb	r3, [r3, #0]
   150aa:	2b12      	cmp	r3, #18
   150ac:	d120      	bne.n	150f0 <Radio_WriteConfiguration+0x208>
   150ae:	0023      	movs	r3, r4
   150b0:	3336      	adds	r3, #54	; 0x36
   150b2:	781b      	ldrb	r3, [r3, #0]
   150b4:	2b09      	cmp	r3, #9
   150b6:	d000      	beq.n	150ba <Radio_WriteConfiguration+0x1d2>
   150b8:	e072      	b.n	151a0 <Radio_WriteConfiguration+0x2b8>
   150ba:	4a44      	ldr	r2, [pc, #272]	; (151cc <Radio_WriteConfiguration+0x2e4>)
   150bc:	6823      	ldr	r3, [r4, #0]
   150be:	1899      	adds	r1, r3, r2
   150c0:	4a43      	ldr	r2, [pc, #268]	; (151d0 <Radio_WriteConfiguration+0x2e8>)
   150c2:	4291      	cmp	r1, r2
   150c4:	d862      	bhi.n	1518c <Radio_WriteConfiguration+0x2a4>
   150c6:	2102      	movs	r1, #2
   150c8:	2036      	movs	r0, #54	; 0x36
   150ca:	47a8      	blx	r5
   150cc:	2164      	movs	r1, #100	; 0x64
   150ce:	203a      	movs	r0, #58	; 0x3a
   150d0:	47a8      	blx	r5
   150d2:	0023      	movs	r3, r4
   150d4:	3336      	adds	r3, #54	; 0x36
   150d6:	781b      	ldrb	r3, [r3, #0]
   150d8:	2165      	movs	r1, #101	; 0x65
   150da:	203a      	movs	r0, #58	; 0x3a
   150dc:	2b09      	cmp	r3, #9
   150de:	d162      	bne.n	151a6 <Radio_WriteConfiguration+0x2be>
   150e0:	3406      	adds	r4, #6
   150e2:	7fe3      	ldrb	r3, [r4, #31]
   150e4:	2b01      	cmp	r3, #1
   150e6:	d15e      	bne.n	151a6 <Radio_WriteConfiguration+0x2be>
   150e8:	47a8      	blx	r5
   150ea:	2119      	movs	r1, #25
   150ec:	203b      	movs	r0, #59	; 0x3b
   150ee:	47a8      	blx	r5
   150f0:	21ff      	movs	r1, #255	; 0xff
   150f2:	2012      	movs	r0, #18
   150f4:	47a8      	blx	r5
   150f6:	b005      	add	sp, #20
   150f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   150fa:	b25b      	sxtb	r3, r3
   150fc:	3303      	adds	r3, #3
   150fe:	db00      	blt.n	15102 <Radio_WriteConfiguration+0x21a>
   15100:	e70f      	b.n	14f22 <Radio_WriteConfiguration+0x3a>
   15102:	4b34      	ldr	r3, [pc, #208]	; (151d4 <Radio_WriteConfiguration+0x2ec>)
   15104:	781f      	ldrb	r7, [r3, #0]
   15106:	e70c      	b.n	14f22 <Radio_WriteConfiguration+0x3a>
   15108:	2170      	movs	r1, #112	; 0x70
   1510a:	9b01      	ldr	r3, [sp, #4]
   1510c:	4319      	orrs	r1, r3
   1510e:	b2c9      	uxtb	r1, r1
   15110:	e719      	b.n	14f46 <Radio_WriteConfiguration+0x5e>
   15112:	2b01      	cmp	r3, #1
   15114:	dd07      	ble.n	15126 <Radio_WriteConfiguration+0x23e>
   15116:	2714      	movs	r7, #20
   15118:	2b13      	cmp	r3, #19
   1511a:	dc06      	bgt.n	1512a <Radio_WriteConfiguration+0x242>
   1511c:	1c1f      	adds	r7, r3, #0
   1511e:	2b11      	cmp	r3, #17
   15120:	dd02      	ble.n	15128 <Radio_WriteConfiguration+0x240>
   15122:	2711      	movs	r7, #17
   15124:	e000      	b.n	15128 <Radio_WriteConfiguration+0x240>
   15126:	2702      	movs	r7, #2
   15128:	b27f      	sxtb	r7, r7
   1512a:	200b      	movs	r0, #11
   1512c:	47b0      	blx	r6
   1512e:	9003      	str	r0, [sp, #12]
   15130:	204d      	movs	r0, #77	; 0x4d
   15132:	47b0      	blx	r6
   15134:	2307      	movs	r3, #7
   15136:	4398      	bics	r0, r3
   15138:	b2c1      	uxtb	r1, r0
   1513a:	2f14      	cmp	r7, #20
   1513c:	d112      	bne.n	15164 <Radio_WriteConfiguration+0x27c>
   1513e:	4319      	orrs	r1, r3
   15140:	9b03      	ldr	r3, [sp, #12]
   15142:	37cb      	adds	r7, #203	; 0xcb
   15144:	403b      	ands	r3, r7
   15146:	001f      	movs	r7, r3
   15148:	230f      	movs	r3, #15
   1514a:	9301      	str	r3, [sp, #4]
   1514c:	204d      	movs	r0, #77	; 0x4d
   1514e:	47a8      	blx	r5
   15150:	2180      	movs	r1, #128	; 0x80
   15152:	9b01      	ldr	r3, [sp, #4]
   15154:	4249      	negs	r1, r1
   15156:	4319      	orrs	r1, r3
   15158:	b2c9      	uxtb	r1, r1
   1515a:	2009      	movs	r0, #9
   1515c:	47a8      	blx	r5
   1515e:	0039      	movs	r1, r7
   15160:	200b      	movs	r0, #11
   15162:	e6f1      	b.n	14f48 <Radio_WriteConfiguration+0x60>
   15164:	3f02      	subs	r7, #2
   15166:	b27b      	sxtb	r3, r7
   15168:	2720      	movs	r7, #32
   1516a:	2004      	movs	r0, #4
   1516c:	9301      	str	r3, [sp, #4]
   1516e:	9b03      	ldr	r3, [sp, #12]
   15170:	4301      	orrs	r1, r0
   15172:	431f      	orrs	r7, r3
   15174:	b2ff      	uxtb	r7, r7
   15176:	e7e9      	b.n	1514c <Radio_WriteConfiguration+0x264>
   15178:	23fa      	movs	r3, #250	; 0xfa
   1517a:	e71f      	b.n	14fbc <Radio_WriteConfiguration+0xd4>
   1517c:	23fa      	movs	r3, #250	; 0xfa
   1517e:	005b      	lsls	r3, r3, #1
   15180:	e71c      	b.n	14fbc <Radio_WriteConfiguration+0xd4>
   15182:	0019      	movs	r1, r3
   15184:	e71b      	b.n	14fbe <Radio_WriteConfiguration+0xd6>
   15186:	21f7      	movs	r1, #247	; 0xf7
   15188:	4008      	ands	r0, r1
   1518a:	e73c      	b.n	15006 <Radio_WriteConfiguration+0x11e>
   1518c:	4a12      	ldr	r2, [pc, #72]	; (151d8 <Radio_WriteConfiguration+0x2f0>)
   1518e:	189b      	adds	r3, r3, r2
   15190:	4a12      	ldr	r2, [pc, #72]	; (151dc <Radio_WriteConfiguration+0x2f4>)
   15192:	4293      	cmp	r3, r2
   15194:	d804      	bhi.n	151a0 <Radio_WriteConfiguration+0x2b8>
   15196:	2102      	movs	r1, #2
   15198:	2036      	movs	r0, #54	; 0x36
   1519a:	47a8      	blx	r5
   1519c:	217f      	movs	r1, #127	; 0x7f
   1519e:	e796      	b.n	150ce <Radio_WriteConfiguration+0x1e6>
   151a0:	2103      	movs	r1, #3
   151a2:	2036      	movs	r0, #54	; 0x36
   151a4:	e794      	b.n	150d0 <Radio_WriteConfiguration+0x1e8>
   151a6:	47a8      	blx	r5
   151a8:	211d      	movs	r1, #29
   151aa:	e79f      	b.n	150ec <Radio_WriteConfiguration+0x204>
   151ac:	20002980 	.word	0x20002980
   151b0:	0000f4d9 	.word	0x0000f4d9
   151b4:	00014ea1 	.word	0x00014ea1
   151b8:	0000812d 	.word	0x0000812d
   151bc:	00008105 	.word	0x00008105
   151c0:	200029b6 	.word	0x200029b6
   151c4:	00ffff00 	.word	0x00ffff00
   151c8:	00070b00 	.word	0x00070b00
   151cc:	cc9eec80 	.word	0xcc9eec80
   151d0:	096ae380 	.word	0x096ae380
   151d4:	00020404 	.word	0x00020404
   151d8:	e78fe580 	.word	0xe78fe580
   151dc:	06dac2c0 	.word	0x06dac2c0
   151e0:	6863      	ldr	r3, [r4, #4]
   151e2:	492c      	ldr	r1, [pc, #176]	; (15294 <Radio_WriteConfiguration+0x3ac>)
   151e4:	0218      	lsls	r0, r3, #8
   151e6:	4b2c      	ldr	r3, [pc, #176]	; (15298 <Radio_WriteConfiguration+0x3b0>)
   151e8:	4798      	blx	r3
   151ea:	0007      	movs	r7, r0
   151ec:	0a01      	lsrs	r1, r0, #8
   151ee:	b2c9      	uxtb	r1, r1
   151f0:	2004      	movs	r0, #4
   151f2:	47a8      	blx	r5
   151f4:	b2f9      	uxtb	r1, r7
   151f6:	2005      	movs	r0, #5
   151f8:	47a8      	blx	r5
   151fa:	4b27      	ldr	r3, [pc, #156]	; (15298 <Radio_WriteConfiguration+0x3b0>)
   151fc:	68a1      	ldr	r1, [r4, #8]
   151fe:	4827      	ldr	r0, [pc, #156]	; (1529c <Radio_WriteConfiguration+0x3b4>)
   15200:	4798      	blx	r3
   15202:	0007      	movs	r7, r0
   15204:	0a01      	lsrs	r1, r0, #8
   15206:	b2c9      	uxtb	r1, r1
   15208:	2002      	movs	r0, #2
   1520a:	47a8      	blx	r5
   1520c:	b2f9      	uxtb	r1, r7
   1520e:	2003      	movs	r0, #3
   15210:	47a8      	blx	r5
   15212:	2100      	movs	r1, #0
   15214:	205d      	movs	r0, #93	; 0x5d
   15216:	47a8      	blx	r5
   15218:	8aa1      	ldrh	r1, [r4, #20]
   1521a:	2025      	movs	r0, #37	; 0x25
   1521c:	0a09      	lsrs	r1, r1, #8
   1521e:	47a8      	blx	r5
   15220:	7d21      	ldrb	r1, [r4, #20]
   15222:	2026      	movs	r0, #38	; 0x26
   15224:	47a8      	blx	r5
   15226:	219e      	movs	r1, #158	; 0x9e
   15228:	200d      	movs	r0, #13
   1522a:	47a8      	blx	r5
   1522c:	21bf      	movs	r1, #191	; 0xbf
   1522e:	2035      	movs	r0, #53	; 0x35
   15230:	47a8      	blx	r5
   15232:	200a      	movs	r0, #10
   15234:	47b0      	blx	r6
   15236:	0023      	movs	r3, r4
   15238:	3337      	adds	r3, #55	; 0x37
   1523a:	7819      	ldrb	r1, [r3, #0]
   1523c:	2360      	movs	r3, #96	; 0x60
   1523e:	0149      	lsls	r1, r1, #5
   15240:	4398      	bics	r0, r3
   15242:	4301      	orrs	r1, r0
   15244:	b2c9      	uxtb	r1, r1
   15246:	200a      	movs	r0, #10
   15248:	47a8      	blx	r5
   1524a:	1d23      	adds	r3, r4, #4
   1524c:	7fdb      	ldrb	r3, [r3, #31]
   1524e:	21c0      	movs	r1, #192	; 0xc0
   15250:	2b00      	cmp	r3, #0
   15252:	d000      	beq.n	15256 <Radio_WriteConfiguration+0x36e>
   15254:	3110      	adds	r1, #16
   15256:	2030      	movs	r0, #48	; 0x30
   15258:	47a8      	blx	r5
   1525a:	2600      	movs	r6, #0
   1525c:	1ca3      	adds	r3, r4, #2
   1525e:	7fd9      	ldrb	r1, [r3, #31]
   15260:	428e      	cmp	r6, r1
   15262:	d30d      	bcc.n	15280 <Radio_WriteConfiguration+0x398>
   15264:	2900      	cmp	r1, #0
   15266:	d003      	beq.n	15270 <Radio_WriteConfiguration+0x388>
   15268:	2310      	movs	r3, #16
   1526a:	3901      	subs	r1, #1
   1526c:	4319      	orrs	r1, r3
   1526e:	b2c9      	uxtb	r1, r1
   15270:	2027      	movs	r0, #39	; 0x27
   15272:	47a8      	blx	r5
   15274:	21ff      	movs	r1, #255	; 0xff
   15276:	203e      	movs	r0, #62	; 0x3e
   15278:	47a8      	blx	r5
   1527a:	21ff      	movs	r1, #255	; 0xff
   1527c:	203f      	movs	r0, #63	; 0x3f
   1527e:	e739      	b.n	150f4 <Radio_WriteConfiguration+0x20c>
   15280:	0030      	movs	r0, r6
   15282:	19a3      	adds	r3, r4, r6
   15284:	3028      	adds	r0, #40	; 0x28
   15286:	7e59      	ldrb	r1, [r3, #25]
   15288:	b2c0      	uxtb	r0, r0
   1528a:	3601      	adds	r6, #1
   1528c:	47a8      	blx	r5
   1528e:	b2f6      	uxtb	r6, r6
   15290:	e7e4      	b.n	1525c <Radio_WriteConfiguration+0x374>
   15292:	46c0      	nop			; (mov r8, r8)
   15294:	00003d09 	.word	0x00003d09
   15298:	00016625 	.word	0x00016625
   1529c:	01e84800 	.word	0x01e84800

000152a0 <RADIO_getMappingAndOpmode>:
   152a0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   152a2:	0006      	movs	r6, r0
   152a4:	4d06      	ldr	r5, [pc, #24]	; (152c0 <RADIO_getMappingAndOpmode+0x20>)
   152a6:	2040      	movs	r0, #64	; 0x40
   152a8:	001f      	movs	r7, r3
   152aa:	0014      	movs	r4, r2
   152ac:	9101      	str	r1, [sp, #4]
   152ae:	47a8      	blx	r5
   152b0:	4004      	ands	r4, r0
   152b2:	413c      	asrs	r4, r7
   152b4:	2001      	movs	r0, #1
   152b6:	7034      	strb	r4, [r6, #0]
   152b8:	47a8      	blx	r5
   152ba:	9b01      	ldr	r3, [sp, #4]
   152bc:	7018      	strb	r0, [r3, #0]
   152be:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
   152c0:	0000812d 	.word	0x0000812d

000152c4 <RADIO_UnhandledInterrupt.part.0>:
   152c4:	b510      	push	{r4, lr}
   152c6:	21ff      	movs	r1, #255	; 0xff
   152c8:	2012      	movs	r0, #18
   152ca:	4b01      	ldr	r3, [pc, #4]	; (152d0 <RADIO_UnhandledInterrupt.part.0+0xc>)
   152cc:	4798      	blx	r3
   152ce:	bd10      	pop	{r4, pc}
   152d0:	00008105 	.word	0x00008105

000152d4 <RADIO_UnhandledInterrupt>:
   152d4:	b510      	push	{r4, lr}
   152d6:	2801      	cmp	r0, #1
   152d8:	d102      	bne.n	152e0 <RADIO_UnhandledInterrupt+0xc>
   152da:	4b05      	ldr	r3, [pc, #20]	; (152f0 <RADIO_UnhandledInterrupt+0x1c>)
   152dc:	4798      	blx	r3
   152de:	bd10      	pop	{r4, pc}
   152e0:	21ff      	movs	r1, #255	; 0xff
   152e2:	203e      	movs	r0, #62	; 0x3e
   152e4:	4c03      	ldr	r4, [pc, #12]	; (152f4 <RADIO_UnhandledInterrupt+0x20>)
   152e6:	47a0      	blx	r4
   152e8:	21ff      	movs	r1, #255	; 0xff
   152ea:	203f      	movs	r0, #63	; 0x3f
   152ec:	47a0      	blx	r4
   152ee:	e7f6      	b.n	152de <RADIO_UnhandledInterrupt+0xa>
   152f0:	000152c5 	.word	0x000152c5
   152f4:	00008105 	.word	0x00008105

000152f8 <RADIO_DIO0>:
   152f8:	b573      	push	{r0, r1, r4, r5, r6, lr}
   152fa:	466b      	mov	r3, sp
   152fc:	1ddc      	adds	r4, r3, #7
   152fe:	1d9d      	adds	r5, r3, #6
   15300:	22c0      	movs	r2, #192	; 0xc0
   15302:	2306      	movs	r3, #6
   15304:	0028      	movs	r0, r5
   15306:	0021      	movs	r1, r4
   15308:	4e12      	ldr	r6, [pc, #72]	; (15354 <RADIO_DIO0+0x5c>)
   1530a:	47b0      	blx	r6
   1530c:	7823      	ldrb	r3, [r4, #0]
   1530e:	7828      	ldrb	r0, [r5, #0]
   15310:	b25a      	sxtb	r2, r3
   15312:	b2c0      	uxtb	r0, r0
   15314:	2a00      	cmp	r2, #0
   15316:	da0b      	bge.n	15330 <RADIO_DIO0+0x38>
   15318:	2800      	cmp	r0, #0
   1531a:	d004      	beq.n	15326 <RADIO_DIO0+0x2e>
   1531c:	2801      	cmp	r0, #1
   1531e:	d005      	beq.n	1532c <RADIO_DIO0+0x34>
   15320:	4b0d      	ldr	r3, [pc, #52]	; (15358 <RADIO_DIO0+0x60>)
   15322:	4798      	blx	r3
   15324:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
   15326:	4b0d      	ldr	r3, [pc, #52]	; (1535c <RADIO_DIO0+0x64>)
   15328:	4798      	blx	r3
   1532a:	e7fb      	b.n	15324 <RADIO_DIO0+0x2c>
   1532c:	4b0c      	ldr	r3, [pc, #48]	; (15360 <RADIO_DIO0+0x68>)
   1532e:	e7fb      	b.n	15328 <RADIO_DIO0+0x30>
   15330:	2800      	cmp	r0, #0
   15332:	d10a      	bne.n	1534a <RADIO_DIO0+0x52>
   15334:	2207      	movs	r2, #7
   15336:	4013      	ands	r3, r2
   15338:	7023      	strb	r3, [r4, #0]
   1533a:	2b03      	cmp	r3, #3
   1533c:	d101      	bne.n	15342 <RADIO_DIO0+0x4a>
   1533e:	4b09      	ldr	r3, [pc, #36]	; (15364 <RADIO_DIO0+0x6c>)
   15340:	e7f2      	b.n	15328 <RADIO_DIO0+0x30>
   15342:	2b05      	cmp	r3, #5
   15344:	d102      	bne.n	1534c <RADIO_DIO0+0x54>
   15346:	4b08      	ldr	r3, [pc, #32]	; (15368 <RADIO_DIO0+0x70>)
   15348:	e7ee      	b.n	15328 <RADIO_DIO0+0x30>
   1534a:	2000      	movs	r0, #0
   1534c:	4b07      	ldr	r3, [pc, #28]	; (1536c <RADIO_DIO0+0x74>)
   1534e:	4798      	blx	r3
   15350:	e7e8      	b.n	15324 <RADIO_DIO0+0x2c>
   15352:	46c0      	nop			; (mov r8, r8)
   15354:	000152a1 	.word	0x000152a1
   15358:	000152c5 	.word	0x000152c5
   1535c:	00015a7d 	.word	0x00015a7d
   15360:	00015981 	.word	0x00015981
   15364:	000159fd 	.word	0x000159fd
   15368:	00015af9 	.word	0x00015af9
   1536c:	000152d5 	.word	0x000152d5

00015370 <RADIO_DIO1>:
   15370:	b573      	push	{r0, r1, r4, r5, r6, lr}
   15372:	466b      	mov	r3, sp
   15374:	1ddc      	adds	r4, r3, #7
   15376:	1d9d      	adds	r5, r3, #6
   15378:	2230      	movs	r2, #48	; 0x30
   1537a:	2304      	movs	r3, #4
   1537c:	0021      	movs	r1, r4
   1537e:	0028      	movs	r0, r5
   15380:	4e11      	ldr	r6, [pc, #68]	; (153c8 <RADIO_DIO1+0x58>)
   15382:	47b0      	blx	r6
   15384:	7822      	ldrb	r2, [r4, #0]
   15386:	782b      	ldrb	r3, [r5, #0]
   15388:	b251      	sxtb	r1, r2
   1538a:	2900      	cmp	r1, #0
   1538c:	da0c      	bge.n	153a8 <RADIO_DIO1+0x38>
   1538e:	b2db      	uxtb	r3, r3
   15390:	2b00      	cmp	r3, #0
   15392:	d004      	beq.n	1539e <RADIO_DIO1+0x2e>
   15394:	2b01      	cmp	r3, #1
   15396:	d005      	beq.n	153a4 <RADIO_DIO1+0x34>
   15398:	4b0c      	ldr	r3, [pc, #48]	; (153cc <RADIO_DIO1+0x5c>)
   1539a:	4798      	blx	r3
   1539c:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
   1539e:	4b0c      	ldr	r3, [pc, #48]	; (153d0 <RADIO_DIO1+0x60>)
   153a0:	4798      	blx	r3
   153a2:	e7fb      	b.n	1539c <RADIO_DIO1+0x2c>
   153a4:	4b0b      	ldr	r3, [pc, #44]	; (153d4 <RADIO_DIO1+0x64>)
   153a6:	e7fb      	b.n	153a0 <RADIO_DIO1+0x30>
   153a8:	2107      	movs	r1, #7
   153aa:	b2db      	uxtb	r3, r3
   153ac:	400a      	ands	r2, r1
   153ae:	7022      	strb	r2, [r4, #0]
   153b0:	2b00      	cmp	r3, #0
   153b2:	d005      	beq.n	153c0 <RADIO_DIO1+0x50>
   153b4:	2b01      	cmp	r3, #1
   153b6:	d1f1      	bne.n	1539c <RADIO_DIO1+0x2c>
   153b8:	2a03      	cmp	r2, #3
   153ba:	d1ef      	bne.n	1539c <RADIO_DIO1+0x2c>
   153bc:	4b06      	ldr	r3, [pc, #24]	; (153d8 <RADIO_DIO1+0x68>)
   153be:	e7ef      	b.n	153a0 <RADIO_DIO1+0x30>
   153c0:	4b06      	ldr	r3, [pc, #24]	; (153dc <RADIO_DIO1+0x6c>)
   153c2:	2a05      	cmp	r2, #5
   153c4:	d1ea      	bne.n	1539c <RADIO_DIO1+0x2c>
   153c6:	e7eb      	b.n	153a0 <RADIO_DIO1+0x30>
   153c8:	000152a1 	.word	0x000152a1
   153cc:	000152c5 	.word	0x000152c5
   153d0:	00015905 	.word	0x00015905
   153d4:	0000f5bd 	.word	0x0000f5bd
   153d8:	0001572d 	.word	0x0001572d
   153dc:	00015691 	.word	0x00015691

000153e0 <RADIO_DIO2>:
   153e0:	b573      	push	{r0, r1, r4, r5, r6, lr}
   153e2:	466b      	mov	r3, sp
   153e4:	1ddc      	adds	r4, r3, #7
   153e6:	1d9d      	adds	r5, r3, #6
   153e8:	220c      	movs	r2, #12
   153ea:	2302      	movs	r3, #2
   153ec:	0021      	movs	r1, r4
   153ee:	0028      	movs	r0, r5
   153f0:	4e0b      	ldr	r6, [pc, #44]	; (15420 <RADIO_DIO2+0x40>)
   153f2:	47b0      	blx	r6
   153f4:	7823      	ldrb	r3, [r4, #0]
   153f6:	782a      	ldrb	r2, [r5, #0]
   153f8:	b259      	sxtb	r1, r3
   153fa:	2900      	cmp	r1, #0
   153fc:	da05      	bge.n	1540a <RADIO_DIO2+0x2a>
   153fe:	4b09      	ldr	r3, [pc, #36]	; (15424 <RADIO_DIO2+0x44>)
   15400:	2a02      	cmp	r2, #2
   15402:	d90a      	bls.n	1541a <RADIO_DIO2+0x3a>
   15404:	4b08      	ldr	r3, [pc, #32]	; (15428 <RADIO_DIO2+0x48>)
   15406:	4798      	blx	r3
   15408:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
   1540a:	2107      	movs	r1, #7
   1540c:	400b      	ands	r3, r1
   1540e:	7023      	strb	r3, [r4, #0]
   15410:	2a03      	cmp	r2, #3
   15412:	d1f9      	bne.n	15408 <RADIO_DIO2+0x28>
   15414:	2b05      	cmp	r3, #5
   15416:	d1f7      	bne.n	15408 <RADIO_DIO2+0x28>
   15418:	4b04      	ldr	r3, [pc, #16]	; (1542c <RADIO_DIO2+0x4c>)
   1541a:	4798      	blx	r3
   1541c:	e7f4      	b.n	15408 <RADIO_DIO2+0x28>
   1541e:	46c0      	nop			; (mov r8, r8)
   15420:	000152a1 	.word	0x000152a1
   15424:	0000f5bd 	.word	0x0000f5bd
   15428:	000152c5 	.word	0x000152c5
   1542c:	00015661 	.word	0x00015661

00015430 <RADIO_DIO3>:
   15430:	b537      	push	{r0, r1, r2, r4, r5, lr}
   15432:	466b      	mov	r3, sp
   15434:	4668      	mov	r0, sp
   15436:	1ddc      	adds	r4, r3, #7
   15438:	2203      	movs	r2, #3
   1543a:	2300      	movs	r3, #0
   1543c:	0021      	movs	r1, r4
   1543e:	3006      	adds	r0, #6
   15440:	4d03      	ldr	r5, [pc, #12]	; (15450 <RADIO_DIO3+0x20>)
   15442:	47a8      	blx	r5
   15444:	7823      	ldrb	r3, [r4, #0]
   15446:	2b7f      	cmp	r3, #127	; 0x7f
   15448:	d901      	bls.n	1544e <RADIO_DIO3+0x1e>
   1544a:	4b02      	ldr	r3, [pc, #8]	; (15454 <RADIO_DIO3+0x24>)
   1544c:	4798      	blx	r3
   1544e:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
   15450:	000152a1 	.word	0x000152a1
   15454:	000152c5 	.word	0x000152c5

00015458 <RADIO_DIO4>:
   15458:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1545a:	466b      	mov	r3, sp
   1545c:	4668      	mov	r0, sp
   1545e:	1ddc      	adds	r4, r3, #7
   15460:	2306      	movs	r3, #6
   15462:	22c0      	movs	r2, #192	; 0xc0
   15464:	18c0      	adds	r0, r0, r3
   15466:	0021      	movs	r1, r4
   15468:	4d03      	ldr	r5, [pc, #12]	; (15478 <RADIO_DIO4+0x20>)
   1546a:	47a8      	blx	r5
   1546c:	7823      	ldrb	r3, [r4, #0]
   1546e:	2b7f      	cmp	r3, #127	; 0x7f
   15470:	d901      	bls.n	15476 <RADIO_DIO4+0x1e>
   15472:	4b02      	ldr	r3, [pc, #8]	; (1547c <RADIO_DIO4+0x24>)
   15474:	4798      	blx	r3
   15476:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
   15478:	000152a1 	.word	0x000152a1
   1547c:	000152c5 	.word	0x000152c5

00015480 <RADIO_DIO5>:
   15480:	b537      	push	{r0, r1, r2, r4, r5, lr}
   15482:	466b      	mov	r3, sp
   15484:	4668      	mov	r0, sp
   15486:	1ddc      	adds	r4, r3, #7
   15488:	2230      	movs	r2, #48	; 0x30
   1548a:	2304      	movs	r3, #4
   1548c:	0021      	movs	r1, r4
   1548e:	3006      	adds	r0, #6
   15490:	4d03      	ldr	r5, [pc, #12]	; (154a0 <RADIO_DIO5+0x20>)
   15492:	47a8      	blx	r5
   15494:	7823      	ldrb	r3, [r4, #0]
   15496:	2b7f      	cmp	r3, #127	; 0x7f
   15498:	d901      	bls.n	1549e <RADIO_DIO5+0x1e>
   1549a:	4b02      	ldr	r3, [pc, #8]	; (154a4 <RADIO_DIO5+0x24>)
   1549c:	4798      	blx	r3
   1549e:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
   154a0:	000152a1 	.word	0x000152a1
   154a4:	000152c5 	.word	0x000152c5

000154a8 <radioPostTask>:
   154a8:	b510      	push	{r4, lr}
   154aa:	0004      	movs	r4, r0
   154ac:	4b05      	ldr	r3, [pc, #20]	; (154c4 <radioPostTask+0x1c>)
   154ae:	4798      	blx	r3
   154b0:	4b05      	ldr	r3, [pc, #20]	; (154c8 <radioPostTask+0x20>)
   154b2:	8818      	ldrh	r0, [r3, #0]
   154b4:	4320      	orrs	r0, r4
   154b6:	8018      	strh	r0, [r3, #0]
   154b8:	4b04      	ldr	r3, [pc, #16]	; (154cc <radioPostTask+0x24>)
   154ba:	4798      	blx	r3
   154bc:	2002      	movs	r0, #2
   154be:	4b04      	ldr	r3, [pc, #16]	; (154d0 <radioPostTask+0x28>)
   154c0:	4798      	blx	r3
   154c2:	bd10      	pop	{r4, pc}
   154c4:	000083b5 	.word	0x000083b5
   154c8:	20001122 	.word	0x20001122
   154cc:	000083c1 	.word	0x000083c1
   154d0:	0000f4a1 	.word	0x0000f4a1

000154d4 <radioClearTask>:
   154d4:	b510      	push	{r4, lr}
   154d6:	0004      	movs	r4, r0
   154d8:	4b04      	ldr	r3, [pc, #16]	; (154ec <radioClearTask+0x18>)
   154da:	4798      	blx	r3
   154dc:	4a04      	ldr	r2, [pc, #16]	; (154f0 <radioClearTask+0x1c>)
   154de:	8813      	ldrh	r3, [r2, #0]
   154e0:	43a3      	bics	r3, r4
   154e2:	8013      	strh	r3, [r2, #0]
   154e4:	4b03      	ldr	r3, [pc, #12]	; (154f4 <radioClearTask+0x20>)
   154e6:	4798      	blx	r3
   154e8:	bd10      	pop	{r4, pc}
   154ea:	46c0      	nop			; (mov r8, r8)
   154ec:	000083b5 	.word	0x000083b5
   154f0:	20001122 	.word	0x20001122
   154f4:	000083c1 	.word	0x000083c1

000154f8 <RADIO_TaskHandler>:
   154f8:	b570      	push	{r4, r5, r6, lr}
   154fa:	2400      	movs	r4, #0
   154fc:	4d10      	ldr	r5, [pc, #64]	; (15540 <RADIO_TaskHandler+0x48>)
   154fe:	2601      	movs	r6, #1
   15500:	882b      	ldrh	r3, [r5, #0]
   15502:	42a3      	cmp	r3, r4
   15504:	d015      	beq.n	15532 <RADIO_TaskHandler+0x3a>
   15506:	882b      	ldrh	r3, [r5, #0]
   15508:	4123      	asrs	r3, r4
   1550a:	4233      	tst	r3, r6
   1550c:	d013      	beq.n	15536 <RADIO_TaskHandler+0x3e>
   1550e:	40a6      	lsls	r6, r4
   15510:	4b0c      	ldr	r3, [pc, #48]	; (15544 <RADIO_TaskHandler+0x4c>)
   15512:	4798      	blx	r3
   15514:	882b      	ldrh	r3, [r5, #0]
   15516:	00a4      	lsls	r4, r4, #2
   15518:	43b3      	bics	r3, r6
   1551a:	802b      	strh	r3, [r5, #0]
   1551c:	4b0a      	ldr	r3, [pc, #40]	; (15548 <RADIO_TaskHandler+0x50>)
   1551e:	4798      	blx	r3
   15520:	4b0a      	ldr	r3, [pc, #40]	; (1554c <RADIO_TaskHandler+0x54>)
   15522:	58e3      	ldr	r3, [r4, r3]
   15524:	4798      	blx	r3
   15526:	882b      	ldrh	r3, [r5, #0]
   15528:	2b00      	cmp	r3, #0
   1552a:	d002      	beq.n	15532 <RADIO_TaskHandler+0x3a>
   1552c:	2002      	movs	r0, #2
   1552e:	4b08      	ldr	r3, [pc, #32]	; (15550 <RADIO_TaskHandler+0x58>)
   15530:	4798      	blx	r3
   15532:	2000      	movs	r0, #0
   15534:	bd70      	pop	{r4, r5, r6, pc}
   15536:	3401      	adds	r4, #1
   15538:	2c05      	cmp	r4, #5
   1553a:	d1e4      	bne.n	15506 <RADIO_TaskHandler+0xe>
   1553c:	e7f9      	b.n	15532 <RADIO_TaskHandler+0x3a>
   1553e:	46c0      	nop			; (mov r8, r8)
   15540:	20001122 	.word	0x20001122
   15544:	000083b5 	.word	0x000083b5
   15548:	000083c1 	.word	0x000083c1
   1554c:	00020408 	.word	0x00020408
   15550:	0000f4a1 	.word	0x0000f4a1

00015554 <RadioSetState>:
   15554:	4b01      	ldr	r3, [pc, #4]	; (1555c <RadioSetState+0x8>)
   15556:	7018      	strb	r0, [r3, #0]
   15558:	4770      	bx	lr
   1555a:	46c0      	nop			; (mov r8, r8)
   1555c:	20002fbf 	.word	0x20002fbf

00015560 <RADIO_GetState>:
   15560:	4b01      	ldr	r3, [pc, #4]	; (15568 <RADIO_GetState+0x8>)
   15562:	7818      	ldrb	r0, [r3, #0]
   15564:	b2c0      	uxtb	r0, r0
   15566:	4770      	bx	lr
   15568:	20002fbf 	.word	0x20002fbf

0001556c <RADIO_SetCallbackBitmask>:
   1556c:	4a02      	ldr	r2, [pc, #8]	; (15578 <RADIO_SetCallbackBitmask+0xc>)
   1556e:	7813      	ldrb	r3, [r2, #0]
   15570:	4318      	orrs	r0, r3
   15572:	7010      	strb	r0, [r2, #0]
   15574:	4770      	bx	lr
   15576:	46c0      	nop			; (mov r8, r8)
   15578:	20002fbe 	.word	0x20002fbe

0001557c <RADIO_Transmit>:
   1557c:	b570      	push	{r4, r5, r6, lr}
   1557e:	4d10      	ldr	r5, [pc, #64]	; (155c0 <RADIO_Transmit+0x44>)
   15580:	0006      	movs	r6, r0
   15582:	782b      	ldrb	r3, [r5, #0]
   15584:	2004      	movs	r0, #4
   15586:	2b01      	cmp	r3, #1
   15588:	d118      	bne.n	155bc <RADIO_Transmit+0x40>
   1558a:	4c0e      	ldr	r4, [pc, #56]	; (155c4 <RADIO_Transmit+0x48>)
   1558c:	0023      	movs	r3, r4
   1558e:	332f      	adds	r3, #47	; 0x2f
   15590:	7818      	ldrb	r0, [r3, #0]
   15592:	4b0d      	ldr	r3, [pc, #52]	; (155c8 <RADIO_Transmit+0x4c>)
   15594:	4798      	blx	r3
   15596:	4b0d      	ldr	r3, [pc, #52]	; (155cc <RADIO_Transmit+0x50>)
   15598:	7832      	ldrb	r2, [r6, #0]
   1559a:	6871      	ldr	r1, [r6, #4]
   1559c:	701a      	strb	r2, [r3, #0]
   1559e:	4b0c      	ldr	r3, [pc, #48]	; (155d0 <RADIO_Transmit+0x54>)
   155a0:	3434      	adds	r4, #52	; 0x34
   155a2:	6019      	str	r1, [r3, #0]
   155a4:	7821      	ldrb	r1, [r4, #0]
   155a6:	2302      	movs	r3, #2
   155a8:	2900      	cmp	r1, #0
   155aa:	d102      	bne.n	155b2 <RADIO_Transmit+0x36>
   155ac:	0018      	movs	r0, r3
   155ae:	2a3f      	cmp	r2, #63	; 0x3f
   155b0:	d804      	bhi.n	155bc <RADIO_Transmit+0x40>
   155b2:	702b      	strb	r3, [r5, #0]
   155b4:	2004      	movs	r0, #4
   155b6:	4b07      	ldr	r3, [pc, #28]	; (155d4 <RADIO_Transmit+0x58>)
   155b8:	4798      	blx	r3
   155ba:	2000      	movs	r0, #0
   155bc:	bd70      	pop	{r4, r5, r6, pc}
   155be:	46c0      	nop			; (mov r8, r8)
   155c0:	20002fbf 	.word	0x20002fbf
   155c4:	20002980 	.word	0x20002980
   155c8:	0000f125 	.word	0x0000f125
   155cc:	20001134 	.word	0x20001134
   155d0:	20001130 	.word	0x20001130
   155d4:	000154a9 	.word	0x000154a9

000155d8 <Radio_FSKTxPayloadHandler>:
   155d8:	b570      	push	{r4, r5, r6, lr}
   155da:	4b1c      	ldr	r3, [pc, #112]	; (1564c <Radio_FSKTxPayloadHandler+0x74>)
   155dc:	000d      	movs	r5, r1
   155de:	4798      	blx	r3
   155e0:	4c1b      	ldr	r4, [pc, #108]	; (15650 <Radio_FSKTxPayloadHandler+0x78>)
   155e2:	3458      	adds	r4, #88	; 0x58
   155e4:	7820      	ldrb	r0, [r4, #0]
   155e6:	b2c0      	uxtb	r0, r0
   155e8:	2800      	cmp	r0, #0
   155ea:	d112      	bne.n	15612 <Radio_FSKTxPayloadHandler+0x3a>
   155ec:	2d00      	cmp	r5, #0
   155ee:	d007      	beq.n	15600 <Radio_FSKTxPayloadHandler+0x28>
   155f0:	4918      	ldr	r1, [pc, #96]	; (15654 <Radio_FSKTxPayloadHandler+0x7c>)
   155f2:	4b19      	ldr	r3, [pc, #100]	; (15658 <Radio_FSKTxPayloadHandler+0x80>)
   155f4:	2d3e      	cmp	r5, #62	; 0x3e
   155f6:	d806      	bhi.n	15606 <Radio_FSKTxPayloadHandler+0x2e>
   155f8:	002a      	movs	r2, r5
   155fa:	6809      	ldr	r1, [r1, #0]
   155fc:	4798      	blx	r3
   155fe:	7025      	strb	r5, [r4, #0]
   15600:	4b16      	ldr	r3, [pc, #88]	; (1565c <Radio_FSKTxPayloadHandler+0x84>)
   15602:	4798      	blx	r3
   15604:	bd70      	pop	{r4, r5, r6, pc}
   15606:	223f      	movs	r2, #63	; 0x3f
   15608:	6809      	ldr	r1, [r1, #0]
   1560a:	4798      	blx	r3
   1560c:	233f      	movs	r3, #63	; 0x3f
   1560e:	7023      	strb	r3, [r4, #0]
   15610:	e7f6      	b.n	15600 <Radio_FSKTxPayloadHandler+0x28>
   15612:	7823      	ldrb	r3, [r4, #0]
   15614:	429d      	cmp	r5, r3
   15616:	d0f3      	beq.n	15600 <Radio_FSKTxPayloadHandler+0x28>
   15618:	7822      	ldrb	r2, [r4, #0]
   1561a:	480e      	ldr	r0, [pc, #56]	; (15654 <Radio_FSKTxPayloadHandler+0x7c>)
   1561c:	1aaa      	subs	r2, r5, r2
   1561e:	b2d2      	uxtb	r2, r2
   15620:	4b0d      	ldr	r3, [pc, #52]	; (15658 <Radio_FSKTxPayloadHandler+0x80>)
   15622:	2a3f      	cmp	r2, #63	; 0x3f
   15624:	d807      	bhi.n	15636 <Radio_FSKTxPayloadHandler+0x5e>
   15626:	7826      	ldrb	r6, [r4, #0]
   15628:	7822      	ldrb	r2, [r4, #0]
   1562a:	6801      	ldr	r1, [r0, #0]
   1562c:	1aaa      	subs	r2, r5, r2
   1562e:	b2d2      	uxtb	r2, r2
   15630:	1989      	adds	r1, r1, r6
   15632:	2000      	movs	r0, #0
   15634:	e7e2      	b.n	155fc <Radio_FSKTxPayloadHandler+0x24>
   15636:	7822      	ldrb	r2, [r4, #0]
   15638:	6801      	ldr	r1, [r0, #0]
   1563a:	2000      	movs	r0, #0
   1563c:	1889      	adds	r1, r1, r2
   1563e:	223f      	movs	r2, #63	; 0x3f
   15640:	4798      	blx	r3
   15642:	7823      	ldrb	r3, [r4, #0]
   15644:	333f      	adds	r3, #63	; 0x3f
   15646:	b2db      	uxtb	r3, r3
   15648:	e7e1      	b.n	1560e <Radio_FSKTxPayloadHandler+0x36>
   1564a:	46c0      	nop			; (mov r8, r8)
   1564c:	000045e9 	.word	0x000045e9
   15650:	20002980 	.word	0x20002980
   15654:	20001130 	.word	0x20001130
   15658:	00008159 	.word	0x00008159
   1565c:	00004629 	.word	0x00004629

00015660 <RADIO_FSKSyncAddr>:
   15660:	4b08      	ldr	r3, [pc, #32]	; (15684 <RADIO_FSKSyncAddr+0x24>)
   15662:	b510      	push	{r4, lr}
   15664:	4798      	blx	r3
   15666:	4b08      	ldr	r3, [pc, #32]	; (15688 <RADIO_FSKSyncAddr+0x28>)
   15668:	001a      	movs	r2, r3
   1566a:	3234      	adds	r2, #52	; 0x34
   1566c:	7812      	ldrb	r2, [r2, #0]
   1566e:	2a00      	cmp	r2, #0
   15670:	d104      	bne.n	1567c <RADIO_FSKSyncAddr+0x1c>
   15672:	0019      	movs	r1, r3
   15674:	3358      	adds	r3, #88	; 0x58
   15676:	312c      	adds	r1, #44	; 0x2c
   15678:	700a      	strb	r2, [r1, #0]
   1567a:	701a      	strb	r2, [r3, #0]
   1567c:	4b03      	ldr	r3, [pc, #12]	; (1568c <RADIO_FSKSyncAddr+0x2c>)
   1567e:	4798      	blx	r3
   15680:	bd10      	pop	{r4, pc}
   15682:	46c0      	nop			; (mov r8, r8)
   15684:	000045e9 	.word	0x000045e9
   15688:	20002980 	.word	0x20002980
   1568c:	00004629 	.word	0x00004629

00015690 <RADIO_FSKFifoLevel>:
   15690:	b570      	push	{r4, r5, r6, lr}
   15692:	4b22      	ldr	r3, [pc, #136]	; (1571c <RADIO_FSKFifoLevel+0x8c>)
   15694:	4798      	blx	r3
   15696:	4d22      	ldr	r5, [pc, #136]	; (15720 <RADIO_FSKFifoLevel+0x90>)
   15698:	002a      	movs	r2, r5
   1569a:	002b      	movs	r3, r5
   1569c:	322c      	adds	r2, #44	; 0x2c
   1569e:	3358      	adds	r3, #88	; 0x58
   156a0:	7810      	ldrb	r0, [r2, #0]
   156a2:	7819      	ldrb	r1, [r3, #0]
   156a4:	4288      	cmp	r0, r1
   156a6:	d105      	bne.n	156b4 <RADIO_FSKFifoLevel+0x24>
   156a8:	7812      	ldrb	r2, [r2, #0]
   156aa:	2a00      	cmp	r2, #0
   156ac:	d002      	beq.n	156b4 <RADIO_FSKFifoLevel+0x24>
   156ae:	781b      	ldrb	r3, [r3, #0]
   156b0:	2b00      	cmp	r3, #0
   156b2:	d11f      	bne.n	156f4 <RADIO_FSKFifoLevel+0x64>
   156b4:	0029      	movs	r1, r5
   156b6:	312c      	adds	r1, #44	; 0x2c
   156b8:	7808      	ldrb	r0, [r1, #0]
   156ba:	b2c0      	uxtb	r0, r0
   156bc:	2800      	cmp	r0, #0
   156be:	d102      	bne.n	156c6 <RADIO_FSKFifoLevel+0x36>
   156c0:	2201      	movs	r2, #1
   156c2:	4b18      	ldr	r3, [pc, #96]	; (15724 <RADIO_FSKFifoLevel+0x94>)
   156c4:	4798      	blx	r3
   156c6:	002e      	movs	r6, r5
   156c8:	002c      	movs	r4, r5
   156ca:	362c      	adds	r6, #44	; 0x2c
   156cc:	3458      	adds	r4, #88	; 0x58
   156ce:	7833      	ldrb	r3, [r6, #0]
   156d0:	7822      	ldrb	r2, [r4, #0]
   156d2:	1a9b      	subs	r3, r3, r2
   156d4:	b2db      	uxtb	r3, r3
   156d6:	2b3e      	cmp	r3, #62	; 0x3e
   156d8:	d80f      	bhi.n	156fa <RADIO_FSKFifoLevel+0x6a>
   156da:	7823      	ldrb	r3, [r4, #0]
   156dc:	7832      	ldrb	r2, [r6, #0]
   156de:	7821      	ldrb	r1, [r4, #0]
   156e0:	2000      	movs	r0, #0
   156e2:	1a52      	subs	r2, r2, r1
   156e4:	6aa9      	ldr	r1, [r5, #40]	; 0x28
   156e6:	b2d2      	uxtb	r2, r2
   156e8:	18c9      	adds	r1, r1, r3
   156ea:	4b0e      	ldr	r3, [pc, #56]	; (15724 <RADIO_FSKFifoLevel+0x94>)
   156ec:	4798      	blx	r3
   156ee:	7833      	ldrb	r3, [r6, #0]
   156f0:	b2db      	uxtb	r3, r3
   156f2:	7023      	strb	r3, [r4, #0]
   156f4:	4b0c      	ldr	r3, [pc, #48]	; (15728 <RADIO_FSKFifoLevel+0x98>)
   156f6:	4798      	blx	r3
   156f8:	bd70      	pop	{r4, r5, r6, pc}
   156fa:	7833      	ldrb	r3, [r6, #0]
   156fc:	7822      	ldrb	r2, [r4, #0]
   156fe:	1a9b      	subs	r3, r3, r2
   15700:	b2db      	uxtb	r3, r3
   15702:	2b3f      	cmp	r3, #63	; 0x3f
   15704:	d9f6      	bls.n	156f4 <RADIO_FSKFifoLevel+0x64>
   15706:	7823      	ldrb	r3, [r4, #0]
   15708:	6aa9      	ldr	r1, [r5, #40]	; 0x28
   1570a:	223f      	movs	r2, #63	; 0x3f
   1570c:	18c9      	adds	r1, r1, r3
   1570e:	2000      	movs	r0, #0
   15710:	4b04      	ldr	r3, [pc, #16]	; (15724 <RADIO_FSKFifoLevel+0x94>)
   15712:	4798      	blx	r3
   15714:	7823      	ldrb	r3, [r4, #0]
   15716:	333f      	adds	r3, #63	; 0x3f
   15718:	e7ea      	b.n	156f0 <RADIO_FSKFifoLevel+0x60>
   1571a:	46c0      	nop			; (mov r8, r8)
   1571c:	000045e9 	.word	0x000045e9
   15720:	20002980 	.word	0x20002980
   15724:	00008199 	.word	0x00008199
   15728:	00004629 	.word	0x00004629

0001572c <RADIO_FSKFifoEmpty>:
   1572c:	b510      	push	{r4, lr}
   1572e:	4b03      	ldr	r3, [pc, #12]	; (1573c <RADIO_FSKFifoEmpty+0x10>)
   15730:	7819      	ldrb	r1, [r3, #0]
   15732:	4b03      	ldr	r3, [pc, #12]	; (15740 <RADIO_FSKFifoEmpty+0x14>)
   15734:	6818      	ldr	r0, [r3, #0]
   15736:	4b03      	ldr	r3, [pc, #12]	; (15744 <RADIO_FSKFifoEmpty+0x18>)
   15738:	4798      	blx	r3
   1573a:	bd10      	pop	{r4, pc}
   1573c:	20001134 	.word	0x20001134
   15740:	20001130 	.word	0x20001130
   15744:	000155d9 	.word	0x000155d9

00015748 <RADIO_GetData>:
   15748:	4b03      	ldr	r3, [pc, #12]	; (15758 <RADIO_GetData+0x10>)
   1574a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   1574c:	332c      	adds	r3, #44	; 0x2c
   1574e:	6002      	str	r2, [r0, #0]
   15750:	781b      	ldrb	r3, [r3, #0]
   15752:	2000      	movs	r0, #0
   15754:	800b      	strh	r3, [r1, #0]
   15756:	4770      	bx	lr
   15758:	20002980 	.word	0x20002980

0001575c <Radio_EnableRfControl>:
   1575c:	b510      	push	{r4, lr}
   1575e:	4b08      	ldr	r3, [pc, #32]	; (15780 <Radio_EnableRfControl+0x24>)
   15760:	0001      	movs	r1, r0
   15762:	681a      	ldr	r2, [r3, #0]
   15764:	4807      	ldr	r0, [pc, #28]	; (15784 <Radio_EnableRfControl+0x28>)
   15766:	4c08      	ldr	r4, [pc, #32]	; (15788 <Radio_EnableRfControl+0x2c>)
   15768:	1812      	adds	r2, r2, r0
   1576a:	2000      	movs	r0, #0
   1576c:	42a2      	cmp	r2, r4
   1576e:	d804      	bhi.n	1577a <Radio_EnableRfControl+0x1e>
   15770:	3305      	adds	r3, #5
   15772:	7fdb      	ldrb	r3, [r3, #31]
   15774:	1e58      	subs	r0, r3, #1
   15776:	4183      	sbcs	r3, r0
   15778:	1c58      	adds	r0, r3, #1
   1577a:	4b04      	ldr	r3, [pc, #16]	; (1578c <Radio_EnableRfControl+0x30>)
   1577c:	4798      	blx	r3
   1577e:	bd10      	pop	{r4, pc}
   15780:	20002980 	.word	0x20002980
   15784:	cc9eec80 	.word	0xcc9eec80
   15788:	096ae380 	.word	0x096ae380
   1578c:	00008205 	.word	0x00008205

00015790 <RADIO_RxHandler>:
   15790:	b573      	push	{r0, r1, r4, r5, r6, lr}
   15792:	4b33      	ldr	r3, [pc, #204]	; (15860 <RADIO_RxHandler+0xd0>)
   15794:	2000      	movs	r0, #0
   15796:	4798      	blx	r3
   15798:	4e32      	ldr	r6, [pc, #200]	; (15864 <RADIO_RxHandler+0xd4>)
   1579a:	4b33      	ldr	r3, [pc, #204]	; (15868 <RADIO_RxHandler+0xd8>)
   1579c:	8830      	ldrh	r0, [r6, #0]
   1579e:	2800      	cmp	r0, #0
   157a0:	d100      	bne.n	157a4 <RADIO_RxHandler+0x14>
   157a2:	3004      	adds	r0, #4
   157a4:	4798      	blx	r3
   157a6:	4c31      	ldr	r4, [pc, #196]	; (1586c <RADIO_RxHandler+0xdc>)
   157a8:	4d31      	ldr	r5, [pc, #196]	; (15870 <RADIO_RxHandler+0xe0>)
   157aa:	0023      	movs	r3, r4
   157ac:	3334      	adds	r3, #52	; 0x34
   157ae:	7819      	ldrb	r1, [r3, #0]
   157b0:	2901      	cmp	r1, #1
   157b2:	d122      	bne.n	157fa <RADIO_RxHandler+0x6a>
   157b4:	2022      	movs	r0, #34	; 0x22
   157b6:	47a8      	blx	r5
   157b8:	2100      	movs	r1, #0
   157ba:	2040      	movs	r0, #64	; 0x40
   157bc:	47a8      	blx	r5
   157be:	2100      	movs	r1, #0
   157c0:	2041      	movs	r0, #65	; 0x41
   157c2:	47a8      	blx	r5
   157c4:	8832      	ldrh	r2, [r6, #0]
   157c6:	4b2b      	ldr	r3, [pc, #172]	; (15874 <RADIO_RxHandler+0xe4>)
   157c8:	2a00      	cmp	r2, #0
   157ca:	d131      	bne.n	15830 <RADIO_RxHandler+0xa0>
   157cc:	0021      	movs	r1, r4
   157ce:	2005      	movs	r0, #5
   157d0:	3134      	adds	r1, #52	; 0x34
   157d2:	7809      	ldrb	r1, [r1, #0]
   157d4:	4798      	blx	r3
   157d6:	68e3      	ldr	r3, [r4, #12]
   157d8:	2b00      	cmp	r3, #0
   157da:	d00c      	beq.n	157f6 <RADIO_RxHandler+0x66>
   157dc:	8832      	ldrh	r2, [r6, #0]
   157de:	2a00      	cmp	r2, #0
   157e0:	d009      	beq.n	157f6 <RADIO_RxHandler+0x66>
   157e2:	21fa      	movs	r1, #250	; 0xfa
   157e4:	2200      	movs	r2, #0
   157e6:	342f      	adds	r4, #47	; 0x2f
   157e8:	0089      	lsls	r1, r1, #2
   157ea:	7820      	ldrb	r0, [r4, #0]
   157ec:	4359      	muls	r1, r3
   157ee:	9200      	str	r2, [sp, #0]
   157f0:	4b21      	ldr	r3, [pc, #132]	; (15878 <RADIO_RxHandler+0xe8>)
   157f2:	4c22      	ldr	r4, [pc, #136]	; (1587c <RADIO_RxHandler+0xec>)
   157f4:	47a0      	blx	r4
   157f6:	2000      	movs	r0, #0
   157f8:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
   157fa:	0023      	movs	r3, r4
   157fc:	3338      	adds	r3, #56	; 0x38
   157fe:	7819      	ldrb	r1, [r3, #0]
   15800:	2012      	movs	r0, #18
   15802:	47a8      	blx	r5
   15804:	0023      	movs	r3, r4
   15806:	3339      	adds	r3, #57	; 0x39
   15808:	7819      	ldrb	r1, [r3, #0]
   1580a:	2013      	movs	r0, #19
   1580c:	47a8      	blx	r5
   1580e:	210c      	movs	r1, #12
   15810:	2040      	movs	r0, #64	; 0x40
   15812:	47a8      	blx	r5
   15814:	2100      	movs	r1, #0
   15816:	2041      	movs	r0, #65	; 0x41
   15818:	47a8      	blx	r5
   1581a:	0022      	movs	r2, r4
   1581c:	2300      	movs	r3, #0
   1581e:	3256      	adds	r2, #86	; 0x56
   15820:	8013      	strh	r3, [r2, #0]
   15822:	0022      	movs	r2, r4
   15824:	322c      	adds	r2, #44	; 0x2c
   15826:	7013      	strb	r3, [r2, #0]
   15828:	0022      	movs	r2, r4
   1582a:	3258      	adds	r2, #88	; 0x58
   1582c:	7013      	strb	r3, [r2, #0]
   1582e:	e7c9      	b.n	157c4 <RADIO_RxHandler+0x34>
   15830:	0022      	movs	r2, r4
   15832:	3234      	adds	r2, #52	; 0x34
   15834:	7811      	ldrb	r1, [r2, #0]
   15836:	2200      	movs	r2, #0
   15838:	2901      	cmp	r1, #1
   1583a:	d101      	bne.n	15840 <RADIO_RxHandler+0xb0>
   1583c:	2006      	movs	r0, #6
   1583e:	e7c9      	b.n	157d4 <RADIO_RxHandler+0x44>
   15840:	0011      	movs	r1, r2
   15842:	2005      	movs	r0, #5
   15844:	4798      	blx	r3
   15846:	21fa      	movs	r1, #250	; 0xfa
   15848:	8833      	ldrh	r3, [r6, #0]
   1584a:	0089      	lsls	r1, r1, #2
   1584c:	4359      	muls	r1, r3
   1584e:	0023      	movs	r3, r4
   15850:	2200      	movs	r2, #0
   15852:	332e      	adds	r3, #46	; 0x2e
   15854:	7818      	ldrb	r0, [r3, #0]
   15856:	4d09      	ldr	r5, [pc, #36]	; (1587c <RADIO_RxHandler+0xec>)
   15858:	9200      	str	r2, [sp, #0]
   1585a:	4b09      	ldr	r3, [pc, #36]	; (15880 <RADIO_RxHandler+0xf0>)
   1585c:	47a8      	blx	r5
   1585e:	e7ba      	b.n	157d6 <RADIO_RxHandler+0x46>
   15860:	0001575d 	.word	0x0001575d
   15864:	20001126 	.word	0x20001126
   15868:	00014ee9 	.word	0x00014ee9
   1586c:	20002980 	.word	0x20002980
   15870:	00008105 	.word	0x00008105
   15874:	0000f4d9 	.word	0x0000f4d9
   15878:	000158b9 	.word	0x000158b9
   1587c:	0000ee0d 	.word	0x0000ee0d
   15880:	00015949 	.word	0x00015949

00015884 <Radio_DisableRfControl>:
   15884:	b510      	push	{r4, lr}
   15886:	4b08      	ldr	r3, [pc, #32]	; (158a8 <Radio_DisableRfControl+0x24>)
   15888:	0001      	movs	r1, r0
   1588a:	681a      	ldr	r2, [r3, #0]
   1588c:	4807      	ldr	r0, [pc, #28]	; (158ac <Radio_DisableRfControl+0x28>)
   1588e:	4c08      	ldr	r4, [pc, #32]	; (158b0 <Radio_DisableRfControl+0x2c>)
   15890:	1812      	adds	r2, r2, r0
   15892:	2000      	movs	r0, #0
   15894:	42a2      	cmp	r2, r4
   15896:	d804      	bhi.n	158a2 <Radio_DisableRfControl+0x1e>
   15898:	3305      	adds	r3, #5
   1589a:	7fdb      	ldrb	r3, [r3, #31]
   1589c:	1e58      	subs	r0, r3, #1
   1589e:	4183      	sbcs	r3, r0
   158a0:	1c58      	adds	r0, r3, #1
   158a2:	4b04      	ldr	r3, [pc, #16]	; (158b4 <Radio_DisableRfControl+0x30>)
   158a4:	4798      	blx	r3
   158a6:	bd10      	pop	{r4, pc}
   158a8:	20002980 	.word	0x20002980
   158ac:	cc9eec80 	.word	0xcc9eec80
   158b0:	096ae380 	.word	0x096ae380
   158b4:	0000822d 	.word	0x0000822d

000158b8 <Radio_WatchdogTimeout>:
   158b8:	b510      	push	{r4, lr}
   158ba:	4b0e      	ldr	r3, [pc, #56]	; (158f4 <Radio_WatchdogTimeout+0x3c>)
   158bc:	781a      	ldrb	r2, [r3, #0]
   158be:	2a04      	cmp	r2, #4
   158c0:	d10b      	bne.n	158da <Radio_WatchdogTimeout+0x22>
   158c2:	2320      	movs	r3, #32
   158c4:	4a0c      	ldr	r2, [pc, #48]	; (158f8 <Radio_WatchdogTimeout+0x40>)
   158c6:	2000      	movs	r0, #0
   158c8:	8811      	ldrh	r1, [r2, #0]
   158ca:	430b      	orrs	r3, r1
   158cc:	8013      	strh	r3, [r2, #0]
   158ce:	4b0b      	ldr	r3, [pc, #44]	; (158fc <Radio_WatchdogTimeout+0x44>)
   158d0:	4798      	blx	r3
   158d2:	2002      	movs	r0, #2
   158d4:	4b0a      	ldr	r3, [pc, #40]	; (15900 <Radio_WatchdogTimeout+0x48>)
   158d6:	4798      	blx	r3
   158d8:	bd10      	pop	{r4, pc}
   158da:	781b      	ldrb	r3, [r3, #0]
   158dc:	2b02      	cmp	r3, #2
   158de:	d1fb      	bne.n	158d8 <Radio_WatchdogTimeout+0x20>
   158e0:	4a05      	ldr	r2, [pc, #20]	; (158f8 <Radio_WatchdogTimeout+0x40>)
   158e2:	330e      	adds	r3, #14
   158e4:	8811      	ldrh	r1, [r2, #0]
   158e6:	2001      	movs	r0, #1
   158e8:	430b      	orrs	r3, r1
   158ea:	8013      	strh	r3, [r2, #0]
   158ec:	4b03      	ldr	r3, [pc, #12]	; (158fc <Radio_WatchdogTimeout+0x44>)
   158ee:	4798      	blx	r3
   158f0:	2001      	movs	r0, #1
   158f2:	e7ef      	b.n	158d4 <Radio_WatchdogTimeout+0x1c>
   158f4:	20002fbf 	.word	0x20002fbf
   158f8:	20002fbc 	.word	0x20002fbc
   158fc:	00015885 	.word	0x00015885
   15900:	000154a9 	.word	0x000154a9

00015904 <RADIO_RxTimeout>:
   15904:	b510      	push	{r4, lr}
   15906:	4b0a      	ldr	r3, [pc, #40]	; (15930 <RADIO_RxTimeout+0x2c>)
   15908:	332f      	adds	r3, #47	; 0x2f
   1590a:	7818      	ldrb	r0, [r3, #0]
   1590c:	4b09      	ldr	r3, [pc, #36]	; (15934 <RADIO_RxTimeout+0x30>)
   1590e:	4798      	blx	r3
   15910:	2000      	movs	r0, #0
   15912:	4b09      	ldr	r3, [pc, #36]	; (15938 <RADIO_RxTimeout+0x34>)
   15914:	4798      	blx	r3
   15916:	2180      	movs	r1, #128	; 0x80
   15918:	2012      	movs	r0, #18
   1591a:	4b08      	ldr	r3, [pc, #32]	; (1593c <RADIO_RxTimeout+0x38>)
   1591c:	4798      	blx	r3
   1591e:	2340      	movs	r3, #64	; 0x40
   15920:	4a07      	ldr	r2, [pc, #28]	; (15940 <RADIO_RxTimeout+0x3c>)
   15922:	2002      	movs	r0, #2
   15924:	8811      	ldrh	r1, [r2, #0]
   15926:	430b      	orrs	r3, r1
   15928:	8013      	strh	r3, [r2, #0]
   1592a:	4b06      	ldr	r3, [pc, #24]	; (15944 <RADIO_RxTimeout+0x40>)
   1592c:	4798      	blx	r3
   1592e:	bd10      	pop	{r4, pc}
   15930:	20002980 	.word	0x20002980
   15934:	0000f125 	.word	0x0000f125
   15938:	00015885 	.word	0x00015885
   1593c:	00008105 	.word	0x00008105
   15940:	20002fbc 	.word	0x20002fbc
   15944:	000154a9 	.word	0x000154a9

00015948 <Radio_RxFSKTimeout>:
   15948:	b510      	push	{r4, lr}
   1594a:	4b08      	ldr	r3, [pc, #32]	; (1596c <Radio_RxFSKTimeout+0x24>)
   1594c:	332f      	adds	r3, #47	; 0x2f
   1594e:	7818      	ldrb	r0, [r3, #0]
   15950:	4b07      	ldr	r3, [pc, #28]	; (15970 <Radio_RxFSKTimeout+0x28>)
   15952:	4798      	blx	r3
   15954:	2000      	movs	r0, #0
   15956:	4b07      	ldr	r3, [pc, #28]	; (15974 <Radio_RxFSKTimeout+0x2c>)
   15958:	4798      	blx	r3
   1595a:	2380      	movs	r3, #128	; 0x80
   1595c:	4a06      	ldr	r2, [pc, #24]	; (15978 <Radio_RxFSKTimeout+0x30>)
   1595e:	2002      	movs	r0, #2
   15960:	8811      	ldrh	r1, [r2, #0]
   15962:	430b      	orrs	r3, r1
   15964:	8013      	strh	r3, [r2, #0]
   15966:	4b05      	ldr	r3, [pc, #20]	; (1597c <Radio_RxFSKTimeout+0x34>)
   15968:	4798      	blx	r3
   1596a:	bd10      	pop	{r4, pc}
   1596c:	20002980 	.word	0x20002980
   15970:	0000f125 	.word	0x0000f125
   15974:	00015885 	.word	0x00015885
   15978:	20002fbc 	.word	0x20002fbc
   1597c:	000154a9 	.word	0x000154a9

00015980 <RADIO_TxDone>:
   15980:	b570      	push	{r4, r5, r6, lr}
   15982:	4b14      	ldr	r3, [pc, #80]	; (159d4 <RADIO_TxDone+0x54>)
   15984:	332f      	adds	r3, #47	; 0x2f
   15986:	7818      	ldrb	r0, [r3, #0]
   15988:	4b13      	ldr	r3, [pc, #76]	; (159d8 <RADIO_TxDone+0x58>)
   1598a:	4798      	blx	r3
   1598c:	2001      	movs	r0, #1
   1598e:	4b13      	ldr	r3, [pc, #76]	; (159dc <RADIO_TxDone+0x5c>)
   15990:	4798      	blx	r3
   15992:	4b13      	ldr	r3, [pc, #76]	; (159e0 <RADIO_TxDone+0x60>)
   15994:	2108      	movs	r1, #8
   15996:	2012      	movs	r0, #18
   15998:	4798      	blx	r3
   1599a:	4b12      	ldr	r3, [pc, #72]	; (159e4 <RADIO_TxDone+0x64>)
   1599c:	781a      	ldrb	r2, [r3, #0]
   1599e:	4b12      	ldr	r3, [pc, #72]	; (159e8 <RADIO_TxDone+0x68>)
   159a0:	2a02      	cmp	r2, #2
   159a2:	d002      	beq.n	159aa <RADIO_TxDone+0x2a>
   159a4:	881a      	ldrh	r2, [r3, #0]
   159a6:	0692      	lsls	r2, r2, #26
   159a8:	d413      	bmi.n	159d2 <RADIO_TxDone+0x52>
   159aa:	2001      	movs	r0, #1
   159ac:	881a      	ldrh	r2, [r3, #0]
   159ae:	4302      	orrs	r2, r0
   159b0:	801a      	strh	r2, [r3, #0]
   159b2:	4b0e      	ldr	r3, [pc, #56]	; (159ec <RADIO_TxDone+0x6c>)
   159b4:	4798      	blx	r3
   159b6:	4b0e      	ldr	r3, [pc, #56]	; (159f0 <RADIO_TxDone+0x70>)
   159b8:	4798      	blx	r3
   159ba:	4c0e      	ldr	r4, [pc, #56]	; (159f4 <RADIO_TxDone+0x74>)
   159bc:	4d0e      	ldr	r5, [pc, #56]	; (159f8 <RADIO_TxDone+0x78>)
   159be:	6822      	ldr	r2, [r4, #0]
   159c0:	6863      	ldr	r3, [r4, #4]
   159c2:	1a80      	subs	r0, r0, r2
   159c4:	4199      	sbcs	r1, r3
   159c6:	22fa      	movs	r2, #250	; 0xfa
   159c8:	2300      	movs	r3, #0
   159ca:	0092      	lsls	r2, r2, #2
   159cc:	47a8      	blx	r5
   159ce:	6020      	str	r0, [r4, #0]
   159d0:	6061      	str	r1, [r4, #4]
   159d2:	bd70      	pop	{r4, r5, r6, pc}
   159d4:	20002980 	.word	0x20002980
   159d8:	0000f125 	.word	0x0000f125
   159dc:	00015885 	.word	0x00015885
   159e0:	00008105 	.word	0x00008105
   159e4:	20002fbf 	.word	0x20002fbf
   159e8:	20002fbc 	.word	0x20002fbc
   159ec:	000154a9 	.word	0x000154a9
   159f0:	0000edb5 	.word	0x0000edb5
   159f4:	20001128 	.word	0x20001128
   159f8:	00016a01 	.word	0x00016a01

000159fc <RADIO_FSKPacketSent>:
   159fc:	b570      	push	{r4, r5, r6, lr}
   159fe:	4b15      	ldr	r3, [pc, #84]	; (15a54 <RADIO_FSKPacketSent+0x58>)
   15a00:	203f      	movs	r0, #63	; 0x3f
   15a02:	4798      	blx	r3
   15a04:	0703      	lsls	r3, r0, #28
   15a06:	d524      	bpl.n	15a52 <RADIO_FSKPacketSent+0x56>
   15a08:	4b13      	ldr	r3, [pc, #76]	; (15a58 <RADIO_FSKPacketSent+0x5c>)
   15a0a:	332f      	adds	r3, #47	; 0x2f
   15a0c:	7818      	ldrb	r0, [r3, #0]
   15a0e:	4b13      	ldr	r3, [pc, #76]	; (15a5c <RADIO_FSKPacketSent+0x60>)
   15a10:	4798      	blx	r3
   15a12:	4b13      	ldr	r3, [pc, #76]	; (15a60 <RADIO_FSKPacketSent+0x64>)
   15a14:	2001      	movs	r0, #1
   15a16:	4798      	blx	r3
   15a18:	4b12      	ldr	r3, [pc, #72]	; (15a64 <RADIO_FSKPacketSent+0x68>)
   15a1a:	4c13      	ldr	r4, [pc, #76]	; (15a68 <RADIO_FSKPacketSent+0x6c>)
   15a1c:	781b      	ldrb	r3, [r3, #0]
   15a1e:	2b02      	cmp	r3, #2
   15a20:	d002      	beq.n	15a28 <RADIO_FSKPacketSent+0x2c>
   15a22:	8823      	ldrh	r3, [r4, #0]
   15a24:	069b      	lsls	r3, r3, #26
   15a26:	d414      	bmi.n	15a52 <RADIO_FSKPacketSent+0x56>
   15a28:	4b10      	ldr	r3, [pc, #64]	; (15a6c <RADIO_FSKPacketSent+0x70>)
   15a2a:	4798      	blx	r3
   15a2c:	4d10      	ldr	r5, [pc, #64]	; (15a70 <RADIO_FSKPacketSent+0x74>)
   15a2e:	4e11      	ldr	r6, [pc, #68]	; (15a74 <RADIO_FSKPacketSent+0x78>)
   15a30:	682a      	ldr	r2, [r5, #0]
   15a32:	686b      	ldr	r3, [r5, #4]
   15a34:	1a80      	subs	r0, r0, r2
   15a36:	4199      	sbcs	r1, r3
   15a38:	22fa      	movs	r2, #250	; 0xfa
   15a3a:	2300      	movs	r3, #0
   15a3c:	0092      	lsls	r2, r2, #2
   15a3e:	47b0      	blx	r6
   15a40:	4b0d      	ldr	r3, [pc, #52]	; (15a78 <RADIO_FSKPacketSent+0x7c>)
   15a42:	6028      	str	r0, [r5, #0]
   15a44:	6069      	str	r1, [r5, #4]
   15a46:	2001      	movs	r0, #1
   15a48:	4798      	blx	r3
   15a4a:	2304      	movs	r3, #4
   15a4c:	8822      	ldrh	r2, [r4, #0]
   15a4e:	4313      	orrs	r3, r2
   15a50:	8023      	strh	r3, [r4, #0]
   15a52:	bd70      	pop	{r4, r5, r6, pc}
   15a54:	0000812d 	.word	0x0000812d
   15a58:	20002980 	.word	0x20002980
   15a5c:	0000f125 	.word	0x0000f125
   15a60:	00015885 	.word	0x00015885
   15a64:	20002fbf 	.word	0x20002fbf
   15a68:	20002fbc 	.word	0x20002fbc
   15a6c:	0000edb5 	.word	0x0000edb5
   15a70:	20001128 	.word	0x20001128
   15a74:	00016a01 	.word	0x00016a01
   15a78:	000154a9 	.word	0x000154a9

00015a7c <RADIO_RxDone>:
   15a7c:	b570      	push	{r4, r5, r6, lr}
   15a7e:	2012      	movs	r0, #18
   15a80:	4e16      	ldr	r6, [pc, #88]	; (15adc <RADIO_RxDone+0x60>)
   15a82:	47b0      	blx	r6
   15a84:	4b16      	ldr	r3, [pc, #88]	; (15ae0 <RADIO_RxDone+0x64>)
   15a86:	0005      	movs	r5, r0
   15a88:	2170      	movs	r1, #112	; 0x70
   15a8a:	2012      	movs	r0, #18
   15a8c:	4798      	blx	r3
   15a8e:	2350      	movs	r3, #80	; 0x50
   15a90:	402b      	ands	r3, r5
   15a92:	2b50      	cmp	r3, #80	; 0x50
   15a94:	d119      	bne.n	15aca <RADIO_RxDone+0x4e>
   15a96:	4c13      	ldr	r4, [pc, #76]	; (15ae4 <RADIO_RxDone+0x68>)
   15a98:	0023      	movs	r3, r4
   15a9a:	332f      	adds	r3, #47	; 0x2f
   15a9c:	7818      	ldrb	r0, [r3, #0]
   15a9e:	4b12      	ldr	r3, [pc, #72]	; (15ae8 <RADIO_RxDone+0x6c>)
   15aa0:	4798      	blx	r3
   15aa2:	4b12      	ldr	r3, [pc, #72]	; (15aec <RADIO_RxDone+0x70>)
   15aa4:	2000      	movs	r0, #0
   15aa6:	4798      	blx	r3
   15aa8:	3404      	adds	r4, #4
   15aaa:	201c      	movs	r0, #28
   15aac:	47b0      	blx	r6
   15aae:	7fe2      	ldrb	r2, [r4, #31]
   15ab0:	4b0f      	ldr	r3, [pc, #60]	; (15af0 <RADIO_RxDone+0x74>)
   15ab2:	4910      	ldr	r1, [pc, #64]	; (15af4 <RADIO_RxDone+0x78>)
   15ab4:	2a00      	cmp	r2, #0
   15ab6:	d003      	beq.n	15ac0 <RADIO_RxDone+0x44>
   15ab8:	06aa      	lsls	r2, r5, #26
   15aba:	d407      	bmi.n	15acc <RADIO_RxDone+0x50>
   15abc:	0642      	lsls	r2, r0, #25
   15abe:	d505      	bpl.n	15acc <RADIO_RxDone+0x50>
   15ac0:	2002      	movs	r0, #2
   15ac2:	881a      	ldrh	r2, [r3, #0]
   15ac4:	4302      	orrs	r2, r0
   15ac6:	801a      	strh	r2, [r3, #0]
   15ac8:	4788      	blx	r1
   15aca:	bd70      	pop	{r4, r5, r6, pc}
   15acc:	2280      	movs	r2, #128	; 0x80
   15ace:	8818      	ldrh	r0, [r3, #0]
   15ad0:	0052      	lsls	r2, r2, #1
   15ad2:	4302      	orrs	r2, r0
   15ad4:	801a      	strh	r2, [r3, #0]
   15ad6:	2002      	movs	r0, #2
   15ad8:	e7f6      	b.n	15ac8 <RADIO_RxDone+0x4c>
   15ada:	46c0      	nop			; (mov r8, r8)
   15adc:	0000812d 	.word	0x0000812d
   15ae0:	00008105 	.word	0x00008105
   15ae4:	20002980 	.word	0x20002980
   15ae8:	0000f125 	.word	0x0000f125
   15aec:	00015885 	.word	0x00015885
   15af0:	20002fbc 	.word	0x20002fbc
   15af4:	000154a9 	.word	0x000154a9

00015af8 <RADIO_FSKPayloadReady>:
   15af8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   15afa:	203f      	movs	r0, #63	; 0x3f
   15afc:	4b39      	ldr	r3, [pc, #228]	; (15be4 <RADIO_FSKPayloadReady+0xec>)
   15afe:	4798      	blx	r3
   15b00:	0743      	lsls	r3, r0, #29
   15b02:	d559      	bpl.n	15bb8 <RADIO_FSKPayloadReady+0xc0>
   15b04:	4c38      	ldr	r4, [pc, #224]	; (15be8 <RADIO_FSKPayloadReady+0xf0>)
   15b06:	4d39      	ldr	r5, [pc, #228]	; (15bec <RADIO_FSKPayloadReady+0xf4>)
   15b08:	1d23      	adds	r3, r4, #4
   15b0a:	7fdb      	ldrb	r3, [r3, #31]
   15b0c:	2b01      	cmp	r3, #1
   15b0e:	d154      	bne.n	15bba <RADIO_FSKPayloadReady+0xc2>
   15b10:	2202      	movs	r2, #2
   15b12:	4210      	tst	r0, r2
   15b14:	d048      	beq.n	15ba8 <RADIO_FSKPayloadReady+0xb0>
   15b16:	0023      	movs	r3, r4
   15b18:	332f      	adds	r3, #47	; 0x2f
   15b1a:	7818      	ldrb	r0, [r3, #0]
   15b1c:	4e34      	ldr	r6, [pc, #208]	; (15bf0 <RADIO_FSKPayloadReady+0xf8>)
   15b1e:	47b0      	blx	r6
   15b20:	0023      	movs	r3, r4
   15b22:	332e      	adds	r3, #46	; 0x2e
   15b24:	7818      	ldrb	r0, [r3, #0]
   15b26:	47b0      	blx	r6
   15b28:	4b32      	ldr	r3, [pc, #200]	; (15bf4 <RADIO_FSKPayloadReady+0xfc>)
   15b2a:	4798      	blx	r3
   15b2c:	0022      	movs	r2, r4
   15b2e:	0023      	movs	r3, r4
   15b30:	322c      	adds	r2, #44	; 0x2c
   15b32:	3358      	adds	r3, #88	; 0x58
   15b34:	7810      	ldrb	r0, [r2, #0]
   15b36:	7819      	ldrb	r1, [r3, #0]
   15b38:	4288      	cmp	r0, r1
   15b3a:	d105      	bne.n	15b48 <RADIO_FSKPayloadReady+0x50>
   15b3c:	7812      	ldrb	r2, [r2, #0]
   15b3e:	2a00      	cmp	r2, #0
   15b40:	d002      	beq.n	15b48 <RADIO_FSKPayloadReady+0x50>
   15b42:	781b      	ldrb	r3, [r3, #0]
   15b44:	2b00      	cmp	r3, #0
   15b46:	d118      	bne.n	15b7a <RADIO_FSKPayloadReady+0x82>
   15b48:	0021      	movs	r1, r4
   15b4a:	312c      	adds	r1, #44	; 0x2c
   15b4c:	7808      	ldrb	r0, [r1, #0]
   15b4e:	b2c0      	uxtb	r0, r0
   15b50:	2800      	cmp	r0, #0
   15b52:	d102      	bne.n	15b5a <RADIO_FSKPayloadReady+0x62>
   15b54:	2201      	movs	r2, #1
   15b56:	4b28      	ldr	r3, [pc, #160]	; (15bf8 <RADIO_FSKPayloadReady+0x100>)
   15b58:	4798      	blx	r3
   15b5a:	0026      	movs	r6, r4
   15b5c:	0027      	movs	r7, r4
   15b5e:	3658      	adds	r6, #88	; 0x58
   15b60:	7830      	ldrb	r0, [r6, #0]
   15b62:	372c      	adds	r7, #44	; 0x2c
   15b64:	b2c0      	uxtb	r0, r0
   15b66:	2800      	cmp	r0, #0
   15b68:	d110      	bne.n	15b8c <RADIO_FSKPayloadReady+0x94>
   15b6a:	783a      	ldrb	r2, [r7, #0]
   15b6c:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   15b6e:	b2d2      	uxtb	r2, r2
   15b70:	4b21      	ldr	r3, [pc, #132]	; (15bf8 <RADIO_FSKPayloadReady+0x100>)
   15b72:	4798      	blx	r3
   15b74:	783b      	ldrb	r3, [r7, #0]
   15b76:	b2db      	uxtb	r3, r3
   15b78:	7033      	strb	r3, [r6, #0]
   15b7a:	4b20      	ldr	r3, [pc, #128]	; (15bfc <RADIO_FSKPayloadReady+0x104>)
   15b7c:	4798      	blx	r3
   15b7e:	4b20      	ldr	r3, [pc, #128]	; (15c00 <RADIO_FSKPayloadReady+0x108>)
   15b80:	2000      	movs	r0, #0
   15b82:	4798      	blx	r3
   15b84:	2308      	movs	r3, #8
   15b86:	882a      	ldrh	r2, [r5, #0]
   15b88:	4313      	orrs	r3, r2
   15b8a:	e011      	b.n	15bb0 <RADIO_FSKPayloadReady+0xb8>
   15b8c:	783b      	ldrb	r3, [r7, #0]
   15b8e:	7832      	ldrb	r2, [r6, #0]
   15b90:	1a9b      	subs	r3, r3, r2
   15b92:	2b00      	cmp	r3, #0
   15b94:	ddf1      	ble.n	15b7a <RADIO_FSKPayloadReady+0x82>
   15b96:	7833      	ldrb	r3, [r6, #0]
   15b98:	783a      	ldrb	r2, [r7, #0]
   15b9a:	7831      	ldrb	r1, [r6, #0]
   15b9c:	2000      	movs	r0, #0
   15b9e:	1a52      	subs	r2, r2, r1
   15ba0:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   15ba2:	b2d2      	uxtb	r2, r2
   15ba4:	18c9      	adds	r1, r1, r3
   15ba6:	e7e3      	b.n	15b70 <RADIO_FSKPayloadReady+0x78>
   15ba8:	2380      	movs	r3, #128	; 0x80
   15baa:	8829      	ldrh	r1, [r5, #0]
   15bac:	005b      	lsls	r3, r3, #1
   15bae:	430b      	orrs	r3, r1
   15bb0:	802b      	strh	r3, [r5, #0]
   15bb2:	2002      	movs	r0, #2
   15bb4:	4b13      	ldr	r3, [pc, #76]	; (15c04 <RADIO_FSKPayloadReady+0x10c>)
   15bb6:	4798      	blx	r3
   15bb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   15bba:	0023      	movs	r3, r4
   15bbc:	332f      	adds	r3, #47	; 0x2f
   15bbe:	4e0c      	ldr	r6, [pc, #48]	; (15bf0 <RADIO_FSKPayloadReady+0xf8>)
   15bc0:	7818      	ldrb	r0, [r3, #0]
   15bc2:	47b0      	blx	r6
   15bc4:	0023      	movs	r3, r4
   15bc6:	332e      	adds	r3, #46	; 0x2e
   15bc8:	7818      	ldrb	r0, [r3, #0]
   15bca:	47b0      	blx	r6
   15bcc:	4e0e      	ldr	r6, [pc, #56]	; (15c08 <RADIO_FSKPayloadReady+0x110>)
   15bce:	2201      	movs	r2, #1
   15bd0:	0031      	movs	r1, r6
   15bd2:	2000      	movs	r0, #0
   15bd4:	4f08      	ldr	r7, [pc, #32]	; (15bf8 <RADIO_FSKPayloadReady+0x100>)
   15bd6:	47b8      	blx	r7
   15bd8:	7832      	ldrb	r2, [r6, #0]
   15bda:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   15bdc:	b2d2      	uxtb	r2, r2
   15bde:	2000      	movs	r0, #0
   15be0:	47b8      	blx	r7
   15be2:	e7cc      	b.n	15b7e <RADIO_FSKPayloadReady+0x86>
   15be4:	0000812d 	.word	0x0000812d
   15be8:	20002980 	.word	0x20002980
   15bec:	20002fbc 	.word	0x20002fbc
   15bf0:	0000f125 	.word	0x0000f125
   15bf4:	000045e9 	.word	0x000045e9
   15bf8:	00008199 	.word	0x00008199
   15bfc:	00004629 	.word	0x00004629
   15c00:	00015885 	.word	0x00015885
   15c04:	000154a9 	.word	0x000154a9
   15c08:	200029ac 	.word	0x200029ac

00015c0c <Radio_SetClockInput>:
   15c0c:	b510      	push	{r4, lr}
   15c0e:	4b08      	ldr	r3, [pc, #32]	; (15c30 <Radio_SetClockInput+0x24>)
   15c10:	3355      	adds	r3, #85	; 0x55
   15c12:	781b      	ldrb	r3, [r3, #0]
   15c14:	2b00      	cmp	r3, #0
   15c16:	d10a      	bne.n	15c2e <Radio_SetClockInput+0x22>
   15c18:	4b06      	ldr	r3, [pc, #24]	; (15c34 <Radio_SetClockInput+0x28>)
   15c1a:	204b      	movs	r0, #75	; 0x4b
   15c1c:	4798      	blx	r3
   15c1e:	2110      	movs	r1, #16
   15c20:	4301      	orrs	r1, r0
   15c22:	4b05      	ldr	r3, [pc, #20]	; (15c38 <Radio_SetClockInput+0x2c>)
   15c24:	b2c9      	uxtb	r1, r1
   15c26:	204b      	movs	r0, #75	; 0x4b
   15c28:	4798      	blx	r3
   15c2a:	4b04      	ldr	r3, [pc, #16]	; (15c3c <Radio_SetClockInput+0x30>)
   15c2c:	4798      	blx	r3
   15c2e:	bd10      	pop	{r4, pc}
   15c30:	20002980 	.word	0x20002980
   15c34:	0000812d 	.word	0x0000812d
   15c38:	00008105 	.word	0x00008105
   15c3c:	0000824d 	.word	0x0000824d

00015c40 <Radio_ResetClockInput>:
   15c40:	b510      	push	{r4, lr}
   15c42:	4b04      	ldr	r3, [pc, #16]	; (15c54 <Radio_ResetClockInput+0x14>)
   15c44:	3355      	adds	r3, #85	; 0x55
   15c46:	781b      	ldrb	r3, [r3, #0]
   15c48:	2b00      	cmp	r3, #0
   15c4a:	d101      	bne.n	15c50 <Radio_ResetClockInput+0x10>
   15c4c:	4b02      	ldr	r3, [pc, #8]	; (15c58 <Radio_ResetClockInput+0x18>)
   15c4e:	4798      	blx	r3
   15c50:	bd10      	pop	{r4, pc}
   15c52:	46c0      	nop			; (mov r8, r8)
   15c54:	20002980 	.word	0x20002980
   15c58:	00008269 	.word	0x00008269

00015c5c <RADIO_InitDefaultAttributes>:
   15c5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   15c5e:	2501      	movs	r5, #1
   15c60:	4b64      	ldr	r3, [pc, #400]	; (15df4 <RADIO_InitDefaultAttributes+0x198>)
   15c62:	4c65      	ldr	r4, [pc, #404]	; (15df8 <RADIO_InitDefaultAttributes+0x19c>)
   15c64:	701d      	strb	r5, [r3, #0]
   15c66:	4b65      	ldr	r3, [pc, #404]	; (15dfc <RADIO_InitDefaultAttributes+0x1a0>)
   15c68:	2207      	movs	r2, #7
   15c6a:	6023      	str	r3, [r4, #0]
   15c6c:	4b64      	ldr	r3, [pc, #400]	; (15e00 <RADIO_InitDefaultAttributes+0x1a4>)
   15c6e:	18a1      	adds	r1, r4, r2
   15c70:	6063      	str	r3, [r4, #4]
   15c72:	4b64      	ldr	r3, [pc, #400]	; (15e04 <RADIO_InitDefaultAttributes+0x1a8>)
   15c74:	0027      	movs	r7, r4
   15c76:	60a3      	str	r3, [r4, #8]
   15c78:	0023      	movs	r3, r4
   15c7a:	3334      	adds	r3, #52	; 0x34
   15c7c:	701d      	strb	r5, [r3, #0]
   15c7e:	0023      	movs	r3, r4
   15c80:	3336      	adds	r3, #54	; 0x36
   15c82:	701a      	strb	r2, [r3, #0]
   15c84:	1ce3      	adds	r3, r4, #3
   15c86:	77dd      	strb	r5, [r3, #31]
   15c88:	0023      	movs	r3, r4
   15c8a:	3333      	adds	r3, #51	; 0x33
   15c8c:	701d      	strb	r5, [r3, #0]
   15c8e:	2300      	movs	r3, #0
   15c90:	77cb      	strb	r3, [r1, #31]
   15c92:	2108      	movs	r1, #8
   15c94:	82a1      	strh	r1, [r4, #20]
   15c96:	0021      	movs	r1, r4
   15c98:	3135      	adds	r1, #53	; 0x35
   15c9a:	700a      	strb	r2, [r1, #0]
   15c9c:	1d22      	adds	r2, r4, #4
   15c9e:	77d5      	strb	r5, [r2, #31]
   15ca0:	1d62      	adds	r2, r4, #5
   15ca2:	77d3      	strb	r3, [r2, #31]
   15ca4:	1da2      	adds	r2, r4, #6
   15ca6:	77d3      	strb	r3, [r2, #31]
   15ca8:	2194      	movs	r1, #148	; 0x94
   15caa:	22c1      	movs	r2, #193	; 0xc1
   15cac:	76a1      	strb	r1, [r4, #26]
   15cae:	7662      	strb	r2, [r4, #25]
   15cb0:	76e2      	strb	r2, [r4, #27]
   15cb2:	3991      	subs	r1, #145	; 0x91
   15cb4:	1ca2      	adds	r2, r4, #2
   15cb6:	77d1      	strb	r1, [r2, #31]
   15cb8:	2234      	movs	r2, #52	; 0x34
   15cba:	7622      	strb	r2, [r4, #24]
   15cbc:	0022      	movs	r2, r4
   15cbe:	317d      	adds	r1, #125	; 0x7d
   15cc0:	3232      	adds	r2, #50	; 0x32
   15cc2:	7011      	strb	r1, [r2, #0]
   15cc4:	4a50      	ldr	r2, [pc, #320]	; (15e08 <RADIO_InitDefaultAttributes+0x1ac>)
   15cc6:	397e      	subs	r1, #126	; 0x7e
   15cc8:	60e2      	str	r2, [r4, #12]
   15cca:	0022      	movs	r2, r4
   15ccc:	3237      	adds	r2, #55	; 0x37
   15cce:	7011      	strb	r1, [r2, #0]
   15cd0:	0022      	movs	r2, r4
   15cd2:	3109      	adds	r1, #9
   15cd4:	3238      	adds	r2, #56	; 0x38
   15cd6:	7011      	strb	r1, [r2, #0]
   15cd8:	0022      	movs	r2, r4
   15cda:	3107      	adds	r1, #7
   15cdc:	3239      	adds	r2, #57	; 0x39
   15cde:	7011      	strb	r1, [r2, #0]
   15ce0:	0022      	movs	r2, r4
   15ce2:	322c      	adds	r2, #44	; 0x2c
   15ce4:	7013      	strb	r3, [r2, #0]
   15ce6:	4a49      	ldr	r2, [pc, #292]	; (15e0c <RADIO_InitDefaultAttributes+0x1b0>)
   15ce8:	82e3      	strh	r3, [r4, #22]
   15cea:	62a2      	str	r2, [r4, #40]	; 0x28
   15cec:	0022      	movs	r2, r4
   15cee:	324c      	adds	r2, #76	; 0x4c
   15cf0:	8013      	strh	r3, [r2, #0]
   15cf2:	0022      	movs	r2, r4
   15cf4:	324e      	adds	r2, #78	; 0x4e
   15cf6:	7013      	strb	r3, [r2, #0]
   15cf8:	0022      	movs	r2, r4
   15cfa:	324f      	adds	r2, #79	; 0x4f
   15cfc:	7013      	strb	r3, [r2, #0]
   15cfe:	0022      	movs	r2, r4
   15d00:	3240      	adds	r2, #64	; 0x40
   15d02:	7013      	strb	r3, [r2, #0]
   15d04:	0022      	movs	r2, r4
   15d06:	3241      	adds	r2, #65	; 0x41
   15d08:	7013      	strb	r3, [r2, #0]
   15d0a:	0022      	movs	r2, r4
   15d0c:	3254      	adds	r2, #84	; 0x54
   15d0e:	7013      	strb	r3, [r2, #0]
   15d10:	0022      	movs	r2, r4
   15d12:	3255      	adds	r2, #85	; 0x55
   15d14:	7015      	strb	r5, [r2, #0]
   15d16:	0022      	movs	r2, r4
   15d18:	3258      	adds	r2, #88	; 0x58
   15d1a:	6463      	str	r3, [r4, #68]	; 0x44
   15d1c:	64a3      	str	r3, [r4, #72]	; 0x48
   15d1e:	87a3      	strh	r3, [r4, #60]	; 0x3c
   15d20:	87e3      	strh	r3, [r4, #62]	; 0x3e
   15d22:	7013      	strb	r3, [r2, #0]
   15d24:	3730      	adds	r7, #48	; 0x30
   15d26:	783b      	ldrb	r3, [r7, #0]
   15d28:	2b00      	cmp	r3, #0
   15d2a:	d151      	bne.n	15dd0 <RADIO_InitDefaultAttributes+0x174>
   15d2c:	4838      	ldr	r0, [pc, #224]	; (15e10 <RADIO_InitDefaultAttributes+0x1b4>)
   15d2e:	4e39      	ldr	r6, [pc, #228]	; (15e14 <RADIO_InitDefaultAttributes+0x1b8>)
   15d30:	47b0      	blx	r6
   15d32:	2808      	cmp	r0, #8
   15d34:	d149      	bne.n	15dca <RADIO_InitDefaultAttributes+0x16e>
   15d36:	4838      	ldr	r0, [pc, #224]	; (15e18 <RADIO_InitDefaultAttributes+0x1bc>)
   15d38:	47b0      	blx	r6
   15d3a:	2808      	cmp	r0, #8
   15d3c:	d145      	bne.n	15dca <RADIO_InitDefaultAttributes+0x16e>
   15d3e:	4837      	ldr	r0, [pc, #220]	; (15e1c <RADIO_InitDefaultAttributes+0x1c0>)
   15d40:	47b0      	blx	r6
   15d42:	2808      	cmp	r0, #8
   15d44:	d141      	bne.n	15dca <RADIO_InitDefaultAttributes+0x16e>
   15d46:	4836      	ldr	r0, [pc, #216]	; (15e20 <RADIO_InitDefaultAttributes+0x1c4>)
   15d48:	47b0      	blx	r6
   15d4a:	2808      	cmp	r0, #8
   15d4c:	d13d      	bne.n	15dca <RADIO_InitDefaultAttributes+0x16e>
   15d4e:	703d      	strb	r5, [r7, #0]
   15d50:	4b34      	ldr	r3, [pc, #208]	; (15e24 <RADIO_InitDefaultAttributes+0x1c8>)
   15d52:	4798      	blx	r3
   15d54:	4b34      	ldr	r3, [pc, #208]	; (15e28 <RADIO_InitDefaultAttributes+0x1cc>)
   15d56:	4798      	blx	r3
   15d58:	2800      	cmp	r0, #0
   15d5a:	d107      	bne.n	15d6c <RADIO_InitDefaultAttributes+0x110>
   15d5c:	0023      	movs	r3, r4
   15d5e:	3355      	adds	r3, #85	; 0x55
   15d60:	7018      	strb	r0, [r3, #0]
   15d62:	4b32      	ldr	r3, [pc, #200]	; (15e2c <RADIO_InitDefaultAttributes+0x1d0>)
   15d64:	4798      	blx	r3
   15d66:	0023      	movs	r3, r4
   15d68:	3354      	adds	r3, #84	; 0x54
   15d6a:	7018      	strb	r0, [r3, #0]
   15d6c:	4b30      	ldr	r3, [pc, #192]	; (15e30 <RADIO_InitDefaultAttributes+0x1d4>)
   15d6e:	4798      	blx	r3
   15d70:	2201      	movs	r2, #1
   15d72:	2100      	movs	r1, #0
   15d74:	0010      	movs	r0, r2
   15d76:	4f2f      	ldr	r7, [pc, #188]	; (15e34 <RADIO_InitDefaultAttributes+0x1d8>)
   15d78:	47b8      	blx	r7
   15d7a:	6820      	ldr	r0, [r4, #0]
   15d7c:	4b2e      	ldr	r3, [pc, #184]	; (15e38 <RADIO_InitDefaultAttributes+0x1dc>)
   15d7e:	4798      	blx	r3
   15d80:	2142      	movs	r1, #66	; 0x42
   15d82:	203b      	movs	r0, #59	; 0x3b
   15d84:	4d2d      	ldr	r5, [pc, #180]	; (15e3c <RADIO_InitDefaultAttributes+0x1e0>)
   15d86:	47a8      	blx	r5
   15d88:	203b      	movs	r0, #59	; 0x3b
   15d8a:	4b2d      	ldr	r3, [pc, #180]	; (15e40 <RADIO_InitDefaultAttributes+0x1e4>)
   15d8c:	4798      	blx	r3
   15d8e:	2620      	movs	r6, #32
   15d90:	4006      	ands	r6, r0
   15d92:	d1f9      	bne.n	15d88 <RADIO_InitDefaultAttributes+0x12c>
   15d94:	2123      	movs	r1, #35	; 0x23
   15d96:	200c      	movs	r0, #12
   15d98:	47a8      	blx	r5
   15d9a:	21aa      	movs	r1, #170	; 0xaa
   15d9c:	201f      	movs	r0, #31
   15d9e:	47a8      	blx	r5
   15da0:	21ff      	movs	r1, #255	; 0xff
   15da2:	2032      	movs	r0, #50	; 0x32
   15da4:	47a8      	blx	r5
   15da6:	2140      	movs	r1, #64	; 0x40
   15da8:	2031      	movs	r0, #49	; 0x31
   15daa:	47a8      	blx	r5
   15dac:	2201      	movs	r2, #1
   15dae:	0030      	movs	r0, r6
   15db0:	0011      	movs	r1, r2
   15db2:	47b8      	blx	r7
   15db4:	21ff      	movs	r1, #255	; 0xff
   15db6:	2023      	movs	r0, #35	; 0x23
   15db8:	47a8      	blx	r5
   15dba:	4b21      	ldr	r3, [pc, #132]	; (15e40 <RADIO_InitDefaultAttributes+0x1e4>)
   15dbc:	2042      	movs	r0, #66	; 0x42
   15dbe:	4798      	blx	r3
   15dc0:	3431      	adds	r4, #49	; 0x31
   15dc2:	4b20      	ldr	r3, [pc, #128]	; (15e44 <RADIO_InitDefaultAttributes+0x1e8>)
   15dc4:	7020      	strb	r0, [r4, #0]
   15dc6:	4798      	blx	r3
   15dc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   15dca:	4b1f      	ldr	r3, [pc, #124]	; (15e48 <RADIO_InitDefaultAttributes+0x1ec>)
   15dcc:	4798      	blx	r3
   15dce:	e7bf      	b.n	15d50 <RADIO_InitDefaultAttributes+0xf4>
   15dd0:	0023      	movs	r3, r4
   15dd2:	332d      	adds	r3, #45	; 0x2d
   15dd4:	4d1d      	ldr	r5, [pc, #116]	; (15e4c <RADIO_InitDefaultAttributes+0x1f0>)
   15dd6:	7818      	ldrb	r0, [r3, #0]
   15dd8:	47a8      	blx	r5
   15dda:	0023      	movs	r3, r4
   15ddc:	332e      	adds	r3, #46	; 0x2e
   15dde:	7818      	ldrb	r0, [r3, #0]
   15de0:	47a8      	blx	r5
   15de2:	0023      	movs	r3, r4
   15de4:	332f      	adds	r3, #47	; 0x2f
   15de6:	7818      	ldrb	r0, [r3, #0]
   15de8:	47a8      	blx	r5
   15dea:	0023      	movs	r3, r4
   15dec:	3350      	adds	r3, #80	; 0x50
   15dee:	7818      	ldrb	r0, [r3, #0]
   15df0:	47a8      	blx	r5
   15df2:	e7ad      	b.n	15d50 <RADIO_InitDefaultAttributes+0xf4>
   15df4:	20002fbf 	.word	0x20002fbf
   15df8:	20002980 	.word	0x20002980
   15dfc:	33be27a0 	.word	0x33be27a0
   15e00:	000061a8 	.word	0x000061a8
   15e04:	0000c350 	.word	0x0000c350
   15e08:	00003a98 	.word	0x00003a98
   15e0c:	20002ebc 	.word	0x20002ebc
   15e10:	200029ad 	.word	0x200029ad
   15e14:	0000edd9 	.word	0x0000edd9
   15e18:	200029ae 	.word	0x200029ae
   15e1c:	200029af 	.word	0x200029af
   15e20:	200029d0 	.word	0x200029d0
   15e24:	000080c5 	.word	0x000080c5
   15e28:	00008249 	.word	0x00008249
   15e2c:	00008245 	.word	0x00008245
   15e30:	00015c0d 	.word	0x00015c0d
   15e34:	0000f4d9 	.word	0x0000f4d9
   15e38:	00014ea1 	.word	0x00014ea1
   15e3c:	00008105 	.word	0x00008105
   15e40:	0000812d 	.word	0x0000812d
   15e44:	00015c41 	.word	0x00015c41
   15e48:	0000ed1d 	.word	0x0000ed1d
   15e4c:	0000f125 	.word	0x0000f125

00015e50 <RADIO_Receive>:
   15e50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   15e52:	7803      	ldrb	r3, [r0, #0]
   15e54:	0006      	movs	r6, r0
   15e56:	4d24      	ldr	r5, [pc, #144]	; (15ee8 <RADIO_Receive+0x98>)
   15e58:	2b00      	cmp	r3, #0
   15e5a:	d11d      	bne.n	15e98 <RADIO_Receive+0x48>
   15e5c:	782b      	ldrb	r3, [r5, #0]
   15e5e:	2004      	movs	r0, #4
   15e60:	2b01      	cmp	r3, #1
   15e62:	d118      	bne.n	15e96 <RADIO_Receive+0x46>
   15e64:	4c21      	ldr	r4, [pc, #132]	; (15eec <RADIO_Receive+0x9c>)
   15e66:	4f22      	ldr	r7, [pc, #136]	; (15ef0 <RADIO_Receive+0xa0>)
   15e68:	0023      	movs	r3, r4
   15e6a:	332f      	adds	r3, #47	; 0x2f
   15e6c:	7818      	ldrb	r0, [r3, #0]
   15e6e:	47b8      	blx	r7
   15e70:	0023      	movs	r3, r4
   15e72:	3334      	adds	r3, #52	; 0x34
   15e74:	781b      	ldrb	r3, [r3, #0]
   15e76:	2b00      	cmp	r3, #0
   15e78:	d102      	bne.n	15e80 <RADIO_Receive+0x30>
   15e7a:	342e      	adds	r4, #46	; 0x2e
   15e7c:	7820      	ldrb	r0, [r4, #0]
   15e7e:	47b8      	blx	r7
   15e80:	8872      	ldrh	r2, [r6, #2]
   15e82:	4b1c      	ldr	r3, [pc, #112]	; (15ef4 <RADIO_Receive+0xa4>)
   15e84:	2008      	movs	r0, #8
   15e86:	801a      	strh	r2, [r3, #0]
   15e88:	2304      	movs	r3, #4
   15e8a:	702b      	strb	r3, [r5, #0]
   15e8c:	4b1a      	ldr	r3, [pc, #104]	; (15ef8 <RADIO_Receive+0xa8>)
   15e8e:	4798      	blx	r3
   15e90:	4b1a      	ldr	r3, [pc, #104]	; (15efc <RADIO_Receive+0xac>)
   15e92:	4798      	blx	r3
   15e94:	2000      	movs	r0, #0
   15e96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   15e98:	782b      	ldrb	r3, [r5, #0]
   15e9a:	2000      	movs	r0, #0
   15e9c:	2b01      	cmp	r3, #1
   15e9e:	d0fa      	beq.n	15e96 <RADIO_Receive+0x46>
   15ea0:	782b      	ldrb	r3, [r5, #0]
   15ea2:	3003      	adds	r0, #3
   15ea4:	2b04      	cmp	r3, #4
   15ea6:	d1f6      	bne.n	15e96 <RADIO_Receive+0x46>
   15ea8:	4c10      	ldr	r4, [pc, #64]	; (15eec <RADIO_Receive+0x9c>)
   15eaa:	4e11      	ldr	r6, [pc, #68]	; (15ef0 <RADIO_Receive+0xa0>)
   15eac:	0023      	movs	r3, r4
   15eae:	332f      	adds	r3, #47	; 0x2f
   15eb0:	7818      	ldrb	r0, [r3, #0]
   15eb2:	47b0      	blx	r6
   15eb4:	0023      	movs	r3, r4
   15eb6:	3334      	adds	r3, #52	; 0x34
   15eb8:	781b      	ldrb	r3, [r3, #0]
   15eba:	2b00      	cmp	r3, #0
   15ebc:	d103      	bne.n	15ec6 <RADIO_Receive+0x76>
   15ebe:	0023      	movs	r3, r4
   15ec0:	332e      	adds	r3, #46	; 0x2e
   15ec2:	7818      	ldrb	r0, [r3, #0]
   15ec4:	47b0      	blx	r6
   15ec6:	2200      	movs	r2, #0
   15ec8:	3434      	adds	r4, #52	; 0x34
   15eca:	7821      	ldrb	r1, [r4, #0]
   15ecc:	0010      	movs	r0, r2
   15ece:	4b0c      	ldr	r3, [pc, #48]	; (15f00 <RADIO_Receive+0xb0>)
   15ed0:	4798      	blx	r3
   15ed2:	4b0c      	ldr	r3, [pc, #48]	; (15f04 <RADIO_Receive+0xb4>)
   15ed4:	4798      	blx	r3
   15ed6:	2301      	movs	r3, #1
   15ed8:	2008      	movs	r0, #8
   15eda:	4c0b      	ldr	r4, [pc, #44]	; (15f08 <RADIO_Receive+0xb8>)
   15edc:	702b      	strb	r3, [r5, #0]
   15ede:	47a0      	blx	r4
   15ee0:	2002      	movs	r0, #2
   15ee2:	47a0      	blx	r4
   15ee4:	e7d6      	b.n	15e94 <RADIO_Receive+0x44>
   15ee6:	46c0      	nop			; (mov r8, r8)
   15ee8:	20002fbf 	.word	0x20002fbf
   15eec:	20002980 	.word	0x20002980
   15ef0:	0000f125 	.word	0x0000f125
   15ef4:	20001126 	.word	0x20001126
   15ef8:	000154a9 	.word	0x000154a9
   15efc:	00015c0d 	.word	0x00015c0d
   15f00:	0000f4d9 	.word	0x0000f4d9
   15f04:	00015c41 	.word	0x00015c41
   15f08:	000154d5 	.word	0x000154d5

00015f0c <RADIO_TxHandler>:
   15f0c:	b5f0      	push	{r4, r5, r6, r7, lr}
   15f0e:	4e56      	ldr	r6, [pc, #344]	; (16068 <RADIO_TxHandler+0x15c>)
   15f10:	b087      	sub	sp, #28
   15f12:	47b0      	blx	r6
   15f14:	4c55      	ldr	r4, [pc, #340]	; (1606c <RADIO_TxHandler+0x160>)
   15f16:	0023      	movs	r3, r4
   15f18:	332d      	adds	r3, #45	; 0x2d
   15f1a:	7818      	ldrb	r0, [r3, #0]
   15f1c:	4b54      	ldr	r3, [pc, #336]	; (16070 <RADIO_TxHandler+0x164>)
   15f1e:	4798      	blx	r3
   15f20:	0023      	movs	r3, r4
   15f22:	3341      	adds	r3, #65	; 0x41
   15f24:	781b      	ldrb	r3, [r3, #0]
   15f26:	4d53      	ldr	r5, [pc, #332]	; (16074 <RADIO_TxHandler+0x168>)
   15f28:	2b00      	cmp	r3, #0
   15f2a:	d022      	beq.n	15f72 <RADIO_TxHandler+0x66>
   15f2c:	2214      	movs	r2, #20
   15f2e:	8fa3      	ldrh	r3, [r4, #60]	; 0x3c
   15f30:	4353      	muls	r3, r2
   15f32:	0022      	movs	r2, r4
   15f34:	3240      	adds	r2, #64	; 0x40
   15f36:	7013      	strb	r3, [r2, #0]
   15f38:	47b0      	blx	r6
   15f3a:	2000      	movs	r0, #0
   15f3c:	4b4e      	ldr	r3, [pc, #312]	; (16078 <RADIO_TxHandler+0x16c>)
   15f3e:	4798      	blx	r3
   15f40:	6820      	ldr	r0, [r4, #0]
   15f42:	4b4e      	ldr	r3, [pc, #312]	; (1607c <RADIO_TxHandler+0x170>)
   15f44:	4798      	blx	r3
   15f46:	0023      	movs	r3, r4
   15f48:	2600      	movs	r6, #0
   15f4a:	334c      	adds	r3, #76	; 0x4c
   15f4c:	2201      	movs	r2, #1
   15f4e:	801e      	strh	r6, [r3, #0]
   15f50:	0031      	movs	r1, r6
   15f52:	4b4b      	ldr	r3, [pc, #300]	; (16080 <RADIO_TxHandler+0x174>)
   15f54:	0030      	movs	r0, r6
   15f56:	4798      	blx	r3
   15f58:	2109      	movs	r1, #9
   15f5a:	2012      	movs	r0, #18
   15f5c:	47a8      	blx	r5
   15f5e:	2201      	movs	r2, #1
   15f60:	0031      	movs	r1, r6
   15f62:	2005      	movs	r0, #5
   15f64:	4b46      	ldr	r3, [pc, #280]	; (16080 <RADIO_TxHandler+0x174>)
   15f66:	4798      	blx	r3
   15f68:	0023      	movs	r3, r4
   15f6a:	3340      	adds	r3, #64	; 0x40
   15f6c:	781b      	ldrb	r3, [r3, #0]
   15f6e:	42b3      	cmp	r3, r6
   15f70:	d844      	bhi.n	15ffc <RADIO_TxHandler+0xf0>
   15f72:	2001      	movs	r0, #1
   15f74:	4b40      	ldr	r3, [pc, #256]	; (16078 <RADIO_TxHandler+0x16c>)
   15f76:	4798      	blx	r3
   15f78:	4b42      	ldr	r3, [pc, #264]	; (16084 <RADIO_TxHandler+0x178>)
   15f7a:	2004      	movs	r0, #4
   15f7c:	4798      	blx	r3
   15f7e:	4b42      	ldr	r3, [pc, #264]	; (16088 <RADIO_TxHandler+0x17c>)
   15f80:	4e42      	ldr	r6, [pc, #264]	; (1608c <RADIO_TxHandler+0x180>)
   15f82:	781f      	ldrb	r7, [r3, #0]
   15f84:	2f01      	cmp	r7, #1
   15f86:	d146      	bne.n	16016 <RADIO_TxHandler+0x10a>
   15f88:	7831      	ldrb	r1, [r6, #0]
   15f8a:	2022      	movs	r0, #34	; 0x22
   15f8c:	47a8      	blx	r5
   15f8e:	4b40      	ldr	r3, [pc, #256]	; (16090 <RADIO_TxHandler+0x184>)
   15f90:	200a      	movs	r0, #10
   15f92:	4798      	blx	r3
   15f94:	21f0      	movs	r1, #240	; 0xf0
   15f96:	4008      	ands	r0, r1
   15f98:	39e8      	subs	r1, #232	; 0xe8
   15f9a:	4301      	orrs	r1, r0
   15f9c:	200a      	movs	r0, #10
   15f9e:	47a8      	blx	r5
   15fa0:	2140      	movs	r1, #64	; 0x40
   15fa2:	0008      	movs	r0, r1
   15fa4:	47a8      	blx	r5
   15fa6:	2100      	movs	r1, #0
   15fa8:	2041      	movs	r0, #65	; 0x41
   15faa:	47a8      	blx	r5
   15fac:	4b36      	ldr	r3, [pc, #216]	; (16088 <RADIO_TxHandler+0x17c>)
   15fae:	003a      	movs	r2, r7
   15fb0:	7819      	ldrb	r1, [r3, #0]
   15fb2:	0038      	movs	r0, r7
   15fb4:	4b32      	ldr	r3, [pc, #200]	; (16080 <RADIO_TxHandler+0x174>)
   15fb6:	4798      	blx	r3
   15fb8:	4b36      	ldr	r3, [pc, #216]	; (16094 <RADIO_TxHandler+0x188>)
   15fba:	7832      	ldrb	r2, [r6, #0]
   15fbc:	6819      	ldr	r1, [r3, #0]
   15fbe:	2000      	movs	r0, #0
   15fc0:	4b35      	ldr	r3, [pc, #212]	; (16098 <RADIO_TxHandler+0x18c>)
   15fc2:	4798      	blx	r3
   15fc4:	0023      	movs	r3, r4
   15fc6:	3334      	adds	r3, #52	; 0x34
   15fc8:	7819      	ldrb	r1, [r3, #0]
   15fca:	2200      	movs	r2, #0
   15fcc:	2003      	movs	r0, #3
   15fce:	4b2c      	ldr	r3, [pc, #176]	; (16080 <RADIO_TxHandler+0x174>)
   15fd0:	4798      	blx	r3
   15fd2:	4b32      	ldr	r3, [pc, #200]	; (1609c <RADIO_TxHandler+0x190>)
   15fd4:	4798      	blx	r3
   15fd6:	4b32      	ldr	r3, [pc, #200]	; (160a0 <RADIO_TxHandler+0x194>)
   15fd8:	6018      	str	r0, [r3, #0]
   15fda:	6059      	str	r1, [r3, #4]
   15fdc:	68e3      	ldr	r3, [r4, #12]
   15fde:	2b00      	cmp	r3, #0
   15fe0:	d009      	beq.n	15ff6 <RADIO_TxHandler+0xea>
   15fe2:	21fa      	movs	r1, #250	; 0xfa
   15fe4:	2200      	movs	r2, #0
   15fe6:	342f      	adds	r4, #47	; 0x2f
   15fe8:	0089      	lsls	r1, r1, #2
   15fea:	7820      	ldrb	r0, [r4, #0]
   15fec:	4359      	muls	r1, r3
   15fee:	9200      	str	r2, [sp, #0]
   15ff0:	4b2c      	ldr	r3, [pc, #176]	; (160a4 <RADIO_TxHandler+0x198>)
   15ff2:	4c2d      	ldr	r4, [pc, #180]	; (160a8 <RADIO_TxHandler+0x19c>)
   15ff4:	47a0      	blx	r4
   15ff6:	2000      	movs	r0, #0
   15ff8:	b007      	add	sp, #28
   15ffa:	bdf0      	pop	{r4, r5, r6, r7, pc}
   15ffc:	4f2b      	ldr	r7, [pc, #172]	; (160ac <RADIO_TxHandler+0x1a0>)
   15ffe:	4b2c      	ldr	r3, [pc, #176]	; (160b0 <RADIO_TxHandler+0x1a4>)
   16000:	0038      	movs	r0, r7
   16002:	4798      	blx	r3
   16004:	233e      	movs	r3, #62	; 0x3e
   16006:	5ee2      	ldrsh	r2, [r4, r3]
   16008:	2100      	movs	r1, #0
   1600a:	5e7b      	ldrsh	r3, [r7, r1]
   1600c:	429a      	cmp	r2, r3
   1600e:	db14      	blt.n	1603a <RADIO_TxHandler+0x12e>
   16010:	3601      	adds	r6, #1
   16012:	b2f6      	uxtb	r6, r6
   16014:	e7a8      	b.n	15f68 <RADIO_TxHandler+0x5c>
   16016:	2100      	movs	r1, #0
   16018:	2040      	movs	r0, #64	; 0x40
   1601a:	47a8      	blx	r5
   1601c:	2100      	movs	r1, #0
   1601e:	2041      	movs	r0, #65	; 0x41
   16020:	47a8      	blx	r5
   16022:	0023      	movs	r3, r4
   16024:	2000      	movs	r0, #0
   16026:	3358      	adds	r3, #88	; 0x58
   16028:	7831      	ldrb	r1, [r6, #0]
   1602a:	7018      	strb	r0, [r3, #0]
   1602c:	47a8      	blx	r5
   1602e:	4b19      	ldr	r3, [pc, #100]	; (16094 <RADIO_TxHandler+0x188>)
   16030:	7831      	ldrb	r1, [r6, #0]
   16032:	6818      	ldr	r0, [r3, #0]
   16034:	4b1f      	ldr	r3, [pc, #124]	; (160b4 <RADIO_TxHandler+0x1a8>)
   16036:	4798      	blx	r3
   16038:	e7c4      	b.n	15fc4 <RADIO_TxHandler+0xb8>
   1603a:	2000      	movs	r0, #0
   1603c:	4b1e      	ldr	r3, [pc, #120]	; (160b8 <RADIO_TxHandler+0x1ac>)
   1603e:	4798      	blx	r3
   16040:	4b1e      	ldr	r3, [pc, #120]	; (160bc <RADIO_TxHandler+0x1b0>)
   16042:	4798      	blx	r3
   16044:	2307      	movs	r3, #7
   16046:	2201      	movs	r2, #1
   16048:	a903      	add	r1, sp, #12
   1604a:	700b      	strb	r3, [r1, #0]
   1604c:	4b1c      	ldr	r3, [pc, #112]	; (160c0 <RADIO_TxHandler+0x1b4>)
   1604e:	701a      	strb	r2, [r3, #0]
   16050:	4b1c      	ldr	r3, [pc, #112]	; (160c4 <RADIO_TxHandler+0x1b8>)
   16052:	781b      	ldrb	r3, [r3, #0]
   16054:	079b      	lsls	r3, r3, #30
   16056:	d400      	bmi.n	1605a <RADIO_TxHandler+0x14e>
   16058:	e78b      	b.n	15f72 <RADIO_TxHandler+0x66>
   1605a:	6923      	ldr	r3, [r4, #16]
   1605c:	2b00      	cmp	r3, #0
   1605e:	d100      	bne.n	16062 <RADIO_TxHandler+0x156>
   16060:	e787      	b.n	15f72 <RADIO_TxHandler+0x66>
   16062:	2002      	movs	r0, #2
   16064:	4798      	blx	r3
   16066:	e784      	b.n	15f72 <RADIO_TxHandler+0x66>
   16068:	00015c0d 	.word	0x00015c0d
   1606c:	20002980 	.word	0x20002980
   16070:	0000f125 	.word	0x0000f125
   16074:	00008105 	.word	0x00008105
   16078:	0001575d 	.word	0x0001575d
   1607c:	00014ea1 	.word	0x00014ea1
   16080:	0000f4d9 	.word	0x0000f4d9
   16084:	00014ee9 	.word	0x00014ee9
   16088:	200029b4 	.word	0x200029b4
   1608c:	20001134 	.word	0x20001134
   16090:	0000812d 	.word	0x0000812d
   16094:	20001130 	.word	0x20001130
   16098:	00008159 	.word	0x00008159
   1609c:	0000edb5 	.word	0x0000edb5
   160a0:	20001128 	.word	0x20001128
   160a4:	000158b9 	.word	0x000158b9
   160a8:	0000ee0d 	.word	0x0000ee0d
   160ac:	20001124 	.word	0x20001124
   160b0:	0000f69d 	.word	0x0000f69d
   160b4:	000155d9 	.word	0x000155d9
   160b8:	00015885 	.word	0x00015885
   160bc:	00015c41 	.word	0x00015c41
   160c0:	20002fbf 	.word	0x20002fbf
   160c4:	20002fbe 	.word	0x20002fbe

000160c8 <RADIO_TxDoneHandler>:
   160c8:	b5f0      	push	{r4, r5, r6, r7, lr}
   160ca:	4b35      	ldr	r3, [pc, #212]	; (161a0 <RADIO_TxDoneHandler+0xd8>)
   160cc:	b087      	sub	sp, #28
   160ce:	881a      	ldrh	r2, [r3, #0]
   160d0:	06d2      	lsls	r2, r2, #27
   160d2:	0fd2      	lsrs	r2, r2, #31
   160d4:	9200      	str	r2, [sp, #0]
   160d6:	466a      	mov	r2, sp
   160d8:	7810      	ldrb	r0, [r2, #0]
   160da:	881a      	ldrh	r2, [r3, #0]
   160dc:	2801      	cmp	r0, #1
   160de:	d12b      	bne.n	16138 <RADIO_TxDoneHandler+0x70>
   160e0:	4c30      	ldr	r4, [pc, #192]	; (161a4 <RADIO_TxDoneHandler+0xdc>)
   160e2:	2110      	movs	r1, #16
   160e4:	0027      	movs	r7, r4
   160e6:	2500      	movs	r5, #0
   160e8:	438a      	bics	r2, r1
   160ea:	801a      	strh	r2, [r3, #0]
   160ec:	3734      	adds	r7, #52	; 0x34
   160ee:	0002      	movs	r2, r0
   160f0:	7839      	ldrb	r1, [r7, #0]
   160f2:	4b2d      	ldr	r3, [pc, #180]	; (161a8 <RADIO_TxDoneHandler+0xe0>)
   160f4:	4798      	blx	r3
   160f6:	68e3      	ldr	r3, [r4, #12]
   160f8:	ae03      	add	r6, sp, #12
   160fa:	9304      	str	r3, [sp, #16]
   160fc:	7035      	strb	r5, [r6, #0]
   160fe:	002a      	movs	r2, r5
   16100:	4b29      	ldr	r3, [pc, #164]	; (161a8 <RADIO_TxDoneHandler+0xe0>)
   16102:	7839      	ldrb	r1, [r7, #0]
   16104:	0028      	movs	r0, r5
   16106:	4798      	blx	r3
   16108:	466a      	mov	r2, sp
   1610a:	4b28      	ldr	r3, [pc, #160]	; (161ac <RADIO_TxDoneHandler+0xe4>)
   1610c:	7812      	ldrb	r2, [r2, #0]
   1610e:	701a      	strb	r2, [r3, #0]
   16110:	0023      	movs	r3, r4
   16112:	3358      	adds	r3, #88	; 0x58
   16114:	701d      	strb	r5, [r3, #0]
   16116:	4b26      	ldr	r3, [pc, #152]	; (161b0 <RADIO_TxDoneHandler+0xe8>)
   16118:	781b      	ldrb	r3, [r3, #0]
   1611a:	075b      	lsls	r3, r3, #29
   1611c:	d505      	bpl.n	1612a <RADIO_TxDoneHandler+0x62>
   1611e:	6923      	ldr	r3, [r4, #16]
   16120:	42ab      	cmp	r3, r5
   16122:	d002      	beq.n	1612a <RADIO_TxDoneHandler+0x62>
   16124:	0031      	movs	r1, r6
   16126:	2004      	movs	r0, #4
   16128:	4798      	blx	r3
   1612a:	4b22      	ldr	r3, [pc, #136]	; (161b4 <RADIO_TxDoneHandler+0xec>)
   1612c:	4798      	blx	r3
   1612e:	4b22      	ldr	r3, [pc, #136]	; (161b8 <RADIO_TxDoneHandler+0xf0>)
   16130:	4798      	blx	r3
   16132:	2000      	movs	r0, #0
   16134:	b007      	add	sp, #28
   16136:	bdf0      	pop	{r4, r5, r6, r7, pc}
   16138:	07d2      	lsls	r2, r2, #31
   1613a:	d402      	bmi.n	16142 <RADIO_TxDoneHandler+0x7a>
   1613c:	881a      	ldrh	r2, [r3, #0]
   1613e:	0752      	lsls	r2, r2, #29
   16140:	d527      	bpl.n	16192 <RADIO_TxDoneHandler+0xca>
   16142:	2601      	movs	r6, #1
   16144:	2104      	movs	r1, #4
   16146:	881a      	ldrh	r2, [r3, #0]
   16148:	4f16      	ldr	r7, [pc, #88]	; (161a4 <RADIO_TxDoneHandler+0xdc>)
   1614a:	43b2      	bics	r2, r6
   1614c:	801a      	strh	r2, [r3, #0]
   1614e:	881a      	ldrh	r2, [r3, #0]
   16150:	2400      	movs	r4, #0
   16152:	438a      	bics	r2, r1
   16154:	801a      	strh	r2, [r3, #0]
   16156:	4b19      	ldr	r3, [pc, #100]	; (161bc <RADIO_TxDoneHandler+0xf4>)
   16158:	ad03      	add	r5, sp, #12
   1615a:	681b      	ldr	r3, [r3, #0]
   1615c:	702c      	strb	r4, [r5, #0]
   1615e:	9304      	str	r3, [sp, #16]
   16160:	003b      	movs	r3, r7
   16162:	3334      	adds	r3, #52	; 0x34
   16164:	7819      	ldrb	r1, [r3, #0]
   16166:	0022      	movs	r2, r4
   16168:	0020      	movs	r0, r4
   1616a:	4b0f      	ldr	r3, [pc, #60]	; (161a8 <RADIO_TxDoneHandler+0xe0>)
   1616c:	4798      	blx	r3
   1616e:	4b14      	ldr	r3, [pc, #80]	; (161c0 <RADIO_TxDoneHandler+0xf8>)
   16170:	4798      	blx	r3
   16172:	4b0e      	ldr	r3, [pc, #56]	; (161ac <RADIO_TxDoneHandler+0xe4>)
   16174:	701e      	strb	r6, [r3, #0]
   16176:	003b      	movs	r3, r7
   16178:	3358      	adds	r3, #88	; 0x58
   1617a:	701c      	strb	r4, [r3, #0]
   1617c:	4b0c      	ldr	r3, [pc, #48]	; (161b0 <RADIO_TxDoneHandler+0xe8>)
   1617e:	781b      	ldrb	r3, [r3, #0]
   16180:	079b      	lsls	r3, r3, #30
   16182:	d5d6      	bpl.n	16132 <RADIO_TxDoneHandler+0x6a>
   16184:	693b      	ldr	r3, [r7, #16]
   16186:	42a3      	cmp	r3, r4
   16188:	d0d3      	beq.n	16132 <RADIO_TxDoneHandler+0x6a>
   1618a:	0029      	movs	r1, r5
   1618c:	2002      	movs	r0, #2
   1618e:	4798      	blx	r3
   16190:	e7cf      	b.n	16132 <RADIO_TxDoneHandler+0x6a>
   16192:	881b      	ldrh	r3, [r3, #0]
   16194:	059b      	lsls	r3, r3, #22
   16196:	d5cc      	bpl.n	16132 <RADIO_TxDoneHandler+0x6a>
   16198:	4b0a      	ldr	r3, [pc, #40]	; (161c4 <RADIO_TxDoneHandler+0xfc>)
   1619a:	4798      	blx	r3
   1619c:	e7c9      	b.n	16132 <RADIO_TxDoneHandler+0x6a>
   1619e:	46c0      	nop			; (mov r8, r8)
   161a0:	20002fbc 	.word	0x20002fbc
   161a4:	20002980 	.word	0x20002980
   161a8:	0000f4d9 	.word	0x0000f4d9
   161ac:	20002fbf 	.word	0x20002fbf
   161b0:	20002fbe 	.word	0x20002fbe
   161b4:	000080c5 	.word	0x000080c5
   161b8:	00015c5d 	.word	0x00015c5d
   161bc:	20001128 	.word	0x20001128
   161c0:	00015c41 	.word	0x00015c41
   161c4:	00016561 	.word	0x00016561

000161c8 <RADIO_RxDoneHandler>:
   161c8:	b5f0      	push	{r4, r5, r6, r7, lr}
   161ca:	4b97      	ldr	r3, [pc, #604]	; (16428 <RADIO_RxDoneHandler+0x260>)
   161cc:	b085      	sub	sp, #20
   161ce:	881c      	ldrh	r4, [r3, #0]
   161d0:	881a      	ldrh	r2, [r3, #0]
   161d2:	06a4      	lsls	r4, r4, #26
   161d4:	0fe4      	lsrs	r4, r4, #31
   161d6:	b2e0      	uxtb	r0, r4
   161d8:	2801      	cmp	r0, #1
   161da:	d126      	bne.n	1622a <RADIO_RxDoneHandler+0x62>
   161dc:	4d93      	ldr	r5, [pc, #588]	; (1642c <RADIO_RxDoneHandler+0x264>)
   161de:	2120      	movs	r1, #32
   161e0:	002e      	movs	r6, r5
   161e2:	438a      	bics	r2, r1
   161e4:	801a      	strh	r2, [r3, #0]
   161e6:	3634      	adds	r6, #52	; 0x34
   161e8:	0002      	movs	r2, r0
   161ea:	7831      	ldrb	r1, [r6, #0]
   161ec:	4f90      	ldr	r7, [pc, #576]	; (16430 <RADIO_RxDoneHandler+0x268>)
   161ee:	47b8      	blx	r7
   161f0:	2200      	movs	r2, #0
   161f2:	7831      	ldrb	r1, [r6, #0]
   161f4:	0010      	movs	r0, r2
   161f6:	47b8      	blx	r7
   161f8:	4b8e      	ldr	r3, [pc, #568]	; (16434 <RADIO_RxDoneHandler+0x26c>)
   161fa:	4798      	blx	r3
   161fc:	4b8e      	ldr	r3, [pc, #568]	; (16438 <RADIO_RxDoneHandler+0x270>)
   161fe:	002a      	movs	r2, r5
   16200:	701c      	strb	r4, [r3, #0]
   16202:	2300      	movs	r3, #0
   16204:	322c      	adds	r2, #44	; 0x2c
   16206:	7013      	strb	r3, [r2, #0]
   16208:	002a      	movs	r2, r5
   1620a:	a901      	add	r1, sp, #4
   1620c:	3258      	adds	r2, #88	; 0x58
   1620e:	7013      	strb	r3, [r2, #0]
   16210:	700b      	strb	r3, [r1, #0]
   16212:	4b8a      	ldr	r3, [pc, #552]	; (1643c <RADIO_RxDoneHandler+0x274>)
   16214:	781b      	ldrb	r3, [r3, #0]
   16216:	071b      	lsls	r3, r3, #28
   16218:	d504      	bpl.n	16224 <RADIO_RxDoneHandler+0x5c>
   1621a:	692b      	ldr	r3, [r5, #16]
   1621c:	2008      	movs	r0, #8
   1621e:	2b00      	cmp	r3, #0
   16220:	d000      	beq.n	16224 <RADIO_RxDoneHandler+0x5c>
   16222:	e084      	b.n	1632e <RADIO_RxDoneHandler+0x166>
   16224:	2000      	movs	r0, #0
   16226:	b005      	add	sp, #20
   16228:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1622a:	0652      	lsls	r2, r2, #25
   1622c:	d402      	bmi.n	16234 <RADIO_RxDoneHandler+0x6c>
   1622e:	881a      	ldrh	r2, [r3, #0]
   16230:	0612      	lsls	r2, r2, #24
   16232:	d523      	bpl.n	1627c <RADIO_RxDoneHandler+0xb4>
   16234:	2140      	movs	r1, #64	; 0x40
   16236:	881a      	ldrh	r2, [r3, #0]
   16238:	4c7c      	ldr	r4, [pc, #496]	; (1642c <RADIO_RxDoneHandler+0x264>)
   1623a:	438a      	bics	r2, r1
   1623c:	801a      	strh	r2, [r3, #0]
   1623e:	881a      	ldrh	r2, [r3, #0]
   16240:	1849      	adds	r1, r1, r1
   16242:	438a      	bics	r2, r1
   16244:	801a      	strh	r2, [r3, #0]
   16246:	0023      	movs	r3, r4
   16248:	2200      	movs	r2, #0
   1624a:	3334      	adds	r3, #52	; 0x34
   1624c:	7819      	ldrb	r1, [r3, #0]
   1624e:	0010      	movs	r0, r2
   16250:	4b77      	ldr	r3, [pc, #476]	; (16430 <RADIO_RxDoneHandler+0x268>)
   16252:	4798      	blx	r3
   16254:	4b77      	ldr	r3, [pc, #476]	; (16434 <RADIO_RxDoneHandler+0x26c>)
   16256:	4798      	blx	r3
   16258:	2201      	movs	r2, #1
   1625a:	4b77      	ldr	r3, [pc, #476]	; (16438 <RADIO_RxDoneHandler+0x270>)
   1625c:	a901      	add	r1, sp, #4
   1625e:	701a      	strb	r2, [r3, #0]
   16260:	0022      	movs	r2, r4
   16262:	2300      	movs	r3, #0
   16264:	322c      	adds	r2, #44	; 0x2c
   16266:	7013      	strb	r3, [r2, #0]
   16268:	0022      	movs	r2, r4
   1626a:	3258      	adds	r2, #88	; 0x58
   1626c:	7013      	strb	r3, [r2, #0]
   1626e:	700b      	strb	r3, [r1, #0]
   16270:	4b72      	ldr	r3, [pc, #456]	; (1643c <RADIO_RxDoneHandler+0x274>)
   16272:	781b      	ldrb	r3, [r3, #0]
   16274:	071b      	lsls	r3, r3, #28
   16276:	d5d5      	bpl.n	16224 <RADIO_RxDoneHandler+0x5c>
   16278:	6923      	ldr	r3, [r4, #16]
   1627a:	e7cf      	b.n	1621c <RADIO_RxDoneHandler+0x54>
   1627c:	881a      	ldrh	r2, [r3, #0]
   1627e:	0792      	lsls	r2, r2, #30
   16280:	d571      	bpl.n	16366 <RADIO_RxDoneHandler+0x19e>
   16282:	2102      	movs	r1, #2
   16284:	881a      	ldrh	r2, [r3, #0]
   16286:	4d6e      	ldr	r5, [pc, #440]	; (16440 <RADIO_RxDoneHandler+0x278>)
   16288:	438a      	bics	r2, r1
   1628a:	801a      	strh	r2, [r3, #0]
   1628c:	2013      	movs	r0, #19
   1628e:	47a8      	blx	r5
   16290:	4c66      	ldr	r4, [pc, #408]	; (1642c <RADIO_RxDoneHandler+0x264>)
   16292:	2100      	movs	r1, #0
   16294:	0026      	movs	r6, r4
   16296:	362c      	adds	r6, #44	; 0x2c
   16298:	7030      	strb	r0, [r6, #0]
   1629a:	4b6a      	ldr	r3, [pc, #424]	; (16444 <RADIO_RxDoneHandler+0x27c>)
   1629c:	200d      	movs	r0, #13
   1629e:	4798      	blx	r3
   162a0:	7832      	ldrb	r2, [r6, #0]
   162a2:	4b69      	ldr	r3, [pc, #420]	; (16448 <RADIO_RxDoneHandler+0x280>)
   162a4:	b2d2      	uxtb	r2, r2
   162a6:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   162a8:	2000      	movs	r0, #0
   162aa:	4798      	blx	r3
   162ac:	2019      	movs	r0, #25
   162ae:	47a8      	blx	r5
   162b0:	0023      	movs	r3, r4
   162b2:	b240      	sxtb	r0, r0
   162b4:	3332      	adds	r3, #50	; 0x32
   162b6:	2800      	cmp	r0, #0
   162b8:	da3b      	bge.n	16332 <RADIO_RxDoneHandler+0x16a>
   162ba:	4240      	negs	r0, r0
   162bc:	1080      	asrs	r0, r0, #2
   162be:	4240      	negs	r0, r0
   162c0:	7018      	strb	r0, [r3, #0]
   162c2:	201a      	movs	r0, #26
   162c4:	47a8      	blx	r5
   162c6:	0023      	movs	r3, r4
   162c8:	3332      	adds	r3, #50	; 0x32
   162ca:	781b      	ldrb	r3, [r3, #0]
   162cc:	b202      	sxth	r2, r0
   162ce:	b25b      	sxtb	r3, r3
   162d0:	4d5e      	ldr	r5, [pc, #376]	; (1644c <RADIO_RxDoneHandler+0x284>)
   162d2:	2b00      	cmp	r3, #0
   162d4:	da36      	bge.n	16344 <RADIO_RxDoneHandler+0x17c>
   162d6:	6821      	ldr	r1, [r4, #0]
   162d8:	4e5d      	ldr	r6, [pc, #372]	; (16450 <RADIO_RxDoneHandler+0x288>)
   162da:	198e      	adds	r6, r1, r6
   162dc:	42ae      	cmp	r6, r5
   162de:	d82a      	bhi.n	16336 <RADIO_RxDoneHandler+0x16e>
   162e0:	3b9d      	subs	r3, #157	; 0x9d
   162e2:	181b      	adds	r3, r3, r0
   162e4:	1112      	asrs	r2, r2, #4
   162e6:	189b      	adds	r3, r3, r2
   162e8:	0022      	movs	r2, r4
   162ea:	3256      	adds	r2, #86	; 0x56
   162ec:	8013      	strh	r3, [r2, #0]
   162ee:	0023      	movs	r3, r4
   162f0:	2200      	movs	r2, #0
   162f2:	3334      	adds	r3, #52	; 0x34
   162f4:	7819      	ldrb	r1, [r3, #0]
   162f6:	0010      	movs	r0, r2
   162f8:	4b4d      	ldr	r3, [pc, #308]	; (16430 <RADIO_RxDoneHandler+0x268>)
   162fa:	4798      	blx	r3
   162fc:	4b4d      	ldr	r3, [pc, #308]	; (16434 <RADIO_RxDoneHandler+0x26c>)
   162fe:	4798      	blx	r3
   16300:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   16302:	a901      	add	r1, sp, #4
   16304:	604b      	str	r3, [r1, #4]
   16306:	0023      	movs	r3, r4
   16308:	332c      	adds	r3, #44	; 0x2c
   1630a:	781b      	ldrb	r3, [r3, #0]
   1630c:	2201      	movs	r2, #1
   1630e:	720b      	strb	r3, [r1, #8]
   16310:	2300      	movs	r3, #0
   16312:	700b      	strb	r3, [r1, #0]
   16314:	4b48      	ldr	r3, [pc, #288]	; (16438 <RADIO_RxDoneHandler+0x270>)
   16316:	701a      	strb	r2, [r3, #0]
   16318:	4b48      	ldr	r3, [pc, #288]	; (1643c <RADIO_RxDoneHandler+0x274>)
   1631a:	7818      	ldrb	r0, [r3, #0]
   1631c:	07c0      	lsls	r0, r0, #31
   1631e:	0fc0      	lsrs	r0, r0, #31
   16320:	4290      	cmp	r0, r2
   16322:	d000      	beq.n	16326 <RADIO_RxDoneHandler+0x15e>
   16324:	e77e      	b.n	16224 <RADIO_RxDoneHandler+0x5c>
   16326:	6923      	ldr	r3, [r4, #16]
   16328:	2b00      	cmp	r3, #0
   1632a:	d100      	bne.n	1632e <RADIO_RxDoneHandler+0x166>
   1632c:	e77a      	b.n	16224 <RADIO_RxDoneHandler+0x5c>
   1632e:	4798      	blx	r3
   16330:	e778      	b.n	16224 <RADIO_RxDoneHandler+0x5c>
   16332:	1080      	asrs	r0, r0, #2
   16334:	e7c4      	b.n	162c0 <RADIO_RxDoneHandler+0xf8>
   16336:	4d47      	ldr	r5, [pc, #284]	; (16454 <RADIO_RxDoneHandler+0x28c>)
   16338:	1949      	adds	r1, r1, r5
   1633a:	4d47      	ldr	r5, [pc, #284]	; (16458 <RADIO_RxDoneHandler+0x290>)
   1633c:	42a9      	cmp	r1, r5
   1633e:	d8d6      	bhi.n	162ee <RADIO_RxDoneHandler+0x126>
   16340:	3ba4      	subs	r3, #164	; 0xa4
   16342:	e7ce      	b.n	162e2 <RADIO_RxDoneHandler+0x11a>
   16344:	6823      	ldr	r3, [r4, #0]
   16346:	4942      	ldr	r1, [pc, #264]	; (16450 <RADIO_RxDoneHandler+0x288>)
   16348:	1859      	adds	r1, r3, r1
   1634a:	42a9      	cmp	r1, r5
   1634c:	d802      	bhi.n	16354 <RADIO_RxDoneHandler+0x18c>
   1634e:	0003      	movs	r3, r0
   16350:	3b9d      	subs	r3, #157	; 0x9d
   16352:	e7c7      	b.n	162e4 <RADIO_RxDoneHandler+0x11c>
   16354:	493f      	ldr	r1, [pc, #252]	; (16454 <RADIO_RxDoneHandler+0x28c>)
   16356:	185b      	adds	r3, r3, r1
   16358:	493f      	ldr	r1, [pc, #252]	; (16458 <RADIO_RxDoneHandler+0x290>)
   1635a:	428b      	cmp	r3, r1
   1635c:	d8c7      	bhi.n	162ee <RADIO_RxDoneHandler+0x126>
   1635e:	38a4      	subs	r0, #164	; 0xa4
   16360:	1113      	asrs	r3, r2, #4
   16362:	18c3      	adds	r3, r0, r3
   16364:	e7c0      	b.n	162e8 <RADIO_RxDoneHandler+0x120>
   16366:	881a      	ldrh	r2, [r3, #0]
   16368:	0712      	lsls	r2, r2, #28
   1636a:	0fd5      	lsrs	r5, r2, #31
   1636c:	2a00      	cmp	r2, #0
   1636e:	da27      	bge.n	163c0 <RADIO_RxDoneHandler+0x1f8>
   16370:	2108      	movs	r1, #8
   16372:	881a      	ldrh	r2, [r3, #0]
   16374:	4c2d      	ldr	r4, [pc, #180]	; (1642c <RADIO_RxDoneHandler+0x264>)
   16376:	438a      	bics	r2, r1
   16378:	801a      	strh	r2, [r3, #0]
   1637a:	0023      	movs	r3, r4
   1637c:	2280      	movs	r2, #128	; 0x80
   1637e:	3332      	adds	r3, #50	; 0x32
   16380:	701a      	strb	r2, [r3, #0]
   16382:	0023      	movs	r3, r4
   16384:	2200      	movs	r2, #0
   16386:	3334      	adds	r3, #52	; 0x34
   16388:	7819      	ldrb	r1, [r3, #0]
   1638a:	0010      	movs	r0, r2
   1638c:	4b28      	ldr	r3, [pc, #160]	; (16430 <RADIO_RxDoneHandler+0x268>)
   1638e:	4798      	blx	r3
   16390:	4b28      	ldr	r3, [pc, #160]	; (16434 <RADIO_RxDoneHandler+0x26c>)
   16392:	4798      	blx	r3
   16394:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   16396:	a901      	add	r1, sp, #4
   16398:	604b      	str	r3, [r1, #4]
   1639a:	0023      	movs	r3, r4
   1639c:	332c      	adds	r3, #44	; 0x2c
   1639e:	781b      	ldrb	r3, [r3, #0]
   163a0:	0022      	movs	r2, r4
   163a2:	720b      	strb	r3, [r1, #8]
   163a4:	2300      	movs	r3, #0
   163a6:	3258      	adds	r2, #88	; 0x58
   163a8:	7013      	strb	r3, [r2, #0]
   163aa:	700b      	strb	r3, [r1, #0]
   163ac:	4b22      	ldr	r3, [pc, #136]	; (16438 <RADIO_RxDoneHandler+0x270>)
   163ae:	701d      	strb	r5, [r3, #0]
   163b0:	4b22      	ldr	r3, [pc, #136]	; (1643c <RADIO_RxDoneHandler+0x274>)
   163b2:	7818      	ldrb	r0, [r3, #0]
   163b4:	07c0      	lsls	r0, r0, #31
   163b6:	0fc0      	lsrs	r0, r0, #31
   163b8:	2801      	cmp	r0, #1
   163ba:	d000      	beq.n	163be <RADIO_RxDoneHandler+0x1f6>
   163bc:	e732      	b.n	16224 <RADIO_RxDoneHandler+0x5c>
   163be:	e7b2      	b.n	16326 <RADIO_RxDoneHandler+0x15e>
   163c0:	881a      	ldrh	r2, [r3, #0]
   163c2:	05d2      	lsls	r2, r2, #23
   163c4:	0fd5      	lsrs	r5, r2, #31
   163c6:	2a00      	cmp	r2, #0
   163c8:	db00      	blt.n	163cc <RADIO_RxDoneHandler+0x204>
   163ca:	e72b      	b.n	16224 <RADIO_RxDoneHandler+0x5c>
   163cc:	4c17      	ldr	r4, [pc, #92]	; (1642c <RADIO_RxDoneHandler+0x264>)
   163ce:	881a      	ldrh	r2, [r3, #0]
   163d0:	0026      	movs	r6, r4
   163d2:	4922      	ldr	r1, [pc, #136]	; (1645c <RADIO_RxDoneHandler+0x294>)
   163d4:	362c      	adds	r6, #44	; 0x2c
   163d6:	400a      	ands	r2, r1
   163d8:	801a      	strh	r2, [r3, #0]
   163da:	7832      	ldrb	r2, [r6, #0]
   163dc:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   163de:	b2d2      	uxtb	r2, r2
   163e0:	2000      	movs	r0, #0
   163e2:	4b19      	ldr	r3, [pc, #100]	; (16448 <RADIO_RxDoneHandler+0x280>)
   163e4:	4798      	blx	r3
   163e6:	0023      	movs	r3, r4
   163e8:	2200      	movs	r2, #0
   163ea:	3334      	adds	r3, #52	; 0x34
   163ec:	7819      	ldrb	r1, [r3, #0]
   163ee:	0010      	movs	r0, r2
   163f0:	4b0f      	ldr	r3, [pc, #60]	; (16430 <RADIO_RxDoneHandler+0x268>)
   163f2:	4798      	blx	r3
   163f4:	4b0f      	ldr	r3, [pc, #60]	; (16434 <RADIO_RxDoneHandler+0x26c>)
   163f6:	4798      	blx	r3
   163f8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   163fa:	a901      	add	r1, sp, #4
   163fc:	604b      	str	r3, [r1, #4]
   163fe:	7833      	ldrb	r3, [r6, #0]
   16400:	0022      	movs	r2, r4
   16402:	720b      	strb	r3, [r1, #8]
   16404:	2300      	movs	r3, #0
   16406:	3258      	adds	r2, #88	; 0x58
   16408:	7013      	strb	r3, [r2, #0]
   1640a:	700b      	strb	r3, [r1, #0]
   1640c:	4b0a      	ldr	r3, [pc, #40]	; (16438 <RADIO_RxDoneHandler+0x270>)
   1640e:	701d      	strb	r5, [r3, #0]
   16410:	4b0a      	ldr	r3, [pc, #40]	; (1643c <RADIO_RxDoneHandler+0x274>)
   16412:	781b      	ldrb	r3, [r3, #0]
   16414:	06db      	lsls	r3, r3, #27
   16416:	d400      	bmi.n	1641a <RADIO_RxDoneHandler+0x252>
   16418:	e704      	b.n	16224 <RADIO_RxDoneHandler+0x5c>
   1641a:	6923      	ldr	r3, [r4, #16]
   1641c:	2b00      	cmp	r3, #0
   1641e:	d100      	bne.n	16422 <RADIO_RxDoneHandler+0x25a>
   16420:	e700      	b.n	16224 <RADIO_RxDoneHandler+0x5c>
   16422:	2010      	movs	r0, #16
   16424:	e783      	b.n	1632e <RADIO_RxDoneHandler+0x166>
   16426:	46c0      	nop			; (mov r8, r8)
   16428:	20002fbc 	.word	0x20002fbc
   1642c:	20002980 	.word	0x20002980
   16430:	0000f4d9 	.word	0x0000f4d9
   16434:	00015c41 	.word	0x00015c41
   16438:	20002fbf 	.word	0x20002fbf
   1643c:	20002fbe 	.word	0x20002fbe
   16440:	0000812d 	.word	0x0000812d
   16444:	00008105 	.word	0x00008105
   16448:	00008199 	.word	0x00008199
   1644c:	096ae380 	.word	0x096ae380
   16450:	cc9eec80 	.word	0xcc9eec80
   16454:	e78fe580 	.word	0xe78fe580
   16458:	06dac2c0 	.word	0x06dac2c0
   1645c:	fffffeff 	.word	0xfffffeff

00016460 <Radio_LBTScanTimeout>:
   16460:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   16462:	4c1c      	ldr	r4, [pc, #112]	; (164d4 <Radio_LBTScanTimeout+0x74>)
   16464:	0025      	movs	r5, r4
   16466:	0023      	movs	r3, r4
   16468:	354f      	adds	r5, #79	; 0x4f
   1646a:	7829      	ldrb	r1, [r5, #0]
   1646c:	3340      	adds	r3, #64	; 0x40
   1646e:	3101      	adds	r1, #1
   16470:	b2c9      	uxtb	r1, r1
   16472:	7029      	strb	r1, [r5, #0]
   16474:	781b      	ldrb	r3, [r3, #0]
   16476:	428b      	cmp	r3, r1
   16478:	d315      	bcc.n	164a6 <Radio_LBTScanTimeout+0x46>
   1647a:	260e      	movs	r6, #14
   1647c:	446e      	add	r6, sp
   1647e:	4b16      	ldr	r3, [pc, #88]	; (164d8 <Radio_LBTScanTimeout+0x78>)
   16480:	0030      	movs	r0, r6
   16482:	4798      	blx	r3
   16484:	2300      	movs	r3, #0
   16486:	5ef2      	ldrsh	r2, [r6, r3]
   16488:	782b      	ldrb	r3, [r5, #0]
   1648a:	4353      	muls	r3, r2
   1648c:	6c62      	ldr	r2, [r4, #68]	; 0x44
   1648e:	189b      	adds	r3, r3, r2
   16490:	6463      	str	r3, [r4, #68]	; 0x44
   16492:	0023      	movs	r3, r4
   16494:	2200      	movs	r2, #0
   16496:	3350      	adds	r3, #80	; 0x50
   16498:	7818      	ldrb	r0, [r3, #0]
   1649a:	9200      	str	r2, [sp, #0]
   1649c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   1649e:	4b0f      	ldr	r3, [pc, #60]	; (164dc <Radio_LBTScanTimeout+0x7c>)
   164a0:	4c0f      	ldr	r4, [pc, #60]	; (164e0 <Radio_LBTScanTimeout+0x80>)
   164a2:	47a0      	blx	r4
   164a4:	bd7f      	pop	{r0, r1, r2, r3, r4, r5, r6, pc}
   164a6:	2380      	movs	r3, #128	; 0x80
   164a8:	4a0e      	ldr	r2, [pc, #56]	; (164e4 <Radio_LBTScanTimeout+0x84>)
   164aa:	009b      	lsls	r3, r3, #2
   164ac:	8810      	ldrh	r0, [r2, #0]
   164ae:	4303      	orrs	r3, r0
   164b0:	8013      	strh	r3, [r2, #0]
   164b2:	6c63      	ldr	r3, [r4, #68]	; 0x44
   164b4:	0058      	lsls	r0, r3, #1
   164b6:	1e4b      	subs	r3, r1, #1
   164b8:	4359      	muls	r1, r3
   164ba:	4b0b      	ldr	r3, [pc, #44]	; (164e8 <Radio_LBTScanTimeout+0x88>)
   164bc:	b289      	uxth	r1, r1
   164be:	4798      	blx	r3
   164c0:	0023      	movs	r3, r4
   164c2:	334c      	adds	r3, #76	; 0x4c
   164c4:	8018      	strh	r0, [r3, #0]
   164c6:	2300      	movs	r3, #0
   164c8:	2001      	movs	r0, #1
   164ca:	702b      	strb	r3, [r5, #0]
   164cc:	6463      	str	r3, [r4, #68]	; 0x44
   164ce:	4b07      	ldr	r3, [pc, #28]	; (164ec <Radio_LBTScanTimeout+0x8c>)
   164d0:	4798      	blx	r3
   164d2:	e7e7      	b.n	164a4 <Radio_LBTScanTimeout+0x44>
   164d4:	20002980 	.word	0x20002980
   164d8:	0000f69d 	.word	0x0000f69d
   164dc:	00016461 	.word	0x00016461
   164e0:	0000ee0d 	.word	0x0000ee0d
   164e4:	20002fbc 	.word	0x20002fbc
   164e8:	00016739 	.word	0x00016739
   164ec:	000154a9 	.word	0x000154a9

000164f0 <RADIO_ScanHandler>:
   164f0:	b573      	push	{r0, r1, r4, r5, r6, lr}
   164f2:	4b12      	ldr	r3, [pc, #72]	; (1653c <RADIO_ScanHandler+0x4c>)
   164f4:	4798      	blx	r3
   164f6:	2000      	movs	r0, #0
   164f8:	4b11      	ldr	r3, [pc, #68]	; (16540 <RADIO_ScanHandler+0x50>)
   164fa:	4798      	blx	r3
   164fc:	4d11      	ldr	r5, [pc, #68]	; (16544 <RADIO_ScanHandler+0x54>)
   164fe:	4b12      	ldr	r3, [pc, #72]	; (16548 <RADIO_ScanHandler+0x58>)
   16500:	6828      	ldr	r0, [r5, #0]
   16502:	2400      	movs	r4, #0
   16504:	4798      	blx	r3
   16506:	002b      	movs	r3, r5
   16508:	4e10      	ldr	r6, [pc, #64]	; (1654c <RADIO_ScanHandler+0x5c>)
   1650a:	334c      	adds	r3, #76	; 0x4c
   1650c:	2201      	movs	r2, #1
   1650e:	0021      	movs	r1, r4
   16510:	0020      	movs	r0, r4
   16512:	801c      	strh	r4, [r3, #0]
   16514:	47b0      	blx	r6
   16516:	4b0e      	ldr	r3, [pc, #56]	; (16550 <RADIO_ScanHandler+0x60>)
   16518:	2109      	movs	r1, #9
   1651a:	2012      	movs	r0, #18
   1651c:	4798      	blx	r3
   1651e:	3550      	adds	r5, #80	; 0x50
   16520:	0022      	movs	r2, r4
   16522:	0021      	movs	r1, r4
   16524:	2005      	movs	r0, #5
   16526:	47b0      	blx	r6
   16528:	7828      	ldrb	r0, [r5, #0]
   1652a:	4b0a      	ldr	r3, [pc, #40]	; (16554 <RADIO_ScanHandler+0x64>)
   1652c:	4d0a      	ldr	r5, [pc, #40]	; (16558 <RADIO_ScanHandler+0x68>)
   1652e:	9400      	str	r4, [sp, #0]
   16530:	0022      	movs	r2, r4
   16532:	490a      	ldr	r1, [pc, #40]	; (1655c <RADIO_ScanHandler+0x6c>)
   16534:	47a8      	blx	r5
   16536:	0020      	movs	r0, r4
   16538:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
   1653a:	46c0      	nop			; (mov r8, r8)
   1653c:	00015c0d 	.word	0x00015c0d
   16540:	0001575d 	.word	0x0001575d
   16544:	20002980 	.word	0x20002980
   16548:	00014ea1 	.word	0x00014ea1
   1654c:	0000f4d9 	.word	0x0000f4d9
   16550:	00008105 	.word	0x00008105
   16554:	00016461 	.word	0x00016461
   16558:	0000ee0d 	.word	0x0000ee0d
   1655c:	00002328 	.word	0x00002328

00016560 <radioScanDoneHandler>:
   16560:	b530      	push	{r4, r5, lr}
   16562:	4a18      	ldr	r2, [pc, #96]	; (165c4 <radioScanDoneHandler+0x64>)
   16564:	4918      	ldr	r1, [pc, #96]	; (165c8 <radioScanDoneHandler+0x68>)
   16566:	8813      	ldrh	r3, [r2, #0]
   16568:	b085      	sub	sp, #20
   1656a:	400b      	ands	r3, r1
   1656c:	8013      	strh	r3, [r2, #0]
   1656e:	2200      	movs	r2, #0
   16570:	4b16      	ldr	r3, [pc, #88]	; (165cc <radioScanDoneHandler+0x6c>)
   16572:	0011      	movs	r1, r2
   16574:	0010      	movs	r0, r2
   16576:	4798      	blx	r3
   16578:	2000      	movs	r0, #0
   1657a:	4b15      	ldr	r3, [pc, #84]	; (165d0 <radioScanDoneHandler+0x70>)
   1657c:	4798      	blx	r3
   1657e:	4b15      	ldr	r3, [pc, #84]	; (165d4 <radioScanDoneHandler+0x74>)
   16580:	4798      	blx	r3
   16582:	4c15      	ldr	r4, [pc, #84]	; (165d8 <radioScanDoneHandler+0x78>)
   16584:	0023      	movs	r3, r4
   16586:	334c      	adds	r3, #76	; 0x4c
   16588:	2100      	movs	r1, #0
   1658a:	5e59      	ldrsh	r1, [r3, r1]
   1658c:	233e      	movs	r3, #62	; 0x3e
   1658e:	5ee2      	ldrsh	r2, [r4, r3]
   16590:	4b12      	ldr	r3, [pc, #72]	; (165dc <radioScanDoneHandler+0x7c>)
   16592:	4291      	cmp	r1, r2
   16594:	da06      	bge.n	165a4 <radioScanDoneHandler+0x44>
   16596:	2002      	movs	r0, #2
   16598:	4798      	blx	r3
   1659a:	4b11      	ldr	r3, [pc, #68]	; (165e0 <radioScanDoneHandler+0x80>)
   1659c:	4798      	blx	r3
   1659e:	2000      	movs	r0, #0
   165a0:	b005      	add	sp, #20
   165a2:	bd30      	pop	{r4, r5, pc}
   165a4:	2207      	movs	r2, #7
   165a6:	ad01      	add	r5, sp, #4
   165a8:	2001      	movs	r0, #1
   165aa:	702a      	strb	r2, [r5, #0]
   165ac:	4798      	blx	r3
   165ae:	4b0d      	ldr	r3, [pc, #52]	; (165e4 <radioScanDoneHandler+0x84>)
   165b0:	781b      	ldrb	r3, [r3, #0]
   165b2:	079b      	lsls	r3, r3, #30
   165b4:	d5f3      	bpl.n	1659e <radioScanDoneHandler+0x3e>
   165b6:	6923      	ldr	r3, [r4, #16]
   165b8:	2b00      	cmp	r3, #0
   165ba:	d0f0      	beq.n	1659e <radioScanDoneHandler+0x3e>
   165bc:	0029      	movs	r1, r5
   165be:	2002      	movs	r0, #2
   165c0:	4798      	blx	r3
   165c2:	e7ec      	b.n	1659e <radioScanDoneHandler+0x3e>
   165c4:	20002fbc 	.word	0x20002fbc
   165c8:	fffffdff 	.word	0xfffffdff
   165cc:	0000f4d9 	.word	0x0000f4d9
   165d0:	00015885 	.word	0x00015885
   165d4:	00015c41 	.word	0x00015c41
   165d8:	20002980 	.word	0x20002980
   165dc:	00015555 	.word	0x00015555
   165e0:	00015f0d 	.word	0x00015f0d
   165e4:	20002fbe 	.word	0x20002fbe

000165e8 <__gnu_thumb1_case_sqi>:
   165e8:	b402      	push	{r1}
   165ea:	4671      	mov	r1, lr
   165ec:	0849      	lsrs	r1, r1, #1
   165ee:	0049      	lsls	r1, r1, #1
   165f0:	5609      	ldrsb	r1, [r1, r0]
   165f2:	0049      	lsls	r1, r1, #1
   165f4:	448e      	add	lr, r1
   165f6:	bc02      	pop	{r1}
   165f8:	4770      	bx	lr
   165fa:	46c0      	nop			; (mov r8, r8)

000165fc <__gnu_thumb1_case_uqi>:
   165fc:	b402      	push	{r1}
   165fe:	4671      	mov	r1, lr
   16600:	0849      	lsrs	r1, r1, #1
   16602:	0049      	lsls	r1, r1, #1
   16604:	5c09      	ldrb	r1, [r1, r0]
   16606:	0049      	lsls	r1, r1, #1
   16608:	448e      	add	lr, r1
   1660a:	bc02      	pop	{r1}
   1660c:	4770      	bx	lr
   1660e:	46c0      	nop			; (mov r8, r8)

00016610 <__gnu_thumb1_case_uhi>:
   16610:	b403      	push	{r0, r1}
   16612:	4671      	mov	r1, lr
   16614:	0849      	lsrs	r1, r1, #1
   16616:	0040      	lsls	r0, r0, #1
   16618:	0049      	lsls	r1, r1, #1
   1661a:	5a09      	ldrh	r1, [r1, r0]
   1661c:	0049      	lsls	r1, r1, #1
   1661e:	448e      	add	lr, r1
   16620:	bc03      	pop	{r0, r1}
   16622:	4770      	bx	lr

00016624 <__udivsi3>:
   16624:	2200      	movs	r2, #0
   16626:	0843      	lsrs	r3, r0, #1
   16628:	428b      	cmp	r3, r1
   1662a:	d374      	bcc.n	16716 <__udivsi3+0xf2>
   1662c:	0903      	lsrs	r3, r0, #4
   1662e:	428b      	cmp	r3, r1
   16630:	d35f      	bcc.n	166f2 <__udivsi3+0xce>
   16632:	0a03      	lsrs	r3, r0, #8
   16634:	428b      	cmp	r3, r1
   16636:	d344      	bcc.n	166c2 <__udivsi3+0x9e>
   16638:	0b03      	lsrs	r3, r0, #12
   1663a:	428b      	cmp	r3, r1
   1663c:	d328      	bcc.n	16690 <__udivsi3+0x6c>
   1663e:	0c03      	lsrs	r3, r0, #16
   16640:	428b      	cmp	r3, r1
   16642:	d30d      	bcc.n	16660 <__udivsi3+0x3c>
   16644:	22ff      	movs	r2, #255	; 0xff
   16646:	0209      	lsls	r1, r1, #8
   16648:	ba12      	rev	r2, r2
   1664a:	0c03      	lsrs	r3, r0, #16
   1664c:	428b      	cmp	r3, r1
   1664e:	d302      	bcc.n	16656 <__udivsi3+0x32>
   16650:	1212      	asrs	r2, r2, #8
   16652:	0209      	lsls	r1, r1, #8
   16654:	d065      	beq.n	16722 <__udivsi3+0xfe>
   16656:	0b03      	lsrs	r3, r0, #12
   16658:	428b      	cmp	r3, r1
   1665a:	d319      	bcc.n	16690 <__udivsi3+0x6c>
   1665c:	e000      	b.n	16660 <__udivsi3+0x3c>
   1665e:	0a09      	lsrs	r1, r1, #8
   16660:	0bc3      	lsrs	r3, r0, #15
   16662:	428b      	cmp	r3, r1
   16664:	d301      	bcc.n	1666a <__udivsi3+0x46>
   16666:	03cb      	lsls	r3, r1, #15
   16668:	1ac0      	subs	r0, r0, r3
   1666a:	4152      	adcs	r2, r2
   1666c:	0b83      	lsrs	r3, r0, #14
   1666e:	428b      	cmp	r3, r1
   16670:	d301      	bcc.n	16676 <__udivsi3+0x52>
   16672:	038b      	lsls	r3, r1, #14
   16674:	1ac0      	subs	r0, r0, r3
   16676:	4152      	adcs	r2, r2
   16678:	0b43      	lsrs	r3, r0, #13
   1667a:	428b      	cmp	r3, r1
   1667c:	d301      	bcc.n	16682 <__udivsi3+0x5e>
   1667e:	034b      	lsls	r3, r1, #13
   16680:	1ac0      	subs	r0, r0, r3
   16682:	4152      	adcs	r2, r2
   16684:	0b03      	lsrs	r3, r0, #12
   16686:	428b      	cmp	r3, r1
   16688:	d301      	bcc.n	1668e <__udivsi3+0x6a>
   1668a:	030b      	lsls	r3, r1, #12
   1668c:	1ac0      	subs	r0, r0, r3
   1668e:	4152      	adcs	r2, r2
   16690:	0ac3      	lsrs	r3, r0, #11
   16692:	428b      	cmp	r3, r1
   16694:	d301      	bcc.n	1669a <__udivsi3+0x76>
   16696:	02cb      	lsls	r3, r1, #11
   16698:	1ac0      	subs	r0, r0, r3
   1669a:	4152      	adcs	r2, r2
   1669c:	0a83      	lsrs	r3, r0, #10
   1669e:	428b      	cmp	r3, r1
   166a0:	d301      	bcc.n	166a6 <__udivsi3+0x82>
   166a2:	028b      	lsls	r3, r1, #10
   166a4:	1ac0      	subs	r0, r0, r3
   166a6:	4152      	adcs	r2, r2
   166a8:	0a43      	lsrs	r3, r0, #9
   166aa:	428b      	cmp	r3, r1
   166ac:	d301      	bcc.n	166b2 <__udivsi3+0x8e>
   166ae:	024b      	lsls	r3, r1, #9
   166b0:	1ac0      	subs	r0, r0, r3
   166b2:	4152      	adcs	r2, r2
   166b4:	0a03      	lsrs	r3, r0, #8
   166b6:	428b      	cmp	r3, r1
   166b8:	d301      	bcc.n	166be <__udivsi3+0x9a>
   166ba:	020b      	lsls	r3, r1, #8
   166bc:	1ac0      	subs	r0, r0, r3
   166be:	4152      	adcs	r2, r2
   166c0:	d2cd      	bcs.n	1665e <__udivsi3+0x3a>
   166c2:	09c3      	lsrs	r3, r0, #7
   166c4:	428b      	cmp	r3, r1
   166c6:	d301      	bcc.n	166cc <__udivsi3+0xa8>
   166c8:	01cb      	lsls	r3, r1, #7
   166ca:	1ac0      	subs	r0, r0, r3
   166cc:	4152      	adcs	r2, r2
   166ce:	0983      	lsrs	r3, r0, #6
   166d0:	428b      	cmp	r3, r1
   166d2:	d301      	bcc.n	166d8 <__udivsi3+0xb4>
   166d4:	018b      	lsls	r3, r1, #6
   166d6:	1ac0      	subs	r0, r0, r3
   166d8:	4152      	adcs	r2, r2
   166da:	0943      	lsrs	r3, r0, #5
   166dc:	428b      	cmp	r3, r1
   166de:	d301      	bcc.n	166e4 <__udivsi3+0xc0>
   166e0:	014b      	lsls	r3, r1, #5
   166e2:	1ac0      	subs	r0, r0, r3
   166e4:	4152      	adcs	r2, r2
   166e6:	0903      	lsrs	r3, r0, #4
   166e8:	428b      	cmp	r3, r1
   166ea:	d301      	bcc.n	166f0 <__udivsi3+0xcc>
   166ec:	010b      	lsls	r3, r1, #4
   166ee:	1ac0      	subs	r0, r0, r3
   166f0:	4152      	adcs	r2, r2
   166f2:	08c3      	lsrs	r3, r0, #3
   166f4:	428b      	cmp	r3, r1
   166f6:	d301      	bcc.n	166fc <__udivsi3+0xd8>
   166f8:	00cb      	lsls	r3, r1, #3
   166fa:	1ac0      	subs	r0, r0, r3
   166fc:	4152      	adcs	r2, r2
   166fe:	0883      	lsrs	r3, r0, #2
   16700:	428b      	cmp	r3, r1
   16702:	d301      	bcc.n	16708 <__udivsi3+0xe4>
   16704:	008b      	lsls	r3, r1, #2
   16706:	1ac0      	subs	r0, r0, r3
   16708:	4152      	adcs	r2, r2
   1670a:	0843      	lsrs	r3, r0, #1
   1670c:	428b      	cmp	r3, r1
   1670e:	d301      	bcc.n	16714 <__udivsi3+0xf0>
   16710:	004b      	lsls	r3, r1, #1
   16712:	1ac0      	subs	r0, r0, r3
   16714:	4152      	adcs	r2, r2
   16716:	1a41      	subs	r1, r0, r1
   16718:	d200      	bcs.n	1671c <__udivsi3+0xf8>
   1671a:	4601      	mov	r1, r0
   1671c:	4152      	adcs	r2, r2
   1671e:	4610      	mov	r0, r2
   16720:	4770      	bx	lr
   16722:	e7ff      	b.n	16724 <__udivsi3+0x100>
   16724:	b501      	push	{r0, lr}
   16726:	2000      	movs	r0, #0
   16728:	f000 f8f0 	bl	1690c <__aeabi_idiv0>
   1672c:	bd02      	pop	{r1, pc}
   1672e:	46c0      	nop			; (mov r8, r8)

00016730 <__aeabi_uidivmod>:
   16730:	2900      	cmp	r1, #0
   16732:	d0f7      	beq.n	16724 <__udivsi3+0x100>
   16734:	e776      	b.n	16624 <__udivsi3>
   16736:	4770      	bx	lr

00016738 <__divsi3>:
   16738:	4603      	mov	r3, r0
   1673a:	430b      	orrs	r3, r1
   1673c:	d47f      	bmi.n	1683e <__divsi3+0x106>
   1673e:	2200      	movs	r2, #0
   16740:	0843      	lsrs	r3, r0, #1
   16742:	428b      	cmp	r3, r1
   16744:	d374      	bcc.n	16830 <__divsi3+0xf8>
   16746:	0903      	lsrs	r3, r0, #4
   16748:	428b      	cmp	r3, r1
   1674a:	d35f      	bcc.n	1680c <__divsi3+0xd4>
   1674c:	0a03      	lsrs	r3, r0, #8
   1674e:	428b      	cmp	r3, r1
   16750:	d344      	bcc.n	167dc <__divsi3+0xa4>
   16752:	0b03      	lsrs	r3, r0, #12
   16754:	428b      	cmp	r3, r1
   16756:	d328      	bcc.n	167aa <__divsi3+0x72>
   16758:	0c03      	lsrs	r3, r0, #16
   1675a:	428b      	cmp	r3, r1
   1675c:	d30d      	bcc.n	1677a <__divsi3+0x42>
   1675e:	22ff      	movs	r2, #255	; 0xff
   16760:	0209      	lsls	r1, r1, #8
   16762:	ba12      	rev	r2, r2
   16764:	0c03      	lsrs	r3, r0, #16
   16766:	428b      	cmp	r3, r1
   16768:	d302      	bcc.n	16770 <__divsi3+0x38>
   1676a:	1212      	asrs	r2, r2, #8
   1676c:	0209      	lsls	r1, r1, #8
   1676e:	d065      	beq.n	1683c <__divsi3+0x104>
   16770:	0b03      	lsrs	r3, r0, #12
   16772:	428b      	cmp	r3, r1
   16774:	d319      	bcc.n	167aa <__divsi3+0x72>
   16776:	e000      	b.n	1677a <__divsi3+0x42>
   16778:	0a09      	lsrs	r1, r1, #8
   1677a:	0bc3      	lsrs	r3, r0, #15
   1677c:	428b      	cmp	r3, r1
   1677e:	d301      	bcc.n	16784 <__divsi3+0x4c>
   16780:	03cb      	lsls	r3, r1, #15
   16782:	1ac0      	subs	r0, r0, r3
   16784:	4152      	adcs	r2, r2
   16786:	0b83      	lsrs	r3, r0, #14
   16788:	428b      	cmp	r3, r1
   1678a:	d301      	bcc.n	16790 <__divsi3+0x58>
   1678c:	038b      	lsls	r3, r1, #14
   1678e:	1ac0      	subs	r0, r0, r3
   16790:	4152      	adcs	r2, r2
   16792:	0b43      	lsrs	r3, r0, #13
   16794:	428b      	cmp	r3, r1
   16796:	d301      	bcc.n	1679c <__divsi3+0x64>
   16798:	034b      	lsls	r3, r1, #13
   1679a:	1ac0      	subs	r0, r0, r3
   1679c:	4152      	adcs	r2, r2
   1679e:	0b03      	lsrs	r3, r0, #12
   167a0:	428b      	cmp	r3, r1
   167a2:	d301      	bcc.n	167a8 <__divsi3+0x70>
   167a4:	030b      	lsls	r3, r1, #12
   167a6:	1ac0      	subs	r0, r0, r3
   167a8:	4152      	adcs	r2, r2
   167aa:	0ac3      	lsrs	r3, r0, #11
   167ac:	428b      	cmp	r3, r1
   167ae:	d301      	bcc.n	167b4 <__divsi3+0x7c>
   167b0:	02cb      	lsls	r3, r1, #11
   167b2:	1ac0      	subs	r0, r0, r3
   167b4:	4152      	adcs	r2, r2
   167b6:	0a83      	lsrs	r3, r0, #10
   167b8:	428b      	cmp	r3, r1
   167ba:	d301      	bcc.n	167c0 <__divsi3+0x88>
   167bc:	028b      	lsls	r3, r1, #10
   167be:	1ac0      	subs	r0, r0, r3
   167c0:	4152      	adcs	r2, r2
   167c2:	0a43      	lsrs	r3, r0, #9
   167c4:	428b      	cmp	r3, r1
   167c6:	d301      	bcc.n	167cc <__divsi3+0x94>
   167c8:	024b      	lsls	r3, r1, #9
   167ca:	1ac0      	subs	r0, r0, r3
   167cc:	4152      	adcs	r2, r2
   167ce:	0a03      	lsrs	r3, r0, #8
   167d0:	428b      	cmp	r3, r1
   167d2:	d301      	bcc.n	167d8 <__divsi3+0xa0>
   167d4:	020b      	lsls	r3, r1, #8
   167d6:	1ac0      	subs	r0, r0, r3
   167d8:	4152      	adcs	r2, r2
   167da:	d2cd      	bcs.n	16778 <__divsi3+0x40>
   167dc:	09c3      	lsrs	r3, r0, #7
   167de:	428b      	cmp	r3, r1
   167e0:	d301      	bcc.n	167e6 <__divsi3+0xae>
   167e2:	01cb      	lsls	r3, r1, #7
   167e4:	1ac0      	subs	r0, r0, r3
   167e6:	4152      	adcs	r2, r2
   167e8:	0983      	lsrs	r3, r0, #6
   167ea:	428b      	cmp	r3, r1
   167ec:	d301      	bcc.n	167f2 <__divsi3+0xba>
   167ee:	018b      	lsls	r3, r1, #6
   167f0:	1ac0      	subs	r0, r0, r3
   167f2:	4152      	adcs	r2, r2
   167f4:	0943      	lsrs	r3, r0, #5
   167f6:	428b      	cmp	r3, r1
   167f8:	d301      	bcc.n	167fe <__divsi3+0xc6>
   167fa:	014b      	lsls	r3, r1, #5
   167fc:	1ac0      	subs	r0, r0, r3
   167fe:	4152      	adcs	r2, r2
   16800:	0903      	lsrs	r3, r0, #4
   16802:	428b      	cmp	r3, r1
   16804:	d301      	bcc.n	1680a <__divsi3+0xd2>
   16806:	010b      	lsls	r3, r1, #4
   16808:	1ac0      	subs	r0, r0, r3
   1680a:	4152      	adcs	r2, r2
   1680c:	08c3      	lsrs	r3, r0, #3
   1680e:	428b      	cmp	r3, r1
   16810:	d301      	bcc.n	16816 <__divsi3+0xde>
   16812:	00cb      	lsls	r3, r1, #3
   16814:	1ac0      	subs	r0, r0, r3
   16816:	4152      	adcs	r2, r2
   16818:	0883      	lsrs	r3, r0, #2
   1681a:	428b      	cmp	r3, r1
   1681c:	d301      	bcc.n	16822 <__divsi3+0xea>
   1681e:	008b      	lsls	r3, r1, #2
   16820:	1ac0      	subs	r0, r0, r3
   16822:	4152      	adcs	r2, r2
   16824:	0843      	lsrs	r3, r0, #1
   16826:	428b      	cmp	r3, r1
   16828:	d301      	bcc.n	1682e <__divsi3+0xf6>
   1682a:	004b      	lsls	r3, r1, #1
   1682c:	1ac0      	subs	r0, r0, r3
   1682e:	4152      	adcs	r2, r2
   16830:	1a41      	subs	r1, r0, r1
   16832:	d200      	bcs.n	16836 <__divsi3+0xfe>
   16834:	4601      	mov	r1, r0
   16836:	4152      	adcs	r2, r2
   16838:	4610      	mov	r0, r2
   1683a:	4770      	bx	lr
   1683c:	e05d      	b.n	168fa <__divsi3+0x1c2>
   1683e:	0fca      	lsrs	r2, r1, #31
   16840:	d000      	beq.n	16844 <__divsi3+0x10c>
   16842:	4249      	negs	r1, r1
   16844:	1003      	asrs	r3, r0, #32
   16846:	d300      	bcc.n	1684a <__divsi3+0x112>
   16848:	4240      	negs	r0, r0
   1684a:	4053      	eors	r3, r2
   1684c:	2200      	movs	r2, #0
   1684e:	469c      	mov	ip, r3
   16850:	0903      	lsrs	r3, r0, #4
   16852:	428b      	cmp	r3, r1
   16854:	d32d      	bcc.n	168b2 <__divsi3+0x17a>
   16856:	0a03      	lsrs	r3, r0, #8
   16858:	428b      	cmp	r3, r1
   1685a:	d312      	bcc.n	16882 <__divsi3+0x14a>
   1685c:	22fc      	movs	r2, #252	; 0xfc
   1685e:	0189      	lsls	r1, r1, #6
   16860:	ba12      	rev	r2, r2
   16862:	0a03      	lsrs	r3, r0, #8
   16864:	428b      	cmp	r3, r1
   16866:	d30c      	bcc.n	16882 <__divsi3+0x14a>
   16868:	0189      	lsls	r1, r1, #6
   1686a:	1192      	asrs	r2, r2, #6
   1686c:	428b      	cmp	r3, r1
   1686e:	d308      	bcc.n	16882 <__divsi3+0x14a>
   16870:	0189      	lsls	r1, r1, #6
   16872:	1192      	asrs	r2, r2, #6
   16874:	428b      	cmp	r3, r1
   16876:	d304      	bcc.n	16882 <__divsi3+0x14a>
   16878:	0189      	lsls	r1, r1, #6
   1687a:	d03a      	beq.n	168f2 <__divsi3+0x1ba>
   1687c:	1192      	asrs	r2, r2, #6
   1687e:	e000      	b.n	16882 <__divsi3+0x14a>
   16880:	0989      	lsrs	r1, r1, #6
   16882:	09c3      	lsrs	r3, r0, #7
   16884:	428b      	cmp	r3, r1
   16886:	d301      	bcc.n	1688c <__divsi3+0x154>
   16888:	01cb      	lsls	r3, r1, #7
   1688a:	1ac0      	subs	r0, r0, r3
   1688c:	4152      	adcs	r2, r2
   1688e:	0983      	lsrs	r3, r0, #6
   16890:	428b      	cmp	r3, r1
   16892:	d301      	bcc.n	16898 <__divsi3+0x160>
   16894:	018b      	lsls	r3, r1, #6
   16896:	1ac0      	subs	r0, r0, r3
   16898:	4152      	adcs	r2, r2
   1689a:	0943      	lsrs	r3, r0, #5
   1689c:	428b      	cmp	r3, r1
   1689e:	d301      	bcc.n	168a4 <__divsi3+0x16c>
   168a0:	014b      	lsls	r3, r1, #5
   168a2:	1ac0      	subs	r0, r0, r3
   168a4:	4152      	adcs	r2, r2
   168a6:	0903      	lsrs	r3, r0, #4
   168a8:	428b      	cmp	r3, r1
   168aa:	d301      	bcc.n	168b0 <__divsi3+0x178>
   168ac:	010b      	lsls	r3, r1, #4
   168ae:	1ac0      	subs	r0, r0, r3
   168b0:	4152      	adcs	r2, r2
   168b2:	08c3      	lsrs	r3, r0, #3
   168b4:	428b      	cmp	r3, r1
   168b6:	d301      	bcc.n	168bc <__divsi3+0x184>
   168b8:	00cb      	lsls	r3, r1, #3
   168ba:	1ac0      	subs	r0, r0, r3
   168bc:	4152      	adcs	r2, r2
   168be:	0883      	lsrs	r3, r0, #2
   168c0:	428b      	cmp	r3, r1
   168c2:	d301      	bcc.n	168c8 <__divsi3+0x190>
   168c4:	008b      	lsls	r3, r1, #2
   168c6:	1ac0      	subs	r0, r0, r3
   168c8:	4152      	adcs	r2, r2
   168ca:	d2d9      	bcs.n	16880 <__divsi3+0x148>
   168cc:	0843      	lsrs	r3, r0, #1
   168ce:	428b      	cmp	r3, r1
   168d0:	d301      	bcc.n	168d6 <__divsi3+0x19e>
   168d2:	004b      	lsls	r3, r1, #1
   168d4:	1ac0      	subs	r0, r0, r3
   168d6:	4152      	adcs	r2, r2
   168d8:	1a41      	subs	r1, r0, r1
   168da:	d200      	bcs.n	168de <__divsi3+0x1a6>
   168dc:	4601      	mov	r1, r0
   168de:	4663      	mov	r3, ip
   168e0:	4152      	adcs	r2, r2
   168e2:	105b      	asrs	r3, r3, #1
   168e4:	4610      	mov	r0, r2
   168e6:	d301      	bcc.n	168ec <__divsi3+0x1b4>
   168e8:	4240      	negs	r0, r0
   168ea:	2b00      	cmp	r3, #0
   168ec:	d500      	bpl.n	168f0 <__divsi3+0x1b8>
   168ee:	4249      	negs	r1, r1
   168f0:	4770      	bx	lr
   168f2:	4663      	mov	r3, ip
   168f4:	105b      	asrs	r3, r3, #1
   168f6:	d300      	bcc.n	168fa <__divsi3+0x1c2>
   168f8:	4240      	negs	r0, r0
   168fa:	b501      	push	{r0, lr}
   168fc:	2000      	movs	r0, #0
   168fe:	f000 f805 	bl	1690c <__aeabi_idiv0>
   16902:	bd02      	pop	{r1, pc}

00016904 <__aeabi_idivmod>:
   16904:	2900      	cmp	r1, #0
   16906:	d0f8      	beq.n	168fa <__divsi3+0x1c2>
   16908:	e716      	b.n	16738 <__divsi3>
   1690a:	4770      	bx	lr

0001690c <__aeabi_idiv0>:
   1690c:	4770      	bx	lr
   1690e:	46c0      	nop			; (mov r8, r8)

00016910 <__aeabi_cdrcmple>:
   16910:	4684      	mov	ip, r0
   16912:	1c10      	adds	r0, r2, #0
   16914:	4662      	mov	r2, ip
   16916:	468c      	mov	ip, r1
   16918:	1c19      	adds	r1, r3, #0
   1691a:	4663      	mov	r3, ip
   1691c:	e000      	b.n	16920 <__aeabi_cdcmpeq>
   1691e:	46c0      	nop			; (mov r8, r8)

00016920 <__aeabi_cdcmpeq>:
   16920:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   16922:	f001 ffa3 	bl	1886c <__ledf2>
   16926:	2800      	cmp	r0, #0
   16928:	d401      	bmi.n	1692e <__aeabi_cdcmpeq+0xe>
   1692a:	2100      	movs	r1, #0
   1692c:	42c8      	cmn	r0, r1
   1692e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

00016930 <__aeabi_dcmpeq>:
   16930:	b510      	push	{r4, lr}
   16932:	f001 fefd 	bl	18730 <__eqdf2>
   16936:	4240      	negs	r0, r0
   16938:	3001      	adds	r0, #1
   1693a:	bd10      	pop	{r4, pc}

0001693c <__aeabi_dcmplt>:
   1693c:	b510      	push	{r4, lr}
   1693e:	f001 ff95 	bl	1886c <__ledf2>
   16942:	2800      	cmp	r0, #0
   16944:	db01      	blt.n	1694a <__aeabi_dcmplt+0xe>
   16946:	2000      	movs	r0, #0
   16948:	bd10      	pop	{r4, pc}
   1694a:	2001      	movs	r0, #1
   1694c:	bd10      	pop	{r4, pc}
   1694e:	46c0      	nop			; (mov r8, r8)

00016950 <__aeabi_dcmple>:
   16950:	b510      	push	{r4, lr}
   16952:	f001 ff8b 	bl	1886c <__ledf2>
   16956:	2800      	cmp	r0, #0
   16958:	dd01      	ble.n	1695e <__aeabi_dcmple+0xe>
   1695a:	2000      	movs	r0, #0
   1695c:	bd10      	pop	{r4, pc}
   1695e:	2001      	movs	r0, #1
   16960:	bd10      	pop	{r4, pc}
   16962:	46c0      	nop			; (mov r8, r8)

00016964 <__aeabi_dcmpgt>:
   16964:	b510      	push	{r4, lr}
   16966:	f001 ff1d 	bl	187a4 <__gedf2>
   1696a:	2800      	cmp	r0, #0
   1696c:	dc01      	bgt.n	16972 <__aeabi_dcmpgt+0xe>
   1696e:	2000      	movs	r0, #0
   16970:	bd10      	pop	{r4, pc}
   16972:	2001      	movs	r0, #1
   16974:	bd10      	pop	{r4, pc}
   16976:	46c0      	nop			; (mov r8, r8)

00016978 <__aeabi_dcmpge>:
   16978:	b510      	push	{r4, lr}
   1697a:	f001 ff13 	bl	187a4 <__gedf2>
   1697e:	2800      	cmp	r0, #0
   16980:	da01      	bge.n	16986 <__aeabi_dcmpge+0xe>
   16982:	2000      	movs	r0, #0
   16984:	bd10      	pop	{r4, pc}
   16986:	2001      	movs	r0, #1
   16988:	bd10      	pop	{r4, pc}
   1698a:	46c0      	nop			; (mov r8, r8)

0001698c <__aeabi_cfrcmple>:
   1698c:	4684      	mov	ip, r0
   1698e:	1c08      	adds	r0, r1, #0
   16990:	4661      	mov	r1, ip
   16992:	e7ff      	b.n	16994 <__aeabi_cfcmpeq>

00016994 <__aeabi_cfcmpeq>:
   16994:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   16996:	f000 fcd3 	bl	17340 <__lesf2>
   1699a:	2800      	cmp	r0, #0
   1699c:	d401      	bmi.n	169a2 <__aeabi_cfcmpeq+0xe>
   1699e:	2100      	movs	r1, #0
   169a0:	42c8      	cmn	r0, r1
   169a2:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

000169a4 <__aeabi_fcmpeq>:
   169a4:	b510      	push	{r4, lr}
   169a6:	f000 fc65 	bl	17274 <__eqsf2>
   169aa:	4240      	negs	r0, r0
   169ac:	3001      	adds	r0, #1
   169ae:	bd10      	pop	{r4, pc}

000169b0 <__aeabi_fcmplt>:
   169b0:	b510      	push	{r4, lr}
   169b2:	f000 fcc5 	bl	17340 <__lesf2>
   169b6:	2800      	cmp	r0, #0
   169b8:	db01      	blt.n	169be <__aeabi_fcmplt+0xe>
   169ba:	2000      	movs	r0, #0
   169bc:	bd10      	pop	{r4, pc}
   169be:	2001      	movs	r0, #1
   169c0:	bd10      	pop	{r4, pc}
   169c2:	46c0      	nop			; (mov r8, r8)

000169c4 <__aeabi_fcmple>:
   169c4:	b510      	push	{r4, lr}
   169c6:	f000 fcbb 	bl	17340 <__lesf2>
   169ca:	2800      	cmp	r0, #0
   169cc:	dd01      	ble.n	169d2 <__aeabi_fcmple+0xe>
   169ce:	2000      	movs	r0, #0
   169d0:	bd10      	pop	{r4, pc}
   169d2:	2001      	movs	r0, #1
   169d4:	bd10      	pop	{r4, pc}
   169d6:	46c0      	nop			; (mov r8, r8)

000169d8 <__aeabi_fcmpgt>:
   169d8:	b510      	push	{r4, lr}
   169da:	f000 fc71 	bl	172c0 <__gesf2>
   169de:	2800      	cmp	r0, #0
   169e0:	dc01      	bgt.n	169e6 <__aeabi_fcmpgt+0xe>
   169e2:	2000      	movs	r0, #0
   169e4:	bd10      	pop	{r4, pc}
   169e6:	2001      	movs	r0, #1
   169e8:	bd10      	pop	{r4, pc}
   169ea:	46c0      	nop			; (mov r8, r8)

000169ec <__aeabi_fcmpge>:
   169ec:	b510      	push	{r4, lr}
   169ee:	f000 fc67 	bl	172c0 <__gesf2>
   169f2:	2800      	cmp	r0, #0
   169f4:	da01      	bge.n	169fa <__aeabi_fcmpge+0xe>
   169f6:	2000      	movs	r0, #0
   169f8:	bd10      	pop	{r4, pc}
   169fa:	2001      	movs	r0, #1
   169fc:	bd10      	pop	{r4, pc}
   169fe:	46c0      	nop			; (mov r8, r8)

00016a00 <__aeabi_uldivmod>:
   16a00:	2b00      	cmp	r3, #0
   16a02:	d111      	bne.n	16a28 <__aeabi_uldivmod+0x28>
   16a04:	2a00      	cmp	r2, #0
   16a06:	d10f      	bne.n	16a28 <__aeabi_uldivmod+0x28>
   16a08:	2900      	cmp	r1, #0
   16a0a:	d100      	bne.n	16a0e <__aeabi_uldivmod+0xe>
   16a0c:	2800      	cmp	r0, #0
   16a0e:	d002      	beq.n	16a16 <__aeabi_uldivmod+0x16>
   16a10:	2100      	movs	r1, #0
   16a12:	43c9      	mvns	r1, r1
   16a14:	1c08      	adds	r0, r1, #0
   16a16:	b407      	push	{r0, r1, r2}
   16a18:	4802      	ldr	r0, [pc, #8]	; (16a24 <__aeabi_uldivmod+0x24>)
   16a1a:	a102      	add	r1, pc, #8	; (adr r1, 16a24 <__aeabi_uldivmod+0x24>)
   16a1c:	1840      	adds	r0, r0, r1
   16a1e:	9002      	str	r0, [sp, #8]
   16a20:	bd03      	pop	{r0, r1, pc}
   16a22:	46c0      	nop			; (mov r8, r8)
   16a24:	fffffee9 	.word	0xfffffee9
   16a28:	b403      	push	{r0, r1}
   16a2a:	4668      	mov	r0, sp
   16a2c:	b501      	push	{r0, lr}
   16a2e:	9802      	ldr	r0, [sp, #8]
   16a30:	f000 f886 	bl	16b40 <__udivmoddi4>
   16a34:	9b01      	ldr	r3, [sp, #4]
   16a36:	469e      	mov	lr, r3
   16a38:	b002      	add	sp, #8
   16a3a:	bc0c      	pop	{r2, r3}
   16a3c:	4770      	bx	lr
   16a3e:	46c0      	nop			; (mov r8, r8)

00016a40 <__aeabi_lmul>:
   16a40:	b5f0      	push	{r4, r5, r6, r7, lr}
   16a42:	46ce      	mov	lr, r9
   16a44:	4647      	mov	r7, r8
   16a46:	0415      	lsls	r5, r2, #16
   16a48:	0c2d      	lsrs	r5, r5, #16
   16a4a:	002e      	movs	r6, r5
   16a4c:	b580      	push	{r7, lr}
   16a4e:	0407      	lsls	r7, r0, #16
   16a50:	0c14      	lsrs	r4, r2, #16
   16a52:	0c3f      	lsrs	r7, r7, #16
   16a54:	4699      	mov	r9, r3
   16a56:	0c03      	lsrs	r3, r0, #16
   16a58:	437e      	muls	r6, r7
   16a5a:	435d      	muls	r5, r3
   16a5c:	4367      	muls	r7, r4
   16a5e:	4363      	muls	r3, r4
   16a60:	197f      	adds	r7, r7, r5
   16a62:	0c34      	lsrs	r4, r6, #16
   16a64:	19e4      	adds	r4, r4, r7
   16a66:	469c      	mov	ip, r3
   16a68:	42a5      	cmp	r5, r4
   16a6a:	d903      	bls.n	16a74 <__aeabi_lmul+0x34>
   16a6c:	2380      	movs	r3, #128	; 0x80
   16a6e:	025b      	lsls	r3, r3, #9
   16a70:	4698      	mov	r8, r3
   16a72:	44c4      	add	ip, r8
   16a74:	464b      	mov	r3, r9
   16a76:	4351      	muls	r1, r2
   16a78:	4343      	muls	r3, r0
   16a7a:	0436      	lsls	r6, r6, #16
   16a7c:	0c36      	lsrs	r6, r6, #16
   16a7e:	0c25      	lsrs	r5, r4, #16
   16a80:	0424      	lsls	r4, r4, #16
   16a82:	4465      	add	r5, ip
   16a84:	19a4      	adds	r4, r4, r6
   16a86:	1859      	adds	r1, r3, r1
   16a88:	1949      	adds	r1, r1, r5
   16a8a:	0020      	movs	r0, r4
   16a8c:	bc0c      	pop	{r2, r3}
   16a8e:	4690      	mov	r8, r2
   16a90:	4699      	mov	r9, r3
   16a92:	bdf0      	pop	{r4, r5, r6, r7, pc}

00016a94 <__aeabi_f2uiz>:
   16a94:	219e      	movs	r1, #158	; 0x9e
   16a96:	b510      	push	{r4, lr}
   16a98:	05c9      	lsls	r1, r1, #23
   16a9a:	1c04      	adds	r4, r0, #0
   16a9c:	f7ff ffa6 	bl	169ec <__aeabi_fcmpge>
   16aa0:	2800      	cmp	r0, #0
   16aa2:	d103      	bne.n	16aac <__aeabi_f2uiz+0x18>
   16aa4:	1c20      	adds	r0, r4, #0
   16aa6:	f000 ff49 	bl	1793c <__aeabi_f2iz>
   16aaa:	bd10      	pop	{r4, pc}
   16aac:	219e      	movs	r1, #158	; 0x9e
   16aae:	1c20      	adds	r0, r4, #0
   16ab0:	05c9      	lsls	r1, r1, #23
   16ab2:	f000 fda7 	bl	17604 <__aeabi_fsub>
   16ab6:	f000 ff41 	bl	1793c <__aeabi_f2iz>
   16aba:	2380      	movs	r3, #128	; 0x80
   16abc:	061b      	lsls	r3, r3, #24
   16abe:	469c      	mov	ip, r3
   16ac0:	4460      	add	r0, ip
   16ac2:	e7f2      	b.n	16aaa <__aeabi_f2uiz+0x16>

00016ac4 <__aeabi_d2uiz>:
   16ac4:	b570      	push	{r4, r5, r6, lr}
   16ac6:	2200      	movs	r2, #0
   16ac8:	4b0c      	ldr	r3, [pc, #48]	; (16afc <__aeabi_d2uiz+0x38>)
   16aca:	0004      	movs	r4, r0
   16acc:	000d      	movs	r5, r1
   16ace:	f7ff ff53 	bl	16978 <__aeabi_dcmpge>
   16ad2:	2800      	cmp	r0, #0
   16ad4:	d104      	bne.n	16ae0 <__aeabi_d2uiz+0x1c>
   16ad6:	0020      	movs	r0, r4
   16ad8:	0029      	movs	r1, r5
   16ada:	f002 fcbf 	bl	1945c <__aeabi_d2iz>
   16ade:	bd70      	pop	{r4, r5, r6, pc}
   16ae0:	4b06      	ldr	r3, [pc, #24]	; (16afc <__aeabi_d2uiz+0x38>)
   16ae2:	2200      	movs	r2, #0
   16ae4:	0020      	movs	r0, r4
   16ae6:	0029      	movs	r1, r5
   16ae8:	f002 f9a2 	bl	18e30 <__aeabi_dsub>
   16aec:	f002 fcb6 	bl	1945c <__aeabi_d2iz>
   16af0:	2380      	movs	r3, #128	; 0x80
   16af2:	061b      	lsls	r3, r3, #24
   16af4:	469c      	mov	ip, r3
   16af6:	4460      	add	r0, ip
   16af8:	e7f1      	b.n	16ade <__aeabi_d2uiz+0x1a>
   16afa:	46c0      	nop			; (mov r8, r8)
   16afc:	41e00000 	.word	0x41e00000

00016b00 <__aeabi_f2ulz>:
   16b00:	b570      	push	{r4, r5, r6, lr}
   16b02:	f002 fd59 	bl	195b8 <__aeabi_f2d>
   16b06:	2200      	movs	r2, #0
   16b08:	4b0b      	ldr	r3, [pc, #44]	; (16b38 <__aeabi_f2ulz+0x38>)
   16b0a:	000d      	movs	r5, r1
   16b0c:	0004      	movs	r4, r0
   16b0e:	f001 ff0f 	bl	18930 <__aeabi_dmul>
   16b12:	f7ff ffd7 	bl	16ac4 <__aeabi_d2uiz>
   16b16:	0006      	movs	r6, r0
   16b18:	f002 fd16 	bl	19548 <__aeabi_ui2d>
   16b1c:	2200      	movs	r2, #0
   16b1e:	4b07      	ldr	r3, [pc, #28]	; (16b3c <__aeabi_f2ulz+0x3c>)
   16b20:	f001 ff06 	bl	18930 <__aeabi_dmul>
   16b24:	0002      	movs	r2, r0
   16b26:	000b      	movs	r3, r1
   16b28:	0020      	movs	r0, r4
   16b2a:	0029      	movs	r1, r5
   16b2c:	f002 f980 	bl	18e30 <__aeabi_dsub>
   16b30:	f7ff ffc8 	bl	16ac4 <__aeabi_d2uiz>
   16b34:	0031      	movs	r1, r6
   16b36:	bd70      	pop	{r4, r5, r6, pc}
   16b38:	3df00000 	.word	0x3df00000
   16b3c:	41f00000 	.word	0x41f00000

00016b40 <__udivmoddi4>:
   16b40:	b5f0      	push	{r4, r5, r6, r7, lr}
   16b42:	4657      	mov	r7, sl
   16b44:	464e      	mov	r6, r9
   16b46:	4645      	mov	r5, r8
   16b48:	46de      	mov	lr, fp
   16b4a:	b5e0      	push	{r5, r6, r7, lr}
   16b4c:	0004      	movs	r4, r0
   16b4e:	b083      	sub	sp, #12
   16b50:	000d      	movs	r5, r1
   16b52:	4692      	mov	sl, r2
   16b54:	4699      	mov	r9, r3
   16b56:	428b      	cmp	r3, r1
   16b58:	d82f      	bhi.n	16bba <__udivmoddi4+0x7a>
   16b5a:	d02c      	beq.n	16bb6 <__udivmoddi4+0x76>
   16b5c:	4649      	mov	r1, r9
   16b5e:	4650      	mov	r0, sl
   16b60:	f002 fd9a 	bl	19698 <__clzdi2>
   16b64:	0029      	movs	r1, r5
   16b66:	0006      	movs	r6, r0
   16b68:	0020      	movs	r0, r4
   16b6a:	f002 fd95 	bl	19698 <__clzdi2>
   16b6e:	1a33      	subs	r3, r6, r0
   16b70:	4698      	mov	r8, r3
   16b72:	3b20      	subs	r3, #32
   16b74:	469b      	mov	fp, r3
   16b76:	d500      	bpl.n	16b7a <__udivmoddi4+0x3a>
   16b78:	e074      	b.n	16c64 <__udivmoddi4+0x124>
   16b7a:	4653      	mov	r3, sl
   16b7c:	465a      	mov	r2, fp
   16b7e:	4093      	lsls	r3, r2
   16b80:	001f      	movs	r7, r3
   16b82:	4653      	mov	r3, sl
   16b84:	4642      	mov	r2, r8
   16b86:	4093      	lsls	r3, r2
   16b88:	001e      	movs	r6, r3
   16b8a:	42af      	cmp	r7, r5
   16b8c:	d829      	bhi.n	16be2 <__udivmoddi4+0xa2>
   16b8e:	d026      	beq.n	16bde <__udivmoddi4+0x9e>
   16b90:	465b      	mov	r3, fp
   16b92:	1ba4      	subs	r4, r4, r6
   16b94:	41bd      	sbcs	r5, r7
   16b96:	2b00      	cmp	r3, #0
   16b98:	da00      	bge.n	16b9c <__udivmoddi4+0x5c>
   16b9a:	e079      	b.n	16c90 <__udivmoddi4+0x150>
   16b9c:	2200      	movs	r2, #0
   16b9e:	2300      	movs	r3, #0
   16ba0:	9200      	str	r2, [sp, #0]
   16ba2:	9301      	str	r3, [sp, #4]
   16ba4:	2301      	movs	r3, #1
   16ba6:	465a      	mov	r2, fp
   16ba8:	4093      	lsls	r3, r2
   16baa:	9301      	str	r3, [sp, #4]
   16bac:	2301      	movs	r3, #1
   16bae:	4642      	mov	r2, r8
   16bb0:	4093      	lsls	r3, r2
   16bb2:	9300      	str	r3, [sp, #0]
   16bb4:	e019      	b.n	16bea <__udivmoddi4+0xaa>
   16bb6:	4282      	cmp	r2, r0
   16bb8:	d9d0      	bls.n	16b5c <__udivmoddi4+0x1c>
   16bba:	2200      	movs	r2, #0
   16bbc:	2300      	movs	r3, #0
   16bbe:	9200      	str	r2, [sp, #0]
   16bc0:	9301      	str	r3, [sp, #4]
   16bc2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   16bc4:	2b00      	cmp	r3, #0
   16bc6:	d001      	beq.n	16bcc <__udivmoddi4+0x8c>
   16bc8:	601c      	str	r4, [r3, #0]
   16bca:	605d      	str	r5, [r3, #4]
   16bcc:	9800      	ldr	r0, [sp, #0]
   16bce:	9901      	ldr	r1, [sp, #4]
   16bd0:	b003      	add	sp, #12
   16bd2:	bc3c      	pop	{r2, r3, r4, r5}
   16bd4:	4690      	mov	r8, r2
   16bd6:	4699      	mov	r9, r3
   16bd8:	46a2      	mov	sl, r4
   16bda:	46ab      	mov	fp, r5
   16bdc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   16bde:	42a3      	cmp	r3, r4
   16be0:	d9d6      	bls.n	16b90 <__udivmoddi4+0x50>
   16be2:	2200      	movs	r2, #0
   16be4:	2300      	movs	r3, #0
   16be6:	9200      	str	r2, [sp, #0]
   16be8:	9301      	str	r3, [sp, #4]
   16bea:	4643      	mov	r3, r8
   16bec:	2b00      	cmp	r3, #0
   16bee:	d0e8      	beq.n	16bc2 <__udivmoddi4+0x82>
   16bf0:	07fb      	lsls	r3, r7, #31
   16bf2:	0872      	lsrs	r2, r6, #1
   16bf4:	431a      	orrs	r2, r3
   16bf6:	4646      	mov	r6, r8
   16bf8:	087b      	lsrs	r3, r7, #1
   16bfa:	e00e      	b.n	16c1a <__udivmoddi4+0xda>
   16bfc:	42ab      	cmp	r3, r5
   16bfe:	d101      	bne.n	16c04 <__udivmoddi4+0xc4>
   16c00:	42a2      	cmp	r2, r4
   16c02:	d80c      	bhi.n	16c1e <__udivmoddi4+0xde>
   16c04:	1aa4      	subs	r4, r4, r2
   16c06:	419d      	sbcs	r5, r3
   16c08:	2001      	movs	r0, #1
   16c0a:	1924      	adds	r4, r4, r4
   16c0c:	416d      	adcs	r5, r5
   16c0e:	2100      	movs	r1, #0
   16c10:	3e01      	subs	r6, #1
   16c12:	1824      	adds	r4, r4, r0
   16c14:	414d      	adcs	r5, r1
   16c16:	2e00      	cmp	r6, #0
   16c18:	d006      	beq.n	16c28 <__udivmoddi4+0xe8>
   16c1a:	42ab      	cmp	r3, r5
   16c1c:	d9ee      	bls.n	16bfc <__udivmoddi4+0xbc>
   16c1e:	3e01      	subs	r6, #1
   16c20:	1924      	adds	r4, r4, r4
   16c22:	416d      	adcs	r5, r5
   16c24:	2e00      	cmp	r6, #0
   16c26:	d1f8      	bne.n	16c1a <__udivmoddi4+0xda>
   16c28:	465b      	mov	r3, fp
   16c2a:	9800      	ldr	r0, [sp, #0]
   16c2c:	9901      	ldr	r1, [sp, #4]
   16c2e:	1900      	adds	r0, r0, r4
   16c30:	4169      	adcs	r1, r5
   16c32:	2b00      	cmp	r3, #0
   16c34:	db22      	blt.n	16c7c <__udivmoddi4+0x13c>
   16c36:	002b      	movs	r3, r5
   16c38:	465a      	mov	r2, fp
   16c3a:	40d3      	lsrs	r3, r2
   16c3c:	002a      	movs	r2, r5
   16c3e:	4644      	mov	r4, r8
   16c40:	40e2      	lsrs	r2, r4
   16c42:	001c      	movs	r4, r3
   16c44:	465b      	mov	r3, fp
   16c46:	0015      	movs	r5, r2
   16c48:	2b00      	cmp	r3, #0
   16c4a:	db2c      	blt.n	16ca6 <__udivmoddi4+0x166>
   16c4c:	0026      	movs	r6, r4
   16c4e:	409e      	lsls	r6, r3
   16c50:	0033      	movs	r3, r6
   16c52:	0026      	movs	r6, r4
   16c54:	4647      	mov	r7, r8
   16c56:	40be      	lsls	r6, r7
   16c58:	0032      	movs	r2, r6
   16c5a:	1a80      	subs	r0, r0, r2
   16c5c:	4199      	sbcs	r1, r3
   16c5e:	9000      	str	r0, [sp, #0]
   16c60:	9101      	str	r1, [sp, #4]
   16c62:	e7ae      	b.n	16bc2 <__udivmoddi4+0x82>
   16c64:	4642      	mov	r2, r8
   16c66:	2320      	movs	r3, #32
   16c68:	1a9b      	subs	r3, r3, r2
   16c6a:	4652      	mov	r2, sl
   16c6c:	40da      	lsrs	r2, r3
   16c6e:	4641      	mov	r1, r8
   16c70:	0013      	movs	r3, r2
   16c72:	464a      	mov	r2, r9
   16c74:	408a      	lsls	r2, r1
   16c76:	0017      	movs	r7, r2
   16c78:	431f      	orrs	r7, r3
   16c7a:	e782      	b.n	16b82 <__udivmoddi4+0x42>
   16c7c:	4642      	mov	r2, r8
   16c7e:	2320      	movs	r3, #32
   16c80:	1a9b      	subs	r3, r3, r2
   16c82:	002a      	movs	r2, r5
   16c84:	4646      	mov	r6, r8
   16c86:	409a      	lsls	r2, r3
   16c88:	0023      	movs	r3, r4
   16c8a:	40f3      	lsrs	r3, r6
   16c8c:	4313      	orrs	r3, r2
   16c8e:	e7d5      	b.n	16c3c <__udivmoddi4+0xfc>
   16c90:	4642      	mov	r2, r8
   16c92:	2320      	movs	r3, #32
   16c94:	2100      	movs	r1, #0
   16c96:	1a9b      	subs	r3, r3, r2
   16c98:	2200      	movs	r2, #0
   16c9a:	9100      	str	r1, [sp, #0]
   16c9c:	9201      	str	r2, [sp, #4]
   16c9e:	2201      	movs	r2, #1
   16ca0:	40da      	lsrs	r2, r3
   16ca2:	9201      	str	r2, [sp, #4]
   16ca4:	e782      	b.n	16bac <__udivmoddi4+0x6c>
   16ca6:	4642      	mov	r2, r8
   16ca8:	2320      	movs	r3, #32
   16caa:	0026      	movs	r6, r4
   16cac:	1a9b      	subs	r3, r3, r2
   16cae:	40de      	lsrs	r6, r3
   16cb0:	002f      	movs	r7, r5
   16cb2:	46b4      	mov	ip, r6
   16cb4:	4097      	lsls	r7, r2
   16cb6:	4666      	mov	r6, ip
   16cb8:	003b      	movs	r3, r7
   16cba:	4333      	orrs	r3, r6
   16cbc:	e7c9      	b.n	16c52 <__udivmoddi4+0x112>
   16cbe:	46c0      	nop			; (mov r8, r8)

00016cc0 <__aeabi_fadd>:
   16cc0:	b5f0      	push	{r4, r5, r6, r7, lr}
   16cc2:	46c6      	mov	lr, r8
   16cc4:	024e      	lsls	r6, r1, #9
   16cc6:	0247      	lsls	r7, r0, #9
   16cc8:	0a76      	lsrs	r6, r6, #9
   16cca:	0a7b      	lsrs	r3, r7, #9
   16ccc:	0044      	lsls	r4, r0, #1
   16cce:	0fc5      	lsrs	r5, r0, #31
   16cd0:	00f7      	lsls	r7, r6, #3
   16cd2:	0048      	lsls	r0, r1, #1
   16cd4:	4698      	mov	r8, r3
   16cd6:	b500      	push	{lr}
   16cd8:	0e24      	lsrs	r4, r4, #24
   16cda:	002a      	movs	r2, r5
   16cdc:	00db      	lsls	r3, r3, #3
   16cde:	0e00      	lsrs	r0, r0, #24
   16ce0:	0fc9      	lsrs	r1, r1, #31
   16ce2:	46bc      	mov	ip, r7
   16ce4:	428d      	cmp	r5, r1
   16ce6:	d067      	beq.n	16db8 <__aeabi_fadd+0xf8>
   16ce8:	1a22      	subs	r2, r4, r0
   16cea:	2a00      	cmp	r2, #0
   16cec:	dc00      	bgt.n	16cf0 <__aeabi_fadd+0x30>
   16cee:	e0a5      	b.n	16e3c <__aeabi_fadd+0x17c>
   16cf0:	2800      	cmp	r0, #0
   16cf2:	d13a      	bne.n	16d6a <__aeabi_fadd+0xaa>
   16cf4:	2f00      	cmp	r7, #0
   16cf6:	d100      	bne.n	16cfa <__aeabi_fadd+0x3a>
   16cf8:	e093      	b.n	16e22 <__aeabi_fadd+0x162>
   16cfa:	1e51      	subs	r1, r2, #1
   16cfc:	2900      	cmp	r1, #0
   16cfe:	d000      	beq.n	16d02 <__aeabi_fadd+0x42>
   16d00:	e0bc      	b.n	16e7c <__aeabi_fadd+0x1bc>
   16d02:	2401      	movs	r4, #1
   16d04:	1bdb      	subs	r3, r3, r7
   16d06:	015a      	lsls	r2, r3, #5
   16d08:	d546      	bpl.n	16d98 <__aeabi_fadd+0xd8>
   16d0a:	019b      	lsls	r3, r3, #6
   16d0c:	099e      	lsrs	r6, r3, #6
   16d0e:	0030      	movs	r0, r6
   16d10:	f002 fca4 	bl	1965c <__clzsi2>
   16d14:	3805      	subs	r0, #5
   16d16:	4086      	lsls	r6, r0
   16d18:	4284      	cmp	r4, r0
   16d1a:	dd00      	ble.n	16d1e <__aeabi_fadd+0x5e>
   16d1c:	e09d      	b.n	16e5a <__aeabi_fadd+0x19a>
   16d1e:	1b04      	subs	r4, r0, r4
   16d20:	0032      	movs	r2, r6
   16d22:	2020      	movs	r0, #32
   16d24:	3401      	adds	r4, #1
   16d26:	40e2      	lsrs	r2, r4
   16d28:	1b04      	subs	r4, r0, r4
   16d2a:	40a6      	lsls	r6, r4
   16d2c:	0033      	movs	r3, r6
   16d2e:	1e5e      	subs	r6, r3, #1
   16d30:	41b3      	sbcs	r3, r6
   16d32:	2400      	movs	r4, #0
   16d34:	4313      	orrs	r3, r2
   16d36:	075a      	lsls	r2, r3, #29
   16d38:	d004      	beq.n	16d44 <__aeabi_fadd+0x84>
   16d3a:	220f      	movs	r2, #15
   16d3c:	401a      	ands	r2, r3
   16d3e:	2a04      	cmp	r2, #4
   16d40:	d000      	beq.n	16d44 <__aeabi_fadd+0x84>
   16d42:	3304      	adds	r3, #4
   16d44:	015a      	lsls	r2, r3, #5
   16d46:	d529      	bpl.n	16d9c <__aeabi_fadd+0xdc>
   16d48:	3401      	adds	r4, #1
   16d4a:	2cff      	cmp	r4, #255	; 0xff
   16d4c:	d100      	bne.n	16d50 <__aeabi_fadd+0x90>
   16d4e:	e081      	b.n	16e54 <__aeabi_fadd+0x194>
   16d50:	002a      	movs	r2, r5
   16d52:	019b      	lsls	r3, r3, #6
   16d54:	0a5b      	lsrs	r3, r3, #9
   16d56:	b2e4      	uxtb	r4, r4
   16d58:	025b      	lsls	r3, r3, #9
   16d5a:	05e4      	lsls	r4, r4, #23
   16d5c:	0a58      	lsrs	r0, r3, #9
   16d5e:	07d2      	lsls	r2, r2, #31
   16d60:	4320      	orrs	r0, r4
   16d62:	4310      	orrs	r0, r2
   16d64:	bc04      	pop	{r2}
   16d66:	4690      	mov	r8, r2
   16d68:	bdf0      	pop	{r4, r5, r6, r7, pc}
   16d6a:	2cff      	cmp	r4, #255	; 0xff
   16d6c:	d0e3      	beq.n	16d36 <__aeabi_fadd+0x76>
   16d6e:	2180      	movs	r1, #128	; 0x80
   16d70:	0038      	movs	r0, r7
   16d72:	04c9      	lsls	r1, r1, #19
   16d74:	4308      	orrs	r0, r1
   16d76:	4684      	mov	ip, r0
   16d78:	2a1b      	cmp	r2, #27
   16d7a:	dd00      	ble.n	16d7e <__aeabi_fadd+0xbe>
   16d7c:	e082      	b.n	16e84 <__aeabi_fadd+0x1c4>
   16d7e:	2020      	movs	r0, #32
   16d80:	4661      	mov	r1, ip
   16d82:	40d1      	lsrs	r1, r2
   16d84:	1a82      	subs	r2, r0, r2
   16d86:	4660      	mov	r0, ip
   16d88:	4090      	lsls	r0, r2
   16d8a:	0002      	movs	r2, r0
   16d8c:	1e50      	subs	r0, r2, #1
   16d8e:	4182      	sbcs	r2, r0
   16d90:	430a      	orrs	r2, r1
   16d92:	1a9b      	subs	r3, r3, r2
   16d94:	015a      	lsls	r2, r3, #5
   16d96:	d4b8      	bmi.n	16d0a <__aeabi_fadd+0x4a>
   16d98:	075a      	lsls	r2, r3, #29
   16d9a:	d1ce      	bne.n	16d3a <__aeabi_fadd+0x7a>
   16d9c:	08de      	lsrs	r6, r3, #3
   16d9e:	002a      	movs	r2, r5
   16da0:	2cff      	cmp	r4, #255	; 0xff
   16da2:	d13a      	bne.n	16e1a <__aeabi_fadd+0x15a>
   16da4:	2e00      	cmp	r6, #0
   16da6:	d100      	bne.n	16daa <__aeabi_fadd+0xea>
   16da8:	e0ae      	b.n	16f08 <__aeabi_fadd+0x248>
   16daa:	2380      	movs	r3, #128	; 0x80
   16dac:	03db      	lsls	r3, r3, #15
   16dae:	4333      	orrs	r3, r6
   16db0:	025b      	lsls	r3, r3, #9
   16db2:	0a5b      	lsrs	r3, r3, #9
   16db4:	24ff      	movs	r4, #255	; 0xff
   16db6:	e7cf      	b.n	16d58 <__aeabi_fadd+0x98>
   16db8:	1a21      	subs	r1, r4, r0
   16dba:	2900      	cmp	r1, #0
   16dbc:	dd52      	ble.n	16e64 <__aeabi_fadd+0x1a4>
   16dbe:	2800      	cmp	r0, #0
   16dc0:	d031      	beq.n	16e26 <__aeabi_fadd+0x166>
   16dc2:	2cff      	cmp	r4, #255	; 0xff
   16dc4:	d0b7      	beq.n	16d36 <__aeabi_fadd+0x76>
   16dc6:	2080      	movs	r0, #128	; 0x80
   16dc8:	003e      	movs	r6, r7
   16dca:	04c0      	lsls	r0, r0, #19
   16dcc:	4306      	orrs	r6, r0
   16dce:	46b4      	mov	ip, r6
   16dd0:	291b      	cmp	r1, #27
   16dd2:	dd00      	ble.n	16dd6 <__aeabi_fadd+0x116>
   16dd4:	e0aa      	b.n	16f2c <__aeabi_fadd+0x26c>
   16dd6:	2620      	movs	r6, #32
   16dd8:	4660      	mov	r0, ip
   16dda:	40c8      	lsrs	r0, r1
   16ddc:	1a71      	subs	r1, r6, r1
   16dde:	4666      	mov	r6, ip
   16de0:	408e      	lsls	r6, r1
   16de2:	0031      	movs	r1, r6
   16de4:	1e4e      	subs	r6, r1, #1
   16de6:	41b1      	sbcs	r1, r6
   16de8:	4301      	orrs	r1, r0
   16dea:	185b      	adds	r3, r3, r1
   16dec:	0159      	lsls	r1, r3, #5
   16dee:	d5d3      	bpl.n	16d98 <__aeabi_fadd+0xd8>
   16df0:	3401      	adds	r4, #1
   16df2:	2cff      	cmp	r4, #255	; 0xff
   16df4:	d100      	bne.n	16df8 <__aeabi_fadd+0x138>
   16df6:	e087      	b.n	16f08 <__aeabi_fadd+0x248>
   16df8:	2201      	movs	r2, #1
   16dfa:	4978      	ldr	r1, [pc, #480]	; (16fdc <__aeabi_fadd+0x31c>)
   16dfc:	401a      	ands	r2, r3
   16dfe:	085b      	lsrs	r3, r3, #1
   16e00:	400b      	ands	r3, r1
   16e02:	4313      	orrs	r3, r2
   16e04:	e797      	b.n	16d36 <__aeabi_fadd+0x76>
   16e06:	2c00      	cmp	r4, #0
   16e08:	d000      	beq.n	16e0c <__aeabi_fadd+0x14c>
   16e0a:	e0a7      	b.n	16f5c <__aeabi_fadd+0x29c>
   16e0c:	2b00      	cmp	r3, #0
   16e0e:	d000      	beq.n	16e12 <__aeabi_fadd+0x152>
   16e10:	e0b6      	b.n	16f80 <__aeabi_fadd+0x2c0>
   16e12:	1e3b      	subs	r3, r7, #0
   16e14:	d162      	bne.n	16edc <__aeabi_fadd+0x21c>
   16e16:	2600      	movs	r6, #0
   16e18:	2200      	movs	r2, #0
   16e1a:	0273      	lsls	r3, r6, #9
   16e1c:	0a5b      	lsrs	r3, r3, #9
   16e1e:	b2e4      	uxtb	r4, r4
   16e20:	e79a      	b.n	16d58 <__aeabi_fadd+0x98>
   16e22:	0014      	movs	r4, r2
   16e24:	e787      	b.n	16d36 <__aeabi_fadd+0x76>
   16e26:	2f00      	cmp	r7, #0
   16e28:	d04d      	beq.n	16ec6 <__aeabi_fadd+0x206>
   16e2a:	1e48      	subs	r0, r1, #1
   16e2c:	2800      	cmp	r0, #0
   16e2e:	d157      	bne.n	16ee0 <__aeabi_fadd+0x220>
   16e30:	4463      	add	r3, ip
   16e32:	2401      	movs	r4, #1
   16e34:	015a      	lsls	r2, r3, #5
   16e36:	d5af      	bpl.n	16d98 <__aeabi_fadd+0xd8>
   16e38:	2402      	movs	r4, #2
   16e3a:	e7dd      	b.n	16df8 <__aeabi_fadd+0x138>
   16e3c:	2a00      	cmp	r2, #0
   16e3e:	d124      	bne.n	16e8a <__aeabi_fadd+0x1ca>
   16e40:	1c62      	adds	r2, r4, #1
   16e42:	b2d2      	uxtb	r2, r2
   16e44:	2a01      	cmp	r2, #1
   16e46:	ddde      	ble.n	16e06 <__aeabi_fadd+0x146>
   16e48:	1bde      	subs	r6, r3, r7
   16e4a:	0172      	lsls	r2, r6, #5
   16e4c:	d535      	bpl.n	16eba <__aeabi_fadd+0x1fa>
   16e4e:	1afe      	subs	r6, r7, r3
   16e50:	000d      	movs	r5, r1
   16e52:	e75c      	b.n	16d0e <__aeabi_fadd+0x4e>
   16e54:	002a      	movs	r2, r5
   16e56:	2300      	movs	r3, #0
   16e58:	e77e      	b.n	16d58 <__aeabi_fadd+0x98>
   16e5a:	0033      	movs	r3, r6
   16e5c:	4a60      	ldr	r2, [pc, #384]	; (16fe0 <__aeabi_fadd+0x320>)
   16e5e:	1a24      	subs	r4, r4, r0
   16e60:	4013      	ands	r3, r2
   16e62:	e768      	b.n	16d36 <__aeabi_fadd+0x76>
   16e64:	2900      	cmp	r1, #0
   16e66:	d163      	bne.n	16f30 <__aeabi_fadd+0x270>
   16e68:	1c61      	adds	r1, r4, #1
   16e6a:	b2c8      	uxtb	r0, r1
   16e6c:	2801      	cmp	r0, #1
   16e6e:	dd4e      	ble.n	16f0e <__aeabi_fadd+0x24e>
   16e70:	29ff      	cmp	r1, #255	; 0xff
   16e72:	d049      	beq.n	16f08 <__aeabi_fadd+0x248>
   16e74:	4463      	add	r3, ip
   16e76:	085b      	lsrs	r3, r3, #1
   16e78:	000c      	movs	r4, r1
   16e7a:	e75c      	b.n	16d36 <__aeabi_fadd+0x76>
   16e7c:	2aff      	cmp	r2, #255	; 0xff
   16e7e:	d041      	beq.n	16f04 <__aeabi_fadd+0x244>
   16e80:	000a      	movs	r2, r1
   16e82:	e779      	b.n	16d78 <__aeabi_fadd+0xb8>
   16e84:	2201      	movs	r2, #1
   16e86:	1a9b      	subs	r3, r3, r2
   16e88:	e784      	b.n	16d94 <__aeabi_fadd+0xd4>
   16e8a:	2c00      	cmp	r4, #0
   16e8c:	d01d      	beq.n	16eca <__aeabi_fadd+0x20a>
   16e8e:	28ff      	cmp	r0, #255	; 0xff
   16e90:	d022      	beq.n	16ed8 <__aeabi_fadd+0x218>
   16e92:	2480      	movs	r4, #128	; 0x80
   16e94:	04e4      	lsls	r4, r4, #19
   16e96:	4252      	negs	r2, r2
   16e98:	4323      	orrs	r3, r4
   16e9a:	2a1b      	cmp	r2, #27
   16e9c:	dd00      	ble.n	16ea0 <__aeabi_fadd+0x1e0>
   16e9e:	e08a      	b.n	16fb6 <__aeabi_fadd+0x2f6>
   16ea0:	001c      	movs	r4, r3
   16ea2:	2520      	movs	r5, #32
   16ea4:	40d4      	lsrs	r4, r2
   16ea6:	1aaa      	subs	r2, r5, r2
   16ea8:	4093      	lsls	r3, r2
   16eaa:	1e5a      	subs	r2, r3, #1
   16eac:	4193      	sbcs	r3, r2
   16eae:	4323      	orrs	r3, r4
   16eb0:	4662      	mov	r2, ip
   16eb2:	0004      	movs	r4, r0
   16eb4:	1ad3      	subs	r3, r2, r3
   16eb6:	000d      	movs	r5, r1
   16eb8:	e725      	b.n	16d06 <__aeabi_fadd+0x46>
   16eba:	2e00      	cmp	r6, #0
   16ebc:	d000      	beq.n	16ec0 <__aeabi_fadd+0x200>
   16ebe:	e726      	b.n	16d0e <__aeabi_fadd+0x4e>
   16ec0:	2200      	movs	r2, #0
   16ec2:	2400      	movs	r4, #0
   16ec4:	e7a9      	b.n	16e1a <__aeabi_fadd+0x15a>
   16ec6:	000c      	movs	r4, r1
   16ec8:	e735      	b.n	16d36 <__aeabi_fadd+0x76>
   16eca:	2b00      	cmp	r3, #0
   16ecc:	d04d      	beq.n	16f6a <__aeabi_fadd+0x2aa>
   16ece:	43d2      	mvns	r2, r2
   16ed0:	2a00      	cmp	r2, #0
   16ed2:	d0ed      	beq.n	16eb0 <__aeabi_fadd+0x1f0>
   16ed4:	28ff      	cmp	r0, #255	; 0xff
   16ed6:	d1e0      	bne.n	16e9a <__aeabi_fadd+0x1da>
   16ed8:	4663      	mov	r3, ip
   16eda:	24ff      	movs	r4, #255	; 0xff
   16edc:	000d      	movs	r5, r1
   16ede:	e72a      	b.n	16d36 <__aeabi_fadd+0x76>
   16ee0:	29ff      	cmp	r1, #255	; 0xff
   16ee2:	d00f      	beq.n	16f04 <__aeabi_fadd+0x244>
   16ee4:	0001      	movs	r1, r0
   16ee6:	e773      	b.n	16dd0 <__aeabi_fadd+0x110>
   16ee8:	2b00      	cmp	r3, #0
   16eea:	d061      	beq.n	16fb0 <__aeabi_fadd+0x2f0>
   16eec:	24ff      	movs	r4, #255	; 0xff
   16eee:	2f00      	cmp	r7, #0
   16ef0:	d100      	bne.n	16ef4 <__aeabi_fadd+0x234>
   16ef2:	e720      	b.n	16d36 <__aeabi_fadd+0x76>
   16ef4:	2280      	movs	r2, #128	; 0x80
   16ef6:	4641      	mov	r1, r8
   16ef8:	03d2      	lsls	r2, r2, #15
   16efa:	4211      	tst	r1, r2
   16efc:	d002      	beq.n	16f04 <__aeabi_fadd+0x244>
   16efe:	4216      	tst	r6, r2
   16f00:	d100      	bne.n	16f04 <__aeabi_fadd+0x244>
   16f02:	003b      	movs	r3, r7
   16f04:	24ff      	movs	r4, #255	; 0xff
   16f06:	e716      	b.n	16d36 <__aeabi_fadd+0x76>
   16f08:	24ff      	movs	r4, #255	; 0xff
   16f0a:	2300      	movs	r3, #0
   16f0c:	e724      	b.n	16d58 <__aeabi_fadd+0x98>
   16f0e:	2c00      	cmp	r4, #0
   16f10:	d1ea      	bne.n	16ee8 <__aeabi_fadd+0x228>
   16f12:	2b00      	cmp	r3, #0
   16f14:	d058      	beq.n	16fc8 <__aeabi_fadd+0x308>
   16f16:	2f00      	cmp	r7, #0
   16f18:	d100      	bne.n	16f1c <__aeabi_fadd+0x25c>
   16f1a:	e70c      	b.n	16d36 <__aeabi_fadd+0x76>
   16f1c:	4463      	add	r3, ip
   16f1e:	015a      	lsls	r2, r3, #5
   16f20:	d400      	bmi.n	16f24 <__aeabi_fadd+0x264>
   16f22:	e739      	b.n	16d98 <__aeabi_fadd+0xd8>
   16f24:	4a2e      	ldr	r2, [pc, #184]	; (16fe0 <__aeabi_fadd+0x320>)
   16f26:	000c      	movs	r4, r1
   16f28:	4013      	ands	r3, r2
   16f2a:	e704      	b.n	16d36 <__aeabi_fadd+0x76>
   16f2c:	2101      	movs	r1, #1
   16f2e:	e75c      	b.n	16dea <__aeabi_fadd+0x12a>
   16f30:	2c00      	cmp	r4, #0
   16f32:	d11e      	bne.n	16f72 <__aeabi_fadd+0x2b2>
   16f34:	2b00      	cmp	r3, #0
   16f36:	d040      	beq.n	16fba <__aeabi_fadd+0x2fa>
   16f38:	43c9      	mvns	r1, r1
   16f3a:	2900      	cmp	r1, #0
   16f3c:	d00b      	beq.n	16f56 <__aeabi_fadd+0x296>
   16f3e:	28ff      	cmp	r0, #255	; 0xff
   16f40:	d036      	beq.n	16fb0 <__aeabi_fadd+0x2f0>
   16f42:	291b      	cmp	r1, #27
   16f44:	dc47      	bgt.n	16fd6 <__aeabi_fadd+0x316>
   16f46:	001c      	movs	r4, r3
   16f48:	2620      	movs	r6, #32
   16f4a:	40cc      	lsrs	r4, r1
   16f4c:	1a71      	subs	r1, r6, r1
   16f4e:	408b      	lsls	r3, r1
   16f50:	1e59      	subs	r1, r3, #1
   16f52:	418b      	sbcs	r3, r1
   16f54:	4323      	orrs	r3, r4
   16f56:	4463      	add	r3, ip
   16f58:	0004      	movs	r4, r0
   16f5a:	e747      	b.n	16dec <__aeabi_fadd+0x12c>
   16f5c:	2b00      	cmp	r3, #0
   16f5e:	d118      	bne.n	16f92 <__aeabi_fadd+0x2d2>
   16f60:	1e3b      	subs	r3, r7, #0
   16f62:	d02d      	beq.n	16fc0 <__aeabi_fadd+0x300>
   16f64:	000d      	movs	r5, r1
   16f66:	24ff      	movs	r4, #255	; 0xff
   16f68:	e6e5      	b.n	16d36 <__aeabi_fadd+0x76>
   16f6a:	003b      	movs	r3, r7
   16f6c:	0004      	movs	r4, r0
   16f6e:	000d      	movs	r5, r1
   16f70:	e6e1      	b.n	16d36 <__aeabi_fadd+0x76>
   16f72:	28ff      	cmp	r0, #255	; 0xff
   16f74:	d01c      	beq.n	16fb0 <__aeabi_fadd+0x2f0>
   16f76:	2480      	movs	r4, #128	; 0x80
   16f78:	04e4      	lsls	r4, r4, #19
   16f7a:	4249      	negs	r1, r1
   16f7c:	4323      	orrs	r3, r4
   16f7e:	e7e0      	b.n	16f42 <__aeabi_fadd+0x282>
   16f80:	2f00      	cmp	r7, #0
   16f82:	d100      	bne.n	16f86 <__aeabi_fadd+0x2c6>
   16f84:	e6d7      	b.n	16d36 <__aeabi_fadd+0x76>
   16f86:	1bde      	subs	r6, r3, r7
   16f88:	0172      	lsls	r2, r6, #5
   16f8a:	d51f      	bpl.n	16fcc <__aeabi_fadd+0x30c>
   16f8c:	1afb      	subs	r3, r7, r3
   16f8e:	000d      	movs	r5, r1
   16f90:	e6d1      	b.n	16d36 <__aeabi_fadd+0x76>
   16f92:	24ff      	movs	r4, #255	; 0xff
   16f94:	2f00      	cmp	r7, #0
   16f96:	d100      	bne.n	16f9a <__aeabi_fadd+0x2da>
   16f98:	e6cd      	b.n	16d36 <__aeabi_fadd+0x76>
   16f9a:	2280      	movs	r2, #128	; 0x80
   16f9c:	4640      	mov	r0, r8
   16f9e:	03d2      	lsls	r2, r2, #15
   16fa0:	4210      	tst	r0, r2
   16fa2:	d0af      	beq.n	16f04 <__aeabi_fadd+0x244>
   16fa4:	4216      	tst	r6, r2
   16fa6:	d1ad      	bne.n	16f04 <__aeabi_fadd+0x244>
   16fa8:	003b      	movs	r3, r7
   16faa:	000d      	movs	r5, r1
   16fac:	24ff      	movs	r4, #255	; 0xff
   16fae:	e6c2      	b.n	16d36 <__aeabi_fadd+0x76>
   16fb0:	4663      	mov	r3, ip
   16fb2:	24ff      	movs	r4, #255	; 0xff
   16fb4:	e6bf      	b.n	16d36 <__aeabi_fadd+0x76>
   16fb6:	2301      	movs	r3, #1
   16fb8:	e77a      	b.n	16eb0 <__aeabi_fadd+0x1f0>
   16fba:	003b      	movs	r3, r7
   16fbc:	0004      	movs	r4, r0
   16fbe:	e6ba      	b.n	16d36 <__aeabi_fadd+0x76>
   16fc0:	2680      	movs	r6, #128	; 0x80
   16fc2:	2200      	movs	r2, #0
   16fc4:	03f6      	lsls	r6, r6, #15
   16fc6:	e6f0      	b.n	16daa <__aeabi_fadd+0xea>
   16fc8:	003b      	movs	r3, r7
   16fca:	e6b4      	b.n	16d36 <__aeabi_fadd+0x76>
   16fcc:	1e33      	subs	r3, r6, #0
   16fce:	d000      	beq.n	16fd2 <__aeabi_fadd+0x312>
   16fd0:	e6e2      	b.n	16d98 <__aeabi_fadd+0xd8>
   16fd2:	2200      	movs	r2, #0
   16fd4:	e721      	b.n	16e1a <__aeabi_fadd+0x15a>
   16fd6:	2301      	movs	r3, #1
   16fd8:	e7bd      	b.n	16f56 <__aeabi_fadd+0x296>
   16fda:	46c0      	nop			; (mov r8, r8)
   16fdc:	7dffffff 	.word	0x7dffffff
   16fe0:	fbffffff 	.word	0xfbffffff

00016fe4 <__aeabi_fdiv>:
   16fe4:	b5f0      	push	{r4, r5, r6, r7, lr}
   16fe6:	4657      	mov	r7, sl
   16fe8:	464e      	mov	r6, r9
   16fea:	46de      	mov	lr, fp
   16fec:	4645      	mov	r5, r8
   16fee:	b5e0      	push	{r5, r6, r7, lr}
   16ff0:	0244      	lsls	r4, r0, #9
   16ff2:	0043      	lsls	r3, r0, #1
   16ff4:	0fc6      	lsrs	r6, r0, #31
   16ff6:	b083      	sub	sp, #12
   16ff8:	1c0f      	adds	r7, r1, #0
   16ffa:	0a64      	lsrs	r4, r4, #9
   16ffc:	0e1b      	lsrs	r3, r3, #24
   16ffe:	46b2      	mov	sl, r6
   17000:	d053      	beq.n	170aa <__aeabi_fdiv+0xc6>
   17002:	2bff      	cmp	r3, #255	; 0xff
   17004:	d027      	beq.n	17056 <__aeabi_fdiv+0x72>
   17006:	2280      	movs	r2, #128	; 0x80
   17008:	00e4      	lsls	r4, r4, #3
   1700a:	04d2      	lsls	r2, r2, #19
   1700c:	4314      	orrs	r4, r2
   1700e:	227f      	movs	r2, #127	; 0x7f
   17010:	4252      	negs	r2, r2
   17012:	4690      	mov	r8, r2
   17014:	4498      	add	r8, r3
   17016:	2300      	movs	r3, #0
   17018:	4699      	mov	r9, r3
   1701a:	469b      	mov	fp, r3
   1701c:	027d      	lsls	r5, r7, #9
   1701e:	0078      	lsls	r0, r7, #1
   17020:	0ffb      	lsrs	r3, r7, #31
   17022:	0a6d      	lsrs	r5, r5, #9
   17024:	0e00      	lsrs	r0, r0, #24
   17026:	9300      	str	r3, [sp, #0]
   17028:	d024      	beq.n	17074 <__aeabi_fdiv+0x90>
   1702a:	28ff      	cmp	r0, #255	; 0xff
   1702c:	d046      	beq.n	170bc <__aeabi_fdiv+0xd8>
   1702e:	2380      	movs	r3, #128	; 0x80
   17030:	2100      	movs	r1, #0
   17032:	00ed      	lsls	r5, r5, #3
   17034:	04db      	lsls	r3, r3, #19
   17036:	431d      	orrs	r5, r3
   17038:	387f      	subs	r0, #127	; 0x7f
   1703a:	4647      	mov	r7, r8
   1703c:	1a38      	subs	r0, r7, r0
   1703e:	464f      	mov	r7, r9
   17040:	430f      	orrs	r7, r1
   17042:	00bf      	lsls	r7, r7, #2
   17044:	46b9      	mov	r9, r7
   17046:	0033      	movs	r3, r6
   17048:	9a00      	ldr	r2, [sp, #0]
   1704a:	4f87      	ldr	r7, [pc, #540]	; (17268 <__aeabi_fdiv+0x284>)
   1704c:	4053      	eors	r3, r2
   1704e:	464a      	mov	r2, r9
   17050:	58ba      	ldr	r2, [r7, r2]
   17052:	9301      	str	r3, [sp, #4]
   17054:	4697      	mov	pc, r2
   17056:	2c00      	cmp	r4, #0
   17058:	d14e      	bne.n	170f8 <__aeabi_fdiv+0x114>
   1705a:	2308      	movs	r3, #8
   1705c:	4699      	mov	r9, r3
   1705e:	33f7      	adds	r3, #247	; 0xf7
   17060:	4698      	mov	r8, r3
   17062:	3bfd      	subs	r3, #253	; 0xfd
   17064:	469b      	mov	fp, r3
   17066:	027d      	lsls	r5, r7, #9
   17068:	0078      	lsls	r0, r7, #1
   1706a:	0ffb      	lsrs	r3, r7, #31
   1706c:	0a6d      	lsrs	r5, r5, #9
   1706e:	0e00      	lsrs	r0, r0, #24
   17070:	9300      	str	r3, [sp, #0]
   17072:	d1da      	bne.n	1702a <__aeabi_fdiv+0x46>
   17074:	2d00      	cmp	r5, #0
   17076:	d126      	bne.n	170c6 <__aeabi_fdiv+0xe2>
   17078:	2000      	movs	r0, #0
   1707a:	2101      	movs	r1, #1
   1707c:	0033      	movs	r3, r6
   1707e:	9a00      	ldr	r2, [sp, #0]
   17080:	4f7a      	ldr	r7, [pc, #488]	; (1726c <__aeabi_fdiv+0x288>)
   17082:	4053      	eors	r3, r2
   17084:	4642      	mov	r2, r8
   17086:	1a10      	subs	r0, r2, r0
   17088:	464a      	mov	r2, r9
   1708a:	430a      	orrs	r2, r1
   1708c:	0092      	lsls	r2, r2, #2
   1708e:	58ba      	ldr	r2, [r7, r2]
   17090:	001d      	movs	r5, r3
   17092:	4697      	mov	pc, r2
   17094:	9b00      	ldr	r3, [sp, #0]
   17096:	002c      	movs	r4, r5
   17098:	469a      	mov	sl, r3
   1709a:	468b      	mov	fp, r1
   1709c:	465b      	mov	r3, fp
   1709e:	2b02      	cmp	r3, #2
   170a0:	d131      	bne.n	17106 <__aeabi_fdiv+0x122>
   170a2:	4653      	mov	r3, sl
   170a4:	21ff      	movs	r1, #255	; 0xff
   170a6:	2400      	movs	r4, #0
   170a8:	e038      	b.n	1711c <__aeabi_fdiv+0x138>
   170aa:	2c00      	cmp	r4, #0
   170ac:	d117      	bne.n	170de <__aeabi_fdiv+0xfa>
   170ae:	2304      	movs	r3, #4
   170b0:	4699      	mov	r9, r3
   170b2:	2300      	movs	r3, #0
   170b4:	4698      	mov	r8, r3
   170b6:	3301      	adds	r3, #1
   170b8:	469b      	mov	fp, r3
   170ba:	e7af      	b.n	1701c <__aeabi_fdiv+0x38>
   170bc:	20ff      	movs	r0, #255	; 0xff
   170be:	2d00      	cmp	r5, #0
   170c0:	d10b      	bne.n	170da <__aeabi_fdiv+0xf6>
   170c2:	2102      	movs	r1, #2
   170c4:	e7da      	b.n	1707c <__aeabi_fdiv+0x98>
   170c6:	0028      	movs	r0, r5
   170c8:	f002 fac8 	bl	1965c <__clzsi2>
   170cc:	1f43      	subs	r3, r0, #5
   170ce:	409d      	lsls	r5, r3
   170d0:	2376      	movs	r3, #118	; 0x76
   170d2:	425b      	negs	r3, r3
   170d4:	1a18      	subs	r0, r3, r0
   170d6:	2100      	movs	r1, #0
   170d8:	e7af      	b.n	1703a <__aeabi_fdiv+0x56>
   170da:	2103      	movs	r1, #3
   170dc:	e7ad      	b.n	1703a <__aeabi_fdiv+0x56>
   170de:	0020      	movs	r0, r4
   170e0:	f002 fabc 	bl	1965c <__clzsi2>
   170e4:	1f43      	subs	r3, r0, #5
   170e6:	409c      	lsls	r4, r3
   170e8:	2376      	movs	r3, #118	; 0x76
   170ea:	425b      	negs	r3, r3
   170ec:	1a1b      	subs	r3, r3, r0
   170ee:	4698      	mov	r8, r3
   170f0:	2300      	movs	r3, #0
   170f2:	4699      	mov	r9, r3
   170f4:	469b      	mov	fp, r3
   170f6:	e791      	b.n	1701c <__aeabi_fdiv+0x38>
   170f8:	230c      	movs	r3, #12
   170fa:	4699      	mov	r9, r3
   170fc:	33f3      	adds	r3, #243	; 0xf3
   170fe:	4698      	mov	r8, r3
   17100:	3bfc      	subs	r3, #252	; 0xfc
   17102:	469b      	mov	fp, r3
   17104:	e78a      	b.n	1701c <__aeabi_fdiv+0x38>
   17106:	2b03      	cmp	r3, #3
   17108:	d100      	bne.n	1710c <__aeabi_fdiv+0x128>
   1710a:	e0a5      	b.n	17258 <__aeabi_fdiv+0x274>
   1710c:	4655      	mov	r5, sl
   1710e:	2b01      	cmp	r3, #1
   17110:	d000      	beq.n	17114 <__aeabi_fdiv+0x130>
   17112:	e081      	b.n	17218 <__aeabi_fdiv+0x234>
   17114:	2301      	movs	r3, #1
   17116:	2100      	movs	r1, #0
   17118:	2400      	movs	r4, #0
   1711a:	402b      	ands	r3, r5
   1711c:	0264      	lsls	r4, r4, #9
   1711e:	05c9      	lsls	r1, r1, #23
   17120:	0a60      	lsrs	r0, r4, #9
   17122:	07db      	lsls	r3, r3, #31
   17124:	4308      	orrs	r0, r1
   17126:	4318      	orrs	r0, r3
   17128:	b003      	add	sp, #12
   1712a:	bc3c      	pop	{r2, r3, r4, r5}
   1712c:	4690      	mov	r8, r2
   1712e:	4699      	mov	r9, r3
   17130:	46a2      	mov	sl, r4
   17132:	46ab      	mov	fp, r5
   17134:	bdf0      	pop	{r4, r5, r6, r7, pc}
   17136:	2480      	movs	r4, #128	; 0x80
   17138:	2300      	movs	r3, #0
   1713a:	03e4      	lsls	r4, r4, #15
   1713c:	21ff      	movs	r1, #255	; 0xff
   1713e:	e7ed      	b.n	1711c <__aeabi_fdiv+0x138>
   17140:	21ff      	movs	r1, #255	; 0xff
   17142:	2400      	movs	r4, #0
   17144:	e7ea      	b.n	1711c <__aeabi_fdiv+0x138>
   17146:	2301      	movs	r3, #1
   17148:	1a59      	subs	r1, r3, r1
   1714a:	291b      	cmp	r1, #27
   1714c:	dd66      	ble.n	1721c <__aeabi_fdiv+0x238>
   1714e:	9a01      	ldr	r2, [sp, #4]
   17150:	4013      	ands	r3, r2
   17152:	2100      	movs	r1, #0
   17154:	2400      	movs	r4, #0
   17156:	e7e1      	b.n	1711c <__aeabi_fdiv+0x138>
   17158:	2380      	movs	r3, #128	; 0x80
   1715a:	03db      	lsls	r3, r3, #15
   1715c:	421c      	tst	r4, r3
   1715e:	d038      	beq.n	171d2 <__aeabi_fdiv+0x1ee>
   17160:	421d      	tst	r5, r3
   17162:	d051      	beq.n	17208 <__aeabi_fdiv+0x224>
   17164:	431c      	orrs	r4, r3
   17166:	0264      	lsls	r4, r4, #9
   17168:	0a64      	lsrs	r4, r4, #9
   1716a:	0033      	movs	r3, r6
   1716c:	21ff      	movs	r1, #255	; 0xff
   1716e:	e7d5      	b.n	1711c <__aeabi_fdiv+0x138>
   17170:	0163      	lsls	r3, r4, #5
   17172:	016c      	lsls	r4, r5, #5
   17174:	42a3      	cmp	r3, r4
   17176:	d23b      	bcs.n	171f0 <__aeabi_fdiv+0x20c>
   17178:	261b      	movs	r6, #27
   1717a:	2100      	movs	r1, #0
   1717c:	3801      	subs	r0, #1
   1717e:	2501      	movs	r5, #1
   17180:	001f      	movs	r7, r3
   17182:	0049      	lsls	r1, r1, #1
   17184:	005b      	lsls	r3, r3, #1
   17186:	2f00      	cmp	r7, #0
   17188:	db01      	blt.n	1718e <__aeabi_fdiv+0x1aa>
   1718a:	429c      	cmp	r4, r3
   1718c:	d801      	bhi.n	17192 <__aeabi_fdiv+0x1ae>
   1718e:	1b1b      	subs	r3, r3, r4
   17190:	4329      	orrs	r1, r5
   17192:	3e01      	subs	r6, #1
   17194:	2e00      	cmp	r6, #0
   17196:	d1f3      	bne.n	17180 <__aeabi_fdiv+0x19c>
   17198:	001c      	movs	r4, r3
   1719a:	1e63      	subs	r3, r4, #1
   1719c:	419c      	sbcs	r4, r3
   1719e:	430c      	orrs	r4, r1
   171a0:	0001      	movs	r1, r0
   171a2:	317f      	adds	r1, #127	; 0x7f
   171a4:	2900      	cmp	r1, #0
   171a6:	ddce      	ble.n	17146 <__aeabi_fdiv+0x162>
   171a8:	0763      	lsls	r3, r4, #29
   171aa:	d004      	beq.n	171b6 <__aeabi_fdiv+0x1d2>
   171ac:	230f      	movs	r3, #15
   171ae:	4023      	ands	r3, r4
   171b0:	2b04      	cmp	r3, #4
   171b2:	d000      	beq.n	171b6 <__aeabi_fdiv+0x1d2>
   171b4:	3404      	adds	r4, #4
   171b6:	0123      	lsls	r3, r4, #4
   171b8:	d503      	bpl.n	171c2 <__aeabi_fdiv+0x1de>
   171ba:	0001      	movs	r1, r0
   171bc:	4b2c      	ldr	r3, [pc, #176]	; (17270 <__aeabi_fdiv+0x28c>)
   171be:	3180      	adds	r1, #128	; 0x80
   171c0:	401c      	ands	r4, r3
   171c2:	29fe      	cmp	r1, #254	; 0xfe
   171c4:	dd0d      	ble.n	171e2 <__aeabi_fdiv+0x1fe>
   171c6:	2301      	movs	r3, #1
   171c8:	9a01      	ldr	r2, [sp, #4]
   171ca:	21ff      	movs	r1, #255	; 0xff
   171cc:	4013      	ands	r3, r2
   171ce:	2400      	movs	r4, #0
   171d0:	e7a4      	b.n	1711c <__aeabi_fdiv+0x138>
   171d2:	2380      	movs	r3, #128	; 0x80
   171d4:	03db      	lsls	r3, r3, #15
   171d6:	431c      	orrs	r4, r3
   171d8:	0264      	lsls	r4, r4, #9
   171da:	0a64      	lsrs	r4, r4, #9
   171dc:	0033      	movs	r3, r6
   171de:	21ff      	movs	r1, #255	; 0xff
   171e0:	e79c      	b.n	1711c <__aeabi_fdiv+0x138>
   171e2:	2301      	movs	r3, #1
   171e4:	9a01      	ldr	r2, [sp, #4]
   171e6:	01a4      	lsls	r4, r4, #6
   171e8:	0a64      	lsrs	r4, r4, #9
   171ea:	b2c9      	uxtb	r1, r1
   171ec:	4013      	ands	r3, r2
   171ee:	e795      	b.n	1711c <__aeabi_fdiv+0x138>
   171f0:	1b1b      	subs	r3, r3, r4
   171f2:	261a      	movs	r6, #26
   171f4:	2101      	movs	r1, #1
   171f6:	e7c2      	b.n	1717e <__aeabi_fdiv+0x19a>
   171f8:	9b00      	ldr	r3, [sp, #0]
   171fa:	468b      	mov	fp, r1
   171fc:	469a      	mov	sl, r3
   171fe:	2400      	movs	r4, #0
   17200:	e74c      	b.n	1709c <__aeabi_fdiv+0xb8>
   17202:	0263      	lsls	r3, r4, #9
   17204:	d5e5      	bpl.n	171d2 <__aeabi_fdiv+0x1ee>
   17206:	2500      	movs	r5, #0
   17208:	2480      	movs	r4, #128	; 0x80
   1720a:	03e4      	lsls	r4, r4, #15
   1720c:	432c      	orrs	r4, r5
   1720e:	0264      	lsls	r4, r4, #9
   17210:	0a64      	lsrs	r4, r4, #9
   17212:	9b00      	ldr	r3, [sp, #0]
   17214:	21ff      	movs	r1, #255	; 0xff
   17216:	e781      	b.n	1711c <__aeabi_fdiv+0x138>
   17218:	9501      	str	r5, [sp, #4]
   1721a:	e7c1      	b.n	171a0 <__aeabi_fdiv+0x1bc>
   1721c:	0023      	movs	r3, r4
   1721e:	2020      	movs	r0, #32
   17220:	40cb      	lsrs	r3, r1
   17222:	1a41      	subs	r1, r0, r1
   17224:	408c      	lsls	r4, r1
   17226:	1e61      	subs	r1, r4, #1
   17228:	418c      	sbcs	r4, r1
   1722a:	431c      	orrs	r4, r3
   1722c:	0763      	lsls	r3, r4, #29
   1722e:	d004      	beq.n	1723a <__aeabi_fdiv+0x256>
   17230:	230f      	movs	r3, #15
   17232:	4023      	ands	r3, r4
   17234:	2b04      	cmp	r3, #4
   17236:	d000      	beq.n	1723a <__aeabi_fdiv+0x256>
   17238:	3404      	adds	r4, #4
   1723a:	0163      	lsls	r3, r4, #5
   1723c:	d505      	bpl.n	1724a <__aeabi_fdiv+0x266>
   1723e:	2301      	movs	r3, #1
   17240:	9a01      	ldr	r2, [sp, #4]
   17242:	2101      	movs	r1, #1
   17244:	4013      	ands	r3, r2
   17246:	2400      	movs	r4, #0
   17248:	e768      	b.n	1711c <__aeabi_fdiv+0x138>
   1724a:	2301      	movs	r3, #1
   1724c:	9a01      	ldr	r2, [sp, #4]
   1724e:	01a4      	lsls	r4, r4, #6
   17250:	0a64      	lsrs	r4, r4, #9
   17252:	4013      	ands	r3, r2
   17254:	2100      	movs	r1, #0
   17256:	e761      	b.n	1711c <__aeabi_fdiv+0x138>
   17258:	2380      	movs	r3, #128	; 0x80
   1725a:	03db      	lsls	r3, r3, #15
   1725c:	431c      	orrs	r4, r3
   1725e:	0264      	lsls	r4, r4, #9
   17260:	0a64      	lsrs	r4, r4, #9
   17262:	4653      	mov	r3, sl
   17264:	21ff      	movs	r1, #255	; 0xff
   17266:	e759      	b.n	1711c <__aeabi_fdiv+0x138>
   17268:	0002041c 	.word	0x0002041c
   1726c:	0002045c 	.word	0x0002045c
   17270:	f7ffffff 	.word	0xf7ffffff

00017274 <__eqsf2>:
   17274:	b570      	push	{r4, r5, r6, lr}
   17276:	0042      	lsls	r2, r0, #1
   17278:	0245      	lsls	r5, r0, #9
   1727a:	024e      	lsls	r6, r1, #9
   1727c:	004c      	lsls	r4, r1, #1
   1727e:	0fc3      	lsrs	r3, r0, #31
   17280:	0a6d      	lsrs	r5, r5, #9
   17282:	0e12      	lsrs	r2, r2, #24
   17284:	0a76      	lsrs	r6, r6, #9
   17286:	0e24      	lsrs	r4, r4, #24
   17288:	0fc9      	lsrs	r1, r1, #31
   1728a:	2001      	movs	r0, #1
   1728c:	2aff      	cmp	r2, #255	; 0xff
   1728e:	d006      	beq.n	1729e <__eqsf2+0x2a>
   17290:	2cff      	cmp	r4, #255	; 0xff
   17292:	d003      	beq.n	1729c <__eqsf2+0x28>
   17294:	42a2      	cmp	r2, r4
   17296:	d101      	bne.n	1729c <__eqsf2+0x28>
   17298:	42b5      	cmp	r5, r6
   1729a:	d006      	beq.n	172aa <__eqsf2+0x36>
   1729c:	bd70      	pop	{r4, r5, r6, pc}
   1729e:	2d00      	cmp	r5, #0
   172a0:	d1fc      	bne.n	1729c <__eqsf2+0x28>
   172a2:	2cff      	cmp	r4, #255	; 0xff
   172a4:	d1fa      	bne.n	1729c <__eqsf2+0x28>
   172a6:	2e00      	cmp	r6, #0
   172a8:	d1f8      	bne.n	1729c <__eqsf2+0x28>
   172aa:	428b      	cmp	r3, r1
   172ac:	d006      	beq.n	172bc <__eqsf2+0x48>
   172ae:	2001      	movs	r0, #1
   172b0:	2a00      	cmp	r2, #0
   172b2:	d1f3      	bne.n	1729c <__eqsf2+0x28>
   172b4:	0028      	movs	r0, r5
   172b6:	1e45      	subs	r5, r0, #1
   172b8:	41a8      	sbcs	r0, r5
   172ba:	e7ef      	b.n	1729c <__eqsf2+0x28>
   172bc:	2000      	movs	r0, #0
   172be:	e7ed      	b.n	1729c <__eqsf2+0x28>

000172c0 <__gesf2>:
   172c0:	b5f0      	push	{r4, r5, r6, r7, lr}
   172c2:	0042      	lsls	r2, r0, #1
   172c4:	0245      	lsls	r5, r0, #9
   172c6:	024c      	lsls	r4, r1, #9
   172c8:	0fc3      	lsrs	r3, r0, #31
   172ca:	0048      	lsls	r0, r1, #1
   172cc:	0a6d      	lsrs	r5, r5, #9
   172ce:	0e12      	lsrs	r2, r2, #24
   172d0:	0a64      	lsrs	r4, r4, #9
   172d2:	0e00      	lsrs	r0, r0, #24
   172d4:	0fc9      	lsrs	r1, r1, #31
   172d6:	2aff      	cmp	r2, #255	; 0xff
   172d8:	d01e      	beq.n	17318 <__gesf2+0x58>
   172da:	28ff      	cmp	r0, #255	; 0xff
   172dc:	d021      	beq.n	17322 <__gesf2+0x62>
   172de:	2a00      	cmp	r2, #0
   172e0:	d10a      	bne.n	172f8 <__gesf2+0x38>
   172e2:	426e      	negs	r6, r5
   172e4:	416e      	adcs	r6, r5
   172e6:	b2f6      	uxtb	r6, r6
   172e8:	2800      	cmp	r0, #0
   172ea:	d10f      	bne.n	1730c <__gesf2+0x4c>
   172ec:	2c00      	cmp	r4, #0
   172ee:	d10d      	bne.n	1730c <__gesf2+0x4c>
   172f0:	2000      	movs	r0, #0
   172f2:	2d00      	cmp	r5, #0
   172f4:	d009      	beq.n	1730a <__gesf2+0x4a>
   172f6:	e005      	b.n	17304 <__gesf2+0x44>
   172f8:	2800      	cmp	r0, #0
   172fa:	d101      	bne.n	17300 <__gesf2+0x40>
   172fc:	2c00      	cmp	r4, #0
   172fe:	d001      	beq.n	17304 <__gesf2+0x44>
   17300:	428b      	cmp	r3, r1
   17302:	d011      	beq.n	17328 <__gesf2+0x68>
   17304:	2101      	movs	r1, #1
   17306:	4258      	negs	r0, r3
   17308:	4308      	orrs	r0, r1
   1730a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1730c:	2e00      	cmp	r6, #0
   1730e:	d0f7      	beq.n	17300 <__gesf2+0x40>
   17310:	2001      	movs	r0, #1
   17312:	3901      	subs	r1, #1
   17314:	4308      	orrs	r0, r1
   17316:	e7f8      	b.n	1730a <__gesf2+0x4a>
   17318:	2d00      	cmp	r5, #0
   1731a:	d0de      	beq.n	172da <__gesf2+0x1a>
   1731c:	2002      	movs	r0, #2
   1731e:	4240      	negs	r0, r0
   17320:	e7f3      	b.n	1730a <__gesf2+0x4a>
   17322:	2c00      	cmp	r4, #0
   17324:	d0db      	beq.n	172de <__gesf2+0x1e>
   17326:	e7f9      	b.n	1731c <__gesf2+0x5c>
   17328:	4282      	cmp	r2, r0
   1732a:	dceb      	bgt.n	17304 <__gesf2+0x44>
   1732c:	db04      	blt.n	17338 <__gesf2+0x78>
   1732e:	42a5      	cmp	r5, r4
   17330:	d8e8      	bhi.n	17304 <__gesf2+0x44>
   17332:	2000      	movs	r0, #0
   17334:	42a5      	cmp	r5, r4
   17336:	d2e8      	bcs.n	1730a <__gesf2+0x4a>
   17338:	2101      	movs	r1, #1
   1733a:	1e58      	subs	r0, r3, #1
   1733c:	4308      	orrs	r0, r1
   1733e:	e7e4      	b.n	1730a <__gesf2+0x4a>

00017340 <__lesf2>:
   17340:	b5f0      	push	{r4, r5, r6, r7, lr}
   17342:	0042      	lsls	r2, r0, #1
   17344:	024d      	lsls	r5, r1, #9
   17346:	004c      	lsls	r4, r1, #1
   17348:	0246      	lsls	r6, r0, #9
   1734a:	0a76      	lsrs	r6, r6, #9
   1734c:	0e12      	lsrs	r2, r2, #24
   1734e:	0fc3      	lsrs	r3, r0, #31
   17350:	0a6d      	lsrs	r5, r5, #9
   17352:	0e24      	lsrs	r4, r4, #24
   17354:	0fc9      	lsrs	r1, r1, #31
   17356:	2aff      	cmp	r2, #255	; 0xff
   17358:	d016      	beq.n	17388 <__lesf2+0x48>
   1735a:	2cff      	cmp	r4, #255	; 0xff
   1735c:	d018      	beq.n	17390 <__lesf2+0x50>
   1735e:	2a00      	cmp	r2, #0
   17360:	d10a      	bne.n	17378 <__lesf2+0x38>
   17362:	4270      	negs	r0, r6
   17364:	4170      	adcs	r0, r6
   17366:	b2c0      	uxtb	r0, r0
   17368:	2c00      	cmp	r4, #0
   1736a:	d015      	beq.n	17398 <__lesf2+0x58>
   1736c:	2800      	cmp	r0, #0
   1736e:	d005      	beq.n	1737c <__lesf2+0x3c>
   17370:	2001      	movs	r0, #1
   17372:	3901      	subs	r1, #1
   17374:	4308      	orrs	r0, r1
   17376:	bdf0      	pop	{r4, r5, r6, r7, pc}
   17378:	2c00      	cmp	r4, #0
   1737a:	d013      	beq.n	173a4 <__lesf2+0x64>
   1737c:	4299      	cmp	r1, r3
   1737e:	d014      	beq.n	173aa <__lesf2+0x6a>
   17380:	2001      	movs	r0, #1
   17382:	425b      	negs	r3, r3
   17384:	4318      	orrs	r0, r3
   17386:	e7f6      	b.n	17376 <__lesf2+0x36>
   17388:	2002      	movs	r0, #2
   1738a:	2e00      	cmp	r6, #0
   1738c:	d1f3      	bne.n	17376 <__lesf2+0x36>
   1738e:	e7e4      	b.n	1735a <__lesf2+0x1a>
   17390:	2002      	movs	r0, #2
   17392:	2d00      	cmp	r5, #0
   17394:	d1ef      	bne.n	17376 <__lesf2+0x36>
   17396:	e7e2      	b.n	1735e <__lesf2+0x1e>
   17398:	2d00      	cmp	r5, #0
   1739a:	d1e7      	bne.n	1736c <__lesf2+0x2c>
   1739c:	2000      	movs	r0, #0
   1739e:	2e00      	cmp	r6, #0
   173a0:	d0e9      	beq.n	17376 <__lesf2+0x36>
   173a2:	e7ed      	b.n	17380 <__lesf2+0x40>
   173a4:	2d00      	cmp	r5, #0
   173a6:	d1e9      	bne.n	1737c <__lesf2+0x3c>
   173a8:	e7ea      	b.n	17380 <__lesf2+0x40>
   173aa:	42a2      	cmp	r2, r4
   173ac:	dc06      	bgt.n	173bc <__lesf2+0x7c>
   173ae:	dbdf      	blt.n	17370 <__lesf2+0x30>
   173b0:	42ae      	cmp	r6, r5
   173b2:	d803      	bhi.n	173bc <__lesf2+0x7c>
   173b4:	2000      	movs	r0, #0
   173b6:	42ae      	cmp	r6, r5
   173b8:	d3da      	bcc.n	17370 <__lesf2+0x30>
   173ba:	e7dc      	b.n	17376 <__lesf2+0x36>
   173bc:	2001      	movs	r0, #1
   173be:	4249      	negs	r1, r1
   173c0:	4308      	orrs	r0, r1
   173c2:	e7d8      	b.n	17376 <__lesf2+0x36>

000173c4 <__aeabi_fmul>:
   173c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   173c6:	4657      	mov	r7, sl
   173c8:	464e      	mov	r6, r9
   173ca:	4645      	mov	r5, r8
   173cc:	46de      	mov	lr, fp
   173ce:	b5e0      	push	{r5, r6, r7, lr}
   173d0:	0247      	lsls	r7, r0, #9
   173d2:	0046      	lsls	r6, r0, #1
   173d4:	4688      	mov	r8, r1
   173d6:	0a7f      	lsrs	r7, r7, #9
   173d8:	0e36      	lsrs	r6, r6, #24
   173da:	0fc4      	lsrs	r4, r0, #31
   173dc:	2e00      	cmp	r6, #0
   173de:	d047      	beq.n	17470 <__aeabi_fmul+0xac>
   173e0:	2eff      	cmp	r6, #255	; 0xff
   173e2:	d024      	beq.n	1742e <__aeabi_fmul+0x6a>
   173e4:	00fb      	lsls	r3, r7, #3
   173e6:	2780      	movs	r7, #128	; 0x80
   173e8:	04ff      	lsls	r7, r7, #19
   173ea:	431f      	orrs	r7, r3
   173ec:	2300      	movs	r3, #0
   173ee:	4699      	mov	r9, r3
   173f0:	469a      	mov	sl, r3
   173f2:	3e7f      	subs	r6, #127	; 0x7f
   173f4:	4643      	mov	r3, r8
   173f6:	025d      	lsls	r5, r3, #9
   173f8:	0058      	lsls	r0, r3, #1
   173fa:	0fdb      	lsrs	r3, r3, #31
   173fc:	0a6d      	lsrs	r5, r5, #9
   173fe:	0e00      	lsrs	r0, r0, #24
   17400:	4698      	mov	r8, r3
   17402:	d043      	beq.n	1748c <__aeabi_fmul+0xc8>
   17404:	28ff      	cmp	r0, #255	; 0xff
   17406:	d03b      	beq.n	17480 <__aeabi_fmul+0xbc>
   17408:	00eb      	lsls	r3, r5, #3
   1740a:	2580      	movs	r5, #128	; 0x80
   1740c:	2200      	movs	r2, #0
   1740e:	04ed      	lsls	r5, r5, #19
   17410:	431d      	orrs	r5, r3
   17412:	387f      	subs	r0, #127	; 0x7f
   17414:	1836      	adds	r6, r6, r0
   17416:	1c73      	adds	r3, r6, #1
   17418:	4641      	mov	r1, r8
   1741a:	469b      	mov	fp, r3
   1741c:	464b      	mov	r3, r9
   1741e:	4061      	eors	r1, r4
   17420:	4313      	orrs	r3, r2
   17422:	2b0f      	cmp	r3, #15
   17424:	d864      	bhi.n	174f0 <__aeabi_fmul+0x12c>
   17426:	4875      	ldr	r0, [pc, #468]	; (175fc <__aeabi_fmul+0x238>)
   17428:	009b      	lsls	r3, r3, #2
   1742a:	58c3      	ldr	r3, [r0, r3]
   1742c:	469f      	mov	pc, r3
   1742e:	2f00      	cmp	r7, #0
   17430:	d142      	bne.n	174b8 <__aeabi_fmul+0xf4>
   17432:	2308      	movs	r3, #8
   17434:	4699      	mov	r9, r3
   17436:	3b06      	subs	r3, #6
   17438:	26ff      	movs	r6, #255	; 0xff
   1743a:	469a      	mov	sl, r3
   1743c:	e7da      	b.n	173f4 <__aeabi_fmul+0x30>
   1743e:	4641      	mov	r1, r8
   17440:	2a02      	cmp	r2, #2
   17442:	d028      	beq.n	17496 <__aeabi_fmul+0xd2>
   17444:	2a03      	cmp	r2, #3
   17446:	d100      	bne.n	1744a <__aeabi_fmul+0x86>
   17448:	e0ce      	b.n	175e8 <__aeabi_fmul+0x224>
   1744a:	2a01      	cmp	r2, #1
   1744c:	d000      	beq.n	17450 <__aeabi_fmul+0x8c>
   1744e:	e0ac      	b.n	175aa <__aeabi_fmul+0x1e6>
   17450:	4011      	ands	r1, r2
   17452:	2000      	movs	r0, #0
   17454:	2200      	movs	r2, #0
   17456:	b2cc      	uxtb	r4, r1
   17458:	0240      	lsls	r0, r0, #9
   1745a:	05d2      	lsls	r2, r2, #23
   1745c:	0a40      	lsrs	r0, r0, #9
   1745e:	07e4      	lsls	r4, r4, #31
   17460:	4310      	orrs	r0, r2
   17462:	4320      	orrs	r0, r4
   17464:	bc3c      	pop	{r2, r3, r4, r5}
   17466:	4690      	mov	r8, r2
   17468:	4699      	mov	r9, r3
   1746a:	46a2      	mov	sl, r4
   1746c:	46ab      	mov	fp, r5
   1746e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   17470:	2f00      	cmp	r7, #0
   17472:	d115      	bne.n	174a0 <__aeabi_fmul+0xdc>
   17474:	2304      	movs	r3, #4
   17476:	4699      	mov	r9, r3
   17478:	3b03      	subs	r3, #3
   1747a:	2600      	movs	r6, #0
   1747c:	469a      	mov	sl, r3
   1747e:	e7b9      	b.n	173f4 <__aeabi_fmul+0x30>
   17480:	20ff      	movs	r0, #255	; 0xff
   17482:	2202      	movs	r2, #2
   17484:	2d00      	cmp	r5, #0
   17486:	d0c5      	beq.n	17414 <__aeabi_fmul+0x50>
   17488:	2203      	movs	r2, #3
   1748a:	e7c3      	b.n	17414 <__aeabi_fmul+0x50>
   1748c:	2d00      	cmp	r5, #0
   1748e:	d119      	bne.n	174c4 <__aeabi_fmul+0x100>
   17490:	2000      	movs	r0, #0
   17492:	2201      	movs	r2, #1
   17494:	e7be      	b.n	17414 <__aeabi_fmul+0x50>
   17496:	2401      	movs	r4, #1
   17498:	22ff      	movs	r2, #255	; 0xff
   1749a:	400c      	ands	r4, r1
   1749c:	2000      	movs	r0, #0
   1749e:	e7db      	b.n	17458 <__aeabi_fmul+0x94>
   174a0:	0038      	movs	r0, r7
   174a2:	f002 f8db 	bl	1965c <__clzsi2>
   174a6:	2676      	movs	r6, #118	; 0x76
   174a8:	1f43      	subs	r3, r0, #5
   174aa:	409f      	lsls	r7, r3
   174ac:	2300      	movs	r3, #0
   174ae:	4276      	negs	r6, r6
   174b0:	1a36      	subs	r6, r6, r0
   174b2:	4699      	mov	r9, r3
   174b4:	469a      	mov	sl, r3
   174b6:	e79d      	b.n	173f4 <__aeabi_fmul+0x30>
   174b8:	230c      	movs	r3, #12
   174ba:	4699      	mov	r9, r3
   174bc:	3b09      	subs	r3, #9
   174be:	26ff      	movs	r6, #255	; 0xff
   174c0:	469a      	mov	sl, r3
   174c2:	e797      	b.n	173f4 <__aeabi_fmul+0x30>
   174c4:	0028      	movs	r0, r5
   174c6:	f002 f8c9 	bl	1965c <__clzsi2>
   174ca:	1f43      	subs	r3, r0, #5
   174cc:	409d      	lsls	r5, r3
   174ce:	2376      	movs	r3, #118	; 0x76
   174d0:	425b      	negs	r3, r3
   174d2:	1a18      	subs	r0, r3, r0
   174d4:	2200      	movs	r2, #0
   174d6:	e79d      	b.n	17414 <__aeabi_fmul+0x50>
   174d8:	2080      	movs	r0, #128	; 0x80
   174da:	2400      	movs	r4, #0
   174dc:	03c0      	lsls	r0, r0, #15
   174de:	22ff      	movs	r2, #255	; 0xff
   174e0:	e7ba      	b.n	17458 <__aeabi_fmul+0x94>
   174e2:	003d      	movs	r5, r7
   174e4:	4652      	mov	r2, sl
   174e6:	e7ab      	b.n	17440 <__aeabi_fmul+0x7c>
   174e8:	003d      	movs	r5, r7
   174ea:	0021      	movs	r1, r4
   174ec:	4652      	mov	r2, sl
   174ee:	e7a7      	b.n	17440 <__aeabi_fmul+0x7c>
   174f0:	0c3b      	lsrs	r3, r7, #16
   174f2:	469c      	mov	ip, r3
   174f4:	042a      	lsls	r2, r5, #16
   174f6:	0c12      	lsrs	r2, r2, #16
   174f8:	0c2b      	lsrs	r3, r5, #16
   174fa:	0014      	movs	r4, r2
   174fc:	4660      	mov	r0, ip
   174fe:	4665      	mov	r5, ip
   17500:	043f      	lsls	r7, r7, #16
   17502:	0c3f      	lsrs	r7, r7, #16
   17504:	437c      	muls	r4, r7
   17506:	4342      	muls	r2, r0
   17508:	435d      	muls	r5, r3
   1750a:	437b      	muls	r3, r7
   1750c:	0c27      	lsrs	r7, r4, #16
   1750e:	189b      	adds	r3, r3, r2
   17510:	18ff      	adds	r7, r7, r3
   17512:	42ba      	cmp	r2, r7
   17514:	d903      	bls.n	1751e <__aeabi_fmul+0x15a>
   17516:	2380      	movs	r3, #128	; 0x80
   17518:	025b      	lsls	r3, r3, #9
   1751a:	469c      	mov	ip, r3
   1751c:	4465      	add	r5, ip
   1751e:	0424      	lsls	r4, r4, #16
   17520:	043a      	lsls	r2, r7, #16
   17522:	0c24      	lsrs	r4, r4, #16
   17524:	1912      	adds	r2, r2, r4
   17526:	0193      	lsls	r3, r2, #6
   17528:	1e5c      	subs	r4, r3, #1
   1752a:	41a3      	sbcs	r3, r4
   1752c:	0c3f      	lsrs	r7, r7, #16
   1752e:	0e92      	lsrs	r2, r2, #26
   17530:	197d      	adds	r5, r7, r5
   17532:	431a      	orrs	r2, r3
   17534:	01ad      	lsls	r5, r5, #6
   17536:	4315      	orrs	r5, r2
   17538:	012b      	lsls	r3, r5, #4
   1753a:	d504      	bpl.n	17546 <__aeabi_fmul+0x182>
   1753c:	2301      	movs	r3, #1
   1753e:	465e      	mov	r6, fp
   17540:	086a      	lsrs	r2, r5, #1
   17542:	401d      	ands	r5, r3
   17544:	4315      	orrs	r5, r2
   17546:	0032      	movs	r2, r6
   17548:	327f      	adds	r2, #127	; 0x7f
   1754a:	2a00      	cmp	r2, #0
   1754c:	dd25      	ble.n	1759a <__aeabi_fmul+0x1d6>
   1754e:	076b      	lsls	r3, r5, #29
   17550:	d004      	beq.n	1755c <__aeabi_fmul+0x198>
   17552:	230f      	movs	r3, #15
   17554:	402b      	ands	r3, r5
   17556:	2b04      	cmp	r3, #4
   17558:	d000      	beq.n	1755c <__aeabi_fmul+0x198>
   1755a:	3504      	adds	r5, #4
   1755c:	012b      	lsls	r3, r5, #4
   1755e:	d503      	bpl.n	17568 <__aeabi_fmul+0x1a4>
   17560:	0032      	movs	r2, r6
   17562:	4b27      	ldr	r3, [pc, #156]	; (17600 <__aeabi_fmul+0x23c>)
   17564:	3280      	adds	r2, #128	; 0x80
   17566:	401d      	ands	r5, r3
   17568:	2afe      	cmp	r2, #254	; 0xfe
   1756a:	dc94      	bgt.n	17496 <__aeabi_fmul+0xd2>
   1756c:	2401      	movs	r4, #1
   1756e:	01a8      	lsls	r0, r5, #6
   17570:	0a40      	lsrs	r0, r0, #9
   17572:	b2d2      	uxtb	r2, r2
   17574:	400c      	ands	r4, r1
   17576:	e76f      	b.n	17458 <__aeabi_fmul+0x94>
   17578:	2080      	movs	r0, #128	; 0x80
   1757a:	03c0      	lsls	r0, r0, #15
   1757c:	4207      	tst	r7, r0
   1757e:	d007      	beq.n	17590 <__aeabi_fmul+0x1cc>
   17580:	4205      	tst	r5, r0
   17582:	d105      	bne.n	17590 <__aeabi_fmul+0x1cc>
   17584:	4328      	orrs	r0, r5
   17586:	0240      	lsls	r0, r0, #9
   17588:	0a40      	lsrs	r0, r0, #9
   1758a:	4644      	mov	r4, r8
   1758c:	22ff      	movs	r2, #255	; 0xff
   1758e:	e763      	b.n	17458 <__aeabi_fmul+0x94>
   17590:	4338      	orrs	r0, r7
   17592:	0240      	lsls	r0, r0, #9
   17594:	0a40      	lsrs	r0, r0, #9
   17596:	22ff      	movs	r2, #255	; 0xff
   17598:	e75e      	b.n	17458 <__aeabi_fmul+0x94>
   1759a:	2401      	movs	r4, #1
   1759c:	1aa3      	subs	r3, r4, r2
   1759e:	2b1b      	cmp	r3, #27
   175a0:	dd05      	ble.n	175ae <__aeabi_fmul+0x1ea>
   175a2:	400c      	ands	r4, r1
   175a4:	2200      	movs	r2, #0
   175a6:	2000      	movs	r0, #0
   175a8:	e756      	b.n	17458 <__aeabi_fmul+0x94>
   175aa:	465e      	mov	r6, fp
   175ac:	e7cb      	b.n	17546 <__aeabi_fmul+0x182>
   175ae:	002a      	movs	r2, r5
   175b0:	2020      	movs	r0, #32
   175b2:	40da      	lsrs	r2, r3
   175b4:	1ac3      	subs	r3, r0, r3
   175b6:	409d      	lsls	r5, r3
   175b8:	002b      	movs	r3, r5
   175ba:	1e5d      	subs	r5, r3, #1
   175bc:	41ab      	sbcs	r3, r5
   175be:	4313      	orrs	r3, r2
   175c0:	075a      	lsls	r2, r3, #29
   175c2:	d004      	beq.n	175ce <__aeabi_fmul+0x20a>
   175c4:	220f      	movs	r2, #15
   175c6:	401a      	ands	r2, r3
   175c8:	2a04      	cmp	r2, #4
   175ca:	d000      	beq.n	175ce <__aeabi_fmul+0x20a>
   175cc:	3304      	adds	r3, #4
   175ce:	015a      	lsls	r2, r3, #5
   175d0:	d504      	bpl.n	175dc <__aeabi_fmul+0x218>
   175d2:	2401      	movs	r4, #1
   175d4:	2201      	movs	r2, #1
   175d6:	400c      	ands	r4, r1
   175d8:	2000      	movs	r0, #0
   175da:	e73d      	b.n	17458 <__aeabi_fmul+0x94>
   175dc:	2401      	movs	r4, #1
   175de:	019b      	lsls	r3, r3, #6
   175e0:	0a58      	lsrs	r0, r3, #9
   175e2:	400c      	ands	r4, r1
   175e4:	2200      	movs	r2, #0
   175e6:	e737      	b.n	17458 <__aeabi_fmul+0x94>
   175e8:	2080      	movs	r0, #128	; 0x80
   175ea:	2401      	movs	r4, #1
   175ec:	03c0      	lsls	r0, r0, #15
   175ee:	4328      	orrs	r0, r5
   175f0:	0240      	lsls	r0, r0, #9
   175f2:	0a40      	lsrs	r0, r0, #9
   175f4:	400c      	ands	r4, r1
   175f6:	22ff      	movs	r2, #255	; 0xff
   175f8:	e72e      	b.n	17458 <__aeabi_fmul+0x94>
   175fa:	46c0      	nop			; (mov r8, r8)
   175fc:	0002049c 	.word	0x0002049c
   17600:	f7ffffff 	.word	0xf7ffffff

00017604 <__aeabi_fsub>:
   17604:	b5f0      	push	{r4, r5, r6, r7, lr}
   17606:	464f      	mov	r7, r9
   17608:	46d6      	mov	lr, sl
   1760a:	4646      	mov	r6, r8
   1760c:	0044      	lsls	r4, r0, #1
   1760e:	b5c0      	push	{r6, r7, lr}
   17610:	0fc2      	lsrs	r2, r0, #31
   17612:	0247      	lsls	r7, r0, #9
   17614:	0248      	lsls	r0, r1, #9
   17616:	0a40      	lsrs	r0, r0, #9
   17618:	4684      	mov	ip, r0
   1761a:	4666      	mov	r6, ip
   1761c:	0a7b      	lsrs	r3, r7, #9
   1761e:	0048      	lsls	r0, r1, #1
   17620:	0fc9      	lsrs	r1, r1, #31
   17622:	469a      	mov	sl, r3
   17624:	0e24      	lsrs	r4, r4, #24
   17626:	0015      	movs	r5, r2
   17628:	00db      	lsls	r3, r3, #3
   1762a:	0e00      	lsrs	r0, r0, #24
   1762c:	4689      	mov	r9, r1
   1762e:	00f6      	lsls	r6, r6, #3
   17630:	28ff      	cmp	r0, #255	; 0xff
   17632:	d100      	bne.n	17636 <__aeabi_fsub+0x32>
   17634:	e08f      	b.n	17756 <__aeabi_fsub+0x152>
   17636:	2101      	movs	r1, #1
   17638:	464f      	mov	r7, r9
   1763a:	404f      	eors	r7, r1
   1763c:	0039      	movs	r1, r7
   1763e:	4291      	cmp	r1, r2
   17640:	d066      	beq.n	17710 <__aeabi_fsub+0x10c>
   17642:	1a22      	subs	r2, r4, r0
   17644:	2a00      	cmp	r2, #0
   17646:	dc00      	bgt.n	1764a <__aeabi_fsub+0x46>
   17648:	e09d      	b.n	17786 <__aeabi_fsub+0x182>
   1764a:	2800      	cmp	r0, #0
   1764c:	d13d      	bne.n	176ca <__aeabi_fsub+0xc6>
   1764e:	2e00      	cmp	r6, #0
   17650:	d100      	bne.n	17654 <__aeabi_fsub+0x50>
   17652:	e08b      	b.n	1776c <__aeabi_fsub+0x168>
   17654:	1e51      	subs	r1, r2, #1
   17656:	2900      	cmp	r1, #0
   17658:	d000      	beq.n	1765c <__aeabi_fsub+0x58>
   1765a:	e0b5      	b.n	177c8 <__aeabi_fsub+0x1c4>
   1765c:	2401      	movs	r4, #1
   1765e:	1b9b      	subs	r3, r3, r6
   17660:	015a      	lsls	r2, r3, #5
   17662:	d544      	bpl.n	176ee <__aeabi_fsub+0xea>
   17664:	019b      	lsls	r3, r3, #6
   17666:	099f      	lsrs	r7, r3, #6
   17668:	0038      	movs	r0, r7
   1766a:	f001 fff7 	bl	1965c <__clzsi2>
   1766e:	3805      	subs	r0, #5
   17670:	4087      	lsls	r7, r0
   17672:	4284      	cmp	r4, r0
   17674:	dd00      	ble.n	17678 <__aeabi_fsub+0x74>
   17676:	e096      	b.n	177a6 <__aeabi_fsub+0x1a2>
   17678:	1b04      	subs	r4, r0, r4
   1767a:	003a      	movs	r2, r7
   1767c:	2020      	movs	r0, #32
   1767e:	3401      	adds	r4, #1
   17680:	40e2      	lsrs	r2, r4
   17682:	1b04      	subs	r4, r0, r4
   17684:	40a7      	lsls	r7, r4
   17686:	003b      	movs	r3, r7
   17688:	1e5f      	subs	r7, r3, #1
   1768a:	41bb      	sbcs	r3, r7
   1768c:	2400      	movs	r4, #0
   1768e:	4313      	orrs	r3, r2
   17690:	075a      	lsls	r2, r3, #29
   17692:	d004      	beq.n	1769e <__aeabi_fsub+0x9a>
   17694:	220f      	movs	r2, #15
   17696:	401a      	ands	r2, r3
   17698:	2a04      	cmp	r2, #4
   1769a:	d000      	beq.n	1769e <__aeabi_fsub+0x9a>
   1769c:	3304      	adds	r3, #4
   1769e:	015a      	lsls	r2, r3, #5
   176a0:	d527      	bpl.n	176f2 <__aeabi_fsub+0xee>
   176a2:	3401      	adds	r4, #1
   176a4:	2cff      	cmp	r4, #255	; 0xff
   176a6:	d100      	bne.n	176aa <__aeabi_fsub+0xa6>
   176a8:	e079      	b.n	1779e <__aeabi_fsub+0x19a>
   176aa:	2201      	movs	r2, #1
   176ac:	019b      	lsls	r3, r3, #6
   176ae:	0a5b      	lsrs	r3, r3, #9
   176b0:	b2e4      	uxtb	r4, r4
   176b2:	402a      	ands	r2, r5
   176b4:	025b      	lsls	r3, r3, #9
   176b6:	05e4      	lsls	r4, r4, #23
   176b8:	0a58      	lsrs	r0, r3, #9
   176ba:	07d2      	lsls	r2, r2, #31
   176bc:	4320      	orrs	r0, r4
   176be:	4310      	orrs	r0, r2
   176c0:	bc1c      	pop	{r2, r3, r4}
   176c2:	4690      	mov	r8, r2
   176c4:	4699      	mov	r9, r3
   176c6:	46a2      	mov	sl, r4
   176c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   176ca:	2cff      	cmp	r4, #255	; 0xff
   176cc:	d0e0      	beq.n	17690 <__aeabi_fsub+0x8c>
   176ce:	2180      	movs	r1, #128	; 0x80
   176d0:	04c9      	lsls	r1, r1, #19
   176d2:	430e      	orrs	r6, r1
   176d4:	2a1b      	cmp	r2, #27
   176d6:	dc7b      	bgt.n	177d0 <__aeabi_fsub+0x1cc>
   176d8:	0031      	movs	r1, r6
   176da:	2020      	movs	r0, #32
   176dc:	40d1      	lsrs	r1, r2
   176de:	1a82      	subs	r2, r0, r2
   176e0:	4096      	lsls	r6, r2
   176e2:	1e72      	subs	r2, r6, #1
   176e4:	4196      	sbcs	r6, r2
   176e6:	430e      	orrs	r6, r1
   176e8:	1b9b      	subs	r3, r3, r6
   176ea:	015a      	lsls	r2, r3, #5
   176ec:	d4ba      	bmi.n	17664 <__aeabi_fsub+0x60>
   176ee:	075a      	lsls	r2, r3, #29
   176f0:	d1d0      	bne.n	17694 <__aeabi_fsub+0x90>
   176f2:	2201      	movs	r2, #1
   176f4:	08df      	lsrs	r7, r3, #3
   176f6:	402a      	ands	r2, r5
   176f8:	2cff      	cmp	r4, #255	; 0xff
   176fa:	d133      	bne.n	17764 <__aeabi_fsub+0x160>
   176fc:	2f00      	cmp	r7, #0
   176fe:	d100      	bne.n	17702 <__aeabi_fsub+0xfe>
   17700:	e0a8      	b.n	17854 <__aeabi_fsub+0x250>
   17702:	2380      	movs	r3, #128	; 0x80
   17704:	03db      	lsls	r3, r3, #15
   17706:	433b      	orrs	r3, r7
   17708:	025b      	lsls	r3, r3, #9
   1770a:	0a5b      	lsrs	r3, r3, #9
   1770c:	24ff      	movs	r4, #255	; 0xff
   1770e:	e7d1      	b.n	176b4 <__aeabi_fsub+0xb0>
   17710:	1a21      	subs	r1, r4, r0
   17712:	2900      	cmp	r1, #0
   17714:	dd4c      	ble.n	177b0 <__aeabi_fsub+0x1ac>
   17716:	2800      	cmp	r0, #0
   17718:	d02a      	beq.n	17770 <__aeabi_fsub+0x16c>
   1771a:	2cff      	cmp	r4, #255	; 0xff
   1771c:	d0b8      	beq.n	17690 <__aeabi_fsub+0x8c>
   1771e:	2080      	movs	r0, #128	; 0x80
   17720:	04c0      	lsls	r0, r0, #19
   17722:	4306      	orrs	r6, r0
   17724:	291b      	cmp	r1, #27
   17726:	dd00      	ble.n	1772a <__aeabi_fsub+0x126>
   17728:	e0af      	b.n	1788a <__aeabi_fsub+0x286>
   1772a:	0030      	movs	r0, r6
   1772c:	2720      	movs	r7, #32
   1772e:	40c8      	lsrs	r0, r1
   17730:	1a79      	subs	r1, r7, r1
   17732:	408e      	lsls	r6, r1
   17734:	1e71      	subs	r1, r6, #1
   17736:	418e      	sbcs	r6, r1
   17738:	4306      	orrs	r6, r0
   1773a:	199b      	adds	r3, r3, r6
   1773c:	0159      	lsls	r1, r3, #5
   1773e:	d5d6      	bpl.n	176ee <__aeabi_fsub+0xea>
   17740:	3401      	adds	r4, #1
   17742:	2cff      	cmp	r4, #255	; 0xff
   17744:	d100      	bne.n	17748 <__aeabi_fsub+0x144>
   17746:	e085      	b.n	17854 <__aeabi_fsub+0x250>
   17748:	2201      	movs	r2, #1
   1774a:	497a      	ldr	r1, [pc, #488]	; (17934 <__aeabi_fsub+0x330>)
   1774c:	401a      	ands	r2, r3
   1774e:	085b      	lsrs	r3, r3, #1
   17750:	400b      	ands	r3, r1
   17752:	4313      	orrs	r3, r2
   17754:	e79c      	b.n	17690 <__aeabi_fsub+0x8c>
   17756:	2e00      	cmp	r6, #0
   17758:	d000      	beq.n	1775c <__aeabi_fsub+0x158>
   1775a:	e770      	b.n	1763e <__aeabi_fsub+0x3a>
   1775c:	e76b      	b.n	17636 <__aeabi_fsub+0x32>
   1775e:	1e3b      	subs	r3, r7, #0
   17760:	d1c5      	bne.n	176ee <__aeabi_fsub+0xea>
   17762:	2200      	movs	r2, #0
   17764:	027b      	lsls	r3, r7, #9
   17766:	0a5b      	lsrs	r3, r3, #9
   17768:	b2e4      	uxtb	r4, r4
   1776a:	e7a3      	b.n	176b4 <__aeabi_fsub+0xb0>
   1776c:	0014      	movs	r4, r2
   1776e:	e78f      	b.n	17690 <__aeabi_fsub+0x8c>
   17770:	2e00      	cmp	r6, #0
   17772:	d04d      	beq.n	17810 <__aeabi_fsub+0x20c>
   17774:	1e48      	subs	r0, r1, #1
   17776:	2800      	cmp	r0, #0
   17778:	d157      	bne.n	1782a <__aeabi_fsub+0x226>
   1777a:	199b      	adds	r3, r3, r6
   1777c:	2401      	movs	r4, #1
   1777e:	015a      	lsls	r2, r3, #5
   17780:	d5b5      	bpl.n	176ee <__aeabi_fsub+0xea>
   17782:	2402      	movs	r4, #2
   17784:	e7e0      	b.n	17748 <__aeabi_fsub+0x144>
   17786:	2a00      	cmp	r2, #0
   17788:	d125      	bne.n	177d6 <__aeabi_fsub+0x1d2>
   1778a:	1c62      	adds	r2, r4, #1
   1778c:	b2d2      	uxtb	r2, r2
   1778e:	2a01      	cmp	r2, #1
   17790:	dd72      	ble.n	17878 <__aeabi_fsub+0x274>
   17792:	1b9f      	subs	r7, r3, r6
   17794:	017a      	lsls	r2, r7, #5
   17796:	d535      	bpl.n	17804 <__aeabi_fsub+0x200>
   17798:	1af7      	subs	r7, r6, r3
   1779a:	000d      	movs	r5, r1
   1779c:	e764      	b.n	17668 <__aeabi_fsub+0x64>
   1779e:	2201      	movs	r2, #1
   177a0:	2300      	movs	r3, #0
   177a2:	402a      	ands	r2, r5
   177a4:	e786      	b.n	176b4 <__aeabi_fsub+0xb0>
   177a6:	003b      	movs	r3, r7
   177a8:	4a63      	ldr	r2, [pc, #396]	; (17938 <__aeabi_fsub+0x334>)
   177aa:	1a24      	subs	r4, r4, r0
   177ac:	4013      	ands	r3, r2
   177ae:	e76f      	b.n	17690 <__aeabi_fsub+0x8c>
   177b0:	2900      	cmp	r1, #0
   177b2:	d16c      	bne.n	1788e <__aeabi_fsub+0x28a>
   177b4:	1c61      	adds	r1, r4, #1
   177b6:	b2c8      	uxtb	r0, r1
   177b8:	2801      	cmp	r0, #1
   177ba:	dd4e      	ble.n	1785a <__aeabi_fsub+0x256>
   177bc:	29ff      	cmp	r1, #255	; 0xff
   177be:	d049      	beq.n	17854 <__aeabi_fsub+0x250>
   177c0:	199b      	adds	r3, r3, r6
   177c2:	085b      	lsrs	r3, r3, #1
   177c4:	000c      	movs	r4, r1
   177c6:	e763      	b.n	17690 <__aeabi_fsub+0x8c>
   177c8:	2aff      	cmp	r2, #255	; 0xff
   177ca:	d041      	beq.n	17850 <__aeabi_fsub+0x24c>
   177cc:	000a      	movs	r2, r1
   177ce:	e781      	b.n	176d4 <__aeabi_fsub+0xd0>
   177d0:	2601      	movs	r6, #1
   177d2:	1b9b      	subs	r3, r3, r6
   177d4:	e789      	b.n	176ea <__aeabi_fsub+0xe6>
   177d6:	2c00      	cmp	r4, #0
   177d8:	d01c      	beq.n	17814 <__aeabi_fsub+0x210>
   177da:	28ff      	cmp	r0, #255	; 0xff
   177dc:	d021      	beq.n	17822 <__aeabi_fsub+0x21e>
   177de:	2480      	movs	r4, #128	; 0x80
   177e0:	04e4      	lsls	r4, r4, #19
   177e2:	4252      	negs	r2, r2
   177e4:	4323      	orrs	r3, r4
   177e6:	2a1b      	cmp	r2, #27
   177e8:	dd00      	ble.n	177ec <__aeabi_fsub+0x1e8>
   177ea:	e096      	b.n	1791a <__aeabi_fsub+0x316>
   177ec:	001c      	movs	r4, r3
   177ee:	2520      	movs	r5, #32
   177f0:	40d4      	lsrs	r4, r2
   177f2:	1aaa      	subs	r2, r5, r2
   177f4:	4093      	lsls	r3, r2
   177f6:	1e5a      	subs	r2, r3, #1
   177f8:	4193      	sbcs	r3, r2
   177fa:	4323      	orrs	r3, r4
   177fc:	1af3      	subs	r3, r6, r3
   177fe:	0004      	movs	r4, r0
   17800:	000d      	movs	r5, r1
   17802:	e72d      	b.n	17660 <__aeabi_fsub+0x5c>
   17804:	2f00      	cmp	r7, #0
   17806:	d000      	beq.n	1780a <__aeabi_fsub+0x206>
   17808:	e72e      	b.n	17668 <__aeabi_fsub+0x64>
   1780a:	2200      	movs	r2, #0
   1780c:	2400      	movs	r4, #0
   1780e:	e7a9      	b.n	17764 <__aeabi_fsub+0x160>
   17810:	000c      	movs	r4, r1
   17812:	e73d      	b.n	17690 <__aeabi_fsub+0x8c>
   17814:	2b00      	cmp	r3, #0
   17816:	d058      	beq.n	178ca <__aeabi_fsub+0x2c6>
   17818:	43d2      	mvns	r2, r2
   1781a:	2a00      	cmp	r2, #0
   1781c:	d0ee      	beq.n	177fc <__aeabi_fsub+0x1f8>
   1781e:	28ff      	cmp	r0, #255	; 0xff
   17820:	d1e1      	bne.n	177e6 <__aeabi_fsub+0x1e2>
   17822:	0033      	movs	r3, r6
   17824:	24ff      	movs	r4, #255	; 0xff
   17826:	000d      	movs	r5, r1
   17828:	e732      	b.n	17690 <__aeabi_fsub+0x8c>
   1782a:	29ff      	cmp	r1, #255	; 0xff
   1782c:	d010      	beq.n	17850 <__aeabi_fsub+0x24c>
   1782e:	0001      	movs	r1, r0
   17830:	e778      	b.n	17724 <__aeabi_fsub+0x120>
   17832:	2b00      	cmp	r3, #0
   17834:	d06e      	beq.n	17914 <__aeabi_fsub+0x310>
   17836:	24ff      	movs	r4, #255	; 0xff
   17838:	2e00      	cmp	r6, #0
   1783a:	d100      	bne.n	1783e <__aeabi_fsub+0x23a>
   1783c:	e728      	b.n	17690 <__aeabi_fsub+0x8c>
   1783e:	2280      	movs	r2, #128	; 0x80
   17840:	4651      	mov	r1, sl
   17842:	03d2      	lsls	r2, r2, #15
   17844:	4211      	tst	r1, r2
   17846:	d003      	beq.n	17850 <__aeabi_fsub+0x24c>
   17848:	4661      	mov	r1, ip
   1784a:	4211      	tst	r1, r2
   1784c:	d100      	bne.n	17850 <__aeabi_fsub+0x24c>
   1784e:	0033      	movs	r3, r6
   17850:	24ff      	movs	r4, #255	; 0xff
   17852:	e71d      	b.n	17690 <__aeabi_fsub+0x8c>
   17854:	24ff      	movs	r4, #255	; 0xff
   17856:	2300      	movs	r3, #0
   17858:	e72c      	b.n	176b4 <__aeabi_fsub+0xb0>
   1785a:	2c00      	cmp	r4, #0
   1785c:	d1e9      	bne.n	17832 <__aeabi_fsub+0x22e>
   1785e:	2b00      	cmp	r3, #0
   17860:	d063      	beq.n	1792a <__aeabi_fsub+0x326>
   17862:	2e00      	cmp	r6, #0
   17864:	d100      	bne.n	17868 <__aeabi_fsub+0x264>
   17866:	e713      	b.n	17690 <__aeabi_fsub+0x8c>
   17868:	199b      	adds	r3, r3, r6
   1786a:	015a      	lsls	r2, r3, #5
   1786c:	d400      	bmi.n	17870 <__aeabi_fsub+0x26c>
   1786e:	e73e      	b.n	176ee <__aeabi_fsub+0xea>
   17870:	4a31      	ldr	r2, [pc, #196]	; (17938 <__aeabi_fsub+0x334>)
   17872:	000c      	movs	r4, r1
   17874:	4013      	ands	r3, r2
   17876:	e70b      	b.n	17690 <__aeabi_fsub+0x8c>
   17878:	2c00      	cmp	r4, #0
   1787a:	d11e      	bne.n	178ba <__aeabi_fsub+0x2b6>
   1787c:	2b00      	cmp	r3, #0
   1787e:	d12f      	bne.n	178e0 <__aeabi_fsub+0x2dc>
   17880:	2e00      	cmp	r6, #0
   17882:	d04f      	beq.n	17924 <__aeabi_fsub+0x320>
   17884:	0033      	movs	r3, r6
   17886:	000d      	movs	r5, r1
   17888:	e702      	b.n	17690 <__aeabi_fsub+0x8c>
   1788a:	2601      	movs	r6, #1
   1788c:	e755      	b.n	1773a <__aeabi_fsub+0x136>
   1788e:	2c00      	cmp	r4, #0
   17890:	d11f      	bne.n	178d2 <__aeabi_fsub+0x2ce>
   17892:	2b00      	cmp	r3, #0
   17894:	d043      	beq.n	1791e <__aeabi_fsub+0x31a>
   17896:	43c9      	mvns	r1, r1
   17898:	2900      	cmp	r1, #0
   1789a:	d00b      	beq.n	178b4 <__aeabi_fsub+0x2b0>
   1789c:	28ff      	cmp	r0, #255	; 0xff
   1789e:	d039      	beq.n	17914 <__aeabi_fsub+0x310>
   178a0:	291b      	cmp	r1, #27
   178a2:	dc44      	bgt.n	1792e <__aeabi_fsub+0x32a>
   178a4:	001c      	movs	r4, r3
   178a6:	2720      	movs	r7, #32
   178a8:	40cc      	lsrs	r4, r1
   178aa:	1a79      	subs	r1, r7, r1
   178ac:	408b      	lsls	r3, r1
   178ae:	1e59      	subs	r1, r3, #1
   178b0:	418b      	sbcs	r3, r1
   178b2:	4323      	orrs	r3, r4
   178b4:	199b      	adds	r3, r3, r6
   178b6:	0004      	movs	r4, r0
   178b8:	e740      	b.n	1773c <__aeabi_fsub+0x138>
   178ba:	2b00      	cmp	r3, #0
   178bc:	d11a      	bne.n	178f4 <__aeabi_fsub+0x2f0>
   178be:	2e00      	cmp	r6, #0
   178c0:	d124      	bne.n	1790c <__aeabi_fsub+0x308>
   178c2:	2780      	movs	r7, #128	; 0x80
   178c4:	2200      	movs	r2, #0
   178c6:	03ff      	lsls	r7, r7, #15
   178c8:	e71b      	b.n	17702 <__aeabi_fsub+0xfe>
   178ca:	0033      	movs	r3, r6
   178cc:	0004      	movs	r4, r0
   178ce:	000d      	movs	r5, r1
   178d0:	e6de      	b.n	17690 <__aeabi_fsub+0x8c>
   178d2:	28ff      	cmp	r0, #255	; 0xff
   178d4:	d01e      	beq.n	17914 <__aeabi_fsub+0x310>
   178d6:	2480      	movs	r4, #128	; 0x80
   178d8:	04e4      	lsls	r4, r4, #19
   178da:	4249      	negs	r1, r1
   178dc:	4323      	orrs	r3, r4
   178de:	e7df      	b.n	178a0 <__aeabi_fsub+0x29c>
   178e0:	2e00      	cmp	r6, #0
   178e2:	d100      	bne.n	178e6 <__aeabi_fsub+0x2e2>
   178e4:	e6d4      	b.n	17690 <__aeabi_fsub+0x8c>
   178e6:	1b9f      	subs	r7, r3, r6
   178e8:	017a      	lsls	r2, r7, #5
   178ea:	d400      	bmi.n	178ee <__aeabi_fsub+0x2ea>
   178ec:	e737      	b.n	1775e <__aeabi_fsub+0x15a>
   178ee:	1af3      	subs	r3, r6, r3
   178f0:	000d      	movs	r5, r1
   178f2:	e6cd      	b.n	17690 <__aeabi_fsub+0x8c>
   178f4:	24ff      	movs	r4, #255	; 0xff
   178f6:	2e00      	cmp	r6, #0
   178f8:	d100      	bne.n	178fc <__aeabi_fsub+0x2f8>
   178fa:	e6c9      	b.n	17690 <__aeabi_fsub+0x8c>
   178fc:	2280      	movs	r2, #128	; 0x80
   178fe:	4650      	mov	r0, sl
   17900:	03d2      	lsls	r2, r2, #15
   17902:	4210      	tst	r0, r2
   17904:	d0a4      	beq.n	17850 <__aeabi_fsub+0x24c>
   17906:	4660      	mov	r0, ip
   17908:	4210      	tst	r0, r2
   1790a:	d1a1      	bne.n	17850 <__aeabi_fsub+0x24c>
   1790c:	0033      	movs	r3, r6
   1790e:	000d      	movs	r5, r1
   17910:	24ff      	movs	r4, #255	; 0xff
   17912:	e6bd      	b.n	17690 <__aeabi_fsub+0x8c>
   17914:	0033      	movs	r3, r6
   17916:	24ff      	movs	r4, #255	; 0xff
   17918:	e6ba      	b.n	17690 <__aeabi_fsub+0x8c>
   1791a:	2301      	movs	r3, #1
   1791c:	e76e      	b.n	177fc <__aeabi_fsub+0x1f8>
   1791e:	0033      	movs	r3, r6
   17920:	0004      	movs	r4, r0
   17922:	e6b5      	b.n	17690 <__aeabi_fsub+0x8c>
   17924:	2700      	movs	r7, #0
   17926:	2200      	movs	r2, #0
   17928:	e71c      	b.n	17764 <__aeabi_fsub+0x160>
   1792a:	0033      	movs	r3, r6
   1792c:	e6b0      	b.n	17690 <__aeabi_fsub+0x8c>
   1792e:	2301      	movs	r3, #1
   17930:	e7c0      	b.n	178b4 <__aeabi_fsub+0x2b0>
   17932:	46c0      	nop			; (mov r8, r8)
   17934:	7dffffff 	.word	0x7dffffff
   17938:	fbffffff 	.word	0xfbffffff

0001793c <__aeabi_f2iz>:
   1793c:	0241      	lsls	r1, r0, #9
   1793e:	0043      	lsls	r3, r0, #1
   17940:	0fc2      	lsrs	r2, r0, #31
   17942:	0a49      	lsrs	r1, r1, #9
   17944:	0e1b      	lsrs	r3, r3, #24
   17946:	2000      	movs	r0, #0
   17948:	2b7e      	cmp	r3, #126	; 0x7e
   1794a:	dd0d      	ble.n	17968 <__aeabi_f2iz+0x2c>
   1794c:	2b9d      	cmp	r3, #157	; 0x9d
   1794e:	dc0c      	bgt.n	1796a <__aeabi_f2iz+0x2e>
   17950:	2080      	movs	r0, #128	; 0x80
   17952:	0400      	lsls	r0, r0, #16
   17954:	4301      	orrs	r1, r0
   17956:	2b95      	cmp	r3, #149	; 0x95
   17958:	dc0a      	bgt.n	17970 <__aeabi_f2iz+0x34>
   1795a:	2096      	movs	r0, #150	; 0x96
   1795c:	1ac3      	subs	r3, r0, r3
   1795e:	40d9      	lsrs	r1, r3
   17960:	4248      	negs	r0, r1
   17962:	2a00      	cmp	r2, #0
   17964:	d100      	bne.n	17968 <__aeabi_f2iz+0x2c>
   17966:	0008      	movs	r0, r1
   17968:	4770      	bx	lr
   1796a:	4b03      	ldr	r3, [pc, #12]	; (17978 <__aeabi_f2iz+0x3c>)
   1796c:	18d0      	adds	r0, r2, r3
   1796e:	e7fb      	b.n	17968 <__aeabi_f2iz+0x2c>
   17970:	3b96      	subs	r3, #150	; 0x96
   17972:	4099      	lsls	r1, r3
   17974:	e7f4      	b.n	17960 <__aeabi_f2iz+0x24>
   17976:	46c0      	nop			; (mov r8, r8)
   17978:	7fffffff 	.word	0x7fffffff

0001797c <__aeabi_i2f>:
   1797c:	b570      	push	{r4, r5, r6, lr}
   1797e:	2800      	cmp	r0, #0
   17980:	d030      	beq.n	179e4 <__aeabi_i2f+0x68>
   17982:	17c3      	asrs	r3, r0, #31
   17984:	18c4      	adds	r4, r0, r3
   17986:	405c      	eors	r4, r3
   17988:	0fc5      	lsrs	r5, r0, #31
   1798a:	0020      	movs	r0, r4
   1798c:	f001 fe66 	bl	1965c <__clzsi2>
   17990:	239e      	movs	r3, #158	; 0x9e
   17992:	1a1b      	subs	r3, r3, r0
   17994:	2b96      	cmp	r3, #150	; 0x96
   17996:	dc0d      	bgt.n	179b4 <__aeabi_i2f+0x38>
   17998:	2296      	movs	r2, #150	; 0x96
   1799a:	1ad2      	subs	r2, r2, r3
   1799c:	4094      	lsls	r4, r2
   1799e:	002a      	movs	r2, r5
   179a0:	0264      	lsls	r4, r4, #9
   179a2:	0a64      	lsrs	r4, r4, #9
   179a4:	b2db      	uxtb	r3, r3
   179a6:	0264      	lsls	r4, r4, #9
   179a8:	05db      	lsls	r3, r3, #23
   179aa:	0a60      	lsrs	r0, r4, #9
   179ac:	07d2      	lsls	r2, r2, #31
   179ae:	4318      	orrs	r0, r3
   179b0:	4310      	orrs	r0, r2
   179b2:	bd70      	pop	{r4, r5, r6, pc}
   179b4:	2b99      	cmp	r3, #153	; 0x99
   179b6:	dc19      	bgt.n	179ec <__aeabi_i2f+0x70>
   179b8:	2299      	movs	r2, #153	; 0x99
   179ba:	1ad2      	subs	r2, r2, r3
   179bc:	2a00      	cmp	r2, #0
   179be:	dd29      	ble.n	17a14 <__aeabi_i2f+0x98>
   179c0:	4094      	lsls	r4, r2
   179c2:	0022      	movs	r2, r4
   179c4:	4c14      	ldr	r4, [pc, #80]	; (17a18 <__aeabi_i2f+0x9c>)
   179c6:	4014      	ands	r4, r2
   179c8:	0751      	lsls	r1, r2, #29
   179ca:	d004      	beq.n	179d6 <__aeabi_i2f+0x5a>
   179cc:	210f      	movs	r1, #15
   179ce:	400a      	ands	r2, r1
   179d0:	2a04      	cmp	r2, #4
   179d2:	d000      	beq.n	179d6 <__aeabi_i2f+0x5a>
   179d4:	3404      	adds	r4, #4
   179d6:	0162      	lsls	r2, r4, #5
   179d8:	d413      	bmi.n	17a02 <__aeabi_i2f+0x86>
   179da:	01a4      	lsls	r4, r4, #6
   179dc:	0a64      	lsrs	r4, r4, #9
   179de:	b2db      	uxtb	r3, r3
   179e0:	002a      	movs	r2, r5
   179e2:	e7e0      	b.n	179a6 <__aeabi_i2f+0x2a>
   179e4:	2200      	movs	r2, #0
   179e6:	2300      	movs	r3, #0
   179e8:	2400      	movs	r4, #0
   179ea:	e7dc      	b.n	179a6 <__aeabi_i2f+0x2a>
   179ec:	2205      	movs	r2, #5
   179ee:	0021      	movs	r1, r4
   179f0:	1a12      	subs	r2, r2, r0
   179f2:	40d1      	lsrs	r1, r2
   179f4:	22b9      	movs	r2, #185	; 0xb9
   179f6:	1ad2      	subs	r2, r2, r3
   179f8:	4094      	lsls	r4, r2
   179fa:	1e62      	subs	r2, r4, #1
   179fc:	4194      	sbcs	r4, r2
   179fe:	430c      	orrs	r4, r1
   17a00:	e7da      	b.n	179b8 <__aeabi_i2f+0x3c>
   17a02:	4b05      	ldr	r3, [pc, #20]	; (17a18 <__aeabi_i2f+0x9c>)
   17a04:	002a      	movs	r2, r5
   17a06:	401c      	ands	r4, r3
   17a08:	239f      	movs	r3, #159	; 0x9f
   17a0a:	01a4      	lsls	r4, r4, #6
   17a0c:	1a1b      	subs	r3, r3, r0
   17a0e:	0a64      	lsrs	r4, r4, #9
   17a10:	b2db      	uxtb	r3, r3
   17a12:	e7c8      	b.n	179a6 <__aeabi_i2f+0x2a>
   17a14:	0022      	movs	r2, r4
   17a16:	e7d5      	b.n	179c4 <__aeabi_i2f+0x48>
   17a18:	fbffffff 	.word	0xfbffffff

00017a1c <__aeabi_ui2f>:
   17a1c:	b510      	push	{r4, lr}
   17a1e:	1e04      	subs	r4, r0, #0
   17a20:	d027      	beq.n	17a72 <__aeabi_ui2f+0x56>
   17a22:	f001 fe1b 	bl	1965c <__clzsi2>
   17a26:	239e      	movs	r3, #158	; 0x9e
   17a28:	1a1b      	subs	r3, r3, r0
   17a2a:	2b96      	cmp	r3, #150	; 0x96
   17a2c:	dc0a      	bgt.n	17a44 <__aeabi_ui2f+0x28>
   17a2e:	2296      	movs	r2, #150	; 0x96
   17a30:	1ad2      	subs	r2, r2, r3
   17a32:	4094      	lsls	r4, r2
   17a34:	0264      	lsls	r4, r4, #9
   17a36:	0a64      	lsrs	r4, r4, #9
   17a38:	b2db      	uxtb	r3, r3
   17a3a:	0264      	lsls	r4, r4, #9
   17a3c:	05db      	lsls	r3, r3, #23
   17a3e:	0a60      	lsrs	r0, r4, #9
   17a40:	4318      	orrs	r0, r3
   17a42:	bd10      	pop	{r4, pc}
   17a44:	2b99      	cmp	r3, #153	; 0x99
   17a46:	dc17      	bgt.n	17a78 <__aeabi_ui2f+0x5c>
   17a48:	2299      	movs	r2, #153	; 0x99
   17a4a:	1ad2      	subs	r2, r2, r3
   17a4c:	2a00      	cmp	r2, #0
   17a4e:	dd27      	ble.n	17aa0 <__aeabi_ui2f+0x84>
   17a50:	4094      	lsls	r4, r2
   17a52:	0022      	movs	r2, r4
   17a54:	4c13      	ldr	r4, [pc, #76]	; (17aa4 <__aeabi_ui2f+0x88>)
   17a56:	4014      	ands	r4, r2
   17a58:	0751      	lsls	r1, r2, #29
   17a5a:	d004      	beq.n	17a66 <__aeabi_ui2f+0x4a>
   17a5c:	210f      	movs	r1, #15
   17a5e:	400a      	ands	r2, r1
   17a60:	2a04      	cmp	r2, #4
   17a62:	d000      	beq.n	17a66 <__aeabi_ui2f+0x4a>
   17a64:	3404      	adds	r4, #4
   17a66:	0162      	lsls	r2, r4, #5
   17a68:	d412      	bmi.n	17a90 <__aeabi_ui2f+0x74>
   17a6a:	01a4      	lsls	r4, r4, #6
   17a6c:	0a64      	lsrs	r4, r4, #9
   17a6e:	b2db      	uxtb	r3, r3
   17a70:	e7e3      	b.n	17a3a <__aeabi_ui2f+0x1e>
   17a72:	2300      	movs	r3, #0
   17a74:	2400      	movs	r4, #0
   17a76:	e7e0      	b.n	17a3a <__aeabi_ui2f+0x1e>
   17a78:	22b9      	movs	r2, #185	; 0xb9
   17a7a:	0021      	movs	r1, r4
   17a7c:	1ad2      	subs	r2, r2, r3
   17a7e:	4091      	lsls	r1, r2
   17a80:	000a      	movs	r2, r1
   17a82:	1e51      	subs	r1, r2, #1
   17a84:	418a      	sbcs	r2, r1
   17a86:	2105      	movs	r1, #5
   17a88:	1a09      	subs	r1, r1, r0
   17a8a:	40cc      	lsrs	r4, r1
   17a8c:	4314      	orrs	r4, r2
   17a8e:	e7db      	b.n	17a48 <__aeabi_ui2f+0x2c>
   17a90:	4b04      	ldr	r3, [pc, #16]	; (17aa4 <__aeabi_ui2f+0x88>)
   17a92:	401c      	ands	r4, r3
   17a94:	239f      	movs	r3, #159	; 0x9f
   17a96:	01a4      	lsls	r4, r4, #6
   17a98:	1a1b      	subs	r3, r3, r0
   17a9a:	0a64      	lsrs	r4, r4, #9
   17a9c:	b2db      	uxtb	r3, r3
   17a9e:	e7cc      	b.n	17a3a <__aeabi_ui2f+0x1e>
   17aa0:	0022      	movs	r2, r4
   17aa2:	e7d7      	b.n	17a54 <__aeabi_ui2f+0x38>
   17aa4:	fbffffff 	.word	0xfbffffff

00017aa8 <__aeabi_dadd>:
   17aa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   17aaa:	4645      	mov	r5, r8
   17aac:	46de      	mov	lr, fp
   17aae:	4657      	mov	r7, sl
   17ab0:	464e      	mov	r6, r9
   17ab2:	030c      	lsls	r4, r1, #12
   17ab4:	b5e0      	push	{r5, r6, r7, lr}
   17ab6:	004e      	lsls	r6, r1, #1
   17ab8:	0fc9      	lsrs	r1, r1, #31
   17aba:	4688      	mov	r8, r1
   17abc:	000d      	movs	r5, r1
   17abe:	0a61      	lsrs	r1, r4, #9
   17ac0:	0f44      	lsrs	r4, r0, #29
   17ac2:	430c      	orrs	r4, r1
   17ac4:	00c7      	lsls	r7, r0, #3
   17ac6:	0319      	lsls	r1, r3, #12
   17ac8:	0058      	lsls	r0, r3, #1
   17aca:	0fdb      	lsrs	r3, r3, #31
   17acc:	469b      	mov	fp, r3
   17ace:	0a4b      	lsrs	r3, r1, #9
   17ad0:	0f51      	lsrs	r1, r2, #29
   17ad2:	430b      	orrs	r3, r1
   17ad4:	0d76      	lsrs	r6, r6, #21
   17ad6:	0d40      	lsrs	r0, r0, #21
   17ad8:	0019      	movs	r1, r3
   17ada:	00d2      	lsls	r2, r2, #3
   17adc:	45d8      	cmp	r8, fp
   17ade:	d100      	bne.n	17ae2 <__aeabi_dadd+0x3a>
   17ae0:	e0ae      	b.n	17c40 <__aeabi_dadd+0x198>
   17ae2:	1a35      	subs	r5, r6, r0
   17ae4:	2d00      	cmp	r5, #0
   17ae6:	dc00      	bgt.n	17aea <__aeabi_dadd+0x42>
   17ae8:	e0f6      	b.n	17cd8 <__aeabi_dadd+0x230>
   17aea:	2800      	cmp	r0, #0
   17aec:	d10f      	bne.n	17b0e <__aeabi_dadd+0x66>
   17aee:	4313      	orrs	r3, r2
   17af0:	d100      	bne.n	17af4 <__aeabi_dadd+0x4c>
   17af2:	e0db      	b.n	17cac <__aeabi_dadd+0x204>
   17af4:	1e6b      	subs	r3, r5, #1
   17af6:	2b00      	cmp	r3, #0
   17af8:	d000      	beq.n	17afc <__aeabi_dadd+0x54>
   17afa:	e137      	b.n	17d6c <__aeabi_dadd+0x2c4>
   17afc:	1aba      	subs	r2, r7, r2
   17afe:	4297      	cmp	r7, r2
   17b00:	41bf      	sbcs	r7, r7
   17b02:	1a64      	subs	r4, r4, r1
   17b04:	427f      	negs	r7, r7
   17b06:	1be4      	subs	r4, r4, r7
   17b08:	2601      	movs	r6, #1
   17b0a:	0017      	movs	r7, r2
   17b0c:	e024      	b.n	17b58 <__aeabi_dadd+0xb0>
   17b0e:	4bc6      	ldr	r3, [pc, #792]	; (17e28 <__aeabi_dadd+0x380>)
   17b10:	429e      	cmp	r6, r3
   17b12:	d04d      	beq.n	17bb0 <__aeabi_dadd+0x108>
   17b14:	2380      	movs	r3, #128	; 0x80
   17b16:	041b      	lsls	r3, r3, #16
   17b18:	4319      	orrs	r1, r3
   17b1a:	2d38      	cmp	r5, #56	; 0x38
   17b1c:	dd00      	ble.n	17b20 <__aeabi_dadd+0x78>
   17b1e:	e107      	b.n	17d30 <__aeabi_dadd+0x288>
   17b20:	2d1f      	cmp	r5, #31
   17b22:	dd00      	ble.n	17b26 <__aeabi_dadd+0x7e>
   17b24:	e138      	b.n	17d98 <__aeabi_dadd+0x2f0>
   17b26:	2020      	movs	r0, #32
   17b28:	1b43      	subs	r3, r0, r5
   17b2a:	469a      	mov	sl, r3
   17b2c:	000b      	movs	r3, r1
   17b2e:	4650      	mov	r0, sl
   17b30:	4083      	lsls	r3, r0
   17b32:	4699      	mov	r9, r3
   17b34:	0013      	movs	r3, r2
   17b36:	4648      	mov	r0, r9
   17b38:	40eb      	lsrs	r3, r5
   17b3a:	4318      	orrs	r0, r3
   17b3c:	0003      	movs	r3, r0
   17b3e:	4650      	mov	r0, sl
   17b40:	4082      	lsls	r2, r0
   17b42:	1e50      	subs	r0, r2, #1
   17b44:	4182      	sbcs	r2, r0
   17b46:	40e9      	lsrs	r1, r5
   17b48:	431a      	orrs	r2, r3
   17b4a:	1aba      	subs	r2, r7, r2
   17b4c:	1a61      	subs	r1, r4, r1
   17b4e:	4297      	cmp	r7, r2
   17b50:	41a4      	sbcs	r4, r4
   17b52:	0017      	movs	r7, r2
   17b54:	4264      	negs	r4, r4
   17b56:	1b0c      	subs	r4, r1, r4
   17b58:	0223      	lsls	r3, r4, #8
   17b5a:	d562      	bpl.n	17c22 <__aeabi_dadd+0x17a>
   17b5c:	0264      	lsls	r4, r4, #9
   17b5e:	0a65      	lsrs	r5, r4, #9
   17b60:	2d00      	cmp	r5, #0
   17b62:	d100      	bne.n	17b66 <__aeabi_dadd+0xbe>
   17b64:	e0df      	b.n	17d26 <__aeabi_dadd+0x27e>
   17b66:	0028      	movs	r0, r5
   17b68:	f001 fd78 	bl	1965c <__clzsi2>
   17b6c:	0003      	movs	r3, r0
   17b6e:	3b08      	subs	r3, #8
   17b70:	2b1f      	cmp	r3, #31
   17b72:	dd00      	ble.n	17b76 <__aeabi_dadd+0xce>
   17b74:	e0d2      	b.n	17d1c <__aeabi_dadd+0x274>
   17b76:	2220      	movs	r2, #32
   17b78:	003c      	movs	r4, r7
   17b7a:	1ad2      	subs	r2, r2, r3
   17b7c:	409d      	lsls	r5, r3
   17b7e:	40d4      	lsrs	r4, r2
   17b80:	409f      	lsls	r7, r3
   17b82:	4325      	orrs	r5, r4
   17b84:	429e      	cmp	r6, r3
   17b86:	dd00      	ble.n	17b8a <__aeabi_dadd+0xe2>
   17b88:	e0c4      	b.n	17d14 <__aeabi_dadd+0x26c>
   17b8a:	1b9e      	subs	r6, r3, r6
   17b8c:	1c73      	adds	r3, r6, #1
   17b8e:	2b1f      	cmp	r3, #31
   17b90:	dd00      	ble.n	17b94 <__aeabi_dadd+0xec>
   17b92:	e0f1      	b.n	17d78 <__aeabi_dadd+0x2d0>
   17b94:	2220      	movs	r2, #32
   17b96:	0038      	movs	r0, r7
   17b98:	0029      	movs	r1, r5
   17b9a:	1ad2      	subs	r2, r2, r3
   17b9c:	40d8      	lsrs	r0, r3
   17b9e:	4091      	lsls	r1, r2
   17ba0:	4097      	lsls	r7, r2
   17ba2:	002c      	movs	r4, r5
   17ba4:	4301      	orrs	r1, r0
   17ba6:	1e78      	subs	r0, r7, #1
   17ba8:	4187      	sbcs	r7, r0
   17baa:	40dc      	lsrs	r4, r3
   17bac:	2600      	movs	r6, #0
   17bae:	430f      	orrs	r7, r1
   17bb0:	077b      	lsls	r3, r7, #29
   17bb2:	d009      	beq.n	17bc8 <__aeabi_dadd+0x120>
   17bb4:	230f      	movs	r3, #15
   17bb6:	403b      	ands	r3, r7
   17bb8:	2b04      	cmp	r3, #4
   17bba:	d005      	beq.n	17bc8 <__aeabi_dadd+0x120>
   17bbc:	1d3b      	adds	r3, r7, #4
   17bbe:	42bb      	cmp	r3, r7
   17bc0:	41bf      	sbcs	r7, r7
   17bc2:	427f      	negs	r7, r7
   17bc4:	19e4      	adds	r4, r4, r7
   17bc6:	001f      	movs	r7, r3
   17bc8:	0223      	lsls	r3, r4, #8
   17bca:	d52c      	bpl.n	17c26 <__aeabi_dadd+0x17e>
   17bcc:	4b96      	ldr	r3, [pc, #600]	; (17e28 <__aeabi_dadd+0x380>)
   17bce:	3601      	adds	r6, #1
   17bd0:	429e      	cmp	r6, r3
   17bd2:	d100      	bne.n	17bd6 <__aeabi_dadd+0x12e>
   17bd4:	e09a      	b.n	17d0c <__aeabi_dadd+0x264>
   17bd6:	4645      	mov	r5, r8
   17bd8:	4b94      	ldr	r3, [pc, #592]	; (17e2c <__aeabi_dadd+0x384>)
   17bda:	08ff      	lsrs	r7, r7, #3
   17bdc:	401c      	ands	r4, r3
   17bde:	0760      	lsls	r0, r4, #29
   17be0:	0576      	lsls	r6, r6, #21
   17be2:	0264      	lsls	r4, r4, #9
   17be4:	4307      	orrs	r7, r0
   17be6:	0b24      	lsrs	r4, r4, #12
   17be8:	0d76      	lsrs	r6, r6, #21
   17bea:	2100      	movs	r1, #0
   17bec:	0324      	lsls	r4, r4, #12
   17bee:	0b23      	lsrs	r3, r4, #12
   17bf0:	0d0c      	lsrs	r4, r1, #20
   17bf2:	4a8f      	ldr	r2, [pc, #572]	; (17e30 <__aeabi_dadd+0x388>)
   17bf4:	0524      	lsls	r4, r4, #20
   17bf6:	431c      	orrs	r4, r3
   17bf8:	4014      	ands	r4, r2
   17bfa:	0533      	lsls	r3, r6, #20
   17bfc:	4323      	orrs	r3, r4
   17bfe:	005b      	lsls	r3, r3, #1
   17c00:	07ed      	lsls	r5, r5, #31
   17c02:	085b      	lsrs	r3, r3, #1
   17c04:	432b      	orrs	r3, r5
   17c06:	0038      	movs	r0, r7
   17c08:	0019      	movs	r1, r3
   17c0a:	bc3c      	pop	{r2, r3, r4, r5}
   17c0c:	4690      	mov	r8, r2
   17c0e:	4699      	mov	r9, r3
   17c10:	46a2      	mov	sl, r4
   17c12:	46ab      	mov	fp, r5
   17c14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   17c16:	4664      	mov	r4, ip
   17c18:	4304      	orrs	r4, r0
   17c1a:	d100      	bne.n	17c1e <__aeabi_dadd+0x176>
   17c1c:	e211      	b.n	18042 <__aeabi_dadd+0x59a>
   17c1e:	0004      	movs	r4, r0
   17c20:	4667      	mov	r7, ip
   17c22:	077b      	lsls	r3, r7, #29
   17c24:	d1c6      	bne.n	17bb4 <__aeabi_dadd+0x10c>
   17c26:	4645      	mov	r5, r8
   17c28:	0760      	lsls	r0, r4, #29
   17c2a:	08ff      	lsrs	r7, r7, #3
   17c2c:	4307      	orrs	r7, r0
   17c2e:	08e4      	lsrs	r4, r4, #3
   17c30:	4b7d      	ldr	r3, [pc, #500]	; (17e28 <__aeabi_dadd+0x380>)
   17c32:	429e      	cmp	r6, r3
   17c34:	d030      	beq.n	17c98 <__aeabi_dadd+0x1f0>
   17c36:	0324      	lsls	r4, r4, #12
   17c38:	0576      	lsls	r6, r6, #21
   17c3a:	0b24      	lsrs	r4, r4, #12
   17c3c:	0d76      	lsrs	r6, r6, #21
   17c3e:	e7d4      	b.n	17bea <__aeabi_dadd+0x142>
   17c40:	1a33      	subs	r3, r6, r0
   17c42:	469a      	mov	sl, r3
   17c44:	2b00      	cmp	r3, #0
   17c46:	dd78      	ble.n	17d3a <__aeabi_dadd+0x292>
   17c48:	2800      	cmp	r0, #0
   17c4a:	d031      	beq.n	17cb0 <__aeabi_dadd+0x208>
   17c4c:	4876      	ldr	r0, [pc, #472]	; (17e28 <__aeabi_dadd+0x380>)
   17c4e:	4286      	cmp	r6, r0
   17c50:	d0ae      	beq.n	17bb0 <__aeabi_dadd+0x108>
   17c52:	2080      	movs	r0, #128	; 0x80
   17c54:	0400      	lsls	r0, r0, #16
   17c56:	4301      	orrs	r1, r0
   17c58:	4653      	mov	r3, sl
   17c5a:	2b38      	cmp	r3, #56	; 0x38
   17c5c:	dc00      	bgt.n	17c60 <__aeabi_dadd+0x1b8>
   17c5e:	e0e9      	b.n	17e34 <__aeabi_dadd+0x38c>
   17c60:	430a      	orrs	r2, r1
   17c62:	1e51      	subs	r1, r2, #1
   17c64:	418a      	sbcs	r2, r1
   17c66:	2100      	movs	r1, #0
   17c68:	19d2      	adds	r2, r2, r7
   17c6a:	42ba      	cmp	r2, r7
   17c6c:	41bf      	sbcs	r7, r7
   17c6e:	1909      	adds	r1, r1, r4
   17c70:	427c      	negs	r4, r7
   17c72:	0017      	movs	r7, r2
   17c74:	190c      	adds	r4, r1, r4
   17c76:	0223      	lsls	r3, r4, #8
   17c78:	d5d3      	bpl.n	17c22 <__aeabi_dadd+0x17a>
   17c7a:	4b6b      	ldr	r3, [pc, #428]	; (17e28 <__aeabi_dadd+0x380>)
   17c7c:	3601      	adds	r6, #1
   17c7e:	429e      	cmp	r6, r3
   17c80:	d100      	bne.n	17c84 <__aeabi_dadd+0x1dc>
   17c82:	e13a      	b.n	17efa <__aeabi_dadd+0x452>
   17c84:	2001      	movs	r0, #1
   17c86:	4b69      	ldr	r3, [pc, #420]	; (17e2c <__aeabi_dadd+0x384>)
   17c88:	401c      	ands	r4, r3
   17c8a:	087b      	lsrs	r3, r7, #1
   17c8c:	4007      	ands	r7, r0
   17c8e:	431f      	orrs	r7, r3
   17c90:	07e0      	lsls	r0, r4, #31
   17c92:	4307      	orrs	r7, r0
   17c94:	0864      	lsrs	r4, r4, #1
   17c96:	e78b      	b.n	17bb0 <__aeabi_dadd+0x108>
   17c98:	0023      	movs	r3, r4
   17c9a:	433b      	orrs	r3, r7
   17c9c:	d100      	bne.n	17ca0 <__aeabi_dadd+0x1f8>
   17c9e:	e1cb      	b.n	18038 <__aeabi_dadd+0x590>
   17ca0:	2280      	movs	r2, #128	; 0x80
   17ca2:	0312      	lsls	r2, r2, #12
   17ca4:	4314      	orrs	r4, r2
   17ca6:	0324      	lsls	r4, r4, #12
   17ca8:	0b24      	lsrs	r4, r4, #12
   17caa:	e79e      	b.n	17bea <__aeabi_dadd+0x142>
   17cac:	002e      	movs	r6, r5
   17cae:	e77f      	b.n	17bb0 <__aeabi_dadd+0x108>
   17cb0:	0008      	movs	r0, r1
   17cb2:	4310      	orrs	r0, r2
   17cb4:	d100      	bne.n	17cb8 <__aeabi_dadd+0x210>
   17cb6:	e0b4      	b.n	17e22 <__aeabi_dadd+0x37a>
   17cb8:	1e58      	subs	r0, r3, #1
   17cba:	2800      	cmp	r0, #0
   17cbc:	d000      	beq.n	17cc0 <__aeabi_dadd+0x218>
   17cbe:	e0de      	b.n	17e7e <__aeabi_dadd+0x3d6>
   17cc0:	18ba      	adds	r2, r7, r2
   17cc2:	42ba      	cmp	r2, r7
   17cc4:	419b      	sbcs	r3, r3
   17cc6:	1864      	adds	r4, r4, r1
   17cc8:	425b      	negs	r3, r3
   17cca:	18e4      	adds	r4, r4, r3
   17ccc:	0017      	movs	r7, r2
   17cce:	2601      	movs	r6, #1
   17cd0:	0223      	lsls	r3, r4, #8
   17cd2:	d5a6      	bpl.n	17c22 <__aeabi_dadd+0x17a>
   17cd4:	2602      	movs	r6, #2
   17cd6:	e7d5      	b.n	17c84 <__aeabi_dadd+0x1dc>
   17cd8:	2d00      	cmp	r5, #0
   17cda:	d16e      	bne.n	17dba <__aeabi_dadd+0x312>
   17cdc:	1c70      	adds	r0, r6, #1
   17cde:	0540      	lsls	r0, r0, #21
   17ce0:	0d40      	lsrs	r0, r0, #21
   17ce2:	2801      	cmp	r0, #1
   17ce4:	dc00      	bgt.n	17ce8 <__aeabi_dadd+0x240>
   17ce6:	e0f9      	b.n	17edc <__aeabi_dadd+0x434>
   17ce8:	1ab8      	subs	r0, r7, r2
   17cea:	4684      	mov	ip, r0
   17cec:	4287      	cmp	r7, r0
   17cee:	4180      	sbcs	r0, r0
   17cf0:	1ae5      	subs	r5, r4, r3
   17cf2:	4240      	negs	r0, r0
   17cf4:	1a2d      	subs	r5, r5, r0
   17cf6:	0228      	lsls	r0, r5, #8
   17cf8:	d400      	bmi.n	17cfc <__aeabi_dadd+0x254>
   17cfa:	e089      	b.n	17e10 <__aeabi_dadd+0x368>
   17cfc:	1bd7      	subs	r7, r2, r7
   17cfe:	42ba      	cmp	r2, r7
   17d00:	4192      	sbcs	r2, r2
   17d02:	1b1c      	subs	r4, r3, r4
   17d04:	4252      	negs	r2, r2
   17d06:	1aa5      	subs	r5, r4, r2
   17d08:	46d8      	mov	r8, fp
   17d0a:	e729      	b.n	17b60 <__aeabi_dadd+0xb8>
   17d0c:	4645      	mov	r5, r8
   17d0e:	2400      	movs	r4, #0
   17d10:	2700      	movs	r7, #0
   17d12:	e76a      	b.n	17bea <__aeabi_dadd+0x142>
   17d14:	4c45      	ldr	r4, [pc, #276]	; (17e2c <__aeabi_dadd+0x384>)
   17d16:	1af6      	subs	r6, r6, r3
   17d18:	402c      	ands	r4, r5
   17d1a:	e749      	b.n	17bb0 <__aeabi_dadd+0x108>
   17d1c:	003d      	movs	r5, r7
   17d1e:	3828      	subs	r0, #40	; 0x28
   17d20:	4085      	lsls	r5, r0
   17d22:	2700      	movs	r7, #0
   17d24:	e72e      	b.n	17b84 <__aeabi_dadd+0xdc>
   17d26:	0038      	movs	r0, r7
   17d28:	f001 fc98 	bl	1965c <__clzsi2>
   17d2c:	3020      	adds	r0, #32
   17d2e:	e71d      	b.n	17b6c <__aeabi_dadd+0xc4>
   17d30:	430a      	orrs	r2, r1
   17d32:	1e51      	subs	r1, r2, #1
   17d34:	418a      	sbcs	r2, r1
   17d36:	2100      	movs	r1, #0
   17d38:	e707      	b.n	17b4a <__aeabi_dadd+0xa2>
   17d3a:	2b00      	cmp	r3, #0
   17d3c:	d000      	beq.n	17d40 <__aeabi_dadd+0x298>
   17d3e:	e0f3      	b.n	17f28 <__aeabi_dadd+0x480>
   17d40:	1c70      	adds	r0, r6, #1
   17d42:	0543      	lsls	r3, r0, #21
   17d44:	0d5b      	lsrs	r3, r3, #21
   17d46:	2b01      	cmp	r3, #1
   17d48:	dc00      	bgt.n	17d4c <__aeabi_dadd+0x2a4>
   17d4a:	e0ad      	b.n	17ea8 <__aeabi_dadd+0x400>
   17d4c:	4b36      	ldr	r3, [pc, #216]	; (17e28 <__aeabi_dadd+0x380>)
   17d4e:	4298      	cmp	r0, r3
   17d50:	d100      	bne.n	17d54 <__aeabi_dadd+0x2ac>
   17d52:	e0d1      	b.n	17ef8 <__aeabi_dadd+0x450>
   17d54:	18ba      	adds	r2, r7, r2
   17d56:	42ba      	cmp	r2, r7
   17d58:	41bf      	sbcs	r7, r7
   17d5a:	1864      	adds	r4, r4, r1
   17d5c:	427f      	negs	r7, r7
   17d5e:	19e4      	adds	r4, r4, r7
   17d60:	07e7      	lsls	r7, r4, #31
   17d62:	0852      	lsrs	r2, r2, #1
   17d64:	4317      	orrs	r7, r2
   17d66:	0864      	lsrs	r4, r4, #1
   17d68:	0006      	movs	r6, r0
   17d6a:	e721      	b.n	17bb0 <__aeabi_dadd+0x108>
   17d6c:	482e      	ldr	r0, [pc, #184]	; (17e28 <__aeabi_dadd+0x380>)
   17d6e:	4285      	cmp	r5, r0
   17d70:	d100      	bne.n	17d74 <__aeabi_dadd+0x2cc>
   17d72:	e093      	b.n	17e9c <__aeabi_dadd+0x3f4>
   17d74:	001d      	movs	r5, r3
   17d76:	e6d0      	b.n	17b1a <__aeabi_dadd+0x72>
   17d78:	0029      	movs	r1, r5
   17d7a:	3e1f      	subs	r6, #31
   17d7c:	40f1      	lsrs	r1, r6
   17d7e:	2b20      	cmp	r3, #32
   17d80:	d100      	bne.n	17d84 <__aeabi_dadd+0x2dc>
   17d82:	e08d      	b.n	17ea0 <__aeabi_dadd+0x3f8>
   17d84:	2240      	movs	r2, #64	; 0x40
   17d86:	1ad3      	subs	r3, r2, r3
   17d88:	409d      	lsls	r5, r3
   17d8a:	432f      	orrs	r7, r5
   17d8c:	1e7d      	subs	r5, r7, #1
   17d8e:	41af      	sbcs	r7, r5
   17d90:	2400      	movs	r4, #0
   17d92:	430f      	orrs	r7, r1
   17d94:	2600      	movs	r6, #0
   17d96:	e744      	b.n	17c22 <__aeabi_dadd+0x17a>
   17d98:	002b      	movs	r3, r5
   17d9a:	0008      	movs	r0, r1
   17d9c:	3b20      	subs	r3, #32
   17d9e:	40d8      	lsrs	r0, r3
   17da0:	0003      	movs	r3, r0
   17da2:	2d20      	cmp	r5, #32
   17da4:	d100      	bne.n	17da8 <__aeabi_dadd+0x300>
   17da6:	e07d      	b.n	17ea4 <__aeabi_dadd+0x3fc>
   17da8:	2040      	movs	r0, #64	; 0x40
   17daa:	1b45      	subs	r5, r0, r5
   17dac:	40a9      	lsls	r1, r5
   17dae:	430a      	orrs	r2, r1
   17db0:	1e51      	subs	r1, r2, #1
   17db2:	418a      	sbcs	r2, r1
   17db4:	2100      	movs	r1, #0
   17db6:	431a      	orrs	r2, r3
   17db8:	e6c7      	b.n	17b4a <__aeabi_dadd+0xa2>
   17dba:	2e00      	cmp	r6, #0
   17dbc:	d050      	beq.n	17e60 <__aeabi_dadd+0x3b8>
   17dbe:	4e1a      	ldr	r6, [pc, #104]	; (17e28 <__aeabi_dadd+0x380>)
   17dc0:	42b0      	cmp	r0, r6
   17dc2:	d057      	beq.n	17e74 <__aeabi_dadd+0x3cc>
   17dc4:	2680      	movs	r6, #128	; 0x80
   17dc6:	426b      	negs	r3, r5
   17dc8:	4699      	mov	r9, r3
   17dca:	0436      	lsls	r6, r6, #16
   17dcc:	4334      	orrs	r4, r6
   17dce:	464b      	mov	r3, r9
   17dd0:	2b38      	cmp	r3, #56	; 0x38
   17dd2:	dd00      	ble.n	17dd6 <__aeabi_dadd+0x32e>
   17dd4:	e0d6      	b.n	17f84 <__aeabi_dadd+0x4dc>
   17dd6:	2b1f      	cmp	r3, #31
   17dd8:	dd00      	ble.n	17ddc <__aeabi_dadd+0x334>
   17dda:	e135      	b.n	18048 <__aeabi_dadd+0x5a0>
   17ddc:	2620      	movs	r6, #32
   17dde:	1af5      	subs	r5, r6, r3
   17de0:	0026      	movs	r6, r4
   17de2:	40ae      	lsls	r6, r5
   17de4:	46b2      	mov	sl, r6
   17de6:	003e      	movs	r6, r7
   17de8:	40de      	lsrs	r6, r3
   17dea:	46ac      	mov	ip, r5
   17dec:	0035      	movs	r5, r6
   17dee:	4656      	mov	r6, sl
   17df0:	432e      	orrs	r6, r5
   17df2:	4665      	mov	r5, ip
   17df4:	40af      	lsls	r7, r5
   17df6:	1e7d      	subs	r5, r7, #1
   17df8:	41af      	sbcs	r7, r5
   17dfa:	40dc      	lsrs	r4, r3
   17dfc:	4337      	orrs	r7, r6
   17dfe:	1bd7      	subs	r7, r2, r7
   17e00:	42ba      	cmp	r2, r7
   17e02:	4192      	sbcs	r2, r2
   17e04:	1b0c      	subs	r4, r1, r4
   17e06:	4252      	negs	r2, r2
   17e08:	1aa4      	subs	r4, r4, r2
   17e0a:	0006      	movs	r6, r0
   17e0c:	46d8      	mov	r8, fp
   17e0e:	e6a3      	b.n	17b58 <__aeabi_dadd+0xb0>
   17e10:	4664      	mov	r4, ip
   17e12:	4667      	mov	r7, ip
   17e14:	432c      	orrs	r4, r5
   17e16:	d000      	beq.n	17e1a <__aeabi_dadd+0x372>
   17e18:	e6a2      	b.n	17b60 <__aeabi_dadd+0xb8>
   17e1a:	2500      	movs	r5, #0
   17e1c:	2600      	movs	r6, #0
   17e1e:	2700      	movs	r7, #0
   17e20:	e706      	b.n	17c30 <__aeabi_dadd+0x188>
   17e22:	001e      	movs	r6, r3
   17e24:	e6c4      	b.n	17bb0 <__aeabi_dadd+0x108>
   17e26:	46c0      	nop			; (mov r8, r8)
   17e28:	000007ff 	.word	0x000007ff
   17e2c:	ff7fffff 	.word	0xff7fffff
   17e30:	800fffff 	.word	0x800fffff
   17e34:	2b1f      	cmp	r3, #31
   17e36:	dc63      	bgt.n	17f00 <__aeabi_dadd+0x458>
   17e38:	2020      	movs	r0, #32
   17e3a:	1ac3      	subs	r3, r0, r3
   17e3c:	0008      	movs	r0, r1
   17e3e:	4098      	lsls	r0, r3
   17e40:	469c      	mov	ip, r3
   17e42:	4683      	mov	fp, r0
   17e44:	4653      	mov	r3, sl
   17e46:	0010      	movs	r0, r2
   17e48:	40d8      	lsrs	r0, r3
   17e4a:	0003      	movs	r3, r0
   17e4c:	4658      	mov	r0, fp
   17e4e:	4318      	orrs	r0, r3
   17e50:	4663      	mov	r3, ip
   17e52:	409a      	lsls	r2, r3
   17e54:	1e53      	subs	r3, r2, #1
   17e56:	419a      	sbcs	r2, r3
   17e58:	4653      	mov	r3, sl
   17e5a:	4302      	orrs	r2, r0
   17e5c:	40d9      	lsrs	r1, r3
   17e5e:	e703      	b.n	17c68 <__aeabi_dadd+0x1c0>
   17e60:	0026      	movs	r6, r4
   17e62:	433e      	orrs	r6, r7
   17e64:	d006      	beq.n	17e74 <__aeabi_dadd+0x3cc>
   17e66:	43eb      	mvns	r3, r5
   17e68:	4699      	mov	r9, r3
   17e6a:	2b00      	cmp	r3, #0
   17e6c:	d0c7      	beq.n	17dfe <__aeabi_dadd+0x356>
   17e6e:	4e94      	ldr	r6, [pc, #592]	; (180c0 <__aeabi_dadd+0x618>)
   17e70:	42b0      	cmp	r0, r6
   17e72:	d1ac      	bne.n	17dce <__aeabi_dadd+0x326>
   17e74:	000c      	movs	r4, r1
   17e76:	0017      	movs	r7, r2
   17e78:	0006      	movs	r6, r0
   17e7a:	46d8      	mov	r8, fp
   17e7c:	e698      	b.n	17bb0 <__aeabi_dadd+0x108>
   17e7e:	4b90      	ldr	r3, [pc, #576]	; (180c0 <__aeabi_dadd+0x618>)
   17e80:	459a      	cmp	sl, r3
   17e82:	d00b      	beq.n	17e9c <__aeabi_dadd+0x3f4>
   17e84:	4682      	mov	sl, r0
   17e86:	e6e7      	b.n	17c58 <__aeabi_dadd+0x1b0>
   17e88:	2800      	cmp	r0, #0
   17e8a:	d000      	beq.n	17e8e <__aeabi_dadd+0x3e6>
   17e8c:	e09e      	b.n	17fcc <__aeabi_dadd+0x524>
   17e8e:	0018      	movs	r0, r3
   17e90:	4310      	orrs	r0, r2
   17e92:	d100      	bne.n	17e96 <__aeabi_dadd+0x3ee>
   17e94:	e0e9      	b.n	1806a <__aeabi_dadd+0x5c2>
   17e96:	001c      	movs	r4, r3
   17e98:	0017      	movs	r7, r2
   17e9a:	46d8      	mov	r8, fp
   17e9c:	4e88      	ldr	r6, [pc, #544]	; (180c0 <__aeabi_dadd+0x618>)
   17e9e:	e687      	b.n	17bb0 <__aeabi_dadd+0x108>
   17ea0:	2500      	movs	r5, #0
   17ea2:	e772      	b.n	17d8a <__aeabi_dadd+0x2e2>
   17ea4:	2100      	movs	r1, #0
   17ea6:	e782      	b.n	17dae <__aeabi_dadd+0x306>
   17ea8:	0023      	movs	r3, r4
   17eaa:	433b      	orrs	r3, r7
   17eac:	2e00      	cmp	r6, #0
   17eae:	d000      	beq.n	17eb2 <__aeabi_dadd+0x40a>
   17eb0:	e0ab      	b.n	1800a <__aeabi_dadd+0x562>
   17eb2:	2b00      	cmp	r3, #0
   17eb4:	d100      	bne.n	17eb8 <__aeabi_dadd+0x410>
   17eb6:	e0e7      	b.n	18088 <__aeabi_dadd+0x5e0>
   17eb8:	000b      	movs	r3, r1
   17eba:	4313      	orrs	r3, r2
   17ebc:	d100      	bne.n	17ec0 <__aeabi_dadd+0x418>
   17ebe:	e677      	b.n	17bb0 <__aeabi_dadd+0x108>
   17ec0:	18ba      	adds	r2, r7, r2
   17ec2:	42ba      	cmp	r2, r7
   17ec4:	41bf      	sbcs	r7, r7
   17ec6:	1864      	adds	r4, r4, r1
   17ec8:	427f      	negs	r7, r7
   17eca:	19e4      	adds	r4, r4, r7
   17ecc:	0223      	lsls	r3, r4, #8
   17ece:	d400      	bmi.n	17ed2 <__aeabi_dadd+0x42a>
   17ed0:	e0f2      	b.n	180b8 <__aeabi_dadd+0x610>
   17ed2:	4b7c      	ldr	r3, [pc, #496]	; (180c4 <__aeabi_dadd+0x61c>)
   17ed4:	0017      	movs	r7, r2
   17ed6:	401c      	ands	r4, r3
   17ed8:	0006      	movs	r6, r0
   17eda:	e669      	b.n	17bb0 <__aeabi_dadd+0x108>
   17edc:	0020      	movs	r0, r4
   17ede:	4338      	orrs	r0, r7
   17ee0:	2e00      	cmp	r6, #0
   17ee2:	d1d1      	bne.n	17e88 <__aeabi_dadd+0x3e0>
   17ee4:	2800      	cmp	r0, #0
   17ee6:	d15b      	bne.n	17fa0 <__aeabi_dadd+0x4f8>
   17ee8:	001c      	movs	r4, r3
   17eea:	4314      	orrs	r4, r2
   17eec:	d100      	bne.n	17ef0 <__aeabi_dadd+0x448>
   17eee:	e0a8      	b.n	18042 <__aeabi_dadd+0x59a>
   17ef0:	001c      	movs	r4, r3
   17ef2:	0017      	movs	r7, r2
   17ef4:	46d8      	mov	r8, fp
   17ef6:	e65b      	b.n	17bb0 <__aeabi_dadd+0x108>
   17ef8:	0006      	movs	r6, r0
   17efa:	2400      	movs	r4, #0
   17efc:	2700      	movs	r7, #0
   17efe:	e697      	b.n	17c30 <__aeabi_dadd+0x188>
   17f00:	4650      	mov	r0, sl
   17f02:	000b      	movs	r3, r1
   17f04:	3820      	subs	r0, #32
   17f06:	40c3      	lsrs	r3, r0
   17f08:	4699      	mov	r9, r3
   17f0a:	4653      	mov	r3, sl
   17f0c:	2b20      	cmp	r3, #32
   17f0e:	d100      	bne.n	17f12 <__aeabi_dadd+0x46a>
   17f10:	e095      	b.n	1803e <__aeabi_dadd+0x596>
   17f12:	2340      	movs	r3, #64	; 0x40
   17f14:	4650      	mov	r0, sl
   17f16:	1a1b      	subs	r3, r3, r0
   17f18:	4099      	lsls	r1, r3
   17f1a:	430a      	orrs	r2, r1
   17f1c:	1e51      	subs	r1, r2, #1
   17f1e:	418a      	sbcs	r2, r1
   17f20:	464b      	mov	r3, r9
   17f22:	2100      	movs	r1, #0
   17f24:	431a      	orrs	r2, r3
   17f26:	e69f      	b.n	17c68 <__aeabi_dadd+0x1c0>
   17f28:	2e00      	cmp	r6, #0
   17f2a:	d130      	bne.n	17f8e <__aeabi_dadd+0x4e6>
   17f2c:	0026      	movs	r6, r4
   17f2e:	433e      	orrs	r6, r7
   17f30:	d067      	beq.n	18002 <__aeabi_dadd+0x55a>
   17f32:	43db      	mvns	r3, r3
   17f34:	469a      	mov	sl, r3
   17f36:	2b00      	cmp	r3, #0
   17f38:	d01c      	beq.n	17f74 <__aeabi_dadd+0x4cc>
   17f3a:	4e61      	ldr	r6, [pc, #388]	; (180c0 <__aeabi_dadd+0x618>)
   17f3c:	42b0      	cmp	r0, r6
   17f3e:	d060      	beq.n	18002 <__aeabi_dadd+0x55a>
   17f40:	4653      	mov	r3, sl
   17f42:	2b38      	cmp	r3, #56	; 0x38
   17f44:	dd00      	ble.n	17f48 <__aeabi_dadd+0x4a0>
   17f46:	e096      	b.n	18076 <__aeabi_dadd+0x5ce>
   17f48:	2b1f      	cmp	r3, #31
   17f4a:	dd00      	ble.n	17f4e <__aeabi_dadd+0x4a6>
   17f4c:	e09f      	b.n	1808e <__aeabi_dadd+0x5e6>
   17f4e:	2620      	movs	r6, #32
   17f50:	1af3      	subs	r3, r6, r3
   17f52:	0026      	movs	r6, r4
   17f54:	409e      	lsls	r6, r3
   17f56:	469c      	mov	ip, r3
   17f58:	46b3      	mov	fp, r6
   17f5a:	4653      	mov	r3, sl
   17f5c:	003e      	movs	r6, r7
   17f5e:	40de      	lsrs	r6, r3
   17f60:	0033      	movs	r3, r6
   17f62:	465e      	mov	r6, fp
   17f64:	431e      	orrs	r6, r3
   17f66:	4663      	mov	r3, ip
   17f68:	409f      	lsls	r7, r3
   17f6a:	1e7b      	subs	r3, r7, #1
   17f6c:	419f      	sbcs	r7, r3
   17f6e:	4653      	mov	r3, sl
   17f70:	40dc      	lsrs	r4, r3
   17f72:	4337      	orrs	r7, r6
   17f74:	18bf      	adds	r7, r7, r2
   17f76:	4297      	cmp	r7, r2
   17f78:	4192      	sbcs	r2, r2
   17f7a:	1864      	adds	r4, r4, r1
   17f7c:	4252      	negs	r2, r2
   17f7e:	18a4      	adds	r4, r4, r2
   17f80:	0006      	movs	r6, r0
   17f82:	e678      	b.n	17c76 <__aeabi_dadd+0x1ce>
   17f84:	4327      	orrs	r7, r4
   17f86:	1e7c      	subs	r4, r7, #1
   17f88:	41a7      	sbcs	r7, r4
   17f8a:	2400      	movs	r4, #0
   17f8c:	e737      	b.n	17dfe <__aeabi_dadd+0x356>
   17f8e:	4e4c      	ldr	r6, [pc, #304]	; (180c0 <__aeabi_dadd+0x618>)
   17f90:	42b0      	cmp	r0, r6
   17f92:	d036      	beq.n	18002 <__aeabi_dadd+0x55a>
   17f94:	2680      	movs	r6, #128	; 0x80
   17f96:	425b      	negs	r3, r3
   17f98:	0436      	lsls	r6, r6, #16
   17f9a:	469a      	mov	sl, r3
   17f9c:	4334      	orrs	r4, r6
   17f9e:	e7cf      	b.n	17f40 <__aeabi_dadd+0x498>
   17fa0:	0018      	movs	r0, r3
   17fa2:	4310      	orrs	r0, r2
   17fa4:	d100      	bne.n	17fa8 <__aeabi_dadd+0x500>
   17fa6:	e603      	b.n	17bb0 <__aeabi_dadd+0x108>
   17fa8:	1ab8      	subs	r0, r7, r2
   17faa:	4684      	mov	ip, r0
   17fac:	4567      	cmp	r7, ip
   17fae:	41ad      	sbcs	r5, r5
   17fb0:	1ae0      	subs	r0, r4, r3
   17fb2:	426d      	negs	r5, r5
   17fb4:	1b40      	subs	r0, r0, r5
   17fb6:	0205      	lsls	r5, r0, #8
   17fb8:	d400      	bmi.n	17fbc <__aeabi_dadd+0x514>
   17fba:	e62c      	b.n	17c16 <__aeabi_dadd+0x16e>
   17fbc:	1bd7      	subs	r7, r2, r7
   17fbe:	42ba      	cmp	r2, r7
   17fc0:	4192      	sbcs	r2, r2
   17fc2:	1b1c      	subs	r4, r3, r4
   17fc4:	4252      	negs	r2, r2
   17fc6:	1aa4      	subs	r4, r4, r2
   17fc8:	46d8      	mov	r8, fp
   17fca:	e5f1      	b.n	17bb0 <__aeabi_dadd+0x108>
   17fcc:	0018      	movs	r0, r3
   17fce:	4310      	orrs	r0, r2
   17fd0:	d100      	bne.n	17fd4 <__aeabi_dadd+0x52c>
   17fd2:	e763      	b.n	17e9c <__aeabi_dadd+0x3f4>
   17fd4:	08f8      	lsrs	r0, r7, #3
   17fd6:	0767      	lsls	r7, r4, #29
   17fd8:	4307      	orrs	r7, r0
   17fda:	2080      	movs	r0, #128	; 0x80
   17fdc:	08e4      	lsrs	r4, r4, #3
   17fde:	0300      	lsls	r0, r0, #12
   17fe0:	4204      	tst	r4, r0
   17fe2:	d008      	beq.n	17ff6 <__aeabi_dadd+0x54e>
   17fe4:	08dd      	lsrs	r5, r3, #3
   17fe6:	4205      	tst	r5, r0
   17fe8:	d105      	bne.n	17ff6 <__aeabi_dadd+0x54e>
   17fea:	08d2      	lsrs	r2, r2, #3
   17fec:	0759      	lsls	r1, r3, #29
   17fee:	4311      	orrs	r1, r2
   17ff0:	000f      	movs	r7, r1
   17ff2:	002c      	movs	r4, r5
   17ff4:	46d8      	mov	r8, fp
   17ff6:	0f7b      	lsrs	r3, r7, #29
   17ff8:	00e4      	lsls	r4, r4, #3
   17ffa:	431c      	orrs	r4, r3
   17ffc:	00ff      	lsls	r7, r7, #3
   17ffe:	4e30      	ldr	r6, [pc, #192]	; (180c0 <__aeabi_dadd+0x618>)
   18000:	e5d6      	b.n	17bb0 <__aeabi_dadd+0x108>
   18002:	000c      	movs	r4, r1
   18004:	0017      	movs	r7, r2
   18006:	0006      	movs	r6, r0
   18008:	e5d2      	b.n	17bb0 <__aeabi_dadd+0x108>
   1800a:	2b00      	cmp	r3, #0
   1800c:	d038      	beq.n	18080 <__aeabi_dadd+0x5d8>
   1800e:	000b      	movs	r3, r1
   18010:	4313      	orrs	r3, r2
   18012:	d100      	bne.n	18016 <__aeabi_dadd+0x56e>
   18014:	e742      	b.n	17e9c <__aeabi_dadd+0x3f4>
   18016:	08f8      	lsrs	r0, r7, #3
   18018:	0767      	lsls	r7, r4, #29
   1801a:	4307      	orrs	r7, r0
   1801c:	2080      	movs	r0, #128	; 0x80
   1801e:	08e4      	lsrs	r4, r4, #3
   18020:	0300      	lsls	r0, r0, #12
   18022:	4204      	tst	r4, r0
   18024:	d0e7      	beq.n	17ff6 <__aeabi_dadd+0x54e>
   18026:	08cb      	lsrs	r3, r1, #3
   18028:	4203      	tst	r3, r0
   1802a:	d1e4      	bne.n	17ff6 <__aeabi_dadd+0x54e>
   1802c:	08d2      	lsrs	r2, r2, #3
   1802e:	0749      	lsls	r1, r1, #29
   18030:	4311      	orrs	r1, r2
   18032:	000f      	movs	r7, r1
   18034:	001c      	movs	r4, r3
   18036:	e7de      	b.n	17ff6 <__aeabi_dadd+0x54e>
   18038:	2700      	movs	r7, #0
   1803a:	2400      	movs	r4, #0
   1803c:	e5d5      	b.n	17bea <__aeabi_dadd+0x142>
   1803e:	2100      	movs	r1, #0
   18040:	e76b      	b.n	17f1a <__aeabi_dadd+0x472>
   18042:	2500      	movs	r5, #0
   18044:	2700      	movs	r7, #0
   18046:	e5f3      	b.n	17c30 <__aeabi_dadd+0x188>
   18048:	464e      	mov	r6, r9
   1804a:	0025      	movs	r5, r4
   1804c:	3e20      	subs	r6, #32
   1804e:	40f5      	lsrs	r5, r6
   18050:	464b      	mov	r3, r9
   18052:	002e      	movs	r6, r5
   18054:	2b20      	cmp	r3, #32
   18056:	d02d      	beq.n	180b4 <__aeabi_dadd+0x60c>
   18058:	2540      	movs	r5, #64	; 0x40
   1805a:	1aed      	subs	r5, r5, r3
   1805c:	40ac      	lsls	r4, r5
   1805e:	4327      	orrs	r7, r4
   18060:	1e7c      	subs	r4, r7, #1
   18062:	41a7      	sbcs	r7, r4
   18064:	2400      	movs	r4, #0
   18066:	4337      	orrs	r7, r6
   18068:	e6c9      	b.n	17dfe <__aeabi_dadd+0x356>
   1806a:	2480      	movs	r4, #128	; 0x80
   1806c:	2500      	movs	r5, #0
   1806e:	0324      	lsls	r4, r4, #12
   18070:	4e13      	ldr	r6, [pc, #76]	; (180c0 <__aeabi_dadd+0x618>)
   18072:	2700      	movs	r7, #0
   18074:	e5dc      	b.n	17c30 <__aeabi_dadd+0x188>
   18076:	4327      	orrs	r7, r4
   18078:	1e7c      	subs	r4, r7, #1
   1807a:	41a7      	sbcs	r7, r4
   1807c:	2400      	movs	r4, #0
   1807e:	e779      	b.n	17f74 <__aeabi_dadd+0x4cc>
   18080:	000c      	movs	r4, r1
   18082:	0017      	movs	r7, r2
   18084:	4e0e      	ldr	r6, [pc, #56]	; (180c0 <__aeabi_dadd+0x618>)
   18086:	e593      	b.n	17bb0 <__aeabi_dadd+0x108>
   18088:	000c      	movs	r4, r1
   1808a:	0017      	movs	r7, r2
   1808c:	e590      	b.n	17bb0 <__aeabi_dadd+0x108>
   1808e:	4656      	mov	r6, sl
   18090:	0023      	movs	r3, r4
   18092:	3e20      	subs	r6, #32
   18094:	40f3      	lsrs	r3, r6
   18096:	4699      	mov	r9, r3
   18098:	4653      	mov	r3, sl
   1809a:	2b20      	cmp	r3, #32
   1809c:	d00e      	beq.n	180bc <__aeabi_dadd+0x614>
   1809e:	2340      	movs	r3, #64	; 0x40
   180a0:	4656      	mov	r6, sl
   180a2:	1b9b      	subs	r3, r3, r6
   180a4:	409c      	lsls	r4, r3
   180a6:	4327      	orrs	r7, r4
   180a8:	1e7c      	subs	r4, r7, #1
   180aa:	41a7      	sbcs	r7, r4
   180ac:	464b      	mov	r3, r9
   180ae:	2400      	movs	r4, #0
   180b0:	431f      	orrs	r7, r3
   180b2:	e75f      	b.n	17f74 <__aeabi_dadd+0x4cc>
   180b4:	2400      	movs	r4, #0
   180b6:	e7d2      	b.n	1805e <__aeabi_dadd+0x5b6>
   180b8:	0017      	movs	r7, r2
   180ba:	e5b2      	b.n	17c22 <__aeabi_dadd+0x17a>
   180bc:	2400      	movs	r4, #0
   180be:	e7f2      	b.n	180a6 <__aeabi_dadd+0x5fe>
   180c0:	000007ff 	.word	0x000007ff
   180c4:	ff7fffff 	.word	0xff7fffff

000180c8 <__aeabi_ddiv>:
   180c8:	b5f0      	push	{r4, r5, r6, r7, lr}
   180ca:	4657      	mov	r7, sl
   180cc:	4645      	mov	r5, r8
   180ce:	46de      	mov	lr, fp
   180d0:	464e      	mov	r6, r9
   180d2:	b5e0      	push	{r5, r6, r7, lr}
   180d4:	004c      	lsls	r4, r1, #1
   180d6:	030e      	lsls	r6, r1, #12
   180d8:	b087      	sub	sp, #28
   180da:	4683      	mov	fp, r0
   180dc:	4692      	mov	sl, r2
   180de:	001d      	movs	r5, r3
   180e0:	4680      	mov	r8, r0
   180e2:	0b36      	lsrs	r6, r6, #12
   180e4:	0d64      	lsrs	r4, r4, #21
   180e6:	0fcf      	lsrs	r7, r1, #31
   180e8:	2c00      	cmp	r4, #0
   180ea:	d04f      	beq.n	1818c <__aeabi_ddiv+0xc4>
   180ec:	4b6f      	ldr	r3, [pc, #444]	; (182ac <__aeabi_ddiv+0x1e4>)
   180ee:	429c      	cmp	r4, r3
   180f0:	d035      	beq.n	1815e <__aeabi_ddiv+0x96>
   180f2:	2380      	movs	r3, #128	; 0x80
   180f4:	0f42      	lsrs	r2, r0, #29
   180f6:	041b      	lsls	r3, r3, #16
   180f8:	00f6      	lsls	r6, r6, #3
   180fa:	4313      	orrs	r3, r2
   180fc:	4333      	orrs	r3, r6
   180fe:	4699      	mov	r9, r3
   18100:	00c3      	lsls	r3, r0, #3
   18102:	4698      	mov	r8, r3
   18104:	4b6a      	ldr	r3, [pc, #424]	; (182b0 <__aeabi_ddiv+0x1e8>)
   18106:	2600      	movs	r6, #0
   18108:	469c      	mov	ip, r3
   1810a:	2300      	movs	r3, #0
   1810c:	4464      	add	r4, ip
   1810e:	9303      	str	r3, [sp, #12]
   18110:	032b      	lsls	r3, r5, #12
   18112:	0b1b      	lsrs	r3, r3, #12
   18114:	469b      	mov	fp, r3
   18116:	006b      	lsls	r3, r5, #1
   18118:	0fed      	lsrs	r5, r5, #31
   1811a:	4650      	mov	r0, sl
   1811c:	0d5b      	lsrs	r3, r3, #21
   1811e:	9501      	str	r5, [sp, #4]
   18120:	d05e      	beq.n	181e0 <__aeabi_ddiv+0x118>
   18122:	4a62      	ldr	r2, [pc, #392]	; (182ac <__aeabi_ddiv+0x1e4>)
   18124:	4293      	cmp	r3, r2
   18126:	d053      	beq.n	181d0 <__aeabi_ddiv+0x108>
   18128:	465a      	mov	r2, fp
   1812a:	00d1      	lsls	r1, r2, #3
   1812c:	2280      	movs	r2, #128	; 0x80
   1812e:	0f40      	lsrs	r0, r0, #29
   18130:	0412      	lsls	r2, r2, #16
   18132:	4302      	orrs	r2, r0
   18134:	430a      	orrs	r2, r1
   18136:	4693      	mov	fp, r2
   18138:	4652      	mov	r2, sl
   1813a:	00d1      	lsls	r1, r2, #3
   1813c:	4a5c      	ldr	r2, [pc, #368]	; (182b0 <__aeabi_ddiv+0x1e8>)
   1813e:	4694      	mov	ip, r2
   18140:	2200      	movs	r2, #0
   18142:	4463      	add	r3, ip
   18144:	0038      	movs	r0, r7
   18146:	4068      	eors	r0, r5
   18148:	4684      	mov	ip, r0
   1814a:	9002      	str	r0, [sp, #8]
   1814c:	1ae4      	subs	r4, r4, r3
   1814e:	4316      	orrs	r6, r2
   18150:	2e0f      	cmp	r6, #15
   18152:	d900      	bls.n	18156 <__aeabi_ddiv+0x8e>
   18154:	e0b4      	b.n	182c0 <__aeabi_ddiv+0x1f8>
   18156:	4b57      	ldr	r3, [pc, #348]	; (182b4 <__aeabi_ddiv+0x1ec>)
   18158:	00b6      	lsls	r6, r6, #2
   1815a:	599b      	ldr	r3, [r3, r6]
   1815c:	469f      	mov	pc, r3
   1815e:	0003      	movs	r3, r0
   18160:	4333      	orrs	r3, r6
   18162:	4699      	mov	r9, r3
   18164:	d16c      	bne.n	18240 <__aeabi_ddiv+0x178>
   18166:	2300      	movs	r3, #0
   18168:	4698      	mov	r8, r3
   1816a:	3302      	adds	r3, #2
   1816c:	2608      	movs	r6, #8
   1816e:	9303      	str	r3, [sp, #12]
   18170:	e7ce      	b.n	18110 <__aeabi_ddiv+0x48>
   18172:	46cb      	mov	fp, r9
   18174:	4641      	mov	r1, r8
   18176:	9a03      	ldr	r2, [sp, #12]
   18178:	9701      	str	r7, [sp, #4]
   1817a:	2a02      	cmp	r2, #2
   1817c:	d165      	bne.n	1824a <__aeabi_ddiv+0x182>
   1817e:	9b01      	ldr	r3, [sp, #4]
   18180:	4c4a      	ldr	r4, [pc, #296]	; (182ac <__aeabi_ddiv+0x1e4>)
   18182:	469c      	mov	ip, r3
   18184:	2300      	movs	r3, #0
   18186:	2200      	movs	r2, #0
   18188:	4698      	mov	r8, r3
   1818a:	e06b      	b.n	18264 <__aeabi_ddiv+0x19c>
   1818c:	0003      	movs	r3, r0
   1818e:	4333      	orrs	r3, r6
   18190:	4699      	mov	r9, r3
   18192:	d04e      	beq.n	18232 <__aeabi_ddiv+0x16a>
   18194:	2e00      	cmp	r6, #0
   18196:	d100      	bne.n	1819a <__aeabi_ddiv+0xd2>
   18198:	e1bc      	b.n	18514 <__aeabi_ddiv+0x44c>
   1819a:	0030      	movs	r0, r6
   1819c:	f001 fa5e 	bl	1965c <__clzsi2>
   181a0:	0003      	movs	r3, r0
   181a2:	3b0b      	subs	r3, #11
   181a4:	2b1c      	cmp	r3, #28
   181a6:	dd00      	ble.n	181aa <__aeabi_ddiv+0xe2>
   181a8:	e1ac      	b.n	18504 <__aeabi_ddiv+0x43c>
   181aa:	221d      	movs	r2, #29
   181ac:	1ad3      	subs	r3, r2, r3
   181ae:	465a      	mov	r2, fp
   181b0:	0001      	movs	r1, r0
   181b2:	40da      	lsrs	r2, r3
   181b4:	3908      	subs	r1, #8
   181b6:	408e      	lsls	r6, r1
   181b8:	0013      	movs	r3, r2
   181ba:	4333      	orrs	r3, r6
   181bc:	4699      	mov	r9, r3
   181be:	465b      	mov	r3, fp
   181c0:	408b      	lsls	r3, r1
   181c2:	4698      	mov	r8, r3
   181c4:	2300      	movs	r3, #0
   181c6:	4c3c      	ldr	r4, [pc, #240]	; (182b8 <__aeabi_ddiv+0x1f0>)
   181c8:	2600      	movs	r6, #0
   181ca:	1a24      	subs	r4, r4, r0
   181cc:	9303      	str	r3, [sp, #12]
   181ce:	e79f      	b.n	18110 <__aeabi_ddiv+0x48>
   181d0:	4651      	mov	r1, sl
   181d2:	465a      	mov	r2, fp
   181d4:	4311      	orrs	r1, r2
   181d6:	d129      	bne.n	1822c <__aeabi_ddiv+0x164>
   181d8:	2200      	movs	r2, #0
   181da:	4693      	mov	fp, r2
   181dc:	3202      	adds	r2, #2
   181de:	e7b1      	b.n	18144 <__aeabi_ddiv+0x7c>
   181e0:	4659      	mov	r1, fp
   181e2:	4301      	orrs	r1, r0
   181e4:	d01e      	beq.n	18224 <__aeabi_ddiv+0x15c>
   181e6:	465b      	mov	r3, fp
   181e8:	2b00      	cmp	r3, #0
   181ea:	d100      	bne.n	181ee <__aeabi_ddiv+0x126>
   181ec:	e19e      	b.n	1852c <__aeabi_ddiv+0x464>
   181ee:	4658      	mov	r0, fp
   181f0:	f001 fa34 	bl	1965c <__clzsi2>
   181f4:	0003      	movs	r3, r0
   181f6:	3b0b      	subs	r3, #11
   181f8:	2b1c      	cmp	r3, #28
   181fa:	dd00      	ble.n	181fe <__aeabi_ddiv+0x136>
   181fc:	e18f      	b.n	1851e <__aeabi_ddiv+0x456>
   181fe:	0002      	movs	r2, r0
   18200:	4659      	mov	r1, fp
   18202:	3a08      	subs	r2, #8
   18204:	4091      	lsls	r1, r2
   18206:	468b      	mov	fp, r1
   18208:	211d      	movs	r1, #29
   1820a:	1acb      	subs	r3, r1, r3
   1820c:	4651      	mov	r1, sl
   1820e:	40d9      	lsrs	r1, r3
   18210:	000b      	movs	r3, r1
   18212:	4659      	mov	r1, fp
   18214:	430b      	orrs	r3, r1
   18216:	4651      	mov	r1, sl
   18218:	469b      	mov	fp, r3
   1821a:	4091      	lsls	r1, r2
   1821c:	4b26      	ldr	r3, [pc, #152]	; (182b8 <__aeabi_ddiv+0x1f0>)
   1821e:	2200      	movs	r2, #0
   18220:	1a1b      	subs	r3, r3, r0
   18222:	e78f      	b.n	18144 <__aeabi_ddiv+0x7c>
   18224:	2300      	movs	r3, #0
   18226:	2201      	movs	r2, #1
   18228:	469b      	mov	fp, r3
   1822a:	e78b      	b.n	18144 <__aeabi_ddiv+0x7c>
   1822c:	4651      	mov	r1, sl
   1822e:	2203      	movs	r2, #3
   18230:	e788      	b.n	18144 <__aeabi_ddiv+0x7c>
   18232:	2300      	movs	r3, #0
   18234:	4698      	mov	r8, r3
   18236:	3301      	adds	r3, #1
   18238:	2604      	movs	r6, #4
   1823a:	2400      	movs	r4, #0
   1823c:	9303      	str	r3, [sp, #12]
   1823e:	e767      	b.n	18110 <__aeabi_ddiv+0x48>
   18240:	2303      	movs	r3, #3
   18242:	46b1      	mov	r9, r6
   18244:	9303      	str	r3, [sp, #12]
   18246:	260c      	movs	r6, #12
   18248:	e762      	b.n	18110 <__aeabi_ddiv+0x48>
   1824a:	2a03      	cmp	r2, #3
   1824c:	d100      	bne.n	18250 <__aeabi_ddiv+0x188>
   1824e:	e25c      	b.n	1870a <__aeabi_ddiv+0x642>
   18250:	9b01      	ldr	r3, [sp, #4]
   18252:	2a01      	cmp	r2, #1
   18254:	d000      	beq.n	18258 <__aeabi_ddiv+0x190>
   18256:	e1e4      	b.n	18622 <__aeabi_ddiv+0x55a>
   18258:	4013      	ands	r3, r2
   1825a:	469c      	mov	ip, r3
   1825c:	2300      	movs	r3, #0
   1825e:	2400      	movs	r4, #0
   18260:	2200      	movs	r2, #0
   18262:	4698      	mov	r8, r3
   18264:	2100      	movs	r1, #0
   18266:	0312      	lsls	r2, r2, #12
   18268:	0b13      	lsrs	r3, r2, #12
   1826a:	0d0a      	lsrs	r2, r1, #20
   1826c:	0512      	lsls	r2, r2, #20
   1826e:	431a      	orrs	r2, r3
   18270:	0523      	lsls	r3, r4, #20
   18272:	4c12      	ldr	r4, [pc, #72]	; (182bc <__aeabi_ddiv+0x1f4>)
   18274:	4640      	mov	r0, r8
   18276:	4022      	ands	r2, r4
   18278:	4313      	orrs	r3, r2
   1827a:	4662      	mov	r2, ip
   1827c:	005b      	lsls	r3, r3, #1
   1827e:	07d2      	lsls	r2, r2, #31
   18280:	085b      	lsrs	r3, r3, #1
   18282:	4313      	orrs	r3, r2
   18284:	0019      	movs	r1, r3
   18286:	b007      	add	sp, #28
   18288:	bc3c      	pop	{r2, r3, r4, r5}
   1828a:	4690      	mov	r8, r2
   1828c:	4699      	mov	r9, r3
   1828e:	46a2      	mov	sl, r4
   18290:	46ab      	mov	fp, r5
   18292:	bdf0      	pop	{r4, r5, r6, r7, pc}
   18294:	2300      	movs	r3, #0
   18296:	2280      	movs	r2, #128	; 0x80
   18298:	469c      	mov	ip, r3
   1829a:	0312      	lsls	r2, r2, #12
   1829c:	4698      	mov	r8, r3
   1829e:	4c03      	ldr	r4, [pc, #12]	; (182ac <__aeabi_ddiv+0x1e4>)
   182a0:	e7e0      	b.n	18264 <__aeabi_ddiv+0x19c>
   182a2:	2300      	movs	r3, #0
   182a4:	4c01      	ldr	r4, [pc, #4]	; (182ac <__aeabi_ddiv+0x1e4>)
   182a6:	2200      	movs	r2, #0
   182a8:	4698      	mov	r8, r3
   182aa:	e7db      	b.n	18264 <__aeabi_ddiv+0x19c>
   182ac:	000007ff 	.word	0x000007ff
   182b0:	fffffc01 	.word	0xfffffc01
   182b4:	000204dc 	.word	0x000204dc
   182b8:	fffffc0d 	.word	0xfffffc0d
   182bc:	800fffff 	.word	0x800fffff
   182c0:	45d9      	cmp	r9, fp
   182c2:	d900      	bls.n	182c6 <__aeabi_ddiv+0x1fe>
   182c4:	e139      	b.n	1853a <__aeabi_ddiv+0x472>
   182c6:	d100      	bne.n	182ca <__aeabi_ddiv+0x202>
   182c8:	e134      	b.n	18534 <__aeabi_ddiv+0x46c>
   182ca:	2300      	movs	r3, #0
   182cc:	4646      	mov	r6, r8
   182ce:	464d      	mov	r5, r9
   182d0:	469a      	mov	sl, r3
   182d2:	3c01      	subs	r4, #1
   182d4:	465b      	mov	r3, fp
   182d6:	0e0a      	lsrs	r2, r1, #24
   182d8:	021b      	lsls	r3, r3, #8
   182da:	431a      	orrs	r2, r3
   182dc:	020b      	lsls	r3, r1, #8
   182de:	0c17      	lsrs	r7, r2, #16
   182e0:	9303      	str	r3, [sp, #12]
   182e2:	0413      	lsls	r3, r2, #16
   182e4:	0c1b      	lsrs	r3, r3, #16
   182e6:	0039      	movs	r1, r7
   182e8:	0028      	movs	r0, r5
   182ea:	4690      	mov	r8, r2
   182ec:	9301      	str	r3, [sp, #4]
   182ee:	f7fe f999 	bl	16624 <__udivsi3>
   182f2:	0002      	movs	r2, r0
   182f4:	9b01      	ldr	r3, [sp, #4]
   182f6:	4683      	mov	fp, r0
   182f8:	435a      	muls	r2, r3
   182fa:	0028      	movs	r0, r5
   182fc:	0039      	movs	r1, r7
   182fe:	4691      	mov	r9, r2
   18300:	f7fe fa16 	bl	16730 <__aeabi_uidivmod>
   18304:	0c35      	lsrs	r5, r6, #16
   18306:	0409      	lsls	r1, r1, #16
   18308:	430d      	orrs	r5, r1
   1830a:	45a9      	cmp	r9, r5
   1830c:	d90d      	bls.n	1832a <__aeabi_ddiv+0x262>
   1830e:	465b      	mov	r3, fp
   18310:	4445      	add	r5, r8
   18312:	3b01      	subs	r3, #1
   18314:	45a8      	cmp	r8, r5
   18316:	d900      	bls.n	1831a <__aeabi_ddiv+0x252>
   18318:	e13a      	b.n	18590 <__aeabi_ddiv+0x4c8>
   1831a:	45a9      	cmp	r9, r5
   1831c:	d800      	bhi.n	18320 <__aeabi_ddiv+0x258>
   1831e:	e137      	b.n	18590 <__aeabi_ddiv+0x4c8>
   18320:	2302      	movs	r3, #2
   18322:	425b      	negs	r3, r3
   18324:	469c      	mov	ip, r3
   18326:	4445      	add	r5, r8
   18328:	44e3      	add	fp, ip
   1832a:	464b      	mov	r3, r9
   1832c:	1aeb      	subs	r3, r5, r3
   1832e:	0039      	movs	r1, r7
   18330:	0018      	movs	r0, r3
   18332:	9304      	str	r3, [sp, #16]
   18334:	f7fe f976 	bl	16624 <__udivsi3>
   18338:	9b01      	ldr	r3, [sp, #4]
   1833a:	0005      	movs	r5, r0
   1833c:	4343      	muls	r3, r0
   1833e:	0039      	movs	r1, r7
   18340:	9804      	ldr	r0, [sp, #16]
   18342:	4699      	mov	r9, r3
   18344:	f7fe f9f4 	bl	16730 <__aeabi_uidivmod>
   18348:	0433      	lsls	r3, r6, #16
   1834a:	0409      	lsls	r1, r1, #16
   1834c:	0c1b      	lsrs	r3, r3, #16
   1834e:	430b      	orrs	r3, r1
   18350:	4599      	cmp	r9, r3
   18352:	d909      	bls.n	18368 <__aeabi_ddiv+0x2a0>
   18354:	4443      	add	r3, r8
   18356:	1e6a      	subs	r2, r5, #1
   18358:	4598      	cmp	r8, r3
   1835a:	d900      	bls.n	1835e <__aeabi_ddiv+0x296>
   1835c:	e11a      	b.n	18594 <__aeabi_ddiv+0x4cc>
   1835e:	4599      	cmp	r9, r3
   18360:	d800      	bhi.n	18364 <__aeabi_ddiv+0x29c>
   18362:	e117      	b.n	18594 <__aeabi_ddiv+0x4cc>
   18364:	3d02      	subs	r5, #2
   18366:	4443      	add	r3, r8
   18368:	464a      	mov	r2, r9
   1836a:	1a9b      	subs	r3, r3, r2
   1836c:	465a      	mov	r2, fp
   1836e:	0412      	lsls	r2, r2, #16
   18370:	432a      	orrs	r2, r5
   18372:	9903      	ldr	r1, [sp, #12]
   18374:	4693      	mov	fp, r2
   18376:	0c10      	lsrs	r0, r2, #16
   18378:	0c0a      	lsrs	r2, r1, #16
   1837a:	4691      	mov	r9, r2
   1837c:	0409      	lsls	r1, r1, #16
   1837e:	465a      	mov	r2, fp
   18380:	0c09      	lsrs	r1, r1, #16
   18382:	464e      	mov	r6, r9
   18384:	000d      	movs	r5, r1
   18386:	0412      	lsls	r2, r2, #16
   18388:	0c12      	lsrs	r2, r2, #16
   1838a:	4345      	muls	r5, r0
   1838c:	9105      	str	r1, [sp, #20]
   1838e:	4351      	muls	r1, r2
   18390:	4372      	muls	r2, r6
   18392:	4370      	muls	r0, r6
   18394:	1952      	adds	r2, r2, r5
   18396:	0c0e      	lsrs	r6, r1, #16
   18398:	18b2      	adds	r2, r6, r2
   1839a:	4295      	cmp	r5, r2
   1839c:	d903      	bls.n	183a6 <__aeabi_ddiv+0x2de>
   1839e:	2580      	movs	r5, #128	; 0x80
   183a0:	026d      	lsls	r5, r5, #9
   183a2:	46ac      	mov	ip, r5
   183a4:	4460      	add	r0, ip
   183a6:	0c15      	lsrs	r5, r2, #16
   183a8:	0409      	lsls	r1, r1, #16
   183aa:	0412      	lsls	r2, r2, #16
   183ac:	0c09      	lsrs	r1, r1, #16
   183ae:	1828      	adds	r0, r5, r0
   183b0:	1852      	adds	r2, r2, r1
   183b2:	4283      	cmp	r3, r0
   183b4:	d200      	bcs.n	183b8 <__aeabi_ddiv+0x2f0>
   183b6:	e0ce      	b.n	18556 <__aeabi_ddiv+0x48e>
   183b8:	d100      	bne.n	183bc <__aeabi_ddiv+0x2f4>
   183ba:	e0c8      	b.n	1854e <__aeabi_ddiv+0x486>
   183bc:	1a1d      	subs	r5, r3, r0
   183be:	4653      	mov	r3, sl
   183c0:	1a9e      	subs	r6, r3, r2
   183c2:	45b2      	cmp	sl, r6
   183c4:	4192      	sbcs	r2, r2
   183c6:	4252      	negs	r2, r2
   183c8:	1aab      	subs	r3, r5, r2
   183ca:	469a      	mov	sl, r3
   183cc:	4598      	cmp	r8, r3
   183ce:	d100      	bne.n	183d2 <__aeabi_ddiv+0x30a>
   183d0:	e117      	b.n	18602 <__aeabi_ddiv+0x53a>
   183d2:	0039      	movs	r1, r7
   183d4:	0018      	movs	r0, r3
   183d6:	f7fe f925 	bl	16624 <__udivsi3>
   183da:	9b01      	ldr	r3, [sp, #4]
   183dc:	0005      	movs	r5, r0
   183de:	4343      	muls	r3, r0
   183e0:	0039      	movs	r1, r7
   183e2:	4650      	mov	r0, sl
   183e4:	9304      	str	r3, [sp, #16]
   183e6:	f7fe f9a3 	bl	16730 <__aeabi_uidivmod>
   183ea:	9804      	ldr	r0, [sp, #16]
   183ec:	040b      	lsls	r3, r1, #16
   183ee:	0c31      	lsrs	r1, r6, #16
   183f0:	4319      	orrs	r1, r3
   183f2:	4288      	cmp	r0, r1
   183f4:	d909      	bls.n	1840a <__aeabi_ddiv+0x342>
   183f6:	4441      	add	r1, r8
   183f8:	1e6b      	subs	r3, r5, #1
   183fa:	4588      	cmp	r8, r1
   183fc:	d900      	bls.n	18400 <__aeabi_ddiv+0x338>
   183fe:	e107      	b.n	18610 <__aeabi_ddiv+0x548>
   18400:	4288      	cmp	r0, r1
   18402:	d800      	bhi.n	18406 <__aeabi_ddiv+0x33e>
   18404:	e104      	b.n	18610 <__aeabi_ddiv+0x548>
   18406:	3d02      	subs	r5, #2
   18408:	4441      	add	r1, r8
   1840a:	9b04      	ldr	r3, [sp, #16]
   1840c:	1acb      	subs	r3, r1, r3
   1840e:	0018      	movs	r0, r3
   18410:	0039      	movs	r1, r7
   18412:	9304      	str	r3, [sp, #16]
   18414:	f7fe f906 	bl	16624 <__udivsi3>
   18418:	9b01      	ldr	r3, [sp, #4]
   1841a:	4682      	mov	sl, r0
   1841c:	4343      	muls	r3, r0
   1841e:	0039      	movs	r1, r7
   18420:	9804      	ldr	r0, [sp, #16]
   18422:	9301      	str	r3, [sp, #4]
   18424:	f7fe f984 	bl	16730 <__aeabi_uidivmod>
   18428:	9801      	ldr	r0, [sp, #4]
   1842a:	040b      	lsls	r3, r1, #16
   1842c:	0431      	lsls	r1, r6, #16
   1842e:	0c09      	lsrs	r1, r1, #16
   18430:	4319      	orrs	r1, r3
   18432:	4288      	cmp	r0, r1
   18434:	d90d      	bls.n	18452 <__aeabi_ddiv+0x38a>
   18436:	4653      	mov	r3, sl
   18438:	4441      	add	r1, r8
   1843a:	3b01      	subs	r3, #1
   1843c:	4588      	cmp	r8, r1
   1843e:	d900      	bls.n	18442 <__aeabi_ddiv+0x37a>
   18440:	e0e8      	b.n	18614 <__aeabi_ddiv+0x54c>
   18442:	4288      	cmp	r0, r1
   18444:	d800      	bhi.n	18448 <__aeabi_ddiv+0x380>
   18446:	e0e5      	b.n	18614 <__aeabi_ddiv+0x54c>
   18448:	2302      	movs	r3, #2
   1844a:	425b      	negs	r3, r3
   1844c:	469c      	mov	ip, r3
   1844e:	4441      	add	r1, r8
   18450:	44e2      	add	sl, ip
   18452:	9b01      	ldr	r3, [sp, #4]
   18454:	042d      	lsls	r5, r5, #16
   18456:	1ace      	subs	r6, r1, r3
   18458:	4651      	mov	r1, sl
   1845a:	4329      	orrs	r1, r5
   1845c:	9d05      	ldr	r5, [sp, #20]
   1845e:	464f      	mov	r7, r9
   18460:	002a      	movs	r2, r5
   18462:	040b      	lsls	r3, r1, #16
   18464:	0c08      	lsrs	r0, r1, #16
   18466:	0c1b      	lsrs	r3, r3, #16
   18468:	435a      	muls	r2, r3
   1846a:	4345      	muls	r5, r0
   1846c:	437b      	muls	r3, r7
   1846e:	4378      	muls	r0, r7
   18470:	195b      	adds	r3, r3, r5
   18472:	0c17      	lsrs	r7, r2, #16
   18474:	18fb      	adds	r3, r7, r3
   18476:	429d      	cmp	r5, r3
   18478:	d903      	bls.n	18482 <__aeabi_ddiv+0x3ba>
   1847a:	2580      	movs	r5, #128	; 0x80
   1847c:	026d      	lsls	r5, r5, #9
   1847e:	46ac      	mov	ip, r5
   18480:	4460      	add	r0, ip
   18482:	0c1d      	lsrs	r5, r3, #16
   18484:	0412      	lsls	r2, r2, #16
   18486:	041b      	lsls	r3, r3, #16
   18488:	0c12      	lsrs	r2, r2, #16
   1848a:	1828      	adds	r0, r5, r0
   1848c:	189b      	adds	r3, r3, r2
   1848e:	4286      	cmp	r6, r0
   18490:	d200      	bcs.n	18494 <__aeabi_ddiv+0x3cc>
   18492:	e093      	b.n	185bc <__aeabi_ddiv+0x4f4>
   18494:	d100      	bne.n	18498 <__aeabi_ddiv+0x3d0>
   18496:	e08e      	b.n	185b6 <__aeabi_ddiv+0x4ee>
   18498:	2301      	movs	r3, #1
   1849a:	4319      	orrs	r1, r3
   1849c:	4ba0      	ldr	r3, [pc, #640]	; (18720 <__aeabi_ddiv+0x658>)
   1849e:	18e3      	adds	r3, r4, r3
   184a0:	2b00      	cmp	r3, #0
   184a2:	dc00      	bgt.n	184a6 <__aeabi_ddiv+0x3de>
   184a4:	e099      	b.n	185da <__aeabi_ddiv+0x512>
   184a6:	074a      	lsls	r2, r1, #29
   184a8:	d000      	beq.n	184ac <__aeabi_ddiv+0x3e4>
   184aa:	e09e      	b.n	185ea <__aeabi_ddiv+0x522>
   184ac:	465a      	mov	r2, fp
   184ae:	01d2      	lsls	r2, r2, #7
   184b0:	d506      	bpl.n	184c0 <__aeabi_ddiv+0x3f8>
   184b2:	465a      	mov	r2, fp
   184b4:	4b9b      	ldr	r3, [pc, #620]	; (18724 <__aeabi_ddiv+0x65c>)
   184b6:	401a      	ands	r2, r3
   184b8:	2380      	movs	r3, #128	; 0x80
   184ba:	4693      	mov	fp, r2
   184bc:	00db      	lsls	r3, r3, #3
   184be:	18e3      	adds	r3, r4, r3
   184c0:	4a99      	ldr	r2, [pc, #612]	; (18728 <__aeabi_ddiv+0x660>)
   184c2:	4293      	cmp	r3, r2
   184c4:	dd68      	ble.n	18598 <__aeabi_ddiv+0x4d0>
   184c6:	2301      	movs	r3, #1
   184c8:	9a02      	ldr	r2, [sp, #8]
   184ca:	4c98      	ldr	r4, [pc, #608]	; (1872c <__aeabi_ddiv+0x664>)
   184cc:	401a      	ands	r2, r3
   184ce:	2300      	movs	r3, #0
   184d0:	4694      	mov	ip, r2
   184d2:	4698      	mov	r8, r3
   184d4:	2200      	movs	r2, #0
   184d6:	e6c5      	b.n	18264 <__aeabi_ddiv+0x19c>
   184d8:	2280      	movs	r2, #128	; 0x80
   184da:	464b      	mov	r3, r9
   184dc:	0312      	lsls	r2, r2, #12
   184de:	4213      	tst	r3, r2
   184e0:	d00a      	beq.n	184f8 <__aeabi_ddiv+0x430>
   184e2:	465b      	mov	r3, fp
   184e4:	4213      	tst	r3, r2
   184e6:	d106      	bne.n	184f6 <__aeabi_ddiv+0x42e>
   184e8:	431a      	orrs	r2, r3
   184ea:	0312      	lsls	r2, r2, #12
   184ec:	0b12      	lsrs	r2, r2, #12
   184ee:	46ac      	mov	ip, r5
   184f0:	4688      	mov	r8, r1
   184f2:	4c8e      	ldr	r4, [pc, #568]	; (1872c <__aeabi_ddiv+0x664>)
   184f4:	e6b6      	b.n	18264 <__aeabi_ddiv+0x19c>
   184f6:	464b      	mov	r3, r9
   184f8:	431a      	orrs	r2, r3
   184fa:	0312      	lsls	r2, r2, #12
   184fc:	0b12      	lsrs	r2, r2, #12
   184fe:	46bc      	mov	ip, r7
   18500:	4c8a      	ldr	r4, [pc, #552]	; (1872c <__aeabi_ddiv+0x664>)
   18502:	e6af      	b.n	18264 <__aeabi_ddiv+0x19c>
   18504:	0003      	movs	r3, r0
   18506:	465a      	mov	r2, fp
   18508:	3b28      	subs	r3, #40	; 0x28
   1850a:	409a      	lsls	r2, r3
   1850c:	2300      	movs	r3, #0
   1850e:	4691      	mov	r9, r2
   18510:	4698      	mov	r8, r3
   18512:	e657      	b.n	181c4 <__aeabi_ddiv+0xfc>
   18514:	4658      	mov	r0, fp
   18516:	f001 f8a1 	bl	1965c <__clzsi2>
   1851a:	3020      	adds	r0, #32
   1851c:	e640      	b.n	181a0 <__aeabi_ddiv+0xd8>
   1851e:	0003      	movs	r3, r0
   18520:	4652      	mov	r2, sl
   18522:	3b28      	subs	r3, #40	; 0x28
   18524:	409a      	lsls	r2, r3
   18526:	2100      	movs	r1, #0
   18528:	4693      	mov	fp, r2
   1852a:	e677      	b.n	1821c <__aeabi_ddiv+0x154>
   1852c:	f001 f896 	bl	1965c <__clzsi2>
   18530:	3020      	adds	r0, #32
   18532:	e65f      	b.n	181f4 <__aeabi_ddiv+0x12c>
   18534:	4588      	cmp	r8, r1
   18536:	d200      	bcs.n	1853a <__aeabi_ddiv+0x472>
   18538:	e6c7      	b.n	182ca <__aeabi_ddiv+0x202>
   1853a:	464b      	mov	r3, r9
   1853c:	07de      	lsls	r6, r3, #31
   1853e:	085d      	lsrs	r5, r3, #1
   18540:	4643      	mov	r3, r8
   18542:	085b      	lsrs	r3, r3, #1
   18544:	431e      	orrs	r6, r3
   18546:	4643      	mov	r3, r8
   18548:	07db      	lsls	r3, r3, #31
   1854a:	469a      	mov	sl, r3
   1854c:	e6c2      	b.n	182d4 <__aeabi_ddiv+0x20c>
   1854e:	2500      	movs	r5, #0
   18550:	4592      	cmp	sl, r2
   18552:	d300      	bcc.n	18556 <__aeabi_ddiv+0x48e>
   18554:	e733      	b.n	183be <__aeabi_ddiv+0x2f6>
   18556:	9e03      	ldr	r6, [sp, #12]
   18558:	4659      	mov	r1, fp
   1855a:	46b4      	mov	ip, r6
   1855c:	44e2      	add	sl, ip
   1855e:	45b2      	cmp	sl, r6
   18560:	41ad      	sbcs	r5, r5
   18562:	426d      	negs	r5, r5
   18564:	4445      	add	r5, r8
   18566:	18eb      	adds	r3, r5, r3
   18568:	3901      	subs	r1, #1
   1856a:	4598      	cmp	r8, r3
   1856c:	d207      	bcs.n	1857e <__aeabi_ddiv+0x4b6>
   1856e:	4298      	cmp	r0, r3
   18570:	d900      	bls.n	18574 <__aeabi_ddiv+0x4ac>
   18572:	e07f      	b.n	18674 <__aeabi_ddiv+0x5ac>
   18574:	d100      	bne.n	18578 <__aeabi_ddiv+0x4b0>
   18576:	e0bc      	b.n	186f2 <__aeabi_ddiv+0x62a>
   18578:	1a1d      	subs	r5, r3, r0
   1857a:	468b      	mov	fp, r1
   1857c:	e71f      	b.n	183be <__aeabi_ddiv+0x2f6>
   1857e:	4598      	cmp	r8, r3
   18580:	d1fa      	bne.n	18578 <__aeabi_ddiv+0x4b0>
   18582:	9d03      	ldr	r5, [sp, #12]
   18584:	4555      	cmp	r5, sl
   18586:	d9f2      	bls.n	1856e <__aeabi_ddiv+0x4a6>
   18588:	4643      	mov	r3, r8
   1858a:	468b      	mov	fp, r1
   1858c:	1a1d      	subs	r5, r3, r0
   1858e:	e716      	b.n	183be <__aeabi_ddiv+0x2f6>
   18590:	469b      	mov	fp, r3
   18592:	e6ca      	b.n	1832a <__aeabi_ddiv+0x262>
   18594:	0015      	movs	r5, r2
   18596:	e6e7      	b.n	18368 <__aeabi_ddiv+0x2a0>
   18598:	465a      	mov	r2, fp
   1859a:	08c9      	lsrs	r1, r1, #3
   1859c:	0752      	lsls	r2, r2, #29
   1859e:	430a      	orrs	r2, r1
   185a0:	055b      	lsls	r3, r3, #21
   185a2:	4690      	mov	r8, r2
   185a4:	0d5c      	lsrs	r4, r3, #21
   185a6:	465a      	mov	r2, fp
   185a8:	2301      	movs	r3, #1
   185aa:	9902      	ldr	r1, [sp, #8]
   185ac:	0252      	lsls	r2, r2, #9
   185ae:	4019      	ands	r1, r3
   185b0:	0b12      	lsrs	r2, r2, #12
   185b2:	468c      	mov	ip, r1
   185b4:	e656      	b.n	18264 <__aeabi_ddiv+0x19c>
   185b6:	2b00      	cmp	r3, #0
   185b8:	d100      	bne.n	185bc <__aeabi_ddiv+0x4f4>
   185ba:	e76f      	b.n	1849c <__aeabi_ddiv+0x3d4>
   185bc:	4446      	add	r6, r8
   185be:	1e4a      	subs	r2, r1, #1
   185c0:	45b0      	cmp	r8, r6
   185c2:	d929      	bls.n	18618 <__aeabi_ddiv+0x550>
   185c4:	0011      	movs	r1, r2
   185c6:	4286      	cmp	r6, r0
   185c8:	d000      	beq.n	185cc <__aeabi_ddiv+0x504>
   185ca:	e765      	b.n	18498 <__aeabi_ddiv+0x3d0>
   185cc:	9a03      	ldr	r2, [sp, #12]
   185ce:	4293      	cmp	r3, r2
   185d0:	d000      	beq.n	185d4 <__aeabi_ddiv+0x50c>
   185d2:	e761      	b.n	18498 <__aeabi_ddiv+0x3d0>
   185d4:	e762      	b.n	1849c <__aeabi_ddiv+0x3d4>
   185d6:	2101      	movs	r1, #1
   185d8:	4249      	negs	r1, r1
   185da:	2001      	movs	r0, #1
   185dc:	1ac2      	subs	r2, r0, r3
   185de:	2a38      	cmp	r2, #56	; 0x38
   185e0:	dd21      	ble.n	18626 <__aeabi_ddiv+0x55e>
   185e2:	9b02      	ldr	r3, [sp, #8]
   185e4:	4003      	ands	r3, r0
   185e6:	469c      	mov	ip, r3
   185e8:	e638      	b.n	1825c <__aeabi_ddiv+0x194>
   185ea:	220f      	movs	r2, #15
   185ec:	400a      	ands	r2, r1
   185ee:	2a04      	cmp	r2, #4
   185f0:	d100      	bne.n	185f4 <__aeabi_ddiv+0x52c>
   185f2:	e75b      	b.n	184ac <__aeabi_ddiv+0x3e4>
   185f4:	000a      	movs	r2, r1
   185f6:	1d11      	adds	r1, r2, #4
   185f8:	4291      	cmp	r1, r2
   185fa:	4192      	sbcs	r2, r2
   185fc:	4252      	negs	r2, r2
   185fe:	4493      	add	fp, r2
   18600:	e754      	b.n	184ac <__aeabi_ddiv+0x3e4>
   18602:	4b47      	ldr	r3, [pc, #284]	; (18720 <__aeabi_ddiv+0x658>)
   18604:	18e3      	adds	r3, r4, r3
   18606:	2b00      	cmp	r3, #0
   18608:	dde5      	ble.n	185d6 <__aeabi_ddiv+0x50e>
   1860a:	2201      	movs	r2, #1
   1860c:	4252      	negs	r2, r2
   1860e:	e7f2      	b.n	185f6 <__aeabi_ddiv+0x52e>
   18610:	001d      	movs	r5, r3
   18612:	e6fa      	b.n	1840a <__aeabi_ddiv+0x342>
   18614:	469a      	mov	sl, r3
   18616:	e71c      	b.n	18452 <__aeabi_ddiv+0x38a>
   18618:	42b0      	cmp	r0, r6
   1861a:	d839      	bhi.n	18690 <__aeabi_ddiv+0x5c8>
   1861c:	d06e      	beq.n	186fc <__aeabi_ddiv+0x634>
   1861e:	0011      	movs	r1, r2
   18620:	e73a      	b.n	18498 <__aeabi_ddiv+0x3d0>
   18622:	9302      	str	r3, [sp, #8]
   18624:	e73a      	b.n	1849c <__aeabi_ddiv+0x3d4>
   18626:	2a1f      	cmp	r2, #31
   18628:	dc3c      	bgt.n	186a4 <__aeabi_ddiv+0x5dc>
   1862a:	2320      	movs	r3, #32
   1862c:	1a9b      	subs	r3, r3, r2
   1862e:	000c      	movs	r4, r1
   18630:	4658      	mov	r0, fp
   18632:	4099      	lsls	r1, r3
   18634:	4098      	lsls	r0, r3
   18636:	1e4b      	subs	r3, r1, #1
   18638:	4199      	sbcs	r1, r3
   1863a:	465b      	mov	r3, fp
   1863c:	40d4      	lsrs	r4, r2
   1863e:	40d3      	lsrs	r3, r2
   18640:	4320      	orrs	r0, r4
   18642:	4308      	orrs	r0, r1
   18644:	001a      	movs	r2, r3
   18646:	0743      	lsls	r3, r0, #29
   18648:	d009      	beq.n	1865e <__aeabi_ddiv+0x596>
   1864a:	230f      	movs	r3, #15
   1864c:	4003      	ands	r3, r0
   1864e:	2b04      	cmp	r3, #4
   18650:	d005      	beq.n	1865e <__aeabi_ddiv+0x596>
   18652:	0001      	movs	r1, r0
   18654:	1d08      	adds	r0, r1, #4
   18656:	4288      	cmp	r0, r1
   18658:	419b      	sbcs	r3, r3
   1865a:	425b      	negs	r3, r3
   1865c:	18d2      	adds	r2, r2, r3
   1865e:	0213      	lsls	r3, r2, #8
   18660:	d53a      	bpl.n	186d8 <__aeabi_ddiv+0x610>
   18662:	2301      	movs	r3, #1
   18664:	9a02      	ldr	r2, [sp, #8]
   18666:	2401      	movs	r4, #1
   18668:	401a      	ands	r2, r3
   1866a:	2300      	movs	r3, #0
   1866c:	4694      	mov	ip, r2
   1866e:	4698      	mov	r8, r3
   18670:	2200      	movs	r2, #0
   18672:	e5f7      	b.n	18264 <__aeabi_ddiv+0x19c>
   18674:	2102      	movs	r1, #2
   18676:	4249      	negs	r1, r1
   18678:	468c      	mov	ip, r1
   1867a:	9d03      	ldr	r5, [sp, #12]
   1867c:	44e3      	add	fp, ip
   1867e:	46ac      	mov	ip, r5
   18680:	44e2      	add	sl, ip
   18682:	45aa      	cmp	sl, r5
   18684:	41ad      	sbcs	r5, r5
   18686:	426d      	negs	r5, r5
   18688:	4445      	add	r5, r8
   1868a:	18ed      	adds	r5, r5, r3
   1868c:	1a2d      	subs	r5, r5, r0
   1868e:	e696      	b.n	183be <__aeabi_ddiv+0x2f6>
   18690:	1e8a      	subs	r2, r1, #2
   18692:	9903      	ldr	r1, [sp, #12]
   18694:	004d      	lsls	r5, r1, #1
   18696:	428d      	cmp	r5, r1
   18698:	4189      	sbcs	r1, r1
   1869a:	4249      	negs	r1, r1
   1869c:	4441      	add	r1, r8
   1869e:	1876      	adds	r6, r6, r1
   186a0:	9503      	str	r5, [sp, #12]
   186a2:	e78f      	b.n	185c4 <__aeabi_ddiv+0x4fc>
   186a4:	201f      	movs	r0, #31
   186a6:	4240      	negs	r0, r0
   186a8:	1ac3      	subs	r3, r0, r3
   186aa:	4658      	mov	r0, fp
   186ac:	40d8      	lsrs	r0, r3
   186ae:	0003      	movs	r3, r0
   186b0:	2a20      	cmp	r2, #32
   186b2:	d028      	beq.n	18706 <__aeabi_ddiv+0x63e>
   186b4:	2040      	movs	r0, #64	; 0x40
   186b6:	465d      	mov	r5, fp
   186b8:	1a82      	subs	r2, r0, r2
   186ba:	4095      	lsls	r5, r2
   186bc:	4329      	orrs	r1, r5
   186be:	1e4a      	subs	r2, r1, #1
   186c0:	4191      	sbcs	r1, r2
   186c2:	4319      	orrs	r1, r3
   186c4:	2307      	movs	r3, #7
   186c6:	2200      	movs	r2, #0
   186c8:	400b      	ands	r3, r1
   186ca:	d009      	beq.n	186e0 <__aeabi_ddiv+0x618>
   186cc:	230f      	movs	r3, #15
   186ce:	2200      	movs	r2, #0
   186d0:	400b      	ands	r3, r1
   186d2:	0008      	movs	r0, r1
   186d4:	2b04      	cmp	r3, #4
   186d6:	d1bd      	bne.n	18654 <__aeabi_ddiv+0x58c>
   186d8:	0001      	movs	r1, r0
   186da:	0753      	lsls	r3, r2, #29
   186dc:	0252      	lsls	r2, r2, #9
   186de:	0b12      	lsrs	r2, r2, #12
   186e0:	08c9      	lsrs	r1, r1, #3
   186e2:	4319      	orrs	r1, r3
   186e4:	2301      	movs	r3, #1
   186e6:	4688      	mov	r8, r1
   186e8:	9902      	ldr	r1, [sp, #8]
   186ea:	2400      	movs	r4, #0
   186ec:	4019      	ands	r1, r3
   186ee:	468c      	mov	ip, r1
   186f0:	e5b8      	b.n	18264 <__aeabi_ddiv+0x19c>
   186f2:	4552      	cmp	r2, sl
   186f4:	d8be      	bhi.n	18674 <__aeabi_ddiv+0x5ac>
   186f6:	468b      	mov	fp, r1
   186f8:	2500      	movs	r5, #0
   186fa:	e660      	b.n	183be <__aeabi_ddiv+0x2f6>
   186fc:	9d03      	ldr	r5, [sp, #12]
   186fe:	429d      	cmp	r5, r3
   18700:	d3c6      	bcc.n	18690 <__aeabi_ddiv+0x5c8>
   18702:	0011      	movs	r1, r2
   18704:	e762      	b.n	185cc <__aeabi_ddiv+0x504>
   18706:	2500      	movs	r5, #0
   18708:	e7d8      	b.n	186bc <__aeabi_ddiv+0x5f4>
   1870a:	2280      	movs	r2, #128	; 0x80
   1870c:	465b      	mov	r3, fp
   1870e:	0312      	lsls	r2, r2, #12
   18710:	431a      	orrs	r2, r3
   18712:	9b01      	ldr	r3, [sp, #4]
   18714:	0312      	lsls	r2, r2, #12
   18716:	0b12      	lsrs	r2, r2, #12
   18718:	469c      	mov	ip, r3
   1871a:	4688      	mov	r8, r1
   1871c:	4c03      	ldr	r4, [pc, #12]	; (1872c <__aeabi_ddiv+0x664>)
   1871e:	e5a1      	b.n	18264 <__aeabi_ddiv+0x19c>
   18720:	000003ff 	.word	0x000003ff
   18724:	feffffff 	.word	0xfeffffff
   18728:	000007fe 	.word	0x000007fe
   1872c:	000007ff 	.word	0x000007ff

00018730 <__eqdf2>:
   18730:	b5f0      	push	{r4, r5, r6, r7, lr}
   18732:	464f      	mov	r7, r9
   18734:	4646      	mov	r6, r8
   18736:	46d6      	mov	lr, sl
   18738:	005c      	lsls	r4, r3, #1
   1873a:	b5c0      	push	{r6, r7, lr}
   1873c:	031f      	lsls	r7, r3, #12
   1873e:	0fdb      	lsrs	r3, r3, #31
   18740:	469a      	mov	sl, r3
   18742:	4b17      	ldr	r3, [pc, #92]	; (187a0 <__eqdf2+0x70>)
   18744:	030e      	lsls	r6, r1, #12
   18746:	004d      	lsls	r5, r1, #1
   18748:	4684      	mov	ip, r0
   1874a:	4680      	mov	r8, r0
   1874c:	0b36      	lsrs	r6, r6, #12
   1874e:	0d6d      	lsrs	r5, r5, #21
   18750:	0fc9      	lsrs	r1, r1, #31
   18752:	4691      	mov	r9, r2
   18754:	0b3f      	lsrs	r7, r7, #12
   18756:	0d64      	lsrs	r4, r4, #21
   18758:	2001      	movs	r0, #1
   1875a:	429d      	cmp	r5, r3
   1875c:	d008      	beq.n	18770 <__eqdf2+0x40>
   1875e:	429c      	cmp	r4, r3
   18760:	d001      	beq.n	18766 <__eqdf2+0x36>
   18762:	42a5      	cmp	r5, r4
   18764:	d00b      	beq.n	1877e <__eqdf2+0x4e>
   18766:	bc1c      	pop	{r2, r3, r4}
   18768:	4690      	mov	r8, r2
   1876a:	4699      	mov	r9, r3
   1876c:	46a2      	mov	sl, r4
   1876e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   18770:	4663      	mov	r3, ip
   18772:	4333      	orrs	r3, r6
   18774:	d1f7      	bne.n	18766 <__eqdf2+0x36>
   18776:	42ac      	cmp	r4, r5
   18778:	d1f5      	bne.n	18766 <__eqdf2+0x36>
   1877a:	433a      	orrs	r2, r7
   1877c:	d1f3      	bne.n	18766 <__eqdf2+0x36>
   1877e:	2001      	movs	r0, #1
   18780:	42be      	cmp	r6, r7
   18782:	d1f0      	bne.n	18766 <__eqdf2+0x36>
   18784:	45c8      	cmp	r8, r9
   18786:	d1ee      	bne.n	18766 <__eqdf2+0x36>
   18788:	4551      	cmp	r1, sl
   1878a:	d007      	beq.n	1879c <__eqdf2+0x6c>
   1878c:	2d00      	cmp	r5, #0
   1878e:	d1ea      	bne.n	18766 <__eqdf2+0x36>
   18790:	4663      	mov	r3, ip
   18792:	431e      	orrs	r6, r3
   18794:	0030      	movs	r0, r6
   18796:	1e46      	subs	r6, r0, #1
   18798:	41b0      	sbcs	r0, r6
   1879a:	e7e4      	b.n	18766 <__eqdf2+0x36>
   1879c:	2000      	movs	r0, #0
   1879e:	e7e2      	b.n	18766 <__eqdf2+0x36>
   187a0:	000007ff 	.word	0x000007ff

000187a4 <__gedf2>:
   187a4:	b5f0      	push	{r4, r5, r6, r7, lr}
   187a6:	4645      	mov	r5, r8
   187a8:	46de      	mov	lr, fp
   187aa:	4657      	mov	r7, sl
   187ac:	464e      	mov	r6, r9
   187ae:	b5e0      	push	{r5, r6, r7, lr}
   187b0:	031f      	lsls	r7, r3, #12
   187b2:	0b3d      	lsrs	r5, r7, #12
   187b4:	4f2c      	ldr	r7, [pc, #176]	; (18868 <__gedf2+0xc4>)
   187b6:	030e      	lsls	r6, r1, #12
   187b8:	004c      	lsls	r4, r1, #1
   187ba:	46ab      	mov	fp, r5
   187bc:	005d      	lsls	r5, r3, #1
   187be:	4684      	mov	ip, r0
   187c0:	0b36      	lsrs	r6, r6, #12
   187c2:	0d64      	lsrs	r4, r4, #21
   187c4:	0fc9      	lsrs	r1, r1, #31
   187c6:	4690      	mov	r8, r2
   187c8:	0d6d      	lsrs	r5, r5, #21
   187ca:	0fdb      	lsrs	r3, r3, #31
   187cc:	42bc      	cmp	r4, r7
   187ce:	d02a      	beq.n	18826 <__gedf2+0x82>
   187d0:	4f25      	ldr	r7, [pc, #148]	; (18868 <__gedf2+0xc4>)
   187d2:	42bd      	cmp	r5, r7
   187d4:	d02d      	beq.n	18832 <__gedf2+0x8e>
   187d6:	2c00      	cmp	r4, #0
   187d8:	d10f      	bne.n	187fa <__gedf2+0x56>
   187da:	4330      	orrs	r0, r6
   187dc:	0007      	movs	r7, r0
   187de:	4681      	mov	r9, r0
   187e0:	4278      	negs	r0, r7
   187e2:	4178      	adcs	r0, r7
   187e4:	b2c0      	uxtb	r0, r0
   187e6:	2d00      	cmp	r5, #0
   187e8:	d117      	bne.n	1881a <__gedf2+0x76>
   187ea:	465f      	mov	r7, fp
   187ec:	433a      	orrs	r2, r7
   187ee:	d114      	bne.n	1881a <__gedf2+0x76>
   187f0:	464b      	mov	r3, r9
   187f2:	2000      	movs	r0, #0
   187f4:	2b00      	cmp	r3, #0
   187f6:	d00a      	beq.n	1880e <__gedf2+0x6a>
   187f8:	e006      	b.n	18808 <__gedf2+0x64>
   187fa:	2d00      	cmp	r5, #0
   187fc:	d102      	bne.n	18804 <__gedf2+0x60>
   187fe:	4658      	mov	r0, fp
   18800:	4302      	orrs	r2, r0
   18802:	d001      	beq.n	18808 <__gedf2+0x64>
   18804:	4299      	cmp	r1, r3
   18806:	d018      	beq.n	1883a <__gedf2+0x96>
   18808:	4248      	negs	r0, r1
   1880a:	2101      	movs	r1, #1
   1880c:	4308      	orrs	r0, r1
   1880e:	bc3c      	pop	{r2, r3, r4, r5}
   18810:	4690      	mov	r8, r2
   18812:	4699      	mov	r9, r3
   18814:	46a2      	mov	sl, r4
   18816:	46ab      	mov	fp, r5
   18818:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1881a:	2800      	cmp	r0, #0
   1881c:	d0f2      	beq.n	18804 <__gedf2+0x60>
   1881e:	2001      	movs	r0, #1
   18820:	3b01      	subs	r3, #1
   18822:	4318      	orrs	r0, r3
   18824:	e7f3      	b.n	1880e <__gedf2+0x6a>
   18826:	0037      	movs	r7, r6
   18828:	4307      	orrs	r7, r0
   1882a:	d0d1      	beq.n	187d0 <__gedf2+0x2c>
   1882c:	2002      	movs	r0, #2
   1882e:	4240      	negs	r0, r0
   18830:	e7ed      	b.n	1880e <__gedf2+0x6a>
   18832:	465f      	mov	r7, fp
   18834:	4317      	orrs	r7, r2
   18836:	d0ce      	beq.n	187d6 <__gedf2+0x32>
   18838:	e7f8      	b.n	1882c <__gedf2+0x88>
   1883a:	42ac      	cmp	r4, r5
   1883c:	dce4      	bgt.n	18808 <__gedf2+0x64>
   1883e:	da03      	bge.n	18848 <__gedf2+0xa4>
   18840:	1e48      	subs	r0, r1, #1
   18842:	2101      	movs	r1, #1
   18844:	4308      	orrs	r0, r1
   18846:	e7e2      	b.n	1880e <__gedf2+0x6a>
   18848:	455e      	cmp	r6, fp
   1884a:	d8dd      	bhi.n	18808 <__gedf2+0x64>
   1884c:	d006      	beq.n	1885c <__gedf2+0xb8>
   1884e:	2000      	movs	r0, #0
   18850:	455e      	cmp	r6, fp
   18852:	d2dc      	bcs.n	1880e <__gedf2+0x6a>
   18854:	2301      	movs	r3, #1
   18856:	1e48      	subs	r0, r1, #1
   18858:	4318      	orrs	r0, r3
   1885a:	e7d8      	b.n	1880e <__gedf2+0x6a>
   1885c:	45c4      	cmp	ip, r8
   1885e:	d8d3      	bhi.n	18808 <__gedf2+0x64>
   18860:	2000      	movs	r0, #0
   18862:	45c4      	cmp	ip, r8
   18864:	d3f6      	bcc.n	18854 <__gedf2+0xb0>
   18866:	e7d2      	b.n	1880e <__gedf2+0x6a>
   18868:	000007ff 	.word	0x000007ff

0001886c <__ledf2>:
   1886c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1886e:	464e      	mov	r6, r9
   18870:	4645      	mov	r5, r8
   18872:	46de      	mov	lr, fp
   18874:	4657      	mov	r7, sl
   18876:	005c      	lsls	r4, r3, #1
   18878:	b5e0      	push	{r5, r6, r7, lr}
   1887a:	031f      	lsls	r7, r3, #12
   1887c:	0fdb      	lsrs	r3, r3, #31
   1887e:	4699      	mov	r9, r3
   18880:	4b2a      	ldr	r3, [pc, #168]	; (1892c <__ledf2+0xc0>)
   18882:	030e      	lsls	r6, r1, #12
   18884:	004d      	lsls	r5, r1, #1
   18886:	0fc9      	lsrs	r1, r1, #31
   18888:	4684      	mov	ip, r0
   1888a:	0b36      	lsrs	r6, r6, #12
   1888c:	0d6d      	lsrs	r5, r5, #21
   1888e:	468b      	mov	fp, r1
   18890:	4690      	mov	r8, r2
   18892:	0b3f      	lsrs	r7, r7, #12
   18894:	0d64      	lsrs	r4, r4, #21
   18896:	429d      	cmp	r5, r3
   18898:	d020      	beq.n	188dc <__ledf2+0x70>
   1889a:	4b24      	ldr	r3, [pc, #144]	; (1892c <__ledf2+0xc0>)
   1889c:	429c      	cmp	r4, r3
   1889e:	d022      	beq.n	188e6 <__ledf2+0x7a>
   188a0:	2d00      	cmp	r5, #0
   188a2:	d112      	bne.n	188ca <__ledf2+0x5e>
   188a4:	4330      	orrs	r0, r6
   188a6:	4243      	negs	r3, r0
   188a8:	4143      	adcs	r3, r0
   188aa:	b2db      	uxtb	r3, r3
   188ac:	2c00      	cmp	r4, #0
   188ae:	d01f      	beq.n	188f0 <__ledf2+0x84>
   188b0:	2b00      	cmp	r3, #0
   188b2:	d00c      	beq.n	188ce <__ledf2+0x62>
   188b4:	464b      	mov	r3, r9
   188b6:	2001      	movs	r0, #1
   188b8:	3b01      	subs	r3, #1
   188ba:	4303      	orrs	r3, r0
   188bc:	0018      	movs	r0, r3
   188be:	bc3c      	pop	{r2, r3, r4, r5}
   188c0:	4690      	mov	r8, r2
   188c2:	4699      	mov	r9, r3
   188c4:	46a2      	mov	sl, r4
   188c6:	46ab      	mov	fp, r5
   188c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   188ca:	2c00      	cmp	r4, #0
   188cc:	d016      	beq.n	188fc <__ledf2+0x90>
   188ce:	45cb      	cmp	fp, r9
   188d0:	d017      	beq.n	18902 <__ledf2+0x96>
   188d2:	465b      	mov	r3, fp
   188d4:	4259      	negs	r1, r3
   188d6:	2301      	movs	r3, #1
   188d8:	430b      	orrs	r3, r1
   188da:	e7ef      	b.n	188bc <__ledf2+0x50>
   188dc:	0031      	movs	r1, r6
   188de:	2302      	movs	r3, #2
   188e0:	4301      	orrs	r1, r0
   188e2:	d1eb      	bne.n	188bc <__ledf2+0x50>
   188e4:	e7d9      	b.n	1889a <__ledf2+0x2e>
   188e6:	0039      	movs	r1, r7
   188e8:	2302      	movs	r3, #2
   188ea:	4311      	orrs	r1, r2
   188ec:	d1e6      	bne.n	188bc <__ledf2+0x50>
   188ee:	e7d7      	b.n	188a0 <__ledf2+0x34>
   188f0:	433a      	orrs	r2, r7
   188f2:	d1dd      	bne.n	188b0 <__ledf2+0x44>
   188f4:	2300      	movs	r3, #0
   188f6:	2800      	cmp	r0, #0
   188f8:	d0e0      	beq.n	188bc <__ledf2+0x50>
   188fa:	e7ea      	b.n	188d2 <__ledf2+0x66>
   188fc:	433a      	orrs	r2, r7
   188fe:	d1e6      	bne.n	188ce <__ledf2+0x62>
   18900:	e7e7      	b.n	188d2 <__ledf2+0x66>
   18902:	42a5      	cmp	r5, r4
   18904:	dce5      	bgt.n	188d2 <__ledf2+0x66>
   18906:	db05      	blt.n	18914 <__ledf2+0xa8>
   18908:	42be      	cmp	r6, r7
   1890a:	d8e2      	bhi.n	188d2 <__ledf2+0x66>
   1890c:	d007      	beq.n	1891e <__ledf2+0xb2>
   1890e:	2300      	movs	r3, #0
   18910:	42be      	cmp	r6, r7
   18912:	d2d3      	bcs.n	188bc <__ledf2+0x50>
   18914:	4659      	mov	r1, fp
   18916:	2301      	movs	r3, #1
   18918:	3901      	subs	r1, #1
   1891a:	430b      	orrs	r3, r1
   1891c:	e7ce      	b.n	188bc <__ledf2+0x50>
   1891e:	45c4      	cmp	ip, r8
   18920:	d8d7      	bhi.n	188d2 <__ledf2+0x66>
   18922:	2300      	movs	r3, #0
   18924:	45c4      	cmp	ip, r8
   18926:	d3f5      	bcc.n	18914 <__ledf2+0xa8>
   18928:	e7c8      	b.n	188bc <__ledf2+0x50>
   1892a:	46c0      	nop			; (mov r8, r8)
   1892c:	000007ff 	.word	0x000007ff

00018930 <__aeabi_dmul>:
   18930:	b5f0      	push	{r4, r5, r6, r7, lr}
   18932:	4657      	mov	r7, sl
   18934:	4645      	mov	r5, r8
   18936:	46de      	mov	lr, fp
   18938:	464e      	mov	r6, r9
   1893a:	b5e0      	push	{r5, r6, r7, lr}
   1893c:	030c      	lsls	r4, r1, #12
   1893e:	4698      	mov	r8, r3
   18940:	004e      	lsls	r6, r1, #1
   18942:	0b23      	lsrs	r3, r4, #12
   18944:	b087      	sub	sp, #28
   18946:	0007      	movs	r7, r0
   18948:	4692      	mov	sl, r2
   1894a:	469b      	mov	fp, r3
   1894c:	0d76      	lsrs	r6, r6, #21
   1894e:	0fcd      	lsrs	r5, r1, #31
   18950:	2e00      	cmp	r6, #0
   18952:	d06b      	beq.n	18a2c <__aeabi_dmul+0xfc>
   18954:	4b6d      	ldr	r3, [pc, #436]	; (18b0c <__aeabi_dmul+0x1dc>)
   18956:	429e      	cmp	r6, r3
   18958:	d035      	beq.n	189c6 <__aeabi_dmul+0x96>
   1895a:	2480      	movs	r4, #128	; 0x80
   1895c:	465b      	mov	r3, fp
   1895e:	0f42      	lsrs	r2, r0, #29
   18960:	0424      	lsls	r4, r4, #16
   18962:	00db      	lsls	r3, r3, #3
   18964:	4314      	orrs	r4, r2
   18966:	431c      	orrs	r4, r3
   18968:	00c3      	lsls	r3, r0, #3
   1896a:	4699      	mov	r9, r3
   1896c:	4b68      	ldr	r3, [pc, #416]	; (18b10 <__aeabi_dmul+0x1e0>)
   1896e:	46a3      	mov	fp, r4
   18970:	469c      	mov	ip, r3
   18972:	2300      	movs	r3, #0
   18974:	2700      	movs	r7, #0
   18976:	4466      	add	r6, ip
   18978:	9302      	str	r3, [sp, #8]
   1897a:	4643      	mov	r3, r8
   1897c:	031c      	lsls	r4, r3, #12
   1897e:	005a      	lsls	r2, r3, #1
   18980:	0fdb      	lsrs	r3, r3, #31
   18982:	4650      	mov	r0, sl
   18984:	0b24      	lsrs	r4, r4, #12
   18986:	0d52      	lsrs	r2, r2, #21
   18988:	4698      	mov	r8, r3
   1898a:	d100      	bne.n	1898e <__aeabi_dmul+0x5e>
   1898c:	e076      	b.n	18a7c <__aeabi_dmul+0x14c>
   1898e:	4b5f      	ldr	r3, [pc, #380]	; (18b0c <__aeabi_dmul+0x1dc>)
   18990:	429a      	cmp	r2, r3
   18992:	d06d      	beq.n	18a70 <__aeabi_dmul+0x140>
   18994:	2380      	movs	r3, #128	; 0x80
   18996:	0f41      	lsrs	r1, r0, #29
   18998:	041b      	lsls	r3, r3, #16
   1899a:	430b      	orrs	r3, r1
   1899c:	495c      	ldr	r1, [pc, #368]	; (18b10 <__aeabi_dmul+0x1e0>)
   1899e:	00e4      	lsls	r4, r4, #3
   189a0:	468c      	mov	ip, r1
   189a2:	431c      	orrs	r4, r3
   189a4:	00c3      	lsls	r3, r0, #3
   189a6:	2000      	movs	r0, #0
   189a8:	4462      	add	r2, ip
   189aa:	4641      	mov	r1, r8
   189ac:	18b6      	adds	r6, r6, r2
   189ae:	4069      	eors	r1, r5
   189b0:	1c72      	adds	r2, r6, #1
   189b2:	9101      	str	r1, [sp, #4]
   189b4:	4694      	mov	ip, r2
   189b6:	4307      	orrs	r7, r0
   189b8:	2f0f      	cmp	r7, #15
   189ba:	d900      	bls.n	189be <__aeabi_dmul+0x8e>
   189bc:	e0b0      	b.n	18b20 <__aeabi_dmul+0x1f0>
   189be:	4a55      	ldr	r2, [pc, #340]	; (18b14 <__aeabi_dmul+0x1e4>)
   189c0:	00bf      	lsls	r7, r7, #2
   189c2:	59d2      	ldr	r2, [r2, r7]
   189c4:	4697      	mov	pc, r2
   189c6:	465b      	mov	r3, fp
   189c8:	4303      	orrs	r3, r0
   189ca:	4699      	mov	r9, r3
   189cc:	d000      	beq.n	189d0 <__aeabi_dmul+0xa0>
   189ce:	e087      	b.n	18ae0 <__aeabi_dmul+0x1b0>
   189d0:	2300      	movs	r3, #0
   189d2:	469b      	mov	fp, r3
   189d4:	3302      	adds	r3, #2
   189d6:	2708      	movs	r7, #8
   189d8:	9302      	str	r3, [sp, #8]
   189da:	e7ce      	b.n	1897a <__aeabi_dmul+0x4a>
   189dc:	4642      	mov	r2, r8
   189de:	9201      	str	r2, [sp, #4]
   189e0:	2802      	cmp	r0, #2
   189e2:	d067      	beq.n	18ab4 <__aeabi_dmul+0x184>
   189e4:	2803      	cmp	r0, #3
   189e6:	d100      	bne.n	189ea <__aeabi_dmul+0xba>
   189e8:	e20e      	b.n	18e08 <__aeabi_dmul+0x4d8>
   189ea:	2801      	cmp	r0, #1
   189ec:	d000      	beq.n	189f0 <__aeabi_dmul+0xc0>
   189ee:	e162      	b.n	18cb6 <__aeabi_dmul+0x386>
   189f0:	2300      	movs	r3, #0
   189f2:	2400      	movs	r4, #0
   189f4:	2200      	movs	r2, #0
   189f6:	4699      	mov	r9, r3
   189f8:	9901      	ldr	r1, [sp, #4]
   189fa:	4001      	ands	r1, r0
   189fc:	b2cd      	uxtb	r5, r1
   189fe:	2100      	movs	r1, #0
   18a00:	0312      	lsls	r2, r2, #12
   18a02:	0d0b      	lsrs	r3, r1, #20
   18a04:	0b12      	lsrs	r2, r2, #12
   18a06:	051b      	lsls	r3, r3, #20
   18a08:	4313      	orrs	r3, r2
   18a0a:	4a43      	ldr	r2, [pc, #268]	; (18b18 <__aeabi_dmul+0x1e8>)
   18a0c:	0524      	lsls	r4, r4, #20
   18a0e:	4013      	ands	r3, r2
   18a10:	431c      	orrs	r4, r3
   18a12:	0064      	lsls	r4, r4, #1
   18a14:	07ed      	lsls	r5, r5, #31
   18a16:	0864      	lsrs	r4, r4, #1
   18a18:	432c      	orrs	r4, r5
   18a1a:	4648      	mov	r0, r9
   18a1c:	0021      	movs	r1, r4
   18a1e:	b007      	add	sp, #28
   18a20:	bc3c      	pop	{r2, r3, r4, r5}
   18a22:	4690      	mov	r8, r2
   18a24:	4699      	mov	r9, r3
   18a26:	46a2      	mov	sl, r4
   18a28:	46ab      	mov	fp, r5
   18a2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   18a2c:	4303      	orrs	r3, r0
   18a2e:	4699      	mov	r9, r3
   18a30:	d04f      	beq.n	18ad2 <__aeabi_dmul+0x1a2>
   18a32:	465b      	mov	r3, fp
   18a34:	2b00      	cmp	r3, #0
   18a36:	d100      	bne.n	18a3a <__aeabi_dmul+0x10a>
   18a38:	e189      	b.n	18d4e <__aeabi_dmul+0x41e>
   18a3a:	4658      	mov	r0, fp
   18a3c:	f000 fe0e 	bl	1965c <__clzsi2>
   18a40:	0003      	movs	r3, r0
   18a42:	3b0b      	subs	r3, #11
   18a44:	2b1c      	cmp	r3, #28
   18a46:	dd00      	ble.n	18a4a <__aeabi_dmul+0x11a>
   18a48:	e17a      	b.n	18d40 <__aeabi_dmul+0x410>
   18a4a:	221d      	movs	r2, #29
   18a4c:	1ad3      	subs	r3, r2, r3
   18a4e:	003a      	movs	r2, r7
   18a50:	0001      	movs	r1, r0
   18a52:	465c      	mov	r4, fp
   18a54:	40da      	lsrs	r2, r3
   18a56:	3908      	subs	r1, #8
   18a58:	408c      	lsls	r4, r1
   18a5a:	0013      	movs	r3, r2
   18a5c:	408f      	lsls	r7, r1
   18a5e:	4323      	orrs	r3, r4
   18a60:	469b      	mov	fp, r3
   18a62:	46b9      	mov	r9, r7
   18a64:	2300      	movs	r3, #0
   18a66:	4e2d      	ldr	r6, [pc, #180]	; (18b1c <__aeabi_dmul+0x1ec>)
   18a68:	2700      	movs	r7, #0
   18a6a:	1a36      	subs	r6, r6, r0
   18a6c:	9302      	str	r3, [sp, #8]
   18a6e:	e784      	b.n	1897a <__aeabi_dmul+0x4a>
   18a70:	4653      	mov	r3, sl
   18a72:	4323      	orrs	r3, r4
   18a74:	d12a      	bne.n	18acc <__aeabi_dmul+0x19c>
   18a76:	2400      	movs	r4, #0
   18a78:	2002      	movs	r0, #2
   18a7a:	e796      	b.n	189aa <__aeabi_dmul+0x7a>
   18a7c:	4653      	mov	r3, sl
   18a7e:	4323      	orrs	r3, r4
   18a80:	d020      	beq.n	18ac4 <__aeabi_dmul+0x194>
   18a82:	2c00      	cmp	r4, #0
   18a84:	d100      	bne.n	18a88 <__aeabi_dmul+0x158>
   18a86:	e157      	b.n	18d38 <__aeabi_dmul+0x408>
   18a88:	0020      	movs	r0, r4
   18a8a:	f000 fde7 	bl	1965c <__clzsi2>
   18a8e:	0003      	movs	r3, r0
   18a90:	3b0b      	subs	r3, #11
   18a92:	2b1c      	cmp	r3, #28
   18a94:	dd00      	ble.n	18a98 <__aeabi_dmul+0x168>
   18a96:	e149      	b.n	18d2c <__aeabi_dmul+0x3fc>
   18a98:	211d      	movs	r1, #29
   18a9a:	1acb      	subs	r3, r1, r3
   18a9c:	4651      	mov	r1, sl
   18a9e:	0002      	movs	r2, r0
   18aa0:	40d9      	lsrs	r1, r3
   18aa2:	4653      	mov	r3, sl
   18aa4:	3a08      	subs	r2, #8
   18aa6:	4094      	lsls	r4, r2
   18aa8:	4093      	lsls	r3, r2
   18aaa:	430c      	orrs	r4, r1
   18aac:	4a1b      	ldr	r2, [pc, #108]	; (18b1c <__aeabi_dmul+0x1ec>)
   18aae:	1a12      	subs	r2, r2, r0
   18ab0:	2000      	movs	r0, #0
   18ab2:	e77a      	b.n	189aa <__aeabi_dmul+0x7a>
   18ab4:	2501      	movs	r5, #1
   18ab6:	9b01      	ldr	r3, [sp, #4]
   18ab8:	4c14      	ldr	r4, [pc, #80]	; (18b0c <__aeabi_dmul+0x1dc>)
   18aba:	401d      	ands	r5, r3
   18abc:	2300      	movs	r3, #0
   18abe:	2200      	movs	r2, #0
   18ac0:	4699      	mov	r9, r3
   18ac2:	e79c      	b.n	189fe <__aeabi_dmul+0xce>
   18ac4:	2400      	movs	r4, #0
   18ac6:	2200      	movs	r2, #0
   18ac8:	2001      	movs	r0, #1
   18aca:	e76e      	b.n	189aa <__aeabi_dmul+0x7a>
   18acc:	4653      	mov	r3, sl
   18ace:	2003      	movs	r0, #3
   18ad0:	e76b      	b.n	189aa <__aeabi_dmul+0x7a>
   18ad2:	2300      	movs	r3, #0
   18ad4:	469b      	mov	fp, r3
   18ad6:	3301      	adds	r3, #1
   18ad8:	2704      	movs	r7, #4
   18ada:	2600      	movs	r6, #0
   18adc:	9302      	str	r3, [sp, #8]
   18ade:	e74c      	b.n	1897a <__aeabi_dmul+0x4a>
   18ae0:	2303      	movs	r3, #3
   18ae2:	4681      	mov	r9, r0
   18ae4:	270c      	movs	r7, #12
   18ae6:	9302      	str	r3, [sp, #8]
   18ae8:	e747      	b.n	1897a <__aeabi_dmul+0x4a>
   18aea:	2280      	movs	r2, #128	; 0x80
   18aec:	2300      	movs	r3, #0
   18aee:	2500      	movs	r5, #0
   18af0:	0312      	lsls	r2, r2, #12
   18af2:	4699      	mov	r9, r3
   18af4:	4c05      	ldr	r4, [pc, #20]	; (18b0c <__aeabi_dmul+0x1dc>)
   18af6:	e782      	b.n	189fe <__aeabi_dmul+0xce>
   18af8:	465c      	mov	r4, fp
   18afa:	464b      	mov	r3, r9
   18afc:	9802      	ldr	r0, [sp, #8]
   18afe:	e76f      	b.n	189e0 <__aeabi_dmul+0xb0>
   18b00:	465c      	mov	r4, fp
   18b02:	464b      	mov	r3, r9
   18b04:	9501      	str	r5, [sp, #4]
   18b06:	9802      	ldr	r0, [sp, #8]
   18b08:	e76a      	b.n	189e0 <__aeabi_dmul+0xb0>
   18b0a:	46c0      	nop			; (mov r8, r8)
   18b0c:	000007ff 	.word	0x000007ff
   18b10:	fffffc01 	.word	0xfffffc01
   18b14:	0002051c 	.word	0x0002051c
   18b18:	800fffff 	.word	0x800fffff
   18b1c:	fffffc0d 	.word	0xfffffc0d
   18b20:	464a      	mov	r2, r9
   18b22:	4649      	mov	r1, r9
   18b24:	0c17      	lsrs	r7, r2, #16
   18b26:	0c1a      	lsrs	r2, r3, #16
   18b28:	041b      	lsls	r3, r3, #16
   18b2a:	0c1b      	lsrs	r3, r3, #16
   18b2c:	0408      	lsls	r0, r1, #16
   18b2e:	0019      	movs	r1, r3
   18b30:	0c00      	lsrs	r0, r0, #16
   18b32:	4341      	muls	r1, r0
   18b34:	0015      	movs	r5, r2
   18b36:	4688      	mov	r8, r1
   18b38:	0019      	movs	r1, r3
   18b3a:	437d      	muls	r5, r7
   18b3c:	4379      	muls	r1, r7
   18b3e:	9503      	str	r5, [sp, #12]
   18b40:	4689      	mov	r9, r1
   18b42:	0029      	movs	r1, r5
   18b44:	0015      	movs	r5, r2
   18b46:	4345      	muls	r5, r0
   18b48:	444d      	add	r5, r9
   18b4a:	9502      	str	r5, [sp, #8]
   18b4c:	4645      	mov	r5, r8
   18b4e:	0c2d      	lsrs	r5, r5, #16
   18b50:	46aa      	mov	sl, r5
   18b52:	9d02      	ldr	r5, [sp, #8]
   18b54:	4455      	add	r5, sl
   18b56:	45a9      	cmp	r9, r5
   18b58:	d906      	bls.n	18b68 <__aeabi_dmul+0x238>
   18b5a:	468a      	mov	sl, r1
   18b5c:	2180      	movs	r1, #128	; 0x80
   18b5e:	0249      	lsls	r1, r1, #9
   18b60:	4689      	mov	r9, r1
   18b62:	44ca      	add	sl, r9
   18b64:	4651      	mov	r1, sl
   18b66:	9103      	str	r1, [sp, #12]
   18b68:	0c29      	lsrs	r1, r5, #16
   18b6a:	9104      	str	r1, [sp, #16]
   18b6c:	4641      	mov	r1, r8
   18b6e:	0409      	lsls	r1, r1, #16
   18b70:	042d      	lsls	r5, r5, #16
   18b72:	0c09      	lsrs	r1, r1, #16
   18b74:	4688      	mov	r8, r1
   18b76:	0029      	movs	r1, r5
   18b78:	0c25      	lsrs	r5, r4, #16
   18b7a:	0424      	lsls	r4, r4, #16
   18b7c:	4441      	add	r1, r8
   18b7e:	0c24      	lsrs	r4, r4, #16
   18b80:	9105      	str	r1, [sp, #20]
   18b82:	0021      	movs	r1, r4
   18b84:	4341      	muls	r1, r0
   18b86:	4688      	mov	r8, r1
   18b88:	0021      	movs	r1, r4
   18b8a:	4379      	muls	r1, r7
   18b8c:	468a      	mov	sl, r1
   18b8e:	4368      	muls	r0, r5
   18b90:	4641      	mov	r1, r8
   18b92:	4450      	add	r0, sl
   18b94:	4681      	mov	r9, r0
   18b96:	0c08      	lsrs	r0, r1, #16
   18b98:	4448      	add	r0, r9
   18b9a:	436f      	muls	r7, r5
   18b9c:	4582      	cmp	sl, r0
   18b9e:	d903      	bls.n	18ba8 <__aeabi_dmul+0x278>
   18ba0:	2180      	movs	r1, #128	; 0x80
   18ba2:	0249      	lsls	r1, r1, #9
   18ba4:	4689      	mov	r9, r1
   18ba6:	444f      	add	r7, r9
   18ba8:	0c01      	lsrs	r1, r0, #16
   18baa:	4689      	mov	r9, r1
   18bac:	0039      	movs	r1, r7
   18bae:	4449      	add	r1, r9
   18bb0:	9102      	str	r1, [sp, #8]
   18bb2:	4641      	mov	r1, r8
   18bb4:	040f      	lsls	r7, r1, #16
   18bb6:	9904      	ldr	r1, [sp, #16]
   18bb8:	0c3f      	lsrs	r7, r7, #16
   18bba:	4688      	mov	r8, r1
   18bbc:	0400      	lsls	r0, r0, #16
   18bbe:	19c0      	adds	r0, r0, r7
   18bc0:	4480      	add	r8, r0
   18bc2:	4641      	mov	r1, r8
   18bc4:	9104      	str	r1, [sp, #16]
   18bc6:	4659      	mov	r1, fp
   18bc8:	0c0f      	lsrs	r7, r1, #16
   18bca:	0409      	lsls	r1, r1, #16
   18bcc:	0c09      	lsrs	r1, r1, #16
   18bce:	4688      	mov	r8, r1
   18bd0:	4359      	muls	r1, r3
   18bd2:	468a      	mov	sl, r1
   18bd4:	0039      	movs	r1, r7
   18bd6:	4351      	muls	r1, r2
   18bd8:	4689      	mov	r9, r1
   18bda:	4641      	mov	r1, r8
   18bdc:	434a      	muls	r2, r1
   18bde:	4651      	mov	r1, sl
   18be0:	0c09      	lsrs	r1, r1, #16
   18be2:	468b      	mov	fp, r1
   18be4:	437b      	muls	r3, r7
   18be6:	18d2      	adds	r2, r2, r3
   18be8:	445a      	add	r2, fp
   18bea:	4293      	cmp	r3, r2
   18bec:	d903      	bls.n	18bf6 <__aeabi_dmul+0x2c6>
   18bee:	2380      	movs	r3, #128	; 0x80
   18bf0:	025b      	lsls	r3, r3, #9
   18bf2:	469b      	mov	fp, r3
   18bf4:	44d9      	add	r9, fp
   18bf6:	4651      	mov	r1, sl
   18bf8:	0409      	lsls	r1, r1, #16
   18bfa:	0c09      	lsrs	r1, r1, #16
   18bfc:	468a      	mov	sl, r1
   18bfe:	4641      	mov	r1, r8
   18c00:	4361      	muls	r1, r4
   18c02:	437c      	muls	r4, r7
   18c04:	0c13      	lsrs	r3, r2, #16
   18c06:	0412      	lsls	r2, r2, #16
   18c08:	444b      	add	r3, r9
   18c0a:	4452      	add	r2, sl
   18c0c:	46a1      	mov	r9, r4
   18c0e:	468a      	mov	sl, r1
   18c10:	003c      	movs	r4, r7
   18c12:	4641      	mov	r1, r8
   18c14:	436c      	muls	r4, r5
   18c16:	434d      	muls	r5, r1
   18c18:	4651      	mov	r1, sl
   18c1a:	444d      	add	r5, r9
   18c1c:	0c0f      	lsrs	r7, r1, #16
   18c1e:	197d      	adds	r5, r7, r5
   18c20:	45a9      	cmp	r9, r5
   18c22:	d903      	bls.n	18c2c <__aeabi_dmul+0x2fc>
   18c24:	2180      	movs	r1, #128	; 0x80
   18c26:	0249      	lsls	r1, r1, #9
   18c28:	4688      	mov	r8, r1
   18c2a:	4444      	add	r4, r8
   18c2c:	9f04      	ldr	r7, [sp, #16]
   18c2e:	9903      	ldr	r1, [sp, #12]
   18c30:	46b8      	mov	r8, r7
   18c32:	4441      	add	r1, r8
   18c34:	468b      	mov	fp, r1
   18c36:	4583      	cmp	fp, r0
   18c38:	4180      	sbcs	r0, r0
   18c3a:	4241      	negs	r1, r0
   18c3c:	4688      	mov	r8, r1
   18c3e:	4651      	mov	r1, sl
   18c40:	0408      	lsls	r0, r1, #16
   18c42:	042f      	lsls	r7, r5, #16
   18c44:	0c00      	lsrs	r0, r0, #16
   18c46:	183f      	adds	r7, r7, r0
   18c48:	4658      	mov	r0, fp
   18c4a:	9902      	ldr	r1, [sp, #8]
   18c4c:	1810      	adds	r0, r2, r0
   18c4e:	4689      	mov	r9, r1
   18c50:	4290      	cmp	r0, r2
   18c52:	4192      	sbcs	r2, r2
   18c54:	444f      	add	r7, r9
   18c56:	46ba      	mov	sl, r7
   18c58:	4252      	negs	r2, r2
   18c5a:	4699      	mov	r9, r3
   18c5c:	4693      	mov	fp, r2
   18c5e:	44c2      	add	sl, r8
   18c60:	44d1      	add	r9, sl
   18c62:	44cb      	add	fp, r9
   18c64:	428f      	cmp	r7, r1
   18c66:	41bf      	sbcs	r7, r7
   18c68:	45c2      	cmp	sl, r8
   18c6a:	4189      	sbcs	r1, r1
   18c6c:	4599      	cmp	r9, r3
   18c6e:	419b      	sbcs	r3, r3
   18c70:	4593      	cmp	fp, r2
   18c72:	4192      	sbcs	r2, r2
   18c74:	427f      	negs	r7, r7
   18c76:	4249      	negs	r1, r1
   18c78:	0c2d      	lsrs	r5, r5, #16
   18c7a:	4252      	negs	r2, r2
   18c7c:	430f      	orrs	r7, r1
   18c7e:	425b      	negs	r3, r3
   18c80:	4313      	orrs	r3, r2
   18c82:	197f      	adds	r7, r7, r5
   18c84:	18ff      	adds	r7, r7, r3
   18c86:	465b      	mov	r3, fp
   18c88:	193c      	adds	r4, r7, r4
   18c8a:	0ddb      	lsrs	r3, r3, #23
   18c8c:	9a05      	ldr	r2, [sp, #20]
   18c8e:	0264      	lsls	r4, r4, #9
   18c90:	431c      	orrs	r4, r3
   18c92:	0243      	lsls	r3, r0, #9
   18c94:	4313      	orrs	r3, r2
   18c96:	1e5d      	subs	r5, r3, #1
   18c98:	41ab      	sbcs	r3, r5
   18c9a:	465a      	mov	r2, fp
   18c9c:	0dc0      	lsrs	r0, r0, #23
   18c9e:	4303      	orrs	r3, r0
   18ca0:	0252      	lsls	r2, r2, #9
   18ca2:	4313      	orrs	r3, r2
   18ca4:	01e2      	lsls	r2, r4, #7
   18ca6:	d556      	bpl.n	18d56 <__aeabi_dmul+0x426>
   18ca8:	2001      	movs	r0, #1
   18caa:	085a      	lsrs	r2, r3, #1
   18cac:	4003      	ands	r3, r0
   18cae:	4313      	orrs	r3, r2
   18cb0:	07e2      	lsls	r2, r4, #31
   18cb2:	4313      	orrs	r3, r2
   18cb4:	0864      	lsrs	r4, r4, #1
   18cb6:	485a      	ldr	r0, [pc, #360]	; (18e20 <__aeabi_dmul+0x4f0>)
   18cb8:	4460      	add	r0, ip
   18cba:	2800      	cmp	r0, #0
   18cbc:	dd4d      	ble.n	18d5a <__aeabi_dmul+0x42a>
   18cbe:	075a      	lsls	r2, r3, #29
   18cc0:	d009      	beq.n	18cd6 <__aeabi_dmul+0x3a6>
   18cc2:	220f      	movs	r2, #15
   18cc4:	401a      	ands	r2, r3
   18cc6:	2a04      	cmp	r2, #4
   18cc8:	d005      	beq.n	18cd6 <__aeabi_dmul+0x3a6>
   18cca:	1d1a      	adds	r2, r3, #4
   18ccc:	429a      	cmp	r2, r3
   18cce:	419b      	sbcs	r3, r3
   18cd0:	425b      	negs	r3, r3
   18cd2:	18e4      	adds	r4, r4, r3
   18cd4:	0013      	movs	r3, r2
   18cd6:	01e2      	lsls	r2, r4, #7
   18cd8:	d504      	bpl.n	18ce4 <__aeabi_dmul+0x3b4>
   18cda:	2080      	movs	r0, #128	; 0x80
   18cdc:	4a51      	ldr	r2, [pc, #324]	; (18e24 <__aeabi_dmul+0x4f4>)
   18cde:	00c0      	lsls	r0, r0, #3
   18ce0:	4014      	ands	r4, r2
   18ce2:	4460      	add	r0, ip
   18ce4:	4a50      	ldr	r2, [pc, #320]	; (18e28 <__aeabi_dmul+0x4f8>)
   18ce6:	4290      	cmp	r0, r2
   18ce8:	dd00      	ble.n	18cec <__aeabi_dmul+0x3bc>
   18cea:	e6e3      	b.n	18ab4 <__aeabi_dmul+0x184>
   18cec:	2501      	movs	r5, #1
   18cee:	08db      	lsrs	r3, r3, #3
   18cf0:	0762      	lsls	r2, r4, #29
   18cf2:	431a      	orrs	r2, r3
   18cf4:	0264      	lsls	r4, r4, #9
   18cf6:	9b01      	ldr	r3, [sp, #4]
   18cf8:	4691      	mov	r9, r2
   18cfa:	0b22      	lsrs	r2, r4, #12
   18cfc:	0544      	lsls	r4, r0, #21
   18cfe:	0d64      	lsrs	r4, r4, #21
   18d00:	401d      	ands	r5, r3
   18d02:	e67c      	b.n	189fe <__aeabi_dmul+0xce>
   18d04:	2280      	movs	r2, #128	; 0x80
   18d06:	4659      	mov	r1, fp
   18d08:	0312      	lsls	r2, r2, #12
   18d0a:	4211      	tst	r1, r2
   18d0c:	d008      	beq.n	18d20 <__aeabi_dmul+0x3f0>
   18d0e:	4214      	tst	r4, r2
   18d10:	d106      	bne.n	18d20 <__aeabi_dmul+0x3f0>
   18d12:	4322      	orrs	r2, r4
   18d14:	0312      	lsls	r2, r2, #12
   18d16:	0b12      	lsrs	r2, r2, #12
   18d18:	4645      	mov	r5, r8
   18d1a:	4699      	mov	r9, r3
   18d1c:	4c43      	ldr	r4, [pc, #268]	; (18e2c <__aeabi_dmul+0x4fc>)
   18d1e:	e66e      	b.n	189fe <__aeabi_dmul+0xce>
   18d20:	465b      	mov	r3, fp
   18d22:	431a      	orrs	r2, r3
   18d24:	0312      	lsls	r2, r2, #12
   18d26:	0b12      	lsrs	r2, r2, #12
   18d28:	4c40      	ldr	r4, [pc, #256]	; (18e2c <__aeabi_dmul+0x4fc>)
   18d2a:	e668      	b.n	189fe <__aeabi_dmul+0xce>
   18d2c:	0003      	movs	r3, r0
   18d2e:	4654      	mov	r4, sl
   18d30:	3b28      	subs	r3, #40	; 0x28
   18d32:	409c      	lsls	r4, r3
   18d34:	2300      	movs	r3, #0
   18d36:	e6b9      	b.n	18aac <__aeabi_dmul+0x17c>
   18d38:	f000 fc90 	bl	1965c <__clzsi2>
   18d3c:	3020      	adds	r0, #32
   18d3e:	e6a6      	b.n	18a8e <__aeabi_dmul+0x15e>
   18d40:	0003      	movs	r3, r0
   18d42:	3b28      	subs	r3, #40	; 0x28
   18d44:	409f      	lsls	r7, r3
   18d46:	2300      	movs	r3, #0
   18d48:	46bb      	mov	fp, r7
   18d4a:	4699      	mov	r9, r3
   18d4c:	e68a      	b.n	18a64 <__aeabi_dmul+0x134>
   18d4e:	f000 fc85 	bl	1965c <__clzsi2>
   18d52:	3020      	adds	r0, #32
   18d54:	e674      	b.n	18a40 <__aeabi_dmul+0x110>
   18d56:	46b4      	mov	ip, r6
   18d58:	e7ad      	b.n	18cb6 <__aeabi_dmul+0x386>
   18d5a:	2501      	movs	r5, #1
   18d5c:	1a2a      	subs	r2, r5, r0
   18d5e:	2a38      	cmp	r2, #56	; 0x38
   18d60:	dd06      	ble.n	18d70 <__aeabi_dmul+0x440>
   18d62:	9b01      	ldr	r3, [sp, #4]
   18d64:	2400      	movs	r4, #0
   18d66:	401d      	ands	r5, r3
   18d68:	2300      	movs	r3, #0
   18d6a:	2200      	movs	r2, #0
   18d6c:	4699      	mov	r9, r3
   18d6e:	e646      	b.n	189fe <__aeabi_dmul+0xce>
   18d70:	2a1f      	cmp	r2, #31
   18d72:	dc21      	bgt.n	18db8 <__aeabi_dmul+0x488>
   18d74:	2520      	movs	r5, #32
   18d76:	0020      	movs	r0, r4
   18d78:	1aad      	subs	r5, r5, r2
   18d7a:	001e      	movs	r6, r3
   18d7c:	40ab      	lsls	r3, r5
   18d7e:	40a8      	lsls	r0, r5
   18d80:	40d6      	lsrs	r6, r2
   18d82:	1e5d      	subs	r5, r3, #1
   18d84:	41ab      	sbcs	r3, r5
   18d86:	4330      	orrs	r0, r6
   18d88:	4318      	orrs	r0, r3
   18d8a:	40d4      	lsrs	r4, r2
   18d8c:	0743      	lsls	r3, r0, #29
   18d8e:	d009      	beq.n	18da4 <__aeabi_dmul+0x474>
   18d90:	230f      	movs	r3, #15
   18d92:	4003      	ands	r3, r0
   18d94:	2b04      	cmp	r3, #4
   18d96:	d005      	beq.n	18da4 <__aeabi_dmul+0x474>
   18d98:	0003      	movs	r3, r0
   18d9a:	1d18      	adds	r0, r3, #4
   18d9c:	4298      	cmp	r0, r3
   18d9e:	419b      	sbcs	r3, r3
   18da0:	425b      	negs	r3, r3
   18da2:	18e4      	adds	r4, r4, r3
   18da4:	0223      	lsls	r3, r4, #8
   18da6:	d521      	bpl.n	18dec <__aeabi_dmul+0x4bc>
   18da8:	2501      	movs	r5, #1
   18daa:	9b01      	ldr	r3, [sp, #4]
   18dac:	2401      	movs	r4, #1
   18dae:	401d      	ands	r5, r3
   18db0:	2300      	movs	r3, #0
   18db2:	2200      	movs	r2, #0
   18db4:	4699      	mov	r9, r3
   18db6:	e622      	b.n	189fe <__aeabi_dmul+0xce>
   18db8:	251f      	movs	r5, #31
   18dba:	0021      	movs	r1, r4
   18dbc:	426d      	negs	r5, r5
   18dbe:	1a28      	subs	r0, r5, r0
   18dc0:	40c1      	lsrs	r1, r0
   18dc2:	0008      	movs	r0, r1
   18dc4:	2a20      	cmp	r2, #32
   18dc6:	d01d      	beq.n	18e04 <__aeabi_dmul+0x4d4>
   18dc8:	355f      	adds	r5, #95	; 0x5f
   18dca:	1aaa      	subs	r2, r5, r2
   18dcc:	4094      	lsls	r4, r2
   18dce:	4323      	orrs	r3, r4
   18dd0:	1e5c      	subs	r4, r3, #1
   18dd2:	41a3      	sbcs	r3, r4
   18dd4:	2507      	movs	r5, #7
   18dd6:	4303      	orrs	r3, r0
   18dd8:	401d      	ands	r5, r3
   18dda:	2200      	movs	r2, #0
   18ddc:	2d00      	cmp	r5, #0
   18dde:	d009      	beq.n	18df4 <__aeabi_dmul+0x4c4>
   18de0:	220f      	movs	r2, #15
   18de2:	2400      	movs	r4, #0
   18de4:	401a      	ands	r2, r3
   18de6:	0018      	movs	r0, r3
   18de8:	2a04      	cmp	r2, #4
   18dea:	d1d6      	bne.n	18d9a <__aeabi_dmul+0x46a>
   18dec:	0003      	movs	r3, r0
   18dee:	0765      	lsls	r5, r4, #29
   18df0:	0264      	lsls	r4, r4, #9
   18df2:	0b22      	lsrs	r2, r4, #12
   18df4:	08db      	lsrs	r3, r3, #3
   18df6:	432b      	orrs	r3, r5
   18df8:	2501      	movs	r5, #1
   18dfa:	4699      	mov	r9, r3
   18dfc:	9b01      	ldr	r3, [sp, #4]
   18dfe:	2400      	movs	r4, #0
   18e00:	401d      	ands	r5, r3
   18e02:	e5fc      	b.n	189fe <__aeabi_dmul+0xce>
   18e04:	2400      	movs	r4, #0
   18e06:	e7e2      	b.n	18dce <__aeabi_dmul+0x49e>
   18e08:	2280      	movs	r2, #128	; 0x80
   18e0a:	2501      	movs	r5, #1
   18e0c:	0312      	lsls	r2, r2, #12
   18e0e:	4322      	orrs	r2, r4
   18e10:	9901      	ldr	r1, [sp, #4]
   18e12:	0312      	lsls	r2, r2, #12
   18e14:	0b12      	lsrs	r2, r2, #12
   18e16:	400d      	ands	r5, r1
   18e18:	4699      	mov	r9, r3
   18e1a:	4c04      	ldr	r4, [pc, #16]	; (18e2c <__aeabi_dmul+0x4fc>)
   18e1c:	e5ef      	b.n	189fe <__aeabi_dmul+0xce>
   18e1e:	46c0      	nop			; (mov r8, r8)
   18e20:	000003ff 	.word	0x000003ff
   18e24:	feffffff 	.word	0xfeffffff
   18e28:	000007fe 	.word	0x000007fe
   18e2c:	000007ff 	.word	0x000007ff

00018e30 <__aeabi_dsub>:
   18e30:	b5f0      	push	{r4, r5, r6, r7, lr}
   18e32:	4646      	mov	r6, r8
   18e34:	46d6      	mov	lr, sl
   18e36:	464f      	mov	r7, r9
   18e38:	030c      	lsls	r4, r1, #12
   18e3a:	b5c0      	push	{r6, r7, lr}
   18e3c:	0fcd      	lsrs	r5, r1, #31
   18e3e:	004e      	lsls	r6, r1, #1
   18e40:	0a61      	lsrs	r1, r4, #9
   18e42:	0f44      	lsrs	r4, r0, #29
   18e44:	430c      	orrs	r4, r1
   18e46:	00c1      	lsls	r1, r0, #3
   18e48:	0058      	lsls	r0, r3, #1
   18e4a:	0d40      	lsrs	r0, r0, #21
   18e4c:	4684      	mov	ip, r0
   18e4e:	468a      	mov	sl, r1
   18e50:	000f      	movs	r7, r1
   18e52:	0319      	lsls	r1, r3, #12
   18e54:	0f50      	lsrs	r0, r2, #29
   18e56:	0a49      	lsrs	r1, r1, #9
   18e58:	4301      	orrs	r1, r0
   18e5a:	48c6      	ldr	r0, [pc, #792]	; (19174 <__aeabi_dsub+0x344>)
   18e5c:	0d76      	lsrs	r6, r6, #21
   18e5e:	46a8      	mov	r8, r5
   18e60:	0fdb      	lsrs	r3, r3, #31
   18e62:	00d2      	lsls	r2, r2, #3
   18e64:	4584      	cmp	ip, r0
   18e66:	d100      	bne.n	18e6a <__aeabi_dsub+0x3a>
   18e68:	e0d8      	b.n	1901c <__aeabi_dsub+0x1ec>
   18e6a:	2001      	movs	r0, #1
   18e6c:	4043      	eors	r3, r0
   18e6e:	42ab      	cmp	r3, r5
   18e70:	d100      	bne.n	18e74 <__aeabi_dsub+0x44>
   18e72:	e0a6      	b.n	18fc2 <__aeabi_dsub+0x192>
   18e74:	4660      	mov	r0, ip
   18e76:	1a35      	subs	r5, r6, r0
   18e78:	2d00      	cmp	r5, #0
   18e7a:	dc00      	bgt.n	18e7e <__aeabi_dsub+0x4e>
   18e7c:	e105      	b.n	1908a <__aeabi_dsub+0x25a>
   18e7e:	2800      	cmp	r0, #0
   18e80:	d110      	bne.n	18ea4 <__aeabi_dsub+0x74>
   18e82:	000b      	movs	r3, r1
   18e84:	4313      	orrs	r3, r2
   18e86:	d100      	bne.n	18e8a <__aeabi_dsub+0x5a>
   18e88:	e0d7      	b.n	1903a <__aeabi_dsub+0x20a>
   18e8a:	1e6b      	subs	r3, r5, #1
   18e8c:	2b00      	cmp	r3, #0
   18e8e:	d000      	beq.n	18e92 <__aeabi_dsub+0x62>
   18e90:	e14b      	b.n	1912a <__aeabi_dsub+0x2fa>
   18e92:	4653      	mov	r3, sl
   18e94:	1a9f      	subs	r7, r3, r2
   18e96:	45ba      	cmp	sl, r7
   18e98:	4180      	sbcs	r0, r0
   18e9a:	1a64      	subs	r4, r4, r1
   18e9c:	4240      	negs	r0, r0
   18e9e:	1a24      	subs	r4, r4, r0
   18ea0:	2601      	movs	r6, #1
   18ea2:	e01e      	b.n	18ee2 <__aeabi_dsub+0xb2>
   18ea4:	4bb3      	ldr	r3, [pc, #716]	; (19174 <__aeabi_dsub+0x344>)
   18ea6:	429e      	cmp	r6, r3
   18ea8:	d048      	beq.n	18f3c <__aeabi_dsub+0x10c>
   18eaa:	2380      	movs	r3, #128	; 0x80
   18eac:	041b      	lsls	r3, r3, #16
   18eae:	4319      	orrs	r1, r3
   18eb0:	2d38      	cmp	r5, #56	; 0x38
   18eb2:	dd00      	ble.n	18eb6 <__aeabi_dsub+0x86>
   18eb4:	e119      	b.n	190ea <__aeabi_dsub+0x2ba>
   18eb6:	2d1f      	cmp	r5, #31
   18eb8:	dd00      	ble.n	18ebc <__aeabi_dsub+0x8c>
   18eba:	e14c      	b.n	19156 <__aeabi_dsub+0x326>
   18ebc:	2320      	movs	r3, #32
   18ebe:	000f      	movs	r7, r1
   18ec0:	1b5b      	subs	r3, r3, r5
   18ec2:	0010      	movs	r0, r2
   18ec4:	409a      	lsls	r2, r3
   18ec6:	409f      	lsls	r7, r3
   18ec8:	40e8      	lsrs	r0, r5
   18eca:	1e53      	subs	r3, r2, #1
   18ecc:	419a      	sbcs	r2, r3
   18ece:	40e9      	lsrs	r1, r5
   18ed0:	4307      	orrs	r7, r0
   18ed2:	4317      	orrs	r7, r2
   18ed4:	4653      	mov	r3, sl
   18ed6:	1bdf      	subs	r7, r3, r7
   18ed8:	1a61      	subs	r1, r4, r1
   18eda:	45ba      	cmp	sl, r7
   18edc:	41a4      	sbcs	r4, r4
   18ede:	4264      	negs	r4, r4
   18ee0:	1b0c      	subs	r4, r1, r4
   18ee2:	0223      	lsls	r3, r4, #8
   18ee4:	d400      	bmi.n	18ee8 <__aeabi_dsub+0xb8>
   18ee6:	e0c5      	b.n	19074 <__aeabi_dsub+0x244>
   18ee8:	0264      	lsls	r4, r4, #9
   18eea:	0a65      	lsrs	r5, r4, #9
   18eec:	2d00      	cmp	r5, #0
   18eee:	d100      	bne.n	18ef2 <__aeabi_dsub+0xc2>
   18ef0:	e0f6      	b.n	190e0 <__aeabi_dsub+0x2b0>
   18ef2:	0028      	movs	r0, r5
   18ef4:	f000 fbb2 	bl	1965c <__clzsi2>
   18ef8:	0003      	movs	r3, r0
   18efa:	3b08      	subs	r3, #8
   18efc:	2b1f      	cmp	r3, #31
   18efe:	dd00      	ble.n	18f02 <__aeabi_dsub+0xd2>
   18f00:	e0e9      	b.n	190d6 <__aeabi_dsub+0x2a6>
   18f02:	2220      	movs	r2, #32
   18f04:	003c      	movs	r4, r7
   18f06:	1ad2      	subs	r2, r2, r3
   18f08:	409d      	lsls	r5, r3
   18f0a:	40d4      	lsrs	r4, r2
   18f0c:	409f      	lsls	r7, r3
   18f0e:	4325      	orrs	r5, r4
   18f10:	429e      	cmp	r6, r3
   18f12:	dd00      	ble.n	18f16 <__aeabi_dsub+0xe6>
   18f14:	e0db      	b.n	190ce <__aeabi_dsub+0x29e>
   18f16:	1b9e      	subs	r6, r3, r6
   18f18:	1c73      	adds	r3, r6, #1
   18f1a:	2b1f      	cmp	r3, #31
   18f1c:	dd00      	ble.n	18f20 <__aeabi_dsub+0xf0>
   18f1e:	e10a      	b.n	19136 <__aeabi_dsub+0x306>
   18f20:	2220      	movs	r2, #32
   18f22:	0038      	movs	r0, r7
   18f24:	1ad2      	subs	r2, r2, r3
   18f26:	0029      	movs	r1, r5
   18f28:	4097      	lsls	r7, r2
   18f2a:	002c      	movs	r4, r5
   18f2c:	4091      	lsls	r1, r2
   18f2e:	40d8      	lsrs	r0, r3
   18f30:	1e7a      	subs	r2, r7, #1
   18f32:	4197      	sbcs	r7, r2
   18f34:	40dc      	lsrs	r4, r3
   18f36:	2600      	movs	r6, #0
   18f38:	4301      	orrs	r1, r0
   18f3a:	430f      	orrs	r7, r1
   18f3c:	077b      	lsls	r3, r7, #29
   18f3e:	d009      	beq.n	18f54 <__aeabi_dsub+0x124>
   18f40:	230f      	movs	r3, #15
   18f42:	403b      	ands	r3, r7
   18f44:	2b04      	cmp	r3, #4
   18f46:	d005      	beq.n	18f54 <__aeabi_dsub+0x124>
   18f48:	1d3b      	adds	r3, r7, #4
   18f4a:	42bb      	cmp	r3, r7
   18f4c:	41bf      	sbcs	r7, r7
   18f4e:	427f      	negs	r7, r7
   18f50:	19e4      	adds	r4, r4, r7
   18f52:	001f      	movs	r7, r3
   18f54:	0223      	lsls	r3, r4, #8
   18f56:	d525      	bpl.n	18fa4 <__aeabi_dsub+0x174>
   18f58:	4b86      	ldr	r3, [pc, #536]	; (19174 <__aeabi_dsub+0x344>)
   18f5a:	3601      	adds	r6, #1
   18f5c:	429e      	cmp	r6, r3
   18f5e:	d100      	bne.n	18f62 <__aeabi_dsub+0x132>
   18f60:	e0af      	b.n	190c2 <__aeabi_dsub+0x292>
   18f62:	4b85      	ldr	r3, [pc, #532]	; (19178 <__aeabi_dsub+0x348>)
   18f64:	2501      	movs	r5, #1
   18f66:	401c      	ands	r4, r3
   18f68:	4643      	mov	r3, r8
   18f6a:	0762      	lsls	r2, r4, #29
   18f6c:	08ff      	lsrs	r7, r7, #3
   18f6e:	0264      	lsls	r4, r4, #9
   18f70:	0576      	lsls	r6, r6, #21
   18f72:	4317      	orrs	r7, r2
   18f74:	0b24      	lsrs	r4, r4, #12
   18f76:	0d76      	lsrs	r6, r6, #21
   18f78:	401d      	ands	r5, r3
   18f7a:	2100      	movs	r1, #0
   18f7c:	0324      	lsls	r4, r4, #12
   18f7e:	0b23      	lsrs	r3, r4, #12
   18f80:	0d0c      	lsrs	r4, r1, #20
   18f82:	4a7e      	ldr	r2, [pc, #504]	; (1917c <__aeabi_dsub+0x34c>)
   18f84:	0524      	lsls	r4, r4, #20
   18f86:	431c      	orrs	r4, r3
   18f88:	4014      	ands	r4, r2
   18f8a:	0533      	lsls	r3, r6, #20
   18f8c:	4323      	orrs	r3, r4
   18f8e:	005b      	lsls	r3, r3, #1
   18f90:	07ed      	lsls	r5, r5, #31
   18f92:	085b      	lsrs	r3, r3, #1
   18f94:	432b      	orrs	r3, r5
   18f96:	0038      	movs	r0, r7
   18f98:	0019      	movs	r1, r3
   18f9a:	bc1c      	pop	{r2, r3, r4}
   18f9c:	4690      	mov	r8, r2
   18f9e:	4699      	mov	r9, r3
   18fa0:	46a2      	mov	sl, r4
   18fa2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   18fa4:	2501      	movs	r5, #1
   18fa6:	4643      	mov	r3, r8
   18fa8:	0762      	lsls	r2, r4, #29
   18faa:	08ff      	lsrs	r7, r7, #3
   18fac:	4317      	orrs	r7, r2
   18fae:	08e4      	lsrs	r4, r4, #3
   18fb0:	401d      	ands	r5, r3
   18fb2:	4b70      	ldr	r3, [pc, #448]	; (19174 <__aeabi_dsub+0x344>)
   18fb4:	429e      	cmp	r6, r3
   18fb6:	d036      	beq.n	19026 <__aeabi_dsub+0x1f6>
   18fb8:	0324      	lsls	r4, r4, #12
   18fba:	0576      	lsls	r6, r6, #21
   18fbc:	0b24      	lsrs	r4, r4, #12
   18fbe:	0d76      	lsrs	r6, r6, #21
   18fc0:	e7db      	b.n	18f7a <__aeabi_dsub+0x14a>
   18fc2:	4663      	mov	r3, ip
   18fc4:	1af3      	subs	r3, r6, r3
   18fc6:	2b00      	cmp	r3, #0
   18fc8:	dc00      	bgt.n	18fcc <__aeabi_dsub+0x19c>
   18fca:	e094      	b.n	190f6 <__aeabi_dsub+0x2c6>
   18fcc:	4660      	mov	r0, ip
   18fce:	2800      	cmp	r0, #0
   18fd0:	d035      	beq.n	1903e <__aeabi_dsub+0x20e>
   18fd2:	4868      	ldr	r0, [pc, #416]	; (19174 <__aeabi_dsub+0x344>)
   18fd4:	4286      	cmp	r6, r0
   18fd6:	d0b1      	beq.n	18f3c <__aeabi_dsub+0x10c>
   18fd8:	2780      	movs	r7, #128	; 0x80
   18fda:	043f      	lsls	r7, r7, #16
   18fdc:	4339      	orrs	r1, r7
   18fde:	2b38      	cmp	r3, #56	; 0x38
   18fe0:	dc00      	bgt.n	18fe4 <__aeabi_dsub+0x1b4>
   18fe2:	e0fd      	b.n	191e0 <__aeabi_dsub+0x3b0>
   18fe4:	430a      	orrs	r2, r1
   18fe6:	0017      	movs	r7, r2
   18fe8:	2100      	movs	r1, #0
   18fea:	1e7a      	subs	r2, r7, #1
   18fec:	4197      	sbcs	r7, r2
   18fee:	4457      	add	r7, sl
   18ff0:	4557      	cmp	r7, sl
   18ff2:	4180      	sbcs	r0, r0
   18ff4:	1909      	adds	r1, r1, r4
   18ff6:	4244      	negs	r4, r0
   18ff8:	190c      	adds	r4, r1, r4
   18ffa:	0223      	lsls	r3, r4, #8
   18ffc:	d53a      	bpl.n	19074 <__aeabi_dsub+0x244>
   18ffe:	4b5d      	ldr	r3, [pc, #372]	; (19174 <__aeabi_dsub+0x344>)
   19000:	3601      	adds	r6, #1
   19002:	429e      	cmp	r6, r3
   19004:	d100      	bne.n	19008 <__aeabi_dsub+0x1d8>
   19006:	e14b      	b.n	192a0 <__aeabi_dsub+0x470>
   19008:	2201      	movs	r2, #1
   1900a:	4b5b      	ldr	r3, [pc, #364]	; (19178 <__aeabi_dsub+0x348>)
   1900c:	401c      	ands	r4, r3
   1900e:	087b      	lsrs	r3, r7, #1
   19010:	4017      	ands	r7, r2
   19012:	431f      	orrs	r7, r3
   19014:	07e2      	lsls	r2, r4, #31
   19016:	4317      	orrs	r7, r2
   19018:	0864      	lsrs	r4, r4, #1
   1901a:	e78f      	b.n	18f3c <__aeabi_dsub+0x10c>
   1901c:	0008      	movs	r0, r1
   1901e:	4310      	orrs	r0, r2
   19020:	d000      	beq.n	19024 <__aeabi_dsub+0x1f4>
   19022:	e724      	b.n	18e6e <__aeabi_dsub+0x3e>
   19024:	e721      	b.n	18e6a <__aeabi_dsub+0x3a>
   19026:	0023      	movs	r3, r4
   19028:	433b      	orrs	r3, r7
   1902a:	d100      	bne.n	1902e <__aeabi_dsub+0x1fe>
   1902c:	e1b9      	b.n	193a2 <__aeabi_dsub+0x572>
   1902e:	2280      	movs	r2, #128	; 0x80
   19030:	0312      	lsls	r2, r2, #12
   19032:	4314      	orrs	r4, r2
   19034:	0324      	lsls	r4, r4, #12
   19036:	0b24      	lsrs	r4, r4, #12
   19038:	e79f      	b.n	18f7a <__aeabi_dsub+0x14a>
   1903a:	002e      	movs	r6, r5
   1903c:	e77e      	b.n	18f3c <__aeabi_dsub+0x10c>
   1903e:	0008      	movs	r0, r1
   19040:	4310      	orrs	r0, r2
   19042:	d100      	bne.n	19046 <__aeabi_dsub+0x216>
   19044:	e0ca      	b.n	191dc <__aeabi_dsub+0x3ac>
   19046:	1e58      	subs	r0, r3, #1
   19048:	4684      	mov	ip, r0
   1904a:	2800      	cmp	r0, #0
   1904c:	d000      	beq.n	19050 <__aeabi_dsub+0x220>
   1904e:	e0e7      	b.n	19220 <__aeabi_dsub+0x3f0>
   19050:	4452      	add	r2, sl
   19052:	4552      	cmp	r2, sl
   19054:	4180      	sbcs	r0, r0
   19056:	1864      	adds	r4, r4, r1
   19058:	4240      	negs	r0, r0
   1905a:	1824      	adds	r4, r4, r0
   1905c:	0017      	movs	r7, r2
   1905e:	2601      	movs	r6, #1
   19060:	0223      	lsls	r3, r4, #8
   19062:	d507      	bpl.n	19074 <__aeabi_dsub+0x244>
   19064:	2602      	movs	r6, #2
   19066:	e7cf      	b.n	19008 <__aeabi_dsub+0x1d8>
   19068:	4664      	mov	r4, ip
   1906a:	432c      	orrs	r4, r5
   1906c:	d100      	bne.n	19070 <__aeabi_dsub+0x240>
   1906e:	e1b3      	b.n	193d8 <__aeabi_dsub+0x5a8>
   19070:	002c      	movs	r4, r5
   19072:	4667      	mov	r7, ip
   19074:	077b      	lsls	r3, r7, #29
   19076:	d000      	beq.n	1907a <__aeabi_dsub+0x24a>
   19078:	e762      	b.n	18f40 <__aeabi_dsub+0x110>
   1907a:	0763      	lsls	r3, r4, #29
   1907c:	08ff      	lsrs	r7, r7, #3
   1907e:	431f      	orrs	r7, r3
   19080:	2501      	movs	r5, #1
   19082:	4643      	mov	r3, r8
   19084:	08e4      	lsrs	r4, r4, #3
   19086:	401d      	ands	r5, r3
   19088:	e793      	b.n	18fb2 <__aeabi_dsub+0x182>
   1908a:	2d00      	cmp	r5, #0
   1908c:	d178      	bne.n	19180 <__aeabi_dsub+0x350>
   1908e:	1c75      	adds	r5, r6, #1
   19090:	056d      	lsls	r5, r5, #21
   19092:	0d6d      	lsrs	r5, r5, #21
   19094:	2d01      	cmp	r5, #1
   19096:	dc00      	bgt.n	1909a <__aeabi_dsub+0x26a>
   19098:	e0f2      	b.n	19280 <__aeabi_dsub+0x450>
   1909a:	4650      	mov	r0, sl
   1909c:	1a80      	subs	r0, r0, r2
   1909e:	4582      	cmp	sl, r0
   190a0:	41bf      	sbcs	r7, r7
   190a2:	1a65      	subs	r5, r4, r1
   190a4:	427f      	negs	r7, r7
   190a6:	1bed      	subs	r5, r5, r7
   190a8:	4684      	mov	ip, r0
   190aa:	0228      	lsls	r0, r5, #8
   190ac:	d400      	bmi.n	190b0 <__aeabi_dsub+0x280>
   190ae:	e08c      	b.n	191ca <__aeabi_dsub+0x39a>
   190b0:	4650      	mov	r0, sl
   190b2:	1a17      	subs	r7, r2, r0
   190b4:	42ba      	cmp	r2, r7
   190b6:	4192      	sbcs	r2, r2
   190b8:	1b0c      	subs	r4, r1, r4
   190ba:	4255      	negs	r5, r2
   190bc:	1b65      	subs	r5, r4, r5
   190be:	4698      	mov	r8, r3
   190c0:	e714      	b.n	18eec <__aeabi_dsub+0xbc>
   190c2:	2501      	movs	r5, #1
   190c4:	4643      	mov	r3, r8
   190c6:	2400      	movs	r4, #0
   190c8:	401d      	ands	r5, r3
   190ca:	2700      	movs	r7, #0
   190cc:	e755      	b.n	18f7a <__aeabi_dsub+0x14a>
   190ce:	4c2a      	ldr	r4, [pc, #168]	; (19178 <__aeabi_dsub+0x348>)
   190d0:	1af6      	subs	r6, r6, r3
   190d2:	402c      	ands	r4, r5
   190d4:	e732      	b.n	18f3c <__aeabi_dsub+0x10c>
   190d6:	003d      	movs	r5, r7
   190d8:	3828      	subs	r0, #40	; 0x28
   190da:	4085      	lsls	r5, r0
   190dc:	2700      	movs	r7, #0
   190de:	e717      	b.n	18f10 <__aeabi_dsub+0xe0>
   190e0:	0038      	movs	r0, r7
   190e2:	f000 fabb 	bl	1965c <__clzsi2>
   190e6:	3020      	adds	r0, #32
   190e8:	e706      	b.n	18ef8 <__aeabi_dsub+0xc8>
   190ea:	430a      	orrs	r2, r1
   190ec:	0017      	movs	r7, r2
   190ee:	2100      	movs	r1, #0
   190f0:	1e7a      	subs	r2, r7, #1
   190f2:	4197      	sbcs	r7, r2
   190f4:	e6ee      	b.n	18ed4 <__aeabi_dsub+0xa4>
   190f6:	2b00      	cmp	r3, #0
   190f8:	d000      	beq.n	190fc <__aeabi_dsub+0x2cc>
   190fa:	e0e5      	b.n	192c8 <__aeabi_dsub+0x498>
   190fc:	1c73      	adds	r3, r6, #1
   190fe:	469c      	mov	ip, r3
   19100:	055b      	lsls	r3, r3, #21
   19102:	0d5b      	lsrs	r3, r3, #21
   19104:	2b01      	cmp	r3, #1
   19106:	dc00      	bgt.n	1910a <__aeabi_dsub+0x2da>
   19108:	e09f      	b.n	1924a <__aeabi_dsub+0x41a>
   1910a:	4b1a      	ldr	r3, [pc, #104]	; (19174 <__aeabi_dsub+0x344>)
   1910c:	459c      	cmp	ip, r3
   1910e:	d100      	bne.n	19112 <__aeabi_dsub+0x2e2>
   19110:	e0c5      	b.n	1929e <__aeabi_dsub+0x46e>
   19112:	4452      	add	r2, sl
   19114:	4552      	cmp	r2, sl
   19116:	4180      	sbcs	r0, r0
   19118:	1864      	adds	r4, r4, r1
   1911a:	4240      	negs	r0, r0
   1911c:	1824      	adds	r4, r4, r0
   1911e:	07e7      	lsls	r7, r4, #31
   19120:	0852      	lsrs	r2, r2, #1
   19122:	4317      	orrs	r7, r2
   19124:	0864      	lsrs	r4, r4, #1
   19126:	4666      	mov	r6, ip
   19128:	e708      	b.n	18f3c <__aeabi_dsub+0x10c>
   1912a:	4812      	ldr	r0, [pc, #72]	; (19174 <__aeabi_dsub+0x344>)
   1912c:	4285      	cmp	r5, r0
   1912e:	d100      	bne.n	19132 <__aeabi_dsub+0x302>
   19130:	e085      	b.n	1923e <__aeabi_dsub+0x40e>
   19132:	001d      	movs	r5, r3
   19134:	e6bc      	b.n	18eb0 <__aeabi_dsub+0x80>
   19136:	0029      	movs	r1, r5
   19138:	3e1f      	subs	r6, #31
   1913a:	40f1      	lsrs	r1, r6
   1913c:	2b20      	cmp	r3, #32
   1913e:	d100      	bne.n	19142 <__aeabi_dsub+0x312>
   19140:	e07f      	b.n	19242 <__aeabi_dsub+0x412>
   19142:	2240      	movs	r2, #64	; 0x40
   19144:	1ad3      	subs	r3, r2, r3
   19146:	409d      	lsls	r5, r3
   19148:	432f      	orrs	r7, r5
   1914a:	1e7d      	subs	r5, r7, #1
   1914c:	41af      	sbcs	r7, r5
   1914e:	2400      	movs	r4, #0
   19150:	430f      	orrs	r7, r1
   19152:	2600      	movs	r6, #0
   19154:	e78e      	b.n	19074 <__aeabi_dsub+0x244>
   19156:	002b      	movs	r3, r5
   19158:	000f      	movs	r7, r1
   1915a:	3b20      	subs	r3, #32
   1915c:	40df      	lsrs	r7, r3
   1915e:	2d20      	cmp	r5, #32
   19160:	d071      	beq.n	19246 <__aeabi_dsub+0x416>
   19162:	2340      	movs	r3, #64	; 0x40
   19164:	1b5d      	subs	r5, r3, r5
   19166:	40a9      	lsls	r1, r5
   19168:	430a      	orrs	r2, r1
   1916a:	1e51      	subs	r1, r2, #1
   1916c:	418a      	sbcs	r2, r1
   1916e:	2100      	movs	r1, #0
   19170:	4317      	orrs	r7, r2
   19172:	e6af      	b.n	18ed4 <__aeabi_dsub+0xa4>
   19174:	000007ff 	.word	0x000007ff
   19178:	ff7fffff 	.word	0xff7fffff
   1917c:	800fffff 	.word	0x800fffff
   19180:	2e00      	cmp	r6, #0
   19182:	d03e      	beq.n	19202 <__aeabi_dsub+0x3d2>
   19184:	4eb3      	ldr	r6, [pc, #716]	; (19454 <__aeabi_dsub+0x624>)
   19186:	45b4      	cmp	ip, r6
   19188:	d045      	beq.n	19216 <__aeabi_dsub+0x3e6>
   1918a:	2680      	movs	r6, #128	; 0x80
   1918c:	0436      	lsls	r6, r6, #16
   1918e:	426d      	negs	r5, r5
   19190:	4334      	orrs	r4, r6
   19192:	2d38      	cmp	r5, #56	; 0x38
   19194:	dd00      	ble.n	19198 <__aeabi_dsub+0x368>
   19196:	e0a8      	b.n	192ea <__aeabi_dsub+0x4ba>
   19198:	2d1f      	cmp	r5, #31
   1919a:	dd00      	ble.n	1919e <__aeabi_dsub+0x36e>
   1919c:	e11f      	b.n	193de <__aeabi_dsub+0x5ae>
   1919e:	2620      	movs	r6, #32
   191a0:	0027      	movs	r7, r4
   191a2:	4650      	mov	r0, sl
   191a4:	1b76      	subs	r6, r6, r5
   191a6:	40b7      	lsls	r7, r6
   191a8:	40e8      	lsrs	r0, r5
   191aa:	4307      	orrs	r7, r0
   191ac:	4650      	mov	r0, sl
   191ae:	40b0      	lsls	r0, r6
   191b0:	1e46      	subs	r6, r0, #1
   191b2:	41b0      	sbcs	r0, r6
   191b4:	40ec      	lsrs	r4, r5
   191b6:	4338      	orrs	r0, r7
   191b8:	1a17      	subs	r7, r2, r0
   191ba:	42ba      	cmp	r2, r7
   191bc:	4192      	sbcs	r2, r2
   191be:	1b0c      	subs	r4, r1, r4
   191c0:	4252      	negs	r2, r2
   191c2:	1aa4      	subs	r4, r4, r2
   191c4:	4666      	mov	r6, ip
   191c6:	4698      	mov	r8, r3
   191c8:	e68b      	b.n	18ee2 <__aeabi_dsub+0xb2>
   191ca:	4664      	mov	r4, ip
   191cc:	4667      	mov	r7, ip
   191ce:	432c      	orrs	r4, r5
   191d0:	d000      	beq.n	191d4 <__aeabi_dsub+0x3a4>
   191d2:	e68b      	b.n	18eec <__aeabi_dsub+0xbc>
   191d4:	2500      	movs	r5, #0
   191d6:	2600      	movs	r6, #0
   191d8:	2700      	movs	r7, #0
   191da:	e6ea      	b.n	18fb2 <__aeabi_dsub+0x182>
   191dc:	001e      	movs	r6, r3
   191de:	e6ad      	b.n	18f3c <__aeabi_dsub+0x10c>
   191e0:	2b1f      	cmp	r3, #31
   191e2:	dc60      	bgt.n	192a6 <__aeabi_dsub+0x476>
   191e4:	2720      	movs	r7, #32
   191e6:	1af8      	subs	r0, r7, r3
   191e8:	000f      	movs	r7, r1
   191ea:	4684      	mov	ip, r0
   191ec:	4087      	lsls	r7, r0
   191ee:	0010      	movs	r0, r2
   191f0:	40d8      	lsrs	r0, r3
   191f2:	4307      	orrs	r7, r0
   191f4:	4660      	mov	r0, ip
   191f6:	4082      	lsls	r2, r0
   191f8:	1e50      	subs	r0, r2, #1
   191fa:	4182      	sbcs	r2, r0
   191fc:	40d9      	lsrs	r1, r3
   191fe:	4317      	orrs	r7, r2
   19200:	e6f5      	b.n	18fee <__aeabi_dsub+0x1be>
   19202:	0026      	movs	r6, r4
   19204:	4650      	mov	r0, sl
   19206:	4306      	orrs	r6, r0
   19208:	d005      	beq.n	19216 <__aeabi_dsub+0x3e6>
   1920a:	43ed      	mvns	r5, r5
   1920c:	2d00      	cmp	r5, #0
   1920e:	d0d3      	beq.n	191b8 <__aeabi_dsub+0x388>
   19210:	4e90      	ldr	r6, [pc, #576]	; (19454 <__aeabi_dsub+0x624>)
   19212:	45b4      	cmp	ip, r6
   19214:	d1bd      	bne.n	19192 <__aeabi_dsub+0x362>
   19216:	000c      	movs	r4, r1
   19218:	0017      	movs	r7, r2
   1921a:	4666      	mov	r6, ip
   1921c:	4698      	mov	r8, r3
   1921e:	e68d      	b.n	18f3c <__aeabi_dsub+0x10c>
   19220:	488c      	ldr	r0, [pc, #560]	; (19454 <__aeabi_dsub+0x624>)
   19222:	4283      	cmp	r3, r0
   19224:	d00b      	beq.n	1923e <__aeabi_dsub+0x40e>
   19226:	4663      	mov	r3, ip
   19228:	e6d9      	b.n	18fde <__aeabi_dsub+0x1ae>
   1922a:	2d00      	cmp	r5, #0
   1922c:	d000      	beq.n	19230 <__aeabi_dsub+0x400>
   1922e:	e096      	b.n	1935e <__aeabi_dsub+0x52e>
   19230:	0008      	movs	r0, r1
   19232:	4310      	orrs	r0, r2
   19234:	d100      	bne.n	19238 <__aeabi_dsub+0x408>
   19236:	e0e2      	b.n	193fe <__aeabi_dsub+0x5ce>
   19238:	000c      	movs	r4, r1
   1923a:	0017      	movs	r7, r2
   1923c:	4698      	mov	r8, r3
   1923e:	4e85      	ldr	r6, [pc, #532]	; (19454 <__aeabi_dsub+0x624>)
   19240:	e67c      	b.n	18f3c <__aeabi_dsub+0x10c>
   19242:	2500      	movs	r5, #0
   19244:	e780      	b.n	19148 <__aeabi_dsub+0x318>
   19246:	2100      	movs	r1, #0
   19248:	e78e      	b.n	19168 <__aeabi_dsub+0x338>
   1924a:	0023      	movs	r3, r4
   1924c:	4650      	mov	r0, sl
   1924e:	4303      	orrs	r3, r0
   19250:	2e00      	cmp	r6, #0
   19252:	d000      	beq.n	19256 <__aeabi_dsub+0x426>
   19254:	e0a8      	b.n	193a8 <__aeabi_dsub+0x578>
   19256:	2b00      	cmp	r3, #0
   19258:	d100      	bne.n	1925c <__aeabi_dsub+0x42c>
   1925a:	e0de      	b.n	1941a <__aeabi_dsub+0x5ea>
   1925c:	000b      	movs	r3, r1
   1925e:	4313      	orrs	r3, r2
   19260:	d100      	bne.n	19264 <__aeabi_dsub+0x434>
   19262:	e66b      	b.n	18f3c <__aeabi_dsub+0x10c>
   19264:	4452      	add	r2, sl
   19266:	4552      	cmp	r2, sl
   19268:	4180      	sbcs	r0, r0
   1926a:	1864      	adds	r4, r4, r1
   1926c:	4240      	negs	r0, r0
   1926e:	1824      	adds	r4, r4, r0
   19270:	0017      	movs	r7, r2
   19272:	0223      	lsls	r3, r4, #8
   19274:	d400      	bmi.n	19278 <__aeabi_dsub+0x448>
   19276:	e6fd      	b.n	19074 <__aeabi_dsub+0x244>
   19278:	4b77      	ldr	r3, [pc, #476]	; (19458 <__aeabi_dsub+0x628>)
   1927a:	4666      	mov	r6, ip
   1927c:	401c      	ands	r4, r3
   1927e:	e65d      	b.n	18f3c <__aeabi_dsub+0x10c>
   19280:	0025      	movs	r5, r4
   19282:	4650      	mov	r0, sl
   19284:	4305      	orrs	r5, r0
   19286:	2e00      	cmp	r6, #0
   19288:	d1cf      	bne.n	1922a <__aeabi_dsub+0x3fa>
   1928a:	2d00      	cmp	r5, #0
   1928c:	d14f      	bne.n	1932e <__aeabi_dsub+0x4fe>
   1928e:	000c      	movs	r4, r1
   19290:	4314      	orrs	r4, r2
   19292:	d100      	bne.n	19296 <__aeabi_dsub+0x466>
   19294:	e0a0      	b.n	193d8 <__aeabi_dsub+0x5a8>
   19296:	000c      	movs	r4, r1
   19298:	0017      	movs	r7, r2
   1929a:	4698      	mov	r8, r3
   1929c:	e64e      	b.n	18f3c <__aeabi_dsub+0x10c>
   1929e:	4666      	mov	r6, ip
   192a0:	2400      	movs	r4, #0
   192a2:	2700      	movs	r7, #0
   192a4:	e685      	b.n	18fb2 <__aeabi_dsub+0x182>
   192a6:	001f      	movs	r7, r3
   192a8:	0008      	movs	r0, r1
   192aa:	3f20      	subs	r7, #32
   192ac:	40f8      	lsrs	r0, r7
   192ae:	0007      	movs	r7, r0
   192b0:	2b20      	cmp	r3, #32
   192b2:	d100      	bne.n	192b6 <__aeabi_dsub+0x486>
   192b4:	e08e      	b.n	193d4 <__aeabi_dsub+0x5a4>
   192b6:	2040      	movs	r0, #64	; 0x40
   192b8:	1ac3      	subs	r3, r0, r3
   192ba:	4099      	lsls	r1, r3
   192bc:	430a      	orrs	r2, r1
   192be:	1e51      	subs	r1, r2, #1
   192c0:	418a      	sbcs	r2, r1
   192c2:	2100      	movs	r1, #0
   192c4:	4317      	orrs	r7, r2
   192c6:	e692      	b.n	18fee <__aeabi_dsub+0x1be>
   192c8:	2e00      	cmp	r6, #0
   192ca:	d114      	bne.n	192f6 <__aeabi_dsub+0x4c6>
   192cc:	0026      	movs	r6, r4
   192ce:	4650      	mov	r0, sl
   192d0:	4306      	orrs	r6, r0
   192d2:	d062      	beq.n	1939a <__aeabi_dsub+0x56a>
   192d4:	43db      	mvns	r3, r3
   192d6:	2b00      	cmp	r3, #0
   192d8:	d15c      	bne.n	19394 <__aeabi_dsub+0x564>
   192da:	1887      	adds	r7, r0, r2
   192dc:	4297      	cmp	r7, r2
   192de:	4192      	sbcs	r2, r2
   192e0:	1864      	adds	r4, r4, r1
   192e2:	4252      	negs	r2, r2
   192e4:	18a4      	adds	r4, r4, r2
   192e6:	4666      	mov	r6, ip
   192e8:	e687      	b.n	18ffa <__aeabi_dsub+0x1ca>
   192ea:	4650      	mov	r0, sl
   192ec:	4320      	orrs	r0, r4
   192ee:	1e44      	subs	r4, r0, #1
   192f0:	41a0      	sbcs	r0, r4
   192f2:	2400      	movs	r4, #0
   192f4:	e760      	b.n	191b8 <__aeabi_dsub+0x388>
   192f6:	4e57      	ldr	r6, [pc, #348]	; (19454 <__aeabi_dsub+0x624>)
   192f8:	45b4      	cmp	ip, r6
   192fa:	d04e      	beq.n	1939a <__aeabi_dsub+0x56a>
   192fc:	2680      	movs	r6, #128	; 0x80
   192fe:	0436      	lsls	r6, r6, #16
   19300:	425b      	negs	r3, r3
   19302:	4334      	orrs	r4, r6
   19304:	2b38      	cmp	r3, #56	; 0x38
   19306:	dd00      	ble.n	1930a <__aeabi_dsub+0x4da>
   19308:	e07f      	b.n	1940a <__aeabi_dsub+0x5da>
   1930a:	2b1f      	cmp	r3, #31
   1930c:	dd00      	ble.n	19310 <__aeabi_dsub+0x4e0>
   1930e:	e08b      	b.n	19428 <__aeabi_dsub+0x5f8>
   19310:	2620      	movs	r6, #32
   19312:	0027      	movs	r7, r4
   19314:	4650      	mov	r0, sl
   19316:	1af6      	subs	r6, r6, r3
   19318:	40b7      	lsls	r7, r6
   1931a:	40d8      	lsrs	r0, r3
   1931c:	4307      	orrs	r7, r0
   1931e:	4650      	mov	r0, sl
   19320:	40b0      	lsls	r0, r6
   19322:	1e46      	subs	r6, r0, #1
   19324:	41b0      	sbcs	r0, r6
   19326:	4307      	orrs	r7, r0
   19328:	40dc      	lsrs	r4, r3
   1932a:	18bf      	adds	r7, r7, r2
   1932c:	e7d6      	b.n	192dc <__aeabi_dsub+0x4ac>
   1932e:	000d      	movs	r5, r1
   19330:	4315      	orrs	r5, r2
   19332:	d100      	bne.n	19336 <__aeabi_dsub+0x506>
   19334:	e602      	b.n	18f3c <__aeabi_dsub+0x10c>
   19336:	4650      	mov	r0, sl
   19338:	1a80      	subs	r0, r0, r2
   1933a:	4582      	cmp	sl, r0
   1933c:	41bf      	sbcs	r7, r7
   1933e:	1a65      	subs	r5, r4, r1
   19340:	427f      	negs	r7, r7
   19342:	1bed      	subs	r5, r5, r7
   19344:	4684      	mov	ip, r0
   19346:	0228      	lsls	r0, r5, #8
   19348:	d400      	bmi.n	1934c <__aeabi_dsub+0x51c>
   1934a:	e68d      	b.n	19068 <__aeabi_dsub+0x238>
   1934c:	4650      	mov	r0, sl
   1934e:	1a17      	subs	r7, r2, r0
   19350:	42ba      	cmp	r2, r7
   19352:	4192      	sbcs	r2, r2
   19354:	1b0c      	subs	r4, r1, r4
   19356:	4252      	negs	r2, r2
   19358:	1aa4      	subs	r4, r4, r2
   1935a:	4698      	mov	r8, r3
   1935c:	e5ee      	b.n	18f3c <__aeabi_dsub+0x10c>
   1935e:	000d      	movs	r5, r1
   19360:	4315      	orrs	r5, r2
   19362:	d100      	bne.n	19366 <__aeabi_dsub+0x536>
   19364:	e76b      	b.n	1923e <__aeabi_dsub+0x40e>
   19366:	4650      	mov	r0, sl
   19368:	0767      	lsls	r7, r4, #29
   1936a:	08c0      	lsrs	r0, r0, #3
   1936c:	4307      	orrs	r7, r0
   1936e:	2080      	movs	r0, #128	; 0x80
   19370:	08e4      	lsrs	r4, r4, #3
   19372:	0300      	lsls	r0, r0, #12
   19374:	4204      	tst	r4, r0
   19376:	d007      	beq.n	19388 <__aeabi_dsub+0x558>
   19378:	08cd      	lsrs	r5, r1, #3
   1937a:	4205      	tst	r5, r0
   1937c:	d104      	bne.n	19388 <__aeabi_dsub+0x558>
   1937e:	002c      	movs	r4, r5
   19380:	4698      	mov	r8, r3
   19382:	08d7      	lsrs	r7, r2, #3
   19384:	0749      	lsls	r1, r1, #29
   19386:	430f      	orrs	r7, r1
   19388:	0f7b      	lsrs	r3, r7, #29
   1938a:	00e4      	lsls	r4, r4, #3
   1938c:	431c      	orrs	r4, r3
   1938e:	00ff      	lsls	r7, r7, #3
   19390:	4e30      	ldr	r6, [pc, #192]	; (19454 <__aeabi_dsub+0x624>)
   19392:	e5d3      	b.n	18f3c <__aeabi_dsub+0x10c>
   19394:	4e2f      	ldr	r6, [pc, #188]	; (19454 <__aeabi_dsub+0x624>)
   19396:	45b4      	cmp	ip, r6
   19398:	d1b4      	bne.n	19304 <__aeabi_dsub+0x4d4>
   1939a:	000c      	movs	r4, r1
   1939c:	0017      	movs	r7, r2
   1939e:	4666      	mov	r6, ip
   193a0:	e5cc      	b.n	18f3c <__aeabi_dsub+0x10c>
   193a2:	2700      	movs	r7, #0
   193a4:	2400      	movs	r4, #0
   193a6:	e5e8      	b.n	18f7a <__aeabi_dsub+0x14a>
   193a8:	2b00      	cmp	r3, #0
   193aa:	d039      	beq.n	19420 <__aeabi_dsub+0x5f0>
   193ac:	000b      	movs	r3, r1
   193ae:	4313      	orrs	r3, r2
   193b0:	d100      	bne.n	193b4 <__aeabi_dsub+0x584>
   193b2:	e744      	b.n	1923e <__aeabi_dsub+0x40e>
   193b4:	08c0      	lsrs	r0, r0, #3
   193b6:	0767      	lsls	r7, r4, #29
   193b8:	4307      	orrs	r7, r0
   193ba:	2080      	movs	r0, #128	; 0x80
   193bc:	08e4      	lsrs	r4, r4, #3
   193be:	0300      	lsls	r0, r0, #12
   193c0:	4204      	tst	r4, r0
   193c2:	d0e1      	beq.n	19388 <__aeabi_dsub+0x558>
   193c4:	08cb      	lsrs	r3, r1, #3
   193c6:	4203      	tst	r3, r0
   193c8:	d1de      	bne.n	19388 <__aeabi_dsub+0x558>
   193ca:	08d7      	lsrs	r7, r2, #3
   193cc:	0749      	lsls	r1, r1, #29
   193ce:	430f      	orrs	r7, r1
   193d0:	001c      	movs	r4, r3
   193d2:	e7d9      	b.n	19388 <__aeabi_dsub+0x558>
   193d4:	2100      	movs	r1, #0
   193d6:	e771      	b.n	192bc <__aeabi_dsub+0x48c>
   193d8:	2500      	movs	r5, #0
   193da:	2700      	movs	r7, #0
   193dc:	e5e9      	b.n	18fb2 <__aeabi_dsub+0x182>
   193de:	002e      	movs	r6, r5
   193e0:	0027      	movs	r7, r4
   193e2:	3e20      	subs	r6, #32
   193e4:	40f7      	lsrs	r7, r6
   193e6:	2d20      	cmp	r5, #32
   193e8:	d02f      	beq.n	1944a <__aeabi_dsub+0x61a>
   193ea:	2640      	movs	r6, #64	; 0x40
   193ec:	1b75      	subs	r5, r6, r5
   193ee:	40ac      	lsls	r4, r5
   193f0:	4650      	mov	r0, sl
   193f2:	4320      	orrs	r0, r4
   193f4:	1e44      	subs	r4, r0, #1
   193f6:	41a0      	sbcs	r0, r4
   193f8:	2400      	movs	r4, #0
   193fa:	4338      	orrs	r0, r7
   193fc:	e6dc      	b.n	191b8 <__aeabi_dsub+0x388>
   193fe:	2480      	movs	r4, #128	; 0x80
   19400:	2500      	movs	r5, #0
   19402:	0324      	lsls	r4, r4, #12
   19404:	4e13      	ldr	r6, [pc, #76]	; (19454 <__aeabi_dsub+0x624>)
   19406:	2700      	movs	r7, #0
   19408:	e5d3      	b.n	18fb2 <__aeabi_dsub+0x182>
   1940a:	4650      	mov	r0, sl
   1940c:	4320      	orrs	r0, r4
   1940e:	0007      	movs	r7, r0
   19410:	1e78      	subs	r0, r7, #1
   19412:	4187      	sbcs	r7, r0
   19414:	2400      	movs	r4, #0
   19416:	18bf      	adds	r7, r7, r2
   19418:	e760      	b.n	192dc <__aeabi_dsub+0x4ac>
   1941a:	000c      	movs	r4, r1
   1941c:	0017      	movs	r7, r2
   1941e:	e58d      	b.n	18f3c <__aeabi_dsub+0x10c>
   19420:	000c      	movs	r4, r1
   19422:	0017      	movs	r7, r2
   19424:	4e0b      	ldr	r6, [pc, #44]	; (19454 <__aeabi_dsub+0x624>)
   19426:	e589      	b.n	18f3c <__aeabi_dsub+0x10c>
   19428:	001e      	movs	r6, r3
   1942a:	0027      	movs	r7, r4
   1942c:	3e20      	subs	r6, #32
   1942e:	40f7      	lsrs	r7, r6
   19430:	2b20      	cmp	r3, #32
   19432:	d00c      	beq.n	1944e <__aeabi_dsub+0x61e>
   19434:	2640      	movs	r6, #64	; 0x40
   19436:	1af3      	subs	r3, r6, r3
   19438:	409c      	lsls	r4, r3
   1943a:	4650      	mov	r0, sl
   1943c:	4320      	orrs	r0, r4
   1943e:	1e44      	subs	r4, r0, #1
   19440:	41a0      	sbcs	r0, r4
   19442:	4307      	orrs	r7, r0
   19444:	2400      	movs	r4, #0
   19446:	18bf      	adds	r7, r7, r2
   19448:	e748      	b.n	192dc <__aeabi_dsub+0x4ac>
   1944a:	2400      	movs	r4, #0
   1944c:	e7d0      	b.n	193f0 <__aeabi_dsub+0x5c0>
   1944e:	2400      	movs	r4, #0
   19450:	e7f3      	b.n	1943a <__aeabi_dsub+0x60a>
   19452:	46c0      	nop			; (mov r8, r8)
   19454:	000007ff 	.word	0x000007ff
   19458:	ff7fffff 	.word	0xff7fffff

0001945c <__aeabi_d2iz>:
   1945c:	b530      	push	{r4, r5, lr}
   1945e:	4d13      	ldr	r5, [pc, #76]	; (194ac <__aeabi_d2iz+0x50>)
   19460:	030a      	lsls	r2, r1, #12
   19462:	004b      	lsls	r3, r1, #1
   19464:	0b12      	lsrs	r2, r2, #12
   19466:	0d5b      	lsrs	r3, r3, #21
   19468:	0fc9      	lsrs	r1, r1, #31
   1946a:	2400      	movs	r4, #0
   1946c:	42ab      	cmp	r3, r5
   1946e:	dd10      	ble.n	19492 <__aeabi_d2iz+0x36>
   19470:	4c0f      	ldr	r4, [pc, #60]	; (194b0 <__aeabi_d2iz+0x54>)
   19472:	42a3      	cmp	r3, r4
   19474:	dc0f      	bgt.n	19496 <__aeabi_d2iz+0x3a>
   19476:	2480      	movs	r4, #128	; 0x80
   19478:	4d0e      	ldr	r5, [pc, #56]	; (194b4 <__aeabi_d2iz+0x58>)
   1947a:	0364      	lsls	r4, r4, #13
   1947c:	4322      	orrs	r2, r4
   1947e:	1aed      	subs	r5, r5, r3
   19480:	2d1f      	cmp	r5, #31
   19482:	dd0b      	ble.n	1949c <__aeabi_d2iz+0x40>
   19484:	480c      	ldr	r0, [pc, #48]	; (194b8 <__aeabi_d2iz+0x5c>)
   19486:	1ac3      	subs	r3, r0, r3
   19488:	40da      	lsrs	r2, r3
   1948a:	4254      	negs	r4, r2
   1948c:	2900      	cmp	r1, #0
   1948e:	d100      	bne.n	19492 <__aeabi_d2iz+0x36>
   19490:	0014      	movs	r4, r2
   19492:	0020      	movs	r0, r4
   19494:	bd30      	pop	{r4, r5, pc}
   19496:	4b09      	ldr	r3, [pc, #36]	; (194bc <__aeabi_d2iz+0x60>)
   19498:	18cc      	adds	r4, r1, r3
   1949a:	e7fa      	b.n	19492 <__aeabi_d2iz+0x36>
   1949c:	4c08      	ldr	r4, [pc, #32]	; (194c0 <__aeabi_d2iz+0x64>)
   1949e:	40e8      	lsrs	r0, r5
   194a0:	46a4      	mov	ip, r4
   194a2:	4463      	add	r3, ip
   194a4:	409a      	lsls	r2, r3
   194a6:	4302      	orrs	r2, r0
   194a8:	e7ef      	b.n	1948a <__aeabi_d2iz+0x2e>
   194aa:	46c0      	nop			; (mov r8, r8)
   194ac:	000003fe 	.word	0x000003fe
   194b0:	0000041d 	.word	0x0000041d
   194b4:	00000433 	.word	0x00000433
   194b8:	00000413 	.word	0x00000413
   194bc:	7fffffff 	.word	0x7fffffff
   194c0:	fffffbed 	.word	0xfffffbed

000194c4 <__aeabi_i2d>:
   194c4:	b570      	push	{r4, r5, r6, lr}
   194c6:	2800      	cmp	r0, #0
   194c8:	d030      	beq.n	1952c <__aeabi_i2d+0x68>
   194ca:	17c3      	asrs	r3, r0, #31
   194cc:	18c4      	adds	r4, r0, r3
   194ce:	405c      	eors	r4, r3
   194d0:	0fc5      	lsrs	r5, r0, #31
   194d2:	0020      	movs	r0, r4
   194d4:	f000 f8c2 	bl	1965c <__clzsi2>
   194d8:	4b17      	ldr	r3, [pc, #92]	; (19538 <__aeabi_i2d+0x74>)
   194da:	4a18      	ldr	r2, [pc, #96]	; (1953c <__aeabi_i2d+0x78>)
   194dc:	1a1b      	subs	r3, r3, r0
   194de:	1ad2      	subs	r2, r2, r3
   194e0:	2a1f      	cmp	r2, #31
   194e2:	dd18      	ble.n	19516 <__aeabi_i2d+0x52>
   194e4:	4a16      	ldr	r2, [pc, #88]	; (19540 <__aeabi_i2d+0x7c>)
   194e6:	1ad2      	subs	r2, r2, r3
   194e8:	4094      	lsls	r4, r2
   194ea:	2200      	movs	r2, #0
   194ec:	0324      	lsls	r4, r4, #12
   194ee:	055b      	lsls	r3, r3, #21
   194f0:	0b24      	lsrs	r4, r4, #12
   194f2:	0d5b      	lsrs	r3, r3, #21
   194f4:	2100      	movs	r1, #0
   194f6:	0010      	movs	r0, r2
   194f8:	0324      	lsls	r4, r4, #12
   194fa:	0d0a      	lsrs	r2, r1, #20
   194fc:	0b24      	lsrs	r4, r4, #12
   194fe:	0512      	lsls	r2, r2, #20
   19500:	4322      	orrs	r2, r4
   19502:	4c10      	ldr	r4, [pc, #64]	; (19544 <__aeabi_i2d+0x80>)
   19504:	051b      	lsls	r3, r3, #20
   19506:	4022      	ands	r2, r4
   19508:	4313      	orrs	r3, r2
   1950a:	005b      	lsls	r3, r3, #1
   1950c:	07ed      	lsls	r5, r5, #31
   1950e:	085b      	lsrs	r3, r3, #1
   19510:	432b      	orrs	r3, r5
   19512:	0019      	movs	r1, r3
   19514:	bd70      	pop	{r4, r5, r6, pc}
   19516:	0021      	movs	r1, r4
   19518:	4091      	lsls	r1, r2
   1951a:	000a      	movs	r2, r1
   1951c:	210b      	movs	r1, #11
   1951e:	1a08      	subs	r0, r1, r0
   19520:	40c4      	lsrs	r4, r0
   19522:	055b      	lsls	r3, r3, #21
   19524:	0324      	lsls	r4, r4, #12
   19526:	0b24      	lsrs	r4, r4, #12
   19528:	0d5b      	lsrs	r3, r3, #21
   1952a:	e7e3      	b.n	194f4 <__aeabi_i2d+0x30>
   1952c:	2500      	movs	r5, #0
   1952e:	2300      	movs	r3, #0
   19530:	2400      	movs	r4, #0
   19532:	2200      	movs	r2, #0
   19534:	e7de      	b.n	194f4 <__aeabi_i2d+0x30>
   19536:	46c0      	nop			; (mov r8, r8)
   19538:	0000041e 	.word	0x0000041e
   1953c:	00000433 	.word	0x00000433
   19540:	00000413 	.word	0x00000413
   19544:	800fffff 	.word	0x800fffff

00019548 <__aeabi_ui2d>:
   19548:	b510      	push	{r4, lr}
   1954a:	1e04      	subs	r4, r0, #0
   1954c:	d028      	beq.n	195a0 <__aeabi_ui2d+0x58>
   1954e:	f000 f885 	bl	1965c <__clzsi2>
   19552:	4b15      	ldr	r3, [pc, #84]	; (195a8 <__aeabi_ui2d+0x60>)
   19554:	4a15      	ldr	r2, [pc, #84]	; (195ac <__aeabi_ui2d+0x64>)
   19556:	1a1b      	subs	r3, r3, r0
   19558:	1ad2      	subs	r2, r2, r3
   1955a:	2a1f      	cmp	r2, #31
   1955c:	dd15      	ble.n	1958a <__aeabi_ui2d+0x42>
   1955e:	4a14      	ldr	r2, [pc, #80]	; (195b0 <__aeabi_ui2d+0x68>)
   19560:	1ad2      	subs	r2, r2, r3
   19562:	4094      	lsls	r4, r2
   19564:	2200      	movs	r2, #0
   19566:	0324      	lsls	r4, r4, #12
   19568:	055b      	lsls	r3, r3, #21
   1956a:	0b24      	lsrs	r4, r4, #12
   1956c:	0d5b      	lsrs	r3, r3, #21
   1956e:	2100      	movs	r1, #0
   19570:	0010      	movs	r0, r2
   19572:	0324      	lsls	r4, r4, #12
   19574:	0d0a      	lsrs	r2, r1, #20
   19576:	0b24      	lsrs	r4, r4, #12
   19578:	0512      	lsls	r2, r2, #20
   1957a:	4322      	orrs	r2, r4
   1957c:	4c0d      	ldr	r4, [pc, #52]	; (195b4 <__aeabi_ui2d+0x6c>)
   1957e:	051b      	lsls	r3, r3, #20
   19580:	4022      	ands	r2, r4
   19582:	4313      	orrs	r3, r2
   19584:	005b      	lsls	r3, r3, #1
   19586:	0859      	lsrs	r1, r3, #1
   19588:	bd10      	pop	{r4, pc}
   1958a:	0021      	movs	r1, r4
   1958c:	4091      	lsls	r1, r2
   1958e:	000a      	movs	r2, r1
   19590:	210b      	movs	r1, #11
   19592:	1a08      	subs	r0, r1, r0
   19594:	40c4      	lsrs	r4, r0
   19596:	055b      	lsls	r3, r3, #21
   19598:	0324      	lsls	r4, r4, #12
   1959a:	0b24      	lsrs	r4, r4, #12
   1959c:	0d5b      	lsrs	r3, r3, #21
   1959e:	e7e6      	b.n	1956e <__aeabi_ui2d+0x26>
   195a0:	2300      	movs	r3, #0
   195a2:	2400      	movs	r4, #0
   195a4:	2200      	movs	r2, #0
   195a6:	e7e2      	b.n	1956e <__aeabi_ui2d+0x26>
   195a8:	0000041e 	.word	0x0000041e
   195ac:	00000433 	.word	0x00000433
   195b0:	00000413 	.word	0x00000413
   195b4:	800fffff 	.word	0x800fffff

000195b8 <__aeabi_f2d>:
   195b8:	0041      	lsls	r1, r0, #1
   195ba:	0e09      	lsrs	r1, r1, #24
   195bc:	1c4b      	adds	r3, r1, #1
   195be:	b570      	push	{r4, r5, r6, lr}
   195c0:	b2db      	uxtb	r3, r3
   195c2:	0246      	lsls	r6, r0, #9
   195c4:	0a75      	lsrs	r5, r6, #9
   195c6:	0fc4      	lsrs	r4, r0, #31
   195c8:	2b01      	cmp	r3, #1
   195ca:	dd14      	ble.n	195f6 <__aeabi_f2d+0x3e>
   195cc:	23e0      	movs	r3, #224	; 0xe0
   195ce:	009b      	lsls	r3, r3, #2
   195d0:	076d      	lsls	r5, r5, #29
   195d2:	0b36      	lsrs	r6, r6, #12
   195d4:	18cb      	adds	r3, r1, r3
   195d6:	2100      	movs	r1, #0
   195d8:	0d0a      	lsrs	r2, r1, #20
   195da:	0028      	movs	r0, r5
   195dc:	0512      	lsls	r2, r2, #20
   195de:	4d1c      	ldr	r5, [pc, #112]	; (19650 <__aeabi_f2d+0x98>)
   195e0:	4332      	orrs	r2, r6
   195e2:	055b      	lsls	r3, r3, #21
   195e4:	402a      	ands	r2, r5
   195e6:	085b      	lsrs	r3, r3, #1
   195e8:	4313      	orrs	r3, r2
   195ea:	005b      	lsls	r3, r3, #1
   195ec:	07e4      	lsls	r4, r4, #31
   195ee:	085b      	lsrs	r3, r3, #1
   195f0:	4323      	orrs	r3, r4
   195f2:	0019      	movs	r1, r3
   195f4:	bd70      	pop	{r4, r5, r6, pc}
   195f6:	2900      	cmp	r1, #0
   195f8:	d114      	bne.n	19624 <__aeabi_f2d+0x6c>
   195fa:	2d00      	cmp	r5, #0
   195fc:	d01e      	beq.n	1963c <__aeabi_f2d+0x84>
   195fe:	0028      	movs	r0, r5
   19600:	f000 f82c 	bl	1965c <__clzsi2>
   19604:	280a      	cmp	r0, #10
   19606:	dc1c      	bgt.n	19642 <__aeabi_f2d+0x8a>
   19608:	230b      	movs	r3, #11
   1960a:	002a      	movs	r2, r5
   1960c:	1a1b      	subs	r3, r3, r0
   1960e:	40da      	lsrs	r2, r3
   19610:	0003      	movs	r3, r0
   19612:	3315      	adds	r3, #21
   19614:	409d      	lsls	r5, r3
   19616:	4b0f      	ldr	r3, [pc, #60]	; (19654 <__aeabi_f2d+0x9c>)
   19618:	0312      	lsls	r2, r2, #12
   1961a:	1a1b      	subs	r3, r3, r0
   1961c:	055b      	lsls	r3, r3, #21
   1961e:	0b16      	lsrs	r6, r2, #12
   19620:	0d5b      	lsrs	r3, r3, #21
   19622:	e7d8      	b.n	195d6 <__aeabi_f2d+0x1e>
   19624:	2d00      	cmp	r5, #0
   19626:	d006      	beq.n	19636 <__aeabi_f2d+0x7e>
   19628:	0b32      	lsrs	r2, r6, #12
   1962a:	2680      	movs	r6, #128	; 0x80
   1962c:	0336      	lsls	r6, r6, #12
   1962e:	076d      	lsls	r5, r5, #29
   19630:	4316      	orrs	r6, r2
   19632:	4b09      	ldr	r3, [pc, #36]	; (19658 <__aeabi_f2d+0xa0>)
   19634:	e7cf      	b.n	195d6 <__aeabi_f2d+0x1e>
   19636:	4b08      	ldr	r3, [pc, #32]	; (19658 <__aeabi_f2d+0xa0>)
   19638:	2600      	movs	r6, #0
   1963a:	e7cc      	b.n	195d6 <__aeabi_f2d+0x1e>
   1963c:	2300      	movs	r3, #0
   1963e:	2600      	movs	r6, #0
   19640:	e7c9      	b.n	195d6 <__aeabi_f2d+0x1e>
   19642:	0003      	movs	r3, r0
   19644:	002a      	movs	r2, r5
   19646:	3b0b      	subs	r3, #11
   19648:	409a      	lsls	r2, r3
   1964a:	2500      	movs	r5, #0
   1964c:	e7e3      	b.n	19616 <__aeabi_f2d+0x5e>
   1964e:	46c0      	nop			; (mov r8, r8)
   19650:	800fffff 	.word	0x800fffff
   19654:	00000389 	.word	0x00000389
   19658:	000007ff 	.word	0x000007ff

0001965c <__clzsi2>:
   1965c:	211c      	movs	r1, #28
   1965e:	2301      	movs	r3, #1
   19660:	041b      	lsls	r3, r3, #16
   19662:	4298      	cmp	r0, r3
   19664:	d301      	bcc.n	1966a <__clzsi2+0xe>
   19666:	0c00      	lsrs	r0, r0, #16
   19668:	3910      	subs	r1, #16
   1966a:	0a1b      	lsrs	r3, r3, #8
   1966c:	4298      	cmp	r0, r3
   1966e:	d301      	bcc.n	19674 <__clzsi2+0x18>
   19670:	0a00      	lsrs	r0, r0, #8
   19672:	3908      	subs	r1, #8
   19674:	091b      	lsrs	r3, r3, #4
   19676:	4298      	cmp	r0, r3
   19678:	d301      	bcc.n	1967e <__clzsi2+0x22>
   1967a:	0900      	lsrs	r0, r0, #4
   1967c:	3904      	subs	r1, #4
   1967e:	a202      	add	r2, pc, #8	; (adr r2, 19688 <__clzsi2+0x2c>)
   19680:	5c10      	ldrb	r0, [r2, r0]
   19682:	1840      	adds	r0, r0, r1
   19684:	4770      	bx	lr
   19686:	46c0      	nop			; (mov r8, r8)
   19688:	02020304 	.word	0x02020304
   1968c:	01010101 	.word	0x01010101
	...

00019698 <__clzdi2>:
   19698:	b510      	push	{r4, lr}
   1969a:	2900      	cmp	r1, #0
   1969c:	d103      	bne.n	196a6 <__clzdi2+0xe>
   1969e:	f7ff ffdd 	bl	1965c <__clzsi2>
   196a2:	3020      	adds	r0, #32
   196a4:	e002      	b.n	196ac <__clzdi2+0x14>
   196a6:	1c08      	adds	r0, r1, #0
   196a8:	f7ff ffd8 	bl	1965c <__clzsi2>
   196ac:	bd10      	pop	{r4, pc}
   196ae:	46c0      	nop			; (mov r8, r8)

000196b0 <atoi>:
   196b0:	b510      	push	{r4, lr}
   196b2:	220a      	movs	r2, #10
   196b4:	2100      	movs	r1, #0
   196b6:	f000 fedd 	bl	1a474 <strtol>
   196ba:	bd10      	pop	{r4, pc}

000196bc <__libc_init_array>:
   196bc:	b570      	push	{r4, r5, r6, lr}
   196be:	4e0d      	ldr	r6, [pc, #52]	; (196f4 <__libc_init_array+0x38>)
   196c0:	4d0d      	ldr	r5, [pc, #52]	; (196f8 <__libc_init_array+0x3c>)
   196c2:	2400      	movs	r4, #0
   196c4:	1bad      	subs	r5, r5, r6
   196c6:	10ad      	asrs	r5, r5, #2
   196c8:	d005      	beq.n	196d6 <__libc_init_array+0x1a>
   196ca:	00a3      	lsls	r3, r4, #2
   196cc:	58f3      	ldr	r3, [r6, r3]
   196ce:	3401      	adds	r4, #1
   196d0:	4798      	blx	r3
   196d2:	42a5      	cmp	r5, r4
   196d4:	d1f9      	bne.n	196ca <__libc_init_array+0xe>
   196d6:	f007 f94d 	bl	20974 <_init>
   196da:	4e08      	ldr	r6, [pc, #32]	; (196fc <__libc_init_array+0x40>)
   196dc:	4d08      	ldr	r5, [pc, #32]	; (19700 <__libc_init_array+0x44>)
   196de:	2400      	movs	r4, #0
   196e0:	1bad      	subs	r5, r5, r6
   196e2:	10ad      	asrs	r5, r5, #2
   196e4:	d005      	beq.n	196f2 <__libc_init_array+0x36>
   196e6:	00a3      	lsls	r3, r4, #2
   196e8:	58f3      	ldr	r3, [r6, r3]
   196ea:	3401      	adds	r4, #1
   196ec:	4798      	blx	r3
   196ee:	42a5      	cmp	r5, r4
   196f0:	d1f9      	bne.n	196e6 <__libc_init_array+0x2a>
   196f2:	bd70      	pop	{r4, r5, r6, pc}
   196f4:	00020980 	.word	0x00020980
   196f8:	00020980 	.word	0x00020980
   196fc:	00020980 	.word	0x00020980
   19700:	00020988 	.word	0x00020988

00019704 <__itoa>:
   19704:	1e93      	subs	r3, r2, #2
   19706:	b510      	push	{r4, lr}
   19708:	000c      	movs	r4, r1
   1970a:	2b22      	cmp	r3, #34	; 0x22
   1970c:	d80e      	bhi.n	1972c <__itoa+0x28>
   1970e:	2a0a      	cmp	r2, #10
   19710:	d005      	beq.n	1971e <__itoa+0x1a>
   19712:	2100      	movs	r1, #0
   19714:	1861      	adds	r1, r4, r1
   19716:	f000 ff7f 	bl	1a618 <__utoa>
   1971a:	0020      	movs	r0, r4
   1971c:	bd10      	pop	{r4, pc}
   1971e:	2800      	cmp	r0, #0
   19720:	daf7      	bge.n	19712 <__itoa+0xe>
   19722:	232d      	movs	r3, #45	; 0x2d
   19724:	4240      	negs	r0, r0
   19726:	700b      	strb	r3, [r1, #0]
   19728:	2101      	movs	r1, #1
   1972a:	e7f3      	b.n	19714 <__itoa+0x10>
   1972c:	2300      	movs	r3, #0
   1972e:	2000      	movs	r0, #0
   19730:	700b      	strb	r3, [r1, #0]
   19732:	e7f3      	b.n	1971c <__itoa+0x18>

00019734 <itoa>:
   19734:	b510      	push	{r4, lr}
   19736:	f7ff ffe5 	bl	19704 <__itoa>
   1973a:	bd10      	pop	{r4, pc}

0001973c <__locale_mb_cur_max>:
   1973c:	4b05      	ldr	r3, [pc, #20]	; (19754 <__locale_mb_cur_max+0x18>)
   1973e:	681b      	ldr	r3, [r3, #0]
   19740:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   19742:	2b00      	cmp	r3, #0
   19744:	d003      	beq.n	1974e <__locale_mb_cur_max+0x12>
   19746:	2294      	movs	r2, #148	; 0x94
   19748:	0052      	lsls	r2, r2, #1
   1974a:	5c98      	ldrb	r0, [r3, r2]
   1974c:	4770      	bx	lr
   1974e:	4b02      	ldr	r3, [pc, #8]	; (19758 <__locale_mb_cur_max+0x1c>)
   19750:	e7f9      	b.n	19746 <__locale_mb_cur_max+0xa>
   19752:	46c0      	nop			; (mov r8, r8)
   19754:	20000018 	.word	0x20000018
   19758:	20000448 	.word	0x20000448

0001975c <__locale_ctype_ptr_l>:
   1975c:	23ec      	movs	r3, #236	; 0xec
   1975e:	58c0      	ldr	r0, [r0, r3]
   19760:	4770      	bx	lr
   19762:	46c0      	nop			; (mov r8, r8)

00019764 <__locale_ctype_ptr>:
   19764:	4b04      	ldr	r3, [pc, #16]	; (19778 <__locale_ctype_ptr+0x14>)
   19766:	681b      	ldr	r3, [r3, #0]
   19768:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   1976a:	2b00      	cmp	r3, #0
   1976c:	d002      	beq.n	19774 <__locale_ctype_ptr+0x10>
   1976e:	22ec      	movs	r2, #236	; 0xec
   19770:	5898      	ldr	r0, [r3, r2]
   19772:	4770      	bx	lr
   19774:	4b01      	ldr	r3, [pc, #4]	; (1977c <__locale_ctype_ptr+0x18>)
   19776:	e7fa      	b.n	1976e <__locale_ctype_ptr+0xa>
   19778:	20000018 	.word	0x20000018
   1977c:	20000448 	.word	0x20000448

00019780 <malloc>:
   19780:	b510      	push	{r4, lr}
   19782:	4b03      	ldr	r3, [pc, #12]	; (19790 <malloc+0x10>)
   19784:	0001      	movs	r1, r0
   19786:	6818      	ldr	r0, [r3, #0]
   19788:	f000 f80e 	bl	197a8 <_malloc_r>
   1978c:	bd10      	pop	{r4, pc}
   1978e:	46c0      	nop			; (mov r8, r8)
   19790:	20000018 	.word	0x20000018

00019794 <free>:
   19794:	b510      	push	{r4, lr}
   19796:	4b03      	ldr	r3, [pc, #12]	; (197a4 <free+0x10>)
   19798:	0001      	movs	r1, r0
   1979a:	6818      	ldr	r0, [r3, #0]
   1979c:	f003 fddc 	bl	1d358 <_free_r>
   197a0:	bd10      	pop	{r4, pc}
   197a2:	46c0      	nop			; (mov r8, r8)
   197a4:	20000018 	.word	0x20000018

000197a8 <_malloc_r>:
   197a8:	b5f0      	push	{r4, r5, r6, r7, lr}
   197aa:	4657      	mov	r7, sl
   197ac:	4645      	mov	r5, r8
   197ae:	46de      	mov	lr, fp
   197b0:	464e      	mov	r6, r9
   197b2:	b5e0      	push	{r5, r6, r7, lr}
   197b4:	000d      	movs	r5, r1
   197b6:	350b      	adds	r5, #11
   197b8:	b083      	sub	sp, #12
   197ba:	0007      	movs	r7, r0
   197bc:	2d16      	cmp	r5, #22
   197be:	d800      	bhi.n	197c2 <_malloc_r+0x1a>
   197c0:	e09f      	b.n	19902 <_malloc_r+0x15a>
   197c2:	2307      	movs	r3, #7
   197c4:	439d      	bics	r5, r3
   197c6:	d500      	bpl.n	197ca <_malloc_r+0x22>
   197c8:	e0c4      	b.n	19954 <_malloc_r+0x1ac>
   197ca:	42a9      	cmp	r1, r5
   197cc:	d900      	bls.n	197d0 <_malloc_r+0x28>
   197ce:	e0c1      	b.n	19954 <_malloc_r+0x1ac>
   197d0:	f000 fbb6 	bl	19f40 <__malloc_lock>
   197d4:	23f8      	movs	r3, #248	; 0xf8
   197d6:	33ff      	adds	r3, #255	; 0xff
   197d8:	429d      	cmp	r5, r3
   197da:	d800      	bhi.n	197de <_malloc_r+0x36>
   197dc:	e28f      	b.n	19cfe <_malloc_r+0x556>
   197de:	0a68      	lsrs	r0, r5, #9
   197e0:	d100      	bne.n	197e4 <_malloc_r+0x3c>
   197e2:	e0bb      	b.n	1995c <_malloc_r+0x1b4>
   197e4:	2804      	cmp	r0, #4
   197e6:	d900      	bls.n	197ea <_malloc_r+0x42>
   197e8:	e162      	b.n	19ab0 <_malloc_r+0x308>
   197ea:	2338      	movs	r3, #56	; 0x38
   197ec:	4698      	mov	r8, r3
   197ee:	09a8      	lsrs	r0, r5, #6
   197f0:	4480      	add	r8, r0
   197f2:	3039      	adds	r0, #57	; 0x39
   197f4:	00c1      	lsls	r1, r0, #3
   197f6:	4ed2      	ldr	r6, [pc, #840]	; (19b40 <_malloc_r+0x398>)
   197f8:	1871      	adds	r1, r6, r1
   197fa:	3908      	subs	r1, #8
   197fc:	68cc      	ldr	r4, [r1, #12]
   197fe:	42a1      	cmp	r1, r4
   19800:	d019      	beq.n	19836 <_malloc_r+0x8e>
   19802:	2303      	movs	r3, #3
   19804:	6862      	ldr	r2, [r4, #4]
   19806:	439a      	bics	r2, r3
   19808:	0013      	movs	r3, r2
   1980a:	1b52      	subs	r2, r2, r5
   1980c:	2a0f      	cmp	r2, #15
   1980e:	dd00      	ble.n	19812 <_malloc_r+0x6a>
   19810:	e0aa      	b.n	19968 <_malloc_r+0x1c0>
   19812:	2a00      	cmp	r2, #0
   19814:	db00      	blt.n	19818 <_malloc_r+0x70>
   19816:	e088      	b.n	1992a <_malloc_r+0x182>
   19818:	2303      	movs	r3, #3
   1981a:	469c      	mov	ip, r3
   1981c:	e008      	b.n	19830 <_malloc_r+0x88>
   1981e:	4662      	mov	r2, ip
   19820:	6863      	ldr	r3, [r4, #4]
   19822:	4393      	bics	r3, r2
   19824:	1b5a      	subs	r2, r3, r5
   19826:	2a0f      	cmp	r2, #15
   19828:	dd00      	ble.n	1982c <_malloc_r+0x84>
   1982a:	e09d      	b.n	19968 <_malloc_r+0x1c0>
   1982c:	2a00      	cmp	r2, #0
   1982e:	da7c      	bge.n	1992a <_malloc_r+0x182>
   19830:	68e4      	ldr	r4, [r4, #12]
   19832:	42a1      	cmp	r1, r4
   19834:	d1f3      	bne.n	1981e <_malloc_r+0x76>
   19836:	0032      	movs	r2, r6
   19838:	6934      	ldr	r4, [r6, #16]
   1983a:	3208      	adds	r2, #8
   1983c:	4294      	cmp	r4, r2
   1983e:	d100      	bne.n	19842 <_malloc_r+0x9a>
   19840:	e190      	b.n	19b64 <_malloc_r+0x3bc>
   19842:	2303      	movs	r3, #3
   19844:	6861      	ldr	r1, [r4, #4]
   19846:	4399      	bics	r1, r3
   19848:	4689      	mov	r9, r1
   1984a:	1b49      	subs	r1, r1, r5
   1984c:	290f      	cmp	r1, #15
   1984e:	dd00      	ble.n	19852 <_malloc_r+0xaa>
   19850:	e162      	b.n	19b18 <_malloc_r+0x370>
   19852:	6172      	str	r2, [r6, #20]
   19854:	6132      	str	r2, [r6, #16]
   19856:	2900      	cmp	r1, #0
   19858:	db00      	blt.n	1985c <_malloc_r+0xb4>
   1985a:	e087      	b.n	1996c <_malloc_r+0x1c4>
   1985c:	4ab9      	ldr	r2, [pc, #740]	; (19b44 <_malloc_r+0x39c>)
   1985e:	464b      	mov	r3, r9
   19860:	4591      	cmp	r9, r2
   19862:	d900      	bls.n	19866 <_malloc_r+0xbe>
   19864:	e130      	b.n	19ac8 <_malloc_r+0x320>
   19866:	08db      	lsrs	r3, r3, #3
   19868:	3aff      	subs	r2, #255	; 0xff
   1986a:	1099      	asrs	r1, r3, #2
   1986c:	3aff      	subs	r2, #255	; 0xff
   1986e:	408a      	lsls	r2, r1
   19870:	00db      	lsls	r3, r3, #3
   19872:	6871      	ldr	r1, [r6, #4]
   19874:	199b      	adds	r3, r3, r6
   19876:	430a      	orrs	r2, r1
   19878:	6899      	ldr	r1, [r3, #8]
   1987a:	6072      	str	r2, [r6, #4]
   1987c:	60e3      	str	r3, [r4, #12]
   1987e:	60a1      	str	r1, [r4, #8]
   19880:	609c      	str	r4, [r3, #8]
   19882:	0013      	movs	r3, r2
   19884:	60cc      	str	r4, [r1, #12]
   19886:	2101      	movs	r1, #1
   19888:	1082      	asrs	r2, r0, #2
   1988a:	4091      	lsls	r1, r2
   1988c:	4299      	cmp	r1, r3
   1988e:	d86f      	bhi.n	19970 <_malloc_r+0x1c8>
   19890:	420b      	tst	r3, r1
   19892:	d105      	bne.n	198a0 <_malloc_r+0xf8>
   19894:	2203      	movs	r2, #3
   19896:	4390      	bics	r0, r2
   19898:	0049      	lsls	r1, r1, #1
   1989a:	3004      	adds	r0, #4
   1989c:	420b      	tst	r3, r1
   1989e:	d0fb      	beq.n	19898 <_malloc_r+0xf0>
   198a0:	2303      	movs	r3, #3
   198a2:	4698      	mov	r8, r3
   198a4:	00c3      	lsls	r3, r0, #3
   198a6:	4699      	mov	r9, r3
   198a8:	44b1      	add	r9, r6
   198aa:	46cc      	mov	ip, r9
   198ac:	4682      	mov	sl, r0
   198ae:	4663      	mov	r3, ip
   198b0:	68dc      	ldr	r4, [r3, #12]
   198b2:	45a4      	cmp	ip, r4
   198b4:	d107      	bne.n	198c6 <_malloc_r+0x11e>
   198b6:	e157      	b.n	19b68 <_malloc_r+0x3c0>
   198b8:	2a00      	cmp	r2, #0
   198ba:	db00      	blt.n	198be <_malloc_r+0x116>
   198bc:	e166      	b.n	19b8c <_malloc_r+0x3e4>
   198be:	68e4      	ldr	r4, [r4, #12]
   198c0:	45a4      	cmp	ip, r4
   198c2:	d100      	bne.n	198c6 <_malloc_r+0x11e>
   198c4:	e150      	b.n	19b68 <_malloc_r+0x3c0>
   198c6:	4642      	mov	r2, r8
   198c8:	6863      	ldr	r3, [r4, #4]
   198ca:	4393      	bics	r3, r2
   198cc:	1b5a      	subs	r2, r3, r5
   198ce:	2a0f      	cmp	r2, #15
   198d0:	ddf2      	ble.n	198b8 <_malloc_r+0x110>
   198d2:	2001      	movs	r0, #1
   198d4:	4680      	mov	r8, r0
   198d6:	1961      	adds	r1, r4, r5
   198d8:	4305      	orrs	r5, r0
   198da:	6065      	str	r5, [r4, #4]
   198dc:	68a0      	ldr	r0, [r4, #8]
   198de:	68e5      	ldr	r5, [r4, #12]
   198e0:	3608      	adds	r6, #8
   198e2:	60c5      	str	r5, [r0, #12]
   198e4:	60a8      	str	r0, [r5, #8]
   198e6:	4640      	mov	r0, r8
   198e8:	60f1      	str	r1, [r6, #12]
   198ea:	60b1      	str	r1, [r6, #8]
   198ec:	4310      	orrs	r0, r2
   198ee:	6048      	str	r0, [r1, #4]
   198f0:	60ce      	str	r6, [r1, #12]
   198f2:	608e      	str	r6, [r1, #8]
   198f4:	0038      	movs	r0, r7
   198f6:	50e2      	str	r2, [r4, r3]
   198f8:	f000 fb2a 	bl	19f50 <__malloc_unlock>
   198fc:	0020      	movs	r0, r4
   198fe:	3008      	adds	r0, #8
   19900:	e021      	b.n	19946 <_malloc_r+0x19e>
   19902:	2910      	cmp	r1, #16
   19904:	d826      	bhi.n	19954 <_malloc_r+0x1ac>
   19906:	0038      	movs	r0, r7
   19908:	f000 fb1a 	bl	19f40 <__malloc_lock>
   1990c:	2510      	movs	r5, #16
   1990e:	2318      	movs	r3, #24
   19910:	2002      	movs	r0, #2
   19912:	4e8b      	ldr	r6, [pc, #556]	; (19b40 <_malloc_r+0x398>)
   19914:	18f3      	adds	r3, r6, r3
   19916:	001a      	movs	r2, r3
   19918:	685c      	ldr	r4, [r3, #4]
   1991a:	3a08      	subs	r2, #8
   1991c:	4294      	cmp	r4, r2
   1991e:	d100      	bne.n	19922 <_malloc_r+0x17a>
   19920:	e12e      	b.n	19b80 <_malloc_r+0x3d8>
   19922:	2303      	movs	r3, #3
   19924:	6862      	ldr	r2, [r4, #4]
   19926:	439a      	bics	r2, r3
   19928:	0013      	movs	r3, r2
   1992a:	68e2      	ldr	r2, [r4, #12]
   1992c:	68a1      	ldr	r1, [r4, #8]
   1992e:	60ca      	str	r2, [r1, #12]
   19930:	6091      	str	r1, [r2, #8]
   19932:	2201      	movs	r2, #1
   19934:	18e3      	adds	r3, r4, r3
   19936:	6859      	ldr	r1, [r3, #4]
   19938:	0038      	movs	r0, r7
   1993a:	430a      	orrs	r2, r1
   1993c:	605a      	str	r2, [r3, #4]
   1993e:	f000 fb07 	bl	19f50 <__malloc_unlock>
   19942:	0020      	movs	r0, r4
   19944:	3008      	adds	r0, #8
   19946:	b003      	add	sp, #12
   19948:	bc3c      	pop	{r2, r3, r4, r5}
   1994a:	4690      	mov	r8, r2
   1994c:	4699      	mov	r9, r3
   1994e:	46a2      	mov	sl, r4
   19950:	46ab      	mov	fp, r5
   19952:	bdf0      	pop	{r4, r5, r6, r7, pc}
   19954:	230c      	movs	r3, #12
   19956:	2000      	movs	r0, #0
   19958:	603b      	str	r3, [r7, #0]
   1995a:	e7f4      	b.n	19946 <_malloc_r+0x19e>
   1995c:	2180      	movs	r1, #128	; 0x80
   1995e:	233f      	movs	r3, #63	; 0x3f
   19960:	2040      	movs	r0, #64	; 0x40
   19962:	0089      	lsls	r1, r1, #2
   19964:	4698      	mov	r8, r3
   19966:	e746      	b.n	197f6 <_malloc_r+0x4e>
   19968:	4640      	mov	r0, r8
   1996a:	e764      	b.n	19836 <_malloc_r+0x8e>
   1996c:	464b      	mov	r3, r9
   1996e:	e7e0      	b.n	19932 <_malloc_r+0x18a>
   19970:	2303      	movs	r3, #3
   19972:	68b4      	ldr	r4, [r6, #8]
   19974:	6862      	ldr	r2, [r4, #4]
   19976:	439a      	bics	r2, r3
   19978:	4690      	mov	r8, r2
   1997a:	42aa      	cmp	r2, r5
   1997c:	d303      	bcc.n	19986 <_malloc_r+0x1de>
   1997e:	1b53      	subs	r3, r2, r5
   19980:	2b0f      	cmp	r3, #15
   19982:	dd00      	ble.n	19986 <_malloc_r+0x1de>
   19984:	e086      	b.n	19a94 <_malloc_r+0x2ec>
   19986:	0023      	movs	r3, r4
   19988:	4443      	add	r3, r8
   1998a:	4a6f      	ldr	r2, [pc, #444]	; (19b48 <_malloc_r+0x3a0>)
   1998c:	9301      	str	r3, [sp, #4]
   1998e:	4b6f      	ldr	r3, [pc, #444]	; (19b4c <_malloc_r+0x3a4>)
   19990:	4693      	mov	fp, r2
   19992:	681b      	ldr	r3, [r3, #0]
   19994:	6812      	ldr	r2, [r2, #0]
   19996:	18eb      	adds	r3, r5, r3
   19998:	3201      	adds	r2, #1
   1999a:	d100      	bne.n	1999e <_malloc_r+0x1f6>
   1999c:	e168      	b.n	19c70 <_malloc_r+0x4c8>
   1999e:	4a6c      	ldr	r2, [pc, #432]	; (19b50 <_malloc_r+0x3a8>)
   199a0:	4694      	mov	ip, r2
   199a2:	4463      	add	r3, ip
   199a4:	0b1b      	lsrs	r3, r3, #12
   199a6:	031b      	lsls	r3, r3, #12
   199a8:	9300      	str	r3, [sp, #0]
   199aa:	9900      	ldr	r1, [sp, #0]
   199ac:	0038      	movs	r0, r7
   199ae:	f000 fb67 	bl	1a080 <_sbrk_r>
   199b2:	0003      	movs	r3, r0
   199b4:	4681      	mov	r9, r0
   199b6:	3301      	adds	r3, #1
   199b8:	d061      	beq.n	19a7e <_malloc_r+0x2d6>
   199ba:	9b01      	ldr	r3, [sp, #4]
   199bc:	4283      	cmp	r3, r0
   199be:	d900      	bls.n	199c2 <_malloc_r+0x21a>
   199c0:	e0ff      	b.n	19bc2 <_malloc_r+0x41a>
   199c2:	4b64      	ldr	r3, [pc, #400]	; (19b54 <_malloc_r+0x3ac>)
   199c4:	9a00      	ldr	r2, [sp, #0]
   199c6:	469a      	mov	sl, r3
   199c8:	681b      	ldr	r3, [r3, #0]
   199ca:	469c      	mov	ip, r3
   199cc:	4653      	mov	r3, sl
   199ce:	4462      	add	r2, ip
   199d0:	601a      	str	r2, [r3, #0]
   199d2:	9b01      	ldr	r3, [sp, #4]
   199d4:	0011      	movs	r1, r2
   199d6:	4283      	cmp	r3, r0
   199d8:	d100      	bne.n	199dc <_malloc_r+0x234>
   199da:	e155      	b.n	19c88 <_malloc_r+0x4e0>
   199dc:	465b      	mov	r3, fp
   199de:	681b      	ldr	r3, [r3, #0]
   199e0:	3301      	adds	r3, #1
   199e2:	d100      	bne.n	199e6 <_malloc_r+0x23e>
   199e4:	e16c      	b.n	19cc0 <_malloc_r+0x518>
   199e6:	464b      	mov	r3, r9
   199e8:	9a01      	ldr	r2, [sp, #4]
   199ea:	1a9b      	subs	r3, r3, r2
   199ec:	1859      	adds	r1, r3, r1
   199ee:	4653      	mov	r3, sl
   199f0:	6019      	str	r1, [r3, #0]
   199f2:	2307      	movs	r3, #7
   199f4:	464a      	mov	r2, r9
   199f6:	4013      	ands	r3, r2
   199f8:	d100      	bne.n	199fc <_malloc_r+0x254>
   199fa:	e124      	b.n	19c46 <_malloc_r+0x49e>
   199fc:	2108      	movs	r1, #8
   199fe:	4689      	mov	r9, r1
   19a00:	4955      	ldr	r1, [pc, #340]	; (19b58 <_malloc_r+0x3b0>)
   19a02:	1ad2      	subs	r2, r2, r3
   19a04:	4491      	add	r9, r2
   19a06:	1acb      	subs	r3, r1, r3
   19a08:	9a00      	ldr	r2, [sp, #0]
   19a0a:	0038      	movs	r0, r7
   19a0c:	444a      	add	r2, r9
   19a0e:	0511      	lsls	r1, r2, #20
   19a10:	0d09      	lsrs	r1, r1, #20
   19a12:	1a5b      	subs	r3, r3, r1
   19a14:	0019      	movs	r1, r3
   19a16:	469b      	mov	fp, r3
   19a18:	f000 fb32 	bl	1a080 <_sbrk_r>
   19a1c:	1c43      	adds	r3, r0, #1
   19a1e:	d100      	bne.n	19a22 <_malloc_r+0x27a>
   19a20:	e142      	b.n	19ca8 <_malloc_r+0x500>
   19a22:	464b      	mov	r3, r9
   19a24:	1ac0      	subs	r0, r0, r3
   19a26:	2301      	movs	r3, #1
   19a28:	4458      	add	r0, fp
   19a2a:	4318      	orrs	r0, r3
   19a2c:	4653      	mov	r3, sl
   19a2e:	681b      	ldr	r3, [r3, #0]
   19a30:	445b      	add	r3, fp
   19a32:	0019      	movs	r1, r3
   19a34:	4653      	mov	r3, sl
   19a36:	6019      	str	r1, [r3, #0]
   19a38:	464b      	mov	r3, r9
   19a3a:	60b3      	str	r3, [r6, #8]
   19a3c:	6058      	str	r0, [r3, #4]
   19a3e:	42b4      	cmp	r4, r6
   19a40:	d013      	beq.n	19a6a <_malloc_r+0x2c2>
   19a42:	4643      	mov	r3, r8
   19a44:	2b0f      	cmp	r3, #15
   19a46:	d800      	bhi.n	19a4a <_malloc_r+0x2a2>
   19a48:	e0e8      	b.n	19c1c <_malloc_r+0x474>
   19a4a:	4643      	mov	r3, r8
   19a4c:	2207      	movs	r2, #7
   19a4e:	6860      	ldr	r0, [r4, #4]
   19a50:	3b0c      	subs	r3, #12
   19a52:	4393      	bics	r3, r2
   19a54:	3a06      	subs	r2, #6
   19a56:	4002      	ands	r2, r0
   19a58:	2005      	movs	r0, #5
   19a5a:	431a      	orrs	r2, r3
   19a5c:	6062      	str	r2, [r4, #4]
   19a5e:	18e2      	adds	r2, r4, r3
   19a60:	6050      	str	r0, [r2, #4]
   19a62:	6090      	str	r0, [r2, #8]
   19a64:	2b0f      	cmp	r3, #15
   19a66:	d900      	bls.n	19a6a <_malloc_r+0x2c2>
   19a68:	e122      	b.n	19cb0 <_malloc_r+0x508>
   19a6a:	4b3c      	ldr	r3, [pc, #240]	; (19b5c <_malloc_r+0x3b4>)
   19a6c:	681a      	ldr	r2, [r3, #0]
   19a6e:	4291      	cmp	r1, r2
   19a70:	d900      	bls.n	19a74 <_malloc_r+0x2cc>
   19a72:	6019      	str	r1, [r3, #0]
   19a74:	4b3a      	ldr	r3, [pc, #232]	; (19b60 <_malloc_r+0x3b8>)
   19a76:	681a      	ldr	r2, [r3, #0]
   19a78:	4291      	cmp	r1, r2
   19a7a:	d900      	bls.n	19a7e <_malloc_r+0x2d6>
   19a7c:	6019      	str	r1, [r3, #0]
   19a7e:	2303      	movs	r3, #3
   19a80:	68b4      	ldr	r4, [r6, #8]
   19a82:	6862      	ldr	r2, [r4, #4]
   19a84:	439a      	bics	r2, r3
   19a86:	1b53      	subs	r3, r2, r5
   19a88:	4295      	cmp	r5, r2
   19a8a:	d900      	bls.n	19a8e <_malloc_r+0x2e6>
   19a8c:	e0c9      	b.n	19c22 <_malloc_r+0x47a>
   19a8e:	2b0f      	cmp	r3, #15
   19a90:	dc00      	bgt.n	19a94 <_malloc_r+0x2ec>
   19a92:	e0c6      	b.n	19c22 <_malloc_r+0x47a>
   19a94:	2201      	movs	r2, #1
   19a96:	0029      	movs	r1, r5
   19a98:	4313      	orrs	r3, r2
   19a9a:	4311      	orrs	r1, r2
   19a9c:	1965      	adds	r5, r4, r5
   19a9e:	6061      	str	r1, [r4, #4]
   19aa0:	0038      	movs	r0, r7
   19aa2:	60b5      	str	r5, [r6, #8]
   19aa4:	606b      	str	r3, [r5, #4]
   19aa6:	f000 fa53 	bl	19f50 <__malloc_unlock>
   19aaa:	0020      	movs	r0, r4
   19aac:	3008      	adds	r0, #8
   19aae:	e74a      	b.n	19946 <_malloc_r+0x19e>
   19ab0:	2814      	cmp	r0, #20
   19ab2:	d97a      	bls.n	19baa <_malloc_r+0x402>
   19ab4:	2854      	cmp	r0, #84	; 0x54
   19ab6:	d900      	bls.n	19aba <_malloc_r+0x312>
   19ab8:	e0ba      	b.n	19c30 <_malloc_r+0x488>
   19aba:	236e      	movs	r3, #110	; 0x6e
   19abc:	4698      	mov	r8, r3
   19abe:	0b28      	lsrs	r0, r5, #12
   19ac0:	4480      	add	r8, r0
   19ac2:	306f      	adds	r0, #111	; 0x6f
   19ac4:	00c1      	lsls	r1, r0, #3
   19ac6:	e696      	b.n	197f6 <_malloc_r+0x4e>
   19ac8:	0a5a      	lsrs	r2, r3, #9
   19aca:	2a04      	cmp	r2, #4
   19acc:	d973      	bls.n	19bb6 <_malloc_r+0x40e>
   19ace:	2a14      	cmp	r2, #20
   19ad0:	d900      	bls.n	19ad4 <_malloc_r+0x32c>
   19ad2:	e0d0      	b.n	19c76 <_malloc_r+0x4ce>
   19ad4:	0011      	movs	r1, r2
   19ad6:	325c      	adds	r2, #92	; 0x5c
   19ad8:	315b      	adds	r1, #91	; 0x5b
   19ada:	00d2      	lsls	r2, r2, #3
   19adc:	2308      	movs	r3, #8
   19ade:	425b      	negs	r3, r3
   19ae0:	469c      	mov	ip, r3
   19ae2:	18b2      	adds	r2, r6, r2
   19ae4:	4494      	add	ip, r2
   19ae6:	4663      	mov	r3, ip
   19ae8:	689a      	ldr	r2, [r3, #8]
   19aea:	2303      	movs	r3, #3
   19aec:	4698      	mov	r8, r3
   19aee:	4594      	cmp	ip, r2
   19af0:	d100      	bne.n	19af4 <_malloc_r+0x34c>
   19af2:	e0ab      	b.n	19c4c <_malloc_r+0x4a4>
   19af4:	4643      	mov	r3, r8
   19af6:	6851      	ldr	r1, [r2, #4]
   19af8:	4399      	bics	r1, r3
   19afa:	4589      	cmp	r9, r1
   19afc:	d300      	bcc.n	19b00 <_malloc_r+0x358>
   19afe:	e095      	b.n	19c2c <_malloc_r+0x484>
   19b00:	6892      	ldr	r2, [r2, #8]
   19b02:	4594      	cmp	ip, r2
   19b04:	d1f6      	bne.n	19af4 <_malloc_r+0x34c>
   19b06:	4663      	mov	r3, ip
   19b08:	68da      	ldr	r2, [r3, #12]
   19b0a:	6873      	ldr	r3, [r6, #4]
   19b0c:	4661      	mov	r1, ip
   19b0e:	60e2      	str	r2, [r4, #12]
   19b10:	60a1      	str	r1, [r4, #8]
   19b12:	6094      	str	r4, [r2, #8]
   19b14:	60cc      	str	r4, [r1, #12]
   19b16:	e6b6      	b.n	19886 <_malloc_r+0xde>
   19b18:	2301      	movs	r3, #1
   19b1a:	1960      	adds	r0, r4, r5
   19b1c:	431d      	orrs	r5, r3
   19b1e:	6065      	str	r5, [r4, #4]
   19b20:	6170      	str	r0, [r6, #20]
   19b22:	6130      	str	r0, [r6, #16]
   19b24:	60c2      	str	r2, [r0, #12]
   19b26:	6082      	str	r2, [r0, #8]
   19b28:	001a      	movs	r2, r3
   19b2a:	464b      	mov	r3, r9
   19b2c:	430a      	orrs	r2, r1
   19b2e:	6042      	str	r2, [r0, #4]
   19b30:	0038      	movs	r0, r7
   19b32:	50e1      	str	r1, [r4, r3]
   19b34:	f000 fa0c 	bl	19f50 <__malloc_unlock>
   19b38:	0020      	movs	r0, r4
   19b3a:	3008      	adds	r0, #8
   19b3c:	e703      	b.n	19946 <_malloc_r+0x19e>
   19b3e:	46c0      	nop			; (mov r8, r8)
   19b40:	200005b4 	.word	0x200005b4
   19b44:	000001ff 	.word	0x000001ff
   19b48:	200009bc 	.word	0x200009bc
   19b4c:	20001168 	.word	0x20001168
   19b50:	0000100f 	.word	0x0000100f
   19b54:	20001138 	.word	0x20001138
   19b58:	00001008 	.word	0x00001008
   19b5c:	20001160 	.word	0x20001160
   19b60:	20001164 	.word	0x20001164
   19b64:	6873      	ldr	r3, [r6, #4]
   19b66:	e68e      	b.n	19886 <_malloc_r+0xde>
   19b68:	2308      	movs	r3, #8
   19b6a:	469b      	mov	fp, r3
   19b6c:	3b07      	subs	r3, #7
   19b6e:	44dc      	add	ip, fp
   19b70:	469b      	mov	fp, r3
   19b72:	44da      	add	sl, fp
   19b74:	4643      	mov	r3, r8
   19b76:	4652      	mov	r2, sl
   19b78:	4213      	tst	r3, r2
   19b7a:	d000      	beq.n	19b7e <_malloc_r+0x3d6>
   19b7c:	e697      	b.n	198ae <_malloc_r+0x106>
   19b7e:	e037      	b.n	19bf0 <_malloc_r+0x448>
   19b80:	68dc      	ldr	r4, [r3, #12]
   19b82:	3002      	adds	r0, #2
   19b84:	42a3      	cmp	r3, r4
   19b86:	d100      	bne.n	19b8a <_malloc_r+0x3e2>
   19b88:	e655      	b.n	19836 <_malloc_r+0x8e>
   19b8a:	e6ca      	b.n	19922 <_malloc_r+0x17a>
   19b8c:	2201      	movs	r2, #1
   19b8e:	18e3      	adds	r3, r4, r3
   19b90:	6859      	ldr	r1, [r3, #4]
   19b92:	0038      	movs	r0, r7
   19b94:	430a      	orrs	r2, r1
   19b96:	605a      	str	r2, [r3, #4]
   19b98:	68e3      	ldr	r3, [r4, #12]
   19b9a:	68a2      	ldr	r2, [r4, #8]
   19b9c:	60d3      	str	r3, [r2, #12]
   19b9e:	609a      	str	r2, [r3, #8]
   19ba0:	f000 f9d6 	bl	19f50 <__malloc_unlock>
   19ba4:	0020      	movs	r0, r4
   19ba6:	3008      	adds	r0, #8
   19ba8:	e6cd      	b.n	19946 <_malloc_r+0x19e>
   19baa:	235b      	movs	r3, #91	; 0x5b
   19bac:	4698      	mov	r8, r3
   19bae:	4480      	add	r8, r0
   19bb0:	305c      	adds	r0, #92	; 0x5c
   19bb2:	00c1      	lsls	r1, r0, #3
   19bb4:	e61f      	b.n	197f6 <_malloc_r+0x4e>
   19bb6:	099a      	lsrs	r2, r3, #6
   19bb8:	0011      	movs	r1, r2
   19bba:	3239      	adds	r2, #57	; 0x39
   19bbc:	3138      	adds	r1, #56	; 0x38
   19bbe:	00d2      	lsls	r2, r2, #3
   19bc0:	e78c      	b.n	19adc <_malloc_r+0x334>
   19bc2:	42b4      	cmp	r4, r6
   19bc4:	d000      	beq.n	19bc8 <_malloc_r+0x420>
   19bc6:	e75a      	b.n	19a7e <_malloc_r+0x2d6>
   19bc8:	4b4f      	ldr	r3, [pc, #316]	; (19d08 <_malloc_r+0x560>)
   19bca:	9a00      	ldr	r2, [sp, #0]
   19bcc:	469a      	mov	sl, r3
   19bce:	681b      	ldr	r3, [r3, #0]
   19bd0:	469c      	mov	ip, r3
   19bd2:	4653      	mov	r3, sl
   19bd4:	4462      	add	r2, ip
   19bd6:	0011      	movs	r1, r2
   19bd8:	601a      	str	r2, [r3, #0]
   19bda:	e6ff      	b.n	199dc <_malloc_r+0x234>
   19bdc:	2308      	movs	r3, #8
   19bde:	425b      	negs	r3, r3
   19be0:	469c      	mov	ip, r3
   19be2:	44e1      	add	r9, ip
   19be4:	464b      	mov	r3, r9
   19be6:	689b      	ldr	r3, [r3, #8]
   19be8:	3801      	subs	r0, #1
   19bea:	4599      	cmp	r9, r3
   19bec:	d000      	beq.n	19bf0 <_malloc_r+0x448>
   19bee:	e084      	b.n	19cfa <_malloc_r+0x552>
   19bf0:	4643      	mov	r3, r8
   19bf2:	4203      	tst	r3, r0
   19bf4:	d1f2      	bne.n	19bdc <_malloc_r+0x434>
   19bf6:	6873      	ldr	r3, [r6, #4]
   19bf8:	438b      	bics	r3, r1
   19bfa:	6073      	str	r3, [r6, #4]
   19bfc:	0049      	lsls	r1, r1, #1
   19bfe:	4299      	cmp	r1, r3
   19c00:	d900      	bls.n	19c04 <_malloc_r+0x45c>
   19c02:	e6b5      	b.n	19970 <_malloc_r+0x1c8>
   19c04:	2900      	cmp	r1, #0
   19c06:	d100      	bne.n	19c0a <_malloc_r+0x462>
   19c08:	e6b2      	b.n	19970 <_malloc_r+0x1c8>
   19c0a:	4650      	mov	r0, sl
   19c0c:	420b      	tst	r3, r1
   19c0e:	d000      	beq.n	19c12 <_malloc_r+0x46a>
   19c10:	e648      	b.n	198a4 <_malloc_r+0xfc>
   19c12:	0049      	lsls	r1, r1, #1
   19c14:	3004      	adds	r0, #4
   19c16:	420b      	tst	r3, r1
   19c18:	d0fb      	beq.n	19c12 <_malloc_r+0x46a>
   19c1a:	e643      	b.n	198a4 <_malloc_r+0xfc>
   19c1c:	2301      	movs	r3, #1
   19c1e:	464a      	mov	r2, r9
   19c20:	6053      	str	r3, [r2, #4]
   19c22:	0038      	movs	r0, r7
   19c24:	f000 f994 	bl	19f50 <__malloc_unlock>
   19c28:	2000      	movs	r0, #0
   19c2a:	e68c      	b.n	19946 <_malloc_r+0x19e>
   19c2c:	4694      	mov	ip, r2
   19c2e:	e76a      	b.n	19b06 <_malloc_r+0x35e>
   19c30:	23aa      	movs	r3, #170	; 0xaa
   19c32:	005b      	lsls	r3, r3, #1
   19c34:	4298      	cmp	r0, r3
   19c36:	d811      	bhi.n	19c5c <_malloc_r+0x4b4>
   19c38:	3bdd      	subs	r3, #221	; 0xdd
   19c3a:	4698      	mov	r8, r3
   19c3c:	0be8      	lsrs	r0, r5, #15
   19c3e:	4480      	add	r8, r0
   19c40:	3078      	adds	r0, #120	; 0x78
   19c42:	00c1      	lsls	r1, r0, #3
   19c44:	e5d7      	b.n	197f6 <_malloc_r+0x4e>
   19c46:	2380      	movs	r3, #128	; 0x80
   19c48:	015b      	lsls	r3, r3, #5
   19c4a:	e6dd      	b.n	19a08 <_malloc_r+0x260>
   19c4c:	1089      	asrs	r1, r1, #2
   19c4e:	3b02      	subs	r3, #2
   19c50:	408b      	lsls	r3, r1
   19c52:	6872      	ldr	r2, [r6, #4]
   19c54:	4313      	orrs	r3, r2
   19c56:	6073      	str	r3, [r6, #4]
   19c58:	4662      	mov	r2, ip
   19c5a:	e757      	b.n	19b0c <_malloc_r+0x364>
   19c5c:	4b2b      	ldr	r3, [pc, #172]	; (19d0c <_malloc_r+0x564>)
   19c5e:	4298      	cmp	r0, r3
   19c60:	d81c      	bhi.n	19c9c <_malloc_r+0x4f4>
   19c62:	237c      	movs	r3, #124	; 0x7c
   19c64:	4698      	mov	r8, r3
   19c66:	0ca8      	lsrs	r0, r5, #18
   19c68:	4480      	add	r8, r0
   19c6a:	307d      	adds	r0, #125	; 0x7d
   19c6c:	00c1      	lsls	r1, r0, #3
   19c6e:	e5c2      	b.n	197f6 <_malloc_r+0x4e>
   19c70:	3310      	adds	r3, #16
   19c72:	9300      	str	r3, [sp, #0]
   19c74:	e699      	b.n	199aa <_malloc_r+0x202>
   19c76:	2a54      	cmp	r2, #84	; 0x54
   19c78:	d826      	bhi.n	19cc8 <_malloc_r+0x520>
   19c7a:	464b      	mov	r3, r9
   19c7c:	0b1a      	lsrs	r2, r3, #12
   19c7e:	0011      	movs	r1, r2
   19c80:	326f      	adds	r2, #111	; 0x6f
   19c82:	316e      	adds	r1, #110	; 0x6e
   19c84:	00d2      	lsls	r2, r2, #3
   19c86:	e729      	b.n	19adc <_malloc_r+0x334>
   19c88:	051b      	lsls	r3, r3, #20
   19c8a:	d000      	beq.n	19c8e <_malloc_r+0x4e6>
   19c8c:	e6a6      	b.n	199dc <_malloc_r+0x234>
   19c8e:	2001      	movs	r0, #1
   19c90:	9b00      	ldr	r3, [sp, #0]
   19c92:	68b2      	ldr	r2, [r6, #8]
   19c94:	4443      	add	r3, r8
   19c96:	4303      	orrs	r3, r0
   19c98:	6053      	str	r3, [r2, #4]
   19c9a:	e6e6      	b.n	19a6a <_malloc_r+0x2c2>
   19c9c:	21fe      	movs	r1, #254	; 0xfe
   19c9e:	237e      	movs	r3, #126	; 0x7e
   19ca0:	207f      	movs	r0, #127	; 0x7f
   19ca2:	0089      	lsls	r1, r1, #2
   19ca4:	4698      	mov	r8, r3
   19ca6:	e5a6      	b.n	197f6 <_malloc_r+0x4e>
   19ca8:	2300      	movs	r3, #0
   19caa:	2001      	movs	r0, #1
   19cac:	469b      	mov	fp, r3
   19cae:	e6bd      	b.n	19a2c <_malloc_r+0x284>
   19cb0:	0021      	movs	r1, r4
   19cb2:	0038      	movs	r0, r7
   19cb4:	3108      	adds	r1, #8
   19cb6:	f003 fb4f 	bl	1d358 <_free_r>
   19cba:	4653      	mov	r3, sl
   19cbc:	6819      	ldr	r1, [r3, #0]
   19cbe:	e6d4      	b.n	19a6a <_malloc_r+0x2c2>
   19cc0:	465b      	mov	r3, fp
   19cc2:	464a      	mov	r2, r9
   19cc4:	601a      	str	r2, [r3, #0]
   19cc6:	e694      	b.n	199f2 <_malloc_r+0x24a>
   19cc8:	21aa      	movs	r1, #170	; 0xaa
   19cca:	0049      	lsls	r1, r1, #1
   19ccc:	428a      	cmp	r2, r1
   19cce:	d806      	bhi.n	19cde <_malloc_r+0x536>
   19cd0:	464b      	mov	r3, r9
   19cd2:	0bda      	lsrs	r2, r3, #15
   19cd4:	0011      	movs	r1, r2
   19cd6:	3278      	adds	r2, #120	; 0x78
   19cd8:	3177      	adds	r1, #119	; 0x77
   19cda:	00d2      	lsls	r2, r2, #3
   19cdc:	e6fe      	b.n	19adc <_malloc_r+0x334>
   19cde:	490b      	ldr	r1, [pc, #44]	; (19d0c <_malloc_r+0x564>)
   19ce0:	428a      	cmp	r2, r1
   19ce2:	d806      	bhi.n	19cf2 <_malloc_r+0x54a>
   19ce4:	464b      	mov	r3, r9
   19ce6:	0c9a      	lsrs	r2, r3, #18
   19ce8:	0011      	movs	r1, r2
   19cea:	327d      	adds	r2, #125	; 0x7d
   19cec:	317c      	adds	r1, #124	; 0x7c
   19cee:	00d2      	lsls	r2, r2, #3
   19cf0:	e6f4      	b.n	19adc <_malloc_r+0x334>
   19cf2:	22fe      	movs	r2, #254	; 0xfe
   19cf4:	217e      	movs	r1, #126	; 0x7e
   19cf6:	0092      	lsls	r2, r2, #2
   19cf8:	e6f0      	b.n	19adc <_malloc_r+0x334>
   19cfa:	6873      	ldr	r3, [r6, #4]
   19cfc:	e77e      	b.n	19bfc <_malloc_r+0x454>
   19cfe:	002b      	movs	r3, r5
   19d00:	08e8      	lsrs	r0, r5, #3
   19d02:	3308      	adds	r3, #8
   19d04:	e605      	b.n	19912 <_malloc_r+0x16a>
   19d06:	46c0      	nop			; (mov r8, r8)
   19d08:	20001138 	.word	0x20001138
   19d0c:	00000554 	.word	0x00000554

00019d10 <__ascii_mbtowc>:
   19d10:	b082      	sub	sp, #8
   19d12:	2900      	cmp	r1, #0
   19d14:	d00a      	beq.n	19d2c <__ascii_mbtowc+0x1c>
   19d16:	2a00      	cmp	r2, #0
   19d18:	d00b      	beq.n	19d32 <__ascii_mbtowc+0x22>
   19d1a:	2b00      	cmp	r3, #0
   19d1c:	d00b      	beq.n	19d36 <__ascii_mbtowc+0x26>
   19d1e:	7813      	ldrb	r3, [r2, #0]
   19d20:	600b      	str	r3, [r1, #0]
   19d22:	7810      	ldrb	r0, [r2, #0]
   19d24:	1e43      	subs	r3, r0, #1
   19d26:	4198      	sbcs	r0, r3
   19d28:	b002      	add	sp, #8
   19d2a:	4770      	bx	lr
   19d2c:	a901      	add	r1, sp, #4
   19d2e:	2a00      	cmp	r2, #0
   19d30:	d1f3      	bne.n	19d1a <__ascii_mbtowc+0xa>
   19d32:	2000      	movs	r0, #0
   19d34:	e7f8      	b.n	19d28 <__ascii_mbtowc+0x18>
   19d36:	2002      	movs	r0, #2
   19d38:	4240      	negs	r0, r0
   19d3a:	e7f5      	b.n	19d28 <__ascii_mbtowc+0x18>

00019d3c <memcmp>:
   19d3c:	b510      	push	{r4, lr}
   19d3e:	2a03      	cmp	r2, #3
   19d40:	d91c      	bls.n	19d7c <memcmp+0x40>
   19d42:	0003      	movs	r3, r0
   19d44:	430b      	orrs	r3, r1
   19d46:	079b      	lsls	r3, r3, #30
   19d48:	d00f      	beq.n	19d6a <memcmp+0x2e>
   19d4a:	7803      	ldrb	r3, [r0, #0]
   19d4c:	780c      	ldrb	r4, [r1, #0]
   19d4e:	1882      	adds	r2, r0, r2
   19d50:	42a3      	cmp	r3, r4
   19d52:	d004      	beq.n	19d5e <memcmp+0x22>
   19d54:	e015      	b.n	19d82 <memcmp+0x46>
   19d56:	7803      	ldrb	r3, [r0, #0]
   19d58:	780c      	ldrb	r4, [r1, #0]
   19d5a:	42a3      	cmp	r3, r4
   19d5c:	d111      	bne.n	19d82 <memcmp+0x46>
   19d5e:	3001      	adds	r0, #1
   19d60:	3101      	adds	r1, #1
   19d62:	4282      	cmp	r2, r0
   19d64:	d1f7      	bne.n	19d56 <memcmp+0x1a>
   19d66:	2000      	movs	r0, #0
   19d68:	bd10      	pop	{r4, pc}
   19d6a:	6803      	ldr	r3, [r0, #0]
   19d6c:	680c      	ldr	r4, [r1, #0]
   19d6e:	42a3      	cmp	r3, r4
   19d70:	d1eb      	bne.n	19d4a <memcmp+0xe>
   19d72:	3a04      	subs	r2, #4
   19d74:	3004      	adds	r0, #4
   19d76:	3104      	adds	r1, #4
   19d78:	2a03      	cmp	r2, #3
   19d7a:	d8f6      	bhi.n	19d6a <memcmp+0x2e>
   19d7c:	2a00      	cmp	r2, #0
   19d7e:	d1e4      	bne.n	19d4a <memcmp+0xe>
   19d80:	e7f1      	b.n	19d66 <memcmp+0x2a>
   19d82:	1b18      	subs	r0, r3, r4
   19d84:	e7f0      	b.n	19d68 <memcmp+0x2c>
   19d86:	46c0      	nop			; (mov r8, r8)

00019d88 <memcpy>:
   19d88:	b5f0      	push	{r4, r5, r6, r7, lr}
   19d8a:	0005      	movs	r5, r0
   19d8c:	2a0f      	cmp	r2, #15
   19d8e:	d92f      	bls.n	19df0 <memcpy+0x68>
   19d90:	000b      	movs	r3, r1
   19d92:	4303      	orrs	r3, r0
   19d94:	079b      	lsls	r3, r3, #30
   19d96:	d134      	bne.n	19e02 <memcpy+0x7a>
   19d98:	0016      	movs	r6, r2
   19d9a:	000c      	movs	r4, r1
   19d9c:	0003      	movs	r3, r0
   19d9e:	3e10      	subs	r6, #16
   19da0:	0935      	lsrs	r5, r6, #4
   19da2:	3501      	adds	r5, #1
   19da4:	012d      	lsls	r5, r5, #4
   19da6:	1945      	adds	r5, r0, r5
   19da8:	6827      	ldr	r7, [r4, #0]
   19daa:	601f      	str	r7, [r3, #0]
   19dac:	6867      	ldr	r7, [r4, #4]
   19dae:	605f      	str	r7, [r3, #4]
   19db0:	68a7      	ldr	r7, [r4, #8]
   19db2:	609f      	str	r7, [r3, #8]
   19db4:	68e7      	ldr	r7, [r4, #12]
   19db6:	3410      	adds	r4, #16
   19db8:	60df      	str	r7, [r3, #12]
   19dba:	3310      	adds	r3, #16
   19dbc:	429d      	cmp	r5, r3
   19dbe:	d1f3      	bne.n	19da8 <memcpy+0x20>
   19dc0:	230f      	movs	r3, #15
   19dc2:	439e      	bics	r6, r3
   19dc4:	3610      	adds	r6, #16
   19dc6:	1985      	adds	r5, r0, r6
   19dc8:	1989      	adds	r1, r1, r6
   19dca:	4013      	ands	r3, r2
   19dcc:	2b03      	cmp	r3, #3
   19dce:	d91a      	bls.n	19e06 <memcpy+0x7e>
   19dd0:	1f1e      	subs	r6, r3, #4
   19dd2:	2300      	movs	r3, #0
   19dd4:	08b4      	lsrs	r4, r6, #2
   19dd6:	3401      	adds	r4, #1
   19dd8:	00a4      	lsls	r4, r4, #2
   19dda:	58cf      	ldr	r7, [r1, r3]
   19ddc:	50ef      	str	r7, [r5, r3]
   19dde:	3304      	adds	r3, #4
   19de0:	42a3      	cmp	r3, r4
   19de2:	d1fa      	bne.n	19dda <memcpy+0x52>
   19de4:	2403      	movs	r4, #3
   19de6:	43a6      	bics	r6, r4
   19de8:	1d33      	adds	r3, r6, #4
   19dea:	4022      	ands	r2, r4
   19dec:	18c9      	adds	r1, r1, r3
   19dee:	18ed      	adds	r5, r5, r3
   19df0:	2a00      	cmp	r2, #0
   19df2:	d005      	beq.n	19e00 <memcpy+0x78>
   19df4:	2300      	movs	r3, #0
   19df6:	5ccc      	ldrb	r4, [r1, r3]
   19df8:	54ec      	strb	r4, [r5, r3]
   19dfa:	3301      	adds	r3, #1
   19dfc:	4293      	cmp	r3, r2
   19dfe:	d1fa      	bne.n	19df6 <memcpy+0x6e>
   19e00:	bdf0      	pop	{r4, r5, r6, r7, pc}
   19e02:	0005      	movs	r5, r0
   19e04:	e7f6      	b.n	19df4 <memcpy+0x6c>
   19e06:	001a      	movs	r2, r3
   19e08:	e7f2      	b.n	19df0 <memcpy+0x68>
   19e0a:	46c0      	nop			; (mov r8, r8)

00019e0c <memmove>:
   19e0c:	b5f0      	push	{r4, r5, r6, r7, lr}
   19e0e:	4288      	cmp	r0, r1
   19e10:	d90a      	bls.n	19e28 <memmove+0x1c>
   19e12:	188b      	adds	r3, r1, r2
   19e14:	4298      	cmp	r0, r3
   19e16:	d207      	bcs.n	19e28 <memmove+0x1c>
   19e18:	1e53      	subs	r3, r2, #1
   19e1a:	2a00      	cmp	r2, #0
   19e1c:	d003      	beq.n	19e26 <memmove+0x1a>
   19e1e:	5cca      	ldrb	r2, [r1, r3]
   19e20:	54c2      	strb	r2, [r0, r3]
   19e22:	3b01      	subs	r3, #1
   19e24:	d2fb      	bcs.n	19e1e <memmove+0x12>
   19e26:	bdf0      	pop	{r4, r5, r6, r7, pc}
   19e28:	0005      	movs	r5, r0
   19e2a:	2a0f      	cmp	r2, #15
   19e2c:	d808      	bhi.n	19e40 <memmove+0x34>
   19e2e:	2a00      	cmp	r2, #0
   19e30:	d0f9      	beq.n	19e26 <memmove+0x1a>
   19e32:	2300      	movs	r3, #0
   19e34:	5ccc      	ldrb	r4, [r1, r3]
   19e36:	54ec      	strb	r4, [r5, r3]
   19e38:	3301      	adds	r3, #1
   19e3a:	4293      	cmp	r3, r2
   19e3c:	d1fa      	bne.n	19e34 <memmove+0x28>
   19e3e:	e7f2      	b.n	19e26 <memmove+0x1a>
   19e40:	000b      	movs	r3, r1
   19e42:	4303      	orrs	r3, r0
   19e44:	079b      	lsls	r3, r3, #30
   19e46:	d12d      	bne.n	19ea4 <memmove+0x98>
   19e48:	0015      	movs	r5, r2
   19e4a:	000c      	movs	r4, r1
   19e4c:	0003      	movs	r3, r0
   19e4e:	3d10      	subs	r5, #16
   19e50:	092f      	lsrs	r7, r5, #4
   19e52:	3701      	adds	r7, #1
   19e54:	013f      	lsls	r7, r7, #4
   19e56:	19c7      	adds	r7, r0, r7
   19e58:	6826      	ldr	r6, [r4, #0]
   19e5a:	601e      	str	r6, [r3, #0]
   19e5c:	6866      	ldr	r6, [r4, #4]
   19e5e:	605e      	str	r6, [r3, #4]
   19e60:	68a6      	ldr	r6, [r4, #8]
   19e62:	609e      	str	r6, [r3, #8]
   19e64:	68e6      	ldr	r6, [r4, #12]
   19e66:	3410      	adds	r4, #16
   19e68:	60de      	str	r6, [r3, #12]
   19e6a:	3310      	adds	r3, #16
   19e6c:	429f      	cmp	r7, r3
   19e6e:	d1f3      	bne.n	19e58 <memmove+0x4c>
   19e70:	240f      	movs	r4, #15
   19e72:	43a5      	bics	r5, r4
   19e74:	3510      	adds	r5, #16
   19e76:	1949      	adds	r1, r1, r5
   19e78:	4014      	ands	r4, r2
   19e7a:	1945      	adds	r5, r0, r5
   19e7c:	2c03      	cmp	r4, #3
   19e7e:	d913      	bls.n	19ea8 <memmove+0x9c>
   19e80:	2300      	movs	r3, #0
   19e82:	1f27      	subs	r7, r4, #4
   19e84:	08be      	lsrs	r6, r7, #2
   19e86:	3601      	adds	r6, #1
   19e88:	00b6      	lsls	r6, r6, #2
   19e8a:	58cc      	ldr	r4, [r1, r3]
   19e8c:	50ec      	str	r4, [r5, r3]
   19e8e:	3304      	adds	r3, #4
   19e90:	42b3      	cmp	r3, r6
   19e92:	d1fa      	bne.n	19e8a <memmove+0x7e>
   19e94:	2603      	movs	r6, #3
   19e96:	43b7      	bics	r7, r6
   19e98:	1d3c      	adds	r4, r7, #4
   19e9a:	1909      	adds	r1, r1, r4
   19e9c:	192d      	adds	r5, r5, r4
   19e9e:	4032      	ands	r2, r6
   19ea0:	d1c7      	bne.n	19e32 <memmove+0x26>
   19ea2:	e7c0      	b.n	19e26 <memmove+0x1a>
   19ea4:	0005      	movs	r5, r0
   19ea6:	e7c4      	b.n	19e32 <memmove+0x26>
   19ea8:	0022      	movs	r2, r4
   19eaa:	e7c0      	b.n	19e2e <memmove+0x22>

00019eac <memset>:
   19eac:	b5f0      	push	{r4, r5, r6, r7, lr}
   19eae:	0783      	lsls	r3, r0, #30
   19eb0:	d043      	beq.n	19f3a <memset+0x8e>
   19eb2:	1e54      	subs	r4, r2, #1
   19eb4:	2a00      	cmp	r2, #0
   19eb6:	d03f      	beq.n	19f38 <memset+0x8c>
   19eb8:	b2ce      	uxtb	r6, r1
   19eba:	0002      	movs	r2, r0
   19ebc:	2503      	movs	r5, #3
   19ebe:	e002      	b.n	19ec6 <memset+0x1a>
   19ec0:	001a      	movs	r2, r3
   19ec2:	3c01      	subs	r4, #1
   19ec4:	d338      	bcc.n	19f38 <memset+0x8c>
   19ec6:	1c53      	adds	r3, r2, #1
   19ec8:	7016      	strb	r6, [r2, #0]
   19eca:	422b      	tst	r3, r5
   19ecc:	d1f8      	bne.n	19ec0 <memset+0x14>
   19ece:	2c03      	cmp	r4, #3
   19ed0:	d92a      	bls.n	19f28 <memset+0x7c>
   19ed2:	22ff      	movs	r2, #255	; 0xff
   19ed4:	400a      	ands	r2, r1
   19ed6:	0215      	lsls	r5, r2, #8
   19ed8:	4315      	orrs	r5, r2
   19eda:	042a      	lsls	r2, r5, #16
   19edc:	4315      	orrs	r5, r2
   19ede:	2c0f      	cmp	r4, #15
   19ee0:	d914      	bls.n	19f0c <memset+0x60>
   19ee2:	0027      	movs	r7, r4
   19ee4:	001a      	movs	r2, r3
   19ee6:	3f10      	subs	r7, #16
   19ee8:	093e      	lsrs	r6, r7, #4
   19eea:	3601      	adds	r6, #1
   19eec:	0136      	lsls	r6, r6, #4
   19eee:	199e      	adds	r6, r3, r6
   19ef0:	6015      	str	r5, [r2, #0]
   19ef2:	6055      	str	r5, [r2, #4]
   19ef4:	6095      	str	r5, [r2, #8]
   19ef6:	60d5      	str	r5, [r2, #12]
   19ef8:	3210      	adds	r2, #16
   19efa:	4296      	cmp	r6, r2
   19efc:	d1f8      	bne.n	19ef0 <memset+0x44>
   19efe:	220f      	movs	r2, #15
   19f00:	4397      	bics	r7, r2
   19f02:	3710      	adds	r7, #16
   19f04:	19db      	adds	r3, r3, r7
   19f06:	4014      	ands	r4, r2
   19f08:	2c03      	cmp	r4, #3
   19f0a:	d90d      	bls.n	19f28 <memset+0x7c>
   19f0c:	001a      	movs	r2, r3
   19f0e:	1f27      	subs	r7, r4, #4
   19f10:	08be      	lsrs	r6, r7, #2
   19f12:	3601      	adds	r6, #1
   19f14:	00b6      	lsls	r6, r6, #2
   19f16:	199e      	adds	r6, r3, r6
   19f18:	c220      	stmia	r2!, {r5}
   19f1a:	42b2      	cmp	r2, r6
   19f1c:	d1fc      	bne.n	19f18 <memset+0x6c>
   19f1e:	2203      	movs	r2, #3
   19f20:	4397      	bics	r7, r2
   19f22:	3704      	adds	r7, #4
   19f24:	19db      	adds	r3, r3, r7
   19f26:	4014      	ands	r4, r2
   19f28:	2c00      	cmp	r4, #0
   19f2a:	d005      	beq.n	19f38 <memset+0x8c>
   19f2c:	b2c9      	uxtb	r1, r1
   19f2e:	191c      	adds	r4, r3, r4
   19f30:	7019      	strb	r1, [r3, #0]
   19f32:	3301      	adds	r3, #1
   19f34:	429c      	cmp	r4, r3
   19f36:	d1fb      	bne.n	19f30 <memset+0x84>
   19f38:	bdf0      	pop	{r4, r5, r6, r7, pc}
   19f3a:	0014      	movs	r4, r2
   19f3c:	0003      	movs	r3, r0
   19f3e:	e7c6      	b.n	19ece <memset+0x22>

00019f40 <__malloc_lock>:
   19f40:	b510      	push	{r4, lr}
   19f42:	4802      	ldr	r0, [pc, #8]	; (19f4c <__malloc_lock+0xc>)
   19f44:	f003 fca0 	bl	1d888 <__retarget_lock_acquire_recursive>
   19f48:	bd10      	pop	{r4, pc}
   19f4a:	46c0      	nop			; (mov r8, r8)
   19f4c:	20002fd0 	.word	0x20002fd0

00019f50 <__malloc_unlock>:
   19f50:	b510      	push	{r4, lr}
   19f52:	4802      	ldr	r0, [pc, #8]	; (19f5c <__malloc_unlock+0xc>)
   19f54:	f003 fc9a 	bl	1d88c <__retarget_lock_release_recursive>
   19f58:	bd10      	pop	{r4, pc}
   19f5a:	46c0      	nop			; (mov r8, r8)
   19f5c:	20002fd0 	.word	0x20002fd0

00019f60 <printf>:
   19f60:	b40f      	push	{r0, r1, r2, r3}
   19f62:	b500      	push	{lr}
   19f64:	4906      	ldr	r1, [pc, #24]	; (19f80 <printf+0x20>)
   19f66:	b083      	sub	sp, #12
   19f68:	ab04      	add	r3, sp, #16
   19f6a:	6808      	ldr	r0, [r1, #0]
   19f6c:	cb04      	ldmia	r3!, {r2}
   19f6e:	6881      	ldr	r1, [r0, #8]
   19f70:	9301      	str	r3, [sp, #4]
   19f72:	f000 fb9b 	bl	1a6ac <_vfprintf_r>
   19f76:	b003      	add	sp, #12
   19f78:	bc08      	pop	{r3}
   19f7a:	b004      	add	sp, #16
   19f7c:	4718      	bx	r3
   19f7e:	46c0      	nop			; (mov r8, r8)
   19f80:	20000018 	.word	0x20000018

00019f84 <_puts_r>:
   19f84:	b530      	push	{r4, r5, lr}
   19f86:	0004      	movs	r4, r0
   19f88:	b089      	sub	sp, #36	; 0x24
   19f8a:	0008      	movs	r0, r1
   19f8c:	000d      	movs	r5, r1
   19f8e:	f000 f9a7 	bl	1a2e0 <strlen>
   19f92:	ab04      	add	r3, sp, #16
   19f94:	4a21      	ldr	r2, [pc, #132]	; (1a01c <_puts_r+0x98>)
   19f96:	9301      	str	r3, [sp, #4]
   19f98:	2302      	movs	r3, #2
   19f9a:	9206      	str	r2, [sp, #24]
   19f9c:	2201      	movs	r2, #1
   19f9e:	9302      	str	r3, [sp, #8]
   19fa0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   19fa2:	9005      	str	r0, [sp, #20]
   19fa4:	3001      	adds	r0, #1
   19fa6:	9504      	str	r5, [sp, #16]
   19fa8:	9207      	str	r2, [sp, #28]
   19faa:	9003      	str	r0, [sp, #12]
   19fac:	68a5      	ldr	r5, [r4, #8]
   19fae:	2b00      	cmp	r3, #0
   19fb0:	d02f      	beq.n	1a012 <_puts_r+0x8e>
   19fb2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   19fb4:	07db      	lsls	r3, r3, #31
   19fb6:	d424      	bmi.n	1a002 <_puts_r+0x7e>
   19fb8:	230c      	movs	r3, #12
   19fba:	5eea      	ldrsh	r2, [r5, r3]
   19fbc:	b291      	uxth	r1, r2
   19fbe:	058b      	lsls	r3, r1, #22
   19fc0:	d51c      	bpl.n	19ffc <_puts_r+0x78>
   19fc2:	2380      	movs	r3, #128	; 0x80
   19fc4:	019b      	lsls	r3, r3, #6
   19fc6:	4219      	tst	r1, r3
   19fc8:	d105      	bne.n	19fd6 <_puts_r+0x52>
   19fca:	4313      	orrs	r3, r2
   19fcc:	81ab      	strh	r3, [r5, #12]
   19fce:	6e6a      	ldr	r2, [r5, #100]	; 0x64
   19fd0:	4b13      	ldr	r3, [pc, #76]	; (1a020 <_puts_r+0x9c>)
   19fd2:	4013      	ands	r3, r2
   19fd4:	666b      	str	r3, [r5, #100]	; 0x64
   19fd6:	0020      	movs	r0, r4
   19fd8:	aa01      	add	r2, sp, #4
   19fda:	0029      	movs	r1, r5
   19fdc:	f003 fa9a 	bl	1d514 <__sfvwrite_r>
   19fe0:	1e44      	subs	r4, r0, #1
   19fe2:	41a0      	sbcs	r0, r4
   19fe4:	4244      	negs	r4, r0
   19fe6:	200a      	movs	r0, #10
   19fe8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   19fea:	4304      	orrs	r4, r0
   19fec:	07db      	lsls	r3, r3, #31
   19fee:	d402      	bmi.n	19ff6 <_puts_r+0x72>
   19ff0:	89ab      	ldrh	r3, [r5, #12]
   19ff2:	059b      	lsls	r3, r3, #22
   19ff4:	d509      	bpl.n	1a00a <_puts_r+0x86>
   19ff6:	0020      	movs	r0, r4
   19ff8:	b009      	add	sp, #36	; 0x24
   19ffa:	bd30      	pop	{r4, r5, pc}
   19ffc:	6da8      	ldr	r0, [r5, #88]	; 0x58
   19ffe:	f003 fc43 	bl	1d888 <__retarget_lock_acquire_recursive>
   1a002:	230c      	movs	r3, #12
   1a004:	5eea      	ldrsh	r2, [r5, r3]
   1a006:	b291      	uxth	r1, r2
   1a008:	e7db      	b.n	19fc2 <_puts_r+0x3e>
   1a00a:	6da8      	ldr	r0, [r5, #88]	; 0x58
   1a00c:	f003 fc3e 	bl	1d88c <__retarget_lock_release_recursive>
   1a010:	e7f1      	b.n	19ff6 <_puts_r+0x72>
   1a012:	0020      	movs	r0, r4
   1a014:	f003 f8f6 	bl	1d204 <__sinit>
   1a018:	e7cb      	b.n	19fb2 <_puts_r+0x2e>
   1a01a:	46c0      	nop			; (mov r8, r8)
   1a01c:	00020570 	.word	0x00020570
   1a020:	ffffdfff 	.word	0xffffdfff

0001a024 <puts>:
   1a024:	b510      	push	{r4, lr}
   1a026:	4b03      	ldr	r3, [pc, #12]	; (1a034 <puts+0x10>)
   1a028:	0001      	movs	r1, r0
   1a02a:	6818      	ldr	r0, [r3, #0]
   1a02c:	f7ff ffaa 	bl	19f84 <_puts_r>
   1a030:	bd10      	pop	{r4, pc}
   1a032:	46c0      	nop			; (mov r8, r8)
   1a034:	20000018 	.word	0x20000018

0001a038 <srand>:
   1a038:	2200      	movs	r2, #0
   1a03a:	4b03      	ldr	r3, [pc, #12]	; (1a048 <srand+0x10>)
   1a03c:	681b      	ldr	r3, [r3, #0]
   1a03e:	33a8      	adds	r3, #168	; 0xa8
   1a040:	6018      	str	r0, [r3, #0]
   1a042:	605a      	str	r2, [r3, #4]
   1a044:	4770      	bx	lr
   1a046:	46c0      	nop			; (mov r8, r8)
   1a048:	20000018 	.word	0x20000018

0001a04c <rand>:
   1a04c:	b510      	push	{r4, lr}
   1a04e:	4b09      	ldr	r3, [pc, #36]	; (1a074 <rand+0x28>)
   1a050:	4a09      	ldr	r2, [pc, #36]	; (1a078 <rand+0x2c>)
   1a052:	681c      	ldr	r4, [r3, #0]
   1a054:	4b09      	ldr	r3, [pc, #36]	; (1a07c <rand+0x30>)
   1a056:	34a8      	adds	r4, #168	; 0xa8
   1a058:	6820      	ldr	r0, [r4, #0]
   1a05a:	6861      	ldr	r1, [r4, #4]
   1a05c:	f7fc fcf0 	bl	16a40 <__aeabi_lmul>
   1a060:	2201      	movs	r2, #1
   1a062:	2300      	movs	r3, #0
   1a064:	1880      	adds	r0, r0, r2
   1a066:	4159      	adcs	r1, r3
   1a068:	6020      	str	r0, [r4, #0]
   1a06a:	6061      	str	r1, [r4, #4]
   1a06c:	0048      	lsls	r0, r1, #1
   1a06e:	0840      	lsrs	r0, r0, #1
   1a070:	bd10      	pop	{r4, pc}
   1a072:	46c0      	nop			; (mov r8, r8)
   1a074:	20000018 	.word	0x20000018
   1a078:	4c957f2d 	.word	0x4c957f2d
   1a07c:	5851f42d 	.word	0x5851f42d

0001a080 <_sbrk_r>:
   1a080:	2300      	movs	r3, #0
   1a082:	b570      	push	{r4, r5, r6, lr}
   1a084:	4c06      	ldr	r4, [pc, #24]	; (1a0a0 <_sbrk_r+0x20>)
   1a086:	0005      	movs	r5, r0
   1a088:	0008      	movs	r0, r1
   1a08a:	6023      	str	r3, [r4, #0]
   1a08c:	f7ed fcd8 	bl	7a40 <_sbrk>
   1a090:	1c43      	adds	r3, r0, #1
   1a092:	d000      	beq.n	1a096 <_sbrk_r+0x16>
   1a094:	bd70      	pop	{r4, r5, r6, pc}
   1a096:	6823      	ldr	r3, [r4, #0]
   1a098:	2b00      	cmp	r3, #0
   1a09a:	d0fb      	beq.n	1a094 <_sbrk_r+0x14>
   1a09c:	602b      	str	r3, [r5, #0]
   1a09e:	e7f9      	b.n	1a094 <_sbrk_r+0x14>
   1a0a0:	20002fe4 	.word	0x20002fe4

0001a0a4 <setbuf>:
   1a0a4:	424a      	negs	r2, r1
   1a0a6:	414a      	adcs	r2, r1
   1a0a8:	2380      	movs	r3, #128	; 0x80
   1a0aa:	b510      	push	{r4, lr}
   1a0ac:	0052      	lsls	r2, r2, #1
   1a0ae:	00db      	lsls	r3, r3, #3
   1a0b0:	f000 f802 	bl	1a0b8 <setvbuf>
   1a0b4:	bd10      	pop	{r4, pc}
   1a0b6:	46c0      	nop			; (mov r8, r8)

0001a0b8 <setvbuf>:
   1a0b8:	b5f0      	push	{r4, r5, r6, r7, lr}
   1a0ba:	4647      	mov	r7, r8
   1a0bc:	46ce      	mov	lr, r9
   1a0be:	b580      	push	{r7, lr}
   1a0c0:	001f      	movs	r7, r3
   1a0c2:	4b63      	ldr	r3, [pc, #396]	; (1a250 <setvbuf+0x198>)
   1a0c4:	b083      	sub	sp, #12
   1a0c6:	681d      	ldr	r5, [r3, #0]
   1a0c8:	0004      	movs	r4, r0
   1a0ca:	4688      	mov	r8, r1
   1a0cc:	0016      	movs	r6, r2
   1a0ce:	2d00      	cmp	r5, #0
   1a0d0:	d002      	beq.n	1a0d8 <setvbuf+0x20>
   1a0d2:	6bab      	ldr	r3, [r5, #56]	; 0x38
   1a0d4:	2b00      	cmp	r3, #0
   1a0d6:	d066      	beq.n	1a1a6 <setvbuf+0xee>
   1a0d8:	2e02      	cmp	r6, #2
   1a0da:	d005      	beq.n	1a0e8 <setvbuf+0x30>
   1a0dc:	2e01      	cmp	r6, #1
   1a0de:	d900      	bls.n	1a0e2 <setvbuf+0x2a>
   1a0e0:	e0a1      	b.n	1a226 <setvbuf+0x16e>
   1a0e2:	2f00      	cmp	r7, #0
   1a0e4:	da00      	bge.n	1a0e8 <setvbuf+0x30>
   1a0e6:	e09e      	b.n	1a226 <setvbuf+0x16e>
   1a0e8:	6e63      	ldr	r3, [r4, #100]	; 0x64
   1a0ea:	07db      	lsls	r3, r3, #31
   1a0ec:	d533      	bpl.n	1a156 <setvbuf+0x9e>
   1a0ee:	0021      	movs	r1, r4
   1a0f0:	0028      	movs	r0, r5
   1a0f2:	f003 f82d 	bl	1d150 <_fflush_r>
   1a0f6:	6b21      	ldr	r1, [r4, #48]	; 0x30
   1a0f8:	2900      	cmp	r1, #0
   1a0fa:	d008      	beq.n	1a10e <setvbuf+0x56>
   1a0fc:	0023      	movs	r3, r4
   1a0fe:	3340      	adds	r3, #64	; 0x40
   1a100:	4299      	cmp	r1, r3
   1a102:	d002      	beq.n	1a10a <setvbuf+0x52>
   1a104:	0028      	movs	r0, r5
   1a106:	f003 f927 	bl	1d358 <_free_r>
   1a10a:	2300      	movs	r3, #0
   1a10c:	6323      	str	r3, [r4, #48]	; 0x30
   1a10e:	2300      	movs	r3, #0
   1a110:	61a3      	str	r3, [r4, #24]
   1a112:	6063      	str	r3, [r4, #4]
   1a114:	220c      	movs	r2, #12
   1a116:	5ea3      	ldrsh	r3, [r4, r2]
   1a118:	061a      	lsls	r2, r3, #24
   1a11a:	d43d      	bmi.n	1a198 <setvbuf+0xe0>
   1a11c:	4a4d      	ldr	r2, [pc, #308]	; (1a254 <setvbuf+0x19c>)
   1a11e:	4013      	ands	r3, r2
   1a120:	81a3      	strh	r3, [r4, #12]
   1a122:	2e02      	cmp	r6, #2
   1a124:	d01e      	beq.n	1a164 <setvbuf+0xac>
   1a126:	ab01      	add	r3, sp, #4
   1a128:	466a      	mov	r2, sp
   1a12a:	0021      	movs	r1, r4
   1a12c:	0028      	movs	r0, r5
   1a12e:	f003 fbaf 	bl	1d890 <__swhatbuf_r>
   1a132:	89a3      	ldrh	r3, [r4, #12]
   1a134:	4318      	orrs	r0, r3
   1a136:	81a0      	strh	r0, [r4, #12]
   1a138:	2f00      	cmp	r7, #0
   1a13a:	d138      	bne.n	1a1ae <setvbuf+0xf6>
   1a13c:	9f00      	ldr	r7, [sp, #0]
   1a13e:	0038      	movs	r0, r7
   1a140:	f7ff fb1e 	bl	19780 <malloc>
   1a144:	4680      	mov	r8, r0
   1a146:	2800      	cmp	r0, #0
   1a148:	d100      	bne.n	1a14c <setvbuf+0x94>
   1a14a:	e06f      	b.n	1a22c <setvbuf+0x174>
   1a14c:	2280      	movs	r2, #128	; 0x80
   1a14e:	89a3      	ldrh	r3, [r4, #12]
   1a150:	4313      	orrs	r3, r2
   1a152:	81a3      	strh	r3, [r4, #12]
   1a154:	e02e      	b.n	1a1b4 <setvbuf+0xfc>
   1a156:	89a3      	ldrh	r3, [r4, #12]
   1a158:	059b      	lsls	r3, r3, #22
   1a15a:	d4c8      	bmi.n	1a0ee <setvbuf+0x36>
   1a15c:	6da0      	ldr	r0, [r4, #88]	; 0x58
   1a15e:	f003 fb93 	bl	1d888 <__retarget_lock_acquire_recursive>
   1a162:	e7c4      	b.n	1a0ee <setvbuf+0x36>
   1a164:	2500      	movs	r5, #0
   1a166:	2202      	movs	r2, #2
   1a168:	4313      	orrs	r3, r2
   1a16a:	2200      	movs	r2, #0
   1a16c:	60a2      	str	r2, [r4, #8]
   1a16e:	0022      	movs	r2, r4
   1a170:	3243      	adds	r2, #67	; 0x43
   1a172:	6022      	str	r2, [r4, #0]
   1a174:	6122      	str	r2, [r4, #16]
   1a176:	2201      	movs	r2, #1
   1a178:	6e61      	ldr	r1, [r4, #100]	; 0x64
   1a17a:	81a3      	strh	r3, [r4, #12]
   1a17c:	6162      	str	r2, [r4, #20]
   1a17e:	4211      	tst	r1, r2
   1a180:	d104      	bne.n	1a18c <setvbuf+0xd4>
   1a182:	059b      	lsls	r3, r3, #22
   1a184:	d402      	bmi.n	1a18c <setvbuf+0xd4>
   1a186:	6da0      	ldr	r0, [r4, #88]	; 0x58
   1a188:	f003 fb80 	bl	1d88c <__retarget_lock_release_recursive>
   1a18c:	0028      	movs	r0, r5
   1a18e:	b003      	add	sp, #12
   1a190:	bc0c      	pop	{r2, r3}
   1a192:	4690      	mov	r8, r2
   1a194:	4699      	mov	r9, r3
   1a196:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1a198:	6921      	ldr	r1, [r4, #16]
   1a19a:	0028      	movs	r0, r5
   1a19c:	f003 f8dc 	bl	1d358 <_free_r>
   1a1a0:	220c      	movs	r2, #12
   1a1a2:	5ea3      	ldrsh	r3, [r4, r2]
   1a1a4:	e7ba      	b.n	1a11c <setvbuf+0x64>
   1a1a6:	0028      	movs	r0, r5
   1a1a8:	f003 f82c 	bl	1d204 <__sinit>
   1a1ac:	e794      	b.n	1a0d8 <setvbuf+0x20>
   1a1ae:	4643      	mov	r3, r8
   1a1b0:	2b00      	cmp	r3, #0
   1a1b2:	d0c4      	beq.n	1a13e <setvbuf+0x86>
   1a1b4:	6bab      	ldr	r3, [r5, #56]	; 0x38
   1a1b6:	2b00      	cmp	r3, #0
   1a1b8:	d027      	beq.n	1a20a <setvbuf+0x152>
   1a1ba:	9b00      	ldr	r3, [sp, #0]
   1a1bc:	429f      	cmp	r7, r3
   1a1be:	d02a      	beq.n	1a216 <setvbuf+0x15e>
   1a1c0:	2380      	movs	r3, #128	; 0x80
   1a1c2:	89a2      	ldrh	r2, [r4, #12]
   1a1c4:	011b      	lsls	r3, r3, #4
   1a1c6:	4313      	orrs	r3, r2
   1a1c8:	b21b      	sxth	r3, r3
   1a1ca:	81a3      	strh	r3, [r4, #12]
   1a1cc:	2e01      	cmp	r6, #1
   1a1ce:	d026      	beq.n	1a21e <setvbuf+0x166>
   1a1d0:	4642      	mov	r2, r8
   1a1d2:	6022      	str	r2, [r4, #0]
   1a1d4:	6122      	str	r2, [r4, #16]
   1a1d6:	2208      	movs	r2, #8
   1a1d8:	b29b      	uxth	r3, r3
   1a1da:	6167      	str	r7, [r4, #20]
   1a1dc:	401a      	ands	r2, r3
   1a1de:	d00b      	beq.n	1a1f8 <setvbuf+0x140>
   1a1e0:	07da      	lsls	r2, r3, #31
   1a1e2:	d510      	bpl.n	1a206 <setvbuf+0x14e>
   1a1e4:	2200      	movs	r2, #0
   1a1e6:	2501      	movs	r5, #1
   1a1e8:	60a2      	str	r2, [r4, #8]
   1a1ea:	6e62      	ldr	r2, [r4, #100]	; 0x64
   1a1ec:	427f      	negs	r7, r7
   1a1ee:	61a7      	str	r7, [r4, #24]
   1a1f0:	4015      	ands	r5, r2
   1a1f2:	d0c6      	beq.n	1a182 <setvbuf+0xca>
   1a1f4:	2500      	movs	r5, #0
   1a1f6:	e7c9      	b.n	1a18c <setvbuf+0xd4>
   1a1f8:	60a2      	str	r2, [r4, #8]
   1a1fa:	2501      	movs	r5, #1
   1a1fc:	6e62      	ldr	r2, [r4, #100]	; 0x64
   1a1fe:	4015      	ands	r5, r2
   1a200:	d0bf      	beq.n	1a182 <setvbuf+0xca>
   1a202:	2500      	movs	r5, #0
   1a204:	e7c2      	b.n	1a18c <setvbuf+0xd4>
   1a206:	60a7      	str	r7, [r4, #8]
   1a208:	e7f7      	b.n	1a1fa <setvbuf+0x142>
   1a20a:	0028      	movs	r0, r5
   1a20c:	f002 fffa 	bl	1d204 <__sinit>
   1a210:	9b00      	ldr	r3, [sp, #0]
   1a212:	429f      	cmp	r7, r3
   1a214:	d1d4      	bne.n	1a1c0 <setvbuf+0x108>
   1a216:	220c      	movs	r2, #12
   1a218:	5ea3      	ldrsh	r3, [r4, r2]
   1a21a:	2e01      	cmp	r6, #1
   1a21c:	d1d8      	bne.n	1a1d0 <setvbuf+0x118>
   1a21e:	2201      	movs	r2, #1
   1a220:	4313      	orrs	r3, r2
   1a222:	81a3      	strh	r3, [r4, #12]
   1a224:	e7d4      	b.n	1a1d0 <setvbuf+0x118>
   1a226:	2501      	movs	r5, #1
   1a228:	426d      	negs	r5, r5
   1a22a:	e7af      	b.n	1a18c <setvbuf+0xd4>
   1a22c:	9b00      	ldr	r3, [sp, #0]
   1a22e:	4699      	mov	r9, r3
   1a230:	42bb      	cmp	r3, r7
   1a232:	d005      	beq.n	1a240 <setvbuf+0x188>
   1a234:	0018      	movs	r0, r3
   1a236:	f7ff faa3 	bl	19780 <malloc>
   1a23a:	4680      	mov	r8, r0
   1a23c:	2800      	cmp	r0, #0
   1a23e:	d104      	bne.n	1a24a <setvbuf+0x192>
   1a240:	2501      	movs	r5, #1
   1a242:	220c      	movs	r2, #12
   1a244:	5ea3      	ldrsh	r3, [r4, r2]
   1a246:	426d      	negs	r5, r5
   1a248:	e78d      	b.n	1a166 <setvbuf+0xae>
   1a24a:	464f      	mov	r7, r9
   1a24c:	e77e      	b.n	1a14c <setvbuf+0x94>
   1a24e:	46c0      	nop			; (mov r8, r8)
   1a250:	20000018 	.word	0x20000018
   1a254:	fffff35c 	.word	0xfffff35c

0001a258 <strcmp>:
   1a258:	4602      	mov	r2, r0
   1a25a:	b570      	push	{r4, r5, r6, lr}
   1a25c:	430a      	orrs	r2, r1
   1a25e:	0792      	lsls	r2, r2, #30
   1a260:	d12a      	bne.n	1a2b8 <strcmp+0x60>
   1a262:	4d1e      	ldr	r5, [pc, #120]	; (1a2dc <strcmp+0x84>)
   1a264:	01ee      	lsls	r6, r5, #7
   1a266:	c804      	ldmia	r0!, {r2}
   1a268:	c908      	ldmia	r1!, {r3}
   1a26a:	1b54      	subs	r4, r2, r5
   1a26c:	4394      	bics	r4, r2
   1a26e:	4034      	ands	r4, r6
   1a270:	d017      	beq.n	1a2a2 <strcmp+0x4a>
   1a272:	b2d0      	uxtb	r0, r2
   1a274:	b2d9      	uxtb	r1, r3
   1a276:	1a40      	subs	r0, r0, r1
   1a278:	0621      	lsls	r1, r4, #24
   1a27a:	4301      	orrs	r1, r0
   1a27c:	d110      	bne.n	1a2a0 <strcmp+0x48>
   1a27e:	b290      	uxth	r0, r2
   1a280:	b299      	uxth	r1, r3
   1a282:	1a40      	subs	r0, r0, r1
   1a284:	0421      	lsls	r1, r4, #16
   1a286:	4301      	orrs	r1, r0
   1a288:	d10a      	bne.n	1a2a0 <strcmp+0x48>
   1a28a:	0210      	lsls	r0, r2, #8
   1a28c:	0219      	lsls	r1, r3, #8
   1a28e:	0a00      	lsrs	r0, r0, #8
   1a290:	0a09      	lsrs	r1, r1, #8
   1a292:	1a40      	subs	r0, r0, r1
   1a294:	0221      	lsls	r1, r4, #8
   1a296:	4301      	orrs	r1, r0
   1a298:	d102      	bne.n	1a2a0 <strcmp+0x48>
   1a29a:	0e10      	lsrs	r0, r2, #24
   1a29c:	0e19      	lsrs	r1, r3, #24
   1a29e:	1a40      	subs	r0, r0, r1
   1a2a0:	bd70      	pop	{r4, r5, r6, pc}
   1a2a2:	429a      	cmp	r2, r3
   1a2a4:	d0df      	beq.n	1a266 <strcmp+0xe>
   1a2a6:	ba10      	rev	r0, r2
   1a2a8:	ba19      	rev	r1, r3
   1a2aa:	4288      	cmp	r0, r1
   1a2ac:	d901      	bls.n	1a2b2 <strcmp+0x5a>
   1a2ae:	2001      	movs	r0, #1
   1a2b0:	bd70      	pop	{r4, r5, r6, pc}
   1a2b2:	2000      	movs	r0, #0
   1a2b4:	43c0      	mvns	r0, r0
   1a2b6:	bd70      	pop	{r4, r5, r6, pc}
   1a2b8:	7802      	ldrb	r2, [r0, #0]
   1a2ba:	780b      	ldrb	r3, [r1, #0]
   1a2bc:	3001      	adds	r0, #1
   1a2be:	3101      	adds	r1, #1
   1a2c0:	2a00      	cmp	r2, #0
   1a2c2:	d009      	beq.n	1a2d8 <strcmp+0x80>
   1a2c4:	429a      	cmp	r2, r3
   1a2c6:	d107      	bne.n	1a2d8 <strcmp+0x80>
   1a2c8:	7802      	ldrb	r2, [r0, #0]
   1a2ca:	780b      	ldrb	r3, [r1, #0]
   1a2cc:	3001      	adds	r0, #1
   1a2ce:	3101      	adds	r1, #1
   1a2d0:	2a00      	cmp	r2, #0
   1a2d2:	d001      	beq.n	1a2d8 <strcmp+0x80>
   1a2d4:	429a      	cmp	r2, r3
   1a2d6:	d0ef      	beq.n	1a2b8 <strcmp+0x60>
   1a2d8:	1ad0      	subs	r0, r2, r3
   1a2da:	bd70      	pop	{r4, r5, r6, pc}
   1a2dc:	01010101 	.word	0x01010101

0001a2e0 <strlen>:
   1a2e0:	b510      	push	{r4, lr}
   1a2e2:	0783      	lsls	r3, r0, #30
   1a2e4:	d025      	beq.n	1a332 <strlen+0x52>
   1a2e6:	7803      	ldrb	r3, [r0, #0]
   1a2e8:	2b00      	cmp	r3, #0
   1a2ea:	d024      	beq.n	1a336 <strlen+0x56>
   1a2ec:	0003      	movs	r3, r0
   1a2ee:	2103      	movs	r1, #3
   1a2f0:	e002      	b.n	1a2f8 <strlen+0x18>
   1a2f2:	781a      	ldrb	r2, [r3, #0]
   1a2f4:	2a00      	cmp	r2, #0
   1a2f6:	d01a      	beq.n	1a32e <strlen+0x4e>
   1a2f8:	3301      	adds	r3, #1
   1a2fa:	420b      	tst	r3, r1
   1a2fc:	d1f9      	bne.n	1a2f2 <strlen+0x12>
   1a2fe:	6819      	ldr	r1, [r3, #0]
   1a300:	4a0e      	ldr	r2, [pc, #56]	; (1a33c <strlen+0x5c>)
   1a302:	4c0f      	ldr	r4, [pc, #60]	; (1a340 <strlen+0x60>)
   1a304:	188a      	adds	r2, r1, r2
   1a306:	438a      	bics	r2, r1
   1a308:	4222      	tst	r2, r4
   1a30a:	d106      	bne.n	1a31a <strlen+0x3a>
   1a30c:	3304      	adds	r3, #4
   1a30e:	6819      	ldr	r1, [r3, #0]
   1a310:	4a0a      	ldr	r2, [pc, #40]	; (1a33c <strlen+0x5c>)
   1a312:	188a      	adds	r2, r1, r2
   1a314:	438a      	bics	r2, r1
   1a316:	4222      	tst	r2, r4
   1a318:	d0f8      	beq.n	1a30c <strlen+0x2c>
   1a31a:	001a      	movs	r2, r3
   1a31c:	781b      	ldrb	r3, [r3, #0]
   1a31e:	2b00      	cmp	r3, #0
   1a320:	d003      	beq.n	1a32a <strlen+0x4a>
   1a322:	3201      	adds	r2, #1
   1a324:	7811      	ldrb	r1, [r2, #0]
   1a326:	2900      	cmp	r1, #0
   1a328:	d1fb      	bne.n	1a322 <strlen+0x42>
   1a32a:	1a10      	subs	r0, r2, r0
   1a32c:	bd10      	pop	{r4, pc}
   1a32e:	1a18      	subs	r0, r3, r0
   1a330:	e7fc      	b.n	1a32c <strlen+0x4c>
   1a332:	0003      	movs	r3, r0
   1a334:	e7e3      	b.n	1a2fe <strlen+0x1e>
   1a336:	2000      	movs	r0, #0
   1a338:	e7f8      	b.n	1a32c <strlen+0x4c>
   1a33a:	46c0      	nop			; (mov r8, r8)
   1a33c:	fefefeff 	.word	0xfefefeff
   1a340:	80808080 	.word	0x80808080

0001a344 <_strtol_l.isra.0>:
   1a344:	b5f0      	push	{r4, r5, r6, r7, lr}
   1a346:	4657      	mov	r7, sl
   1a348:	464e      	mov	r6, r9
   1a34a:	46de      	mov	lr, fp
   1a34c:	4645      	mov	r5, r8
   1a34e:	b5e0      	push	{r5, r6, r7, lr}
   1a350:	001e      	movs	r6, r3
   1a352:	2308      	movs	r3, #8
   1a354:	b083      	sub	sp, #12
   1a356:	9001      	str	r0, [sp, #4]
   1a358:	9100      	str	r1, [sp, #0]
   1a35a:	4692      	mov	sl, r2
   1a35c:	000f      	movs	r7, r1
   1a35e:	4699      	mov	r9, r3
   1a360:	e000      	b.n	1a364 <_strtol_l.isra.0+0x20>
   1a362:	002f      	movs	r7, r5
   1a364:	980c      	ldr	r0, [sp, #48]	; 0x30
   1a366:	783c      	ldrb	r4, [r7, #0]
   1a368:	f7ff f9f8 	bl	1975c <__locale_ctype_ptr_l>
   1a36c:	464a      	mov	r2, r9
   1a36e:	1900      	adds	r0, r0, r4
   1a370:	7843      	ldrb	r3, [r0, #1]
   1a372:	1c7d      	adds	r5, r7, #1
   1a374:	421a      	tst	r2, r3
   1a376:	d1f4      	bne.n	1a362 <_strtol_l.isra.0+0x1e>
   1a378:	2c2d      	cmp	r4, #45	; 0x2d
   1a37a:	d04f      	beq.n	1a41c <_strtol_l.isra.0+0xd8>
   1a37c:	2300      	movs	r3, #0
   1a37e:	4698      	mov	r8, r3
   1a380:	2c2b      	cmp	r4, #43	; 0x2b
   1a382:	d05c      	beq.n	1a43e <_strtol_l.isra.0+0xfa>
   1a384:	2e00      	cmp	r6, #0
   1a386:	d003      	beq.n	1a390 <_strtol_l.isra.0+0x4c>
   1a388:	2e10      	cmp	r6, #16
   1a38a:	d05b      	beq.n	1a444 <_strtol_l.isra.0+0x100>
   1a38c:	0037      	movs	r7, r6
   1a38e:	e003      	b.n	1a398 <_strtol_l.isra.0+0x54>
   1a390:	2c30      	cmp	r4, #48	; 0x30
   1a392:	d063      	beq.n	1a45c <_strtol_l.isra.0+0x118>
   1a394:	270a      	movs	r7, #10
   1a396:	260a      	movs	r6, #10
   1a398:	4b35      	ldr	r3, [pc, #212]	; (1a470 <_strtol_l.isra.0+0x12c>)
   1a39a:	0039      	movs	r1, r7
   1a39c:	4443      	add	r3, r8
   1a39e:	0018      	movs	r0, r3
   1a3a0:	4699      	mov	r9, r3
   1a3a2:	f7fc f9c5 	bl	16730 <__aeabi_uidivmod>
   1a3a6:	4648      	mov	r0, r9
   1a3a8:	468b      	mov	fp, r1
   1a3aa:	0039      	movs	r1, r7
   1a3ac:	f7fc f93a 	bl	16624 <__udivsi3>
   1a3b0:	2200      	movs	r2, #0
   1a3b2:	0001      	movs	r1, r0
   1a3b4:	2000      	movs	r0, #0
   1a3b6:	0023      	movs	r3, r4
   1a3b8:	3b30      	subs	r3, #48	; 0x30
   1a3ba:	2b09      	cmp	r3, #9
   1a3bc:	d907      	bls.n	1a3ce <_strtol_l.isra.0+0x8a>
   1a3be:	3b11      	subs	r3, #17
   1a3c0:	2b19      	cmp	r3, #25
   1a3c2:	d903      	bls.n	1a3cc <_strtol_l.isra.0+0x88>
   1a3c4:	0023      	movs	r3, r4
   1a3c6:	3b61      	subs	r3, #97	; 0x61
   1a3c8:	2b19      	cmp	r3, #25
   1a3ca:	d80d      	bhi.n	1a3e8 <_strtol_l.isra.0+0xa4>
   1a3cc:	330a      	adds	r3, #10
   1a3ce:	429e      	cmp	r6, r3
   1a3d0:	dd0a      	ble.n	1a3e8 <_strtol_l.isra.0+0xa4>
   1a3d2:	1c54      	adds	r4, r2, #1
   1a3d4:	d005      	beq.n	1a3e2 <_strtol_l.isra.0+0x9e>
   1a3d6:	4281      	cmp	r1, r0
   1a3d8:	d31d      	bcc.n	1a416 <_strtol_l.isra.0+0xd2>
   1a3da:	d01a      	beq.n	1a412 <_strtol_l.isra.0+0xce>
   1a3dc:	2201      	movs	r2, #1
   1a3de:	4378      	muls	r0, r7
   1a3e0:	1818      	adds	r0, r3, r0
   1a3e2:	782c      	ldrb	r4, [r5, #0]
   1a3e4:	3501      	adds	r5, #1
   1a3e6:	e7e6      	b.n	1a3b6 <_strtol_l.isra.0+0x72>
   1a3e8:	1c53      	adds	r3, r2, #1
   1a3ea:	d01c      	beq.n	1a426 <_strtol_l.isra.0+0xe2>
   1a3ec:	4643      	mov	r3, r8
   1a3ee:	2b00      	cmp	r3, #0
   1a3f0:	d000      	beq.n	1a3f4 <_strtol_l.isra.0+0xb0>
   1a3f2:	4240      	negs	r0, r0
   1a3f4:	4653      	mov	r3, sl
   1a3f6:	2b00      	cmp	r3, #0
   1a3f8:	d004      	beq.n	1a404 <_strtol_l.isra.0+0xc0>
   1a3fa:	9b00      	ldr	r3, [sp, #0]
   1a3fc:	2a00      	cmp	r2, #0
   1a3fe:	d11c      	bne.n	1a43a <_strtol_l.isra.0+0xf6>
   1a400:	4652      	mov	r2, sl
   1a402:	6013      	str	r3, [r2, #0]
   1a404:	b003      	add	sp, #12
   1a406:	bc3c      	pop	{r2, r3, r4, r5}
   1a408:	4690      	mov	r8, r2
   1a40a:	4699      	mov	r9, r3
   1a40c:	46a2      	mov	sl, r4
   1a40e:	46ab      	mov	fp, r5
   1a410:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1a412:	459b      	cmp	fp, r3
   1a414:	dae2      	bge.n	1a3dc <_strtol_l.isra.0+0x98>
   1a416:	2201      	movs	r2, #1
   1a418:	4252      	negs	r2, r2
   1a41a:	e7e2      	b.n	1a3e2 <_strtol_l.isra.0+0x9e>
   1a41c:	2301      	movs	r3, #1
   1a41e:	782c      	ldrb	r4, [r5, #0]
   1a420:	4698      	mov	r8, r3
   1a422:	1cbd      	adds	r5, r7, #2
   1a424:	e7ae      	b.n	1a384 <_strtol_l.isra.0+0x40>
   1a426:	2322      	movs	r3, #34	; 0x22
   1a428:	9a01      	ldr	r2, [sp, #4]
   1a42a:	4648      	mov	r0, r9
   1a42c:	6013      	str	r3, [r2, #0]
   1a42e:	4653      	mov	r3, sl
   1a430:	2b00      	cmp	r3, #0
   1a432:	d0e7      	beq.n	1a404 <_strtol_l.isra.0+0xc0>
   1a434:	1e6b      	subs	r3, r5, #1
   1a436:	4648      	mov	r0, r9
   1a438:	e7e2      	b.n	1a400 <_strtol_l.isra.0+0xbc>
   1a43a:	4681      	mov	r9, r0
   1a43c:	e7fa      	b.n	1a434 <_strtol_l.isra.0+0xf0>
   1a43e:	782c      	ldrb	r4, [r5, #0]
   1a440:	1cbd      	adds	r5, r7, #2
   1a442:	e79f      	b.n	1a384 <_strtol_l.isra.0+0x40>
   1a444:	2c30      	cmp	r4, #48	; 0x30
   1a446:	d111      	bne.n	1a46c <_strtol_l.isra.0+0x128>
   1a448:	2220      	movs	r2, #32
   1a44a:	782b      	ldrb	r3, [r5, #0]
   1a44c:	4393      	bics	r3, r2
   1a44e:	2b58      	cmp	r3, #88	; 0x58
   1a450:	d10c      	bne.n	1a46c <_strtol_l.isra.0+0x128>
   1a452:	786c      	ldrb	r4, [r5, #1]
   1a454:	2710      	movs	r7, #16
   1a456:	3502      	adds	r5, #2
   1a458:	2610      	movs	r6, #16
   1a45a:	e79d      	b.n	1a398 <_strtol_l.isra.0+0x54>
   1a45c:	2220      	movs	r2, #32
   1a45e:	782b      	ldrb	r3, [r5, #0]
   1a460:	4393      	bics	r3, r2
   1a462:	2b58      	cmp	r3, #88	; 0x58
   1a464:	d0f5      	beq.n	1a452 <_strtol_l.isra.0+0x10e>
   1a466:	2708      	movs	r7, #8
   1a468:	2608      	movs	r6, #8
   1a46a:	e795      	b.n	1a398 <_strtol_l.isra.0+0x54>
   1a46c:	2710      	movs	r7, #16
   1a46e:	e793      	b.n	1a398 <_strtol_l.isra.0+0x54>
   1a470:	7fffffff 	.word	0x7fffffff

0001a474 <strtol>:
   1a474:	0013      	movs	r3, r2
   1a476:	4a08      	ldr	r2, [pc, #32]	; (1a498 <strtol+0x24>)
   1a478:	b530      	push	{r4, r5, lr}
   1a47a:	0005      	movs	r5, r0
   1a47c:	6810      	ldr	r0, [r2, #0]
   1a47e:	b083      	sub	sp, #12
   1a480:	6b44      	ldr	r4, [r0, #52]	; 0x34
   1a482:	2c00      	cmp	r4, #0
   1a484:	d006      	beq.n	1a494 <strtol+0x20>
   1a486:	000a      	movs	r2, r1
   1a488:	9400      	str	r4, [sp, #0]
   1a48a:	0029      	movs	r1, r5
   1a48c:	f7ff ff5a 	bl	1a344 <_strtol_l.isra.0>
   1a490:	b003      	add	sp, #12
   1a492:	bd30      	pop	{r4, r5, pc}
   1a494:	4c01      	ldr	r4, [pc, #4]	; (1a49c <strtol+0x28>)
   1a496:	e7f6      	b.n	1a486 <strtol+0x12>
   1a498:	20000018 	.word	0x20000018
   1a49c:	20000448 	.word	0x20000448

0001a4a0 <_strtoul_l.isra.0>:
   1a4a0:	b5f0      	push	{r4, r5, r6, r7, lr}
   1a4a2:	4657      	mov	r7, sl
   1a4a4:	464e      	mov	r6, r9
   1a4a6:	46de      	mov	lr, fp
   1a4a8:	4645      	mov	r5, r8
   1a4aa:	b5e0      	push	{r5, r6, r7, lr}
   1a4ac:	001e      	movs	r6, r3
   1a4ae:	2308      	movs	r3, #8
   1a4b0:	b083      	sub	sp, #12
   1a4b2:	4683      	mov	fp, r0
   1a4b4:	4689      	mov	r9, r1
   1a4b6:	4692      	mov	sl, r2
   1a4b8:	000f      	movs	r7, r1
   1a4ba:	4698      	mov	r8, r3
   1a4bc:	e000      	b.n	1a4c0 <_strtoul_l.isra.0+0x20>
   1a4be:	002f      	movs	r7, r5
   1a4c0:	980c      	ldr	r0, [sp, #48]	; 0x30
   1a4c2:	783c      	ldrb	r4, [r7, #0]
   1a4c4:	f7ff f94a 	bl	1975c <__locale_ctype_ptr_l>
   1a4c8:	4642      	mov	r2, r8
   1a4ca:	1900      	adds	r0, r0, r4
   1a4cc:	7843      	ldrb	r3, [r0, #1]
   1a4ce:	1c7d      	adds	r5, r7, #1
   1a4d0:	421a      	tst	r2, r3
   1a4d2:	d1f4      	bne.n	1a4be <_strtoul_l.isra.0+0x1e>
   1a4d4:	2c2d      	cmp	r4, #45	; 0x2d
   1a4d6:	d05b      	beq.n	1a590 <_strtoul_l.isra.0+0xf0>
   1a4d8:	2300      	movs	r3, #0
   1a4da:	9301      	str	r3, [sp, #4]
   1a4dc:	2c2b      	cmp	r4, #43	; 0x2b
   1a4de:	d05c      	beq.n	1a59a <_strtoul_l.isra.0+0xfa>
   1a4e0:	2e00      	cmp	r6, #0
   1a4e2:	d00e      	beq.n	1a502 <_strtoul_l.isra.0+0x62>
   1a4e4:	2e10      	cmp	r6, #16
   1a4e6:	d05b      	beq.n	1a5a0 <_strtoul_l.isra.0+0x100>
   1a4e8:	2001      	movs	r0, #1
   1a4ea:	0031      	movs	r1, r6
   1a4ec:	4240      	negs	r0, r0
   1a4ee:	f7fc f899 	bl	16624 <__udivsi3>
   1a4f2:	0007      	movs	r7, r0
   1a4f4:	2001      	movs	r0, #1
   1a4f6:	0031      	movs	r1, r6
   1a4f8:	4240      	negs	r0, r0
   1a4fa:	46b0      	mov	r8, r6
   1a4fc:	f7fc f918 	bl	16730 <__aeabi_uidivmod>
   1a500:	e006      	b.n	1a510 <_strtoul_l.isra.0+0x70>
   1a502:	2c30      	cmp	r4, #48	; 0x30
   1a504:	d05b      	beq.n	1a5be <_strtoul_l.isra.0+0x11e>
   1a506:	230a      	movs	r3, #10
   1a508:	2105      	movs	r1, #5
   1a50a:	4698      	mov	r8, r3
   1a50c:	260a      	movs	r6, #10
   1a50e:	4f34      	ldr	r7, [pc, #208]	; (1a5e0 <_strtoul_l.isra.0+0x140>)
   1a510:	2200      	movs	r2, #0
   1a512:	2000      	movs	r0, #0
   1a514:	0023      	movs	r3, r4
   1a516:	3b30      	subs	r3, #48	; 0x30
   1a518:	2b09      	cmp	r3, #9
   1a51a:	d907      	bls.n	1a52c <_strtoul_l.isra.0+0x8c>
   1a51c:	3b11      	subs	r3, #17
   1a51e:	2b19      	cmp	r3, #25
   1a520:	d903      	bls.n	1a52a <_strtoul_l.isra.0+0x8a>
   1a522:	0023      	movs	r3, r4
   1a524:	3b61      	subs	r3, #97	; 0x61
   1a526:	2b19      	cmp	r3, #25
   1a528:	d80e      	bhi.n	1a548 <_strtoul_l.isra.0+0xa8>
   1a52a:	330a      	adds	r3, #10
   1a52c:	429e      	cmp	r6, r3
   1a52e:	dd0b      	ble.n	1a548 <_strtoul_l.isra.0+0xa8>
   1a530:	2a00      	cmp	r2, #0
   1a532:	db20      	blt.n	1a576 <_strtoul_l.isra.0+0xd6>
   1a534:	42b8      	cmp	r0, r7
   1a536:	d81e      	bhi.n	1a576 <_strtoul_l.isra.0+0xd6>
   1a538:	d01b      	beq.n	1a572 <_strtoul_l.isra.0+0xd2>
   1a53a:	4642      	mov	r2, r8
   1a53c:	4350      	muls	r0, r2
   1a53e:	2201      	movs	r2, #1
   1a540:	1818      	adds	r0, r3, r0
   1a542:	782c      	ldrb	r4, [r5, #0]
   1a544:	3501      	adds	r5, #1
   1a546:	e7e5      	b.n	1a514 <_strtoul_l.isra.0+0x74>
   1a548:	2a00      	cmp	r2, #0
   1a54a:	db17      	blt.n	1a57c <_strtoul_l.isra.0+0xdc>
   1a54c:	9b01      	ldr	r3, [sp, #4]
   1a54e:	2b00      	cmp	r3, #0
   1a550:	d000      	beq.n	1a554 <_strtoul_l.isra.0+0xb4>
   1a552:	4240      	negs	r0, r0
   1a554:	4653      	mov	r3, sl
   1a556:	2b00      	cmp	r3, #0
   1a558:	d004      	beq.n	1a564 <_strtoul_l.isra.0+0xc4>
   1a55a:	464b      	mov	r3, r9
   1a55c:	2a00      	cmp	r2, #0
   1a55e:	d115      	bne.n	1a58c <_strtoul_l.isra.0+0xec>
   1a560:	4652      	mov	r2, sl
   1a562:	6013      	str	r3, [r2, #0]
   1a564:	b003      	add	sp, #12
   1a566:	bc3c      	pop	{r2, r3, r4, r5}
   1a568:	4690      	mov	r8, r2
   1a56a:	4699      	mov	r9, r3
   1a56c:	46a2      	mov	sl, r4
   1a56e:	46ab      	mov	fp, r5
   1a570:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1a572:	428b      	cmp	r3, r1
   1a574:	dde1      	ble.n	1a53a <_strtoul_l.isra.0+0x9a>
   1a576:	2201      	movs	r2, #1
   1a578:	4252      	negs	r2, r2
   1a57a:	e7e2      	b.n	1a542 <_strtoul_l.isra.0+0xa2>
   1a57c:	2322      	movs	r3, #34	; 0x22
   1a57e:	465a      	mov	r2, fp
   1a580:	2001      	movs	r0, #1
   1a582:	6013      	str	r3, [r2, #0]
   1a584:	4653      	mov	r3, sl
   1a586:	4240      	negs	r0, r0
   1a588:	2b00      	cmp	r3, #0
   1a58a:	d0eb      	beq.n	1a564 <_strtoul_l.isra.0+0xc4>
   1a58c:	1e6b      	subs	r3, r5, #1
   1a58e:	e7e7      	b.n	1a560 <_strtoul_l.isra.0+0xc0>
   1a590:	2301      	movs	r3, #1
   1a592:	782c      	ldrb	r4, [r5, #0]
   1a594:	9301      	str	r3, [sp, #4]
   1a596:	1cbd      	adds	r5, r7, #2
   1a598:	e7a2      	b.n	1a4e0 <_strtoul_l.isra.0+0x40>
   1a59a:	782c      	ldrb	r4, [r5, #0]
   1a59c:	1cbd      	adds	r5, r7, #2
   1a59e:	e79f      	b.n	1a4e0 <_strtoul_l.isra.0+0x40>
   1a5a0:	2c30      	cmp	r4, #48	; 0x30
   1a5a2:	d117      	bne.n	1a5d4 <_strtoul_l.isra.0+0x134>
   1a5a4:	2220      	movs	r2, #32
   1a5a6:	782b      	ldrb	r3, [r5, #0]
   1a5a8:	4393      	bics	r3, r2
   1a5aa:	2b58      	cmp	r3, #88	; 0x58
   1a5ac:	d112      	bne.n	1a5d4 <_strtoul_l.isra.0+0x134>
   1a5ae:	2310      	movs	r3, #16
   1a5b0:	786c      	ldrb	r4, [r5, #1]
   1a5b2:	210f      	movs	r1, #15
   1a5b4:	3502      	adds	r5, #2
   1a5b6:	4f0b      	ldr	r7, [pc, #44]	; (1a5e4 <_strtoul_l.isra.0+0x144>)
   1a5b8:	4698      	mov	r8, r3
   1a5ba:	2610      	movs	r6, #16
   1a5bc:	e7a8      	b.n	1a510 <_strtoul_l.isra.0+0x70>
   1a5be:	2220      	movs	r2, #32
   1a5c0:	782b      	ldrb	r3, [r5, #0]
   1a5c2:	4393      	bics	r3, r2
   1a5c4:	2b58      	cmp	r3, #88	; 0x58
   1a5c6:	d0f2      	beq.n	1a5ae <_strtoul_l.isra.0+0x10e>
   1a5c8:	2308      	movs	r3, #8
   1a5ca:	2107      	movs	r1, #7
   1a5cc:	4f06      	ldr	r7, [pc, #24]	; (1a5e8 <_strtoul_l.isra.0+0x148>)
   1a5ce:	4698      	mov	r8, r3
   1a5d0:	2608      	movs	r6, #8
   1a5d2:	e79d      	b.n	1a510 <_strtoul_l.isra.0+0x70>
   1a5d4:	2310      	movs	r3, #16
   1a5d6:	210f      	movs	r1, #15
   1a5d8:	4f02      	ldr	r7, [pc, #8]	; (1a5e4 <_strtoul_l.isra.0+0x144>)
   1a5da:	4698      	mov	r8, r3
   1a5dc:	e798      	b.n	1a510 <_strtoul_l.isra.0+0x70>
   1a5de:	46c0      	nop			; (mov r8, r8)
   1a5e0:	19999999 	.word	0x19999999
   1a5e4:	0fffffff 	.word	0x0fffffff
   1a5e8:	1fffffff 	.word	0x1fffffff

0001a5ec <strtoul>:
   1a5ec:	0013      	movs	r3, r2
   1a5ee:	4a08      	ldr	r2, [pc, #32]	; (1a610 <strtoul+0x24>)
   1a5f0:	b530      	push	{r4, r5, lr}
   1a5f2:	0005      	movs	r5, r0
   1a5f4:	6810      	ldr	r0, [r2, #0]
   1a5f6:	b083      	sub	sp, #12
   1a5f8:	6b44      	ldr	r4, [r0, #52]	; 0x34
   1a5fa:	2c00      	cmp	r4, #0
   1a5fc:	d006      	beq.n	1a60c <strtoul+0x20>
   1a5fe:	000a      	movs	r2, r1
   1a600:	9400      	str	r4, [sp, #0]
   1a602:	0029      	movs	r1, r5
   1a604:	f7ff ff4c 	bl	1a4a0 <_strtoul_l.isra.0>
   1a608:	b003      	add	sp, #12
   1a60a:	bd30      	pop	{r4, r5, pc}
   1a60c:	4c01      	ldr	r4, [pc, #4]	; (1a614 <strtoul+0x28>)
   1a60e:	e7f6      	b.n	1a5fe <strtoul+0x12>
   1a610:	20000018 	.word	0x20000018
   1a614:	20000448 	.word	0x20000448

0001a618 <__utoa>:
   1a618:	b5f0      	push	{r4, r5, r6, r7, lr}
   1a61a:	4646      	mov	r6, r8
   1a61c:	46d6      	mov	lr, sl
   1a61e:	464f      	mov	r7, r9
   1a620:	b5c0      	push	{r6, r7, lr}
   1a622:	b08a      	sub	sp, #40	; 0x28
   1a624:	4690      	mov	r8, r2
   1a626:	466a      	mov	r2, sp
   1a628:	4b1d      	ldr	r3, [pc, #116]	; (1a6a0 <__utoa+0x88>)
   1a62a:	000d      	movs	r5, r1
   1a62c:	0006      	movs	r6, r0
   1a62e:	cb13      	ldmia	r3!, {r0, r1, r4}
   1a630:	c213      	stmia	r2!, {r0, r1, r4}
   1a632:	cb13      	ldmia	r3!, {r0, r1, r4}
   1a634:	c213      	stmia	r2!, {r0, r1, r4}
   1a636:	cb13      	ldmia	r3!, {r0, r1, r4}
   1a638:	c213      	stmia	r2!, {r0, r1, r4}
   1a63a:	781b      	ldrb	r3, [r3, #0]
   1a63c:	46ea      	mov	sl, sp
   1a63e:	7013      	strb	r3, [r2, #0]
   1a640:	4643      	mov	r3, r8
   1a642:	3b02      	subs	r3, #2
   1a644:	002f      	movs	r7, r5
   1a646:	2400      	movs	r4, #0
   1a648:	2b22      	cmp	r3, #34	; 0x22
   1a64a:	d901      	bls.n	1a650 <__utoa+0x38>
   1a64c:	e024      	b.n	1a698 <__utoa+0x80>
   1a64e:	464c      	mov	r4, r9
   1a650:	1c63      	adds	r3, r4, #1
   1a652:	0030      	movs	r0, r6
   1a654:	4641      	mov	r1, r8
   1a656:	4699      	mov	r9, r3
   1a658:	f7fc f86a 	bl	16730 <__aeabi_uidivmod>
   1a65c:	4653      	mov	r3, sl
   1a65e:	5c5b      	ldrb	r3, [r3, r1]
   1a660:	0030      	movs	r0, r6
   1a662:	703b      	strb	r3, [r7, #0]
   1a664:	4641      	mov	r1, r8
   1a666:	f7fb ffdd 	bl	16624 <__udivsi3>
   1a66a:	3701      	adds	r7, #1
   1a66c:	1e06      	subs	r6, r0, #0
   1a66e:	d1ee      	bne.n	1a64e <__utoa+0x36>
   1a670:	464b      	mov	r3, r9
   1a672:	54e8      	strb	r0, [r5, r3]
   1a674:	2300      	movs	r3, #0
   1a676:	2c00      	cmp	r4, #0
   1a678:	d007      	beq.n	1a68a <__utoa+0x72>
   1a67a:	5cea      	ldrb	r2, [r5, r3]
   1a67c:	5d29      	ldrb	r1, [r5, r4]
   1a67e:	54e9      	strb	r1, [r5, r3]
   1a680:	552a      	strb	r2, [r5, r4]
   1a682:	3301      	adds	r3, #1
   1a684:	3c01      	subs	r4, #1
   1a686:	42a3      	cmp	r3, r4
   1a688:	dbf7      	blt.n	1a67a <__utoa+0x62>
   1a68a:	0028      	movs	r0, r5
   1a68c:	b00a      	add	sp, #40	; 0x28
   1a68e:	bc1c      	pop	{r2, r3, r4}
   1a690:	4690      	mov	r8, r2
   1a692:	4699      	mov	r9, r3
   1a694:	46a2      	mov	sl, r4
   1a696:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1a698:	702c      	strb	r4, [r5, #0]
   1a69a:	2000      	movs	r0, #0
   1a69c:	e7f6      	b.n	1a68c <__utoa+0x74>
   1a69e:	46c0      	nop			; (mov r8, r8)
   1a6a0:	00020574 	.word	0x00020574

0001a6a4 <utoa>:
   1a6a4:	b510      	push	{r4, lr}
   1a6a6:	f7ff ffb7 	bl	1a618 <__utoa>
   1a6aa:	bd10      	pop	{r4, pc}

0001a6ac <_vfprintf_r>:
   1a6ac:	b5f0      	push	{r4, r5, r6, r7, lr}
   1a6ae:	46de      	mov	lr, fp
   1a6b0:	464e      	mov	r6, r9
   1a6b2:	4645      	mov	r5, r8
   1a6b4:	4657      	mov	r7, sl
   1a6b6:	b5e0      	push	{r5, r6, r7, lr}
   1a6b8:	b0c3      	sub	sp, #268	; 0x10c
   1a6ba:	4689      	mov	r9, r1
   1a6bc:	0014      	movs	r4, r2
   1a6be:	001d      	movs	r5, r3
   1a6c0:	930f      	str	r3, [sp, #60]	; 0x3c
   1a6c2:	0006      	movs	r6, r0
   1a6c4:	9006      	str	r0, [sp, #24]
   1a6c6:	f003 f8cd 	bl	1d864 <_localeconv_r>
   1a6ca:	6803      	ldr	r3, [r0, #0]
   1a6cc:	0018      	movs	r0, r3
   1a6ce:	9318      	str	r3, [sp, #96]	; 0x60
   1a6d0:	f7ff fe06 	bl	1a2e0 <strlen>
   1a6d4:	9017      	str	r0, [sp, #92]	; 0x5c
   1a6d6:	2e00      	cmp	r6, #0
   1a6d8:	d004      	beq.n	1a6e4 <_vfprintf_r+0x38>
   1a6da:	6bb3      	ldr	r3, [r6, #56]	; 0x38
   1a6dc:	9307      	str	r3, [sp, #28]
   1a6de:	2b00      	cmp	r3, #0
   1a6e0:	d100      	bne.n	1a6e4 <_vfprintf_r+0x38>
   1a6e2:	e0a7      	b.n	1a834 <_vfprintf_r+0x188>
   1a6e4:	464b      	mov	r3, r9
   1a6e6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   1a6e8:	07db      	lsls	r3, r3, #31
   1a6ea:	d478      	bmi.n	1a7de <_vfprintf_r+0x132>
   1a6ec:	464b      	mov	r3, r9
   1a6ee:	210c      	movs	r1, #12
   1a6f0:	5e59      	ldrsh	r1, [r3, r1]
   1a6f2:	b28b      	uxth	r3, r1
   1a6f4:	059a      	lsls	r2, r3, #22
   1a6f6:	d56e      	bpl.n	1a7d6 <_vfprintf_r+0x12a>
   1a6f8:	2280      	movs	r2, #128	; 0x80
   1a6fa:	0192      	lsls	r2, r2, #6
   1a6fc:	4213      	tst	r3, r2
   1a6fe:	d109      	bne.n	1a714 <_vfprintf_r+0x68>
   1a700:	430a      	orrs	r2, r1
   1a702:	464b      	mov	r3, r9
   1a704:	4649      	mov	r1, r9
   1a706:	819a      	strh	r2, [r3, #12]
   1a708:	6e49      	ldr	r1, [r1, #100]	; 0x64
   1a70a:	4bcc      	ldr	r3, [pc, #816]	; (1aa3c <_vfprintf_r+0x390>)
   1a70c:	400b      	ands	r3, r1
   1a70e:	4649      	mov	r1, r9
   1a710:	664b      	str	r3, [r1, #100]	; 0x64
   1a712:	b293      	uxth	r3, r2
   1a714:	071a      	lsls	r2, r3, #28
   1a716:	d567      	bpl.n	1a7e8 <_vfprintf_r+0x13c>
   1a718:	464a      	mov	r2, r9
   1a71a:	6912      	ldr	r2, [r2, #16]
   1a71c:	2a00      	cmp	r2, #0
   1a71e:	d063      	beq.n	1a7e8 <_vfprintf_r+0x13c>
   1a720:	221a      	movs	r2, #26
   1a722:	401a      	ands	r2, r3
   1a724:	2a0a      	cmp	r2, #10
   1a726:	d100      	bne.n	1a72a <_vfprintf_r+0x7e>
   1a728:	e088      	b.n	1a83c <_vfprintf_r+0x190>
   1a72a:	ab32      	add	r3, sp, #200	; 0xc8
   1a72c:	9325      	str	r3, [sp, #148]	; 0x94
   1a72e:	2300      	movs	r3, #0
   1a730:	46cb      	mov	fp, r9
   1a732:	af25      	add	r7, sp, #148	; 0x94
   1a734:	60bb      	str	r3, [r7, #8]
   1a736:	607b      	str	r3, [r7, #4]
   1a738:	9407      	str	r4, [sp, #28]
   1a73a:	9314      	str	r3, [sp, #80]	; 0x50
   1a73c:	9316      	str	r3, [sp, #88]	; 0x58
   1a73e:	9315      	str	r3, [sp, #84]	; 0x54
   1a740:	ae32      	add	r6, sp, #200	; 0xc8
   1a742:	9319      	str	r3, [sp, #100]	; 0x64
   1a744:	931a      	str	r3, [sp, #104]	; 0x68
   1a746:	930a      	str	r3, [sp, #40]	; 0x28
   1a748:	9c07      	ldr	r4, [sp, #28]
   1a74a:	7823      	ldrb	r3, [r4, #0]
   1a74c:	2b00      	cmp	r3, #0
   1a74e:	d101      	bne.n	1a754 <_vfprintf_r+0xa8>
   1a750:	f000 fd9e 	bl	1b290 <_vfprintf_r+0xbe4>
   1a754:	2b25      	cmp	r3, #37	; 0x25
   1a756:	d103      	bne.n	1a760 <_vfprintf_r+0xb4>
   1a758:	f000 fd9a 	bl	1b290 <_vfprintf_r+0xbe4>
   1a75c:	2b25      	cmp	r3, #37	; 0x25
   1a75e:	d003      	beq.n	1a768 <_vfprintf_r+0xbc>
   1a760:	3401      	adds	r4, #1
   1a762:	7823      	ldrb	r3, [r4, #0]
   1a764:	2b00      	cmp	r3, #0
   1a766:	d1f9      	bne.n	1a75c <_vfprintf_r+0xb0>
   1a768:	9b07      	ldr	r3, [sp, #28]
   1a76a:	1ae5      	subs	r5, r4, r3
   1a76c:	d010      	beq.n	1a790 <_vfprintf_r+0xe4>
   1a76e:	9b07      	ldr	r3, [sp, #28]
   1a770:	6075      	str	r5, [r6, #4]
   1a772:	6033      	str	r3, [r6, #0]
   1a774:	68bb      	ldr	r3, [r7, #8]
   1a776:	195b      	adds	r3, r3, r5
   1a778:	60bb      	str	r3, [r7, #8]
   1a77a:	687b      	ldr	r3, [r7, #4]
   1a77c:	3301      	adds	r3, #1
   1a77e:	607b      	str	r3, [r7, #4]
   1a780:	2b07      	cmp	r3, #7
   1a782:	dc4c      	bgt.n	1a81e <_vfprintf_r+0x172>
   1a784:	3608      	adds	r6, #8
   1a786:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1a788:	469c      	mov	ip, r3
   1a78a:	44ac      	add	ip, r5
   1a78c:	4663      	mov	r3, ip
   1a78e:	930a      	str	r3, [sp, #40]	; 0x28
   1a790:	7823      	ldrb	r3, [r4, #0]
   1a792:	2b00      	cmp	r3, #0
   1a794:	d101      	bne.n	1a79a <_vfprintf_r+0xee>
   1a796:	f000 fc99 	bl	1b0cc <_vfprintf_r+0xa20>
   1a79a:	1c63      	adds	r3, r4, #1
   1a79c:	9307      	str	r3, [sp, #28]
   1a79e:	2300      	movs	r3, #0
   1a7a0:	aa16      	add	r2, sp, #88	; 0x58
   1a7a2:	77d3      	strb	r3, [r2, #31]
   1a7a4:	2201      	movs	r2, #1
   1a7a6:	4252      	negs	r2, r2
   1a7a8:	4692      	mov	sl, r2
   1a7aa:	2200      	movs	r2, #0
   1a7ac:	920b      	str	r2, [sp, #44]	; 0x2c
   1a7ae:	3220      	adds	r2, #32
   1a7b0:	4691      	mov	r9, r2
   1a7b2:	3220      	adds	r2, #32
   1a7b4:	7863      	ldrb	r3, [r4, #1]
   1a7b6:	2100      	movs	r1, #0
   1a7b8:	2000      	movs	r0, #0
   1a7ba:	2400      	movs	r4, #0
   1a7bc:	4694      	mov	ip, r2
   1a7be:	9a07      	ldr	r2, [sp, #28]
   1a7c0:	3201      	adds	r2, #1
   1a7c2:	9207      	str	r2, [sp, #28]
   1a7c4:	001a      	movs	r2, r3
   1a7c6:	3a20      	subs	r2, #32
   1a7c8:	2a58      	cmp	r2, #88	; 0x58
   1a7ca:	d900      	bls.n	1a7ce <_vfprintf_r+0x122>
   1a7cc:	e2e7      	b.n	1ad9e <_vfprintf_r+0x6f2>
   1a7ce:	4d9c      	ldr	r5, [pc, #624]	; (1aa40 <_vfprintf_r+0x394>)
   1a7d0:	0092      	lsls	r2, r2, #2
   1a7d2:	58aa      	ldr	r2, [r5, r2]
   1a7d4:	4697      	mov	pc, r2
   1a7d6:	464b      	mov	r3, r9
   1a7d8:	6d98      	ldr	r0, [r3, #88]	; 0x58
   1a7da:	f003 f855 	bl	1d888 <__retarget_lock_acquire_recursive>
   1a7de:	464b      	mov	r3, r9
   1a7e0:	210c      	movs	r1, #12
   1a7e2:	5e59      	ldrsh	r1, [r3, r1]
   1a7e4:	b28b      	uxth	r3, r1
   1a7e6:	e787      	b.n	1a6f8 <_vfprintf_r+0x4c>
   1a7e8:	4649      	mov	r1, r9
   1a7ea:	9806      	ldr	r0, [sp, #24]
   1a7ec:	f001 fb1c 	bl	1be28 <__swsetup_r>
   1a7f0:	464b      	mov	r3, r9
   1a7f2:	2800      	cmp	r0, #0
   1a7f4:	d03a      	beq.n	1a86c <_vfprintf_r+0x1c0>
   1a7f6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   1a7f8:	07db      	lsls	r3, r3, #31
   1a7fa:	d405      	bmi.n	1a808 <_vfprintf_r+0x15c>
   1a7fc:	464b      	mov	r3, r9
   1a7fe:	899b      	ldrh	r3, [r3, #12]
   1a800:	059b      	lsls	r3, r3, #22
   1a802:	d401      	bmi.n	1a808 <_vfprintf_r+0x15c>
   1a804:	f000 ffcf 	bl	1b7a6 <_vfprintf_r+0x10fa>
   1a808:	2301      	movs	r3, #1
   1a80a:	425b      	negs	r3, r3
   1a80c:	930a      	str	r3, [sp, #40]	; 0x28
   1a80e:	980a      	ldr	r0, [sp, #40]	; 0x28
   1a810:	b043      	add	sp, #268	; 0x10c
   1a812:	bc3c      	pop	{r2, r3, r4, r5}
   1a814:	4690      	mov	r8, r2
   1a816:	4699      	mov	r9, r3
   1a818:	46a2      	mov	sl, r4
   1a81a:	46ab      	mov	fp, r5
   1a81c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1a81e:	003a      	movs	r2, r7
   1a820:	4659      	mov	r1, fp
   1a822:	9806      	ldr	r0, [sp, #24]
   1a824:	f003 fe82 	bl	1e52c <__sprint_r>
   1a828:	2800      	cmp	r0, #0
   1a82a:	d001      	beq.n	1a830 <_vfprintf_r+0x184>
   1a82c:	f000 fcce 	bl	1b1cc <_vfprintf_r+0xb20>
   1a830:	ae32      	add	r6, sp, #200	; 0xc8
   1a832:	e7a8      	b.n	1a786 <_vfprintf_r+0xda>
   1a834:	9806      	ldr	r0, [sp, #24]
   1a836:	f002 fce5 	bl	1d204 <__sinit>
   1a83a:	e753      	b.n	1a6e4 <_vfprintf_r+0x38>
   1a83c:	464a      	mov	r2, r9
   1a83e:	210e      	movs	r1, #14
   1a840:	5e52      	ldrsh	r2, [r2, r1]
   1a842:	2a00      	cmp	r2, #0
   1a844:	da00      	bge.n	1a848 <_vfprintf_r+0x19c>
   1a846:	e770      	b.n	1a72a <_vfprintf_r+0x7e>
   1a848:	464a      	mov	r2, r9
   1a84a:	6e52      	ldr	r2, [r2, #100]	; 0x64
   1a84c:	07d2      	lsls	r2, r2, #31
   1a84e:	d405      	bmi.n	1a85c <_vfprintf_r+0x1b0>
   1a850:	059b      	lsls	r3, r3, #22
   1a852:	d403      	bmi.n	1a85c <_vfprintf_r+0x1b0>
   1a854:	464b      	mov	r3, r9
   1a856:	6d98      	ldr	r0, [r3, #88]	; 0x58
   1a858:	f003 f818 	bl	1d88c <__retarget_lock_release_recursive>
   1a85c:	002b      	movs	r3, r5
   1a85e:	0022      	movs	r2, r4
   1a860:	4649      	mov	r1, r9
   1a862:	9806      	ldr	r0, [sp, #24]
   1a864:	f001 fa8e 	bl	1bd84 <__sbprintf>
   1a868:	900a      	str	r0, [sp, #40]	; 0x28
   1a86a:	e7d0      	b.n	1a80e <_vfprintf_r+0x162>
   1a86c:	899b      	ldrh	r3, [r3, #12]
   1a86e:	e757      	b.n	1a720 <_vfprintf_r+0x74>
   1a870:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1a872:	920f      	str	r2, [sp, #60]	; 0x3c
   1a874:	425b      	negs	r3, r3
   1a876:	930b      	str	r3, [sp, #44]	; 0x2c
   1a878:	2304      	movs	r3, #4
   1a87a:	431c      	orrs	r4, r3
   1a87c:	9b07      	ldr	r3, [sp, #28]
   1a87e:	781b      	ldrb	r3, [r3, #0]
   1a880:	e79d      	b.n	1a7be <_vfprintf_r+0x112>
   1a882:	9b07      	ldr	r3, [sp, #28]
   1a884:	2101      	movs	r1, #1
   1a886:	781b      	ldrb	r3, [r3, #0]
   1a888:	202b      	movs	r0, #43	; 0x2b
   1a88a:	e798      	b.n	1a7be <_vfprintf_r+0x112>
   1a88c:	9b07      	ldr	r3, [sp, #28]
   1a88e:	1c5a      	adds	r2, r3, #1
   1a890:	781b      	ldrb	r3, [r3, #0]
   1a892:	4690      	mov	r8, r2
   1a894:	2b2a      	cmp	r3, #42	; 0x2a
   1a896:	d101      	bne.n	1a89c <_vfprintf_r+0x1f0>
   1a898:	f001 fa38 	bl	1bd0c <_vfprintf_r+0x1660>
   1a89c:	001a      	movs	r2, r3
   1a89e:	2500      	movs	r5, #0
   1a8a0:	3a30      	subs	r2, #48	; 0x30
   1a8a2:	46aa      	mov	sl, r5
   1a8a4:	2a09      	cmp	r2, #9
   1a8a6:	d901      	bls.n	1a8ac <_vfprintf_r+0x200>
   1a8a8:	f001 f96d 	bl	1bb86 <_vfprintf_r+0x14da>
   1a8ac:	0025      	movs	r5, r4
   1a8ae:	4643      	mov	r3, r8
   1a8b0:	4654      	mov	r4, sl
   1a8b2:	4688      	mov	r8, r1
   1a8b4:	4682      	mov	sl, r0
   1a8b6:	00a1      	lsls	r1, r4, #2
   1a8b8:	190c      	adds	r4, r1, r4
   1a8ba:	7818      	ldrb	r0, [r3, #0]
   1a8bc:	0064      	lsls	r4, r4, #1
   1a8be:	18a4      	adds	r4, r4, r2
   1a8c0:	0002      	movs	r2, r0
   1a8c2:	1c59      	adds	r1, r3, #1
   1a8c4:	3a30      	subs	r2, #48	; 0x30
   1a8c6:	000b      	movs	r3, r1
   1a8c8:	2a09      	cmp	r2, #9
   1a8ca:	d9f4      	bls.n	1a8b6 <_vfprintf_r+0x20a>
   1a8cc:	9107      	str	r1, [sp, #28]
   1a8ce:	0003      	movs	r3, r0
   1a8d0:	4641      	mov	r1, r8
   1a8d2:	4650      	mov	r0, sl
   1a8d4:	46a2      	mov	sl, r4
   1a8d6:	002c      	movs	r4, r5
   1a8d8:	e774      	b.n	1a7c4 <_vfprintf_r+0x118>
   1a8da:	9312      	str	r3, [sp, #72]	; 0x48
   1a8dc:	2900      	cmp	r1, #0
   1a8de:	d001      	beq.n	1a8e4 <_vfprintf_r+0x238>
   1a8e0:	f001 fa2e 	bl	1bd40 <_vfprintf_r+0x1694>
   1a8e4:	4b57      	ldr	r3, [pc, #348]	; (1aa44 <_vfprintf_r+0x398>)
   1a8e6:	9319      	str	r3, [sp, #100]	; 0x64
   1a8e8:	06a3      	lsls	r3, r4, #26
   1a8ea:	d501      	bpl.n	1a8f0 <_vfprintf_r+0x244>
   1a8ec:	f000 fe9a 	bl	1b624 <_vfprintf_r+0xf78>
   1a8f0:	06e3      	lsls	r3, r4, #27
   1a8f2:	d501      	bpl.n	1a8f8 <_vfprintf_r+0x24c>
   1a8f4:	f000 fd9a 	bl	1b42c <_vfprintf_r+0xd80>
   1a8f8:	0663      	lsls	r3, r4, #25
   1a8fa:	d401      	bmi.n	1a900 <_vfprintf_r+0x254>
   1a8fc:	f000 fd96 	bl	1b42c <_vfprintf_r+0xd80>
   1a900:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1a902:	881a      	ldrh	r2, [r3, #0]
   1a904:	920c      	str	r2, [sp, #48]	; 0x30
   1a906:	2200      	movs	r2, #0
   1a908:	3304      	adds	r3, #4
   1a90a:	920d      	str	r2, [sp, #52]	; 0x34
   1a90c:	930f      	str	r3, [sp, #60]	; 0x3c
   1a90e:	07e3      	lsls	r3, r4, #31
   1a910:	d401      	bmi.n	1a916 <_vfprintf_r+0x26a>
   1a912:	f000 fd76 	bl	1b402 <_vfprintf_r+0xd56>
   1a916:	990c      	ldr	r1, [sp, #48]	; 0x30
   1a918:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   1a91a:	000b      	movs	r3, r1
   1a91c:	4313      	orrs	r3, r2
   1a91e:	001a      	movs	r2, r3
   1a920:	2302      	movs	r3, #2
   1a922:	2a00      	cmp	r2, #0
   1a924:	d008      	beq.n	1a938 <_vfprintf_r+0x28c>
   1a926:	2030      	movs	r0, #48	; 0x30
   1a928:	a91e      	add	r1, sp, #120	; 0x78
   1a92a:	7008      	strb	r0, [r1, #0]
   1a92c:	2548      	movs	r5, #72	; 0x48
   1a92e:	4668      	mov	r0, sp
   1a930:	1940      	adds	r0, r0, r5
   1a932:	7800      	ldrb	r0, [r0, #0]
   1a934:	431c      	orrs	r4, r3
   1a936:	7048      	strb	r0, [r1, #1]
   1a938:	2100      	movs	r1, #0
   1a93a:	4688      	mov	r8, r1
   1a93c:	a816      	add	r0, sp, #88	; 0x58
   1a93e:	77c1      	strb	r1, [r0, #31]
   1a940:	4651      	mov	r1, sl
   1a942:	3101      	adds	r1, #1
   1a944:	d100      	bne.n	1a948 <_vfprintf_r+0x29c>
   1a946:	e0e6      	b.n	1ab16 <_vfprintf_r+0x46a>
   1a948:	2180      	movs	r1, #128	; 0x80
   1a94a:	0020      	movs	r0, r4
   1a94c:	4388      	bics	r0, r1
   1a94e:	9009      	str	r0, [sp, #36]	; 0x24
   1a950:	2a00      	cmp	r2, #0
   1a952:	d000      	beq.n	1a956 <_vfprintf_r+0x2aa>
   1a954:	e0e3      	b.n	1ab1e <_vfprintf_r+0x472>
   1a956:	4652      	mov	r2, sl
   1a958:	2a00      	cmp	r2, #0
   1a95a:	d001      	beq.n	1a960 <_vfprintf_r+0x2b4>
   1a95c:	f000 fc38 	bl	1b1d0 <_vfprintf_r+0xb24>
   1a960:	2b00      	cmp	r3, #0
   1a962:	d001      	beq.n	1a968 <_vfprintf_r+0x2bc>
   1a964:	f000 fd0c 	bl	1b380 <_vfprintf_r+0xcd4>
   1a968:	2001      	movs	r0, #1
   1a96a:	ab32      	add	r3, sp, #200	; 0xc8
   1a96c:	4020      	ands	r0, r4
   1a96e:	900e      	str	r0, [sp, #56]	; 0x38
   1a970:	9311      	str	r3, [sp, #68]	; 0x44
   1a972:	d008      	beq.n	1a986 <_vfprintf_r+0x2da>
   1a974:	2327      	movs	r3, #39	; 0x27
   1a976:	2130      	movs	r1, #48	; 0x30
   1a978:	aa28      	add	r2, sp, #160	; 0xa0
   1a97a:	54d1      	strb	r1, [r2, r3]
   1a97c:	aa16      	add	r2, sp, #88	; 0x58
   1a97e:	4694      	mov	ip, r2
   1a980:	3348      	adds	r3, #72	; 0x48
   1a982:	4463      	add	r3, ip
   1a984:	9311      	str	r3, [sp, #68]	; 0x44
   1a986:	4653      	mov	r3, sl
   1a988:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   1a98a:	9308      	str	r3, [sp, #32]
   1a98c:	4592      	cmp	sl, r2
   1a98e:	da00      	bge.n	1a992 <_vfprintf_r+0x2e6>
   1a990:	9208      	str	r2, [sp, #32]
   1a992:	2300      	movs	r3, #0
   1a994:	9313      	str	r3, [sp, #76]	; 0x4c
   1a996:	4643      	mov	r3, r8
   1a998:	2b00      	cmp	r3, #0
   1a99a:	d002      	beq.n	1a9a2 <_vfprintf_r+0x2f6>
   1a99c:	9b08      	ldr	r3, [sp, #32]
   1a99e:	3301      	adds	r3, #1
   1a9a0:	9308      	str	r3, [sp, #32]
   1a9a2:	2302      	movs	r3, #2
   1a9a4:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1a9a6:	401a      	ands	r2, r3
   1a9a8:	4691      	mov	r9, r2
   1a9aa:	d002      	beq.n	1a9b2 <_vfprintf_r+0x306>
   1a9ac:	9b08      	ldr	r3, [sp, #32]
   1a9ae:	3302      	adds	r3, #2
   1a9b0:	9308      	str	r3, [sp, #32]
   1a9b2:	2384      	movs	r3, #132	; 0x84
   1a9b4:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1a9b6:	401a      	ands	r2, r3
   1a9b8:	9210      	str	r2, [sp, #64]	; 0x40
   1a9ba:	d000      	beq.n	1a9be <_vfprintf_r+0x312>
   1a9bc:	e207      	b.n	1adce <_vfprintf_r+0x722>
   1a9be:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1a9c0:	9a08      	ldr	r2, [sp, #32]
   1a9c2:	1a9c      	subs	r4, r3, r2
   1a9c4:	2c00      	cmp	r4, #0
   1a9c6:	dc00      	bgt.n	1a9ca <_vfprintf_r+0x31e>
   1a9c8:	e201      	b.n	1adce <_vfprintf_r+0x722>
   1a9ca:	491f      	ldr	r1, [pc, #124]	; (1aa48 <_vfprintf_r+0x39c>)
   1a9cc:	68ba      	ldr	r2, [r7, #8]
   1a9ce:	687b      	ldr	r3, [r7, #4]
   1a9d0:	4688      	mov	r8, r1
   1a9d2:	2c10      	cmp	r4, #16
   1a9d4:	dd21      	ble.n	1aa1a <_vfprintf_r+0x36e>
   1a9d6:	0031      	movs	r1, r6
   1a9d8:	2510      	movs	r5, #16
   1a9da:	465e      	mov	r6, fp
   1a9dc:	e003      	b.n	1a9e6 <_vfprintf_r+0x33a>
   1a9de:	3c10      	subs	r4, #16
   1a9e0:	3108      	adds	r1, #8
   1a9e2:	2c10      	cmp	r4, #16
   1a9e4:	dd17      	ble.n	1aa16 <_vfprintf_r+0x36a>
   1a9e6:	4640      	mov	r0, r8
   1a9e8:	3210      	adds	r2, #16
   1a9ea:	3301      	adds	r3, #1
   1a9ec:	6008      	str	r0, [r1, #0]
   1a9ee:	604d      	str	r5, [r1, #4]
   1a9f0:	60ba      	str	r2, [r7, #8]
   1a9f2:	607b      	str	r3, [r7, #4]
   1a9f4:	2b07      	cmp	r3, #7
   1a9f6:	ddf2      	ble.n	1a9de <_vfprintf_r+0x332>
   1a9f8:	003a      	movs	r2, r7
   1a9fa:	0031      	movs	r1, r6
   1a9fc:	9806      	ldr	r0, [sp, #24]
   1a9fe:	f003 fd95 	bl	1e52c <__sprint_r>
   1aa02:	2800      	cmp	r0, #0
   1aa04:	d001      	beq.n	1aa0a <_vfprintf_r+0x35e>
   1aa06:	f000 fccf 	bl	1b3a8 <_vfprintf_r+0xcfc>
   1aa0a:	3c10      	subs	r4, #16
   1aa0c:	68ba      	ldr	r2, [r7, #8]
   1aa0e:	687b      	ldr	r3, [r7, #4]
   1aa10:	a932      	add	r1, sp, #200	; 0xc8
   1aa12:	2c10      	cmp	r4, #16
   1aa14:	dce7      	bgt.n	1a9e6 <_vfprintf_r+0x33a>
   1aa16:	46b3      	mov	fp, r6
   1aa18:	000e      	movs	r6, r1
   1aa1a:	4641      	mov	r1, r8
   1aa1c:	6074      	str	r4, [r6, #4]
   1aa1e:	3301      	adds	r3, #1
   1aa20:	18a4      	adds	r4, r4, r2
   1aa22:	6031      	str	r1, [r6, #0]
   1aa24:	60bc      	str	r4, [r7, #8]
   1aa26:	607b      	str	r3, [r7, #4]
   1aa28:	2b07      	cmp	r3, #7
   1aa2a:	dd01      	ble.n	1aa30 <_vfprintf_r+0x384>
   1aa2c:	f000 fcae 	bl	1b38c <_vfprintf_r+0xce0>
   1aa30:	ab16      	add	r3, sp, #88	; 0x58
   1aa32:	7fdb      	ldrb	r3, [r3, #31]
   1aa34:	3608      	adds	r6, #8
   1aa36:	4698      	mov	r8, r3
   1aa38:	e1ca      	b.n	1add0 <_vfprintf_r+0x724>
   1aa3a:	46c0      	nop			; (mov r8, r8)
   1aa3c:	ffffdfff 	.word	0xffffdfff
   1aa40:	0002059c 	.word	0x0002059c
   1aa44:	00020724 	.word	0x00020724
   1aa48:	00020740 	.word	0x00020740
   1aa4c:	2200      	movs	r2, #0
   1aa4e:	9d07      	ldr	r5, [sp, #28]
   1aa50:	3b30      	subs	r3, #48	; 0x30
   1aa52:	46a8      	mov	r8, r5
   1aa54:	920b      	str	r2, [sp, #44]	; 0x2c
   1aa56:	001a      	movs	r2, r3
   1aa58:	9408      	str	r4, [sp, #32]
   1aa5a:	002c      	movs	r4, r5
   1aa5c:	4655      	mov	r5, sl
   1aa5e:	4682      	mov	sl, r0
   1aa60:	4640      	mov	r0, r8
   1aa62:	4688      	mov	r8, r1
   1aa64:	0011      	movs	r1, r2
   1aa66:	2200      	movs	r2, #0
   1aa68:	0093      	lsls	r3, r2, #2
   1aa6a:	189a      	adds	r2, r3, r2
   1aa6c:	7803      	ldrb	r3, [r0, #0]
   1aa6e:	0052      	lsls	r2, r2, #1
   1aa70:	188a      	adds	r2, r1, r2
   1aa72:	0019      	movs	r1, r3
   1aa74:	3401      	adds	r4, #1
   1aa76:	3930      	subs	r1, #48	; 0x30
   1aa78:	0020      	movs	r0, r4
   1aa7a:	2909      	cmp	r1, #9
   1aa7c:	d9f4      	bls.n	1aa68 <_vfprintf_r+0x3bc>
   1aa7e:	9407      	str	r4, [sp, #28]
   1aa80:	4650      	mov	r0, sl
   1aa82:	9c08      	ldr	r4, [sp, #32]
   1aa84:	920b      	str	r2, [sp, #44]	; 0x2c
   1aa86:	4641      	mov	r1, r8
   1aa88:	46aa      	mov	sl, r5
   1aa8a:	e69b      	b.n	1a7c4 <_vfprintf_r+0x118>
   1aa8c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   1aa8e:	9312      	str	r3, [sp, #72]	; 0x48
   1aa90:	6813      	ldr	r3, [r2, #0]
   1aa92:	2120      	movs	r1, #32
   1aa94:	9308      	str	r3, [sp, #32]
   1aa96:	466b      	mov	r3, sp
   1aa98:	185b      	adds	r3, r3, r1
   1aa9a:	781b      	ldrb	r3, [r3, #0]
   1aa9c:	ad28      	add	r5, sp, #160	; 0xa0
   1aa9e:	702b      	strb	r3, [r5, #0]
   1aaa0:	2300      	movs	r3, #0
   1aaa2:	a916      	add	r1, sp, #88	; 0x58
   1aaa4:	77cb      	strb	r3, [r1, #31]
   1aaa6:	0013      	movs	r3, r2
   1aaa8:	3304      	adds	r3, #4
   1aaaa:	930f      	str	r3, [sp, #60]	; 0x3c
   1aaac:	2300      	movs	r3, #0
   1aaae:	9409      	str	r4, [sp, #36]	; 0x24
   1aab0:	4698      	mov	r8, r3
   1aab2:	3301      	adds	r3, #1
   1aab4:	9308      	str	r3, [sp, #32]
   1aab6:	930e      	str	r3, [sp, #56]	; 0x38
   1aab8:	2300      	movs	r3, #0
   1aaba:	9511      	str	r5, [sp, #68]	; 0x44
   1aabc:	469a      	mov	sl, r3
   1aabe:	9313      	str	r3, [sp, #76]	; 0x4c
   1aac0:	e76f      	b.n	1a9a2 <_vfprintf_r+0x2f6>
   1aac2:	9312      	str	r3, [sp, #72]	; 0x48
   1aac4:	2900      	cmp	r1, #0
   1aac6:	d001      	beq.n	1aacc <_vfprintf_r+0x420>
   1aac8:	f001 f94d 	bl	1bd66 <_vfprintf_r+0x16ba>
   1aacc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   1aace:	06a3      	lsls	r3, r4, #26
   1aad0:	d501      	bpl.n	1aad6 <_vfprintf_r+0x42a>
   1aad2:	f000 fd5a 	bl	1b58a <_vfprintf_r+0xede>
   1aad6:	06e3      	lsls	r3, r4, #27
   1aad8:	d501      	bpl.n	1aade <_vfprintf_r+0x432>
   1aada:	f000 fcab 	bl	1b434 <_vfprintf_r+0xd88>
   1aade:	0663      	lsls	r3, r4, #25
   1aae0:	d401      	bmi.n	1aae6 <_vfprintf_r+0x43a>
   1aae2:	f000 fca7 	bl	1b434 <_vfprintf_r+0xd88>
   1aae6:	2100      	movs	r1, #0
   1aae8:	5e53      	ldrsh	r3, [r2, r1]
   1aaea:	930c      	str	r3, [sp, #48]	; 0x30
   1aaec:	3204      	adds	r2, #4
   1aaee:	17db      	asrs	r3, r3, #31
   1aaf0:	930d      	str	r3, [sp, #52]	; 0x34
   1aaf2:	920f      	str	r2, [sp, #60]	; 0x3c
   1aaf4:	2b00      	cmp	r3, #0
   1aaf6:	da01      	bge.n	1aafc <_vfprintf_r+0x450>
   1aaf8:	f000 fdb2 	bl	1b660 <_vfprintf_r+0xfb4>
   1aafc:	990c      	ldr	r1, [sp, #48]	; 0x30
   1aafe:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   1ab00:	0008      	movs	r0, r1
   1ab02:	4651      	mov	r1, sl
   1ab04:	ab16      	add	r3, sp, #88	; 0x58
   1ab06:	7fdb      	ldrb	r3, [r3, #31]
   1ab08:	4310      	orrs	r0, r2
   1ab0a:	4698      	mov	r8, r3
   1ab0c:	0002      	movs	r2, r0
   1ab0e:	2301      	movs	r3, #1
   1ab10:	3101      	adds	r1, #1
   1ab12:	d000      	beq.n	1ab16 <_vfprintf_r+0x46a>
   1ab14:	e718      	b.n	1a948 <_vfprintf_r+0x29c>
   1ab16:	2a00      	cmp	r2, #0
   1ab18:	d100      	bne.n	1ab1c <_vfprintf_r+0x470>
   1ab1a:	e35a      	b.n	1b1d2 <_vfprintf_r+0xb26>
   1ab1c:	9409      	str	r4, [sp, #36]	; 0x24
   1ab1e:	2b01      	cmp	r3, #1
   1ab20:	d101      	bne.n	1ab26 <_vfprintf_r+0x47a>
   1ab22:	f000 fc06 	bl	1b332 <_vfprintf_r+0xc86>
   1ab26:	2b02      	cmp	r3, #2
   1ab28:	d000      	beq.n	1ab2c <_vfprintf_r+0x480>
   1ab2a:	e380      	b.n	1b22e <_vfprintf_r+0xb82>
   1ab2c:	9c19      	ldr	r4, [sp, #100]	; 0x64
   1ab2e:	200f      	movs	r0, #15
   1ab30:	46a1      	mov	r9, r4
   1ab32:	46b4      	mov	ip, r6
   1ab34:	ab32      	add	r3, sp, #200	; 0xc8
   1ab36:	0019      	movs	r1, r3
   1ab38:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   1ab3a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1ab3c:	0004      	movs	r4, r0
   1ab3e:	464d      	mov	r5, r9
   1ab40:	4014      	ands	r4, r2
   1ab42:	5d2c      	ldrb	r4, [r5, r4]
   1ab44:	071e      	lsls	r6, r3, #28
   1ab46:	0915      	lsrs	r5, r2, #4
   1ab48:	3901      	subs	r1, #1
   1ab4a:	432e      	orrs	r6, r5
   1ab4c:	700c      	strb	r4, [r1, #0]
   1ab4e:	091c      	lsrs	r4, r3, #4
   1ab50:	0023      	movs	r3, r4
   1ab52:	0034      	movs	r4, r6
   1ab54:	0032      	movs	r2, r6
   1ab56:	431c      	orrs	r4, r3
   1ab58:	d1f0      	bne.n	1ab3c <_vfprintf_r+0x490>
   1ab5a:	920c      	str	r2, [sp, #48]	; 0x30
   1ab5c:	930d      	str	r3, [sp, #52]	; 0x34
   1ab5e:	ab32      	add	r3, sp, #200	; 0xc8
   1ab60:	1a5b      	subs	r3, r3, r1
   1ab62:	9111      	str	r1, [sp, #68]	; 0x44
   1ab64:	4666      	mov	r6, ip
   1ab66:	930e      	str	r3, [sp, #56]	; 0x38
   1ab68:	e70d      	b.n	1a986 <_vfprintf_r+0x2da>
   1ab6a:	4663      	mov	r3, ip
   1ab6c:	431c      	orrs	r4, r3
   1ab6e:	9b07      	ldr	r3, [sp, #28]
   1ab70:	781b      	ldrb	r3, [r3, #0]
   1ab72:	e624      	b.n	1a7be <_vfprintf_r+0x112>
   1ab74:	9b07      	ldr	r3, [sp, #28]
   1ab76:	781b      	ldrb	r3, [r3, #0]
   1ab78:	2b6c      	cmp	r3, #108	; 0x6c
   1ab7a:	d101      	bne.n	1ab80 <_vfprintf_r+0x4d4>
   1ab7c:	f000 fe8c 	bl	1b898 <_vfprintf_r+0x11ec>
   1ab80:	2210      	movs	r2, #16
   1ab82:	4314      	orrs	r4, r2
   1ab84:	e61b      	b.n	1a7be <_vfprintf_r+0x112>
   1ab86:	2900      	cmp	r1, #0
   1ab88:	d001      	beq.n	1ab8e <_vfprintf_r+0x4e2>
   1ab8a:	f001 f8d5 	bl	1bd38 <_vfprintf_r+0x168c>
   1ab8e:	06a3      	lsls	r3, r4, #26
   1ab90:	d501      	bpl.n	1ab96 <_vfprintf_r+0x4ea>
   1ab92:	f000 fe76 	bl	1b882 <_vfprintf_r+0x11d6>
   1ab96:	06e3      	lsls	r3, r4, #27
   1ab98:	d500      	bpl.n	1ab9c <_vfprintf_r+0x4f0>
   1ab9a:	e110      	b.n	1adbe <_vfprintf_r+0x712>
   1ab9c:	0663      	lsls	r3, r4, #25
   1ab9e:	d400      	bmi.n	1aba2 <_vfprintf_r+0x4f6>
   1aba0:	e10d      	b.n	1adbe <_vfprintf_r+0x712>
   1aba2:	4669      	mov	r1, sp
   1aba4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1aba6:	8d09      	ldrh	r1, [r1, #40]	; 0x28
   1aba8:	681a      	ldr	r2, [r3, #0]
   1abaa:	3304      	adds	r3, #4
   1abac:	9208      	str	r2, [sp, #32]
   1abae:	8011      	strh	r1, [r2, #0]
   1abb0:	930f      	str	r3, [sp, #60]	; 0x3c
   1abb2:	e5c9      	b.n	1a748 <_vfprintf_r+0x9c>
   1abb4:	990f      	ldr	r1, [sp, #60]	; 0x3c
   1abb6:	2230      	movs	r2, #48	; 0x30
   1abb8:	680b      	ldr	r3, [r1, #0]
   1abba:	930c      	str	r3, [sp, #48]	; 0x30
   1abbc:	2300      	movs	r3, #0
   1abbe:	930d      	str	r3, [sp, #52]	; 0x34
   1abc0:	3302      	adds	r3, #2
   1abc2:	431c      	orrs	r4, r3
   1abc4:	ab1e      	add	r3, sp, #120	; 0x78
   1abc6:	701a      	strb	r2, [r3, #0]
   1abc8:	3248      	adds	r2, #72	; 0x48
   1abca:	705a      	strb	r2, [r3, #1]
   1abcc:	000b      	movs	r3, r1
   1abce:	3304      	adds	r3, #4
   1abd0:	930f      	str	r3, [sp, #60]	; 0x3c
   1abd2:	4bc1      	ldr	r3, [pc, #772]	; (1aed8 <_vfprintf_r+0x82c>)
   1abd4:	9212      	str	r2, [sp, #72]	; 0x48
   1abd6:	9319      	str	r3, [sp, #100]	; 0x64
   1abd8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   1abda:	2302      	movs	r3, #2
   1abdc:	e6ac      	b.n	1a938 <_vfprintf_r+0x28c>
   1abde:	464b      	mov	r3, r9
   1abe0:	431c      	orrs	r4, r3
   1abe2:	9b07      	ldr	r3, [sp, #28]
   1abe4:	781b      	ldrb	r3, [r3, #0]
   1abe6:	e5ea      	b.n	1a7be <_vfprintf_r+0x112>
   1abe8:	9312      	str	r3, [sp, #72]	; 0x48
   1abea:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1abec:	a916      	add	r1, sp, #88	; 0x58
   1abee:	1d1d      	adds	r5, r3, #4
   1abf0:	681b      	ldr	r3, [r3, #0]
   1abf2:	001a      	movs	r2, r3
   1abf4:	9311      	str	r3, [sp, #68]	; 0x44
   1abf6:	2300      	movs	r3, #0
   1abf8:	77cb      	strb	r3, [r1, #31]
   1abfa:	2a00      	cmp	r2, #0
   1abfc:	d101      	bne.n	1ac02 <_vfprintf_r+0x556>
   1abfe:	f000 ff01 	bl	1ba04 <_vfprintf_r+0x1358>
   1ac02:	4653      	mov	r3, sl
   1ac04:	3301      	adds	r3, #1
   1ac06:	d101      	bne.n	1ac0c <_vfprintf_r+0x560>
   1ac08:	f000 fe64 	bl	1b8d4 <_vfprintf_r+0x1228>
   1ac0c:	4652      	mov	r2, sl
   1ac0e:	2100      	movs	r1, #0
   1ac10:	9811      	ldr	r0, [sp, #68]	; 0x44
   1ac12:	f002 feb5 	bl	1d980 <memchr>
   1ac16:	2800      	cmp	r0, #0
   1ac18:	d101      	bne.n	1ac1e <_vfprintf_r+0x572>
   1ac1a:	f000 ff78 	bl	1bb0e <_vfprintf_r+0x1462>
   1ac1e:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1ac20:	1ac3      	subs	r3, r0, r3
   1ac22:	001a      	movs	r2, r3
   1ac24:	930e      	str	r3, [sp, #56]	; 0x38
   1ac26:	43db      	mvns	r3, r3
   1ac28:	17db      	asrs	r3, r3, #31
   1ac2a:	401a      	ands	r2, r3
   1ac2c:	ab16      	add	r3, sp, #88	; 0x58
   1ac2e:	7fdb      	ldrb	r3, [r3, #31]
   1ac30:	9208      	str	r2, [sp, #32]
   1ac32:	4698      	mov	r8, r3
   1ac34:	2300      	movs	r3, #0
   1ac36:	950f      	str	r5, [sp, #60]	; 0x3c
   1ac38:	9409      	str	r4, [sp, #36]	; 0x24
   1ac3a:	469a      	mov	sl, r3
   1ac3c:	9313      	str	r3, [sp, #76]	; 0x4c
   1ac3e:	e6aa      	b.n	1a996 <_vfprintf_r+0x2ea>
   1ac40:	2308      	movs	r3, #8
   1ac42:	431c      	orrs	r4, r3
   1ac44:	9b07      	ldr	r3, [sp, #28]
   1ac46:	781b      	ldrb	r3, [r3, #0]
   1ac48:	e5b9      	b.n	1a7be <_vfprintf_r+0x112>
   1ac4a:	9312      	str	r3, [sp, #72]	; 0x48
   1ac4c:	2310      	movs	r3, #16
   1ac4e:	431c      	orrs	r4, r3
   1ac50:	06a3      	lsls	r3, r4, #26
   1ac52:	d501      	bpl.n	1ac58 <_vfprintf_r+0x5ac>
   1ac54:	f000 fca7 	bl	1b5a6 <_vfprintf_r+0xefa>
   1ac58:	06e3      	lsls	r3, r4, #27
   1ac5a:	d500      	bpl.n	1ac5e <_vfprintf_r+0x5b2>
   1ac5c:	e3ee      	b.n	1b43c <_vfprintf_r+0xd90>
   1ac5e:	0663      	lsls	r3, r4, #25
   1ac60:	d400      	bmi.n	1ac64 <_vfprintf_r+0x5b8>
   1ac62:	e3eb      	b.n	1b43c <_vfprintf_r+0xd90>
   1ac64:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1ac66:	881a      	ldrh	r2, [r3, #0]
   1ac68:	920c      	str	r2, [sp, #48]	; 0x30
   1ac6a:	2200      	movs	r2, #0
   1ac6c:	3304      	adds	r3, #4
   1ac6e:	920d      	str	r2, [sp, #52]	; 0x34
   1ac70:	930f      	str	r3, [sp, #60]	; 0x3c
   1ac72:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   1ac74:	2300      	movs	r3, #0
   1ac76:	e65f      	b.n	1a938 <_vfprintf_r+0x28c>
   1ac78:	9312      	str	r3, [sp, #72]	; 0x48
   1ac7a:	2310      	movs	r3, #16
   1ac7c:	431c      	orrs	r4, r3
   1ac7e:	06a3      	lsls	r3, r4, #26
   1ac80:	d501      	bpl.n	1ac86 <_vfprintf_r+0x5da>
   1ac82:	f000 fcba 	bl	1b5fa <_vfprintf_r+0xf4e>
   1ac86:	06e3      	lsls	r3, r4, #27
   1ac88:	d500      	bpl.n	1ac8c <_vfprintf_r+0x5e0>
   1ac8a:	e3da      	b.n	1b442 <_vfprintf_r+0xd96>
   1ac8c:	0663      	lsls	r3, r4, #25
   1ac8e:	d400      	bmi.n	1ac92 <_vfprintf_r+0x5e6>
   1ac90:	e3d7      	b.n	1b442 <_vfprintf_r+0xd96>
   1ac92:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1ac94:	881a      	ldrh	r2, [r3, #0]
   1ac96:	920c      	str	r2, [sp, #48]	; 0x30
   1ac98:	2200      	movs	r2, #0
   1ac9a:	3304      	adds	r3, #4
   1ac9c:	920d      	str	r2, [sp, #52]	; 0x34
   1ac9e:	930f      	str	r3, [sp, #60]	; 0x3c
   1aca0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   1aca2:	2301      	movs	r3, #1
   1aca4:	e648      	b.n	1a938 <_vfprintf_r+0x28c>
   1aca6:	9312      	str	r3, [sp, #72]	; 0x48
   1aca8:	2900      	cmp	r1, #0
   1acaa:	d001      	beq.n	1acb0 <_vfprintf_r+0x604>
   1acac:	f001 f857 	bl	1bd5e <_vfprintf_r+0x16b2>
   1acb0:	4b8a      	ldr	r3, [pc, #552]	; (1aedc <_vfprintf_r+0x830>)
   1acb2:	9319      	str	r3, [sp, #100]	; 0x64
   1acb4:	e618      	b.n	1a8e8 <_vfprintf_r+0x23c>
   1acb6:	2301      	movs	r3, #1
   1acb8:	431c      	orrs	r4, r3
   1acba:	9b07      	ldr	r3, [sp, #28]
   1acbc:	781b      	ldrb	r3, [r3, #0]
   1acbe:	e57e      	b.n	1a7be <_vfprintf_r+0x112>
   1acc0:	2380      	movs	r3, #128	; 0x80
   1acc2:	431c      	orrs	r4, r3
   1acc4:	9b07      	ldr	r3, [sp, #28]
   1acc6:	781b      	ldrb	r3, [r3, #0]
   1acc8:	e579      	b.n	1a7be <_vfprintf_r+0x112>
   1acca:	9b07      	ldr	r3, [sp, #28]
   1accc:	781b      	ldrb	r3, [r3, #0]
   1acce:	2800      	cmp	r0, #0
   1acd0:	d000      	beq.n	1acd4 <_vfprintf_r+0x628>
   1acd2:	e574      	b.n	1a7be <_vfprintf_r+0x112>
   1acd4:	2101      	movs	r1, #1
   1acd6:	3020      	adds	r0, #32
   1acd8:	e571      	b.n	1a7be <_vfprintf_r+0x112>
   1acda:	9312      	str	r3, [sp, #72]	; 0x48
   1acdc:	2900      	cmp	r1, #0
   1acde:	d001      	beq.n	1ace4 <_vfprintf_r+0x638>
   1ace0:	f001 f839 	bl	1bd56 <_vfprintf_r+0x16aa>
   1ace4:	2207      	movs	r2, #7
   1ace6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1ace8:	3307      	adds	r3, #7
   1acea:	4393      	bics	r3, r2
   1acec:	3201      	adds	r2, #1
   1acee:	4694      	mov	ip, r2
   1acf0:	449c      	add	ip, r3
   1acf2:	4662      	mov	r2, ip
   1acf4:	920f      	str	r2, [sp, #60]	; 0x3c
   1acf6:	681a      	ldr	r2, [r3, #0]
   1acf8:	9216      	str	r2, [sp, #88]	; 0x58
   1acfa:	685b      	ldr	r3, [r3, #4]
   1acfc:	2201      	movs	r2, #1
   1acfe:	9315      	str	r3, [sp, #84]	; 0x54
   1ad00:	9b15      	ldr	r3, [sp, #84]	; 0x54
   1ad02:	9d16      	ldr	r5, [sp, #88]	; 0x58
   1ad04:	005b      	lsls	r3, r3, #1
   1ad06:	085b      	lsrs	r3, r3, #1
   1ad08:	4698      	mov	r8, r3
   1ad0a:	4252      	negs	r2, r2
   1ad0c:	4b74      	ldr	r3, [pc, #464]	; (1aee0 <_vfprintf_r+0x834>)
   1ad0e:	0028      	movs	r0, r5
   1ad10:	4641      	mov	r1, r8
   1ad12:	f003 fe97 	bl	1ea44 <__aeabi_dcmpun>
   1ad16:	2800      	cmp	r0, #0
   1ad18:	d001      	beq.n	1ad1e <_vfprintf_r+0x672>
   1ad1a:	f000 fcb4 	bl	1b686 <_vfprintf_r+0xfda>
   1ad1e:	2201      	movs	r2, #1
   1ad20:	4b6f      	ldr	r3, [pc, #444]	; (1aee0 <_vfprintf_r+0x834>)
   1ad22:	4252      	negs	r2, r2
   1ad24:	0028      	movs	r0, r5
   1ad26:	4641      	mov	r1, r8
   1ad28:	f7fb fe12 	bl	16950 <__aeabi_dcmple>
   1ad2c:	2800      	cmp	r0, #0
   1ad2e:	d001      	beq.n	1ad34 <_vfprintf_r+0x688>
   1ad30:	f000 fca9 	bl	1b686 <_vfprintf_r+0xfda>
   1ad34:	2200      	movs	r2, #0
   1ad36:	2300      	movs	r3, #0
   1ad38:	9816      	ldr	r0, [sp, #88]	; 0x58
   1ad3a:	9915      	ldr	r1, [sp, #84]	; 0x54
   1ad3c:	f7fb fdfe 	bl	1693c <__aeabi_dcmplt>
   1ad40:	2800      	cmp	r0, #0
   1ad42:	d001      	beq.n	1ad48 <_vfprintf_r+0x69c>
   1ad44:	f000 fd55 	bl	1b7f2 <_vfprintf_r+0x1146>
   1ad48:	ab16      	add	r3, sp, #88	; 0x58
   1ad4a:	7fdb      	ldrb	r3, [r3, #31]
   1ad4c:	4698      	mov	r8, r3
   1ad4e:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1ad50:	2b47      	cmp	r3, #71	; 0x47
   1ad52:	dd01      	ble.n	1ad58 <_vfprintf_r+0x6ac>
   1ad54:	f000 fdb4 	bl	1b8c0 <_vfprintf_r+0x1214>
   1ad58:	4b62      	ldr	r3, [pc, #392]	; (1aee4 <_vfprintf_r+0x838>)
   1ad5a:	9311      	str	r3, [sp, #68]	; 0x44
   1ad5c:	2380      	movs	r3, #128	; 0x80
   1ad5e:	439c      	bics	r4, r3
   1ad60:	3b7d      	subs	r3, #125	; 0x7d
   1ad62:	9308      	str	r3, [sp, #32]
   1ad64:	930e      	str	r3, [sp, #56]	; 0x38
   1ad66:	2300      	movs	r3, #0
   1ad68:	9409      	str	r4, [sp, #36]	; 0x24
   1ad6a:	469a      	mov	sl, r3
   1ad6c:	9313      	str	r3, [sp, #76]	; 0x4c
   1ad6e:	e612      	b.n	1a996 <_vfprintf_r+0x2ea>
   1ad70:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1ad72:	1d1a      	adds	r2, r3, #4
   1ad74:	681b      	ldr	r3, [r3, #0]
   1ad76:	930b      	str	r3, [sp, #44]	; 0x2c
   1ad78:	2b00      	cmp	r3, #0
   1ad7a:	da00      	bge.n	1ad7e <_vfprintf_r+0x6d2>
   1ad7c:	e578      	b.n	1a870 <_vfprintf_r+0x1c4>
   1ad7e:	9b07      	ldr	r3, [sp, #28]
   1ad80:	920f      	str	r2, [sp, #60]	; 0x3c
   1ad82:	781b      	ldrb	r3, [r3, #0]
   1ad84:	e51b      	b.n	1a7be <_vfprintf_r+0x112>
   1ad86:	9312      	str	r3, [sp, #72]	; 0x48
   1ad88:	2900      	cmp	r1, #0
   1ad8a:	d001      	beq.n	1ad90 <_vfprintf_r+0x6e4>
   1ad8c:	f000 ffcc 	bl	1bd28 <_vfprintf_r+0x167c>
   1ad90:	2310      	movs	r3, #16
   1ad92:	431c      	orrs	r4, r3
   1ad94:	e69a      	b.n	1aacc <_vfprintf_r+0x420>
   1ad96:	9312      	str	r3, [sp, #72]	; 0x48
   1ad98:	e771      	b.n	1ac7e <_vfprintf_r+0x5d2>
   1ad9a:	9312      	str	r3, [sp, #72]	; 0x48
   1ad9c:	e758      	b.n	1ac50 <_vfprintf_r+0x5a4>
   1ad9e:	9312      	str	r3, [sp, #72]	; 0x48
   1ada0:	2900      	cmp	r1, #0
   1ada2:	d001      	beq.n	1ada8 <_vfprintf_r+0x6fc>
   1ada4:	f000 ffd3 	bl	1bd4e <_vfprintf_r+0x16a2>
   1ada8:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1adaa:	2b00      	cmp	r3, #0
   1adac:	d100      	bne.n	1adb0 <_vfprintf_r+0x704>
   1adae:	e18d      	b.n	1b0cc <_vfprintf_r+0xa20>
   1adb0:	ad28      	add	r5, sp, #160	; 0xa0
   1adb2:	702b      	strb	r3, [r5, #0]
   1adb4:	2300      	movs	r3, #0
   1adb6:	aa16      	add	r2, sp, #88	; 0x58
   1adb8:	77d3      	strb	r3, [r2, #31]
   1adba:	9409      	str	r4, [sp, #36]	; 0x24
   1adbc:	e678      	b.n	1aab0 <_vfprintf_r+0x404>
   1adbe:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   1adc0:	990a      	ldr	r1, [sp, #40]	; 0x28
   1adc2:	6813      	ldr	r3, [r2, #0]
   1adc4:	6019      	str	r1, [r3, #0]
   1adc6:	0013      	movs	r3, r2
   1adc8:	3304      	adds	r3, #4
   1adca:	930f      	str	r3, [sp, #60]	; 0x3c
   1adcc:	e4bc      	b.n	1a748 <_vfprintf_r+0x9c>
   1adce:	68bc      	ldr	r4, [r7, #8]
   1add0:	4643      	mov	r3, r8
   1add2:	2b00      	cmp	r3, #0
   1add4:	d00f      	beq.n	1adf6 <_vfprintf_r+0x74a>
   1add6:	aa16      	add	r2, sp, #88	; 0x58
   1add8:	231f      	movs	r3, #31
   1adda:	4694      	mov	ip, r2
   1addc:	4463      	add	r3, ip
   1adde:	6033      	str	r3, [r6, #0]
   1ade0:	2301      	movs	r3, #1
   1ade2:	6073      	str	r3, [r6, #4]
   1ade4:	687b      	ldr	r3, [r7, #4]
   1ade6:	3401      	adds	r4, #1
   1ade8:	3301      	adds	r3, #1
   1adea:	60bc      	str	r4, [r7, #8]
   1adec:	607b      	str	r3, [r7, #4]
   1adee:	2b07      	cmp	r3, #7
   1adf0:	dd00      	ble.n	1adf4 <_vfprintf_r+0x748>
   1adf2:	e203      	b.n	1b1fc <_vfprintf_r+0xb50>
   1adf4:	3608      	adds	r6, #8
   1adf6:	464b      	mov	r3, r9
   1adf8:	2b00      	cmp	r3, #0
   1adfa:	d00c      	beq.n	1ae16 <_vfprintf_r+0x76a>
   1adfc:	ab1e      	add	r3, sp, #120	; 0x78
   1adfe:	6033      	str	r3, [r6, #0]
   1ae00:	2302      	movs	r3, #2
   1ae02:	6073      	str	r3, [r6, #4]
   1ae04:	687b      	ldr	r3, [r7, #4]
   1ae06:	3402      	adds	r4, #2
   1ae08:	3301      	adds	r3, #1
   1ae0a:	60bc      	str	r4, [r7, #8]
   1ae0c:	607b      	str	r3, [r7, #4]
   1ae0e:	2b07      	cmp	r3, #7
   1ae10:	dd00      	ble.n	1ae14 <_vfprintf_r+0x768>
   1ae12:	e1fd      	b.n	1b210 <_vfprintf_r+0xb64>
   1ae14:	3608      	adds	r6, #8
   1ae16:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1ae18:	2b80      	cmp	r3, #128	; 0x80
   1ae1a:	d100      	bne.n	1ae1e <_vfprintf_r+0x772>
   1ae1c:	e173      	b.n	1b106 <_vfprintf_r+0xa5a>
   1ae1e:	4653      	mov	r3, sl
   1ae20:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   1ae22:	1a9d      	subs	r5, r3, r2
   1ae24:	2d00      	cmp	r5, #0
   1ae26:	dd32      	ble.n	1ae8e <_vfprintf_r+0x7e2>
   1ae28:	4a2f      	ldr	r2, [pc, #188]	; (1aee8 <_vfprintf_r+0x83c>)
   1ae2a:	687b      	ldr	r3, [r7, #4]
   1ae2c:	4691      	mov	r9, r2
   1ae2e:	2d10      	cmp	r5, #16
   1ae30:	dd22      	ble.n	1ae78 <_vfprintf_r+0x7cc>
   1ae32:	2210      	movs	r2, #16
   1ae34:	4692      	mov	sl, r2
   1ae36:	0022      	movs	r2, r4
   1ae38:	465c      	mov	r4, fp
   1ae3a:	e003      	b.n	1ae44 <_vfprintf_r+0x798>
   1ae3c:	3d10      	subs	r5, #16
   1ae3e:	3608      	adds	r6, #8
   1ae40:	2d10      	cmp	r5, #16
   1ae42:	dd17      	ble.n	1ae74 <_vfprintf_r+0x7c8>
   1ae44:	4649      	mov	r1, r9
   1ae46:	6031      	str	r1, [r6, #0]
   1ae48:	4651      	mov	r1, sl
   1ae4a:	3210      	adds	r2, #16
   1ae4c:	3301      	adds	r3, #1
   1ae4e:	6071      	str	r1, [r6, #4]
   1ae50:	60ba      	str	r2, [r7, #8]
   1ae52:	607b      	str	r3, [r7, #4]
   1ae54:	2b07      	cmp	r3, #7
   1ae56:	ddf1      	ble.n	1ae3c <_vfprintf_r+0x790>
   1ae58:	003a      	movs	r2, r7
   1ae5a:	0021      	movs	r1, r4
   1ae5c:	9806      	ldr	r0, [sp, #24]
   1ae5e:	f003 fb65 	bl	1e52c <__sprint_r>
   1ae62:	2800      	cmp	r0, #0
   1ae64:	d000      	beq.n	1ae68 <_vfprintf_r+0x7bc>
   1ae66:	e18a      	b.n	1b17e <_vfprintf_r+0xad2>
   1ae68:	3d10      	subs	r5, #16
   1ae6a:	68ba      	ldr	r2, [r7, #8]
   1ae6c:	687b      	ldr	r3, [r7, #4]
   1ae6e:	ae32      	add	r6, sp, #200	; 0xc8
   1ae70:	2d10      	cmp	r5, #16
   1ae72:	dce7      	bgt.n	1ae44 <_vfprintf_r+0x798>
   1ae74:	46a3      	mov	fp, r4
   1ae76:	0014      	movs	r4, r2
   1ae78:	464a      	mov	r2, r9
   1ae7a:	1964      	adds	r4, r4, r5
   1ae7c:	3301      	adds	r3, #1
   1ae7e:	6032      	str	r2, [r6, #0]
   1ae80:	6075      	str	r5, [r6, #4]
   1ae82:	60bc      	str	r4, [r7, #8]
   1ae84:	607b      	str	r3, [r7, #4]
   1ae86:	2b07      	cmp	r3, #7
   1ae88:	dd00      	ble.n	1ae8c <_vfprintf_r+0x7e0>
   1ae8a:	e1ad      	b.n	1b1e8 <_vfprintf_r+0xb3c>
   1ae8c:	3608      	adds	r6, #8
   1ae8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1ae90:	05db      	lsls	r3, r3, #23
   1ae92:	d500      	bpl.n	1ae96 <_vfprintf_r+0x7ea>
   1ae94:	e0be      	b.n	1b014 <_vfprintf_r+0x968>
   1ae96:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1ae98:	6033      	str	r3, [r6, #0]
   1ae9a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1ae9c:	469c      	mov	ip, r3
   1ae9e:	6073      	str	r3, [r6, #4]
   1aea0:	687b      	ldr	r3, [r7, #4]
   1aea2:	4464      	add	r4, ip
   1aea4:	3301      	adds	r3, #1
   1aea6:	60bc      	str	r4, [r7, #8]
   1aea8:	607b      	str	r3, [r7, #4]
   1aeaa:	2b07      	cmp	r3, #7
   1aeac:	dd00      	ble.n	1aeb0 <_vfprintf_r+0x804>
   1aeae:	e0a6      	b.n	1affe <_vfprintf_r+0x952>
   1aeb0:	3608      	adds	r6, #8
   1aeb2:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1aeb4:	075b      	lsls	r3, r3, #29
   1aeb6:	d54a      	bpl.n	1af4e <_vfprintf_r+0x8a2>
   1aeb8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1aeba:	9a08      	ldr	r2, [sp, #32]
   1aebc:	1a9d      	subs	r5, r3, r2
   1aebe:	2d00      	cmp	r5, #0
   1aec0:	dd45      	ble.n	1af4e <_vfprintf_r+0x8a2>
   1aec2:	4a0a      	ldr	r2, [pc, #40]	; (1aeec <_vfprintf_r+0x840>)
   1aec4:	687b      	ldr	r3, [r7, #4]
   1aec6:	4690      	mov	r8, r2
   1aec8:	2d10      	cmp	r5, #16
   1aeca:	dd2f      	ble.n	1af2c <_vfprintf_r+0x880>
   1aecc:	2210      	movs	r2, #16
   1aece:	4691      	mov	r9, r2
   1aed0:	0022      	movs	r2, r4
   1aed2:	465c      	mov	r4, fp
   1aed4:	e010      	b.n	1aef8 <_vfprintf_r+0x84c>
   1aed6:	46c0      	nop			; (mov r8, r8)
   1aed8:	00020724 	.word	0x00020724
   1aedc:	00020710 	.word	0x00020710
   1aee0:	7fefffff 	.word	0x7fefffff
   1aee4:	00020700 	.word	0x00020700
   1aee8:	00020750 	.word	0x00020750
   1aeec:	00020740 	.word	0x00020740
   1aef0:	3d10      	subs	r5, #16
   1aef2:	3608      	adds	r6, #8
   1aef4:	2d10      	cmp	r5, #16
   1aef6:	dd17      	ble.n	1af28 <_vfprintf_r+0x87c>
   1aef8:	49d1      	ldr	r1, [pc, #836]	; (1b240 <_vfprintf_r+0xb94>)
   1aefa:	3210      	adds	r2, #16
   1aefc:	6031      	str	r1, [r6, #0]
   1aefe:	4649      	mov	r1, r9
   1af00:	3301      	adds	r3, #1
   1af02:	6071      	str	r1, [r6, #4]
   1af04:	60ba      	str	r2, [r7, #8]
   1af06:	607b      	str	r3, [r7, #4]
   1af08:	2b07      	cmp	r3, #7
   1af0a:	ddf1      	ble.n	1aef0 <_vfprintf_r+0x844>
   1af0c:	003a      	movs	r2, r7
   1af0e:	0021      	movs	r1, r4
   1af10:	9806      	ldr	r0, [sp, #24]
   1af12:	f003 fb0b 	bl	1e52c <__sprint_r>
   1af16:	2800      	cmp	r0, #0
   1af18:	d000      	beq.n	1af1c <_vfprintf_r+0x870>
   1af1a:	e130      	b.n	1b17e <_vfprintf_r+0xad2>
   1af1c:	3d10      	subs	r5, #16
   1af1e:	68ba      	ldr	r2, [r7, #8]
   1af20:	687b      	ldr	r3, [r7, #4]
   1af22:	ae32      	add	r6, sp, #200	; 0xc8
   1af24:	2d10      	cmp	r5, #16
   1af26:	dce7      	bgt.n	1aef8 <_vfprintf_r+0x84c>
   1af28:	46a3      	mov	fp, r4
   1af2a:	0014      	movs	r4, r2
   1af2c:	4642      	mov	r2, r8
   1af2e:	1964      	adds	r4, r4, r5
   1af30:	3301      	adds	r3, #1
   1af32:	c624      	stmia	r6!, {r2, r5}
   1af34:	60bc      	str	r4, [r7, #8]
   1af36:	607b      	str	r3, [r7, #4]
   1af38:	2b07      	cmp	r3, #7
   1af3a:	dd08      	ble.n	1af4e <_vfprintf_r+0x8a2>
   1af3c:	003a      	movs	r2, r7
   1af3e:	4659      	mov	r1, fp
   1af40:	9806      	ldr	r0, [sp, #24]
   1af42:	f003 faf3 	bl	1e52c <__sprint_r>
   1af46:	2800      	cmp	r0, #0
   1af48:	d000      	beq.n	1af4c <_vfprintf_r+0x8a0>
   1af4a:	e13f      	b.n	1b1cc <_vfprintf_r+0xb20>
   1af4c:	68bc      	ldr	r4, [r7, #8]
   1af4e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1af50:	9908      	ldr	r1, [sp, #32]
   1af52:	428b      	cmp	r3, r1
   1af54:	da00      	bge.n	1af58 <_vfprintf_r+0x8ac>
   1af56:	000b      	movs	r3, r1
   1af58:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1af5a:	4694      	mov	ip, r2
   1af5c:	449c      	add	ip, r3
   1af5e:	4663      	mov	r3, ip
   1af60:	930a      	str	r3, [sp, #40]	; 0x28
   1af62:	2c00      	cmp	r4, #0
   1af64:	d000      	beq.n	1af68 <_vfprintf_r+0x8bc>
   1af66:	e129      	b.n	1b1bc <_vfprintf_r+0xb10>
   1af68:	2300      	movs	r3, #0
   1af6a:	ae32      	add	r6, sp, #200	; 0xc8
   1af6c:	607b      	str	r3, [r7, #4]
   1af6e:	f7ff fbeb 	bl	1a748 <_vfprintf_r+0x9c>
   1af72:	9b14      	ldr	r3, [sp, #80]	; 0x50
   1af74:	2b01      	cmp	r3, #1
   1af76:	dc00      	bgt.n	1af7a <_vfprintf_r+0x8ce>
   1af78:	e103      	b.n	1b182 <_vfprintf_r+0xad6>
   1af7a:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1af7c:	3401      	adds	r4, #1
   1af7e:	6033      	str	r3, [r6, #0]
   1af80:	2301      	movs	r3, #1
   1af82:	6073      	str	r3, [r6, #4]
   1af84:	687b      	ldr	r3, [r7, #4]
   1af86:	60bc      	str	r4, [r7, #8]
   1af88:	3301      	adds	r3, #1
   1af8a:	607b      	str	r3, [r7, #4]
   1af8c:	2b07      	cmp	r3, #7
   1af8e:	dd00      	ble.n	1af92 <_vfprintf_r+0x8e6>
   1af90:	e2ef      	b.n	1b572 <_vfprintf_r+0xec6>
   1af92:	3608      	adds	r6, #8
   1af94:	9a18      	ldr	r2, [sp, #96]	; 0x60
   1af96:	3301      	adds	r3, #1
   1af98:	6032      	str	r2, [r6, #0]
   1af9a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   1af9c:	4698      	mov	r8, r3
   1af9e:	4694      	mov	ip, r2
   1afa0:	4464      	add	r4, ip
   1afa2:	6072      	str	r2, [r6, #4]
   1afa4:	60bc      	str	r4, [r7, #8]
   1afa6:	607b      	str	r3, [r7, #4]
   1afa8:	2b07      	cmp	r3, #7
   1afaa:	dd00      	ble.n	1afae <_vfprintf_r+0x902>
   1afac:	e318      	b.n	1b5e0 <_vfprintf_r+0xf34>
   1afae:	3608      	adds	r6, #8
   1afb0:	2200      	movs	r2, #0
   1afb2:	2300      	movs	r3, #0
   1afb4:	9816      	ldr	r0, [sp, #88]	; 0x58
   1afb6:	9915      	ldr	r1, [sp, #84]	; 0x54
   1afb8:	f7fb fcba 	bl	16930 <__aeabi_dcmpeq>
   1afbc:	2800      	cmp	r0, #0
   1afbe:	d000      	beq.n	1afc2 <_vfprintf_r+0x916>
   1afc0:	e1f4      	b.n	1b3ac <_vfprintf_r+0xd00>
   1afc2:	9d11      	ldr	r5, [sp, #68]	; 0x44
   1afc4:	9b14      	ldr	r3, [sp, #80]	; 0x50
   1afc6:	3501      	adds	r5, #1
   1afc8:	3b01      	subs	r3, #1
   1afca:	6035      	str	r5, [r6, #0]
   1afcc:	6073      	str	r3, [r6, #4]
   1afce:	18e4      	adds	r4, r4, r3
   1afd0:	2301      	movs	r3, #1
   1afd2:	469c      	mov	ip, r3
   1afd4:	44e0      	add	r8, ip
   1afd6:	4643      	mov	r3, r8
   1afd8:	60bc      	str	r4, [r7, #8]
   1afda:	607b      	str	r3, [r7, #4]
   1afdc:	2b07      	cmp	r3, #7
   1afde:	dd00      	ble.n	1afe2 <_vfprintf_r+0x936>
   1afe0:	e0e0      	b.n	1b1a4 <_vfprintf_r+0xaf8>
   1afe2:	3608      	adds	r6, #8
   1afe4:	ab21      	add	r3, sp, #132	; 0x84
   1afe6:	6033      	str	r3, [r6, #0]
   1afe8:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   1afea:	469c      	mov	ip, r3
   1afec:	6073      	str	r3, [r6, #4]
   1afee:	4643      	mov	r3, r8
   1aff0:	4464      	add	r4, ip
   1aff2:	3301      	adds	r3, #1
   1aff4:	60bc      	str	r4, [r7, #8]
   1aff6:	607b      	str	r3, [r7, #4]
   1aff8:	2b07      	cmp	r3, #7
   1affa:	dc00      	bgt.n	1affe <_vfprintf_r+0x952>
   1affc:	e758      	b.n	1aeb0 <_vfprintf_r+0x804>
   1affe:	003a      	movs	r2, r7
   1b000:	4659      	mov	r1, fp
   1b002:	9806      	ldr	r0, [sp, #24]
   1b004:	f003 fa92 	bl	1e52c <__sprint_r>
   1b008:	2800      	cmp	r0, #0
   1b00a:	d000      	beq.n	1b00e <_vfprintf_r+0x962>
   1b00c:	e0de      	b.n	1b1cc <_vfprintf_r+0xb20>
   1b00e:	68bc      	ldr	r4, [r7, #8]
   1b010:	ae32      	add	r6, sp, #200	; 0xc8
   1b012:	e74e      	b.n	1aeb2 <_vfprintf_r+0x806>
   1b014:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1b016:	2b65      	cmp	r3, #101	; 0x65
   1b018:	ddab      	ble.n	1af72 <_vfprintf_r+0x8c6>
   1b01a:	2200      	movs	r2, #0
   1b01c:	2300      	movs	r3, #0
   1b01e:	9816      	ldr	r0, [sp, #88]	; 0x58
   1b020:	9915      	ldr	r1, [sp, #84]	; 0x54
   1b022:	f7fb fc85 	bl	16930 <__aeabi_dcmpeq>
   1b026:	2800      	cmp	r0, #0
   1b028:	d100      	bne.n	1b02c <_vfprintf_r+0x980>
   1b02a:	e134      	b.n	1b296 <_vfprintf_r+0xbea>
   1b02c:	4b85      	ldr	r3, [pc, #532]	; (1b244 <_vfprintf_r+0xb98>)
   1b02e:	3401      	adds	r4, #1
   1b030:	6033      	str	r3, [r6, #0]
   1b032:	2301      	movs	r3, #1
   1b034:	6073      	str	r3, [r6, #4]
   1b036:	687b      	ldr	r3, [r7, #4]
   1b038:	60bc      	str	r4, [r7, #8]
   1b03a:	3301      	adds	r3, #1
   1b03c:	607b      	str	r3, [r7, #4]
   1b03e:	2b07      	cmp	r3, #7
   1b040:	dd00      	ble.n	1b044 <_vfprintf_r+0x998>
   1b042:	e3dc      	b.n	1b7fe <_vfprintf_r+0x1152>
   1b044:	3608      	adds	r6, #8
   1b046:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   1b048:	9a14      	ldr	r2, [sp, #80]	; 0x50
   1b04a:	4293      	cmp	r3, r2
   1b04c:	db03      	blt.n	1b056 <_vfprintf_r+0x9aa>
   1b04e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1b050:	07db      	lsls	r3, r3, #31
   1b052:	d400      	bmi.n	1b056 <_vfprintf_r+0x9aa>
   1b054:	e3b7      	b.n	1b7c6 <_vfprintf_r+0x111a>
   1b056:	9b18      	ldr	r3, [sp, #96]	; 0x60
   1b058:	68ba      	ldr	r2, [r7, #8]
   1b05a:	6033      	str	r3, [r6, #0]
   1b05c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   1b05e:	469c      	mov	ip, r3
   1b060:	6073      	str	r3, [r6, #4]
   1b062:	687b      	ldr	r3, [r7, #4]
   1b064:	4462      	add	r2, ip
   1b066:	3301      	adds	r3, #1
   1b068:	0014      	movs	r4, r2
   1b06a:	60ba      	str	r2, [r7, #8]
   1b06c:	607b      	str	r3, [r7, #4]
   1b06e:	2b07      	cmp	r3, #7
   1b070:	dd01      	ble.n	1b076 <_vfprintf_r+0x9ca>
   1b072:	f000 fc19 	bl	1b8a8 <_vfprintf_r+0x11fc>
   1b076:	3608      	adds	r6, #8
   1b078:	9b14      	ldr	r3, [sp, #80]	; 0x50
   1b07a:	1e5d      	subs	r5, r3, #1
   1b07c:	2d00      	cmp	r5, #0
   1b07e:	dc00      	bgt.n	1b082 <_vfprintf_r+0x9d6>
   1b080:	e717      	b.n	1aeb2 <_vfprintf_r+0x806>
   1b082:	4a71      	ldr	r2, [pc, #452]	; (1b248 <_vfprintf_r+0xb9c>)
   1b084:	687b      	ldr	r3, [r7, #4]
   1b086:	4691      	mov	r9, r2
   1b088:	2d10      	cmp	r5, #16
   1b08a:	dc00      	bgt.n	1b08e <_vfprintf_r+0x9e2>
   1b08c:	e1c3      	b.n	1b416 <_vfprintf_r+0xd6a>
   1b08e:	2210      	movs	r2, #16
   1b090:	4690      	mov	r8, r2
   1b092:	0022      	movs	r2, r4
   1b094:	464c      	mov	r4, r9
   1b096:	46d9      	mov	r9, fp
   1b098:	e004      	b.n	1b0a4 <_vfprintf_r+0x9f8>
   1b09a:	3608      	adds	r6, #8
   1b09c:	3d10      	subs	r5, #16
   1b09e:	2d10      	cmp	r5, #16
   1b0a0:	dc00      	bgt.n	1b0a4 <_vfprintf_r+0x9f8>
   1b0a2:	e37c      	b.n	1b79e <_vfprintf_r+0x10f2>
   1b0a4:	4641      	mov	r1, r8
   1b0a6:	3210      	adds	r2, #16
   1b0a8:	3301      	adds	r3, #1
   1b0aa:	6034      	str	r4, [r6, #0]
   1b0ac:	6071      	str	r1, [r6, #4]
   1b0ae:	60ba      	str	r2, [r7, #8]
   1b0b0:	607b      	str	r3, [r7, #4]
   1b0b2:	2b07      	cmp	r3, #7
   1b0b4:	ddf1      	ble.n	1b09a <_vfprintf_r+0x9ee>
   1b0b6:	003a      	movs	r2, r7
   1b0b8:	4649      	mov	r1, r9
   1b0ba:	9806      	ldr	r0, [sp, #24]
   1b0bc:	f003 fa36 	bl	1e52c <__sprint_r>
   1b0c0:	2800      	cmp	r0, #0
   1b0c2:	d10b      	bne.n	1b0dc <_vfprintf_r+0xa30>
   1b0c4:	68ba      	ldr	r2, [r7, #8]
   1b0c6:	687b      	ldr	r3, [r7, #4]
   1b0c8:	ae32      	add	r6, sp, #200	; 0xc8
   1b0ca:	e7e7      	b.n	1b09c <_vfprintf_r+0x9f0>
   1b0cc:	68bb      	ldr	r3, [r7, #8]
   1b0ce:	46d9      	mov	r9, fp
   1b0d0:	2b00      	cmp	r3, #0
   1b0d2:	d001      	beq.n	1b0d8 <_vfprintf_r+0xa2c>
   1b0d4:	f000 fd4c 	bl	1bb70 <_vfprintf_r+0x14c4>
   1b0d8:	2300      	movs	r3, #0
   1b0da:	607b      	str	r3, [r7, #4]
   1b0dc:	464b      	mov	r3, r9
   1b0de:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   1b0e0:	07db      	lsls	r3, r3, #31
   1b0e2:	d40d      	bmi.n	1b100 <_vfprintf_r+0xa54>
   1b0e4:	464b      	mov	r3, r9
   1b0e6:	899b      	ldrh	r3, [r3, #12]
   1b0e8:	059a      	lsls	r2, r3, #22
   1b0ea:	d505      	bpl.n	1b0f8 <_vfprintf_r+0xa4c>
   1b0ec:	065b      	lsls	r3, r3, #25
   1b0ee:	d401      	bmi.n	1b0f4 <_vfprintf_r+0xa48>
   1b0f0:	f7ff fb8d 	bl	1a80e <_vfprintf_r+0x162>
   1b0f4:	f7ff fb88 	bl	1a808 <_vfprintf_r+0x15c>
   1b0f8:	464b      	mov	r3, r9
   1b0fa:	6d98      	ldr	r0, [r3, #88]	; 0x58
   1b0fc:	f002 fbc6 	bl	1d88c <__retarget_lock_release_recursive>
   1b100:	464b      	mov	r3, r9
   1b102:	899b      	ldrh	r3, [r3, #12]
   1b104:	e7f2      	b.n	1b0ec <_vfprintf_r+0xa40>
   1b106:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1b108:	9a08      	ldr	r2, [sp, #32]
   1b10a:	1a9d      	subs	r5, r3, r2
   1b10c:	2d00      	cmp	r5, #0
   1b10e:	dc00      	bgt.n	1b112 <_vfprintf_r+0xa66>
   1b110:	e685      	b.n	1ae1e <_vfprintf_r+0x772>
   1b112:	4a4d      	ldr	r2, [pc, #308]	; (1b248 <_vfprintf_r+0xb9c>)
   1b114:	687b      	ldr	r3, [r7, #4]
   1b116:	4691      	mov	r9, r2
   1b118:	2d10      	cmp	r5, #16
   1b11a:	dd24      	ble.n	1b166 <_vfprintf_r+0xaba>
   1b11c:	2210      	movs	r2, #16
   1b11e:	0021      	movs	r1, r4
   1b120:	4690      	mov	r8, r2
   1b122:	465c      	mov	r4, fp
   1b124:	0032      	movs	r2, r6
   1b126:	464e      	mov	r6, r9
   1b128:	e003      	b.n	1b132 <_vfprintf_r+0xa86>
   1b12a:	3d10      	subs	r5, #16
   1b12c:	3208      	adds	r2, #8
   1b12e:	2d10      	cmp	r5, #16
   1b130:	dd15      	ble.n	1b15e <_vfprintf_r+0xab2>
   1b132:	4640      	mov	r0, r8
   1b134:	3110      	adds	r1, #16
   1b136:	3301      	adds	r3, #1
   1b138:	6016      	str	r6, [r2, #0]
   1b13a:	6050      	str	r0, [r2, #4]
   1b13c:	60b9      	str	r1, [r7, #8]
   1b13e:	607b      	str	r3, [r7, #4]
   1b140:	2b07      	cmp	r3, #7
   1b142:	ddf2      	ble.n	1b12a <_vfprintf_r+0xa7e>
   1b144:	003a      	movs	r2, r7
   1b146:	0021      	movs	r1, r4
   1b148:	9806      	ldr	r0, [sp, #24]
   1b14a:	f003 f9ef 	bl	1e52c <__sprint_r>
   1b14e:	2800      	cmp	r0, #0
   1b150:	d115      	bne.n	1b17e <_vfprintf_r+0xad2>
   1b152:	3d10      	subs	r5, #16
   1b154:	68b9      	ldr	r1, [r7, #8]
   1b156:	687b      	ldr	r3, [r7, #4]
   1b158:	aa32      	add	r2, sp, #200	; 0xc8
   1b15a:	2d10      	cmp	r5, #16
   1b15c:	dce9      	bgt.n	1b132 <_vfprintf_r+0xa86>
   1b15e:	46a3      	mov	fp, r4
   1b160:	46b1      	mov	r9, r6
   1b162:	000c      	movs	r4, r1
   1b164:	0016      	movs	r6, r2
   1b166:	464a      	mov	r2, r9
   1b168:	1964      	adds	r4, r4, r5
   1b16a:	3301      	adds	r3, #1
   1b16c:	6032      	str	r2, [r6, #0]
   1b16e:	6075      	str	r5, [r6, #4]
   1b170:	60bc      	str	r4, [r7, #8]
   1b172:	607b      	str	r3, [r7, #4]
   1b174:	2b07      	cmp	r3, #7
   1b176:	dd00      	ble.n	1b17a <_vfprintf_r+0xace>
   1b178:	e263      	b.n	1b642 <_vfprintf_r+0xf96>
   1b17a:	3608      	adds	r6, #8
   1b17c:	e64f      	b.n	1ae1e <_vfprintf_r+0x772>
   1b17e:	46a1      	mov	r9, r4
   1b180:	e7ac      	b.n	1b0dc <_vfprintf_r+0xa30>
   1b182:	2301      	movs	r3, #1
   1b184:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1b186:	4213      	tst	r3, r2
   1b188:	d000      	beq.n	1b18c <_vfprintf_r+0xae0>
   1b18a:	e6f6      	b.n	1af7a <_vfprintf_r+0x8ce>
   1b18c:	6073      	str	r3, [r6, #4]
   1b18e:	687b      	ldr	r3, [r7, #4]
   1b190:	9a11      	ldr	r2, [sp, #68]	; 0x44
   1b192:	3301      	adds	r3, #1
   1b194:	3401      	adds	r4, #1
   1b196:	6032      	str	r2, [r6, #0]
   1b198:	60bc      	str	r4, [r7, #8]
   1b19a:	4698      	mov	r8, r3
   1b19c:	607b      	str	r3, [r7, #4]
   1b19e:	2b07      	cmp	r3, #7
   1b1a0:	dc00      	bgt.n	1b1a4 <_vfprintf_r+0xaf8>
   1b1a2:	e71e      	b.n	1afe2 <_vfprintf_r+0x936>
   1b1a4:	003a      	movs	r2, r7
   1b1a6:	4659      	mov	r1, fp
   1b1a8:	9806      	ldr	r0, [sp, #24]
   1b1aa:	f003 f9bf 	bl	1e52c <__sprint_r>
   1b1ae:	2800      	cmp	r0, #0
   1b1b0:	d10c      	bne.n	1b1cc <_vfprintf_r+0xb20>
   1b1b2:	687b      	ldr	r3, [r7, #4]
   1b1b4:	68bc      	ldr	r4, [r7, #8]
   1b1b6:	4698      	mov	r8, r3
   1b1b8:	ae32      	add	r6, sp, #200	; 0xc8
   1b1ba:	e713      	b.n	1afe4 <_vfprintf_r+0x938>
   1b1bc:	003a      	movs	r2, r7
   1b1be:	4659      	mov	r1, fp
   1b1c0:	9806      	ldr	r0, [sp, #24]
   1b1c2:	f003 f9b3 	bl	1e52c <__sprint_r>
   1b1c6:	2800      	cmp	r0, #0
   1b1c8:	d100      	bne.n	1b1cc <_vfprintf_r+0xb20>
   1b1ca:	e6cd      	b.n	1af68 <_vfprintf_r+0x8bc>
   1b1cc:	46d9      	mov	r9, fp
   1b1ce:	e785      	b.n	1b0dc <_vfprintf_r+0xa30>
   1b1d0:	9c09      	ldr	r4, [sp, #36]	; 0x24
   1b1d2:	2b01      	cmp	r3, #1
   1b1d4:	d100      	bne.n	1b1d8 <_vfprintf_r+0xb2c>
   1b1d6:	e148      	b.n	1b46a <_vfprintf_r+0xdbe>
   1b1d8:	2b02      	cmp	r3, #2
   1b1da:	d123      	bne.n	1b224 <_vfprintf_r+0xb78>
   1b1dc:	9409      	str	r4, [sp, #36]	; 0x24
   1b1de:	2300      	movs	r3, #0
   1b1e0:	2400      	movs	r4, #0
   1b1e2:	930c      	str	r3, [sp, #48]	; 0x30
   1b1e4:	940d      	str	r4, [sp, #52]	; 0x34
   1b1e6:	e4a1      	b.n	1ab2c <_vfprintf_r+0x480>
   1b1e8:	003a      	movs	r2, r7
   1b1ea:	4659      	mov	r1, fp
   1b1ec:	9806      	ldr	r0, [sp, #24]
   1b1ee:	f003 f99d 	bl	1e52c <__sprint_r>
   1b1f2:	2800      	cmp	r0, #0
   1b1f4:	d1ea      	bne.n	1b1cc <_vfprintf_r+0xb20>
   1b1f6:	68bc      	ldr	r4, [r7, #8]
   1b1f8:	ae32      	add	r6, sp, #200	; 0xc8
   1b1fa:	e648      	b.n	1ae8e <_vfprintf_r+0x7e2>
   1b1fc:	003a      	movs	r2, r7
   1b1fe:	4659      	mov	r1, fp
   1b200:	9806      	ldr	r0, [sp, #24]
   1b202:	f003 f993 	bl	1e52c <__sprint_r>
   1b206:	2800      	cmp	r0, #0
   1b208:	d1e0      	bne.n	1b1cc <_vfprintf_r+0xb20>
   1b20a:	68bc      	ldr	r4, [r7, #8]
   1b20c:	ae32      	add	r6, sp, #200	; 0xc8
   1b20e:	e5f2      	b.n	1adf6 <_vfprintf_r+0x74a>
   1b210:	003a      	movs	r2, r7
   1b212:	4659      	mov	r1, fp
   1b214:	9806      	ldr	r0, [sp, #24]
   1b216:	f003 f989 	bl	1e52c <__sprint_r>
   1b21a:	2800      	cmp	r0, #0
   1b21c:	d1d6      	bne.n	1b1cc <_vfprintf_r+0xb20>
   1b21e:	68bc      	ldr	r4, [r7, #8]
   1b220:	ae32      	add	r6, sp, #200	; 0xc8
   1b222:	e5f8      	b.n	1ae16 <_vfprintf_r+0x76a>
   1b224:	9409      	str	r4, [sp, #36]	; 0x24
   1b226:	2300      	movs	r3, #0
   1b228:	2400      	movs	r4, #0
   1b22a:	930c      	str	r3, [sp, #48]	; 0x30
   1b22c:	940d      	str	r4, [sp, #52]	; 0x34
   1b22e:	980c      	ldr	r0, [sp, #48]	; 0x30
   1b230:	990d      	ldr	r1, [sp, #52]	; 0x34
   1b232:	4653      	mov	r3, sl
   1b234:	aa32      	add	r2, sp, #200	; 0xc8
   1b236:	4691      	mov	r9, r2
   1b238:	9308      	str	r3, [sp, #32]
   1b23a:	46b2      	mov	sl, r6
   1b23c:	e007      	b.n	1b24e <_vfprintf_r+0xba2>
   1b23e:	46c0      	nop			; (mov r8, r8)
   1b240:	00020740 	.word	0x00020740
   1b244:	0001f9ac 	.word	0x0001f9ac
   1b248:	00020750 	.word	0x00020750
   1b24c:	46a1      	mov	r9, r4
   1b24e:	074a      	lsls	r2, r1, #29
   1b250:	4694      	mov	ip, r2
   1b252:	464b      	mov	r3, r9
   1b254:	4665      	mov	r5, ip
   1b256:	1e5c      	subs	r4, r3, #1
   1b258:	08c6      	lsrs	r6, r0, #3
   1b25a:	2307      	movs	r3, #7
   1b25c:	08ca      	lsrs	r2, r1, #3
   1b25e:	4335      	orrs	r5, r6
   1b260:	0011      	movs	r1, r2
   1b262:	002a      	movs	r2, r5
   1b264:	4003      	ands	r3, r0
   1b266:	3330      	adds	r3, #48	; 0x30
   1b268:	7023      	strb	r3, [r4, #0]
   1b26a:	0028      	movs	r0, r5
   1b26c:	430a      	orrs	r2, r1
   1b26e:	d1ed      	bne.n	1b24c <_vfprintf_r+0xba0>
   1b270:	900c      	str	r0, [sp, #48]	; 0x30
   1b272:	910d      	str	r1, [sp, #52]	; 0x34
   1b274:	9908      	ldr	r1, [sp, #32]
   1b276:	4656      	mov	r6, sl
   1b278:	468a      	mov	sl, r1
   1b27a:	9909      	ldr	r1, [sp, #36]	; 0x24
   1b27c:	464a      	mov	r2, r9
   1b27e:	9411      	str	r4, [sp, #68]	; 0x44
   1b280:	07c9      	lsls	r1, r1, #31
   1b282:	d500      	bpl.n	1b286 <_vfprintf_r+0xbda>
   1b284:	e0e0      	b.n	1b448 <_vfprintf_r+0xd9c>
   1b286:	ab32      	add	r3, sp, #200	; 0xc8
   1b288:	1b1b      	subs	r3, r3, r4
   1b28a:	930e      	str	r3, [sp, #56]	; 0x38
   1b28c:	f7ff fb7b 	bl	1a986 <_vfprintf_r+0x2da>
   1b290:	9c07      	ldr	r4, [sp, #28]
   1b292:	f7ff fa7d 	bl	1a790 <_vfprintf_r+0xe4>
   1b296:	981f      	ldr	r0, [sp, #124]	; 0x7c
   1b298:	2800      	cmp	r0, #0
   1b29a:	dc00      	bgt.n	1b29e <_vfprintf_r+0xbf2>
   1b29c:	e2b9      	b.n	1b812 <_vfprintf_r+0x1166>
   1b29e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   1b2a0:	9914      	ldr	r1, [sp, #80]	; 0x50
   1b2a2:	0013      	movs	r3, r2
   1b2a4:	4690      	mov	r8, r2
   1b2a6:	428b      	cmp	r3, r1
   1b2a8:	dd00      	ble.n	1b2ac <_vfprintf_r+0xc00>
   1b2aa:	4688      	mov	r8, r1
   1b2ac:	4643      	mov	r3, r8
   1b2ae:	2b00      	cmp	r3, #0
   1b2b0:	dd0c      	ble.n	1b2cc <_vfprintf_r+0xc20>
   1b2b2:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1b2b4:	4444      	add	r4, r8
   1b2b6:	6033      	str	r3, [r6, #0]
   1b2b8:	4643      	mov	r3, r8
   1b2ba:	6073      	str	r3, [r6, #4]
   1b2bc:	687b      	ldr	r3, [r7, #4]
   1b2be:	60bc      	str	r4, [r7, #8]
   1b2c0:	3301      	adds	r3, #1
   1b2c2:	607b      	str	r3, [r7, #4]
   1b2c4:	2b07      	cmp	r3, #7
   1b2c6:	dd00      	ble.n	1b2ca <_vfprintf_r+0xc1e>
   1b2c8:	e389      	b.n	1b9de <_vfprintf_r+0x1332>
   1b2ca:	3608      	adds	r6, #8
   1b2cc:	4643      	mov	r3, r8
   1b2ce:	43db      	mvns	r3, r3
   1b2d0:	4642      	mov	r2, r8
   1b2d2:	17db      	asrs	r3, r3, #31
   1b2d4:	4013      	ands	r3, r2
   1b2d6:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   1b2d8:	1ad3      	subs	r3, r2, r3
   1b2da:	4698      	mov	r8, r3
   1b2dc:	2b00      	cmp	r3, #0
   1b2de:	dc00      	bgt.n	1b2e2 <_vfprintf_r+0xc36>
   1b2e0:	e0eb      	b.n	1b4ba <_vfprintf_r+0xe0e>
   1b2e2:	2b10      	cmp	r3, #16
   1b2e4:	dc01      	bgt.n	1b2ea <_vfprintf_r+0xc3e>
   1b2e6:	f000 fcd9 	bl	1bc9c <_vfprintf_r+0x15f0>
   1b2ea:	4adc      	ldr	r2, [pc, #880]	; (1b65c <_vfprintf_r+0xfb0>)
   1b2ec:	687b      	ldr	r3, [r7, #4]
   1b2ee:	4691      	mov	r9, r2
   1b2f0:	2210      	movs	r2, #16
   1b2f2:	464d      	mov	r5, r9
   1b2f4:	4692      	mov	sl, r2
   1b2f6:	0022      	movs	r2, r4
   1b2f8:	4644      	mov	r4, r8
   1b2fa:	46d8      	mov	r8, fp
   1b2fc:	e004      	b.n	1b308 <_vfprintf_r+0xc5c>
   1b2fe:	3608      	adds	r6, #8
   1b300:	3c10      	subs	r4, #16
   1b302:	2c10      	cmp	r4, #16
   1b304:	dc00      	bgt.n	1b308 <_vfprintf_r+0xc5c>
   1b306:	e0bf      	b.n	1b488 <_vfprintf_r+0xddc>
   1b308:	4651      	mov	r1, sl
   1b30a:	3210      	adds	r2, #16
   1b30c:	3301      	adds	r3, #1
   1b30e:	6035      	str	r5, [r6, #0]
   1b310:	6071      	str	r1, [r6, #4]
   1b312:	60ba      	str	r2, [r7, #8]
   1b314:	607b      	str	r3, [r7, #4]
   1b316:	2b07      	cmp	r3, #7
   1b318:	ddf1      	ble.n	1b2fe <_vfprintf_r+0xc52>
   1b31a:	003a      	movs	r2, r7
   1b31c:	4641      	mov	r1, r8
   1b31e:	9806      	ldr	r0, [sp, #24]
   1b320:	f003 f904 	bl	1e52c <__sprint_r>
   1b324:	2800      	cmp	r0, #0
   1b326:	d000      	beq.n	1b32a <_vfprintf_r+0xc7e>
   1b328:	e3b6      	b.n	1ba98 <_vfprintf_r+0x13ec>
   1b32a:	68ba      	ldr	r2, [r7, #8]
   1b32c:	687b      	ldr	r3, [r7, #4]
   1b32e:	ae32      	add	r6, sp, #200	; 0xc8
   1b330:	e7e6      	b.n	1b300 <_vfprintf_r+0xc54>
   1b332:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1b334:	2b00      	cmp	r3, #0
   1b336:	d100      	bne.n	1b33a <_vfprintf_r+0xc8e>
   1b338:	e092      	b.n	1b460 <_vfprintf_r+0xdb4>
   1b33a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   1b33c:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   1b33e:	ab32      	add	r3, sp, #200	; 0xc8
   1b340:	46b1      	mov	r9, r6
   1b342:	001e      	movs	r6, r3
   1b344:	0020      	movs	r0, r4
   1b346:	0029      	movs	r1, r5
   1b348:	220a      	movs	r2, #10
   1b34a:	2300      	movs	r3, #0
   1b34c:	f7fb fb58 	bl	16a00 <__aeabi_uldivmod>
   1b350:	3e01      	subs	r6, #1
   1b352:	3230      	adds	r2, #48	; 0x30
   1b354:	7032      	strb	r2, [r6, #0]
   1b356:	2300      	movs	r3, #0
   1b358:	0020      	movs	r0, r4
   1b35a:	0029      	movs	r1, r5
   1b35c:	220a      	movs	r2, #10
   1b35e:	f7fb fb4f 	bl	16a00 <__aeabi_uldivmod>
   1b362:	0003      	movs	r3, r0
   1b364:	0004      	movs	r4, r0
   1b366:	000d      	movs	r5, r1
   1b368:	430b      	orrs	r3, r1
   1b36a:	d1eb      	bne.n	1b344 <_vfprintf_r+0xc98>
   1b36c:	0032      	movs	r2, r6
   1b36e:	ab32      	add	r3, sp, #200	; 0xc8
   1b370:	1a9b      	subs	r3, r3, r2
   1b372:	9611      	str	r6, [sp, #68]	; 0x44
   1b374:	940c      	str	r4, [sp, #48]	; 0x30
   1b376:	950d      	str	r5, [sp, #52]	; 0x34
   1b378:	464e      	mov	r6, r9
   1b37a:	930e      	str	r3, [sp, #56]	; 0x38
   1b37c:	f7ff fb03 	bl	1a986 <_vfprintf_r+0x2da>
   1b380:	2300      	movs	r3, #0
   1b382:	930e      	str	r3, [sp, #56]	; 0x38
   1b384:	ab32      	add	r3, sp, #200	; 0xc8
   1b386:	9311      	str	r3, [sp, #68]	; 0x44
   1b388:	f7ff fafd 	bl	1a986 <_vfprintf_r+0x2da>
   1b38c:	003a      	movs	r2, r7
   1b38e:	4659      	mov	r1, fp
   1b390:	9806      	ldr	r0, [sp, #24]
   1b392:	f003 f8cb 	bl	1e52c <__sprint_r>
   1b396:	2800      	cmp	r0, #0
   1b398:	d000      	beq.n	1b39c <_vfprintf_r+0xcf0>
   1b39a:	e717      	b.n	1b1cc <_vfprintf_r+0xb20>
   1b39c:	ab16      	add	r3, sp, #88	; 0x58
   1b39e:	7fdb      	ldrb	r3, [r3, #31]
   1b3a0:	68bc      	ldr	r4, [r7, #8]
   1b3a2:	4698      	mov	r8, r3
   1b3a4:	ae32      	add	r6, sp, #200	; 0xc8
   1b3a6:	e513      	b.n	1add0 <_vfprintf_r+0x724>
   1b3a8:	46b1      	mov	r9, r6
   1b3aa:	e697      	b.n	1b0dc <_vfprintf_r+0xa30>
   1b3ac:	9b14      	ldr	r3, [sp, #80]	; 0x50
   1b3ae:	1e5d      	subs	r5, r3, #1
   1b3b0:	2d00      	cmp	r5, #0
   1b3b2:	dc00      	bgt.n	1b3b6 <_vfprintf_r+0xd0a>
   1b3b4:	e616      	b.n	1afe4 <_vfprintf_r+0x938>
   1b3b6:	4ba9      	ldr	r3, [pc, #676]	; (1b65c <_vfprintf_r+0xfb0>)
   1b3b8:	4699      	mov	r9, r3
   1b3ba:	2d10      	cmp	r5, #16
   1b3bc:	dc00      	bgt.n	1b3c0 <_vfprintf_r+0xd14>
   1b3be:	e10a      	b.n	1b5d6 <_vfprintf_r+0xf2a>
   1b3c0:	2310      	movs	r3, #16
   1b3c2:	0022      	movs	r2, r4
   1b3c4:	469a      	mov	sl, r3
   1b3c6:	465c      	mov	r4, fp
   1b3c8:	4643      	mov	r3, r8
   1b3ca:	e004      	b.n	1b3d6 <_vfprintf_r+0xd2a>
   1b3cc:	3608      	adds	r6, #8
   1b3ce:	3d10      	subs	r5, #16
   1b3d0:	2d10      	cmp	r5, #16
   1b3d2:	dc00      	bgt.n	1b3d6 <_vfprintf_r+0xd2a>
   1b3d4:	e0fc      	b.n	1b5d0 <_vfprintf_r+0xf24>
   1b3d6:	4649      	mov	r1, r9
   1b3d8:	6031      	str	r1, [r6, #0]
   1b3da:	4651      	mov	r1, sl
   1b3dc:	3210      	adds	r2, #16
   1b3de:	3301      	adds	r3, #1
   1b3e0:	6071      	str	r1, [r6, #4]
   1b3e2:	60ba      	str	r2, [r7, #8]
   1b3e4:	607b      	str	r3, [r7, #4]
   1b3e6:	2b07      	cmp	r3, #7
   1b3e8:	ddf0      	ble.n	1b3cc <_vfprintf_r+0xd20>
   1b3ea:	003a      	movs	r2, r7
   1b3ec:	0021      	movs	r1, r4
   1b3ee:	9806      	ldr	r0, [sp, #24]
   1b3f0:	f003 f89c 	bl	1e52c <__sprint_r>
   1b3f4:	2800      	cmp	r0, #0
   1b3f6:	d000      	beq.n	1b3fa <_vfprintf_r+0xd4e>
   1b3f8:	e6c1      	b.n	1b17e <_vfprintf_r+0xad2>
   1b3fa:	68ba      	ldr	r2, [r7, #8]
   1b3fc:	687b      	ldr	r3, [r7, #4]
   1b3fe:	ae32      	add	r6, sp, #200	; 0xc8
   1b400:	e7e5      	b.n	1b3ce <_vfprintf_r+0xd22>
   1b402:	990c      	ldr	r1, [sp, #48]	; 0x30
   1b404:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   1b406:	0008      	movs	r0, r1
   1b408:	4310      	orrs	r0, r2
   1b40a:	2302      	movs	r3, #2
   1b40c:	0002      	movs	r2, r0
   1b40e:	f7ff fa93 	bl	1a938 <_vfprintf_r+0x28c>
   1b412:	46a3      	mov	fp, r4
   1b414:	0014      	movs	r4, r2
   1b416:	464a      	mov	r2, r9
   1b418:	1964      	adds	r4, r4, r5
   1b41a:	3301      	adds	r3, #1
   1b41c:	6032      	str	r2, [r6, #0]
   1b41e:	6075      	str	r5, [r6, #4]
   1b420:	60bc      	str	r4, [r7, #8]
   1b422:	607b      	str	r3, [r7, #4]
   1b424:	2b07      	cmp	r3, #7
   1b426:	dc00      	bgt.n	1b42a <_vfprintf_r+0xd7e>
   1b428:	e542      	b.n	1aeb0 <_vfprintf_r+0x804>
   1b42a:	e5e8      	b.n	1affe <_vfprintf_r+0x952>
   1b42c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1b42e:	681a      	ldr	r2, [r3, #0]
   1b430:	f7ff fa68 	bl	1a904 <_vfprintf_r+0x258>
   1b434:	6813      	ldr	r3, [r2, #0]
   1b436:	9308      	str	r3, [sp, #32]
   1b438:	f7ff fb57 	bl	1aaea <_vfprintf_r+0x43e>
   1b43c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1b43e:	681a      	ldr	r2, [r3, #0]
   1b440:	e412      	b.n	1ac68 <_vfprintf_r+0x5bc>
   1b442:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1b444:	681a      	ldr	r2, [r3, #0]
   1b446:	e426      	b.n	1ac96 <_vfprintf_r+0x5ea>
   1b448:	2b30      	cmp	r3, #48	; 0x30
   1b44a:	d100      	bne.n	1b44e <_vfprintf_r+0xda2>
   1b44c:	e23c      	b.n	1b8c8 <_vfprintf_r+0x121c>
   1b44e:	2330      	movs	r3, #48	; 0x30
   1b450:	3a02      	subs	r2, #2
   1b452:	7013      	strb	r3, [r2, #0]
   1b454:	ab32      	add	r3, sp, #200	; 0xc8
   1b456:	1a9b      	subs	r3, r3, r2
   1b458:	930e      	str	r3, [sp, #56]	; 0x38
   1b45a:	9211      	str	r2, [sp, #68]	; 0x44
   1b45c:	f7ff fa93 	bl	1a986 <_vfprintf_r+0x2da>
   1b460:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1b462:	2b09      	cmp	r3, #9
   1b464:	d900      	bls.n	1b468 <_vfprintf_r+0xdbc>
   1b466:	e768      	b.n	1b33a <_vfprintf_r+0xc8e>
   1b468:	9c09      	ldr	r4, [sp, #36]	; 0x24
   1b46a:	2227      	movs	r2, #39	; 0x27
   1b46c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1b46e:	a928      	add	r1, sp, #160	; 0xa0
   1b470:	3330      	adds	r3, #48	; 0x30
   1b472:	548b      	strb	r3, [r1, r2]
   1b474:	2301      	movs	r3, #1
   1b476:	aa16      	add	r2, sp, #88	; 0x58
   1b478:	4694      	mov	ip, r2
   1b47a:	930e      	str	r3, [sp, #56]	; 0x38
   1b47c:	336e      	adds	r3, #110	; 0x6e
   1b47e:	4463      	add	r3, ip
   1b480:	9409      	str	r4, [sp, #36]	; 0x24
   1b482:	9311      	str	r3, [sp, #68]	; 0x44
   1b484:	f7ff fa7f 	bl	1a986 <_vfprintf_r+0x2da>
   1b488:	46c3      	mov	fp, r8
   1b48a:	46a9      	mov	r9, r5
   1b48c:	46a0      	mov	r8, r4
   1b48e:	0014      	movs	r4, r2
   1b490:	464a      	mov	r2, r9
   1b492:	6032      	str	r2, [r6, #0]
   1b494:	4642      	mov	r2, r8
   1b496:	4444      	add	r4, r8
   1b498:	3301      	adds	r3, #1
   1b49a:	6072      	str	r2, [r6, #4]
   1b49c:	60bc      	str	r4, [r7, #8]
   1b49e:	607b      	str	r3, [r7, #4]
   1b4a0:	2b07      	cmp	r3, #7
   1b4a2:	dc00      	bgt.n	1b4a6 <_vfprintf_r+0xdfa>
   1b4a4:	e18d      	b.n	1b7c2 <_vfprintf_r+0x1116>
   1b4a6:	003a      	movs	r2, r7
   1b4a8:	4659      	mov	r1, fp
   1b4aa:	9806      	ldr	r0, [sp, #24]
   1b4ac:	f003 f83e 	bl	1e52c <__sprint_r>
   1b4b0:	2800      	cmp	r0, #0
   1b4b2:	d000      	beq.n	1b4b6 <_vfprintf_r+0xe0a>
   1b4b4:	e68a      	b.n	1b1cc <_vfprintf_r+0xb20>
   1b4b6:	68bc      	ldr	r4, [r7, #8]
   1b4b8:	ae32      	add	r6, sp, #200	; 0xc8
   1b4ba:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   1b4bc:	9a14      	ldr	r2, [sp, #80]	; 0x50
   1b4be:	4293      	cmp	r3, r2
   1b4c0:	db00      	blt.n	1b4c4 <_vfprintf_r+0xe18>
   1b4c2:	e179      	b.n	1b7b8 <_vfprintf_r+0x110c>
   1b4c4:	9a18      	ldr	r2, [sp, #96]	; 0x60
   1b4c6:	6032      	str	r2, [r6, #0]
   1b4c8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   1b4ca:	4694      	mov	ip, r2
   1b4cc:	6072      	str	r2, [r6, #4]
   1b4ce:	687a      	ldr	r2, [r7, #4]
   1b4d0:	4464      	add	r4, ip
   1b4d2:	3201      	adds	r2, #1
   1b4d4:	60bc      	str	r4, [r7, #8]
   1b4d6:	607a      	str	r2, [r7, #4]
   1b4d8:	2a07      	cmp	r2, #7
   1b4da:	dd00      	ble.n	1b4de <_vfprintf_r+0xe32>
   1b4dc:	e176      	b.n	1b7cc <_vfprintf_r+0x1120>
   1b4de:	3608      	adds	r6, #8
   1b4e0:	9a14      	ldr	r2, [sp, #80]	; 0x50
   1b4e2:	9913      	ldr	r1, [sp, #76]	; 0x4c
   1b4e4:	1ad3      	subs	r3, r2, r3
   1b4e6:	1a52      	subs	r2, r2, r1
   1b4e8:	4690      	mov	r8, r2
   1b4ea:	429a      	cmp	r2, r3
   1b4ec:	dd00      	ble.n	1b4f0 <_vfprintf_r+0xe44>
   1b4ee:	4698      	mov	r8, r3
   1b4f0:	4642      	mov	r2, r8
   1b4f2:	2a00      	cmp	r2, #0
   1b4f4:	dd0f      	ble.n	1b516 <_vfprintf_r+0xe6a>
   1b4f6:	9913      	ldr	r1, [sp, #76]	; 0x4c
   1b4f8:	9a11      	ldr	r2, [sp, #68]	; 0x44
   1b4fa:	468c      	mov	ip, r1
   1b4fc:	4462      	add	r2, ip
   1b4fe:	6032      	str	r2, [r6, #0]
   1b500:	4642      	mov	r2, r8
   1b502:	6072      	str	r2, [r6, #4]
   1b504:	687a      	ldr	r2, [r7, #4]
   1b506:	4444      	add	r4, r8
   1b508:	3201      	adds	r2, #1
   1b50a:	60bc      	str	r4, [r7, #8]
   1b50c:	607a      	str	r2, [r7, #4]
   1b50e:	2a07      	cmp	r2, #7
   1b510:	dd00      	ble.n	1b514 <_vfprintf_r+0xe68>
   1b512:	e289      	b.n	1ba28 <_vfprintf_r+0x137c>
   1b514:	3608      	adds	r6, #8
   1b516:	4642      	mov	r2, r8
   1b518:	43d5      	mvns	r5, r2
   1b51a:	17ed      	asrs	r5, r5, #31
   1b51c:	4015      	ands	r5, r2
   1b51e:	1b5d      	subs	r5, r3, r5
   1b520:	2d00      	cmp	r5, #0
   1b522:	dc00      	bgt.n	1b526 <_vfprintf_r+0xe7a>
   1b524:	e4c5      	b.n	1aeb2 <_vfprintf_r+0x806>
   1b526:	4a4d      	ldr	r2, [pc, #308]	; (1b65c <_vfprintf_r+0xfb0>)
   1b528:	687b      	ldr	r3, [r7, #4]
   1b52a:	4691      	mov	r9, r2
   1b52c:	2d10      	cmp	r5, #16
   1b52e:	dc00      	bgt.n	1b532 <_vfprintf_r+0xe86>
   1b530:	e771      	b.n	1b416 <_vfprintf_r+0xd6a>
   1b532:	2210      	movs	r2, #16
   1b534:	4690      	mov	r8, r2
   1b536:	0022      	movs	r2, r4
   1b538:	465c      	mov	r4, fp
   1b53a:	e004      	b.n	1b546 <_vfprintf_r+0xe9a>
   1b53c:	3608      	adds	r6, #8
   1b53e:	3d10      	subs	r5, #16
   1b540:	2d10      	cmp	r5, #16
   1b542:	dc00      	bgt.n	1b546 <_vfprintf_r+0xe9a>
   1b544:	e765      	b.n	1b412 <_vfprintf_r+0xd66>
   1b546:	4649      	mov	r1, r9
   1b548:	6031      	str	r1, [r6, #0]
   1b54a:	4641      	mov	r1, r8
   1b54c:	3210      	adds	r2, #16
   1b54e:	3301      	adds	r3, #1
   1b550:	6071      	str	r1, [r6, #4]
   1b552:	60ba      	str	r2, [r7, #8]
   1b554:	607b      	str	r3, [r7, #4]
   1b556:	2b07      	cmp	r3, #7
   1b558:	ddf0      	ble.n	1b53c <_vfprintf_r+0xe90>
   1b55a:	003a      	movs	r2, r7
   1b55c:	0021      	movs	r1, r4
   1b55e:	9806      	ldr	r0, [sp, #24]
   1b560:	f002 ffe4 	bl	1e52c <__sprint_r>
   1b564:	2800      	cmp	r0, #0
   1b566:	d000      	beq.n	1b56a <_vfprintf_r+0xebe>
   1b568:	e609      	b.n	1b17e <_vfprintf_r+0xad2>
   1b56a:	68ba      	ldr	r2, [r7, #8]
   1b56c:	687b      	ldr	r3, [r7, #4]
   1b56e:	ae32      	add	r6, sp, #200	; 0xc8
   1b570:	e7e5      	b.n	1b53e <_vfprintf_r+0xe92>
   1b572:	003a      	movs	r2, r7
   1b574:	4659      	mov	r1, fp
   1b576:	9806      	ldr	r0, [sp, #24]
   1b578:	f002 ffd8 	bl	1e52c <__sprint_r>
   1b57c:	2800      	cmp	r0, #0
   1b57e:	d000      	beq.n	1b582 <_vfprintf_r+0xed6>
   1b580:	e624      	b.n	1b1cc <_vfprintf_r+0xb20>
   1b582:	68bc      	ldr	r4, [r7, #8]
   1b584:	687b      	ldr	r3, [r7, #4]
   1b586:	ae32      	add	r6, sp, #200	; 0xc8
   1b588:	e504      	b.n	1af94 <_vfprintf_r+0x8e8>
   1b58a:	2307      	movs	r3, #7
   1b58c:	3207      	adds	r2, #7
   1b58e:	439a      	bics	r2, r3
   1b590:	3301      	adds	r3, #1
   1b592:	469c      	mov	ip, r3
   1b594:	4494      	add	ip, r2
   1b596:	4663      	mov	r3, ip
   1b598:	930f      	str	r3, [sp, #60]	; 0x3c
   1b59a:	6853      	ldr	r3, [r2, #4]
   1b59c:	6812      	ldr	r2, [r2, #0]
   1b59e:	930d      	str	r3, [sp, #52]	; 0x34
   1b5a0:	920c      	str	r2, [sp, #48]	; 0x30
   1b5a2:	f7ff faa7 	bl	1aaf4 <_vfprintf_r+0x448>
   1b5a6:	2207      	movs	r2, #7
   1b5a8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1b5aa:	3307      	adds	r3, #7
   1b5ac:	4393      	bics	r3, r2
   1b5ae:	3201      	adds	r2, #1
   1b5b0:	4694      	mov	ip, r2
   1b5b2:	449c      	add	ip, r3
   1b5b4:	4662      	mov	r2, ip
   1b5b6:	920f      	str	r2, [sp, #60]	; 0x3c
   1b5b8:	681a      	ldr	r2, [r3, #0]
   1b5ba:	685b      	ldr	r3, [r3, #4]
   1b5bc:	0011      	movs	r1, r2
   1b5be:	001a      	movs	r2, r3
   1b5c0:	0008      	movs	r0, r1
   1b5c2:	4310      	orrs	r0, r2
   1b5c4:	910c      	str	r1, [sp, #48]	; 0x30
   1b5c6:	920d      	str	r2, [sp, #52]	; 0x34
   1b5c8:	2300      	movs	r3, #0
   1b5ca:	0002      	movs	r2, r0
   1b5cc:	f7ff f9b4 	bl	1a938 <_vfprintf_r+0x28c>
   1b5d0:	46a3      	mov	fp, r4
   1b5d2:	4698      	mov	r8, r3
   1b5d4:	0014      	movs	r4, r2
   1b5d6:	464b      	mov	r3, r9
   1b5d8:	6075      	str	r5, [r6, #4]
   1b5da:	6033      	str	r3, [r6, #0]
   1b5dc:	1964      	adds	r4, r4, r5
   1b5de:	e4f7      	b.n	1afd0 <_vfprintf_r+0x924>
   1b5e0:	003a      	movs	r2, r7
   1b5e2:	4659      	mov	r1, fp
   1b5e4:	9806      	ldr	r0, [sp, #24]
   1b5e6:	f002 ffa1 	bl	1e52c <__sprint_r>
   1b5ea:	2800      	cmp	r0, #0
   1b5ec:	d000      	beq.n	1b5f0 <_vfprintf_r+0xf44>
   1b5ee:	e5ed      	b.n	1b1cc <_vfprintf_r+0xb20>
   1b5f0:	687b      	ldr	r3, [r7, #4]
   1b5f2:	68bc      	ldr	r4, [r7, #8]
   1b5f4:	4698      	mov	r8, r3
   1b5f6:	ae32      	add	r6, sp, #200	; 0xc8
   1b5f8:	e4da      	b.n	1afb0 <_vfprintf_r+0x904>
   1b5fa:	2207      	movs	r2, #7
   1b5fc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1b5fe:	3307      	adds	r3, #7
   1b600:	4393      	bics	r3, r2
   1b602:	3201      	adds	r2, #1
   1b604:	4694      	mov	ip, r2
   1b606:	449c      	add	ip, r3
   1b608:	4662      	mov	r2, ip
   1b60a:	920f      	str	r2, [sp, #60]	; 0x3c
   1b60c:	681a      	ldr	r2, [r3, #0]
   1b60e:	685b      	ldr	r3, [r3, #4]
   1b610:	0011      	movs	r1, r2
   1b612:	001a      	movs	r2, r3
   1b614:	0008      	movs	r0, r1
   1b616:	4310      	orrs	r0, r2
   1b618:	910c      	str	r1, [sp, #48]	; 0x30
   1b61a:	920d      	str	r2, [sp, #52]	; 0x34
   1b61c:	2301      	movs	r3, #1
   1b61e:	0002      	movs	r2, r0
   1b620:	f7ff f98a 	bl	1a938 <_vfprintf_r+0x28c>
   1b624:	2207      	movs	r2, #7
   1b626:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1b628:	3307      	adds	r3, #7
   1b62a:	4393      	bics	r3, r2
   1b62c:	3201      	adds	r2, #1
   1b62e:	4694      	mov	ip, r2
   1b630:	449c      	add	ip, r3
   1b632:	4662      	mov	r2, ip
   1b634:	920f      	str	r2, [sp, #60]	; 0x3c
   1b636:	681a      	ldr	r2, [r3, #0]
   1b638:	685b      	ldr	r3, [r3, #4]
   1b63a:	920c      	str	r2, [sp, #48]	; 0x30
   1b63c:	930d      	str	r3, [sp, #52]	; 0x34
   1b63e:	f7ff f966 	bl	1a90e <_vfprintf_r+0x262>
   1b642:	003a      	movs	r2, r7
   1b644:	4659      	mov	r1, fp
   1b646:	9806      	ldr	r0, [sp, #24]
   1b648:	f002 ff70 	bl	1e52c <__sprint_r>
   1b64c:	2800      	cmp	r0, #0
   1b64e:	d000      	beq.n	1b652 <_vfprintf_r+0xfa6>
   1b650:	e5bc      	b.n	1b1cc <_vfprintf_r+0xb20>
   1b652:	68bc      	ldr	r4, [r7, #8]
   1b654:	ae32      	add	r6, sp, #200	; 0xc8
   1b656:	f7ff fbe2 	bl	1ae1e <_vfprintf_r+0x772>
   1b65a:	46c0      	nop			; (mov r8, r8)
   1b65c:	00020750 	.word	0x00020750
   1b660:	980c      	ldr	r0, [sp, #48]	; 0x30
   1b662:	990d      	ldr	r1, [sp, #52]	; 0x34
   1b664:	2300      	movs	r3, #0
   1b666:	4242      	negs	r2, r0
   1b668:	418b      	sbcs	r3, r1
   1b66a:	0011      	movs	r1, r2
   1b66c:	001a      	movs	r2, r3
   1b66e:	232d      	movs	r3, #45	; 0x2d
   1b670:	a816      	add	r0, sp, #88	; 0x58
   1b672:	77c3      	strb	r3, [r0, #31]
   1b674:	0008      	movs	r0, r1
   1b676:	4310      	orrs	r0, r2
   1b678:	910c      	str	r1, [sp, #48]	; 0x30
   1b67a:	920d      	str	r2, [sp, #52]	; 0x34
   1b67c:	4698      	mov	r8, r3
   1b67e:	0002      	movs	r2, r0
   1b680:	3b2c      	subs	r3, #44	; 0x2c
   1b682:	f7ff f95d 	bl	1a940 <_vfprintf_r+0x294>
   1b686:	9916      	ldr	r1, [sp, #88]	; 0x58
   1b688:	9d15      	ldr	r5, [sp, #84]	; 0x54
   1b68a:	000a      	movs	r2, r1
   1b68c:	0008      	movs	r0, r1
   1b68e:	002b      	movs	r3, r5
   1b690:	0029      	movs	r1, r5
   1b692:	f003 f9d7 	bl	1ea44 <__aeabi_dcmpun>
   1b696:	2800      	cmp	r0, #0
   1b698:	d000      	beq.n	1b69c <_vfprintf_r+0xff0>
   1b69a:	e2c6      	b.n	1bc2a <_vfprintf_r+0x157e>
   1b69c:	4653      	mov	r3, sl
   1b69e:	3301      	adds	r3, #1
   1b6a0:	d100      	bne.n	1b6a4 <_vfprintf_r+0xff8>
   1b6a2:	e09f      	b.n	1b7e4 <_vfprintf_r+0x1138>
   1b6a4:	2320      	movs	r3, #32
   1b6a6:	9a12      	ldr	r2, [sp, #72]	; 0x48
   1b6a8:	439a      	bics	r2, r3
   1b6aa:	920e      	str	r2, [sp, #56]	; 0x38
   1b6ac:	2a47      	cmp	r2, #71	; 0x47
   1b6ae:	d100      	bne.n	1b6b2 <_vfprintf_r+0x1006>
   1b6b0:	e1a1      	b.n	1b9f6 <_vfprintf_r+0x134a>
   1b6b2:	2380      	movs	r3, #128	; 0x80
   1b6b4:	005b      	lsls	r3, r3, #1
   1b6b6:	4323      	orrs	r3, r4
   1b6b8:	9309      	str	r3, [sp, #36]	; 0x24
   1b6ba:	9b15      	ldr	r3, [sp, #84]	; 0x54
   1b6bc:	2b00      	cmp	r3, #0
   1b6be:	da00      	bge.n	1b6c2 <_vfprintf_r+0x1016>
   1b6c0:	e1ed      	b.n	1ba9e <_vfprintf_r+0x13f2>
   1b6c2:	9a16      	ldr	r2, [sp, #88]	; 0x58
   1b6c4:	9308      	str	r3, [sp, #32]
   1b6c6:	2300      	movs	r3, #0
   1b6c8:	4691      	mov	r9, r2
   1b6ca:	9310      	str	r3, [sp, #64]	; 0x40
   1b6cc:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1b6ce:	2b66      	cmp	r3, #102	; 0x66
   1b6d0:	d100      	bne.n	1b6d4 <_vfprintf_r+0x1028>
   1b6d2:	e1b8      	b.n	1ba46 <_vfprintf_r+0x139a>
   1b6d4:	2b46      	cmp	r3, #70	; 0x46
   1b6d6:	d100      	bne.n	1b6da <_vfprintf_r+0x102e>
   1b6d8:	e237      	b.n	1bb4a <_vfprintf_r+0x149e>
   1b6da:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   1b6dc:	9806      	ldr	r0, [sp, #24]
   1b6de:	3a45      	subs	r2, #69	; 0x45
   1b6e0:	0013      	movs	r3, r2
   1b6e2:	4259      	negs	r1, r3
   1b6e4:	4159      	adcs	r1, r3
   1b6e6:	ab20      	add	r3, sp, #128	; 0x80
   1b6e8:	000d      	movs	r5, r1
   1b6ea:	9303      	str	r3, [sp, #12]
   1b6ec:	ab1f      	add	r3, sp, #124	; 0x7c
   1b6ee:	9302      	str	r3, [sp, #8]
   1b6f0:	2302      	movs	r3, #2
   1b6f2:	aa23      	add	r2, sp, #140	; 0x8c
   1b6f4:	4455      	add	r5, sl
   1b6f6:	921b      	str	r2, [sp, #108]	; 0x6c
   1b6f8:	9204      	str	r2, [sp, #16]
   1b6fa:	9300      	str	r3, [sp, #0]
   1b6fc:	9501      	str	r5, [sp, #4]
   1b6fe:	9b08      	ldr	r3, [sp, #32]
   1b700:	464a      	mov	r2, r9
   1b702:	f000 fcb9 	bl	1c078 <_dtoa_r>
   1b706:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1b708:	9011      	str	r0, [sp, #68]	; 0x44
   1b70a:	2b67      	cmp	r3, #103	; 0x67
   1b70c:	d000      	beq.n	1b710 <_vfprintf_r+0x1064>
   1b70e:	e20b      	b.n	1bb28 <_vfprintf_r+0x147c>
   1b710:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1b712:	4698      	mov	r8, r3
   1b714:	44a8      	add	r8, r5
   1b716:	07e3      	lsls	r3, r4, #31
   1b718:	d400      	bmi.n	1b71c <_vfprintf_r+0x1070>
   1b71a:	e277      	b.n	1bc0c <_vfprintf_r+0x1560>
   1b71c:	2300      	movs	r3, #0
   1b71e:	2200      	movs	r2, #0
   1b720:	4648      	mov	r0, r9
   1b722:	9908      	ldr	r1, [sp, #32]
   1b724:	f7fb f904 	bl	16930 <__aeabi_dcmpeq>
   1b728:	4643      	mov	r3, r8
   1b72a:	2800      	cmp	r0, #0
   1b72c:	d10a      	bne.n	1b744 <_vfprintf_r+0x1098>
   1b72e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   1b730:	4543      	cmp	r3, r8
   1b732:	d207      	bcs.n	1b744 <_vfprintf_r+0x1098>
   1b734:	2130      	movs	r1, #48	; 0x30
   1b736:	4640      	mov	r0, r8
   1b738:	1c5a      	adds	r2, r3, #1
   1b73a:	9223      	str	r2, [sp, #140]	; 0x8c
   1b73c:	7019      	strb	r1, [r3, #0]
   1b73e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   1b740:	4298      	cmp	r0, r3
   1b742:	d8f9      	bhi.n	1b738 <_vfprintf_r+0x108c>
   1b744:	9a11      	ldr	r2, [sp, #68]	; 0x44
   1b746:	1a9b      	subs	r3, r3, r2
   1b748:	9314      	str	r3, [sp, #80]	; 0x50
   1b74a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1b74c:	2b47      	cmp	r3, #71	; 0x47
   1b74e:	d100      	bne.n	1b752 <_vfprintf_r+0x10a6>
   1b750:	e0d0      	b.n	1b8f4 <_vfprintf_r+0x1248>
   1b752:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1b754:	2b65      	cmp	r3, #101	; 0x65
   1b756:	dc00      	bgt.n	1b75a <_vfprintf_r+0x10ae>
   1b758:	e2d5      	b.n	1bd06 <_vfprintf_r+0x165a>
   1b75a:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1b75c:	2b66      	cmp	r3, #102	; 0x66
   1b75e:	d100      	bne.n	1b762 <_vfprintf_r+0x10b6>
   1b760:	e1c6      	b.n	1baf0 <_vfprintf_r+0x1444>
   1b762:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   1b764:	9313      	str	r3, [sp, #76]	; 0x4c
   1b766:	9b14      	ldr	r3, [sp, #80]	; 0x50
   1b768:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   1b76a:	0019      	movs	r1, r3
   1b76c:	4291      	cmp	r1, r2
   1b76e:	dd00      	ble.n	1b772 <_vfprintf_r+0x10c6>
   1b770:	e1a0      	b.n	1bab4 <_vfprintf_r+0x1408>
   1b772:	07e3      	lsls	r3, r4, #31
   1b774:	d500      	bpl.n	1b778 <_vfprintf_r+0x10cc>
   1b776:	e242      	b.n	1bbfe <_vfprintf_r+0x1552>
   1b778:	43d3      	mvns	r3, r2
   1b77a:	17db      	asrs	r3, r3, #31
   1b77c:	0011      	movs	r1, r2
   1b77e:	401a      	ands	r2, r3
   1b780:	2367      	movs	r3, #103	; 0x67
   1b782:	9208      	str	r2, [sp, #32]
   1b784:	910e      	str	r1, [sp, #56]	; 0x38
   1b786:	9312      	str	r3, [sp, #72]	; 0x48
   1b788:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1b78a:	2b00      	cmp	r3, #0
   1b78c:	d000      	beq.n	1b790 <_vfprintf_r+0x10e4>
   1b78e:	e0a9      	b.n	1b8e4 <_vfprintf_r+0x1238>
   1b790:	ab16      	add	r3, sp, #88	; 0x58
   1b792:	7fdb      	ldrb	r3, [r3, #31]
   1b794:	4698      	mov	r8, r3
   1b796:	2300      	movs	r3, #0
   1b798:	469a      	mov	sl, r3
   1b79a:	f7ff f8fc 	bl	1a996 <_vfprintf_r+0x2ea>
   1b79e:	46cb      	mov	fp, r9
   1b7a0:	46a1      	mov	r9, r4
   1b7a2:	0014      	movs	r4, r2
   1b7a4:	e637      	b.n	1b416 <_vfprintf_r+0xd6a>
   1b7a6:	464b      	mov	r3, r9
   1b7a8:	6d98      	ldr	r0, [r3, #88]	; 0x58
   1b7aa:	f002 f86f 	bl	1d88c <__retarget_lock_release_recursive>
   1b7ae:	2301      	movs	r3, #1
   1b7b0:	425b      	negs	r3, r3
   1b7b2:	930a      	str	r3, [sp, #40]	; 0x28
   1b7b4:	f7ff f82b 	bl	1a80e <_vfprintf_r+0x162>
   1b7b8:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1b7ba:	07d2      	lsls	r2, r2, #31
   1b7bc:	d400      	bmi.n	1b7c0 <_vfprintf_r+0x1114>
   1b7be:	e68f      	b.n	1b4e0 <_vfprintf_r+0xe34>
   1b7c0:	e680      	b.n	1b4c4 <_vfprintf_r+0xe18>
   1b7c2:	3608      	adds	r6, #8
   1b7c4:	e679      	b.n	1b4ba <_vfprintf_r+0xe0e>
   1b7c6:	68bc      	ldr	r4, [r7, #8]
   1b7c8:	f7ff fb73 	bl	1aeb2 <_vfprintf_r+0x806>
   1b7cc:	003a      	movs	r2, r7
   1b7ce:	4659      	mov	r1, fp
   1b7d0:	9806      	ldr	r0, [sp, #24]
   1b7d2:	f002 feab 	bl	1e52c <__sprint_r>
   1b7d6:	2800      	cmp	r0, #0
   1b7d8:	d000      	beq.n	1b7dc <_vfprintf_r+0x1130>
   1b7da:	e4f7      	b.n	1b1cc <_vfprintf_r+0xb20>
   1b7dc:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   1b7de:	68bc      	ldr	r4, [r7, #8]
   1b7e0:	ae32      	add	r6, sp, #200	; 0xc8
   1b7e2:	e67d      	b.n	1b4e0 <_vfprintf_r+0xe34>
   1b7e4:	2320      	movs	r3, #32
   1b7e6:	9a12      	ldr	r2, [sp, #72]	; 0x48
   1b7e8:	439a      	bics	r2, r3
   1b7ea:	3b1a      	subs	r3, #26
   1b7ec:	920e      	str	r2, [sp, #56]	; 0x38
   1b7ee:	469a      	mov	sl, r3
   1b7f0:	e75f      	b.n	1b6b2 <_vfprintf_r+0x1006>
   1b7f2:	232d      	movs	r3, #45	; 0x2d
   1b7f4:	aa16      	add	r2, sp, #88	; 0x58
   1b7f6:	77d3      	strb	r3, [r2, #31]
   1b7f8:	4698      	mov	r8, r3
   1b7fa:	f7ff faa8 	bl	1ad4e <_vfprintf_r+0x6a2>
   1b7fe:	003a      	movs	r2, r7
   1b800:	4659      	mov	r1, fp
   1b802:	9806      	ldr	r0, [sp, #24]
   1b804:	f002 fe92 	bl	1e52c <__sprint_r>
   1b808:	2800      	cmp	r0, #0
   1b80a:	d000      	beq.n	1b80e <_vfprintf_r+0x1162>
   1b80c:	e4de      	b.n	1b1cc <_vfprintf_r+0xb20>
   1b80e:	ae32      	add	r6, sp, #200	; 0xc8
   1b810:	e419      	b.n	1b046 <_vfprintf_r+0x99a>
   1b812:	4be3      	ldr	r3, [pc, #908]	; (1bba0 <_vfprintf_r+0x14f4>)
   1b814:	3401      	adds	r4, #1
   1b816:	6033      	str	r3, [r6, #0]
   1b818:	2301      	movs	r3, #1
   1b81a:	6073      	str	r3, [r6, #4]
   1b81c:	687b      	ldr	r3, [r7, #4]
   1b81e:	60bc      	str	r4, [r7, #8]
   1b820:	3301      	adds	r3, #1
   1b822:	607b      	str	r3, [r7, #4]
   1b824:	2b07      	cmp	r3, #7
   1b826:	dd00      	ble.n	1b82a <_vfprintf_r+0x117e>
   1b828:	e155      	b.n	1bad6 <_vfprintf_r+0x142a>
   1b82a:	3608      	adds	r6, #8
   1b82c:	2800      	cmp	r0, #0
   1b82e:	d107      	bne.n	1b840 <_vfprintf_r+0x1194>
   1b830:	9b14      	ldr	r3, [sp, #80]	; 0x50
   1b832:	2b00      	cmp	r3, #0
   1b834:	d104      	bne.n	1b840 <_vfprintf_r+0x1194>
   1b836:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1b838:	07db      	lsls	r3, r3, #31
   1b83a:	d401      	bmi.n	1b840 <_vfprintf_r+0x1194>
   1b83c:	f7ff fb39 	bl	1aeb2 <_vfprintf_r+0x806>
   1b840:	9b18      	ldr	r3, [sp, #96]	; 0x60
   1b842:	6033      	str	r3, [r6, #0]
   1b844:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   1b846:	1919      	adds	r1, r3, r4
   1b848:	6073      	str	r3, [r6, #4]
   1b84a:	687b      	ldr	r3, [r7, #4]
   1b84c:	60b9      	str	r1, [r7, #8]
   1b84e:	3301      	adds	r3, #1
   1b850:	607b      	str	r3, [r7, #4]
   1b852:	2b07      	cmp	r3, #7
   1b854:	dd00      	ble.n	1b858 <_vfprintf_r+0x11ac>
   1b856:	e1c4      	b.n	1bbe2 <_vfprintf_r+0x1536>
   1b858:	0032      	movs	r2, r6
   1b85a:	3208      	adds	r2, #8
   1b85c:	2800      	cmp	r0, #0
   1b85e:	da00      	bge.n	1b862 <_vfprintf_r+0x11b6>
   1b860:	e195      	b.n	1bb8e <_vfprintf_r+0x14e2>
   1b862:	9811      	ldr	r0, [sp, #68]	; 0x44
   1b864:	3301      	adds	r3, #1
   1b866:	6010      	str	r0, [r2, #0]
   1b868:	9814      	ldr	r0, [sp, #80]	; 0x50
   1b86a:	607b      	str	r3, [r7, #4]
   1b86c:	1844      	adds	r4, r0, r1
   1b86e:	6050      	str	r0, [r2, #4]
   1b870:	60bc      	str	r4, [r7, #8]
   1b872:	2b07      	cmp	r3, #7
   1b874:	dd01      	ble.n	1b87a <_vfprintf_r+0x11ce>
   1b876:	f7ff fbc2 	bl	1affe <_vfprintf_r+0x952>
   1b87a:	3208      	adds	r2, #8
   1b87c:	0016      	movs	r6, r2
   1b87e:	f7ff fb18 	bl	1aeb2 <_vfprintf_r+0x806>
   1b882:	990f      	ldr	r1, [sp, #60]	; 0x3c
   1b884:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1b886:	680b      	ldr	r3, [r1, #0]
   1b888:	601a      	str	r2, [r3, #0]
   1b88a:	17d2      	asrs	r2, r2, #31
   1b88c:	605a      	str	r2, [r3, #4]
   1b88e:	000b      	movs	r3, r1
   1b890:	3304      	adds	r3, #4
   1b892:	930f      	str	r3, [sp, #60]	; 0x3c
   1b894:	f7fe ff58 	bl	1a748 <_vfprintf_r+0x9c>
   1b898:	464b      	mov	r3, r9
   1b89a:	9a07      	ldr	r2, [sp, #28]
   1b89c:	431c      	orrs	r4, r3
   1b89e:	3201      	adds	r2, #1
   1b8a0:	7813      	ldrb	r3, [r2, #0]
   1b8a2:	9207      	str	r2, [sp, #28]
   1b8a4:	f7fe ff8b 	bl	1a7be <_vfprintf_r+0x112>
   1b8a8:	003a      	movs	r2, r7
   1b8aa:	4659      	mov	r1, fp
   1b8ac:	9806      	ldr	r0, [sp, #24]
   1b8ae:	f002 fe3d 	bl	1e52c <__sprint_r>
   1b8b2:	2800      	cmp	r0, #0
   1b8b4:	d000      	beq.n	1b8b8 <_vfprintf_r+0x120c>
   1b8b6:	e489      	b.n	1b1cc <_vfprintf_r+0xb20>
   1b8b8:	68bc      	ldr	r4, [r7, #8]
   1b8ba:	ae32      	add	r6, sp, #200	; 0xc8
   1b8bc:	f7ff fbdc 	bl	1b078 <_vfprintf_r+0x9cc>
   1b8c0:	4bb8      	ldr	r3, [pc, #736]	; (1bba4 <_vfprintf_r+0x14f8>)
   1b8c2:	9311      	str	r3, [sp, #68]	; 0x44
   1b8c4:	f7ff fa4a 	bl	1ad5c <_vfprintf_r+0x6b0>
   1b8c8:	9a11      	ldr	r2, [sp, #68]	; 0x44
   1b8ca:	ab32      	add	r3, sp, #200	; 0xc8
   1b8cc:	1a9b      	subs	r3, r3, r2
   1b8ce:	930e      	str	r3, [sp, #56]	; 0x38
   1b8d0:	f7ff f859 	bl	1a986 <_vfprintf_r+0x2da>
   1b8d4:	9811      	ldr	r0, [sp, #68]	; 0x44
   1b8d6:	f7fe fd03 	bl	1a2e0 <strlen>
   1b8da:	0002      	movs	r2, r0
   1b8dc:	900e      	str	r0, [sp, #56]	; 0x38
   1b8de:	0003      	movs	r3, r0
   1b8e0:	f7ff f9a1 	bl	1ac26 <_vfprintf_r+0x57a>
   1b8e4:	232d      	movs	r3, #45	; 0x2d
   1b8e6:	aa16      	add	r2, sp, #88	; 0x58
   1b8e8:	77d3      	strb	r3, [r2, #31]
   1b8ea:	4698      	mov	r8, r3
   1b8ec:	2300      	movs	r3, #0
   1b8ee:	469a      	mov	sl, r3
   1b8f0:	f7ff f854 	bl	1a99c <_vfprintf_r+0x2f0>
   1b8f4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   1b8f6:	9313      	str	r3, [sp, #76]	; 0x4c
   1b8f8:	1cda      	adds	r2, r3, #3
   1b8fa:	db02      	blt.n	1b902 <_vfprintf_r+0x1256>
   1b8fc:	459a      	cmp	sl, r3
   1b8fe:	db00      	blt.n	1b902 <_vfprintf_r+0x1256>
   1b900:	e731      	b.n	1b766 <_vfprintf_r+0x10ba>
   1b902:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1b904:	3b02      	subs	r3, #2
   1b906:	9312      	str	r3, [sp, #72]	; 0x48
   1b908:	222c      	movs	r2, #44	; 0x2c
   1b90a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   1b90c:	2148      	movs	r1, #72	; 0x48
   1b90e:	1e5d      	subs	r5, r3, #1
   1b910:	ab16      	add	r3, sp, #88	; 0x58
   1b912:	189b      	adds	r3, r3, r2
   1b914:	466a      	mov	r2, sp
   1b916:	1852      	adds	r2, r2, r1
   1b918:	7812      	ldrb	r2, [r2, #0]
   1b91a:	951f      	str	r5, [sp, #124]	; 0x7c
   1b91c:	701a      	strb	r2, [r3, #0]
   1b91e:	2d00      	cmp	r5, #0
   1b920:	da00      	bge.n	1b924 <_vfprintf_r+0x1278>
   1b922:	e1cb      	b.n	1bcbc <_vfprintf_r+0x1610>
   1b924:	212d      	movs	r1, #45	; 0x2d
   1b926:	232b      	movs	r3, #43	; 0x2b
   1b928:	aa16      	add	r2, sp, #88	; 0x58
   1b92a:	1852      	adds	r2, r2, r1
   1b92c:	7013      	strb	r3, [r2, #0]
   1b92e:	2d09      	cmp	r5, #9
   1b930:	dc00      	bgt.n	1b934 <_vfprintf_r+0x1288>
   1b932:	e16d      	b.n	1bc10 <_vfprintf_r+0x1564>
   1b934:	aa16      	add	r2, sp, #88	; 0x58
   1b936:	233b      	movs	r3, #59	; 0x3b
   1b938:	4694      	mov	ip, r2
   1b93a:	4463      	add	r3, ip
   1b93c:	469a      	mov	sl, r3
   1b93e:	46b1      	mov	r9, r6
   1b940:	46a0      	mov	r8, r4
   1b942:	4656      	mov	r6, sl
   1b944:	e000      	b.n	1b948 <_vfprintf_r+0x129c>
   1b946:	0026      	movs	r6, r4
   1b948:	0028      	movs	r0, r5
   1b94a:	210a      	movs	r1, #10
   1b94c:	f7fa ffda 	bl	16904 <__aeabi_idivmod>
   1b950:	1e74      	subs	r4, r6, #1
   1b952:	3130      	adds	r1, #48	; 0x30
   1b954:	7021      	strb	r1, [r4, #0]
   1b956:	0028      	movs	r0, r5
   1b958:	210a      	movs	r1, #10
   1b95a:	f7fa feed 	bl	16738 <__divsi3>
   1b95e:	0005      	movs	r5, r0
   1b960:	2809      	cmp	r0, #9
   1b962:	dcf0      	bgt.n	1b946 <_vfprintf_r+0x129a>
   1b964:	0023      	movs	r3, r4
   1b966:	4644      	mov	r4, r8
   1b968:	46b0      	mov	r8, r6
   1b96a:	464e      	mov	r6, r9
   1b96c:	4699      	mov	r9, r3
   1b96e:	0003      	movs	r3, r0
   1b970:	3330      	adds	r3, #48	; 0x30
   1b972:	b2d8      	uxtb	r0, r3
   1b974:	4643      	mov	r3, r8
   1b976:	3b02      	subs	r3, #2
   1b978:	7018      	strb	r0, [r3, #0]
   1b97a:	459a      	cmp	sl, r3
   1b97c:	d800      	bhi.n	1b980 <_vfprintf_r+0x12d4>
   1b97e:	e1f6      	b.n	1bd6e <_vfprintf_r+0x16c2>
   1b980:	4642      	mov	r2, r8
   1b982:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   1b984:	4645      	mov	r5, r8
   1b986:	1a99      	subs	r1, r3, r2
   1b988:	2301      	movs	r3, #1
   1b98a:	3107      	adds	r1, #7
   1b98c:	425b      	negs	r3, r3
   1b98e:	e001      	b.n	1b994 <_vfprintf_r+0x12e8>
   1b990:	5ce8      	ldrb	r0, [r5, r3]
   1b992:	3301      	adds	r3, #1
   1b994:	aa21      	add	r2, sp, #132	; 0x84
   1b996:	18d2      	adds	r2, r2, r3
   1b998:	70d0      	strb	r0, [r2, #3]
   1b99a:	428b      	cmp	r3, r1
   1b99c:	d1f8      	bne.n	1b990 <_vfprintf_r+0x12e4>
   1b99e:	a916      	add	r1, sp, #88	; 0x58
   1b9a0:	468c      	mov	ip, r1
   1b9a2:	222e      	movs	r2, #46	; 0x2e
   1b9a4:	464b      	mov	r3, r9
   1b9a6:	4462      	add	r2, ip
   1b9a8:	4694      	mov	ip, r2
   1b9aa:	1afb      	subs	r3, r7, r3
   1b9ac:	4463      	add	r3, ip
   1b9ae:	aa21      	add	r2, sp, #132	; 0x84
   1b9b0:	9914      	ldr	r1, [sp, #80]	; 0x50
   1b9b2:	1a9b      	subs	r3, r3, r2
   1b9b4:	469c      	mov	ip, r3
   1b9b6:	000a      	movs	r2, r1
   1b9b8:	4462      	add	r2, ip
   1b9ba:	931a      	str	r3, [sp, #104]	; 0x68
   1b9bc:	920e      	str	r2, [sp, #56]	; 0x38
   1b9be:	2901      	cmp	r1, #1
   1b9c0:	dc00      	bgt.n	1b9c4 <_vfprintf_r+0x1318>
   1b9c2:	e170      	b.n	1bca6 <_vfprintf_r+0x15fa>
   1b9c4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   1b9c6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1b9c8:	4694      	mov	ip, r2
   1b9ca:	4463      	add	r3, ip
   1b9cc:	001a      	movs	r2, r3
   1b9ce:	930e      	str	r3, [sp, #56]	; 0x38
   1b9d0:	43db      	mvns	r3, r3
   1b9d2:	17db      	asrs	r3, r3, #31
   1b9d4:	401a      	ands	r2, r3
   1b9d6:	2300      	movs	r3, #0
   1b9d8:	9208      	str	r2, [sp, #32]
   1b9da:	9313      	str	r3, [sp, #76]	; 0x4c
   1b9dc:	e6d4      	b.n	1b788 <_vfprintf_r+0x10dc>
   1b9de:	003a      	movs	r2, r7
   1b9e0:	4659      	mov	r1, fp
   1b9e2:	9806      	ldr	r0, [sp, #24]
   1b9e4:	f002 fda2 	bl	1e52c <__sprint_r>
   1b9e8:	2800      	cmp	r0, #0
   1b9ea:	d001      	beq.n	1b9f0 <_vfprintf_r+0x1344>
   1b9ec:	f7ff fbee 	bl	1b1cc <_vfprintf_r+0xb20>
   1b9f0:	68bc      	ldr	r4, [r7, #8]
   1b9f2:	ae32      	add	r6, sp, #200	; 0xc8
   1b9f4:	e46a      	b.n	1b2cc <_vfprintf_r+0xc20>
   1b9f6:	4653      	mov	r3, sl
   1b9f8:	2b00      	cmp	r3, #0
   1b9fa:	d000      	beq.n	1b9fe <_vfprintf_r+0x1352>
   1b9fc:	e659      	b.n	1b6b2 <_vfprintf_r+0x1006>
   1b9fe:	3301      	adds	r3, #1
   1ba00:	469a      	mov	sl, r3
   1ba02:	e656      	b.n	1b6b2 <_vfprintf_r+0x1006>
   1ba04:	4653      	mov	r3, sl
   1ba06:	9308      	str	r3, [sp, #32]
   1ba08:	2b06      	cmp	r3, #6
   1ba0a:	d901      	bls.n	1ba10 <_vfprintf_r+0x1364>
   1ba0c:	2306      	movs	r3, #6
   1ba0e:	9308      	str	r3, [sp, #32]
   1ba10:	9b08      	ldr	r3, [sp, #32]
   1ba12:	950f      	str	r5, [sp, #60]	; 0x3c
   1ba14:	930e      	str	r3, [sp, #56]	; 0x38
   1ba16:	2300      	movs	r3, #0
   1ba18:	4698      	mov	r8, r3
   1ba1a:	469a      	mov	sl, r3
   1ba1c:	9313      	str	r3, [sp, #76]	; 0x4c
   1ba1e:	4b62      	ldr	r3, [pc, #392]	; (1bba8 <_vfprintf_r+0x14fc>)
   1ba20:	9409      	str	r4, [sp, #36]	; 0x24
   1ba22:	9311      	str	r3, [sp, #68]	; 0x44
   1ba24:	f7fe ffbd 	bl	1a9a2 <_vfprintf_r+0x2f6>
   1ba28:	003a      	movs	r2, r7
   1ba2a:	4659      	mov	r1, fp
   1ba2c:	9806      	ldr	r0, [sp, #24]
   1ba2e:	f002 fd7d 	bl	1e52c <__sprint_r>
   1ba32:	2800      	cmp	r0, #0
   1ba34:	d001      	beq.n	1ba3a <_vfprintf_r+0x138e>
   1ba36:	f7ff fbc9 	bl	1b1cc <_vfprintf_r+0xb20>
   1ba3a:	9b14      	ldr	r3, [sp, #80]	; 0x50
   1ba3c:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   1ba3e:	68bc      	ldr	r4, [r7, #8]
   1ba40:	1a9b      	subs	r3, r3, r2
   1ba42:	ae32      	add	r6, sp, #200	; 0xc8
   1ba44:	e567      	b.n	1b516 <_vfprintf_r+0xe6a>
   1ba46:	ab23      	add	r3, sp, #140	; 0x8c
   1ba48:	931b      	str	r3, [sp, #108]	; 0x6c
   1ba4a:	9304      	str	r3, [sp, #16]
   1ba4c:	ab20      	add	r3, sp, #128	; 0x80
   1ba4e:	9303      	str	r3, [sp, #12]
   1ba50:	ab1f      	add	r3, sp, #124	; 0x7c
   1ba52:	9302      	str	r3, [sp, #8]
   1ba54:	4653      	mov	r3, sl
   1ba56:	9301      	str	r3, [sp, #4]
   1ba58:	2303      	movs	r3, #3
   1ba5a:	464a      	mov	r2, r9
   1ba5c:	9300      	str	r3, [sp, #0]
   1ba5e:	9806      	ldr	r0, [sp, #24]
   1ba60:	9b08      	ldr	r3, [sp, #32]
   1ba62:	f000 fb09 	bl	1c078 <_dtoa_r>
   1ba66:	0003      	movs	r3, r0
   1ba68:	4453      	add	r3, sl
   1ba6a:	4698      	mov	r8, r3
   1ba6c:	4655      	mov	r5, sl
   1ba6e:	9011      	str	r0, [sp, #68]	; 0x44
   1ba70:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1ba72:	781b      	ldrb	r3, [r3, #0]
   1ba74:	2b30      	cmp	r3, #48	; 0x30
   1ba76:	d002      	beq.n	1ba7e <_vfprintf_r+0x13d2>
   1ba78:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   1ba7a:	4498      	add	r8, r3
   1ba7c:	e64e      	b.n	1b71c <_vfprintf_r+0x1070>
   1ba7e:	2200      	movs	r2, #0
   1ba80:	2300      	movs	r3, #0
   1ba82:	4648      	mov	r0, r9
   1ba84:	9908      	ldr	r1, [sp, #32]
   1ba86:	f7fa ff53 	bl	16930 <__aeabi_dcmpeq>
   1ba8a:	2800      	cmp	r0, #0
   1ba8c:	d1f4      	bne.n	1ba78 <_vfprintf_r+0x13cc>
   1ba8e:	2301      	movs	r3, #1
   1ba90:	1b5b      	subs	r3, r3, r5
   1ba92:	931f      	str	r3, [sp, #124]	; 0x7c
   1ba94:	4498      	add	r8, r3
   1ba96:	e641      	b.n	1b71c <_vfprintf_r+0x1070>
   1ba98:	46c1      	mov	r9, r8
   1ba9a:	f7ff fb1f 	bl	1b0dc <_vfprintf_r+0xa30>
   1ba9e:	2280      	movs	r2, #128	; 0x80
   1baa0:	0612      	lsls	r2, r2, #24
   1baa2:	4694      	mov	ip, r2
   1baa4:	9b16      	ldr	r3, [sp, #88]	; 0x58
   1baa6:	4699      	mov	r9, r3
   1baa8:	9b15      	ldr	r3, [sp, #84]	; 0x54
   1baaa:	4463      	add	r3, ip
   1baac:	9308      	str	r3, [sp, #32]
   1baae:	232d      	movs	r3, #45	; 0x2d
   1bab0:	9310      	str	r3, [sp, #64]	; 0x40
   1bab2:	e60b      	b.n	1b6cc <_vfprintf_r+0x1020>
   1bab4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   1bab6:	9b14      	ldr	r3, [sp, #80]	; 0x50
   1bab8:	4694      	mov	ip, r2
   1baba:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   1babc:	4463      	add	r3, ip
   1babe:	930e      	str	r3, [sp, #56]	; 0x38
   1bac0:	2a00      	cmp	r2, #0
   1bac2:	dc00      	bgt.n	1bac6 <_vfprintf_r+0x141a>
   1bac4:	e0e3      	b.n	1bc8e <_vfprintf_r+0x15e2>
   1bac6:	001a      	movs	r2, r3
   1bac8:	43db      	mvns	r3, r3
   1baca:	17db      	asrs	r3, r3, #31
   1bacc:	401a      	ands	r2, r3
   1bace:	2367      	movs	r3, #103	; 0x67
   1bad0:	9208      	str	r2, [sp, #32]
   1bad2:	9312      	str	r3, [sp, #72]	; 0x48
   1bad4:	e658      	b.n	1b788 <_vfprintf_r+0x10dc>
   1bad6:	003a      	movs	r2, r7
   1bad8:	4659      	mov	r1, fp
   1bada:	9806      	ldr	r0, [sp, #24]
   1badc:	f002 fd26 	bl	1e52c <__sprint_r>
   1bae0:	2800      	cmp	r0, #0
   1bae2:	d001      	beq.n	1bae8 <_vfprintf_r+0x143c>
   1bae4:	f7ff fb72 	bl	1b1cc <_vfprintf_r+0xb20>
   1bae8:	981f      	ldr	r0, [sp, #124]	; 0x7c
   1baea:	68bc      	ldr	r4, [r7, #8]
   1baec:	ae32      	add	r6, sp, #200	; 0xc8
   1baee:	e69d      	b.n	1b82c <_vfprintf_r+0x1180>
   1baf0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   1baf2:	9313      	str	r3, [sp, #76]	; 0x4c
   1baf4:	2b00      	cmp	r3, #0
   1baf6:	dc00      	bgt.n	1bafa <_vfprintf_r+0x144e>
   1baf8:	e0f2      	b.n	1bce0 <_vfprintf_r+0x1634>
   1bafa:	4652      	mov	r2, sl
   1bafc:	2a00      	cmp	r2, #0
   1bafe:	d000      	beq.n	1bb02 <_vfprintf_r+0x1456>
   1bb00:	e0a0      	b.n	1bc44 <_vfprintf_r+0x1598>
   1bb02:	07e2      	lsls	r2, r4, #31
   1bb04:	d500      	bpl.n	1bb08 <_vfprintf_r+0x145c>
   1bb06:	e09d      	b.n	1bc44 <_vfprintf_r+0x1598>
   1bb08:	9308      	str	r3, [sp, #32]
   1bb0a:	930e      	str	r3, [sp, #56]	; 0x38
   1bb0c:	e63c      	b.n	1b788 <_vfprintf_r+0x10dc>
   1bb0e:	ab16      	add	r3, sp, #88	; 0x58
   1bb10:	7fdb      	ldrb	r3, [r3, #31]
   1bb12:	950f      	str	r5, [sp, #60]	; 0x3c
   1bb14:	4698      	mov	r8, r3
   1bb16:	4653      	mov	r3, sl
   1bb18:	9308      	str	r3, [sp, #32]
   1bb1a:	930e      	str	r3, [sp, #56]	; 0x38
   1bb1c:	2300      	movs	r3, #0
   1bb1e:	9409      	str	r4, [sp, #36]	; 0x24
   1bb20:	469a      	mov	sl, r3
   1bb22:	9313      	str	r3, [sp, #76]	; 0x4c
   1bb24:	f7fe ff37 	bl	1a996 <_vfprintf_r+0x2ea>
   1bb28:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1bb2a:	4698      	mov	r8, r3
   1bb2c:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1bb2e:	44a8      	add	r8, r5
   1bb30:	2b47      	cmp	r3, #71	; 0x47
   1bb32:	d000      	beq.n	1bb36 <_vfprintf_r+0x148a>
   1bb34:	e5f2      	b.n	1b71c <_vfprintf_r+0x1070>
   1bb36:	07e3      	lsls	r3, r4, #31
   1bb38:	d400      	bmi.n	1bb3c <_vfprintf_r+0x1490>
   1bb3a:	e0dc      	b.n	1bcf6 <_vfprintf_r+0x164a>
   1bb3c:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1bb3e:	4698      	mov	r8, r3
   1bb40:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1bb42:	44a8      	add	r8, r5
   1bb44:	2b46      	cmp	r3, #70	; 0x46
   1bb46:	d093      	beq.n	1ba70 <_vfprintf_r+0x13c4>
   1bb48:	e5e8      	b.n	1b71c <_vfprintf_r+0x1070>
   1bb4a:	ab23      	add	r3, sp, #140	; 0x8c
   1bb4c:	931b      	str	r3, [sp, #108]	; 0x6c
   1bb4e:	9304      	str	r3, [sp, #16]
   1bb50:	ab20      	add	r3, sp, #128	; 0x80
   1bb52:	9303      	str	r3, [sp, #12]
   1bb54:	ab1f      	add	r3, sp, #124	; 0x7c
   1bb56:	9302      	str	r3, [sp, #8]
   1bb58:	4653      	mov	r3, sl
   1bb5a:	9301      	str	r3, [sp, #4]
   1bb5c:	2303      	movs	r3, #3
   1bb5e:	464a      	mov	r2, r9
   1bb60:	9300      	str	r3, [sp, #0]
   1bb62:	9806      	ldr	r0, [sp, #24]
   1bb64:	9b08      	ldr	r3, [sp, #32]
   1bb66:	f000 fa87 	bl	1c078 <_dtoa_r>
   1bb6a:	4655      	mov	r5, sl
   1bb6c:	9011      	str	r0, [sp, #68]	; 0x44
   1bb6e:	e7e5      	b.n	1bb3c <_vfprintf_r+0x1490>
   1bb70:	003a      	movs	r2, r7
   1bb72:	4659      	mov	r1, fp
   1bb74:	9806      	ldr	r0, [sp, #24]
   1bb76:	f002 fcd9 	bl	1e52c <__sprint_r>
   1bb7a:	2800      	cmp	r0, #0
   1bb7c:	d101      	bne.n	1bb82 <_vfprintf_r+0x14d6>
   1bb7e:	f7ff faab 	bl	1b0d8 <_vfprintf_r+0xa2c>
   1bb82:	f7ff faab 	bl	1b0dc <_vfprintf_r+0xa30>
   1bb86:	4642      	mov	r2, r8
   1bb88:	9207      	str	r2, [sp, #28]
   1bb8a:	f7fe fe1b 	bl	1a7c4 <_vfprintf_r+0x118>
   1bb8e:	4244      	negs	r4, r0
   1bb90:	3010      	adds	r0, #16
   1bb92:	db00      	blt.n	1bb96 <_vfprintf_r+0x14ea>
   1bb94:	e0d8      	b.n	1bd48 <_vfprintf_r+0x169c>
   1bb96:	4805      	ldr	r0, [pc, #20]	; (1bbac <_vfprintf_r+0x1500>)
   1bb98:	2610      	movs	r6, #16
   1bb9a:	0005      	movs	r5, r0
   1bb9c:	e00c      	b.n	1bbb8 <_vfprintf_r+0x150c>
   1bb9e:	46c0      	nop			; (mov r8, r8)
   1bba0:	0001f9ac 	.word	0x0001f9ac
   1bba4:	00020704 	.word	0x00020704
   1bba8:	00020738 	.word	0x00020738
   1bbac:	00020750 	.word	0x00020750
   1bbb0:	3208      	adds	r2, #8
   1bbb2:	3c10      	subs	r4, #16
   1bbb4:	2c10      	cmp	r4, #16
   1bbb6:	dd51      	ble.n	1bc5c <_vfprintf_r+0x15b0>
   1bbb8:	3110      	adds	r1, #16
   1bbba:	3301      	adds	r3, #1
   1bbbc:	6015      	str	r5, [r2, #0]
   1bbbe:	6056      	str	r6, [r2, #4]
   1bbc0:	60b9      	str	r1, [r7, #8]
   1bbc2:	607b      	str	r3, [r7, #4]
   1bbc4:	2b07      	cmp	r3, #7
   1bbc6:	ddf3      	ble.n	1bbb0 <_vfprintf_r+0x1504>
   1bbc8:	003a      	movs	r2, r7
   1bbca:	4659      	mov	r1, fp
   1bbcc:	9806      	ldr	r0, [sp, #24]
   1bbce:	f002 fcad 	bl	1e52c <__sprint_r>
   1bbd2:	2800      	cmp	r0, #0
   1bbd4:	d001      	beq.n	1bbda <_vfprintf_r+0x152e>
   1bbd6:	f7ff faf9 	bl	1b1cc <_vfprintf_r+0xb20>
   1bbda:	68b9      	ldr	r1, [r7, #8]
   1bbdc:	687b      	ldr	r3, [r7, #4]
   1bbde:	aa32      	add	r2, sp, #200	; 0xc8
   1bbe0:	e7e7      	b.n	1bbb2 <_vfprintf_r+0x1506>
   1bbe2:	003a      	movs	r2, r7
   1bbe4:	4659      	mov	r1, fp
   1bbe6:	9806      	ldr	r0, [sp, #24]
   1bbe8:	f002 fca0 	bl	1e52c <__sprint_r>
   1bbec:	2800      	cmp	r0, #0
   1bbee:	d001      	beq.n	1bbf4 <_vfprintf_r+0x1548>
   1bbf0:	f7ff faec 	bl	1b1cc <_vfprintf_r+0xb20>
   1bbf4:	981f      	ldr	r0, [sp, #124]	; 0x7c
   1bbf6:	68b9      	ldr	r1, [r7, #8]
   1bbf8:	687b      	ldr	r3, [r7, #4]
   1bbfa:	aa32      	add	r2, sp, #200	; 0xc8
   1bbfc:	e62e      	b.n	1b85c <_vfprintf_r+0x11b0>
   1bbfe:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   1bc00:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   1bc02:	4694      	mov	ip, r2
   1bc04:	4463      	add	r3, ip
   1bc06:	001a      	movs	r2, r3
   1bc08:	930e      	str	r3, [sp, #56]	; 0x38
   1bc0a:	e75d      	b.n	1bac8 <_vfprintf_r+0x141c>
   1bc0c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   1bc0e:	e599      	b.n	1b744 <_vfprintf_r+0x1098>
   1bc10:	212e      	movs	r1, #46	; 0x2e
   1bc12:	2330      	movs	r3, #48	; 0x30
   1bc14:	aa16      	add	r2, sp, #88	; 0x58
   1bc16:	1852      	adds	r2, r2, r1
   1bc18:	7013      	strb	r3, [r2, #0]
   1bc1a:	002b      	movs	r3, r5
   1bc1c:	aa16      	add	r2, sp, #88	; 0x58
   1bc1e:	3101      	adds	r1, #1
   1bc20:	3330      	adds	r3, #48	; 0x30
   1bc22:	1852      	adds	r2, r2, r1
   1bc24:	7013      	strb	r3, [r2, #0]
   1bc26:	ab22      	add	r3, sp, #136	; 0x88
   1bc28:	e6c1      	b.n	1b9ae <_vfprintf_r+0x1302>
   1bc2a:	9b15      	ldr	r3, [sp, #84]	; 0x54
   1bc2c:	2b00      	cmp	r3, #0
   1bc2e:	db52      	blt.n	1bcd6 <_vfprintf_r+0x162a>
   1bc30:	ab16      	add	r3, sp, #88	; 0x58
   1bc32:	7fdb      	ldrb	r3, [r3, #31]
   1bc34:	4698      	mov	r8, r3
   1bc36:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1bc38:	2b47      	cmp	r3, #71	; 0x47
   1bc3a:	dc48      	bgt.n	1bcce <_vfprintf_r+0x1622>
   1bc3c:	4b4e      	ldr	r3, [pc, #312]	; (1bd78 <_vfprintf_r+0x16cc>)
   1bc3e:	9311      	str	r3, [sp, #68]	; 0x44
   1bc40:	f7ff f88c 	bl	1ad5c <_vfprintf_r+0x6b0>
   1bc44:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   1bc46:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   1bc48:	4694      	mov	ip, r2
   1bc4a:	4463      	add	r3, ip
   1bc4c:	4453      	add	r3, sl
   1bc4e:	001a      	movs	r2, r3
   1bc50:	930e      	str	r3, [sp, #56]	; 0x38
   1bc52:	43db      	mvns	r3, r3
   1bc54:	17db      	asrs	r3, r3, #31
   1bc56:	401a      	ands	r2, r3
   1bc58:	9208      	str	r2, [sp, #32]
   1bc5a:	e595      	b.n	1b788 <_vfprintf_r+0x10dc>
   1bc5c:	46a9      	mov	r9, r5
   1bc5e:	4648      	mov	r0, r9
   1bc60:	1909      	adds	r1, r1, r4
   1bc62:	3301      	adds	r3, #1
   1bc64:	6010      	str	r0, [r2, #0]
   1bc66:	6054      	str	r4, [r2, #4]
   1bc68:	60b9      	str	r1, [r7, #8]
   1bc6a:	3208      	adds	r2, #8
   1bc6c:	607b      	str	r3, [r7, #4]
   1bc6e:	2b07      	cmp	r3, #7
   1bc70:	dc00      	bgt.n	1bc74 <_vfprintf_r+0x15c8>
   1bc72:	e5f6      	b.n	1b862 <_vfprintf_r+0x11b6>
   1bc74:	003a      	movs	r2, r7
   1bc76:	4659      	mov	r1, fp
   1bc78:	9806      	ldr	r0, [sp, #24]
   1bc7a:	f002 fc57 	bl	1e52c <__sprint_r>
   1bc7e:	2800      	cmp	r0, #0
   1bc80:	d001      	beq.n	1bc86 <_vfprintf_r+0x15da>
   1bc82:	f7ff faa3 	bl	1b1cc <_vfprintf_r+0xb20>
   1bc86:	68b9      	ldr	r1, [r7, #8]
   1bc88:	687b      	ldr	r3, [r7, #4]
   1bc8a:	aa32      	add	r2, sp, #200	; 0xc8
   1bc8c:	e5e9      	b.n	1b862 <_vfprintf_r+0x11b6>
   1bc8e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1bc90:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   1bc92:	1a98      	subs	r0, r3, r2
   1bc94:	1c43      	adds	r3, r0, #1
   1bc96:	001a      	movs	r2, r3
   1bc98:	930e      	str	r3, [sp, #56]	; 0x38
   1bc9a:	e715      	b.n	1bac8 <_vfprintf_r+0x141c>
   1bc9c:	4a37      	ldr	r2, [pc, #220]	; (1bd7c <_vfprintf_r+0x16d0>)
   1bc9e:	687b      	ldr	r3, [r7, #4]
   1bca0:	4691      	mov	r9, r2
   1bca2:	f7ff fbf5 	bl	1b490 <_vfprintf_r+0xde4>
   1bca6:	2301      	movs	r3, #1
   1bca8:	4023      	ands	r3, r4
   1bcaa:	9313      	str	r3, [sp, #76]	; 0x4c
   1bcac:	d000      	beq.n	1bcb0 <_vfprintf_r+0x1604>
   1bcae:	e689      	b.n	1b9c4 <_vfprintf_r+0x1318>
   1bcb0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   1bcb2:	43d3      	mvns	r3, r2
   1bcb4:	17db      	asrs	r3, r3, #31
   1bcb6:	401a      	ands	r2, r3
   1bcb8:	9208      	str	r2, [sp, #32]
   1bcba:	e565      	b.n	1b788 <_vfprintf_r+0x10dc>
   1bcbc:	2301      	movs	r3, #1
   1bcbe:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   1bcc0:	391b      	subs	r1, #27
   1bcc2:	1a9d      	subs	r5, r3, r2
   1bcc4:	aa16      	add	r2, sp, #88	; 0x58
   1bcc6:	332c      	adds	r3, #44	; 0x2c
   1bcc8:	1852      	adds	r2, r2, r1
   1bcca:	7013      	strb	r3, [r2, #0]
   1bccc:	e62f      	b.n	1b92e <_vfprintf_r+0x1282>
   1bcce:	4b2c      	ldr	r3, [pc, #176]	; (1bd80 <_vfprintf_r+0x16d4>)
   1bcd0:	9311      	str	r3, [sp, #68]	; 0x44
   1bcd2:	f7ff f843 	bl	1ad5c <_vfprintf_r+0x6b0>
   1bcd6:	232d      	movs	r3, #45	; 0x2d
   1bcd8:	aa16      	add	r2, sp, #88	; 0x58
   1bcda:	77d3      	strb	r3, [r2, #31]
   1bcdc:	4698      	mov	r8, r3
   1bcde:	e7aa      	b.n	1bc36 <_vfprintf_r+0x158a>
   1bce0:	4653      	mov	r3, sl
   1bce2:	2b00      	cmp	r3, #0
   1bce4:	d101      	bne.n	1bcea <_vfprintf_r+0x163e>
   1bce6:	07e3      	lsls	r3, r4, #31
   1bce8:	d503      	bpl.n	1bcf2 <_vfprintf_r+0x1646>
   1bcea:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   1bcec:	1c58      	adds	r0, r3, #1
   1bcee:	0003      	movs	r3, r0
   1bcf0:	e7ac      	b.n	1bc4c <_vfprintf_r+0x15a0>
   1bcf2:	2301      	movs	r3, #1
   1bcf4:	e708      	b.n	1bb08 <_vfprintf_r+0x145c>
   1bcf6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   1bcf8:	9a11      	ldr	r2, [sp, #68]	; 0x44
   1bcfa:	1a9b      	subs	r3, r3, r2
   1bcfc:	9314      	str	r3, [sp, #80]	; 0x50
   1bcfe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1bd00:	2b47      	cmp	r3, #71	; 0x47
   1bd02:	d100      	bne.n	1bd06 <_vfprintf_r+0x165a>
   1bd04:	e5f6      	b.n	1b8f4 <_vfprintf_r+0x1248>
   1bd06:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   1bd08:	9313      	str	r3, [sp, #76]	; 0x4c
   1bd0a:	e5fd      	b.n	1b908 <_vfprintf_r+0x125c>
   1bd0c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1bd0e:	1d1d      	adds	r5, r3, #4
   1bd10:	681b      	ldr	r3, [r3, #0]
   1bd12:	46a8      	mov	r8, r5
   1bd14:	469a      	mov	sl, r3
   1bd16:	2b00      	cmp	r3, #0
   1bd18:	db0a      	blt.n	1bd30 <_vfprintf_r+0x1684>
   1bd1a:	4645      	mov	r5, r8
   1bd1c:	9b07      	ldr	r3, [sp, #28]
   1bd1e:	950f      	str	r5, [sp, #60]	; 0x3c
   1bd20:	785b      	ldrb	r3, [r3, #1]
   1bd22:	9207      	str	r2, [sp, #28]
   1bd24:	f7fe fd4b 	bl	1a7be <_vfprintf_r+0x112>
   1bd28:	ab16      	add	r3, sp, #88	; 0x58
   1bd2a:	77d8      	strb	r0, [r3, #31]
   1bd2c:	f7ff f830 	bl	1ad90 <_vfprintf_r+0x6e4>
   1bd30:	2301      	movs	r3, #1
   1bd32:	425b      	negs	r3, r3
   1bd34:	469a      	mov	sl, r3
   1bd36:	e7f0      	b.n	1bd1a <_vfprintf_r+0x166e>
   1bd38:	ab16      	add	r3, sp, #88	; 0x58
   1bd3a:	77d8      	strb	r0, [r3, #31]
   1bd3c:	f7fe ff27 	bl	1ab8e <_vfprintf_r+0x4e2>
   1bd40:	ab16      	add	r3, sp, #88	; 0x58
   1bd42:	77d8      	strb	r0, [r3, #31]
   1bd44:	f7fe fdce 	bl	1a8e4 <_vfprintf_r+0x238>
   1bd48:	480c      	ldr	r0, [pc, #48]	; (1bd7c <_vfprintf_r+0x16d0>)
   1bd4a:	4681      	mov	r9, r0
   1bd4c:	e787      	b.n	1bc5e <_vfprintf_r+0x15b2>
   1bd4e:	ab16      	add	r3, sp, #88	; 0x58
   1bd50:	77d8      	strb	r0, [r3, #31]
   1bd52:	f7ff f829 	bl	1ada8 <_vfprintf_r+0x6fc>
   1bd56:	ab16      	add	r3, sp, #88	; 0x58
   1bd58:	77d8      	strb	r0, [r3, #31]
   1bd5a:	f7fe ffc3 	bl	1ace4 <_vfprintf_r+0x638>
   1bd5e:	ab16      	add	r3, sp, #88	; 0x58
   1bd60:	77d8      	strb	r0, [r3, #31]
   1bd62:	f7fe ffa5 	bl	1acb0 <_vfprintf_r+0x604>
   1bd66:	ab16      	add	r3, sp, #88	; 0x58
   1bd68:	77d8      	strb	r0, [r3, #31]
   1bd6a:	f7fe feaf 	bl	1aacc <_vfprintf_r+0x420>
   1bd6e:	aa16      	add	r2, sp, #88	; 0x58
   1bd70:	232e      	movs	r3, #46	; 0x2e
   1bd72:	4694      	mov	ip, r2
   1bd74:	4463      	add	r3, ip
   1bd76:	e61a      	b.n	1b9ae <_vfprintf_r+0x1302>
   1bd78:	00020708 	.word	0x00020708
   1bd7c:	00020750 	.word	0x00020750
   1bd80:	0002070c 	.word	0x0002070c

0001bd84 <__sbprintf>:
   1bd84:	b5f0      	push	{r4, r5, r6, r7, lr}
   1bd86:	0015      	movs	r5, r2
   1bd88:	2202      	movs	r2, #2
   1bd8a:	4c1e      	ldr	r4, [pc, #120]	; (1be04 <__sbprintf+0x80>)
   1bd8c:	001f      	movs	r7, r3
   1bd8e:	898b      	ldrh	r3, [r1, #12]
   1bd90:	44a5      	add	sp, r4
   1bd92:	4393      	bics	r3, r2
   1bd94:	466a      	mov	r2, sp
   1bd96:	8193      	strh	r3, [r2, #12]
   1bd98:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   1bd9a:	0006      	movs	r6, r0
   1bd9c:	9319      	str	r3, [sp, #100]	; 0x64
   1bd9e:	89cb      	ldrh	r3, [r1, #14]
   1bda0:	a816      	add	r0, sp, #88	; 0x58
   1bda2:	81d3      	strh	r3, [r2, #14]
   1bda4:	69cb      	ldr	r3, [r1, #28]
   1bda6:	000c      	movs	r4, r1
   1bda8:	9307      	str	r3, [sp, #28]
   1bdaa:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   1bdac:	9309      	str	r3, [sp, #36]	; 0x24
   1bdae:	ab1a      	add	r3, sp, #104	; 0x68
   1bdb0:	9300      	str	r3, [sp, #0]
   1bdb2:	9304      	str	r3, [sp, #16]
   1bdb4:	2380      	movs	r3, #128	; 0x80
   1bdb6:	00db      	lsls	r3, r3, #3
   1bdb8:	9302      	str	r3, [sp, #8]
   1bdba:	9305      	str	r3, [sp, #20]
   1bdbc:	2300      	movs	r3, #0
   1bdbe:	9306      	str	r3, [sp, #24]
   1bdc0:	f001 fd5e 	bl	1d880 <__retarget_lock_init_recursive>
   1bdc4:	002a      	movs	r2, r5
   1bdc6:	003b      	movs	r3, r7
   1bdc8:	4669      	mov	r1, sp
   1bdca:	0030      	movs	r0, r6
   1bdcc:	f7fe fc6e 	bl	1a6ac <_vfprintf_r>
   1bdd0:	1e05      	subs	r5, r0, #0
   1bdd2:	db05      	blt.n	1bde0 <__sbprintf+0x5c>
   1bdd4:	4669      	mov	r1, sp
   1bdd6:	0030      	movs	r0, r6
   1bdd8:	f001 f9ba 	bl	1d150 <_fflush_r>
   1bddc:	2800      	cmp	r0, #0
   1bdde:	d10e      	bne.n	1bdfe <__sbprintf+0x7a>
   1bde0:	466b      	mov	r3, sp
   1bde2:	899b      	ldrh	r3, [r3, #12]
   1bde4:	065b      	lsls	r3, r3, #25
   1bde6:	d503      	bpl.n	1bdf0 <__sbprintf+0x6c>
   1bde8:	2240      	movs	r2, #64	; 0x40
   1bdea:	89a3      	ldrh	r3, [r4, #12]
   1bdec:	4313      	orrs	r3, r2
   1bdee:	81a3      	strh	r3, [r4, #12]
   1bdf0:	9816      	ldr	r0, [sp, #88]	; 0x58
   1bdf2:	f001 fd47 	bl	1d884 <__retarget_lock_close_recursive>
   1bdf6:	0028      	movs	r0, r5
   1bdf8:	4b03      	ldr	r3, [pc, #12]	; (1be08 <__sbprintf+0x84>)
   1bdfa:	449d      	add	sp, r3
   1bdfc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1bdfe:	2501      	movs	r5, #1
   1be00:	426d      	negs	r5, r5
   1be02:	e7ed      	b.n	1bde0 <__sbprintf+0x5c>
   1be04:	fffffb94 	.word	0xfffffb94
   1be08:	0000046c 	.word	0x0000046c

0001be0c <__ascii_wctomb>:
   1be0c:	2900      	cmp	r1, #0
   1be0e:	d004      	beq.n	1be1a <__ascii_wctomb+0xe>
   1be10:	2aff      	cmp	r2, #255	; 0xff
   1be12:	d804      	bhi.n	1be1e <__ascii_wctomb+0x12>
   1be14:	2001      	movs	r0, #1
   1be16:	700a      	strb	r2, [r1, #0]
   1be18:	4770      	bx	lr
   1be1a:	2000      	movs	r0, #0
   1be1c:	e7fc      	b.n	1be18 <__ascii_wctomb+0xc>
   1be1e:	238a      	movs	r3, #138	; 0x8a
   1be20:	6003      	str	r3, [r0, #0]
   1be22:	2001      	movs	r0, #1
   1be24:	4240      	negs	r0, r0
   1be26:	e7f7      	b.n	1be18 <__ascii_wctomb+0xc>

0001be28 <__swsetup_r>:
   1be28:	4b33      	ldr	r3, [pc, #204]	; (1bef8 <__swsetup_r+0xd0>)
   1be2a:	b570      	push	{r4, r5, r6, lr}
   1be2c:	0005      	movs	r5, r0
   1be2e:	6818      	ldr	r0, [r3, #0]
   1be30:	000c      	movs	r4, r1
   1be32:	2800      	cmp	r0, #0
   1be34:	d002      	beq.n	1be3c <__swsetup_r+0x14>
   1be36:	6b83      	ldr	r3, [r0, #56]	; 0x38
   1be38:	2b00      	cmp	r3, #0
   1be3a:	d03c      	beq.n	1beb6 <__swsetup_r+0x8e>
   1be3c:	230c      	movs	r3, #12
   1be3e:	5ee2      	ldrsh	r2, [r4, r3]
   1be40:	b293      	uxth	r3, r2
   1be42:	0719      	lsls	r1, r3, #28
   1be44:	d50d      	bpl.n	1be62 <__swsetup_r+0x3a>
   1be46:	6921      	ldr	r1, [r4, #16]
   1be48:	2900      	cmp	r1, #0
   1be4a:	d015      	beq.n	1be78 <__swsetup_r+0x50>
   1be4c:	07da      	lsls	r2, r3, #31
   1be4e:	d521      	bpl.n	1be94 <__swsetup_r+0x6c>
   1be50:	2300      	movs	r3, #0
   1be52:	60a3      	str	r3, [r4, #8]
   1be54:	6963      	ldr	r3, [r4, #20]
   1be56:	2000      	movs	r0, #0
   1be58:	425b      	negs	r3, r3
   1be5a:	61a3      	str	r3, [r4, #24]
   1be5c:	2900      	cmp	r1, #0
   1be5e:	d021      	beq.n	1bea4 <__swsetup_r+0x7c>
   1be60:	bd70      	pop	{r4, r5, r6, pc}
   1be62:	06d9      	lsls	r1, r3, #27
   1be64:	d53f      	bpl.n	1bee6 <__swsetup_r+0xbe>
   1be66:	075b      	lsls	r3, r3, #29
   1be68:	d428      	bmi.n	1bebc <__swsetup_r+0x94>
   1be6a:	6921      	ldr	r1, [r4, #16]
   1be6c:	2308      	movs	r3, #8
   1be6e:	4313      	orrs	r3, r2
   1be70:	81a3      	strh	r3, [r4, #12]
   1be72:	b29b      	uxth	r3, r3
   1be74:	2900      	cmp	r1, #0
   1be76:	d1e9      	bne.n	1be4c <__swsetup_r+0x24>
   1be78:	22a0      	movs	r2, #160	; 0xa0
   1be7a:	2080      	movs	r0, #128	; 0x80
   1be7c:	0092      	lsls	r2, r2, #2
   1be7e:	0080      	lsls	r0, r0, #2
   1be80:	401a      	ands	r2, r3
   1be82:	4282      	cmp	r2, r0
   1be84:	d0e2      	beq.n	1be4c <__swsetup_r+0x24>
   1be86:	0021      	movs	r1, r4
   1be88:	0028      	movs	r0, r5
   1be8a:	f001 fd31 	bl	1d8f0 <__smakebuf_r>
   1be8e:	89a3      	ldrh	r3, [r4, #12]
   1be90:	6921      	ldr	r1, [r4, #16]
   1be92:	e7db      	b.n	1be4c <__swsetup_r+0x24>
   1be94:	2200      	movs	r2, #0
   1be96:	079b      	lsls	r3, r3, #30
   1be98:	d400      	bmi.n	1be9c <__swsetup_r+0x74>
   1be9a:	6962      	ldr	r2, [r4, #20]
   1be9c:	60a2      	str	r2, [r4, #8]
   1be9e:	2000      	movs	r0, #0
   1bea0:	2900      	cmp	r1, #0
   1bea2:	d1dd      	bne.n	1be60 <__swsetup_r+0x38>
   1bea4:	220c      	movs	r2, #12
   1bea6:	5ea3      	ldrsh	r3, [r4, r2]
   1bea8:	061a      	lsls	r2, r3, #24
   1beaa:	d5d9      	bpl.n	1be60 <__swsetup_r+0x38>
   1beac:	2240      	movs	r2, #64	; 0x40
   1beae:	4313      	orrs	r3, r2
   1beb0:	81a3      	strh	r3, [r4, #12]
   1beb2:	3801      	subs	r0, #1
   1beb4:	e7d4      	b.n	1be60 <__swsetup_r+0x38>
   1beb6:	f001 f9a5 	bl	1d204 <__sinit>
   1beba:	e7bf      	b.n	1be3c <__swsetup_r+0x14>
   1bebc:	6b21      	ldr	r1, [r4, #48]	; 0x30
   1bebe:	2900      	cmp	r1, #0
   1bec0:	d00a      	beq.n	1bed8 <__swsetup_r+0xb0>
   1bec2:	0023      	movs	r3, r4
   1bec4:	3340      	adds	r3, #64	; 0x40
   1bec6:	4299      	cmp	r1, r3
   1bec8:	d004      	beq.n	1bed4 <__swsetup_r+0xac>
   1beca:	0028      	movs	r0, r5
   1becc:	f001 fa44 	bl	1d358 <_free_r>
   1bed0:	230c      	movs	r3, #12
   1bed2:	5ee2      	ldrsh	r2, [r4, r3]
   1bed4:	2300      	movs	r3, #0
   1bed6:	6323      	str	r3, [r4, #48]	; 0x30
   1bed8:	2324      	movs	r3, #36	; 0x24
   1beda:	439a      	bics	r2, r3
   1bedc:	2300      	movs	r3, #0
   1bede:	6921      	ldr	r1, [r4, #16]
   1bee0:	6063      	str	r3, [r4, #4]
   1bee2:	6021      	str	r1, [r4, #0]
   1bee4:	e7c2      	b.n	1be6c <__swsetup_r+0x44>
   1bee6:	2309      	movs	r3, #9
   1bee8:	602b      	str	r3, [r5, #0]
   1beea:	2340      	movs	r3, #64	; 0x40
   1beec:	2001      	movs	r0, #1
   1beee:	431a      	orrs	r2, r3
   1bef0:	81a2      	strh	r2, [r4, #12]
   1bef2:	4240      	negs	r0, r0
   1bef4:	e7b4      	b.n	1be60 <__swsetup_r+0x38>
   1bef6:	46c0      	nop			; (mov r8, r8)
   1bef8:	20000018 	.word	0x20000018

0001befc <register_fini>:
   1befc:	4b03      	ldr	r3, [pc, #12]	; (1bf0c <register_fini+0x10>)
   1befe:	b510      	push	{r4, lr}
   1bf00:	2b00      	cmp	r3, #0
   1bf02:	d002      	beq.n	1bf0a <register_fini+0xe>
   1bf04:	4802      	ldr	r0, [pc, #8]	; (1bf10 <register_fini+0x14>)
   1bf06:	f000 f805 	bl	1bf14 <atexit>
   1bf0a:	bd10      	pop	{r4, pc}
   1bf0c:	00000000 	.word	0x00000000
   1bf10:	0001d285 	.word	0x0001d285

0001bf14 <atexit>:
   1bf14:	b510      	push	{r4, lr}
   1bf16:	0001      	movs	r1, r0
   1bf18:	2300      	movs	r3, #0
   1bf1a:	2200      	movs	r2, #0
   1bf1c:	2000      	movs	r0, #0
   1bf1e:	f002 fb23 	bl	1e568 <__register_exitproc>
   1bf22:	bd10      	pop	{r4, pc}

0001bf24 <quorem>:
   1bf24:	b5f0      	push	{r4, r5, r6, r7, lr}
   1bf26:	4645      	mov	r5, r8
   1bf28:	4680      	mov	r8, r0
   1bf2a:	46de      	mov	lr, fp
   1bf2c:	4657      	mov	r7, sl
   1bf2e:	464e      	mov	r6, r9
   1bf30:	4642      	mov	r2, r8
   1bf32:	b5e0      	push	{r5, r6, r7, lr}
   1bf34:	690c      	ldr	r4, [r1, #16]
   1bf36:	6912      	ldr	r2, [r2, #16]
   1bf38:	b085      	sub	sp, #20
   1bf3a:	000b      	movs	r3, r1
   1bf3c:	9102      	str	r1, [sp, #8]
   1bf3e:	2000      	movs	r0, #0
   1bf40:	4294      	cmp	r4, r2
   1bf42:	dd00      	ble.n	1bf46 <quorem+0x22>
   1bf44:	e090      	b.n	1c068 <quorem+0x144>
   1bf46:	2214      	movs	r2, #20
   1bf48:	4694      	mov	ip, r2
   1bf4a:	4463      	add	r3, ip
   1bf4c:	4699      	mov	r9, r3
   1bf4e:	464a      	mov	r2, r9
   1bf50:	3c01      	subs	r4, #1
   1bf52:	00a3      	lsls	r3, r4, #2
   1bf54:	18d6      	adds	r6, r2, r3
   1bf56:	2214      	movs	r2, #20
   1bf58:	4442      	add	r2, r8
   1bf5a:	4693      	mov	fp, r2
   1bf5c:	449b      	add	fp, r3
   1bf5e:	6833      	ldr	r3, [r6, #0]
   1bf60:	0015      	movs	r5, r2
   1bf62:	1c59      	adds	r1, r3, #1
   1bf64:	465b      	mov	r3, fp
   1bf66:	6818      	ldr	r0, [r3, #0]
   1bf68:	9201      	str	r2, [sp, #4]
   1bf6a:	f7fa fb5b 	bl	16624 <__udivsi3>
   1bf6e:	1e03      	subs	r3, r0, #0
   1bf70:	9000      	str	r0, [sp, #0]
   1bf72:	d042      	beq.n	1bffa <quorem+0xd6>
   1bf74:	0029      	movs	r1, r5
   1bf76:	2700      	movs	r7, #0
   1bf78:	464d      	mov	r5, r9
   1bf7a:	2000      	movs	r0, #0
   1bf7c:	46b1      	mov	r9, r6
   1bf7e:	46a2      	mov	sl, r4
   1bf80:	003e      	movs	r6, r7
   1bf82:	0004      	movs	r4, r0
   1bf84:	469c      	mov	ip, r3
   1bf86:	002f      	movs	r7, r5
   1bf88:	0008      	movs	r0, r1
   1bf8a:	9503      	str	r5, [sp, #12]
   1bf8c:	4663      	mov	r3, ip
   1bf8e:	cf04      	ldmia	r7!, {r2}
   1bf90:	0415      	lsls	r5, r2, #16
   1bf92:	0c2d      	lsrs	r5, r5, #16
   1bf94:	435d      	muls	r5, r3
   1bf96:	0c12      	lsrs	r2, r2, #16
   1bf98:	435a      	muls	r2, r3
   1bf9a:	19ad      	adds	r5, r5, r6
   1bf9c:	0c2b      	lsrs	r3, r5, #16
   1bf9e:	18d2      	adds	r2, r2, r3
   1bfa0:	6803      	ldr	r3, [r0, #0]
   1bfa2:	042d      	lsls	r5, r5, #16
   1bfa4:	0419      	lsls	r1, r3, #16
   1bfa6:	0c09      	lsrs	r1, r1, #16
   1bfa8:	1909      	adds	r1, r1, r4
   1bfaa:	0c16      	lsrs	r6, r2, #16
   1bfac:	0c2d      	lsrs	r5, r5, #16
   1bfae:	0412      	lsls	r2, r2, #16
   1bfb0:	1b49      	subs	r1, r1, r5
   1bfb2:	0c12      	lsrs	r2, r2, #16
   1bfb4:	0c1b      	lsrs	r3, r3, #16
   1bfb6:	1a9b      	subs	r3, r3, r2
   1bfb8:	140a      	asrs	r2, r1, #16
   1bfba:	189b      	adds	r3, r3, r2
   1bfbc:	0409      	lsls	r1, r1, #16
   1bfbe:	141c      	asrs	r4, r3, #16
   1bfc0:	0c09      	lsrs	r1, r1, #16
   1bfc2:	041b      	lsls	r3, r3, #16
   1bfc4:	4319      	orrs	r1, r3
   1bfc6:	c002      	stmia	r0!, {r1}
   1bfc8:	45b9      	cmp	r9, r7
   1bfca:	d2df      	bcs.n	1bf8c <quorem+0x68>
   1bfcc:	9b03      	ldr	r3, [sp, #12]
   1bfce:	464e      	mov	r6, r9
   1bfd0:	4699      	mov	r9, r3
   1bfd2:	465b      	mov	r3, fp
   1bfd4:	681b      	ldr	r3, [r3, #0]
   1bfd6:	4654      	mov	r4, sl
   1bfd8:	2b00      	cmp	r3, #0
   1bfda:	d10e      	bne.n	1bffa <quorem+0xd6>
   1bfdc:	465b      	mov	r3, fp
   1bfde:	9a01      	ldr	r2, [sp, #4]
   1bfe0:	3b04      	subs	r3, #4
   1bfe2:	429a      	cmp	r2, r3
   1bfe4:	d304      	bcc.n	1bff0 <quorem+0xcc>
   1bfe6:	e006      	b.n	1bff6 <quorem+0xd2>
   1bfe8:	3b04      	subs	r3, #4
   1bfea:	3c01      	subs	r4, #1
   1bfec:	429a      	cmp	r2, r3
   1bfee:	d202      	bcs.n	1bff6 <quorem+0xd2>
   1bff0:	6819      	ldr	r1, [r3, #0]
   1bff2:	2900      	cmp	r1, #0
   1bff4:	d0f8      	beq.n	1bfe8 <quorem+0xc4>
   1bff6:	4643      	mov	r3, r8
   1bff8:	611c      	str	r4, [r3, #16]
   1bffa:	9902      	ldr	r1, [sp, #8]
   1bffc:	4640      	mov	r0, r8
   1bffe:	f001 ff33 	bl	1de68 <__mcmp>
   1c002:	2800      	cmp	r0, #0
   1c004:	db2f      	blt.n	1c066 <quorem+0x142>
   1c006:	464f      	mov	r7, r9
   1c008:	2000      	movs	r0, #0
   1c00a:	9b00      	ldr	r3, [sp, #0]
   1c00c:	9d01      	ldr	r5, [sp, #4]
   1c00e:	3301      	adds	r3, #1
   1c010:	9300      	str	r3, [sp, #0]
   1c012:	682b      	ldr	r3, [r5, #0]
   1c014:	cf02      	ldmia	r7!, {r1}
   1c016:	041a      	lsls	r2, r3, #16
   1c018:	0c12      	lsrs	r2, r2, #16
   1c01a:	1810      	adds	r0, r2, r0
   1c01c:	040a      	lsls	r2, r1, #16
   1c01e:	0c12      	lsrs	r2, r2, #16
   1c020:	1a82      	subs	r2, r0, r2
   1c022:	0c09      	lsrs	r1, r1, #16
   1c024:	0c1b      	lsrs	r3, r3, #16
   1c026:	1a5b      	subs	r3, r3, r1
   1c028:	1411      	asrs	r1, r2, #16
   1c02a:	185b      	adds	r3, r3, r1
   1c02c:	0412      	lsls	r2, r2, #16
   1c02e:	1418      	asrs	r0, r3, #16
   1c030:	0c12      	lsrs	r2, r2, #16
   1c032:	041b      	lsls	r3, r3, #16
   1c034:	4313      	orrs	r3, r2
   1c036:	c508      	stmia	r5!, {r3}
   1c038:	42be      	cmp	r6, r7
   1c03a:	d2ea      	bcs.n	1c012 <quorem+0xee>
   1c03c:	9901      	ldr	r1, [sp, #4]
   1c03e:	00a3      	lsls	r3, r4, #2
   1c040:	468c      	mov	ip, r1
   1c042:	4463      	add	r3, ip
   1c044:	681a      	ldr	r2, [r3, #0]
   1c046:	2a00      	cmp	r2, #0
   1c048:	d10d      	bne.n	1c066 <quorem+0x142>
   1c04a:	3b04      	subs	r3, #4
   1c04c:	000a      	movs	r2, r1
   1c04e:	4299      	cmp	r1, r3
   1c050:	d304      	bcc.n	1c05c <quorem+0x138>
   1c052:	e006      	b.n	1c062 <quorem+0x13e>
   1c054:	3b04      	subs	r3, #4
   1c056:	3c01      	subs	r4, #1
   1c058:	429a      	cmp	r2, r3
   1c05a:	d202      	bcs.n	1c062 <quorem+0x13e>
   1c05c:	6819      	ldr	r1, [r3, #0]
   1c05e:	2900      	cmp	r1, #0
   1c060:	d0f8      	beq.n	1c054 <quorem+0x130>
   1c062:	4643      	mov	r3, r8
   1c064:	611c      	str	r4, [r3, #16]
   1c066:	9800      	ldr	r0, [sp, #0]
   1c068:	b005      	add	sp, #20
   1c06a:	bc3c      	pop	{r2, r3, r4, r5}
   1c06c:	4690      	mov	r8, r2
   1c06e:	4699      	mov	r9, r3
   1c070:	46a2      	mov	sl, r4
   1c072:	46ab      	mov	fp, r5
   1c074:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1c076:	46c0      	nop			; (mov r8, r8)

0001c078 <_dtoa_r>:
   1c078:	b5f0      	push	{r4, r5, r6, r7, lr}
   1c07a:	4657      	mov	r7, sl
   1c07c:	464e      	mov	r6, r9
   1c07e:	4645      	mov	r5, r8
   1c080:	46de      	mov	lr, fp
   1c082:	b5e0      	push	{r5, r6, r7, lr}
   1c084:	6c01      	ldr	r1, [r0, #64]	; 0x40
   1c086:	b099      	sub	sp, #100	; 0x64
   1c088:	4682      	mov	sl, r0
   1c08a:	001d      	movs	r5, r3
   1c08c:	0016      	movs	r6, r2
   1c08e:	001f      	movs	r7, r3
   1c090:	2900      	cmp	r1, #0
   1c092:	d009      	beq.n	1c0a8 <_dtoa_r+0x30>
   1c094:	2301      	movs	r3, #1
   1c096:	6c42      	ldr	r2, [r0, #68]	; 0x44
   1c098:	4093      	lsls	r3, r2
   1c09a:	604a      	str	r2, [r1, #4]
   1c09c:	608b      	str	r3, [r1, #8]
   1c09e:	f001 fcd7 	bl	1da50 <_Bfree>
   1c0a2:	2300      	movs	r3, #0
   1c0a4:	4652      	mov	r2, sl
   1c0a6:	6413      	str	r3, [r2, #64]	; 0x40
   1c0a8:	46b8      	mov	r8, r7
   1c0aa:	2f00      	cmp	r7, #0
   1c0ac:	db37      	blt.n	1c11e <_dtoa_r+0xa6>
   1c0ae:	2300      	movs	r3, #0
   1c0b0:	9a25      	ldr	r2, [sp, #148]	; 0x94
   1c0b2:	6013      	str	r3, [r2, #0]
   1c0b4:	4642      	mov	r2, r8
   1c0b6:	4bd6      	ldr	r3, [pc, #856]	; (1c410 <_dtoa_r+0x398>)
   1c0b8:	401a      	ands	r2, r3
   1c0ba:	429a      	cmp	r2, r3
   1c0bc:	d018      	beq.n	1c0f0 <_dtoa_r+0x78>
   1c0be:	2200      	movs	r2, #0
   1c0c0:	2300      	movs	r3, #0
   1c0c2:	0030      	movs	r0, r6
   1c0c4:	0039      	movs	r1, r7
   1c0c6:	f7fa fc33 	bl	16930 <__aeabi_dcmpeq>
   1c0ca:	2800      	cmp	r0, #0
   1c0cc:	d02f      	beq.n	1c12e <_dtoa_r+0xb6>
   1c0ce:	2301      	movs	r3, #1
   1c0d0:	9a24      	ldr	r2, [sp, #144]	; 0x90
   1c0d2:	6013      	str	r3, [r2, #0]
   1c0d4:	9b26      	ldr	r3, [sp, #152]	; 0x98
   1c0d6:	2b00      	cmp	r3, #0
   1c0d8:	d100      	bne.n	1c0dc <_dtoa_r+0x64>
   1c0da:	e22a      	b.n	1c532 <_dtoa_r+0x4ba>
   1c0dc:	48cd      	ldr	r0, [pc, #820]	; (1c414 <_dtoa_r+0x39c>)
   1c0de:	6018      	str	r0, [r3, #0]
   1c0e0:	3801      	subs	r0, #1
   1c0e2:	b019      	add	sp, #100	; 0x64
   1c0e4:	bc3c      	pop	{r2, r3, r4, r5}
   1c0e6:	4690      	mov	r8, r2
   1c0e8:	4699      	mov	r9, r3
   1c0ea:	46a2      	mov	sl, r4
   1c0ec:	46ab      	mov	fp, r5
   1c0ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1c0f0:	4bc9      	ldr	r3, [pc, #804]	; (1c418 <_dtoa_r+0x3a0>)
   1c0f2:	9a24      	ldr	r2, [sp, #144]	; 0x90
   1c0f4:	6013      	str	r3, [r2, #0]
   1c0f6:	2e00      	cmp	r6, #0
   1c0f8:	d10b      	bne.n	1c112 <_dtoa_r+0x9a>
   1c0fa:	4643      	mov	r3, r8
   1c0fc:	0318      	lsls	r0, r3, #12
   1c0fe:	d108      	bne.n	1c112 <_dtoa_r+0x9a>
   1c100:	9b26      	ldr	r3, [sp, #152]	; 0x98
   1c102:	48c6      	ldr	r0, [pc, #792]	; (1c41c <_dtoa_r+0x3a4>)
   1c104:	2b00      	cmp	r3, #0
   1c106:	d0ec      	beq.n	1c0e2 <_dtoa_r+0x6a>
   1c108:	0003      	movs	r3, r0
   1c10a:	3308      	adds	r3, #8
   1c10c:	9a26      	ldr	r2, [sp, #152]	; 0x98
   1c10e:	6013      	str	r3, [r2, #0]
   1c110:	e7e7      	b.n	1c0e2 <_dtoa_r+0x6a>
   1c112:	9b26      	ldr	r3, [sp, #152]	; 0x98
   1c114:	48c2      	ldr	r0, [pc, #776]	; (1c420 <_dtoa_r+0x3a8>)
   1c116:	2b00      	cmp	r3, #0
   1c118:	d0e3      	beq.n	1c0e2 <_dtoa_r+0x6a>
   1c11a:	1cc3      	adds	r3, r0, #3
   1c11c:	e7f6      	b.n	1c10c <_dtoa_r+0x94>
   1c11e:	2301      	movs	r3, #1
   1c120:	9a25      	ldr	r2, [sp, #148]	; 0x94
   1c122:	0068      	lsls	r0, r5, #1
   1c124:	6013      	str	r3, [r2, #0]
   1c126:	0843      	lsrs	r3, r0, #1
   1c128:	4698      	mov	r8, r3
   1c12a:	001f      	movs	r7, r3
   1c12c:	e7c2      	b.n	1c0b4 <_dtoa_r+0x3c>
   1c12e:	ab16      	add	r3, sp, #88	; 0x58
   1c130:	9301      	str	r3, [sp, #4]
   1c132:	ab17      	add	r3, sp, #92	; 0x5c
   1c134:	9300      	str	r3, [sp, #0]
   1c136:	0032      	movs	r2, r6
   1c138:	003b      	movs	r3, r7
   1c13a:	4650      	mov	r0, sl
   1c13c:	f001 ff4a 	bl	1dfd4 <__d2b>
   1c140:	4643      	mov	r3, r8
   1c142:	4683      	mov	fp, r0
   1c144:	0d1a      	lsrs	r2, r3, #20
   1c146:	d100      	bne.n	1c14a <_dtoa_r+0xd2>
   1c148:	e1d6      	b.n	1c4f8 <_dtoa_r+0x480>
   1c14a:	033b      	lsls	r3, r7, #12
   1c14c:	4cb5      	ldr	r4, [pc, #724]	; (1c424 <_dtoa_r+0x3ac>)
   1c14e:	0b1b      	lsrs	r3, r3, #12
   1c150:	431c      	orrs	r4, r3
   1c152:	4bb5      	ldr	r3, [pc, #724]	; (1c428 <_dtoa_r+0x3b0>)
   1c154:	0030      	movs	r0, r6
   1c156:	4698      	mov	r8, r3
   1c158:	9b16      	ldr	r3, [sp, #88]	; 0x58
   1c15a:	0021      	movs	r1, r4
   1c15c:	4699      	mov	r9, r3
   1c15e:	2300      	movs	r3, #0
   1c160:	4490      	add	r8, r2
   1c162:	930f      	str	r3, [sp, #60]	; 0x3c
   1c164:	2200      	movs	r2, #0
   1c166:	4bb1      	ldr	r3, [pc, #708]	; (1c42c <_dtoa_r+0x3b4>)
   1c168:	f7fc fe62 	bl	18e30 <__aeabi_dsub>
   1c16c:	4ab0      	ldr	r2, [pc, #704]	; (1c430 <_dtoa_r+0x3b8>)
   1c16e:	4bb1      	ldr	r3, [pc, #708]	; (1c434 <_dtoa_r+0x3bc>)
   1c170:	f7fc fbde 	bl	18930 <__aeabi_dmul>
   1c174:	4ab0      	ldr	r2, [pc, #704]	; (1c438 <_dtoa_r+0x3c0>)
   1c176:	4bb1      	ldr	r3, [pc, #708]	; (1c43c <_dtoa_r+0x3c4>)
   1c178:	f7fb fc96 	bl	17aa8 <__aeabi_dadd>
   1c17c:	0004      	movs	r4, r0
   1c17e:	4640      	mov	r0, r8
   1c180:	000d      	movs	r5, r1
   1c182:	f7fd f99f 	bl	194c4 <__aeabi_i2d>
   1c186:	4aae      	ldr	r2, [pc, #696]	; (1c440 <_dtoa_r+0x3c8>)
   1c188:	4bae      	ldr	r3, [pc, #696]	; (1c444 <_dtoa_r+0x3cc>)
   1c18a:	f7fc fbd1 	bl	18930 <__aeabi_dmul>
   1c18e:	0002      	movs	r2, r0
   1c190:	000b      	movs	r3, r1
   1c192:	0020      	movs	r0, r4
   1c194:	0029      	movs	r1, r5
   1c196:	f7fb fc87 	bl	17aa8 <__aeabi_dadd>
   1c19a:	0004      	movs	r4, r0
   1c19c:	000d      	movs	r5, r1
   1c19e:	f7fd f95d 	bl	1945c <__aeabi_d2iz>
   1c1a2:	2200      	movs	r2, #0
   1c1a4:	9003      	str	r0, [sp, #12]
   1c1a6:	2300      	movs	r3, #0
   1c1a8:	0020      	movs	r0, r4
   1c1aa:	0029      	movs	r1, r5
   1c1ac:	f7fa fbc6 	bl	1693c <__aeabi_dcmplt>
   1c1b0:	2800      	cmp	r0, #0
   1c1b2:	d000      	beq.n	1c1b6 <_dtoa_r+0x13e>
   1c1b4:	e2b1      	b.n	1c71a <_dtoa_r+0x6a2>
   1c1b6:	2301      	movs	r3, #1
   1c1b8:	9c03      	ldr	r4, [sp, #12]
   1c1ba:	930c      	str	r3, [sp, #48]	; 0x30
   1c1bc:	2c16      	cmp	r4, #22
   1c1be:	d810      	bhi.n	1c1e2 <_dtoa_r+0x16a>
   1c1c0:	49a1      	ldr	r1, [pc, #644]	; (1c448 <_dtoa_r+0x3d0>)
   1c1c2:	00e3      	lsls	r3, r4, #3
   1c1c4:	18c9      	adds	r1, r1, r3
   1c1c6:	0032      	movs	r2, r6
   1c1c8:	6808      	ldr	r0, [r1, #0]
   1c1ca:	6849      	ldr	r1, [r1, #4]
   1c1cc:	003b      	movs	r3, r7
   1c1ce:	f7fa fbc9 	bl	16964 <__aeabi_dcmpgt>
   1c1d2:	2800      	cmp	r0, #0
   1c1d4:	d100      	bne.n	1c1d8 <_dtoa_r+0x160>
   1c1d6:	e31d      	b.n	1c814 <_dtoa_r+0x79c>
   1c1d8:	0023      	movs	r3, r4
   1c1da:	3b01      	subs	r3, #1
   1c1dc:	9303      	str	r3, [sp, #12]
   1c1de:	2300      	movs	r3, #0
   1c1e0:	930c      	str	r3, [sp, #48]	; 0x30
   1c1e2:	464b      	mov	r3, r9
   1c1e4:	4642      	mov	r2, r8
   1c1e6:	1a9a      	subs	r2, r3, r2
   1c1e8:	2300      	movs	r3, #0
   1c1ea:	9306      	str	r3, [sp, #24]
   1c1ec:	0013      	movs	r3, r2
   1c1ee:	3b01      	subs	r3, #1
   1c1f0:	9304      	str	r3, [sp, #16]
   1c1f2:	d500      	bpl.n	1c1f6 <_dtoa_r+0x17e>
   1c1f4:	e2a1      	b.n	1c73a <_dtoa_r+0x6c2>
   1c1f6:	9b03      	ldr	r3, [sp, #12]
   1c1f8:	2b00      	cmp	r3, #0
   1c1fa:	da00      	bge.n	1c1fe <_dtoa_r+0x186>
   1c1fc:	e284      	b.n	1c708 <_dtoa_r+0x690>
   1c1fe:	469c      	mov	ip, r3
   1c200:	930d      	str	r3, [sp, #52]	; 0x34
   1c202:	2300      	movs	r3, #0
   1c204:	9a04      	ldr	r2, [sp, #16]
   1c206:	4699      	mov	r9, r3
   1c208:	0011      	movs	r1, r2
   1c20a:	4461      	add	r1, ip
   1c20c:	9104      	str	r1, [sp, #16]
   1c20e:	9b22      	ldr	r3, [sp, #136]	; 0x88
   1c210:	2b09      	cmp	r3, #9
   1c212:	d900      	bls.n	1c216 <_dtoa_r+0x19e>
   1c214:	e18f      	b.n	1c536 <_dtoa_r+0x4be>
   1c216:	2401      	movs	r4, #1
   1c218:	2b05      	cmp	r3, #5
   1c21a:	dd02      	ble.n	1c222 <_dtoa_r+0x1aa>
   1c21c:	2400      	movs	r4, #0
   1c21e:	3b04      	subs	r3, #4
   1c220:	9322      	str	r3, [sp, #136]	; 0x88
   1c222:	9b22      	ldr	r3, [sp, #136]	; 0x88
   1c224:	2b03      	cmp	r3, #3
   1c226:	d101      	bne.n	1c22c <_dtoa_r+0x1b4>
   1c228:	f000 fcce 	bl	1cbc8 <_dtoa_r+0xb50>
   1c22c:	dc01      	bgt.n	1c232 <_dtoa_r+0x1ba>
   1c22e:	f000 fc92 	bl	1cb56 <_dtoa_r+0xade>
   1c232:	9b22      	ldr	r3, [sp, #136]	; 0x88
   1c234:	2b04      	cmp	r3, #4
   1c236:	d101      	bne.n	1c23c <_dtoa_r+0x1c4>
   1c238:	f000 fc40 	bl	1cabc <_dtoa_r+0xa44>
   1c23c:	2301      	movs	r3, #1
   1c23e:	930b      	str	r3, [sp, #44]	; 0x2c
   1c240:	9b22      	ldr	r3, [sp, #136]	; 0x88
   1c242:	2b05      	cmp	r3, #5
   1c244:	d001      	beq.n	1c24a <_dtoa_r+0x1d2>
   1c246:	f000 fc8b 	bl	1cb60 <_dtoa_r+0xae8>
   1c24a:	9a23      	ldr	r2, [sp, #140]	; 0x8c
   1c24c:	9b03      	ldr	r3, [sp, #12]
   1c24e:	4694      	mov	ip, r2
   1c250:	4463      	add	r3, ip
   1c252:	930e      	str	r3, [sp, #56]	; 0x38
   1c254:	3301      	adds	r3, #1
   1c256:	9307      	str	r3, [sp, #28]
   1c258:	1e1d      	subs	r5, r3, #0
   1c25a:	dc01      	bgt.n	1c260 <_dtoa_r+0x1e8>
   1c25c:	f000 fd49 	bl	1ccf2 <_dtoa_r+0xc7a>
   1c260:	9b07      	ldr	r3, [sp, #28]
   1c262:	4698      	mov	r8, r3
   1c264:	2300      	movs	r3, #0
   1c266:	4652      	mov	r2, sl
   1c268:	2100      	movs	r1, #0
   1c26a:	6453      	str	r3, [r2, #68]	; 0x44
   1c26c:	2d17      	cmp	r5, #23
   1c26e:	d90a      	bls.n	1c286 <_dtoa_r+0x20e>
   1c270:	2201      	movs	r2, #1
   1c272:	3304      	adds	r3, #4
   1c274:	005b      	lsls	r3, r3, #1
   1c276:	0018      	movs	r0, r3
   1c278:	3014      	adds	r0, #20
   1c27a:	0011      	movs	r1, r2
   1c27c:	3201      	adds	r2, #1
   1c27e:	4285      	cmp	r5, r0
   1c280:	d2f8      	bcs.n	1c274 <_dtoa_r+0x1fc>
   1c282:	4653      	mov	r3, sl
   1c284:	6459      	str	r1, [r3, #68]	; 0x44
   1c286:	4650      	mov	r0, sl
   1c288:	f001 fbba 	bl	1da00 <_Balloc>
   1c28c:	4653      	mov	r3, sl
   1c28e:	6418      	str	r0, [r3, #64]	; 0x40
   1c290:	4643      	mov	r3, r8
   1c292:	900a      	str	r0, [sp, #40]	; 0x28
   1c294:	2b0e      	cmp	r3, #14
   1c296:	d900      	bls.n	1c29a <_dtoa_r+0x222>
   1c298:	e161      	b.n	1c55e <_dtoa_r+0x4e6>
   1c29a:	2c00      	cmp	r4, #0
   1c29c:	d100      	bne.n	1c2a0 <_dtoa_r+0x228>
   1c29e:	e15e      	b.n	1c55e <_dtoa_r+0x4e6>
   1c2a0:	9610      	str	r6, [sp, #64]	; 0x40
   1c2a2:	9711      	str	r7, [sp, #68]	; 0x44
   1c2a4:	9e03      	ldr	r6, [sp, #12]
   1c2a6:	2e00      	cmp	r6, #0
   1c2a8:	dc01      	bgt.n	1c2ae <_dtoa_r+0x236>
   1c2aa:	f000 fd25 	bl	1ccf8 <_dtoa_r+0xc80>
   1c2ae:	0032      	movs	r2, r6
   1c2b0:	210f      	movs	r1, #15
   1c2b2:	4b65      	ldr	r3, [pc, #404]	; (1c448 <_dtoa_r+0x3d0>)
   1c2b4:	400a      	ands	r2, r1
   1c2b6:	00d2      	lsls	r2, r2, #3
   1c2b8:	189b      	adds	r3, r3, r2
   1c2ba:	1136      	asrs	r6, r6, #4
   1c2bc:	681c      	ldr	r4, [r3, #0]
   1c2be:	685d      	ldr	r5, [r3, #4]
   1c2c0:	06f3      	lsls	r3, r6, #27
   1c2c2:	d401      	bmi.n	1c2c8 <_dtoa_r+0x250>
   1c2c4:	f000 fcca 	bl	1cc5c <_dtoa_r+0xbe4>
   1c2c8:	4b60      	ldr	r3, [pc, #384]	; (1c44c <_dtoa_r+0x3d4>)
   1c2ca:	400e      	ands	r6, r1
   1c2cc:	6a1a      	ldr	r2, [r3, #32]
   1c2ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1c2d0:	9810      	ldr	r0, [sp, #64]	; 0x40
   1c2d2:	9911      	ldr	r1, [sp, #68]	; 0x44
   1c2d4:	f7fb fef8 	bl	180c8 <__aeabi_ddiv>
   1c2d8:	2303      	movs	r3, #3
   1c2da:	4698      	mov	r8, r3
   1c2dc:	9008      	str	r0, [sp, #32]
   1c2de:	9109      	str	r1, [sp, #36]	; 0x24
   1c2e0:	2e00      	cmp	r6, #0
   1c2e2:	d011      	beq.n	1c308 <_dtoa_r+0x290>
   1c2e4:	4f59      	ldr	r7, [pc, #356]	; (1c44c <_dtoa_r+0x3d4>)
   1c2e6:	2301      	movs	r3, #1
   1c2e8:	4233      	tst	r3, r6
   1c2ea:	d009      	beq.n	1c300 <_dtoa_r+0x288>
   1c2ec:	469c      	mov	ip, r3
   1c2ee:	683a      	ldr	r2, [r7, #0]
   1c2f0:	687b      	ldr	r3, [r7, #4]
   1c2f2:	0020      	movs	r0, r4
   1c2f4:	0029      	movs	r1, r5
   1c2f6:	44e0      	add	r8, ip
   1c2f8:	f7fc fb1a 	bl	18930 <__aeabi_dmul>
   1c2fc:	0004      	movs	r4, r0
   1c2fe:	000d      	movs	r5, r1
   1c300:	1076      	asrs	r6, r6, #1
   1c302:	3708      	adds	r7, #8
   1c304:	2e00      	cmp	r6, #0
   1c306:	d1ee      	bne.n	1c2e6 <_dtoa_r+0x26e>
   1c308:	0022      	movs	r2, r4
   1c30a:	9808      	ldr	r0, [sp, #32]
   1c30c:	9909      	ldr	r1, [sp, #36]	; 0x24
   1c30e:	002b      	movs	r3, r5
   1c310:	f7fb feda 	bl	180c8 <__aeabi_ddiv>
   1c314:	0006      	movs	r6, r0
   1c316:	000f      	movs	r7, r1
   1c318:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1c31a:	2b00      	cmp	r3, #0
   1c31c:	d009      	beq.n	1c332 <_dtoa_r+0x2ba>
   1c31e:	2200      	movs	r2, #0
   1c320:	4b40      	ldr	r3, [pc, #256]	; (1c424 <_dtoa_r+0x3ac>)
   1c322:	0030      	movs	r0, r6
   1c324:	0039      	movs	r1, r7
   1c326:	f7fa fb09 	bl	1693c <__aeabi_dcmplt>
   1c32a:	2800      	cmp	r0, #0
   1c32c:	d001      	beq.n	1c332 <_dtoa_r+0x2ba>
   1c32e:	f000 fdc2 	bl	1ceb6 <_dtoa_r+0xe3e>
   1c332:	4640      	mov	r0, r8
   1c334:	f7fd f8c6 	bl	194c4 <__aeabi_i2d>
   1c338:	0032      	movs	r2, r6
   1c33a:	003b      	movs	r3, r7
   1c33c:	f7fc faf8 	bl	18930 <__aeabi_dmul>
   1c340:	2200      	movs	r2, #0
   1c342:	4b43      	ldr	r3, [pc, #268]	; (1c450 <_dtoa_r+0x3d8>)
   1c344:	f7fb fbb0 	bl	17aa8 <__aeabi_dadd>
   1c348:	4a42      	ldr	r2, [pc, #264]	; (1c454 <_dtoa_r+0x3dc>)
   1c34a:	000b      	movs	r3, r1
   1c34c:	4694      	mov	ip, r2
   1c34e:	4463      	add	r3, ip
   1c350:	9008      	str	r0, [sp, #32]
   1c352:	9109      	str	r1, [sp, #36]	; 0x24
   1c354:	9309      	str	r3, [sp, #36]	; 0x24
   1c356:	9b07      	ldr	r3, [sp, #28]
   1c358:	2b00      	cmp	r3, #0
   1c35a:	d101      	bne.n	1c360 <_dtoa_r+0x2e8>
   1c35c:	f000 fc50 	bl	1cc00 <_dtoa_r+0xb88>
   1c360:	9b03      	ldr	r3, [sp, #12]
   1c362:	9313      	str	r3, [sp, #76]	; 0x4c
   1c364:	9b07      	ldr	r3, [sp, #28]
   1c366:	9312      	str	r3, [sp, #72]	; 0x48
   1c368:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1c36a:	2b00      	cmp	r3, #0
   1c36c:	d101      	bne.n	1c372 <_dtoa_r+0x2fa>
   1c36e:	f000 fd1d 	bl	1cdac <_dtoa_r+0xd34>
   1c372:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1c374:	2000      	movs	r0, #0
   1c376:	1e5a      	subs	r2, r3, #1
   1c378:	4b33      	ldr	r3, [pc, #204]	; (1c448 <_dtoa_r+0x3d0>)
   1c37a:	00d2      	lsls	r2, r2, #3
   1c37c:	189b      	adds	r3, r3, r2
   1c37e:	681a      	ldr	r2, [r3, #0]
   1c380:	685b      	ldr	r3, [r3, #4]
   1c382:	4935      	ldr	r1, [pc, #212]	; (1c458 <_dtoa_r+0x3e0>)
   1c384:	f7fb fea0 	bl	180c8 <__aeabi_ddiv>
   1c388:	9a08      	ldr	r2, [sp, #32]
   1c38a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1c38c:	f7fc fd50 	bl	18e30 <__aeabi_dsub>
   1c390:	9008      	str	r0, [sp, #32]
   1c392:	9109      	str	r1, [sp, #36]	; 0x24
   1c394:	0039      	movs	r1, r7
   1c396:	0030      	movs	r0, r6
   1c398:	f7fd f860 	bl	1945c <__aeabi_d2iz>
   1c39c:	0004      	movs	r4, r0
   1c39e:	f7fd f891 	bl	194c4 <__aeabi_i2d>
   1c3a2:	0002      	movs	r2, r0
   1c3a4:	000b      	movs	r3, r1
   1c3a6:	0030      	movs	r0, r6
   1c3a8:	0039      	movs	r1, r7
   1c3aa:	f7fc fd41 	bl	18e30 <__aeabi_dsub>
   1c3ae:	0005      	movs	r5, r0
   1c3b0:	000e      	movs	r6, r1
   1c3b2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1c3b4:	3430      	adds	r4, #48	; 0x30
   1c3b6:	1c51      	adds	r1, r2, #1
   1c3b8:	b2e7      	uxtb	r7, r4
   1c3ba:	9114      	str	r1, [sp, #80]	; 0x50
   1c3bc:	7017      	strb	r7, [r2, #0]
   1c3be:	0033      	movs	r3, r6
   1c3c0:	9808      	ldr	r0, [sp, #32]
   1c3c2:	9909      	ldr	r1, [sp, #36]	; 0x24
   1c3c4:	002a      	movs	r2, r5
   1c3c6:	f7fa facd 	bl	16964 <__aeabi_dcmpgt>
   1c3ca:	2800      	cmp	r0, #0
   1c3cc:	d001      	beq.n	1c3d2 <_dtoa_r+0x35a>
   1c3ce:	f000 fdfe 	bl	1cfce <_dtoa_r+0xf56>
   1c3d2:	002a      	movs	r2, r5
   1c3d4:	0033      	movs	r3, r6
   1c3d6:	2000      	movs	r0, #0
   1c3d8:	4912      	ldr	r1, [pc, #72]	; (1c424 <_dtoa_r+0x3ac>)
   1c3da:	f7fc fd29 	bl	18e30 <__aeabi_dsub>
   1c3de:	0002      	movs	r2, r0
   1c3e0:	000b      	movs	r3, r1
   1c3e2:	9808      	ldr	r0, [sp, #32]
   1c3e4:	9909      	ldr	r1, [sp, #36]	; 0x24
   1c3e6:	f7fa fabd 	bl	16964 <__aeabi_dcmpgt>
   1c3ea:	2800      	cmp	r0, #0
   1c3ec:	d001      	beq.n	1c3f2 <_dtoa_r+0x37a>
   1c3ee:	f000 fde7 	bl	1cfc0 <_dtoa_r+0xf48>
   1c3f2:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1c3f4:	2b01      	cmp	r3, #1
   1c3f6:	d101      	bne.n	1c3fc <_dtoa_r+0x384>
   1c3f8:	f000 fc78 	bl	1ccec <_dtoa_r+0xc74>
   1c3fc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1c3fe:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1c400:	4694      	mov	ip, r2
   1c402:	4463      	add	r3, ip
   1c404:	4698      	mov	r8, r3
   1c406:	464b      	mov	r3, r9
   1c408:	9312      	str	r3, [sp, #72]	; 0x48
   1c40a:	9b14      	ldr	r3, [sp, #80]	; 0x50
   1c40c:	4699      	mov	r9, r3
   1c40e:	e038      	b.n	1c482 <_dtoa_r+0x40a>
   1c410:	7ff00000 	.word	0x7ff00000
   1c414:	0001f9ad 	.word	0x0001f9ad
   1c418:	0000270f 	.word	0x0000270f
   1c41c:	00020864 	.word	0x00020864
   1c420:	00020870 	.word	0x00020870
   1c424:	3ff00000 	.word	0x3ff00000
   1c428:	fffffc01 	.word	0xfffffc01
   1c42c:	3ff80000 	.word	0x3ff80000
   1c430:	636f4361 	.word	0x636f4361
   1c434:	3fd287a7 	.word	0x3fd287a7
   1c438:	8b60c8b3 	.word	0x8b60c8b3
   1c43c:	3fc68a28 	.word	0x3fc68a28
   1c440:	509f79fb 	.word	0x509f79fb
   1c444:	3fd34413 	.word	0x3fd34413
   1c448:	000208a0 	.word	0x000208a0
   1c44c:	00020878 	.word	0x00020878
   1c450:	401c0000 	.word	0x401c0000
   1c454:	fcc00000 	.word	0xfcc00000
   1c458:	3fe00000 	.word	0x3fe00000
   1c45c:	002a      	movs	r2, r5
   1c45e:	0033      	movs	r3, r6
   1c460:	2000      	movs	r0, #0
   1c462:	49b9      	ldr	r1, [pc, #740]	; (1c748 <_dtoa_r+0x6d0>)
   1c464:	f7fc fce4 	bl	18e30 <__aeabi_dsub>
   1c468:	9a08      	ldr	r2, [sp, #32]
   1c46a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1c46c:	f7fa fa66 	bl	1693c <__aeabi_dcmplt>
   1c470:	2800      	cmp	r0, #0
   1c472:	d001      	beq.n	1c478 <_dtoa_r+0x400>
   1c474:	f000 fd74 	bl	1cf60 <_dtoa_r+0xee8>
   1c478:	46a1      	mov	r9, r4
   1c47a:	4544      	cmp	r4, r8
   1c47c:	d101      	bne.n	1c482 <_dtoa_r+0x40a>
   1c47e:	f000 fc33 	bl	1cce8 <_dtoa_r+0xc70>
   1c482:	9808      	ldr	r0, [sp, #32]
   1c484:	9909      	ldr	r1, [sp, #36]	; 0x24
   1c486:	2200      	movs	r2, #0
   1c488:	4bb0      	ldr	r3, [pc, #704]	; (1c74c <_dtoa_r+0x6d4>)
   1c48a:	f7fc fa51 	bl	18930 <__aeabi_dmul>
   1c48e:	2200      	movs	r2, #0
   1c490:	4bae      	ldr	r3, [pc, #696]	; (1c74c <_dtoa_r+0x6d4>)
   1c492:	9008      	str	r0, [sp, #32]
   1c494:	9109      	str	r1, [sp, #36]	; 0x24
   1c496:	0028      	movs	r0, r5
   1c498:	0031      	movs	r1, r6
   1c49a:	f7fc fa49 	bl	18930 <__aeabi_dmul>
   1c49e:	000d      	movs	r5, r1
   1c4a0:	0004      	movs	r4, r0
   1c4a2:	f7fc ffdb 	bl	1945c <__aeabi_d2iz>
   1c4a6:	0007      	movs	r7, r0
   1c4a8:	f7fd f80c 	bl	194c4 <__aeabi_i2d>
   1c4ac:	0002      	movs	r2, r0
   1c4ae:	000b      	movs	r3, r1
   1c4b0:	0020      	movs	r0, r4
   1c4b2:	0029      	movs	r1, r5
   1c4b4:	f7fc fcbc 	bl	18e30 <__aeabi_dsub>
   1c4b8:	464b      	mov	r3, r9
   1c4ba:	3730      	adds	r7, #48	; 0x30
   1c4bc:	b2ff      	uxtb	r7, r7
   1c4be:	1c5c      	adds	r4, r3, #1
   1c4c0:	701f      	strb	r7, [r3, #0]
   1c4c2:	9a08      	ldr	r2, [sp, #32]
   1c4c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1c4c6:	0005      	movs	r5, r0
   1c4c8:	000e      	movs	r6, r1
   1c4ca:	f7fa fa37 	bl	1693c <__aeabi_dcmplt>
   1c4ce:	2800      	cmp	r0, #0
   1c4d0:	d0c4      	beq.n	1c45c <_dtoa_r+0x3e4>
   1c4d2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   1c4d4:	9303      	str	r3, [sp, #12]
   1c4d6:	4659      	mov	r1, fp
   1c4d8:	4650      	mov	r0, sl
   1c4da:	f001 fab9 	bl	1da50 <_Bfree>
   1c4de:	2300      	movs	r3, #0
   1c4e0:	7023      	strb	r3, [r4, #0]
   1c4e2:	9b03      	ldr	r3, [sp, #12]
   1c4e4:	9a24      	ldr	r2, [sp, #144]	; 0x90
   1c4e6:	3301      	adds	r3, #1
   1c4e8:	6013      	str	r3, [r2, #0]
   1c4ea:	9b26      	ldr	r3, [sp, #152]	; 0x98
   1c4ec:	2b00      	cmp	r3, #0
   1c4ee:	d100      	bne.n	1c4f2 <_dtoa_r+0x47a>
   1c4f0:	e3a8      	b.n	1cc44 <_dtoa_r+0xbcc>
   1c4f2:	601c      	str	r4, [r3, #0]
   1c4f4:	980a      	ldr	r0, [sp, #40]	; 0x28
   1c4f6:	e5f4      	b.n	1c0e2 <_dtoa_r+0x6a>
   1c4f8:	9b16      	ldr	r3, [sp, #88]	; 0x58
   1c4fa:	4699      	mov	r9, r3
   1c4fc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   1c4fe:	444b      	add	r3, r9
   1c500:	001c      	movs	r4, r3
   1c502:	4b93      	ldr	r3, [pc, #588]	; (1c750 <_dtoa_r+0x6d8>)
   1c504:	18e3      	adds	r3, r4, r3
   1c506:	2b20      	cmp	r3, #32
   1c508:	dc00      	bgt.n	1c50c <_dtoa_r+0x494>
   1c50a:	e17e      	b.n	1c80a <_dtoa_r+0x792>
   1c50c:	0031      	movs	r1, r6
   1c50e:	4a91      	ldr	r2, [pc, #580]	; (1c754 <_dtoa_r+0x6dc>)
   1c510:	4640      	mov	r0, r8
   1c512:	18a2      	adds	r2, r4, r2
   1c514:	40d1      	lsrs	r1, r2
   1c516:	000a      	movs	r2, r1
   1c518:	2140      	movs	r1, #64	; 0x40
   1c51a:	1acb      	subs	r3, r1, r3
   1c51c:	4098      	lsls	r0, r3
   1c51e:	4310      	orrs	r0, r2
   1c520:	f7fd f812 	bl	19548 <__aeabi_ui2d>
   1c524:	1e63      	subs	r3, r4, #1
   1c526:	4698      	mov	r8, r3
   1c528:	2301      	movs	r3, #1
   1c52a:	4d8b      	ldr	r5, [pc, #556]	; (1c758 <_dtoa_r+0x6e0>)
   1c52c:	930f      	str	r3, [sp, #60]	; 0x3c
   1c52e:	1949      	adds	r1, r1, r5
   1c530:	e618      	b.n	1c164 <_dtoa_r+0xec>
   1c532:	488a      	ldr	r0, [pc, #552]	; (1c75c <_dtoa_r+0x6e4>)
   1c534:	e5d5      	b.n	1c0e2 <_dtoa_r+0x6a>
   1c536:	2300      	movs	r3, #0
   1c538:	4652      	mov	r2, sl
   1c53a:	2100      	movs	r1, #0
   1c53c:	6453      	str	r3, [r2, #68]	; 0x44
   1c53e:	4650      	mov	r0, sl
   1c540:	f001 fa5e 	bl	1da00 <_Balloc>
   1c544:	4653      	mov	r3, sl
   1c546:	6418      	str	r0, [r3, #64]	; 0x40
   1c548:	2301      	movs	r3, #1
   1c54a:	425b      	negs	r3, r3
   1c54c:	9307      	str	r3, [sp, #28]
   1c54e:	930e      	str	r3, [sp, #56]	; 0x38
   1c550:	3302      	adds	r3, #2
   1c552:	2200      	movs	r2, #0
   1c554:	930b      	str	r3, [sp, #44]	; 0x2c
   1c556:	2300      	movs	r3, #0
   1c558:	900a      	str	r0, [sp, #40]	; 0x28
   1c55a:	9223      	str	r2, [sp, #140]	; 0x8c
   1c55c:	9322      	str	r3, [sp, #136]	; 0x88
   1c55e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   1c560:	2b00      	cmp	r3, #0
   1c562:	da00      	bge.n	1c566 <_dtoa_r+0x4ee>
   1c564:	e0ab      	b.n	1c6be <_dtoa_r+0x646>
   1c566:	9a03      	ldr	r2, [sp, #12]
   1c568:	2a0e      	cmp	r2, #14
   1c56a:	dd00      	ble.n	1c56e <_dtoa_r+0x4f6>
   1c56c:	e0a7      	b.n	1c6be <_dtoa_r+0x646>
   1c56e:	4b7c      	ldr	r3, [pc, #496]	; (1c760 <_dtoa_r+0x6e8>)
   1c570:	00d2      	lsls	r2, r2, #3
   1c572:	189b      	adds	r3, r3, r2
   1c574:	685c      	ldr	r4, [r3, #4]
   1c576:	681b      	ldr	r3, [r3, #0]
   1c578:	9304      	str	r3, [sp, #16]
   1c57a:	9405      	str	r4, [sp, #20]
   1c57c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   1c57e:	2b00      	cmp	r3, #0
   1c580:	da00      	bge.n	1c584 <_dtoa_r+0x50c>
   1c582:	e2a7      	b.n	1cad4 <_dtoa_r+0xa5c>
   1c584:	9c04      	ldr	r4, [sp, #16]
   1c586:	9d05      	ldr	r5, [sp, #20]
   1c588:	0030      	movs	r0, r6
   1c58a:	0022      	movs	r2, r4
   1c58c:	002b      	movs	r3, r5
   1c58e:	0039      	movs	r1, r7
   1c590:	f7fb fd9a 	bl	180c8 <__aeabi_ddiv>
   1c594:	f7fc ff62 	bl	1945c <__aeabi_d2iz>
   1c598:	4680      	mov	r8, r0
   1c59a:	f7fc ff93 	bl	194c4 <__aeabi_i2d>
   1c59e:	0022      	movs	r2, r4
   1c5a0:	002b      	movs	r3, r5
   1c5a2:	f7fc f9c5 	bl	18930 <__aeabi_dmul>
   1c5a6:	0002      	movs	r2, r0
   1c5a8:	000b      	movs	r3, r1
   1c5aa:	0030      	movs	r0, r6
   1c5ac:	0039      	movs	r1, r7
   1c5ae:	f7fc fc3f 	bl	18e30 <__aeabi_dsub>
   1c5b2:	4643      	mov	r3, r8
   1c5b4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1c5b6:	3330      	adds	r3, #48	; 0x30
   1c5b8:	7013      	strb	r3, [r2, #0]
   1c5ba:	9b07      	ldr	r3, [sp, #28]
   1c5bc:	0006      	movs	r6, r0
   1c5be:	000f      	movs	r7, r1
   1c5c0:	1c54      	adds	r4, r2, #1
   1c5c2:	2b01      	cmp	r3, #1
   1c5c4:	d04e      	beq.n	1c664 <_dtoa_r+0x5ec>
   1c5c6:	2200      	movs	r2, #0
   1c5c8:	4b60      	ldr	r3, [pc, #384]	; (1c74c <_dtoa_r+0x6d4>)
   1c5ca:	f7fc f9b1 	bl	18930 <__aeabi_dmul>
   1c5ce:	2200      	movs	r2, #0
   1c5d0:	2300      	movs	r3, #0
   1c5d2:	0006      	movs	r6, r0
   1c5d4:	000f      	movs	r7, r1
   1c5d6:	f7fa f9ab 	bl	16930 <__aeabi_dcmpeq>
   1c5da:	2800      	cmp	r0, #0
   1c5dc:	d000      	beq.n	1c5e0 <_dtoa_r+0x568>
   1c5de:	e77a      	b.n	1c4d6 <_dtoa_r+0x45e>
   1c5e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1c5e2:	9a07      	ldr	r2, [sp, #28]
   1c5e4:	1c9d      	adds	r5, r3, #2
   1c5e6:	469c      	mov	ip, r3
   1c5e8:	465b      	mov	r3, fp
   1c5ea:	9306      	str	r3, [sp, #24]
   1c5ec:	4653      	mov	r3, sl
   1c5ee:	4462      	add	r2, ip
   1c5f0:	46aa      	mov	sl, r5
   1c5f2:	9c04      	ldr	r4, [sp, #16]
   1c5f4:	9d05      	ldr	r5, [sp, #20]
   1c5f6:	4691      	mov	r9, r2
   1c5f8:	9307      	str	r3, [sp, #28]
   1c5fa:	e00f      	b.n	1c61c <_dtoa_r+0x5a4>
   1c5fc:	2200      	movs	r2, #0
   1c5fe:	4b53      	ldr	r3, [pc, #332]	; (1c74c <_dtoa_r+0x6d4>)
   1c600:	f7fc f996 	bl	18930 <__aeabi_dmul>
   1c604:	2301      	movs	r3, #1
   1c606:	469c      	mov	ip, r3
   1c608:	2200      	movs	r2, #0
   1c60a:	2300      	movs	r3, #0
   1c60c:	0006      	movs	r6, r0
   1c60e:	000f      	movs	r7, r1
   1c610:	44e2      	add	sl, ip
   1c612:	f7fa f98d 	bl	16930 <__aeabi_dcmpeq>
   1c616:	2800      	cmp	r0, #0
   1c618:	d000      	beq.n	1c61c <_dtoa_r+0x5a4>
   1c61a:	e2d9      	b.n	1cbd0 <_dtoa_r+0xb58>
   1c61c:	0022      	movs	r2, r4
   1c61e:	002b      	movs	r3, r5
   1c620:	0030      	movs	r0, r6
   1c622:	0039      	movs	r1, r7
   1c624:	f7fb fd50 	bl	180c8 <__aeabi_ddiv>
   1c628:	f7fc ff18 	bl	1945c <__aeabi_d2iz>
   1c62c:	4680      	mov	r8, r0
   1c62e:	f7fc ff49 	bl	194c4 <__aeabi_i2d>
   1c632:	0022      	movs	r2, r4
   1c634:	002b      	movs	r3, r5
   1c636:	f7fc f97b 	bl	18930 <__aeabi_dmul>
   1c63a:	0002      	movs	r2, r0
   1c63c:	000b      	movs	r3, r1
   1c63e:	0030      	movs	r0, r6
   1c640:	0039      	movs	r1, r7
   1c642:	f7fc fbf5 	bl	18e30 <__aeabi_dsub>
   1c646:	4653      	mov	r3, sl
   1c648:	4642      	mov	r2, r8
   1c64a:	3b01      	subs	r3, #1
   1c64c:	3230      	adds	r2, #48	; 0x30
   1c64e:	0006      	movs	r6, r0
   1c650:	000f      	movs	r7, r1
   1c652:	46d3      	mov	fp, sl
   1c654:	701a      	strb	r2, [r3, #0]
   1c656:	45d1      	cmp	r9, sl
   1c658:	d1d0      	bne.n	1c5fc <_dtoa_r+0x584>
   1c65a:	9b06      	ldr	r3, [sp, #24]
   1c65c:	4654      	mov	r4, sl
   1c65e:	469b      	mov	fp, r3
   1c660:	9b07      	ldr	r3, [sp, #28]
   1c662:	469a      	mov	sl, r3
   1c664:	0032      	movs	r2, r6
   1c666:	003b      	movs	r3, r7
   1c668:	0030      	movs	r0, r6
   1c66a:	0039      	movs	r1, r7
   1c66c:	f7fb fa1c 	bl	17aa8 <__aeabi_dadd>
   1c670:	0006      	movs	r6, r0
   1c672:	000f      	movs	r7, r1
   1c674:	0002      	movs	r2, r0
   1c676:	000b      	movs	r3, r1
   1c678:	9804      	ldr	r0, [sp, #16]
   1c67a:	9905      	ldr	r1, [sp, #20]
   1c67c:	f7fa f95e 	bl	1693c <__aeabi_dcmplt>
   1c680:	2800      	cmp	r0, #0
   1c682:	d10c      	bne.n	1c69e <_dtoa_r+0x626>
   1c684:	9804      	ldr	r0, [sp, #16]
   1c686:	9905      	ldr	r1, [sp, #20]
   1c688:	0032      	movs	r2, r6
   1c68a:	003b      	movs	r3, r7
   1c68c:	f7fa f950 	bl	16930 <__aeabi_dcmpeq>
   1c690:	2800      	cmp	r0, #0
   1c692:	d100      	bne.n	1c696 <_dtoa_r+0x61e>
   1c694:	e71f      	b.n	1c4d6 <_dtoa_r+0x45e>
   1c696:	4643      	mov	r3, r8
   1c698:	07db      	lsls	r3, r3, #31
   1c69a:	d400      	bmi.n	1c69e <_dtoa_r+0x626>
   1c69c:	e71b      	b.n	1c4d6 <_dtoa_r+0x45e>
   1c69e:	1e65      	subs	r5, r4, #1
   1c6a0:	782f      	ldrb	r7, [r5, #0]
   1c6a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1c6a4:	e006      	b.n	1c6b4 <_dtoa_r+0x63c>
   1c6a6:	429d      	cmp	r5, r3
   1c6a8:	d100      	bne.n	1c6ac <_dtoa_r+0x634>
   1c6aa:	e351      	b.n	1cd50 <_dtoa_r+0xcd8>
   1c6ac:	3c02      	subs	r4, #2
   1c6ae:	7827      	ldrb	r7, [r4, #0]
   1c6b0:	002c      	movs	r4, r5
   1c6b2:	3d01      	subs	r5, #1
   1c6b4:	2f39      	cmp	r7, #57	; 0x39
   1c6b6:	d0f6      	beq.n	1c6a6 <_dtoa_r+0x62e>
   1c6b8:	3701      	adds	r7, #1
   1c6ba:	702f      	strb	r7, [r5, #0]
   1c6bc:	e70b      	b.n	1c4d6 <_dtoa_r+0x45e>
   1c6be:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   1c6c0:	2a00      	cmp	r2, #0
   1c6c2:	d04f      	beq.n	1c764 <_dtoa_r+0x6ec>
   1c6c4:	9a22      	ldr	r2, [sp, #136]	; 0x88
   1c6c6:	2a01      	cmp	r2, #1
   1c6c8:	dc00      	bgt.n	1c6cc <_dtoa_r+0x654>
   1c6ca:	e22c      	b.n	1cb26 <_dtoa_r+0xaae>
   1c6cc:	9b07      	ldr	r3, [sp, #28]
   1c6ce:	1e5c      	subs	r4, r3, #1
   1c6d0:	464b      	mov	r3, r9
   1c6d2:	45a1      	cmp	r9, r4
   1c6d4:	da00      	bge.n	1c6d8 <_dtoa_r+0x660>
   1c6d6:	e2b8      	b.n	1cc4a <_dtoa_r+0xbd2>
   1c6d8:	1b1c      	subs	r4, r3, r4
   1c6da:	9b07      	ldr	r3, [sp, #28]
   1c6dc:	2b00      	cmp	r3, #0
   1c6de:	da00      	bge.n	1c6e2 <_dtoa_r+0x66a>
   1c6e0:	e3d4      	b.n	1ce8c <_dtoa_r+0xe14>
   1c6e2:	9b06      	ldr	r3, [sp, #24]
   1c6e4:	9308      	str	r3, [sp, #32]
   1c6e6:	9b07      	ldr	r3, [sp, #28]
   1c6e8:	9a06      	ldr	r2, [sp, #24]
   1c6ea:	2101      	movs	r1, #1
   1c6ec:	4694      	mov	ip, r2
   1c6ee:	449c      	add	ip, r3
   1c6f0:	4662      	mov	r2, ip
   1c6f2:	9206      	str	r2, [sp, #24]
   1c6f4:	9a04      	ldr	r2, [sp, #16]
   1c6f6:	4650      	mov	r0, sl
   1c6f8:	4694      	mov	ip, r2
   1c6fa:	449c      	add	ip, r3
   1c6fc:	4663      	mov	r3, ip
   1c6fe:	9304      	str	r3, [sp, #16]
   1c700:	f001 fa3e 	bl	1db80 <__i2b>
   1c704:	4680      	mov	r8, r0
   1c706:	e032      	b.n	1c76e <_dtoa_r+0x6f6>
   1c708:	9a06      	ldr	r2, [sp, #24]
   1c70a:	9b03      	ldr	r3, [sp, #12]
   1c70c:	1ad2      	subs	r2, r2, r3
   1c70e:	425b      	negs	r3, r3
   1c710:	4699      	mov	r9, r3
   1c712:	2300      	movs	r3, #0
   1c714:	9206      	str	r2, [sp, #24]
   1c716:	930d      	str	r3, [sp, #52]	; 0x34
   1c718:	e579      	b.n	1c20e <_dtoa_r+0x196>
   1c71a:	9803      	ldr	r0, [sp, #12]
   1c71c:	f7fc fed2 	bl	194c4 <__aeabi_i2d>
   1c720:	000b      	movs	r3, r1
   1c722:	0002      	movs	r2, r0
   1c724:	0029      	movs	r1, r5
   1c726:	0020      	movs	r0, r4
   1c728:	f7fa f902 	bl	16930 <__aeabi_dcmpeq>
   1c72c:	0002      	movs	r2, r0
   1c72e:	4250      	negs	r0, r2
   1c730:	4150      	adcs	r0, r2
   1c732:	9b03      	ldr	r3, [sp, #12]
   1c734:	1a1b      	subs	r3, r3, r0
   1c736:	9303      	str	r3, [sp, #12]
   1c738:	e53d      	b.n	1c1b6 <_dtoa_r+0x13e>
   1c73a:	2301      	movs	r3, #1
   1c73c:	1a9b      	subs	r3, r3, r2
   1c73e:	9306      	str	r3, [sp, #24]
   1c740:	2300      	movs	r3, #0
   1c742:	9304      	str	r3, [sp, #16]
   1c744:	e557      	b.n	1c1f6 <_dtoa_r+0x17e>
   1c746:	46c0      	nop			; (mov r8, r8)
   1c748:	3ff00000 	.word	0x3ff00000
   1c74c:	40240000 	.word	0x40240000
   1c750:	00000432 	.word	0x00000432
   1c754:	00000412 	.word	0x00000412
   1c758:	fe100000 	.word	0xfe100000
   1c75c:	0001f9ac 	.word	0x0001f9ac
   1c760:	000208a0 	.word	0x000208a0
   1c764:	9b06      	ldr	r3, [sp, #24]
   1c766:	464c      	mov	r4, r9
   1c768:	9308      	str	r3, [sp, #32]
   1c76a:	2300      	movs	r3, #0
   1c76c:	4698      	mov	r8, r3
   1c76e:	9908      	ldr	r1, [sp, #32]
   1c770:	1e0b      	subs	r3, r1, #0
   1c772:	dd0e      	ble.n	1c792 <_dtoa_r+0x71a>
   1c774:	9a04      	ldr	r2, [sp, #16]
   1c776:	2a00      	cmp	r2, #0
   1c778:	dd0b      	ble.n	1c792 <_dtoa_r+0x71a>
   1c77a:	4293      	cmp	r3, r2
   1c77c:	dd00      	ble.n	1c780 <_dtoa_r+0x708>
   1c77e:	e187      	b.n	1ca90 <_dtoa_r+0xa18>
   1c780:	9a06      	ldr	r2, [sp, #24]
   1c782:	1ad2      	subs	r2, r2, r3
   1c784:	9206      	str	r2, [sp, #24]
   1c786:	9a08      	ldr	r2, [sp, #32]
   1c788:	1ad2      	subs	r2, r2, r3
   1c78a:	9208      	str	r2, [sp, #32]
   1c78c:	9a04      	ldr	r2, [sp, #16]
   1c78e:	1ad3      	subs	r3, r2, r3
   1c790:	9304      	str	r3, [sp, #16]
   1c792:	464b      	mov	r3, r9
   1c794:	2b00      	cmp	r3, #0
   1c796:	d01a      	beq.n	1c7ce <_dtoa_r+0x756>
   1c798:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1c79a:	2b00      	cmp	r3, #0
   1c79c:	d100      	bne.n	1c7a0 <_dtoa_r+0x728>
   1c79e:	e1bb      	b.n	1cb18 <_dtoa_r+0xaa0>
   1c7a0:	2c00      	cmp	r4, #0
   1c7a2:	dd10      	ble.n	1c7c6 <_dtoa_r+0x74e>
   1c7a4:	4641      	mov	r1, r8
   1c7a6:	0022      	movs	r2, r4
   1c7a8:	4650      	mov	r0, sl
   1c7aa:	f001 fa9d 	bl	1dce8 <__pow5mult>
   1c7ae:	465a      	mov	r2, fp
   1c7b0:	0001      	movs	r1, r0
   1c7b2:	4680      	mov	r8, r0
   1c7b4:	4650      	mov	r0, sl
   1c7b6:	f001 f9ed 	bl	1db94 <__multiply>
   1c7ba:	0005      	movs	r5, r0
   1c7bc:	4659      	mov	r1, fp
   1c7be:	4650      	mov	r0, sl
   1c7c0:	f001 f946 	bl	1da50 <_Bfree>
   1c7c4:	46ab      	mov	fp, r5
   1c7c6:	464b      	mov	r3, r9
   1c7c8:	1b1a      	subs	r2, r3, r4
   1c7ca:	d000      	beq.n	1c7ce <_dtoa_r+0x756>
   1c7cc:	e1a5      	b.n	1cb1a <_dtoa_r+0xaa2>
   1c7ce:	2101      	movs	r1, #1
   1c7d0:	4650      	mov	r0, sl
   1c7d2:	f001 f9d5 	bl	1db80 <__i2b>
   1c7d6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1c7d8:	4681      	mov	r9, r0
   1c7da:	2b00      	cmp	r3, #0
   1c7dc:	dd1d      	ble.n	1c81a <_dtoa_r+0x7a2>
   1c7de:	001a      	movs	r2, r3
   1c7e0:	0001      	movs	r1, r0
   1c7e2:	4650      	mov	r0, sl
   1c7e4:	f001 fa80 	bl	1dce8 <__pow5mult>
   1c7e8:	9b22      	ldr	r3, [sp, #136]	; 0x88
   1c7ea:	4681      	mov	r9, r0
   1c7ec:	2b01      	cmp	r3, #1
   1c7ee:	dc00      	bgt.n	1c7f2 <_dtoa_r+0x77a>
   1c7f0:	e150      	b.n	1ca94 <_dtoa_r+0xa1c>
   1c7f2:	2400      	movs	r4, #0
   1c7f4:	464b      	mov	r3, r9
   1c7f6:	691b      	ldr	r3, [r3, #16]
   1c7f8:	3303      	adds	r3, #3
   1c7fa:	009b      	lsls	r3, r3, #2
   1c7fc:	444b      	add	r3, r9
   1c7fe:	6858      	ldr	r0, [r3, #4]
   1c800:	f001 f976 	bl	1daf0 <__hi0bits>
   1c804:	2320      	movs	r3, #32
   1c806:	1a1b      	subs	r3, r3, r0
   1c808:	e010      	b.n	1c82c <_dtoa_r+0x7b4>
   1c80a:	2220      	movs	r2, #32
   1c80c:	0030      	movs	r0, r6
   1c80e:	1ad3      	subs	r3, r2, r3
   1c810:	4098      	lsls	r0, r3
   1c812:	e685      	b.n	1c520 <_dtoa_r+0x4a8>
   1c814:	2300      	movs	r3, #0
   1c816:	930c      	str	r3, [sp, #48]	; 0x30
   1c818:	e4e3      	b.n	1c1e2 <_dtoa_r+0x16a>
   1c81a:	9b22      	ldr	r3, [sp, #136]	; 0x88
   1c81c:	2400      	movs	r4, #0
   1c81e:	2b01      	cmp	r3, #1
   1c820:	dc00      	bgt.n	1c824 <_dtoa_r+0x7ac>
   1c822:	e18b      	b.n	1cb3c <_dtoa_r+0xac4>
   1c824:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   1c826:	2301      	movs	r3, #1
   1c828:	2a00      	cmp	r2, #0
   1c82a:	d1e3      	bne.n	1c7f4 <_dtoa_r+0x77c>
   1c82c:	9904      	ldr	r1, [sp, #16]
   1c82e:	201f      	movs	r0, #31
   1c830:	468c      	mov	ip, r1
   1c832:	4463      	add	r3, ip
   1c834:	4018      	ands	r0, r3
   1c836:	d100      	bne.n	1c83a <_dtoa_r+0x7c2>
   1c838:	e0ae      	b.n	1c998 <_dtoa_r+0x920>
   1c83a:	2320      	movs	r3, #32
   1c83c:	1a1b      	subs	r3, r3, r0
   1c83e:	2b04      	cmp	r3, #4
   1c840:	dc00      	bgt.n	1c844 <_dtoa_r+0x7cc>
   1c842:	e3cc      	b.n	1cfde <_dtoa_r+0xf66>
   1c844:	231c      	movs	r3, #28
   1c846:	1a18      	subs	r0, r3, r0
   1c848:	9b06      	ldr	r3, [sp, #24]
   1c84a:	469c      	mov	ip, r3
   1c84c:	4484      	add	ip, r0
   1c84e:	4663      	mov	r3, ip
   1c850:	9306      	str	r3, [sp, #24]
   1c852:	9b08      	ldr	r3, [sp, #32]
   1c854:	469c      	mov	ip, r3
   1c856:	4484      	add	ip, r0
   1c858:	4663      	mov	r3, ip
   1c85a:	468c      	mov	ip, r1
   1c85c:	4484      	add	ip, r0
   1c85e:	9308      	str	r3, [sp, #32]
   1c860:	4663      	mov	r3, ip
   1c862:	9304      	str	r3, [sp, #16]
   1c864:	9b06      	ldr	r3, [sp, #24]
   1c866:	2b00      	cmp	r3, #0
   1c868:	dd05      	ble.n	1c876 <_dtoa_r+0x7fe>
   1c86a:	4659      	mov	r1, fp
   1c86c:	001a      	movs	r2, r3
   1c86e:	4650      	mov	r0, sl
   1c870:	f001 fa9a 	bl	1dda8 <__lshift>
   1c874:	4683      	mov	fp, r0
   1c876:	9b04      	ldr	r3, [sp, #16]
   1c878:	2b00      	cmp	r3, #0
   1c87a:	dd05      	ble.n	1c888 <_dtoa_r+0x810>
   1c87c:	4649      	mov	r1, r9
   1c87e:	001a      	movs	r2, r3
   1c880:	4650      	mov	r0, sl
   1c882:	f001 fa91 	bl	1dda8 <__lshift>
   1c886:	4681      	mov	r9, r0
   1c888:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1c88a:	2b00      	cmp	r3, #0
   1c88c:	d000      	beq.n	1c890 <_dtoa_r+0x818>
   1c88e:	e094      	b.n	1c9ba <_dtoa_r+0x942>
   1c890:	9b07      	ldr	r3, [sp, #28]
   1c892:	2b00      	cmp	r3, #0
   1c894:	dc00      	bgt.n	1c898 <_dtoa_r+0x820>
   1c896:	e175      	b.n	1cb84 <_dtoa_r+0xb0c>
   1c898:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1c89a:	2b00      	cmp	r3, #0
   1c89c:	d100      	bne.n	1c8a0 <_dtoa_r+0x828>
   1c89e:	e0a6      	b.n	1c9ee <_dtoa_r+0x976>
   1c8a0:	9b08      	ldr	r3, [sp, #32]
   1c8a2:	2b00      	cmp	r3, #0
   1c8a4:	dd05      	ble.n	1c8b2 <_dtoa_r+0x83a>
   1c8a6:	4641      	mov	r1, r8
   1c8a8:	001a      	movs	r2, r3
   1c8aa:	4650      	mov	r0, sl
   1c8ac:	f001 fa7c 	bl	1dda8 <__lshift>
   1c8b0:	4680      	mov	r8, r0
   1c8b2:	4643      	mov	r3, r8
   1c8b4:	930c      	str	r3, [sp, #48]	; 0x30
   1c8b6:	2c00      	cmp	r4, #0
   1c8b8:	d000      	beq.n	1c8bc <_dtoa_r+0x844>
   1c8ba:	e250      	b.n	1cd5e <_dtoa_r+0xce6>
   1c8bc:	9c07      	ldr	r4, [sp, #28]
   1c8be:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1c8c0:	3c01      	subs	r4, #1
   1c8c2:	0023      	movs	r3, r4
   1c8c4:	4694      	mov	ip, r2
   1c8c6:	4463      	add	r3, ip
   1c8c8:	9308      	str	r3, [sp, #32]
   1c8ca:	2301      	movs	r3, #1
   1c8cc:	4033      	ands	r3, r6
   1c8ce:	9307      	str	r3, [sp, #28]
   1c8d0:	464b      	mov	r3, r9
   1c8d2:	9306      	str	r3, [sp, #24]
   1c8d4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1c8d6:	4657      	mov	r7, sl
   1c8d8:	4645      	mov	r5, r8
   1c8da:	465e      	mov	r6, fp
   1c8dc:	4692      	mov	sl, r2
   1c8de:	4698      	mov	r8, r3
   1c8e0:	9b06      	ldr	r3, [sp, #24]
   1c8e2:	0030      	movs	r0, r6
   1c8e4:	0019      	movs	r1, r3
   1c8e6:	4699      	mov	r9, r3
   1c8e8:	f7ff fb1c 	bl	1bf24 <quorem>
   1c8ec:	0003      	movs	r3, r0
   1c8ee:	900b      	str	r0, [sp, #44]	; 0x2c
   1c8f0:	3330      	adds	r3, #48	; 0x30
   1c8f2:	0029      	movs	r1, r5
   1c8f4:	0030      	movs	r0, r6
   1c8f6:	9304      	str	r3, [sp, #16]
   1c8f8:	f001 fab6 	bl	1de68 <__mcmp>
   1c8fc:	4649      	mov	r1, r9
   1c8fe:	0004      	movs	r4, r0
   1c900:	4642      	mov	r2, r8
   1c902:	0038      	movs	r0, r7
   1c904:	f001 faca 	bl	1de9c <__mdiff>
   1c908:	68c3      	ldr	r3, [r0, #12]
   1c90a:	4681      	mov	r9, r0
   1c90c:	2b00      	cmp	r3, #0
   1c90e:	d000      	beq.n	1c912 <_dtoa_r+0x89a>
   1c910:	e11e      	b.n	1cb50 <_dtoa_r+0xad8>
   1c912:	0001      	movs	r1, r0
   1c914:	0030      	movs	r0, r6
   1c916:	f001 faa7 	bl	1de68 <__mcmp>
   1c91a:	4683      	mov	fp, r0
   1c91c:	4649      	mov	r1, r9
   1c91e:	0038      	movs	r0, r7
   1c920:	f001 f896 	bl	1da50 <_Bfree>
   1c924:	465b      	mov	r3, fp
   1c926:	9a22      	ldr	r2, [sp, #136]	; 0x88
   1c928:	4313      	orrs	r3, r2
   1c92a:	d103      	bne.n	1c934 <_dtoa_r+0x8bc>
   1c92c:	9b07      	ldr	r3, [sp, #28]
   1c92e:	2b00      	cmp	r3, #0
   1c930:	d100      	bne.n	1c934 <_dtoa_r+0x8bc>
   1c932:	e306      	b.n	1cf42 <_dtoa_r+0xeca>
   1c934:	2c00      	cmp	r4, #0
   1c936:	da00      	bge.n	1c93a <_dtoa_r+0x8c2>
   1c938:	e1a8      	b.n	1cc8c <_dtoa_r+0xc14>
   1c93a:	9b22      	ldr	r3, [sp, #136]	; 0x88
   1c93c:	431c      	orrs	r4, r3
   1c93e:	d103      	bne.n	1c948 <_dtoa_r+0x8d0>
   1c940:	9b07      	ldr	r3, [sp, #28]
   1c942:	2b00      	cmp	r3, #0
   1c944:	d100      	bne.n	1c948 <_dtoa_r+0x8d0>
   1c946:	e1a1      	b.n	1cc8c <_dtoa_r+0xc14>
   1c948:	465b      	mov	r3, fp
   1c94a:	2b00      	cmp	r3, #0
   1c94c:	dd00      	ble.n	1c950 <_dtoa_r+0x8d8>
   1c94e:	e282      	b.n	1ce56 <_dtoa_r+0xdde>
   1c950:	4669      	mov	r1, sp
   1c952:	4652      	mov	r2, sl
   1c954:	4653      	mov	r3, sl
   1c956:	7c09      	ldrb	r1, [r1, #16]
   1c958:	1c5c      	adds	r4, r3, #1
   1c95a:	7011      	strb	r1, [r2, #0]
   1c95c:	9a08      	ldr	r2, [sp, #32]
   1c95e:	4552      	cmp	r2, sl
   1c960:	d100      	bne.n	1c964 <_dtoa_r+0x8ec>
   1c962:	e28a      	b.n	1ce7a <_dtoa_r+0xe02>
   1c964:	0031      	movs	r1, r6
   1c966:	2300      	movs	r3, #0
   1c968:	220a      	movs	r2, #10
   1c96a:	0038      	movs	r0, r7
   1c96c:	f001 f87a 	bl	1da64 <__multadd>
   1c970:	2300      	movs	r3, #0
   1c972:	0006      	movs	r6, r0
   1c974:	220a      	movs	r2, #10
   1c976:	0029      	movs	r1, r5
   1c978:	0038      	movs	r0, r7
   1c97a:	4545      	cmp	r5, r8
   1c97c:	d100      	bne.n	1c980 <_dtoa_r+0x908>
   1c97e:	e0e1      	b.n	1cb44 <_dtoa_r+0xacc>
   1c980:	f001 f870 	bl	1da64 <__multadd>
   1c984:	4641      	mov	r1, r8
   1c986:	0005      	movs	r5, r0
   1c988:	2300      	movs	r3, #0
   1c98a:	220a      	movs	r2, #10
   1c98c:	0038      	movs	r0, r7
   1c98e:	f001 f869 	bl	1da64 <__multadd>
   1c992:	46a2      	mov	sl, r4
   1c994:	4680      	mov	r8, r0
   1c996:	e7a3      	b.n	1c8e0 <_dtoa_r+0x868>
   1c998:	201c      	movs	r0, #28
   1c99a:	9b06      	ldr	r3, [sp, #24]
   1c99c:	469c      	mov	ip, r3
   1c99e:	4484      	add	ip, r0
   1c9a0:	4663      	mov	r3, ip
   1c9a2:	9306      	str	r3, [sp, #24]
   1c9a4:	9b08      	ldr	r3, [sp, #32]
   1c9a6:	469c      	mov	ip, r3
   1c9a8:	4484      	add	ip, r0
   1c9aa:	4663      	mov	r3, ip
   1c9ac:	9308      	str	r3, [sp, #32]
   1c9ae:	9b04      	ldr	r3, [sp, #16]
   1c9b0:	469c      	mov	ip, r3
   1c9b2:	4484      	add	ip, r0
   1c9b4:	4663      	mov	r3, ip
   1c9b6:	9304      	str	r3, [sp, #16]
   1c9b8:	e754      	b.n	1c864 <_dtoa_r+0x7ec>
   1c9ba:	4649      	mov	r1, r9
   1c9bc:	4658      	mov	r0, fp
   1c9be:	f001 fa53 	bl	1de68 <__mcmp>
   1c9c2:	2800      	cmp	r0, #0
   1c9c4:	db00      	blt.n	1c9c8 <_dtoa_r+0x950>
   1c9c6:	e763      	b.n	1c890 <_dtoa_r+0x818>
   1c9c8:	9b03      	ldr	r3, [sp, #12]
   1c9ca:	4659      	mov	r1, fp
   1c9cc:	3b01      	subs	r3, #1
   1c9ce:	9303      	str	r3, [sp, #12]
   1c9d0:	220a      	movs	r2, #10
   1c9d2:	2300      	movs	r3, #0
   1c9d4:	4650      	mov	r0, sl
   1c9d6:	f001 f845 	bl	1da64 <__multadd>
   1c9da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1c9dc:	4683      	mov	fp, r0
   1c9de:	2b00      	cmp	r3, #0
   1c9e0:	d000      	beq.n	1c9e4 <_dtoa_r+0x96c>
   1c9e2:	e2ca      	b.n	1cf7a <_dtoa_r+0xf02>
   1c9e4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1c9e6:	2b00      	cmp	r3, #0
   1c9e8:	dc00      	bgt.n	1c9ec <_dtoa_r+0x974>
   1c9ea:	e2d8      	b.n	1cf9e <_dtoa_r+0xf26>
   1c9ec:	9307      	str	r3, [sp, #28]
   1c9ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1c9f0:	465d      	mov	r5, fp
   1c9f2:	2400      	movs	r4, #0
   1c9f4:	9f07      	ldr	r7, [sp, #28]
   1c9f6:	469b      	mov	fp, r3
   1c9f8:	e006      	b.n	1ca08 <_dtoa_r+0x990>
   1c9fa:	0029      	movs	r1, r5
   1c9fc:	2300      	movs	r3, #0
   1c9fe:	220a      	movs	r2, #10
   1ca00:	4650      	mov	r0, sl
   1ca02:	f001 f82f 	bl	1da64 <__multadd>
   1ca06:	0005      	movs	r5, r0
   1ca08:	4649      	mov	r1, r9
   1ca0a:	0028      	movs	r0, r5
   1ca0c:	f7ff fa8a 	bl	1bf24 <quorem>
   1ca10:	465b      	mov	r3, fp
   1ca12:	3030      	adds	r0, #48	; 0x30
   1ca14:	5518      	strb	r0, [r3, r4]
   1ca16:	3401      	adds	r4, #1
   1ca18:	42bc      	cmp	r4, r7
   1ca1a:	dbee      	blt.n	1c9fa <_dtoa_r+0x982>
   1ca1c:	46ab      	mov	fp, r5
   1ca1e:	0006      	movs	r6, r0
   1ca20:	9c07      	ldr	r4, [sp, #28]
   1ca22:	2c00      	cmp	r4, #0
   1ca24:	dc00      	bgt.n	1ca28 <_dtoa_r+0x9b0>
   1ca26:	e237      	b.n	1ce98 <_dtoa_r+0xe20>
   1ca28:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1ca2a:	2700      	movs	r7, #0
   1ca2c:	469c      	mov	ip, r3
   1ca2e:	4464      	add	r4, ip
   1ca30:	4659      	mov	r1, fp
   1ca32:	2201      	movs	r2, #1
   1ca34:	4650      	mov	r0, sl
   1ca36:	f001 f9b7 	bl	1dda8 <__lshift>
   1ca3a:	4649      	mov	r1, r9
   1ca3c:	4683      	mov	fp, r0
   1ca3e:	f001 fa13 	bl	1de68 <__mcmp>
   1ca42:	2800      	cmp	r0, #0
   1ca44:	dc00      	bgt.n	1ca48 <_dtoa_r+0x9d0>
   1ca46:	e144      	b.n	1ccd2 <_dtoa_r+0xc5a>
   1ca48:	1e65      	subs	r5, r4, #1
   1ca4a:	782b      	ldrb	r3, [r5, #0]
   1ca4c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1ca4e:	e006      	b.n	1ca5e <_dtoa_r+0x9e6>
   1ca50:	4295      	cmp	r5, r2
   1ca52:	d100      	bne.n	1ca56 <_dtoa_r+0x9de>
   1ca54:	e0b1      	b.n	1cbba <_dtoa_r+0xb42>
   1ca56:	3c02      	subs	r4, #2
   1ca58:	7823      	ldrb	r3, [r4, #0]
   1ca5a:	002c      	movs	r4, r5
   1ca5c:	3d01      	subs	r5, #1
   1ca5e:	2b39      	cmp	r3, #57	; 0x39
   1ca60:	d0f6      	beq.n	1ca50 <_dtoa_r+0x9d8>
   1ca62:	3301      	adds	r3, #1
   1ca64:	702b      	strb	r3, [r5, #0]
   1ca66:	4649      	mov	r1, r9
   1ca68:	4650      	mov	r0, sl
   1ca6a:	f000 fff1 	bl	1da50 <_Bfree>
   1ca6e:	4643      	mov	r3, r8
   1ca70:	2b00      	cmp	r3, #0
   1ca72:	d100      	bne.n	1ca76 <_dtoa_r+0x9fe>
   1ca74:	e52f      	b.n	1c4d6 <_dtoa_r+0x45e>
   1ca76:	2f00      	cmp	r7, #0
   1ca78:	d005      	beq.n	1ca86 <_dtoa_r+0xa0e>
   1ca7a:	4547      	cmp	r7, r8
   1ca7c:	d003      	beq.n	1ca86 <_dtoa_r+0xa0e>
   1ca7e:	0039      	movs	r1, r7
   1ca80:	4650      	mov	r0, sl
   1ca82:	f000 ffe5 	bl	1da50 <_Bfree>
   1ca86:	4641      	mov	r1, r8
   1ca88:	4650      	mov	r0, sl
   1ca8a:	f000 ffe1 	bl	1da50 <_Bfree>
   1ca8e:	e522      	b.n	1c4d6 <_dtoa_r+0x45e>
   1ca90:	0013      	movs	r3, r2
   1ca92:	e675      	b.n	1c780 <_dtoa_r+0x708>
   1ca94:	2e00      	cmp	r6, #0
   1ca96:	d000      	beq.n	1ca9a <_dtoa_r+0xa22>
   1ca98:	e6ab      	b.n	1c7f2 <_dtoa_r+0x77a>
   1ca9a:	033b      	lsls	r3, r7, #12
   1ca9c:	2400      	movs	r4, #0
   1ca9e:	2b00      	cmp	r3, #0
   1caa0:	d000      	beq.n	1caa4 <_dtoa_r+0xa2c>
   1caa2:	e6bf      	b.n	1c824 <_dtoa_r+0x7ac>
   1caa4:	4bba      	ldr	r3, [pc, #744]	; (1cd90 <_dtoa_r+0xd18>)
   1caa6:	423b      	tst	r3, r7
   1caa8:	d100      	bne.n	1caac <_dtoa_r+0xa34>
   1caaa:	e6bb      	b.n	1c824 <_dtoa_r+0x7ac>
   1caac:	9b06      	ldr	r3, [sp, #24]
   1caae:	3401      	adds	r4, #1
   1cab0:	3301      	adds	r3, #1
   1cab2:	9306      	str	r3, [sp, #24]
   1cab4:	9b04      	ldr	r3, [sp, #16]
   1cab6:	3301      	adds	r3, #1
   1cab8:	9304      	str	r3, [sp, #16]
   1caba:	e6b3      	b.n	1c824 <_dtoa_r+0x7ac>
   1cabc:	2301      	movs	r3, #1
   1cabe:	930b      	str	r3, [sp, #44]	; 0x2c
   1cac0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   1cac2:	2b00      	cmp	r3, #0
   1cac4:	dc00      	bgt.n	1cac8 <_dtoa_r+0xa50>
   1cac6:	e0d1      	b.n	1cc6c <_dtoa_r+0xbf4>
   1cac8:	001d      	movs	r5, r3
   1caca:	4698      	mov	r8, r3
   1cacc:	930e      	str	r3, [sp, #56]	; 0x38
   1cace:	9307      	str	r3, [sp, #28]
   1cad0:	f7ff fbc8 	bl	1c264 <_dtoa_r+0x1ec>
   1cad4:	9b07      	ldr	r3, [sp, #28]
   1cad6:	2b00      	cmp	r3, #0
   1cad8:	dd00      	ble.n	1cadc <_dtoa_r+0xa64>
   1cada:	e553      	b.n	1c584 <_dtoa_r+0x50c>
   1cadc:	d000      	beq.n	1cae0 <_dtoa_r+0xa68>
   1cade:	e0ad      	b.n	1cc3c <_dtoa_r+0xbc4>
   1cae0:	9804      	ldr	r0, [sp, #16]
   1cae2:	9905      	ldr	r1, [sp, #20]
   1cae4:	2200      	movs	r2, #0
   1cae6:	4bab      	ldr	r3, [pc, #684]	; (1cd94 <_dtoa_r+0xd1c>)
   1cae8:	f7fb ff22 	bl	18930 <__aeabi_dmul>
   1caec:	003b      	movs	r3, r7
   1caee:	0032      	movs	r2, r6
   1caf0:	f7f9 ff42 	bl	16978 <__aeabi_dcmpge>
   1caf4:	2300      	movs	r3, #0
   1caf6:	4699      	mov	r9, r3
   1caf8:	4698      	mov	r8, r3
   1cafa:	2800      	cmp	r0, #0
   1cafc:	d055      	beq.n	1cbaa <_dtoa_r+0xb32>
   1cafe:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   1cb00:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   1cb02:	43db      	mvns	r3, r3
   1cb04:	9303      	str	r3, [sp, #12]
   1cb06:	4649      	mov	r1, r9
   1cb08:	4650      	mov	r0, sl
   1cb0a:	f000 ffa1 	bl	1da50 <_Bfree>
   1cb0e:	4643      	mov	r3, r8
   1cb10:	2b00      	cmp	r3, #0
   1cb12:	d100      	bne.n	1cb16 <_dtoa_r+0xa9e>
   1cb14:	e4df      	b.n	1c4d6 <_dtoa_r+0x45e>
   1cb16:	e7b6      	b.n	1ca86 <_dtoa_r+0xa0e>
   1cb18:	464a      	mov	r2, r9
   1cb1a:	4659      	mov	r1, fp
   1cb1c:	4650      	mov	r0, sl
   1cb1e:	f001 f8e3 	bl	1dce8 <__pow5mult>
   1cb22:	4683      	mov	fp, r0
   1cb24:	e653      	b.n	1c7ce <_dtoa_r+0x756>
   1cb26:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   1cb28:	2a00      	cmp	r2, #0
   1cb2a:	d100      	bne.n	1cb2e <_dtoa_r+0xab6>
   1cb2c:	e1b6      	b.n	1ce9c <_dtoa_r+0xe24>
   1cb2e:	4a9a      	ldr	r2, [pc, #616]	; (1cd98 <_dtoa_r+0xd20>)
   1cb30:	464c      	mov	r4, r9
   1cb32:	4694      	mov	ip, r2
   1cb34:	9a06      	ldr	r2, [sp, #24]
   1cb36:	4463      	add	r3, ip
   1cb38:	9208      	str	r2, [sp, #32]
   1cb3a:	e5d5      	b.n	1c6e8 <_dtoa_r+0x670>
   1cb3c:	2e00      	cmp	r6, #0
   1cb3e:	d000      	beq.n	1cb42 <_dtoa_r+0xaca>
   1cb40:	e670      	b.n	1c824 <_dtoa_r+0x7ac>
   1cb42:	e7aa      	b.n	1ca9a <_dtoa_r+0xa22>
   1cb44:	f000 ff8e 	bl	1da64 <__multadd>
   1cb48:	46a2      	mov	sl, r4
   1cb4a:	0005      	movs	r5, r0
   1cb4c:	4680      	mov	r8, r0
   1cb4e:	e6c7      	b.n	1c8e0 <_dtoa_r+0x868>
   1cb50:	2301      	movs	r3, #1
   1cb52:	469b      	mov	fp, r3
   1cb54:	e6e2      	b.n	1c91c <_dtoa_r+0x8a4>
   1cb56:	2300      	movs	r3, #0
   1cb58:	930b      	str	r3, [sp, #44]	; 0x2c
   1cb5a:	9b22      	ldr	r3, [sp, #136]	; 0x88
   1cb5c:	2b02      	cmp	r3, #2
   1cb5e:	d0af      	beq.n	1cac0 <_dtoa_r+0xa48>
   1cb60:	2400      	movs	r4, #0
   1cb62:	4653      	mov	r3, sl
   1cb64:	0021      	movs	r1, r4
   1cb66:	645c      	str	r4, [r3, #68]	; 0x44
   1cb68:	4650      	mov	r0, sl
   1cb6a:	f000 ff49 	bl	1da00 <_Balloc>
   1cb6e:	4653      	mov	r3, sl
   1cb70:	6418      	str	r0, [r3, #64]	; 0x40
   1cb72:	2301      	movs	r3, #1
   1cb74:	425b      	negs	r3, r3
   1cb76:	9307      	str	r3, [sp, #28]
   1cb78:	930e      	str	r3, [sp, #56]	; 0x38
   1cb7a:	3302      	adds	r3, #2
   1cb7c:	900a      	str	r0, [sp, #40]	; 0x28
   1cb7e:	9423      	str	r4, [sp, #140]	; 0x8c
   1cb80:	930b      	str	r3, [sp, #44]	; 0x2c
   1cb82:	e4ec      	b.n	1c55e <_dtoa_r+0x4e6>
   1cb84:	9b22      	ldr	r3, [sp, #136]	; 0x88
   1cb86:	2b02      	cmp	r3, #2
   1cb88:	dc00      	bgt.n	1cb8c <_dtoa_r+0xb14>
   1cb8a:	e685      	b.n	1c898 <_dtoa_r+0x820>
   1cb8c:	9b07      	ldr	r3, [sp, #28]
   1cb8e:	2b00      	cmp	r3, #0
   1cb90:	d1b5      	bne.n	1cafe <_dtoa_r+0xa86>
   1cb92:	4649      	mov	r1, r9
   1cb94:	2205      	movs	r2, #5
   1cb96:	4650      	mov	r0, sl
   1cb98:	f000 ff64 	bl	1da64 <__multadd>
   1cb9c:	4681      	mov	r9, r0
   1cb9e:	0001      	movs	r1, r0
   1cba0:	4658      	mov	r0, fp
   1cba2:	f001 f961 	bl	1de68 <__mcmp>
   1cba6:	2800      	cmp	r0, #0
   1cba8:	dda9      	ble.n	1cafe <_dtoa_r+0xa86>
   1cbaa:	2331      	movs	r3, #49	; 0x31
   1cbac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1cbae:	7013      	strb	r3, [r2, #0]
   1cbb0:	9b03      	ldr	r3, [sp, #12]
   1cbb2:	1c54      	adds	r4, r2, #1
   1cbb4:	3301      	adds	r3, #1
   1cbb6:	9303      	str	r3, [sp, #12]
   1cbb8:	e7a5      	b.n	1cb06 <_dtoa_r+0xa8e>
   1cbba:	9b03      	ldr	r3, [sp, #12]
   1cbbc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1cbbe:	3301      	adds	r3, #1
   1cbc0:	9303      	str	r3, [sp, #12]
   1cbc2:	2331      	movs	r3, #49	; 0x31
   1cbc4:	7013      	strb	r3, [r2, #0]
   1cbc6:	e74e      	b.n	1ca66 <_dtoa_r+0x9ee>
   1cbc8:	2300      	movs	r3, #0
   1cbca:	930b      	str	r3, [sp, #44]	; 0x2c
   1cbcc:	f7ff fb3d 	bl	1c24a <_dtoa_r+0x1d2>
   1cbd0:	9b06      	ldr	r3, [sp, #24]
   1cbd2:	465c      	mov	r4, fp
   1cbd4:	469b      	mov	fp, r3
   1cbd6:	9b07      	ldr	r3, [sp, #28]
   1cbd8:	469a      	mov	sl, r3
   1cbda:	e47c      	b.n	1c4d6 <_dtoa_r+0x45e>
   1cbdc:	4640      	mov	r0, r8
   1cbde:	f7fc fc71 	bl	194c4 <__aeabi_i2d>
   1cbe2:	0032      	movs	r2, r6
   1cbe4:	003b      	movs	r3, r7
   1cbe6:	f7fb fea3 	bl	18930 <__aeabi_dmul>
   1cbea:	2200      	movs	r2, #0
   1cbec:	4b6b      	ldr	r3, [pc, #428]	; (1cd9c <_dtoa_r+0xd24>)
   1cbee:	f7fa ff5b 	bl	17aa8 <__aeabi_dadd>
   1cbf2:	4a6b      	ldr	r2, [pc, #428]	; (1cda0 <_dtoa_r+0xd28>)
   1cbf4:	000b      	movs	r3, r1
   1cbf6:	4694      	mov	ip, r2
   1cbf8:	4463      	add	r3, ip
   1cbfa:	9008      	str	r0, [sp, #32]
   1cbfc:	9109      	str	r1, [sp, #36]	; 0x24
   1cbfe:	9309      	str	r3, [sp, #36]	; 0x24
   1cc00:	2200      	movs	r2, #0
   1cc02:	4b64      	ldr	r3, [pc, #400]	; (1cd94 <_dtoa_r+0xd1c>)
   1cc04:	0030      	movs	r0, r6
   1cc06:	0039      	movs	r1, r7
   1cc08:	f7fc f912 	bl	18e30 <__aeabi_dsub>
   1cc0c:	9e08      	ldr	r6, [sp, #32]
   1cc0e:	9f09      	ldr	r7, [sp, #36]	; 0x24
   1cc10:	0032      	movs	r2, r6
   1cc12:	003b      	movs	r3, r7
   1cc14:	0004      	movs	r4, r0
   1cc16:	000d      	movs	r5, r1
   1cc18:	f7f9 fea4 	bl	16964 <__aeabi_dcmpgt>
   1cc1c:	2800      	cmp	r0, #0
   1cc1e:	d000      	beq.n	1cc22 <_dtoa_r+0xbaa>
   1cc20:	e0b2      	b.n	1cd88 <_dtoa_r+0xd10>
   1cc22:	2080      	movs	r0, #128	; 0x80
   1cc24:	0600      	lsls	r0, r0, #24
   1cc26:	4684      	mov	ip, r0
   1cc28:	0039      	movs	r1, r7
   1cc2a:	4461      	add	r1, ip
   1cc2c:	000b      	movs	r3, r1
   1cc2e:	0032      	movs	r2, r6
   1cc30:	0020      	movs	r0, r4
   1cc32:	0029      	movs	r1, r5
   1cc34:	f7f9 fe82 	bl	1693c <__aeabi_dcmplt>
   1cc38:	2800      	cmp	r0, #0
   1cc3a:	d057      	beq.n	1ccec <_dtoa_r+0xc74>
   1cc3c:	2300      	movs	r3, #0
   1cc3e:	4699      	mov	r9, r3
   1cc40:	4698      	mov	r8, r3
   1cc42:	e75c      	b.n	1cafe <_dtoa_r+0xa86>
   1cc44:	980a      	ldr	r0, [sp, #40]	; 0x28
   1cc46:	f7ff fa4c 	bl	1c0e2 <_dtoa_r+0x6a>
   1cc4a:	1ae2      	subs	r2, r4, r3
   1cc4c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1cc4e:	46a1      	mov	r9, r4
   1cc50:	469c      	mov	ip, r3
   1cc52:	4494      	add	ip, r2
   1cc54:	4663      	mov	r3, ip
   1cc56:	2400      	movs	r4, #0
   1cc58:	930d      	str	r3, [sp, #52]	; 0x34
   1cc5a:	e53e      	b.n	1c6da <_dtoa_r+0x662>
   1cc5c:	9a10      	ldr	r2, [sp, #64]	; 0x40
   1cc5e:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1cc60:	9208      	str	r2, [sp, #32]
   1cc62:	9309      	str	r3, [sp, #36]	; 0x24
   1cc64:	2302      	movs	r3, #2
   1cc66:	4698      	mov	r8, r3
   1cc68:	f7ff fb3a 	bl	1c2e0 <_dtoa_r+0x268>
   1cc6c:	2300      	movs	r3, #0
   1cc6e:	4652      	mov	r2, sl
   1cc70:	2100      	movs	r1, #0
   1cc72:	6453      	str	r3, [r2, #68]	; 0x44
   1cc74:	4650      	mov	r0, sl
   1cc76:	f000 fec3 	bl	1da00 <_Balloc>
   1cc7a:	4653      	mov	r3, sl
   1cc7c:	6418      	str	r0, [r3, #64]	; 0x40
   1cc7e:	2301      	movs	r3, #1
   1cc80:	900a      	str	r0, [sp, #40]	; 0x28
   1cc82:	9307      	str	r3, [sp, #28]
   1cc84:	9323      	str	r3, [sp, #140]	; 0x8c
   1cc86:	930e      	str	r3, [sp, #56]	; 0x38
   1cc88:	f7ff fb07 	bl	1c29a <_dtoa_r+0x222>
   1cc8c:	4643      	mov	r3, r8
   1cc8e:	930c      	str	r3, [sp, #48]	; 0x30
   1cc90:	465b      	mov	r3, fp
   1cc92:	9a06      	ldr	r2, [sp, #24]
   1cc94:	46a8      	mov	r8, r5
   1cc96:	46b3      	mov	fp, r6
   1cc98:	4655      	mov	r5, sl
   1cc9a:	9e04      	ldr	r6, [sp, #16]
   1cc9c:	4691      	mov	r9, r2
   1cc9e:	46ba      	mov	sl, r7
   1cca0:	2b00      	cmp	r3, #0
   1cca2:	dd10      	ble.n	1ccc6 <_dtoa_r+0xc4e>
   1cca4:	4659      	mov	r1, fp
   1cca6:	2201      	movs	r2, #1
   1cca8:	0038      	movs	r0, r7
   1ccaa:	f001 f87d 	bl	1dda8 <__lshift>
   1ccae:	4649      	mov	r1, r9
   1ccb0:	4683      	mov	fp, r0
   1ccb2:	f001 f8d9 	bl	1de68 <__mcmp>
   1ccb6:	2800      	cmp	r0, #0
   1ccb8:	dc00      	bgt.n	1ccbc <_dtoa_r+0xc44>
   1ccba:	e157      	b.n	1cf6c <_dtoa_r+0xef4>
   1ccbc:	2e39      	cmp	r6, #57	; 0x39
   1ccbe:	d100      	bne.n	1ccc2 <_dtoa_r+0xc4a>
   1ccc0:	e122      	b.n	1cf08 <_dtoa_r+0xe90>
   1ccc2:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
   1ccc4:	3631      	adds	r6, #49	; 0x31
   1ccc6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1ccc8:	4647      	mov	r7, r8
   1ccca:	1c6c      	adds	r4, r5, #1
   1cccc:	702e      	strb	r6, [r5, #0]
   1ccce:	4698      	mov	r8, r3
   1ccd0:	e6c9      	b.n	1ca66 <_dtoa_r+0x9ee>
   1ccd2:	2800      	cmp	r0, #0
   1ccd4:	d103      	bne.n	1ccde <_dtoa_r+0xc66>
   1ccd6:	07f3      	lsls	r3, r6, #31
   1ccd8:	d501      	bpl.n	1ccde <_dtoa_r+0xc66>
   1ccda:	e6b5      	b.n	1ca48 <_dtoa_r+0x9d0>
   1ccdc:	001c      	movs	r4, r3
   1ccde:	1e63      	subs	r3, r4, #1
   1cce0:	781a      	ldrb	r2, [r3, #0]
   1cce2:	2a30      	cmp	r2, #48	; 0x30
   1cce4:	d0fa      	beq.n	1ccdc <_dtoa_r+0xc64>
   1cce6:	e6be      	b.n	1ca66 <_dtoa_r+0x9ee>
   1cce8:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1ccea:	4699      	mov	r9, r3
   1ccec:	9e10      	ldr	r6, [sp, #64]	; 0x40
   1ccee:	9f11      	ldr	r7, [sp, #68]	; 0x44
   1ccf0:	e435      	b.n	1c55e <_dtoa_r+0x4e6>
   1ccf2:	2501      	movs	r5, #1
   1ccf4:	f7ff fab4 	bl	1c260 <_dtoa_r+0x1e8>
   1ccf8:	9b03      	ldr	r3, [sp, #12]
   1ccfa:	2b00      	cmp	r3, #0
   1ccfc:	d100      	bne.n	1cd00 <_dtoa_r+0xc88>
   1ccfe:	e0d4      	b.n	1ceaa <_dtoa_r+0xe32>
   1cd00:	9810      	ldr	r0, [sp, #64]	; 0x40
   1cd02:	9911      	ldr	r1, [sp, #68]	; 0x44
   1cd04:	425c      	negs	r4, r3
   1cd06:	230f      	movs	r3, #15
   1cd08:	4a26      	ldr	r2, [pc, #152]	; (1cda4 <_dtoa_r+0xd2c>)
   1cd0a:	4023      	ands	r3, r4
   1cd0c:	00db      	lsls	r3, r3, #3
   1cd0e:	18d3      	adds	r3, r2, r3
   1cd10:	681a      	ldr	r2, [r3, #0]
   1cd12:	685b      	ldr	r3, [r3, #4]
   1cd14:	f7fb fe0c 	bl	18930 <__aeabi_dmul>
   1cd18:	1124      	asrs	r4, r4, #4
   1cd1a:	0006      	movs	r6, r0
   1cd1c:	000f      	movs	r7, r1
   1cd1e:	2c00      	cmp	r4, #0
   1cd20:	d100      	bne.n	1cd24 <_dtoa_r+0xcac>
   1cd22:	e149      	b.n	1cfb8 <_dtoa_r+0xf40>
   1cd24:	2302      	movs	r3, #2
   1cd26:	4698      	mov	r8, r3
   1cd28:	4d1f      	ldr	r5, [pc, #124]	; (1cda8 <_dtoa_r+0xd30>)
   1cd2a:	2301      	movs	r3, #1
   1cd2c:	4223      	tst	r3, r4
   1cd2e:	d009      	beq.n	1cd44 <_dtoa_r+0xccc>
   1cd30:	469c      	mov	ip, r3
   1cd32:	682a      	ldr	r2, [r5, #0]
   1cd34:	686b      	ldr	r3, [r5, #4]
   1cd36:	0030      	movs	r0, r6
   1cd38:	0039      	movs	r1, r7
   1cd3a:	44e0      	add	r8, ip
   1cd3c:	f7fb fdf8 	bl	18930 <__aeabi_dmul>
   1cd40:	0006      	movs	r6, r0
   1cd42:	000f      	movs	r7, r1
   1cd44:	1064      	asrs	r4, r4, #1
   1cd46:	3508      	adds	r5, #8
   1cd48:	2c00      	cmp	r4, #0
   1cd4a:	d1ee      	bne.n	1cd2a <_dtoa_r+0xcb2>
   1cd4c:	f7ff fae4 	bl	1c318 <_dtoa_r+0x2a0>
   1cd50:	9b03      	ldr	r3, [sp, #12]
   1cd52:	2730      	movs	r7, #48	; 0x30
   1cd54:	3301      	adds	r3, #1
   1cd56:	9303      	str	r3, [sp, #12]
   1cd58:	2330      	movs	r3, #48	; 0x30
   1cd5a:	702b      	strb	r3, [r5, #0]
   1cd5c:	e4ac      	b.n	1c6b8 <_dtoa_r+0x640>
   1cd5e:	6859      	ldr	r1, [r3, #4]
   1cd60:	4650      	mov	r0, sl
   1cd62:	f000 fe4d 	bl	1da00 <_Balloc>
   1cd66:	4643      	mov	r3, r8
   1cd68:	4641      	mov	r1, r8
   1cd6a:	0004      	movs	r4, r0
   1cd6c:	691b      	ldr	r3, [r3, #16]
   1cd6e:	310c      	adds	r1, #12
   1cd70:	1c9a      	adds	r2, r3, #2
   1cd72:	0092      	lsls	r2, r2, #2
   1cd74:	300c      	adds	r0, #12
   1cd76:	f7fd f807 	bl	19d88 <memcpy>
   1cd7a:	2201      	movs	r2, #1
   1cd7c:	0021      	movs	r1, r4
   1cd7e:	4650      	mov	r0, sl
   1cd80:	f001 f812 	bl	1dda8 <__lshift>
   1cd84:	900c      	str	r0, [sp, #48]	; 0x30
   1cd86:	e599      	b.n	1c8bc <_dtoa_r+0x844>
   1cd88:	2300      	movs	r3, #0
   1cd8a:	4699      	mov	r9, r3
   1cd8c:	4698      	mov	r8, r3
   1cd8e:	e70c      	b.n	1cbaa <_dtoa_r+0xb32>
   1cd90:	7ff00000 	.word	0x7ff00000
   1cd94:	40140000 	.word	0x40140000
   1cd98:	00000433 	.word	0x00000433
   1cd9c:	401c0000 	.word	0x401c0000
   1cda0:	fcc00000 	.word	0xfcc00000
   1cda4:	000208a0 	.word	0x000208a0
   1cda8:	00020878 	.word	0x00020878
   1cdac:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1cdae:	498f      	ldr	r1, [pc, #572]	; (1cfec <_dtoa_r+0xf74>)
   1cdb0:	3b01      	subs	r3, #1
   1cdb2:	00db      	lsls	r3, r3, #3
   1cdb4:	18c9      	adds	r1, r1, r3
   1cdb6:	6808      	ldr	r0, [r1, #0]
   1cdb8:	6849      	ldr	r1, [r1, #4]
   1cdba:	9a08      	ldr	r2, [sp, #32]
   1cdbc:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1cdbe:	f7fb fdb7 	bl	18930 <__aeabi_dmul>
   1cdc2:	9014      	str	r0, [sp, #80]	; 0x50
   1cdc4:	9115      	str	r1, [sp, #84]	; 0x54
   1cdc6:	0039      	movs	r1, r7
   1cdc8:	0030      	movs	r0, r6
   1cdca:	f7fc fb47 	bl	1945c <__aeabi_d2iz>
   1cdce:	0005      	movs	r5, r0
   1cdd0:	f7fc fb78 	bl	194c4 <__aeabi_i2d>
   1cdd4:	0002      	movs	r2, r0
   1cdd6:	000b      	movs	r3, r1
   1cdd8:	0030      	movs	r0, r6
   1cdda:	0039      	movs	r1, r7
   1cddc:	f7fc f828 	bl	18e30 <__aeabi_dsub>
   1cde0:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1cde2:	9008      	str	r0, [sp, #32]
   1cde4:	9109      	str	r1, [sp, #36]	; 0x24
   1cde6:	990a      	ldr	r1, [sp, #40]	; 0x28
   1cde8:	001a      	movs	r2, r3
   1cdea:	468c      	mov	ip, r1
   1cdec:	3530      	adds	r5, #48	; 0x30
   1cdee:	4462      	add	r2, ip
   1cdf0:	1c4c      	adds	r4, r1, #1
   1cdf2:	700d      	strb	r5, [r1, #0]
   1cdf4:	4690      	mov	r8, r2
   1cdf6:	2b01      	cmp	r3, #1
   1cdf8:	d01b      	beq.n	1ce32 <_dtoa_r+0xdba>
   1cdfa:	9808      	ldr	r0, [sp, #32]
   1cdfc:	9909      	ldr	r1, [sp, #36]	; 0x24
   1cdfe:	0025      	movs	r5, r4
   1ce00:	2200      	movs	r2, #0
   1ce02:	4b7b      	ldr	r3, [pc, #492]	; (1cff0 <_dtoa_r+0xf78>)
   1ce04:	f7fb fd94 	bl	18930 <__aeabi_dmul>
   1ce08:	000f      	movs	r7, r1
   1ce0a:	0006      	movs	r6, r0
   1ce0c:	f7fc fb26 	bl	1945c <__aeabi_d2iz>
   1ce10:	0004      	movs	r4, r0
   1ce12:	f7fc fb57 	bl	194c4 <__aeabi_i2d>
   1ce16:	3430      	adds	r4, #48	; 0x30
   1ce18:	0002      	movs	r2, r0
   1ce1a:	000b      	movs	r3, r1
   1ce1c:	0030      	movs	r0, r6
   1ce1e:	0039      	movs	r1, r7
   1ce20:	f7fc f806 	bl	18e30 <__aeabi_dsub>
   1ce24:	702c      	strb	r4, [r5, #0]
   1ce26:	3501      	adds	r5, #1
   1ce28:	45a8      	cmp	r8, r5
   1ce2a:	d1e9      	bne.n	1ce00 <_dtoa_r+0xd88>
   1ce2c:	4644      	mov	r4, r8
   1ce2e:	9008      	str	r0, [sp, #32]
   1ce30:	9109      	str	r1, [sp, #36]	; 0x24
   1ce32:	9814      	ldr	r0, [sp, #80]	; 0x50
   1ce34:	9915      	ldr	r1, [sp, #84]	; 0x54
   1ce36:	2200      	movs	r2, #0
   1ce38:	4b6e      	ldr	r3, [pc, #440]	; (1cff4 <_dtoa_r+0xf7c>)
   1ce3a:	f7fa fe35 	bl	17aa8 <__aeabi_dadd>
   1ce3e:	9a08      	ldr	r2, [sp, #32]
   1ce40:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1ce42:	f7f9 fd7b 	bl	1693c <__aeabi_dcmplt>
   1ce46:	2800      	cmp	r0, #0
   1ce48:	d067      	beq.n	1cf1a <_dtoa_r+0xea2>
   1ce4a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   1ce4c:	1e65      	subs	r5, r4, #1
   1ce4e:	9303      	str	r3, [sp, #12]
   1ce50:	782f      	ldrb	r7, [r5, #0]
   1ce52:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1ce54:	e42e      	b.n	1c6b4 <_dtoa_r+0x63c>
   1ce56:	4643      	mov	r3, r8
   1ce58:	46b3      	mov	fp, r6
   1ce5a:	930c      	str	r3, [sp, #48]	; 0x30
   1ce5c:	9e04      	ldr	r6, [sp, #16]
   1ce5e:	9b06      	ldr	r3, [sp, #24]
   1ce60:	46a8      	mov	r8, r5
   1ce62:	4699      	mov	r9, r3
   1ce64:	4655      	mov	r5, sl
   1ce66:	46ba      	mov	sl, r7
   1ce68:	2e39      	cmp	r6, #57	; 0x39
   1ce6a:	d04d      	beq.n	1cf08 <_dtoa_r+0xe90>
   1ce6c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1ce6e:	3601      	adds	r6, #1
   1ce70:	4647      	mov	r7, r8
   1ce72:	1c6c      	adds	r4, r5, #1
   1ce74:	702e      	strb	r6, [r5, #0]
   1ce76:	4698      	mov	r8, r3
   1ce78:	e5f5      	b.n	1ca66 <_dtoa_r+0x9ee>
   1ce7a:	4642      	mov	r2, r8
   1ce7c:	9b06      	ldr	r3, [sp, #24]
   1ce7e:	46b3      	mov	fp, r6
   1ce80:	46ba      	mov	sl, r7
   1ce82:	9e04      	ldr	r6, [sp, #16]
   1ce84:	4699      	mov	r9, r3
   1ce86:	002f      	movs	r7, r5
   1ce88:	4690      	mov	r8, r2
   1ce8a:	e5d1      	b.n	1ca30 <_dtoa_r+0x9b8>
   1ce8c:	9b06      	ldr	r3, [sp, #24]
   1ce8e:	9a07      	ldr	r2, [sp, #28]
   1ce90:	1a9b      	subs	r3, r3, r2
   1ce92:	9308      	str	r3, [sp, #32]
   1ce94:	2300      	movs	r3, #0
   1ce96:	e427      	b.n	1c6e8 <_dtoa_r+0x670>
   1ce98:	2401      	movs	r4, #1
   1ce9a:	e5c5      	b.n	1ca28 <_dtoa_r+0x9b0>
   1ce9c:	2336      	movs	r3, #54	; 0x36
   1ce9e:	9a16      	ldr	r2, [sp, #88]	; 0x58
   1cea0:	464c      	mov	r4, r9
   1cea2:	1a9b      	subs	r3, r3, r2
   1cea4:	9a06      	ldr	r2, [sp, #24]
   1cea6:	9208      	str	r2, [sp, #32]
   1cea8:	e41e      	b.n	1c6e8 <_dtoa_r+0x670>
   1ceaa:	2302      	movs	r3, #2
   1ceac:	9e10      	ldr	r6, [sp, #64]	; 0x40
   1ceae:	9f11      	ldr	r7, [sp, #68]	; 0x44
   1ceb0:	4698      	mov	r8, r3
   1ceb2:	f7ff fa31 	bl	1c318 <_dtoa_r+0x2a0>
   1ceb6:	9b07      	ldr	r3, [sp, #28]
   1ceb8:	2b00      	cmp	r3, #0
   1ceba:	d100      	bne.n	1cebe <_dtoa_r+0xe46>
   1cebc:	e68e      	b.n	1cbdc <_dtoa_r+0xb64>
   1cebe:	9c0e      	ldr	r4, [sp, #56]	; 0x38
   1cec0:	2c00      	cmp	r4, #0
   1cec2:	dc00      	bgt.n	1cec6 <_dtoa_r+0xe4e>
   1cec4:	e712      	b.n	1ccec <_dtoa_r+0xc74>
   1cec6:	9b03      	ldr	r3, [sp, #12]
   1cec8:	2200      	movs	r2, #0
   1ceca:	3b01      	subs	r3, #1
   1cecc:	9313      	str	r3, [sp, #76]	; 0x4c
   1cece:	0030      	movs	r0, r6
   1ced0:	4b47      	ldr	r3, [pc, #284]	; (1cff0 <_dtoa_r+0xf78>)
   1ced2:	0039      	movs	r1, r7
   1ced4:	f7fb fd2c 	bl	18930 <__aeabi_dmul>
   1ced8:	0006      	movs	r6, r0
   1ceda:	4640      	mov	r0, r8
   1cedc:	000f      	movs	r7, r1
   1cede:	3001      	adds	r0, #1
   1cee0:	f7fc faf0 	bl	194c4 <__aeabi_i2d>
   1cee4:	0032      	movs	r2, r6
   1cee6:	003b      	movs	r3, r7
   1cee8:	f7fb fd22 	bl	18930 <__aeabi_dmul>
   1ceec:	2200      	movs	r2, #0
   1ceee:	4b42      	ldr	r3, [pc, #264]	; (1cff8 <_dtoa_r+0xf80>)
   1cef0:	f7fa fdda 	bl	17aa8 <__aeabi_dadd>
   1cef4:	4a41      	ldr	r2, [pc, #260]	; (1cffc <_dtoa_r+0xf84>)
   1cef6:	000b      	movs	r3, r1
   1cef8:	4694      	mov	ip, r2
   1cefa:	4463      	add	r3, ip
   1cefc:	9008      	str	r0, [sp, #32]
   1cefe:	9109      	str	r1, [sp, #36]	; 0x24
   1cf00:	9412      	str	r4, [sp, #72]	; 0x48
   1cf02:	9309      	str	r3, [sp, #36]	; 0x24
   1cf04:	f7ff fa30 	bl	1c368 <_dtoa_r+0x2f0>
   1cf08:	2339      	movs	r3, #57	; 0x39
   1cf0a:	702b      	strb	r3, [r5, #0]
   1cf0c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1cf0e:	4647      	mov	r7, r8
   1cf10:	1c6c      	adds	r4, r5, #1
   1cf12:	4698      	mov	r8, r3
   1cf14:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1cf16:	2339      	movs	r3, #57	; 0x39
   1cf18:	e5a1      	b.n	1ca5e <_dtoa_r+0x9e6>
   1cf1a:	9a14      	ldr	r2, [sp, #80]	; 0x50
   1cf1c:	9b15      	ldr	r3, [sp, #84]	; 0x54
   1cf1e:	2000      	movs	r0, #0
   1cf20:	4934      	ldr	r1, [pc, #208]	; (1cff4 <_dtoa_r+0xf7c>)
   1cf22:	f7fb ff85 	bl	18e30 <__aeabi_dsub>
   1cf26:	9a08      	ldr	r2, [sp, #32]
   1cf28:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1cf2a:	f7f9 fd1b 	bl	16964 <__aeabi_dcmpgt>
   1cf2e:	2800      	cmp	r0, #0
   1cf30:	d101      	bne.n	1cf36 <_dtoa_r+0xebe>
   1cf32:	e6db      	b.n	1ccec <_dtoa_r+0xc74>
   1cf34:	001c      	movs	r4, r3
   1cf36:	1e63      	subs	r3, r4, #1
   1cf38:	781a      	ldrb	r2, [r3, #0]
   1cf3a:	2a30      	cmp	r2, #48	; 0x30
   1cf3c:	d0fa      	beq.n	1cf34 <_dtoa_r+0xebc>
   1cf3e:	f7ff fac8 	bl	1c4d2 <_dtoa_r+0x45a>
   1cf42:	4643      	mov	r3, r8
   1cf44:	46b3      	mov	fp, r6
   1cf46:	930c      	str	r3, [sp, #48]	; 0x30
   1cf48:	9e04      	ldr	r6, [sp, #16]
   1cf4a:	9b06      	ldr	r3, [sp, #24]
   1cf4c:	46a8      	mov	r8, r5
   1cf4e:	4699      	mov	r9, r3
   1cf50:	4655      	mov	r5, sl
   1cf52:	46ba      	mov	sl, r7
   1cf54:	2e39      	cmp	r6, #57	; 0x39
   1cf56:	d0d7      	beq.n	1cf08 <_dtoa_r+0xe90>
   1cf58:	2c00      	cmp	r4, #0
   1cf5a:	dd00      	ble.n	1cf5e <_dtoa_r+0xee6>
   1cf5c:	e6b1      	b.n	1ccc2 <_dtoa_r+0xc4a>
   1cf5e:	e6b2      	b.n	1ccc6 <_dtoa_r+0xc4e>
   1cf60:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   1cf62:	464d      	mov	r5, r9
   1cf64:	9203      	str	r2, [sp, #12]
   1cf66:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1cf68:	f7ff fba4 	bl	1c6b4 <_dtoa_r+0x63c>
   1cf6c:	2800      	cmp	r0, #0
   1cf6e:	d000      	beq.n	1cf72 <_dtoa_r+0xefa>
   1cf70:	e6a9      	b.n	1ccc6 <_dtoa_r+0xc4e>
   1cf72:	07f3      	lsls	r3, r6, #31
   1cf74:	d400      	bmi.n	1cf78 <_dtoa_r+0xf00>
   1cf76:	e6a6      	b.n	1ccc6 <_dtoa_r+0xc4e>
   1cf78:	e6a0      	b.n	1ccbc <_dtoa_r+0xc44>
   1cf7a:	2300      	movs	r3, #0
   1cf7c:	4641      	mov	r1, r8
   1cf7e:	220a      	movs	r2, #10
   1cf80:	4650      	mov	r0, sl
   1cf82:	f000 fd6f 	bl	1da64 <__multadd>
   1cf86:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1cf88:	4680      	mov	r8, r0
   1cf8a:	2b00      	cmp	r3, #0
   1cf8c:	dd01      	ble.n	1cf92 <_dtoa_r+0xf1a>
   1cf8e:	9307      	str	r3, [sp, #28]
   1cf90:	e486      	b.n	1c8a0 <_dtoa_r+0x828>
   1cf92:	9b22      	ldr	r3, [sp, #136]	; 0x88
   1cf94:	2b02      	cmp	r3, #2
   1cf96:	dc1f      	bgt.n	1cfd8 <_dtoa_r+0xf60>
   1cf98:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1cf9a:	9307      	str	r3, [sp, #28]
   1cf9c:	e480      	b.n	1c8a0 <_dtoa_r+0x828>
   1cf9e:	9b22      	ldr	r3, [sp, #136]	; 0x88
   1cfa0:	2b02      	cmp	r3, #2
   1cfa2:	dc19      	bgt.n	1cfd8 <_dtoa_r+0xf60>
   1cfa4:	4649      	mov	r1, r9
   1cfa6:	f7fe ffbd 	bl	1bf24 <quorem>
   1cfaa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1cfac:	3030      	adds	r0, #48	; 0x30
   1cfae:	7018      	strb	r0, [r3, #0]
   1cfb0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1cfb2:	0006      	movs	r6, r0
   1cfb4:	9307      	str	r3, [sp, #28]
   1cfb6:	e533      	b.n	1ca20 <_dtoa_r+0x9a8>
   1cfb8:	2302      	movs	r3, #2
   1cfba:	4698      	mov	r8, r3
   1cfbc:	f7ff f9ac 	bl	1c318 <_dtoa_r+0x2a0>
   1cfc0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   1cfc2:	9c14      	ldr	r4, [sp, #80]	; 0x50
   1cfc4:	9303      	str	r3, [sp, #12]
   1cfc6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1cfc8:	001d      	movs	r5, r3
   1cfca:	f7ff fb73 	bl	1c6b4 <_dtoa_r+0x63c>
   1cfce:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   1cfd0:	9c14      	ldr	r4, [sp, #80]	; 0x50
   1cfd2:	9303      	str	r3, [sp, #12]
   1cfd4:	f7ff fa7f 	bl	1c4d6 <_dtoa_r+0x45e>
   1cfd8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1cfda:	9307      	str	r3, [sp, #28]
   1cfdc:	e5d6      	b.n	1cb8c <_dtoa_r+0xb14>
   1cfde:	2b04      	cmp	r3, #4
   1cfe0:	d100      	bne.n	1cfe4 <_dtoa_r+0xf6c>
   1cfe2:	e43f      	b.n	1c864 <_dtoa_r+0x7ec>
   1cfe4:	233c      	movs	r3, #60	; 0x3c
   1cfe6:	1a18      	subs	r0, r3, r0
   1cfe8:	e4d7      	b.n	1c99a <_dtoa_r+0x922>
   1cfea:	46c0      	nop			; (mov r8, r8)
   1cfec:	000208a0 	.word	0x000208a0
   1cff0:	40240000 	.word	0x40240000
   1cff4:	3fe00000 	.word	0x3fe00000
   1cff8:	401c0000 	.word	0x401c0000
   1cffc:	fcc00000 	.word	0xfcc00000

0001d000 <__sflush_r>:
   1d000:	b5f0      	push	{r4, r5, r6, r7, lr}
   1d002:	46c6      	mov	lr, r8
   1d004:	b500      	push	{lr}
   1d006:	230c      	movs	r3, #12
   1d008:	5eca      	ldrsh	r2, [r1, r3]
   1d00a:	4680      	mov	r8, r0
   1d00c:	b293      	uxth	r3, r2
   1d00e:	000c      	movs	r4, r1
   1d010:	0719      	lsls	r1, r3, #28
   1d012:	d440      	bmi.n	1d096 <__sflush_r+0x96>
   1d014:	2380      	movs	r3, #128	; 0x80
   1d016:	011b      	lsls	r3, r3, #4
   1d018:	4313      	orrs	r3, r2
   1d01a:	6862      	ldr	r2, [r4, #4]
   1d01c:	81a3      	strh	r3, [r4, #12]
   1d01e:	2a00      	cmp	r2, #0
   1d020:	dc00      	bgt.n	1d024 <__sflush_r+0x24>
   1d022:	e070      	b.n	1d106 <__sflush_r+0x106>
   1d024:	6aa6      	ldr	r6, [r4, #40]	; 0x28
   1d026:	2e00      	cmp	r6, #0
   1d028:	d031      	beq.n	1d08e <__sflush_r+0x8e>
   1d02a:	4642      	mov	r2, r8
   1d02c:	4641      	mov	r1, r8
   1d02e:	6815      	ldr	r5, [r2, #0]
   1d030:	2200      	movs	r2, #0
   1d032:	b29b      	uxth	r3, r3
   1d034:	600a      	str	r2, [r1, #0]
   1d036:	04da      	lsls	r2, r3, #19
   1d038:	d400      	bmi.n	1d03c <__sflush_r+0x3c>
   1d03a:	e069      	b.n	1d110 <__sflush_r+0x110>
   1d03c:	6d22      	ldr	r2, [r4, #80]	; 0x50
   1d03e:	075b      	lsls	r3, r3, #29
   1d040:	d506      	bpl.n	1d050 <__sflush_r+0x50>
   1d042:	6863      	ldr	r3, [r4, #4]
   1d044:	1ad2      	subs	r2, r2, r3
   1d046:	6b23      	ldr	r3, [r4, #48]	; 0x30
   1d048:	2b00      	cmp	r3, #0
   1d04a:	d001      	beq.n	1d050 <__sflush_r+0x50>
   1d04c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   1d04e:	1ad2      	subs	r2, r2, r3
   1d050:	2300      	movs	r3, #0
   1d052:	69e1      	ldr	r1, [r4, #28]
   1d054:	4640      	mov	r0, r8
   1d056:	47b0      	blx	r6
   1d058:	1c43      	adds	r3, r0, #1
   1d05a:	d03d      	beq.n	1d0d8 <__sflush_r+0xd8>
   1d05c:	89a3      	ldrh	r3, [r4, #12]
   1d05e:	4a3a      	ldr	r2, [pc, #232]	; (1d148 <__sflush_r+0x148>)
   1d060:	4013      	ands	r3, r2
   1d062:	2200      	movs	r2, #0
   1d064:	6062      	str	r2, [r4, #4]
   1d066:	6922      	ldr	r2, [r4, #16]
   1d068:	b21b      	sxth	r3, r3
   1d06a:	81a3      	strh	r3, [r4, #12]
   1d06c:	6022      	str	r2, [r4, #0]
   1d06e:	04db      	lsls	r3, r3, #19
   1d070:	d447      	bmi.n	1d102 <__sflush_r+0x102>
   1d072:	4643      	mov	r3, r8
   1d074:	6b21      	ldr	r1, [r4, #48]	; 0x30
   1d076:	601d      	str	r5, [r3, #0]
   1d078:	2900      	cmp	r1, #0
   1d07a:	d008      	beq.n	1d08e <__sflush_r+0x8e>
   1d07c:	0023      	movs	r3, r4
   1d07e:	3340      	adds	r3, #64	; 0x40
   1d080:	4299      	cmp	r1, r3
   1d082:	d002      	beq.n	1d08a <__sflush_r+0x8a>
   1d084:	4640      	mov	r0, r8
   1d086:	f000 f967 	bl	1d358 <_free_r>
   1d08a:	2300      	movs	r3, #0
   1d08c:	6323      	str	r3, [r4, #48]	; 0x30
   1d08e:	2000      	movs	r0, #0
   1d090:	bc04      	pop	{r2}
   1d092:	4690      	mov	r8, r2
   1d094:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1d096:	6926      	ldr	r6, [r4, #16]
   1d098:	2e00      	cmp	r6, #0
   1d09a:	d0f8      	beq.n	1d08e <__sflush_r+0x8e>
   1d09c:	6822      	ldr	r2, [r4, #0]
   1d09e:	6026      	str	r6, [r4, #0]
   1d0a0:	1b95      	subs	r5, r2, r6
   1d0a2:	2200      	movs	r2, #0
   1d0a4:	079b      	lsls	r3, r3, #30
   1d0a6:	d100      	bne.n	1d0aa <__sflush_r+0xaa>
   1d0a8:	6962      	ldr	r2, [r4, #20]
   1d0aa:	60a2      	str	r2, [r4, #8]
   1d0ac:	2d00      	cmp	r5, #0
   1d0ae:	dc04      	bgt.n	1d0ba <__sflush_r+0xba>
   1d0b0:	e7ed      	b.n	1d08e <__sflush_r+0x8e>
   1d0b2:	1836      	adds	r6, r6, r0
   1d0b4:	1a2d      	subs	r5, r5, r0
   1d0b6:	2d00      	cmp	r5, #0
   1d0b8:	dde9      	ble.n	1d08e <__sflush_r+0x8e>
   1d0ba:	002b      	movs	r3, r5
   1d0bc:	0032      	movs	r2, r6
   1d0be:	69e1      	ldr	r1, [r4, #28]
   1d0c0:	4640      	mov	r0, r8
   1d0c2:	6a67      	ldr	r7, [r4, #36]	; 0x24
   1d0c4:	47b8      	blx	r7
   1d0c6:	2800      	cmp	r0, #0
   1d0c8:	dcf3      	bgt.n	1d0b2 <__sflush_r+0xb2>
   1d0ca:	2240      	movs	r2, #64	; 0x40
   1d0cc:	2001      	movs	r0, #1
   1d0ce:	89a3      	ldrh	r3, [r4, #12]
   1d0d0:	4240      	negs	r0, r0
   1d0d2:	4313      	orrs	r3, r2
   1d0d4:	81a3      	strh	r3, [r4, #12]
   1d0d6:	e7db      	b.n	1d090 <__sflush_r+0x90>
   1d0d8:	4643      	mov	r3, r8
   1d0da:	6819      	ldr	r1, [r3, #0]
   1d0dc:	291d      	cmp	r1, #29
   1d0de:	d8f4      	bhi.n	1d0ca <__sflush_r+0xca>
   1d0e0:	4b1a      	ldr	r3, [pc, #104]	; (1d14c <__sflush_r+0x14c>)
   1d0e2:	2201      	movs	r2, #1
   1d0e4:	40cb      	lsrs	r3, r1
   1d0e6:	439a      	bics	r2, r3
   1d0e8:	d1ef      	bne.n	1d0ca <__sflush_r+0xca>
   1d0ea:	89a3      	ldrh	r3, [r4, #12]
   1d0ec:	4e16      	ldr	r6, [pc, #88]	; (1d148 <__sflush_r+0x148>)
   1d0ee:	6062      	str	r2, [r4, #4]
   1d0f0:	4033      	ands	r3, r6
   1d0f2:	6922      	ldr	r2, [r4, #16]
   1d0f4:	b21b      	sxth	r3, r3
   1d0f6:	81a3      	strh	r3, [r4, #12]
   1d0f8:	6022      	str	r2, [r4, #0]
   1d0fa:	04db      	lsls	r3, r3, #19
   1d0fc:	d5b9      	bpl.n	1d072 <__sflush_r+0x72>
   1d0fe:	2900      	cmp	r1, #0
   1d100:	d1b7      	bne.n	1d072 <__sflush_r+0x72>
   1d102:	6520      	str	r0, [r4, #80]	; 0x50
   1d104:	e7b5      	b.n	1d072 <__sflush_r+0x72>
   1d106:	6be2      	ldr	r2, [r4, #60]	; 0x3c
   1d108:	2a00      	cmp	r2, #0
   1d10a:	dd00      	ble.n	1d10e <__sflush_r+0x10e>
   1d10c:	e78a      	b.n	1d024 <__sflush_r+0x24>
   1d10e:	e7be      	b.n	1d08e <__sflush_r+0x8e>
   1d110:	2200      	movs	r2, #0
   1d112:	2301      	movs	r3, #1
   1d114:	69e1      	ldr	r1, [r4, #28]
   1d116:	4640      	mov	r0, r8
   1d118:	47b0      	blx	r6
   1d11a:	0002      	movs	r2, r0
   1d11c:	1c43      	adds	r3, r0, #1
   1d11e:	d002      	beq.n	1d126 <__sflush_r+0x126>
   1d120:	89a3      	ldrh	r3, [r4, #12]
   1d122:	6aa6      	ldr	r6, [r4, #40]	; 0x28
   1d124:	e78b      	b.n	1d03e <__sflush_r+0x3e>
   1d126:	4643      	mov	r3, r8
   1d128:	681b      	ldr	r3, [r3, #0]
   1d12a:	2b00      	cmp	r3, #0
   1d12c:	d0f8      	beq.n	1d120 <__sflush_r+0x120>
   1d12e:	2b1d      	cmp	r3, #29
   1d130:	d001      	beq.n	1d136 <__sflush_r+0x136>
   1d132:	2b16      	cmp	r3, #22
   1d134:	d103      	bne.n	1d13e <__sflush_r+0x13e>
   1d136:	4643      	mov	r3, r8
   1d138:	2000      	movs	r0, #0
   1d13a:	601d      	str	r5, [r3, #0]
   1d13c:	e7a8      	b.n	1d090 <__sflush_r+0x90>
   1d13e:	2140      	movs	r1, #64	; 0x40
   1d140:	89a3      	ldrh	r3, [r4, #12]
   1d142:	430b      	orrs	r3, r1
   1d144:	81a3      	strh	r3, [r4, #12]
   1d146:	e7a3      	b.n	1d090 <__sflush_r+0x90>
   1d148:	fffff7ff 	.word	0xfffff7ff
   1d14c:	20400001 	.word	0x20400001

0001d150 <_fflush_r>:
   1d150:	b570      	push	{r4, r5, r6, lr}
   1d152:	0005      	movs	r5, r0
   1d154:	000c      	movs	r4, r1
   1d156:	2800      	cmp	r0, #0
   1d158:	d002      	beq.n	1d160 <_fflush_r+0x10>
   1d15a:	6b83      	ldr	r3, [r0, #56]	; 0x38
   1d15c:	2b00      	cmp	r3, #0
   1d15e:	d016      	beq.n	1d18e <_fflush_r+0x3e>
   1d160:	220c      	movs	r2, #12
   1d162:	5ea3      	ldrsh	r3, [r4, r2]
   1d164:	2600      	movs	r6, #0
   1d166:	2b00      	cmp	r3, #0
   1d168:	d00f      	beq.n	1d18a <_fflush_r+0x3a>
   1d16a:	6e62      	ldr	r2, [r4, #100]	; 0x64
   1d16c:	07d2      	lsls	r2, r2, #31
   1d16e:	d401      	bmi.n	1d174 <_fflush_r+0x24>
   1d170:	059b      	lsls	r3, r3, #22
   1d172:	d513      	bpl.n	1d19c <_fflush_r+0x4c>
   1d174:	0021      	movs	r1, r4
   1d176:	0028      	movs	r0, r5
   1d178:	f7ff ff42 	bl	1d000 <__sflush_r>
   1d17c:	6e63      	ldr	r3, [r4, #100]	; 0x64
   1d17e:	0006      	movs	r6, r0
   1d180:	07db      	lsls	r3, r3, #31
   1d182:	d402      	bmi.n	1d18a <_fflush_r+0x3a>
   1d184:	89a3      	ldrh	r3, [r4, #12]
   1d186:	059b      	lsls	r3, r3, #22
   1d188:	d504      	bpl.n	1d194 <_fflush_r+0x44>
   1d18a:	0030      	movs	r0, r6
   1d18c:	bd70      	pop	{r4, r5, r6, pc}
   1d18e:	f000 f839 	bl	1d204 <__sinit>
   1d192:	e7e5      	b.n	1d160 <_fflush_r+0x10>
   1d194:	6da0      	ldr	r0, [r4, #88]	; 0x58
   1d196:	f000 fb79 	bl	1d88c <__retarget_lock_release_recursive>
   1d19a:	e7f6      	b.n	1d18a <_fflush_r+0x3a>
   1d19c:	6da0      	ldr	r0, [r4, #88]	; 0x58
   1d19e:	f000 fb73 	bl	1d888 <__retarget_lock_acquire_recursive>
   1d1a2:	e7e7      	b.n	1d174 <_fflush_r+0x24>

0001d1a4 <_cleanup_r>:
   1d1a4:	b510      	push	{r4, lr}
   1d1a6:	4902      	ldr	r1, [pc, #8]	; (1d1b0 <_cleanup_r+0xc>)
   1d1a8:	f000 fb36 	bl	1d818 <_fwalk_reent>
   1d1ac:	bd10      	pop	{r4, pc}
   1d1ae:	46c0      	nop			; (mov r8, r8)
   1d1b0:	0001e6d9 	.word	0x0001e6d9

0001d1b4 <std.isra.0>:
   1d1b4:	2300      	movs	r3, #0
   1d1b6:	b510      	push	{r4, lr}
   1d1b8:	0004      	movs	r4, r0
   1d1ba:	6003      	str	r3, [r0, #0]
   1d1bc:	6043      	str	r3, [r0, #4]
   1d1be:	6083      	str	r3, [r0, #8]
   1d1c0:	8181      	strh	r1, [r0, #12]
   1d1c2:	6643      	str	r3, [r0, #100]	; 0x64
   1d1c4:	81c2      	strh	r2, [r0, #14]
   1d1c6:	6103      	str	r3, [r0, #16]
   1d1c8:	6143      	str	r3, [r0, #20]
   1d1ca:	6183      	str	r3, [r0, #24]
   1d1cc:	2208      	movs	r2, #8
   1d1ce:	2100      	movs	r1, #0
   1d1d0:	305c      	adds	r0, #92	; 0x5c
   1d1d2:	f7fc fe6b 	bl	19eac <memset>
   1d1d6:	0020      	movs	r0, r4
   1d1d8:	4b06      	ldr	r3, [pc, #24]	; (1d1f4 <std.isra.0+0x40>)
   1d1da:	61e4      	str	r4, [r4, #28]
   1d1dc:	6223      	str	r3, [r4, #32]
   1d1de:	4b06      	ldr	r3, [pc, #24]	; (1d1f8 <std.isra.0+0x44>)
   1d1e0:	3058      	adds	r0, #88	; 0x58
   1d1e2:	6263      	str	r3, [r4, #36]	; 0x24
   1d1e4:	4b05      	ldr	r3, [pc, #20]	; (1d1fc <std.isra.0+0x48>)
   1d1e6:	62a3      	str	r3, [r4, #40]	; 0x28
   1d1e8:	4b05      	ldr	r3, [pc, #20]	; (1d200 <std.isra.0+0x4c>)
   1d1ea:	62e3      	str	r3, [r4, #44]	; 0x2c
   1d1ec:	f000 fb48 	bl	1d880 <__retarget_lock_init_recursive>
   1d1f0:	bd10      	pop	{r4, pc}
   1d1f2:	46c0      	nop			; (mov r8, r8)
   1d1f4:	0001e40d 	.word	0x0001e40d
   1d1f8:	0001e435 	.word	0x0001e435
   1d1fc:	0001e471 	.word	0x0001e471
   1d200:	0001e49d 	.word	0x0001e49d

0001d204 <__sinit>:
   1d204:	b570      	push	{r4, r5, r6, lr}
   1d206:	0004      	movs	r4, r0
   1d208:	4d14      	ldr	r5, [pc, #80]	; (1d25c <__sinit+0x58>)
   1d20a:	0028      	movs	r0, r5
   1d20c:	f000 fb3c 	bl	1d888 <__retarget_lock_acquire_recursive>
   1d210:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   1d212:	2b00      	cmp	r3, #0
   1d214:	d11d      	bne.n	1d252 <__sinit+0x4e>
   1d216:	4a12      	ldr	r2, [pc, #72]	; (1d260 <__sinit+0x5c>)
   1d218:	2104      	movs	r1, #4
   1d21a:	63e2      	str	r2, [r4, #60]	; 0x3c
   1d21c:	22b8      	movs	r2, #184	; 0xb8
   1d21e:	0092      	lsls	r2, r2, #2
   1d220:	50a3      	str	r3, [r4, r2]
   1d222:	23b9      	movs	r3, #185	; 0xb9
   1d224:	2203      	movs	r2, #3
   1d226:	009b      	lsls	r3, r3, #2
   1d228:	50e2      	str	r2, [r4, r3]
   1d22a:	3308      	adds	r3, #8
   1d22c:	18e2      	adds	r2, r4, r3
   1d22e:	3b04      	subs	r3, #4
   1d230:	50e2      	str	r2, [r4, r3]
   1d232:	6860      	ldr	r0, [r4, #4]
   1d234:	2200      	movs	r2, #0
   1d236:	f7ff ffbd 	bl	1d1b4 <std.isra.0>
   1d23a:	2201      	movs	r2, #1
   1d23c:	2109      	movs	r1, #9
   1d23e:	68a0      	ldr	r0, [r4, #8]
   1d240:	f7ff ffb8 	bl	1d1b4 <std.isra.0>
   1d244:	2202      	movs	r2, #2
   1d246:	2112      	movs	r1, #18
   1d248:	68e0      	ldr	r0, [r4, #12]
   1d24a:	f7ff ffb3 	bl	1d1b4 <std.isra.0>
   1d24e:	2301      	movs	r3, #1
   1d250:	63a3      	str	r3, [r4, #56]	; 0x38
   1d252:	0028      	movs	r0, r5
   1d254:	f000 fb1a 	bl	1d88c <__retarget_lock_release_recursive>
   1d258:	bd70      	pop	{r4, r5, r6, pc}
   1d25a:	46c0      	nop			; (mov r8, r8)
   1d25c:	20002fcc 	.word	0x20002fcc
   1d260:	0001d1a5 	.word	0x0001d1a5

0001d264 <__sfp_lock_acquire>:
   1d264:	b510      	push	{r4, lr}
   1d266:	4802      	ldr	r0, [pc, #8]	; (1d270 <__sfp_lock_acquire+0xc>)
   1d268:	f000 fb0e 	bl	1d888 <__retarget_lock_acquire_recursive>
   1d26c:	bd10      	pop	{r4, pc}
   1d26e:	46c0      	nop			; (mov r8, r8)
   1d270:	20002fe0 	.word	0x20002fe0

0001d274 <__sfp_lock_release>:
   1d274:	b510      	push	{r4, lr}
   1d276:	4802      	ldr	r0, [pc, #8]	; (1d280 <__sfp_lock_release+0xc>)
   1d278:	f000 fb08 	bl	1d88c <__retarget_lock_release_recursive>
   1d27c:	bd10      	pop	{r4, pc}
   1d27e:	46c0      	nop			; (mov r8, r8)
   1d280:	20002fe0 	.word	0x20002fe0

0001d284 <__libc_fini_array>:
   1d284:	b570      	push	{r4, r5, r6, lr}
   1d286:	4b09      	ldr	r3, [pc, #36]	; (1d2ac <__libc_fini_array+0x28>)
   1d288:	4c09      	ldr	r4, [pc, #36]	; (1d2b0 <__libc_fini_array+0x2c>)
   1d28a:	1ae4      	subs	r4, r4, r3
   1d28c:	10a4      	asrs	r4, r4, #2
   1d28e:	d009      	beq.n	1d2a4 <__libc_fini_array+0x20>
   1d290:	4a08      	ldr	r2, [pc, #32]	; (1d2b4 <__libc_fini_array+0x30>)
   1d292:	18a5      	adds	r5, r4, r2
   1d294:	00ad      	lsls	r5, r5, #2
   1d296:	18ed      	adds	r5, r5, r3
   1d298:	682b      	ldr	r3, [r5, #0]
   1d29a:	3c01      	subs	r4, #1
   1d29c:	4798      	blx	r3
   1d29e:	3d04      	subs	r5, #4
   1d2a0:	2c00      	cmp	r4, #0
   1d2a2:	d1f9      	bne.n	1d298 <__libc_fini_array+0x14>
   1d2a4:	f003 fb70 	bl	20988 <_fini>
   1d2a8:	bd70      	pop	{r4, r5, r6, pc}
   1d2aa:	46c0      	nop			; (mov r8, r8)
   1d2ac:	00020994 	.word	0x00020994
   1d2b0:	00020998 	.word	0x00020998
   1d2b4:	3fffffff 	.word	0x3fffffff

0001d2b8 <_malloc_trim_r>:
   1d2b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1d2ba:	000c      	movs	r4, r1
   1d2bc:	0006      	movs	r6, r0
   1d2be:	f7fc fe3f 	bl	19f40 <__malloc_lock>
   1d2c2:	4f20      	ldr	r7, [pc, #128]	; (1d344 <_malloc_trim_r+0x8c>)
   1d2c4:	68bb      	ldr	r3, [r7, #8]
   1d2c6:	685d      	ldr	r5, [r3, #4]
   1d2c8:	2303      	movs	r3, #3
   1d2ca:	439d      	bics	r5, r3
   1d2cc:	4b1e      	ldr	r3, [pc, #120]	; (1d348 <_malloc_trim_r+0x90>)
   1d2ce:	1b2c      	subs	r4, r5, r4
   1d2d0:	469c      	mov	ip, r3
   1d2d2:	4464      	add	r4, ip
   1d2d4:	0b24      	lsrs	r4, r4, #12
   1d2d6:	4b1d      	ldr	r3, [pc, #116]	; (1d34c <_malloc_trim_r+0x94>)
   1d2d8:	3c01      	subs	r4, #1
   1d2da:	0324      	lsls	r4, r4, #12
   1d2dc:	429c      	cmp	r4, r3
   1d2de:	dd07      	ble.n	1d2f0 <_malloc_trim_r+0x38>
   1d2e0:	2100      	movs	r1, #0
   1d2e2:	0030      	movs	r0, r6
   1d2e4:	f7fc fecc 	bl	1a080 <_sbrk_r>
   1d2e8:	68bb      	ldr	r3, [r7, #8]
   1d2ea:	195b      	adds	r3, r3, r5
   1d2ec:	4298      	cmp	r0, r3
   1d2ee:	d004      	beq.n	1d2fa <_malloc_trim_r+0x42>
   1d2f0:	0030      	movs	r0, r6
   1d2f2:	f7fc fe2d 	bl	19f50 <__malloc_unlock>
   1d2f6:	2000      	movs	r0, #0
   1d2f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1d2fa:	4261      	negs	r1, r4
   1d2fc:	0030      	movs	r0, r6
   1d2fe:	f7fc febf 	bl	1a080 <_sbrk_r>
   1d302:	1c43      	adds	r3, r0, #1
   1d304:	d00d      	beq.n	1d322 <_malloc_trim_r+0x6a>
   1d306:	2201      	movs	r2, #1
   1d308:	68bb      	ldr	r3, [r7, #8]
   1d30a:	1b2d      	subs	r5, r5, r4
   1d30c:	4315      	orrs	r5, r2
   1d30e:	605d      	str	r5, [r3, #4]
   1d310:	4b0f      	ldr	r3, [pc, #60]	; (1d350 <_malloc_trim_r+0x98>)
   1d312:	0030      	movs	r0, r6
   1d314:	681a      	ldr	r2, [r3, #0]
   1d316:	1b14      	subs	r4, r2, r4
   1d318:	601c      	str	r4, [r3, #0]
   1d31a:	f7fc fe19 	bl	19f50 <__malloc_unlock>
   1d31e:	2001      	movs	r0, #1
   1d320:	e7ea      	b.n	1d2f8 <_malloc_trim_r+0x40>
   1d322:	2100      	movs	r1, #0
   1d324:	0030      	movs	r0, r6
   1d326:	f7fc feab 	bl	1a080 <_sbrk_r>
   1d32a:	68ba      	ldr	r2, [r7, #8]
   1d32c:	1a83      	subs	r3, r0, r2
   1d32e:	2b0f      	cmp	r3, #15
   1d330:	ddde      	ble.n	1d2f0 <_malloc_trim_r+0x38>
   1d332:	4908      	ldr	r1, [pc, #32]	; (1d354 <_malloc_trim_r+0x9c>)
   1d334:	6809      	ldr	r1, [r1, #0]
   1d336:	1a40      	subs	r0, r0, r1
   1d338:	4905      	ldr	r1, [pc, #20]	; (1d350 <_malloc_trim_r+0x98>)
   1d33a:	6008      	str	r0, [r1, #0]
   1d33c:	2101      	movs	r1, #1
   1d33e:	430b      	orrs	r3, r1
   1d340:	6053      	str	r3, [r2, #4]
   1d342:	e7d5      	b.n	1d2f0 <_malloc_trim_r+0x38>
   1d344:	200005b4 	.word	0x200005b4
   1d348:	00000fef 	.word	0x00000fef
   1d34c:	00000fff 	.word	0x00000fff
   1d350:	20001138 	.word	0x20001138
   1d354:	200009bc 	.word	0x200009bc

0001d358 <_free_r>:
   1d358:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1d35a:	0004      	movs	r4, r0
   1d35c:	1e0d      	subs	r5, r1, #0
   1d35e:	d03c      	beq.n	1d3da <_free_r+0x82>
   1d360:	f7fc fdee 	bl	19f40 <__malloc_lock>
   1d364:	0029      	movs	r1, r5
   1d366:	3908      	subs	r1, #8
   1d368:	6848      	ldr	r0, [r1, #4]
   1d36a:	2301      	movs	r3, #1
   1d36c:	0005      	movs	r5, r0
   1d36e:	2603      	movs	r6, #3
   1d370:	439d      	bics	r5, r3
   1d372:	194a      	adds	r2, r1, r5
   1d374:	469c      	mov	ip, r3
   1d376:	4f61      	ldr	r7, [pc, #388]	; (1d4fc <_free_r+0x1a4>)
   1d378:	6853      	ldr	r3, [r2, #4]
   1d37a:	43b3      	bics	r3, r6
   1d37c:	68be      	ldr	r6, [r7, #8]
   1d37e:	42b2      	cmp	r2, r6
   1d380:	d056      	beq.n	1d430 <_free_r+0xd8>
   1d382:	4666      	mov	r6, ip
   1d384:	6053      	str	r3, [r2, #4]
   1d386:	4206      	tst	r6, r0
   1d388:	d10a      	bne.n	1d3a0 <_free_r+0x48>
   1d38a:	003e      	movs	r6, r7
   1d38c:	6808      	ldr	r0, [r1, #0]
   1d38e:	3608      	adds	r6, #8
   1d390:	1a09      	subs	r1, r1, r0
   1d392:	182d      	adds	r5, r5, r0
   1d394:	6888      	ldr	r0, [r1, #8]
   1d396:	42b0      	cmp	r0, r6
   1d398:	d065      	beq.n	1d466 <_free_r+0x10e>
   1d39a:	68ce      	ldr	r6, [r1, #12]
   1d39c:	60c6      	str	r6, [r0, #12]
   1d39e:	60b0      	str	r0, [r6, #8]
   1d3a0:	2001      	movs	r0, #1
   1d3a2:	18d6      	adds	r6, r2, r3
   1d3a4:	6876      	ldr	r6, [r6, #4]
   1d3a6:	4206      	tst	r6, r0
   1d3a8:	d033      	beq.n	1d412 <_free_r+0xba>
   1d3aa:	4b55      	ldr	r3, [pc, #340]	; (1d500 <_free_r+0x1a8>)
   1d3ac:	4328      	orrs	r0, r5
   1d3ae:	6048      	str	r0, [r1, #4]
   1d3b0:	514d      	str	r5, [r1, r5]
   1d3b2:	429d      	cmp	r5, r3
   1d3b4:	d812      	bhi.n	1d3dc <_free_r+0x84>
   1d3b6:	08ed      	lsrs	r5, r5, #3
   1d3b8:	3bff      	subs	r3, #255	; 0xff
   1d3ba:	10aa      	asrs	r2, r5, #2
   1d3bc:	3bff      	subs	r3, #255	; 0xff
   1d3be:	4093      	lsls	r3, r2
   1d3c0:	687a      	ldr	r2, [r7, #4]
   1d3c2:	00ed      	lsls	r5, r5, #3
   1d3c4:	4313      	orrs	r3, r2
   1d3c6:	607b      	str	r3, [r7, #4]
   1d3c8:	19ef      	adds	r7, r5, r7
   1d3ca:	68bb      	ldr	r3, [r7, #8]
   1d3cc:	60cf      	str	r7, [r1, #12]
   1d3ce:	608b      	str	r3, [r1, #8]
   1d3d0:	60b9      	str	r1, [r7, #8]
   1d3d2:	60d9      	str	r1, [r3, #12]
   1d3d4:	0020      	movs	r0, r4
   1d3d6:	f7fc fdbb 	bl	19f50 <__malloc_unlock>
   1d3da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1d3dc:	0a68      	lsrs	r0, r5, #9
   1d3de:	2804      	cmp	r0, #4
   1d3e0:	d850      	bhi.n	1d484 <_free_r+0x12c>
   1d3e2:	09a8      	lsrs	r0, r5, #6
   1d3e4:	0002      	movs	r2, r0
   1d3e6:	3039      	adds	r0, #57	; 0x39
   1d3e8:	3238      	adds	r2, #56	; 0x38
   1d3ea:	00c0      	lsls	r0, r0, #3
   1d3ec:	1838      	adds	r0, r7, r0
   1d3ee:	3808      	subs	r0, #8
   1d3f0:	6883      	ldr	r3, [r0, #8]
   1d3f2:	2603      	movs	r6, #3
   1d3f4:	4298      	cmp	r0, r3
   1d3f6:	d04c      	beq.n	1d492 <_free_r+0x13a>
   1d3f8:	685a      	ldr	r2, [r3, #4]
   1d3fa:	43b2      	bics	r2, r6
   1d3fc:	4295      	cmp	r5, r2
   1d3fe:	d230      	bcs.n	1d462 <_free_r+0x10a>
   1d400:	689b      	ldr	r3, [r3, #8]
   1d402:	4298      	cmp	r0, r3
   1d404:	d1f8      	bne.n	1d3f8 <_free_r+0xa0>
   1d406:	68c3      	ldr	r3, [r0, #12]
   1d408:	60cb      	str	r3, [r1, #12]
   1d40a:	6088      	str	r0, [r1, #8]
   1d40c:	6099      	str	r1, [r3, #8]
   1d40e:	60c1      	str	r1, [r0, #12]
   1d410:	e7e0      	b.n	1d3d4 <_free_r+0x7c>
   1d412:	18ed      	adds	r5, r5, r3
   1d414:	4e3b      	ldr	r6, [pc, #236]	; (1d504 <_free_r+0x1ac>)
   1d416:	6893      	ldr	r3, [r2, #8]
   1d418:	42b3      	cmp	r3, r6
   1d41a:	d042      	beq.n	1d4a2 <_free_r+0x14a>
   1d41c:	68d2      	ldr	r2, [r2, #12]
   1d41e:	4328      	orrs	r0, r5
   1d420:	60da      	str	r2, [r3, #12]
   1d422:	6093      	str	r3, [r2, #8]
   1d424:	4b36      	ldr	r3, [pc, #216]	; (1d500 <_free_r+0x1a8>)
   1d426:	6048      	str	r0, [r1, #4]
   1d428:	514d      	str	r5, [r1, r5]
   1d42a:	429d      	cmp	r5, r3
   1d42c:	d8d6      	bhi.n	1d3dc <_free_r+0x84>
   1d42e:	e7c2      	b.n	1d3b6 <_free_r+0x5e>
   1d430:	4662      	mov	r2, ip
   1d432:	18eb      	adds	r3, r5, r3
   1d434:	4202      	tst	r2, r0
   1d436:	d106      	bne.n	1d446 <_free_r+0xee>
   1d438:	680a      	ldr	r2, [r1, #0]
   1d43a:	1a89      	subs	r1, r1, r2
   1d43c:	6888      	ldr	r0, [r1, #8]
   1d43e:	189b      	adds	r3, r3, r2
   1d440:	68ca      	ldr	r2, [r1, #12]
   1d442:	60c2      	str	r2, [r0, #12]
   1d444:	6090      	str	r0, [r2, #8]
   1d446:	2201      	movs	r2, #1
   1d448:	431a      	orrs	r2, r3
   1d44a:	604a      	str	r2, [r1, #4]
   1d44c:	4a2e      	ldr	r2, [pc, #184]	; (1d508 <_free_r+0x1b0>)
   1d44e:	60b9      	str	r1, [r7, #8]
   1d450:	6812      	ldr	r2, [r2, #0]
   1d452:	4293      	cmp	r3, r2
   1d454:	d3be      	bcc.n	1d3d4 <_free_r+0x7c>
   1d456:	4b2d      	ldr	r3, [pc, #180]	; (1d50c <_free_r+0x1b4>)
   1d458:	0020      	movs	r0, r4
   1d45a:	6819      	ldr	r1, [r3, #0]
   1d45c:	f7ff ff2c 	bl	1d2b8 <_malloc_trim_r>
   1d460:	e7b8      	b.n	1d3d4 <_free_r+0x7c>
   1d462:	0018      	movs	r0, r3
   1d464:	e7cf      	b.n	1d406 <_free_r+0xae>
   1d466:	4666      	mov	r6, ip
   1d468:	18d0      	adds	r0, r2, r3
   1d46a:	6840      	ldr	r0, [r0, #4]
   1d46c:	4230      	tst	r0, r6
   1d46e:	d13f      	bne.n	1d4f0 <_free_r+0x198>
   1d470:	6890      	ldr	r0, [r2, #8]
   1d472:	195d      	adds	r5, r3, r5
   1d474:	68d3      	ldr	r3, [r2, #12]
   1d476:	60c3      	str	r3, [r0, #12]
   1d478:	6098      	str	r0, [r3, #8]
   1d47a:	4663      	mov	r3, ip
   1d47c:	432b      	orrs	r3, r5
   1d47e:	604b      	str	r3, [r1, #4]
   1d480:	514d      	str	r5, [r1, r5]
   1d482:	e7a7      	b.n	1d3d4 <_free_r+0x7c>
   1d484:	2814      	cmp	r0, #20
   1d486:	d814      	bhi.n	1d4b2 <_free_r+0x15a>
   1d488:	0002      	movs	r2, r0
   1d48a:	305c      	adds	r0, #92	; 0x5c
   1d48c:	325b      	adds	r2, #91	; 0x5b
   1d48e:	00c0      	lsls	r0, r0, #3
   1d490:	e7ac      	b.n	1d3ec <_free_r+0x94>
   1d492:	2301      	movs	r3, #1
   1d494:	1092      	asrs	r2, r2, #2
   1d496:	4093      	lsls	r3, r2
   1d498:	687a      	ldr	r2, [r7, #4]
   1d49a:	4313      	orrs	r3, r2
   1d49c:	607b      	str	r3, [r7, #4]
   1d49e:	0003      	movs	r3, r0
   1d4a0:	e7b2      	b.n	1d408 <_free_r+0xb0>
   1d4a2:	4328      	orrs	r0, r5
   1d4a4:	60d9      	str	r1, [r3, #12]
   1d4a6:	6099      	str	r1, [r3, #8]
   1d4a8:	60cb      	str	r3, [r1, #12]
   1d4aa:	608b      	str	r3, [r1, #8]
   1d4ac:	6048      	str	r0, [r1, #4]
   1d4ae:	514d      	str	r5, [r1, r5]
   1d4b0:	e790      	b.n	1d3d4 <_free_r+0x7c>
   1d4b2:	2854      	cmp	r0, #84	; 0x54
   1d4b4:	d805      	bhi.n	1d4c2 <_free_r+0x16a>
   1d4b6:	0b28      	lsrs	r0, r5, #12
   1d4b8:	0002      	movs	r2, r0
   1d4ba:	306f      	adds	r0, #111	; 0x6f
   1d4bc:	326e      	adds	r2, #110	; 0x6e
   1d4be:	00c0      	lsls	r0, r0, #3
   1d4c0:	e794      	b.n	1d3ec <_free_r+0x94>
   1d4c2:	22aa      	movs	r2, #170	; 0xaa
   1d4c4:	0052      	lsls	r2, r2, #1
   1d4c6:	4290      	cmp	r0, r2
   1d4c8:	d805      	bhi.n	1d4d6 <_free_r+0x17e>
   1d4ca:	0be8      	lsrs	r0, r5, #15
   1d4cc:	0002      	movs	r2, r0
   1d4ce:	3078      	adds	r0, #120	; 0x78
   1d4d0:	3277      	adds	r2, #119	; 0x77
   1d4d2:	00c0      	lsls	r0, r0, #3
   1d4d4:	e78a      	b.n	1d3ec <_free_r+0x94>
   1d4d6:	4a0e      	ldr	r2, [pc, #56]	; (1d510 <_free_r+0x1b8>)
   1d4d8:	4290      	cmp	r0, r2
   1d4da:	d805      	bhi.n	1d4e8 <_free_r+0x190>
   1d4dc:	0ca8      	lsrs	r0, r5, #18
   1d4de:	0002      	movs	r2, r0
   1d4e0:	307d      	adds	r0, #125	; 0x7d
   1d4e2:	327c      	adds	r2, #124	; 0x7c
   1d4e4:	00c0      	lsls	r0, r0, #3
   1d4e6:	e781      	b.n	1d3ec <_free_r+0x94>
   1d4e8:	20fe      	movs	r0, #254	; 0xfe
   1d4ea:	227e      	movs	r2, #126	; 0x7e
   1d4ec:	0080      	lsls	r0, r0, #2
   1d4ee:	e77d      	b.n	1d3ec <_free_r+0x94>
   1d4f0:	4663      	mov	r3, ip
   1d4f2:	432b      	orrs	r3, r5
   1d4f4:	604b      	str	r3, [r1, #4]
   1d4f6:	6015      	str	r5, [r2, #0]
   1d4f8:	e76c      	b.n	1d3d4 <_free_r+0x7c>
   1d4fa:	46c0      	nop			; (mov r8, r8)
   1d4fc:	200005b4 	.word	0x200005b4
   1d500:	000001ff 	.word	0x000001ff
   1d504:	200005bc 	.word	0x200005bc
   1d508:	200009c0 	.word	0x200009c0
   1d50c:	20001168 	.word	0x20001168
   1d510:	00000554 	.word	0x00000554

0001d514 <__sfvwrite_r>:
   1d514:	b5f0      	push	{r4, r5, r6, r7, lr}
   1d516:	464e      	mov	r6, r9
   1d518:	46de      	mov	lr, fp
   1d51a:	4657      	mov	r7, sl
   1d51c:	4645      	mov	r5, r8
   1d51e:	b5e0      	push	{r5, r6, r7, lr}
   1d520:	6893      	ldr	r3, [r2, #8]
   1d522:	b083      	sub	sp, #12
   1d524:	9000      	str	r0, [sp, #0]
   1d526:	000c      	movs	r4, r1
   1d528:	0016      	movs	r6, r2
   1d52a:	2b00      	cmp	r3, #0
   1d52c:	d025      	beq.n	1d57a <__sfvwrite_r+0x66>
   1d52e:	898b      	ldrh	r3, [r1, #12]
   1d530:	071a      	lsls	r2, r3, #28
   1d532:	d52a      	bpl.n	1d58a <__sfvwrite_r+0x76>
   1d534:	690a      	ldr	r2, [r1, #16]
   1d536:	2a00      	cmp	r2, #0
   1d538:	d027      	beq.n	1d58a <__sfvwrite_r+0x76>
   1d53a:	6832      	ldr	r2, [r6, #0]
   1d53c:	4693      	mov	fp, r2
   1d53e:	079a      	lsls	r2, r3, #30
   1d540:	d52f      	bpl.n	1d5a2 <__sfvwrite_r+0x8e>
   1d542:	4bb2      	ldr	r3, [pc, #712]	; (1d80c <__sfvwrite_r+0x2f8>)
   1d544:	2700      	movs	r7, #0
   1d546:	2500      	movs	r5, #0
   1d548:	4698      	mov	r8, r3
   1d54a:	46b1      	mov	r9, r6
   1d54c:	2d00      	cmp	r5, #0
   1d54e:	d100      	bne.n	1d552 <__sfvwrite_r+0x3e>
   1d550:	e072      	b.n	1d638 <__sfvwrite_r+0x124>
   1d552:	002b      	movs	r3, r5
   1d554:	4545      	cmp	r5, r8
   1d556:	d900      	bls.n	1d55a <__sfvwrite_r+0x46>
   1d558:	4bac      	ldr	r3, [pc, #688]	; (1d80c <__sfvwrite_r+0x2f8>)
   1d55a:	003a      	movs	r2, r7
   1d55c:	69e1      	ldr	r1, [r4, #28]
   1d55e:	9800      	ldr	r0, [sp, #0]
   1d560:	6a66      	ldr	r6, [r4, #36]	; 0x24
   1d562:	47b0      	blx	r6
   1d564:	2800      	cmp	r0, #0
   1d566:	dc00      	bgt.n	1d56a <__sfvwrite_r+0x56>
   1d568:	e073      	b.n	1d652 <__sfvwrite_r+0x13e>
   1d56a:	464b      	mov	r3, r9
   1d56c:	689b      	ldr	r3, [r3, #8]
   1d56e:	183f      	adds	r7, r7, r0
   1d570:	1a2d      	subs	r5, r5, r0
   1d572:	1a18      	subs	r0, r3, r0
   1d574:	464b      	mov	r3, r9
   1d576:	6098      	str	r0, [r3, #8]
   1d578:	d1e8      	bne.n	1d54c <__sfvwrite_r+0x38>
   1d57a:	2000      	movs	r0, #0
   1d57c:	b003      	add	sp, #12
   1d57e:	bc3c      	pop	{r2, r3, r4, r5}
   1d580:	4690      	mov	r8, r2
   1d582:	4699      	mov	r9, r3
   1d584:	46a2      	mov	sl, r4
   1d586:	46ab      	mov	fp, r5
   1d588:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1d58a:	0021      	movs	r1, r4
   1d58c:	9800      	ldr	r0, [sp, #0]
   1d58e:	f7fe fc4b 	bl	1be28 <__swsetup_r>
   1d592:	2800      	cmp	r0, #0
   1d594:	d000      	beq.n	1d598 <__sfvwrite_r+0x84>
   1d596:	e130      	b.n	1d7fa <__sfvwrite_r+0x2e6>
   1d598:	6832      	ldr	r2, [r6, #0]
   1d59a:	89a3      	ldrh	r3, [r4, #12]
   1d59c:	4693      	mov	fp, r2
   1d59e:	079a      	lsls	r2, r3, #30
   1d5a0:	d4cf      	bmi.n	1d542 <__sfvwrite_r+0x2e>
   1d5a2:	07da      	lsls	r2, r3, #31
   1d5a4:	d55d      	bpl.n	1d662 <__sfvwrite_r+0x14e>
   1d5a6:	2300      	movs	r3, #0
   1d5a8:	2000      	movs	r0, #0
   1d5aa:	469a      	mov	sl, r3
   1d5ac:	2700      	movs	r7, #0
   1d5ae:	001d      	movs	r5, r3
   1d5b0:	46b1      	mov	r9, r6
   1d5b2:	e029      	b.n	1d608 <__sfvwrite_r+0xf4>
   1d5b4:	2800      	cmp	r0, #0
   1d5b6:	d033      	beq.n	1d620 <__sfvwrite_r+0x10c>
   1d5b8:	46a8      	mov	r8, r5
   1d5ba:	42bd      	cmp	r5, r7
   1d5bc:	d900      	bls.n	1d5c0 <__sfvwrite_r+0xac>
   1d5be:	46b8      	mov	r8, r7
   1d5c0:	6820      	ldr	r0, [r4, #0]
   1d5c2:	6922      	ldr	r2, [r4, #16]
   1d5c4:	4646      	mov	r6, r8
   1d5c6:	6963      	ldr	r3, [r4, #20]
   1d5c8:	4290      	cmp	r0, r2
   1d5ca:	d907      	bls.n	1d5dc <__sfvwrite_r+0xc8>
   1d5cc:	68a2      	ldr	r2, [r4, #8]
   1d5ce:	4694      	mov	ip, r2
   1d5d0:	449c      	add	ip, r3
   1d5d2:	4662      	mov	r2, ip
   1d5d4:	9201      	str	r2, [sp, #4]
   1d5d6:	45e0      	cmp	r8, ip
   1d5d8:	dd00      	ble.n	1d5dc <__sfvwrite_r+0xc8>
   1d5da:	e0e9      	b.n	1d7b0 <__sfvwrite_r+0x29c>
   1d5dc:	4598      	cmp	r8, r3
   1d5de:	da00      	bge.n	1d5e2 <__sfvwrite_r+0xce>
   1d5e0:	e08f      	b.n	1d702 <__sfvwrite_r+0x1ee>
   1d5e2:	6a66      	ldr	r6, [r4, #36]	; 0x24
   1d5e4:	4652      	mov	r2, sl
   1d5e6:	69e1      	ldr	r1, [r4, #28]
   1d5e8:	9800      	ldr	r0, [sp, #0]
   1d5ea:	47b0      	blx	r6
   1d5ec:	1e06      	subs	r6, r0, #0
   1d5ee:	dd30      	ble.n	1d652 <__sfvwrite_r+0x13e>
   1d5f0:	1bad      	subs	r5, r5, r6
   1d5f2:	2001      	movs	r0, #1
   1d5f4:	2d00      	cmp	r5, #0
   1d5f6:	d026      	beq.n	1d646 <__sfvwrite_r+0x132>
   1d5f8:	464b      	mov	r3, r9
   1d5fa:	689b      	ldr	r3, [r3, #8]
   1d5fc:	44b2      	add	sl, r6
   1d5fe:	1bbf      	subs	r7, r7, r6
   1d600:	1b9e      	subs	r6, r3, r6
   1d602:	464b      	mov	r3, r9
   1d604:	609e      	str	r6, [r3, #8]
   1d606:	d0b8      	beq.n	1d57a <__sfvwrite_r+0x66>
   1d608:	2f00      	cmp	r7, #0
   1d60a:	d1d3      	bne.n	1d5b4 <__sfvwrite_r+0xa0>
   1d60c:	465b      	mov	r3, fp
   1d60e:	681b      	ldr	r3, [r3, #0]
   1d610:	469a      	mov	sl, r3
   1d612:	465b      	mov	r3, fp
   1d614:	685f      	ldr	r7, [r3, #4]
   1d616:	2308      	movs	r3, #8
   1d618:	469c      	mov	ip, r3
   1d61a:	44e3      	add	fp, ip
   1d61c:	2f00      	cmp	r7, #0
   1d61e:	d0f5      	beq.n	1d60c <__sfvwrite_r+0xf8>
   1d620:	003a      	movs	r2, r7
   1d622:	210a      	movs	r1, #10
   1d624:	4650      	mov	r0, sl
   1d626:	f000 f9ab 	bl	1d980 <memchr>
   1d62a:	2800      	cmp	r0, #0
   1d62c:	d100      	bne.n	1d630 <__sfvwrite_r+0x11c>
   1d62e:	e0e2      	b.n	1d7f6 <__sfvwrite_r+0x2e2>
   1d630:	4653      	mov	r3, sl
   1d632:	3001      	adds	r0, #1
   1d634:	1ac5      	subs	r5, r0, r3
   1d636:	e7bf      	b.n	1d5b8 <__sfvwrite_r+0xa4>
   1d638:	465b      	mov	r3, fp
   1d63a:	681f      	ldr	r7, [r3, #0]
   1d63c:	685d      	ldr	r5, [r3, #4]
   1d63e:	2308      	movs	r3, #8
   1d640:	469c      	mov	ip, r3
   1d642:	44e3      	add	fp, ip
   1d644:	e782      	b.n	1d54c <__sfvwrite_r+0x38>
   1d646:	0021      	movs	r1, r4
   1d648:	9800      	ldr	r0, [sp, #0]
   1d64a:	f7ff fd81 	bl	1d150 <_fflush_r>
   1d64e:	2800      	cmp	r0, #0
   1d650:	d0d2      	beq.n	1d5f8 <__sfvwrite_r+0xe4>
   1d652:	220c      	movs	r2, #12
   1d654:	5ea3      	ldrsh	r3, [r4, r2]
   1d656:	2240      	movs	r2, #64	; 0x40
   1d658:	2001      	movs	r0, #1
   1d65a:	4313      	orrs	r3, r2
   1d65c:	81a3      	strh	r3, [r4, #12]
   1d65e:	4240      	negs	r0, r0
   1d660:	e78c      	b.n	1d57c <__sfvwrite_r+0x68>
   1d662:	2200      	movs	r2, #0
   1d664:	4691      	mov	r9, r2
   1d666:	464d      	mov	r5, r9
   1d668:	2d00      	cmp	r5, #0
   1d66a:	d023      	beq.n	1d6b4 <__sfvwrite_r+0x1a0>
   1d66c:	68a2      	ldr	r2, [r4, #8]
   1d66e:	4690      	mov	r8, r2
   1d670:	2280      	movs	r2, #128	; 0x80
   1d672:	0092      	lsls	r2, r2, #2
   1d674:	4213      	tst	r3, r2
   1d676:	d026      	beq.n	1d6c6 <__sfvwrite_r+0x1b2>
   1d678:	46c2      	mov	sl, r8
   1d67a:	4545      	cmp	r5, r8
   1d67c:	d34d      	bcc.n	1d71a <__sfvwrite_r+0x206>
   1d67e:	2290      	movs	r2, #144	; 0x90
   1d680:	00d2      	lsls	r2, r2, #3
   1d682:	4213      	tst	r3, r2
   1d684:	d14e      	bne.n	1d724 <__sfvwrite_r+0x210>
   1d686:	002f      	movs	r7, r5
   1d688:	6820      	ldr	r0, [r4, #0]
   1d68a:	4652      	mov	r2, sl
   1d68c:	4649      	mov	r1, r9
   1d68e:	f7fc fbbd 	bl	19e0c <memmove>
   1d692:	4642      	mov	r2, r8
   1d694:	68a3      	ldr	r3, [r4, #8]
   1d696:	1a98      	subs	r0, r3, r2
   1d698:	6823      	ldr	r3, [r4, #0]
   1d69a:	60a0      	str	r0, [r4, #8]
   1d69c:	4453      	add	r3, sl
   1d69e:	6023      	str	r3, [r4, #0]
   1d6a0:	68b3      	ldr	r3, [r6, #8]
   1d6a2:	44b9      	add	r9, r7
   1d6a4:	1bed      	subs	r5, r5, r7
   1d6a6:	1bdf      	subs	r7, r3, r7
   1d6a8:	60b7      	str	r7, [r6, #8]
   1d6aa:	d100      	bne.n	1d6ae <__sfvwrite_r+0x19a>
   1d6ac:	e765      	b.n	1d57a <__sfvwrite_r+0x66>
   1d6ae:	89a3      	ldrh	r3, [r4, #12]
   1d6b0:	2d00      	cmp	r5, #0
   1d6b2:	d1db      	bne.n	1d66c <__sfvwrite_r+0x158>
   1d6b4:	465a      	mov	r2, fp
   1d6b6:	6812      	ldr	r2, [r2, #0]
   1d6b8:	4691      	mov	r9, r2
   1d6ba:	465a      	mov	r2, fp
   1d6bc:	6855      	ldr	r5, [r2, #4]
   1d6be:	2208      	movs	r2, #8
   1d6c0:	4694      	mov	ip, r2
   1d6c2:	44e3      	add	fp, ip
   1d6c4:	e7d0      	b.n	1d668 <__sfvwrite_r+0x154>
   1d6c6:	6820      	ldr	r0, [r4, #0]
   1d6c8:	6923      	ldr	r3, [r4, #16]
   1d6ca:	4298      	cmp	r0, r3
   1d6cc:	d802      	bhi.n	1d6d4 <__sfvwrite_r+0x1c0>
   1d6ce:	6967      	ldr	r7, [r4, #20]
   1d6d0:	42bd      	cmp	r5, r7
   1d6d2:	d259      	bcs.n	1d788 <__sfvwrite_r+0x274>
   1d6d4:	4647      	mov	r7, r8
   1d6d6:	42af      	cmp	r7, r5
   1d6d8:	d900      	bls.n	1d6dc <__sfvwrite_r+0x1c8>
   1d6da:	002f      	movs	r7, r5
   1d6dc:	003a      	movs	r2, r7
   1d6de:	4649      	mov	r1, r9
   1d6e0:	f7fc fb94 	bl	19e0c <memmove>
   1d6e4:	68a3      	ldr	r3, [r4, #8]
   1d6e6:	6822      	ldr	r2, [r4, #0]
   1d6e8:	1bdb      	subs	r3, r3, r7
   1d6ea:	19d2      	adds	r2, r2, r7
   1d6ec:	60a3      	str	r3, [r4, #8]
   1d6ee:	6022      	str	r2, [r4, #0]
   1d6f0:	2b00      	cmp	r3, #0
   1d6f2:	d1d5      	bne.n	1d6a0 <__sfvwrite_r+0x18c>
   1d6f4:	0021      	movs	r1, r4
   1d6f6:	9800      	ldr	r0, [sp, #0]
   1d6f8:	f7ff fd2a 	bl	1d150 <_fflush_r>
   1d6fc:	2800      	cmp	r0, #0
   1d6fe:	d0cf      	beq.n	1d6a0 <__sfvwrite_r+0x18c>
   1d700:	e7a7      	b.n	1d652 <__sfvwrite_r+0x13e>
   1d702:	4642      	mov	r2, r8
   1d704:	4651      	mov	r1, sl
   1d706:	f7fc fb81 	bl	19e0c <memmove>
   1d70a:	4642      	mov	r2, r8
   1d70c:	68a3      	ldr	r3, [r4, #8]
   1d70e:	1a9b      	subs	r3, r3, r2
   1d710:	60a3      	str	r3, [r4, #8]
   1d712:	6823      	ldr	r3, [r4, #0]
   1d714:	4443      	add	r3, r8
   1d716:	6023      	str	r3, [r4, #0]
   1d718:	e76a      	b.n	1d5f0 <__sfvwrite_r+0xdc>
   1d71a:	46a8      	mov	r8, r5
   1d71c:	6820      	ldr	r0, [r4, #0]
   1d71e:	002f      	movs	r7, r5
   1d720:	46aa      	mov	sl, r5
   1d722:	e7b2      	b.n	1d68a <__sfvwrite_r+0x176>
   1d724:	6921      	ldr	r1, [r4, #16]
   1d726:	6822      	ldr	r2, [r4, #0]
   1d728:	1a52      	subs	r2, r2, r1
   1d72a:	4692      	mov	sl, r2
   1d72c:	6962      	ldr	r2, [r4, #20]
   1d72e:	0057      	lsls	r7, r2, #1
   1d730:	18bf      	adds	r7, r7, r2
   1d732:	0ffa      	lsrs	r2, r7, #31
   1d734:	19d7      	adds	r7, r2, r7
   1d736:	4652      	mov	r2, sl
   1d738:	1c50      	adds	r0, r2, #1
   1d73a:	107f      	asrs	r7, r7, #1
   1d73c:	1940      	adds	r0, r0, r5
   1d73e:	003a      	movs	r2, r7
   1d740:	42b8      	cmp	r0, r7
   1d742:	d901      	bls.n	1d748 <__sfvwrite_r+0x234>
   1d744:	0007      	movs	r7, r0
   1d746:	0002      	movs	r2, r0
   1d748:	055b      	lsls	r3, r3, #21
   1d74a:	d542      	bpl.n	1d7d2 <__sfvwrite_r+0x2be>
   1d74c:	0011      	movs	r1, r2
   1d74e:	9800      	ldr	r0, [sp, #0]
   1d750:	f7fc f82a 	bl	197a8 <_malloc_r>
   1d754:	4680      	mov	r8, r0
   1d756:	1e03      	subs	r3, r0, #0
   1d758:	d052      	beq.n	1d800 <__sfvwrite_r+0x2ec>
   1d75a:	4652      	mov	r2, sl
   1d75c:	6921      	ldr	r1, [r4, #16]
   1d75e:	f7fc fb13 	bl	19d88 <memcpy>
   1d762:	89a3      	ldrh	r3, [r4, #12]
   1d764:	4a2a      	ldr	r2, [pc, #168]	; (1d810 <__sfvwrite_r+0x2fc>)
   1d766:	4013      	ands	r3, r2
   1d768:	2280      	movs	r2, #128	; 0x80
   1d76a:	4313      	orrs	r3, r2
   1d76c:	81a3      	strh	r3, [r4, #12]
   1d76e:	4643      	mov	r3, r8
   1d770:	4640      	mov	r0, r8
   1d772:	6123      	str	r3, [r4, #16]
   1d774:	4653      	mov	r3, sl
   1d776:	4450      	add	r0, sl
   1d778:	6167      	str	r7, [r4, #20]
   1d77a:	1aff      	subs	r7, r7, r3
   1d77c:	60a7      	str	r7, [r4, #8]
   1d77e:	6020      	str	r0, [r4, #0]
   1d780:	46a8      	mov	r8, r5
   1d782:	002f      	movs	r7, r5
   1d784:	46aa      	mov	sl, r5
   1d786:	e780      	b.n	1d68a <__sfvwrite_r+0x176>
   1d788:	4b22      	ldr	r3, [pc, #136]	; (1d814 <__sfvwrite_r+0x300>)
   1d78a:	0028      	movs	r0, r5
   1d78c:	429d      	cmp	r5, r3
   1d78e:	d900      	bls.n	1d792 <__sfvwrite_r+0x27e>
   1d790:	0018      	movs	r0, r3
   1d792:	0039      	movs	r1, r7
   1d794:	f7f8 ffd0 	bl	16738 <__divsi3>
   1d798:	003b      	movs	r3, r7
   1d79a:	464a      	mov	r2, r9
   1d79c:	4343      	muls	r3, r0
   1d79e:	69e1      	ldr	r1, [r4, #28]
   1d7a0:	9800      	ldr	r0, [sp, #0]
   1d7a2:	6a67      	ldr	r7, [r4, #36]	; 0x24
   1d7a4:	47b8      	blx	r7
   1d7a6:	2800      	cmp	r0, #0
   1d7a8:	dc00      	bgt.n	1d7ac <__sfvwrite_r+0x298>
   1d7aa:	e752      	b.n	1d652 <__sfvwrite_r+0x13e>
   1d7ac:	0007      	movs	r7, r0
   1d7ae:	e777      	b.n	1d6a0 <__sfvwrite_r+0x18c>
   1d7b0:	4666      	mov	r6, ip
   1d7b2:	4651      	mov	r1, sl
   1d7b4:	f7fc fb2a 	bl	19e0c <memmove>
   1d7b8:	46b4      	mov	ip, r6
   1d7ba:	6823      	ldr	r3, [r4, #0]
   1d7bc:	0021      	movs	r1, r4
   1d7be:	4463      	add	r3, ip
   1d7c0:	6023      	str	r3, [r4, #0]
   1d7c2:	9800      	ldr	r0, [sp, #0]
   1d7c4:	f7ff fcc4 	bl	1d150 <_fflush_r>
   1d7c8:	2800      	cmp	r0, #0
   1d7ca:	d000      	beq.n	1d7ce <__sfvwrite_r+0x2ba>
   1d7cc:	e741      	b.n	1d652 <__sfvwrite_r+0x13e>
   1d7ce:	9e01      	ldr	r6, [sp, #4]
   1d7d0:	e70e      	b.n	1d5f0 <__sfvwrite_r+0xdc>
   1d7d2:	9800      	ldr	r0, [sp, #0]
   1d7d4:	f000 fc5c 	bl	1e090 <_realloc_r>
   1d7d8:	4680      	mov	r8, r0
   1d7da:	2800      	cmp	r0, #0
   1d7dc:	d1c7      	bne.n	1d76e <__sfvwrite_r+0x25a>
   1d7de:	9d00      	ldr	r5, [sp, #0]
   1d7e0:	6921      	ldr	r1, [r4, #16]
   1d7e2:	0028      	movs	r0, r5
   1d7e4:	f7ff fdb8 	bl	1d358 <_free_r>
   1d7e8:	2280      	movs	r2, #128	; 0x80
   1d7ea:	89a3      	ldrh	r3, [r4, #12]
   1d7ec:	4393      	bics	r3, r2
   1d7ee:	3a74      	subs	r2, #116	; 0x74
   1d7f0:	b21b      	sxth	r3, r3
   1d7f2:	602a      	str	r2, [r5, #0]
   1d7f4:	e72f      	b.n	1d656 <__sfvwrite_r+0x142>
   1d7f6:	1c7d      	adds	r5, r7, #1
   1d7f8:	e6de      	b.n	1d5b8 <__sfvwrite_r+0xa4>
   1d7fa:	2001      	movs	r0, #1
   1d7fc:	4240      	negs	r0, r0
   1d7fe:	e6bd      	b.n	1d57c <__sfvwrite_r+0x68>
   1d800:	9a00      	ldr	r2, [sp, #0]
   1d802:	330c      	adds	r3, #12
   1d804:	6013      	str	r3, [r2, #0]
   1d806:	220c      	movs	r2, #12
   1d808:	5ea3      	ldrsh	r3, [r4, r2]
   1d80a:	e724      	b.n	1d656 <__sfvwrite_r+0x142>
   1d80c:	7ffffc00 	.word	0x7ffffc00
   1d810:	fffffb7f 	.word	0xfffffb7f
   1d814:	7fffffff 	.word	0x7fffffff

0001d818 <_fwalk_reent>:
   1d818:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1d81a:	4647      	mov	r7, r8
   1d81c:	46ce      	mov	lr, r9
   1d81e:	b580      	push	{r7, lr}
   1d820:	27b8      	movs	r7, #184	; 0xb8
   1d822:	4680      	mov	r8, r0
   1d824:	00bf      	lsls	r7, r7, #2
   1d826:	4447      	add	r7, r8
   1d828:	4689      	mov	r9, r1
   1d82a:	2600      	movs	r6, #0
   1d82c:	2f00      	cmp	r7, #0
   1d82e:	d014      	beq.n	1d85a <_fwalk_reent+0x42>
   1d830:	687b      	ldr	r3, [r7, #4]
   1d832:	68bc      	ldr	r4, [r7, #8]
   1d834:	1e5d      	subs	r5, r3, #1
   1d836:	d40d      	bmi.n	1d854 <_fwalk_reent+0x3c>
   1d838:	89a3      	ldrh	r3, [r4, #12]
   1d83a:	2b01      	cmp	r3, #1
   1d83c:	d907      	bls.n	1d84e <_fwalk_reent+0x36>
   1d83e:	220e      	movs	r2, #14
   1d840:	5ea3      	ldrsh	r3, [r4, r2]
   1d842:	3301      	adds	r3, #1
   1d844:	d003      	beq.n	1d84e <_fwalk_reent+0x36>
   1d846:	0021      	movs	r1, r4
   1d848:	4640      	mov	r0, r8
   1d84a:	47c8      	blx	r9
   1d84c:	4306      	orrs	r6, r0
   1d84e:	3468      	adds	r4, #104	; 0x68
   1d850:	3d01      	subs	r5, #1
   1d852:	d2f1      	bcs.n	1d838 <_fwalk_reent+0x20>
   1d854:	683f      	ldr	r7, [r7, #0]
   1d856:	2f00      	cmp	r7, #0
   1d858:	d1ea      	bne.n	1d830 <_fwalk_reent+0x18>
   1d85a:	0030      	movs	r0, r6
   1d85c:	bc0c      	pop	{r2, r3}
   1d85e:	4690      	mov	r8, r2
   1d860:	4699      	mov	r9, r3
   1d862:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001d864 <_localeconv_r>:
   1d864:	4b04      	ldr	r3, [pc, #16]	; (1d878 <_localeconv_r+0x14>)
   1d866:	681b      	ldr	r3, [r3, #0]
   1d868:	6b58      	ldr	r0, [r3, #52]	; 0x34
   1d86a:	2800      	cmp	r0, #0
   1d86c:	d001      	beq.n	1d872 <_localeconv_r+0xe>
   1d86e:	30f0      	adds	r0, #240	; 0xf0
   1d870:	4770      	bx	lr
   1d872:	4802      	ldr	r0, [pc, #8]	; (1d87c <_localeconv_r+0x18>)
   1d874:	e7fb      	b.n	1d86e <_localeconv_r+0xa>
   1d876:	46c0      	nop			; (mov r8, r8)
   1d878:	20000018 	.word	0x20000018
   1d87c:	20000448 	.word	0x20000448

0001d880 <__retarget_lock_init_recursive>:
   1d880:	4770      	bx	lr
   1d882:	46c0      	nop			; (mov r8, r8)

0001d884 <__retarget_lock_close_recursive>:
   1d884:	4770      	bx	lr
   1d886:	46c0      	nop			; (mov r8, r8)

0001d888 <__retarget_lock_acquire_recursive>:
   1d888:	4770      	bx	lr
   1d88a:	46c0      	nop			; (mov r8, r8)

0001d88c <__retarget_lock_release_recursive>:
   1d88c:	4770      	bx	lr
   1d88e:	46c0      	nop			; (mov r8, r8)

0001d890 <__swhatbuf_r>:
   1d890:	b570      	push	{r4, r5, r6, lr}
   1d892:	000c      	movs	r4, r1
   1d894:	001e      	movs	r6, r3
   1d896:	230e      	movs	r3, #14
   1d898:	5ec9      	ldrsh	r1, [r1, r3]
   1d89a:	b090      	sub	sp, #64	; 0x40
   1d89c:	0015      	movs	r5, r2
   1d89e:	2900      	cmp	r1, #0
   1d8a0:	db15      	blt.n	1d8ce <__swhatbuf_r+0x3e>
   1d8a2:	aa01      	add	r2, sp, #4
   1d8a4:	f000 fff8 	bl	1e898 <_fstat_r>
   1d8a8:	2800      	cmp	r0, #0
   1d8aa:	db10      	blt.n	1d8ce <__swhatbuf_r+0x3e>
   1d8ac:	22f0      	movs	r2, #240	; 0xf0
   1d8ae:	9b02      	ldr	r3, [sp, #8]
   1d8b0:	0212      	lsls	r2, r2, #8
   1d8b2:	4013      	ands	r3, r2
   1d8b4:	4a0d      	ldr	r2, [pc, #52]	; (1d8ec <__swhatbuf_r+0x5c>)
   1d8b6:	2080      	movs	r0, #128	; 0x80
   1d8b8:	4694      	mov	ip, r2
   1d8ba:	4463      	add	r3, ip
   1d8bc:	425a      	negs	r2, r3
   1d8be:	4153      	adcs	r3, r2
   1d8c0:	6033      	str	r3, [r6, #0]
   1d8c2:	2380      	movs	r3, #128	; 0x80
   1d8c4:	00db      	lsls	r3, r3, #3
   1d8c6:	602b      	str	r3, [r5, #0]
   1d8c8:	0100      	lsls	r0, r0, #4
   1d8ca:	b010      	add	sp, #64	; 0x40
   1d8cc:	bd70      	pop	{r4, r5, r6, pc}
   1d8ce:	2300      	movs	r3, #0
   1d8d0:	6033      	str	r3, [r6, #0]
   1d8d2:	89a3      	ldrh	r3, [r4, #12]
   1d8d4:	061b      	lsls	r3, r3, #24
   1d8d6:	d503      	bpl.n	1d8e0 <__swhatbuf_r+0x50>
   1d8d8:	2340      	movs	r3, #64	; 0x40
   1d8da:	2000      	movs	r0, #0
   1d8dc:	602b      	str	r3, [r5, #0]
   1d8de:	e7f4      	b.n	1d8ca <__swhatbuf_r+0x3a>
   1d8e0:	2380      	movs	r3, #128	; 0x80
   1d8e2:	00db      	lsls	r3, r3, #3
   1d8e4:	602b      	str	r3, [r5, #0]
   1d8e6:	2000      	movs	r0, #0
   1d8e8:	e7ef      	b.n	1d8ca <__swhatbuf_r+0x3a>
   1d8ea:	46c0      	nop			; (mov r8, r8)
   1d8ec:	ffffe000 	.word	0xffffe000

0001d8f0 <__smakebuf_r>:
   1d8f0:	b570      	push	{r4, r5, r6, lr}
   1d8f2:	898b      	ldrh	r3, [r1, #12]
   1d8f4:	b082      	sub	sp, #8
   1d8f6:	0006      	movs	r6, r0
   1d8f8:	000c      	movs	r4, r1
   1d8fa:	079b      	lsls	r3, r3, #30
   1d8fc:	d507      	bpl.n	1d90e <__smakebuf_r+0x1e>
   1d8fe:	0023      	movs	r3, r4
   1d900:	3343      	adds	r3, #67	; 0x43
   1d902:	6023      	str	r3, [r4, #0]
   1d904:	6123      	str	r3, [r4, #16]
   1d906:	2301      	movs	r3, #1
   1d908:	6163      	str	r3, [r4, #20]
   1d90a:	b002      	add	sp, #8
   1d90c:	bd70      	pop	{r4, r5, r6, pc}
   1d90e:	ab01      	add	r3, sp, #4
   1d910:	466a      	mov	r2, sp
   1d912:	f7ff ffbd 	bl	1d890 <__swhatbuf_r>
   1d916:	9900      	ldr	r1, [sp, #0]
   1d918:	0005      	movs	r5, r0
   1d91a:	0030      	movs	r0, r6
   1d91c:	f7fb ff44 	bl	197a8 <_malloc_r>
   1d920:	2800      	cmp	r0, #0
   1d922:	d01e      	beq.n	1d962 <__smakebuf_r+0x72>
   1d924:	2280      	movs	r2, #128	; 0x80
   1d926:	4b15      	ldr	r3, [pc, #84]	; (1d97c <__smakebuf_r+0x8c>)
   1d928:	63f3      	str	r3, [r6, #60]	; 0x3c
   1d92a:	89a3      	ldrh	r3, [r4, #12]
   1d92c:	6020      	str	r0, [r4, #0]
   1d92e:	4313      	orrs	r3, r2
   1d930:	9a00      	ldr	r2, [sp, #0]
   1d932:	b21b      	sxth	r3, r3
   1d934:	6162      	str	r2, [r4, #20]
   1d936:	9a01      	ldr	r2, [sp, #4]
   1d938:	81a3      	strh	r3, [r4, #12]
   1d93a:	6120      	str	r0, [r4, #16]
   1d93c:	2a00      	cmp	r2, #0
   1d93e:	d102      	bne.n	1d946 <__smakebuf_r+0x56>
   1d940:	432b      	orrs	r3, r5
   1d942:	81a3      	strh	r3, [r4, #12]
   1d944:	e7e1      	b.n	1d90a <__smakebuf_r+0x1a>
   1d946:	230e      	movs	r3, #14
   1d948:	5ee1      	ldrsh	r1, [r4, r3]
   1d94a:	0030      	movs	r0, r6
   1d94c:	f000 ffb8 	bl	1e8c0 <_isatty_r>
   1d950:	2800      	cmp	r0, #0
   1d952:	d010      	beq.n	1d976 <__smakebuf_r+0x86>
   1d954:	2203      	movs	r2, #3
   1d956:	89a3      	ldrh	r3, [r4, #12]
   1d958:	4393      	bics	r3, r2
   1d95a:	2201      	movs	r2, #1
   1d95c:	4313      	orrs	r3, r2
   1d95e:	b21b      	sxth	r3, r3
   1d960:	e7ee      	b.n	1d940 <__smakebuf_r+0x50>
   1d962:	220c      	movs	r2, #12
   1d964:	5ea3      	ldrsh	r3, [r4, r2]
   1d966:	059a      	lsls	r2, r3, #22
   1d968:	d4cf      	bmi.n	1d90a <__smakebuf_r+0x1a>
   1d96a:	2203      	movs	r2, #3
   1d96c:	4393      	bics	r3, r2
   1d96e:	2202      	movs	r2, #2
   1d970:	4313      	orrs	r3, r2
   1d972:	81a3      	strh	r3, [r4, #12]
   1d974:	e7c3      	b.n	1d8fe <__smakebuf_r+0xe>
   1d976:	220c      	movs	r2, #12
   1d978:	5ea3      	ldrsh	r3, [r4, r2]
   1d97a:	e7e1      	b.n	1d940 <__smakebuf_r+0x50>
   1d97c:	0001d1a5 	.word	0x0001d1a5

0001d980 <memchr>:
   1d980:	b570      	push	{r4, r5, r6, lr}
   1d982:	b2cd      	uxtb	r5, r1
   1d984:	0783      	lsls	r3, r0, #30
   1d986:	d034      	beq.n	1d9f2 <memchr+0x72>
   1d988:	1e54      	subs	r4, r2, #1
   1d98a:	2a00      	cmp	r2, #0
   1d98c:	d01b      	beq.n	1d9c6 <memchr+0x46>
   1d98e:	7803      	ldrb	r3, [r0, #0]
   1d990:	42ab      	cmp	r3, r5
   1d992:	d019      	beq.n	1d9c8 <memchr+0x48>
   1d994:	2203      	movs	r2, #3
   1d996:	e004      	b.n	1d9a2 <memchr+0x22>
   1d998:	3c01      	subs	r4, #1
   1d99a:	d314      	bcc.n	1d9c6 <memchr+0x46>
   1d99c:	7803      	ldrb	r3, [r0, #0]
   1d99e:	42ab      	cmp	r3, r5
   1d9a0:	d012      	beq.n	1d9c8 <memchr+0x48>
   1d9a2:	3001      	adds	r0, #1
   1d9a4:	4210      	tst	r0, r2
   1d9a6:	d1f7      	bne.n	1d998 <memchr+0x18>
   1d9a8:	2c03      	cmp	r4, #3
   1d9aa:	d80e      	bhi.n	1d9ca <memchr+0x4a>
   1d9ac:	2c00      	cmp	r4, #0
   1d9ae:	d00a      	beq.n	1d9c6 <memchr+0x46>
   1d9b0:	7803      	ldrb	r3, [r0, #0]
   1d9b2:	42ab      	cmp	r3, r5
   1d9b4:	d008      	beq.n	1d9c8 <memchr+0x48>
   1d9b6:	1904      	adds	r4, r0, r4
   1d9b8:	e002      	b.n	1d9c0 <memchr+0x40>
   1d9ba:	7803      	ldrb	r3, [r0, #0]
   1d9bc:	42ab      	cmp	r3, r5
   1d9be:	d003      	beq.n	1d9c8 <memchr+0x48>
   1d9c0:	3001      	adds	r0, #1
   1d9c2:	4284      	cmp	r4, r0
   1d9c4:	d1f9      	bne.n	1d9ba <memchr+0x3a>
   1d9c6:	2000      	movs	r0, #0
   1d9c8:	bd70      	pop	{r4, r5, r6, pc}
   1d9ca:	22ff      	movs	r2, #255	; 0xff
   1d9cc:	060b      	lsls	r3, r1, #24
   1d9ce:	0c1b      	lsrs	r3, r3, #16
   1d9d0:	4011      	ands	r1, r2
   1d9d2:	4319      	orrs	r1, r3
   1d9d4:	040b      	lsls	r3, r1, #16
   1d9d6:	4e08      	ldr	r6, [pc, #32]	; (1d9f8 <memchr+0x78>)
   1d9d8:	4319      	orrs	r1, r3
   1d9da:	6803      	ldr	r3, [r0, #0]
   1d9dc:	4a07      	ldr	r2, [pc, #28]	; (1d9fc <memchr+0x7c>)
   1d9de:	404b      	eors	r3, r1
   1d9e0:	189a      	adds	r2, r3, r2
   1d9e2:	439a      	bics	r2, r3
   1d9e4:	4232      	tst	r2, r6
   1d9e6:	d1e3      	bne.n	1d9b0 <memchr+0x30>
   1d9e8:	3c04      	subs	r4, #4
   1d9ea:	3004      	adds	r0, #4
   1d9ec:	2c03      	cmp	r4, #3
   1d9ee:	d8f4      	bhi.n	1d9da <memchr+0x5a>
   1d9f0:	e7dc      	b.n	1d9ac <memchr+0x2c>
   1d9f2:	0014      	movs	r4, r2
   1d9f4:	e7d8      	b.n	1d9a8 <memchr+0x28>
   1d9f6:	46c0      	nop			; (mov r8, r8)
   1d9f8:	80808080 	.word	0x80808080
   1d9fc:	fefefeff 	.word	0xfefefeff

0001da00 <_Balloc>:
   1da00:	b570      	push	{r4, r5, r6, lr}
   1da02:	0004      	movs	r4, r0
   1da04:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
   1da06:	000d      	movs	r5, r1
   1da08:	2800      	cmp	r0, #0
   1da0a:	d00a      	beq.n	1da22 <_Balloc+0x22>
   1da0c:	00ab      	lsls	r3, r5, #2
   1da0e:	18c3      	adds	r3, r0, r3
   1da10:	6818      	ldr	r0, [r3, #0]
   1da12:	2800      	cmp	r0, #0
   1da14:	d00f      	beq.n	1da36 <_Balloc+0x36>
   1da16:	6802      	ldr	r2, [r0, #0]
   1da18:	601a      	str	r2, [r3, #0]
   1da1a:	2300      	movs	r3, #0
   1da1c:	6103      	str	r3, [r0, #16]
   1da1e:	60c3      	str	r3, [r0, #12]
   1da20:	bd70      	pop	{r4, r5, r6, pc}
   1da22:	2221      	movs	r2, #33	; 0x21
   1da24:	2104      	movs	r1, #4
   1da26:	0020      	movs	r0, r4
   1da28:	f000 fe18 	bl	1e65c <_calloc_r>
   1da2c:	64e0      	str	r0, [r4, #76]	; 0x4c
   1da2e:	2800      	cmp	r0, #0
   1da30:	d1ec      	bne.n	1da0c <_Balloc+0xc>
   1da32:	2000      	movs	r0, #0
   1da34:	e7f4      	b.n	1da20 <_Balloc+0x20>
   1da36:	2601      	movs	r6, #1
   1da38:	40ae      	lsls	r6, r5
   1da3a:	1d72      	adds	r2, r6, #5
   1da3c:	0092      	lsls	r2, r2, #2
   1da3e:	2101      	movs	r1, #1
   1da40:	0020      	movs	r0, r4
   1da42:	f000 fe0b 	bl	1e65c <_calloc_r>
   1da46:	2800      	cmp	r0, #0
   1da48:	d0f3      	beq.n	1da32 <_Balloc+0x32>
   1da4a:	6045      	str	r5, [r0, #4]
   1da4c:	6086      	str	r6, [r0, #8]
   1da4e:	e7e4      	b.n	1da1a <_Balloc+0x1a>

0001da50 <_Bfree>:
   1da50:	2900      	cmp	r1, #0
   1da52:	d006      	beq.n	1da62 <_Bfree+0x12>
   1da54:	684b      	ldr	r3, [r1, #4]
   1da56:	009a      	lsls	r2, r3, #2
   1da58:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   1da5a:	189b      	adds	r3, r3, r2
   1da5c:	681a      	ldr	r2, [r3, #0]
   1da5e:	600a      	str	r2, [r1, #0]
   1da60:	6019      	str	r1, [r3, #0]
   1da62:	4770      	bx	lr

0001da64 <__multadd>:
   1da64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1da66:	46ce      	mov	lr, r9
   1da68:	4647      	mov	r7, r8
   1da6a:	4681      	mov	r9, r0
   1da6c:	0008      	movs	r0, r1
   1da6e:	b580      	push	{r7, lr}
   1da70:	000d      	movs	r5, r1
   1da72:	690c      	ldr	r4, [r1, #16]
   1da74:	001f      	movs	r7, r3
   1da76:	2100      	movs	r1, #0
   1da78:	3014      	adds	r0, #20
   1da7a:	6803      	ldr	r3, [r0, #0]
   1da7c:	3101      	adds	r1, #1
   1da7e:	041e      	lsls	r6, r3, #16
   1da80:	0c36      	lsrs	r6, r6, #16
   1da82:	4356      	muls	r6, r2
   1da84:	0c1b      	lsrs	r3, r3, #16
   1da86:	4353      	muls	r3, r2
   1da88:	19f6      	adds	r6, r6, r7
   1da8a:	0c37      	lsrs	r7, r6, #16
   1da8c:	19db      	adds	r3, r3, r7
   1da8e:	0436      	lsls	r6, r6, #16
   1da90:	0c1f      	lsrs	r7, r3, #16
   1da92:	0c36      	lsrs	r6, r6, #16
   1da94:	041b      	lsls	r3, r3, #16
   1da96:	199b      	adds	r3, r3, r6
   1da98:	c008      	stmia	r0!, {r3}
   1da9a:	428c      	cmp	r4, r1
   1da9c:	dced      	bgt.n	1da7a <__multadd+0x16>
   1da9e:	2f00      	cmp	r7, #0
   1daa0:	d008      	beq.n	1dab4 <__multadd+0x50>
   1daa2:	68ab      	ldr	r3, [r5, #8]
   1daa4:	429c      	cmp	r4, r3
   1daa6:	da0a      	bge.n	1dabe <__multadd+0x5a>
   1daa8:	1d23      	adds	r3, r4, #4
   1daaa:	009b      	lsls	r3, r3, #2
   1daac:	18eb      	adds	r3, r5, r3
   1daae:	3401      	adds	r4, #1
   1dab0:	605f      	str	r7, [r3, #4]
   1dab2:	612c      	str	r4, [r5, #16]
   1dab4:	0028      	movs	r0, r5
   1dab6:	bc0c      	pop	{r2, r3}
   1dab8:	4690      	mov	r8, r2
   1daba:	4699      	mov	r9, r3
   1dabc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1dabe:	686b      	ldr	r3, [r5, #4]
   1dac0:	4648      	mov	r0, r9
   1dac2:	1c59      	adds	r1, r3, #1
   1dac4:	f7ff ff9c 	bl	1da00 <_Balloc>
   1dac8:	0029      	movs	r1, r5
   1daca:	692b      	ldr	r3, [r5, #16]
   1dacc:	4680      	mov	r8, r0
   1dace:	1c9a      	adds	r2, r3, #2
   1dad0:	0092      	lsls	r2, r2, #2
   1dad2:	310c      	adds	r1, #12
   1dad4:	300c      	adds	r0, #12
   1dad6:	f7fc f957 	bl	19d88 <memcpy>
   1dada:	686b      	ldr	r3, [r5, #4]
   1dadc:	009a      	lsls	r2, r3, #2
   1dade:	464b      	mov	r3, r9
   1dae0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   1dae2:	189b      	adds	r3, r3, r2
   1dae4:	681a      	ldr	r2, [r3, #0]
   1dae6:	602a      	str	r2, [r5, #0]
   1dae8:	601d      	str	r5, [r3, #0]
   1daea:	4645      	mov	r5, r8
   1daec:	e7dc      	b.n	1daa8 <__multadd+0x44>
   1daee:	46c0      	nop			; (mov r8, r8)

0001daf0 <__hi0bits>:
   1daf0:	0003      	movs	r3, r0
   1daf2:	0c02      	lsrs	r2, r0, #16
   1daf4:	2000      	movs	r0, #0
   1daf6:	2a00      	cmp	r2, #0
   1daf8:	d101      	bne.n	1dafe <__hi0bits+0xe>
   1dafa:	041b      	lsls	r3, r3, #16
   1dafc:	3010      	adds	r0, #16
   1dafe:	0e1a      	lsrs	r2, r3, #24
   1db00:	d101      	bne.n	1db06 <__hi0bits+0x16>
   1db02:	3008      	adds	r0, #8
   1db04:	021b      	lsls	r3, r3, #8
   1db06:	0f1a      	lsrs	r2, r3, #28
   1db08:	d101      	bne.n	1db0e <__hi0bits+0x1e>
   1db0a:	3004      	adds	r0, #4
   1db0c:	011b      	lsls	r3, r3, #4
   1db0e:	0f9a      	lsrs	r2, r3, #30
   1db10:	d101      	bne.n	1db16 <__hi0bits+0x26>
   1db12:	3002      	adds	r0, #2
   1db14:	009b      	lsls	r3, r3, #2
   1db16:	2b00      	cmp	r3, #0
   1db18:	db03      	blt.n	1db22 <__hi0bits+0x32>
   1db1a:	3001      	adds	r0, #1
   1db1c:	005b      	lsls	r3, r3, #1
   1db1e:	d400      	bmi.n	1db22 <__hi0bits+0x32>
   1db20:	2020      	movs	r0, #32
   1db22:	4770      	bx	lr

0001db24 <__lo0bits>:
   1db24:	6803      	ldr	r3, [r0, #0]
   1db26:	075a      	lsls	r2, r3, #29
   1db28:	d009      	beq.n	1db3e <__lo0bits+0x1a>
   1db2a:	2200      	movs	r2, #0
   1db2c:	07d9      	lsls	r1, r3, #31
   1db2e:	d404      	bmi.n	1db3a <__lo0bits+0x16>
   1db30:	079a      	lsls	r2, r3, #30
   1db32:	d420      	bmi.n	1db76 <__lo0bits+0x52>
   1db34:	2202      	movs	r2, #2
   1db36:	089b      	lsrs	r3, r3, #2
   1db38:	6003      	str	r3, [r0, #0]
   1db3a:	0010      	movs	r0, r2
   1db3c:	4770      	bx	lr
   1db3e:	0419      	lsls	r1, r3, #16
   1db40:	2200      	movs	r2, #0
   1db42:	2900      	cmp	r1, #0
   1db44:	d101      	bne.n	1db4a <__lo0bits+0x26>
   1db46:	0c1b      	lsrs	r3, r3, #16
   1db48:	3210      	adds	r2, #16
   1db4a:	21ff      	movs	r1, #255	; 0xff
   1db4c:	4219      	tst	r1, r3
   1db4e:	d101      	bne.n	1db54 <__lo0bits+0x30>
   1db50:	3208      	adds	r2, #8
   1db52:	0a1b      	lsrs	r3, r3, #8
   1db54:	0719      	lsls	r1, r3, #28
   1db56:	d101      	bne.n	1db5c <__lo0bits+0x38>
   1db58:	3204      	adds	r2, #4
   1db5a:	091b      	lsrs	r3, r3, #4
   1db5c:	0799      	lsls	r1, r3, #30
   1db5e:	d101      	bne.n	1db64 <__lo0bits+0x40>
   1db60:	3202      	adds	r2, #2
   1db62:	089b      	lsrs	r3, r3, #2
   1db64:	07d9      	lsls	r1, r3, #31
   1db66:	d404      	bmi.n	1db72 <__lo0bits+0x4e>
   1db68:	085b      	lsrs	r3, r3, #1
   1db6a:	d101      	bne.n	1db70 <__lo0bits+0x4c>
   1db6c:	2220      	movs	r2, #32
   1db6e:	e7e4      	b.n	1db3a <__lo0bits+0x16>
   1db70:	3201      	adds	r2, #1
   1db72:	6003      	str	r3, [r0, #0]
   1db74:	e7e1      	b.n	1db3a <__lo0bits+0x16>
   1db76:	085b      	lsrs	r3, r3, #1
   1db78:	6003      	str	r3, [r0, #0]
   1db7a:	2201      	movs	r2, #1
   1db7c:	e7dd      	b.n	1db3a <__lo0bits+0x16>
   1db7e:	46c0      	nop			; (mov r8, r8)

0001db80 <__i2b>:
   1db80:	b510      	push	{r4, lr}
   1db82:	000c      	movs	r4, r1
   1db84:	2101      	movs	r1, #1
   1db86:	f7ff ff3b 	bl	1da00 <_Balloc>
   1db8a:	2301      	movs	r3, #1
   1db8c:	6144      	str	r4, [r0, #20]
   1db8e:	6103      	str	r3, [r0, #16]
   1db90:	bd10      	pop	{r4, pc}
   1db92:	46c0      	nop			; (mov r8, r8)

0001db94 <__multiply>:
   1db94:	b5f0      	push	{r4, r5, r6, r7, lr}
   1db96:	4657      	mov	r7, sl
   1db98:	464e      	mov	r6, r9
   1db9a:	4645      	mov	r5, r8
   1db9c:	46de      	mov	lr, fp
   1db9e:	b5e0      	push	{r5, r6, r7, lr}
   1dba0:	6914      	ldr	r4, [r2, #16]
   1dba2:	690e      	ldr	r6, [r1, #16]
   1dba4:	b085      	sub	sp, #20
   1dba6:	000f      	movs	r7, r1
   1dba8:	0015      	movs	r5, r2
   1dbaa:	42a6      	cmp	r6, r4
   1dbac:	da04      	bge.n	1dbb8 <__multiply+0x24>
   1dbae:	0033      	movs	r3, r6
   1dbb0:	0017      	movs	r7, r2
   1dbb2:	0026      	movs	r6, r4
   1dbb4:	000d      	movs	r5, r1
   1dbb6:	001c      	movs	r4, r3
   1dbb8:	1933      	adds	r3, r6, r4
   1dbba:	4698      	mov	r8, r3
   1dbbc:	68bb      	ldr	r3, [r7, #8]
   1dbbe:	6879      	ldr	r1, [r7, #4]
   1dbc0:	4598      	cmp	r8, r3
   1dbc2:	dd00      	ble.n	1dbc6 <__multiply+0x32>
   1dbc4:	3101      	adds	r1, #1
   1dbc6:	f7ff ff1b 	bl	1da00 <_Balloc>
   1dbca:	2214      	movs	r2, #20
   1dbcc:	0003      	movs	r3, r0
   1dbce:	4694      	mov	ip, r2
   1dbd0:	4463      	add	r3, ip
   1dbd2:	469b      	mov	fp, r3
   1dbd4:	4643      	mov	r3, r8
   1dbd6:	009b      	lsls	r3, r3, #2
   1dbd8:	445b      	add	r3, fp
   1dbda:	0019      	movs	r1, r3
   1dbdc:	9302      	str	r3, [sp, #8]
   1dbde:	9003      	str	r0, [sp, #12]
   1dbe0:	465b      	mov	r3, fp
   1dbe2:	2200      	movs	r2, #0
   1dbe4:	458b      	cmp	fp, r1
   1dbe6:	d203      	bcs.n	1dbf0 <__multiply+0x5c>
   1dbe8:	9902      	ldr	r1, [sp, #8]
   1dbea:	c304      	stmia	r3!, {r2}
   1dbec:	4299      	cmp	r1, r3
   1dbee:	d8fc      	bhi.n	1dbea <__multiply+0x56>
   1dbf0:	2314      	movs	r3, #20
   1dbf2:	00a4      	lsls	r4, r4, #2
   1dbf4:	469a      	mov	sl, r3
   1dbf6:	3714      	adds	r7, #20
   1dbf8:	0023      	movs	r3, r4
   1dbfa:	46bc      	mov	ip, r7
   1dbfc:	44aa      	add	sl, r5
   1dbfe:	00b6      	lsls	r6, r6, #2
   1dc00:	4453      	add	r3, sl
   1dc02:	9700      	str	r7, [sp, #0]
   1dc04:	44b4      	add	ip, r6
   1dc06:	9301      	str	r3, [sp, #4]
   1dc08:	459a      	cmp	sl, r3
   1dc0a:	d24f      	bcs.n	1dcac <__multiply+0x118>
   1dc0c:	4653      	mov	r3, sl
   1dc0e:	681b      	ldr	r3, [r3, #0]
   1dc10:	041e      	lsls	r6, r3, #16
   1dc12:	0c36      	lsrs	r6, r6, #16
   1dc14:	d020      	beq.n	1dc58 <__multiply+0xc4>
   1dc16:	465c      	mov	r4, fp
   1dc18:	2700      	movs	r7, #0
   1dc1a:	9d00      	ldr	r5, [sp, #0]
   1dc1c:	0021      	movs	r1, r4
   1dc1e:	cc08      	ldmia	r4!, {r3}
   1dc20:	cd04      	ldmia	r5!, {r2}
   1dc22:	4699      	mov	r9, r3
   1dc24:	4648      	mov	r0, r9
   1dc26:	0413      	lsls	r3, r2, #16
   1dc28:	0c1b      	lsrs	r3, r3, #16
   1dc2a:	4373      	muls	r3, r6
   1dc2c:	0400      	lsls	r0, r0, #16
   1dc2e:	0c00      	lsrs	r0, r0, #16
   1dc30:	181b      	adds	r3, r3, r0
   1dc32:	19d8      	adds	r0, r3, r7
   1dc34:	0c13      	lsrs	r3, r2, #16
   1dc36:	464a      	mov	r2, r9
   1dc38:	4373      	muls	r3, r6
   1dc3a:	0c12      	lsrs	r2, r2, #16
   1dc3c:	189b      	adds	r3, r3, r2
   1dc3e:	0c02      	lsrs	r2, r0, #16
   1dc40:	189b      	adds	r3, r3, r2
   1dc42:	0402      	lsls	r2, r0, #16
   1dc44:	0c1f      	lsrs	r7, r3, #16
   1dc46:	0c12      	lsrs	r2, r2, #16
   1dc48:	041b      	lsls	r3, r3, #16
   1dc4a:	4313      	orrs	r3, r2
   1dc4c:	600b      	str	r3, [r1, #0]
   1dc4e:	45ac      	cmp	ip, r5
   1dc50:	d8e4      	bhi.n	1dc1c <__multiply+0x88>
   1dc52:	4653      	mov	r3, sl
   1dc54:	6027      	str	r7, [r4, #0]
   1dc56:	681b      	ldr	r3, [r3, #0]
   1dc58:	0c1e      	lsrs	r6, r3, #16
   1dc5a:	d020      	beq.n	1dc9e <__multiply+0x10a>
   1dc5c:	465b      	mov	r3, fp
   1dc5e:	2100      	movs	r1, #0
   1dc60:	681b      	ldr	r3, [r3, #0]
   1dc62:	465c      	mov	r4, fp
   1dc64:	0018      	movs	r0, r3
   1dc66:	000f      	movs	r7, r1
   1dc68:	4662      	mov	r2, ip
   1dc6a:	9d00      	ldr	r5, [sp, #0]
   1dc6c:	8829      	ldrh	r1, [r5, #0]
   1dc6e:	0c00      	lsrs	r0, r0, #16
   1dc70:	4371      	muls	r1, r6
   1dc72:	1809      	adds	r1, r1, r0
   1dc74:	19c9      	adds	r1, r1, r7
   1dc76:	041b      	lsls	r3, r3, #16
   1dc78:	0408      	lsls	r0, r1, #16
   1dc7a:	0c1b      	lsrs	r3, r3, #16
   1dc7c:	4303      	orrs	r3, r0
   1dc7e:	6023      	str	r3, [r4, #0]
   1dc80:	cd08      	ldmia	r5!, {r3}
   1dc82:	6860      	ldr	r0, [r4, #4]
   1dc84:	0c1b      	lsrs	r3, r3, #16
   1dc86:	4373      	muls	r3, r6
   1dc88:	0407      	lsls	r7, r0, #16
   1dc8a:	0c3f      	lsrs	r7, r7, #16
   1dc8c:	19db      	adds	r3, r3, r7
   1dc8e:	0c09      	lsrs	r1, r1, #16
   1dc90:	185b      	adds	r3, r3, r1
   1dc92:	0c1f      	lsrs	r7, r3, #16
   1dc94:	3404      	adds	r4, #4
   1dc96:	42aa      	cmp	r2, r5
   1dc98:	d8e8      	bhi.n	1dc6c <__multiply+0xd8>
   1dc9a:	4694      	mov	ip, r2
   1dc9c:	6023      	str	r3, [r4, #0]
   1dc9e:	2304      	movs	r3, #4
   1dca0:	4699      	mov	r9, r3
   1dca2:	9b01      	ldr	r3, [sp, #4]
   1dca4:	44ca      	add	sl, r9
   1dca6:	44cb      	add	fp, r9
   1dca8:	4553      	cmp	r3, sl
   1dcaa:	d8af      	bhi.n	1dc0c <__multiply+0x78>
   1dcac:	4643      	mov	r3, r8
   1dcae:	2b00      	cmp	r3, #0
   1dcb0:	dd0e      	ble.n	1dcd0 <__multiply+0x13c>
   1dcb2:	9b02      	ldr	r3, [sp, #8]
   1dcb4:	3b04      	subs	r3, #4
   1dcb6:	681a      	ldr	r2, [r3, #0]
   1dcb8:	2a00      	cmp	r2, #0
   1dcba:	d109      	bne.n	1dcd0 <__multiply+0x13c>
   1dcbc:	4642      	mov	r2, r8
   1dcbe:	e003      	b.n	1dcc8 <__multiply+0x134>
   1dcc0:	3b04      	subs	r3, #4
   1dcc2:	6819      	ldr	r1, [r3, #0]
   1dcc4:	2900      	cmp	r1, #0
   1dcc6:	d102      	bne.n	1dcce <__multiply+0x13a>
   1dcc8:	3a01      	subs	r2, #1
   1dcca:	2a00      	cmp	r2, #0
   1dccc:	d1f8      	bne.n	1dcc0 <__multiply+0x12c>
   1dcce:	4690      	mov	r8, r2
   1dcd0:	9b03      	ldr	r3, [sp, #12]
   1dcd2:	4642      	mov	r2, r8
   1dcd4:	0018      	movs	r0, r3
   1dcd6:	611a      	str	r2, [r3, #16]
   1dcd8:	b005      	add	sp, #20
   1dcda:	bc3c      	pop	{r2, r3, r4, r5}
   1dcdc:	4690      	mov	r8, r2
   1dcde:	4699      	mov	r9, r3
   1dce0:	46a2      	mov	sl, r4
   1dce2:	46ab      	mov	fp, r5
   1dce4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1dce6:	46c0      	nop			; (mov r8, r8)

0001dce8 <__pow5mult>:
   1dce8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1dcea:	4647      	mov	r7, r8
   1dcec:	46ce      	mov	lr, r9
   1dcee:	2303      	movs	r3, #3
   1dcf0:	b580      	push	{r7, lr}
   1dcf2:	4680      	mov	r8, r0
   1dcf4:	000f      	movs	r7, r1
   1dcf6:	0014      	movs	r4, r2
   1dcf8:	4013      	ands	r3, r2
   1dcfa:	d13a      	bne.n	1dd72 <__pow5mult+0x8a>
   1dcfc:	10a4      	asrs	r4, r4, #2
   1dcfe:	003e      	movs	r6, r7
   1dd00:	2c00      	cmp	r4, #0
   1dd02:	d025      	beq.n	1dd50 <__pow5mult+0x68>
   1dd04:	4643      	mov	r3, r8
   1dd06:	6c9d      	ldr	r5, [r3, #72]	; 0x48
   1dd08:	2d00      	cmp	r5, #0
   1dd0a:	d03b      	beq.n	1dd84 <__pow5mult+0x9c>
   1dd0c:	003e      	movs	r6, r7
   1dd0e:	2300      	movs	r3, #0
   1dd10:	2701      	movs	r7, #1
   1dd12:	4699      	mov	r9, r3
   1dd14:	4227      	tst	r7, r4
   1dd16:	d107      	bne.n	1dd28 <__pow5mult+0x40>
   1dd18:	1064      	asrs	r4, r4, #1
   1dd1a:	d019      	beq.n	1dd50 <__pow5mult+0x68>
   1dd1c:	6828      	ldr	r0, [r5, #0]
   1dd1e:	2800      	cmp	r0, #0
   1dd20:	d01b      	beq.n	1dd5a <__pow5mult+0x72>
   1dd22:	0005      	movs	r5, r0
   1dd24:	4227      	tst	r7, r4
   1dd26:	d0f7      	beq.n	1dd18 <__pow5mult+0x30>
   1dd28:	002a      	movs	r2, r5
   1dd2a:	0031      	movs	r1, r6
   1dd2c:	4640      	mov	r0, r8
   1dd2e:	f7ff ff31 	bl	1db94 <__multiply>
   1dd32:	2e00      	cmp	r6, #0
   1dd34:	d01b      	beq.n	1dd6e <__pow5mult+0x86>
   1dd36:	4642      	mov	r2, r8
   1dd38:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
   1dd3a:	6873      	ldr	r3, [r6, #4]
   1dd3c:	4694      	mov	ip, r2
   1dd3e:	009b      	lsls	r3, r3, #2
   1dd40:	4463      	add	r3, ip
   1dd42:	681a      	ldr	r2, [r3, #0]
   1dd44:	1064      	asrs	r4, r4, #1
   1dd46:	6032      	str	r2, [r6, #0]
   1dd48:	601e      	str	r6, [r3, #0]
   1dd4a:	0006      	movs	r6, r0
   1dd4c:	2c00      	cmp	r4, #0
   1dd4e:	d1e5      	bne.n	1dd1c <__pow5mult+0x34>
   1dd50:	0030      	movs	r0, r6
   1dd52:	bc0c      	pop	{r2, r3}
   1dd54:	4690      	mov	r8, r2
   1dd56:	4699      	mov	r9, r3
   1dd58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1dd5a:	002a      	movs	r2, r5
   1dd5c:	0029      	movs	r1, r5
   1dd5e:	4640      	mov	r0, r8
   1dd60:	f7ff ff18 	bl	1db94 <__multiply>
   1dd64:	464b      	mov	r3, r9
   1dd66:	6028      	str	r0, [r5, #0]
   1dd68:	6003      	str	r3, [r0, #0]
   1dd6a:	0005      	movs	r5, r0
   1dd6c:	e7da      	b.n	1dd24 <__pow5mult+0x3c>
   1dd6e:	0006      	movs	r6, r0
   1dd70:	e7d2      	b.n	1dd18 <__pow5mult+0x30>
   1dd72:	4a0b      	ldr	r2, [pc, #44]	; (1dda0 <__pow5mult+0xb8>)
   1dd74:	3b01      	subs	r3, #1
   1dd76:	009b      	lsls	r3, r3, #2
   1dd78:	589a      	ldr	r2, [r3, r2]
   1dd7a:	2300      	movs	r3, #0
   1dd7c:	f7ff fe72 	bl	1da64 <__multadd>
   1dd80:	0007      	movs	r7, r0
   1dd82:	e7bb      	b.n	1dcfc <__pow5mult+0x14>
   1dd84:	2101      	movs	r1, #1
   1dd86:	4640      	mov	r0, r8
   1dd88:	f7ff fe3a 	bl	1da00 <_Balloc>
   1dd8c:	4b05      	ldr	r3, [pc, #20]	; (1dda4 <__pow5mult+0xbc>)
   1dd8e:	0005      	movs	r5, r0
   1dd90:	6143      	str	r3, [r0, #20]
   1dd92:	2301      	movs	r3, #1
   1dd94:	6103      	str	r3, [r0, #16]
   1dd96:	4643      	mov	r3, r8
   1dd98:	6498      	str	r0, [r3, #72]	; 0x48
   1dd9a:	2300      	movs	r3, #0
   1dd9c:	6003      	str	r3, [r0, #0]
   1dd9e:	e7b5      	b.n	1dd0c <__pow5mult+0x24>
   1dda0:	00020968 	.word	0x00020968
   1dda4:	00000271 	.word	0x00000271

0001dda8 <__lshift>:
   1dda8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1ddaa:	464e      	mov	r6, r9
   1ddac:	4645      	mov	r5, r8
   1ddae:	46de      	mov	lr, fp
   1ddb0:	4657      	mov	r7, sl
   1ddb2:	b5e0      	push	{r5, r6, r7, lr}
   1ddb4:	000e      	movs	r6, r1
   1ddb6:	6933      	ldr	r3, [r6, #16]
   1ddb8:	1154      	asrs	r4, r2, #5
   1ddba:	4698      	mov	r8, r3
   1ddbc:	44a0      	add	r8, r4
   1ddbe:	4643      	mov	r3, r8
   1ddc0:	1c5d      	adds	r5, r3, #1
   1ddc2:	68b3      	ldr	r3, [r6, #8]
   1ddc4:	4683      	mov	fp, r0
   1ddc6:	4691      	mov	r9, r2
   1ddc8:	6849      	ldr	r1, [r1, #4]
   1ddca:	429d      	cmp	r5, r3
   1ddcc:	dd03      	ble.n	1ddd6 <__lshift+0x2e>
   1ddce:	3101      	adds	r1, #1
   1ddd0:	005b      	lsls	r3, r3, #1
   1ddd2:	429d      	cmp	r5, r3
   1ddd4:	dcfb      	bgt.n	1ddce <__lshift+0x26>
   1ddd6:	4658      	mov	r0, fp
   1ddd8:	f7ff fe12 	bl	1da00 <_Balloc>
   1dddc:	0003      	movs	r3, r0
   1ddde:	4684      	mov	ip, r0
   1dde0:	3314      	adds	r3, #20
   1dde2:	2c00      	cmp	r4, #0
   1dde4:	dd06      	ble.n	1ddf4 <__lshift+0x4c>
   1dde6:	2100      	movs	r1, #0
   1dde8:	00a4      	lsls	r4, r4, #2
   1ddea:	001a      	movs	r2, r3
   1ddec:	191b      	adds	r3, r3, r4
   1ddee:	c202      	stmia	r2!, {r1}
   1ddf0:	4293      	cmp	r3, r2
   1ddf2:	d1fc      	bne.n	1ddee <__lshift+0x46>
   1ddf4:	6932      	ldr	r2, [r6, #16]
   1ddf6:	4648      	mov	r0, r9
   1ddf8:	0097      	lsls	r7, r2, #2
   1ddfa:	0031      	movs	r1, r6
   1ddfc:	221f      	movs	r2, #31
   1ddfe:	3114      	adds	r1, #20
   1de00:	4010      	ands	r0, r2
   1de02:	19cf      	adds	r7, r1, r7
   1de04:	4681      	mov	r9, r0
   1de06:	2800      	cmp	r0, #0
   1de08:	d025      	beq.n	1de56 <__lshift+0xae>
   1de0a:	2220      	movs	r2, #32
   1de0c:	1a12      	subs	r2, r2, r0
   1de0e:	4692      	mov	sl, r2
   1de10:	2200      	movs	r2, #0
   1de12:	4648      	mov	r0, r9
   1de14:	680c      	ldr	r4, [r1, #0]
   1de16:	4084      	lsls	r4, r0
   1de18:	4650      	mov	r0, sl
   1de1a:	4314      	orrs	r4, r2
   1de1c:	601c      	str	r4, [r3, #0]
   1de1e:	c904      	ldmia	r1!, {r2}
   1de20:	3304      	adds	r3, #4
   1de22:	40c2      	lsrs	r2, r0
   1de24:	428f      	cmp	r7, r1
   1de26:	d8f4      	bhi.n	1de12 <__lshift+0x6a>
   1de28:	601a      	str	r2, [r3, #0]
   1de2a:	2a00      	cmp	r2, #0
   1de2c:	d001      	beq.n	1de32 <__lshift+0x8a>
   1de2e:	4645      	mov	r5, r8
   1de30:	3502      	adds	r5, #2
   1de32:	4663      	mov	r3, ip
   1de34:	3d01      	subs	r5, #1
   1de36:	611d      	str	r5, [r3, #16]
   1de38:	6873      	ldr	r3, [r6, #4]
   1de3a:	4660      	mov	r0, ip
   1de3c:	009a      	lsls	r2, r3, #2
   1de3e:	465b      	mov	r3, fp
   1de40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   1de42:	189b      	adds	r3, r3, r2
   1de44:	681a      	ldr	r2, [r3, #0]
   1de46:	6032      	str	r2, [r6, #0]
   1de48:	601e      	str	r6, [r3, #0]
   1de4a:	bc3c      	pop	{r2, r3, r4, r5}
   1de4c:	4690      	mov	r8, r2
   1de4e:	4699      	mov	r9, r3
   1de50:	46a2      	mov	sl, r4
   1de52:	46ab      	mov	fp, r5
   1de54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1de56:	c904      	ldmia	r1!, {r2}
   1de58:	c304      	stmia	r3!, {r2}
   1de5a:	428f      	cmp	r7, r1
   1de5c:	d9e9      	bls.n	1de32 <__lshift+0x8a>
   1de5e:	c904      	ldmia	r1!, {r2}
   1de60:	c304      	stmia	r3!, {r2}
   1de62:	428f      	cmp	r7, r1
   1de64:	d8f7      	bhi.n	1de56 <__lshift+0xae>
   1de66:	e7e4      	b.n	1de32 <__lshift+0x8a>

0001de68 <__mcmp>:
   1de68:	690a      	ldr	r2, [r1, #16]
   1de6a:	6903      	ldr	r3, [r0, #16]
   1de6c:	b530      	push	{r4, r5, lr}
   1de6e:	0005      	movs	r5, r0
   1de70:	1a98      	subs	r0, r3, r2
   1de72:	d111      	bne.n	1de98 <__mcmp+0x30>
   1de74:	0092      	lsls	r2, r2, #2
   1de76:	3514      	adds	r5, #20
   1de78:	3114      	adds	r1, #20
   1de7a:	18ab      	adds	r3, r5, r2
   1de7c:	1889      	adds	r1, r1, r2
   1de7e:	e001      	b.n	1de84 <__mcmp+0x1c>
   1de80:	429d      	cmp	r5, r3
   1de82:	d209      	bcs.n	1de98 <__mcmp+0x30>
   1de84:	3b04      	subs	r3, #4
   1de86:	3904      	subs	r1, #4
   1de88:	681c      	ldr	r4, [r3, #0]
   1de8a:	680a      	ldr	r2, [r1, #0]
   1de8c:	4294      	cmp	r4, r2
   1de8e:	d0f7      	beq.n	1de80 <__mcmp+0x18>
   1de90:	4294      	cmp	r4, r2
   1de92:	4180      	sbcs	r0, r0
   1de94:	2201      	movs	r2, #1
   1de96:	4310      	orrs	r0, r2
   1de98:	bd30      	pop	{r4, r5, pc}
   1de9a:	46c0      	nop			; (mov r8, r8)

0001de9c <__mdiff>:
   1de9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1de9e:	4645      	mov	r5, r8
   1dea0:	46de      	mov	lr, fp
   1dea2:	4657      	mov	r7, sl
   1dea4:	464e      	mov	r6, r9
   1dea6:	0014      	movs	r4, r2
   1dea8:	690b      	ldr	r3, [r1, #16]
   1deaa:	6912      	ldr	r2, [r2, #16]
   1deac:	b5e0      	push	{r5, r6, r7, lr}
   1deae:	4688      	mov	r8, r1
   1deb0:	1a9d      	subs	r5, r3, r2
   1deb2:	d11a      	bne.n	1deea <__mdiff+0x4e>
   1deb4:	000f      	movs	r7, r1
   1deb6:	2114      	movs	r1, #20
   1deb8:	468c      	mov	ip, r1
   1deba:	0092      	lsls	r2, r2, #2
   1debc:	3714      	adds	r7, #20
   1debe:	44a4      	add	ip, r4
   1dec0:	18bb      	adds	r3, r7, r2
   1dec2:	4462      	add	r2, ip
   1dec4:	e002      	b.n	1decc <__mdiff+0x30>
   1dec6:	429f      	cmp	r7, r3
   1dec8:	d300      	bcc.n	1decc <__mdiff+0x30>
   1deca:	e070      	b.n	1dfae <__mdiff+0x112>
   1decc:	3b04      	subs	r3, #4
   1dece:	3a04      	subs	r2, #4
   1ded0:	681e      	ldr	r6, [r3, #0]
   1ded2:	6811      	ldr	r1, [r2, #0]
   1ded4:	428e      	cmp	r6, r1
   1ded6:	d0f6      	beq.n	1dec6 <__mdiff+0x2a>
   1ded8:	d300      	bcc.n	1dedc <__mdiff+0x40>
   1deda:	e071      	b.n	1dfc0 <__mdiff+0x124>
   1dedc:	4643      	mov	r3, r8
   1dede:	003e      	movs	r6, r7
   1dee0:	46a0      	mov	r8, r4
   1dee2:	4667      	mov	r7, ip
   1dee4:	001c      	movs	r4, r3
   1dee6:	2501      	movs	r5, #1
   1dee8:	e006      	b.n	1def8 <__mdiff+0x5c>
   1deea:	2d00      	cmp	r5, #0
   1deec:	db6a      	blt.n	1dfc4 <__mdiff+0x128>
   1deee:	4647      	mov	r7, r8
   1def0:	0026      	movs	r6, r4
   1def2:	2500      	movs	r5, #0
   1def4:	3714      	adds	r7, #20
   1def6:	3614      	adds	r6, #20
   1def8:	4643      	mov	r3, r8
   1defa:	6859      	ldr	r1, [r3, #4]
   1defc:	f7ff fd80 	bl	1da00 <_Balloc>
   1df00:	4643      	mov	r3, r8
   1df02:	4681      	mov	r9, r0
   1df04:	60c5      	str	r5, [r0, #12]
   1df06:	6918      	ldr	r0, [r3, #16]
   1df08:	464d      	mov	r5, r9
   1df0a:	0083      	lsls	r3, r0, #2
   1df0c:	469c      	mov	ip, r3
   1df0e:	6923      	ldr	r3, [r4, #16]
   1df10:	44bc      	add	ip, r7
   1df12:	009b      	lsls	r3, r3, #2
   1df14:	4698      	mov	r8, r3
   1df16:	2300      	movs	r3, #0
   1df18:	44b0      	add	r8, r6
   1df1a:	3514      	adds	r5, #20
   1df1c:	469a      	mov	sl, r3
   1df1e:	e000      	b.n	1df22 <__mdiff+0x86>
   1df20:	0027      	movs	r7, r4
   1df22:	ce04      	ldmia	r6!, {r2}
   1df24:	003c      	movs	r4, r7
   1df26:	4693      	mov	fp, r2
   1df28:	4659      	mov	r1, fp
   1df2a:	cc08      	ldmia	r4!, {r3}
   1df2c:	0409      	lsls	r1, r1, #16
   1df2e:	041a      	lsls	r2, r3, #16
   1df30:	0c12      	lsrs	r2, r2, #16
   1df32:	4452      	add	r2, sl
   1df34:	0c09      	lsrs	r1, r1, #16
   1df36:	1a52      	subs	r2, r2, r1
   1df38:	0c19      	lsrs	r1, r3, #16
   1df3a:	465b      	mov	r3, fp
   1df3c:	0c1b      	lsrs	r3, r3, #16
   1df3e:	1acb      	subs	r3, r1, r3
   1df40:	1411      	asrs	r1, r2, #16
   1df42:	185b      	adds	r3, r3, r1
   1df44:	0412      	lsls	r2, r2, #16
   1df46:	1419      	asrs	r1, r3, #16
   1df48:	0c12      	lsrs	r2, r2, #16
   1df4a:	041b      	lsls	r3, r3, #16
   1df4c:	468a      	mov	sl, r1
   1df4e:	4313      	orrs	r3, r2
   1df50:	1d29      	adds	r1, r5, #4
   1df52:	602b      	str	r3, [r5, #0]
   1df54:	000d      	movs	r5, r1
   1df56:	45b0      	cmp	r8, r6
   1df58:	d8e2      	bhi.n	1df20 <__mdiff+0x84>
   1df5a:	45a4      	cmp	ip, r4
   1df5c:	d916      	bls.n	1df8c <__mdiff+0xf0>
   1df5e:	cc08      	ldmia	r4!, {r3}
   1df60:	041a      	lsls	r2, r3, #16
   1df62:	0c12      	lsrs	r2, r2, #16
   1df64:	4452      	add	r2, sl
   1df66:	1416      	asrs	r6, r2, #16
   1df68:	0c1b      	lsrs	r3, r3, #16
   1df6a:	199b      	adds	r3, r3, r6
   1df6c:	0412      	lsls	r2, r2, #16
   1df6e:	141e      	asrs	r6, r3, #16
   1df70:	0c12      	lsrs	r2, r2, #16
   1df72:	041b      	lsls	r3, r3, #16
   1df74:	4313      	orrs	r3, r2
   1df76:	46b2      	mov	sl, r6
   1df78:	c508      	stmia	r5!, {r3}
   1df7a:	45a4      	cmp	ip, r4
   1df7c:	d8ef      	bhi.n	1df5e <__mdiff+0xc2>
   1df7e:	4662      	mov	r2, ip
   1df80:	2403      	movs	r4, #3
   1df82:	1bd2      	subs	r2, r2, r7
   1df84:	3a05      	subs	r2, #5
   1df86:	43a2      	bics	r2, r4
   1df88:	3204      	adds	r2, #4
   1df8a:	1889      	adds	r1, r1, r2
   1df8c:	3904      	subs	r1, #4
   1df8e:	2b00      	cmp	r3, #0
   1df90:	d104      	bne.n	1df9c <__mdiff+0x100>
   1df92:	3904      	subs	r1, #4
   1df94:	680b      	ldr	r3, [r1, #0]
   1df96:	3801      	subs	r0, #1
   1df98:	2b00      	cmp	r3, #0
   1df9a:	d0fa      	beq.n	1df92 <__mdiff+0xf6>
   1df9c:	464b      	mov	r3, r9
   1df9e:	6118      	str	r0, [r3, #16]
   1dfa0:	4648      	mov	r0, r9
   1dfa2:	bc3c      	pop	{r2, r3, r4, r5}
   1dfa4:	4690      	mov	r8, r2
   1dfa6:	4699      	mov	r9, r3
   1dfa8:	46a2      	mov	sl, r4
   1dfaa:	46ab      	mov	fp, r5
   1dfac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1dfae:	2100      	movs	r1, #0
   1dfb0:	f7ff fd26 	bl	1da00 <_Balloc>
   1dfb4:	2301      	movs	r3, #1
   1dfb6:	6103      	str	r3, [r0, #16]
   1dfb8:	2300      	movs	r3, #0
   1dfba:	4681      	mov	r9, r0
   1dfbc:	6143      	str	r3, [r0, #20]
   1dfbe:	e7ef      	b.n	1dfa0 <__mdiff+0x104>
   1dfc0:	4666      	mov	r6, ip
   1dfc2:	e799      	b.n	1def8 <__mdiff+0x5c>
   1dfc4:	0027      	movs	r7, r4
   1dfc6:	000e      	movs	r6, r1
   1dfc8:	46a0      	mov	r8, r4
   1dfca:	3714      	adds	r7, #20
   1dfcc:	3614      	adds	r6, #20
   1dfce:	000c      	movs	r4, r1
   1dfd0:	2501      	movs	r5, #1
   1dfd2:	e791      	b.n	1def8 <__mdiff+0x5c>

0001dfd4 <__d2b>:
   1dfd4:	b5f0      	push	{r4, r5, r6, r7, lr}
   1dfd6:	2101      	movs	r1, #1
   1dfd8:	001c      	movs	r4, r3
   1dfda:	b083      	sub	sp, #12
   1dfdc:	9e08      	ldr	r6, [sp, #32]
   1dfde:	0015      	movs	r5, r2
   1dfe0:	f7ff fd0e 	bl	1da00 <_Balloc>
   1dfe4:	0323      	lsls	r3, r4, #12
   1dfe6:	0064      	lsls	r4, r4, #1
   1dfe8:	0007      	movs	r7, r0
   1dfea:	0b1b      	lsrs	r3, r3, #12
   1dfec:	0d64      	lsrs	r4, r4, #21
   1dfee:	d002      	beq.n	1dff6 <__d2b+0x22>
   1dff0:	2280      	movs	r2, #128	; 0x80
   1dff2:	0352      	lsls	r2, r2, #13
   1dff4:	4313      	orrs	r3, r2
   1dff6:	9301      	str	r3, [sp, #4]
   1dff8:	2d00      	cmp	r5, #0
   1dffa:	d019      	beq.n	1e030 <__d2b+0x5c>
   1dffc:	4668      	mov	r0, sp
   1dffe:	9500      	str	r5, [sp, #0]
   1e000:	f7ff fd90 	bl	1db24 <__lo0bits>
   1e004:	2800      	cmp	r0, #0
   1e006:	d130      	bne.n	1e06a <__d2b+0x96>
   1e008:	9b00      	ldr	r3, [sp, #0]
   1e00a:	617b      	str	r3, [r7, #20]
   1e00c:	9b01      	ldr	r3, [sp, #4]
   1e00e:	61bb      	str	r3, [r7, #24]
   1e010:	1e5a      	subs	r2, r3, #1
   1e012:	4193      	sbcs	r3, r2
   1e014:	1c5d      	adds	r5, r3, #1
   1e016:	613d      	str	r5, [r7, #16]
   1e018:	2c00      	cmp	r4, #0
   1e01a:	d014      	beq.n	1e046 <__d2b+0x72>
   1e01c:	4b19      	ldr	r3, [pc, #100]	; (1e084 <__d2b+0xb0>)
   1e01e:	469c      	mov	ip, r3
   1e020:	2335      	movs	r3, #53	; 0x35
   1e022:	4464      	add	r4, ip
   1e024:	1824      	adds	r4, r4, r0
   1e026:	1a18      	subs	r0, r3, r0
   1e028:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1e02a:	6034      	str	r4, [r6, #0]
   1e02c:	6018      	str	r0, [r3, #0]
   1e02e:	e019      	b.n	1e064 <__d2b+0x90>
   1e030:	a801      	add	r0, sp, #4
   1e032:	f7ff fd77 	bl	1db24 <__lo0bits>
   1e036:	9b01      	ldr	r3, [sp, #4]
   1e038:	3020      	adds	r0, #32
   1e03a:	617b      	str	r3, [r7, #20]
   1e03c:	2301      	movs	r3, #1
   1e03e:	2501      	movs	r5, #1
   1e040:	613b      	str	r3, [r7, #16]
   1e042:	2c00      	cmp	r4, #0
   1e044:	d1ea      	bne.n	1e01c <__d2b+0x48>
   1e046:	4b10      	ldr	r3, [pc, #64]	; (1e088 <__d2b+0xb4>)
   1e048:	469c      	mov	ip, r3
   1e04a:	4b10      	ldr	r3, [pc, #64]	; (1e08c <__d2b+0xb8>)
   1e04c:	4460      	add	r0, ip
   1e04e:	18eb      	adds	r3, r5, r3
   1e050:	009b      	lsls	r3, r3, #2
   1e052:	18fb      	adds	r3, r7, r3
   1e054:	6030      	str	r0, [r6, #0]
   1e056:	6958      	ldr	r0, [r3, #20]
   1e058:	f7ff fd4a 	bl	1daf0 <__hi0bits>
   1e05c:	016b      	lsls	r3, r5, #5
   1e05e:	1a18      	subs	r0, r3, r0
   1e060:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1e062:	6018      	str	r0, [r3, #0]
   1e064:	0038      	movs	r0, r7
   1e066:	b003      	add	sp, #12
   1e068:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1e06a:	9b01      	ldr	r3, [sp, #4]
   1e06c:	2220      	movs	r2, #32
   1e06e:	0019      	movs	r1, r3
   1e070:	1a12      	subs	r2, r2, r0
   1e072:	4091      	lsls	r1, r2
   1e074:	000a      	movs	r2, r1
   1e076:	40c3      	lsrs	r3, r0
   1e078:	9900      	ldr	r1, [sp, #0]
   1e07a:	9301      	str	r3, [sp, #4]
   1e07c:	430a      	orrs	r2, r1
   1e07e:	617a      	str	r2, [r7, #20]
   1e080:	e7c5      	b.n	1e00e <__d2b+0x3a>
   1e082:	46c0      	nop			; (mov r8, r8)
   1e084:	fffffbcd 	.word	0xfffffbcd
   1e088:	fffffbce 	.word	0xfffffbce
   1e08c:	3fffffff 	.word	0x3fffffff

0001e090 <_realloc_r>:
   1e090:	b5f0      	push	{r4, r5, r6, r7, lr}
   1e092:	464e      	mov	r6, r9
   1e094:	4645      	mov	r5, r8
   1e096:	46de      	mov	lr, fp
   1e098:	4657      	mov	r7, sl
   1e09a:	b5e0      	push	{r5, r6, r7, lr}
   1e09c:	b085      	sub	sp, #20
   1e09e:	9001      	str	r0, [sp, #4]
   1e0a0:	000e      	movs	r6, r1
   1e0a2:	0015      	movs	r5, r2
   1e0a4:	2900      	cmp	r1, #0
   1e0a6:	d100      	bne.n	1e0aa <_realloc_r+0x1a>
   1e0a8:	e09e      	b.n	1e1e8 <_realloc_r+0x158>
   1e0aa:	0037      	movs	r7, r6
   1e0ac:	9801      	ldr	r0, [sp, #4]
   1e0ae:	3f08      	subs	r7, #8
   1e0b0:	f7fb ff46 	bl	19f40 <__malloc_lock>
   1e0b4:	687a      	ldr	r2, [r7, #4]
   1e0b6:	2303      	movs	r3, #3
   1e0b8:	0014      	movs	r4, r2
   1e0ba:	439c      	bics	r4, r3
   1e0bc:	002b      	movs	r3, r5
   1e0be:	330b      	adds	r3, #11
   1e0c0:	46b9      	mov	r9, r7
   1e0c2:	2b16      	cmp	r3, #22
   1e0c4:	d847      	bhi.n	1e156 <_realloc_r+0xc6>
   1e0c6:	2110      	movs	r1, #16
   1e0c8:	2310      	movs	r3, #16
   1e0ca:	4688      	mov	r8, r1
   1e0cc:	4545      	cmp	r5, r8
   1e0ce:	d846      	bhi.n	1e15e <_realloc_r+0xce>
   1e0d0:	429c      	cmp	r4, r3
   1e0d2:	da49      	bge.n	1e168 <_realloc_r+0xd8>
   1e0d4:	49cc      	ldr	r1, [pc, #816]	; (1e408 <_realloc_r+0x378>)
   1e0d6:	1938      	adds	r0, r7, r4
   1e0d8:	468b      	mov	fp, r1
   1e0da:	6889      	ldr	r1, [r1, #8]
   1e0dc:	9002      	str	r0, [sp, #8]
   1e0de:	4288      	cmp	r0, r1
   1e0e0:	d100      	bne.n	1e0e4 <_realloc_r+0x54>
   1e0e2:	e0c2      	b.n	1e26a <_realloc_r+0x1da>
   1e0e4:	2101      	movs	r1, #1
   1e0e6:	468a      	mov	sl, r1
   1e0e8:	6840      	ldr	r0, [r0, #4]
   1e0ea:	0001      	movs	r1, r0
   1e0ec:	9003      	str	r0, [sp, #12]
   1e0ee:	4650      	mov	r0, sl
   1e0f0:	4381      	bics	r1, r0
   1e0f2:	468c      	mov	ip, r1
   1e0f4:	9902      	ldr	r1, [sp, #8]
   1e0f6:	468b      	mov	fp, r1
   1e0f8:	44dc      	add	ip, fp
   1e0fa:	4661      	mov	r1, ip
   1e0fc:	6849      	ldr	r1, [r1, #4]
   1e0fe:	4201      	tst	r1, r0
   1e100:	d04d      	beq.n	1e19e <_realloc_r+0x10e>
   1e102:	4210      	tst	r0, r2
   1e104:	d100      	bne.n	1e108 <_realloc_r+0x78>
   1e106:	e0a2      	b.n	1e24e <_realloc_r+0x1be>
   1e108:	0029      	movs	r1, r5
   1e10a:	9801      	ldr	r0, [sp, #4]
   1e10c:	f7fb fb4c 	bl	197a8 <_malloc_r>
   1e110:	1e05      	subs	r5, r0, #0
   1e112:	d039      	beq.n	1e188 <_realloc_r+0xf8>
   1e114:	2301      	movs	r3, #1
   1e116:	0002      	movs	r2, r0
   1e118:	6879      	ldr	r1, [r7, #4]
   1e11a:	3a08      	subs	r2, #8
   1e11c:	4399      	bics	r1, r3
   1e11e:	187f      	adds	r7, r7, r1
   1e120:	42ba      	cmp	r2, r7
   1e122:	d100      	bne.n	1e126 <_realloc_r+0x96>
   1e124:	e12e      	b.n	1e384 <_realloc_r+0x2f4>
   1e126:	1f22      	subs	r2, r4, #4
   1e128:	2a24      	cmp	r2, #36	; 0x24
   1e12a:	d900      	bls.n	1e12e <_realloc_r+0x9e>
   1e12c:	e114      	b.n	1e358 <_realloc_r+0x2c8>
   1e12e:	2a13      	cmp	r2, #19
   1e130:	d900      	bls.n	1e134 <_realloc_r+0xa4>
   1e132:	e0e8      	b.n	1e306 <_realloc_r+0x276>
   1e134:	0003      	movs	r3, r0
   1e136:	0032      	movs	r2, r6
   1e138:	6811      	ldr	r1, [r2, #0]
   1e13a:	6019      	str	r1, [r3, #0]
   1e13c:	6851      	ldr	r1, [r2, #4]
   1e13e:	6059      	str	r1, [r3, #4]
   1e140:	6892      	ldr	r2, [r2, #8]
   1e142:	609a      	str	r2, [r3, #8]
   1e144:	9c01      	ldr	r4, [sp, #4]
   1e146:	0031      	movs	r1, r6
   1e148:	0020      	movs	r0, r4
   1e14a:	f7ff f905 	bl	1d358 <_free_r>
   1e14e:	0020      	movs	r0, r4
   1e150:	f7fb fefe 	bl	19f50 <__malloc_unlock>
   1e154:	e01b      	b.n	1e18e <_realloc_r+0xfe>
   1e156:	2107      	movs	r1, #7
   1e158:	438b      	bics	r3, r1
   1e15a:	4698      	mov	r8, r3
   1e15c:	d5b6      	bpl.n	1e0cc <_realloc_r+0x3c>
   1e15e:	230c      	movs	r3, #12
   1e160:	9a01      	ldr	r2, [sp, #4]
   1e162:	2500      	movs	r5, #0
   1e164:	6013      	str	r3, [r2, #0]
   1e166:	e012      	b.n	1e18e <_realloc_r+0xfe>
   1e168:	0035      	movs	r5, r6
   1e16a:	4643      	mov	r3, r8
   1e16c:	1ae3      	subs	r3, r4, r3
   1e16e:	2b0f      	cmp	r3, #15
   1e170:	d825      	bhi.n	1e1be <_realloc_r+0x12e>
   1e172:	464b      	mov	r3, r9
   1e174:	2201      	movs	r2, #1
   1e176:	4649      	mov	r1, r9
   1e178:	685b      	ldr	r3, [r3, #4]
   1e17a:	4013      	ands	r3, r2
   1e17c:	4323      	orrs	r3, r4
   1e17e:	604b      	str	r3, [r1, #4]
   1e180:	444c      	add	r4, r9
   1e182:	6863      	ldr	r3, [r4, #4]
   1e184:	431a      	orrs	r2, r3
   1e186:	6062      	str	r2, [r4, #4]
   1e188:	9801      	ldr	r0, [sp, #4]
   1e18a:	f7fb fee1 	bl	19f50 <__malloc_unlock>
   1e18e:	0028      	movs	r0, r5
   1e190:	b005      	add	sp, #20
   1e192:	bc3c      	pop	{r2, r3, r4, r5}
   1e194:	4690      	mov	r8, r2
   1e196:	4699      	mov	r9, r3
   1e198:	46a2      	mov	sl, r4
   1e19a:	46ab      	mov	fp, r5
   1e19c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1e19e:	2103      	movs	r1, #3
   1e1a0:	9803      	ldr	r0, [sp, #12]
   1e1a2:	468c      	mov	ip, r1
   1e1a4:	4388      	bics	r0, r1
   1e1a6:	1821      	adds	r1, r4, r0
   1e1a8:	468b      	mov	fp, r1
   1e1aa:	4299      	cmp	r1, r3
   1e1ac:	db21      	blt.n	1e1f2 <_realloc_r+0x162>
   1e1ae:	9a02      	ldr	r2, [sp, #8]
   1e1b0:	0035      	movs	r5, r6
   1e1b2:	68d3      	ldr	r3, [r2, #12]
   1e1b4:	6892      	ldr	r2, [r2, #8]
   1e1b6:	465c      	mov	r4, fp
   1e1b8:	60d3      	str	r3, [r2, #12]
   1e1ba:	609a      	str	r2, [r3, #8]
   1e1bc:	e7d5      	b.n	1e16a <_realloc_r+0xda>
   1e1be:	464a      	mov	r2, r9
   1e1c0:	2001      	movs	r0, #1
   1e1c2:	4646      	mov	r6, r8
   1e1c4:	6852      	ldr	r2, [r2, #4]
   1e1c6:	4649      	mov	r1, r9
   1e1c8:	4002      	ands	r2, r0
   1e1ca:	4332      	orrs	r2, r6
   1e1cc:	464e      	mov	r6, r9
   1e1ce:	4441      	add	r1, r8
   1e1d0:	4303      	orrs	r3, r0
   1e1d2:	6072      	str	r2, [r6, #4]
   1e1d4:	444c      	add	r4, r9
   1e1d6:	604b      	str	r3, [r1, #4]
   1e1d8:	6863      	ldr	r3, [r4, #4]
   1e1da:	3108      	adds	r1, #8
   1e1dc:	4318      	orrs	r0, r3
   1e1de:	6060      	str	r0, [r4, #4]
   1e1e0:	9801      	ldr	r0, [sp, #4]
   1e1e2:	f7ff f8b9 	bl	1d358 <_free_r>
   1e1e6:	e7cf      	b.n	1e188 <_realloc_r+0xf8>
   1e1e8:	0011      	movs	r1, r2
   1e1ea:	f7fb fadd 	bl	197a8 <_malloc_r>
   1e1ee:	0005      	movs	r5, r0
   1e1f0:	e7cd      	b.n	1e18e <_realloc_r+0xfe>
   1e1f2:	4651      	mov	r1, sl
   1e1f4:	4211      	tst	r1, r2
   1e1f6:	d000      	beq.n	1e1fa <_realloc_r+0x16a>
   1e1f8:	e786      	b.n	1e108 <_realloc_r+0x78>
   1e1fa:	4661      	mov	r1, ip
   1e1fc:	683a      	ldr	r2, [r7, #0]
   1e1fe:	1aba      	subs	r2, r7, r2
   1e200:	4692      	mov	sl, r2
   1e202:	6852      	ldr	r2, [r2, #4]
   1e204:	438a      	bics	r2, r1
   1e206:	1880      	adds	r0, r0, r2
   1e208:	4683      	mov	fp, r0
   1e20a:	44a3      	add	fp, r4
   1e20c:	459b      	cmp	fp, r3
   1e20e:	db26      	blt.n	1e25e <_realloc_r+0x1ce>
   1e210:	9a02      	ldr	r2, [sp, #8]
   1e212:	68d3      	ldr	r3, [r2, #12]
   1e214:	6892      	ldr	r2, [r2, #8]
   1e216:	60d3      	str	r3, [r2, #12]
   1e218:	609a      	str	r2, [r3, #8]
   1e21a:	4653      	mov	r3, sl
   1e21c:	4652      	mov	r2, sl
   1e21e:	4655      	mov	r5, sl
   1e220:	6892      	ldr	r2, [r2, #8]
   1e222:	68db      	ldr	r3, [r3, #12]
   1e224:	3508      	adds	r5, #8
   1e226:	60d3      	str	r3, [r2, #12]
   1e228:	609a      	str	r2, [r3, #8]
   1e22a:	1f22      	subs	r2, r4, #4
   1e22c:	2a24      	cmp	r2, #36	; 0x24
   1e22e:	d900      	bls.n	1e232 <_realloc_r+0x1a2>
   1e230:	e096      	b.n	1e360 <_realloc_r+0x2d0>
   1e232:	2a13      	cmp	r2, #19
   1e234:	d972      	bls.n	1e31c <_realloc_r+0x28c>
   1e236:	4653      	mov	r3, sl
   1e238:	6831      	ldr	r1, [r6, #0]
   1e23a:	6099      	str	r1, [r3, #8]
   1e23c:	6871      	ldr	r1, [r6, #4]
   1e23e:	60d9      	str	r1, [r3, #12]
   1e240:	2a1b      	cmp	r2, #27
   1e242:	d900      	bls.n	1e246 <_realloc_r+0x1b6>
   1e244:	e0a4      	b.n	1e390 <_realloc_r+0x300>
   1e246:	0032      	movs	r2, r6
   1e248:	3310      	adds	r3, #16
   1e24a:	3208      	adds	r2, #8
   1e24c:	e068      	b.n	1e320 <_realloc_r+0x290>
   1e24e:	683a      	ldr	r2, [r7, #0]
   1e250:	1aba      	subs	r2, r7, r2
   1e252:	4692      	mov	sl, r2
   1e254:	4651      	mov	r1, sl
   1e256:	2203      	movs	r2, #3
   1e258:	6849      	ldr	r1, [r1, #4]
   1e25a:	4391      	bics	r1, r2
   1e25c:	000a      	movs	r2, r1
   1e25e:	4693      	mov	fp, r2
   1e260:	44a3      	add	fp, r4
   1e262:	459b      	cmp	fp, r3
   1e264:	da00      	bge.n	1e268 <_realloc_r+0x1d8>
   1e266:	e74f      	b.n	1e108 <_realloc_r+0x78>
   1e268:	e7d7      	b.n	1e21a <_realloc_r+0x18a>
   1e26a:	2003      	movs	r0, #3
   1e26c:	9902      	ldr	r1, [sp, #8]
   1e26e:	4684      	mov	ip, r0
   1e270:	6849      	ldr	r1, [r1, #4]
   1e272:	4381      	bics	r1, r0
   1e274:	4640      	mov	r0, r8
   1e276:	1909      	adds	r1, r1, r4
   1e278:	3010      	adds	r0, #16
   1e27a:	9002      	str	r0, [sp, #8]
   1e27c:	4281      	cmp	r1, r0
   1e27e:	da58      	bge.n	1e332 <_realloc_r+0x2a2>
   1e280:	07d2      	lsls	r2, r2, #31
   1e282:	d500      	bpl.n	1e286 <_realloc_r+0x1f6>
   1e284:	e740      	b.n	1e108 <_realloc_r+0x78>
   1e286:	4660      	mov	r0, ip
   1e288:	683a      	ldr	r2, [r7, #0]
   1e28a:	1aba      	subs	r2, r7, r2
   1e28c:	4692      	mov	sl, r2
   1e28e:	6852      	ldr	r2, [r2, #4]
   1e290:	4382      	bics	r2, r0
   1e292:	9802      	ldr	r0, [sp, #8]
   1e294:	1851      	adds	r1, r2, r1
   1e296:	9103      	str	r1, [sp, #12]
   1e298:	4288      	cmp	r0, r1
   1e29a:	dce0      	bgt.n	1e25e <_realloc_r+0x1ce>
   1e29c:	4653      	mov	r3, sl
   1e29e:	4652      	mov	r2, sl
   1e2a0:	4655      	mov	r5, sl
   1e2a2:	6892      	ldr	r2, [r2, #8]
   1e2a4:	68db      	ldr	r3, [r3, #12]
   1e2a6:	3508      	adds	r5, #8
   1e2a8:	60d3      	str	r3, [r2, #12]
   1e2aa:	609a      	str	r2, [r3, #8]
   1e2ac:	1f22      	subs	r2, r4, #4
   1e2ae:	2a24      	cmp	r2, #36	; 0x24
   1e2b0:	d900      	bls.n	1e2b4 <_realloc_r+0x224>
   1e2b2:	e08e      	b.n	1e3d2 <_realloc_r+0x342>
   1e2b4:	2a13      	cmp	r2, #19
   1e2b6:	d800      	bhi.n	1e2ba <_realloc_r+0x22a>
   1e2b8:	e088      	b.n	1e3cc <_realloc_r+0x33c>
   1e2ba:	4653      	mov	r3, sl
   1e2bc:	6831      	ldr	r1, [r6, #0]
   1e2be:	6099      	str	r1, [r3, #8]
   1e2c0:	6871      	ldr	r1, [r6, #4]
   1e2c2:	60d9      	str	r1, [r3, #12]
   1e2c4:	2a1b      	cmp	r2, #27
   1e2c6:	d900      	bls.n	1e2ca <_realloc_r+0x23a>
   1e2c8:	e088      	b.n	1e3dc <_realloc_r+0x34c>
   1e2ca:	0032      	movs	r2, r6
   1e2cc:	3310      	adds	r3, #16
   1e2ce:	3208      	adds	r2, #8
   1e2d0:	6811      	ldr	r1, [r2, #0]
   1e2d2:	6019      	str	r1, [r3, #0]
   1e2d4:	6851      	ldr	r1, [r2, #4]
   1e2d6:	6059      	str	r1, [r3, #4]
   1e2d8:	6892      	ldr	r2, [r2, #8]
   1e2da:	609a      	str	r2, [r3, #8]
   1e2dc:	4651      	mov	r1, sl
   1e2de:	465b      	mov	r3, fp
   1e2e0:	4642      	mov	r2, r8
   1e2e2:	4441      	add	r1, r8
   1e2e4:	6099      	str	r1, [r3, #8]
   1e2e6:	9b03      	ldr	r3, [sp, #12]
   1e2e8:	9801      	ldr	r0, [sp, #4]
   1e2ea:	1a9a      	subs	r2, r3, r2
   1e2ec:	2301      	movs	r3, #1
   1e2ee:	431a      	orrs	r2, r3
   1e2f0:	604a      	str	r2, [r1, #4]
   1e2f2:	4652      	mov	r2, sl
   1e2f4:	6852      	ldr	r2, [r2, #4]
   1e2f6:	4013      	ands	r3, r2
   1e2f8:	4642      	mov	r2, r8
   1e2fa:	4313      	orrs	r3, r2
   1e2fc:	4652      	mov	r2, sl
   1e2fe:	6053      	str	r3, [r2, #4]
   1e300:	f7fb fe26 	bl	19f50 <__malloc_unlock>
   1e304:	e743      	b.n	1e18e <_realloc_r+0xfe>
   1e306:	6833      	ldr	r3, [r6, #0]
   1e308:	6003      	str	r3, [r0, #0]
   1e30a:	6873      	ldr	r3, [r6, #4]
   1e30c:	6043      	str	r3, [r0, #4]
   1e30e:	2a1b      	cmp	r2, #27
   1e310:	d82d      	bhi.n	1e36e <_realloc_r+0x2de>
   1e312:	0003      	movs	r3, r0
   1e314:	0032      	movs	r2, r6
   1e316:	3308      	adds	r3, #8
   1e318:	3208      	adds	r2, #8
   1e31a:	e70d      	b.n	1e138 <_realloc_r+0xa8>
   1e31c:	002b      	movs	r3, r5
   1e31e:	0032      	movs	r2, r6
   1e320:	6811      	ldr	r1, [r2, #0]
   1e322:	465c      	mov	r4, fp
   1e324:	6019      	str	r1, [r3, #0]
   1e326:	6851      	ldr	r1, [r2, #4]
   1e328:	46d1      	mov	r9, sl
   1e32a:	6059      	str	r1, [r3, #4]
   1e32c:	6892      	ldr	r2, [r2, #8]
   1e32e:	609a      	str	r2, [r3, #8]
   1e330:	e71b      	b.n	1e16a <_realloc_r+0xda>
   1e332:	4643      	mov	r3, r8
   1e334:	18fa      	adds	r2, r7, r3
   1e336:	465b      	mov	r3, fp
   1e338:	609a      	str	r2, [r3, #8]
   1e33a:	4643      	mov	r3, r8
   1e33c:	1ac9      	subs	r1, r1, r3
   1e33e:	2301      	movs	r3, #1
   1e340:	4319      	orrs	r1, r3
   1e342:	6051      	str	r1, [r2, #4]
   1e344:	687a      	ldr	r2, [r7, #4]
   1e346:	9801      	ldr	r0, [sp, #4]
   1e348:	4013      	ands	r3, r2
   1e34a:	4642      	mov	r2, r8
   1e34c:	4313      	orrs	r3, r2
   1e34e:	607b      	str	r3, [r7, #4]
   1e350:	f7fb fdfe 	bl	19f50 <__malloc_unlock>
   1e354:	0035      	movs	r5, r6
   1e356:	e71a      	b.n	1e18e <_realloc_r+0xfe>
   1e358:	0031      	movs	r1, r6
   1e35a:	f7fb fd57 	bl	19e0c <memmove>
   1e35e:	e6f1      	b.n	1e144 <_realloc_r+0xb4>
   1e360:	0031      	movs	r1, r6
   1e362:	0028      	movs	r0, r5
   1e364:	f7fb fd52 	bl	19e0c <memmove>
   1e368:	465c      	mov	r4, fp
   1e36a:	46d1      	mov	r9, sl
   1e36c:	e6fd      	b.n	1e16a <_realloc_r+0xda>
   1e36e:	68b3      	ldr	r3, [r6, #8]
   1e370:	6083      	str	r3, [r0, #8]
   1e372:	68f3      	ldr	r3, [r6, #12]
   1e374:	60c3      	str	r3, [r0, #12]
   1e376:	2a24      	cmp	r2, #36	; 0x24
   1e378:	d015      	beq.n	1e3a6 <_realloc_r+0x316>
   1e37a:	0003      	movs	r3, r0
   1e37c:	0032      	movs	r2, r6
   1e37e:	3310      	adds	r3, #16
   1e380:	3210      	adds	r2, #16
   1e382:	e6d9      	b.n	1e138 <_realloc_r+0xa8>
   1e384:	6853      	ldr	r3, [r2, #4]
   1e386:	2203      	movs	r2, #3
   1e388:	4393      	bics	r3, r2
   1e38a:	18e4      	adds	r4, r4, r3
   1e38c:	0035      	movs	r5, r6
   1e38e:	e6ec      	b.n	1e16a <_realloc_r+0xda>
   1e390:	4653      	mov	r3, sl
   1e392:	68b1      	ldr	r1, [r6, #8]
   1e394:	6119      	str	r1, [r3, #16]
   1e396:	68f1      	ldr	r1, [r6, #12]
   1e398:	6159      	str	r1, [r3, #20]
   1e39a:	2a24      	cmp	r2, #36	; 0x24
   1e39c:	d00c      	beq.n	1e3b8 <_realloc_r+0x328>
   1e39e:	0032      	movs	r2, r6
   1e3a0:	3318      	adds	r3, #24
   1e3a2:	3210      	adds	r2, #16
   1e3a4:	e7bc      	b.n	1e320 <_realloc_r+0x290>
   1e3a6:	6933      	ldr	r3, [r6, #16]
   1e3a8:	0032      	movs	r2, r6
   1e3aa:	6103      	str	r3, [r0, #16]
   1e3ac:	0003      	movs	r3, r0
   1e3ae:	6971      	ldr	r1, [r6, #20]
   1e3b0:	3318      	adds	r3, #24
   1e3b2:	3218      	adds	r2, #24
   1e3b4:	6141      	str	r1, [r0, #20]
   1e3b6:	e6bf      	b.n	1e138 <_realloc_r+0xa8>
   1e3b8:	4653      	mov	r3, sl
   1e3ba:	6932      	ldr	r2, [r6, #16]
   1e3bc:	4651      	mov	r1, sl
   1e3be:	619a      	str	r2, [r3, #24]
   1e3c0:	0032      	movs	r2, r6
   1e3c2:	6970      	ldr	r0, [r6, #20]
   1e3c4:	3320      	adds	r3, #32
   1e3c6:	3218      	adds	r2, #24
   1e3c8:	61c8      	str	r0, [r1, #28]
   1e3ca:	e7a9      	b.n	1e320 <_realloc_r+0x290>
   1e3cc:	002b      	movs	r3, r5
   1e3ce:	0032      	movs	r2, r6
   1e3d0:	e77e      	b.n	1e2d0 <_realloc_r+0x240>
   1e3d2:	0031      	movs	r1, r6
   1e3d4:	0028      	movs	r0, r5
   1e3d6:	f7fb fd19 	bl	19e0c <memmove>
   1e3da:	e77f      	b.n	1e2dc <_realloc_r+0x24c>
   1e3dc:	4653      	mov	r3, sl
   1e3de:	68b1      	ldr	r1, [r6, #8]
   1e3e0:	6119      	str	r1, [r3, #16]
   1e3e2:	68f1      	ldr	r1, [r6, #12]
   1e3e4:	6159      	str	r1, [r3, #20]
   1e3e6:	2a24      	cmp	r2, #36	; 0x24
   1e3e8:	d003      	beq.n	1e3f2 <_realloc_r+0x362>
   1e3ea:	0032      	movs	r2, r6
   1e3ec:	3318      	adds	r3, #24
   1e3ee:	3210      	adds	r2, #16
   1e3f0:	e76e      	b.n	1e2d0 <_realloc_r+0x240>
   1e3f2:	4653      	mov	r3, sl
   1e3f4:	6932      	ldr	r2, [r6, #16]
   1e3f6:	4651      	mov	r1, sl
   1e3f8:	619a      	str	r2, [r3, #24]
   1e3fa:	0032      	movs	r2, r6
   1e3fc:	6970      	ldr	r0, [r6, #20]
   1e3fe:	3320      	adds	r3, #32
   1e400:	3218      	adds	r2, #24
   1e402:	61c8      	str	r0, [r1, #28]
   1e404:	e764      	b.n	1e2d0 <_realloc_r+0x240>
   1e406:	46c0      	nop			; (mov r8, r8)
   1e408:	200005b4 	.word	0x200005b4

0001e40c <__sread>:
   1e40c:	b570      	push	{r4, r5, r6, lr}
   1e40e:	000c      	movs	r4, r1
   1e410:	250e      	movs	r5, #14
   1e412:	5f49      	ldrsh	r1, [r1, r5]
   1e414:	f000 fa7a 	bl	1e90c <_read_r>
   1e418:	2800      	cmp	r0, #0
   1e41a:	db03      	blt.n	1e424 <__sread+0x18>
   1e41c:	6d23      	ldr	r3, [r4, #80]	; 0x50
   1e41e:	181b      	adds	r3, r3, r0
   1e420:	6523      	str	r3, [r4, #80]	; 0x50
   1e422:	bd70      	pop	{r4, r5, r6, pc}
   1e424:	89a3      	ldrh	r3, [r4, #12]
   1e426:	4a02      	ldr	r2, [pc, #8]	; (1e430 <__sread+0x24>)
   1e428:	4013      	ands	r3, r2
   1e42a:	81a3      	strh	r3, [r4, #12]
   1e42c:	e7f9      	b.n	1e422 <__sread+0x16>
   1e42e:	46c0      	nop			; (mov r8, r8)
   1e430:	ffffefff 	.word	0xffffefff

0001e434 <__swrite>:
   1e434:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1e436:	0016      	movs	r6, r2
   1e438:	001f      	movs	r7, r3
   1e43a:	220c      	movs	r2, #12
   1e43c:	5e8b      	ldrsh	r3, [r1, r2]
   1e43e:	0005      	movs	r5, r0
   1e440:	000c      	movs	r4, r1
   1e442:	05da      	lsls	r2, r3, #23
   1e444:	d507      	bpl.n	1e456 <__swrite+0x22>
   1e446:	230e      	movs	r3, #14
   1e448:	5ec9      	ldrsh	r1, [r1, r3]
   1e44a:	2200      	movs	r2, #0
   1e44c:	2302      	movs	r3, #2
   1e44e:	f000 fa49 	bl	1e8e4 <_lseek_r>
   1e452:	220c      	movs	r2, #12
   1e454:	5ea3      	ldrsh	r3, [r4, r2]
   1e456:	4a05      	ldr	r2, [pc, #20]	; (1e46c <__swrite+0x38>)
   1e458:	0028      	movs	r0, r5
   1e45a:	4013      	ands	r3, r2
   1e45c:	81a3      	strh	r3, [r4, #12]
   1e45e:	0032      	movs	r2, r6
   1e460:	230e      	movs	r3, #14
   1e462:	5ee1      	ldrsh	r1, [r4, r3]
   1e464:	003b      	movs	r3, r7
   1e466:	f000 f86b 	bl	1e540 <_write_r>
   1e46a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1e46c:	ffffefff 	.word	0xffffefff

0001e470 <__sseek>:
   1e470:	b570      	push	{r4, r5, r6, lr}
   1e472:	000c      	movs	r4, r1
   1e474:	250e      	movs	r5, #14
   1e476:	5f49      	ldrsh	r1, [r1, r5]
   1e478:	f000 fa34 	bl	1e8e4 <_lseek_r>
   1e47c:	1c43      	adds	r3, r0, #1
   1e47e:	d006      	beq.n	1e48e <__sseek+0x1e>
   1e480:	2380      	movs	r3, #128	; 0x80
   1e482:	89a2      	ldrh	r2, [r4, #12]
   1e484:	015b      	lsls	r3, r3, #5
   1e486:	4313      	orrs	r3, r2
   1e488:	81a3      	strh	r3, [r4, #12]
   1e48a:	6520      	str	r0, [r4, #80]	; 0x50
   1e48c:	bd70      	pop	{r4, r5, r6, pc}
   1e48e:	89a3      	ldrh	r3, [r4, #12]
   1e490:	4a01      	ldr	r2, [pc, #4]	; (1e498 <__sseek+0x28>)
   1e492:	4013      	ands	r3, r2
   1e494:	81a3      	strh	r3, [r4, #12]
   1e496:	e7f9      	b.n	1e48c <__sseek+0x1c>
   1e498:	ffffefff 	.word	0xffffefff

0001e49c <__sclose>:
   1e49c:	b510      	push	{r4, lr}
   1e49e:	230e      	movs	r3, #14
   1e4a0:	5ec9      	ldrsh	r1, [r1, r3]
   1e4a2:	f000 f907 	bl	1e6b4 <_close_r>
   1e4a6:	bd10      	pop	{r4, pc}

0001e4a8 <__sprint_r.part.0>:
   1e4a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1e4aa:	464e      	mov	r6, r9
   1e4ac:	4645      	mov	r5, r8
   1e4ae:	46de      	mov	lr, fp
   1e4b0:	4657      	mov	r7, sl
   1e4b2:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   1e4b4:	b5e0      	push	{r5, r6, r7, lr}
   1e4b6:	4680      	mov	r8, r0
   1e4b8:	000e      	movs	r6, r1
   1e4ba:	4691      	mov	r9, r2
   1e4bc:	049b      	lsls	r3, r3, #18
   1e4be:	d531      	bpl.n	1e524 <__sprint_r.part.0+0x7c>
   1e4c0:	6813      	ldr	r3, [r2, #0]
   1e4c2:	469a      	mov	sl, r3
   1e4c4:	6893      	ldr	r3, [r2, #8]
   1e4c6:	2b00      	cmp	r3, #0
   1e4c8:	d02a      	beq.n	1e520 <__sprint_r.part.0+0x78>
   1e4ca:	4652      	mov	r2, sl
   1e4cc:	6852      	ldr	r2, [r2, #4]
   1e4ce:	2500      	movs	r5, #0
   1e4d0:	4693      	mov	fp, r2
   1e4d2:	0897      	lsrs	r7, r2, #2
   1e4d4:	4652      	mov	r2, sl
   1e4d6:	6814      	ldr	r4, [r2, #0]
   1e4d8:	d104      	bne.n	1e4e4 <__sprint_r.part.0+0x3c>
   1e4da:	e016      	b.n	1e50a <__sprint_r.part.0+0x62>
   1e4dc:	3501      	adds	r5, #1
   1e4de:	3404      	adds	r4, #4
   1e4e0:	42af      	cmp	r7, r5
   1e4e2:	d010      	beq.n	1e506 <__sprint_r.part.0+0x5e>
   1e4e4:	0032      	movs	r2, r6
   1e4e6:	6821      	ldr	r1, [r4, #0]
   1e4e8:	4640      	mov	r0, r8
   1e4ea:	f000 f9a7 	bl	1e83c <_fputwc_r>
   1e4ee:	1c43      	adds	r3, r0, #1
   1e4f0:	d1f4      	bne.n	1e4dc <__sprint_r.part.0+0x34>
   1e4f2:	464a      	mov	r2, r9
   1e4f4:	2300      	movs	r3, #0
   1e4f6:	6093      	str	r3, [r2, #8]
   1e4f8:	6053      	str	r3, [r2, #4]
   1e4fa:	bc3c      	pop	{r2, r3, r4, r5}
   1e4fc:	4690      	mov	r8, r2
   1e4fe:	4699      	mov	r9, r3
   1e500:	46a2      	mov	sl, r4
   1e502:	46ab      	mov	fp, r5
   1e504:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1e506:	464b      	mov	r3, r9
   1e508:	689b      	ldr	r3, [r3, #8]
   1e50a:	465a      	mov	r2, fp
   1e50c:	2103      	movs	r1, #3
   1e50e:	438a      	bics	r2, r1
   1e510:	1a9b      	subs	r3, r3, r2
   1e512:	464a      	mov	r2, r9
   1e514:	6093      	str	r3, [r2, #8]
   1e516:	2208      	movs	r2, #8
   1e518:	4694      	mov	ip, r2
   1e51a:	44e2      	add	sl, ip
   1e51c:	2b00      	cmp	r3, #0
   1e51e:	d1d4      	bne.n	1e4ca <__sprint_r.part.0+0x22>
   1e520:	2000      	movs	r0, #0
   1e522:	e7e6      	b.n	1e4f2 <__sprint_r.part.0+0x4a>
   1e524:	f7fe fff6 	bl	1d514 <__sfvwrite_r>
   1e528:	e7e3      	b.n	1e4f2 <__sprint_r.part.0+0x4a>
   1e52a:	46c0      	nop			; (mov r8, r8)

0001e52c <__sprint_r>:
   1e52c:	6893      	ldr	r3, [r2, #8]
   1e52e:	b510      	push	{r4, lr}
   1e530:	2b00      	cmp	r3, #0
   1e532:	d002      	beq.n	1e53a <__sprint_r+0xe>
   1e534:	f7ff ffb8 	bl	1e4a8 <__sprint_r.part.0>
   1e538:	bd10      	pop	{r4, pc}
   1e53a:	6053      	str	r3, [r2, #4]
   1e53c:	2000      	movs	r0, #0
   1e53e:	e7fb      	b.n	1e538 <__sprint_r+0xc>

0001e540 <_write_r>:
   1e540:	b570      	push	{r4, r5, r6, lr}
   1e542:	0005      	movs	r5, r0
   1e544:	0008      	movs	r0, r1
   1e546:	0011      	movs	r1, r2
   1e548:	2200      	movs	r2, #0
   1e54a:	4c06      	ldr	r4, [pc, #24]	; (1e564 <_write_r+0x24>)
   1e54c:	6022      	str	r2, [r4, #0]
   1e54e:	001a      	movs	r2, r3
   1e550:	f7e9 fa4e 	bl	79f0 <_write>
   1e554:	1c43      	adds	r3, r0, #1
   1e556:	d000      	beq.n	1e55a <_write_r+0x1a>
   1e558:	bd70      	pop	{r4, r5, r6, pc}
   1e55a:	6823      	ldr	r3, [r4, #0]
   1e55c:	2b00      	cmp	r3, #0
   1e55e:	d0fb      	beq.n	1e558 <_write_r+0x18>
   1e560:	602b      	str	r3, [r5, #0]
   1e562:	e7f9      	b.n	1e558 <_write_r+0x18>
   1e564:	20002fe4 	.word	0x20002fe4

0001e568 <__register_exitproc>:
   1e568:	b5f0      	push	{r4, r5, r6, r7, lr}
   1e56a:	464e      	mov	r6, r9
   1e56c:	4645      	mov	r5, r8
   1e56e:	46de      	mov	lr, fp
   1e570:	4657      	mov	r7, sl
   1e572:	b5e0      	push	{r5, r6, r7, lr}
   1e574:	4d36      	ldr	r5, [pc, #216]	; (1e650 <__register_exitproc+0xe8>)
   1e576:	b083      	sub	sp, #12
   1e578:	0006      	movs	r6, r0
   1e57a:	6828      	ldr	r0, [r5, #0]
   1e57c:	4698      	mov	r8, r3
   1e57e:	000f      	movs	r7, r1
   1e580:	4691      	mov	r9, r2
   1e582:	f7ff f981 	bl	1d888 <__retarget_lock_acquire_recursive>
   1e586:	4b33      	ldr	r3, [pc, #204]	; (1e654 <__register_exitproc+0xec>)
   1e588:	681c      	ldr	r4, [r3, #0]
   1e58a:	23a4      	movs	r3, #164	; 0xa4
   1e58c:	005b      	lsls	r3, r3, #1
   1e58e:	58e0      	ldr	r0, [r4, r3]
   1e590:	2800      	cmp	r0, #0
   1e592:	d052      	beq.n	1e63a <__register_exitproc+0xd2>
   1e594:	6843      	ldr	r3, [r0, #4]
   1e596:	2b1f      	cmp	r3, #31
   1e598:	dc13      	bgt.n	1e5c2 <__register_exitproc+0x5a>
   1e59a:	1c5a      	adds	r2, r3, #1
   1e59c:	9201      	str	r2, [sp, #4]
   1e59e:	2e00      	cmp	r6, #0
   1e5a0:	d128      	bne.n	1e5f4 <__register_exitproc+0x8c>
   1e5a2:	9a01      	ldr	r2, [sp, #4]
   1e5a4:	3302      	adds	r3, #2
   1e5a6:	009b      	lsls	r3, r3, #2
   1e5a8:	6042      	str	r2, [r0, #4]
   1e5aa:	501f      	str	r7, [r3, r0]
   1e5ac:	6828      	ldr	r0, [r5, #0]
   1e5ae:	f7ff f96d 	bl	1d88c <__retarget_lock_release_recursive>
   1e5b2:	2000      	movs	r0, #0
   1e5b4:	b003      	add	sp, #12
   1e5b6:	bc3c      	pop	{r2, r3, r4, r5}
   1e5b8:	4690      	mov	r8, r2
   1e5ba:	4699      	mov	r9, r3
   1e5bc:	46a2      	mov	sl, r4
   1e5be:	46ab      	mov	fp, r5
   1e5c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1e5c2:	4b25      	ldr	r3, [pc, #148]	; (1e658 <__register_exitproc+0xf0>)
   1e5c4:	2b00      	cmp	r3, #0
   1e5c6:	d03d      	beq.n	1e644 <__register_exitproc+0xdc>
   1e5c8:	20c8      	movs	r0, #200	; 0xc8
   1e5ca:	0040      	lsls	r0, r0, #1
   1e5cc:	f7fb f8d8 	bl	19780 <malloc>
   1e5d0:	2800      	cmp	r0, #0
   1e5d2:	d037      	beq.n	1e644 <__register_exitproc+0xdc>
   1e5d4:	22a4      	movs	r2, #164	; 0xa4
   1e5d6:	2300      	movs	r3, #0
   1e5d8:	0052      	lsls	r2, r2, #1
   1e5da:	58a1      	ldr	r1, [r4, r2]
   1e5dc:	6043      	str	r3, [r0, #4]
   1e5de:	6001      	str	r1, [r0, #0]
   1e5e0:	50a0      	str	r0, [r4, r2]
   1e5e2:	3240      	adds	r2, #64	; 0x40
   1e5e4:	5083      	str	r3, [r0, r2]
   1e5e6:	3204      	adds	r2, #4
   1e5e8:	5083      	str	r3, [r0, r2]
   1e5ea:	3301      	adds	r3, #1
   1e5ec:	9301      	str	r3, [sp, #4]
   1e5ee:	2300      	movs	r3, #0
   1e5f0:	2e00      	cmp	r6, #0
   1e5f2:	d0d6      	beq.n	1e5a2 <__register_exitproc+0x3a>
   1e5f4:	009a      	lsls	r2, r3, #2
   1e5f6:	4692      	mov	sl, r2
   1e5f8:	4482      	add	sl, r0
   1e5fa:	464a      	mov	r2, r9
   1e5fc:	2188      	movs	r1, #136	; 0x88
   1e5fe:	4654      	mov	r4, sl
   1e600:	5062      	str	r2, [r4, r1]
   1e602:	22c4      	movs	r2, #196	; 0xc4
   1e604:	0052      	lsls	r2, r2, #1
   1e606:	4691      	mov	r9, r2
   1e608:	4481      	add	r9, r0
   1e60a:	464a      	mov	r2, r9
   1e60c:	3987      	subs	r1, #135	; 0x87
   1e60e:	4099      	lsls	r1, r3
   1e610:	6812      	ldr	r2, [r2, #0]
   1e612:	468b      	mov	fp, r1
   1e614:	430a      	orrs	r2, r1
   1e616:	4694      	mov	ip, r2
   1e618:	464a      	mov	r2, r9
   1e61a:	4661      	mov	r1, ip
   1e61c:	6011      	str	r1, [r2, #0]
   1e61e:	2284      	movs	r2, #132	; 0x84
   1e620:	4641      	mov	r1, r8
   1e622:	0052      	lsls	r2, r2, #1
   1e624:	50a1      	str	r1, [r4, r2]
   1e626:	2e02      	cmp	r6, #2
   1e628:	d1bb      	bne.n	1e5a2 <__register_exitproc+0x3a>
   1e62a:	0002      	movs	r2, r0
   1e62c:	465c      	mov	r4, fp
   1e62e:	328d      	adds	r2, #141	; 0x8d
   1e630:	32ff      	adds	r2, #255	; 0xff
   1e632:	6811      	ldr	r1, [r2, #0]
   1e634:	430c      	orrs	r4, r1
   1e636:	6014      	str	r4, [r2, #0]
   1e638:	e7b3      	b.n	1e5a2 <__register_exitproc+0x3a>
   1e63a:	0020      	movs	r0, r4
   1e63c:	304d      	adds	r0, #77	; 0x4d
   1e63e:	30ff      	adds	r0, #255	; 0xff
   1e640:	50e0      	str	r0, [r4, r3]
   1e642:	e7a7      	b.n	1e594 <__register_exitproc+0x2c>
   1e644:	6828      	ldr	r0, [r5, #0]
   1e646:	f7ff f921 	bl	1d88c <__retarget_lock_release_recursive>
   1e64a:	2001      	movs	r0, #1
   1e64c:	4240      	negs	r0, r0
   1e64e:	e7b1      	b.n	1e5b4 <__register_exitproc+0x4c>
   1e650:	200009c4 	.word	0x200009c4
   1e654:	0002055c 	.word	0x0002055c
   1e658:	00019781 	.word	0x00019781

0001e65c <_calloc_r>:
   1e65c:	b510      	push	{r4, lr}
   1e65e:	4351      	muls	r1, r2
   1e660:	f7fb f8a2 	bl	197a8 <_malloc_r>
   1e664:	1e04      	subs	r4, r0, #0
   1e666:	d01c      	beq.n	1e6a2 <_calloc_r+0x46>
   1e668:	0003      	movs	r3, r0
   1e66a:	3b08      	subs	r3, #8
   1e66c:	685a      	ldr	r2, [r3, #4]
   1e66e:	2303      	movs	r3, #3
   1e670:	439a      	bics	r2, r3
   1e672:	3a04      	subs	r2, #4
   1e674:	2a24      	cmp	r2, #36	; 0x24
   1e676:	d816      	bhi.n	1e6a6 <_calloc_r+0x4a>
   1e678:	0003      	movs	r3, r0
   1e67a:	2a13      	cmp	r2, #19
   1e67c:	d90d      	bls.n	1e69a <_calloc_r+0x3e>
   1e67e:	2100      	movs	r1, #0
   1e680:	3308      	adds	r3, #8
   1e682:	6001      	str	r1, [r0, #0]
   1e684:	6041      	str	r1, [r0, #4]
   1e686:	2a1b      	cmp	r2, #27
   1e688:	d907      	bls.n	1e69a <_calloc_r+0x3e>
   1e68a:	6081      	str	r1, [r0, #8]
   1e68c:	60c1      	str	r1, [r0, #12]
   1e68e:	2a24      	cmp	r2, #36	; 0x24
   1e690:	d10d      	bne.n	1e6ae <_calloc_r+0x52>
   1e692:	0003      	movs	r3, r0
   1e694:	6101      	str	r1, [r0, #16]
   1e696:	3318      	adds	r3, #24
   1e698:	6141      	str	r1, [r0, #20]
   1e69a:	2200      	movs	r2, #0
   1e69c:	601a      	str	r2, [r3, #0]
   1e69e:	605a      	str	r2, [r3, #4]
   1e6a0:	609a      	str	r2, [r3, #8]
   1e6a2:	0020      	movs	r0, r4
   1e6a4:	bd10      	pop	{r4, pc}
   1e6a6:	2100      	movs	r1, #0
   1e6a8:	f7fb fc00 	bl	19eac <memset>
   1e6ac:	e7f9      	b.n	1e6a2 <_calloc_r+0x46>
   1e6ae:	0003      	movs	r3, r0
   1e6b0:	3310      	adds	r3, #16
   1e6b2:	e7f2      	b.n	1e69a <_calloc_r+0x3e>

0001e6b4 <_close_r>:
   1e6b4:	2300      	movs	r3, #0
   1e6b6:	b570      	push	{r4, r5, r6, lr}
   1e6b8:	4c06      	ldr	r4, [pc, #24]	; (1e6d4 <_close_r+0x20>)
   1e6ba:	0005      	movs	r5, r0
   1e6bc:	0008      	movs	r0, r1
   1e6be:	6023      	str	r3, [r4, #0]
   1e6c0:	f7e9 f9d0 	bl	7a64 <_close>
   1e6c4:	1c43      	adds	r3, r0, #1
   1e6c6:	d000      	beq.n	1e6ca <_close_r+0x16>
   1e6c8:	bd70      	pop	{r4, r5, r6, pc}
   1e6ca:	6823      	ldr	r3, [r4, #0]
   1e6cc:	2b00      	cmp	r3, #0
   1e6ce:	d0fb      	beq.n	1e6c8 <_close_r+0x14>
   1e6d0:	602b      	str	r3, [r5, #0]
   1e6d2:	e7f9      	b.n	1e6c8 <_close_r+0x14>
   1e6d4:	20002fe4 	.word	0x20002fe4

0001e6d8 <_fclose_r>:
   1e6d8:	b570      	push	{r4, r5, r6, lr}
   1e6da:	0005      	movs	r5, r0
   1e6dc:	1e0c      	subs	r4, r1, #0
   1e6de:	d040      	beq.n	1e762 <_fclose_r+0x8a>
   1e6e0:	2800      	cmp	r0, #0
   1e6e2:	d002      	beq.n	1e6ea <_fclose_r+0x12>
   1e6e4:	6b83      	ldr	r3, [r0, #56]	; 0x38
   1e6e6:	2b00      	cmp	r3, #0
   1e6e8:	d03e      	beq.n	1e768 <_fclose_r+0x90>
   1e6ea:	2601      	movs	r6, #1
   1e6ec:	6e63      	ldr	r3, [r4, #100]	; 0x64
   1e6ee:	4233      	tst	r3, r6
   1e6f0:	d133      	bne.n	1e75a <_fclose_r+0x82>
   1e6f2:	89a3      	ldrh	r3, [r4, #12]
   1e6f4:	059b      	lsls	r3, r3, #22
   1e6f6:	d543      	bpl.n	1e780 <_fclose_r+0xa8>
   1e6f8:	0021      	movs	r1, r4
   1e6fa:	0028      	movs	r0, r5
   1e6fc:	f7fe fc80 	bl	1d000 <__sflush_r>
   1e700:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   1e702:	0006      	movs	r6, r0
   1e704:	2b00      	cmp	r3, #0
   1e706:	d004      	beq.n	1e712 <_fclose_r+0x3a>
   1e708:	69e1      	ldr	r1, [r4, #28]
   1e70a:	0028      	movs	r0, r5
   1e70c:	4798      	blx	r3
   1e70e:	2800      	cmp	r0, #0
   1e710:	db44      	blt.n	1e79c <_fclose_r+0xc4>
   1e712:	89a3      	ldrh	r3, [r4, #12]
   1e714:	061b      	lsls	r3, r3, #24
   1e716:	d42a      	bmi.n	1e76e <_fclose_r+0x96>
   1e718:	6b21      	ldr	r1, [r4, #48]	; 0x30
   1e71a:	2900      	cmp	r1, #0
   1e71c:	d008      	beq.n	1e730 <_fclose_r+0x58>
   1e71e:	0023      	movs	r3, r4
   1e720:	3340      	adds	r3, #64	; 0x40
   1e722:	4299      	cmp	r1, r3
   1e724:	d002      	beq.n	1e72c <_fclose_r+0x54>
   1e726:	0028      	movs	r0, r5
   1e728:	f7fe fe16 	bl	1d358 <_free_r>
   1e72c:	2300      	movs	r3, #0
   1e72e:	6323      	str	r3, [r4, #48]	; 0x30
   1e730:	6c61      	ldr	r1, [r4, #68]	; 0x44
   1e732:	2900      	cmp	r1, #0
   1e734:	d004      	beq.n	1e740 <_fclose_r+0x68>
   1e736:	0028      	movs	r0, r5
   1e738:	f7fe fe0e 	bl	1d358 <_free_r>
   1e73c:	2300      	movs	r3, #0
   1e73e:	6463      	str	r3, [r4, #68]	; 0x44
   1e740:	f7fe fd90 	bl	1d264 <__sfp_lock_acquire>
   1e744:	2300      	movs	r3, #0
   1e746:	81a3      	strh	r3, [r4, #12]
   1e748:	6e63      	ldr	r3, [r4, #100]	; 0x64
   1e74a:	07db      	lsls	r3, r3, #31
   1e74c:	d514      	bpl.n	1e778 <_fclose_r+0xa0>
   1e74e:	6da0      	ldr	r0, [r4, #88]	; 0x58
   1e750:	f7ff f898 	bl	1d884 <__retarget_lock_close_recursive>
   1e754:	f7fe fd8e 	bl	1d274 <__sfp_lock_release>
   1e758:	e004      	b.n	1e764 <_fclose_r+0x8c>
   1e75a:	220c      	movs	r2, #12
   1e75c:	5ea3      	ldrsh	r3, [r4, r2]
   1e75e:	2b00      	cmp	r3, #0
   1e760:	d1ca      	bne.n	1e6f8 <_fclose_r+0x20>
   1e762:	2600      	movs	r6, #0
   1e764:	0030      	movs	r0, r6
   1e766:	bd70      	pop	{r4, r5, r6, pc}
   1e768:	f7fe fd4c 	bl	1d204 <__sinit>
   1e76c:	e7bd      	b.n	1e6ea <_fclose_r+0x12>
   1e76e:	6921      	ldr	r1, [r4, #16]
   1e770:	0028      	movs	r0, r5
   1e772:	f7fe fdf1 	bl	1d358 <_free_r>
   1e776:	e7cf      	b.n	1e718 <_fclose_r+0x40>
   1e778:	6da0      	ldr	r0, [r4, #88]	; 0x58
   1e77a:	f7ff f887 	bl	1d88c <__retarget_lock_release_recursive>
   1e77e:	e7e6      	b.n	1e74e <_fclose_r+0x76>
   1e780:	6da0      	ldr	r0, [r4, #88]	; 0x58
   1e782:	f7ff f881 	bl	1d888 <__retarget_lock_acquire_recursive>
   1e786:	220c      	movs	r2, #12
   1e788:	5ea3      	ldrsh	r3, [r4, r2]
   1e78a:	2b00      	cmp	r3, #0
   1e78c:	d1b4      	bne.n	1e6f8 <_fclose_r+0x20>
   1e78e:	6e63      	ldr	r3, [r4, #100]	; 0x64
   1e790:	401e      	ands	r6, r3
   1e792:	d1e6      	bne.n	1e762 <_fclose_r+0x8a>
   1e794:	6da0      	ldr	r0, [r4, #88]	; 0x58
   1e796:	f7ff f879 	bl	1d88c <__retarget_lock_release_recursive>
   1e79a:	e7e3      	b.n	1e764 <_fclose_r+0x8c>
   1e79c:	2601      	movs	r6, #1
   1e79e:	4276      	negs	r6, r6
   1e7a0:	e7b7      	b.n	1e712 <_fclose_r+0x3a>
   1e7a2:	46c0      	nop			; (mov r8, r8)

0001e7a4 <__fputwc>:
   1e7a4:	b5f0      	push	{r4, r5, r6, r7, lr}
   1e7a6:	46ce      	mov	lr, r9
   1e7a8:	4647      	mov	r7, r8
   1e7aa:	b580      	push	{r7, lr}
   1e7ac:	b085      	sub	sp, #20
   1e7ae:	4680      	mov	r8, r0
   1e7b0:	4689      	mov	r9, r1
   1e7b2:	0014      	movs	r4, r2
   1e7b4:	f7fa ffc2 	bl	1973c <__locale_mb_cur_max>
   1e7b8:	2801      	cmp	r0, #1
   1e7ba:	d031      	beq.n	1e820 <__fputwc+0x7c>
   1e7bc:	0023      	movs	r3, r4
   1e7be:	af03      	add	r7, sp, #12
   1e7c0:	335c      	adds	r3, #92	; 0x5c
   1e7c2:	464a      	mov	r2, r9
   1e7c4:	0039      	movs	r1, r7
   1e7c6:	4640      	mov	r0, r8
   1e7c8:	f000 f912 	bl	1e9f0 <_wcrtomb_r>
   1e7cc:	0006      	movs	r6, r0
   1e7ce:	1c43      	adds	r3, r0, #1
   1e7d0:	d021      	beq.n	1e816 <__fputwc+0x72>
   1e7d2:	2800      	cmp	r0, #0
   1e7d4:	d030      	beq.n	1e838 <__fputwc+0x94>
   1e7d6:	7839      	ldrb	r1, [r7, #0]
   1e7d8:	2500      	movs	r5, #0
   1e7da:	e007      	b.n	1e7ec <__fputwc+0x48>
   1e7dc:	6823      	ldr	r3, [r4, #0]
   1e7de:	1c5a      	adds	r2, r3, #1
   1e7e0:	6022      	str	r2, [r4, #0]
   1e7e2:	7019      	strb	r1, [r3, #0]
   1e7e4:	3501      	adds	r5, #1
   1e7e6:	42b5      	cmp	r5, r6
   1e7e8:	d226      	bcs.n	1e838 <__fputwc+0x94>
   1e7ea:	5d79      	ldrb	r1, [r7, r5]
   1e7ec:	68a3      	ldr	r3, [r4, #8]
   1e7ee:	3b01      	subs	r3, #1
   1e7f0:	60a3      	str	r3, [r4, #8]
   1e7f2:	2b00      	cmp	r3, #0
   1e7f4:	daf2      	bge.n	1e7dc <__fputwc+0x38>
   1e7f6:	69a2      	ldr	r2, [r4, #24]
   1e7f8:	4293      	cmp	r3, r2
   1e7fa:	db01      	blt.n	1e800 <__fputwc+0x5c>
   1e7fc:	290a      	cmp	r1, #10
   1e7fe:	d1ed      	bne.n	1e7dc <__fputwc+0x38>
   1e800:	0022      	movs	r2, r4
   1e802:	4640      	mov	r0, r8
   1e804:	f000 f896 	bl	1e934 <__swbuf_r>
   1e808:	1c43      	adds	r3, r0, #1
   1e80a:	d1eb      	bne.n	1e7e4 <__fputwc+0x40>
   1e80c:	b005      	add	sp, #20
   1e80e:	bc0c      	pop	{r2, r3}
   1e810:	4690      	mov	r8, r2
   1e812:	4699      	mov	r9, r3
   1e814:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1e816:	2240      	movs	r2, #64	; 0x40
   1e818:	89a3      	ldrh	r3, [r4, #12]
   1e81a:	4313      	orrs	r3, r2
   1e81c:	81a3      	strh	r3, [r4, #12]
   1e81e:	e7f5      	b.n	1e80c <__fputwc+0x68>
   1e820:	464b      	mov	r3, r9
   1e822:	3b01      	subs	r3, #1
   1e824:	2bfe      	cmp	r3, #254	; 0xfe
   1e826:	d8c9      	bhi.n	1e7bc <__fputwc+0x18>
   1e828:	466a      	mov	r2, sp
   1e82a:	464b      	mov	r3, r9
   1e82c:	71d3      	strb	r3, [r2, #7]
   1e82e:	79d1      	ldrb	r1, [r2, #7]
   1e830:	af03      	add	r7, sp, #12
   1e832:	7039      	strb	r1, [r7, #0]
   1e834:	2601      	movs	r6, #1
   1e836:	e7cf      	b.n	1e7d8 <__fputwc+0x34>
   1e838:	4648      	mov	r0, r9
   1e83a:	e7e7      	b.n	1e80c <__fputwc+0x68>

0001e83c <_fputwc_r>:
   1e83c:	6e53      	ldr	r3, [r2, #100]	; 0x64
   1e83e:	b570      	push	{r4, r5, r6, lr}
   1e840:	0005      	movs	r5, r0
   1e842:	000e      	movs	r6, r1
   1e844:	0014      	movs	r4, r2
   1e846:	07db      	lsls	r3, r3, #31
   1e848:	d41e      	bmi.n	1e888 <_fputwc_r+0x4c>
   1e84a:	230c      	movs	r3, #12
   1e84c:	5ed2      	ldrsh	r2, [r2, r3]
   1e84e:	b291      	uxth	r1, r2
   1e850:	058b      	lsls	r3, r1, #22
   1e852:	d516      	bpl.n	1e882 <_fputwc_r+0x46>
   1e854:	2380      	movs	r3, #128	; 0x80
   1e856:	019b      	lsls	r3, r3, #6
   1e858:	4219      	tst	r1, r3
   1e85a:	d104      	bne.n	1e866 <_fputwc_r+0x2a>
   1e85c:	431a      	orrs	r2, r3
   1e85e:	81a2      	strh	r2, [r4, #12]
   1e860:	6e62      	ldr	r2, [r4, #100]	; 0x64
   1e862:	4313      	orrs	r3, r2
   1e864:	6663      	str	r3, [r4, #100]	; 0x64
   1e866:	0028      	movs	r0, r5
   1e868:	0022      	movs	r2, r4
   1e86a:	0031      	movs	r1, r6
   1e86c:	f7ff ff9a 	bl	1e7a4 <__fputwc>
   1e870:	6e63      	ldr	r3, [r4, #100]	; 0x64
   1e872:	0005      	movs	r5, r0
   1e874:	07db      	lsls	r3, r3, #31
   1e876:	d402      	bmi.n	1e87e <_fputwc_r+0x42>
   1e878:	89a3      	ldrh	r3, [r4, #12]
   1e87a:	059b      	lsls	r3, r3, #22
   1e87c:	d508      	bpl.n	1e890 <_fputwc_r+0x54>
   1e87e:	0028      	movs	r0, r5
   1e880:	bd70      	pop	{r4, r5, r6, pc}
   1e882:	6da0      	ldr	r0, [r4, #88]	; 0x58
   1e884:	f7ff f800 	bl	1d888 <__retarget_lock_acquire_recursive>
   1e888:	230c      	movs	r3, #12
   1e88a:	5ee2      	ldrsh	r2, [r4, r3]
   1e88c:	b291      	uxth	r1, r2
   1e88e:	e7e1      	b.n	1e854 <_fputwc_r+0x18>
   1e890:	6da0      	ldr	r0, [r4, #88]	; 0x58
   1e892:	f7fe fffb 	bl	1d88c <__retarget_lock_release_recursive>
   1e896:	e7f2      	b.n	1e87e <_fputwc_r+0x42>

0001e898 <_fstat_r>:
   1e898:	2300      	movs	r3, #0
   1e89a:	b570      	push	{r4, r5, r6, lr}
   1e89c:	4c07      	ldr	r4, [pc, #28]	; (1e8bc <_fstat_r+0x24>)
   1e89e:	0005      	movs	r5, r0
   1e8a0:	0008      	movs	r0, r1
   1e8a2:	0011      	movs	r1, r2
   1e8a4:	6023      	str	r3, [r4, #0]
   1e8a6:	f7e9 f8e0 	bl	7a6a <_fstat>
   1e8aa:	1c43      	adds	r3, r0, #1
   1e8ac:	d000      	beq.n	1e8b0 <_fstat_r+0x18>
   1e8ae:	bd70      	pop	{r4, r5, r6, pc}
   1e8b0:	6823      	ldr	r3, [r4, #0]
   1e8b2:	2b00      	cmp	r3, #0
   1e8b4:	d0fb      	beq.n	1e8ae <_fstat_r+0x16>
   1e8b6:	602b      	str	r3, [r5, #0]
   1e8b8:	e7f9      	b.n	1e8ae <_fstat_r+0x16>
   1e8ba:	46c0      	nop			; (mov r8, r8)
   1e8bc:	20002fe4 	.word	0x20002fe4

0001e8c0 <_isatty_r>:
   1e8c0:	2300      	movs	r3, #0
   1e8c2:	b570      	push	{r4, r5, r6, lr}
   1e8c4:	4c06      	ldr	r4, [pc, #24]	; (1e8e0 <_isatty_r+0x20>)
   1e8c6:	0005      	movs	r5, r0
   1e8c8:	0008      	movs	r0, r1
   1e8ca:	6023      	str	r3, [r4, #0]
   1e8cc:	f7e9 f8d2 	bl	7a74 <_isatty>
   1e8d0:	1c43      	adds	r3, r0, #1
   1e8d2:	d000      	beq.n	1e8d6 <_isatty_r+0x16>
   1e8d4:	bd70      	pop	{r4, r5, r6, pc}
   1e8d6:	6823      	ldr	r3, [r4, #0]
   1e8d8:	2b00      	cmp	r3, #0
   1e8da:	d0fb      	beq.n	1e8d4 <_isatty_r+0x14>
   1e8dc:	602b      	str	r3, [r5, #0]
   1e8de:	e7f9      	b.n	1e8d4 <_isatty_r+0x14>
   1e8e0:	20002fe4 	.word	0x20002fe4

0001e8e4 <_lseek_r>:
   1e8e4:	b570      	push	{r4, r5, r6, lr}
   1e8e6:	0005      	movs	r5, r0
   1e8e8:	0008      	movs	r0, r1
   1e8ea:	0011      	movs	r1, r2
   1e8ec:	2200      	movs	r2, #0
   1e8ee:	4c06      	ldr	r4, [pc, #24]	; (1e908 <_lseek_r+0x24>)
   1e8f0:	6022      	str	r2, [r4, #0]
   1e8f2:	001a      	movs	r2, r3
   1e8f4:	f7e9 f8c0 	bl	7a78 <_lseek>
   1e8f8:	1c43      	adds	r3, r0, #1
   1e8fa:	d000      	beq.n	1e8fe <_lseek_r+0x1a>
   1e8fc:	bd70      	pop	{r4, r5, r6, pc}
   1e8fe:	6823      	ldr	r3, [r4, #0]
   1e900:	2b00      	cmp	r3, #0
   1e902:	d0fb      	beq.n	1e8fc <_lseek_r+0x18>
   1e904:	602b      	str	r3, [r5, #0]
   1e906:	e7f9      	b.n	1e8fc <_lseek_r+0x18>
   1e908:	20002fe4 	.word	0x20002fe4

0001e90c <_read_r>:
   1e90c:	b570      	push	{r4, r5, r6, lr}
   1e90e:	0005      	movs	r5, r0
   1e910:	0008      	movs	r0, r1
   1e912:	0011      	movs	r1, r2
   1e914:	2200      	movs	r2, #0
   1e916:	4c06      	ldr	r4, [pc, #24]	; (1e930 <_read_r+0x24>)
   1e918:	6022      	str	r2, [r4, #0]
   1e91a:	001a      	movs	r2, r3
   1e91c:	f7e9 f846 	bl	79ac <_read>
   1e920:	1c43      	adds	r3, r0, #1
   1e922:	d000      	beq.n	1e926 <_read_r+0x1a>
   1e924:	bd70      	pop	{r4, r5, r6, pc}
   1e926:	6823      	ldr	r3, [r4, #0]
   1e928:	2b00      	cmp	r3, #0
   1e92a:	d0fb      	beq.n	1e924 <_read_r+0x18>
   1e92c:	602b      	str	r3, [r5, #0]
   1e92e:	e7f9      	b.n	1e924 <_read_r+0x18>
   1e930:	20002fe4 	.word	0x20002fe4

0001e934 <__swbuf_r>:
   1e934:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1e936:	0006      	movs	r6, r0
   1e938:	000d      	movs	r5, r1
   1e93a:	0014      	movs	r4, r2
   1e93c:	2800      	cmp	r0, #0
   1e93e:	d002      	beq.n	1e946 <__swbuf_r+0x12>
   1e940:	6b83      	ldr	r3, [r0, #56]	; 0x38
   1e942:	2b00      	cmp	r3, #0
   1e944:	d04e      	beq.n	1e9e4 <__swbuf_r+0xb0>
   1e946:	69a3      	ldr	r3, [r4, #24]
   1e948:	60a3      	str	r3, [r4, #8]
   1e94a:	230c      	movs	r3, #12
   1e94c:	5ee0      	ldrsh	r0, [r4, r3]
   1e94e:	b281      	uxth	r1, r0
   1e950:	070b      	lsls	r3, r1, #28
   1e952:	d53c      	bpl.n	1e9ce <__swbuf_r+0x9a>
   1e954:	6923      	ldr	r3, [r4, #16]
   1e956:	2b00      	cmp	r3, #0
   1e958:	d039      	beq.n	1e9ce <__swbuf_r+0x9a>
   1e95a:	22ff      	movs	r2, #255	; 0xff
   1e95c:	b2ef      	uxtb	r7, r5
   1e95e:	4015      	ands	r5, r2
   1e960:	2280      	movs	r2, #128	; 0x80
   1e962:	0192      	lsls	r2, r2, #6
   1e964:	4211      	tst	r1, r2
   1e966:	d015      	beq.n	1e994 <__swbuf_r+0x60>
   1e968:	6822      	ldr	r2, [r4, #0]
   1e96a:	6961      	ldr	r1, [r4, #20]
   1e96c:	1ad3      	subs	r3, r2, r3
   1e96e:	428b      	cmp	r3, r1
   1e970:	da1b      	bge.n	1e9aa <__swbuf_r+0x76>
   1e972:	3301      	adds	r3, #1
   1e974:	68a1      	ldr	r1, [r4, #8]
   1e976:	3901      	subs	r1, #1
   1e978:	60a1      	str	r1, [r4, #8]
   1e97a:	1c51      	adds	r1, r2, #1
   1e97c:	6021      	str	r1, [r4, #0]
   1e97e:	7017      	strb	r7, [r2, #0]
   1e980:	6962      	ldr	r2, [r4, #20]
   1e982:	429a      	cmp	r2, r3
   1e984:	d01a      	beq.n	1e9bc <__swbuf_r+0x88>
   1e986:	89a3      	ldrh	r3, [r4, #12]
   1e988:	07db      	lsls	r3, r3, #31
   1e98a:	d501      	bpl.n	1e990 <__swbuf_r+0x5c>
   1e98c:	2d0a      	cmp	r5, #10
   1e98e:	d015      	beq.n	1e9bc <__swbuf_r+0x88>
   1e990:	0028      	movs	r0, r5
   1e992:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1e994:	4302      	orrs	r2, r0
   1e996:	6e61      	ldr	r1, [r4, #100]	; 0x64
   1e998:	81a2      	strh	r2, [r4, #12]
   1e99a:	4a14      	ldr	r2, [pc, #80]	; (1e9ec <__swbuf_r+0xb8>)
   1e99c:	400a      	ands	r2, r1
   1e99e:	6662      	str	r2, [r4, #100]	; 0x64
   1e9a0:	6961      	ldr	r1, [r4, #20]
   1e9a2:	6822      	ldr	r2, [r4, #0]
   1e9a4:	1ad3      	subs	r3, r2, r3
   1e9a6:	428b      	cmp	r3, r1
   1e9a8:	dbe3      	blt.n	1e972 <__swbuf_r+0x3e>
   1e9aa:	0021      	movs	r1, r4
   1e9ac:	0030      	movs	r0, r6
   1e9ae:	f7fe fbcf 	bl	1d150 <_fflush_r>
   1e9b2:	2800      	cmp	r0, #0
   1e9b4:	d108      	bne.n	1e9c8 <__swbuf_r+0x94>
   1e9b6:	6822      	ldr	r2, [r4, #0]
   1e9b8:	2301      	movs	r3, #1
   1e9ba:	e7db      	b.n	1e974 <__swbuf_r+0x40>
   1e9bc:	0021      	movs	r1, r4
   1e9be:	0030      	movs	r0, r6
   1e9c0:	f7fe fbc6 	bl	1d150 <_fflush_r>
   1e9c4:	2800      	cmp	r0, #0
   1e9c6:	d0e3      	beq.n	1e990 <__swbuf_r+0x5c>
   1e9c8:	2501      	movs	r5, #1
   1e9ca:	426d      	negs	r5, r5
   1e9cc:	e7e0      	b.n	1e990 <__swbuf_r+0x5c>
   1e9ce:	0021      	movs	r1, r4
   1e9d0:	0030      	movs	r0, r6
   1e9d2:	f7fd fa29 	bl	1be28 <__swsetup_r>
   1e9d6:	2800      	cmp	r0, #0
   1e9d8:	d1f6      	bne.n	1e9c8 <__swbuf_r+0x94>
   1e9da:	230c      	movs	r3, #12
   1e9dc:	5ee0      	ldrsh	r0, [r4, r3]
   1e9de:	6923      	ldr	r3, [r4, #16]
   1e9e0:	b281      	uxth	r1, r0
   1e9e2:	e7ba      	b.n	1e95a <__swbuf_r+0x26>
   1e9e4:	f7fe fc0e 	bl	1d204 <__sinit>
   1e9e8:	e7ad      	b.n	1e946 <__swbuf_r+0x12>
   1e9ea:	46c0      	nop			; (mov r8, r8)
   1e9ec:	ffffdfff 	.word	0xffffdfff

0001e9f0 <_wcrtomb_r>:
   1e9f0:	b570      	push	{r4, r5, r6, lr}
   1e9f2:	001d      	movs	r5, r3
   1e9f4:	4b11      	ldr	r3, [pc, #68]	; (1ea3c <_wcrtomb_r+0x4c>)
   1e9f6:	b084      	sub	sp, #16
   1e9f8:	681b      	ldr	r3, [r3, #0]
   1e9fa:	0004      	movs	r4, r0
   1e9fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   1e9fe:	2900      	cmp	r1, #0
   1ea00:	d00e      	beq.n	1ea20 <_wcrtomb_r+0x30>
   1ea02:	2b00      	cmp	r3, #0
   1ea04:	d016      	beq.n	1ea34 <_wcrtomb_r+0x44>
   1ea06:	20e0      	movs	r0, #224	; 0xe0
   1ea08:	581e      	ldr	r6, [r3, r0]
   1ea0a:	002b      	movs	r3, r5
   1ea0c:	0020      	movs	r0, r4
   1ea0e:	47b0      	blx	r6
   1ea10:	1c43      	adds	r3, r0, #1
   1ea12:	d103      	bne.n	1ea1c <_wcrtomb_r+0x2c>
   1ea14:	2300      	movs	r3, #0
   1ea16:	602b      	str	r3, [r5, #0]
   1ea18:	338a      	adds	r3, #138	; 0x8a
   1ea1a:	6023      	str	r3, [r4, #0]
   1ea1c:	b004      	add	sp, #16
   1ea1e:	bd70      	pop	{r4, r5, r6, pc}
   1ea20:	2b00      	cmp	r3, #0
   1ea22:	d009      	beq.n	1ea38 <_wcrtomb_r+0x48>
   1ea24:	22e0      	movs	r2, #224	; 0xe0
   1ea26:	a901      	add	r1, sp, #4
   1ea28:	589e      	ldr	r6, [r3, r2]
   1ea2a:	0020      	movs	r0, r4
   1ea2c:	002b      	movs	r3, r5
   1ea2e:	2200      	movs	r2, #0
   1ea30:	47b0      	blx	r6
   1ea32:	e7ed      	b.n	1ea10 <_wcrtomb_r+0x20>
   1ea34:	4b02      	ldr	r3, [pc, #8]	; (1ea40 <_wcrtomb_r+0x50>)
   1ea36:	e7e6      	b.n	1ea06 <_wcrtomb_r+0x16>
   1ea38:	4b01      	ldr	r3, [pc, #4]	; (1ea40 <_wcrtomb_r+0x50>)
   1ea3a:	e7f3      	b.n	1ea24 <_wcrtomb_r+0x34>
   1ea3c:	20000018 	.word	0x20000018
   1ea40:	20000448 	.word	0x20000448

0001ea44 <__aeabi_dcmpun>:
   1ea44:	b570      	push	{r4, r5, r6, lr}
   1ea46:	4e0e      	ldr	r6, [pc, #56]	; (1ea80 <__aeabi_dcmpun+0x3c>)
   1ea48:	030d      	lsls	r5, r1, #12
   1ea4a:	031c      	lsls	r4, r3, #12
   1ea4c:	0049      	lsls	r1, r1, #1
   1ea4e:	005b      	lsls	r3, r3, #1
   1ea50:	0b2d      	lsrs	r5, r5, #12
   1ea52:	0d49      	lsrs	r1, r1, #21
   1ea54:	0b24      	lsrs	r4, r4, #12
   1ea56:	0d5b      	lsrs	r3, r3, #21
   1ea58:	42b1      	cmp	r1, r6
   1ea5a:	d004      	beq.n	1ea66 <__aeabi_dcmpun+0x22>
   1ea5c:	4908      	ldr	r1, [pc, #32]	; (1ea80 <__aeabi_dcmpun+0x3c>)
   1ea5e:	2000      	movs	r0, #0
   1ea60:	428b      	cmp	r3, r1
   1ea62:	d008      	beq.n	1ea76 <__aeabi_dcmpun+0x32>
   1ea64:	bd70      	pop	{r4, r5, r6, pc}
   1ea66:	4305      	orrs	r5, r0
   1ea68:	2001      	movs	r0, #1
   1ea6a:	2d00      	cmp	r5, #0
   1ea6c:	d1fa      	bne.n	1ea64 <__aeabi_dcmpun+0x20>
   1ea6e:	4904      	ldr	r1, [pc, #16]	; (1ea80 <__aeabi_dcmpun+0x3c>)
   1ea70:	2000      	movs	r0, #0
   1ea72:	428b      	cmp	r3, r1
   1ea74:	d1f6      	bne.n	1ea64 <__aeabi_dcmpun+0x20>
   1ea76:	4314      	orrs	r4, r2
   1ea78:	0020      	movs	r0, r4
   1ea7a:	1e44      	subs	r4, r0, #1
   1ea7c:	41a0      	sbcs	r0, r4
   1ea7e:	e7f1      	b.n	1ea64 <__aeabi_dcmpun+0x20>
   1ea80:	000007ff 	.word	0x000007ff

0001ea84 <k.4571>:
   1ea84:	428a2f98 71374491 b5c0fbcf e9b5dba5     ./.B.D7q........
   1ea94:	3956c25b 59f111f1 923f82a4 ab1c5ed5     [.V9...Y..?..^..
   1eaa4:	d807aa98 12835b01 243185be 550c7dc3     .....[....1$.}.U
   1eab4:	72be5d74 80deb1fe 9bdc06a7 c19bf174     t].r........t...
   1eac4:	e49b69c1 efbe4786 0fc19dc6 240ca1cc     .i...G.........$
   1ead4:	2de92c6f 4a7484aa 5cb0a9dc 76f988da     o,.-..tJ...\...v
   1eae4:	983e5152 a831c66d b00327c8 bf597fc7     RQ>.m.1..'....Y.
   1eaf4:	c6e00bf3 d5a79147 06ca6351 14292967     ....G...Qc..g)).
   1eb04:	27b70a85 2e1b2138 4d2c6dfc 53380d13     ...'8!...m,M..8S
   1eb14:	650a7354 766a0abb 81c2c92e 92722c85     Ts.e..jv.....,r.
   1eb24:	a2bfe8a1 a81a664b c24b8b70 c76c51a3     ....Kf..p.K..Ql.
   1eb34:	d192e819 d6990624 f40e3585 106aa070     ....$....5..p.j.
   1eb44:	19a4c116 1e376c08 2748774c 34b0bcb5     .....l7.LwH'...4
   1eb54:	391c0cb3 4ed8aa4a 5b9cca4f 682e6ff3     ...9J..NO..[.o.h
   1eb64:	748f82ee 78a5636f 84c87814 8cc70208     ...toc.x.x......
   1eb74:	90befffa a4506ceb bef9a3f7 c67178f2     .....lP......xq.
   1eb84:	43331104 40c40704 0000147a 00001504     ..3C...@z.......
   1eb94:	00001510 0000151c 00001528 00001534     ........(...4...
   1eba4:	52455355 414f4220 00004452 5f534c4d     USER BOARD..MLS_
   1ebb4:	5f4b4453 5f305f31 00345f50 20626546     SDK_1_0_P_4.Feb 
   1ebc4:	32203531 00323230 333a3731 37313a33     15 2022.17:33:17
	...

0001ebd5 <gParserStartCmdSize>:
   1ebd5:	88000002                                         ...

0001ebd8 <maParserBaseCmd>:
   1ebd8:	0001f288 0001ebf8 00000000 00000009     ................
   1ebe8:	0001f28c 0001f1a8 00000000 00000005     ................

0001ebf8 <maParserLoraCmd>:
   1ebf8:	0001f2a4 00000000 000022d1 00000100     ........."......
   1ec08:	0001f318 00000000 000023cd 00000100     .........#......
   1ec18:	0001f320 00000000 00002409 00000300      ........$......
   1ec28:	0001f290 0001ef78 00000000 00000022     ....x......."...
   1ec38:	0001f2ac 0001ecb8 00000000 00000028     ............(...
   1ec48:	0001f324 00000000 00002c99 00000000     $........,......
   1ec58:	0001f32c 00000000 00002cbd 00000000     ,........,......
   1ec68:	0001f334 00000000 00002cd5 00000000     4........,......
   1ec78:	0001f33c 00000000 00002ecd 00000000     <...............

0001ec88 <maParserLoraGetChCmd>:
   1ec88:	0001f538 00000000 000028cd 00000100     8........(......
   1ec98:	0001f380 00000000 00002ad9 00000100     .........*......
   1eca8:	0001f540 00000000 00002bb5 00000100     @........+......

0001ecb8 <maParserLoraGetCmd>:
   1ecb8:	0001f348 00000000 000024f1 00000000     H........$......
   1ecc8:	0001f34c 00000000 00002561 00000000     L.......a%......
   1ecd8:	0001f350 00000000 000025fd 00000000     P........%......
   1ece8:	0001f358 00000000 00002695 00000000     X........&......
   1ecf8:	0001f360 00000000 0000271d 00000000     `........'......
   1ed08:	0001f6f8 0001ec88 00000000 00000003     ................
   1ed18:	0001f368 00000000 00002c65 00000000     h.......e,......
   1ed28:	0001f370 00000000 00002d4d 00000000     p.......M-......
   1ed38:	0001f374 00000000 000030c9 00000000     t........0......
   1ed48:	0001f380 00000000 000031d5 00000000     .........1......
   1ed58:	0001f388 00000000 000032f9 00000000     .........2......
   1ed68:	0001f390 00000000 0000332d 00000000     ........-3......
   1ed78:	0001f398 00000000 00003361 00000000     ........a3......
   1ed88:	0001f3a0 00000000 00003395 00000000     .........3......
   1ed98:	0001f3a8 00000000 00003405 00000000     .........4......
   1eda8:	0001f3ac 00000000 00003481 00000000     .........4......
   1edb8:	0001f3b8 00000000 000034b5 00000000     .........4......
   1edc8:	0001f988 00000000 000034e9 00000000     .........4......
   1edd8:	0001f3c4 00000000 00002fe1 00000000     ........./......
   1ede8:	0001f3cc 00000000 00003015 00000000     .........0......
   1edf8:	0001f3d4 00000000 00003045 00000000     ........E0......
   1ee08:	0001f3dc 00000000 00002e05 00000000     ................
   1ee18:	0001f3e0 00000000 00003561 00000000     ........a5......
   1ee28:	0001f3e8 00000000 000035a5 00000000     .........5......
   1ee38:	0001f3fc 00000000 0000362d 00000100     ........-6......
   1ee48:	0001f408 00000000 00003679 00000100     ........y6......
   1ee58:	0001f414 00000000 00003715 00000100     .........7......
   1ee68:	0001f424 00000000 00003861 00000100     $.......a8......
   1ee78:	0001f430 00000000 000038e1 00000100     0........8......
   1ee88:	0001f438 0001ef38 00000000 00000001     8...8...........
   1ee98:	0001f440 00000000 00003931 00000000     @.......19......
   1eea8:	0001f448 00000000 00003965 00000000     H.......e9......
   1eeb8:	0001f454 00000000 00003991 00000000     T........9......
   1eec8:	0001f45c 00000000 000039bd 00000000     \........9......
   1eed8:	0001f498 00000000 000039f1 00000000     .........9......
   1eee8:	0001f468 00000000 00003a21 00000000     h.......!:......
   1eef8:	0001f474 00000000 00003a2d 00000000     t.......-:......
   1ef08:	0001f484 00000000 00003a39 00000000     ........9:......
   1ef18:	0001f494 00000000 00003a6d 00000000     ........m:......
   1ef28:	0001f4a8 00000000 00003b19 00000000     .........;......

0001ef38 <maParserLoraGetSubBandCmd>:
   1ef38:	0001f380 00000000 000029c9 00000100     .........)......

0001ef48 <maParserLoraSetChCmd>:
   1ef48:	0001f538 00000000 00002855 00000200     8.......U(......
   1ef58:	0001f380 00000000 00002a71 00000200     ........q*......
   1ef68:	0001f540 00000000 00002b25 00000300     @.......%+......

0001ef78 <maParserLoraSetCmd>:
   1ef78:	0001f348 00000000 000024b5 00000100     H........$......
   1ef88:	0001f34c 00000000 00002525 00000100     L.......%%......
   1ef98:	0001f350 00000000 0000258d 00000100     P........%......
   1efa8:	0001f358 00000000 0000263d 00000100     X.......=&......
   1efb8:	0001f360 00000000 000026c5 00000100     `........&......
   1efc8:	0001f4bc 00000000 0000274d 00000100     ........M'......
   1efd8:	0001f4c4 00000000 000027a5 00000100     .........'......
   1efe8:	0001f4cc 00000000 000027fd 00000100     .........'......
   1eff8:	0001f368 00000000 00002c29 00000100     h.......),......
   1f008:	0001f6f8 0001ef48 00000000 00000003     ....H...........
   1f018:	0001f370 00000000 00002ce1 00000200     p........,......
   1f028:	0001f4d4 00000000 00003215 00000100     .........2......
   1f038:	0001f388 00000000 00003261 00000100     ........a2......
   1f048:	0001f390 00000000 000032ad 00000100     .........2......
   1f058:	0001f3a8 00000000 000033c9 00000100     .........3......
   1f068:	0001f3ac 00000000 00003431 00000100     ........14......
   1f078:	0001f4d8 00000000 00003075 00000100     ........u0......
   1f088:	0001f3c4 00000000 00002f7d 00000100     ........}/......
   1f098:	0001f3cc 00000000 00002ee5 00000100     ................
   1f0a8:	0001f3d4 00000000 00002f31 00000100     ........1/......
   1f0b8:	0001f3dc 00000000 00002dad 00000500     .........-......
   1f0c8:	0001f3e0 00000000 00003515 00000100     .........5......
   1f0d8:	0001f3fc 00000000 00003605 00000200     .........6......
   1f0e8:	0001f414 00000000 000036c9 00000200     .........6......
   1f0f8:	0001f4e0 00000000 00003775 00000200     ........u7......
   1f108:	0001f4f0 00000000 000037c5 00000200     .........7......
   1f118:	0001f424 00000000 00003815 00000200     $........8......
   1f128:	0001f430 00000000 000038b1 00000200     0........8......
   1f138:	0001f374 00000000 000030fd 00000100     t........0......
   1f148:	0001f500 00000000 00003149 00000100     ........I1......
   1f158:	0001f514 00000000 00003199 00000100     .........1......
   1f168:	0001f438 0001f198 00000000 00000001     8...............
   1f178:	0001f4a8 00000000 00003a9d 00000100     .........:......
   1f188:	0001f524 00000000 00003add 00000100     $........:......

0001f198 <maParserLoraSetSubBandCmd>:
   1f198:	0001f380 00000000 0000291d 00000200     .........)......

0001f1a8 <maParserSysCmd>:
   1f1a8:	0001f290 0001f278 00000000 00000001     ....x...........
   1f1b8:	0001f294 00000000 00003e31 00000000     ........1>......
   1f1c8:	0001f2a4 00000000 00003e15 00000000     .........>......
   1f1d8:	0001f2ac 0001f1f8 00000000 00000008     ................
   1f1e8:	0001f2b0 00000000 00003e55 00000200     ........U>......

0001f1f8 <maParserSysGetCmd>:
   1f1f8:	0001f2b8 00000000 00003bed 00000000     .........;......
   1f208:	0001f2bc 00000000 00003bc1 00000000     .........;......
   1f218:	0001f2c4 00000000 00003c05 00000000     .........<......
   1f228:	0001f2d0 00000000 00003c95 00000000     .........<......
   1f238:	0001f2dc 00000000 00003cdd 00000000     .........<......
   1f248:	0001f2ec 00000000 00003d39 00000000     ........9=......
   1f258:	0001f2fc 00000000 00003d89 00000000     .........=......
   1f268:	0001f30c 00000000 00003dfd 00000000     .........=......

0001f278 <maParserSysSetCmd>:
   1f278:	0001f2c4 00000000 00003c35 00000100     ........5<......
   1f288:	0063616d 00737973 00746573 74636166     mac.sys.set.fact
   1f298:	5279726f 54455345 00000000 65736572     oryRESET....rese
   1f2a8:	00000074 00746567 65656c73 00000070     t...get.sleep...
   1f2b8:	00726576 75657768 00000069 74737563     ver.hweui...cust
   1f2c8:	61706d6f 006d6172 70797263 6e736f74     omparam.cryptosn
   1f2d8:	00000000 70797263 65646f74 69756576     ....cryptodeveui
   1f2e8:	00000000 70797263 6f6a6f74 75656e69     ....cryptojoineu
   1f2f8:	00000069 70797263 6b746f74 666e696d     i...cryptotkminf
   1f308:	0000006f 74737563 64696d6f 00000000     o...customid....
   1f318:	6e696f6a 00000000 00007874 73756170     join....tx..paus
   1f328:	00000065 75736572 0000656d 65766173     e...resume..save
   1f338:	00000000 63726f66 414e4565 00454c42     ....forceENABLE.
   1f348:	00007264 00726461 61766564 00726464     dr..adr.devaddr.
   1f358:	65766564 00006975 6e696f6a 00697565     deveui..joineui.
   1f368:	69727770 00007864 00327872 64676761     pwridx..rx2.aggd
   1f378:	6c637963 00000065 74617473 00007375     cycle...status..
   1f388:	78746572 00000000 73706572 00000000     retx....reps....
   1f398:	6e67726d 00000000 626e7767 00000000     mrgn....gwnb....
   1f3a8:	00007261 65647872 3179616c 00000000     ar..rxdelay1....
   1f3b8:	65647872 3279616c 00000000 636e7973     rxdelay2....sync
   1f3c8:	00000000 74637075 00000072 74636e64     ....upctr...dnct
   1f3d8:	00000072 0074626c 6c636465 00737361     r...lbt.edclass.
   1f3e8:	6c636465 73737361 6f707075 64657472     edclasssupported
   1f3f8:	00000000 7361636d 616e6574 00656c62     ....mcastenable.
   1f408:	7361636d 636e6474 00007274 7361636d     mcastdnctr..mcas
   1f418:	76656474 72646461 00000000 7361636d     tdevaddr....mcas
   1f428:	65726674 00000071 7361636d 00726474     tfreq...mcastdr.
   1f438:	62627573 00646e61 72746b70 00697373     subband.pktrssi.
   1f448:	70667369 69646e65 0000676e 6c647369     isfpending..isdl
   1f458:	006b6361 7473616c 64696863 00000000     ack.lastchid....
   1f468:	72666e63 79727465 00746e63 6e636e75     cnfretrycnt.uncn
   1f478:	74657266 6e637972 00000074 5074786e     fretrycnt...nxtP
   1f488:	6f6c7961 69536461 0000657a 6e696f6a     ayloadSize..join
   1f498:	79747564 6c637963 6d697465 00000065     dutycycletime...
   1f4a8:	6e696f6a 6b636162 6566666f 6c62616e     joinbackoffenabl
   1f4b8:	00000065 736b776e 0079656b 73707061     e...nwkskey.apps
   1f4c8:	0079656b 6b707061 00007965 00746162     key.appkey..bat.
   1f4d8:	6b6e696c 006b6863 7361636d 6b776e74     linkchk.mcastnwk
   1f4e8:	79656b73 00000000 7361636d 70706174     skey....mcastapp
   1f4f8:	79656b73 00000000 70797263 65646f74     skey....cryptode
   1f508:	616e6576 64656c62 00000000 74736574     venabled....test
   1f518:	65646f6d 62616e65 0064656c 4678616d     modeenabled.maxF
   1f528:	50746e63 70557364 61567464 0000006c     cntPdsUpdtVal...
   1f538:	71657266 00000000 61727264 0065676e     freq....drrange.
   1f548:	00001fa6 00002018 00002022 0000202c     ..... .." .., ..
   1f558:	00002036 00002040 00002068 00002072     6 ..@ ..h ..r ..
   1f568:	00002086 00002090 0000209a 000020a4     . ... ... ... ..
   1f578:	000020ae 000020b8 00001f92 0000204a     . ... ......J ..
   1f588:	00002054 0000205e 0000207c 00001f92     T ..^ ..| ......
   1f598:	00001f92 00001f92 000020c2 000020e6     ......... ... ..
   1f5a8:	000020f0 0000210e 00002118 00002122     . ...!...!.."!..
   1f5b8:	0000212c 00002136 00002140 000020dc     ,!..6!..@!... ..
   1f5c8:	0000214a 00002154 0000215e 00002168     J!..T!..^!..h!..
   1f5d8:	00002172 0000219a 000021a4 000021b8     r!...!...!...!..
   1f5e8:	000021c2 000021cc 000021d6 000021e0     .!...!...!...!..
   1f5f8:	000021ea 00001f92 0000217c 00002186     .!......|!...!..
   1f608:	00002190 000021ae 00002104 000020fa     .!...!...!... ..
   1f618:	00001f92 000021f4 5f63616d 00207872     .....!..mac_rx .
   1f628:	5f6b6361 65636572 64657669 00000000     ack_received....
   1f638:	5f746f6e 6e696f6a 00006465 61766e69     not_joined..inva
   1f648:	5f64696c 61726170 0000006d 7379656b     lid_param...keys
   1f658:	746f6e5f 696e695f 00000074 656c6973     _not_init...sile
   1f668:	0000746e 6d617266 756f635f 7265746e     nt..fram_counter
   1f678:	7272655f 6a65725f 5f6e696f 6465656e     _err_rejoin_need
   1f688:	00006465 61766e69 5f64696c 746e6366     ed..invalid_fcnt
   1f698:	00000072 5f63696d 6f727265 00000072     r...mic_error...
   1f6a8:	61766e69 5f64696c 7079746d 00000065     invalid_mtype...
   1f6b8:	61766e69 5f64696c 66667562 6c5f7265     invalid_buffer_l
   1f6c8:	74676e65 00000068 5f63616d 73756170     ength...mac_paus
   1f6d8:	00006465 7361636d 64685f74 6e695f72     ed..mcast_hdr_in
   1f6e8:	696c6176 00000064 665f6f6e 5f656572     valid...no_free_
   1f6f8:	00006863 79737562 00000000 615f6f6e     ch..busy....no_a
   1f708:	00206b63 6e696f6a 5f6e695f 676f7270     ck .join_in_prog
   1f718:	73736572 00000000 6f736572 65637275     ress....resource
   1f728:	616e755f 6c696176 656c6261 00000000     _unavailable....
   1f738:	61766e69 5f64696c 75716572 00747365     invalid_request.
   1f748:	61766e69 5f64696c 6b636170 00007465     invalid_packet..
   1f758:	5f63616d 6f5f7874 0000006b 69646172     mac_tx_ok...radi
   1f768:	78745f6f 006b6f5f 69646172 6f6e5f6f     o_tx_ok.radio_no
   1f778:	7461645f 00000061 69646172 78745f6f     _data...radio_tx
   1f788:	6d69745f 74756f65 00000000 745f7874     _timeout....tx_t
   1f798:	6f656d69 00007475 69646172 61645f6f     imeout..radio_da
   1f7a8:	735f6174 00657a69 69646172 6e695f6f     ta_size.radio_in
   1f7b8:	696c6176 65725f64 00000071 69646172     valid_req...radi
   1f7c8:	75625f6f 00007973 69646172 756f5f6f     o_busy..radio_ou
   1f7d8:	666f5f74 6e61725f 00006567 69646172     t_of_range..radi
   1f7e8:	6e755f6f 5f707573 72747461 00000000     o_unsup_attr....
   1f7f8:	69646172 68635f6f 656e6e61 75625f6c     radio_channel_bu
   1f808:	00007973 00706261 6161746f 00000000     sy..abp.otaa....
   1f818:	646e6142 20732520 20746f6e 70707573     Band %s not supp
   1f828:	6574726f 000a0d64 00006b6f 00666e63     orted...ok..cnf.
   1f838:	6e636e75 00000066                       uncnf...

0001f840 <gapParseIsmBand>:
   1f840:	0001f990 0001f994 0001f998 0001f9a0     ................
   1f850:	0001f9a8 0001f9b0 0001f9b8 0001f9c0     ................
   1f860:	0001f9c8 0001f9d0 0001f9d8 0001f9e0     ................
   1f870:	0001f9e8 0001f9f0 0001f9f8 0001fa00     ................

0001f880 <gapParseJoinStatus>:
   1f880:	0001fa10 0001fa18 0001f6f0 0001f794     ................
   1f890:	0001f69c                                ....

0001f894 <gapParseOnOff>:
   1f894:	0001fa08 0001fa0c                       ........

0001f89c <gapParserBool>:
   1f89c:	0001f91c 0001f924                       ....$...

0001f8a4 <gapParserEdClass>:
   1f8a4:	0001f92c 0001f934 0001f93c 0001f944     ,...4...<...D...

0001f8b4 <gapParserLorawanStatus>:
   1f8b4:	0001f954 0001f770 0001f7a0 0001f7b0     T...p...........
   1f8c4:	0001f7c4 0001f7d0 0001f7e4 0001f7f8     ................
   1f8d4:	0001f830 0001f638 0001f644 0001f654     0...8...D...T...
   1f8e4:	0001f664 0001f66c 0001f960 0001f6d0     d...l...`.......
   1f8f4:	0001f6f0 0001f6fc 0001f974 0001f70c     ........t.......
   1f904:	0001f720 0001f738 0001f97c 0001f794      ...8...|.......
   1f914:	0001f780 0001f748 736c6166 00000065     ....H...false...
   1f924:	65757274 00000000 53414c43 00412053     true....CLASS A.
   1f934:	53414c43 00422053 53414c43 00432053     CLASS B.CLASS C.
   1f944:	53414c43 4e492053 494c4156 00000044     CLASS INVALID...
   1f954:	69646172 6b6f5f6f 00000000 61766e69     radio_ok....inva
   1f964:	5f64696c 61746164 6e656c5f 00000000     lid_data_len....
   1f974:	615f6f6e 00006b63 75736e75 726f7070     no_ack..unsuppor
   1f984:	5f646574 646e6162 00000000 00383638     ted_band....868.
   1f994:	00333334 3139616e 00000035 31397561     433.na915...au91
   1f9a4:	00000035 3239726b 00000030 396e706a     5...kr920...jpn9
   1f9b4:	00003332 396e7262 00003332 39626d63     23..brn923..cmb9
   1f9c4:	00003332 39736e69 00003332 736f616c     23..ins923..laos
   1f9d4:	00333239 32397a6e 00000033 32397073     923.nz923...sp92
   1f9e4:	00000033 396e7774 00003332 69616874     3...twn923..thai
   1f9f4:	00333239 396d7476 00003332 38646e69     923.vtm923..ind8
   1fa04:	00003536 0066666f 00006e6f 696e6564     65..off.on..deni
   1fa14:	00006465 65636361 64657470 00000000     ed..accepted....
   1fa24:	6c250a0d 000a0d64 6e617473 00796264     ..%ld...standby.
   1fa34:	6b636162 00007075 00727265 6978450a     backup..err..Exi
   1fa44:	676e6974 656c5320 0d0a7065 00000000     ting Sleep......

0001fa54 <gapParserSysStatus>:
   1fa54:	0001f830 0001f644 0001fa3c 656c730a     0...D...<....sle
   1fa64:	6f5f7065 6c25206b 736d2064 00000d0a     ep_ok %ld ms....
   1fa74:	00000a0d 00004c78 00004c78 00004c46     ....xL..xL..FL..
   1fa84:	00004c78 00004c46 00004c2c 00004c2c     xL..FL..,L..,L..
   1fa94:	00004c78 00004c78 00004c78 00004c78     xL..xL..xL..xL..
   1faa4:	00004c78 00004c78 00004c78 00004c78     xL..xL..xL..xL..
   1fab4:	00004c78 00004c78 00004c78 00004c78     xL..xL..xL..xL..
   1fac4:	00004c78 00004c78 00004c78 00004c78     xL..xL..xL..xL..
   1fad4:	00004c78 00004c78 00004c78 00004c46     xL..xL..xL..FL..
   1fae4:	00004c78 00004c46 00004c78 00004c78     xL..FL..xL..xL..
   1faf4:	00004c78 00004c78 00004c78 00004c78     xL..xL..xL..xL..
   1fb04:	00004c78 00004c78 00004c78 00004c78     xL..xL..xL..xL..
   1fb14:	00004c78 00004c78 00004c78 00004c78     xL..xL..xL..xL..
   1fb24:	00004c78 00004c78 00004c78 00004c78     xL..xL..xL..xL..
   1fb34:	00004c78 00004c78 00004c78 00004c78     xL..xL..xL..xL..
   1fb44:	00004c78 00004c78 00004c78 00004c78     xL..xL..xL..xL..
   1fb54:	00004c78 00004c78 00004c78 00004c78     xL..xL..xL..xL..
   1fb64:	00004c78 00004c78 00004c78 00004c78     xL..xL..xL..xL..
   1fb74:	00004c78 00004c46 00004c46 00004c4e     xL..FL..FL..NL..
   1fb84:	00004c4e 00004c4e 00004c4e 42000000     NL..NL..NL.....B
   1fb94:	42000400 42000800 42000c00 42001000     ...B...B...B...B
   1fba4:	43000400 00006b72 00006b6e 00006b6e     ...Crk..nk..nk..
   1fbb4:	00006bd4 00006bd4 00006b88 00006b78     .k...k...k..xk..
   1fbc4:	00006b8e 00006bc2 00006d78 00006d58     .k...k..xm..Xm..
   1fbd4:	00006d58 00006df2 00006d6a 00006d86     Xm...m..jm...m..
   1fbe4:	00006d5c 00006d94 00006dd6 00006e30     \m...m...m..0n..
   1fbf4:	00006e72 00006e72 00006e72 00006e22     rn..rn..rn.."n..
   1fc04:	00006e3e 00006e14 00006e4c 00006e62     >n...n..Ln..bn..
   1fc14:	0000764a 00007740 0000774a 00007754     Jv..@w..Jw..Tw..
   1fc24:	0000775e 00007790 0000779a 000077a4     ^w...w...w...w..
   1fc34:	000077ae 000077b8 42002000 42002400     .w...w... .B.$.B
   1fc44:	42002800 42002c00 43000800 00000002     .(.B.,.B...C....
   1fc54:	00000100 00000002 00000200 00000002     ................
   1fc64:	00000400 00000002 00000800 00000003     ................
   1fc74:	00000004                                ....

0001fc78 <AdvChannels923>:
   1fc78:	3706ea00 3706ea00 ff100100 3709f740     ...7...7....@..7
   1fc88:	3709f740 ff100100                       @..7....

0001fc90 <DefaultChannels923>:
   1fc90:	50015001                                .P.P

0001fc94 <DefaultDrParamsAS>:
   1fc94:	00330008 01070cdf 0033000a 01070bce     ..3.......3.....
   1fca4:	0b33000e 01070ac6 3573001a 010709c2     ..3.......s5....
   1fcb4:	7df20031 010708be f2f20053 010707bc     1..}....S.......
   1fcc4:	f2f2003c 010807f1 f2f20064 000a00ce     <.......d.......

0001fcd4 <SubBandDutyCycle923>:
   1fcd4:	00000064                                d...

0001fcd8 <SubBandParams923>:
   1fcd8:	35c36d80 37502800 00000000              .m.5.(P7....

0001fce4 <pds_reg_as_item_list>:
   1fce4:	20002553 00200004 20002573 25c00104     S%. .. .s%. ...%
   1fcf4:	200024fe ea010204                       .$. ....

0001fcfc <DefaultChannels915AU>:
   1fcfc:	50015001 50015001 50015001 50015001     .P.P.P.P.P.P.P.P
   1fd0c:	50015001 50015001 50015001 50015001     .P.P.P.P.P.P.P.P
   1fd1c:	50015001 50015001 50015001 50015001     .P.P.P.P.P.P.P.P
   1fd2c:	50015001 50015001 50015001 50015001     .P.P.P.P.P.P.P.P
   1fd3c:	50015001 50015001 50015001 50015001     .P.P.P.P.P.P.P.P
   1fd4c:	50015001 50015001 50015001 50015001     .P.P.P.P.P.P.P.P
   1fd5c:	50015001 50015001 50015001 50015001     .P.P.P.P.P.P.P.P
   1fd6c:	50015001 50015001 50015001 50015001     .P.P.P.P.P.P.P.P
   1fd7c:	66016601 66016601 66016601 66016601     .f.f.f.f.f.f.f.f

0001fd8c <DefaultDrParamsAU>:
   1fd8c:	00330008 01070cdf 0033000b 01070bce     ..3.......3.....
   1fd9c:	00330012 01070ac6 0073001c 010709c2     ..3.......s.....
   1fdac:	00f2003d 010708be 00f20053 010707bc     =.......S.......
   1fdbc:	00f2003d 010908be 00000000 010a0000     =...............
   1fdcc:	00350007 01090c0c 00810005 01090b06     ..5.............
   1fddc:	00f20007 01090a01 00f2000c 010909fe     ................
   1fdec:	00f20016 010908fc 00f2002a 010907fc     ........*.......

0001fdfc <pds_reg_au_item_list>:
   1fdfc:	20002583 00900008 20002627 95010108     .%. ....'&. ....

0001fe0c <AdvChannels433>:
   1fe0c:	19d1b9d8 19d1b9d8 ff0c0101 19d4c718     ................
   1fe1c:	19d4c718 ff0c0101 19d7d458 19d7d458     ........X...X...
   1fe2c:	ff0c0101                                ....

0001fe30 <AdvChannels868>:
   1fe30:	33be27a0 33be27a0 ff100101 33c134e0     .'.3.'.3.....4.3
   1fe40:	33c134e0 ff100101 33c44220 33c44220     .4.3.... B.3 B.3
   1fe50:	ff100101                                ....

0001fe54 <DefaultChannels433>:
   1fe54:	50015001 00005001                       .P.P.P..

0001fe5c <DefaultChannels868>:
   1fe5c:	50015001 00005001                       .P.P.P..

0001fe64 <DefaultDrparamsEU>:
   1fe64:	00330008 01070cdf 0033000b 01070bd3     ..3.......3.....
   1fe74:	00330017 01070acc 0073001c 010709c2     ..3.......s.....
   1fe84:	00f2003d 010708be 00f20053 010707bc     =.......S.......
   1fe94:	00f2003c 010807f1 00f20064 000a00ce     <.......d.......

0001fea4 <SubBandDutyCycle868>:
   1fea4:	006403e8 03e80064 0064000a              ..d.d.....d.

0001feb0 <SubBandParams433>:
   1feb0:	19cf0e40 19ea8580 00000000              @...........

0001febc <SubBandParams868>:
   1febc:	337055c0 338eda40 00000000 338eda41     .Up3@..3....A..3
   1fecc:	33bca100 00000000 33bca101 33c5c8c0     ...3.......3...3
   1fedc:	00000000 33c74f60 33cef080 00000000     ....`O.3...3....
   1feec:	33d1fdc0 33d5ce50 00000000 33d691a0     ...3P..3.......3
   1fefc:	33db2580 00000000                       .%.3....

0001ff04 <pds_reg_eu868_fid1_item_list>:
   1ff04:	20002553 00200003                       S%. .. .

0001ff0c <pds_reg_eu868_fid2_item_list>:
   1ff0c:	20002573 00c0000b                       s%. ....

0001ff14 <AdvChannels865>:
   1ff14:	338fce64 338fce64 ff1e0100 3394fe84     d..3d..3.......3
   1ff24:	3394fe84 ff1e0100 339de1e8 339de1e8     ...3.......3...3
   1ff34:	ff1e0100                                ....

0001ff38 <DefaultChannels865>:
   1ff38:	50015001 00005001                       .P.P.P..

0001ff40 <DefaultDrParamsIN>:
   1ff40:	00330008 01070cdf 0033000a 01070bce     ..3.......3.....
   1ff50:	0033000e 01070ac6 0073001a 010709c2     ..3.......s.....
   1ff60:	00f20031 010708be 00f20053 010707bc     1.......S.......
   1ff70:	00000000 010a0000 00f20008 000a00fe     ................

0001ff80 <pds_reg_ind_item_list>:
   1ff80:	20002553 00200006 20002573 25c00106     S%. .. .s%. ...%

0001ff90 <AdvChannels923JP>:
   1ff90:	3706ea00 3706ea00 ff100101 3709f740     ...7...7....@..7
   1ffa0:	3709f740 ff100101                       @..7....

0001ffa8 <DefaultChannels923JP>:
   1ffa8:	50015001                                .P.P

0001ffac <DefaultDrParamsJP>:
   1ffac:	00330008 01070cdf 0033000a 01070bce     ..3.......3.....
   1ffbc:	0b33000e 01070ac6 3573001a 010709c2     ..3.......s5....
   1ffcc:	7df20031 010708be f2f20053 010707bc     1..}....S.......
   1ffdc:	f2f2003c 010807f1 f2f20064 000a00ce     <.......d.......

0001ffec <SubBandDutyCycleJP923>:
   1ffec:	000a0064                                d...

0001fff0 <SubBandParamsJP923>:
   1fff0:	36d61600 36f7a7c0 00000000 36fab500     ...6...6.......6
   20000:	37502800 00000000                       .(P7....

00020008 <pds_reg_jpn_fid1_item_list>:
   20008:	20002553 00200007 20002573 25c00107     S%. .. .s%. ...%

00020018 <AdvChannels920KR>:
   20018:	36f62120 36f62120 ff0e0100 36f92e60      !.6 !.6....`..6
   20028:	36f92e60 ff0e0100 36fc3ba0 36fc3ba0     `..6.....;.6.;.6
   20038:	ff0e0100                                ....

0002003c <DefaultChannels920KR>:
   2003c:	50015001 00005001                       .P.P.P..

00020044 <DefaultDrParamsKR>:
   20044:	00330008 01070cdf 0033000a 01070bce     ..3.......3.....
   20054:	0033000e 01070ac6 0073001a 010709c2     ..3.......s.....
   20064:	00f20031 010708be 00f20053 010707bc     1.......S.......

00020074 <pds_reg_kr_fid1_item_list>:
   20074:	20002553 00200005 20002573 25c00105     S%. .. .s%. ...%

00020084 <DefaultChannels915>:
   20084:	30013001 30013001 30013001 30013001     .0.0.0.0.0.0.0.0
   20094:	30013001 30013001 30013001 30013001     .0.0.0.0.0.0.0.0
   200a4:	30013001 30013001 30013001 30013001     .0.0.0.0.0.0.0.0
   200b4:	30013001 30013001 30013001 30013001     .0.0.0.0.0.0.0.0
   200c4:	30013001 30013001 30013001 30013001     .0.0.0.0.0.0.0.0
   200d4:	30013001 30013001 30013001 30013001     .0.0.0.0.0.0.0.0
   200e4:	30013001 30013001 30013001 30013001     .0.0.0.0.0.0.0.0
   200f4:	30013001 30013001 30013001 30013001     .0.0.0.0.0.0.0.0
   20104:	44014401 44014401 44014401 44014401     .D.D.D.D.D.D.D.D

00020114 <DefaultDrParamsNA>:
   20114:	000b0012 01070ac6 00350005 01070906     ..........5.....
   20124:	007d0007 01070801 00f2000c 010707fe     ..}.............
   20134:	00f20016 010908fc 00000000 010a0000     ................
   20144:	00000000 010a0000 00000000 010a0000     ................
   20154:	00350023 01090cd5 00810007 01090b06     #.5.............
   20164:	00f20007 01090a01 00f2000c 010909fe     ................
   20174:	00f20016 010908fc 00f2002a 010907fc     ........*.......

00020184 <pds_reg_na_item_list>:
   20184:	20002583 00900002 20002627 95010102     .%. ....'&. ....
   20194:	0000a708 0000a708 0000a708 0000a708     ................
   201a4:	0000a76e 0000a7d4 0000a786 0000a76e     n...........n...

000201b4 <keySlots>:
   201b4:	0b030200 0a090e0c                       ........

000201bc <taskHandlers>:
   201bc:	0000f115 000154f9 00014b0d 0000e78d     .....T...K......
   201cc:	0000fbc5                                ....

000201d0 <tc_interrupt_vectors.13496>:
   201d0:	14131211 00000015 614c0a0d 72207473     ..........Last r
   201e0:	74657365 75616320 203a6573 00000000     eset cause: ....
   201f0:	74737953 52206d65 74657365 71655220     System Reset Req
   20200:	74736575 0000000d 63746157 676f6468     uest....Watchdog
   20210:	73655220 000d7465 65747845 6c616e72      Reset..External
   20220:	73655220 000d7465 776f7242 754f206e      Reset..Brown Ou
   20230:	33332074 74654420 6f746365 65522072     t 33 Detector Re
   20240:	0d746573 00000000 776f7242 754f206e     set.....Brown Ou
   20250:	32312074 74654420 6f746365 65522072     t 12 Detector Re
   20260:	0d746573 00000000 65776f50 6e4f2d72     set.....Power-On
   20270:	73655220 000d7465 61526f4c 204e4157      Reset..LoRaWAN 
   20280:	63617453 5055206b 0080000d 00000000     Stack UP........

00020290 <CSWTCH.144>:
   20290:	00000000 40fe8480 00000000 410e8480     .......@.......A
   202a0:	00000000 411e8480                       .......A

000202a8 <FskSyncWordBuff>:
   202a8:	01c194c1                                         ...

000202ab <macEndDevCmdReplyLen>:
   202ab:	02010201 01010203 01000002              ............

000202b7 <maxEIRPTable>:
   202b7:	0d0c0a08 1412100e 1b1a1815 24211e1d     ..............!$
	...

000202c8 <pds_mac_fid1_item_list>:
   202c8:	20002c52 00010000 20002c50 06010100     R,. ....P,. ....
   202d8:	20002be4 0c040200 20002c53 15010300     .+. ....S,. ....
   202e8:	20002c54 1b040400 20002ca4 24040500     T,. .....,. ...$
   202f8:	20002c80 2d040600 20002c94 36100700     .,. ...-.,. ...6
   20308:	20002c84 4b100800 20002c6e 60040900     .,. ...Kn,. ...`
   20318:	20002c3d 69010b00 20002bec 6f010a00     =,. ...i.+. ...o
   20328:	20002c24 75020c00 20002c26 7c020d00     $,. ...u&,. ...|
   20338:	20002c28 83020e00 20002c2a 8a020f00     (,. ....*,. ....
   20348:	20002c2c 91021000 20002c2e 98021100     ,,. .....,. ....
   20358:	20002c30 9f011200 20002c31 a5011300     0,. ....1,. ....
   20368:	20002c36 b1011500 20002c35 ab011400     6,. ....5,. ....
   20378:	20002bdc b7041600                       .+. ....

00020380 <pds_mac_fid2_item_list>:
   20380:	20002bc6 00050001 20002c4a 0a010101     .+. ....J,. ....
   20390:	20002b5c 10010201 20002b5d 16040301     \+. ....]+. ....
   203a0:	20002b61 1f100401 20002b71 34100501     a+. ....q+. ...4
   203b0:	20002ba1 49100601 20002bb1 5e080701     .+. ...I.+. ...^
   203c0:	20002bb9 6b080801 20002c32 78020901     .+. ...k2,. ...x
   203d0:	20002be0 7f040a01 20002bd8 88040b01     .+. .....+. ....
   203e0:	20002c3b 91010c01 20002d7c 97010d01     ;,. ....|-. ....
   203f0:	20002d7d 9d010e01                       }-. ....

000203f8 <lorawanHandlers>:
   203f8:	000149bd 000148d1 00014a95 000000fd     .I...H...J......

00020408 <radioTaskHandlers>:
   20408:	000160c9 000161c9 00015f0d 00015791     .`...a..._...W..
   20418:	000164f1 00017170 00017140 00017152     .d..pq..@q..Rq..
   20428:	00017094 00017152 00017136 00017152     .p..Rq..6q..Rq..
   20438:	00017094 00017140 00017140 00017136     .p..@q..@q..6q..
   20448:	00017094 0001709c 0001709c 0001709c     .p...p...p...p..
   20458:	00017158 00017140 00017140 00017114     Xq..@q..@q...q..
   20468:	000171f8 00017114 00017136 00017114     .q...q..6q...q..
   20478:	000171f8 00017140 00017140 00017136     .q..@q..@q..6q..
   20488:	000171f8 0001709c 0001709c 0001709c     .q...p...p...p..
   20498:	00017202 000174f0 00017440 00017440     .r...t..@t..@t..
   204a8:	0001743e 000174e2 000174e2 000174d8     >t...t...t...t..
   204b8:	0001743e 000174e2 000174d8 000174e2     >t...t...t...t..
   204c8:	0001743e 000174e8 000174e8 000174e8     >t...t...t...t..
   204d8:	00017578 000182c0 000182a2 0001825c     xu..........\...
   204e8:	0001817a 0001825c 00018294 0001825c     z...\.......\...
   204f8:	0001817a 000182a2 000182a2 00018294     z...............
   20508:	0001817a 00018172 00018172 00018172     z...r...r...r...
   20518:	000184d8 00018b20 000189e0 000189e0     .... ...........
   20528:	000189dc 00018af8 00018af8 00018aea     ................
   20538:	000189dc 00018af8 00018aea 00018af8     ................
   20548:	000189dc 00018b00 00018b00 00018b00     ................
   20558:	00018d04                                ....

0002055c <_global_impure_ptr>:
   2055c:	20000020 00000043 49534f50 00000058      .. C...POSIX...
   2056c:	0000002e 0000000a 33323130 37363534     ........01234567
   2057c:	62613938 66656463 6a696867 6e6d6c6b     89abcdefghijklmn
   2058c:	7271706f 76757473 7a797877 00000000     opqrstuvwxyz....
   2059c:	0001acca 0001ad9e 0001ad9e 0001acb6     ................
   205ac:	0001ad9e 0001ad9e 0001ad9e 0001ad9e     ................
   205bc:	0001ad9e 0001ad9e 0001ad70 0001a882     ........p.......
   205cc:	0001ad9e 0001a878 0001a88c 0001ad9e     ....x...........
   205dc:	0001acc0 0001aa4c 0001aa4c 0001aa4c     ....L...L...L...
   205ec:	0001aa4c 0001aa4c 0001aa4c 0001aa4c     L...L...L...L...
   205fc:	0001aa4c 0001aa4c 0001ad9e 0001ad9e     L...L...........
   2060c:	0001ad9e 0001ad9e 0001ad9e 0001ad9e     ................
   2061c:	0001ad9e 0001ad9e 0001ad9e 0001ad9e     ................
   2062c:	0001ad86 0001acda 0001ad9e 0001acda     ................
   2063c:	0001ad9e 0001ad9e 0001ad9e 0001ad9e     ................
   2064c:	0001ac40 0001ad9e 0001ad9e 0001ac4a     @...........J...
   2065c:	0001ad9e 0001ad9e 0001ad9e 0001ad9e     ................
   2066c:	0001ad9e 0001ac78 0001ad9e 0001ad9e     ....x...........
   2067c:	0001aca6 0001ad9e 0001ad9e 0001ad9e     ................
   2068c:	0001ad9e 0001ad9e 0001ad9e 0001ad9e     ................
   2069c:	0001ad9e 0001ad9e 0001ad9e 0001aa8c     ................
   206ac:	0001aac2 0001acda 0001acda 0001acda     ................
   206bc:	0001ab6a 0001aac2 0001ad9e 0001ad9e     j...............
   206cc:	0001ab74 0001ad9e 0001ab86 0001ad9a     t...............
   206dc:	0001abb4 0001abde 0001ad9e 0001abe8     ................
   206ec:	0001ad9e 0001ad96 0001ad9e 0001ad9e     ................
   206fc:	0001a8da 00464e49 00666e69 004e414e     ....INF.inf.NAN.
   2070c:	006e616e 33323130 37363534 42413938     nan.0123456789AB
   2071c:	46454443 00000000 33323130 37363534     CDEF....01234567
   2072c:	62613938 66656463 00000000 6c756e28     89abcdef....(nul
   2073c:	0000296c                                l)..

00020740 <blanks.7238>:
   20740:	20202020 20202020 20202020 20202020                     

00020750 <zeroes.7239>:
   20750:	30303030 30303030 30303030 30303030     0000000000000000

00020760 <_ctype_>:
   20760:	20202000 20202020 28282020 20282828     .         ((((( 
   20770:	20202020 20202020 20202020 20202020                     
   20780:	10108820 10101010 10101010 10101010      ...............
   20790:	04040410 04040404 10040404 10101010     ................
   207a0:	41411010 41414141 01010101 01010101     ..AAAAAA........
   207b0:	01010101 01010101 01010101 10101010     ................
   207c0:	42421010 42424242 02020202 02020202     ..BBBBBB........
   207d0:	02020202 02020202 02020202 10101010     ................
   207e0:	00000020 00000000 00000000 00000000      ...............
	...
   20864:	69666e49 7974696e 00000000 004e614e     Infinity....NaN.
   20874:	00000000                                ....

00020878 <__mprec_bigtens>:
   20878:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
   20888:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
   20898:	7f73bf3c 75154fdd                       <.s..O.u

000208a0 <__mprec_tens>:
   208a0:	00000000 3ff00000 00000000 40240000     .......?......$@
   208b0:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
   208c0:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
   208d0:	00000000 412e8480 00000000 416312d0     .......A......cA
   208e0:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
   208f0:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
   20900:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
   20910:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
   20920:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
   20930:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
   20940:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
   20950:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
   20960:	79d99db4 44ea7843                       ...yCx.D

00020968 <p05.6055>:
   20968:	00000005 00000019 0000007d              ........}...

00020974 <_init>:
   20974:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   20976:	46c0      	nop			; (mov r8, r8)
   20978:	bcf8      	pop	{r3, r4, r5, r6, r7}
   2097a:	bc08      	pop	{r3}
   2097c:	469e      	mov	lr, r3
   2097e:	4770      	bx	lr

00020980 <__init_array_start>:
   20980:	0001befd 	.word	0x0001befd

00020984 <__frame_dummy_init_array_entry>:
   20984:	000000dd                                ....

00020988 <_fini>:
   20988:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2098a:	46c0      	nop			; (mov r8, r8)
   2098c:	bcf8      	pop	{r3, r4, r5, r6, r7}
   2098e:	bc08      	pop	{r3}
   20990:	469e      	mov	lr, r3
   20992:	4770      	bx	lr

00020994 <__fini_array_start>:
   20994:	000000b5 	.word	0x000000b5
