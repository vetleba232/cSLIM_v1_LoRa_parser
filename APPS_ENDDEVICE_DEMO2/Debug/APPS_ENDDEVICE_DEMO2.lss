
APPS_ENDDEVICE_DEMO2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00020900  00000000  00000000  00010000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00020900  00020900  00030900  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     000009c8  20000000  00020908  00040000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .lpram        00000000  30000000  30000000  000409c8  2**0
                  CONTENTS
  4 .bss          00002620  200009c8  000212d0  000409c8  2**3
                  ALLOC
  5 .stack        00002000  20002fe8  000238f0  000409c8  2**0
                  ALLOC
  6 .ARM.attributes 00000028  00000000  00000000  000409c8  2**0
                  CONTENTS, READONLY
  7 .comment      0000008c  00000000  00000000  000409f0  2**0
                  CONTENTS, READONLY
  8 .debug_info   000a5846  00000000  00000000  00040a7c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000103ea  00000000  00000000  000e62c2  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00027b79  00000000  00000000  000f66ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00002110  00000000  00000000  0011e225  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00002800  00000000  00000000  00120335  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  000352ee  00000000  00000000  00122b35  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0003b470  00000000  00000000  00157e23  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000ba3f9  00000000  00000000  00193293  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00007070  00000000  00000000  0024d68c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	e8 4f 00 20 19 78 00 00 15 78 00 00 15 78 00 00     .O. .x...x...x..
	...
      2c:	15 78 00 00 00 00 00 00 00 00 00 00 15 78 00 00     .x...........x..
      3c:	15 78 00 00 15 78 00 00 15 78 00 00 29 51 00 00     .x...x...x..)Q..
      4c:	c1 48 00 00 15 78 00 00 15 78 00 00 15 78 00 00     .H...x...x...x..
      5c:	15 78 00 00 59 5f 00 00 69 5f 00 00 79 5f 00 00     .x..Y_..i_..y_..
      6c:	89 5f 00 00 99 5f 00 00 a9 5f 00 00 15 78 00 00     ._..._..._...x..
      7c:	15 78 00 00 15 78 00 00 d1 73 00 00 e1 73 00 00     .x...x...s...s..
      8c:	f1 73 00 00 01 74 00 00 11 74 00 00 0d 46 00 00     .s...t...t...F..
      9c:	15 78 00 00 15 78 00 00 15 78 00 00 15 78 00 00     .x...x...x...x..
      ac:	15 78 00 00 00 00 00 00                             .x......

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	200009c8 	.word	0x200009c8
      d4:	00000000 	.word	0x00000000
      d8:	00020908 	.word	0x00020908

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	200009cc 	.word	0x200009cc
     108:	00020908 	.word	0x00020908
     10c:	00020908 	.word	0x00020908
     110:	00000000 	.word	0x00000000

00000114 <atcab_release>:
/** \brief release (free) the global ATCADevice instance.
 *  This must be called in order to release or free up the interface.
 *  \return Returns ATCA_SUCCESS .
 */
ATCA_STATUS atcab_release(void)
{
     114:	b510      	push	{r4, lr}
    {
        return status;
    }
    _gDevice = NULL;
#else
    deleteATCADevice(&_gDevice);
     116:	4802      	ldr	r0, [pc, #8]	; (120 <atcab_release+0xc>)
     118:	4b02      	ldr	r3, [pc, #8]	; (124 <atcab_release+0x10>)
     11a:	4798      	blx	r3
#endif
    return ATCA_SUCCESS;
}
     11c:	2000      	movs	r0, #0
     11e:	bd10      	pop	{r4, pc}
     120:	200009e4 	.word	0x200009e4
     124:	00000cb9 	.word	0x00000cb9

00000128 <atcab_init>:
{
     128:	b510      	push	{r4, lr}
     12a:	b082      	sub	sp, #8
     12c:	0004      	movs	r4, r0
    if (_gDevice)
     12e:	4b14      	ldr	r3, [pc, #80]	; (180 <atcab_init+0x58>)
     130:	681b      	ldr	r3, [r3, #0]
     132:	2b00      	cmp	r3, #0
     134:	d001      	beq.n	13a <atcab_init+0x12>
        atcab_release();
     136:	4b13      	ldr	r3, [pc, #76]	; (184 <atcab_init+0x5c>)
     138:	4798      	blx	r3
    _gDevice = newATCADevice(cfg);
     13a:	0020      	movs	r0, r4
     13c:	4b12      	ldr	r3, [pc, #72]	; (188 <atcab_init+0x60>)
     13e:	4798      	blx	r3
     140:	4b0f      	ldr	r3, [pc, #60]	; (180 <atcab_init+0x58>)
     142:	6018      	str	r0, [r3, #0]
    if (_gDevice == NULL)
     144:	2800      	cmp	r0, #0
     146:	d019      	beq.n	17c <atcab_init+0x54>
    if (cfg->devtype == ATECC608A)
     148:	7862      	ldrb	r2, [r4, #1]
    return ATCA_SUCCESS;
     14a:	2300      	movs	r3, #0
    if (cfg->devtype == ATECC608A)
     14c:	2a03      	cmp	r2, #3
     14e:	d002      	beq.n	156 <atcab_init+0x2e>
}
     150:	0018      	movs	r0, r3
     152:	b002      	add	sp, #8
     154:	bd10      	pop	{r4, pc}
        if ((status = atcab_read_bytes_zone(ATCA_ZONE_CONFIG, 0, ATCA_CHIPMODE_OFFSET, &_gDevice->mCommands->clock_divider, 1)) != ATCA_SUCCESS)
     156:	6803      	ldr	r3, [r0, #0]
     158:	3301      	adds	r3, #1
     15a:	3a02      	subs	r2, #2
     15c:	9200      	str	r2, [sp, #0]
     15e:	3212      	adds	r2, #18
     160:	2100      	movs	r1, #0
     162:	2000      	movs	r0, #0
     164:	4c09      	ldr	r4, [pc, #36]	; (18c <atcab_init+0x64>)
     166:	47a0      	blx	r4
     168:	1e03      	subs	r3, r0, #0
     16a:	d1f1      	bne.n	150 <atcab_init+0x28>
        _gDevice->mCommands->clock_divider &= ATCA_CHIPMODE_CLOCK_DIV_MASK;
     16c:	4a04      	ldr	r2, [pc, #16]	; (180 <atcab_init+0x58>)
     16e:	6812      	ldr	r2, [r2, #0]
     170:	6811      	ldr	r1, [r2, #0]
     172:	784a      	ldrb	r2, [r1, #1]
     174:	2007      	movs	r0, #7
     176:	4382      	bics	r2, r0
     178:	704a      	strb	r2, [r1, #1]
     17a:	e7e9      	b.n	150 <atcab_init+0x28>
        return ATCA_GEN_FAIL;
     17c:	23e1      	movs	r3, #225	; 0xe1
     17e:	e7e7      	b.n	150 <atcab_init+0x28>
     180:	200009e4 	.word	0x200009e4
     184:	00000115 	.word	0x00000115
     188:	00000c2d 	.word	0x00000c2d
     18c:	0000077d 	.word	0x0000077d

00000190 <atcab_get_addr>:
 *  \param[in] offset Offset Number within the block of data or configuration or OTP zone.
 *  \param[out] addr  Pointer to the address of data or configuration or OTP zone.
 *  \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS atcab_get_addr(uint8_t zone, uint16_t slot, uint8_t block, uint8_t offset, uint16_t* addr)
{
     190:	b510      	push	{r4, lr}
    ATCA_STATUS status = ATCA_SUCCESS;
    uint8_t mem_zone = zone & 0x03;

    if (addr == NULL)
     192:	9c02      	ldr	r4, [sp, #8]
     194:	2c00      	cmp	r4, #0
     196:	d008      	beq.n	1aa <atcab_get_addr+0x1a>
    uint8_t mem_zone = zone & 0x03;
     198:	2403      	movs	r4, #3
     19a:	4020      	ands	r0, r4
    {
        return ATCA_BAD_PARAM;
    }
    if ((mem_zone != ATCA_ZONE_CONFIG) && (mem_zone != ATCA_ZONE_DATA) && (mem_zone != ATCA_ZONE_OTP))
     19c:	d007      	beq.n	1ae <atcab_get_addr+0x1e>
     19e:	2802      	cmp	r0, #2
     1a0:	d00d      	beq.n	1be <atcab_get_addr+0x2e>
     1a2:	2801      	cmp	r0, #1
     1a4:	d003      	beq.n	1ae <atcab_get_addr+0x1e>
    {
        return ATCA_BAD_PARAM;
     1a6:	20e2      	movs	r0, #226	; 0xe2
     1a8:	e012      	b.n	1d0 <atcab_get_addr+0x40>
        return ATCA_BAD_PARAM;
     1aa:	20e2      	movs	r0, #226	; 0xe2
     1ac:	e010      	b.n	1d0 <atcab_get_addr+0x40>
        *addr = 0;
        // Mask the offset
        offset = offset & (uint8_t)0x07;
        if ((mem_zone == ATCA_ZONE_CONFIG) || (mem_zone == ATCA_ZONE_OTP))
        {
            *addr = block << 3;
     1ae:	00d2      	lsls	r2, r2, #3
            *addr |= offset;
     1b0:	2007      	movs	r0, #7
     1b2:	4003      	ands	r3, r0
     1b4:	431a      	orrs	r2, r3
     1b6:	9b02      	ldr	r3, [sp, #8]
     1b8:	801a      	strh	r2, [r3, #0]
            *addr |= block << 8;
        }
    }
    while (0);

    return status;
     1ba:	2000      	movs	r0, #0
     1bc:	e008      	b.n	1d0 <atcab_get_addr+0x40>
            *addr = slot << 3;
     1be:	00c9      	lsls	r1, r1, #3
            *addr  |= offset;
     1c0:	2007      	movs	r0, #7
     1c2:	4003      	ands	r3, r0
     1c4:	430b      	orrs	r3, r1
            *addr |= block << 8;
     1c6:	0212      	lsls	r2, r2, #8
     1c8:	431a      	orrs	r2, r3
     1ca:	9b02      	ldr	r3, [sp, #8]
     1cc:	801a      	strh	r2, [r3, #0]
    return status;
     1ce:	2000      	movs	r0, #0
}
     1d0:	bd10      	pop	{r4, pc}
	...

000001d4 <atcab_get_zone_size>:
 */
ATCA_STATUS atcab_get_zone_size(uint8_t zone, uint16_t slot, size_t* size)
{
    ATCA_STATUS status = ATCA_SUCCESS;

    if (size == NULL)
     1d4:	2a00      	cmp	r2, #0
     1d6:	d03e      	beq.n	256 <atcab_get_zone_size+0x82>
    {
        return ATCA_BAD_PARAM;
    }

    if (_gDevice->mIface->mIfaceCFG->devtype == ATSHA204A)
     1d8:	4b20      	ldr	r3, [pc, #128]	; (25c <atcab_get_zone_size+0x88>)
     1da:	681b      	ldr	r3, [r3, #0]
     1dc:	685b      	ldr	r3, [r3, #4]
     1de:	685b      	ldr	r3, [r3, #4]
     1e0:	785b      	ldrb	r3, [r3, #1]
     1e2:	2b00      	cmp	r3, #0
     1e4:	d113      	bne.n	20e <atcab_get_zone_size+0x3a>
    {
        switch (zone)
     1e6:	2801      	cmp	r0, #1
     1e8:	d009      	beq.n	1fe <atcab_get_zone_size+0x2a>
     1ea:	2800      	cmp	r0, #0
     1ec:	d003      	beq.n	1f6 <atcab_get_zone_size+0x22>
     1ee:	2802      	cmp	r0, #2
     1f0:	d009      	beq.n	206 <atcab_get_zone_size+0x32>
        {
        case ATCA_ZONE_CONFIG: *size = 88; break;
        case ATCA_ZONE_OTP:    *size = 64; break;
        case ATCA_ZONE_DATA:   *size = 32; break;
        default: status = ATCA_BAD_PARAM; break;
     1f2:	20e2      	movs	r0, #226	; 0xe2
     1f4:	e030      	b.n	258 <atcab_get_zone_size+0x84>
        case ATCA_ZONE_CONFIG: *size = 88; break;
     1f6:	2358      	movs	r3, #88	; 0x58
     1f8:	6013      	str	r3, [r2, #0]
    ATCA_STATUS status = ATCA_SUCCESS;
     1fa:	2000      	movs	r0, #0
        case ATCA_ZONE_CONFIG: *size = 88; break;
     1fc:	e02c      	b.n	258 <atcab_get_zone_size+0x84>
        case ATCA_ZONE_OTP:    *size = 64; break;
     1fe:	2340      	movs	r3, #64	; 0x40
     200:	6013      	str	r3, [r2, #0]
    ATCA_STATUS status = ATCA_SUCCESS;
     202:	2000      	movs	r0, #0
        case ATCA_ZONE_OTP:    *size = 64; break;
     204:	e028      	b.n	258 <atcab_get_zone_size+0x84>
        case ATCA_ZONE_DATA:   *size = 32; break;
     206:	2320      	movs	r3, #32
     208:	6013      	str	r3, [r2, #0]
    ATCA_STATUS status = ATCA_SUCCESS;
     20a:	2000      	movs	r0, #0
        case ATCA_ZONE_DATA:   *size = 32; break;
     20c:	e024      	b.n	258 <atcab_get_zone_size+0x84>
        }
    }
    else
    {
        switch (zone)
     20e:	2801      	cmp	r0, #1
     210:	d009      	beq.n	226 <atcab_get_zone_size+0x52>
     212:	2800      	cmp	r0, #0
     214:	d003      	beq.n	21e <atcab_get_zone_size+0x4a>
     216:	2802      	cmp	r0, #2
     218:	d009      	beq.n	22e <atcab_get_zone_size+0x5a>
            else
            {
                status = ATCA_BAD_PARAM;
            }
            break;
        default: status = ATCA_BAD_PARAM; break;
     21a:	20e2      	movs	r0, #226	; 0xe2
     21c:	e01c      	b.n	258 <atcab_get_zone_size+0x84>
        case ATCA_ZONE_CONFIG: *size = 128; break;
     21e:	2380      	movs	r3, #128	; 0x80
     220:	6013      	str	r3, [r2, #0]
    ATCA_STATUS status = ATCA_SUCCESS;
     222:	2000      	movs	r0, #0
        case ATCA_ZONE_CONFIG: *size = 128; break;
     224:	e018      	b.n	258 <atcab_get_zone_size+0x84>
        case ATCA_ZONE_OTP:    *size = 64; break;
     226:	2340      	movs	r3, #64	; 0x40
     228:	6013      	str	r3, [r2, #0]
    ATCA_STATUS status = ATCA_SUCCESS;
     22a:	2000      	movs	r0, #0
        case ATCA_ZONE_OTP:    *size = 64; break;
     22c:	e014      	b.n	258 <atcab_get_zone_size+0x84>
            if (slot < 8)
     22e:	2907      	cmp	r1, #7
     230:	d908      	bls.n	244 <atcab_get_zone_size+0x70>
            else if (slot == 8)
     232:	2908      	cmp	r1, #8
     234:	d00a      	beq.n	24c <atcab_get_zone_size+0x78>
                status = ATCA_BAD_PARAM;
     236:	20e2      	movs	r0, #226	; 0xe2
            else if (slot < 16)
     238:	290f      	cmp	r1, #15
     23a:	d80d      	bhi.n	258 <atcab_get_zone_size+0x84>
                *size = 72;
     23c:	2348      	movs	r3, #72	; 0x48
     23e:	6013      	str	r3, [r2, #0]
    ATCA_STATUS status = ATCA_SUCCESS;
     240:	2000      	movs	r0, #0
     242:	e009      	b.n	258 <atcab_get_zone_size+0x84>
                *size = 36;
     244:	2324      	movs	r3, #36	; 0x24
     246:	6013      	str	r3, [r2, #0]
    ATCA_STATUS status = ATCA_SUCCESS;
     248:	2000      	movs	r0, #0
     24a:	e005      	b.n	258 <atcab_get_zone_size+0x84>
                *size = 416;
     24c:	23d0      	movs	r3, #208	; 0xd0
     24e:	005b      	lsls	r3, r3, #1
     250:	6013      	str	r3, [r2, #0]
    ATCA_STATUS status = ATCA_SUCCESS;
     252:	2000      	movs	r0, #0
     254:	e000      	b.n	258 <atcab_get_zone_size+0x84>
        return ATCA_BAD_PARAM;
     256:	20e2      	movs	r0, #226	; 0xe2
        }
    }

    return status;
}
     258:	4770      	bx	lr
     25a:	46c0      	nop			; (mov r8, r8)
     25c:	200009e4 	.word	0x200009e4

00000260 <atcab_aes>:
 *  \param[out] aes_out  Output data from the AES command is returned here (16
 *                       bytes).
 *  \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS atcab_aes(uint8_t mode, uint16_t key_id, const uint8_t* aes_in, uint8_t* aes_out)
{
     260:	b570      	push	{r4, r5, r6, lr}
     262:	b0b2      	sub	sp, #200	; 0xc8
     264:	0014      	movs	r4, r2
     266:	001d      	movs	r5, r3
    ATCACommand ca_cmd = _gDevice->mCommands;
    ATCA_STATUS status = ATCA_GEN_FAIL;

    do
    {
        if (aes_in == NULL)
     268:	2a00      	cmp	r2, #0
     26a:	d032      	beq.n	2d2 <atcab_aes+0x72>
    ATCACommand ca_cmd = _gDevice->mCommands;
     26c:	4b1a      	ldr	r3, [pc, #104]	; (2d8 <atcab_aes+0x78>)
     26e:	681b      	ldr	r3, [r3, #0]
     270:	681e      	ldr	r6, [r3, #0]
            status = ATCA_BAD_PARAM;
            break;
        }

        // build a AES command
        packet.param1 = mode;
     272:	466b      	mov	r3, sp
     274:	70d8      	strb	r0, [r3, #3]
        packet.param2 = key_id;
     276:	8099      	strh	r1, [r3, #4]
        if (AES_MODE_GFM == (mode & AES_MODE_GFM))
     278:	43c0      	mvns	r0, r0
     27a:	0783      	lsls	r3, r0, #30
     27c:	d00e      	beq.n	29c <atcab_aes+0x3c>
        {
            memcpy(packet.data, aes_in, ATCA_AES_GFM_SIZE);
        }
        else
        {
            memcpy(packet.data, aes_in, AES_DATA_SIZE);
     27e:	2210      	movs	r2, #16
     280:	0021      	movs	r1, r4
     282:	466b      	mov	r3, sp
     284:	1d98      	adds	r0, r3, #6
     286:	4b15      	ldr	r3, [pc, #84]	; (2dc <atcab_aes+0x7c>)
     288:	4798      	blx	r3
        }

        if ((status = atAES(ca_cmd, &packet)) != ATCA_SUCCESS)
     28a:	4669      	mov	r1, sp
     28c:	0030      	movs	r0, r6
     28e:	4b14      	ldr	r3, [pc, #80]	; (2e0 <atcab_aes+0x80>)
     290:	4798      	blx	r3
     292:	1e04      	subs	r4, r0, #0
     294:	d009      	beq.n	2aa <atcab_aes+0x4a>

    }
    while (0);

    return status;
}
     296:	0020      	movs	r0, r4
     298:	b032      	add	sp, #200	; 0xc8
     29a:	bd70      	pop	{r4, r5, r6, pc}
            memcpy(packet.data, aes_in, ATCA_AES_GFM_SIZE);
     29c:	2220      	movs	r2, #32
     29e:	0021      	movs	r1, r4
     2a0:	466b      	mov	r3, sp
     2a2:	1d98      	adds	r0, r3, #6
     2a4:	4b0d      	ldr	r3, [pc, #52]	; (2dc <atcab_aes+0x7c>)
     2a6:	4798      	blx	r3
     2a8:	e7ef      	b.n	28a <atcab_aes+0x2a>
        if ((status = atca_execute_command(&packet, _gDevice)) != ATCA_SUCCESS)
     2aa:	4b0b      	ldr	r3, [pc, #44]	; (2d8 <atcab_aes+0x78>)
     2ac:	6819      	ldr	r1, [r3, #0]
     2ae:	4668      	mov	r0, sp
     2b0:	4b0c      	ldr	r3, [pc, #48]	; (2e4 <atcab_aes+0x84>)
     2b2:	4798      	blx	r3
     2b4:	1e04      	subs	r4, r0, #0
     2b6:	d1ee      	bne.n	296 <atcab_aes+0x36>
        if (aes_out && packet.data[ATCA_COUNT_IDX] >= (3 + AES_DATA_SIZE))
     2b8:	2d00      	cmp	r5, #0
     2ba:	d0ec      	beq.n	296 <atcab_aes+0x36>
     2bc:	466b      	mov	r3, sp
     2be:	799b      	ldrb	r3, [r3, #6]
     2c0:	2b12      	cmp	r3, #18
     2c2:	d9e8      	bls.n	296 <atcab_aes+0x36>
            memcpy(aes_out, &packet.data[ATCA_RSP_DATA_IDX], AES_DATA_SIZE);
     2c4:	2210      	movs	r2, #16
     2c6:	466b      	mov	r3, sp
     2c8:	1dd9      	adds	r1, r3, #7
     2ca:	0028      	movs	r0, r5
     2cc:	4b03      	ldr	r3, [pc, #12]	; (2dc <atcab_aes+0x7c>)
     2ce:	4798      	blx	r3
     2d0:	e7e1      	b.n	296 <atcab_aes+0x36>
            status = ATCA_BAD_PARAM;
     2d2:	24e2      	movs	r4, #226	; 0xe2
     2d4:	e7df      	b.n	296 <atcab_aes+0x36>
     2d6:	46c0      	nop			; (mov r8, r8)
     2d8:	200009e4 	.word	0x200009e4
     2dc:	00019d11 	.word	0x00019d11
     2e0:	00000af1 	.word	0x00000af1
     2e4:	00000cf5 	.word	0x00000cf5

000002e8 <atcab_aes_encrypt>:
 * \param[out] ciphertext  Output ciphertext is returned here (16 bytes).
 *
 * \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS  atcab_aes_encrypt(uint16_t key_id, uint8_t key_block, const uint8_t* plaintext, uint8_t* ciphertext)
{
     2e8:	b510      	push	{r4, lr}
     2ea:	0004      	movs	r4, r0
    uint8_t mode;

    mode = AES_MODE_ENCRYPT | (AES_MODE_KEY_BLOCK_MASK & (key_block << AES_MODE_KEY_BLOCK_POS));
     2ec:	0189      	lsls	r1, r1, #6
    return atcab_aes(mode, key_id, plaintext, ciphertext);
     2ee:	b2c8      	uxtb	r0, r1
     2f0:	0021      	movs	r1, r4
     2f2:	4c01      	ldr	r4, [pc, #4]	; (2f8 <atcab_aes_encrypt+0x10>)
     2f4:	47a0      	blx	r4
}
     2f6:	bd10      	pop	{r4, pc}
     2f8:	00000261 	.word	0x00000261

000002fc <atcab_gendig>:
 *                              "Shared Nonce" mode, otherwise ignored (can be NULL).
 *  \param[in] other_data_size  Size of other_data in bytes.
 *  \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS atcab_gendig(uint8_t zone, uint16_t key_id, const uint8_t *other_data, uint8_t other_data_size)
{
     2fc:	b530      	push	{r4, r5, lr}
     2fe:	b0b3      	sub	sp, #204	; 0xcc
     300:	0014      	movs	r4, r2
    ATCAPacket packet;
    ATCACommand ca_cmd = _gDevice->mCommands;
     302:	4a1e      	ldr	r2, [pc, #120]	; (37c <atcab_gendig+0x80>)
     304:	6812      	ldr	r2, [r2, #0]
     306:	6815      	ldr	r5, [r2, #0]
    ATCA_STATUS status = ATCA_GEN_FAIL;
    bool is_no_mac_key = false;

    if (other_data_size > 0 && other_data == NULL)
     308:	2b00      	cmp	r3, #0
     30a:	d026      	beq.n	35a <atcab_gendig+0x5e>
     30c:	2c00      	cmp	r4, #0
     30e:	d022      	beq.n	356 <atcab_gendig+0x5a>
    }

    do
    {
        // build gendig command
        packet.param1 = zone;
     310:	466a      	mov	r2, sp
     312:	70d0      	strb	r0, [r2, #3]
        packet.param2 = key_id;
     314:	8091      	strh	r1, [r2, #4]

        if (packet.param1 == GENDIG_ZONE_SHARED_NONCE && other_data_size >= ATCA_BLOCK_SIZE)
     316:	2803      	cmp	r0, #3
     318:	d124      	bne.n	364 <atcab_gendig+0x68>
     31a:	2b1f      	cmp	r3, #31
     31c:	d911      	bls.n	342 <atcab_gendig+0x46>
        {
            memcpy(&packet.data[0], &other_data[0], ATCA_BLOCK_SIZE);
     31e:	2220      	movs	r2, #32
     320:	0021      	movs	r1, r4
     322:	466b      	mov	r3, sp
     324:	1d98      	adds	r0, r3, #6
     326:	4b16      	ldr	r3, [pc, #88]	; (380 <atcab_gendig+0x84>)
     328:	4798      	blx	r3
    bool is_no_mac_key = false;
     32a:	2200      	movs	r2, #0
            memcpy(&packet.data[0], &other_data[0], ATCA_BLOCK_SIZE);
     32c:	e01d      	b.n	36a <atcab_gendig+0x6e>
        }
        else if (packet.param1 == GENDIG_ZONE_DATA && other_data_size >= ATCA_WORD_SIZE)
     32e:	2b03      	cmp	r3, #3
     330:	d91b      	bls.n	36a <atcab_gendig+0x6e>
        {
            memcpy(&packet.data[0], &other_data[0], ATCA_WORD_SIZE);
     332:	3204      	adds	r2, #4
     334:	0021      	movs	r1, r4
     336:	466b      	mov	r3, sp
     338:	1d98      	adds	r0, r3, #6
     33a:	4b11      	ldr	r3, [pc, #68]	; (380 <atcab_gendig+0x84>)
     33c:	4798      	blx	r3
            is_no_mac_key = true;
     33e:	2201      	movs	r2, #1
     340:	e013      	b.n	36a <atcab_gendig+0x6e>
    bool is_no_mac_key = false;
     342:	2200      	movs	r2, #0
     344:	e011      	b.n	36a <atcab_gendig+0x6e>
     346:	2200      	movs	r2, #0
     348:	e00f      	b.n	36a <atcab_gendig+0x6e>
        if ((status = atGenDig(ca_cmd, &packet, is_no_mac_key)) != ATCA_SUCCESS)
        {
            break;
        }

        if ((status = atca_execute_command(&packet, _gDevice)) != ATCA_SUCCESS)
     34a:	4b0c      	ldr	r3, [pc, #48]	; (37c <atcab_gendig+0x80>)
     34c:	6819      	ldr	r1, [r3, #0]
     34e:	4668      	mov	r0, sp
     350:	4b0c      	ldr	r3, [pc, #48]	; (384 <atcab_gendig+0x88>)
     352:	4798      	blx	r3
     354:	e00f      	b.n	376 <atcab_gendig+0x7a>
        return ATCA_BAD_PARAM;
     356:	20e2      	movs	r0, #226	; 0xe2
     358:	e00d      	b.n	376 <atcab_gendig+0x7a>
        packet.param1 = zone;
     35a:	466a      	mov	r2, sp
     35c:	70d0      	strb	r0, [r2, #3]
        packet.param2 = key_id;
     35e:	8091      	strh	r1, [r2, #4]
        if (packet.param1 == GENDIG_ZONE_SHARED_NONCE && other_data_size >= ATCA_BLOCK_SIZE)
     360:	2803      	cmp	r0, #3
     362:	d0f0      	beq.n	346 <atcab_gendig+0x4a>
    bool is_no_mac_key = false;
     364:	2200      	movs	r2, #0
        else if (packet.param1 == GENDIG_ZONE_DATA && other_data_size >= ATCA_WORD_SIZE)
     366:	2802      	cmp	r0, #2
     368:	d0e1      	beq.n	32e <atcab_gendig+0x32>
        if ((status = atGenDig(ca_cmd, &packet, is_no_mac_key)) != ATCA_SUCCESS)
     36a:	4669      	mov	r1, sp
     36c:	0028      	movs	r0, r5
     36e:	4b06      	ldr	r3, [pc, #24]	; (388 <atcab_gendig+0x8c>)
     370:	4798      	blx	r3
     372:	2800      	cmp	r0, #0
     374:	d0e9      	beq.n	34a <atcab_gendig+0x4e>

    }
    while (0);

    return status;
}
     376:	b033      	add	sp, #204	; 0xcc
     378:	bd30      	pop	{r4, r5, pc}
     37a:	46c0      	nop			; (mov r8, r8)
     37c:	200009e4 	.word	0x200009e4
     380:	00019d11 	.word	0x00019d11
     384:	00000cf5 	.word	0x00000cf5
     388:	00000a21 	.word	0x00000a21

0000038c <atcab_kdf>:
 *                        encryption is not used, this can be NULL.
 *
 * \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS atcab_kdf(uint8_t mode, uint16_t key_id, const uint32_t details, const uint8_t* message, uint8_t* out_data, uint8_t* out_nonce)
{
     38c:	b5f0      	push	{r4, r5, r6, r7, lr}
     38e:	b0b3      	sub	sp, #204	; 0xcc
     390:	0015      	movs	r5, r2
    ATCA_STATUS status = ATCA_GEN_FAIL;
    uint16_t out_data_size = 0;

    do
    {
        if (message == NULL)
     392:	2b00      	cmp	r3, #0
     394:	d053      	beq.n	43e <atcab_kdf+0xb2>
    ATCACommand ca_cmd = _gDevice->mCommands;
     396:	4a2b      	ldr	r2, [pc, #172]	; (444 <atcab_kdf+0xb8>)
     398:	6812      	ldr	r2, [r2, #0]
     39a:	6814      	ldr	r4, [r2, #0]
        {
            return ATCA_BAD_PARAM;
        }

        // Build the KDF command
        packet.param1 = mode;
     39c:	466a      	mov	r2, sp
     39e:	70d0      	strb	r0, [r2, #3]
        packet.param2 = key_id;
     3a0:	8091      	strh	r1, [r2, #4]

        // Add details parameter
        packet.data[0] = details;
     3a2:	7195      	strb	r5, [r2, #6]
        packet.data[1] = details >> 8;
     3a4:	0a2a      	lsrs	r2, r5, #8
     3a6:	4669      	mov	r1, sp
     3a8:	71ca      	strb	r2, [r1, #7]
        packet.data[2] = details >> 16;
     3aa:	0c2a      	lsrs	r2, r5, #16
     3ac:	720a      	strb	r2, [r1, #8]
        packet.data[3] = details >> 24;
     3ae:	0e2a      	lsrs	r2, r5, #24
     3b0:	724a      	strb	r2, [r1, #9]
     3b2:	2660      	movs	r6, #96	; 0x60
     3b4:	4006      	ands	r6, r0

        // Add input message
        if ((mode & KDF_MODE_ALG_MASK) == KDF_MODE_ALG_AES)
     3b6:	2e20      	cmp	r6, #32
     3b8:	d00d      	beq.n	3d6 <atcab_kdf+0x4a>
            memcpy(&packet.data[KDF_DETAILS_SIZE], message, AES_DATA_SIZE);
        }
        else
        {
            // All other algorithms encode message size in the last byte of details
            memcpy(&packet.data[KDF_DETAILS_SIZE], message, packet.data[3]);
     3ba:	0019      	movs	r1, r3
     3bc:	200a      	movs	r0, #10
     3be:	4468      	add	r0, sp
     3c0:	4b21      	ldr	r3, [pc, #132]	; (448 <atcab_kdf+0xbc>)
     3c2:	4798      	blx	r3
        }

        // Build command
        if ((status = atKDF(ca_cmd, &packet)) != ATCA_SUCCESS)
     3c4:	4669      	mov	r1, sp
     3c6:	0020      	movs	r0, r4
     3c8:	4b20      	ldr	r3, [pc, #128]	; (44c <atcab_kdf+0xc0>)
     3ca:	4798      	blx	r3
     3cc:	1e04      	subs	r4, r0, #0
     3ce:	d009      	beq.n	3e4 <atcab_kdf+0x58>
        }
    }
    while (false);

    return status;
}
     3d0:	0020      	movs	r0, r4
     3d2:	b033      	add	sp, #204	; 0xcc
     3d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
            memcpy(&packet.data[KDF_DETAILS_SIZE], message, AES_DATA_SIZE);
     3d6:	2210      	movs	r2, #16
     3d8:	0019      	movs	r1, r3
     3da:	200a      	movs	r0, #10
     3dc:	4468      	add	r0, sp
     3de:	4b1a      	ldr	r3, [pc, #104]	; (448 <atcab_kdf+0xbc>)
     3e0:	4798      	blx	r3
     3e2:	e7ef      	b.n	3c4 <atcab_kdf+0x38>
        if ((status = atca_execute_command(&packet, _gDevice)) != ATCA_SUCCESS)
     3e4:	4b17      	ldr	r3, [pc, #92]	; (444 <atcab_kdf+0xb8>)
     3e6:	6819      	ldr	r1, [r3, #0]
     3e8:	4668      	mov	r0, sp
     3ea:	4b19      	ldr	r3, [pc, #100]	; (450 <atcab_kdf+0xc4>)
     3ec:	4798      	blx	r3
     3ee:	1e04      	subs	r4, r0, #0
     3f0:	d1ee      	bne.n	3d0 <atcab_kdf+0x44>
            out_data_size = 32;
     3f2:	2720      	movs	r7, #32
        if (((mode & KDF_MODE_ALG_MASK) == KDF_MODE_ALG_PRF) && (details & KDF_DETAILS_PRF_TARGET_LEN_64))
     3f4:	2e00      	cmp	r6, #0
     3f6:	d102      	bne.n	3fe <atcab_kdf+0x72>
     3f8:	05eb      	lsls	r3, r5, #23
     3fa:	d500      	bpl.n	3fe <atcab_kdf+0x72>
            out_data_size = 64;
     3fc:	3720      	adds	r7, #32
        if (out_data != NULL && packet.data[ATCA_COUNT_IDX] >= (ATCA_PACKET_OVERHEAD + out_data_size))
     3fe:	9b38      	ldr	r3, [sp, #224]	; 0xe0
     400:	2b00      	cmp	r3, #0
     402:	d004      	beq.n	40e <atcab_kdf+0x82>
     404:	466b      	mov	r3, sp
     406:	799a      	ldrb	r2, [r3, #6]
     408:	1cfb      	adds	r3, r7, #3
     40a:	429a      	cmp	r2, r3
     40c:	da10      	bge.n	430 <atcab_kdf+0xa4>
        if (out_nonce != NULL && packet.data[ATCA_COUNT_IDX] >= (ATCA_PACKET_OVERHEAD + out_data_size + 32))
     40e:	9b39      	ldr	r3, [sp, #228]	; 0xe4
     410:	2b00      	cmp	r3, #0
     412:	d0dd      	beq.n	3d0 <atcab_kdf+0x44>
     414:	466b      	mov	r3, sp
     416:	799a      	ldrb	r2, [r3, #6]
     418:	003b      	movs	r3, r7
     41a:	3323      	adds	r3, #35	; 0x23
     41c:	429a      	cmp	r2, r3
     41e:	dbd7      	blt.n	3d0 <atcab_kdf+0x44>
            memcpy(out_nonce, &packet.data[ATCA_RSP_DATA_IDX + out_data_size], 32);
     420:	ab32      	add	r3, sp, #200	; 0xc8
     422:	19d9      	adds	r1, r3, r7
     424:	39c1      	subs	r1, #193	; 0xc1
     426:	2220      	movs	r2, #32
     428:	9839      	ldr	r0, [sp, #228]	; 0xe4
     42a:	4b07      	ldr	r3, [pc, #28]	; (448 <atcab_kdf+0xbc>)
     42c:	4798      	blx	r3
     42e:	e7cf      	b.n	3d0 <atcab_kdf+0x44>
            memcpy(out_data, &packet.data[ATCA_RSP_DATA_IDX], out_data_size);
     430:	003a      	movs	r2, r7
     432:	466b      	mov	r3, sp
     434:	1dd9      	adds	r1, r3, #7
     436:	9838      	ldr	r0, [sp, #224]	; 0xe0
     438:	4b03      	ldr	r3, [pc, #12]	; (448 <atcab_kdf+0xbc>)
     43a:	4798      	blx	r3
     43c:	e7e7      	b.n	40e <atcab_kdf+0x82>
            return ATCA_BAD_PARAM;
     43e:	24e2      	movs	r4, #226	; 0xe2
     440:	e7c6      	b.n	3d0 <atcab_kdf+0x44>
     442:	46c0      	nop			; (mov r8, r8)
     444:	200009e4 	.word	0x200009e4
     448:	00019d11 	.word	0x00019d11
     44c:	00000b1d 	.word	0x00000b1d
     450:	00000cf5 	.word	0x00000cf5

00000454 <atcab_nonce_base>:
 *                          needed.
 *
 * \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS atcab_nonce_base(uint8_t mode, uint16_t zero, const uint8_t *num_in, uint8_t* rand_out)
{
     454:	b5f0      	push	{r4, r5, r6, r7, lr}
     456:	b0b3      	sub	sp, #204	; 0xcc
     458:	0016      	movs	r6, r2
     45a:	001d      	movs	r5, r3
    ATCAPacket packet;
    ATCACommand ca_cmd = _gDevice->mCommands;
     45c:	4b1f      	ldr	r3, [pc, #124]	; (4dc <atcab_nonce_base+0x88>)
     45e:	681b      	ldr	r3, [r3, #0]
     460:	681f      	ldr	r7, [r3, #0]
    ATCA_STATUS status = ATCA_GEN_FAIL;
    uint8_t nonce_mode = mode & NONCE_MODE_MASK;
     462:	2303      	movs	r3, #3
     464:	4003      	ands	r3, r0

    do
    {
        // build a nonce command
        packet.param1 = mode;
     466:	466a      	mov	r2, sp
     468:	70d0      	strb	r0, [r2, #3]
        packet.param2 = zero;
     46a:	8091      	strh	r1, [r2, #4]

        // Copy the right amount of NumIn data
        if ((nonce_mode == NONCE_MODE_SEED_UPDATE || nonce_mode == NONCE_MODE_NO_SEED_UPDATE))
     46c:	2b01      	cmp	r3, #1
     46e:	d905      	bls.n	47c <atcab_nonce_base+0x28>
                memcpy(packet.data, num_in, 32);
            }
        }
        else
        {
            return ATCA_BAD_PARAM;
     470:	24e2      	movs	r4, #226	; 0xe2
        else if (nonce_mode == NONCE_MODE_PASSTHROUGH)
     472:	2b03      	cmp	r3, #3
     474:	d022      	beq.n	4bc <atcab_nonce_base+0x68>

    }
    while (0);

    return status;
}
     476:	0020      	movs	r0, r4
     478:	b033      	add	sp, #204	; 0xcc
     47a:	bdf0      	pop	{r4, r5, r6, r7, pc}
            memcpy(packet.data, num_in, NONCE_NUMIN_SIZE);
     47c:	2214      	movs	r2, #20
     47e:	0031      	movs	r1, r6
     480:	466b      	mov	r3, sp
     482:	1d98      	adds	r0, r3, #6
     484:	4b16      	ldr	r3, [pc, #88]	; (4e0 <atcab_nonce_base+0x8c>)
     486:	4798      	blx	r3
        if ((status = atNonce(ca_cmd, &packet)) != ATCA_SUCCESS)
     488:	4669      	mov	r1, sp
     48a:	0038      	movs	r0, r7
     48c:	4b15      	ldr	r3, [pc, #84]	; (4e4 <atcab_nonce_base+0x90>)
     48e:	4798      	blx	r3
     490:	1e04      	subs	r4, r0, #0
     492:	d1f0      	bne.n	476 <atcab_nonce_base+0x22>
        if ((status = atca_execute_command(&packet, _gDevice)) != ATCA_SUCCESS)
     494:	4b11      	ldr	r3, [pc, #68]	; (4dc <atcab_nonce_base+0x88>)
     496:	6819      	ldr	r1, [r3, #0]
     498:	4668      	mov	r0, sp
     49a:	4b13      	ldr	r3, [pc, #76]	; (4e8 <atcab_nonce_base+0x94>)
     49c:	4798      	blx	r3
     49e:	1e04      	subs	r4, r0, #0
     4a0:	d1e9      	bne.n	476 <atcab_nonce_base+0x22>
        if ((rand_out != NULL) && (packet.data[ATCA_COUNT_IDX] >= 35))
     4a2:	2d00      	cmp	r5, #0
     4a4:	d0e7      	beq.n	476 <atcab_nonce_base+0x22>
     4a6:	466b      	mov	r3, sp
     4a8:	799b      	ldrb	r3, [r3, #6]
     4aa:	2b22      	cmp	r3, #34	; 0x22
     4ac:	d9e3      	bls.n	476 <atcab_nonce_base+0x22>
            memcpy(&rand_out[0], &packet.data[ATCA_RSP_DATA_IDX], 32);
     4ae:	2220      	movs	r2, #32
     4b0:	466b      	mov	r3, sp
     4b2:	1dd9      	adds	r1, r3, #7
     4b4:	0028      	movs	r0, r5
     4b6:	4b0a      	ldr	r3, [pc, #40]	; (4e0 <atcab_nonce_base+0x8c>)
     4b8:	4798      	blx	r3
     4ba:	e7dc      	b.n	476 <atcab_nonce_base+0x22>
            if ((mode & NONCE_MODE_INPUT_LEN_MASK) == NONCE_MODE_INPUT_LEN_64)
     4bc:	0683      	lsls	r3, r0, #26
     4be:	d506      	bpl.n	4ce <atcab_nonce_base+0x7a>
                memcpy(packet.data, num_in, 64);
     4c0:	2240      	movs	r2, #64	; 0x40
     4c2:	0031      	movs	r1, r6
     4c4:	466b      	mov	r3, sp
     4c6:	1d98      	adds	r0, r3, #6
     4c8:	4b05      	ldr	r3, [pc, #20]	; (4e0 <atcab_nonce_base+0x8c>)
     4ca:	4798      	blx	r3
     4cc:	e7dc      	b.n	488 <atcab_nonce_base+0x34>
                memcpy(packet.data, num_in, 32);
     4ce:	2220      	movs	r2, #32
     4d0:	0031      	movs	r1, r6
     4d2:	466b      	mov	r3, sp
     4d4:	1d98      	adds	r0, r3, #6
     4d6:	4b02      	ldr	r3, [pc, #8]	; (4e0 <atcab_nonce_base+0x8c>)
     4d8:	4798      	blx	r3
     4da:	e7d5      	b.n	488 <atcab_nonce_base+0x34>
     4dc:	200009e4 	.word	0x200009e4
     4e0:	00019d11 	.word	0x00019d11
     4e4:	00000a51 	.word	0x00000a51
     4e8:	00000cf5 	.word	0x00000cf5

000004ec <atcab_nonce_rand>:
 *                        here. Can be NULL if not needed.
 *
 *  \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS atcab_nonce_rand(const uint8_t *num_in, uint8_t* rand_out)
{
     4ec:	b510      	push	{r4, lr}
     4ee:	0002      	movs	r2, r0
     4f0:	000b      	movs	r3, r1
    return atcab_nonce_base(NONCE_MODE_SEED_UPDATE, 0, num_in, rand_out);
     4f2:	2100      	movs	r1, #0
     4f4:	2000      	movs	r0, #0
     4f6:	4c01      	ldr	r4, [pc, #4]	; (4fc <atcab_nonce_rand+0x10>)
     4f8:	47a0      	blx	r4
}
     4fa:	bd10      	pop	{r4, pc}
     4fc:	00000455 	.word	0x00000455

00000500 <atcab_random>:
 * \param[out] rand_out  32 bytes of random data is returned here.
 *
 * \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS atcab_random(uint8_t *rand_out)
{
     500:	b530      	push	{r4, r5, lr}
     502:	b0b3      	sub	sp, #204	; 0xcc
     504:	0005      	movs	r5, r0
    ATCAPacket packet;
    ATCACommand ca_cmd = _gDevice->mCommands;
     506:	4b12      	ldr	r3, [pc, #72]	; (550 <atcab_random+0x50>)
     508:	681b      	ldr	r3, [r3, #0]
     50a:	6818      	ldr	r0, [r3, #0]
    ATCA_STATUS status = ATCA_GEN_FAIL;

    do
    {
        // build an random command
        packet.param1 = RANDOM_SEED_UPDATE;
     50c:	2300      	movs	r3, #0
     50e:	466a      	mov	r2, sp
     510:	70d3      	strb	r3, [r2, #3]
        packet.param2 = 0x0000;
     512:	8093      	strh	r3, [r2, #4]

        if ((status = atRandom(ca_cmd, &packet)) != ATCA_SUCCESS)
     514:	4669      	mov	r1, sp
     516:	4b0f      	ldr	r3, [pc, #60]	; (554 <atcab_random+0x54>)
     518:	4798      	blx	r3
     51a:	1e04      	subs	r4, r0, #0
     51c:	d002      	beq.n	524 <atcab_random+0x24>
    }
    while (0);


    return status;
}
     51e:	0020      	movs	r0, r4
     520:	b033      	add	sp, #204	; 0xcc
     522:	bd30      	pop	{r4, r5, pc}
        if ((status = atca_execute_command(&packet, _gDevice)) != ATCA_SUCCESS)
     524:	4b0a      	ldr	r3, [pc, #40]	; (550 <atcab_random+0x50>)
     526:	6819      	ldr	r1, [r3, #0]
     528:	4668      	mov	r0, sp
     52a:	4b0b      	ldr	r3, [pc, #44]	; (558 <atcab_random+0x58>)
     52c:	4798      	blx	r3
     52e:	1e04      	subs	r4, r0, #0
     530:	d1f5      	bne.n	51e <atcab_random+0x1e>
        if (packet.data[ATCA_COUNT_IDX] != RANDOM_RSP_SIZE)
     532:	466b      	mov	r3, sp
     534:	799b      	ldrb	r3, [r3, #6]
     536:	2b23      	cmp	r3, #35	; 0x23
     538:	d001      	beq.n	53e <atcab_random+0x3e>
            status = ATCA_RX_FAIL;
     53a:	24e6      	movs	r4, #230	; 0xe6
     53c:	e7ef      	b.n	51e <atcab_random+0x1e>
        if (rand_out)
     53e:	2d00      	cmp	r5, #0
     540:	d0ed      	beq.n	51e <atcab_random+0x1e>
            memcpy(rand_out, &packet.data[ATCA_RSP_DATA_IDX], RANDOM_NUM_SIZE);
     542:	2220      	movs	r2, #32
     544:	466b      	mov	r3, sp
     546:	1dd9      	adds	r1, r3, #7
     548:	0028      	movs	r0, r5
     54a:	4b04      	ldr	r3, [pc, #16]	; (55c <atcab_random+0x5c>)
     54c:	4798      	blx	r3
     54e:	e7e6      	b.n	51e <atcab_random+0x1e>
     550:	200009e4 	.word	0x200009e4
     554:	00000a8d 	.word	0x00000a8d
     558:	00000cf5 	.word	0x00000cf5
     55c:	00019d11 	.word	0x00019d11

00000560 <atcab_read_zone>:
 *  \param[in]  len     Length of the data to be read. Must be either 4 or 32.
 *
 *  returns ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS atcab_read_zone(uint8_t zone, uint16_t slot, uint8_t block, uint8_t offset, uint8_t *data, uint8_t len)
{
     560:	b5f0      	push	{r4, r5, r6, r7, lr}
     562:	b0b9      	sub	sp, #228	; 0xe4
     564:	9003      	str	r0, [sp, #12]
     566:	a83e      	add	r0, sp, #248	; 0xf8
     568:	c880      	ldmia	r0!, {r7}
     56a:	7805      	ldrb	r5, [r0, #0]
    uint16_t addr;

    do
    {
        // Check the input parameters
        if (data == NULL)
     56c:	2f00      	cmp	r7, #0
     56e:	d00a      	beq.n	586 <atcab_read_zone+0x26>
    ATCACommand ca_cmd = _gDevice->mCommands;
     570:	4822      	ldr	r0, [pc, #136]	; (5fc <atcab_read_zone+0x9c>)
     572:	6800      	ldr	r0, [r0, #0]
     574:	6806      	ldr	r6, [r0, #0]
        {
            return ATCA_BAD_PARAM;
        }

        if (len != 4 && len != 32)
     576:	2d04      	cmp	r5, #4
     578:	d016      	beq.n	5a8 <atcab_read_zone+0x48>
        {
            return ATCA_BAD_PARAM;
     57a:	24e2      	movs	r4, #226	; 0xe2
        if (len != 4 && len != 32)
     57c:	2d20      	cmp	r5, #32
     57e:	d004      	beq.n	58a <atcab_read_zone+0x2a>
        memcpy(data, &packet.data[1], len);
    }
    while (0);

    return status;
}
     580:	0020      	movs	r0, r4
     582:	b039      	add	sp, #228	; 0xe4
     584:	bdf0      	pop	{r4, r5, r6, r7, pc}
            return ATCA_BAD_PARAM;
     586:	24e2      	movs	r4, #226	; 0xe2
     588:	e7fa      	b.n	580 <atcab_read_zone+0x20>
        if ((status = atcab_get_addr(zone, slot, block, offset, &addr)) != ATCA_SUCCESS)
     58a:	200e      	movs	r0, #14
     58c:	ac02      	add	r4, sp, #8
     58e:	46a4      	mov	ip, r4
     590:	4460      	add	r0, ip
     592:	9000      	str	r0, [sp, #0]
     594:	9803      	ldr	r0, [sp, #12]
     596:	4c1a      	ldr	r4, [pc, #104]	; (600 <atcab_read_zone+0xa0>)
     598:	47a0      	blx	r4
     59a:	1e04      	subs	r4, r0, #0
     59c:	d1f0      	bne.n	580 <atcab_read_zone+0x20>
            zone = zone | ATCA_ZONE_READWRITE_32;
     59e:	2380      	movs	r3, #128	; 0x80
     5a0:	9a03      	ldr	r2, [sp, #12]
     5a2:	431a      	orrs	r2, r3
     5a4:	9203      	str	r2, [sp, #12]
     5a6:	e009      	b.n	5bc <atcab_read_zone+0x5c>
        if ((status = atcab_get_addr(zone, slot, block, offset, &addr)) != ATCA_SUCCESS)
     5a8:	200e      	movs	r0, #14
     5aa:	ac02      	add	r4, sp, #8
     5ac:	46a4      	mov	ip, r4
     5ae:	4460      	add	r0, ip
     5b0:	9000      	str	r0, [sp, #0]
     5b2:	9803      	ldr	r0, [sp, #12]
     5b4:	4c12      	ldr	r4, [pc, #72]	; (600 <atcab_read_zone+0xa0>)
     5b6:	47a0      	blx	r4
     5b8:	1e04      	subs	r4, r0, #0
     5ba:	d1e1      	bne.n	580 <atcab_read_zone+0x20>
        packet.param1 = zone;
     5bc:	a906      	add	r1, sp, #24
     5be:	466b      	mov	r3, sp
     5c0:	7b1b      	ldrb	r3, [r3, #12]
     5c2:	70cb      	strb	r3, [r1, #3]
        packet.param2 = addr;
     5c4:	230e      	movs	r3, #14
     5c6:	aa02      	add	r2, sp, #8
     5c8:	4694      	mov	ip, r2
     5ca:	4463      	add	r3, ip
     5cc:	881b      	ldrh	r3, [r3, #0]
     5ce:	808b      	strh	r3, [r1, #4]
        if ((status = atRead(ca_cmd, &packet)) != ATCA_SUCCESS)
     5d0:	0030      	movs	r0, r6
     5d2:	4b0c      	ldr	r3, [pc, #48]	; (604 <atcab_read_zone+0xa4>)
     5d4:	4798      	blx	r3
     5d6:	1e04      	subs	r4, r0, #0
     5d8:	d1d2      	bne.n	580 <atcab_read_zone+0x20>
        if ((status = atca_execute_command(&packet, _gDevice)) != ATCA_SUCCESS)
     5da:	4b08      	ldr	r3, [pc, #32]	; (5fc <atcab_read_zone+0x9c>)
     5dc:	6819      	ldr	r1, [r3, #0]
     5de:	a806      	add	r0, sp, #24
     5e0:	4b09      	ldr	r3, [pc, #36]	; (608 <atcab_read_zone+0xa8>)
     5e2:	4798      	blx	r3
     5e4:	1e04      	subs	r4, r0, #0
     5e6:	d1cb      	bne.n	580 <atcab_read_zone+0x20>
        memcpy(data, &packet.data[1], len);
     5e8:	002a      	movs	r2, r5
     5ea:	2117      	movs	r1, #23
     5ec:	ab02      	add	r3, sp, #8
     5ee:	469c      	mov	ip, r3
     5f0:	4461      	add	r1, ip
     5f2:	0038      	movs	r0, r7
     5f4:	4b05      	ldr	r3, [pc, #20]	; (60c <atcab_read_zone+0xac>)
     5f6:	4798      	blx	r3
     5f8:	e7c2      	b.n	580 <atcab_read_zone+0x20>
     5fa:	46c0      	nop			; (mov r8, r8)
     5fc:	200009e4 	.word	0x200009e4
     600:	00000191 	.word	0x00000191
     604:	00000aa5 	.word	0x00000aa5
     608:	00000cf5 	.word	0x00000cf5
     60c:	00019d11 	.word	0x00019d11

00000610 <atcab_read_serial_number>:
 *  \param[out] serial_number  9 byte serial number is returned here.
 *
 *  \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS atcab_read_serial_number(uint8_t* serial_number)
{
     610:	b570      	push	{r4, r5, r6, lr}
     612:	b08a      	sub	sp, #40	; 0x28
     614:	0005      	movs	r5, r0
    ATCA_STATUS status = ATCA_GEN_FAIL;
    uint8_t read_buf[ATCA_BLOCK_SIZE];

    if (!serial_number)
    {
        return ATCA_BAD_PARAM;
     616:	24e2      	movs	r4, #226	; 0xe2
    if (!serial_number)
     618:	2800      	cmp	r0, #0
     61a:	d00b      	beq.n	634 <atcab_read_serial_number+0x24>
    }

    do
    {
        if ((status = atcab_read_zone(ATCA_ZONE_CONFIG, 0, 0, 0, read_buf, ATCA_BLOCK_SIZE)) != ATCA_SUCCESS)
     61c:	2320      	movs	r3, #32
     61e:	9301      	str	r3, [sp, #4]
     620:	ab02      	add	r3, sp, #8
     622:	9300      	str	r3, [sp, #0]
     624:	2300      	movs	r3, #0
     626:	2200      	movs	r2, #0
     628:	2100      	movs	r1, #0
     62a:	2000      	movs	r0, #0
     62c:	4c08      	ldr	r4, [pc, #32]	; (650 <atcab_read_serial_number+0x40>)
     62e:	47a0      	blx	r4
     630:	1e04      	subs	r4, r0, #0
     632:	d002      	beq.n	63a <atcab_read_serial_number+0x2a>
        memcpy(&serial_number[4], &read_buf[8], 5);
    }
    while (0);

    return status;
}
     634:	0020      	movs	r0, r4
     636:	b00a      	add	sp, #40	; 0x28
     638:	bd70      	pop	{r4, r5, r6, pc}
        memcpy(&serial_number[0], &read_buf[0], 4);
     63a:	2204      	movs	r2, #4
     63c:	a902      	add	r1, sp, #8
     63e:	0028      	movs	r0, r5
     640:	4e04      	ldr	r6, [pc, #16]	; (654 <atcab_read_serial_number+0x44>)
     642:	47b0      	blx	r6
        memcpy(&serial_number[4], &read_buf[8], 5);
     644:	1d28      	adds	r0, r5, #4
     646:	2205      	movs	r2, #5
     648:	a904      	add	r1, sp, #16
     64a:	47b0      	blx	r6
     64c:	e7f2      	b.n	634 <atcab_read_serial_number+0x24>
     64e:	46c0      	nop			; (mov r8, r8)
     650:	00000561 	.word	0x00000561
     654:	00019d11 	.word	0x00019d11

00000658 <atcab_read_enc>:
 *  \param[in]  enc_key_id  KeyID of the ReadKey being used.
 *
 *  returns ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS atcab_read_enc(uint16_t key_id, uint8_t block, uint8_t *data, const uint8_t* enc_key, const uint16_t enc_key_id)
{
     658:	b5f0      	push	{r4, r5, r6, r7, lr}
     65a:	46d6      	mov	lr, sl
     65c:	b500      	push	{lr}
     65e:	b0b6      	sub	sp, #216	; 0xd8
     660:	9002      	str	r0, [sp, #8]
     662:	9103      	str	r1, [sp, #12]
     664:	0015      	movs	r5, r2
     666:	001c      	movs	r4, r3
     668:	ab3c      	add	r3, sp, #240	; 0xf0
     66a:	881e      	ldrh	r6, [r3, #0]
    uint8_t zone = ATCA_ZONE_DATA | ATCA_ZONE_READWRITE_32;
    atca_nonce_in_out_t nonce_params;
    atca_gen_dig_in_out_t gen_dig_param;
    atca_temp_key_t temp_key;
    uint8_t serial_num[32];
    uint8_t num_in[NONCE_NUMIN_SIZE] = { 0 };
     66c:	2214      	movs	r2, #20
     66e:	2100      	movs	r1, #0
     670:	a80e      	add	r0, sp, #56	; 0x38
     672:	4f3b      	ldr	r7, [pc, #236]	; (760 <atcab_read_enc+0x108>)
     674:	47b8      	blx	r7
    uint8_t rand_out[RANDOM_NUM_SIZE] = { 0 };
     676:	2220      	movs	r2, #32
     678:	2100      	movs	r1, #0
     67a:	a806      	add	r0, sp, #24
     67c:	47b8      	blx	r7
    uint8_t other_data[4] = { 0 };
     67e:	2300      	movs	r3, #0
     680:	9305      	str	r3, [sp, #20]
    int i = 0;

    do
    {
        // Verify inputs parameters
        if (data == NULL || enc_key == NULL)
     682:	2d00      	cmp	r5, #0
     684:	d067      	beq.n	756 <atcab_read_enc+0xfe>
        {
            status = ATCA_BAD_PARAM;
     686:	20e2      	movs	r0, #226	; 0xe2
        if (data == NULL || enc_key == NULL)
     688:	2c00      	cmp	r4, #0
     68a:	d065      	beq.n	758 <atcab_read_enc+0x100>
            break;
        }

        // Read the device SN
        if ((status = atcab_read_zone(ATCA_ZONE_CONFIG, 0, 0, 0, serial_num, 32)) != ATCA_SUCCESS)
     68c:	3320      	adds	r3, #32
     68e:	9301      	str	r3, [sp, #4]
     690:	ab13      	add	r3, sp, #76	; 0x4c
     692:	9300      	str	r3, [sp, #0]
     694:	2300      	movs	r3, #0
     696:	2200      	movs	r2, #0
     698:	2100      	movs	r1, #0
     69a:	2000      	movs	r0, #0
     69c:	4f31      	ldr	r7, [pc, #196]	; (764 <atcab_read_enc+0x10c>)
     69e:	47b8      	blx	r7
     6a0:	2800      	cmp	r0, #0
     6a2:	d159      	bne.n	758 <atcab_read_enc+0x100>
        {
            break;
        }
        // Make the SN continuous by moving SN[4:8] right after SN[0:3]
        memmove(&serial_num[4], &serial_num[8], 5);
     6a4:	2205      	movs	r2, #5
     6a6:	a915      	add	r1, sp, #84	; 0x54
     6a8:	a814      	add	r0, sp, #80	; 0x50
     6aa:	4b2f      	ldr	r3, [pc, #188]	; (768 <atcab_read_enc+0x110>)
     6ac:	4798      	blx	r3

        // Send the random Nonce command
        if ((status = atcab_nonce_rand(num_in, rand_out)) != ATCA_SUCCESS)
     6ae:	a906      	add	r1, sp, #24
     6b0:	a80e      	add	r0, sp, #56	; 0x38
     6b2:	4b2e      	ldr	r3, [pc, #184]	; (76c <atcab_read_enc+0x114>)
     6b4:	4798      	blx	r3
     6b6:	2800      	cmp	r0, #0
     6b8:	d14e      	bne.n	758 <atcab_read_enc+0x100>
        {
            BREAK(status, "Nonce failed");
        }

        // Calculate Tempkey
        memset(&temp_key, 0, sizeof(temp_key));
     6ba:	af1b      	add	r7, sp, #108	; 0x6c
     6bc:	2244      	movs	r2, #68	; 0x44
     6be:	2100      	movs	r1, #0
     6c0:	0038      	movs	r0, r7
     6c2:	4b27      	ldr	r3, [pc, #156]	; (760 <atcab_read_enc+0x108>)
     6c4:	469a      	mov	sl, r3
     6c6:	4798      	blx	r3
        memset(&nonce_params, 0, sizeof(nonce_params));
     6c8:	2210      	movs	r2, #16
     6ca:	2100      	movs	r1, #0
     6cc:	a832      	add	r0, sp, #200	; 0xc8
     6ce:	47d0      	blx	sl
        nonce_params.mode = NONCE_MODE_SEED_UPDATE;
        nonce_params.zero = 0;
        nonce_params.num_in = (uint8_t*)&num_in;
     6d0:	ab0e      	add	r3, sp, #56	; 0x38
     6d2:	9333      	str	r3, [sp, #204]	; 0xcc
        nonce_params.rand_out = (uint8_t*)&rand_out;
     6d4:	ab06      	add	r3, sp, #24
     6d6:	9334      	str	r3, [sp, #208]	; 0xd0
        nonce_params.temp_key = &temp_key;
     6d8:	9735      	str	r7, [sp, #212]	; 0xd4
        if ((status = atcah_nonce(&nonce_params)) != ATCA_SUCCESS)
     6da:	a832      	add	r0, sp, #200	; 0xc8
     6dc:	4b24      	ldr	r3, [pc, #144]	; (770 <atcab_read_enc+0x118>)
     6de:	4798      	blx	r3
     6e0:	2800      	cmp	r0, #0
     6e2:	d139      	bne.n	758 <atcab_read_enc+0x100>
        {
            BREAK(status, "Calc TempKey failed");
        }

        // Supply OtherData so GenDig behavior is the same for keys with SlotConfig.NoMac set
        other_data[0] = ATCA_GENDIG;
     6e4:	aa05      	add	r2, sp, #20
     6e6:	2315      	movs	r3, #21
     6e8:	7013      	strb	r3, [r2, #0]
        other_data[1] = GENDIG_ZONE_DATA;
     6ea:	3b13      	subs	r3, #19
     6ec:	7053      	strb	r3, [r2, #1]
        other_data[2] = (uint8_t)(enc_key_id);
     6ee:	7096      	strb	r6, [r2, #2]
        other_data[3] = (uint8_t)(enc_key_id >> 8);
     6f0:	0a33      	lsrs	r3, r6, #8
     6f2:	70d3      	strb	r3, [r2, #3]

        // Send the GenDig command
        if ((status = atcab_gendig(GENDIG_ZONE_DATA, enc_key_id, other_data, sizeof(other_data))) != ATCA_SUCCESS)
     6f4:	2304      	movs	r3, #4
     6f6:	0031      	movs	r1, r6
     6f8:	3002      	adds	r0, #2
     6fa:	4f1e      	ldr	r7, [pc, #120]	; (774 <atcab_read_enc+0x11c>)
     6fc:	47b8      	blx	r7
     6fe:	2800      	cmp	r0, #0
     700:	d12a      	bne.n	758 <atcab_read_enc+0x100>
        }

        // Calculate Tempkey
        // NoMac bit isn't being considered here on purpose to remove having to read SlotConfig.
        // OtherData is built to get the same result regardless of the NoMac bit.
        memset(&gen_dig_param, 0, sizeof(gen_dig_param));
     702:	af2c      	add	r7, sp, #176	; 0xb0
     704:	2218      	movs	r2, #24
     706:	2100      	movs	r1, #0
     708:	0038      	movs	r0, r7
     70a:	4b15      	ldr	r3, [pc, #84]	; (760 <atcab_read_enc+0x108>)
     70c:	4798      	blx	r3
        gen_dig_param.key_id = enc_key_id;
     70e:	807e      	strh	r6, [r7, #2]
        gen_dig_param.is_key_nomac = false;
        gen_dig_param.sn = serial_num;
     710:	ab13      	add	r3, sp, #76	; 0x4c
     712:	60bb      	str	r3, [r7, #8]
        gen_dig_param.stored_value = enc_key;
     714:	60fc      	str	r4, [r7, #12]
        gen_dig_param.zone = GENDIG_ZONE_DATA;
     716:	2302      	movs	r3, #2
     718:	703b      	strb	r3, [r7, #0]
        gen_dig_param.other_data = other_data;
     71a:	ab05      	add	r3, sp, #20
     71c:	613b      	str	r3, [r7, #16]
        gen_dig_param.temp_key = &temp_key;
     71e:	ab1b      	add	r3, sp, #108	; 0x6c
     720:	617b      	str	r3, [r7, #20]
        if ((status = atcah_gen_dig(&gen_dig_param)) != ATCA_SUCCESS)
     722:	0038      	movs	r0, r7
     724:	4b14      	ldr	r3, [pc, #80]	; (778 <atcab_read_enc+0x120>)
     726:	4798      	blx	r3
     728:	2800      	cmp	r0, #0
     72a:	d115      	bne.n	758 <atcab_read_enc+0x100>
        {
            BREAK(status, "");
        }

        // Read Encrypted
        if ((status = atcab_read_zone(zone, key_id, block, 0, data, ATCA_BLOCK_SIZE)) != ATCA_SUCCESS)
     72c:	2320      	movs	r3, #32
     72e:	9301      	str	r3, [sp, #4]
     730:	9500      	str	r5, [sp, #0]
     732:	2300      	movs	r3, #0
     734:	9a03      	ldr	r2, [sp, #12]
     736:	9902      	ldr	r1, [sp, #8]
     738:	3082      	adds	r0, #130	; 0x82
     73a:	4c0a      	ldr	r4, [pc, #40]	; (764 <atcab_read_enc+0x10c>)
     73c:	47a0      	blx	r4
     73e:	2800      	cmp	r0, #0
     740:	d10a      	bne.n	758 <atcab_read_enc+0x100>
     742:	2300      	movs	r3, #0
        }

        // Decrypt
        for (i = 0; i < ATCA_BLOCK_SIZE; i++)
        {
            data[i] = data[i] ^ temp_key.value[i];
     744:	ac1b      	add	r4, sp, #108	; 0x6c
     746:	5cea      	ldrb	r2, [r5, r3]
     748:	5d19      	ldrb	r1, [r3, r4]
     74a:	404a      	eors	r2, r1
     74c:	54ea      	strb	r2, [r5, r3]
        for (i = 0; i < ATCA_BLOCK_SIZE; i++)
     74e:	3301      	adds	r3, #1
     750:	2b20      	cmp	r3, #32
     752:	d1f8      	bne.n	746 <atcab_read_enc+0xee>
     754:	e000      	b.n	758 <atcab_read_enc+0x100>
            status = ATCA_BAD_PARAM;
     756:	20e2      	movs	r0, #226	; 0xe2
    }
    while (0);


    return status;
}
     758:	b036      	add	sp, #216	; 0xd8
     75a:	bc04      	pop	{r2}
     75c:	4692      	mov	sl, r2
     75e:	bdf0      	pop	{r4, r5, r6, r7, pc}
     760:	00019e35 	.word	0x00019e35
     764:	00000561 	.word	0x00000561
     768:	00019d95 	.word	0x00019d95
     76c:	000004ed 	.word	0x000004ed
     770:	0000197d 	.word	0x0000197d
     774:	000002fd 	.word	0x000002fd
     778:	00001a45 	.word	0x00001a45

0000077c <atcab_read_bytes_zone>:
 *  \param[in]  length  Number of bytes to read starting from the offset.
 *
 *  \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS atcab_read_bytes_zone(uint8_t zone, uint16_t slot, size_t offset, uint8_t *data, size_t length)
{
     77c:	b5f0      	push	{r4, r5, r6, r7, lr}
     77e:	46de      	mov	lr, fp
     780:	4657      	mov	r7, sl
     782:	464e      	mov	r6, r9
     784:	4645      	mov	r5, r8
     786:	b5e0      	push	{r5, r6, r7, lr}
     788:	b091      	sub	sp, #68	; 0x44
     78a:	0005      	movs	r5, r0
     78c:	9102      	str	r1, [sp, #8]
     78e:	0017      	movs	r7, r2
     790:	9303      	str	r3, [sp, #12]
    ATCA_STATUS status = ATCA_GEN_FAIL;
    size_t zone_size = 0;
     792:	2300      	movs	r3, #0
     794:	930f      	str	r3, [sp, #60]	; 0x3c
    size_t copy_length = 0;
    size_t read_offset = 0;

    if (zone != ATCA_ZONE_CONFIG && zone != ATCA_ZONE_OTP && zone != ATCA_ZONE_DATA)
    {
        return ATCA_BAD_PARAM;
     796:	24e2      	movs	r4, #226	; 0xe2
    if (zone != ATCA_ZONE_CONFIG && zone != ATCA_ZONE_OTP && zone != ATCA_ZONE_DATA)
     798:	2802      	cmp	r0, #2
     79a:	d907      	bls.n	7ac <atcab_read_bytes_zone+0x30>
        }
    }
    while (false);

    return status;
}
     79c:	0020      	movs	r0, r4
     79e:	b011      	add	sp, #68	; 0x44
     7a0:	bc3c      	pop	{r2, r3, r4, r5}
     7a2:	4690      	mov	r8, r2
     7a4:	4699      	mov	r9, r3
     7a6:	46a2      	mov	sl, r4
     7a8:	46ab      	mov	fp, r5
     7aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (zone == ATCA_ZONE_DATA && slot > 15)
     7ac:	2802      	cmp	r0, #2
     7ae:	d01f      	beq.n	7f0 <atcab_read_bytes_zone+0x74>
        return ATCA_SUCCESS;  // Always succeed reading 0 bytes
     7b0:	2400      	movs	r4, #0
    if (length == 0)
     7b2:	9b1a      	ldr	r3, [sp, #104]	; 0x68
     7b4:	2b00      	cmp	r3, #0
     7b6:	d0f1      	beq.n	79c <atcab_read_bytes_zone+0x20>
        return ATCA_BAD_PARAM;
     7b8:	34e2      	adds	r4, #226	; 0xe2
    if (data == NULL)
     7ba:	9b03      	ldr	r3, [sp, #12]
     7bc:	2b00      	cmp	r3, #0
     7be:	d0ed      	beq.n	79c <atcab_read_bytes_zone+0x20>
        status = atcab_get_zone_size(zone, slot, &zone_size);
     7c0:	aa0f      	add	r2, sp, #60	; 0x3c
     7c2:	9902      	ldr	r1, [sp, #8]
     7c4:	0028      	movs	r0, r5
     7c6:	4b2e      	ldr	r3, [pc, #184]	; (880 <atcab_read_bytes_zone+0x104>)
     7c8:	4798      	blx	r3
     7ca:	1e04      	subs	r4, r0, #0
        if (status != ATCA_SUCCESS)
     7cc:	d1e6      	bne.n	79c <atcab_read_bytes_zone+0x20>
        if (offset + length > zone_size)
     7ce:	9b1a      	ldr	r3, [sp, #104]	; 0x68
     7d0:	19db      	adds	r3, r3, r7
            return ATCA_BAD_PARAM; // Can't read past the end of a zone
     7d2:	34e2      	adds	r4, #226	; 0xe2
        if (offset + length > zone_size)
     7d4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
     7d6:	4293      	cmp	r3, r2
     7d8:	d8e0      	bhi.n	79c <atcab_read_bytes_zone+0x20>
        cur_block = offset / ATCA_BLOCK_SIZE;
     7da:	097b      	lsrs	r3, r7, #5
     7dc:	4698      	mov	r8, r3
     7de:	2320      	movs	r3, #32
     7e0:	469a      	mov	sl, r3
     7e2:	2300      	movs	r3, #0
     7e4:	2600      	movs	r6, #0
            memcpy(&data[data_idx], &read_buf[read_buf_idx], copy_length);
     7e6:	46a9      	mov	r9, r5
     7e8:	001d      	movs	r5, r3
     7ea:	9705      	str	r7, [sp, #20]
     7ec:	4657      	mov	r7, sl
     7ee:	e01e      	b.n	82e <atcab_read_bytes_zone+0xb2>
    if (zone == ATCA_ZONE_DATA && slot > 15)
     7f0:	290f      	cmp	r1, #15
     7f2:	d8d3      	bhi.n	79c <atcab_read_bytes_zone+0x20>
     7f4:	e7dc      	b.n	7b0 <atcab_read_bytes_zone+0x34>
            if (read_size == ATCA_BLOCK_SIZE && zone_size - cur_block * ATCA_BLOCK_SIZE < ATCA_BLOCK_SIZE)
     7f6:	4643      	mov	r3, r8
     7f8:	015b      	lsls	r3, r3, #5
     7fa:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
     7fc:	1ad3      	subs	r3, r2, r3
     7fe:	2b1f      	cmp	r3, #31
     800:	d817      	bhi.n	832 <atcab_read_bytes_zone+0xb6>
                cur_offset = ((data_idx + offset) / ATCA_WORD_SIZE) % (ATCA_BLOCK_SIZE / ATCA_WORD_SIZE);
     802:	9b05      	ldr	r3, [sp, #20]
     804:	199b      	adds	r3, r3, r6
     806:	089b      	lsrs	r3, r3, #2
     808:	2507      	movs	r5, #7
     80a:	401d      	ands	r5, r3
                read_size = ATCA_WORD_SIZE;
     80c:	3f1c      	subs	r7, #28
     80e:	e010      	b.n	832 <atcab_read_bytes_zone+0xb6>
            memcpy(&data[data_idx], &read_buf[read_buf_idx], copy_length);
     810:	9b03      	ldr	r3, [sp, #12]
     812:	1998      	adds	r0, r3, r6
     814:	ab07      	add	r3, sp, #28
     816:	469c      	mov	ip, r3
     818:	4461      	add	r1, ip
     81a:	0022      	movs	r2, r4
     81c:	4b19      	ldr	r3, [pc, #100]	; (884 <atcab_read_bytes_zone+0x108>)
     81e:	4798      	blx	r3
            data_idx += copy_length;
     820:	1936      	adds	r6, r6, r4
            if (read_size == ATCA_BLOCK_SIZE)
     822:	2f20      	cmp	r7, #32
     824:	d024      	beq.n	870 <atcab_read_bytes_zone+0xf4>
                cur_offset += 1;
     826:	3501      	adds	r5, #1
        while (data_idx < length)
     828:	9b1a      	ldr	r3, [sp, #104]	; 0x68
     82a:	42b3      	cmp	r3, r6
     82c:	d924      	bls.n	878 <atcab_read_bytes_zone+0xfc>
            if (read_size == ATCA_BLOCK_SIZE && zone_size - cur_block * ATCA_BLOCK_SIZE < ATCA_BLOCK_SIZE)
     82e:	2f20      	cmp	r7, #32
     830:	d0e1      	beq.n	7f6 <atcab_read_bytes_zone+0x7a>
            status = atcab_read_zone(
     832:	b2eb      	uxtb	r3, r5
     834:	4642      	mov	r2, r8
     836:	4669      	mov	r1, sp
     838:	740a      	strb	r2, [r1, #16]
     83a:	7c0a      	ldrb	r2, [r1, #16]
     83c:	9701      	str	r7, [sp, #4]
     83e:	a907      	add	r1, sp, #28
     840:	9100      	str	r1, [sp, #0]
     842:	9902      	ldr	r1, [sp, #8]
     844:	4648      	mov	r0, r9
     846:	4c10      	ldr	r4, [pc, #64]	; (888 <atcab_read_bytes_zone+0x10c>)
     848:	47a0      	blx	r4
     84a:	9004      	str	r0, [sp, #16]
            if (status != ATCA_SUCCESS)
     84c:	2800      	cmp	r0, #0
     84e:	d115      	bne.n	87c <atcab_read_bytes_zone+0x100>
            read_offset = cur_block * ATCA_BLOCK_SIZE + cur_offset * ATCA_WORD_SIZE;
     850:	4643      	mov	r3, r8
     852:	00db      	lsls	r3, r3, #3
     854:	195b      	adds	r3, r3, r5
     856:	009b      	lsls	r3, r3, #2
                read_buf_idx = 0;                     // Read data is within the requested chunk
     858:	2100      	movs	r1, #0
            if (read_offset < offset)
     85a:	9805      	ldr	r0, [sp, #20]
     85c:	4298      	cmp	r0, r3
     85e:	d900      	bls.n	862 <atcab_read_bytes_zone+0xe6>
                read_buf_idx = offset - read_offset;  // Read data starts before the requested chunk
     860:	1ac1      	subs	r1, r0, r3
            if (length - data_idx < read_size - read_buf_idx)
     862:	1a7b      	subs	r3, r7, r1
     864:	9a1a      	ldr	r2, [sp, #104]	; 0x68
     866:	1b94      	subs	r4, r2, r6
     868:	429c      	cmp	r4, r3
     86a:	d9d1      	bls.n	810 <atcab_read_bytes_zone+0x94>
     86c:	001c      	movs	r4, r3
     86e:	e7cf      	b.n	810 <atcab_read_bytes_zone+0x94>
                cur_block += 1;
     870:	2301      	movs	r3, #1
     872:	469c      	mov	ip, r3
     874:	44e0      	add	r8, ip
     876:	e7d7      	b.n	828 <atcab_read_bytes_zone+0xac>
     878:	9c04      	ldr	r4, [sp, #16]
     87a:	e78f      	b.n	79c <atcab_read_bytes_zone+0x20>
     87c:	9c04      	ldr	r4, [sp, #16]
     87e:	e78d      	b.n	79c <atcab_read_bytes_zone+0x20>
     880:	000001d5 	.word	0x000001d5
     884:	00019d11 	.word	0x00019d11
     888:	00000561 	.word	0x00000561

0000088c <atcab_write>:
 *                     if not required.
 *
 * \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS atcab_write(uint8_t zone, uint16_t address, const uint8_t *value, const uint8_t *mac)
{
     88c:	b570      	push	{r4, r5, r6, lr}
     88e:	b0b2      	sub	sp, #200	; 0xc8
     890:	0014      	movs	r4, r2
     892:	001d      	movs	r5, r3
    ATCAPacket packet;
    ATCACommand ca_cmd = _gDevice->mCommands;
    ATCA_STATUS status = ATCA_GEN_FAIL;

    if (value == NULL)
     894:	2a00      	cmp	r2, #0
     896:	d02e      	beq.n	8f6 <atcab_write+0x6a>
    ATCACommand ca_cmd = _gDevice->mCommands;
     898:	4b18      	ldr	r3, [pc, #96]	; (8fc <atcab_write+0x70>)
     89a:	681b      	ldr	r3, [r3, #0]
     89c:	681e      	ldr	r6, [r3, #0]
    }

    do
    {
        // Build the write command
        packet.param1 = zone;
     89e:	466b      	mov	r3, sp
     8a0:	70d8      	strb	r0, [r3, #3]
        packet.param2 = address;
     8a2:	8099      	strh	r1, [r3, #4]
        if (zone & ATCA_ZONE_READWRITE_32)
     8a4:	b240      	sxtb	r0, r0
     8a6:	2800      	cmp	r0, #0
     8a8:	db0e      	blt.n	8c8 <atcab_write+0x3c>
            }
        }
        else
        {
            // 4-byte write
            memcpy(packet.data, value, 4);
     8aa:	2204      	movs	r2, #4
     8ac:	0021      	movs	r1, r4
     8ae:	466b      	mov	r3, sp
     8b0:	1d98      	adds	r0, r3, #6
     8b2:	4b13      	ldr	r3, [pc, #76]	; (900 <atcab_write+0x74>)
     8b4:	4798      	blx	r3
        }

        if ((status = atWrite(ca_cmd, &packet, mac && (zone & ATCA_ZONE_READWRITE_32))) != ATCA_SUCCESS)
     8b6:	2200      	movs	r2, #0
     8b8:	4669      	mov	r1, sp
     8ba:	0030      	movs	r0, r6
     8bc:	4b11      	ldr	r3, [pc, #68]	; (904 <atcab_write+0x78>)
     8be:	4798      	blx	r3
     8c0:	2800      	cmp	r0, #0
     8c2:	d012      	beq.n	8ea <atcab_write+0x5e>

    }
    while (0);

    return status;
}
     8c4:	b032      	add	sp, #200	; 0xc8
     8c6:	bd70      	pop	{r4, r5, r6, pc}
            memcpy(packet.data, value, 32);
     8c8:	2220      	movs	r2, #32
     8ca:	0021      	movs	r1, r4
     8cc:	1d98      	adds	r0, r3, #6
     8ce:	4b0c      	ldr	r3, [pc, #48]	; (900 <atcab_write+0x74>)
     8d0:	4798      	blx	r3
            if (mac)
     8d2:	2d00      	cmp	r5, #0
     8d4:	d007      	beq.n	8e6 <atcab_write+0x5a>
                memcpy(&packet.data[32], mac, 32);
     8d6:	2220      	movs	r2, #32
     8d8:	0029      	movs	r1, r5
     8da:	2026      	movs	r0, #38	; 0x26
     8dc:	4468      	add	r0, sp
     8de:	4b08      	ldr	r3, [pc, #32]	; (900 <atcab_write+0x74>)
     8e0:	4798      	blx	r3
        if ((status = atWrite(ca_cmd, &packet, mac && (zone & ATCA_ZONE_READWRITE_32))) != ATCA_SUCCESS)
     8e2:	2201      	movs	r2, #1
     8e4:	e7e8      	b.n	8b8 <atcab_write+0x2c>
     8e6:	2200      	movs	r2, #0
     8e8:	e7e6      	b.n	8b8 <atcab_write+0x2c>
        if ((status = atca_execute_command(&packet, _gDevice)) != ATCA_SUCCESS)
     8ea:	4b04      	ldr	r3, [pc, #16]	; (8fc <atcab_write+0x70>)
     8ec:	6819      	ldr	r1, [r3, #0]
     8ee:	4668      	mov	r0, sp
     8f0:	4b05      	ldr	r3, [pc, #20]	; (908 <atcab_write+0x7c>)
     8f2:	4798      	blx	r3
     8f4:	e7e6      	b.n	8c4 <atcab_write+0x38>
        return ATCA_BAD_PARAM;
     8f6:	20e2      	movs	r0, #226	; 0xe2
     8f8:	e7e4      	b.n	8c4 <atcab_write+0x38>
     8fa:	46c0      	nop			; (mov r8, r8)
     8fc:	200009e4 	.word	0x200009e4
     900:	00019d11 	.word	0x00019d11
     904:	00000abd 	.word	0x00000abd
     908:	00000cf5 	.word	0x00000cf5

0000090c <atcab_write_zone>:
 *  \param[in] len     Number of bytes to be written. Must be either 4 or 32.
 *
 *  \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS atcab_write_zone(uint8_t zone, uint16_t slot, uint8_t block, uint8_t offset, const uint8_t *data, uint8_t len)
{
     90c:	b570      	push	{r4, r5, r6, lr}
     90e:	b084      	sub	sp, #16
     910:	0004      	movs	r4, r0
     912:	a808      	add	r0, sp, #32
     914:	c840      	ldmia	r0!, {r6}
     916:	7805      	ldrb	r5, [r0, #0]
    ATCA_STATUS status = ATCA_GEN_FAIL;
    uint16_t addr;

    // Check the input parameters
    if (data == NULL)
     918:	2e00      	cmp	r6, #0
     91a:	d006      	beq.n	92a <atcab_write_zone+0x1e>
    {
        return ATCA_BAD_PARAM;
    }

    if (len != 4 && len != 32)
     91c:	2d04      	cmp	r5, #4
     91e:	d011      	beq.n	944 <atcab_write_zone+0x38>
    {
        return ATCA_BAD_PARAM;
     920:	20e2      	movs	r0, #226	; 0xe2
    if (len != 4 && len != 32)
     922:	2d20      	cmp	r5, #32
     924:	d003      	beq.n	92e <atcab_write_zone+0x22>

    }
    while (0);

    return status;
}
     926:	b004      	add	sp, #16
     928:	bd70      	pop	{r4, r5, r6, pc}
        return ATCA_BAD_PARAM;
     92a:	20e2      	movs	r0, #226	; 0xe2
     92c:	e7fb      	b.n	926 <atcab_write_zone+0x1a>
        if ((status = atcab_get_addr(zone, slot, block, offset, &addr)) != ATCA_SUCCESS)
     92e:	200e      	movs	r0, #14
     930:	4468      	add	r0, sp
     932:	9000      	str	r0, [sp, #0]
     934:	0020      	movs	r0, r4
     936:	4d0c      	ldr	r5, [pc, #48]	; (968 <atcab_write_zone+0x5c>)
     938:	47a8      	blx	r5
     93a:	2800      	cmp	r0, #0
     93c:	d1f3      	bne.n	926 <atcab_write_zone+0x1a>
            zone = zone | ATCA_ZONE_READWRITE_32;
     93e:	2380      	movs	r3, #128	; 0x80
     940:	431c      	orrs	r4, r3
     942:	e007      	b.n	954 <atcab_write_zone+0x48>
        if ((status = atcab_get_addr(zone, slot, block, offset, &addr)) != ATCA_SUCCESS)
     944:	200e      	movs	r0, #14
     946:	4468      	add	r0, sp
     948:	9000      	str	r0, [sp, #0]
     94a:	0020      	movs	r0, r4
     94c:	4d06      	ldr	r5, [pc, #24]	; (968 <atcab_write_zone+0x5c>)
     94e:	47a8      	blx	r5
     950:	2800      	cmp	r0, #0
     952:	d1e8      	bne.n	926 <atcab_write_zone+0x1a>
        status = atcab_write(zone, addr, data, NULL);
     954:	230e      	movs	r3, #14
     956:	446b      	add	r3, sp
     958:	8819      	ldrh	r1, [r3, #0]
     95a:	2300      	movs	r3, #0
     95c:	0032      	movs	r2, r6
     95e:	0020      	movs	r0, r4
     960:	4c02      	ldr	r4, [pc, #8]	; (96c <atcab_write_zone+0x60>)
     962:	47a0      	blx	r4
     964:	e7df      	b.n	926 <atcab_write_zone+0x1a>
     966:	46c0      	nop			; (mov r8, r8)
     968:	00000191 	.word	0x00000191
     96c:	0000088d 	.word	0x0000088d

00000970 <initATCACommand>:
 * \param[in] ca_cmd       Pre-allocated command structure to initialize.
 * \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS initATCACommand(ATCADeviceType device_type, ATCACommand ca_cmd)
{
    if (ca_cmd == NULL)
     970:	2900      	cmp	r1, #0
     972:	d004      	beq.n	97e <initATCACommand+0xe>
    {
        return ATCA_BAD_PARAM;
    }

    ca_cmd->dt = device_type;
     974:	7008      	strb	r0, [r1, #0]
    ca_cmd->clock_divider = 0;
     976:	2300      	movs	r3, #0
     978:	704b      	strb	r3, [r1, #1]

    return ATCA_SUCCESS;
     97a:	2000      	movs	r0, #0
}
     97c:	4770      	bx	lr
        return ATCA_BAD_PARAM;
     97e:	20e2      	movs	r0, #226	; 0xe2
     980:	e7fc      	b.n	97c <initATCACommand+0xc>
	...

00000984 <deleteATCACommand>:
#ifndef ATCA_NO_HEAP
/** \brief ATCACommand destructor
 * \param[in] ca_cmd instance of a command object
 */
void deleteATCACommand(ATCACommand *ca_cmd)
{
     984:	b510      	push	{r4, lr}
     986:	1e04      	subs	r4, r0, #0
    if (ca_cmd == NULL)
     988:	d004      	beq.n	994 <deleteATCACommand+0x10>
    {
        return;
    }

    free(*ca_cmd);
     98a:	6800      	ldr	r0, [r0, #0]
     98c:	4b02      	ldr	r3, [pc, #8]	; (998 <deleteATCACommand+0x14>)
     98e:	4798      	blx	r3
    *ca_cmd = NULL;
     990:	2300      	movs	r3, #0
     992:	6023      	str	r3, [r4, #0]
}
     994:	bd10      	pop	{r4, pc}
     996:	46c0      	nop			; (mov r8, r8)
     998:	0001971d 	.word	0x0001971d

0000099c <atCRC>:
 * \param[in]  data    Pointer to the data over which to compute the CRC
 * \param[out] crc_le  Pointer to the place where the two-bytes of CRC will be
 *                     returned in little-endian byte order.
 */
void atCRC(size_t length, const uint8_t *data, uint8_t *crc_le)
{
     99c:	b5f0      	push	{r4, r5, r6, r7, lr}
     99e:	46d6      	mov	lr, sl
     9a0:	464f      	mov	r7, r9
     9a2:	4646      	mov	r6, r8
     9a4:	b5c0      	push	{r6, r7, lr}
     9a6:	4694      	mov	ip, r2
    uint16_t crc_register = 0;
    uint16_t polynom = 0x8005;
    uint8_t shift_register;
    uint8_t data_bit, crc_bit;

    for (counter = 0; counter < length; counter++)
     9a8:	2800      	cmp	r0, #0
     9aa:	d021      	beq.n	9f0 <atCRC+0x54>
     9ac:	4689      	mov	r9, r1
     9ae:	4688      	mov	r8, r1
     9b0:	4480      	add	r8, r0
     9b2:	2300      	movs	r3, #0
            data_bit = (data[counter] & shift_register) ? 1 : 0;
            crc_bit = crc_register >> 15;
            crc_register <<= 1;
            if (data_bit != crc_bit)
            {
                crc_register ^= polynom;
     9b4:	4813      	ldr	r0, [pc, #76]	; (a04 <atCRC+0x68>)
     9b6:	e016      	b.n	9e6 <atCRC+0x4a>
        for (shift_register = 0x01; shift_register > 0x00; shift_register <<= 1)
     9b8:	006d      	lsls	r5, r5, #1
     9ba:	b2ed      	uxtb	r5, r5
     9bc:	3e01      	subs	r6, #1
     9be:	2e00      	cmp	r6, #0
     9c0:	d00c      	beq.n	9dc <atCRC+0x40>
            crc_bit = crc_register >> 15;
     9c2:	0bdf      	lsrs	r7, r3, #15
            crc_register <<= 1;
     9c4:	005b      	lsls	r3, r3, #1
     9c6:	b29b      	uxth	r3, r3
            data_bit = (data[counter] & shift_register) ? 1 : 0;
     9c8:	002c      	movs	r4, r5
     9ca:	400c      	ands	r4, r1
     9cc:	1e62      	subs	r2, r4, #1
     9ce:	4194      	sbcs	r4, r2
            if (data_bit != crc_bit)
     9d0:	b2e4      	uxtb	r4, r4
     9d2:	42bc      	cmp	r4, r7
     9d4:	d0f0      	beq.n	9b8 <atCRC+0x1c>
                crc_register ^= polynom;
     9d6:	4043      	eors	r3, r0
     9d8:	b29b      	uxth	r3, r3
     9da:	e7ed      	b.n	9b8 <atCRC+0x1c>
     9dc:	2201      	movs	r2, #1
     9de:	4692      	mov	sl, r2
     9e0:	44d1      	add	r9, sl
    for (counter = 0; counter < length; counter++)
     9e2:	45c1      	cmp	r9, r8
     9e4:	d005      	beq.n	9f2 <atCRC+0x56>
            data_bit = (data[counter] & shift_register) ? 1 : 0;
     9e6:	464a      	mov	r2, r9
     9e8:	7811      	ldrb	r1, [r2, #0]
     9ea:	2608      	movs	r6, #8
     9ec:	2501      	movs	r5, #1
     9ee:	e7e8      	b.n	9c2 <atCRC+0x26>
    uint16_t crc_register = 0;
     9f0:	2300      	movs	r3, #0
            }
        }
    }
    crc_le[0] = (uint8_t)(crc_register & 0x00FF);
     9f2:	4662      	mov	r2, ip
     9f4:	7013      	strb	r3, [r2, #0]
    crc_le[1] = (uint8_t)(crc_register >> 8);
     9f6:	0a1b      	lsrs	r3, r3, #8
     9f8:	7053      	strb	r3, [r2, #1]
}
     9fa:	bc1c      	pop	{r2, r3, r4}
     9fc:	4690      	mov	r8, r2
     9fe:	4699      	mov	r9, r3
     a00:	46a2      	mov	sl, r4
     a02:	bdf0      	pop	{r4, r5, r6, r7, pc}
     a04:	ffff8005 	.word	0xffff8005

00000a08 <atCalcCrc>:
/** \brief This function calculates CRC and adds it to the correct offset in the packet data
 * \param[in] packet Packet to calculate CRC data for
 */

void atCalcCrc(ATCAPacket *packet)
{
     a08:	b510      	push	{r4, lr}
    uint8_t length, *crc;

    length = packet->txsize - ATCA_CRC_SIZE;
    // computer pointer to CRC in the packet
    crc = &(packet->txsize) + length;
     a0a:	1c41      	adds	r1, r0, #1
    length = packet->txsize - ATCA_CRC_SIZE;
     a0c:	7840      	ldrb	r0, [r0, #1]
     a0e:	3802      	subs	r0, #2
    crc = &(packet->txsize) + length;
     a10:	b2c0      	uxtb	r0, r0
     a12:	180a      	adds	r2, r1, r0

    // stuff CRC into packet
    atCRC(length, &(packet->txsize), crc);
     a14:	4b01      	ldr	r3, [pc, #4]	; (a1c <atCalcCrc+0x14>)
     a16:	4798      	blx	r3
}
     a18:	bd10      	pop	{r4, pc}
     a1a:	46c0      	nop			; (mov r8, r8)
     a1c:	0000099d 	.word	0x0000099d

00000a20 <atGenDig>:
{
     a20:	b510      	push	{r4, lr}
    packet->opcode = ATCA_GENDIG;
     a22:	2315      	movs	r3, #21
     a24:	708b      	strb	r3, [r1, #2]
    if (packet->param1 == GENDIG_ZONE_SHARED_NONCE) // shared nonce mode
     a26:	78cb      	ldrb	r3, [r1, #3]
     a28:	2b03      	cmp	r3, #3
     a2a:	d008      	beq.n	a3e <atGenDig+0x1e>
    else if (is_no_mac_key)
     a2c:	2a00      	cmp	r2, #0
     a2e:	d109      	bne.n	a44 <atGenDig+0x24>
        packet->txsize = GENDIG_COUNT;
     a30:	2307      	movs	r3, #7
     a32:	704b      	strb	r3, [r1, #1]
    atCalcCrc(packet);
     a34:	0008      	movs	r0, r1
     a36:	4b05      	ldr	r3, [pc, #20]	; (a4c <atGenDig+0x2c>)
     a38:	4798      	blx	r3
}
     a3a:	2000      	movs	r0, #0
     a3c:	bd10      	pop	{r4, pc}
        packet->txsize = GENDIG_COUNT + 32;
     a3e:	3324      	adds	r3, #36	; 0x24
     a40:	704b      	strb	r3, [r1, #1]
     a42:	e7f7      	b.n	a34 <atGenDig+0x14>
        packet->txsize = GENDIG_COUNT + 4;  // noMac keys use 4 bytes of OtherData in calculation
     a44:	230b      	movs	r3, #11
     a46:	704b      	strb	r3, [r1, #1]
     a48:	e7f4      	b.n	a34 <atGenDig+0x14>
     a4a:	46c0      	nop			; (mov r8, r8)
     a4c:	00000a09 	.word	0x00000a09

00000a50 <atNonce>:
{
     a50:	b510      	push	{r4, lr}
    uint8_t calc_mode = packet->param1 & NONCE_MODE_MASK;
     a52:	78ca      	ldrb	r2, [r1, #3]
     a54:	2303      	movs	r3, #3
     a56:	4013      	ands	r3, r2
    packet->opcode = ATCA_NONCE;
     a58:	2016      	movs	r0, #22
     a5a:	7088      	strb	r0, [r1, #2]
    if ((calc_mode == NONCE_MODE_SEED_UPDATE || calc_mode == NONCE_MODE_NO_SEED_UPDATE))
     a5c:	2b01      	cmp	r3, #1
     a5e:	d903      	bls.n	a68 <atNonce+0x18>
        return ATCA_BAD_PARAM;
     a60:	20e2      	movs	r0, #226	; 0xe2
    else if (calc_mode == NONCE_MODE_PASSTHROUGH)
     a62:	2b03      	cmp	r3, #3
     a64:	d007      	beq.n	a76 <atNonce+0x26>
}
     a66:	bd10      	pop	{r4, pc}
        packet->txsize = NONCE_COUNT_SHORT;
     a68:	231b      	movs	r3, #27
     a6a:	704b      	strb	r3, [r1, #1]
    atCalcCrc(packet);
     a6c:	0008      	movs	r0, r1
     a6e:	4b06      	ldr	r3, [pc, #24]	; (a88 <atNonce+0x38>)
     a70:	4798      	blx	r3
    return ATCA_SUCCESS;
     a72:	2000      	movs	r0, #0
     a74:	e7f7      	b.n	a66 <atNonce+0x16>
        if ((packet->param1 & NONCE_MODE_INPUT_LEN_MASK) == NONCE_MODE_INPUT_LEN_64)
     a76:	0693      	lsls	r3, r2, #26
     a78:	d502      	bpl.n	a80 <atNonce+0x30>
            packet->txsize = NONCE_COUNT_LONG_64;
     a7a:	2347      	movs	r3, #71	; 0x47
     a7c:	704b      	strb	r3, [r1, #1]
     a7e:	e7f5      	b.n	a6c <atNonce+0x1c>
            packet->txsize = NONCE_COUNT_LONG;
     a80:	2327      	movs	r3, #39	; 0x27
     a82:	704b      	strb	r3, [r1, #1]
     a84:	e7f2      	b.n	a6c <atNonce+0x1c>
     a86:	46c0      	nop			; (mov r8, r8)
     a88:	00000a09 	.word	0x00000a09

00000a8c <atRandom>:
{
     a8c:	b510      	push	{r4, lr}
    packet->opcode = ATCA_RANDOM;
     a8e:	231b      	movs	r3, #27
     a90:	708b      	strb	r3, [r1, #2]
    packet->txsize = RANDOM_COUNT;
     a92:	3b14      	subs	r3, #20
     a94:	704b      	strb	r3, [r1, #1]
    atCalcCrc(packet);
     a96:	0008      	movs	r0, r1
     a98:	4b01      	ldr	r3, [pc, #4]	; (aa0 <atRandom+0x14>)
     a9a:	4798      	blx	r3
}
     a9c:	2000      	movs	r0, #0
     a9e:	bd10      	pop	{r4, pc}
     aa0:	00000a09 	.word	0x00000a09

00000aa4 <atRead>:
{
     aa4:	b510      	push	{r4, lr}
    packet->opcode = ATCA_READ;
     aa6:	2302      	movs	r3, #2
     aa8:	708b      	strb	r3, [r1, #2]
    packet->txsize = READ_COUNT;
     aaa:	3305      	adds	r3, #5
     aac:	704b      	strb	r3, [r1, #1]
    atCalcCrc(packet);
     aae:	0008      	movs	r0, r1
     ab0:	4b01      	ldr	r3, [pc, #4]	; (ab8 <atRead+0x14>)
     ab2:	4798      	blx	r3
}
     ab4:	2000      	movs	r0, #0
     ab6:	bd10      	pop	{r4, pc}
     ab8:	00000a09 	.word	0x00000a09

00000abc <atWrite>:
{
     abc:	b510      	push	{r4, lr}
    packet->opcode = ATCA_WRITE;
     abe:	2312      	movs	r3, #18
     ac0:	708b      	strb	r3, [r1, #2]
    packet->txsize = 7;
     ac2:	3b0b      	subs	r3, #11
     ac4:	704b      	strb	r3, [r1, #1]
    if (packet->param1 & ATCA_ZONE_READWRITE_32)
     ac6:	78cb      	ldrb	r3, [r1, #3]
     ac8:	2b7f      	cmp	r3, #127	; 0x7f
     aca:	d80b      	bhi.n	ae4 <atWrite+0x28>
        packet->txsize += ATCA_WORD_SIZE;
     acc:	230b      	movs	r3, #11
     ace:	704b      	strb	r3, [r1, #1]
    if (has_mac)
     ad0:	2a00      	cmp	r2, #0
     ad2:	d002      	beq.n	ada <atWrite+0x1e>
        packet->txsize += WRITE_MAC_SIZE;
     ad4:	784b      	ldrb	r3, [r1, #1]
     ad6:	3320      	adds	r3, #32
     ad8:	704b      	strb	r3, [r1, #1]
    atCalcCrc(packet);
     ada:	0008      	movs	r0, r1
     adc:	4b03      	ldr	r3, [pc, #12]	; (aec <atWrite+0x30>)
     ade:	4798      	blx	r3
}
     ae0:	2000      	movs	r0, #0
     ae2:	bd10      	pop	{r4, pc}
        packet->txsize += ATCA_BLOCK_SIZE;
     ae4:	2327      	movs	r3, #39	; 0x27
     ae6:	704b      	strb	r3, [r1, #1]
     ae8:	e7f2      	b.n	ad0 <atWrite+0x14>
     aea:	46c0      	nop			; (mov r8, r8)
     aec:	00000a09 	.word	0x00000a09

00000af0 <atAES>:
{
     af0:	b510      	push	{r4, lr}
    packet->opcode = ATCA_AES;
     af2:	2351      	movs	r3, #81	; 0x51
     af4:	708b      	strb	r3, [r1, #2]
    packet->txsize = ATCA_CMD_SIZE_MIN;
     af6:	3b4a      	subs	r3, #74	; 0x4a
     af8:	704b      	strb	r3, [r1, #1]
    if ((packet->param1 & AES_MODE_OP_MASK) == AES_MODE_GFM)
     afa:	78ca      	ldrb	r2, [r1, #3]
     afc:	4013      	ands	r3, r2
     afe:	2b03      	cmp	r3, #3
     b00:	d006      	beq.n	b10 <atAES+0x20>
        packet->txsize += AES_DATA_SIZE;
     b02:	2317      	movs	r3, #23
     b04:	704b      	strb	r3, [r1, #1]
    atCalcCrc(packet);
     b06:	0008      	movs	r0, r1
     b08:	4b03      	ldr	r3, [pc, #12]	; (b18 <atAES+0x28>)
     b0a:	4798      	blx	r3
}
     b0c:	2000      	movs	r0, #0
     b0e:	bd10      	pop	{r4, pc}
        packet->txsize += ATCA_AES_GFM_SIZE;
     b10:	3324      	adds	r3, #36	; 0x24
     b12:	704b      	strb	r3, [r1, #1]
     b14:	e7f7      	b.n	b06 <atAES+0x16>
     b16:	46c0      	nop			; (mov r8, r8)
     b18:	00000a09 	.word	0x00000a09

00000b1c <atKDF>:
{
     b1c:	b510      	push	{r4, lr}
    packet->opcode = ATCA_KDF;
     b1e:	2356      	movs	r3, #86	; 0x56
     b20:	708b      	strb	r3, [r1, #2]
    if ((packet->param1 & KDF_MODE_ALG_MASK) == KDF_MODE_ALG_AES)
     b22:	78ca      	ldrb	r2, [r1, #3]
     b24:	330a      	adds	r3, #10
     b26:	4013      	ands	r3, r2
     b28:	2b20      	cmp	r3, #32
     b2a:	d007      	beq.n	b3c <atKDF+0x20>
        packet->txsize = ATCA_CMD_SIZE_MIN + KDF_DETAILS_SIZE + packet->data[3];
     b2c:	7a4b      	ldrb	r3, [r1, #9]
     b2e:	330b      	adds	r3, #11
     b30:	704b      	strb	r3, [r1, #1]
    atCalcCrc(packet);
     b32:	0008      	movs	r0, r1
     b34:	4b03      	ldr	r3, [pc, #12]	; (b44 <atKDF+0x28>)
     b36:	4798      	blx	r3
}
     b38:	2000      	movs	r0, #0
     b3a:	bd10      	pop	{r4, pc}
        packet->txsize = ATCA_CMD_SIZE_MIN + KDF_DETAILS_SIZE + AES_DATA_SIZE;
     b3c:	3b05      	subs	r3, #5
     b3e:	704b      	strb	r3, [r1, #1]
     b40:	e7f7      	b.n	b32 <atKDF+0x16>
     b42:	46c0      	nop			; (mov r8, r8)
     b44:	00000a09 	.word	0x00000a09

00000b48 <atCheckCrc>:
 * \param[in] response pointer to response
 * \return ATCA_SUCCESS on success, otherwise ATCA_RX_CRC_ERROR
 */

ATCA_STATUS atCheckCrc(const uint8_t *response)
{
     b48:	b570      	push	{r4, r5, r6, lr}
     b4a:	b082      	sub	sp, #8
     b4c:	0005      	movs	r5, r0
    uint8_t crc[ATCA_CRC_SIZE];
    uint8_t count = response[ATCA_COUNT_IDX];
     b4e:	7804      	ldrb	r4, [r0, #0]

    count -= ATCA_CRC_SIZE;
     b50:	3c02      	subs	r4, #2
    atCRC(count, response, crc);
     b52:	b2e4      	uxtb	r4, r4
     b54:	ae01      	add	r6, sp, #4
     b56:	0032      	movs	r2, r6
     b58:	0001      	movs	r1, r0
     b5a:	0020      	movs	r0, r4
     b5c:	4b08      	ldr	r3, [pc, #32]	; (b80 <atCheckCrc+0x38>)
     b5e:	4798      	blx	r3

    return (crc[0] == response[count] && crc[1] == response[count + 1]) ? ATCA_SUCCESS : ATCA_RX_CRC_ERROR;
     b60:	7832      	ldrb	r2, [r6, #0]
     b62:	5d2b      	ldrb	r3, [r5, r4]
     b64:	20e5      	movs	r0, #229	; 0xe5
     b66:	429a      	cmp	r2, r3
     b68:	d001      	beq.n	b6e <atCheckCrc+0x26>
}
     b6a:	b002      	add	sp, #8
     b6c:	bd70      	pop	{r4, r5, r6, pc}
    return (crc[0] == response[count] && crc[1] == response[count + 1]) ? ATCA_SUCCESS : ATCA_RX_CRC_ERROR;
     b6e:	192c      	adds	r4, r5, r4
     b70:	ab01      	add	r3, sp, #4
     b72:	785a      	ldrb	r2, [r3, #1]
     b74:	7863      	ldrb	r3, [r4, #1]
     b76:	429a      	cmp	r2, r3
     b78:	d1f7      	bne.n	b6a <atCheckCrc+0x22>
     b7a:	2000      	movs	r0, #0
     b7c:	e7f5      	b.n	b6a <atCheckCrc+0x22>
     b7e:	46c0      	nop			; (mov r8, r8)
     b80:	0000099d 	.word	0x0000099d

00000b84 <isATCAError>:
 * \return ATCA_SUCCESS on success, otherwise an error code.
 */

ATCA_STATUS isATCAError(uint8_t *data)
{
    if (data[0] == 0x04)        // error packets are always 4 bytes long
     b84:	7802      	ldrb	r2, [r0, #0]
            break;
        }
    }
    else
    {
        return ATCA_SUCCESS;
     b86:	2300      	movs	r3, #0
    if (data[0] == 0x04)        // error packets are always 4 bytes long
     b88:	2a04      	cmp	r2, #4
     b8a:	d001      	beq.n	b90 <isATCAError+0xc>
    }
}
     b8c:	0018      	movs	r0, r3
     b8e:	4770      	bx	lr
        switch (data[1])
     b90:	7842      	ldrb	r2, [r0, #1]
     b92:	2a07      	cmp	r2, #7
     b94:	d021      	beq.n	bda <isATCAError+0x56>
     b96:	b2d3      	uxtb	r3, r2
     b98:	2b07      	cmp	r3, #7
     b9a:	d80b      	bhi.n	bb4 <isATCAError+0x30>
     b9c:	2a01      	cmp	r2, #1
     b9e:	d01a      	beq.n	bd6 <isATCAError+0x52>
     ba0:	2a00      	cmp	r2, #0
     ba2:	d01e      	beq.n	be2 <isATCAError+0x5e>
            return ATCA_PARSE_ERROR;
     ba4:	23d2      	movs	r3, #210	; 0xd2
        switch (data[1])
     ba6:	2a03      	cmp	r2, #3
     ba8:	d0f0      	beq.n	b8c <isATCAError+0x8>
            return ATCA_STATUS_ECC;
     baa:	3304      	adds	r3, #4
        switch (data[1])
     bac:	2a05      	cmp	r2, #5
     bae:	d0ed      	beq.n	b8c <isATCAError+0x8>
            return ATCA_GEN_FAIL;
     bb0:	23e1      	movs	r3, #225	; 0xe1
     bb2:	e7eb      	b.n	b8c <isATCAError+0x8>
        switch (data[1])
     bb4:	2a0f      	cmp	r2, #15
     bb6:	d012      	beq.n	bde <isATCAError+0x5a>
     bb8:	b2d3      	uxtb	r3, r2
     bba:	2b0f      	cmp	r3, #15
     bbc:	d907      	bls.n	bce <isATCAError+0x4a>
            return ATCA_WAKE_SUCCESS;
     bbe:	23f3      	movs	r3, #243	; 0xf3
        switch (data[1])
     bc0:	2a11      	cmp	r2, #17
     bc2:	d0e3      	beq.n	b8c <isATCAError+0x8>
     bc4:	b2d2      	uxtb	r2, r2
            return ATCA_STATUS_CRC;
     bc6:	3b1f      	subs	r3, #31
        switch (data[1])
     bc8:	2aff      	cmp	r2, #255	; 0xff
     bca:	d0df      	beq.n	b8c <isATCAError+0x8>
     bcc:	e7f0      	b.n	bb0 <isATCAError+0x2c>
            return ATCA_HEALTH_TEST_ERROR;
     bce:	23fa      	movs	r3, #250	; 0xfa
        switch (data[1])
     bd0:	2a08      	cmp	r2, #8
     bd2:	d0db      	beq.n	b8c <isATCAError+0x8>
     bd4:	e7ec      	b.n	bb0 <isATCAError+0x2c>
            return ATCA_CHECKMAC_VERIFY_FAILED;
     bd6:	23d1      	movs	r3, #209	; 0xd1
     bd8:	e7d8      	b.n	b8c <isATCAError+0x8>
            return ATCA_STATUS_SELFTEST_ERROR;
     bda:	23d7      	movs	r3, #215	; 0xd7
     bdc:	e7d6      	b.n	b8c <isATCAError+0x8>
            return ATCA_EXECUTION_ERROR;
     bde:	23f4      	movs	r3, #244	; 0xf4
     be0:	e7d4      	b.n	b8c <isATCAError+0x8>
            return ATCA_SUCCESS;
     be2:	2300      	movs	r3, #0
     be4:	e7d2      	b.n	b8c <isATCAError+0x8>
	...

00000be8 <initATCADevice>:
 *                       mCommands and mIface members should point to existing
 *                       structures to be initialized.
 * \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS initATCADevice(ATCAIfaceCfg *cfg, ATCADevice ca_dev)
{
     be8:	b570      	push	{r4, r5, r6, lr}
     bea:	0005      	movs	r5, r0
     bec:	000c      	movs	r4, r1
    ATCA_STATUS status;

    if (cfg == NULL || ca_dev == NULL || ca_dev->mCommands == NULL || ca_dev->mIface == NULL)
     bee:	2800      	cmp	r0, #0
     bf0:	d012      	beq.n	c18 <initATCADevice+0x30>
     bf2:	2900      	cmp	r1, #0
     bf4:	d012      	beq.n	c1c <initATCADevice+0x34>
     bf6:	6809      	ldr	r1, [r1, #0]
     bf8:	2900      	cmp	r1, #0
     bfa:	d011      	beq.n	c20 <initATCADevice+0x38>
    {
        return ATCA_BAD_PARAM;
     bfc:	20e2      	movs	r0, #226	; 0xe2
    if (cfg == NULL || ca_dev == NULL || ca_dev->mCommands == NULL || ca_dev->mIface == NULL)
     bfe:	6863      	ldr	r3, [r4, #4]
     c00:	2b00      	cmp	r3, #0
     c02:	d00a      	beq.n	c1a <initATCADevice+0x32>
    }

    status = initATCACommand(cfg->devtype, ca_dev->mCommands);
     c04:	7868      	ldrb	r0, [r5, #1]
     c06:	4b07      	ldr	r3, [pc, #28]	; (c24 <initATCADevice+0x3c>)
     c08:	4798      	blx	r3
    if (status != ATCA_SUCCESS)
     c0a:	2800      	cmp	r0, #0
     c0c:	d105      	bne.n	c1a <initATCADevice+0x32>
    {
        return status;
    }

    status = initATCAIface(cfg, ca_dev->mIface);
     c0e:	6861      	ldr	r1, [r4, #4]
     c10:	0028      	movs	r0, r5
     c12:	4b05      	ldr	r3, [pc, #20]	; (c28 <initATCADevice+0x40>)
     c14:	4798      	blx	r3
     c16:	e000      	b.n	c1a <initATCADevice+0x32>
        return ATCA_BAD_PARAM;
     c18:	20e2      	movs	r0, #226	; 0xe2
    {
        return status;
    }

    return ATCA_SUCCESS;
}
     c1a:	bd70      	pop	{r4, r5, r6, pc}
        return ATCA_BAD_PARAM;
     c1c:	20e2      	movs	r0, #226	; 0xe2
     c1e:	e7fc      	b.n	c1a <initATCADevice+0x32>
     c20:	20e2      	movs	r0, #226	; 0xe2
     c22:	e7fa      	b.n	c1a <initATCADevice+0x32>
     c24:	00000971 	.word	0x00000971
     c28:	00000f99 	.word	0x00000f99

00000c2c <newATCADevice>:
{
     c2c:	b570      	push	{r4, r5, r6, lr}
     c2e:	1e05      	subs	r5, r0, #0
    if (cfg == NULL)
     c30:	d02d      	beq.n	c8e <newATCADevice+0x62>
    ca_dev = (ATCADevice)malloc(sizeof(*ca_dev));
     c32:	2008      	movs	r0, #8
     c34:	4b17      	ldr	r3, [pc, #92]	; (c94 <newATCADevice+0x68>)
     c36:	4798      	blx	r3
     c38:	1e04      	subs	r4, r0, #0
    if (ca_dev == NULL)
     c3a:	d011      	beq.n	c60 <newATCADevice+0x34>
    ca_dev->mCommands = (ATCACommand)malloc(sizeof(*(ca_dev->mCommands)));
     c3c:	2004      	movs	r0, #4
     c3e:	4b15      	ldr	r3, [pc, #84]	; (c94 <newATCADevice+0x68>)
     c40:	4798      	blx	r3
     c42:	1e06      	subs	r6, r0, #0
     c44:	6020      	str	r0, [r4, #0]
    if (ca_dev->mCommands == NULL)
     c46:	d00d      	beq.n	c64 <newATCADevice+0x38>
    ca_dev->mIface = (ATCAIface)malloc(sizeof(*(ca_dev->mIface)));
     c48:	2028      	movs	r0, #40	; 0x28
     c4a:	4b12      	ldr	r3, [pc, #72]	; (c94 <newATCADevice+0x68>)
     c4c:	4798      	blx	r3
     c4e:	6060      	str	r0, [r4, #4]
    if (ca_dev->mIface == NULL)
     c50:	2800      	cmp	r0, #0
     c52:	d00c      	beq.n	c6e <newATCADevice+0x42>
    status = initATCADevice(cfg, ca_dev);
     c54:	0021      	movs	r1, r4
     c56:	0028      	movs	r0, r5
     c58:	4b0f      	ldr	r3, [pc, #60]	; (c98 <newATCADevice+0x6c>)
     c5a:	4798      	blx	r3
    if (status != ATCA_SUCCESS)
     c5c:	2800      	cmp	r0, #0
     c5e:	d10d      	bne.n	c7c <newATCADevice+0x50>
}
     c60:	0020      	movs	r0, r4
     c62:	bd70      	pop	{r4, r5, r6, pc}
        free(ca_dev);
     c64:	0020      	movs	r0, r4
     c66:	4b0d      	ldr	r3, [pc, #52]	; (c9c <newATCADevice+0x70>)
     c68:	4798      	blx	r3
        return NULL;
     c6a:	2400      	movs	r4, #0
     c6c:	e7f8      	b.n	c60 <newATCADevice+0x34>
        free(ca_dev->mCommands);
     c6e:	0030      	movs	r0, r6
     c70:	4d0a      	ldr	r5, [pc, #40]	; (c9c <newATCADevice+0x70>)
     c72:	47a8      	blx	r5
        free(ca_dev);
     c74:	0020      	movs	r0, r4
     c76:	47a8      	blx	r5
        return NULL;
     c78:	2400      	movs	r4, #0
     c7a:	e7f1      	b.n	c60 <newATCADevice+0x34>
        free(ca_dev->mIface);
     c7c:	6860      	ldr	r0, [r4, #4]
     c7e:	4d07      	ldr	r5, [pc, #28]	; (c9c <newATCADevice+0x70>)
     c80:	47a8      	blx	r5
        free(ca_dev->mCommands);
     c82:	6820      	ldr	r0, [r4, #0]
     c84:	47a8      	blx	r5
        free(ca_dev);
     c86:	0020      	movs	r0, r4
     c88:	47a8      	blx	r5
        return NULL;
     c8a:	2400      	movs	r4, #0
     c8c:	e7e8      	b.n	c60 <newATCADevice+0x34>
        return NULL;
     c8e:	2400      	movs	r4, #0
     c90:	e7e6      	b.n	c60 <newATCADevice+0x34>
     c92:	46c0      	nop			; (mov r8, r8)
     c94:	00019709 	.word	0x00019709
     c98:	00000be9 	.word	0x00000be9
     c9c:	0001971d 	.word	0x0001971d

00000ca0 <releaseATCADevice>:
/** \brief Release any resources associated with the device.
 *  \param[in] ca_dev  Device to release
 *  \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS releaseATCADevice(ATCADevice ca_dev)
{
     ca0:	b510      	push	{r4, lr}
    if (ca_dev == NULL)
    {
        return ATCA_BAD_PARAM;
     ca2:	23e2      	movs	r3, #226	; 0xe2
    if (ca_dev == NULL)
     ca4:	2800      	cmp	r0, #0
     ca6:	d003      	beq.n	cb0 <releaseATCADevice+0x10>
    }

    return releaseATCAIface(ca_dev->mIface);
     ca8:	6840      	ldr	r0, [r0, #4]
     caa:	4b02      	ldr	r3, [pc, #8]	; (cb4 <releaseATCADevice+0x14>)
     cac:	4798      	blx	r3
     cae:	0003      	movs	r3, r0
}
     cb0:	0018      	movs	r0, r3
     cb2:	bd10      	pop	{r4, pc}
     cb4:	00000f1d 	.word	0x00000f1d

00000cb8 <deleteATCADevice>:
{
     cb8:	b510      	push	{r4, lr}
     cba:	1e04      	subs	r4, r0, #0
    if (ca_dev == NULL)
     cbc:	d013      	beq.n	ce6 <deleteATCADevice+0x2e>
    releaseATCADevice(*ca_dev);
     cbe:	6800      	ldr	r0, [r0, #0]
     cc0:	4b09      	ldr	r3, [pc, #36]	; (ce8 <deleteATCADevice+0x30>)
     cc2:	4798      	blx	r3
    deleteATCACommand(&(*ca_dev)->mCommands);
     cc4:	6820      	ldr	r0, [r4, #0]
     cc6:	4b09      	ldr	r3, [pc, #36]	; (cec <deleteATCADevice+0x34>)
     cc8:	4798      	blx	r3
    if ((*ca_dev)->mIface)
     cca:	6823      	ldr	r3, [r4, #0]
     ccc:	6858      	ldr	r0, [r3, #4]
     cce:	2800      	cmp	r0, #0
     cd0:	d004      	beq.n	cdc <deleteATCADevice+0x24>
        free((*ca_dev)->mIface);
     cd2:	4b07      	ldr	r3, [pc, #28]	; (cf0 <deleteATCADevice+0x38>)
     cd4:	4798      	blx	r3
        (*ca_dev)->mIface = NULL;
     cd6:	6823      	ldr	r3, [r4, #0]
     cd8:	2200      	movs	r2, #0
     cda:	605a      	str	r2, [r3, #4]
    free(*ca_dev);
     cdc:	6820      	ldr	r0, [r4, #0]
     cde:	4b04      	ldr	r3, [pc, #16]	; (cf0 <deleteATCADevice+0x38>)
     ce0:	4798      	blx	r3
    *ca_dev = NULL;
     ce2:	2300      	movs	r3, #0
     ce4:	6023      	str	r3, [r4, #0]
}
     ce6:	bd10      	pop	{r4, pc}
     ce8:	00000ca1 	.word	0x00000ca1
     cec:	00000985 	.word	0x00000985
     cf0:	0001971d 	.word	0x0001971d

00000cf4 <atca_execute_command>:
 * \param[in]    device  CryptoAuthentication device to send the command to.
 *
 * \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS atca_execute_command(ATCAPacket* packet, ATCADevice device)
{
     cf4:	b5f0      	push	{r4, r5, r6, r7, lr}
     cf6:	46de      	mov	lr, fp
     cf8:	4657      	mov	r7, sl
     cfa:	464e      	mov	r6, r9
     cfc:	4645      	mov	r5, r8
     cfe:	b5e0      	push	{r5, r6, r7, lr}
     d00:	b083      	sub	sp, #12
     d02:	4681      	mov	r9, r0
     d04:	000f      	movs	r7, r1
#else
        execution_or_wait_time = ATCA_POLLING_INIT_TIME_MSEC;
        max_delay_count = ATCA_POLLING_MAX_TIME_MSEC / ATCA_POLLING_FREQUENCY_TIME_MSEC;
#endif

        if ((status = atwake(device->mIface)) != ATCA_SUCCESS)
     d06:	6848      	ldr	r0, [r1, #4]
     d08:	4b24      	ldr	r3, [pc, #144]	; (d9c <atca_execute_command+0xa8>)
     d0a:	4798      	blx	r3
     d0c:	1e04      	subs	r4, r0, #0
     d0e:	d00a      	beq.n	d26 <atca_execute_command+0x32>
            break;
        }
    }
    while (0);

    atidle(device->mIface);
     d10:	6878      	ldr	r0, [r7, #4]
     d12:	4b23      	ldr	r3, [pc, #140]	; (da0 <atca_execute_command+0xac>)
     d14:	4798      	blx	r3
    return status;
}
     d16:	0020      	movs	r0, r4
     d18:	b003      	add	sp, #12
     d1a:	bc3c      	pop	{r2, r3, r4, r5}
     d1c:	4690      	mov	r8, r2
     d1e:	4699      	mov	r9, r3
     d20:	46a2      	mov	sl, r4
     d22:	46ab      	mov	fp, r5
     d24:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if ((status = atsend(device->mIface, (uint8_t*)packet, packet->txsize)) != ATCA_SUCCESS)
     d26:	464b      	mov	r3, r9
     d28:	785a      	ldrb	r2, [r3, #1]
     d2a:	4649      	mov	r1, r9
     d2c:	6878      	ldr	r0, [r7, #4]
     d2e:	4b1d      	ldr	r3, [pc, #116]	; (da4 <atca_execute_command+0xb0>)
     d30:	4798      	blx	r3
     d32:	1e04      	subs	r4, r0, #0
     d34:	d1ec      	bne.n	d10 <atca_execute_command+0x1c>
        atca_delay_ms(execution_or_wait_time);
     d36:	2001      	movs	r0, #1
     d38:	4b1b      	ldr	r3, [pc, #108]	; (da8 <atca_execute_command+0xb4>)
     d3a:	4798      	blx	r3
     d3c:	4e1b      	ldr	r6, [pc, #108]	; (dac <atca_execute_command+0xb8>)
            memset(packet->data, 0, sizeof(packet->data));
     d3e:	23c0      	movs	r3, #192	; 0xc0
     d40:	4698      	mov	r8, r3
     d42:	4b1b      	ldr	r3, [pc, #108]	; (db0 <atca_execute_command+0xbc>)
     d44:	469b      	mov	fp, r3
            if ((status = atreceive(device->mIface, packet->data, &rxsize)) == ATCA_SUCCESS)
     d46:	4b1b      	ldr	r3, [pc, #108]	; (db4 <atca_execute_command+0xc0>)
     d48:	469a      	mov	sl, r3
            memset(packet->data, 0, sizeof(packet->data));
     d4a:	464b      	mov	r3, r9
     d4c:	1d9d      	adds	r5, r3, #6
     d4e:	4642      	mov	r2, r8
     d50:	2100      	movs	r1, #0
     d52:	0028      	movs	r0, r5
     d54:	47d8      	blx	fp
            rxsize = sizeof(packet->data);
     d56:	466b      	mov	r3, sp
     d58:	1d9a      	adds	r2, r3, #6
     d5a:	4643      	mov	r3, r8
     d5c:	8013      	strh	r3, [r2, #0]
            if ((status = atreceive(device->mIface, packet->data, &rxsize)) == ATCA_SUCCESS)
     d5e:	0029      	movs	r1, r5
     d60:	6878      	ldr	r0, [r7, #4]
     d62:	47d0      	blx	sl
     d64:	1e04      	subs	r4, r0, #0
     d66:	d010      	beq.n	d8a <atca_execute_command+0x96>
            atca_delay_ms(ATCA_POLLING_FREQUENCY_TIME_MSEC);
     d68:	2002      	movs	r0, #2
     d6a:	4b0f      	ldr	r3, [pc, #60]	; (da8 <atca_execute_command+0xb4>)
     d6c:	4798      	blx	r3
     d6e:	3e01      	subs	r6, #1
        while (max_delay_count-- > 0);
     d70:	2e00      	cmp	r6, #0
     d72:	d1ea      	bne.n	d4a <atca_execute_command+0x56>
     d74:	e7cc      	b.n	d10 <atca_execute_command+0x1c>
        if ((status = atCheckCrc(packet->data)) != ATCA_SUCCESS)
     d76:	0028      	movs	r0, r5
     d78:	4b0f      	ldr	r3, [pc, #60]	; (db8 <atca_execute_command+0xc4>)
     d7a:	4798      	blx	r3
     d7c:	1e04      	subs	r4, r0, #0
     d7e:	d1c7      	bne.n	d10 <atca_execute_command+0x1c>
        if ((status = isATCAError(packet->data)) != ATCA_SUCCESS)
     d80:	0028      	movs	r0, r5
     d82:	4b0e      	ldr	r3, [pc, #56]	; (dbc <atca_execute_command+0xc8>)
     d84:	4798      	blx	r3
     d86:	0004      	movs	r4, r0
     d88:	e7c2      	b.n	d10 <atca_execute_command+0x1c>
        if (rxsize < 4)
     d8a:	466b      	mov	r3, sp
     d8c:	88dc      	ldrh	r4, [r3, #6]
     d8e:	2c03      	cmp	r4, #3
     d90:	d8f1      	bhi.n	d76 <atca_execute_command+0x82>
                status = ATCA_RX_NO_RESPONSE;
     d92:	4260      	negs	r0, r4
     d94:	4160      	adcs	r0, r4
     d96:	30e6      	adds	r0, #230	; 0xe6
     d98:	0004      	movs	r4, r0
     d9a:	e7b9      	b.n	d10 <atca_execute_command+0x1c>
     d9c:	00000ee1 	.word	0x00000ee1
     da0:	00000f01 	.word	0x00000f01
     da4:	00000ed1 	.word	0x00000ed1
     da8:	00001961 	.word	0x00001961
     dac:	000004e3 	.word	0x000004e3
     db0:	00019e35 	.word	0x00019e35
     db4:	00000ed9 	.word	0x00000ed9
     db8:	00000b49 	.word	0x00000b49
     dbc:	00000b85 	.word	0x00000b85

00000dc0 <isHexAlpha>:
 * \param[in] c  character to check
 * \return True if the character is a hex
 */
bool isHexAlpha(char c)
{
    return ((c >= 'A') && (c <= 'F')) || ((c >= 'a') && (c <= 'f'));
     dc0:	0002      	movs	r2, r0
     dc2:	3a41      	subs	r2, #65	; 0x41
     dc4:	2301      	movs	r3, #1
     dc6:	2a05      	cmp	r2, #5
     dc8:	d906      	bls.n	dd8 <isHexAlpha+0x18>
     dca:	3861      	subs	r0, #97	; 0x61
     dcc:	b2c0      	uxtb	r0, r0
     dce:	2300      	movs	r3, #0
     dd0:	2205      	movs	r2, #5
     dd2:	4282      	cmp	r2, r0
     dd4:	415b      	adcs	r3, r3
     dd6:	b2db      	uxtb	r3, r3
}
     dd8:	0018      	movs	r0, r3
     dda:	4770      	bx	lr

00000ddc <isHexDigit>:
 * \brief Returns true if this character is a valid hex character.
 * \param[in] c  character to check
 * \return True if the character can be included in a valid hexstring
 */
bool isHexDigit(char c)
{
     ddc:	b510      	push	{r4, lr}
    return isDigit(c) || isHexAlpha(c);
     dde:	0002      	movs	r2, r0
     de0:	3a30      	subs	r2, #48	; 0x30
     de2:	2301      	movs	r3, #1
     de4:	2a09      	cmp	r2, #9
     de6:	d902      	bls.n	dee <isHexDigit+0x12>
     de8:	4b02      	ldr	r3, [pc, #8]	; (df4 <isHexDigit+0x18>)
     dea:	4798      	blx	r3
     dec:	0003      	movs	r3, r0
}
     dee:	0018      	movs	r0, r3
     df0:	bd10      	pop	{r4, pc}
     df2:	46c0      	nop			; (mov r8, r8)
     df4:	00000dc1 	.word	0x00000dc1

00000df8 <atcab_hex2bin>:
{
     df8:	b5f0      	push	{r4, r5, r6, r7, lr}
     dfa:	46de      	mov	lr, fp
     dfc:	4657      	mov	r7, sl
     dfe:	464e      	mov	r6, r9
     e00:	4645      	mov	r5, r8
     e02:	b5e0      	push	{r5, r6, r7, lr}
     e04:	b083      	sub	sp, #12
     e06:	1e0f      	subs	r7, r1, #0
     e08:	9201      	str	r2, [sp, #4]
     e0a:	469a      	mov	sl, r3
    for (hex_index = 0; hex_index < hex_size; hex_index++)
     e0c:	d057      	beq.n	ebe <atcab_hex2bin+0xc6>
     e0e:	0004      	movs	r4, r0
     e10:	4680      	mov	r8, r0
     e12:	4488      	add	r8, r1
     e14:	2601      	movs	r6, #1
     e16:	2700      	movs	r7, #0
        if (!isHexDigit(hex[hex_index]))
     e18:	4b2c      	ldr	r3, [pc, #176]	; (ecc <atcab_hex2bin+0xd4>)
     e1a:	4699      	mov	r9, r3
        is_upper_nibble = !is_upper_nibble;
     e1c:	2301      	movs	r3, #1
     e1e:	469b      	mov	fp, r3
     e20:	e00e      	b.n	e40 <atcab_hex2bin+0x48>
    return 16;
     e22:	2310      	movs	r3, #16
    if (c >= 'A' && c <= 'F')
     e24:	0029      	movs	r1, r5
     e26:	3941      	subs	r1, #65	; 0x41
     e28:	2905      	cmp	r1, #5
     e2a:	d801      	bhi.n	e30 <atcab_hex2bin+0x38>
        return (uint8_t)(c - 'A') + 10;
     e2c:	3d37      	subs	r5, #55	; 0x37
     e2e:	b2eb      	uxtb	r3, r5
            bin[bin_index] = hex_digit_to_num(hex[hex_index]) << 4;
     e30:	011b      	lsls	r3, r3, #4
     e32:	7013      	strb	r3, [r2, #0]
        is_upper_nibble = !is_upper_nibble;
     e34:	465b      	mov	r3, fp
     e36:	405e      	eors	r6, r3
     e38:	b2f6      	uxtb	r6, r6
     e3a:	3401      	adds	r4, #1
    for (hex_index = 0; hex_index < hex_size; hex_index++)
     e3c:	4544      	cmp	r4, r8
     e3e:	d034      	beq.n	eaa <atcab_hex2bin+0xb2>
        if (!isHexDigit(hex[hex_index]))
     e40:	7825      	ldrb	r5, [r4, #0]
     e42:	0028      	movs	r0, r5
     e44:	47c8      	blx	r9
     e46:	2800      	cmp	r0, #0
     e48:	d0f7      	beq.n	e3a <atcab_hex2bin+0x42>
        if (bin_index >= *bin_size)
     e4a:	4653      	mov	r3, sl
     e4c:	681b      	ldr	r3, [r3, #0]
     e4e:	42bb      	cmp	r3, r7
     e50:	d939      	bls.n	ec6 <atcab_hex2bin+0xce>
        if (is_upper_nibble)
     e52:	2e00      	cmp	r6, #0
     e54:	d00e      	beq.n	e74 <atcab_hex2bin+0x7c>
            bin[bin_index] = hex_digit_to_num(hex[hex_index]) << 4;
     e56:	9b01      	ldr	r3, [sp, #4]
     e58:	19da      	adds	r2, r3, r7
    if (c >= '0' && c <= '9')
     e5a:	0029      	movs	r1, r5
     e5c:	3930      	subs	r1, #48	; 0x30
     e5e:	b2c9      	uxtb	r1, r1
        return (uint8_t)(c - '0');
     e60:	000b      	movs	r3, r1
    if (c >= '0' && c <= '9')
     e62:	2909      	cmp	r1, #9
     e64:	d9e4      	bls.n	e30 <atcab_hex2bin+0x38>
    if (c >= 'a' && c <= 'f')
     e66:	002b      	movs	r3, r5
     e68:	3b61      	subs	r3, #97	; 0x61
     e6a:	2b05      	cmp	r3, #5
     e6c:	d8d9      	bhi.n	e22 <atcab_hex2bin+0x2a>
        return (uint8_t)(c - 'a') + 10;
     e6e:	3d57      	subs	r5, #87	; 0x57
     e70:	b2eb      	uxtb	r3, r5
     e72:	e7dd      	b.n	e30 <atcab_hex2bin+0x38>
    if (c >= '0' && c <= '9')
     e74:	002a      	movs	r2, r5
     e76:	3a30      	subs	r2, #48	; 0x30
     e78:	b2d2      	uxtb	r2, r2
        return (uint8_t)(c - '0');
     e7a:	0013      	movs	r3, r2
    if (c >= '0' && c <= '9')
     e7c:	2a09      	cmp	r2, #9
     e7e:	d905      	bls.n	e8c <atcab_hex2bin+0x94>
    if (c >= 'a' && c <= 'f')
     e80:	002b      	movs	r3, r5
     e82:	3b61      	subs	r3, #97	; 0x61
     e84:	2b05      	cmp	r3, #5
     e86:	d808      	bhi.n	e9a <atcab_hex2bin+0xa2>
        return (uint8_t)(c - 'a') + 10;
     e88:	3d57      	subs	r5, #87	; 0x57
     e8a:	b2eb      	uxtb	r3, r5
            bin[bin_index] += hex_digit_to_num(hex[hex_index]);
     e8c:	9a01      	ldr	r2, [sp, #4]
     e8e:	19d2      	adds	r2, r2, r7
     e90:	7815      	ldrb	r5, [r2, #0]
     e92:	195d      	adds	r5, r3, r5
     e94:	7015      	strb	r5, [r2, #0]
            bin_index++;
     e96:	3701      	adds	r7, #1
     e98:	e7cc      	b.n	e34 <atcab_hex2bin+0x3c>
    return 16;
     e9a:	2310      	movs	r3, #16
    if (c >= 'A' && c <= 'F')
     e9c:	002a      	movs	r2, r5
     e9e:	3a41      	subs	r2, #65	; 0x41
     ea0:	2a05      	cmp	r2, #5
     ea2:	d8f3      	bhi.n	e8c <atcab_hex2bin+0x94>
        return (uint8_t)(c - 'A') + 10;
     ea4:	3d37      	subs	r5, #55	; 0x37
     ea6:	b2eb      	uxtb	r3, r5
     ea8:	e7f0      	b.n	e8c <atcab_hex2bin+0x94>
        return ATCA_BAD_PARAM;
     eaa:	20e2      	movs	r0, #226	; 0xe2
    if (!is_upper_nibble)
     eac:	2e00      	cmp	r6, #0
     eae:	d106      	bne.n	ebe <atcab_hex2bin+0xc6>
}
     eb0:	b003      	add	sp, #12
     eb2:	bc3c      	pop	{r2, r3, r4, r5}
     eb4:	4690      	mov	r8, r2
     eb6:	4699      	mov	r9, r3
     eb8:	46a2      	mov	sl, r4
     eba:	46ab      	mov	fp, r5
     ebc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    *bin_size = bin_index;
     ebe:	4653      	mov	r3, sl
     ec0:	601f      	str	r7, [r3, #0]
    return ATCA_SUCCESS;
     ec2:	2000      	movs	r0, #0
     ec4:	e7f4      	b.n	eb0 <atcab_hex2bin+0xb8>
            return ATCA_SMALL_BUFFER;
     ec6:	20ed      	movs	r0, #237	; 0xed
     ec8:	e7f2      	b.n	eb0 <atcab_hex2bin+0xb8>
     eca:	46c0      	nop			; (mov r8, r8)
     ecc:	00000ddd 	.word	0x00000ddd

00000ed0 <atsend>:
 * \param[in] txdata    Data to be transmitted to the device.
 * \param[in] txlength  Number of bytes to be transmitted to the device.
 * \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS atsend(ATCAIface ca_iface, uint8_t *txdata, int txlength)
{
     ed0:	b510      	push	{r4, lr}
    return ca_iface->atsend(ca_iface, txdata, txlength);
     ed2:	6903      	ldr	r3, [r0, #16]
     ed4:	4798      	blx	r3
}
     ed6:	bd10      	pop	{r4, pc}

00000ed8 <atreceive>:
 * \param[inout] rxlength  As input, the size of the rxdata buffer.
 *                         As output, the number of bytes received.
 * \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS atreceive(ATCAIface ca_iface, uint8_t *rxdata, uint16_t *rxlength)
{
     ed8:	b510      	push	{r4, lr}
    return ca_iface->atreceive(ca_iface, rxdata, rxlength);
     eda:	6943      	ldr	r3, [r0, #20]
     edc:	4798      	blx	r3
}
     ede:	bd10      	pop	{r4, pc}

00000ee0 <atwake>:
 *         instead.
 * \param[in] ca_iface  Device to interact with.
 * \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS atwake(ATCAIface ca_iface)
{
     ee0:	b510      	push	{r4, lr}
     ee2:	0004      	movs	r4, r0
    ATCA_STATUS status = ca_iface->atwake(ca_iface);
     ee4:	6983      	ldr	r3, [r0, #24]
     ee6:	4798      	blx	r3

    if (status == ATCA_WAKE_FAILED)
     ee8:	28d0      	cmp	r0, #208	; 0xd0
     eea:	d000      	beq.n	eee <atwake+0xe>

        status = ca_iface->atwake(ca_iface);
    }

    return status;
}
     eec:	bd10      	pop	{r4, pc}
        atca_delay_ms(ATCA_POST_DELAY_MSEC);
     eee:	38b7      	subs	r0, #183	; 0xb7
     ef0:	4b02      	ldr	r3, [pc, #8]	; (efc <atwake+0x1c>)
     ef2:	4798      	blx	r3
        status = ca_iface->atwake(ca_iface);
     ef4:	69a3      	ldr	r3, [r4, #24]
     ef6:	0020      	movs	r0, r4
     ef8:	4798      	blx	r3
     efa:	e7f7      	b.n	eec <atwake+0xc>
     efc:	00001961 	.word	0x00001961

00000f00 <atidle>:
 *         be used instead.
 * \param[in] ca_iface  Device to interact with.
 * \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS atidle(ATCAIface ca_iface)
{
     f00:	b510      	push	{r4, lr}
    ATCA_STATUS status;

    status = ca_iface->atidle(ca_iface);
     f02:	69c3      	ldr	r3, [r0, #28]
     f04:	4798      	blx	r3
     f06:	0004      	movs	r4, r0
    atca_delay_ms(1);
     f08:	2001      	movs	r0, #1
     f0a:	4b02      	ldr	r3, [pc, #8]	; (f14 <atidle+0x14>)
     f0c:	4798      	blx	r3
    return status;
}
     f0e:	0020      	movs	r0, r4
     f10:	bd10      	pop	{r4, pc}
     f12:	46c0      	nop			; (mov r8, r8)
     f14:	00001961 	.word	0x00001961

00000f18 <atgetifacecfg>:
 * \param[in] ca_iface  Device interface.
 * \return Logical interface configuration.
 */
ATCAIfaceCfg * atgetifacecfg(ATCAIface ca_iface)
{
    return ca_iface->mIfaceCFG;
     f18:	6840      	ldr	r0, [r0, #4]
}
     f1a:	4770      	bx	lr

00000f1c <releaseATCAIface>:
 *         this interface.
 *  \param[in] ca_iface  Device interface.
 *  \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS releaseATCAIface(ATCAIface ca_iface)
{
     f1c:	b510      	push	{r4, lr}
    if (ca_iface == NULL)
    {
        return ATCA_BAD_PARAM;
     f1e:	23e2      	movs	r3, #226	; 0xe2
    if (ca_iface == NULL)
     f20:	2800      	cmp	r0, #0
     f22:	d004      	beq.n	f2e <releaseATCAIface+0x12>
    }

    return hal_iface_release(ca_iface->mType, ca_iface->hal_data);
     f24:	6a41      	ldr	r1, [r0, #36]	; 0x24
     f26:	7800      	ldrb	r0, [r0, #0]
     f28:	4b02      	ldr	r3, [pc, #8]	; (f34 <releaseATCAIface+0x18>)
     f2a:	4798      	blx	r3
     f2c:	0003      	movs	r3, r0
}
     f2e:	0018      	movs	r0, r3
     f30:	bd10      	pop	{r4, pc}
     f32:	46c0      	nop			; (mov r8, r8)
     f34:	00001369 	.word	0x00001369

00000f38 <_atinit>:
    *ca_iface = NULL;
}
#endif

ATCA_STATUS _atinit(ATCAIface ca_iface, ATCAHAL_t *hal)
{
     f38:	b570      	push	{r4, r5, r6, lr}
     f3a:	0004      	movs	r4, r0
     f3c:	000d      	movs	r5, r1
    // get method mapping to HAL methods for this interface
    hal_iface_init(ca_iface->mIfaceCFG, hal);
     f3e:	6840      	ldr	r0, [r0, #4]
     f40:	4b09      	ldr	r3, [pc, #36]	; (f68 <_atinit+0x30>)
     f42:	4798      	blx	r3
    ca_iface->atinit     = hal->halinit;
     f44:	682b      	ldr	r3, [r5, #0]
     f46:	60a3      	str	r3, [r4, #8]
    ca_iface->atpostinit = hal->halpostinit;
     f48:	686b      	ldr	r3, [r5, #4]
     f4a:	60e3      	str	r3, [r4, #12]
    ca_iface->atsend     = hal->halsend;
     f4c:	68ab      	ldr	r3, [r5, #8]
     f4e:	6123      	str	r3, [r4, #16]
    ca_iface->atreceive  = hal->halreceive;
     f50:	68eb      	ldr	r3, [r5, #12]
     f52:	6163      	str	r3, [r4, #20]
    ca_iface->atwake     = hal->halwake;
     f54:	692b      	ldr	r3, [r5, #16]
     f56:	61a3      	str	r3, [r4, #24]
    ca_iface->atsleep    = hal->halsleep;
     f58:	69ab      	ldr	r3, [r5, #24]
     f5a:	6223      	str	r3, [r4, #32]
    ca_iface->atidle     = hal->halidle;
     f5c:	696b      	ldr	r3, [r5, #20]
     f5e:	61e3      	str	r3, [r4, #28]
    ca_iface->hal_data   = hal->hal_data;
     f60:	6a2b      	ldr	r3, [r5, #32]
     f62:	6263      	str	r3, [r4, #36]	; 0x24

    return ATCA_SUCCESS;
}
     f64:	2000      	movs	r0, #0
     f66:	bd70      	pop	{r4, r5, r6, pc}
     f68:	00001315 	.word	0x00001315

00000f6c <atinit>:
{
     f6c:	b510      	push	{r4, lr}
     f6e:	b08a      	sub	sp, #40	; 0x28
     f70:	0004      	movs	r4, r0
    _atinit(ca_iface, &hal);
     f72:	a901      	add	r1, sp, #4
     f74:	4b07      	ldr	r3, [pc, #28]	; (f94 <atinit+0x28>)
     f76:	4798      	blx	r3
    status = ca_iface->atinit(&hal, ca_iface->mIfaceCFG);
     f78:	6861      	ldr	r1, [r4, #4]
     f7a:	a801      	add	r0, sp, #4
     f7c:	68a3      	ldr	r3, [r4, #8]
     f7e:	4798      	blx	r3
    if (status == ATCA_SUCCESS)
     f80:	2800      	cmp	r0, #0
     f82:	d001      	beq.n	f88 <atinit+0x1c>
}
     f84:	b00a      	add	sp, #40	; 0x28
     f86:	bd10      	pop	{r4, pc}
        ca_iface->hal_data = hal.hal_data;
     f88:	9b09      	ldr	r3, [sp, #36]	; 0x24
     f8a:	6263      	str	r3, [r4, #36]	; 0x24
        status = ca_iface->atpostinit(ca_iface);
     f8c:	68e3      	ldr	r3, [r4, #12]
     f8e:	0020      	movs	r0, r4
     f90:	4798      	blx	r3
     f92:	e7f7      	b.n	f84 <atinit+0x18>
     f94:	00000f39 	.word	0x00000f39

00000f98 <initATCAIface>:
{
     f98:	b510      	push	{r4, lr}
    if (cfg == NULL || ca_iface == NULL)
     f9a:	2800      	cmp	r0, #0
     f9c:	d00b      	beq.n	fb6 <initATCAIface+0x1e>
        return ATCA_BAD_PARAM;
     f9e:	23e2      	movs	r3, #226	; 0xe2
    if (cfg == NULL || ca_iface == NULL)
     fa0:	2900      	cmp	r1, #0
     fa2:	d006      	beq.n	fb2 <initATCAIface+0x1a>
    ca_iface->mType = cfg->iface_type;
     fa4:	7803      	ldrb	r3, [r0, #0]
     fa6:	700b      	strb	r3, [r1, #0]
    ca_iface->mIfaceCFG = cfg;
     fa8:	6048      	str	r0, [r1, #4]
    status = atinit(ca_iface);
     faa:	0008      	movs	r0, r1
     fac:	4b03      	ldr	r3, [pc, #12]	; (fbc <initATCAIface+0x24>)
     fae:	4798      	blx	r3
     fb0:	0003      	movs	r3, r0
}
     fb2:	0018      	movs	r0, r3
     fb4:	bd10      	pop	{r4, pc}
        return ATCA_BAD_PARAM;
     fb6:	23e2      	movs	r3, #226	; 0xe2
     fb8:	e7fb      	b.n	fb2 <initATCAIface+0x1a>
     fba:	46c0      	nop			; (mov r8, r8)
     fbc:	00000f6d 	.word	0x00000f6d

00000fc0 <atcac_sw_sha2_256>:
 * \param[out] digest     result
 * \return ATCA_SUCCESS on success, otherwise an error code.
 */

int atcac_sw_sha2_256(const uint8_t* data, size_t data_size, uint8_t digest[ATCA_SHA2_256_DIGEST_SIZE])
{
     fc0:	b570      	push	{r4, r5, r6, lr}
     fc2:	b0b0      	sub	sp, #192	; 0xc0
     fc4:	0005      	movs	r5, r0
     fc6:	000e      	movs	r6, r1
     fc8:	0014      	movs	r4, r2
    sw_sha256_init((sw_sha256_ctx*)ctx);
     fca:	4668      	mov	r0, sp
     fcc:	4b06      	ldr	r3, [pc, #24]	; (fe8 <atcac_sw_sha2_256+0x28>)
     fce:	4798      	blx	r3
    sw_sha256_update((sw_sha256_ctx*)ctx, data, (uint32_t)data_size);
     fd0:	0032      	movs	r2, r6
     fd2:	0029      	movs	r1, r5
     fd4:	4668      	mov	r0, sp
     fd6:	4b05      	ldr	r3, [pc, #20]	; (fec <atcac_sw_sha2_256+0x2c>)
     fd8:	4798      	blx	r3
    sw_sha256_final((sw_sha256_ctx*)ctx, digest);
     fda:	0021      	movs	r1, r4
     fdc:	4668      	mov	r0, sp
     fde:	4b04      	ldr	r3, [pc, #16]	; (ff0 <atcac_sw_sha2_256+0x30>)
     fe0:	4798      	blx	r3
    {
        return ret;
    }

    return ATCA_SUCCESS;
     fe2:	2000      	movs	r0, #0
     fe4:	b030      	add	sp, #192	; 0xc0
     fe6:	bd70      	pop	{r4, r5, r6, pc}
     fe8:	000011a1 	.word	0x000011a1
     fec:	00001205 	.word	0x00001205
     ff0:	00001291 	.word	0x00001291

00000ff4 <sw_sha256_process>:
 * \param[in] ctx          SHA256 hash context
 * \param[in] blocks       Raw blocks to be processed
 * \param[in] block_count  Number of 64-byte blocks to process
 */
static void sw_sha256_process(sw_sha256_ctx* ctx, const uint8_t* blocks, uint32_t block_count)
{
     ff4:	b5f0      	push	{r4, r5, r6, r7, lr}
     ff6:	46de      	mov	lr, fp
     ff8:	4657      	mov	r7, sl
     ffa:	464e      	mov	r6, r9
     ffc:	4645      	mov	r5, r8
     ffe:	b5e0      	push	{r5, r6, r7, lr}
    1000:	b0d5      	sub	sp, #340	; 0x154
    1002:	900b      	str	r0, [sp, #44]	; 0x2c
        0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,
        0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2
    };

    // Loop through all the blocks to process
    for (block = 0; block < block_count; block++)
    1004:	2a00      	cmp	r2, #0
    1006:	d100      	bne.n	100a <sw_sha256_process+0x16>
    1008:	e0c0      	b.n	118c <sw_sha256_process+0x198>
    100a:	000b      	movs	r3, r1
    100c:	0192      	lsls	r2, r2, #6
    100e:	1889      	adds	r1, r1, r2
    1010:	910a      	str	r1, [sp, #40]	; 0x28
    1012:	0002      	movs	r2, r0
    1014:	32a8      	adds	r2, #168	; 0xa8
    1016:	9209      	str	r2, [sp, #36]	; 0x24
            s1 = rotate_right(rotate_register[4], 6)
                 ^ rotate_right(rotate_register[4], 11)
                 ^ rotate_right(rotate_register[4], 25);
            ch = (rotate_register[4] & rotate_register[5])
                 ^ (~rotate_register[4] & rotate_register[6]);
            t1 = rotate_register[7] + s1 + ch + k[i] + w_union.w_word[i];
    1018:	4a60      	ldr	r2, [pc, #384]	; (119c <sw_sha256_process+0x1a8>)
    101a:	4691      	mov	r9, r2
    101c:	e05c      	b.n	10d8 <sw_sha256_process+0xe4>

            rotate_register[7] = rotate_register[6];
            rotate_register[6] = rotate_register[5];
    101e:	9d02      	ldr	r5, [sp, #8]
    1020:	9501      	str	r5, [sp, #4]
            rotate_register[5] = rotate_register[4];
    1022:	9002      	str	r0, [sp, #8]
            rotate_register[4] = rotate_register[3] + t1;
    1024:	4658      	mov	r0, fp
            rotate_register[3] = rotate_register[2];
            rotate_register[2] = rotate_register[1];
    1026:	46bc      	mov	ip, r7
            rotate_register[1] = rotate_register[0];
    1028:	0027      	movs	r7, r4
            rotate_register[0] = t1 + t2;
    102a:	0014      	movs	r4, r2
                 ^ rotate_right(rotate_register[4], 11)
    102c:	0002      	movs	r2, r0
    102e:	250b      	movs	r5, #11
    1030:	41ea      	rors	r2, r5
    1032:	0005      	movs	r5, r0
    1034:	2606      	movs	r6, #6
    1036:	41f5      	rors	r5, r6
    1038:	4055      	eors	r5, r2
                 ^ rotate_right(rotate_register[4], 25);
    103a:	0002      	movs	r2, r0
    103c:	3613      	adds	r6, #19
    103e:	41f2      	rors	r2, r6
            s1 = rotate_right(rotate_register[4], 6)
    1040:	4055      	eors	r5, r2
            t1 = rotate_register[7] + s1 + ch + k[i] + w_union.w_word[i];
    1042:	464a      	mov	r2, r9
    1044:	588a      	ldr	r2, [r1, r2]
    1046:	9e04      	ldr	r6, [sp, #16]
    1048:	598e      	ldr	r6, [r1, r6]
    104a:	46b0      	mov	r8, r6
    104c:	4442      	add	r2, r8
    104e:	18ad      	adds	r5, r5, r2
            ch = (rotate_register[4] & rotate_register[5])
    1050:	9a02      	ldr	r2, [sp, #8]
    1052:	4002      	ands	r2, r0
    1054:	4690      	mov	r8, r2
    1056:	9a01      	ldr	r2, [sp, #4]
    1058:	4382      	bics	r2, r0
    105a:	4646      	mov	r6, r8
    105c:	4072      	eors	r2, r6
            t1 = rotate_register[7] + s1 + ch + k[i] + w_union.w_word[i];
    105e:	18aa      	adds	r2, r5, r2
    1060:	18d3      	adds	r3, r2, r3
            rotate_register[4] = rotate_register[3] + t1;
    1062:	9d03      	ldr	r5, [sp, #12]
    1064:	46ab      	mov	fp, r5
    1066:	449b      	add	fp, r3
                 ^ rotate_right(rotate_register[0], 13)
    1068:	0025      	movs	r5, r4
    106a:	260d      	movs	r6, #13
    106c:	41f5      	rors	r5, r6
    106e:	0022      	movs	r2, r4
    1070:	3e0b      	subs	r6, #11
    1072:	41f2      	rors	r2, r6
    1074:	406a      	eors	r2, r5
                 ^ rotate_right(rotate_register[0], 22);
    1076:	0025      	movs	r5, r4
    1078:	4656      	mov	r6, sl
    107a:	41f5      	rors	r5, r6
            s0 = rotate_right(rotate_register[0], 2)
    107c:	406a      	eors	r2, r5
                  ^ (rotate_register[0] & rotate_register[2])
    107e:	4665      	mov	r5, ip
    1080:	407d      	eors	r5, r7
    1082:	4025      	ands	r5, r4
                  ^ (rotate_register[1] & rotate_register[2]);
    1084:	4666      	mov	r6, ip
    1086:	403e      	ands	r6, r7
            maj = (rotate_register[0] & rotate_register[1])
    1088:	4075      	eors	r5, r6
            t2 = s0 + maj;
    108a:	1952      	adds	r2, r2, r5
            rotate_register[0] = t1 + t2;
    108c:	18d2      	adds	r2, r2, r3
    108e:	3104      	adds	r1, #4
            rotate_register[7] = rotate_register[6];
    1090:	9b01      	ldr	r3, [sp, #4]
            rotate_register[3] = rotate_register[2];
    1092:	4665      	mov	r5, ip
    1094:	9503      	str	r5, [sp, #12]
        for (i = 0; i < SHA256_BLOCK_SIZE; i++)
    1096:	2580      	movs	r5, #128	; 0x80
    1098:	006d      	lsls	r5, r5, #1
    109a:	42a9      	cmp	r1, r5
    109c:	d1bf      	bne.n	101e <sw_sha256_process+0x2a>
    109e:	003d      	movs	r5, r7
    10a0:	4667      	mov	r7, ip
    10a2:	9b08      	ldr	r3, [sp, #32]
    10a4:	469c      	mov	ip, r3
    10a6:	4659      	mov	r1, fp
    10a8:	920c      	str	r2, [sp, #48]	; 0x30
    10aa:	940d      	str	r4, [sp, #52]	; 0x34
    10ac:	950e      	str	r5, [sp, #56]	; 0x38
    10ae:	9110      	str	r1, [sp, #64]	; 0x40
    10b0:	9011      	str	r0, [sp, #68]	; 0x44
    10b2:	9b02      	ldr	r3, [sp, #8]
    10b4:	9312      	str	r3, [sp, #72]	; 0x48
    10b6:	9b01      	ldr	r3, [sp, #4]
    10b8:	9313      	str	r3, [sp, #76]	; 0x4c
    10ba:	970f      	str	r7, [sp, #60]	; 0x3c
    10bc:	4663      	mov	r3, ip
    10be:	9905      	ldr	r1, [sp, #20]
    10c0:	9807      	ldr	r0, [sp, #28]
        }

        // Add the hash of this block to current result.
        for (i = 0; i < 8; i++)
        {
            ctx->hash[i] += rotate_register[i];
    10c2:	c904      	ldmia	r1!, {r2}
    10c4:	681c      	ldr	r4, [r3, #0]
    10c6:	46a4      	mov	ip, r4
    10c8:	4462      	add	r2, ip
    10ca:	c304      	stmia	r3!, {r2}
        for (i = 0; i < 8; i++)
    10cc:	4283      	cmp	r3, r0
    10ce:	d1f8      	bne.n	10c2 <sw_sha256_process+0xce>
    10d0:	9b06      	ldr	r3, [sp, #24]
    for (block = 0; block < block_count; block++)
    10d2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    10d4:	429a      	cmp	r2, r3
    10d6:	d059      	beq.n	118c <sw_sha256_process+0x198>
    10d8:	a814      	add	r0, sp, #80	; 0x50
    10da:	2240      	movs	r2, #64	; 0x40
    10dc:	4694      	mov	ip, r2
    10de:	449c      	add	ip, r3
    10e0:	4662      	mov	r2, ip
    10e2:	4664      	mov	r4, ip
    10e4:	9206      	str	r2, [sp, #24]
{
    10e6:	0002      	movs	r2, r0
            w_union.w_byte[i + 3] = cur_msg_block[i + 0];
    10e8:	7819      	ldrb	r1, [r3, #0]
    10ea:	70d1      	strb	r1, [r2, #3]
            w_union.w_byte[i + 2] = cur_msg_block[i + 1];
    10ec:	7859      	ldrb	r1, [r3, #1]
    10ee:	7091      	strb	r1, [r2, #2]
            w_union.w_byte[i + 1] = cur_msg_block[i + 2];
    10f0:	7899      	ldrb	r1, [r3, #2]
    10f2:	7051      	strb	r1, [r2, #1]
            w_union.w_byte[i + 0] = cur_msg_block[i + 3];
    10f4:	78d9      	ldrb	r1, [r3, #3]
    10f6:	7011      	strb	r1, [r2, #0]
    10f8:	3304      	adds	r3, #4
    10fa:	3204      	adds	r2, #4
        for (i = 0; i < SHA256_BLOCK_SIZE; i += 4)
    10fc:	42a3      	cmp	r3, r4
    10fe:	d1f3      	bne.n	10e8 <sw_sha256_process+0xf4>
            word_value = w_union.w_word[w_index - 15];
    1100:	6842      	ldr	r2, [r0, #4]
            word_value = w_union.w_word[w_index - 2];
    1102:	6b81      	ldr	r1, [r0, #56]	; 0x38
            s0 = rotate_right(word_value, 7) ^ rotate_right(word_value, 18) ^ (word_value >> 3);
    1104:	0013      	movs	r3, r2
    1106:	2407      	movs	r4, #7
    1108:	41e3      	rors	r3, r4
    110a:	0014      	movs	r4, r2
    110c:	2512      	movs	r5, #18
    110e:	41ec      	rors	r4, r5
    1110:	4063      	eors	r3, r4
    1112:	08d2      	lsrs	r2, r2, #3
    1114:	4053      	eors	r3, r2
            w_union.w_word[w_index] = w_union.w_word[w_index - 16] + s0 + w_union.w_word[w_index - 7] + s1;
    1116:	6802      	ldr	r2, [r0, #0]
    1118:	6a44      	ldr	r4, [r0, #36]	; 0x24
    111a:	46a4      	mov	ip, r4
    111c:	4462      	add	r2, ip
    111e:	189b      	adds	r3, r3, r2
            s1 = rotate_right(word_value, 17) ^ rotate_right(word_value, 19) ^ (word_value >> 10);
    1120:	000a      	movs	r2, r1
    1122:	2411      	movs	r4, #17
    1124:	41e2      	rors	r2, r4
    1126:	000c      	movs	r4, r1
    1128:	3501      	adds	r5, #1
    112a:	41ec      	rors	r4, r5
    112c:	4062      	eors	r2, r4
    112e:	0a89      	lsrs	r1, r1, #10
    1130:	404a      	eors	r2, r1
            w_union.w_word[w_index] = w_union.w_word[w_index - 16] + s0 + w_union.w_word[w_index - 7] + s1;
    1132:	189b      	adds	r3, r3, r2
    1134:	6403      	str	r3, [r0, #64]	; 0x40
    1136:	3004      	adds	r0, #4
        while (w_index < SHA256_BLOCK_SIZE)
    1138:	ab44      	add	r3, sp, #272	; 0x110
    113a:	4298      	cmp	r0, r3
    113c:	d1e0      	bne.n	1100 <sw_sha256_process+0x10c>
    113e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    1140:	2288      	movs	r2, #136	; 0x88
    1142:	4690      	mov	r8, r2
    1144:	4443      	add	r3, r8
    1146:	469c      	mov	ip, r3
    1148:	ab0c      	add	r3, sp, #48	; 0x30
    114a:	9305      	str	r3, [sp, #20]
    114c:	4662      	mov	r2, ip
    114e:	9809      	ldr	r0, [sp, #36]	; 0x24
            rotate_register[i] = ctx->hash[i];
    1150:	ca02      	ldmia	r2!, {r1}
    1152:	c302      	stmia	r3!, {r1}
        for (i = 0; i < 8; i++)
    1154:	4282      	cmp	r2, r0
    1156:	d1fb      	bne.n	1150 <sw_sha256_process+0x15c>
    1158:	9207      	str	r2, [sp, #28]
    115a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    115c:	9b12      	ldr	r3, [sp, #72]	; 0x48
    115e:	9301      	str	r3, [sp, #4]
    1160:	9b11      	ldr	r3, [sp, #68]	; 0x44
    1162:	9302      	str	r3, [sp, #8]
    1164:	9810      	ldr	r0, [sp, #64]	; 0x40
    1166:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    1168:	4698      	mov	r8, r3
    116a:	9f0e      	ldr	r7, [sp, #56]	; 0x38
    116c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    116e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    1170:	2500      	movs	r5, #0
            t1 = rotate_register[7] + s1 + ch + k[i] + w_union.w_word[i];
    1172:	a914      	add	r1, sp, #80	; 0x50
    1174:	9104      	str	r1, [sp, #16]
                 ^ rotate_right(rotate_register[0], 22);
    1176:	2116      	movs	r1, #22
    1178:	468a      	mov	sl, r1
    117a:	4661      	mov	r1, ip
    117c:	9108      	str	r1, [sp, #32]
    117e:	46bc      	mov	ip, r7
    1180:	001f      	movs	r7, r3
    1182:	0013      	movs	r3, r2
    1184:	0029      	movs	r1, r5
    1186:	4642      	mov	r2, r8
    1188:	9203      	str	r2, [sp, #12]
    118a:	e74f      	b.n	102c <sw_sha256_process+0x38>
        }
    }
}
    118c:	b055      	add	sp, #340	; 0x154
    118e:	bc3c      	pop	{r2, r3, r4, r5}
    1190:	4690      	mov	r8, r2
    1192:	4699      	mov	r9, r3
    1194:	46a2      	mov	sl, r4
    1196:	46ab      	mov	fp, r5
    1198:	bdf0      	pop	{r4, r5, r6, r7, pc}
    119a:	46c0      	nop			; (mov r8, r8)
    119c:	0001ea0c 	.word	0x0001ea0c

000011a0 <sw_sha256_init>:
 *
 * \param[in] ctx          SHA256 hash context
 */

void sw_sha256_init(sw_sha256_ctx* ctx)
{
    11a0:	b510      	push	{r4, lr}
    11a2:	0004      	movs	r4, r0
        0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a,
        0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19
    };
    int i;

    memset(ctx, 0, sizeof(*ctx));
    11a4:	22a8      	movs	r2, #168	; 0xa8
    11a6:	2100      	movs	r1, #0
    11a8:	4b0d      	ldr	r3, [pc, #52]	; (11e0 <sw_sha256_init+0x40>)
    11aa:	4798      	blx	r3
    for (i = 0; i < 8; i++)
    {
        ctx->hash[i] = hash_init[i];
    11ac:	4a0d      	ldr	r2, [pc, #52]	; (11e4 <sw_sha256_init+0x44>)
    11ae:	2388      	movs	r3, #136	; 0x88
    11b0:	50e2      	str	r2, [r4, r3]
    11b2:	4a0d      	ldr	r2, [pc, #52]	; (11e8 <sw_sha256_init+0x48>)
    11b4:	3304      	adds	r3, #4
    11b6:	50e2      	str	r2, [r4, r3]
    11b8:	4a0c      	ldr	r2, [pc, #48]	; (11ec <sw_sha256_init+0x4c>)
    11ba:	3304      	adds	r3, #4
    11bc:	50e2      	str	r2, [r4, r3]
    11be:	4a0c      	ldr	r2, [pc, #48]	; (11f0 <sw_sha256_init+0x50>)
    11c0:	3304      	adds	r3, #4
    11c2:	50e2      	str	r2, [r4, r3]
    11c4:	4a0b      	ldr	r2, [pc, #44]	; (11f4 <sw_sha256_init+0x54>)
    11c6:	3304      	adds	r3, #4
    11c8:	50e2      	str	r2, [r4, r3]
    11ca:	4a0b      	ldr	r2, [pc, #44]	; (11f8 <sw_sha256_init+0x58>)
    11cc:	3304      	adds	r3, #4
    11ce:	50e2      	str	r2, [r4, r3]
    11d0:	4a0a      	ldr	r2, [pc, #40]	; (11fc <sw_sha256_init+0x5c>)
    11d2:	3304      	adds	r3, #4
    11d4:	50e2      	str	r2, [r4, r3]
    11d6:	4a0a      	ldr	r2, [pc, #40]	; (1200 <sw_sha256_init+0x60>)
    11d8:	3304      	adds	r3, #4
    11da:	50e2      	str	r2, [r4, r3]
    }
}
    11dc:	bd10      	pop	{r4, pc}
    11de:	46c0      	nop			; (mov r8, r8)
    11e0:	00019e35 	.word	0x00019e35
    11e4:	6a09e667 	.word	0x6a09e667
    11e8:	bb67ae85 	.word	0xbb67ae85
    11ec:	3c6ef372 	.word	0x3c6ef372
    11f0:	a54ff53a 	.word	0xa54ff53a
    11f4:	510e527f 	.word	0x510e527f
    11f8:	9b05688c 	.word	0x9b05688c
    11fc:	1f83d9ab 	.word	0x1f83d9ab
    1200:	5be0cd19 	.word	0x5be0cd19

00001204 <sw_sha256_update>:
 * \param[in] ctx          SHA256 hash context
 * \param[in] msg          Raw blocks to be processed
 * \param[in] msg_size     The size of the message passed
 */
void sw_sha256_update(sw_sha256_ctx* ctx, const uint8_t* msg, uint32_t msg_size)
{
    1204:	b5f0      	push	{r4, r5, r6, r7, lr}
    1206:	46d6      	mov	lr, sl
    1208:	464f      	mov	r7, r9
    120a:	b580      	push	{r7, lr}
    120c:	b083      	sub	sp, #12
    120e:	0006      	movs	r6, r0
    1210:	000d      	movs	r5, r1
    1212:	0014      	movs	r4, r2
    uint32_t block_count;
    uint32_t rem_size = SHA256_BLOCK_SIZE - ctx->block_size;
    1214:	6840      	ldr	r0, [r0, #4]
    1216:	2740      	movs	r7, #64	; 0x40
    1218:	1a3f      	subs	r7, r7, r0
    uint32_t copy_size = msg_size > rem_size ? rem_size : msg_size;
    121a:	4297      	cmp	r7, r2
    121c:	d900      	bls.n	1220 <sw_sha256_update+0x1c>
    121e:	0017      	movs	r7, r2

    // Copy data into current block
    memcpy(&ctx->block[ctx->block_size], msg, copy_size);
    1220:	3008      	adds	r0, #8
    1222:	1830      	adds	r0, r6, r0
    1224:	003a      	movs	r2, r7
    1226:	0029      	movs	r1, r5
    1228:	4b17      	ldr	r3, [pc, #92]	; (1288 <sw_sha256_update+0x84>)
    122a:	4798      	blx	r3

    if (ctx->block_size + msg_size < SHA256_BLOCK_SIZE)
    122c:	6873      	ldr	r3, [r6, #4]
    122e:	18e3      	adds	r3, r4, r3
    1230:	2b3f      	cmp	r3, #63	; 0x3f
    1232:	d805      	bhi.n	1240 <sw_sha256_update+0x3c>
    {
        // Not enough data to finish off the current block
        ctx->block_size += msg_size;
    1234:	6073      	str	r3, [r6, #4]

    // Save any remaining data
    ctx->total_msg_size += (block_count + 1) * SHA256_BLOCK_SIZE;
    ctx->block_size = msg_size % SHA256_BLOCK_SIZE;
    memcpy(ctx->block, &msg[copy_size + block_count * SHA256_BLOCK_SIZE], ctx->block_size);
}
    1236:	b003      	add	sp, #12
    1238:	bc0c      	pop	{r2, r3}
    123a:	4691      	mov	r9, r2
    123c:	469a      	mov	sl, r3
    123e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    sw_sha256_process(ctx, ctx->block, 1);
    1240:	2308      	movs	r3, #8
    1242:	469c      	mov	ip, r3
    1244:	44b4      	add	ip, r6
    1246:	4663      	mov	r3, ip
    1248:	2201      	movs	r2, #1
    124a:	9301      	str	r3, [sp, #4]
    124c:	4661      	mov	r1, ip
    124e:	0030      	movs	r0, r6
    1250:	4b0e      	ldr	r3, [pc, #56]	; (128c <sw_sha256_update+0x88>)
    1252:	469a      	mov	sl, r3
    1254:	4798      	blx	r3
    msg_size -= copy_size; // Adjust to the remaining message bytes
    1256:	1be4      	subs	r4, r4, r7
    block_count = msg_size / SHA256_BLOCK_SIZE;
    1258:	09a2      	lsrs	r2, r4, #6
    125a:	4691      	mov	r9, r2
    sw_sha256_process(ctx, &msg[copy_size], block_count);
    125c:	19e9      	adds	r1, r5, r7
    125e:	0030      	movs	r0, r6
    1260:	47d0      	blx	sl
    ctx->total_msg_size += (block_count + 1) * SHA256_BLOCK_SIZE;
    1262:	464a      	mov	r2, r9
    1264:	1c53      	adds	r3, r2, #1
    1266:	019b      	lsls	r3, r3, #6
    1268:	6832      	ldr	r2, [r6, #0]
    126a:	4694      	mov	ip, r2
    126c:	4463      	add	r3, ip
    126e:	6033      	str	r3, [r6, #0]
    ctx->block_size = msg_size % SHA256_BLOCK_SIZE;
    1270:	233f      	movs	r3, #63	; 0x3f
    1272:	001a      	movs	r2, r3
    1274:	4022      	ands	r2, r4
    1276:	6072      	str	r2, [r6, #4]
    memcpy(ctx->block, &msg[copy_size + block_count * SHA256_BLOCK_SIZE], ctx->block_size);
    1278:	0021      	movs	r1, r4
    127a:	4399      	bics	r1, r3
    127c:	19c9      	adds	r1, r1, r7
    127e:	1869      	adds	r1, r5, r1
    1280:	9801      	ldr	r0, [sp, #4]
    1282:	4b01      	ldr	r3, [pc, #4]	; (1288 <sw_sha256_update+0x84>)
    1284:	4798      	blx	r3
    1286:	e7d6      	b.n	1236 <sw_sha256_update+0x32>
    1288:	00019d11 	.word	0x00019d11
    128c:	00000ff5 	.word	0x00000ff5

00001290 <sw_sha256_final>:
/** \brief completes the final SHA256 calculation and returns the final digest/hash
 * \param[in]  ctx     ptr to context data structure
 * \param[out] digest  receives the computed digest of the SHA 256
 */
void sw_sha256_final(sw_sha256_ctx* ctx, uint8_t digest[SHA256_DIGEST_SIZE])
{
    1290:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1292:	0005      	movs	r5, r0
    1294:	000c      	movs	r4, r1
    int i, j;
    uint32_t msg_size_bits;
    uint32_t pad_zero_count;

    // Calculate the total message size in bits
    ctx->total_msg_size += ctx->block_size;
    1296:	6840      	ldr	r0, [r0, #4]
    1298:	682b      	ldr	r3, [r5, #0]
    129a:	18c7      	adds	r7, r0, r3
    129c:	602f      	str	r7, [r5, #0]
    msg_size_bits = ctx->total_msg_size * 8;
    129e:	00ff      	lsls	r7, r7, #3

    // Calculate the number of padding zero bytes required between the 1 bit byte and the 64 bit message size in bits.
    pad_zero_count = (SHA256_BLOCK_SIZE - ((ctx->block_size + 9) % SHA256_BLOCK_SIZE)) % SHA256_BLOCK_SIZE;
    12a0:	2309      	movs	r3, #9
    12a2:	425b      	negs	r3, r3
    12a4:	1a1b      	subs	r3, r3, r0
    12a6:	263f      	movs	r6, #63	; 0x3f
    12a8:	401e      	ands	r6, r3

    // Append a single 1 bit
    ctx->block[ctx->block_size++] = 0x80;
    12aa:	1c43      	adds	r3, r0, #1
    12ac:	606b      	str	r3, [r5, #4]
    12ae:	182b      	adds	r3, r5, r0
    12b0:	2280      	movs	r2, #128	; 0x80
    12b2:	721a      	strb	r2, [r3, #8]

    // Add padding zeros plus upper 4 bytes of total msg size in bits (only supporting 32bit message bit counts)
    memset(&ctx->block[ctx->block_size], 0, pad_zero_count + 4);
    12b4:	1d32      	adds	r2, r6, #4
    12b6:	3009      	adds	r0, #9
    12b8:	1828      	adds	r0, r5, r0
    12ba:	2100      	movs	r1, #0
    12bc:	4b13      	ldr	r3, [pc, #76]	; (130c <sw_sha256_final+0x7c>)
    12be:	4798      	blx	r3
    ctx->block_size += pad_zero_count + 4;
    12c0:	686b      	ldr	r3, [r5, #4]
    12c2:	469c      	mov	ip, r3
    12c4:	4466      	add	r6, ip

    // Add the total message size in bits to the end of the current block. Technically this is
    // supposed to be 8 bytes. This shortcut will reduce the max message size to 536,870,911 bytes.
    ctx->block[ctx->block_size++] = (uint8_t)(msg_size_bits >> 24);
    12c6:	19ab      	adds	r3, r5, r6
    12c8:	0e3a      	lsrs	r2, r7, #24
    12ca:	731a      	strb	r2, [r3, #12]
    ctx->block[ctx->block_size++] = (uint8_t)(msg_size_bits >> 16);
    12cc:	0c3a      	lsrs	r2, r7, #16
    12ce:	735a      	strb	r2, [r3, #13]
    ctx->block[ctx->block_size++] = (uint8_t)(msg_size_bits >> 8);
    12d0:	0a3a      	lsrs	r2, r7, #8
    12d2:	739a      	strb	r2, [r3, #14]
    ctx->block[ctx->block_size++] = (uint8_t)(msg_size_bits >> 0);
    12d4:	0032      	movs	r2, r6
    12d6:	3208      	adds	r2, #8
    12d8:	606a      	str	r2, [r5, #4]
    12da:	73df      	strb	r7, [r3, #15]

    sw_sha256_process(ctx, ctx->block, ctx->block_size / SHA256_BLOCK_SIZE);
    12dc:	0992      	lsrs	r2, r2, #6
    12de:	0029      	movs	r1, r5
    12e0:	3108      	adds	r1, #8
    12e2:	0028      	movs	r0, r5
    12e4:	4b0a      	ldr	r3, [pc, #40]	; (1310 <sw_sha256_final+0x80>)
    12e6:	4798      	blx	r3
    12e8:	0028      	movs	r0, r5
    12ea:	3088      	adds	r0, #136	; 0x88
    12ec:	35a8      	adds	r5, #168	; 0xa8
    12ee:	e003      	b.n	12f8 <sw_sha256_final+0x68>
    12f0:	3004      	adds	r0, #4
    12f2:	3404      	adds	r4, #4

    // All blocks have been processed.
    // Concatenate the hashes to produce digest, MSB of every hash first.
    for (i = 0; i < 8; i++)
    12f4:	42a8      	cmp	r0, r5
    12f6:	d008      	beq.n	130a <sw_sha256_final+0x7a>
{
    12f8:	2303      	movs	r3, #3
    {
        for (j = sizeof(int32_t) - 1; j >= 0; j--, ctx->hash[i] >>= 8)
        {
            digest[i * sizeof(int32_t) + j] = ctx->hash[i] & 0xFF;
    12fa:	7802      	ldrb	r2, [r0, #0]
    12fc:	54e2      	strb	r2, [r4, r3]
        for (j = sizeof(int32_t) - 1; j >= 0; j--, ctx->hash[i] >>= 8)
    12fe:	6802      	ldr	r2, [r0, #0]
    1300:	0a12      	lsrs	r2, r2, #8
    1302:	6002      	str	r2, [r0, #0]
    1304:	3b01      	subs	r3, #1
    1306:	d2f8      	bcs.n	12fa <sw_sha256_final+0x6a>
    1308:	e7f2      	b.n	12f0 <sw_sha256_final+0x60>
        }
    }
}
    130a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    130c:	00019e35 	.word	0x00019e35
    1310:	00000ff5 	.word	0x00000ff5

00001314 <hal_iface_init>:
    // The key here is to provide the flexibility to include just the types of interfaces you want/need without breaking the
    // object model.  The former is needed so in an embedded, constrained memory environment, you don't have to pay the price
    // (in terms of memory) for interfaces you don't use in your application.
    ATCA_STATUS status = ATCA_COMM_FAIL;

    switch (cfg->iface_type)
    1314:	7803      	ldrb	r3, [r0, #0]
    ATCA_STATUS status = ATCA_COMM_FAIL;
    1316:	20f0      	movs	r0, #240	; 0xf0
    switch (cfg->iface_type)
    1318:	2b00      	cmp	r3, #0
    131a:	d000      	beq.n	131e <hal_iface_init+0xa>
        break;
    default:
        break;
    }
    return status;
}
    131c:	4770      	bx	lr
        hal->halinit = &hal_i2c_init;
    131e:	4b0a      	ldr	r3, [pc, #40]	; (1348 <hal_iface_init+0x34>)
    1320:	600b      	str	r3, [r1, #0]
        hal->halpostinit = &hal_i2c_post_init;
    1322:	4b0a      	ldr	r3, [pc, #40]	; (134c <hal_iface_init+0x38>)
    1324:	604b      	str	r3, [r1, #4]
        hal->halreceive = &hal_i2c_receive;
    1326:	4b0a      	ldr	r3, [pc, #40]	; (1350 <hal_iface_init+0x3c>)
    1328:	60cb      	str	r3, [r1, #12]
        hal->halsend = &hal_i2c_send;
    132a:	4b0a      	ldr	r3, [pc, #40]	; (1354 <hal_iface_init+0x40>)
    132c:	608b      	str	r3, [r1, #8]
        hal->halsleep = &hal_i2c_sleep;
    132e:	4b0a      	ldr	r3, [pc, #40]	; (1358 <hal_iface_init+0x44>)
    1330:	618b      	str	r3, [r1, #24]
        hal->halwake = &hal_i2c_wake;
    1332:	4b0a      	ldr	r3, [pc, #40]	; (135c <hal_iface_init+0x48>)
    1334:	610b      	str	r3, [r1, #16]
        hal->halidle = &hal_i2c_idle;
    1336:	4b0a      	ldr	r3, [pc, #40]	; (1360 <hal_iface_init+0x4c>)
    1338:	614b      	str	r3, [r1, #20]
        hal->halrelease = &hal_i2c_release;
    133a:	4b0a      	ldr	r3, [pc, #40]	; (1364 <hal_iface_init+0x50>)
    133c:	61cb      	str	r3, [r1, #28]
        hal->hal_data = NULL;
    133e:	2300      	movs	r3, #0
    1340:	620b      	str	r3, [r1, #32]
        status = ATCA_SUCCESS;
    1342:	2000      	movs	r0, #0
        break;
    1344:	e7ea      	b.n	131c <hal_iface_init+0x8>
    1346:	46c0      	nop			; (mov r8, r8)
    1348:	000013d9 	.word	0x000013d9
    134c:	00001585 	.word	0x00001585
    1350:	000015dd 	.word	0x000015dd
    1354:	00001589 	.word	0x00001589
    1358:	000018d1 	.word	0x000018d1
    135c:	00001799 	.word	0x00001799
    1360:	0000187d 	.word	0x0000187d
    1364:	00001925 	.word	0x00001925

00001368 <hal_iface_release>:
 * \param[in] hal_data - pointer to opaque hal data maintained by HAL implementation for this interface type
 *  \return ATCA_SUCCESS on success, otherwise an error code.
 */

ATCA_STATUS hal_iface_release(ATCAIfaceType iface_type, void *hal_data)
{
    1368:	b510      	push	{r4, lr}
    ATCA_STATUS status = ATCA_GEN_FAIL;

    switch (iface_type)
    136a:	2800      	cmp	r0, #0
    136c:	d001      	beq.n	1372 <hal_iface_release+0xa>
    ATCA_STATUS status = ATCA_GEN_FAIL;
    136e:	20e1      	movs	r0, #225	; 0xe1
    default:
        break;
    }

    return status;
}
    1370:	bd10      	pop	{r4, pc}
        status = hal_i2c_release(hal_data);
    1372:	0008      	movs	r0, r1
    1374:	4b01      	ldr	r3, [pc, #4]	; (137c <hal_iface_release+0x14>)
    1376:	4798      	blx	r3
        break;
    1378:	e7fa      	b.n	1370 <hal_iface_release+0x8>
    137a:	46c0      	nop			; (mov r8, r8)
    137c:	00001925 	.word	0x00001925

00001380 <hal_check_wake>:
 * \param[in] response_size  Size of the response to check.
 * \return ATCA_SUCCESS for expected wake, ATCA_STATUS_SELFTEST_ERROR if the
 *         power on self test failed, ATCA_WAKE_FAILED for other failures.
 */
ATCA_STATUS hal_check_wake(const uint8_t* response, int response_size)
{
    1380:	b510      	push	{r4, lr}
    1382:	b082      	sub	sp, #8
    1384:	0004      	movs	r4, r0
    const uint8_t expected_response[4] = { 0x04, 0x11, 0x33, 0x43 };
    1386:	4b0f      	ldr	r3, [pc, #60]	; (13c4 <hal_check_wake+0x44>)
    1388:	681a      	ldr	r2, [r3, #0]
    138a:	9201      	str	r2, [sp, #4]
    uint8_t selftest_fail_resp[4] = { 0x04, 0x07, 0xC4, 0x40 };
    138c:	685b      	ldr	r3, [r3, #4]
    138e:	9300      	str	r3, [sp, #0]

    if (response_size != 4)
    {
        return ATCA_WAKE_FAILED;
    1390:	20d0      	movs	r0, #208	; 0xd0
    if (response_size != 4)
    1392:	2904      	cmp	r1, #4
    1394:	d001      	beq.n	139a <hal_check_wake+0x1a>
    if (memcmp(response, selftest_fail_resp, 4) == 0)
    {
        return ATCA_STATUS_SELFTEST_ERROR;
    }
    return ATCA_WAKE_FAILED;
    1396:	b002      	add	sp, #8
    1398:	bd10      	pop	{r4, pc}
    if (memcmp(response, expected_response, 4) == 0)
    139a:	2204      	movs	r2, #4
    139c:	a901      	add	r1, sp, #4
    139e:	0020      	movs	r0, r4
    13a0:	4b09      	ldr	r3, [pc, #36]	; (13c8 <hal_check_wake+0x48>)
    13a2:	4798      	blx	r3
    13a4:	0003      	movs	r3, r0
        return ATCA_SUCCESS;
    13a6:	2000      	movs	r0, #0
    if (memcmp(response, expected_response, 4) == 0)
    13a8:	2b00      	cmp	r3, #0
    13aa:	d0f4      	beq.n	1396 <hal_check_wake+0x16>
    if (memcmp(response, selftest_fail_resp, 4) == 0)
    13ac:	2204      	movs	r2, #4
    13ae:	4669      	mov	r1, sp
    13b0:	0020      	movs	r0, r4
    13b2:	4b05      	ldr	r3, [pc, #20]	; (13c8 <hal_check_wake+0x48>)
    13b4:	4798      	blx	r3
    13b6:	0003      	movs	r3, r0
        return ATCA_STATUS_SELFTEST_ERROR;
    13b8:	20d7      	movs	r0, #215	; 0xd7
    if (memcmp(response, selftest_fail_resp, 4) == 0)
    13ba:	2b00      	cmp	r3, #0
    13bc:	d0eb      	beq.n	1396 <hal_check_wake+0x16>
    return ATCA_WAKE_FAILED;
    13be:	3807      	subs	r0, #7
    13c0:	e7e9      	b.n	1396 <hal_check_wake+0x16>
    13c2:	46c0      	nop			; (mov r8, r8)
    13c4:	0001eb0c 	.word	0x0001eb0c
    13c8:	00019cc5 	.word	0x00019cc5

000013cc <_i2c_master_wait_for_sync>:
{
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
    13cc:	6801      	ldr	r1, [r0, #0]

#if defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_1)
	return (i2c_hw->STATUS.reg & SERCOM_I2CM_STATUS_SYNCBUSY);
#elif defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_2)
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
    13ce:	2207      	movs	r2, #7
    13d0:	69cb      	ldr	r3, [r1, #28]
		const struct i2c_master_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (i2c_master_is_syncing(module)) {
    13d2:	421a      	tst	r2, r3
    13d4:	d1fc      	bne.n	13d0 <_i2c_master_wait_for_sync+0x4>
		/* Wait for I2C module to sync. */
	}
}
    13d6:	4770      	bx	lr

000013d8 <hal_i2c_init>:
 * \param[in] hal - opaque ptr to HAL data
 * \param[in] cfg - interface configuration
 * \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS hal_i2c_init(void *hal, ATCAIfaceCfg *cfg)
{
    13d8:	b5f0      	push	{r4, r5, r6, r7, lr}
    13da:	46de      	mov	lr, fp
    13dc:	464f      	mov	r7, r9
    13de:	4646      	mov	r6, r8
    13e0:	b5c0      	push	{r6, r7, lr}
    13e2:	b082      	sub	sp, #8
    13e4:	4681      	mov	r9, r0
    13e6:	000d      	movs	r5, r1
    if (cfg->atcai2c.bus >= MAX_I2C_BUSES)
    13e8:	794c      	ldrb	r4, [r1, #5]
    {
        return ATCA_COMM_FAIL;
    13ea:	20f0      	movs	r0, #240	; 0xf0
    if (cfg->atcai2c.bus >= MAX_I2C_BUSES)
    13ec:	2c05      	cmp	r4, #5
    13ee:	d905      	bls.n	13fc <hal_i2c_init+0x24>
    }

    ((ATCAHAL_t*)hal)->hal_data = data;

    return ATCA_SUCCESS;
}
    13f0:	b002      	add	sp, #8
    13f2:	bc1c      	pop	{r2, r3, r4}
    13f4:	4690      	mov	r8, r2
    13f6:	4699      	mov	r9, r3
    13f8:	46a3      	mov	fp, r4
    13fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ATCAI2CMaster_t* data = &i2c_hal_data[cfg->atcai2c.bus];
    13fc:	9400      	str	r4, [sp, #0]
    13fe:	2734      	movs	r7, #52	; 0x34
    1400:	4367      	muls	r7, r4
    1402:	4b50      	ldr	r3, [pc, #320]	; (1544 <hal_i2c_init+0x16c>)
    1404:	4698      	mov	r8, r3
    1406:	44b8      	add	r8, r7
    if (data->ref_ct <= 0)
    1408:	4643      	mov	r3, r8
    140a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    140c:	2b00      	cmp	r3, #0
    140e:	dd0a      	ble.n	1426 <hal_i2c_init+0x4e>
        data->ref_ct++;
    1410:	2234      	movs	r2, #52	; 0x34
    1412:	4362      	muls	r2, r4
    1414:	4c4b      	ldr	r4, [pc, #300]	; (1544 <hal_i2c_init+0x16c>)
    1416:	18a4      	adds	r4, r4, r2
    1418:	3301      	adds	r3, #1
    141a:	62e3      	str	r3, [r4, #44]	; 0x2c
    ((ATCAHAL_t*)hal)->hal_data = data;
    141c:	464b      	mov	r3, r9
    141e:	4642      	mov	r2, r8
    1420:	621a      	str	r2, [r3, #32]
    return ATCA_SUCCESS;
    1422:	2000      	movs	r0, #0
    1424:	e7e4      	b.n	13f0 <hal_i2c_init+0x18>
{
	/*Sanity check argument */
	Assert(config);
	config->baud_rate        = I2C_MASTER_BAUD_RATE_100KHZ;
#ifdef FEATURE_I2C_FAST_MODE_PLUS_AND_HIGH_SPEED
	config->baud_rate_high_speed = I2C_MASTER_BAUD_RATE_3400KHZ;
    1426:	4e48      	ldr	r6, [pc, #288]	; (1548 <hal_i2c_init+0x170>)
    1428:	4b48      	ldr	r3, [pc, #288]	; (154c <hal_i2c_init+0x174>)
    142a:	6073      	str	r3, [r6, #4]
	config->transfer_speed       = I2C_MASTER_SPEED_STANDARD_AND_FAST;
    142c:	2300      	movs	r3, #0
    142e:	60b3      	str	r3, [r6, #8]
#endif
	config->generator_source = GCLK_GENERATOR_0;
    1430:	7333      	strb	r3, [r6, #12]
	config->run_in_standby   = false;
    1432:	7633      	strb	r3, [r6, #24]
	config->start_hold_time  = I2C_MASTER_START_HOLD_TIME_300NS_600NS;
    1434:	2280      	movs	r2, #128	; 0x80
    1436:	0392      	lsls	r2, r2, #14
    1438:	6132      	str	r2, [r6, #16]
	config->buffer_timeout   = 65535;
    143a:	2201      	movs	r2, #1
    143c:	4252      	negs	r2, r2
    143e:	82f2      	strh	r2, [r6, #22]
	config->unknown_bus_state_timeout = 65535;
	config->pinmux_pad0      = PINMUX_DEFAULT;
    1440:	61f3      	str	r3, [r6, #28]
	config->pinmux_pad1      = PINMUX_DEFAULT;
    1442:	6233      	str	r3, [r6, #32]
	config->scl_low_timeout  = false;
    1444:	3225      	adds	r2, #37	; 0x25
    1446:	54b3      	strb	r3, [r6, r2]
	config->inactive_timeout = I2C_MASTER_INACTIVE_TIMEOUT_DISABLED;
    1448:	62b3      	str	r3, [r6, #40]	; 0x28
#ifdef FEATURE_I2C_SCL_STRETCH_MODE
	config->scl_stretch_only_after_ack_bit = false;
    144a:	3208      	adds	r2, #8
    144c:	54b3      	strb	r3, [r6, r2]
#endif
#ifdef FEATURE_I2C_SCL_EXTEND_TIMEOUT
	config->slave_scl_low_extend_timeout   = false;
    144e:	3201      	adds	r2, #1
    1450:	54b3      	strb	r3, [r6, r2]
	config->master_scl_low_extend_timeout  = false;
    1452:	3201      	adds	r2, #1
    1454:	54b3      	strb	r3, [r6, r2]
#endif
	/* The typical value is 215ns */
	config->sda_scl_rise_time_ns = 215;
    1456:	33d7      	adds	r3, #215	; 0xd7
    1458:	8633      	strh	r3, [r6, #48]	; 0x30
        config_i2c_master.unknown_bus_state_timeout = 500;
    145a:	331e      	adds	r3, #30
    145c:	33ff      	adds	r3, #255	; 0xff
    145e:	82b3      	strh	r3, [r6, #20]
        config_i2c_master.baud_rate = cfg->atcai2c.baud / 1000;
    1460:	21fa      	movs	r1, #250	; 0xfa
    1462:	0089      	lsls	r1, r1, #2
    1464:	68a8      	ldr	r0, [r5, #8]
    1466:	4b3a      	ldr	r3, [pc, #232]	; (1550 <hal_i2c_init+0x178>)
    1468:	4798      	blx	r3
    146a:	6030      	str	r0, [r6, #0]
        switch (cfg->atcai2c.bus)
    146c:	796b      	ldrb	r3, [r5, #5]
    146e:	2b05      	cmp	r3, #5
    1470:	d866      	bhi.n	1540 <hal_i2c_init+0x168>
    1472:	009b      	lsls	r3, r3, #2
    1474:	4a37      	ldr	r2, [pc, #220]	; (1554 <hal_i2c_init+0x17c>)
    1476:	58d3      	ldr	r3, [r2, r3]
    1478:	469f      	mov	pc, r3
            data->i2c_sercom = SERCOM0;
    147a:	2334      	movs	r3, #52	; 0x34
    147c:	4363      	muls	r3, r4
    147e:	2184      	movs	r1, #132	; 0x84
    1480:	05c9      	lsls	r1, r1, #23
    1482:	4a30      	ldr	r2, [pc, #192]	; (1544 <hal_i2c_init+0x16c>)
    1484:	5099      	str	r1, [r3, r2]
		config_i2c_master.pinmux_pad0 = ATCAD_HOST_I2C_SERCOM_PINMUX_PAD0;
    1486:	4a30      	ldr	r2, [pc, #192]	; (1548 <hal_i2c_init+0x170>)
    1488:	4b33      	ldr	r3, [pc, #204]	; (1558 <hal_i2c_init+0x180>)
    148a:	61d3      	str	r3, [r2, #28]
		config_i2c_master.pinmux_pad1 = ATCAD_HOST_I2C_SERCOM_PINMUX_PAD1;
    148c:	4b33      	ldr	r3, [pc, #204]	; (155c <hal_i2c_init+0x184>)
    148e:	6213      	str	r3, [r2, #32]
        i2c_master_init(&data->i2c_master_instance, data->i2c_sercom, &config_i2c_master);
    1490:	4e2c      	ldr	r6, [pc, #176]	; (1544 <hal_i2c_init+0x16c>)
    1492:	3704      	adds	r7, #4
    1494:	19f3      	adds	r3, r6, r7
    1496:	2734      	movs	r7, #52	; 0x34
    1498:	4367      	muls	r7, r4
    149a:	59b9      	ldr	r1, [r7, r6]
    149c:	9301      	str	r3, [sp, #4]
    149e:	0018      	movs	r0, r3
    14a0:	4b2f      	ldr	r3, [pc, #188]	; (1560 <hal_i2c_init+0x188>)
    14a2:	4798      	blx	r3
{
	/* Sanity check of arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    14a4:	46b3      	mov	fp, r6
    14a6:	44bb      	add	fp, r7
    14a8:	465a      	mov	r2, fp
    14aa:	6857      	ldr	r7, [r2, #4]

	/* Timeout counter used to force bus state */
	uint32_t timeout_counter = 0;

	/* Wait for module to sync */
	_i2c_master_wait_for_sync(module);
    14ac:	9801      	ldr	r0, [sp, #4]
    14ae:	4b2d      	ldr	r3, [pc, #180]	; (1564 <hal_i2c_init+0x18c>)
    14b0:	4798      	blx	r3

	/* Enable module */
	i2c_module->CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
    14b2:	683b      	ldr	r3, [r7, #0]
    14b4:	2202      	movs	r2, #2
    14b6:	4313      	orrs	r3, r2
    14b8:	603b      	str	r3, [r7, #0]

#if I2C_MASTER_CALLBACK_MODE == true
	/* Enable module interrupts */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    14ba:	465b      	mov	r3, fp
    14bc:	6858      	ldr	r0, [r3, #4]
    14be:	4b2a      	ldr	r3, [pc, #168]	; (1568 <hal_i2c_init+0x190>)
    14c0:	4798      	blx	r3
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    14c2:	231f      	movs	r3, #31
    14c4:	4018      	ands	r0, r3
    14c6:	3b1e      	subs	r3, #30
    14c8:	4083      	lsls	r3, r0
    14ca:	4a28      	ldr	r2, [pc, #160]	; (156c <hal_i2c_init+0x194>)
    14cc:	6013      	str	r3, [r2, #0]
	uint32_t timeout_counter = 0;
    14ce:	2300      	movs	r3, #0
#endif
	/* Start timeout if bus state is unknown */
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
    14d0:	2110      	movs	r1, #16
		timeout_counter++;
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
    14d2:	2234      	movs	r2, #52	; 0x34
    14d4:	9e00      	ldr	r6, [sp, #0]
    14d6:	4356      	muls	r6, r2
    14d8:	4a1a      	ldr	r2, [pc, #104]	; (1544 <hal_i2c_init+0x16c>)
    14da:	4694      	mov	ip, r2
    14dc:	4466      	add	r6, ip
    14de:	360a      	adds	r6, #10
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
    14e0:	8b7a      	ldrh	r2, [r7, #26]
    14e2:	420a      	tst	r2, r1
    14e4:	d105      	bne.n	14f2 <hal_i2c_init+0x11a>
		timeout_counter++;
    14e6:	3301      	adds	r3, #1
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
    14e8:	8832      	ldrh	r2, [r6, #0]
    14ea:	4293      	cmp	r3, r2
    14ec:	d3f8      	bcc.n	14e0 <hal_i2c_init+0x108>
			/* Timeout, force bus state to idle */
			i2c_module->STATUS.reg = SERCOM_I2CM_STATUS_BUSSTATE(1);
    14ee:	2310      	movs	r3, #16
    14f0:	837b      	strh	r3, [r7, #26]
        data->bus_index = cfg->atcai2c.bus;
    14f2:	2334      	movs	r3, #52	; 0x34
    14f4:	4363      	muls	r3, r4
    14f6:	4c13      	ldr	r4, [pc, #76]	; (1544 <hal_i2c_init+0x16c>)
    14f8:	18e4      	adds	r4, r4, r3
    14fa:	796b      	ldrb	r3, [r5, #5]
    14fc:	6323      	str	r3, [r4, #48]	; 0x30
        data->ref_ct = 1;
    14fe:	2301      	movs	r3, #1
    1500:	62e3      	str	r3, [r4, #44]	; 0x2c
    1502:	e78b      	b.n	141c <hal_i2c_init+0x44>
            data->i2c_sercom = SERCOM1;
    1504:	2334      	movs	r3, #52	; 0x34
    1506:	4363      	muls	r3, r4
    1508:	4919      	ldr	r1, [pc, #100]	; (1570 <hal_i2c_init+0x198>)
    150a:	4a0e      	ldr	r2, [pc, #56]	; (1544 <hal_i2c_init+0x16c>)
    150c:	5099      	str	r1, [r3, r2]
            break;
    150e:	e7ba      	b.n	1486 <hal_i2c_init+0xae>
            data->i2c_sercom = SERCOM2;
    1510:	2334      	movs	r3, #52	; 0x34
    1512:	4363      	muls	r3, r4
    1514:	4917      	ldr	r1, [pc, #92]	; (1574 <hal_i2c_init+0x19c>)
    1516:	4a0b      	ldr	r2, [pc, #44]	; (1544 <hal_i2c_init+0x16c>)
    1518:	5099      	str	r1, [r3, r2]
            break;
    151a:	e7b4      	b.n	1486 <hal_i2c_init+0xae>
            data->i2c_sercom = SERCOM3;
    151c:	2334      	movs	r3, #52	; 0x34
    151e:	4363      	muls	r3, r4
    1520:	4915      	ldr	r1, [pc, #84]	; (1578 <hal_i2c_init+0x1a0>)
    1522:	4a08      	ldr	r2, [pc, #32]	; (1544 <hal_i2c_init+0x16c>)
    1524:	5099      	str	r1, [r3, r2]
            break;
    1526:	e7ae      	b.n	1486 <hal_i2c_init+0xae>
            data->i2c_sercom = SERCOM4;
    1528:	2334      	movs	r3, #52	; 0x34
    152a:	4363      	muls	r3, r4
    152c:	4913      	ldr	r1, [pc, #76]	; (157c <hal_i2c_init+0x1a4>)
    152e:	4a05      	ldr	r2, [pc, #20]	; (1544 <hal_i2c_init+0x16c>)
    1530:	5099      	str	r1, [r3, r2]
            break;
    1532:	e7a8      	b.n	1486 <hal_i2c_init+0xae>
            data->i2c_sercom = SERCOM5;
    1534:	2334      	movs	r3, #52	; 0x34
    1536:	4363      	muls	r3, r4
    1538:	4911      	ldr	r1, [pc, #68]	; (1580 <hal_i2c_init+0x1a8>)
    153a:	4a02      	ldr	r2, [pc, #8]	; (1544 <hal_i2c_init+0x16c>)
    153c:	5099      	str	r1, [r3, r2]
            break;
    153e:	e7a2      	b.n	1486 <hal_i2c_init+0xae>
            return ATCA_COMM_FAIL;
    1540:	20f0      	movs	r0, #240	; 0xf0
    1542:	e755      	b.n	13f0 <hal_i2c_init+0x18>
    1544:	20000a1c 	.word	0x20000a1c
    1548:	200009e8 	.word	0x200009e8
    154c:	00000d48 	.word	0x00000d48
    1550:	000165ad 	.word	0x000165ad
    1554:	0001eb14 	.word	0x0001eb14
    1558:	00100002 	.word	0x00100002
    155c:	00110002 	.word	0x00110002
    1560:	000051f9 	.word	0x000051f9
    1564:	000013cd 	.word	0x000013cd
    1568:	00005f29 	.word	0x00005f29
    156c:	e000e100 	.word	0xe000e100
    1570:	42000400 	.word	0x42000400
    1574:	42000800 	.word	0x42000800
    1578:	42000c00 	.word	0x42000c00
    157c:	42001000 	.word	0x42001000
    1580:	43000400 	.word	0x43000400

00001584 <hal_i2c_post_init>:
 * \return ATCA_SUCCESS
 */
ATCA_STATUS hal_i2c_post_init(ATCAIface iface)
{
    return ATCA_SUCCESS;
}
    1584:	2000      	movs	r0, #0
    1586:	4770      	bx	lr

00001588 <hal_i2c_send>:
 * \param[in] txlength  number of bytes to send
 * \return ATCA_SUCCESS on success, otherwise an error code.
 */

ATCA_STATUS hal_i2c_send(ATCAIface iface, uint8_t *txdata, int txlength)
{
    1588:	b530      	push	{r4, r5, lr}
    158a:	b085      	sub	sp, #20
    158c:	000d      	movs	r5, r1
    158e:	0014      	movs	r4, r2
    ATCAIfaceCfg *cfg = atgetifacecfg(iface);
    1590:	4b0f      	ldr	r3, [pc, #60]	; (15d0 <hal_i2c_send+0x48>)
    1592:	4798      	blx	r3

    struct i2c_master_packet packet = {
    1594:	a901      	add	r1, sp, #4
    1596:	7903      	ldrb	r3, [r0, #4]
    1598:	085b      	lsrs	r3, r3, #1
    159a:	800b      	strh	r3, [r1, #0]
    159c:	604d      	str	r5, [r1, #4]
    159e:	2300      	movs	r3, #0
    15a0:	720b      	strb	r3, [r1, #8]
    15a2:	724b      	strb	r3, [r1, #9]
    15a4:	728b      	strb	r3, [r1, #10]

    // for this implementation of I2C with CryptoAuth chips, txdata is assumed to have ATCAPacket format
    // other device types that don't require i/o tokens on the front end of a command need a different hal_i2c_send and wire it up instead of this one
    // this covers devices such as ATSHA204A and ATECCx08A that require a word address value pre-pended to the packet
    // txdata[0] is using _reserved byte of the ATCAPacket
    txdata[0] = 0x03;   // insert the Word Address Value, Command token
    15a6:	3303      	adds	r3, #3
    15a8:	702b      	strb	r3, [r5, #0]
    txlength++;         // account for word address value byte.
    15aa:	3401      	adds	r4, #1
    packet.data_length = txlength;
    15ac:	804c      	strh	r4, [r1, #2]

    if (i2c_master_write_packet_wait(&i2c_hal_data[cfg->atcai2c.bus].i2c_master_instance, &packet) != STATUS_OK)
    15ae:	7943      	ldrb	r3, [r0, #5]
    15b0:	2034      	movs	r0, #52	; 0x34
    15b2:	4358      	muls	r0, r3
    15b4:	3004      	adds	r0, #4
    15b6:	4b07      	ldr	r3, [pc, #28]	; (15d4 <hal_i2c_send+0x4c>)
    15b8:	1818      	adds	r0, r3, r0
    15ba:	4b07      	ldr	r3, [pc, #28]	; (15d8 <hal_i2c_send+0x50>)
    15bc:	4798      	blx	r3
    15be:	0003      	movs	r3, r0
    {
        return ATCA_COMM_FAIL;
    15c0:	20f0      	movs	r0, #240	; 0xf0
    }

    return ATCA_SUCCESS;
    15c2:	1e5a      	subs	r2, r3, #1
    15c4:	4193      	sbcs	r3, r2
    15c6:	425b      	negs	r3, r3
    15c8:	4018      	ands	r0, r3
}
    15ca:	b005      	add	sp, #20
    15cc:	bd30      	pop	{r4, r5, pc}
    15ce:	46c0      	nop			; (mov r8, r8)
    15d0:	00000f19 	.word	0x00000f19
    15d4:	20000a1c 	.word	0x20000a1c
    15d8:	000058b1 	.word	0x000058b1

000015dc <hal_i2c_receive>:
 * \param[inout] rxlength  As input, the size of the rxdata buffer.
 *                         As output, the number of bytes received.
 * \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS hal_i2c_receive(ATCAIface iface, uint8_t *rxdata, uint16_t *rxlength)
{
    15dc:	b5f0      	push	{r4, r5, r6, r7, lr}
    15de:	46d6      	mov	lr, sl
    15e0:	464f      	mov	r7, r9
    15e2:	4646      	mov	r6, r8
    15e4:	b5c0      	push	{r6, r7, lr}
    15e6:	b084      	sub	sp, #16
    15e8:	4689      	mov	r9, r1
    15ea:	4690      	mov	r8, r2
    ATCAIfaceCfg *cfg = atgetifacecfg(iface);
    15ec:	4b2c      	ldr	r3, [pc, #176]	; (16a0 <hal_i2c_receive+0xc4>)
    15ee:	4798      	blx	r3
    15f0:	0005      	movs	r5, r0
    int retries = cfg->rx_retries;
    15f2:	6a84      	ldr	r4, [r0, #40]	; 0x28
    int status = !ATCA_SUCCESS;
    uint16_t rxdata_max_size = *rxlength;
    15f4:	4643      	mov	r3, r8
    15f6:	881b      	ldrh	r3, [r3, #0]
    15f8:	469a      	mov	sl, r3

    struct i2c_master_packet packet = {
    15fa:	ab01      	add	r3, sp, #4
    15fc:	7902      	ldrb	r2, [r0, #4]
    15fe:	0852      	lsrs	r2, r2, #1
    1600:	801a      	strh	r2, [r3, #0]
    1602:	2201      	movs	r2, #1
    1604:	805a      	strh	r2, [r3, #2]
    1606:	464a      	mov	r2, r9
    1608:	9202      	str	r2, [sp, #8]
    160a:	2200      	movs	r2, #0
    160c:	721a      	strb	r2, [r3, #8]
    160e:	725a      	strb	r2, [r3, #9]
    1610:	729a      	strb	r2, [r3, #10]
        .ten_bit_address    = false,
        .high_speed         = false,
        .hs_master_code     = 0x0,
    };

    *rxlength = 0;
    1612:	4643      	mov	r3, r8
    1614:	801a      	strh	r2, [r3, #0]
    if (rxdata_max_size < 1)
    {
        return ATCA_SMALL_BUFFER;
    1616:	20ed      	movs	r0, #237	; 0xed
    if (rxdata_max_size < 1)
    1618:	4653      	mov	r3, sl
    161a:	2b00      	cmp	r3, #0
    161c:	d105      	bne.n	162a <hal_i2c_receive+0x4e>
    }

    *rxlength = rxdata[0];

    return ATCA_SUCCESS;
}
    161e:	b004      	add	sp, #16
    1620:	bc1c      	pop	{r2, r3, r4}
    1622:	4690      	mov	r8, r2
    1624:	4699      	mov	r9, r3
    1626:	46a2      	mov	sl, r4
    1628:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (rxdata_max_size < 1)
    162a:	2301      	movs	r3, #1
        if (i2c_master_read_packet_wait(&i2c_hal_data[cfg->atcai2c.bus].i2c_master_instance, &packet) != STATUS_OK)
    162c:	4f1d      	ldr	r7, [pc, #116]	; (16a4 <hal_i2c_receive+0xc8>)
    162e:	4e1e      	ldr	r6, [pc, #120]	; (16a8 <hal_i2c_receive+0xcc>)
    1630:	e00c      	b.n	164c <hal_i2c_receive+0x70>
    1632:	796b      	ldrb	r3, [r5, #5]
    1634:	2034      	movs	r0, #52	; 0x34
    1636:	4358      	muls	r0, r3
    1638:	3004      	adds	r0, #4
    163a:	1838      	adds	r0, r7, r0
    163c:	a901      	add	r1, sp, #4
    163e:	47b0      	blx	r6
            status = ATCA_COMM_FAIL;
    1640:	23f0      	movs	r3, #240	; 0xf0
            status = ATCA_SUCCESS;
    1642:	1e42      	subs	r2, r0, #1
    1644:	4190      	sbcs	r0, r2
    1646:	4240      	negs	r0, r0
    1648:	4003      	ands	r3, r0
    164a:	3c01      	subs	r4, #1
    while (retries-- > 0 && status != ATCA_SUCCESS)
    164c:	2c00      	cmp	r4, #0
    164e:	dd1c      	ble.n	168a <hal_i2c_receive+0xae>
    1650:	2b00      	cmp	r3, #0
    1652:	d1ee      	bne.n	1632 <hal_i2c_receive+0x56>
    if (rxdata[0] < ATCA_RSP_SIZE_MIN)
    1654:	464b      	mov	r3, r9
    1656:	781b      	ldrb	r3, [r3, #0]
        return ATCA_INVALID_SIZE;
    1658:	20e4      	movs	r0, #228	; 0xe4
    if (rxdata[0] < ATCA_RSP_SIZE_MIN)
    165a:	2b03      	cmp	r3, #3
    165c:	d9df      	bls.n	161e <hal_i2c_receive+0x42>
    if (rxdata[0] > rxdata_max_size)
    165e:	b29b      	uxth	r3, r3
        return ATCA_SMALL_BUFFER;
    1660:	3009      	adds	r0, #9
    if (rxdata[0] > rxdata_max_size)
    1662:	459a      	cmp	sl, r3
    1664:	d3db      	bcc.n	161e <hal_i2c_receive+0x42>
    packet.data_length = rxdata[0] - 1;
    1666:	a901      	add	r1, sp, #4
    1668:	3b01      	subs	r3, #1
    166a:	804b      	strh	r3, [r1, #2]
    packet.data = &rxdata[1];
    166c:	464b      	mov	r3, r9
    166e:	3301      	adds	r3, #1
    1670:	604b      	str	r3, [r1, #4]
    if (i2c_master_read_packet_wait(&i2c_hal_data[cfg->atcai2c.bus].i2c_master_instance, &packet) != STATUS_OK)
    1672:	796b      	ldrb	r3, [r5, #5]
    1674:	38b9      	subs	r0, #185	; 0xb9
    1676:	4358      	muls	r0, r3
    1678:	3004      	adds	r0, #4
    167a:	4b0a      	ldr	r3, [pc, #40]	; (16a4 <hal_i2c_receive+0xc8>)
    167c:	1818      	adds	r0, r3, r0
    167e:	4b0a      	ldr	r3, [pc, #40]	; (16a8 <hal_i2c_receive+0xcc>)
    1680:	4798      	blx	r3
    1682:	2800      	cmp	r0, #0
    1684:	d005      	beq.n	1692 <hal_i2c_receive+0xb6>
        return status;
    1686:	20f0      	movs	r0, #240	; 0xf0
    1688:	e7c9      	b.n	161e <hal_i2c_receive+0x42>
    if (status != ATCA_SUCCESS)
    168a:	2b00      	cmp	r3, #0
    168c:	d0e2      	beq.n	1654 <hal_i2c_receive+0x78>
        return status;
    168e:	b2d8      	uxtb	r0, r3
    1690:	e7c5      	b.n	161e <hal_i2c_receive+0x42>
    *rxlength = rxdata[0];
    1692:	464b      	mov	r3, r9
    1694:	781b      	ldrb	r3, [r3, #0]
    1696:	4642      	mov	r2, r8
    1698:	8013      	strh	r3, [r2, #0]
    return ATCA_SUCCESS;
    169a:	2000      	movs	r0, #0
    169c:	e7bf      	b.n	161e <hal_i2c_receive+0x42>
    169e:	46c0      	nop			; (mov r8, r8)
    16a0:	00000f19 	.word	0x00000f19
    16a4:	20000a1c 	.word	0x20000a1c
    16a8:	0000588d 	.word	0x0000588d

000016ac <change_i2c_speed>:
 * \param[in] iface  interface on which to change bus speed
 * \param[in] speed  baud rate (typically 100000 or 400000)
 */

void change_i2c_speed(ATCAIface iface, uint32_t speed)
{
    16ac:	b5f0      	push	{r4, r5, r6, r7, lr}
    16ae:	46de      	mov	lr, fp
    16b0:	4657      	mov	r7, sl
    16b2:	464e      	mov	r6, r9
    16b4:	4645      	mov	r5, r8
    16b6:	b5e0      	push	{r5, r6, r7, lr}
    16b8:	b085      	sub	sp, #20
    16ba:	9103      	str	r1, [sp, #12]
    ATCAIfaceCfg *cfg = atgetifacecfg(iface);
    16bc:	4b2d      	ldr	r3, [pc, #180]	; (1774 <change_i2c_speed+0xc8>)
    16be:	4798      	blx	r3
    ATCAI2CMaster_t* data = &i2c_hal_data[cfg->atcai2c.bus];
    16c0:	7943      	ldrb	r3, [r0, #5]

    i2c_master_disable(&data->i2c_master_instance);
    16c2:	4a2d      	ldr	r2, [pc, #180]	; (1778 <change_i2c_speed+0xcc>)
    16c4:	4690      	mov	r8, r2
    16c6:	2534      	movs	r5, #52	; 0x34
    16c8:	9302      	str	r3, [sp, #8]
    16ca:	435d      	muls	r5, r3
    16cc:	1d2c      	adds	r4, r5, #4
    16ce:	4444      	add	r4, r8
    16d0:	9401      	str	r4, [sp, #4]
{
	/* Sanity check of arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    16d2:	1957      	adds	r7, r2, r5
    16d4:	687e      	ldr	r6, [r7, #4]

#if I2C_MASTER_CALLBACK_MODE == true
		/* Disable module interrupts */
		system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
    16d6:	0030      	movs	r0, r6
    16d8:	4c28      	ldr	r4, [pc, #160]	; (177c <change_i2c_speed+0xd0>)
    16da:	46a2      	mov	sl, r4
    16dc:	47a0      	blx	r4
 * \param[in] vector  Interrupt vector to disable
 */
static inline void system_interrupt_disable(
		const enum system_interrupt_vector vector)
{
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    16de:	241f      	movs	r4, #31
    16e0:	4020      	ands	r0, r4
    16e2:	3c1e      	subs	r4, #30
    16e4:	0022      	movs	r2, r4
    16e6:	4082      	lsls	r2, r0
    16e8:	4925      	ldr	r1, [pc, #148]	; (1780 <change_i2c_speed+0xd4>)
    16ea:	4689      	mov	r9, r1
    16ec:	2380      	movs	r3, #128	; 0x80
    16ee:	50ca      	str	r2, [r1, r3]
#endif

	/* Wait for module to sync */
	_i2c_master_wait_for_sync(module);
    16f0:	9801      	ldr	r0, [sp, #4]
    16f2:	4a24      	ldr	r2, [pc, #144]	; (1784 <change_i2c_speed+0xd8>)
    16f4:	4693      	mov	fp, r2
    16f6:	4790      	blx	r2

	/* Disbale interrupt */
	i2c_module->INTENCLR.reg = SERCOM_I2CM_INTENCLR_MASK;
    16f8:	2383      	movs	r3, #131	; 0x83
    16fa:	7533      	strb	r3, [r6, #20]
	/* Clear interrupt flag */
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_MASK;
    16fc:	7633      	strb	r3, [r6, #24]

	/* Disable module */
	i2c_module->CTRLA.reg &= ~SERCOM_I2CM_CTRLA_ENABLE;
    16fe:	6833      	ldr	r3, [r6, #0]
    1700:	2202      	movs	r2, #2
    1702:	4393      	bics	r3, r2
    1704:	6033      	str	r3, [r6, #0]
    config_i2c_master.buffer_timeout = 10000;
    1706:	4e20      	ldr	r6, [pc, #128]	; (1788 <change_i2c_speed+0xdc>)
    1708:	4b20      	ldr	r3, [pc, #128]	; (178c <change_i2c_speed+0xe0>)
    170a:	82f3      	strh	r3, [r6, #22]
    config_i2c_master.baud_rate = speed / 1000;
    170c:	21fa      	movs	r1, #250	; 0xfa
    170e:	0089      	lsls	r1, r1, #2
    1710:	9803      	ldr	r0, [sp, #12]
    1712:	4b1f      	ldr	r3, [pc, #124]	; (1790 <change_i2c_speed+0xe4>)
    1714:	4798      	blx	r3
    1716:	6030      	str	r0, [r6, #0]
    i2c_master_init(&data->i2c_master_instance, data->i2c_sercom, &config_i2c_master);
    1718:	4641      	mov	r1, r8
    171a:	5869      	ldr	r1, [r5, r1]
    171c:	0032      	movs	r2, r6
    171e:	9e01      	ldr	r6, [sp, #4]
    1720:	0030      	movs	r0, r6
    1722:	4b1c      	ldr	r3, [pc, #112]	; (1794 <change_i2c_speed+0xe8>)
    1724:	4798      	blx	r3
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    1726:	687d      	ldr	r5, [r7, #4]
	_i2c_master_wait_for_sync(module);
    1728:	0030      	movs	r0, r6
    172a:	47d8      	blx	fp
	i2c_module->CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
    172c:	682b      	ldr	r3, [r5, #0]
    172e:	2102      	movs	r1, #2
    1730:	430b      	orrs	r3, r1
    1732:	602b      	str	r3, [r5, #0]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    1734:	6878      	ldr	r0, [r7, #4]
    1736:	47d0      	blx	sl
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    1738:	211f      	movs	r1, #31
    173a:	4008      	ands	r0, r1
    173c:	4084      	lsls	r4, r0
    173e:	4649      	mov	r1, r9
    1740:	600c      	str	r4, [r1, #0]
	uint32_t timeout_counter = 0;
    1742:	2300      	movs	r3, #0
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
    1744:	2010      	movs	r0, #16
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
    1746:	2134      	movs	r1, #52	; 0x34
    1748:	9a02      	ldr	r2, [sp, #8]
    174a:	4351      	muls	r1, r2
    174c:	4a0a      	ldr	r2, [pc, #40]	; (1778 <change_i2c_speed+0xcc>)
    174e:	4694      	mov	ip, r2
    1750:	4461      	add	r1, ip
    1752:	310a      	adds	r1, #10
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
    1754:	8b6a      	ldrh	r2, [r5, #26]
    1756:	4202      	tst	r2, r0
    1758:	d105      	bne.n	1766 <change_i2c_speed+0xba>
		timeout_counter++;
    175a:	3301      	adds	r3, #1
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
    175c:	880a      	ldrh	r2, [r1, #0]
    175e:	4293      	cmp	r3, r2
    1760:	d3f8      	bcc.n	1754 <change_i2c_speed+0xa8>
			i2c_module->STATUS.reg = SERCOM_I2CM_STATUS_BUSSTATE(1);
    1762:	2310      	movs	r3, #16
    1764:	836b      	strh	r3, [r5, #26]
    i2c_master_enable(&data->i2c_master_instance);
}
    1766:	b005      	add	sp, #20
    1768:	bc3c      	pop	{r2, r3, r4, r5}
    176a:	4690      	mov	r8, r2
    176c:	4699      	mov	r9, r3
    176e:	46a2      	mov	sl, r4
    1770:	46ab      	mov	fp, r5
    1772:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1774:	00000f19 	.word	0x00000f19
    1778:	20000a1c 	.word	0x20000a1c
    177c:	00005f29 	.word	0x00005f29
    1780:	e000e100 	.word	0xe000e100
    1784:	000013cd 	.word	0x000013cd
    1788:	200009e8 	.word	0x200009e8
    178c:	00002710 	.word	0x00002710
    1790:	000165ad 	.word	0x000165ad
    1794:	000051f9 	.word	0x000051f9

00001798 <hal_i2c_wake>:
 * \param[in] iface  interface to logical device to wakeup
 * \return ATCA_SUCCESS on success, otherwise an error code.
 */

ATCA_STATUS hal_i2c_wake(ATCAIface iface)
{
    1798:	b5f0      	push	{r4, r5, r6, r7, lr}
    179a:	46ce      	mov	lr, r9
    179c:	4647      	mov	r7, r8
    179e:	b580      	push	{r7, lr}
    17a0:	b087      	sub	sp, #28
    17a2:	0004      	movs	r4, r0
    17a4:	9001      	str	r0, [sp, #4]
    ATCAIfaceCfg *cfg = atgetifacecfg(iface);
    17a6:	4b2d      	ldr	r3, [pc, #180]	; (185c <hal_i2c_wake+0xc4>)
    17a8:	4798      	blx	r3
    17aa:	0006      	movs	r6, r0
    int retries = cfg->rx_retries;
    17ac:	6a87      	ldr	r7, [r0, #40]	; 0x28
    uint32_t bdrt = cfg->atcai2c.baud;
    17ae:	6883      	ldr	r3, [r0, #8]
    17b0:	4699      	mov	r9, r3
    int status = !STATUS_OK;
    uint8_t data[4];

    if (bdrt != 100000)    // if not already at 100KHz, change it
    17b2:	4b2b      	ldr	r3, [pc, #172]	; (1860 <hal_i2c_wake+0xc8>)
    17b4:	4599      	cmp	r9, r3
    17b6:	d003      	beq.n	17c0 <hal_i2c_wake+0x28>
    {
        change_i2c_speed(iface, 100000);
    17b8:	0019      	movs	r1, r3
    17ba:	0020      	movs	r0, r4
    17bc:	4b29      	ldr	r3, [pc, #164]	; (1864 <hal_i2c_wake+0xcc>)
    17be:	4798      	blx	r3
    }

    // Send the wake by writing to an address of 0x00
    struct i2c_master_packet packet = {
    17c0:	2200      	movs	r2, #0
    17c2:	2300      	movs	r3, #0
    17c4:	a902      	add	r1, sp, #8
    17c6:	800a      	strh	r2, [r1, #0]
    17c8:	804a      	strh	r2, [r1, #2]
    17ca:	ac05      	add	r4, sp, #20
    17cc:	9403      	str	r4, [sp, #12]
    17ce:	720b      	strb	r3, [r1, #8]
    17d0:	724b      	strb	r3, [r1, #9]
    17d2:	728b      	strb	r3, [r1, #10]
        .hs_master_code     = 0x0,
    };

    // Send the 00 address as the wake pulse
    // part will NACK, so don't check for status
    i2c_master_write_packet_wait(&i2c_hal_data[cfg->atcai2c.bus].i2c_master_instance, &packet);
    17d4:	7973      	ldrb	r3, [r6, #5]
    17d6:	2034      	movs	r0, #52	; 0x34
    17d8:	4358      	muls	r0, r3
    17da:	3004      	adds	r0, #4
    17dc:	4b22      	ldr	r3, [pc, #136]	; (1868 <hal_i2c_wake+0xd0>)
    17de:	1818      	adds	r0, r3, r0
    17e0:	4b22      	ldr	r3, [pc, #136]	; (186c <hal_i2c_wake+0xd4>)
    17e2:	4798      	blx	r3

    // wait tWHI + tWLO which is configured based on device type and configuration structure
    atca_delay_us(cfg->wake_delay);
    17e4:	8cb0      	ldrh	r0, [r6, #36]	; 0x24
    17e6:	4b22      	ldr	r3, [pc, #136]	; (1870 <hal_i2c_wake+0xd8>)
    17e8:	4798      	blx	r3

    packet.address = cfg->atcai2c.slave_address >> 1;
    17ea:	7933      	ldrb	r3, [r6, #4]
    17ec:	085b      	lsrs	r3, r3, #1
    17ee:	aa02      	add	r2, sp, #8
    17f0:	8013      	strh	r3, [r2, #0]
    packet.data_length = 4;
    17f2:	2304      	movs	r3, #4
    17f4:	8053      	strh	r3, [r2, #2]
    packet.data = data;
    17f6:	9403      	str	r4, [sp, #12]

    while (retries-- > 0 && status != STATUS_OK)
    17f8:	1e7c      	subs	r4, r7, #1
    17fa:	2f00      	cmp	r7, #0
    17fc:	dd28      	ble.n	1850 <hal_i2c_wake+0xb8>
    {
        status = i2c_master_read_packet_wait(&i2c_hal_data[cfg->atcai2c.bus].i2c_master_instance, &packet);
    17fe:	4b1a      	ldr	r3, [pc, #104]	; (1868 <hal_i2c_wake+0xd0>)
    1800:	4698      	mov	r8, r3
    1802:	4f1c      	ldr	r7, [pc, #112]	; (1874 <hal_i2c_wake+0xdc>)
    1804:	7973      	ldrb	r3, [r6, #5]
    1806:	2034      	movs	r0, #52	; 0x34
    1808:	4358      	muls	r0, r3
    180a:	3004      	adds	r0, #4
    180c:	4440      	add	r0, r8
    180e:	a902      	add	r1, sp, #8
    1810:	47b8      	blx	r7
    1812:	0005      	movs	r5, r0
    while (retries-- > 0 && status != STATUS_OK)
    1814:	3c01      	subs	r4, #1
    1816:	d310      	bcc.n	183a <hal_i2c_wake+0xa2>
    1818:	2800      	cmp	r0, #0
    181a:	d1f3      	bne.n	1804 <hal_i2c_wake+0x6c>
    }

    // if necessary, revert baud rate to what came in.
    if (bdrt != 100000)
    181c:	4b10      	ldr	r3, [pc, #64]	; (1860 <hal_i2c_wake+0xc8>)
    181e:	4599      	cmp	r9, r3
    1820:	d011      	beq.n	1846 <hal_i2c_wake+0xae>
    {
        change_i2c_speed(iface, bdrt);
    1822:	4649      	mov	r1, r9
    1824:	9801      	ldr	r0, [sp, #4]
    1826:	4b0f      	ldr	r3, [pc, #60]	; (1864 <hal_i2c_wake+0xcc>)
    1828:	4798      	blx	r3
    }

    if (status != STATUS_OK)
    {
        return ATCA_COMM_FAIL;
    182a:	20f0      	movs	r0, #240	; 0xf0
    if (status != STATUS_OK)
    182c:	2d00      	cmp	r5, #0
    182e:	d00a      	beq.n	1846 <hal_i2c_wake+0xae>
    }

    return hal_check_wake(data, 4);
}
    1830:	b007      	add	sp, #28
    1832:	bc0c      	pop	{r2, r3}
    1834:	4690      	mov	r8, r2
    1836:	4699      	mov	r9, r3
    1838:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (bdrt != 100000)
    183a:	4b09      	ldr	r3, [pc, #36]	; (1860 <hal_i2c_wake+0xc8>)
    183c:	4599      	cmp	r9, r3
    183e:	d0f4      	beq.n	182a <hal_i2c_wake+0x92>
    1840:	e7ef      	b.n	1822 <hal_i2c_wake+0x8a>
    int status = !STATUS_OK;
    1842:	2501      	movs	r5, #1
    1844:	e7ed      	b.n	1822 <hal_i2c_wake+0x8a>
    return hal_check_wake(data, 4);
    1846:	2104      	movs	r1, #4
    1848:	a805      	add	r0, sp, #20
    184a:	4b0b      	ldr	r3, [pc, #44]	; (1878 <hal_i2c_wake+0xe0>)
    184c:	4798      	blx	r3
    184e:	e7ef      	b.n	1830 <hal_i2c_wake+0x98>
    if (bdrt != 100000)
    1850:	4b03      	ldr	r3, [pc, #12]	; (1860 <hal_i2c_wake+0xc8>)
    1852:	4599      	cmp	r9, r3
    1854:	d1f5      	bne.n	1842 <hal_i2c_wake+0xaa>
        return ATCA_COMM_FAIL;
    1856:	20f0      	movs	r0, #240	; 0xf0
    1858:	e7ea      	b.n	1830 <hal_i2c_wake+0x98>
    185a:	46c0      	nop			; (mov r8, r8)
    185c:	00000f19 	.word	0x00000f19
    1860:	000186a0 	.word	0x000186a0
    1864:	000016ad 	.word	0x000016ad
    1868:	20000a1c 	.word	0x20000a1c
    186c:	000058b1 	.word	0x000058b1
    1870:	00001949 	.word	0x00001949
    1874:	0000588d 	.word	0x0000588d
    1878:	00001381 	.word	0x00001381

0000187c <hal_i2c_idle>:
 * \param[in] iface  interface to logical device to idle
 * \return ATCA_SUCCESS on success, otherwise an error code.
 */

ATCA_STATUS hal_i2c_idle(ATCAIface iface)
{
    187c:	b500      	push	{lr}
    187e:	b085      	sub	sp, #20
    ATCAIfaceCfg *cfg = atgetifacecfg(iface);
    1880:	4b10      	ldr	r3, [pc, #64]	; (18c4 <hal_i2c_idle+0x48>)
    1882:	4798      	blx	r3
    uint8_t data[4];

    struct i2c_master_packet packet = {
    1884:	7903      	ldrb	r3, [r0, #4]
    1886:	085b      	lsrs	r3, r3, #1
    1888:	466a      	mov	r2, sp
    188a:	8013      	strh	r3, [r2, #0]
    188c:	2301      	movs	r3, #1
    188e:	8053      	strh	r3, [r2, #2]
    1890:	aa03      	add	r2, sp, #12
    1892:	9201      	str	r2, [sp, #4]
    1894:	2300      	movs	r3, #0
    1896:	4669      	mov	r1, sp
    1898:	720b      	strb	r3, [r1, #8]
    189a:	724b      	strb	r3, [r1, #9]
    189c:	728b      	strb	r3, [r1, #10]
        .ten_bit_address    = false,
        .high_speed         = false,
        .hs_master_code     = 0x0,
    };

    data[0] = 0x02;  // idle word address value
    189e:	3302      	adds	r3, #2
    18a0:	7013      	strb	r3, [r2, #0]
    if (i2c_master_write_packet_wait(&i2c_hal_data[cfg->atcai2c.bus].i2c_master_instance, &packet) != STATUS_OK)
    18a2:	7943      	ldrb	r3, [r0, #5]
    18a4:	2034      	movs	r0, #52	; 0x34
    18a6:	4358      	muls	r0, r3
    18a8:	3004      	adds	r0, #4
    18aa:	4b07      	ldr	r3, [pc, #28]	; (18c8 <hal_i2c_idle+0x4c>)
    18ac:	1818      	adds	r0, r3, r0
    18ae:	4b07      	ldr	r3, [pc, #28]	; (18cc <hal_i2c_idle+0x50>)
    18b0:	4798      	blx	r3
    18b2:	0003      	movs	r3, r0
    {
        return ATCA_COMM_FAIL;
    18b4:	20f0      	movs	r0, #240	; 0xf0
    }

    return ATCA_SUCCESS;
    18b6:	1e5a      	subs	r2, r3, #1
    18b8:	4193      	sbcs	r3, r2
    18ba:	425b      	negs	r3, r3
    18bc:	4018      	ands	r0, r3

}
    18be:	b005      	add	sp, #20
    18c0:	bd00      	pop	{pc}
    18c2:	46c0      	nop			; (mov r8, r8)
    18c4:	00000f19 	.word	0x00000f19
    18c8:	20000a1c 	.word	0x20000a1c
    18cc:	000058b1 	.word	0x000058b1

000018d0 <hal_i2c_sleep>:
 * \param[in] iface  interface to logical device to sleep
 * \return ATCA_SUCCESS on success, otherwise an error code.
 */

ATCA_STATUS hal_i2c_sleep(ATCAIface iface)
{
    18d0:	b500      	push	{lr}
    18d2:	b085      	sub	sp, #20
    ATCAIfaceCfg *cfg = atgetifacecfg(iface);
    18d4:	4b10      	ldr	r3, [pc, #64]	; (1918 <hal_i2c_sleep+0x48>)
    18d6:	4798      	blx	r3
    uint8_t data[4];

    struct i2c_master_packet packet = {
    18d8:	7903      	ldrb	r3, [r0, #4]
    18da:	085b      	lsrs	r3, r3, #1
    18dc:	466a      	mov	r2, sp
    18de:	8013      	strh	r3, [r2, #0]
    18e0:	2301      	movs	r3, #1
    18e2:	8053      	strh	r3, [r2, #2]
    18e4:	aa03      	add	r2, sp, #12
    18e6:	9201      	str	r2, [sp, #4]
    18e8:	2300      	movs	r3, #0
    18ea:	4669      	mov	r1, sp
    18ec:	720b      	strb	r3, [r1, #8]
    18ee:	724b      	strb	r3, [r1, #9]
    18f0:	728b      	strb	r3, [r1, #10]
        .ten_bit_address    = false,
        .high_speed         = false,
        .hs_master_code     = 0x0,
    };

    data[0] = 0x01;  // sleep word address value
    18f2:	2301      	movs	r3, #1
    18f4:	7013      	strb	r3, [r2, #0]
    if (i2c_master_write_packet_wait(&i2c_hal_data[cfg->atcai2c.bus].i2c_master_instance, &packet) != STATUS_OK)
    18f6:	7943      	ldrb	r3, [r0, #5]
    18f8:	2034      	movs	r0, #52	; 0x34
    18fa:	4358      	muls	r0, r3
    18fc:	3004      	adds	r0, #4
    18fe:	4b07      	ldr	r3, [pc, #28]	; (191c <hal_i2c_sleep+0x4c>)
    1900:	1818      	adds	r0, r3, r0
    1902:	4b07      	ldr	r3, [pc, #28]	; (1920 <hal_i2c_sleep+0x50>)
    1904:	4798      	blx	r3
    1906:	0003      	movs	r3, r0
    {
        return ATCA_COMM_FAIL;
    1908:	20f0      	movs	r0, #240	; 0xf0
    }

    return ATCA_SUCCESS;
    190a:	1e5a      	subs	r2, r3, #1
    190c:	4193      	sbcs	r3, r2
    190e:	425b      	negs	r3, r3
    1910:	4018      	ands	r0, r3
}
    1912:	b005      	add	sp, #20
    1914:	bd00      	pop	{pc}
    1916:	46c0      	nop			; (mov r8, r8)
    1918:	00000f19 	.word	0x00000f19
    191c:	20000a1c 	.word	0x20000a1c
    1920:	000058b1 	.word	0x000058b1

00001924 <hal_i2c_release>:
 * \param[in] hal_data - opaque pointer to hal data structure - known only to the HAL implementation
 * return ATCA_SUCCESS
 */

ATCA_STATUS hal_i2c_release(void *hal_data)
{
    1924:	b510      	push	{r4, lr}
    1926:	1e04      	subs	r4, r0, #0
    ATCAI2CMaster_t *hal = (ATCAI2CMaster_t*)hal_data;

    // if the use count for this bus has gone to 0 references, disable it.  protect against an unbracketed release
    if (hal && --(hal->ref_ct) <= 0)
    1928:	d004      	beq.n	1934 <hal_i2c_release+0x10>
    192a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    192c:	3b01      	subs	r3, #1
    192e:	62c3      	str	r3, [r0, #44]	; 0x2c
    1930:	2b00      	cmp	r3, #0
    1932:	dd01      	ble.n	1938 <hal_i2c_release+0x14>
        i2c_master_reset(&(hal->i2c_master_instance));
        hal->ref_ct = 0;
    }

    return ATCA_SUCCESS;
}
    1934:	2000      	movs	r0, #0
    1936:	bd10      	pop	{r4, pc}
        i2c_master_reset(&(hal->i2c_master_instance));
    1938:	3004      	adds	r0, #4
    193a:	4b02      	ldr	r3, [pc, #8]	; (1944 <hal_i2c_release+0x20>)
    193c:	4798      	blx	r3
        hal->ref_ct = 0;
    193e:	2300      	movs	r3, #0
    1940:	62e3      	str	r3, [r4, #44]	; 0x2c
    1942:	e7f7      	b.n	1934 <hal_i2c_release+0x10>
    1944:	00005505 	.word	0x00005505

00001948 <atca_delay_us>:
/** \brief This function delays for a number of microseconds.
 *
 * \param[in] delay number of 0.001 milliseconds to delay
 */
void atca_delay_us(uint32_t delay)
{
    1948:	b510      	push	{r4, lr}
    // use ASF supplied delay
    delay_us(delay);
    194a:	2800      	cmp	r0, #0
    194c:	d103      	bne.n	1956 <atca_delay_us+0xe>
    194e:	2001      	movs	r0, #1
    1950:	4b02      	ldr	r3, [pc, #8]	; (195c <atca_delay_us+0x14>)
    1952:	4798      	blx	r3
}
    1954:	bd10      	pop	{r4, pc}
    delay_us(delay);
    1956:	4b01      	ldr	r3, [pc, #4]	; (195c <atca_delay_us+0x14>)
    1958:	4798      	blx	r3
    195a:	e7fb      	b.n	1954 <atca_delay_us+0xc>
    195c:	000044d9 	.word	0x000044d9

00001960 <atca_delay_ms>:
 * \param[in] delay number of milliseconds to delay
 */

/* ASF already has delay_ms - see delay.h */
void atca_delay_ms(uint32_t delay)
{
    1960:	b510      	push	{r4, lr}
    // use ASF supplied delay
    delay_ms(delay);
    1962:	2800      	cmp	r0, #0
    1964:	d103      	bne.n	196e <atca_delay_ms+0xe>
    1966:	2001      	movs	r0, #1
    1968:	4b02      	ldr	r3, [pc, #8]	; (1974 <atca_delay_ms+0x14>)
    196a:	4798      	blx	r3
}
    196c:	bd10      	pop	{r4, pc}
    delay_ms(delay);
    196e:	4b02      	ldr	r3, [pc, #8]	; (1978 <atca_delay_ms+0x18>)
    1970:	4798      	blx	r3
    1972:	e7fb      	b.n	196c <atca_delay_ms+0xc>
    1974:	000044d9 	.word	0x000044d9
    1978:	00004505 	.word	0x00004505

0000197c <atcah_nonce>:
/** \brief This function calculates host side nonce with the parameters passed.
 *    \param[in, out] param pointer to parameter structure
 *   \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS atcah_nonce(struct atca_nonce_in_out *param)
{
    197c:	b5f0      	push	{r4, r5, r6, r7, lr}
    197e:	46c6      	mov	lr, r8
    1980:	b500      	push	{lr}
    1982:	b08e      	sub	sp, #56	; 0x38
    1984:	0004      	movs	r4, r0
    uint8_t temporary[ATCA_MSG_SIZE_NONCE];
    uint8_t *p_temp;
    uint8_t calc_mode = param->mode & NONCE_MODE_MASK;

    // Check parameters
    if (param->temp_key == NULL || param->num_in == NULL)
    1986:	68c5      	ldr	r5, [r0, #12]
    1988:	2d00      	cmp	r5, #0
    198a:	d050      	beq.n	1a2e <atcah_nonce+0xb2>
    198c:	6846      	ldr	r6, [r0, #4]
    198e:	2e00      	cmp	r6, #0
    1990:	d04f      	beq.n	1a32 <atcah_nonce+0xb6>
    uint8_t calc_mode = param->mode & NONCE_MODE_MASK;
    1992:	7807      	ldrb	r7, [r0, #0]
    {
        return ATCA_BAD_PARAM;
    }

    // Calculate or pass-through the nonce to TempKey->Value
    if ((calc_mode == NONCE_MODE_SEED_UPDATE) || (calc_mode == NONCE_MODE_NO_SEED_UPDATE))
    1994:	2303      	movs	r3, #3
    1996:	403b      	ands	r3, r7
        param->temp_key->gen_dig_data = 0;
        param->temp_key->no_mac_flag = 0;
        param->temp_key->valid = 1;
    }

    return ATCA_SUCCESS;
    1998:	2000      	movs	r0, #0
    if ((calc_mode == NONCE_MODE_SEED_UPDATE) || (calc_mode == NONCE_MODE_NO_SEED_UPDATE))
    199a:	2b01      	cmp	r3, #1
    199c:	d903      	bls.n	19a6 <atcah_nonce+0x2a>
}
    199e:	b00e      	add	sp, #56	; 0x38
    19a0:	bc04      	pop	{r2}
    19a2:	4690      	mov	r8, r2
    19a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if (param->rand_out == NULL)
    19a6:	68a1      	ldr	r1, [r4, #8]
    19a8:	2900      	cmp	r1, #0
    19aa:	d044      	beq.n	1a36 <atcah_nonce+0xba>
        if ((param->zero & NONCE_ZERO_CALC_MASK) == NONCE_ZERO_CALC_TEMPKEY)
    19ac:	2202      	movs	r2, #2
    19ae:	5ea3      	ldrsh	r3, [r4, r2]
    19b0:	2b00      	cmp	r3, #0
    19b2:	db37      	blt.n	1a24 <atcah_nonce+0xa8>
            memcpy(p_temp, param->rand_out, RANDOM_NUM_SIZE);
    19b4:	2220      	movs	r2, #32
    19b6:	4668      	mov	r0, sp
    19b8:	4b20      	ldr	r3, [pc, #128]	; (1a3c <atcah_nonce+0xc0>)
    19ba:	4698      	mov	r8, r3
    19bc:	4798      	blx	r3
            memcpy(p_temp, param->num_in, NONCE_NUMIN_SIZE);
    19be:	2214      	movs	r2, #20
    19c0:	0031      	movs	r1, r6
    19c2:	a808      	add	r0, sp, #32
    19c4:	47c0      	blx	r8
            *p_temp++ = ATCA_NONCE;
    19c6:	2216      	movs	r2, #22
    19c8:	2334      	movs	r3, #52	; 0x34
    19ca:	4669      	mov	r1, sp
    19cc:	54ca      	strb	r2, [r1, r3]
            *p_temp++ = param->mode;
    19ce:	3301      	adds	r3, #1
    19d0:	54cf      	strb	r7, [r1, r3]
            *p_temp++ = 0x00;
    19d2:	2200      	movs	r2, #0
    19d4:	3301      	adds	r3, #1
    19d6:	54ca      	strb	r2, [r1, r3]
            atcac_sw_sha2_256(temporary, ATCA_MSG_SIZE_NONCE, param->temp_key->value);
    19d8:	002a      	movs	r2, r5
    19da:	2137      	movs	r1, #55	; 0x37
    19dc:	4668      	mov	r0, sp
    19de:	4b18      	ldr	r3, [pc, #96]	; (1a40 <atcah_nonce+0xc4>)
    19e0:	4798      	blx	r3
            param->temp_key->source_flag = 0; // Random
    19e2:	68e1      	ldr	r1, [r4, #12]
    19e4:	2340      	movs	r3, #64	; 0x40
    19e6:	5cca      	ldrb	r2, [r1, r3]
    19e8:	2010      	movs	r0, #16
    19ea:	4382      	bics	r2, r0
    19ec:	54ca      	strb	r2, [r1, r3]
            param->temp_key->key_id = 0;
    19ee:	68e1      	ldr	r1, [r4, #12]
    19f0:	5cca      	ldrb	r2, [r1, r3]
    19f2:	3801      	subs	r0, #1
    19f4:	4382      	bics	r2, r0
    19f6:	54ca      	strb	r2, [r1, r3]
            param->temp_key->gen_dig_data = 0;
    19f8:	68e1      	ldr	r1, [r4, #12]
    19fa:	5cca      	ldrb	r2, [r1, r3]
    19fc:	3011      	adds	r0, #17
    19fe:	4382      	bics	r2, r0
    1a00:	54ca      	strb	r2, [r1, r3]
            param->temp_key->no_mac_flag = 0;
    1a02:	68e1      	ldr	r1, [r4, #12]
    1a04:	5cc8      	ldrb	r0, [r1, r3]
    1a06:	227f      	movs	r2, #127	; 0x7f
    1a08:	4002      	ands	r2, r0
    1a0a:	54ca      	strb	r2, [r1, r3]
            param->temp_key->valid = 1;
    1a0c:	68e3      	ldr	r3, [r4, #12]
    1a0e:	3340      	adds	r3, #64	; 0x40
    1a10:	785a      	ldrb	r2, [r3, #1]
    1a12:	2101      	movs	r1, #1
    1a14:	430a      	orrs	r2, r1
    1a16:	705a      	strb	r2, [r3, #1]
        param->temp_key->is_64 = 0;
    1a18:	68e2      	ldr	r2, [r4, #12]
    1a1a:	2100      	movs	r1, #0
    1a1c:	2342      	movs	r3, #66	; 0x42
    1a1e:	54d1      	strb	r1, [r2, r3]
    return ATCA_SUCCESS;
    1a20:	2000      	movs	r0, #0
    1a22:	e7bc      	b.n	199e <atcah_nonce+0x22>
            memcpy(param->temp_key->value, param->rand_out, 32);
    1a24:	2220      	movs	r2, #32
    1a26:	0028      	movs	r0, r5
    1a28:	4b04      	ldr	r3, [pc, #16]	; (1a3c <atcah_nonce+0xc0>)
    1a2a:	4798      	blx	r3
    1a2c:	e7f4      	b.n	1a18 <atcah_nonce+0x9c>
        return ATCA_BAD_PARAM;
    1a2e:	20e2      	movs	r0, #226	; 0xe2
    1a30:	e7b5      	b.n	199e <atcah_nonce+0x22>
    1a32:	20e2      	movs	r0, #226	; 0xe2
    1a34:	e7b3      	b.n	199e <atcah_nonce+0x22>
            return ATCA_BAD_PARAM;
    1a36:	20e2      	movs	r0, #226	; 0xe2
    1a38:	e7b1      	b.n	199e <atcah_nonce+0x22>
    1a3a:	46c0      	nop			; (mov r8, r8)
    1a3c:	00019d11 	.word	0x00019d11
    1a40:	00000fc1 	.word	0x00000fc1

00001a44 <atcah_gen_dig>:

 * \param[in, out] param pointer to parameter structure
 * \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS atcah_gen_dig(struct atca_gen_dig_in_out *param)
{
    1a44:	b530      	push	{r4, r5, lr}
    1a46:	b099      	sub	sp, #100	; 0x64
    1a48:	0004      	movs	r4, r0
    uint8_t temporary[ATCA_MSG_SIZE_GEN_DIG];
    uint8_t *p_temp;

    // Check parameters
    if (param->sn == NULL || param->temp_key == NULL)
    1a4a:	6883      	ldr	r3, [r0, #8]
    1a4c:	2b00      	cmp	r3, #0
    1a4e:	d100      	bne.n	1a52 <atcah_gen_dig+0xe>
    1a50:	e093      	b.n	1b7a <atcah_gen_dig+0x136>
    1a52:	6943      	ldr	r3, [r0, #20]
    1a54:	2b00      	cmp	r3, #0
    1a56:	d100      	bne.n	1a5a <atcah_gen_dig+0x16>
    1a58:	e092      	b.n	1b80 <atcah_gen_dig+0x13c>
    {
        return ATCA_BAD_PARAM;
    }
    if (param->zone != GENDIG_ZONE_SHARED_NONCE && param->stored_value == NULL)
    1a5a:	7805      	ldrb	r5, [r0, #0]
    1a5c:	2d03      	cmp	r5, #3
    1a5e:	d01c      	beq.n	1a9a <atcah_gen_dig+0x56>
    1a60:	68c3      	ldr	r3, [r0, #12]
    1a62:	2b00      	cmp	r3, #0
    1a64:	d100      	bne.n	1a68 <atcah_gen_dig+0x24>
    1a66:	e08d      	b.n	1b84 <atcah_gen_dig+0x140>
    {
        return ATCA_BAD_PARAM;  // Stored value can only be null with the shared_nonce mode
    }
    if ((param->zone == GENDIG_ZONE_SHARED_NONCE || (param->zone == GENDIG_ZONE_DATA && param->is_key_nomac)) && param->other_data == NULL)
    1a68:	2d02      	cmp	r5, #2
    1a6a:	d004      	beq.n	1a76 <atcah_gen_dig+0x32>
    {
        return ATCA_BAD_PARAM;  // Other data is required in these cases
    }
    if (param->zone > 5)
    {
        return ATCA_BAD_PARAM;  // Unknown zone
    1a6c:	20e2      	movs	r0, #226	; 0xe2
    if (param->zone > 5)
    1a6e:	2d05      	cmp	r5, #5
    1a70:	d900      	bls.n	1a74 <atcah_gen_dig+0x30>
    1a72:	e083      	b.n	1b7c <atcah_gen_dig+0x138>
    1a74:	e019      	b.n	1aaa <atcah_gen_dig+0x66>
    if ((param->zone == GENDIG_ZONE_SHARED_NONCE || (param->zone == GENDIG_ZONE_DATA && param->is_key_nomac)) && param->other_data == NULL)
    1a76:	7903      	ldrb	r3, [r0, #4]
    1a78:	2b00      	cmp	r3, #0
    1a7a:	d000      	beq.n	1a7e <atcah_gen_dig+0x3a>
    1a7c:	e086      	b.n	1b8c <atcah_gen_dig+0x148>
    {
        memcpy(p_temp, param->other_data, ATCA_KEY_SIZE);
    }
    else
    {
        memcpy(p_temp, param->stored_value, ATCA_KEY_SIZE);
    1a7e:	2220      	movs	r2, #32
    1a80:	68e1      	ldr	r1, [r4, #12]
    1a82:	4668      	mov	r0, sp
    1a84:	4b44      	ldr	r3, [pc, #272]	; (1b98 <atcah_gen_dig+0x154>)
    1a86:	4798      	blx	r3
    }
    p_temp += ATCA_KEY_SIZE;

    if (param->zone == GENDIG_ZONE_DATA && param->is_key_nomac)
    1a88:	7923      	ldrb	r3, [r4, #4]
    1a8a:	2b00      	cmp	r3, #0
    1a8c:	d012      	beq.n	1ab4 <atcah_gen_dig+0x70>
    {
        // If a key has the SlotConfig.NoMac bit set, then opcode and parameters come from OtherData
        memcpy(p_temp, param->other_data, 4);
    1a8e:	2204      	movs	r2, #4
    1a90:	6921      	ldr	r1, [r4, #16]
    1a92:	a808      	add	r0, sp, #32
    1a94:	4b40      	ldr	r3, [pc, #256]	; (1b98 <atcah_gen_dig+0x154>)
    1a96:	4798      	blx	r3
        p_temp += 4;
    1a98:	e018      	b.n	1acc <atcah_gen_dig+0x88>
    if ((param->zone == GENDIG_ZONE_SHARED_NONCE || (param->zone == GENDIG_ZONE_DATA && param->is_key_nomac)) && param->other_data == NULL)
    1a9a:	6901      	ldr	r1, [r0, #16]
    1a9c:	2900      	cmp	r1, #0
    1a9e:	d100      	bne.n	1aa2 <atcah_gen_dig+0x5e>
    1aa0:	e072      	b.n	1b88 <atcah_gen_dig+0x144>
    if (param->zone == GENDIG_ZONE_SHARED_NONCE && param->key_id & 0x8000)
    1aa2:	2202      	movs	r2, #2
    1aa4:	5e83      	ldrsh	r3, [r0, r2]
    1aa6:	2b00      	cmp	r3, #0
    1aa8:	db44      	blt.n	1b34 <atcah_gen_dig+0xf0>
        memcpy(p_temp, param->stored_value, ATCA_KEY_SIZE);
    1aaa:	2220      	movs	r2, #32
    1aac:	68e1      	ldr	r1, [r4, #12]
    1aae:	4668      	mov	r0, sp
    1ab0:	4b39      	ldr	r3, [pc, #228]	; (1b98 <atcah_gen_dig+0x154>)
    1ab2:	4798      	blx	r3
    }
    else
    {
        // (2) 1 byte Opcode
        *p_temp++ = ATCA_GENDIG;
    1ab4:	2215      	movs	r2, #21
    1ab6:	2320      	movs	r3, #32
    1ab8:	4669      	mov	r1, sp
    1aba:	54ca      	strb	r2, [r1, r3]

        // (3) 1 byte Param1 (zone)
        *p_temp++ = param->zone;
    1abc:	3301      	adds	r3, #1
    1abe:	54cd      	strb	r5, [r1, r3]

        // (4) 2 bytes Param2 (keyID)
        *p_temp++ = (uint8_t)(param->key_id & 0xFF);
    1ac0:	8863      	ldrh	r3, [r4, #2]
    1ac2:	2222      	movs	r2, #34	; 0x22
    1ac4:	548b      	strb	r3, [r1, r2]
        *p_temp++ = (uint8_t)(param->key_id >> 8);
    1ac6:	0a1b      	lsrs	r3, r3, #8
    1ac8:	3201      	adds	r2, #1
    1aca:	548b      	strb	r3, [r1, r2]
    }

    // (5) 1 byte SN[8]
    *p_temp++ = param->sn[8];
    1acc:	68a3      	ldr	r3, [r4, #8]
    1ace:	7a19      	ldrb	r1, [r3, #8]
    1ad0:	2224      	movs	r2, #36	; 0x24
    1ad2:	4668      	mov	r0, sp
    1ad4:	5481      	strb	r1, [r0, r2]

    // (6) 2 bytes SN[0:1]
    *p_temp++ = param->sn[0];
    1ad6:	7819      	ldrb	r1, [r3, #0]
    1ad8:	3201      	adds	r2, #1
    1ada:	5481      	strb	r1, [r0, r2]
    *p_temp++ = param->sn[1];
    1adc:	785a      	ldrb	r2, [r3, #1]
    1ade:	2326      	movs	r3, #38	; 0x26
    1ae0:	54c2      	strb	r2, [r0, r3]

    // (7) 25 zeros
    memset(p_temp, 0, ATCA_GENDIG_ZEROS_SIZE);
    1ae2:	2219      	movs	r2, #25
    1ae4:	2100      	movs	r1, #0
    1ae6:	2027      	movs	r0, #39	; 0x27
    1ae8:	4468      	add	r0, sp
    1aea:	4b2c      	ldr	r3, [pc, #176]	; (1b9c <atcah_gen_dig+0x158>)
    1aec:	4798      	blx	r3
    p_temp += ATCA_GENDIG_ZEROS_SIZE;

    if (param->zone == GENDIG_ZONE_SHARED_NONCE && !(param->key_id & 0x8000))
    1aee:	7823      	ldrb	r3, [r4, #0]
    1af0:	2b03      	cmp	r3, #3
    1af2:	d024      	beq.n	1b3e <atcah_gen_dig+0xfa>
    {
        memcpy(p_temp, param->other_data, ATCA_KEY_SIZE);       // (8) 32 bytes OtherData
    }
    else
    {
        memcpy(p_temp, param->temp_key->value, ATCA_KEY_SIZE);  // (8) 32 bytes TempKey
    1af4:	2220      	movs	r2, #32
    1af6:	6961      	ldr	r1, [r4, #20]
    1af8:	a810      	add	r0, sp, #64	; 0x40
    1afa:	4b27      	ldr	r3, [pc, #156]	; (1b98 <atcah_gen_dig+0x154>)
    1afc:	4798      	blx	r3

    }
    // Calculate SHA256 to get the new TempKey
    atcac_sw_sha2_256(temporary, ATCA_MSG_SIZE_GEN_DIG, param->temp_key->value);
    1afe:	6962      	ldr	r2, [r4, #20]
    1b00:	2160      	movs	r1, #96	; 0x60
    1b02:	4668      	mov	r0, sp
    1b04:	4b26      	ldr	r3, [pc, #152]	; (1ba0 <atcah_gen_dig+0x15c>)
    1b06:	4798      	blx	r3

    // Update TempKey fields
    param->temp_key->valid = 1;
    1b08:	6963      	ldr	r3, [r4, #20]
    1b0a:	3340      	adds	r3, #64	; 0x40
    1b0c:	785a      	ldrb	r2, [r3, #1]
    1b0e:	2101      	movs	r1, #1
    1b10:	430a      	orrs	r2, r1
    1b12:	705a      	strb	r2, [r3, #1]

    if ((param->zone == GENDIG_ZONE_DATA) && (param->key_id <= 15))
    1b14:	7823      	ldrb	r3, [r4, #0]
    1b16:	2b02      	cmp	r3, #2
    1b18:	d01b      	beq.n	1b52 <atcah_gen_dig+0x10e>
        param->temp_key->gen_dig_data = 1;
        param->temp_key->key_id = (param->key_id & 0xF);    // mask lower 4-bit only
    }
    else
    {
        param->temp_key->gen_dig_data = 0;
    1b1a:	6961      	ldr	r1, [r4, #20]
    1b1c:	2340      	movs	r3, #64	; 0x40
    1b1e:	5cca      	ldrb	r2, [r1, r3]
    1b20:	2020      	movs	r0, #32
    1b22:	4382      	bics	r2, r0
    1b24:	54ca      	strb	r2, [r1, r3]
        param->temp_key->key_id = 0;
    1b26:	6961      	ldr	r1, [r4, #20]
    1b28:	5cca      	ldrb	r2, [r1, r3]
    1b2a:	3811      	subs	r0, #17
    1b2c:	4382      	bics	r2, r0
    1b2e:	54ca      	strb	r2, [r1, r3]
    }

    return ATCA_SUCCESS;
    1b30:	2000      	movs	r0, #0
    1b32:	e023      	b.n	1b7c <atcah_gen_dig+0x138>
        memcpy(p_temp, param->other_data, ATCA_KEY_SIZE);
    1b34:	2220      	movs	r2, #32
    1b36:	4668      	mov	r0, sp
    1b38:	4b17      	ldr	r3, [pc, #92]	; (1b98 <atcah_gen_dig+0x154>)
    1b3a:	4798      	blx	r3
    1b3c:	e7ba      	b.n	1ab4 <atcah_gen_dig+0x70>
    if (param->zone == GENDIG_ZONE_SHARED_NONCE && !(param->key_id & 0x8000))
    1b3e:	2202      	movs	r2, #2
    1b40:	5ea3      	ldrsh	r3, [r4, r2]
    1b42:	2b00      	cmp	r3, #0
    1b44:	dbd6      	blt.n	1af4 <atcah_gen_dig+0xb0>
        memcpy(p_temp, param->other_data, ATCA_KEY_SIZE);       // (8) 32 bytes OtherData
    1b46:	2220      	movs	r2, #32
    1b48:	6921      	ldr	r1, [r4, #16]
    1b4a:	a810      	add	r0, sp, #64	; 0x40
    1b4c:	4b12      	ldr	r3, [pc, #72]	; (1b98 <atcah_gen_dig+0x154>)
    1b4e:	4798      	blx	r3
    1b50:	e7d5      	b.n	1afe <atcah_gen_dig+0xba>
    if ((param->zone == GENDIG_ZONE_DATA) && (param->key_id <= 15))
    1b52:	8863      	ldrh	r3, [r4, #2]
    1b54:	2b0f      	cmp	r3, #15
    1b56:	d8e0      	bhi.n	1b1a <atcah_gen_dig+0xd6>
        param->temp_key->gen_dig_data = 1;
    1b58:	6961      	ldr	r1, [r4, #20]
    1b5a:	2240      	movs	r2, #64	; 0x40
    1b5c:	5c8b      	ldrb	r3, [r1, r2]
    1b5e:	2020      	movs	r0, #32
    1b60:	4303      	orrs	r3, r0
    1b62:	548b      	strb	r3, [r1, r2]
        param->temp_key->key_id = (param->key_id & 0xF);    // mask lower 4-bit only
    1b64:	6960      	ldr	r0, [r4, #20]
    1b66:	8861      	ldrh	r1, [r4, #2]
    1b68:	230f      	movs	r3, #15
    1b6a:	4019      	ands	r1, r3
    1b6c:	5c83      	ldrb	r3, [r0, r2]
    1b6e:	240f      	movs	r4, #15
    1b70:	43a3      	bics	r3, r4
    1b72:	430b      	orrs	r3, r1
    1b74:	5483      	strb	r3, [r0, r2]
    return ATCA_SUCCESS;
    1b76:	2000      	movs	r0, #0
        param->temp_key->key_id = (param->key_id & 0xF);    // mask lower 4-bit only
    1b78:	e000      	b.n	1b7c <atcah_gen_dig+0x138>
        return ATCA_BAD_PARAM;
    1b7a:	20e2      	movs	r0, #226	; 0xe2
}
    1b7c:	b019      	add	sp, #100	; 0x64
    1b7e:	bd30      	pop	{r4, r5, pc}
        return ATCA_BAD_PARAM;
    1b80:	20e2      	movs	r0, #226	; 0xe2
    1b82:	e7fb      	b.n	1b7c <atcah_gen_dig+0x138>
        return ATCA_BAD_PARAM;  // Stored value can only be null with the shared_nonce mode
    1b84:	20e2      	movs	r0, #226	; 0xe2
    1b86:	e7f9      	b.n	1b7c <atcah_gen_dig+0x138>
        return ATCA_BAD_PARAM;  // Other data is required in these cases
    1b88:	20e2      	movs	r0, #226	; 0xe2
    1b8a:	e7f7      	b.n	1b7c <atcah_gen_dig+0x138>
    if ((param->zone == GENDIG_ZONE_SHARED_NONCE || (param->zone == GENDIG_ZONE_DATA && param->is_key_nomac)) && param->other_data == NULL)
    1b8c:	6903      	ldr	r3, [r0, #16]
    1b8e:	2b00      	cmp	r3, #0
    1b90:	d000      	beq.n	1b94 <atcah_gen_dig+0x150>
    1b92:	e774      	b.n	1a7e <atcah_gen_dig+0x3a>
        return ATCA_BAD_PARAM;  // Other data is required in these cases
    1b94:	20e2      	movs	r0, #226	; 0xe2
    1b96:	e7f1      	b.n	1b7c <atcah_gen_dig+0x138>
    1b98:	00019d11 	.word	0x00019d11
    1b9c:	00019e35 	.word	0x00019e35
    1ba0:	00000fc1 	.word	0x00000fc1

00001ba4 <parser_serial_data_handler>:
    1ba4:	b510      	push	{r4, lr}
    1ba6:	4b05      	ldr	r3, [pc, #20]	; (1bbc <parser_serial_data_handler+0x18>)
    1ba8:	4798      	blx	r3
    1baa:	1c43      	adds	r3, r0, #1
    1bac:	d005      	beq.n	1bba <parser_serial_data_handler+0x16>
    1bae:	b2c0      	uxtb	r0, r0
    1bb0:	4b03      	ldr	r3, [pc, #12]	; (1bc0 <parser_serial_data_handler+0x1c>)
    1bb2:	4798      	blx	r3
    1bb4:	2010      	movs	r0, #16
    1bb6:	4b03      	ldr	r3, [pc, #12]	; (1bc4 <parser_serial_data_handler+0x20>)
    1bb8:	4798      	blx	r3
    1bba:	bd10      	pop	{r4, pc}
    1bbc:	00007c9d 	.word	0x00007c9d
    1bc0:	00003f6d 	.word	0x00003f6d
    1bc4:	0000f3a5 	.word	0x0000f3a5

00001bc8 <Parser_Init>:
    1bc8:	b510      	push	{r4, lr}
    1bca:	b086      	sub	sp, #24
    1bcc:	4b08      	ldr	r3, [pc, #32]	; (1bf0 <Parser_Init+0x28>)
    1bce:	4798      	blx	r3
    1bd0:	4b08      	ldr	r3, [pc, #32]	; (1bf4 <Parser_Init+0x2c>)
    1bd2:	4798      	blx	r3
    1bd4:	ab02      	add	r3, sp, #8
    1bd6:	2201      	movs	r2, #1
    1bd8:	711a      	strb	r2, [r3, #4]
    1bda:	2200      	movs	r2, #0
    1bdc:	9200      	str	r2, [sp, #0]
    1bde:	4906      	ldr	r1, [pc, #24]	; (1bf8 <Parser_Init+0x30>)
    1be0:	9a03      	ldr	r2, [sp, #12]
    1be2:	4b06      	ldr	r3, [pc, #24]	; (1bfc <Parser_Init+0x34>)
    1be4:	200c      	movs	r0, #12
    1be6:	4c06      	ldr	r4, [pc, #24]	; (1c00 <Parser_Init+0x38>)
    1be8:	47a0      	blx	r4
    1bea:	b006      	add	sp, #24
    1bec:	bd10      	pop	{r4, pc}
    1bee:	46c0      	nop			; (mov r8, r8)
    1bf0:	00003ee5 	.word	0x00003ee5
    1bf4:	0000220d 	.word	0x0000220d
    1bf8:	20001384 	.word	0x20001384
    1bfc:	20000000 	.word	0x20000000
    1c00:	0000e2c5 	.word	0x0000e2c5

00001c04 <Parser_Main>:
    1c04:	b5f0      	push	{r4, r5, r6, r7, lr}
    1c06:	46de      	mov	lr, fp
    1c08:	4657      	mov	r7, sl
    1c0a:	464e      	mov	r6, r9
    1c0c:	4645      	mov	r5, r8
    1c0e:	b5e0      	push	{r5, r6, r7, lr}
    1c10:	b08b      	sub	sp, #44	; 0x2c
    1c12:	4b83      	ldr	r3, [pc, #524]	; (1e20 <Parser_Main+0x21c>)
    1c14:	781b      	ldrb	r3, [r3, #0]
    1c16:	4698      	mov	r8, r3
    1c18:	4b82      	ldr	r3, [pc, #520]	; (1e24 <Parser_Main+0x220>)
    1c1a:	681b      	ldr	r3, [r3, #0]
    1c1c:	9301      	str	r3, [sp, #4]
    1c1e:	4c82      	ldr	r4, [pc, #520]	; (1e28 <Parser_Main+0x224>)
    1c20:	4d82      	ldr	r5, [pc, #520]	; (1e2c <Parser_Main+0x228>)
    1c22:	e001      	b.n	1c28 <Parser_Main+0x24>
    1c24:	b2c0      	uxtb	r0, r0
    1c26:	47a8      	blx	r5
    1c28:	47a0      	blx	r4
    1c2a:	1c43      	adds	r3, r0, #1
    1c2c:	d1fa      	bne.n	1c24 <Parser_Main+0x20>
    1c2e:	4b80      	ldr	r3, [pc, #512]	; (1e30 <Parser_Main+0x22c>)
    1c30:	4a80      	ldr	r2, [pc, #512]	; (1e34 <Parser_Main+0x230>)
    1c32:	5cd3      	ldrb	r3, [r2, r3]
    1c34:	2b00      	cmp	r3, #0
    1c36:	d100      	bne.n	1c3a <Parser_Main+0x36>
    1c38:	e0d7      	b.n	1dea <Parser_Main+0x1e6>
    1c3a:	4b7f      	ldr	r3, [pc, #508]	; (1e38 <Parser_Main+0x234>)
    1c3c:	5cd3      	ldrb	r3, [r2, r3]
    1c3e:	3301      	adds	r3, #1
    1c40:	b2db      	uxtb	r3, r3
    1c42:	469a      	mov	sl, r3
    1c44:	2b00      	cmp	r3, #0
    1c46:	d100      	bne.n	1c4a <Parser_Main+0x46>
    1c48:	e0cd      	b.n	1de6 <Parser_Main+0x1e2>
    1c4a:	2300      	movs	r3, #0
    1c4c:	469b      	mov	fp, r3
    1c4e:	4691      	mov	r9, r2
    1c50:	4f7a      	ldr	r7, [pc, #488]	; (1e3c <Parser_Main+0x238>)
    1c52:	4646      	mov	r6, r8
    1c54:	46d8      	mov	r8, fp
    1c56:	46d3      	mov	fp, sl
    1c58:	e01b      	b.n	1c92 <Parser_Main+0x8e>
    1c5a:	4656      	mov	r6, sl
    1c5c:	42a6      	cmp	r6, r4
    1c5e:	d800      	bhi.n	1c62 <Parser_Main+0x5e>
    1c60:	e0c1      	b.n	1de6 <Parser_Main+0x1e2>
    1c62:	9b00      	ldr	r3, [sp, #0]
    1c64:	685b      	ldr	r3, [r3, #4]
    1c66:	9303      	str	r3, [sp, #12]
    1c68:	2b00      	cmp	r3, #0
    1c6a:	d02f      	beq.n	1ccc <Parser_Main+0xc8>
    1c6c:	0124      	lsls	r4, r4, #4
    1c6e:	9b01      	ldr	r3, [sp, #4]
    1c70:	469c      	mov	ip, r3
    1c72:	4464      	add	r4, ip
    1c74:	4643      	mov	r3, r8
    1c76:	3301      	adds	r3, #1
    1c78:	b2db      	uxtb	r3, r3
    1c7a:	4698      	mov	r8, r3
    1c7c:	465b      	mov	r3, fp
    1c7e:	3b01      	subs	r3, #1
    1c80:	b2db      	uxtb	r3, r3
    1c82:	469b      	mov	fp, r3
    1c84:	7b26      	ldrb	r6, [r4, #12]
    1c86:	6863      	ldr	r3, [r4, #4]
    1c88:	9301      	str	r3, [sp, #4]
    1c8a:	465b      	mov	r3, fp
    1c8c:	2b00      	cmp	r3, #0
    1c8e:	d100      	bne.n	1c92 <Parser_Main+0x8e>
    1c90:	e0a9      	b.n	1de6 <Parser_Main+0x1e2>
    1c92:	2300      	movs	r3, #0
    1c94:	9309      	str	r3, [sp, #36]	; 0x24
    1c96:	2e00      	cmp	r6, #0
    1c98:	d100      	bne.n	1c9c <Parser_Main+0x98>
    1c9a:	e0a4      	b.n	1de6 <Parser_Main+0x1e2>
    1c9c:	9d01      	ldr	r5, [sp, #4]
    1c9e:	2400      	movs	r4, #0
    1ca0:	4643      	mov	r3, r8
    1ca2:	9302      	str	r3, [sp, #8]
    1ca4:	331d      	adds	r3, #29
    1ca6:	33ff      	adds	r3, #255	; 0xff
    1ca8:	005b      	lsls	r3, r3, #1
    1caa:	444b      	add	r3, r9
    1cac:	3302      	adds	r3, #2
    1cae:	46b2      	mov	sl, r6
    1cb0:	001e      	movs	r6, r3
    1cb2:	9500      	str	r5, [sp, #0]
    1cb4:	8831      	ldrh	r1, [r6, #0]
    1cb6:	4449      	add	r1, r9
    1cb8:	6828      	ldr	r0, [r5, #0]
    1cba:	47b8      	blx	r7
    1cbc:	2800      	cmp	r0, #0
    1cbe:	d0cc      	beq.n	1c5a <Parser_Main+0x56>
    1cc0:	3401      	adds	r4, #1
    1cc2:	b2e4      	uxtb	r4, r4
    1cc4:	3510      	adds	r5, #16
    1cc6:	4554      	cmp	r4, sl
    1cc8:	d1f3      	bne.n	1cb2 <Parser_Main+0xae>
    1cca:	e08c      	b.n	1de6 <Parser_Main+0x1e2>
    1ccc:	46c3      	mov	fp, r8
    1cce:	9b00      	ldr	r3, [sp, #0]
    1cd0:	689c      	ldr	r4, [r3, #8]
    1cd2:	2c00      	cmp	r4, #0
    1cd4:	d100      	bne.n	1cd8 <Parser_Main+0xd4>
    1cd6:	e086      	b.n	1de6 <Parser_Main+0x1e2>
    1cd8:	7b5a      	ldrb	r2, [r3, #13]
    1cda:	4b57      	ldr	r3, [pc, #348]	; (1e38 <Parser_Main+0x234>)
    1cdc:	4955      	ldr	r1, [pc, #340]	; (1e34 <Parser_Main+0x230>)
    1cde:	5ccb      	ldrb	r3, [r1, r3]
    1ce0:	9902      	ldr	r1, [sp, #8]
    1ce2:	1a5b      	subs	r3, r3, r1
    1ce4:	4293      	cmp	r3, r2
    1ce6:	d000      	beq.n	1cea <Parser_Main+0xe6>
    1ce8:	e07d      	b.n	1de6 <Parser_Main+0x1e2>
    1cea:	2a00      	cmp	r2, #0
    1cec:	d014      	beq.n	1d18 <Parser_Main+0x114>
    1cee:	4643      	mov	r3, r8
    1cf0:	3301      	adds	r3, #1
    1cf2:	b2db      	uxtb	r3, r3
    1cf4:	4e4f      	ldr	r6, [pc, #316]	; (1e34 <Parser_Main+0x230>)
    1cf6:	0035      	movs	r5, r6
    1cf8:	484f      	ldr	r0, [pc, #316]	; (1e38 <Parser_Main+0x234>)
    1cfa:	1c59      	adds	r1, r3, #1
    1cfc:	b2c9      	uxtb	r1, r1
    1cfe:	3311      	adds	r3, #17
    1d00:	33ff      	adds	r3, #255	; 0xff
    1d02:	005b      	lsls	r3, r3, #1
    1d04:	18f3      	adds	r3, r6, r3
    1d06:	88db      	ldrh	r3, [r3, #6]
    1d08:	b29b      	uxth	r3, r3
    1d0a:	2b00      	cmp	r3, #0
    1d0c:	d06b      	beq.n	1de6 <Parser_Main+0x1e2>
    1d0e:	5c2a      	ldrb	r2, [r5, r0]
    1d10:	b2d2      	uxtb	r2, r2
    1d12:	000b      	movs	r3, r1
    1d14:	4291      	cmp	r1, r2
    1d16:	d9f0      	bls.n	1cfa <Parser_Main+0xf6>
    1d18:	2218      	movs	r2, #24
    1d1a:	2100      	movs	r1, #0
    1d1c:	a804      	add	r0, sp, #16
    1d1e:	4b48      	ldr	r3, [pc, #288]	; (1e40 <Parser_Main+0x23c>)
    1d20:	4798      	blx	r3
    1d22:	465a      	mov	r2, fp
    1d24:	465b      	mov	r3, fp
    1d26:	3301      	adds	r3, #1
    1d28:	2b09      	cmp	r3, #9
    1d2a:	d965      	bls.n	1df8 <Parser_Main+0x1f4>
    1d2c:	1c93      	adds	r3, r2, #2
    1d2e:	2b09      	cmp	r3, #9
    1d30:	d810      	bhi.n	1d54 <Parser_Main+0x150>
    1d32:	3311      	adds	r3, #17
    1d34:	33ff      	adds	r3, #255	; 0xff
    1d36:	005b      	lsls	r3, r3, #1
    1d38:	493e      	ldr	r1, [pc, #248]	; (1e34 <Parser_Main+0x230>)
    1d3a:	18cb      	adds	r3, r1, r3
    1d3c:	88db      	ldrh	r3, [r3, #6]
    1d3e:	b29b      	uxth	r3, r3
    1d40:	2b00      	cmp	r3, #0
    1d42:	d007      	beq.n	1d54 <Parser_Main+0x150>
    1d44:	9b02      	ldr	r3, [sp, #8]
    1d46:	331f      	adds	r3, #31
    1d48:	33ff      	adds	r3, #255	; 0xff
    1d4a:	005b      	lsls	r3, r3, #1
    1d4c:	18cb      	adds	r3, r1, r3
    1d4e:	885b      	ldrh	r3, [r3, #2]
    1d50:	18c9      	adds	r1, r1, r3
    1d52:	9105      	str	r1, [sp, #20]
    1d54:	1cd3      	adds	r3, r2, #3
    1d56:	2b09      	cmp	r3, #9
    1d58:	d810      	bhi.n	1d7c <Parser_Main+0x178>
    1d5a:	3311      	adds	r3, #17
    1d5c:	33ff      	adds	r3, #255	; 0xff
    1d5e:	005b      	lsls	r3, r3, #1
    1d60:	4934      	ldr	r1, [pc, #208]	; (1e34 <Parser_Main+0x230>)
    1d62:	18cb      	adds	r3, r1, r3
    1d64:	88db      	ldrh	r3, [r3, #6]
    1d66:	b29b      	uxth	r3, r3
    1d68:	2b00      	cmp	r3, #0
    1d6a:	d007      	beq.n	1d7c <Parser_Main+0x178>
    1d6c:	9b02      	ldr	r3, [sp, #8]
    1d6e:	3320      	adds	r3, #32
    1d70:	33ff      	adds	r3, #255	; 0xff
    1d72:	005b      	lsls	r3, r3, #1
    1d74:	18cb      	adds	r3, r1, r3
    1d76:	885b      	ldrh	r3, [r3, #2]
    1d78:	18c9      	adds	r1, r1, r3
    1d7a:	9106      	str	r1, [sp, #24]
    1d7c:	1d13      	adds	r3, r2, #4
    1d7e:	2b09      	cmp	r3, #9
    1d80:	d810      	bhi.n	1da4 <Parser_Main+0x1a0>
    1d82:	3311      	adds	r3, #17
    1d84:	33ff      	adds	r3, #255	; 0xff
    1d86:	005b      	lsls	r3, r3, #1
    1d88:	492a      	ldr	r1, [pc, #168]	; (1e34 <Parser_Main+0x230>)
    1d8a:	18cb      	adds	r3, r1, r3
    1d8c:	88db      	ldrh	r3, [r3, #6]
    1d8e:	b29b      	uxth	r3, r3
    1d90:	2b00      	cmp	r3, #0
    1d92:	d007      	beq.n	1da4 <Parser_Main+0x1a0>
    1d94:	9b02      	ldr	r3, [sp, #8]
    1d96:	3321      	adds	r3, #33	; 0x21
    1d98:	33ff      	adds	r3, #255	; 0xff
    1d9a:	005b      	lsls	r3, r3, #1
    1d9c:	18cb      	adds	r3, r1, r3
    1d9e:	885b      	ldrh	r3, [r3, #2]
    1da0:	18c9      	adds	r1, r1, r3
    1da2:	9107      	str	r1, [sp, #28]
    1da4:	3205      	adds	r2, #5
    1da6:	2a09      	cmp	r2, #9
    1da8:	d811      	bhi.n	1dce <Parser_Main+0x1ca>
    1daa:	3211      	adds	r2, #17
    1dac:	32ff      	adds	r2, #255	; 0xff
    1dae:	0052      	lsls	r2, r2, #1
    1db0:	4b20      	ldr	r3, [pc, #128]	; (1e34 <Parser_Main+0x230>)
    1db2:	189a      	adds	r2, r3, r2
    1db4:	88d3      	ldrh	r3, [r2, #6]
    1db6:	b29b      	uxth	r3, r3
    1db8:	2b00      	cmp	r3, #0
    1dba:	d008      	beq.n	1dce <Parser_Main+0x1ca>
    1dbc:	4a1d      	ldr	r2, [pc, #116]	; (1e34 <Parser_Main+0x230>)
    1dbe:	9b02      	ldr	r3, [sp, #8]
    1dc0:	3322      	adds	r3, #34	; 0x22
    1dc2:	33ff      	adds	r3, #255	; 0xff
    1dc4:	005b      	lsls	r3, r3, #1
    1dc6:	18d3      	adds	r3, r2, r3
    1dc8:	885b      	ldrh	r3, [r3, #2]
    1dca:	18d2      	adds	r2, r2, r3
    1dcc:	9208      	str	r2, [sp, #32]
    1dce:	a804      	add	r0, sp, #16
    1dd0:	47a0      	blx	r4
    1dd2:	9c09      	ldr	r4, [sp, #36]	; 0x24
    1dd4:	2c00      	cmp	r4, #0
    1dd6:	d006      	beq.n	1de6 <Parser_Main+0x1e2>
    1dd8:	0020      	movs	r0, r4
    1dda:	4b1a      	ldr	r3, [pc, #104]	; (1e44 <Parser_Main+0x240>)
    1ddc:	4798      	blx	r3
    1dde:	b281      	uxth	r1, r0
    1de0:	0020      	movs	r0, r4
    1de2:	4b19      	ldr	r3, [pc, #100]	; (1e48 <Parser_Main+0x244>)
    1de4:	4798      	blx	r3
    1de6:	4b19      	ldr	r3, [pc, #100]	; (1e4c <Parser_Main+0x248>)
    1de8:	4798      	blx	r3
    1dea:	b00b      	add	sp, #44	; 0x2c
    1dec:	bc3c      	pop	{r2, r3, r4, r5}
    1dee:	4690      	mov	r8, r2
    1df0:	4699      	mov	r9, r3
    1df2:	46a2      	mov	sl, r4
    1df4:	46ab      	mov	fp, r5
    1df6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1df8:	3311      	adds	r3, #17
    1dfa:	33ff      	adds	r3, #255	; 0xff
    1dfc:	005b      	lsls	r3, r3, #1
    1dfe:	490d      	ldr	r1, [pc, #52]	; (1e34 <Parser_Main+0x230>)
    1e00:	18cb      	adds	r3, r1, r3
    1e02:	88db      	ldrh	r3, [r3, #6]
    1e04:	b29b      	uxth	r3, r3
    1e06:	2b00      	cmp	r3, #0
    1e08:	d100      	bne.n	1e0c <Parser_Main+0x208>
    1e0a:	e78f      	b.n	1d2c <Parser_Main+0x128>
    1e0c:	9b02      	ldr	r3, [sp, #8]
    1e0e:	331e      	adds	r3, #30
    1e10:	33ff      	adds	r3, #255	; 0xff
    1e12:	005b      	lsls	r3, r3, #1
    1e14:	18cb      	adds	r3, r1, r3
    1e16:	885b      	ldrh	r3, [r3, #2]
    1e18:	18c9      	adds	r1, r1, r3
    1e1a:	9104      	str	r1, [sp, #16]
    1e1c:	e786      	b.n	1d2c <Parser_Main+0x128>
    1e1e:	46c0      	nop			; (mov r8, r8)
    1e20:	0001eb5d 	.word	0x0001eb5d
    1e24:	20000008 	.word	0x20000008
    1e28:	00007c9d 	.word	0x00007c9d
    1e2c:	00003f6d 	.word	0x00003f6d
    1e30:	0000024e 	.word	0x0000024e
    1e34:	20001f98 	.word	0x20001f98
    1e38:	0000024f 	.word	0x0000024f
    1e3c:	0001a1e1 	.word	0x0001a1e1
    1e40:	00019e35 	.word	0x00019e35
    1e44:	0001a269 	.word	0x0001a269
    1e48:	00003f31 	.word	0x00003f31
    1e4c:	00003ee5 	.word	0x00003ee5

00001e50 <Parser_GetSwVersion>:
    1e50:	b570      	push	{r4, r5, r6, lr}
    1e52:	0004      	movs	r4, r0
    1e54:	220b      	movs	r2, #11
    1e56:	490d      	ldr	r1, [pc, #52]	; (1e8c <Parser_GetSwVersion+0x3c>)
    1e58:	4d0d      	ldr	r5, [pc, #52]	; (1e90 <Parser_GetSwVersion+0x40>)
    1e5a:	47a8      	blx	r5
    1e5c:	2620      	movs	r6, #32
    1e5e:	72a6      	strb	r6, [r4, #10]
    1e60:	0020      	movs	r0, r4
    1e62:	300b      	adds	r0, #11
    1e64:	2210      	movs	r2, #16
    1e66:	490b      	ldr	r1, [pc, #44]	; (1e94 <Parser_GetSwVersion+0x44>)
    1e68:	47a8      	blx	r5
    1e6a:	76a6      	strb	r6, [r4, #26]
    1e6c:	0020      	movs	r0, r4
    1e6e:	301b      	adds	r0, #27
    1e70:	220c      	movs	r2, #12
    1e72:	4909      	ldr	r1, [pc, #36]	; (1e98 <Parser_GetSwVersion+0x48>)
    1e74:	47a8      	blx	r5
    1e76:	2326      	movs	r3, #38	; 0x26
    1e78:	54e6      	strb	r6, [r4, r3]
    1e7a:	0020      	movs	r0, r4
    1e7c:	3027      	adds	r0, #39	; 0x27
    1e7e:	2209      	movs	r2, #9
    1e80:	4906      	ldr	r1, [pc, #24]	; (1e9c <Parser_GetSwVersion+0x4c>)
    1e82:	47a8      	blx	r5
    1e84:	2200      	movs	r2, #0
    1e86:	2330      	movs	r3, #48	; 0x30
    1e88:	54e2      	strb	r2, [r4, r3]
    1e8a:	bd70      	pop	{r4, r5, r6, pc}
    1e8c:	0001eb2c 	.word	0x0001eb2c
    1e90:	00019d11 	.word	0x00019d11
    1e94:	0001eb38 	.word	0x0001eb38
    1e98:	0001eb48 	.word	0x0001eb48
    1e9c:	0001eb54 	.word	0x0001eb54

00001ea0 <ParserJoinData>:
    1ea0:	b510      	push	{r4, lr}
    1ea2:	2808      	cmp	r0, #8
    1ea4:	d012      	beq.n	1ecc <ParserJoinData+0x2c>
    1ea6:	2810      	cmp	r0, #16
    1ea8:	d012      	beq.n	1ed0 <ParserJoinData+0x30>
    1eaa:	281b      	cmp	r0, #27
    1eac:	d012      	beq.n	1ed4 <ParserJoinData+0x34>
    1eae:	3818      	subs	r0, #24
    1eb0:	4243      	negs	r3, r0
    1eb2:	4158      	adcs	r0, r3
    1eb4:	0080      	lsls	r0, r0, #2
    1eb6:	0080      	lsls	r0, r0, #2
    1eb8:	4b07      	ldr	r3, [pc, #28]	; (1ed8 <ParserJoinData+0x38>)
    1eba:	58c4      	ldr	r4, [r0, r3]
    1ebc:	0020      	movs	r0, r4
    1ebe:	4b07      	ldr	r3, [pc, #28]	; (1edc <ParserJoinData+0x3c>)
    1ec0:	4798      	blx	r3
    1ec2:	b281      	uxth	r1, r0
    1ec4:	0020      	movs	r0, r4
    1ec6:	4b06      	ldr	r3, [pc, #24]	; (1ee0 <ParserJoinData+0x40>)
    1ec8:	4798      	blx	r3
    1eca:	bd10      	pop	{r4, pc}
    1ecc:	2001      	movs	r0, #1
    1ece:	e7f2      	b.n	1eb6 <ParserJoinData+0x16>
    1ed0:	2002      	movs	r0, #2
    1ed2:	e7f0      	b.n	1eb6 <ParserJoinData+0x16>
    1ed4:	2003      	movs	r0, #3
    1ed6:	e7ee      	b.n	1eb6 <ParserJoinData+0x16>
    1ed8:	0001f7ec 	.word	0x0001f7ec
    1edc:	0001a269 	.word	0x0001a269
    1ee0:	00003f31 	.word	0x00003f31

00001ee4 <ParserAppData>:
    1ee4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1ee6:	780b      	ldrb	r3, [r1, #0]
    1ee8:	2b02      	cmp	r3, #2
    1eea:	d003      	beq.n	1ef4 <ParserAppData+0x10>
    1eec:	2b04      	cmp	r3, #4
    1eee:	d100      	bne.n	1ef2 <ParserAppData+0xe>
    1ef0:	e09c      	b.n	202c <STACK_SIZE+0x2c>
    1ef2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1ef4:	7b4b      	ldrb	r3, [r1, #13]
    1ef6:	3b08      	subs	r3, #8
    1ef8:	b2da      	uxtb	r2, r3
    1efa:	2a16      	cmp	r2, #22
    1efc:	d8f9      	bhi.n	1ef2 <ParserAppData+0xe>
    1efe:	0093      	lsls	r3, r2, #2
    1f00:	4a97      	ldr	r2, [pc, #604]	; (2160 <STACK_SIZE+0x160>)
    1f02:	58d3      	ldr	r3, [r2, r3]
    1f04:	469f      	mov	pc, r3
    1f06:	7b0d      	ldrb	r5, [r1, #12]
    1f08:	2d00      	cmp	r5, #0
    1f0a:	d030      	beq.n	1f6e <ParserAppData+0x8a>
    1f0c:	688e      	ldr	r6, [r1, #8]
    1f0e:	2e00      	cmp	r6, #0
    1f10:	d02d      	beq.n	1f6e <ParserAppData+0x8a>
    1f12:	4c94      	ldr	r4, [pc, #592]	; (2164 <STACK_SIZE+0x164>)
    1f14:	2208      	movs	r2, #8
    1f16:	4994      	ldr	r1, [pc, #592]	; (2168 <STACK_SIZE+0x168>)
    1f18:	0020      	movs	r0, r4
    1f1a:	4b94      	ldr	r3, [pc, #592]	; (216c <STACK_SIZE+0x16c>)
    1f1c:	4798      	blx	r3
    1f1e:	0020      	movs	r0, r4
    1f20:	4f93      	ldr	r7, [pc, #588]	; (2170 <STACK_SIZE+0x170>)
    1f22:	47b8      	blx	r7
    1f24:	0401      	lsls	r1, r0, #16
    1f26:	0c09      	lsrs	r1, r1, #16
    1f28:	1909      	adds	r1, r1, r4
    1f2a:	7830      	ldrb	r0, [r6, #0]
    1f2c:	220a      	movs	r2, #10
    1f2e:	4b91      	ldr	r3, [pc, #580]	; (2174 <STACK_SIZE+0x174>)
    1f30:	4798      	blx	r3
    1f32:	0020      	movs	r0, r4
    1f34:	47b8      	blx	r7
    1f36:	0403      	lsls	r3, r0, #16
    1f38:	0c1b      	lsrs	r3, r3, #16
    1f3a:	2220      	movs	r2, #32
    1f3c:	54e2      	strb	r2, [r4, r3]
    1f3e:	3001      	adds	r0, #1
    1f40:	b280      	uxth	r0, r0
    1f42:	1902      	adds	r2, r0, r4
    1f44:	1c71      	adds	r1, r6, #1
    1f46:	4b8c      	ldr	r3, [pc, #560]	; (2178 <STACK_SIZE+0x178>)
    1f48:	1a1b      	subs	r3, r3, r0
    1f4a:	03db      	lsls	r3, r3, #15
    1f4c:	3d01      	subs	r5, #1
    1f4e:	0c1b      	lsrs	r3, r3, #16
    1f50:	42ab      	cmp	r3, r5
    1f52:	dd00      	ble.n	1f56 <ParserAppData+0x72>
    1f54:	002b      	movs	r3, r5
    1f56:	b2d8      	uxtb	r0, r3
    1f58:	4b88      	ldr	r3, [pc, #544]	; (217c <STACK_SIZE+0x17c>)
    1f5a:	4798      	blx	r3
    1f5c:	4c81      	ldr	r4, [pc, #516]	; (2164 <STACK_SIZE+0x164>)
    1f5e:	0020      	movs	r0, r4
    1f60:	4b83      	ldr	r3, [pc, #524]	; (2170 <STACK_SIZE+0x170>)
    1f62:	4798      	blx	r3
    1f64:	b281      	uxth	r1, r0
    1f66:	0020      	movs	r0, r4
    1f68:	4b85      	ldr	r3, [pc, #532]	; (2180 <STACK_SIZE+0x180>)
    1f6a:	4798      	blx	r3
    1f6c:	e7c1      	b.n	1ef2 <ParserAppData+0xe>
    1f6e:	210c      	movs	r1, #12
    1f70:	4884      	ldr	r0, [pc, #528]	; (2184 <STACK_SIZE+0x184>)
    1f72:	4b83      	ldr	r3, [pc, #524]	; (2180 <STACK_SIZE+0x180>)
    1f74:	4798      	blx	r3
    1f76:	e7bc      	b.n	1ef2 <ParserAppData+0xe>
    1f78:	2109      	movs	r1, #9
    1f7a:	4883      	ldr	r0, [pc, #524]	; (2188 <STACK_SIZE+0x188>)
    1f7c:	4b80      	ldr	r3, [pc, #512]	; (2180 <STACK_SIZE+0x180>)
    1f7e:	4798      	blx	r3
    1f80:	e7b7      	b.n	1ef2 <ParserAppData+0xe>
    1f82:	210d      	movs	r1, #13
    1f84:	4881      	ldr	r0, [pc, #516]	; (218c <STACK_SIZE+0x18c>)
    1f86:	4b7e      	ldr	r3, [pc, #504]	; (2180 <STACK_SIZE+0x180>)
    1f88:	4798      	blx	r3
    1f8a:	e7b2      	b.n	1ef2 <ParserAppData+0xe>
    1f8c:	210d      	movs	r1, #13
    1f8e:	4880      	ldr	r0, [pc, #512]	; (2190 <STACK_SIZE+0x190>)
    1f90:	4b7b      	ldr	r3, [pc, #492]	; (2180 <STACK_SIZE+0x180>)
    1f92:	4798      	blx	r3
    1f94:	e7ad      	b.n	1ef2 <ParserAppData+0xe>
    1f96:	2106      	movs	r1, #6
    1f98:	487e      	ldr	r0, [pc, #504]	; (2194 <STACK_SIZE+0x194>)
    1f9a:	4b79      	ldr	r3, [pc, #484]	; (2180 <STACK_SIZE+0x180>)
    1f9c:	4798      	blx	r3
    1f9e:	e7a8      	b.n	1ef2 <ParserAppData+0xe>
    1fa0:	211e      	movs	r1, #30
    1fa2:	487d      	ldr	r0, [pc, #500]	; (2198 <STACK_SIZE+0x198>)
    1fa4:	4b76      	ldr	r3, [pc, #472]	; (2180 <STACK_SIZE+0x180>)
    1fa6:	4798      	blx	r3
    1fa8:	e7a3      	b.n	1ef2 <ParserAppData+0xe>
    1faa:	210d      	movs	r1, #13
    1fac:	487b      	ldr	r0, [pc, #492]	; (219c <STACK_SIZE+0x19c>)
    1fae:	4b74      	ldr	r3, [pc, #464]	; (2180 <STACK_SIZE+0x180>)
    1fb0:	4798      	blx	r3
    1fb2:	e79e      	b.n	1ef2 <ParserAppData+0xe>
    1fb4:	2109      	movs	r1, #9
    1fb6:	487a      	ldr	r0, [pc, #488]	; (21a0 <STACK_SIZE+0x1a0>)
    1fb8:	4b71      	ldr	r3, [pc, #452]	; (2180 <STACK_SIZE+0x180>)
    1fba:	4798      	blx	r3
    1fbc:	e799      	b.n	1ef2 <ParserAppData+0xe>
    1fbe:	210d      	movs	r1, #13
    1fc0:	4878      	ldr	r0, [pc, #480]	; (21a4 <STACK_SIZE+0x1a4>)
    1fc2:	4b6f      	ldr	r3, [pc, #444]	; (2180 <STACK_SIZE+0x180>)
    1fc4:	4798      	blx	r3
    1fc6:	e794      	b.n	1ef2 <ParserAppData+0xe>
    1fc8:	2115      	movs	r1, #21
    1fca:	4877      	ldr	r0, [pc, #476]	; (21a8 <STACK_SIZE+0x1a8>)
    1fcc:	4b6c      	ldr	r3, [pc, #432]	; (2180 <STACK_SIZE+0x180>)
    1fce:	4798      	blx	r3
    1fd0:	e78f      	b.n	1ef2 <ParserAppData+0xe>
    1fd2:	210a      	movs	r1, #10
    1fd4:	4875      	ldr	r0, [pc, #468]	; (21ac <STACK_SIZE+0x1ac>)
    1fd6:	4b6a      	ldr	r3, [pc, #424]	; (2180 <STACK_SIZE+0x180>)
    1fd8:	4798      	blx	r3
    1fda:	e78a      	b.n	1ef2 <ParserAppData+0xe>
    1fdc:	2111      	movs	r1, #17
    1fde:	4874      	ldr	r0, [pc, #464]	; (21b0 <STACK_SIZE+0x1b0>)
    1fe0:	4b67      	ldr	r3, [pc, #412]	; (2180 <STACK_SIZE+0x180>)
    1fe2:	4798      	blx	r3
    1fe4:	e785      	b.n	1ef2 <ParserAppData+0xe>
    1fe6:	210a      	movs	r1, #10
    1fe8:	4872      	ldr	r0, [pc, #456]	; (21b4 <STACK_SIZE+0x1b4>)
    1fea:	4b65      	ldr	r3, [pc, #404]	; (2180 <STACK_SIZE+0x180>)
    1fec:	4798      	blx	r3
    1fee:	e780      	b.n	1ef2 <ParserAppData+0xe>
    1ff0:	2104      	movs	r1, #4
    1ff2:	4871      	ldr	r0, [pc, #452]	; (21b8 <STACK_SIZE+0x1b8>)
    1ff4:	4b62      	ldr	r3, [pc, #392]	; (2180 <STACK_SIZE+0x180>)
    1ff6:	4798      	blx	r3
    1ff8:	e77b      	b.n	1ef2 <ParserAppData+0xe>
    1ffa:	2107      	movs	r1, #7
    1ffc:	486f      	ldr	r0, [pc, #444]	; (21bc <STACK_SIZE+0x1bc>)
    1ffe:	4b60      	ldr	r3, [pc, #384]	; (2180 <STACK_SIZE+0x180>)
    2000:	4798      	blx	r3
    2002:	e776      	b.n	1ef2 <ParserAppData+0xe>
    2004:	2110      	movs	r1, #16
    2006:	486e      	ldr	r0, [pc, #440]	; (21c0 <STACK_SIZE+0x1c0>)
    2008:	4b5d      	ldr	r3, [pc, #372]	; (2180 <STACK_SIZE+0x180>)
    200a:	4798      	blx	r3
    200c:	e771      	b.n	1ef2 <ParserAppData+0xe>
    200e:	2114      	movs	r1, #20
    2010:	486c      	ldr	r0, [pc, #432]	; (21c4 <STACK_SIZE+0x1c4>)
    2012:	4b5b      	ldr	r3, [pc, #364]	; (2180 <STACK_SIZE+0x180>)
    2014:	4798      	blx	r3
    2016:	e76c      	b.n	1ef2 <ParserAppData+0xe>
    2018:	210f      	movs	r1, #15
    201a:	486b      	ldr	r0, [pc, #428]	; (21c8 <STACK_SIZE+0x1c8>)
    201c:	4b58      	ldr	r3, [pc, #352]	; (2180 <STACK_SIZE+0x180>)
    201e:	4798      	blx	r3
    2020:	e767      	b.n	1ef2 <ParserAppData+0xe>
    2022:	210e      	movs	r1, #14
    2024:	4869      	ldr	r0, [pc, #420]	; (21cc <STACK_SIZE+0x1cc>)
    2026:	4b56      	ldr	r3, [pc, #344]	; (2180 <STACK_SIZE+0x180>)
    2028:	4798      	blx	r3
    202a:	e762      	b.n	1ef2 <ParserAppData+0xe>
    202c:	790b      	ldrb	r3, [r1, #4]
    202e:	2b1e      	cmp	r3, #30
    2030:	d900      	bls.n	2034 <STACK_SIZE+0x34>
    2032:	e75e      	b.n	1ef2 <ParserAppData+0xe>
    2034:	009b      	lsls	r3, r3, #2
    2036:	4a66      	ldr	r2, [pc, #408]	; (21d0 <STACK_SIZE+0x1d0>)
    2038:	58d3      	ldr	r3, [r2, r3]
    203a:	469f      	mov	pc, r3
    203c:	2109      	movs	r1, #9
    203e:	4865      	ldr	r0, [pc, #404]	; (21d4 <STACK_SIZE+0x1d4>)
    2040:	4b4f      	ldr	r3, [pc, #316]	; (2180 <STACK_SIZE+0x180>)
    2042:	4798      	blx	r3
    2044:	e755      	b.n	1ef2 <ParserAppData+0xe>
    2046:	210b      	movs	r1, #11
    2048:	4863      	ldr	r0, [pc, #396]	; (21d8 <STACK_SIZE+0x1d8>)
    204a:	4b4d      	ldr	r3, [pc, #308]	; (2180 <STACK_SIZE+0x180>)
    204c:	4798      	blx	r3
    204e:	e750      	b.n	1ef2 <ParserAppData+0xe>
    2050:	210d      	movs	r1, #13
    2052:	4862      	ldr	r0, [pc, #392]	; (21dc <STACK_SIZE+0x1dc>)
    2054:	4b4a      	ldr	r3, [pc, #296]	; (2180 <STACK_SIZE+0x180>)
    2056:	4798      	blx	r3
    2058:	e74b      	b.n	1ef2 <ParserAppData+0xe>
    205a:	2110      	movs	r1, #16
    205c:	4860      	ldr	r0, [pc, #384]	; (21e0 <STACK_SIZE+0x1e0>)
    205e:	4b48      	ldr	r3, [pc, #288]	; (2180 <STACK_SIZE+0x180>)
    2060:	4798      	blx	r3
    2062:	e746      	b.n	1ef2 <ParserAppData+0xe>
    2064:	210a      	movs	r1, #10
    2066:	485f      	ldr	r0, [pc, #380]	; (21e4 <STACK_SIZE+0x1e4>)
    2068:	4b45      	ldr	r3, [pc, #276]	; (2180 <STACK_SIZE+0x180>)
    206a:	4798      	blx	r3
    206c:	e741      	b.n	1ef2 <ParserAppData+0xe>
    206e:	210f      	movs	r1, #15
    2070:	485d      	ldr	r0, [pc, #372]	; (21e8 <STACK_SIZE+0x1e8>)
    2072:	4b43      	ldr	r3, [pc, #268]	; (2180 <STACK_SIZE+0x180>)
    2074:	4798      	blx	r3
    2076:	e73c      	b.n	1ef2 <ParserAppData+0xe>
    2078:	2111      	movs	r1, #17
    207a:	485c      	ldr	r0, [pc, #368]	; (21ec <STACK_SIZE+0x1ec>)
    207c:	4b40      	ldr	r3, [pc, #256]	; (2180 <STACK_SIZE+0x180>)
    207e:	4798      	blx	r3
    2080:	e737      	b.n	1ef2 <ParserAppData+0xe>
    2082:	210a      	movs	r1, #10
    2084:	485a      	ldr	r0, [pc, #360]	; (21f0 <STACK_SIZE+0x1f0>)
    2086:	4b3e      	ldr	r3, [pc, #248]	; (2180 <STACK_SIZE+0x180>)
    2088:	4798      	blx	r3
    208a:	e732      	b.n	1ef2 <ParserAppData+0xe>
    208c:	2112      	movs	r1, #18
    208e:	4859      	ldr	r0, [pc, #356]	; (21f4 <STACK_SIZE+0x1f4>)
    2090:	4b3b      	ldr	r3, [pc, #236]	; (2180 <STACK_SIZE+0x180>)
    2092:	4798      	blx	r3
    2094:	e72d      	b.n	1ef2 <ParserAppData+0xe>
    2096:	2110      	movs	r1, #16
    2098:	4857      	ldr	r0, [pc, #348]	; (21f8 <STACK_SIZE+0x1f8>)
    209a:	4b39      	ldr	r3, [pc, #228]	; (2180 <STACK_SIZE+0x180>)
    209c:	4798      	blx	r3
    209e:	e728      	b.n	1ef2 <ParserAppData+0xe>
    20a0:	2112      	movs	r1, #18
    20a2:	4856      	ldr	r0, [pc, #344]	; (21fc <STACK_SIZE+0x1fc>)
    20a4:	4b36      	ldr	r3, [pc, #216]	; (2180 <STACK_SIZE+0x180>)
    20a6:	4798      	blx	r3
    20a8:	e723      	b.n	1ef2 <ParserAppData+0xe>
    20aa:	2109      	movs	r1, #9
    20ac:	4836      	ldr	r0, [pc, #216]	; (2188 <STACK_SIZE+0x188>)
    20ae:	4b34      	ldr	r3, [pc, #208]	; (2180 <STACK_SIZE+0x180>)
    20b0:	4798      	blx	r3
    20b2:	e71e      	b.n	1ef2 <ParserAppData+0xe>
    20b4:	210d      	movs	r1, #13
    20b6:	4835      	ldr	r0, [pc, #212]	; (218c <STACK_SIZE+0x18c>)
    20b8:	4b31      	ldr	r3, [pc, #196]	; (2180 <STACK_SIZE+0x180>)
    20ba:	4798      	blx	r3
    20bc:	e719      	b.n	1ef2 <ParserAppData+0xe>
    20be:	210d      	movs	r1, #13
    20c0:	4833      	ldr	r0, [pc, #204]	; (2190 <STACK_SIZE+0x190>)
    20c2:	4b2f      	ldr	r3, [pc, #188]	; (2180 <STACK_SIZE+0x180>)
    20c4:	4798      	blx	r3
    20c6:	e714      	b.n	1ef2 <ParserAppData+0xe>
    20c8:	2106      	movs	r1, #6
    20ca:	4832      	ldr	r0, [pc, #200]	; (2194 <STACK_SIZE+0x194>)
    20cc:	4b2c      	ldr	r3, [pc, #176]	; (2180 <STACK_SIZE+0x180>)
    20ce:	4798      	blx	r3
    20d0:	e70f      	b.n	1ef2 <ParserAppData+0xe>
    20d2:	211e      	movs	r1, #30
    20d4:	4830      	ldr	r0, [pc, #192]	; (2198 <STACK_SIZE+0x198>)
    20d6:	4b2a      	ldr	r3, [pc, #168]	; (2180 <STACK_SIZE+0x180>)
    20d8:	4798      	blx	r3
    20da:	e70a      	b.n	1ef2 <ParserAppData+0xe>
    20dc:	210d      	movs	r1, #13
    20de:	482f      	ldr	r0, [pc, #188]	; (219c <STACK_SIZE+0x19c>)
    20e0:	4b27      	ldr	r3, [pc, #156]	; (2180 <STACK_SIZE+0x180>)
    20e2:	4798      	blx	r3
    20e4:	e705      	b.n	1ef2 <ParserAppData+0xe>
    20e6:	2109      	movs	r1, #9
    20e8:	482d      	ldr	r0, [pc, #180]	; (21a0 <STACK_SIZE+0x1a0>)
    20ea:	4b25      	ldr	r3, [pc, #148]	; (2180 <STACK_SIZE+0x180>)
    20ec:	4798      	blx	r3
    20ee:	e700      	b.n	1ef2 <ParserAppData+0xe>
    20f0:	210d      	movs	r1, #13
    20f2:	482c      	ldr	r0, [pc, #176]	; (21a4 <STACK_SIZE+0x1a4>)
    20f4:	4b22      	ldr	r3, [pc, #136]	; (2180 <STACK_SIZE+0x180>)
    20f6:	4798      	blx	r3
    20f8:	e6fb      	b.n	1ef2 <ParserAppData+0xe>
    20fa:	2115      	movs	r1, #21
    20fc:	482a      	ldr	r0, [pc, #168]	; (21a8 <STACK_SIZE+0x1a8>)
    20fe:	4b20      	ldr	r3, [pc, #128]	; (2180 <STACK_SIZE+0x180>)
    2100:	4798      	blx	r3
    2102:	e6f6      	b.n	1ef2 <ParserAppData+0xe>
    2104:	210a      	movs	r1, #10
    2106:	4829      	ldr	r0, [pc, #164]	; (21ac <STACK_SIZE+0x1ac>)
    2108:	4b1d      	ldr	r3, [pc, #116]	; (2180 <STACK_SIZE+0x180>)
    210a:	4798      	blx	r3
    210c:	e6f1      	b.n	1ef2 <ParserAppData+0xe>
    210e:	2111      	movs	r1, #17
    2110:	4827      	ldr	r0, [pc, #156]	; (21b0 <STACK_SIZE+0x1b0>)
    2112:	4b1b      	ldr	r3, [pc, #108]	; (2180 <STACK_SIZE+0x180>)
    2114:	4798      	blx	r3
    2116:	e6ec      	b.n	1ef2 <ParserAppData+0xe>
    2118:	210a      	movs	r1, #10
    211a:	4826      	ldr	r0, [pc, #152]	; (21b4 <STACK_SIZE+0x1b4>)
    211c:	4b18      	ldr	r3, [pc, #96]	; (2180 <STACK_SIZE+0x180>)
    211e:	4798      	blx	r3
    2120:	e6e7      	b.n	1ef2 <ParserAppData+0xe>
    2122:	2104      	movs	r1, #4
    2124:	4824      	ldr	r0, [pc, #144]	; (21b8 <STACK_SIZE+0x1b8>)
    2126:	4b16      	ldr	r3, [pc, #88]	; (2180 <STACK_SIZE+0x180>)
    2128:	4798      	blx	r3
    212a:	e6e2      	b.n	1ef2 <ParserAppData+0xe>
    212c:	2107      	movs	r1, #7
    212e:	4823      	ldr	r0, [pc, #140]	; (21bc <STACK_SIZE+0x1bc>)
    2130:	4b13      	ldr	r3, [pc, #76]	; (2180 <STACK_SIZE+0x180>)
    2132:	4798      	blx	r3
    2134:	e6dd      	b.n	1ef2 <ParserAppData+0xe>
    2136:	2110      	movs	r1, #16
    2138:	4821      	ldr	r0, [pc, #132]	; (21c0 <STACK_SIZE+0x1c0>)
    213a:	4b11      	ldr	r3, [pc, #68]	; (2180 <STACK_SIZE+0x180>)
    213c:	4798      	blx	r3
    213e:	e6d8      	b.n	1ef2 <ParserAppData+0xe>
    2140:	2114      	movs	r1, #20
    2142:	4820      	ldr	r0, [pc, #128]	; (21c4 <STACK_SIZE+0x1c4>)
    2144:	4b0e      	ldr	r3, [pc, #56]	; (2180 <STACK_SIZE+0x180>)
    2146:	4798      	blx	r3
    2148:	e6d3      	b.n	1ef2 <ParserAppData+0xe>
    214a:	210f      	movs	r1, #15
    214c:	481e      	ldr	r0, [pc, #120]	; (21c8 <STACK_SIZE+0x1c8>)
    214e:	4b0c      	ldr	r3, [pc, #48]	; (2180 <STACK_SIZE+0x180>)
    2150:	4798      	blx	r3
    2152:	e6ce      	b.n	1ef2 <ParserAppData+0xe>
    2154:	210e      	movs	r1, #14
    2156:	481d      	ldr	r0, [pc, #116]	; (21cc <STACK_SIZE+0x1cc>)
    2158:	4b09      	ldr	r3, [pc, #36]	; (2180 <STACK_SIZE+0x180>)
    215a:	4798      	blx	r3
    215c:	e6c9      	b.n	1ef2 <ParserAppData+0xe>
    215e:	46c0      	nop			; (mov r8, r8)
    2160:	0001f4b4 	.word	0x0001f4b4
    2164:	2000116c 	.word	0x2000116c
    2168:	0001f58c 	.word	0x0001f58c
    216c:	00019d11 	.word	0x00019d11
    2170:	0001a269 	.word	0x0001a269
    2174:	000196bd 	.word	0x000196bd
    2178:	00000212 	.word	0x00000212
    217c:	00004129 	.word	0x00004129
    2180:	00003f31 	.word	0x00003f31
    2184:	0001f594 	.word	0x0001f594
    2188:	0001f5a4 	.word	0x0001f5a4
    218c:	0001f5b0 	.word	0x0001f5b0
    2190:	0001f5c0 	.word	0x0001f5c0
    2194:	0001f5d0 	.word	0x0001f5d0
    2198:	0001f5d8 	.word	0x0001f5d8
    219c:	0001f5f8 	.word	0x0001f5f8
    21a0:	0001f608 	.word	0x0001f608
    21a4:	0001f614 	.word	0x0001f614
    21a8:	0001f624 	.word	0x0001f624
    21ac:	0001f63c 	.word	0x0001f63c
    21b0:	0001f648 	.word	0x0001f648
    21b4:	0001f65c 	.word	0x0001f65c
    21b8:	0001f668 	.word	0x0001f668
    21bc:	0001f670 	.word	0x0001f670
    21c0:	0001f678 	.word	0x0001f678
    21c4:	0001f68c 	.word	0x0001f68c
    21c8:	0001f6a4 	.word	0x0001f6a4
    21cc:	0001f6b4 	.word	0x0001f6b4
    21d0:	0001f510 	.word	0x0001f510
    21d4:	0001f6c4 	.word	0x0001f6c4
    21d8:	0001f6d0 	.word	0x0001f6d0
    21dc:	0001f6dc 	.word	0x0001f6dc
    21e0:	0001f6ec 	.word	0x0001f6ec
    21e4:	0001f700 	.word	0x0001f700
    21e8:	0001f70c 	.word	0x0001f70c
    21ec:	0001f71c 	.word	0x0001f71c
    21f0:	0001f730 	.word	0x0001f730
    21f4:	0001f73c 	.word	0x0001f73c
    21f8:	0001f750 	.word	0x0001f750
    21fc:	0001f764 	.word	0x0001f764

00002200 <Parser_SetConfiguredJoinParameters>:
    2200:	4b01      	ldr	r3, [pc, #4]	; (2208 <Parser_SetConfiguredJoinParameters+0x8>)
    2202:	8018      	strh	r0, [r3, #0]
    2204:	4770      	bx	lr
    2206:	46c0      	nop			; (mov r8, r8)
    2208:	20001f88 	.word	0x20001f88

0000220c <Parser_LorawanInit>:
    220c:	b510      	push	{r4, lr}
    220e:	4904      	ldr	r1, [pc, #16]	; (2220 <Parser_LorawanInit+0x14>)
    2210:	4804      	ldr	r0, [pc, #16]	; (2224 <Parser_LorawanInit+0x18>)
    2212:	4b05      	ldr	r3, [pc, #20]	; (2228 <Parser_LorawanInit+0x1c>)
    2214:	4798      	blx	r3
    2216:	2200      	movs	r2, #0
    2218:	4b04      	ldr	r3, [pc, #16]	; (222c <Parser_LorawanInit+0x20>)
    221a:	801a      	strh	r2, [r3, #0]
    221c:	bd10      	pop	{r4, pc}
    221e:	46c0      	nop			; (mov r8, r8)
    2220:	00001ea1 	.word	0x00001ea1
    2224:	00001ee5 	.word	0x00001ee5
    2228:	000102f5 	.word	0x000102f5
    222c:	20001f88 	.word	0x20001f88

00002230 <Parser_LoraReset>:
    2230:	b5f0      	push	{r4, r5, r6, r7, lr}
    2232:	46d6      	mov	lr, sl
    2234:	4647      	mov	r7, r8
    2236:	b580      	push	{r7, lr}
    2238:	b085      	sub	sp, #20
    223a:	0007      	movs	r7, r0
    223c:	4d2f      	ldr	r5, [pc, #188]	; (22fc <Parser_LoraReset+0xcc>)
    223e:	2400      	movs	r4, #0
    2240:	4b2f      	ldr	r3, [pc, #188]	; (2300 <Parser_LoraReset+0xd0>)
    2242:	469a      	mov	sl, r3
    2244:	b2e3      	uxtb	r3, r4
    2246:	4698      	mov	r8, r3
    2248:	9401      	str	r4, [sp, #4]
    224a:	682e      	ldr	r6, [r5, #0]
    224c:	0031      	movs	r1, r6
    224e:	6838      	ldr	r0, [r7, #0]
    2250:	47d0      	blx	sl
    2252:	2800      	cmp	r0, #0
    2254:	d00d      	beq.n	2272 <Parser_LoraReset+0x42>
    2256:	3401      	adds	r4, #1
    2258:	3504      	adds	r5, #4
    225a:	2c10      	cmp	r4, #16
    225c:	d1f2      	bne.n	2244 <Parser_LoraReset+0x14>
    225e:	3c06      	subs	r4, #6
    2260:	00a4      	lsls	r4, r4, #2
    2262:	4b28      	ldr	r3, [pc, #160]	; (2304 <Parser_LoraReset+0xd4>)
    2264:	58e3      	ldr	r3, [r4, r3]
    2266:	617b      	str	r3, [r7, #20]
    2268:	b005      	add	sp, #20
    226a:	bc0c      	pop	{r2, r3}
    226c:	4690      	mov	r8, r2
    226e:	469a      	mov	sl, r3
    2270:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2272:	ab02      	add	r3, sp, #8
    2274:	1d9c      	adds	r4, r3, #6
    2276:	2300      	movs	r3, #0
    2278:	8023      	strh	r3, [r4, #0]
    227a:	0022      	movs	r2, r4
    227c:	2100      	movs	r1, #0
    227e:	3034      	adds	r0, #52	; 0x34
    2280:	4b21      	ldr	r3, [pc, #132]	; (2308 <Parser_LoraReset+0xd8>)
    2282:	4798      	blx	r3
    2284:	8823      	ldrh	r3, [r4, #0]
    2286:	9a01      	ldr	r2, [sp, #4]
    2288:	4113      	asrs	r3, r2
    228a:	07db      	lsls	r3, r3, #31
    228c:	d405      	bmi.n	229a <Parser_LoraReset+0x6a>
    228e:	0031      	movs	r1, r6
    2290:	481e      	ldr	r0, [pc, #120]	; (230c <Parser_LoraReset+0xdc>)
    2292:	4b1f      	ldr	r3, [pc, #124]	; (2310 <Parser_LoraReset+0xe0>)
    2294:	4798      	blx	r3
    2296:	2416      	movs	r4, #22
    2298:	e7e2      	b.n	2260 <Parser_LoraReset+0x30>
    229a:	4b1e      	ldr	r3, [pc, #120]	; (2314 <Parser_LoraReset+0xe4>)
    229c:	4798      	blx	r3
    229e:	2800      	cmp	r0, #0
    22a0:	d018      	beq.n	22d4 <Parser_LoraReset+0xa4>
    22a2:	ab02      	add	r3, sp, #8
    22a4:	1d5c      	adds	r4, r3, #5
    22a6:	23ff      	movs	r3, #255	; 0xff
    22a8:	7023      	strb	r3, [r4, #0]
    22aa:	4b1b      	ldr	r3, [pc, #108]	; (2318 <Parser_LoraReset+0xe8>)
    22ac:	4798      	blx	r3
    22ae:	0022      	movs	r2, r4
    22b0:	2100      	movs	r1, #0
    22b2:	2023      	movs	r0, #35	; 0x23
    22b4:	4b14      	ldr	r3, [pc, #80]	; (2308 <Parser_LoraReset+0xd8>)
    22b6:	4798      	blx	r3
    22b8:	7823      	ldrb	r3, [r4, #0]
    22ba:	4543      	cmp	r3, r8
    22bc:	d013      	beq.n	22e6 <Parser_LoraReset+0xb6>
    22be:	4b17      	ldr	r3, [pc, #92]	; (231c <Parser_LoraReset+0xec>)
    22c0:	4798      	blx	r3
    22c2:	4640      	mov	r0, r8
    22c4:	4b16      	ldr	r3, [pc, #88]	; (2320 <Parser_LoraReset+0xf0>)
    22c6:	4798      	blx	r3
    22c8:	0004      	movs	r4, r0
    22ca:	2808      	cmp	r0, #8
    22cc:	d10f      	bne.n	22ee <Parser_LoraReset+0xbe>
    22ce:	4b15      	ldr	r3, [pc, #84]	; (2324 <Parser_LoraReset+0xf4>)
    22d0:	4798      	blx	r3
    22d2:	e00e      	b.n	22f2 <Parser_LoraReset+0xc2>
    22d4:	4640      	mov	r0, r8
    22d6:	4b12      	ldr	r3, [pc, #72]	; (2320 <Parser_LoraReset+0xf0>)
    22d8:	4798      	blx	r3
    22da:	0004      	movs	r4, r0
    22dc:	2808      	cmp	r0, #8
    22de:	d108      	bne.n	22f2 <Parser_LoraReset+0xc2>
    22e0:	4b10      	ldr	r3, [pc, #64]	; (2324 <Parser_LoraReset+0xf4>)
    22e2:	4798      	blx	r3
    22e4:	e005      	b.n	22f2 <Parser_LoraReset+0xc2>
    22e6:	4640      	mov	r0, r8
    22e8:	4b0d      	ldr	r3, [pc, #52]	; (2320 <Parser_LoraReset+0xf0>)
    22ea:	4798      	blx	r3
    22ec:	0004      	movs	r4, r0
    22ee:	4b0a      	ldr	r3, [pc, #40]	; (2318 <Parser_LoraReset+0xe8>)
    22f0:	4798      	blx	r3
    22f2:	2200      	movs	r2, #0
    22f4:	4b0c      	ldr	r3, [pc, #48]	; (2328 <Parser_LoraReset+0xf8>)
    22f6:	801a      	strh	r2, [r3, #0]
    22f8:	e7b2      	b.n	2260 <Parser_LoraReset+0x30>
    22fa:	46c0      	nop			; (mov r8, r8)
    22fc:	0001f7ac 	.word	0x0001f7ac
    2300:	000042a1 	.word	0x000042a1
    2304:	0001f820 	.word	0x0001f820
    2308:	00011929 	.word	0x00011929
    230c:	0001f784 	.word	0x0001f784
    2310:	00019ee9 	.word	0x00019ee9
    2314:	0000e111 	.word	0x0000e111
    2318:	0000e175 	.word	0x0000e175
    231c:	0000e159 	.word	0x0000e159
    2320:	00013ea5 	.word	0x00013ea5
    2324:	0000e261 	.word	0x0000e261
    2328:	20001f88 	.word	0x20001f88

0000232c <Parser_LoraJoin>:
    232c:	b510      	push	{r4, lr}
    232e:	0004      	movs	r4, r0
    2330:	4a08      	ldr	r2, [pc, #32]	; (2354 <Parser_LoraJoin+0x28>)
    2332:	4909      	ldr	r1, [pc, #36]	; (2358 <Parser_LoraJoin+0x2c>)
    2334:	6800      	ldr	r0, [r0, #0]
    2336:	4b09      	ldr	r3, [pc, #36]	; (235c <Parser_LoraJoin+0x30>)
    2338:	4798      	blx	r3
    233a:	230a      	movs	r3, #10
    233c:	2801      	cmp	r0, #1
    233e:	d904      	bls.n	234a <Parser_LoraJoin+0x1e>
    2340:	009b      	lsls	r3, r3, #2
    2342:	4a07      	ldr	r2, [pc, #28]	; (2360 <Parser_LoraJoin+0x34>)
    2344:	589b      	ldr	r3, [r3, r2]
    2346:	6163      	str	r3, [r4, #20]
    2348:	bd10      	pop	{r4, pc}
    234a:	4b06      	ldr	r3, [pc, #24]	; (2364 <Parser_LoraJoin+0x38>)
    234c:	4798      	blx	r3
    234e:	0003      	movs	r3, r0
    2350:	e7f6      	b.n	2340 <Parser_LoraJoin+0x14>
    2352:	46c0      	nop			; (mov r8, r8)
    2354:	0001f778 	.word	0x0001f778
    2358:	0001f77c 	.word	0x0001f77c
    235c:	00004365 	.word	0x00004365
    2360:	0001f820 	.word	0x0001f820
    2364:	0001125d 	.word	0x0001125d

00002368 <Parser_LoraSend>:
    2368:	b5f0      	push	{r4, r5, r6, r7, lr}
    236a:	b085      	sub	sp, #20
    236c:	0007      	movs	r7, r0
    236e:	6880      	ldr	r0, [r0, #8]
    2370:	4b1d      	ldr	r3, [pc, #116]	; (23e8 <Parser_LoraSend+0x80>)
    2372:	4798      	blx	r3
    2374:	0004      	movs	r4, r0
    2376:	4a1d      	ldr	r2, [pc, #116]	; (23ec <Parser_LoraSend+0x84>)
    2378:	491d      	ldr	r1, [pc, #116]	; (23f0 <Parser_LoraSend+0x88>)
    237a:	6838      	ldr	r0, [r7, #0]
    237c:	4b1d      	ldr	r3, [pc, #116]	; (23f4 <Parser_LoraSend+0x8c>)
    237e:	4798      	blx	r3
    2380:	9001      	str	r0, [sp, #4]
    2382:	0006      	movs	r6, r0
    2384:	ab02      	add	r3, sp, #8
    2386:	1dd9      	adds	r1, r3, #7
    2388:	6878      	ldr	r0, [r7, #4]
    238a:	4b1b      	ldr	r3, [pc, #108]	; (23f8 <Parser_LoraSend+0x90>)
    238c:	4798      	blx	r3
    238e:	230a      	movs	r3, #10
    2390:	2800      	cmp	r0, #0
    2392:	d005      	beq.n	23a0 <Parser_LoraSend+0x38>
    2394:	b2a4      	uxth	r4, r4
    2396:	0865      	lsrs	r5, r4, #1
    2398:	2dff      	cmp	r5, #255	; 0xff
    239a:	d801      	bhi.n	23a0 <Parser_LoraSend+0x38>
    239c:	2e01      	cmp	r6, #1
    239e:	d905      	bls.n	23ac <Parser_LoraSend+0x44>
    23a0:	009b      	lsls	r3, r3, #2
    23a2:	4a16      	ldr	r2, [pc, #88]	; (23fc <Parser_LoraSend+0x94>)
    23a4:	589b      	ldr	r3, [r3, r2]
    23a6:	617b      	str	r3, [r7, #20]
    23a8:	b005      	add	sp, #20
    23aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    23ac:	68b8      	ldr	r0, [r7, #8]
    23ae:	4b14      	ldr	r3, [pc, #80]	; (2400 <Parser_LoraSend+0x98>)
    23b0:	4798      	blx	r3
    23b2:	230a      	movs	r3, #10
    23b4:	2800      	cmp	r0, #0
    23b6:	d0f3      	beq.n	23a0 <Parser_LoraSend+0x38>
    23b8:	4a12      	ldr	r2, [pc, #72]	; (2404 <Parser_LoraSend+0x9c>)
    23ba:	68b9      	ldr	r1, [r7, #8]
    23bc:	0020      	movs	r0, r4
    23be:	4b12      	ldr	r3, [pc, #72]	; (2408 <Parser_LoraSend+0xa0>)
    23c0:	4798      	blx	r3
    23c2:	07e3      	lsls	r3, r4, #31
    23c4:	d500      	bpl.n	23c8 <Parser_LoraSend+0x60>
    23c6:	3501      	adds	r5, #1
    23c8:	4810      	ldr	r0, [pc, #64]	; (240c <Parser_LoraSend+0xa4>)
    23ca:	466b      	mov	r3, sp
    23cc:	791b      	ldrb	r3, [r3, #4]
    23ce:	7003      	strb	r3, [r0, #0]
    23d0:	ab02      	add	r3, sp, #8
    23d2:	3307      	adds	r3, #7
    23d4:	781b      	ldrb	r3, [r3, #0]
    23d6:	7043      	strb	r3, [r0, #1]
    23d8:	4b0a      	ldr	r3, [pc, #40]	; (2404 <Parser_LoraSend+0x9c>)
    23da:	6043      	str	r3, [r0, #4]
    23dc:	7205      	strb	r5, [r0, #8]
    23de:	4b0c      	ldr	r3, [pc, #48]	; (2410 <Parser_LoraSend+0xa8>)
    23e0:	4798      	blx	r3
    23e2:	0003      	movs	r3, r0
    23e4:	e7dc      	b.n	23a0 <Parser_LoraSend+0x38>
    23e6:	46c0      	nop			; (mov r8, r8)
    23e8:	0001a269 	.word	0x0001a269
    23ec:	0001f7a0 	.word	0x0001f7a0
    23f0:	0001f7a4 	.word	0x0001f7a4
    23f4:	00004365 	.word	0x00004365
    23f8:	00004189 	.word	0x00004189
    23fc:	0001f820 	.word	0x0001f820
    2400:	000040f5 	.word	0x000040f5
    2404:	2000116c 	.word	0x2000116c
    2408:	000043fd 	.word	0x000043fd
    240c:	20001f8c 	.word	0x20001f8c
    2410:	000104cd 	.word	0x000104cd

00002414 <Parser_LoraSetCrtDataRate>:
    2414:	b510      	push	{r4, lr}
    2416:	b082      	sub	sp, #8
    2418:	0004      	movs	r4, r0
    241a:	466b      	mov	r3, sp
    241c:	1dd9      	adds	r1, r3, #7
    241e:	6800      	ldr	r0, [r0, #0]
    2420:	4b08      	ldr	r3, [pc, #32]	; (2444 <Parser_LoraSetCrtDataRate+0x30>)
    2422:	4798      	blx	r3
    2424:	230a      	movs	r3, #10
    2426:	2800      	cmp	r0, #0
    2428:	d105      	bne.n	2436 <Parser_LoraSetCrtDataRate+0x22>
    242a:	009b      	lsls	r3, r3, #2
    242c:	4a06      	ldr	r2, [pc, #24]	; (2448 <Parser_LoraSetCrtDataRate+0x34>)
    242e:	589b      	ldr	r3, [r3, r2]
    2430:	6163      	str	r3, [r4, #20]
    2432:	b002      	add	sp, #8
    2434:	bd10      	pop	{r4, pc}
    2436:	466b      	mov	r3, sp
    2438:	1dd9      	adds	r1, r3, #7
    243a:	2007      	movs	r0, #7
    243c:	4b03      	ldr	r3, [pc, #12]	; (244c <Parser_LoraSetCrtDataRate+0x38>)
    243e:	4798      	blx	r3
    2440:	0003      	movs	r3, r0
    2442:	e7f2      	b.n	242a <Parser_LoraSetCrtDataRate+0x16>
    2444:	00004189 	.word	0x00004189
    2448:	0001f820 	.word	0x0001f820
    244c:	0001396d 	.word	0x0001396d

00002450 <Parser_LoraGetCrtDataRate>:
    2450:	b570      	push	{r4, r5, r6, lr}
    2452:	b082      	sub	sp, #8
    2454:	0006      	movs	r6, r0
    2456:	466b      	mov	r3, sp
    2458:	1ddd      	adds	r5, r3, #7
    245a:	002a      	movs	r2, r5
    245c:	2100      	movs	r1, #0
    245e:	2007      	movs	r0, #7
    2460:	4b05      	ldr	r3, [pc, #20]	; (2478 <Parser_LoraGetCrtDataRate+0x28>)
    2462:	4798      	blx	r3
    2464:	4c05      	ldr	r4, [pc, #20]	; (247c <Parser_LoraGetCrtDataRate+0x2c>)
    2466:	7828      	ldrb	r0, [r5, #0]
    2468:	220a      	movs	r2, #10
    246a:	0021      	movs	r1, r4
    246c:	4b04      	ldr	r3, [pc, #16]	; (2480 <Parser_LoraGetCrtDataRate+0x30>)
    246e:	4798      	blx	r3
    2470:	6174      	str	r4, [r6, #20]
    2472:	b002      	add	sp, #8
    2474:	bd70      	pop	{r4, r5, r6, pc}
    2476:	46c0      	nop			; (mov r8, r8)
    2478:	00011929 	.word	0x00011929
    247c:	2000116c 	.word	0x2000116c
    2480:	000196bd 	.word	0x000196bd

00002484 <Parser_LoraSetAdr>:
    2484:	b510      	push	{r4, lr}
    2486:	b082      	sub	sp, #8
    2488:	0004      	movs	r4, r0
    248a:	6800      	ldr	r0, [r0, #0]
    248c:	4b09      	ldr	r3, [pc, #36]	; (24b4 <Parser_LoraSetAdr+0x30>)
    248e:	4798      	blx	r3
    2490:	466b      	mov	r3, sp
    2492:	71d8      	strb	r0, [r3, #7]
    2494:	230a      	movs	r3, #10
    2496:	2801      	cmp	r0, #1
    2498:	d905      	bls.n	24a6 <Parser_LoraSetAdr+0x22>
    249a:	009b      	lsls	r3, r3, #2
    249c:	4a06      	ldr	r2, [pc, #24]	; (24b8 <Parser_LoraSetAdr+0x34>)
    249e:	589b      	ldr	r3, [r3, r2]
    24a0:	6163      	str	r3, [r4, #20]
    24a2:	b002      	add	sp, #8
    24a4:	bd10      	pop	{r4, pc}
    24a6:	466b      	mov	r3, sp
    24a8:	1dd9      	adds	r1, r3, #7
    24aa:	2006      	movs	r0, #6
    24ac:	4b03      	ldr	r3, [pc, #12]	; (24bc <Parser_LoraSetAdr+0x38>)
    24ae:	4798      	blx	r3
    24b0:	0003      	movs	r3, r0
    24b2:	e7f2      	b.n	249a <Parser_LoraSetAdr+0x16>
    24b4:	00004331 	.word	0x00004331
    24b8:	0001f820 	.word	0x0001f820
    24bc:	0001396d 	.word	0x0001396d

000024c0 <Parser_LoraGetAdr>:
    24c0:	b530      	push	{r4, r5, lr}
    24c2:	b083      	sub	sp, #12
    24c4:	0005      	movs	r5, r0
    24c6:	466b      	mov	r3, sp
    24c8:	1ddc      	adds	r4, r3, #7
    24ca:	0022      	movs	r2, r4
    24cc:	2100      	movs	r1, #0
    24ce:	2006      	movs	r0, #6
    24d0:	4b04      	ldr	r3, [pc, #16]	; (24e4 <Parser_LoraGetAdr+0x24>)
    24d2:	4798      	blx	r3
    24d4:	7823      	ldrb	r3, [r4, #0]
    24d6:	009b      	lsls	r3, r3, #2
    24d8:	4a03      	ldr	r2, [pc, #12]	; (24e8 <Parser_LoraGetAdr+0x28>)
    24da:	589b      	ldr	r3, [r3, r2]
    24dc:	616b      	str	r3, [r5, #20]
    24de:	b003      	add	sp, #12
    24e0:	bd30      	pop	{r4, r5, pc}
    24e2:	46c0      	nop			; (mov r8, r8)
    24e4:	00011929 	.word	0x00011929
    24e8:	0001f800 	.word	0x0001f800

000024ec <Parser_LoraSetDevAddr>:
    24ec:	b510      	push	{r4, lr}
    24ee:	b082      	sub	sp, #8
    24f0:	0004      	movs	r4, r0
    24f2:	6800      	ldr	r0, [r0, #0]
    24f4:	4b14      	ldr	r3, [pc, #80]	; (2548 <Parser_LoraSetDevAddr+0x5c>)
    24f6:	4798      	blx	r3
    24f8:	230a      	movs	r3, #10
    24fa:	2800      	cmp	r0, #0
    24fc:	d105      	bne.n	250a <Parser_LoraSetDevAddr+0x1e>
    24fe:	009b      	lsls	r3, r3, #2
    2500:	4a12      	ldr	r2, [pc, #72]	; (254c <Parser_LoraSetDevAddr+0x60>)
    2502:	589b      	ldr	r3, [r3, r2]
    2504:	6163      	str	r3, [r4, #20]
    2506:	b002      	add	sp, #8
    2508:	bd10      	pop	{r4, pc}
    250a:	aa01      	add	r2, sp, #4
    250c:	6821      	ldr	r1, [r4, #0]
    250e:	2008      	movs	r0, #8
    2510:	4b0f      	ldr	r3, [pc, #60]	; (2550 <Parser_LoraSetDevAddr+0x64>)
    2512:	4798      	blx	r3
    2514:	230a      	movs	r3, #10
    2516:	2800      	cmp	r0, #0
    2518:	d0f1      	beq.n	24fe <Parser_LoraSetDevAddr+0x12>
    251a:	aa01      	add	r2, sp, #4
    251c:	7893      	ldrb	r3, [r2, #2]
    251e:	021b      	lsls	r3, r3, #8
    2520:	7851      	ldrb	r1, [r2, #1]
    2522:	0409      	lsls	r1, r1, #16
    2524:	185b      	adds	r3, r3, r1
    2526:	78d1      	ldrb	r1, [r2, #3]
    2528:	185b      	adds	r3, r3, r1
    252a:	7812      	ldrb	r2, [r2, #0]
    252c:	0612      	lsls	r2, r2, #24
    252e:	189b      	adds	r3, r3, r2
    2530:	9300      	str	r3, [sp, #0]
    2532:	4669      	mov	r1, sp
    2534:	2002      	movs	r0, #2
    2536:	4b07      	ldr	r3, [pc, #28]	; (2554 <Parser_LoraSetDevAddr+0x68>)
    2538:	4798      	blx	r3
    253a:	0003      	movs	r3, r0
    253c:	4906      	ldr	r1, [pc, #24]	; (2558 <Parser_LoraSetDevAddr+0x6c>)
    253e:	780a      	ldrb	r2, [r1, #0]
    2540:	2008      	movs	r0, #8
    2542:	4302      	orrs	r2, r0
    2544:	700a      	strb	r2, [r1, #0]
    2546:	e7da      	b.n	24fe <Parser_LoraSetDevAddr+0x12>
    2548:	000040f5 	.word	0x000040f5
    254c:	0001f820 	.word	0x0001f820
    2550:	000043fd 	.word	0x000043fd
    2554:	0001396d 	.word	0x0001396d
    2558:	20001f88 	.word	0x20001f88

0000255c <Parser_LoraGetDevAddr>:
    255c:	b530      	push	{r4, r5, lr}
    255e:	b083      	sub	sp, #12
    2560:	0005      	movs	r5, r0
    2562:	aa01      	add	r2, sp, #4
    2564:	2100      	movs	r1, #0
    2566:	2002      	movs	r0, #2
    2568:	4b09      	ldr	r3, [pc, #36]	; (2590 <Parser_LoraGetDevAddr+0x34>)
    256a:	4798      	blx	r3
    256c:	9b01      	ldr	r3, [sp, #4]
    256e:	466a      	mov	r2, sp
    2570:	70d3      	strb	r3, [r2, #3]
    2572:	0a1a      	lsrs	r2, r3, #8
    2574:	4669      	mov	r1, sp
    2576:	708a      	strb	r2, [r1, #2]
    2578:	0c1a      	lsrs	r2, r3, #16
    257a:	704a      	strb	r2, [r1, #1]
    257c:	0e1b      	lsrs	r3, r3, #24
    257e:	700b      	strb	r3, [r1, #0]
    2580:	4c04      	ldr	r4, [pc, #16]	; (2594 <Parser_LoraGetDevAddr+0x38>)
    2582:	0022      	movs	r2, r4
    2584:	2004      	movs	r0, #4
    2586:	4b04      	ldr	r3, [pc, #16]	; (2598 <Parser_LoraGetDevAddr+0x3c>)
    2588:	4798      	blx	r3
    258a:	616c      	str	r4, [r5, #20]
    258c:	b003      	add	sp, #12
    258e:	bd30      	pop	{r4, r5, pc}
    2590:	00011929 	.word	0x00011929
    2594:	2000116c 	.word	0x2000116c
    2598:	00004129 	.word	0x00004129

0000259c <Parser_LoraSetDevEui>:
    259c:	b510      	push	{r4, lr}
    259e:	0004      	movs	r4, r0
    25a0:	6800      	ldr	r0, [r0, #0]
    25a2:	4b0e      	ldr	r3, [pc, #56]	; (25dc <Parser_LoraSetDevEui+0x40>)
    25a4:	4798      	blx	r3
    25a6:	230a      	movs	r3, #10
    25a8:	2800      	cmp	r0, #0
    25aa:	d104      	bne.n	25b6 <Parser_LoraSetDevEui+0x1a>
    25ac:	009b      	lsls	r3, r3, #2
    25ae:	4a0c      	ldr	r2, [pc, #48]	; (25e0 <Parser_LoraSetDevEui+0x44>)
    25b0:	589b      	ldr	r3, [r3, r2]
    25b2:	6163      	str	r3, [r4, #20]
    25b4:	bd10      	pop	{r4, pc}
    25b6:	4a0b      	ldr	r2, [pc, #44]	; (25e4 <Parser_LoraSetDevEui+0x48>)
    25b8:	6821      	ldr	r1, [r4, #0]
    25ba:	2010      	movs	r0, #16
    25bc:	4b0a      	ldr	r3, [pc, #40]	; (25e8 <Parser_LoraSetDevEui+0x4c>)
    25be:	4798      	blx	r3
    25c0:	230a      	movs	r3, #10
    25c2:	2800      	cmp	r0, #0
    25c4:	d0f2      	beq.n	25ac <Parser_LoraSetDevEui+0x10>
    25c6:	4907      	ldr	r1, [pc, #28]	; (25e4 <Parser_LoraSetDevEui+0x48>)
    25c8:	2000      	movs	r0, #0
    25ca:	4b08      	ldr	r3, [pc, #32]	; (25ec <Parser_LoraSetDevEui+0x50>)
    25cc:	4798      	blx	r3
    25ce:	0003      	movs	r3, r0
    25d0:	4907      	ldr	r1, [pc, #28]	; (25f0 <Parser_LoraSetDevEui+0x54>)
    25d2:	780a      	ldrb	r2, [r1, #0]
    25d4:	2001      	movs	r0, #1
    25d6:	4302      	orrs	r2, r0
    25d8:	700a      	strb	r2, [r1, #0]
    25da:	e7e7      	b.n	25ac <Parser_LoraSetDevEui+0x10>
    25dc:	000040f5 	.word	0x000040f5
    25e0:	0001f820 	.word	0x0001f820
    25e4:	2000116c 	.word	0x2000116c
    25e8:	000043fd 	.word	0x000043fd
    25ec:	0001396d 	.word	0x0001396d
    25f0:	20001f88 	.word	0x20001f88

000025f4 <Parser_LoraGetDevEui>:
    25f4:	b530      	push	{r4, r5, lr}
    25f6:	b083      	sub	sp, #12
    25f8:	0005      	movs	r5, r0
    25fa:	466a      	mov	r2, sp
    25fc:	2100      	movs	r1, #0
    25fe:	2000      	movs	r0, #0
    2600:	4b05      	ldr	r3, [pc, #20]	; (2618 <Parser_LoraGetDevEui+0x24>)
    2602:	4798      	blx	r3
    2604:	4c05      	ldr	r4, [pc, #20]	; (261c <Parser_LoraGetDevEui+0x28>)
    2606:	0022      	movs	r2, r4
    2608:	4669      	mov	r1, sp
    260a:	2008      	movs	r0, #8
    260c:	4b04      	ldr	r3, [pc, #16]	; (2620 <Parser_LoraGetDevEui+0x2c>)
    260e:	4798      	blx	r3
    2610:	616c      	str	r4, [r5, #20]
    2612:	b003      	add	sp, #12
    2614:	bd30      	pop	{r4, r5, pc}
    2616:	46c0      	nop			; (mov r8, r8)
    2618:	00011929 	.word	0x00011929
    261c:	2000116c 	.word	0x2000116c
    2620:	00004129 	.word	0x00004129

00002624 <Parser_LoraSetJoinEui>:
    2624:	b510      	push	{r4, lr}
    2626:	0004      	movs	r4, r0
    2628:	6800      	ldr	r0, [r0, #0]
    262a:	4b0e      	ldr	r3, [pc, #56]	; (2664 <Parser_LoraSetJoinEui+0x40>)
    262c:	4798      	blx	r3
    262e:	230a      	movs	r3, #10
    2630:	2800      	cmp	r0, #0
    2632:	d104      	bne.n	263e <Parser_LoraSetJoinEui+0x1a>
    2634:	009b      	lsls	r3, r3, #2
    2636:	4a0c      	ldr	r2, [pc, #48]	; (2668 <Parser_LoraSetJoinEui+0x44>)
    2638:	589b      	ldr	r3, [r3, r2]
    263a:	6163      	str	r3, [r4, #20]
    263c:	bd10      	pop	{r4, pc}
    263e:	4a0b      	ldr	r2, [pc, #44]	; (266c <Parser_LoraSetJoinEui+0x48>)
    2640:	6821      	ldr	r1, [r4, #0]
    2642:	2010      	movs	r0, #16
    2644:	4b0a      	ldr	r3, [pc, #40]	; (2670 <Parser_LoraSetJoinEui+0x4c>)
    2646:	4798      	blx	r3
    2648:	230a      	movs	r3, #10
    264a:	2800      	cmp	r0, #0
    264c:	d0f2      	beq.n	2634 <Parser_LoraSetJoinEui+0x10>
    264e:	4907      	ldr	r1, [pc, #28]	; (266c <Parser_LoraSetJoinEui+0x48>)
    2650:	2001      	movs	r0, #1
    2652:	4b08      	ldr	r3, [pc, #32]	; (2674 <Parser_LoraSetJoinEui+0x50>)
    2654:	4798      	blx	r3
    2656:	0003      	movs	r3, r0
    2658:	4907      	ldr	r1, [pc, #28]	; (2678 <Parser_LoraSetJoinEui+0x54>)
    265a:	780a      	ldrb	r2, [r1, #0]
    265c:	2002      	movs	r0, #2
    265e:	4302      	orrs	r2, r0
    2660:	700a      	strb	r2, [r1, #0]
    2662:	e7e7      	b.n	2634 <Parser_LoraSetJoinEui+0x10>
    2664:	000040f5 	.word	0x000040f5
    2668:	0001f820 	.word	0x0001f820
    266c:	2000116c 	.word	0x2000116c
    2670:	000043fd 	.word	0x000043fd
    2674:	0001396d 	.word	0x0001396d
    2678:	20001f88 	.word	0x20001f88

0000267c <Parser_LoraGetJoinEui>:
    267c:	b530      	push	{r4, r5, lr}
    267e:	b083      	sub	sp, #12
    2680:	0005      	movs	r5, r0
    2682:	466a      	mov	r2, sp
    2684:	2100      	movs	r1, #0
    2686:	2001      	movs	r0, #1
    2688:	4b05      	ldr	r3, [pc, #20]	; (26a0 <Parser_LoraGetJoinEui+0x24>)
    268a:	4798      	blx	r3
    268c:	4c05      	ldr	r4, [pc, #20]	; (26a4 <Parser_LoraGetJoinEui+0x28>)
    268e:	0022      	movs	r2, r4
    2690:	4669      	mov	r1, sp
    2692:	2008      	movs	r0, #8
    2694:	4b04      	ldr	r3, [pc, #16]	; (26a8 <Parser_LoraGetJoinEui+0x2c>)
    2696:	4798      	blx	r3
    2698:	616c      	str	r4, [r5, #20]
    269a:	b003      	add	sp, #12
    269c:	bd30      	pop	{r4, r5, pc}
    269e:	46c0      	nop			; (mov r8, r8)
    26a0:	00011929 	.word	0x00011929
    26a4:	2000116c 	.word	0x2000116c
    26a8:	00004129 	.word	0x00004129

000026ac <Parser_LoraSetNwkSKey>:
    26ac:	b510      	push	{r4, lr}
    26ae:	0004      	movs	r4, r0
    26b0:	6800      	ldr	r0, [r0, #0]
    26b2:	4b0e      	ldr	r3, [pc, #56]	; (26ec <Parser_LoraSetNwkSKey+0x40>)
    26b4:	4798      	blx	r3
    26b6:	230a      	movs	r3, #10
    26b8:	2800      	cmp	r0, #0
    26ba:	d104      	bne.n	26c6 <Parser_LoraSetNwkSKey+0x1a>
    26bc:	009b      	lsls	r3, r3, #2
    26be:	4a0c      	ldr	r2, [pc, #48]	; (26f0 <Parser_LoraSetNwkSKey+0x44>)
    26c0:	589b      	ldr	r3, [r3, r2]
    26c2:	6163      	str	r3, [r4, #20]
    26c4:	bd10      	pop	{r4, pc}
    26c6:	4a0b      	ldr	r2, [pc, #44]	; (26f4 <Parser_LoraSetNwkSKey+0x48>)
    26c8:	6821      	ldr	r1, [r4, #0]
    26ca:	2020      	movs	r0, #32
    26cc:	4b0a      	ldr	r3, [pc, #40]	; (26f8 <Parser_LoraSetNwkSKey+0x4c>)
    26ce:	4798      	blx	r3
    26d0:	230a      	movs	r3, #10
    26d2:	2800      	cmp	r0, #0
    26d4:	d0f2      	beq.n	26bc <Parser_LoraSetNwkSKey+0x10>
    26d6:	4907      	ldr	r1, [pc, #28]	; (26f4 <Parser_LoraSetNwkSKey+0x48>)
    26d8:	2004      	movs	r0, #4
    26da:	4b08      	ldr	r3, [pc, #32]	; (26fc <Parser_LoraSetNwkSKey+0x50>)
    26dc:	4798      	blx	r3
    26de:	0003      	movs	r3, r0
    26e0:	4907      	ldr	r1, [pc, #28]	; (2700 <Parser_LoraSetNwkSKey+0x54>)
    26e2:	780a      	ldrb	r2, [r1, #0]
    26e4:	2010      	movs	r0, #16
    26e6:	4302      	orrs	r2, r0
    26e8:	700a      	strb	r2, [r1, #0]
    26ea:	e7e7      	b.n	26bc <Parser_LoraSetNwkSKey+0x10>
    26ec:	000040f5 	.word	0x000040f5
    26f0:	0001f820 	.word	0x0001f820
    26f4:	2000116c 	.word	0x2000116c
    26f8:	000043fd 	.word	0x000043fd
    26fc:	0001396d 	.word	0x0001396d
    2700:	20001f88 	.word	0x20001f88

00002704 <Parser_LoraSetAppSKey>:
    2704:	b510      	push	{r4, lr}
    2706:	0004      	movs	r4, r0
    2708:	6800      	ldr	r0, [r0, #0]
    270a:	4b0e      	ldr	r3, [pc, #56]	; (2744 <Parser_LoraSetAppSKey+0x40>)
    270c:	4798      	blx	r3
    270e:	230a      	movs	r3, #10
    2710:	2800      	cmp	r0, #0
    2712:	d104      	bne.n	271e <Parser_LoraSetAppSKey+0x1a>
    2714:	009b      	lsls	r3, r3, #2
    2716:	4a0c      	ldr	r2, [pc, #48]	; (2748 <Parser_LoraSetAppSKey+0x44>)
    2718:	589b      	ldr	r3, [r3, r2]
    271a:	6163      	str	r3, [r4, #20]
    271c:	bd10      	pop	{r4, pc}
    271e:	4a0b      	ldr	r2, [pc, #44]	; (274c <Parser_LoraSetAppSKey+0x48>)
    2720:	6821      	ldr	r1, [r4, #0]
    2722:	2020      	movs	r0, #32
    2724:	4b0a      	ldr	r3, [pc, #40]	; (2750 <Parser_LoraSetAppSKey+0x4c>)
    2726:	4798      	blx	r3
    2728:	230a      	movs	r3, #10
    272a:	2800      	cmp	r0, #0
    272c:	d0f2      	beq.n	2714 <Parser_LoraSetAppSKey+0x10>
    272e:	4907      	ldr	r1, [pc, #28]	; (274c <Parser_LoraSetAppSKey+0x48>)
    2730:	2005      	movs	r0, #5
    2732:	4b08      	ldr	r3, [pc, #32]	; (2754 <Parser_LoraSetAppSKey+0x50>)
    2734:	4798      	blx	r3
    2736:	0003      	movs	r3, r0
    2738:	4907      	ldr	r1, [pc, #28]	; (2758 <Parser_LoraSetAppSKey+0x54>)
    273a:	780a      	ldrb	r2, [r1, #0]
    273c:	2020      	movs	r0, #32
    273e:	4302      	orrs	r2, r0
    2740:	700a      	strb	r2, [r1, #0]
    2742:	e7e7      	b.n	2714 <Parser_LoraSetAppSKey+0x10>
    2744:	000040f5 	.word	0x000040f5
    2748:	0001f820 	.word	0x0001f820
    274c:	2000116c 	.word	0x2000116c
    2750:	000043fd 	.word	0x000043fd
    2754:	0001396d 	.word	0x0001396d
    2758:	20001f88 	.word	0x20001f88

0000275c <Parser_LoraSetAppKey>:
    275c:	b510      	push	{r4, lr}
    275e:	0004      	movs	r4, r0
    2760:	6800      	ldr	r0, [r0, #0]
    2762:	4b0e      	ldr	r3, [pc, #56]	; (279c <Parser_LoraSetAppKey+0x40>)
    2764:	4798      	blx	r3
    2766:	230a      	movs	r3, #10
    2768:	2800      	cmp	r0, #0
    276a:	d104      	bne.n	2776 <Parser_LoraSetAppKey+0x1a>
    276c:	009b      	lsls	r3, r3, #2
    276e:	4a0c      	ldr	r2, [pc, #48]	; (27a0 <Parser_LoraSetAppKey+0x44>)
    2770:	589b      	ldr	r3, [r3, r2]
    2772:	6163      	str	r3, [r4, #20]
    2774:	bd10      	pop	{r4, pc}
    2776:	4a0b      	ldr	r2, [pc, #44]	; (27a4 <Parser_LoraSetAppKey+0x48>)
    2778:	6821      	ldr	r1, [r4, #0]
    277a:	2020      	movs	r0, #32
    277c:	4b0a      	ldr	r3, [pc, #40]	; (27a8 <Parser_LoraSetAppKey+0x4c>)
    277e:	4798      	blx	r3
    2780:	230a      	movs	r3, #10
    2782:	2800      	cmp	r0, #0
    2784:	d0f2      	beq.n	276c <Parser_LoraSetAppKey+0x10>
    2786:	4907      	ldr	r1, [pc, #28]	; (27a4 <Parser_LoraSetAppKey+0x48>)
    2788:	2003      	movs	r0, #3
    278a:	4b08      	ldr	r3, [pc, #32]	; (27ac <Parser_LoraSetAppKey+0x50>)
    278c:	4798      	blx	r3
    278e:	0003      	movs	r3, r0
    2790:	4907      	ldr	r1, [pc, #28]	; (27b0 <Parser_LoraSetAppKey+0x54>)
    2792:	780a      	ldrb	r2, [r1, #0]
    2794:	2004      	movs	r0, #4
    2796:	4302      	orrs	r2, r0
    2798:	700a      	strb	r2, [r1, #0]
    279a:	e7e7      	b.n	276c <Parser_LoraSetAppKey+0x10>
    279c:	000040f5 	.word	0x000040f5
    27a0:	0001f820 	.word	0x0001f820
    27a4:	2000116c 	.word	0x2000116c
    27a8:	000043fd 	.word	0x000043fd
    27ac:	0001396d 	.word	0x0001396d
    27b0:	20001f88 	.word	0x20001f88

000027b4 <Parser_LoraSetChannelFreq>:
    27b4:	b530      	push	{r4, r5, lr}
    27b6:	b085      	sub	sp, #20
    27b8:	0004      	movs	r4, r0
    27ba:	220a      	movs	r2, #10
    27bc:	2100      	movs	r1, #0
    27be:	6840      	ldr	r0, [r0, #4]
    27c0:	4b14      	ldr	r3, [pc, #80]	; (2814 <Parser_LoraSetChannelFreq+0x60>)
    27c2:	4798      	blx	r3
    27c4:	0005      	movs	r5, r0
    27c6:	2208      	movs	r2, #8
    27c8:	2100      	movs	r1, #0
    27ca:	a801      	add	r0, sp, #4
    27cc:	4b12      	ldr	r3, [pc, #72]	; (2818 <Parser_LoraSetChannelFreq+0x64>)
    27ce:	4798      	blx	r3
    27d0:	210f      	movs	r1, #15
    27d2:	4469      	add	r1, sp
    27d4:	6820      	ldr	r0, [r4, #0]
    27d6:	4b11      	ldr	r3, [pc, #68]	; (281c <Parser_LoraSetChannelFreq+0x68>)
    27d8:	4798      	blx	r3
    27da:	230a      	movs	r3, #10
    27dc:	2800      	cmp	r0, #0
    27de:	d105      	bne.n	27ec <Parser_LoraSetChannelFreq+0x38>
    27e0:	009b      	lsls	r3, r3, #2
    27e2:	4a0f      	ldr	r2, [pc, #60]	; (2820 <Parser_LoraSetChannelFreq+0x6c>)
    27e4:	589b      	ldr	r3, [r3, r2]
    27e6:	6163      	str	r3, [r4, #20]
    27e8:	b005      	add	sp, #20
    27ea:	bd30      	pop	{r4, r5, pc}
    27ec:	2201      	movs	r2, #1
    27ee:	4252      	negs	r2, r2
    27f0:	210a      	movs	r1, #10
    27f2:	6860      	ldr	r0, [r4, #4]
    27f4:	4b0b      	ldr	r3, [pc, #44]	; (2824 <Parser_LoraSetChannelFreq+0x70>)
    27f6:	4798      	blx	r3
    27f8:	230a      	movs	r3, #10
    27fa:	2800      	cmp	r0, #0
    27fc:	d0f0      	beq.n	27e0 <Parser_LoraSetChannelFreq+0x2c>
    27fe:	a901      	add	r1, sp, #4
    2800:	3305      	adds	r3, #5
    2802:	446b      	add	r3, sp
    2804:	781b      	ldrb	r3, [r3, #0]
    2806:	700b      	strb	r3, [r1, #0]
    2808:	604d      	str	r5, [r1, #4]
    280a:	201a      	movs	r0, #26
    280c:	4b06      	ldr	r3, [pc, #24]	; (2828 <Parser_LoraSetChannelFreq+0x74>)
    280e:	4798      	blx	r3
    2810:	0003      	movs	r3, r0
    2812:	e7e5      	b.n	27e0 <Parser_LoraSetChannelFreq+0x2c>
    2814:	0001a575 	.word	0x0001a575
    2818:	00019e35 	.word	0x00019e35
    281c:	00004189 	.word	0x00004189
    2820:	0001f820 	.word	0x0001f820
    2824:	0000425d 	.word	0x0000425d
    2828:	0001396d 	.word	0x0001396d

0000282c <Parser_LoraGetChannelFreq>:
    282c:	b530      	push	{r4, r5, lr}
    282e:	b083      	sub	sp, #12
    2830:	0004      	movs	r4, r0
    2832:	4b0d      	ldr	r3, [pc, #52]	; (2868 <Parser_LoraGetChannelFreq+0x3c>)
    2834:	6143      	str	r3, [r0, #20]
    2836:	466b      	mov	r3, sp
    2838:	1cd9      	adds	r1, r3, #3
    283a:	6800      	ldr	r0, [r0, #0]
    283c:	4b0b      	ldr	r3, [pc, #44]	; (286c <Parser_LoraGetChannelFreq+0x40>)
    283e:	4798      	blx	r3
    2840:	2800      	cmp	r0, #0
    2842:	d101      	bne.n	2848 <Parser_LoraGetChannelFreq+0x1c>
    2844:	b003      	add	sp, #12
    2846:	bd30      	pop	{r4, r5, pc}
    2848:	aa01      	add	r2, sp, #4
    284a:	466b      	mov	r3, sp
    284c:	1cd9      	adds	r1, r3, #3
    284e:	201a      	movs	r0, #26
    2850:	4b07      	ldr	r3, [pc, #28]	; (2870 <Parser_LoraGetChannelFreq+0x44>)
    2852:	4798      	blx	r3
    2854:	2808      	cmp	r0, #8
    2856:	d1f5      	bne.n	2844 <Parser_LoraGetChannelFreq+0x18>
    2858:	4d06      	ldr	r5, [pc, #24]	; (2874 <Parser_LoraGetChannelFreq+0x48>)
    285a:	220a      	movs	r2, #10
    285c:	9901      	ldr	r1, [sp, #4]
    285e:	0028      	movs	r0, r5
    2860:	4b05      	ldr	r3, [pc, #20]	; (2878 <Parser_LoraGetChannelFreq+0x4c>)
    2862:	4798      	blx	r3
    2864:	6165      	str	r5, [r4, #20]
    2866:	e7ed      	b.n	2844 <Parser_LoraGetChannelFreq+0x18>
    2868:	0001f5b0 	.word	0x0001f5b0
    286c:	00004189 	.word	0x00004189
    2870:	00011929 	.word	0x00011929
    2874:	2000116c 	.word	0x2000116c
    2878:	000041e1 	.word	0x000041e1

0000287c <Parser_LoraSetSubBandStatus>:
    287c:	b5f0      	push	{r4, r5, r6, r7, lr}
    287e:	46ce      	mov	lr, r9
    2880:	b500      	push	{lr}
    2882:	b086      	sub	sp, #24
    2884:	0006      	movs	r6, r0
    2886:	6840      	ldr	r0, [r0, #4]
    2888:	4b23      	ldr	r3, [pc, #140]	; (2918 <Parser_LoraSetSubBandStatus+0x9c>)
    288a:	4798      	blx	r3
    288c:	9001      	str	r0, [sp, #4]
    288e:	0005      	movs	r5, r0
    2890:	210f      	movs	r1, #15
    2892:	ab02      	add	r3, sp, #8
    2894:	469c      	mov	ip, r3
    2896:	4461      	add	r1, ip
    2898:	6830      	ldr	r0, [r6, #0]
    289a:	4b20      	ldr	r3, [pc, #128]	; (291c <Parser_LoraSetSubBandStatus+0xa0>)
    289c:	4798      	blx	r3
    289e:	230a      	movs	r3, #10
    28a0:	2800      	cmp	r0, #0
    28a2:	d001      	beq.n	28a8 <Parser_LoraSetSubBandStatus+0x2c>
    28a4:	2d01      	cmp	r5, #1
    28a6:	d907      	bls.n	28b8 <Parser_LoraSetSubBandStatus+0x3c>
    28a8:	009b      	lsls	r3, r3, #2
    28aa:	4a1d      	ldr	r2, [pc, #116]	; (2920 <Parser_LoraSetSubBandStatus+0xa4>)
    28ac:	589b      	ldr	r3, [r3, r2]
    28ae:	6173      	str	r3, [r6, #20]
    28b0:	b006      	add	sp, #24
    28b2:	bc04      	pop	{r2}
    28b4:	4691      	mov	r9, r2
    28b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    28b8:	3305      	adds	r3, #5
    28ba:	aa02      	add	r2, sp, #8
    28bc:	4694      	mov	ip, r2
    28be:	4463      	add	r3, ip
    28c0:	781a      	ldrb	r2, [r3, #0]
    28c2:	1e51      	subs	r1, r2, #1
    28c4:	230a      	movs	r3, #10
    28c6:	2907      	cmp	r1, #7
    28c8:	d8ee      	bhi.n	28a8 <Parser_LoraSetSubBandStatus+0x2c>
    28ca:	00cc      	lsls	r4, r1, #3
    28cc:	b2e4      	uxtb	r4, r4
    28ce:	00d3      	lsls	r3, r2, #3
    28d0:	3b01      	subs	r3, #1
    28d2:	429c      	cmp	r4, r3
    28d4:	dc14      	bgt.n	2900 <Parser_LoraSetSubBandStatus+0x84>
    28d6:	af03      	add	r7, sp, #12
    28d8:	1e6b      	subs	r3, r5, #1
    28da:	419d      	sbcs	r5, r3
    28dc:	4b11      	ldr	r3, [pc, #68]	; (2924 <Parser_LoraSetSubBandStatus+0xa8>)
    28de:	4699      	mov	r9, r3
    28e0:	703c      	strb	r4, [r7, #0]
    28e2:	713d      	strb	r5, [r7, #4]
    28e4:	0039      	movs	r1, r7
    28e6:	201c      	movs	r0, #28
    28e8:	47c8      	blx	r9
    28ea:	3401      	adds	r4, #1
    28ec:	b2e4      	uxtb	r4, r4
    28ee:	230f      	movs	r3, #15
    28f0:	aa02      	add	r2, sp, #8
    28f2:	4694      	mov	ip, r2
    28f4:	4463      	add	r3, ip
    28f6:	781a      	ldrb	r2, [r3, #0]
    28f8:	00d3      	lsls	r3, r2, #3
    28fa:	3b01      	subs	r3, #1
    28fc:	429c      	cmp	r4, r3
    28fe:	ddef      	ble.n	28e0 <Parser_LoraSetSubBandStatus+0x64>
    2900:	a903      	add	r1, sp, #12
    2902:	323f      	adds	r2, #63	; 0x3f
    2904:	700a      	strb	r2, [r1, #0]
    2906:	9a01      	ldr	r2, [sp, #4]
    2908:	1e53      	subs	r3, r2, #1
    290a:	419a      	sbcs	r2, r3
    290c:	710a      	strb	r2, [r1, #4]
    290e:	201c      	movs	r0, #28
    2910:	4b04      	ldr	r3, [pc, #16]	; (2924 <Parser_LoraSetSubBandStatus+0xa8>)
    2912:	4798      	blx	r3
    2914:	0003      	movs	r3, r0
    2916:	e7c7      	b.n	28a8 <Parser_LoraSetSubBandStatus+0x2c>
    2918:	00004331 	.word	0x00004331
    291c:	00004189 	.word	0x00004189
    2920:	0001f820 	.word	0x0001f820
    2924:	0001396d 	.word	0x0001396d

00002928 <Parser_LoraGetSubBandStatus>:
    2928:	b5f0      	push	{r4, r5, r6, r7, lr}
    292a:	46c6      	mov	lr, r8
    292c:	b500      	push	{lr}
    292e:	b082      	sub	sp, #8
    2930:	0006      	movs	r6, r0
    2932:	4b23      	ldr	r3, [pc, #140]	; (29c0 <Parser_LoraGetSubBandStatus+0x98>)
    2934:	6143      	str	r3, [r0, #20]
    2936:	466b      	mov	r3, sp
    2938:	1dd9      	adds	r1, r3, #7
    293a:	6800      	ldr	r0, [r0, #0]
    293c:	4b21      	ldr	r3, [pc, #132]	; (29c4 <Parser_LoraGetSubBandStatus+0x9c>)
    293e:	4798      	blx	r3
    2940:	2800      	cmp	r0, #0
    2942:	d030      	beq.n	29a6 <Parser_LoraGetSubBandStatus+0x7e>
    2944:	466b      	mov	r3, sp
    2946:	79da      	ldrb	r2, [r3, #7]
    2948:	1e53      	subs	r3, r2, #1
    294a:	2b07      	cmp	r3, #7
    294c:	d82b      	bhi.n	29a6 <Parser_LoraGetSubBandStatus+0x7e>
    294e:	00dc      	lsls	r4, r3, #3
    2950:	b2e4      	uxtb	r4, r4
    2952:	00d3      	lsls	r3, r2, #3
    2954:	3b01      	subs	r3, #1
    2956:	429c      	cmp	r4, r3
    2958:	dc1b      	bgt.n	2992 <Parser_LoraGetSubBandStatus+0x6a>
    295a:	466b      	mov	r3, sp
    295c:	1ddd      	adds	r5, r3, #7
    295e:	4f1a      	ldr	r7, [pc, #104]	; (29c8 <Parser_LoraGetSubBandStatus+0xa0>)
    2960:	4b1a      	ldr	r3, [pc, #104]	; (29cc <Parser_LoraGetSubBandStatus+0xa4>)
    2962:	4698      	mov	r8, r3
    2964:	e006      	b.n	2974 <Parser_LoraGetSubBandStatus+0x4c>
    2966:	3401      	adds	r4, #1
    2968:	b2e4      	uxtb	r4, r4
    296a:	782a      	ldrb	r2, [r5, #0]
    296c:	00d3      	lsls	r3, r2, #3
    296e:	3b01      	subs	r3, #1
    2970:	429c      	cmp	r4, r3
    2972:	dc0e      	bgt.n	2992 <Parser_LoraGetSubBandStatus+0x6a>
    2974:	466b      	mov	r3, sp
    2976:	1d9a      	adds	r2, r3, #6
    2978:	0029      	movs	r1, r5
    297a:	201c      	movs	r0, #28
    297c:	47b8      	blx	r7
    297e:	2808      	cmp	r0, #8
    2980:	d1f1      	bne.n	2966 <Parser_LoraGetSubBandStatus+0x3e>
    2982:	466b      	mov	r3, sp
    2984:	3306      	adds	r3, #6
    2986:	781b      	ldrb	r3, [r3, #0]
    2988:	009b      	lsls	r3, r3, #2
    298a:	4642      	mov	r2, r8
    298c:	589b      	ldr	r3, [r3, r2]
    298e:	6173      	str	r3, [r6, #20]
    2990:	e7e9      	b.n	2966 <Parser_LoraGetSubBandStatus+0x3e>
    2992:	466b      	mov	r3, sp
    2994:	1d59      	adds	r1, r3, #5
    2996:	323f      	adds	r2, #63	; 0x3f
    2998:	700a      	strb	r2, [r1, #0]
    299a:	1d9a      	adds	r2, r3, #6
    299c:	201c      	movs	r0, #28
    299e:	4b0a      	ldr	r3, [pc, #40]	; (29c8 <Parser_LoraGetSubBandStatus+0xa0>)
    29a0:	4798      	blx	r3
    29a2:	2808      	cmp	r0, #8
    29a4:	d003      	beq.n	29ae <Parser_LoraGetSubBandStatus+0x86>
    29a6:	b002      	add	sp, #8
    29a8:	bc04      	pop	{r2}
    29aa:	4690      	mov	r8, r2
    29ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
    29ae:	466b      	mov	r3, sp
    29b0:	3306      	adds	r3, #6
    29b2:	781b      	ldrb	r3, [r3, #0]
    29b4:	009b      	lsls	r3, r3, #2
    29b6:	4a05      	ldr	r2, [pc, #20]	; (29cc <Parser_LoraGetSubBandStatus+0xa4>)
    29b8:	589b      	ldr	r3, [r3, r2]
    29ba:	6173      	str	r3, [r6, #20]
    29bc:	e7f3      	b.n	29a6 <Parser_LoraGetSubBandStatus+0x7e>
    29be:	46c0      	nop			; (mov r8, r8)
    29c0:	0001f5b0 	.word	0x0001f5b0
    29c4:	00004189 	.word	0x00004189
    29c8:	00011929 	.word	0x00011929
    29cc:	0001f800 	.word	0x0001f800

000029d0 <Parser_LoraSetChannelStatus>:
    29d0:	b570      	push	{r4, r5, r6, lr}
    29d2:	b084      	sub	sp, #16
    29d4:	0004      	movs	r4, r0
    29d6:	2208      	movs	r2, #8
    29d8:	2100      	movs	r1, #0
    29da:	a801      	add	r0, sp, #4
    29dc:	4b11      	ldr	r3, [pc, #68]	; (2a24 <Parser_LoraSetChannelStatus+0x54>)
    29de:	4798      	blx	r3
    29e0:	6860      	ldr	r0, [r4, #4]
    29e2:	4b11      	ldr	r3, [pc, #68]	; (2a28 <Parser_LoraSetChannelStatus+0x58>)
    29e4:	4798      	blx	r3
    29e6:	0005      	movs	r5, r0
    29e8:	210f      	movs	r1, #15
    29ea:	4469      	add	r1, sp
    29ec:	6820      	ldr	r0, [r4, #0]
    29ee:	4b0f      	ldr	r3, [pc, #60]	; (2a2c <Parser_LoraSetChannelStatus+0x5c>)
    29f0:	4798      	blx	r3
    29f2:	230a      	movs	r3, #10
    29f4:	2800      	cmp	r0, #0
    29f6:	d001      	beq.n	29fc <Parser_LoraSetChannelStatus+0x2c>
    29f8:	2d01      	cmp	r5, #1
    29fa:	d905      	bls.n	2a08 <Parser_LoraSetChannelStatus+0x38>
    29fc:	009b      	lsls	r3, r3, #2
    29fe:	4a0c      	ldr	r2, [pc, #48]	; (2a30 <Parser_LoraSetChannelStatus+0x60>)
    2a00:	589b      	ldr	r3, [r3, r2]
    2a02:	6163      	str	r3, [r4, #20]
    2a04:	b004      	add	sp, #16
    2a06:	bd70      	pop	{r4, r5, r6, pc}
    2a08:	a901      	add	r1, sp, #4
    2a0a:	3305      	adds	r3, #5
    2a0c:	446b      	add	r3, sp
    2a0e:	781b      	ldrb	r3, [r3, #0]
    2a10:	700b      	strb	r3, [r1, #0]
    2a12:	1e6b      	subs	r3, r5, #1
    2a14:	419d      	sbcs	r5, r3
    2a16:	710d      	strb	r5, [r1, #4]
    2a18:	201c      	movs	r0, #28
    2a1a:	4b06      	ldr	r3, [pc, #24]	; (2a34 <Parser_LoraSetChannelStatus+0x64>)
    2a1c:	4798      	blx	r3
    2a1e:	0003      	movs	r3, r0
    2a20:	e7ec      	b.n	29fc <Parser_LoraSetChannelStatus+0x2c>
    2a22:	46c0      	nop			; (mov r8, r8)
    2a24:	00019e35 	.word	0x00019e35
    2a28:	00004331 	.word	0x00004331
    2a2c:	00004189 	.word	0x00004189
    2a30:	0001f820 	.word	0x0001f820
    2a34:	0001396d 	.word	0x0001396d

00002a38 <Parser_LoraGetChannelStatus>:
    2a38:	b510      	push	{r4, lr}
    2a3a:	b082      	sub	sp, #8
    2a3c:	0004      	movs	r4, r0
    2a3e:	4b0d      	ldr	r3, [pc, #52]	; (2a74 <Parser_LoraGetChannelStatus+0x3c>)
    2a40:	6143      	str	r3, [r0, #20]
    2a42:	466b      	mov	r3, sp
    2a44:	1d99      	adds	r1, r3, #6
    2a46:	6800      	ldr	r0, [r0, #0]
    2a48:	4b0b      	ldr	r3, [pc, #44]	; (2a78 <Parser_LoraGetChannelStatus+0x40>)
    2a4a:	4798      	blx	r3
    2a4c:	2800      	cmp	r0, #0
    2a4e:	d101      	bne.n	2a54 <Parser_LoraGetChannelStatus+0x1c>
    2a50:	b002      	add	sp, #8
    2a52:	bd10      	pop	{r4, pc}
    2a54:	466b      	mov	r3, sp
    2a56:	1dda      	adds	r2, r3, #7
    2a58:	1d99      	adds	r1, r3, #6
    2a5a:	201c      	movs	r0, #28
    2a5c:	4b07      	ldr	r3, [pc, #28]	; (2a7c <Parser_LoraGetChannelStatus+0x44>)
    2a5e:	4798      	blx	r3
    2a60:	2808      	cmp	r0, #8
    2a62:	d1f5      	bne.n	2a50 <Parser_LoraGetChannelStatus+0x18>
    2a64:	466b      	mov	r3, sp
    2a66:	3307      	adds	r3, #7
    2a68:	781b      	ldrb	r3, [r3, #0]
    2a6a:	009b      	lsls	r3, r3, #2
    2a6c:	4a04      	ldr	r2, [pc, #16]	; (2a80 <Parser_LoraGetChannelStatus+0x48>)
    2a6e:	589b      	ldr	r3, [r3, r2]
    2a70:	6163      	str	r3, [r4, #20]
    2a72:	e7ed      	b.n	2a50 <Parser_LoraGetChannelStatus+0x18>
    2a74:	0001f5b0 	.word	0x0001f5b0
    2a78:	00004189 	.word	0x00004189
    2a7c:	00011929 	.word	0x00011929
    2a80:	0001f800 	.word	0x0001f800

00002a84 <Parser_LoraSetDatarateRange>:
    2a84:	b510      	push	{r4, lr}
    2a86:	b084      	sub	sp, #16
    2a88:	0004      	movs	r4, r0
    2a8a:	2208      	movs	r2, #8
    2a8c:	2100      	movs	r1, #0
    2a8e:	a801      	add	r0, sp, #4
    2a90:	4b1c      	ldr	r3, [pc, #112]	; (2b04 <Parser_LoraSetDatarateRange+0x80>)
    2a92:	4798      	blx	r3
    2a94:	210f      	movs	r1, #15
    2a96:	4469      	add	r1, sp
    2a98:	6820      	ldr	r0, [r4, #0]
    2a9a:	4b1b      	ldr	r3, [pc, #108]	; (2b08 <Parser_LoraSetDatarateRange+0x84>)
    2a9c:	4798      	blx	r3
    2a9e:	230a      	movs	r3, #10
    2aa0:	2800      	cmp	r0, #0
    2aa2:	d105      	bne.n	2ab0 <Parser_LoraSetDatarateRange+0x2c>
    2aa4:	009b      	lsls	r3, r3, #2
    2aa6:	4a19      	ldr	r2, [pc, #100]	; (2b0c <Parser_LoraSetDatarateRange+0x88>)
    2aa8:	589b      	ldr	r3, [r3, r2]
    2aaa:	6163      	str	r3, [r4, #20]
    2aac:	b004      	add	sp, #16
    2aae:	bd10      	pop	{r4, pc}
    2ab0:	210e      	movs	r1, #14
    2ab2:	4469      	add	r1, sp
    2ab4:	6860      	ldr	r0, [r4, #4]
    2ab6:	4b14      	ldr	r3, [pc, #80]	; (2b08 <Parser_LoraSetDatarateRange+0x84>)
    2ab8:	4798      	blx	r3
    2aba:	230a      	movs	r3, #10
    2abc:	2800      	cmp	r0, #0
    2abe:	d0f1      	beq.n	2aa4 <Parser_LoraSetDatarateRange+0x20>
    2ac0:	210d      	movs	r1, #13
    2ac2:	4469      	add	r1, sp
    2ac4:	68a0      	ldr	r0, [r4, #8]
    2ac6:	4b10      	ldr	r3, [pc, #64]	; (2b08 <Parser_LoraSetDatarateRange+0x84>)
    2ac8:	4798      	blx	r3
    2aca:	230a      	movs	r3, #10
    2acc:	2800      	cmp	r0, #0
    2ace:	d0e9      	beq.n	2aa4 <Parser_LoraSetDatarateRange+0x20>
    2ad0:	3304      	adds	r3, #4
    2ad2:	446b      	add	r3, sp
    2ad4:	7818      	ldrb	r0, [r3, #0]
    2ad6:	230a      	movs	r3, #10
    2ad8:	280f      	cmp	r0, #15
    2ada:	d8e3      	bhi.n	2aa4 <Parser_LoraSetDatarateRange+0x20>
    2adc:	3303      	adds	r3, #3
    2ade:	446b      	add	r3, sp
    2ae0:	781a      	ldrb	r2, [r3, #0]
    2ae2:	230a      	movs	r3, #10
    2ae4:	2a0f      	cmp	r2, #15
    2ae6:	d8dd      	bhi.n	2aa4 <Parser_LoraSetDatarateRange+0x20>
    2ae8:	a901      	add	r1, sp, #4
    2aea:	3305      	adds	r3, #5
    2aec:	446b      	add	r3, sp
    2aee:	781b      	ldrb	r3, [r3, #0]
    2af0:	700b      	strb	r3, [r1, #0]
    2af2:	0112      	lsls	r2, r2, #4
    2af4:	4302      	orrs	r2, r0
    2af6:	710a      	strb	r2, [r1, #4]
    2af8:	201b      	movs	r0, #27
    2afa:	4b05      	ldr	r3, [pc, #20]	; (2b10 <Parser_LoraSetDatarateRange+0x8c>)
    2afc:	4798      	blx	r3
    2afe:	0003      	movs	r3, r0
    2b00:	e7d0      	b.n	2aa4 <Parser_LoraSetDatarateRange+0x20>
    2b02:	46c0      	nop			; (mov r8, r8)
    2b04:	00019e35 	.word	0x00019e35
    2b08:	00004189 	.word	0x00004189
    2b0c:	0001f820 	.word	0x0001f820
    2b10:	0001396d 	.word	0x0001396d

00002b14 <Parser_LoraGetDatarateRange>:
    2b14:	b5f0      	push	{r4, r5, r6, r7, lr}
    2b16:	b083      	sub	sp, #12
    2b18:	0004      	movs	r4, r0
    2b1a:	4b15      	ldr	r3, [pc, #84]	; (2b70 <Parser_LoraGetDatarateRange+0x5c>)
    2b1c:	6143      	str	r3, [r0, #20]
    2b1e:	466b      	mov	r3, sp
    2b20:	1dd9      	adds	r1, r3, #7
    2b22:	6800      	ldr	r0, [r0, #0]
    2b24:	4b13      	ldr	r3, [pc, #76]	; (2b74 <Parser_LoraGetDatarateRange+0x60>)
    2b26:	4798      	blx	r3
    2b28:	2800      	cmp	r0, #0
    2b2a:	d101      	bne.n	2b30 <Parser_LoraGetDatarateRange+0x1c>
    2b2c:	b003      	add	sp, #12
    2b2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2b30:	466b      	mov	r3, sp
    2b32:	1d9a      	adds	r2, r3, #6
    2b34:	1dd9      	adds	r1, r3, #7
    2b36:	201b      	movs	r0, #27
    2b38:	4b0f      	ldr	r3, [pc, #60]	; (2b78 <Parser_LoraGetDatarateRange+0x64>)
    2b3a:	4798      	blx	r3
    2b3c:	2808      	cmp	r0, #8
    2b3e:	d1f5      	bne.n	2b2c <Parser_LoraGetDatarateRange+0x18>
    2b40:	466b      	mov	r3, sp
    2b42:	799e      	ldrb	r6, [r3, #6]
    2b44:	4d0d      	ldr	r5, [pc, #52]	; (2b7c <Parser_LoraGetDatarateRange+0x68>)
    2b46:	3007      	adds	r0, #7
    2b48:	4030      	ands	r0, r6
    2b4a:	220a      	movs	r2, #10
    2b4c:	0029      	movs	r1, r5
    2b4e:	4f0c      	ldr	r7, [pc, #48]	; (2b80 <Parser_LoraGetDatarateRange+0x6c>)
    2b50:	47b8      	blx	r7
    2b52:	0028      	movs	r0, r5
    2b54:	4b0b      	ldr	r3, [pc, #44]	; (2b84 <Parser_LoraGetDatarateRange+0x70>)
    2b56:	4798      	blx	r3
    2b58:	0403      	lsls	r3, r0, #16
    2b5a:	0c1b      	lsrs	r3, r3, #16
    2b5c:	2220      	movs	r2, #32
    2b5e:	54ea      	strb	r2, [r5, r3]
    2b60:	3001      	adds	r0, #1
    2b62:	b281      	uxth	r1, r0
    2b64:	1949      	adds	r1, r1, r5
    2b66:	0930      	lsrs	r0, r6, #4
    2b68:	3a16      	subs	r2, #22
    2b6a:	47b8      	blx	r7
    2b6c:	6165      	str	r5, [r4, #20]
    2b6e:	e7dd      	b.n	2b2c <Parser_LoraGetDatarateRange+0x18>
    2b70:	0001f5b0 	.word	0x0001f5b0
    2b74:	00004189 	.word	0x00004189
    2b78:	00011929 	.word	0x00011929
    2b7c:	2000116c 	.word	0x2000116c
    2b80:	000196bd 	.word	0x000196bd
    2b84:	0001a269 	.word	0x0001a269

00002b88 <Parser_LoraSetTxPower>:
    2b88:	b510      	push	{r4, lr}
    2b8a:	b082      	sub	sp, #8
    2b8c:	0004      	movs	r4, r0
    2b8e:	466b      	mov	r3, sp
    2b90:	1dd9      	adds	r1, r3, #7
    2b92:	6800      	ldr	r0, [r0, #0]
    2b94:	4b08      	ldr	r3, [pc, #32]	; (2bb8 <Parser_LoraSetTxPower+0x30>)
    2b96:	4798      	blx	r3
    2b98:	230a      	movs	r3, #10
    2b9a:	2800      	cmp	r0, #0
    2b9c:	d105      	bne.n	2baa <Parser_LoraSetTxPower+0x22>
    2b9e:	009b      	lsls	r3, r3, #2
    2ba0:	4a06      	ldr	r2, [pc, #24]	; (2bbc <Parser_LoraSetTxPower+0x34>)
    2ba2:	589b      	ldr	r3, [r3, r2]
    2ba4:	6163      	str	r3, [r4, #20]
    2ba6:	b002      	add	sp, #8
    2ba8:	bd10      	pop	{r4, pc}
    2baa:	466b      	mov	r3, sp
    2bac:	1dd9      	adds	r1, r3, #7
    2bae:	2008      	movs	r0, #8
    2bb0:	4b03      	ldr	r3, [pc, #12]	; (2bc0 <Parser_LoraSetTxPower+0x38>)
    2bb2:	4798      	blx	r3
    2bb4:	0003      	movs	r3, r0
    2bb6:	e7f2      	b.n	2b9e <Parser_LoraSetTxPower+0x16>
    2bb8:	00004189 	.word	0x00004189
    2bbc:	0001f820 	.word	0x0001f820
    2bc0:	0001396d 	.word	0x0001396d

00002bc4 <Parser_LoraGetTxPower>:
    2bc4:	b570      	push	{r4, r5, r6, lr}
    2bc6:	b082      	sub	sp, #8
    2bc8:	0006      	movs	r6, r0
    2bca:	466b      	mov	r3, sp
    2bcc:	1ddd      	adds	r5, r3, #7
    2bce:	002a      	movs	r2, r5
    2bd0:	2100      	movs	r1, #0
    2bd2:	2008      	movs	r0, #8
    2bd4:	4b05      	ldr	r3, [pc, #20]	; (2bec <Parser_LoraGetTxPower+0x28>)
    2bd6:	4798      	blx	r3
    2bd8:	4c05      	ldr	r4, [pc, #20]	; (2bf0 <Parser_LoraGetTxPower+0x2c>)
    2bda:	7828      	ldrb	r0, [r5, #0]
    2bdc:	220a      	movs	r2, #10
    2bde:	0021      	movs	r1, r4
    2be0:	4b04      	ldr	r3, [pc, #16]	; (2bf4 <Parser_LoraGetTxPower+0x30>)
    2be2:	4798      	blx	r3
    2be4:	6174      	str	r4, [r6, #20]
    2be6:	b002      	add	sp, #8
    2be8:	bd70      	pop	{r4, r5, r6, pc}
    2bea:	46c0      	nop			; (mov r8, r8)
    2bec:	00011929 	.word	0x00011929
    2bf0:	2000116c 	.word	0x2000116c
    2bf4:	000196bd 	.word	0x000196bd

00002bf8 <Parser_LoraPause>:
    2bf8:	b570      	push	{r4, r5, r6, lr}
    2bfa:	0005      	movs	r5, r0
    2bfc:	4b04      	ldr	r3, [pc, #16]	; (2c10 <Parser_LoraPause+0x18>)
    2bfe:	4798      	blx	r3
    2c00:	0001      	movs	r1, r0
    2c02:	4c04      	ldr	r4, [pc, #16]	; (2c14 <Parser_LoraPause+0x1c>)
    2c04:	220a      	movs	r2, #10
    2c06:	0020      	movs	r0, r4
    2c08:	4b03      	ldr	r3, [pc, #12]	; (2c18 <Parser_LoraPause+0x20>)
    2c0a:	4798      	blx	r3
    2c0c:	616c      	str	r4, [r5, #20]
    2c0e:	bd70      	pop	{r4, r5, r6, pc}
    2c10:	00010609 	.word	0x00010609
    2c14:	2000116c 	.word	0x2000116c
    2c18:	000041e1 	.word	0x000041e1

00002c1c <Parser_LoraResume>:
    2c1c:	b510      	push	{r4, lr}
    2c1e:	0004      	movs	r4, r0
    2c20:	4b02      	ldr	r3, [pc, #8]	; (2c2c <Parser_LoraResume+0x10>)
    2c22:	4798      	blx	r3
    2c24:	4b02      	ldr	r3, [pc, #8]	; (2c30 <Parser_LoraResume+0x14>)
    2c26:	6163      	str	r3, [r4, #20]
    2c28:	bd10      	pop	{r4, pc}
    2c2a:	46c0      	nop			; (mov r8, r8)
    2c2c:	000106cd 	.word	0x000106cd
    2c30:	0001f79c 	.word	0x0001f79c

00002c34 <Parser_LoraSave>:
    2c34:	4b01      	ldr	r3, [pc, #4]	; (2c3c <Parser_LoraSave+0x8>)
    2c36:	6143      	str	r3, [r0, #20]
    2c38:	4770      	bx	lr
    2c3a:	46c0      	nop			; (mov r8, r8)
    2c3c:	0001f79c 	.word	0x0001f79c

00002c40 <Parser_LoraSetRx2WindowParams>:
    2c40:	b530      	push	{r4, r5, lr}
    2c42:	b085      	sub	sp, #20
    2c44:	0004      	movs	r4, r0
    2c46:	220a      	movs	r2, #10
    2c48:	2100      	movs	r1, #0
    2c4a:	6840      	ldr	r0, [r0, #4]
    2c4c:	4b12      	ldr	r3, [pc, #72]	; (2c98 <Parser_LoraSetRx2WindowParams+0x58>)
    2c4e:	4798      	blx	r3
    2c50:	0005      	movs	r5, r0
    2c52:	210f      	movs	r1, #15
    2c54:	4469      	add	r1, sp
    2c56:	6820      	ldr	r0, [r4, #0]
    2c58:	4b10      	ldr	r3, [pc, #64]	; (2c9c <Parser_LoraSetRx2WindowParams+0x5c>)
    2c5a:	4798      	blx	r3
    2c5c:	230a      	movs	r3, #10
    2c5e:	2800      	cmp	r0, #0
    2c60:	d105      	bne.n	2c6e <Parser_LoraSetRx2WindowParams+0x2e>
    2c62:	009b      	lsls	r3, r3, #2
    2c64:	4a0e      	ldr	r2, [pc, #56]	; (2ca0 <Parser_LoraSetRx2WindowParams+0x60>)
    2c66:	589b      	ldr	r3, [r3, r2]
    2c68:	6163      	str	r3, [r4, #20]
    2c6a:	b005      	add	sp, #20
    2c6c:	bd30      	pop	{r4, r5, pc}
    2c6e:	2201      	movs	r2, #1
    2c70:	4252      	negs	r2, r2
    2c72:	210a      	movs	r1, #10
    2c74:	6860      	ldr	r0, [r4, #4]
    2c76:	4b0b      	ldr	r3, [pc, #44]	; (2ca4 <Parser_LoraSetRx2WindowParams+0x64>)
    2c78:	4798      	blx	r3
    2c7a:	230a      	movs	r3, #10
    2c7c:	2800      	cmp	r0, #0
    2c7e:	d0f0      	beq.n	2c62 <Parser_LoraSetRx2WindowParams+0x22>
    2c80:	a901      	add	r1, sp, #4
    2c82:	3305      	adds	r3, #5
    2c84:	446b      	add	r3, sp
    2c86:	781b      	ldrb	r3, [r3, #0]
    2c88:	710b      	strb	r3, [r1, #4]
    2c8a:	9501      	str	r5, [sp, #4]
    2c8c:	2015      	movs	r0, #21
    2c8e:	4b06      	ldr	r3, [pc, #24]	; (2ca8 <Parser_LoraSetRx2WindowParams+0x68>)
    2c90:	4798      	blx	r3
    2c92:	0003      	movs	r3, r0
    2c94:	e7e5      	b.n	2c62 <Parser_LoraSetRx2WindowParams+0x22>
    2c96:	46c0      	nop			; (mov r8, r8)
    2c98:	0001a575 	.word	0x0001a575
    2c9c:	00004189 	.word	0x00004189
    2ca0:	0001f820 	.word	0x0001f820
    2ca4:	0000425d 	.word	0x0000425d
    2ca8:	0001396d 	.word	0x0001396d

00002cac <Parser_LoraGetRx2WindowParams>:
    2cac:	b5f0      	push	{r4, r5, r6, r7, lr}
    2cae:	b083      	sub	sp, #12
    2cb0:	0004      	movs	r4, r0
    2cb2:	4b11      	ldr	r3, [pc, #68]	; (2cf8 <Parser_LoraGetRx2WindowParams+0x4c>)
    2cb4:	6143      	str	r3, [r0, #20]
    2cb6:	466a      	mov	r2, sp
    2cb8:	2100      	movs	r1, #0
    2cba:	2015      	movs	r0, #21
    2cbc:	4b0f      	ldr	r3, [pc, #60]	; (2cfc <Parser_LoraGetRx2WindowParams+0x50>)
    2cbe:	4798      	blx	r3
    2cc0:	2808      	cmp	r0, #8
    2cc2:	d001      	beq.n	2cc8 <Parser_LoraGetRx2WindowParams+0x1c>
    2cc4:	b003      	add	sp, #12
    2cc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2cc8:	9f00      	ldr	r7, [sp, #0]
    2cca:	466b      	mov	r3, sp
    2ccc:	7919      	ldrb	r1, [r3, #4]
    2cce:	4d0c      	ldr	r5, [pc, #48]	; (2d00 <Parser_LoraGetRx2WindowParams+0x54>)
    2cd0:	220a      	movs	r2, #10
    2cd2:	0028      	movs	r0, r5
    2cd4:	4e0b      	ldr	r6, [pc, #44]	; (2d04 <Parser_LoraGetRx2WindowParams+0x58>)
    2cd6:	47b0      	blx	r6
    2cd8:	0028      	movs	r0, r5
    2cda:	4b0b      	ldr	r3, [pc, #44]	; (2d08 <Parser_LoraGetRx2WindowParams+0x5c>)
    2cdc:	4798      	blx	r3
    2cde:	23ff      	movs	r3, #255	; 0xff
    2ce0:	4003      	ands	r3, r0
    2ce2:	2220      	movs	r2, #32
    2ce4:	54ea      	strb	r2, [r5, r3]
    2ce6:	3001      	adds	r0, #1
    2ce8:	b2c0      	uxtb	r0, r0
    2cea:	1940      	adds	r0, r0, r5
    2cec:	3a16      	subs	r2, #22
    2cee:	0039      	movs	r1, r7
    2cf0:	47b0      	blx	r6
    2cf2:	6165      	str	r5, [r4, #20]
    2cf4:	e7e6      	b.n	2cc4 <Parser_LoraGetRx2WindowParams+0x18>
    2cf6:	46c0      	nop			; (mov r8, r8)
    2cf8:	0001f5b0 	.word	0x0001f5b0
    2cfc:	00011929 	.word	0x00011929
    2d00:	2000116c 	.word	0x2000116c
    2d04:	000041e1 	.word	0x000041e1
    2d08:	0001a269 	.word	0x0001a269

00002d0c <Parser_LoraSetLbt>:
    2d0c:	b570      	push	{r4, r5, r6, lr}
    2d0e:	b084      	sub	sp, #16
    2d10:	0004      	movs	r4, r0
    2d12:	6800      	ldr	r0, [r0, #0]
    2d14:	4e0f      	ldr	r6, [pc, #60]	; (2d54 <Parser_LoraSetLbt+0x48>)
    2d16:	47b0      	blx	r6
    2d18:	ad02      	add	r5, sp, #8
    2d1a:	8028      	strh	r0, [r5, #0]
    2d1c:	220a      	movs	r2, #10
    2d1e:	a901      	add	r1, sp, #4
    2d20:	6860      	ldr	r0, [r4, #4]
    2d22:	4b0d      	ldr	r3, [pc, #52]	; (2d58 <Parser_LoraSetLbt+0x4c>)
    2d24:	4798      	blx	r3
    2d26:	8068      	strh	r0, [r5, #2]
    2d28:	68a0      	ldr	r0, [r4, #8]
    2d2a:	47b0      	blx	r6
    2d2c:	80a8      	strh	r0, [r5, #4]
    2d2e:	68e0      	ldr	r0, [r4, #12]
    2d30:	47b0      	blx	r6
    2d32:	71a8      	strb	r0, [r5, #6]
    2d34:	6920      	ldr	r0, [r4, #16]
    2d36:	47b0      	blx	r6
    2d38:	1e43      	subs	r3, r0, #1
    2d3a:	4198      	sbcs	r0, r3
    2d3c:	71e8      	strb	r0, [r5, #7]
    2d3e:	0029      	movs	r1, r5
    2d40:	2027      	movs	r0, #39	; 0x27
    2d42:	4b06      	ldr	r3, [pc, #24]	; (2d5c <Parser_LoraSetLbt+0x50>)
    2d44:	4798      	blx	r3
    2d46:	0080      	lsls	r0, r0, #2
    2d48:	4b05      	ldr	r3, [pc, #20]	; (2d60 <Parser_LoraSetLbt+0x54>)
    2d4a:	58c3      	ldr	r3, [r0, r3]
    2d4c:	6163      	str	r3, [r4, #20]
    2d4e:	b004      	add	sp, #16
    2d50:	bd70      	pop	{r4, r5, r6, pc}
    2d52:	46c0      	nop			; (mov r8, r8)
    2d54:	00019639 	.word	0x00019639
    2d58:	0001a575 	.word	0x0001a575
    2d5c:	0001396d 	.word	0x0001396d
    2d60:	0001f820 	.word	0x0001f820

00002d64 <Parser_LoraGetLbt>:
    2d64:	b5f0      	push	{r4, r5, r6, r7, lr}
    2d66:	46ce      	mov	lr, r9
    2d68:	4647      	mov	r7, r8
    2d6a:	b580      	push	{r7, lr}
    2d6c:	b083      	sub	sp, #12
    2d6e:	0005      	movs	r5, r0
    2d70:	466a      	mov	r2, sp
    2d72:	2100      	movs	r1, #0
    2d74:	2027      	movs	r0, #39	; 0x27
    2d76:	4b27      	ldr	r3, [pc, #156]	; (2e14 <Parser_LoraGetLbt+0xb0>)
    2d78:	4798      	blx	r3
    2d7a:	0082      	lsls	r2, r0, #2
    2d7c:	4b26      	ldr	r3, [pc, #152]	; (2e18 <Parser_LoraGetLbt+0xb4>)
    2d7e:	58d3      	ldr	r3, [r2, r3]
    2d80:	616b      	str	r3, [r5, #20]
    2d82:	2808      	cmp	r0, #8
    2d84:	d004      	beq.n	2d90 <Parser_LoraGetLbt+0x2c>
    2d86:	b003      	add	sp, #12
    2d88:	bc0c      	pop	{r2, r3}
    2d8a:	4690      	mov	r8, r2
    2d8c:	4699      	mov	r9, r3
    2d8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2d90:	466b      	mov	r3, sp
    2d92:	8819      	ldrh	r1, [r3, #0]
    2d94:	4c21      	ldr	r4, [pc, #132]	; (2e1c <Parser_LoraGetLbt+0xb8>)
    2d96:	220a      	movs	r2, #10
    2d98:	0020      	movs	r0, r4
    2d9a:	4e21      	ldr	r6, [pc, #132]	; (2e20 <Parser_LoraGetLbt+0xbc>)
    2d9c:	47b0      	blx	r6
    2d9e:	0020      	movs	r0, r4
    2da0:	4b20      	ldr	r3, [pc, #128]	; (2e24 <Parser_LoraGetLbt+0xc0>)
    2da2:	4699      	mov	r9, r3
    2da4:	4798      	blx	r3
    2da6:	27ff      	movs	r7, #255	; 0xff
    2da8:	003b      	movs	r3, r7
    2daa:	4003      	ands	r3, r0
    2dac:	2220      	movs	r2, #32
    2dae:	4690      	mov	r8, r2
    2db0:	54e2      	strb	r2, [r4, r3]
    2db2:	3001      	adds	r0, #1
    2db4:	b2c1      	uxtb	r1, r0
    2db6:	1909      	adds	r1, r1, r4
    2db8:	466b      	mov	r3, sp
    2dba:	2002      	movs	r0, #2
    2dbc:	5e18      	ldrsh	r0, [r3, r0]
    2dbe:	220a      	movs	r2, #10
    2dc0:	4b19      	ldr	r3, [pc, #100]	; (2e28 <Parser_LoraGetLbt+0xc4>)
    2dc2:	4798      	blx	r3
    2dc4:	0020      	movs	r0, r4
    2dc6:	47c8      	blx	r9
    2dc8:	003b      	movs	r3, r7
    2dca:	4003      	ands	r3, r0
    2dcc:	4642      	mov	r2, r8
    2dce:	54e2      	strb	r2, [r4, r3]
    2dd0:	466b      	mov	r3, sp
    2dd2:	8899      	ldrh	r1, [r3, #4]
    2dd4:	3001      	adds	r0, #1
    2dd6:	b2c0      	uxtb	r0, r0
    2dd8:	1900      	adds	r0, r0, r4
    2dda:	220a      	movs	r2, #10
    2ddc:	47b0      	blx	r6
    2dde:	0020      	movs	r0, r4
    2de0:	47c8      	blx	r9
    2de2:	003b      	movs	r3, r7
    2de4:	4003      	ands	r3, r0
    2de6:	4642      	mov	r2, r8
    2de8:	54e2      	strb	r2, [r4, r3]
    2dea:	466b      	mov	r3, sp
    2dec:	7999      	ldrb	r1, [r3, #6]
    2dee:	3001      	adds	r0, #1
    2df0:	b2c0      	uxtb	r0, r0
    2df2:	1900      	adds	r0, r0, r4
    2df4:	220a      	movs	r2, #10
    2df6:	47b0      	blx	r6
    2df8:	0020      	movs	r0, r4
    2dfa:	47c8      	blx	r9
    2dfc:	4007      	ands	r7, r0
    2dfe:	4643      	mov	r3, r8
    2e00:	55e3      	strb	r3, [r4, r7]
    2e02:	466b      	mov	r3, sp
    2e04:	79d9      	ldrb	r1, [r3, #7]
    2e06:	3001      	adds	r0, #1
    2e08:	b2c0      	uxtb	r0, r0
    2e0a:	1900      	adds	r0, r0, r4
    2e0c:	220a      	movs	r2, #10
    2e0e:	47b0      	blx	r6
    2e10:	616c      	str	r4, [r5, #20]
    2e12:	e7b8      	b.n	2d86 <Parser_LoraGetLbt+0x22>
    2e14:	00011929 	.word	0x00011929
    2e18:	0001f820 	.word	0x0001f820
    2e1c:	2000116c 	.word	0x2000116c
    2e20:	000041e1 	.word	0x000041e1
    2e24:	0001a269 	.word	0x0001a269
    2e28:	000196bd 	.word	0x000196bd

00002e2c <Parser_LoraForceEnable>:
    2e2c:	b510      	push	{r4, lr}
    2e2e:	0004      	movs	r4, r0
    2e30:	4b02      	ldr	r3, [pc, #8]	; (2e3c <Parser_LoraForceEnable+0x10>)
    2e32:	4798      	blx	r3
    2e34:	4b02      	ldr	r3, [pc, #8]	; (2e40 <Parser_LoraForceEnable+0x14>)
    2e36:	6163      	str	r3, [r4, #20]
    2e38:	bd10      	pop	{r4, pc}
    2e3a:	46c0      	nop			; (mov r8, r8)
    2e3c:	000107a5 	.word	0x000107a5
    2e40:	0001f79c 	.word	0x0001f79c

00002e44 <Parser_LoraSetUplinkCounter>:
    2e44:	b510      	push	{r4, lr}
    2e46:	b082      	sub	sp, #8
    2e48:	0004      	movs	r4, r0
    2e4a:	220a      	movs	r2, #10
    2e4c:	2100      	movs	r1, #0
    2e4e:	6800      	ldr	r0, [r0, #0]
    2e50:	4b0b      	ldr	r3, [pc, #44]	; (2e80 <Parser_LoraSetUplinkCounter+0x3c>)
    2e52:	4798      	blx	r3
    2e54:	9001      	str	r0, [sp, #4]
    2e56:	2201      	movs	r2, #1
    2e58:	4252      	negs	r2, r2
    2e5a:	210a      	movs	r1, #10
    2e5c:	6820      	ldr	r0, [r4, #0]
    2e5e:	4b09      	ldr	r3, [pc, #36]	; (2e84 <Parser_LoraSetUplinkCounter+0x40>)
    2e60:	4798      	blx	r3
    2e62:	230a      	movs	r3, #10
    2e64:	2800      	cmp	r0, #0
    2e66:	d105      	bne.n	2e74 <Parser_LoraSetUplinkCounter+0x30>
    2e68:	009b      	lsls	r3, r3, #2
    2e6a:	4a07      	ldr	r2, [pc, #28]	; (2e88 <Parser_LoraSetUplinkCounter+0x44>)
    2e6c:	589b      	ldr	r3, [r3, r2]
    2e6e:	6163      	str	r3, [r4, #20]
    2e70:	b002      	add	sp, #8
    2e72:	bd10      	pop	{r4, pc}
    2e74:	a901      	add	r1, sp, #4
    2e76:	200a      	movs	r0, #10
    2e78:	4b04      	ldr	r3, [pc, #16]	; (2e8c <Parser_LoraSetUplinkCounter+0x48>)
    2e7a:	4798      	blx	r3
    2e7c:	0003      	movs	r3, r0
    2e7e:	e7f3      	b.n	2e68 <Parser_LoraSetUplinkCounter+0x24>
    2e80:	0001a575 	.word	0x0001a575
    2e84:	0000425d 	.word	0x0000425d
    2e88:	0001f820 	.word	0x0001f820
    2e8c:	0001396d 	.word	0x0001396d

00002e90 <Parser_LoraSetDownlinkCounter>:
    2e90:	b510      	push	{r4, lr}
    2e92:	b082      	sub	sp, #8
    2e94:	0004      	movs	r4, r0
    2e96:	220a      	movs	r2, #10
    2e98:	2100      	movs	r1, #0
    2e9a:	6800      	ldr	r0, [r0, #0]
    2e9c:	4b0b      	ldr	r3, [pc, #44]	; (2ecc <Parser_LoraSetDownlinkCounter+0x3c>)
    2e9e:	4798      	blx	r3
    2ea0:	9001      	str	r0, [sp, #4]
    2ea2:	2201      	movs	r2, #1
    2ea4:	4252      	negs	r2, r2
    2ea6:	210a      	movs	r1, #10
    2ea8:	6820      	ldr	r0, [r4, #0]
    2eaa:	4b09      	ldr	r3, [pc, #36]	; (2ed0 <Parser_LoraSetDownlinkCounter+0x40>)
    2eac:	4798      	blx	r3
    2eae:	230a      	movs	r3, #10
    2eb0:	2800      	cmp	r0, #0
    2eb2:	d105      	bne.n	2ec0 <Parser_LoraSetDownlinkCounter+0x30>
    2eb4:	009b      	lsls	r3, r3, #2
    2eb6:	4a07      	ldr	r2, [pc, #28]	; (2ed4 <Parser_LoraSetDownlinkCounter+0x44>)
    2eb8:	589b      	ldr	r3, [r3, r2]
    2eba:	6163      	str	r3, [r4, #20]
    2ebc:	b002      	add	sp, #8
    2ebe:	bd10      	pop	{r4, pc}
    2ec0:	a901      	add	r1, sp, #4
    2ec2:	200b      	movs	r0, #11
    2ec4:	4b04      	ldr	r3, [pc, #16]	; (2ed8 <Parser_LoraSetDownlinkCounter+0x48>)
    2ec6:	4798      	blx	r3
    2ec8:	0003      	movs	r3, r0
    2eca:	e7f3      	b.n	2eb4 <Parser_LoraSetDownlinkCounter+0x24>
    2ecc:	0001a575 	.word	0x0001a575
    2ed0:	0000425d 	.word	0x0000425d
    2ed4:	0001f820 	.word	0x0001f820
    2ed8:	0001396d 	.word	0x0001396d

00002edc <Parser_LoraSetSyncWord>:
    2edc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2ede:	0004      	movs	r4, r0
    2ee0:	6805      	ldr	r5, [r0, #0]
    2ee2:	0028      	movs	r0, r5
    2ee4:	4b10      	ldr	r3, [pc, #64]	; (2f28 <Parser_LoraSetSyncWord+0x4c>)
    2ee6:	4798      	blx	r3
    2ee8:	0006      	movs	r6, r0
    2eea:	0028      	movs	r0, r5
    2eec:	4b0f      	ldr	r3, [pc, #60]	; (2f2c <Parser_LoraSetSyncWord+0x50>)
    2eee:	4798      	blx	r3
    2ef0:	230a      	movs	r3, #10
    2ef2:	2800      	cmp	r0, #0
    2ef4:	d006      	beq.n	2f04 <Parser_LoraSetSyncWord+0x28>
    2ef6:	6827      	ldr	r7, [r4, #0]
    2ef8:	0038      	movs	r0, r7
    2efa:	4b0b      	ldr	r3, [pc, #44]	; (2f28 <Parser_LoraSetSyncWord+0x4c>)
    2efc:	4798      	blx	r3
    2efe:	230a      	movs	r3, #10
    2f00:	2802      	cmp	r0, #2
    2f02:	d004      	beq.n	2f0e <Parser_LoraSetSyncWord+0x32>
    2f04:	009b      	lsls	r3, r3, #2
    2f06:	4a0a      	ldr	r2, [pc, #40]	; (2f30 <Parser_LoraSetSyncWord+0x54>)
    2f08:	589b      	ldr	r3, [r3, r2]
    2f0a:	6163      	str	r3, [r4, #20]
    2f0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2f0e:	4d09      	ldr	r5, [pc, #36]	; (2f34 <Parser_LoraSetSyncWord+0x58>)
    2f10:	b2b0      	uxth	r0, r6
    2f12:	002a      	movs	r2, r5
    2f14:	0039      	movs	r1, r7
    2f16:	4b08      	ldr	r3, [pc, #32]	; (2f38 <Parser_LoraSetSyncWord+0x5c>)
    2f18:	4798      	blx	r3
    2f1a:	0029      	movs	r1, r5
    2f1c:	2009      	movs	r0, #9
    2f1e:	4b07      	ldr	r3, [pc, #28]	; (2f3c <Parser_LoraSetSyncWord+0x60>)
    2f20:	4798      	blx	r3
    2f22:	0003      	movs	r3, r0
    2f24:	e7ee      	b.n	2f04 <Parser_LoraSetSyncWord+0x28>
    2f26:	46c0      	nop			; (mov r8, r8)
    2f28:	0001a269 	.word	0x0001a269
    2f2c:	000040f5 	.word	0x000040f5
    2f30:	0001f820 	.word	0x0001f820
    2f34:	2000116c 	.word	0x2000116c
    2f38:	000043fd 	.word	0x000043fd
    2f3c:	0001396d 	.word	0x0001396d

00002f40 <Parser_LoraGetSyncWord>:
    2f40:	b530      	push	{r4, r5, lr}
    2f42:	b083      	sub	sp, #12
    2f44:	0005      	movs	r5, r0
    2f46:	466b      	mov	r3, sp
    2f48:	1dda      	adds	r2, r3, #7
    2f4a:	2100      	movs	r1, #0
    2f4c:	2009      	movs	r0, #9
    2f4e:	4b06      	ldr	r3, [pc, #24]	; (2f68 <Parser_LoraGetSyncWord+0x28>)
    2f50:	4798      	blx	r3
    2f52:	4c06      	ldr	r4, [pc, #24]	; (2f6c <Parser_LoraGetSyncWord+0x2c>)
    2f54:	0022      	movs	r2, r4
    2f56:	466b      	mov	r3, sp
    2f58:	1dd9      	adds	r1, r3, #7
    2f5a:	2001      	movs	r0, #1
    2f5c:	4b04      	ldr	r3, [pc, #16]	; (2f70 <Parser_LoraGetSyncWord+0x30>)
    2f5e:	4798      	blx	r3
    2f60:	616c      	str	r4, [r5, #20]
    2f62:	b003      	add	sp, #12
    2f64:	bd30      	pop	{r4, r5, pc}
    2f66:	46c0      	nop			; (mov r8, r8)
    2f68:	00011929 	.word	0x00011929
    2f6c:	2000116c 	.word	0x2000116c
    2f70:	00004129 	.word	0x00004129

00002f74 <Parser_LoraGetUplinkCounter>:
    2f74:	b530      	push	{r4, r5, lr}
    2f76:	b083      	sub	sp, #12
    2f78:	0005      	movs	r5, r0
    2f7a:	aa01      	add	r2, sp, #4
    2f7c:	2100      	movs	r1, #0
    2f7e:	200a      	movs	r0, #10
    2f80:	4b05      	ldr	r3, [pc, #20]	; (2f98 <Parser_LoraGetUplinkCounter+0x24>)
    2f82:	4798      	blx	r3
    2f84:	4c05      	ldr	r4, [pc, #20]	; (2f9c <Parser_LoraGetUplinkCounter+0x28>)
    2f86:	220a      	movs	r2, #10
    2f88:	9901      	ldr	r1, [sp, #4]
    2f8a:	0020      	movs	r0, r4
    2f8c:	4b04      	ldr	r3, [pc, #16]	; (2fa0 <Parser_LoraGetUplinkCounter+0x2c>)
    2f8e:	4798      	blx	r3
    2f90:	616c      	str	r4, [r5, #20]
    2f92:	b003      	add	sp, #12
    2f94:	bd30      	pop	{r4, r5, pc}
    2f96:	46c0      	nop			; (mov r8, r8)
    2f98:	00011929 	.word	0x00011929
    2f9c:	2000116c 	.word	0x2000116c
    2fa0:	000041e1 	.word	0x000041e1

00002fa4 <Parser_LoraGetDownlinkCounter>:
    2fa4:	b530      	push	{r4, r5, lr}
    2fa6:	b083      	sub	sp, #12
    2fa8:	0005      	movs	r5, r0
    2faa:	aa01      	add	r2, sp, #4
    2fac:	2100      	movs	r1, #0
    2fae:	200b      	movs	r0, #11
    2fb0:	4b05      	ldr	r3, [pc, #20]	; (2fc8 <Parser_LoraGetDownlinkCounter+0x24>)
    2fb2:	4798      	blx	r3
    2fb4:	4c05      	ldr	r4, [pc, #20]	; (2fcc <Parser_LoraGetDownlinkCounter+0x28>)
    2fb6:	220a      	movs	r2, #10
    2fb8:	9901      	ldr	r1, [sp, #4]
    2fba:	0020      	movs	r0, r4
    2fbc:	4b04      	ldr	r3, [pc, #16]	; (2fd0 <Parser_LoraGetDownlinkCounter+0x2c>)
    2fbe:	4798      	blx	r3
    2fc0:	616c      	str	r4, [r5, #20]
    2fc2:	b003      	add	sp, #12
    2fc4:	bd30      	pop	{r4, r5, pc}
    2fc6:	46c0      	nop			; (mov r8, r8)
    2fc8:	00011929 	.word	0x00011929
    2fcc:	2000116c 	.word	0x2000116c
    2fd0:	000041e1 	.word	0x000041e1

00002fd4 <Parser_LoraLinkCheck>:
    2fd4:	b510      	push	{r4, lr}
    2fd6:	b082      	sub	sp, #8
    2fd8:	0004      	movs	r4, r0
    2fda:	220a      	movs	r2, #10
    2fdc:	2100      	movs	r1, #0
    2fde:	6800      	ldr	r0, [r0, #0]
    2fe0:	4b0c      	ldr	r3, [pc, #48]	; (3014 <Parser_LoraLinkCheck+0x40>)
    2fe2:	4798      	blx	r3
    2fe4:	466b      	mov	r3, sp
    2fe6:	80d8      	strh	r0, [r3, #6]
    2fe8:	4a0b      	ldr	r2, [pc, #44]	; (3018 <Parser_LoraLinkCheck+0x44>)
    2fea:	2105      	movs	r1, #5
    2fec:	6820      	ldr	r0, [r4, #0]
    2fee:	4b0b      	ldr	r3, [pc, #44]	; (301c <Parser_LoraLinkCheck+0x48>)
    2ff0:	4798      	blx	r3
    2ff2:	230a      	movs	r3, #10
    2ff4:	2800      	cmp	r0, #0
    2ff6:	d105      	bne.n	3004 <Parser_LoraLinkCheck+0x30>
    2ff8:	009b      	lsls	r3, r3, #2
    2ffa:	4a09      	ldr	r2, [pc, #36]	; (3020 <Parser_LoraLinkCheck+0x4c>)
    2ffc:	589b      	ldr	r3, [r3, r2]
    2ffe:	6163      	str	r3, [r4, #20]
    3000:	b002      	add	sp, #8
    3002:	bd10      	pop	{r4, pc}
    3004:	466b      	mov	r3, sp
    3006:	1d99      	adds	r1, r3, #6
    3008:	2018      	movs	r0, #24
    300a:	4b06      	ldr	r3, [pc, #24]	; (3024 <Parser_LoraLinkCheck+0x50>)
    300c:	4798      	blx	r3
    300e:	0003      	movs	r3, r0
    3010:	e7f2      	b.n	2ff8 <Parser_LoraLinkCheck+0x24>
    3012:	46c0      	nop			; (mov r8, r8)
    3014:	0001a575 	.word	0x0001a575
    3018:	0000ffff 	.word	0x0000ffff
    301c:	0000425d 	.word	0x0000425d
    3020:	0001f820 	.word	0x0001f820
    3024:	0001396d 	.word	0x0001396d

00003028 <Parser_LoraGetAggregatedDutyCycle>:
    3028:	b570      	push	{r4, r5, r6, lr}
    302a:	b082      	sub	sp, #8
    302c:	0006      	movs	r6, r0
    302e:	466b      	mov	r3, sp
    3030:	1d9d      	adds	r5, r3, #6
    3032:	002a      	movs	r2, r5
    3034:	2100      	movs	r1, #0
    3036:	201f      	movs	r0, #31
    3038:	4b05      	ldr	r3, [pc, #20]	; (3050 <Parser_LoraGetAggregatedDutyCycle+0x28>)
    303a:	4798      	blx	r3
    303c:	4c05      	ldr	r4, [pc, #20]	; (3054 <Parser_LoraGetAggregatedDutyCycle+0x2c>)
    303e:	8828      	ldrh	r0, [r5, #0]
    3040:	220a      	movs	r2, #10
    3042:	0021      	movs	r1, r4
    3044:	4b04      	ldr	r3, [pc, #16]	; (3058 <Parser_LoraGetAggregatedDutyCycle+0x30>)
    3046:	4798      	blx	r3
    3048:	6174      	str	r4, [r6, #20]
    304a:	b002      	add	sp, #8
    304c:	bd70      	pop	{r4, r5, r6, pc}
    304e:	46c0      	nop			; (mov r8, r8)
    3050:	00011929 	.word	0x00011929
    3054:	2000116c 	.word	0x2000116c
    3058:	0001a62d 	.word	0x0001a62d

0000305c <Parser_LoraSetAggregatedDutyCycle>:
    305c:	b510      	push	{r4, lr}
    305e:	b082      	sub	sp, #8
    3060:	0004      	movs	r4, r0
    3062:	6800      	ldr	r0, [r0, #0]
    3064:	4b0c      	ldr	r3, [pc, #48]	; (3098 <Parser_LoraSetAggregatedDutyCycle+0x3c>)
    3066:	4798      	blx	r3
    3068:	466b      	mov	r3, sp
    306a:	80d8      	strh	r0, [r3, #6]
    306c:	22ff      	movs	r2, #255	; 0xff
    306e:	2102      	movs	r1, #2
    3070:	6820      	ldr	r0, [r4, #0]
    3072:	4b0a      	ldr	r3, [pc, #40]	; (309c <Parser_LoraSetAggregatedDutyCycle+0x40>)
    3074:	4798      	blx	r3
    3076:	230a      	movs	r3, #10
    3078:	2800      	cmp	r0, #0
    307a:	d105      	bne.n	3088 <Parser_LoraSetAggregatedDutyCycle+0x2c>
    307c:	009b      	lsls	r3, r3, #2
    307e:	4a08      	ldr	r2, [pc, #32]	; (30a0 <Parser_LoraSetAggregatedDutyCycle+0x44>)
    3080:	589b      	ldr	r3, [r3, r2]
    3082:	6163      	str	r3, [r4, #20]
    3084:	b002      	add	sp, #8
    3086:	bd10      	pop	{r4, pc}
    3088:	466b      	mov	r3, sp
    308a:	1d99      	adds	r1, r3, #6
    308c:	201f      	movs	r0, #31
    308e:	4b05      	ldr	r3, [pc, #20]	; (30a4 <Parser_LoraSetAggregatedDutyCycle+0x48>)
    3090:	4798      	blx	r3
    3092:	0003      	movs	r3, r0
    3094:	e7f2      	b.n	307c <Parser_LoraSetAggregatedDutyCycle+0x20>
    3096:	46c0      	nop			; (mov r8, r8)
    3098:	00019639 	.word	0x00019639
    309c:	0000425d 	.word	0x0000425d
    30a0:	0001f820 	.word	0x0001f820
    30a4:	0001396d 	.word	0x0001396d

000030a8 <Parser_LoraSetCryptoDevEnabled>:
    30a8:	b570      	push	{r4, r5, r6, lr}
    30aa:	b082      	sub	sp, #8
    30ac:	0005      	movs	r5, r0
    30ae:	6800      	ldr	r0, [r0, #0]
    30b0:	4b0d      	ldr	r3, [pc, #52]	; (30e8 <Parser_LoraSetCryptoDevEnabled+0x40>)
    30b2:	4798      	blx	r3
    30b4:	466b      	mov	r3, sp
    30b6:	71d8      	strb	r0, [r3, #7]
    30b8:	240a      	movs	r4, #10
    30ba:	2801      	cmp	r0, #1
    30bc:	d905      	bls.n	30ca <Parser_LoraSetCryptoDevEnabled+0x22>
    30be:	00a4      	lsls	r4, r4, #2
    30c0:	4b0a      	ldr	r3, [pc, #40]	; (30ec <Parser_LoraSetCryptoDevEnabled+0x44>)
    30c2:	58e3      	ldr	r3, [r4, r3]
    30c4:	616b      	str	r3, [r5, #20]
    30c6:	b002      	add	sp, #8
    30c8:	bd70      	pop	{r4, r5, r6, pc}
    30ca:	466b      	mov	r3, sp
    30cc:	1dde      	adds	r6, r3, #7
    30ce:	0031      	movs	r1, r6
    30d0:	203e      	movs	r0, #62	; 0x3e
    30d2:	4b07      	ldr	r3, [pc, #28]	; (30f0 <Parser_LoraSetCryptoDevEnabled+0x48>)
    30d4:	4798      	blx	r3
    30d6:	0004      	movs	r4, r0
    30d8:	7830      	ldrb	r0, [r6, #0]
    30da:	1e43      	subs	r3, r0, #1
    30dc:	4198      	sbcs	r0, r3
    30de:	b2c0      	uxtb	r0, r0
    30e0:	4b04      	ldr	r3, [pc, #16]	; (30f4 <Parser_LoraSetCryptoDevEnabled+0x4c>)
    30e2:	4798      	blx	r3
    30e4:	e7eb      	b.n	30be <Parser_LoraSetCryptoDevEnabled+0x16>
    30e6:	46c0      	nop			; (mov r8, r8)
    30e8:	00004331 	.word	0x00004331
    30ec:	0001f820 	.word	0x0001f820
    30f0:	0001396d 	.word	0x0001396d
    30f4:	0000daf1 	.word	0x0000daf1

000030f8 <Parser_LoraSetTestModeEnabled>:
    30f8:	b510      	push	{r4, lr}
    30fa:	b082      	sub	sp, #8
    30fc:	0004      	movs	r4, r0
    30fe:	6800      	ldr	r0, [r0, #0]
    3100:	4b09      	ldr	r3, [pc, #36]	; (3128 <Parser_LoraSetTestModeEnabled+0x30>)
    3102:	4798      	blx	r3
    3104:	466b      	mov	r3, sp
    3106:	71d8      	strb	r0, [r3, #7]
    3108:	230a      	movs	r3, #10
    310a:	2801      	cmp	r0, #1
    310c:	d905      	bls.n	311a <Parser_LoraSetTestModeEnabled+0x22>
    310e:	009b      	lsls	r3, r3, #2
    3110:	4a06      	ldr	r2, [pc, #24]	; (312c <Parser_LoraSetTestModeEnabled+0x34>)
    3112:	589b      	ldr	r3, [r3, r2]
    3114:	6163      	str	r3, [r4, #20]
    3116:	b002      	add	sp, #8
    3118:	bd10      	pop	{r4, pc}
    311a:	466b      	mov	r3, sp
    311c:	1dd9      	adds	r1, r3, #7
    311e:	2032      	movs	r0, #50	; 0x32
    3120:	4b03      	ldr	r3, [pc, #12]	; (3130 <Parser_LoraSetTestModeEnabled+0x38>)
    3122:	4798      	blx	r3
    3124:	0003      	movs	r3, r0
    3126:	e7f2      	b.n	310e <Parser_LoraSetTestModeEnabled+0x16>
    3128:	00004331 	.word	0x00004331
    312c:	0001f820 	.word	0x0001f820
    3130:	0001396d 	.word	0x0001396d

00003134 <Parser_LoraGetMacStatus>:
    3134:	b530      	push	{r4, r5, lr}
    3136:	b083      	sub	sp, #12
    3138:	0005      	movs	r5, r0
    313a:	aa01      	add	r2, sp, #4
    313c:	2100      	movs	r1, #0
    313e:	2020      	movs	r0, #32
    3140:	4b09      	ldr	r3, [pc, #36]	; (3168 <Parser_LoraGetMacStatus+0x34>)
    3142:	4798      	blx	r3
    3144:	9b01      	ldr	r3, [sp, #4]
    3146:	466a      	mov	r2, sp
    3148:	70d3      	strb	r3, [r2, #3]
    314a:	0a1a      	lsrs	r2, r3, #8
    314c:	4669      	mov	r1, sp
    314e:	708a      	strb	r2, [r1, #2]
    3150:	0c1a      	lsrs	r2, r3, #16
    3152:	704a      	strb	r2, [r1, #1]
    3154:	0e1b      	lsrs	r3, r3, #24
    3156:	700b      	strb	r3, [r1, #0]
    3158:	4c04      	ldr	r4, [pc, #16]	; (316c <Parser_LoraGetMacStatus+0x38>)
    315a:	0022      	movs	r2, r4
    315c:	2004      	movs	r0, #4
    315e:	4b04      	ldr	r3, [pc, #16]	; (3170 <Parser_LoraGetMacStatus+0x3c>)
    3160:	4798      	blx	r3
    3162:	616c      	str	r4, [r5, #20]
    3164:	b003      	add	sp, #12
    3166:	bd30      	pop	{r4, r5, pc}
    3168:	00011929 	.word	0x00011929
    316c:	2000116c 	.word	0x2000116c
    3170:	00004129 	.word	0x00004129

00003174 <Parser_LoraSetBatLevel>:
    3174:	b510      	push	{r4, lr}
    3176:	b082      	sub	sp, #8
    3178:	0004      	movs	r4, r0
    317a:	6800      	ldr	r0, [r0, #0]
    317c:	4b0c      	ldr	r3, [pc, #48]	; (31b0 <Parser_LoraSetBatLevel+0x3c>)
    317e:	4798      	blx	r3
    3180:	466b      	mov	r3, sp
    3182:	71d8      	strb	r0, [r3, #7]
    3184:	22ff      	movs	r2, #255	; 0xff
    3186:	2103      	movs	r1, #3
    3188:	6820      	ldr	r0, [r4, #0]
    318a:	4b0a      	ldr	r3, [pc, #40]	; (31b4 <Parser_LoraSetBatLevel+0x40>)
    318c:	4798      	blx	r3
    318e:	230a      	movs	r3, #10
    3190:	2800      	cmp	r0, #0
    3192:	d105      	bne.n	31a0 <Parser_LoraSetBatLevel+0x2c>
    3194:	009b      	lsls	r3, r3, #2
    3196:	4a08      	ldr	r2, [pc, #32]	; (31b8 <Parser_LoraSetBatLevel+0x44>)
    3198:	589b      	ldr	r3, [r3, r2]
    319a:	6163      	str	r3, [r4, #20]
    319c:	b002      	add	sp, #8
    319e:	bd10      	pop	{r4, pc}
    31a0:	466b      	mov	r3, sp
    31a2:	1dd9      	adds	r1, r3, #7
    31a4:	2017      	movs	r0, #23
    31a6:	4b05      	ldr	r3, [pc, #20]	; (31bc <Parser_LoraSetBatLevel+0x48>)
    31a8:	4798      	blx	r3
    31aa:	0003      	movs	r3, r0
    31ac:	e7f2      	b.n	3194 <Parser_LoraSetBatLevel+0x20>
    31ae:	46c0      	nop			; (mov r8, r8)
    31b0:	00019639 	.word	0x00019639
    31b4:	0000425d 	.word	0x0000425d
    31b8:	0001f820 	.word	0x0001f820
    31bc:	0001396d 	.word	0x0001396d

000031c0 <Parser_LoraSetReTxNb>:
    31c0:	b510      	push	{r4, lr}
    31c2:	b082      	sub	sp, #8
    31c4:	0004      	movs	r4, r0
    31c6:	6800      	ldr	r0, [r0, #0]
    31c8:	4b0c      	ldr	r3, [pc, #48]	; (31fc <Parser_LoraSetReTxNb+0x3c>)
    31ca:	4798      	blx	r3
    31cc:	466b      	mov	r3, sp
    31ce:	71d8      	strb	r0, [r3, #7]
    31d0:	22ff      	movs	r2, #255	; 0xff
    31d2:	2103      	movs	r1, #3
    31d4:	6820      	ldr	r0, [r4, #0]
    31d6:	4b0a      	ldr	r3, [pc, #40]	; (3200 <Parser_LoraSetReTxNb+0x40>)
    31d8:	4798      	blx	r3
    31da:	230a      	movs	r3, #10
    31dc:	2800      	cmp	r0, #0
    31de:	d105      	bne.n	31ec <Parser_LoraSetReTxNb+0x2c>
    31e0:	009b      	lsls	r3, r3, #2
    31e2:	4a08      	ldr	r2, [pc, #32]	; (3204 <Parser_LoraSetReTxNb+0x44>)
    31e4:	589b      	ldr	r3, [r3, r2]
    31e6:	6163      	str	r3, [r4, #20]
    31e8:	b002      	add	sp, #8
    31ea:	bd10      	pop	{r4, pc}
    31ec:	466b      	mov	r3, sp
    31ee:	1dd9      	adds	r1, r3, #7
    31f0:	2013      	movs	r0, #19
    31f2:	4b05      	ldr	r3, [pc, #20]	; (3208 <Parser_LoraSetReTxNb+0x48>)
    31f4:	4798      	blx	r3
    31f6:	0003      	movs	r3, r0
    31f8:	e7f2      	b.n	31e0 <Parser_LoraSetReTxNb+0x20>
    31fa:	46c0      	nop			; (mov r8, r8)
    31fc:	00019639 	.word	0x00019639
    3200:	0000425d 	.word	0x0000425d
    3204:	0001f820 	.word	0x0001f820
    3208:	0001396d 	.word	0x0001396d

0000320c <Parser_LoraSetRepsNb>:
    320c:	b510      	push	{r4, lr}
    320e:	b082      	sub	sp, #8
    3210:	0004      	movs	r4, r0
    3212:	6800      	ldr	r0, [r0, #0]
    3214:	4b0c      	ldr	r3, [pc, #48]	; (3248 <Parser_LoraSetRepsNb+0x3c>)
    3216:	4798      	blx	r3
    3218:	466b      	mov	r3, sp
    321a:	71d8      	strb	r0, [r3, #7]
    321c:	22ff      	movs	r2, #255	; 0xff
    321e:	2103      	movs	r1, #3
    3220:	6820      	ldr	r0, [r4, #0]
    3222:	4b0a      	ldr	r3, [pc, #40]	; (324c <Parser_LoraSetRepsNb+0x40>)
    3224:	4798      	blx	r3
    3226:	230a      	movs	r3, #10
    3228:	2800      	cmp	r0, #0
    322a:	d105      	bne.n	3238 <Parser_LoraSetRepsNb+0x2c>
    322c:	009b      	lsls	r3, r3, #2
    322e:	4a08      	ldr	r2, [pc, #32]	; (3250 <Parser_LoraSetRepsNb+0x44>)
    3230:	589b      	ldr	r3, [r3, r2]
    3232:	6163      	str	r3, [r4, #20]
    3234:	b002      	add	sp, #8
    3236:	bd10      	pop	{r4, pc}
    3238:	466b      	mov	r3, sp
    323a:	1dd9      	adds	r1, r3, #7
    323c:	2014      	movs	r0, #20
    323e:	4b05      	ldr	r3, [pc, #20]	; (3254 <Parser_LoraSetRepsNb+0x48>)
    3240:	4798      	blx	r3
    3242:	0003      	movs	r3, r0
    3244:	e7f2      	b.n	322c <Parser_LoraSetRepsNb+0x20>
    3246:	46c0      	nop			; (mov r8, r8)
    3248:	00019639 	.word	0x00019639
    324c:	0000425d 	.word	0x0000425d
    3250:	0001f820 	.word	0x0001f820
    3254:	0001396d 	.word	0x0001396d

00003258 <Parser_LoraGetReTxNb>:
    3258:	b570      	push	{r4, r5, r6, lr}
    325a:	b082      	sub	sp, #8
    325c:	0006      	movs	r6, r0
    325e:	466b      	mov	r3, sp
    3260:	1ddd      	adds	r5, r3, #7
    3262:	002a      	movs	r2, r5
    3264:	2100      	movs	r1, #0
    3266:	2013      	movs	r0, #19
    3268:	4b05      	ldr	r3, [pc, #20]	; (3280 <Parser_LoraGetReTxNb+0x28>)
    326a:	4798      	blx	r3
    326c:	4c05      	ldr	r4, [pc, #20]	; (3284 <Parser_LoraGetReTxNb+0x2c>)
    326e:	7828      	ldrb	r0, [r5, #0]
    3270:	220a      	movs	r2, #10
    3272:	0021      	movs	r1, r4
    3274:	4b04      	ldr	r3, [pc, #16]	; (3288 <Parser_LoraGetReTxNb+0x30>)
    3276:	4798      	blx	r3
    3278:	6174      	str	r4, [r6, #20]
    327a:	b002      	add	sp, #8
    327c:	bd70      	pop	{r4, r5, r6, pc}
    327e:	46c0      	nop			; (mov r8, r8)
    3280:	00011929 	.word	0x00011929
    3284:	2000116c 	.word	0x2000116c
    3288:	0001a62d 	.word	0x0001a62d

0000328c <Parser_LoraGetRepsNb>:
    328c:	b570      	push	{r4, r5, r6, lr}
    328e:	b082      	sub	sp, #8
    3290:	0006      	movs	r6, r0
    3292:	466b      	mov	r3, sp
    3294:	1ddd      	adds	r5, r3, #7
    3296:	002a      	movs	r2, r5
    3298:	2100      	movs	r1, #0
    329a:	2014      	movs	r0, #20
    329c:	4b05      	ldr	r3, [pc, #20]	; (32b4 <Parser_LoraGetRepsNb+0x28>)
    329e:	4798      	blx	r3
    32a0:	4c05      	ldr	r4, [pc, #20]	; (32b8 <Parser_LoraGetRepsNb+0x2c>)
    32a2:	7828      	ldrb	r0, [r5, #0]
    32a4:	220a      	movs	r2, #10
    32a6:	0021      	movs	r1, r4
    32a8:	4b04      	ldr	r3, [pc, #16]	; (32bc <Parser_LoraGetRepsNb+0x30>)
    32aa:	4798      	blx	r3
    32ac:	6174      	str	r4, [r6, #20]
    32ae:	b002      	add	sp, #8
    32b0:	bd70      	pop	{r4, r5, r6, pc}
    32b2:	46c0      	nop			; (mov r8, r8)
    32b4:	00011929 	.word	0x00011929
    32b8:	2000116c 	.word	0x2000116c
    32bc:	0001a62d 	.word	0x0001a62d

000032c0 <Parser_LoraGetLinkCheckMargin>:
    32c0:	b570      	push	{r4, r5, r6, lr}
    32c2:	b082      	sub	sp, #8
    32c4:	0006      	movs	r6, r0
    32c6:	466b      	mov	r3, sp
    32c8:	1ddd      	adds	r5, r3, #7
    32ca:	002a      	movs	r2, r5
    32cc:	2100      	movs	r1, #0
    32ce:	2021      	movs	r0, #33	; 0x21
    32d0:	4b05      	ldr	r3, [pc, #20]	; (32e8 <Parser_LoraGetLinkCheckMargin+0x28>)
    32d2:	4798      	blx	r3
    32d4:	4c05      	ldr	r4, [pc, #20]	; (32ec <Parser_LoraGetLinkCheckMargin+0x2c>)
    32d6:	7828      	ldrb	r0, [r5, #0]
    32d8:	220a      	movs	r2, #10
    32da:	0021      	movs	r1, r4
    32dc:	4b04      	ldr	r3, [pc, #16]	; (32f0 <Parser_LoraGetLinkCheckMargin+0x30>)
    32de:	4798      	blx	r3
    32e0:	6174      	str	r4, [r6, #20]
    32e2:	b002      	add	sp, #8
    32e4:	bd70      	pop	{r4, r5, r6, pc}
    32e6:	46c0      	nop			; (mov r8, r8)
    32e8:	00011929 	.word	0x00011929
    32ec:	2000116c 	.word	0x2000116c
    32f0:	0001a62d 	.word	0x0001a62d

000032f4 <Parser_LoraGetLinkCheckGwCnt>:
    32f4:	b570      	push	{r4, r5, r6, lr}
    32f6:	b082      	sub	sp, #8
    32f8:	0006      	movs	r6, r0
    32fa:	466b      	mov	r3, sp
    32fc:	1ddd      	adds	r5, r3, #7
    32fe:	002a      	movs	r2, r5
    3300:	2100      	movs	r1, #0
    3302:	2022      	movs	r0, #34	; 0x22
    3304:	4b05      	ldr	r3, [pc, #20]	; (331c <Parser_LoraGetLinkCheckGwCnt+0x28>)
    3306:	4798      	blx	r3
    3308:	4c05      	ldr	r4, [pc, #20]	; (3320 <Parser_LoraGetLinkCheckGwCnt+0x2c>)
    330a:	7828      	ldrb	r0, [r5, #0]
    330c:	220a      	movs	r2, #10
    330e:	0021      	movs	r1, r4
    3310:	4b04      	ldr	r3, [pc, #16]	; (3324 <Parser_LoraGetLinkCheckGwCnt+0x30>)
    3312:	4798      	blx	r3
    3314:	6174      	str	r4, [r6, #20]
    3316:	b002      	add	sp, #8
    3318:	bd70      	pop	{r4, r5, r6, pc}
    331a:	46c0      	nop			; (mov r8, r8)
    331c:	00011929 	.word	0x00011929
    3320:	2000116c 	.word	0x2000116c
    3324:	0001a62d 	.word	0x0001a62d

00003328 <Parser_LoraSetAutoReply>:
    3328:	b510      	push	{r4, lr}
    332a:	b082      	sub	sp, #8
    332c:	0004      	movs	r4, r0
    332e:	6800      	ldr	r0, [r0, #0]
    3330:	4b09      	ldr	r3, [pc, #36]	; (3358 <Parser_LoraSetAutoReply+0x30>)
    3332:	4798      	blx	r3
    3334:	466b      	mov	r3, sp
    3336:	71d8      	strb	r0, [r3, #7]
    3338:	230a      	movs	r3, #10
    333a:	2801      	cmp	r0, #1
    333c:	d905      	bls.n	334a <Parser_LoraSetAutoReply+0x22>
    333e:	009b      	lsls	r3, r3, #2
    3340:	4a06      	ldr	r2, [pc, #24]	; (335c <Parser_LoraSetAutoReply+0x34>)
    3342:	589b      	ldr	r3, [r3, r2]
    3344:	6163      	str	r3, [r4, #20]
    3346:	b002      	add	sp, #8
    3348:	bd10      	pop	{r4, pc}
    334a:	466b      	mov	r3, sp
    334c:	1dd9      	adds	r1, r3, #7
    334e:	2016      	movs	r0, #22
    3350:	4b03      	ldr	r3, [pc, #12]	; (3360 <Parser_LoraSetAutoReply+0x38>)
    3352:	4798      	blx	r3
    3354:	0003      	movs	r3, r0
    3356:	e7f2      	b.n	333e <Parser_LoraSetAutoReply+0x16>
    3358:	00004331 	.word	0x00004331
    335c:	0001f820 	.word	0x0001f820
    3360:	0001396d 	.word	0x0001396d

00003364 <Parser_LoraGetAutoReply>:
    3364:	b530      	push	{r4, r5, lr}
    3366:	b083      	sub	sp, #12
    3368:	0005      	movs	r5, r0
    336a:	466b      	mov	r3, sp
    336c:	1ddc      	adds	r4, r3, #7
    336e:	0022      	movs	r2, r4
    3370:	2100      	movs	r1, #0
    3372:	2016      	movs	r0, #22
    3374:	4b04      	ldr	r3, [pc, #16]	; (3388 <Parser_LoraGetAutoReply+0x24>)
    3376:	4798      	blx	r3
    3378:	7823      	ldrb	r3, [r4, #0]
    337a:	009b      	lsls	r3, r3, #2
    337c:	4a03      	ldr	r2, [pc, #12]	; (338c <Parser_LoraGetAutoReply+0x28>)
    337e:	589b      	ldr	r3, [r3, r2]
    3380:	616b      	str	r3, [r5, #20]
    3382:	b003      	add	sp, #12
    3384:	bd30      	pop	{r4, r5, pc}
    3386:	46c0      	nop			; (mov r8, r8)
    3388:	00011929 	.word	0x00011929
    338c:	0001f800 	.word	0x0001f800

00003390 <Parser_LoraSetRxDelay1>:
    3390:	b510      	push	{r4, lr}
    3392:	b082      	sub	sp, #8
    3394:	0004      	movs	r4, r0
    3396:	6800      	ldr	r0, [r0, #0]
    3398:	4b0c      	ldr	r3, [pc, #48]	; (33cc <Parser_LoraSetRxDelay1+0x3c>)
    339a:	4798      	blx	r3
    339c:	466b      	mov	r3, sp
    339e:	80d8      	strh	r0, [r3, #6]
    33a0:	4a0b      	ldr	r2, [pc, #44]	; (33d0 <Parser_LoraSetRxDelay1+0x40>)
    33a2:	2105      	movs	r1, #5
    33a4:	6820      	ldr	r0, [r4, #0]
    33a6:	4b0b      	ldr	r3, [pc, #44]	; (33d4 <Parser_LoraSetRxDelay1+0x44>)
    33a8:	4798      	blx	r3
    33aa:	230a      	movs	r3, #10
    33ac:	2800      	cmp	r0, #0
    33ae:	d105      	bne.n	33bc <Parser_LoraSetRxDelay1+0x2c>
    33b0:	009b      	lsls	r3, r3, #2
    33b2:	4a09      	ldr	r2, [pc, #36]	; (33d8 <Parser_LoraSetRxDelay1+0x48>)
    33b4:	589b      	ldr	r3, [r3, r2]
    33b6:	6163      	str	r3, [r4, #20]
    33b8:	b002      	add	sp, #8
    33ba:	bd10      	pop	{r4, pc}
    33bc:	466b      	mov	r3, sp
    33be:	1d99      	adds	r1, r3, #6
    33c0:	200c      	movs	r0, #12
    33c2:	4b06      	ldr	r3, [pc, #24]	; (33dc <Parser_LoraSetRxDelay1+0x4c>)
    33c4:	4798      	blx	r3
    33c6:	0003      	movs	r3, r0
    33c8:	e7f2      	b.n	33b0 <Parser_LoraSetRxDelay1+0x20>
    33ca:	46c0      	nop			; (mov r8, r8)
    33cc:	00019639 	.word	0x00019639
    33d0:	0000ffff 	.word	0x0000ffff
    33d4:	0000425d 	.word	0x0000425d
    33d8:	0001f820 	.word	0x0001f820
    33dc:	0001396d 	.word	0x0001396d

000033e0 <Parser_LoraGetRxDelay1>:
    33e0:	b570      	push	{r4, r5, r6, lr}
    33e2:	b082      	sub	sp, #8
    33e4:	0006      	movs	r6, r0
    33e6:	466b      	mov	r3, sp
    33e8:	1d9d      	adds	r5, r3, #6
    33ea:	002a      	movs	r2, r5
    33ec:	2100      	movs	r1, #0
    33ee:	200c      	movs	r0, #12
    33f0:	4b05      	ldr	r3, [pc, #20]	; (3408 <Parser_LoraGetRxDelay1+0x28>)
    33f2:	4798      	blx	r3
    33f4:	4c05      	ldr	r4, [pc, #20]	; (340c <Parser_LoraGetRxDelay1+0x2c>)
    33f6:	8828      	ldrh	r0, [r5, #0]
    33f8:	220a      	movs	r2, #10
    33fa:	0021      	movs	r1, r4
    33fc:	4b04      	ldr	r3, [pc, #16]	; (3410 <Parser_LoraGetRxDelay1+0x30>)
    33fe:	4798      	blx	r3
    3400:	6174      	str	r4, [r6, #20]
    3402:	b002      	add	sp, #8
    3404:	bd70      	pop	{r4, r5, r6, pc}
    3406:	46c0      	nop			; (mov r8, r8)
    3408:	00011929 	.word	0x00011929
    340c:	2000116c 	.word	0x2000116c
    3410:	0001a62d 	.word	0x0001a62d

00003414 <Parser_LoraGetRxDelay2>:
    3414:	b570      	push	{r4, r5, r6, lr}
    3416:	b082      	sub	sp, #8
    3418:	0006      	movs	r6, r0
    341a:	466b      	mov	r3, sp
    341c:	1d9d      	adds	r5, r3, #6
    341e:	002a      	movs	r2, r5
    3420:	2100      	movs	r1, #0
    3422:	201e      	movs	r0, #30
    3424:	4b05      	ldr	r3, [pc, #20]	; (343c <Parser_LoraGetRxDelay2+0x28>)
    3426:	4798      	blx	r3
    3428:	4c05      	ldr	r4, [pc, #20]	; (3440 <Parser_LoraGetRxDelay2+0x2c>)
    342a:	8828      	ldrh	r0, [r5, #0]
    342c:	220a      	movs	r2, #10
    342e:	0021      	movs	r1, r4
    3430:	4b04      	ldr	r3, [pc, #16]	; (3444 <Parser_LoraGetRxDelay2+0x30>)
    3432:	4798      	blx	r3
    3434:	6174      	str	r4, [r6, #20]
    3436:	b002      	add	sp, #8
    3438:	bd70      	pop	{r4, r5, r6, pc}
    343a:	46c0      	nop			; (mov r8, r8)
    343c:	00011929 	.word	0x00011929
    3440:	2000116c 	.word	0x2000116c
    3444:	0001a62d 	.word	0x0001a62d

00003448 <Parser_LoraGetIsm>:
    3448:	b530      	push	{r4, r5, lr}
    344a:	b083      	sub	sp, #12
    344c:	0005      	movs	r5, r0
    344e:	466b      	mov	r3, sp
    3450:	1ddc      	adds	r4, r3, #7
    3452:	0022      	movs	r2, r4
    3454:	2100      	movs	r1, #0
    3456:	2023      	movs	r0, #35	; 0x23
    3458:	4b04      	ldr	r3, [pc, #16]	; (346c <Parser_LoraGetIsm+0x24>)
    345a:	4798      	blx	r3
    345c:	7823      	ldrb	r3, [r4, #0]
    345e:	009b      	lsls	r3, r3, #2
    3460:	4a03      	ldr	r2, [pc, #12]	; (3470 <Parser_LoraGetIsm+0x28>)
    3462:	589b      	ldr	r3, [r3, r2]
    3464:	616b      	str	r3, [r5, #20]
    3466:	b003      	add	sp, #12
    3468:	bd30      	pop	{r4, r5, pc}
    346a:	46c0      	nop			; (mov r8, r8)
    346c:	00011929 	.word	0x00011929
    3470:	0001f7ac 	.word	0x0001f7ac

00003474 <Parser_LoraSetClass>:
    3474:	b510      	push	{r4, lr}
    3476:	b082      	sub	sp, #8
    3478:	0004      	movs	r4, r0
    347a:	6803      	ldr	r3, [r0, #0]
    347c:	781b      	ldrb	r3, [r3, #0]
    347e:	2220      	movs	r2, #32
    3480:	4393      	bics	r3, r2
    3482:	2b41      	cmp	r3, #65	; 0x41
    3484:	d008      	beq.n	3498 <Parser_LoraSetClass+0x24>
    3486:	200a      	movs	r0, #10
    3488:	2b43      	cmp	r3, #67	; 0x43
    348a:	d00d      	beq.n	34a8 <Parser_LoraSetClass+0x34>
    348c:	0080      	lsls	r0, r0, #2
    348e:	4b0a      	ldr	r3, [pc, #40]	; (34b8 <Parser_LoraSetClass+0x44>)
    3490:	58c3      	ldr	r3, [r0, r3]
    3492:	6163      	str	r3, [r4, #20]
    3494:	b002      	add	sp, #8
    3496:	bd10      	pop	{r4, pc}
    3498:	466b      	mov	r3, sp
    349a:	1dd9      	adds	r1, r3, #7
    349c:	2301      	movs	r3, #1
    349e:	700b      	strb	r3, [r1, #0]
    34a0:	2019      	movs	r0, #25
    34a2:	4b06      	ldr	r3, [pc, #24]	; (34bc <Parser_LoraSetClass+0x48>)
    34a4:	4798      	blx	r3
    34a6:	e7f1      	b.n	348c <Parser_LoraSetClass+0x18>
    34a8:	466b      	mov	r3, sp
    34aa:	1dd9      	adds	r1, r3, #7
    34ac:	2304      	movs	r3, #4
    34ae:	700b      	strb	r3, [r1, #0]
    34b0:	300f      	adds	r0, #15
    34b2:	4b02      	ldr	r3, [pc, #8]	; (34bc <Parser_LoraSetClass+0x48>)
    34b4:	4798      	blx	r3
    34b6:	e7e9      	b.n	348c <Parser_LoraSetClass+0x18>
    34b8:	0001f820 	.word	0x0001f820
    34bc:	0001396d 	.word	0x0001396d

000034c0 <Parser_LoraGetClass>:
    34c0:	b530      	push	{r4, r5, lr}
    34c2:	b083      	sub	sp, #12
    34c4:	0005      	movs	r5, r0
    34c6:	466b      	mov	r3, sp
    34c8:	1ddc      	adds	r4, r3, #7
    34ca:	0022      	movs	r2, r4
    34cc:	2100      	movs	r1, #0
    34ce:	2019      	movs	r0, #25
    34d0:	4b0a      	ldr	r3, [pc, #40]	; (34fc <Parser_LoraGetClass+0x3c>)
    34d2:	4798      	blx	r3
    34d4:	7823      	ldrb	r3, [r4, #0]
    34d6:	2b02      	cmp	r3, #2
    34d8:	d005      	beq.n	34e6 <Parser_LoraGetClass+0x26>
    34da:	2b04      	cmp	r3, #4
    34dc:	d00a      	beq.n	34f4 <Parser_LoraGetClass+0x34>
    34de:	2b01      	cmp	r3, #1
    34e0:	d00a      	beq.n	34f8 <Parser_LoraGetClass+0x38>
    34e2:	2303      	movs	r3, #3
    34e4:	e000      	b.n	34e8 <Parser_LoraGetClass+0x28>
    34e6:	2301      	movs	r3, #1
    34e8:	009b      	lsls	r3, r3, #2
    34ea:	4a05      	ldr	r2, [pc, #20]	; (3500 <Parser_LoraGetClass+0x40>)
    34ec:	589b      	ldr	r3, [r3, r2]
    34ee:	616b      	str	r3, [r5, #20]
    34f0:	b003      	add	sp, #12
    34f2:	bd30      	pop	{r4, r5, pc}
    34f4:	2302      	movs	r3, #2
    34f6:	e7f7      	b.n	34e8 <Parser_LoraGetClass+0x28>
    34f8:	2300      	movs	r3, #0
    34fa:	e7f5      	b.n	34e8 <Parser_LoraGetClass+0x28>
    34fc:	00011929 	.word	0x00011929
    3500:	0001f810 	.word	0x0001f810

00003504 <Parser_LoraGetSupportedEdClass>:
    3504:	b530      	push	{r4, r5, lr}
    3506:	b083      	sub	sp, #12
    3508:	0005      	movs	r5, r0
    350a:	466b      	mov	r3, sp
    350c:	1ddc      	adds	r4, r3, #7
    350e:	0022      	movs	r2, r4
    3510:	2100      	movs	r1, #0
    3512:	2024      	movs	r0, #36	; 0x24
    3514:	4b11      	ldr	r3, [pc, #68]	; (355c <Parser_LoraGetSupportedEdClass+0x58>)
    3516:	4798      	blx	r3
    3518:	7823      	ldrb	r3, [r4, #0]
    351a:	2b03      	cmp	r3, #3
    351c:	d00a      	beq.n	3534 <Parser_LoraGetSupportedEdClass+0x30>
    351e:	2b05      	cmp	r3, #5
    3520:	d012      	beq.n	3548 <Parser_LoraGetSupportedEdClass+0x44>
    3522:	4b0f      	ldr	r3, [pc, #60]	; (3560 <Parser_LoraGetSupportedEdClass+0x5c>)
    3524:	2241      	movs	r2, #65	; 0x41
    3526:	701a      	strb	r2, [r3, #0]
    3528:	2200      	movs	r2, #0
    352a:	705a      	strb	r2, [r3, #1]
    352c:	4b0c      	ldr	r3, [pc, #48]	; (3560 <Parser_LoraGetSupportedEdClass+0x5c>)
    352e:	616b      	str	r3, [r5, #20]
    3530:	b003      	add	sp, #12
    3532:	bd30      	pop	{r4, r5, pc}
    3534:	4b0a      	ldr	r3, [pc, #40]	; (3560 <Parser_LoraGetSupportedEdClass+0x5c>)
    3536:	2241      	movs	r2, #65	; 0x41
    3538:	701a      	strb	r2, [r3, #0]
    353a:	3a1b      	subs	r2, #27
    353c:	705a      	strb	r2, [r3, #1]
    353e:	321c      	adds	r2, #28
    3540:	709a      	strb	r2, [r3, #2]
    3542:	2200      	movs	r2, #0
    3544:	70da      	strb	r2, [r3, #3]
    3546:	e7f1      	b.n	352c <Parser_LoraGetSupportedEdClass+0x28>
    3548:	4b05      	ldr	r3, [pc, #20]	; (3560 <Parser_LoraGetSupportedEdClass+0x5c>)
    354a:	2241      	movs	r2, #65	; 0x41
    354c:	701a      	strb	r2, [r3, #0]
    354e:	3a1b      	subs	r2, #27
    3550:	705a      	strb	r2, [r3, #1]
    3552:	321d      	adds	r2, #29
    3554:	709a      	strb	r2, [r3, #2]
    3556:	2200      	movs	r2, #0
    3558:	70da      	strb	r2, [r3, #3]
    355a:	e7e7      	b.n	352c <Parser_LoraGetSupportedEdClass+0x28>
    355c:	00011929 	.word	0x00011929
    3560:	2000116c 	.word	0x2000116c

00003564 <Parser_LoraSetMcast>:
    3564:	b510      	push	{r4, lr}
    3566:	0004      	movs	r4, r0
    3568:	6800      	ldr	r0, [r0, #0]
    356a:	4b05      	ldr	r3, [pc, #20]	; (3580 <Parser_LoraSetMcast+0x1c>)
    356c:	4798      	blx	r3
    356e:	2801      	cmp	r0, #1
    3570:	d902      	bls.n	3578 <Parser_LoraSetMcast+0x14>
    3572:	4b04      	ldr	r3, [pc, #16]	; (3584 <Parser_LoraSetMcast+0x20>)
    3574:	6163      	str	r3, [r4, #20]
    3576:	bd10      	pop	{r4, pc}
    3578:	6860      	ldr	r0, [r4, #4]
    357a:	4b03      	ldr	r3, [pc, #12]	; (3588 <Parser_LoraSetMcast+0x24>)
    357c:	4798      	blx	r3
    357e:	e7f8      	b.n	3572 <Parser_LoraSetMcast+0xe>
    3580:	00004331 	.word	0x00004331
    3584:	0001f5b0 	.word	0x0001f5b0
    3588:	00019639 	.word	0x00019639

0000358c <Parser_LoraGetMcast>:
    358c:	b510      	push	{r4, lr}
    358e:	b082      	sub	sp, #8
    3590:	0004      	movs	r4, r0
    3592:	6800      	ldr	r0, [r0, #0]
    3594:	4b0c      	ldr	r3, [pc, #48]	; (35c8 <Parser_LoraGetMcast+0x3c>)
    3596:	4798      	blx	r3
    3598:	466b      	mov	r3, sp
    359a:	1d99      	adds	r1, r3, #6
    359c:	7008      	strb	r0, [r1, #0]
    359e:	1dda      	adds	r2, r3, #7
    35a0:	2028      	movs	r0, #40	; 0x28
    35a2:	4b0a      	ldr	r3, [pc, #40]	; (35cc <Parser_LoraGetMcast+0x40>)
    35a4:	4798      	blx	r3
    35a6:	2808      	cmp	r0, #8
    35a8:	d005      	beq.n	35b6 <Parser_LoraGetMcast+0x2a>
    35aa:	0080      	lsls	r0, r0, #2
    35ac:	4b08      	ldr	r3, [pc, #32]	; (35d0 <Parser_LoraGetMcast+0x44>)
    35ae:	58c3      	ldr	r3, [r0, r3]
    35b0:	6163      	str	r3, [r4, #20]
    35b2:	b002      	add	sp, #8
    35b4:	bd10      	pop	{r4, pc}
    35b6:	466b      	mov	r3, sp
    35b8:	3307      	adds	r3, #7
    35ba:	781b      	ldrb	r3, [r3, #0]
    35bc:	009b      	lsls	r3, r3, #2
    35be:	4a05      	ldr	r2, [pc, #20]	; (35d4 <Parser_LoraGetMcast+0x48>)
    35c0:	589b      	ldr	r3, [r3, r2]
    35c2:	6163      	str	r3, [r4, #20]
    35c4:	e7f5      	b.n	35b2 <Parser_LoraGetMcast+0x26>
    35c6:	46c0      	nop			; (mov r8, r8)
    35c8:	00019639 	.word	0x00019639
    35cc:	00011929 	.word	0x00011929
    35d0:	0001f820 	.word	0x0001f820
    35d4:	0001f800 	.word	0x0001f800

000035d8 <Parser_LoraGetMcastDownCounter>:
    35d8:	b570      	push	{r4, r5, r6, lr}
    35da:	b082      	sub	sp, #8
    35dc:	0005      	movs	r5, r0
    35de:	6800      	ldr	r0, [r0, #0]
    35e0:	4b0c      	ldr	r3, [pc, #48]	; (3614 <Parser_LoraGetMcastDownCounter+0x3c>)
    35e2:	4798      	blx	r3
    35e4:	466b      	mov	r3, sp
    35e6:	1cd9      	adds	r1, r3, #3
    35e8:	7008      	strb	r0, [r1, #0]
    35ea:	aa01      	add	r2, sp, #4
    35ec:	202c      	movs	r0, #44	; 0x2c
    35ee:	4b0a      	ldr	r3, [pc, #40]	; (3618 <Parser_LoraGetMcastDownCounter+0x40>)
    35f0:	4798      	blx	r3
    35f2:	0004      	movs	r4, r0
    35f4:	220a      	movs	r2, #10
    35f6:	9901      	ldr	r1, [sp, #4]
    35f8:	4808      	ldr	r0, [pc, #32]	; (361c <Parser_LoraGetMcastDownCounter+0x44>)
    35fa:	4b09      	ldr	r3, [pc, #36]	; (3620 <Parser_LoraGetMcastDownCounter+0x48>)
    35fc:	4798      	blx	r3
    35fe:	2c08      	cmp	r4, #8
    3600:	d005      	beq.n	360e <Parser_LoraGetMcastDownCounter+0x36>
    3602:	00a4      	lsls	r4, r4, #2
    3604:	4b07      	ldr	r3, [pc, #28]	; (3624 <Parser_LoraGetMcastDownCounter+0x4c>)
    3606:	58e3      	ldr	r3, [r4, r3]
    3608:	616b      	str	r3, [r5, #20]
    360a:	b002      	add	sp, #8
    360c:	bd70      	pop	{r4, r5, r6, pc}
    360e:	4b03      	ldr	r3, [pc, #12]	; (361c <Parser_LoraGetMcastDownCounter+0x44>)
    3610:	616b      	str	r3, [r5, #20]
    3612:	e7fa      	b.n	360a <Parser_LoraGetMcastDownCounter+0x32>
    3614:	00019639 	.word	0x00019639
    3618:	00011929 	.word	0x00011929
    361c:	2000116c 	.word	0x2000116c
    3620:	000041e1 	.word	0x000041e1
    3624:	0001f820 	.word	0x0001f820

00003628 <Parser_LoraSetMcastDevAddr>:
    3628:	b510      	push	{r4, lr}
    362a:	b082      	sub	sp, #8
    362c:	0004      	movs	r4, r0
    362e:	6800      	ldr	r0, [r0, #0]
    3630:	4b0b      	ldr	r3, [pc, #44]	; (3660 <Parser_LoraSetMcastDevAddr+0x38>)
    3632:	4798      	blx	r3
    3634:	2800      	cmp	r0, #0
    3636:	d103      	bne.n	3640 <Parser_LoraSetMcastDevAddr+0x18>
    3638:	4b0a      	ldr	r3, [pc, #40]	; (3664 <Parser_LoraSetMcastDevAddr+0x3c>)
    363a:	6163      	str	r3, [r4, #20]
    363c:	b002      	add	sp, #8
    363e:	bd10      	pop	{r4, pc}
    3640:	aa01      	add	r2, sp, #4
    3642:	6821      	ldr	r1, [r4, #0]
    3644:	2008      	movs	r0, #8
    3646:	4b08      	ldr	r3, [pc, #32]	; (3668 <Parser_LoraSetMcastDevAddr+0x40>)
    3648:	4798      	blx	r3
    364a:	2800      	cmp	r0, #0
    364c:	d0f4      	beq.n	3638 <Parser_LoraSetMcastDevAddr+0x10>
    364e:	6860      	ldr	r0, [r4, #4]
    3650:	4b06      	ldr	r3, [pc, #24]	; (366c <Parser_LoraSetMcastDevAddr+0x44>)
    3652:	4798      	blx	r3
    3654:	4a06      	ldr	r2, [pc, #24]	; (3670 <Parser_LoraSetMcastDevAddr+0x48>)
    3656:	7813      	ldrb	r3, [r2, #0]
    3658:	2140      	movs	r1, #64	; 0x40
    365a:	430b      	orrs	r3, r1
    365c:	7013      	strb	r3, [r2, #0]
    365e:	e7eb      	b.n	3638 <Parser_LoraSetMcastDevAddr+0x10>
    3660:	000040f5 	.word	0x000040f5
    3664:	0001f5b0 	.word	0x0001f5b0
    3668:	000043fd 	.word	0x000043fd
    366c:	00019639 	.word	0x00019639
    3670:	20001f88 	.word	0x20001f88

00003674 <Parser_LoraGetMcastDevAddr>:
    3674:	b530      	push	{r4, r5, lr}
    3676:	b085      	sub	sp, #20
    3678:	0004      	movs	r4, r0
    367a:	6800      	ldr	r0, [r0, #0]
    367c:	4b10      	ldr	r3, [pc, #64]	; (36c0 <Parser_LoraGetMcastDevAddr+0x4c>)
    367e:	4798      	blx	r3
    3680:	466b      	mov	r3, sp
    3682:	1dd9      	adds	r1, r3, #7
    3684:	7008      	strb	r0, [r1, #0]
    3686:	aa03      	add	r2, sp, #12
    3688:	2029      	movs	r0, #41	; 0x29
    368a:	4b0e      	ldr	r3, [pc, #56]	; (36c4 <Parser_LoraGetMcastDevAddr+0x50>)
    368c:	4798      	blx	r3
    368e:	9b03      	ldr	r3, [sp, #12]
    3690:	aa02      	add	r2, sp, #8
    3692:	70d3      	strb	r3, [r2, #3]
    3694:	0a19      	lsrs	r1, r3, #8
    3696:	7091      	strb	r1, [r2, #2]
    3698:	0c19      	lsrs	r1, r3, #16
    369a:	7051      	strb	r1, [r2, #1]
    369c:	0e1b      	lsrs	r3, r3, #24
    369e:	7013      	strb	r3, [r2, #0]
    36a0:	2808      	cmp	r0, #8
    36a2:	d005      	beq.n	36b0 <Parser_LoraGetMcastDevAddr+0x3c>
    36a4:	0080      	lsls	r0, r0, #2
    36a6:	4b08      	ldr	r3, [pc, #32]	; (36c8 <Parser_LoraGetMcastDevAddr+0x54>)
    36a8:	58c3      	ldr	r3, [r0, r3]
    36aa:	6163      	str	r3, [r4, #20]
    36ac:	b005      	add	sp, #20
    36ae:	bd30      	pop	{r4, r5, pc}
    36b0:	4d06      	ldr	r5, [pc, #24]	; (36cc <Parser_LoraGetMcastDevAddr+0x58>)
    36b2:	002a      	movs	r2, r5
    36b4:	a902      	add	r1, sp, #8
    36b6:	3804      	subs	r0, #4
    36b8:	4b05      	ldr	r3, [pc, #20]	; (36d0 <Parser_LoraGetMcastDevAddr+0x5c>)
    36ba:	4798      	blx	r3
    36bc:	6165      	str	r5, [r4, #20]
    36be:	e7f5      	b.n	36ac <Parser_LoraGetMcastDevAddr+0x38>
    36c0:	00019639 	.word	0x00019639
    36c4:	00011929 	.word	0x00011929
    36c8:	0001f820 	.word	0x0001f820
    36cc:	2000116c 	.word	0x2000116c
    36d0:	00004129 	.word	0x00004129

000036d4 <Parser_LoraSetMcastNwksKey>:
    36d4:	b510      	push	{r4, lr}
    36d6:	b086      	sub	sp, #24
    36d8:	0004      	movs	r4, r0
    36da:	6800      	ldr	r0, [r0, #0]
    36dc:	4b0c      	ldr	r3, [pc, #48]	; (3710 <Parser_LoraSetMcastNwksKey+0x3c>)
    36de:	4798      	blx	r3
    36e0:	2800      	cmp	r0, #0
    36e2:	d103      	bne.n	36ec <Parser_LoraSetMcastNwksKey+0x18>
    36e4:	4b0b      	ldr	r3, [pc, #44]	; (3714 <Parser_LoraSetMcastNwksKey+0x40>)
    36e6:	6163      	str	r3, [r4, #20]
    36e8:	b006      	add	sp, #24
    36ea:	bd10      	pop	{r4, pc}
    36ec:	466b      	mov	r3, sp
    36ee:	1d5a      	adds	r2, r3, #5
    36f0:	6821      	ldr	r1, [r4, #0]
    36f2:	2020      	movs	r0, #32
    36f4:	4b08      	ldr	r3, [pc, #32]	; (3718 <Parser_LoraSetMcastNwksKey+0x44>)
    36f6:	4798      	blx	r3
    36f8:	2800      	cmp	r0, #0
    36fa:	d0f3      	beq.n	36e4 <Parser_LoraSetMcastNwksKey+0x10>
    36fc:	6860      	ldr	r0, [r4, #4]
    36fe:	4b07      	ldr	r3, [pc, #28]	; (371c <Parser_LoraSetMcastNwksKey+0x48>)
    3700:	4798      	blx	r3
    3702:	4a07      	ldr	r2, [pc, #28]	; (3720 <Parser_LoraSetMcastNwksKey+0x4c>)
    3704:	7811      	ldrb	r1, [r2, #0]
    3706:	2380      	movs	r3, #128	; 0x80
    3708:	425b      	negs	r3, r3
    370a:	430b      	orrs	r3, r1
    370c:	7013      	strb	r3, [r2, #0]
    370e:	e7e9      	b.n	36e4 <Parser_LoraSetMcastNwksKey+0x10>
    3710:	000040f5 	.word	0x000040f5
    3714:	0001f5b0 	.word	0x0001f5b0
    3718:	000043fd 	.word	0x000043fd
    371c:	00019639 	.word	0x00019639
    3720:	20001f88 	.word	0x20001f88

00003724 <Parser_LoraSetMcastAppsKey>:
    3724:	b510      	push	{r4, lr}
    3726:	b086      	sub	sp, #24
    3728:	0004      	movs	r4, r0
    372a:	6800      	ldr	r0, [r0, #0]
    372c:	4b0c      	ldr	r3, [pc, #48]	; (3760 <Parser_LoraSetMcastAppsKey+0x3c>)
    372e:	4798      	blx	r3
    3730:	2800      	cmp	r0, #0
    3732:	d103      	bne.n	373c <Parser_LoraSetMcastAppsKey+0x18>
    3734:	4b0b      	ldr	r3, [pc, #44]	; (3764 <Parser_LoraSetMcastAppsKey+0x40>)
    3736:	6163      	str	r3, [r4, #20]
    3738:	b006      	add	sp, #24
    373a:	bd10      	pop	{r4, pc}
    373c:	466b      	mov	r3, sp
    373e:	1d5a      	adds	r2, r3, #5
    3740:	6821      	ldr	r1, [r4, #0]
    3742:	2020      	movs	r0, #32
    3744:	4b08      	ldr	r3, [pc, #32]	; (3768 <Parser_LoraSetMcastAppsKey+0x44>)
    3746:	4798      	blx	r3
    3748:	2800      	cmp	r0, #0
    374a:	d0f3      	beq.n	3734 <Parser_LoraSetMcastAppsKey+0x10>
    374c:	6860      	ldr	r0, [r4, #4]
    374e:	4b07      	ldr	r3, [pc, #28]	; (376c <Parser_LoraSetMcastAppsKey+0x48>)
    3750:	4798      	blx	r3
    3752:	4a07      	ldr	r2, [pc, #28]	; (3770 <Parser_LoraSetMcastAppsKey+0x4c>)
    3754:	7853      	ldrb	r3, [r2, #1]
    3756:	2101      	movs	r1, #1
    3758:	430b      	orrs	r3, r1
    375a:	7053      	strb	r3, [r2, #1]
    375c:	e7ea      	b.n	3734 <Parser_LoraSetMcastAppsKey+0x10>
    375e:	46c0      	nop			; (mov r8, r8)
    3760:	000040f5 	.word	0x000040f5
    3764:	0001f5b0 	.word	0x0001f5b0
    3768:	000043fd 	.word	0x000043fd
    376c:	00019639 	.word	0x00019639
    3770:	20001f88 	.word	0x20001f88

00003774 <Parser_LoraSetMcastFreq>:
    3774:	b510      	push	{r4, lr}
    3776:	0004      	movs	r4, r0
    3778:	220a      	movs	r2, #10
    377a:	2100      	movs	r1, #0
    377c:	6800      	ldr	r0, [r0, #0]
    377e:	4b0b      	ldr	r3, [pc, #44]	; (37ac <Parser_LoraSetMcastFreq+0x38>)
    3780:	4798      	blx	r3
    3782:	2201      	movs	r2, #1
    3784:	4252      	negs	r2, r2
    3786:	210a      	movs	r1, #10
    3788:	6820      	ldr	r0, [r4, #0]
    378a:	4b09      	ldr	r3, [pc, #36]	; (37b0 <Parser_LoraSetMcastFreq+0x3c>)
    378c:	4798      	blx	r3
    378e:	2800      	cmp	r0, #0
    3790:	d102      	bne.n	3798 <Parser_LoraSetMcastFreq+0x24>
    3792:	4b08      	ldr	r3, [pc, #32]	; (37b4 <Parser_LoraSetMcastFreq+0x40>)
    3794:	6163      	str	r3, [r4, #20]
    3796:	bd10      	pop	{r4, pc}
    3798:	6860      	ldr	r0, [r4, #4]
    379a:	4b07      	ldr	r3, [pc, #28]	; (37b8 <Parser_LoraSetMcastFreq+0x44>)
    379c:	4798      	blx	r3
    379e:	4a07      	ldr	r2, [pc, #28]	; (37bc <Parser_LoraSetMcastFreq+0x48>)
    37a0:	7853      	ldrb	r3, [r2, #1]
    37a2:	2102      	movs	r1, #2
    37a4:	430b      	orrs	r3, r1
    37a6:	7053      	strb	r3, [r2, #1]
    37a8:	e7f3      	b.n	3792 <Parser_LoraSetMcastFreq+0x1e>
    37aa:	46c0      	nop			; (mov r8, r8)
    37ac:	0001a575 	.word	0x0001a575
    37b0:	0000425d 	.word	0x0000425d
    37b4:	0001f5b0 	.word	0x0001f5b0
    37b8:	00019639 	.word	0x00019639
    37bc:	20001f88 	.word	0x20001f88

000037c0 <Parser_LoraGetMcastFreq>:
    37c0:	b570      	push	{r4, r5, r6, lr}
    37c2:	b082      	sub	sp, #8
    37c4:	0005      	movs	r5, r0
    37c6:	6800      	ldr	r0, [r0, #0]
    37c8:	4b0c      	ldr	r3, [pc, #48]	; (37fc <Parser_LoraGetMcastFreq+0x3c>)
    37ca:	4798      	blx	r3
    37cc:	466b      	mov	r3, sp
    37ce:	1cd9      	adds	r1, r3, #3
    37d0:	7008      	strb	r0, [r1, #0]
    37d2:	aa01      	add	r2, sp, #4
    37d4:	202f      	movs	r0, #47	; 0x2f
    37d6:	4b0a      	ldr	r3, [pc, #40]	; (3800 <Parser_LoraGetMcastFreq+0x40>)
    37d8:	4798      	blx	r3
    37da:	0004      	movs	r4, r0
    37dc:	220a      	movs	r2, #10
    37de:	9901      	ldr	r1, [sp, #4]
    37e0:	4808      	ldr	r0, [pc, #32]	; (3804 <Parser_LoraGetMcastFreq+0x44>)
    37e2:	4b09      	ldr	r3, [pc, #36]	; (3808 <Parser_LoraGetMcastFreq+0x48>)
    37e4:	4798      	blx	r3
    37e6:	2c08      	cmp	r4, #8
    37e8:	d005      	beq.n	37f6 <Parser_LoraGetMcastFreq+0x36>
    37ea:	00a4      	lsls	r4, r4, #2
    37ec:	4b07      	ldr	r3, [pc, #28]	; (380c <Parser_LoraGetMcastFreq+0x4c>)
    37ee:	58e3      	ldr	r3, [r4, r3]
    37f0:	616b      	str	r3, [r5, #20]
    37f2:	b002      	add	sp, #8
    37f4:	bd70      	pop	{r4, r5, r6, pc}
    37f6:	4b03      	ldr	r3, [pc, #12]	; (3804 <Parser_LoraGetMcastFreq+0x44>)
    37f8:	616b      	str	r3, [r5, #20]
    37fa:	e7fa      	b.n	37f2 <Parser_LoraGetMcastFreq+0x32>
    37fc:	00019639 	.word	0x00019639
    3800:	00011929 	.word	0x00011929
    3804:	2000116c 	.word	0x2000116c
    3808:	000041e1 	.word	0x000041e1
    380c:	0001f820 	.word	0x0001f820

00003810 <Parser_LoraSetMcastDr>:
    3810:	b510      	push	{r4, lr}
    3812:	b082      	sub	sp, #8
    3814:	0004      	movs	r4, r0
    3816:	466b      	mov	r3, sp
    3818:	1d59      	adds	r1, r3, #5
    381a:	6800      	ldr	r0, [r0, #0]
    381c:	4b05      	ldr	r3, [pc, #20]	; (3834 <Parser_LoraSetMcastDr+0x24>)
    381e:	4798      	blx	r3
    3820:	2800      	cmp	r0, #0
    3822:	d103      	bne.n	382c <Parser_LoraSetMcastDr+0x1c>
    3824:	4b04      	ldr	r3, [pc, #16]	; (3838 <Parser_LoraSetMcastDr+0x28>)
    3826:	6163      	str	r3, [r4, #20]
    3828:	b002      	add	sp, #8
    382a:	bd10      	pop	{r4, pc}
    382c:	6860      	ldr	r0, [r4, #4]
    382e:	4b03      	ldr	r3, [pc, #12]	; (383c <Parser_LoraSetMcastDr+0x2c>)
    3830:	4798      	blx	r3
    3832:	e7f7      	b.n	3824 <Parser_LoraSetMcastDr+0x14>
    3834:	00004189 	.word	0x00004189
    3838:	0001f5b0 	.word	0x0001f5b0
    383c:	00019639 	.word	0x00019639

00003840 <Parser_LoraGetMcastDr>:
    3840:	b530      	push	{r4, r5, lr}
    3842:	b083      	sub	sp, #12
    3844:	0004      	movs	r4, r0
    3846:	6800      	ldr	r0, [r0, #0]
    3848:	4b0c      	ldr	r3, [pc, #48]	; (387c <Parser_LoraGetMcastDr+0x3c>)
    384a:	4798      	blx	r3
    384c:	466b      	mov	r3, sp
    384e:	1d99      	adds	r1, r3, #6
    3850:	7008      	strb	r0, [r1, #0]
    3852:	1dda      	adds	r2, r3, #7
    3854:	2030      	movs	r0, #48	; 0x30
    3856:	4b0a      	ldr	r3, [pc, #40]	; (3880 <Parser_LoraGetMcastDr+0x40>)
    3858:	4798      	blx	r3
    385a:	2808      	cmp	r0, #8
    385c:	d005      	beq.n	386a <Parser_LoraGetMcastDr+0x2a>
    385e:	0080      	lsls	r0, r0, #2
    3860:	4b08      	ldr	r3, [pc, #32]	; (3884 <Parser_LoraGetMcastDr+0x44>)
    3862:	58c3      	ldr	r3, [r0, r3]
    3864:	6163      	str	r3, [r4, #20]
    3866:	b003      	add	sp, #12
    3868:	bd30      	pop	{r4, r5, pc}
    386a:	4d07      	ldr	r5, [pc, #28]	; (3888 <Parser_LoraGetMcastDr+0x48>)
    386c:	466b      	mov	r3, sp
    386e:	79d8      	ldrb	r0, [r3, #7]
    3870:	220a      	movs	r2, #10
    3872:	0029      	movs	r1, r5
    3874:	4b05      	ldr	r3, [pc, #20]	; (388c <Parser_LoraGetMcastDr+0x4c>)
    3876:	4798      	blx	r3
    3878:	6165      	str	r5, [r4, #20]
    387a:	e7f4      	b.n	3866 <Parser_LoraGetMcastDr+0x26>
    387c:	00019639 	.word	0x00019639
    3880:	00011929 	.word	0x00011929
    3884:	0001f820 	.word	0x0001f820
    3888:	2000116c 	.word	0x2000116c
    388c:	000196bd 	.word	0x000196bd

00003890 <Parser_LoraGetMacLastPacketRssi>:
    3890:	b570      	push	{r4, r5, r6, lr}
    3892:	b082      	sub	sp, #8
    3894:	0006      	movs	r6, r0
    3896:	466b      	mov	r3, sp
    3898:	1d9d      	adds	r5, r3, #6
    389a:	002a      	movs	r2, r5
    389c:	2100      	movs	r1, #0
    389e:	2035      	movs	r0, #53	; 0x35
    38a0:	4b05      	ldr	r3, [pc, #20]	; (38b8 <Parser_LoraGetMacLastPacketRssi+0x28>)
    38a2:	4798      	blx	r3
    38a4:	4c05      	ldr	r4, [pc, #20]	; (38bc <Parser_LoraGetMacLastPacketRssi+0x2c>)
    38a6:	2300      	movs	r3, #0
    38a8:	5ee8      	ldrsh	r0, [r5, r3]
    38aa:	220a      	movs	r2, #10
    38ac:	0021      	movs	r1, r4
    38ae:	4b04      	ldr	r3, [pc, #16]	; (38c0 <Parser_LoraGetMacLastPacketRssi+0x30>)
    38b0:	4798      	blx	r3
    38b2:	6174      	str	r4, [r6, #20]
    38b4:	b002      	add	sp, #8
    38b6:	bd70      	pop	{r4, r5, r6, pc}
    38b8:	00011929 	.word	0x00011929
    38bc:	2000116c 	.word	0x2000116c
    38c0:	000196bd 	.word	0x000196bd

000038c4 <Parser_LoraGetIsFpending>:
    38c4:	b530      	push	{r4, r5, lr}
    38c6:	b083      	sub	sp, #12
    38c8:	0005      	movs	r5, r0
    38ca:	466b      	mov	r3, sp
    38cc:	1ddc      	adds	r4, r3, #7
    38ce:	0022      	movs	r2, r4
    38d0:	2100      	movs	r1, #0
    38d2:	2036      	movs	r0, #54	; 0x36
    38d4:	4b04      	ldr	r3, [pc, #16]	; (38e8 <Parser_LoraGetIsFpending+0x24>)
    38d6:	4798      	blx	r3
    38d8:	7823      	ldrb	r3, [r4, #0]
    38da:	009b      	lsls	r3, r3, #2
    38dc:	4a03      	ldr	r2, [pc, #12]	; (38ec <Parser_LoraGetIsFpending+0x28>)
    38de:	589b      	ldr	r3, [r3, r2]
    38e0:	616b      	str	r3, [r5, #20]
    38e2:	b003      	add	sp, #12
    38e4:	bd30      	pop	{r4, r5, pc}
    38e6:	46c0      	nop			; (mov r8, r8)
    38e8:	00011929 	.word	0x00011929
    38ec:	0001f808 	.word	0x0001f808

000038f0 <Parser_LoraGetMacDlAckReqd>:
    38f0:	b530      	push	{r4, r5, lr}
    38f2:	b083      	sub	sp, #12
    38f4:	0005      	movs	r5, r0
    38f6:	466b      	mov	r3, sp
    38f8:	1ddc      	adds	r4, r3, #7
    38fa:	0022      	movs	r2, r4
    38fc:	2100      	movs	r1, #0
    38fe:	2037      	movs	r0, #55	; 0x37
    3900:	4b04      	ldr	r3, [pc, #16]	; (3914 <Parser_LoraGetMacDlAckReqd+0x24>)
    3902:	4798      	blx	r3
    3904:	7823      	ldrb	r3, [r4, #0]
    3906:	009b      	lsls	r3, r3, #2
    3908:	4a03      	ldr	r2, [pc, #12]	; (3918 <Parser_LoraGetMacDlAckReqd+0x28>)
    390a:	589b      	ldr	r3, [r3, r2]
    390c:	616b      	str	r3, [r5, #20]
    390e:	b003      	add	sp, #12
    3910:	bd30      	pop	{r4, r5, pc}
    3912:	46c0      	nop			; (mov r8, r8)
    3914:	00011929 	.word	0x00011929
    3918:	0001f808 	.word	0x0001f808

0000391c <Parser_LoraGetMacLastChId>:
    391c:	b570      	push	{r4, r5, r6, lr}
    391e:	b082      	sub	sp, #8
    3920:	0006      	movs	r6, r0
    3922:	466b      	mov	r3, sp
    3924:	1ddd      	adds	r5, r3, #7
    3926:	002a      	movs	r2, r5
    3928:	2100      	movs	r1, #0
    392a:	2038      	movs	r0, #56	; 0x38
    392c:	4b05      	ldr	r3, [pc, #20]	; (3944 <Parser_LoraGetMacLastChId+0x28>)
    392e:	4798      	blx	r3
    3930:	4c05      	ldr	r4, [pc, #20]	; (3948 <Parser_LoraGetMacLastChId+0x2c>)
    3932:	7828      	ldrb	r0, [r5, #0]
    3934:	220a      	movs	r2, #10
    3936:	0021      	movs	r1, r4
    3938:	4b04      	ldr	r3, [pc, #16]	; (394c <Parser_LoraGetMacLastChId+0x30>)
    393a:	4798      	blx	r3
    393c:	6174      	str	r4, [r6, #20]
    393e:	b002      	add	sp, #8
    3940:	bd70      	pop	{r4, r5, r6, pc}
    3942:	46c0      	nop			; (mov r8, r8)
    3944:	00011929 	.word	0x00011929
    3948:	2000116c 	.word	0x2000116c
    394c:	0001a62d 	.word	0x0001a62d

00003950 <Parser_LoraGetMacPendingDutyCycle>:
    3950:	b530      	push	{r4, r5, lr}
    3952:	b083      	sub	sp, #12
    3954:	0005      	movs	r5, r0
    3956:	aa01      	add	r2, sp, #4
    3958:	2100      	movs	r1, #0
    395a:	2039      	movs	r0, #57	; 0x39
    395c:	4b05      	ldr	r3, [pc, #20]	; (3974 <Parser_LoraGetMacPendingDutyCycle+0x24>)
    395e:	4798      	blx	r3
    3960:	4c05      	ldr	r4, [pc, #20]	; (3978 <Parser_LoraGetMacPendingDutyCycle+0x28>)
    3962:	220a      	movs	r2, #10
    3964:	0021      	movs	r1, r4
    3966:	9801      	ldr	r0, [sp, #4]
    3968:	4b04      	ldr	r3, [pc, #16]	; (397c <Parser_LoraGetMacPendingDutyCycle+0x2c>)
    396a:	4798      	blx	r3
    396c:	616c      	str	r4, [r5, #20]
    396e:	b003      	add	sp, #12
    3970:	bd30      	pop	{r4, r5, pc}
    3972:	46c0      	nop			; (mov r8, r8)
    3974:	00011929 	.word	0x00011929
    3978:	2000116c 	.word	0x2000116c
    397c:	0001a62d 	.word	0x0001a62d

00003980 <Parser_LoraGetMacCnfRetryCnt>:
    3980:	4b01      	ldr	r3, [pc, #4]	; (3988 <Parser_LoraGetMacCnfRetryCnt+0x8>)
    3982:	6143      	str	r3, [r0, #20]
    3984:	4770      	bx	lr
    3986:	46c0      	nop			; (mov r8, r8)
    3988:	2000116c 	.word	0x2000116c

0000398c <Parser_LoraGetMacUncnfRetryCnt>:
    398c:	4b01      	ldr	r3, [pc, #4]	; (3994 <Parser_LoraGetMacUncnfRetryCnt+0x8>)
    398e:	6143      	str	r3, [r0, #20]
    3990:	4770      	bx	lr
    3992:	46c0      	nop			; (mov r8, r8)
    3994:	2000116c 	.word	0x2000116c

00003998 <Parser_LoraGetMacNextPayloadSize>:
    3998:	b570      	push	{r4, r5, r6, lr}
    399a:	b082      	sub	sp, #8
    399c:	0006      	movs	r6, r0
    399e:	466b      	mov	r3, sp
    39a0:	1d9d      	adds	r5, r3, #6
    39a2:	002a      	movs	r2, r5
    39a4:	2100      	movs	r1, #0
    39a6:	203b      	movs	r0, #59	; 0x3b
    39a8:	4b05      	ldr	r3, [pc, #20]	; (39c0 <Parser_LoraGetMacNextPayloadSize+0x28>)
    39aa:	4798      	blx	r3
    39ac:	4c05      	ldr	r4, [pc, #20]	; (39c4 <Parser_LoraGetMacNextPayloadSize+0x2c>)
    39ae:	8828      	ldrh	r0, [r5, #0]
    39b0:	220a      	movs	r2, #10
    39b2:	0021      	movs	r1, r4
    39b4:	4b04      	ldr	r3, [pc, #16]	; (39c8 <Parser_LoraGetMacNextPayloadSize+0x30>)
    39b6:	4798      	blx	r3
    39b8:	6174      	str	r4, [r6, #20]
    39ba:	b002      	add	sp, #8
    39bc:	bd70      	pop	{r4, r5, r6, pc}
    39be:	46c0      	nop			; (mov r8, r8)
    39c0:	00011929 	.word	0x00011929
    39c4:	2000116c 	.word	0x2000116c
    39c8:	0001a62d 	.word	0x0001a62d

000039cc <Parser_LoraGetJoindutycycleremaining>:
    39cc:	b530      	push	{r4, r5, lr}
    39ce:	b083      	sub	sp, #12
    39d0:	0005      	movs	r5, r0
    39d2:	aa01      	add	r2, sp, #4
    39d4:	2100      	movs	r1, #0
    39d6:	203c      	movs	r0, #60	; 0x3c
    39d8:	4b05      	ldr	r3, [pc, #20]	; (39f0 <Parser_LoraGetJoindutycycleremaining+0x24>)
    39da:	4798      	blx	r3
    39dc:	4c05      	ldr	r4, [pc, #20]	; (39f4 <Parser_LoraGetJoindutycycleremaining+0x28>)
    39de:	220a      	movs	r2, #10
    39e0:	0021      	movs	r1, r4
    39e2:	9801      	ldr	r0, [sp, #4]
    39e4:	4b04      	ldr	r3, [pc, #16]	; (39f8 <Parser_LoraGetJoindutycycleremaining+0x2c>)
    39e6:	4798      	blx	r3
    39e8:	616c      	str	r4, [r5, #20]
    39ea:	b003      	add	sp, #12
    39ec:	bd30      	pop	{r4, r5, pc}
    39ee:	46c0      	nop			; (mov r8, r8)
    39f0:	00011929 	.word	0x00011929
    39f4:	2000116c 	.word	0x2000116c
    39f8:	0001a62d 	.word	0x0001a62d

000039fc <Parser_LoraSetJoinBackoff>:
    39fc:	b510      	push	{r4, lr}
    39fe:	b082      	sub	sp, #8
    3a00:	0004      	movs	r4, r0
    3a02:	6800      	ldr	r0, [r0, #0]
    3a04:	4b0a      	ldr	r3, [pc, #40]	; (3a30 <Parser_LoraSetJoinBackoff+0x34>)
    3a06:	4798      	blx	r3
    3a08:	230a      	movs	r3, #10
    3a0a:	2801      	cmp	r0, #1
    3a0c:	d905      	bls.n	3a1a <Parser_LoraSetJoinBackoff+0x1e>
    3a0e:	009b      	lsls	r3, r3, #2
    3a10:	4a08      	ldr	r2, [pc, #32]	; (3a34 <Parser_LoraSetJoinBackoff+0x38>)
    3a12:	589b      	ldr	r3, [r3, r2]
    3a14:	6163      	str	r3, [r4, #20]
    3a16:	b002      	add	sp, #8
    3a18:	bd10      	pop	{r4, pc}
    3a1a:	466b      	mov	r3, sp
    3a1c:	1dd9      	adds	r1, r3, #7
    3a1e:	1e43      	subs	r3, r0, #1
    3a20:	4198      	sbcs	r0, r3
    3a22:	7008      	strb	r0, [r1, #0]
    3a24:	2033      	movs	r0, #51	; 0x33
    3a26:	4b04      	ldr	r3, [pc, #16]	; (3a38 <Parser_LoraSetJoinBackoff+0x3c>)
    3a28:	4798      	blx	r3
    3a2a:	0003      	movs	r3, r0
    3a2c:	e7ef      	b.n	3a0e <Parser_LoraSetJoinBackoff+0x12>
    3a2e:	46c0      	nop			; (mov r8, r8)
    3a30:	00004331 	.word	0x00004331
    3a34:	0001f820 	.word	0x0001f820
    3a38:	0001396d 	.word	0x0001396d

00003a3c <Parser_LoraSetMaxFcntPdsUpdtVal>:
    3a3c:	b510      	push	{r4, lr}
    3a3e:	b082      	sub	sp, #8
    3a40:	0004      	movs	r4, r0
    3a42:	466b      	mov	r3, sp
    3a44:	1dd9      	adds	r1, r3, #7
    3a46:	6800      	ldr	r0, [r0, #0]
    3a48:	4b08      	ldr	r3, [pc, #32]	; (3a6c <Parser_LoraSetMaxFcntPdsUpdtVal+0x30>)
    3a4a:	4798      	blx	r3
    3a4c:	230a      	movs	r3, #10
    3a4e:	2800      	cmp	r0, #0
    3a50:	d105      	bne.n	3a5e <Parser_LoraSetMaxFcntPdsUpdtVal+0x22>
    3a52:	009b      	lsls	r3, r3, #2
    3a54:	4a06      	ldr	r2, [pc, #24]	; (3a70 <Parser_LoraSetMaxFcntPdsUpdtVal+0x34>)
    3a56:	589b      	ldr	r3, [r3, r2]
    3a58:	6163      	str	r3, [r4, #20]
    3a5a:	b002      	add	sp, #8
    3a5c:	bd10      	pop	{r4, pc}
    3a5e:	466b      	mov	r3, sp
    3a60:	1dd9      	adds	r1, r3, #7
    3a62:	203d      	movs	r0, #61	; 0x3d
    3a64:	4b03      	ldr	r3, [pc, #12]	; (3a74 <Parser_LoraSetMaxFcntPdsUpdtVal+0x38>)
    3a66:	4798      	blx	r3
    3a68:	0003      	movs	r3, r0
    3a6a:	e7f2      	b.n	3a52 <Parser_LoraSetMaxFcntPdsUpdtVal+0x16>
    3a6c:	00004189 	.word	0x00004189
    3a70:	0001f820 	.word	0x0001f820
    3a74:	0001396d 	.word	0x0001396d

00003a78 <Parser_LoraGetJoinBackoff>:
    3a78:	b510      	push	{r4, lr}
    3a7a:	b082      	sub	sp, #8
    3a7c:	0004      	movs	r4, r0
    3a7e:	466b      	mov	r3, sp
    3a80:	1dda      	adds	r2, r3, #7
    3a82:	2100      	movs	r1, #0
    3a84:	2033      	movs	r0, #51	; 0x33
    3a86:	4b09      	ldr	r3, [pc, #36]	; (3aac <Parser_LoraGetJoinBackoff+0x34>)
    3a88:	4798      	blx	r3
    3a8a:	2808      	cmp	r0, #8
    3a8c:	d005      	beq.n	3a9a <Parser_LoraGetJoinBackoff+0x22>
    3a8e:	0080      	lsls	r0, r0, #2
    3a90:	4b07      	ldr	r3, [pc, #28]	; (3ab0 <Parser_LoraGetJoinBackoff+0x38>)
    3a92:	58c3      	ldr	r3, [r0, r3]
    3a94:	6163      	str	r3, [r4, #20]
    3a96:	b002      	add	sp, #8
    3a98:	bd10      	pop	{r4, pc}
    3a9a:	466b      	mov	r3, sp
    3a9c:	3307      	adds	r3, #7
    3a9e:	781b      	ldrb	r3, [r3, #0]
    3aa0:	009b      	lsls	r3, r3, #2
    3aa2:	4a04      	ldr	r2, [pc, #16]	; (3ab4 <Parser_LoraGetJoinBackoff+0x3c>)
    3aa4:	589b      	ldr	r3, [r3, r2]
    3aa6:	6163      	str	r3, [r4, #20]
    3aa8:	e7f5      	b.n	3a96 <Parser_LoraGetJoinBackoff+0x1e>
    3aaa:	46c0      	nop			; (mov r8, r8)
    3aac:	00011929 	.word	0x00011929
    3ab0:	0001f820 	.word	0x0001f820
    3ab4:	0001f800 	.word	0x0001f800

00003ab8 <parserSleepCallback>:
    3ab8:	b510      	push	{r4, lr}
    3aba:	0004      	movs	r4, r0
    3abc:	4b04      	ldr	r3, [pc, #16]	; (3ad0 <parserSleepCallback+0x18>)
    3abe:	4798      	blx	r3
    3ac0:	4b04      	ldr	r3, [pc, #16]	; (3ad4 <parserSleepCallback+0x1c>)
    3ac2:	4798      	blx	r3
    3ac4:	0021      	movs	r1, r4
    3ac6:	4804      	ldr	r0, [pc, #16]	; (3ad8 <parserSleepCallback+0x20>)
    3ac8:	4b04      	ldr	r3, [pc, #16]	; (3adc <parserSleepCallback+0x24>)
    3aca:	4798      	blx	r3
    3acc:	bd10      	pop	{r4, pc}
    3ace:	46c0      	nop			; (mov r8, r8)
    3ad0:	00007f85 	.word	0x00007f85
    3ad4:	00007a25 	.word	0x00007a25
    3ad8:	0001f9cc 	.word	0x0001f9cc
    3adc:	00019ee9 	.word	0x00019ee9

00003ae0 <extint_callback>:
    3ae0:	b510      	push	{r4, lr}
    3ae2:	4b09      	ldr	r3, [pc, #36]	; (3b08 <extint_callback+0x28>)
    3ae4:	4798      	blx	r3
    3ae6:	4b09      	ldr	r3, [pc, #36]	; (3b0c <extint_callback+0x2c>)
    3ae8:	781b      	ldrb	r3, [r3, #0]
    3aea:	2b00      	cmp	r3, #0
    3aec:	d100      	bne.n	3af0 <extint_callback+0x10>
    3aee:	bd10      	pop	{r4, pc}
    3af0:	4b07      	ldr	r3, [pc, #28]	; (3b10 <extint_callback+0x30>)
    3af2:	4798      	blx	r3
    3af4:	4b07      	ldr	r3, [pc, #28]	; (3b14 <extint_callback+0x34>)
    3af6:	4798      	blx	r3
    3af8:	4807      	ldr	r0, [pc, #28]	; (3b18 <extint_callback+0x38>)
    3afa:	4b08      	ldr	r3, [pc, #32]	; (3b1c <extint_callback+0x3c>)
    3afc:	4798      	blx	r3
    3afe:	2200      	movs	r2, #0
    3b00:	4b02      	ldr	r3, [pc, #8]	; (3b0c <extint_callback+0x2c>)
    3b02:	701a      	strb	r2, [r3, #0]
    3b04:	e7f3      	b.n	3aee <extint_callback+0xe>
    3b06:	46c0      	nop			; (mov r8, r8)
    3b08:	000082d1 	.word	0x000082d1
    3b0c:	20000b54 	.word	0x20000b54
    3b10:	00007f85 	.word	0x00007f85
    3b14:	00007a25 	.word	0x00007a25
    3b18:	0001f9ac 	.word	0x0001f9ac
    3b1c:	00019ee9 	.word	0x00019ee9

00003b20 <Parser_SystemGetHwEui>:
    3b20:	b530      	push	{r4, r5, lr}
    3b22:	b083      	sub	sp, #12
    3b24:	0005      	movs	r5, r0
    3b26:	4668      	mov	r0, sp
    3b28:	4b05      	ldr	r3, [pc, #20]	; (3b40 <Parser_SystemGetHwEui+0x20>)
    3b2a:	4798      	blx	r3
    3b2c:	4c05      	ldr	r4, [pc, #20]	; (3b44 <Parser_SystemGetHwEui+0x24>)
    3b2e:	0022      	movs	r2, r4
    3b30:	4669      	mov	r1, sp
    3b32:	2008      	movs	r0, #8
    3b34:	4b04      	ldr	r3, [pc, #16]	; (3b48 <Parser_SystemGetHwEui+0x28>)
    3b36:	4798      	blx	r3
    3b38:	616c      	str	r4, [r5, #20]
    3b3a:	b003      	add	sp, #12
    3b3c:	bd30      	pop	{r4, r5, pc}
    3b3e:	46c0      	nop			; (mov r8, r8)
    3b40:	00008281 	.word	0x00008281
    3b44:	2000116c 	.word	0x2000116c
    3b48:	00004129 	.word	0x00004129

00003b4c <Parser_SystemGetVer>:
    3b4c:	b570      	push	{r4, r5, r6, lr}
    3b4e:	0005      	movs	r5, r0
    3b50:	4c02      	ldr	r4, [pc, #8]	; (3b5c <Parser_SystemGetVer+0x10>)
    3b52:	0020      	movs	r0, r4
    3b54:	4b02      	ldr	r3, [pc, #8]	; (3b60 <Parser_SystemGetVer+0x14>)
    3b56:	4798      	blx	r3
    3b58:	616c      	str	r4, [r5, #20]
    3b5a:	bd70      	pop	{r4, r5, r6, pc}
    3b5c:	2000116c 	.word	0x2000116c
    3b60:	00001e51 	.word	0x00001e51

00003b64 <Parser_SystemGetCustomParam>:
    3b64:	b570      	push	{r4, r5, r6, lr}
    3b66:	0005      	movs	r5, r0
    3b68:	2100      	movs	r1, #0
    3b6a:	200c      	movs	r0, #12
    3b6c:	4b05      	ldr	r3, [pc, #20]	; (3b84 <Parser_SystemGetCustomParam+0x20>)
    3b6e:	4798      	blx	r3
    3b70:	4c05      	ldr	r4, [pc, #20]	; (3b88 <Parser_SystemGetCustomParam+0x24>)
    3b72:	4b06      	ldr	r3, [pc, #24]	; (3b8c <Parser_SystemGetCustomParam+0x28>)
    3b74:	6818      	ldr	r0, [r3, #0]
    3b76:	220a      	movs	r2, #10
    3b78:	0021      	movs	r1, r4
    3b7a:	4b05      	ldr	r3, [pc, #20]	; (3b90 <Parser_SystemGetCustomParam+0x2c>)
    3b7c:	4798      	blx	r3
    3b7e:	616c      	str	r4, [r5, #20]
    3b80:	bd70      	pop	{r4, r5, r6, pc}
    3b82:	46c0      	nop			; (mov r8, r8)
    3b84:	0000e045 	.word	0x0000e045
    3b88:	2000116c 	.word	0x2000116c
    3b8c:	20001380 	.word	0x20001380
    3b90:	0001a62d 	.word	0x0001a62d

00003b94 <Parser_SystemSetCustomParam>:
    3b94:	b510      	push	{r4, lr}
    3b96:	0004      	movs	r4, r0
    3b98:	220a      	movs	r2, #10
    3b9a:	2100      	movs	r1, #0
    3b9c:	6800      	ldr	r0, [r0, #0]
    3b9e:	4b0e      	ldr	r3, [pc, #56]	; (3bd8 <Parser_SystemSetCustomParam+0x44>)
    3ba0:	4798      	blx	r3
    3ba2:	4b0e      	ldr	r3, [pc, #56]	; (3bdc <Parser_SystemSetCustomParam+0x48>)
    3ba4:	6018      	str	r0, [r3, #0]
    3ba6:	2201      	movs	r2, #1
    3ba8:	4252      	negs	r2, r2
    3baa:	210a      	movs	r1, #10
    3bac:	6820      	ldr	r0, [r4, #0]
    3bae:	4b0c      	ldr	r3, [pc, #48]	; (3be0 <Parser_SystemSetCustomParam+0x4c>)
    3bb0:	4798      	blx	r3
    3bb2:	2301      	movs	r3, #1
    3bb4:	2800      	cmp	r0, #0
    3bb6:	d104      	bne.n	3bc2 <Parser_SystemSetCustomParam+0x2e>
    3bb8:	009b      	lsls	r3, r3, #2
    3bba:	4a0a      	ldr	r2, [pc, #40]	; (3be4 <Parser_SystemSetCustomParam+0x50>)
    3bbc:	589b      	ldr	r3, [r3, r2]
    3bbe:	6163      	str	r3, [r4, #20]
    3bc0:	bd10      	pop	{r4, pc}
    3bc2:	4b06      	ldr	r3, [pc, #24]	; (3bdc <Parser_SystemSetCustomParam+0x48>)
    3bc4:	6819      	ldr	r1, [r3, #0]
    3bc6:	4808      	ldr	r0, [pc, #32]	; (3be8 <Parser_SystemSetCustomParam+0x54>)
    3bc8:	4b08      	ldr	r3, [pc, #32]	; (3bec <Parser_SystemSetCustomParam+0x58>)
    3bca:	4798      	blx	r3
    3bcc:	2100      	movs	r1, #0
    3bce:	200c      	movs	r0, #12
    3bd0:	4b07      	ldr	r3, [pc, #28]	; (3bf0 <Parser_SystemSetCustomParam+0x5c>)
    3bd2:	4798      	blx	r3
    3bd4:	2300      	movs	r3, #0
    3bd6:	e7ef      	b.n	3bb8 <Parser_SystemSetCustomParam+0x24>
    3bd8:	0001a575 	.word	0x0001a575
    3bdc:	20001380 	.word	0x20001380
    3be0:	0000425d 	.word	0x0000425d
    3be4:	0001f9c0 	.word	0x0001f9c0
    3be8:	0001f990 	.word	0x0001f990
    3bec:	00019ee9 	.word	0x00019ee9
    3bf0:	0000dfe1 	.word	0x0000dfe1

00003bf4 <Parser_SystemGetCryptoSn>:
    3bf4:	b530      	push	{r4, r5, lr}
    3bf6:	b085      	sub	sp, #20
    3bf8:	0005      	movs	r5, r0
    3bfa:	2209      	movs	r2, #9
    3bfc:	2100      	movs	r1, #0
    3bfe:	a801      	add	r0, sp, #4
    3c00:	4b09      	ldr	r3, [pc, #36]	; (3c28 <Parser_SystemGetCryptoSn+0x34>)
    3c02:	4798      	blx	r3
    3c04:	4b09      	ldr	r3, [pc, #36]	; (3c2c <Parser_SystemGetCryptoSn+0x38>)
    3c06:	781b      	ldrb	r3, [r3, #0]
    3c08:	2b00      	cmp	r3, #0
    3c0a:	d108      	bne.n	3c1e <Parser_SystemGetCryptoSn+0x2a>
    3c0c:	4c08      	ldr	r4, [pc, #32]	; (3c30 <Parser_SystemGetCryptoSn+0x3c>)
    3c0e:	0022      	movs	r2, r4
    3c10:	a901      	add	r1, sp, #4
    3c12:	2009      	movs	r0, #9
    3c14:	4b07      	ldr	r3, [pc, #28]	; (3c34 <Parser_SystemGetCryptoSn+0x40>)
    3c16:	4798      	blx	r3
    3c18:	616c      	str	r4, [r5, #20]
    3c1a:	b005      	add	sp, #20
    3c1c:	bd30      	pop	{r4, r5, pc}
    3c1e:	a801      	add	r0, sp, #4
    3c20:	4b05      	ldr	r3, [pc, #20]	; (3c38 <Parser_SystemGetCryptoSn+0x44>)
    3c22:	4798      	blx	r3
    3c24:	e7f2      	b.n	3c0c <Parser_SystemGetCryptoSn+0x18>
    3c26:	46c0      	nop			; (mov r8, r8)
    3c28:	00019e35 	.word	0x00019e35
    3c2c:	20000fa8 	.word	0x20000fa8
    3c30:	2000116c 	.word	0x2000116c
    3c34:	00004129 	.word	0x00004129
    3c38:	00000611 	.word	0x00000611

00003c3c <Parser_SystemGetCryptoDevEui>:
    3c3c:	b570      	push	{r4, r5, r6, lr}
    3c3e:	b088      	sub	sp, #32
    3c40:	0005      	movs	r5, r0
    3c42:	ac03      	add	r4, sp, #12
    3c44:	2211      	movs	r2, #17
    3c46:	2100      	movs	r1, #0
    3c48:	0020      	movs	r0, r4
    3c4a:	4b0e      	ldr	r3, [pc, #56]	; (3c84 <Parser_SystemGetCryptoDevEui+0x48>)
    3c4c:	4798      	blx	r3
    3c4e:	2330      	movs	r3, #48	; 0x30
    3c50:	7023      	strb	r3, [r4, #0]
    3c52:	4b0d      	ldr	r3, [pc, #52]	; (3c88 <Parser_SystemGetCryptoDevEui+0x4c>)
    3c54:	781b      	ldrb	r3, [r3, #0]
    3c56:	2b00      	cmp	r3, #0
    3c58:	d108      	bne.n	3c6c <Parser_SystemGetCryptoDevEui+0x30>
    3c5a:	4c0c      	ldr	r4, [pc, #48]	; (3c8c <Parser_SystemGetCryptoDevEui+0x50>)
    3c5c:	2211      	movs	r2, #17
    3c5e:	a903      	add	r1, sp, #12
    3c60:	0020      	movs	r0, r4
    3c62:	4b0b      	ldr	r3, [pc, #44]	; (3c90 <Parser_SystemGetCryptoDevEui+0x54>)
    3c64:	4798      	blx	r3
    3c66:	616c      	str	r4, [r5, #20]
    3c68:	b008      	add	sp, #32
    3c6a:	bd70      	pop	{r4, r5, r6, pc}
    3c6c:	ac03      	add	r4, sp, #12
    3c6e:	2310      	movs	r3, #16
    3c70:	9300      	str	r3, [sp, #0]
    3c72:	0023      	movs	r3, r4
    3c74:	2200      	movs	r2, #0
    3c76:	210a      	movs	r1, #10
    3c78:	2002      	movs	r0, #2
    3c7a:	4e06      	ldr	r6, [pc, #24]	; (3c94 <Parser_SystemGetCryptoDevEui+0x58>)
    3c7c:	47b0      	blx	r6
    3c7e:	2300      	movs	r3, #0
    3c80:	7423      	strb	r3, [r4, #16]
    3c82:	e7ea      	b.n	3c5a <Parser_SystemGetCryptoDevEui+0x1e>
    3c84:	00019e35 	.word	0x00019e35
    3c88:	20000fa8 	.word	0x20000fa8
    3c8c:	2000116c 	.word	0x2000116c
    3c90:	00019d11 	.word	0x00019d11
    3c94:	0000077d 	.word	0x0000077d

00003c98 <Parser_SystemGetCryptoJoinEui>:
    3c98:	b530      	push	{r4, r5, lr}
    3c9a:	b085      	sub	sp, #20
    3c9c:	0005      	movs	r5, r0
    3c9e:	2208      	movs	r2, #8
    3ca0:	2100      	movs	r1, #0
    3ca2:	a802      	add	r0, sp, #8
    3ca4:	4b0b      	ldr	r3, [pc, #44]	; (3cd4 <Parser_SystemGetCryptoJoinEui+0x3c>)
    3ca6:	4798      	blx	r3
    3ca8:	4b0b      	ldr	r3, [pc, #44]	; (3cd8 <Parser_SystemGetCryptoJoinEui+0x40>)
    3caa:	781b      	ldrb	r3, [r3, #0]
    3cac:	2b00      	cmp	r3, #0
    3cae:	d108      	bne.n	3cc2 <Parser_SystemGetCryptoJoinEui+0x2a>
    3cb0:	4c0a      	ldr	r4, [pc, #40]	; (3cdc <Parser_SystemGetCryptoJoinEui+0x44>)
    3cb2:	0022      	movs	r2, r4
    3cb4:	a902      	add	r1, sp, #8
    3cb6:	2008      	movs	r0, #8
    3cb8:	4b09      	ldr	r3, [pc, #36]	; (3ce0 <Parser_SystemGetCryptoJoinEui+0x48>)
    3cba:	4798      	blx	r3
    3cbc:	616c      	str	r4, [r5, #20]
    3cbe:	b005      	add	sp, #20
    3cc0:	bd30      	pop	{r4, r5, pc}
    3cc2:	2308      	movs	r3, #8
    3cc4:	9300      	str	r3, [sp, #0]
    3cc6:	ab02      	add	r3, sp, #8
    3cc8:	2200      	movs	r2, #0
    3cca:	2109      	movs	r1, #9
    3ccc:	2002      	movs	r0, #2
    3cce:	4c05      	ldr	r4, [pc, #20]	; (3ce4 <Parser_SystemGetCryptoJoinEui+0x4c>)
    3cd0:	47a0      	blx	r4
    3cd2:	e7ed      	b.n	3cb0 <Parser_SystemGetCryptoJoinEui+0x18>
    3cd4:	00019e35 	.word	0x00019e35
    3cd8:	20000fa8 	.word	0x20000fa8
    3cdc:	2000116c 	.word	0x2000116c
    3ce0:	00004129 	.word	0x00004129
    3ce4:	0000077d 	.word	0x0000077d

00003ce8 <Parser_SystemGetCryptoTkmInfo>:
    3ce8:	b570      	push	{r4, r5, r6, lr}
    3cea:	b08a      	sub	sp, #40	; 0x28
    3cec:	0005      	movs	r5, r0
    3cee:	220a      	movs	r2, #10
    3cf0:	2100      	movs	r1, #0
    3cf2:	a803      	add	r0, sp, #12
    3cf4:	4b12      	ldr	r3, [pc, #72]	; (3d40 <Parser_SystemGetCryptoTkmInfo+0x58>)
    3cf6:	4798      	blx	r3
    3cf8:	4b12      	ldr	r3, [pc, #72]	; (3d44 <Parser_SystemGetCryptoTkmInfo+0x5c>)
    3cfa:	781b      	ldrb	r3, [r3, #0]
    3cfc:	2b00      	cmp	r3, #0
    3cfe:	d108      	bne.n	3d12 <Parser_SystemGetCryptoTkmInfo+0x2a>
    3d00:	4c11      	ldr	r4, [pc, #68]	; (3d48 <Parser_SystemGetCryptoTkmInfo+0x60>)
    3d02:	0022      	movs	r2, r4
    3d04:	a903      	add	r1, sp, #12
    3d06:	200a      	movs	r0, #10
    3d08:	4b10      	ldr	r3, [pc, #64]	; (3d4c <Parser_SystemGetCryptoTkmInfo+0x64>)
    3d0a:	4798      	blx	r3
    3d0c:	616c      	str	r4, [r5, #20]
    3d0e:	b00a      	add	sp, #40	; 0x28
    3d10:	bd70      	pop	{r4, r5, r6, pc}
    3d12:	a807      	add	r0, sp, #28
    3d14:	4b0e      	ldr	r3, [pc, #56]	; (3d50 <Parser_SystemGetCryptoTkmInfo+0x68>)
    3d16:	4798      	blx	r3
    3d18:	ac06      	add	r4, sp, #24
    3d1a:	2302      	movs	r3, #2
    3d1c:	9300      	str	r3, [sp, #0]
    3d1e:	0023      	movs	r3, r4
    3d20:	2246      	movs	r2, #70	; 0x46
    3d22:	210a      	movs	r1, #10
    3d24:	2002      	movs	r0, #2
    3d26:	4e0b      	ldr	r6, [pc, #44]	; (3d54 <Parser_SystemGetCryptoTkmInfo+0x6c>)
    3d28:	47b0      	blx	r6
    3d2a:	8822      	ldrh	r2, [r4, #0]
    3d2c:	ab03      	add	r3, sp, #12
    3d2e:	801a      	strh	r2, [r3, #0]
    3d30:	2208      	movs	r2, #8
    3d32:	a907      	add	r1, sp, #28
    3d34:	200e      	movs	r0, #14
    3d36:	4468      	add	r0, sp
    3d38:	4b07      	ldr	r3, [pc, #28]	; (3d58 <Parser_SystemGetCryptoTkmInfo+0x70>)
    3d3a:	4798      	blx	r3
    3d3c:	e7e0      	b.n	3d00 <Parser_SystemGetCryptoTkmInfo+0x18>
    3d3e:	46c0      	nop			; (mov r8, r8)
    3d40:	00019e35 	.word	0x00019e35
    3d44:	20000fa8 	.word	0x20000fa8
    3d48:	2000116c 	.word	0x2000116c
    3d4c:	00004129 	.word	0x00004129
    3d50:	00000611 	.word	0x00000611
    3d54:	0000077d 	.word	0x0000077d
    3d58:	00019d11 	.word	0x00019d11

00003d5c <Parser_SystemReboot>:
    3d5c:	f3bf 8f4f 	dsb	sy
    3d60:	4a03      	ldr	r2, [pc, #12]	; (3d70 <Parser_SystemReboot+0x14>)
    3d62:	4b04      	ldr	r3, [pc, #16]	; (3d74 <Parser_SystemReboot+0x18>)
    3d64:	60da      	str	r2, [r3, #12]
    3d66:	f3bf 8f4f 	dsb	sy
    3d6a:	46c0      	nop			; (mov r8, r8)
    3d6c:	e7fd      	b.n	3d6a <Parser_SystemReboot+0xe>
    3d6e:	46c0      	nop			; (mov r8, r8)
    3d70:	05fa0004 	.word	0x05fa0004
    3d74:	e000ed00 	.word	0xe000ed00

00003d78 <Parser_SystemFactReset>:
    3d78:	b510      	push	{r4, lr}
    3d7a:	4b05      	ldr	r3, [pc, #20]	; (3d90 <Parser_SystemFactReset+0x18>)
    3d7c:	4798      	blx	r3
    3d7e:	f3bf 8f4f 	dsb	sy
    3d82:	4a04      	ldr	r2, [pc, #16]	; (3d94 <Parser_SystemFactReset+0x1c>)
    3d84:	4b04      	ldr	r3, [pc, #16]	; (3d98 <Parser_SystemFactReset+0x20>)
    3d86:	60da      	str	r2, [r3, #12]
    3d88:	f3bf 8f4f 	dsb	sy
    3d8c:	46c0      	nop			; (mov r8, r8)
    3d8e:	e7fd      	b.n	3d8c <Parser_SystemFactReset+0x14>
    3d90:	0000e159 	.word	0x0000e159
    3d94:	05fa0004 	.word	0x05fa0004
    3d98:	e000ed00 	.word	0xe000ed00

00003d9c <Parser_SystemSleep>:
    3d9c:	b530      	push	{r4, r5, lr}
    3d9e:	b085      	sub	sp, #20
    3da0:	0004      	movs	r4, r0
    3da2:	ab01      	add	r3, sp, #4
    3da4:	2200      	movs	r2, #0
    3da6:	9201      	str	r2, [sp, #4]
    3da8:	21ff      	movs	r1, #255	; 0xff
    3daa:	7119      	strb	r1, [r3, #4]
    3dac:	9203      	str	r2, [sp, #12]
    3dae:	320a      	adds	r2, #10
    3db0:	2100      	movs	r1, #0
    3db2:	6840      	ldr	r0, [r0, #4]
    3db4:	4b24      	ldr	r3, [pc, #144]	; (3e48 <Parser_SystemSleep+0xac>)
    3db6:	4798      	blx	r3
    3db8:	0005      	movs	r5, r0
    3dba:	4924      	ldr	r1, [pc, #144]	; (3e4c <Parser_SystemSleep+0xb0>)
    3dbc:	6820      	ldr	r0, [r4, #0]
    3dbe:	4b24      	ldr	r3, [pc, #144]	; (3e50 <Parser_SystemSleep+0xb4>)
    3dc0:	4798      	blx	r3
    3dc2:	2800      	cmp	r0, #0
    3dc4:	d009      	beq.n	3dda <Parser_SystemSleep+0x3e>
    3dc6:	4923      	ldr	r1, [pc, #140]	; (3e54 <Parser_SystemSleep+0xb8>)
    3dc8:	6820      	ldr	r0, [r4, #0]
    3dca:	4b21      	ldr	r3, [pc, #132]	; (3e50 <Parser_SystemSleep+0xb4>)
    3dcc:	4798      	blx	r3
    3dce:	2800      	cmp	r0, #0
    3dd0:	d038      	beq.n	3e44 <Parser_SystemSleep+0xa8>
    3dd2:	4b21      	ldr	r3, [pc, #132]	; (3e58 <Parser_SystemSleep+0xbc>)
    3dd4:	6163      	str	r3, [r4, #20]
    3dd6:	b005      	add	sp, #20
    3dd8:	bd30      	pop	{r4, r5, pc}
    3dda:	2200      	movs	r2, #0
    3ddc:	491f      	ldr	r1, [pc, #124]	; (3e5c <Parser_SystemSleep+0xc0>)
    3dde:	4b20      	ldr	r3, [pc, #128]	; (3e60 <Parser_SystemSleep+0xc4>)
    3de0:	18eb      	adds	r3, r5, r3
    3de2:	428b      	cmp	r3, r1
    3de4:	d8f5      	bhi.n	3dd2 <Parser_SystemSleep+0x36>
    3de6:	9501      	str	r5, [sp, #4]
    3de8:	4b1e      	ldr	r3, [pc, #120]	; (3e64 <Parser_SystemSleep+0xc8>)
    3dea:	9303      	str	r3, [sp, #12]
    3dec:	0013      	movs	r3, r2
    3dee:	1e5a      	subs	r2, r3, #1
    3df0:	4193      	sbcs	r3, r2
    3df2:	3301      	adds	r3, #1
    3df4:	aa01      	add	r2, sp, #4
    3df6:	7113      	strb	r3, [r2, #4]
    3df8:	2201      	movs	r2, #1
    3dfa:	4b1b      	ldr	r3, [pc, #108]	; (3e68 <Parser_SystemSleep+0xcc>)
    3dfc:	701a      	strb	r2, [r3, #0]
    3dfe:	4b1b      	ldr	r3, [pc, #108]	; (3e6c <Parser_SystemSleep+0xd0>)
    3e00:	7818      	ldrb	r0, [r3, #0]
    3e02:	4b1b      	ldr	r3, [pc, #108]	; (3e70 <Parser_SystemSleep+0xd4>)
    3e04:	4798      	blx	r3
    3e06:	2800      	cmp	r0, #0
    3e08:	d0e5      	beq.n	3dd6 <Parser_SystemSleep+0x3a>
    3e0a:	2300      	movs	r3, #0
    3e0c:	466a      	mov	r2, sp
    3e0e:	7013      	strb	r3, [r2, #0]
    3e10:	3301      	adds	r3, #1
    3e12:	7053      	strb	r3, [r2, #1]
    3e14:	7093      	strb	r3, [r2, #2]
    3e16:	4669      	mov	r1, sp
    3e18:	2004      	movs	r0, #4
    3e1a:	4d16      	ldr	r5, [pc, #88]	; (3e74 <Parser_SystemSleep+0xd8>)
    3e1c:	47a8      	blx	r5
    3e1e:	4669      	mov	r1, sp
    3e20:	2005      	movs	r0, #5
    3e22:	47a8      	blx	r5
    3e24:	4b14      	ldr	r3, [pc, #80]	; (3e78 <Parser_SystemSleep+0xdc>)
    3e26:	4798      	blx	r3
    3e28:	4b14      	ldr	r3, [pc, #80]	; (3e7c <Parser_SystemSleep+0xe0>)
    3e2a:	4798      	blx	r3
    3e2c:	a801      	add	r0, sp, #4
    3e2e:	4b14      	ldr	r3, [pc, #80]	; (3e80 <Parser_SystemSleep+0xe4>)
    3e30:	4798      	blx	r3
    3e32:	2800      	cmp	r0, #0
    3e34:	d1cf      	bne.n	3dd6 <Parser_SystemSleep+0x3a>
    3e36:	4b13      	ldr	r3, [pc, #76]	; (3e84 <Parser_SystemSleep+0xe8>)
    3e38:	4798      	blx	r3
    3e3a:	4b13      	ldr	r3, [pc, #76]	; (3e88 <Parser_SystemSleep+0xec>)
    3e3c:	4798      	blx	r3
    3e3e:	4b13      	ldr	r3, [pc, #76]	; (3e8c <Parser_SystemSleep+0xf0>)
    3e40:	6163      	str	r3, [r4, #20]
    3e42:	e7c8      	b.n	3dd6 <Parser_SystemSleep+0x3a>
    3e44:	2201      	movs	r2, #1
    3e46:	e7c9      	b.n	3ddc <Parser_SystemSleep+0x40>
    3e48:	0001a575 	.word	0x0001a575
    3e4c:	0001f998 	.word	0x0001f998
    3e50:	000042a1 	.word	0x000042a1
    3e54:	0001f9a0 	.word	0x0001f9a0
    3e58:	0001f5b0 	.word	0x0001f5b0
    3e5c:	07cebbc8 	.word	0x07cebbc8
    3e60:	fffffc18 	.word	0xfffffc18
    3e64:	00003ab9 	.word	0x00003ab9
    3e68:	20000b54 	.word	0x20000b54
    3e6c:	20000b55 	.word	0x20000b55
    3e70:	00014129 	.word	0x00014129
    3e74:	00004e1d 	.word	0x00004e1d
    3e78:	00007b71 	.word	0x00007b71
    3e7c:	00007fa9 	.word	0x00007fa9
    3e80:	00008355 	.word	0x00008355
    3e84:	00007f85 	.word	0x00007f85
    3e88:	00007a25 	.word	0x00007a25
    3e8c:	0001f9a8 	.word	0x0001f9a8

00003e90 <configure_extint>:
    3e90:	b510      	push	{r4, lr}
    3e92:	b084      	sub	sp, #16
    3e94:	ac01      	add	r4, sp, #4
    3e96:	0020      	movs	r0, r4
    3e98:	4b07      	ldr	r3, [pc, #28]	; (3eb8 <configure_extint+0x28>)
    3e9a:	4798      	blx	r3
    3e9c:	231c      	movs	r3, #28
    3e9e:	9301      	str	r3, [sp, #4]
    3ea0:	2300      	movs	r3, #0
    3ea2:	6063      	str	r3, [r4, #4]
    3ea4:	3302      	adds	r3, #2
    3ea6:	72e3      	strb	r3, [r4, #11]
    3ea8:	3b01      	subs	r3, #1
    3eaa:	72a3      	strb	r3, [r4, #10]
    3eac:	0021      	movs	r1, r4
    3eae:	2008      	movs	r0, #8
    3eb0:	4b02      	ldr	r3, [pc, #8]	; (3ebc <configure_extint+0x2c>)
    3eb2:	4798      	blx	r3
    3eb4:	b004      	add	sp, #16
    3eb6:	bd10      	pop	{r4, pc}
    3eb8:	000049b5 	.word	0x000049b5
    3ebc:	000049c9 	.word	0x000049c9

00003ec0 <configure_eic_callback>:
    3ec0:	b510      	push	{r4, lr}
    3ec2:	2200      	movs	r2, #0
    3ec4:	2108      	movs	r1, #8
    3ec6:	4804      	ldr	r0, [pc, #16]	; (3ed8 <configure_eic_callback+0x18>)
    3ec8:	4b04      	ldr	r3, [pc, #16]	; (3edc <configure_eic_callback+0x1c>)
    3eca:	4798      	blx	r3
    3ecc:	2100      	movs	r1, #0
    3ece:	2008      	movs	r0, #8
    3ed0:	4b03      	ldr	r3, [pc, #12]	; (3ee0 <configure_eic_callback+0x20>)
    3ed2:	4798      	blx	r3
    3ed4:	bd10      	pop	{r4, pc}
    3ed6:	46c0      	nop			; (mov r8, r8)
    3ed8:	00003ae1 	.word	0x00003ae1
    3edc:	00004875 	.word	0x00004875
    3ee0:	000048a1 	.word	0x000048a1

00003ee4 <Parser_RxClearBuffer>:
    3ee4:	b570      	push	{r4, r5, r6, lr}
    3ee6:	4c0b      	ldr	r4, [pc, #44]	; (3f14 <Parser_RxClearBuffer+0x30>)
    3ee8:	2300      	movs	r3, #0
    3eea:	4a0b      	ldr	r2, [pc, #44]	; (3f18 <Parser_RxClearBuffer+0x34>)
    3eec:	54a3      	strb	r3, [r4, r2]
    3eee:	4a0b      	ldr	r2, [pc, #44]	; (3f1c <Parser_RxClearBuffer+0x38>)
    3ef0:	54a3      	strb	r3, [r4, r2]
    3ef2:	3201      	adds	r2, #1
    3ef4:	52a3      	strh	r3, [r4, r2]
    3ef6:	4a0a      	ldr	r2, [pc, #40]	; (3f20 <Parser_RxClearBuffer+0x3c>)
    3ef8:	52a3      	strh	r3, [r4, r2]
    3efa:	4b0a      	ldr	r3, [pc, #40]	; (3f24 <Parser_RxClearBuffer+0x40>)
    3efc:	18e0      	adds	r0, r4, r3
    3efe:	2214      	movs	r2, #20
    3f00:	2100      	movs	r1, #0
    3f02:	4d09      	ldr	r5, [pc, #36]	; (3f28 <Parser_RxClearBuffer+0x44>)
    3f04:	47a8      	blx	r5
    3f06:	4b09      	ldr	r3, [pc, #36]	; (3f2c <Parser_RxClearBuffer+0x48>)
    3f08:	18e0      	adds	r0, r4, r3
    3f0a:	2214      	movs	r2, #20
    3f0c:	2100      	movs	r1, #0
    3f0e:	47a8      	blx	r5
    3f10:	bd70      	pop	{r4, r5, r6, pc}
    3f12:	46c0      	nop			; (mov r8, r8)
    3f14:	20001f98 	.word	0x20001f98
    3f18:	0000024e 	.word	0x0000024e
    3f1c:	0000024f 	.word	0x0000024f
    3f20:	00000252 	.word	0x00000252
    3f24:	00000226 	.word	0x00000226
    3f28:	00019e35 	.word	0x00019e35
    3f2c:	0000023a 	.word	0x0000023a

00003f30 <Parser_TxAddReply>:
    3f30:	b570      	push	{r4, r5, r6, lr}
    3f32:	0005      	movs	r5, r0
    3f34:	1e0c      	subs	r4, r1, #0
    3f36:	d00f      	beq.n	3f58 <Parser_TxAddReply+0x28>
    3f38:	4e0a      	ldr	r6, [pc, #40]	; (3f64 <Parser_TxAddReply+0x34>)
    3f3a:	e007      	b.n	3f4c <Parser_TxAddReply+0x1c>
    3f3c:	21ff      	movs	r1, #255	; 0xff
    3f3e:	0028      	movs	r0, r5
    3f40:	47b0      	blx	r6
    3f42:	3cff      	subs	r4, #255	; 0xff
    3f44:	b2a4      	uxth	r4, r4
    3f46:	35ff      	adds	r5, #255	; 0xff
    3f48:	2c00      	cmp	r4, #0
    3f4a:	d005      	beq.n	3f58 <Parser_TxAddReply+0x28>
    3f4c:	2cff      	cmp	r4, #255	; 0xff
    3f4e:	d8f5      	bhi.n	3f3c <Parser_TxAddReply+0xc>
    3f50:	b2e1      	uxtb	r1, r4
    3f52:	0028      	movs	r0, r5
    3f54:	4b03      	ldr	r3, [pc, #12]	; (3f64 <Parser_TxAddReply+0x34>)
    3f56:	4798      	blx	r3
    3f58:	2102      	movs	r1, #2
    3f5a:	4803      	ldr	r0, [pc, #12]	; (3f68 <Parser_TxAddReply+0x38>)
    3f5c:	4b01      	ldr	r3, [pc, #4]	; (3f64 <Parser_TxAddReply+0x34>)
    3f5e:	4798      	blx	r3
    3f60:	bd70      	pop	{r4, r5, r6, pc}
    3f62:	46c0      	nop			; (mov r8, r8)
    3f64:	00007bdd 	.word	0x00007bdd
    3f68:	0001f9e0 	.word	0x0001f9e0

00003f6c <Parser_RxAddChar>:
    3f6c:	b570      	push	{r4, r5, r6, lr}
    3f6e:	2808      	cmp	r0, #8
    3f70:	d047      	beq.n	4002 <Parser_RxAddChar+0x96>
    3f72:	2394      	movs	r3, #148	; 0x94
    3f74:	009b      	lsls	r3, r3, #2
    3f76:	4a58      	ldr	r2, [pc, #352]	; (40d8 <Parser_RxAddChar+0x16c>)
    3f78:	5ad3      	ldrh	r3, [r2, r3]
    3f7a:	b29b      	uxth	r3, r3
    3f7c:	2289      	movs	r2, #137	; 0x89
    3f7e:	0092      	lsls	r2, r2, #2
    3f80:	4293      	cmp	r3, r2
    3f82:	d900      	bls.n	3f86 <Parser_RxAddChar+0x1a>
    3f84:	e0a1      	b.n	40ca <Parser_RxAddChar+0x15e>
    3f86:	2820      	cmp	r0, #32
    3f88:	d100      	bne.n	3f8c <Parser_RxAddChar+0x20>
    3f8a:	e073      	b.n	4074 <Parser_RxAddChar+0x108>
    3f8c:	4b52      	ldr	r3, [pc, #328]	; (40d8 <Parser_RxAddChar+0x16c>)
    3f8e:	2194      	movs	r1, #148	; 0x94
    3f90:	0089      	lsls	r1, r1, #2
    3f92:	5a5a      	ldrh	r2, [r3, r1]
    3f94:	b292      	uxth	r2, r2
    3f96:	1c54      	adds	r4, r2, #1
    3f98:	b2a4      	uxth	r4, r4
    3f9a:	525c      	strh	r4, [r3, r1]
    3f9c:	5498      	strb	r0, [r3, r2]
    3f9e:	484f      	ldr	r0, [pc, #316]	; (40dc <Parser_RxAddChar+0x170>)
    3fa0:	5a1a      	ldrh	r2, [r3, r0]
    3fa2:	3201      	adds	r2, #1
    3fa4:	b292      	uxth	r2, r2
    3fa6:	521a      	strh	r2, [r3, r0]
    3fa8:	5a5b      	ldrh	r3, [r3, r1]
    3faa:	b29b      	uxth	r3, r3
    3fac:	2b01      	cmp	r3, #1
    3fae:	d959      	bls.n	4064 <Parser_RxAddChar+0xf8>
    3fb0:	4a49      	ldr	r2, [pc, #292]	; (40d8 <Parser_RxAddChar+0x16c>)
    3fb2:	5a53      	ldrh	r3, [r2, r1]
    3fb4:	3b02      	subs	r3, #2
    3fb6:	5cd3      	ldrb	r3, [r2, r3]
    3fb8:	2b0d      	cmp	r3, #13
    3fba:	d153      	bne.n	4064 <Parser_RxAddChar+0xf8>
    3fbc:	5a53      	ldrh	r3, [r2, r1]
    3fbe:	3b01      	subs	r3, #1
    3fc0:	5cd3      	ldrb	r3, [r2, r3]
    3fc2:	2b0a      	cmp	r3, #10
    3fc4:	d14e      	bne.n	4064 <Parser_RxAddChar+0xf8>
    3fc6:	0013      	movs	r3, r2
    3fc8:	000c      	movs	r4, r1
    3fca:	5a52      	ldrh	r2, [r2, r1]
    3fcc:	3a02      	subs	r2, #2
    3fce:	2100      	movs	r1, #0
    3fd0:	5499      	strb	r1, [r3, r2]
    3fd2:	4d43      	ldr	r5, [pc, #268]	; (40e0 <Parser_RxAddChar+0x174>)
    3fd4:	5d5a      	ldrb	r2, [r3, r5]
    3fd6:	5a19      	ldrh	r1, [r3, r0]
    3fd8:	3902      	subs	r1, #2
    3fda:	b289      	uxth	r1, r1
    3fdc:	3211      	adds	r2, #17
    3fde:	32ff      	adds	r2, #255	; 0xff
    3fe0:	0052      	lsls	r2, r2, #1
    3fe2:	189a      	adds	r2, r3, r2
    3fe4:	80d1      	strh	r1, [r2, #6]
    3fe6:	5d5a      	ldrb	r2, [r3, r5]
    3fe8:	5b19      	ldrh	r1, [r3, r4]
    3fea:	5a18      	ldrh	r0, [r3, r0]
    3fec:	1a09      	subs	r1, r1, r0
    3fee:	b289      	uxth	r1, r1
    3ff0:	321d      	adds	r2, #29
    3ff2:	32ff      	adds	r2, #255	; 0xff
    3ff4:	0052      	lsls	r2, r2, #1
    3ff6:	189a      	adds	r2, r3, r2
    3ff8:	8051      	strh	r1, [r2, #2]
    3ffa:	2101      	movs	r1, #1
    3ffc:	4a39      	ldr	r2, [pc, #228]	; (40e4 <Parser_RxAddChar+0x178>)
    3ffe:	5499      	strb	r1, [r3, r2]
    4000:	e030      	b.n	4064 <Parser_RxAddChar+0xf8>
    4002:	2394      	movs	r3, #148	; 0x94
    4004:	009b      	lsls	r3, r3, #2
    4006:	4a34      	ldr	r2, [pc, #208]	; (40d8 <Parser_RxAddChar+0x16c>)
    4008:	5ad3      	ldrh	r3, [r2, r3]
    400a:	b29b      	uxth	r3, r3
    400c:	2b00      	cmp	r3, #0
    400e:	d029      	beq.n	4064 <Parser_RxAddChar+0xf8>
    4010:	2394      	movs	r3, #148	; 0x94
    4012:	009b      	lsls	r3, r3, #2
    4014:	5ad3      	ldrh	r3, [r2, r3]
    4016:	3b01      	subs	r3, #1
    4018:	5cd3      	ldrb	r3, [r2, r3]
    401a:	2b00      	cmp	r3, #0
    401c:	d123      	bne.n	4066 <Parser_RxAddChar+0xfa>
    401e:	0013      	movs	r3, r2
    4020:	492f      	ldr	r1, [pc, #188]	; (40e0 <Parser_RxAddChar+0x174>)
    4022:	5c52      	ldrb	r2, [r2, r1]
    4024:	3a01      	subs	r2, #1
    4026:	b2d2      	uxtb	r2, r2
    4028:	545a      	strb	r2, [r3, r1]
    402a:	5c5a      	ldrb	r2, [r3, r1]
    402c:	3211      	adds	r2, #17
    402e:	32ff      	adds	r2, #255	; 0xff
    4030:	0052      	lsls	r2, r2, #1
    4032:	189a      	adds	r2, r3, r2
    4034:	88d2      	ldrh	r2, [r2, #6]
    4036:	b292      	uxth	r2, r2
    4038:	4828      	ldr	r0, [pc, #160]	; (40dc <Parser_RxAddChar+0x170>)
    403a:	521a      	strh	r2, [r3, r0]
    403c:	5c5a      	ldrb	r2, [r3, r1]
    403e:	3211      	adds	r2, #17
    4040:	32ff      	adds	r2, #255	; 0xff
    4042:	0052      	lsls	r2, r2, #1
    4044:	189a      	adds	r2, r3, r2
    4046:	2000      	movs	r0, #0
    4048:	80d0      	strh	r0, [r2, #6]
    404a:	5c5a      	ldrb	r2, [r3, r1]
    404c:	321d      	adds	r2, #29
    404e:	32ff      	adds	r2, #255	; 0xff
    4050:	0052      	lsls	r2, r2, #1
    4052:	189b      	adds	r3, r3, r2
    4054:	8058      	strh	r0, [r3, #2]
    4056:	4920      	ldr	r1, [pc, #128]	; (40d8 <Parser_RxAddChar+0x16c>)
    4058:	2294      	movs	r2, #148	; 0x94
    405a:	0092      	lsls	r2, r2, #2
    405c:	5a8b      	ldrh	r3, [r1, r2]
    405e:	3b01      	subs	r3, #1
    4060:	b29b      	uxth	r3, r3
    4062:	528b      	strh	r3, [r1, r2]
    4064:	bd70      	pop	{r4, r5, r6, pc}
    4066:	491c      	ldr	r1, [pc, #112]	; (40d8 <Parser_RxAddChar+0x16c>)
    4068:	4a1c      	ldr	r2, [pc, #112]	; (40dc <Parser_RxAddChar+0x170>)
    406a:	5a8b      	ldrh	r3, [r1, r2]
    406c:	3b01      	subs	r3, #1
    406e:	b29b      	uxth	r3, r3
    4070:	528b      	strh	r3, [r1, r2]
    4072:	e7f0      	b.n	4056 <Parser_RxAddChar+0xea>
    4074:	4b1a      	ldr	r3, [pc, #104]	; (40e0 <Parser_RxAddChar+0x174>)
    4076:	4a18      	ldr	r2, [pc, #96]	; (40d8 <Parser_RxAddChar+0x16c>)
    4078:	5cd3      	ldrb	r3, [r2, r3]
    407a:	b2db      	uxtb	r3, r3
    407c:	2b08      	cmp	r3, #8
    407e:	d824      	bhi.n	40ca <Parser_RxAddChar+0x15e>
    4080:	0013      	movs	r3, r2
    4082:	2194      	movs	r1, #148	; 0x94
    4084:	0089      	lsls	r1, r1, #2
    4086:	5a52      	ldrh	r2, [r2, r1]
    4088:	b292      	uxth	r2, r2
    408a:	1c50      	adds	r0, r2, #1
    408c:	b280      	uxth	r0, r0
    408e:	5258      	strh	r0, [r3, r1]
    4090:	2500      	movs	r5, #0
    4092:	549d      	strb	r5, [r3, r2]
    4094:	4812      	ldr	r0, [pc, #72]	; (40e0 <Parser_RxAddChar+0x174>)
    4096:	5c1a      	ldrb	r2, [r3, r0]
    4098:	4c10      	ldr	r4, [pc, #64]	; (40dc <Parser_RxAddChar+0x170>)
    409a:	5b1e      	ldrh	r6, [r3, r4]
    409c:	b2b6      	uxth	r6, r6
    409e:	3211      	adds	r2, #17
    40a0:	32ff      	adds	r2, #255	; 0xff
    40a2:	0052      	lsls	r2, r2, #1
    40a4:	189a      	adds	r2, r3, r2
    40a6:	80d6      	strh	r6, [r2, #6]
    40a8:	5c1a      	ldrb	r2, [r3, r0]
    40aa:	5a59      	ldrh	r1, [r3, r1]
    40ac:	5b1e      	ldrh	r6, [r3, r4]
    40ae:	3901      	subs	r1, #1
    40b0:	1b89      	subs	r1, r1, r6
    40b2:	b289      	uxth	r1, r1
    40b4:	321d      	adds	r2, #29
    40b6:	32ff      	adds	r2, #255	; 0xff
    40b8:	0052      	lsls	r2, r2, #1
    40ba:	189a      	adds	r2, r3, r2
    40bc:	8051      	strh	r1, [r2, #2]
    40be:	5c1a      	ldrb	r2, [r3, r0]
    40c0:	3201      	adds	r2, #1
    40c2:	b2d2      	uxtb	r2, r2
    40c4:	541a      	strb	r2, [r3, r0]
    40c6:	531d      	strh	r5, [r3, r4]
    40c8:	e7cc      	b.n	4064 <Parser_RxAddChar+0xf8>
    40ca:	4b07      	ldr	r3, [pc, #28]	; (40e8 <Parser_RxAddChar+0x17c>)
    40cc:	4798      	blx	r3
    40ce:	2103      	movs	r1, #3
    40d0:	4806      	ldr	r0, [pc, #24]	; (40ec <Parser_RxAddChar+0x180>)
    40d2:	4b07      	ldr	r3, [pc, #28]	; (40f0 <Parser_RxAddChar+0x184>)
    40d4:	4798      	blx	r3
    40d6:	e7c5      	b.n	4064 <Parser_RxAddChar+0xf8>
    40d8:	20001f98 	.word	0x20001f98
    40dc:	00000252 	.word	0x00000252
    40e0:	0000024f 	.word	0x0000024f
    40e4:	0000024e 	.word	0x0000024e
    40e8:	00003ee5 	.word	0x00003ee5
    40ec:	0001f9a8 	.word	0x0001f9a8
    40f0:	00003f31 	.word	0x00003f31

000040f4 <Validate_HexValue>:
    40f4:	b570      	push	{r4, r5, r6, lr}
    40f6:	7803      	ldrb	r3, [r0, #0]
    40f8:	2b00      	cmp	r3, #0
    40fa:	d00e      	beq.n	411a <Validate_HexValue+0x26>
    40fc:	0004      	movs	r4, r0
    40fe:	4e09      	ldr	r6, [pc, #36]	; (4124 <Validate_HexValue+0x30>)
    4100:	2544      	movs	r5, #68	; 0x44
    4102:	47b0      	blx	r6
    4104:	7823      	ldrb	r3, [r4, #0]
    4106:	18c0      	adds	r0, r0, r3
    4108:	7843      	ldrb	r3, [r0, #1]
    410a:	421d      	tst	r5, r3
    410c:	d007      	beq.n	411e <Validate_HexValue+0x2a>
    410e:	3401      	adds	r4, #1
    4110:	7823      	ldrb	r3, [r4, #0]
    4112:	2b00      	cmp	r3, #0
    4114:	d1f5      	bne.n	4102 <Validate_HexValue+0xe>
    4116:	2001      	movs	r0, #1
    4118:	e002      	b.n	4120 <Validate_HexValue+0x2c>
    411a:	2001      	movs	r0, #1
    411c:	e000      	b.n	4120 <Validate_HexValue+0x2c>
    411e:	2000      	movs	r0, #0
    4120:	bd70      	pop	{r4, r5, r6, pc}
    4122:	46c0      	nop			; (mov r8, r8)
    4124:	000196ed 	.word	0x000196ed

00004128 <Parser_IntArrayToHexAscii>:
    4128:	b5f0      	push	{r4, r5, r6, r7, lr}
    412a:	46ce      	mov	lr, r9
    412c:	4647      	mov	r7, r8
    412e:	b580      	push	{r7, lr}
    4130:	b083      	sub	sp, #12
    4132:	4680      	mov	r8, r0
    4134:	9201      	str	r2, [sp, #4]
    4136:	2800      	cmp	r0, #0
    4138:	d019      	beq.n	416e <Parser_IntArrayToHexAscii+0x46>
    413a:	000c      	movs	r4, r1
    413c:	0015      	movs	r5, r2
    413e:	1e47      	subs	r7, r0, #1
    4140:	b2ff      	uxtb	r7, r7
    4142:	3701      	adds	r7, #1
    4144:	19cf      	adds	r7, r1, r7
    4146:	4e0f      	ldr	r6, [pc, #60]	; (4184 <Parser_IntArrayToHexAscii+0x5c>)
    4148:	2330      	movs	r3, #48	; 0x30
    414a:	4699      	mov	r9, r3
    414c:	e003      	b.n	4156 <Parser_IntArrayToHexAscii+0x2e>
    414e:	3401      	adds	r4, #1
    4150:	3502      	adds	r5, #2
    4152:	42bc      	cmp	r4, r7
    4154:	d00b      	beq.n	416e <Parser_IntArrayToHexAscii+0x46>
    4156:	7820      	ldrb	r0, [r4, #0]
    4158:	2210      	movs	r2, #16
    415a:	0029      	movs	r1, r5
    415c:	47b0      	blx	r6
    415e:	7823      	ldrb	r3, [r4, #0]
    4160:	2b0f      	cmp	r3, #15
    4162:	d8f4      	bhi.n	414e <Parser_IntArrayToHexAscii+0x26>
    4164:	782b      	ldrb	r3, [r5, #0]
    4166:	706b      	strb	r3, [r5, #1]
    4168:	464b      	mov	r3, r9
    416a:	702b      	strb	r3, [r5, #0]
    416c:	e7ef      	b.n	414e <Parser_IntArrayToHexAscii+0x26>
    416e:	4643      	mov	r3, r8
    4170:	005b      	lsls	r3, r3, #1
    4172:	2200      	movs	r2, #0
    4174:	9901      	ldr	r1, [sp, #4]
    4176:	54ca      	strb	r2, [r1, r3]
    4178:	b003      	add	sp, #12
    417a:	bc0c      	pop	{r2, r3}
    417c:	4690      	mov	r8, r2
    417e:	4699      	mov	r9, r3
    4180:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4182:	46c0      	nop			; (mov r8, r8)
    4184:	000196bd 	.word	0x000196bd

00004188 <Validate_Uint8DecAsciiValue>:
    4188:	b5f0      	push	{r4, r5, r6, r7, lr}
    418a:	b083      	sub	sp, #12
    418c:	0004      	movs	r4, r0
    418e:	9101      	str	r1, [sp, #4]
    4190:	4b10      	ldr	r3, [pc, #64]	; (41d4 <Validate_Uint8DecAsciiValue+0x4c>)
    4192:	4798      	blx	r3
    4194:	0006      	movs	r6, r0
    4196:	0020      	movs	r0, r4
    4198:	4b0f      	ldr	r3, [pc, #60]	; (41d8 <Validate_Uint8DecAsciiValue+0x50>)
    419a:	4798      	blx	r3
    419c:	0007      	movs	r7, r0
    419e:	b2b6      	uxth	r6, r6
    41a0:	2e03      	cmp	r6, #3
    41a2:	d814      	bhi.n	41ce <Validate_Uint8DecAsciiValue+0x46>
    41a4:	28ff      	cmp	r0, #255	; 0xff
    41a6:	d812      	bhi.n	41ce <Validate_Uint8DecAsciiValue+0x46>
    41a8:	7823      	ldrb	r3, [r4, #0]
    41aa:	2b00      	cmp	r3, #0
    41ac:	d00b      	beq.n	41c6 <Validate_Uint8DecAsciiValue+0x3e>
    41ae:	4d0b      	ldr	r5, [pc, #44]	; (41dc <Validate_Uint8DecAsciiValue+0x54>)
    41b0:	2604      	movs	r6, #4
    41b2:	47a8      	blx	r5
    41b4:	7823      	ldrb	r3, [r4, #0]
    41b6:	18c0      	adds	r0, r0, r3
    41b8:	7843      	ldrb	r3, [r0, #1]
    41ba:	421e      	tst	r6, r3
    41bc:	d007      	beq.n	41ce <Validate_Uint8DecAsciiValue+0x46>
    41be:	3401      	adds	r4, #1
    41c0:	7823      	ldrb	r3, [r4, #0]
    41c2:	2b00      	cmp	r3, #0
    41c4:	d1f5      	bne.n	41b2 <Validate_Uint8DecAsciiValue+0x2a>
    41c6:	9b01      	ldr	r3, [sp, #4]
    41c8:	701f      	strb	r7, [r3, #0]
    41ca:	2001      	movs	r0, #1
    41cc:	e000      	b.n	41d0 <Validate_Uint8DecAsciiValue+0x48>
    41ce:	2000      	movs	r0, #0
    41d0:	b003      	add	sp, #12
    41d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    41d4:	0001a269 	.word	0x0001a269
    41d8:	00019639 	.word	0x00019639
    41dc:	000196ed 	.word	0x000196ed

000041e0 <ultoa>:
    41e0:	b5f0      	push	{r4, r5, r6, r7, lr}
    41e2:	46d6      	mov	lr, sl
    41e4:	b500      	push	{lr}
    41e6:	b08e      	sub	sp, #56	; 0x38
    41e8:	9003      	str	r0, [sp, #12]
    41ea:	000c      	movs	r4, r1
    41ec:	9201      	str	r2, [sp, #4]
    41ee:	2500      	movs	r5, #0
    41f0:	4b18      	ldr	r3, [pc, #96]	; (4254 <ultoa+0x74>)
    41f2:	469a      	mov	sl, r3
    41f4:	af05      	add	r7, sp, #20
    41f6:	4e18      	ldr	r6, [pc, #96]	; (4258 <ultoa+0x78>)
    41f8:	e009      	b.n	420e <ultoa+0x2e>
    41fa:	3137      	adds	r1, #55	; 0x37
    41fc:	55e9      	strb	r1, [r5, r7]
    41fe:	9901      	ldr	r1, [sp, #4]
    4200:	0020      	movs	r0, r4
    4202:	47b0      	blx	r6
    4204:	0004      	movs	r4, r0
    4206:	1c6b      	adds	r3, r5, #1
    4208:	2800      	cmp	r0, #0
    420a:	d009      	beq.n	4220 <ultoa+0x40>
    420c:	001d      	movs	r5, r3
    420e:	9502      	str	r5, [sp, #8]
    4210:	9901      	ldr	r1, [sp, #4]
    4212:	0020      	movs	r0, r4
    4214:	47d0      	blx	sl
    4216:	2909      	cmp	r1, #9
    4218:	dcef      	bgt.n	41fa <ultoa+0x1a>
    421a:	3130      	adds	r1, #48	; 0x30
    421c:	55e9      	strb	r1, [r5, r7]
    421e:	e7ee      	b.n	41fe <ultoa+0x1e>
    4220:	9b02      	ldr	r3, [sp, #8]
    4222:	2b00      	cmp	r3, #0
    4224:	db14      	blt.n	4250 <ultoa+0x70>
    4226:	ab05      	add	r3, sp, #20
    4228:	195b      	adds	r3, r3, r5
    422a:	9a03      	ldr	r2, [sp, #12]
    422c:	a904      	add	r1, sp, #16
    422e:	1cc8      	adds	r0, r1, #3
    4230:	7819      	ldrb	r1, [r3, #0]
    4232:	7011      	strb	r1, [r2, #0]
    4234:	3b01      	subs	r3, #1
    4236:	3201      	adds	r2, #1
    4238:	4283      	cmp	r3, r0
    423a:	d1f9      	bne.n	4230 <ultoa+0x50>
    423c:	9e02      	ldr	r6, [sp, #8]
    423e:	3601      	adds	r6, #1
    4240:	2300      	movs	r3, #0
    4242:	9a03      	ldr	r2, [sp, #12]
    4244:	5593      	strb	r3, [r2, r6]
    4246:	0010      	movs	r0, r2
    4248:	b00e      	add	sp, #56	; 0x38
    424a:	bc04      	pop	{r2}
    424c:	4692      	mov	sl, r2
    424e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4250:	2600      	movs	r6, #0
    4252:	e7f5      	b.n	4240 <ultoa+0x60>
    4254:	000166b9 	.word	0x000166b9
    4258:	000165ad 	.word	0x000165ad

0000425c <Validate_UintDecAsciiValue>:
    425c:	b570      	push	{r4, r5, r6, lr}
    425e:	b084      	sub	sp, #16
    4260:	0005      	movs	r5, r0
    4262:	0016      	movs	r6, r2
    4264:	220a      	movs	r2, #10
    4266:	2100      	movs	r1, #0
    4268:	4b0a      	ldr	r3, [pc, #40]	; (4294 <Validate_UintDecAsciiValue+0x38>)
    426a:	4798      	blx	r3
    426c:	0004      	movs	r4, r0
    426e:	220a      	movs	r2, #10
    4270:	0001      	movs	r1, r0
    4272:	a801      	add	r0, sp, #4
    4274:	4b08      	ldr	r3, [pc, #32]	; (4298 <Validate_UintDecAsciiValue+0x3c>)
    4276:	4798      	blx	r3
    4278:	a901      	add	r1, sp, #4
    427a:	0028      	movs	r0, r5
    427c:	4b07      	ldr	r3, [pc, #28]	; (429c <Validate_UintDecAsciiValue+0x40>)
    427e:	4798      	blx	r3
    4280:	0003      	movs	r3, r0
    4282:	2000      	movs	r0, #0
    4284:	42b4      	cmp	r4, r6
    4286:	d901      	bls.n	428c <Validate_UintDecAsciiValue+0x30>
    4288:	b004      	add	sp, #16
    428a:	bd70      	pop	{r4, r5, r6, pc}
    428c:	4258      	negs	r0, r3
    428e:	4158      	adcs	r0, r3
    4290:	b2c0      	uxtb	r0, r0
    4292:	e7f9      	b.n	4288 <Validate_UintDecAsciiValue+0x2c>
    4294:	0001a575 	.word	0x0001a575
    4298:	000041e1 	.word	0x000041e1
    429c:	0001a1e1 	.word	0x0001a1e1

000042a0 <stricmp>:
    42a0:	b5f0      	push	{r4, r5, r6, r7, lr}
    42a2:	46de      	mov	lr, fp
    42a4:	4657      	mov	r7, sl
    42a6:	464e      	mov	r6, r9
    42a8:	b5c0      	push	{r6, r7, lr}
    42aa:	b082      	sub	sp, #8
    42ac:	0004      	movs	r4, r0
    42ae:	000e      	movs	r6, r1
    42b0:	2800      	cmp	r0, #0
    42b2:	d006      	beq.n	42c2 <stricmp+0x22>
    42b4:	2900      	cmp	r1, #0
    42b6:	d009      	beq.n	42cc <stricmp+0x2c>
    42b8:	4b1c      	ldr	r3, [pc, #112]	; (432c <stricmp+0x8c>)
    42ba:	469b      	mov	fp, r3
    42bc:	2703      	movs	r7, #3
    42be:	469a      	mov	sl, r3
    42c0:	e011      	b.n	42e6 <stricmp+0x46>
    42c2:	2900      	cmp	r1, #0
    42c4:	d02f      	beq.n	4326 <stricmp+0x86>
    42c6:	7808      	ldrb	r0, [r1, #0]
    42c8:	4240      	negs	r0, r0
    42ca:	e026      	b.n	431a <stricmp+0x7a>
    42cc:	7800      	ldrb	r0, [r0, #0]
    42ce:	e024      	b.n	431a <stricmp+0x7a>
    42d0:	3520      	adds	r5, #32
    42d2:	9501      	str	r5, [sp, #4]
    42d4:	e00f      	b.n	42f6 <stricmp+0x56>
    42d6:	b2d3      	uxtb	r3, r2
    42d8:	4599      	cmp	r9, r3
    42da:	d119      	bne.n	4310 <stricmp+0x70>
    42dc:	7823      	ldrb	r3, [r4, #0]
    42de:	2b00      	cmp	r3, #0
    42e0:	d016      	beq.n	4310 <stricmp+0x70>
    42e2:	3401      	adds	r4, #1
    42e4:	3601      	adds	r6, #1
    42e6:	7825      	ldrb	r5, [r4, #0]
    42e8:	47d8      	blx	fp
    42ea:	1940      	adds	r0, r0, r5
    42ec:	7843      	ldrb	r3, [r0, #1]
    42ee:	403b      	ands	r3, r7
    42f0:	9501      	str	r5, [sp, #4]
    42f2:	2b01      	cmp	r3, #1
    42f4:	d0ec      	beq.n	42d0 <stricmp+0x30>
    42f6:	466b      	mov	r3, sp
    42f8:	791b      	ldrb	r3, [r3, #4]
    42fa:	4699      	mov	r9, r3
    42fc:	7835      	ldrb	r5, [r6, #0]
    42fe:	47d0      	blx	sl
    4300:	1940      	adds	r0, r0, r5
    4302:	7843      	ldrb	r3, [r0, #1]
    4304:	403b      	ands	r3, r7
    4306:	002a      	movs	r2, r5
    4308:	2b01      	cmp	r3, #1
    430a:	d1e4      	bne.n	42d6 <stricmp+0x36>
    430c:	3220      	adds	r2, #32
    430e:	e7e2      	b.n	42d6 <stricmp+0x36>
    4310:	20ff      	movs	r0, #255	; 0xff
    4312:	9f01      	ldr	r7, [sp, #4]
    4314:	4007      	ands	r7, r0
    4316:	4010      	ands	r0, r2
    4318:	1a38      	subs	r0, r7, r0
    431a:	b002      	add	sp, #8
    431c:	bc1c      	pop	{r2, r3, r4}
    431e:	4691      	mov	r9, r2
    4320:	469a      	mov	sl, r3
    4322:	46a3      	mov	fp, r4
    4324:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4326:	2000      	movs	r0, #0
    4328:	e7f7      	b.n	431a <stricmp+0x7a>
    432a:	46c0      	nop			; (mov r8, r8)
    432c:	000196ed 	.word	0x000196ed

00004330 <Validate_OnOffAsciiValue>:
    4330:	b510      	push	{r4, lr}
    4332:	0004      	movs	r4, r0
    4334:	4908      	ldr	r1, [pc, #32]	; (4358 <Validate_OnOffAsciiValue+0x28>)
    4336:	4b09      	ldr	r3, [pc, #36]	; (435c <Validate_OnOffAsciiValue+0x2c>)
    4338:	4798      	blx	r3
    433a:	2300      	movs	r3, #0
    433c:	2800      	cmp	r0, #0
    433e:	d101      	bne.n	4344 <Validate_OnOffAsciiValue+0x14>
    4340:	0018      	movs	r0, r3
    4342:	bd10      	pop	{r4, pc}
    4344:	4906      	ldr	r1, [pc, #24]	; (4360 <Validate_OnOffAsciiValue+0x30>)
    4346:	0020      	movs	r0, r4
    4348:	4b04      	ldr	r3, [pc, #16]	; (435c <Validate_OnOffAsciiValue+0x2c>)
    434a:	4798      	blx	r3
    434c:	0003      	movs	r3, r0
    434e:	1e58      	subs	r0, r3, #1
    4350:	4183      	sbcs	r3, r0
    4352:	3301      	adds	r3, #1
    4354:	e7f4      	b.n	4340 <Validate_OnOffAsciiValue+0x10>
    4356:	46c0      	nop			; (mov r8, r8)
    4358:	0001f974 	.word	0x0001f974
    435c:	000042a1 	.word	0x000042a1
    4360:	0001f978 	.word	0x0001f978

00004364 <Validate_Str1Str2AsciiValue>:
    4364:	b570      	push	{r4, r5, r6, lr}
    4366:	0004      	movs	r4, r0
    4368:	0015      	movs	r5, r2
    436a:	4b08      	ldr	r3, [pc, #32]	; (438c <Validate_Str1Str2AsciiValue+0x28>)
    436c:	4798      	blx	r3
    436e:	2300      	movs	r3, #0
    4370:	2800      	cmp	r0, #0
    4372:	d101      	bne.n	4378 <Validate_Str1Str2AsciiValue+0x14>
    4374:	0018      	movs	r0, r3
    4376:	bd70      	pop	{r4, r5, r6, pc}
    4378:	0029      	movs	r1, r5
    437a:	0020      	movs	r0, r4
    437c:	4b03      	ldr	r3, [pc, #12]	; (438c <Validate_Str1Str2AsciiValue+0x28>)
    437e:	4798      	blx	r3
    4380:	0003      	movs	r3, r0
    4382:	1e58      	subs	r0, r3, #1
    4384:	4183      	sbcs	r3, r0
    4386:	3301      	adds	r3, #1
    4388:	e7f4      	b.n	4374 <Validate_Str1Str2AsciiValue+0x10>
    438a:	46c0      	nop			; (mov r8, r8)
    438c:	000042a1 	.word	0x000042a1

00004390 <xtoi>:
    4390:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4392:	46ce      	mov	lr, r9
    4394:	4647      	mov	r7, r8
    4396:	b580      	push	{r7, lr}
    4398:	0007      	movs	r7, r0
    439a:	4b16      	ldr	r3, [pc, #88]	; (43f4 <xtoi+0x64>)
    439c:	4798      	blx	r3
    439e:	3801      	subs	r0, #1
    43a0:	2600      	movs	r6, #0
    43a2:	2807      	cmp	r0, #7
    43a4:	d821      	bhi.n	43ea <xtoi+0x5a>
    43a6:	1e04      	subs	r4, r0, #0
    43a8:	db1c      	blt.n	43e4 <xtoi+0x54>
    43aa:	2501      	movs	r5, #1
    43ac:	4b12      	ldr	r3, [pc, #72]	; (43f8 <xtoi+0x68>)
    43ae:	4699      	mov	r9, r3
    43b0:	2344      	movs	r3, #68	; 0x44
    43b2:	4698      	mov	r8, r3
    43b4:	e00a      	b.n	43cc <xtoi+0x3c>
    43b6:	001a      	movs	r2, r3
    43b8:	3a30      	subs	r2, #48	; 0x30
    43ba:	2b40      	cmp	r3, #64	; 0x40
    43bc:	d901      	bls.n	43c2 <xtoi+0x32>
    43be:	3b37      	subs	r3, #55	; 0x37
    43c0:	001a      	movs	r2, r3
    43c2:	436a      	muls	r2, r5
    43c4:	18b6      	adds	r6, r6, r2
    43c6:	012d      	lsls	r5, r5, #4
    43c8:	3c01      	subs	r4, #1
    43ca:	d40e      	bmi.n	43ea <xtoi+0x5a>
    43cc:	47c8      	blx	r9
    43ce:	5d3b      	ldrb	r3, [r7, r4]
    43d0:	18c0      	adds	r0, r0, r3
    43d2:	7842      	ldrb	r2, [r0, #1]
    43d4:	4641      	mov	r1, r8
    43d6:	4211      	tst	r1, r2
    43d8:	d006      	beq.n	43e8 <xtoi+0x58>
    43da:	2b60      	cmp	r3, #96	; 0x60
    43dc:	d9eb      	bls.n	43b6 <xtoi+0x26>
    43de:	3b57      	subs	r3, #87	; 0x57
    43e0:	001a      	movs	r2, r3
    43e2:	e7ee      	b.n	43c2 <xtoi+0x32>
    43e4:	2600      	movs	r6, #0
    43e6:	e000      	b.n	43ea <xtoi+0x5a>
    43e8:	2604      	movs	r6, #4
    43ea:	0030      	movs	r0, r6
    43ec:	bc0c      	pop	{r2, r3}
    43ee:	4690      	mov	r8, r2
    43f0:	4699      	mov	r9, r3
    43f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    43f4:	0001a269 	.word	0x0001a269
    43f8:	000196ed 	.word	0x000196ed

000043fc <Parser_HexAsciiToInt>:
    43fc:	b5f0      	push	{r4, r5, r6, r7, lr}
    43fe:	46de      	mov	lr, fp
    4400:	4657      	mov	r7, sl
    4402:	464e      	mov	r6, r9
    4404:	4645      	mov	r5, r8
    4406:	b5e0      	push	{r5, r6, r7, lr}
    4408:	b083      	sub	sp, #12
    440a:	0004      	movs	r4, r0
    440c:	000f      	movs	r7, r1
    440e:	4690      	mov	r8, r2
    4410:	0008      	movs	r0, r1
    4412:	4b1f      	ldr	r3, [pc, #124]	; (4490 <Parser_HexAsciiToInt+0x94>)
    4414:	4798      	blx	r3
    4416:	b283      	uxth	r3, r0
    4418:	085d      	lsrs	r5, r3, #1
    441a:	07da      	lsls	r2, r3, #31
    441c:	d401      	bmi.n	4422 <Parser_HexAsciiToInt+0x26>
    441e:	3d01      	subs	r5, #1
    4420:	b2ad      	uxth	r5, r5
    4422:	2000      	movs	r0, #0
    4424:	42a3      	cmp	r3, r4
    4426:	d006      	beq.n	4436 <Parser_HexAsciiToInt+0x3a>
    4428:	b003      	add	sp, #12
    442a:	bc3c      	pop	{r2, r3, r4, r5}
    442c:	4690      	mov	r8, r2
    442e:	4699      	mov	r9, r3
    4430:	46a2      	mov	sl, r4
    4432:	46ab      	mov	fp, r5
    4434:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4436:	2c00      	cmp	r4, #0
    4438:	d027      	beq.n	448a <Parser_HexAsciiToInt+0x8e>
    443a:	ae01      	add	r6, sp, #4
    443c:	2300      	movs	r3, #0
    443e:	469a      	mov	sl, r3
    4440:	4b14      	ldr	r3, [pc, #80]	; (4494 <Parser_HexAsciiToInt+0x98>)
    4442:	4699      	mov	r9, r3
    4444:	e013      	b.n	446e <Parser_HexAsciiToInt+0x72>
    4446:	2330      	movs	r3, #48	; 0x30
    4448:	7033      	strb	r3, [r6, #0]
    444a:	193b      	adds	r3, r7, r4
    444c:	3b01      	subs	r3, #1
    444e:	781b      	ldrb	r3, [r3, #0]
    4450:	7073      	strb	r3, [r6, #1]
    4452:	3c01      	subs	r4, #1
    4454:	b2a4      	uxth	r4, r4
    4456:	4653      	mov	r3, sl
    4458:	70b3      	strb	r3, [r6, #2]
    445a:	46ab      	mov	fp, r5
    445c:	44c3      	add	fp, r8
    445e:	0030      	movs	r0, r6
    4460:	47c8      	blx	r9
    4462:	465b      	mov	r3, fp
    4464:	7018      	strb	r0, [r3, #0]
    4466:	3d01      	subs	r5, #1
    4468:	b2ad      	uxth	r5, r5
    446a:	2c00      	cmp	r4, #0
    446c:	d00b      	beq.n	4486 <Parser_HexAsciiToInt+0x8a>
    446e:	2c01      	cmp	r4, #1
    4470:	d9e9      	bls.n	4446 <Parser_HexAsciiToInt+0x4a>
    4472:	193b      	adds	r3, r7, r4
    4474:	1e9a      	subs	r2, r3, #2
    4476:	7812      	ldrb	r2, [r2, #0]
    4478:	7032      	strb	r2, [r6, #0]
    447a:	3b01      	subs	r3, #1
    447c:	781b      	ldrb	r3, [r3, #0]
    447e:	7073      	strb	r3, [r6, #1]
    4480:	3c02      	subs	r4, #2
    4482:	b2a4      	uxth	r4, r4
    4484:	e7e7      	b.n	4456 <Parser_HexAsciiToInt+0x5a>
    4486:	2001      	movs	r0, #1
    4488:	e7ce      	b.n	4428 <Parser_HexAsciiToInt+0x2c>
    448a:	2001      	movs	r0, #1
    448c:	e7cc      	b.n	4428 <Parser_HexAsciiToInt+0x2c>
    448e:	46c0      	nop			; (mov r8, r8)
    4490:	0001a269 	.word	0x0001a269
    4494:	00004391 	.word	0x00004391

00004498 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
    4498:	b570      	push	{r4, r5, r6, lr}
	cycles_per_ms = system_gclk_gen_get_hz(0);
    449a:	2000      	movs	r0, #0
    449c:	4b08      	ldr	r3, [pc, #32]	; (44c0 <delay_init+0x28>)
    449e:	4798      	blx	r3
    44a0:	0005      	movs	r5, r0
	cycles_per_ms /= 1000;
    44a2:	4c08      	ldr	r4, [pc, #32]	; (44c4 <delay_init+0x2c>)
    44a4:	21fa      	movs	r1, #250	; 0xfa
    44a6:	0089      	lsls	r1, r1, #2
    44a8:	47a0      	blx	r4
    44aa:	4b07      	ldr	r3, [pc, #28]	; (44c8 <delay_init+0x30>)
    44ac:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
    44ae:	4907      	ldr	r1, [pc, #28]	; (44cc <delay_init+0x34>)
    44b0:	0028      	movs	r0, r5
    44b2:	47a0      	blx	r4
    44b4:	4b06      	ldr	r3, [pc, #24]	; (44d0 <delay_init+0x38>)
    44b6:	6018      	str	r0, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
    44b8:	2205      	movs	r2, #5
    44ba:	4b06      	ldr	r3, [pc, #24]	; (44d4 <delay_init+0x3c>)
    44bc:	601a      	str	r2, [r3, #0]
}
    44be:	bd70      	pop	{r4, r5, r6, pc}
    44c0:	000070d1 	.word	0x000070d1
    44c4:	000165ad 	.word	0x000165ad
    44c8:	2000000c 	.word	0x2000000c
    44cc:	000f4240 	.word	0x000f4240
    44d0:	20000010 	.word	0x20000010
    44d4:	e000e010 	.word	0xe000e010

000044d8 <delay_cycles_us>:
 *
 * \param n  Number of microseconds to wait
 */
void delay_cycles_us(
		uint32_t n)
{
    44d8:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 10u */
		delay_cycles(cycles_per_us);
    44da:	4b08      	ldr	r3, [pc, #32]	; (44fc <delay_cycles_us+0x24>)
    44dc:	681c      	ldr	r4, [r3, #0]
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
		SysTick->LOAD = n;
    44de:	4a08      	ldr	r2, [pc, #32]	; (4500 <delay_cycles_us+0x28>)
		SysTick->VAL = 0;
    44e0:	2500      	movs	r5, #0

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    44e2:	2180      	movs	r1, #128	; 0x80
    44e4:	0249      	lsls	r1, r1, #9
	while (n--) {
    44e6:	3801      	subs	r0, #1
    44e8:	d307      	bcc.n	44fa <delay_cycles_us+0x22>
	if (n > 0) {
    44ea:	2c00      	cmp	r4, #0
    44ec:	d0fb      	beq.n	44e6 <delay_cycles_us+0xe>
		SysTick->LOAD = n;
    44ee:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
    44f0:	6095      	str	r5, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    44f2:	6813      	ldr	r3, [r2, #0]
    44f4:	420b      	tst	r3, r1
    44f6:	d0fc      	beq.n	44f2 <delay_cycles_us+0x1a>
    44f8:	e7f5      	b.n	44e6 <delay_cycles_us+0xe>
	}
}
    44fa:	bd30      	pop	{r4, r5, pc}
    44fc:	20000010 	.word	0x20000010
    4500:	e000e010 	.word	0xe000e010

00004504 <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
    4504:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
    4506:	4b08      	ldr	r3, [pc, #32]	; (4528 <delay_cycles_ms+0x24>)
    4508:	681c      	ldr	r4, [r3, #0]
		SysTick->LOAD = n;
    450a:	4a08      	ldr	r2, [pc, #32]	; (452c <delay_cycles_ms+0x28>)
		SysTick->VAL = 0;
    450c:	2500      	movs	r5, #0
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    450e:	2180      	movs	r1, #128	; 0x80
    4510:	0249      	lsls	r1, r1, #9
	while (n--) {
    4512:	3801      	subs	r0, #1
    4514:	d307      	bcc.n	4526 <delay_cycles_ms+0x22>
	if (n > 0) {
    4516:	2c00      	cmp	r4, #0
    4518:	d0fb      	beq.n	4512 <delay_cycles_ms+0xe>
		SysTick->LOAD = n;
    451a:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
    451c:	6095      	str	r5, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    451e:	6813      	ldr	r3, [r2, #0]
    4520:	420b      	tst	r3, r1
    4522:	d0fc      	beq.n	451e <delay_cycles_ms+0x1a>
    4524:	e7f5      	b.n	4512 <delay_cycles_ms+0xe>
	}
}
    4526:	bd30      	pop	{r4, r5, pc}
    4528:	2000000c 	.word	0x2000000c
    452c:	e000e010 	.word	0xe000e010

00004530 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
    4530:	4b0c      	ldr	r3, [pc, #48]	; (4564 <cpu_irq_enter_critical+0x34>)
    4532:	681b      	ldr	r3, [r3, #0]
    4534:	2b00      	cmp	r3, #0
    4536:	d106      	bne.n	4546 <cpu_irq_enter_critical+0x16>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    4538:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
    453c:	2b00      	cmp	r3, #0
    453e:	d007      	beq.n	4550 <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    4540:	2200      	movs	r2, #0
    4542:	4b09      	ldr	r3, [pc, #36]	; (4568 <cpu_irq_enter_critical+0x38>)
    4544:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    4546:	4a07      	ldr	r2, [pc, #28]	; (4564 <cpu_irq_enter_critical+0x34>)
    4548:	6813      	ldr	r3, [r2, #0]
    454a:	3301      	adds	r3, #1
    454c:	6013      	str	r3, [r2, #0]
}
    454e:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
    4550:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    4552:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    4556:	2200      	movs	r2, #0
    4558:	4b04      	ldr	r3, [pc, #16]	; (456c <cpu_irq_enter_critical+0x3c>)
    455a:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    455c:	3201      	adds	r2, #1
    455e:	4b02      	ldr	r3, [pc, #8]	; (4568 <cpu_irq_enter_critical+0x38>)
    4560:	701a      	strb	r2, [r3, #0]
    4562:	e7f0      	b.n	4546 <cpu_irq_enter_critical+0x16>
    4564:	20000b58 	.word	0x20000b58
    4568:	20000b5c 	.word	0x20000b5c
    456c:	20000014 	.word	0x20000014

00004570 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    4570:	4b08      	ldr	r3, [pc, #32]	; (4594 <cpu_irq_leave_critical+0x24>)
    4572:	681a      	ldr	r2, [r3, #0]
    4574:	3a01      	subs	r2, #1
    4576:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    4578:	681b      	ldr	r3, [r3, #0]
    457a:	2b00      	cmp	r3, #0
    457c:	d109      	bne.n	4592 <cpu_irq_leave_critical+0x22>
    457e:	4b06      	ldr	r3, [pc, #24]	; (4598 <cpu_irq_leave_critical+0x28>)
    4580:	781b      	ldrb	r3, [r3, #0]
    4582:	2b00      	cmp	r3, #0
    4584:	d005      	beq.n	4592 <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
    4586:	2201      	movs	r2, #1
    4588:	4b04      	ldr	r3, [pc, #16]	; (459c <cpu_irq_leave_critical+0x2c>)
    458a:	701a      	strb	r2, [r3, #0]
    458c:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    4590:	b662      	cpsie	i
	}
}
    4592:	4770      	bx	lr
    4594:	20000b58 	.word	0x20000b58
    4598:	20000b5c 	.word	0x20000b5c
    459c:	20000014 	.word	0x20000014

000045a0 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
    45a0:	b5f0      	push	{r4, r5, r6, r7, lr}
    45a2:	46c6      	mov	lr, r8
    45a4:	b500      	push	{lr}
    45a6:	b082      	sub	sp, #8
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
    45a8:	ac01      	add	r4, sp, #4
    45aa:	2501      	movs	r5, #1
    45ac:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
    45ae:	2300      	movs	r3, #0
    45b0:	4698      	mov	r8, r3
    45b2:	70a3      	strb	r3, [r4, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    45b4:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
    45b6:	0021      	movs	r1, r4
    45b8:	2013      	movs	r0, #19
    45ba:	4e12      	ldr	r6, [pc, #72]	; (4604 <system_board_init+0x64>)
    45bc:	47b0      	blx	r6
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    45be:	4f12      	ldr	r7, [pc, #72]	; (4608 <system_board_init+0x68>)
    45c0:	2380      	movs	r3, #128	; 0x80
    45c2:	031b      	lsls	r3, r3, #12
    45c4:	61bb      	str	r3, [r7, #24]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);
	
	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    45c6:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(LED_1_PIN, &pin_conf);
    45c8:	0021      	movs	r1, r4
    45ca:	2012      	movs	r0, #18
    45cc:	47b0      	blx	r6
    45ce:	2380      	movs	r3, #128	; 0x80
    45d0:	02db      	lsls	r3, r3, #11
    45d2:	61bb      	str	r3, [r7, #24]
	port_pin_set_output_level(LED_1_PIN, LED_1_INACTIVE);
#ifdef RFSWITCH_ENABLE
	/* Configure RFSWITCH as output */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    45d4:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(RF_SWITCH_PIN, &pin_conf);
    45d6:	0021      	movs	r1, r4
    45d8:	200d      	movs	r0, #13
    45da:	47b0      	blx	r6
	} else {
		port_base->OUTCLR.reg = pin_mask;
    45dc:	2380      	movs	r3, #128	; 0x80
    45de:	019b      	lsls	r3, r3, #6
    45e0:	617b      	str	r3, [r7, #20]
	port_pin_set_output_level(RF_SWITCH_PIN, RF_SWITCH_INACTIVE);	
#endif

#ifdef TCXO_ENABLE
	/* Configure TXPO PWR as output */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    45e2:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(TCXO_PWR_PIN, &pin_conf);
    45e4:	0021      	movs	r1, r4
    45e6:	2009      	movs	r0, #9
    45e8:	47b0      	blx	r6
    45ea:	2380      	movs	r3, #128	; 0x80
    45ec:	009b      	lsls	r3, r3, #2
    45ee:	617b      	str	r3, [r7, #20]
	port_pin_set_output_level(TCXO_PWR_PIN, TCXO_PWR_INACTIVE);
#endif
	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
    45f0:	4643      	mov	r3, r8
    45f2:	7023      	strb	r3, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
    45f4:	7065      	strb	r5, [r4, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
    45f6:	0021      	movs	r1, r4
    45f8:	201c      	movs	r0, #28
    45fa:	47b0      	blx	r6
		
}
    45fc:	b002      	add	sp, #8
    45fe:	bc04      	pop	{r2}
    4600:	4690      	mov	r8, r2
    4602:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4604:	00004e1d 	.word	0x00004e1d
    4608:	40002800 	.word	0x40002800

0000460c <ADC_Handler>:
		}

	MREPEAT(ADC_INST_NUM, _ADC_INTERRUPT_HANDLER, 0)
#else
void ADC_Handler(void)
{
    460c:	b570      	push	{r4, r5, r6, lr}
	struct adc_module *module = _adc_instances[instance];
    460e:	4b2f      	ldr	r3, [pc, #188]	; (46cc <ADC_Handler+0xc0>)
    4610:	681c      	ldr	r4, [r3, #0]
	uint32_t flags = module->hw->INTFLAG.reg & module->hw->INTENSET.reg;
    4612:	6823      	ldr	r3, [r4, #0]
    4614:	799a      	ldrb	r2, [r3, #6]
    4616:	795d      	ldrb	r5, [r3, #5]
    4618:	4015      	ands	r5, r2
	if (flags & ADC_INTFLAG_RESRDY) {
    461a:	07ea      	lsls	r2, r5, #31
    461c:	d52a      	bpl.n	4674 <ADC_Handler+0x68>
		module->hw->INTFLAG.reg = ADC_INTFLAG_RESRDY;
    461e:	2201      	movs	r2, #1
    4620:	719a      	strb	r2, [r3, #6]
		*(module->job_buffer++) = module->hw->RESULT.reg;
    4622:	6962      	ldr	r2, [r4, #20]
    4624:	1c93      	adds	r3, r2, #2
    4626:	6163      	str	r3, [r4, #20]
    4628:	6823      	ldr	r3, [r4, #0]
    462a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
    462c:	b29b      	uxth	r3, r3
    462e:	8013      	strh	r3, [r2, #0]
		if (--module->remaining_conversions > 0) {
    4630:	8b23      	ldrh	r3, [r4, #24]
    4632:	3b01      	subs	r3, #1
    4634:	b29b      	uxth	r3, r3
    4636:	8323      	strh	r3, [r4, #24]
    4638:	2b00      	cmp	r3, #0
    463a:	d015      	beq.n	4668 <ADC_Handler+0x5c>
			if (module->software_trigger == true
    463c:	7f63      	ldrb	r3, [r4, #29]
    463e:	2b00      	cmp	r3, #0
    4640:	d018      	beq.n	4674 <ADC_Handler+0x68>
				&& (!(module->hw->SEQSTATUS.reg & ADC_SEQSTATUS_SEQBUSY))) {
    4642:	6822      	ldr	r2, [r4, #0]
    4644:	79d3      	ldrb	r3, [r2, #7]
    4646:	b25b      	sxtb	r3, r3
    4648:	2b00      	cmp	r3, #0
    464a:	db13      	blt.n	4674 <ADC_Handler+0x68>
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;

	if (adc_module->SYNCBUSY.reg) {
    464c:	8c13      	ldrh	r3, [r2, #32]
    464e:	b29b      	uxth	r3, r3
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;

	while (adc_is_syncing(module_inst)) {
    4650:	2b00      	cmp	r3, #0
    4652:	d1fb      	bne.n	464c <ADC_Handler+0x40>
		/* Wait for synchronization */
	}

	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
    4654:	7e13      	ldrb	r3, [r2, #24]
    4656:	2102      	movs	r1, #2
    4658:	430b      	orrs	r3, r1
    465a:	7613      	strb	r3, [r2, #24]
	Adc *const adc_module = module_inst->hw;
    465c:	6822      	ldr	r2, [r4, #0]
	if (adc_module->SYNCBUSY.reg) {
    465e:	8c13      	ldrh	r3, [r2, #32]
    4660:	b29b      	uxth	r3, r3

	while (adc_is_syncing(module_inst)) {
    4662:	2b00      	cmp	r3, #0
    4664:	d1fb      	bne.n	465e <ADC_Handler+0x52>
    4666:	e005      	b.n	4674 <ADC_Handler+0x68>
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
	/* Enable interrupt */
	adc_module->INTENCLR.reg = interrupt;
    4668:	2301      	movs	r3, #1
    466a:	6822      	ldr	r2, [r4, #0]
    466c:	7113      	strb	r3, [r2, #4]
			if (module->job_status == STATUS_BUSY) {
    466e:	7f23      	ldrb	r3, [r4, #28]
    4670:	2b05      	cmp	r3, #5
    4672:	d016      	beq.n	46a2 <ADC_Handler+0x96>
	if (flags & ADC_INTFLAG_WINMON) {
    4674:	076b      	lsls	r3, r5, #29
    4676:	d508      	bpl.n	468a <ADC_Handler+0x7e>
		module->hw->INTFLAG.reg = ADC_INTFLAG_WINMON;
    4678:	2304      	movs	r3, #4
    467a:	6822      	ldr	r2, [r4, #0]
    467c:	7193      	strb	r3, [r2, #6]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_WINDOW)) &&
    467e:	7ee3      	ldrb	r3, [r4, #27]
    4680:	079b      	lsls	r3, r3, #30
    4682:	d502      	bpl.n	468a <ADC_Handler+0x7e>
    4684:	7ea3      	ldrb	r3, [r4, #26]
    4686:	079b      	lsls	r3, r3, #30
    4688:	d417      	bmi.n	46ba <ADC_Handler+0xae>
	if (flags & ADC_INTFLAG_OVERRUN) {
    468a:	07ab      	lsls	r3, r5, #30
    468c:	d508      	bpl.n	46a0 <ADC_Handler+0x94>
		module->hw->INTFLAG.reg = ADC_INTFLAG_OVERRUN;
    468e:	2302      	movs	r3, #2
    4690:	6822      	ldr	r2, [r4, #0]
    4692:	7193      	strb	r3, [r2, #6]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_ERROR)) &&
    4694:	7ee3      	ldrb	r3, [r4, #27]
    4696:	075b      	lsls	r3, r3, #29
    4698:	d502      	bpl.n	46a0 <ADC_Handler+0x94>
    469a:	7ea3      	ldrb	r3, [r4, #26]
    469c:	075b      	lsls	r3, r3, #29
    469e:	d410      	bmi.n	46c2 <ADC_Handler+0xb6>
	_adc_interrupt_handler(0);
}
    46a0:	bd70      	pop	{r4, r5, r6, pc}
				module->job_status = STATUS_OK;
    46a2:	2300      	movs	r3, #0
    46a4:	7723      	strb	r3, [r4, #28]
				if ((module->enabled_callback_mask &
    46a6:	7ee3      	ldrb	r3, [r4, #27]
    46a8:	07db      	lsls	r3, r3, #31
    46aa:	d5e3      	bpl.n	4674 <ADC_Handler+0x68>
						(1 << ADC_CALLBACK_READ_BUFFER)) &&
    46ac:	7ea3      	ldrb	r3, [r4, #26]
    46ae:	07db      	lsls	r3, r3, #31
    46b0:	d5e0      	bpl.n	4674 <ADC_Handler+0x68>
					(module->callback[ADC_CALLBACK_READ_BUFFER])(module);
    46b2:	0020      	movs	r0, r4
    46b4:	68a3      	ldr	r3, [r4, #8]
    46b6:	4798      	blx	r3
    46b8:	e7dc      	b.n	4674 <ADC_Handler+0x68>
			(module->callback[ADC_CALLBACK_WINDOW])(module);
    46ba:	0020      	movs	r0, r4
    46bc:	68e3      	ldr	r3, [r4, #12]
    46be:	4798      	blx	r3
    46c0:	e7e3      	b.n	468a <ADC_Handler+0x7e>
			(module->callback[ADC_CALLBACK_ERROR])(module);
    46c2:	6923      	ldr	r3, [r4, #16]
    46c4:	0020      	movs	r0, r4
    46c6:	4798      	blx	r3
}
    46c8:	e7ea      	b.n	46a0 <ADC_Handler+0x94>
    46ca:	46c0      	nop			; (mov r8, r8)
    46cc:	200021ec 	.word	0x200021ec

000046d0 <aes_get_config_defaults>:
		struct aes_config *const config)
{

	/* Sanity check arguments */
	Assert(config);
	config->encrypt_mode = AES_ENCRYPTION;
    46d0:	2301      	movs	r3, #1
    46d2:	7003      	strb	r3, [r0, #0]
	config->key_size = AES_KEY_SIZE_128;
    46d4:	2300      	movs	r3, #0
    46d6:	7043      	strb	r3, [r0, #1]
	config->start_mode = AES_MANUAL_START;
    46d8:	7083      	strb	r3, [r0, #2]
	config->opmode= AES_ECB_MODE;
    46da:	70c3      	strb	r3, [r0, #3]
	config->cfb_size = AES_CFB_SIZE_128;
    46dc:	7103      	strb	r3, [r0, #4]
	config->ctype = AES_COUNTERMEASURE_TYPE_ALL;
    46de:	220f      	movs	r2, #15
    46e0:	7142      	strb	r2, [r0, #5]
	config->enable_xor_key = false;
    46e2:	7183      	strb	r3, [r0, #6]
	config->enable_key_gen = false;
    46e4:	71c3      	strb	r3, [r0, #7]
	config->lod = false;
    46e6:	7203      	strb	r3, [r0, #8]
}
    46e8:	4770      	bx	lr

000046ea <aes_enable>:
 */
void aes_enable(struct aes_module *const module)
{
	Assert(module);
	Assert(module->hw);
	module->hw->CTRLA.reg |= AES_CTRLA_ENABLE;
    46ea:	6802      	ldr	r2, [r0, #0]
    46ec:	6813      	ldr	r3, [r2, #0]
    46ee:	2102      	movs	r1, #2
    46f0:	430b      	orrs	r3, r1
    46f2:	6013      	str	r3, [r2, #0]

}
    46f4:	4770      	bx	lr

000046f6 <aes_disable>:
{
	Assert(module);
	Assert(module->hw);

	/* Disbale interrupt */
	module->hw->INTENCLR.reg = AES_INTENCLR_MASK;
    46f6:	2303      	movs	r3, #3
    46f8:	6802      	ldr	r2, [r0, #0]
    46fa:	7153      	strb	r3, [r2, #5]
	/* Clear interrupt flag */
	module->hw->INTFLAG.reg = AES_INTFLAG_MASK;
    46fc:	6802      	ldr	r2, [r0, #0]
    46fe:	71d3      	strb	r3, [r2, #7]

	module->hw->CTRLA.reg &= (~AES_CTRLA_ENABLE);
    4700:	6802      	ldr	r2, [r0, #0]
    4702:	6813      	ldr	r3, [r2, #0]
    4704:	2102      	movs	r1, #2
    4706:	438b      	bics	r3, r1
    4708:	6013      	str	r3, [r2, #0]
}
    470a:	4770      	bx	lr

0000470c <aes_set_config>:
 */
void aes_set_config(
		struct aes_module *const module,
		Aes *const hw,
		struct aes_config *const config)
{
    470c:	b570      	push	{r4, r5, r6, lr}
    470e:	0004      	movs	r4, r0
    4710:	000d      	movs	r5, r1
	/* Validate arguments. */
	Assert(hw);
	Assert(config);
	Assert(module);

	module->opmode = config->opmode;
    4712:	78d3      	ldrb	r3, [r2, #3]
    4714:	7103      	strb	r3, [r0, #4]
	module->hw = hw;
    4716:	6021      	str	r1, [r4, #0]
	module->key_size = config->key_size;
    4718:	7853      	ldrb	r3, [r2, #1]
    471a:	7143      	strb	r3, [r0, #5]
	module->cfb_size = config->cfb_size;
    471c:	7913      	ldrb	r3, [r2, #4]
    471e:	7183      	strb	r3, [r0, #6]

	ul_mode |= (config->encrypt_mode << AES_CTRLA_CIPHER_Pos)
    4720:	7813      	ldrb	r3, [r2, #0]
    4722:	029b      	lsls	r3, r3, #10
			 | (config->start_mode << AES_CTRLA_STARTMODE_Pos)
    4724:	7891      	ldrb	r1, [r2, #2]
    4726:	02c9      	lsls	r1, r1, #11
    4728:	430b      	orrs	r3, r1
			 | (config->key_size << AES_CTRLA_KEYSIZE_Pos)
    472a:	7851      	ldrb	r1, [r2, #1]
    472c:	0209      	lsls	r1, r1, #8
    472e:	430b      	orrs	r3, r1
			 | (config->opmode << AES_CTRLA_AESMODE_Pos)
    4730:	78d1      	ldrb	r1, [r2, #3]
    4732:	0089      	lsls	r1, r1, #2
    4734:	430b      	orrs	r3, r1
			 | (config->cfb_size << AES_CTRLA_CFBS_Pos)
    4736:	7911      	ldrb	r1, [r2, #4]
    4738:	0149      	lsls	r1, r1, #5
    473a:	430b      	orrs	r3, r1
			 | (AES_CTRLA_CTYPE(config->ctype))
			 | (config->enable_xor_key << AES_CTRLA_XORKEY_Pos)
    473c:	7991      	ldrb	r1, [r2, #6]
    473e:	0389      	lsls	r1, r1, #14
			 | (config->enable_key_gen << AES_CTRLA_KEYGEN_Pos)
    4740:	79d0      	ldrb	r0, [r2, #7]
    4742:	0340      	lsls	r0, r0, #13
			 | (config->lod << AES_CTRLA_LOD_Pos);
    4744:	4301      	orrs	r1, r0
    4746:	7a10      	ldrb	r0, [r2, #8]
    4748:	0300      	lsls	r0, r0, #12
    474a:	4301      	orrs	r1, r0
			 | (AES_CTRLA_CTYPE(config->ctype))
    474c:	7952      	ldrb	r2, [r2, #5]
    474e:	0412      	lsls	r2, r2, #16
    4750:	20f0      	movs	r0, #240	; 0xf0
    4752:	0300      	lsls	r0, r0, #12
    4754:	4002      	ands	r2, r0
			 | (config->lod << AES_CTRLA_LOD_Pos);
    4756:	430a      	orrs	r2, r1
    4758:	4313      	orrs	r3, r2
    475a:	001e      	movs	r6, r3
	if (hw->CTRLA.reg & AES_CTRLA_ENABLE) {
    475c:	682b      	ldr	r3, [r5, #0]
    475e:	079b      	lsls	r3, r3, #30
    4760:	d401      	bmi.n	4766 <aes_set_config+0x5a>
		aes_disable(module);
		hw->CTRLA.reg = ul_mode;
		aes_enable(module);
	} else {
		hw->CTRLA.reg = ul_mode;
    4762:	602e      	str	r6, [r5, #0]
	}
}
    4764:	bd70      	pop	{r4, r5, r6, pc}
		aes_disable(module);
    4766:	0020      	movs	r0, r4
    4768:	4b03      	ldr	r3, [pc, #12]	; (4778 <aes_set_config+0x6c>)
    476a:	4798      	blx	r3
		hw->CTRLA.reg = ul_mode;
    476c:	602e      	str	r6, [r5, #0]
		aes_enable(module);
    476e:	0020      	movs	r0, r4
    4770:	4b02      	ldr	r3, [pc, #8]	; (477c <aes_set_config+0x70>)
    4772:	4798      	blx	r3
    4774:	e7f6      	b.n	4764 <aes_set_config+0x58>
    4776:	46c0      	nop			; (mov r8, r8)
    4778:	000046f7 	.word	0x000046f7
    477c:	000046eb 	.word	0x000046eb

00004780 <aes_init>:
{
    4780:	b570      	push	{r4, r5, r6, lr}
		case SYSTEM_CLOCK_APB_APBB:
			MCLK->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			MCLK->APBCMASK.reg |= mask;
    4782:	4c05      	ldr	r4, [pc, #20]	; (4798 <aes_init+0x18>)
    4784:	69e5      	ldr	r5, [r4, #28]
    4786:	2380      	movs	r3, #128	; 0x80
    4788:	019b      	lsls	r3, r3, #6
    478a:	432b      	orrs	r3, r5
    478c:	61e3      	str	r3, [r4, #28]
	hw->CTRLA.reg = AES_CTRLA_SWRST;
    478e:	2301      	movs	r3, #1
    4790:	600b      	str	r3, [r1, #0]
	aes_set_config(module,hw, config);
    4792:	4b02      	ldr	r3, [pc, #8]	; (479c <aes_init+0x1c>)
    4794:	4798      	blx	r3
}
    4796:	bd70      	pop	{r4, r5, r6, pc}
    4798:	40000400 	.word	0x40000400
    479c:	0000470d 	.word	0x0000470d

000047a0 <aes_write_key>:
 * \note The key size depends on the current AES configuration.
 */
void aes_write_key(
		struct aes_module *const module,
		const uint32_t *key)
{
    47a0:	b570      	push	{r4, r5, r6, lr}
	/* Validate arguments. */
	Assert(module);
	Assert(module->hw);
	Assert(key);

	switch (module->key_size) {
    47a2:	7943      	ldrb	r3, [r0, #5]
    47a4:	2b01      	cmp	r3, #1
    47a6:	d005      	beq.n	47b4 <aes_write_key+0x14>
    47a8:	2b00      	cmp	r3, #0
    47aa:	d010      	beq.n	47ce <aes_write_key+0x2e>
    47ac:	2b02      	cmp	r3, #2
    47ae:	d10d      	bne.n	47cc <aes_write_key+0x2c>
	case AES_KEY_SIZE_192:
		key_length = 6;
		break;

	case AES_KEY_SIZE_256:
		key_length = 8;
    47b0:	2508      	movs	r5, #8
    47b2:	e000      	b.n	47b6 <aes_write_key+0x16>
		key_length = 6;
    47b4:	2506      	movs	r5, #6
{
    47b6:	2300      	movs	r3, #0
	default:
		break;
	}

	for (i = 0; i < key_length; i++) {
		module->hw->KEYWORD[i].reg = *key;
    47b8:	c910      	ldmia	r1!, {r4}
    47ba:	1c9a      	adds	r2, r3, #2
    47bc:	0092      	lsls	r2, r2, #2
    47be:	6806      	ldr	r6, [r0, #0]
    47c0:	46b4      	mov	ip, r6
    47c2:	4462      	add	r2, ip
    47c4:	6054      	str	r4, [r2, #4]
	for (i = 0; i < key_length; i++) {
    47c6:	3301      	adds	r3, #1
    47c8:	42ab      	cmp	r3, r5
    47ca:	d3f5      	bcc.n	47b8 <aes_write_key+0x18>
		key++;
	}
}
    47cc:	bd70      	pop	{r4, r5, r6, pc}
		key_length = 4;
    47ce:	2504      	movs	r5, #4
    47d0:	e7f1      	b.n	47b6 <aes_write_key+0x16>
	...

000047d4 <aes_write_input_data>:
 * \param[in] input_data_buffer Pointer to an input data buffer
 */
void aes_write_input_data(
		struct aes_module *const module,
		const uint32_t *input_data_buffer)
{
    47d4:	b510      	push	{r4, lr}
	/* Validate arguments. */
	Assert(module);
	Assert(module->hw);;
	Assert(input_data_buffer);

	module->hw->DATABUFPTR.reg = 0;
    47d6:	2300      	movs	r3, #0
    47d8:	6802      	ldr	r2, [r0, #0]
    47da:	7213      	strb	r3, [r2, #8]
	if (module->opmode == AES_CFB_MODE
		&& module->cfb_size == AES_CFB_SIZE_64){
    47dc:	4b0f      	ldr	r3, [pc, #60]	; (481c <aes_write_input_data+0x48>)
    47de:	6842      	ldr	r2, [r0, #4]
    47e0:	4013      	ands	r3, r2
	if (module->opmode == AES_CFB_MODE
    47e2:	4a0f      	ldr	r2, [pc, #60]	; (4820 <aes_write_input_data+0x4c>)
    47e4:	4293      	cmp	r3, r2
    47e6:	d00a      	beq.n	47fe <aes_write_input_data+0x2a>
		for (i = 0; i < 2; i++) {
			module->hw->INDATA.reg = *input_data_buffer;
			input_data_buffer++;
		}
	} else if (module->opmode == AES_CFB_MODE
    47e8:	7903      	ldrb	r3, [r0, #4]
    47ea:	2b03      	cmp	r3, #3
    47ec:	d00e      	beq.n	480c <aes_write_input_data+0x38>
    47ee:	000c      	movs	r4, r1
    47f0:	3410      	adds	r4, #16
		&& (module->cfb_size == AES_CFB_SIZE_32 || module->cfb_size == AES_CFB_SIZE_16)){
		module->hw->INDATA.reg = *input_data_buffer;
	} else {
		for (i = 0; i < 4; i++) {
			module->hw->INDATA.reg = *input_data_buffer;
    47f2:	6803      	ldr	r3, [r0, #0]
    47f4:	c904      	ldmia	r1!, {r2}
    47f6:	639a      	str	r2, [r3, #56]	; 0x38
		for (i = 0; i < 4; i++) {
    47f8:	428c      	cmp	r4, r1
    47fa:	d1fa      	bne.n	47f2 <aes_write_input_data+0x1e>
			input_data_buffer++;
		}
	}
}
    47fc:	bd10      	pop	{r4, pc}
			module->hw->INDATA.reg = *input_data_buffer;
    47fe:	6803      	ldr	r3, [r0, #0]
    4800:	680a      	ldr	r2, [r1, #0]
    4802:	639a      	str	r2, [r3, #56]	; 0x38
    4804:	6803      	ldr	r3, [r0, #0]
    4806:	684a      	ldr	r2, [r1, #4]
    4808:	639a      	str	r2, [r3, #56]	; 0x38
    480a:	e7f7      	b.n	47fc <aes_write_input_data+0x28>
		&& (module->cfb_size == AES_CFB_SIZE_32 || module->cfb_size == AES_CFB_SIZE_16)){
    480c:	7983      	ldrb	r3, [r0, #6]
    480e:	3b02      	subs	r3, #2
    4810:	2b01      	cmp	r3, #1
    4812:	d8ec      	bhi.n	47ee <aes_write_input_data+0x1a>
		module->hw->INDATA.reg = *input_data_buffer;
    4814:	6803      	ldr	r3, [r0, #0]
    4816:	680a      	ldr	r2, [r1, #0]
    4818:	639a      	str	r2, [r3, #56]	; 0x38
    481a:	e7ef      	b.n	47fc <aes_write_input_data+0x28>
    481c:	00ff00ff 	.word	0x00ff00ff
    4820:	00010003 	.word	0x00010003

00004824 <aes_read_output_data>:
	/* Validate arguments. */
	Assert(module);
	Assert(module->hw);
	Assert(output_data_buffer);

	module->hw->DATABUFPTR.reg = 0;
    4824:	2300      	movs	r3, #0
    4826:	6802      	ldr	r2, [r0, #0]
    4828:	7213      	strb	r3, [r2, #8]
	if (module->opmode == AES_CFB_MODE
		&& module->cfb_size == AES_CFB_SIZE_64){
    482a:	4b10      	ldr	r3, [pc, #64]	; (486c <aes_read_output_data+0x48>)
    482c:	6842      	ldr	r2, [r0, #4]
    482e:	4013      	ands	r3, r2
	if (module->opmode == AES_CFB_MODE
    4830:	4a0f      	ldr	r2, [pc, #60]	; (4870 <aes_read_output_data+0x4c>)
    4832:	4293      	cmp	r3, r2
    4834:	d00a      	beq.n	484c <aes_read_output_data+0x28>
		for (i = 0; i < 2; i++) {
			*output_data_buffer = module->hw->INDATA.reg;
			output_data_buffer++;
		}
	} else if (module->opmode == AES_CFB_MODE
    4836:	7903      	ldrb	r3, [r0, #4]
    4838:	2b03      	cmp	r3, #3
    483a:	d00e      	beq.n	485a <aes_read_output_data+0x36>
    483c:	000a      	movs	r2, r1
    483e:	3210      	adds	r2, #16
		&& (module->cfb_size == AES_CFB_SIZE_32 || module->cfb_size == AES_CFB_SIZE_16)){
		*output_data_buffer = module->hw->INDATA.reg;
	} else {
		for (i = 0; i < 4; i++) {
			*output_data_buffer = module->hw->INDATA.reg;
    4840:	6803      	ldr	r3, [r0, #0]
    4842:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    4844:	c108      	stmia	r1!, {r3}
		for (i = 0; i < 4; i++) {
    4846:	428a      	cmp	r2, r1
    4848:	d1fa      	bne.n	4840 <aes_read_output_data+0x1c>
			output_data_buffer++;
		}
	}
}
    484a:	4770      	bx	lr
			*output_data_buffer = module->hw->INDATA.reg;
    484c:	6803      	ldr	r3, [r0, #0]
    484e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    4850:	600b      	str	r3, [r1, #0]
    4852:	6803      	ldr	r3, [r0, #0]
    4854:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    4856:	604b      	str	r3, [r1, #4]
    4858:	e7f7      	b.n	484a <aes_read_output_data+0x26>
		&& (module->cfb_size == AES_CFB_SIZE_32 || module->cfb_size == AES_CFB_SIZE_16)){
    485a:	7983      	ldrb	r3, [r0, #6]
    485c:	3b02      	subs	r3, #2
    485e:	2b01      	cmp	r3, #1
    4860:	d8ec      	bhi.n	483c <aes_read_output_data+0x18>
		*output_data_buffer = module->hw->INDATA.reg;
    4862:	6803      	ldr	r3, [r0, #0]
    4864:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    4866:	600b      	str	r3, [r1, #0]
    4868:	e7ef      	b.n	484a <aes_read_output_data+0x26>
    486a:	46c0      	nop			; (mov r8, r8)
    486c:	00ff00ff 	.word	0x00ff00ff
    4870:	00010003 	.word	0x00010003

00004874 <extint_register_callback>:
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    4874:	2317      	movs	r3, #23
	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
    4876:	2a00      	cmp	r2, #0
    4878:	d001      	beq.n	487e <extint_register_callback+0xa>
	} else if (_extint_dev.callbacks[channel] == callback) {
		return STATUS_OK;
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
}
    487a:	0018      	movs	r0, r3
    487c:	4770      	bx	lr
	if (_extint_dev.callbacks[channel] == NULL) {
    487e:	008b      	lsls	r3, r1, #2
    4880:	4a06      	ldr	r2, [pc, #24]	; (489c <extint_register_callback+0x28>)
    4882:	589b      	ldr	r3, [r3, r2]
    4884:	2b00      	cmp	r3, #0
    4886:	d003      	beq.n	4890 <extint_register_callback+0x1c>
	} else if (_extint_dev.callbacks[channel] == callback) {
    4888:	4283      	cmp	r3, r0
    488a:	d005      	beq.n	4898 <extint_register_callback+0x24>
	return STATUS_ERR_ALREADY_INITIALIZED;
    488c:	231d      	movs	r3, #29
    488e:	e7f4      	b.n	487a <extint_register_callback+0x6>
		_extint_dev.callbacks[channel] = callback;
    4890:	0089      	lsls	r1, r1, #2
    4892:	5088      	str	r0, [r1, r2]
		return STATUS_OK;
    4894:	2300      	movs	r3, #0
    4896:	e7f0      	b.n	487a <extint_register_callback+0x6>
		return STATUS_OK;
    4898:	2300      	movs	r3, #0
    489a:	e7ee      	b.n	487a <extint_register_callback+0x6>
    489c:	200021f4 	.word	0x200021f4

000048a0 <extint_chan_enable_callback>:

		eic->INTENSET.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    48a0:	2317      	movs	r3, #23
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
    48a2:	2900      	cmp	r1, #0
    48a4:	d001      	beq.n	48aa <extint_chan_enable_callback+0xa>
	}

	return STATUS_OK;
}
    48a6:	0018      	movs	r0, r3
    48a8:	4770      	bx	lr
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
	} else {
		Assert(false);
		return NULL;
    48aa:	2200      	movs	r2, #0
	if (eic_index < EIC_INST_NUM) {
    48ac:	281f      	cmp	r0, #31
    48ae:	d800      	bhi.n	48b2 <extint_chan_enable_callback+0x12>
		return eics[eic_index];
    48b0:	4a02      	ldr	r2, [pc, #8]	; (48bc <extint_chan_enable_callback+0x1c>)
		eic->INTENSET.reg = (1UL << channel);
    48b2:	2301      	movs	r3, #1
    48b4:	4083      	lsls	r3, r0
    48b6:	6113      	str	r3, [r2, #16]
	return STATUS_OK;
    48b8:	2300      	movs	r3, #0
    48ba:	e7f4      	b.n	48a6 <extint_chan_enable_callback+0x6>
    48bc:	40002400 	.word	0x40002400

000048c0 <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
    48c0:	b570      	push	{r4, r5, r6, lr}
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    48c2:	2200      	movs	r2, #0
    48c4:	4b10      	ldr	r3, [pc, #64]	; (4908 <EIC_Handler+0x48>)
    48c6:	701a      	strb	r2, [r3, #0]
    48c8:	2300      	movs	r3, #0
    48ca:	4910      	ldr	r1, [pc, #64]	; (490c <EIC_Handler+0x4c>)
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
    48cc:	251f      	movs	r5, #31
		if (extint_chan_is_detected(_current_channel)) {
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    48ce:	4e10      	ldr	r6, [pc, #64]	; (4910 <EIC_Handler+0x50>)
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    48d0:	4c0d      	ldr	r4, [pc, #52]	; (4908 <EIC_Handler+0x48>)
    48d2:	e00a      	b.n	48ea <EIC_Handler+0x2a>
		return eics[eic_index];
    48d4:	490d      	ldr	r1, [pc, #52]	; (490c <EIC_Handler+0x4c>)
    48d6:	e008      	b.n	48ea <EIC_Handler+0x2a>
    48d8:	7823      	ldrb	r3, [r4, #0]
    48da:	3301      	adds	r3, #1
    48dc:	b2db      	uxtb	r3, r3
    48de:	7023      	strb	r3, [r4, #0]
    48e0:	2b0f      	cmp	r3, #15
    48e2:	d810      	bhi.n	4906 <EIC_Handler+0x46>
		return NULL;
    48e4:	2100      	movs	r1, #0
	if (eic_index < EIC_INST_NUM) {
    48e6:	2b1f      	cmp	r3, #31
    48e8:	d9f4      	bls.n	48d4 <EIC_Handler+0x14>
	uint32_t eic_mask   = (1UL << (channel % 32));
    48ea:	0028      	movs	r0, r5
    48ec:	4018      	ands	r0, r3
    48ee:	2201      	movs	r2, #1
    48f0:	4082      	lsls	r2, r0

	return (eic_module->INTFLAG.reg & eic_mask);
    48f2:	6948      	ldr	r0, [r1, #20]
		if (extint_chan_is_detected(_current_channel)) {
    48f4:	4210      	tst	r0, r2
    48f6:	d0ef      	beq.n	48d8 <EIC_Handler+0x18>
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));

	eic_module->INTFLAG.reg = eic_mask;
    48f8:	614a      	str	r2, [r1, #20]
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    48fa:	009b      	lsls	r3, r3, #2
    48fc:	599b      	ldr	r3, [r3, r6]
    48fe:	2b00      	cmp	r3, #0
    4900:	d0ea      	beq.n	48d8 <EIC_Handler+0x18>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
    4902:	4798      	blx	r3
    4904:	e7e8      	b.n	48d8 <EIC_Handler+0x18>
			}
		}
	}
}
    4906:	bd70      	pop	{r4, r5, r6, pc}
    4908:	200021f0 	.word	0x200021f0
    490c:	40002400 	.word	0x40002400
    4910:	200021f4 	.word	0x200021f4

00004914 <_extint_enable>:
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRLA.reg |= EIC_CTRLA_ENABLE;
    4914:	4a06      	ldr	r2, [pc, #24]	; (4930 <_extint_enable+0x1c>)
    4916:	7813      	ldrb	r3, [r2, #0]
    4918:	2102      	movs	r1, #2
    491a:	430b      	orrs	r3, r1
    491c:	7013      	strb	r3, [r2, #0]
		 || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
    491e:	2001      	movs	r0, #1
		if((eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_ENABLE)
    4920:	6853      	ldr	r3, [r2, #4]
    4922:	4219      	tst	r1, r3
    4924:	d1fc      	bne.n	4920 <_extint_enable+0xc>
		 || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
    4926:	6853      	ldr	r3, [r2, #4]
    4928:	4218      	tst	r0, r3
    492a:	d1f9      	bne.n	4920 <_extint_enable+0xc>
	}

	while (extint_is_syncing()) {
		/* Wait for all hardware modules to complete synchronization */
	}
}
    492c:	4770      	bx	lr
    492e:	46c0      	nop			; (mov r8, r8)
    4930:	40002400 	.word	0x40002400

00004934 <_extint_disable>:
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Disable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRLA.reg &= ~EIC_CTRLA_ENABLE;
    4934:	4a06      	ldr	r2, [pc, #24]	; (4950 <_extint_disable+0x1c>)
    4936:	7813      	ldrb	r3, [r2, #0]
    4938:	2102      	movs	r1, #2
    493a:	438b      	bics	r3, r1
    493c:	7013      	strb	r3, [r2, #0]
		 || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
    493e:	2001      	movs	r0, #1
		if((eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_ENABLE)
    4940:	6853      	ldr	r3, [r2, #4]
    4942:	4219      	tst	r1, r3
    4944:	d1fc      	bne.n	4940 <_extint_disable+0xc>
		 || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
    4946:	6853      	ldr	r3, [r2, #4]
    4948:	4218      	tst	r0, r3
    494a:	d1f9      	bne.n	4940 <_extint_disable+0xc>
	}

	while (extint_is_syncing()) {
		/* Wait for all hardware modules to complete synchronization */
	}
}
    494c:	4770      	bx	lr
    494e:	46c0      	nop			; (mov r8, r8)
    4950:	40002400 	.word	0x40002400

00004954 <_system_extint_init>:
{
    4954:	b510      	push	{r4, lr}
			MCLK->APBAMASK.reg |= mask;
    4956:	4a12      	ldr	r2, [pc, #72]	; (49a0 <_system_extint_init+0x4c>)
    4958:	6951      	ldr	r1, [r2, #20]
    495a:	2380      	movs	r3, #128	; 0x80
    495c:	009b      	lsls	r3, r3, #2
    495e:	430b      	orrs	r3, r1
    4960:	6153      	str	r3, [r2, #20]
		eics[i]->CTRLA.reg |= EIC_CTRLA_SWRST;
    4962:	4a10      	ldr	r2, [pc, #64]	; (49a4 <_system_extint_init+0x50>)
    4964:	7813      	ldrb	r3, [r2, #0]
    4966:	2101      	movs	r1, #1
    4968:	430b      	orrs	r3, r1
    496a:	7013      	strb	r3, [r2, #0]
		if((eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_ENABLE)
    496c:	3101      	adds	r1, #1
		 || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
    496e:	2001      	movs	r0, #1
		if((eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_ENABLE)
    4970:	6853      	ldr	r3, [r2, #4]
    4972:	4219      	tst	r1, r3
    4974:	d1fc      	bne.n	4970 <_system_extint_init+0x1c>
		 || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
    4976:	6853      	ldr	r3, [r2, #4]
    4978:	4218      	tst	r0, r3
    497a:	d1f9      	bne.n	4970 <_system_extint_init+0x1c>
		eics[i]->CTRLA.bit.CKSEL = EXTINT_CLK_ULP32K;
    497c:	4a09      	ldr	r2, [pc, #36]	; (49a4 <_system_extint_init+0x50>)
    497e:	7813      	ldrb	r3, [r2, #0]
    4980:	2110      	movs	r1, #16
    4982:	430b      	orrs	r3, r1
    4984:	7013      	strb	r3, [r2, #0]
    4986:	4b08      	ldr	r3, [pc, #32]	; (49a8 <_system_extint_init+0x54>)
    4988:	0019      	movs	r1, r3
    498a:	3140      	adds	r1, #64	; 0x40
		_extint_dev.callbacks[j] = NULL;
    498c:	2200      	movs	r2, #0
    498e:	c304      	stmia	r3!, {r2}
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
    4990:	428b      	cmp	r3, r1
    4992:	d1fc      	bne.n	498e <_system_extint_init+0x3a>
    4994:	2208      	movs	r2, #8
    4996:	4b05      	ldr	r3, [pc, #20]	; (49ac <_system_extint_init+0x58>)
    4998:	601a      	str	r2, [r3, #0]
	_extint_enable();
    499a:	4b05      	ldr	r3, [pc, #20]	; (49b0 <_system_extint_init+0x5c>)
    499c:	4798      	blx	r3
}
    499e:	bd10      	pop	{r4, pc}
    49a0:	40000400 	.word	0x40000400
    49a4:	40002400 	.word	0x40002400
    49a8:	200021f4 	.word	0x200021f4
    49ac:	e000e100 	.word	0xe000e100
    49b0:	00004915 	.word	0x00004915

000049b4 <extint_chan_get_config_defaults>:
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->gpio_pin            = 0;
    49b4:	2300      	movs	r3, #0
    49b6:	6003      	str	r3, [r0, #0]
	config->gpio_pin_mux        = 0;
    49b8:	6043      	str	r3, [r0, #4]
	config->gpio_pin_pull       = EXTINT_PULL_UP;
    49ba:	2201      	movs	r2, #1
    49bc:	7202      	strb	r2, [r0, #8]
	config->filter_input_signal = false;
    49be:	7283      	strb	r3, [r0, #10]
	config->detection_criteria  = EXTINT_DETECT_FALLING;
    49c0:	3201      	adds	r2, #1
    49c2:	72c2      	strb	r2, [r0, #11]
	config->enable_async_edge_detection = false;
    49c4:	7243      	strb	r3, [r0, #9]
}
    49c6:	4770      	bx	lr

000049c8 <extint_chan_set_config>:

 */
void extint_chan_set_config(
		const uint8_t channel,
		const struct extint_chan_conf *const config)
{
    49c8:	b5f0      	push	{r4, r5, r6, r7, lr}
    49ca:	b083      	sub	sp, #12
    49cc:	0005      	movs	r5, r0
    49ce:	000c      	movs	r4, r1
	/* Sanity check arguments */
	Assert(config);
	_extint_disable();
    49d0:	4b1c      	ldr	r3, [pc, #112]	; (4a44 <extint_chan_set_config+0x7c>)
    49d2:	4798      	blx	r3
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    49d4:	a901      	add	r1, sp, #4
    49d6:	2300      	movs	r3, #0
    49d8:	704b      	strb	r3, [r1, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
    49da:	70cb      	strb	r3, [r1, #3]
			config->detection_criteria)));
#endif
	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = config->gpio_pin_mux;
    49dc:	7923      	ldrb	r3, [r4, #4]
    49de:	700b      	strb	r3, [r1, #0]
	pinmux_config.direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->gpio_pin_pull;
    49e0:	7a23      	ldrb	r3, [r4, #8]
    49e2:	708b      	strb	r3, [r1, #2]
	system_pinmux_pin_set_config(config->gpio_pin, &pinmux_config);
    49e4:	7820      	ldrb	r0, [r4, #0]
    49e6:	4b18      	ldr	r3, [pc, #96]	; (4a48 <extint_chan_set_config+0x80>)
    49e8:	4798      	blx	r3
		return NULL;
    49ea:	2100      	movs	r1, #0
	if (eic_index < EIC_INST_NUM) {
    49ec:	2d1f      	cmp	r5, #31
    49ee:	d800      	bhi.n	49f2 <extint_chan_set_config+0x2a>
		return eics[eic_index];
    49f0:	4916      	ldr	r1, [pc, #88]	; (4a4c <extint_chan_set_config+0x84>)

	/* Get a pointer to the module hardware instance */
	Eic *const EIC_module = _extint_get_eic_from_channel(channel);

	uint32_t config_pos = (4 * (channel % 8));
    49f2:	2207      	movs	r2, #7
    49f4:	402a      	ands	r2, r5
    49f6:	0092      	lsls	r2, r2, #2
	uint32_t new_config;

	/* Determine the channel's new edge detection configuration */
	new_config = (config->detection_criteria << EIC_CONFIG_SENSE0_Pos);
    49f8:	7ae7      	ldrb	r7, [r4, #11]

	/* Enable the hardware signal filter if requested in the config */
	if (config->filter_input_signal) {
    49fa:	7aa3      	ldrb	r3, [r4, #10]
    49fc:	2b00      	cmp	r3, #0
    49fe:	d001      	beq.n	4a04 <extint_chan_set_config+0x3c>
    4a00:	2308      	movs	r3, #8
    4a02:	431f      	orrs	r7, r3
    4a04:	08eb      	lsrs	r3, r5, #3
    4a06:	009b      	lsls	r3, r3, #2
    4a08:	18cb      	adds	r3, r1, r3
		new_config |= EIC_CONFIG_FILTEN0;
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
    4a0a:	69d8      	ldr	r0, [r3, #28]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
    4a0c:	260f      	movs	r6, #15
    4a0e:	4096      	lsls	r6, r2
		= (EIC_module->CONFIG[channel / 8].reg &
    4a10:	43b0      	bics	r0, r6
			(new_config << config_pos);
    4a12:	4097      	lsls	r7, r2
    4a14:	003a      	movs	r2, r7
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
    4a16:	4302      	orrs	r2, r0
		= (EIC_module->CONFIG[channel / 8].reg &
    4a18:	61da      	str	r2, [r3, #28]
#if (SAML22) || (SAML21XXXB) || (SAMC20) || (SAMR30) || (SAMR34) || (SAMR35) || (WLR089)
	/* Config asynchronous edge detection */
	if (config->enable_async_edge_detection) {
    4a1a:	7a63      	ldrb	r3, [r4, #9]
    4a1c:	2b00      	cmp	r3, #0
    4a1e:	d10b      	bne.n	4a38 <extint_chan_set_config+0x70>
		EIC_module->ASYNCH.reg |= (1UL << channel);
	} else {
		EIC_module->ASYNCH.reg &= (EIC_ASYNCH_MASK & (~(1UL << channel)));
    4a20:	698a      	ldr	r2, [r1, #24]
    4a22:	2301      	movs	r3, #1
    4a24:	40ab      	lsls	r3, r5
    4a26:	43db      	mvns	r3, r3
    4a28:	041b      	lsls	r3, r3, #16
    4a2a:	0c1b      	lsrs	r3, r3, #16
    4a2c:	4013      	ands	r3, r2
    4a2e:	618b      	str	r3, [r1, #24]
		EIC_module->EIC_ASYNCH.reg |= (1UL << channel);
	} else {
		EIC_module->EIC_ASYNCH.reg &= (EIC_EIC_ASYNCH_MASK & (~(1UL << channel)));
	}
#endif
	_extint_enable();
    4a30:	4b07      	ldr	r3, [pc, #28]	; (4a50 <extint_chan_set_config+0x88>)
    4a32:	4798      	blx	r3
}
    4a34:	b003      	add	sp, #12
    4a36:	bdf0      	pop	{r4, r5, r6, r7, pc}
		EIC_module->ASYNCH.reg |= (1UL << channel);
    4a38:	698a      	ldr	r2, [r1, #24]
    4a3a:	2301      	movs	r3, #1
    4a3c:	40ab      	lsls	r3, r5
    4a3e:	4313      	orrs	r3, r2
    4a40:	618b      	str	r3, [r1, #24]
    4a42:	e7f5      	b.n	4a30 <extint_chan_set_config+0x68>
    4a44:	00004935 	.word	0x00004935
    4a48:	000072d9 	.word	0x000072d9
    4a4c:	40002400 	.word	0x40002400
    4a50:	00004915 	.word	0x00004915

00004a54 <nvm_set_config>:
 *                        EEPROM and/or auxiliary space configuration from being
 *                        altered
 */
enum status_code nvm_set_config(
		const struct nvm_config *const config)
{
    4a54:	b510      	push	{r4, lr}
			MCLK->APBBMASK.reg |= mask;
    4a56:	4a1e      	ldr	r2, [pc, #120]	; (4ad0 <nvm_set_config+0x7c>)
    4a58:	6993      	ldr	r3, [r2, #24]
    4a5a:	2104      	movs	r1, #4
    4a5c:	430b      	orrs	r3, r1
    4a5e:	6193      	str	r3, [r2, #24]
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBB, PM_APBBMASK_NVMCTRL);
#endif

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
    4a60:	4b1c      	ldr	r3, [pc, #112]	; (4ad4 <nvm_set_config+0x80>)
    4a62:	2220      	movs	r2, #32
    4a64:	32ff      	adds	r2, #255	; 0xff
    4a66:	831a      	strh	r2, [r3, #24]
static inline bool nvm_is_ready(void)
{
	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;

	return nvm_module->INTFLAG.reg & NVMCTRL_INTFLAG_READY;
    4a68:	7d1a      	ldrb	r2, [r3, #20]

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
		return STATUS_BUSY;
    4a6a:	2305      	movs	r3, #5
	if (!nvm_is_ready()) {
    4a6c:	07d2      	lsls	r2, r2, #31
    4a6e:	d401      	bmi.n	4a74 <nvm_set_config+0x20>
	if (nvm_module->STATUS.reg & NVMCTRL_STATUS_SB) {
		return STATUS_ERR_IO;
	}

	return STATUS_OK;
}
    4a70:	0018      	movs	r0, r3
    4a72:	bd10      	pop	{r4, pc}
			NVMCTRL_CTRLB_SLEEPPRM(config->sleep_power_mode) |
    4a74:	7803      	ldrb	r3, [r0, #0]
    4a76:	021b      	lsls	r3, r3, #8
    4a78:	22c0      	movs	r2, #192	; 0xc0
    4a7a:	0092      	lsls	r2, r2, #2
    4a7c:	4013      	ands	r3, r2
			((config->manual_page_write & 0x01) << NVMCTRL_CTRLB_MANW_Pos) |
    4a7e:	7841      	ldrb	r1, [r0, #1]
    4a80:	01c9      	lsls	r1, r1, #7
    4a82:	22ff      	movs	r2, #255	; 0xff
    4a84:	400a      	ands	r2, r1
			NVMCTRL_CTRLB_SLEEPPRM(config->sleep_power_mode) |
    4a86:	4313      	orrs	r3, r2
			NVMCTRL_CTRLB_RWS(config->wait_states) |
    4a88:	7881      	ldrb	r1, [r0, #2]
    4a8a:	0049      	lsls	r1, r1, #1
    4a8c:	221e      	movs	r2, #30
    4a8e:	400a      	ands	r2, r1
			((config->manual_page_write & 0x01) << NVMCTRL_CTRLB_MANW_Pos) |
    4a90:	4313      	orrs	r3, r2
			((config->disable_cache & 0x01) << NVMCTRL_CTRLB_CACHEDIS_Pos) |
    4a92:	78c2      	ldrb	r2, [r0, #3]
    4a94:	0492      	lsls	r2, r2, #18
    4a96:	2180      	movs	r1, #128	; 0x80
    4a98:	02c9      	lsls	r1, r1, #11
    4a9a:	400a      	ands	r2, r1
			NVMCTRL_CTRLB_RWS(config->wait_states) |
    4a9c:	4313      	orrs	r3, r2
			NVMCTRL_CTRLB_READMODE(config->cache_readmode);
    4a9e:	7902      	ldrb	r2, [r0, #4]
    4aa0:	0412      	lsls	r2, r2, #16
    4aa2:	21c0      	movs	r1, #192	; 0xc0
    4aa4:	0289      	lsls	r1, r1, #10
    4aa6:	400a      	ands	r2, r1
			((config->disable_cache & 0x01) << NVMCTRL_CTRLB_CACHEDIS_Pos) |
    4aa8:	4313      	orrs	r3, r2
	nvm_module->CTRLB.reg =
    4aaa:	4a0a      	ldr	r2, [pc, #40]	; (4ad4 <nvm_set_config+0x80>)
    4aac:	6053      	str	r3, [r2, #4]
	_nvm_dev.page_size         = (8 << nvm_module->PARAM.bit.PSZ);
    4aae:	6893      	ldr	r3, [r2, #8]
    4ab0:	035b      	lsls	r3, r3, #13
    4ab2:	0f5b      	lsrs	r3, r3, #29
    4ab4:	4908      	ldr	r1, [pc, #32]	; (4ad8 <nvm_set_config+0x84>)
    4ab6:	2408      	movs	r4, #8
    4ab8:	409c      	lsls	r4, r3
    4aba:	800c      	strh	r4, [r1, #0]
	_nvm_dev.number_of_pages   = nvm_module->PARAM.bit.NVMP;
    4abc:	6893      	ldr	r3, [r2, #8]
    4abe:	804b      	strh	r3, [r1, #2]
	_nvm_dev.manual_page_write = config->manual_page_write;
    4ac0:	7843      	ldrb	r3, [r0, #1]
    4ac2:	710b      	strb	r3, [r1, #4]
	if (nvm_module->STATUS.reg & NVMCTRL_STATUS_SB) {
    4ac4:	8b13      	ldrh	r3, [r2, #24]
    4ac6:	05db      	lsls	r3, r3, #23
	return STATUS_OK;
    4ac8:	0fdb      	lsrs	r3, r3, #31
    4aca:	011b      	lsls	r3, r3, #4
    4acc:	e7d0      	b.n	4a70 <nvm_set_config+0x1c>
    4ace:	46c0      	nop			; (mov r8, r8)
    4ad0:	40000400 	.word	0x40000400
    4ad4:	41004000 	.word	0x41004000
    4ad8:	20000b60 	.word	0x20000b60

00004adc <nvm_execute_command>:
 */
enum status_code nvm_execute_command(
		const enum nvm_command command,
		const uint32_t address,
		const uint32_t parameter)
{
    4adc:	b530      	push	{r4, r5, lr}
	uint32_t ctrlb_bak;

	/* Check that the address given is valid  */
	if (address > ((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)
    4ade:	4a30      	ldr	r2, [pc, #192]	; (4ba0 <nvm_execute_command+0xc4>)
    4ae0:	8814      	ldrh	r4, [r2, #0]
    4ae2:	8853      	ldrh	r3, [r2, #2]
    4ae4:	4363      	muls	r3, r4
    4ae6:	428b      	cmp	r3, r1
    4ae8:	d20b      	bcs.n	4b02 <nvm_execute_command+0x26>
		&& !(address >= NVMCTRL_AUX0_ADDRESS && address <= NVMCTRL_AUX1_ADDRESS )){
    4aea:	2280      	movs	r2, #128	; 0x80
    4aec:	0192      	lsls	r2, r2, #6
    4aee:	4b2d      	ldr	r3, [pc, #180]	; (4ba4 <nvm_execute_command+0xc8>)
    4af0:	18cb      	adds	r3, r1, r3
    4af2:	4293      	cmp	r3, r2
    4af4:	d905      	bls.n	4b02 <nvm_execute_command+0x26>
#ifdef FEATURE_NVM_RWWEE
		if (address >= ((uint32_t)NVMCTRL_RWW_EEPROM_SIZE + NVMCTRL_RWW_EEPROM_ADDR)
    4af6:	4c2c      	ldr	r4, [pc, #176]	; (4ba8 <nvm_execute_command+0xcc>)
			|| address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
    4af8:	2318      	movs	r3, #24
		if (address >= ((uint32_t)NVMCTRL_RWW_EEPROM_SIZE + NVMCTRL_RWW_EEPROM_ADDR)
    4afa:	4a2c      	ldr	r2, [pc, #176]	; (4bac <nvm_execute_command+0xd0>)
    4afc:	188a      	adds	r2, r1, r2
    4afe:	42a2      	cmp	r2, r4
    4b00:	d80e      	bhi.n	4b20 <nvm_execute_command+0x44>

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;

	/* Turn off cache before issuing flash commands */
	ctrlb_bak = nvm_module->CTRLB.reg;
    4b02:	4b2b      	ldr	r3, [pc, #172]	; (4bb0 <nvm_execute_command+0xd4>)
    4b04:	685c      	ldr	r4, [r3, #4]
#if (SAMC20) || (SAMC21)
	nvm_module->CTRLB.reg = ((ctrlb_bak &(~(NVMCTRL_CTRLB_CACHEDIS(0x2))))
							| NVMCTRL_CTRLB_CACHEDIS(0x1));
#else
	nvm_module->CTRLB.reg = ctrlb_bak | NVMCTRL_CTRLB_CACHEDIS;
    4b06:	2280      	movs	r2, #128	; 0x80
    4b08:	02d2      	lsls	r2, r2, #11
    4b0a:	4322      	orrs	r2, r4
    4b0c:	605a      	str	r2, [r3, #4]
#endif

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
    4b0e:	2220      	movs	r2, #32
    4b10:	32ff      	adds	r2, #255	; 0xff
    4b12:	831a      	strh	r2, [r3, #24]
    4b14:	7d1b      	ldrb	r3, [r3, #20]

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
    4b16:	07db      	lsls	r3, r3, #31
    4b18:	d404      	bmi.n	4b24 <nvm_execute_command+0x48>
		/* Restore the setting */
		nvm_module->CTRLB.reg = ctrlb_bak;
    4b1a:	4b25      	ldr	r3, [pc, #148]	; (4bb0 <nvm_execute_command+0xd4>)
    4b1c:	605c      	str	r4, [r3, #4]
		return STATUS_BUSY;
    4b1e:	2305      	movs	r3, #5

	/* Restore the setting */
	nvm_module->CTRLB.reg = ctrlb_bak;

	return STATUS_OK;
}
    4b20:	0018      	movs	r0, r3
    4b22:	bd30      	pop	{r4, r5, pc}
	switch (command) {
    4b24:	2845      	cmp	r0, #69	; 0x45
    4b26:	d829      	bhi.n	4b7c <nvm_execute_command+0xa0>
    4b28:	0083      	lsls	r3, r0, #2
    4b2a:	4a22      	ldr	r2, [pc, #136]	; (4bb4 <nvm_execute_command+0xd8>)
    4b2c:	58d3      	ldr	r3, [r2, r3]
    4b2e:	469f      	mov	pc, r3
			if (nvm_module->STATUS.reg & NVMCTRL_STATUS_SB) {
    4b30:	4b1f      	ldr	r3, [pc, #124]	; (4bb0 <nvm_execute_command+0xd4>)
    4b32:	8b1b      	ldrh	r3, [r3, #24]
    4b34:	05db      	lsls	r3, r3, #23
    4b36:	d503      	bpl.n	4b40 <nvm_execute_command+0x64>
				nvm_module->CTRLB.reg = ctrlb_bak;
    4b38:	4b1d      	ldr	r3, [pc, #116]	; (4bb0 <nvm_execute_command+0xd4>)
    4b3a:	605c      	str	r4, [r3, #4]
				return STATUS_ERR_IO;
    4b3c:	2310      	movs	r3, #16
    4b3e:	e7ef      	b.n	4b20 <nvm_execute_command+0x44>
			nvm_module->ADDR.reg = (uintptr_t)&NVM_MEMORY[address / 4];
    4b40:	0889      	lsrs	r1, r1, #2
    4b42:	0049      	lsls	r1, r1, #1
    4b44:	4b1a      	ldr	r3, [pc, #104]	; (4bb0 <nvm_execute_command+0xd4>)
    4b46:	61d9      	str	r1, [r3, #28]
			break;
    4b48:	e003      	b.n	4b52 <nvm_execute_command+0x76>
			nvm_module->ADDR.reg = (uintptr_t)&NVM_MEMORY[address / 4];
    4b4a:	0889      	lsrs	r1, r1, #2
    4b4c:	0049      	lsls	r1, r1, #1
    4b4e:	4b18      	ldr	r3, [pc, #96]	; (4bb0 <nvm_execute_command+0xd4>)
    4b50:	61d9      	str	r1, [r3, #28]
	if( command == NVM_COMMAND_RWWEE_ERASE_ROW || command == NVM_COMMAND_RWWEE_WRITE_PAGE)
    4b52:	23fd      	movs	r3, #253	; 0xfd
    4b54:	0005      	movs	r5, r0
    4b56:	3d1a      	subs	r5, #26
    4b58:	401d      	ands	r5, r3
    4b5a:	d013      	beq.n	4b84 <nvm_execute_command+0xa8>
	nvm_module->CTRLA.reg = command | NVMCTRL_CTRLA_CMDEX_KEY;
    4b5c:	23a5      	movs	r3, #165	; 0xa5
    4b5e:	021b      	lsls	r3, r3, #8
    4b60:	4318      	orrs	r0, r3
    4b62:	4b13      	ldr	r3, [pc, #76]	; (4bb0 <nvm_execute_command+0xd4>)
    4b64:	8018      	strh	r0, [r3, #0]
    4b66:	0019      	movs	r1, r3
	while (!nvm_is_ready()) {
    4b68:	2201      	movs	r2, #1
    4b6a:	7d0b      	ldrb	r3, [r1, #20]
    4b6c:	4213      	tst	r3, r2
    4b6e:	d0fc      	beq.n	4b6a <nvm_execute_command+0x8e>
	if( command == NVM_COMMAND_RWWEE_ERASE_ROW || command == NVM_COMMAND_RWWEE_WRITE_PAGE)
    4b70:	2d00      	cmp	r5, #0
    4b72:	d00f      	beq.n	4b94 <nvm_execute_command+0xb8>
	nvm_module->CTRLB.reg = ctrlb_bak;
    4b74:	4b0e      	ldr	r3, [pc, #56]	; (4bb0 <nvm_execute_command+0xd4>)
    4b76:	605c      	str	r4, [r3, #4]
	return STATUS_OK;
    4b78:	2300      	movs	r3, #0
    4b7a:	e7d1      	b.n	4b20 <nvm_execute_command+0x44>
			nvm_module->CTRLB.reg = ctrlb_bak;
    4b7c:	4b0c      	ldr	r3, [pc, #48]	; (4bb0 <nvm_execute_command+0xd4>)
    4b7e:	605c      	str	r4, [r3, #4]
			return STATUS_ERR_INVALID_ARG;
    4b80:	2317      	movs	r3, #23
    4b82:	e7cd      	b.n	4b20 <nvm_execute_command+0x44>
		nvm_module->CTRLB.bit.CACHEDIS = 1;
    4b84:	4b0a      	ldr	r3, [pc, #40]	; (4bb0 <nvm_execute_command+0xd4>)
    4b86:	6859      	ldr	r1, [r3, #4]
    4b88:	2280      	movs	r2, #128	; 0x80
    4b8a:	02d2      	lsls	r2, r2, #11
    4b8c:	430a      	orrs	r2, r1
    4b8e:	605a      	str	r2, [r3, #4]
		nvm_module->CTRLB.reg;
    4b90:	685b      	ldr	r3, [r3, #4]
    4b92:	e7e3      	b.n	4b5c <nvm_execute_command+0x80>
		nvm_module->CTRLB.bit.CACHEDIS = 0;
    4b94:	4a06      	ldr	r2, [pc, #24]	; (4bb0 <nvm_execute_command+0xd4>)
    4b96:	6853      	ldr	r3, [r2, #4]
    4b98:	4907      	ldr	r1, [pc, #28]	; (4bb8 <nvm_execute_command+0xdc>)
    4b9a:	400b      	ands	r3, r1
    4b9c:	6053      	str	r3, [r2, #4]
    4b9e:	e7e9      	b.n	4b74 <nvm_execute_command+0x98>
    4ba0:	20000b60 	.word	0x20000b60
    4ba4:	ff7fc000 	.word	0xff7fc000
    4ba8:	00001fff 	.word	0x00001fff
    4bac:	ffc00000 	.word	0xffc00000
    4bb0:	41004000 	.word	0x41004000
    4bb4:	0001f9e4 	.word	0x0001f9e4
    4bb8:	fffbffff 	.word	0xfffbffff

00004bbc <nvm_write_buffer>:
 */
enum status_code nvm_write_buffer(
		const uint32_t destination_address,
		const uint8_t *buffer,
		uint16_t length)
{
    4bbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	bool is_rww_eeprom = false;
#endif

	/* Check if the destination address is valid */
	if (destination_address >
			((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)) {
    4bbe:	4b2f      	ldr	r3, [pc, #188]	; (4c7c <nvm_write_buffer+0xc0>)
    4bc0:	881c      	ldrh	r4, [r3, #0]
    4bc2:	885b      	ldrh	r3, [r3, #2]
    4bc4:	4363      	muls	r3, r4
	if (destination_address >
    4bc6:	4283      	cmp	r3, r0
    4bc8:	d207      	bcs.n	4bda <nvm_write_buffer+0x1e>
#ifdef FEATURE_NVM_RWWEE
		if (destination_address >= ((uint32_t)NVMCTRL_RWW_EEPROM_SIZE + NVMCTRL_RWW_EEPROM_ADDR)
    4bca:	4e2d      	ldr	r6, [pc, #180]	; (4c80 <nvm_write_buffer+0xc4>)
			|| destination_address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
    4bcc:	2518      	movs	r5, #24
		if (destination_address >= ((uint32_t)NVMCTRL_RWW_EEPROM_SIZE + NVMCTRL_RWW_EEPROM_ADDR)
    4bce:	4b2d      	ldr	r3, [pc, #180]	; (4c84 <nvm_write_buffer+0xc8>)
    4bd0:	18c3      	adds	r3, r0, r3
    4bd2:	42b3      	cmp	r3, r6
    4bd4:	d806      	bhi.n	4be4 <nvm_write_buffer+0x28>
		}
		is_rww_eeprom = true;
    4bd6:	2601      	movs	r6, #1
    4bd8:	e000      	b.n	4bdc <nvm_write_buffer+0x20>
	bool is_rww_eeprom = false;
    4bda:	2600      	movs	r6, #0
		return STATUS_ERR_BAD_ADDRESS;
#endif
	}

	/* Check if the write address not aligned to the start of a page */
	if (destination_address & (_nvm_dev.page_size - 1)) {
    4bdc:	1e63      	subs	r3, r4, #1
		return STATUS_ERR_BAD_ADDRESS;
    4bde:	2518      	movs	r5, #24
	if (destination_address & (_nvm_dev.page_size - 1)) {
    4be0:	4218      	tst	r0, r3
    4be2:	d001      	beq.n	4be8 <nvm_write_buffer+0x2c>
				destination_address, 0);
#endif
	}

	return STATUS_OK;
}
    4be4:	0028      	movs	r0, r5
    4be6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return STATUS_ERR_INVALID_ARG;
    4be8:	3d01      	subs	r5, #1
	if (length > _nvm_dev.page_size) {
    4bea:	4294      	cmp	r4, r2
    4bec:	d3fa      	bcc.n	4be4 <nvm_write_buffer+0x28>
    4bee:	4b26      	ldr	r3, [pc, #152]	; (4c88 <nvm_write_buffer+0xcc>)
    4bf0:	7d1b      	ldrb	r3, [r3, #20]
		return STATUS_BUSY;
    4bf2:	3d12      	subs	r5, #18
	if (!nvm_is_ready()) {
    4bf4:	07db      	lsls	r3, r3, #31
    4bf6:	d5f5      	bpl.n	4be4 <nvm_write_buffer+0x28>
	nvm_module->CTRLA.reg = NVM_COMMAND_PAGE_BUFFER_CLEAR | NVMCTRL_CTRLA_CMDEX_KEY;
    4bf8:	4c24      	ldr	r4, [pc, #144]	; (4c8c <nvm_write_buffer+0xd0>)
    4bfa:	4b23      	ldr	r3, [pc, #140]	; (4c88 <nvm_write_buffer+0xcc>)
    4bfc:	801c      	strh	r4, [r3, #0]
    4bfe:	001d      	movs	r5, r3
	while (!nvm_is_ready()) {
    4c00:	2401      	movs	r4, #1
    4c02:	7d2b      	ldrb	r3, [r5, #20]
    4c04:	4223      	tst	r3, r4
    4c06:	d0fc      	beq.n	4c02 <nvm_write_buffer+0x46>
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
    4c08:	2420      	movs	r4, #32
    4c0a:	34ff      	adds	r4, #255	; 0xff
    4c0c:	4b1e      	ldr	r3, [pc, #120]	; (4c88 <nvm_write_buffer+0xcc>)
    4c0e:	831c      	strh	r4, [r3, #24]
	for (uint16_t i = 0; i < length; i += 2) {
    4c10:	2a00      	cmp	r2, #0
    4c12:	d02c      	beq.n	4c6e <nvm_write_buffer+0xb2>
    4c14:	2301      	movs	r3, #1
    4c16:	0005      	movs	r5, r0
    4c18:	439d      	bics	r5, r3
    4c1a:	2300      	movs	r3, #0
		if (i < (length - 1)) {
    4c1c:	1e54      	subs	r4, r2, #1
    4c1e:	46a4      	mov	ip, r4
    4c20:	e009      	b.n	4c36 <nvm_write_buffer+0x7a>
			data |= (buffer[i + 1] << 8);
    4c22:	18cf      	adds	r7, r1, r3
    4c24:	787f      	ldrb	r7, [r7, #1]
    4c26:	023f      	lsls	r7, r7, #8
    4c28:	433c      	orrs	r4, r7
		NVM_MEMORY[nvm_address++] = data;
    4c2a:	802c      	strh	r4, [r5, #0]
	for (uint16_t i = 0; i < length; i += 2) {
    4c2c:	3302      	adds	r3, #2
    4c2e:	b29b      	uxth	r3, r3
    4c30:	3502      	adds	r5, #2
    4c32:	429a      	cmp	r2, r3
    4c34:	d904      	bls.n	4c40 <nvm_write_buffer+0x84>
		data = buffer[i];
    4c36:	5ccc      	ldrb	r4, [r1, r3]
		if (i < (length - 1)) {
    4c38:	4563      	cmp	r3, ip
    4c3a:	dbf2      	blt.n	4c22 <nvm_write_buffer+0x66>
		data = buffer[i];
    4c3c:	b2a4      	uxth	r4, r4
    4c3e:	e7f4      	b.n	4c2a <nvm_write_buffer+0x6e>
	if ((_nvm_dev.manual_page_write == false) && (length < NVMCTRL_PAGE_SIZE)) {
    4c40:	4b0e      	ldr	r3, [pc, #56]	; (4c7c <nvm_write_buffer+0xc0>)
    4c42:	791b      	ldrb	r3, [r3, #4]
	return STATUS_OK;
    4c44:	2500      	movs	r5, #0
	if ((_nvm_dev.manual_page_write == false) && (length < NVMCTRL_PAGE_SIZE)) {
    4c46:	2b00      	cmp	r3, #0
    4c48:	d1cc      	bne.n	4be4 <nvm_write_buffer+0x28>
    4c4a:	2a3f      	cmp	r2, #63	; 0x3f
    4c4c:	d8ca      	bhi.n	4be4 <nvm_write_buffer+0x28>
				(nvm_execute_command(NVM_COMMAND_RWWEE_WRITE_PAGE,destination_address, 0)):
    4c4e:	2e00      	cmp	r6, #0
    4c50:	d106      	bne.n	4c60 <nvm_write_buffer+0xa4>
    4c52:	2200      	movs	r2, #0
    4c54:	0001      	movs	r1, r0
    4c56:	2004      	movs	r0, #4
    4c58:	4b0d      	ldr	r3, [pc, #52]	; (4c90 <nvm_write_buffer+0xd4>)
    4c5a:	4798      	blx	r3
    4c5c:	0005      	movs	r5, r0
    4c5e:	e7c1      	b.n	4be4 <nvm_write_buffer+0x28>
    4c60:	2200      	movs	r2, #0
    4c62:	0001      	movs	r1, r0
    4c64:	201c      	movs	r0, #28
    4c66:	4b0a      	ldr	r3, [pc, #40]	; (4c90 <nvm_write_buffer+0xd4>)
    4c68:	4798      	blx	r3
    4c6a:	0005      	movs	r5, r0
    4c6c:	e7ba      	b.n	4be4 <nvm_write_buffer+0x28>
	if ((_nvm_dev.manual_page_write == false) && (length < NVMCTRL_PAGE_SIZE)) {
    4c6e:	4b03      	ldr	r3, [pc, #12]	; (4c7c <nvm_write_buffer+0xc0>)
    4c70:	791b      	ldrb	r3, [r3, #4]
	return STATUS_OK;
    4c72:	2500      	movs	r5, #0
	if ((_nvm_dev.manual_page_write == false) && (length < NVMCTRL_PAGE_SIZE)) {
    4c74:	2b00      	cmp	r3, #0
    4c76:	d0ea      	beq.n	4c4e <nvm_write_buffer+0x92>
    4c78:	e7b4      	b.n	4be4 <nvm_write_buffer+0x28>
    4c7a:	46c0      	nop			; (mov r8, r8)
    4c7c:	20000b60 	.word	0x20000b60
    4c80:	00001fff 	.word	0x00001fff
    4c84:	ffc00000 	.word	0xffc00000
    4c88:	41004000 	.word	0x41004000
    4c8c:	ffffa544 	.word	0xffffa544
    4c90:	00004add 	.word	0x00004add

00004c94 <nvm_read_buffer>:
 */
enum status_code nvm_read_buffer(
		const uint32_t source_address,
		uint8_t *const buffer,
		uint16_t length)
{
    4c94:	b570      	push	{r4, r5, r6, lr}
	/* Check if the source address is valid */
	if (source_address >
			((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)) {
    4c96:	4b1b      	ldr	r3, [pc, #108]	; (4d04 <nvm_read_buffer+0x70>)
    4c98:	881c      	ldrh	r4, [r3, #0]
    4c9a:	885b      	ldrh	r3, [r3, #2]
    4c9c:	4363      	muls	r3, r4
	if (source_address >
    4c9e:	4283      	cmp	r3, r0
    4ca0:	d205      	bcs.n	4cae <nvm_read_buffer+0x1a>
#ifdef FEATURE_NVM_RWWEE
		if (source_address >= ((uint32_t)NVMCTRL_RWW_EEPROM_SIZE + NVMCTRL_RWW_EEPROM_ADDR)
    4ca2:	4e19      	ldr	r6, [pc, #100]	; (4d08 <nvm_read_buffer+0x74>)
			|| source_address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
    4ca4:	2518      	movs	r5, #24
		if (source_address >= ((uint32_t)NVMCTRL_RWW_EEPROM_SIZE + NVMCTRL_RWW_EEPROM_ADDR)
    4ca6:	4b19      	ldr	r3, [pc, #100]	; (4d0c <nvm_read_buffer+0x78>)
    4ca8:	18c3      	adds	r3, r0, r3
    4caa:	42b3      	cmp	r3, r6
    4cac:	d803      	bhi.n	4cb6 <nvm_read_buffer+0x22>
		return STATUS_ERR_BAD_ADDRESS;
#endif
	}

	/* Check if the read address is not aligned to the start of a page */
	if (source_address & (_nvm_dev.page_size - 1)) {
    4cae:	1e63      	subs	r3, r4, #1
		return STATUS_ERR_BAD_ADDRESS;
    4cb0:	2518      	movs	r5, #24
	if (source_address & (_nvm_dev.page_size - 1)) {
    4cb2:	4218      	tst	r0, r3
    4cb4:	d001      	beq.n	4cba <nvm_read_buffer+0x26>
			buffer[i + 1] = (data >> 8);
		}
	}

	return STATUS_OK;
}
    4cb6:	0028      	movs	r0, r5
    4cb8:	bd70      	pop	{r4, r5, r6, pc}
		return STATUS_ERR_INVALID_ARG;
    4cba:	3d01      	subs	r5, #1
	if (length > _nvm_dev.page_size) {
    4cbc:	4294      	cmp	r4, r2
    4cbe:	d3fa      	bcc.n	4cb6 <nvm_read_buffer+0x22>
    4cc0:	4b13      	ldr	r3, [pc, #76]	; (4d10 <nvm_read_buffer+0x7c>)
    4cc2:	7d1b      	ldrb	r3, [r3, #20]
		return STATUS_BUSY;
    4cc4:	3d12      	subs	r5, #18
	if (!nvm_is_ready()) {
    4cc6:	07db      	lsls	r3, r3, #31
    4cc8:	d5f5      	bpl.n	4cb6 <nvm_read_buffer+0x22>
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
    4cca:	2420      	movs	r4, #32
    4ccc:	34ff      	adds	r4, #255	; 0xff
    4cce:	4b10      	ldr	r3, [pc, #64]	; (4d10 <nvm_read_buffer+0x7c>)
    4cd0:	831c      	strh	r4, [r3, #24]
	for (uint16_t i = 0; i < length; i += 2) {
    4cd2:	2a00      	cmp	r2, #0
    4cd4:	d014      	beq.n	4d00 <nvm_read_buffer+0x6c>
    4cd6:	2301      	movs	r3, #1
    4cd8:	4398      	bics	r0, r3
    4cda:	2300      	movs	r3, #0
		if (i < (length - 1)) {
    4cdc:	1e56      	subs	r6, r2, #1
    4cde:	e004      	b.n	4cea <nvm_read_buffer+0x56>
	for (uint16_t i = 0; i < length; i += 2) {
    4ce0:	3302      	adds	r3, #2
    4ce2:	b29b      	uxth	r3, r3
    4ce4:	3002      	adds	r0, #2
    4ce6:	429a      	cmp	r2, r3
    4ce8:	d908      	bls.n	4cfc <nvm_read_buffer+0x68>
		uint16_t data = NVM_MEMORY[page_address++];
    4cea:	8804      	ldrh	r4, [r0, #0]
    4cec:	b2a4      	uxth	r4, r4
		buffer[i] = (data & 0xFF);
    4cee:	54cc      	strb	r4, [r1, r3]
		if (i < (length - 1)) {
    4cf0:	42b3      	cmp	r3, r6
    4cf2:	daf5      	bge.n	4ce0 <nvm_read_buffer+0x4c>
			buffer[i + 1] = (data >> 8);
    4cf4:	18cd      	adds	r5, r1, r3
    4cf6:	0a24      	lsrs	r4, r4, #8
    4cf8:	706c      	strb	r4, [r5, #1]
    4cfa:	e7f1      	b.n	4ce0 <nvm_read_buffer+0x4c>
	return STATUS_OK;
    4cfc:	2500      	movs	r5, #0
    4cfe:	e7da      	b.n	4cb6 <nvm_read_buffer+0x22>
    4d00:	2500      	movs	r5, #0
    4d02:	e7d8      	b.n	4cb6 <nvm_read_buffer+0x22>
    4d04:	20000b60 	.word	0x20000b60
    4d08:	00001fff 	.word	0x00001fff
    4d0c:	ffc00000 	.word	0xffc00000
    4d10:	41004000 	.word	0x41004000

00004d14 <nvm_erase_row>:
 *                                 not aligned to the start of a row
 * \retval STATUS_ABORTED          NVM erased error
 */
enum status_code nvm_erase_row(
		const uint32_t row_address)
{
    4d14:	b510      	push	{r4, lr}
		bool is_rww_eeprom = false;
#endif

	/* Check if the row address is valid */
	if (row_address >
			((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)) {
    4d16:	4a22      	ldr	r2, [pc, #136]	; (4da0 <nvm_erase_row+0x8c>)
    4d18:	8813      	ldrh	r3, [r2, #0]
    4d1a:	8852      	ldrh	r2, [r2, #2]
    4d1c:	435a      	muls	r2, r3
	if (row_address >
    4d1e:	4282      	cmp	r2, r0
    4d20:	d207      	bcs.n	4d32 <nvm_erase_row+0x1e>
#ifdef FEATURE_NVM_RWWEE
		if (row_address >= ((uint32_t)NVMCTRL_RWW_EEPROM_SIZE + NVMCTRL_RWW_EEPROM_ADDR)
    4d22:	4c20      	ldr	r4, [pc, #128]	; (4da4 <nvm_erase_row+0x90>)
			|| row_address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
    4d24:	2218      	movs	r2, #24
		if (row_address >= ((uint32_t)NVMCTRL_RWW_EEPROM_SIZE + NVMCTRL_RWW_EEPROM_ADDR)
    4d26:	4920      	ldr	r1, [pc, #128]	; (4da8 <nvm_erase_row+0x94>)
    4d28:	1841      	adds	r1, r0, r1
    4d2a:	42a1      	cmp	r1, r4
    4d2c:	d807      	bhi.n	4d3e <nvm_erase_row+0x2a>
		}
		is_rww_eeprom = true;
    4d2e:	2401      	movs	r4, #1
    4d30:	e000      	b.n	4d34 <nvm_erase_row+0x20>
		bool is_rww_eeprom = false;
    4d32:	2400      	movs	r4, #0
		return STATUS_ERR_BAD_ADDRESS;
#endif
	}

	/* Check if the address to erase is not aligned to the start of a row */
	if (row_address & ((_nvm_dev.page_size * NVMCTRL_ROW_PAGES) - 1)) {
    4d34:	009b      	lsls	r3, r3, #2
    4d36:	3b01      	subs	r3, #1
		return STATUS_ERR_BAD_ADDRESS;
    4d38:	2218      	movs	r2, #24
	if (row_address & ((_nvm_dev.page_size * NVMCTRL_ROW_PAGES) - 1)) {
    4d3a:	4218      	tst	r0, r3
    4d3c:	d001      	beq.n	4d42 <nvm_erase_row+0x2e>
	if ((enum nvm_error)(nvm_module->STATUS.reg & NVM_ERRORS_MASK) != NVM_ERROR_NONE) {
		return STATUS_ABORTED;
	}

	return STATUS_OK;
}
    4d3e:	0010      	movs	r0, r2
    4d40:	bd10      	pop	{r4, pc}
    4d42:	4b1a      	ldr	r3, [pc, #104]	; (4dac <nvm_erase_row+0x98>)
    4d44:	7d1b      	ldrb	r3, [r3, #20]
		return STATUS_BUSY;
    4d46:	3a13      	subs	r2, #19
	if (!nvm_is_ready()) {
    4d48:	07db      	lsls	r3, r3, #31
    4d4a:	d5f8      	bpl.n	4d3e <nvm_erase_row+0x2a>
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
    4d4c:	4b17      	ldr	r3, [pc, #92]	; (4dac <nvm_erase_row+0x98>)
    4d4e:	2220      	movs	r2, #32
    4d50:	32ff      	adds	r2, #255	; 0xff
    4d52:	831a      	strh	r2, [r3, #24]
	nvm_module->ADDR.reg  = (uintptr_t)&NVM_MEMORY[row_address / 4];
    4d54:	0880      	lsrs	r0, r0, #2
    4d56:	0040      	lsls	r0, r0, #1
    4d58:	61d8      	str	r0, [r3, #28]
	if (is_rww_eeprom) {
    4d5a:	2c00      	cmp	r4, #0
    4d5c:	d01b      	beq.n	4d96 <nvm_erase_row+0x82>
		nvm_module->CTRLB.bit.CACHEDIS = 1;
    4d5e:	6859      	ldr	r1, [r3, #4]
    4d60:	2280      	movs	r2, #128	; 0x80
    4d62:	02d2      	lsls	r2, r2, #11
    4d64:	430a      	orrs	r2, r1
    4d66:	605a      	str	r2, [r3, #4]
		nvm_module->CTRLB.reg;
    4d68:	685a      	ldr	r2, [r3, #4]
		nvm_module->CTRLA.reg = NVM_COMMAND_RWWEE_ERASE_ROW | NVMCTRL_CTRLA_CMDEX_KEY;
    4d6a:	4a11      	ldr	r2, [pc, #68]	; (4db0 <nvm_erase_row+0x9c>)
    4d6c:	801a      	strh	r2, [r3, #0]
    4d6e:	490f      	ldr	r1, [pc, #60]	; (4dac <nvm_erase_row+0x98>)
	while (!nvm_is_ready()) {
    4d70:	2201      	movs	r2, #1
    4d72:	7d0b      	ldrb	r3, [r1, #20]
    4d74:	4213      	tst	r3, r2
    4d76:	d0fc      	beq.n	4d72 <nvm_erase_row+0x5e>
	if (is_rww_eeprom) {
    4d78:	2c00      	cmp	r4, #0
    4d7a:	d004      	beq.n	4d86 <nvm_erase_row+0x72>
		nvm_module->CTRLB.bit.CACHEDIS = 0;
    4d7c:	4a0b      	ldr	r2, [pc, #44]	; (4dac <nvm_erase_row+0x98>)
    4d7e:	6853      	ldr	r3, [r2, #4]
    4d80:	490c      	ldr	r1, [pc, #48]	; (4db4 <nvm_erase_row+0xa0>)
    4d82:	400b      	ands	r3, r1
    4d84:	6053      	str	r3, [r2, #4]
	if ((enum nvm_error)(nvm_module->STATUS.reg & NVM_ERRORS_MASK) != NVM_ERROR_NONE) {
    4d86:	4b09      	ldr	r3, [pc, #36]	; (4dac <nvm_erase_row+0x98>)
    4d88:	8b1a      	ldrh	r2, [r3, #24]
    4d8a:	201c      	movs	r0, #28
    4d8c:	4002      	ands	r2, r0
	return STATUS_OK;
    4d8e:	1e50      	subs	r0, r2, #1
    4d90:	4182      	sbcs	r2, r0
    4d92:	0092      	lsls	r2, r2, #2
    4d94:	e7d3      	b.n	4d3e <nvm_erase_row+0x2a>
		nvm_module->CTRLA.reg = NVM_COMMAND_ERASE_ROW | NVMCTRL_CTRLA_CMDEX_KEY;
    4d96:	4a08      	ldr	r2, [pc, #32]	; (4db8 <nvm_erase_row+0xa4>)
    4d98:	4b04      	ldr	r3, [pc, #16]	; (4dac <nvm_erase_row+0x98>)
    4d9a:	801a      	strh	r2, [r3, #0]
    4d9c:	e7e7      	b.n	4d6e <nvm_erase_row+0x5a>
    4d9e:	46c0      	nop			; (mov r8, r8)
    4da0:	20000b60 	.word	0x20000b60
    4da4:	00001fff 	.word	0x00001fff
    4da8:	ffc00000 	.word	0xffc00000
    4dac:	41004000 	.word	0x41004000
    4db0:	ffffa51a 	.word	0xffffa51a
    4db4:	fffbffff 	.word	0xfffbffff
    4db8:	ffffa502 	.word	0xffffa502

00004dbc <nvm_get_parameters>:

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
    4dbc:	4b15      	ldr	r3, [pc, #84]	; (4e14 <nvm_get_parameters+0x58>)
    4dbe:	2220      	movs	r2, #32
    4dc0:	32ff      	adds	r2, #255	; 0xff
    4dc2:	831a      	strh	r2, [r3, #24]

	/* Read out from the PARAM register */
	uint32_t param_reg = nvm_module->PARAM.reg;
    4dc4:	689b      	ldr	r3, [r3, #8]

	/* Mask out page size exponent and convert to a number of bytes */
	parameters->page_size =
			8 << ((param_reg & NVMCTRL_PARAM_PSZ_Msk) >> NVMCTRL_PARAM_PSZ_Pos);
    4dc6:	0359      	lsls	r1, r3, #13
    4dc8:	0f49      	lsrs	r1, r1, #29
    4dca:	3a18      	subs	r2, #24
    4dcc:	3aff      	subs	r2, #255	; 0xff
    4dce:	408a      	lsls	r2, r1
	parameters->page_size =
    4dd0:	7002      	strb	r2, [r0, #0]

	/* Mask out number of pages count */
	parameters->nvm_number_of_pages =
    4dd2:	8043      	strh	r3, [r0, #2]
			(param_reg & NVMCTRL_PARAM_NVMP_Msk) >> NVMCTRL_PARAM_NVMP_Pos;

#ifdef FEATURE_NVM_RWWEE
	/* Mask out rwwee number of pages count */
	parameters->rww_eeprom_number_of_pages =
			(param_reg & NVMCTRL_PARAM_RWWEEP_Msk) >> NVMCTRL_PARAM_RWWEEP_Pos;
    4dd4:	0d1b      	lsrs	r3, r3, #20
	parameters->rww_eeprom_number_of_pages =
    4dd6:	8183      	strh	r3, [r0, #12]
#endif

	/* Read the current EEPROM fuse value from the USER row */
	uint16_t eeprom_fuse_value =
			(NVM_USER_MEMORY[NVMCTRL_FUSES_EEPROM_SIZE_Pos / 16] &
    4dd8:	4b0f      	ldr	r3, [pc, #60]	; (4e18 <nvm_get_parameters+0x5c>)
    4dda:	881b      	ldrh	r3, [r3, #0]
	uint16_t eeprom_fuse_value =
    4ddc:	065b      	lsls	r3, r3, #25
    4dde:	0f5b      	lsrs	r3, r3, #29
			NVMCTRL_FUSES_EEPROM_SIZE_Msk) >> NVMCTRL_FUSES_EEPROM_SIZE_Pos;

	/* Translate the EEPROM fuse byte value to a number of NVM pages */
	if (eeprom_fuse_value == 7) {
    4de0:	2b07      	cmp	r3, #7
    4de2:	d010      	beq.n	4e06 <nvm_get_parameters+0x4a>
		parameters->eeprom_number_of_pages = 0;
	}
	else {
		parameters->eeprom_number_of_pages =
				NVMCTRL_ROW_PAGES << (6 - eeprom_fuse_value);
    4de4:	2206      	movs	r2, #6
    4de6:	1ad2      	subs	r2, r2, r3
    4de8:	2304      	movs	r3, #4
    4dea:	4093      	lsls	r3, r2
		parameters->eeprom_number_of_pages =
    4dec:	6043      	str	r3, [r0, #4]
	}

	/* Read the current BOOTSZ fuse value from the USER row */
	uint16_t boot_fuse_value =
			(NVM_USER_MEMORY[NVMCTRL_FUSES_BOOTPROT_Pos / 16] &
    4dee:	4b0a      	ldr	r3, [pc, #40]	; (4e18 <nvm_get_parameters+0x5c>)
    4df0:	881b      	ldrh	r3, [r3, #0]
	uint16_t boot_fuse_value =
    4df2:	2207      	movs	r2, #7
    4df4:	4013      	ands	r3, r2
			NVMCTRL_FUSES_BOOTPROT_Msk) >> NVMCTRL_FUSES_BOOTPROT_Pos;

	/* Translate the BOOTSZ fuse byte value to a number of NVM pages */
	if (boot_fuse_value == 7) {
    4df6:	2b07      	cmp	r3, #7
    4df8:	d008      	beq.n	4e0c <nvm_get_parameters+0x50>
		parameters->bootloader_number_of_pages = 0;
	}
	else {
		parameters->bootloader_number_of_pages =
				NVMCTRL_ROW_PAGES << (7 - boot_fuse_value);
    4dfa:	2207      	movs	r2, #7
    4dfc:	1ad2      	subs	r2, r2, r3
    4dfe:	2304      	movs	r3, #4
    4e00:	4093      	lsls	r3, r2
		parameters->bootloader_number_of_pages =
    4e02:	6083      	str	r3, [r0, #8]
	}
}
    4e04:	4770      	bx	lr
		parameters->eeprom_number_of_pages = 0;
    4e06:	2300      	movs	r3, #0
    4e08:	6043      	str	r3, [r0, #4]
    4e0a:	e7f0      	b.n	4dee <nvm_get_parameters+0x32>
		parameters->bootloader_number_of_pages = 0;
    4e0c:	2300      	movs	r3, #0
    4e0e:	6083      	str	r3, [r0, #8]
    4e10:	e7f8      	b.n	4e04 <nvm_get_parameters+0x48>
    4e12:	46c0      	nop			; (mov r8, r8)
    4e14:	41004000 	.word	0x41004000
    4e18:	00804000 	.word	0x00804000

00004e1c <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    4e1c:	b500      	push	{lr}
    4e1e:	b083      	sub	sp, #12
	config->mux_position = SYSTEM_PINMUX_GPIO;
    4e20:	ab01      	add	r3, sp, #4
    4e22:	2280      	movs	r2, #128	; 0x80
    4e24:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    4e26:	780a      	ldrb	r2, [r1, #0]
    4e28:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    4e2a:	784a      	ldrb	r2, [r1, #1]
    4e2c:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    4e2e:	788a      	ldrb	r2, [r1, #2]
    4e30:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    4e32:	0019      	movs	r1, r3
    4e34:	4b01      	ldr	r3, [pc, #4]	; (4e3c <port_pin_set_config+0x20>)
    4e36:	4798      	blx	r3
}
    4e38:	b003      	add	sp, #12
    4e3a:	bd00      	pop	{pc}
    4e3c:	000072d9 	.word	0x000072d9

00004e40 <rtc_count_is_syncing>:
{
 	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    4e40:	6803      	ldr	r3, [r0, #0]

	if (rtc_module->MODE0.SYNCBUSY.reg) {
    4e42:	6918      	ldr	r0, [r3, #16]
    4e44:	1e43      	subs	r3, r0, #1
    4e46:	4198      	sbcs	r0, r3
    4e48:	b2c0      	uxtb	r0, r0
		return true;
	}

	return false;
}
    4e4a:	4770      	bx	lr

00004e4c <rtc_count_enable>:
 * module configuration parameters cannot be altered while the module is enabled.
 *
 * \param[in,out]  module  RTC hardware module
 */
void rtc_count_enable(struct rtc_module *const module)
{
    4e4c:	b570      	push	{r4, r5, r6, lr}
    4e4e:	0004      	movs	r4, r0
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    4e50:	6806      	ldr	r6, [r0, #0]
    4e52:	2204      	movs	r2, #4
    4e54:	4b08      	ldr	r3, [pc, #32]	; (4e78 <rtc_count_enable+0x2c>)
    4e56:	601a      	str	r2, [r3, #0]

#if RTC_COUNT_ASYNC == true
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_RTC);
#endif

	while (rtc_count_is_syncing(module)) {
    4e58:	4d08      	ldr	r5, [pc, #32]	; (4e7c <rtc_count_enable+0x30>)
    4e5a:	0020      	movs	r0, r4
    4e5c:	47a8      	blx	r5
    4e5e:	2800      	cmp	r0, #0
    4e60:	d1fb      	bne.n	4e5a <rtc_count_enable+0xe>
		/* Wait for synchronization */
	}

	/* Enable RTC module. */
	rtc_module->MODE0.CTRLA.reg |= RTC_MODE0_CTRLA_ENABLE;
    4e62:	8833      	ldrh	r3, [r6, #0]
    4e64:	2202      	movs	r2, #2
    4e66:	4313      	orrs	r3, r2
    4e68:	8033      	strh	r3, [r6, #0]

	while (rtc_count_is_syncing(module)) {
    4e6a:	4d04      	ldr	r5, [pc, #16]	; (4e7c <rtc_count_enable+0x30>)
    4e6c:	0020      	movs	r0, r4
    4e6e:	47a8      	blx	r5
    4e70:	2800      	cmp	r0, #0
    4e72:	d1fb      	bne.n	4e6c <rtc_count_enable+0x20>
		/* Wait for synchronization */
	}
}
    4e74:	bd70      	pop	{r4, r5, r6, pc}
    4e76:	46c0      	nop			; (mov r8, r8)
    4e78:	e000e100 	.word	0xe000e100
    4e7c:	00004e41 	.word	0x00004e41

00004e80 <rtc_count_disable>:
 * Disables the RTC module.
 *
 * \param[in,out]  module  RTC hardware module
 */
void rtc_count_disable(struct rtc_module *const module)
{
    4e80:	b570      	push	{r4, r5, r6, lr}
    4e82:	0004      	movs	r4, r0
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    4e84:	6806      	ldr	r6, [r0, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    4e86:	2104      	movs	r1, #4
    4e88:	2380      	movs	r3, #128	; 0x80
    4e8a:	4a0a      	ldr	r2, [pc, #40]	; (4eb4 <rtc_count_disable+0x34>)
    4e8c:	50d1      	str	r1, [r2, r3]

#if RTC_COUNT_ASYNC == true
	system_interrupt_disable(SYSTEM_INTERRUPT_MODULE_RTC);
#endif

	while (rtc_count_is_syncing(module)) {
    4e8e:	4d0a      	ldr	r5, [pc, #40]	; (4eb8 <rtc_count_disable+0x38>)
    4e90:	0020      	movs	r0, r4
    4e92:	47a8      	blx	r5
    4e94:	2800      	cmp	r0, #0
    4e96:	d1fb      	bne.n	4e90 <rtc_count_disable+0x10>
		/* Wait for synchronization */
	}

	/* Disbale interrupt */
	rtc_module->MODE0.INTENCLR.reg = RTC_MODE0_INTENCLR_MASK;
    4e98:	4b08      	ldr	r3, [pc, #32]	; (4ebc <rtc_count_disable+0x3c>)
    4e9a:	8133      	strh	r3, [r6, #8]
	/* Clear interrupt flag */
	rtc_module->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_MASK;
    4e9c:	81b3      	strh	r3, [r6, #12]

	/* Disable RTC module. */
	rtc_module->MODE0.CTRLA.reg &= ~RTC_MODE0_CTRLA_ENABLE;
    4e9e:	8833      	ldrh	r3, [r6, #0]
    4ea0:	2202      	movs	r2, #2
    4ea2:	4393      	bics	r3, r2
    4ea4:	8033      	strh	r3, [r6, #0]

	while (rtc_count_is_syncing(module)) {
    4ea6:	4d04      	ldr	r5, [pc, #16]	; (4eb8 <rtc_count_disable+0x38>)
    4ea8:	0020      	movs	r0, r4
    4eaa:	47a8      	blx	r5
    4eac:	2800      	cmp	r0, #0
    4eae:	d1fb      	bne.n	4ea8 <rtc_count_disable+0x28>
		/* Wait for synchronization */
	}
}
    4eb0:	bd70      	pop	{r4, r5, r6, pc}
    4eb2:	46c0      	nop			; (mov r8, r8)
    4eb4:	e000e100 	.word	0xe000e100
    4eb8:	00004e41 	.word	0x00004e41
    4ebc:	ffff81ff 	.word	0xffff81ff

00004ec0 <rtc_count_reset>:
 * Resets the RTC to hardware defaults.
 *
 * \param[in,out]  module  Pointer to the software instance struct
 */
void rtc_count_reset(struct rtc_module *const module)
{
    4ec0:	b570      	push	{r4, r5, r6, lr}
    4ec2:	0004      	movs	r4, r0
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    4ec4:	6806      	ldr	r6, [r0, #0]

	/* Disable module before reset. */
	rtc_count_disable(module);
    4ec6:	4b0a      	ldr	r3, [pc, #40]	; (4ef0 <rtc_count_reset+0x30>)
    4ec8:	4798      	blx	r3

#if RTC_COUNT_ASYNC == true
	module->registered_callback = 0;
    4eca:	2300      	movs	r3, #0
    4ecc:	86a3      	strh	r3, [r4, #52]	; 0x34
	module->enabled_callback    = 0;
    4ece:	86e3      	strh	r3, [r4, #54]	; 0x36
#endif

	while (rtc_count_is_syncing(module)) {
    4ed0:	4d08      	ldr	r5, [pc, #32]	; (4ef4 <rtc_count_reset+0x34>)
    4ed2:	0020      	movs	r0, r4
    4ed4:	47a8      	blx	r5
    4ed6:	2800      	cmp	r0, #0
    4ed8:	d1fb      	bne.n	4ed2 <rtc_count_reset+0x12>
		/* Wait for synchronization */
	}

	/* Initiate software reset. */
	rtc_module->MODE0.CTRLA.reg |= RTC_MODE0_CTRLA_SWRST;
    4eda:	8833      	ldrh	r3, [r6, #0]
    4edc:	2201      	movs	r2, #1
    4ede:	4313      	orrs	r3, r2
    4ee0:	8033      	strh	r3, [r6, #0]

	while (rtc_count_is_syncing(module)) {
    4ee2:	4d04      	ldr	r5, [pc, #16]	; (4ef4 <rtc_count_reset+0x34>)
    4ee4:	0020      	movs	r0, r4
    4ee6:	47a8      	blx	r5
    4ee8:	2800      	cmp	r0, #0
    4eea:	d1fb      	bne.n	4ee4 <rtc_count_reset+0x24>
		/* Wait for synchronization */
	}
}
    4eec:	bd70      	pop	{r4, r5, r6, pc}
    4eee:	46c0      	nop			; (mov r8, r8)
    4ef0:	00004e81 	.word	0x00004e81
    4ef4:	00004e41 	.word	0x00004e41

00004ef8 <rtc_count_set_count>:
 * \retval STATUS_ERR_INVALID_ARG  If invalid argument(s) were provided
 */
enum status_code rtc_count_set_count(
		struct rtc_module *const module,
		const uint32_t count_value)
{
    4ef8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4efa:	0004      	movs	r4, r0
    4efc:	000e      	movs	r6, r1
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    4efe:	6807      	ldr	r7, [r0, #0]

	while (rtc_count_is_syncing(module)) {
    4f00:	4d0c      	ldr	r5, [pc, #48]	; (4f34 <rtc_count_set_count+0x3c>)
    4f02:	0020      	movs	r0, r4
    4f04:	47a8      	blx	r5
    4f06:	2800      	cmp	r0, #0
    4f08:	d1fb      	bne.n	4f02 <rtc_count_set_count+0xa>
		/* Wait for synchronization */
	}

	/* Set count according to mode */
	switch(module->mode){
    4f0a:	7923      	ldrb	r3, [r4, #4]
    4f0c:	2b00      	cmp	r3, #0
    4f0e:	d009      	beq.n	4f24 <rtc_count_set_count+0x2c>

			break;

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
    4f10:	2017      	movs	r0, #23
	switch(module->mode){
    4f12:	2b01      	cmp	r3, #1
    4f14:	d105      	bne.n	4f22 <rtc_count_set_count+0x2a>
			rtc_module->MODE0.COUNT.reg = count_value;
    4f16:	61be      	str	r6, [r7, #24]
	}

	while (rtc_count_is_syncing(module)) {
    4f18:	4d06      	ldr	r5, [pc, #24]	; (4f34 <rtc_count_set_count+0x3c>)
    4f1a:	0020      	movs	r0, r4
    4f1c:	47a8      	blx	r5
    4f1e:	2800      	cmp	r0, #0
    4f20:	d1fb      	bne.n	4f1a <rtc_count_set_count+0x22>
		/* Wait for synchronization */
	}
	return STATUS_OK;
}
    4f22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if(count_value > 0xffff){
    4f24:	4b04      	ldr	r3, [pc, #16]	; (4f38 <rtc_count_set_count+0x40>)
				return STATUS_ERR_INVALID_ARG;
    4f26:	2017      	movs	r0, #23
			if(count_value > 0xffff){
    4f28:	429e      	cmp	r6, r3
    4f2a:	d8fa      	bhi.n	4f22 <rtc_count_set_count+0x2a>
			rtc_module->MODE1.COUNT.reg = (uint32_t)count_value;
    4f2c:	b2b6      	uxth	r6, r6
    4f2e:	833e      	strh	r6, [r7, #24]
			break;
    4f30:	e7f2      	b.n	4f18 <rtc_count_set_count+0x20>
    4f32:	46c0      	nop			; (mov r8, r8)
    4f34:	00004e41 	.word	0x00004e41
    4f38:	0000ffff 	.word	0x0000ffff

00004f3c <rtc_count_get_count>:
 * Returns the current count value.
 *
 * \return The current counter value as a 32-bit unsigned integer.
 */
uint32_t rtc_count_get_count(struct rtc_module *const module)
{
    4f3c:	b570      	push	{r4, r5, r6, lr}
    4f3e:	0004      	movs	r4, r0
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    4f40:	6806      	ldr	r6, [r0, #0]

	/* Initialize return value. */
	uint32_t ret_val;

	while (rtc_count_is_syncing(module)) {
    4f42:	4d08      	ldr	r5, [pc, #32]	; (4f64 <rtc_count_get_count+0x28>)
    4f44:	0020      	movs	r0, r4
    4f46:	47a8      	blx	r5
    4f48:	2800      	cmp	r0, #0
    4f4a:	d1fb      	bne.n	4f44 <rtc_count_get_count+0x8>
		/* Wait for synchronization */
	}

	/* Read value based on mode. */
	switch (module->mode) {
    4f4c:	7923      	ldrb	r3, [r4, #4]
    4f4e:	2b00      	cmp	r3, #0
    4f50:	d004      	beq.n	4f5c <rtc_count_get_count+0x20>
			break;

		default:
			Assert(false);
			/* Counter not initialized. Assume counter value 0.*/
			ret_val = 0;
    4f52:	2000      	movs	r0, #0
	switch (module->mode) {
    4f54:	2b01      	cmp	r3, #1
    4f56:	d100      	bne.n	4f5a <rtc_count_get_count+0x1e>
			ret_val = rtc_module->MODE0.COUNT.reg;
    4f58:	69b0      	ldr	r0, [r6, #24]
			break;
	}

	return ret_val;
}
    4f5a:	bd70      	pop	{r4, r5, r6, pc}
			ret_val = (uint32_t)rtc_module->MODE1.COUNT.reg;
    4f5c:	8b30      	ldrh	r0, [r6, #24]
    4f5e:	b280      	uxth	r0, r0
			break;
    4f60:	e7fb      	b.n	4f5a <rtc_count_get_count+0x1e>
    4f62:	46c0      	nop			; (mov r8, r8)
    4f64:	00004e41 	.word	0x00004e41

00004f68 <rtc_count_set_compare>:
 */
enum status_code rtc_count_set_compare(
		struct rtc_module *const module,
		const uint32_t comp_value,
		const enum rtc_count_compare comp_index)
{
    4f68:	b5f0      	push	{r4, r5, r6, r7, lr}
    4f6a:	b083      	sub	sp, #12
    4f6c:	0004      	movs	r4, r0
    4f6e:	9101      	str	r1, [sp, #4]
    4f70:	0015      	movs	r5, r2
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    4f72:	6806      	ldr	r6, [r0, #0]

	while (rtc_count_is_syncing(module)) {
    4f74:	4f13      	ldr	r7, [pc, #76]	; (4fc4 <rtc_count_set_compare+0x5c>)
    4f76:	0020      	movs	r0, r4
    4f78:	47b8      	blx	r7
    4f7a:	2800      	cmp	r0, #0
    4f7c:	d1fb      	bne.n	4f76 <rtc_count_set_compare+0xe>
		/* Wait for synchronization */
	}

	/* Set compare values based on operation mode. */
	switch (module->mode) {
    4f7e:	7923      	ldrb	r3, [r4, #4]
    4f80:	2b00      	cmp	r3, #0
    4f82:	d00e      	beq.n	4fa2 <rtc_count_set_compare+0x3a>
    4f84:	2b01      	cmp	r3, #1
    4f86:	d119      	bne.n	4fbc <rtc_count_set_compare+0x54>
		case RTC_COUNT_MODE_32BIT:
			/* Check sanity of comp_index. */
			if ((uint32_t)comp_index > RTC_COMP32_NUM) {
				return STATUS_ERR_INVALID_ARG;
    4f88:	3017      	adds	r0, #23
			if ((uint32_t)comp_index > RTC_COMP32_NUM) {
    4f8a:	2d01      	cmp	r5, #1
    4f8c:	d817      	bhi.n	4fbe <rtc_count_set_compare+0x56>
			}

			/* Set compare value for COMP. */
			rtc_module->MODE0.COMP[comp_index].reg = comp_value;
    4f8e:	3508      	adds	r5, #8
    4f90:	00ad      	lsls	r5, r5, #2
    4f92:	9b01      	ldr	r3, [sp, #4]
    4f94:	51ab      	str	r3, [r5, r6]
		default:
			Assert(false);
			return STATUS_ERR_BAD_FORMAT;
	}

	while (rtc_count_is_syncing(module)) {
    4f96:	4d0b      	ldr	r5, [pc, #44]	; (4fc4 <rtc_count_set_compare+0x5c>)
    4f98:	0020      	movs	r0, r4
    4f9a:	47a8      	blx	r5
    4f9c:	2800      	cmp	r0, #0
    4f9e:	d1fb      	bne.n	4f98 <rtc_count_set_compare+0x30>
    4fa0:	e00d      	b.n	4fbe <rtc_count_set_compare+0x56>
				return STATUS_ERR_INVALID_ARG;
    4fa2:	2017      	movs	r0, #23
			if ((uint32_t)comp_index > RTC_NUM_OF_COMP16) {
    4fa4:	2d02      	cmp	r5, #2
    4fa6:	d80a      	bhi.n	4fbe <rtc_count_set_compare+0x56>
			if (comp_value > 0xffff) {
    4fa8:	4b07      	ldr	r3, [pc, #28]	; (4fc8 <rtc_count_set_compare+0x60>)
    4faa:	9a01      	ldr	r2, [sp, #4]
    4fac:	429a      	cmp	r2, r3
    4fae:	d806      	bhi.n	4fbe <rtc_count_set_compare+0x56>
			rtc_module->MODE1.COMP[comp_index].reg = comp_value & 0xffff;
    4fb0:	466b      	mov	r3, sp
    4fb2:	889b      	ldrh	r3, [r3, #4]
    4fb4:	3510      	adds	r5, #16
    4fb6:	006d      	lsls	r5, r5, #1
    4fb8:	53ab      	strh	r3, [r5, r6]
			break;
    4fba:	e7ec      	b.n	4f96 <rtc_count_set_compare+0x2e>
			return STATUS_ERR_BAD_FORMAT;
    4fbc:	201a      	movs	r0, #26
		/* Wait for synchronization */
	}

	/* Return status if everything is OK. */
	return STATUS_OK;
}
    4fbe:	b003      	add	sp, #12
    4fc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4fc2:	46c0      	nop			; (mov r8, r8)
    4fc4:	00004e41 	.word	0x00004e41
    4fc8:	0000ffff 	.word	0x0000ffff

00004fcc <rtc_count_init>:
{
    4fcc:	b570      	push	{r4, r5, r6, lr}
    4fce:	0004      	movs	r4, r0
    4fd0:	0015      	movs	r5, r2
	module->hw = hw;
    4fd2:	6001      	str	r1, [r0, #0]
			MCLK->APBAMASK.reg |= mask;
    4fd4:	4a1f      	ldr	r2, [pc, #124]	; (5054 <rtc_count_init+0x88>)
    4fd6:	6951      	ldr	r1, [r2, #20]
    4fd8:	2380      	movs	r3, #128	; 0x80
    4fda:	005b      	lsls	r3, r3, #1
    4fdc:	430b      	orrs	r3, r1
    4fde:	6153      	str	r3, [r2, #20]
	OSC32KCTRL->RTCCTRL.reg = RTC_CLOCK_SOURCE;
    4fe0:	2205      	movs	r2, #5
    4fe2:	4b1d      	ldr	r3, [pc, #116]	; (5058 <rtc_count_init+0x8c>)
    4fe4:	611a      	str	r2, [r3, #16]
	rtc_count_reset(module);
    4fe6:	4b1d      	ldr	r3, [pc, #116]	; (505c <rtc_count_init+0x90>)
    4fe8:	4798      	blx	r3
	module->mode                = config->mode;
    4fea:	78ab      	ldrb	r3, [r5, #2]
    4fec:	7123      	strb	r3, [r4, #4]
	_rtc_instance[0] = module;
    4fee:	4b1c      	ldr	r3, [pc, #112]	; (5060 <rtc_count_init+0x94>)
    4ff0:	601c      	str	r4, [r3, #0]
	Rtc *const rtc_module = module->hw;
    4ff2:	6822      	ldr	r2, [r4, #0]
				    | (config->enable_read_sync << RTC_MODE0_CTRLA_COUNTSYNC_Pos)
    4ff4:	792b      	ldrb	r3, [r5, #4]
    4ff6:	03db      	lsls	r3, r3, #15
				    | config->prescaler;
    4ff8:	8829      	ldrh	r1, [r5, #0]
    4ffa:	430b      	orrs	r3, r1
    4ffc:	b29b      	uxth	r3, r3
	rtc_module->MODE0.CTRLA.reg = RTC_MODE0_CTRLA_MODE(0)
    4ffe:	8013      	strh	r3, [r2, #0]
	switch (config->mode) {
    5000:	78ab      	ldrb	r3, [r5, #2]
    5002:	2b00      	cmp	r3, #0
    5004:	d013      	beq.n	502e <rtc_count_init+0x62>
			return STATUS_ERR_INVALID_ARG;
    5006:	2017      	movs	r0, #23
	switch (config->mode) {
    5008:	2b01      	cmp	r3, #1
    500a:	d10f      	bne.n	502c <rtc_count_init+0x60>
			rtc_module->MODE0.CTRLA.reg |= RTC_MODE0_CTRLA_MODE(0);
    500c:	8813      	ldrh	r3, [r2, #0]
    500e:	b29b      	uxth	r3, r3
    5010:	8013      	strh	r3, [r2, #0]
			if (config->clear_on_match) {
    5012:	78eb      	ldrb	r3, [r5, #3]
    5014:	2b00      	cmp	r3, #0
    5016:	d003      	beq.n	5020 <rtc_count_init+0x54>
				rtc_module->MODE0.CTRLA.reg |= RTC_MODE0_CTRLA_MATCHCLR;
    5018:	8813      	ldrh	r3, [r2, #0]
    501a:	2180      	movs	r1, #128	; 0x80
    501c:	430b      	orrs	r3, r1
    501e:	8013      	strh	r3, [r2, #0]
				rtc_count_set_compare(module, config->compare_values[i],
    5020:	68a9      	ldr	r1, [r5, #8]
    5022:	2200      	movs	r2, #0
    5024:	0020      	movs	r0, r4
    5026:	4b0f      	ldr	r3, [pc, #60]	; (5064 <rtc_count_init+0x98>)
    5028:	4798      	blx	r3
	return STATUS_OK;
    502a:	2000      	movs	r0, #0
}
    502c:	bd70      	pop	{r4, r5, r6, pc}
			rtc_module->MODE1.CTRLA.reg |= RTC_MODE1_CTRLA_MODE(1);
    502e:	8813      	ldrh	r3, [r2, #0]
    5030:	2104      	movs	r1, #4
    5032:	430b      	orrs	r3, r1
    5034:	8013      	strh	r3, [r2, #0]
			if (config->clear_on_match) {
    5036:	78eb      	ldrb	r3, [r5, #3]
				return STATUS_ERR_INVALID_ARG;
    5038:	2017      	movs	r0, #23
			if (config->clear_on_match) {
    503a:	2b00      	cmp	r3, #0
    503c:	d1f6      	bne.n	502c <rtc_count_init+0x60>
				rtc_count_set_compare(module, config->compare_values[i],
    503e:	2200      	movs	r2, #0
    5040:	68a9      	ldr	r1, [r5, #8]
    5042:	0020      	movs	r0, r4
    5044:	4e07      	ldr	r6, [pc, #28]	; (5064 <rtc_count_init+0x98>)
    5046:	47b0      	blx	r6
    5048:	68e9      	ldr	r1, [r5, #12]
    504a:	2201      	movs	r2, #1
    504c:	0020      	movs	r0, r4
    504e:	47b0      	blx	r6
	return STATUS_OK;
    5050:	2000      	movs	r0, #0
    5052:	e7eb      	b.n	502c <rtc_count_init+0x60>
    5054:	40000400 	.word	0x40000400
    5058:	40001000 	.word	0x40001000
    505c:	00004ec1 	.word	0x00004ec1
    5060:	20002234 	.word	0x20002234
    5064:	00004f69 	.word	0x00004f69

00005068 <rtc_count_register_callback>:
{

	enum status_code status = STATUS_OK;

	/* Overflow callback */
	if (callback_type == RTC_COUNT_CALLBACK_OVERFLOW
    5068:	2a0a      	cmp	r2, #10
    506a:	d009      	beq.n	5080 <rtc_count_register_callback+0x18>
#ifdef FEATURE_RTC_TAMPER_DETECTION
		|| callback_type == RTC_COUNT_CALLBACK_TAMPER
#endif
		|| (callback_type >= RTC_COUNT_CALLBACK_PERIODIC_INTERVAL_0
    506c:	2a07      	cmp	r2, #7
    506e:	d907      	bls.n	5080 <rtc_count_register_callback+0x18>
			&& callback_type <= RTC_COUNT_CALLBACK_PERIODIC_INTERVAL_7)) {
		status = STATUS_OK;
	} else {
		/* Make sure callback type can be registered */
		switch (module->mode) {
    5070:	7903      	ldrb	r3, [r0, #4]
    5072:	2b00      	cmp	r3, #0
    5074:	d010      	beq.n	5098 <rtc_count_register_callback+0x30>
    5076:	2b01      	cmp	r3, #1
    5078:	d112      	bne.n	50a0 <rtc_count_register_callback+0x38>
    507a:	3316      	adds	r3, #22
		case RTC_COUNT_MODE_32BIT:
			/* Check sanity for 32-bit mode. */
			if (callback_type > (RTC_COMP32_NUM + RTC_PER_NUM)) {
    507c:	2a09      	cmp	r2, #9
    507e:	d809      	bhi.n	5094 <rtc_count_register_callback+0x2c>
		}
	}

	if (status == STATUS_OK) {
		/* Register callback */
		module->callbacks[callback_type] = callback;
    5080:	1c93      	adds	r3, r2, #2
    5082:	009b      	lsls	r3, r3, #2
    5084:	5019      	str	r1, [r3, r0]
		/* Set corresponding bit to set callback as registered */
		module->registered_callback |= (1 << callback_type);
    5086:	8e83      	ldrh	r3, [r0, #52]	; 0x34
    5088:	2101      	movs	r1, #1
    508a:	4091      	lsls	r1, r2
    508c:	430b      	orrs	r3, r1
    508e:	b29b      	uxth	r3, r3
    5090:	8683      	strh	r3, [r0, #52]	; 0x34
    5092:	2300      	movs	r3, #0
	}

	return status;
}
    5094:	0018      	movs	r0, r3
    5096:	4770      	bx	lr
    5098:	2317      	movs	r3, #23
			if (callback_type > (RTC_NUM_OF_COMP16 + RTC_PER_NUM)) {
    509a:	2a0a      	cmp	r2, #10
    509c:	d8fa      	bhi.n	5094 <rtc_count_register_callback+0x2c>
    509e:	e7ef      	b.n	5080 <rtc_count_register_callback+0x18>
			status = STATUS_ERR_INVALID_ARG;
    50a0:	2317      	movs	r3, #23
    50a2:	e7f7      	b.n	5094 <rtc_count_register_callback+0x2c>

000050a4 <rtc_count_enable_callback>:
 * \param[in]     callback_type Callback type to enable
 */
void rtc_count_enable_callback(
		struct rtc_module *const module,
		enum rtc_count_callback callback_type)
{
    50a4:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    50a6:	6802      	ldr	r2, [r0, #0]

	if (callback_type == RTC_COUNT_CALLBACK_OVERFLOW) {
    50a8:	290a      	cmp	r1, #10
    50aa:	d011      	beq.n	50d0 <rtc_count_enable_callback+0x2c>
		rtc_module->MODE0.INTENSET.reg = RTC_MODE0_INTFLAG_OVF;
#ifdef FEATURE_RTC_TAMPER_DETECTION
	} else if (callback_type == RTC_COUNT_CALLBACK_TAMPER) {
		rtc_module->MODE0.INTENSET.reg = RTC_MODE0_INTFLAG_TAMPER;
#endif
	} else if (callback_type >= RTC_COUNT_CALLBACK_PERIODIC_INTERVAL_0
    50ac:	2907      	cmp	r1, #7
    50ae:	d912      	bls.n	50d6 <rtc_count_enable_callback+0x32>
			&& callback_type <= RTC_COUNT_CALLBACK_PERIODIC_INTERVAL_7) {
		rtc_module->MODE0.INTENSET.reg = RTC_MODE1_INTFLAG_PER(1 << callback_type);
	}else {
		rtc_module->MODE0.INTENSET.reg = RTC_MODE1_INTFLAG_CMP(1 << (callback_type - RTC_PER_NUM));
    50b0:	2380      	movs	r3, #128	; 0x80
    50b2:	005b      	lsls	r3, r3, #1
    50b4:	000c      	movs	r4, r1
    50b6:	3c08      	subs	r4, #8
    50b8:	40a3      	lsls	r3, r4
    50ba:	24c0      	movs	r4, #192	; 0xc0
    50bc:	00a4      	lsls	r4, r4, #2
    50be:	4023      	ands	r3, r4
    50c0:	8153      	strh	r3, [r2, #10]
	}
	/* Mark callback as enabled. */
	module->enabled_callback |= (1 << callback_type);
    50c2:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
    50c4:	2201      	movs	r2, #1
    50c6:	408a      	lsls	r2, r1
    50c8:	4313      	orrs	r3, r2
    50ca:	b29b      	uxth	r3, r3
    50cc:	86c3      	strh	r3, [r0, #54]	; 0x36
}
    50ce:	bd10      	pop	{r4, pc}
		rtc_module->MODE0.INTENSET.reg = RTC_MODE0_INTFLAG_OVF;
    50d0:	4b04      	ldr	r3, [pc, #16]	; (50e4 <rtc_count_enable_callback+0x40>)
    50d2:	8153      	strh	r3, [r2, #10]
    50d4:	e7f5      	b.n	50c2 <rtc_count_enable_callback+0x1e>
		rtc_module->MODE0.INTENSET.reg = RTC_MODE1_INTFLAG_PER(1 << callback_type);
    50d6:	2401      	movs	r4, #1
    50d8:	408c      	lsls	r4, r1
    50da:	23ff      	movs	r3, #255	; 0xff
    50dc:	4023      	ands	r3, r4
    50de:	8153      	strh	r3, [r2, #10]
    50e0:	e7ef      	b.n	50c2 <rtc_count_enable_callback+0x1e>
    50e2:	46c0      	nop			; (mov r8, r8)
    50e4:	ffff8000 	.word	0xffff8000

000050e8 <rtc_count_disable_callback>:
 * \param[in]     callback_type Callback type to disable
 */
void rtc_count_disable_callback(
		struct rtc_module *const module,
		enum rtc_count_callback callback_type)
{
    50e8:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    50ea:	6802      	ldr	r2, [r0, #0]

	/* Disable interrupt */
	if (callback_type == RTC_COUNT_CALLBACK_OVERFLOW) {
    50ec:	290a      	cmp	r1, #10
    50ee:	d010      	beq.n	5112 <rtc_count_disable_callback+0x2a>
		rtc_module->MODE0.INTENCLR.reg = RTC_MODE0_INTFLAG_OVF;
#ifdef FEATURE_RTC_TAMPER_DETECTION
	} else if (callback_type == RTC_COUNT_CALLBACK_TAMPER) {
		rtc_module->MODE0.INTENCLR.reg = RTC_MODE0_INTFLAG_TAMPER;
#endif
	} else if(callback_type >= RTC_COUNT_CALLBACK_PERIODIC_INTERVAL_0
    50f0:	2907      	cmp	r1, #7
    50f2:	d911      	bls.n	5118 <rtc_count_disable_callback+0x30>
			&& callback_type <= RTC_COUNT_CALLBACK_PERIODIC_INTERVAL_7){
		rtc_module->MODE0.INTENCLR.reg = RTC_MODE1_INTFLAG_PER(1 << callback_type);;
	}else {
		rtc_module->MODE0.INTENCLR.reg = RTC_MODE1_INTFLAG_CMP(1 << (callback_type - RTC_PER_NUM));
    50f4:	2380      	movs	r3, #128	; 0x80
    50f6:	005b      	lsls	r3, r3, #1
    50f8:	000c      	movs	r4, r1
    50fa:	3c08      	subs	r4, #8
    50fc:	40a3      	lsls	r3, r4
    50fe:	24c0      	movs	r4, #192	; 0xc0
    5100:	00a4      	lsls	r4, r4, #2
    5102:	4023      	ands	r3, r4
    5104:	8113      	strh	r3, [r2, #8]
	}

	/* Mark callback as disabled. */
	module->enabled_callback &= ~(1 << callback_type);
    5106:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
    5108:	2201      	movs	r2, #1
    510a:	408a      	lsls	r2, r1
    510c:	4393      	bics	r3, r2
    510e:	86c3      	strh	r3, [r0, #54]	; 0x36
}
    5110:	bd10      	pop	{r4, pc}
		rtc_module->MODE0.INTENCLR.reg = RTC_MODE0_INTFLAG_OVF;
    5112:	4b04      	ldr	r3, [pc, #16]	; (5124 <rtc_count_disable_callback+0x3c>)
    5114:	8113      	strh	r3, [r2, #8]
    5116:	e7f6      	b.n	5106 <rtc_count_disable_callback+0x1e>
		rtc_module->MODE0.INTENCLR.reg = RTC_MODE1_INTFLAG_PER(1 << callback_type);;
    5118:	2401      	movs	r4, #1
    511a:	408c      	lsls	r4, r1
    511c:	23ff      	movs	r3, #255	; 0xff
    511e:	4023      	ands	r3, r4
    5120:	8113      	strh	r3, [r2, #8]
    5122:	e7f0      	b.n	5106 <rtc_count_disable_callback+0x1e>
    5124:	ffff8000 	.word	0xffff8000

00005128 <RTC_Handler>:
/**
 * \internal ISR handler for RTC
 */
#if (RTC_INST_NUM == 1)
void RTC_Handler(void)
{
    5128:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    512a:	46de      	mov	lr, fp
    512c:	4657      	mov	r7, sl
    512e:	464e      	mov	r6, r9
    5130:	4645      	mov	r5, r8
    5132:	b5e0      	push	{r5, r6, r7, lr}
	struct rtc_module *module = _rtc_instance[instance_index];
    5134:	4b2b      	ldr	r3, [pc, #172]	; (51e4 <RTC_Handler+0xbc>)
    5136:	681b      	ldr	r3, [r3, #0]
    5138:	469a      	mov	sl, r3
	Rtc *const rtc_module = module->hw;
    513a:	681e      	ldr	r6, [r3, #0]
	uint16_t callback_mask = module->enabled_callback;
    513c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
	callback_mask &= module->registered_callback;
    513e:	4652      	mov	r2, sl
    5140:	8e92      	ldrh	r2, [r2, #52]	; 0x34
    5142:	401a      	ands	r2, r3
    5144:	4690      	mov	r8, r2
	uint16_t interrupt_status = rtc_module->MODE0.INTFLAG.reg;
    5146:	89b2      	ldrh	r2, [r6, #12]
	interrupt_status &= rtc_module->MODE0.INTENSET.reg;
    5148:	8973      	ldrh	r3, [r6, #10]
    514a:	4013      	ands	r3, r2
	if (interrupt_status & RTC_MODE0_INTFLAG_OVF) {
    514c:	b21a      	sxth	r2, r3
    514e:	2a00      	cmp	r2, #0
    5150:	db08      	blt.n	5164 <RTC_Handler+0x3c>
    5152:	27ff      	movs	r7, #255	; 0xff
    5154:	401f      	ands	r7, r3
	} else if (interrupt_status & RTC_MODE1_INTFLAG_PER(0xff)) {
    5156:	d02a      	beq.n	51ae <RTC_Handler+0x86>
    5158:	2400      	movs	r4, #0
			if ((interrupt_status & RTC_MODE1_INTFLAG_PER(1 << i))
    515a:	2301      	movs	r3, #1
    515c:	4699      	mov	r9, r3
			rtc_module->MODE0.INTFLAG.reg = RTC_MODE1_INTFLAG_PER(1<<i);
    515e:	33fe      	adds	r3, #254	; 0xfe
    5160:	469b      	mov	fp, r3
    5162:	e014      	b.n	518e <RTC_Handler+0x66>
		if (callback_mask & (1 << RTC_COUNT_CALLBACK_OVERFLOW)) {
    5164:	4643      	mov	r3, r8
    5166:	055b      	lsls	r3, r3, #21
    5168:	d407      	bmi.n	517a <RTC_Handler+0x52>
		rtc_module->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_OVF;
    516a:	4b1f      	ldr	r3, [pc, #124]	; (51e8 <RTC_Handler+0xc0>)
    516c:	81b3      	strh	r3, [r6, #12]
	_rtc_interrupt_handler(0);
}
    516e:	bc3c      	pop	{r2, r3, r4, r5}
    5170:	4690      	mov	r8, r2
    5172:	4699      	mov	r9, r3
    5174:	46a2      	mov	sl, r4
    5176:	46ab      	mov	fp, r5
    5178:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			module->callbacks[RTC_COUNT_CALLBACK_OVERFLOW]();
    517a:	4653      	mov	r3, sl
    517c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    517e:	4798      	blx	r3
    5180:	e7f3      	b.n	516a <RTC_Handler+0x42>
			rtc_module->MODE0.INTFLAG.reg = RTC_MODE1_INTFLAG_PER(1<<i);
    5182:	465b      	mov	r3, fp
    5184:	401d      	ands	r5, r3
    5186:	81b5      	strh	r5, [r6, #12]
    5188:	3401      	adds	r4, #1
		for ( i = 0;i < RTC_PER_NUM;i++) {
    518a:	2c08      	cmp	r4, #8
    518c:	d0ef      	beq.n	516e <RTC_Handler+0x46>
			if ((interrupt_status & RTC_MODE1_INTFLAG_PER(1 << i))
    518e:	0023      	movs	r3, r4
    5190:	464d      	mov	r5, r9
    5192:	40a5      	lsls	r5, r4
    5194:	422f      	tst	r7, r5
    5196:	d0f4      	beq.n	5182 <RTC_Handler+0x5a>
			  && (callback_mask & (1 << i))) {
    5198:	4642      	mov	r2, r8
    519a:	4122      	asrs	r2, r4
    519c:	4649      	mov	r1, r9
    519e:	4211      	tst	r1, r2
    51a0:	d0ef      	beq.n	5182 <RTC_Handler+0x5a>
				module->callbacks[i]();
    51a2:	3302      	adds	r3, #2
    51a4:	009b      	lsls	r3, r3, #2
    51a6:	4652      	mov	r2, sl
    51a8:	589b      	ldr	r3, [r3, r2]
    51aa:	4798      	blx	r3
    51ac:	e7e9      	b.n	5182 <RTC_Handler+0x5a>
	}else if (interrupt_status & RTC_MODE1_INTFLAG_CMP(1 << 0)) {
    51ae:	05da      	lsls	r2, r3, #23
    51b0:	d50a      	bpl.n	51c8 <RTC_Handler+0xa0>
		if (callback_mask & (1 << RTC_COUNT_CALLBACK_COMPARE_0)) {
    51b2:	4643      	mov	r3, r8
    51b4:	05db      	lsls	r3, r3, #23
    51b6:	d403      	bmi.n	51c0 <RTC_Handler+0x98>
		rtc_module->MODE0.INTFLAG.reg = RTC_MODE1_INTFLAG_CMP(1 << 0);
    51b8:	2380      	movs	r3, #128	; 0x80
    51ba:	005b      	lsls	r3, r3, #1
    51bc:	81b3      	strh	r3, [r6, #12]
    51be:	e7d6      	b.n	516e <RTC_Handler+0x46>
			module->callbacks[RTC_COUNT_CALLBACK_COMPARE_0]();
    51c0:	4653      	mov	r3, sl
    51c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    51c4:	4798      	blx	r3
    51c6:	e7f7      	b.n	51b8 <RTC_Handler+0x90>
	} else if (interrupt_status & RTC_MODE1_INTFLAG_CMP(1 << 1)) {
    51c8:	059b      	lsls	r3, r3, #22
    51ca:	d5d0      	bpl.n	516e <RTC_Handler+0x46>
		if (callback_mask & (1 << RTC_COUNT_CALLBACK_COMPARE_1)) {
    51cc:	4643      	mov	r3, r8
    51ce:	059b      	lsls	r3, r3, #22
    51d0:	d403      	bmi.n	51da <RTC_Handler+0xb2>
		rtc_module->MODE0.INTFLAG.reg = RTC_MODE1_INTFLAG_CMP(1 << 1);
    51d2:	2380      	movs	r3, #128	; 0x80
    51d4:	009b      	lsls	r3, r3, #2
    51d6:	81b3      	strh	r3, [r6, #12]
}
    51d8:	e7c9      	b.n	516e <RTC_Handler+0x46>
			module->callbacks[RTC_COUNT_CALLBACK_COMPARE_1]();
    51da:	4653      	mov	r3, sl
    51dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    51de:	4798      	blx	r3
    51e0:	e7f7      	b.n	51d2 <RTC_Handler+0xaa>
    51e2:	46c0      	nop			; (mov r8, r8)
    51e4:	20002234 	.word	0x20002234
    51e8:	ffff8000 	.word	0xffff8000

000051ec <_i2c_master_wait_for_sync>:
	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
    51ec:	6801      	ldr	r1, [r0, #0]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
    51ee:	2207      	movs	r2, #7
    51f0:	69cb      	ldr	r3, [r1, #28]
	while (i2c_master_is_syncing(module)) {
    51f2:	421a      	tst	r2, r3
    51f4:	d1fc      	bne.n	51f0 <_i2c_master_wait_for_sync+0x4>
}
    51f6:	4770      	bx	lr

000051f8 <i2c_master_init>:
 */
enum status_code i2c_master_init(
		struct i2c_master_module *const module,
		Sercom *const hw,
		const struct i2c_master_config *const config)
{
    51f8:	b5f0      	push	{r4, r5, r6, r7, lr}
    51fa:	46d6      	mov	lr, sl
    51fc:	464f      	mov	r7, r9
    51fe:	4646      	mov	r6, r8
    5200:	b5c0      	push	{r6, r7, lr}
    5202:	b08a      	sub	sp, #40	; 0x28
    5204:	0007      	movs	r7, r0
    5206:	000e      	movs	r6, r1
    5208:	0014      	movs	r4, r2
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize software module */
	module->hw = hw;
    520a:	6039      	str	r1, [r7, #0]

	SercomI2cm *const i2c_module = &(module->hw->I2CM);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    520c:	0008      	movs	r0, r1
    520e:	4ba5      	ldr	r3, [pc, #660]	; (54a4 <i2c_master_init+0x2ac>)
    5210:	4798      	blx	r3

#if (SAML22) || (SAMC20)
	pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#elif (SAML21) || (SAMR30) || (SAMR34) || (SAMR35) || (WLR089)
	if (sercom_index == 5) {
    5212:	2805      	cmp	r0, #5
    5214:	d100      	bne.n	5218 <i2c_master_init+0x20>
    5216:	e13d      	b.n	5494 <i2c_master_init+0x29c>
		pm_index     = MCLK_APBDMASK_SERCOM5_Pos;
		gclk_index   = SERCOM5_GCLK_ID_CORE;
	} else {
		pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    5218:	0005      	movs	r5, r0
    521a:	3512      	adds	r5, #18
			MCLK->APBCMASK.reg |= mask;
    521c:	4aa2      	ldr	r2, [pc, #648]	; (54a8 <i2c_master_init+0x2b0>)
    521e:	69d1      	ldr	r1, [r2, #28]
	/* Turn on module in PM */
#if (SAML21) || (SAMR30) || (SAMR34) || (SAMR35) || (WLR089)
	if (sercom_index == 5) {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    5220:	2301      	movs	r3, #1
    5222:	4083      	lsls	r3, r0
    5224:	430b      	orrs	r3, r1
    5226:	61d3      	str	r3, [r2, #28]
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
    5228:	a909      	add	r1, sp, #36	; 0x24
    522a:	7b23      	ldrb	r3, [r4, #12]
    522c:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    522e:	b2ed      	uxtb	r5, r5
    5230:	0028      	movs	r0, r5
    5232:	4b9e      	ldr	r3, [pc, #632]	; (54ac <i2c_master_init+0x2b4>)
    5234:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    5236:	0028      	movs	r0, r5
    5238:	4b9d      	ldr	r3, [pc, #628]	; (54b0 <i2c_master_init+0x2b8>)
    523a:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    523c:	7b20      	ldrb	r0, [r4, #12]
    523e:	2100      	movs	r1, #0
    5240:	4b9c      	ldr	r3, [pc, #624]	; (54b4 <i2c_master_init+0x2bc>)
    5242:	4798      	blx	r3

	/* Check if module is enabled. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
    5244:	6833      	ldr	r3, [r6, #0]
		return STATUS_ERR_DENIED;
    5246:	201c      	movs	r0, #28
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
    5248:	079b      	lsls	r3, r3, #30
    524a:	d505      	bpl.n	5258 <i2c_master_init+0x60>
	/* Set sercom module to operate in I2C master mode. */
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE(0x5);

	/* Set config and return status. */
	return _i2c_master_set_config(module, config);
}
    524c:	b00a      	add	sp, #40	; 0x28
    524e:	bc1c      	pop	{r2, r3, r4}
    5250:	4690      	mov	r8, r2
    5252:	4699      	mov	r9, r3
    5254:	46a2      	mov	sl, r4
    5256:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
    5258:	6833      	ldr	r3, [r6, #0]
		return STATUS_BUSY;
    525a:	3817      	subs	r0, #23
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
    525c:	07db      	lsls	r3, r3, #31
    525e:	d4f5      	bmi.n	524c <i2c_master_init+0x54>
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    5260:	6838      	ldr	r0, [r7, #0]
    5262:	4b90      	ldr	r3, [pc, #576]	; (54a4 <i2c_master_init+0x2ac>)
    5264:	4699      	mov	r9, r3
    5266:	4798      	blx	r3
    5268:	0005      	movs	r5, r0
	_sercom_set_handler(instance_index, _i2c_master_interrupt_handler);
    526a:	4993      	ldr	r1, [pc, #588]	; (54b8 <i2c_master_init+0x2c0>)
    526c:	4b93      	ldr	r3, [pc, #588]	; (54bc <i2c_master_init+0x2c4>)
    526e:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    5270:	00ad      	lsls	r5, r5, #2
    5272:	4b93      	ldr	r3, [pc, #588]	; (54c0 <i2c_master_init+0x2c8>)
    5274:	50ef      	str	r7, [r5, r3]
	module->registered_callback = 0;
    5276:	2300      	movs	r3, #0
    5278:	763b      	strb	r3, [r7, #24]
	module->enabled_callback = 0;
    527a:	767b      	strb	r3, [r7, #25]
	module->buffer_length = 0;
    527c:	2500      	movs	r5, #0
    527e:	837b      	strh	r3, [r7, #26]
	module->buffer_remaining = 0;
    5280:	83bb      	strh	r3, [r7, #28]
	module->status = STATUS_OK;
    5282:	2225      	movs	r2, #37	; 0x25
    5284:	54bd      	strb	r5, [r7, r2]
	module->buffer = NULL;
    5286:	623b      	str	r3, [r7, #32]
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE(0x5);
    5288:	3314      	adds	r3, #20
    528a:	6033      	str	r3, [r6, #0]
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    528c:	683b      	ldr	r3, [r7, #0]
    528e:	4698      	mov	r8, r3
	uint8_t sercom_index = _sercom_get_sercom_inst_index(sercom_hw);
    5290:	0018      	movs	r0, r3
    5292:	47c8      	blx	r9
    5294:	4681      	mov	r9, r0
    5296:	2380      	movs	r3, #128	; 0x80
    5298:	aa08      	add	r2, sp, #32
    529a:	7013      	strb	r3, [r2, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    529c:	7055      	strb	r5, [r2, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    529e:	2301      	movs	r3, #1
    52a0:	7093      	strb	r3, [r2, #2]
	config->powersave    = false;
    52a2:	70d5      	strb	r5, [r2, #3]
	uint32_t pad0 = config->pinmux_pad0;
    52a4:	69e0      	ldr	r0, [r4, #28]
	uint32_t pad1 = config->pinmux_pad1;
    52a6:	6a26      	ldr	r6, [r4, #32]
	if (pad0 == PINMUX_DEFAULT) {
    52a8:	2800      	cmp	r0, #0
    52aa:	d100      	bne.n	52ae <i2c_master_init+0xb6>
    52ac:	e0af      	b.n	540e <i2c_master_init+0x216>
	pin_conf.mux_position = pad0 & 0xFFFF;
    52ae:	ab08      	add	r3, sp, #32
    52b0:	7018      	strb	r0, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
    52b2:	2302      	movs	r3, #2
    52b4:	aa08      	add	r2, sp, #32
    52b6:	7053      	strb	r3, [r2, #1]
	system_pinmux_pin_set_config(pad0 >> 16, &pin_conf);
    52b8:	0c00      	lsrs	r0, r0, #16
    52ba:	b2c0      	uxtb	r0, r0
    52bc:	0011      	movs	r1, r2
    52be:	4b81      	ldr	r3, [pc, #516]	; (54c4 <i2c_master_init+0x2cc>)
    52c0:	4798      	blx	r3
	if (pad1 == PINMUX_DEFAULT) {
    52c2:	2e00      	cmp	r6, #0
    52c4:	d100      	bne.n	52c8 <i2c_master_init+0xd0>
    52c6:	e0a7      	b.n	5418 <i2c_master_init+0x220>
	pin_conf.mux_position = pad1 & 0xFFFF;
    52c8:	ab08      	add	r3, sp, #32
    52ca:	701e      	strb	r6, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
    52cc:	2302      	movs	r3, #2
    52ce:	aa08      	add	r2, sp, #32
    52d0:	7053      	strb	r3, [r2, #1]
	system_pinmux_pin_set_config(pad1 >> 16, &pin_conf);
    52d2:	0c36      	lsrs	r6, r6, #16
    52d4:	b2f0      	uxtb	r0, r6
    52d6:	0011      	movs	r1, r2
    52d8:	4b7a      	ldr	r3, [pc, #488]	; (54c4 <i2c_master_init+0x2cc>)
    52da:	4798      	blx	r3
	module->unknown_bus_state_timeout = config->unknown_bus_state_timeout;
    52dc:	8aa3      	ldrh	r3, [r4, #20]
    52de:	80fb      	strh	r3, [r7, #6]
	module->buffer_timeout = config->buffer_timeout;
    52e0:	8ae3      	ldrh	r3, [r4, #22]
    52e2:	813b      	strh	r3, [r7, #8]
	if (config->run_in_standby || system_is_debugger_present()) {
    52e4:	7e23      	ldrb	r3, [r4, #24]
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
    52e6:	2280      	movs	r2, #128	; 0x80
	if (config->run_in_standby || system_is_debugger_present()) {
    52e8:	2b00      	cmp	r3, #0
    52ea:	d104      	bne.n	52f6 <i2c_master_init+0xfe>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    52ec:	4b76      	ldr	r3, [pc, #472]	; (54c8 <i2c_master_init+0x2d0>)
    52ee:	789b      	ldrb	r3, [r3, #2]
    52f0:	079b      	lsls	r3, r3, #30
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
    52f2:	0fdb      	lsrs	r3, r3, #31
    52f4:	01da      	lsls	r2, r3, #7
	tmp_ctrla |= config->transfer_speed;
    52f6:	68a1      	ldr	r1, [r4, #8]
    52f8:	6923      	ldr	r3, [r4, #16]
    52fa:	430b      	orrs	r3, r1
    52fc:	4313      	orrs	r3, r2
	if (config->scl_low_timeout) {
    52fe:	2224      	movs	r2, #36	; 0x24
    5300:	5ca2      	ldrb	r2, [r4, r2]
    5302:	2a00      	cmp	r2, #0
    5304:	d002      	beq.n	530c <i2c_master_init+0x114>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_LOWTOUTEN;
    5306:	2280      	movs	r2, #128	; 0x80
    5308:	05d2      	lsls	r2, r2, #23
    530a:	4313      	orrs	r3, r2
		tmp_ctrla |= config->inactive_timeout;
    530c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    530e:	4313      	orrs	r3, r2
	if (config->scl_stretch_only_after_ack_bit || (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED)) {
    5310:	222c      	movs	r2, #44	; 0x2c
    5312:	5ca2      	ldrb	r2, [r4, r2]
    5314:	2a00      	cmp	r2, #0
    5316:	d103      	bne.n	5320 <i2c_master_init+0x128>
    5318:	2280      	movs	r2, #128	; 0x80
    531a:	0492      	lsls	r2, r2, #18
    531c:	4291      	cmp	r1, r2
    531e:	d102      	bne.n	5326 <i2c_master_init+0x12e>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SCLSM;
    5320:	2280      	movs	r2, #128	; 0x80
    5322:	0512      	lsls	r2, r2, #20
    5324:	4313      	orrs	r3, r2
	if (config->slave_scl_low_extend_timeout) {
    5326:	222d      	movs	r2, #45	; 0x2d
    5328:	5ca2      	ldrb	r2, [r4, r2]
    532a:	2a00      	cmp	r2, #0
    532c:	d002      	beq.n	5334 <i2c_master_init+0x13c>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SEXTTOEN;
    532e:	2280      	movs	r2, #128	; 0x80
    5330:	0412      	lsls	r2, r2, #16
    5332:	4313      	orrs	r3, r2
	if (config->master_scl_low_extend_timeout) {
    5334:	222e      	movs	r2, #46	; 0x2e
    5336:	5ca2      	ldrb	r2, [r4, r2]
    5338:	2a00      	cmp	r2, #0
    533a:	d002      	beq.n	5342 <i2c_master_init+0x14a>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_MEXTTOEN;
    533c:	2280      	movs	r2, #128	; 0x80
    533e:	03d2      	lsls	r2, r2, #15
    5340:	4313      	orrs	r3, r2
	i2c_module->CTRLA.reg |= tmp_ctrla;
    5342:	4642      	mov	r2, r8
    5344:	6812      	ldr	r2, [r2, #0]
    5346:	4313      	orrs	r3, r2
    5348:	4642      	mov	r2, r8
    534a:	6013      	str	r3, [r2, #0]
	i2c_module->CTRLB.reg = SERCOM_I2CM_CTRLB_SMEN;
    534c:	2380      	movs	r3, #128	; 0x80
    534e:	005b      	lsls	r3, r3, #1
    5350:	6053      	str	r3, [r2, #4]
	uint32_t fgclk       = system_gclk_chan_get_hz(SERCOM0_GCLK_ID_CORE + sercom_index);
    5352:	464d      	mov	r5, r9
    5354:	3512      	adds	r5, #18
    5356:	b2e8      	uxtb	r0, r5
    5358:	4b5c      	ldr	r3, [pc, #368]	; (54cc <i2c_master_init+0x2d4>)
    535a:	4798      	blx	r3
    535c:	9007      	str	r0, [sp, #28]
	uint32_t fscl        = 1000 * config->baud_rate;
    535e:	23fa      	movs	r3, #250	; 0xfa
    5360:	009b      	lsls	r3, r3, #2
    5362:	6822      	ldr	r2, [r4, #0]
    5364:	435a      	muls	r2, r3
    5366:	4691      	mov	r9, r2
	uint32_t fscl_hs     = 1000 * config->baud_rate_high_speed;
    5368:	6863      	ldr	r3, [r4, #4]
    536a:	469a      	mov	sl, r3
	tmp_baud = (int32_t)(div_ceil(
    536c:	4d58      	ldr	r5, [pc, #352]	; (54d0 <i2c_master_init+0x2d8>)
    536e:	47a8      	blx	r5
    5370:	9000      	str	r0, [sp, #0]
    5372:	9101      	str	r1, [sp, #4]
    5374:	464b      	mov	r3, r9
    5376:	0058      	lsls	r0, r3, #1
    5378:	47a8      	blx	r5
    537a:	9002      	str	r0, [sp, #8]
    537c:	9103      	str	r1, [sp, #12]
    537e:	8e20      	ldrh	r0, [r4, #48]	; 0x30
    5380:	47a8      	blx	r5
    5382:	9004      	str	r0, [sp, #16]
    5384:	9105      	str	r1, [sp, #20]
    5386:	4f53      	ldr	r7, [pc, #332]	; (54d4 <i2c_master_init+0x2dc>)
    5388:	4a53      	ldr	r2, [pc, #332]	; (54d8 <i2c_master_init+0x2e0>)
    538a:	4b54      	ldr	r3, [pc, #336]	; (54dc <i2c_master_init+0x2e4>)
    538c:	9800      	ldr	r0, [sp, #0]
    538e:	9901      	ldr	r1, [sp, #4]
    5390:	47b8      	blx	r7
    5392:	0002      	movs	r2, r0
    5394:	000b      	movs	r3, r1
    5396:	9804      	ldr	r0, [sp, #16]
    5398:	9905      	ldr	r1, [sp, #20]
    539a:	47b8      	blx	r7
    539c:	4e50      	ldr	r6, [pc, #320]	; (54e0 <i2c_master_init+0x2e8>)
    539e:	2200      	movs	r2, #0
    53a0:	4b50      	ldr	r3, [pc, #320]	; (54e4 <i2c_master_init+0x2ec>)
    53a2:	47b0      	blx	r6
    53a4:	9004      	str	r0, [sp, #16]
    53a6:	9105      	str	r1, [sp, #20]
    53a8:	4648      	mov	r0, r9
    53aa:	47a8      	blx	r5
    53ac:	0002      	movs	r2, r0
    53ae:	000b      	movs	r3, r1
    53b0:	9804      	ldr	r0, [sp, #16]
    53b2:	9905      	ldr	r1, [sp, #20]
    53b4:	47b8      	blx	r7
    53b6:	0002      	movs	r2, r0
    53b8:	000b      	movs	r3, r1
    53ba:	4d4b      	ldr	r5, [pc, #300]	; (54e8 <i2c_master_init+0x2f0>)
    53bc:	9800      	ldr	r0, [sp, #0]
    53be:	9901      	ldr	r1, [sp, #4]
    53c0:	47a8      	blx	r5
    53c2:	9a02      	ldr	r2, [sp, #8]
    53c4:	9b03      	ldr	r3, [sp, #12]
    53c6:	47b0      	blx	r6
    53c8:	2200      	movs	r2, #0
    53ca:	4b48      	ldr	r3, [pc, #288]	; (54ec <i2c_master_init+0x2f4>)
    53cc:	47a8      	blx	r5
    53ce:	9a02      	ldr	r2, [sp, #8]
    53d0:	9b03      	ldr	r3, [sp, #12]
    53d2:	4d47      	ldr	r5, [pc, #284]	; (54f0 <i2c_master_init+0x2f8>)
    53d4:	47a8      	blx	r5
    53d6:	4b47      	ldr	r3, [pc, #284]	; (54f4 <i2c_master_init+0x2fc>)
    53d8:	4798      	blx	r3
    53da:	0005      	movs	r5, r0
	if (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED) {
    53dc:	2380      	movs	r3, #128	; 0x80
    53de:	049b      	lsls	r3, r3, #18
    53e0:	68a2      	ldr	r2, [r4, #8]
    53e2:	429a      	cmp	r2, r3
    53e4:	d01e      	beq.n	5424 <i2c_master_init+0x22c>
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
    53e6:	0003      	movs	r3, r0
    53e8:	2040      	movs	r0, #64	; 0x40
    53ea:	2dff      	cmp	r5, #255	; 0xff
    53ec:	d900      	bls.n	53f0 <i2c_master_init+0x1f8>
    53ee:	e72d      	b.n	524c <i2c_master_init+0x54>
	int32_t tmp_baudlow_hs = 0;
    53f0:	2400      	movs	r4, #0
	int32_t tmp_baud_hs = 0;
    53f2:	2000      	movs	r0, #0
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
    53f4:	25ff      	movs	r5, #255	; 0xff
    53f6:	401d      	ands	r5, r3
			SERCOM_I2CM_BAUD_HSBAUD(tmp_baud_hs) | SERCOM_I2CM_BAUD_HSBAUDLOW(tmp_baudlow_hs);
    53f8:	0624      	lsls	r4, r4, #24
    53fa:	4325      	orrs	r5, r4
    53fc:	0400      	lsls	r0, r0, #16
    53fe:	23ff      	movs	r3, #255	; 0xff
    5400:	041b      	lsls	r3, r3, #16
    5402:	4018      	ands	r0, r3
    5404:	4305      	orrs	r5, r0
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
    5406:	4643      	mov	r3, r8
    5408:	60dd      	str	r5, [r3, #12]
	enum status_code tmp_status_code = STATUS_OK;
    540a:	2000      	movs	r0, #0
    540c:	e71e      	b.n	524c <i2c_master_init+0x54>
		pad0 = _sercom_get_default_pad(sercom_hw, 0);
    540e:	2100      	movs	r1, #0
    5410:	4640      	mov	r0, r8
    5412:	4b39      	ldr	r3, [pc, #228]	; (54f8 <i2c_master_init+0x300>)
    5414:	4798      	blx	r3
    5416:	e74a      	b.n	52ae <i2c_master_init+0xb6>
		pad1 = _sercom_get_default_pad(sercom_hw, 1);
    5418:	2101      	movs	r1, #1
    541a:	4640      	mov	r0, r8
    541c:	4b36      	ldr	r3, [pc, #216]	; (54f8 <i2c_master_init+0x300>)
    541e:	4798      	blx	r3
    5420:	0006      	movs	r6, r0
    5422:	e751      	b.n	52c8 <i2c_master_init+0xd0>
	uint32_t fscl_hs     = 1000 * config->baud_rate_high_speed;
    5424:	26fa      	movs	r6, #250	; 0xfa
    5426:	00b6      	lsls	r6, r6, #2
    5428:	4653      	mov	r3, sl
    542a:	435e      	muls	r6, r3
		tmp_baudlow_hs = (int32_t)((fgclk * 2.0) / (3.0 * fscl_hs) - 1);
    542c:	9800      	ldr	r0, [sp, #0]
    542e:	9901      	ldr	r1, [sp, #4]
    5430:	0002      	movs	r2, r0
    5432:	000b      	movs	r3, r1
    5434:	4c2a      	ldr	r4, [pc, #168]	; (54e0 <i2c_master_init+0x2e8>)
    5436:	47a0      	blx	r4
    5438:	9000      	str	r0, [sp, #0]
    543a:	9101      	str	r1, [sp, #4]
    543c:	0030      	movs	r0, r6
    543e:	4b24      	ldr	r3, [pc, #144]	; (54d0 <i2c_master_init+0x2d8>)
    5440:	4798      	blx	r3
    5442:	2200      	movs	r2, #0
    5444:	4b2d      	ldr	r3, [pc, #180]	; (54fc <i2c_master_init+0x304>)
    5446:	47b8      	blx	r7
    5448:	0002      	movs	r2, r0
    544a:	000b      	movs	r3, r1
    544c:	9800      	ldr	r0, [sp, #0]
    544e:	9901      	ldr	r1, [sp, #4]
    5450:	4c27      	ldr	r4, [pc, #156]	; (54f0 <i2c_master_init+0x2f8>)
    5452:	47a0      	blx	r4
    5454:	2200      	movs	r2, #0
    5456:	4b25      	ldr	r3, [pc, #148]	; (54ec <i2c_master_init+0x2f4>)
    5458:	4c23      	ldr	r4, [pc, #140]	; (54e8 <i2c_master_init+0x2f0>)
    545a:	47a0      	blx	r4
    545c:	4b25      	ldr	r3, [pc, #148]	; (54f4 <i2c_master_init+0x2fc>)
    545e:	4798      	blx	r3
    5460:	1e04      	subs	r4, r0, #0
		if (tmp_baudlow_hs) {
    5462:	d00c      	beq.n	547e <i2c_master_init+0x286>
			tmp_baud_hs = (int32_t)(fgclk / fscl_hs) - 2 - tmp_baudlow_hs;
    5464:	0031      	movs	r1, r6
    5466:	9807      	ldr	r0, [sp, #28]
    5468:	4b25      	ldr	r3, [pc, #148]	; (5500 <i2c_master_init+0x308>)
    546a:	4798      	blx	r3
    546c:	3802      	subs	r0, #2
    546e:	1b00      	subs	r0, r0, r4
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
    5470:	002b      	movs	r3, r5
    5472:	2dff      	cmp	r5, #255	; 0xff
    5474:	d80c      	bhi.n	5490 <i2c_master_init+0x298>
    5476:	28ff      	cmp	r0, #255	; 0xff
    5478:	d9bc      	bls.n	53f4 <i2c_master_init+0x1fc>
    547a:	2040      	movs	r0, #64	; 0x40
    547c:	e6e6      	b.n	524c <i2c_master_init+0x54>
			tmp_baud_hs = (int32_t)(div_ceil(fgclk, 2 * fscl_hs)) - 1;
    547e:	0071      	lsls	r1, r6, #1
    5480:	1e48      	subs	r0, r1, #1
    5482:	9b07      	ldr	r3, [sp, #28]
    5484:	469c      	mov	ip, r3
    5486:	4460      	add	r0, ip
    5488:	4b1d      	ldr	r3, [pc, #116]	; (5500 <i2c_master_init+0x308>)
    548a:	4798      	blx	r3
    548c:	3801      	subs	r0, #1
    548e:	e7ef      	b.n	5470 <i2c_master_init+0x278>
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
    5490:	2040      	movs	r0, #64	; 0x40
    5492:	e6db      	b.n	524c <i2c_master_init+0x54>
			break;
		case SYSTEM_CLOCK_APB_APBD:
			MCLK->APBDMASK.reg |= mask;
    5494:	4a04      	ldr	r2, [pc, #16]	; (54a8 <i2c_master_init+0x2b0>)
    5496:	6a13      	ldr	r3, [r2, #32]
    5498:	2102      	movs	r1, #2
    549a:	430b      	orrs	r3, r1
    549c:	6213      	str	r3, [r2, #32]
		gclk_index   = SERCOM5_GCLK_ID_CORE;
    549e:	2518      	movs	r5, #24
    54a0:	e6c2      	b.n	5228 <i2c_master_init+0x30>
    54a2:	46c0      	nop			; (mov r8, r8)
    54a4:	00005eb1 	.word	0x00005eb1
    54a8:	40000400 	.word	0x40000400
    54ac:	000071ad 	.word	0x000071ad
    54b0:	0000713d 	.word	0x0000713d
    54b4:	00005d09 	.word	0x00005d09
    54b8:	000059a5 	.word	0x000059a5
    54bc:	00005eed 	.word	0x00005eed
    54c0:	20002238 	.word	0x20002238
    54c4:	000072d9 	.word	0x000072d9
    54c8:	41002000 	.word	0x41002000
    54cc:	000071d1 	.word	0x000071d1
    54d0:	000194d1 	.word	0x000194d1
    54d4:	000188b9 	.word	0x000188b9
    54d8:	e826d695 	.word	0xe826d695
    54dc:	3e112e0b 	.word	0x3e112e0b
    54e0:	00017a31 	.word	0x00017a31
    54e4:	40240000 	.word	0x40240000
    54e8:	00018db9 	.word	0x00018db9
    54ec:	3ff00000 	.word	0x3ff00000
    54f0:	00018051 	.word	0x00018051
    54f4:	000193e5 	.word	0x000193e5
    54f8:	00005d55 	.word	0x00005d55
    54fc:	40080000 	.word	0x40080000
    5500:	000165ad 	.word	0x000165ad

00005504 <i2c_master_reset>:
 * Reset the module to hardware defaults.
 *
 * \param[in,out] module Pointer to software module structure
 */
void i2c_master_reset(struct i2c_master_module *const module)
{
    5504:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5506:	46ce      	mov	lr, r9
    5508:	4647      	mov	r7, r8
    550a:	b580      	push	{r7, lr}
    550c:	0004      	movs	r4, r0
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    550e:	6803      	ldr	r3, [r0, #0]
    5510:	4699      	mov	r9, r3

	/* Wait for sync */
	_i2c_master_wait_for_sync(module);
    5512:	4e14      	ldr	r6, [pc, #80]	; (5564 <i2c_master_reset+0x60>)
    5514:	47b0      	blx	r6
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    5516:	6825      	ldr	r5, [r4, #0]
		system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
    5518:	0028      	movs	r0, r5
    551a:	4b13      	ldr	r3, [pc, #76]	; (5568 <i2c_master_reset+0x64>)
    551c:	4698      	mov	r8, r3
    551e:	4798      	blx	r3
    5520:	231f      	movs	r3, #31
    5522:	4018      	ands	r0, r3
    5524:	2701      	movs	r7, #1
    5526:	0039      	movs	r1, r7
    5528:	4081      	lsls	r1, r0
    552a:	3361      	adds	r3, #97	; 0x61
    552c:	4a0f      	ldr	r2, [pc, #60]	; (556c <i2c_master_reset+0x68>)
    552e:	50d1      	str	r1, [r2, r3]
	_i2c_master_wait_for_sync(module);
    5530:	0020      	movs	r0, r4
    5532:	47b0      	blx	r6
	i2c_module->INTENCLR.reg = SERCOM_I2CM_INTENCLR_MASK;
    5534:	2383      	movs	r3, #131	; 0x83
    5536:	752b      	strb	r3, [r5, #20]
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_MASK;
    5538:	762b      	strb	r3, [r5, #24]
	i2c_module->CTRLA.reg &= ~SERCOM_I2CM_CTRLA_ENABLE;
    553a:	682b      	ldr	r3, [r5, #0]
    553c:	2202      	movs	r2, #2
    553e:	4393      	bics	r3, r2
    5540:	602b      	str	r3, [r5, #0]
	cpu_irq_enter_critical();
    5542:	4b0b      	ldr	r3, [pc, #44]	; (5570 <i2c_master_reset+0x6c>)
    5544:	4798      	blx	r3
	i2c_master_disable(module);

#if I2C_MASTER_CALLBACK_MODE == true
	/* Clear all pending interrupts */
	system_interrupt_enter_critical_section();
	system_interrupt_clear_pending(_sercom_get_interrupt_vector(module->hw));
    5546:	6820      	ldr	r0, [r4, #0]
    5548:	47c0      	blx	r8
    554a:	4b0a      	ldr	r3, [pc, #40]	; (5574 <i2c_master_reset+0x70>)
    554c:	4798      	blx	r3
	cpu_irq_leave_critical();
    554e:	4b0a      	ldr	r3, [pc, #40]	; (5578 <i2c_master_reset+0x74>)
    5550:	4798      	blx	r3
	system_interrupt_leave_critical_section();
#endif

	/* Wait for sync */
	_i2c_master_wait_for_sync(module);
    5552:	0020      	movs	r0, r4
    5554:	47b0      	blx	r6

	/* Reset module */
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_SWRST;
    5556:	464b      	mov	r3, r9
    5558:	601f      	str	r7, [r3, #0]
}
    555a:	bc0c      	pop	{r2, r3}
    555c:	4690      	mov	r8, r2
    555e:	4699      	mov	r9, r3
    5560:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5562:	46c0      	nop			; (mov r8, r8)
    5564:	000051ed 	.word	0x000051ed
    5568:	00005f29 	.word	0x00005f29
    556c:	e000e100 	.word	0xe000e100
    5570:	00004531 	.word	0x00004531
    5574:	00007201 	.word	0x00007201
    5578:	00004571 	.word	0x00004571

0000557c <_i2c_master_address_response>:
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    557c:	6803      	ldr	r3, [r0, #0]

	/* Check for error and ignore bus-error; workaround for BUSSTATE stuck in
	 * BUSY */
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
    557e:	7e1a      	ldrb	r2, [r3, #24]
    5580:	0792      	lsls	r2, r2, #30
    5582:	d507      	bpl.n	5594 <_i2c_master_address_response+0x18>

		/* Clear write interrupt flag */
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    5584:	2202      	movs	r2, #2
    5586:	761a      	strb	r2, [r3, #24]

		/* Check arbitration. */
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
    5588:	8b5b      	ldrh	r3, [r3, #26]
    558a:	079b      	lsls	r3, r3, #30
			/* Return packet collision. */
			return STATUS_ERR_PACKET_COLLISION;
    558c:	2041      	movs	r0, #65	; 0x41

		/* Return bad address value. */
		return STATUS_ERR_BAD_ADDRESS;
	}

	return STATUS_OK;
    558e:	17db      	asrs	r3, r3, #31
    5590:	4018      	ands	r0, r3
}
    5592:	4770      	bx	lr
	} else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
    5594:	8b5a      	ldrh	r2, [r3, #26]
    5596:	0752      	lsls	r2, r2, #29
    5598:	d506      	bpl.n	55a8 <_i2c_master_address_response+0x2c>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    559a:	6859      	ldr	r1, [r3, #4]
    559c:	22c0      	movs	r2, #192	; 0xc0
    559e:	0292      	lsls	r2, r2, #10
    55a0:	430a      	orrs	r2, r1
    55a2:	605a      	str	r2, [r3, #4]
		return STATUS_ERR_BAD_ADDRESS;
    55a4:	2018      	movs	r0, #24
    55a6:	e7f4      	b.n	5592 <_i2c_master_address_response+0x16>
	return STATUS_OK;
    55a8:	2000      	movs	r0, #0
    55aa:	e7f2      	b.n	5592 <_i2c_master_address_response+0x16>

000055ac <_i2c_master_wait_for_bus>:
 * \retval STATUS_ERR_TIMEOUT  If no response was given within specified timeout
 *                             period
 */
enum status_code _i2c_master_wait_for_bus(
		struct i2c_master_module *const module)
{
    55ac:	b530      	push	{r4, r5, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    55ae:	6802      	ldr	r2, [r0, #0]

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
    55b0:	2300      	movs	r3, #0
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
    55b2:	2401      	movs	r4, #1
    55b4:	2502      	movs	r5, #2
    55b6:	7e11      	ldrb	r1, [r2, #24]
    55b8:	4221      	tst	r1, r4
    55ba:	d10b      	bne.n	55d4 <_i2c_master_wait_for_bus+0x28>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {
    55bc:	7e11      	ldrb	r1, [r2, #24]
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
    55be:	4229      	tst	r1, r5
    55c0:	d106      	bne.n	55d0 <_i2c_master_wait_for_bus+0x24>

		/* Check timeout condition. */
		if (++timeout_counter >= module->buffer_timeout) {
    55c2:	3301      	adds	r3, #1
    55c4:	b29b      	uxth	r3, r3
    55c6:	8901      	ldrh	r1, [r0, #8]
    55c8:	4299      	cmp	r1, r3
    55ca:	d8f4      	bhi.n	55b6 <_i2c_master_wait_for_bus+0xa>
			return STATUS_ERR_TIMEOUT;
    55cc:	2012      	movs	r0, #18
    55ce:	e002      	b.n	55d6 <_i2c_master_wait_for_bus+0x2a>
		}
	}
	return STATUS_OK;
    55d0:	2000      	movs	r0, #0
    55d2:	e000      	b.n	55d6 <_i2c_master_wait_for_bus+0x2a>
    55d4:	2000      	movs	r0, #0
}
    55d6:	bd30      	pop	{r4, r5, pc}

000055d8 <_i2c_master_send_hs_master_code>:
 * \retval STATUS_OK           No error happen
 */
enum status_code _i2c_master_send_hs_master_code(
		struct i2c_master_module *const module,
		uint8_t hs_master_code)
{
    55d8:	b510      	push	{r4, lr}
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    55da:	6804      	ldr	r4, [r0, #0]
	/* Return value. */
	enum status_code tmp_status;

	/* Set NACK for high speed code */
	i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    55dc:	6862      	ldr	r2, [r4, #4]
    55de:	2380      	movs	r3, #128	; 0x80
    55e0:	02db      	lsls	r3, r3, #11
    55e2:	4313      	orrs	r3, r2
    55e4:	6063      	str	r3, [r4, #4]
	/* Send high speed code */
	i2c_module->ADDR.reg = hs_master_code;
    55e6:	6261      	str	r1, [r4, #36]	; 0x24
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
    55e8:	4b02      	ldr	r3, [pc, #8]	; (55f4 <_i2c_master_send_hs_master_code+0x1c>)
    55ea:	4798      	blx	r3
	/* Clear write interrupt flag */
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
    55ec:	2301      	movs	r3, #1
    55ee:	7623      	strb	r3, [r4, #24]

	return tmp_status;
}
    55f0:	bd10      	pop	{r4, pc}
    55f2:	46c0      	nop			; (mov r8, r8)
    55f4:	000055ad 	.word	0x000055ad

000055f8 <_i2c_master_read_packet>:
 *
 */
static enum status_code _i2c_master_read_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    55f8:	b5f0      	push	{r4, r5, r6, r7, lr}
    55fa:	46de      	mov	lr, fp
    55fc:	4657      	mov	r7, sl
    55fe:	464e      	mov	r6, r9
    5600:	4645      	mov	r5, r8
    5602:	b5e0      	push	{r5, r6, r7, lr}
    5604:	b083      	sub	sp, #12
    5606:	0006      	movs	r6, r0
    5608:	4689      	mov	r9, r1
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    560a:	6805      	ldr	r5, [r0, #0]

	/* Return value. */
	enum status_code tmp_status;
	uint16_t tmp_data_length = packet->data_length;
    560c:	884c      	ldrh	r4, [r1, #2]

	/* Written buffer counter. */
	uint16_t counter = 0;

	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
    560e:	682b      	ldr	r3, [r5, #0]
    5610:	011b      	lsls	r3, r3, #4
    5612:	0fdb      	lsrs	r3, r3, #31
    5614:	469a      	mov	sl, r3

	/* Switch to high speed mode */
	if (packet->high_speed) {
    5616:	7a4b      	ldrb	r3, [r1, #9]
    5618:	2b00      	cmp	r3, #0
    561a:	d12b      	bne.n	5674 <_i2c_master_read_packet+0x7c>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
	}

	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    561c:	686b      	ldr	r3, [r5, #4]
    561e:	4a58      	ldr	r2, [pc, #352]	; (5780 <_i2c_master_read_packet+0x188>)
    5620:	4013      	ands	r3, r2
    5622:	606b      	str	r3, [r5, #4]

	/* Set address and direction bit. Will send start command on bus. */
	if (packet->ten_bit_address) {
    5624:	464b      	mov	r3, r9
    5626:	7a1b      	ldrb	r3, [r3, #8]
    5628:	2b00      	cmp	r3, #0
    562a:	d127      	bne.n	567c <_i2c_master_read_packet+0x84>
				I2C_TRANSFER_READ;
		} else {
			return tmp_status;
		}
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
    562c:	464b      	mov	r3, r9
    562e:	881b      	ldrh	r3, [r3, #0]
    5630:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
    5632:	464a      	mov	r2, r9
    5634:	7a52      	ldrb	r2, [r2, #9]
    5636:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
    5638:	4313      	orrs	r3, r2
    563a:	2201      	movs	r2, #1
    563c:	4313      	orrs	r3, r2
    563e:	626b      	str	r3, [r5, #36]	; 0x24
	}

	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
    5640:	0030      	movs	r0, r6
    5642:	4b50      	ldr	r3, [pc, #320]	; (5784 <_i2c_master_read_packet+0x18c>)
    5644:	4798      	blx	r3
    5646:	9001      	str	r0, [sp, #4]

	/* Set action to ack or nack. */
	if ((sclsm_flag) && (packet->data_length == 1)) {
    5648:	4653      	mov	r3, sl
    564a:	2b00      	cmp	r3, #0
    564c:	d003      	beq.n	5656 <_i2c_master_read_packet+0x5e>
    564e:	464b      	mov	r3, r9
    5650:	885b      	ldrh	r3, [r3, #2]
    5652:	2b01      	cmp	r3, #1
    5654:	d03b      	beq.n	56ce <_i2c_master_read_packet+0xd6>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
	} else {
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;	
    5656:	686b      	ldr	r3, [r5, #4]
    5658:	4a49      	ldr	r2, [pc, #292]	; (5780 <_i2c_master_read_packet+0x188>)
    565a:	4013      	ands	r3, r2
    565c:	606b      	str	r3, [r5, #4]
	}

	/* Check for address response error unless previous error is
	 * detected. */
	if (tmp_status == STATUS_OK) {
    565e:	9b01      	ldr	r3, [sp, #4]
    5660:	2b00      	cmp	r3, #0
    5662:	d03a      	beq.n	56da <_i2c_master_read_packet+0xe2>
		_i2c_master_wait_for_sync(module);
		packet->data[counter] = i2c_module->DATA.reg;
	}

	return tmp_status;
}
    5664:	9801      	ldr	r0, [sp, #4]
    5666:	b003      	add	sp, #12
    5668:	bc3c      	pop	{r2, r3, r4, r5}
    566a:	4690      	mov	r8, r2
    566c:	4699      	mov	r9, r3
    566e:	46a2      	mov	sl, r4
    5670:	46ab      	mov	fp, r5
    5672:	bdf0      	pop	{r4, r5, r6, r7, pc}
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
    5674:	7a89      	ldrb	r1, [r1, #10]
    5676:	4b44      	ldr	r3, [pc, #272]	; (5788 <_i2c_master_read_packet+0x190>)
    5678:	4798      	blx	r3
    567a:	e7cf      	b.n	561c <_i2c_master_read_packet+0x24>
		i2c_module->ADDR.reg = (packet->address << 1) |
    567c:	464b      	mov	r3, r9
    567e:	881b      	ldrh	r3, [r3, #0]
    5680:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    5682:	464a      	mov	r2, r9
    5684:	7a52      	ldrb	r2, [r2, #9]
    5686:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) |
    5688:	4313      	orrs	r3, r2
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    568a:	2280      	movs	r2, #128	; 0x80
    568c:	0212      	lsls	r2, r2, #8
    568e:	4313      	orrs	r3, r2
		i2c_module->ADDR.reg = (packet->address << 1) |
    5690:	626b      	str	r3, [r5, #36]	; 0x24
		tmp_status = _i2c_master_wait_for_bus(module);
    5692:	0030      	movs	r0, r6
    5694:	4b3b      	ldr	r3, [pc, #236]	; (5784 <_i2c_master_read_packet+0x18c>)
    5696:	4798      	blx	r3
    5698:	9001      	str	r0, [sp, #4]
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    569a:	686b      	ldr	r3, [r5, #4]
    569c:	4a38      	ldr	r2, [pc, #224]	; (5780 <_i2c_master_read_packet+0x188>)
    569e:	4013      	ands	r3, r2
    56a0:	606b      	str	r3, [r5, #4]
		if (tmp_status == STATUS_OK) {
    56a2:	2800      	cmp	r0, #0
    56a4:	d1de      	bne.n	5664 <_i2c_master_read_packet+0x6c>
			tmp_status = _i2c_master_address_response(module);
    56a6:	0030      	movs	r0, r6
    56a8:	4b38      	ldr	r3, [pc, #224]	; (578c <_i2c_master_read_packet+0x194>)
    56aa:	4798      	blx	r3
    56ac:	9001      	str	r0, [sp, #4]
		if (tmp_status == STATUS_OK) {
    56ae:	2800      	cmp	r0, #0
    56b0:	d1d8      	bne.n	5664 <_i2c_master_read_packet+0x6c>
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
    56b2:	464b      	mov	r3, r9
    56b4:	881b      	ldrh	r3, [r3, #0]
    56b6:	0a1b      	lsrs	r3, r3, #8
    56b8:	2278      	movs	r2, #120	; 0x78
    56ba:	4313      	orrs	r3, r2
    56bc:	005b      	lsls	r3, r3, #1
				(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    56be:	464a      	mov	r2, r9
    56c0:	7a52      	ldrb	r2, [r2, #9]
    56c2:	0392      	lsls	r2, r2, #14
    56c4:	2101      	movs	r1, #1
    56c6:	430a      	orrs	r2, r1
    56c8:	4313      	orrs	r3, r2
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
    56ca:	626b      	str	r3, [r5, #36]	; 0x24
    56cc:	e7b8      	b.n	5640 <_i2c_master_read_packet+0x48>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    56ce:	686a      	ldr	r2, [r5, #4]
    56d0:	2380      	movs	r3, #128	; 0x80
    56d2:	02db      	lsls	r3, r3, #11
    56d4:	4313      	orrs	r3, r2
    56d6:	606b      	str	r3, [r5, #4]
    56d8:	e7c1      	b.n	565e <_i2c_master_read_packet+0x66>
		tmp_status = _i2c_master_address_response(module);
    56da:	0030      	movs	r0, r6
    56dc:	4b2b      	ldr	r3, [pc, #172]	; (578c <_i2c_master_read_packet+0x194>)
    56de:	4798      	blx	r3
    56e0:	9001      	str	r0, [sp, #4]
	if (tmp_status == STATUS_OK) {
    56e2:	2800      	cmp	r0, #0
    56e4:	d1be      	bne.n	5664 <_i2c_master_read_packet+0x6c>
    56e6:	3c01      	subs	r4, #1
    56e8:	b2a4      	uxth	r4, r4
    56ea:	4680      	mov	r8, r0
		while (tmp_data_length--) {
    56ec:	4b28      	ldr	r3, [pc, #160]	; (5790 <_i2c_master_read_packet+0x198>)
    56ee:	469b      	mov	fp, r3
    56f0:	e015      	b.n	571e <_i2c_master_read_packet+0x126>
					((sclsm_flag) && (tmp_data_length == 1)))) {
    56f2:	2c01      	cmp	r4, #1
    56f4:	d020      	beq.n	5738 <_i2c_master_read_packet+0x140>
				_i2c_master_wait_for_sync(module);
    56f6:	0030      	movs	r0, r6
    56f8:	4b26      	ldr	r3, [pc, #152]	; (5794 <_i2c_master_read_packet+0x19c>)
    56fa:	4798      	blx	r3
				packet->data[counter++] = i2c_module->DATA.reg;
    56fc:	4643      	mov	r3, r8
    56fe:	1c5f      	adds	r7, r3, #1
    5700:	b2bf      	uxth	r7, r7
    5702:	2328      	movs	r3, #40	; 0x28
    5704:	5ceb      	ldrb	r3, [r5, r3]
    5706:	464a      	mov	r2, r9
    5708:	6852      	ldr	r2, [r2, #4]
    570a:	4641      	mov	r1, r8
    570c:	5453      	strb	r3, [r2, r1]
				tmp_status = _i2c_master_wait_for_bus(module);
    570e:	0030      	movs	r0, r6
    5710:	4b1c      	ldr	r3, [pc, #112]	; (5784 <_i2c_master_read_packet+0x18c>)
    5712:	4798      	blx	r3
    5714:	3c01      	subs	r4, #1
    5716:	b2a4      	uxth	r4, r4
			if (tmp_status != STATUS_OK) {
    5718:	2800      	cmp	r0, #0
    571a:	d115      	bne.n	5748 <_i2c_master_read_packet+0x150>
				packet->data[counter++] = i2c_module->DATA.reg;
    571c:	46b8      	mov	r8, r7
		while (tmp_data_length--) {
    571e:	455c      	cmp	r4, fp
    5720:	d014      	beq.n	574c <_i2c_master_read_packet+0x154>
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
    5722:	8b6b      	ldrh	r3, [r5, #26]
    5724:	069b      	lsls	r3, r3, #26
    5726:	d527      	bpl.n	5778 <_i2c_master_read_packet+0x180>
			if (module->send_nack && (((!sclsm_flag) && (tmp_data_length == 0)) ||
    5728:	7af3      	ldrb	r3, [r6, #11]
    572a:	2b00      	cmp	r3, #0
    572c:	d0e3      	beq.n	56f6 <_i2c_master_read_packet+0xfe>
    572e:	4653      	mov	r3, sl
    5730:	2b00      	cmp	r3, #0
    5732:	d1de      	bne.n	56f2 <_i2c_master_read_packet+0xfa>
    5734:	2c00      	cmp	r4, #0
    5736:	d1de      	bne.n	56f6 <_i2c_master_read_packet+0xfe>
				i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    5738:	686a      	ldr	r2, [r5, #4]
    573a:	2380      	movs	r3, #128	; 0x80
    573c:	02db      	lsls	r3, r3, #11
    573e:	4313      	orrs	r3, r2
    5740:	606b      	str	r3, [r5, #4]
    5742:	3c01      	subs	r4, #1
    5744:	b2a4      	uxth	r4, r4
    5746:	e7ea      	b.n	571e <_i2c_master_read_packet+0x126>
				packet->data[counter++] = i2c_module->DATA.reg;
    5748:	46b8      	mov	r8, r7
				tmp_status = _i2c_master_wait_for_bus(module);
    574a:	9001      	str	r0, [sp, #4]
		if (module->send_stop) {
    574c:	7ab3      	ldrb	r3, [r6, #10]
    574e:	2b00      	cmp	r3, #0
    5750:	d109      	bne.n	5766 <_i2c_master_read_packet+0x16e>
		_i2c_master_wait_for_sync(module);
    5752:	0030      	movs	r0, r6
    5754:	4b0f      	ldr	r3, [pc, #60]	; (5794 <_i2c_master_read_packet+0x19c>)
    5756:	4798      	blx	r3
		packet->data[counter] = i2c_module->DATA.reg;
    5758:	2328      	movs	r3, #40	; 0x28
    575a:	5cea      	ldrb	r2, [r5, r3]
    575c:	464b      	mov	r3, r9
    575e:	685b      	ldr	r3, [r3, #4]
    5760:	4641      	mov	r1, r8
    5762:	545a      	strb	r2, [r3, r1]
    5764:	e77e      	b.n	5664 <_i2c_master_read_packet+0x6c>
			_i2c_master_wait_for_sync(module);
    5766:	0030      	movs	r0, r6
    5768:	4b0a      	ldr	r3, [pc, #40]	; (5794 <_i2c_master_read_packet+0x19c>)
    576a:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    576c:	686a      	ldr	r2, [r5, #4]
    576e:	23c0      	movs	r3, #192	; 0xc0
    5770:	029b      	lsls	r3, r3, #10
    5772:	4313      	orrs	r3, r2
    5774:	606b      	str	r3, [r5, #4]
    5776:	e7ec      	b.n	5752 <_i2c_master_read_packet+0x15a>
				return STATUS_ERR_PACKET_COLLISION;
    5778:	2341      	movs	r3, #65	; 0x41
    577a:	9301      	str	r3, [sp, #4]
    577c:	e772      	b.n	5664 <_i2c_master_read_packet+0x6c>
    577e:	46c0      	nop			; (mov r8, r8)
    5780:	fffbffff 	.word	0xfffbffff
    5784:	000055ad 	.word	0x000055ad
    5788:	000055d9 	.word	0x000055d9
    578c:	0000557d 	.word	0x0000557d
    5790:	0000ffff 	.word	0x0000ffff
    5794:	000051ed 	.word	0x000051ed

00005798 <_i2c_master_write_packet>:
 *                                      acknowledged the address
 */
static enum status_code _i2c_master_write_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    5798:	b5f0      	push	{r4, r5, r6, r7, lr}
    579a:	46de      	mov	lr, fp
    579c:	4657      	mov	r7, sl
    579e:	464e      	mov	r6, r9
    57a0:	4645      	mov	r5, r8
    57a2:	b5e0      	push	{r5, r6, r7, lr}
    57a4:	b083      	sub	sp, #12
    57a6:	0006      	movs	r6, r0
    57a8:	000f      	movs	r7, r1
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    57aa:	6805      	ldr	r5, [r0, #0]

	/* Return value. */
	enum status_code tmp_status;
	uint16_t tmp_data_length = packet->data_length;
    57ac:	884c      	ldrh	r4, [r1, #2]

	_i2c_master_wait_for_sync(module);
    57ae:	4b32      	ldr	r3, [pc, #200]	; (5878 <_i2c_master_write_packet+0xe0>)
    57b0:	4798      	blx	r3

	/* Switch to high speed mode */
	if (packet->high_speed) {
    57b2:	7a7b      	ldrb	r3, [r7, #9]
    57b4:	2b00      	cmp	r3, #0
    57b6:	d11d      	bne.n	57f4 <_i2c_master_write_packet+0x5c>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
	}

	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    57b8:	686b      	ldr	r3, [r5, #4]
    57ba:	4a30      	ldr	r2, [pc, #192]	; (587c <_i2c_master_write_packet+0xe4>)
    57bc:	4013      	ands	r3, r2
    57be:	606b      	str	r3, [r5, #4]

	/* Set address and direction bit. Will send start command on bus. */
	if (packet->ten_bit_address) {
    57c0:	7a3b      	ldrb	r3, [r7, #8]
    57c2:	2b00      	cmp	r3, #0
    57c4:	d01b      	beq.n	57fe <_i2c_master_write_packet+0x66>
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    57c6:	883b      	ldrh	r3, [r7, #0]
    57c8:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    57ca:	7a7a      	ldrb	r2, [r7, #9]
    57cc:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    57ce:	4313      	orrs	r3, r2
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    57d0:	2280      	movs	r2, #128	; 0x80
    57d2:	0212      	lsls	r2, r2, #8
    57d4:	4313      	orrs	r3, r2
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    57d6:	626b      	str	r3, [r5, #36]	; 0x24
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
	}
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
    57d8:	0030      	movs	r0, r6
    57da:	4b29      	ldr	r3, [pc, #164]	; (5880 <_i2c_master_write_packet+0xe8>)
    57dc:	4798      	blx	r3
    57de:	9001      	str	r0, [sp, #4]

	/* Check for address response error unless previous error is
	 * detected. */
	if (tmp_status == STATUS_OK) {
    57e0:	2800      	cmp	r0, #0
    57e2:	d013      	beq.n	580c <_i2c_master_write_packet+0x74>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
		}
	}

	return tmp_status;
}
    57e4:	9801      	ldr	r0, [sp, #4]
    57e6:	b003      	add	sp, #12
    57e8:	bc3c      	pop	{r2, r3, r4, r5}
    57ea:	4690      	mov	r8, r2
    57ec:	4699      	mov	r9, r3
    57ee:	46a2      	mov	sl, r4
    57f0:	46ab      	mov	fp, r5
    57f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
    57f4:	7ab9      	ldrb	r1, [r7, #10]
    57f6:	0030      	movs	r0, r6
    57f8:	4b22      	ldr	r3, [pc, #136]	; (5884 <_i2c_master_write_packet+0xec>)
    57fa:	4798      	blx	r3
    57fc:	e7dc      	b.n	57b8 <_i2c_master_write_packet+0x20>
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    57fe:	883b      	ldrh	r3, [r7, #0]
    5800:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
    5802:	7a7a      	ldrb	r2, [r7, #9]
    5804:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    5806:	4313      	orrs	r3, r2
    5808:	626b      	str	r3, [r5, #36]	; 0x24
    580a:	e7e5      	b.n	57d8 <_i2c_master_write_packet+0x40>
		tmp_status = _i2c_master_address_response(module);
    580c:	0030      	movs	r0, r6
    580e:	4b1e      	ldr	r3, [pc, #120]	; (5888 <_i2c_master_write_packet+0xf0>)
    5810:	4798      	blx	r3
    5812:	1e03      	subs	r3, r0, #0
    5814:	9001      	str	r0, [sp, #4]
	if (tmp_status == STATUS_OK) {
    5816:	d1e5      	bne.n	57e4 <_i2c_master_write_packet+0x4c>
    5818:	46a0      	mov	r8, r4
    581a:	2400      	movs	r4, #0
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
    581c:	3320      	adds	r3, #32
    581e:	4699      	mov	r9, r3
			_i2c_master_wait_for_sync(module);
    5820:	4b15      	ldr	r3, [pc, #84]	; (5878 <_i2c_master_write_packet+0xe0>)
    5822:	469b      	mov	fp, r3
			tmp_status = _i2c_master_wait_for_bus(module);
    5824:	4b16      	ldr	r3, [pc, #88]	; (5880 <_i2c_master_write_packet+0xe8>)
    5826:	469a      	mov	sl, r3
		while (tmp_data_length--) {
    5828:	4544      	cmp	r4, r8
    582a:	d015      	beq.n	5858 <_i2c_master_write_packet+0xc0>
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
    582c:	8b6b      	ldrh	r3, [r5, #26]
    582e:	464a      	mov	r2, r9
    5830:	4213      	tst	r3, r2
    5832:	d01d      	beq.n	5870 <_i2c_master_write_packet+0xd8>
			_i2c_master_wait_for_sync(module);
    5834:	0030      	movs	r0, r6
    5836:	47d8      	blx	fp
			i2c_module->DATA.reg = packet->data[buffer_counter++];
    5838:	687b      	ldr	r3, [r7, #4]
    583a:	5d1a      	ldrb	r2, [r3, r4]
    583c:	2328      	movs	r3, #40	; 0x28
    583e:	54ea      	strb	r2, [r5, r3]
			tmp_status = _i2c_master_wait_for_bus(module);
    5840:	0030      	movs	r0, r6
    5842:	47d0      	blx	sl
			if (tmp_status != STATUS_OK) {
    5844:	2800      	cmp	r0, #0
    5846:	d106      	bne.n	5856 <_i2c_master_write_packet+0xbe>
			if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
    5848:	8b6b      	ldrh	r3, [r5, #26]
    584a:	3401      	adds	r4, #1
    584c:	075b      	lsls	r3, r3, #29
    584e:	d5eb      	bpl.n	5828 <_i2c_master_write_packet+0x90>
				tmp_status = STATUS_ERR_OVERFLOW;
    5850:	231e      	movs	r3, #30
    5852:	9301      	str	r3, [sp, #4]
    5854:	e000      	b.n	5858 <_i2c_master_write_packet+0xc0>
			tmp_status = _i2c_master_wait_for_bus(module);
    5856:	9001      	str	r0, [sp, #4]
		if (module->send_stop) {
    5858:	7ab3      	ldrb	r3, [r6, #10]
    585a:	2b00      	cmp	r3, #0
    585c:	d0c2      	beq.n	57e4 <_i2c_master_write_packet+0x4c>
			_i2c_master_wait_for_sync(module);
    585e:	0030      	movs	r0, r6
    5860:	4b05      	ldr	r3, [pc, #20]	; (5878 <_i2c_master_write_packet+0xe0>)
    5862:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    5864:	686a      	ldr	r2, [r5, #4]
    5866:	23c0      	movs	r3, #192	; 0xc0
    5868:	029b      	lsls	r3, r3, #10
    586a:	4313      	orrs	r3, r2
    586c:	606b      	str	r3, [r5, #4]
    586e:	e7b9      	b.n	57e4 <_i2c_master_write_packet+0x4c>
				return STATUS_ERR_PACKET_COLLISION;
    5870:	2341      	movs	r3, #65	; 0x41
    5872:	9301      	str	r3, [sp, #4]
    5874:	e7b6      	b.n	57e4 <_i2c_master_write_packet+0x4c>
    5876:	46c0      	nop			; (mov r8, r8)
    5878:	000051ed 	.word	0x000051ed
    587c:	fffbffff 	.word	0xfffbffff
    5880:	000055ad 	.word	0x000055ad
    5884:	000055d9 	.word	0x000055d9
    5888:	0000557d 	.word	0x0000557d

0000588c <i2c_master_read_packet_wait>:
{
    588c:	b510      	push	{r4, lr}
	if (module->buffer_remaining > 0) {
    588e:	8b83      	ldrh	r3, [r0, #28]
    5890:	b29b      	uxth	r3, r3
		return STATUS_BUSY;
    5892:	2205      	movs	r2, #5
	if (module->buffer_remaining > 0) {
    5894:	2b00      	cmp	r3, #0
    5896:	d001      	beq.n	589c <i2c_master_read_packet_wait+0x10>
}
    5898:	0010      	movs	r0, r2
    589a:	bd10      	pop	{r4, pc}
	module->send_stop = true;
    589c:	3301      	adds	r3, #1
    589e:	7283      	strb	r3, [r0, #10]
	module->send_nack = true;
    58a0:	72c3      	strb	r3, [r0, #11]
	return _i2c_master_read_packet(module, packet);
    58a2:	4b02      	ldr	r3, [pc, #8]	; (58ac <i2c_master_read_packet_wait+0x20>)
    58a4:	4798      	blx	r3
    58a6:	0002      	movs	r2, r0
    58a8:	e7f6      	b.n	5898 <i2c_master_read_packet_wait+0xc>
    58aa:	46c0      	nop			; (mov r8, r8)
    58ac:	000055f9 	.word	0x000055f9

000058b0 <i2c_master_write_packet_wait>:
 *                                      last data sent
 */
enum status_code i2c_master_write_packet_wait(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    58b0:	b510      	push	{r4, lr}
	Assert(module->hw);
	Assert(packet);

#if I2C_MASTER_CALLBACK_MODE == true
	/* Check if the I2C module is busy with a job */
	if (module->buffer_remaining > 0) {
    58b2:	8b83      	ldrh	r3, [r0, #28]
    58b4:	b29b      	uxth	r3, r3
		return STATUS_BUSY;
    58b6:	2205      	movs	r2, #5
	if (module->buffer_remaining > 0) {
    58b8:	2b00      	cmp	r3, #0
    58ba:	d001      	beq.n	58c0 <i2c_master_write_packet_wait+0x10>

	module->send_stop = true;
	module->send_nack = true;

	return _i2c_master_write_packet(module, packet);
}
    58bc:	0010      	movs	r0, r2
    58be:	bd10      	pop	{r4, pc}
	module->send_stop = true;
    58c0:	3301      	adds	r3, #1
    58c2:	7283      	strb	r3, [r0, #10]
	module->send_nack = true;
    58c4:	72c3      	strb	r3, [r0, #11]
	return _i2c_master_write_packet(module, packet);
    58c6:	4b02      	ldr	r3, [pc, #8]	; (58d0 <i2c_master_write_packet_wait+0x20>)
    58c8:	4798      	blx	r3
    58ca:	0002      	movs	r2, r0
    58cc:	e7f6      	b.n	58bc <i2c_master_write_packet_wait+0xc>
    58ce:	46c0      	nop			; (mov r8, r8)
    58d0:	00005799 	.word	0x00005799

000058d4 <_i2c_master_wait_for_sync>:
	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
    58d4:	6801      	ldr	r1, [r0, #0]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
    58d6:	2207      	movs	r2, #7
    58d8:	69cb      	ldr	r3, [r1, #28]
	while (i2c_master_is_syncing(module)) {
    58da:	421a      	tst	r2, r3
    58dc:	d1fc      	bne.n	58d8 <_i2c_master_wait_for_sync+0x4>
}
    58de:	4770      	bx	lr

000058e0 <_i2c_master_read>:
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_read(
		struct i2c_master_module *const module)
{
    58e0:	b570      	push	{r4, r5, r6, lr}
    58e2:	0004      	movs	r4, r0
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    58e4:	6806      	ldr	r6, [r0, #0]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
    58e6:	6832      	ldr	r2, [r6, #0]

	/* Find index to save next value in buffer */
	uint16_t buffer_index = module->buffer_length;
    58e8:	8b45      	ldrh	r5, [r0, #26]
	buffer_index -= module->buffer_remaining;
    58ea:	8b83      	ldrh	r3, [r0, #28]
    58ec:	1aed      	subs	r5, r5, r3
    58ee:	b2ad      	uxth	r5, r5

	module->buffer_remaining--;
    58f0:	8b83      	ldrh	r3, [r0, #28]
    58f2:	3b01      	subs	r3, #1
    58f4:	b29b      	uxth	r3, r3
    58f6:	8383      	strh	r3, [r0, #28]

	if (sclsm_flag) {
    58f8:	0113      	lsls	r3, r2, #4
    58fa:	d51d      	bpl.n	5938 <_i2c_master_read+0x58>
		if (module->send_nack && module->buffer_remaining == 1) {
    58fc:	7ac3      	ldrb	r3, [r0, #11]
    58fe:	2b00      	cmp	r3, #0
    5900:	d003      	beq.n	590a <_i2c_master_read+0x2a>
    5902:	8b83      	ldrh	r3, [r0, #28]
    5904:	b29b      	uxth	r3, r3
    5906:	2b01      	cmp	r3, #1
    5908:	d010      	beq.n	592c <_i2c_master_read+0x4c>
			/* Set action to NACK. */
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
		}
	}

	if (module->buffer_remaining == 0) {
    590a:	8ba3      	ldrh	r3, [r4, #28]
    590c:	b29b      	uxth	r3, r3
    590e:	2b00      	cmp	r3, #0
    5910:	d102      	bne.n	5918 <_i2c_master_read+0x38>
		if (module->send_stop) {
    5912:	7aa3      	ldrb	r3, [r4, #10]
    5914:	2b00      	cmp	r3, #0
    5916:	d11c      	bne.n	5952 <_i2c_master_read+0x72>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
		}
	}
	
	/* Read byte from slave and put in buffer */
	_i2c_master_wait_for_sync(module);
    5918:	0020      	movs	r0, r4
    591a:	4b12      	ldr	r3, [pc, #72]	; (5964 <_i2c_master_read+0x84>)
    591c:	4798      	blx	r3
	module->buffer[buffer_index] = i2c_module->DATA.reg;
    591e:	6a23      	ldr	r3, [r4, #32]
    5920:	195d      	adds	r5, r3, r5
    5922:	2328      	movs	r3, #40	; 0x28
    5924:	5cf3      	ldrb	r3, [r6, r3]
    5926:	b2db      	uxtb	r3, r3
    5928:	702b      	strb	r3, [r5, #0]
}
    592a:	bd70      	pop	{r4, r5, r6, pc}
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    592c:	6872      	ldr	r2, [r6, #4]
    592e:	2380      	movs	r3, #128	; 0x80
    5930:	02db      	lsls	r3, r3, #11
    5932:	4313      	orrs	r3, r2
    5934:	6073      	str	r3, [r6, #4]
    5936:	e7e8      	b.n	590a <_i2c_master_read+0x2a>
		if (module->send_nack && module->buffer_remaining == 0) {
    5938:	7ac3      	ldrb	r3, [r0, #11]
    593a:	2b00      	cmp	r3, #0
    593c:	d0e5      	beq.n	590a <_i2c_master_read+0x2a>
    593e:	8b83      	ldrh	r3, [r0, #28]
    5940:	b29b      	uxth	r3, r3
    5942:	2b00      	cmp	r3, #0
    5944:	d1e1      	bne.n	590a <_i2c_master_read+0x2a>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    5946:	6872      	ldr	r2, [r6, #4]
    5948:	2380      	movs	r3, #128	; 0x80
    594a:	02db      	lsls	r3, r3, #11
    594c:	4313      	orrs	r3, r2
    594e:	6073      	str	r3, [r6, #4]
    5950:	e7db      	b.n	590a <_i2c_master_read+0x2a>
			_i2c_master_wait_for_sync(module);
    5952:	0020      	movs	r0, r4
    5954:	4b03      	ldr	r3, [pc, #12]	; (5964 <_i2c_master_read+0x84>)
    5956:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    5958:	6872      	ldr	r2, [r6, #4]
    595a:	23c0      	movs	r3, #192	; 0xc0
    595c:	029b      	lsls	r3, r3, #10
    595e:	4313      	orrs	r3, r2
    5960:	6073      	str	r3, [r6, #4]
    5962:	e7d9      	b.n	5918 <_i2c_master_read+0x38>
    5964:	000058d5 	.word	0x000058d5

00005968 <_i2c_master_write>:
 * Write next data. Used by interrupt handler to send next data byte to slave.
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_write(struct i2c_master_module *const module)
{
    5968:	b570      	push	{r4, r5, r6, lr}
    596a:	0004      	movs	r4, r0
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    596c:	6805      	ldr	r5, [r0, #0]

	/* Check for ack from slave */
	if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK)
    596e:	8b6b      	ldrh	r3, [r5, #26]
    5970:	075b      	lsls	r3, r3, #29
    5972:	d503      	bpl.n	597c <_i2c_master_write+0x14>
	{
		/* Set status */
		module->status = STATUS_ERR_OVERFLOW;
    5974:	221e      	movs	r2, #30
    5976:	2325      	movs	r3, #37	; 0x25
    5978:	54c2      	strb	r2, [r0, r3]
	module->buffer_remaining--;

	/* Write byte from buffer to slave */
	_i2c_master_wait_for_sync(module);
	i2c_module->DATA.reg = module->buffer[buffer_index];
}
    597a:	bd70      	pop	{r4, r5, r6, pc}
	uint16_t buffer_index = module->buffer_length;
    597c:	8b46      	ldrh	r6, [r0, #26]
	buffer_index -= module->buffer_remaining;
    597e:	8b83      	ldrh	r3, [r0, #28]
    5980:	1af6      	subs	r6, r6, r3
    5982:	b2b6      	uxth	r6, r6
	module->buffer_remaining--;
    5984:	8b83      	ldrh	r3, [r0, #28]
    5986:	3b01      	subs	r3, #1
    5988:	b29b      	uxth	r3, r3
    598a:	8383      	strh	r3, [r0, #28]
	_i2c_master_wait_for_sync(module);
    598c:	4b04      	ldr	r3, [pc, #16]	; (59a0 <_i2c_master_write+0x38>)
    598e:	4798      	blx	r3
	i2c_module->DATA.reg = module->buffer[buffer_index];
    5990:	6a23      	ldr	r3, [r4, #32]
    5992:	199e      	adds	r6, r3, r6
    5994:	7833      	ldrb	r3, [r6, #0]
    5996:	b2db      	uxtb	r3, r3
    5998:	2228      	movs	r2, #40	; 0x28
    599a:	54ab      	strb	r3, [r5, r2]
    599c:	e7ed      	b.n	597a <_i2c_master_write+0x12>
    599e:	46c0      	nop			; (mov r8, r8)
    59a0:	000058d5 	.word	0x000058d5

000059a4 <_i2c_master_interrupt_handler>:
 *
 * \param[in] instance  SERCOM instance that triggered the interrupt
 */
void _i2c_master_interrupt_handler(
		uint8_t instance)
{
    59a4:	b570      	push	{r4, r5, r6, lr}
	/* Get software module for callback handling */
	struct i2c_master_module *module =
    59a6:	0080      	lsls	r0, r0, #2
    59a8:	4b75      	ldr	r3, [pc, #468]	; (5b80 <_i2c_master_interrupt_handler+0x1dc>)
    59aa:	58c4      	ldr	r4, [r0, r3]
			(struct i2c_master_module*)_sercom_instances[instance];

	Assert(module);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    59ac:	6825      	ldr	r5, [r4, #0]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
    59ae:	682b      	ldr	r3, [r5, #0]
    59b0:	011b      	lsls	r3, r3, #4
    59b2:	0fda      	lsrs	r2, r3, #31

	/* Combine callback registered and enabled masks */
	uint8_t callback_mask = module->enabled_callback;
    59b4:	7e63      	ldrb	r3, [r4, #25]
	callback_mask &= module->registered_callback;
    59b6:	7e26      	ldrb	r6, [r4, #24]
    59b8:	401e      	ands	r6, r3

	/* Check if the module should respond to address ack */
	if ((module->buffer_length <= 0) && (module->buffer_remaining > 0)) {
    59ba:	8b63      	ldrh	r3, [r4, #26]
    59bc:	b29b      	uxth	r3, r3
    59be:	2b00      	cmp	r3, #0
    59c0:	d103      	bne.n	59ca <_i2c_master_interrupt_handler+0x26>
    59c2:	8ba3      	ldrh	r3, [r4, #28]
    59c4:	b29b      	uxth	r3, r3
    59c6:	2b00      	cmp	r3, #0
    59c8:	d123      	bne.n	5a12 <_i2c_master_interrupt_handler+0x6e>
		/* Call function for address response */
		_i2c_master_async_address_response(module);

	/* Check if buffer write is done */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
    59ca:	8b63      	ldrh	r3, [r4, #26]
    59cc:	b29b      	uxth	r3, r3
    59ce:	2b00      	cmp	r3, #0
    59d0:	d008      	beq.n	59e4 <_i2c_master_interrupt_handler+0x40>
    59d2:	8ba3      	ldrh	r3, [r4, #28]
    59d4:	b29b      	uxth	r3, r3
    59d6:	2b00      	cmp	r3, #0
    59d8:	d104      	bne.n	59e4 <_i2c_master_interrupt_handler+0x40>
			(module->status == STATUS_BUSY) &&
    59da:	3325      	adds	r3, #37	; 0x25
    59dc:	5ce3      	ldrb	r3, [r4, r3]
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
    59de:	2b05      	cmp	r3, #5
    59e0:	d100      	bne.n	59e4 <_i2c_master_interrupt_handler+0x40>
    59e2:	e06d      	b.n	5ac0 <_i2c_master_interrupt_handler+0x11c>
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE)) {
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
		}

	/* Continue buffer write/read */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining > 0)){
    59e4:	8b63      	ldrh	r3, [r4, #26]
    59e6:	b29b      	uxth	r3, r3
    59e8:	2b00      	cmp	r3, #0
    59ea:	d024      	beq.n	5a36 <_i2c_master_interrupt_handler+0x92>
    59ec:	8ba3      	ldrh	r3, [r4, #28]
    59ee:	b29b      	uxth	r3, r3
    59f0:	2b00      	cmp	r3, #0
    59f2:	d020      	beq.n	5a36 <_i2c_master_interrupt_handler+0x92>
		/* Check that bus ownership is not lost */
		if ((!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) &&
    59f4:	8b6b      	ldrh	r3, [r5, #26]
    59f6:	069b      	lsls	r3, r3, #26
    59f8:	d500      	bpl.n	59fc <_i2c_master_interrupt_handler+0x58>
    59fa:	e081      	b.n	5b00 <_i2c_master_interrupt_handler+0x15c>
    59fc:	2a00      	cmp	r2, #0
    59fe:	d004      	beq.n	5a0a <_i2c_master_interrupt_handler+0x66>
				(!(sclsm_flag && (module->buffer_remaining == 1))))	{
    5a00:	8ba3      	ldrh	r3, [r4, #28]
    5a02:	b29b      	uxth	r3, r3
    5a04:	2b01      	cmp	r3, #1
    5a06:	d100      	bne.n	5a0a <_i2c_master_interrupt_handler+0x66>
    5a08:	e07a      	b.n	5b00 <_i2c_master_interrupt_handler+0x15c>
			module->status = STATUS_ERR_PACKET_COLLISION;
    5a0a:	2241      	movs	r2, #65	; 0x41
    5a0c:	2325      	movs	r3, #37	; 0x25
    5a0e:	54e2      	strb	r2, [r4, r3]
    5a10:	e011      	b.n	5a36 <_i2c_master_interrupt_handler+0x92>
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB)
    5a12:	7e2b      	ldrb	r3, [r5, #24]
    5a14:	07db      	lsls	r3, r3, #31
    5a16:	d507      	bpl.n	5a28 <_i2c_master_interrupt_handler+0x84>
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
    5a18:	2301      	movs	r3, #1
    5a1a:	762b      	strb	r3, [r5, #24]
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
    5a1c:	8b6b      	ldrh	r3, [r5, #26]
    5a1e:	079b      	lsls	r3, r3, #30
    5a20:	d52e      	bpl.n	5a80 <_i2c_master_interrupt_handler+0xdc>
			module->status = STATUS_ERR_PACKET_COLLISION;
    5a22:	2241      	movs	r2, #65	; 0x41
    5a24:	2325      	movs	r3, #37	; 0x25
    5a26:	54e2      	strb	r2, [r4, r3]
	module->buffer_length = module->buffer_remaining;
    5a28:	8ba3      	ldrh	r3, [r4, #28]
    5a2a:	b29b      	uxth	r3, r3
    5a2c:	8363      	strh	r3, [r4, #26]
	if (module->status == STATUS_BUSY) {
    5a2e:	2325      	movs	r3, #37	; 0x25
    5a30:	5ce3      	ldrb	r3, [r4, r3]
    5a32:	2b05      	cmp	r3, #5
    5a34:	d038      	beq.n	5aa8 <_i2c_master_interrupt_handler+0x104>
			_i2c_master_read(module);
		}
	}

	/* Check if read buffer transfer is complete */
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
    5a36:	8b63      	ldrh	r3, [r4, #26]
    5a38:	b29b      	uxth	r3, r3
    5a3a:	2b00      	cmp	r3, #0
    5a3c:	d007      	beq.n	5a4e <_i2c_master_interrupt_handler+0xaa>
    5a3e:	8ba3      	ldrh	r3, [r4, #28]
    5a40:	b29b      	uxth	r3, r3
    5a42:	2b00      	cmp	r3, #0
    5a44:	d103      	bne.n	5a4e <_i2c_master_interrupt_handler+0xaa>
			(module->status == STATUS_BUSY) &&
    5a46:	3325      	adds	r3, #37	; 0x25
    5a48:	5ce3      	ldrb	r3, [r4, r3]
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
    5a4a:	2b05      	cmp	r3, #5
    5a4c:	d064      	beq.n	5b18 <_i2c_master_interrupt_handler+0x174>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
		}
	}

	/* Check for error */
	if ((module->status != STATUS_BUSY) && (module->status != STATUS_OK)) {
    5a4e:	2325      	movs	r3, #37	; 0x25
    5a50:	5ce3      	ldrb	r3, [r4, r3]
    5a52:	2b05      	cmp	r3, #5
    5a54:	d013      	beq.n	5a7e <_i2c_master_interrupt_handler+0xda>
    5a56:	2325      	movs	r3, #37	; 0x25
    5a58:	5ce3      	ldrb	r3, [r4, r3]
    5a5a:	2b00      	cmp	r3, #0
    5a5c:	d00f      	beq.n	5a7e <_i2c_master_interrupt_handler+0xda>
		/* Stop packet operation */
		i2c_module->INTENCLR.reg = SERCOM_I2CM_INTENCLR_MB |
    5a5e:	2303      	movs	r3, #3
    5a60:	752b      	strb	r3, [r5, #20]
				SERCOM_I2CM_INTENCLR_SB;

		module->buffer_length = 0;
    5a62:	2300      	movs	r3, #0
    5a64:	8363      	strh	r3, [r4, #26]
		module->buffer_remaining = 0;
    5a66:	83a3      	strh	r3, [r4, #28]

		/* Send nack and stop command unless arbitration is lost */
		if ((module->status != STATUS_ERR_PACKET_COLLISION) &&
    5a68:	3325      	adds	r3, #37	; 0x25
    5a6a:	5ce3      	ldrb	r3, [r4, r3]
    5a6c:	2b41      	cmp	r3, #65	; 0x41
    5a6e:	d003      	beq.n	5a78 <_i2c_master_interrupt_handler+0xd4>
    5a70:	7aa3      	ldrb	r3, [r4, #10]
    5a72:	2b00      	cmp	r3, #0
    5a74:	d000      	beq.n	5a78 <_i2c_master_interrupt_handler+0xd4>
    5a76:	e075      	b.n	5b64 <_i2c_master_interrupt_handler+0x1c0>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT |
					SERCOM_I2CM_CTRLB_CMD(3);
		}

		/* Call error callback if enabled and registered */
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_ERROR)) {
    5a78:	0773      	lsls	r3, r6, #29
    5a7a:	d500      	bpl.n	5a7e <_i2c_master_interrupt_handler+0xda>
    5a7c:	e07b      	b.n	5b76 <_i2c_master_interrupt_handler+0x1d2>
			module->callbacks[I2C_MASTER_CALLBACK_ERROR](module);
		}
	}
}
    5a7e:	bd70      	pop	{r4, r5, r6, pc}
		else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
    5a80:	8b6b      	ldrh	r3, [r5, #26]
    5a82:	075b      	lsls	r3, r3, #29
    5a84:	d5d0      	bpl.n	5a28 <_i2c_master_interrupt_handler+0x84>
			module->status           = STATUS_ERR_BAD_ADDRESS;
    5a86:	2218      	movs	r2, #24
    5a88:	2325      	movs	r3, #37	; 0x25
    5a8a:	54e2      	strb	r2, [r4, r3]
			module->buffer_remaining = 0;
    5a8c:	2300      	movs	r3, #0
    5a8e:	83a3      	strh	r3, [r4, #28]
			if (module->send_stop) {
    5a90:	7aa3      	ldrb	r3, [r4, #10]
    5a92:	2b00      	cmp	r3, #0
    5a94:	d0c8      	beq.n	5a28 <_i2c_master_interrupt_handler+0x84>
				_i2c_master_wait_for_sync(module);
    5a96:	0020      	movs	r0, r4
    5a98:	4b3a      	ldr	r3, [pc, #232]	; (5b84 <_i2c_master_interrupt_handler+0x1e0>)
    5a9a:	4798      	blx	r3
				i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    5a9c:	686a      	ldr	r2, [r5, #4]
    5a9e:	23c0      	movs	r3, #192	; 0xc0
    5aa0:	029b      	lsls	r3, r3, #10
    5aa2:	4313      	orrs	r3, r2
    5aa4:	606b      	str	r3, [r5, #4]
    5aa6:	e7bf      	b.n	5a28 <_i2c_master_interrupt_handler+0x84>
		if (module->transfer_direction == I2C_TRANSFER_WRITE) {
    5aa8:	331f      	adds	r3, #31
    5aaa:	5ce3      	ldrb	r3, [r4, r3]
    5aac:	2b00      	cmp	r3, #0
    5aae:	d003      	beq.n	5ab8 <_i2c_master_interrupt_handler+0x114>
			_i2c_master_read(module);
    5ab0:	0020      	movs	r0, r4
    5ab2:	4b35      	ldr	r3, [pc, #212]	; (5b88 <_i2c_master_interrupt_handler+0x1e4>)
    5ab4:	4798      	blx	r3
    5ab6:	e7be      	b.n	5a36 <_i2c_master_interrupt_handler+0x92>
			_i2c_master_write(module);
    5ab8:	0020      	movs	r0, r4
    5aba:	4b34      	ldr	r3, [pc, #208]	; (5b8c <_i2c_master_interrupt_handler+0x1e8>)
    5abc:	4798      	blx	r3
    5abe:	e7ba      	b.n	5a36 <_i2c_master_interrupt_handler+0x92>
			(module->transfer_direction == I2C_TRANSFER_WRITE)) {
    5ac0:	331f      	adds	r3, #31
    5ac2:	5ce3      	ldrb	r3, [r4, r3]
			(module->status == STATUS_BUSY) &&
    5ac4:	2b00      	cmp	r3, #0
    5ac6:	d000      	beq.n	5aca <_i2c_master_interrupt_handler+0x126>
    5ac8:	e78c      	b.n	59e4 <_i2c_master_interrupt_handler+0x40>
		i2c_module->INTENCLR.reg =
    5aca:	3303      	adds	r3, #3
    5acc:	752b      	strb	r3, [r5, #20]
		module->buffer_length = 0;
    5ace:	2300      	movs	r3, #0
    5ad0:	8363      	strh	r3, [r4, #26]
		module->status        = STATUS_OK;
    5ad2:	3325      	adds	r3, #37	; 0x25
    5ad4:	2200      	movs	r2, #0
    5ad6:	54e2      	strb	r2, [r4, r3]
		if (module->send_stop) {
    5ad8:	7aa3      	ldrb	r3, [r4, #10]
    5ada:	2b00      	cmp	r3, #0
    5adc:	d107      	bne.n	5aee <_i2c_master_interrupt_handler+0x14a>
			i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
    5ade:	2301      	movs	r3, #1
    5ae0:	762b      	strb	r3, [r5, #24]
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE)) {
    5ae2:	07f3      	lsls	r3, r6, #31
    5ae4:	d5a7      	bpl.n	5a36 <_i2c_master_interrupt_handler+0x92>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
    5ae6:	68e3      	ldr	r3, [r4, #12]
    5ae8:	0020      	movs	r0, r4
    5aea:	4798      	blx	r3
    5aec:	e7a3      	b.n	5a36 <_i2c_master_interrupt_handler+0x92>
			_i2c_master_wait_for_sync(module);
    5aee:	0020      	movs	r0, r4
    5af0:	4b24      	ldr	r3, [pc, #144]	; (5b84 <_i2c_master_interrupt_handler+0x1e0>)
    5af2:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    5af4:	686a      	ldr	r2, [r5, #4]
    5af6:	23c0      	movs	r3, #192	; 0xc0
    5af8:	029b      	lsls	r3, r3, #10
    5afa:	4313      	orrs	r3, r2
    5afc:	606b      	str	r3, [r5, #4]
    5afe:	e7f0      	b.n	5ae2 <_i2c_master_interrupt_handler+0x13e>
		} else if (module->transfer_direction == I2C_TRANSFER_WRITE) {
    5b00:	2324      	movs	r3, #36	; 0x24
    5b02:	5ce3      	ldrb	r3, [r4, r3]
    5b04:	2b00      	cmp	r3, #0
    5b06:	d103      	bne.n	5b10 <_i2c_master_interrupt_handler+0x16c>
			_i2c_master_write(module);
    5b08:	0020      	movs	r0, r4
    5b0a:	4b20      	ldr	r3, [pc, #128]	; (5b8c <_i2c_master_interrupt_handler+0x1e8>)
    5b0c:	4798      	blx	r3
    5b0e:	e792      	b.n	5a36 <_i2c_master_interrupt_handler+0x92>
			_i2c_master_read(module);
    5b10:	0020      	movs	r0, r4
    5b12:	4b1d      	ldr	r3, [pc, #116]	; (5b88 <_i2c_master_interrupt_handler+0x1e4>)
    5b14:	4798      	blx	r3
    5b16:	e78e      	b.n	5a36 <_i2c_master_interrupt_handler+0x92>
			(module->transfer_direction == I2C_TRANSFER_READ)) {
    5b18:	331f      	adds	r3, #31
    5b1a:	5ce3      	ldrb	r3, [r4, r3]
			(module->status == STATUS_BUSY) &&
    5b1c:	2b01      	cmp	r3, #1
    5b1e:	d196      	bne.n	5a4e <_i2c_master_interrupt_handler+0xaa>
		if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
    5b20:	7e2b      	ldrb	r3, [r5, #24]
    5b22:	079b      	lsls	r3, r3, #30
    5b24:	d501      	bpl.n	5b2a <_i2c_master_interrupt_handler+0x186>
			i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    5b26:	2302      	movs	r3, #2
    5b28:	762b      	strb	r3, [r5, #24]
		i2c_module->INTENCLR.reg =
    5b2a:	2303      	movs	r3, #3
    5b2c:	752b      	strb	r3, [r5, #20]
		module->buffer_length = 0;
    5b2e:	2300      	movs	r3, #0
    5b30:	8363      	strh	r3, [r4, #26]
		module->status        = STATUS_OK;
    5b32:	3325      	adds	r3, #37	; 0x25
    5b34:	2200      	movs	r2, #0
    5b36:	54e2      	strb	r2, [r4, r3]
		if ((callback_mask & (1 << I2C_MASTER_CALLBACK_READ_COMPLETE))
    5b38:	07b3      	lsls	r3, r6, #30
    5b3a:	d503      	bpl.n	5b44 <_i2c_master_interrupt_handler+0x1a0>
				&& (module->transfer_direction == I2C_TRANSFER_READ)) {
    5b3c:	2324      	movs	r3, #36	; 0x24
    5b3e:	5ce3      	ldrb	r3, [r4, r3]
    5b40:	2b01      	cmp	r3, #1
    5b42:	d00b      	beq.n	5b5c <_i2c_master_interrupt_handler+0x1b8>
		} else if ((callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE))
    5b44:	07f3      	lsls	r3, r6, #31
    5b46:	d400      	bmi.n	5b4a <_i2c_master_interrupt_handler+0x1a6>
    5b48:	e781      	b.n	5a4e <_i2c_master_interrupt_handler+0xaa>
				&& (module->transfer_direction == I2C_TRANSFER_WRITE)) {
    5b4a:	2324      	movs	r3, #36	; 0x24
    5b4c:	5ce3      	ldrb	r3, [r4, r3]
    5b4e:	2b00      	cmp	r3, #0
    5b50:	d000      	beq.n	5b54 <_i2c_master_interrupt_handler+0x1b0>
    5b52:	e77c      	b.n	5a4e <_i2c_master_interrupt_handler+0xaa>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
    5b54:	68e3      	ldr	r3, [r4, #12]
    5b56:	0020      	movs	r0, r4
    5b58:	4798      	blx	r3
    5b5a:	e778      	b.n	5a4e <_i2c_master_interrupt_handler+0xaa>
			module->callbacks[I2C_MASTER_CALLBACK_READ_COMPLETE](module);
    5b5c:	6923      	ldr	r3, [r4, #16]
    5b5e:	0020      	movs	r0, r4
    5b60:	4798      	blx	r3
    5b62:	e774      	b.n	5a4e <_i2c_master_interrupt_handler+0xaa>
			_i2c_master_wait_for_sync(module);
    5b64:	0020      	movs	r0, r4
    5b66:	4b07      	ldr	r3, [pc, #28]	; (5b84 <_i2c_master_interrupt_handler+0x1e0>)
    5b68:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT |
    5b6a:	686a      	ldr	r2, [r5, #4]
    5b6c:	23e0      	movs	r3, #224	; 0xe0
    5b6e:	02db      	lsls	r3, r3, #11
    5b70:	4313      	orrs	r3, r2
    5b72:	606b      	str	r3, [r5, #4]
    5b74:	e780      	b.n	5a78 <_i2c_master_interrupt_handler+0xd4>
			module->callbacks[I2C_MASTER_CALLBACK_ERROR](module);
    5b76:	6963      	ldr	r3, [r4, #20]
    5b78:	0020      	movs	r0, r4
    5b7a:	4798      	blx	r3
}
    5b7c:	e77f      	b.n	5a7e <_i2c_master_interrupt_handler+0xda>
    5b7e:	46c0      	nop			; (mov r8, r8)
    5b80:	20002238 	.word	0x20002238
    5b84:	000058d5 	.word	0x000058d5
    5b88:	000058e1 	.word	0x000058e1
    5b8c:	00005969 	.word	0x00005969

00005b90 <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
    5b90:	b5f0      	push	{r4, r5, r6, r7, lr}
    5b92:	46de      	mov	lr, fp
    5b94:	4657      	mov	r7, sl
    5b96:	464e      	mov	r6, r9
    5b98:	4645      	mov	r5, r8
    5b9a:	b5e0      	push	{r5, r6, r7, lr}
    5b9c:	b087      	sub	sp, #28
    5b9e:	4680      	mov	r8, r0
    5ba0:	9104      	str	r1, [sp, #16]
    5ba2:	0016      	movs	r6, r2
    5ba4:	001f      	movs	r7, r3
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
    5ba6:	2200      	movs	r2, #0
    5ba8:	2300      	movs	r3, #0
    5baa:	2100      	movs	r1, #0
    5bac:	468b      	mov	fp, r1
	for (i = 63; i >= 0; i--) {
    5bae:	243f      	movs	r4, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
    5bb0:	2001      	movs	r0, #1
    5bb2:	0021      	movs	r1, r4
    5bb4:	9600      	str	r6, [sp, #0]
    5bb6:	9701      	str	r7, [sp, #4]
    5bb8:	465c      	mov	r4, fp
    5bba:	9403      	str	r4, [sp, #12]
    5bbc:	4644      	mov	r4, r8
    5bbe:	9405      	str	r4, [sp, #20]
    5bc0:	e013      	b.n	5bea <long_division+0x5a>
    5bc2:	2420      	movs	r4, #32
    5bc4:	1a64      	subs	r4, r4, r1
    5bc6:	0005      	movs	r5, r0
    5bc8:	40e5      	lsrs	r5, r4
    5bca:	46a8      	mov	r8, r5
    5bcc:	e014      	b.n	5bf8 <long_division+0x68>
		if (n & bit_shift) {
			r |= 0x01;
		}

		if (r >= d) {
			r = r - d;
    5bce:	9c00      	ldr	r4, [sp, #0]
    5bd0:	9d01      	ldr	r5, [sp, #4]
    5bd2:	1b12      	subs	r2, r2, r4
    5bd4:	41ab      	sbcs	r3, r5
			q |= bit_shift;
    5bd6:	465c      	mov	r4, fp
    5bd8:	464d      	mov	r5, r9
    5bda:	432c      	orrs	r4, r5
    5bdc:	46a3      	mov	fp, r4
    5bde:	9c03      	ldr	r4, [sp, #12]
    5be0:	4645      	mov	r5, r8
    5be2:	432c      	orrs	r4, r5
    5be4:	9403      	str	r4, [sp, #12]
	for (i = 63; i >= 0; i--) {
    5be6:	3901      	subs	r1, #1
    5be8:	d325      	bcc.n	5c36 <long_division+0xa6>
		bit_shift = (uint64_t)1 << i;
    5bea:	2420      	movs	r4, #32
    5bec:	4264      	negs	r4, r4
    5bee:	190c      	adds	r4, r1, r4
    5bf0:	d4e7      	bmi.n	5bc2 <long_division+0x32>
    5bf2:	0005      	movs	r5, r0
    5bf4:	40a5      	lsls	r5, r4
    5bf6:	46a8      	mov	r8, r5
    5bf8:	0004      	movs	r4, r0
    5bfa:	408c      	lsls	r4, r1
    5bfc:	46a1      	mov	r9, r4
		r = r << 1;
    5bfe:	1892      	adds	r2, r2, r2
    5c00:	415b      	adcs	r3, r3
    5c02:	0014      	movs	r4, r2
    5c04:	001d      	movs	r5, r3
		if (n & bit_shift) {
    5c06:	9e05      	ldr	r6, [sp, #20]
    5c08:	464f      	mov	r7, r9
    5c0a:	403e      	ands	r6, r7
    5c0c:	46b4      	mov	ip, r6
    5c0e:	9e04      	ldr	r6, [sp, #16]
    5c10:	4647      	mov	r7, r8
    5c12:	403e      	ands	r6, r7
    5c14:	46b2      	mov	sl, r6
    5c16:	4666      	mov	r6, ip
    5c18:	4657      	mov	r7, sl
    5c1a:	433e      	orrs	r6, r7
    5c1c:	d003      	beq.n	5c26 <long_division+0x96>
			r |= 0x01;
    5c1e:	0006      	movs	r6, r0
    5c20:	4326      	orrs	r6, r4
    5c22:	0032      	movs	r2, r6
    5c24:	002b      	movs	r3, r5
		if (r >= d) {
    5c26:	9c00      	ldr	r4, [sp, #0]
    5c28:	9d01      	ldr	r5, [sp, #4]
    5c2a:	429d      	cmp	r5, r3
    5c2c:	d8db      	bhi.n	5be6 <long_division+0x56>
    5c2e:	d1ce      	bne.n	5bce <long_division+0x3e>
    5c30:	4294      	cmp	r4, r2
    5c32:	d8d8      	bhi.n	5be6 <long_division+0x56>
    5c34:	e7cb      	b.n	5bce <long_division+0x3e>
    5c36:	9b03      	ldr	r3, [sp, #12]
		}
	}

	return q;
}
    5c38:	4658      	mov	r0, fp
    5c3a:	0019      	movs	r1, r3
    5c3c:	b007      	add	sp, #28
    5c3e:	bc3c      	pop	{r2, r3, r4, r5}
    5c40:	4690      	mov	r8, r2
    5c42:	4699      	mov	r9, r3
    5c44:	46a2      	mov	sl, r4
    5c46:	46ab      	mov	fp, r5
    5c48:	bdf0      	pop	{r4, r5, r6, r7, pc}

00005c4a <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
    5c4a:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
    5c4c:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    5c4e:	2340      	movs	r3, #64	; 0x40
    5c50:	2400      	movs	r4, #0
	if (baudrate > (external_clock / 2)) {
    5c52:	4281      	cmp	r1, r0
    5c54:	d202      	bcs.n	5c5c <_sercom_get_sync_baud_val+0x12>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
		return STATUS_OK;
	}
}
    5c56:	0018      	movs	r0, r3
    5c58:	bd10      	pop	{r4, pc}
		baud_calculated++;
    5c5a:	001c      	movs	r4, r3
		clock_value = clock_value - baudrate;
    5c5c:	1a09      	subs	r1, r1, r0
		baud_calculated++;
    5c5e:	1c63      	adds	r3, r4, #1
    5c60:	b29b      	uxth	r3, r3
	while (clock_value >= baudrate) {
    5c62:	4288      	cmp	r0, r1
    5c64:	d9f9      	bls.n	5c5a <_sercom_get_sync_baud_val+0x10>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    5c66:	2340      	movs	r3, #64	; 0x40
	if (baud_calculated > 0xFF) {
    5c68:	2cff      	cmp	r4, #255	; 0xff
    5c6a:	d8f4      	bhi.n	5c56 <_sercom_get_sync_baud_val+0xc>
		*baudvalue = baud_calculated;
    5c6c:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
    5c6e:	2300      	movs	r3, #0
    5c70:	e7f1      	b.n	5c56 <_sercom_get_sync_baud_val+0xc>
	...

00005c74 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
    5c74:	b5f0      	push	{r4, r5, r6, r7, lr}
    5c76:	b083      	sub	sp, #12
    5c78:	000f      	movs	r7, r1
    5c7a:	0016      	movs	r6, r2
    5c7c:	aa08      	add	r2, sp, #32
    5c7e:	7811      	ldrb	r1, [r2, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
    5c80:	0004      	movs	r4, r0
    5c82:	434c      	muls	r4, r1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    5c84:	2240      	movs	r2, #64	; 0x40
	if ((baudrate * sample_num) > peripheral_clock) {
    5c86:	42bc      	cmp	r4, r7
    5c88:	d902      	bls.n	5c90 <_sercom_get_async_baud_val+0x1c>
		baud_calculated = baud_int | (baud_fp << 13);
	}

	*baudval = baud_calculated;
	return STATUS_OK;
}
    5c8a:	0010      	movs	r0, r2
    5c8c:	b003      	add	sp, #12
    5c8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
    5c90:	2b00      	cmp	r3, #0
    5c92:	d114      	bne.n	5cbe <_sercom_get_async_baud_val+0x4a>
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
    5c94:	0002      	movs	r2, r0
    5c96:	0008      	movs	r0, r1
    5c98:	2100      	movs	r1, #0
    5c9a:	4c19      	ldr	r4, [pc, #100]	; (5d00 <_sercom_get_async_baud_val+0x8c>)
    5c9c:	47a0      	blx	r4
    5c9e:	0001      	movs	r1, r0
		ratio = long_division(temp1, peripheral_clock);
    5ca0:	003a      	movs	r2, r7
    5ca2:	2300      	movs	r3, #0
    5ca4:	2000      	movs	r0, #0
    5ca6:	4c17      	ldr	r4, [pc, #92]	; (5d04 <_sercom_get_async_baud_val+0x90>)
    5ca8:	47a0      	blx	r4
		scale = ((uint64_t)1 << SHIFT) - ratio;
    5caa:	2200      	movs	r2, #0
    5cac:	2301      	movs	r3, #1
    5cae:	1a12      	subs	r2, r2, r0
    5cb0:	418b      	sbcs	r3, r1
		baud_calculated = (65536 * scale) >> SHIFT;
    5cb2:	0c12      	lsrs	r2, r2, #16
    5cb4:	041b      	lsls	r3, r3, #16
    5cb6:	431a      	orrs	r2, r3
	*baudval = baud_calculated;
    5cb8:	8032      	strh	r2, [r6, #0]
	return STATUS_OK;
    5cba:	2200      	movs	r2, #0
    5cbc:	e7e5      	b.n	5c8a <_sercom_get_async_baud_val+0x16>
	uint64_t baud_calculated = 0;
    5cbe:	2200      	movs	r2, #0
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
    5cc0:	2b01      	cmp	r3, #1
    5cc2:	d1f9      	bne.n	5cb8 <_sercom_get_async_baud_val+0x44>
		temp1 = ((uint64_t)baudrate * sample_num);
    5cc4:	000a      	movs	r2, r1
    5cc6:	2300      	movs	r3, #0
    5cc8:	2100      	movs	r1, #0
    5cca:	4c0d      	ldr	r4, [pc, #52]	; (5d00 <_sercom_get_async_baud_val+0x8c>)
    5ccc:	47a0      	blx	r4
    5cce:	0002      	movs	r2, r0
    5cd0:	000b      	movs	r3, r1
    5cd2:	9200      	str	r2, [sp, #0]
    5cd4:	9301      	str	r3, [sp, #4]
		baud_int = long_division( peripheral_clock, temp1);
    5cd6:	0038      	movs	r0, r7
    5cd8:	2100      	movs	r1, #0
    5cda:	4c0a      	ldr	r4, [pc, #40]	; (5d04 <_sercom_get_async_baud_val+0x90>)
    5cdc:	47a0      	blx	r4
    5cde:	0005      	movs	r5, r0
		if(baud_int > BAUD_INT_MAX) {
    5ce0:	2380      	movs	r3, #128	; 0x80
    5ce2:	019b      	lsls	r3, r3, #6
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    5ce4:	2240      	movs	r2, #64	; 0x40
		if(baud_int > BAUD_INT_MAX) {
    5ce6:	4298      	cmp	r0, r3
    5ce8:	d8cf      	bhi.n	5c8a <_sercom_get_async_baud_val+0x16>
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
    5cea:	0f79      	lsrs	r1, r7, #29
    5cec:	00f8      	lsls	r0, r7, #3
    5cee:	9a00      	ldr	r2, [sp, #0]
    5cf0:	9b01      	ldr	r3, [sp, #4]
    5cf2:	47a0      	blx	r4
		baud_fp = temp1 - 8 * baud_int;
    5cf4:	00ea      	lsls	r2, r5, #3
    5cf6:	1a82      	subs	r2, r0, r2
		baud_calculated = baud_int | (baud_fp << 13);
    5cf8:	b2d2      	uxtb	r2, r2
    5cfa:	0352      	lsls	r2, r2, #13
    5cfc:	432a      	orrs	r2, r5
    5cfe:	e7db      	b.n	5cb8 <_sercom_get_async_baud_val+0x44>
    5d00:	000169c9 	.word	0x000169c9
    5d04:	00005b91 	.word	0x00005b91

00005d08 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
    5d08:	b510      	push	{r4, lr}
    5d0a:	b082      	sub	sp, #8
    5d0c:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
    5d0e:	4b0e      	ldr	r3, [pc, #56]	; (5d48 <sercom_set_gclk_generator+0x40>)
    5d10:	781b      	ldrb	r3, [r3, #0]
    5d12:	2b00      	cmp	r3, #0
    5d14:	d007      	beq.n	5d26 <sercom_set_gclk_generator+0x1e>
    5d16:	2900      	cmp	r1, #0
    5d18:	d105      	bne.n	5d26 <sercom_set_gclk_generator+0x1e>
		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
    5d1a:	4b0b      	ldr	r3, [pc, #44]	; (5d48 <sercom_set_gclk_generator+0x40>)
    5d1c:	785b      	ldrb	r3, [r3, #1]
    5d1e:	4283      	cmp	r3, r0
    5d20:	d010      	beq.n	5d44 <sercom_set_gclk_generator+0x3c>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
    5d22:	201d      	movs	r0, #29
    5d24:	e00c      	b.n	5d40 <sercom_set_gclk_generator+0x38>
		gclk_chan_conf.source_generator = generator_source;
    5d26:	a901      	add	r1, sp, #4
    5d28:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
    5d2a:	2011      	movs	r0, #17
    5d2c:	4b07      	ldr	r3, [pc, #28]	; (5d4c <sercom_set_gclk_generator+0x44>)
    5d2e:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
    5d30:	2011      	movs	r0, #17
    5d32:	4b07      	ldr	r3, [pc, #28]	; (5d50 <sercom_set_gclk_generator+0x48>)
    5d34:	4798      	blx	r3
		_sercom_config.generator_source = generator_source;
    5d36:	4b04      	ldr	r3, [pc, #16]	; (5d48 <sercom_set_gclk_generator+0x40>)
    5d38:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
    5d3a:	2201      	movs	r2, #1
    5d3c:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
    5d3e:	2000      	movs	r0, #0
}
    5d40:	b002      	add	sp, #8
    5d42:	bd10      	pop	{r4, pc}
		return STATUS_OK;
    5d44:	2000      	movs	r0, #0
    5d46:	e7fb      	b.n	5d40 <sercom_set_gclk_generator+0x38>
    5d48:	20000b68 	.word	0x20000b68
    5d4c:	000071ad 	.word	0x000071ad
    5d50:	0000713d 	.word	0x0000713d

00005d54 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
    5d54:	4b3c      	ldr	r3, [pc, #240]	; (5e48 <_sercom_get_default_pad+0xf4>)
    5d56:	4298      	cmp	r0, r3
    5d58:	d032      	beq.n	5dc0 <_sercom_get_default_pad+0x6c>
    5d5a:	d90a      	bls.n	5d72 <_sercom_get_default_pad+0x1e>
    5d5c:	4b3b      	ldr	r3, [pc, #236]	; (5e4c <_sercom_get_default_pad+0xf8>)
    5d5e:	4298      	cmp	r0, r3
    5d60:	d04e      	beq.n	5e00 <_sercom_get_default_pad+0xac>
    5d62:	4b3b      	ldr	r3, [pc, #236]	; (5e50 <_sercom_get_default_pad+0xfc>)
    5d64:	4298      	cmp	r0, r3
    5d66:	d055      	beq.n	5e14 <_sercom_get_default_pad+0xc0>
    5d68:	4b3a      	ldr	r3, [pc, #232]	; (5e54 <_sercom_get_default_pad+0x100>)
    5d6a:	4298      	cmp	r0, r3
    5d6c:	d038      	beq.n	5de0 <_sercom_get_default_pad+0x8c>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
    5d6e:	2000      	movs	r0, #0
}
    5d70:	4770      	bx	lr
	switch ((uintptr_t)sercom_module) {
    5d72:	2384      	movs	r3, #132	; 0x84
    5d74:	05db      	lsls	r3, r3, #23
    5d76:	4298      	cmp	r0, r3
    5d78:	d00c      	beq.n	5d94 <_sercom_get_default_pad+0x40>
    5d7a:	4b37      	ldr	r3, [pc, #220]	; (5e58 <_sercom_get_default_pad+0x104>)
    5d7c:	4298      	cmp	r0, r3
    5d7e:	d1f6      	bne.n	5d6e <_sercom_get_default_pad+0x1a>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    5d80:	2901      	cmp	r1, #1
    5d82:	d017      	beq.n	5db4 <_sercom_get_default_pad+0x60>
    5d84:	2900      	cmp	r1, #0
    5d86:	d057      	beq.n	5e38 <_sercom_get_default_pad+0xe4>
    5d88:	2902      	cmp	r1, #2
    5d8a:	d015      	beq.n	5db8 <_sercom_get_default_pad+0x64>
    5d8c:	2903      	cmp	r1, #3
    5d8e:	d015      	beq.n	5dbc <_sercom_get_default_pad+0x68>
	return 0;
    5d90:	2000      	movs	r0, #0
    5d92:	e7ed      	b.n	5d70 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    5d94:	2901      	cmp	r1, #1
    5d96:	d007      	beq.n	5da8 <_sercom_get_default_pad+0x54>
    5d98:	2900      	cmp	r1, #0
    5d9a:	d04b      	beq.n	5e34 <_sercom_get_default_pad+0xe0>
    5d9c:	2902      	cmp	r1, #2
    5d9e:	d005      	beq.n	5dac <_sercom_get_default_pad+0x58>
    5da0:	2903      	cmp	r1, #3
    5da2:	d005      	beq.n	5db0 <_sercom_get_default_pad+0x5c>
	return 0;
    5da4:	2000      	movs	r0, #0
    5da6:	e7e3      	b.n	5d70 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    5da8:	482c      	ldr	r0, [pc, #176]	; (5e5c <_sercom_get_default_pad+0x108>)
    5daa:	e7e1      	b.n	5d70 <_sercom_get_default_pad+0x1c>
    5dac:	482c      	ldr	r0, [pc, #176]	; (5e60 <_sercom_get_default_pad+0x10c>)
    5dae:	e7df      	b.n	5d70 <_sercom_get_default_pad+0x1c>
    5db0:	482c      	ldr	r0, [pc, #176]	; (5e64 <_sercom_get_default_pad+0x110>)
    5db2:	e7dd      	b.n	5d70 <_sercom_get_default_pad+0x1c>
    5db4:	482c      	ldr	r0, [pc, #176]	; (5e68 <_sercom_get_default_pad+0x114>)
    5db6:	e7db      	b.n	5d70 <_sercom_get_default_pad+0x1c>
    5db8:	482c      	ldr	r0, [pc, #176]	; (5e6c <_sercom_get_default_pad+0x118>)
    5dba:	e7d9      	b.n	5d70 <_sercom_get_default_pad+0x1c>
    5dbc:	482c      	ldr	r0, [pc, #176]	; (5e70 <_sercom_get_default_pad+0x11c>)
    5dbe:	e7d7      	b.n	5d70 <_sercom_get_default_pad+0x1c>
    5dc0:	2901      	cmp	r1, #1
    5dc2:	d007      	beq.n	5dd4 <_sercom_get_default_pad+0x80>
    5dc4:	2900      	cmp	r1, #0
    5dc6:	d039      	beq.n	5e3c <_sercom_get_default_pad+0xe8>
    5dc8:	2902      	cmp	r1, #2
    5dca:	d005      	beq.n	5dd8 <_sercom_get_default_pad+0x84>
    5dcc:	2903      	cmp	r1, #3
    5dce:	d005      	beq.n	5ddc <_sercom_get_default_pad+0x88>
	return 0;
    5dd0:	2000      	movs	r0, #0
    5dd2:	e7cd      	b.n	5d70 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    5dd4:	4827      	ldr	r0, [pc, #156]	; (5e74 <_sercom_get_default_pad+0x120>)
    5dd6:	e7cb      	b.n	5d70 <_sercom_get_default_pad+0x1c>
    5dd8:	4827      	ldr	r0, [pc, #156]	; (5e78 <_sercom_get_default_pad+0x124>)
    5dda:	e7c9      	b.n	5d70 <_sercom_get_default_pad+0x1c>
    5ddc:	4827      	ldr	r0, [pc, #156]	; (5e7c <_sercom_get_default_pad+0x128>)
    5dde:	e7c7      	b.n	5d70 <_sercom_get_default_pad+0x1c>
    5de0:	2901      	cmp	r1, #1
    5de2:	d007      	beq.n	5df4 <_sercom_get_default_pad+0xa0>
    5de4:	2900      	cmp	r1, #0
    5de6:	d02b      	beq.n	5e40 <_sercom_get_default_pad+0xec>
    5de8:	2902      	cmp	r1, #2
    5dea:	d005      	beq.n	5df8 <_sercom_get_default_pad+0xa4>
    5dec:	2903      	cmp	r1, #3
    5dee:	d005      	beq.n	5dfc <_sercom_get_default_pad+0xa8>
	return 0;
    5df0:	2000      	movs	r0, #0
    5df2:	e7bd      	b.n	5d70 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    5df4:	4822      	ldr	r0, [pc, #136]	; (5e80 <_sercom_get_default_pad+0x12c>)
    5df6:	e7bb      	b.n	5d70 <_sercom_get_default_pad+0x1c>
    5df8:	4822      	ldr	r0, [pc, #136]	; (5e84 <_sercom_get_default_pad+0x130>)
    5dfa:	e7b9      	b.n	5d70 <_sercom_get_default_pad+0x1c>
    5dfc:	4822      	ldr	r0, [pc, #136]	; (5e88 <_sercom_get_default_pad+0x134>)
    5dfe:	e7b7      	b.n	5d70 <_sercom_get_default_pad+0x1c>
    5e00:	2902      	cmp	r1, #2
    5e02:	d003      	beq.n	5e0c <_sercom_get_default_pad+0xb8>
    5e04:	2903      	cmp	r1, #3
    5e06:	d003      	beq.n	5e10 <_sercom_get_default_pad+0xbc>
    5e08:	2000      	movs	r0, #0
    5e0a:	e7b1      	b.n	5d70 <_sercom_get_default_pad+0x1c>
    5e0c:	481f      	ldr	r0, [pc, #124]	; (5e8c <_sercom_get_default_pad+0x138>)
    5e0e:	e7af      	b.n	5d70 <_sercom_get_default_pad+0x1c>
    5e10:	481f      	ldr	r0, [pc, #124]	; (5e90 <_sercom_get_default_pad+0x13c>)
    5e12:	e7ad      	b.n	5d70 <_sercom_get_default_pad+0x1c>
    5e14:	2901      	cmp	r1, #1
    5e16:	d007      	beq.n	5e28 <_sercom_get_default_pad+0xd4>
    5e18:	2900      	cmp	r1, #0
    5e1a:	d013      	beq.n	5e44 <_sercom_get_default_pad+0xf0>
    5e1c:	2902      	cmp	r1, #2
    5e1e:	d005      	beq.n	5e2c <_sercom_get_default_pad+0xd8>
    5e20:	2903      	cmp	r1, #3
    5e22:	d005      	beq.n	5e30 <_sercom_get_default_pad+0xdc>
	return 0;
    5e24:	2000      	movs	r0, #0
    5e26:	e7a3      	b.n	5d70 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    5e28:	481a      	ldr	r0, [pc, #104]	; (5e94 <_sercom_get_default_pad+0x140>)
    5e2a:	e7a1      	b.n	5d70 <_sercom_get_default_pad+0x1c>
    5e2c:	481a      	ldr	r0, [pc, #104]	; (5e98 <_sercom_get_default_pad+0x144>)
    5e2e:	e79f      	b.n	5d70 <_sercom_get_default_pad+0x1c>
    5e30:	481a      	ldr	r0, [pc, #104]	; (5e9c <_sercom_get_default_pad+0x148>)
    5e32:	e79d      	b.n	5d70 <_sercom_get_default_pad+0x1c>
    5e34:	481a      	ldr	r0, [pc, #104]	; (5ea0 <_sercom_get_default_pad+0x14c>)
    5e36:	e79b      	b.n	5d70 <_sercom_get_default_pad+0x1c>
    5e38:	2003      	movs	r0, #3
    5e3a:	e799      	b.n	5d70 <_sercom_get_default_pad+0x1c>
    5e3c:	4819      	ldr	r0, [pc, #100]	; (5ea4 <_sercom_get_default_pad+0x150>)
    5e3e:	e797      	b.n	5d70 <_sercom_get_default_pad+0x1c>
    5e40:	4819      	ldr	r0, [pc, #100]	; (5ea8 <_sercom_get_default_pad+0x154>)
    5e42:	e795      	b.n	5d70 <_sercom_get_default_pad+0x1c>
    5e44:	4819      	ldr	r0, [pc, #100]	; (5eac <_sercom_get_default_pad+0x158>)
    5e46:	e793      	b.n	5d70 <_sercom_get_default_pad+0x1c>
    5e48:	42000800 	.word	0x42000800
    5e4c:	42001000 	.word	0x42001000
    5e50:	43000400 	.word	0x43000400
    5e54:	42000c00 	.word	0x42000c00
    5e58:	42000400 	.word	0x42000400
    5e5c:	00050003 	.word	0x00050003
    5e60:	00060003 	.word	0x00060003
    5e64:	00070003 	.word	0x00070003
    5e68:	00010003 	.word	0x00010003
    5e6c:	001e0003 	.word	0x001e0003
    5e70:	001f0003 	.word	0x001f0003
    5e74:	00090003 	.word	0x00090003
    5e78:	000a0003 	.word	0x000a0003
    5e7c:	000b0003 	.word	0x000b0003
    5e80:	00110003 	.word	0x00110003
    5e84:	00120003 	.word	0x00120003
    5e88:	00130003 	.word	0x00130003
    5e8c:	000e0003 	.word	0x000e0003
    5e90:	000f0003 	.word	0x000f0003
    5e94:	00170003 	.word	0x00170003
    5e98:	00180003 	.word	0x00180003
    5e9c:	00190003 	.word	0x00190003
    5ea0:	00040003 	.word	0x00040003
    5ea4:	00080003 	.word	0x00080003
    5ea8:	00100003 	.word	0x00100003
    5eac:	00160003 	.word	0x00160003

00005eb0 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
    5eb0:	b530      	push	{r4, r5, lr}
    5eb2:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
    5eb4:	4b0b      	ldr	r3, [pc, #44]	; (5ee4 <_sercom_get_sercom_inst_index+0x34>)
    5eb6:	466a      	mov	r2, sp
    5eb8:	cb32      	ldmia	r3!, {r1, r4, r5}
    5eba:	c232      	stmia	r2!, {r1, r4, r5}
    5ebc:	cb32      	ldmia	r3!, {r1, r4, r5}
    5ebe:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    5ec0:	9b00      	ldr	r3, [sp, #0]
    5ec2:	4283      	cmp	r3, r0
    5ec4:	d00b      	beq.n	5ede <_sercom_get_sercom_inst_index+0x2e>
    5ec6:	2301      	movs	r3, #1
    5ec8:	009a      	lsls	r2, r3, #2
    5eca:	4669      	mov	r1, sp
    5ecc:	5852      	ldr	r2, [r2, r1]
    5ece:	4282      	cmp	r2, r0
    5ed0:	d006      	beq.n	5ee0 <_sercom_get_sercom_inst_index+0x30>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    5ed2:	3301      	adds	r3, #1
    5ed4:	2b06      	cmp	r3, #6
    5ed6:	d1f7      	bne.n	5ec8 <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
    5ed8:	2000      	movs	r0, #0
}
    5eda:	b007      	add	sp, #28
    5edc:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    5ede:	2300      	movs	r3, #0
			return i;
    5ee0:	b2d8      	uxtb	r0, r3
    5ee2:	e7fa      	b.n	5eda <_sercom_get_sercom_inst_index+0x2a>
    5ee4:	0001fafc 	.word	0x0001fafc

00005ee8 <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
    5ee8:	4770      	bx	lr
	...

00005eec <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    5eec:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
    5eee:	4b0a      	ldr	r3, [pc, #40]	; (5f18 <_sercom_set_handler+0x2c>)
    5ef0:	781b      	ldrb	r3, [r3, #0]
    5ef2:	2b00      	cmp	r3, #0
    5ef4:	d10c      	bne.n	5f10 <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    5ef6:	4f09      	ldr	r7, [pc, #36]	; (5f1c <_sercom_set_handler+0x30>)
    5ef8:	4e09      	ldr	r6, [pc, #36]	; (5f20 <_sercom_set_handler+0x34>)
			_sercom_instances[i] = NULL;
    5efa:	4d0a      	ldr	r5, [pc, #40]	; (5f24 <_sercom_set_handler+0x38>)
    5efc:	2400      	movs	r4, #0
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    5efe:	51de      	str	r6, [r3, r7]
			_sercom_instances[i] = NULL;
    5f00:	195a      	adds	r2, r3, r5
    5f02:	6014      	str	r4, [r2, #0]
    5f04:	3304      	adds	r3, #4
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    5f06:	2b18      	cmp	r3, #24
    5f08:	d1f9      	bne.n	5efe <_sercom_set_handler+0x12>
		}

		_handler_table_initialized = true;
    5f0a:	2201      	movs	r2, #1
    5f0c:	4b02      	ldr	r3, [pc, #8]	; (5f18 <_sercom_set_handler+0x2c>)
    5f0e:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    5f10:	0080      	lsls	r0, r0, #2
    5f12:	4b02      	ldr	r3, [pc, #8]	; (5f1c <_sercom_set_handler+0x30>)
    5f14:	50c1      	str	r1, [r0, r3]
}
    5f16:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5f18:	20000b6a 	.word	0x20000b6a
    5f1c:	20000b6c 	.word	0x20000b6c
    5f20:	00005ee9 	.word	0x00005ee9
    5f24:	20002238 	.word	0x20002238

00005f28 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    5f28:	b500      	push	{lr}
    5f2a:	b083      	sub	sp, #12
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    5f2c:	2308      	movs	r3, #8
    5f2e:	466a      	mov	r2, sp
    5f30:	7013      	strb	r3, [r2, #0]
    5f32:	3301      	adds	r3, #1
    5f34:	7053      	strb	r3, [r2, #1]
    5f36:	3301      	adds	r3, #1
    5f38:	7093      	strb	r3, [r2, #2]
    5f3a:	3301      	adds	r3, #1
    5f3c:	70d3      	strb	r3, [r2, #3]
    5f3e:	3301      	adds	r3, #1
    5f40:	7113      	strb	r3, [r2, #4]
    5f42:	3301      	adds	r3, #1
    5f44:	7153      	strb	r3, [r2, #5]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    5f46:	4b03      	ldr	r3, [pc, #12]	; (5f54 <_sercom_get_interrupt_vector+0x2c>)
    5f48:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    5f4a:	466b      	mov	r3, sp
    5f4c:	5618      	ldrsb	r0, [r3, r0]
}
    5f4e:	b003      	add	sp, #12
    5f50:	bd00      	pop	{pc}
    5f52:	46c0      	nop			; (mov r8, r8)
    5f54:	00005eb1 	.word	0x00005eb1

00005f58 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    5f58:	b510      	push	{r4, lr}
    5f5a:	4b02      	ldr	r3, [pc, #8]	; (5f64 <SERCOM0_Handler+0xc>)
    5f5c:	681b      	ldr	r3, [r3, #0]
    5f5e:	2000      	movs	r0, #0
    5f60:	4798      	blx	r3
    5f62:	bd10      	pop	{r4, pc}
    5f64:	20000b6c 	.word	0x20000b6c

00005f68 <SERCOM1_Handler>:
    5f68:	b510      	push	{r4, lr}
    5f6a:	4b02      	ldr	r3, [pc, #8]	; (5f74 <SERCOM1_Handler+0xc>)
    5f6c:	685b      	ldr	r3, [r3, #4]
    5f6e:	2001      	movs	r0, #1
    5f70:	4798      	blx	r3
    5f72:	bd10      	pop	{r4, pc}
    5f74:	20000b6c 	.word	0x20000b6c

00005f78 <SERCOM2_Handler>:
    5f78:	b510      	push	{r4, lr}
    5f7a:	4b02      	ldr	r3, [pc, #8]	; (5f84 <SERCOM2_Handler+0xc>)
    5f7c:	689b      	ldr	r3, [r3, #8]
    5f7e:	2002      	movs	r0, #2
    5f80:	4798      	blx	r3
    5f82:	bd10      	pop	{r4, pc}
    5f84:	20000b6c 	.word	0x20000b6c

00005f88 <SERCOM3_Handler>:
    5f88:	b510      	push	{r4, lr}
    5f8a:	4b02      	ldr	r3, [pc, #8]	; (5f94 <SERCOM3_Handler+0xc>)
    5f8c:	68db      	ldr	r3, [r3, #12]
    5f8e:	2003      	movs	r0, #3
    5f90:	4798      	blx	r3
    5f92:	bd10      	pop	{r4, pc}
    5f94:	20000b6c 	.word	0x20000b6c

00005f98 <SERCOM4_Handler>:
    5f98:	b510      	push	{r4, lr}
    5f9a:	4b02      	ldr	r3, [pc, #8]	; (5fa4 <SERCOM4_Handler+0xc>)
    5f9c:	691b      	ldr	r3, [r3, #16]
    5f9e:	2004      	movs	r0, #4
    5fa0:	4798      	blx	r3
    5fa2:	bd10      	pop	{r4, pc}
    5fa4:	20000b6c 	.word	0x20000b6c

00005fa8 <SERCOM5_Handler>:
    5fa8:	b510      	push	{r4, lr}
    5faa:	4b02      	ldr	r3, [pc, #8]	; (5fb4 <SERCOM5_Handler+0xc>)
    5fac:	695b      	ldr	r3, [r3, #20]
    5fae:	2005      	movs	r0, #5
    5fb0:	4798      	blx	r3
    5fb2:	bd10      	pop	{r4, pc}
    5fb4:	20000b6c 	.word	0x20000b6c

00005fb8 <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
    5fb8:	b5f0      	push	{r4, r5, r6, r7, lr}
    5fba:	46d6      	mov	lr, sl
    5fbc:	464f      	mov	r7, r9
    5fbe:	4646      	mov	r6, r8
    5fc0:	b5c0      	push	{r6, r7, lr}
    5fc2:	b08a      	sub	sp, #40	; 0x28
    5fc4:	0006      	movs	r6, r0
    5fc6:	000f      	movs	r7, r1
    5fc8:	0014      	movs	r4, r2
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
    5fca:	6031      	str	r1, [r6, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
    5fcc:	680b      	ldr	r3, [r1, #0]
    5fce:	079b      	lsls	r3, r3, #30
    5fd0:	d40a      	bmi.n	5fe8 <spi_init+0x30>
		return STATUS_ERR_DENIED;
#  endif
	}

	/* Check if reset is in progress. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    5fd2:	680b      	ldr	r3, [r1, #0]
		return STATUS_BUSY;
    5fd4:	2005      	movs	r0, #5
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    5fd6:	07db      	lsls	r3, r3, #31
    5fd8:	d400      	bmi.n	5fdc <spi_init+0x24>
    5fda:	e097      	b.n	610c <spi_init+0x154>
	_sercom_instances[instance_index] = module;
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
}
    5fdc:	b00a      	add	sp, #40	; 0x28
    5fde:	bc1c      	pop	{r2, r3, r4}
    5fe0:	4690      	mov	r8, r2
    5fe2:	4699      	mov	r9, r3
    5fe4:	46a2      	mov	sl, r4
    5fe6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint32_t pad_pinmuxes[] = {
    5fe8:	6a93      	ldr	r3, [r2, #40]	; 0x28
    5fea:	9305      	str	r3, [sp, #20]
    5fec:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    5fee:	9306      	str	r3, [sp, #24]
    5ff0:	6b13      	ldr	r3, [r2, #48]	; 0x30
    5ff2:	9307      	str	r3, [sp, #28]
    5ff4:	6b53      	ldr	r3, [r2, #52]	; 0x34
    5ff6:	9308      	str	r3, [sp, #32]
    5ff8:	2500      	movs	r5, #0
    5ffa:	e00a      	b.n	6012 <spi_init+0x5a>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    5ffc:	0038      	movs	r0, r7
    5ffe:	4b9a      	ldr	r3, [pc, #616]	; (6268 <spi_init+0x2b0>)
    6000:	4798      	blx	r3
    6002:	e00e      	b.n	6022 <spi_init+0x6a>

	if (pin_index & 1) {
		return (pmux_reg & PORT_PMUX_PMUXO_Msk) >> PORT_PMUX_PMUXO_Pos;
	}
	else {
		return (pmux_reg & PORT_PMUX_PMUXE_Msk) >> PORT_PMUX_PMUXE_Pos;
    6004:	230f      	movs	r3, #15
    6006:	4018      	ands	r0, r3
		if ((current_pinmux & 0xFFFF) !=
    6008:	4581      	cmp	r9, r0
    600a:	d130      	bne.n	606e <spi_init+0xb6>
    600c:	3501      	adds	r5, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    600e:	2d04      	cmp	r5, #4
    6010:	d031      	beq.n	6076 <spi_init+0xbe>
    6012:	b2e9      	uxtb	r1, r5
		uint32_t current_pinmux = pad_pinmuxes[pad];
    6014:	00ab      	lsls	r3, r5, #2
    6016:	aa02      	add	r2, sp, #8
    6018:	200c      	movs	r0, #12
    601a:	1812      	adds	r2, r2, r0
    601c:	58d0      	ldr	r0, [r2, r3]
		if (current_pinmux == PINMUX_DEFAULT) {
    601e:	2800      	cmp	r0, #0
    6020:	d0ec      	beq.n	5ffc <spi_init+0x44>
		if (current_pinmux == PINMUX_UNUSED) {
    6022:	1c43      	adds	r3, r0, #1
    6024:	d0f2      	beq.n	600c <spi_init+0x54>
		if ((current_pinmux & 0xFFFF) !=
    6026:	0401      	lsls	r1, r0, #16
    6028:	0c0b      	lsrs	r3, r1, #16
    602a:	4699      	mov	r9, r3
				system_pinmux_pin_get_mux_position(current_pinmux >> 16)) {
    602c:	0c00      	lsrs	r0, r0, #16
	if (port_index < PORT_INST_NUM) {
    602e:	b2c3      	uxtb	r3, r0
    6030:	469c      	mov	ip, r3
		return NULL;
    6032:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    6034:	0602      	lsls	r2, r0, #24
    6036:	d405      	bmi.n	6044 <spi_init+0x8c>
		return &(ports[port_index]->Group[group_index]);
    6038:	4663      	mov	r3, ip
    603a:	095b      	lsrs	r3, r3, #5
    603c:	01db      	lsls	r3, r3, #7
    603e:	4a8b      	ldr	r2, [pc, #556]	; (626c <spi_init+0x2b4>)
    6040:	4690      	mov	r8, r2
    6042:	4443      	add	r3, r8
	uint32_t pin_index = (gpio_pin % 32);
    6044:	221f      	movs	r2, #31
    6046:	4660      	mov	r0, ip
    6048:	4002      	ands	r2, r0
	if (!(port->PINCFG[pin_index].reg & PORT_PINCFG_PMUXEN)) {
    604a:	1898      	adds	r0, r3, r2
    604c:	3040      	adds	r0, #64	; 0x40
    604e:	7800      	ldrb	r0, [r0, #0]
    6050:	4682      	mov	sl, r0
		return SYSTEM_PINMUX_GPIO;
    6052:	2080      	movs	r0, #128	; 0x80
	if (!(port->PINCFG[pin_index].reg & PORT_PINCFG_PMUXEN)) {
    6054:	4651      	mov	r1, sl
    6056:	07c9      	lsls	r1, r1, #31
    6058:	d5d6      	bpl.n	6008 <spi_init+0x50>
	uint32_t pmux_reg = port->PMUX[pin_index / 2].reg;
    605a:	0852      	lsrs	r2, r2, #1
    605c:	189b      	adds	r3, r3, r2
    605e:	3330      	adds	r3, #48	; 0x30
    6060:	7818      	ldrb	r0, [r3, #0]
    6062:	b2c0      	uxtb	r0, r0
	if (pin_index & 1) {
    6064:	4663      	mov	r3, ip
    6066:	07db      	lsls	r3, r3, #31
    6068:	d5cc      	bpl.n	6004 <spi_init+0x4c>
		return (pmux_reg & PORT_PMUX_PMUXO_Msk) >> PORT_PMUX_PMUXO_Pos;
    606a:	0900      	lsrs	r0, r0, #4
    606c:	e7cc      	b.n	6008 <spi_init+0x50>
			module->hw = NULL;
    606e:	2300      	movs	r3, #0
    6070:	6033      	str	r3, [r6, #0]
			return STATUS_ERR_DENIED;
    6072:	201c      	movs	r0, #28
    6074:	e7b2      	b.n	5fdc <spi_init+0x24>
	uint32_t external_clock = system_gclk_chan_get_hz(SERCOM_GCLK_ID);
    6076:	2011      	movs	r0, #17
    6078:	4b7d      	ldr	r3, [pc, #500]	; (6270 <spi_init+0x2b8>)
    607a:	4798      	blx	r3
	if (config->mode == SPI_MODE_MASTER) {
    607c:	7822      	ldrb	r2, [r4, #0]
	uint32_t ctrla = 0;
    607e:	2500      	movs	r5, #0
	if (config->mode == SPI_MODE_MASTER) {
    6080:	2a01      	cmp	r2, #1
    6082:	d026      	beq.n	60d2 <spi_init+0x11a>
	ctrla |= config->mux_setting;
    6084:	6863      	ldr	r3, [r4, #4]
    6086:	68a2      	ldr	r2, [r4, #8]
    6088:	4313      	orrs	r3, r2
    608a:	68e2      	ldr	r2, [r4, #12]
    608c:	4313      	orrs	r3, r2
    608e:	432b      	orrs	r3, r5
	ctrlb |= config->character_size;
    6090:	7c22      	ldrb	r2, [r4, #16]
	if (config->run_in_standby) {
    6092:	7c61      	ldrb	r1, [r4, #17]
    6094:	2900      	cmp	r1, #0
    6096:	d001      	beq.n	609c <spi_init+0xe4>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
    6098:	2180      	movs	r1, #128	; 0x80
    609a:	430b      	orrs	r3, r1
	if (config->receiver_enable) {
    609c:	7ca1      	ldrb	r1, [r4, #18]
    609e:	2900      	cmp	r1, #0
    60a0:	d002      	beq.n	60a8 <spi_init+0xf0>
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
    60a2:	2180      	movs	r1, #128	; 0x80
    60a4:	0289      	lsls	r1, r1, #10
    60a6:	430a      	orrs	r2, r1
	if (config->select_slave_low_detect_enable) {
    60a8:	7ce1      	ldrb	r1, [r4, #19]
    60aa:	2900      	cmp	r1, #0
    60ac:	d002      	beq.n	60b4 <spi_init+0xfc>
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
    60ae:	2180      	movs	r1, #128	; 0x80
    60b0:	0089      	lsls	r1, r1, #2
    60b2:	430a      	orrs	r2, r1
	if (config->master_slave_select_enable) {
    60b4:	7d21      	ldrb	r1, [r4, #20]
    60b6:	2900      	cmp	r1, #0
    60b8:	d002      	beq.n	60c0 <spi_init+0x108>
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
    60ba:	2180      	movs	r1, #128	; 0x80
    60bc:	0189      	lsls	r1, r1, #6
    60be:	430a      	orrs	r2, r1
	if (spi_module->CTRLA.reg == ctrla &&
    60c0:	6839      	ldr	r1, [r7, #0]
	ctrla |= SERCOM_SPI_CTRLA_ENABLE;
    60c2:	2002      	movs	r0, #2
    60c4:	4303      	orrs	r3, r0
	if (spi_module->CTRLA.reg == ctrla &&
    60c6:	428b      	cmp	r3, r1
    60c8:	d017      	beq.n	60fa <spi_init+0x142>
	module->hw = NULL;
    60ca:	2300      	movs	r3, #0
    60cc:	6033      	str	r3, [r6, #0]
	return STATUS_ERR_DENIED;
    60ce:	201c      	movs	r0, #28
    60d0:	e784      	b.n	5fdc <spi_init+0x24>
		enum status_code error_code = _sercom_get_sync_baud_val(
    60d2:	aa04      	add	r2, sp, #16
    60d4:	0001      	movs	r1, r0
    60d6:	69a0      	ldr	r0, [r4, #24]
    60d8:	4b66      	ldr	r3, [pc, #408]	; (6274 <spi_init+0x2bc>)
    60da:	4798      	blx	r3
    60dc:	0003      	movs	r3, r0
			return STATUS_ERR_INVALID_ARG;
    60de:	2017      	movs	r0, #23
		if (error_code != STATUS_OK) {
    60e0:	2b00      	cmp	r3, #0
    60e2:	d000      	beq.n	60e6 <spi_init+0x12e>
    60e4:	e77a      	b.n	5fdc <spi_init+0x24>
		if (spi_module->BAUD.reg !=  (uint8_t)baud) {
    60e6:	7b3b      	ldrb	r3, [r7, #12]
    60e8:	b2db      	uxtb	r3, r3
    60ea:	aa04      	add	r2, sp, #16
    60ec:	7812      	ldrb	r2, [r2, #0]
			return STATUS_ERR_DENIED;
    60ee:	3005      	adds	r0, #5
		if (spi_module->BAUD.reg !=  (uint8_t)baud) {
    60f0:	429a      	cmp	r2, r3
    60f2:	d000      	beq.n	60f6 <spi_init+0x13e>
    60f4:	e772      	b.n	5fdc <spi_init+0x24>
		ctrla |= SERCOM_SPI_CTRLA_MODE(0x3);
    60f6:	350c      	adds	r5, #12
    60f8:	e7c4      	b.n	6084 <spi_init+0xcc>
			spi_module->CTRLB.reg == ctrlb) {
    60fa:	687b      	ldr	r3, [r7, #4]
	if (spi_module->CTRLA.reg == ctrla &&
    60fc:	4293      	cmp	r3, r2
    60fe:	d1e4      	bne.n	60ca <spi_init+0x112>
		module->mode           = config->mode;
    6100:	7823      	ldrb	r3, [r4, #0]
    6102:	7173      	strb	r3, [r6, #5]
		module->character_size = config->character_size;
    6104:	7c23      	ldrb	r3, [r4, #16]
    6106:	71b3      	strb	r3, [r6, #6]
		return STATUS_OK;
    6108:	2000      	movs	r0, #0
    610a:	e767      	b.n	5fdc <spi_init+0x24>
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    610c:	0008      	movs	r0, r1
    610e:	4b5a      	ldr	r3, [pc, #360]	; (6278 <spi_init+0x2c0>)
    6110:	4798      	blx	r3
	if (sercom_index == 5) {
    6112:	2805      	cmp	r0, #5
    6114:	d100      	bne.n	6118 <spi_init+0x160>
    6116:	e09f      	b.n	6258 <spi_init+0x2a0>
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    6118:	0003      	movs	r3, r0
    611a:	3312      	adds	r3, #18
			MCLK->APBCMASK.reg |= mask;
    611c:	4957      	ldr	r1, [pc, #348]	; (627c <spi_init+0x2c4>)
    611e:	69cd      	ldr	r5, [r1, #28]
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    6120:	2201      	movs	r2, #1
    6122:	4082      	lsls	r2, r0
    6124:	432a      	orrs	r2, r5
    6126:	61ca      	str	r2, [r1, #28]
	gclk_chan_conf.source_generator = config->generator_source;
    6128:	a909      	add	r1, sp, #36	; 0x24
    612a:	2524      	movs	r5, #36	; 0x24
    612c:	5d62      	ldrb	r2, [r4, r5]
    612e:	700a      	strb	r2, [r1, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    6130:	b2db      	uxtb	r3, r3
    6132:	9301      	str	r3, [sp, #4]
    6134:	0018      	movs	r0, r3
    6136:	4b52      	ldr	r3, [pc, #328]	; (6280 <spi_init+0x2c8>)
    6138:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    613a:	9801      	ldr	r0, [sp, #4]
    613c:	4b51      	ldr	r3, [pc, #324]	; (6284 <spi_init+0x2cc>)
    613e:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    6140:	5d60      	ldrb	r0, [r4, r5]
    6142:	2100      	movs	r1, #0
    6144:	4b50      	ldr	r3, [pc, #320]	; (6288 <spi_init+0x2d0>)
    6146:	4798      	blx	r3
	if (config->mode == SPI_MODE_MASTER) {
    6148:	7823      	ldrb	r3, [r4, #0]
    614a:	2b01      	cmp	r3, #1
    614c:	d019      	beq.n	6182 <spi_init+0x1ca>
	SercomSpi *const spi_module = &(module->hw->SPI);
    614e:	6833      	ldr	r3, [r6, #0]
    6150:	4698      	mov	r8, r3
	config->mux_position = SYSTEM_PINMUX_GPIO;
    6152:	ab04      	add	r3, sp, #16
    6154:	2280      	movs	r2, #128	; 0x80
    6156:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    6158:	2200      	movs	r2, #0
    615a:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    615c:	2101      	movs	r1, #1
    615e:	7099      	strb	r1, [r3, #2]
	config->powersave    = false;
    6160:	70da      	strb	r2, [r3, #3]
	if(config->mode == SPI_MODE_SLAVE) {
    6162:	7823      	ldrb	r3, [r4, #0]
    6164:	2b00      	cmp	r3, #0
    6166:	d101      	bne.n	616c <spi_init+0x1b4>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    6168:	ab04      	add	r3, sp, #16
    616a:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
    616c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    616e:	9305      	str	r3, [sp, #20]
    6170:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    6172:	9306      	str	r3, [sp, #24]
    6174:	6b23      	ldr	r3, [r4, #48]	; 0x30
    6176:	9307      	str	r3, [sp, #28]
    6178:	6b63      	ldr	r3, [r4, #52]	; 0x34
    617a:	9308      	str	r3, [sp, #32]
    617c:	2700      	movs	r7, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
    617e:	ad05      	add	r5, sp, #20
    6180:	e011      	b.n	61a6 <spi_init+0x1ee>
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
    6182:	683b      	ldr	r3, [r7, #0]
    6184:	220c      	movs	r2, #12
    6186:	4313      	orrs	r3, r2
    6188:	603b      	str	r3, [r7, #0]
    618a:	e7e0      	b.n	614e <spi_init+0x196>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    618c:	4640      	mov	r0, r8
    618e:	4b36      	ldr	r3, [pc, #216]	; (6268 <spi_init+0x2b0>)
    6190:	4798      	blx	r3
    6192:	e00d      	b.n	61b0 <spi_init+0x1f8>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    6194:	a904      	add	r1, sp, #16
    6196:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    6198:	0c00      	lsrs	r0, r0, #16
    619a:	b2c0      	uxtb	r0, r0
    619c:	4b3b      	ldr	r3, [pc, #236]	; (628c <spi_init+0x2d4>)
    619e:	4798      	blx	r3
    61a0:	3701      	adds	r7, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    61a2:	2f04      	cmp	r7, #4
    61a4:	d007      	beq.n	61b6 <spi_init+0x1fe>
    61a6:	b2f9      	uxtb	r1, r7
		uint32_t current_pinmux = pad_pinmuxes[pad];
    61a8:	00bb      	lsls	r3, r7, #2
    61aa:	5958      	ldr	r0, [r3, r5]
		if (current_pinmux == PINMUX_DEFAULT) {
    61ac:	2800      	cmp	r0, #0
    61ae:	d0ed      	beq.n	618c <spi_init+0x1d4>
		if (current_pinmux != PINMUX_UNUSED) {
    61b0:	1c43      	adds	r3, r0, #1
    61b2:	d1ef      	bne.n	6194 <spi_init+0x1dc>
    61b4:	e7f4      	b.n	61a0 <spi_init+0x1e8>
	module->mode             = config->mode;
    61b6:	7823      	ldrb	r3, [r4, #0]
    61b8:	7173      	strb	r3, [r6, #5]
	module->character_size   = config->character_size;
    61ba:	7c23      	ldrb	r3, [r4, #16]
    61bc:	71b3      	strb	r3, [r6, #6]
	module->receiver_enabled = config->receiver_enable;
    61be:	7ca3      	ldrb	r3, [r4, #18]
    61c0:	71f3      	strb	r3, [r6, #7]
	module->master_slave_select_enable = config->master_slave_select_enable;
    61c2:	7d23      	ldrb	r3, [r4, #20]
    61c4:	7233      	strb	r3, [r6, #8]
	uint16_t baud = 0;
    61c6:	2200      	movs	r2, #0
    61c8:	ab02      	add	r3, sp, #8
    61ca:	80da      	strh	r2, [r3, #6]
	if (config->mode == SPI_MODE_MASTER) {
    61cc:	7823      	ldrb	r3, [r4, #0]
    61ce:	2b01      	cmp	r3, #1
    61d0:	d02a      	beq.n	6228 <spi_init+0x270>
	ctrla |= config->transfer_mode;
    61d2:	6863      	ldr	r3, [r4, #4]
    61d4:	68a2      	ldr	r2, [r4, #8]
    61d6:	4313      	orrs	r3, r2
	ctrla |= config->mux_setting;
    61d8:	68e2      	ldr	r2, [r4, #12]
    61da:	4313      	orrs	r3, r2
	ctrlb |= config->character_size;
    61dc:	7c21      	ldrb	r1, [r4, #16]
	if (config->run_in_standby || system_is_debugger_present()) {
    61de:	7c62      	ldrb	r2, [r4, #17]
    61e0:	2a00      	cmp	r2, #0
    61e2:	d103      	bne.n	61ec <spi_init+0x234>
    61e4:	4a2a      	ldr	r2, [pc, #168]	; (6290 <spi_init+0x2d8>)
    61e6:	7892      	ldrb	r2, [r2, #2]
    61e8:	0792      	lsls	r2, r2, #30
    61ea:	d501      	bpl.n	61f0 <spi_init+0x238>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
    61ec:	2280      	movs	r2, #128	; 0x80
    61ee:	4313      	orrs	r3, r2
	if (config->receiver_enable) {
    61f0:	7ca2      	ldrb	r2, [r4, #18]
    61f2:	2a00      	cmp	r2, #0
    61f4:	d002      	beq.n	61fc <spi_init+0x244>
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
    61f6:	2280      	movs	r2, #128	; 0x80
    61f8:	0292      	lsls	r2, r2, #10
    61fa:	4311      	orrs	r1, r2
	if (config->select_slave_low_detect_enable) {
    61fc:	7ce2      	ldrb	r2, [r4, #19]
    61fe:	2a00      	cmp	r2, #0
    6200:	d002      	beq.n	6208 <spi_init+0x250>
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
    6202:	2280      	movs	r2, #128	; 0x80
    6204:	0092      	lsls	r2, r2, #2
    6206:	4311      	orrs	r1, r2
	if (config->master_slave_select_enable) {
    6208:	7d22      	ldrb	r2, [r4, #20]
    620a:	2a00      	cmp	r2, #0
    620c:	d002      	beq.n	6214 <spi_init+0x25c>
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
    620e:	2280      	movs	r2, #128	; 0x80
    6210:	0192      	lsls	r2, r2, #6
    6212:	4311      	orrs	r1, r2
	spi_module->CTRLA.reg |= ctrla;
    6214:	4642      	mov	r2, r8
    6216:	6812      	ldr	r2, [r2, #0]
    6218:	4313      	orrs	r3, r2
    621a:	4642      	mov	r2, r8
    621c:	6013      	str	r3, [r2, #0]
	spi_module->CTRLB.reg |= ctrlb;
    621e:	6853      	ldr	r3, [r2, #4]
    6220:	430b      	orrs	r3, r1
    6222:	6053      	str	r3, [r2, #4]
	return STATUS_OK;
    6224:	2000      	movs	r0, #0
    6226:	e6d9      	b.n	5fdc <spi_init+0x24>
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    6228:	6830      	ldr	r0, [r6, #0]
    622a:	4b13      	ldr	r3, [pc, #76]	; (6278 <spi_init+0x2c0>)
    622c:	4798      	blx	r3
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    622e:	3012      	adds	r0, #18
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
    6230:	b2c0      	uxtb	r0, r0
    6232:	4b0f      	ldr	r3, [pc, #60]	; (6270 <spi_init+0x2b8>)
    6234:	4798      	blx	r3
    6236:	0001      	movs	r1, r0
		enum status_code error_code = _sercom_get_sync_baud_val(
    6238:	ab02      	add	r3, sp, #8
    623a:	1d9a      	adds	r2, r3, #6
    623c:	69a0      	ldr	r0, [r4, #24]
    623e:	4b0d      	ldr	r3, [pc, #52]	; (6274 <spi_init+0x2bc>)
    6240:	4798      	blx	r3
    6242:	0003      	movs	r3, r0
			return STATUS_ERR_INVALID_ARG;
    6244:	2017      	movs	r0, #23
		if (error_code != STATUS_OK) {
    6246:	2b00      	cmp	r3, #0
    6248:	d000      	beq.n	624c <spi_init+0x294>
    624a:	e6c7      	b.n	5fdc <spi_init+0x24>
		spi_module->BAUD.reg = (uint8_t)baud;
    624c:	ab02      	add	r3, sp, #8
    624e:	3306      	adds	r3, #6
    6250:	781b      	ldrb	r3, [r3, #0]
    6252:	4642      	mov	r2, r8
    6254:	7313      	strb	r3, [r2, #12]
    6256:	e7bc      	b.n	61d2 <spi_init+0x21a>
			MCLK->APBDMASK.reg |= mask;
    6258:	4a08      	ldr	r2, [pc, #32]	; (627c <spi_init+0x2c4>)
    625a:	6a13      	ldr	r3, [r2, #32]
    625c:	2102      	movs	r1, #2
    625e:	430b      	orrs	r3, r1
    6260:	6213      	str	r3, [r2, #32]
		gclk_index   =  SERCOM5_GCLK_ID_CORE;
    6262:	2318      	movs	r3, #24
    6264:	e760      	b.n	6128 <spi_init+0x170>
    6266:	46c0      	nop			; (mov r8, r8)
    6268:	00005d55 	.word	0x00005d55
    626c:	40002800 	.word	0x40002800
    6270:	000071d1 	.word	0x000071d1
    6274:	00005c4b 	.word	0x00005c4b
    6278:	00005eb1 	.word	0x00005eb1
    627c:	40000400 	.word	0x40000400
    6280:	000071ad 	.word	0x000071ad
    6284:	0000713d 	.word	0x0000713d
    6288:	00005d09 	.word	0x00005d09
    628c:	000072d9 	.word	0x000072d9
    6290:	41002000 	.word	0x41002000

00006294 <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		const bool select)
{
    6294:	b510      	push	{r4, lr}
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
    6296:	7944      	ldrb	r4, [r0, #5]
		return STATUS_ERR_UNSUPPORTED_DEV;
    6298:	2315      	movs	r3, #21
	if (module->mode != SPI_MODE_MASTER) {
    629a:	2c01      	cmp	r4, #1
    629c:	d001      	beq.n	62a2 <spi_select_slave+0xe>
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
		}
	}
	return STATUS_OK;
}
    629e:	0018      	movs	r0, r3
    62a0:	bd10      	pop	{r4, pc}
	if(!(module->master_slave_select_enable))
    62a2:	7a04      	ldrb	r4, [r0, #8]
	return STATUS_OK;
    62a4:	2300      	movs	r3, #0
	if(!(module->master_slave_select_enable))
    62a6:	2c00      	cmp	r4, #0
    62a8:	d1f9      	bne.n	629e <spi_select_slave+0xa>
		if (select) {
    62aa:	2a00      	cmp	r2, #0
    62ac:	d058      	beq.n	6360 <spi_select_slave+0xcc>
			if (slave->address_enabled) {
    62ae:	784b      	ldrb	r3, [r1, #1]
    62b0:	2b00      	cmp	r3, #0
    62b2:	d044      	beq.n	633e <spi_select_slave+0xaa>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    62b4:	6803      	ldr	r3, [r0, #0]
    62b6:	7e1b      	ldrb	r3, [r3, #24]
				if (!spi_is_ready_to_write(module)) {
    62b8:	07db      	lsls	r3, r3, #31
    62ba:	d410      	bmi.n	62de <spi_select_slave+0x4a>
					port_pin_set_output_level(slave->ss_pin, true);
    62bc:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    62be:	09d1      	lsrs	r1, r2, #7
		return NULL;
    62c0:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    62c2:	2900      	cmp	r1, #0
    62c4:	d104      	bne.n	62d0 <spi_select_slave+0x3c>
		return &(ports[port_index]->Group[group_index]);
    62c6:	0953      	lsrs	r3, r2, #5
    62c8:	01db      	lsls	r3, r3, #7
    62ca:	492e      	ldr	r1, [pc, #184]	; (6384 <spi_select_slave+0xf0>)
    62cc:	468c      	mov	ip, r1
    62ce:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    62d0:	211f      	movs	r1, #31
    62d2:	4011      	ands	r1, r2
    62d4:	2201      	movs	r2, #1
    62d6:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    62d8:	619a      	str	r2, [r3, #24]
					return STATUS_BUSY;
    62da:	2305      	movs	r3, #5
    62dc:	e7df      	b.n	629e <spi_select_slave+0xa>
				port_pin_set_output_level(slave->ss_pin, false);
    62de:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    62e0:	09d4      	lsrs	r4, r2, #7
		return NULL;
    62e2:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    62e4:	2c00      	cmp	r4, #0
    62e6:	d104      	bne.n	62f2 <spi_select_slave+0x5e>
		return &(ports[port_index]->Group[group_index]);
    62e8:	0953      	lsrs	r3, r2, #5
    62ea:	01db      	lsls	r3, r3, #7
    62ec:	4c25      	ldr	r4, [pc, #148]	; (6384 <spi_select_slave+0xf0>)
    62ee:	46a4      	mov	ip, r4
    62f0:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    62f2:	241f      	movs	r4, #31
    62f4:	4014      	ands	r4, r2
    62f6:	2201      	movs	r2, #1
    62f8:	40a2      	lsls	r2, r4
		port_base->OUTCLR.reg = pin_mask;
    62fa:	615a      	str	r2, [r3, #20]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    62fc:	6803      	ldr	r3, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    62fe:	7e1a      	ldrb	r2, [r3, #24]

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    6300:	07d2      	lsls	r2, r2, #31
    6302:	d501      	bpl.n	6308 <spi_select_slave+0x74>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    6304:	788a      	ldrb	r2, [r1, #2]
    6306:	629a      	str	r2, [r3, #40]	; 0x28
				if (!(module->receiver_enabled)) {
    6308:	79c2      	ldrb	r2, [r0, #7]
	return STATUS_OK;
    630a:	2300      	movs	r3, #0
				if (!(module->receiver_enabled)) {
    630c:	2a00      	cmp	r2, #0
    630e:	d1c6      	bne.n	629e <spi_select_slave+0xa>
	SercomSpi *const spi_module = &(module->hw->SPI);
    6310:	6802      	ldr	r2, [r0, #0]
					while (!spi_is_ready_to_read(module)) {
    6312:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    6314:	7e13      	ldrb	r3, [r2, #24]
    6316:	420b      	tst	r3, r1
    6318:	d0fc      	beq.n	6314 <spi_select_slave+0x80>
    631a:	7e11      	ldrb	r1, [r2, #24]
	return STATUS_OK;
    631c:	2300      	movs	r3, #0
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    631e:	0749      	lsls	r1, r1, #29
    6320:	d5bd      	bpl.n	629e <spi_select_slave+0xa>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    6322:	8b53      	ldrh	r3, [r2, #26]
    6324:	075b      	lsls	r3, r3, #29
    6326:	d501      	bpl.n	632c <spi_select_slave+0x98>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    6328:	2304      	movs	r3, #4
    632a:	8353      	strh	r3, [r2, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    632c:	7983      	ldrb	r3, [r0, #6]
    632e:	2b01      	cmp	r3, #1
    6330:	d002      	beq.n	6338 <spi_select_slave+0xa4>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    6332:	6a93      	ldr	r3, [r2, #40]	; 0x28
    6334:	2300      	movs	r3, #0
    6336:	e7b2      	b.n	629e <spi_select_slave+0xa>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    6338:	6a93      	ldr	r3, [r2, #40]	; 0x28
    633a:	2300      	movs	r3, #0
    633c:	e7af      	b.n	629e <spi_select_slave+0xa>
				port_pin_set_output_level(slave->ss_pin, false);
    633e:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    6340:	09d1      	lsrs	r1, r2, #7
		return NULL;
    6342:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    6344:	2900      	cmp	r1, #0
    6346:	d104      	bne.n	6352 <spi_select_slave+0xbe>
		return &(ports[port_index]->Group[group_index]);
    6348:	0953      	lsrs	r3, r2, #5
    634a:	01db      	lsls	r3, r3, #7
    634c:	490d      	ldr	r1, [pc, #52]	; (6384 <spi_select_slave+0xf0>)
    634e:	468c      	mov	ip, r1
    6350:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    6352:	211f      	movs	r1, #31
    6354:	4011      	ands	r1, r2
    6356:	2201      	movs	r2, #1
    6358:	408a      	lsls	r2, r1
		port_base->OUTCLR.reg = pin_mask;
    635a:	615a      	str	r2, [r3, #20]
	return STATUS_OK;
    635c:	2300      	movs	r3, #0
    635e:	e79e      	b.n	629e <spi_select_slave+0xa>
			port_pin_set_output_level(slave->ss_pin, true);
    6360:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    6362:	09d1      	lsrs	r1, r2, #7
		return NULL;
    6364:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    6366:	2900      	cmp	r1, #0
    6368:	d104      	bne.n	6374 <spi_select_slave+0xe0>
		return &(ports[port_index]->Group[group_index]);
    636a:	0953      	lsrs	r3, r2, #5
    636c:	01db      	lsls	r3, r3, #7
    636e:	4905      	ldr	r1, [pc, #20]	; (6384 <spi_select_slave+0xf0>)
    6370:	468c      	mov	ip, r1
    6372:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    6374:	211f      	movs	r1, #31
    6376:	4011      	ands	r1, r2
    6378:	2201      	movs	r2, #1
    637a:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    637c:	619a      	str	r2, [r3, #24]
	return STATUS_OK;
    637e:	2300      	movs	r3, #0
    6380:	e78d      	b.n	629e <spi_select_slave+0xa>
    6382:	46c0      	nop			; (mov r8, r8)
    6384:	40002800 	.word	0x40002800

00006388 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
    6388:	b5f0      	push	{r4, r5, r6, r7, lr}
    638a:	46de      	mov	lr, fp
    638c:	4657      	mov	r7, sl
    638e:	464e      	mov	r6, r9
    6390:	4645      	mov	r5, r8
    6392:	b5e0      	push	{r5, r6, r7, lr}
    6394:	b091      	sub	sp, #68	; 0x44
    6396:	0005      	movs	r5, r0
    6398:	000c      	movs	r4, r1
    639a:	0016      	movs	r6, r2
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
    639c:	6029      	str	r1, [r5, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    639e:	0008      	movs	r0, r1
    63a0:	4bc4      	ldr	r3, [pc, #784]	; (66b4 <usart_init+0x32c>)
    63a2:	4798      	blx	r3
    63a4:	0002      	movs	r2, r0
	uint32_t pm_index, gclk_index; 
#if (SAML22) || (SAMC20) 
	pm_index	= sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
	gclk_index	= sercom_index + SERCOM0_GCLK_ID_CORE;
#elif (SAML21) || (SAMR30) || (SAMR34) || (SAMR35) || (WLR089)
	if (sercom_index == 5) {
    63a6:	2805      	cmp	r0, #5
    63a8:	d00d      	beq.n	63c6 <usart_init+0x3e>
		pm_index     = MCLK_APBDMASK_SERCOM5_Pos;
		gclk_index   = SERCOM5_GCLK_ID_CORE;
	} else {
		pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    63aa:	0007      	movs	r7, r0
    63ac:	3712      	adds	r7, #18
		pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
    63ae:	0003      	movs	r3, r0
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    63b0:	6821      	ldr	r1, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
    63b2:	2005      	movs	r0, #5
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    63b4:	07c9      	lsls	r1, r1, #31
    63b6:	d509      	bpl.n	63cc <usart_init+0x44>
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
}
    63b8:	b011      	add	sp, #68	; 0x44
    63ba:	bc3c      	pop	{r2, r3, r4, r5}
    63bc:	4690      	mov	r8, r2
    63be:	4699      	mov	r9, r3
    63c0:	46a2      	mov	sl, r4
    63c2:	46ab      	mov	fp, r5
    63c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		gclk_index   = SERCOM5_GCLK_ID_CORE;
    63c6:	2718      	movs	r7, #24
		pm_index     = MCLK_APBDMASK_SERCOM5_Pos;
    63c8:	2301      	movs	r3, #1
    63ca:	e7f1      	b.n	63b0 <usart_init+0x28>
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    63cc:	6821      	ldr	r1, [r4, #0]
		return STATUS_ERR_DENIED;
    63ce:	3017      	adds	r0, #23
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    63d0:	0789      	lsls	r1, r1, #30
    63d2:	d4f1      	bmi.n	63b8 <usart_init+0x30>
	if (sercom_index == 5) {
    63d4:	2a05      	cmp	r2, #5
    63d6:	d049      	beq.n	646c <usart_init+0xe4>
			MCLK->APBCMASK.reg |= mask;
    63d8:	49b7      	ldr	r1, [pc, #732]	; (66b8 <usart_init+0x330>)
    63da:	69c8      	ldr	r0, [r1, #28]
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);	
    63dc:	2201      	movs	r2, #1
    63de:	409a      	lsls	r2, r3
    63e0:	0013      	movs	r3, r2
    63e2:	4303      	orrs	r3, r0
    63e4:	61cb      	str	r3, [r1, #28]
	gclk_chan_conf.source_generator = config->generator_source;
    63e6:	a90f      	add	r1, sp, #60	; 0x3c
    63e8:	232d      	movs	r3, #45	; 0x2d
    63ea:	4698      	mov	r8, r3
    63ec:	5cf3      	ldrb	r3, [r6, r3]
    63ee:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    63f0:	b2ff      	uxtb	r7, r7
    63f2:	0038      	movs	r0, r7
    63f4:	4bb1      	ldr	r3, [pc, #708]	; (66bc <usart_init+0x334>)
    63f6:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    63f8:	0038      	movs	r0, r7
    63fa:	4bb1      	ldr	r3, [pc, #708]	; (66c0 <usart_init+0x338>)
    63fc:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    63fe:	4643      	mov	r3, r8
    6400:	5cf0      	ldrb	r0, [r6, r3]
    6402:	2100      	movs	r1, #0
    6404:	4baf      	ldr	r3, [pc, #700]	; (66c4 <usart_init+0x33c>)
    6406:	4798      	blx	r3
	module->character_size = config->character_size;
    6408:	7af3      	ldrb	r3, [r6, #11]
    640a:	716b      	strb	r3, [r5, #5]
	module->receiver_enabled = config->receiver_enable;
    640c:	2324      	movs	r3, #36	; 0x24
    640e:	5cf3      	ldrb	r3, [r6, r3]
    6410:	71ab      	strb	r3, [r5, #6]
	module->transmitter_enabled = config->transmitter_enable;
    6412:	2325      	movs	r3, #37	; 0x25
    6414:	5cf3      	ldrb	r3, [r6, r3]
    6416:	71eb      	strb	r3, [r5, #7]
	module->lin_slave_enabled = config->lin_slave_enable;
    6418:	7ef3      	ldrb	r3, [r6, #27]
    641a:	722b      	strb	r3, [r5, #8]
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
    641c:	7f33      	ldrb	r3, [r6, #28]
    641e:	726b      	strb	r3, [r5, #9]
	SercomUsart *const usart_hw = &(module->hw->USART);
    6420:	682b      	ldr	r3, [r5, #0]
    6422:	4698      	mov	r8, r3
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    6424:	0018      	movs	r0, r3
    6426:	4ba3      	ldr	r3, [pc, #652]	; (66b4 <usart_init+0x32c>)
    6428:	4798      	blx	r3
	if (sercom_index == 5) {
    642a:	2805      	cmp	r0, #5
    642c:	d026      	beq.n	647c <usart_init+0xf4>
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    642e:	3012      	adds	r0, #18
	uint16_t baud  = 0;
    6430:	2200      	movs	r2, #0
    6432:	230e      	movs	r3, #14
    6434:	a906      	add	r1, sp, #24
    6436:	468c      	mov	ip, r1
    6438:	4463      	add	r3, ip
    643a:	801a      	strh	r2, [r3, #0]
	switch (config->sample_rate) {
    643c:	8a32      	ldrh	r2, [r6, #16]
    643e:	9202      	str	r2, [sp, #8]
    6440:	2380      	movs	r3, #128	; 0x80
    6442:	01db      	lsls	r3, r3, #7
    6444:	429a      	cmp	r2, r3
    6446:	d100      	bne.n	644a <usart_init+0xc2>
    6448:	e0a7      	b.n	659a <usart_init+0x212>
    644a:	d919      	bls.n	6480 <usart_init+0xf8>
    644c:	23c0      	movs	r3, #192	; 0xc0
    644e:	01db      	lsls	r3, r3, #7
    6450:	9a02      	ldr	r2, [sp, #8]
    6452:	429a      	cmp	r2, r3
    6454:	d100      	bne.n	6458 <usart_init+0xd0>
    6456:	e09b      	b.n	6590 <usart_init+0x208>
    6458:	2380      	movs	r3, #128	; 0x80
    645a:	021b      	lsls	r3, r3, #8
    645c:	429a      	cmp	r2, r3
    645e:	d000      	beq.n	6462 <usart_init+0xda>
    6460:	e123      	b.n	66aa <usart_init+0x322>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
    6462:	2303      	movs	r3, #3
    6464:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    6466:	2300      	movs	r3, #0
    6468:	9307      	str	r3, [sp, #28]
    646a:	e012      	b.n	6492 <usart_init+0x10a>
			MCLK->APBDMASK.reg |= mask;
    646c:	4992      	ldr	r1, [pc, #584]	; (66b8 <usart_init+0x330>)
    646e:	6a08      	ldr	r0, [r1, #32]
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
    6470:	3a04      	subs	r2, #4
    6472:	409a      	lsls	r2, r3
    6474:	0013      	movs	r3, r2
    6476:	4303      	orrs	r3, r0
    6478:	620b      	str	r3, [r1, #32]
    647a:	e7b4      	b.n	63e6 <usart_init+0x5e>
		gclk_index   = SERCOM5_GCLK_ID_CORE;
    647c:	2018      	movs	r0, #24
    647e:	e7d7      	b.n	6430 <usart_init+0xa8>
	switch (config->sample_rate) {
    6480:	2380      	movs	r3, #128	; 0x80
    6482:	019b      	lsls	r3, r3, #6
    6484:	429a      	cmp	r2, r3
    6486:	d000      	beq.n	648a <usart_init+0x102>
    6488:	e10f      	b.n	66aa <usart_init+0x322>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    648a:	2310      	movs	r3, #16
    648c:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    648e:	3b0f      	subs	r3, #15
    6490:	9307      	str	r3, [sp, #28]
	ctrla = (uint32_t)config->data_order |
    6492:	6833      	ldr	r3, [r6, #0]
    6494:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    6496:	68f3      	ldr	r3, [r6, #12]
    6498:	469b      	mov	fp, r3
		config->sample_adjustment |
    649a:	6973      	ldr	r3, [r6, #20]
    649c:	9303      	str	r3, [sp, #12]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    649e:	7e33      	ldrb	r3, [r6, #24]
    64a0:	9304      	str	r3, [sp, #16]
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    64a2:	2326      	movs	r3, #38	; 0x26
    64a4:	5cf3      	ldrb	r3, [r6, r3]
    64a6:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
    64a8:	6873      	ldr	r3, [r6, #4]
    64aa:	4699      	mov	r9, r3
	switch (transfer_mode)
    64ac:	2b00      	cmp	r3, #0
    64ae:	d100      	bne.n	64b2 <usart_init+0x12a>
    64b0:	e09b      	b.n	65ea <usart_init+0x262>
    64b2:	2380      	movs	r3, #128	; 0x80
    64b4:	055b      	lsls	r3, r3, #21
    64b6:	4599      	cmp	r9, r3
    64b8:	d104      	bne.n	64c4 <usart_init+0x13c>
			if (!config->use_external_clock) {
    64ba:	2327      	movs	r3, #39	; 0x27
    64bc:	5cf3      	ldrb	r3, [r6, r3]
    64be:	2b00      	cmp	r3, #0
    64c0:	d100      	bne.n	64c4 <usart_init+0x13c>
    64c2:	e080      	b.n	65c6 <usart_init+0x23e>
	if(config->encoding_format_enable) {
    64c4:	7e73      	ldrb	r3, [r6, #25]
    64c6:	2b00      	cmp	r3, #0
    64c8:	d002      	beq.n	64d0 <usart_init+0x148>
		usart_hw->RXPL.reg = config->receive_pulse_length;
    64ca:	7eb3      	ldrb	r3, [r6, #26]
    64cc:	4642      	mov	r2, r8
    64ce:	7393      	strb	r3, [r2, #14]
	usart_hw->BAUD.reg = baud;
    64d0:	230e      	movs	r3, #14
    64d2:	aa06      	add	r2, sp, #24
    64d4:	4694      	mov	ip, r2
    64d6:	4463      	add	r3, ip
    64d8:	881b      	ldrh	r3, [r3, #0]
    64da:	4642      	mov	r2, r8
    64dc:	8193      	strh	r3, [r2, #12]
	ctrla |= transfer_mode;
    64de:	9b05      	ldr	r3, [sp, #20]
    64e0:	465a      	mov	r2, fp
    64e2:	4313      	orrs	r3, r2
    64e4:	9a03      	ldr	r2, [sp, #12]
    64e6:	4313      	orrs	r3, r2
    64e8:	464a      	mov	r2, r9
    64ea:	4313      	orrs	r3, r2
    64ec:	9f02      	ldr	r7, [sp, #8]
    64ee:	431f      	orrs	r7, r3
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    64f0:	9b04      	ldr	r3, [sp, #16]
    64f2:	021b      	lsls	r3, r3, #8
	ctrla |= transfer_mode;
    64f4:	431f      	orrs	r7, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    64f6:	4653      	mov	r3, sl
    64f8:	075b      	lsls	r3, r3, #29
	ctrla |= transfer_mode;
    64fa:	431f      	orrs	r7, r3
	if (config->use_external_clock == false) {
    64fc:	2327      	movs	r3, #39	; 0x27
    64fe:	5cf3      	ldrb	r3, [r6, r3]
    6500:	2b00      	cmp	r3, #0
    6502:	d101      	bne.n	6508 <usart_init+0x180>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
    6504:	3304      	adds	r3, #4
    6506:	431f      	orrs	r7, r3
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    6508:	7e73      	ldrb	r3, [r6, #25]
    650a:	029b      	lsls	r3, r3, #10
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    650c:	7f32      	ldrb	r2, [r6, #28]
    650e:	0252      	lsls	r2, r2, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    6510:	4313      	orrs	r3, r2
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    6512:	7f72      	ldrb	r2, [r6, #29]
    6514:	0212      	lsls	r2, r2, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    6516:	4313      	orrs	r3, r2
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    6518:	2224      	movs	r2, #36	; 0x24
    651a:	5cb2      	ldrb	r2, [r6, r2]
    651c:	0452      	lsls	r2, r2, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    651e:	4313      	orrs	r3, r2
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
    6520:	2225      	movs	r2, #37	; 0x25
    6522:	5cb2      	ldrb	r2, [r6, r2]
    6524:	0412      	lsls	r2, r2, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    6526:	4313      	orrs	r3, r2
	ctrlb |= (uint32_t)config->character_size;
    6528:	7ab1      	ldrb	r1, [r6, #10]
    652a:	7af2      	ldrb	r2, [r6, #11]
    652c:	4311      	orrs	r1, r2
    652e:	4319      	orrs	r1, r3
	if (config->parity != USART_PARITY_NONE) {
    6530:	8933      	ldrh	r3, [r6, #8]
    6532:	2bff      	cmp	r3, #255	; 0xff
    6534:	d07d      	beq.n	6632 <usart_init+0x2aa>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
    6536:	2280      	movs	r2, #128	; 0x80
    6538:	0452      	lsls	r2, r2, #17
    653a:	4317      	orrs	r7, r2
		ctrlb |= config->parity;
    653c:	4319      	orrs	r1, r3
	if (config->run_in_standby || system_is_debugger_present()) {
    653e:	232c      	movs	r3, #44	; 0x2c
    6540:	5cf3      	ldrb	r3, [r6, r3]
    6542:	2b00      	cmp	r3, #0
    6544:	d103      	bne.n	654e <usart_init+0x1c6>
    6546:	4b60      	ldr	r3, [pc, #384]	; (66c8 <usart_init+0x340>)
    6548:	789b      	ldrb	r3, [r3, #2]
    654a:	079b      	lsls	r3, r3, #30
    654c:	d501      	bpl.n	6552 <usart_init+0x1ca>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
    654e:	2380      	movs	r3, #128	; 0x80
    6550:	431f      	orrs	r7, r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    6552:	682a      	ldr	r2, [r5, #0]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    6554:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    6556:	2b00      	cmp	r3, #0
    6558:	d1fc      	bne.n	6554 <usart_init+0x1cc>
	usart_hw->CTRLB.reg = ctrlb;
    655a:	4643      	mov	r3, r8
    655c:	6059      	str	r1, [r3, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
    655e:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    6560:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    6562:	2b00      	cmp	r3, #0
    6564:	d1fc      	bne.n	6560 <usart_init+0x1d8>
	usart_hw->CTRLA.reg = ctrla;
    6566:	4643      	mov	r3, r8
    6568:	601f      	str	r7, [r3, #0]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    656a:	ab0e      	add	r3, sp, #56	; 0x38
    656c:	2280      	movs	r2, #128	; 0x80
    656e:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    6570:	2200      	movs	r2, #0
    6572:	705a      	strb	r2, [r3, #1]
	config->powersave    = false;
    6574:	70da      	strb	r2, [r3, #3]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    6576:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
    6578:	6b33      	ldr	r3, [r6, #48]	; 0x30
    657a:	930a      	str	r3, [sp, #40]	; 0x28
    657c:	6b73      	ldr	r3, [r6, #52]	; 0x34
    657e:	930b      	str	r3, [sp, #44]	; 0x2c
    6580:	6bb3      	ldr	r3, [r6, #56]	; 0x38
    6582:	930c      	str	r3, [sp, #48]	; 0x30
    6584:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    6586:	9302      	str	r3, [sp, #8]
    6588:	930d      	str	r3, [sp, #52]	; 0x34
    658a:	2700      	movs	r7, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
    658c:	ae0a      	add	r6, sp, #40	; 0x28
    658e:	e05e      	b.n	664e <usart_init+0x2c6>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    6590:	2308      	movs	r3, #8
    6592:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    6594:	3b07      	subs	r3, #7
    6596:	9307      	str	r3, [sp, #28]
    6598:	e77b      	b.n	6492 <usart_init+0x10a>
	ctrla = (uint32_t)config->data_order |
    659a:	6833      	ldr	r3, [r6, #0]
    659c:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    659e:	68f3      	ldr	r3, [r6, #12]
    65a0:	469b      	mov	fp, r3
		config->sample_adjustment |
    65a2:	6973      	ldr	r3, [r6, #20]
    65a4:	9303      	str	r3, [sp, #12]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    65a6:	7e33      	ldrb	r3, [r6, #24]
    65a8:	9304      	str	r3, [sp, #16]
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    65aa:	2326      	movs	r3, #38	; 0x26
    65ac:	5cf3      	ldrb	r3, [r6, r3]
    65ae:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
    65b0:	6873      	ldr	r3, [r6, #4]
    65b2:	4699      	mov	r9, r3
	switch (transfer_mode)
    65b4:	2b00      	cmp	r3, #0
    65b6:	d014      	beq.n	65e2 <usart_init+0x25a>
    65b8:	2380      	movs	r3, #128	; 0x80
    65ba:	055b      	lsls	r3, r3, #21
    65bc:	4599      	cmp	r9, r3
    65be:	d100      	bne.n	65c2 <usart_init+0x23a>
    65c0:	e77b      	b.n	64ba <usart_init+0x132>
	enum status_code status_code = STATUS_OK;
    65c2:	2000      	movs	r0, #0
    65c4:	e020      	b.n	6608 <usart_init+0x280>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
    65c6:	6a33      	ldr	r3, [r6, #32]
    65c8:	001f      	movs	r7, r3
    65ca:	b2c0      	uxtb	r0, r0
    65cc:	4b3f      	ldr	r3, [pc, #252]	; (66cc <usart_init+0x344>)
    65ce:	4798      	blx	r3
    65d0:	0001      	movs	r1, r0
    65d2:	220e      	movs	r2, #14
    65d4:	ab06      	add	r3, sp, #24
    65d6:	469c      	mov	ip, r3
    65d8:	4462      	add	r2, ip
    65da:	0038      	movs	r0, r7
    65dc:	4b3c      	ldr	r3, [pc, #240]	; (66d0 <usart_init+0x348>)
    65de:	4798      	blx	r3
    65e0:	e012      	b.n	6608 <usart_init+0x280>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    65e2:	2308      	movs	r3, #8
    65e4:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    65e6:	2300      	movs	r3, #0
    65e8:	9307      	str	r3, [sp, #28]
			if (config->use_external_clock) {
    65ea:	2327      	movs	r3, #39	; 0x27
    65ec:	5cf3      	ldrb	r3, [r6, r3]
    65ee:	2b00      	cmp	r3, #0
    65f0:	d00e      	beq.n	6610 <usart_init+0x288>
				status_code =
    65f2:	9b06      	ldr	r3, [sp, #24]
    65f4:	9300      	str	r3, [sp, #0]
    65f6:	9b07      	ldr	r3, [sp, #28]
    65f8:	220e      	movs	r2, #14
    65fa:	a906      	add	r1, sp, #24
    65fc:	468c      	mov	ip, r1
    65fe:	4462      	add	r2, ip
    6600:	6ab1      	ldr	r1, [r6, #40]	; 0x28
    6602:	6a30      	ldr	r0, [r6, #32]
    6604:	4f33      	ldr	r7, [pc, #204]	; (66d4 <usart_init+0x34c>)
    6606:	47b8      	blx	r7
	if (status_code != STATUS_OK) {
    6608:	2800      	cmp	r0, #0
    660a:	d000      	beq.n	660e <usart_init+0x286>
    660c:	e6d4      	b.n	63b8 <usart_init+0x30>
    660e:	e759      	b.n	64c4 <usart_init+0x13c>
						_sercom_get_async_baud_val(config->baudrate,
    6610:	6a33      	ldr	r3, [r6, #32]
    6612:	001f      	movs	r7, r3
    6614:	b2c0      	uxtb	r0, r0
    6616:	4b2d      	ldr	r3, [pc, #180]	; (66cc <usart_init+0x344>)
    6618:	4798      	blx	r3
    661a:	0001      	movs	r1, r0
				status_code =
    661c:	9b06      	ldr	r3, [sp, #24]
    661e:	9300      	str	r3, [sp, #0]
    6620:	9b07      	ldr	r3, [sp, #28]
    6622:	220e      	movs	r2, #14
    6624:	a806      	add	r0, sp, #24
    6626:	4684      	mov	ip, r0
    6628:	4462      	add	r2, ip
    662a:	0038      	movs	r0, r7
    662c:	4f29      	ldr	r7, [pc, #164]	; (66d4 <usart_init+0x34c>)
    662e:	47b8      	blx	r7
    6630:	e7ea      	b.n	6608 <usart_init+0x280>
		if(config->lin_slave_enable) {
    6632:	7ef3      	ldrb	r3, [r6, #27]
    6634:	2b00      	cmp	r3, #0
    6636:	d082      	beq.n	653e <usart_init+0x1b6>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
    6638:	2380      	movs	r3, #128	; 0x80
    663a:	04db      	lsls	r3, r3, #19
    663c:	431f      	orrs	r7, r3
    663e:	e77e      	b.n	653e <usart_init+0x1b6>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    6640:	0020      	movs	r0, r4
    6642:	4b25      	ldr	r3, [pc, #148]	; (66d8 <usart_init+0x350>)
    6644:	4798      	blx	r3
    6646:	e007      	b.n	6658 <usart_init+0x2d0>
    6648:	3701      	adds	r7, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    664a:	2f04      	cmp	r7, #4
    664c:	d00d      	beq.n	666a <usart_init+0x2e2>
    664e:	b2f9      	uxtb	r1, r7
		uint32_t current_pinmux = pad_pinmuxes[pad];
    6650:	00bb      	lsls	r3, r7, #2
    6652:	5998      	ldr	r0, [r3, r6]
		if (current_pinmux == PINMUX_DEFAULT) {
    6654:	2800      	cmp	r0, #0
    6656:	d0f3      	beq.n	6640 <usart_init+0x2b8>
		if (current_pinmux != PINMUX_UNUSED) {
    6658:	1c43      	adds	r3, r0, #1
    665a:	d0f5      	beq.n	6648 <usart_init+0x2c0>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    665c:	a90e      	add	r1, sp, #56	; 0x38
    665e:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    6660:	0c00      	lsrs	r0, r0, #16
    6662:	b2c0      	uxtb	r0, r0
    6664:	4b1d      	ldr	r3, [pc, #116]	; (66dc <usart_init+0x354>)
    6666:	4798      	blx	r3
    6668:	e7ee      	b.n	6648 <usart_init+0x2c0>
		module->callback[i]            = NULL;
    666a:	2300      	movs	r3, #0
    666c:	60eb      	str	r3, [r5, #12]
    666e:	612b      	str	r3, [r5, #16]
    6670:	616b      	str	r3, [r5, #20]
    6672:	61ab      	str	r3, [r5, #24]
    6674:	61eb      	str	r3, [r5, #28]
    6676:	622b      	str	r3, [r5, #32]
	module->tx_buffer_ptr              = NULL;
    6678:	62ab      	str	r3, [r5, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
    667a:	626b      	str	r3, [r5, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
    667c:	2200      	movs	r2, #0
    667e:	85eb      	strh	r3, [r5, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
    6680:	85ab      	strh	r3, [r5, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
    6682:	3330      	adds	r3, #48	; 0x30
    6684:	54ea      	strb	r2, [r5, r3]
	module->callback_enable_mask       = 0x00;
    6686:	3301      	adds	r3, #1
    6688:	54ea      	strb	r2, [r5, r3]
	module->rx_status                  = STATUS_OK;
    668a:	3301      	adds	r3, #1
    668c:	54ea      	strb	r2, [r5, r3]
	module->tx_status                  = STATUS_OK;
    668e:	3301      	adds	r3, #1
    6690:	54ea      	strb	r2, [r5, r3]
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    6692:	6828      	ldr	r0, [r5, #0]
    6694:	4b07      	ldr	r3, [pc, #28]	; (66b4 <usart_init+0x32c>)
    6696:	4798      	blx	r3
    6698:	0004      	movs	r4, r0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
    669a:	4911      	ldr	r1, [pc, #68]	; (66e0 <usart_init+0x358>)
    669c:	4b11      	ldr	r3, [pc, #68]	; (66e4 <usart_init+0x35c>)
    669e:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    66a0:	00a4      	lsls	r4, r4, #2
    66a2:	4b11      	ldr	r3, [pc, #68]	; (66e8 <usart_init+0x360>)
    66a4:	50e5      	str	r5, [r4, r3]
	return status_code;
    66a6:	2000      	movs	r0, #0
    66a8:	e686      	b.n	63b8 <usart_init+0x30>
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    66aa:	2310      	movs	r3, #16
    66ac:	9306      	str	r3, [sp, #24]
	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    66ae:	2300      	movs	r3, #0
    66b0:	9307      	str	r3, [sp, #28]
    66b2:	e6ee      	b.n	6492 <usart_init+0x10a>
    66b4:	00005eb1 	.word	0x00005eb1
    66b8:	40000400 	.word	0x40000400
    66bc:	000071ad 	.word	0x000071ad
    66c0:	0000713d 	.word	0x0000713d
    66c4:	00005d09 	.word	0x00005d09
    66c8:	41002000 	.word	0x41002000
    66cc:	000071d1 	.word	0x000071d1
    66d0:	00005c4b 	.word	0x00005c4b
    66d4:	00005c75 	.word	0x00005c75
    66d8:	00005d55 	.word	0x00005d55
    66dc:	000072d9 	.word	0x000072d9
    66e0:	000068d1 	.word	0x000068d1
    66e4:	00005eed 	.word	0x00005eed
    66e8:	20002238 	.word	0x20002238

000066ec <usart_write_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    66ec:	79c2      	ldrb	r2, [r0, #7]
		return STATUS_ERR_DENIED;
    66ee:	231c      	movs	r3, #28
	if (!(module->transmitter_enabled)) {
    66f0:	2a00      	cmp	r2, #0
    66f2:	d101      	bne.n	66f8 <usart_write_wait+0xc>
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
		/* Wait until data is sent */
	}

	return STATUS_OK;
}
    66f4:	0018      	movs	r0, r3
    66f6:	4770      	bx	lr
	if (module->remaining_tx_buffer_length > 0) {
    66f8:	8dc2      	ldrh	r2, [r0, #46]	; 0x2e
    66fa:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    66fc:	3b17      	subs	r3, #23
	if (module->remaining_tx_buffer_length > 0) {
    66fe:	2a00      	cmp	r2, #0
    6700:	d1f8      	bne.n	66f4 <usart_write_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
    6702:	6802      	ldr	r2, [r0, #0]
	usart_hw->DATA.reg = tx_data;
    6704:	8511      	strh	r1, [r2, #40]	; 0x28
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
    6706:	2102      	movs	r1, #2
    6708:	7e13      	ldrb	r3, [r2, #24]
    670a:	420b      	tst	r3, r1
    670c:	d0fc      	beq.n	6708 <usart_write_wait+0x1c>
	return STATUS_OK;
    670e:	2300      	movs	r3, #0
    6710:	e7f0      	b.n	66f4 <usart_write_wait+0x8>

00006712 <usart_read_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    6712:	7982      	ldrb	r2, [r0, #6]
		return STATUS_ERR_DENIED;
    6714:	231c      	movs	r3, #28
	if (!(module->receiver_enabled)) {
    6716:	2a00      	cmp	r2, #0
    6718:	d101      	bne.n	671e <usart_read_wait+0xc>

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;

	return STATUS_OK;
}
    671a:	0018      	movs	r0, r3
    671c:	4770      	bx	lr
	if (module->remaining_rx_buffer_length > 0) {
    671e:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
    6720:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    6722:	3b17      	subs	r3, #23
	if (module->remaining_rx_buffer_length > 0) {
    6724:	2a00      	cmp	r2, #0
    6726:	d1f8      	bne.n	671a <usart_read_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
    6728:	6802      	ldr	r2, [r0, #0]
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
    672a:	7e10      	ldrb	r0, [r2, #24]
    672c:	0740      	lsls	r0, r0, #29
    672e:	d5f4      	bpl.n	671a <usart_read_wait+0x8>
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    6730:	8b53      	ldrh	r3, [r2, #26]
    6732:	b2db      	uxtb	r3, r3
	if (error_code) {
    6734:	0698      	lsls	r0, r3, #26
    6736:	d01d      	beq.n	6774 <usart_read_wait+0x62>
		if (error_code & SERCOM_USART_STATUS_FERR) {
    6738:	0798      	lsls	r0, r3, #30
    673a:	d503      	bpl.n	6744 <usart_read_wait+0x32>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    673c:	2302      	movs	r3, #2
    673e:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_FORMAT;
    6740:	3318      	adds	r3, #24
    6742:	e7ea      	b.n	671a <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    6744:	0758      	lsls	r0, r3, #29
    6746:	d503      	bpl.n	6750 <usart_read_wait+0x3e>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    6748:	2304      	movs	r3, #4
    674a:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_OVERFLOW;
    674c:	331a      	adds	r3, #26
    674e:	e7e4      	b.n	671a <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
    6750:	07d8      	lsls	r0, r3, #31
    6752:	d503      	bpl.n	675c <usart_read_wait+0x4a>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    6754:	2301      	movs	r3, #1
    6756:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_DATA;
    6758:	3312      	adds	r3, #18
    675a:	e7de      	b.n	671a <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_ISF) {
    675c:	06d8      	lsls	r0, r3, #27
    675e:	d503      	bpl.n	6768 <usart_read_wait+0x56>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    6760:	2310      	movs	r3, #16
    6762:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PROTOCOL;
    6764:	3332      	adds	r3, #50	; 0x32
    6766:	e7d8      	b.n	671a <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_COLL) {
    6768:	069b      	lsls	r3, r3, #26
    676a:	d503      	bpl.n	6774 <usart_read_wait+0x62>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    676c:	2320      	movs	r3, #32
    676e:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PACKET_COLLISION;
    6770:	3321      	adds	r3, #33	; 0x21
    6772:	e7d2      	b.n	671a <usart_read_wait+0x8>
	*rx_data = usart_hw->DATA.reg;
    6774:	8d13      	ldrh	r3, [r2, #40]	; 0x28
    6776:	800b      	strh	r3, [r1, #0]
	return STATUS_OK;
    6778:	2300      	movs	r3, #0
    677a:	e7ce      	b.n	671a <usart_read_wait+0x8>

0000677c <usart_write_buffer_wait>:
 */
enum status_code usart_write_buffer_wait(
		struct usart_module *const module,
		const uint8_t *tx_data,
		uint16_t length)
{
    677c:	b5f0      	push	{r4, r5, r6, r7, lr}
    677e:	46ce      	mov	lr, r9
    6780:	4647      	mov	r7, r8
    6782:	b580      	push	{r7, lr}
    6784:	b083      	sub	sp, #12
    6786:	0005      	movs	r5, r0
    6788:	9101      	str	r1, [sp, #4]
	Assert(module);
	Assert(module->hw);

	/* Check if the buffer length is valid */
	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    678a:	2017      	movs	r0, #23
	if (length == 0) {
    678c:	2a00      	cmp	r2, #0
    678e:	d104      	bne.n	679a <usart_write_buffer_wait+0x1e>
			return STATUS_ERR_TIMEOUT;
		}
	}

	return STATUS_OK;
}
    6790:	b003      	add	sp, #12
    6792:	bc0c      	pop	{r2, r3}
    6794:	4690      	mov	r8, r2
    6796:	4699      	mov	r9, r3
    6798:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!(module->transmitter_enabled)) {
    679a:	79eb      	ldrb	r3, [r5, #7]
		return STATUS_ERR_DENIED;
    679c:	3005      	adds	r0, #5
	if (!(module->transmitter_enabled)) {
    679e:	2b00      	cmp	r3, #0
    67a0:	d0f6      	beq.n	6790 <usart_write_buffer_wait+0x14>
	SercomUsart *const usart_hw = &(module->hw->USART);
    67a2:	682c      	ldr	r4, [r5, #0]
	while (length--) {
    67a4:	3a01      	subs	r2, #1
    67a6:	b293      	uxth	r3, r2
    67a8:	4699      	mov	r9, r3
    67aa:	2600      	movs	r6, #0
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) {
    67ac:	2701      	movs	r7, #1
	while (length--) {
    67ae:	4b20      	ldr	r3, [pc, #128]	; (6830 <usart_write_buffer_wait+0xb4>)
    67b0:	4698      	mov	r8, r3
    67b2:	e011      	b.n	67d8 <usart_write_buffer_wait+0x5c>
		uint16_t data_to_send = tx_data[tx_pos++];
    67b4:	1c73      	adds	r3, r6, #1
    67b6:	b29b      	uxth	r3, r3
    67b8:	9a01      	ldr	r2, [sp, #4]
    67ba:	5d91      	ldrb	r1, [r2, r6]
		if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    67bc:	796a      	ldrb	r2, [r5, #5]
    67be:	2a01      	cmp	r2, #1
    67c0:	d017      	beq.n	67f2 <usart_write_buffer_wait+0x76>
		uint16_t data_to_send = tx_data[tx_pos++];
    67c2:	b289      	uxth	r1, r1
    67c4:	001e      	movs	r6, r3
		usart_write_wait(module, data_to_send);
    67c6:	0028      	movs	r0, r5
    67c8:	4b1a      	ldr	r3, [pc, #104]	; (6834 <usart_write_buffer_wait+0xb8>)
    67ca:	4798      	blx	r3
	while (length--) {
    67cc:	464b      	mov	r3, r9
    67ce:	3b01      	subs	r3, #1
    67d0:	b29b      	uxth	r3, r3
    67d2:	4699      	mov	r9, r3
    67d4:	4543      	cmp	r3, r8
    67d6:	d013      	beq.n	6800 <usart_write_buffer_wait+0x84>
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) {
    67d8:	7e23      	ldrb	r3, [r4, #24]
    67da:	423b      	tst	r3, r7
    67dc:	d1ea      	bne.n	67b4 <usart_write_buffer_wait+0x38>
    67de:	4b14      	ldr	r3, [pc, #80]	; (6830 <usart_write_buffer_wait+0xb4>)
    67e0:	7e22      	ldrb	r2, [r4, #24]
    67e2:	423a      	tst	r2, r7
    67e4:	d1e6      	bne.n	67b4 <usart_write_buffer_wait+0x38>
			} else if (i == USART_TIMEOUT) {
    67e6:	2b01      	cmp	r3, #1
    67e8:	d019      	beq.n	681e <usart_write_buffer_wait+0xa2>
    67ea:	3b01      	subs	r3, #1
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
    67ec:	2b00      	cmp	r3, #0
    67ee:	d1f7      	bne.n	67e0 <usart_write_buffer_wait+0x64>
    67f0:	e7e0      	b.n	67b4 <usart_write_buffer_wait+0x38>
			data_to_send |= (tx_data[tx_pos++] << 8);
    67f2:	3602      	adds	r6, #2
    67f4:	b2b6      	uxth	r6, r6
    67f6:	9a01      	ldr	r2, [sp, #4]
    67f8:	5cd3      	ldrb	r3, [r2, r3]
    67fa:	021b      	lsls	r3, r3, #8
    67fc:	4319      	orrs	r1, r3
    67fe:	e7e2      	b.n	67c6 <usart_write_buffer_wait+0x4a>
		if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) {
    6800:	7e23      	ldrb	r3, [r4, #24]
    6802:	079b      	lsls	r3, r3, #30
    6804:	d40d      	bmi.n	6822 <usart_write_buffer_wait+0xa6>
    6806:	4b0a      	ldr	r3, [pc, #40]	; (6830 <usart_write_buffer_wait+0xb4>)
    6808:	2102      	movs	r1, #2
    680a:	7e22      	ldrb	r2, [r4, #24]
    680c:	420a      	tst	r2, r1
    680e:	d10a      	bne.n	6826 <usart_write_buffer_wait+0xaa>
		} else if (i == USART_TIMEOUT) {
    6810:	2b01      	cmp	r3, #1
    6812:	d00a      	beq.n	682a <usart_write_buffer_wait+0xae>
    6814:	3b01      	subs	r3, #1
	for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
    6816:	2b00      	cmp	r3, #0
    6818:	d1f7      	bne.n	680a <usart_write_buffer_wait+0x8e>
	return STATUS_OK;
    681a:	2000      	movs	r0, #0
    681c:	e7b8      	b.n	6790 <usart_write_buffer_wait+0x14>
				return STATUS_ERR_TIMEOUT;
    681e:	2012      	movs	r0, #18
    6820:	e7b6      	b.n	6790 <usart_write_buffer_wait+0x14>
	return STATUS_OK;
    6822:	2000      	movs	r0, #0
    6824:	e7b4      	b.n	6790 <usart_write_buffer_wait+0x14>
    6826:	2000      	movs	r0, #0
    6828:	e7b2      	b.n	6790 <usart_write_buffer_wait+0x14>
			return STATUS_ERR_TIMEOUT;
    682a:	2012      	movs	r0, #18
    682c:	e7b0      	b.n	6790 <usart_write_buffer_wait+0x14>
    682e:	46c0      	nop			; (mov r8, r8)
    6830:	0000ffff 	.word	0x0000ffff
    6834:	000066ed 	.word	0x000066ed

00006838 <usart_read_buffer_wait>:
 */
enum status_code usart_read_buffer_wait(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
    6838:	b5f0      	push	{r4, r5, r6, r7, lr}
    683a:	46d6      	mov	lr, sl
    683c:	b500      	push	{lr}
    683e:	b084      	sub	sp, #16
    6840:	0004      	movs	r4, r0
    6842:	9101      	str	r1, [sp, #4]
	Assert(module);
	Assert(module->hw);

	/* Check if the buffer length is valid */
	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    6844:	2017      	movs	r0, #23
	if (length == 0) {
    6846:	2a00      	cmp	r2, #0
    6848:	d103      	bne.n	6852 <usart_read_buffer_wait+0x1a>
			rx_data[rx_pos++] = (received_data >> 8);
		}
	}

	return STATUS_OK;
}
    684a:	b004      	add	sp, #16
    684c:	bc04      	pop	{r2}
    684e:	4692      	mov	sl, r2
    6850:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!(module->receiver_enabled)) {
    6852:	79a3      	ldrb	r3, [r4, #6]
		return STATUS_ERR_DENIED;
    6854:	3005      	adds	r0, #5
	if (!(module->receiver_enabled)) {
    6856:	2b00      	cmp	r3, #0
    6858:	d0f7      	beq.n	684a <usart_read_buffer_wait+0x12>
	SercomUsart *const usart_hw = &(module->hw->USART);
    685a:	6826      	ldr	r6, [r4, #0]
	while (length--) {
    685c:	3a01      	subs	r2, #1
    685e:	b293      	uxth	r3, r2
    6860:	469a      	mov	sl, r3
    6862:	2500      	movs	r5, #0
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) {
    6864:	2704      	movs	r7, #4
    6866:	e019      	b.n	689c <usart_read_buffer_wait+0x64>
		uint16_t received_data = 0;
    6868:	2300      	movs	r3, #0
    686a:	aa02      	add	r2, sp, #8
    686c:	80d3      	strh	r3, [r2, #6]
		retval = usart_read_wait(module, &received_data);
    686e:	1d91      	adds	r1, r2, #6
    6870:	0020      	movs	r0, r4
    6872:	4b15      	ldr	r3, [pc, #84]	; (68c8 <usart_read_buffer_wait+0x90>)
    6874:	4798      	blx	r3
		if (retval != STATUS_OK) {
    6876:	2800      	cmp	r0, #0
    6878:	d1e7      	bne.n	684a <usart_read_buffer_wait+0x12>
		rx_data[rx_pos++] = received_data;
    687a:	1c69      	adds	r1, r5, #1
    687c:	b289      	uxth	r1, r1
    687e:	ab02      	add	r3, sp, #8
    6880:	88db      	ldrh	r3, [r3, #6]
    6882:	9a01      	ldr	r2, [sp, #4]
    6884:	5553      	strb	r3, [r2, r5]
		if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    6886:	7962      	ldrb	r2, [r4, #5]
    6888:	2a01      	cmp	r2, #1
    688a:	d014      	beq.n	68b6 <usart_read_buffer_wait+0x7e>
		rx_data[rx_pos++] = received_data;
    688c:	000d      	movs	r5, r1
	while (length--) {
    688e:	4653      	mov	r3, sl
    6890:	3b01      	subs	r3, #1
    6892:	b29b      	uxth	r3, r3
    6894:	469a      	mov	sl, r3
    6896:	4b0d      	ldr	r3, [pc, #52]	; (68cc <usart_read_buffer_wait+0x94>)
    6898:	459a      	cmp	sl, r3
    689a:	d0d6      	beq.n	684a <usart_read_buffer_wait+0x12>
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) {
    689c:	7e33      	ldrb	r3, [r6, #24]
    689e:	423b      	tst	r3, r7
    68a0:	d1e2      	bne.n	6868 <usart_read_buffer_wait+0x30>
    68a2:	4b0a      	ldr	r3, [pc, #40]	; (68cc <usart_read_buffer_wait+0x94>)
    68a4:	7e32      	ldrb	r2, [r6, #24]
    68a6:	423a      	tst	r2, r7
    68a8:	d1de      	bne.n	6868 <usart_read_buffer_wait+0x30>
			} else if (i == USART_TIMEOUT) {
    68aa:	2b01      	cmp	r3, #1
    68ac:	d009      	beq.n	68c2 <usart_read_buffer_wait+0x8a>
    68ae:	3b01      	subs	r3, #1
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
    68b0:	2b00      	cmp	r3, #0
    68b2:	d1f7      	bne.n	68a4 <usart_read_buffer_wait+0x6c>
    68b4:	e7d8      	b.n	6868 <usart_read_buffer_wait+0x30>
			rx_data[rx_pos++] = (received_data >> 8);
    68b6:	3502      	adds	r5, #2
    68b8:	b2ad      	uxth	r5, r5
    68ba:	0a1b      	lsrs	r3, r3, #8
    68bc:	9a01      	ldr	r2, [sp, #4]
    68be:	5453      	strb	r3, [r2, r1]
    68c0:	e7e5      	b.n	688e <usart_read_buffer_wait+0x56>
				return STATUS_ERR_TIMEOUT;
    68c2:	2012      	movs	r0, #18
    68c4:	e7c1      	b.n	684a <usart_read_buffer_wait+0x12>
    68c6:	46c0      	nop			; (mov r8, r8)
    68c8:	00006713 	.word	0x00006713
    68cc:	0000ffff 	.word	0x0000ffff

000068d0 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
    68d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
    68d2:	0080      	lsls	r0, r0, #2
    68d4:	4b62      	ldr	r3, [pc, #392]	; (6a60 <_usart_interrupt_handler+0x190>)
    68d6:	58c5      	ldr	r5, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
    68d8:	682c      	ldr	r4, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    68da:	69e3      	ldr	r3, [r4, #28]
	while (usart_is_syncing(module)) {
    68dc:	2b00      	cmp	r3, #0
    68de:	d1fc      	bne.n	68da <_usart_interrupt_handler+0xa>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    68e0:	7e23      	ldrb	r3, [r4, #24]
	interrupt_status &= usart_hw->INTENSET.reg;
    68e2:	7da6      	ldrb	r6, [r4, #22]
    68e4:	401e      	ands	r6, r3
	callback_status = module->callback_reg_mask &
    68e6:	2330      	movs	r3, #48	; 0x30
    68e8:	5ceb      	ldrb	r3, [r5, r3]
    68ea:	2231      	movs	r2, #49	; 0x31
    68ec:	5caf      	ldrb	r7, [r5, r2]
    68ee:	401f      	ands	r7, r3
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    68f0:	07f3      	lsls	r3, r6, #31
    68f2:	d522      	bpl.n	693a <_usart_interrupt_handler+0x6a>
		if (module->remaining_tx_buffer_length) {
    68f4:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    68f6:	b29b      	uxth	r3, r3
    68f8:	2b00      	cmp	r3, #0
    68fa:	d01c      	beq.n	6936 <_usart_interrupt_handler+0x66>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    68fc:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    68fe:	7813      	ldrb	r3, [r2, #0]
    6900:	b2db      	uxtb	r3, r3
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
    6902:	1c51      	adds	r1, r2, #1
    6904:	62a9      	str	r1, [r5, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    6906:	7969      	ldrb	r1, [r5, #5]
    6908:	2901      	cmp	r1, #1
    690a:	d00e      	beq.n	692a <_usart_interrupt_handler+0x5a>
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    690c:	b29b      	uxth	r3, r3
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    690e:	05db      	lsls	r3, r3, #23
    6910:	0ddb      	lsrs	r3, r3, #23
    6912:	8523      	strh	r3, [r4, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
    6914:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    6916:	3b01      	subs	r3, #1
    6918:	b29b      	uxth	r3, r3
    691a:	85eb      	strh	r3, [r5, #46]	; 0x2e
    691c:	2b00      	cmp	r3, #0
    691e:	d10c      	bne.n	693a <_usart_interrupt_handler+0x6a>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    6920:	3301      	adds	r3, #1
    6922:	7523      	strb	r3, [r4, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    6924:	3301      	adds	r3, #1
    6926:	75a3      	strb	r3, [r4, #22]
    6928:	e007      	b.n	693a <_usart_interrupt_handler+0x6a>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    692a:	7851      	ldrb	r1, [r2, #1]
    692c:	0209      	lsls	r1, r1, #8
    692e:	430b      	orrs	r3, r1
				(module->tx_buffer_ptr)++;
    6930:	3202      	adds	r2, #2
    6932:	62aa      	str	r2, [r5, #40]	; 0x28
    6934:	e7eb      	b.n	690e <_usart_interrupt_handler+0x3e>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    6936:	2301      	movs	r3, #1
    6938:	7523      	strb	r3, [r4, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    693a:	07b3      	lsls	r3, r6, #30
    693c:	d506      	bpl.n	694c <_usart_interrupt_handler+0x7c>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    693e:	2302      	movs	r3, #2
    6940:	7523      	strb	r3, [r4, #20]
		module->tx_status = STATUS_OK;
    6942:	2200      	movs	r2, #0
    6944:	3331      	adds	r3, #49	; 0x31
    6946:	54ea      	strb	r2, [r5, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    6948:	07fb      	lsls	r3, r7, #31
    694a:	d41a      	bmi.n	6982 <_usart_interrupt_handler+0xb2>
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    694c:	0773      	lsls	r3, r6, #29
    694e:	d565      	bpl.n	6a1c <_usart_interrupt_handler+0x14c>

		if (module->remaining_rx_buffer_length) {
    6950:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    6952:	b29b      	uxth	r3, r3
    6954:	2b00      	cmp	r3, #0
    6956:	d05f      	beq.n	6a18 <_usart_interrupt_handler+0x148>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    6958:	8b63      	ldrh	r3, [r4, #26]
    695a:	b2db      	uxtb	r3, r3
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
    695c:	071a      	lsls	r2, r3, #28
    695e:	d414      	bmi.n	698a <_usart_interrupt_handler+0xba>
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    6960:	223f      	movs	r2, #63	; 0x3f
    6962:	4013      	ands	r3, r2
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
    6964:	2b00      	cmp	r3, #0
    6966:	d034      	beq.n	69d2 <_usart_interrupt_handler+0x102>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    6968:	079a      	lsls	r2, r3, #30
    696a:	d511      	bpl.n	6990 <_usart_interrupt_handler+0xc0>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    696c:	221a      	movs	r2, #26
    696e:	2332      	movs	r3, #50	; 0x32
    6970:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    6972:	3b30      	subs	r3, #48	; 0x30
    6974:	8363      	strh	r3, [r4, #26]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
    6976:	077b      	lsls	r3, r7, #29
    6978:	d550      	bpl.n	6a1c <_usart_interrupt_handler+0x14c>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    697a:	0028      	movs	r0, r5
    697c:	696b      	ldr	r3, [r5, #20]
    697e:	4798      	blx	r3
    6980:	e04c      	b.n	6a1c <_usart_interrupt_handler+0x14c>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    6982:	0028      	movs	r0, r5
    6984:	68eb      	ldr	r3, [r5, #12]
    6986:	4798      	blx	r3
    6988:	e7e0      	b.n	694c <_usart_interrupt_handler+0x7c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
    698a:	2237      	movs	r2, #55	; 0x37
    698c:	4013      	ands	r3, r2
    698e:	e7e9      	b.n	6964 <_usart_interrupt_handler+0x94>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    6990:	075a      	lsls	r2, r3, #29
    6992:	d505      	bpl.n	69a0 <_usart_interrupt_handler+0xd0>
					module->rx_status = STATUS_ERR_OVERFLOW;
    6994:	221e      	movs	r2, #30
    6996:	2332      	movs	r3, #50	; 0x32
    6998:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    699a:	3b2e      	subs	r3, #46	; 0x2e
    699c:	8363      	strh	r3, [r4, #26]
    699e:	e7ea      	b.n	6976 <_usart_interrupt_handler+0xa6>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    69a0:	07da      	lsls	r2, r3, #31
    69a2:	d505      	bpl.n	69b0 <_usart_interrupt_handler+0xe0>
					module->rx_status = STATUS_ERR_BAD_DATA;
    69a4:	2213      	movs	r2, #19
    69a6:	2332      	movs	r3, #50	; 0x32
    69a8:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    69aa:	3b31      	subs	r3, #49	; 0x31
    69ac:	8363      	strh	r3, [r4, #26]
    69ae:	e7e2      	b.n	6976 <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_ISF) {
    69b0:	06da      	lsls	r2, r3, #27
    69b2:	d505      	bpl.n	69c0 <_usart_interrupt_handler+0xf0>
					module->rx_status = STATUS_ERR_PROTOCOL;
    69b4:	2242      	movs	r2, #66	; 0x42
    69b6:	2332      	movs	r3, #50	; 0x32
    69b8:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    69ba:	3b22      	subs	r3, #34	; 0x22
    69bc:	8363      	strh	r3, [r4, #26]
    69be:	e7da      	b.n	6976 <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_COLL) {
    69c0:	2220      	movs	r2, #32
    69c2:	421a      	tst	r2, r3
    69c4:	d0d7      	beq.n	6976 <_usart_interrupt_handler+0xa6>
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
    69c6:	3221      	adds	r2, #33	; 0x21
    69c8:	2332      	movs	r3, #50	; 0x32
    69ca:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    69cc:	3b12      	subs	r3, #18
    69ce:	8363      	strh	r3, [r4, #26]
    69d0:	e7d1      	b.n	6976 <_usart_interrupt_handler+0xa6>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    69d2:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    69d4:	05db      	lsls	r3, r3, #23
    69d6:	0ddb      	lsrs	r3, r3, #23

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
    69d8:	b2da      	uxtb	r2, r3
    69da:	6a69      	ldr	r1, [r5, #36]	; 0x24
    69dc:	700a      	strb	r2, [r1, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
    69de:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    69e0:	1c51      	adds	r1, r2, #1
    69e2:	6269      	str	r1, [r5, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    69e4:	7969      	ldrb	r1, [r5, #5]
    69e6:	2901      	cmp	r1, #1
    69e8:	d010      	beq.n	6a0c <_usart_interrupt_handler+0x13c>
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
    69ea:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    69ec:	3b01      	subs	r3, #1
    69ee:	b29b      	uxth	r3, r3
    69f0:	85ab      	strh	r3, [r5, #44]	; 0x2c
    69f2:	2b00      	cmp	r3, #0
    69f4:	d112      	bne.n	6a1c <_usart_interrupt_handler+0x14c>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    69f6:	3304      	adds	r3, #4
    69f8:	7523      	strb	r3, [r4, #20]
					module->rx_status = STATUS_OK;
    69fa:	2200      	movs	r2, #0
    69fc:	332e      	adds	r3, #46	; 0x2e
    69fe:	54ea      	strb	r2, [r5, r3]

					/* Run callback if registered and enabled */
					if (callback_status
    6a00:	07bb      	lsls	r3, r7, #30
    6a02:	d50b      	bpl.n	6a1c <_usart_interrupt_handler+0x14c>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    6a04:	0028      	movs	r0, r5
    6a06:	692b      	ldr	r3, [r5, #16]
    6a08:	4798      	blx	r3
    6a0a:	e007      	b.n	6a1c <_usart_interrupt_handler+0x14c>
					*(module->rx_buffer_ptr) = (received_data >> 8);
    6a0c:	0a1b      	lsrs	r3, r3, #8
    6a0e:	7053      	strb	r3, [r2, #1]
					module->rx_buffer_ptr += 1;
    6a10:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    6a12:	3301      	adds	r3, #1
    6a14:	626b      	str	r3, [r5, #36]	; 0x24
    6a16:	e7e8      	b.n	69ea <_usart_interrupt_handler+0x11a>
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    6a18:	2304      	movs	r3, #4
    6a1a:	7523      	strb	r3, [r4, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    6a1c:	06f3      	lsls	r3, r6, #27
    6a1e:	d504      	bpl.n	6a2a <_usart_interrupt_handler+0x15a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    6a20:	2310      	movs	r3, #16
    6a22:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    6a24:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    6a26:	06fb      	lsls	r3, r7, #27
    6a28:	d40e      	bmi.n	6a48 <_usart_interrupt_handler+0x178>
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    6a2a:	06b3      	lsls	r3, r6, #26
    6a2c:	d504      	bpl.n	6a38 <_usart_interrupt_handler+0x168>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    6a2e:	2320      	movs	r3, #32
    6a30:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    6a32:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    6a34:	073b      	lsls	r3, r7, #28
    6a36:	d40b      	bmi.n	6a50 <_usart_interrupt_handler+0x180>
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    6a38:	0733      	lsls	r3, r6, #28
    6a3a:	d504      	bpl.n	6a46 <_usart_interrupt_handler+0x176>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    6a3c:	2308      	movs	r3, #8
    6a3e:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    6a40:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    6a42:	06bb      	lsls	r3, r7, #26
    6a44:	d408      	bmi.n	6a58 <_usart_interrupt_handler+0x188>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
		}
	}
#endif
}
    6a46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    6a48:	0028      	movs	r0, r5
    6a4a:	69eb      	ldr	r3, [r5, #28]
    6a4c:	4798      	blx	r3
    6a4e:	e7ec      	b.n	6a2a <_usart_interrupt_handler+0x15a>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    6a50:	0028      	movs	r0, r5
    6a52:	69ab      	ldr	r3, [r5, #24]
    6a54:	4798      	blx	r3
    6a56:	e7ef      	b.n	6a38 <_usart_interrupt_handler+0x168>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    6a58:	6a2b      	ldr	r3, [r5, #32]
    6a5a:	0028      	movs	r0, r5
    6a5c:	4798      	blx	r3
}
    6a5e:	e7f2      	b.n	6a46 <_usart_interrupt_handler+0x176>
    6a60:	20002238 	.word	0x20002238

00006a64 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    6a64:	b510      	push	{r4, lr}
	switch (clock_source) {
    6a66:	2808      	cmp	r0, #8
    6a68:	d803      	bhi.n	6a72 <system_clock_source_get_hz+0xe>
    6a6a:	0080      	lsls	r0, r0, #2
    6a6c:	4b1c      	ldr	r3, [pc, #112]	; (6ae0 <system_clock_source_get_hz+0x7c>)
    6a6e:	581b      	ldr	r3, [r3, r0]
    6a70:	469f      	mov	pc, r3
		}

		return _system_clock_inst.dpll.frequency;

	default:
		return 0;
    6a72:	2000      	movs	r0, #0
    6a74:	e032      	b.n	6adc <system_clock_source_get_hz+0x78>
		return _system_clock_inst.xosc.frequency;
    6a76:	4b1b      	ldr	r3, [pc, #108]	; (6ae4 <system_clock_source_get_hz+0x80>)
    6a78:	6918      	ldr	r0, [r3, #16]
    6a7a:	e02f      	b.n	6adc <system_clock_source_get_hz+0x78>
		return (OSCCTRL->OSC16MCTRL.bit.FSEL+1)*4000000UL;
    6a7c:	4b1a      	ldr	r3, [pc, #104]	; (6ae8 <system_clock_source_get_hz+0x84>)
    6a7e:	7d18      	ldrb	r0, [r3, #20]
    6a80:	0700      	lsls	r0, r0, #28
    6a82:	0f80      	lsrs	r0, r0, #30
    6a84:	1c43      	adds	r3, r0, #1
    6a86:	4819      	ldr	r0, [pc, #100]	; (6aec <system_clock_source_get_hz+0x88>)
    6a88:	4358      	muls	r0, r3
    6a8a:	e027      	b.n	6adc <system_clock_source_get_hz+0x78>
		return _system_clock_inst.xosc32k.frequency;
    6a8c:	4b15      	ldr	r3, [pc, #84]	; (6ae4 <system_clock_source_get_hz+0x80>)
    6a8e:	6958      	ldr	r0, [r3, #20]
    6a90:	e024      	b.n	6adc <system_clock_source_get_hz+0x78>
		if (!(_system_clock_inst.dfll.control & OSCCTRL_DFLLCTRL_ENABLE))
    6a92:	4b14      	ldr	r3, [pc, #80]	; (6ae4 <system_clock_source_get_hz+0x80>)
    6a94:	681b      	ldr	r3, [r3, #0]
			return 0;
    6a96:	2000      	movs	r0, #0
		if (!(_system_clock_inst.dfll.control & OSCCTRL_DFLLCTRL_ENABLE))
    6a98:	079b      	lsls	r3, r3, #30
    6a9a:	d51f      	bpl.n	6adc <system_clock_source_get_hz+0x78>
	while (!(OSCCTRL->STATUS.reg & OSCCTRL_STATUS_DFLLRDY)) {
    6a9c:	4912      	ldr	r1, [pc, #72]	; (6ae8 <system_clock_source_get_hz+0x84>)
    6a9e:	2280      	movs	r2, #128	; 0x80
    6aa0:	0052      	lsls	r2, r2, #1
    6aa2:	68cb      	ldr	r3, [r1, #12]
    6aa4:	4213      	tst	r3, r2
    6aa6:	d0fc      	beq.n	6aa2 <system_clock_source_get_hz+0x3e>
		if (_system_clock_inst.dfll.control & OSCCTRL_DFLLCTRL_MODE) {
    6aa8:	4b0e      	ldr	r3, [pc, #56]	; (6ae4 <system_clock_source_get_hz+0x80>)
    6aaa:	681b      	ldr	r3, [r3, #0]
    6aac:	075b      	lsls	r3, r3, #29
    6aae:	d401      	bmi.n	6ab4 <system_clock_source_get_hz+0x50>
		return 48000000UL;
    6ab0:	480f      	ldr	r0, [pc, #60]	; (6af0 <system_clock_source_get_hz+0x8c>)
    6ab2:	e013      	b.n	6adc <system_clock_source_get_hz+0x78>
			return system_gclk_chan_get_hz(OSCCTRL_GCLK_ID_DFLL48) *
    6ab4:	2000      	movs	r0, #0
    6ab6:	4b0f      	ldr	r3, [pc, #60]	; (6af4 <system_clock_source_get_hz+0x90>)
    6ab8:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    6aba:	4b0a      	ldr	r3, [pc, #40]	; (6ae4 <system_clock_source_get_hz+0x80>)
    6abc:	689b      	ldr	r3, [r3, #8]
    6abe:	041b      	lsls	r3, r3, #16
    6ac0:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(OSCCTRL_GCLK_ID_DFLL48) *
    6ac2:	4358      	muls	r0, r3
    6ac4:	e00a      	b.n	6adc <system_clock_source_get_hz+0x78>
		if (!(OSCCTRL->DPLLCTRLA.reg & OSCCTRL_DPLLCTRLA_ENABLE)) {
    6ac6:	2328      	movs	r3, #40	; 0x28
    6ac8:	4a07      	ldr	r2, [pc, #28]	; (6ae8 <system_clock_source_get_hz+0x84>)
    6aca:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
    6acc:	2000      	movs	r0, #0
		if (!(OSCCTRL->DPLLCTRLA.reg & OSCCTRL_DPLLCTRLA_ENABLE)) {
    6ace:	079b      	lsls	r3, r3, #30
    6ad0:	d504      	bpl.n	6adc <system_clock_source_get_hz+0x78>
		return _system_clock_inst.dpll.frequency;
    6ad2:	4b04      	ldr	r3, [pc, #16]	; (6ae4 <system_clock_source_get_hz+0x80>)
    6ad4:	68d8      	ldr	r0, [r3, #12]
    6ad6:	e001      	b.n	6adc <system_clock_source_get_hz+0x78>
		return 32768UL;
    6ad8:	2080      	movs	r0, #128	; 0x80
    6ada:	0200      	lsls	r0, r0, #8
	}
}
    6adc:	bd10      	pop	{r4, pc}
    6ade:	46c0      	nop			; (mov r8, r8)
    6ae0:	0001fb14 	.word	0x0001fb14
    6ae4:	20000b84 	.word	0x20000b84
    6ae8:	40000c00 	.word	0x40000c00
    6aec:	003d0900 	.word	0x003d0900
    6af0:	02dc6c00 	.word	0x02dc6c00
    6af4:	000071d1 	.word	0x000071d1

00006af8 <system_clock_source_osc16m_set_config>:
 *
 * \param[in] config  OSC16M configuration structure containing the new config
 */
void system_clock_source_osc16m_set_config(
		struct system_clock_source_osc16m_config *const config)
{
    6af8:	b570      	push	{r4, r5, r6, lr}
	OSCCTRL_OSC16MCTRL_Type temp = OSCCTRL->OSC16MCTRL;
    6afa:	4c0b      	ldr	r4, [pc, #44]	; (6b28 <system_clock_source_osc16m_set_config+0x30>)
    6afc:	7d23      	ldrb	r3, [r4, #20]

	/* Use temporary struct to reduce register access */
	temp.bit.FSEL    = config->fsel;
	temp.bit.ONDEMAND = config->on_demand;
    6afe:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;
    6b00:	7846      	ldrb	r6, [r0, #1]

	OSCCTRL->OSC16MCTRL = temp;
    6b02:	7802      	ldrb	r2, [r0, #0]
    6b04:	2103      	movs	r1, #3
    6b06:	4011      	ands	r1, r2
    6b08:	0089      	lsls	r1, r1, #2
    6b0a:	220c      	movs	r2, #12
    6b0c:	4393      	bics	r3, r2
    6b0e:	430b      	orrs	r3, r1
    6b10:	3a0b      	subs	r2, #11
    6b12:	4032      	ands	r2, r6
    6b14:	0192      	lsls	r2, r2, #6
    6b16:	2140      	movs	r1, #64	; 0x40
    6b18:	438b      	bics	r3, r1
    6b1a:	4313      	orrs	r3, r2
    6b1c:	01ed      	lsls	r5, r5, #7
    6b1e:	227f      	movs	r2, #127	; 0x7f
    6b20:	4013      	ands	r3, r2
    6b22:	432b      	orrs	r3, r5
    6b24:	7523      	strb	r3, [r4, #20]
}
    6b26:	bd70      	pop	{r4, r5, r6, pc}
    6b28:	40000c00 	.word	0x40000c00

00006b2c <system_clock_source_xosc32k_set_config>:
 *
 * \param[in] config  XOSC32K configuration structure containing the new config
 */
void system_clock_source_xosc32k_set_config(
		struct system_clock_source_xosc32k_config *const config)
{
    6b2c:	b5f0      	push	{r4, r5, r6, r7, lr}
    6b2e:	46d6      	mov	lr, sl
    6b30:	464f      	mov	r7, r9
    6b32:	4646      	mov	r6, r8
    6b34:	b5c0      	push	{r6, r7, lr}
	OSC32KCTRL_XOSC32K_Type temp = OSC32KCTRL->XOSC32K;
    6b36:	4b20      	ldr	r3, [pc, #128]	; (6bb8 <system_clock_source_xosc32k_set_config+0x8c>)
    6b38:	469a      	mov	sl, r3
    6b3a:	695b      	ldr	r3, [r3, #20]

	temp.bit.STARTUP = config->startup_time;
    6b3c:	7845      	ldrb	r5, [r0, #1]

	if (config->external_clock == SYSTEM_CLOCK_EXTERNAL_CRYSTAL) {
    6b3e:	7801      	ldrb	r1, [r0, #0]
    6b40:	424c      	negs	r4, r1
    6b42:	414c      	adcs	r4, r1
    6b44:	46a1      	mov	r9, r4
		temp.bit.XTALEN = 1;
	} else {
		temp.bit.XTALEN = 0;
	}

	temp.bit.EN1K = config->enable_1khz_output;
    6b46:	7881      	ldrb	r1, [r0, #2]
    6b48:	468c      	mov	ip, r1
	temp.bit.EN32K = config->enable_32khz_output;
    6b4a:	78c1      	ldrb	r1, [r0, #3]
    6b4c:	4688      	mov	r8, r1

	temp.bit.ONDEMAND = config->on_demand;
    6b4e:	7a46      	ldrb	r6, [r0, #9]
	temp.bit.RUNSTDBY = config->run_in_standby;
    6b50:	7a07      	ldrb	r7, [r0, #8]
	temp.bit.WRTLOCK  = config->write_once;
    6b52:	7a84      	ldrb	r4, [r0, #10]

	/* Cache the new frequency in case the user needs to check the current
	 * operating frequency later */
	_system_clock_inst.xosc32k.frequency = config->frequency;
    6b54:	6840      	ldr	r0, [r0, #4]
    6b56:	4919      	ldr	r1, [pc, #100]	; (6bbc <system_clock_source_xosc32k_set_config+0x90>)
    6b58:	6148      	str	r0, [r1, #20]

	OSC32KCTRL->XOSC32K = temp;
    6b5a:	2101      	movs	r1, #1
    6b5c:	4648      	mov	r0, r9
    6b5e:	0080      	lsls	r0, r0, #2
    6b60:	2204      	movs	r2, #4
    6b62:	4393      	bics	r3, r2
    6b64:	4303      	orrs	r3, r0
    6b66:	4640      	mov	r0, r8
    6b68:	4008      	ands	r0, r1
    6b6a:	00c0      	lsls	r0, r0, #3
    6b6c:	3204      	adds	r2, #4
    6b6e:	4393      	bics	r3, r2
    6b70:	4303      	orrs	r3, r0
    6b72:	4660      	mov	r0, ip
    6b74:	4008      	ands	r0, r1
    6b76:	0100      	lsls	r0, r0, #4
    6b78:	3208      	adds	r2, #8
    6b7a:	4393      	bics	r3, r2
    6b7c:	4303      	orrs	r3, r0
    6b7e:	400f      	ands	r7, r1
    6b80:	01bf      	lsls	r7, r7, #6
    6b82:	2040      	movs	r0, #64	; 0x40
    6b84:	4383      	bics	r3, r0
    6b86:	433b      	orrs	r3, r7
    6b88:	400e      	ands	r6, r1
    6b8a:	01f6      	lsls	r6, r6, #7
    6b8c:	3040      	adds	r0, #64	; 0x40
    6b8e:	4383      	bics	r3, r0
    6b90:	4333      	orrs	r3, r6
    6b92:	3879      	subs	r0, #121	; 0x79
    6b94:	4005      	ands	r5, r0
    6b96:	022d      	lsls	r5, r5, #8
    6b98:	4809      	ldr	r0, [pc, #36]	; (6bc0 <system_clock_source_xosc32k_set_config+0x94>)
    6b9a:	4003      	ands	r3, r0
    6b9c:	432b      	orrs	r3, r5
    6b9e:	4021      	ands	r1, r4
    6ba0:	0309      	lsls	r1, r1, #12
    6ba2:	4808      	ldr	r0, [pc, #32]	; (6bc4 <system_clock_source_xosc32k_set_config+0x98>)
    6ba4:	4003      	ands	r3, r0
    6ba6:	430b      	orrs	r3, r1
    6ba8:	4652      	mov	r2, sl
    6baa:	6153      	str	r3, [r2, #20]
}
    6bac:	bc1c      	pop	{r2, r3, r4}
    6bae:	4690      	mov	r8, r2
    6bb0:	4699      	mov	r9, r3
    6bb2:	46a2      	mov	sl, r4
    6bb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6bb6:	46c0      	nop			; (mov r8, r8)
    6bb8:	40001000 	.word	0x40001000
    6bbc:	20000b84 	.word	0x20000b84
    6bc0:	fffff8ff 	.word	0xfffff8ff
    6bc4:	ffffefff 	.word	0xffffefff

00006bc8 <system_clock_source_dfll_set_config>:
 *
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
    6bc8:	b510      	push	{r4, lr}
	_system_clock_inst.dfll.val =
			OSCCTRL_DFLLVAL_COARSE(config->coarse_value) |
    6bca:	7a83      	ldrb	r3, [r0, #10]
    6bcc:	069b      	lsls	r3, r3, #26
    6bce:	0c1b      	lsrs	r3, r3, #16
			OSCCTRL_DFLLVAL_FINE(config->fine_value);
    6bd0:	8982      	ldrh	r2, [r0, #12]
    6bd2:	0592      	lsls	r2, r2, #22
    6bd4:	0d92      	lsrs	r2, r2, #22
			OSCCTRL_DFLLVAL_COARSE(config->coarse_value) |
    6bd6:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.val =
    6bd8:	491a      	ldr	r1, [pc, #104]	; (6c44 <system_clock_source_dfll_set_config+0x7c>)
    6bda:	604b      	str	r3, [r1, #4]

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
    6bdc:	7a03      	ldrb	r3, [r0, #8]
    6bde:	7a42      	ldrb	r2, [r0, #9]
    6be0:	4313      	orrs	r3, r2
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
    6be2:	8882      	ldrh	r2, [r0, #4]
    6be4:	88c4      	ldrh	r4, [r0, #6]
    6be6:	4322      	orrs	r2, r4
    6be8:	4313      	orrs	r3, r2
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << OSCCTRL_DFLLCTRL_ONDEMAND_Pos) |
    6bea:	7842      	ldrb	r2, [r0, #1]
    6bec:	01d2      	lsls	r2, r2, #7
			(uint32_t)config->chill_cycle     |
    6bee:	4313      	orrs	r3, r2
			((uint32_t)config->run_in_stanby << OSCCTRL_DFLLCTRL_RUNSTDBY_Pos);
    6bf0:	7882      	ldrb	r2, [r0, #2]
    6bf2:	0192      	lsls	r2, r2, #6
			((uint32_t)config->on_demand << OSCCTRL_DFLLCTRL_ONDEMAND_Pos) |
    6bf4:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.control =
    6bf6:	600b      	str	r3, [r1, #0]

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
    6bf8:	7803      	ldrb	r3, [r0, #0]
    6bfa:	2b04      	cmp	r3, #4
    6bfc:	d011      	beq.n	6c22 <system_clock_source_dfll_set_config+0x5a>
				OSCCTRL_DFLLMUL_MUL(config->multiply_factor);

		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
    6bfe:	2b20      	cmp	r3, #32
    6c00:	d10e      	bne.n	6c20 <system_clock_source_dfll_set_config+0x58>

		_system_clock_inst.dfll.mul =
				OSCCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    6c02:	7b83      	ldrb	r3, [r0, #14]
    6c04:	069b      	lsls	r3, r3, #26
				OSCCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				OSCCTRL_DFLLMUL_MUL(config->multiply_factor);
    6c06:	8a42      	ldrh	r2, [r0, #18]
				OSCCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    6c08:	4313      	orrs	r3, r2
    6c0a:	8a02      	ldrh	r2, [r0, #16]
    6c0c:	0412      	lsls	r2, r2, #16
    6c0e:	490e      	ldr	r1, [pc, #56]	; (6c48 <system_clock_source_dfll_set_config+0x80>)
    6c10:	400a      	ands	r2, r1
    6c12:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    6c14:	4a0b      	ldr	r2, [pc, #44]	; (6c44 <system_clock_source_dfll_set_config+0x7c>)
    6c16:	6093      	str	r3, [r2, #8]

		/* Enable the USB recovery mode */
		_system_clock_inst.dfll.control |= config->loop_mode |
    6c18:	6811      	ldr	r1, [r2, #0]
    6c1a:	4b0c      	ldr	r3, [pc, #48]	; (6c4c <system_clock_source_dfll_set_config+0x84>)
    6c1c:	430b      	orrs	r3, r1
    6c1e:	6013      	str	r3, [r2, #0]
				OSCCTRL_DFLLCTRL_MODE | OSCCTRL_DFLLCTRL_BPLCKC;
	}
}
    6c20:	bd10      	pop	{r4, pc}
				OSCCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    6c22:	7b83      	ldrb	r3, [r0, #14]
    6c24:	069b      	lsls	r3, r3, #26
				OSCCTRL_DFLLMUL_MUL(config->multiply_factor);
    6c26:	8a42      	ldrh	r2, [r0, #18]
				OSCCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    6c28:	4313      	orrs	r3, r2
    6c2a:	8a02      	ldrh	r2, [r0, #16]
    6c2c:	0412      	lsls	r2, r2, #16
    6c2e:	4906      	ldr	r1, [pc, #24]	; (6c48 <system_clock_source_dfll_set_config+0x80>)
    6c30:	400a      	ands	r2, r1
    6c32:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    6c34:	4a03      	ldr	r2, [pc, #12]	; (6c44 <system_clock_source_dfll_set_config+0x7c>)
    6c36:	6093      	str	r3, [r2, #8]
		_system_clock_inst.dfll.control |= config->loop_mode;
    6c38:	6813      	ldr	r3, [r2, #0]
    6c3a:	2104      	movs	r1, #4
    6c3c:	430b      	orrs	r3, r1
    6c3e:	6013      	str	r3, [r2, #0]
    6c40:	e7ee      	b.n	6c20 <system_clock_source_dfll_set_config+0x58>
    6c42:	46c0      	nop			; (mov r8, r8)
    6c44:	20000b84 	.word	0x20000b84
    6c48:	03ff0000 	.word	0x03ff0000
    6c4c:	00000424 	.word	0x00000424

00006c50 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    6c50:	2808      	cmp	r0, #8
    6c52:	d803      	bhi.n	6c5c <system_clock_source_enable+0xc>
    6c54:	0080      	lsls	r0, r0, #2
    6c56:	4b29      	ldr	r3, [pc, #164]	; (6cfc <system_clock_source_enable+0xac>)
    6c58:	581b      	ldr	r3, [r3, r0]
    6c5a:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    6c5c:	2017      	movs	r0, #23
    6c5e:	e04b      	b.n	6cf8 <system_clock_source_enable+0xa8>
		OSCCTRL->OSC16MCTRL.reg |= OSCCTRL_OSC16MCTRL_ENABLE;
    6c60:	4a27      	ldr	r2, [pc, #156]	; (6d00 <system_clock_source_enable+0xb0>)
    6c62:	7d13      	ldrb	r3, [r2, #20]
    6c64:	2102      	movs	r1, #2
    6c66:	430b      	orrs	r3, r1
    6c68:	7513      	strb	r3, [r2, #20]
		return STATUS_OK;
    6c6a:	2000      	movs	r0, #0
    6c6c:	e044      	b.n	6cf8 <system_clock_source_enable+0xa8>
		OSC32KCTRL->OSC32K.reg |= OSC32KCTRL_OSC32K_ENABLE;
    6c6e:	4a25      	ldr	r2, [pc, #148]	; (6d04 <system_clock_source_enable+0xb4>)
    6c70:	6993      	ldr	r3, [r2, #24]
    6c72:	2102      	movs	r1, #2
    6c74:	430b      	orrs	r3, r1
    6c76:	6193      	str	r3, [r2, #24]
	}

	return STATUS_OK;
    6c78:	2000      	movs	r0, #0
		break;
    6c7a:	e03d      	b.n	6cf8 <system_clock_source_enable+0xa8>
		OSCCTRL->XOSCCTRL.reg |= OSCCTRL_XOSCCTRL_ENABLE;
    6c7c:	4a20      	ldr	r2, [pc, #128]	; (6d00 <system_clock_source_enable+0xb0>)
    6c7e:	8a13      	ldrh	r3, [r2, #16]
    6c80:	2102      	movs	r1, #2
    6c82:	430b      	orrs	r3, r1
    6c84:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
    6c86:	2000      	movs	r0, #0
		break;
    6c88:	e036      	b.n	6cf8 <system_clock_source_enable+0xa8>
		OSC32KCTRL->XOSC32K.reg |= OSC32KCTRL_XOSC32K_ENABLE;
    6c8a:	4a1e      	ldr	r2, [pc, #120]	; (6d04 <system_clock_source_enable+0xb4>)
    6c8c:	6953      	ldr	r3, [r2, #20]
    6c8e:	2102      	movs	r1, #2
    6c90:	430b      	orrs	r3, r1
    6c92:	6153      	str	r3, [r2, #20]
	return STATUS_OK;
    6c94:	2000      	movs	r0, #0
		break;
    6c96:	e02f      	b.n	6cf8 <system_clock_source_enable+0xa8>
		_system_clock_inst.dfll.control |= OSCCTRL_DFLLCTRL_ENABLE;
    6c98:	491b      	ldr	r1, [pc, #108]	; (6d08 <system_clock_source_enable+0xb8>)
    6c9a:	680b      	ldr	r3, [r1, #0]
    6c9c:	2202      	movs	r2, #2
    6c9e:	4313      	orrs	r3, r2
    6ca0:	600b      	str	r3, [r1, #0]
	OSCCTRL->DFLLCTRL.reg = OSCCTRL_DFLLCTRL_ENABLE;
    6ca2:	4b17      	ldr	r3, [pc, #92]	; (6d00 <system_clock_source_enable+0xb0>)
    6ca4:	831a      	strh	r2, [r3, #24]
	while (!(OSCCTRL->STATUS.reg & OSCCTRL_STATUS_DFLLRDY)) {
    6ca6:	0019      	movs	r1, r3
    6ca8:	32fe      	adds	r2, #254	; 0xfe
    6caa:	68cb      	ldr	r3, [r1, #12]
    6cac:	4213      	tst	r3, r2
    6cae:	d0fc      	beq.n	6caa <system_clock_source_enable+0x5a>
	OSCCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    6cb0:	4a15      	ldr	r2, [pc, #84]	; (6d08 <system_clock_source_enable+0xb8>)
    6cb2:	6891      	ldr	r1, [r2, #8]
    6cb4:	4b12      	ldr	r3, [pc, #72]	; (6d00 <system_clock_source_enable+0xb0>)
    6cb6:	6219      	str	r1, [r3, #32]
	OSCCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    6cb8:	6852      	ldr	r2, [r2, #4]
    6cba:	61da      	str	r2, [r3, #28]
	OSCCTRL->DFLLCTRL.reg = 0;
    6cbc:	2200      	movs	r2, #0
    6cbe:	831a      	strh	r2, [r3, #24]
	while (!(OSCCTRL->STATUS.reg & OSCCTRL_STATUS_DFLLRDY)) {
    6cc0:	0019      	movs	r1, r3
    6cc2:	3201      	adds	r2, #1
    6cc4:	32ff      	adds	r2, #255	; 0xff
    6cc6:	68cb      	ldr	r3, [r1, #12]
    6cc8:	4213      	tst	r3, r2
    6cca:	d0fc      	beq.n	6cc6 <system_clock_source_enable+0x76>
	OSCCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    6ccc:	4b0e      	ldr	r3, [pc, #56]	; (6d08 <system_clock_source_enable+0xb8>)
    6cce:	681b      	ldr	r3, [r3, #0]
    6cd0:	b29b      	uxth	r3, r3
    6cd2:	4a0b      	ldr	r2, [pc, #44]	; (6d00 <system_clock_source_enable+0xb0>)
    6cd4:	8313      	strh	r3, [r2, #24]
	return STATUS_OK;
    6cd6:	2000      	movs	r0, #0
    6cd8:	e00e      	b.n	6cf8 <system_clock_source_enable+0xa8>
		OSCCTRL->DPLLCTRLA.reg |= OSCCTRL_DPLLCTRLA_ENABLE;
    6cda:	4909      	ldr	r1, [pc, #36]	; (6d00 <system_clock_source_enable+0xb0>)
    6cdc:	2228      	movs	r2, #40	; 0x28
    6cde:	5c8b      	ldrb	r3, [r1, r2]
    6ce0:	2002      	movs	r0, #2
    6ce2:	4303      	orrs	r3, r0
    6ce4:	548b      	strb	r3, [r1, r2]
		while(OSCCTRL->DPLLSYNCBUSY.reg & OSCCTRL_DPLLSYNCBUSY_ENABLE){
    6ce6:	0008      	movs	r0, r1
    6ce8:	2138      	movs	r1, #56	; 0x38
    6cea:	3a26      	subs	r2, #38	; 0x26
    6cec:	5c43      	ldrb	r3, [r0, r1]
    6cee:	4213      	tst	r3, r2
    6cf0:	d1fc      	bne.n	6cec <system_clock_source_enable+0x9c>
	return STATUS_OK;
    6cf2:	2000      	movs	r0, #0
    6cf4:	e000      	b.n	6cf8 <system_clock_source_enable+0xa8>
		return STATUS_OK;
    6cf6:	2000      	movs	r0, #0
}
    6cf8:	4770      	bx	lr
    6cfa:	46c0      	nop			; (mov r8, r8)
    6cfc:	0001fb38 	.word	0x0001fb38
    6d00:	40000c00 	.word	0x40000c00
    6d04:	40001000 	.word	0x40001000
    6d08:	20000b84 	.word	0x20000b84

00006d0c <system_clock_source_disable>:
 *                                 given
 */
enum status_code system_clock_source_disable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    6d0c:	2808      	cmp	r0, #8
    6d0e:	d832      	bhi.n	6d76 <system_clock_source_disable+0x6a>
    6d10:	0080      	lsls	r0, r0, #2
    6d12:	4b1a      	ldr	r3, [pc, #104]	; (6d7c <system_clock_source_disable+0x70>)
    6d14:	581b      	ldr	r3, [r3, r0]
    6d16:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC16M:
		OSCCTRL->OSC16MCTRL.reg &= ~OSCCTRL_OSC16MCTRL_ENABLE;
    6d18:	4a19      	ldr	r2, [pc, #100]	; (6d80 <system_clock_source_disable+0x74>)
    6d1a:	7d13      	ldrb	r3, [r2, #20]
    6d1c:	2102      	movs	r1, #2
    6d1e:	438b      	bics	r3, r1
    6d20:	7513      	strb	r3, [r2, #20]
		Assert(false);
		return STATUS_ERR_INVALID_ARG;

	}

	return STATUS_OK;
    6d22:	2000      	movs	r0, #0
}
    6d24:	4770      	bx	lr
		OSC32KCTRL->OSC32K.reg &= ~OSC32KCTRL_OSC32K_ENABLE;
    6d26:	4a17      	ldr	r2, [pc, #92]	; (6d84 <system_clock_source_disable+0x78>)
    6d28:	6993      	ldr	r3, [r2, #24]
    6d2a:	2102      	movs	r1, #2
    6d2c:	438b      	bics	r3, r1
    6d2e:	6193      	str	r3, [r2, #24]
	return STATUS_OK;
    6d30:	2000      	movs	r0, #0
		break;
    6d32:	e7f7      	b.n	6d24 <system_clock_source_disable+0x18>
		OSCCTRL->XOSCCTRL.reg &= ~OSCCTRL_XOSCCTRL_ENABLE;
    6d34:	4a12      	ldr	r2, [pc, #72]	; (6d80 <system_clock_source_disable+0x74>)
    6d36:	8a13      	ldrh	r3, [r2, #16]
    6d38:	2102      	movs	r1, #2
    6d3a:	438b      	bics	r3, r1
    6d3c:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
    6d3e:	2000      	movs	r0, #0
		break;
    6d40:	e7f0      	b.n	6d24 <system_clock_source_disable+0x18>
		OSC32KCTRL->XOSC32K.reg &= ~OSC32KCTRL_XOSC32K_ENABLE;
    6d42:	4a10      	ldr	r2, [pc, #64]	; (6d84 <system_clock_source_disable+0x78>)
    6d44:	6953      	ldr	r3, [r2, #20]
    6d46:	2102      	movs	r1, #2
    6d48:	438b      	bics	r3, r1
    6d4a:	6153      	str	r3, [r2, #20]
	return STATUS_OK;
    6d4c:	2000      	movs	r0, #0
		break;
    6d4e:	e7e9      	b.n	6d24 <system_clock_source_disable+0x18>
		_system_clock_inst.dfll.control &= ~OSCCTRL_DFLLCTRL_ENABLE;
    6d50:	4b0d      	ldr	r3, [pc, #52]	; (6d88 <system_clock_source_disable+0x7c>)
    6d52:	681a      	ldr	r2, [r3, #0]
    6d54:	2102      	movs	r1, #2
    6d56:	438a      	bics	r2, r1
    6d58:	601a      	str	r2, [r3, #0]
		OSCCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    6d5a:	681b      	ldr	r3, [r3, #0]
    6d5c:	b29b      	uxth	r3, r3
    6d5e:	4a08      	ldr	r2, [pc, #32]	; (6d80 <system_clock_source_disable+0x74>)
    6d60:	8313      	strh	r3, [r2, #24]
	return STATUS_OK;
    6d62:	2000      	movs	r0, #0
		break;
    6d64:	e7de      	b.n	6d24 <system_clock_source_disable+0x18>
		OSCCTRL->DPLLCTRLA.reg &= ~OSCCTRL_DPLLCTRLA_ENABLE;
    6d66:	4906      	ldr	r1, [pc, #24]	; (6d80 <system_clock_source_disable+0x74>)
    6d68:	2228      	movs	r2, #40	; 0x28
    6d6a:	5c8b      	ldrb	r3, [r1, r2]
    6d6c:	2002      	movs	r0, #2
    6d6e:	4383      	bics	r3, r0
    6d70:	548b      	strb	r3, [r1, r2]
	return STATUS_OK;
    6d72:	2000      	movs	r0, #0
		break;
    6d74:	e7d6      	b.n	6d24 <system_clock_source_disable+0x18>
		return STATUS_ERR_INVALID_ARG;
    6d76:	2017      	movs	r0, #23
    6d78:	e7d4      	b.n	6d24 <system_clock_source_disable+0x18>
    6d7a:	46c0      	nop			; (mov r8, r8)
    6d7c:	0001fb5c 	.word	0x0001fb5c
    6d80:	40000c00 	.word	0x40000c00
    6d84:	40001000 	.word	0x40001000
    6d88:	20000b84 	.word	0x20000b84

00006d8c <system_clock_init>:
 * \note OSC16M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC16M default enable can be disabled after system_clock_init. Make sure the
 * clock switches successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    6d8c:	b5f0      	push	{r4, r5, r6, r7, lr}
    6d8e:	46ce      	mov	lr, r9
    6d90:	4647      	mov	r7, r8
    6d92:	b580      	push	{r7, lr}
    6d94:	b08d      	sub	sp, #52	; 0x34
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	OSCCTRL->INTFLAG.reg = OSCCTRL_INTFLAG_DFLLRDY;
    6d96:	2280      	movs	r2, #128	; 0x80
    6d98:	0052      	lsls	r2, r2, #1
    6d9a:	4b76      	ldr	r3, [pc, #472]	; (6f74 <system_clock_init+0x1e8>)
    6d9c:	609a      	str	r2, [r3, #8]
	SUPC->INTFLAG.reg = SUPC_INTFLAG_BOD33RDY | SUPC_INTFLAG_BOD33DET;
    6d9e:	3afd      	subs	r2, #253	; 0xfd
    6da0:	4b75      	ldr	r3, [pc, #468]	; (6f78 <system_clock_init+0x1ec>)
    6da2:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    6da4:	4a75      	ldr	r2, [pc, #468]	; (6f7c <system_clock_init+0x1f0>)
    6da6:	6853      	ldr	r3, [r2, #4]
    6da8:	211e      	movs	r1, #30
    6daa:	438b      	bics	r3, r1
    6dac:	391a      	subs	r1, #26
    6dae:	430b      	orrs	r3, r1
    6db0:	6053      	str	r3, [r2, #4]
 */
static inline enum status_code system_switch_performance_level(
					const enum system_performance_level performance_level)
{

	if (performance_level == (enum system_performance_level)PM->PLCFG.reg) {
    6db2:	2380      	movs	r3, #128	; 0x80
    6db4:	05db      	lsls	r3, r3, #23
    6db6:	789b      	ldrb	r3, [r3, #2]
    6db8:	2b02      	cmp	r3, #2
    6dba:	d00f      	beq.n	6ddc <system_clock_init+0x50>
		return STATUS_OK;
	}

#if SAML22 || SAML21XXXB || SAMR34J || SAMR35J || (WLR089U0)
	if (PM->PLCFG.reg & PM_PLCFG_PLDIS) {
    6dbc:	2380      	movs	r3, #128	; 0x80
    6dbe:	05db      	lsls	r3, r3, #23
    6dc0:	789b      	ldrb	r3, [r3, #2]
    6dc2:	b25b      	sxtb	r3, r3
    6dc4:	2b00      	cmp	r3, #0
    6dc6:	db09      	blt.n	6ddc <system_clock_init+0x50>
		return STATUS_ERR_INVALID_ARG;
	}
#endif

	/* Clear performance level status */
	PM->INTFLAG.reg = PM_INTFLAG_PLRDY;
    6dc8:	2380      	movs	r3, #128	; 0x80
    6dca:	05db      	lsls	r3, r3, #23
    6dcc:	2201      	movs	r2, #1
    6dce:	719a      	strb	r2, [r3, #6]

	/* Switch performance level */
	PM->PLCFG.reg = performance_level;
    6dd0:	3201      	adds	r2, #1
    6dd2:	709a      	strb	r2, [r3, #2]

	/* Waiting performance level ready */
	while (!PM->INTFLAG.reg) {
    6dd4:	001a      	movs	r2, r3
    6dd6:	7993      	ldrb	r3, [r2, #6]
    6dd8:	2b00      	cmp	r3, #0
    6dda:	d0fc      	beq.n	6dd6 <system_clock_init+0x4a>
	config->external_clock      = SYSTEM_CLOCK_EXTERNAL_CRYSTAL;
    6ddc:	a809      	add	r0, sp, #36	; 0x24
    6dde:	2300      	movs	r3, #0
    6de0:	7003      	strb	r3, [r0, #0]
	config->frequency           = 32768UL;
    6de2:	2280      	movs	r2, #128	; 0x80
    6de4:	0212      	lsls	r2, r2, #8
    6de6:	6042      	str	r2, [r0, #4]
	config->enable_1khz_output  = false;
    6de8:	7083      	strb	r3, [r0, #2]
	config->enable_32khz_output = true;
    6dea:	2201      	movs	r2, #1
    6dec:	70c2      	strb	r2, [r0, #3]
	config->run_in_standby      = false;
    6dee:	7203      	strb	r3, [r0, #8]
	config->write_once          = false;
    6df0:	7283      	strb	r3, [r0, #10]
	struct system_clock_source_xosc32k_config xosc32k_conf;
	system_clock_source_xosc32k_get_config_defaults(&xosc32k_conf);

	xosc32k_conf.frequency           = 32768UL;
	xosc32k_conf.external_clock      = CONF_CLOCK_XOSC32K_EXTERNAL_CRYSTAL;
	xosc32k_conf.startup_time        = CONF_CLOCK_XOSC32K_STARTUP_TIME;
    6df2:	3203      	adds	r2, #3
    6df4:	7042      	strb	r2, [r0, #1]
	xosc32k_conf.enable_1khz_output  = CONF_CLOCK_XOSC32K_ENABLE_1KHZ_OUPUT;
	xosc32k_conf.enable_32khz_output = CONF_CLOCK_XOSC32K_ENABLE_32KHZ_OUTPUT;
	xosc32k_conf.on_demand           = false;
    6df6:	7243      	strb	r3, [r0, #9]
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;

	system_clock_source_xosc32k_set_config(&xosc32k_conf);
    6df8:	4b61      	ldr	r3, [pc, #388]	; (6f80 <system_clock_init+0x1f4>)
    6dfa:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
    6dfc:	2005      	movs	r0, #5
    6dfe:	4b61      	ldr	r3, [pc, #388]	; (6f84 <system_clock_init+0x1f8>)
    6e00:	4798      	blx	r3
		return ((OSC32KCTRL->STATUS.reg & mask) == mask);
    6e02:	4961      	ldr	r1, [pc, #388]	; (6f88 <system_clock_init+0x1fc>)
    6e04:	2201      	movs	r2, #1
    6e06:	68cb      	ldr	r3, [r1, #12]
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_XOSC32K));
    6e08:	421a      	tst	r2, r3
    6e0a:	d0fc      	beq.n	6e06 <system_clock_init+0x7a>
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    6e0c:	a901      	add	r1, sp, #4
    6e0e:	2501      	movs	r5, #1
    6e10:	604d      	str	r5, [r1, #4]
	config->high_when_disabled = false;
    6e12:	2400      	movs	r4, #0
    6e14:	704c      	strb	r4, [r1, #1]
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
#endif
	config->run_in_standby     = false;
    6e16:	720c      	strb	r4, [r1, #8]
	config->output_enable      = false;
    6e18:	724c      	strb	r4, [r1, #9]
	gclk_conf.source_clock = SYSTEM_CLOCK_SOURCE_ULP32K;
    6e1a:	2303      	movs	r3, #3
    6e1c:	700b      	strb	r3, [r1, #0]
	system_gclk_gen_set_config(GCLK_GENERATOR_0, &gclk_conf);
    6e1e:	2000      	movs	r0, #0
    6e20:	4b5a      	ldr	r3, [pc, #360]	; (6f8c <system_clock_init+0x200>)
    6e22:	4798      	blx	r3
	system_clock_source_disable(SYSTEM_CLOCK_SOURCE_OSC16M);
    6e24:	2006      	movs	r0, #6
    6e26:	4b5a      	ldr	r3, [pc, #360]	; (6f90 <system_clock_init+0x204>)
    6e28:	4798      	blx	r3
	config->run_in_standby  = false;
    6e2a:	466b      	mov	r3, sp
    6e2c:	705c      	strb	r4, [r3, #1]
	osc16m_conf.fsel      		= CONF_CLOCK_OSC16M_FREQ_SEL;
    6e2e:	701d      	strb	r5, [r3, #0]
	osc16m_conf.on_demand       = 0;
    6e30:	709c      	strb	r4, [r3, #2]
	system_clock_source_osc16m_set_config(&osc16m_conf);
    6e32:	4668      	mov	r0, sp
    6e34:	4b57      	ldr	r3, [pc, #348]	; (6f94 <system_clock_init+0x208>)
    6e36:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC16M);
    6e38:	2006      	movs	r0, #6
    6e3a:	4b52      	ldr	r3, [pc, #328]	; (6f84 <system_clock_init+0x1f8>)
    6e3c:	4798      	blx	r3
		return ((OSCCTRL->STATUS.reg & mask) == mask);
    6e3e:	494d      	ldr	r1, [pc, #308]	; (6f74 <system_clock_init+0x1e8>)
    6e40:	2210      	movs	r2, #16
    6e42:	68cb      	ldr	r3, [r1, #12]
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_OSC16M));
    6e44:	421a      	tst	r2, r3
    6e46:	d0fc      	beq.n	6e42 <system_clock_init+0xb6>
	config->division_factor    = 1;
    6e48:	a901      	add	r1, sp, #4
    6e4a:	2301      	movs	r3, #1
    6e4c:	604b      	str	r3, [r1, #4]
	config->high_when_disabled = false;
    6e4e:	2400      	movs	r4, #0
    6e50:	704c      	strb	r4, [r1, #1]
	config->source_clock       = GCLK_SOURCE_OSC16M;
    6e52:	3305      	adds	r3, #5
    6e54:	700b      	strb	r3, [r1, #0]
	config->run_in_standby     = false;
    6e56:	720c      	strb	r4, [r1, #8]
	config->output_enable      = false;
    6e58:	724c      	strb	r4, [r1, #9]
	system_gclk_gen_set_config(GCLK_GENERATOR_0, &gclk_conf);
    6e5a:	2000      	movs	r0, #0
    6e5c:	4b4b      	ldr	r3, [pc, #300]	; (6f8c <system_clock_init+0x200>)
    6e5e:	4798      	blx	r3
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    6e60:	ab04      	add	r3, sp, #16
    6e62:	2200      	movs	r2, #0
    6e64:	809c      	strh	r4, [r3, #4]
	config->chill_cycle     = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
    6e66:	80dc      	strh	r4, [r3, #6]
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    6e68:	721a      	strb	r2, [r3, #8]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    6e6a:	725a      	strb	r2, [r3, #9]
	config->run_in_stanby   = false;
    6e6c:	709a      	strb	r2, [r3, #2]
	config->fine_value      = 0xff / 4; /* Midpoint */
    6e6e:	213f      	movs	r1, #63	; 0x3f
    6e70:	8199      	strh	r1, [r3, #12]
	/* DFLL Config (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	struct system_clock_source_dfll_config dfll_conf;
	system_clock_source_dfll_get_config_defaults(&dfll_conf);

	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
    6e72:	393b      	subs	r1, #59	; 0x3b
    6e74:	7019      	strb	r1, [r3, #0]
	dfll_conf.on_demand      = false;
    6e76:	705a      	strb	r2, [r3, #1]
	/* Using DFLL48M COARSE CAL value from NVM Software Calibration Area Mapping 
	   in DFLL.COARSE helps to output a frequency close to 48 MHz.*/
#define NVM_DFLL_COARSE_POS    26 /* DFLL48M Coarse calibration value bit position.*/
#define NVM_DFLL_COARSE_SIZE   6  /* DFLL48M Coarse calibration value bit size.*/

	uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP5)
    6e78:	4b47      	ldr	r3, [pc, #284]	; (6f98 <system_clock_init+0x20c>)
    6e7a:	681b      	ldr	r3, [r3, #0]
    6e7c:	0e9b      	lsrs	r3, r3, #26
			+ (NVM_DFLL_COARSE_POS / 32))
		>> (NVM_DFLL_COARSE_POS % 32))
		& ((1 << NVM_DFLL_COARSE_SIZE) - 1);
	/* In some revision chip, the Calibration value is not correct */
	if (coarse == 0x3f) {
    6e7e:	2b3f      	cmp	r3, #63	; 0x3f
    6e80:	d100      	bne.n	6e84 <system_clock_init+0xf8>
    6e82:	e074      	b.n	6f6e <system_clock_init+0x1e2>
		coarse = 0x1f;
	}

	dfll_conf.coarse_value = coarse;
    6e84:	a804      	add	r0, sp, #16
    6e86:	7283      	strb	r3, [r0, #10]
#  else
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;
#  endif

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
    6e88:	23b7      	movs	r3, #183	; 0xb7
    6e8a:	00db      	lsls	r3, r3, #3
    6e8c:	8243      	strh	r3, [r0, #18]
	}

	dfll_conf.coarse_max_step = CONF_CLOCK_DFLL_MAX_COARSE_STEP_SIZE;
    6e8e:	2307      	movs	r3, #7
    6e90:	7383      	strb	r3, [r0, #14]
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;
    6e92:	3338      	adds	r3, #56	; 0x38
    6e94:	8203      	strh	r3, [r0, #16]
		dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;

		dfll_conf.multiply_factor = 48000;
	}

	system_clock_source_dfll_set_config(&dfll_conf);
    6e96:	4b41      	ldr	r3, [pc, #260]	; (6f9c <system_clock_init+0x210>)
    6e98:	4798      	blx	r3
#endif

	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    6e9a:	4b41      	ldr	r3, [pc, #260]	; (6fa0 <system_clock_init+0x214>)
    6e9c:	4798      	blx	r3
	config->division_factor    = 1;
    6e9e:	ac01      	add	r4, sp, #4
    6ea0:	2601      	movs	r6, #1
    6ea2:	9602      	str	r6, [sp, #8]
	config->high_when_disabled = false;
    6ea4:	2500      	movs	r5, #0
    6ea6:	7065      	strb	r5, [r4, #1]
	config->output_enable      = false;
    6ea8:	7265      	strb	r5, [r4, #9]

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    6eaa:	2305      	movs	r3, #5
    6eac:	4699      	mov	r9, r3
    6eae:	7023      	strb	r3, [r4, #0]
    6eb0:	7226      	strb	r6, [r4, #8]
    6eb2:	0021      	movs	r1, r4
    6eb4:	2001      	movs	r0, #1
    6eb6:	4b35      	ldr	r3, [pc, #212]	; (6f8c <system_clock_init+0x200>)
    6eb8:	4698      	mov	r8, r3
    6eba:	4798      	blx	r3
    6ebc:	2001      	movs	r0, #1
    6ebe:	4f39      	ldr	r7, [pc, #228]	; (6fa4 <system_clock_init+0x218>)
    6ec0:	47b8      	blx	r7
	config->high_when_disabled = false;
    6ec2:	7065      	strb	r5, [r4, #1]
	config->source_clock       = GCLK_SOURCE_OSC16M;
    6ec4:	2306      	movs	r3, #6
    6ec6:	7023      	strb	r3, [r4, #0]
	config->run_in_standby     = false;
    6ec8:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    6eca:	7265      	strb	r5, [r4, #9]
    6ecc:	464b      	mov	r3, r9
    6ece:	6063      	str	r3, [r4, #4]
    6ed0:	0021      	movs	r1, r4
    6ed2:	2002      	movs	r0, #2
    6ed4:	47c0      	blx	r8
    6ed6:	2002      	movs	r0, #2
    6ed8:	47b8      	blx	r7
	/* Enable DFLL reference clock if in closed loop mode */
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		struct system_gclk_chan_config dfll_gclk_chan_conf;

		system_gclk_chan_get_config_defaults(&dfll_gclk_chan_conf);
		dfll_gclk_chan_conf.source_generator = CONF_CLOCK_DFLL_SOURCE_GCLK_GENERATOR;
    6eda:	7026      	strb	r6, [r4, #0]
		system_gclk_chan_set_config(OSCCTRL_GCLK_ID_DFLL48, &dfll_gclk_chan_conf);
    6edc:	0021      	movs	r1, r4
    6ede:	2000      	movs	r0, #0
    6ee0:	4b31      	ldr	r3, [pc, #196]	; (6fa8 <system_clock_init+0x21c>)
    6ee2:	4798      	blx	r3
		system_gclk_chan_enable(OSCCTRL_GCLK_ID_DFLL48);
    6ee4:	2000      	movs	r0, #0
    6ee6:	4b31      	ldr	r3, [pc, #196]	; (6fac <system_clock_init+0x220>)
    6ee8:	4798      	blx	r3
#  endif
#endif

	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
    6eea:	2007      	movs	r0, #7
    6eec:	4b25      	ldr	r3, [pc, #148]	; (6f84 <system_clock_init+0x1f8>)
    6eee:	4798      	blx	r3
		return ((OSCCTRL->STATUS.reg & mask) == mask);
    6ef0:	4920      	ldr	r1, [pc, #128]	; (6f74 <system_clock_init+0x1e8>)
    6ef2:	22d0      	movs	r2, #208	; 0xd0
    6ef4:	0112      	lsls	r2, r2, #4
    6ef6:	68cb      	ldr	r3, [r1, #12]
    6ef8:	4013      	ands	r3, r2
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
    6efa:	4293      	cmp	r3, r2
    6efc:	d1fb      	bne.n	6ef6 <system_clock_init+0x16a>
	MCLK->BUPDIV.reg = MCLK_BUPDIV_BUPDIV(1 << divider);
    6efe:	4c2c      	ldr	r4, [pc, #176]	; (6fb0 <system_clock_init+0x224>)
    6f00:	2301      	movs	r3, #1
    6f02:	71a3      	strb	r3, [r4, #6]
	MCLK->LPDIV.reg = MCLK_LPDIV_LPDIV(1 << divider);
    6f04:	7163      	strb	r3, [r4, #5]
	MCLK->CPUDIV.reg = MCLK_CPUDIV_CPUDIV(1 << divider);
    6f06:	7123      	strb	r3, [r4, #4]
	config->high_when_disabled = false;
    6f08:	a901      	add	r1, sp, #4
    6f0a:	2300      	movs	r3, #0
    6f0c:	704b      	strb	r3, [r1, #1]
	config->run_in_standby     = false;
    6f0e:	720b      	strb	r3, [r1, #8]
	config->output_enable      = false;
    6f10:	724b      	strb	r3, [r1, #9]
	system_main_clock_set_failure_detect(CONF_CLOCK_CPU_CLOCK_FAILURE_DETECT);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    6f12:	3307      	adds	r3, #7
    6f14:	700b      	strb	r3, [r1, #0]
    6f16:	3b01      	subs	r3, #1
    6f18:	604b      	str	r3, [r1, #4]
    6f1a:	2000      	movs	r0, #0
    6f1c:	4b1b      	ldr	r3, [pc, #108]	; (6f8c <system_clock_init+0x200>)
    6f1e:	4798      	blx	r3
    6f20:	2000      	movs	r0, #0
    6f22:	4b20      	ldr	r3, [pc, #128]	; (6fa4 <system_clock_init+0x218>)
    6f24:	4798      	blx	r3
	return (system_gclk_gen_get_hz(GCLK_GENERATOR_0) / MCLK->CPUDIV.reg);
    6f26:	2000      	movs	r0, #0
    6f28:	4b22      	ldr	r3, [pc, #136]	; (6fb4 <system_clock_init+0x228>)
    6f2a:	4798      	blx	r3
    6f2c:	7921      	ldrb	r1, [r4, #4]
    6f2e:	b2c9      	uxtb	r1, r1
    6f30:	4b21      	ldr	r3, [pc, #132]	; (6fb8 <system_clock_init+0x22c>)
    6f32:	4798      	blx	r3
#endif

	/* If CPU frequency is less than 12MHz, scale down performance level to PL0 */
	uint32_t cpu_freq = system_cpu_clock_get_hz();
	if (cpu_freq <= 12000000) {
    6f34:	4b21      	ldr	r3, [pc, #132]	; (6fbc <system_clock_init+0x230>)
    6f36:	4298      	cmp	r0, r3
    6f38:	d814      	bhi.n	6f64 <system_clock_init+0x1d8>
	if (performance_level == (enum system_performance_level)PM->PLCFG.reg) {
    6f3a:	2380      	movs	r3, #128	; 0x80
    6f3c:	05db      	lsls	r3, r3, #23
    6f3e:	789b      	ldrb	r3, [r3, #2]
    6f40:	2b00      	cmp	r3, #0
    6f42:	d00f      	beq.n	6f64 <system_clock_init+0x1d8>
	if (PM->PLCFG.reg & PM_PLCFG_PLDIS) {
    6f44:	2380      	movs	r3, #128	; 0x80
    6f46:	05db      	lsls	r3, r3, #23
    6f48:	789b      	ldrb	r3, [r3, #2]
    6f4a:	b25b      	sxtb	r3, r3
    6f4c:	2b00      	cmp	r3, #0
    6f4e:	db09      	blt.n	6f64 <system_clock_init+0x1d8>
	PM->INTFLAG.reg = PM_INTFLAG_PLRDY;
    6f50:	2380      	movs	r3, #128	; 0x80
    6f52:	05db      	lsls	r3, r3, #23
    6f54:	2201      	movs	r2, #1
    6f56:	719a      	strb	r2, [r3, #6]
	PM->PLCFG.reg = performance_level;
    6f58:	2200      	movs	r2, #0
    6f5a:	709a      	strb	r2, [r3, #2]
	while (!PM->INTFLAG.reg) {
    6f5c:	001a      	movs	r2, r3
    6f5e:	7993      	ldrb	r3, [r2, #6]
    6f60:	2b00      	cmp	r3, #0
    6f62:	d0fc      	beq.n	6f5e <system_clock_init+0x1d2>
		system_switch_performance_level(SYSTEM_PERFORMANCE_LEVEL_0);
	}
}
    6f64:	b00d      	add	sp, #52	; 0x34
    6f66:	bc0c      	pop	{r2, r3}
    6f68:	4690      	mov	r8, r2
    6f6a:	4699      	mov	r9, r3
    6f6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		coarse = 0x1f;
    6f6e:	3b20      	subs	r3, #32
    6f70:	e788      	b.n	6e84 <system_clock_init+0xf8>
    6f72:	46c0      	nop			; (mov r8, r8)
    6f74:	40000c00 	.word	0x40000c00
    6f78:	40001400 	.word	0x40001400
    6f7c:	41004000 	.word	0x41004000
    6f80:	00006b2d 	.word	0x00006b2d
    6f84:	00006c51 	.word	0x00006c51
    6f88:	40001000 	.word	0x40001000
    6f8c:	00006fe5 	.word	0x00006fe5
    6f90:	00006d0d 	.word	0x00006d0d
    6f94:	00006af9 	.word	0x00006af9
    6f98:	00806020 	.word	0x00806020
    6f9c:	00006bc9 	.word	0x00006bc9
    6fa0:	00006fc1 	.word	0x00006fc1
    6fa4:	00007091 	.word	0x00007091
    6fa8:	000071ad 	.word	0x000071ad
    6fac:	0000713d 	.word	0x0000713d
    6fb0:	40000400 	.word	0x40000400
    6fb4:	000070d1 	.word	0x000070d1
    6fb8:	000165ad 	.word	0x000165ad
    6fbc:	00b71b00 	.word	0x00b71b00

00006fc0 <system_gclk_init>:
			MCLK->APBAMASK.reg |= mask;
    6fc0:	4a06      	ldr	r2, [pc, #24]	; (6fdc <system_gclk_init+0x1c>)
    6fc2:	6953      	ldr	r3, [r2, #20]
    6fc4:	2140      	movs	r1, #64	; 0x40
    6fc6:	430b      	orrs	r3, r1
    6fc8:	6153      	str	r3, [r2, #20]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, MCLK_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRLA.reg = GCLK_CTRLA_SWRST;
    6fca:	2201      	movs	r2, #1
    6fcc:	4b04      	ldr	r3, [pc, #16]	; (6fe0 <system_gclk_init+0x20>)
    6fce:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRLA.reg & GCLK_CTRLA_SWRST) {
    6fd0:	0019      	movs	r1, r3
    6fd2:	780b      	ldrb	r3, [r1, #0]
    6fd4:	4213      	tst	r3, r2
    6fd6:	d1fc      	bne.n	6fd2 <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    6fd8:	4770      	bx	lr
    6fda:	46c0      	nop			; (mov r8, r8)
    6fdc:	40000400 	.word	0x40000400
    6fe0:	40001800 	.word	0x40001800

00006fe4 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    6fe4:	b570      	push	{r4, r5, r6, lr}
    6fe6:	0004      	movs	r4, r0
	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config ;


	/* Select the requested source clock for the generator */
	new_genctrl_config = config->source_clock << GCLK_GENCTRL_SRC_Pos;
    6fe8:	780d      	ldrb	r5, [r1, #0]

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    6fea:	784b      	ldrb	r3, [r1, #1]
    6fec:	2b00      	cmp	r3, #0
    6fee:	d002      	beq.n	6ff6 <system_gclk_gen_set_config+0x12>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    6ff0:	2380      	movs	r3, #128	; 0x80
    6ff2:	00db      	lsls	r3, r3, #3
    6ff4:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    6ff6:	7a4b      	ldrb	r3, [r1, #9]
    6ff8:	2b00      	cmp	r3, #0
    6ffa:	d002      	beq.n	7002 <system_gclk_gen_set_config+0x1e>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    6ffc:	2380      	movs	r3, #128	; 0x80
    6ffe:	011b      	lsls	r3, r3, #4
    7000:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    7002:	6848      	ldr	r0, [r1, #4]
    7004:	2801      	cmp	r0, #1
    7006:	d90f      	bls.n	7028 <system_gclk_gen_set_config+0x44>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    7008:	1e43      	subs	r3, r0, #1
    700a:	4218      	tst	r0, r3
    700c:	d131      	bne.n	7072 <system_gclk_gen_set_config+0x8e>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    700e:	2802      	cmp	r0, #2
    7010:	d92d      	bls.n	706e <system_gclk_gen_set_config+0x8a>
    7012:	2302      	movs	r3, #2
    7014:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    7016:	3201      	adds	r2, #1
						mask <<= 1) {
    7018:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
    701a:	4298      	cmp	r0, r3
    701c:	d8fb      	bhi.n	7016 <system_gclk_gen_set_config+0x32>
    701e:	2380      	movs	r3, #128	; 0x80
    7020:	015b      	lsls	r3, r3, #5
    7022:	431d      	orrs	r5, r3
			}

			/* Set binary divider power of 2 division factor */
			new_genctrl_config  |= div2_count << GCLK_GENCTRL_DIV_Pos;
    7024:	0412      	lsls	r2, r2, #16
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    7026:	4315      	orrs	r5, r2
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    7028:	7a0b      	ldrb	r3, [r1, #8]
    702a:	2b00      	cmp	r3, #0
    702c:	d002      	beq.n	7034 <system_gclk_gen_set_config+0x50>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    702e:	2380      	movs	r3, #128	; 0x80
    7030:	019b      	lsls	r3, r3, #6
    7032:	431d      	orrs	r5, r3
	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    7034:	2604      	movs	r6, #4
    7036:	40a6      	lsls	r6, r4
    7038:	4911      	ldr	r1, [pc, #68]	; (7080 <system_gclk_gen_set_config+0x9c>)
    703a:	4a12      	ldr	r2, [pc, #72]	; (7084 <system_gclk_gen_set_config+0xa0>)
    703c:	684b      	ldr	r3, [r1, #4]
    703e:	4013      	ands	r3, r2
	}

	while (system_gclk_is_syncing(generator)) {
    7040:	421e      	tst	r6, r3
    7042:	d1fb      	bne.n	703c <system_gclk_gen_set_config+0x58>
	cpu_irq_enter_critical();
    7044:	4b10      	ldr	r3, [pc, #64]	; (7088 <system_gclk_gen_set_config+0xa4>)
    7046:	4798      	blx	r3
    7048:	00a4      	lsls	r4, r4, #2
    704a:	4b0d      	ldr	r3, [pc, #52]	; (7080 <system_gclk_gen_set_config+0x9c>)
    704c:	469c      	mov	ip, r3
    704e:	4464      	add	r4, ip
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();

	GCLK->GENCTRL[generator].reg = new_genctrl_config | (GCLK->GENCTRL[generator].reg & GCLK_GENCTRL_GENEN);
    7050:	6a22      	ldr	r2, [r4, #32]
    7052:	2380      	movs	r3, #128	; 0x80
    7054:	005b      	lsls	r3, r3, #1
    7056:	401a      	ands	r2, r3
    7058:	432a      	orrs	r2, r5
    705a:	6222      	str	r2, [r4, #32]
	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    705c:	4661      	mov	r1, ip
    705e:	4a09      	ldr	r2, [pc, #36]	; (7084 <system_gclk_gen_set_config+0xa0>)
    7060:	684b      	ldr	r3, [r1, #4]
    7062:	4013      	ands	r3, r2

	while (system_gclk_is_syncing(generator)) {
    7064:	421e      	tst	r6, r3
    7066:	d1fb      	bne.n	7060 <system_gclk_gen_set_config+0x7c>
	cpu_irq_leave_critical();
    7068:	4b08      	ldr	r3, [pc, #32]	; (708c <system_gclk_gen_set_config+0xa8>)
    706a:	4798      	blx	r3
		/* Wait for synchronization */
	};

	system_interrupt_leave_critical_section();
}
    706c:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
    706e:	2200      	movs	r2, #0
    7070:	e7d5      	b.n	701e <system_gclk_gen_set_config+0x3a>
					(config->division_factor) << GCLK_GENCTRL_DIV_Pos;
    7072:	0400      	lsls	r0, r0, #16
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    7074:	2380      	movs	r3, #128	; 0x80
    7076:	009b      	lsls	r3, r3, #2
    7078:	4318      	orrs	r0, r3
    707a:	4305      	orrs	r5, r0
    707c:	e7d4      	b.n	7028 <system_gclk_gen_set_config+0x44>
    707e:	46c0      	nop			; (mov r8, r8)
    7080:	40001800 	.word	0x40001800
    7084:	000007fc 	.word	0x000007fc
    7088:	00004531 	.word	0x00004531
    708c:	00004571 	.word	0x00004571

00007090 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    7090:	b510      	push	{r4, lr}
    7092:	0004      	movs	r4, r0
	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    7094:	2204      	movs	r2, #4
    7096:	4082      	lsls	r2, r0
    7098:	4809      	ldr	r0, [pc, #36]	; (70c0 <system_gclk_gen_enable+0x30>)
    709a:	490a      	ldr	r1, [pc, #40]	; (70c4 <system_gclk_gen_enable+0x34>)
    709c:	6843      	ldr	r3, [r0, #4]
    709e:	400b      	ands	r3, r1
	while (system_gclk_is_syncing(generator)) {
    70a0:	421a      	tst	r2, r3
    70a2:	d1fb      	bne.n	709c <system_gclk_gen_enable+0xc>
	cpu_irq_enter_critical();
    70a4:	4b08      	ldr	r3, [pc, #32]	; (70c8 <system_gclk_gen_enable+0x38>)
    70a6:	4798      	blx	r3
    70a8:	00a4      	lsls	r4, r4, #2
    70aa:	4b05      	ldr	r3, [pc, #20]	; (70c0 <system_gclk_gen_enable+0x30>)
    70ac:	469c      	mov	ip, r3
    70ae:	4464      	add	r4, ip
	};

	system_interrupt_enter_critical_section();

	/* Enable generator */
	GCLK->GENCTRL[generator].reg |= GCLK_GENCTRL_GENEN;
    70b0:	6a22      	ldr	r2, [r4, #32]
    70b2:	2380      	movs	r3, #128	; 0x80
    70b4:	005b      	lsls	r3, r3, #1
    70b6:	4313      	orrs	r3, r2
    70b8:	6223      	str	r3, [r4, #32]
	cpu_irq_leave_critical();
    70ba:	4b04      	ldr	r3, [pc, #16]	; (70cc <system_gclk_gen_enable+0x3c>)
    70bc:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    70be:	bd10      	pop	{r4, pc}
    70c0:	40001800 	.word	0x40001800
    70c4:	000007fc 	.word	0x000007fc
    70c8:	00004531 	.word	0x00004531
    70cc:	00004571 	.word	0x00004571

000070d0 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    70d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    70d2:	0004      	movs	r4, r0
	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    70d4:	2204      	movs	r2, #4
    70d6:	4082      	lsls	r2, r0
    70d8:	4812      	ldr	r0, [pc, #72]	; (7124 <system_gclk_gen_get_hz+0x54>)
    70da:	4913      	ldr	r1, [pc, #76]	; (7128 <system_gclk_gen_get_hz+0x58>)
    70dc:	6843      	ldr	r3, [r0, #4]
    70de:	400b      	ands	r3, r1
	while (system_gclk_is_syncing(generator)) {
    70e0:	421a      	tst	r2, r3
    70e2:	d1fb      	bne.n	70dc <system_gclk_gen_get_hz+0xc>
	cpu_irq_enter_critical();
    70e4:	4b11      	ldr	r3, [pc, #68]	; (712c <system_gclk_gen_get_hz+0x5c>)
    70e6:	4798      	blx	r3

	system_interrupt_enter_critical_section();

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL[generator].bit.SRC);
    70e8:	4f0e      	ldr	r7, [pc, #56]	; (7124 <system_gclk_gen_get_hz+0x54>)
    70ea:	3408      	adds	r4, #8
    70ec:	00a4      	lsls	r4, r4, #2
    70ee:	59e0      	ldr	r0, [r4, r7]
    70f0:	0700      	lsls	r0, r0, #28
    70f2:	0f00      	lsrs	r0, r0, #28
	uint32_t gen_input_hz = system_clock_source_get_hz(
    70f4:	4b0e      	ldr	r3, [pc, #56]	; (7130 <system_gclk_gen_get_hz+0x60>)
    70f6:	4798      	blx	r3
    70f8:	0006      	movs	r6, r0

	uint8_t divsel = GCLK->GENCTRL[generator].bit.DIVSEL;
    70fa:	59e5      	ldr	r5, [r4, r7]
    70fc:	04ed      	lsls	r5, r5, #19
    70fe:	0fed      	lsrs	r5, r5, #31
	uint32_t divider = GCLK->GENCTRL[generator].bit.DIV;
    7100:	59e4      	ldr	r4, [r4, r7]
    7102:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
    7104:	4b0b      	ldr	r3, [pc, #44]	; (7134 <system_gclk_gen_get_hz+0x64>)
    7106:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    7108:	2d00      	cmp	r5, #0
    710a:	d107      	bne.n	711c <system_gclk_gen_get_hz+0x4c>
    710c:	2c01      	cmp	r4, #1
    710e:	d907      	bls.n	7120 <system_gclk_gen_get_hz+0x50>
		gen_input_hz /= divider;
    7110:	0021      	movs	r1, r4
    7112:	0030      	movs	r0, r6
    7114:	4b08      	ldr	r3, [pc, #32]	; (7138 <system_gclk_gen_get_hz+0x68>)
    7116:	4798      	blx	r3
    7118:	0006      	movs	r6, r0
    711a:	e001      	b.n	7120 <system_gclk_gen_get_hz+0x50>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    711c:	3401      	adds	r4, #1
    711e:	40e6      	lsrs	r6, r4
	}

	return gen_input_hz;
}
    7120:	0030      	movs	r0, r6
    7122:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7124:	40001800 	.word	0x40001800
    7128:	000007fc 	.word	0x000007fc
    712c:	00004531 	.word	0x00004531
    7130:	00006a65 	.word	0x00006a65
    7134:	00004571 	.word	0x00004571
    7138:	000165ad 	.word	0x000165ad

0000713c <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    713c:	b510      	push	{r4, lr}
    713e:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    7140:	4b09      	ldr	r3, [pc, #36]	; (7168 <system_gclk_chan_enable+0x2c>)
    7142:	4798      	blx	r3
    7144:	00a0      	lsls	r0, r4, #2
    7146:	4b09      	ldr	r3, [pc, #36]	; (716c <system_gclk_chan_enable+0x30>)
    7148:	469c      	mov	ip, r3
    714a:	4460      	add	r0, ip
	system_interrupt_enter_critical_section();

	/* Enable the peripheral channel */
	GCLK->PCHCTRL[channel].reg |= GCLK_PCHCTRL_CHEN;
    714c:	2280      	movs	r2, #128	; 0x80
    714e:	5883      	ldr	r3, [r0, r2]
    7150:	2140      	movs	r1, #64	; 0x40
    7152:	430b      	orrs	r3, r1
    7154:	5083      	str	r3, [r0, r2]

	while (!(GCLK->PCHCTRL[channel].reg & GCLK_PCHCTRL_CHEN)) {
    7156:	3140      	adds	r1, #64	; 0x40
    7158:	3a40      	subs	r2, #64	; 0x40
    715a:	5843      	ldr	r3, [r0, r1]
    715c:	421a      	tst	r2, r3
    715e:	d0fc      	beq.n	715a <system_gclk_chan_enable+0x1e>
	cpu_irq_leave_critical();
    7160:	4b03      	ldr	r3, [pc, #12]	; (7170 <system_gclk_chan_enable+0x34>)
    7162:	4798      	blx	r3
		/* Wait for clock synchronization */
	}

	system_interrupt_leave_critical_section();
}
    7164:	bd10      	pop	{r4, pc}
    7166:	46c0      	nop			; (mov r8, r8)
    7168:	00004531 	.word	0x00004531
    716c:	40001800 	.word	0x40001800
    7170:	00004571 	.word	0x00004571

00007174 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    7174:	b510      	push	{r4, lr}
    7176:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    7178:	4b09      	ldr	r3, [pc, #36]	; (71a0 <system_gclk_chan_disable+0x2c>)
    717a:	4798      	blx	r3
    717c:	00a0      	lsls	r0, r4, #2
    717e:	4b09      	ldr	r3, [pc, #36]	; (71a4 <system_gclk_chan_disable+0x30>)
    7180:	469c      	mov	ip, r3
    7182:	4460      	add	r0, ip

	/* Sanity check WRTLOCK */
	Assert(!GCLK->PCHCTRL[channel].bit.WRTLOCK);

	/* Disable the peripheral channel */
	GCLK->PCHCTRL[channel].reg &= ~GCLK_PCHCTRL_CHEN;
    7184:	2280      	movs	r2, #128	; 0x80
    7186:	5883      	ldr	r3, [r0, r2]
    7188:	2140      	movs	r1, #64	; 0x40
    718a:	438b      	bics	r3, r1
    718c:	5083      	str	r3, [r0, r2]

	while (GCLK->PCHCTRL[channel].reg & GCLK_PCHCTRL_CHEN) {
    718e:	3140      	adds	r1, #64	; 0x40
    7190:	3a40      	subs	r2, #64	; 0x40
    7192:	5843      	ldr	r3, [r0, r1]
    7194:	421a      	tst	r2, r3
    7196:	d1fc      	bne.n	7192 <system_gclk_chan_disable+0x1e>
	cpu_irq_leave_critical();
    7198:	4b03      	ldr	r3, [pc, #12]	; (71a8 <system_gclk_chan_disable+0x34>)
    719a:	4798      	blx	r3
		/* Wait for clock synchronization */
	}

	system_interrupt_leave_critical_section();
}
    719c:	bd10      	pop	{r4, pc}
    719e:	46c0      	nop			; (mov r8, r8)
    71a0:	00004531 	.word	0x00004531
    71a4:	40001800 	.word	0x40001800
    71a8:	00004571 	.word	0x00004571

000071ac <system_gclk_chan_set_config>:
{
    71ac:	b570      	push	{r4, r5, r6, lr}
    71ae:	0004      	movs	r4, r0
    71b0:	000d      	movs	r5, r1
	system_gclk_chan_disable(channel);
    71b2:	4b05      	ldr	r3, [pc, #20]	; (71c8 <system_gclk_chan_set_config+0x1c>)
    71b4:	4798      	blx	r3
	GCLK->PCHCTRL[channel].reg = GCLK_PCHCTRL_GEN(config->source_generator);
    71b6:	782a      	ldrb	r2, [r5, #0]
    71b8:	230f      	movs	r3, #15
    71ba:	4013      	ands	r3, r2
    71bc:	3420      	adds	r4, #32
    71be:	00a4      	lsls	r4, r4, #2
    71c0:	4a02      	ldr	r2, [pc, #8]	; (71cc <system_gclk_chan_set_config+0x20>)
    71c2:	50a3      	str	r3, [r4, r2]
}
    71c4:	bd70      	pop	{r4, r5, r6, pc}
    71c6:	46c0      	nop			; (mov r8, r8)
    71c8:	00007175 	.word	0x00007175
    71cc:	40001800 	.word	0x40001800

000071d0 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    71d0:	b510      	push	{r4, lr}
    71d2:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    71d4:	4b06      	ldr	r3, [pc, #24]	; (71f0 <system_gclk_chan_get_hz+0x20>)
    71d6:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();
	/* Select the requested generic clock channel */
	gen_id = GCLK->PCHCTRL[channel].bit.GEN;
    71d8:	3420      	adds	r4, #32
    71da:	00a4      	lsls	r4, r4, #2
    71dc:	4b05      	ldr	r3, [pc, #20]	; (71f4 <system_gclk_chan_get_hz+0x24>)
    71de:	58e4      	ldr	r4, [r4, r3]
    71e0:	0724      	lsls	r4, r4, #28
    71e2:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
    71e4:	4b04      	ldr	r3, [pc, #16]	; (71f8 <system_gclk_chan_get_hz+0x28>)
    71e6:	4798      	blx	r3
	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    71e8:	0020      	movs	r0, r4
    71ea:	4b04      	ldr	r3, [pc, #16]	; (71fc <system_gclk_chan_get_hz+0x2c>)
    71ec:	4798      	blx	r3
}
    71ee:	bd10      	pop	{r4, pc}
    71f0:	00004531 	.word	0x00004531
    71f4:	40001800 	.word	0x40001800
    71f8:	00004571 	.word	0x00004571
    71fc:	000070d1 	.word	0x000070d1

00007200 <system_interrupt_clear_pending>:
enum status_code system_interrupt_clear_pending(
		const enum system_interrupt_vector vector)
{
	enum status_code status = STATUS_OK;

	if (vector >= _SYSTEM_INTERRUPT_EXTERNAL_VECTOR_START) {
    7200:	2800      	cmp	r0, #0
    7202:	db08      	blt.n	7216 <system_interrupt_clear_pending+0x16>
		NVIC->ICPR[0] = (1 << vector);
    7204:	2301      	movs	r3, #1
    7206:	4083      	lsls	r3, r0
    7208:	22c0      	movs	r2, #192	; 0xc0
    720a:	0052      	lsls	r2, r2, #1
    720c:	4906      	ldr	r1, [pc, #24]	; (7228 <system_interrupt_clear_pending+0x28>)
    720e:	508b      	str	r3, [r1, r2]
	enum status_code status = STATUS_OK;
    7210:	2300      	movs	r3, #0
		Assert(false);
		status = STATUS_ERR_INVALID_ARG;
	}

	return status;
}
    7212:	0018      	movs	r0, r3
    7214:	4770      	bx	lr
		status = STATUS_ERR_INVALID_ARG;
    7216:	2317      	movs	r3, #23
	} else if (vector == SYSTEM_INTERRUPT_SYSTICK) {
    7218:	1c42      	adds	r2, r0, #1
    721a:	d1fa      	bne.n	7212 <system_interrupt_clear_pending+0x12>
		SCB->ICSR = SCB_ICSR_PENDSTCLR_Msk;
    721c:	2280      	movs	r2, #128	; 0x80
    721e:	0492      	lsls	r2, r2, #18
    7220:	4b02      	ldr	r3, [pc, #8]	; (722c <system_interrupt_clear_pending+0x2c>)
    7222:	605a      	str	r2, [r3, #4]
	enum status_code status = STATUS_OK;
    7224:	2300      	movs	r3, #0
    7226:	e7f4      	b.n	7212 <system_interrupt_clear_pending+0x12>
    7228:	e000e100 	.word	0xe000e100
    722c:	e000ed00 	.word	0xe000ed00

00007230 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    7230:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    7232:	78d3      	ldrb	r3, [r2, #3]
    7234:	2b00      	cmp	r3, #0
    7236:	d135      	bne.n	72a4 <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    7238:	7813      	ldrb	r3, [r2, #0]
    723a:	2b80      	cmp	r3, #128	; 0x80
    723c:	d029      	beq.n	7292 <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    723e:	061b      	lsls	r3, r3, #24
    7240:	2480      	movs	r4, #128	; 0x80
    7242:	0264      	lsls	r4, r4, #9
    7244:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    7246:	7854      	ldrb	r4, [r2, #1]
    7248:	2502      	movs	r5, #2
    724a:	43ac      	bics	r4, r5
    724c:	d106      	bne.n	725c <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    724e:	7894      	ldrb	r4, [r2, #2]
    7250:	2c00      	cmp	r4, #0
    7252:	d120      	bne.n	7296 <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
    7254:	2480      	movs	r4, #128	; 0x80
    7256:	02a4      	lsls	r4, r4, #10
    7258:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    725a:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    725c:	7854      	ldrb	r4, [r2, #1]
    725e:	3c01      	subs	r4, #1
    7260:	2c01      	cmp	r4, #1
    7262:	d91c      	bls.n	729e <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    7264:	040d      	lsls	r5, r1, #16
    7266:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    7268:	24a0      	movs	r4, #160	; 0xa0
    726a:	05e4      	lsls	r4, r4, #23
    726c:	432c      	orrs	r4, r5
    726e:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    7270:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    7272:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    7274:	24d0      	movs	r4, #208	; 0xd0
    7276:	0624      	lsls	r4, r4, #24
    7278:	432c      	orrs	r4, r5
    727a:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    727c:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    727e:	78d4      	ldrb	r4, [r2, #3]
    7280:	2c00      	cmp	r4, #0
    7282:	d122      	bne.n	72ca <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    7284:	035b      	lsls	r3, r3, #13
    7286:	d51c      	bpl.n	72c2 <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    7288:	7893      	ldrb	r3, [r2, #2]
    728a:	2b01      	cmp	r3, #1
    728c:	d01e      	beq.n	72cc <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
    728e:	6141      	str	r1, [r0, #20]
    7290:	e017      	b.n	72c2 <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
    7292:	2300      	movs	r3, #0
    7294:	e7d7      	b.n	7246 <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    7296:	24c0      	movs	r4, #192	; 0xc0
    7298:	02e4      	lsls	r4, r4, #11
    729a:	4323      	orrs	r3, r4
    729c:	e7dd      	b.n	725a <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    729e:	4c0d      	ldr	r4, [pc, #52]	; (72d4 <_system_pinmux_config+0xa4>)
    72a0:	4023      	ands	r3, r4
    72a2:	e7df      	b.n	7264 <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
    72a4:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    72a6:	040c      	lsls	r4, r1, #16
    72a8:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    72aa:	23a0      	movs	r3, #160	; 0xa0
    72ac:	05db      	lsls	r3, r3, #23
    72ae:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    72b0:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    72b2:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    72b4:	23d0      	movs	r3, #208	; 0xd0
    72b6:	061b      	lsls	r3, r3, #24
    72b8:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    72ba:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
    72bc:	78d3      	ldrb	r3, [r2, #3]
    72be:	2b00      	cmp	r3, #0
    72c0:	d103      	bne.n	72ca <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    72c2:	7853      	ldrb	r3, [r2, #1]
    72c4:	3b01      	subs	r3, #1
    72c6:	2b01      	cmp	r3, #1
    72c8:	d902      	bls.n	72d0 <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
    72ca:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
    72cc:	6181      	str	r1, [r0, #24]
    72ce:	e7f8      	b.n	72c2 <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
    72d0:	6081      	str	r1, [r0, #8]
}
    72d2:	e7fa      	b.n	72ca <_system_pinmux_config+0x9a>
    72d4:	fffbffff 	.word	0xfffbffff

000072d8 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    72d8:	b510      	push	{r4, lr}
    72da:	000a      	movs	r2, r1
	if (port_index < PORT_INST_NUM) {
    72dc:	09c1      	lsrs	r1, r0, #7
		return NULL;
    72de:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    72e0:	2900      	cmp	r1, #0
    72e2:	d104      	bne.n	72ee <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    72e4:	0943      	lsrs	r3, r0, #5
    72e6:	01db      	lsls	r3, r3, #7
    72e8:	4905      	ldr	r1, [pc, #20]	; (7300 <system_pinmux_pin_set_config+0x28>)
    72ea:	468c      	mov	ip, r1
    72ec:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    72ee:	241f      	movs	r4, #31
    72f0:	4020      	ands	r0, r4
    72f2:	2101      	movs	r1, #1
    72f4:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
    72f6:	0018      	movs	r0, r3
    72f8:	4b02      	ldr	r3, [pc, #8]	; (7304 <system_pinmux_pin_set_config+0x2c>)
    72fa:	4798      	blx	r3
}
    72fc:	bd10      	pop	{r4, pc}
    72fe:	46c0      	nop			; (mov r8, r8)
    7300:	40002800 	.word	0x40002800
    7304:	00007231 	.word	0x00007231

00007308 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    7308:	4770      	bx	lr
	...

0000730c <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    730c:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    730e:	4b05      	ldr	r3, [pc, #20]	; (7324 <system_init+0x18>)
    7310:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    7312:	4b05      	ldr	r3, [pc, #20]	; (7328 <system_init+0x1c>)
    7314:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    7316:	4b05      	ldr	r3, [pc, #20]	; (732c <system_init+0x20>)
    7318:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    731a:	4b05      	ldr	r3, [pc, #20]	; (7330 <system_init+0x24>)
    731c:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    731e:	4b05      	ldr	r3, [pc, #20]	; (7334 <system_init+0x28>)
    7320:	4798      	blx	r3
}
    7322:	bd10      	pop	{r4, pc}
    7324:	00006d8d 	.word	0x00006d8d
    7328:	000045a1 	.word	0x000045a1
    732c:	00007309 	.word	0x00007309
    7330:	00004955 	.word	0x00004955
    7334:	00007309 	.word	0x00007309

00007338 <tc_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    7338:	1c93      	adds	r3, r2, #2
    733a:	009b      	lsls	r3, r3, #2
    733c:	5019      	str	r1, [r3, r0]

	/* Set the bit corresponding to the callback_type */
	if (callback_type == TC_CALLBACK_CC_CHANNEL0) {
    733e:	2a02      	cmp	r2, #2
    7340:	d009      	beq.n	7356 <tc_register_callback+0x1e>
		module->register_callback_mask |= TC_INTFLAG_MC(1);
	}
	else if (callback_type == TC_CALLBACK_CC_CHANNEL1) {
    7342:	2a03      	cmp	r2, #3
    7344:	d00c      	beq.n	7360 <tc_register_callback+0x28>
		module->register_callback_mask |= TC_INTFLAG_MC(2);
	}
	else {
		module->register_callback_mask |= (1 << callback_type);
    7346:	2301      	movs	r3, #1
    7348:	4093      	lsls	r3, r2
    734a:	001a      	movs	r2, r3
    734c:	7e03      	ldrb	r3, [r0, #24]
    734e:	4313      	orrs	r3, r2
    7350:	7603      	strb	r3, [r0, #24]
	}
	return STATUS_OK;
}
    7352:	2000      	movs	r0, #0
    7354:	4770      	bx	lr
		module->register_callback_mask |= TC_INTFLAG_MC(1);
    7356:	7e03      	ldrb	r3, [r0, #24]
    7358:	2210      	movs	r2, #16
    735a:	4313      	orrs	r3, r2
    735c:	7603      	strb	r3, [r0, #24]
    735e:	e7f8      	b.n	7352 <tc_register_callback+0x1a>
		module->register_callback_mask |= TC_INTFLAG_MC(2);
    7360:	7e03      	ldrb	r3, [r0, #24]
    7362:	2220      	movs	r2, #32
    7364:	4313      	orrs	r3, r2
    7366:	7603      	strb	r3, [r0, #24]
    7368:	e7f3      	b.n	7352 <tc_register_callback+0x1a>
	...

0000736c <_tc_interrupt_handler>:
 * \param[in]  instance  ID of the TC instance calling the interrupt
 *                       handler
 */
void _tc_interrupt_handler(
		uint8_t instance)
{
    736c:	b570      	push	{r4, r5, r6, lr}
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */
	struct tc_module *module
    736e:	0080      	lsls	r0, r0, #2
    7370:	4b16      	ldr	r3, [pc, #88]	; (73cc <_tc_interrupt_handler+0x60>)
    7372:	58c4      	ldr	r4, [r0, r3]
			= (struct tc_module *)_tc_instances[instance];

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
    7374:	6823      	ldr	r3, [r4, #0]
    7376:	7a9d      	ldrb	r5, [r3, #10]
    7378:	7e22      	ldrb	r2, [r4, #24]
    737a:	7e63      	ldrb	r3, [r4, #25]
    737c:	4013      	ands	r3, r2
    737e:	401d      	ands	r5, r3
			module->register_callback_mask &
			module->enable_callback_mask;

	/* Check if an Overflow interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
    7380:	07eb      	lsls	r3, r5, #31
    7382:	d406      	bmi.n	7392 <_tc_interrupt_handler+0x26>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
	}

	/* Check if an Error interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_ERR) {
    7384:	07ab      	lsls	r3, r5, #30
    7386:	d40b      	bmi.n	73a0 <_tc_interrupt_handler+0x34>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
	}

	/* Check if an Match/Capture Channel 0 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(1)) {
    7388:	06eb      	lsls	r3, r5, #27
    738a:	d410      	bmi.n	73ae <_tc_interrupt_handler+0x42>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
	}

	/* Check if an Match/Capture Channel 1 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(2)) {
    738c:	06ab      	lsls	r3, r5, #26
    738e:	d415      	bmi.n	73bc <_tc_interrupt_handler+0x50>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
	}
}
    7390:	bd70      	pop	{r4, r5, r6, pc}
		(module->callback[TC_CALLBACK_OVERFLOW])(module);
    7392:	0020      	movs	r0, r4
    7394:	68a3      	ldr	r3, [r4, #8]
    7396:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
    7398:	2301      	movs	r3, #1
    739a:	6822      	ldr	r2, [r4, #0]
    739c:	7293      	strb	r3, [r2, #10]
    739e:	e7f1      	b.n	7384 <_tc_interrupt_handler+0x18>
		(module->callback[TC_CALLBACK_ERROR])(module);
    73a0:	0020      	movs	r0, r4
    73a2:	68e3      	ldr	r3, [r4, #12]
    73a4:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
    73a6:	2302      	movs	r3, #2
    73a8:	6822      	ldr	r2, [r4, #0]
    73aa:	7293      	strb	r3, [r2, #10]
    73ac:	e7ec      	b.n	7388 <_tc_interrupt_handler+0x1c>
		(module->callback[TC_CALLBACK_CC_CHANNEL0])(module);
    73ae:	0020      	movs	r0, r4
    73b0:	6923      	ldr	r3, [r4, #16]
    73b2:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
    73b4:	2310      	movs	r3, #16
    73b6:	6822      	ldr	r2, [r4, #0]
    73b8:	7293      	strb	r3, [r2, #10]
    73ba:	e7e7      	b.n	738c <_tc_interrupt_handler+0x20>
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
    73bc:	0020      	movs	r0, r4
    73be:	6963      	ldr	r3, [r4, #20]
    73c0:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
    73c2:	6823      	ldr	r3, [r4, #0]
    73c4:	2220      	movs	r2, #32
    73c6:	729a      	strb	r2, [r3, #10]
}
    73c8:	e7e2      	b.n	7390 <_tc_interrupt_handler+0x24>
    73ca:	46c0      	nop			; (mov r8, r8)
    73cc:	20002250 	.word	0x20002250

000073d0 <TC0_Handler>:
	MRECURSION(TC_INST_NUM, _TC_INTERRUPT_HANDLER, TC_INST_MAX_ID)
    73d0:	b510      	push	{r4, lr}
    73d2:	2000      	movs	r0, #0
    73d4:	4b01      	ldr	r3, [pc, #4]	; (73dc <TC0_Handler+0xc>)
    73d6:	4798      	blx	r3
    73d8:	bd10      	pop	{r4, pc}
    73da:	46c0      	nop			; (mov r8, r8)
    73dc:	0000736d 	.word	0x0000736d

000073e0 <TC1_Handler>:
    73e0:	b510      	push	{r4, lr}
    73e2:	2001      	movs	r0, #1
    73e4:	4b01      	ldr	r3, [pc, #4]	; (73ec <TC1_Handler+0xc>)
    73e6:	4798      	blx	r3
    73e8:	bd10      	pop	{r4, pc}
    73ea:	46c0      	nop			; (mov r8, r8)
    73ec:	0000736d 	.word	0x0000736d

000073f0 <TC2_Handler>:
    73f0:	b510      	push	{r4, lr}
    73f2:	2002      	movs	r0, #2
    73f4:	4b01      	ldr	r3, [pc, #4]	; (73fc <TC2_Handler+0xc>)
    73f6:	4798      	blx	r3
    73f8:	bd10      	pop	{r4, pc}
    73fa:	46c0      	nop			; (mov r8, r8)
    73fc:	0000736d 	.word	0x0000736d

00007400 <TC3_Handler>:
    7400:	b510      	push	{r4, lr}
    7402:	2003      	movs	r0, #3
    7404:	4b01      	ldr	r3, [pc, #4]	; (740c <TC3_Handler+0xc>)
    7406:	4798      	blx	r3
    7408:	bd10      	pop	{r4, pc}
    740a:	46c0      	nop			; (mov r8, r8)
    740c:	0000736d 	.word	0x0000736d

00007410 <TC4_Handler>:
    7410:	b510      	push	{r4, lr}
    7412:	2004      	movs	r0, #4
    7414:	4b01      	ldr	r3, [pc, #4]	; (741c <TC4_Handler+0xc>)
    7416:	4798      	blx	r3
    7418:	bd10      	pop	{r4, pc}
    741a:	46c0      	nop			; (mov r8, r8)
    741c:	0000736d 	.word	0x0000736d

00007420 <_tc_get_inst_index>:
 *
 * \return Index of the given TC module instance.
 */
uint8_t _tc_get_inst_index(
		Tc *const hw)
{
    7420:	b530      	push	{r4, r5, lr}
    7422:	b087      	sub	sp, #28
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
    7424:	a901      	add	r1, sp, #4
    7426:	4b0c      	ldr	r3, [pc, #48]	; (7458 <_tc_get_inst_index+0x38>)
    7428:	000a      	movs	r2, r1
    742a:	cb32      	ldmia	r3!, {r1, r4, r5}
    742c:	c232      	stmia	r2!, {r1, r4, r5}
    742e:	cb12      	ldmia	r3!, {r1, r4}
    7430:	c212      	stmia	r2!, {r1, r4}

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
		if (hw == tc_modules[i]) {
    7432:	9b01      	ldr	r3, [sp, #4]
    7434:	4298      	cmp	r0, r3
    7436:	d00b      	beq.n	7450 <_tc_get_inst_index+0x30>
    7438:	2301      	movs	r3, #1
    743a:	a901      	add	r1, sp, #4
    743c:	009a      	lsls	r2, r3, #2
    743e:	5852      	ldr	r2, [r2, r1]
    7440:	4282      	cmp	r2, r0
    7442:	d006      	beq.n	7452 <_tc_get_inst_index+0x32>
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    7444:	3301      	adds	r3, #1
    7446:	2b05      	cmp	r3, #5
    7448:	d1f8      	bne.n	743c <_tc_get_inst_index+0x1c>
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
    744a:	2000      	movs	r0, #0
}
    744c:	b007      	add	sp, #28
    744e:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    7450:	2300      	movs	r3, #0
			return i;
    7452:	b2d8      	uxtb	r0, r3
    7454:	e7fa      	b.n	744c <_tc_get_inst_index+0x2c>
    7456:	46c0      	nop			; (mov r8, r8)
    7458:	0001fba8 	.word	0x0001fba8

0000745c <tc_init>:
 */
enum status_code tc_init(
		struct tc_module *const module_inst,
		Tc *const hw,
		const struct tc_config *const config)
{
    745c:	b5f0      	push	{r4, r5, r6, r7, lr}
    745e:	46c6      	mov	lr, r8
    7460:	b500      	push	{lr}
    7462:	b08e      	sub	sp, #56	; 0x38
    7464:	0004      	movs	r4, r0
    7466:	000d      	movs	r5, r1
    7468:	0016      	movs	r6, r2
	uint32_t ctrla_tmp = 0;
	/* Temporary variable to hold all updates to the CTRLBSET
	 * register before they are written to it */
	uint8_t ctrlbset_tmp = 0;
	/* Temporary variable to hold TC instance number */
	uint8_t instance = _tc_get_inst_index(hw);
    746a:	0008      	movs	r0, r1
    746c:	4bae      	ldr	r3, [pc, #696]	; (7728 <tc_init+0x2cc>)
    746e:	4798      	blx	r3
    7470:	4680      	mov	r8, r0
									SYSTEM_CLOCK_APB_APBC, MCLK_APBCMASK_TC2,
									SYSTEM_CLOCK_APB_APBC, MCLK_APBCMASK_TC3,
									SYSTEM_CLOCK_APB_APBC, MCLK_APBCMASK_TC4};
#elif (SAML21J) || (SAMR34J) || (SAMR35J) || (WLR089U0)
	/* Array of GLCK ID for different TC instances */
	uint8_t inst_gclk_id[] = {TC0_GCLK_ID, TC1_GCLK_ID, TC2_GCLK_ID, TC3_GCLK_ID, TC4_GCLK_ID};
    7472:	ab0c      	add	r3, sp, #48	; 0x30
    7474:	221b      	movs	r2, #27
    7476:	701a      	strb	r2, [r3, #0]
    7478:	705a      	strb	r2, [r3, #1]
    747a:	3201      	adds	r2, #1
    747c:	709a      	strb	r2, [r3, #2]
    747e:	70da      	strb	r2, [r3, #3]
    7480:	3201      	adds	r2, #1
    7482:	711a      	strb	r2, [r3, #4]
	/* Array of MCLK APB mask bit position for different TC instances */
	uint32_t inst_mclk_apbmask[] = {SYSTEM_CLOCK_APB_APBC, MCLK_APBCMASK_TC0,
    7484:	a902      	add	r1, sp, #8
    7486:	4ba9      	ldr	r3, [pc, #676]	; (772c <tc_init+0x2d0>)
    7488:	3314      	adds	r3, #20
    748a:	000a      	movs	r2, r1
    748c:	cb83      	ldmia	r3!, {r0, r1, r7}
    748e:	c283      	stmia	r2!, {r0, r1, r7}
    7490:	cb83      	ldmia	r3!, {r0, r1, r7}
    7492:	c283      	stmia	r2!, {r0, r1, r7}
    7494:	cb83      	ldmia	r3!, {r0, r1, r7}
    7496:	c283      	stmia	r2!, {r0, r1, r7}
    7498:	681b      	ldr	r3, [r3, #0]
    749a:	6013      	str	r3, [r2, #0]
	struct system_gclk_chan_config gclk_chan_config;

#if TC_ASYNC == true
	/* Initialize parameters */
	for (uint8_t i = 0; i < TC_CALLBACK_N; i++) {
		module_inst->callback[i]        = NULL;
    749c:	2300      	movs	r3, #0
    749e:	60a3      	str	r3, [r4, #8]
    74a0:	60e3      	str	r3, [r4, #12]
    74a2:	6123      	str	r3, [r4, #16]
    74a4:	6163      	str	r3, [r4, #20]
	}
	module_inst->register_callback_mask     = 0x00;
    74a6:	7623      	strb	r3, [r4, #24]
	module_inst->enable_callback_mask       = 0x00;
    74a8:	7663      	strb	r3, [r4, #25]

	/* Register this instance for callbacks*/
	_tc_instances[instance] = module_inst;
    74aa:	4643      	mov	r3, r8
    74ac:	009a      	lsls	r2, r3, #2
    74ae:	4ba0      	ldr	r3, [pc, #640]	; (7730 <tc_init+0x2d4>)
    74b0:	50d4      	str	r4, [r2, r3]
#endif

	/* Associate the given device instance with the hardware module */
	module_inst->hw = hw;
    74b2:	6025      	str	r5, [r4, #0]

	module_inst->double_buffering_enabled = config->double_buffering_enabled;
    74b4:	2334      	movs	r3, #52	; 0x34
    74b6:	5cf3      	ldrb	r3, [r6, r3]
    74b8:	76a3      	strb	r3, [r4, #26]

	/* Check if odd numbered TC modules are being configured in 32-bit
	 * counter size. Only even numbered counters are allowed to be
	 * configured in 32-bit counter size.
	 */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
    74ba:	78f3      	ldrb	r3, [r6, #3]
    74bc:	2b08      	cmp	r3, #8
    74be:	d008      	beq.n	74d2 <tc_init+0x76>
	}

	/* Make the counter size variable in the module_inst struct reflect
	 * the counter size in the module
	 */
	module_inst->counter_size = config->counter_size;
    74c0:	7123      	strb	r3, [r4, #4]

	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
    74c2:	682b      	ldr	r3, [r5, #0]
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
    74c4:	2005      	movs	r0, #5
	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
    74c6:	07db      	lsls	r3, r3, #31
    74c8:	d508      	bpl.n	74dc <tc_init+0x80>
			return STATUS_OK;
	}

	Assert(false);
	return STATUS_ERR_INVALID_ARG;
}
    74ca:	b00e      	add	sp, #56	; 0x38
    74cc:	bc04      	pop	{r2}
    74ce:	4690      	mov	r8, r2
    74d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return STATUS_ERR_INVALID_ARG;
    74d2:	2017      	movs	r0, #23
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
    74d4:	4642      	mov	r2, r8
    74d6:	07d2      	lsls	r2, r2, #31
    74d8:	d4f7      	bmi.n	74ca <tc_init+0x6e>
    74da:	e7f1      	b.n	74c0 <tc_init+0x64>
	if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE) {
    74dc:	7aeb      	ldrb	r3, [r5, #11]
		return STATUS_ERR_DENIED;
    74de:	3017      	adds	r0, #23
	if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE) {
    74e0:	079b      	lsls	r3, r3, #30
    74e2:	d4f2      	bmi.n	74ca <tc_init+0x6e>
	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_ENABLE) {
    74e4:	682b      	ldr	r3, [r5, #0]
    74e6:	079b      	lsls	r3, r3, #30
    74e8:	d4ef      	bmi.n	74ca <tc_init+0x6e>
	if (config->pwm_channel[0].enabled) {
    74ea:	7c33      	ldrb	r3, [r6, #16]
    74ec:	2b00      	cmp	r3, #0
    74ee:	d112      	bne.n	7516 <tc_init+0xba>
	if (config->pwm_channel[1].enabled) {
    74f0:	7f33      	ldrb	r3, [r6, #28]
    74f2:	2b00      	cmp	r3, #0
    74f4:	d11b      	bne.n	752e <tc_init+0xd2>
	system_apb_clock_set_mask((enum system_clock_apb_bus)inst_mclk_apbmask[instance*2],
    74f6:	4643      	mov	r3, r8
    74f8:	005a      	lsls	r2, r3, #1
    74fa:	a902      	add	r1, sp, #8
    74fc:	1c53      	adds	r3, r2, #1
    74fe:	009b      	lsls	r3, r3, #2
    7500:	5858      	ldr	r0, [r3, r1]
    7502:	4643      	mov	r3, r8
    7504:	00db      	lsls	r3, r3, #3
    7506:	585b      	ldr	r3, [r3, r1]
	switch (bus) {
    7508:	b2d9      	uxtb	r1, r3
    750a:	2904      	cmp	r1, #4
    750c:	d823      	bhi.n	7556 <tc_init+0xfa>
    750e:	008b      	lsls	r3, r1, #2
    7510:	4988      	ldr	r1, [pc, #544]	; (7734 <tc_init+0x2d8>)
    7512:	58cb      	ldr	r3, [r1, r3]
    7514:	469f      	mov	pc, r3
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    7516:	a901      	add	r1, sp, #4
    7518:	2301      	movs	r3, #1
    751a:	708b      	strb	r3, [r1, #2]
	config->powersave    = false;
    751c:	2200      	movs	r2, #0
    751e:	70ca      	strb	r2, [r1, #3]
		pin_config.mux_position = config->pwm_channel[0].pin_mux;
    7520:	7e32      	ldrb	r2, [r6, #24]
    7522:	700a      	strb	r2, [r1, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    7524:	704b      	strb	r3, [r1, #1]
		system_pinmux_pin_set_config(
    7526:	7d30      	ldrb	r0, [r6, #20]
    7528:	4b83      	ldr	r3, [pc, #524]	; (7738 <tc_init+0x2dc>)
    752a:	4798      	blx	r3
    752c:	e7e0      	b.n	74f0 <tc_init+0x94>
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    752e:	a901      	add	r1, sp, #4
    7530:	2301      	movs	r3, #1
    7532:	708b      	strb	r3, [r1, #2]
	config->powersave    = false;
    7534:	2200      	movs	r2, #0
    7536:	70ca      	strb	r2, [r1, #3]
		pin_config.mux_position = config->pwm_channel[1].pin_mux;
    7538:	3224      	adds	r2, #36	; 0x24
    753a:	18b2      	adds	r2, r6, r2
    753c:	7812      	ldrb	r2, [r2, #0]
    753e:	700a      	strb	r2, [r1, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    7540:	704b      	strb	r3, [r1, #1]
		system_pinmux_pin_set_config(
    7542:	331f      	adds	r3, #31
    7544:	18f3      	adds	r3, r6, r3
    7546:	7818      	ldrb	r0, [r3, #0]
    7548:	4b7b      	ldr	r3, [pc, #492]	; (7738 <tc_init+0x2dc>)
    754a:	4798      	blx	r3
    754c:	e7d3      	b.n	74f6 <tc_init+0x9a>
			MCLK->APBAMASK.reg |= mask;
    754e:	497b      	ldr	r1, [pc, #492]	; (773c <tc_init+0x2e0>)
    7550:	694b      	ldr	r3, [r1, #20]
    7552:	4318      	orrs	r0, r3
    7554:	6148      	str	r0, [r1, #20]
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) && (instance+1 < TC_INST_NUM))
    7556:	78f3      	ldrb	r3, [r6, #3]
    7558:	2b08      	cmp	r3, #8
    755a:	d100      	bne.n	755e <tc_init+0x102>
    755c:	e086      	b.n	766c <tc_init+0x210>
	gclk_chan_config.source_generator = config->clock_source;
    755e:	7833      	ldrb	r3, [r6, #0]
    7560:	466a      	mov	r2, sp
    7562:	7013      	strb	r3, [r2, #0]
	system_gclk_chan_set_config(inst_gclk_id[instance], &gclk_chan_config);
    7564:	ab0c      	add	r3, sp, #48	; 0x30
    7566:	4642      	mov	r2, r8
    7568:	5c9f      	ldrb	r7, [r3, r2]
    756a:	4669      	mov	r1, sp
    756c:	0038      	movs	r0, r7
    756e:	4b74      	ldr	r3, [pc, #464]	; (7740 <tc_init+0x2e4>)
    7570:	4798      	blx	r3
	system_gclk_chan_enable(inst_gclk_id[instance]);
    7572:	0038      	movs	r0, r7
    7574:	4b73      	ldr	r3, [pc, #460]	; (7744 <tc_init+0x2e8>)
    7576:	4798      	blx	r3
			(uint32_t)config->counter_size |
    7578:	78f3      	ldrb	r3, [r6, #3]
    757a:	79f2      	ldrb	r2, [r6, #7]
    757c:	4313      	orrs	r3, r2
			(uint32_t)config->clock_prescaler;
    757e:	88b2      	ldrh	r2, [r6, #4]
	ctrla_tmp =
    7580:	4313      	orrs	r3, r2
		if (config->enable_capture_on_channel[i] == true) {
    7582:	7a72      	ldrb	r2, [r6, #9]
    7584:	2a00      	cmp	r2, #0
    7586:	d002      	beq.n	758e <tc_init+0x132>
			ctrla_tmp |= (TC_CTRLA_CAPTEN(1) << i);
    7588:	2280      	movs	r2, #128	; 0x80
    758a:	0252      	lsls	r2, r2, #9
    758c:	4313      	orrs	r3, r2
		if (config->enable_capture_on_channel[i] == true) {
    758e:	7ab2      	ldrb	r2, [r6, #10]
    7590:	2a00      	cmp	r2, #0
    7592:	d002      	beq.n	759a <tc_init+0x13e>
			ctrla_tmp |= (TC_CTRLA_CAPTEN(1) << i);
    7594:	2280      	movs	r2, #128	; 0x80
    7596:	0292      	lsls	r2, r2, #10
    7598:	4313      	orrs	r3, r2
		if (config->enable_capture_on_IO[i] == true) {
    759a:	7af2      	ldrb	r2, [r6, #11]
    759c:	2a00      	cmp	r2, #0
    759e:	d002      	beq.n	75a6 <tc_init+0x14a>
			ctrla_tmp |= (TC_CTRLA_COPEN(1) << i);
    75a0:	2280      	movs	r2, #128	; 0x80
    75a2:	0352      	lsls	r2, r2, #13
    75a4:	4313      	orrs	r3, r2
		if (config->enable_capture_on_IO[i] == true) {
    75a6:	7b32      	ldrb	r2, [r6, #12]
    75a8:	2a00      	cmp	r2, #0
    75aa:	d002      	beq.n	75b2 <tc_init+0x156>
			ctrla_tmp |= (TC_CTRLA_COPEN(1) << i);
    75ac:	2280      	movs	r2, #128	; 0x80
    75ae:	0392      	lsls	r2, r2, #14
    75b0:	4313      	orrs	r3, r2
	ctrla_tmp |= (config->run_in_standby << TC_CTRLA_RUNSTDBY_Pos)
    75b2:	7871      	ldrb	r1, [r6, #1]
    75b4:	0189      	lsls	r1, r1, #6
				|(config->on_demand << TC_CTRLA_ONDEMAND_Pos);
    75b6:	78b2      	ldrb	r2, [r6, #2]
    75b8:	01d2      	lsls	r2, r2, #7
    75ba:	4311      	orrs	r1, r2
	ctrla_tmp |= (config->run_in_standby << TC_CTRLA_RUNSTDBY_Pos)
    75bc:	4319      	orrs	r1, r3
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    75be:	6822      	ldr	r2, [r4, #0]

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30) || (SAMR34) || (SAMR35) || (WLR089)
	return (tc_module->SYNCBUSY.reg);
    75c0:	6913      	ldr	r3, [r2, #16]
	while (tc_is_syncing(module_inst)) {
    75c2:	2b00      	cmp	r3, #0
    75c4:	d1fc      	bne.n	75c0 <tc_init+0x164>
	hw->COUNT8.CTRLA.reg = ctrla_tmp;
    75c6:	6029      	str	r1, [r5, #0]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    75c8:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    75ca:	6913      	ldr	r3, [r2, #16]
	while (tc_is_syncing(module_inst)) {
    75cc:	2b00      	cmp	r3, #0
    75ce:	d1fc      	bne.n	75ca <tc_init+0x16e>
	hw->COUNT8.WAVE.reg = config->wave_generation;
    75d0:	79b3      	ldrb	r3, [r6, #6]
    75d2:	732b      	strb	r3, [r5, #12]
	if (config->oneshot) {
    75d4:	7b71      	ldrb	r1, [r6, #13]
		ctrlbset_tmp = TC_CTRLBSET_ONESHOT;
    75d6:	1e4b      	subs	r3, r1, #1
    75d8:	4199      	sbcs	r1, r3
    75da:	0089      	lsls	r1, r1, #2
	if (config->count_direction) {
    75dc:	7bb3      	ldrb	r3, [r6, #14]
    75de:	2b00      	cmp	r3, #0
    75e0:	d001      	beq.n	75e6 <tc_init+0x18a>
		ctrlbset_tmp |= TC_CTRLBSET_DIR;
    75e2:	2301      	movs	r3, #1
    75e4:	4319      	orrs	r1, r3
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    75e6:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    75e8:	6913      	ldr	r3, [r2, #16]
	while (tc_is_syncing(module_inst)) {
    75ea:	2b00      	cmp	r3, #0
    75ec:	d1fc      	bne.n	75e8 <tc_init+0x18c>
	hw->COUNT8.CTRLBCLR.reg = 0xFF;
    75ee:	33ff      	adds	r3, #255	; 0xff
    75f0:	712b      	strb	r3, [r5, #4]
	if (ctrlbset_tmp) {
    75f2:	2900      	cmp	r1, #0
    75f4:	d004      	beq.n	7600 <tc_init+0x1a4>
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    75f6:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    75f8:	6913      	ldr	r3, [r2, #16]
		while (tc_is_syncing(module_inst)) {
    75fa:	2b00      	cmp	r3, #0
    75fc:	d1fc      	bne.n	75f8 <tc_init+0x19c>
		hw->COUNT8.CTRLBSET.reg = ctrlbset_tmp;
    75fe:	7169      	strb	r1, [r5, #5]
	hw->COUNT8.DRVCTRL.reg = config->waveform_invert_output;
    7600:	7a33      	ldrb	r3, [r6, #8]
    7602:	736b      	strb	r3, [r5, #13]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    7604:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    7606:	6913      	ldr	r3, [r2, #16]
	while (tc_is_syncing(module_inst)) {
    7608:	2b00      	cmp	r3, #0
    760a:	d1fc      	bne.n	7606 <tc_init+0x1aa>
	switch (module_inst->counter_size) {
    760c:	7923      	ldrb	r3, [r4, #4]
    760e:	2b04      	cmp	r3, #4
    7610:	d059      	beq.n	76c6 <tc_init+0x26a>
    7612:	2b08      	cmp	r3, #8
    7614:	d074      	beq.n	7700 <tc_init+0x2a4>
	return STATUS_ERR_INVALID_ARG;
    7616:	2017      	movs	r0, #23
	switch (module_inst->counter_size) {
    7618:	2b00      	cmp	r3, #0
    761a:	d000      	beq.n	761e <tc_init+0x1c2>
    761c:	e755      	b.n	74ca <tc_init+0x6e>
    761e:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
    7620:	2b00      	cmp	r3, #0
    7622:	d1fc      	bne.n	761e <tc_init+0x1c2>
				= config->counter_16_bit.value;
    7624:	8d33      	ldrh	r3, [r6, #40]	; 0x28
    7626:	82ab      	strh	r3, [r5, #20]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    7628:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    762a:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
    762c:	2b00      	cmp	r3, #0
    762e:	d1fc      	bne.n	762a <tc_init+0x1ce>
					config->counter_16_bit.compare_capture_channel[0];
    7630:	8d73      	ldrh	r3, [r6, #42]	; 0x2a
			hw->COUNT16.CC[0].reg =
    7632:	83ab      	strh	r3, [r5, #28]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    7634:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    7636:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
    7638:	2b00      	cmp	r3, #0
    763a:	d1fc      	bne.n	7636 <tc_init+0x1da>
					config->counter_16_bit.compare_capture_channel[1];
    763c:	8db3      	ldrh	r3, [r6, #44]	; 0x2c
			hw->COUNT16.CC[1].reg =
    763e:	83eb      	strh	r3, [r5, #30]
			return STATUS_OK;
    7640:	2000      	movs	r0, #0
    7642:	e742      	b.n	74ca <tc_init+0x6e>
			MCLK->APBBMASK.reg |= mask;
    7644:	493d      	ldr	r1, [pc, #244]	; (773c <tc_init+0x2e0>)
    7646:	698b      	ldr	r3, [r1, #24]
    7648:	4318      	orrs	r0, r3
    764a:	6188      	str	r0, [r1, #24]
    764c:	e783      	b.n	7556 <tc_init+0xfa>
			MCLK->APBCMASK.reg |= mask;
    764e:	493b      	ldr	r1, [pc, #236]	; (773c <tc_init+0x2e0>)
    7650:	69cb      	ldr	r3, [r1, #28]
    7652:	4318      	orrs	r0, r3
    7654:	61c8      	str	r0, [r1, #28]
    7656:	e77e      	b.n	7556 <tc_init+0xfa>
			MCLK->APBDMASK.reg |= mask;
    7658:	4938      	ldr	r1, [pc, #224]	; (773c <tc_init+0x2e0>)
    765a:	6a0b      	ldr	r3, [r1, #32]
    765c:	4318      	orrs	r0, r3
    765e:	6208      	str	r0, [r1, #32]
    7660:	e779      	b.n	7556 <tc_init+0xfa>
			MCLK->APBEMASK.reg |= mask;
    7662:	4b36      	ldr	r3, [pc, #216]	; (773c <tc_init+0x2e0>)
    7664:	6a59      	ldr	r1, [r3, #36]	; 0x24
    7666:	4308      	orrs	r0, r1
    7668:	6258      	str	r0, [r3, #36]	; 0x24
    766a:	e774      	b.n	7556 <tc_init+0xfa>
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) && (instance+1 < TC_INST_NUM))
    766c:	4643      	mov	r3, r8
    766e:	3301      	adds	r3, #1
    7670:	2b04      	cmp	r3, #4
    7672:	dd00      	ble.n	7676 <tc_init+0x21a>
    7674:	e773      	b.n	755e <tc_init+0x102>
		system_apb_clock_set_mask((enum system_clock_apb_bus)inst_mclk_apbmask[(instance+1)*2],
    7676:	ab02      	add	r3, sp, #8
    7678:	1cd1      	adds	r1, r2, #3
    767a:	0089      	lsls	r1, r1, #2
    767c:	58c9      	ldr	r1, [r1, r3]
    767e:	3202      	adds	r2, #2
    7680:	0092      	lsls	r2, r2, #2
    7682:	58d3      	ldr	r3, [r2, r3]
	switch (bus) {
    7684:	b2da      	uxtb	r2, r3
    7686:	2a04      	cmp	r2, #4
    7688:	d900      	bls.n	768c <tc_init+0x230>
    768a:	e768      	b.n	755e <tc_init+0x102>
    768c:	0093      	lsls	r3, r2, #2
    768e:	4a2e      	ldr	r2, [pc, #184]	; (7748 <tc_init+0x2ec>)
    7690:	58d3      	ldr	r3, [r2, r3]
    7692:	469f      	mov	pc, r3
			MCLK->APBAMASK.reg |= mask;
    7694:	4a29      	ldr	r2, [pc, #164]	; (773c <tc_init+0x2e0>)
    7696:	6953      	ldr	r3, [r2, #20]
    7698:	4319      	orrs	r1, r3
    769a:	6151      	str	r1, [r2, #20]
    769c:	e75f      	b.n	755e <tc_init+0x102>
			MCLK->APBBMASK.reg |= mask;
    769e:	4a27      	ldr	r2, [pc, #156]	; (773c <tc_init+0x2e0>)
    76a0:	6993      	ldr	r3, [r2, #24]
    76a2:	4319      	orrs	r1, r3
    76a4:	6191      	str	r1, [r2, #24]
    76a6:	e75a      	b.n	755e <tc_init+0x102>
			MCLK->APBCMASK.reg |= mask;
    76a8:	4a24      	ldr	r2, [pc, #144]	; (773c <tc_init+0x2e0>)
    76aa:	69d3      	ldr	r3, [r2, #28]
    76ac:	4319      	orrs	r1, r3
    76ae:	61d1      	str	r1, [r2, #28]
    76b0:	e755      	b.n	755e <tc_init+0x102>
			MCLK->APBDMASK.reg |= mask;
    76b2:	4a22      	ldr	r2, [pc, #136]	; (773c <tc_init+0x2e0>)
    76b4:	6a13      	ldr	r3, [r2, #32]
    76b6:	4319      	orrs	r1, r3
    76b8:	6211      	str	r1, [r2, #32]
    76ba:	e750      	b.n	755e <tc_init+0x102>
			MCLK->APBEMASK.reg |= mask;
    76bc:	4b1f      	ldr	r3, [pc, #124]	; (773c <tc_init+0x2e0>)
    76be:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    76c0:	4311      	orrs	r1, r2
    76c2:	6259      	str	r1, [r3, #36]	; 0x24
    76c4:	e74b      	b.n	755e <tc_init+0x102>
    76c6:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
    76c8:	2b00      	cmp	r3, #0
    76ca:	d1fc      	bne.n	76c6 <tc_init+0x26a>
					config->counter_8_bit.value;
    76cc:	3328      	adds	r3, #40	; 0x28
    76ce:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.COUNT.reg =
    76d0:	752b      	strb	r3, [r5, #20]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    76d2:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    76d4:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
    76d6:	2b00      	cmp	r3, #0
    76d8:	d1fc      	bne.n	76d4 <tc_init+0x278>
					config->counter_8_bit.period;
    76da:	3329      	adds	r3, #41	; 0x29
    76dc:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.PER.reg =
    76de:	76eb      	strb	r3, [r5, #27]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    76e0:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    76e2:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
    76e4:	2b00      	cmp	r3, #0
    76e6:	d1fc      	bne.n	76e2 <tc_init+0x286>
					config->counter_8_bit.compare_capture_channel[0];
    76e8:	332a      	adds	r3, #42	; 0x2a
    76ea:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.CC[0].reg =
    76ec:	772b      	strb	r3, [r5, #28]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    76ee:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    76f0:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
    76f2:	2b00      	cmp	r3, #0
    76f4:	d1fc      	bne.n	76f0 <tc_init+0x294>
					config->counter_8_bit.compare_capture_channel[1];
    76f6:	332b      	adds	r3, #43	; 0x2b
    76f8:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.CC[1].reg =
    76fa:	776b      	strb	r3, [r5, #29]
			return STATUS_OK;
    76fc:	2000      	movs	r0, #0
    76fe:	e6e4      	b.n	74ca <tc_init+0x6e>
    7700:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
    7702:	2b00      	cmp	r3, #0
    7704:	d1fc      	bne.n	7700 <tc_init+0x2a4>
				= config->counter_32_bit.value;
    7706:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    7708:	616b      	str	r3, [r5, #20]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    770a:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    770c:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
    770e:	2b00      	cmp	r3, #0
    7710:	d1fc      	bne.n	770c <tc_init+0x2b0>
			hw->COUNT32.CC[0].reg =
    7712:	6af3      	ldr	r3, [r6, #44]	; 0x2c
    7714:	61eb      	str	r3, [r5, #28]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    7716:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    7718:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
    771a:	2b00      	cmp	r3, #0
    771c:	d1fc      	bne.n	7718 <tc_init+0x2bc>
					config->counter_32_bit.compare_capture_channel[1];
    771e:	6b33      	ldr	r3, [r6, #48]	; 0x30
			hw->COUNT32.CC[1].reg =
    7720:	622b      	str	r3, [r5, #32]
			return STATUS_OK;
    7722:	2000      	movs	r0, #0
    7724:	e6d1      	b.n	74ca <tc_init+0x6e>
    7726:	46c0      	nop			; (mov r8, r8)
    7728:	00007421 	.word	0x00007421
    772c:	0001fba8 	.word	0x0001fba8
    7730:	20002250 	.word	0x20002250
    7734:	0001fb80 	.word	0x0001fb80
    7738:	000072d9 	.word	0x000072d9
    773c:	40000400 	.word	0x40000400
    7740:	000071ad 	.word	0x000071ad
    7744:	0000713d 	.word	0x0000713d
    7748:	0001fb94 	.word	0x0001fb94

0000774c <tc_get_count_value>:
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    774c:	6802      	ldr	r2, [r0, #0]
	return (tc_module->SYNCBUSY.reg);
    774e:	6913      	ldr	r3, [r2, #16]

	while (tc_is_syncing(module_inst)) {
    7750:	2b00      	cmp	r3, #0
    7752:	d1fc      	bne.n	774e <tc_get_count_value+0x2>
		/* Wait for sync */
	}

	/* Make certain that there are no conflicting commands in the register */
	tc_module->CTRLBCLR.reg = TC_CTRLBCLR_CMD_NONE;
    7754:	7113      	strb	r3, [r2, #4]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    7756:	6801      	ldr	r1, [r0, #0]
	return (tc_module->SYNCBUSY.reg);
    7758:	690b      	ldr	r3, [r1, #16]

	while (tc_is_syncing(module_inst)) {
    775a:	2b00      	cmp	r3, #0
    775c:	d1fc      	bne.n	7758 <tc_get_count_value+0xc>
		/* Wait for sync */
	}

	/* Write command to execute */
	tc_module->CTRLBSET.reg = TC_CTRLBSET_CMD(TC_CTRLBSET_CMD_READSYNC_Val);
    775e:	3380      	adds	r3, #128	; 0x80
    7760:	7153      	strb	r3, [r2, #5]

	/* Read synchronization */
	tc_sync_read_count(module_inst);
	
	/* Get a pointer to the module's hardware instance */
	Tc *const tc_module = module_inst->hw;
    7762:	6802      	ldr	r2, [r0, #0]
	return (tc_module->SYNCBUSY.reg);
    7764:	6913      	ldr	r3, [r2, #16]

	while (tc_is_syncing(module_inst)) {
    7766:	2b00      	cmp	r3, #0
    7768:	d1fc      	bne.n	7764 <tc_get_count_value+0x18>
		/* Wait for sync */
	}

	/* Read from based on the TC counter size */
	switch (module_inst->counter_size) {
    776a:	7903      	ldrb	r3, [r0, #4]
    776c:	2b04      	cmp	r3, #4
    776e:	d005      	beq.n	777c <tc_get_count_value+0x30>
    7770:	2b08      	cmp	r3, #8
    7772:	d009      	beq.n	7788 <tc_get_count_value+0x3c>
		case TC_COUNTER_SIZE_32BIT:
			return tc_module->COUNT32.COUNT.reg;
	}

	Assert(false);
	return 0;
    7774:	2000      	movs	r0, #0
	switch (module_inst->counter_size) {
    7776:	2b00      	cmp	r3, #0
    7778:	d003      	beq.n	7782 <tc_get_count_value+0x36>
}
    777a:	4770      	bx	lr
			return (uint32_t)tc_module->COUNT8.COUNT.reg;
    777c:	7d10      	ldrb	r0, [r2, #20]
    777e:	b2c0      	uxtb	r0, r0
    7780:	e7fb      	b.n	777a <tc_get_count_value+0x2e>
			return (uint32_t)tc_module->COUNT16.COUNT.reg;
    7782:	8a90      	ldrh	r0, [r2, #20]
    7784:	b280      	uxth	r0, r0
    7786:	e7f8      	b.n	777a <tc_get_count_value+0x2e>
			return tc_module->COUNT32.COUNT.reg;
    7788:	6950      	ldr	r0, [r2, #20]
    778a:	e7f6      	b.n	777a <tc_get_count_value+0x2e>

0000778c <tc_set_compare_value>:
 */
enum status_code tc_set_compare_value(
		const struct tc_module *const module_inst,
		const enum tc_compare_capture_channel channel_index,
		const uint32_t compare)
{
    778c:	b510      	push	{r4, lr}
	Assert(module_inst);
	Assert(module_inst->hw);
	Assert(compare);

	/* Get a pointer to the module's hardware instance */
	Tc *const tc_module = module_inst->hw;
    778e:	6804      	ldr	r4, [r0, #0]
    7790:	6923      	ldr	r3, [r4, #16]

	while (tc_is_syncing(module_inst)) {
    7792:	2b00      	cmp	r3, #0
    7794:	d1fc      	bne.n	7790 <tc_set_compare_value+0x4>
		/* Wait for sync */
	}

	/* Read out based on the TC counter size */
	switch (module_inst->counter_size) {
    7796:	7903      	ldrb	r3, [r0, #4]
    7798:	2b04      	cmp	r3, #4
    779a:	d006      	beq.n	77aa <tc_set_compare_value+0x1e>
    779c:	2b08      	cmp	r3, #8
    779e:	d028      	beq.n	77f2 <tc_set_compare_value+0x66>
    77a0:	2b00      	cmp	r3, #0
    77a2:	d013      	beq.n	77cc <tc_set_compare_value+0x40>
				}
				return STATUS_OK;
			}
	}

	return STATUS_ERR_INVALID_ARG;
    77a4:	2317      	movs	r3, #23
}
    77a6:	0018      	movs	r0, r3
    77a8:	bd10      	pop	{r4, pc}
	return STATUS_ERR_INVALID_ARG;
    77aa:	2317      	movs	r3, #23
			if (channel_index <
    77ac:	2901      	cmp	r1, #1
    77ae:	d8fa      	bhi.n	77a6 <tc_set_compare_value+0x1a>
				if (module_inst->double_buffering_enabled){
    77b0:	7e83      	ldrb	r3, [r0, #26]
    77b2:	2b00      	cmp	r3, #0
    77b4:	d005      	beq.n	77c2 <tc_set_compare_value+0x36>
							(uint8_t)compare;
    77b6:	b2d2      	uxtb	r2, r2
					tc_module->COUNT8.CCBUF[channel_index].reg =
    77b8:	1861      	adds	r1, r4, r1
    77ba:	3130      	adds	r1, #48	; 0x30
    77bc:	700a      	strb	r2, [r1, #0]
				return STATUS_OK;
    77be:	2300      	movs	r3, #0
    77c0:	e7f1      	b.n	77a6 <tc_set_compare_value+0x1a>
							(uint8_t)compare;
    77c2:	b2d2      	uxtb	r2, r2
					tc_module->COUNT8.CC[channel_index].reg  =
    77c4:	1864      	adds	r4, r4, r1
    77c6:	7722      	strb	r2, [r4, #28]
				return STATUS_OK;
    77c8:	2300      	movs	r3, #0
    77ca:	e7ec      	b.n	77a6 <tc_set_compare_value+0x1a>
	return STATUS_ERR_INVALID_ARG;
    77cc:	2317      	movs	r3, #23
			if (channel_index <
    77ce:	2901      	cmp	r1, #1
    77d0:	d8e9      	bhi.n	77a6 <tc_set_compare_value+0x1a>
				if (module_inst->double_buffering_enabled){
    77d2:	7e83      	ldrb	r3, [r0, #26]
    77d4:	2b00      	cmp	r3, #0
    77d6:	d005      	beq.n	77e4 <tc_set_compare_value+0x58>
							(uint16_t)compare;
    77d8:	b292      	uxth	r2, r2
					tc_module->COUNT16.CCBUF[channel_index].reg =
    77da:	3118      	adds	r1, #24
    77dc:	0049      	lsls	r1, r1, #1
    77de:	530a      	strh	r2, [r1, r4]
				return STATUS_OK;
    77e0:	2300      	movs	r3, #0
    77e2:	e7e0      	b.n	77a6 <tc_set_compare_value+0x1a>
							(uint16_t)compare;
    77e4:	b292      	uxth	r2, r2
					tc_module->COUNT16.CC[channel_index].reg =
    77e6:	310c      	adds	r1, #12
    77e8:	0049      	lsls	r1, r1, #1
    77ea:	1864      	adds	r4, r4, r1
    77ec:	80a2      	strh	r2, [r4, #4]
				return STATUS_OK;
    77ee:	2300      	movs	r3, #0
    77f0:	e7d9      	b.n	77a6 <tc_set_compare_value+0x1a>
	return STATUS_ERR_INVALID_ARG;
    77f2:	2317      	movs	r3, #23
			if (channel_index <
    77f4:	2901      	cmp	r1, #1
    77f6:	d8d6      	bhi.n	77a6 <tc_set_compare_value+0x1a>
				if (module_inst->double_buffering_enabled){
    77f8:	7e83      	ldrb	r3, [r0, #26]
    77fa:	2b00      	cmp	r3, #0
    77fc:	d105      	bne.n	780a <tc_set_compare_value+0x7e>
					tc_module->COUNT32.CC[channel_index].reg =
    77fe:	3106      	adds	r1, #6
    7800:	0089      	lsls	r1, r1, #2
    7802:	1864      	adds	r4, r4, r1
    7804:	6062      	str	r2, [r4, #4]
				return STATUS_OK;
    7806:	2300      	movs	r3, #0
    7808:	e7cd      	b.n	77a6 <tc_set_compare_value+0x1a>
					tc_module->COUNT32.CCBUF[channel_index].reg =
    780a:	310c      	adds	r1, #12
    780c:	0089      	lsls	r1, r1, #2
    780e:	510a      	str	r2, [r1, r4]
				return STATUS_OK;
    7810:	2300      	movs	r3, #0
    7812:	e7c8      	b.n	77a6 <tc_set_compare_value+0x1a>

00007814 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    7814:	e7fe      	b.n	7814 <Dummy_Handler>
	...

00007818 <Reset_Handler>:
{
    7818:	b510      	push	{r4, lr}
        if (pSrc != pDest) {
    781a:	4a1a      	ldr	r2, [pc, #104]	; (7884 <Reset_Handler+0x6c>)
    781c:	4b1a      	ldr	r3, [pc, #104]	; (7888 <Reset_Handler+0x70>)
    781e:	429a      	cmp	r2, r3
    7820:	d011      	beq.n	7846 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
    7822:	001a      	movs	r2, r3
    7824:	4b19      	ldr	r3, [pc, #100]	; (788c <Reset_Handler+0x74>)
    7826:	429a      	cmp	r2, r3
    7828:	d20d      	bcs.n	7846 <Reset_Handler+0x2e>
    782a:	4a19      	ldr	r2, [pc, #100]	; (7890 <Reset_Handler+0x78>)
    782c:	3303      	adds	r3, #3
    782e:	1a9b      	subs	r3, r3, r2
    7830:	089b      	lsrs	r3, r3, #2
    7832:	3301      	adds	r3, #1
    7834:	009b      	lsls	r3, r3, #2
    7836:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    7838:	4813      	ldr	r0, [pc, #76]	; (7888 <Reset_Handler+0x70>)
    783a:	4912      	ldr	r1, [pc, #72]	; (7884 <Reset_Handler+0x6c>)
    783c:	588c      	ldr	r4, [r1, r2]
    783e:	5084      	str	r4, [r0, r2]
    7840:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
    7842:	429a      	cmp	r2, r3
    7844:	d1fa      	bne.n	783c <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
    7846:	4a13      	ldr	r2, [pc, #76]	; (7894 <Reset_Handler+0x7c>)
    7848:	4b13      	ldr	r3, [pc, #76]	; (7898 <Reset_Handler+0x80>)
    784a:	429a      	cmp	r2, r3
    784c:	d20a      	bcs.n	7864 <Reset_Handler+0x4c>
    784e:	43d3      	mvns	r3, r2
    7850:	4911      	ldr	r1, [pc, #68]	; (7898 <Reset_Handler+0x80>)
    7852:	185b      	adds	r3, r3, r1
    7854:	2103      	movs	r1, #3
    7856:	438b      	bics	r3, r1
    7858:	3304      	adds	r3, #4
    785a:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
    785c:	2100      	movs	r1, #0
    785e:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
    7860:	4293      	cmp	r3, r2
    7862:	d1fc      	bne.n	785e <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    7864:	4a0d      	ldr	r2, [pc, #52]	; (789c <Reset_Handler+0x84>)
    7866:	21ff      	movs	r1, #255	; 0xff
    7868:	4b0d      	ldr	r3, [pc, #52]	; (78a0 <Reset_Handler+0x88>)
    786a:	438b      	bics	r3, r1
    786c:	6093      	str	r3, [r2, #8]
        NVMCTRL->CTRLB.bit.MANW = 1;
    786e:	4a0d      	ldr	r2, [pc, #52]	; (78a4 <Reset_Handler+0x8c>)
    7870:	6853      	ldr	r3, [r2, #4]
    7872:	397f      	subs	r1, #127	; 0x7f
    7874:	430b      	orrs	r3, r1
    7876:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    7878:	4b0b      	ldr	r3, [pc, #44]	; (78a8 <Reset_Handler+0x90>)
    787a:	4798      	blx	r3
        main();
    787c:	4b0b      	ldr	r3, [pc, #44]	; (78ac <Reset_Handler+0x94>)
    787e:	4798      	blx	r3
    7880:	e7fe      	b.n	7880 <Reset_Handler+0x68>
    7882:	46c0      	nop			; (mov r8, r8)
    7884:	00020908 	.word	0x00020908
    7888:	20000000 	.word	0x20000000
    788c:	200009c8 	.word	0x200009c8
    7890:	20000004 	.word	0x20000004
    7894:	200009c8 	.word	0x200009c8
    7898:	20002fe8 	.word	0x20002fe8
    789c:	e000ed00 	.word	0xe000ed00
    78a0:	00000000 	.word	0x00000000
    78a4:	41004000 	.word	0x41004000
    78a8:	00019645 	.word	0x00019645
    78ac:	0000f985 	.word	0x0000f985

000078b0 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
    78b0:	b5f0      	push	{r4, r5, r6, r7, lr}
    78b2:	46c6      	mov	lr, r8
    78b4:	b500      	push	{lr}
    78b6:	000c      	movs	r4, r1
    78b8:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
    78ba:	2800      	cmp	r0, #0
    78bc:	d10f      	bne.n	78de <_read+0x2e>
		return -1;
	}

	for (; len > 0; --len) {
    78be:	2a00      	cmp	r2, #0
    78c0:	dd11      	ble.n	78e6 <_read+0x36>
    78c2:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
    78c4:	4e09      	ldr	r6, [pc, #36]	; (78ec <_read+0x3c>)
    78c6:	4d0a      	ldr	r5, [pc, #40]	; (78f0 <_read+0x40>)
    78c8:	6830      	ldr	r0, [r6, #0]
    78ca:	0021      	movs	r1, r4
    78cc:	682b      	ldr	r3, [r5, #0]
    78ce:	4798      	blx	r3
		ptr++;
    78d0:	3401      	adds	r4, #1
	for (; len > 0; --len) {
    78d2:	42bc      	cmp	r4, r7
    78d4:	d1f8      	bne.n	78c8 <_read+0x18>
		nChars++;
	}
	return nChars;
}
    78d6:	4640      	mov	r0, r8
    78d8:	bc04      	pop	{r2}
    78da:	4690      	mov	r8, r2
    78dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -1;
    78de:	2301      	movs	r3, #1
    78e0:	425b      	negs	r3, r3
    78e2:	4698      	mov	r8, r3
    78e4:	e7f7      	b.n	78d6 <_read+0x26>
	for (; len > 0; --len) {
    78e6:	4680      	mov	r8, r0
    78e8:	e7f5      	b.n	78d6 <_read+0x26>
    78ea:	46c0      	nop			; (mov r8, r8)
    78ec:	2000226c 	.word	0x2000226c
    78f0:	20002264 	.word	0x20002264

000078f4 <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
    78f4:	b5f0      	push	{r4, r5, r6, r7, lr}
    78f6:	46c6      	mov	lr, r8
    78f8:	b500      	push	{lr}
    78fa:	000e      	movs	r6, r1
    78fc:	0015      	movs	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
    78fe:	3801      	subs	r0, #1
    7900:	2802      	cmp	r0, #2
    7902:	d810      	bhi.n	7926 <_write+0x32>
		return -1;
	}

	for (; len != 0; --len) {
    7904:	2a00      	cmp	r2, #0
    7906:	d011      	beq.n	792c <_write+0x38>
    7908:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
    790a:	4b0c      	ldr	r3, [pc, #48]	; (793c <_write+0x48>)
    790c:	4698      	mov	r8, r3
    790e:	4f0c      	ldr	r7, [pc, #48]	; (7940 <_write+0x4c>)
    7910:	4643      	mov	r3, r8
    7912:	6818      	ldr	r0, [r3, #0]
    7914:	5d31      	ldrb	r1, [r6, r4]
    7916:	683b      	ldr	r3, [r7, #0]
    7918:	4798      	blx	r3
    791a:	2800      	cmp	r0, #0
    791c:	db08      	blt.n	7930 <_write+0x3c>
			return -1;
		}
		++nChars;
    791e:	3401      	adds	r4, #1
	for (; len != 0; --len) {
    7920:	42a5      	cmp	r5, r4
    7922:	d1f5      	bne.n	7910 <_write+0x1c>
    7924:	e006      	b.n	7934 <_write+0x40>
		return -1;
    7926:	2401      	movs	r4, #1
    7928:	4264      	negs	r4, r4
    792a:	e003      	b.n	7934 <_write+0x40>
	for (; len != 0; --len) {
    792c:	0014      	movs	r4, r2
    792e:	e001      	b.n	7934 <_write+0x40>
			return -1;
    7930:	2401      	movs	r4, #1
    7932:	4264      	negs	r4, r4
	}
	return nChars;
}
    7934:	0020      	movs	r0, r4
    7936:	bc04      	pop	{r2}
    7938:	4690      	mov	r8, r2
    793a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    793c:	2000226c 	.word	0x2000226c
    7940:	20002268 	.word	0x20002268

00007944 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    7944:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    7946:	4a06      	ldr	r2, [pc, #24]	; (7960 <_sbrk+0x1c>)
    7948:	6812      	ldr	r2, [r2, #0]
    794a:	2a00      	cmp	r2, #0
    794c:	d004      	beq.n	7958 <_sbrk+0x14>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
    794e:	4a04      	ldr	r2, [pc, #16]	; (7960 <_sbrk+0x1c>)
    7950:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    7952:	18c3      	adds	r3, r0, r3
    7954:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
    7956:	4770      	bx	lr
		heap = (unsigned char *)&_end;
    7958:	4902      	ldr	r1, [pc, #8]	; (7964 <_sbrk+0x20>)
    795a:	4a01      	ldr	r2, [pc, #4]	; (7960 <_sbrk+0x1c>)
    795c:	6011      	str	r1, [r2, #0]
    795e:	e7f6      	b.n	794e <_sbrk+0xa>
    7960:	20000b9c 	.word	0x20000b9c
    7964:	20004fe8 	.word	0x20004fe8

00007968 <_close>:
}

extern int _close(int file)
{
	return -1;
}
    7968:	2001      	movs	r0, #1
    796a:	4240      	negs	r0, r0
    796c:	4770      	bx	lr

0000796e <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
    796e:	2380      	movs	r3, #128	; 0x80
    7970:	019b      	lsls	r3, r3, #6
    7972:	604b      	str	r3, [r1, #4]

	return 0;
}
    7974:	2000      	movs	r0, #0
    7976:	4770      	bx	lr

00007978 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
    7978:	2001      	movs	r0, #1
    797a:	4770      	bx	lr

0000797c <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
    797c:	2000      	movs	r0, #0
    797e:	4770      	bx	lr

00007980 <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct usart_module *const module,
		uint8_t *c)
{
    7980:	b570      	push	{r4, r5, r6, lr}
    7982:	b082      	sub	sp, #8
    7984:	0005      	movs	r5, r0
    7986:	000e      	movs	r6, r1
	uint16_t temp = 0;
    7988:	2200      	movs	r2, #0
    798a:	466b      	mov	r3, sp
    798c:	80da      	strh	r2, [r3, #6]

	while(STATUS_OK != usart_read_wait(module, &temp));
    798e:	4c06      	ldr	r4, [pc, #24]	; (79a8 <usart_serial_getchar+0x28>)
    7990:	466b      	mov	r3, sp
    7992:	1d99      	adds	r1, r3, #6
    7994:	0028      	movs	r0, r5
    7996:	47a0      	blx	r4
    7998:	2800      	cmp	r0, #0
    799a:	d1f9      	bne.n	7990 <usart_serial_getchar+0x10>

	*c = temp;
    799c:	466b      	mov	r3, sp
    799e:	3306      	adds	r3, #6
    79a0:	881b      	ldrh	r3, [r3, #0]
    79a2:	7033      	strb	r3, [r6, #0]
}
    79a4:	b002      	add	sp, #8
    79a6:	bd70      	pop	{r4, r5, r6, pc}
    79a8:	00006713 	.word	0x00006713

000079ac <usart_serial_putchar>:
{
    79ac:	b570      	push	{r4, r5, r6, lr}
    79ae:	0005      	movs	r5, r0
	while(STATUS_OK !=usart_write_wait(module, c));
    79b0:	b28c      	uxth	r4, r1
    79b2:	4e03      	ldr	r6, [pc, #12]	; (79c0 <usart_serial_putchar+0x14>)
    79b4:	0021      	movs	r1, r4
    79b6:	0028      	movs	r0, r5
    79b8:	47b0      	blx	r6
    79ba:	2800      	cmp	r0, #0
    79bc:	d1fa      	bne.n	79b4 <usart_serial_putchar+0x8>
}
    79be:	bd70      	pop	{r4, r5, r6, pc}
    79c0:	000066ed 	.word	0x000066ed

000079c4 <USART_HOST_ISR_VECT>:
#if SAMD || SAMR21 || SAML21 || SAMR30 || SAMR34 || SAMR35 || WLR089
void USART_HOST_ISR_VECT(uint8_t instance)
#else
USART_HOST_ISR_VECT()
#endif
{
    79c4:	b510      	push	{r4, lr}
    79c6:	b082      	sub	sp, #8
static inline enum status_code usart_serial_read_packet(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
	return usart_read_buffer_wait(module, rx_data, length);
    79c8:	466b      	mov	r3, sp
    79ca:	1ddc      	adds	r4, r3, #7
    79cc:	2201      	movs	r2, #1
    79ce:	0021      	movs	r1, r4
    79d0:	480f      	ldr	r0, [pc, #60]	; (7a10 <USART_HOST_ISR_VECT+0x4c>)
    79d2:	4b10      	ldr	r3, [pc, #64]	; (7a14 <USART_HOST_ISR_VECT+0x50>)
    79d4:	4798      	blx	r3
  __ASM volatile ("cpsid i" : : : "memory");
    79d6:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
    79d8:	f3bf 8f5f 	dmb	sy
#else
    usart_serial_read_packet(USART_HOST, &temp, 1);
#endif

	/* Introducing critical section to avoid buffer corruption. */
	cpu_irq_disable();
    79dc:	2200      	movs	r2, #0
    79de:	4b0e      	ldr	r3, [pc, #56]	; (7a18 <USART_HOST_ISR_VECT+0x54>)
    79e0:	701a      	strb	r2, [r3, #0]

	/* The number of data in the receive buffer is incremented and the
	 * buffer is updated. */

	serial_rx_buf[serial_rx_buf_tail] = temp;
    79e2:	4b0e      	ldr	r3, [pc, #56]	; (7a1c <USART_HOST_ISR_VECT+0x58>)
    79e4:	781b      	ldrb	r3, [r3, #0]
    79e6:	7821      	ldrb	r1, [r4, #0]
    79e8:	4a0d      	ldr	r2, [pc, #52]	; (7a20 <USART_HOST_ISR_VECT+0x5c>)
    79ea:	54d1      	strb	r1, [r2, r3]

	if ((SERIAL_RX_BUF_SIZE_HOST - 1) == serial_rx_buf_tail) {
    79ec:	2b7f      	cmp	r3, #127	; 0x7f
    79ee:	d00a      	beq.n	7a06 <USART_HOST_ISR_VECT+0x42>
		/* Reached the end of buffer, revert back to beginning of
		 * buffer. */
		serial_rx_buf_tail = 0x00;
	} else {
		serial_rx_buf_tail++;
    79f0:	3301      	adds	r3, #1
    79f2:	4a0a      	ldr	r2, [pc, #40]	; (7a1c <USART_HOST_ISR_VECT+0x58>)
    79f4:	7013      	strb	r3, [r2, #0]
	}

	cpu_irq_enable();
    79f6:	2201      	movs	r2, #1
    79f8:	4b07      	ldr	r3, [pc, #28]	; (7a18 <USART_HOST_ISR_VECT+0x54>)
    79fa:	701a      	strb	r2, [r3, #0]
    79fc:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    7a00:	b662      	cpsie	i
}
    7a02:	b002      	add	sp, #8
    7a04:	bd10      	pop	{r4, pc}
		serial_rx_buf_tail = 0x00;
    7a06:	2200      	movs	r2, #0
    7a08:	4b04      	ldr	r3, [pc, #16]	; (7a1c <USART_HOST_ISR_VECT+0x58>)
    7a0a:	701a      	strb	r2, [r3, #0]
    7a0c:	e7f3      	b.n	79f6 <USART_HOST_ISR_VECT+0x32>
    7a0e:	46c0      	nop			; (mov r8, r8)
    7a10:	20000ba0 	.word	0x20000ba0
    7a14:	00006839 	.word	0x00006839
    7a18:	20000014 	.word	0x20000014
    7a1c:	20000c55 	.word	0x20000c55
    7a20:	20000bd4 	.word	0x20000bd4

00007a24 <sio2host_init>:
{
    7a24:	b5f0      	push	{r4, r5, r6, r7, lr}
    7a26:	b091      	sub	sp, #68	; 0x44
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    7a28:	2380      	movs	r3, #128	; 0x80
    7a2a:	05db      	lsls	r3, r3, #23
    7a2c:	9300      	str	r3, [sp, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    7a2e:	2300      	movs	r3, #0
    7a30:	9301      	str	r3, [sp, #4]
	config->parity           = USART_PARITY_NONE;
    7a32:	22ff      	movs	r2, #255	; 0xff
    7a34:	4669      	mov	r1, sp
    7a36:	810a      	strh	r2, [r1, #8]
	config->stopbits         = USART_STOPBITS_1;
    7a38:	2200      	movs	r2, #0
    7a3a:	728b      	strb	r3, [r1, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    7a3c:	72cb      	strb	r3, [r1, #11]
	config->baudrate         = 9600;
	config->receiver_enable  = true;
    7a3e:	2401      	movs	r4, #1
    7a40:	2124      	movs	r1, #36	; 0x24
    7a42:	4668      	mov	r0, sp
    7a44:	5444      	strb	r4, [r0, r1]
	config->transmitter_enable = true;
    7a46:	3101      	adds	r1, #1
    7a48:	5444      	strb	r4, [r0, r1]
	config->clock_polarity_inverted = false;
    7a4a:	3101      	adds	r1, #1
    7a4c:	5443      	strb	r3, [r0, r1]
	config->use_external_clock = false;
    7a4e:	3101      	adds	r1, #1
    7a50:	5443      	strb	r3, [r0, r1]
	config->ext_clock_freq   = 0;
    7a52:	930a      	str	r3, [sp, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
    7a54:	3105      	adds	r1, #5
    7a56:	5443      	strb	r3, [r0, r1]
	config->generator_source = GCLK_GENERATOR_0;
    7a58:	3101      	adds	r1, #1
    7a5a:	5443      	strb	r3, [r0, r1]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->pinmux_pad2      = PINMUX_DEFAULT;
	config->pinmux_pad3      = PINMUX_DEFAULT;
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    7a5c:	9305      	str	r3, [sp, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    7a5e:	8203      	strh	r3, [r0, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
    7a60:	76c3      	strb	r3, [r0, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
    7a62:	7602      	strb	r2, [r0, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
    7a64:	7702      	strb	r2, [r0, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
    7a66:	7642      	strb	r2, [r0, #25]
	config->receive_pulse_length                    = 19;
    7a68:	2313      	movs	r3, #19
    7a6a:	7683      	strb	r3, [r0, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
    7a6c:	7742      	strb	r2, [r0, #29]
	host_uart_config.mux_setting = HOST_SERCOM_MUX_SETTING;
    7a6e:	2380      	movs	r3, #128	; 0x80
    7a70:	035b      	lsls	r3, r3, #13
    7a72:	9303      	str	r3, [sp, #12]
	host_uart_config.pinmux_pad0 = HOST_SERCOM_PINMUX_PAD0;
    7a74:	4b2f      	ldr	r3, [pc, #188]	; (7b34 <sio2host_init+0x110>)
    7a76:	930c      	str	r3, [sp, #48]	; 0x30
	host_uart_config.pinmux_pad1 = HOST_SERCOM_PINMUX_PAD1;
    7a78:	4b2f      	ldr	r3, [pc, #188]	; (7b38 <sio2host_init+0x114>)
    7a7a:	930d      	str	r3, [sp, #52]	; 0x34
	host_uart_config.pinmux_pad2 = HOST_SERCOM_PINMUX_PAD2;
    7a7c:	2301      	movs	r3, #1
    7a7e:	425b      	negs	r3, r3
    7a80:	930e      	str	r3, [sp, #56]	; 0x38
	host_uart_config.pinmux_pad3 = HOST_SERCOM_PINMUX_PAD3;
    7a82:	930f      	str	r3, [sp, #60]	; 0x3c
	host_uart_config.baudrate    = USART_HOST_BAUDRATE;
    7a84:	23e1      	movs	r3, #225	; 0xe1
    7a86:	025b      	lsls	r3, r3, #9
    7a88:	9308      	str	r3, [sp, #32]
static inline void stdio_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
	stdio_base = (void *)module;
    7a8a:	4d2c      	ldr	r5, [pc, #176]	; (7b3c <sio2host_init+0x118>)
    7a8c:	4b2c      	ldr	r3, [pc, #176]	; (7b40 <sio2host_init+0x11c>)
    7a8e:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
    7a90:	4a2c      	ldr	r2, [pc, #176]	; (7b44 <sio2host_init+0x120>)
    7a92:	4b2d      	ldr	r3, [pc, #180]	; (7b48 <sio2host_init+0x124>)
    7a94:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
    7a96:	4a2d      	ldr	r2, [pc, #180]	; (7b4c <sio2host_init+0x128>)
    7a98:	4b2d      	ldr	r3, [pc, #180]	; (7b50 <sio2host_init+0x12c>)
    7a9a:	601a      	str	r2, [r3, #0]
	if (usart_init(module, hw, config) == STATUS_OK) {
    7a9c:	466a      	mov	r2, sp
    7a9e:	2184      	movs	r1, #132	; 0x84
    7aa0:	05c9      	lsls	r1, r1, #23
    7aa2:	0028      	movs	r0, r5
    7aa4:	4b2b      	ldr	r3, [pc, #172]	; (7b54 <sio2host_init+0x130>)
    7aa6:	4798      	blx	r3

	usart_serial_init(module, hw, config);
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
    7aa8:	4f2b      	ldr	r7, [pc, #172]	; (7b58 <sio2host_init+0x134>)
    7aaa:	683b      	ldr	r3, [r7, #0]
    7aac:	6898      	ldr	r0, [r3, #8]
    7aae:	2100      	movs	r1, #0
    7ab0:	4e2a      	ldr	r6, [pc, #168]	; (7b5c <sio2host_init+0x138>)
    7ab2:	47b0      	blx	r6
	setbuf(stdin, NULL);
    7ab4:	683b      	ldr	r3, [r7, #0]
    7ab6:	6858      	ldr	r0, [r3, #4]
    7ab8:	2100      	movs	r1, #0
    7aba:	47b0      	blx	r6
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    7abc:	682e      	ldr	r6, [r5, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    7abe:	0030      	movs	r0, r6
    7ac0:	4b27      	ldr	r3, [pc, #156]	; (7b60 <sio2host_init+0x13c>)
    7ac2:	4798      	blx	r3
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    7ac4:	231f      	movs	r3, #31
    7ac6:	4018      	ands	r0, r3
    7ac8:	4084      	lsls	r4, r0
    7aca:	4b26      	ldr	r3, [pc, #152]	; (7b64 <sio2host_init+0x140>)
    7acc:	601c      	str	r4, [r3, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
    7ace:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    7ad0:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    7ad2:	2b00      	cmp	r3, #0
    7ad4:	d1fc      	bne.n	7ad0 <sio2host_init+0xac>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    7ad6:	6833      	ldr	r3, [r6, #0]
    7ad8:	2202      	movs	r2, #2
    7ada:	4313      	orrs	r3, r2
    7adc:	6033      	str	r3, [r6, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    7ade:	4b17      	ldr	r3, [pc, #92]	; (7b3c <sio2host_init+0x118>)
    7ae0:	681b      	ldr	r3, [r3, #0]
	return (usart_hw->SYNCBUSY.reg);
    7ae2:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    7ae4:	2a00      	cmp	r2, #0
    7ae6:	d1fc      	bne.n	7ae2 <sio2host_init+0xbe>
			module->receiver_enabled = true;
			break;

		case USART_TRANSCEIVER_TX:
			/* Enable TX */
			usart_hw->CTRLB.reg |= SERCOM_USART_CTRLB_TXEN;
    7ae8:	6859      	ldr	r1, [r3, #4]
    7aea:	2280      	movs	r2, #128	; 0x80
    7aec:	0252      	lsls	r2, r2, #9
    7aee:	430a      	orrs	r2, r1
    7af0:	605a      	str	r2, [r3, #4]
			module->transmitter_enabled = true;
    7af2:	2101      	movs	r1, #1
    7af4:	4a11      	ldr	r2, [pc, #68]	; (7b3c <sio2host_init+0x118>)
    7af6:	71d1      	strb	r1, [r2, #7]
	return (usart_hw->SYNCBUSY.reg);
    7af8:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    7afa:	2a00      	cmp	r2, #0
    7afc:	d1fc      	bne.n	7af8 <sio2host_init+0xd4>
	return (usart_hw->SYNCBUSY.reg);
    7afe:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    7b00:	2a00      	cmp	r2, #0
    7b02:	d1fc      	bne.n	7afe <sio2host_init+0xda>
			usart_hw->CTRLB.reg |= SERCOM_USART_CTRLB_RXEN;
    7b04:	6859      	ldr	r1, [r3, #4]
    7b06:	2280      	movs	r2, #128	; 0x80
    7b08:	0292      	lsls	r2, r2, #10
    7b0a:	430a      	orrs	r2, r1
    7b0c:	605a      	str	r2, [r3, #4]
			module->receiver_enabled = true;
    7b0e:	2101      	movs	r1, #1
    7b10:	4a0a      	ldr	r2, [pc, #40]	; (7b3c <sio2host_init+0x118>)
    7b12:	7191      	strb	r1, [r2, #6]
	return (usart_hw->SYNCBUSY.reg);
    7b14:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    7b16:	2a00      	cmp	r2, #0
    7b18:	d1fc      	bne.n	7b14 <sio2host_init+0xf0>
	USART_HOST_RX_ISR_ENABLE();
    7b1a:	4913      	ldr	r1, [pc, #76]	; (7b68 <sio2host_init+0x144>)
    7b1c:	2000      	movs	r0, #0
    7b1e:	4b13      	ldr	r3, [pc, #76]	; (7b6c <sio2host_init+0x148>)
    7b20:	4798      	blx	r3
    7b22:	2204      	movs	r2, #4
    7b24:	2384      	movs	r3, #132	; 0x84
    7b26:	05db      	lsls	r3, r3, #23
    7b28:	759a      	strb	r2, [r3, #22]
    7b2a:	32fc      	adds	r2, #252	; 0xfc
    7b2c:	4b0d      	ldr	r3, [pc, #52]	; (7b64 <sio2host_init+0x140>)
    7b2e:	601a      	str	r2, [r3, #0]
}
    7b30:	b011      	add	sp, #68	; 0x44
    7b32:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7b34:	00040003 	.word	0x00040003
    7b38:	00050003 	.word	0x00050003
    7b3c:	20000ba0 	.word	0x20000ba0
    7b40:	2000226c 	.word	0x2000226c
    7b44:	000079ad 	.word	0x000079ad
    7b48:	20002268 	.word	0x20002268
    7b4c:	00007981 	.word	0x00007981
    7b50:	20002264 	.word	0x20002264
    7b54:	00006389 	.word	0x00006389
    7b58:	20000018 	.word	0x20000018
    7b5c:	0001a02d 	.word	0x0001a02d
    7b60:	00005f29 	.word	0x00005f29
    7b64:	e000e100 	.word	0xe000e100
    7b68:	000079c5 	.word	0x000079c5
    7b6c:	00005eed 	.word	0x00005eed

00007b70 <sio2host_deinit>:
{
    7b70:	b570      	push	{r4, r5, r6, lr}
	SercomUsart *const usart_hw = &(module->hw->USART);
    7b72:	4d15      	ldr	r5, [pc, #84]	; (7bc8 <sio2host_deinit+0x58>)
    7b74:	682c      	ldr	r4, [r5, #0]
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
    7b76:	0020      	movs	r0, r4
    7b78:	4b14      	ldr	r3, [pc, #80]	; (7bcc <sio2host_deinit+0x5c>)
    7b7a:	4798      	blx	r3
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    7b7c:	231f      	movs	r3, #31
    7b7e:	4018      	ands	r0, r3
    7b80:	3b1e      	subs	r3, #30
    7b82:	4083      	lsls	r3, r0
    7b84:	2280      	movs	r2, #128	; 0x80
    7b86:	4912      	ldr	r1, [pc, #72]	; (7bd0 <sio2host_deinit+0x60>)
    7b88:	508b      	str	r3, [r1, r2]
	SercomUsart *const usart_hw = &(module->hw->USART);
    7b8a:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    7b8c:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    7b8e:	2b00      	cmp	r3, #0
    7b90:	d1fc      	bne.n	7b8c <sio2host_deinit+0x1c>
	usart_hw->CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
    7b92:	6823      	ldr	r3, [r4, #0]
    7b94:	2202      	movs	r2, #2
    7b96:	4393      	bics	r3, r2
    7b98:	6023      	str	r3, [r4, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    7b9a:	4b0b      	ldr	r3, [pc, #44]	; (7bc8 <sio2host_deinit+0x58>)
    7b9c:	681b      	ldr	r3, [r3, #0]
	return (usart_hw->SYNCBUSY.reg);
    7b9e:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    7ba0:	2a00      	cmp	r2, #0
    7ba2:	d1fc      	bne.n	7b9e <sio2host_deinit+0x2e>
			module->receiver_enabled = false;
			break;

		case USART_TRANSCEIVER_TX:
			/* Disable TX */
			usart_hw->CTRLB.reg &= ~SERCOM_USART_CTRLB_TXEN;
    7ba4:	685a      	ldr	r2, [r3, #4]
    7ba6:	490b      	ldr	r1, [pc, #44]	; (7bd4 <sio2host_deinit+0x64>)
    7ba8:	400a      	ands	r2, r1
    7baa:	605a      	str	r2, [r3, #4]
			module->transmitter_enabled = false;
    7bac:	2100      	movs	r1, #0
    7bae:	4a06      	ldr	r2, [pc, #24]	; (7bc8 <sio2host_deinit+0x58>)
    7bb0:	71d1      	strb	r1, [r2, #7]
	return (usart_hw->SYNCBUSY.reg);
    7bb2:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    7bb4:	2a00      	cmp	r2, #0
    7bb6:	d1fc      	bne.n	7bb2 <sio2host_deinit+0x42>
			usart_hw->CTRLB.reg &= ~SERCOM_USART_CTRLB_RXEN;
    7bb8:	685a      	ldr	r2, [r3, #4]
    7bba:	4907      	ldr	r1, [pc, #28]	; (7bd8 <sio2host_deinit+0x68>)
    7bbc:	400a      	ands	r2, r1
    7bbe:	605a      	str	r2, [r3, #4]
			module->receiver_enabled = false;
    7bc0:	2200      	movs	r2, #0
    7bc2:	4b01      	ldr	r3, [pc, #4]	; (7bc8 <sio2host_deinit+0x58>)
    7bc4:	719a      	strb	r2, [r3, #6]
}
    7bc6:	bd70      	pop	{r4, r5, r6, pc}
    7bc8:	20000ba0 	.word	0x20000ba0
    7bcc:	00005f29 	.word	0x00005f29
    7bd0:	e000e100 	.word	0xe000e100
    7bd4:	fffeffff 	.word	0xfffeffff
    7bd8:	fffdffff 	.word	0xfffdffff

00007bdc <sio2host_tx>:
{
    7bdc:	b5f0      	push	{r4, r5, r6, r7, lr}
    7bde:	b083      	sub	sp, #12
    7be0:	0006      	movs	r6, r0
    7be2:	9101      	str	r1, [sp, #4]
	return usart_write_buffer_wait(module, tx_data, length);
    7be4:	466b      	mov	r3, sp
    7be6:	889d      	ldrh	r5, [r3, #4]
    7be8:	4c05      	ldr	r4, [pc, #20]	; (7c00 <sio2host_tx+0x24>)
    7bea:	4f06      	ldr	r7, [pc, #24]	; (7c04 <sio2host_tx+0x28>)
    7bec:	002a      	movs	r2, r5
    7bee:	0031      	movs	r1, r6
    7bf0:	0020      	movs	r0, r4
    7bf2:	47b8      	blx	r7
	} while (status != STATUS_OK);
    7bf4:	2800      	cmp	r0, #0
    7bf6:	d1f9      	bne.n	7bec <sio2host_tx+0x10>
}
    7bf8:	9801      	ldr	r0, [sp, #4]
    7bfa:	b003      	add	sp, #12
    7bfc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7bfe:	46c0      	nop			; (mov r8, r8)
    7c00:	20000ba0 	.word	0x20000ba0
    7c04:	0000677d 	.word	0x0000677d

00007c08 <sio2host_rx>:
{
    7c08:	b570      	push	{r4, r5, r6, lr}
    7c0a:	0002      	movs	r2, r0
	if(serial_rx_buf_tail >= serial_rx_buf_head)
    7c0c:	4b1f      	ldr	r3, [pc, #124]	; (7c8c <sio2host_rx+0x84>)
    7c0e:	781c      	ldrb	r4, [r3, #0]
    7c10:	4b1f      	ldr	r3, [pc, #124]	; (7c90 <sio2host_rx+0x88>)
    7c12:	781b      	ldrb	r3, [r3, #0]
    7c14:	429c      	cmp	r4, r3
    7c16:	d319      	bcc.n	7c4c <sio2host_rx+0x44>
		serial_rx_count = serial_rx_buf_tail - serial_rx_buf_head;
    7c18:	1ae3      	subs	r3, r4, r3
    7c1a:	481e      	ldr	r0, [pc, #120]	; (7c94 <sio2host_rx+0x8c>)
    7c1c:	7003      	strb	r3, [r0, #0]
	if (0 == serial_rx_count) {
    7c1e:	4b1d      	ldr	r3, [pc, #116]	; (7c94 <sio2host_rx+0x8c>)
    7c20:	7818      	ldrb	r0, [r3, #0]
    7c22:	2800      	cmp	r0, #0
    7c24:	d031      	beq.n	7c8a <sio2host_rx+0x82>
	if (SERIAL_RX_BUF_SIZE_HOST <= serial_rx_count) {
    7c26:	b243      	sxtb	r3, r0
    7c28:	2b00      	cmp	r3, #0
    7c2a:	db15      	blt.n	7c58 <sio2host_rx+0x50>
    7c2c:	1c03      	adds	r3, r0, #0
    7c2e:	4288      	cmp	r0, r1
    7c30:	d900      	bls.n	7c34 <sio2host_rx+0x2c>
    7c32:	1c0b      	adds	r3, r1, #0
    7c34:	b2d8      	uxtb	r0, r3
	while (max_length > 0) {
    7c36:	2800      	cmp	r0, #0
    7c38:	d027      	beq.n	7c8a <sio2host_rx+0x82>
    7c3a:	4b15      	ldr	r3, [pc, #84]	; (7c90 <sio2host_rx+0x88>)
    7c3c:	781b      	ldrb	r3, [r3, #0]
    7c3e:	1e44      	subs	r4, r0, #1
    7c40:	b2e4      	uxtb	r4, r4
    7c42:	3401      	adds	r4, #1
    7c44:	1914      	adds	r4, r2, r4
		*data = serial_rx_buf[serial_rx_buf_head];
    7c46:	4d14      	ldr	r5, [pc, #80]	; (7c98 <sio2host_rx+0x90>)
			serial_rx_buf_head = 0;
    7c48:	2600      	movs	r6, #0
    7c4a:	e014      	b.n	7c76 <sio2host_rx+0x6e>
		serial_rx_count = serial_rx_buf_tail + (SERIAL_RX_BUF_SIZE_HOST - serial_rx_buf_head);
    7c4c:	0020      	movs	r0, r4
    7c4e:	3880      	subs	r0, #128	; 0x80
    7c50:	1ac3      	subs	r3, r0, r3
    7c52:	4810      	ldr	r0, [pc, #64]	; (7c94 <sio2host_rx+0x8c>)
    7c54:	7003      	strb	r3, [r0, #0]
    7c56:	e7e2      	b.n	7c1e <sio2host_rx+0x16>
		serial_rx_buf_head = serial_rx_buf_tail;
    7c58:	4b0d      	ldr	r3, [pc, #52]	; (7c90 <sio2host_rx+0x88>)
    7c5a:	701c      	strb	r4, [r3, #0]
		serial_rx_count = SERIAL_RX_BUF_SIZE_HOST;
    7c5c:	2080      	movs	r0, #128	; 0x80
    7c5e:	4b0d      	ldr	r3, [pc, #52]	; (7c94 <sio2host_rx+0x8c>)
    7c60:	7018      	strb	r0, [r3, #0]
		if (SERIAL_RX_BUF_SIZE_HOST <= max_length) {
    7c62:	b24b      	sxtb	r3, r1
    7c64:	2b00      	cmp	r3, #0
    7c66:	db01      	blt.n	7c6c <sio2host_rx+0x64>
    7c68:	0008      	movs	r0, r1
    7c6a:	e7e4      	b.n	7c36 <sio2host_rx+0x2e>
			max_length = SERIAL_RX_BUF_SIZE_HOST;
    7c6c:	2080      	movs	r0, #128	; 0x80
    7c6e:	e7e4      	b.n	7c3a <sio2host_rx+0x32>
			serial_rx_buf_head = 0;
    7c70:	0033      	movs	r3, r6
	while (max_length > 0) {
    7c72:	4294      	cmp	r4, r2
    7c74:	d007      	beq.n	7c86 <sio2host_rx+0x7e>
		*data = serial_rx_buf[serial_rx_buf_head];
    7c76:	5ce9      	ldrb	r1, [r5, r3]
    7c78:	7011      	strb	r1, [r2, #0]
		data++;
    7c7a:	3201      	adds	r2, #1
		if ((SERIAL_RX_BUF_SIZE_HOST - 1) == serial_rx_buf_head) {
    7c7c:	2b7f      	cmp	r3, #127	; 0x7f
    7c7e:	d0f7      	beq.n	7c70 <sio2host_rx+0x68>
			serial_rx_buf_head++;
    7c80:	3301      	adds	r3, #1
    7c82:	b2db      	uxtb	r3, r3
    7c84:	e7f5      	b.n	7c72 <sio2host_rx+0x6a>
    7c86:	4a02      	ldr	r2, [pc, #8]	; (7c90 <sio2host_rx+0x88>)
    7c88:	7013      	strb	r3, [r2, #0]
}
    7c8a:	bd70      	pop	{r4, r5, r6, pc}
    7c8c:	20000c55 	.word	0x20000c55
    7c90:	20000c54 	.word	0x20000c54
    7c94:	20000c56 	.word	0x20000c56
    7c98:	20000bd4 	.word	0x20000bd4

00007c9c <sio2host_getchar_nowait>:
{
    7c9c:	b500      	push	{lr}
    7c9e:	b083      	sub	sp, #12
	int back = sio2host_rx(&c, 1);
    7ca0:	2101      	movs	r1, #1
    7ca2:	466b      	mov	r3, sp
    7ca4:	1dd8      	adds	r0, r3, #7
    7ca6:	4b05      	ldr	r3, [pc, #20]	; (7cbc <sio2host_getchar_nowait+0x20>)
    7ca8:	4798      	blx	r3
	if (back >= 1) {
    7caa:	2800      	cmp	r0, #0
    7cac:	dd03      	ble.n	7cb6 <sio2host_getchar_nowait+0x1a>
		return c;
    7cae:	466b      	mov	r3, sp
    7cb0:	79d8      	ldrb	r0, [r3, #7]
}
    7cb2:	b003      	add	sp, #12
    7cb4:	bd00      	pop	{pc}
		return (-1);
    7cb6:	2001      	movs	r0, #1
    7cb8:	4240      	negs	r0, r0
    7cba:	e7fa      	b.n	7cb2 <sio2host_getchar_nowait+0x16>
    7cbc:	00007c09 	.word	0x00007c09

00007cc0 <HAL_SPISend>:
	SercomSpi *const spi_module = &(module->hw->SPI);
    7cc0:	4b13      	ldr	r3, [pc, #76]	; (7d10 <HAL_SPISend+0x50>)
    7cc2:	681b      	ldr	r3, [r3, #0]
static uint8_t HAL_SPISend(uint8_t data)
{
	uint16_t read_val = 0;
	
	/* Write the byte in the transceiver data register */
	while (!spi_is_ready_to_write(&master));
    7cc4:	2101      	movs	r1, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    7cc6:	7e1a      	ldrb	r2, [r3, #24]
    7cc8:	420a      	tst	r2, r1
    7cca:	d0fc      	beq.n	7cc6 <HAL_SPISend+0x6>
    7ccc:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    7cce:	07d2      	lsls	r2, r2, #31
    7cd0:	d500      	bpl.n	7cd4 <HAL_SPISend+0x14>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    7cd2:	6298      	str	r0, [r3, #40]	; 0x28
	spi_write(&master, data);
	while (!spi_is_write_complete(&master));
    7cd4:	2102      	movs	r1, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    7cd6:	7e1a      	ldrb	r2, [r3, #24]
    7cd8:	420a      	tst	r2, r1
    7cda:	d0fc      	beq.n	7cd6 <HAL_SPISend+0x16>
	
	while (!spi_is_ready_to_read(&master));
    7cdc:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    7cde:	7e1a      	ldrb	r2, [r3, #24]
    7ce0:	420a      	tst	r2, r1
    7ce2:	d0fc      	beq.n	7cde <HAL_SPISend+0x1e>
    7ce4:	7e1a      	ldrb	r2, [r3, #24]
	uint16_t read_val = 0;
    7ce6:	2000      	movs	r0, #0
	if (!spi_is_ready_to_read(module)) {
    7ce8:	0752      	lsls	r2, r2, #29
    7cea:	d50a      	bpl.n	7d02 <HAL_SPISend+0x42>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    7cec:	8b5a      	ldrh	r2, [r3, #26]
    7cee:	0752      	lsls	r2, r2, #29
    7cf0:	d501      	bpl.n	7cf6 <HAL_SPISend+0x36>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    7cf2:	2204      	movs	r2, #4
    7cf4:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    7cf6:	4a06      	ldr	r2, [pc, #24]	; (7d10 <HAL_SPISend+0x50>)
    7cf8:	7992      	ldrb	r2, [r2, #6]
    7cfa:	2a01      	cmp	r2, #1
    7cfc:	d003      	beq.n	7d06 <HAL_SPISend+0x46>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    7cfe:	6a98      	ldr	r0, [r3, #40]	; 0x28
    7d00:	b2c0      	uxtb	r0, r0
	spi_read(&master, &read_val);
	
	return ((uint8_t)read_val);
    7d02:	b2c0      	uxtb	r0, r0
}
    7d04:	4770      	bx	lr
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    7d06:	6a98      	ldr	r0, [r3, #40]	; 0x28
    7d08:	05c0      	lsls	r0, r0, #23
    7d0a:	0dc0      	lsrs	r0, r0, #23
    7d0c:	e7f9      	b.n	7d02 <HAL_SPISend+0x42>
    7d0e:	46c0      	nop			; (mov r8, r8)
    7d10:	20000c64 	.word	0x20000c64

00007d14 <HAL_ResetPinMakeOutput>:
{
    7d14:	b500      	push	{lr}
    7d16:	b083      	sub	sp, #12
	config->input_pull = PORT_PIN_PULL_UP;
    7d18:	a901      	add	r1, sp, #4
    7d1a:	2301      	movs	r3, #1
    7d1c:	704b      	strb	r3, [r1, #1]
	config->powersave  = false;
    7d1e:	2200      	movs	r2, #0
    7d20:	708a      	strb	r2, [r1, #2]
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
    7d22:	700b      	strb	r3, [r1, #0]
	port_pin_set_config(SX_RF_RESET_PIN,&pin_conf);
    7d24:	202f      	movs	r0, #47	; 0x2f
    7d26:	4b02      	ldr	r3, [pc, #8]	; (7d30 <HAL_ResetPinMakeOutput+0x1c>)
    7d28:	4798      	blx	r3
}
    7d2a:	b003      	add	sp, #12
    7d2c:	bd00      	pop	{pc}
    7d2e:	46c0      	nop			; (mov r8, r8)
    7d30:	00004e1d 	.word	0x00004e1d

00007d34 <HAL_RadioDIO2Callback>:
{
    7d34:	b510      	push	{r4, lr}
  if (interruptHandlerDio2)
    7d36:	4b05      	ldr	r3, [pc, #20]	; (7d4c <HAL_RadioDIO2Callback+0x18>)
    7d38:	681b      	ldr	r3, [r3, #0]
    7d3a:	2b00      	cmp	r3, #0
    7d3c:	d004      	beq.n	7d48 <HAL_RadioDIO2Callback+0x14>
	PMM_Wakeup();
    7d3e:	4b04      	ldr	r3, [pc, #16]	; (7d50 <HAL_RadioDIO2Callback+0x1c>)
    7d40:	4798      	blx	r3
    interruptHandlerDio2();
    7d42:	4b02      	ldr	r3, [pc, #8]	; (7d4c <HAL_RadioDIO2Callback+0x18>)
    7d44:	681b      	ldr	r3, [r3, #0]
    7d46:	4798      	blx	r3
}
    7d48:	bd10      	pop	{r4, pc}
    7d4a:	46c0      	nop			; (mov r8, r8)
    7d4c:	20000c60 	.word	0x20000c60
    7d50:	000082d1 	.word	0x000082d1

00007d54 <HAL_RadioDIO1Callback>:
{
    7d54:	b510      	push	{r4, lr}
  if (interruptHandlerDio1)
    7d56:	4b05      	ldr	r3, [pc, #20]	; (7d6c <HAL_RadioDIO1Callback+0x18>)
    7d58:	681b      	ldr	r3, [r3, #0]
    7d5a:	2b00      	cmp	r3, #0
    7d5c:	d004      	beq.n	7d68 <HAL_RadioDIO1Callback+0x14>
	PMM_Wakeup();
    7d5e:	4b04      	ldr	r3, [pc, #16]	; (7d70 <HAL_RadioDIO1Callback+0x1c>)
    7d60:	4798      	blx	r3
    interruptHandlerDio1();
    7d62:	4b02      	ldr	r3, [pc, #8]	; (7d6c <HAL_RadioDIO1Callback+0x18>)
    7d64:	681b      	ldr	r3, [r3, #0]
    7d66:	4798      	blx	r3
}
    7d68:	bd10      	pop	{r4, pc}
    7d6a:	46c0      	nop			; (mov r8, r8)
    7d6c:	20000c5c 	.word	0x20000c5c
    7d70:	000082d1 	.word	0x000082d1

00007d74 <HAL_RadioDIO0Callback>:
{
    7d74:	b510      	push	{r4, lr}
  if (interruptHandlerDio0)
    7d76:	4b05      	ldr	r3, [pc, #20]	; (7d8c <HAL_RadioDIO0Callback+0x18>)
    7d78:	681b      	ldr	r3, [r3, #0]
    7d7a:	2b00      	cmp	r3, #0
    7d7c:	d004      	beq.n	7d88 <HAL_RadioDIO0Callback+0x14>
	PMM_Wakeup();
    7d7e:	4b04      	ldr	r3, [pc, #16]	; (7d90 <HAL_RadioDIO0Callback+0x1c>)
    7d80:	4798      	blx	r3
    interruptHandlerDio0();
    7d82:	4b02      	ldr	r3, [pc, #8]	; (7d8c <HAL_RadioDIO0Callback+0x18>)
    7d84:	681b      	ldr	r3, [r3, #0]
    7d86:	4798      	blx	r3
}
    7d88:	bd10      	pop	{r4, pc}
    7d8a:	46c0      	nop			; (mov r8, r8)
    7d8c:	20000c58 	.word	0x20000c58
    7d90:	000082d1 	.word	0x000082d1

00007d94 <HAL_SPICSAssert>:
{
    7d94:	b510      	push	{r4, lr}
	spi_select_slave(&master, &slave, true);
    7d96:	2201      	movs	r2, #1
    7d98:	4902      	ldr	r1, [pc, #8]	; (7da4 <HAL_SPICSAssert+0x10>)
    7d9a:	4803      	ldr	r0, [pc, #12]	; (7da8 <HAL_SPICSAssert+0x14>)
    7d9c:	4b03      	ldr	r3, [pc, #12]	; (7dac <HAL_SPICSAssert+0x18>)
    7d9e:	4798      	blx	r3
}
    7da0:	bd10      	pop	{r4, pc}
    7da2:	46c0      	nop			; (mov r8, r8)
    7da4:	20002270 	.word	0x20002270
    7da8:	20000c64 	.word	0x20000c64
    7dac:	00006295 	.word	0x00006295

00007db0 <HAL_SPICSDeassert>:
{
    7db0:	b510      	push	{r4, lr}
	spi_select_slave(&master, &slave, false);
    7db2:	2200      	movs	r2, #0
    7db4:	4902      	ldr	r1, [pc, #8]	; (7dc0 <HAL_SPICSDeassert+0x10>)
    7db6:	4803      	ldr	r0, [pc, #12]	; (7dc4 <HAL_SPICSDeassert+0x14>)
    7db8:	4b03      	ldr	r3, [pc, #12]	; (7dc8 <HAL_SPICSDeassert+0x18>)
    7dba:	4798      	blx	r3
}
    7dbc:	bd10      	pop	{r4, pc}
    7dbe:	46c0      	nop			; (mov r8, r8)
    7dc0:	20002270 	.word	0x20002270
    7dc4:	20000c64 	.word	0x20000c64
    7dc8:	00006295 	.word	0x00006295

00007dcc <HAL_RadioInit>:
{
    7dcc:	b5f0      	push	{r4, r5, r6, r7, lr}
    7dce:	46d6      	mov	lr, sl
    7dd0:	464f      	mov	r7, r9
    7dd2:	4646      	mov	r6, r8
    7dd4:	b5c0      	push	{r6, r7, lr}
    7dd6:	b090      	sub	sp, #64	; 0x40
	config->input_pull = PORT_PIN_PULL_UP;
    7dd8:	ac01      	add	r4, sp, #4
    7dda:	2601      	movs	r6, #1
    7ddc:	7066      	strb	r6, [r4, #1]
	config->powersave  = false;
    7dde:	2500      	movs	r5, #0
    7de0:	70a5      	strb	r5, [r4, #2]
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    7de2:	7026      	strb	r6, [r4, #0]
	port_pin_set_config(SX_RF_SPI_SCK, &pin_conf);
    7de4:	0021      	movs	r1, r4
    7de6:	2052      	movs	r0, #82	; 0x52
    7de8:	4f52      	ldr	r7, [pc, #328]	; (7f34 <HAL_RadioInit+0x168>)
    7dea:	47b8      	blx	r7
	port_pin_set_config(SX_RF_SPI_MOSI, &pin_conf);
    7dec:	0021      	movs	r1, r4
    7dee:	203e      	movs	r0, #62	; 0x3e
    7df0:	47b8      	blx	r7
	port_pin_set_config(SX_RF_SPI_CS, &pin_conf);
    7df2:	0021      	movs	r1, r4
    7df4:	203f      	movs	r0, #63	; 0x3f
    7df6:	47b8      	blx	r7
	port_pin_set_config(SX_RF_RESET_PIN, &pin_conf);
    7df8:	0021      	movs	r1, r4
    7dfa:	202f      	movs	r0, #47	; 0x2f
    7dfc:	47b8      	blx	r7
		port_base->OUTSET.reg = pin_mask;
    7dfe:	2280      	movs	r2, #128	; 0x80
    7e00:	02d2      	lsls	r2, r2, #11
    7e02:	4b4d      	ldr	r3, [pc, #308]	; (7f38 <HAL_RadioInit+0x16c>)
    7e04:	619a      	str	r2, [r3, #24]
    7e06:	4b4d      	ldr	r3, [pc, #308]	; (7f3c <HAL_RadioInit+0x170>)
    7e08:	2280      	movs	r2, #128	; 0x80
    7e0a:	05d2      	lsls	r2, r2, #23
    7e0c:	619a      	str	r2, [r3, #24]
    7e0e:	2280      	movs	r2, #128	; 0x80
    7e10:	0612      	lsls	r2, r2, #24
    7e12:	619a      	str	r2, [r3, #24]
    7e14:	2280      	movs	r2, #128	; 0x80
    7e16:	0212      	lsls	r2, r2, #8
    7e18:	619a      	str	r2, [r3, #24]
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
    7e1a:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(SX_RF_SPI_MISO, &pin_conf);
    7e1c:	0021      	movs	r1, r4
    7e1e:	2053      	movs	r0, #83	; 0x53
    7e20:	47b8      	blx	r7
	extint_chan_get_config_defaults(&config_extint_chan);
    7e22:	ac02      	add	r4, sp, #8
    7e24:	0020      	movs	r0, r4
    7e26:	4b46      	ldr	r3, [pc, #280]	; (7f40 <HAL_RadioInit+0x174>)
    7e28:	4798      	blx	r3
	config_extint_chan.gpio_pin           = DIO0_EIC_PIN;
    7e2a:	2330      	movs	r3, #48	; 0x30
    7e2c:	9302      	str	r3, [sp, #8]
	config_extint_chan.gpio_pin_mux       = DIO0_EIC_MUX;
    7e2e:	6065      	str	r5, [r4, #4]
	config_extint_chan.gpio_pin_pull      = EXTINT_PULL_NONE;
    7e30:	7225      	strb	r5, [r4, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_RISING;
    7e32:	72e6      	strb	r6, [r4, #11]
	extint_chan_set_config(DIO0_EIC_LINE, &config_extint_chan);
    7e34:	0021      	movs	r1, r4
    7e36:	2000      	movs	r0, #0
    7e38:	4b42      	ldr	r3, [pc, #264]	; (7f44 <HAL_RadioInit+0x178>)
    7e3a:	469a      	mov	sl, r3
    7e3c:	4798      	blx	r3
	extint_register_callback(HAL_RadioDIO0Callback,DIO0_EIC_LINE,EXTINT_CALLBACK_TYPE_DETECT);
    7e3e:	2200      	movs	r2, #0
    7e40:	2100      	movs	r1, #0
    7e42:	4841      	ldr	r0, [pc, #260]	; (7f48 <HAL_RadioInit+0x17c>)
    7e44:	4b41      	ldr	r3, [pc, #260]	; (7f4c <HAL_RadioInit+0x180>)
    7e46:	4699      	mov	r9, r3
    7e48:	4798      	blx	r3
	extint_chan_enable_callback(DIO0_EIC_LINE,EXTINT_CALLBACK_TYPE_DETECT);
    7e4a:	2100      	movs	r1, #0
    7e4c:	2000      	movs	r0, #0
    7e4e:	4b40      	ldr	r3, [pc, #256]	; (7f50 <HAL_RadioInit+0x184>)
    7e50:	4698      	mov	r8, r3
    7e52:	4798      	blx	r3
	config_extint_chan.gpio_pin           = DIO1_EIC_PIN;
    7e54:	230b      	movs	r3, #11
    7e56:	9302      	str	r3, [sp, #8]
	config_extint_chan.gpio_pin_mux       = DIO1_EIC_MUX;
    7e58:	6065      	str	r5, [r4, #4]
	config_extint_chan.gpio_pin_pull      = EXTINT_PULL_NONE;
    7e5a:	7225      	strb	r5, [r4, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_RISING;
    7e5c:	72e6      	strb	r6, [r4, #11]
	extint_chan_set_config(DIO1_EIC_LINE, &config_extint_chan);
    7e5e:	0021      	movs	r1, r4
    7e60:	200b      	movs	r0, #11
    7e62:	47d0      	blx	sl
	extint_register_callback(HAL_RadioDIO1Callback,DIO1_EIC_LINE,EXTINT_CALLBACK_TYPE_DETECT);
    7e64:	2200      	movs	r2, #0
    7e66:	210b      	movs	r1, #11
    7e68:	483a      	ldr	r0, [pc, #232]	; (7f54 <HAL_RadioInit+0x188>)
    7e6a:	47c8      	blx	r9
	extint_chan_enable_callback(DIO1_EIC_LINE,EXTINT_CALLBACK_TYPE_DETECT);
    7e6c:	2100      	movs	r1, #0
    7e6e:	200b      	movs	r0, #11
    7e70:	47c0      	blx	r8
	config_extint_chan.gpio_pin           = DIO2_EIC_PIN;
    7e72:	230c      	movs	r3, #12
    7e74:	9302      	str	r3, [sp, #8]
	config_extint_chan.gpio_pin_mux       = DIO2_EIC_MUX;
    7e76:	6065      	str	r5, [r4, #4]
	config_extint_chan.gpio_pin_pull      = EXTINT_PULL_NONE;
    7e78:	7225      	strb	r5, [r4, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_RISING;
    7e7a:	72e6      	strb	r6, [r4, #11]
	extint_chan_set_config(DIO2_EIC_LINE, &config_extint_chan);
    7e7c:	0021      	movs	r1, r4
    7e7e:	200c      	movs	r0, #12
    7e80:	47d0      	blx	sl
	extint_register_callback(HAL_RadioDIO2Callback,DIO2_EIC_LINE,EXTINT_CALLBACK_TYPE_DETECT);
    7e82:	2200      	movs	r2, #0
    7e84:	210c      	movs	r1, #12
    7e86:	4834      	ldr	r0, [pc, #208]	; (7f58 <HAL_RadioInit+0x18c>)
    7e88:	47c8      	blx	r9
	extint_chan_enable_callback(DIO2_EIC_LINE,EXTINT_CALLBACK_TYPE_DETECT);
    7e8a:	2100      	movs	r1, #0
    7e8c:	200c      	movs	r0, #12
    7e8e:	47c0      	blx	r8
	slave->ss_pin          = config->ss_pin;
    7e90:	4b32      	ldr	r3, [pc, #200]	; (7f5c <HAL_RadioInit+0x190>)
    7e92:	4698      	mov	r8, r3
    7e94:	233f      	movs	r3, #63	; 0x3f
    7e96:	4642      	mov	r2, r8
    7e98:	7013      	strb	r3, [r2, #0]
	slave->address_enabled = config->address_enabled;
    7e9a:	7055      	strb	r5, [r2, #1]
	slave->address         = config->address;
    7e9c:	7095      	strb	r5, [r2, #2]
	config->input_pull = PORT_PIN_PULL_UP;
    7e9e:	7066      	strb	r6, [r4, #1]
	config->powersave  = false;
    7ea0:	70a5      	strb	r5, [r4, #2]
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
    7ea2:	7026      	strb	r6, [r4, #0]
	port_pin_set_config(slave->ss_pin, &pin_conf);
    7ea4:	0021      	movs	r1, r4
    7ea6:	203f      	movs	r0, #63	; 0x3f
    7ea8:	47b8      	blx	r7
	port_pin_set_output_level(slave->ss_pin, true);
    7eaa:	4643      	mov	r3, r8
    7eac:	781a      	ldrb	r2, [r3, #0]
	if (port_index < PORT_INST_NUM) {
    7eae:	09d1      	lsrs	r1, r2, #7
		return NULL;
    7eb0:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    7eb2:	2900      	cmp	r1, #0
    7eb4:	d104      	bne.n	7ec0 <HAL_RadioInit+0xf4>
		return &(ports[port_index]->Group[group_index]);
    7eb6:	0953      	lsrs	r3, r2, #5
    7eb8:	01db      	lsls	r3, r3, #7
    7eba:	4929      	ldr	r1, [pc, #164]	; (7f60 <HAL_RadioInit+0x194>)
    7ebc:	468c      	mov	ip, r1
    7ebe:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    7ec0:	211f      	movs	r1, #31
    7ec2:	4011      	ands	r1, r2
    7ec4:	2201      	movs	r2, #1
    7ec6:	0010      	movs	r0, r2
    7ec8:	4088      	lsls	r0, r1
		port_base->OUTSET.reg = pin_mask;
    7eca:	6198      	str	r0, [r3, #24]
	config->mode             = SPI_MODE_MASTER;
    7ecc:	ac02      	add	r4, sp, #8
    7ece:	7022      	strb	r2, [r4, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
    7ed0:	2300      	movs	r3, #0
    7ed2:	9303      	str	r3, [sp, #12]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
    7ed4:	9304      	str	r3, [sp, #16]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
    7ed6:	7423      	strb	r3, [r4, #16]
	config->run_in_standby   = false;
    7ed8:	7463      	strb	r3, [r4, #17]
	config->receiver_enable  = true;
    7eda:	74a2      	strb	r2, [r4, #18]
	config->select_slave_low_detect_enable= true;
    7edc:	74e2      	strb	r2, [r4, #19]
	config->master_slave_select_enable= false;
    7ede:	7523      	strb	r3, [r4, #20]
	config->generator_source = GCLK_GENERATOR_0;
    7ee0:	3223      	adds	r2, #35	; 0x23
    7ee2:	54a3      	strb	r3, [r4, r2]
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
    7ee4:	3a18      	subs	r2, #24
    7ee6:	2100      	movs	r1, #0
    7ee8:	a808      	add	r0, sp, #32
    7eea:	4b1e      	ldr	r3, [pc, #120]	; (7f64 <HAL_RadioInit+0x198>)
    7eec:	4798      	blx	r3
	config_spi_master.mode_specific.master.baudrate = SX_RF_SPI_BAUDRATE;
    7eee:	4b1e      	ldr	r3, [pc, #120]	; (7f68 <HAL_RadioInit+0x19c>)
    7ef0:	61a3      	str	r3, [r4, #24]
	config_spi_master.mux_setting = SX_RF_SPI_SERCOM_MUX_SETTING;
    7ef2:	2380      	movs	r3, #128	; 0x80
    7ef4:	025b      	lsls	r3, r3, #9
    7ef6:	60e3      	str	r3, [r4, #12]
	config_spi_master.pinmux_pad0 = SX_RF_SPI_SERCOM_PINMUX_PAD0;
    7ef8:	4b1c      	ldr	r3, [pc, #112]	; (7f6c <HAL_RadioInit+0x1a0>)
    7efa:	62a3      	str	r3, [r4, #40]	; 0x28
	config_spi_master.pinmux_pad1 = PINMUX_UNUSED;
    7efc:	2301      	movs	r3, #1
    7efe:	425b      	negs	r3, r3
    7f00:	62e3      	str	r3, [r4, #44]	; 0x2c
	config_spi_master.pinmux_pad2 = SX_RF_SPI_SERCOM_PINMUX_PAD2;
    7f02:	4b1b      	ldr	r3, [pc, #108]	; (7f70 <HAL_RadioInit+0x1a4>)
    7f04:	6323      	str	r3, [r4, #48]	; 0x30
	config_spi_master.pinmux_pad3 = SX_RF_SPI_SERCOM_PINMUX_PAD3;
    7f06:	4b1b      	ldr	r3, [pc, #108]	; (7f74 <HAL_RadioInit+0x1a8>)
    7f08:	6363      	str	r3, [r4, #52]	; 0x34
	spi_init(&master, SX_RF_SPI, &config_spi_master);	
    7f0a:	4d1b      	ldr	r5, [pc, #108]	; (7f78 <HAL_RadioInit+0x1ac>)
    7f0c:	0022      	movs	r2, r4
    7f0e:	491b      	ldr	r1, [pc, #108]	; (7f7c <HAL_RadioInit+0x1b0>)
    7f10:	0028      	movs	r0, r5
    7f12:	4b1b      	ldr	r3, [pc, #108]	; (7f80 <HAL_RadioInit+0x1b4>)
    7f14:	4798      	blx	r3
	SercomSpi *const spi_module = &(module->hw->SPI);
    7f16:	682a      	ldr	r2, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
    7f18:	69d3      	ldr	r3, [r2, #28]
	while (spi_is_syncing(module)) {
    7f1a:	2b00      	cmp	r3, #0
    7f1c:	d1fc      	bne.n	7f18 <HAL_RadioInit+0x14c>
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    7f1e:	6813      	ldr	r3, [r2, #0]
    7f20:	2102      	movs	r1, #2
    7f22:	430b      	orrs	r3, r1
    7f24:	6013      	str	r3, [r2, #0]
}
    7f26:	b010      	add	sp, #64	; 0x40
    7f28:	bc1c      	pop	{r2, r3, r4}
    7f2a:	4690      	mov	r8, r2
    7f2c:	4699      	mov	r9, r3
    7f2e:	46a2      	mov	sl, r4
    7f30:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7f32:	46c0      	nop			; (mov r8, r8)
    7f34:	00004e1d 	.word	0x00004e1d
    7f38:	40002900 	.word	0x40002900
    7f3c:	40002880 	.word	0x40002880
    7f40:	000049b5 	.word	0x000049b5
    7f44:	000049c9 	.word	0x000049c9
    7f48:	00007d75 	.word	0x00007d75
    7f4c:	00004875 	.word	0x00004875
    7f50:	000048a1 	.word	0x000048a1
    7f54:	00007d55 	.word	0x00007d55
    7f58:	00007d35 	.word	0x00007d35
    7f5c:	20002270 	.word	0x20002270
    7f60:	40002800 	.word	0x40002800
    7f64:	00019e35 	.word	0x00019e35
    7f68:	001e8480 	.word	0x001e8480
    7f6c:	00530005 	.word	0x00530005
    7f70:	003e0005 	.word	0x003e0005
    7f74:	00520005 	.word	0x00520005
    7f78:	20000c64 	.word	0x20000c64
    7f7c:	42001000 	.word	0x42001000
    7f80:	00005fb9 	.word	0x00005fb9

00007f84 <HAL_Radio_resources_init>:
	SercomSpi *const spi_module = &(module->hw->SPI);
    7f84:	4b07      	ldr	r3, [pc, #28]	; (7fa4 <HAL_Radio_resources_init+0x20>)
    7f86:	681a      	ldr	r2, [r3, #0]
	return (spi_module->SYNCBUSY.reg);
    7f88:	69d3      	ldr	r3, [r2, #28]
	while (spi_is_syncing(module)) {
    7f8a:	2b00      	cmp	r3, #0
    7f8c:	d1fc      	bne.n	7f88 <HAL_Radio_resources_init+0x4>
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    7f8e:	6813      	ldr	r3, [r2, #0]
    7f90:	2102      	movs	r1, #2
    7f92:	430b      	orrs	r3, r1
    7f94:	6013      	str	r3, [r2, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    7f96:	4b03      	ldr	r3, [pc, #12]	; (7fa4 <HAL_Radio_resources_init+0x20>)
    7f98:	681a      	ldr	r2, [r3, #0]
	return (spi_module->SYNCBUSY.reg);
    7f9a:	69d3      	ldr	r3, [r2, #28]
	while (spi_is_syncing(&master)) {
    7f9c:	2b00      	cmp	r3, #0
    7f9e:	d1fc      	bne.n	7f9a <HAL_Radio_resources_init+0x16>
}
    7fa0:	4770      	bx	lr
    7fa2:	46c0      	nop			; (mov r8, r8)
    7fa4:	20000c64 	.word	0x20000c64

00007fa8 <HAL_RadioDeInit>:
	SercomSpi *const spi_module = &(module->hw->SPI);
    7fa8:	4b06      	ldr	r3, [pc, #24]	; (7fc4 <HAL_RadioDeInit+0x1c>)
    7faa:	681a      	ldr	r2, [r3, #0]
	return (spi_module->SYNCBUSY.reg);
    7fac:	69d3      	ldr	r3, [r2, #28]
	while (spi_is_syncing(module)) {
    7fae:	2b00      	cmp	r3, #0
    7fb0:	d1fc      	bne.n	7fac <HAL_RadioDeInit+0x4>
	spi_module->INTENCLR.reg = SERCOM_SPI_INTENCLR_MASK;
    7fb2:	338f      	adds	r3, #143	; 0x8f
    7fb4:	7513      	strb	r3, [r2, #20]
	spi_module->INTFLAG.reg = SERCOM_SPI_INTFLAG_MASK;
    7fb6:	7613      	strb	r3, [r2, #24]
	spi_module->CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    7fb8:	6813      	ldr	r3, [r2, #0]
    7fba:	2102      	movs	r1, #2
    7fbc:	438b      	bics	r3, r1
    7fbe:	6013      	str	r3, [r2, #0]
}
    7fc0:	4770      	bx	lr
    7fc2:	46c0      	nop			; (mov r8, r8)
    7fc4:	20000c64 	.word	0x20000c64

00007fc8 <RADIO_Reset>:
{
    7fc8:	b570      	push	{r4, r5, r6, lr}
    7fca:	b082      	sub	sp, #8
	HAL_ResetPinMakeOutput();
    7fcc:	4c0a      	ldr	r4, [pc, #40]	; (7ff8 <RADIO_Reset+0x30>)
    7fce:	47a0      	blx	r4
		port_base->OUTCLR.reg = pin_mask;
    7fd0:	4d0a      	ldr	r5, [pc, #40]	; (7ffc <RADIO_Reset+0x34>)
    7fd2:	2680      	movs	r6, #128	; 0x80
    7fd4:	0236      	lsls	r6, r6, #8
    7fd6:	616e      	str	r6, [r5, #20]
	SystemBlockingWaitMs(1);
    7fd8:	2001      	movs	r0, #1
    7fda:	4b09      	ldr	r3, [pc, #36]	; (8000 <RADIO_Reset+0x38>)
    7fdc:	4798      	blx	r3
	config->direction  = PORT_PIN_DIR_INPUT;
    7fde:	a901      	add	r1, sp, #4
    7fe0:	2300      	movs	r3, #0
    7fe2:	700b      	strb	r3, [r1, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    7fe4:	2201      	movs	r2, #1
    7fe6:	704a      	strb	r2, [r1, #1]
	config->powersave  = false;
    7fe8:	708b      	strb	r3, [r1, #2]
	port_pin_set_config(SX_RF_RESET_PIN,&pin_conf);
    7fea:	202f      	movs	r0, #47	; 0x2f
    7fec:	4b05      	ldr	r3, [pc, #20]	; (8004 <RADIO_Reset+0x3c>)
    7fee:	4798      	blx	r3
		port_base->OUTSET.reg = pin_mask;
    7ff0:	61ae      	str	r6, [r5, #24]
	HAL_ResetPinMakeOutput();
    7ff2:	47a0      	blx	r4
}
    7ff4:	b002      	add	sp, #8
    7ff6:	bd70      	pop	{r4, r5, r6, pc}
    7ff8:	00007d15 	.word	0x00007d15
    7ffc:	40002880 	.word	0x40002880
    8000:	00008265 	.word	0x00008265
    8004:	00004e1d 	.word	0x00004e1d

00008008 <RADIO_RegisterWrite>:
{
    8008:	b570      	push	{r4, r5, r6, lr}
    800a:	0004      	movs	r4, r0
    800c:	000d      	movs	r5, r1
	HAL_SPICSAssert();
    800e:	4b05      	ldr	r3, [pc, #20]	; (8024 <RADIO_RegisterWrite+0x1c>)
    8010:	4798      	blx	r3
	HAL_SPISend(REG_WRITE_CMD | reg);
    8012:	2080      	movs	r0, #128	; 0x80
    8014:	4320      	orrs	r0, r4
    8016:	4c04      	ldr	r4, [pc, #16]	; (8028 <RADIO_RegisterWrite+0x20>)
    8018:	47a0      	blx	r4
	HAL_SPISend(value);
    801a:	0028      	movs	r0, r5
    801c:	47a0      	blx	r4
	HAL_SPICSDeassert();
    801e:	4b03      	ldr	r3, [pc, #12]	; (802c <RADIO_RegisterWrite+0x24>)
    8020:	4798      	blx	r3
}
    8022:	bd70      	pop	{r4, r5, r6, pc}
    8024:	00007d95 	.word	0x00007d95
    8028:	00007cc1 	.word	0x00007cc1
    802c:	00007db1 	.word	0x00007db1

00008030 <RADIO_RegisterRead>:
{
    8030:	b510      	push	{r4, lr}
    8032:	0004      	movs	r4, r0
	HAL_SPICSAssert();
    8034:	4b06      	ldr	r3, [pc, #24]	; (8050 <RADIO_RegisterRead+0x20>)
    8036:	4798      	blx	r3
	HAL_SPISend(reg);
    8038:	207f      	movs	r0, #127	; 0x7f
    803a:	4020      	ands	r0, r4
    803c:	4c05      	ldr	r4, [pc, #20]	; (8054 <RADIO_RegisterRead+0x24>)
    803e:	47a0      	blx	r4
	readValue = HAL_SPISend(0xFF);
    8040:	20ff      	movs	r0, #255	; 0xff
    8042:	47a0      	blx	r4
    8044:	0004      	movs	r4, r0
	HAL_SPICSDeassert();
    8046:	4b04      	ldr	r3, [pc, #16]	; (8058 <RADIO_RegisterRead+0x28>)
    8048:	4798      	blx	r3
}
    804a:	0020      	movs	r0, r4
    804c:	bd10      	pop	{r4, pc}
    804e:	46c0      	nop			; (mov r8, r8)
    8050:	00007d95 	.word	0x00007d95
    8054:	00007cc1 	.word	0x00007cc1
    8058:	00007db1 	.word	0x00007db1

0000805c <RADIO_FrameWrite>:
{
    805c:	b570      	push	{r4, r5, r6, lr}
    805e:	0004      	movs	r4, r0
    8060:	000e      	movs	r6, r1
    8062:	0015      	movs	r5, r2
    HAL_SPICSAssert();
    8064:	4b0a      	ldr	r3, [pc, #40]	; (8090 <RADIO_FrameWrite+0x34>)
    8066:	4798      	blx	r3
    HAL_SPISend(REG_WRITE_CMD | offset);
    8068:	2080      	movs	r0, #128	; 0x80
    806a:	4320      	orrs	r0, r4
    806c:	4b09      	ldr	r3, [pc, #36]	; (8094 <RADIO_FrameWrite+0x38>)
    806e:	4798      	blx	r3
    for (uint8_t i = 0; i < bufferLen; i++)
    8070:	2d00      	cmp	r5, #0
    8072:	d00a      	beq.n	808a <RADIO_FrameWrite+0x2e>
    8074:	0034      	movs	r4, r6
    8076:	3d01      	subs	r5, #1
    8078:	b2ed      	uxtb	r5, r5
    807a:	3501      	adds	r5, #1
    807c:	1975      	adds	r5, r6, r5
	    HAL_SPISend(buffer[i]);
    807e:	4e05      	ldr	r6, [pc, #20]	; (8094 <RADIO_FrameWrite+0x38>)
    8080:	7820      	ldrb	r0, [r4, #0]
    8082:	47b0      	blx	r6
    8084:	3401      	adds	r4, #1
    for (uint8_t i = 0; i < bufferLen; i++)
    8086:	42ac      	cmp	r4, r5
    8088:	d1fa      	bne.n	8080 <RADIO_FrameWrite+0x24>
    HAL_SPICSDeassert();
    808a:	4b03      	ldr	r3, [pc, #12]	; (8098 <RADIO_FrameWrite+0x3c>)
    808c:	4798      	blx	r3
}
    808e:	bd70      	pop	{r4, r5, r6, pc}
    8090:	00007d95 	.word	0x00007d95
    8094:	00007cc1 	.word	0x00007cc1
    8098:	00007db1 	.word	0x00007db1

0000809c <RADIO_FrameRead>:
{
    809c:	b570      	push	{r4, r5, r6, lr}
    809e:	0004      	movs	r4, r0
    80a0:	000e      	movs	r6, r1
    80a2:	0015      	movs	r5, r2
    HAL_SPICSAssert();
    80a4:	4b0a      	ldr	r3, [pc, #40]	; (80d0 <RADIO_FrameRead+0x34>)
    80a6:	4798      	blx	r3
    HAL_SPISend(offset);
    80a8:	0020      	movs	r0, r4
    80aa:	4b0a      	ldr	r3, [pc, #40]	; (80d4 <RADIO_FrameRead+0x38>)
    80ac:	4798      	blx	r3
    for (uint8_t i = 0; i < bufferLen; i++)
    80ae:	2d00      	cmp	r5, #0
    80b0:	d00b      	beq.n	80ca <RADIO_FrameRead+0x2e>
    80b2:	0034      	movs	r4, r6
    80b4:	3d01      	subs	r5, #1
    80b6:	b2ed      	uxtb	r5, r5
    80b8:	3501      	adds	r5, #1
    80ba:	1975      	adds	r5, r6, r5
	    buffer[i] = HAL_SPISend(0xFF);
    80bc:	4e05      	ldr	r6, [pc, #20]	; (80d4 <RADIO_FrameRead+0x38>)
    80be:	20ff      	movs	r0, #255	; 0xff
    80c0:	47b0      	blx	r6
    80c2:	7020      	strb	r0, [r4, #0]
    80c4:	3401      	adds	r4, #1
    for (uint8_t i = 0; i < bufferLen; i++)
    80c6:	42ac      	cmp	r4, r5
    80c8:	d1f9      	bne.n	80be <RADIO_FrameRead+0x22>
    HAL_SPICSDeassert();
    80ca:	4b03      	ldr	r3, [pc, #12]	; (80d8 <RADIO_FrameRead+0x3c>)
    80cc:	4798      	blx	r3
}
    80ce:	bd70      	pop	{r4, r5, r6, pc}
    80d0:	00007d95 	.word	0x00007d95
    80d4:	00007cc1 	.word	0x00007cc1
    80d8:	00007db1 	.word	0x00007db1

000080dc <HAL_RegisterDioInterruptHandler>:
 * \param[in] dioPin  - DIO pin
 * \param[in] handler - function to be called upon given DIO interrupt
 */
void HAL_RegisterDioInterruptHandler(uint8_t dioPin, DioInterruptHandler_t handler)
{
  switch (dioPin)
    80dc:	2802      	cmp	r0, #2
    80de:	d007      	beq.n	80f0 <HAL_RegisterDioInterruptHandler+0x14>
    80e0:	2804      	cmp	r0, #4
    80e2:	d008      	beq.n	80f6 <HAL_RegisterDioInterruptHandler+0x1a>
    80e4:	2801      	cmp	r0, #1
    80e6:	d000      	beq.n	80ea <HAL_RegisterDioInterruptHandler+0xe>
#endif

    default:
      break;
  }
}
    80e8:	4770      	bx	lr
      interruptHandlerDio0 = handler;
    80ea:	4b04      	ldr	r3, [pc, #16]	; (80fc <HAL_RegisterDioInterruptHandler+0x20>)
    80ec:	6019      	str	r1, [r3, #0]
      break;
    80ee:	e7fb      	b.n	80e8 <HAL_RegisterDioInterruptHandler+0xc>
      interruptHandlerDio1 = handler;
    80f0:	4b03      	ldr	r3, [pc, #12]	; (8100 <HAL_RegisterDioInterruptHandler+0x24>)
    80f2:	6019      	str	r1, [r3, #0]
      break;
    80f4:	e7f8      	b.n	80e8 <HAL_RegisterDioInterruptHandler+0xc>
      interruptHandlerDio2 = handler;
    80f6:	4b03      	ldr	r3, [pc, #12]	; (8104 <HAL_RegisterDioInterruptHandler+0x28>)
    80f8:	6019      	str	r1, [r3, #0]
}
    80fa:	e7f5      	b.n	80e8 <HAL_RegisterDioInterruptHandler+0xc>
    80fc:	20000c58 	.word	0x20000c58
    8100:	20000c5c 	.word	0x20000c5c
    8104:	20000c60 	.word	0x20000c60

00008108 <HAL_EnableRFCtrl>:

void HAL_EnableRFCtrl(RFCtrl1_t RFCtrl1, RFCtrl2_t RFCtrl2)
{
	/* In standard SAMR34_XPRO, Only RFO_HF and PA_BOOST needs to be controlled by a GPIO pin */
#ifdef RFSWITCH_ENABLE
   if ((RFCtrl1 == RFO_HF) || (RFCtrl2 == RX))
    8108:	2801      	cmp	r0, #1
    810a:	d00a      	beq.n	8122 <HAL_EnableRFCtrl+0x1a>
    810c:	2900      	cmp	r1, #0
    810e:	d008      	beq.n	8122 <HAL_EnableRFCtrl+0x1a>
   {
		port_pin_set_output_level(RF_SWITCH_PIN, RF_SWITCH_ACTIVE);		
   }
   else if ((RFCtrl1 == PA_BOOST) && (RFCtrl2 == TX))
    8110:	2802      	cmp	r0, #2
    8112:	d10a      	bne.n	812a <HAL_EnableRFCtrl+0x22>
    8114:	2901      	cmp	r1, #1
    8116:	d108      	bne.n	812a <HAL_EnableRFCtrl+0x22>
		port_base->OUTCLR.reg = pin_mask;
    8118:	2280      	movs	r2, #128	; 0x80
    811a:	0192      	lsls	r2, r2, #6
    811c:	4b03      	ldr	r3, [pc, #12]	; (812c <HAL_EnableRFCtrl+0x24>)
    811e:	615a      	str	r2, [r3, #20]
   {
	   port_pin_set_output_level(RF_SWITCH_PIN, RF_SWITCH_INACTIVE);
   }
#endif	
}
    8120:	e003      	b.n	812a <HAL_EnableRFCtrl+0x22>
		port_base->OUTSET.reg = pin_mask;
    8122:	2280      	movs	r2, #128	; 0x80
    8124:	0192      	lsls	r2, r2, #6
    8126:	4b01      	ldr	r3, [pc, #4]	; (812c <HAL_EnableRFCtrl+0x24>)
    8128:	619a      	str	r2, [r3, #24]
    812a:	4770      	bx	lr
    812c:	40002800 	.word	0x40002800

00008130 <HAL_DisableRFCtrl>:

void HAL_DisableRFCtrl(RFCtrl1_t RFCtrl1, RFCtrl2_t RFCtrl2)
{
	/* In standard SAMR34_XPRO, Only RFO_HF and PA_BOOST needs to be controlled by a GPIO pin */
#ifdef RFSWITCH_ENABLE
	if ((RFCtrl1 == RFO_HF) || (RFCtrl2 == RX))
    8130:	2801      	cmp	r0, #1
    8132:	d001      	beq.n	8138 <HAL_DisableRFCtrl+0x8>
    8134:	2900      	cmp	r1, #0
    8136:	d103      	bne.n	8140 <HAL_DisableRFCtrl+0x10>
		port_base->OUTCLR.reg = pin_mask;
    8138:	2280      	movs	r2, #128	; 0x80
    813a:	0192      	lsls	r2, r2, #6
    813c:	4b01      	ldr	r3, [pc, #4]	; (8144 <HAL_DisableRFCtrl+0x14>)
    813e:	615a      	str	r2, [r3, #20]
	{
		port_pin_set_output_level(RF_SWITCH_PIN, RF_SWITCH_INACTIVE);	
	}
#endif	
}
    8140:	4770      	bx	lr
    8142:	46c0      	nop			; (mov r8, r8)
    8144:	40002800 	.word	0x40002800

00008148 <HAL_GetRadioClkStabilizationDelay>:
 * \param[out] Time value in ms
 */
uint8_t HAL_GetRadioClkStabilizationDelay(void)
{
	return RADIO_CLK_STABILITATION_DELAY;
}
    8148:	2002      	movs	r0, #2
    814a:	4770      	bx	lr

0000814c <HAL_GetRadioClkSrc>:
 * \param[out] Type of clock source TCXO or XTAL
 */
RadioClockSources_t HAL_GetRadioClkSrc(void)
{
	return RADIO_CLK_SRC;
}
    814c:	2000      	movs	r0, #0
    814e:	4770      	bx	lr

00008150 <HAL_TCXOPowerOn>:
 *
 * \param[in] None
 * \param[out] None
 */
void HAL_TCXOPowerOn(void)
{
    8150:	b510      	push	{r4, lr}
		port_base->OUTSET.reg = pin_mask;
    8152:	2280      	movs	r2, #128	; 0x80
    8154:	0092      	lsls	r2, r2, #2
    8156:	4b03      	ldr	r3, [pc, #12]	; (8164 <HAL_TCXOPowerOn+0x14>)
    8158:	619a      	str	r2, [r3, #24]
#ifdef TCXO_ENABLE
	port_pin_set_output_level(TCXO_PWR_PIN, TCXO_PWR_ACTIVE);
	delay_ms(RADIO_CLK_STABILITATION_DELAY);
    815a:	2002      	movs	r0, #2
    815c:	4b02      	ldr	r3, [pc, #8]	; (8168 <HAL_TCXOPowerOn+0x18>)
    815e:	4798      	blx	r3
#endif
}
    8160:	bd10      	pop	{r4, pc}
    8162:	46c0      	nop			; (mov r8, r8)
    8164:	40002800 	.word	0x40002800
    8168:	00004505 	.word	0x00004505

0000816c <HAL_TCXOPowerOff>:
		port_base->OUTCLR.reg = pin_mask;
    816c:	2280      	movs	r2, #128	; 0x80
    816e:	0092      	lsls	r2, r2, #2
    8170:	4b01      	ldr	r3, [pc, #4]	; (8178 <HAL_TCXOPowerOff+0xc>)
    8172:	615a      	str	r2, [r3, #20]
#ifdef TCXO_ENABLE
#ifndef TCXO_ALWAYS_ON
	port_pin_set_output_level(TCXO_PWR_PIN, TCXO_PWR_INACTIVE);
#endif
#endif
}
    8174:	4770      	bx	lr
    8176:	46c0      	nop			; (mov r8, r8)
    8178:	40002800 	.word	0x40002800

0000817c <HAL_Sleep>:
 *
 * \param[in] mode - sleep mode
 */
void HAL_Sleep(HAL_SleepMode_t mode)
{
	switch (mode)
    817c:	2801      	cmp	r0, #1
    817e:	d002      	beq.n	8186 <HAL_Sleep+0xa>
    8180:	2802      	cmp	r0, #2
    8182:	d00c      	beq.n	819e <HAL_Sleep+0x22>
		{
			/* other sleep modes are not implemented currently */
			break;
		}
	}
}
    8184:	4770      	bx	lr
	PM->SLEEPCFG.reg = sleep_mode;
    8186:	2204      	movs	r2, #4
    8188:	2380      	movs	r3, #128	; 0x80
    818a:	05db      	lsls	r3, r3, #23
    818c:	705a      	strb	r2, [r3, #1]
	while(PM->SLEEPCFG.reg != sleep_mode) ;
    818e:	001a      	movs	r2, r3
    8190:	7853      	ldrb	r3, [r2, #1]
    8192:	2b04      	cmp	r3, #4
    8194:	d1fc      	bne.n	8190 <HAL_Sleep+0x14>
  __ASM volatile ("dsb 0xF":::"memory");
    8196:	f3bf 8f4f 	dsb	sy
	__WFI();
    819a:	bf30      	wfi
    819c:	e7f2      	b.n	8184 <HAL_Sleep+0x8>
	PM->SLEEPCFG.reg = sleep_mode;
    819e:	2205      	movs	r2, #5
    81a0:	2380      	movs	r3, #128	; 0x80
    81a2:	05db      	lsls	r3, r3, #23
    81a4:	705a      	strb	r2, [r3, #1]
	while(PM->SLEEPCFG.reg != sleep_mode) ;
    81a6:	001a      	movs	r2, r3
    81a8:	7853      	ldrb	r3, [r2, #1]
    81aa:	2b05      	cmp	r3, #5
    81ac:	d1fc      	bne.n	81a8 <HAL_Sleep+0x2c>
    81ae:	f3bf 8f4f 	dsb	sy
	__WFI();
    81b2:	bf30      	wfi
    81b4:	e7e6      	b.n	8184 <HAL_Sleep+0x8>
	...

000081b8 <SleepTimerInit>:
/************************************** IMPLEMENTATION************************/
/**
* \brief Initializes the sleep timer module
*/
void SleepTimerInit(void)
{
    81b8:	b510      	push	{r4, lr}
    81ba:	b084      	sub	sp, #16
	/* Sanity check argument */
	Assert(config);

	/* Set default into configuration structure */
	config->prescaler           = RTC_COUNT_PRESCALER_DIV_1024;
	config->mode                = RTC_COUNT_MODE_32BIT;
    81bc:	2201      	movs	r2, #1
    81be:	466b      	mov	r3, sp
    81c0:	709a      	strb	r2, [r3, #2]
	config->clear_on_match      = false;
    81c2:	2300      	movs	r3, #0
    81c4:	4669      	mov	r1, sp
    81c6:	70cb      	strb	r3, [r1, #3]

#ifdef FEATURE_RTC_CONTINUOUSLY_UPDATED
	config->continuously_update = false;
#endif
#if (SAML21XXXB) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30) || (SAMR34) || (SAMR35) || (WLR089)
	config->enable_read_sync    = true;
    81c8:	710a      	strb	r2, [r1, #4]
	struct rtc_count_config rtc_config;
	rtc_count_get_config_defaults(&rtc_config);
	
	rtc_config.prescaler = RTC_COUNT_PRESCALER_OFF;
    81ca:	466a      	mov	r2, sp
    81cc:	800b      	strh	r3, [r1, #0]
	rtc_config.enable_read_sync = true;
	rtc_config.compare_values[0] = COMPARE_COUNT_MAX_VALUE;
    81ce:	3b01      	subs	r3, #1
    81d0:	9302      	str	r3, [sp, #8]
	rtc_config.compare_values[1] = COMPARE_COUNT_MAX_VALUE;
    81d2:	9303      	str	r3, [sp, #12]
	rtc_count_init(&rtc, RTC, &rtc_config);
    81d4:	4c04      	ldr	r4, [pc, #16]	; (81e8 <SleepTimerInit+0x30>)
    81d6:	4905      	ldr	r1, [pc, #20]	; (81ec <SleepTimerInit+0x34>)
    81d8:	0020      	movs	r0, r4
    81da:	4b05      	ldr	r3, [pc, #20]	; (81f0 <SleepTimerInit+0x38>)
    81dc:	4798      	blx	r3
	rtc_count_enable(&rtc);
    81de:	0020      	movs	r0, r4
    81e0:	4b04      	ldr	r3, [pc, #16]	; (81f4 <SleepTimerInit+0x3c>)
    81e2:	4798      	blx	r3
}
    81e4:	b004      	add	sp, #16
    81e6:	bd10      	pop	{r4, pc}
    81e8:	20002274 	.word	0x20002274
    81ec:	40002000 	.word	0x40002000
    81f0:	00004fcd 	.word	0x00004fcd
    81f4:	00004e4d 	.word	0x00004e4d

000081f8 <SleepTimerGetElapsedTime>:
/**
* \brief Calculate the Elapsed Time from the previous call of this function
* \retval Elapsed time in ticks
*/
uint32_t SleepTimerGetElapsedTime(void)
{
    81f8:	b510      	push	{r4, lr}
	return rtc_count_get_count(&rtc);
    81fa:	4802      	ldr	r0, [pc, #8]	; (8204 <SleepTimerGetElapsedTime+0xc>)
    81fc:	4b02      	ldr	r3, [pc, #8]	; (8208 <SleepTimerGetElapsedTime+0x10>)
    81fe:	4798      	blx	r3
}
    8200:	bd10      	pop	{r4, pc}
    8202:	46c0      	nop			; (mov r8, r8)
    8204:	20002274 	.word	0x20002274
    8208:	00004f3d 	.word	0x00004f3d

0000820c <SleepTimerStart>:

/**
* \brief Initializes the sleep timer
*/
void SleepTimerStart(uint32_t sleepTicks, void (*cb)(void))
{
    820c:	b570      	push	{r4, r5, r6, lr}
    820e:	0005      	movs	r5, r0
    8210:	000e      	movs	r6, r1
	rtc_count_set_count(&rtc, 0);
    8212:	4c0a      	ldr	r4, [pc, #40]	; (823c <SleepTimerStart+0x30>)
    8214:	2100      	movs	r1, #0
    8216:	0020      	movs	r0, r4
    8218:	4b09      	ldr	r3, [pc, #36]	; (8240 <SleepTimerStart+0x34>)
    821a:	4798      	blx	r3
	rtc_count_register_callback(&rtc, cb, RTC_COUNT_CALLBACK_COMPARE_0);
    821c:	2208      	movs	r2, #8
    821e:	0031      	movs	r1, r6
    8220:	0020      	movs	r0, r4
    8222:	4b08      	ldr	r3, [pc, #32]	; (8244 <SleepTimerStart+0x38>)
    8224:	4798      	blx	r3
	rtc_count_set_compare(&rtc, sleepTicks, RTC_COUNT_COMPARE_0);
    8226:	2200      	movs	r2, #0
    8228:	0029      	movs	r1, r5
    822a:	0020      	movs	r0, r4
    822c:	4b06      	ldr	r3, [pc, #24]	; (8248 <SleepTimerStart+0x3c>)
    822e:	4798      	blx	r3
	rtc_count_enable_callback(&rtc, RTC_COUNT_CALLBACK_COMPARE_0);
    8230:	2108      	movs	r1, #8
    8232:	0020      	movs	r0, r4
    8234:	4b05      	ldr	r3, [pc, #20]	; (824c <SleepTimerStart+0x40>)
    8236:	4798      	blx	r3
}
    8238:	bd70      	pop	{r4, r5, r6, pc}
    823a:	46c0      	nop			; (mov r8, r8)
    823c:	20002274 	.word	0x20002274
    8240:	00004ef9 	.word	0x00004ef9
    8244:	00005069 	.word	0x00005069
    8248:	00004f69 	.word	0x00004f69
    824c:	000050a5 	.word	0x000050a5

00008250 <SleepTimerStop>:

/**
* \brief Stop the sleep timer
*/
void SleepTimerStop(void)
{
    8250:	b510      	push	{r4, lr}
	rtc_count_disable_callback(&rtc, RTC_COUNT_CALLBACK_COMPARE_0);
    8252:	2108      	movs	r1, #8
    8254:	4801      	ldr	r0, [pc, #4]	; (825c <SleepTimerStop+0xc>)
    8256:	4b02      	ldr	r3, [pc, #8]	; (8260 <SleepTimerStop+0x10>)
    8258:	4798      	blx	r3
}
    825a:	bd10      	pop	{r4, pc}
    825c:	20002274 	.word	0x20002274
    8260:	000050e9 	.word	0x000050e9

00008264 <SystemBlockingWaitMs>:
 * waiting with the MCU in sleep.
 * Find out how long it takes the MCU to go to and wake up from sleep to see if
 * it makes sense to go to sleep at all 
 */
void SystemBlockingWaitMs(uint32_t ms)
{
    8264:	b510      	push	{r4, lr}
#ifndef UT
    delay_ms(ms);
    8266:	2800      	cmp	r0, #0
    8268:	d103      	bne.n	8272 <SystemBlockingWaitMs+0xe>
    826a:	2001      	movs	r0, #1
    826c:	4b02      	ldr	r3, [pc, #8]	; (8278 <SystemBlockingWaitMs+0x14>)
    826e:	4798      	blx	r3
#endif
}
    8270:	bd10      	pop	{r4, pc}
    delay_ms(ms);
    8272:	4b02      	ldr	r3, [pc, #8]	; (827c <SystemBlockingWaitMs+0x18>)
    8274:	4798      	blx	r3
    8276:	e7fb      	b.n	8270 <SystemBlockingWaitMs+0xc>
    8278:	000044d9 	.word	0x000044d9
    827c:	00004505 	.word	0x00004505

00008280 <System_GetExternalEui>:
#if (EDBG_EUI_READ == 1)
#include "edbg_eui.h"
#endif

void System_GetExternalEui(uint8_t *id)
{
    8280:	b510      	push	{r4, lr}
    8282:	b082      	sub	sp, #8
    8284:	466a      	mov	r2, sp
    8286:	4b0a      	ldr	r3, [pc, #40]	; (82b0 <System_GetExternalEui+0x30>)
#elif (defined(__WLR089U0__) && MODULE_EUI_READ == 1)

	#define NVM_UID_ADDRESS   ((volatile uint16_t *)(0x0080400AU))
	uint8_t i = 0, j = 0 ;
	uint8_t moduleDevEUI[8] ;
	for (i = 0; i < 8; i += 2, j++)
    8288:	4c0a      	ldr	r4, [pc, #40]	; (82b4 <System_GetExternalEui+0x34>)
	{
		moduleDevEUI[i] = (NVM_UID_ADDRESS[j] & 0xFF) ;
    828a:	8819      	ldrh	r1, [r3, #0]
    828c:	7011      	strb	r1, [r2, #0]
		moduleDevEUI[i + 1] = (NVM_UID_ADDRESS[j] >> 8) ;
    828e:	8819      	ldrh	r1, [r3, #0]
    8290:	0a09      	lsrs	r1, r1, #8
    8292:	7051      	strb	r1, [r2, #1]
    8294:	3302      	adds	r3, #2
    8296:	3202      	adds	r2, #2
	for (i = 0; i < 8; i += 2, j++)
    8298:	42a3      	cmp	r3, r4
    829a:	d1f6      	bne.n	828a <System_GetExternalEui+0xa>
    829c:	2300      	movs	r3, #0
	}
	for (i= 0; i < 8; i++)
	{
		*id = moduleDevEUI[i] ;
    829e:	466a      	mov	r2, sp
    82a0:	5c9a      	ldrb	r2, [r3, r2]
    82a2:	54c2      	strb	r2, [r0, r3]
    82a4:	3301      	adds	r3, #1
	for (i= 0; i < 8; i++)
    82a6:	2b08      	cmp	r3, #8
    82a8:	d1f9      	bne.n	829e <System_GetExternalEui+0x1e>
		id++ ;
	}
#endif
}
    82aa:	b002      	add	sp, #8
    82ac:	bd10      	pop	{r4, pc}
    82ae:	46c0      	nop			; (mov r8, r8)
    82b0:	0080400a 	.word	0x0080400a
    82b4:	00804012 	.word	0x00804012

000082b8 <system_enter_critical_section>:

void system_enter_critical_section(void)
{
    82b8:	b510      	push	{r4, lr}
	cpu_irq_enter_critical();
    82ba:	4b01      	ldr	r3, [pc, #4]	; (82c0 <system_enter_critical_section+0x8>)
    82bc:	4798      	blx	r3
#ifndef UT
	system_interrupt_enter_critical_section();
#endif
}
    82be:	bd10      	pop	{r4, pc}
    82c0:	00004531 	.word	0x00004531

000082c4 <system_leave_critical_section>:

void system_leave_critical_section(void)
{
    82c4:	b510      	push	{r4, lr}
	cpu_irq_leave_critical();
    82c6:	4b01      	ldr	r3, [pc, #4]	; (82cc <system_leave_critical_section+0x8>)
    82c8:	4798      	blx	r3
#ifndef UT
	system_interrupt_leave_critical_section();
#endif
}
    82ca:	bd10      	pop	{r4, pc}
    82cc:	00004571 	.word	0x00004571

000082d0 <PMM_Wakeup>:

/**
* \brief Wakeup from sleep
*/
void PMM_Wakeup(void)
{
    82d0:	b570      	push	{r4, r5, r6, lr}
    uint64_t sleptTimeUs = 0;

    if (PMM_STATE_SLEEP == pmmState)
    82d2:	4b16      	ldr	r3, [pc, #88]	; (832c <PMM_Wakeup+0x5c>)
    82d4:	781b      	ldrb	r3, [r3, #0]
    82d6:	2b01      	cmp	r3, #1
    82d8:	d000      	beq.n	82dc <PMM_Wakeup+0xc>
        {
            sleepReq->pmmWakeupCallback(US_TO_MS(sleptTimeUs));
            sleepReq = NULL;
        }
    }
}
    82da:	bd70      	pop	{r4, r5, r6, pc}
		pmmState = PMM_STATE_ACTIVE;
    82dc:	2200      	movs	r2, #0
    82de:	4b13      	ldr	r3, [pc, #76]	; (832c <PMM_Wakeup+0x5c>)
    82e0:	701a      	strb	r2, [r3, #0]
        sleptTimeUs = SLEEP_TICKS_TO_US(SleepTimerGetElapsedTime());
    82e2:	4b13      	ldr	r3, [pc, #76]	; (8330 <PMM_Wakeup+0x60>)
    82e4:	4798      	blx	r3
    82e6:	4b13      	ldr	r3, [pc, #76]	; (8334 <PMM_Wakeup+0x64>)
    82e8:	4798      	blx	r3
    82ea:	4913      	ldr	r1, [pc, #76]	; (8338 <PMM_Wakeup+0x68>)
    82ec:	4b13      	ldr	r3, [pc, #76]	; (833c <PMM_Wakeup+0x6c>)
    82ee:	4798      	blx	r3
    82f0:	4b13      	ldr	r3, [pc, #76]	; (8340 <PMM_Wakeup+0x70>)
    82f2:	4798      	blx	r3
    82f4:	0004      	movs	r4, r0
    82f6:	000d      	movs	r5, r1
        SleepTimerStop();
    82f8:	4b12      	ldr	r3, [pc, #72]	; (8344 <PMM_Wakeup+0x74>)
    82fa:	4798      	blx	r3
        SystemTimerSync(sleptTimeUs);
    82fc:	0020      	movs	r0, r4
    82fe:	0029      	movs	r1, r5
    8300:	4b11      	ldr	r3, [pc, #68]	; (8348 <PMM_Wakeup+0x78>)
    8302:	4798      	blx	r3
        if (sleepReq && sleepReq->pmmWakeupCallback)
    8304:	4b11      	ldr	r3, [pc, #68]	; (834c <PMM_Wakeup+0x7c>)
    8306:	681b      	ldr	r3, [r3, #0]
    8308:	2b00      	cmp	r3, #0
    830a:	d0e6      	beq.n	82da <PMM_Wakeup+0xa>
    830c:	689e      	ldr	r6, [r3, #8]
    830e:	2e00      	cmp	r6, #0
    8310:	d0e3      	beq.n	82da <PMM_Wakeup+0xa>
            sleepReq->pmmWakeupCallback(US_TO_MS(sleptTimeUs));
    8312:	22fa      	movs	r2, #250	; 0xfa
    8314:	0092      	lsls	r2, r2, #2
    8316:	2300      	movs	r3, #0
    8318:	0020      	movs	r0, r4
    831a:	0029      	movs	r1, r5
    831c:	4c0c      	ldr	r4, [pc, #48]	; (8350 <PMM_Wakeup+0x80>)
    831e:	47a0      	blx	r4
    8320:	47b0      	blx	r6
            sleepReq = NULL;
    8322:	2200      	movs	r2, #0
    8324:	4b09      	ldr	r3, [pc, #36]	; (834c <PMM_Wakeup+0x7c>)
    8326:	601a      	str	r2, [r3, #0]
}
    8328:	e7d7      	b.n	82da <PMM_Wakeup+0xa>
    832a:	46c0      	nop			; (mov r8, r8)
    832c:	20000c70 	.word	0x20000c70
    8330:	000081f9 	.word	0x000081f9
    8334:	000179a5 	.word	0x000179a5
    8338:	41f423d7 	.word	0x41f423d7
    833c:	0001734d 	.word	0x0001734d
    8340:	00016a89 	.word	0x00016a89
    8344:	00008251 	.word	0x00008251
    8348:	0000f205 	.word	0x0000f205
    834c:	20000c74 	.word	0x20000c74
    8350:	00016989 	.word	0x00016989

00008354 <PMM_Sleep>:
{
    8354:	b570      	push	{r4, r5, r6, lr}
    8356:	1e04      	subs	r4, r0, #0
    if ( req && (PMM_STATE_ACTIVE == pmmState) )
    8358:	d055      	beq.n	8406 <PMM_Sleep+0xb2>
    835a:	4b2c      	ldr	r3, [pc, #176]	; (840c <PMM_Sleep+0xb8>)
    835c:	781b      	ldrb	r3, [r3, #0]
    PMM_Status_t status = PMM_SLEEP_REQ_DENIED;
    835e:	2000      	movs	r0, #0
    if ( req && (PMM_STATE_ACTIVE == pmmState) )
    8360:	2b00      	cmp	r3, #0
    8362:	d000      	beq.n	8366 <PMM_Sleep+0x12>
}
    8364:	bd70      	pop	{r4, r5, r6, pc}
        canSleep = SYSTEM_ReadyToSleep();
    8366:	4b2a      	ldr	r3, [pc, #168]	; (8410 <PMM_Sleep+0xbc>)
    8368:	4798      	blx	r3
    836a:	0003      	movs	r3, r0
            return status;
    836c:	2000      	movs	r0, #0
        canSleep = canSleep && validateSleepDuration( req->sleepTimeMs );
    836e:	2b00      	cmp	r3, #0
    8370:	d0f8      	beq.n	8364 <PMM_Sleep+0x10>
        (PMM_SLEEPTIME_MAX_MS >= durationMs) && \
    8372:	6823      	ldr	r3, [r4, #0]
    8374:	4a27      	ldr	r2, [pc, #156]	; (8414 <PMM_Sleep+0xc0>)
    8376:	4694      	mov	ip, r2
    8378:	4463      	add	r3, ip
        if ( false == canSleep )
    837a:	4a27      	ldr	r2, [pc, #156]	; (8418 <PMM_Sleep+0xc4>)
    837c:	4293      	cmp	r3, r2
    837e:	d8f1      	bhi.n	8364 <PMM_Sleep+0x10>
        if ( SLEEP_MODE_BACKUP == req->sleep_mode )
    8380:	7923      	ldrb	r3, [r4, #4]
    8382:	2b02      	cmp	r3, #2
    8384:	d021      	beq.n	83ca <PMM_Sleep+0x76>
        else if ( SLEEP_MODE_STANDBY == req->sleep_mode )
    8386:	2b01      	cmp	r3, #1
    8388:	d025      	beq.n	83d6 <PMM_Sleep+0x82>
    uint32_t sysSleepTime = ~0u; /* 0xffFFffFF is invalid */
    838a:	2501      	movs	r5, #1
    838c:	426d      	negs	r5, r5
        if ( canSleep && SYSTEM_ReadyToSleep() )
    838e:	4b20      	ldr	r3, [pc, #128]	; (8410 <PMM_Sleep+0xbc>)
    8390:	4798      	blx	r3
    8392:	0003      	movs	r3, r0
    PMM_Status_t status = PMM_SLEEP_REQ_DENIED;
    8394:	2000      	movs	r0, #0
        if ( canSleep && SYSTEM_ReadyToSleep() )
    8396:	2b00      	cmp	r3, #0
    8398:	d0e4      	beq.n	8364 <PMM_Sleep+0x10>
            SystemTimerSuspend();
    839a:	4b20      	ldr	r3, [pc, #128]	; (841c <PMM_Sleep+0xc8>)
    839c:	4798      	blx	r3
            SleepTimerStart( MS_TO_SLEEP_TICKS( sysSleepTime - PMM_WAKEUPTIME_MS ), PMM_Wakeup );
    839e:	0028      	movs	r0, r5
    83a0:	380a      	subs	r0, #10
    83a2:	4b1f      	ldr	r3, [pc, #124]	; (8420 <PMM_Sleep+0xcc>)
    83a4:	4798      	blx	r3
    83a6:	491f      	ldr	r1, [pc, #124]	; (8424 <PMM_Sleep+0xd0>)
    83a8:	4b1f      	ldr	r3, [pc, #124]	; (8428 <PMM_Sleep+0xd4>)
    83aa:	4798      	blx	r3
    83ac:	4b1f      	ldr	r3, [pc, #124]	; (842c <PMM_Sleep+0xd8>)
    83ae:	4798      	blx	r3
    83b0:	491f      	ldr	r1, [pc, #124]	; (8430 <PMM_Sleep+0xdc>)
    83b2:	4b20      	ldr	r3, [pc, #128]	; (8434 <PMM_Sleep+0xe0>)
    83b4:	4798      	blx	r3
            pmmState = PMM_STATE_SLEEP;
    83b6:	2201      	movs	r2, #1
    83b8:	4b14      	ldr	r3, [pc, #80]	; (840c <PMM_Sleep+0xb8>)
    83ba:	701a      	strb	r2, [r3, #0]
            sleepReq = req;
    83bc:	4b1e      	ldr	r3, [pc, #120]	; (8438 <PMM_Sleep+0xe4>)
    83be:	601c      	str	r4, [r3, #0]
            HAL_Sleep(req->sleep_mode);
    83c0:	7920      	ldrb	r0, [r4, #4]
    83c2:	4b1e      	ldr	r3, [pc, #120]	; (843c <PMM_Sleep+0xe8>)
    83c4:	4798      	blx	r3
            status = PMM_SLEEP_REQ_PROCESSED;
    83c6:	2001      	movs	r0, #1
    83c8:	e7cc      	b.n	8364 <PMM_Sleep+0x10>
            canSleep = canSleep && ( SWTIMER_INVALID_TIMEOUT == SwTimerNextExpiryDuration() );
    83ca:	4b1d      	ldr	r3, [pc, #116]	; (8440 <PMM_Sleep+0xec>)
    83cc:	4798      	blx	r3
        if ( canSleep && SYSTEM_ReadyToSleep() )
    83ce:	1c43      	adds	r3, r0, #1
    83d0:	d017      	beq.n	8402 <PMM_Sleep+0xae>
    PMM_Status_t status = PMM_SLEEP_REQ_DENIED;
    83d2:	2000      	movs	r0, #0
    83d4:	e7c6      	b.n	8364 <PMM_Sleep+0x10>
            sysSleepTime = SwTimerNextExpiryDuration();
    83d6:	4b1a      	ldr	r3, [pc, #104]	; (8440 <PMM_Sleep+0xec>)
    83d8:	4798      	blx	r3
            sysSleepTime = (SWTIMER_INVALID_TIMEOUT == sysSleepTime) ? PMM_SLEEPTIME_MAX_MS : US_TO_MS( sysSleepTime );
    83da:	1c43      	adds	r3, r0, #1
    83dc:	d00b      	beq.n	83f6 <PMM_Sleep+0xa2>
    83de:	21fa      	movs	r1, #250	; 0xfa
    83e0:	0089      	lsls	r1, r1, #2
    83e2:	4b18      	ldr	r3, [pc, #96]	; (8444 <PMM_Sleep+0xf0>)
    83e4:	4798      	blx	r3
    83e6:	0003      	movs	r3, r0
        (PMM_SLEEPTIME_MAX_MS >= durationMs) && \
    83e8:	4a0a      	ldr	r2, [pc, #40]	; (8414 <PMM_Sleep+0xc0>)
    83ea:	1881      	adds	r1, r0, r2
            if ( canSleep && (req->sleepTimeMs < sysSleepTime) )
    83ec:	4a0a      	ldr	r2, [pc, #40]	; (8418 <PMM_Sleep+0xc4>)
    PMM_Status_t status = PMM_SLEEP_REQ_DENIED;
    83ee:	2000      	movs	r0, #0
            if ( canSleep && (req->sleepTimeMs < sysSleepTime) )
    83f0:	4291      	cmp	r1, r2
    83f2:	d8b7      	bhi.n	8364 <PMM_Sleep+0x10>
    83f4:	e000      	b.n	83f8 <PMM_Sleep+0xa4>
            sysSleepTime = (SWTIMER_INVALID_TIMEOUT == sysSleepTime) ? PMM_SLEEPTIME_MAX_MS : US_TO_MS( sysSleepTime );
    83f6:	4b14      	ldr	r3, [pc, #80]	; (8448 <PMM_Sleep+0xf4>)
    83f8:	6825      	ldr	r5, [r4, #0]
    83fa:	429d      	cmp	r5, r3
    83fc:	d9c7      	bls.n	838e <PMM_Sleep+0x3a>
    83fe:	001d      	movs	r5, r3
    8400:	e7c5      	b.n	838e <PMM_Sleep+0x3a>
            sysSleepTime = req->sleepTimeMs;
    8402:	6825      	ldr	r5, [r4, #0]
    8404:	e7c3      	b.n	838e <PMM_Sleep+0x3a>
    PMM_Status_t status = PMM_SLEEP_REQ_DENIED;
    8406:	2000      	movs	r0, #0
    8408:	e7ac      	b.n	8364 <PMM_Sleep+0x10>
    840a:	46c0      	nop			; (mov r8, r8)
    840c:	20000c70 	.word	0x20000c70
    8410:	0000f3c9 	.word	0x0000f3c9
    8414:	fffffc18 	.word	0xfffffc18
    8418:	07cebbc8 	.word	0x07cebbc8
    841c:	0000f1d1 	.word	0x0000f1d1
    8420:	000179a5 	.word	0x000179a5
    8424:	42031375 	.word	0x42031375
    8428:	0001734d 	.word	0x0001734d
    842c:	00016a1d 	.word	0x00016a1d
    8430:	000082d1 	.word	0x000082d1
    8434:	0000820d 	.word	0x0000820d
    8438:	20000c74 	.word	0x20000c74
    843c:	0000817d 	.word	0x0000817d
    8440:	0000ef0d 	.word	0x0000ef0d
    8444:	000165ad 	.word	0x000165ad
    8448:	07cebfb0 	.word	0x07cebfb0

0000844c <LorawanReg_AS_Pds_Cb>:
}
#if (ENABLE_PDS == 1)
void LorawanReg_AS_Pds_Cb(void)
{
	; // nothing to do
}
    844c:	4770      	bx	lr
	...

00008450 <LORAReg_InitAS>:
{
    8450:	b570      	push	{r4, r5, r6, lr}
    8452:	b086      	sub	sp, #24
	RegParams.TxCurDataRate = MAC_DEF_TX_CURRENT_DATARATE_AS;
    8454:	4b8e      	ldr	r3, [pc, #568]	; (8690 <LORAReg_InitAS+0x240>)
    8456:	2103      	movs	r1, #3
    8458:	2226      	movs	r2, #38	; 0x26
    845a:	5499      	strb	r1, [r3, r2]
	RegParams.maxChannels = MAX_CHANNELS_AS;
    845c:	2410      	movs	r4, #16
    845e:	3204      	adds	r2, #4
    8460:	549c      	strb	r4, [r3, r2]
	RegParams.maxSubBands = MAX_NUM_SUBBANDS_AS;
    8462:	3a29      	subs	r2, #41	; 0x29
    8464:	3126      	adds	r1, #38	; 0x26
    8466:	545a      	strb	r2, [r3, r1]
	RegParams.MacTxPower = MAC_DEF_TX_POWER_AS;
    8468:	3902      	subs	r1, #2
    846a:	545a      	strb	r2, [r3, r1]
	RegParams.pChParams = &RegParams.cmnParams.paramsType2.chParams[0];
    846c:	001a      	movs	r2, r3
    846e:	3283      	adds	r2, #131	; 0x83
    8470:	2100      	movs	r1, #0
    8472:	711a      	strb	r2, [r3, #4]
    8474:	0a15      	lsrs	r5, r2, #8
    8476:	715d      	strb	r5, [r3, #5]
    8478:	0c15      	lsrs	r5, r2, #16
    847a:	719d      	strb	r5, [r3, #6]
    847c:	0e12      	lsrs	r2, r2, #24
    847e:	71da      	strb	r2, [r3, #7]
	RegParams.pDrParams = &RegParams.cmnParams.paramsType2.DRParams[0];
    8480:	001a      	movs	r2, r3
    8482:	3243      	adds	r2, #67	; 0x43
    8484:	701a      	strb	r2, [r3, #0]
    8486:	0a15      	lsrs	r5, r2, #8
    8488:	705d      	strb	r5, [r3, #1]
    848a:	0c15      	lsrs	r5, r2, #16
    848c:	709d      	strb	r5, [r3, #2]
    848e:	0e12      	lsrs	r2, r2, #24
    8490:	70da      	strb	r2, [r3, #3]
	RegParams.pOtherChParams = &RegParams.cmnParams.paramsType2.othChParams[0];
    8492:	001a      	movs	r2, r3
    8494:	32a3      	adds	r2, #163	; 0xa3
    8496:	721a      	strb	r2, [r3, #8]
    8498:	0a15      	lsrs	r5, r2, #8
    849a:	725d      	strb	r5, [r3, #9]
    849c:	0c15      	lsrs	r5, r2, #16
    849e:	729d      	strb	r5, [r3, #10]
    84a0:	0e12      	lsrs	r2, r2, #24
    84a2:	72da      	strb	r2, [r3, #11]
	RegParams.pDutyCycleTimer = &RegParams.cmnParams.paramsType2.DutyCycleTimer;
    84a4:	001a      	movs	r2, r3
    84a6:	3264      	adds	r2, #100	; 0x64
    84a8:	32ff      	adds	r2, #255	; 0xff
    84aa:	741a      	strb	r2, [r3, #16]
    84ac:	0a15      	lsrs	r5, r2, #8
    84ae:	745d      	strb	r5, [r3, #17]
    84b0:	0c15      	lsrs	r5, r2, #16
    84b2:	749d      	strb	r5, [r3, #18]
    84b4:	0e12      	lsrs	r2, r2, #24
    84b6:	74da      	strb	r2, [r3, #19]
	RegParams.pJoinDutyCycleTimer = &RegParams.joinDutyCycleTimer;
    84b8:	001a      	movs	r2, r3
    84ba:	3234      	adds	r2, #52	; 0x34
    84bc:	751a      	strb	r2, [r3, #20]
    84be:	0a15      	lsrs	r5, r2, #8
    84c0:	755d      	strb	r5, [r3, #21]
    84c2:	0c15      	lsrs	r5, r2, #16
    84c4:	759d      	strb	r5, [r3, #22]
    84c6:	0e12      	lsrs	r2, r2, #24
    84c8:	75da      	strb	r2, [r3, #23]
	RegParams.pJoinBackoffTimer = &RegParams.joinBackoffTimer;
    84ca:	001a      	movs	r2, r3
    84cc:	323d      	adds	r2, #61	; 0x3d
    84ce:	761a      	strb	r2, [r3, #24]
    84d0:	0a15      	lsrs	r5, r2, #8
    84d2:	765d      	strb	r5, [r3, #25]
    84d4:	0c15      	lsrs	r5, r2, #16
    84d6:	769d      	strb	r5, [r3, #26]
    84d8:	0e12      	lsrs	r2, r2, #24
    84da:	76da      	strb	r2, [r3, #27]
	RegParams.pSubBandParams = &RegParams.cmnParams.paramsType2.SubBands[0];
    84dc:	001a      	movs	r2, r3
    84de:	32c4      	adds	r2, #196	; 0xc4
    84e0:	32ff      	adds	r2, #255	; 0xff
    84e2:	731a      	strb	r2, [r3, #12]
    84e4:	0a15      	lsrs	r5, r2, #8
    84e6:	735d      	strb	r5, [r3, #13]
    84e8:	0c15      	lsrs	r5, r2, #16
    84ea:	739d      	strb	r5, [r3, #14]
    84ec:	0e12      	lsrs	r2, r2, #24
    84ee:	73da      	strb	r2, [r3, #15]
	RegParams.DefRx1DataRate = MAC_RX1_WINDOW_DATARATE_AS;
    84f0:	2202      	movs	r2, #2
    84f2:	2522      	movs	r5, #34	; 0x22
    84f4:	555a      	strb	r2, [r3, r5]
	RegParams.DefRx2DataRate = MAC_RX2_WINDOW_DATARATE_AS;
    84f6:	3501      	adds	r5, #1
    84f8:	555a      	strb	r2, [r3, r5]
	RegParams.DefRx2Freq = MAC_RX2_WINDOW_FREQ_AS;	
    84fa:	2500      	movs	r5, #0
    84fc:	771d      	strb	r5, [r3, #28]
    84fe:	3d16      	subs	r5, #22
    8500:	775d      	strb	r5, [r3, #29]
    8502:	351c      	adds	r5, #28
    8504:	779d      	strb	r5, [r3, #30]
    8506:	3531      	adds	r5, #49	; 0x31
    8508:	77dd      	strb	r5, [r3, #31]
	RegParams.MinNewChIndex = NEW_CHANNEL_INDEX_AS;
    850a:	3d16      	subs	r5, #22
    850c:	555a      	strb	r2, [r3, r5]
	RegParams.FeaturesSupport = FEATURES_SUPPORTED_AS;
    850e:	2632      	movs	r6, #50	; 0x32
    8510:	3d01      	subs	r5, #1
    8512:	555e      	strb	r6, [r3, r5]
	RegParams.minDataRate = MAC_DATARATE_MIN_AS;
    8514:	3d19      	subs	r5, #25
    8516:	3e0e      	subs	r6, #14
    8518:	559d      	strb	r5, [r3, r6]
	RegParams.maxDataRate = MAC_DATARATE_MAX_AS;
    851a:	3601      	adds	r6, #1
    851c:	5599      	strb	r1, [r3, r6]
	RegParams.Rx1DrOffset = 7;
    851e:	3607      	adds	r6, #7
    8520:	559d      	strb	r5, [r3, r6]
	RegParams.maxTxPwrIndx = MAX_TX_PWR_INDEX_AS;
    8522:	3601      	adds	r6, #1
    8524:	559d      	strb	r5, [r3, r6]
	RegParams.maxTxPwr = DEFAULT_EIRP_AS;
    8526:	3521      	adds	r5, #33	; 0x21
    8528:	555c      	strb	r4, [r3, r5]
	RegParams.cmnParams.paramsType2.minNonDefChId = 2;
    852a:	34b1      	adds	r4, #177	; 0xb1
    852c:	34ff      	adds	r4, #255	; 0xff
    852e:	551a      	strb	r2, [r3, r4]
	RegParams.pDutyCycleTimer->timerId = regTimerId[0];
    8530:	4a58      	ldr	r2, [pc, #352]	; (8694 <LORAReg_InitAS+0x244>)
    8532:	7815      	ldrb	r5, [r2, #0]
    8534:	2468      	movs	r4, #104	; 0x68
    8536:	34ff      	adds	r4, #255	; 0xff
    8538:	551d      	strb	r5, [r3, r4]
	RegParams.pJoinBackoffTimer->timerId = regTimerId[1];
    853a:	7855      	ldrb	r5, [r2, #1]
    853c:	3c2b      	subs	r4, #43	; 0x2b
    853e:	3cff      	subs	r4, #255	; 0xff
    8540:	551d      	strb	r5, [r3, r4]
    RegParams.pJoinDutyCycleTimer->timerId = regTimerId[2];
    8542:	7894      	ldrb	r4, [r2, #2]
    8544:	223c      	movs	r2, #60	; 0x3c
    8546:	549c      	strb	r4, [r3, r2]
	RegParams.pJoinDutyCycleTimer->remainingtime = 0;
    8548:	2400      	movs	r4, #0
    854a:	3a04      	subs	r2, #4
    854c:	549c      	strb	r4, [r3, r2]
    854e:	3201      	adds	r2, #1
    8550:	549c      	strb	r4, [r3, r2]
    8552:	3201      	adds	r2, #1
    8554:	549c      	strb	r4, [r3, r2]
    8556:	3201      	adds	r2, #1
    8558:	549c      	strb	r4, [r3, r2]
	RegParams.joinbccount =0;
    855a:	3207      	adds	r2, #7
    855c:	5499      	strb	r1, [r3, r2]
	RegParams.joinDutyCycleTimeout =0;
    855e:	001a      	movs	r2, r3
    8560:	323e      	adds	r2, #62	; 0x3e
    8562:	7011      	strb	r1, [r2, #0]
    8564:	7051      	strb	r1, [r2, #1]
    8566:	7091      	strb	r1, [r2, #2]
    8568:	70d1      	strb	r1, [r2, #3]
	RegParams.cmnParams.paramsType2.txParams.uplinkDwellTime = 1;
    856a:	31c3      	adds	r1, #195	; 0xc3
    856c:	31ff      	adds	r1, #255	; 0xff
    856e:	5c5a      	ldrb	r2, [r3, r1]
    8570:	2401      	movs	r4, #1
    8572:	4322      	orrs	r2, r4
	RegParams.cmnParams.paramsType2.txParams.downlinkDwellTime = 1;
    8574:	2402      	movs	r4, #2
    8576:	4322      	orrs	r2, r4
    8578:	545a      	strb	r2, [r3, r1]
	RegParams.band = ismBand;
    857a:	222e      	movs	r2, #46	; 0x2e
    857c:	5498      	strb	r0, [r3, r2]
	if(ismBand >= ISM_BRN923 && ismBand <= ISM_VTM923)
    857e:	3806      	subs	r0, #6
		result =  LORAWAN_INVALID_PARAMETER;
    8580:	240a      	movs	r4, #10
	if(ismBand >= ISM_BRN923 && ismBand <= ISM_VTM923)
    8582:	2808      	cmp	r0, #8
    8584:	d91a      	bls.n	85bc <LORAReg_InitAS+0x16c>
	if(!initialized)
    8586:	4b44      	ldr	r3, [pc, #272]	; (8698 <LORAReg_InitAS+0x248>)
    8588:	781b      	ldrb	r3, [r3, #0]
    858a:	2b00      	cmp	r3, #0
    858c:	d102      	bne.n	8594 <LORAReg_InitAS+0x144>
		initialized = true;
    858e:	2201      	movs	r2, #1
    8590:	4b41      	ldr	r3, [pc, #260]	; (8698 <LORAReg_InitAS+0x248>)
    8592:	701a      	strb	r2, [r3, #0]
    LORAREG_InitGetAttrFnPtrsAS();	
    8594:	4b41      	ldr	r3, [pc, #260]	; (869c <LORAReg_InitAS+0x24c>)
    8596:	4798      	blx	r3
	LORAREG_InitValidateAttrFnPtrsAS();
    8598:	4b41      	ldr	r3, [pc, #260]	; (86a0 <LORAReg_InitAS+0x250>)
    859a:	4798      	blx	r3
	LORAREG_InitSetAttrFnPtrsAS();
    859c:	4b41      	ldr	r3, [pc, #260]	; (86a4 <LORAReg_InitAS+0x254>)
    859e:	4798      	blx	r3
	PDS_STORE(RegParams.regParamItems.band_item_id);
    85a0:	4b3b      	ldr	r3, [pc, #236]	; (8690 <LORAReg_InitAS+0x240>)
    85a2:	4a41      	ldr	r2, [pc, #260]	; (86a8 <LORAReg_InitAS+0x258>)
    85a4:	5c9a      	ldrb	r2, [r3, r2]
    85a6:	4941      	ldr	r1, [pc, #260]	; (86ac <LORAReg_InitAS+0x25c>)
    85a8:	5c58      	ldrb	r0, [r3, r1]
    85aa:	0200      	lsls	r0, r0, #8
    85ac:	4310      	orrs	r0, r2
    85ae:	b2c1      	uxtb	r1, r0
    85b0:	0a00      	lsrs	r0, r0, #8
    85b2:	4b3f      	ldr	r3, [pc, #252]	; (86b0 <LORAReg_InitAS+0x260>)
    85b4:	4798      	blx	r3
}
    85b6:	0020      	movs	r0, r4
    85b8:	b006      	add	sp, #24
    85ba:	bd70      	pop	{r4, r5, r6, pc}
	memcpy (RegParams.pChParams, DefaultChannels923, sizeof(DefaultChannels923));
    85bc:	001c      	movs	r4, r3
    85be:	0018      	movs	r0, r3
    85c0:	3083      	adds	r0, #131	; 0x83
    85c2:	3a2a      	subs	r2, #42	; 0x2a
    85c4:	493b      	ldr	r1, [pc, #236]	; (86b4 <LORAReg_InitAS+0x264>)
    85c6:	4d3c      	ldr	r5, [pc, #240]	; (86b8 <LORAReg_InitAS+0x268>)
    85c8:	47a8      	blx	r5
	memcpy (RegParams.pOtherChParams, AdvChannels923, sizeof(AdvChannels923));
    85ca:	0020      	movs	r0, r4
    85cc:	30a3      	adds	r0, #163	; 0xa3
    85ce:	2218      	movs	r2, #24
    85d0:	493a      	ldr	r1, [pc, #232]	; (86bc <LORAReg_InitAS+0x26c>)
    85d2:	47a8      	blx	r5
	memcpy (RegParams.pSubBandParams, SubBandParams923, sizeof(SubBandParams923) );
    85d4:	0020      	movs	r0, r4
    85d6:	30c4      	adds	r0, #196	; 0xc4
    85d8:	30ff      	adds	r0, #255	; 0xff
    85da:	220c      	movs	r2, #12
    85dc:	4938      	ldr	r1, [pc, #224]	; (86c0 <LORAReg_InitAS+0x270>)
    85de:	47a8      	blx	r5
	memcpy(RegParams.cmnParams.paramsType2.subBandDutyCycle,SubBandDutyCycle923,sizeof(SubBandDutyCycle923));
    85e0:	0020      	movs	r0, r4
    85e2:	30ae      	adds	r0, #174	; 0xae
    85e4:	30ff      	adds	r0, #255	; 0xff
    85e6:	2202      	movs	r2, #2
    85e8:	4936      	ldr	r1, [pc, #216]	; (86c4 <LORAReg_InitAS+0x274>)
    85ea:	47a8      	blx	r5
    85ec:	2302      	movs	r3, #2
		RegParams.pChParams[i].dataRange.value = UINT8_MAX;
    85ee:	4828      	ldr	r0, [pc, #160]	; (8690 <LORAReg_InitAS+0x240>)
    85f0:	25ff      	movs	r5, #255	; 0xff
	for (i = 2; i < RegParams.maxChannels; i++)
    85f2:	242a      	movs	r4, #42	; 0x2a
		RegParams.pChParams[i].dataRange.value = UINT8_MAX;
    85f4:	7902      	ldrb	r2, [r0, #4]
    85f6:	7941      	ldrb	r1, [r0, #5]
    85f8:	0209      	lsls	r1, r1, #8
    85fa:	4311      	orrs	r1, r2
    85fc:	7982      	ldrb	r2, [r0, #6]
    85fe:	0412      	lsls	r2, r2, #16
    8600:	4311      	orrs	r1, r2
    8602:	79c2      	ldrb	r2, [r0, #7]
    8604:	0612      	lsls	r2, r2, #24
    8606:	430a      	orrs	r2, r1
    8608:	0059      	lsls	r1, r3, #1
    860a:	188a      	adds	r2, r1, r2
    860c:	7055      	strb	r5, [r2, #1]
	for (i = 2; i < RegParams.maxChannels; i++)
    860e:	3301      	adds	r3, #1
    8610:	b2db      	uxtb	r3, r3
    8612:	5702      	ldrsb	r2, [r0, r4]
    8614:	4293      	cmp	r3, r2
    8616:	dbed      	blt.n	85f4 <LORAReg_InitAS+0x1a4>
		RegParams.cmnParams.paramsType2.txParams.maxEIRP = DEFAULT_EIRP_AS;
    8618:	4c1d      	ldr	r4, [pc, #116]	; (8690 <LORAReg_InitAS+0x240>)
    861a:	2210      	movs	r2, #16
    861c:	23c2      	movs	r3, #194	; 0xc2
    861e:	33ff      	adds	r3, #255	; 0xff
    8620:	54e2      	strb	r2, [r4, r3]
		memcpy (RegParams.pDrParams, DefaultDrParamsAS, sizeof(DefaultDrParamsAS) );
    8622:	7820      	ldrb	r0, [r4, #0]
    8624:	7863      	ldrb	r3, [r4, #1]
    8626:	021b      	lsls	r3, r3, #8
    8628:	4303      	orrs	r3, r0
    862a:	78a0      	ldrb	r0, [r4, #2]
    862c:	0400      	lsls	r0, r0, #16
    862e:	4303      	orrs	r3, r0
    8630:	78e0      	ldrb	r0, [r4, #3]
    8632:	0600      	lsls	r0, r0, #24
    8634:	4318      	orrs	r0, r3
    8636:	3230      	adds	r2, #48	; 0x30
    8638:	4923      	ldr	r1, [pc, #140]	; (86c8 <LORAReg_InitAS+0x278>)
    863a:	4b1f      	ldr	r3, [pc, #124]	; (86b8 <LORAReg_InitAS+0x268>)
    863c:	4798      	blx	r3
		RegParams.regParamItems.fileid = PDS_FILE_REG_AS_05_IDX;
    863e:	2304      	movs	r3, #4
    8640:	2104      	movs	r1, #4
    8642:	4a22      	ldr	r2, [pc, #136]	; (86cc <LORAReg_InitAS+0x27c>)
    8644:	54a1      	strb	r1, [r4, r2]
		RegParams.regParamItems.ch_param_1_item_id = PDS_REG_AS_CH_PARAM_1;
    8646:	2100      	movs	r1, #0
    8648:	4a21      	ldr	r2, [pc, #132]	; (86d0 <LORAReg_InitAS+0x280>)
    864a:	54a1      	strb	r1, [r4, r2]
    864c:	18a2      	adds	r2, r4, r2
    864e:	7053      	strb	r3, [r2, #1]
		RegParams.regParamItems.ch_param_2_item_id = PDS_REG_AS_CH_PARAM_2;
    8650:	3101      	adds	r1, #1
    8652:	2284      	movs	r2, #132	; 0x84
    8654:	0092      	lsls	r2, r2, #2
    8656:	54a1      	strb	r1, [r4, r2]
    8658:	18a2      	adds	r2, r4, r2
    865a:	7053      	strb	r3, [r2, #1]
		RegParams.regParamItems.band_item_id = PDS_REG_AS_BAND;
    865c:	3101      	adds	r1, #1
    865e:	4a12      	ldr	r2, [pc, #72]	; (86a8 <LORAReg_InitAS+0x258>)
    8660:	54a1      	strb	r1, [r4, r2]
    8662:	18a2      	adds	r2, r4, r2
    8664:	7053      	strb	r3, [r2, #1]
		RegParams.regParamItems.lastUsedSB = 0;
    8666:	2200      	movs	r2, #0
    8668:	2383      	movs	r3, #131	; 0x83
    866a:	009b      	lsls	r3, r3, #2
    866c:	54e2      	strb	r2, [r4, r3]
    866e:	469c      	mov	ip, r3
    8670:	4464      	add	r4, ip
    8672:	2300      	movs	r3, #0
    8674:	7063      	strb	r3, [r4, #1]
		filemarks.fileMarkListAddr = aRegAsPdsOps;
    8676:	ab02      	add	r3, sp, #8
		filemarks.numItems =  (uint8_t)(PDS_REG_AS_MAX_VALUE & 0x00FF);
    8678:	3203      	adds	r2, #3
    867a:	711a      	strb	r2, [r3, #4]
		filemarks.fIDcb = LorawanReg_AS_Pds_Cb;
    867c:	4a15      	ldr	r2, [pc, #84]	; (86d4 <LORAReg_InitAS+0x284>)
		PDS_RegFile(PDS_FILE_REG_AS_05_IDX,filemarks);
    867e:	9200      	str	r2, [sp, #0]
    8680:	4915      	ldr	r1, [pc, #84]	; (86d8 <LORAReg_InitAS+0x288>)
    8682:	9a03      	ldr	r2, [sp, #12]
    8684:	4b15      	ldr	r3, [pc, #84]	; (86dc <LORAReg_InitAS+0x28c>)
    8686:	2004      	movs	r0, #4
    8688:	4c15      	ldr	r4, [pc, #84]	; (86e0 <LORAReg_InitAS+0x290>)
    868a:	47a0      	blx	r4
	StackRetStatus_t result = LORAWAN_SUCCESS;
    868c:	2408      	movs	r4, #8
    868e:	e77a      	b.n	8586 <LORAReg_InitAS+0x136>
    8690:	200024d0 	.word	0x200024d0
    8694:	200024cc 	.word	0x200024cc
    8698:	20000c78 	.word	0x20000c78
    869c:	0000cbe5 	.word	0x0000cbe5
    86a0:	0000d315 	.word	0x0000d315
    86a4:	0000d5e9 	.word	0x0000d5e9
    86a8:	00000212 	.word	0x00000212
    86ac:	00000213 	.word	0x00000213
    86b0:	0000dfe1 	.word	0x0000dfe1
    86b4:	0001fbfc 	.word	0x0001fbfc
    86b8:	00019d11 	.word	0x00019d11
    86bc:	0001fbe4 	.word	0x0001fbe4
    86c0:	0001fc44 	.word	0x0001fc44
    86c4:	0001fc40 	.word	0x0001fc40
    86c8:	0001fc00 	.word	0x0001fc00
    86cc:	0000020b 	.word	0x0000020b
    86d0:	0000020e 	.word	0x0000020e
    86d4:	0000844d 	.word	0x0000844d
    86d8:	200022ac 	.word	0x200022ac
    86dc:	0001fc50 	.word	0x0001fc50
    86e0:	0000e2c5 	.word	0x0000e2c5

000086e4 <LorawanReg_AU_Pds_Cb>:
}
#if (ENABLE_PDS == 1)
void LorawanReg_AU_Pds_Cb(void)
{
	
}
    86e4:	4770      	bx	lr
	...

000086e8 <LORAReg_InitAU>:
{
    86e8:	b5f0      	push	{r4, r5, r6, r7, lr}
    86ea:	46de      	mov	lr, fp
    86ec:	4657      	mov	r7, sl
    86ee:	464e      	mov	r6, r9
    86f0:	4645      	mov	r5, r8
    86f2:	b5e0      	push	{r5, r6, r7, lr}
    86f4:	b087      	sub	sp, #28
    86f6:	4683      	mov	fp, r0
    RegParams.TxCurDataRate = MAC_DEF_TX_CURRENT_DATARATE_AU;
    86f8:	4c83      	ldr	r4, [pc, #524]	; (8908 <LORAReg_InitAU+0x220>)
    86fa:	2103      	movs	r1, #3
    86fc:	2326      	movs	r3, #38	; 0x26
    86fe:	54e1      	strb	r1, [r4, r3]
	RegParams.maxChannels = MAX_CHANNELS_AU_NA;
    8700:	3145      	adds	r1, #69	; 0x45
    8702:	3304      	adds	r3, #4
    8704:	54e1      	strb	r1, [r4, r3]
	RegParams.MacTxPower = MAC_DEF_TX_POWER_AU;
    8706:	3941      	subs	r1, #65	; 0x41
    8708:	3b03      	subs	r3, #3
    870a:	54e1      	strb	r1, [r4, r3]
	RegParams.pChParams = &RegParams.cmnParams.paramsType1.chParams[0];
    870c:	0020      	movs	r0, r4
    870e:	30b3      	adds	r0, #179	; 0xb3
    8710:	2600      	movs	r6, #0
    8712:	7120      	strb	r0, [r4, #4]
    8714:	0a03      	lsrs	r3, r0, #8
    8716:	7163      	strb	r3, [r4, #5]
    8718:	0c03      	lsrs	r3, r0, #16
    871a:	71a3      	strb	r3, [r4, #6]
    871c:	0e03      	lsrs	r3, r0, #24
    871e:	71e3      	strb	r3, [r4, #7]
	RegParams.pDrParams = &RegParams.cmnParams.paramsType1.DRParams[0];
    8720:	2343      	movs	r3, #67	; 0x43
    8722:	4698      	mov	r8, r3
    8724:	44a0      	add	r8, r4
    8726:	4643      	mov	r3, r8
    8728:	7023      	strb	r3, [r4, #0]
    872a:	4643      	mov	r3, r8
    872c:	0a1b      	lsrs	r3, r3, #8
    872e:	7063      	strb	r3, [r4, #1]
    8730:	4643      	mov	r3, r8
    8732:	0c1b      	lsrs	r3, r3, #16
    8734:	70a3      	strb	r3, [r4, #2]
    8736:	4643      	mov	r3, r8
    8738:	0e1b      	lsrs	r3, r3, #24
    873a:	70e3      	strb	r3, [r4, #3]
	RegParams.MinNewChIndex = 0xFF;
    873c:	2321      	movs	r3, #33	; 0x21
    873e:	31f8      	adds	r1, #248	; 0xf8
    8740:	54e1      	strb	r1, [r4, r3]
	RegParams.DefRx1DataRate = MAC_RX1_WINDOW_DATARATE_AU;
    8742:	2508      	movs	r5, #8
    8744:	2708      	movs	r7, #8
    8746:	3301      	adds	r3, #1
    8748:	54e5      	strb	r5, [r4, r3]
	RegParams.DefRx2DataRate = MAC_RX2_WINDOW_DATARATE_AU;
    874a:	3301      	adds	r3, #1
    874c:	54e5      	strb	r5, [r4, r3]
	RegParams.DefRx2Freq = MAC_RX2_WINDOW_FREQ_AU;
    874e:	3b83      	subs	r3, #131	; 0x83
    8750:	469c      	mov	ip, r3
    8752:	7723      	strb	r3, [r4, #28]
    8754:	2370      	movs	r3, #112	; 0x70
    8756:	7763      	strb	r3, [r4, #29]
    8758:	77a7      	strb	r7, [r4, #30]
    875a:	3b39      	subs	r3, #57	; 0x39
    875c:	77e3      	strb	r3, [r4, #31]
	RegParams.FeaturesSupport = FEATURES_SUPPORTED_AU;
    875e:	39c7      	subs	r1, #199	; 0xc7
    8760:	3b17      	subs	r3, #23
    8762:	54e1      	strb	r1, [r4, r3]
	RegParams.minDataRate = MAC_DATARATE_MIN_AU;
    8764:	2224      	movs	r2, #36	; 0x24
    8766:	3b1a      	subs	r3, #26
    8768:	54a3      	strb	r3, [r4, r2]
	RegParams.maxDataRate = MAC_DATARATE_MAX_AU;
    876a:	3201      	adds	r2, #1
    876c:	54a6      	strb	r6, [r4, r2]
	RegParams.cmnParams.paramsType1.Max_125khzChan = MAX_CHANNELS_BANDWIDTH_125_AU_NA;
    876e:	321b      	adds	r2, #27
    8770:	4692      	mov	sl, r2
    8772:	2254      	movs	r2, #84	; 0x54
    8774:	32ff      	adds	r2, #255	; 0xff
    8776:	4653      	mov	r3, sl
    8778:	54a3      	strb	r3, [r4, r2]
	RegParams.cmnParams.paramsType1.Max_500khzChan = MAX_CHANNELS_BANDWIDTH_500_AU_NA;
    877a:	23aa      	movs	r3, #170	; 0xaa
    877c:	005b      	lsls	r3, r3, #1
    877e:	54e5      	strb	r5, [r4, r3]
	RegParams.cmnParams.paramsType1.minTxDR = DR0;
    8780:	2350      	movs	r3, #80	; 0x50
    8782:	33ff      	adds	r3, #255	; 0xff
    8784:	54e6      	strb	r6, [r4, r3]
	RegParams.cmnParams.paramsType1.maxTxDR = DR6;
    8786:	3301      	adds	r3, #1
    8788:	3a4e      	subs	r2, #78	; 0x4e
    878a:	3aff      	subs	r2, #255	; 0xff
    878c:	54e2      	strb	r2, [r4, r3]
	RegParams.cmnParams.paramsType1.minRxDR = DR8;
    878e:	2352      	movs	r3, #82	; 0x52
    8790:	33ff      	adds	r3, #255	; 0xff
    8792:	54e5      	strb	r5, [r4, r3]
	RegParams.cmnParams.paramsType1.maxRxDR = DR13;
    8794:	3b45      	subs	r3, #69	; 0x45
    8796:	3bff      	subs	r3, #255	; 0xff
    8798:	4699      	mov	r9, r3
    879a:	3346      	adds	r3, #70	; 0x46
    879c:	33ff      	adds	r3, #255	; 0xff
    879e:	464a      	mov	r2, r9
    87a0:	54e2      	strb	r2, [r4, r3]
	RegParams.cmnParams.paramsType1.RxParamWindowOffset1 = 8;
    87a2:	2356      	movs	r3, #86	; 0x56
    87a4:	33ff      	adds	r3, #255	; 0xff
    87a6:	54e5      	strb	r5, [r4, r3]
	RegParams.cmnParams.paramsType1.UpStreamCh0Freq = UPSTREAM_CH0_AU;
    87a8:	2300      	movs	r3, #0
    87aa:	4699      	mov	r9, r3
    87ac:	2344      	movs	r3, #68	; 0x44
    87ae:	33ff      	adds	r3, #255	; 0xff
    87b0:	464a      	mov	r2, r9
    87b2:	54e2      	strb	r2, [r4, r3]
    87b4:	0023      	movs	r3, r4
    87b6:	3344      	adds	r3, #68	; 0x44
    87b8:	33ff      	adds	r3, #255	; 0xff
    87ba:	2228      	movs	r2, #40	; 0x28
    87bc:	4252      	negs	r2, r2
    87be:	705a      	strb	r2, [r3, #1]
    87c0:	2274      	movs	r2, #116	; 0x74
    87c2:	4252      	negs	r2, r2
    87c4:	709a      	strb	r2, [r3, #2]
    87c6:	2236      	movs	r2, #54	; 0x36
    87c8:	70da      	strb	r2, [r3, #3]
	RegParams.cmnParams.paramsType1.UpStreamCh64Freq = UPSTREAM_CH64_AU;
    87ca:	2360      	movs	r3, #96	; 0x60
    87cc:	4699      	mov	r9, r3
    87ce:	2348      	movs	r3, #72	; 0x48
    87d0:	33ff      	adds	r3, #255	; 0xff
    87d2:	464a      	mov	r2, r9
    87d4:	54e2      	strb	r2, [r4, r3]
    87d6:	0023      	movs	r3, r4
    87d8:	3348      	adds	r3, #72	; 0x48
    87da:	33ff      	adds	r3, #255	; 0xff
    87dc:	227a      	movs	r2, #122	; 0x7a
    87de:	4252      	negs	r2, r2
    87e0:	705a      	strb	r2, [r3, #1]
    87e2:	2269      	movs	r2, #105	; 0x69
    87e4:	4252      	negs	r2, r2
    87e6:	709a      	strb	r2, [r3, #2]
    87e8:	2236      	movs	r2, #54	; 0x36
    87ea:	70da      	strb	r2, [r3, #3]
	RegParams.cmnParams.paramsType1.DownStreamCh0Freq = DOWNSTREAM_CH0_AU;
    87ec:	234c      	movs	r3, #76	; 0x4c
    87ee:	33ff      	adds	r3, #255	; 0xff
    87f0:	4662      	mov	r2, ip
    87f2:	54e2      	strb	r2, [r4, r3]
    87f4:	0023      	movs	r3, r4
    87f6:	334c      	adds	r3, #76	; 0x4c
    87f8:	33ff      	adds	r3, #255	; 0xff
    87fa:	2270      	movs	r2, #112	; 0x70
    87fc:	705a      	strb	r2, [r3, #1]
    87fe:	709f      	strb	r7, [r3, #2]
    8800:	2237      	movs	r2, #55	; 0x37
    8802:	70da      	strb	r2, [r3, #3]
    RegParams.pJoinDutyCycleTimer = &RegParams.joinDutyCycleTimer;
    8804:	0023      	movs	r3, r4
    8806:	3334      	adds	r3, #52	; 0x34
    8808:	7523      	strb	r3, [r4, #20]
    880a:	0a1a      	lsrs	r2, r3, #8
    880c:	7562      	strb	r2, [r4, #21]
    880e:	0c1a      	lsrs	r2, r3, #16
    8810:	75a2      	strb	r2, [r4, #22]
    8812:	0e1b      	lsrs	r3, r3, #24
    8814:	75e3      	strb	r3, [r4, #23]
	RegParams.pJoinBackoffTimer = &RegParams.joinBackoffTimer;
    8816:	0023      	movs	r3, r4
    8818:	333d      	adds	r3, #61	; 0x3d
    881a:	7623      	strb	r3, [r4, #24]
    881c:	0a1a      	lsrs	r2, r3, #8
    881e:	7662      	strb	r2, [r4, #25]
    8820:	0c1a      	lsrs	r2, r3, #16
    8822:	76a2      	strb	r2, [r4, #26]
    8824:	0e1b      	lsrs	r3, r3, #24
    8826:	76e3      	strb	r3, [r4, #27]
    RegParams.Rx1DrOffset = 5;
    8828:	2305      	movs	r3, #5
    882a:	469c      	mov	ip, r3
    882c:	3327      	adds	r3, #39	; 0x27
    882e:	4662      	mov	r2, ip
    8830:	54e2      	strb	r2, [r4, r3]
	RegParams.maxTxPwrIndx = 10;
    8832:	3b22      	subs	r3, #34	; 0x22
    8834:	469c      	mov	ip, r3
    8836:	3323      	adds	r3, #35	; 0x23
    8838:	4662      	mov	r2, ip
    883a:	54e2      	strb	r2, [r4, r3]
	RegParams.maxTxPwr = DEFAULT_EIRP_AU;
    883c:	3b0f      	subs	r3, #15
    883e:	469c      	mov	ip, r3
    8840:	330a      	adds	r3, #10
    8842:	4662      	mov	r2, ip
    8844:	54e2      	strb	r2, [r4, r3]
	RegParams.cmnParams.paramsType1.lastUsedSB = 0;
    8846:	2358      	movs	r3, #88	; 0x58
    8848:	33ff      	adds	r3, #255	; 0xff
    884a:	54e6      	strb	r6, [r4, r3]
	RegParams.pJoinBackoffTimer->timerId = regTimerId[0];	
    884c:	4b2f      	ldr	r3, [pc, #188]	; (890c <LORAReg_InitAU+0x224>)
    884e:	469a      	mov	sl, r3
    8850:	781a      	ldrb	r2, [r3, #0]
    8852:	4691      	mov	r9, r2
    8854:	223d      	movs	r2, #61	; 0x3d
    8856:	464b      	mov	r3, r9
    8858:	54a3      	strb	r3, [r4, r2]
	RegParams.pJoinDutyCycleTimer->timerId = regTimerId[1];
    885a:	4653      	mov	r3, sl
    885c:	785b      	ldrb	r3, [r3, #1]
    885e:	469c      	mov	ip, r3
    8860:	233c      	movs	r3, #60	; 0x3c
    8862:	4662      	mov	r2, ip
    8864:	54e2      	strb	r2, [r4, r3]
	RegParams.pJoinDutyCycleTimer->remainingtime = 0;
    8866:	2300      	movs	r3, #0
    8868:	5463      	strb	r3, [r4, r1]
    886a:	2100      	movs	r1, #0
    886c:	3339      	adds	r3, #57	; 0x39
    886e:	54e1      	strb	r1, [r4, r3]
    8870:	3301      	adds	r3, #1
    8872:	54e1      	strb	r1, [r4, r3]
    8874:	3301      	adds	r3, #1
    8876:	54e1      	strb	r1, [r4, r3]
	RegParams.joinbccount =0;
    8878:	3307      	adds	r3, #7
    887a:	54e6      	strb	r6, [r4, r3]
	RegParams.joinDutyCycleTimeout =0;
    887c:	0023      	movs	r3, r4
    887e:	333e      	adds	r3, #62	; 0x3e
    8880:	7019      	strb	r1, [r3, #0]
    8882:	7059      	strb	r1, [r3, #1]
    8884:	7099      	strb	r1, [r3, #2]
    8886:	70d9      	strb	r1, [r3, #3]
	RegParams.band = ismBand;
    8888:	232e      	movs	r3, #46	; 0x2e
    888a:	465a      	mov	r2, fp
    888c:	54e2      	strb	r2, [r4, r3]
	memcpy (RegParams.pChParams, DefaultChannels915AU, sizeof(DefaultChannels915AU) );
    888e:	2290      	movs	r2, #144	; 0x90
    8890:	491f      	ldr	r1, [pc, #124]	; (8910 <LORAReg_InitAU+0x228>)
    8892:	4b20      	ldr	r3, [pc, #128]	; (8914 <LORAReg_InitAU+0x22c>)
    8894:	4699      	mov	r9, r3
    8896:	4798      	blx	r3
	memcpy (RegParams.pDrParams, DefaultDrParamsAU, sizeof(DefaultDrParamsAU) );
    8898:	2270      	movs	r2, #112	; 0x70
    889a:	491f      	ldr	r1, [pc, #124]	; (8918 <LORAReg_InitAU+0x230>)
    889c:	4640      	mov	r0, r8
    889e:	47c8      	blx	r9
	RegParams.cmnParams.paramsType1.alternativeChannel = 0;
    88a0:	23ab      	movs	r3, #171	; 0xab
    88a2:	005b      	lsls	r3, r3, #1
    88a4:	54e6      	strb	r6, [r4, r3]
	RegParams.regParamItems.fileid = PDS_FILE_REG_AU_09_IDX;
    88a6:	4b1d      	ldr	r3, [pc, #116]	; (891c <LORAReg_InitAU+0x234>)
    88a8:	54e5      	strb	r5, [r4, r3]
	RegParams.regParamItems.ch_param_1_item_id = PDS_REG_AU_CH_PARAM;
    88aa:	2200      	movs	r2, #0
    88ac:	4b1c      	ldr	r3, [pc, #112]	; (8920 <LORAReg_InitAU+0x238>)
    88ae:	54e2      	strb	r2, [r4, r3]
    88b0:	18e3      	adds	r3, r4, r3
    88b2:	705f      	strb	r7, [r3, #1]
	RegParams.regParamItems.ch_param_2_item_id = 0;
    88b4:	2384      	movs	r3, #132	; 0x84
    88b6:	009b      	lsls	r3, r3, #2
    88b8:	54e2      	strb	r2, [r4, r3]
    88ba:	18e3      	adds	r3, r4, r3
    88bc:	705a      	strb	r2, [r3, #1]
	RegParams.regParamItems.band_item_id = 0;
    88be:	4b19      	ldr	r3, [pc, #100]	; (8924 <LORAReg_InitAU+0x23c>)
    88c0:	54e2      	strb	r2, [r4, r3]
    88c2:	18e3      	adds	r3, r4, r3
    88c4:	705a      	strb	r2, [r3, #1]
	RegParams.regParamItems.lastUsedSB = PDS_REG_AU_LAST_USED_SB;
    88c6:	3201      	adds	r2, #1
    88c8:	2383      	movs	r3, #131	; 0x83
    88ca:	009b      	lsls	r3, r3, #2
    88cc:	54e2      	strb	r2, [r4, r3]
    88ce:	469c      	mov	ip, r3
    88d0:	4464      	add	r4, ip
    88d2:	7067      	strb	r7, [r4, #1]
	filemarks.fileMarkListAddr = aRegAuPdsOps;
    88d4:	ab02      	add	r3, sp, #8
	filemarks.numItems =  (uint8_t)(PDS_REG_AU_MAX_VALUE & 0x00FF);
    88d6:	3201      	adds	r2, #1
    88d8:	711a      	strb	r2, [r3, #4]
	filemarks.fIDcb = LorawanReg_AU_Pds_Cb;
    88da:	4a13      	ldr	r2, [pc, #76]	; (8928 <LORAReg_InitAU+0x240>)
	PDS_RegFile(PDS_FILE_REG_AU_09_IDX,filemarks);
    88dc:	9200      	str	r2, [sp, #0]
    88de:	4913      	ldr	r1, [pc, #76]	; (892c <LORAReg_InitAU+0x244>)
    88e0:	9a03      	ldr	r2, [sp, #12]
    88e2:	4b13      	ldr	r3, [pc, #76]	; (8930 <LORAReg_InitAU+0x248>)
    88e4:	2008      	movs	r0, #8
    88e6:	4c13      	ldr	r4, [pc, #76]	; (8934 <LORAReg_InitAU+0x24c>)
    88e8:	47a0      	blx	r4
    LORAREG_InitGetAttrFnPtrsAU();
    88ea:	4b13      	ldr	r3, [pc, #76]	; (8938 <LORAReg_InitAU+0x250>)
    88ec:	4798      	blx	r3
	LORAREG_InitValidateAttrFnPtrsAU();
    88ee:	4b13      	ldr	r3, [pc, #76]	; (893c <LORAReg_InitAU+0x254>)
    88f0:	4798      	blx	r3
	LORAREG_InitSetAttrFnPtrsAU();
    88f2:	4b13      	ldr	r3, [pc, #76]	; (8940 <LORAReg_InitAU+0x258>)
    88f4:	4798      	blx	r3
}
    88f6:	2008      	movs	r0, #8
    88f8:	b007      	add	sp, #28
    88fa:	bc3c      	pop	{r2, r3, r4, r5}
    88fc:	4690      	mov	r8, r2
    88fe:	4699      	mov	r9, r3
    8900:	46a2      	mov	sl, r4
    8902:	46ab      	mov	fp, r5
    8904:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8906:	46c0      	nop			; (mov r8, r8)
    8908:	200024d0 	.word	0x200024d0
    890c:	200024cc 	.word	0x200024cc
    8910:	0001fc68 	.word	0x0001fc68
    8914:	00019d11 	.word	0x00019d11
    8918:	0001fcf8 	.word	0x0001fcf8
    891c:	0000020b 	.word	0x0000020b
    8920:	0000020e 	.word	0x0000020e
    8924:	00000212 	.word	0x00000212
    8928:	000086e5 	.word	0x000086e5
    892c:	200022b0 	.word	0x200022b0
    8930:	0001fd68 	.word	0x0001fd68
    8934:	0000e2c5 	.word	0x0000e2c5
    8938:	0000cd2d 	.word	0x0000cd2d
    893c:	0000d381 	.word	0x0000d381
    8940:	0000d65d 	.word	0x0000d65d

00008944 <LorawanReg_EU868_Pds_Cb>:

#if (ENABLE_PDS == 1)
void LorawanReg_EU868_Pds_Cb(void)
{
	
}
    8944:	4770      	bx	lr
	...

00008948 <LORAReg_InitEU>:
{
    8948:	b5f0      	push	{r4, r5, r6, r7, lr}
    894a:	b08b      	sub	sp, #44	; 0x2c
	RegParams.TxCurDataRate = MAC_DEF_TX_CURRENT_DATARATE_EU;
    894c:	4ba2      	ldr	r3, [pc, #648]	; (8bd8 <LORAReg_InitEU+0x290>)
    894e:	2103      	movs	r1, #3
    8950:	2226      	movs	r2, #38	; 0x26
    8952:	5499      	strb	r1, [r3, r2]
	RegParams.maxChannels = MAX_CHANNELS_T2;
    8954:	2510      	movs	r5, #16
    8956:	3204      	adds	r2, #4
    8958:	549d      	strb	r5, [r3, r2]
	RegParams.maxSubBands = MAX_NUM_SUBBANDS_EU;
    895a:	2406      	movs	r4, #6
    895c:	3a01      	subs	r2, #1
    895e:	549c      	strb	r4, [r3, r2]
	RegParams.MacTxPower = MAC_DEF_TX_POWER_EU;
    8960:	3c05      	subs	r4, #5
    8962:	3a02      	subs	r2, #2
    8964:	549c      	strb	r4, [r3, r2]
	RegParams.pChParams = &RegParams.cmnParams.paramsType2.chParams[0];
    8966:	001a      	movs	r2, r3
    8968:	3283      	adds	r2, #131	; 0x83
    896a:	2400      	movs	r4, #0
    896c:	711a      	strb	r2, [r3, #4]
    896e:	0a16      	lsrs	r6, r2, #8
    8970:	715e      	strb	r6, [r3, #5]
    8972:	0c16      	lsrs	r6, r2, #16
    8974:	719e      	strb	r6, [r3, #6]
    8976:	0e12      	lsrs	r2, r2, #24
    8978:	71da      	strb	r2, [r3, #7]
	RegParams.pDrParams = &RegParams.cmnParams.paramsType2.DRParams[0];
    897a:	001a      	movs	r2, r3
    897c:	3243      	adds	r2, #67	; 0x43
    897e:	701a      	strb	r2, [r3, #0]
    8980:	0a16      	lsrs	r6, r2, #8
    8982:	705e      	strb	r6, [r3, #1]
    8984:	0c16      	lsrs	r6, r2, #16
    8986:	709e      	strb	r6, [r3, #2]
    8988:	0e12      	lsrs	r2, r2, #24
    898a:	70da      	strb	r2, [r3, #3]
	RegParams.pSubBandParams = &RegParams.cmnParams.paramsType2.SubBands[0];
    898c:	001a      	movs	r2, r3
    898e:	32c4      	adds	r2, #196	; 0xc4
    8990:	32ff      	adds	r2, #255	; 0xff
    8992:	731a      	strb	r2, [r3, #12]
    8994:	0a16      	lsrs	r6, r2, #8
    8996:	735e      	strb	r6, [r3, #13]
    8998:	0c16      	lsrs	r6, r2, #16
    899a:	739e      	strb	r6, [r3, #14]
    899c:	0e12      	lsrs	r2, r2, #24
    899e:	73da      	strb	r2, [r3, #15]
	RegParams.pOtherChParams = &RegParams.cmnParams.paramsType2.othChParams[0];
    89a0:	001a      	movs	r2, r3
    89a2:	32a3      	adds	r2, #163	; 0xa3
    89a4:	721a      	strb	r2, [r3, #8]
    89a6:	0a16      	lsrs	r6, r2, #8
    89a8:	725e      	strb	r6, [r3, #9]
    89aa:	0c16      	lsrs	r6, r2, #16
    89ac:	729e      	strb	r6, [r3, #10]
    89ae:	0e12      	lsrs	r2, r2, #24
    89b0:	72da      	strb	r2, [r3, #11]
	RegParams.pDutyCycleTimer = &RegParams.cmnParams.paramsType2.DutyCycleTimer;
    89b2:	001a      	movs	r2, r3
    89b4:	3264      	adds	r2, #100	; 0x64
    89b6:	32ff      	adds	r2, #255	; 0xff
    89b8:	741a      	strb	r2, [r3, #16]
    89ba:	0a16      	lsrs	r6, r2, #8
    89bc:	745e      	strb	r6, [r3, #17]
    89be:	0c16      	lsrs	r6, r2, #16
    89c0:	749e      	strb	r6, [r3, #18]
    89c2:	0e12      	lsrs	r2, r2, #24
    89c4:	74da      	strb	r2, [r3, #19]
    RegParams.pJoinDutyCycleTimer = &RegParams.joinDutyCycleTimer;
    89c6:	001a      	movs	r2, r3
    89c8:	3234      	adds	r2, #52	; 0x34
    89ca:	751a      	strb	r2, [r3, #20]
    89cc:	0a16      	lsrs	r6, r2, #8
    89ce:	755e      	strb	r6, [r3, #21]
    89d0:	0c16      	lsrs	r6, r2, #16
    89d2:	759e      	strb	r6, [r3, #22]
    89d4:	0e12      	lsrs	r2, r2, #24
    89d6:	75da      	strb	r2, [r3, #23]
	RegParams.pJoinBackoffTimer = &RegParams.joinBackoffTimer;
    89d8:	001a      	movs	r2, r3
    89da:	323d      	adds	r2, #61	; 0x3d
    89dc:	761a      	strb	r2, [r3, #24]
    89de:	0a16      	lsrs	r6, r2, #8
    89e0:	765e      	strb	r6, [r3, #25]
    89e2:	0c16      	lsrs	r6, r2, #16
    89e4:	769e      	strb	r6, [r3, #26]
    89e6:	0e12      	lsrs	r2, r2, #24
    89e8:	76da      	strb	r2, [r3, #27]
	RegParams.MinNewChIndex = 3;
    89ea:	2221      	movs	r2, #33	; 0x21
    89ec:	5499      	strb	r1, [r3, r2]
	RegParams.FeaturesSupport = FEATURES_SUPPORTED_EU;
    89ee:	2622      	movs	r6, #34	; 0x22
    89f0:	3a01      	subs	r2, #1
    89f2:	549e      	strb	r6, [r3, r2]
	RegParams.minDataRate = MAC_DATARATE_MIN_EU;
    89f4:	3a19      	subs	r2, #25
    89f6:	3602      	adds	r6, #2
    89f8:	559a      	strb	r2, [r3, r6]
	RegParams.maxDataRate = MAC_DATARATE_MAX_EU;
    89fa:	3601      	adds	r6, #1
    89fc:	559c      	strb	r4, [r3, r6]
	RegParams.Rx1DrOffset = 5;
    89fe:	2705      	movs	r7, #5
    8a00:	3607      	adds	r6, #7
    8a02:	559f      	strb	r7, [r3, r6]
	RegParams.maxTxPwrIndx = 7;
    8a04:	3601      	adds	r6, #1
    8a06:	559a      	strb	r2, [r3, r6]
	RegParams.cmnParams.paramsType2.minNonDefChId = 3;
    8a08:	32ba      	adds	r2, #186	; 0xba
    8a0a:	32ff      	adds	r2, #255	; 0xff
    8a0c:	5499      	strb	r1, [r3, r2]
	RegParams.maxTxPwr = DEFAULT_EIRP_EU;
    8a0e:	3a99      	subs	r2, #153	; 0x99
    8a10:	3aff      	subs	r2, #255	; 0xff
    8a12:	549d      	strb	r5, [r3, r2]
	RegParams.pDutyCycleTimer->timerId = regTimerId[0];
    8a14:	4a71      	ldr	r2, [pc, #452]	; (8bdc <LORAReg_InitEU+0x294>)
    8a16:	7815      	ldrb	r5, [r2, #0]
    8a18:	2168      	movs	r1, #104	; 0x68
    8a1a:	31ff      	adds	r1, #255	; 0xff
    8a1c:	545d      	strb	r5, [r3, r1]
	RegParams.pJoinBackoffTimer->timerId = regTimerId[1];
    8a1e:	7855      	ldrb	r5, [r2, #1]
    8a20:	392b      	subs	r1, #43	; 0x2b
    8a22:	39ff      	subs	r1, #255	; 0xff
    8a24:	545d      	strb	r5, [r3, r1]
    RegParams.pJoinDutyCycleTimer->timerId = regTimerId[2];
    8a26:	7891      	ldrb	r1, [r2, #2]
    8a28:	223c      	movs	r2, #60	; 0x3c
    8a2a:	5499      	strb	r1, [r3, r2]
	RegParams.pJoinDutyCycleTimer->remainingtime =0;
    8a2c:	2100      	movs	r1, #0
    8a2e:	3a04      	subs	r2, #4
    8a30:	5499      	strb	r1, [r3, r2]
    8a32:	3201      	adds	r2, #1
    8a34:	5499      	strb	r1, [r3, r2]
    8a36:	3201      	adds	r2, #1
    8a38:	5499      	strb	r1, [r3, r2]
    8a3a:	3201      	adds	r2, #1
    8a3c:	5499      	strb	r1, [r3, r2]
	RegParams.joinbccount =0;
    8a3e:	3207      	adds	r2, #7
    8a40:	549c      	strb	r4, [r3, r2]
	RegParams.joinDutyCycleTimeout =0;
    8a42:	001a      	movs	r2, r3
    8a44:	323e      	adds	r2, #62	; 0x3e
    8a46:	7011      	strb	r1, [r2, #0]
    8a48:	7051      	strb	r1, [r2, #1]
    8a4a:	7091      	strb	r1, [r2, #2]
    8a4c:	70d1      	strb	r1, [r2, #3]
	RegParams.band = ismBand;
    8a4e:	222e      	movs	r2, #46	; 0x2e
    8a50:	5498      	strb	r0, [r3, r2]
	if(ismBand == ISM_EU868)
    8a52:	2800      	cmp	r0, #0
    8a54:	d006      	beq.n	8a64 <LORAReg_InitEU+0x11c>
		return UNSUPPORTED_BAND;
    8a56:	23c6      	movs	r3, #198	; 0xc6
	else if(ismBand == ISM_EU433)
    8a58:	2801      	cmp	r0, #1
    8a5a:	d100      	bne.n	8a5e <LORAReg_InitEU+0x116>
    8a5c:	e084      	b.n	8b68 <LORAReg_InitEU+0x220>
}
    8a5e:	0018      	movs	r0, r3
    8a60:	b00b      	add	sp, #44	; 0x2c
    8a62:	bdf0      	pop	{r4, r5, r6, r7, pc}
    memcpy (RegParams.pChParams, DefaultChannels868, sizeof(DefaultChannels868) );
    8a64:	001c      	movs	r4, r3
    8a66:	0018      	movs	r0, r3
    8a68:	3083      	adds	r0, #131	; 0x83
    8a6a:	3a28      	subs	r2, #40	; 0x28
    8a6c:	495c      	ldr	r1, [pc, #368]	; (8be0 <LORAReg_InitEU+0x298>)
    8a6e:	4d5d      	ldr	r5, [pc, #372]	; (8be4 <LORAReg_InitEU+0x29c>)
    8a70:	47a8      	blx	r5
    memcpy (RegParams.pOtherChParams, AdvChannels868, sizeof(AdvChannels868) );	
    8a72:	0020      	movs	r0, r4
    8a74:	30a3      	adds	r0, #163	; 0xa3
    8a76:	2224      	movs	r2, #36	; 0x24
    8a78:	495b      	ldr	r1, [pc, #364]	; (8be8 <LORAReg_InitEU+0x2a0>)
    8a7a:	47a8      	blx	r5
	memcpy (RegParams.pSubBandParams, SubBandParams868, sizeof(SubBandParams868) );
    8a7c:	0020      	movs	r0, r4
    8a7e:	30c4      	adds	r0, #196	; 0xc4
    8a80:	30ff      	adds	r0, #255	; 0xff
    8a82:	2248      	movs	r2, #72	; 0x48
    8a84:	4959      	ldr	r1, [pc, #356]	; (8bec <LORAReg_InitEU+0x2a4>)
    8a86:	47a8      	blx	r5
	memcpy(RegParams.cmnParams.paramsType2.subBandDutyCycle,SubBandDutyCycle868,sizeof(SubBandDutyCycle868));
    8a88:	0020      	movs	r0, r4
    8a8a:	30ae      	adds	r0, #174	; 0xae
    8a8c:	30ff      	adds	r0, #255	; 0xff
    8a8e:	220c      	movs	r2, #12
    8a90:	4957      	ldr	r1, [pc, #348]	; (8bf0 <LORAReg_InitEU+0x2a8>)
    8a92:	47a8      	blx	r5
    8a94:	2303      	movs	r3, #3
        RegParams.pChParams[i].dataRange.value = UINT8_MAX;		
    8a96:	4850      	ldr	r0, [pc, #320]	; (8bd8 <LORAReg_InitEU+0x290>)
    8a98:	25ff      	movs	r5, #255	; 0xff
    for (i = 3; i < RegParams.maxChannels; i++)
    8a9a:	242a      	movs	r4, #42	; 0x2a
        RegParams.pChParams[i].dataRange.value = UINT8_MAX;		
    8a9c:	7902      	ldrb	r2, [r0, #4]
    8a9e:	7941      	ldrb	r1, [r0, #5]
    8aa0:	0209      	lsls	r1, r1, #8
    8aa2:	4311      	orrs	r1, r2
    8aa4:	7982      	ldrb	r2, [r0, #6]
    8aa6:	0412      	lsls	r2, r2, #16
    8aa8:	4311      	orrs	r1, r2
    8aaa:	79c2      	ldrb	r2, [r0, #7]
    8aac:	0612      	lsls	r2, r2, #24
    8aae:	430a      	orrs	r2, r1
    8ab0:	0059      	lsls	r1, r3, #1
    8ab2:	188a      	adds	r2, r1, r2
    8ab4:	7055      	strb	r5, [r2, #1]
    for (i = 3; i < RegParams.maxChannels; i++)
    8ab6:	3301      	adds	r3, #1
    8ab8:	b2db      	uxtb	r3, r3
    8aba:	5702      	ldrsb	r2, [r0, r4]
    8abc:	4293      	cmp	r3, r2
    8abe:	dbed      	blt.n	8a9c <LORAReg_InitEU+0x154>
		RegParams.DefRx1DataRate = MAC_868_RX1_WINDOW_DATARATE;
    8ac0:	4b45      	ldr	r3, [pc, #276]	; (8bd8 <LORAReg_InitEU+0x290>)
    8ac2:	2200      	movs	r2, #0
    8ac4:	2122      	movs	r1, #34	; 0x22
    8ac6:	545a      	strb	r2, [r3, r1]
		RegParams.DefRx2DataRate = MAC_868_RX2_WINDOW_DATARATE;
    8ac8:	3101      	adds	r1, #1
    8aca:	545a      	strb	r2, [r3, r1]
		RegParams.DefRx2Freq = MAC_868_RX2_WINDOW_FREQ;
    8acc:	3208      	adds	r2, #8
    8ace:	771a      	strb	r2, [r3, #28]
    8ad0:	3a22      	subs	r2, #34	; 0x22
    8ad2:	775a      	strb	r2, [r3, #29]
    8ad4:	3a13      	subs	r2, #19
    8ad6:	779a      	strb	r2, [r3, #30]
    8ad8:	3260      	adds	r2, #96	; 0x60
    8ada:	77da      	strb	r2, [r3, #31]
		RegParams.regParamItems.fileid = PDS_FILE_REG_EU868_04_IDX;
    8adc:	3920      	subs	r1, #32
    8ade:	4a45      	ldr	r2, [pc, #276]	; (8bf4 <LORAReg_InitEU+0x2ac>)
    8ae0:	5499      	strb	r1, [r3, r2]
		RegParams.regParamItems.ch_param_1_item_id = PDS_REG_EU868_CH_PARAM_1;
    8ae2:	2100      	movs	r1, #0
    8ae4:	4a44      	ldr	r2, [pc, #272]	; (8bf8 <LORAReg_InitEU+0x2b0>)
    8ae6:	5499      	strb	r1, [r3, r2]
    8ae8:	189a      	adds	r2, r3, r2
    8aea:	2103      	movs	r1, #3
    8aec:	7051      	strb	r1, [r2, #1]
		RegParams.regParamItems.ch_param_2_item_id = PDS_REG_EU868_CH_PARAM_2;
    8aee:	2100      	movs	r1, #0
    8af0:	2284      	movs	r2, #132	; 0x84
    8af2:	0092      	lsls	r2, r2, #2
    8af4:	5499      	strb	r1, [r3, r2]
    8af6:	189a      	adds	r2, r3, r2
    8af8:	310b      	adds	r1, #11
    8afa:	7051      	strb	r1, [r2, #1]
		RegParams.regParamItems.band_item_id = 0;
    8afc:	2100      	movs	r1, #0
    8afe:	4a3f      	ldr	r2, [pc, #252]	; (8bfc <LORAReg_InitEU+0x2b4>)
    8b00:	5499      	strb	r1, [r3, r2]
    8b02:	189a      	adds	r2, r3, r2
    8b04:	7051      	strb	r1, [r2, #1]
		RegParams.regParamItems.lastUsedSB = 0;
    8b06:	2283      	movs	r2, #131	; 0x83
    8b08:	0092      	lsls	r2, r2, #2
    8b0a:	5499      	strb	r1, [r3, r2]
    8b0c:	4694      	mov	ip, r2
    8b0e:	4463      	add	r3, ip
    8b10:	2200      	movs	r2, #0
    8b12:	705a      	strb	r2, [r3, #1]
		filemarks_fid1.fileMarkListAddr = aRegEu868Fid1PdsOps;
    8b14:	ab02      	add	r3, sp, #8
		filemarks_fid1.numItems =  (uint8_t)(PDS_REG_EU868_FID1_MAX_VALUE & 0x00FF);
    8b16:	2601      	movs	r6, #1
    8b18:	711e      	strb	r6, [r3, #4]
		filemarks_fid1.fIDcb = LorawanReg_EU868_Pds_Cb;
    8b1a:	4d39      	ldr	r5, [pc, #228]	; (8c00 <LORAReg_InitEU+0x2b8>)
		PDS_RegFile(PDS_FILE_REG_EU868_04_IDX,filemarks_fid1);
    8b1c:	9500      	str	r5, [sp, #0]
    8b1e:	4939      	ldr	r1, [pc, #228]	; (8c04 <LORAReg_InitEU+0x2bc>)
    8b20:	9a03      	ldr	r2, [sp, #12]
    8b22:	4b39      	ldr	r3, [pc, #228]	; (8c08 <LORAReg_InitEU+0x2c0>)
    8b24:	2003      	movs	r0, #3
    8b26:	4c39      	ldr	r4, [pc, #228]	; (8c0c <LORAReg_InitEU+0x2c4>)
    8b28:	47a0      	blx	r4
		filemarks_fid2.fileMarkListAddr = aRegEu868Fid2PdsOps;
    8b2a:	ab06      	add	r3, sp, #24
		filemarks_fid2.numItems =  (uint8_t)(PDS_REG_EU868_FID2_MAX_VALUE & 0x00FF);
    8b2c:	711e      	strb	r6, [r3, #4]
		PDS_RegFile(PDS_FILE_REG_EU868_12_IDX,filemarks_fid2);
    8b2e:	9500      	str	r5, [sp, #0]
    8b30:	4937      	ldr	r1, [pc, #220]	; (8c10 <LORAReg_InitEU+0x2c8>)
    8b32:	9a07      	ldr	r2, [sp, #28]
    8b34:	4b37      	ldr	r3, [pc, #220]	; (8c14 <LORAReg_InitEU+0x2cc>)
    8b36:	200b      	movs	r0, #11
    8b38:	47a0      	blx	r4
	memcpy (RegParams.pDrParams, DefaultDrparamsEU, sizeof(DefaultDrparamsEU) );
    8b3a:	4a27      	ldr	r2, [pc, #156]	; (8bd8 <LORAReg_InitEU+0x290>)
    8b3c:	7810      	ldrb	r0, [r2, #0]
    8b3e:	7853      	ldrb	r3, [r2, #1]
    8b40:	021b      	lsls	r3, r3, #8
    8b42:	4303      	orrs	r3, r0
    8b44:	7890      	ldrb	r0, [r2, #2]
    8b46:	0400      	lsls	r0, r0, #16
    8b48:	4303      	orrs	r3, r0
    8b4a:	78d0      	ldrb	r0, [r2, #3]
    8b4c:	0600      	lsls	r0, r0, #24
    8b4e:	4318      	orrs	r0, r3
    8b50:	2240      	movs	r2, #64	; 0x40
    8b52:	4931      	ldr	r1, [pc, #196]	; (8c18 <LORAReg_InitEU+0x2d0>)
    8b54:	4b23      	ldr	r3, [pc, #140]	; (8be4 <LORAReg_InitEU+0x29c>)
    8b56:	4798      	blx	r3
    LORAREG_InitGetAttrFnPtrsEU();
    8b58:	4b30      	ldr	r3, [pc, #192]	; (8c1c <LORAReg_InitEU+0x2d4>)
    8b5a:	4798      	blx	r3
	LORAREG_InitValidateAttrFnPtrsEU();
    8b5c:	4b30      	ldr	r3, [pc, #192]	; (8c20 <LORAReg_InitEU+0x2d8>)
    8b5e:	4798      	blx	r3
	LORAREG_InitSetAttrFnPtrsEU();
    8b60:	4b30      	ldr	r3, [pc, #192]	; (8c24 <LORAReg_InitEU+0x2dc>)
    8b62:	4798      	blx	r3
	return status;
    8b64:	2308      	movs	r3, #8
    8b66:	e77a      	b.n	8a5e <LORAReg_InitEU+0x116>
    memcpy (RegParams.pChParams, DefaultChannels433, sizeof(DefaultChannels433) );
    8b68:	4c1b      	ldr	r4, [pc, #108]	; (8bd8 <LORAReg_InitEU+0x290>)
    8b6a:	0020      	movs	r0, r4
    8b6c:	3083      	adds	r0, #131	; 0x83
    8b6e:	2206      	movs	r2, #6
    8b70:	492d      	ldr	r1, [pc, #180]	; (8c28 <LORAReg_InitEU+0x2e0>)
    8b72:	4d1c      	ldr	r5, [pc, #112]	; (8be4 <LORAReg_InitEU+0x29c>)
    8b74:	47a8      	blx	r5
    memcpy (RegParams.pOtherChParams, AdvChannels433, sizeof(AdvChannels433) );
    8b76:	0020      	movs	r0, r4
    8b78:	30a3      	adds	r0, #163	; 0xa3
    8b7a:	2224      	movs	r2, #36	; 0x24
    8b7c:	492b      	ldr	r1, [pc, #172]	; (8c2c <LORAReg_InitEU+0x2e4>)
    8b7e:	47a8      	blx	r5
	memcpy (RegParams.pSubBandParams, SubBandParams433, sizeof(SubBandParams433) );	
    8b80:	0020      	movs	r0, r4
    8b82:	30c4      	adds	r0, #196	; 0xc4
    8b84:	30ff      	adds	r0, #255	; 0xff
    8b86:	220c      	movs	r2, #12
    8b88:	4929      	ldr	r1, [pc, #164]	; (8c30 <LORAReg_InitEU+0x2e8>)
    8b8a:	47a8      	blx	r5
    8b8c:	2303      	movs	r3, #3
        RegParams.pChParams[i].dataRange.value = UINT8_MAX;
    8b8e:	4812      	ldr	r0, [pc, #72]	; (8bd8 <LORAReg_InitEU+0x290>)
    8b90:	25ff      	movs	r5, #255	; 0xff
    for (i = 3; i < RegParams.maxChannels; i++)
    8b92:	242a      	movs	r4, #42	; 0x2a
        RegParams.pChParams[i].dataRange.value = UINT8_MAX;
    8b94:	7902      	ldrb	r2, [r0, #4]
    8b96:	7941      	ldrb	r1, [r0, #5]
    8b98:	0209      	lsls	r1, r1, #8
    8b9a:	4311      	orrs	r1, r2
    8b9c:	7982      	ldrb	r2, [r0, #6]
    8b9e:	0412      	lsls	r2, r2, #16
    8ba0:	4311      	orrs	r1, r2
    8ba2:	79c2      	ldrb	r2, [r0, #7]
    8ba4:	0612      	lsls	r2, r2, #24
    8ba6:	430a      	orrs	r2, r1
    8ba8:	0059      	lsls	r1, r3, #1
    8baa:	188a      	adds	r2, r1, r2
    8bac:	7055      	strb	r5, [r2, #1]
    for (i = 3; i < RegParams.maxChannels; i++)
    8bae:	3301      	adds	r3, #1
    8bb0:	b2db      	uxtb	r3, r3
    8bb2:	5702      	ldrsb	r2, [r0, r4]
    8bb4:	4293      	cmp	r3, r2
    8bb6:	dbed      	blt.n	8b94 <LORAReg_InitEU+0x24c>
		RegParams.DefRx1DataRate = MAC_433_RX1_WINDOW_DATARATE;
    8bb8:	4b07      	ldr	r3, [pc, #28]	; (8bd8 <LORAReg_InitEU+0x290>)
    8bba:	2105      	movs	r1, #5
    8bbc:	2222      	movs	r2, #34	; 0x22
    8bbe:	5499      	strb	r1, [r3, r2]
		RegParams.DefRx2DataRate = MAC_433_RX2_WINDOW_DATARATE;
    8bc0:	2100      	movs	r1, #0
    8bc2:	3201      	adds	r2, #1
    8bc4:	5499      	strb	r1, [r3, r2]
		RegParams.DefRx2Freq = MAC_433_RX2_WINDOW_FREQ;
    8bc6:	3a93      	subs	r2, #147	; 0x93
    8bc8:	771a      	strb	r2, [r3, #28]
    8bca:	3241      	adds	r2, #65	; 0x41
    8bcc:	775a      	strb	r2, [r3, #29]
    8bce:	3a02      	subs	r2, #2
    8bd0:	779a      	strb	r2, [r3, #30]
    8bd2:	324a      	adds	r2, #74	; 0x4a
    8bd4:	77da      	strb	r2, [r3, #31]
    8bd6:	e7b0      	b.n	8b3a <LORAReg_InitEU+0x1f2>
    8bd8:	200024d0 	.word	0x200024d0
    8bdc:	200024cc 	.word	0x200024cc
    8be0:	0001fdc8 	.word	0x0001fdc8
    8be4:	00019d11 	.word	0x00019d11
    8be8:	0001fd9c 	.word	0x0001fd9c
    8bec:	0001fe28 	.word	0x0001fe28
    8bf0:	0001fe10 	.word	0x0001fe10
    8bf4:	0000020b 	.word	0x0000020b
    8bf8:	0000020e 	.word	0x0000020e
    8bfc:	00000212 	.word	0x00000212
    8c00:	00008945 	.word	0x00008945
    8c04:	200022b4 	.word	0x200022b4
    8c08:	0001fe70 	.word	0x0001fe70
    8c0c:	0000e2c5 	.word	0x0000e2c5
    8c10:	200022b8 	.word	0x200022b8
    8c14:	0001fe78 	.word	0x0001fe78
    8c18:	0001fdd0 	.word	0x0001fdd0
    8c1c:	0000ca9d 	.word	0x0000ca9d
    8c20:	0000d2ad 	.word	0x0000d2ad
    8c24:	0000d57d 	.word	0x0000d57d
    8c28:	0001fdc0 	.word	0x0001fdc0
    8c2c:	0001fd78 	.word	0x0001fd78
    8c30:	0001fe1c 	.word	0x0001fe1c

00008c34 <LorawanReg_IND_Pds_Cb>:
#if (ENABLE_PDS == 1)
/* PDS Callback function */
void LorawanReg_IND_Pds_Cb(void)
{
	
}
    8c34:	4770      	bx	lr
	...

00008c38 <LORAReg_InitIN>:
{
    8c38:	b530      	push	{r4, r5, lr}
    8c3a:	b087      	sub	sp, #28
	RegParams.TxCurDataRate = MAC_DEF_TX_CURRENT_DATARATE_IN;
    8c3c:	4b72      	ldr	r3, [pc, #456]	; (8e08 <LORAReg_InitIN+0x1d0>)
    8c3e:	2403      	movs	r4, #3
    8c40:	2226      	movs	r2, #38	; 0x26
    8c42:	549c      	strb	r4, [r3, r2]
	RegParams.maxChannels = MAX_CHANNELS_IN;
    8c44:	2110      	movs	r1, #16
    8c46:	3204      	adds	r2, #4
    8c48:	5499      	strb	r1, [r3, r2]
	RegParams.maxSubBands = MAX_NUM_SUBBANDS_IN;
    8c4a:	3a29      	subs	r2, #41	; 0x29
    8c4c:	3119      	adds	r1, #25
    8c4e:	545a      	strb	r2, [r3, r1]
	RegParams.MacTxPower = MAC_DEF_TX_POWER_IN;
    8c50:	3902      	subs	r1, #2
    8c52:	545a      	strb	r2, [r3, r1]
	RegParams.pChParams = &RegParams.cmnParams.paramsType2.chParams[0];
    8c54:	001a      	movs	r2, r3
    8c56:	3283      	adds	r2, #131	; 0x83
    8c58:	2100      	movs	r1, #0
    8c5a:	711a      	strb	r2, [r3, #4]
    8c5c:	0a15      	lsrs	r5, r2, #8
    8c5e:	715d      	strb	r5, [r3, #5]
    8c60:	0c15      	lsrs	r5, r2, #16
    8c62:	719d      	strb	r5, [r3, #6]
    8c64:	0e12      	lsrs	r2, r2, #24
    8c66:	71da      	strb	r2, [r3, #7]
	RegParams.pDrParams = &RegParams.cmnParams.paramsType2.DRParams[0];
    8c68:	001a      	movs	r2, r3
    8c6a:	3243      	adds	r2, #67	; 0x43
    8c6c:	701a      	strb	r2, [r3, #0]
    8c6e:	0a15      	lsrs	r5, r2, #8
    8c70:	705d      	strb	r5, [r3, #1]
    8c72:	0c15      	lsrs	r5, r2, #16
    8c74:	709d      	strb	r5, [r3, #2]
    8c76:	0e12      	lsrs	r2, r2, #24
    8c78:	70da      	strb	r2, [r3, #3]
	RegParams.pOtherChParams = &RegParams.cmnParams.paramsType2.othChParams[0];
    8c7a:	001a      	movs	r2, r3
    8c7c:	32a3      	adds	r2, #163	; 0xa3
    8c7e:	721a      	strb	r2, [r3, #8]
    8c80:	0a15      	lsrs	r5, r2, #8
    8c82:	725d      	strb	r5, [r3, #9]
    8c84:	0c15      	lsrs	r5, r2, #16
    8c86:	729d      	strb	r5, [r3, #10]
    8c88:	0e12      	lsrs	r2, r2, #24
    8c8a:	72da      	strb	r2, [r3, #11]
	RegParams.pDutyCycleTimer = &RegParams.cmnParams.paramsType2.DutyCycleTimer;
    8c8c:	001a      	movs	r2, r3
    8c8e:	3264      	adds	r2, #100	; 0x64
    8c90:	32ff      	adds	r2, #255	; 0xff
    8c92:	741a      	strb	r2, [r3, #16]
    8c94:	0a15      	lsrs	r5, r2, #8
    8c96:	745d      	strb	r5, [r3, #17]
    8c98:	0c15      	lsrs	r5, r2, #16
    8c9a:	749d      	strb	r5, [r3, #18]
    8c9c:	0e12      	lsrs	r2, r2, #24
    8c9e:	74da      	strb	r2, [r3, #19]
    RegParams.pJoinDutyCycleTimer = &RegParams.joinDutyCycleTimer;
    8ca0:	001a      	movs	r2, r3
    8ca2:	3234      	adds	r2, #52	; 0x34
    8ca4:	751a      	strb	r2, [r3, #20]
    8ca6:	0a15      	lsrs	r5, r2, #8
    8ca8:	755d      	strb	r5, [r3, #21]
    8caa:	0c15      	lsrs	r5, r2, #16
    8cac:	759d      	strb	r5, [r3, #22]
    8cae:	0e12      	lsrs	r2, r2, #24
    8cb0:	75da      	strb	r2, [r3, #23]
	RegParams.pJoinBackoffTimer = &RegParams.joinBackoffTimer;
    8cb2:	001a      	movs	r2, r3
    8cb4:	323d      	adds	r2, #61	; 0x3d
    8cb6:	761a      	strb	r2, [r3, #24]
    8cb8:	0a15      	lsrs	r5, r2, #8
    8cba:	765d      	strb	r5, [r3, #25]
    8cbc:	0c15      	lsrs	r5, r2, #16
    8cbe:	769d      	strb	r5, [r3, #26]
    8cc0:	0e12      	lsrs	r2, r2, #24
    8cc2:	76da      	strb	r2, [r3, #27]
	RegParams.DefRx1DataRate = MAC_RX1_WINDOW_DATARATE_IN;
    8cc4:	2222      	movs	r2, #34	; 0x22
    8cc6:	5499      	strb	r1, [r3, r2]
	RegParams.DefRx2DataRate = MAC_RX2_WINDOW_DATARATE_IN;
    8cc8:	2502      	movs	r5, #2
    8cca:	3201      	adds	r2, #1
    8ccc:	549d      	strb	r5, [r3, r2]
	RegParams.DefRx2Freq = MAC_RX2_WINDOW_FREQ_IN;	
    8cce:	3a33      	subs	r2, #51	; 0x33
    8cd0:	771a      	strb	r2, [r3, #28]
    8cd2:	3a70      	subs	r2, #112	; 0x70
    8cd4:	775a      	strb	r2, [r3, #29]
    8cd6:	3226      	adds	r2, #38	; 0x26
    8cd8:	779a      	strb	r2, [r3, #30]
    8cda:	328d      	adds	r2, #141	; 0x8d
    8cdc:	77da      	strb	r2, [r3, #31]
	RegParams.MinNewChIndex = MIN_CHANNEL_INDEX_IN;
    8cde:	3a12      	subs	r2, #18
    8ce0:	549c      	strb	r4, [r3, r2]
	RegParams.FeaturesSupport = FEATURES_SUPPORTED_IN;
    8ce2:	352e      	adds	r5, #46	; 0x2e
    8ce4:	3a01      	subs	r2, #1
    8ce6:	549d      	strb	r5, [r3, r2]
	RegParams.minDataRate = MAC_DATARATE_MIN_IN;
    8ce8:	3a19      	subs	r2, #25
    8cea:	3d0c      	subs	r5, #12
    8cec:	555a      	strb	r2, [r3, r5]
	RegParams.maxDataRate = MAC_DATARATE_MAX_IN;
    8cee:	3501      	adds	r5, #1
    8cf0:	5559      	strb	r1, [r3, r5]
	RegParams.cmnParams.paramsType2.minNonDefChId = 3;
    8cf2:	359c      	adds	r5, #156	; 0x9c
    8cf4:	35ff      	adds	r5, #255	; 0xff
    8cf6:	555c      	strb	r4, [r3, r5]
	RegParams.Rx1DrOffset = 7;
    8cf8:	3429      	adds	r4, #41	; 0x29
    8cfa:	551a      	strb	r2, [r3, r4]
	RegParams.maxTxPwrIndx = 10;
    8cfc:	3c22      	subs	r4, #34	; 0x22
    8cfe:	3226      	adds	r2, #38	; 0x26
    8d00:	549c      	strb	r4, [r3, r2]
	RegParams.maxTxPwr = DEFAULT_EIRP_IN;
    8d02:	3414      	adds	r4, #20
    8d04:	3a05      	subs	r2, #5
    8d06:	549c      	strb	r4, [r3, r2]
	RegParams.pJoinDutyCycleTimer->timerId = regTimerId[0];
    8d08:	4a40      	ldr	r2, [pc, #256]	; (8e0c <LORAReg_InitIN+0x1d4>)
    8d0a:	7815      	ldrb	r5, [r2, #0]
    8d0c:	341e      	adds	r4, #30
    8d0e:	551d      	strb	r5, [r3, r4]
	RegParams.pJoinDutyCycleTimer->remainingtime = 0;
    8d10:	2500      	movs	r5, #0
    8d12:	3c04      	subs	r4, #4
    8d14:	551d      	strb	r5, [r3, r4]
    8d16:	3401      	adds	r4, #1
    8d18:	551d      	strb	r5, [r3, r4]
    8d1a:	3401      	adds	r4, #1
    8d1c:	551d      	strb	r5, [r3, r4]
    8d1e:	3401      	adds	r4, #1
    8d20:	551d      	strb	r5, [r3, r4]
	RegParams.pJoinBackoffTimer->timerId = regTimerId[1];
    8d22:	7854      	ldrb	r4, [r2, #1]
    8d24:	223d      	movs	r2, #61	; 0x3d
    8d26:	549c      	strb	r4, [r3, r2]
	RegParams.joinbccount =0;
    8d28:	3205      	adds	r2, #5
    8d2a:	5499      	strb	r1, [r3, r2]
	RegParams.joinDutyCycleTimeout =0;
    8d2c:	001a      	movs	r2, r3
    8d2e:	323e      	adds	r2, #62	; 0x3e
    8d30:	7011      	strb	r1, [r2, #0]
    8d32:	7051      	strb	r1, [r2, #1]
    8d34:	7091      	strb	r1, [r2, #2]
    8d36:	70d1      	strb	r1, [r2, #3]
	RegParams.band = ismBand;
    8d38:	222e      	movs	r2, #46	; 0x2e
    8d3a:	5498      	strb	r0, [r3, r2]
		result = LORAWAN_INVALID_PARAMETER;
    8d3c:	240a      	movs	r4, #10
	if(ismBand == ISM_IND865)
    8d3e:	280f      	cmp	r0, #15
    8d40:	d008      	beq.n	8d54 <LORAReg_InitIN+0x11c>
    LORAREG_InitGetAttrFnPtrsIN();
    8d42:	4b33      	ldr	r3, [pc, #204]	; (8e10 <LORAReg_InitIN+0x1d8>)
    8d44:	4798      	blx	r3
	LORAREG_InitValidateAttrFnPtrsIN();
    8d46:	4b33      	ldr	r3, [pc, #204]	; (8e14 <LORAReg_InitIN+0x1dc>)
    8d48:	4798      	blx	r3
	LORAREG_InitSetAttrFnPtrsIN();
    8d4a:	4b33      	ldr	r3, [pc, #204]	; (8e18 <LORAReg_InitIN+0x1e0>)
    8d4c:	4798      	blx	r3
}
    8d4e:	0020      	movs	r0, r4
    8d50:	b007      	add	sp, #28
    8d52:	bd30      	pop	{r4, r5, pc}
    memcpy (RegParams.pChParams, DefaultChannels865, sizeof(DefaultChannels865) );
    8d54:	001c      	movs	r4, r3
    8d56:	0018      	movs	r0, r3
    8d58:	3083      	adds	r0, #131	; 0x83
    8d5a:	3a28      	subs	r2, #40	; 0x28
    8d5c:	492f      	ldr	r1, [pc, #188]	; (8e1c <LORAReg_InitIN+0x1e4>)
    8d5e:	4d30      	ldr	r5, [pc, #192]	; (8e20 <LORAReg_InitIN+0x1e8>)
    8d60:	47a8      	blx	r5
	memcpy (RegParams.pOtherChParams, AdvChannels865, sizeof(AdvChannels865) );
    8d62:	0020      	movs	r0, r4
    8d64:	30a3      	adds	r0, #163	; 0xa3
    8d66:	2224      	movs	r2, #36	; 0x24
    8d68:	492e      	ldr	r1, [pc, #184]	; (8e24 <LORAReg_InitIN+0x1ec>)
    8d6a:	47a8      	blx	r5
    8d6c:	2006      	movs	r0, #6
	    RegParams.pChParams[i].dataRange.value = UINT8_MAX;
    8d6e:	4926      	ldr	r1, [pc, #152]	; (8e08 <LORAReg_InitIN+0x1d0>)
    8d70:	24ff      	movs	r4, #255	; 0xff
    8d72:	790b      	ldrb	r3, [r1, #4]
    8d74:	794a      	ldrb	r2, [r1, #5]
    8d76:	0212      	lsls	r2, r2, #8
    8d78:	431a      	orrs	r2, r3
    8d7a:	798b      	ldrb	r3, [r1, #6]
    8d7c:	041b      	lsls	r3, r3, #16
    8d7e:	431a      	orrs	r2, r3
    8d80:	79cb      	ldrb	r3, [r1, #7]
    8d82:	061b      	lsls	r3, r3, #24
    8d84:	4313      	orrs	r3, r2
    8d86:	181b      	adds	r3, r3, r0
    8d88:	705c      	strb	r4, [r3, #1]
    8d8a:	3002      	adds	r0, #2
    for (i = MIN_CHANNEL_INDEX_IN; i < MAX_CHANNELS_IN; i++)
    8d8c:	2820      	cmp	r0, #32
    8d8e:	d1f0      	bne.n	8d72 <LORAReg_InitIN+0x13a>
		RegParams.cmnParams.paramsType2.txParams.maxEIRP = DEFAULT_EIRP_IN;
    8d90:	4c1d      	ldr	r4, [pc, #116]	; (8e08 <LORAReg_InitIN+0x1d0>)
    8d92:	221e      	movs	r2, #30
    8d94:	23c2      	movs	r3, #194	; 0xc2
    8d96:	33ff      	adds	r3, #255	; 0xff
    8d98:	54e2      	strb	r2, [r4, r3]
		memcpy (RegParams.pDrParams, DefaultDrParamsIN, sizeof(DefaultDrParamsIN) );
    8d9a:	7820      	ldrb	r0, [r4, #0]
    8d9c:	7863      	ldrb	r3, [r4, #1]
    8d9e:	021b      	lsls	r3, r3, #8
    8da0:	4303      	orrs	r3, r0
    8da2:	78a0      	ldrb	r0, [r4, #2]
    8da4:	0400      	lsls	r0, r0, #16
    8da6:	4303      	orrs	r3, r0
    8da8:	78e0      	ldrb	r0, [r4, #3]
    8daa:	0600      	lsls	r0, r0, #24
    8dac:	4318      	orrs	r0, r3
    8dae:	3222      	adds	r2, #34	; 0x22
    8db0:	491d      	ldr	r1, [pc, #116]	; (8e28 <LORAReg_InitIN+0x1f0>)
    8db2:	4b1b      	ldr	r3, [pc, #108]	; (8e20 <LORAReg_InitIN+0x1e8>)
    8db4:	4798      	blx	r3
		RegParams.regParamItems.fileid = PDS_FILE_REG_IND_07_IDX;
    8db6:	2306      	movs	r3, #6
    8db8:	2106      	movs	r1, #6
    8dba:	4a1c      	ldr	r2, [pc, #112]	; (8e2c <LORAReg_InitIN+0x1f4>)
    8dbc:	54a1      	strb	r1, [r4, r2]
		RegParams.regParamItems.ch_param_1_item_id = PDS_REG_IND_CH_PARAM_1;
    8dbe:	2100      	movs	r1, #0
    8dc0:	4a1b      	ldr	r2, [pc, #108]	; (8e30 <LORAReg_InitIN+0x1f8>)
    8dc2:	54a1      	strb	r1, [r4, r2]
    8dc4:	18a2      	adds	r2, r4, r2
    8dc6:	7053      	strb	r3, [r2, #1]
		RegParams.regParamItems.ch_param_2_item_id = PDS_REG_IND_CH_PARAM_2;
    8dc8:	3101      	adds	r1, #1
    8dca:	2284      	movs	r2, #132	; 0x84
    8dcc:	0092      	lsls	r2, r2, #2
    8dce:	54a1      	strb	r1, [r4, r2]
    8dd0:	18a2      	adds	r2, r4, r2
    8dd2:	7053      	strb	r3, [r2, #1]
		RegParams.regParamItems.band_item_id = 0;
    8dd4:	2200      	movs	r2, #0
    8dd6:	4b17      	ldr	r3, [pc, #92]	; (8e34 <LORAReg_InitIN+0x1fc>)
    8dd8:	54e2      	strb	r2, [r4, r3]
    8dda:	18e3      	adds	r3, r4, r3
    8ddc:	705a      	strb	r2, [r3, #1]
		RegParams.regParamItems.lastUsedSB = 0;
    8dde:	2383      	movs	r3, #131	; 0x83
    8de0:	009b      	lsls	r3, r3, #2
    8de2:	54e2      	strb	r2, [r4, r3]
    8de4:	469c      	mov	ip, r3
    8de6:	4464      	add	r4, ip
    8de8:	2300      	movs	r3, #0
    8dea:	7063      	strb	r3, [r4, #1]
		filemarks.fileMarkListAddr = aRegIndPdsOps;
    8dec:	ab02      	add	r3, sp, #8
		filemarks.numItems =  (uint8_t)(PDS_REG_IND_MAX_VALUE & 0x00FF);
    8dee:	3202      	adds	r2, #2
    8df0:	711a      	strb	r2, [r3, #4]
		filemarks.fIDcb = LorawanReg_IND_Pds_Cb;
    8df2:	4a11      	ldr	r2, [pc, #68]	; (8e38 <LORAReg_InitIN+0x200>)
		PDS_RegFile(PDS_FILE_REG_IND_07_IDX,filemarks);
    8df4:	9200      	str	r2, [sp, #0]
    8df6:	4911      	ldr	r1, [pc, #68]	; (8e3c <LORAReg_InitIN+0x204>)
    8df8:	9a03      	ldr	r2, [sp, #12]
    8dfa:	4b11      	ldr	r3, [pc, #68]	; (8e40 <LORAReg_InitIN+0x208>)
    8dfc:	2006      	movs	r0, #6
    8dfe:	4c11      	ldr	r4, [pc, #68]	; (8e44 <LORAReg_InitIN+0x20c>)
    8e00:	47a0      	blx	r4
	StackRetStatus_t result = LORAWAN_SUCCESS;
    8e02:	2408      	movs	r4, #8
    8e04:	e79d      	b.n	8d42 <LORAReg_InitIN+0x10a>
    8e06:	46c0      	nop			; (mov r8, r8)
    8e08:	200024d0 	.word	0x200024d0
    8e0c:	200024cc 	.word	0x200024cc
    8e10:	0000ce69 	.word	0x0000ce69
    8e14:	0000d3ed 	.word	0x0000d3ed
    8e18:	0000d6b1 	.word	0x0000d6b1
    8e1c:	0001fea4 	.word	0x0001fea4
    8e20:	00019d11 	.word	0x00019d11
    8e24:	0001fe80 	.word	0x0001fe80
    8e28:	0001feac 	.word	0x0001feac
    8e2c:	0000020b 	.word	0x0000020b
    8e30:	0000020e 	.word	0x0000020e
    8e34:	00000212 	.word	0x00000212
    8e38:	00008c35 	.word	0x00008c35
    8e3c:	200022bc 	.word	0x200022bc
    8e40:	0001feec 	.word	0x0001feec
    8e44:	0000e2c5 	.word	0x0000e2c5

00008e48 <LorawanReg_JPN_Pds_Cb>:
#if (ENABLE_PDS == 1)
/* PDS Callback function */
void LorawanReg_JPN_Pds_Cb(void)
{

}
    8e48:	4770      	bx	lr
	...

00008e4c <LORAReg_InitJP>:
{
    8e4c:	b5f0      	push	{r4, r5, r6, r7, lr}
    8e4e:	46c6      	mov	lr, r8
    8e50:	b500      	push	{lr}
    8e52:	b086      	sub	sp, #24
	RegParams.TxCurDataRate = MAC_DEF_TX_CURRENT_DATARATE_JP;
    8e54:	4b97      	ldr	r3, [pc, #604]	; (90b4 <LORAReg_InitJP+0x268>)
    8e56:	2103      	movs	r1, #3
    8e58:	2226      	movs	r2, #38	; 0x26
    8e5a:	5499      	strb	r1, [r3, r2]
	RegParams.maxChannels = MAX_CHANNELS_JP;
    8e5c:	2510      	movs	r5, #16
    8e5e:	3204      	adds	r2, #4
    8e60:	549d      	strb	r5, [r3, r2]
	RegParams.maxSubBands = MAX_NUM_SUBBANDS_JP;
    8e62:	3901      	subs	r1, #1
    8e64:	3a01      	subs	r2, #1
    8e66:	5499      	strb	r1, [r3, r2]
	RegParams.MacTxPower = MAC_DEF_TX_POWER_JP;
    8e68:	2401      	movs	r4, #1
    8e6a:	3a02      	subs	r2, #2
    8e6c:	549c      	strb	r4, [r3, r2]
	RegParams.pChParams = &RegParams.cmnParams.paramsType2.chParams[0];
    8e6e:	001a      	movs	r2, r3
    8e70:	3283      	adds	r2, #131	; 0x83
    8e72:	2400      	movs	r4, #0
    8e74:	46a0      	mov	r8, r4
    8e76:	711a      	strb	r2, [r3, #4]
    8e78:	0a16      	lsrs	r6, r2, #8
    8e7a:	715e      	strb	r6, [r3, #5]
    8e7c:	0c16      	lsrs	r6, r2, #16
    8e7e:	719e      	strb	r6, [r3, #6]
    8e80:	0e12      	lsrs	r2, r2, #24
    8e82:	71da      	strb	r2, [r3, #7]
	RegParams.pDrParams = &RegParams.cmnParams.paramsType2.DRParams[0];
    8e84:	001a      	movs	r2, r3
    8e86:	3243      	adds	r2, #67	; 0x43
    8e88:	701a      	strb	r2, [r3, #0]
    8e8a:	0a16      	lsrs	r6, r2, #8
    8e8c:	705e      	strb	r6, [r3, #1]
    8e8e:	0c16      	lsrs	r6, r2, #16
    8e90:	709e      	strb	r6, [r3, #2]
    8e92:	0e12      	lsrs	r2, r2, #24
    8e94:	70da      	strb	r2, [r3, #3]
	RegParams.pSubBandParams = &RegParams.cmnParams.paramsType2.SubBands[0];
    8e96:	001a      	movs	r2, r3
    8e98:	32c4      	adds	r2, #196	; 0xc4
    8e9a:	32ff      	adds	r2, #255	; 0xff
    8e9c:	731a      	strb	r2, [r3, #12]
    8e9e:	0a16      	lsrs	r6, r2, #8
    8ea0:	735e      	strb	r6, [r3, #13]
    8ea2:	0c16      	lsrs	r6, r2, #16
    8ea4:	739e      	strb	r6, [r3, #14]
    8ea6:	0e12      	lsrs	r2, r2, #24
    8ea8:	73da      	strb	r2, [r3, #15]
	RegParams.pOtherChParams = &RegParams.cmnParams.paramsType2.othChParams[0];
    8eaa:	001a      	movs	r2, r3
    8eac:	32a3      	adds	r2, #163	; 0xa3
    8eae:	721a      	strb	r2, [r3, #8]
    8eb0:	0a16      	lsrs	r6, r2, #8
    8eb2:	725e      	strb	r6, [r3, #9]
    8eb4:	0c16      	lsrs	r6, r2, #16
    8eb6:	729e      	strb	r6, [r3, #10]
    8eb8:	0e12      	lsrs	r2, r2, #24
    8eba:	72da      	strb	r2, [r3, #11]
	RegParams.pDutyCycleTimer = &RegParams.cmnParams.paramsType2.DutyCycleTimer;
    8ebc:	001a      	movs	r2, r3
    8ebe:	3264      	adds	r2, #100	; 0x64
    8ec0:	32ff      	adds	r2, #255	; 0xff
    8ec2:	741a      	strb	r2, [r3, #16]
    8ec4:	0a16      	lsrs	r6, r2, #8
    8ec6:	745e      	strb	r6, [r3, #17]
    8ec8:	0c16      	lsrs	r6, r2, #16
    8eca:	749e      	strb	r6, [r3, #18]
    8ecc:	0e12      	lsrs	r2, r2, #24
    8ece:	74da      	strb	r2, [r3, #19]
    RegParams.pJoinDutyCycleTimer = &RegParams.joinDutyCycleTimer;
    8ed0:	001a      	movs	r2, r3
    8ed2:	3234      	adds	r2, #52	; 0x34
    8ed4:	751a      	strb	r2, [r3, #20]
    8ed6:	0a16      	lsrs	r6, r2, #8
    8ed8:	755e      	strb	r6, [r3, #21]
    8eda:	0c16      	lsrs	r6, r2, #16
    8edc:	759e      	strb	r6, [r3, #22]
    8ede:	0e12      	lsrs	r2, r2, #24
    8ee0:	75da      	strb	r2, [r3, #23]
	RegParams.pJoinBackoffTimer = &RegParams.joinBackoffTimer;
    8ee2:	001a      	movs	r2, r3
    8ee4:	323d      	adds	r2, #61	; 0x3d
    8ee6:	761a      	strb	r2, [r3, #24]
    8ee8:	0a16      	lsrs	r6, r2, #8
    8eea:	765e      	strb	r6, [r3, #25]
    8eec:	0c16      	lsrs	r6, r2, #16
    8eee:	769e      	strb	r6, [r3, #26]
    8ef0:	0e12      	lsrs	r2, r2, #24
    8ef2:	76da      	strb	r2, [r3, #27]
	RegParams.DefRx1DataRate = MAC_RX1_WINDOW_DATARATE_JP;
    8ef4:	2222      	movs	r2, #34	; 0x22
    8ef6:	5499      	strb	r1, [r3, r2]
	RegParams.DefRx2DataRate = MAC_RX2_WINDOW_DATARATE_JP;
    8ef8:	3201      	adds	r2, #1
    8efa:	5499      	strb	r1, [r3, r2]
	RegParams.DefRx2Freq = MAC_RX2_WINDOW_FREQ_JP;	
    8efc:	2200      	movs	r2, #0
    8efe:	771a      	strb	r2, [r3, #28]
    8f00:	3a16      	subs	r2, #22
    8f02:	775a      	strb	r2, [r3, #29]
    8f04:	321c      	adds	r2, #28
    8f06:	779a      	strb	r2, [r3, #30]
    8f08:	3231      	adds	r2, #49	; 0x31
    8f0a:	77da      	strb	r2, [r3, #31]
	RegParams.MinNewChIndex = MIN_CHANNEL_INDEX_JP;
    8f0c:	3a16      	subs	r2, #22
    8f0e:	5499      	strb	r1, [r3, r2]
	RegParams.FeaturesSupport = FEATURES_SUPPORTED_JP;
    8f10:	2636      	movs	r6, #54	; 0x36
    8f12:	3a01      	subs	r2, #1
    8f14:	549e      	strb	r6, [r3, r2]
	RegParams.minDataRate = MAC_DATARATE_MIN_JP;
    8f16:	3a19      	subs	r2, #25
    8f18:	3e12      	subs	r6, #18
    8f1a:	559a      	strb	r2, [r3, r6]
	RegParams.maxDataRate = MAC_DATARATE_MAX_JP;
    8f1c:	3601      	adds	r6, #1
    8f1e:	559c      	strb	r4, [r3, r6]
	RegParams.cmnParams.paramsType2.LBTScanPeriod = LBT_SCAN_PERIOD_JP;
    8f20:	3e20      	subs	r6, #32
    8f22:	27be      	movs	r7, #190	; 0xbe
    8f24:	37ff      	adds	r7, #255	; 0xff
    8f26:	55de      	strb	r6, [r3, r7]
	RegParams.cmnParams.paramsType2.LBTSignalThreshold = LBT_SIGNAL_THRESHOLD_JP;
    8f28:	3f0e      	subs	r7, #14
    8f2a:	3fff      	subs	r7, #255	; 0xff
    8f2c:	46bc      	mov	ip, r7
    8f2e:	370f      	adds	r7, #15
    8f30:	37ff      	adds	r7, #255	; 0xff
    8f32:	4664      	mov	r4, ip
    8f34:	55dc      	strb	r4, [r3, r7]
	RegParams.cmnParams.paramsType2.LBT_RSSISamplesCount = LBT_RSSI_SAMPLES_COUNT_JP;
    8f36:	27c0      	movs	r7, #192	; 0xc0
    8f38:	37ff      	adds	r7, #255	; 0xff
    8f3a:	55de      	strb	r6, [r3, r7]
	RegParams.cmnParams.paramsType2.minNonDefChId = 2;
    8f3c:	36bc      	adds	r6, #188	; 0xbc
    8f3e:	36ff      	adds	r6, #255	; 0xff
    8f40:	5599      	strb	r1, [r3, r6]
	RegParams.Rx1DrOffset = 7;
    8f42:	312a      	adds	r1, #42	; 0x2a
    8f44:	545a      	strb	r2, [r3, r1]
	RegParams.maxTxPwrIndx = 7;
    8f46:	3101      	adds	r1, #1
    8f48:	545a      	strb	r2, [r3, r1]
	RegParams.maxTxPwr = DEFAULT_EIRP_JP;
    8f4a:	3221      	adds	r2, #33	; 0x21
    8f4c:	549d      	strb	r5, [r3, r2]
	RegParams.cmnParams.paramsType2.LBTTimer.timerId = regTimerId[0];
    8f4e:	4a5a      	ldr	r2, [pc, #360]	; (90b8 <LORAReg_InitJP+0x26c>)
    8f50:	7815      	ldrb	r5, [r2, #0]
    8f52:	3180      	adds	r1, #128	; 0x80
    8f54:	31ff      	adds	r1, #255	; 0xff
    8f56:	545d      	strb	r5, [r3, r1]
	RegParams.pDutyCycleTimer->timerId = regTimerId[1];
    8f58:	7855      	ldrb	r5, [r2, #1]
    8f5a:	2168      	movs	r1, #104	; 0x68
    8f5c:	31ff      	adds	r1, #255	; 0xff
    8f5e:	545d      	strb	r5, [r3, r1]
	RegParams.pJoinBackoffTimer->timerId = regTimerId[2];
    8f60:	7895      	ldrb	r5, [r2, #2]
    8f62:	392b      	subs	r1, #43	; 0x2b
    8f64:	39ff      	subs	r1, #255	; 0xff
    8f66:	545d      	strb	r5, [r3, r1]
    RegParams.pJoinDutyCycleTimer->timerId = regTimerId[3];
    8f68:	78d1      	ldrb	r1, [r2, #3]
    8f6a:	223c      	movs	r2, #60	; 0x3c
    8f6c:	5499      	strb	r1, [r3, r2]
	RegParams.pJoinDutyCycleTimer->remainingtime =0;
    8f6e:	2100      	movs	r1, #0
    8f70:	3a04      	subs	r2, #4
    8f72:	5499      	strb	r1, [r3, r2]
    8f74:	3201      	adds	r2, #1
    8f76:	5499      	strb	r1, [r3, r2]
    8f78:	3201      	adds	r2, #1
    8f7a:	5499      	strb	r1, [r3, r2]
    8f7c:	3201      	adds	r2, #1
    8f7e:	5499      	strb	r1, [r3, r2]
	RegParams.joinbccount =0;
    8f80:	3207      	adds	r2, #7
    8f82:	4641      	mov	r1, r8
    8f84:	5499      	strb	r1, [r3, r2]
	RegParams.joinDutyCycleTimeout =0;
    8f86:	001a      	movs	r2, r3
    8f88:	323e      	adds	r2, #62	; 0x3e
    8f8a:	2100      	movs	r1, #0
    8f8c:	7011      	strb	r1, [r2, #0]
    8f8e:	7051      	strb	r1, [r2, #1]
    8f90:	7091      	strb	r1, [r2, #2]
    8f92:	70d1      	strb	r1, [r2, #3]
	RegParams.cmnParams.paramsType2.txParams.uplinkDwellTime = 1;
    8f94:	31c3      	adds	r1, #195	; 0xc3
    8f96:	31ff      	adds	r1, #255	; 0xff
    8f98:	5c5a      	ldrb	r2, [r3, r1]
    8f9a:	2401      	movs	r4, #1
    8f9c:	4322      	orrs	r2, r4
	RegParams.cmnParams.paramsType2.txParams.downlinkDwellTime = 1;
    8f9e:	2402      	movs	r4, #2
    8fa0:	4322      	orrs	r2, r4
    8fa2:	545a      	strb	r2, [r3, r1]
	RegParams.band = ismBand;
    8fa4:	222e      	movs	r2, #46	; 0x2e
    8fa6:	5498      	strb	r0, [r3, r2]
		result = LORAWAN_INVALID_PARAMETER;
    8fa8:	240a      	movs	r4, #10
	if(ismBand == ISM_JPN923)
    8faa:	2805      	cmp	r0, #5
    8fac:	d00a      	beq.n	8fc4 <LORAReg_InitJP+0x178>
    LORAREG_InitGetAttrFnPtrsJP();
    8fae:	4b43      	ldr	r3, [pc, #268]	; (90bc <LORAReg_InitJP+0x270>)
    8fb0:	4798      	blx	r3
	LORAREG_InitValidateAttrFnPtrsJP();
    8fb2:	4b43      	ldr	r3, [pc, #268]	; (90c0 <LORAReg_InitJP+0x274>)
    8fb4:	4798      	blx	r3
	LORAREG_InitSetAttrFnPtrsJP();
    8fb6:	4b43      	ldr	r3, [pc, #268]	; (90c4 <LORAReg_InitJP+0x278>)
    8fb8:	4798      	blx	r3
}
    8fba:	0020      	movs	r0, r4
    8fbc:	b006      	add	sp, #24
    8fbe:	bc04      	pop	{r2}
    8fc0:	4690      	mov	r8, r2
    8fc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    memcpy (RegParams.pChParams, DefaultChannels923JP, sizeof(DefaultChannels923JP) );
    8fc4:	001c      	movs	r4, r3
    8fc6:	0018      	movs	r0, r3
    8fc8:	3083      	adds	r0, #131	; 0x83
    8fca:	3a2a      	subs	r2, #42	; 0x2a
    8fcc:	493e      	ldr	r1, [pc, #248]	; (90c8 <LORAReg_InitJP+0x27c>)
    8fce:	4d3f      	ldr	r5, [pc, #252]	; (90cc <LORAReg_InitJP+0x280>)
    8fd0:	47a8      	blx	r5
	memcpy (RegParams.pOtherChParams, AdvChannels923JP, sizeof(AdvChannels923JP) );
    8fd2:	0020      	movs	r0, r4
    8fd4:	30a3      	adds	r0, #163	; 0xa3
    8fd6:	2218      	movs	r2, #24
    8fd8:	493d      	ldr	r1, [pc, #244]	; (90d0 <LORAReg_InitJP+0x284>)
    8fda:	47a8      	blx	r5
	memcpy (RegParams.pSubBandParams, SubBandParamsJP923, sizeof(SubBandParamsJP923) );
    8fdc:	0020      	movs	r0, r4
    8fde:	30c4      	adds	r0, #196	; 0xc4
    8fe0:	30ff      	adds	r0, #255	; 0xff
    8fe2:	2218      	movs	r2, #24
    8fe4:	493b      	ldr	r1, [pc, #236]	; (90d4 <LORAReg_InitJP+0x288>)
    8fe6:	47a8      	blx	r5
	memcpy (RegParams.cmnParams.paramsType2.subBandDutyCycle,SubBandDutyCycleJP923,sizeof(SubBandDutyCycleJP923));
    8fe8:	0020      	movs	r0, r4
    8fea:	30ae      	adds	r0, #174	; 0xae
    8fec:	30ff      	adds	r0, #255	; 0xff
    8fee:	2204      	movs	r2, #4
    8ff0:	4939      	ldr	r1, [pc, #228]	; (90d8 <LORAReg_InitJP+0x28c>)
    8ff2:	47a8      	blx	r5
    8ff4:	2302      	movs	r3, #2
    8ff6:	2202      	movs	r2, #2
	    RegParams.pChParams[i].dataRange.value = UINT8_MAX;
    8ff8:	492e      	ldr	r1, [pc, #184]	; (90b4 <LORAReg_InitJP+0x268>)
    8ffa:	3fc0      	subs	r7, #192	; 0xc0
		RegParams.cmnParams.paramsType2.channelTimer[i] = 0;
    8ffc:	2500      	movs	r5, #0
    for (i = 2; i < RegParams.maxChannels; i++)
    8ffe:	3e97      	subs	r6, #151	; 0x97
    9000:	3eff      	subs	r6, #255	; 0xff
	    RegParams.pChParams[i].dataRange.value = UINT8_MAX;
    9002:	7908      	ldrb	r0, [r1, #4]
    9004:	794c      	ldrb	r4, [r1, #5]
    9006:	0224      	lsls	r4, r4, #8
    9008:	4304      	orrs	r4, r0
    900a:	7988      	ldrb	r0, [r1, #6]
    900c:	0400      	lsls	r0, r0, #16
    900e:	4304      	orrs	r4, r0
    9010:	79c8      	ldrb	r0, [r1, #7]
    9012:	0600      	lsls	r0, r0, #24
    9014:	4320      	orrs	r0, r4
    9016:	0054      	lsls	r4, r2, #1
    9018:	1820      	adds	r0, r4, r0
    901a:	7047      	strb	r7, [r0, #1]
		RegParams.cmnParams.paramsType2.channelTimer[i] = 0;
    901c:	3358      	adds	r3, #88	; 0x58
    901e:	009b      	lsls	r3, r3, #2
    9020:	18cb      	adds	r3, r1, r3
    9022:	721d      	strb	r5, [r3, #8]
    9024:	725d      	strb	r5, [r3, #9]
    9026:	729d      	strb	r5, [r3, #10]
    9028:	72dd      	strb	r5, [r3, #11]
    for (i = 2; i < RegParams.maxChannels; i++)
    902a:	3201      	adds	r2, #1
    902c:	b2d2      	uxtb	r2, r2
    902e:	0013      	movs	r3, r2
    9030:	5788      	ldrsb	r0, [r1, r6]
    9032:	4282      	cmp	r2, r0
    9034:	dbe5      	blt.n	9002 <LORAReg_InitJP+0x1b6>
	RegParams.lastUsedChannelIndex = UINT8_MAX;
    9036:	4c1f      	ldr	r4, [pc, #124]	; (90b4 <LORAReg_InitJP+0x268>)
    9038:	22ff      	movs	r2, #255	; 0xff
    903a:	232f      	movs	r3, #47	; 0x2f
    903c:	54e2      	strb	r2, [r4, r3]
		RegParams.cmnParams.paramsType2.txParams.maxEIRP = DEFAULT_EIRP_JP;//MAX_EIRP_JP;
    903e:	3aef      	subs	r2, #239	; 0xef
    9040:	23c2      	movs	r3, #194	; 0xc2
    9042:	33ff      	adds	r3, #255	; 0xff
    9044:	54e2      	strb	r2, [r4, r3]
		memcpy (RegParams.pDrParams, DefaultDrParamsJP, sizeof(DefaultDrParamsJP) );
    9046:	7820      	ldrb	r0, [r4, #0]
    9048:	7863      	ldrb	r3, [r4, #1]
    904a:	021b      	lsls	r3, r3, #8
    904c:	4303      	orrs	r3, r0
    904e:	78a0      	ldrb	r0, [r4, #2]
    9050:	0400      	lsls	r0, r0, #16
    9052:	4303      	orrs	r3, r0
    9054:	78e0      	ldrb	r0, [r4, #3]
    9056:	0600      	lsls	r0, r0, #24
    9058:	4318      	orrs	r0, r3
    905a:	3230      	adds	r2, #48	; 0x30
    905c:	491f      	ldr	r1, [pc, #124]	; (90dc <LORAReg_InitJP+0x290>)
    905e:	4b1b      	ldr	r3, [pc, #108]	; (90cc <LORAReg_InitJP+0x280>)
    9060:	4798      	blx	r3
		RegParams.regParamItems.fileid = PDS_FILE_REG_JPN_08_IDX;
    9062:	2307      	movs	r3, #7
    9064:	2107      	movs	r1, #7
    9066:	4a1e      	ldr	r2, [pc, #120]	; (90e0 <LORAReg_InitJP+0x294>)
    9068:	54a1      	strb	r1, [r4, r2]
		RegParams.regParamItems.ch_param_1_item_id = PDS_REG_JPN_CH_PARAM_1;
    906a:	2100      	movs	r1, #0
    906c:	4a1d      	ldr	r2, [pc, #116]	; (90e4 <LORAReg_InitJP+0x298>)
    906e:	54a1      	strb	r1, [r4, r2]
    9070:	18a2      	adds	r2, r4, r2
    9072:	7053      	strb	r3, [r2, #1]
		RegParams.regParamItems.ch_param_2_item_id = PDS_REG_JPN_CH_PARAM_2;
    9074:	3101      	adds	r1, #1
    9076:	2284      	movs	r2, #132	; 0x84
    9078:	0092      	lsls	r2, r2, #2
    907a:	54a1      	strb	r1, [r4, r2]
    907c:	18a2      	adds	r2, r4, r2
    907e:	7053      	strb	r3, [r2, #1]
		RegParams.regParamItems.band_item_id = 0;
    9080:	2200      	movs	r2, #0
    9082:	4b19      	ldr	r3, [pc, #100]	; (90e8 <LORAReg_InitJP+0x29c>)
    9084:	54e2      	strb	r2, [r4, r3]
    9086:	18e3      	adds	r3, r4, r3
    9088:	705a      	strb	r2, [r3, #1]
		RegParams.regParamItems.lastUsedSB = 0;
    908a:	2383      	movs	r3, #131	; 0x83
    908c:	009b      	lsls	r3, r3, #2
    908e:	54e2      	strb	r2, [r4, r3]
    9090:	469c      	mov	ip, r3
    9092:	4464      	add	r4, ip
    9094:	2300      	movs	r3, #0
    9096:	7063      	strb	r3, [r4, #1]
		filemarks.fileMarkListAddr = aRegJpnFid1PdsOps;
    9098:	ab02      	add	r3, sp, #8
		filemarks.numItems =  (uint8_t)(PDS_REG_JPN_FID1_MAX_VALUE & 0x00FF);
    909a:	3202      	adds	r2, #2
    909c:	711a      	strb	r2, [r3, #4]
		filemarks.fIDcb = LorawanReg_JPN_Pds_Cb;
    909e:	4a13      	ldr	r2, [pc, #76]	; (90ec <LORAReg_InitJP+0x2a0>)
		PDS_RegFile(PDS_FILE_REG_JPN_08_IDX,filemarks);
    90a0:	9200      	str	r2, [sp, #0]
    90a2:	4913      	ldr	r1, [pc, #76]	; (90f0 <LORAReg_InitJP+0x2a4>)
    90a4:	9a03      	ldr	r2, [sp, #12]
    90a6:	4b13      	ldr	r3, [pc, #76]	; (90f4 <LORAReg_InitJP+0x2a8>)
    90a8:	2007      	movs	r0, #7
    90aa:	4c13      	ldr	r4, [pc, #76]	; (90f8 <LORAReg_InitJP+0x2ac>)
    90ac:	47a0      	blx	r4
	StackRetStatus_t result = LORAWAN_SUCCESS;
    90ae:	2408      	movs	r4, #8
    90b0:	e77d      	b.n	8fae <LORAReg_InitJP+0x162>
    90b2:	46c0      	nop			; (mov r8, r8)
    90b4:	200024d0 	.word	0x200024d0
    90b8:	200024cc 	.word	0x200024cc
    90bc:	0000cf9d 	.word	0x0000cf9d
    90c0:	0000d455 	.word	0x0000d455
    90c4:	0000d715 	.word	0x0000d715
    90c8:	0001ff14 	.word	0x0001ff14
    90cc:	00019d11 	.word	0x00019d11
    90d0:	0001fefc 	.word	0x0001fefc
    90d4:	0001ff5c 	.word	0x0001ff5c
    90d8:	0001ff58 	.word	0x0001ff58
    90dc:	0001ff18 	.word	0x0001ff18
    90e0:	0000020b 	.word	0x0000020b
    90e4:	0000020e 	.word	0x0000020e
    90e8:	00000212 	.word	0x00000212
    90ec:	00008e49 	.word	0x00008e49
    90f0:	200022c0 	.word	0x200022c0
    90f4:	0001ff74 	.word	0x0001ff74
    90f8:	0000e2c5 	.word	0x0000e2c5

000090fc <LorawanReg_KR_Pds_Cb>:
#if (ENABLE_PDS == 1)
/* PDS Callback */
void LorawanReg_KR_Pds_Cb(void)
{

}
    90fc:	4770      	bx	lr
	...

00009100 <LORAReg_InitKR>:
{
    9100:	b5f0      	push	{r4, r5, r6, r7, lr}
    9102:	46de      	mov	lr, fp
    9104:	4657      	mov	r7, sl
    9106:	464e      	mov	r6, r9
    9108:	4645      	mov	r5, r8
    910a:	b5e0      	push	{r5, r6, r7, lr}
    910c:	b087      	sub	sp, #28
	RegParams.TxCurDataRate = MAC_DEF_TX_CURRENT_DATARATE_KR;
    910e:	4ba9      	ldr	r3, [pc, #676]	; (93b4 <LORAReg_InitKR+0x2b4>)
    9110:	2403      	movs	r4, #3
    9112:	2226      	movs	r2, #38	; 0x26
    9114:	549c      	strb	r4, [r3, r2]
	RegParams.maxChannels = MAX_CHANNELS_KR;
    9116:	2110      	movs	r1, #16
    9118:	3204      	adds	r2, #4
    911a:	5499      	strb	r1, [r3, r2]
	RegParams.maxSubBands = MAX_NUM_SUBBANDS_KR;
    911c:	3a29      	subs	r2, #41	; 0x29
    911e:	3119      	adds	r1, #25
    9120:	545a      	strb	r2, [r3, r1]
	RegParams.MacTxPower = MAC_DEF_TX_POWER_KR;
    9122:	3902      	subs	r1, #2
    9124:	545a      	strb	r2, [r3, r1]
	RegParams.pChParams = &RegParams.cmnParams.paramsType2.chParams[0];
    9126:	001a      	movs	r2, r3
    9128:	3283      	adds	r2, #131	; 0x83
    912a:	2100      	movs	r1, #0
    912c:	711a      	strb	r2, [r3, #4]
    912e:	0a15      	lsrs	r5, r2, #8
    9130:	715d      	strb	r5, [r3, #5]
    9132:	0c15      	lsrs	r5, r2, #16
    9134:	719d      	strb	r5, [r3, #6]
    9136:	0e12      	lsrs	r2, r2, #24
    9138:	71da      	strb	r2, [r3, #7]
	RegParams.pDrParams = &RegParams.cmnParams.paramsType2.DRParams[0];
    913a:	001a      	movs	r2, r3
    913c:	3243      	adds	r2, #67	; 0x43
    913e:	701a      	strb	r2, [r3, #0]
    9140:	0a15      	lsrs	r5, r2, #8
    9142:	705d      	strb	r5, [r3, #1]
    9144:	0c15      	lsrs	r5, r2, #16
    9146:	709d      	strb	r5, [r3, #2]
    9148:	0e12      	lsrs	r2, r2, #24
    914a:	70da      	strb	r2, [r3, #3]
	RegParams.pOtherChParams = &RegParams.cmnParams.paramsType2.othChParams[0];
    914c:	001a      	movs	r2, r3
    914e:	32a3      	adds	r2, #163	; 0xa3
    9150:	721a      	strb	r2, [r3, #8]
    9152:	0a15      	lsrs	r5, r2, #8
    9154:	725d      	strb	r5, [r3, #9]
    9156:	0c15      	lsrs	r5, r2, #16
    9158:	729d      	strb	r5, [r3, #10]
    915a:	0e12      	lsrs	r2, r2, #24
    915c:	72da      	strb	r2, [r3, #11]
	RegParams.pDutyCycleTimer = &RegParams.cmnParams.paramsType2.DutyCycleTimer;
    915e:	001a      	movs	r2, r3
    9160:	3264      	adds	r2, #100	; 0x64
    9162:	32ff      	adds	r2, #255	; 0xff
    9164:	741a      	strb	r2, [r3, #16]
    9166:	0a15      	lsrs	r5, r2, #8
    9168:	745d      	strb	r5, [r3, #17]
    916a:	0c15      	lsrs	r5, r2, #16
    916c:	749d      	strb	r5, [r3, #18]
    916e:	0e12      	lsrs	r2, r2, #24
    9170:	74da      	strb	r2, [r3, #19]
    RegParams.pJoinDutyCycleTimer = &RegParams.joinDutyCycleTimer;
    9172:	001a      	movs	r2, r3
    9174:	3234      	adds	r2, #52	; 0x34
    9176:	751a      	strb	r2, [r3, #20]
    9178:	0a15      	lsrs	r5, r2, #8
    917a:	755d      	strb	r5, [r3, #21]
    917c:	0c15      	lsrs	r5, r2, #16
    917e:	759d      	strb	r5, [r3, #22]
    9180:	0e12      	lsrs	r2, r2, #24
    9182:	75da      	strb	r2, [r3, #23]
	RegParams.pJoinBackoffTimer = &RegParams.joinBackoffTimer;
    9184:	001a      	movs	r2, r3
    9186:	323d      	adds	r2, #61	; 0x3d
    9188:	761a      	strb	r2, [r3, #24]
    918a:	0a15      	lsrs	r5, r2, #8
    918c:	765d      	strb	r5, [r3, #25]
    918e:	0c15      	lsrs	r5, r2, #16
    9190:	769d      	strb	r5, [r3, #26]
    9192:	0e12      	lsrs	r2, r2, #24
    9194:	76da      	strb	r2, [r3, #27]
	RegParams.DefRx1DataRate = MAC_RX1_WINDOW_DATARATE_KR;
    9196:	2222      	movs	r2, #34	; 0x22
    9198:	5499      	strb	r1, [r3, r2]
	RegParams.DefRx2DataRate = MAC_RX2_WINDOW_DATARATE_KR;
    919a:	3201      	adds	r2, #1
    919c:	5499      	strb	r1, [r3, r2]
	RegParams.DefRx2Freq = MAC_RX2_WINDOW_FREQ_KR;	
    919e:	3a43      	subs	r2, #67	; 0x43
    91a0:	771a      	strb	r2, [r3, #28]
    91a2:	3233      	adds	r2, #51	; 0x33
    91a4:	775a      	strb	r2, [r3, #29]
    91a6:	3a20      	subs	r2, #32
    91a8:	779a      	strb	r2, [r3, #30]
    91aa:	3243      	adds	r2, #67	; 0x43
    91ac:	77da      	strb	r2, [r3, #31]
	RegParams.MinNewChIndex = MIN_CHANNEL_INDEX_KR;
    91ae:	3a15      	subs	r2, #21
    91b0:	549c      	strb	r4, [r3, r2]
	RegParams.FeaturesSupport = FEATURES_SUPPORTED_KR;
    91b2:	2534      	movs	r5, #52	; 0x34
    91b4:	3a01      	subs	r2, #1
    91b6:	549d      	strb	r5, [r3, r2]
	RegParams.minDataRate = MAC_DATARATE_MIN_KR;
    91b8:	3a1b      	subs	r2, #27
    91ba:	3d10      	subs	r5, #16
    91bc:	555a      	strb	r2, [r3, r5]
	RegParams.maxDataRate = MAC_DATARATE_MAX_KR;
    91be:	3501      	adds	r5, #1
    91c0:	5559      	strb	r1, [r3, r5]
	RegParams.cmnParams.paramsType2.LBTScanPeriod = LBT_SCAN_PERIOD_KR;
    91c2:	3d1b      	subs	r5, #27
    91c4:	26be      	movs	r6, #190	; 0xbe
    91c6:	36ff      	adds	r6, #255	; 0xff
    91c8:	559d      	strb	r5, [r3, r6]
	RegParams.cmnParams.paramsType2.LBTSignalThreshold = LBT_SIGNAL_THRESHOLD_KR;
    91ca:	27bf      	movs	r7, #191	; 0xbf
    91cc:	3601      	adds	r6, #1
    91ce:	559f      	strb	r7, [r3, r6]
	RegParams.cmnParams.paramsType2.LBT_RSSISamplesCount = LBT_RSSI_SAMPLES_COUNT_KR;
    91d0:	26c0      	movs	r6, #192	; 0xc0
    91d2:	36ff      	adds	r6, #255	; 0xff
    91d4:	559d      	strb	r5, [r3, r6]
	RegParams.cmnParams.paramsType2.minNonDefChId = 3;
    91d6:	35b7      	adds	r5, #183	; 0xb7
    91d8:	35ff      	adds	r5, #255	; 0xff
    91da:	555c      	strb	r4, [r3, r5]
	RegParams.Rx1DrOffset = 5;
    91dc:	3429      	adds	r4, #41	; 0x29
    91de:	551a      	strb	r2, [r3, r4]
	RegParams.maxTxPwrIndx = 7;
    91e0:	3c25      	subs	r4, #37	; 0x25
    91e2:	3228      	adds	r2, #40	; 0x28
    91e4:	549c      	strb	r4, [r3, r2]
	RegParams.maxTxPwr = DEFAULT_EIRP_KR_HF;
    91e6:	3407      	adds	r4, #7
    91e8:	3a05      	subs	r2, #5
    91ea:	549c      	strb	r4, [r3, r2]
	RegParams.cmnParams.paramsType2.LBTTimer.timerId = regTimerId[0];
    91ec:	4a72      	ldr	r2, [pc, #456]	; (93b8 <LORAReg_InitKR+0x2b8>)
    91ee:	7815      	ldrb	r5, [r2, #0]
    91f0:	349f      	adds	r4, #159	; 0x9f
    91f2:	34ff      	adds	r4, #255	; 0xff
    91f4:	551d      	strb	r5, [r3, r4]
	RegParams.pJoinBackoffTimer->timerId = regTimerId[1];
    91f6:	7855      	ldrb	r5, [r2, #1]
    91f8:	3c70      	subs	r4, #112	; 0x70
    91fa:	3cff      	subs	r4, #255	; 0xff
    91fc:	551d      	strb	r5, [r3, r4]
    RegParams.pJoinDutyCycleTimer->timerId = regTimerId[2];
    91fe:	7894      	ldrb	r4, [r2, #2]
    9200:	223c      	movs	r2, #60	; 0x3c
    9202:	549c      	strb	r4, [r3, r2]
	RegParams.pJoinDutyCycleTimer->remainingtime =0;
    9204:	2400      	movs	r4, #0
    9206:	3a04      	subs	r2, #4
    9208:	549c      	strb	r4, [r3, r2]
    920a:	3201      	adds	r2, #1
    920c:	549c      	strb	r4, [r3, r2]
    920e:	3201      	adds	r2, #1
    9210:	549c      	strb	r4, [r3, r2]
    9212:	3201      	adds	r2, #1
    9214:	549c      	strb	r4, [r3, r2]
	RegParams.joinbccount =0;
    9216:	3207      	adds	r2, #7
    9218:	5499      	strb	r1, [r3, r2]
	RegParams.joinDutyCycleTimeout =0;
    921a:	001a      	movs	r2, r3
    921c:	323e      	adds	r2, #62	; 0x3e
    921e:	7011      	strb	r1, [r2, #0]
    9220:	7051      	strb	r1, [r2, #1]
    9222:	7091      	strb	r1, [r2, #2]
    9224:	70d1      	strb	r1, [r2, #3]
	RegParams.band = ismBand;
    9226:	222e      	movs	r2, #46	; 0x2e
    9228:	5498      	strb	r0, [r3, r2]
		result = UNSUPPORTED_BAND;
    922a:	34c6      	adds	r4, #198	; 0xc6
	if(ismBand == ISM_KR920)
    922c:	2804      	cmp	r0, #4
    922e:	d00d      	beq.n	924c <LORAReg_InitKR+0x14c>
    LORAREG_InitGetAttrFnPtrsKR();
    9230:	4b62      	ldr	r3, [pc, #392]	; (93bc <LORAReg_InitKR+0x2bc>)
    9232:	4798      	blx	r3
	LORAREG_InitValidateAttrFnPtrsKR();
    9234:	4b62      	ldr	r3, [pc, #392]	; (93c0 <LORAReg_InitKR+0x2c0>)
    9236:	4798      	blx	r3
	LORAREG_InitSetAttrFnPtrsKR();
    9238:	4b62      	ldr	r3, [pc, #392]	; (93c4 <LORAReg_InitKR+0x2c4>)
    923a:	4798      	blx	r3
}
    923c:	0020      	movs	r0, r4
    923e:	b007      	add	sp, #28
    9240:	bc3c      	pop	{r2, r3, r4, r5}
    9242:	4690      	mov	r8, r2
    9244:	4699      	mov	r9, r3
    9246:	46a2      	mov	sl, r4
    9248:	46ab      	mov	fp, r5
    924a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    memcpy (RegParams.pChParams, DefaultChannels920KR, sizeof(DefaultChannels920KR) );
    924c:	001c      	movs	r4, r3
    924e:	0018      	movs	r0, r3
    9250:	3083      	adds	r0, #131	; 0x83
    9252:	3a28      	subs	r2, #40	; 0x28
    9254:	495c      	ldr	r1, [pc, #368]	; (93c8 <LORAReg_InitKR+0x2c8>)
    9256:	4d5d      	ldr	r5, [pc, #372]	; (93cc <LORAReg_InitKR+0x2cc>)
    9258:	47a8      	blx	r5
	memcpy (RegParams.pOtherChParams, AdvChannels920KR, sizeof(AdvChannels920KR) );
    925a:	0020      	movs	r0, r4
    925c:	30a3      	adds	r0, #163	; 0xa3
    925e:	2224      	movs	r2, #36	; 0x24
    9260:	495b      	ldr	r1, [pc, #364]	; (93d0 <LORAReg_InitKR+0x2d0>)
    9262:	47a8      	blx	r5
    9264:	2103      	movs	r1, #3
    9266:	2003      	movs	r0, #3
	    RegParams.pChParams[i].dataRange.value = UINT8_MAX;
    9268:	4b52      	ldr	r3, [pc, #328]	; (93b4 <LORAReg_InitKR+0x2b4>)
    926a:	22ff      	movs	r2, #255	; 0xff
    926c:	4692      	mov	sl, r2
		RegParams.pChParams[i].status = DISABLED;
    926e:	2400      	movs	r4, #0
		RegParams.cmnParams.paramsType2.txParams.maxEIRP = UINT8_MAX;
    9270:	22c2      	movs	r2, #194	; 0xc2
    9272:	32ff      	adds	r2, #255	; 0xff
    9274:	4694      	mov	ip, r2
    9276:	4657      	mov	r7, sl
    for (i = 3; i < RegParams.maxChannels; i++)
    9278:	3a98      	subs	r2, #152	; 0x98
    927a:	3aff      	subs	r2, #255	; 0xff
    927c:	4693      	mov	fp, r2
	    RegParams.pChParams[i].dataRange.value = UINT8_MAX;
    927e:	0042      	lsls	r2, r0, #1
    9280:	791e      	ldrb	r6, [r3, #4]
    9282:	46b0      	mov	r8, r6
    9284:	795e      	ldrb	r6, [r3, #5]
    9286:	0236      	lsls	r6, r6, #8
    9288:	46b1      	mov	r9, r6
    928a:	4646      	mov	r6, r8
    928c:	464d      	mov	r5, r9
    928e:	432e      	orrs	r6, r5
    9290:	799d      	ldrb	r5, [r3, #6]
    9292:	042d      	lsls	r5, r5, #16
    9294:	432e      	orrs	r6, r5
    9296:	79dd      	ldrb	r5, [r3, #7]
    9298:	062d      	lsls	r5, r5, #24
    929a:	432e      	orrs	r6, r5
    929c:	46b0      	mov	r8, r6
    929e:	4490      	add	r8, r2
    92a0:	4645      	mov	r5, r8
    92a2:	4656      	mov	r6, sl
    92a4:	706e      	strb	r6, [r5, #1]
		RegParams.pChParams[i].status = DISABLED;
    92a6:	791d      	ldrb	r5, [r3, #4]
    92a8:	46a8      	mov	r8, r5
    92aa:	795d      	ldrb	r5, [r3, #5]
    92ac:	022d      	lsls	r5, r5, #8
    92ae:	4646      	mov	r6, r8
    92b0:	432e      	orrs	r6, r5
    92b2:	799d      	ldrb	r5, [r3, #6]
    92b4:	042d      	lsls	r5, r5, #16
    92b6:	432e      	orrs	r6, r5
    92b8:	79dd      	ldrb	r5, [r3, #7]
    92ba:	062d      	lsls	r5, r5, #24
    92bc:	432e      	orrs	r6, r5
    92be:	54b4      	strb	r4, [r6, r2]
		RegParams.pOtherChParams[i].joinRequestChannel = DISABLED;
    92c0:	7a1d      	ldrb	r5, [r3, #8]
    92c2:	46a8      	mov	r8, r5
    92c4:	7a5d      	ldrb	r5, [r3, #9]
    92c6:	022d      	lsls	r5, r5, #8
    92c8:	4646      	mov	r6, r8
    92ca:	432e      	orrs	r6, r5
    92cc:	7a9d      	ldrb	r5, [r3, #10]
    92ce:	042d      	lsls	r5, r5, #16
    92d0:	432e      	orrs	r6, r5
    92d2:	7add      	ldrb	r5, [r3, #11]
    92d4:	062d      	lsls	r5, r5, #24
    92d6:	432e      	orrs	r6, r5
    92d8:	46b0      	mov	r8, r6
    92da:	1812      	adds	r2, r2, r0
    92dc:	0092      	lsls	r2, r2, #2
    92de:	4442      	add	r2, r8
    92e0:	7254      	strb	r4, [r2, #9]
		RegParams.cmnParams.paramsType2.txParams.maxEIRP = UINT8_MAX;
    92e2:	4662      	mov	r2, ip
    92e4:	549f      	strb	r7, [r3, r2]
		RegParams.cmnParams.paramsType2.channelTimer[i] = 0;
    92e6:	000a      	movs	r2, r1
    92e8:	3258      	adds	r2, #88	; 0x58
    92ea:	0092      	lsls	r2, r2, #2
    92ec:	189a      	adds	r2, r3, r2
    92ee:	7214      	strb	r4, [r2, #8]
    92f0:	7254      	strb	r4, [r2, #9]
    92f2:	7294      	strb	r4, [r2, #10]
    92f4:	72d4      	strb	r4, [r2, #11]
    for (i = 3; i < RegParams.maxChannels; i++)
    92f6:	3001      	adds	r0, #1
    92f8:	b2c0      	uxtb	r0, r0
    92fa:	0001      	movs	r1, r0
    92fc:	465a      	mov	r2, fp
    92fe:	569a      	ldrsb	r2, [r3, r2]
    9300:	4290      	cmp	r0, r2
    9302:	dbbc      	blt.n	927e <LORAReg_InitKR+0x17e>
	RegParams.lastUsedChannelIndex = UINT8_MAX;
    9304:	4c2b      	ldr	r4, [pc, #172]	; (93b4 <LORAReg_InitKR+0x2b4>)
    9306:	22ff      	movs	r2, #255	; 0xff
    9308:	232f      	movs	r3, #47	; 0x2f
    930a:	54e2      	strb	r2, [r4, r3]
		memcpy (RegParams.pDrParams, DefaultDrParamsKR, sizeof(DefaultDrParamsKR) );
    930c:	7820      	ldrb	r0, [r4, #0]
    930e:	7863      	ldrb	r3, [r4, #1]
    9310:	021b      	lsls	r3, r3, #8
    9312:	4303      	orrs	r3, r0
    9314:	78a0      	ldrb	r0, [r4, #2]
    9316:	0400      	lsls	r0, r0, #16
    9318:	4303      	orrs	r3, r0
    931a:	78e0      	ldrb	r0, [r4, #3]
    931c:	0600      	lsls	r0, r0, #24
    931e:	4318      	orrs	r0, r3
    9320:	3acf      	subs	r2, #207	; 0xcf
    9322:	492c      	ldr	r1, [pc, #176]	; (93d4 <LORAReg_InitKR+0x2d4>)
    9324:	4b29      	ldr	r3, [pc, #164]	; (93cc <LORAReg_InitKR+0x2cc>)
    9326:	4798      	blx	r3
		for(int8_t dataRate = 0; dataRate < RegParams.maxDataRate; dataRate++)
    9328:	2325      	movs	r3, #37	; 0x25
    932a:	5ce3      	ldrb	r3, [r4, r3]
    932c:	2b00      	cmp	r3, #0
    932e:	dd18      	ble.n	9362 <LORAReg_InitKR+0x262>
			RegParams.pDrParams[dataRate].modulation = MODULATION_LORA;
    9330:	4a20      	ldr	r2, [pc, #128]	; (93b4 <LORAReg_InitKR+0x2b4>)
    9332:	7811      	ldrb	r1, [r2, #0]
    9334:	7853      	ldrb	r3, [r2, #1]
    9336:	021b      	lsls	r3, r3, #8
    9338:	430b      	orrs	r3, r1
    933a:	7891      	ldrb	r1, [r2, #2]
    933c:	0409      	lsls	r1, r1, #16
    933e:	430b      	orrs	r3, r1
    9340:	78d1      	ldrb	r1, [r2, #3]
    9342:	0609      	lsls	r1, r1, #24
    9344:	4319      	orrs	r1, r3
    9346:	2300      	movs	r3, #0
    9348:	2601      	movs	r6, #1
			RegParams.pDrParams[dataRate].bandwidth = BW_125KHZ;
    934a:	2507      	movs	r5, #7
		for(int8_t dataRate = 0; dataRate < RegParams.maxDataRate; dataRate++)
    934c:	0014      	movs	r4, r2
    934e:	2025      	movs	r0, #37	; 0x25
			RegParams.pDrParams[dataRate].modulation = MODULATION_LORA;
    9350:	00da      	lsls	r2, r3, #3
    9352:	188a      	adds	r2, r1, r2
    9354:	71d6      	strb	r6, [r2, #7]
			RegParams.pDrParams[dataRate].bandwidth = BW_125KHZ;
    9356:	7195      	strb	r5, [r2, #6]
    9358:	3301      	adds	r3, #1
    935a:	b25b      	sxtb	r3, r3
		for(int8_t dataRate = 0; dataRate < RegParams.maxDataRate; dataRate++)
    935c:	5c22      	ldrb	r2, [r4, r0]
    935e:	4293      	cmp	r3, r2
    9360:	dbf6      	blt.n	9350 <LORAReg_InitKR+0x250>
		RegParams.regParamItems.fileid = PDS_FILE_REG_KR_06_IDX;
    9362:	4b14      	ldr	r3, [pc, #80]	; (93b4 <LORAReg_InitKR+0x2b4>)
    9364:	2205      	movs	r2, #5
    9366:	2005      	movs	r0, #5
    9368:	491b      	ldr	r1, [pc, #108]	; (93d8 <LORAReg_InitKR+0x2d8>)
    936a:	5458      	strb	r0, [r3, r1]
		RegParams.regParamItems.ch_param_1_item_id = PDS_REG_KR_CH_PARAM_1;
    936c:	2000      	movs	r0, #0
    936e:	491b      	ldr	r1, [pc, #108]	; (93dc <LORAReg_InitKR+0x2dc>)
    9370:	5458      	strb	r0, [r3, r1]
    9372:	1859      	adds	r1, r3, r1
    9374:	704a      	strb	r2, [r1, #1]
		RegParams.regParamItems.ch_param_2_item_id = PDS_REG_KR_CH_PARAM_2;
    9376:	3001      	adds	r0, #1
    9378:	2184      	movs	r1, #132	; 0x84
    937a:	0089      	lsls	r1, r1, #2
    937c:	5458      	strb	r0, [r3, r1]
    937e:	1859      	adds	r1, r3, r1
    9380:	704a      	strb	r2, [r1, #1]
		RegParams.regParamItems.band_item_id = 0;
    9382:	2100      	movs	r1, #0
    9384:	4a16      	ldr	r2, [pc, #88]	; (93e0 <LORAReg_InitKR+0x2e0>)
    9386:	5499      	strb	r1, [r3, r2]
    9388:	189a      	adds	r2, r3, r2
    938a:	7051      	strb	r1, [r2, #1]
		RegParams.regParamItems.lastUsedSB = 0;
    938c:	2283      	movs	r2, #131	; 0x83
    938e:	0092      	lsls	r2, r2, #2
    9390:	5499      	strb	r1, [r3, r2]
    9392:	4694      	mov	ip, r2
    9394:	4463      	add	r3, ip
    9396:	2200      	movs	r2, #0
    9398:	705a      	strb	r2, [r3, #1]
		filemarks.fileMarkListAddr = aRegKrFid1PdsOps;
    939a:	ab02      	add	r3, sp, #8
		filemarks.numItems =  (uint8_t)(PDS_REG_KR_FID1_MAX_VALUE & 0x00FF);
    939c:	3202      	adds	r2, #2
    939e:	711a      	strb	r2, [r3, #4]
		filemarks.fIDcb = LorawanReg_KR_Pds_Cb;
    93a0:	4a10      	ldr	r2, [pc, #64]	; (93e4 <LORAReg_InitKR+0x2e4>)
		PDS_RegFile(PDS_FILE_REG_KR_06_IDX,filemarks);
    93a2:	9200      	str	r2, [sp, #0]
    93a4:	4910      	ldr	r1, [pc, #64]	; (93e8 <LORAReg_InitKR+0x2e8>)
    93a6:	9a03      	ldr	r2, [sp, #12]
    93a8:	4b10      	ldr	r3, [pc, #64]	; (93ec <LORAReg_InitKR+0x2ec>)
    93aa:	3004      	adds	r0, #4
    93ac:	4c10      	ldr	r4, [pc, #64]	; (93f0 <LORAReg_InitKR+0x2f0>)
    93ae:	47a0      	blx	r4
	StackRetStatus_t result = LORAWAN_SUCCESS;
    93b0:	2408      	movs	r4, #8
    93b2:	e73d      	b.n	9230 <LORAReg_InitKR+0x130>
    93b4:	200024d0 	.word	0x200024d0
    93b8:	200024cc 	.word	0x200024cc
    93bc:	0000d0f9 	.word	0x0000d0f9
    93c0:	0000d4c1 	.word	0x0000d4c1
    93c4:	0000d795 	.word	0x0000d795
    93c8:	0001ffa8 	.word	0x0001ffa8
    93cc:	00019d11 	.word	0x00019d11
    93d0:	0001ff84 	.word	0x0001ff84
    93d4:	0001ffb0 	.word	0x0001ffb0
    93d8:	0000020b 	.word	0x0000020b
    93dc:	0000020e 	.word	0x0000020e
    93e0:	00000212 	.word	0x00000212
    93e4:	000090fd 	.word	0x000090fd
    93e8:	200022c4 	.word	0x200022c4
    93ec:	0001ffe0 	.word	0x0001ffe0
    93f0:	0000e2c5 	.word	0x0000e2c5

000093f4 <LorawanReg_NA_Pds_Cb>:

#if (ENABLE_PDS == 1)
void LorawanReg_NA_Pds_Cb(void)
{
	
}
    93f4:	4770      	bx	lr
	...

000093f8 <LORAReg_InitNA>:
{
    93f8:	b5f0      	push	{r4, r5, r6, r7, lr}
    93fa:	46de      	mov	lr, fp
    93fc:	4657      	mov	r7, sl
    93fe:	464e      	mov	r6, r9
    9400:	4645      	mov	r5, r8
    9402:	b5e0      	push	{r5, r6, r7, lr}
    9404:	b089      	sub	sp, #36	; 0x24
    9406:	9003      	str	r0, [sp, #12]
    RegParams.TxCurDataRate = MAC_DEF_TX_CURRENT_DATARATE_NA;
    9408:	4c7d      	ldr	r4, [pc, #500]	; (9600 <LORAReg_InitNA+0x208>)
    940a:	2702      	movs	r7, #2
    940c:	2302      	movs	r3, #2
    940e:	469b      	mov	fp, r3
    9410:	2326      	movs	r3, #38	; 0x26
    9412:	54e7      	strb	r7, [r4, r3]
	RegParams.maxChannels = MAX_CHANNELS_T1;
    9414:	2248      	movs	r2, #72	; 0x48
    9416:	3304      	adds	r3, #4
    9418:	54e2      	strb	r2, [r4, r3]
	RegParams.MacTxPower = MAC_DEF_TX_POWER_NA;
    941a:	3a41      	subs	r2, #65	; 0x41
    941c:	3b03      	subs	r3, #3
    941e:	54e2      	strb	r2, [r4, r3]
	RegParams.maxTxPwr = DEFAULT_EIRP_NA;
    9420:	3217      	adds	r2, #23
    9422:	3301      	adds	r3, #1
    9424:	54e2      	strb	r2, [r4, r3]
	RegParams.pChParams = &RegParams.cmnParams.paramsType1.chParams[0];
    9426:	0023      	movs	r3, r4
    9428:	33b3      	adds	r3, #179	; 0xb3
    942a:	0018      	movs	r0, r3
    942c:	2500      	movs	r5, #0
    942e:	7123      	strb	r3, [r4, #4]
    9430:	0a1b      	lsrs	r3, r3, #8
    9432:	7163      	strb	r3, [r4, #5]
    9434:	0c03      	lsrs	r3, r0, #16
    9436:	71a3      	strb	r3, [r4, #6]
    9438:	0e03      	lsrs	r3, r0, #24
    943a:	71e3      	strb	r3, [r4, #7]
	RegParams.pDrParams = &RegParams.cmnParams.paramsType1.DRParams[0];
    943c:	0026      	movs	r6, r4
    943e:	3643      	adds	r6, #67	; 0x43
    9440:	7026      	strb	r6, [r4, #0]
    9442:	0a33      	lsrs	r3, r6, #8
    9444:	7063      	strb	r3, [r4, #1]
    9446:	0c33      	lsrs	r3, r6, #16
    9448:	70a3      	strb	r3, [r4, #2]
    944a:	0e33      	lsrs	r3, r6, #24
    944c:	70e3      	strb	r3, [r4, #3]
	RegParams.MinNewChIndex = 0xFF;
    944e:	2321      	movs	r3, #33	; 0x21
    9450:	32e1      	adds	r2, #225	; 0xe1
    9452:	54e2      	strb	r2, [r4, r3]
	RegParams.DefRx1DataRate = MAC_RX1_WINDOW_DATARATE_NA;
    9454:	3add      	subs	r2, #221	; 0xdd
    9456:	3b17      	subs	r3, #23
    9458:	54a3      	strb	r3, [r4, r2]
	RegParams.DefRx2DataRate = MAC_RX2_WINDOW_DATARATE_NA;
    945a:	3a1a      	subs	r2, #26
    945c:	2108      	movs	r1, #8
    945e:	468c      	mov	ip, r1
    9460:	2123      	movs	r1, #35	; 0x23
    9462:	5462      	strb	r2, [r4, r1]
	RegParams.DefRx2Freq = MAC_RX2_WINDOW_FREQ_NA;
    9464:	3983      	subs	r1, #131	; 0x83
    9466:	4688      	mov	r8, r1
    9468:	7721      	strb	r1, [r4, #28]
    946a:	2170      	movs	r1, #112	; 0x70
    946c:	7761      	strb	r1, [r4, #29]
    946e:	4661      	mov	r1, ip
    9470:	77a1      	strb	r1, [r4, #30]
    9472:	2137      	movs	r1, #55	; 0x37
    9474:	77e1      	strb	r1, [r4, #31]
	RegParams.FeaturesSupport = FEATURES_SUPPORTED_NA;
    9476:	3917      	subs	r1, #23
    9478:	2338      	movs	r3, #56	; 0x38
    947a:	5463      	strb	r3, [r4, r1]
	RegParams.minDataRate = MAC_DATARATE_MIN_NA;
    947c:	391c      	subs	r1, #28
    947e:	4689      	mov	r9, r1
    9480:	3120      	adds	r1, #32
    9482:	464b      	mov	r3, r9
    9484:	5463      	strb	r3, [r4, r1]
	RegParams.maxDataRate = MAC_DATARATE_MAX_NA;
    9486:	2325      	movs	r3, #37	; 0x25
    9488:	54e5      	strb	r5, [r4, r3]
	RegParams.cmnParams.paramsType1.Max_125khzChan = MAX_CHANNELS_BANDWIDTH_125_AU_NA;
    948a:	2354      	movs	r3, #84	; 0x54
    948c:	33ff      	adds	r3, #255	; 0xff
    948e:	311c      	adds	r1, #28
    9490:	54e1      	strb	r1, [r4, r3]
	RegParams.cmnParams.paramsType1.Max_500khzChan = MAX_CHANNELS_BANDWIDTH_500_AU_NA;
    9492:	3301      	adds	r3, #1
    9494:	54e2      	strb	r2, [r4, r3]
	RegParams.cmnParams.paramsType1.minTxDR = DR0;
    9496:	2350      	movs	r3, #80	; 0x50
    9498:	33ff      	adds	r3, #255	; 0xff
    949a:	54e5      	strb	r5, [r4, r3]
	RegParams.cmnParams.paramsType1.maxTxDR = DR4;
    949c:	3301      	adds	r3, #1
    949e:	4649      	mov	r1, r9
    94a0:	54e1      	strb	r1, [r4, r3]
	RegParams.cmnParams.paramsType1.minRxDR = DR8;
    94a2:	2352      	movs	r3, #82	; 0x52
    94a4:	33ff      	adds	r3, #255	; 0xff
    94a6:	54e2      	strb	r2, [r4, r3]
	RegParams.cmnParams.paramsType1.maxRxDR = DR13;
    94a8:	3b45      	subs	r3, #69	; 0x45
    94aa:	3bff      	subs	r3, #255	; 0xff
    94ac:	324b      	adds	r2, #75	; 0x4b
    94ae:	32ff      	adds	r2, #255	; 0xff
    94b0:	54a3      	strb	r3, [r4, r2]
	RegParams.cmnParams.paramsType1.RxParamWindowOffset1 = 10;
    94b2:	2256      	movs	r2, #86	; 0x56
    94b4:	32ff      	adds	r2, #255	; 0xff
    94b6:	230a      	movs	r3, #10
    94b8:	54a3      	strb	r3, [r4, r2]
	RegParams.pJoinDutyCycleTimer = &RegParams.joinDutyCycleTimer;
    94ba:	0022      	movs	r2, r4
    94bc:	3234      	adds	r2, #52	; 0x34
    94be:	7522      	strb	r2, [r4, #20]
    94c0:	0a13      	lsrs	r3, r2, #8
    94c2:	7563      	strb	r3, [r4, #21]
    94c4:	0c13      	lsrs	r3, r2, #16
    94c6:	75a3      	strb	r3, [r4, #22]
    94c8:	0e12      	lsrs	r2, r2, #24
    94ca:	75e2      	strb	r2, [r4, #23]
	RegParams.pJoinBackoffTimer = &RegParams.joinBackoffTimer;
    94cc:	0022      	movs	r2, r4
    94ce:	323d      	adds	r2, #61	; 0x3d
    94d0:	7622      	strb	r2, [r4, #24]
    94d2:	0a13      	lsrs	r3, r2, #8
    94d4:	7663      	strb	r3, [r4, #25]
    94d6:	0c13      	lsrs	r3, r2, #16
    94d8:	76a3      	strb	r3, [r4, #26]
    94da:	0e12      	lsrs	r2, r2, #24
    94dc:	76e2      	strb	r2, [r4, #27]
	RegParams.cmnParams.paramsType1.UpStreamCh0Freq = UPSTREAM_CH0_NA;
    94de:	2360      	movs	r3, #96	; 0x60
    94e0:	2244      	movs	r2, #68	; 0x44
    94e2:	32ff      	adds	r2, #255	; 0xff
    94e4:	54a3      	strb	r3, [r4, r2]
    94e6:	0022      	movs	r2, r4
    94e8:	3244      	adds	r2, #68	; 0x44
    94ea:	32ff      	adds	r2, #255	; 0xff
    94ec:	2301      	movs	r3, #1
    94ee:	7053      	strb	r3, [r2, #1]
    94f0:	2338      	movs	r3, #56	; 0x38
    94f2:	425b      	negs	r3, r3
    94f4:	7093      	strb	r3, [r2, #2]
    94f6:	2335      	movs	r3, #53	; 0x35
    94f8:	70d3      	strb	r3, [r2, #3]
	RegParams.cmnParams.paramsType1.UpStreamCh64Freq = UPSTREAM_CH64_NA;
    94fa:	2340      	movs	r3, #64	; 0x40
    94fc:	425b      	negs	r3, r3
    94fe:	2248      	movs	r2, #72	; 0x48
    9500:	32ff      	adds	r2, #255	; 0xff
    9502:	54a3      	strb	r3, [r4, r2]
    9504:	0022      	movs	r2, r4
    9506:	3248      	adds	r2, #72	; 0x48
    9508:	32ff      	adds	r2, #255	; 0xff
    950a:	2351      	movs	r3, #81	; 0x51
    950c:	425b      	negs	r3, r3
    950e:	7053      	strb	r3, [r2, #1]
    9510:	232e      	movs	r3, #46	; 0x2e
    9512:	425b      	negs	r3, r3
    9514:	7093      	strb	r3, [r2, #2]
    9516:	2335      	movs	r3, #53	; 0x35
    9518:	70d3      	strb	r3, [r2, #3]
	RegParams.cmnParams.paramsType1.DownStreamCh0Freq = DOWNSTREAM_CH0_NA;
    951a:	224c      	movs	r2, #76	; 0x4c
    951c:	32ff      	adds	r2, #255	; 0xff
    951e:	4643      	mov	r3, r8
    9520:	54a3      	strb	r3, [r4, r2]
    9522:	0022      	movs	r2, r4
    9524:	324c      	adds	r2, #76	; 0x4c
    9526:	32ff      	adds	r2, #255	; 0xff
    9528:	2370      	movs	r3, #112	; 0x70
    952a:	7053      	strb	r3, [r2, #1]
    952c:	4663      	mov	r3, ip
    952e:	7093      	strb	r3, [r2, #2]
    9530:	2337      	movs	r3, #55	; 0x37
    9532:	70d3      	strb	r3, [r2, #3]
	RegParams.Rx1DrOffset = 3;
    9534:	2303      	movs	r3, #3
    9536:	222c      	movs	r2, #44	; 0x2c
    9538:	54a3      	strb	r3, [r4, r2]
	RegParams.maxTxPwrIndx = 10;
    953a:	3201      	adds	r2, #1
    953c:	230a      	movs	r3, #10
    953e:	54a3      	strb	r3, [r4, r2]
	RegParams.cmnParams.paramsType1.lastUsedSB = 0;
    9540:	2358      	movs	r3, #88	; 0x58
    9542:	33ff      	adds	r3, #255	; 0xff
    9544:	54e5      	strb	r5, [r4, r3]
	RegParams.pJoinBackoffTimer->timerId = regTimerId[0];
    9546:	4b2f      	ldr	r3, [pc, #188]	; (9604 <LORAReg_InitNA+0x20c>)
    9548:	781a      	ldrb	r2, [r3, #0]
    954a:	4694      	mov	ip, r2
    954c:	223d      	movs	r2, #61	; 0x3d
    954e:	4661      	mov	r1, ip
    9550:	54a1      	strb	r1, [r4, r2]
	RegParams.pJoinDutyCycleTimer->timerId = regTimerId[1];
    9552:	785a      	ldrb	r2, [r3, #1]
    9554:	233c      	movs	r3, #60	; 0x3c
    9556:	54e2      	strb	r2, [r4, r3]
	RegParams.pJoinDutyCycleTimer->remainingtime =0;
    9558:	2300      	movs	r3, #0
    955a:	2238      	movs	r2, #56	; 0x38
    955c:	54a3      	strb	r3, [r4, r2]
    955e:	2200      	movs	r2, #0
    9560:	3339      	adds	r3, #57	; 0x39
    9562:	54e2      	strb	r2, [r4, r3]
    9564:	3301      	adds	r3, #1
    9566:	54e2      	strb	r2, [r4, r3]
    9568:	3301      	adds	r3, #1
    956a:	54e2      	strb	r2, [r4, r3]
	RegParams.joinbccount =0;
    956c:	3307      	adds	r3, #7
    956e:	54e5      	strb	r5, [r4, r3]
	RegParams.joinDutyCycleTimeout =0;
    9570:	0023      	movs	r3, r4
    9572:	333e      	adds	r3, #62	; 0x3e
    9574:	701a      	strb	r2, [r3, #0]
    9576:	705a      	strb	r2, [r3, #1]
    9578:	709a      	strb	r2, [r3, #2]
    957a:	70da      	strb	r2, [r3, #3]
	RegParams.band = ismBand;
    957c:	232e      	movs	r3, #46	; 0x2e
    957e:	466a      	mov	r2, sp
    9580:	7b12      	ldrb	r2, [r2, #12]
    9582:	54e2      	strb	r2, [r4, r3]
	memcpy (RegParams.pChParams, DefaultChannels915, sizeof(DefaultChannels915) );
    9584:	2290      	movs	r2, #144	; 0x90
    9586:	4920      	ldr	r1, [pc, #128]	; (9608 <LORAReg_InitNA+0x210>)
    9588:	4b20      	ldr	r3, [pc, #128]	; (960c <LORAReg_InitNA+0x214>)
    958a:	4698      	mov	r8, r3
    958c:	4798      	blx	r3
	memcpy (RegParams.pDrParams, DefaultDrParamsNA, sizeof(DefaultDrParamsNA) );
    958e:	2270      	movs	r2, #112	; 0x70
    9590:	491f      	ldr	r1, [pc, #124]	; (9610 <LORAReg_InitNA+0x218>)
    9592:	0030      	movs	r0, r6
    9594:	47c0      	blx	r8
	RegParams.cmnParams.paramsType1.alternativeChannel = 0;
    9596:	23ab      	movs	r3, #171	; 0xab
    9598:	005b      	lsls	r3, r3, #1
    959a:	54e5      	strb	r5, [r4, r3]
	RegParams.regParamItems.fileid = PDS_FILE_REG_NA_03_IDX;
    959c:	4b1d      	ldr	r3, [pc, #116]	; (9614 <LORAReg_InitNA+0x21c>)
    959e:	54e7      	strb	r7, [r4, r3]
	RegParams.regParamItems.ch_param_1_item_id = PDS_REG_NA_CH_PARAM;
    95a0:	2200      	movs	r2, #0
    95a2:	4b1d      	ldr	r3, [pc, #116]	; (9618 <LORAReg_InitNA+0x220>)
    95a4:	54e2      	strb	r2, [r4, r3]
    95a6:	18e3      	adds	r3, r4, r3
    95a8:	465a      	mov	r2, fp
    95aa:	705a      	strb	r2, [r3, #1]
	RegParams.regParamItems.ch_param_2_item_id = 0;
    95ac:	2200      	movs	r2, #0
    95ae:	2384      	movs	r3, #132	; 0x84
    95b0:	009b      	lsls	r3, r3, #2
    95b2:	54e2      	strb	r2, [r4, r3]
    95b4:	18e3      	adds	r3, r4, r3
    95b6:	705a      	strb	r2, [r3, #1]
	RegParams.regParamItems.band_item_id = 0;
    95b8:	4b18      	ldr	r3, [pc, #96]	; (961c <LORAReg_InitNA+0x224>)
    95ba:	54e2      	strb	r2, [r4, r3]
    95bc:	18e3      	adds	r3, r4, r3
    95be:	705a      	strb	r2, [r3, #1]
	RegParams.regParamItems.lastUsedSB = PDS_REG_NA_LAST_USED_SB;
    95c0:	2383      	movs	r3, #131	; 0x83
    95c2:	009b      	lsls	r3, r3, #2
    95c4:	2201      	movs	r2, #1
    95c6:	54e2      	strb	r2, [r4, r3]
    95c8:	469c      	mov	ip, r3
    95ca:	4464      	add	r4, ip
    95cc:	465b      	mov	r3, fp
    95ce:	7063      	strb	r3, [r4, #1]
	filemarks.fileMarkListAddr = aRegNaPdsOps;
    95d0:	ab04      	add	r3, sp, #16
	filemarks.numItems =  (uint8_t)(PDS_REG_NA_MAX_VALUE & 0x00FF);
    95d2:	711f      	strb	r7, [r3, #4]
	filemarks.fIDcb = LorawanReg_NA_Pds_Cb;
    95d4:	4a12      	ldr	r2, [pc, #72]	; (9620 <LORAReg_InitNA+0x228>)
	PDS_RegFile(PDS_FILE_REG_NA_03_IDX,filemarks);
    95d6:	9200      	str	r2, [sp, #0]
    95d8:	4912      	ldr	r1, [pc, #72]	; (9624 <LORAReg_InitNA+0x22c>)
    95da:	9a05      	ldr	r2, [sp, #20]
    95dc:	4b12      	ldr	r3, [pc, #72]	; (9628 <LORAReg_InitNA+0x230>)
    95de:	2002      	movs	r0, #2
    95e0:	4c12      	ldr	r4, [pc, #72]	; (962c <LORAReg_InitNA+0x234>)
    95e2:	47a0      	blx	r4
    LORAREG_InitGetAttrFnPtrsNA();
    95e4:	4b12      	ldr	r3, [pc, #72]	; (9630 <LORAReg_InitNA+0x238>)
    95e6:	4798      	blx	r3
	LORAREG_InitValidateAttrFnPtrsNA();
    95e8:	4b12      	ldr	r3, [pc, #72]	; (9634 <LORAReg_InitNA+0x23c>)
    95ea:	4798      	blx	r3
	LORAREG_InitSetAttrFnPtrsNA();
    95ec:	4b12      	ldr	r3, [pc, #72]	; (9638 <LORAReg_InitNA+0x240>)
    95ee:	4798      	blx	r3
}
    95f0:	2008      	movs	r0, #8
    95f2:	b009      	add	sp, #36	; 0x24
    95f4:	bc3c      	pop	{r2, r3, r4, r5}
    95f6:	4690      	mov	r8, r2
    95f8:	4699      	mov	r9, r3
    95fa:	46a2      	mov	sl, r4
    95fc:	46ab      	mov	fp, r5
    95fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9600:	200024d0 	.word	0x200024d0
    9604:	200024cc 	.word	0x200024cc
    9608:	0001fff0 	.word	0x0001fff0
    960c:	00019d11 	.word	0x00019d11
    9610:	00020080 	.word	0x00020080
    9614:	0000020b 	.word	0x0000020b
    9618:	0000020e 	.word	0x0000020e
    961c:	00000212 	.word	0x00000212
    9620:	000093f5 	.word	0x000093f5
    9624:	200022c8 	.word	0x200022c8
    9628:	000200f0 	.word	0x000200f0
    962c:	0000e2c5 	.word	0x0000e2c5
    9630:	0000c961 	.word	0x0000c961
    9634:	0000d241 	.word	0x0000d241
    9638:	0000d529 	.word	0x0000d529

0000963c <InValidGetAttr>:
/****************************** FUNCTIONS *************************************/

StackRetStatus_t InValidGetAttr(LorawanRegionalAttributes_t attr, void * attrInput, void * attrOutput)
{
	return LORAWAN_INVALID_REQUEST;
}
    963c:	2015      	movs	r0, #21
    963e:	4770      	bx	lr

00009640 <InValidAttr>:

StackRetStatus_t InValidAttr(LorawanRegionalAttributes_t attr, void * attrInput)
{
	return LORAWAN_INVALID_REQUEST;
}
    9640:	2015      	movs	r0, #21
    9642:	4770      	bx	lr

00009644 <LORAREG_GetAttr_MaxChannel>:
#endif


static StackRetStatus_t LORAREG_GetAttr_MaxChannel(LorawanRegionalAttributes_t attr, void *attrInput, void *attrOutput)
{
	*(uint8_t *)attrOutput = RegParams.maxChannels;
    9644:	232a      	movs	r3, #42	; 0x2a
    9646:	4902      	ldr	r1, [pc, #8]	; (9650 <LORAREG_GetAttr_MaxChannel+0xc>)
    9648:	5ccb      	ldrb	r3, [r1, r3]
    964a:	7013      	strb	r3, [r2, #0]
	return LORAWAN_SUCCESS;
}
    964c:	2008      	movs	r0, #8
    964e:	4770      	bx	lr
    9650:	200024d0 	.word	0x200024d0

00009654 <LORAREG_GetAttr_MinNewChIndex>:


static StackRetStatus_t LORAREG_GetAttr_MinNewChIndex(LorawanRegionalAttributes_t attr, void *attrInput, void *attrOutput)
{
	StackRetStatus_t result = LORAWAN_SUCCESS;
	*(uint8_t *)attrOutput = (uint8_t)RegParams.MinNewChIndex;
    9654:	4905      	ldr	r1, [pc, #20]	; (966c <LORAREG_GetAttr_MinNewChIndex+0x18>)
    9656:	2321      	movs	r3, #33	; 0x21
    9658:	5cc8      	ldrb	r0, [r1, r3]
    965a:	7010      	strb	r0, [r2, #0]
	if(RegParams.MinNewChIndex == 0xFF)
    965c:	5ccb      	ldrb	r3, [r1, r3]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    965e:	2008      	movs	r0, #8
	if(RegParams.MinNewChIndex == 0xFF)
    9660:	2bff      	cmp	r3, #255	; 0xff
    9662:	d000      	beq.n	9666 <LORAREG_GetAttr_MinNewChIndex+0x12>
	{
		result = LORAWAN_INVALID_PARAMETER;
	}
	
	return result;
}
    9664:	4770      	bx	lr
		result = LORAWAN_INVALID_PARAMETER;
    9666:	3002      	adds	r0, #2
    9668:	e7fc      	b.n	9664 <LORAREG_GetAttr_MinNewChIndex+0x10>
    966a:	46c0      	nop			; (mov r8, r8)
    966c:	200024d0 	.word	0x200024d0

00009670 <LORAREG_GetAttr_DefRx1DataRate>:
}
#endif

static StackRetStatus_t LORAREG_GetAttr_DefRx1DataRate(LorawanRegionalAttributes_t attr, void *attrInput, void *attrOutput)
{
	*(uint8_t *)attrOutput = RegParams.DefRx1DataRate;
    9670:	2322      	movs	r3, #34	; 0x22
    9672:	4902      	ldr	r1, [pc, #8]	; (967c <LORAREG_GetAttr_DefRx1DataRate+0xc>)
    9674:	5ccb      	ldrb	r3, [r1, r3]
    9676:	7013      	strb	r3, [r2, #0]
	return LORAWAN_SUCCESS;
}
    9678:	2008      	movs	r0, #8
    967a:	4770      	bx	lr
    967c:	200024d0 	.word	0x200024d0

00009680 <LORAREG_GetAttr_DefRx2DataRate>:

static StackRetStatus_t LORAREG_GetAttr_DefRx2DataRate(LorawanRegionalAttributes_t attr, void *attrInput, void *attrOutput)
{
	*(uint8_t *)attrOutput = RegParams.DefRx2DataRate;
    9680:	2323      	movs	r3, #35	; 0x23
    9682:	4902      	ldr	r1, [pc, #8]	; (968c <LORAREG_GetAttr_DefRx2DataRate+0xc>)
    9684:	5ccb      	ldrb	r3, [r1, r3]
    9686:	7013      	strb	r3, [r2, #0]
	return LORAWAN_SUCCESS;
}
    9688:	2008      	movs	r0, #8
    968a:	4770      	bx	lr
    968c:	200024d0 	.word	0x200024d0

00009690 <LORAREG_GetAttr_RegFeatures>:
	return LORAWAN_SUCCESS;
}

static StackRetStatus_t LORAREG_GetAttr_RegFeatures(LorawanRegionalAttributes_t attr, void *attrInput, void *attrOutput)
{
	*(uint32_t *)attrOutput = RegParams.FeaturesSupport;
    9690:	2320      	movs	r3, #32
    9692:	4902      	ldr	r1, [pc, #8]	; (969c <LORAREG_GetAttr_RegFeatures+0xc>)
    9694:	5ccb      	ldrb	r3, [r1, r3]
    9696:	6013      	str	r3, [r2, #0]
	return LORAWAN_SUCCESS;
}
    9698:	2008      	movs	r0, #8
    969a:	4770      	bx	lr
    969c:	200024d0 	.word	0x200024d0

000096a0 <LORAREG_GetAttr_DataRange>:

static StackRetStatus_t LORAREG_GetAttr_DataRange(LorawanRegionalAttributes_t attr, void *attrInput, void *attrOutput)
{
    96a0:	b530      	push	{r4, r5, lr}
    96a2:	b083      	sub	sp, #12
    96a4:	0015      	movs	r5, r2
	StackRetStatus_t result = LORAWAN_SUCCESS;
	uint8_t  channelId;
	ValChId_t valChid;
	valChid.channelIndex = *(uint8_t *)attrInput;
    96a6:	780c      	ldrb	r4, [r1, #0]
    96a8:	a901      	add	r1, sp, #4
    96aa:	700c      	strb	r4, [r1, #0]
	valChid.allowedForDefaultChannels = ALL_CHANNELS;
    96ac:	2301      	movs	r3, #1
    96ae:	704b      	strb	r3, [r1, #1]
	channelId = *(uint8_t *)attrInput;
	if (pValidateAttr[CHANNEL_ID](CHANNEL_ID, &valChid) == LORAWAN_SUCCESS)
    96b0:	4b0d      	ldr	r3, [pc, #52]	; (96e8 <LORAREG_GetAttr_DataRange+0x48>)
    96b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    96b4:	2015      	movs	r0, #21
    96b6:	4798      	blx	r3
    96b8:	2808      	cmp	r0, #8
    96ba:	d004      	beq.n	96c6 <LORAREG_GetAttr_DataRange+0x26>
	{
	    *(uint8_t *)attrOutput = RegParams.pChParams[channelId].dataRange.value;
	}
	else
	{
		*(uint8_t *)attrOutput = 0xFF;
    96bc:	23ff      	movs	r3, #255	; 0xff
    96be:	702b      	strb	r3, [r5, #0]
	    result = LORAWAN_INVALID_PARAMETER;
    96c0:	200a      	movs	r0, #10
	}
	return result;
}
    96c2:	b003      	add	sp, #12
    96c4:	bd30      	pop	{r4, r5, pc}
	    *(uint8_t *)attrOutput = RegParams.pChParams[channelId].dataRange.value;
    96c6:	4909      	ldr	r1, [pc, #36]	; (96ec <LORAREG_GetAttr_DataRange+0x4c>)
    96c8:	790b      	ldrb	r3, [r1, #4]
    96ca:	794a      	ldrb	r2, [r1, #5]
    96cc:	0212      	lsls	r2, r2, #8
    96ce:	4313      	orrs	r3, r2
    96d0:	798a      	ldrb	r2, [r1, #6]
    96d2:	0412      	lsls	r2, r2, #16
    96d4:	431a      	orrs	r2, r3
    96d6:	79cb      	ldrb	r3, [r1, #7]
    96d8:	061b      	lsls	r3, r3, #24
    96da:	431a      	orrs	r2, r3
    96dc:	0063      	lsls	r3, r4, #1
    96de:	189b      	adds	r3, r3, r2
    96e0:	785b      	ldrb	r3, [r3, #1]
    96e2:	702b      	strb	r3, [r5, #0]
    96e4:	e7ed      	b.n	96c2 <LORAREG_GetAttr_DataRange+0x22>
    96e6:	46c0      	nop			; (mov r8, r8)
    96e8:	20000e64 	.word	0x20000e64
    96ec:	200024d0 	.word	0x200024d0

000096f0 <LORAREG_GetAttr_ChIdStatus>:
}
#endif


static StackRetStatus_t LORAREG_GetAttr_ChIdStatus(LorawanRegionalAttributes_t attr, void *attrInput, void *attrOutput)
{
    96f0:	b530      	push	{r4, r5, lr}
    96f2:	b083      	sub	sp, #12
    96f4:	0015      	movs	r5, r2
	StackRetStatus_t result = LORAWAN_SUCCESS;
	ValChId_t val_chid;
	uint8_t  channelId;
	channelId = *(uint8_t *)attrInput;
    96f6:	780c      	ldrb	r4, [r1, #0]
	val_chid.channelIndex = *(uint8_t *)attrInput;
    96f8:	a901      	add	r1, sp, #4
    96fa:	700c      	strb	r4, [r1, #0]
	val_chid.allowedForDefaultChannels = ALL_CHANNELS;
    96fc:	2301      	movs	r3, #1
    96fe:	704b      	strb	r3, [r1, #1]
	
	if (pValidateAttr[CHANNEL_ID](CHANNEL_ID, &val_chid) == LORAWAN_SUCCESS)
    9700:	4b0c      	ldr	r3, [pc, #48]	; (9734 <LORAREG_GetAttr_ChIdStatus+0x44>)
    9702:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    9704:	2015      	movs	r0, #21
    9706:	4798      	blx	r3
    9708:	2808      	cmp	r0, #8
    970a:	d004      	beq.n	9716 <LORAREG_GetAttr_ChIdStatus+0x26>
	{
		*(uint8_t *)attrOutput = RegParams.pChParams[channelId].status;
	}
	else
	{
		*(uint8_t *)attrOutput = DISABLED;
    970c:	2300      	movs	r3, #0
    970e:	702b      	strb	r3, [r5, #0]
		result = LORAWAN_INVALID_PARAMETER;
    9710:	200a      	movs	r0, #10
	}
	return result;
}
    9712:	b003      	add	sp, #12
    9714:	bd30      	pop	{r4, r5, pc}
		*(uint8_t *)attrOutput = RegParams.pChParams[channelId].status;
    9716:	4908      	ldr	r1, [pc, #32]	; (9738 <LORAREG_GetAttr_ChIdStatus+0x48>)
    9718:	790a      	ldrb	r2, [r1, #4]
    971a:	794b      	ldrb	r3, [r1, #5]
    971c:	021b      	lsls	r3, r3, #8
    971e:	4313      	orrs	r3, r2
    9720:	798a      	ldrb	r2, [r1, #6]
    9722:	0412      	lsls	r2, r2, #16
    9724:	4313      	orrs	r3, r2
    9726:	79ca      	ldrb	r2, [r1, #7]
    9728:	0612      	lsls	r2, r2, #24
    972a:	431a      	orrs	r2, r3
    972c:	0064      	lsls	r4, r4, #1
    972e:	5ca3      	ldrb	r3, [r4, r2]
    9730:	702b      	strb	r3, [r5, #0]
    9732:	e7ee      	b.n	9712 <LORAREG_GetAttr_ChIdStatus+0x22>
    9734:	20000e64 	.word	0x20000e64
    9738:	200024d0 	.word	0x200024d0

0000973c <LORAREG_GetAttr_DutyCycleT1>:

#if (NA_BAND == 1 || AU_BAND == 1)
static StackRetStatus_t LORAREG_GetAttr_DutyCycleT1(LorawanRegionalAttributes_t attr, void *attrInput, void *attrOutput)
{
	*(uint16_t *)attrOutput = UINT16_MAX;
    973c:	2301      	movs	r3, #1
    973e:	425b      	negs	r3, r3
    9740:	8013      	strh	r3, [r2, #0]
	return LORAWAN_INVALID_PARAMETER;
}
    9742:	200a      	movs	r0, #10
    9744:	4770      	bx	lr

00009746 <LORAREG_GetAttr_MinDutyCycleTimer>:
#endif

#if (NA_BAND == 1 || AU_BAND == 1)
static StackRetStatus_t LORAREG_GetAttr_MinDutyCycleTimer(LorawanRegionalAttributes_t attr, void *attrInput, void *attrOutput)
{
	*(uint32_t *)attrOutput = UINT32_MAX;
    9746:	2301      	movs	r3, #1
    9748:	425b      	negs	r3, r3
    974a:	6013      	str	r3, [r2, #0]
	return LORAWAN_INVALID_PARAMETER;
}
    974c:	200a      	movs	r0, #10
    974e:	4770      	bx	lr

00009750 <LORAREG_GetAttr_MacRecvDelay1>:
#endif

static StackRetStatus_t LORAREG_GetAttr_MacRecvDelay1(LorawanRegionalAttributes_t attr, void *attrInput, void *attrOutput)
{
	*(uint16_t *)attrOutput = RECEIVE_DELAY1;
    9750:	23fa      	movs	r3, #250	; 0xfa
    9752:	009b      	lsls	r3, r3, #2
    9754:	8013      	strh	r3, [r2, #0]
	return LORAWAN_SUCCESS;
}
    9756:	2008      	movs	r0, #8
    9758:	4770      	bx	lr

0000975a <LORAREG_GetAttr_MacRecvDelay2>:

static StackRetStatus_t LORAREG_GetAttr_MacRecvDelay2(LorawanRegionalAttributes_t attr, void *attrInput, void *attrOutput)
{
	*(uint16_t *)attrOutput = RECEIVE_DELAY2;
    975a:	23fa      	movs	r3, #250	; 0xfa
    975c:	00db      	lsls	r3, r3, #3
    975e:	8013      	strh	r3, [r2, #0]
	return LORAWAN_SUCCESS;
}
    9760:	2008      	movs	r0, #8
    9762:	4770      	bx	lr

00009764 <LORAREG_GetAttr_MacJoinAcptDelay1>:

static StackRetStatus_t LORAREG_GetAttr_MacJoinAcptDelay1(LorawanRegionalAttributes_t attr, void *attrInput, void *attrOutput)
{
	*(uint16_t *)attrOutput = JOIN_ACCEPT_DELAY1;
    9764:	4b01      	ldr	r3, [pc, #4]	; (976c <LORAREG_GetAttr_MacJoinAcptDelay1+0x8>)
    9766:	8013      	strh	r3, [r2, #0]
	return LORAWAN_SUCCESS;
}
    9768:	2008      	movs	r0, #8
    976a:	4770      	bx	lr
    976c:	00001388 	.word	0x00001388

00009770 <LORAREG_GetAttr_MacJoinAcptDelay2>:

static StackRetStatus_t LORAREG_GetAttr_MacJoinAcptDelay2(LorawanRegionalAttributes_t attr, void *attrInput, void *attrOutput)
{
	*(uint16_t *)attrOutput = JOIN_ACCEPT_DELAY2;
    9770:	4b01      	ldr	r3, [pc, #4]	; (9778 <LORAREG_GetAttr_MacJoinAcptDelay2+0x8>)
    9772:	8013      	strh	r3, [r2, #0]
	return LORAWAN_SUCCESS;
}
    9774:	2008      	movs	r0, #8
    9776:	4770      	bx	lr
    9778:	00001770 	.word	0x00001770

0000977c <LORAREG_GetAttr_MacAckTimeout>:

static StackRetStatus_t LORAREG_GetAttr_MacAckTimeout(LorawanRegionalAttributes_t attr, void *attrInput, void *attrOutput)
{
	*(uint16_t *)attrOutput = ACK_TIMEOUT;
    977c:	23fa      	movs	r3, #250	; 0xfa
    977e:	00db      	lsls	r3, r3, #3
    9780:	8013      	strh	r3, [r2, #0]
	return LORAWAN_SUCCESS;
}
    9782:	2008      	movs	r0, #8
    9784:	4770      	bx	lr

00009786 <LORAREG_GetAttr_MacAdrAckDelay>:

static StackRetStatus_t LORAREG_GetAttr_MacAdrAckDelay(LorawanRegionalAttributes_t attr, void *attrInput, void *attrOutput)
{
	*(uint8_t *)attrOutput = ADR_ACK_DELAY;
    9786:	2320      	movs	r3, #32
    9788:	7013      	strb	r3, [r2, #0]
	return LORAWAN_SUCCESS;
}
    978a:	2008      	movs	r0, #8
    978c:	4770      	bx	lr

0000978e <LORAREG_GetAttr_MacAdrAckLimit>:

static StackRetStatus_t LORAREG_GetAttr_MacAdrAckLimit(LorawanRegionalAttributes_t attr, void *attrInput, void *attrOutput)
{
	*(uint8_t *)attrOutput = ADR_ACK_LIMIT;
    978e:	2340      	movs	r3, #64	; 0x40
    9790:	7013      	strb	r3, [r2, #0]
	return LORAWAN_SUCCESS;
}
    9792:	2008      	movs	r0, #8
    9794:	4770      	bx	lr

00009796 <LORAREG_GetAttr_MacMaxFcntGap>:

static StackRetStatus_t LORAREG_GetAttr_MacMaxFcntGap(LorawanRegionalAttributes_t attr, void *attrInput, void *attrOutput)
{
	*(uint16_t *)attrOutput = MAX_FCNT_GAP;
    9796:	2380      	movs	r3, #128	; 0x80
    9798:	01db      	lsls	r3, r3, #7
    979a:	8013      	strh	r3, [r2, #0]
	return LORAWAN_SUCCESS;
}
    979c:	2008      	movs	r0, #8
    979e:	4770      	bx	lr

000097a0 <LORAREG_GetAttr_RegDefTxPwr>:

static StackRetStatus_t LORAREG_GetAttr_RegDefTxPwr(LorawanRegionalAttributes_t attr, void *attrInput, void *attrOutput)
{
	*(uint8_t *)attrOutput = RegParams.MacTxPower;
    97a0:	2327      	movs	r3, #39	; 0x27
    97a2:	4902      	ldr	r1, [pc, #8]	; (97ac <LORAREG_GetAttr_RegDefTxPwr+0xc>)
    97a4:	5ccb      	ldrb	r3, [r1, r3]
    97a6:	7013      	strb	r3, [r2, #0]
	return LORAWAN_SUCCESS;
}
    97a8:	2008      	movs	r0, #8
    97aa:	4770      	bx	lr
    97ac:	200024d0 	.word	0x200024d0

000097b0 <LORAREG_GetAttr_RegDefTxDR>:

static StackRetStatus_t LORAREG_GetAttr_RegDefTxDR(LorawanRegionalAttributes_t attr, void *attrInput, void *attrOutput)
{
	*(uint8_t *)attrOutput = RegParams.TxCurDataRate;
    97b0:	2326      	movs	r3, #38	; 0x26
    97b2:	4902      	ldr	r1, [pc, #8]	; (97bc <LORAREG_GetAttr_RegDefTxDR+0xc>)
    97b4:	5ccb      	ldrb	r3, [r1, r3]
    97b6:	7013      	strb	r3, [r2, #0]
	return LORAWAN_SUCCESS;
}
    97b8:	2008      	movs	r0, #8
    97ba:	4770      	bx	lr
    97bc:	200024d0 	.word	0x200024d0

000097c0 <LORAREG_GetAttr_CurChIndx>:

static StackRetStatus_t LORAREG_GetAttr_CurChIndx(LorawanRegionalAttributes_t attr, void *attrInput, void *attrOutput)
{
	*(uint8_t *)attrOutput = RegParams.lastUsedChannelIndex;
    97c0:	232f      	movs	r3, #47	; 0x2f
    97c2:	4902      	ldr	r1, [pc, #8]	; (97cc <LORAREG_GetAttr_CurChIndx+0xc>)
    97c4:	5ccb      	ldrb	r3, [r1, r3]
    97c6:	7013      	strb	r3, [r2, #0]
	return LORAWAN_SUCCESS;
}
    97c8:	2008      	movs	r0, #8
    97ca:	4770      	bx	lr
    97cc:	200024d0 	.word	0x200024d0

000097d0 <LORAREG_GetAttr_DefLBTParams>:
static StackRetStatus_t LORAREG_GetAttr_DefLBTParams(LorawanRegionalAttributes_t attr, void *attrInput, void *attrOutput)
{
	LorawanLBTParams_t* lorawanLBTParams;
	lorawanLBTParams = (LorawanLBTParams_t *)attrOutput;
			
	lorawanLBTParams->lbtNumOfSamples	= RegParams.cmnParams.paramsType2.LBT_RSSISamplesCount;
    97d0:	4b09      	ldr	r3, [pc, #36]	; (97f8 <LORAREG_GetAttr_DefLBTParams+0x28>)
    97d2:	21c0      	movs	r1, #192	; 0xc0
    97d4:	31ff      	adds	r1, #255	; 0xff
    97d6:	5c59      	ldrb	r1, [r3, r1]
    97d8:	7191      	strb	r1, [r2, #6]
	lorawanLBTParams->lbtScanPeriod		= RegParams.cmnParams.paramsType2.LBTScanPeriod;
    97da:	21be      	movs	r1, #190	; 0xbe
    97dc:	31ff      	adds	r1, #255	; 0xff
    97de:	5c59      	ldrb	r1, [r3, r1]
    97e0:	8011      	strh	r1, [r2, #0]
	lorawanLBTParams->lbtThreshold		= RegParams.cmnParams.paramsType2.LBTSignalThreshold;
    97e2:	21df      	movs	r1, #223	; 0xdf
    97e4:	0049      	lsls	r1, r1, #1
    97e6:	565b      	ldrsb	r3, [r3, r1]
    97e8:	8053      	strh	r3, [r2, #2]
	lorawanLBTParams->lbtTransmitOn		= LBT_ENABLE;
    97ea:	2301      	movs	r3, #1
    97ec:	71d3      	strb	r3, [r2, #7]
	lorawanLBTParams->maxRetryChannels	= LBT_MAX_RETRY_CHANNELS;
    97ee:	3304      	adds	r3, #4
    97f0:	8093      	strh	r3, [r2, #4]
	return 0;
}
    97f2:	2000      	movs	r0, #0
    97f4:	4770      	bx	lr
    97f6:	46c0      	nop			; (mov r8, r8)
    97f8:	200024d0 	.word	0x200024d0

000097fc <LORAREG_GetAttr_FreqT1>:
{
    97fc:	b530      	push	{r4, r5, lr}
	channelId = *(uint8_t *)attrInput;
    97fe:	780b      	ldrb	r3, [r1, #0]
	if(channelId > RegParams.maxChannels)
    9800:	212a      	movs	r1, #42	; 0x2a
    9802:	4820      	ldr	r0, [pc, #128]	; (9884 <LORAREG_GetAttr_FreqT1+0x88>)
    9804:	5641      	ldrsb	r1, [r0, r1]
		return LORAWAN_INVALID_PARAMETER;
    9806:	200a      	movs	r0, #10
	if(channelId > RegParams.maxChannels)
    9808:	428b      	cmp	r3, r1
    980a:	dc39      	bgt.n	9880 <LORAREG_GetAttr_FreqT1+0x84>
	if (channelId < RegParams.cmnParams.paramsType1.Max_125khzChan)
    980c:	2054      	movs	r0, #84	; 0x54
    980e:	30ff      	adds	r0, #255	; 0xff
    9810:	4c1c      	ldr	r4, [pc, #112]	; (9884 <LORAREG_GetAttr_FreqT1+0x88>)
    9812:	5c24      	ldrb	r4, [r4, r0]
    9814:	42a3      	cmp	r3, r4
    9816:	d31c      	bcc.n	9852 <LORAREG_GetAttr_FreqT1+0x56>
		result = LORAWAN_INVALID_PARAMETER;
    9818:	200a      	movs	r0, #10
	else if ( (channelId < RegParams.maxChannels) && (channelId >= RegParams.cmnParams.paramsType1.Max_125khzChan) )
    981a:	428b      	cmp	r3, r1
    981c:	da30      	bge.n	9880 <LORAREG_GetAttr_FreqT1+0x84>
static uint32_t GenerateFrequency2 (uint8_t channelIndex)
{
    uint32_t channelFrequency;

    channelFrequency = RegParams.cmnParams.paramsType1.UpStreamCh64Freq + 
	                   FREQ_1600KHZ * (channelIndex - RegParams.cmnParams.paramsType1.Max_125khzChan);
    981e:	1b1b      	subs	r3, r3, r4
    9820:	4919      	ldr	r1, [pc, #100]	; (9888 <LORAREG_GetAttr_FreqT1+0x8c>)
    9822:	434b      	muls	r3, r1
    channelFrequency = RegParams.cmnParams.paramsType1.UpStreamCh64Freq + 
    9824:	4c17      	ldr	r4, [pc, #92]	; (9884 <LORAREG_GetAttr_FreqT1+0x88>)
    9826:	2148      	movs	r1, #72	; 0x48
    9828:	31ff      	adds	r1, #255	; 0xff
    982a:	5c61      	ldrb	r1, [r4, r1]
    982c:	303f      	adds	r0, #63	; 0x3f
    982e:	30ff      	adds	r0, #255	; 0xff
    9830:	5c20      	ldrb	r0, [r4, r0]
    9832:	0200      	lsls	r0, r0, #8
    9834:	4301      	orrs	r1, r0
    9836:	204a      	movs	r0, #74	; 0x4a
    9838:	30ff      	adds	r0, #255	; 0xff
    983a:	5c20      	ldrb	r0, [r4, r0]
    983c:	0400      	lsls	r0, r0, #16
    983e:	4308      	orrs	r0, r1
    9840:	21a5      	movs	r1, #165	; 0xa5
    9842:	0049      	lsls	r1, r1, #1
    9844:	5c61      	ldrb	r1, [r4, r1]
    9846:	0609      	lsls	r1, r1, #24
    9848:	4301      	orrs	r1, r0
    984a:	1859      	adds	r1, r3, r1
		*(uint32_t *)attrOutput = GenerateFrequency2 (channelId);
    984c:	6011      	str	r1, [r2, #0]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    984e:	2008      	movs	r0, #8
		*(uint32_t *)attrOutput = GenerateFrequency2 (channelId);
    9850:	e016      	b.n	9880 <LORAREG_GetAttr_FreqT1+0x84>
    channelFrequency = RegParams.cmnParams.paramsType1.UpStreamCh0Freq + FREQ_200KHZ * channelIndex;
    9852:	4c0c      	ldr	r4, [pc, #48]	; (9884 <LORAREG_GetAttr_FreqT1+0x88>)
    9854:	2144      	movs	r1, #68	; 0x44
    9856:	31ff      	adds	r1, #255	; 0xff
    9858:	5c61      	ldrb	r1, [r4, r1]
    985a:	380f      	subs	r0, #15
    985c:	5c20      	ldrb	r0, [r4, r0]
    985e:	0200      	lsls	r0, r0, #8
    9860:	4308      	orrs	r0, r1
    9862:	2146      	movs	r1, #70	; 0x46
    9864:	31ff      	adds	r1, #255	; 0xff
    9866:	5c61      	ldrb	r1, [r4, r1]
    9868:	0409      	lsls	r1, r1, #16
    986a:	4308      	orrs	r0, r1
    986c:	21a3      	movs	r1, #163	; 0xa3
    986e:	0049      	lsls	r1, r1, #1
    9870:	5c61      	ldrb	r1, [r4, r1]
    9872:	0609      	lsls	r1, r1, #24
    9874:	4301      	orrs	r1, r0
    9876:	4805      	ldr	r0, [pc, #20]	; (988c <LORAREG_GetAttr_FreqT1+0x90>)
    9878:	4343      	muls	r3, r0
    987a:	18cb      	adds	r3, r1, r3
		*(uint32_t *)attrOutput = GenerateFrequency1 (channelId);
    987c:	6013      	str	r3, [r2, #0]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    987e:	2008      	movs	r0, #8
}
    9880:	bd30      	pop	{r4, r5, pc}
    9882:	46c0      	nop			; (mov r8, r8)
    9884:	200024d0 	.word	0x200024d0
    9888:	00186a00 	.word	0x00186a00
    988c:	00030d40 	.word	0x00030d40

00009890 <ValidateDataRateTxT1>:
{
	StackRetStatus_t result = LORAWAN_SUCCESS;
	
	uint8_t dataRate = *(uint8_t *)attrInput;

	if (dataRate > RegParams.cmnParams.paramsType1.maxTxDR)
    9890:	780a      	ldrb	r2, [r1, #0]
    9892:	23a8      	movs	r3, #168	; 0xa8
    9894:	005b      	lsls	r3, r3, #1
    9896:	4903      	ldr	r1, [pc, #12]	; (98a4 <ValidateDataRateTxT1+0x14>)
    9898:	5ccb      	ldrb	r3, [r1, r3]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    989a:	2008      	movs	r0, #8
	if (dataRate > RegParams.cmnParams.paramsType1.maxTxDR)
    989c:	429a      	cmp	r2, r3
    989e:	d900      	bls.n	98a2 <ValidateDataRateTxT1+0x12>
	{
		result = LORAWAN_INVALID_PARAMETER;
    98a0:	3002      	adds	r0, #2
	}
	
	return result;
}
    98a2:	4770      	bx	lr
    98a4:	200024d0 	.word	0x200024d0

000098a8 <ValidateDataRateTxT2>:
#if (AS_BAND == 1 || JPN_BAND == 1)
static StackRetStatus_t ValidateDataRateTxT2(LorawanRegionalAttributes_t attr, void *attrInput)
{
	StackRetStatus_t result = LORAWAN_SUCCESS;
	
	uint8_t dataRate = *(uint8_t *)attrInput;
    98a8:	780b      	ldrb	r3, [r1, #0]
	
	if(dataRate > RegParams.minDataRate ||
    98aa:	2224      	movs	r2, #36	; 0x24
    98ac:	4908      	ldr	r1, [pc, #32]	; (98d0 <ValidateDataRateTxT2+0x28>)
    98ae:	5c8a      	ldrb	r2, [r1, r2]
	(RegParams.cmnParams.paramsType2.txParams.uplinkDwellTime == 1 && dataRate < RegParams.DefRx1DataRate))
	{
		result = LORAWAN_INVALID_PARAMETER;
    98b0:	200a      	movs	r0, #10
	if(dataRate > RegParams.minDataRate ||
    98b2:	429a      	cmp	r2, r3
    98b4:	d30a      	bcc.n	98cc <ValidateDataRateTxT2+0x24>
	(RegParams.cmnParams.paramsType2.txParams.uplinkDwellTime == 1 && dataRate < RegParams.DefRx1DataRate))
    98b6:	22e1      	movs	r2, #225	; 0xe1
    98b8:	0052      	lsls	r2, r2, #1
    98ba:	5c8a      	ldrb	r2, [r1, r2]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    98bc:	3802      	subs	r0, #2
	if(dataRate > RegParams.minDataRate ||
    98be:	07d2      	lsls	r2, r2, #31
    98c0:	d504      	bpl.n	98cc <ValidateDataRateTxT2+0x24>
	(RegParams.cmnParams.paramsType2.txParams.uplinkDwellTime == 1 && dataRate < RegParams.DefRx1DataRate))
    98c2:	2222      	movs	r2, #34	; 0x22
    98c4:	5c8a      	ldrb	r2, [r1, r2]
    98c6:	429a      	cmp	r2, r3
    98c8:	d900      	bls.n	98cc <ValidateDataRateTxT2+0x24>
		result = LORAWAN_INVALID_PARAMETER;
    98ca:	3002      	adds	r0, #2
	}
	
	return result;
}
    98cc:	4770      	bx	lr
    98ce:	46c0      	nop			; (mov r8, r8)
    98d0:	200024d0 	.word	0x200024d0

000098d4 <ValidateDataRateRxT1>:
#if (NA_BAND == 1 || AU_BAND == 1)
static StackRetStatus_t ValidateDataRateRxT1 (LorawanRegionalAttributes_t attr, void *attrInput)
{
	StackRetStatus_t result = LORAWAN_SUCCESS;
	
	uint8_t dataRate = *(uint8_t *)attrInput;
    98d4:	780b      	ldrb	r3, [r1, #0]

	if((dataRate > RegParams.cmnParams.paramsType1.maxRxDR) || (dataRate < RegParams.cmnParams.paramsType1.minRxDR) )
    98d6:	22a9      	movs	r2, #169	; 0xa9
    98d8:	0052      	lsls	r2, r2, #1
    98da:	4906      	ldr	r1, [pc, #24]	; (98f4 <ValidateDataRateRxT1+0x20>)
    98dc:	5c8a      	ldrb	r2, [r1, r2]
	{
		result = LORAWAN_INVALID_PARAMETER;
    98de:	200a      	movs	r0, #10
	if((dataRate > RegParams.cmnParams.paramsType1.maxRxDR) || (dataRate < RegParams.cmnParams.paramsType1.minRxDR) )
    98e0:	429a      	cmp	r2, r3
    98e2:	d306      	bcc.n	98f2 <ValidateDataRateRxT1+0x1e>
    98e4:	2252      	movs	r2, #82	; 0x52
    98e6:	32ff      	adds	r2, #255	; 0xff
    98e8:	5c8a      	ldrb	r2, [r1, r2]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    98ea:	3802      	subs	r0, #2
	if((dataRate > RegParams.cmnParams.paramsType1.maxRxDR) || (dataRate < RegParams.cmnParams.paramsType1.minRxDR) )
    98ec:	429a      	cmp	r2, r3
    98ee:	d900      	bls.n	98f2 <ValidateDataRateRxT1+0x1e>
		result = LORAWAN_INVALID_PARAMETER;
    98f0:	3002      	adds	r0, #2
	}
	return result;
}
    98f2:	4770      	bx	lr
    98f4:	200024d0 	.word	0x200024d0

000098f8 <ValidateDataRateRxT2>:
#if (AS_BAND == 1 || JPN_BAND == 1)
static StackRetStatus_t ValidateDataRateRxT2 (LorawanRegionalAttributes_t attr, void *attrInput)
{
	StackRetStatus_t result = LORAWAN_SUCCESS;
	
	uint8_t dataRate = *(uint8_t *)attrInput;
    98f8:	780b      	ldrb	r3, [r1, #0]

    if(dataRate > RegParams.minDataRate || (
    98fa:	2224      	movs	r2, #36	; 0x24
    98fc:	4908      	ldr	r1, [pc, #32]	; (9920 <ValidateDataRateRxT2+0x28>)
    98fe:	5c8a      	ldrb	r2, [r1, r2]
	RegParams.cmnParams.paramsType2.txParams.downlinkDwellTime == 1 && dataRate < RegParams.DefRx1DataRate))
	{
		result = LORAWAN_INVALID_PARAMETER;
    9900:	200a      	movs	r0, #10
    if(dataRate > RegParams.minDataRate || (
    9902:	429a      	cmp	r2, r3
    9904:	d30a      	bcc.n	991c <ValidateDataRateRxT2+0x24>
	RegParams.cmnParams.paramsType2.txParams.downlinkDwellTime == 1 && dataRate < RegParams.DefRx1DataRate))
    9906:	22e1      	movs	r2, #225	; 0xe1
    9908:	0052      	lsls	r2, r2, #1
    990a:	5c8a      	ldrb	r2, [r1, r2]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    990c:	3802      	subs	r0, #2
    if(dataRate > RegParams.minDataRate || (
    990e:	0792      	lsls	r2, r2, #30
    9910:	d504      	bpl.n	991c <ValidateDataRateRxT2+0x24>
	RegParams.cmnParams.paramsType2.txParams.downlinkDwellTime == 1 && dataRate < RegParams.DefRx1DataRate))
    9912:	2222      	movs	r2, #34	; 0x22
    9914:	5c8a      	ldrb	r2, [r1, r2]
    9916:	429a      	cmp	r2, r3
    9918:	d900      	bls.n	991c <ValidateDataRateRxT2+0x24>
		result = LORAWAN_INVALID_PARAMETER;
    991a:	3002      	adds	r0, #2
	}

	return result;
}
    991c:	4770      	bx	lr
    991e:	46c0      	nop			; (mov r8, r8)
    9920:	200024d0 	.word	0x200024d0

00009924 <ValidateChannelId>:
{
    StackRetStatus_t result = LORAWAN_SUCCESS;
	
    uint8_t channelId = *(uint8_t *)attrInput;
	
    if (channelId >= RegParams.maxChannels)
    9924:	780a      	ldrb	r2, [r1, #0]
    9926:	232a      	movs	r3, #42	; 0x2a
    9928:	4903      	ldr	r1, [pc, #12]	; (9938 <ValidateChannelId+0x14>)
    992a:	56cb      	ldrsb	r3, [r1, r3]
    StackRetStatus_t result = LORAWAN_SUCCESS;
    992c:	2008      	movs	r0, #8
    if (channelId >= RegParams.maxChannels)
    992e:	429a      	cmp	r2, r3
    9930:	db00      	blt.n	9934 <ValidateChannelId+0x10>
    {
        result = LORAWAN_INVALID_PARAMETER ;
    9932:	3002      	adds	r0, #2
    }
	
    return result;
}
    9934:	4770      	bx	lr
    9936:	46c0      	nop			; (mov r8, r8)
    9938:	200024d0 	.word	0x200024d0

0000993c <ValidateChannelIdT2>:
static StackRetStatus_t ValidateChannelIdT2 (LorawanRegionalAttributes_t attr, void *attrInput)
{
	StackRetStatus_t retVal = LORAWAN_SUCCESS;
	ValChId_t val_chid;
	
	memcpy(&val_chid,attrInput,sizeof(ValChId_t));
    993c:	780b      	ldrb	r3, [r1, #0]
	if((val_chid.channelIndex >= RegParams.maxChannels) || (val_chid.allowedForDefaultChannels == WITHOUT_DEFAULT_CHANNELS &&
    993e:	222a      	movs	r2, #42	; 0x2a
    9940:	4808      	ldr	r0, [pc, #32]	; (9964 <ValidateChannelIdT2+0x28>)
    9942:	5682      	ldrsb	r2, [r0, r2]
	 val_chid.channelIndex < RegParams.cmnParams.paramsType2.minNonDefChId))
	 {
		 retVal = LORAWAN_INVALID_PARAMETER;
    9944:	200a      	movs	r0, #10
	if((val_chid.channelIndex >= RegParams.maxChannels) || (val_chid.allowedForDefaultChannels == WITHOUT_DEFAULT_CHANNELS &&
    9946:	4293      	cmp	r3, r2
    9948:	da0a      	bge.n	9960 <ValidateChannelIdT2+0x24>
    994a:	784a      	ldrb	r2, [r1, #1]
	StackRetStatus_t retVal = LORAWAN_SUCCESS;
    994c:	3802      	subs	r0, #2
	if((val_chid.channelIndex >= RegParams.maxChannels) || (val_chid.allowedForDefaultChannels == WITHOUT_DEFAULT_CHANNELS &&
    994e:	2a00      	cmp	r2, #0
    9950:	d106      	bne.n	9960 <ValidateChannelIdT2+0x24>
	 val_chid.channelIndex < RegParams.cmnParams.paramsType2.minNonDefChId))
    9952:	32c1      	adds	r2, #193	; 0xc1
    9954:	32ff      	adds	r2, #255	; 0xff
	if((val_chid.channelIndex >= RegParams.maxChannels) || (val_chid.allowedForDefaultChannels == WITHOUT_DEFAULT_CHANNELS &&
    9956:	4903      	ldr	r1, [pc, #12]	; (9964 <ValidateChannelIdT2+0x28>)
    9958:	5c8a      	ldrb	r2, [r1, r2]
    995a:	429a      	cmp	r2, r3
    995c:	d900      	bls.n	9960 <ValidateChannelIdT2+0x24>
		 retVal = LORAWAN_INVALID_PARAMETER;
    995e:	3002      	adds	r0, #2
	 }
	 return retVal;
}
    9960:	4770      	bx	lr
    9962:	46c0      	nop			; (mov r8, r8)
    9964:	200024d0 	.word	0x200024d0

00009968 <LORAREG_GetAttr_DutyCycleT2>:
{
    9968:	b530      	push	{r4, r5, lr}
    996a:	b083      	sub	sp, #12
    996c:	0014      	movs	r4, r2
	valChid.channelIndex = *(uint8_t *)attrInput;
    996e:	780d      	ldrb	r5, [r1, #0]
    9970:	a901      	add	r1, sp, #4
    9972:	700d      	strb	r5, [r1, #0]
	valChid.allowedForDefaultChannels = ALL_CHANNELS;
    9974:	2301      	movs	r3, #1
    9976:	704b      	strb	r3, [r1, #1]
    if (ValidateChannelIdT2(CHANNEL_ID, &valChid) == LORAWAN_SUCCESS)
    9978:	2015      	movs	r0, #21
    997a:	4b0b      	ldr	r3, [pc, #44]	; (99a8 <LORAREG_GetAttr_DutyCycleT2+0x40>)
    997c:	4798      	blx	r3
    997e:	2808      	cmp	r0, #8
    9980:	d002      	beq.n	9988 <LORAREG_GetAttr_DutyCycleT2+0x20>
	    result = LORAWAN_INVALID_PARAMETER;
    9982:	200a      	movs	r0, #10
}
    9984:	b003      	add	sp, #12
    9986:	bd30      	pop	{r4, r5, pc}
	    *(uint16_t *)attrOutput = RegParams.cmnParams.paramsType2.subBandDutyCycle[subBandId];
    9988:	4a08      	ldr	r2, [pc, #32]	; (99ac <LORAREG_GetAttr_DutyCycleT2+0x44>)
	    subBandId = RegParams.cmnParams.paramsType2.othChParams[channelId].subBandId;
    998a:	006b      	lsls	r3, r5, #1
    998c:	195b      	adds	r3, r3, r5
    998e:	009b      	lsls	r3, r3, #2
    9990:	18d3      	adds	r3, r2, r3
    9992:	33ab      	adds	r3, #171	; 0xab
	    *(uint16_t *)attrOutput = RegParams.cmnParams.paramsType2.subBandDutyCycle[subBandId];
    9994:	781b      	ldrb	r3, [r3, #0]
    9996:	33d4      	adds	r3, #212	; 0xd4
    9998:	005b      	lsls	r3, r3, #1
    999a:	18d2      	adds	r2, r2, r3
    999c:	7951      	ldrb	r1, [r2, #5]
    999e:	7993      	ldrb	r3, [r2, #6]
    99a0:	021b      	lsls	r3, r3, #8
    99a2:	430b      	orrs	r3, r1
    99a4:	8023      	strh	r3, [r4, #0]
    99a6:	e7ed      	b.n	9984 <LORAREG_GetAttr_DutyCycleT2+0x1c>
    99a8:	0000993d 	.word	0x0000993d
    99ac:	200024d0 	.word	0x200024d0

000099b0 <LORAREG_GetAttr_MinMaxDr>:
{
    99b0:	b5f0      	push	{r4, r5, r6, r7, lr}
    99b2:	4694      	mov	ip, r2
{
	uint8_t i;
	
	// after updating the data range of a channel we need to check if the minimum dataRange has changed or not.
	// The user cannot set the current data rate outside the range of the data range
	uint8_t minDataRate = RegParams.minDataRate;
    99b4:	4b21      	ldr	r3, [pc, #132]	; (9a3c <LORAREG_GetAttr_MinMaxDr+0x8c>)
    99b6:	2124      	movs	r1, #36	; 0x24
    99b8:	5c5c      	ldrb	r4, [r3, r1]
	uint8_t maxDataRate = RegParams.maxDataRate;
    99ba:	3101      	adds	r1, #1
    99bc:	5c5f      	ldrb	r7, [r3, r1]

	for (i = 0; i < RegParams.maxChannels; i++)
    99be:	3105      	adds	r1, #5
    99c0:	565e      	ldrsb	r6, [r3, r1]
    99c2:	2e00      	cmp	r6, #0
    99c4:	dd28      	ble.n	9a18 <LORAREG_GetAttr_MinMaxDr+0x68>
	{
		if ( (RegParams.pChParams[i].dataRange.min < minDataRate) && (RegParams.pChParams[i].status == ENABLED) )
    99c6:	0019      	movs	r1, r3
    99c8:	791d      	ldrb	r5, [r3, #4]
    99ca:	795b      	ldrb	r3, [r3, #5]
    99cc:	021b      	lsls	r3, r3, #8
    99ce:	432b      	orrs	r3, r5
    99d0:	798d      	ldrb	r5, [r1, #6]
    99d2:	042d      	lsls	r5, r5, #16
    99d4:	432b      	orrs	r3, r5
    99d6:	79cd      	ldrb	r5, [r1, #7]
    99d8:	062d      	lsls	r5, r5, #24
    99da:	431d      	orrs	r5, r3
    99dc:	2100      	movs	r1, #0
    99de:	e00b      	b.n	99f8 <LORAREG_GetAttr_MinMaxDr+0x48>
		{
			minDataRate = RegParams.pChParams[i].dataRange.min;
		}
		if ( (RegParams.pChParams[i].dataRange.max > maxDataRate) && (RegParams.pChParams[i].status == ENABLED) )
    99e0:	7843      	ldrb	r3, [r0, #1]
    99e2:	091b      	lsrs	r3, r3, #4
    99e4:	42bb      	cmp	r3, r7
    99e6:	dd03      	ble.n	99f0 <LORAREG_GetAttr_MinMaxDr+0x40>
    99e8:	7800      	ldrb	r0, [r0, #0]
    99ea:	2800      	cmp	r0, #0
    99ec:	d000      	beq.n	99f0 <LORAREG_GetAttr_MinMaxDr+0x40>
		{
			maxDataRate = RegParams.pChParams[i].dataRange.max;
    99ee:	001f      	movs	r7, r3
	for (i = 0; i < RegParams.maxChannels; i++)
    99f0:	3101      	adds	r1, #1
    99f2:	b2c9      	uxtb	r1, r1
    99f4:	42b1      	cmp	r1, r6
    99f6:	da0f      	bge.n	9a18 <LORAREG_GetAttr_MinMaxDr+0x68>
		if ( (RegParams.pChParams[i].dataRange.min < minDataRate) && (RegParams.pChParams[i].status == ENABLED) )
    99f8:	0048      	lsls	r0, r1, #1
    99fa:	1828      	adds	r0, r5, r0
    99fc:	7843      	ldrb	r3, [r0, #1]
    99fe:	071b      	lsls	r3, r3, #28
    9a00:	0f1b      	lsrs	r3, r3, #28
    9a02:	42a3      	cmp	r3, r4
    9a04:	daec      	bge.n	99e0 <LORAREG_GetAttr_MinMaxDr+0x30>
    9a06:	7802      	ldrb	r2, [r0, #0]
    9a08:	2a00      	cmp	r2, #0
    9a0a:	d0f1      	beq.n	99f0 <LORAREG_GetAttr_MinMaxDr+0x40>
			minDataRate = RegParams.pChParams[i].dataRange.min;
    9a0c:	001c      	movs	r4, r3
		if ( (RegParams.pChParams[i].dataRange.max > maxDataRate) && (RegParams.pChParams[i].status == ENABLED) )
    9a0e:	7843      	ldrb	r3, [r0, #1]
    9a10:	091b      	lsrs	r3, r3, #4
    9a12:	42bb      	cmp	r3, r7
    9a14:	dceb      	bgt.n	99ee <LORAREG_GetAttr_MinMaxDr+0x3e>
    9a16:	e7eb      	b.n	99f0 <LORAREG_GetAttr_MinMaxDr+0x40>
		}
	}
	
	if ((RegParams.cmnParams.paramsType2.txParams.uplinkDwellTime == 1) && ((((1 << RegParams.band) & (ISM_ASBAND)) || ((1 << RegParams.band) & (1 << ISM_JPN923))) != 0))
    9a18:	23e1      	movs	r3, #225	; 0xe1
    9a1a:	005b      	lsls	r3, r3, #1
    9a1c:	4907      	ldr	r1, [pc, #28]	; (9a3c <LORAREG_GetAttr_MinMaxDr+0x8c>)
    9a1e:	5ccb      	ldrb	r3, [r1, r3]
    9a20:	07db      	lsls	r3, r3, #31
    9a22:	d506      	bpl.n	9a32 <LORAREG_GetAttr_MinMaxDr+0x82>
    9a24:	232e      	movs	r3, #46	; 0x2e
    9a26:	5cc9      	ldrb	r1, [r1, r3]
    9a28:	4b05      	ldr	r3, [pc, #20]	; (9a40 <LORAREG_GetAttr_MinMaxDr+0x90>)
    9a2a:	410b      	asrs	r3, r1
    9a2c:	07db      	lsls	r3, r3, #31
    9a2e:	d500      	bpl.n	9a32 <LORAREG_GetAttr_MinMaxDr+0x82>
	{
		minDataRate = DR2;
    9a30:	2402      	movs	r4, #2
	memcpy(attrOutput,&minmaxDr,sizeof(MinMaxDr_t));
    9a32:	4663      	mov	r3, ip
    9a34:	701c      	strb	r4, [r3, #0]
    9a36:	705f      	strb	r7, [r3, #1]
}
    9a38:	2008      	movs	r0, #8
    9a3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9a3c:	200024d0 	.word	0x200024d0
    9a40:	00007fe0 	.word	0x00007fe0

00009a44 <ValidateChannelMaskCntl>:
#if (NA_BAND == 1 || AU_BAND == 1)
static StackRetStatus_t ValidateChannelMaskCntl (LorawanRegionalAttributes_t attr, void *attrInput)
{
    StackRetStatus_t result = LORAWAN_SUCCESS;
	
	uint8_t channelMaskCntl = *(uint8_t *)attrInput;
    9a44:	780b      	ldrb	r3, [r1, #0]

    // 5 is RFU for channel mask for US
    if ((channelMaskCntl == 5) || (channelMaskCntl > 7))
    9a46:	2b05      	cmp	r3, #5
    9a48:	d004      	beq.n	9a54 <ValidateChannelMaskCntl+0x10>
    StackRetStatus_t result = LORAWAN_SUCCESS;
    9a4a:	2008      	movs	r0, #8
    if ((channelMaskCntl == 5) || (channelMaskCntl > 7))
    9a4c:	2b07      	cmp	r3, #7
    9a4e:	d900      	bls.n	9a52 <ValidateChannelMaskCntl+0xe>
    {
        result = LORAWAN_INVALID_PARAMETER;
    9a50:	3002      	adds	r0, #2
    }

    return result;
}
    9a52:	4770      	bx	lr
        result = LORAWAN_INVALID_PARAMETER;
    9a54:	200a      	movs	r0, #10
    9a56:	e7fc      	b.n	9a52 <ValidateChannelMaskCntl+0xe>

00009a58 <ValidateTxPower>:
{
	StackRetStatus_t result = LORAWAN_SUCCESS;
	uint8_t txPowerNew = *(uint8_t *)attrInput;
	
	//if ((txPowerNew < 5) || (txPowerNew > 10) || (txPowerNew == 6))
	if (txPowerNew > RegParams.maxTxPwrIndx)
    9a58:	780a      	ldrb	r2, [r1, #0]
    9a5a:	232d      	movs	r3, #45	; 0x2d
    9a5c:	4903      	ldr	r1, [pc, #12]	; (9a6c <ValidateTxPower+0x14>)
    9a5e:	56cb      	ldrsb	r3, [r1, r3]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    9a60:	2008      	movs	r0, #8
	if (txPowerNew > RegParams.maxTxPwrIndx)
    9a62:	429a      	cmp	r2, r3
    9a64:	dd00      	ble.n	9a68 <ValidateTxPower+0x10>
	{
		result = LORAWAN_INVALID_PARAMETER;
    9a66:	3002      	adds	r0, #2
	}

	return result;
}
    9a68:	4770      	bx	lr
    9a6a:	46c0      	nop			; (mov r8, r8)
    9a6c:	200024d0 	.word	0x200024d0

00009a70 <ValidateChannelMask>:
 */
#if (NA_BAND == 1 || AU_BAND == 1)
static StackRetStatus_t ValidateChannelMask (LorawanRegionalAttributes_t attr, void *attrInput)
{
	return LORAWAN_SUCCESS;	
}
    9a70:	2008      	movs	r0, #8
    9a72:	4770      	bx	lr

00009a74 <ValidateChannelMaskT2>:
#endif

#if (EU_BAND == 1 || AS_BAND == 1 || IND_BAND == 1 || JPN_BAND == 1 || KR_BAND == 1)
static StackRetStatus_t ValidateChannelMaskT2 (LorawanRegionalAttributes_t attr, void *attrInput)
{
    9a74:	b530      	push	{r4, r5, lr}
	StackRetStatus_t retVal = LORAWAN_SUCCESS;
	
	uint16_t channelMask = * (uint16_t *)attrInput;
    9a76:	8809      	ldrh	r1, [r1, #0]
	
	if(channelMask != 0x0000U)
    9a78:	2900      	cmp	r1, #0
    9a7a:	d020      	beq.n	9abe <ValidateChannelMaskT2+0x4a>
	{
		for(uint8_t i = 0; i< RegParams.maxChannels;i++)
    9a7c:	232a      	movs	r3, #42	; 0x2a
    9a7e:	4a11      	ldr	r2, [pc, #68]	; (9ac4 <ValidateChannelMaskT2+0x50>)
    9a80:	56d0      	ldrsb	r0, [r2, r3]
    9a82:	2800      	cmp	r0, #0
    9a84:	dd1b      	ble.n	9abe <ValidateChannelMaskT2+0x4a>
		{
			if(((channelMask && BIT0) == BIT0) && ((RegParams.pOtherChParams[i].parametersDefined & (FREQUENCY_DEFINED | DATA_RANGE_DEFINED)) != (FREQUENCY_DEFINED | DATA_RANGE_DEFINED)))
    9a86:	7a14      	ldrb	r4, [r2, #8]
    9a88:	7a53      	ldrb	r3, [r2, #9]
    9a8a:	021b      	lsls	r3, r3, #8
    9a8c:	4323      	orrs	r3, r4
    9a8e:	7a94      	ldrb	r4, [r2, #10]
    9a90:	0424      	lsls	r4, r4, #16
    9a92:	4323      	orrs	r3, r4
    9a94:	7ad4      	ldrb	r4, [r2, #11]
    9a96:	0624      	lsls	r4, r4, #24
    9a98:	431c      	orrs	r4, r3
    9a9a:	2300      	movs	r3, #0
    9a9c:	2503      	movs	r5, #3
    9a9e:	e004      	b.n	9aaa <ValidateChannelMaskT2+0x36>
				retVal = LORAWAN_INVALID_PARAMETER;
				break;
			}
			else
			{
				channelMask = channelMask >> SHIFT1;
    9aa0:	0849      	lsrs	r1, r1, #1
		for(uint8_t i = 0; i< RegParams.maxChannels;i++)
    9aa2:	3301      	adds	r3, #1
    9aa4:	b2db      	uxtb	r3, r3
    9aa6:	4283      	cmp	r3, r0
    9aa8:	da09      	bge.n	9abe <ValidateChannelMaskT2+0x4a>
			if(((channelMask && BIT0) == BIT0) && ((RegParams.pOtherChParams[i].parametersDefined & (FREQUENCY_DEFINED | DATA_RANGE_DEFINED)) != (FREQUENCY_DEFINED | DATA_RANGE_DEFINED)))
    9aaa:	2900      	cmp	r1, #0
    9aac:	d0f8      	beq.n	9aa0 <ValidateChannelMaskT2+0x2c>
    9aae:	005a      	lsls	r2, r3, #1
    9ab0:	18d2      	adds	r2, r2, r3
    9ab2:	0092      	lsls	r2, r2, #2
    9ab4:	18a2      	adds	r2, r4, r2
    9ab6:	7ad2      	ldrb	r2, [r2, #11]
    9ab8:	402a      	ands	r2, r5
    9aba:	2a03      	cmp	r2, #3
    9abc:	d0f0      	beq.n	9aa0 <ValidateChannelMaskT2+0x2c>
		////ChMask can be set to 0 if ChMaskCtrl is set to 6
		return retVal = LORAWAN_SUCCESS;
	}
	
	return retVal;
}
    9abe:	2008      	movs	r0, #8
    9ac0:	bd30      	pop	{r4, r5, pc}
    9ac2:	46c0      	nop			; (mov r8, r8)
    9ac4:	200024d0 	.word	0x200024d0

00009ac8 <ValidateChannelMaskCntlT2>:
#endif

#if (EU_BAND == 1 || AS_BAND == 1 || IND_BAND == 1 || JPN_BAND == 1 || KR_BAND == 1)
static StackRetStatus_t ValidateChannelMaskCntlT2 (LorawanRegionalAttributes_t attr, void *attrInput)
{
	uint8_t channelMaskCntl = * (uint16_t *)attrInput;
    9ac8:	780b      	ldrb	r3, [r1, #0]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    9aca:	2008      	movs	r0, #8
	
    if ( (channelMaskCntl != 0) && (channelMaskCntl != 6) )
    9acc:	2b00      	cmp	r3, #0
    9ace:	d002      	beq.n	9ad6 <ValidateChannelMaskCntlT2+0xe>
    9ad0:	2b06      	cmp	r3, #6
    9ad2:	d001      	beq.n	9ad8 <ValidateChannelMaskCntlT2+0x10>
    {
	    result = LORAWAN_INVALID_PARAMETER;
    9ad4:	3002      	adds	r0, #2
    }
	return result;
}
    9ad6:	4770      	bx	lr
	StackRetStatus_t result = LORAWAN_SUCCESS;
    9ad8:	2008      	movs	r0, #8
    9ada:	e7fc      	b.n	9ad6 <ValidateChannelMaskCntlT2+0xe>

00009adc <ValidateChMaskChCntlT2>:
{
    9adc:	b510      	push	{r4, lr}
    9ade:	b082      	sub	sp, #8
	ValChMaskCntl_t chMaskchCntl = * (ValChMaskCntl_t *)attrInput;
    9ae0:	ac01      	add	r4, sp, #4
    9ae2:	2204      	movs	r2, #4
    9ae4:	0020      	movs	r0, r4
    9ae6:	4b0f      	ldr	r3, [pc, #60]	; (9b24 <ValidateChMaskChCntlT2+0x48>)
    9ae8:	4798      	blx	r3
    if ( chMaskchCntl.chnlMask || chMaskchCntl.chnlMaskCntl )
    9aea:	8863      	ldrh	r3, [r4, #2]
    9aec:	2b00      	cmp	r3, #0
    9aee:	d104      	bne.n	9afa <ValidateChMaskChCntlT2+0x1e>
    9af0:	ab01      	add	r3, sp, #4
    9af2:	781a      	ldrb	r2, [r3, #0]
		return LORAWAN_INVALID_PARAMETER;
    9af4:	230a      	movs	r3, #10
    if ( chMaskchCntl.chnlMask || chMaskchCntl.chnlMaskCntl )
    9af6:	2a00      	cmp	r2, #0
    9af8:	d007      	beq.n	9b0a <ValidateChMaskChCntlT2+0x2e>
		if(((ValidateChannelMaskT2(CHANNEL_MASK, (void *)&chMaskchCntl.chnlMask)) == LORAWAN_SUCCESS) && (ValidateChannelMaskCntlT2(CHANNEL_MASK_CNTL, (void *)&chMaskchCntl.chnlMaskCntl)) == LORAWAN_SUCCESS)
    9afa:	466b      	mov	r3, sp
    9afc:	1d99      	adds	r1, r3, #6
    9afe:	201a      	movs	r0, #26
    9b00:	4b09      	ldr	r3, [pc, #36]	; (9b28 <ValidateChMaskChCntlT2+0x4c>)
    9b02:	4798      	blx	r3
			return LORAWAN_INVALID_PARAMETER;
    9b04:	230a      	movs	r3, #10
		if(((ValidateChannelMaskT2(CHANNEL_MASK, (void *)&chMaskchCntl.chnlMask)) == LORAWAN_SUCCESS) && (ValidateChannelMaskCntlT2(CHANNEL_MASK_CNTL, (void *)&chMaskchCntl.chnlMaskCntl)) == LORAWAN_SUCCESS)
    9b06:	2808      	cmp	r0, #8
    9b08:	d002      	beq.n	9b10 <ValidateChMaskChCntlT2+0x34>
}
    9b0a:	0018      	movs	r0, r3
    9b0c:	b002      	add	sp, #8
    9b0e:	bd10      	pop	{r4, pc}
		if(((ValidateChannelMaskT2(CHANNEL_MASK, (void *)&chMaskchCntl.chnlMask)) == LORAWAN_SUCCESS) && (ValidateChannelMaskCntlT2(CHANNEL_MASK_CNTL, (void *)&chMaskchCntl.chnlMaskCntl)) == LORAWAN_SUCCESS)
    9b10:	a901      	add	r1, sp, #4
    9b12:	3013      	adds	r0, #19
    9b14:	4b05      	ldr	r3, [pc, #20]	; (9b2c <ValidateChMaskChCntlT2+0x50>)
    9b16:	4798      	blx	r3
    9b18:	0003      	movs	r3, r0
    9b1a:	2808      	cmp	r0, #8
    9b1c:	d0f5      	beq.n	9b0a <ValidateChMaskChCntlT2+0x2e>
			return LORAWAN_INVALID_PARAMETER;
    9b1e:	230a      	movs	r3, #10
    9b20:	e7f3      	b.n	9b0a <ValidateChMaskChCntlT2+0x2e>
    9b22:	46c0      	nop			; (mov r8, r8)
    9b24:	00019d11 	.word	0x00019d11
    9b28:	00009a75 	.word	0x00009a75
    9b2c:	00009ac9 	.word	0x00009ac9

00009b30 <ValidateDataRate>:
{
    StackRetStatus_t result = LORAWAN_SUCCESS;
	
	uint8_t dataRate = *(uint8_t *)attrInput;

    if ( dataRate > RegParams.minDataRate )
    9b30:	780a      	ldrb	r2, [r1, #0]
    9b32:	2324      	movs	r3, #36	; 0x24
    9b34:	4903      	ldr	r1, [pc, #12]	; (9b44 <ValidateDataRate+0x14>)
    9b36:	5ccb      	ldrb	r3, [r1, r3]
    StackRetStatus_t result = LORAWAN_SUCCESS;
    9b38:	2008      	movs	r0, #8
    if ( dataRate > RegParams.minDataRate )
    9b3a:	429a      	cmp	r2, r3
    9b3c:	d900      	bls.n	9b40 <ValidateDataRate+0x10>
    {
        result = LORAWAN_INVALID_PARAMETER;
    9b3e:	3002      	adds	r0, #2
    }

    return result;
}
    9b40:	4770      	bx	lr
    9b42:	46c0      	nop			; (mov r8, r8)
    9b44:	200024d0 	.word	0x200024d0

00009b48 <ValidateSupportedDr>:
#endif

static StackRetStatus_t ValidateSupportedDr (LorawanRegionalAttributes_t attr, void *attrInput)
{
    9b48:	b570      	push	{r4, r5, r6, lr}
	StackRetStatus_t result = LORAWAN_INVALID_PARAMETER;
	uint8_t  dataRate;
	dataRate = *(uint8_t *)attrInput;
    9b4a:	780d      	ldrb	r5, [r1, #0]
	
	for(uint8_t i = 0; i <RegParams.maxChannels; i++)
    9b4c:	232a      	movs	r3, #42	; 0x2a
    9b4e:	4a14      	ldr	r2, [pc, #80]	; (9ba0 <ValidateSupportedDr+0x58>)
    9b50:	56d4      	ldrsb	r4, [r2, r3]
    9b52:	2c00      	cmp	r4, #0
    9b54:	dd22      	ble.n	9b9c <ValidateSupportedDr+0x54>
	{
		if(RegParams.pChParams[i].status == ENABLED && dataRate >= RegParams.pChParams[i].dataRange.min &&
    9b56:	7910      	ldrb	r0, [r2, #4]
    9b58:	7953      	ldrb	r3, [r2, #5]
    9b5a:	021b      	lsls	r3, r3, #8
    9b5c:	4303      	orrs	r3, r0
    9b5e:	7990      	ldrb	r0, [r2, #6]
    9b60:	0400      	lsls	r0, r0, #16
    9b62:	4303      	orrs	r3, r0
    9b64:	79d0      	ldrb	r0, [r2, #7]
    9b66:	0600      	lsls	r0, r0, #24
    9b68:	4318      	orrs	r0, r3
    9b6a:	2300      	movs	r3, #0
    9b6c:	002e      	movs	r6, r5
    9b6e:	e003      	b.n	9b78 <ValidateSupportedDr+0x30>
	for(uint8_t i = 0; i <RegParams.maxChannels; i++)
    9b70:	3301      	adds	r3, #1
    9b72:	b2db      	uxtb	r3, r3
    9b74:	42a3      	cmp	r3, r4
    9b76:	da0f      	bge.n	9b98 <ValidateSupportedDr+0x50>
		if(RegParams.pChParams[i].status == ENABLED && dataRate >= RegParams.pChParams[i].dataRange.min &&
    9b78:	005a      	lsls	r2, r3, #1
    9b7a:	1882      	adds	r2, r0, r2
    9b7c:	7811      	ldrb	r1, [r2, #0]
    9b7e:	2900      	cmp	r1, #0
    9b80:	d0f6      	beq.n	9b70 <ValidateSupportedDr+0x28>
    9b82:	7851      	ldrb	r1, [r2, #1]
    9b84:	0709      	lsls	r1, r1, #28
    9b86:	0f09      	lsrs	r1, r1, #28
    9b88:	428d      	cmp	r5, r1
    9b8a:	dbf1      	blt.n	9b70 <ValidateSupportedDr+0x28>
		   dataRate <= RegParams.pChParams[i].dataRange.max)
    9b8c:	7852      	ldrb	r2, [r2, #1]
    9b8e:	0912      	lsrs	r2, r2, #4
		if(RegParams.pChParams[i].status == ENABLED && dataRate >= RegParams.pChParams[i].dataRange.min &&
    9b90:	4296      	cmp	r6, r2
    9b92:	dced      	bgt.n	9b70 <ValidateSupportedDr+0x28>
		{
			result = LORAWAN_SUCCESS;
    9b94:	2008      	movs	r0, #8
    9b96:	e000      	b.n	9b9a <ValidateSupportedDr+0x52>
	StackRetStatus_t result = LORAWAN_INVALID_PARAMETER;
    9b98:	200a      	movs	r0, #10
			break;
		}
	}
	return result;	
}
    9b9a:	bd70      	pop	{r4, r5, r6, pc}
	StackRetStatus_t result = LORAWAN_INVALID_PARAMETER;
    9b9c:	200a      	movs	r0, #10
    9b9e:	e7fc      	b.n	9b9a <ValidateSupportedDr+0x52>
    9ba0:	200024d0 	.word	0x200024d0

00009ba4 <ValidateRxFreqT1>:

#if (NA_BAND == 1 || AU_BAND == 1)
static StackRetStatus_t ValidateRxFreqT1 (LorawanRegionalAttributes_t attr, void *attrInput)
{
    9ba4:	b510      	push	{r4, lr}
	StackRetStatus_t result = LORAWAN_SUCCESS;
	uint32_t FreqNew = *(uint32_t *)attrInput;
	
	if(FreqNew < FREQ_923300KHZ || FreqNew > FREQ_927500KHZ || (FreqNew - FREQ_923300KHZ) % FREQ_600KHZ != 0)
    9ba6:	6808      	ldr	r0, [r1, #0]
    9ba8:	4b07      	ldr	r3, [pc, #28]	; (9bc8 <ValidateRxFreqT1+0x24>)
    9baa:	469c      	mov	ip, r3
    9bac:	4460      	add	r0, ip
    9bae:	4a07      	ldr	r2, [pc, #28]	; (9bcc <ValidateRxFreqT1+0x28>)
	{
		result = LORAWAN_INVALID_PARAMETER;
    9bb0:	230a      	movs	r3, #10
	if(FreqNew < FREQ_923300KHZ || FreqNew > FREQ_927500KHZ || (FreqNew - FREQ_923300KHZ) % FREQ_600KHZ != 0)
    9bb2:	4290      	cmp	r0, r2
    9bb4:	d806      	bhi.n	9bc4 <ValidateRxFreqT1+0x20>
    9bb6:	4906      	ldr	r1, [pc, #24]	; (9bd0 <ValidateRxFreqT1+0x2c>)
    9bb8:	4b06      	ldr	r3, [pc, #24]	; (9bd4 <ValidateRxFreqT1+0x30>)
    9bba:	4798      	blx	r3
	StackRetStatus_t result = LORAWAN_SUCCESS;
    9bbc:	2308      	movs	r3, #8
	if(FreqNew < FREQ_923300KHZ || FreqNew > FREQ_927500KHZ || (FreqNew - FREQ_923300KHZ) % FREQ_600KHZ != 0)
    9bbe:	2900      	cmp	r1, #0
    9bc0:	d000      	beq.n	9bc4 <ValidateRxFreqT1+0x20>
		result = LORAWAN_INVALID_PARAMETER;
    9bc2:	3302      	adds	r3, #2
	}
	return result;
}
    9bc4:	0018      	movs	r0, r3
    9bc6:	bd10      	pop	{r4, pc}
    9bc8:	c8f78f60 	.word	0xc8f78f60
    9bcc:	00401640 	.word	0x00401640
    9bd0:	000927c0 	.word	0x000927c0
    9bd4:	000166b9 	.word	0x000166b9

00009bd8 <ValidateRx1DataRateOffset>:
{
	StackRetStatus_t retVal = LORAWAN_INVALID_PARAMETER;
	
	uint8_t rx1DrOffset = *(uint8_t *)attrInput;
	
	if(rx1DrOffset <= RegParams.Rx1DrOffset)
    9bd8:	780a      	ldrb	r2, [r1, #0]
    9bda:	232c      	movs	r3, #44	; 0x2c
    9bdc:	4903      	ldr	r1, [pc, #12]	; (9bec <ValidateRx1DataRateOffset+0x14>)
    9bde:	56cb      	ldrsb	r3, [r1, r3]
	StackRetStatus_t retVal = LORAWAN_INVALID_PARAMETER;
    9be0:	200a      	movs	r0, #10
	if(rx1DrOffset <= RegParams.Rx1DrOffset)
    9be2:	429a      	cmp	r2, r3
    9be4:	dc00      	bgt.n	9be8 <ValidateRx1DataRateOffset+0x10>
	{
		retVal = LORAWAN_SUCCESS;
    9be6:	3802      	subs	r0, #2
	}
	
	return retVal;
}
    9be8:	4770      	bx	lr
    9bea:	46c0      	nop			; (mov r8, r8)
    9bec:	200024d0 	.word	0x200024d0

00009bf0 <getSubBandId>:
}
#endif

#if (EU_BAND == 1 || AS_BAND == 1 || IND_BAND == 1 || JPN_BAND == 1 || KR_BAND == 1)
static uint8_t getSubBandId(uint32_t frequency)
{
    9bf0:	b530      	push	{r4, r5, lr}
    9bf2:	0004      	movs	r4, r0
	uint8_t subBandId = 0xFF;
#if (EU_BAND == 1)	|| (JPN_BAND == 1)
	for(uint8_t i = 0; i < RegParams.maxSubBands; i++)
    9bf4:	2329      	movs	r3, #41	; 0x29
    9bf6:	4a19      	ldr	r2, [pc, #100]	; (9c5c <getSubBandId+0x6c>)
    9bf8:	5cd5      	ldrb	r5, [r2, r3]
    9bfa:	2d00      	cmp	r5, #0
    9bfc:	d02c      	beq.n	9c58 <getSubBandId+0x68>
	{
		if(frequency >= RegParams.pSubBandParams[i].freqMin && frequency <= RegParams.pSubBandParams[i].freqMax)
    9bfe:	0011      	movs	r1, r2
    9c00:	7b13      	ldrb	r3, [r2, #12]
    9c02:	7b52      	ldrb	r2, [r2, #13]
    9c04:	0212      	lsls	r2, r2, #8
    9c06:	431a      	orrs	r2, r3
    9c08:	7b8b      	ldrb	r3, [r1, #14]
    9c0a:	041b      	lsls	r3, r3, #16
    9c0c:	431a      	orrs	r2, r3
    9c0e:	7bcb      	ldrb	r3, [r1, #15]
    9c10:	061b      	lsls	r3, r3, #24
    9c12:	4313      	orrs	r3, r2
    9c14:	2000      	movs	r0, #0
    9c16:	e004      	b.n	9c22 <getSubBandId+0x32>
	for(uint8_t i = 0; i < RegParams.maxSubBands; i++)
    9c18:	3001      	adds	r0, #1
    9c1a:	b2c0      	uxtb	r0, r0
    9c1c:	330c      	adds	r3, #12
    9c1e:	42a8      	cmp	r0, r5
    9c20:	d018      	beq.n	9c54 <getSubBandId+0x64>
		if(frequency >= RegParams.pSubBandParams[i].freqMin && frequency <= RegParams.pSubBandParams[i].freqMax)
    9c22:	781a      	ldrb	r2, [r3, #0]
    9c24:	7859      	ldrb	r1, [r3, #1]
    9c26:	0209      	lsls	r1, r1, #8
    9c28:	4311      	orrs	r1, r2
    9c2a:	789a      	ldrb	r2, [r3, #2]
    9c2c:	0412      	lsls	r2, r2, #16
    9c2e:	4311      	orrs	r1, r2
    9c30:	78da      	ldrb	r2, [r3, #3]
    9c32:	0612      	lsls	r2, r2, #24
    9c34:	430a      	orrs	r2, r1
    9c36:	42a2      	cmp	r2, r4
    9c38:	d8ee      	bhi.n	9c18 <getSubBandId+0x28>
    9c3a:	791a      	ldrb	r2, [r3, #4]
    9c3c:	7959      	ldrb	r1, [r3, #5]
    9c3e:	0209      	lsls	r1, r1, #8
    9c40:	4311      	orrs	r1, r2
    9c42:	799a      	ldrb	r2, [r3, #6]
    9c44:	0412      	lsls	r2, r2, #16
    9c46:	4311      	orrs	r1, r2
    9c48:	79da      	ldrb	r2, [r3, #7]
    9c4a:	0612      	lsls	r2, r2, #24
    9c4c:	430a      	orrs	r2, r1
    9c4e:	4294      	cmp	r4, r2
    9c50:	d8e2      	bhi.n	9c18 <getSubBandId+0x28>
    9c52:	e000      	b.n	9c56 <getSubBandId+0x66>
	uint8_t subBandId = 0xFF;
    9c54:	20ff      	movs	r0, #255	; 0xff
#elif (AS_BAND == 1)
	// whole ASIA 923 spectrum is one band
	subBandId = 0;
#endif
	return subBandId;
}
    9c56:	bd30      	pop	{r4, r5, pc}
	uint8_t subBandId = 0xFF;
    9c58:	20ff      	movs	r0, #255	; 0xff
    9c5a:	e7fc      	b.n	9c56 <getSubBandId+0x66>
    9c5c:	200024d0 	.word	0x200024d0

00009c60 <ValidateFreq>:
{
    9c60:	b510      	push	{r4, lr}
    if(getSubBandId(frequencyNew) == 0xFF)
    9c62:	6808      	ldr	r0, [r1, #0]
    9c64:	4b04      	ldr	r3, [pc, #16]	; (9c78 <ValidateFreq+0x18>)
    9c66:	4798      	blx	r3
	StackRetStatus_t retVal = LORAWAN_SUCCESS;
    9c68:	2308      	movs	r3, #8
    if(getSubBandId(frequencyNew) == 0xFF)
    9c6a:	28ff      	cmp	r0, #255	; 0xff
    9c6c:	d001      	beq.n	9c72 <ValidateFreq+0x12>
}
    9c6e:	0018      	movs	r0, r3
    9c70:	bd10      	pop	{r4, pc}
		retVal = LORAWAN_INVALID_PARAMETER;
    9c72:	3302      	adds	r3, #2
    9c74:	e7fb      	b.n	9c6e <ValidateFreq+0xe>
    9c76:	46c0      	nop			; (mov r8, r8)
    9c78:	00009bf1 	.word	0x00009bf1

00009c7c <ValidateFrequencyAS>:
 */
#if (AS_BAND == 1)
static StackRetStatus_t ValidateFrequencyAS (LorawanRegionalAttributes_t attr, void *attrInput)
{
	StackRetStatus_t result = LORAWAN_SUCCESS;
	uint32_t frequencyNew = * (uint32_t *)attrInput;
    9c7c:	680b      	ldr	r3, [r1, #0]

    /*Bands Supporting Freq 923-925MHz*/
    if(RegParams.band == ISM_BRN923 || RegParams.band == ISM_CMB923 || RegParams.band == ISM_INS923 || RegParams.band == ISM_LAOS923)
    9c7e:	222e      	movs	r2, #46	; 0x2e
    9c80:	4919      	ldr	r1, [pc, #100]	; (9ce8 <ValidateFrequencyAS+0x6c>)
    9c82:	5c8a      	ldrb	r2, [r1, r2]
    9c84:	1f91      	subs	r1, r2, #6
    9c86:	2903      	cmp	r1, #3
    9c88:	d808      	bhi.n	9c9c <ValidateFrequencyAS+0x20>
	{
		if ( (frequencyNew < FREQ_923000KHZ) || (frequencyNew > FREQ_925000KHZ) )
    9c8a:	4a18      	ldr	r2, [pc, #96]	; (9cec <ValidateFrequencyAS+0x70>)
    9c8c:	4694      	mov	ip, r2
    9c8e:	4463      	add	r3, ip
    9c90:	4a17      	ldr	r2, [pc, #92]	; (9cf0 <ValidateFrequencyAS+0x74>)
	StackRetStatus_t result = LORAWAN_SUCCESS;
    9c92:	2008      	movs	r0, #8
		if ( (frequencyNew < FREQ_923000KHZ) || (frequencyNew > FREQ_925000KHZ) )
    9c94:	4293      	cmp	r3, r2
    9c96:	d900      	bls.n	9c9a <ValidateFrequencyAS+0x1e>
		{
			result = LORAWAN_INVALID_PARAMETER;
    9c98:	3002      	adds	r0, #2
	else
	{
		result = LORAWAN_INVALID_PARAMETER;
	}
	return result;
}
    9c9a:	4770      	bx	lr
	else if(RegParams.band == ISM_NZ923)
    9c9c:	2a0a      	cmp	r2, #10
    9c9e:	d011      	beq.n	9cc4 <ValidateFrequencyAS+0x48>
	else if(RegParams.band == ISM_SP923 || RegParams.band == ISM_THAI923 || RegParams.band == ISM_VTM923)
    9ca0:	2a0b      	cmp	r2, #11
    9ca2:	d018      	beq.n	9cd6 <ValidateFrequencyAS+0x5a>
    9ca4:	0011      	movs	r1, r2
    9ca6:	390d      	subs	r1, #13
    9ca8:	2901      	cmp	r1, #1
    9caa:	d914      	bls.n	9cd6 <ValidateFrequencyAS+0x5a>
		result = LORAWAN_INVALID_PARAMETER;
    9cac:	200a      	movs	r0, #10
	else if(RegParams.band == ISM_TWN923)
    9cae:	2a0c      	cmp	r2, #12
    9cb0:	d1f3      	bne.n	9c9a <ValidateFrequencyAS+0x1e>
		if ( (frequencyNew < FREQ_922000KHZ) || (frequencyNew > FREQ_928000KHZ) )
    9cb2:	4a10      	ldr	r2, [pc, #64]	; (9cf4 <ValidateFrequencyAS+0x78>)
    9cb4:	4694      	mov	ip, r2
    9cb6:	4463      	add	r3, ip
    9cb8:	4a0f      	ldr	r2, [pc, #60]	; (9cf8 <ValidateFrequencyAS+0x7c>)
	StackRetStatus_t result = LORAWAN_SUCCESS;
    9cba:	3802      	subs	r0, #2
		if ( (frequencyNew < FREQ_922000KHZ) || (frequencyNew > FREQ_928000KHZ) )
    9cbc:	4293      	cmp	r3, r2
    9cbe:	d9ec      	bls.n	9c9a <ValidateFrequencyAS+0x1e>
			result = LORAWAN_INVALID_PARAMETER;
    9cc0:	3002      	adds	r0, #2
    9cc2:	e7ea      	b.n	9c9a <ValidateFrequencyAS+0x1e>
		if ( (frequencyNew < FREQ_915000KHZ) || (frequencyNew > FREQ_928000KHZ) )
    9cc4:	4a0d      	ldr	r2, [pc, #52]	; (9cfc <ValidateFrequencyAS+0x80>)
    9cc6:	4694      	mov	ip, r2
    9cc8:	4463      	add	r3, ip
    9cca:	4a0d      	ldr	r2, [pc, #52]	; (9d00 <ValidateFrequencyAS+0x84>)
	StackRetStatus_t result = LORAWAN_SUCCESS;
    9ccc:	2008      	movs	r0, #8
		if ( (frequencyNew < FREQ_915000KHZ) || (frequencyNew > FREQ_928000KHZ) )
    9cce:	4293      	cmp	r3, r2
    9cd0:	d9e3      	bls.n	9c9a <ValidateFrequencyAS+0x1e>
			result = LORAWAN_INVALID_PARAMETER;
    9cd2:	3002      	adds	r0, #2
    9cd4:	e7e1      	b.n	9c9a <ValidateFrequencyAS+0x1e>
		if ( (frequencyNew < FREQ_920000KHZ) || (frequencyNew > FREQ_925000KHZ) )
    9cd6:	4a0b      	ldr	r2, [pc, #44]	; (9d04 <ValidateFrequencyAS+0x88>)
    9cd8:	4694      	mov	ip, r2
    9cda:	4463      	add	r3, ip
    9cdc:	4a0a      	ldr	r2, [pc, #40]	; (9d08 <ValidateFrequencyAS+0x8c>)
	StackRetStatus_t result = LORAWAN_SUCCESS;
    9cde:	2008      	movs	r0, #8
		if ( (frequencyNew < FREQ_920000KHZ) || (frequencyNew > FREQ_925000KHZ) )
    9ce0:	4293      	cmp	r3, r2
    9ce2:	d9da      	bls.n	9c9a <ValidateFrequencyAS+0x1e>
			result = LORAWAN_INVALID_PARAMETER;
    9ce4:	3002      	adds	r0, #2
    9ce6:	e7d8      	b.n	9c9a <ValidateFrequencyAS+0x1e>
    9ce8:	200024d0 	.word	0x200024d0
    9cec:	c8fc2340 	.word	0xc8fc2340
    9cf0:	001e8480 	.word	0x001e8480
    9cf4:	c90b6580 	.word	0xc90b6580
    9cf8:	005b8d80 	.word	0x005b8d80
    9cfc:	c9763540 	.word	0xc9763540
    9d00:	00c65d40 	.word	0x00c65d40
    9d04:	c929ea00 	.word	0xc929ea00
    9d08:	004c4b40 	.word	0x004c4b40

00009d0c <setTxParams>:
}
#endif

#if ( AS_BAND == 1 || IND_BAND == 1 || JPN_BAND == 1 || KR_BAND == 1)
static StackRetStatus_t setTxParams(LorawanRegionalAttributes_t attr, void *attrInput)
{
    9d0c:	b5f0      	push	{r4, r5, r6, r7, lr}
	TxParams_t updateTxParams;

	memcpy(&updateTxParams,attrInput,sizeof(TxParams_t));
    9d0e:	780c      	ldrb	r4, [r1, #0]
    9d10:	784a      	ldrb	r2, [r1, #1]
    9d12:	0791      	lsls	r1, r2, #30
    9d14:	0fc9      	lsrs	r1, r1, #31
	
	RegParams.cmnParams.paramsType2.txParams.uplinkDwellTime = updateTxParams.uplinkDwellTime;
    9d16:	4e11      	ldr	r6, [pc, #68]	; (9d5c <setTxParams+0x50>)
    9d18:	25e1      	movs	r5, #225	; 0xe1
    9d1a:	006d      	lsls	r5, r5, #1
    9d1c:	2001      	movs	r0, #1
    9d1e:	4002      	ands	r2, r0
    9d20:	5d73      	ldrb	r3, [r6, r5]
    9d22:	2701      	movs	r7, #1
    9d24:	43bb      	bics	r3, r7
    9d26:	4313      	orrs	r3, r2
    9d28:	5573      	strb	r3, [r6, r5]
	if (RegParams.cmnParams.paramsType2.txParams.uplinkDwellTime == 1)
    9d2a:	4218      	tst	r0, r3
    9d2c:	d111      	bne.n	9d52 <setTxParams+0x46>
	{
		RegParams.maxDataRate = DR2;
	}
	else
	{
		RegParams.maxDataRate = DR0;
    9d2e:	2000      	movs	r0, #0
    9d30:	2325      	movs	r3, #37	; 0x25
    9d32:	4a0a      	ldr	r2, [pc, #40]	; (9d5c <setTxParams+0x50>)
    9d34:	54d0      	strb	r0, [r2, r3]
	}
	RegParams.cmnParams.paramsType2.txParams.downlinkDwellTime = updateTxParams.downlinkDwellTime;
    9d36:	4a09      	ldr	r2, [pc, #36]	; (9d5c <setTxParams+0x50>)
    9d38:	20e1      	movs	r0, #225	; 0xe1
    9d3a:	0040      	lsls	r0, r0, #1
    9d3c:	0049      	lsls	r1, r1, #1
    9d3e:	5c13      	ldrb	r3, [r2, r0]
    9d40:	2502      	movs	r5, #2
    9d42:	43ab      	bics	r3, r5
    9d44:	430b      	orrs	r3, r1
    9d46:	5413      	strb	r3, [r2, r0]
	RegParams.maxTxPwr = updateTxParams.maxEIRP;
    9d48:	2328      	movs	r3, #40	; 0x28
    9d4a:	54d4      	strb	r4, [r2, r3]
	
	return LORAWAN_SUCCESS;
}
    9d4c:	38bb      	subs	r0, #187	; 0xbb
    9d4e:	38ff      	subs	r0, #255	; 0xff
    9d50:	bdf0      	pop	{r4, r5, r6, r7, pc}
		RegParams.maxDataRate = DR2;
    9d52:	3001      	adds	r0, #1
    9d54:	2325      	movs	r3, #37	; 0x25
    9d56:	54f0      	strb	r0, [r6, r3]
    9d58:	e7ed      	b.n	9d36 <setTxParams+0x2a>
    9d5a:	46c0      	nop			; (mov r8, r8)
    9d5c:	200024d0 	.word	0x200024d0

00009d60 <setChlistDefaultState>:
	return status;
}
#endif
#if (EU_BAND == 1 || AS_BAND == 1 || IND_BAND == 1 || JPN_BAND == 1 || KR_BAND == 1)
static StackRetStatus_t setChlistDefaultState(LorawanRegionalAttributes_t attr, void *attrInput)
{
    9d60:	b5f0      	push	{r4, r5, r6, r7, lr}
	StackRetStatus_t status = LORAWAN_SUCCESS;
	/* Traverse the entire channel list and disable the all the Channel status except Default channels */
	for (uint8_t i = 0; i <= RegParams.maxChannels; i++)
    9d62:	232a      	movs	r3, #42	; 0x2a
    9d64:	4a17      	ldr	r2, [pc, #92]	; (9dc4 <setChlistDefaultState+0x64>)
    9d66:	5cd3      	ldrb	r3, [r2, r3]
    9d68:	2b7f      	cmp	r3, #127	; 0x7f
    9d6a:	d829      	bhi.n	9dc0 <setChlistDefaultState+0x60>
    9d6c:	2200      	movs	r2, #0
	{
		if(RegParams.pOtherChParams[i].joinRequestChannel != true)
    9d6e:	4815      	ldr	r0, [pc, #84]	; (9dc4 <setChlistDefaultState+0x64>)
		{
			RegParams.pChParams[i].status = DISABLED;
    9d70:	0004      	movs	r4, r0
    9d72:	2700      	movs	r7, #0
	for (uint8_t i = 0; i <= RegParams.maxChannels; i++)
    9d74:	0006      	movs	r6, r0
    9d76:	252a      	movs	r5, #42	; 0x2a
    9d78:	e004      	b.n	9d84 <setChlistDefaultState+0x24>
    9d7a:	3201      	adds	r2, #1
    9d7c:	b2d2      	uxtb	r2, r2
    9d7e:	5773      	ldrsb	r3, [r6, r5]
    9d80:	429a      	cmp	r2, r3
    9d82:	dc1d      	bgt.n	9dc0 <setChlistDefaultState+0x60>
		if(RegParams.pOtherChParams[i].joinRequestChannel != true)
    9d84:	7a03      	ldrb	r3, [r0, #8]
    9d86:	7a41      	ldrb	r1, [r0, #9]
    9d88:	0209      	lsls	r1, r1, #8
    9d8a:	430b      	orrs	r3, r1
    9d8c:	7a81      	ldrb	r1, [r0, #10]
    9d8e:	0409      	lsls	r1, r1, #16
    9d90:	4319      	orrs	r1, r3
    9d92:	7ac3      	ldrb	r3, [r0, #11]
    9d94:	061b      	lsls	r3, r3, #24
    9d96:	4319      	orrs	r1, r3
    9d98:	0053      	lsls	r3, r2, #1
    9d9a:	189b      	adds	r3, r3, r2
    9d9c:	009b      	lsls	r3, r3, #2
    9d9e:	185b      	adds	r3, r3, r1
    9da0:	7a5b      	ldrb	r3, [r3, #9]
    9da2:	2b00      	cmp	r3, #0
    9da4:	d1e9      	bne.n	9d7a <setChlistDefaultState+0x1a>
			RegParams.pChParams[i].status = DISABLED;
    9da6:	7923      	ldrb	r3, [r4, #4]
    9da8:	7961      	ldrb	r1, [r4, #5]
    9daa:	0209      	lsls	r1, r1, #8
    9dac:	4319      	orrs	r1, r3
    9dae:	79a3      	ldrb	r3, [r4, #6]
    9db0:	041b      	lsls	r3, r3, #16
    9db2:	4319      	orrs	r1, r3
    9db4:	79e3      	ldrb	r3, [r4, #7]
    9db6:	061b      	lsls	r3, r3, #24
    9db8:	430b      	orrs	r3, r1
    9dba:	0051      	lsls	r1, r2, #1
    9dbc:	54cf      	strb	r7, [r1, r3]
    9dbe:	e7dc      	b.n	9d7a <setChlistDefaultState+0x1a>
		}
	}
	return status;
}
    9dc0:	2008      	movs	r0, #8
    9dc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9dc4:	200024d0 	.word	0x200024d0

00009dc8 <SearchAvailableChannel1>:
{
    9dc8:	b5f0      	push	{r4, r5, r6, r7, lr}
    9dca:	46de      	mov	lr, fp
    9dcc:	4657      	mov	r7, sl
    9dce:	464e      	mov	r6, r9
    9dd0:	4645      	mov	r5, r8
    9dd2:	b5e0      	push	{r5, r6, r7, lr}
    9dd4:	b0af      	sub	sp, #188	; 0xbc
    9dd6:	000d      	movs	r5, r1
    9dd8:	0017      	movs	r7, r2
    9dda:	9309      	str	r3, [sp, #36]	; 0x24
	memset(ChList, 0, (MAX_CHANNELS_BANDWIDTH_125_AU_NA + MAX_CHANNELS_BANDWIDTH_500_AU_NA) * 2);  
    9ddc:	2290      	movs	r2, #144	; 0x90
    9dde:	2100      	movs	r1, #0
    9de0:	a80a      	add	r0, sp, #40	; 0x28
    9de2:	4b77      	ldr	r3, [pc, #476]	; (9fc0 <SearchAvailableChannel1+0x1f8>)
    9de4:	4798      	blx	r3
	if(transmissionType == false)
    9de6:	2d00      	cmp	r5, #0
    9de8:	d01a      	beq.n	9e20 <SearchAvailableChannel1+0x58>
					((!transmissionType) &&((RegParams.pChParams[i + j].status == ENABLED) && ((i+j) != RegParams.lastUsedChannelIndex))
    9dea:	4b76      	ldr	r3, [pc, #472]	; (9fc4 <SearchAvailableChannel1+0x1fc>)
    9dec:	222f      	movs	r2, #47	; 0x2f
    9dee:	5c9a      	ldrb	r2, [r3, r2]
    9df0:	4693      	mov	fp, r2
					((((i+j) < MAX_CHANNELS_BANDWIDTH_125_AU_NA) && (RegParams.cmnParams.paramsType1.lastUsedSB == k))
    9df2:	2258      	movs	r2, #88	; 0x58
    9df4:	32ff      	adds	r2, #255	; 0xff
    9df6:	5c9a      	ldrb	r2, [r3, r2]
    9df8:	9207      	str	r2, [sp, #28]
					(RegParams.cmnParams.paramsType1.lastUsedSB == ((i + j) - MAX_CHANNELS_BANDWIDTH_125_AU_NA))))
    9dfa:	9208      	str	r2, [sp, #32]
					((!transmissionType) &&((RegParams.pChParams[i + j].status == ENABLED) && ((i+j) != RegParams.lastUsedChannelIndex))
    9dfc:	7919      	ldrb	r1, [r3, #4]
    9dfe:	795a      	ldrb	r2, [r3, #5]
    9e00:	0212      	lsls	r2, r2, #8
    9e02:	4311      	orrs	r1, r2
    9e04:	799a      	ldrb	r2, [r3, #6]
    9e06:	0412      	lsls	r2, r2, #16
    9e08:	430a      	orrs	r2, r1
    9e0a:	79db      	ldrb	r3, [r3, #7]
    9e0c:	061b      	lsls	r3, r3, #24
    9e0e:	4313      	orrs	r3, r2
    9e10:	9302      	str	r3, [sp, #8]
					(RegParams.cmnParams.paramsType1.lastUsedSB == ((i + j) - MAX_CHANNELS_BANDWIDTH_125_AU_NA))))
    9e12:	9303      	str	r3, [sp, #12]
    9e14:	2100      	movs	r1, #0
    9e16:	2600      	movs	r6, #0
				if (((transmissionType) && (currDr >= RegParams.pChParams[i + j].dataRange.min) && (currDr <= RegParams.pChParams[i + j].dataRange.max) 
    9e18:	46b9      	mov	r9, r7
    9e1a:	46bc      	mov	ip, r7
    9e1c:	0037      	movs	r7, r6
    9e1e:	e03a      	b.n	9e96 <SearchAvailableChannel1+0xce>
		if(RegParams.FeaturesSupport & JOIN_BACKOFF_SUPPORT)
    9e20:	2320      	movs	r3, #32
    9e22:	4a68      	ldr	r2, [pc, #416]	; (9fc4 <SearchAvailableChannel1+0x1fc>)
    9e24:	5cd3      	ldrb	r3, [r2, r3]
    9e26:	069b      	lsls	r3, r3, #26
    9e28:	d5df      	bpl.n	9dea <SearchAvailableChannel1+0x22>
			if(SwTimerIsRunning(RegParams.pJoinDutyCycleTimer->timerId)) 
    9e2a:	0011      	movs	r1, r2
    9e2c:	7d13      	ldrb	r3, [r2, #20]
    9e2e:	7d52      	ldrb	r2, [r2, #21]
    9e30:	0212      	lsls	r2, r2, #8
    9e32:	431a      	orrs	r2, r3
    9e34:	7d8b      	ldrb	r3, [r1, #22]
    9e36:	041b      	lsls	r3, r3, #16
    9e38:	431a      	orrs	r2, r3
    9e3a:	7dcb      	ldrb	r3, [r1, #23]
    9e3c:	061b      	lsls	r3, r3, #24
    9e3e:	4313      	orrs	r3, r2
    9e40:	7a18      	ldrb	r0, [r3, #8]
    9e42:	4b61      	ldr	r3, [pc, #388]	; (9fc8 <SearchAvailableChannel1+0x200>)
    9e44:	4798      	blx	r3
    9e46:	0003      	movs	r3, r0
					return LORAWAN_NO_CHANNELS_FOUND;
    9e48:	2010      	movs	r0, #16
			if(SwTimerIsRunning(RegParams.pJoinDutyCycleTimer->timerId)) 
    9e4a:	2b00      	cmp	r3, #0
    9e4c:	d0cd      	beq.n	9dea <SearchAvailableChannel1+0x22>
    9e4e:	e053      	b.n	9ef8 <SearchAvailableChannel1+0x130>
					((!transmissionType) &&((RegParams.pChParams[i + j].status == ENABLED) && ((i+j) != RegParams.lastUsedChannelIndex))
    9e50:	7806      	ldrb	r6, [r0, #0]
    9e52:	2e00      	cmp	r6, #0
    9e54:	d100      	bne.n	9e58 <SearchAvailableChannel1+0x90>
    9e56:	e088      	b.n	9f6a <SearchAvailableChannel1+0x1a2>
    9e58:	001e      	movs	r6, r3
    9e5a:	459b      	cmp	fp, r3
    9e5c:	d100      	bne.n	9e60 <SearchAvailableChannel1+0x98>
    9e5e:	e084      	b.n	9f6a <SearchAvailableChannel1+0x1a2>
					&&
    9e60:	2b3f      	cmp	r3, #63	; 0x3f
    9e62:	dc02      	bgt.n	9e6a <SearchAvailableChannel1+0xa2>
					((((i+j) < MAX_CHANNELS_BANDWIDTH_125_AU_NA) && (RegParams.cmnParams.paramsType1.lastUsedSB == k))
    9e64:	9f07      	ldr	r7, [sp, #28]
    9e66:	4547      	cmp	r7, r8
    9e68:	d06c      	beq.n	9f44 <SearchAvailableChannel1+0x17c>
					|| 
    9e6a:	2e40      	cmp	r6, #64	; 0x40
    9e6c:	dc00      	bgt.n	9e70 <SearchAvailableChannel1+0xa8>
    9e6e:	e07c      	b.n	9f6a <SearchAvailableChannel1+0x1a2>
					(((i+j) > MAX_CHANNELS_BANDWIDTH_125_AU_NA) && 
    9e70:	001e      	movs	r6, r3
    9e72:	3e40      	subs	r6, #64	; 0x40
    9e74:	9f08      	ldr	r7, [sp, #32]
    9e76:	42b7      	cmp	r7, r6
    9e78:	d000      	beq.n	9e7c <SearchAvailableChannel1+0xb4>
    9e7a:	e076      	b.n	9f6a <SearchAvailableChannel1+0x1a2>
    9e7c:	e08d      	b.n	9f9a <SearchAvailableChannel1+0x1d2>
    9e7e:	9f01      	ldr	r7, [sp, #4]
    9e80:	9b00      	ldr	r3, [sp, #0]
    9e82:	469c      	mov	ip, r3
    9e84:	9b02      	ldr	r3, [sp, #8]
    9e86:	3310      	adds	r3, #16
    9e88:	9302      	str	r3, [sp, #8]
    9e8a:	9b03      	ldr	r3, [sp, #12]
    9e8c:	3310      	adds	r3, #16
    9e8e:	9303      	str	r3, [sp, #12]
    9e90:	9904      	ldr	r1, [sp, #16]
	for (i = 0, k = 0; i < (MAX_CHANNELS_BANDWIDTH_125_AU_NA + MAX_CHANNELS_BANDWIDTH_500_AU_NA); i += 8, k++)
    9e92:	2909      	cmp	r1, #9
    9e94:	d00e      	beq.n	9eb4 <SearchAvailableChannel1+0xec>
    9e96:	00cb      	lsls	r3, r1, #3
    9e98:	1c4a      	adds	r2, r1, #1
    9e9a:	9204      	str	r2, [sp, #16]
    9e9c:	001c      	movs	r4, r3
    9e9e:	3408      	adds	r4, #8
{
    9ea0:	9803      	ldr	r0, [sp, #12]
    9ea2:	9a02      	ldr	r2, [sp, #8]
								ChList[num][1] = k + 1;    
    9ea4:	1c4e      	adds	r6, r1, #1
					((((i+j) < MAX_CHANNELS_BANDWIDTH_125_AU_NA) && (RegParams.cmnParams.paramsType1.lastUsedSB == k))
    9ea6:	b2c9      	uxtb	r1, r1
    9ea8:	9701      	str	r7, [sp, #4]
    9eaa:	9605      	str	r6, [sp, #20]
    9eac:	4688      	mov	r8, r1
    9eae:	4661      	mov	r1, ip
    9eb0:	9100      	str	r1, [sp, #0]
    9eb2:	e060      	b.n	9f76 <SearchAvailableChannel1+0x1ae>
    9eb4:	1e3e      	subs	r6, r7, #0
    9eb6:	4667      	mov	r7, ip
	if(0 != num)
    9eb8:	d125      	bne.n	9f06 <SearchAvailableChannel1+0x13e>
		if ((RegParams.pChParams[RegParams.lastUsedChannelIndex].status == ENABLED) &&
    9eba:	4942      	ldr	r1, [pc, #264]	; (9fc4 <SearchAvailableChannel1+0x1fc>)
    9ebc:	232f      	movs	r3, #47	; 0x2f
    9ebe:	5ccc      	ldrb	r4, [r1, r3]
    9ec0:	790b      	ldrb	r3, [r1, #4]
    9ec2:	794a      	ldrb	r2, [r1, #5]
    9ec4:	0212      	lsls	r2, r2, #8
    9ec6:	431a      	orrs	r2, r3
    9ec8:	798b      	ldrb	r3, [r1, #6]
    9eca:	041b      	lsls	r3, r3, #16
    9ecc:	431a      	orrs	r2, r3
    9ece:	79cb      	ldrb	r3, [r1, #7]
    9ed0:	061b      	lsls	r3, r3, #24
    9ed2:	4313      	orrs	r3, r2
    9ed4:	0062      	lsls	r2, r4, #1
    9ed6:	189b      	adds	r3, r3, r2
    9ed8:	781a      	ldrb	r2, [r3, #0]
			result = LORAWAN_NO_CHANNELS_FOUND;
    9eda:	2010      	movs	r0, #16
		if ((RegParams.pChParams[RegParams.lastUsedChannelIndex].status == ENABLED) &&
    9edc:	2a00      	cmp	r2, #0
    9ede:	d00b      	beq.n	9ef8 <SearchAvailableChannel1+0x130>
		(currDr >= RegParams.pChParams[RegParams.lastUsedChannelIndex].dataRange.min) &&
    9ee0:	785a      	ldrb	r2, [r3, #1]
    9ee2:	0712      	lsls	r2, r2, #28
    9ee4:	0f12      	lsrs	r2, r2, #28
		if ((RegParams.pChParams[RegParams.lastUsedChannelIndex].status == ENABLED) &&
    9ee6:	4297      	cmp	r7, r2
    9ee8:	db06      	blt.n	9ef8 <SearchAvailableChannel1+0x130>
		(currDr <= RegParams.pChParams[RegParams.lastUsedChannelIndex].dataRange.max))
    9eea:	785b      	ldrb	r3, [r3, #1]
    9eec:	091b      	lsrs	r3, r3, #4
		(currDr >= RegParams.pChParams[RegParams.lastUsedChannelIndex].dataRange.min) &&
    9eee:	429f      	cmp	r7, r3
    9ef0:	dc02      	bgt.n	9ef8 <SearchAvailableChannel1+0x130>
			*channelIndex = RegParams.lastUsedChannelIndex;
    9ef2:	9b09      	ldr	r3, [sp, #36]	; 0x24
    9ef4:	701c      	strb	r4, [r3, #0]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    9ef6:	3808      	subs	r0, #8
}
    9ef8:	b02f      	add	sp, #188	; 0xbc
    9efa:	bc3c      	pop	{r2, r3, r4, r5}
    9efc:	4690      	mov	r8, r2
    9efe:	4699      	mov	r9, r3
    9f00:	46a2      	mov	sl, r4
    9f02:	46ab      	mov	fp, r5
    9f04:	bdf0      	pop	{r4, r5, r6, r7, pc}
		randomNumber = rand() % num;
    9f06:	4b31      	ldr	r3, [pc, #196]	; (9fcc <SearchAvailableChannel1+0x204>)
    9f08:	4798      	blx	r3
    9f0a:	0031      	movs	r1, r6
    9f0c:	4b30      	ldr	r3, [pc, #192]	; (9fd0 <SearchAvailableChannel1+0x208>)
    9f0e:	4798      	blx	r3
    9f10:	23ff      	movs	r3, #255	; 0xff
    9f12:	400b      	ands	r3, r1
		*channelIndex = ChList[randomNumber][0];
    9f14:	005b      	lsls	r3, r3, #1
    9f16:	aa0a      	add	r2, sp, #40	; 0x28
    9f18:	5c9a      	ldrb	r2, [r3, r2]
    9f1a:	9909      	ldr	r1, [sp, #36]	; 0x24
    9f1c:	700a      	strb	r2, [r1, #0]
		RegParams.cmnParams.paramsType1.lastUsedSB = ChList[randomNumber][1];
    9f1e:	aa0a      	add	r2, sp, #40	; 0x28
    9f20:	4694      	mov	ip, r2
    9f22:	4463      	add	r3, ip
    9f24:	785b      	ldrb	r3, [r3, #1]
		if(RegParams.cmnParams.paramsType1.lastUsedSB >= MAX_SUBBANDS)
    9f26:	2b07      	cmp	r3, #7
    9f28:	d805      	bhi.n	9f36 <SearchAvailableChannel1+0x16e>
		RegParams.cmnParams.paramsType1.lastUsedSB = ChList[randomNumber][1];
    9f2a:	2258      	movs	r2, #88	; 0x58
    9f2c:	32ff      	adds	r2, #255	; 0xff
    9f2e:	4925      	ldr	r1, [pc, #148]	; (9fc4 <SearchAvailableChannel1+0x1fc>)
    9f30:	548b      	strb	r3, [r1, r2]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    9f32:	2008      	movs	r0, #8
    9f34:	e7e0      	b.n	9ef8 <SearchAvailableChannel1+0x130>
				RegParams.cmnParams.paramsType1.lastUsedSB = 0;
    9f36:	2100      	movs	r1, #0
    9f38:	2358      	movs	r3, #88	; 0x58
    9f3a:	33ff      	adds	r3, #255	; 0xff
    9f3c:	4a21      	ldr	r2, [pc, #132]	; (9fc4 <SearchAvailableChannel1+0x1fc>)
    9f3e:	54d1      	strb	r1, [r2, r3]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    9f40:	2008      	movs	r0, #8
    9f42:	e7d9      	b.n	9ef8 <SearchAvailableChannel1+0x130>
						ChList[num][0] = i+j;
    9f44:	9901      	ldr	r1, [sp, #4]
    9f46:	9106      	str	r1, [sp, #24]
    9f48:	0049      	lsls	r1, r1, #1
    9f4a:	468c      	mov	ip, r1
    9f4c:	a90a      	add	r1, sp, #40	; 0x28
    9f4e:	4666      	mov	r6, ip
    9f50:	5473      	strb	r3, [r6, r1]
								ChList[num][1] = k + 1;    
    9f52:	9906      	ldr	r1, [sp, #24]
    9f54:	004e      	lsls	r6, r1, #1
    9f56:	a90a      	add	r1, sp, #40	; 0x28
    9f58:	468c      	mov	ip, r1
    9f5a:	4466      	add	r6, ip
    9f5c:	4669      	mov	r1, sp
    9f5e:	7d09      	ldrb	r1, [r1, #20]
    9f60:	7071      	strb	r1, [r6, #1]
						num++;
    9f62:	9f01      	ldr	r7, [sp, #4]
    9f64:	3701      	adds	r7, #1
    9f66:	b2f9      	uxtb	r1, r7
    9f68:	9101      	str	r1, [sp, #4]
    9f6a:	3202      	adds	r2, #2
    9f6c:	3002      	adds	r0, #2
    9f6e:	3301      	adds	r3, #1
			for (j = 0; j < NO_OF_CH_IN_SUBBAND; j++)
    9f70:	42a3      	cmp	r3, r4
    9f72:	d100      	bne.n	9f76 <SearchAvailableChannel1+0x1ae>
    9f74:	e783      	b.n	9e7e <SearchAvailableChannel1+0xb6>
				if (((transmissionType) && (currDr >= RegParams.pChParams[i + j].dataRange.min) && (currDr <= RegParams.pChParams[i + j].dataRange.max) 
    9f76:	2d00      	cmp	r5, #0
    9f78:	d100      	bne.n	9f7c <SearchAvailableChannel1+0x1b4>
    9f7a:	e769      	b.n	9e50 <SearchAvailableChannel1+0x88>
    9f7c:	7856      	ldrb	r6, [r2, #1]
    9f7e:	0736      	lsls	r6, r6, #28
    9f80:	0f36      	lsrs	r6, r6, #28
    9f82:	9f00      	ldr	r7, [sp, #0]
    9f84:	42b7      	cmp	r7, r6
    9f86:	dbf0      	blt.n	9f6a <SearchAvailableChannel1+0x1a2>
    9f88:	7856      	ldrb	r6, [r2, #1]
    9f8a:	0936      	lsrs	r6, r6, #4
    9f8c:	45b1      	cmp	r9, r6
    9f8e:	dcec      	bgt.n	9f6a <SearchAvailableChannel1+0x1a2>
					&& ((RegParams.pChParams[i + j].status == ENABLED) && ((i+j) != RegParams.lastUsedChannelIndex))) 
    9f90:	7816      	ldrb	r6, [r2, #0]
    9f92:	2e00      	cmp	r6, #0
    9f94:	d0e9      	beq.n	9f6a <SearchAvailableChannel1+0x1a2>
    9f96:	459b      	cmp	fp, r3
    9f98:	d0e7      	beq.n	9f6a <SearchAvailableChannel1+0x1a2>
						ChList[num][0] = i+j;
    9f9a:	9901      	ldr	r1, [sp, #4]
    9f9c:	9106      	str	r1, [sp, #24]
    9f9e:	b2de      	uxtb	r6, r3
    9fa0:	46b4      	mov	ip, r6
    9fa2:	004e      	lsls	r6, r1, #1
    9fa4:	af0a      	add	r7, sp, #40	; 0x28
    9fa6:	4661      	mov	r1, ip
    9fa8:	55f1      	strb	r1, [r6, r7]
						if((i+j) >= MAX_CHANNELS_BANDWIDTH_125_AU_NA)
    9faa:	2b3f      	cmp	r3, #63	; 0x3f
    9fac:	ddd1      	ble.n	9f52 <SearchAvailableChannel1+0x18a>
								ChList[num][1] = ((i + j) - MAX_CHANNELS_BANDWIDTH_125_AU_NA + 1);
    9fae:	46ba      	mov	sl, r7
    9fb0:	4456      	add	r6, sl
    9fb2:	213f      	movs	r1, #63	; 0x3f
    9fb4:	4249      	negs	r1, r1
    9fb6:	468a      	mov	sl, r1
    9fb8:	44d4      	add	ip, sl
    9fba:	4661      	mov	r1, ip
    9fbc:	7071      	strb	r1, [r6, #1]
    9fbe:	e7d0      	b.n	9f62 <SearchAvailableChannel1+0x19a>
    9fc0:	00019e35 	.word	0x00019e35
    9fc4:	200024d0 	.word	0x200024d0
    9fc8:	0000eea9 	.word	0x0000eea9
    9fcc:	00019fd5 	.word	0x00019fd5
    9fd0:	0001688d 	.word	0x0001688d

00009fd4 <LORAREG_GetAttr_FreeChannel1>:
{
    9fd4:	b570      	push	{r4, r5, r6, lr}
	memcpy(&newFreeChannelReq,(NewFreeChannelReq_t *)attrInput,sizeof(NewFreeChannelReq_t));
    9fd6:	784c      	ldrb	r4, [r1, #1]
	if(newFreeChannelReq.maxChannels > RegParams.maxChannels)
    9fd8:	202a      	movs	r0, #42	; 0x2a
    9fda:	4d07      	ldr	r5, [pc, #28]	; (9ff8 <LORAREG_GetAttr_FreeChannel1+0x24>)
    9fdc:	562d      	ldrsb	r5, [r5, r0]
		return LORAWAN_INVALID_PARAMETER;
    9fde:	3820      	subs	r0, #32
	if(newFreeChannelReq.maxChannels > RegParams.maxChannels)
    9fe0:	42ac      	cmp	r4, r5
    9fe2:	dd00      	ble.n	9fe6 <LORAREG_GetAttr_FreeChannel1+0x12>
}
    9fe4:	bd70      	pop	{r4, r5, r6, pc}
		result = SearchAvailableChannel1(newFreeChannelReq.maxChannels,newFreeChannelReq.transmissionType,newFreeChannelReq.currDr,(uint8_t*)attrOutput);
    9fe6:	7888      	ldrb	r0, [r1, #2]
    9fe8:	7809      	ldrb	r1, [r1, #0]
    9fea:	0013      	movs	r3, r2
    9fec:	0002      	movs	r2, r0
    9fee:	0020      	movs	r0, r4
    9ff0:	4c02      	ldr	r4, [pc, #8]	; (9ffc <LORAREG_GetAttr_FreeChannel1+0x28>)
    9ff2:	47a0      	blx	r4
	return result;
    9ff4:	e7f6      	b.n	9fe4 <LORAREG_GetAttr_FreeChannel1+0x10>
    9ff6:	46c0      	nop			; (mov r8, r8)
    9ff8:	200024d0 	.word	0x200024d0
    9ffc:	00009dc9 	.word	0x00009dc9

0000a000 <setEnableAllChs>:
{
    a000:	b570      	push	{r4, r5, r6, lr}
    a002:	2000      	movs	r0, #0
		RegParams.pChParams[i].status = ENABLED;	
    a004:	4915      	ldr	r1, [pc, #84]	; (a05c <setEnableAllChs+0x5c>)
    a006:	2401      	movs	r4, #1
    a008:	790b      	ldrb	r3, [r1, #4]
    a00a:	794a      	ldrb	r2, [r1, #5]
    a00c:	0212      	lsls	r2, r2, #8
    a00e:	431a      	orrs	r2, r3
    a010:	798b      	ldrb	r3, [r1, #6]
    a012:	041b      	lsls	r3, r3, #16
    a014:	431a      	orrs	r2, r3
    a016:	79cb      	ldrb	r3, [r1, #7]
    a018:	061b      	lsls	r3, r3, #24
    a01a:	4313      	orrs	r3, r2
    a01c:	541c      	strb	r4, [r3, r0]
    a01e:	3002      	adds	r0, #2
	for(uint8_t i = 0; i < (NO_OF_CH_IN_SUBBAND * (MAX_SUBBANDS + 1)); i++)
    a020:	2890      	cmp	r0, #144	; 0x90
    a022:	d1f1      	bne.n	a008 <setEnableAllChs+0x8>
	RegParams.cmnParams.paramsType1.lastUsedSB = 0;
    a024:	4c0d      	ldr	r4, [pc, #52]	; (a05c <setEnableAllChs+0x5c>)
    a026:	2200      	movs	r2, #0
    a028:	2358      	movs	r3, #88	; 0x58
    a02a:	33ff      	adds	r3, #255	; 0xff
    a02c:	54e2      	strb	r2, [r4, r3]
	PDS_STORE(RegParams.regParamItems.ch_param_1_item_id);
    a02e:	4b0c      	ldr	r3, [pc, #48]	; (a060 <setEnableAllChs+0x60>)
    a030:	5ce3      	ldrb	r3, [r4, r3]
    a032:	4a0c      	ldr	r2, [pc, #48]	; (a064 <setEnableAllChs+0x64>)
    a034:	5ca0      	ldrb	r0, [r4, r2]
    a036:	0200      	lsls	r0, r0, #8
    a038:	4318      	orrs	r0, r3
    a03a:	b2c1      	uxtb	r1, r0
    a03c:	0a00      	lsrs	r0, r0, #8
    a03e:	4d0a      	ldr	r5, [pc, #40]	; (a068 <setEnableAllChs+0x68>)
    a040:	47a8      	blx	r5
	PDS_STORE(RegParams.regParamItems.lastUsedSB);
    a042:	2383      	movs	r3, #131	; 0x83
    a044:	009b      	lsls	r3, r3, #2
    a046:	5ce3      	ldrb	r3, [r4, r3]
    a048:	4a08      	ldr	r2, [pc, #32]	; (a06c <setEnableAllChs+0x6c>)
    a04a:	5ca0      	ldrb	r0, [r4, r2]
    a04c:	0200      	lsls	r0, r0, #8
    a04e:	4318      	orrs	r0, r3
    a050:	b2c1      	uxtb	r1, r0
    a052:	0a00      	lsrs	r0, r0, #8
    a054:	47a8      	blx	r5
}
    a056:	2008      	movs	r0, #8
    a058:	bd70      	pop	{r4, r5, r6, pc}
    a05a:	46c0      	nop			; (mov r8, r8)
    a05c:	200024d0 	.word	0x200024d0
    a060:	0000020e 	.word	0x0000020e
    a064:	0000020f 	.word	0x0000020f
    a068:	0000dfe1 	.word	0x0000dfe1
    a06c:	0000020d 	.word	0x0000020d

0000a070 <setJoinSuccess>:
{
    a070:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if(RegParams.cmnParams.paramsType1.lastUsedSB == 0)
    a072:	2358      	movs	r3, #88	; 0x58
    a074:	33ff      	adds	r3, #255	; 0xff
    a076:	4a1a      	ldr	r2, [pc, #104]	; (a0e0 <setJoinSuccess+0x70>)
    a078:	5cd7      	ldrb	r7, [r2, r3]
    a07a:	2f00      	cmp	r7, #0
    a07c:	d100      	bne.n	a080 <setJoinSuccess+0x10>
		lastUsedSB = 8;
    a07e:	3708      	adds	r7, #8
		if(((i < MAX_CHANNELS_BANDWIDTH_125_AU_NA) && ((i < ((lastUsedSB - 1) * NO_OF_CH_IN_SUBBAND)) 
    a080:	1e7c      	subs	r4, r7, #1
    a082:	00e4      	lsls	r4, r4, #3
			|| (i >= (((lastUsedSB - 1) * NO_OF_CH_IN_SUBBAND) + 8) )))
    a084:	0026      	movs	r6, r4
    a086:	3608      	adds	r6, #8
    a088:	2300      	movs	r3, #0
			RegParams.pChParams[i].status = DISABLED;	
    a08a:	4815      	ldr	r0, [pc, #84]	; (a0e0 <setJoinSuccess+0x70>)
    a08c:	2500      	movs	r5, #0
			|| ((i >= MAX_CHANNELS_BANDWIDTH_125_AU_NA) && (i != lastUsedSB + MAX_CHANNELS_BANDWIDTH_125_AU_NA - 1)))
    a08e:	373f      	adds	r7, #63	; 0x3f
    a090:	e010      	b.n	a0b4 <setJoinSuccess+0x44>
    a092:	429f      	cmp	r7, r3
    a094:	d00b      	beq.n	a0ae <setJoinSuccess+0x3e>
			RegParams.pChParams[i].status = DISABLED;	
    a096:	7902      	ldrb	r2, [r0, #4]
    a098:	7941      	ldrb	r1, [r0, #5]
    a09a:	0209      	lsls	r1, r1, #8
    a09c:	4311      	orrs	r1, r2
    a09e:	7982      	ldrb	r2, [r0, #6]
    a0a0:	0412      	lsls	r2, r2, #16
    a0a2:	4311      	orrs	r1, r2
    a0a4:	79c2      	ldrb	r2, [r0, #7]
    a0a6:	0612      	lsls	r2, r2, #24
    a0a8:	430a      	orrs	r2, r1
    a0aa:	0059      	lsls	r1, r3, #1
    a0ac:	548d      	strb	r5, [r1, r2]
    a0ae:	3301      	adds	r3, #1
	for(uint8_t i = 0; i < (NO_OF_CH_IN_SUBBAND * (MAX_SUBBANDS + 1)); i++)
    a0b0:	2b48      	cmp	r3, #72	; 0x48
    a0b2:	d007      	beq.n	a0c4 <setJoinSuccess+0x54>
		if(((i < MAX_CHANNELS_BANDWIDTH_125_AU_NA) && ((i < ((lastUsedSB - 1) * NO_OF_CH_IN_SUBBAND)) 
    a0b4:	b2da      	uxtb	r2, r3
    a0b6:	2a3f      	cmp	r2, #63	; 0x3f
    a0b8:	d8eb      	bhi.n	a092 <setJoinSuccess+0x22>
    a0ba:	429c      	cmp	r4, r3
    a0bc:	dceb      	bgt.n	a096 <setJoinSuccess+0x26>
			|| (i >= (((lastUsedSB - 1) * NO_OF_CH_IN_SUBBAND) + 8) )))
    a0be:	429e      	cmp	r6, r3
    a0c0:	dde9      	ble.n	a096 <setJoinSuccess+0x26>
    a0c2:	e7f4      	b.n	a0ae <setJoinSuccess+0x3e>
	PDS_STORE(RegParams.regParamItems.ch_param_1_item_id);
    a0c4:	4b06      	ldr	r3, [pc, #24]	; (a0e0 <setJoinSuccess+0x70>)
    a0c6:	4a07      	ldr	r2, [pc, #28]	; (a0e4 <setJoinSuccess+0x74>)
    a0c8:	5c9a      	ldrb	r2, [r3, r2]
    a0ca:	4907      	ldr	r1, [pc, #28]	; (a0e8 <setJoinSuccess+0x78>)
    a0cc:	5c58      	ldrb	r0, [r3, r1]
    a0ce:	0200      	lsls	r0, r0, #8
    a0d0:	4310      	orrs	r0, r2
    a0d2:	b2c1      	uxtb	r1, r0
    a0d4:	0a00      	lsrs	r0, r0, #8
    a0d6:	4b05      	ldr	r3, [pc, #20]	; (a0ec <setJoinSuccess+0x7c>)
    a0d8:	4798      	blx	r3
}
    a0da:	2008      	movs	r0, #8
    a0dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    a0de:	46c0      	nop			; (mov r8, r8)
    a0e0:	200024d0 	.word	0x200024d0
    a0e4:	0000020e 	.word	0x0000020e
    a0e8:	0000020f 	.word	0x0000020f
    a0ec:	0000dfe1 	.word	0x0000dfe1

0000a0f0 <UpdateChannelIdStatus>:
{
    a0f0:	b510      	push	{r4, lr}
	if(chid < RegParams.maxChannels || ((((1 << RegParams.band) & (ISM_NAAUBAND)) == 0) && chid >= RegParams.cmnParams.paramsType2.minNonDefChId))
    a0f2:	232a      	movs	r3, #42	; 0x2a
    a0f4:	4a13      	ldr	r2, [pc, #76]	; (a144 <UpdateChannelIdStatus+0x54>)
    a0f6:	56d3      	ldrsb	r3, [r2, r3]
    a0f8:	4298      	cmp	r0, r3
    a0fa:	db0b      	blt.n	a114 <UpdateChannelIdStatus+0x24>
    a0fc:	232e      	movs	r3, #46	; 0x2e
    a0fe:	5cd2      	ldrb	r2, [r2, r3]
    a100:	3b22      	subs	r3, #34	; 0x22
    a102:	4113      	asrs	r3, r2
    a104:	07db      	lsls	r3, r3, #31
    a106:	d41c      	bmi.n	a142 <UpdateChannelIdStatus+0x52>
    a108:	23e0      	movs	r3, #224	; 0xe0
    a10a:	005b      	lsls	r3, r3, #1
    a10c:	4a0d      	ldr	r2, [pc, #52]	; (a144 <UpdateChannelIdStatus+0x54>)
    a10e:	5cd3      	ldrb	r3, [r2, r3]
    a110:	4283      	cmp	r3, r0
    a112:	d816      	bhi.n	a142 <UpdateChannelIdStatus+0x52>
		RegParams.pChParams[chid].status = statusNew;
    a114:	4b0b      	ldr	r3, [pc, #44]	; (a144 <UpdateChannelIdStatus+0x54>)
    a116:	791a      	ldrb	r2, [r3, #4]
    a118:	795c      	ldrb	r4, [r3, #5]
    a11a:	0224      	lsls	r4, r4, #8
    a11c:	4314      	orrs	r4, r2
    a11e:	799a      	ldrb	r2, [r3, #6]
    a120:	0412      	lsls	r2, r2, #16
    a122:	4314      	orrs	r4, r2
    a124:	79da      	ldrb	r2, [r3, #7]
    a126:	0612      	lsls	r2, r2, #24
    a128:	4322      	orrs	r2, r4
    a12a:	0040      	lsls	r0, r0, #1
    a12c:	5481      	strb	r1, [r0, r2]
		PDS_STORE(RegParams.regParamItems.ch_param_1_item_id);
    a12e:	4a06      	ldr	r2, [pc, #24]	; (a148 <UpdateChannelIdStatus+0x58>)
    a130:	5c9a      	ldrb	r2, [r3, r2]
    a132:	4906      	ldr	r1, [pc, #24]	; (a14c <UpdateChannelIdStatus+0x5c>)
    a134:	5c58      	ldrb	r0, [r3, r1]
    a136:	0200      	lsls	r0, r0, #8
    a138:	4310      	orrs	r0, r2
    a13a:	b2c1      	uxtb	r1, r0
    a13c:	0a00      	lsrs	r0, r0, #8
    a13e:	4b04      	ldr	r3, [pc, #16]	; (a150 <UpdateChannelIdStatus+0x60>)
    a140:	4798      	blx	r3
}
    a142:	bd10      	pop	{r4, pc}
    a144:	200024d0 	.word	0x200024d0
    a148:	0000020e 	.word	0x0000020e
    a14c:	0000020f 	.word	0x0000020f
    a150:	0000dfe1 	.word	0x0000dfe1

0000a154 <EnableChannels2>:
{
    a154:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a156:	46ce      	mov	lr, r9
    a158:	4647      	mov	r7, r8
    a15a:	b580      	push	{r7, lr}
    a15c:	0004      	movs	r4, r0
    a15e:	000f      	movs	r7, r1
    a160:	0015      	movs	r5, r2
	for(i = startIndx; i <= endIndx; i++)
    a162:	4288      	cmp	r0, r1
    a164:	d812      	bhi.n	a18c <EnableChannels2+0x38>
		if((chMask & (0x0001)) == 0x0001)
    a166:	2601      	movs	r6, #1
			UpdateChannelIdStatus(i, ENABLED);
    a168:	4b0a      	ldr	r3, [pc, #40]	; (a194 <EnableChannels2+0x40>)
    a16a:	4699      	mov	r9, r3
			UpdateChannelIdStatus(i, DISABLED);
    a16c:	4698      	mov	r8, r3
    a16e:	e007      	b.n	a180 <EnableChannels2+0x2c>
    a170:	2100      	movs	r1, #0
    a172:	0020      	movs	r0, r4
    a174:	47c0      	blx	r8
		chMask = chMask >> SHIFT1;
    a176:	086d      	lsrs	r5, r5, #1
	for(i = startIndx; i <= endIndx; i++)
    a178:	3401      	adds	r4, #1
    a17a:	b2e4      	uxtb	r4, r4
    a17c:	42a7      	cmp	r7, r4
    a17e:	d305      	bcc.n	a18c <EnableChannels2+0x38>
		if((chMask & (0x0001)) == 0x0001)
    a180:	422e      	tst	r6, r5
    a182:	d0f5      	beq.n	a170 <EnableChannels2+0x1c>
			UpdateChannelIdStatus(i, ENABLED);
    a184:	0031      	movs	r1, r6
    a186:	0020      	movs	r0, r4
    a188:	47c8      	blx	r9
    a18a:	e7f4      	b.n	a176 <EnableChannels2+0x22>
}
    a18c:	bc0c      	pop	{r2, r3}
    a18e:	4690      	mov	r8, r2
    a190:	4699      	mov	r9, r3
    a192:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    a194:	0000a0f1 	.word	0x0000a0f1

0000a198 <UpdateChannelIdStatusT2>:
{
    a198:	b570      	push	{r4, r5, r6, lr}
    a19a:	000c      	movs	r4, r1
	if(chid < RegParams.maxChannels && chid >= RegParams.cmnParams.paramsType2.minNonDefChId &&
    a19c:	232a      	movs	r3, #42	; 0x2a
    a19e:	4a3f      	ldr	r2, [pc, #252]	; (a29c <UpdateChannelIdStatusT2+0x104>)
    a1a0:	56d3      	ldrsb	r3, [r2, r3]
    a1a2:	4298      	cmp	r0, r3
    a1a4:	da17      	bge.n	a1d6 <UpdateChannelIdStatusT2+0x3e>
    a1a6:	23e0      	movs	r3, #224	; 0xe0
    a1a8:	005b      	lsls	r3, r3, #1
    a1aa:	5cd3      	ldrb	r3, [r2, r3]
    a1ac:	4283      	cmp	r3, r0
    a1ae:	d812      	bhi.n	a1d6 <UpdateChannelIdStatusT2+0x3e>
	   (RegParams.pOtherChParams[chid].parametersDefined & (FREQUENCY_DEFINED | DATA_RANGE_DEFINED)) == (FREQUENCY_DEFINED | DATA_RANGE_DEFINED))
    a1b0:	0045      	lsls	r5, r0, #1
    a1b2:	182d      	adds	r5, r5, r0
    a1b4:	00ad      	lsls	r5, r5, #2
    a1b6:	0011      	movs	r1, r2
    a1b8:	7a13      	ldrb	r3, [r2, #8]
    a1ba:	7a52      	ldrb	r2, [r2, #9]
    a1bc:	0212      	lsls	r2, r2, #8
    a1be:	431a      	orrs	r2, r3
    a1c0:	7a8b      	ldrb	r3, [r1, #10]
    a1c2:	041b      	lsls	r3, r3, #16
    a1c4:	431a      	orrs	r2, r3
    a1c6:	7acb      	ldrb	r3, [r1, #11]
    a1c8:	061b      	lsls	r3, r3, #24
    a1ca:	4313      	orrs	r3, r2
    a1cc:	195b      	adds	r3, r3, r5
	if(chid < RegParams.maxChannels && chid >= RegParams.cmnParams.paramsType2.minNonDefChId &&
    a1ce:	7adb      	ldrb	r3, [r3, #11]
    a1d0:	43db      	mvns	r3, r3
    a1d2:	079b      	lsls	r3, r3, #30
    a1d4:	d000      	beq.n	a1d8 <UpdateChannelIdStatusT2+0x40>
}
    a1d6:	bd70      	pop	{r4, r5, r6, pc}
		RegParams.pChParams[chid].status = statusNew;
    a1d8:	000e      	movs	r6, r1
    a1da:	790b      	ldrb	r3, [r1, #4]
    a1dc:	794a      	ldrb	r2, [r1, #5]
    a1de:	0212      	lsls	r2, r2, #8
    a1e0:	431a      	orrs	r2, r3
    a1e2:	798b      	ldrb	r3, [r1, #6]
    a1e4:	041b      	lsls	r3, r3, #16
    a1e6:	431a      	orrs	r2, r3
    a1e8:	79cb      	ldrb	r3, [r1, #7]
    a1ea:	061b      	lsls	r3, r3, #24
    a1ec:	4313      	orrs	r3, r2
    a1ee:	0040      	lsls	r0, r0, #1
    a1f0:	54c4      	strb	r4, [r0, r3]
		PDS_STORE(RegParams.regParamItems.ch_param_1_item_id);
    a1f2:	4b2b      	ldr	r3, [pc, #172]	; (a2a0 <UpdateChannelIdStatusT2+0x108>)
    a1f4:	5ccb      	ldrb	r3, [r1, r3]
    a1f6:	4a2b      	ldr	r2, [pc, #172]	; (a2a4 <UpdateChannelIdStatusT2+0x10c>)
    a1f8:	5c88      	ldrb	r0, [r1, r2]
    a1fa:	0200      	lsls	r0, r0, #8
    a1fc:	4318      	orrs	r0, r3
    a1fe:	b2c1      	uxtb	r1, r0
    a200:	0a00      	lsrs	r0, r0, #8
    a202:	4b29      	ldr	r3, [pc, #164]	; (a2a8 <UpdateChannelIdStatusT2+0x110>)
    a204:	4798      	blx	r3
		if(((1 << RegParams.band) & (ISM_EUBAND)) != 0 && statusNew == DISABLED)
    a206:	232e      	movs	r3, #46	; 0x2e
    a208:	5cf2      	ldrb	r2, [r6, r3]
    a20a:	3b2b      	subs	r3, #43	; 0x2b
    a20c:	4113      	asrs	r3, r2
    a20e:	07db      	lsls	r3, r3, #31
    a210:	d5e1      	bpl.n	a1d6 <UpdateChannelIdStatusT2+0x3e>
    a212:	2c00      	cmp	r4, #0
    a214:	d1df      	bne.n	a1d6 <UpdateChannelIdStatusT2+0x3e>
			subBandId = RegParams.pOtherChParams[chid].subBandId;
    a216:	4b21      	ldr	r3, [pc, #132]	; (a29c <UpdateChannelIdStatusT2+0x104>)
    a218:	7a18      	ldrb	r0, [r3, #8]
    a21a:	7a5a      	ldrb	r2, [r3, #9]
    a21c:	0212      	lsls	r2, r2, #8
    a21e:	4302      	orrs	r2, r0
    a220:	7a98      	ldrb	r0, [r3, #10]
    a222:	0400      	lsls	r0, r0, #16
    a224:	4302      	orrs	r2, r0
    a226:	7ad8      	ldrb	r0, [r3, #11]
    a228:	0600      	lsls	r0, r0, #24
    a22a:	4310      	orrs	r0, r2
    a22c:	1945      	adds	r5, r0, r5
    a22e:	7a2d      	ldrb	r5, [r5, #8]
			for(uint8_t i = 0; i < RegParams.maxChannels; i++)
    a230:	222a      	movs	r2, #42	; 0x2a
    a232:	569c      	ldrsb	r4, [r3, r2]
    a234:	2c00      	cmp	r4, #0
    a236:	dd1c      	ble.n	a272 <UpdateChannelIdStatusT2+0xda>
				if(RegParams.pChParams[i].status == ENABLED &&
    a238:	001a      	movs	r2, r3
    a23a:	7919      	ldrb	r1, [r3, #4]
    a23c:	795b      	ldrb	r3, [r3, #5]
    a23e:	021b      	lsls	r3, r3, #8
    a240:	430b      	orrs	r3, r1
    a242:	7991      	ldrb	r1, [r2, #6]
    a244:	0409      	lsls	r1, r1, #16
    a246:	430b      	orrs	r3, r1
    a248:	79d1      	ldrb	r1, [r2, #7]
    a24a:	0609      	lsls	r1, r1, #24
    a24c:	4319      	orrs	r1, r3
    a24e:	2300      	movs	r3, #0
    a250:	e003      	b.n	a25a <UpdateChannelIdStatusT2+0xc2>
			for(uint8_t i = 0; i < RegParams.maxChannels; i++)
    a252:	3301      	adds	r3, #1
    a254:	b2db      	uxtb	r3, r3
    a256:	42a3      	cmp	r3, r4
    a258:	da0b      	bge.n	a272 <UpdateChannelIdStatusT2+0xda>
				if(RegParams.pChParams[i].status == ENABLED &&
    a25a:	005a      	lsls	r2, r3, #1
    a25c:	5c52      	ldrb	r2, [r2, r1]
    a25e:	2a00      	cmp	r2, #0
    a260:	d0f7      	beq.n	a252 <UpdateChannelIdStatusT2+0xba>
				 subBandId == RegParams.pOtherChParams[i].subBandId)
    a262:	005a      	lsls	r2, r3, #1
    a264:	18d2      	adds	r2, r2, r3
    a266:	0092      	lsls	r2, r2, #2
    a268:	1882      	adds	r2, r0, r2
				if(RegParams.pChParams[i].status == ENABLED &&
    a26a:	7a12      	ldrb	r2, [r2, #8]
    a26c:	42aa      	cmp	r2, r5
    a26e:	d1f0      	bne.n	a252 <UpdateChannelIdStatusT2+0xba>
    a270:	e7b1      	b.n	a1d6 <UpdateChannelIdStatusT2+0x3e>
			RegParams.pSubBandParams[subBandId].subBandTimeout = 0;
    a272:	490a      	ldr	r1, [pc, #40]	; (a29c <UpdateChannelIdStatusT2+0x104>)
    a274:	7b0a      	ldrb	r2, [r1, #12]
    a276:	7b4b      	ldrb	r3, [r1, #13]
    a278:	021b      	lsls	r3, r3, #8
    a27a:	4313      	orrs	r3, r2
    a27c:	7b8a      	ldrb	r2, [r1, #14]
    a27e:	0412      	lsls	r2, r2, #16
    a280:	4313      	orrs	r3, r2
    a282:	7bca      	ldrb	r2, [r1, #15]
    a284:	0612      	lsls	r2, r2, #24
    a286:	431a      	orrs	r2, r3
    a288:	006b      	lsls	r3, r5, #1
    a28a:	195d      	adds	r5, r3, r5
    a28c:	00ad      	lsls	r5, r5, #2
    a28e:	18ad      	adds	r5, r5, r2
    a290:	2300      	movs	r3, #0
    a292:	722b      	strb	r3, [r5, #8]
    a294:	726b      	strb	r3, [r5, #9]
    a296:	72ab      	strb	r3, [r5, #10]
    a298:	72eb      	strb	r3, [r5, #11]
    a29a:	e79c      	b.n	a1d6 <UpdateChannelIdStatusT2+0x3e>
    a29c:	200024d0 	.word	0x200024d0
    a2a0:	0000020e 	.word	0x0000020e
    a2a4:	0000020f 	.word	0x0000020f
    a2a8:	0000dfe1 	.word	0x0000dfe1

0000a2ac <setChannelIdStatusT2>:
{
    a2ac:	b570      	push	{r4, r5, r6, lr}
    a2ae:	b082      	sub	sp, #8
	memcpy(&updateChid,attrInput,sizeof(UpdateChId_t));
    a2b0:	780d      	ldrb	r5, [r1, #0]
    a2b2:	784e      	ldrb	r6, [r1, #1]
	valChid.channelIndex = updateChid.channelIndex;
    a2b4:	a901      	add	r1, sp, #4
    a2b6:	700d      	strb	r5, [r1, #0]
	valChid.allowedForDefaultChannels = /*WITHOUT_DEFAULT_CHANNELS*/ALL_CHANNELS;
    a2b8:	2301      	movs	r3, #1
    a2ba:	704b      	strb	r3, [r1, #1]
	if(ValidateChannelIdT2(CHANNEL_ID, &valChid) == LORAWAN_SUCCESS)
    a2bc:	2015      	movs	r0, #21
    a2be:	4b0c      	ldr	r3, [pc, #48]	; (a2f0 <setChannelIdStatusT2+0x44>)
    a2c0:	4798      	blx	r3
    a2c2:	0004      	movs	r4, r0
    a2c4:	2808      	cmp	r0, #8
    a2c6:	d003      	beq.n	a2d0 <setChannelIdStatusT2+0x24>
		retVal = LORAWAN_INVALID_PARAMETER;
    a2c8:	240a      	movs	r4, #10
}
    a2ca:	0020      	movs	r0, r4
    a2cc:	b002      	add	sp, #8
    a2ce:	bd70      	pop	{r4, r5, r6, pc}
		if(RegParams.band ==  ISM_IND865)
    a2d0:	232e      	movs	r3, #46	; 0x2e
    a2d2:	4a08      	ldr	r2, [pc, #32]	; (a2f4 <setChannelIdStatusT2+0x48>)
    a2d4:	5cd3      	ldrb	r3, [r2, r3]
    a2d6:	2b0f      	cmp	r3, #15
    a2d8:	d004      	beq.n	a2e4 <setChannelIdStatusT2+0x38>
		    UpdateChannelIdStatusT2(updateChid.channelIndex,updateChid.statusNew);
    a2da:	0031      	movs	r1, r6
    a2dc:	0028      	movs	r0, r5
    a2de:	4b06      	ldr	r3, [pc, #24]	; (a2f8 <setChannelIdStatusT2+0x4c>)
    a2e0:	4798      	blx	r3
    a2e2:	e7f2      	b.n	a2ca <setChannelIdStatusT2+0x1e>
			UpdateChannelIdStatus(updateChid.channelIndex,updateChid.statusNew);
    a2e4:	0031      	movs	r1, r6
    a2e6:	0028      	movs	r0, r5
    a2e8:	4b04      	ldr	r3, [pc, #16]	; (a2fc <setChannelIdStatusT2+0x50>)
    a2ea:	4798      	blx	r3
    a2ec:	e7ed      	b.n	a2ca <setChannelIdStatusT2+0x1e>
    a2ee:	46c0      	nop			; (mov r8, r8)
    a2f0:	0000993d 	.word	0x0000993d
    a2f4:	200024d0 	.word	0x200024d0
    a2f8:	0000a199 	.word	0x0000a199
    a2fc:	0000a0f1 	.word	0x0000a0f1

0000a300 <UpdateChannelIdStatusT4>:
{
    a300:	b570      	push	{r4, r5, r6, lr}
    a302:	0004      	movs	r4, r0
    a304:	000d      	movs	r5, r1
	RegParams.pChParams[chid].status = statusNew;
    a306:	4923      	ldr	r1, [pc, #140]	; (a394 <UpdateChannelIdStatusT4+0x94>)
    a308:	790b      	ldrb	r3, [r1, #4]
    a30a:	794a      	ldrb	r2, [r1, #5]
    a30c:	0212      	lsls	r2, r2, #8
    a30e:	431a      	orrs	r2, r3
    a310:	798b      	ldrb	r3, [r1, #6]
    a312:	041b      	lsls	r3, r3, #16
    a314:	431a      	orrs	r2, r3
    a316:	79cb      	ldrb	r3, [r1, #7]
    a318:	061b      	lsls	r3, r3, #24
    a31a:	4313      	orrs	r3, r2
    a31c:	0042      	lsls	r2, r0, #1
    a31e:	54d5      	strb	r5, [r2, r3]
	PDS_STORE(RegParams.regParamItems.ch_param_1_item_id);
    a320:	4b1d      	ldr	r3, [pc, #116]	; (a398 <UpdateChannelIdStatusT4+0x98>)
    a322:	5ccb      	ldrb	r3, [r1, r3]
    a324:	4a1d      	ldr	r2, [pc, #116]	; (a39c <UpdateChannelIdStatusT4+0x9c>)
    a326:	5c88      	ldrb	r0, [r1, r2]
    a328:	0200      	lsls	r0, r0, #8
    a32a:	4318      	orrs	r0, r3
    a32c:	b2c1      	uxtb	r1, r0
    a32e:	0a00      	lsrs	r0, r0, #8
    a330:	4b1b      	ldr	r3, [pc, #108]	; (a3a0 <UpdateChannelIdStatusT4+0xa0>)
    a332:	4798      	blx	r3
	if(statusNew == ENABLED)
    a334:	2d00      	cmp	r5, #0
    a336:	d029      	beq.n	a38c <UpdateChannelIdStatusT4+0x8c>
		if(RegParams.pOtherChParams[chid].ulfrequency < FREQ_922100KHZ)
    a338:	4a16      	ldr	r2, [pc, #88]	; (a394 <UpdateChannelIdStatusT4+0x94>)
    a33a:	7a10      	ldrb	r0, [r2, #8]
    a33c:	7a53      	ldrb	r3, [r2, #9]
    a33e:	021b      	lsls	r3, r3, #8
    a340:	4303      	orrs	r3, r0
    a342:	7a90      	ldrb	r0, [r2, #10]
    a344:	0400      	lsls	r0, r0, #16
    a346:	4303      	orrs	r3, r0
    a348:	7ad0      	ldrb	r0, [r2, #11]
    a34a:	0600      	lsls	r0, r0, #24
    a34c:	4318      	orrs	r0, r3
    a34e:	0063      	lsls	r3, r4, #1
    a350:	191c      	adds	r4, r3, r4
    a352:	00a4      	lsls	r4, r4, #2
    a354:	1900      	adds	r0, r0, r4
    a356:	7803      	ldrb	r3, [r0, #0]
    a358:	7842      	ldrb	r2, [r0, #1]
    a35a:	0212      	lsls	r2, r2, #8
    a35c:	431a      	orrs	r2, r3
    a35e:	7883      	ldrb	r3, [r0, #2]
    a360:	041b      	lsls	r3, r3, #16
    a362:	431a      	orrs	r2, r3
    a364:	78c3      	ldrb	r3, [r0, #3]
    a366:	061b      	lsls	r3, r3, #24
    a368:	4313      	orrs	r3, r2
    a36a:	4a0e      	ldr	r2, [pc, #56]	; (a3a4 <UpdateChannelIdStatusT4+0xa4>)
    a36c:	4293      	cmp	r3, r2
    a36e:	d80e      	bhi.n	a38e <UpdateChannelIdStatusT4+0x8e>
			RegParams.pOtherChParams[chid].maxEIRP = DEFAULT_EIRP_KR_LF;
    a370:	230a      	movs	r3, #10
    a372:	7283      	strb	r3, [r0, #10]
		PDS_STORE(RegParams.regParamItems.ch_param_2_item_id);
    a374:	4b07      	ldr	r3, [pc, #28]	; (a394 <UpdateChannelIdStatusT4+0x94>)
    a376:	2284      	movs	r2, #132	; 0x84
    a378:	0092      	lsls	r2, r2, #2
    a37a:	5c9a      	ldrb	r2, [r3, r2]
    a37c:	490a      	ldr	r1, [pc, #40]	; (a3a8 <UpdateChannelIdStatusT4+0xa8>)
    a37e:	5c58      	ldrb	r0, [r3, r1]
    a380:	0200      	lsls	r0, r0, #8
    a382:	4310      	orrs	r0, r2
    a384:	b2c1      	uxtb	r1, r0
    a386:	0a00      	lsrs	r0, r0, #8
    a388:	4b05      	ldr	r3, [pc, #20]	; (a3a0 <UpdateChannelIdStatusT4+0xa0>)
    a38a:	4798      	blx	r3
}
    a38c:	bd70      	pop	{r4, r5, r6, pc}
			RegParams.pOtherChParams[chid].maxEIRP = DEFAULT_EIRP_KR_HF;
    a38e:	230e      	movs	r3, #14
    a390:	7283      	strb	r3, [r0, #10]
    a392:	e7ef      	b.n	a374 <UpdateChannelIdStatusT4+0x74>
    a394:	200024d0 	.word	0x200024d0
    a398:	0000020e 	.word	0x0000020e
    a39c:	0000020f 	.word	0x0000020f
    a3a0:	0000dfe1 	.word	0x0000dfe1
    a3a4:	36f6211f 	.word	0x36f6211f
    a3a8:	00000211 	.word	0x00000211

0000a3ac <UpdateChannelIdStatusT3>:
{
    a3ac:	b570      	push	{r4, r5, r6, lr}
    a3ae:	0005      	movs	r5, r0
	RegParams.pChParams[chid].status = statusNew;
    a3b0:	4c17      	ldr	r4, [pc, #92]	; (a410 <UpdateChannelIdStatusT3+0x64>)
    a3b2:	7923      	ldrb	r3, [r4, #4]
    a3b4:	7962      	ldrb	r2, [r4, #5]
    a3b6:	0212      	lsls	r2, r2, #8
    a3b8:	431a      	orrs	r2, r3
    a3ba:	79a3      	ldrb	r3, [r4, #6]
    a3bc:	041b      	lsls	r3, r3, #16
    a3be:	431a      	orrs	r2, r3
    a3c0:	79e3      	ldrb	r3, [r4, #7]
    a3c2:	061b      	lsls	r3, r3, #24
    a3c4:	4313      	orrs	r3, r2
    a3c6:	0042      	lsls	r2, r0, #1
    a3c8:	54d1      	strb	r1, [r2, r3]
	PDS_STORE(RegParams.regParamItems.ch_param_1_item_id);
    a3ca:	4b12      	ldr	r3, [pc, #72]	; (a414 <UpdateChannelIdStatusT3+0x68>)
    a3cc:	5ce3      	ldrb	r3, [r4, r3]
    a3ce:	4a12      	ldr	r2, [pc, #72]	; (a418 <UpdateChannelIdStatusT3+0x6c>)
    a3d0:	5ca0      	ldrb	r0, [r4, r2]
    a3d2:	0200      	lsls	r0, r0, #8
    a3d4:	4318      	orrs	r0, r3
    a3d6:	b2c1      	uxtb	r1, r0
    a3d8:	0a00      	lsrs	r0, r0, #8
    a3da:	4e10      	ldr	r6, [pc, #64]	; (a41c <UpdateChannelIdStatusT3+0x70>)
    a3dc:	47b0      	blx	r6
	PDS_STORE(RegParams.regParamItems.ch_param_2_item_id);
    a3de:	2384      	movs	r3, #132	; 0x84
    a3e0:	009b      	lsls	r3, r3, #2
    a3e2:	5ce3      	ldrb	r3, [r4, r3]
    a3e4:	4a0e      	ldr	r2, [pc, #56]	; (a420 <UpdateChannelIdStatusT3+0x74>)
    a3e6:	5ca0      	ldrb	r0, [r4, r2]
    a3e8:	0200      	lsls	r0, r0, #8
    a3ea:	4318      	orrs	r0, r3
    a3ec:	b2c1      	uxtb	r1, r0
    a3ee:	0a00      	lsrs	r0, r0, #8
    a3f0:	47b0      	blx	r6
	if( RegParams.band == ISM_JPN923)
    a3f2:	232e      	movs	r3, #46	; 0x2e
    a3f4:	5ce3      	ldrb	r3, [r4, r3]
    a3f6:	2b05      	cmp	r3, #5
    a3f8:	d000      	beq.n	a3fc <UpdateChannelIdStatusT3+0x50>
}
    a3fa:	bd70      	pop	{r4, r5, r6, pc}
		RegParams.cmnParams.paramsType2.channelTimer[chid] = 0;
    a3fc:	3558      	adds	r5, #88	; 0x58
    a3fe:	00ad      	lsls	r5, r5, #2
    a400:	4b03      	ldr	r3, [pc, #12]	; (a410 <UpdateChannelIdStatusT3+0x64>)
    a402:	195d      	adds	r5, r3, r5
    a404:	2300      	movs	r3, #0
    a406:	722b      	strb	r3, [r5, #8]
    a408:	726b      	strb	r3, [r5, #9]
    a40a:	72ab      	strb	r3, [r5, #10]
    a40c:	72eb      	strb	r3, [r5, #11]
}
    a40e:	e7f4      	b.n	a3fa <UpdateChannelIdStatusT3+0x4e>
    a410:	200024d0 	.word	0x200024d0
    a414:	0000020e 	.word	0x0000020e
    a418:	0000020f 	.word	0x0000020f
    a41c:	0000dfe1 	.word	0x0000dfe1
    a420:	00000211 	.word	0x00000211

0000a424 <setChannelIdStatusT3>:
{
    a424:	b570      	push	{r4, r5, r6, lr}
    a426:	b082      	sub	sp, #8
	memcpy(&updateChid,attrInput,sizeof(UpdateChId_t));
    a428:	780d      	ldrb	r5, [r1, #0]
    a42a:	784e      	ldrb	r6, [r1, #1]
	valChid.channelIndex = updateChid.channelIndex;
    a42c:	a901      	add	r1, sp, #4
    a42e:	700d      	strb	r5, [r1, #0]
	valChid.allowedForDefaultChannels = ALL_CHANNELS;
    a430:	2301      	movs	r3, #1
    a432:	704b      	strb	r3, [r1, #1]
	if(ValidateChannelIdT2(CHANNEL_ID, &valChid) == LORAWAN_SUCCESS)
    a434:	2015      	movs	r0, #21
    a436:	4b0c      	ldr	r3, [pc, #48]	; (a468 <setChannelIdStatusT3+0x44>)
    a438:	4798      	blx	r3
    a43a:	0004      	movs	r4, r0
    a43c:	2808      	cmp	r0, #8
    a43e:	d003      	beq.n	a448 <setChannelIdStatusT3+0x24>
		retVal = LORAWAN_INVALID_PARAMETER;
    a440:	240a      	movs	r4, #10
}
    a442:	0020      	movs	r0, r4
    a444:	b002      	add	sp, #8
    a446:	bd70      	pop	{r4, r5, r6, pc}
		if( RegParams.band == ISM_KR920)
    a448:	232e      	movs	r3, #46	; 0x2e
    a44a:	4a08      	ldr	r2, [pc, #32]	; (a46c <setChannelIdStatusT3+0x48>)
    a44c:	5cd3      	ldrb	r3, [r2, r3]
    a44e:	2b04      	cmp	r3, #4
    a450:	d004      	beq.n	a45c <setChannelIdStatusT3+0x38>
		    UpdateChannelIdStatusT3(updateChid.channelIndex,updateChid.statusNew);
    a452:	0031      	movs	r1, r6
    a454:	0028      	movs	r0, r5
    a456:	4b06      	ldr	r3, [pc, #24]	; (a470 <setChannelIdStatusT3+0x4c>)
    a458:	4798      	blx	r3
    a45a:	e7f2      	b.n	a442 <setChannelIdStatusT3+0x1e>
			UpdateChannelIdStatusT4(updateChid.channelIndex,updateChid.statusNew);
    a45c:	0031      	movs	r1, r6
    a45e:	0028      	movs	r0, r5
    a460:	4b04      	ldr	r3, [pc, #16]	; (a474 <setChannelIdStatusT3+0x50>)
    a462:	4798      	blx	r3
    a464:	e7ed      	b.n	a442 <setChannelIdStatusT3+0x1e>
    a466:	46c0      	nop			; (mov r8, r8)
    a468:	0000993d 	.word	0x0000993d
    a46c:	200024d0 	.word	0x200024d0
    a470:	0000a3ad 	.word	0x0000a3ad
    a474:	0000a301 	.word	0x0000a301

0000a478 <LORAREG_GetAttr_JoinDutyCycleRemainingTime>:
{
    a478:	b530      	push	{r4, r5, lr}
    a47a:	b083      	sub	sp, #12
    a47c:	0014      	movs	r4, r2
	uint32_t timeremaining =0;
    a47e:	2300      	movs	r3, #0
    a480:	9301      	str	r3, [sp, #4]
	if(SwTimerIsRunning(RegParams.pJoinDutyCycleTimer->timerId))
    a482:	4920      	ldr	r1, [pc, #128]	; (a504 <LORAREG_GetAttr_JoinDutyCycleRemainingTime+0x8c>)
    a484:	7d0b      	ldrb	r3, [r1, #20]
    a486:	7d4a      	ldrb	r2, [r1, #21]
    a488:	0212      	lsls	r2, r2, #8
    a48a:	431a      	orrs	r2, r3
    a48c:	7d8b      	ldrb	r3, [r1, #22]
    a48e:	041b      	lsls	r3, r3, #16
    a490:	431a      	orrs	r2, r3
    a492:	7dcb      	ldrb	r3, [r1, #23]
    a494:	061b      	lsls	r3, r3, #24
    a496:	4313      	orrs	r3, r2
    a498:	7a18      	ldrb	r0, [r3, #8]
    a49a:	4b1b      	ldr	r3, [pc, #108]	; (a508 <LORAREG_GetAttr_JoinDutyCycleRemainingTime+0x90>)
    a49c:	4798      	blx	r3
    a49e:	2800      	cmp	r0, #0
    a4a0:	d107      	bne.n	a4b2 <LORAREG_GetAttr_JoinDutyCycleRemainingTime+0x3a>
	memcpy(attrOutput,&timeremaining,sizeof(uint32_t));
    a4a2:	2204      	movs	r2, #4
    a4a4:	a901      	add	r1, sp, #4
    a4a6:	0020      	movs	r0, r4
    a4a8:	4b18      	ldr	r3, [pc, #96]	; (a50c <LORAREG_GetAttr_JoinDutyCycleRemainingTime+0x94>)
    a4aa:	4798      	blx	r3
}
    a4ac:	2008      	movs	r0, #8
    a4ae:	b003      	add	sp, #12
    a4b0:	bd30      	pop	{r4, r5, pc}
		timeremaining = US_TO_MS(SwTimerReadValue (RegParams.pJoinDutyCycleTimer->timerId));
    a4b2:	4d14      	ldr	r5, [pc, #80]	; (a504 <LORAREG_GetAttr_JoinDutyCycleRemainingTime+0x8c>)
    a4b4:	7d2b      	ldrb	r3, [r5, #20]
    a4b6:	7d6a      	ldrb	r2, [r5, #21]
    a4b8:	0212      	lsls	r2, r2, #8
    a4ba:	431a      	orrs	r2, r3
    a4bc:	7dab      	ldrb	r3, [r5, #22]
    a4be:	041b      	lsls	r3, r3, #16
    a4c0:	431a      	orrs	r2, r3
    a4c2:	7deb      	ldrb	r3, [r5, #23]
    a4c4:	061b      	lsls	r3, r3, #24
    a4c6:	4313      	orrs	r3, r2
    a4c8:	7a18      	ldrb	r0, [r3, #8]
    a4ca:	4b11      	ldr	r3, [pc, #68]	; (a510 <LORAREG_GetAttr_JoinDutyCycleRemainingTime+0x98>)
    a4cc:	4798      	blx	r3
		timeremaining = timeremaining + RegParams.pJoinDutyCycleTimer->remainingtime;
    a4ce:	7d2b      	ldrb	r3, [r5, #20]
    a4d0:	7d6a      	ldrb	r2, [r5, #21]
    a4d2:	0212      	lsls	r2, r2, #8
    a4d4:	431a      	orrs	r2, r3
    a4d6:	7dab      	ldrb	r3, [r5, #22]
    a4d8:	041b      	lsls	r3, r3, #16
    a4da:	431a      	orrs	r2, r3
    a4dc:	7deb      	ldrb	r3, [r5, #23]
    a4de:	061b      	lsls	r3, r3, #24
    a4e0:	4313      	orrs	r3, r2
    a4e2:	791d      	ldrb	r5, [r3, #4]
    a4e4:	795a      	ldrb	r2, [r3, #5]
    a4e6:	0212      	lsls	r2, r2, #8
    a4e8:	432a      	orrs	r2, r5
    a4ea:	799d      	ldrb	r5, [r3, #6]
    a4ec:	042d      	lsls	r5, r5, #16
    a4ee:	432a      	orrs	r2, r5
    a4f0:	79dd      	ldrb	r5, [r3, #7]
    a4f2:	062d      	lsls	r5, r5, #24
    a4f4:	4315      	orrs	r5, r2
		timeremaining = US_TO_MS(SwTimerReadValue (RegParams.pJoinDutyCycleTimer->timerId));
    a4f6:	21fa      	movs	r1, #250	; 0xfa
    a4f8:	0089      	lsls	r1, r1, #2
    a4fa:	4b06      	ldr	r3, [pc, #24]	; (a514 <LORAREG_GetAttr_JoinDutyCycleRemainingTime+0x9c>)
    a4fc:	4798      	blx	r3
		timeremaining = timeremaining + RegParams.pJoinDutyCycleTimer->remainingtime;
    a4fe:	182d      	adds	r5, r5, r0
    a500:	9501      	str	r5, [sp, #4]
    a502:	e7ce      	b.n	a4a2 <LORAREG_GetAttr_JoinDutyCycleRemainingTime+0x2a>
    a504:	200024d0 	.word	0x200024d0
    a508:	0000eea9 	.word	0x0000eea9
    a50c:	00019d11 	.word	0x00019d11
    a510:	0000eebd 	.word	0x0000eebd
    a514:	000165ad 	.word	0x000165ad

0000a518 <LORAREG_GetAttr_Rx1WindowparamsType1>:
{
    a518:	b510      	push	{r4, lr}
    a51a:	b082      	sub	sp, #8
    a51c:	0010      	movs	r0, r2
	memcpy(&rx1WindowParamsReq,(Rx1WindowParamsReq_t *)attrInput,sizeof(Rx1WindowParamsReq_t));
    a51e:	784c      	ldrb	r4, [r1, #1]
    a520:	788b      	ldrb	r3, [r1, #2]
	if(rx1WindowParamReq->joining)
    a522:	780a      	ldrb	r2, [r1, #0]
    a524:	2a00      	cmp	r2, #0
    a526:	d007      	beq.n	a538 <LORAREG_GetAttr_Rx1WindowparamsType1+0x20>
		if (RegParams.lastUsedChannelIndex <= MAX_CHANNELS_BANDWIDTH_125_AU_NA) 
    a528:	232f      	movs	r3, #47	; 0x2f
    a52a:	4a23      	ldr	r2, [pc, #140]	; (a5b8 <LORAREG_GetAttr_Rx1WindowparamsType1+0xa0>)
    a52c:	5cd3      	ldrb	r3, [r2, r3]
    a52e:	2b40      	cmp	r3, #64	; 0x40
    a530:	d819      	bhi.n	a566 <LORAREG_GetAttr_Rx1WindowparamsType1+0x4e>
			rx1WindowParamReq->currDr = RegParams.cmnParams.paramsType1.minTxDR;
    a532:	2350      	movs	r3, #80	; 0x50
    a534:	33ff      	adds	r3, #255	; 0xff
    a536:	5cd3      	ldrb	r3, [r2, r3]
		            RegParams.cmnParams.paramsType1.RxParamWindowOffset1 - rx1WindowParamReq->drOffset;
    a538:	491f      	ldr	r1, [pc, #124]	; (a5b8 <LORAREG_GetAttr_Rx1WindowparamsType1+0xa0>)
    a53a:	2256      	movs	r2, #86	; 0x56
    a53c:	32ff      	adds	r2, #255	; 0xff
    a53e:	5c8a      	ldrb	r2, [r1, r2]
    a540:	1b12      	subs	r2, r2, r4
    a542:	189b      	adds	r3, r3, r2
    a544:	b2db      	uxtb	r3, r3
	rx1WindowParams->rx1Dr = rx1WindowParamReq->currDr + 
    a546:	466a      	mov	r2, sp
    a548:	7113      	strb	r3, [r2, #4]
	if(rx1WindowParams->rx1Dr > RegParams.cmnParams.paramsType1.maxRxDR)
    a54a:	22a9      	movs	r2, #169	; 0xa9
    a54c:	0052      	lsls	r2, r2, #1
    a54e:	5c8a      	ldrb	r2, [r1, r2]
    a550:	4293      	cmp	r3, r2
    a552:	d80d      	bhi.n	a570 <LORAREG_GetAttr_Rx1WindowparamsType1+0x58>
	else if(rx1WindowParams->rx1Dr < RegParams.cmnParams.paramsType1.minRxDR)
    a554:	2252      	movs	r2, #82	; 0x52
    a556:	32ff      	adds	r2, #255	; 0xff
    a558:	4917      	ldr	r1, [pc, #92]	; (a5b8 <LORAREG_GetAttr_Rx1WindowparamsType1+0xa0>)
    a55a:	5c8a      	ldrb	r2, [r1, r2]
    a55c:	4293      	cmp	r3, r2
    a55e:	d209      	bcs.n	a574 <LORAREG_GetAttr_Rx1WindowparamsType1+0x5c>
		rx1WindowParams->rx1Dr = RegParams.cmnParams.paramsType1.minRxDR;
    a560:	466b      	mov	r3, sp
    a562:	711a      	strb	r2, [r3, #4]
    a564:	e006      	b.n	a574 <LORAREG_GetAttr_Rx1WindowparamsType1+0x5c>
			rx1WindowParamReq->currDr = RegParams.cmnParams.paramsType1.maxTxDR;
    a566:	23a8      	movs	r3, #168	; 0xa8
    a568:	005b      	lsls	r3, r3, #1
    a56a:	4a13      	ldr	r2, [pc, #76]	; (a5b8 <LORAREG_GetAttr_Rx1WindowparamsType1+0xa0>)
    a56c:	5cd3      	ldrb	r3, [r2, r3]
    a56e:	e7e3      	b.n	a538 <LORAREG_GetAttr_Rx1WindowparamsType1+0x20>
		rx1WindowParams->rx1Dr = RegParams.cmnParams.paramsType1.maxRxDR;
    a570:	466b      	mov	r3, sp
    a572:	711a      	strb	r2, [r3, #4]
	rx1WindowParams->rx1Freq = GenerateFrequencyReception(RegParams.lastUsedChannelIndex % 8);
    a574:	4910      	ldr	r1, [pc, #64]	; (a5b8 <LORAREG_GetAttr_Rx1WindowparamsType1+0xa0>)
    a576:	232f      	movs	r3, #47	; 0x2f
    a578:	5ccc      	ldrb	r4, [r1, r3]
	channelFrequency = RegParams.cmnParams.paramsType1.DownStreamCh0Freq + FREQ_600KHZ * channelIndex;
    a57a:	3b28      	subs	r3, #40	; 0x28
    a57c:	4023      	ands	r3, r4
    a57e:	4c0f      	ldr	r4, [pc, #60]	; (a5bc <LORAREG_GetAttr_Rx1WindowparamsType1+0xa4>)
    a580:	435c      	muls	r4, r3
    a582:	234c      	movs	r3, #76	; 0x4c
    a584:	33ff      	adds	r3, #255	; 0xff
    a586:	5ccb      	ldrb	r3, [r1, r3]
    a588:	22a6      	movs	r2, #166	; 0xa6
    a58a:	0052      	lsls	r2, r2, #1
    a58c:	5c8a      	ldrb	r2, [r1, r2]
    a58e:	0212      	lsls	r2, r2, #8
    a590:	4313      	orrs	r3, r2
    a592:	224e      	movs	r2, #78	; 0x4e
    a594:	32ff      	adds	r2, #255	; 0xff
    a596:	5c8a      	ldrb	r2, [r1, r2]
    a598:	0412      	lsls	r2, r2, #16
    a59a:	431a      	orrs	r2, r3
    a59c:	23a7      	movs	r3, #167	; 0xa7
    a59e:	005b      	lsls	r3, r3, #1
    a5a0:	5ccb      	ldrb	r3, [r1, r3]
    a5a2:	061b      	lsls	r3, r3, #24
    a5a4:	4313      	orrs	r3, r2
    a5a6:	18e3      	adds	r3, r4, r3
	rx1WindowParams->rx1Freq = GenerateFrequencyReception(RegParams.lastUsedChannelIndex % 8);
    a5a8:	9300      	str	r3, [sp, #0]
	memcpy(attrOutput,&rx1WindowParamsResp,sizeof(Rx1WindowParams_t));
    a5aa:	2208      	movs	r2, #8
    a5ac:	4669      	mov	r1, sp
    a5ae:	4b04      	ldr	r3, [pc, #16]	; (a5c0 <LORAREG_GetAttr_Rx1WindowparamsType1+0xa8>)
    a5b0:	4798      	blx	r3
}
    a5b2:	2008      	movs	r0, #8
    a5b4:	b002      	add	sp, #8
    a5b6:	bd10      	pop	{r4, pc}
    a5b8:	200024d0 	.word	0x200024d0
    a5bc:	000927c0 	.word	0x000927c0
    a5c0:	00019d11 	.word	0x00019d11

0000a5c4 <LORAREG_GetAttr_DRangeChBandT1>:
{
    a5c4:	b5f0      	push	{r4, r5, r6, r7, lr}
    a5c6:	46c6      	mov	lr, r8
    a5c8:	b500      	push	{lr}
    a5ca:	b084      	sub	sp, #16
    a5cc:	9201      	str	r2, [sp, #4]
	memcpy(&bandDrReq,(BandDrReq_t *)attrInput,sizeof(BandDrReq_t));
    a5ce:	2204      	movs	r2, #4
    a5d0:	a803      	add	r0, sp, #12
    a5d2:	4b43      	ldr	r3, [pc, #268]	; (a6e0 <LORAREG_GetAttr_DRangeChBandT1+0x11c>)
    a5d4:	4798      	blx	r3
	if(ValidateChannelMaskCntl(CHANNEL_MASK_CNTL, (void *)&bandDrReq.chnlMaskCntl)	!= LORAWAN_SUCCESS)
    a5d6:	a903      	add	r1, sp, #12
    a5d8:	201b      	movs	r0, #27
    a5da:	4b42      	ldr	r3, [pc, #264]	; (a6e4 <LORAREG_GetAttr_DRangeChBandT1+0x120>)
    a5dc:	4798      	blx	r3
    a5de:	2808      	cmp	r0, #8
    a5e0:	d004      	beq.n	a5ec <LORAREG_GetAttr_DRangeChBandT1+0x28>
		result = LORAWAN_INVALID_PARAMETER;
    a5e2:	200a      	movs	r0, #10
}
    a5e4:	b004      	add	sp, #16
    a5e6:	bc04      	pop	{r2}
    a5e8:	4690      	mov	r8, r2
    a5ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
		chBandDr = getChBandDrT1(bandDrReq.chnlMaskCntl,bandDrReq.chnlMask);
    a5ec:	aa03      	add	r2, sp, #12
    a5ee:	7813      	ldrb	r3, [r2, #0]
    a5f0:	8857      	ldrh	r7, [r2, #2]
	if( RegParams.band == ISM_AU915)
    a5f2:	222e      	movs	r2, #46	; 0x2e
    a5f4:	493c      	ldr	r1, [pc, #240]	; (a6e8 <LORAREG_GetAttr_DRangeChBandT1+0x124>)
    a5f6:	5c89      	ldrb	r1, [r1, r2]
		auxMinDataRate = DR6;
    a5f8:	3903      	subs	r1, #3
    a5fa:	1e4a      	subs	r2, r1, #1
    a5fc:	4191      	sbcs	r1, r2
    a5fe:	3106      	adds	r1, #6
	switch (chMaskCntl)
    a600:	2b07      	cmp	r3, #7
    a602:	d869      	bhi.n	a6d8 <LORAREG_GetAttr_DRangeChBandT1+0x114>
    a604:	009a      	lsls	r2, r3, #2
    a606:	4d39      	ldr	r5, [pc, #228]	; (a6ec <LORAREG_GetAttr_DRangeChBandT1+0x128>)
    a608:	58aa      	ldr	r2, [r5, r2]
    a60a:	4697      	mov	pc, r2
			startingIndex = chMaskCntl << SHIFT4;
    a60c:	011b      	lsls	r3, r3, #4
    a60e:	b2db      	uxtb	r3, r3
			endingIndex = startingIndex + 16;
    a610:	001a      	movs	r2, r3
    a612:	3210      	adds	r2, #16
    a614:	b2d2      	uxtb	r2, r2
    a616:	4690      	mov	r8, r2
			for (i = startingIndex; i < endingIndex; i++)
    a618:	4293      	cmp	r3, r2
    a61a:	d25f      	bcs.n	a6dc <LORAREG_GetAttr_DRangeChBandT1+0x118>
				if ((RegParams.pChParams[i].dataRange.min < auxMinDataRate) && (((auxChannelMask & 0x0001) == 0x0001) || (auxChannelMask == 0)))
    a61c:	4e32      	ldr	r6, [pc, #200]	; (a6e8 <LORAREG_GetAttr_DRangeChBandT1+0x124>)
    a61e:	7935      	ldrb	r5, [r6, #4]
    a620:	7972      	ldrb	r2, [r6, #5]
    a622:	0212      	lsls	r2, r2, #8
    a624:	4315      	orrs	r5, r2
    a626:	79b2      	ldrb	r2, [r6, #6]
    a628:	0412      	lsls	r2, r2, #16
    a62a:	432a      	orrs	r2, r5
    a62c:	79f5      	ldrb	r5, [r6, #7]
    a62e:	062d      	lsls	r5, r5, #24
    a630:	4315      	orrs	r5, r2
    a632:	46ac      	mov	ip, r5
    a634:	2500      	movs	r5, #0
				if ((RegParams.pChParams[i].dataRange.max > auxMaxDataRate) && (((auxChannelMask & 0x0001) == 0x0001) || (auxChannelMask == 0)))
    a636:	2401      	movs	r4, #1
    a638:	e00c      	b.n	a654 <LORAREG_GetAttr_DRangeChBandT1+0x90>
					auxMinDataRate = RegParams.pChParams[i].dataRange.min;
    a63a:	0011      	movs	r1, r2
				if ((RegParams.pChParams[i].dataRange.max > auxMaxDataRate) && (((auxChannelMask & 0x0001) == 0x0001) || (auxChannelMask == 0)))
    a63c:	7872      	ldrb	r2, [r6, #1]
    a63e:	0912      	lsrs	r2, r2, #4
    a640:	42aa      	cmp	r2, r5
    a642:	dd02      	ble.n	a64a <LORAREG_GetAttr_DRangeChBandT1+0x86>
    a644:	423c      	tst	r4, r7
    a646:	d011      	beq.n	a66c <LORAREG_GetAttr_DRangeChBandT1+0xa8>
					auxMaxDataRate = RegParams.pChParams[i].dataRange.max;
    a648:	0015      	movs	r5, r2
				auxChannelMask = auxChannelMask >> SHIFT1;
    a64a:	087f      	lsrs	r7, r7, #1
			for (i = startingIndex; i < endingIndex; i++)
    a64c:	3301      	adds	r3, #1
    a64e:	b2db      	uxtb	r3, r3
    a650:	4598      	cmp	r8, r3
    a652:	d013      	beq.n	a67c <LORAREG_GetAttr_DRangeChBandT1+0xb8>
				if ((RegParams.pChParams[i].dataRange.min < auxMinDataRate) && (((auxChannelMask & 0x0001) == 0x0001) || (auxChannelMask == 0)))
    a654:	005e      	lsls	r6, r3, #1
    a656:	4466      	add	r6, ip
    a658:	7872      	ldrb	r2, [r6, #1]
    a65a:	0712      	lsls	r2, r2, #28
    a65c:	0f12      	lsrs	r2, r2, #28
    a65e:	428a      	cmp	r2, r1
    a660:	daec      	bge.n	a63c <LORAREG_GetAttr_DRangeChBandT1+0x78>
    a662:	423c      	tst	r4, r7
    a664:	d1e9      	bne.n	a63a <LORAREG_GetAttr_DRangeChBandT1+0x76>
    a666:	2f00      	cmp	r7, #0
    a668:	d1ef      	bne.n	a64a <LORAREG_GetAttr_DRangeChBandT1+0x86>
    a66a:	e7e6      	b.n	a63a <LORAREG_GetAttr_DRangeChBandT1+0x76>
				if ((RegParams.pChParams[i].dataRange.max > auxMaxDataRate) && (((auxChannelMask & 0x0001) == 0x0001) || (auxChannelMask == 0)))
    a66c:	2f00      	cmp	r7, #0
    a66e:	d0eb      	beq.n	a648 <LORAREG_GetAttr_DRangeChBandT1+0x84>
    a670:	e7eb      	b.n	a64a <LORAREG_GetAttr_DRangeChBandT1+0x86>
			auxMinDataRate = RegParams.cmnParams.paramsType1.maxTxDR;
    a672:	23a8      	movs	r3, #168	; 0xa8
    a674:	005b      	lsls	r3, r3, #1
    a676:	4a1c      	ldr	r2, [pc, #112]	; (a6e8 <LORAREG_GetAttr_DRangeChBandT1+0x124>)
    a678:	5cd1      	ldrb	r1, [r2, r3]
			auxMaxDataRate = RegParams.cmnParams.paramsType1.maxTxDR;
    a67a:	000d      	movs	r5, r1
    a67c:	012d      	lsls	r5, r5, #4
    a67e:	230f      	movs	r3, #15
    a680:	4019      	ands	r1, r3
    a682:	430d      	orrs	r5, r1
		memcpy(attrOutput,&chBandDr,sizeof(DataRange_t));
    a684:	9b01      	ldr	r3, [sp, #4]
    a686:	701d      	strb	r5, [r3, #0]
    a688:	e7ac      	b.n	a5e4 <LORAREG_GetAttr_DRangeChBandT1+0x20>
				if (RegParams.pChParams[i].dataRange.min < auxMinDataRate)
    a68a:	4d17      	ldr	r5, [pc, #92]	; (a6e8 <LORAREG_GetAttr_DRangeChBandT1+0x124>)
    a68c:	792b      	ldrb	r3, [r5, #4]
    a68e:	796a      	ldrb	r2, [r5, #5]
    a690:	0212      	lsls	r2, r2, #8
    a692:	431a      	orrs	r2, r3
    a694:	79ab      	ldrb	r3, [r5, #6]
    a696:	041b      	lsls	r3, r3, #16
    a698:	431a      	orrs	r2, r3
    a69a:	79eb      	ldrb	r3, [r5, #7]
    a69c:	061b      	lsls	r3, r3, #24
    a69e:	4313      	orrs	r3, r2
    a6a0:	001a      	movs	r2, r3
    a6a2:	3380      	adds	r3, #128	; 0x80
    a6a4:	001c      	movs	r4, r3
    a6a6:	2500      	movs	r5, #0
    a6a8:	e002      	b.n	a6b0 <LORAREG_GetAttr_DRangeChBandT1+0xec>
    a6aa:	3202      	adds	r2, #2
			for (i = 0; i < 64; i++)
    a6ac:	42a2      	cmp	r2, r4
    a6ae:	d00c      	beq.n	a6ca <LORAREG_GetAttr_DRangeChBandT1+0x106>
				if (RegParams.pChParams[i].dataRange.min < auxMinDataRate)
    a6b0:	0016      	movs	r6, r2
    a6b2:	7853      	ldrb	r3, [r2, #1]
    a6b4:	071b      	lsls	r3, r3, #28
    a6b6:	0f1b      	lsrs	r3, r3, #28
    a6b8:	428b      	cmp	r3, r1
    a6ba:	da00      	bge.n	a6be <LORAREG_GetAttr_DRangeChBandT1+0xfa>
					auxMinDataRate = RegParams.pChParams[i].dataRange.min;
    a6bc:	0019      	movs	r1, r3
				if (RegParams.pChParams[i].dataRange.max > auxMaxDataRate)
    a6be:	7873      	ldrb	r3, [r6, #1]
    a6c0:	091b      	lsrs	r3, r3, #4
    a6c2:	42ab      	cmp	r3, r5
    a6c4:	ddf1      	ble.n	a6aa <LORAREG_GetAttr_DRangeChBandT1+0xe6>
					auxMaxDataRate = RegParams.pChParams[i].dataRange.max;
    a6c6:	001d      	movs	r5, r3
    a6c8:	e7ef      	b.n	a6aa <LORAREG_GetAttr_DRangeChBandT1+0xe6>
			if (channelMask != 0)    // if there is at least one channel enabled with DR4
    a6ca:	2f00      	cmp	r7, #0
    a6cc:	d0d6      	beq.n	a67c <LORAREG_GetAttr_DRangeChBandT1+0xb8>
				auxMaxDataRate = RegParams.cmnParams.paramsType1.maxTxDR;
    a6ce:	23a8      	movs	r3, #168	; 0xa8
    a6d0:	005b      	lsls	r3, r3, #1
    a6d2:	4a05      	ldr	r2, [pc, #20]	; (a6e8 <LORAREG_GetAttr_DRangeChBandT1+0x124>)
    a6d4:	5cd5      	ldrb	r5, [r2, r3]
    a6d6:	e7d1      	b.n	a67c <LORAREG_GetAttr_DRangeChBandT1+0xb8>
	uint8_t auxMinDataRate = DR7, auxMaxDataRate = DR0, i;
    a6d8:	2500      	movs	r5, #0
    a6da:	e7cf      	b.n	a67c <LORAREG_GetAttr_DRangeChBandT1+0xb8>
    a6dc:	2500      	movs	r5, #0
    a6de:	e7cd      	b.n	a67c <LORAREG_GetAttr_DRangeChBandT1+0xb8>
    a6e0:	00019d11 	.word	0x00019d11
    a6e4:	00009a45 	.word	0x00009a45
    a6e8:	200024d0 	.word	0x200024d0
    a6ec:	00020100 	.word	0x00020100

0000a6f0 <LORAREG_GetAttr_DefRx2Freq>:
{
    a6f0:	b510      	push	{r4, lr}
    a6f2:	0010      	movs	r0, r2
	memcpy(attrOutput,&RegParams.DefRx2Freq,sizeof(uint32_t));
    a6f4:	2204      	movs	r2, #4
    a6f6:	4902      	ldr	r1, [pc, #8]	; (a700 <LORAREG_GetAttr_DefRx2Freq+0x10>)
    a6f8:	4b02      	ldr	r3, [pc, #8]	; (a704 <LORAREG_GetAttr_DefRx2Freq+0x14>)
    a6fa:	4798      	blx	r3
}
    a6fc:	2008      	movs	r0, #8
    a6fe:	bd10      	pop	{r4, pc}
    a700:	200024ec 	.word	0x200024ec
    a704:	00019d11 	.word	0x00019d11

0000a708 <LORAREG_GetAttr_DlFrequency>:
{
    a708:	b510      	push	{r4, lr}
    a70a:	0013      	movs	r3, r2
	channelId = *(uint8_t *)attrInput;
    a70c:	780a      	ldrb	r2, [r1, #0]
	if (channelId > RegParams.maxChannels)
    a70e:	212a      	movs	r1, #42	; 0x2a
    a710:	480d      	ldr	r0, [pc, #52]	; (a748 <LORAREG_GetAttr_DlFrequency+0x40>)
    a712:	5641      	ldrsb	r1, [r0, r1]
		result = LORAWAN_INVALID_PARAMETER;
    a714:	200a      	movs	r0, #10
	if (channelId > RegParams.maxChannels)
    a716:	428a      	cmp	r2, r1
    a718:	dd00      	ble.n	a71c <LORAREG_GetAttr_DlFrequency+0x14>
}
    a71a:	bd10      	pop	{r4, pc}
		memcpy(attrOutput,&(RegParams.pOtherChParams[channelId].rx1Frequency),sizeof(uint32_t));
    a71c:	4c0a      	ldr	r4, [pc, #40]	; (a748 <LORAREG_GetAttr_DlFrequency+0x40>)
    a71e:	7a21      	ldrb	r1, [r4, #8]
    a720:	7a60      	ldrb	r0, [r4, #9]
    a722:	0200      	lsls	r0, r0, #8
    a724:	4308      	orrs	r0, r1
    a726:	7aa1      	ldrb	r1, [r4, #10]
    a728:	0409      	lsls	r1, r1, #16
    a72a:	4308      	orrs	r0, r1
    a72c:	7ae1      	ldrb	r1, [r4, #11]
    a72e:	0609      	lsls	r1, r1, #24
    a730:	4301      	orrs	r1, r0
    a732:	0050      	lsls	r0, r2, #1
    a734:	1882      	adds	r2, r0, r2
    a736:	0092      	lsls	r2, r2, #2
    a738:	1889      	adds	r1, r1, r2
    a73a:	3104      	adds	r1, #4
    a73c:	2204      	movs	r2, #4
    a73e:	0018      	movs	r0, r3
    a740:	4b02      	ldr	r3, [pc, #8]	; (a74c <LORAREG_GetAttr_DlFrequency+0x44>)
    a742:	4798      	blx	r3
	StackRetStatus_t result = LORAWAN_SUCCESS;
    a744:	2008      	movs	r0, #8
    a746:	e7e8      	b.n	a71a <LORAREG_GetAttr_DlFrequency+0x12>
    a748:	200024d0 	.word	0x200024d0
    a74c:	00019d11 	.word	0x00019d11

0000a750 <LORAREG_GetAttr_DutyCycleTimer>:
{
    a750:	b5f0      	push	{r4, r5, r6, r7, lr}
    a752:	46d6      	mov	lr, sl
    a754:	464f      	mov	r7, r9
    a756:	4646      	mov	r6, r8
    a758:	b5c0      	push	{r6, r7, lr}
    a75a:	b084      	sub	sp, #16
    a75c:	9200      	str	r2, [sp, #0]
    currentDataRate = *(uint8_t *)attrInput;
    a75e:	780b      	ldrb	r3, [r1, #0]
    a760:	469c      	mov	ip, r3
    for (uint8_t i = 0; i < RegParams.maxChannels; i++)
    a762:	232a      	movs	r3, #42	; 0x2a
    a764:	4a5b      	ldr	r2, [pc, #364]	; (a8d4 <LORAREG_GetAttr_DutyCycleTimer+0x184>)
    a766:	56d6      	ldrsb	r6, [r2, r3]
    a768:	2e00      	cmp	r6, #0
    a76a:	dd66      	ble.n	a83a <LORAREG_GetAttr_DutyCycleTimer+0xea>
	    if ( (RegParams.pChParams[i].status == ENABLED) )
    a76c:	0013      	movs	r3, r2
    a76e:	7910      	ldrb	r0, [r2, #4]
    a770:	7952      	ldrb	r2, [r2, #5]
    a772:	0212      	lsls	r2, r2, #8
    a774:	4302      	orrs	r2, r0
    a776:	7998      	ldrb	r0, [r3, #6]
    a778:	0400      	lsls	r0, r0, #16
    a77a:	4302      	orrs	r2, r0
    a77c:	79d8      	ldrb	r0, [r3, #7]
    a77e:	0600      	lsls	r0, r0, #24
    a780:	4310      	orrs	r0, r2
		    if((RegParams.pSubBandParams[bandId].subBandTimeout != 0) && 
    a782:	7b1f      	ldrb	r7, [r3, #12]
    a784:	7b5a      	ldrb	r2, [r3, #13]
    a786:	0212      	lsls	r2, r2, #8
    a788:	433a      	orrs	r2, r7
    a78a:	7b9f      	ldrb	r7, [r3, #14]
    a78c:	043f      	lsls	r7, r7, #16
    a78e:	433a      	orrs	r2, r7
    a790:	7bdf      	ldrb	r7, [r3, #15]
    a792:	063f      	lsls	r7, r7, #24
    a794:	4317      	orrs	r7, r2
    a796:	2500      	movs	r5, #0
    a798:	2300      	movs	r3, #0
    a79a:	2201      	movs	r2, #1
    a79c:	4252      	negs	r2, r2
    a79e:	4691      	mov	r9, r2
		    bandId = RegParams.cmnParams.paramsType2.othChParams[i].subBandId;
    a7a0:	4a4c      	ldr	r2, [pc, #304]	; (a8d4 <LORAREG_GetAttr_DutyCycleTimer+0x184>)
    a7a2:	4690      	mov	r8, r2
			   (currentDataRate >= RegParams.pChParams[i].dataRange.min) && 
    a7a4:	4662      	mov	r2, ip
    a7a6:	9201      	str	r2, [sp, #4]
    a7a8:	e004      	b.n	a7b4 <LORAREG_GetAttr_DutyCycleTimer+0x64>
    for (uint8_t i = 0; i < RegParams.maxChannels; i++)
    a7aa:	3301      	adds	r3, #1
    a7ac:	b2db      	uxtb	r3, r3
    a7ae:	001d      	movs	r5, r3
    a7b0:	42b3      	cmp	r3, r6
    a7b2:	da27      	bge.n	a804 <LORAREG_GetAttr_DutyCycleTimer+0xb4>
	    if ( (RegParams.pChParams[i].status == ENABLED) )
    a7b4:	0059      	lsls	r1, r3, #1
    a7b6:	1841      	adds	r1, r0, r1
    a7b8:	780a      	ldrb	r2, [r1, #0]
    a7ba:	2a00      	cmp	r2, #0
    a7bc:	d0f5      	beq.n	a7aa <LORAREG_GetAttr_DutyCycleTimer+0x5a>
		    bandId = RegParams.cmnParams.paramsType2.othChParams[i].subBandId;
    a7be:	006a      	lsls	r2, r5, #1
    a7c0:	1952      	adds	r2, r2, r5
    a7c2:	0092      	lsls	r2, r2, #2
    a7c4:	4442      	add	r2, r8
    a7c6:	32ab      	adds	r2, #171	; 0xab
		    if((RegParams.pSubBandParams[bandId].subBandTimeout != 0) && 
    a7c8:	7815      	ldrb	r5, [r2, #0]
    a7ca:	006a      	lsls	r2, r5, #1
    a7cc:	1952      	adds	r2, r2, r5
    a7ce:	0092      	lsls	r2, r2, #2
    a7d0:	18ba      	adds	r2, r7, r2
    a7d2:	7a15      	ldrb	r5, [r2, #8]
    a7d4:	7a54      	ldrb	r4, [r2, #9]
    a7d6:	0224      	lsls	r4, r4, #8
    a7d8:	4325      	orrs	r5, r4
    a7da:	7a94      	ldrb	r4, [r2, #10]
    a7dc:	0424      	lsls	r4, r4, #16
    a7de:	4325      	orrs	r5, r4
    a7e0:	7ad2      	ldrb	r2, [r2, #11]
    a7e2:	0612      	lsls	r2, r2, #24
    a7e4:	432a      	orrs	r2, r5
    a7e6:	d0e0      	beq.n	a7aa <LORAREG_GetAttr_DutyCycleTimer+0x5a>
    a7e8:	454a      	cmp	r2, r9
    a7ea:	d8de      	bhi.n	a7aa <LORAREG_GetAttr_DutyCycleTimer+0x5a>
			   (currentDataRate >= RegParams.pChParams[i].dataRange.min) && 
    a7ec:	784d      	ldrb	r5, [r1, #1]
    a7ee:	072d      	lsls	r5, r5, #28
    a7f0:	0f2d      	lsrs	r5, r5, #28
			   (RegParams.pSubBandParams[bandId].subBandTimeout <= minimSubBandTimer) && 
    a7f2:	45ac      	cmp	ip, r5
    a7f4:	dbd9      	blt.n	a7aa <LORAREG_GetAttr_DutyCycleTimer+0x5a>
			   (currentDataRate <= RegParams.pChParams[i].dataRange.max) )
    a7f6:	7849      	ldrb	r1, [r1, #1]
    a7f8:	0909      	lsrs	r1, r1, #4
			   (currentDataRate >= RegParams.pChParams[i].dataRange.min) && 
    a7fa:	9c01      	ldr	r4, [sp, #4]
    a7fc:	428c      	cmp	r4, r1
    a7fe:	dcd4      	bgt.n	a7aa <LORAREG_GetAttr_DutyCycleTimer+0x5a>
			    minimSubBandTimer = RegParams.pSubBandParams[bandId].subBandTimeout;
    a800:	4691      	mov	r9, r2
    a802:	e7d2      	b.n	a7aa <LORAREG_GetAttr_DutyCycleTimer+0x5a>
    if((UINT32_MAX != minimSubBandTimer) && (minimSubBandTimer >= RegParams.cmnParams.paramsType2.aggregatedDutyCycleTimeout))
    a804:	464b      	mov	r3, r9
    a806:	3301      	adds	r3, #1
    a808:	d017      	beq.n	a83a <LORAREG_GetAttr_DutyCycleTimer+0xea>
    a80a:	4932      	ldr	r1, [pc, #200]	; (a8d4 <LORAREG_GetAttr_DutyCycleTimer+0x184>)
    a80c:	23ba      	movs	r3, #186	; 0xba
    a80e:	33ff      	adds	r3, #255	; 0xff
    a810:	5ccb      	ldrb	r3, [r1, r3]
    a812:	22dd      	movs	r2, #221	; 0xdd
    a814:	0052      	lsls	r2, r2, #1
    a816:	5c8a      	ldrb	r2, [r1, r2]
    a818:	0212      	lsls	r2, r2, #8
    a81a:	431a      	orrs	r2, r3
    a81c:	23bc      	movs	r3, #188	; 0xbc
    a81e:	33ff      	adds	r3, #255	; 0xff
    a820:	5ccb      	ldrb	r3, [r1, r3]
    a822:	041b      	lsls	r3, r3, #16
    a824:	431a      	orrs	r2, r3
    a826:	23de      	movs	r3, #222	; 0xde
    a828:	005b      	lsls	r3, r3, #1
    a82a:	5ccb      	ldrb	r3, [r1, r3]
    a82c:	061b      	lsls	r3, r3, #24
    a82e:	4313      	orrs	r3, r2
    a830:	4599      	cmp	r9, r3
    a832:	d302      	bcc.n	a83a <LORAREG_GetAttr_DutyCycleTimer+0xea>
	    minDutyCycleTimer = minimSubBandTimer;
    a834:	464b      	mov	r3, r9
    a836:	9303      	str	r3, [sp, #12]
    a838:	e013      	b.n	a862 <LORAREG_GetAttr_DutyCycleTimer+0x112>
	    minDutyCycleTimer = RegParams.cmnParams.paramsType2.aggregatedDutyCycleTimeout;
    a83a:	4926      	ldr	r1, [pc, #152]	; (a8d4 <LORAREG_GetAttr_DutyCycleTimer+0x184>)
    a83c:	23ba      	movs	r3, #186	; 0xba
    a83e:	33ff      	adds	r3, #255	; 0xff
    a840:	5ccb      	ldrb	r3, [r1, r3]
    a842:	22dd      	movs	r2, #221	; 0xdd
    a844:	0052      	lsls	r2, r2, #1
    a846:	5c8a      	ldrb	r2, [r1, r2]
    a848:	0212      	lsls	r2, r2, #8
    a84a:	431a      	orrs	r2, r3
    a84c:	23bc      	movs	r3, #188	; 0xbc
    a84e:	33ff      	adds	r3, #255	; 0xff
    a850:	5ccb      	ldrb	r3, [r1, r3]
    a852:	041b      	lsls	r3, r3, #16
    a854:	431a      	orrs	r2, r3
    a856:	23de      	movs	r3, #222	; 0xde
    a858:	005b      	lsls	r3, r3, #1
    a85a:	5ccb      	ldrb	r3, [r1, r3]
    a85c:	061b      	lsls	r3, r3, #24
    a85e:	4313      	orrs	r3, r2
    a860:	9303      	str	r3, [sp, #12]
    ticks = SwTimerReadValue (RegParams.pDutyCycleTimer->timerId);
    a862:	491c      	ldr	r1, [pc, #112]	; (a8d4 <LORAREG_GetAttr_DutyCycleTimer+0x184>)
    a864:	7c0b      	ldrb	r3, [r1, #16]
    a866:	7c4a      	ldrb	r2, [r1, #17]
    a868:	0212      	lsls	r2, r2, #8
    a86a:	431a      	orrs	r2, r3
    a86c:	7c8b      	ldrb	r3, [r1, #18]
    a86e:	041b      	lsls	r3, r3, #16
    a870:	431a      	orrs	r2, r3
    a872:	7ccb      	ldrb	r3, [r1, #19]
    a874:	061b      	lsls	r3, r3, #24
    a876:	4313      	orrs	r3, r2
    a878:	7918      	ldrb	r0, [r3, #4]
    a87a:	4b17      	ldr	r3, [pc, #92]	; (a8d8 <LORAREG_GetAttr_DutyCycleTimer+0x188>)
    a87c:	4798      	blx	r3
	if( minDutyCycleTimer != 0)
    a87e:	9e03      	ldr	r6, [sp, #12]
    a880:	2e00      	cmp	r6, #0
    a882:	d01b      	beq.n	a8bc <LORAREG_GetAttr_DutyCycleTimer+0x16c>
    delta = RegParams.pDutyCycleTimer->lastTimerValue - US_TO_MS(ticks);
    a884:	4913      	ldr	r1, [pc, #76]	; (a8d4 <LORAREG_GetAttr_DutyCycleTimer+0x184>)
    a886:	7c0b      	ldrb	r3, [r1, #16]
    a888:	7c4a      	ldrb	r2, [r1, #17]
    a88a:	0212      	lsls	r2, r2, #8
    a88c:	431a      	orrs	r2, r3
    a88e:	7c8b      	ldrb	r3, [r1, #18]
    a890:	041b      	lsls	r3, r3, #16
    a892:	431a      	orrs	r2, r3
    a894:	7ccb      	ldrb	r3, [r1, #19]
    a896:	061b      	lsls	r3, r3, #24
    a898:	4313      	orrs	r3, r2
    a89a:	781d      	ldrb	r5, [r3, #0]
    a89c:	785a      	ldrb	r2, [r3, #1]
    a89e:	0212      	lsls	r2, r2, #8
    a8a0:	432a      	orrs	r2, r5
    a8a2:	789d      	ldrb	r5, [r3, #2]
    a8a4:	042d      	lsls	r5, r5, #16
    a8a6:	432a      	orrs	r2, r5
    a8a8:	78dd      	ldrb	r5, [r3, #3]
    a8aa:	062d      	lsls	r5, r5, #24
    a8ac:	4315      	orrs	r5, r2
    a8ae:	21fa      	movs	r1, #250	; 0xfa
    a8b0:	0089      	lsls	r1, r1, #2
    a8b2:	4b0a      	ldr	r3, [pc, #40]	; (a8dc <LORAREG_GetAttr_DutyCycleTimer+0x18c>)
    a8b4:	4798      	blx	r3
    a8b6:	1a2d      	subs	r5, r5, r0
		minDutyCycleTimer = minDutyCycleTimer - delta; //Logically delta will not be greater than minDcTimer
    a8b8:	1b75      	subs	r5, r6, r5
    a8ba:	9503      	str	r5, [sp, #12]
    memcpy(attrOutput,&minDutyCycleTimer,sizeof(uint32_t));
    a8bc:	2204      	movs	r2, #4
    a8be:	a903      	add	r1, sp, #12
    a8c0:	9800      	ldr	r0, [sp, #0]
    a8c2:	4b07      	ldr	r3, [pc, #28]	; (a8e0 <LORAREG_GetAttr_DutyCycleTimer+0x190>)
    a8c4:	4798      	blx	r3
}
    a8c6:	2008      	movs	r0, #8
    a8c8:	b004      	add	sp, #16
    a8ca:	bc1c      	pop	{r2, r3, r4}
    a8cc:	4690      	mov	r8, r2
    a8ce:	4699      	mov	r9, r3
    a8d0:	46a2      	mov	sl, r4
    a8d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    a8d4:	200024d0 	.word	0x200024d0
    a8d8:	0000eebd 	.word	0x0000eebd
    a8dc:	000165ad 	.word	0x000165ad
    a8e0:	00019d11 	.word	0x00019d11

0000a8e4 <LORAREG_GetAttr_Rx1WindowparamsType2>:
{
    a8e4:	b500      	push	{lr}
    a8e6:	b083      	sub	sp, #12
    a8e8:	0010      	movs	r0, r2
	memcpy(&rx1WindowParamsReq,(Rx1WindowParamsReq_t *)attrInput,sizeof(Rx1WindowParamsReq_t));
    a8ea:	784a      	ldrb	r2, [r1, #1]
    a8ec:	788b      	ldrb	r3, [r1, #2]
    if (rx1WindowParamReq->currDr >= rx1WindowParamReq->drOffset)
    a8ee:	429a      	cmp	r2, r3
    a8f0:	d925      	bls.n	a93e <LORAREG_GetAttr_Rx1WindowparamsType2+0x5a>
        rx1WindowParams->rx1Dr = DR0;
    a8f2:	2300      	movs	r3, #0
    a8f4:	466a      	mov	r2, sp
    a8f6:	7113      	strb	r3, [r2, #4]
	rx1WindowParams->rx1Freq = RegParams.pOtherChParams[RegParams.lastUsedChannelIndex].rx1Frequency;			
    a8f8:	4913      	ldr	r1, [pc, #76]	; (a948 <LORAREG_GetAttr_Rx1WindowparamsType2+0x64>)
    a8fa:	7a0b      	ldrb	r3, [r1, #8]
    a8fc:	7a4a      	ldrb	r2, [r1, #9]
    a8fe:	0212      	lsls	r2, r2, #8
    a900:	4313      	orrs	r3, r2
    a902:	7a8a      	ldrb	r2, [r1, #10]
    a904:	0412      	lsls	r2, r2, #16
    a906:	431a      	orrs	r2, r3
    a908:	7acb      	ldrb	r3, [r1, #11]
    a90a:	061b      	lsls	r3, r3, #24
    a90c:	431a      	orrs	r2, r3
    a90e:	232f      	movs	r3, #47	; 0x2f
    a910:	5cc9      	ldrb	r1, [r1, r3]
    a912:	004b      	lsls	r3, r1, #1
    a914:	185b      	adds	r3, r3, r1
    a916:	009b      	lsls	r3, r3, #2
    a918:	189b      	adds	r3, r3, r2
    a91a:	7919      	ldrb	r1, [r3, #4]
    a91c:	795a      	ldrb	r2, [r3, #5]
    a91e:	0212      	lsls	r2, r2, #8
    a920:	4311      	orrs	r1, r2
    a922:	799a      	ldrb	r2, [r3, #6]
    a924:	0412      	lsls	r2, r2, #16
    a926:	430a      	orrs	r2, r1
    a928:	79db      	ldrb	r3, [r3, #7]
    a92a:	061b      	lsls	r3, r3, #24
    a92c:	4313      	orrs	r3, r2
    a92e:	9300      	str	r3, [sp, #0]
	memcpy(attrOutput,&rx1WindowParamsResp,sizeof(Rx1WindowParams_t));
    a930:	2208      	movs	r2, #8
    a932:	4669      	mov	r1, sp
    a934:	4b05      	ldr	r3, [pc, #20]	; (a94c <LORAREG_GetAttr_Rx1WindowparamsType2+0x68>)
    a936:	4798      	blx	r3
}
    a938:	2008      	movs	r0, #8
    a93a:	b003      	add	sp, #12
    a93c:	bd00      	pop	{pc}
        rx1WindowParams->rx1Dr = rx1WindowParamReq->currDr - rx1WindowParamReq->drOffset;
    a93e:	1a9b      	subs	r3, r3, r2
    a940:	466a      	mov	r2, sp
    a942:	7113      	strb	r3, [r2, #4]
    a944:	e7d8      	b.n	a8f8 <LORAREG_GetAttr_Rx1WindowparamsType2+0x14>
    a946:	46c0      	nop			; (mov r8, r8)
    a948:	200024d0 	.word	0x200024d0
    a94c:	00019d11 	.word	0x00019d11

0000a950 <LORAREG_GetAttr_DRangeChBandT2>:
{
    a950:	b5f0      	push	{r4, r5, r6, r7, lr}
    a952:	46c6      	mov	lr, r8
    a954:	b500      	push	{lr}
    a956:	b082      	sub	sp, #8
    a958:	4690      	mov	r8, r2
	memcpy(&bandDrReq,(BandDrReq_t *)attrInput,sizeof(BandDrReq_t));
    a95a:	ad01      	add	r5, sp, #4
    a95c:	2204      	movs	r2, #4
    a95e:	0028      	movs	r0, r5
    a960:	4b38      	ldr	r3, [pc, #224]	; (aa44 <LORAREG_GetAttr_DRangeChBandT2+0xf4>)
    a962:	4798      	blx	r3
	switch (chMaskCntl)
    a964:	782b      	ldrb	r3, [r5, #0]
    a966:	2b00      	cmp	r3, #0
    a968:	d017      	beq.n	a99a <LORAREG_GetAttr_DRangeChBandT2+0x4a>
    a96a:	2b06      	cmp	r3, #6
    a96c:	d159      	bne.n	aa22 <LORAREG_GetAttr_DRangeChBandT2+0xd2>
			for (i = 0; i < RegParams.maxChannels; i++)
    a96e:	3324      	adds	r3, #36	; 0x24
    a970:	4a35      	ldr	r2, [pc, #212]	; (aa48 <LORAREG_GetAttr_DRangeChBandT2+0xf8>)
    a972:	56d7      	ldrsb	r7, [r2, r3]
    a974:	2000      	movs	r0, #0
    a976:	2507      	movs	r5, #7
    a978:	2f00      	cmp	r7, #0
    a97a:	dd54      	ble.n	aa26 <LORAREG_GetAttr_DRangeChBandT2+0xd6>
				if (RegParams.pChParams[i].dataRange.min < auxMinDataRate)
    a97c:	4a32      	ldr	r2, [pc, #200]	; (aa48 <LORAREG_GetAttr_DRangeChBandT2+0xf8>)
    a97e:	7916      	ldrb	r6, [r2, #4]
    a980:	7953      	ldrb	r3, [r2, #5]
    a982:	021b      	lsls	r3, r3, #8
    a984:	4333      	orrs	r3, r6
    a986:	7996      	ldrb	r6, [r2, #6]
    a988:	0436      	lsls	r6, r6, #16
    a98a:	4333      	orrs	r3, r6
    a98c:	79d6      	ldrb	r6, [r2, #7]
    a98e:	0636      	lsls	r6, r6, #24
    a990:	431e      	orrs	r6, r3
    a992:	2000      	movs	r0, #0
    a994:	2507      	movs	r5, #7
    a996:	2200      	movs	r2, #0
    a998:	e035      	b.n	aa06 <LORAREG_GetAttr_DRangeChBandT2+0xb6>
			for (i = 0; i < RegParams.maxChannels; i++)
    a99a:	232a      	movs	r3, #42	; 0x2a
    a99c:	4a2a      	ldr	r2, [pc, #168]	; (aa48 <LORAREG_GetAttr_DRangeChBandT2+0xf8>)
    a99e:	56d3      	ldrsb	r3, [r2, r3]
    a9a0:	469c      	mov	ip, r3
    a9a2:	2b00      	cmp	r3, #0
    a9a4:	dd4a      	ble.n	aa3c <LORAREG_GetAttr_DRangeChBandT2+0xec>
		chBandDr = getChBandDrT2(bandDrReq.chnlMaskCntl,bandDrReq.chnlMask);
    a9a6:	ab01      	add	r3, sp, #4
    a9a8:	885e      	ldrh	r6, [r3, #2]
				if ((RegParams.pChParams[i].dataRange.min < auxMinDataRate) && ((auxChannelMask & 0x0001) == 0x0001))
    a9aa:	7917      	ldrb	r7, [r2, #4]
    a9ac:	7953      	ldrb	r3, [r2, #5]
    a9ae:	021b      	lsls	r3, r3, #8
    a9b0:	433b      	orrs	r3, r7
    a9b2:	7997      	ldrb	r7, [r2, #6]
    a9b4:	043f      	lsls	r7, r7, #16
    a9b6:	433b      	orrs	r3, r7
    a9b8:	79d7      	ldrb	r7, [r2, #7]
    a9ba:	063f      	lsls	r7, r7, #24
    a9bc:	431f      	orrs	r7, r3
    a9be:	2000      	movs	r0, #0
    a9c0:	2507      	movs	r5, #7
    a9c2:	2200      	movs	r2, #0
				if ((RegParams.pChParams[i].dataRange.max > auxMaxDataRate) && ((auxChannelMask & 0x0001) == 0x0001))
    a9c4:	2401      	movs	r4, #1
    a9c6:	e00b      	b.n	a9e0 <LORAREG_GetAttr_DRangeChBandT2+0x90>
    a9c8:	784b      	ldrb	r3, [r1, #1]
    a9ca:	091b      	lsrs	r3, r3, #4
    a9cc:	4283      	cmp	r3, r0
    a9ce:	dd02      	ble.n	a9d6 <LORAREG_GetAttr_DRangeChBandT2+0x86>
    a9d0:	4234      	tst	r4, r6
    a9d2:	d000      	beq.n	a9d6 <LORAREG_GetAttr_DRangeChBandT2+0x86>
					auxMaxDataRate = RegParams.pChParams[i].dataRange.max;
    a9d4:	0018      	movs	r0, r3
				auxChannelMask = auxChannelMask >> SHIFT1;
    a9d6:	0876      	lsrs	r6, r6, #1
			for (i = 0; i < RegParams.maxChannels; i++)
    a9d8:	3201      	adds	r2, #1
    a9da:	b2d2      	uxtb	r2, r2
    a9dc:	4562      	cmp	r2, ip
    a9de:	da22      	bge.n	aa26 <LORAREG_GetAttr_DRangeChBandT2+0xd6>
				if ((RegParams.pChParams[i].dataRange.min < auxMinDataRate) && ((auxChannelMask & 0x0001) == 0x0001))
    a9e0:	0051      	lsls	r1, r2, #1
    a9e2:	1879      	adds	r1, r7, r1
    a9e4:	784b      	ldrb	r3, [r1, #1]
    a9e6:	071b      	lsls	r3, r3, #28
    a9e8:	0f1b      	lsrs	r3, r3, #28
    a9ea:	42ab      	cmp	r3, r5
    a9ec:	daec      	bge.n	a9c8 <LORAREG_GetAttr_DRangeChBandT2+0x78>
    a9ee:	4234      	tst	r4, r6
    a9f0:	d0f1      	beq.n	a9d6 <LORAREG_GetAttr_DRangeChBandT2+0x86>
					auxMinDataRate = RegParams.pChParams[i].dataRange.min;
    a9f2:	001d      	movs	r5, r3
				if ((RegParams.pChParams[i].dataRange.max > auxMaxDataRate) && ((auxChannelMask & 0x0001) == 0x0001))
    a9f4:	784b      	ldrb	r3, [r1, #1]
    a9f6:	091b      	lsrs	r3, r3, #4
    a9f8:	4298      	cmp	r0, r3
    a9fa:	dbeb      	blt.n	a9d4 <LORAREG_GetAttr_DRangeChBandT2+0x84>
    a9fc:	e7eb      	b.n	a9d6 <LORAREG_GetAttr_DRangeChBandT2+0x86>
			for (i = 0; i < RegParams.maxChannels; i++)
    a9fe:	3201      	adds	r2, #1
    aa00:	b2d2      	uxtb	r2, r2
    aa02:	42ba      	cmp	r2, r7
    aa04:	da0f      	bge.n	aa26 <LORAREG_GetAttr_DRangeChBandT2+0xd6>
				if (RegParams.pChParams[i].dataRange.min < auxMinDataRate)
    aa06:	0051      	lsls	r1, r2, #1
    aa08:	1871      	adds	r1, r6, r1
    aa0a:	784b      	ldrb	r3, [r1, #1]
    aa0c:	071b      	lsls	r3, r3, #28
    aa0e:	0f1b      	lsrs	r3, r3, #28
    aa10:	42ab      	cmp	r3, r5
    aa12:	da00      	bge.n	aa16 <LORAREG_GetAttr_DRangeChBandT2+0xc6>
					auxMinDataRate = RegParams.pChParams[i].dataRange.min;
    aa14:	001d      	movs	r5, r3
				if (RegParams.pChParams[i].dataRange.max > auxMaxDataRate)
    aa16:	784b      	ldrb	r3, [r1, #1]
    aa18:	091b      	lsrs	r3, r3, #4
    aa1a:	4283      	cmp	r3, r0
    aa1c:	ddef      	ble.n	a9fe <LORAREG_GetAttr_DRangeChBandT2+0xae>
					auxMaxDataRate = RegParams.pChParams[i].dataRange.max;
    aa1e:	0018      	movs	r0, r3
    aa20:	e7ed      	b.n	a9fe <LORAREG_GetAttr_DRangeChBandT2+0xae>
			auxMaxDataRate = 0xFF;
    aa22:	20ff      	movs	r0, #255	; 0xff
			auxMinDataRate = 0xFF;
    aa24:	25ff      	movs	r5, #255	; 0xff
    aa26:	0100      	lsls	r0, r0, #4
    aa28:	230f      	movs	r3, #15
    aa2a:	401d      	ands	r5, r3
    aa2c:	4328      	orrs	r0, r5
		memcpy(attrOutput,&chBandDr,sizeof(DataRange_t));
    aa2e:	4643      	mov	r3, r8
    aa30:	7018      	strb	r0, [r3, #0]
}
    aa32:	2008      	movs	r0, #8
    aa34:	b002      	add	sp, #8
    aa36:	bc04      	pop	{r2}
    aa38:	4690      	mov	r8, r2
    aa3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
			for (i = 0; i < RegParams.maxChannels; i++)
    aa3c:	2000      	movs	r0, #0
    aa3e:	2507      	movs	r5, #7
    aa40:	e7f1      	b.n	aa26 <LORAREG_GetAttr_DRangeChBandT2+0xd6>
    aa42:	46c0      	nop			; (mov r8, r8)
    aa44:	00019d11 	.word	0x00019d11
    aa48:	200024d0 	.word	0x200024d0

0000aa4c <LORAREG_GetAttr_FreqT2>:
{
    aa4c:	b510      	push	{r4, lr}
    aa4e:	0014      	movs	r4, r2
	channelId = *(uint8_t *)attrInput;
    aa50:	780b      	ldrb	r3, [r1, #0]
	if(channelId > RegParams.maxChannels)
    aa52:	222a      	movs	r2, #42	; 0x2a
    aa54:	490d      	ldr	r1, [pc, #52]	; (aa8c <LORAREG_GetAttr_FreqT2+0x40>)
    aa56:	568a      	ldrsb	r2, [r1, r2]
		return LORAWAN_INVALID_PARAMETER;
    aa58:	200a      	movs	r0, #10
	if(channelId > RegParams.maxChannels)
    aa5a:	4293      	cmp	r3, r2
    aa5c:	dd00      	ble.n	aa60 <LORAREG_GetAttr_FreqT2+0x14>
}
    aa5e:	bd10      	pop	{r4, pc}
		memcpy(attrOutput,(&RegParams.pOtherChParams[channelId].ulfrequency),sizeof(uint32_t));
    aa60:	0008      	movs	r0, r1
    aa62:	7a09      	ldrb	r1, [r1, #8]
    aa64:	7a42      	ldrb	r2, [r0, #9]
    aa66:	0212      	lsls	r2, r2, #8
    aa68:	430a      	orrs	r2, r1
    aa6a:	7a81      	ldrb	r1, [r0, #10]
    aa6c:	0409      	lsls	r1, r1, #16
    aa6e:	430a      	orrs	r2, r1
    aa70:	7ac1      	ldrb	r1, [r0, #11]
    aa72:	0609      	lsls	r1, r1, #24
    aa74:	4311      	orrs	r1, r2
    aa76:	005a      	lsls	r2, r3, #1
    aa78:	18d3      	adds	r3, r2, r3
    aa7a:	009b      	lsls	r3, r3, #2
    aa7c:	18c9      	adds	r1, r1, r3
    aa7e:	2204      	movs	r2, #4
    aa80:	0020      	movs	r0, r4
    aa82:	4b03      	ldr	r3, [pc, #12]	; (aa90 <LORAREG_GetAttr_FreqT2+0x44>)
    aa84:	4798      	blx	r3
	return result;
    aa86:	2008      	movs	r0, #8
    aa88:	e7e9      	b.n	aa5e <LORAREG_GetAttr_FreqT2+0x12>
    aa8a:	46c0      	nop			; (mov r8, r8)
    aa8c:	200024d0 	.word	0x200024d0
    aa90:	00019d11 	.word	0x00019d11

0000aa94 <LORAREG_GetAttr_Rx1WindowparamsType4>:
{
    aa94:	b510      	push	{r4, lr}
    aa96:	b082      	sub	sp, #8
    aa98:	0010      	movs	r0, r2
	if((((1 << RegParams.band) & (ISM_ASBAND)) || ((1 << RegParams.band) & (1 << ISM_JPN923)) != 0) &&  rx1WindowParamReq->joining)
    aa9a:	232e      	movs	r3, #46	; 0x2e
    aa9c:	4a37      	ldr	r2, [pc, #220]	; (ab7c <LORAREG_GetAttr_Rx1WindowparamsType4+0xe8>)
    aa9e:	5cd2      	ldrb	r2, [r2, r3]
    aaa0:	4b37      	ldr	r3, [pc, #220]	; (ab80 <LORAREG_GetAttr_Rx1WindowparamsType4+0xec>)
    aaa2:	4113      	asrs	r3, r2
    aaa4:	07db      	lsls	r3, r3, #31
    aaa6:	d502      	bpl.n	aaae <LORAREG_GetAttr_Rx1WindowparamsType4+0x1a>
    aaa8:	780b      	ldrb	r3, [r1, #0]
    aaaa:	2b00      	cmp	r3, #0
    aaac:	d116      	bne.n	aadc <LORAREG_GetAttr_Rx1WindowparamsType4+0x48>
	if(RegParams.cmnParams.paramsType2.txParams.downlinkDwellTime == 1)
    aaae:	23e1      	movs	r3, #225	; 0xe1
    aab0:	005b      	lsls	r3, r3, #1
    aab2:	4a32      	ldr	r2, [pc, #200]	; (ab7c <LORAREG_GetAttr_Rx1WindowparamsType4+0xe8>)
    aab4:	5cd4      	ldrb	r4, [r2, r3]
		minDR = DR2;
    aab6:	3bc1      	subs	r3, #193	; 0xc1
    aab8:	3bff      	subs	r3, #255	; 0xff
    aaba:	401c      	ands	r4, r3
	memcpy(&rx1WindowParamsReq,(Rx1WindowParamsReq_t *)attrInput,sizeof(Rx1WindowParamsReq_t));
    aabc:	784b      	ldrb	r3, [r1, #1]
	effectiveDROffset = (rx1WindowParamReq->drOffset > maxDR) ? (maxDR - rx1WindowParamReq->drOffset) : (rx1WindowParamReq->drOffset);
    aabe:	2b05      	cmp	r3, #5
    aac0:	d92c      	bls.n	ab1c <LORAREG_GetAttr_Rx1WindowparamsType4+0x88>
    aac2:	2205      	movs	r2, #5
    aac4:	1ad3      	subs	r3, r2, r3
    aac6:	b25b      	sxtb	r3, r3
	memcpy(&rx1WindowParamsReq,(Rx1WindowParamsReq_t *)attrInput,sizeof(Rx1WindowParamsReq_t));
    aac8:	788a      	ldrb	r2, [r1, #2]
	if (rx1WindowParamReq->currDr >= effectiveDROffset)
    aaca:	429a      	cmp	r2, r3
    aacc:	db31      	blt.n	ab32 <LORAREG_GetAttr_Rx1WindowparamsType4+0x9e>
		rx1WindowParams->rx1Dr = rx1WindowParamReq->currDr - effectiveDROffset;
    aace:	1ad3      	subs	r3, r2, r3
    aad0:	b2db      	uxtb	r3, r3
		if(rx1WindowParams->rx1Dr < minDR)
    aad2:	42a3      	cmp	r3, r4
    aad4:	d224      	bcs.n	ab20 <LORAREG_GetAttr_Rx1WindowparamsType4+0x8c>
			rx1WindowParams->rx1Dr = minDR;
    aad6:	466b      	mov	r3, sp
    aad8:	711c      	strb	r4, [r3, #4]
    aada:	e02c      	b.n	ab36 <LORAREG_GetAttr_Rx1WindowparamsType4+0xa2>
		rx1WindowParams->rx1Dr = DR2;
    aadc:	2302      	movs	r3, #2
    aade:	466a      	mov	r2, sp
    aae0:	7113      	strb	r3, [r2, #4]
		rx1WindowParams->rx1Freq = RegParams.pOtherChParams[RegParams.lastUsedChannelIndex].rx1Frequency;
    aae2:	4926      	ldr	r1, [pc, #152]	; (ab7c <LORAREG_GetAttr_Rx1WindowparamsType4+0xe8>)
    aae4:	7a0b      	ldrb	r3, [r1, #8]
    aae6:	7a4a      	ldrb	r2, [r1, #9]
    aae8:	0212      	lsls	r2, r2, #8
    aaea:	4313      	orrs	r3, r2
    aaec:	7a8a      	ldrb	r2, [r1, #10]
    aaee:	0412      	lsls	r2, r2, #16
    aaf0:	431a      	orrs	r2, r3
    aaf2:	7acb      	ldrb	r3, [r1, #11]
    aaf4:	061b      	lsls	r3, r3, #24
    aaf6:	431a      	orrs	r2, r3
    aaf8:	232f      	movs	r3, #47	; 0x2f
    aafa:	5cc9      	ldrb	r1, [r1, r3]
    aafc:	004b      	lsls	r3, r1, #1
    aafe:	185b      	adds	r3, r3, r1
    ab00:	009b      	lsls	r3, r3, #2
    ab02:	189b      	adds	r3, r3, r2
    ab04:	7919      	ldrb	r1, [r3, #4]
    ab06:	795a      	ldrb	r2, [r3, #5]
    ab08:	0212      	lsls	r2, r2, #8
    ab0a:	4311      	orrs	r1, r2
    ab0c:	799a      	ldrb	r2, [r3, #6]
    ab0e:	0412      	lsls	r2, r2, #16
    ab10:	430a      	orrs	r2, r1
    ab12:	79db      	ldrb	r3, [r3, #7]
    ab14:	061b      	lsls	r3, r3, #24
    ab16:	4313      	orrs	r3, r2
    ab18:	9300      	str	r3, [sp, #0]
    ab1a:	e028      	b.n	ab6e <LORAREG_GetAttr_Rx1WindowparamsType4+0xda>
	effectiveDROffset = (rx1WindowParamReq->drOffset > maxDR) ? (maxDR - rx1WindowParamReq->drOffset) : (rx1WindowParamReq->drOffset);
    ab1c:	b25b      	sxtb	r3, r3
    ab1e:	e7d3      	b.n	aac8 <LORAREG_GetAttr_Rx1WindowparamsType4+0x34>
		else if(rx1WindowParams->rx1Dr > maxDR)
    ab20:	2b05      	cmp	r3, #5
    ab22:	d802      	bhi.n	ab2a <LORAREG_GetAttr_Rx1WindowparamsType4+0x96>
		rx1WindowParams->rx1Dr = rx1WindowParamReq->currDr - effectiveDROffset;
    ab24:	466a      	mov	r2, sp
    ab26:	7113      	strb	r3, [r2, #4]
    ab28:	e005      	b.n	ab36 <LORAREG_GetAttr_Rx1WindowparamsType4+0xa2>
			rx1WindowParams->rx1Dr = maxDR;
    ab2a:	2305      	movs	r3, #5
    ab2c:	466a      	mov	r2, sp
    ab2e:	7113      	strb	r3, [r2, #4]
    ab30:	e001      	b.n	ab36 <LORAREG_GetAttr_Rx1WindowparamsType4+0xa2>
		rx1WindowParams->rx1Dr = minDR;
    ab32:	466b      	mov	r3, sp
    ab34:	711c      	strb	r4, [r3, #4]
	rx1WindowParams->rx1Freq = RegParams.pOtherChParams[RegParams.lastUsedChannelIndex].rx1Frequency;
    ab36:	4911      	ldr	r1, [pc, #68]	; (ab7c <LORAREG_GetAttr_Rx1WindowparamsType4+0xe8>)
    ab38:	7a0b      	ldrb	r3, [r1, #8]
    ab3a:	7a4a      	ldrb	r2, [r1, #9]
    ab3c:	0212      	lsls	r2, r2, #8
    ab3e:	4313      	orrs	r3, r2
    ab40:	7a8a      	ldrb	r2, [r1, #10]
    ab42:	0412      	lsls	r2, r2, #16
    ab44:	431a      	orrs	r2, r3
    ab46:	7acb      	ldrb	r3, [r1, #11]
    ab48:	061b      	lsls	r3, r3, #24
    ab4a:	431a      	orrs	r2, r3
    ab4c:	232f      	movs	r3, #47	; 0x2f
    ab4e:	5cc9      	ldrb	r1, [r1, r3]
    ab50:	004b      	lsls	r3, r1, #1
    ab52:	185b      	adds	r3, r3, r1
    ab54:	009b      	lsls	r3, r3, #2
    ab56:	189b      	adds	r3, r3, r2
    ab58:	7919      	ldrb	r1, [r3, #4]
    ab5a:	795a      	ldrb	r2, [r3, #5]
    ab5c:	0212      	lsls	r2, r2, #8
    ab5e:	4311      	orrs	r1, r2
    ab60:	799a      	ldrb	r2, [r3, #6]
    ab62:	0412      	lsls	r2, r2, #16
    ab64:	430a      	orrs	r2, r1
    ab66:	79db      	ldrb	r3, [r3, #7]
    ab68:	061b      	lsls	r3, r3, #24
    ab6a:	4313      	orrs	r3, r2
    ab6c:	9300      	str	r3, [sp, #0]
	memcpy(attrOutput,&rx1WindowParamsResp,sizeof(Rx1WindowParams_t));
    ab6e:	2208      	movs	r2, #8
    ab70:	4669      	mov	r1, sp
    ab72:	4b04      	ldr	r3, [pc, #16]	; (ab84 <LORAREG_GetAttr_Rx1WindowparamsType4+0xf0>)
    ab74:	4798      	blx	r3
}
    ab76:	2008      	movs	r0, #8
    ab78:	b002      	add	sp, #8
    ab7a:	bd10      	pop	{r4, pc}
    ab7c:	200024d0 	.word	0x200024d0
    ab80:	00007fe0 	.word	0x00007fe0
    ab84:	00019d11 	.word	0x00019d11

0000ab88 <LORAREG_GetAttr_FreqT3>:
{
    ab88:	b510      	push	{r4, lr}
    ab8a:	0014      	movs	r4, r2
	channelId = *(uint8_t *)attrInput;
    ab8c:	780b      	ldrb	r3, [r1, #0]
	if(channelId > RegParams.maxChannels) 
    ab8e:	222a      	movs	r2, #42	; 0x2a
    ab90:	490d      	ldr	r1, [pc, #52]	; (abc8 <LORAREG_GetAttr_FreqT3+0x40>)
    ab92:	568a      	ldrsb	r2, [r1, r2]
		result = LORAWAN_INVALID_PARAMETER;
    ab94:	200a      	movs	r0, #10
	if(channelId > RegParams.maxChannels) 
    ab96:	4293      	cmp	r3, r2
    ab98:	dd00      	ble.n	ab9c <LORAREG_GetAttr_FreqT3+0x14>
}
    ab9a:	bd10      	pop	{r4, pc}
		memcpy(attrOutput,(&RegParams.pOtherChParams[channelId].ulfrequency),sizeof(uint32_t));
    ab9c:	0008      	movs	r0, r1
    ab9e:	7a09      	ldrb	r1, [r1, #8]
    aba0:	7a42      	ldrb	r2, [r0, #9]
    aba2:	0212      	lsls	r2, r2, #8
    aba4:	430a      	orrs	r2, r1
    aba6:	7a81      	ldrb	r1, [r0, #10]
    aba8:	0409      	lsls	r1, r1, #16
    abaa:	430a      	orrs	r2, r1
    abac:	7ac1      	ldrb	r1, [r0, #11]
    abae:	0609      	lsls	r1, r1, #24
    abb0:	4311      	orrs	r1, r2
    abb2:	005a      	lsls	r2, r3, #1
    abb4:	18d3      	adds	r3, r2, r3
    abb6:	009b      	lsls	r3, r3, #2
    abb8:	18c9      	adds	r1, r1, r3
    abba:	2204      	movs	r2, #4
    abbc:	0020      	movs	r0, r4
    abbe:	4b03      	ldr	r3, [pc, #12]	; (abcc <LORAREG_GetAttr_FreqT3+0x44>)
    abc0:	4798      	blx	r3
	StackRetStatus_t result = LORAWAN_SUCCESS;
    abc2:	2008      	movs	r0, #8
    abc4:	e7e9      	b.n	ab9a <LORAREG_GetAttr_FreqT3+0x12>
    abc6:	46c0      	nop			; (mov r8, r8)
    abc8:	200024d0 	.word	0x200024d0
    abcc:	00019d11 	.word	0x00019d11

0000abd0 <LORAREG_GetAttr_Rx1WindowparamsType3>:
{
    abd0:	b500      	push	{lr}
    abd2:	b083      	sub	sp, #12
    abd4:	0010      	movs	r0, r2
	memcpy(&rx1WindowParamsReq,(Rx1WindowParamsReq_t *)attrInput,sizeof(Rx1WindowParamsReq_t));
    abd6:	784b      	ldrb	r3, [r1, #1]
    abd8:	788a      	ldrb	r2, [r1, #2]
	effectiveDROffset = (rx1WindowParamReq->drOffset > maxDR) ? (maxDR - rx1WindowParamReq->drOffset) : (rx1WindowParamReq->drOffset);
    abda:	2b05      	cmp	r3, #5
    abdc:	d90b      	bls.n	abf6 <LORAREG_GetAttr_Rx1WindowparamsType3+0x26>
    abde:	2105      	movs	r1, #5
    abe0:	1acb      	subs	r3, r1, r3
    abe2:	b25b      	sxtb	r3, r3
    if (rx1WindowParamReq->currDr >= effectiveDROffset)
    abe4:	429a      	cmp	r2, r3
    abe6:	db0c      	blt.n	ac02 <LORAREG_GetAttr_Rx1WindowparamsType3+0x32>
        rx1WindowParams->rx1Dr = rx1WindowParamReq->currDr - effectiveDROffset;
    abe8:	1ad3      	subs	r3, r2, r3
    abea:	b2db      	uxtb	r3, r3
		else if(rx1WindowParams->rx1Dr > maxDR)
    abec:	2b05      	cmp	r3, #5
    abee:	d804      	bhi.n	abfa <LORAREG_GetAttr_Rx1WindowparamsType3+0x2a>
        rx1WindowParams->rx1Dr = rx1WindowParamReq->currDr - effectiveDROffset;
    abf0:	466a      	mov	r2, sp
    abf2:	7113      	strb	r3, [r2, #4]
    abf4:	e008      	b.n	ac08 <LORAREG_GetAttr_Rx1WindowparamsType3+0x38>
	effectiveDROffset = (rx1WindowParamReq->drOffset > maxDR) ? (maxDR - rx1WindowParamReq->drOffset) : (rx1WindowParamReq->drOffset);
    abf6:	b25b      	sxtb	r3, r3
    abf8:	e7f4      	b.n	abe4 <LORAREG_GetAttr_Rx1WindowparamsType3+0x14>
			rx1WindowParams->rx1Dr = maxDR;
    abfa:	2305      	movs	r3, #5
    abfc:	466a      	mov	r2, sp
    abfe:	7113      	strb	r3, [r2, #4]
    ac00:	e002      	b.n	ac08 <LORAREG_GetAttr_Rx1WindowparamsType3+0x38>
        rx1WindowParams->rx1Dr = minDR;
    ac02:	2300      	movs	r3, #0
    ac04:	466a      	mov	r2, sp
    ac06:	7113      	strb	r3, [r2, #4]
	rx1WindowParams->rx1Freq = RegParams.pOtherChParams[RegParams.lastUsedChannelIndex].rx1Frequency;			
    ac08:	4911      	ldr	r1, [pc, #68]	; (ac50 <LORAREG_GetAttr_Rx1WindowparamsType3+0x80>)
    ac0a:	7a0b      	ldrb	r3, [r1, #8]
    ac0c:	7a4a      	ldrb	r2, [r1, #9]
    ac0e:	0212      	lsls	r2, r2, #8
    ac10:	4313      	orrs	r3, r2
    ac12:	7a8a      	ldrb	r2, [r1, #10]
    ac14:	0412      	lsls	r2, r2, #16
    ac16:	431a      	orrs	r2, r3
    ac18:	7acb      	ldrb	r3, [r1, #11]
    ac1a:	061b      	lsls	r3, r3, #24
    ac1c:	431a      	orrs	r2, r3
    ac1e:	232f      	movs	r3, #47	; 0x2f
    ac20:	5cc9      	ldrb	r1, [r1, r3]
    ac22:	004b      	lsls	r3, r1, #1
    ac24:	185b      	adds	r3, r3, r1
    ac26:	009b      	lsls	r3, r3, #2
    ac28:	189b      	adds	r3, r3, r2
    ac2a:	7919      	ldrb	r1, [r3, #4]
    ac2c:	795a      	ldrb	r2, [r3, #5]
    ac2e:	0212      	lsls	r2, r2, #8
    ac30:	4311      	orrs	r1, r2
    ac32:	799a      	ldrb	r2, [r3, #6]
    ac34:	0412      	lsls	r2, r2, #16
    ac36:	430a      	orrs	r2, r1
    ac38:	79db      	ldrb	r3, [r3, #7]
    ac3a:	061b      	lsls	r3, r3, #24
    ac3c:	4313      	orrs	r3, r2
    ac3e:	9300      	str	r3, [sp, #0]
	memcpy(attrOutput,&rx1WindowParamsResp,sizeof(Rx1WindowParams_t));
    ac40:	2208      	movs	r2, #8
    ac42:	4669      	mov	r1, sp
    ac44:	4b03      	ldr	r3, [pc, #12]	; (ac54 <LORAREG_GetAttr_Rx1WindowparamsType3+0x84>)
    ac46:	4798      	blx	r3
}
    ac48:	2008      	movs	r0, #8
    ac4a:	b003      	add	sp, #12
    ac4c:	bd00      	pop	{pc}
    ac4e:	46c0      	nop			; (mov r8, r8)
    ac50:	200024d0 	.word	0x200024d0
    ac54:	00019d11 	.word	0x00019d11

0000ac58 <LORAREG_GetAttr_minLBTChPauseTimer>:
{
    ac58:	b5f0      	push	{r4, r5, r6, r7, lr}
    ac5a:	46de      	mov	lr, fp
    ac5c:	4657      	mov	r7, sl
    ac5e:	464e      	mov	r6, r9
    ac60:	4645      	mov	r5, r8
    ac62:	b5e0      	push	{r5, r6, r7, lr}
    ac64:	b085      	sub	sp, #20
    ac66:	9200      	str	r2, [sp, #0]
	uint32_t minim = UINT32_MAX;
    ac68:	2301      	movs	r3, #1
    ac6a:	425b      	negs	r3, r3
    ac6c:	9303      	str	r3, [sp, #12]
	currentDataRate = *(uint8_t *)attrInput;
    ac6e:	780b      	ldrb	r3, [r1, #0]
    ac70:	4699      	mov	r9, r3
	for (uint8_t i = 0; i < RegParams.maxChannels; i++)
    ac72:	232a      	movs	r3, #42	; 0x2a
    ac74:	4a2a      	ldr	r2, [pc, #168]	; (ad20 <LORAREG_GetAttr_minLBTChPauseTimer+0xc8>)
    ac76:	56d7      	ldrsb	r7, [r2, r3]
    ac78:	2f00      	cmp	r7, #0
    ac7a:	dd40      	ble.n	acfe <LORAREG_GetAttr_minLBTChPauseTimer+0xa6>
		if ( (RegParams.pChParams[i].status == ENABLED) && (RegParams.cmnParams.paramsType2.channelTimer[i] != 0) 
    ac7c:	7916      	ldrb	r6, [r2, #4]
    ac7e:	7953      	ldrb	r3, [r2, #5]
    ac80:	021b      	lsls	r3, r3, #8
    ac82:	4333      	orrs	r3, r6
    ac84:	7996      	ldrb	r6, [r2, #6]
    ac86:	0436      	lsls	r6, r6, #16
    ac88:	4333      	orrs	r3, r6
    ac8a:	79d6      	ldrb	r6, [r2, #7]
    ac8c:	0636      	lsls	r6, r6, #24
    ac8e:	431e      	orrs	r6, r3
    ac90:	2300      	movs	r3, #0
    ac92:	469a      	mov	sl, r3
    ac94:	3b01      	subs	r3, #1
    ac96:	4698      	mov	r8, r3
    ac98:	2300      	movs	r3, #0
    ac9a:	2100      	movs	r1, #0
    ac9c:	4694      	mov	ip, r2
			 && (currentDataRate >= RegParams.pChParams[i].dataRange.min) 
    ac9e:	464a      	mov	r2, r9
    aca0:	9201      	str	r2, [sp, #4]
    aca2:	46c3      	mov	fp, r8
    aca4:	e004      	b.n	acb0 <LORAREG_GetAttr_minLBTChPauseTimer+0x58>
	for (uint8_t i = 0; i < RegParams.maxChannels; i++)
    aca6:	3101      	adds	r1, #1
    aca8:	b2c9      	uxtb	r1, r1
    acaa:	000b      	movs	r3, r1
    acac:	42b9      	cmp	r1, r7
    acae:	da23      	bge.n	acf8 <LORAREG_GetAttr_minLBTChPauseTimer+0xa0>
		if ( (RegParams.pChParams[i].status == ENABLED) && (RegParams.cmnParams.paramsType2.channelTimer[i] != 0) 
    acb0:	004a      	lsls	r2, r1, #1
    acb2:	18b2      	adds	r2, r6, r2
    acb4:	7814      	ldrb	r4, [r2, #0]
    acb6:	2c00      	cmp	r4, #0
    acb8:	d0f5      	beq.n	aca6 <LORAREG_GetAttr_minLBTChPauseTimer+0x4e>
    acba:	3358      	adds	r3, #88	; 0x58
    acbc:	009b      	lsls	r3, r3, #2
    acbe:	4463      	add	r3, ip
    acc0:	7a18      	ldrb	r0, [r3, #8]
    acc2:	4680      	mov	r8, r0
    acc4:	7a58      	ldrb	r0, [r3, #9]
    acc6:	0200      	lsls	r0, r0, #8
    acc8:	4645      	mov	r5, r8
    acca:	4305      	orrs	r5, r0
    accc:	7a98      	ldrb	r0, [r3, #10]
    acce:	0400      	lsls	r0, r0, #16
    acd0:	4328      	orrs	r0, r5
    acd2:	7adb      	ldrb	r3, [r3, #11]
    acd4:	061b      	lsls	r3, r3, #24
    acd6:	4303      	orrs	r3, r0
    acd8:	d0e5      	beq.n	aca6 <LORAREG_GetAttr_minLBTChPauseTimer+0x4e>
		     && (RegParams.cmnParams.paramsType2.channelTimer[i] <= minim) 
    acda:	459b      	cmp	fp, r3
    acdc:	d3e3      	bcc.n	aca6 <LORAREG_GetAttr_minLBTChPauseTimer+0x4e>
			 && (currentDataRate >= RegParams.pChParams[i].dataRange.min) 
    acde:	7850      	ldrb	r0, [r2, #1]
    ace0:	0700      	lsls	r0, r0, #28
    ace2:	0f00      	lsrs	r0, r0, #28
    ace4:	4581      	cmp	r9, r0
    ace6:	dbde      	blt.n	aca6 <LORAREG_GetAttr_minLBTChPauseTimer+0x4e>
			 && (currentDataRate <= RegParams.pChParams[i].dataRange.max) )
    ace8:	7852      	ldrb	r2, [r2, #1]
    acea:	0912      	lsrs	r2, r2, #4
    acec:	9801      	ldr	r0, [sp, #4]
    acee:	4290      	cmp	r0, r2
    acf0:	dcd9      	bgt.n	aca6 <LORAREG_GetAttr_minLBTChPauseTimer+0x4e>
    acf2:	46a2      	mov	sl, r4
			minim = RegParams.cmnParams.paramsType2.channelTimer[i];
    acf4:	469b      	mov	fp, r3
    acf6:	e7d6      	b.n	aca6 <LORAREG_GetAttr_minLBTChPauseTimer+0x4e>
    acf8:	4653      	mov	r3, sl
    acfa:	2b00      	cmp	r3, #0
    acfc:	d10c      	bne.n	ad18 <LORAREG_GetAttr_minLBTChPauseTimer+0xc0>
	memcpy(attrOutput,&minim,sizeof(uint32_t));
    acfe:	2204      	movs	r2, #4
    ad00:	a903      	add	r1, sp, #12
    ad02:	9800      	ldr	r0, [sp, #0]
    ad04:	4b07      	ldr	r3, [pc, #28]	; (ad24 <LORAREG_GetAttr_minLBTChPauseTimer+0xcc>)
    ad06:	4798      	blx	r3
}
    ad08:	2008      	movs	r0, #8
    ad0a:	b005      	add	sp, #20
    ad0c:	bc3c      	pop	{r2, r3, r4, r5}
    ad0e:	4690      	mov	r8, r2
    ad10:	4699      	mov	r9, r3
    ad12:	46a2      	mov	sl, r4
    ad14:	46ab      	mov	fp, r5
    ad16:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ad18:	465b      	mov	r3, fp
    ad1a:	9303      	str	r3, [sp, #12]
    ad1c:	e7ef      	b.n	acfe <LORAREG_GetAttr_minLBTChPauseTimer+0xa6>
    ad1e:	46c0      	nop			; (mov r8, r8)
    ad20:	200024d0 	.word	0x200024d0
    ad24:	00019d11 	.word	0x00019d11

0000ad28 <ValidateTxFreqT2>:
{
    ad28:	b500      	push	{lr}
    ad2a:	b083      	sub	sp, #12
	memcpy(&val_freqTx,attrInput,sizeof(ValUpdateFreqTx_t));
    ad2c:	2208      	movs	r2, #8
    ad2e:	4668      	mov	r0, sp
    ad30:	4b04      	ldr	r3, [pc, #16]	; (ad44 <ValidateTxFreqT2+0x1c>)
    ad32:	4798      	blx	r3
	retVal = pValidateAttr[RX_FREQUENCY](RX_FREQUENCY,(void *)&val_freqTx.frequencyNew);
    ad34:	4b04      	ldr	r3, [pc, #16]	; (ad48 <ValidateTxFreqT2+0x20>)
    ad36:	685b      	ldr	r3, [r3, #4]
    ad38:	4669      	mov	r1, sp
    ad3a:	2001      	movs	r0, #1
    ad3c:	4798      	blx	r3
}
    ad3e:	b003      	add	sp, #12
    ad40:	bd00      	pop	{pc}
    ad42:	46c0      	nop			; (mov r8, r8)
    ad44:	00019d11 	.word	0x00019d11
    ad48:	20000e64 	.word	0x20000e64

0000ad4c <ValidateFreqIN>:
{
    ad4c:	b500      	push	{lr}
    ad4e:	b083      	sub	sp, #12
	memcpy(&newFreq,attrInput,sizeof(uint32_t));
    ad50:	2204      	movs	r2, #4
    ad52:	a801      	add	r0, sp, #4
    ad54:	4b06      	ldr	r3, [pc, #24]	; (ad70 <ValidateFreqIN+0x24>)
    ad56:	4798      	blx	r3
	if(newFreq > FREQ_867000KHZ || newFreq < FREQ_865000KHZ)
    ad58:	9b01      	ldr	r3, [sp, #4]
    ad5a:	4a06      	ldr	r2, [pc, #24]	; (ad74 <ValidateFreqIN+0x28>)
    ad5c:	4694      	mov	ip, r2
    ad5e:	4463      	add	r3, ip
    ad60:	4a05      	ldr	r2, [pc, #20]	; (ad78 <ValidateFreqIN+0x2c>)
	StackRetStatus_t result = LORAWAN_SUCCESS;
    ad62:	2008      	movs	r0, #8
	if(newFreq > FREQ_867000KHZ || newFreq < FREQ_865000KHZ)
    ad64:	4293      	cmp	r3, r2
    ad66:	d900      	bls.n	ad6a <ValidateFreqIN+0x1e>
		result = LORAWAN_INVALID_PARAMETER;
    ad68:	3002      	adds	r0, #2
}
    ad6a:	b003      	add	sp, #12
    ad6c:	bd00      	pop	{pc}
    ad6e:	46c0      	nop			; (mov r8, r8)
    ad70:	00019d11 	.word	0x00019d11
    ad74:	cc7125c0 	.word	0xcc7125c0
    ad78:	001e8480 	.word	0x001e8480

0000ad7c <ValidateFreqJP>:
{
    ad7c:	b500      	push	{lr}
    ad7e:	b083      	sub	sp, #12
	memcpy(&newFreq,attrInput,sizeof(uint32_t));
    ad80:	2204      	movs	r2, #4
    ad82:	a801      	add	r0, sp, #4
    ad84:	4b06      	ldr	r3, [pc, #24]	; (ada0 <ValidateFreqJP+0x24>)
    ad86:	4798      	blx	r3
	if(newFreq > FREQ_928000KHZ || newFreq < FREQ_920000KHZ)
    ad88:	9b01      	ldr	r3, [sp, #4]
    ad8a:	4a06      	ldr	r2, [pc, #24]	; (ada4 <ValidateFreqJP+0x28>)
    ad8c:	4694      	mov	ip, r2
    ad8e:	4463      	add	r3, ip
    ad90:	4a05      	ldr	r2, [pc, #20]	; (ada8 <ValidateFreqJP+0x2c>)
	StackRetStatus_t result = LORAWAN_SUCCESS;
    ad92:	2008      	movs	r0, #8
	if(newFreq > FREQ_928000KHZ || newFreq < FREQ_920000KHZ)
    ad94:	4293      	cmp	r3, r2
    ad96:	d900      	bls.n	ad9a <ValidateFreqJP+0x1e>
		result = LORAWAN_INVALID_PARAMETER;
    ad98:	3002      	adds	r0, #2
}
    ad9a:	b003      	add	sp, #12
    ad9c:	bd00      	pop	{pc}
    ad9e:	46c0      	nop			; (mov r8, r8)
    ada0:	00019d11 	.word	0x00019d11
    ada4:	c929ea00 	.word	0xc929ea00
    ada8:	007a1200 	.word	0x007a1200

0000adac <ValidateFreqKR>:
{
    adac:	b500      	push	{lr}
    adae:	b083      	sub	sp, #12
	memcpy(&freqNew,attrInput,sizeof(uint32_t));
    adb0:	2204      	movs	r2, #4
    adb2:	a801      	add	r0, sp, #4
    adb4:	4b0a      	ldr	r3, [pc, #40]	; (ade0 <ValidateFreqKR+0x34>)
    adb6:	4798      	blx	r3
		if(freq == freqNew)
    adb8:	9a01      	ldr	r2, [sp, #4]
    adba:	4b0a      	ldr	r3, [pc, #40]	; (ade4 <ValidateFreqKR+0x38>)
    adbc:	429a      	cmp	r2, r3
    adbe:	d00b      	beq.n	add8 <ValidateFreqKR+0x2c>
    adc0:	4b09      	ldr	r3, [pc, #36]	; (ade8 <ValidateFreqKR+0x3c>)
	for(freq = FREQ_920900KHZ; freq <= FREQ_923300KHZ; freq += freqwidth)
    adc2:	490a      	ldr	r1, [pc, #40]	; (adec <ValidateFreqKR+0x40>)
		if(freq == freqNew)
    adc4:	429a      	cmp	r2, r3
    adc6:	d009      	beq.n	addc <ValidateFreqKR+0x30>
	for(freq = FREQ_920900KHZ; freq <= FREQ_923300KHZ; freq += freqwidth)
    adc8:	4809      	ldr	r0, [pc, #36]	; (adf0 <ValidateFreqKR+0x44>)
    adca:	4684      	mov	ip, r0
    adcc:	4463      	add	r3, ip
    adce:	428b      	cmp	r3, r1
    add0:	d1f8      	bne.n	adc4 <ValidateFreqKR+0x18>
    StackRetStatus_t result = LORAWAN_INVALID_PARAMETER;
    add2:	200a      	movs	r0, #10
}
    add4:	b003      	add	sp, #12
    add6:	bd00      	pop	{pc}
			result = LORAWAN_SUCCESS;
    add8:	2008      	movs	r0, #8
    adda:	e7fb      	b.n	add4 <ValidateFreqKR+0x28>
    addc:	2008      	movs	r0, #8
    adde:	e7f9      	b.n	add4 <ValidateFreqKR+0x28>
    ade0:	00019d11 	.word	0x00019d11
    ade4:	36e3d1a0 	.word	0x36e3d1a0
    ade8:	36e6dee0 	.word	0x36e6dee0
    adec:	370b7de0 	.word	0x370b7de0
    adf0:	00030d40 	.word	0x00030d40

0000adf4 <setNewChannelsT1>:
{
    adf4:	b5f0      	push	{r4, r5, r6, r7, lr}
    adf6:	b083      	sub	sp, #12
	memcpy(&updateNewCh,attrInput,sizeof(UpdateNewCh_t));
    adf8:	ac01      	add	r4, sp, #4
    adfa:	2204      	movs	r2, #4
    adfc:	0020      	movs	r0, r4
    adfe:	4b1f      	ldr	r3, [pc, #124]	; (ae7c <setNewChannelsT1+0x88>)
    ae00:	4798      	blx	r3
	chMask = updateNewCh.channelMask;
    ae02:	8827      	ldrh	r7, [r4, #0]
	chMaskCtrl = updateNewCh.channelMaskCntl;
    ae04:	78a6      	ldrb	r6, [r4, #2]
    ae06:	466b      	mov	r3, sp
    ae08:	1cd9      	adds	r1, r3, #3
    ae0a:	700e      	strb	r6, [r1, #0]
	if(ValidateChannelMaskCntl(CHANNEL_MASK_CNTL, &chMaskCtrl) == LORAWAN_SUCCESS)
    ae0c:	201b      	movs	r0, #27
    ae0e:	4b1c      	ldr	r3, [pc, #112]	; (ae80 <setNewChannelsT1+0x8c>)
    ae10:	4798      	blx	r3
    ae12:	0005      	movs	r5, r0
    ae14:	2808      	cmp	r0, #8
    ae16:	d003      	beq.n	ae20 <setNewChannelsT1+0x2c>
		retVal = LORAWAN_INVALID_PARAMETER;
    ae18:	250a      	movs	r5, #10
}
    ae1a:	0028      	movs	r0, r5
    ae1c:	b003      	add	sp, #12
    ae1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		switch(chMaskCtrl)
    ae20:	2e06      	cmp	r6, #6
    ae22:	d01c      	beq.n	ae5e <setNewChannelsT1+0x6a>
    ae24:	d80a      	bhi.n	ae3c <setNewChannelsT1+0x48>
    ae26:	2e04      	cmp	r6, #4
    ae28:	d8f7      	bhi.n	ae1a <setNewChannelsT1+0x26>
		channel = chMaskCtrl << SHIFT4;
    ae2a:	0136      	lsls	r6, r6, #4
    ae2c:	b2f0      	uxtb	r0, r6
				EnableChannels2(channel, channel + 15, chMask);
    ae2e:	0001      	movs	r1, r0
    ae30:	310f      	adds	r1, #15
    ae32:	b2c9      	uxtb	r1, r1
    ae34:	003a      	movs	r2, r7
    ae36:	4b13      	ldr	r3, [pc, #76]	; (ae84 <setNewChannelsT1+0x90>)
    ae38:	4798      	blx	r3
				break;
    ae3a:	e7ee      	b.n	ae1a <setNewChannelsT1+0x26>
		switch(chMaskCtrl)
    ae3c:	2400      	movs	r4, #0
    ae3e:	2e07      	cmp	r6, #7
    ae40:	d1eb      	bne.n	ae1a <setNewChannelsT1+0x26>
					UpdateChannelIdStatus(i, DISABLED);
    ae42:	4e11      	ldr	r6, [pc, #68]	; (ae88 <setNewChannelsT1+0x94>)
    ae44:	2100      	movs	r1, #0
    ae46:	0020      	movs	r0, r4
    ae48:	47b0      	blx	r6
				for(i = 0; i< 63; i++)
    ae4a:	3401      	adds	r4, #1
    ae4c:	b2e4      	uxtb	r4, r4
    ae4e:	2c3f      	cmp	r4, #63	; 0x3f
    ae50:	d1f8      	bne.n	ae44 <setNewChannelsT1+0x50>
				EnableChannels2(64, 71, chMask);
    ae52:	003a      	movs	r2, r7
    ae54:	2147      	movs	r1, #71	; 0x47
    ae56:	2040      	movs	r0, #64	; 0x40
    ae58:	4b0a      	ldr	r3, [pc, #40]	; (ae84 <setNewChannelsT1+0x90>)
    ae5a:	4798      	blx	r3
				break;
    ae5c:	e7dd      	b.n	ae1a <setNewChannelsT1+0x26>
		switch(chMaskCtrl)
    ae5e:	2400      	movs	r4, #0
					UpdateChannelIdStatus(i, ENABLED);
    ae60:	4e09      	ldr	r6, [pc, #36]	; (ae88 <setNewChannelsT1+0x94>)
    ae62:	2101      	movs	r1, #1
    ae64:	0020      	movs	r0, r4
    ae66:	47b0      	blx	r6
				for(i = 0; i < 63; i++)
    ae68:	3401      	adds	r4, #1
    ae6a:	b2e4      	uxtb	r4, r4
    ae6c:	2c3f      	cmp	r4, #63	; 0x3f
    ae6e:	d1f8      	bne.n	ae62 <setNewChannelsT1+0x6e>
				EnableChannels2(64, 71, chMask);
    ae70:	003a      	movs	r2, r7
    ae72:	2147      	movs	r1, #71	; 0x47
    ae74:	2040      	movs	r0, #64	; 0x40
    ae76:	4b03      	ldr	r3, [pc, #12]	; (ae84 <setNewChannelsT1+0x90>)
    ae78:	4798      	blx	r3
			    break;
    ae7a:	e7ce      	b.n	ae1a <setNewChannelsT1+0x26>
    ae7c:	00019d11 	.word	0x00019d11
    ae80:	00009a45 	.word	0x00009a45
    ae84:	0000a155 	.word	0x0000a155
    ae88:	0000a0f1 	.word	0x0000a0f1

0000ae8c <setDlFrequency>:
{
    ae8c:	b530      	push	{r4, r5, lr}
    ae8e:	b085      	sub	sp, #20
	memcpy(&updateDlFreq,attrInput,sizeof(ValUpdateFreqTx_t));
    ae90:	ac02      	add	r4, sp, #8
    ae92:	2208      	movs	r2, #8
    ae94:	0020      	movs	r0, r4
    ae96:	4b20      	ldr	r3, [pc, #128]	; (af18 <setDlFrequency+0x8c>)
    ae98:	4798      	blx	r3
	Chid.channelIndex = updateDlFreq.channelIndex;
    ae9a:	ab01      	add	r3, sp, #4
    ae9c:	7922      	ldrb	r2, [r4, #4]
    ae9e:	701a      	strb	r2, [r3, #0]
		Chid.allowedForDefaultChannels = ALL_CHANNELS;
    aea0:	2201      	movs	r2, #1
    aea2:	705a      	strb	r2, [r3, #1]
	if(pValidateAttr[RX_FREQUENCY](RX_FREQUENCY, &updateDlFreq.frequencyNew) != LORAWAN_SUCCESS || ValidateChannelIdT2(CHANNEL_ID, &Chid) != LORAWAN_SUCCESS)
    aea4:	4b1d      	ldr	r3, [pc, #116]	; (af1c <setDlFrequency+0x90>)
    aea6:	685b      	ldr	r3, [r3, #4]
    aea8:	0021      	movs	r1, r4
    aeaa:	2001      	movs	r0, #1
    aeac:	4798      	blx	r3
		result = LORAWAN_INVALID_PARAMETER;
    aeae:	240a      	movs	r4, #10
	if(pValidateAttr[RX_FREQUENCY](RX_FREQUENCY, &updateDlFreq.frequencyNew) != LORAWAN_SUCCESS || ValidateChannelIdT2(CHANNEL_ID, &Chid) != LORAWAN_SUCCESS)
    aeb0:	2808      	cmp	r0, #8
    aeb2:	d002      	beq.n	aeba <setDlFrequency+0x2e>
}
    aeb4:	0020      	movs	r0, r4
    aeb6:	b005      	add	sp, #20
    aeb8:	bd30      	pop	{r4, r5, pc}
	if(pValidateAttr[RX_FREQUENCY](RX_FREQUENCY, &updateDlFreq.frequencyNew) != LORAWAN_SUCCESS || ValidateChannelIdT2(CHANNEL_ID, &Chid) != LORAWAN_SUCCESS)
    aeba:	a901      	add	r1, sp, #4
    aebc:	300d      	adds	r0, #13
    aebe:	4b18      	ldr	r3, [pc, #96]	; (af20 <setDlFrequency+0x94>)
    aec0:	4798      	blx	r3
    aec2:	0004      	movs	r4, r0
    aec4:	2808      	cmp	r0, #8
    aec6:	d001      	beq.n	aecc <setDlFrequency+0x40>
		result = LORAWAN_INVALID_PARAMETER;
    aec8:	240a      	movs	r4, #10
    aeca:	e7f3      	b.n	aeb4 <setDlFrequency+0x28>
		RegParams.pOtherChParams[updateDlFreq.channelIndex].rx1Frequency = updateDlFreq.frequencyNew;
    aecc:	4a15      	ldr	r2, [pc, #84]	; (af24 <setDlFrequency+0x98>)
    aece:	7a13      	ldrb	r3, [r2, #8]
    aed0:	7a50      	ldrb	r0, [r2, #9]
    aed2:	0200      	lsls	r0, r0, #8
    aed4:	4303      	orrs	r3, r0
    aed6:	7a90      	ldrb	r0, [r2, #10]
    aed8:	0400      	lsls	r0, r0, #16
    aeda:	4318      	orrs	r0, r3
    aedc:	7ad3      	ldrb	r3, [r2, #11]
    aede:	061b      	lsls	r3, r3, #24
    aee0:	4318      	orrs	r0, r3
    aee2:	a902      	add	r1, sp, #8
    aee4:	790d      	ldrb	r5, [r1, #4]
    aee6:	006b      	lsls	r3, r5, #1
    aee8:	195b      	adds	r3, r3, r5
    aeea:	009b      	lsls	r3, r3, #2
    aeec:	181b      	adds	r3, r3, r0
    aeee:	7808      	ldrb	r0, [r1, #0]
    aef0:	7118      	strb	r0, [r3, #4]
    aef2:	7848      	ldrb	r0, [r1, #1]
    aef4:	7158      	strb	r0, [r3, #5]
    aef6:	7888      	ldrb	r0, [r1, #2]
    aef8:	7198      	strb	r0, [r3, #6]
    aefa:	78c9      	ldrb	r1, [r1, #3]
    aefc:	71d9      	strb	r1, [r3, #7]
		PDS_STORE(RegParams.regParamItems.ch_param_2_item_id);
    aefe:	2384      	movs	r3, #132	; 0x84
    af00:	009b      	lsls	r3, r3, #2
    af02:	5cd3      	ldrb	r3, [r2, r3]
    af04:	4908      	ldr	r1, [pc, #32]	; (af28 <setDlFrequency+0x9c>)
    af06:	5c50      	ldrb	r0, [r2, r1]
    af08:	0200      	lsls	r0, r0, #8
    af0a:	4318      	orrs	r0, r3
    af0c:	b2c1      	uxtb	r1, r0
    af0e:	0a00      	lsrs	r0, r0, #8
    af10:	4b06      	ldr	r3, [pc, #24]	; (af2c <setDlFrequency+0xa0>)
    af12:	4798      	blx	r3
    af14:	e7ce      	b.n	aeb4 <setDlFrequency+0x28>
    af16:	46c0      	nop			; (mov r8, r8)
    af18:	00019d11 	.word	0x00019d11
    af1c:	20000e64 	.word	0x20000e64
    af20:	0000993d 	.word	0x0000993d
    af24:	200024d0 	.word	0x200024d0
    af28:	00000211 	.word	0x00000211
    af2c:	0000dfe1 	.word	0x0000dfe1

0000af30 <setFrequency>:
{
    af30:	b570      	push	{r4, r5, r6, lr}
    af32:	b084      	sub	sp, #16
	memcpy(&updateTxFreq,attrInput,sizeof(ValUpdateFreqTx_t));
    af34:	ac02      	add	r4, sp, #8
    af36:	2208      	movs	r2, #8
    af38:	0020      	movs	r0, r4
    af3a:	4b3f      	ldr	r3, [pc, #252]	; (b038 <setFrequency+0x108>)
    af3c:	4798      	blx	r3
	valChid.channelIndex = updateTxFreq.channelIndex;
    af3e:	ab01      	add	r3, sp, #4
    af40:	7922      	ldrb	r2, [r4, #4]
    af42:	701a      	strb	r2, [r3, #0]
	valChid.allowedForDefaultChannels = WITHOUT_DEFAULT_CHANNELS;
    af44:	2200      	movs	r2, #0
    af46:	705a      	strb	r2, [r3, #1]
	if(pValidateAttr[RX_FREQUENCY](RX_FREQUENCY,&updateTxFreq.frequencyNew) != LORAWAN_SUCCESS || ValidateChannelIdT2(CHANNEL_ID, &valChid) != LORAWAN_SUCCESS)
    af48:	4b3c      	ldr	r3, [pc, #240]	; (b03c <setFrequency+0x10c>)
    af4a:	685b      	ldr	r3, [r3, #4]
    af4c:	0021      	movs	r1, r4
    af4e:	2001      	movs	r0, #1
    af50:	4798      	blx	r3
		result = LORAWAN_INVALID_PARAMETER;
    af52:	240a      	movs	r4, #10
	if(pValidateAttr[RX_FREQUENCY](RX_FREQUENCY,&updateTxFreq.frequencyNew) != LORAWAN_SUCCESS || ValidateChannelIdT2(CHANNEL_ID, &valChid) != LORAWAN_SUCCESS)
    af54:	2808      	cmp	r0, #8
    af56:	d002      	beq.n	af5e <setFrequency+0x2e>
}
    af58:	0020      	movs	r0, r4
    af5a:	b004      	add	sp, #16
    af5c:	bd70      	pop	{r4, r5, r6, pc}
	if(pValidateAttr[RX_FREQUENCY](RX_FREQUENCY,&updateTxFreq.frequencyNew) != LORAWAN_SUCCESS || ValidateChannelIdT2(CHANNEL_ID, &valChid) != LORAWAN_SUCCESS)
    af5e:	a901      	add	r1, sp, #4
    af60:	300d      	adds	r0, #13
    af62:	4b37      	ldr	r3, [pc, #220]	; (b040 <setFrequency+0x110>)
    af64:	4798      	blx	r3
    af66:	0004      	movs	r4, r0
    af68:	2808      	cmp	r0, #8
    af6a:	d001      	beq.n	af70 <setFrequency+0x40>
		result = LORAWAN_INVALID_PARAMETER;
    af6c:	240a      	movs	r4, #10
    af6e:	e7f3      	b.n	af58 <setFrequency+0x28>
		uint8_t chIndx = updateTxFreq.channelIndex;
    af70:	ab02      	add	r3, sp, #8
    af72:	791d      	ldrb	r5, [r3, #4]
		if((((1 << RegParams.band) & ((ISM_EUBAND) | (1 << ISM_JPN923))) != 0))
    af74:	232e      	movs	r3, #46	; 0x2e
    af76:	4a33      	ldr	r2, [pc, #204]	; (b044 <setFrequency+0x114>)
    af78:	5cd2      	ldrb	r2, [r2, r3]
    af7a:	3b0b      	subs	r3, #11
    af7c:	4113      	asrs	r3, r2
    af7e:	07db      	lsls	r3, r3, #31
    af80:	d445      	bmi.n	b00e <setFrequency+0xde>
		RegParams.pOtherChParams[chIndx].ulfrequency = updateTxFreq.frequencyNew;
    af82:	006a      	lsls	r2, r5, #1
    af84:	1952      	adds	r2, r2, r5
    af86:	0090      	lsls	r0, r2, #2
    af88:	a902      	add	r1, sp, #8
    af8a:	9d02      	ldr	r5, [sp, #8]
    af8c:	4b2d      	ldr	r3, [pc, #180]	; (b044 <setFrequency+0x114>)
    af8e:	7a1a      	ldrb	r2, [r3, #8]
    af90:	7a5e      	ldrb	r6, [r3, #9]
    af92:	0236      	lsls	r6, r6, #8
    af94:	4316      	orrs	r6, r2
    af96:	7a9a      	ldrb	r2, [r3, #10]
    af98:	0412      	lsls	r2, r2, #16
    af9a:	4316      	orrs	r6, r2
    af9c:	7ada      	ldrb	r2, [r3, #11]
    af9e:	0612      	lsls	r2, r2, #24
    afa0:	4332      	orrs	r2, r6
    afa2:	5415      	strb	r5, [r2, r0]
    afa4:	0a2e      	lsrs	r6, r5, #8
    afa6:	1812      	adds	r2, r2, r0
    afa8:	7056      	strb	r6, [r2, #1]
    afaa:	0c2e      	lsrs	r6, r5, #16
    afac:	7096      	strb	r6, [r2, #2]
    afae:	0e2d      	lsrs	r5, r5, #24
    afb0:	70d5      	strb	r5, [r2, #3]
		RegParams.pOtherChParams[chIndx].rx1Frequency = updateTxFreq.frequencyNew;
    afb2:	7a1a      	ldrb	r2, [r3, #8]
    afb4:	7a5d      	ldrb	r5, [r3, #9]
    afb6:	022d      	lsls	r5, r5, #8
    afb8:	4315      	orrs	r5, r2
    afba:	7a9a      	ldrb	r2, [r3, #10]
    afbc:	0412      	lsls	r2, r2, #16
    afbe:	4315      	orrs	r5, r2
    afc0:	7ada      	ldrb	r2, [r3, #11]
    afc2:	0612      	lsls	r2, r2, #24
    afc4:	432a      	orrs	r2, r5
    afc6:	1812      	adds	r2, r2, r0
    afc8:	780d      	ldrb	r5, [r1, #0]
    afca:	7115      	strb	r5, [r2, #4]
    afcc:	784d      	ldrb	r5, [r1, #1]
    afce:	7155      	strb	r5, [r2, #5]
    afd0:	788d      	ldrb	r5, [r1, #2]
    afd2:	7195      	strb	r5, [r2, #6]
    afd4:	78c9      	ldrb	r1, [r1, #3]
    afd6:	71d1      	strb	r1, [r2, #7]
		RegParams.pOtherChParams[chIndx].parametersDefined |= FREQUENCY_DEFINED;
    afd8:	7a1a      	ldrb	r2, [r3, #8]
    afda:	7a59      	ldrb	r1, [r3, #9]
    afdc:	0209      	lsls	r1, r1, #8
    afde:	4311      	orrs	r1, r2
    afe0:	7a9a      	ldrb	r2, [r3, #10]
    afe2:	0412      	lsls	r2, r2, #16
    afe4:	4311      	orrs	r1, r2
    afe6:	7ada      	ldrb	r2, [r3, #11]
    afe8:	0612      	lsls	r2, r2, #24
    afea:	430a      	orrs	r2, r1
    afec:	1812      	adds	r2, r2, r0
    afee:	7ad1      	ldrb	r1, [r2, #11]
    aff0:	2001      	movs	r0, #1
    aff2:	4301      	orrs	r1, r0
    aff4:	72d1      	strb	r1, [r2, #11]
		PDS_STORE(RegParams.regParamItems.ch_param_2_item_id);
    aff6:	2284      	movs	r2, #132	; 0x84
    aff8:	0092      	lsls	r2, r2, #2
    affa:	5c9a      	ldrb	r2, [r3, r2]
    affc:	4912      	ldr	r1, [pc, #72]	; (b048 <setFrequency+0x118>)
    affe:	5c58      	ldrb	r0, [r3, r1]
    b000:	0200      	lsls	r0, r0, #8
    b002:	4310      	orrs	r0, r2
    b004:	b2c1      	uxtb	r1, r0
    b006:	0a00      	lsrs	r0, r0, #8
    b008:	4b10      	ldr	r3, [pc, #64]	; (b04c <setFrequency+0x11c>)
    b00a:	4798      	blx	r3
    b00c:	e7a4      	b.n	af58 <setFrequency+0x28>
		    RegParams.pOtherChParams[chIndx].subBandId = getSubBandId(updateTxFreq.frequencyNew);
    b00e:	4a0d      	ldr	r2, [pc, #52]	; (b044 <setFrequency+0x114>)
    b010:	7a16      	ldrb	r6, [r2, #8]
    b012:	7a53      	ldrb	r3, [r2, #9]
    b014:	021b      	lsls	r3, r3, #8
    b016:	4333      	orrs	r3, r6
    b018:	7a96      	ldrb	r6, [r2, #10]
    b01a:	0436      	lsls	r6, r6, #16
    b01c:	4333      	orrs	r3, r6
    b01e:	7ad6      	ldrb	r6, [r2, #11]
    b020:	0636      	lsls	r6, r6, #24
    b022:	431e      	orrs	r6, r3
    b024:	006b      	lsls	r3, r5, #1
    b026:	195b      	adds	r3, r3, r5
    b028:	009b      	lsls	r3, r3, #2
    b02a:	18f6      	adds	r6, r6, r3
    b02c:	9802      	ldr	r0, [sp, #8]
    b02e:	4b08      	ldr	r3, [pc, #32]	; (b050 <setFrequency+0x120>)
    b030:	4798      	blx	r3
    b032:	7230      	strb	r0, [r6, #8]
    b034:	e7a5      	b.n	af82 <setFrequency+0x52>
    b036:	46c0      	nop			; (mov r8, r8)
    b038:	00019d11 	.word	0x00019d11
    b03c:	20000e64 	.word	0x20000e64
    b040:	0000993d 	.word	0x0000993d
    b044:	200024d0 	.word	0x200024d0
    b048:	00000211 	.word	0x00000211
    b04c:	0000dfe1 	.word	0x0000dfe1
    b050:	00009bf1 	.word	0x00009bf1

0000b054 <setDutyCycle>:
{
    b054:	b570      	push	{r4, r5, r6, lr}
    b056:	b082      	sub	sp, #8
    memcpy(&updateDCycle,attrInput,sizeof(UpdateDutyCycle_t));
    b058:	ac01      	add	r4, sp, #4
    b05a:	2204      	movs	r2, #4
    b05c:	0020      	movs	r0, r4
    b05e:	4b2d      	ldr	r3, [pc, #180]	; (b114 <setDutyCycle+0xc0>)
    b060:	4798      	blx	r3
	val_chid.channelIndex = updateDCycle.channelIndex;
    b062:	78a5      	ldrb	r5, [r4, #2]
    b064:	466b      	mov	r3, sp
    b066:	701d      	strb	r5, [r3, #0]
	val_chid.allowedForDefaultChannels = ALL_CHANNELS;
    b068:	2301      	movs	r3, #1
    b06a:	466a      	mov	r2, sp
    b06c:	7053      	strb	r3, [r2, #1]
	if(ValidateChannelIdT2(CHANNEL_ID, &val_chid) == LORAWAN_SUCCESS)
    b06e:	4669      	mov	r1, sp
    b070:	2015      	movs	r0, #21
    b072:	4b29      	ldr	r3, [pc, #164]	; (b118 <setDutyCycle+0xc4>)
    b074:	4798      	blx	r3
    b076:	0004      	movs	r4, r0
    b078:	2808      	cmp	r0, #8
    b07a:	d003      	beq.n	b084 <setDutyCycle+0x30>
		result = LORAWAN_INVALID_PARAMETER;
    b07c:	240a      	movs	r4, #10
}
    b07e:	0020      	movs	r0, r4
    b080:	b002      	add	sp, #8
    b082:	bd70      	pop	{r4, r5, r6, pc}
		bandId = RegParams.pOtherChParams[updateDCycle.channelIndex].subBandId;
    b084:	0069      	lsls	r1, r5, #1
    b086:	1949      	adds	r1, r1, r5
    b088:	0089      	lsls	r1, r1, #2
    b08a:	4b24      	ldr	r3, [pc, #144]	; (b11c <setDutyCycle+0xc8>)
    b08c:	7a1a      	ldrb	r2, [r3, #8]
    b08e:	7a58      	ldrb	r0, [r3, #9]
    b090:	0200      	lsls	r0, r0, #8
    b092:	4310      	orrs	r0, r2
    b094:	7a9a      	ldrb	r2, [r3, #10]
    b096:	0412      	lsls	r2, r2, #16
    b098:	4310      	orrs	r0, r2
    b09a:	7ada      	ldrb	r2, [r3, #11]
    b09c:	0612      	lsls	r2, r2, #24
    b09e:	4302      	orrs	r2, r0
    b0a0:	1852      	adds	r2, r2, r1
    b0a2:	7a15      	ldrb	r5, [r2, #8]
		RegParams.cmnParams.paramsType2.subBandDutyCycle[bandId] = updateDCycle.dutyCycleNew;
    b0a4:	0028      	movs	r0, r5
    b0a6:	30d4      	adds	r0, #212	; 0xd4
    b0a8:	0040      	lsls	r0, r0, #1
    b0aa:	aa01      	add	r2, sp, #4
    b0ac:	1818      	adds	r0, r3, r0
    b0ae:	7816      	ldrb	r6, [r2, #0]
    b0b0:	7146      	strb	r6, [r0, #5]
    b0b2:	7852      	ldrb	r2, [r2, #1]
    b0b4:	7182      	strb	r2, [r0, #6]
		RegParams.pSubBandParams[bandId].subBandTimeout = 0;
    b0b6:	7b18      	ldrb	r0, [r3, #12]
    b0b8:	7b5a      	ldrb	r2, [r3, #13]
    b0ba:	0212      	lsls	r2, r2, #8
    b0bc:	4302      	orrs	r2, r0
    b0be:	7b98      	ldrb	r0, [r3, #14]
    b0c0:	0400      	lsls	r0, r0, #16
    b0c2:	4302      	orrs	r2, r0
    b0c4:	7bd8      	ldrb	r0, [r3, #15]
    b0c6:	0600      	lsls	r0, r0, #24
    b0c8:	4310      	orrs	r0, r2
    b0ca:	006a      	lsls	r2, r5, #1
    b0cc:	1952      	adds	r2, r2, r5
    b0ce:	0092      	lsls	r2, r2, #2
    b0d0:	1812      	adds	r2, r2, r0
    b0d2:	2000      	movs	r0, #0
    b0d4:	7210      	strb	r0, [r2, #8]
    b0d6:	7250      	strb	r0, [r2, #9]
    b0d8:	7290      	strb	r0, [r2, #10]
    b0da:	72d0      	strb	r0, [r2, #11]
		RegParams.pOtherChParams[updateDCycle.channelIndex].parametersDefined |= DUTY_CYCLE_DEFINED;
    b0dc:	7a1d      	ldrb	r5, [r3, #8]
    b0de:	7a5a      	ldrb	r2, [r3, #9]
    b0e0:	0212      	lsls	r2, r2, #8
    b0e2:	432a      	orrs	r2, r5
    b0e4:	7a9d      	ldrb	r5, [r3, #10]
    b0e6:	042d      	lsls	r5, r5, #16
    b0e8:	432a      	orrs	r2, r5
    b0ea:	7add      	ldrb	r5, [r3, #11]
    b0ec:	062d      	lsls	r5, r5, #24
    b0ee:	4315      	orrs	r5, r2
    b0f0:	186d      	adds	r5, r5, r1
    b0f2:	7aea      	ldrb	r2, [r5, #11]
    b0f4:	2104      	movs	r1, #4
    b0f6:	430a      	orrs	r2, r1
    b0f8:	72ea      	strb	r2, [r5, #11]
		PDS_STORE(RegParams.regParamItems.ch_param_2_item_id);
    b0fa:	2284      	movs	r2, #132	; 0x84
    b0fc:	0092      	lsls	r2, r2, #2
    b0fe:	5c9a      	ldrb	r2, [r3, r2]
    b100:	4907      	ldr	r1, [pc, #28]	; (b120 <setDutyCycle+0xcc>)
    b102:	5c58      	ldrb	r0, [r3, r1]
    b104:	0200      	lsls	r0, r0, #8
    b106:	4310      	orrs	r0, r2
    b108:	b2c1      	uxtb	r1, r0
    b10a:	0a00      	lsrs	r0, r0, #8
    b10c:	4b05      	ldr	r3, [pc, #20]	; (b124 <setDutyCycle+0xd0>)
    b10e:	4798      	blx	r3
    b110:	e7b5      	b.n	b07e <setDutyCycle+0x2a>
    b112:	46c0      	nop			; (mov r8, r8)
    b114:	00019d11 	.word	0x00019d11
    b118:	0000993d 	.word	0x0000993d
    b11c:	200024d0 	.word	0x200024d0
    b120:	00000211 	.word	0x00000211
    b124:	0000dfe1 	.word	0x0000dfe1

0000b128 <SearchAvailableChannel2>:
{
    b128:	b5f0      	push	{r4, r5, r6, r7, lr}
    b12a:	46de      	mov	lr, fp
    b12c:	4657      	mov	r7, sl
    b12e:	464e      	mov	r6, r9
    b130:	4645      	mov	r5, r8
    b132:	b5e0      	push	{r5, r6, r7, lr}
    b134:	b087      	sub	sp, #28
    b136:	af00      	add	r7, sp, #0
    b138:	0004      	movs	r4, r0
    b13a:	4688      	mov	r8, r1
    b13c:	60f9      	str	r1, [r7, #12]
    b13e:	0015      	movs	r5, r2
    b140:	607b      	str	r3, [r7, #4]
	uint8_t ChList[maxChannels];
    b142:	1dc3      	adds	r3, r0, #7
    b144:	08db      	lsrs	r3, r3, #3
    b146:	00db      	lsls	r3, r3, #3
    b148:	466a      	mov	r2, sp
    b14a:	1ad3      	subs	r3, r2, r3
    b14c:	469d      	mov	sp, r3
    b14e:	613b      	str	r3, [r7, #16]
	memset(ChList, 0, sizeof(ChList));
    b150:	0002      	movs	r2, r0
    b152:	2100      	movs	r1, #0
    b154:	4668      	mov	r0, sp
    b156:	4b5c      	ldr	r3, [pc, #368]	; (b2c8 <SearchAvailableChannel2+0x1a0>)
    b158:	4798      	blx	r3
	bool bandWithoutDutyCycle = (((1 << RegParams.band) & (ISM_EUBAND | ISM_ASBAND | (1 << ISM_JPN923))) == 0);
    b15a:	232e      	movs	r3, #46	; 0x2e
    b15c:	4a5b      	ldr	r2, [pc, #364]	; (b2cc <SearchAvailableChannel2+0x1a4>)
    b15e:	5cd6      	ldrb	r6, [r2, r3]
    if(transmissionType == false)
    b160:	4643      	mov	r3, r8
    b162:	2b00      	cmp	r3, #0
    b164:	d148      	bne.n	b1f8 <SearchAvailableChannel2+0xd0>
	    if(RegParams.FeaturesSupport & JOIN_BACKOFF_SUPPORT)
    b166:	3320      	adds	r3, #32
    b168:	5cd3      	ldrb	r3, [r2, r3]
    b16a:	069b      	lsls	r3, r3, #26
    b16c:	d431      	bmi.n	b1d2 <SearchAvailableChannel2+0xaa>
		result = LORAWAN_NO_CHANNELS_FOUND;
    b16e:	2010      	movs	r0, #16
	for (i = 0; i < maxChannels; i++)
    b170:	2c00      	cmp	r4, #0
    b172:	d100      	bne.n	b176 <SearchAvailableChannel2+0x4e>
    b174:	e093      	b.n	b29e <SearchAvailableChannel2+0x176>
	bool bandWithoutDutyCycle = (((1 << RegParams.band) & (ISM_EUBAND | ISM_ASBAND | (1 << ISM_JPN923))) == 0);
    b176:	4b56      	ldr	r3, [pc, #344]	; (b2d0 <SearchAvailableChannel2+0x1a8>)
    b178:	4133      	asrs	r3, r6
    b17a:	2201      	movs	r2, #1
    b17c:	401a      	ands	r2, r3
    b17e:	4690      	mov	r8, r2
				(bandWithoutDutyCycle || RegParams.pSubBandParams[RegParams.pOtherChParams[i].subBandId].subBandTimeout == 0))
    b180:	4b52      	ldr	r3, [pc, #328]	; (b2cc <SearchAvailableChannel2+0x1a4>)
    b182:	7b19      	ldrb	r1, [r3, #12]
    b184:	7b5a      	ldrb	r2, [r3, #13]
    b186:	0212      	lsls	r2, r2, #8
    b188:	4311      	orrs	r1, r2
    b18a:	7b9a      	ldrb	r2, [r3, #14]
    b18c:	0412      	lsls	r2, r2, #16
    b18e:	430a      	orrs	r2, r1
    b190:	7bd9      	ldrb	r1, [r3, #15]
    b192:	0609      	lsls	r1, r1, #24
    b194:	4311      	orrs	r1, r2
    b196:	468c      	mov	ip, r1
    b198:	7a18      	ldrb	r0, [r3, #8]
    b19a:	7a5a      	ldrb	r2, [r3, #9]
    b19c:	0212      	lsls	r2, r2, #8
    b19e:	4302      	orrs	r2, r0
    b1a0:	7a98      	ldrb	r0, [r3, #10]
    b1a2:	0400      	lsls	r0, r0, #16
    b1a4:	4302      	orrs	r2, r0
    b1a6:	7ad8      	ldrb	r0, [r3, #11]
    b1a8:	0600      	lsls	r0, r0, #24
    b1aa:	4310      	orrs	r0, r2
			if ((RegParams.pChParams[i].status == ENABLED) &&
    b1ac:	791a      	ldrb	r2, [r3, #4]
    b1ae:	7959      	ldrb	r1, [r3, #5]
    b1b0:	0209      	lsls	r1, r1, #8
    b1b2:	4311      	orrs	r1, r2
    b1b4:	799a      	ldrb	r2, [r3, #6]
    b1b6:	0412      	lsls	r2, r2, #16
    b1b8:	4311      	orrs	r1, r2
    b1ba:	79da      	ldrb	r2, [r3, #7]
    b1bc:	0612      	lsls	r2, r2, #24
    b1be:	430a      	orrs	r2, r1
    b1c0:	0006      	movs	r6, r0
    b1c2:	3608      	adds	r6, #8
    b1c4:	3009      	adds	r0, #9
				(bandWithoutDutyCycle || RegParams.pSubBandParams[RegParams.pOtherChParams[i].subBandId].subBandTimeout == 0))
    b1c6:	2300      	movs	r3, #0
    b1c8:	617b      	str	r3, [r7, #20]
				(currDr >= RegParams.pChParams[i].dataRange.min) &&
    b1ca:	46aa      	mov	sl, r5
    b1cc:	46a9      	mov	r9, r5
    b1ce:	0025      	movs	r5, r4
    b1d0:	e036      	b.n	b240 <SearchAvailableChannel2+0x118>
		    if(SwTimerIsRunning(RegParams.pJoinDutyCycleTimer->timerId)) //check timerrunning
    b1d2:	0011      	movs	r1, r2
    b1d4:	7d13      	ldrb	r3, [r2, #20]
    b1d6:	7d52      	ldrb	r2, [r2, #21]
    b1d8:	0212      	lsls	r2, r2, #8
    b1da:	431a      	orrs	r2, r3
    b1dc:	7d8b      	ldrb	r3, [r1, #22]
    b1de:	041b      	lsls	r3, r3, #16
    b1e0:	431a      	orrs	r2, r3
    b1e2:	7dcb      	ldrb	r3, [r1, #23]
    b1e4:	061b      	lsls	r3, r3, #24
    b1e6:	4313      	orrs	r3, r2
    b1e8:	7a18      	ldrb	r0, [r3, #8]
    b1ea:	4b3a      	ldr	r3, [pc, #232]	; (b2d4 <SearchAvailableChannel2+0x1ac>)
    b1ec:	4798      	blx	r3
    b1ee:	0003      	movs	r3, r0
			    return LORAWAN_NO_CHANNELS_FOUND;
    b1f0:	2010      	movs	r0, #16
		    if(SwTimerIsRunning(RegParams.pJoinDutyCycleTimer->timerId)) //check timerrunning
    b1f2:	2b00      	cmp	r3, #0
    b1f4:	d0bb      	beq.n	b16e <SearchAvailableChannel2+0x46>
    b1f6:	e052      	b.n	b29e <SearchAvailableChannel2+0x176>
	    if(RegParams.cmnParams.paramsType2.aggregatedDutyCycleTimeout)
    b1f8:	4934      	ldr	r1, [pc, #208]	; (b2cc <SearchAvailableChannel2+0x1a4>)
    b1fa:	23ba      	movs	r3, #186	; 0xba
    b1fc:	33ff      	adds	r3, #255	; 0xff
    b1fe:	5ccb      	ldrb	r3, [r1, r3]
    b200:	22dd      	movs	r2, #221	; 0xdd
    b202:	0052      	lsls	r2, r2, #1
    b204:	5c8a      	ldrb	r2, [r1, r2]
    b206:	0212      	lsls	r2, r2, #8
    b208:	431a      	orrs	r2, r3
    b20a:	23bc      	movs	r3, #188	; 0xbc
    b20c:	33ff      	adds	r3, #255	; 0xff
    b20e:	5ccb      	ldrb	r3, [r1, r3]
    b210:	041b      	lsls	r3, r3, #16
    b212:	431a      	orrs	r2, r3
    b214:	23de      	movs	r3, #222	; 0xde
    b216:	005b      	lsls	r3, r3, #1
    b218:	5ccb      	ldrb	r3, [r1, r3]
    b21a:	061b      	lsls	r3, r3, #24
    b21c:	4313      	orrs	r3, r2
		    return LORAWAN_NO_CHANNELS_FOUND;
    b21e:	2010      	movs	r0, #16
	    if(RegParams.cmnParams.paramsType2.aggregatedDutyCycleTimeout)
    b220:	2b00      	cmp	r3, #0
    b222:	d0a4      	beq.n	b16e <SearchAvailableChannel2+0x46>
    b224:	e03b      	b.n	b29e <SearchAvailableChannel2+0x176>
					ChList[num] = i;
    b226:	693c      	ldr	r4, [r7, #16]
    b228:	6979      	ldr	r1, [r7, #20]
    b22a:	5463      	strb	r3, [r4, r1]
					num++;
    b22c:	3101      	adds	r1, #1
    b22e:	b2c9      	uxtb	r1, r1
    b230:	6179      	str	r1, [r7, #20]
	for (i = 0; i < maxChannels; i++)
    b232:	3301      	adds	r3, #1
    b234:	b2db      	uxtb	r3, r3
    b236:	3202      	adds	r2, #2
    b238:	360c      	adds	r6, #12
    b23a:	300c      	adds	r0, #12
    b23c:	429d      	cmp	r5, r3
    b23e:	d02a      	beq.n	b296 <SearchAvailableChannel2+0x16e>
			if ((RegParams.pChParams[i].status == ENABLED) &&
    b240:	7811      	ldrb	r1, [r2, #0]
    b242:	2900      	cmp	r1, #0
    b244:	d0f5      	beq.n	b232 <SearchAvailableChannel2+0x10a>
				(currDr >= RegParams.pChParams[i].dataRange.min) &&
    b246:	7851      	ldrb	r1, [r2, #1]
    b248:	0709      	lsls	r1, r1, #28
    b24a:	0f09      	lsrs	r1, r1, #28
			if ((RegParams.pChParams[i].status == ENABLED) &&
    b24c:	4589      	cmp	r9, r1
    b24e:	dbf0      	blt.n	b232 <SearchAvailableChannel2+0x10a>
				(currDr <= RegParams.pChParams[i].dataRange.max)&&
    b250:	7851      	ldrb	r1, [r2, #1]
    b252:	0909      	lsrs	r1, r1, #4
				(currDr >= RegParams.pChParams[i].dataRange.min) &&
    b254:	458a      	cmp	sl, r1
    b256:	dcec      	bgt.n	b232 <SearchAvailableChannel2+0x10a>
				(currDr <= RegParams.pChParams[i].dataRange.max)&&
    b258:	4641      	mov	r1, r8
    b25a:	2900      	cmp	r1, #0
    b25c:	d014      	beq.n	b288 <SearchAvailableChannel2+0x160>
				(bandWithoutDutyCycle || RegParams.pSubBandParams[RegParams.pOtherChParams[i].subBandId].subBandTimeout == 0))
    b25e:	7834      	ldrb	r4, [r6, #0]
    b260:	0061      	lsls	r1, r4, #1
    b262:	1909      	adds	r1, r1, r4
    b264:	0089      	lsls	r1, r1, #2
    b266:	4461      	add	r1, ip
    b268:	7a0c      	ldrb	r4, [r1, #8]
    b26a:	46a3      	mov	fp, r4
    b26c:	60b9      	str	r1, [r7, #8]
    b26e:	7a4c      	ldrb	r4, [r1, #9]
    b270:	0224      	lsls	r4, r4, #8
    b272:	4659      	mov	r1, fp
    b274:	430c      	orrs	r4, r1
    b276:	68b9      	ldr	r1, [r7, #8]
    b278:	7a89      	ldrb	r1, [r1, #10]
    b27a:	0409      	lsls	r1, r1, #16
    b27c:	430c      	orrs	r4, r1
    b27e:	68b9      	ldr	r1, [r7, #8]
    b280:	7ac9      	ldrb	r1, [r1, #11]
    b282:	0609      	lsls	r1, r1, #24
    b284:	4321      	orrs	r1, r4
    b286:	d1d4      	bne.n	b232 <SearchAvailableChannel2+0x10a>
				if(((transmissionType == 0)  && (RegParams.pOtherChParams[i].joinRequestChannel == 1)) || (transmissionType != 0)) 
    b288:	68f9      	ldr	r1, [r7, #12]
    b28a:	2900      	cmp	r1, #0
    b28c:	d1cb      	bne.n	b226 <SearchAvailableChannel2+0xfe>
    b28e:	7801      	ldrb	r1, [r0, #0]
    b290:	2900      	cmp	r1, #0
    b292:	d0ce      	beq.n	b232 <SearchAvailableChannel2+0x10a>
    b294:	e7c7      	b.n	b226 <SearchAvailableChannel2+0xfe>
		result = LORAWAN_NO_CHANNELS_FOUND;
    b296:	2010      	movs	r0, #16
	if(0 != num)
    b298:	697c      	ldr	r4, [r7, #20]
    b29a:	2c00      	cmp	r4, #0
    b29c:	d107      	bne.n	b2ae <SearchAvailableChannel2+0x186>
}
    b29e:	46bd      	mov	sp, r7
    b2a0:	b007      	add	sp, #28
    b2a2:	bc3c      	pop	{r2, r3, r4, r5}
    b2a4:	4690      	mov	r8, r2
    b2a6:	4699      	mov	r9, r3
    b2a8:	46a2      	mov	sl, r4
    b2aa:	46ab      	mov	fp, r5
    b2ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
		randomNumber = rand() % num;
    b2ae:	4b0a      	ldr	r3, [pc, #40]	; (b2d8 <SearchAvailableChannel2+0x1b0>)
    b2b0:	4798      	blx	r3
    b2b2:	0021      	movs	r1, r4
    b2b4:	4b09      	ldr	r3, [pc, #36]	; (b2dc <SearchAvailableChannel2+0x1b4>)
    b2b6:	4798      	blx	r3
		*channelIndex = ChList[randomNumber];
    b2b8:	23ff      	movs	r3, #255	; 0xff
    b2ba:	4019      	ands	r1, r3
    b2bc:	693b      	ldr	r3, [r7, #16]
    b2be:	5c5b      	ldrb	r3, [r3, r1]
    b2c0:	687a      	ldr	r2, [r7, #4]
    b2c2:	7013      	strb	r3, [r2, #0]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    b2c4:	2008      	movs	r0, #8
    b2c6:	e7ea      	b.n	b29e <SearchAvailableChannel2+0x176>
    b2c8:	00019e35 	.word	0x00019e35
    b2cc:	200024d0 	.word	0x200024d0
    b2d0:	00007fe3 	.word	0x00007fe3
    b2d4:	0000eea9 	.word	0x0000eea9
    b2d8:	00019fd5 	.word	0x00019fd5
    b2dc:	0001688d 	.word	0x0001688d

0000b2e0 <LORAREG_GetAttr_FreeChannel2>:
{
    b2e0:	b570      	push	{r4, r5, r6, lr}
	memcpy(&newFreeChannelReq,(NewFreeChannelReq_t *)attrInput,sizeof(NewFreeChannelReq_t));
    b2e2:	784c      	ldrb	r4, [r1, #1]
	if(newFreeChannelReq.maxChannels > RegParams.maxChannels)
    b2e4:	202a      	movs	r0, #42	; 0x2a
    b2e6:	4d07      	ldr	r5, [pc, #28]	; (b304 <LORAREG_GetAttr_FreeChannel2+0x24>)
    b2e8:	562d      	ldrsb	r5, [r5, r0]
		return LORAWAN_INVALID_PARAMETER;
    b2ea:	3820      	subs	r0, #32
	if(newFreeChannelReq.maxChannels > RegParams.maxChannels)
    b2ec:	42ac      	cmp	r4, r5
    b2ee:	dd00      	ble.n	b2f2 <LORAREG_GetAttr_FreeChannel2+0x12>
}
    b2f0:	bd70      	pop	{r4, r5, r6, pc}
		result = SearchAvailableChannel2(newFreeChannelReq.maxChannels,newFreeChannelReq.transmissionType,newFreeChannelReq.currDr,(uint8_t*)attrOutput);
    b2f2:	7888      	ldrb	r0, [r1, #2]
    b2f4:	7809      	ldrb	r1, [r1, #0]
    b2f6:	0013      	movs	r3, r2
    b2f8:	0002      	movs	r2, r0
    b2fa:	0020      	movs	r0, r4
    b2fc:	4c02      	ldr	r4, [pc, #8]	; (b308 <LORAREG_GetAttr_FreeChannel2+0x28>)
    b2fe:	47a0      	blx	r4
	return result;
    b300:	e7f6      	b.n	b2f0 <LORAREG_GetAttr_FreeChannel2+0x10>
    b302:	46c0      	nop			; (mov r8, r8)
    b304:	200024d0 	.word	0x200024d0
    b308:	0000b129 	.word	0x0000b129

0000b30c <setJoinBackoffCntl>:
{   
    b30c:	b500      	push	{lr}
    b30e:	b083      	sub	sp, #12
	memcpy(&joinbackoffcntl,attrInput,sizeof(bool));
    b310:	780b      	ldrb	r3, [r1, #0]
    b312:	466a      	mov	r2, sp
    b314:	71d3      	strb	r3, [r2, #7]
	if(joinbackoffcntl == false)
    b316:	2b00      	cmp	r3, #0
    b318:	d145      	bne.n	b3a6 <setJoinBackoffCntl+0x9a>
		if(RegParams.FeaturesSupport & JOIN_BACKOFF_SUPPORT)
    b31a:	3320      	adds	r3, #32
    b31c:	4a26      	ldr	r2, [pc, #152]	; (b3b8 <setJoinBackoffCntl+0xac>)
    b31e:	5cd3      	ldrb	r3, [r2, r3]
    b320:	069a      	lsls	r2, r3, #26
    b322:	d546      	bpl.n	b3b2 <setJoinBackoffCntl+0xa6>
			RegParams.FeaturesSupport &= ~JOIN_BACKOFF_SUPPORT;
    b324:	4924      	ldr	r1, [pc, #144]	; (b3b8 <setJoinBackoffCntl+0xac>)
    b326:	2220      	movs	r2, #32
    b328:	4393      	bics	r3, r2
    b32a:	548b      	strb	r3, [r1, r2]
			if (SwTimerIsRunning(RegParams.pJoinBackoffTimer->timerId))
    b32c:	7e0b      	ldrb	r3, [r1, #24]
    b32e:	7e4a      	ldrb	r2, [r1, #25]
    b330:	0212      	lsls	r2, r2, #8
    b332:	431a      	orrs	r2, r3
    b334:	7e8b      	ldrb	r3, [r1, #26]
    b336:	041b      	lsls	r3, r3, #16
    b338:	431a      	orrs	r2, r3
    b33a:	7ecb      	ldrb	r3, [r1, #27]
    b33c:	061b      	lsls	r3, r3, #24
    b33e:	4313      	orrs	r3, r2
    b340:	7818      	ldrb	r0, [r3, #0]
    b342:	4b1e      	ldr	r3, [pc, #120]	; (b3bc <setJoinBackoffCntl+0xb0>)
    b344:	4798      	blx	r3
    b346:	2800      	cmp	r0, #0
    b348:	d11e      	bne.n	b388 <setJoinBackoffCntl+0x7c>
			if (SwTimerIsRunning(RegParams.pJoinDutyCycleTimer->timerId))
    b34a:	491b      	ldr	r1, [pc, #108]	; (b3b8 <setJoinBackoffCntl+0xac>)
    b34c:	7d0b      	ldrb	r3, [r1, #20]
    b34e:	7d4a      	ldrb	r2, [r1, #21]
    b350:	0212      	lsls	r2, r2, #8
    b352:	431a      	orrs	r2, r3
    b354:	7d8b      	ldrb	r3, [r1, #22]
    b356:	041b      	lsls	r3, r3, #16
    b358:	431a      	orrs	r2, r3
    b35a:	7dcb      	ldrb	r3, [r1, #23]
    b35c:	061b      	lsls	r3, r3, #24
    b35e:	4313      	orrs	r3, r2
    b360:	7a18      	ldrb	r0, [r3, #8]
    b362:	4b16      	ldr	r3, [pc, #88]	; (b3bc <setJoinBackoffCntl+0xb0>)
    b364:	4798      	blx	r3
    b366:	2800      	cmp	r0, #0
    b368:	d023      	beq.n	b3b2 <setJoinBackoffCntl+0xa6>
				SwTimerStop(RegParams.pJoinDutyCycleTimer->timerId);
    b36a:	4913      	ldr	r1, [pc, #76]	; (b3b8 <setJoinBackoffCntl+0xac>)
    b36c:	7d0b      	ldrb	r3, [r1, #20]
    b36e:	7d4a      	ldrb	r2, [r1, #21]
    b370:	0212      	lsls	r2, r2, #8
    b372:	431a      	orrs	r2, r3
    b374:	7d8b      	ldrb	r3, [r1, #22]
    b376:	041b      	lsls	r3, r3, #16
    b378:	431a      	orrs	r2, r3
    b37a:	7dcb      	ldrb	r3, [r1, #23]
    b37c:	061b      	lsls	r3, r3, #24
    b37e:	4313      	orrs	r3, r2
    b380:	7a18      	ldrb	r0, [r3, #8]
    b382:	4b0f      	ldr	r3, [pc, #60]	; (b3c0 <setJoinBackoffCntl+0xb4>)
    b384:	4798      	blx	r3
    b386:	e014      	b.n	b3b2 <setJoinBackoffCntl+0xa6>
				SwTimerStop(RegParams.pJoinBackoffTimer->timerId);
    b388:	490b      	ldr	r1, [pc, #44]	; (b3b8 <setJoinBackoffCntl+0xac>)
    b38a:	7e0b      	ldrb	r3, [r1, #24]
    b38c:	7e4a      	ldrb	r2, [r1, #25]
    b38e:	0212      	lsls	r2, r2, #8
    b390:	431a      	orrs	r2, r3
    b392:	7e8b      	ldrb	r3, [r1, #26]
    b394:	041b      	lsls	r3, r3, #16
    b396:	431a      	orrs	r2, r3
    b398:	7ecb      	ldrb	r3, [r1, #27]
    b39a:	061b      	lsls	r3, r3, #24
    b39c:	4313      	orrs	r3, r2
    b39e:	7818      	ldrb	r0, [r3, #0]
    b3a0:	4b07      	ldr	r3, [pc, #28]	; (b3c0 <setJoinBackoffCntl+0xb4>)
    b3a2:	4798      	blx	r3
    b3a4:	e7d1      	b.n	b34a <setJoinBackoffCntl+0x3e>
		RegParams.FeaturesSupport |= JOIN_BACKOFF_SUPPORT;
    b3a6:	4904      	ldr	r1, [pc, #16]	; (b3b8 <setJoinBackoffCntl+0xac>)
    b3a8:	2220      	movs	r2, #32
    b3aa:	5c8b      	ldrb	r3, [r1, r2]
    b3ac:	2020      	movs	r0, #32
    b3ae:	4303      	orrs	r3, r0
    b3b0:	548b      	strb	r3, [r1, r2]
}
    b3b2:	2008      	movs	r0, #8
    b3b4:	b003      	add	sp, #12
    b3b6:	bd00      	pop	{pc}
    b3b8:	200024d0 	.word	0x200024d0
    b3bc:	0000eea9 	.word	0x0000eea9
    b3c0:	0000f029 	.word	0x0000f029

0000b3c4 <setJoinBackOffTimer>:
{
    b3c4:	b510      	push	{r4, lr}
    b3c6:	b084      	sub	sp, #16
	memcpy(&startJoinBackOffTimer,attrInput,sizeof(bool));
    b3c8:	780b      	ldrb	r3, [r1, #0]
    b3ca:	220f      	movs	r2, #15
    b3cc:	446a      	add	r2, sp
    b3ce:	7013      	strb	r3, [r2, #0]
	if(startJoinBackOffTimer == true)
    b3d0:	2b00      	cmp	r3, #0
    b3d2:	d113      	bne.n	b3fc <setJoinBackOffTimer+0x38>
		SwTimerStop(RegParams.pJoinBackoffTimer->timerId);
    b3d4:	4c13      	ldr	r4, [pc, #76]	; (b424 <setJoinBackOffTimer+0x60>)
    b3d6:	7e23      	ldrb	r3, [r4, #24]
    b3d8:	7e62      	ldrb	r2, [r4, #25]
    b3da:	0212      	lsls	r2, r2, #8
    b3dc:	431a      	orrs	r2, r3
    b3de:	7ea3      	ldrb	r3, [r4, #26]
    b3e0:	041b      	lsls	r3, r3, #16
    b3e2:	431a      	orrs	r2, r3
    b3e4:	7ee3      	ldrb	r3, [r4, #27]
    b3e6:	061b      	lsls	r3, r3, #24
    b3e8:	4313      	orrs	r3, r2
    b3ea:	7818      	ldrb	r0, [r3, #0]
    b3ec:	4b0e      	ldr	r3, [pc, #56]	; (b428 <setJoinBackOffTimer+0x64>)
    b3ee:	4798      	blx	r3
		RegParams.joinbccount = 0;
    b3f0:	2200      	movs	r2, #0
    b3f2:	2342      	movs	r3, #66	; 0x42
    b3f4:	54e2      	strb	r2, [r4, r3]
}
    b3f6:	2008      	movs	r0, #8
    b3f8:	b004      	add	sp, #16
    b3fa:	bd10      	pop	{r4, pc}
		SwTimerStart (RegParams.pJoinBackoffTimer->timerId, MS_TO_US(BACKOFF_BASE_TIME_IN_MS), SW_TIMEOUT_RELATIVE, (void *)JoinBackoffCallback, NULL);
    b3fc:	4909      	ldr	r1, [pc, #36]	; (b424 <setJoinBackOffTimer+0x60>)
    b3fe:	7e0b      	ldrb	r3, [r1, #24]
    b400:	7e4a      	ldrb	r2, [r1, #25]
    b402:	0212      	lsls	r2, r2, #8
    b404:	431a      	orrs	r2, r3
    b406:	7e8b      	ldrb	r3, [r1, #26]
    b408:	041b      	lsls	r3, r3, #16
    b40a:	431a      	orrs	r2, r3
    b40c:	7ecb      	ldrb	r3, [r1, #27]
    b40e:	061b      	lsls	r3, r3, #24
    b410:	4313      	orrs	r3, r2
    b412:	7818      	ldrb	r0, [r3, #0]
    b414:	2300      	movs	r3, #0
    b416:	9300      	str	r3, [sp, #0]
    b418:	4b04      	ldr	r3, [pc, #16]	; (b42c <setJoinBackOffTimer+0x68>)
    b41a:	2200      	movs	r2, #0
    b41c:	4904      	ldr	r1, [pc, #16]	; (b430 <setJoinBackOffTimer+0x6c>)
    b41e:	4c05      	ldr	r4, [pc, #20]	; (b434 <setJoinBackOffTimer+0x70>)
    b420:	47a0      	blx	r4
    b422:	e7e8      	b.n	b3f6 <setJoinBackOffTimer+0x32>
    b424:	200024d0 	.word	0x200024d0
    b428:	0000f029 	.word	0x0000f029
    b42c:	0000c045 	.word	0x0000c045
    b430:	6b49d200 	.word	0x6b49d200
    b434:	0000ed11 	.word	0x0000ed11

0000b438 <setJoinDutyCycleTimer>:
{
    b438:	b530      	push	{r4, r5, lr}
    b43a:	b085      	sub	sp, #20
	memcpy(&UpdateJoinDutyCycleTimer,attrInput,sizeof(UpdateJoinDutyCycleTimer_t));
    b43c:	ac02      	add	r4, sp, #8
    b43e:	2208      	movs	r2, #8
    b440:	0020      	movs	r0, r4
    b442:	4b93      	ldr	r3, [pc, #588]	; (b690 <setJoinDutyCycleTimer+0x258>)
    b444:	4798      	blx	r3
	if(UpdateJoinDutyCycleTimer.startJoinDutyCycleTimer == true)
    b446:	7923      	ldrb	r3, [r4, #4]
    b448:	2b00      	cmp	r3, #0
    b44a:	d100      	bne.n	b44e <setJoinDutyCycleTimer+0x16>
    b44c:	e0f8      	b.n	b640 <setJoinDutyCycleTimer+0x208>
			if(RegParams.joinbccount < AGGREGATEDTIME_1HR)
    b44e:	2342      	movs	r3, #66	; 0x42
    b450:	4a90      	ldr	r2, [pc, #576]	; (b694 <setJoinDutyCycleTimer+0x25c>)
    b452:	5cd3      	ldrb	r3, [r2, r3]
    b454:	2b01      	cmp	r3, #1
    b456:	d800      	bhi.n	b45a <setJoinDutyCycleTimer+0x22>
    b458:	e081      	b.n	b55e <setJoinDutyCycleTimer+0x126>
			else if (RegParams.joinbccount < AGGREGATEDTIME_10HR)
    b45a:	2b13      	cmp	r3, #19
    b45c:	d900      	bls.n	b460 <setJoinDutyCycleTimer+0x28>
    b45e:	e08d      	b.n	b57c <setJoinDutyCycleTimer+0x144>
				RegParams.joinDutyCycleTimeout = (uint32_t)UpdateJoinDutyCycleTimer.joinreqTimeonAir * (JOIN_BACKOFF_PRESCALAR_10HR - 1);
    b460:	4b8d      	ldr	r3, [pc, #564]	; (b698 <setJoinDutyCycleTimer+0x260>)
    b462:	9a02      	ldr	r2, [sp, #8]
    b464:	4353      	muls	r3, r2
    b466:	4a8b      	ldr	r2, [pc, #556]	; (b694 <setJoinDutyCycleTimer+0x25c>)
    b468:	323e      	adds	r2, #62	; 0x3e
    b46a:	7013      	strb	r3, [r2, #0]
    b46c:	0a19      	lsrs	r1, r3, #8
    b46e:	7051      	strb	r1, [r2, #1]
    b470:	0c19      	lsrs	r1, r3, #16
    b472:	7091      	strb	r1, [r2, #2]
    b474:	0e1b      	lsrs	r3, r3, #24
    b476:	70d3      	strb	r3, [r2, #3]
		if(SwTimerIsRunning(RegParams.pJoinDutyCycleTimer->timerId))
    b478:	4986      	ldr	r1, [pc, #536]	; (b694 <setJoinDutyCycleTimer+0x25c>)
    b47a:	7d0b      	ldrb	r3, [r1, #20]
    b47c:	7d4a      	ldrb	r2, [r1, #21]
    b47e:	0212      	lsls	r2, r2, #8
    b480:	431a      	orrs	r2, r3
    b482:	7d8b      	ldrb	r3, [r1, #22]
    b484:	041b      	lsls	r3, r3, #16
    b486:	431a      	orrs	r2, r3
    b488:	7dcb      	ldrb	r3, [r1, #23]
    b48a:	061b      	lsls	r3, r3, #24
    b48c:	4313      	orrs	r3, r2
    b48e:	7a18      	ldrb	r0, [r3, #8]
    b490:	4b82      	ldr	r3, [pc, #520]	; (b69c <setJoinDutyCycleTimer+0x264>)
    b492:	4798      	blx	r3
	uint32_t delta = 0,ticks;
    b494:	2400      	movs	r4, #0
		if(SwTimerIsRunning(RegParams.pJoinDutyCycleTimer->timerId))
    b496:	2800      	cmp	r0, #0
    b498:	d17d      	bne.n	b596 <setJoinDutyCycleTimer+0x15e>
		if(RegParams.joinDutyCycleTimeout != 0)
    b49a:	4b7e      	ldr	r3, [pc, #504]	; (b694 <setJoinDutyCycleTimer+0x25c>)
    b49c:	213e      	movs	r1, #62	; 0x3e
    b49e:	5c59      	ldrb	r1, [r3, r1]
    b4a0:	203f      	movs	r0, #63	; 0x3f
    b4a2:	5c18      	ldrb	r0, [r3, r0]
    b4a4:	0200      	lsls	r0, r0, #8
    b4a6:	4308      	orrs	r0, r1
    b4a8:	2140      	movs	r1, #64	; 0x40
    b4aa:	5c59      	ldrb	r1, [r3, r1]
    b4ac:	0409      	lsls	r1, r1, #16
    b4ae:	4308      	orrs	r0, r1
    b4b0:	2141      	movs	r1, #65	; 0x41
    b4b2:	5c59      	ldrb	r1, [r3, r1]
    b4b4:	0609      	lsls	r1, r1, #24
    b4b6:	4301      	orrs	r1, r0
    b4b8:	d100      	bne.n	b4bc <setJoinDutyCycleTimer+0x84>
    b4ba:	e0e5      	b.n	b688 <setJoinDutyCycleTimer+0x250>
			if(RegParams.joinDutyCycleTimeout > delta)
    b4bc:	428c      	cmp	r4, r1
    b4be:	d300      	bcc.n	b4c2 <setJoinDutyCycleTimer+0x8a>
    b4c0:	e0b6      	b.n	b630 <setJoinDutyCycleTimer+0x1f8>
				RegParams.joinDutyCycleTimeout = RegParams.joinDutyCycleTimeout - delta;
    b4c2:	1b09      	subs	r1, r1, r4
    b4c4:	333e      	adds	r3, #62	; 0x3e
    b4c6:	7019      	strb	r1, [r3, #0]
    b4c8:	0a0a      	lsrs	r2, r1, #8
    b4ca:	705a      	strb	r2, [r3, #1]
    b4cc:	0c0a      	lsrs	r2, r1, #16
    b4ce:	709a      	strb	r2, [r3, #2]
    b4d0:	0e0a      	lsrs	r2, r1, #24
    b4d2:	70da      	strb	r2, [r3, #3]
				if(RegParams.joinDutyCycleTimeout > US_TO_MS(SWTIMER_MAX_TIMEOUT))
    b4d4:	4b72      	ldr	r3, [pc, #456]	; (b6a0 <setJoinDutyCycleTimer+0x268>)
    b4d6:	4299      	cmp	r1, r3
    b4d8:	d800      	bhi.n	b4dc <setJoinDutyCycleTimer+0xa4>
    b4da:	e093      	b.n	b604 <setJoinDutyCycleTimer+0x1cc>
					RegParams.pJoinDutyCycleTimer->remainingtime =RegParams.joinDutyCycleTimeout - (US_TO_MS(SWTIMER_MAX_TIMEOUT)) ;
    b4dc:	4c6d      	ldr	r4, [pc, #436]	; (b694 <setJoinDutyCycleTimer+0x25c>)
    b4de:	7d23      	ldrb	r3, [r4, #20]
    b4e0:	7d62      	ldrb	r2, [r4, #21]
    b4e2:	0212      	lsls	r2, r2, #8
    b4e4:	431a      	orrs	r2, r3
    b4e6:	7da3      	ldrb	r3, [r4, #22]
    b4e8:	041b      	lsls	r3, r3, #16
    b4ea:	431a      	orrs	r2, r3
    b4ec:	7de3      	ldrb	r3, [r4, #23]
    b4ee:	061b      	lsls	r3, r3, #24
    b4f0:	4313      	orrs	r3, r2
    b4f2:	4a6c      	ldr	r2, [pc, #432]	; (b6a4 <setJoinDutyCycleTimer+0x26c>)
    b4f4:	4694      	mov	ip, r2
    b4f6:	4461      	add	r1, ip
    b4f8:	7119      	strb	r1, [r3, #4]
    b4fa:	0a0a      	lsrs	r2, r1, #8
    b4fc:	715a      	strb	r2, [r3, #5]
    b4fe:	0c0a      	lsrs	r2, r1, #16
    b500:	719a      	strb	r2, [r3, #6]
    b502:	0e09      	lsrs	r1, r1, #24
    b504:	71d9      	strb	r1, [r3, #7]
					SwTimerStart(RegParams.pJoinDutyCycleTimer->timerId, SWTIMER_MAX_TIMEOUT, SW_TIMEOUT_RELATIVE, (void *)JoinDutyCycleCallback, NULL);
    b506:	7d23      	ldrb	r3, [r4, #20]
    b508:	7d62      	ldrb	r2, [r4, #21]
    b50a:	0212      	lsls	r2, r2, #8
    b50c:	431a      	orrs	r2, r3
    b50e:	7da3      	ldrb	r3, [r4, #22]
    b510:	041b      	lsls	r3, r3, #16
    b512:	431a      	orrs	r2, r3
    b514:	7de3      	ldrb	r3, [r4, #23]
    b516:	061b      	lsls	r3, r3, #24
    b518:	4313      	orrs	r3, r2
    b51a:	7a18      	ldrb	r0, [r3, #8]
    b51c:	2300      	movs	r3, #0
    b51e:	9300      	str	r3, [sp, #0]
    b520:	4b61      	ldr	r3, [pc, #388]	; (b6a8 <setJoinDutyCycleTimer+0x270>)
    b522:	2200      	movs	r2, #0
    b524:	4961      	ldr	r1, [pc, #388]	; (b6ac <setJoinDutyCycleTimer+0x274>)
    b526:	4d62      	ldr	r5, [pc, #392]	; (b6b0 <setJoinDutyCycleTimer+0x278>)
    b528:	47a8      	blx	r5
					RegParams.joinDutyCycleTimeout = RegParams.joinDutyCycleTimeout - (US_TO_MS(SWTIMER_MAX_TIMEOUT));
    b52a:	233e      	movs	r3, #62	; 0x3e
    b52c:	5ce3      	ldrb	r3, [r4, r3]
    b52e:	223f      	movs	r2, #63	; 0x3f
    b530:	5ca2      	ldrb	r2, [r4, r2]
    b532:	0212      	lsls	r2, r2, #8
    b534:	431a      	orrs	r2, r3
    b536:	2340      	movs	r3, #64	; 0x40
    b538:	5ce3      	ldrb	r3, [r4, r3]
    b53a:	041b      	lsls	r3, r3, #16
    b53c:	431a      	orrs	r2, r3
    b53e:	2341      	movs	r3, #65	; 0x41
    b540:	5ce3      	ldrb	r3, [r4, r3]
    b542:	061b      	lsls	r3, r3, #24
    b544:	4313      	orrs	r3, r2
    b546:	4a57      	ldr	r2, [pc, #348]	; (b6a4 <setJoinDutyCycleTimer+0x26c>)
    b548:	4694      	mov	ip, r2
    b54a:	4463      	add	r3, ip
    b54c:	343e      	adds	r4, #62	; 0x3e
    b54e:	7023      	strb	r3, [r4, #0]
    b550:	0a1a      	lsrs	r2, r3, #8
    b552:	7062      	strb	r2, [r4, #1]
    b554:	0c1a      	lsrs	r2, r3, #16
    b556:	70a2      	strb	r2, [r4, #2]
    b558:	0e1b      	lsrs	r3, r3, #24
    b55a:	70e3      	strb	r3, [r4, #3]
    b55c:	e094      	b.n	b688 <setJoinDutyCycleTimer+0x250>
				RegParams.joinDutyCycleTimeout = (uint32_t)UpdateJoinDutyCycleTimer.joinreqTimeonAir * (JOIN_BACKOFF_PRESCALAR_1HR - 1);
    b55e:	9a02      	ldr	r2, [sp, #8]
    b560:	0053      	lsls	r3, r2, #1
    b562:	189b      	adds	r3, r3, r2
    b564:	015a      	lsls	r2, r3, #5
    b566:	189b      	adds	r3, r3, r2
    b568:	4a4a      	ldr	r2, [pc, #296]	; (b694 <setJoinDutyCycleTimer+0x25c>)
    b56a:	323e      	adds	r2, #62	; 0x3e
    b56c:	7013      	strb	r3, [r2, #0]
    b56e:	0a19      	lsrs	r1, r3, #8
    b570:	7051      	strb	r1, [r2, #1]
    b572:	0c19      	lsrs	r1, r3, #16
    b574:	7091      	strb	r1, [r2, #2]
    b576:	0e1b      	lsrs	r3, r3, #24
    b578:	70d3      	strb	r3, [r2, #3]
    b57a:	e77d      	b.n	b478 <setJoinDutyCycleTimer+0x40>
				RegParams.joinDutyCycleTimeout = (uint32_t)UpdateJoinDutyCycleTimer.joinreqTimeonAir * (JOIN_BACKOFF_PRESCALAR_24HR - 1);
    b57c:	4b4d      	ldr	r3, [pc, #308]	; (b6b4 <setJoinDutyCycleTimer+0x27c>)
    b57e:	9a02      	ldr	r2, [sp, #8]
    b580:	4353      	muls	r3, r2
    b582:	4a44      	ldr	r2, [pc, #272]	; (b694 <setJoinDutyCycleTimer+0x25c>)
    b584:	323e      	adds	r2, #62	; 0x3e
    b586:	7013      	strb	r3, [r2, #0]
    b588:	0a19      	lsrs	r1, r3, #8
    b58a:	7051      	strb	r1, [r2, #1]
    b58c:	0c19      	lsrs	r1, r3, #16
    b58e:	7091      	strb	r1, [r2, #2]
    b590:	0e1b      	lsrs	r3, r3, #24
    b592:	70d3      	strb	r3, [r2, #3]
    b594:	e770      	b.n	b478 <setJoinDutyCycleTimer+0x40>
			ticks = SwTimerReadValue(RegParams.pJoinDutyCycleTimer->timerId);
    b596:	4c3f      	ldr	r4, [pc, #252]	; (b694 <setJoinDutyCycleTimer+0x25c>)
    b598:	7d23      	ldrb	r3, [r4, #20]
    b59a:	7d62      	ldrb	r2, [r4, #21]
    b59c:	0212      	lsls	r2, r2, #8
    b59e:	431a      	orrs	r2, r3
    b5a0:	7da3      	ldrb	r3, [r4, #22]
    b5a2:	041b      	lsls	r3, r3, #16
    b5a4:	431a      	orrs	r2, r3
    b5a6:	7de3      	ldrb	r3, [r4, #23]
    b5a8:	061b      	lsls	r3, r3, #24
    b5aa:	4313      	orrs	r3, r2
    b5ac:	7a18      	ldrb	r0, [r3, #8]
    b5ae:	4b42      	ldr	r3, [pc, #264]	; (b6b8 <setJoinDutyCycleTimer+0x280>)
    b5b0:	4798      	blx	r3
    b5b2:	0005      	movs	r5, r0
			SwTimerStop(RegParams.pJoinDutyCycleTimer->timerId);
    b5b4:	7d23      	ldrb	r3, [r4, #20]
    b5b6:	7d62      	ldrb	r2, [r4, #21]
    b5b8:	0212      	lsls	r2, r2, #8
    b5ba:	431a      	orrs	r2, r3
    b5bc:	7da3      	ldrb	r3, [r4, #22]
    b5be:	041b      	lsls	r3, r3, #16
    b5c0:	431a      	orrs	r2, r3
    b5c2:	7de3      	ldrb	r3, [r4, #23]
    b5c4:	061b      	lsls	r3, r3, #24
    b5c6:	4313      	orrs	r3, r2
    b5c8:	7a18      	ldrb	r0, [r3, #8]
    b5ca:	4b3c      	ldr	r3, [pc, #240]	; (b6bc <setJoinDutyCycleTimer+0x284>)
    b5cc:	4798      	blx	r3
			delta = RegParams.pJoinDutyCycleTimer->lastTimerInterval- US_TO_MS(ticks);
    b5ce:	7d23      	ldrb	r3, [r4, #20]
    b5d0:	7d62      	ldrb	r2, [r4, #21]
    b5d2:	0212      	lsls	r2, r2, #8
    b5d4:	431a      	orrs	r2, r3
    b5d6:	7da3      	ldrb	r3, [r4, #22]
    b5d8:	041b      	lsls	r3, r3, #16
    b5da:	431a      	orrs	r2, r3
    b5dc:	7de3      	ldrb	r3, [r4, #23]
    b5de:	061b      	lsls	r3, r3, #24
    b5e0:	4313      	orrs	r3, r2
    b5e2:	781a      	ldrb	r2, [r3, #0]
    b5e4:	785c      	ldrb	r4, [r3, #1]
    b5e6:	0224      	lsls	r4, r4, #8
    b5e8:	4322      	orrs	r2, r4
    b5ea:	789c      	ldrb	r4, [r3, #2]
    b5ec:	0424      	lsls	r4, r4, #16
    b5ee:	4314      	orrs	r4, r2
    b5f0:	78da      	ldrb	r2, [r3, #3]
    b5f2:	0612      	lsls	r2, r2, #24
    b5f4:	4314      	orrs	r4, r2
    b5f6:	21fa      	movs	r1, #250	; 0xfa
    b5f8:	0089      	lsls	r1, r1, #2
    b5fa:	0028      	movs	r0, r5
    b5fc:	4b30      	ldr	r3, [pc, #192]	; (b6c0 <setJoinDutyCycleTimer+0x288>)
    b5fe:	4798      	blx	r3
    b600:	1a24      	subs	r4, r4, r0
    b602:	e74a      	b.n	b49a <setJoinDutyCycleTimer+0x62>
				SwTimerStart (RegParams.pJoinDutyCycleTimer->timerId, MS_TO_US(RegParams.joinDutyCycleTimeout), SW_TIMEOUT_RELATIVE, (void *)JoinDutyCycleCallback, NULL);
    b604:	20fa      	movs	r0, #250	; 0xfa
    b606:	0080      	lsls	r0, r0, #2
    b608:	4341      	muls	r1, r0
    b60a:	4c22      	ldr	r4, [pc, #136]	; (b694 <setJoinDutyCycleTimer+0x25c>)
    b60c:	7d23      	ldrb	r3, [r4, #20]
    b60e:	7d62      	ldrb	r2, [r4, #21]
    b610:	0212      	lsls	r2, r2, #8
    b612:	431a      	orrs	r2, r3
    b614:	7da3      	ldrb	r3, [r4, #22]
    b616:	041b      	lsls	r3, r3, #16
    b618:	431a      	orrs	r2, r3
    b61a:	7de3      	ldrb	r3, [r4, #23]
    b61c:	061b      	lsls	r3, r3, #24
    b61e:	4313      	orrs	r3, r2
    b620:	7a18      	ldrb	r0, [r3, #8]
    b622:	2300      	movs	r3, #0
    b624:	9300      	str	r3, [sp, #0]
    b626:	4b20      	ldr	r3, [pc, #128]	; (b6a8 <setJoinDutyCycleTimer+0x270>)
    b628:	2200      	movs	r2, #0
    b62a:	4c21      	ldr	r4, [pc, #132]	; (b6b0 <setJoinDutyCycleTimer+0x278>)
    b62c:	47a0      	blx	r4
    b62e:	e02b      	b.n	b688 <setJoinDutyCycleTimer+0x250>
				RegParams.joinDutyCycleTimeout = 0;
    b630:	4b18      	ldr	r3, [pc, #96]	; (b694 <setJoinDutyCycleTimer+0x25c>)
    b632:	333e      	adds	r3, #62	; 0x3e
    b634:	2200      	movs	r2, #0
    b636:	701a      	strb	r2, [r3, #0]
    b638:	705a      	strb	r2, [r3, #1]
    b63a:	709a      	strb	r2, [r3, #2]
    b63c:	70da      	strb	r2, [r3, #3]
    b63e:	e023      	b.n	b688 <setJoinDutyCycleTimer+0x250>
		SwTimerStop(RegParams.pJoinDutyCycleTimer->timerId);
    b640:	4c14      	ldr	r4, [pc, #80]	; (b694 <setJoinDutyCycleTimer+0x25c>)
    b642:	7d23      	ldrb	r3, [r4, #20]
    b644:	7d62      	ldrb	r2, [r4, #21]
    b646:	0212      	lsls	r2, r2, #8
    b648:	431a      	orrs	r2, r3
    b64a:	7da3      	ldrb	r3, [r4, #22]
    b64c:	041b      	lsls	r3, r3, #16
    b64e:	431a      	orrs	r2, r3
    b650:	7de3      	ldrb	r3, [r4, #23]
    b652:	061b      	lsls	r3, r3, #24
    b654:	4313      	orrs	r3, r2
    b656:	7a18      	ldrb	r0, [r3, #8]
    b658:	4b18      	ldr	r3, [pc, #96]	; (b6bc <setJoinDutyCycleTimer+0x284>)
    b65a:	4798      	blx	r3
		RegParams.joinDutyCycleTimeout = 0;
    b65c:	0023      	movs	r3, r4
    b65e:	333e      	adds	r3, #62	; 0x3e
    b660:	2200      	movs	r2, #0
    b662:	701a      	strb	r2, [r3, #0]
    b664:	705a      	strb	r2, [r3, #1]
    b666:	709a      	strb	r2, [r3, #2]
    b668:	70da      	strb	r2, [r3, #3]
		RegParams.pJoinDutyCycleTimer->remainingtime =0;
    b66a:	7d23      	ldrb	r3, [r4, #20]
    b66c:	7d62      	ldrb	r2, [r4, #21]
    b66e:	0212      	lsls	r2, r2, #8
    b670:	431a      	orrs	r2, r3
    b672:	7da3      	ldrb	r3, [r4, #22]
    b674:	041b      	lsls	r3, r3, #16
    b676:	431a      	orrs	r2, r3
    b678:	7de3      	ldrb	r3, [r4, #23]
    b67a:	061b      	lsls	r3, r3, #24
    b67c:	4313      	orrs	r3, r2
    b67e:	2200      	movs	r2, #0
    b680:	711a      	strb	r2, [r3, #4]
    b682:	715a      	strb	r2, [r3, #5]
    b684:	719a      	strb	r2, [r3, #6]
    b686:	71da      	strb	r2, [r3, #7]
}
    b688:	2008      	movs	r0, #8
    b68a:	b005      	add	sp, #20
    b68c:	bd30      	pop	{r4, r5, pc}
    b68e:	46c0      	nop			; (mov r8, r8)
    b690:	00019d11 	.word	0x00019d11
    b694:	200024d0 	.word	0x200024d0
    b698:	000003e7 	.word	0x000003e7
    b69c:	0000eea9 	.word	0x0000eea9
    b6a0:	0020c49b 	.word	0x0020c49b
    b6a4:	ffdf3b65 	.word	0xffdf3b65
    b6a8:	0000bf69 	.word	0x0000bf69
    b6ac:	7fffffff 	.word	0x7fffffff
    b6b0:	0000ed11 	.word	0x0000ed11
    b6b4:	0000270f 	.word	0x0000270f
    b6b8:	0000eebd 	.word	0x0000eebd
    b6bc:	0000f029 	.word	0x0000f029
    b6c0:	000165ad 	.word	0x000165ad

0000b6c4 <setDutyCycleTimer>:
{
    b6c4:	b5f0      	push	{r4, r5, r6, r7, lr}
    b6c6:	46de      	mov	lr, fp
    b6c8:	4657      	mov	r7, sl
    b6ca:	464e      	mov	r6, r9
    b6cc:	4645      	mov	r5, r8
    b6ce:	b5e0      	push	{r5, r6, r7, lr}
    b6d0:	b087      	sub	sp, #28
	memcpy(&updateDCTimer,attrInput,sizeof(UpdateDutyCycleTimer_t));
    b6d2:	2206      	movs	r2, #6
    b6d4:	a804      	add	r0, sp, #16
    b6d6:	4bc9      	ldr	r3, [pc, #804]	; (b9fc <setDutyCycleTimer+0x338>)
    b6d8:	4798      	blx	r3
    bandId = RegParams.pOtherChParams[RegParams.lastUsedChannelIndex].subBandId;
    b6da:	49c9      	ldr	r1, [pc, #804]	; (ba00 <setDutyCycleTimer+0x33c>)
    b6dc:	7a0b      	ldrb	r3, [r1, #8]
    b6de:	7a4a      	ldrb	r2, [r1, #9]
    b6e0:	0212      	lsls	r2, r2, #8
    b6e2:	4313      	orrs	r3, r2
    b6e4:	7a8a      	ldrb	r2, [r1, #10]
    b6e6:	0412      	lsls	r2, r2, #16
    b6e8:	431a      	orrs	r2, r3
    b6ea:	7acb      	ldrb	r3, [r1, #11]
    b6ec:	061b      	lsls	r3, r3, #24
    b6ee:	431a      	orrs	r2, r3
    b6f0:	232f      	movs	r3, #47	; 0x2f
    b6f2:	5cc9      	ldrb	r1, [r1, r3]
    b6f4:	004b      	lsls	r3, r1, #1
    b6f6:	185b      	adds	r3, r3, r1
    b6f8:	009b      	lsls	r3, r3, #2
    b6fa:	189b      	adds	r3, r3, r2
    b6fc:	7a1e      	ldrb	r6, [r3, #8]
	if (bandId == 0 && RegParams.band == ISM_JPN923)
    b6fe:	2e00      	cmp	r6, #0
    b700:	d105      	bne.n	b70e <setDutyCycleTimer+0x4a>
    b702:	232e      	movs	r3, #46	; 0x2e
    b704:	4abe      	ldr	r2, [pc, #760]	; (ba00 <setDutyCycleTimer+0x33c>)
    b706:	5cd3      	ldrb	r3, [r2, r3]
    b708:	2b05      	cmp	r3, #5
    b70a:	d100      	bne.n	b70e <setDutyCycleTimer+0x4a>
    b70c:	e162      	b.n	b9d4 <setDutyCycleTimer+0x310>
	if(updateDCTimer.joining != 1)
    b70e:	ab04      	add	r3, sp, #16
    b710:	791b      	ldrb	r3, [r3, #4]
    b712:	2b00      	cmp	r3, #0
    b714:	d16a      	bne.n	b7ec <setDutyCycleTimer+0x128>
		RegParams.pSubBandParams[bandId].subBandTimeout = ((uint32_t)updateDCTimer.timeOnAir * ((uint32_t)RegParams.cmnParams.paramsType2.subBandDutyCycle[bandId] - 1));
    b716:	a904      	add	r1, sp, #16
    b718:	880a      	ldrh	r2, [r1, #0]
    b71a:	48b9      	ldr	r0, [pc, #740]	; (ba00 <setDutyCycleTimer+0x33c>)
    b71c:	7b07      	ldrb	r7, [r0, #12]
    b71e:	7b43      	ldrb	r3, [r0, #13]
    b720:	021b      	lsls	r3, r3, #8
    b722:	433b      	orrs	r3, r7
    b724:	7b87      	ldrb	r7, [r0, #14]
    b726:	043f      	lsls	r7, r7, #16
    b728:	431f      	orrs	r7, r3
    b72a:	7bc4      	ldrb	r4, [r0, #15]
    b72c:	0624      	lsls	r4, r4, #24
    b72e:	4327      	orrs	r7, r4
    b730:	0074      	lsls	r4, r6, #1
    b732:	19a4      	adds	r4, r4, r6
    b734:	00a4      	lsls	r4, r4, #2
    b736:	0035      	movs	r5, r6
    b738:	35d4      	adds	r5, #212	; 0xd4
    b73a:	006d      	lsls	r5, r5, #1
    b73c:	1945      	adds	r5, r0, r5
    b73e:	796b      	ldrb	r3, [r5, #5]
    b740:	469c      	mov	ip, r3
    b742:	79ab      	ldrb	r3, [r5, #6]
    b744:	021b      	lsls	r3, r3, #8
    b746:	4665      	mov	r5, ip
    b748:	432b      	orrs	r3, r5
    b74a:	3b01      	subs	r3, #1
    b74c:	4353      	muls	r3, r2
    b74e:	19e4      	adds	r4, r4, r7
    b750:	7223      	strb	r3, [r4, #8]
    b752:	0a1d      	lsrs	r5, r3, #8
    b754:	7265      	strb	r5, [r4, #9]
    b756:	0c1d      	lsrs	r5, r3, #16
    b758:	72a5      	strb	r5, [r4, #10]
    b75a:	0e1b      	lsrs	r3, r3, #24
    b75c:	72e3      	strb	r3, [r4, #11]
		RegParams.cmnParams.paramsType2.aggregatedDutyCycleTimeout = (uint32_t)updateDCTimer.timeOnAir * ((uint32_t) updateDCTimer.aggDutyCycle - 1);
    b75e:	884b      	ldrh	r3, [r1, #2]
    b760:	3b01      	subs	r3, #1
    b762:	435a      	muls	r2, r3
    b764:	23ba      	movs	r3, #186	; 0xba
    b766:	33ff      	adds	r3, #255	; 0xff
    b768:	54c2      	strb	r2, [r0, r3]
    b76a:	0a11      	lsrs	r1, r2, #8
    b76c:	18c0      	adds	r0, r0, r3
    b76e:	7041      	strb	r1, [r0, #1]
    b770:	0c11      	lsrs	r1, r2, #16
    b772:	7081      	strb	r1, [r0, #2]
    b774:	0e12      	lsrs	r2, r2, #24
    b776:	70c2      	strb	r2, [r0, #3]
	if(SwTimerIsRunning(RegParams.pDutyCycleTimer->timerId))
    b778:	49a1      	ldr	r1, [pc, #644]	; (ba00 <setDutyCycleTimer+0x33c>)
    b77a:	7c0b      	ldrb	r3, [r1, #16]
    b77c:	7c4a      	ldrb	r2, [r1, #17]
    b77e:	0212      	lsls	r2, r2, #8
    b780:	431a      	orrs	r2, r3
    b782:	7c8b      	ldrb	r3, [r1, #18]
    b784:	041b      	lsls	r3, r3, #16
    b786:	431a      	orrs	r2, r3
    b788:	7ccb      	ldrb	r3, [r1, #19]
    b78a:	061b      	lsls	r3, r3, #24
    b78c:	4313      	orrs	r3, r2
    b78e:	7918      	ldrb	r0, [r3, #4]
    b790:	4b9c      	ldr	r3, [pc, #624]	; (ba04 <setDutyCycleTimer+0x340>)
    b792:	4798      	blx	r3
    uint32_t delta = 0, minimSubBandTimer = UINT32_MAX, ticks,nextTimer;
    b794:	2300      	movs	r3, #0
    b796:	4699      	mov	r9, r3
	if(SwTimerIsRunning(RegParams.pDutyCycleTimer->timerId))
    b798:	2800      	cmp	r0, #0
    b79a:	d136      	bne.n	b80a <setDutyCycleTimer+0x146>
	minimSubBandTimer = RegParams.pSubBandParams[bandId].subBandTimeout;
    b79c:	4a98      	ldr	r2, [pc, #608]	; (ba00 <setDutyCycleTimer+0x33c>)
    b79e:	7b13      	ldrb	r3, [r2, #12]
    b7a0:	7b51      	ldrb	r1, [r2, #13]
    b7a2:	0209      	lsls	r1, r1, #8
    b7a4:	430b      	orrs	r3, r1
    b7a6:	7b91      	ldrb	r1, [r2, #14]
    b7a8:	0409      	lsls	r1, r1, #16
    b7aa:	4319      	orrs	r1, r3
    b7ac:	7bd3      	ldrb	r3, [r2, #15]
    b7ae:	061b      	lsls	r3, r3, #24
    b7b0:	4319      	orrs	r1, r3
    b7b2:	0073      	lsls	r3, r6, #1
    b7b4:	199b      	adds	r3, r3, r6
    b7b6:	009b      	lsls	r3, r3, #2
    b7b8:	185b      	adds	r3, r3, r1
    b7ba:	7a18      	ldrb	r0, [r3, #8]
    b7bc:	7a59      	ldrb	r1, [r3, #9]
    b7be:	0209      	lsls	r1, r1, #8
    b7c0:	4301      	orrs	r1, r0
    b7c2:	7a98      	ldrb	r0, [r3, #10]
    b7c4:	0400      	lsls	r0, r0, #16
    b7c6:	4301      	orrs	r1, r0
    b7c8:	7ad8      	ldrb	r0, [r3, #11]
    b7ca:	0600      	lsls	r0, r0, #24
    b7cc:	4308      	orrs	r0, r1
    b7ce:	9003      	str	r0, [sp, #12]
	for(i = 0; i < RegParams.maxSubBands; i++)
    b7d0:	2329      	movs	r3, #41	; 0x29
    b7d2:	5cd3      	ldrb	r3, [r2, r3]
    b7d4:	2b00      	cmp	r3, #0
    b7d6:	d100      	bne.n	b7da <setDutyCycleTimer+0x116>
    b7d8:	e09c      	b.n	b914 <setDutyCycleTimer+0x250>
    b7da:	2200      	movs	r2, #0
		if((i != bandId) && (RegParams.pSubBandParams[i].subBandTimeout != 0))
    b7dc:	4d88      	ldr	r5, [pc, #544]	; (ba00 <setDutyCycleTimer+0x33c>)
			if(RegParams.pSubBandParams[i].subBandTimeout <= minimSubBandTimer && RegParams.pSubBandParams[i].subBandTimeout != 0)
    b7de:	002f      	movs	r7, r5
				RegParams.pSubBandParams[i].subBandTimeout = 0;
    b7e0:	2300      	movs	r3, #0
    b7e2:	469a      	mov	sl, r3
	for(i = 0; i < RegParams.maxSubBands; i++)
    b7e4:	46a8      	mov	r8, r5
    b7e6:	2329      	movs	r3, #41	; 0x29
    b7e8:	469c      	mov	ip, r3
    b7ea:	e051      	b.n	b890 <setDutyCycleTimer+0x1cc>
		RegParams.joinDutyCycleTimeout = (uint32_t)updateDCTimer.timeOnAir * ((uint32_t) updateDCTimer.aggDutyCycle - 1);
    b7ec:	a904      	add	r1, sp, #16
    b7ee:	884a      	ldrh	r2, [r1, #2]
    b7f0:	3a01      	subs	r2, #1
    b7f2:	880b      	ldrh	r3, [r1, #0]
    b7f4:	4353      	muls	r3, r2
    b7f6:	4a82      	ldr	r2, [pc, #520]	; (ba00 <setDutyCycleTimer+0x33c>)
    b7f8:	323e      	adds	r2, #62	; 0x3e
    b7fa:	7013      	strb	r3, [r2, #0]
    b7fc:	0a19      	lsrs	r1, r3, #8
    b7fe:	7051      	strb	r1, [r2, #1]
    b800:	0c19      	lsrs	r1, r3, #16
    b802:	7091      	strb	r1, [r2, #2]
    b804:	0e1b      	lsrs	r3, r3, #24
    b806:	70d3      	strb	r3, [r2, #3]
    b808:	e7b6      	b.n	b778 <setDutyCycleTimer+0xb4>
		SwTimerStop(RegParams.pDutyCycleTimer->timerId);
    b80a:	4c7d      	ldr	r4, [pc, #500]	; (ba00 <setDutyCycleTimer+0x33c>)
    b80c:	7c23      	ldrb	r3, [r4, #16]
    b80e:	7c62      	ldrb	r2, [r4, #17]
    b810:	0212      	lsls	r2, r2, #8
    b812:	431a      	orrs	r2, r3
    b814:	7ca3      	ldrb	r3, [r4, #18]
    b816:	041b      	lsls	r3, r3, #16
    b818:	431a      	orrs	r2, r3
    b81a:	7ce3      	ldrb	r3, [r4, #19]
    b81c:	061b      	lsls	r3, r3, #24
    b81e:	4313      	orrs	r3, r2
    b820:	7918      	ldrb	r0, [r3, #4]
    b822:	4b79      	ldr	r3, [pc, #484]	; (ba08 <setDutyCycleTimer+0x344>)
    b824:	4798      	blx	r3
		ticks = SwTimerReadValue(RegParams.pDutyCycleTimer->timerId);
    b826:	7c23      	ldrb	r3, [r4, #16]
    b828:	7c62      	ldrb	r2, [r4, #17]
    b82a:	0212      	lsls	r2, r2, #8
    b82c:	431a      	orrs	r2, r3
    b82e:	7ca3      	ldrb	r3, [r4, #18]
    b830:	041b      	lsls	r3, r3, #16
    b832:	431a      	orrs	r2, r3
    b834:	7ce3      	ldrb	r3, [r4, #19]
    b836:	061b      	lsls	r3, r3, #24
    b838:	4313      	orrs	r3, r2
    b83a:	7918      	ldrb	r0, [r3, #4]
    b83c:	4b73      	ldr	r3, [pc, #460]	; (ba0c <setDutyCycleTimer+0x348>)
    b83e:	4798      	blx	r3
		delta = RegParams.pDutyCycleTimer->lastTimerValue - US_TO_MS(ticks);
    b840:	7c23      	ldrb	r3, [r4, #16]
    b842:	7c62      	ldrb	r2, [r4, #17]
    b844:	0212      	lsls	r2, r2, #8
    b846:	431a      	orrs	r2, r3
    b848:	7ca3      	ldrb	r3, [r4, #18]
    b84a:	041b      	lsls	r3, r3, #16
    b84c:	431a      	orrs	r2, r3
    b84e:	7ce3      	ldrb	r3, [r4, #19]
    b850:	061b      	lsls	r3, r3, #24
    b852:	4313      	orrs	r3, r2
    b854:	781c      	ldrb	r4, [r3, #0]
    b856:	785a      	ldrb	r2, [r3, #1]
    b858:	0212      	lsls	r2, r2, #8
    b85a:	4322      	orrs	r2, r4
    b85c:	789c      	ldrb	r4, [r3, #2]
    b85e:	0424      	lsls	r4, r4, #16
    b860:	4322      	orrs	r2, r4
    b862:	78dc      	ldrb	r4, [r3, #3]
    b864:	0624      	lsls	r4, r4, #24
    b866:	4314      	orrs	r4, r2
    b868:	21fa      	movs	r1, #250	; 0xfa
    b86a:	0089      	lsls	r1, r1, #2
    b86c:	4b68      	ldr	r3, [pc, #416]	; (ba10 <setDutyCycleTimer+0x34c>)
    b86e:	4798      	blx	r3
    b870:	1a23      	subs	r3, r4, r0
    b872:	4699      	mov	r9, r3
    b874:	e792      	b.n	b79c <setDutyCycleTimer+0xd8>
				RegParams.pSubBandParams[i].subBandTimeout = 0;
    b876:	4651      	mov	r1, sl
    b878:	7219      	strb	r1, [r3, #8]
    b87a:	7259      	strb	r1, [r3, #9]
    b87c:	7299      	strb	r1, [r3, #10]
    b87e:	72d9      	strb	r1, [r3, #11]
    b880:	e02c      	b.n	b8dc <setDutyCycleTimer+0x218>
	for(i = 0; i < RegParams.maxSubBands; i++)
    b882:	3201      	adds	r2, #1
    b884:	b2d2      	uxtb	r2, r2
    b886:	4643      	mov	r3, r8
    b888:	4661      	mov	r1, ip
    b88a:	5c5b      	ldrb	r3, [r3, r1]
    b88c:	4293      	cmp	r3, r2
    b88e:	d941      	bls.n	b914 <setDutyCycleTimer+0x250>
		if((i != bandId) && (RegParams.pSubBandParams[i].subBandTimeout != 0))
    b890:	4296      	cmp	r6, r2
    b892:	d0f6      	beq.n	b882 <setDutyCycleTimer+0x1be>
    b894:	0054      	lsls	r4, r2, #1
    b896:	18a4      	adds	r4, r4, r2
    b898:	00a4      	lsls	r4, r4, #2
    b89a:	7b2b      	ldrb	r3, [r5, #12]
    b89c:	7b69      	ldrb	r1, [r5, #13]
    b89e:	0209      	lsls	r1, r1, #8
    b8a0:	4319      	orrs	r1, r3
    b8a2:	7bab      	ldrb	r3, [r5, #14]
    b8a4:	041b      	lsls	r3, r3, #16
    b8a6:	4319      	orrs	r1, r3
    b8a8:	7beb      	ldrb	r3, [r5, #15]
    b8aa:	061b      	lsls	r3, r3, #24
    b8ac:	430b      	orrs	r3, r1
    b8ae:	191b      	adds	r3, r3, r4
    b8b0:	7a18      	ldrb	r0, [r3, #8]
    b8b2:	7a59      	ldrb	r1, [r3, #9]
    b8b4:	0209      	lsls	r1, r1, #8
    b8b6:	4301      	orrs	r1, r0
    b8b8:	7a98      	ldrb	r0, [r3, #10]
    b8ba:	0400      	lsls	r0, r0, #16
    b8bc:	4308      	orrs	r0, r1
    b8be:	7ad9      	ldrb	r1, [r3, #11]
    b8c0:	0609      	lsls	r1, r1, #24
    b8c2:	4301      	orrs	r1, r0
    b8c4:	d0dd      	beq.n	b882 <setDutyCycleTimer+0x1be>
			if(RegParams.pSubBandParams[i].subBandTimeout > delta)
    b8c6:	4589      	cmp	r9, r1
    b8c8:	d2d5      	bcs.n	b876 <setDutyCycleTimer+0x1b2>
				          RegParams.pSubBandParams[i].subBandTimeout - delta;
    b8ca:	4648      	mov	r0, r9
    b8cc:	1a09      	subs	r1, r1, r0
				RegParams.pSubBandParams[i].subBandTimeout = 
    b8ce:	7219      	strb	r1, [r3, #8]
    b8d0:	0a08      	lsrs	r0, r1, #8
    b8d2:	7258      	strb	r0, [r3, #9]
    b8d4:	0c08      	lsrs	r0, r1, #16
    b8d6:	7298      	strb	r0, [r3, #10]
    b8d8:	0e09      	lsrs	r1, r1, #24
    b8da:	72d9      	strb	r1, [r3, #11]
			if(RegParams.pSubBandParams[i].subBandTimeout <= minimSubBandTimer && RegParams.pSubBandParams[i].subBandTimeout != 0)
    b8dc:	7b3b      	ldrb	r3, [r7, #12]
    b8de:	7b79      	ldrb	r1, [r7, #13]
    b8e0:	0209      	lsls	r1, r1, #8
    b8e2:	4319      	orrs	r1, r3
    b8e4:	7bbb      	ldrb	r3, [r7, #14]
    b8e6:	041b      	lsls	r3, r3, #16
    b8e8:	4319      	orrs	r1, r3
    b8ea:	7bfb      	ldrb	r3, [r7, #15]
    b8ec:	061b      	lsls	r3, r3, #24
    b8ee:	430b      	orrs	r3, r1
    b8f0:	191c      	adds	r4, r3, r4
    b8f2:	7a23      	ldrb	r3, [r4, #8]
    b8f4:	7a61      	ldrb	r1, [r4, #9]
    b8f6:	0209      	lsls	r1, r1, #8
    b8f8:	4319      	orrs	r1, r3
    b8fa:	7aa3      	ldrb	r3, [r4, #10]
    b8fc:	041b      	lsls	r3, r3, #16
    b8fe:	4319      	orrs	r1, r3
    b900:	7ae3      	ldrb	r3, [r4, #11]
    b902:	061b      	lsls	r3, r3, #24
    b904:	430b      	orrs	r3, r1
    b906:	9903      	ldr	r1, [sp, #12]
    b908:	428b      	cmp	r3, r1
    b90a:	d8ba      	bhi.n	b882 <setDutyCycleTimer+0x1be>
    b90c:	2b00      	cmp	r3, #0
    b90e:	d0b8      	beq.n	b882 <setDutyCycleTimer+0x1be>
				minimSubBandTimer = RegParams.pSubBandParams[i].subBandTimeout;
    b910:	9303      	str	r3, [sp, #12]
    b912:	e7b6      	b.n	b882 <setDutyCycleTimer+0x1be>
	if(RegParams.cmnParams.paramsType2.aggregatedDutyCycleTimeout != 0)
    b914:	493a      	ldr	r1, [pc, #232]	; (ba00 <setDutyCycleTimer+0x33c>)
    b916:	23ba      	movs	r3, #186	; 0xba
    b918:	33ff      	adds	r3, #255	; 0xff
    b91a:	5ccb      	ldrb	r3, [r1, r3]
    b91c:	22dd      	movs	r2, #221	; 0xdd
    b91e:	0052      	lsls	r2, r2, #1
    b920:	5c8a      	ldrb	r2, [r1, r2]
    b922:	0212      	lsls	r2, r2, #8
    b924:	431a      	orrs	r2, r3
    b926:	23bc      	movs	r3, #188	; 0xbc
    b928:	33ff      	adds	r3, #255	; 0xff
    b92a:	5ccb      	ldrb	r3, [r1, r3]
    b92c:	041b      	lsls	r3, r3, #16
    b92e:	431a      	orrs	r2, r3
    b930:	23de      	movs	r3, #222	; 0xde
    b932:	005b      	lsls	r3, r3, #1
    b934:	5ccb      	ldrb	r3, [r1, r3]
    b936:	061b      	lsls	r3, r3, #24
    b938:	4313      	orrs	r3, r2
    b93a:	d00f      	beq.n	b95c <setDutyCycleTimer+0x298>
		if(RegParams.cmnParams.paramsType2.aggregatedDutyCycleTimeout > delta)
    b93c:	4599      	cmp	r9, r3
    b93e:	d251      	bcs.n	b9e4 <setDutyCycleTimer+0x320>
			RegParams.cmnParams.paramsType2.aggregatedDutyCycleTimeout = RegParams.cmnParams.paramsType2.aggregatedDutyCycleTimeout - delta;
    b940:	000a      	movs	r2, r1
    b942:	4649      	mov	r1, r9
    b944:	1a5b      	subs	r3, r3, r1
    b946:	21ba      	movs	r1, #186	; 0xba
    b948:	31ff      	adds	r1, #255	; 0xff
    b94a:	5453      	strb	r3, [r2, r1]
    b94c:	0a19      	lsrs	r1, r3, #8
    b94e:	32ba      	adds	r2, #186	; 0xba
    b950:	32ff      	adds	r2, #255	; 0xff
    b952:	7051      	strb	r1, [r2, #1]
    b954:	0c19      	lsrs	r1, r3, #16
    b956:	7091      	strb	r1, [r2, #2]
    b958:	0e1b      	lsrs	r3, r3, #24
    b95a:	70d3      	strb	r3, [r2, #3]
		if(RegParams.cmnParams.paramsType2.aggregatedDutyCycleTimeout >= minimSubBandTimer)
    b95c:	4a28      	ldr	r2, [pc, #160]	; (ba00 <setDutyCycleTimer+0x33c>)
    b95e:	23ba      	movs	r3, #186	; 0xba
    b960:	33ff      	adds	r3, #255	; 0xff
    b962:	5cd1      	ldrb	r1, [r2, r3]
    b964:	3301      	adds	r3, #1
    b966:	5cd3      	ldrb	r3, [r2, r3]
    b968:	021b      	lsls	r3, r3, #8
    b96a:	430b      	orrs	r3, r1
    b96c:	21bc      	movs	r1, #188	; 0xbc
    b96e:	31ff      	adds	r1, #255	; 0xff
    b970:	5c51      	ldrb	r1, [r2, r1]
    b972:	0409      	lsls	r1, r1, #16
    b974:	430b      	orrs	r3, r1
    b976:	21de      	movs	r1, #222	; 0xde
    b978:	0049      	lsls	r1, r1, #1
    b97a:	5c51      	ldrb	r1, [r2, r1]
    b97c:	0609      	lsls	r1, r1, #24
    b97e:	4319      	orrs	r1, r3
    b980:	9a03      	ldr	r2, [sp, #12]
    b982:	4291      	cmp	r1, r2
    b984:	d200      	bcs.n	b988 <setDutyCycleTimer+0x2c4>
    b986:	0011      	movs	r1, r2
		RegParams.pDutyCycleTimer->lastTimerValue = nextTimer;
    b988:	4b1d      	ldr	r3, [pc, #116]	; (ba00 <setDutyCycleTimer+0x33c>)
    b98a:	7c1a      	ldrb	r2, [r3, #16]
    b98c:	7c58      	ldrb	r0, [r3, #17]
    b98e:	0200      	lsls	r0, r0, #8
    b990:	4310      	orrs	r0, r2
    b992:	7c9a      	ldrb	r2, [r3, #18]
    b994:	0412      	lsls	r2, r2, #16
    b996:	4310      	orrs	r0, r2
    b998:	7cda      	ldrb	r2, [r3, #19]
    b99a:	0612      	lsls	r2, r2, #24
    b99c:	4302      	orrs	r2, r0
    b99e:	7011      	strb	r1, [r2, #0]
    b9a0:	0a08      	lsrs	r0, r1, #8
    b9a2:	7050      	strb	r0, [r2, #1]
    b9a4:	0c08      	lsrs	r0, r1, #16
    b9a6:	7090      	strb	r0, [r2, #2]
    b9a8:	0e08      	lsrs	r0, r1, #24
    b9aa:	70d0      	strb	r0, [r2, #3]
		SwTimerStart (RegParams.pDutyCycleTimer->timerId, MS_TO_US(nextTimer), SW_TIMEOUT_RELATIVE, (void *)DutyCycleCallback, NULL);
    b9ac:	22fa      	movs	r2, #250	; 0xfa
    b9ae:	0092      	lsls	r2, r2, #2
    b9b0:	4351      	muls	r1, r2
    b9b2:	7c18      	ldrb	r0, [r3, #16]
    b9b4:	7c5a      	ldrb	r2, [r3, #17]
    b9b6:	0212      	lsls	r2, r2, #8
    b9b8:	4310      	orrs	r0, r2
    b9ba:	7c9a      	ldrb	r2, [r3, #18]
    b9bc:	0412      	lsls	r2, r2, #16
    b9be:	4302      	orrs	r2, r0
    b9c0:	7cdb      	ldrb	r3, [r3, #19]
    b9c2:	061b      	lsls	r3, r3, #24
    b9c4:	4313      	orrs	r3, r2
    b9c6:	7918      	ldrb	r0, [r3, #4]
    b9c8:	2300      	movs	r3, #0
    b9ca:	9300      	str	r3, [sp, #0]
    b9cc:	4b11      	ldr	r3, [pc, #68]	; (ba14 <setDutyCycleTimer+0x350>)
    b9ce:	2200      	movs	r2, #0
    b9d0:	4c11      	ldr	r4, [pc, #68]	; (ba18 <setDutyCycleTimer+0x354>)
    b9d2:	47a0      	blx	r4
}
    b9d4:	2008      	movs	r0, #8
    b9d6:	b007      	add	sp, #28
    b9d8:	bc3c      	pop	{r2, r3, r4, r5}
    b9da:	4690      	mov	r8, r2
    b9dc:	4699      	mov	r9, r3
    b9de:	46a2      	mov	sl, r4
    b9e0:	46ab      	mov	fp, r5
    b9e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
			RegParams.cmnParams.paramsType2.aggregatedDutyCycleTimeout = 0;
    b9e4:	4b06      	ldr	r3, [pc, #24]	; (ba00 <setDutyCycleTimer+0x33c>)
    b9e6:	2100      	movs	r1, #0
    b9e8:	22ba      	movs	r2, #186	; 0xba
    b9ea:	32ff      	adds	r2, #255	; 0xff
    b9ec:	5499      	strb	r1, [r3, r2]
    b9ee:	189b      	adds	r3, r3, r2
    b9f0:	2200      	movs	r2, #0
    b9f2:	705a      	strb	r2, [r3, #1]
    b9f4:	709a      	strb	r2, [r3, #2]
    b9f6:	70da      	strb	r2, [r3, #3]
    b9f8:	e7b0      	b.n	b95c <setDutyCycleTimer+0x298>
    b9fa:	46c0      	nop			; (mov r8, r8)
    b9fc:	00019d11 	.word	0x00019d11
    ba00:	200024d0 	.word	0x200024d0
    ba04:	0000eea9 	.word	0x0000eea9
    ba08:	0000f029 	.word	0x0000f029
    ba0c:	0000eebd 	.word	0x0000eebd
    ba10:	000165ad 	.word	0x000165ad
    ba14:	0000ba1d 	.word	0x0000ba1d
    ba18:	0000ed11 	.word	0x0000ed11

0000ba1c <DutyCycleCallback>:
{
    ba1c:	b5f0      	push	{r4, r5, r6, r7, lr}
    ba1e:	46de      	mov	lr, fp
    ba20:	4657      	mov	r7, sl
    ba22:	464e      	mov	r6, r9
    ba24:	4645      	mov	r5, r8
    ba26:	b5e0      	push	{r5, r6, r7, lr}
    ba28:	b087      	sub	sp, #28
	uint32_t DutyCycleTimeout = RegParams.cmnParams.paramsType2.aggregatedDutyCycleTimeout;
    ba2a:	4980      	ldr	r1, [pc, #512]	; (bc2c <DutyCycleCallback+0x210>)
    ba2c:	23ba      	movs	r3, #186	; 0xba
    ba2e:	33ff      	adds	r3, #255	; 0xff
    ba30:	5cca      	ldrb	r2, [r1, r3]
    ba32:	3301      	adds	r3, #1
    ba34:	5ccb      	ldrb	r3, [r1, r3]
    ba36:	021b      	lsls	r3, r3, #8
    ba38:	431a      	orrs	r2, r3
    ba3a:	23bc      	movs	r3, #188	; 0xbc
    ba3c:	33ff      	adds	r3, #255	; 0xff
    ba3e:	5ccb      	ldrb	r3, [r1, r3]
    ba40:	041b      	lsls	r3, r3, #16
    ba42:	4313      	orrs	r3, r2
    ba44:	22de      	movs	r2, #222	; 0xde
    ba46:	0052      	lsls	r2, r2, #1
    ba48:	5c8a      	ldrb	r2, [r1, r2]
    ba4a:	0612      	lsls	r2, r2, #24
    ba4c:	431a      	orrs	r2, r3
    ba4e:	9205      	str	r2, [sp, #20]
    for (i=0; i < RegParams.maxSubBands; i++)
    ba50:	2329      	movs	r3, #41	; 0x29
    ba52:	5ccb      	ldrb	r3, [r1, r3]
    ba54:	2b00      	cmp	r3, #0
    ba56:	d100      	bne.n	ba5a <DutyCycleCallback+0x3e>
    ba58:	e0df      	b.n	bc1a <DutyCycleCallback+0x1fe>
    ba5a:	2600      	movs	r6, #0
    ba5c:	2300      	movs	r3, #0
    ba5e:	9304      	str	r3, [sp, #16]
    ba60:	3b01      	subs	r3, #1
    ba62:	9303      	str	r3, [sp, #12]
        if (( RegParams.pSubBandParams[i].subBandTimeout != 0 ))
    ba64:	000f      	movs	r7, r1
            if ( RegParams.pSubBandParams[i].subBandTimeout > RegParams.pDutyCycleTimer->lastTimerValue )
    ba66:	4688      	mov	r8, r1
            if ( (RegParams.pSubBandParams[i].subBandTimeout <= minimSubBandTimer) && (RegParams.pSubBandParams[i].subBandTimeout != 0) )
    ba68:	468c      	mov	ip, r1
                RegParams.pSubBandParams[i].subBandTimeout = 0;
    ba6a:	2300      	movs	r3, #0
    ba6c:	469b      	mov	fp, r3
    for (i=0; i < RegParams.maxSubBands; i++)
    ba6e:	468a      	mov	sl, r1
    ba70:	2329      	movs	r3, #41	; 0x29
    ba72:	4699      	mov	r9, r3
    ba74:	e00c      	b.n	ba90 <DutyCycleCallback+0x74>
                RegParams.pSubBandParams[i].subBandTimeout = 0;
    ba76:	465a      	mov	r2, fp
    ba78:	721a      	strb	r2, [r3, #8]
    ba7a:	725a      	strb	r2, [r3, #9]
    ba7c:	729a      	strb	r2, [r3, #10]
    ba7e:	72da      	strb	r2, [r3, #11]
    ba80:	e03f      	b.n	bb02 <DutyCycleCallback+0xe6>
    for (i=0; i < RegParams.maxSubBands; i++)
    ba82:	3601      	adds	r6, #1
    ba84:	b2f6      	uxtb	r6, r6
    ba86:	4653      	mov	r3, sl
    ba88:	464a      	mov	r2, r9
    ba8a:	5c9b      	ldrb	r3, [r3, r2]
    ba8c:	42b3      	cmp	r3, r6
    ba8e:	d95a      	bls.n	bb46 <DutyCycleCallback+0x12a>
        if (( RegParams.pSubBandParams[i].subBandTimeout != 0 ))
    ba90:	0071      	lsls	r1, r6, #1
    ba92:	1989      	adds	r1, r1, r6
    ba94:	0089      	lsls	r1, r1, #2
    ba96:	7b3b      	ldrb	r3, [r7, #12]
    ba98:	7b7a      	ldrb	r2, [r7, #13]
    ba9a:	0212      	lsls	r2, r2, #8
    ba9c:	431a      	orrs	r2, r3
    ba9e:	7bbb      	ldrb	r3, [r7, #14]
    baa0:	041b      	lsls	r3, r3, #16
    baa2:	431a      	orrs	r2, r3
    baa4:	7bfb      	ldrb	r3, [r7, #15]
    baa6:	061b      	lsls	r3, r3, #24
    baa8:	4313      	orrs	r3, r2
    baaa:	185b      	adds	r3, r3, r1
    baac:	7a1a      	ldrb	r2, [r3, #8]
    baae:	7a58      	ldrb	r0, [r3, #9]
    bab0:	0200      	lsls	r0, r0, #8
    bab2:	4310      	orrs	r0, r2
    bab4:	7a9a      	ldrb	r2, [r3, #10]
    bab6:	0412      	lsls	r2, r2, #16
    bab8:	4310      	orrs	r0, r2
    baba:	7ada      	ldrb	r2, [r3, #11]
    babc:	0612      	lsls	r2, r2, #24
    babe:	4302      	orrs	r2, r0
    bac0:	d0df      	beq.n	ba82 <DutyCycleCallback+0x66>
            if ( RegParams.pSubBandParams[i].subBandTimeout > RegParams.pDutyCycleTimer->lastTimerValue )
    bac2:	4640      	mov	r0, r8
    bac4:	7c05      	ldrb	r5, [r0, #16]
    bac6:	7c44      	ldrb	r4, [r0, #17]
    bac8:	0224      	lsls	r4, r4, #8
    baca:	4325      	orrs	r5, r4
    bacc:	7c80      	ldrb	r0, [r0, #18]
    bace:	0400      	lsls	r0, r0, #16
    bad0:	4305      	orrs	r5, r0
    bad2:	4640      	mov	r0, r8
    bad4:	7cc0      	ldrb	r0, [r0, #19]
    bad6:	0600      	lsls	r0, r0, #24
    bad8:	4328      	orrs	r0, r5
    bada:	7804      	ldrb	r4, [r0, #0]
    badc:	7845      	ldrb	r5, [r0, #1]
    bade:	022d      	lsls	r5, r5, #8
    bae0:	4325      	orrs	r5, r4
    bae2:	7884      	ldrb	r4, [r0, #2]
    bae4:	0424      	lsls	r4, r4, #16
    bae6:	4325      	orrs	r5, r4
    bae8:	78c4      	ldrb	r4, [r0, #3]
    baea:	0624      	lsls	r4, r4, #24
    baec:	432c      	orrs	r4, r5
    baee:	42a2      	cmp	r2, r4
    baf0:	d9c1      	bls.n	ba76 <DutyCycleCallback+0x5a>
                RegParams.pSubBandParams[i].subBandTimeout = RegParams.pSubBandParams[i].subBandTimeout - RegParams.pDutyCycleTimer->lastTimerValue;
    baf2:	1b12      	subs	r2, r2, r4
    baf4:	721a      	strb	r2, [r3, #8]
    baf6:	0a10      	lsrs	r0, r2, #8
    baf8:	7258      	strb	r0, [r3, #9]
    bafa:	0c10      	lsrs	r0, r2, #16
    bafc:	7298      	strb	r0, [r3, #10]
    bafe:	0e12      	lsrs	r2, r2, #24
    bb00:	72da      	strb	r2, [r3, #11]
            if ( (RegParams.pSubBandParams[i].subBandTimeout <= minimSubBandTimer) && (RegParams.pSubBandParams[i].subBandTimeout != 0) )
    bb02:	4663      	mov	r3, ip
    bb04:	7b1b      	ldrb	r3, [r3, #12]
    bb06:	4662      	mov	r2, ip
    bb08:	7b52      	ldrb	r2, [r2, #13]
    bb0a:	0212      	lsls	r2, r2, #8
    bb0c:	431a      	orrs	r2, r3
    bb0e:	4663      	mov	r3, ip
    bb10:	7b9b      	ldrb	r3, [r3, #14]
    bb12:	041b      	lsls	r3, r3, #16
    bb14:	431a      	orrs	r2, r3
    bb16:	4663      	mov	r3, ip
    bb18:	7bdb      	ldrb	r3, [r3, #15]
    bb1a:	061b      	lsls	r3, r3, #24
    bb1c:	4313      	orrs	r3, r2
    bb1e:	1859      	adds	r1, r3, r1
    bb20:	7a0b      	ldrb	r3, [r1, #8]
    bb22:	7a4a      	ldrb	r2, [r1, #9]
    bb24:	0212      	lsls	r2, r2, #8
    bb26:	431a      	orrs	r2, r3
    bb28:	7a8b      	ldrb	r3, [r1, #10]
    bb2a:	041b      	lsls	r3, r3, #16
    bb2c:	431a      	orrs	r2, r3
    bb2e:	7acb      	ldrb	r3, [r1, #11]
    bb30:	061b      	lsls	r3, r3, #24
    bb32:	4313      	orrs	r3, r2
    bb34:	9a03      	ldr	r2, [sp, #12]
    bb36:	4293      	cmp	r3, r2
    bb38:	d8a3      	bhi.n	ba82 <DutyCycleCallback+0x66>
    bb3a:	2b00      	cmp	r3, #0
    bb3c:	d0a1      	beq.n	ba82 <DutyCycleCallback+0x66>
                minimSubBandTimer  = RegParams.pSubBandParams[i].subBandTimeout;
    bb3e:	9303      	str	r3, [sp, #12]
                found = 1;
    bb40:	2301      	movs	r3, #1
    bb42:	9304      	str	r3, [sp, #16]
    bb44:	e79d      	b.n	ba82 <DutyCycleCallback+0x66>
    if (( DutyCycleTimeout != 0 ))
    bb46:	9b05      	ldr	r3, [sp, #20]
    bb48:	2b00      	cmp	r3, #0
    bb4a:	d031      	beq.n	bbb0 <DutyCycleCallback+0x194>
	    if (DutyCycleTimeout > RegParams.pDutyCycleTimer->lastTimerValue)
    bb4c:	4937      	ldr	r1, [pc, #220]	; (bc2c <DutyCycleCallback+0x210>)
    bb4e:	7c0b      	ldrb	r3, [r1, #16]
    bb50:	7c4a      	ldrb	r2, [r1, #17]
    bb52:	0212      	lsls	r2, r2, #8
    bb54:	431a      	orrs	r2, r3
    bb56:	7c8b      	ldrb	r3, [r1, #18]
    bb58:	041b      	lsls	r3, r3, #16
    bb5a:	431a      	orrs	r2, r3
    bb5c:	7ccb      	ldrb	r3, [r1, #19]
    bb5e:	061b      	lsls	r3, r3, #24
    bb60:	4313      	orrs	r3, r2
    bb62:	7819      	ldrb	r1, [r3, #0]
    bb64:	785a      	ldrb	r2, [r3, #1]
    bb66:	0212      	lsls	r2, r2, #8
    bb68:	430a      	orrs	r2, r1
    bb6a:	7899      	ldrb	r1, [r3, #2]
    bb6c:	0409      	lsls	r1, r1, #16
    bb6e:	430a      	orrs	r2, r1
    bb70:	78d9      	ldrb	r1, [r3, #3]
    bb72:	0609      	lsls	r1, r1, #24
    bb74:	4311      	orrs	r1, r2
    bb76:	9a05      	ldr	r2, [sp, #20]
    bb78:	428a      	cmp	r2, r1
    bb7a:	d90f      	bls.n	bb9c <DutyCycleCallback+0x180>
		    RegParams.cmnParams.paramsType2.aggregatedDutyCycleTimeout = DutyCycleTimeout - RegParams.pDutyCycleTimer->lastTimerValue;
    bb7c:	1a51      	subs	r1, r2, r1
    bb7e:	4b2b      	ldr	r3, [pc, #172]	; (bc2c <DutyCycleCallback+0x210>)
    bb80:	22ba      	movs	r2, #186	; 0xba
    bb82:	32ff      	adds	r2, #255	; 0xff
    bb84:	5499      	strb	r1, [r3, r2]
    bb86:	0a0a      	lsrs	r2, r1, #8
    bb88:	33ba      	adds	r3, #186	; 0xba
    bb8a:	33ff      	adds	r3, #255	; 0xff
    bb8c:	705a      	strb	r2, [r3, #1]
    bb8e:	0c0a      	lsrs	r2, r1, #16
    bb90:	709a      	strb	r2, [r3, #2]
    bb92:	0e0a      	lsrs	r2, r1, #24
    bb94:	70da      	strb	r2, [r3, #3]
		if(DutyCycleTimeout)
    bb96:	2900      	cmp	r1, #0
    bb98:	d10e      	bne.n	bbb8 <DutyCycleCallback+0x19c>
    bb9a:	e009      	b.n	bbb0 <DutyCycleCallback+0x194>
		    RegParams.cmnParams.paramsType2.aggregatedDutyCycleTimeout = 0;
    bb9c:	4b23      	ldr	r3, [pc, #140]	; (bc2c <DutyCycleCallback+0x210>)
    bb9e:	2100      	movs	r1, #0
    bba0:	22ba      	movs	r2, #186	; 0xba
    bba2:	32ff      	adds	r2, #255	; 0xff
    bba4:	5499      	strb	r1, [r3, r2]
    bba6:	189b      	adds	r3, r3, r2
    bba8:	2200      	movs	r2, #0
    bbaa:	705a      	strb	r2, [r3, #1]
    bbac:	709a      	strb	r2, [r3, #2]
    bbae:	70da      	strb	r2, [r3, #3]
    if ( found == 1 )
    bbb0:	9b04      	ldr	r3, [sp, #16]
    bbb2:	2b00      	cmp	r3, #0
    bbb4:	d02a      	beq.n	bc0c <DutyCycleCallback+0x1f0>
    bbb6:	2100      	movs	r1, #0
    bbb8:	9a03      	ldr	r2, [sp, #12]
    bbba:	4291      	cmp	r1, r2
    bbbc:	d200      	bcs.n	bbc0 <DutyCycleCallback+0x1a4>
    bbbe:	0011      	movs	r1, r2
        RegParams.pDutyCycleTimer->lastTimerValue = nextTimer;
    bbc0:	4b1a      	ldr	r3, [pc, #104]	; (bc2c <DutyCycleCallback+0x210>)
    bbc2:	7c1a      	ldrb	r2, [r3, #16]
    bbc4:	7c58      	ldrb	r0, [r3, #17]
    bbc6:	0200      	lsls	r0, r0, #8
    bbc8:	4310      	orrs	r0, r2
    bbca:	7c9a      	ldrb	r2, [r3, #18]
    bbcc:	0412      	lsls	r2, r2, #16
    bbce:	4310      	orrs	r0, r2
    bbd0:	7cda      	ldrb	r2, [r3, #19]
    bbd2:	0612      	lsls	r2, r2, #24
    bbd4:	4302      	orrs	r2, r0
    bbd6:	7011      	strb	r1, [r2, #0]
    bbd8:	0a08      	lsrs	r0, r1, #8
    bbda:	7050      	strb	r0, [r2, #1]
    bbdc:	0c08      	lsrs	r0, r1, #16
    bbde:	7090      	strb	r0, [r2, #2]
    bbe0:	0e08      	lsrs	r0, r1, #24
    bbe2:	70d0      	strb	r0, [r2, #3]
		SwTimerStart (RegParams.pDutyCycleTimer->timerId, MS_TO_US(nextTimer), SW_TIMEOUT_RELATIVE, (void *)DutyCycleCallback, NULL);
    bbe4:	22fa      	movs	r2, #250	; 0xfa
    bbe6:	0092      	lsls	r2, r2, #2
    bbe8:	4351      	muls	r1, r2
    bbea:	7c18      	ldrb	r0, [r3, #16]
    bbec:	7c5a      	ldrb	r2, [r3, #17]
    bbee:	0212      	lsls	r2, r2, #8
    bbf0:	4310      	orrs	r0, r2
    bbf2:	7c9a      	ldrb	r2, [r3, #18]
    bbf4:	0412      	lsls	r2, r2, #16
    bbf6:	4302      	orrs	r2, r0
    bbf8:	7cdb      	ldrb	r3, [r3, #19]
    bbfa:	061b      	lsls	r3, r3, #24
    bbfc:	4313      	orrs	r3, r2
    bbfe:	7918      	ldrb	r0, [r3, #4]
    bc00:	2300      	movs	r3, #0
    bc02:	9300      	str	r3, [sp, #0]
    bc04:	4b0a      	ldr	r3, [pc, #40]	; (bc30 <DutyCycleCallback+0x214>)
    bc06:	2200      	movs	r2, #0
    bc08:	4c0a      	ldr	r4, [pc, #40]	; (bc34 <DutyCycleCallback+0x218>)
    bc0a:	47a0      	blx	r4
}
    bc0c:	b007      	add	sp, #28
    bc0e:	bc3c      	pop	{r2, r3, r4, r5}
    bc10:	4690      	mov	r8, r2
    bc12:	4699      	mov	r9, r3
    bc14:	46a2      	mov	sl, r4
    bc16:	46ab      	mov	fp, r5
    bc18:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (( DutyCycleTimeout != 0 ))
    bc1a:	9b05      	ldr	r3, [sp, #20]
    bc1c:	2b00      	cmp	r3, #0
    bc1e:	d0f5      	beq.n	bc0c <DutyCycleCallback+0x1f0>
    bool found = 0;
    bc20:	2300      	movs	r3, #0
    bc22:	9304      	str	r3, [sp, #16]
    uint32_t minimSubBandTimer = UINT32_MAX;
    bc24:	3b01      	subs	r3, #1
    bc26:	9303      	str	r3, [sp, #12]
    bc28:	e790      	b.n	bb4c <DutyCycleCallback+0x130>
    bc2a:	46c0      	nop			; (mov r8, r8)
    bc2c:	200024d0 	.word	0x200024d0
    bc30:	0000ba1d 	.word	0x0000ba1d
    bc34:	0000ed11 	.word	0x0000ed11

0000bc38 <setLBTTimer>:
{
    bc38:	b5f0      	push	{r4, r5, r6, r7, lr}
    bc3a:	46de      	mov	lr, fp
    bc3c:	4657      	mov	r7, sl
    bc3e:	464e      	mov	r6, r9
    bc40:	4645      	mov	r5, r8
    bc42:	b5e0      	push	{r5, r6, r7, lr}
    bc44:	b085      	sub	sp, #20
    i = RegParams.lastUsedChannelIndex;
    bc46:	4a70      	ldr	r2, [pc, #448]	; (be08 <setLBTTimer+0x1d0>)
    bc48:	232f      	movs	r3, #47	; 0x2f
	RegParams.cmnParams.paramsType2.channelTimer[i] = LBT_TRANSMIT_CHANNEL_PAUSE_DURATION;
    bc4a:	5cd4      	ldrb	r4, [r2, r3]
    bc4c:	0023      	movs	r3, r4
    bc4e:	3358      	adds	r3, #88	; 0x58
    bc50:	009b      	lsls	r3, r3, #2
    bc52:	18d3      	adds	r3, r2, r3
    bc54:	2132      	movs	r1, #50	; 0x32
    bc56:	7219      	strb	r1, [r3, #8]
    bc58:	2100      	movs	r1, #0
    bc5a:	7259      	strb	r1, [r3, #9]
    bc5c:	7299      	strb	r1, [r3, #10]
    bc5e:	72d9      	strb	r1, [r3, #11]
	if(SwTimerIsRunning(pLBTTimer->timerId))
    bc60:	23d6      	movs	r3, #214	; 0xd6
    bc62:	005b      	lsls	r3, r3, #1
    bc64:	5cd0      	ldrb	r0, [r2, r3]
    bc66:	4b69      	ldr	r3, [pc, #420]	; (be0c <setLBTTimer+0x1d4>)
    bc68:	4798      	blx	r3
    bc6a:	2800      	cmp	r0, #0
    bc6c:	d12f      	bne.n	bcce <setLBTTimer+0x96>
		minim = RegParams.cmnParams.paramsType2.channelTimer[i];
    bc6e:	4866      	ldr	r0, [pc, #408]	; (be08 <setLBTTimer+0x1d0>)
    bc70:	0023      	movs	r3, r4
    bc72:	3358      	adds	r3, #88	; 0x58
    bc74:	009b      	lsls	r3, r3, #2
    bc76:	18c3      	adds	r3, r0, r3
    bc78:	7a19      	ldrb	r1, [r3, #8]
    bc7a:	7a5a      	ldrb	r2, [r3, #9]
    bc7c:	0212      	lsls	r2, r2, #8
    bc7e:	4311      	orrs	r1, r2
    bc80:	7a9a      	ldrb	r2, [r3, #10]
    bc82:	0412      	lsls	r2, r2, #16
    bc84:	430a      	orrs	r2, r1
    bc86:	7ad9      	ldrb	r1, [r3, #11]
    bc88:	0609      	lsls	r1, r1, #24
    bc8a:	4311      	orrs	r1, r2
    bc8c:	4689      	mov	r9, r1
	for(i = 0; i < RegParams.maxChannels; i++)
    bc8e:	232a      	movs	r3, #42	; 0x2a
    bc90:	56c3      	ldrsb	r3, [r0, r3]
    bc92:	4698      	mov	r8, r3
    bc94:	2b00      	cmp	r3, #0
    bc96:	dc00      	bgt.n	bc9a <setLBTTimer+0x62>
    bc98:	e08b      	b.n	bdb2 <setLBTTimer+0x17a>
    uint32_t delta = 0, minim = UINT32_MAX, ticks;
    bc9a:	2300      	movs	r3, #0
    bc9c:	469a      	mov	sl, r3
		found = 1;
    bc9e:	3301      	adds	r3, #1
    bca0:	9303      	str	r3, [sp, #12]
		if(i != RegParams.lastUsedChannelIndex)
    bca2:	4a59      	ldr	r2, [pc, #356]	; (be08 <setLBTTimer+0x1d0>)
    bca4:	232f      	movs	r3, #47	; 0x2f
    bca6:	5cd0      	ldrb	r0, [r2, r3]
			if((RegParams.pChParams[i].status == ENABLED) && (RegParams.cmnParams.paramsType2.channelTimer[i] != 0))
    bca8:	7911      	ldrb	r1, [r2, #4]
    bcaa:	7953      	ldrb	r3, [r2, #5]
    bcac:	021b      	lsls	r3, r3, #8
    bcae:	430b      	orrs	r3, r1
    bcb0:	7991      	ldrb	r1, [r2, #6]
    bcb2:	0409      	lsls	r1, r1, #16
    bcb4:	430b      	orrs	r3, r1
    bcb6:	79d1      	ldrb	r1, [r2, #7]
    bcb8:	0609      	lsls	r1, r1, #24
    bcba:	4319      	orrs	r1, r3
    bcbc:	2600      	movs	r6, #0
    bcbe:	2200      	movs	r2, #0
					RegParams.cmnParams.paramsType2.channelTimer[i] = 0;
    bcc0:	2300      	movs	r3, #0
    bcc2:	469c      	mov	ip, r3
					RegParams.cmnParams.paramsType2.channelTimer[i] = RegParams.cmnParams.paramsType2.channelTimer[i] - delta;
    bcc4:	4653      	mov	r3, sl
    bcc6:	9302      	str	r3, [sp, #8]
    bcc8:	468b      	mov	fp, r1
    bcca:	4645      	mov	r5, r8
    bccc:	e03b      	b.n	bd46 <setLBTTimer+0x10e>
		SwTimerStop(pLBTTimer->timerId);
    bcce:	4c4e      	ldr	r4, [pc, #312]	; (be08 <setLBTTimer+0x1d0>)
    bcd0:	25d6      	movs	r5, #214	; 0xd6
    bcd2:	006d      	lsls	r5, r5, #1
    bcd4:	5d60      	ldrb	r0, [r4, r5]
    bcd6:	4b4e      	ldr	r3, [pc, #312]	; (be10 <setLBTTimer+0x1d8>)
    bcd8:	4798      	blx	r3
		ticks = SwTimerReadValue(pLBTTimer->timerId);
    bcda:	5d60      	ldrb	r0, [r4, r5]
    bcdc:	4b4d      	ldr	r3, [pc, #308]	; (be14 <setLBTTimer+0x1dc>)
    bcde:	4798      	blx	r3
	for(i = 0; i < RegParams.maxChannels; i++)
    bce0:	232a      	movs	r3, #42	; 0x2a
    bce2:	56e3      	ldrsb	r3, [r4, r3]
    bce4:	4698      	mov	r8, r3
    bce6:	2b00      	cmp	r3, #0
    bce8:	dd66      	ble.n	bdb8 <setLBTTimer+0x180>
		delta = pLBTTimer->lastTimerValue - US_TO_MS(ticks);
    bcea:	4a47      	ldr	r2, [pc, #284]	; (be08 <setLBTTimer+0x1d0>)
    bcec:	23d4      	movs	r3, #212	; 0xd4
    bcee:	005b      	lsls	r3, r3, #1
    bcf0:	5cd4      	ldrb	r4, [r2, r3]
    bcf2:	23aa      	movs	r3, #170	; 0xaa
    bcf4:	33ff      	adds	r3, #255	; 0xff
    bcf6:	5cd3      	ldrb	r3, [r2, r3]
    bcf8:	021b      	lsls	r3, r3, #8
    bcfa:	4323      	orrs	r3, r4
    bcfc:	21d5      	movs	r1, #213	; 0xd5
    bcfe:	0049      	lsls	r1, r1, #1
    bd00:	5c54      	ldrb	r4, [r2, r1]
    bd02:	0424      	lsls	r4, r4, #16
    bd04:	4323      	orrs	r3, r4
    bd06:	21ac      	movs	r1, #172	; 0xac
    bd08:	31ff      	adds	r1, #255	; 0xff
    bd0a:	5c54      	ldrb	r4, [r2, r1]
    bd0c:	0624      	lsls	r4, r4, #24
    bd0e:	431c      	orrs	r4, r3
    bd10:	21fa      	movs	r1, #250	; 0xfa
    bd12:	0089      	lsls	r1, r1, #2
    bd14:	4b40      	ldr	r3, [pc, #256]	; (be18 <setLBTTimer+0x1e0>)
    bd16:	4798      	blx	r3
    bd18:	1a23      	subs	r3, r4, r0
    bd1a:	469a      	mov	sl, r3
    uint32_t delta = 0, minim = UINT32_MAX, ticks;
    bd1c:	2301      	movs	r3, #1
    bd1e:	425b      	negs	r3, r3
    bd20:	4699      	mov	r9, r3
    bool found = 0;
    bd22:	2300      	movs	r3, #0
    bd24:	9303      	str	r3, [sp, #12]
    bd26:	e7bc      	b.n	bca2 <setLBTTimer+0x6a>
					RegParams.cmnParams.paramsType2.channelTimer[i] = 0;
    bd28:	3658      	adds	r6, #88	; 0x58
    bd2a:	00b6      	lsls	r6, r6, #2
    bd2c:	4b36      	ldr	r3, [pc, #216]	; (be08 <setLBTTimer+0x1d0>)
    bd2e:	4698      	mov	r8, r3
    bd30:	4446      	add	r6, r8
    bd32:	4663      	mov	r3, ip
    bd34:	7233      	strb	r3, [r6, #8]
    bd36:	7273      	strb	r3, [r6, #9]
    bd38:	72b3      	strb	r3, [r6, #10]
    bd3a:	72f3      	strb	r3, [r6, #11]
	for(i = 0; i < RegParams.maxChannels; i++)
    bd3c:	3201      	adds	r2, #1
    bd3e:	b2d2      	uxtb	r2, r2
    bd40:	0016      	movs	r6, r2
    bd42:	42aa      	cmp	r2, r5
    bd44:	da32      	bge.n	bdac <setLBTTimer+0x174>
		if(i != RegParams.lastUsedChannelIndex)
    bd46:	4290      	cmp	r0, r2
    bd48:	d0f8      	beq.n	bd3c <setLBTTimer+0x104>
			if((RegParams.pChParams[i].status == ENABLED) && (RegParams.cmnParams.paramsType2.channelTimer[i] != 0))
    bd4a:	0053      	lsls	r3, r2, #1
    bd4c:	4659      	mov	r1, fp
    bd4e:	5c5c      	ldrb	r4, [r3, r1]
    bd50:	2c00      	cmp	r4, #0
    bd52:	d0f3      	beq.n	bd3c <setLBTTimer+0x104>
    bd54:	0033      	movs	r3, r6
    bd56:	3358      	adds	r3, #88	; 0x58
    bd58:	009b      	lsls	r3, r3, #2
    bd5a:	4f2b      	ldr	r7, [pc, #172]	; (be08 <setLBTTimer+0x1d0>)
    bd5c:	46b8      	mov	r8, r7
    bd5e:	4443      	add	r3, r8
    bd60:	7a1f      	ldrb	r7, [r3, #8]
    bd62:	46ba      	mov	sl, r7
    bd64:	7a5f      	ldrb	r7, [r3, #9]
    bd66:	023f      	lsls	r7, r7, #8
    bd68:	46b8      	mov	r8, r7
    bd6a:	4657      	mov	r7, sl
    bd6c:	4641      	mov	r1, r8
    bd6e:	430f      	orrs	r7, r1
    bd70:	7a99      	ldrb	r1, [r3, #10]
    bd72:	0409      	lsls	r1, r1, #16
    bd74:	430f      	orrs	r7, r1
    bd76:	7adb      	ldrb	r3, [r3, #11]
    bd78:	061b      	lsls	r3, r3, #24
    bd7a:	433b      	orrs	r3, r7
    bd7c:	d0de      	beq.n	bd3c <setLBTTimer+0x104>
				if(RegParams.cmnParams.paramsType2.channelTimer[i] > delta)
    bd7e:	9f02      	ldr	r7, [sp, #8]
    bd80:	42bb      	cmp	r3, r7
    bd82:	d9d1      	bls.n	bd28 <setLBTTimer+0xf0>
					RegParams.cmnParams.paramsType2.channelTimer[i] = RegParams.cmnParams.paramsType2.channelTimer[i] - delta;
    bd84:	1bdb      	subs	r3, r3, r7
    bd86:	3658      	adds	r6, #88	; 0x58
    bd88:	00b6      	lsls	r6, r6, #2
    bd8a:	491f      	ldr	r1, [pc, #124]	; (be08 <setLBTTimer+0x1d0>)
    bd8c:	4688      	mov	r8, r1
    bd8e:	4446      	add	r6, r8
    bd90:	7233      	strb	r3, [r6, #8]
    bd92:	0a19      	lsrs	r1, r3, #8
    bd94:	7271      	strb	r1, [r6, #9]
    bd96:	0c19      	lsrs	r1, r3, #16
    bd98:	72b1      	strb	r1, [r6, #10]
    bd9a:	0e19      	lsrs	r1, r3, #24
    bd9c:	72f1      	strb	r1, [r6, #11]
				if((RegParams.cmnParams.paramsType2.channelTimer[i] <= minim) && (RegParams.cmnParams.paramsType2.channelTimer[i] != 0))
    bd9e:	454b      	cmp	r3, r9
    bda0:	d8cc      	bhi.n	bd3c <setLBTTimer+0x104>
    bda2:	2b00      	cmp	r3, #0
    bda4:	d0ca      	beq.n	bd3c <setLBTTimer+0x104>
    bda6:	4699      	mov	r9, r3
					found = 1;
    bda8:	9403      	str	r4, [sp, #12]
    bdaa:	e7c7      	b.n	bd3c <setLBTTimer+0x104>
	if((found == 1) && minim)
    bdac:	9b03      	ldr	r3, [sp, #12]
    bdae:	2b00      	cmp	r3, #0
    bdb0:	d002      	beq.n	bdb8 <setLBTTimer+0x180>
    bdb2:	464b      	mov	r3, r9
    bdb4:	2b00      	cmp	r3, #0
    bdb6:	d107      	bne.n	bdc8 <setLBTTimer+0x190>
}
    bdb8:	2008      	movs	r0, #8
    bdba:	b005      	add	sp, #20
    bdbc:	bc3c      	pop	{r2, r3, r4, r5}
    bdbe:	4690      	mov	r8, r2
    bdc0:	4699      	mov	r9, r3
    bdc2:	46a2      	mov	sl, r4
    bdc4:	46ab      	mov	fp, r5
    bdc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		pLBTTimer->lastTimerValue = minim;
    bdc8:	4b0f      	ldr	r3, [pc, #60]	; (be08 <setLBTTimer+0x1d0>)
    bdca:	22d4      	movs	r2, #212	; 0xd4
    bdcc:	0052      	lsls	r2, r2, #1
    bdce:	4649      	mov	r1, r9
    bdd0:	5499      	strb	r1, [r3, r2]
    bdd2:	464a      	mov	r2, r9
    bdd4:	0a11      	lsrs	r1, r2, #8
    bdd6:	001a      	movs	r2, r3
    bdd8:	32a9      	adds	r2, #169	; 0xa9
    bdda:	32ff      	adds	r2, #255	; 0xff
    bddc:	7051      	strb	r1, [r2, #1]
    bdde:	4649      	mov	r1, r9
    bde0:	0c09      	lsrs	r1, r1, #16
    bde2:	7091      	strb	r1, [r2, #2]
    bde4:	4649      	mov	r1, r9
    bde6:	0e09      	lsrs	r1, r1, #24
    bde8:	70d1      	strb	r1, [r2, #3]
		SwTimerStart (pLBTTimer->timerId, MS_TO_US(minim), SW_TIMEOUT_RELATIVE, (void *)LBTChannelPauseCallback, NULL);
    bdea:	21fa      	movs	r1, #250	; 0xfa
    bdec:	0089      	lsls	r1, r1, #2
    bdee:	464a      	mov	r2, r9
    bdf0:	4351      	muls	r1, r2
    bdf2:	22d6      	movs	r2, #214	; 0xd6
    bdf4:	0052      	lsls	r2, r2, #1
    bdf6:	5c98      	ldrb	r0, [r3, r2]
    bdf8:	2300      	movs	r3, #0
    bdfa:	9300      	str	r3, [sp, #0]
    bdfc:	4b07      	ldr	r3, [pc, #28]	; (be1c <setLBTTimer+0x1e4>)
    bdfe:	2200      	movs	r2, #0
    be00:	4c07      	ldr	r4, [pc, #28]	; (be20 <setLBTTimer+0x1e8>)
    be02:	47a0      	blx	r4
    be04:	e7d8      	b.n	bdb8 <setLBTTimer+0x180>
    be06:	46c0      	nop			; (mov r8, r8)
    be08:	200024d0 	.word	0x200024d0
    be0c:	0000eea9 	.word	0x0000eea9
    be10:	0000f029 	.word	0x0000f029
    be14:	0000eebd 	.word	0x0000eebd
    be18:	000165ad 	.word	0x000165ad
    be1c:	0000be25 	.word	0x0000be25
    be20:	0000ed11 	.word	0x0000ed11

0000be24 <LBTChannelPauseCallback>:
{
    be24:	b5f0      	push	{r4, r5, r6, r7, lr}
    be26:	46de      	mov	lr, fp
    be28:	4657      	mov	r7, sl
    be2a:	464e      	mov	r6, r9
    be2c:	4645      	mov	r5, r8
    be2e:	b5e0      	push	{r5, r6, r7, lr}
    be30:	b085      	sub	sp, #20
    for (i=0; i < RegParams.maxChannels; i++)
    be32:	232a      	movs	r3, #42	; 0x2a
    be34:	4a49      	ldr	r2, [pc, #292]	; (bf5c <LBTChannelPauseCallback+0x138>)
    be36:	56d6      	ldrsb	r6, [r2, r3]
    be38:	2e00      	cmp	r6, #0
    be3a:	dd68      	ble.n	bf0e <LBTChannelPauseCallback+0xea>
        if ((RegParams.pChParams[i].status == ENABLED) && ( RegParams.cmnParams.paramsType2.channelTimer[i] != 0 ))
    be3c:	0013      	movs	r3, r2
    be3e:	7915      	ldrb	r5, [r2, #4]
    be40:	7952      	ldrb	r2, [r2, #5]
    be42:	0212      	lsls	r2, r2, #8
    be44:	432a      	orrs	r2, r5
    be46:	799d      	ldrb	r5, [r3, #6]
    be48:	042d      	lsls	r5, r5, #16
    be4a:	432a      	orrs	r2, r5
    be4c:	79dd      	ldrb	r5, [r3, #7]
    be4e:	062d      	lsls	r5, r5, #24
    be50:	4315      	orrs	r5, r2
            if ( RegParams.cmnParams.paramsType2.channelTimer[i] > pLBTTimer->lastTimerValue)
    be52:	22d4      	movs	r2, #212	; 0xd4
    be54:	0052      	lsls	r2, r2, #1
    be56:	5c9f      	ldrb	r7, [r3, r2]
    be58:	22aa      	movs	r2, #170	; 0xaa
    be5a:	32ff      	adds	r2, #255	; 0xff
    be5c:	5c9a      	ldrb	r2, [r3, r2]
    be5e:	0212      	lsls	r2, r2, #8
    be60:	433a      	orrs	r2, r7
    be62:	21d5      	movs	r1, #213	; 0xd5
    be64:	0049      	lsls	r1, r1, #1
    be66:	5c5f      	ldrb	r7, [r3, r1]
    be68:	043f      	lsls	r7, r7, #16
    be6a:	433a      	orrs	r2, r7
    be6c:	21ac      	movs	r1, #172	; 0xac
    be6e:	31ff      	adds	r1, #255	; 0xff
    be70:	5c5f      	ldrb	r7, [r3, r1]
    be72:	063f      	lsls	r7, r7, #24
    be74:	4317      	orrs	r7, r2
    be76:	9703      	str	r7, [sp, #12]
    be78:	2000      	movs	r0, #0
    be7a:	2300      	movs	r3, #0
    be7c:	2200      	movs	r2, #0
    be7e:	4691      	mov	r9, r2
    be80:	3a01      	subs	r2, #1
    be82:	4690      	mov	r8, r2
                RegParams.cmnParams.paramsType2.channelTimer[i] = 0;
    be84:	2200      	movs	r2, #0
    be86:	4694      	mov	ip, r2
    be88:	e00e      	b.n	bea8 <LBTChannelPauseCallback+0x84>
    be8a:	3058      	adds	r0, #88	; 0x58
    be8c:	0080      	lsls	r0, r0, #2
    be8e:	4a33      	ldr	r2, [pc, #204]	; (bf5c <LBTChannelPauseCallback+0x138>)
    be90:	4692      	mov	sl, r2
    be92:	4450      	add	r0, sl
    be94:	4662      	mov	r2, ip
    be96:	7202      	strb	r2, [r0, #8]
    be98:	7242      	strb	r2, [r0, #9]
    be9a:	7282      	strb	r2, [r0, #10]
    be9c:	72c2      	strb	r2, [r0, #11]
    for (i=0; i < RegParams.maxChannels; i++)
    be9e:	3301      	adds	r3, #1
    bea0:	b2db      	uxtb	r3, r3
    bea2:	0018      	movs	r0, r3
    bea4:	42b3      	cmp	r3, r6
    bea6:	da2f      	bge.n	bf08 <LBTChannelPauseCallback+0xe4>
        if ((RegParams.pChParams[i].status == ENABLED) && ( RegParams.cmnParams.paramsType2.channelTimer[i] != 0 ))
    bea8:	005a      	lsls	r2, r3, #1
    beaa:	5d54      	ldrb	r4, [r2, r5]
    beac:	2c00      	cmp	r4, #0
    beae:	d0f6      	beq.n	be9e <LBTChannelPauseCallback+0x7a>
    beb0:	0002      	movs	r2, r0
    beb2:	3258      	adds	r2, #88	; 0x58
    beb4:	0092      	lsls	r2, r2, #2
    beb6:	4929      	ldr	r1, [pc, #164]	; (bf5c <LBTChannelPauseCallback+0x138>)
    beb8:	468a      	mov	sl, r1
    beba:	4452      	add	r2, sl
    bebc:	7a17      	ldrb	r7, [r2, #8]
    bebe:	46bb      	mov	fp, r7
    bec0:	7a57      	ldrb	r7, [r2, #9]
    bec2:	023f      	lsls	r7, r7, #8
    bec4:	46ba      	mov	sl, r7
    bec6:	465f      	mov	r7, fp
    bec8:	4651      	mov	r1, sl
    beca:	430f      	orrs	r7, r1
    becc:	7a91      	ldrb	r1, [r2, #10]
    bece:	0409      	lsls	r1, r1, #16
    bed0:	430f      	orrs	r7, r1
    bed2:	7ad2      	ldrb	r2, [r2, #11]
    bed4:	0612      	lsls	r2, r2, #24
    bed6:	433a      	orrs	r2, r7
    bed8:	d0e1      	beq.n	be9e <LBTChannelPauseCallback+0x7a>
            if ( RegParams.cmnParams.paramsType2.channelTimer[i] > pLBTTimer->lastTimerValue)
    beda:	9f03      	ldr	r7, [sp, #12]
    bedc:	42ba      	cmp	r2, r7
    bede:	d9d4      	bls.n	be8a <LBTChannelPauseCallback+0x66>
                RegParams.cmnParams.paramsType2.channelTimer[i] = RegParams.cmnParams.paramsType2.channelTimer[i] - pLBTTimer->lastTimerValue;
    bee0:	1bd2      	subs	r2, r2, r7
    bee2:	3058      	adds	r0, #88	; 0x58
    bee4:	0080      	lsls	r0, r0, #2
    bee6:	491d      	ldr	r1, [pc, #116]	; (bf5c <LBTChannelPauseCallback+0x138>)
    bee8:	468a      	mov	sl, r1
    beea:	4450      	add	r0, sl
    beec:	7202      	strb	r2, [r0, #8]
    beee:	0a11      	lsrs	r1, r2, #8
    bef0:	7241      	strb	r1, [r0, #9]
    bef2:	0c11      	lsrs	r1, r2, #16
    bef4:	7281      	strb	r1, [r0, #10]
    bef6:	0e11      	lsrs	r1, r2, #24
    bef8:	72c1      	strb	r1, [r0, #11]
            if ( (RegParams.cmnParams.paramsType2.channelTimer[i] <= minim) && (RegParams.cmnParams.paramsType2.channelTimer[i] != 0) )
    befa:	4542      	cmp	r2, r8
    befc:	d8cf      	bhi.n	be9e <LBTChannelPauseCallback+0x7a>
    befe:	2a00      	cmp	r2, #0
    bf00:	d0cd      	beq.n	be9e <LBTChannelPauseCallback+0x7a>
                found = 1;
    bf02:	46a1      	mov	r9, r4
            if ( (RegParams.cmnParams.paramsType2.channelTimer[i] <= minim) && (RegParams.cmnParams.paramsType2.channelTimer[i] != 0) )
    bf04:	4690      	mov	r8, r2
    bf06:	e7ca      	b.n	be9e <LBTChannelPauseCallback+0x7a>
    if ( found == 1 )
    bf08:	464b      	mov	r3, r9
    bf0a:	2b00      	cmp	r3, #0
    bf0c:	d106      	bne.n	bf1c <LBTChannelPauseCallback+0xf8>
}
    bf0e:	b005      	add	sp, #20
    bf10:	bc3c      	pop	{r2, r3, r4, r5}
    bf12:	4690      	mov	r8, r2
    bf14:	4699      	mov	r9, r3
    bf16:	46a2      	mov	sl, r4
    bf18:	46ab      	mov	fp, r5
    bf1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        pLBTTimer->lastTimerValue = minim;
    bf1c:	4b0f      	ldr	r3, [pc, #60]	; (bf5c <LBTChannelPauseCallback+0x138>)
    bf1e:	22d4      	movs	r2, #212	; 0xd4
    bf20:	0052      	lsls	r2, r2, #1
    bf22:	4641      	mov	r1, r8
    bf24:	5499      	strb	r1, [r3, r2]
    bf26:	4642      	mov	r2, r8
    bf28:	0a11      	lsrs	r1, r2, #8
    bf2a:	001a      	movs	r2, r3
    bf2c:	32a9      	adds	r2, #169	; 0xa9
    bf2e:	32ff      	adds	r2, #255	; 0xff
    bf30:	7051      	strb	r1, [r2, #1]
    bf32:	4641      	mov	r1, r8
    bf34:	0c09      	lsrs	r1, r1, #16
    bf36:	7091      	strb	r1, [r2, #2]
    bf38:	4641      	mov	r1, r8
    bf3a:	0e09      	lsrs	r1, r1, #24
    bf3c:	70d1      	strb	r1, [r2, #3]
        SwTimerStart (pLBTTimer->timerId, MS_TO_US(minim), SW_TIMEOUT_RELATIVE, (void *)LBTChannelPauseCallback, NULL);
    bf3e:	21fa      	movs	r1, #250	; 0xfa
    bf40:	0089      	lsls	r1, r1, #2
    bf42:	4642      	mov	r2, r8
    bf44:	4351      	muls	r1, r2
    bf46:	22d6      	movs	r2, #214	; 0xd6
    bf48:	0052      	lsls	r2, r2, #1
    bf4a:	5c98      	ldrb	r0, [r3, r2]
    bf4c:	2300      	movs	r3, #0
    bf4e:	9300      	str	r3, [sp, #0]
    bf50:	4b03      	ldr	r3, [pc, #12]	; (bf60 <LBTChannelPauseCallback+0x13c>)
    bf52:	2200      	movs	r2, #0
    bf54:	4c03      	ldr	r4, [pc, #12]	; (bf64 <LBTChannelPauseCallback+0x140>)
    bf56:	47a0      	blx	r4
}
    bf58:	e7d9      	b.n	bf0e <LBTChannelPauseCallback+0xea>
    bf5a:	46c0      	nop			; (mov r8, r8)
    bf5c:	200024d0 	.word	0x200024d0
    bf60:	0000be25 	.word	0x0000be25
    bf64:	0000ed11 	.word	0x0000ed11

0000bf68 <JoinDutyCycleCallback>:
{   
    bf68:	b510      	push	{r4, lr}
    bf6a:	b082      	sub	sp, #8
	if(RegParams.pJoinDutyCycleTimer->remainingtime!=0)
    bf6c:	492e      	ldr	r1, [pc, #184]	; (c028 <JoinDutyCycleCallback+0xc0>)
    bf6e:	7d0b      	ldrb	r3, [r1, #20]
    bf70:	7d4a      	ldrb	r2, [r1, #21]
    bf72:	0212      	lsls	r2, r2, #8
    bf74:	431a      	orrs	r2, r3
    bf76:	7d8b      	ldrb	r3, [r1, #22]
    bf78:	041b      	lsls	r3, r3, #16
    bf7a:	431a      	orrs	r2, r3
    bf7c:	7dcb      	ldrb	r3, [r1, #23]
    bf7e:	061b      	lsls	r3, r3, #24
    bf80:	4313      	orrs	r3, r2
    bf82:	7919      	ldrb	r1, [r3, #4]
    bf84:	795a      	ldrb	r2, [r3, #5]
    bf86:	0212      	lsls	r2, r2, #8
    bf88:	430a      	orrs	r2, r1
    bf8a:	7999      	ldrb	r1, [r3, #6]
    bf8c:	0409      	lsls	r1, r1, #16
    bf8e:	430a      	orrs	r2, r1
    bf90:	79d9      	ldrb	r1, [r3, #7]
    bf92:	0609      	lsls	r1, r1, #24
    bf94:	4311      	orrs	r1, r2
    bf96:	d03c      	beq.n	c012 <JoinDutyCycleCallback+0xaa>
		if(RegParams.pJoinDutyCycleTimer->remainingtime>US_TO_MS(SWTIMER_MAX_TIMEOUT))
    bf98:	4a24      	ldr	r2, [pc, #144]	; (c02c <JoinDutyCycleCallback+0xc4>)
    bf9a:	4291      	cmp	r1, r2
    bf9c:	d91e      	bls.n	bfdc <JoinDutyCycleCallback+0x74>
			RegParams.pJoinDutyCycleTimer->remainingtime = RegParams.pJoinDutyCycleTimer->remainingtime-(US_TO_MS(SWTIMER_MAX_TIMEOUT));
    bf9e:	4a24      	ldr	r2, [pc, #144]	; (c030 <JoinDutyCycleCallback+0xc8>)
    bfa0:	4694      	mov	ip, r2
    bfa2:	4461      	add	r1, ip
    bfa4:	7119      	strb	r1, [r3, #4]
    bfa6:	0a0a      	lsrs	r2, r1, #8
    bfa8:	715a      	strb	r2, [r3, #5]
    bfaa:	0c0a      	lsrs	r2, r1, #16
    bfac:	719a      	strb	r2, [r3, #6]
    bfae:	0e09      	lsrs	r1, r1, #24
    bfb0:	71d9      	strb	r1, [r3, #7]
			SwTimerStart(RegParams.pJoinDutyCycleTimer->timerId, SWTIMER_MAX_TIMEOUT, SW_TIMEOUT_RELATIVE, (void *)JoinDutyCycleCallback, NULL);
    bfb2:	491d      	ldr	r1, [pc, #116]	; (c028 <JoinDutyCycleCallback+0xc0>)
    bfb4:	7d0b      	ldrb	r3, [r1, #20]
    bfb6:	7d4a      	ldrb	r2, [r1, #21]
    bfb8:	0212      	lsls	r2, r2, #8
    bfba:	431a      	orrs	r2, r3
    bfbc:	7d8b      	ldrb	r3, [r1, #22]
    bfbe:	041b      	lsls	r3, r3, #16
    bfc0:	431a      	orrs	r2, r3
    bfc2:	7dcb      	ldrb	r3, [r1, #23]
    bfc4:	061b      	lsls	r3, r3, #24
    bfc6:	4313      	orrs	r3, r2
    bfc8:	7a18      	ldrb	r0, [r3, #8]
    bfca:	2300      	movs	r3, #0
    bfcc:	9300      	str	r3, [sp, #0]
    bfce:	4b19      	ldr	r3, [pc, #100]	; (c034 <JoinDutyCycleCallback+0xcc>)
    bfd0:	2200      	movs	r2, #0
    bfd2:	4919      	ldr	r1, [pc, #100]	; (c038 <JoinDutyCycleCallback+0xd0>)
    bfd4:	4c19      	ldr	r4, [pc, #100]	; (c03c <JoinDutyCycleCallback+0xd4>)
    bfd6:	47a0      	blx	r4
}
    bfd8:	b002      	add	sp, #8
    bfda:	bd10      	pop	{r4, pc}
			SwTimerStart(RegParams.pJoinDutyCycleTimer->timerId, MS_TO_US(RegParams.pJoinDutyCycleTimer->remainingtime), SW_TIMEOUT_RELATIVE, (void *)JoinDutyCycleCallback, NULL);
    bfdc:	22fa      	movs	r2, #250	; 0xfa
    bfde:	0092      	lsls	r2, r2, #2
    bfe0:	4351      	muls	r1, r2
    bfe2:	7a18      	ldrb	r0, [r3, #8]
    bfe4:	2300      	movs	r3, #0
    bfe6:	9300      	str	r3, [sp, #0]
    bfe8:	4b12      	ldr	r3, [pc, #72]	; (c034 <JoinDutyCycleCallback+0xcc>)
    bfea:	2200      	movs	r2, #0
    bfec:	4c13      	ldr	r4, [pc, #76]	; (c03c <JoinDutyCycleCallback+0xd4>)
    bfee:	47a0      	blx	r4
			RegParams.pJoinDutyCycleTimer->remainingtime =0;
    bff0:	490d      	ldr	r1, [pc, #52]	; (c028 <JoinDutyCycleCallback+0xc0>)
    bff2:	7d0b      	ldrb	r3, [r1, #20]
    bff4:	7d4a      	ldrb	r2, [r1, #21]
    bff6:	0212      	lsls	r2, r2, #8
    bff8:	431a      	orrs	r2, r3
    bffa:	7d8b      	ldrb	r3, [r1, #22]
    bffc:	041b      	lsls	r3, r3, #16
    bffe:	431a      	orrs	r2, r3
    c000:	7dcb      	ldrb	r3, [r1, #23]
    c002:	061b      	lsls	r3, r3, #24
    c004:	4313      	orrs	r3, r2
    c006:	2200      	movs	r2, #0
    c008:	711a      	strb	r2, [r3, #4]
    c00a:	715a      	strb	r2, [r3, #5]
    c00c:	719a      	strb	r2, [r3, #6]
    c00e:	71da      	strb	r2, [r3, #7]
    c010:	e7e2      	b.n	bfd8 <JoinDutyCycleCallback+0x70>
	SwTimerStop(RegParams.pJoinDutyCycleTimer->timerId);
    c012:	7a18      	ldrb	r0, [r3, #8]
    c014:	4b0a      	ldr	r3, [pc, #40]	; (c040 <JoinDutyCycleCallback+0xd8>)
    c016:	4798      	blx	r3
	RegParams.joinDutyCycleTimeout = 0;
    c018:	4b03      	ldr	r3, [pc, #12]	; (c028 <JoinDutyCycleCallback+0xc0>)
    c01a:	333e      	adds	r3, #62	; 0x3e
    c01c:	2200      	movs	r2, #0
    c01e:	701a      	strb	r2, [r3, #0]
    c020:	705a      	strb	r2, [r3, #1]
    c022:	709a      	strb	r2, [r3, #2]
    c024:	70da      	strb	r2, [r3, #3]
}
    c026:	e7d7      	b.n	bfd8 <JoinDutyCycleCallback+0x70>
    c028:	200024d0 	.word	0x200024d0
    c02c:	0020c49b 	.word	0x0020c49b
    c030:	ffdf3b65 	.word	0xffdf3b65
    c034:	0000bf69 	.word	0x0000bf69
    c038:	7fffffff 	.word	0x7fffffff
    c03c:	0000ed11 	.word	0x0000ed11
    c040:	0000f029 	.word	0x0000f029

0000c044 <JoinBackoffCallback>:
{
    c044:	b510      	push	{r4, lr}
    c046:	b082      	sub	sp, #8
	RegParams.joinbccount ++;
    c048:	4b0c      	ldr	r3, [pc, #48]	; (c07c <JoinBackoffCallback+0x38>)
    c04a:	2142      	movs	r1, #66	; 0x42
    c04c:	5c5a      	ldrb	r2, [r3, r1]
    c04e:	3201      	adds	r2, #1
    c050:	545a      	strb	r2, [r3, r1]
	SwTimerStart (RegParams.pJoinBackoffTimer->timerId, MS_TO_US(BACKOFF_BASE_TIME_IN_MS), SW_TIMEOUT_RELATIVE, (void *)JoinBackoffCallback, NULL);
    c052:	7e19      	ldrb	r1, [r3, #24]
    c054:	7e5a      	ldrb	r2, [r3, #25]
    c056:	0212      	lsls	r2, r2, #8
    c058:	4311      	orrs	r1, r2
    c05a:	7e9a      	ldrb	r2, [r3, #26]
    c05c:	0412      	lsls	r2, r2, #16
    c05e:	430a      	orrs	r2, r1
    c060:	7edb      	ldrb	r3, [r3, #27]
    c062:	061b      	lsls	r3, r3, #24
    c064:	4313      	orrs	r3, r2
    c066:	7818      	ldrb	r0, [r3, #0]
    c068:	2300      	movs	r3, #0
    c06a:	9300      	str	r3, [sp, #0]
    c06c:	4b04      	ldr	r3, [pc, #16]	; (c080 <JoinBackoffCallback+0x3c>)
    c06e:	2200      	movs	r2, #0
    c070:	4904      	ldr	r1, [pc, #16]	; (c084 <JoinBackoffCallback+0x40>)
    c072:	4c05      	ldr	r4, [pc, #20]	; (c088 <JoinBackoffCallback+0x44>)
    c074:	47a0      	blx	r4
}
    c076:	b002      	add	sp, #8
    c078:	bd10      	pop	{r4, pc}
    c07a:	46c0      	nop			; (mov r8, r8)
    c07c:	200024d0 	.word	0x200024d0
    c080:	0000c045 	.word	0x0000c045
    c084:	6b49d200 	.word	0x6b49d200
    c088:	0000ed11 	.word	0x0000ed11

0000c08c <ValidateDataRangeT2>:
	memcpy(&val_drange,attrInput,sizeof(ValUpdateDrange_t));
    c08c:	784a      	ldrb	r2, [r1, #1]
	dataRateMin = val_drange.dataRangeNew & LAST_NIBBLE;
    c08e:	230f      	movs	r3, #15
    c090:	4013      	ands	r3, r2
    if ( dataRate > RegParams.minDataRate )
    c092:	2124      	movs	r1, #36	; 0x24
    c094:	4807      	ldr	r0, [pc, #28]	; (c0b4 <ValidateDataRangeT2+0x28>)
    c096:	5c41      	ldrb	r1, [r0, r1]
		retVal = LORAWAN_INVALID_PARAMETER;
    c098:	200a      	movs	r0, #10
    if ( dataRate > RegParams.minDataRate )
    c09a:	428b      	cmp	r3, r1
    c09c:	d900      	bls.n	c0a0 <ValidateDataRangeT2+0x14>
}
    c09e:	4770      	bx	lr
	dataRateMax = (val_drange.dataRangeNew & FIRST_NIBBLE) >> SHIFT4;
    c0a0:	0912      	lsrs	r2, r2, #4
		retVal = LORAWAN_INVALID_PARAMETER;
    c0a2:	200a      	movs	r0, #10
    if ( dataRate > RegParams.minDataRate )
    c0a4:	428a      	cmp	r2, r1
    c0a6:	d8fa      	bhi.n	c09e <ValidateDataRangeT2+0x12>
	StackRetStatus_t retVal = LORAWAN_SUCCESS;
    c0a8:	3802      	subs	r0, #2
	   || (dataRateMax < dataRateMin) )
    c0aa:	4293      	cmp	r3, r2
    c0ac:	d9f7      	bls.n	c09e <ValidateDataRangeT2+0x12>
		retVal = LORAWAN_INVALID_PARAMETER;
    c0ae:	3002      	adds	r0, #2
	return retVal;
    c0b0:	e7f5      	b.n	c09e <ValidateDataRangeT2+0x12>
    c0b2:	46c0      	nop			; (mov r8, r8)
    c0b4:	200024d0 	.word	0x200024d0

0000c0b8 <setDataRangeT2>:
{
    c0b8:	b5f0      	push	{r4, r5, r6, r7, lr}
    c0ba:	46c6      	mov	lr, r8
    c0bc:	b500      	push	{lr}
    c0be:	b082      	sub	sp, #8
	memcpy((void *)&update_dr,attrInput,sizeof(ValUpdateDrange_t));
    c0c0:	780d      	ldrb	r5, [r1, #0]
    c0c2:	784e      	ldrb	r6, [r1, #1]
	val_chid.channelIndex = update_dr.channelIndex;
    c0c4:	ab01      	add	r3, sp, #4
    c0c6:	701d      	strb	r5, [r3, #0]
	val_chid.allowedForDefaultChannels = ALL_CHANNELS;
    c0c8:	2201      	movs	r2, #1
    c0ca:	705a      	strb	r2, [r3, #1]
	if((ValidateDataRangeT2(DATA_RANGE, attrInput) != LORAWAN_SUCCESS) || (ValidateChannelIdT2(CHANNEL_ID, &val_chid) != LORAWAN_SUCCESS))
    c0cc:	2012      	movs	r0, #18
    c0ce:	4b24      	ldr	r3, [pc, #144]	; (c160 <setDataRangeT2+0xa8>)
    c0d0:	4798      	blx	r3
		retVal = LORAWAN_INVALID_PARAMETER;
    c0d2:	240a      	movs	r4, #10
	if((ValidateDataRangeT2(DATA_RANGE, attrInput) != LORAWAN_SUCCESS) || (ValidateChannelIdT2(CHANNEL_ID, &val_chid) != LORAWAN_SUCCESS))
    c0d4:	2808      	cmp	r0, #8
    c0d6:	d004      	beq.n	c0e2 <setDataRangeT2+0x2a>
}
    c0d8:	0020      	movs	r0, r4
    c0da:	b002      	add	sp, #8
    c0dc:	bc04      	pop	{r2}
    c0de:	4690      	mov	r8, r2
    c0e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if((ValidateDataRangeT2(DATA_RANGE, attrInput) != LORAWAN_SUCCESS) || (ValidateChannelIdT2(CHANNEL_ID, &val_chid) != LORAWAN_SUCCESS))
    c0e2:	a901      	add	r1, sp, #4
    c0e4:	300d      	adds	r0, #13
    c0e6:	4b1f      	ldr	r3, [pc, #124]	; (c164 <setDataRangeT2+0xac>)
    c0e8:	4798      	blx	r3
    c0ea:	0004      	movs	r4, r0
    c0ec:	2808      	cmp	r0, #8
    c0ee:	d001      	beq.n	c0f4 <setDataRangeT2+0x3c>
		retVal = LORAWAN_INVALID_PARAMETER;
    c0f0:	240a      	movs	r4, #10
    c0f2:	e7f1      	b.n	c0d8 <setDataRangeT2+0x20>
		RegParams.pChParams[update_dr.channelIndex].dataRange.value = update_dr.dataRangeNew;
    c0f4:	4f1c      	ldr	r7, [pc, #112]	; (c168 <setDataRangeT2+0xb0>)
    c0f6:	793b      	ldrb	r3, [r7, #4]
    c0f8:	797a      	ldrb	r2, [r7, #5]
    c0fa:	0212      	lsls	r2, r2, #8
    c0fc:	431a      	orrs	r2, r3
    c0fe:	79bb      	ldrb	r3, [r7, #6]
    c100:	041b      	lsls	r3, r3, #16
    c102:	431a      	orrs	r2, r3
    c104:	79fb      	ldrb	r3, [r7, #7]
    c106:	061b      	lsls	r3, r3, #24
    c108:	4313      	orrs	r3, r2
    c10a:	006a      	lsls	r2, r5, #1
    c10c:	4690      	mov	r8, r2
    c10e:	4443      	add	r3, r8
    c110:	705e      	strb	r6, [r3, #1]
		PDS_STORE(RegParams.regParamItems.ch_param_1_item_id);
    c112:	4b16      	ldr	r3, [pc, #88]	; (c16c <setDataRangeT2+0xb4>)
    c114:	5cfb      	ldrb	r3, [r7, r3]
    c116:	4a16      	ldr	r2, [pc, #88]	; (c170 <setDataRangeT2+0xb8>)
    c118:	5cb8      	ldrb	r0, [r7, r2]
    c11a:	0200      	lsls	r0, r0, #8
    c11c:	4318      	orrs	r0, r3
    c11e:	b2c1      	uxtb	r1, r0
    c120:	0a00      	lsrs	r0, r0, #8
    c122:	4e14      	ldr	r6, [pc, #80]	; (c174 <setDataRangeT2+0xbc>)
    c124:	47b0      	blx	r6
		RegParams.pOtherChParams[update_dr.channelIndex].parametersDefined |= DATA_RANGE_DEFINED;
    c126:	7a3b      	ldrb	r3, [r7, #8]
    c128:	7a7a      	ldrb	r2, [r7, #9]
    c12a:	0212      	lsls	r2, r2, #8
    c12c:	431a      	orrs	r2, r3
    c12e:	7abb      	ldrb	r3, [r7, #10]
    c130:	041b      	lsls	r3, r3, #16
    c132:	431a      	orrs	r2, r3
    c134:	7afb      	ldrb	r3, [r7, #11]
    c136:	061b      	lsls	r3, r3, #24
    c138:	4313      	orrs	r3, r2
    c13a:	4445      	add	r5, r8
    c13c:	00ad      	lsls	r5, r5, #2
    c13e:	195d      	adds	r5, r3, r5
    c140:	7aeb      	ldrb	r3, [r5, #11]
    c142:	2202      	movs	r2, #2
    c144:	4313      	orrs	r3, r2
    c146:	72eb      	strb	r3, [r5, #11]
		PDS_STORE(RegParams.regParamItems.ch_param_2_item_id);
    c148:	2384      	movs	r3, #132	; 0x84
    c14a:	009b      	lsls	r3, r3, #2
    c14c:	5cfb      	ldrb	r3, [r7, r3]
    c14e:	4a0a      	ldr	r2, [pc, #40]	; (c178 <setDataRangeT2+0xc0>)
    c150:	5cb8      	ldrb	r0, [r7, r2]
    c152:	0200      	lsls	r0, r0, #8
    c154:	4318      	orrs	r0, r3
    c156:	b2c1      	uxtb	r1, r0
    c158:	0a00      	lsrs	r0, r0, #8
    c15a:	47b0      	blx	r6
    c15c:	e7bc      	b.n	c0d8 <setDataRangeT2+0x20>
    c15e:	46c0      	nop			; (mov r8, r8)
    c160:	0000c08d 	.word	0x0000c08d
    c164:	0000993d 	.word	0x0000993d
    c168:	200024d0 	.word	0x200024d0
    c16c:	0000020e 	.word	0x0000020e
    c170:	0000020f 	.word	0x0000020f
    c174:	0000dfe1 	.word	0x0000dfe1
    c178:	00000211 	.word	0x00000211

0000c17c <LORAREG_GetAttr_MaxPayloadT3>:
{
    c17c:	b530      	push	{r4, r5, lr}
	dataRate = *(uint8_t *)attrInput;
    c17e:	780b      	ldrb	r3, [r1, #0]
    if ( dataRate > RegParams.minDataRate )
    c180:	2124      	movs	r1, #36	; 0x24
    c182:	4816      	ldr	r0, [pc, #88]	; (c1dc <LORAREG_GetAttr_MaxPayloadT3+0x60>)
    c184:	5c41      	ldrb	r1, [r0, r1]
		result =  LORAWAN_INVALID_PARAMETER;
    c186:	200a      	movs	r0, #10
    if ( dataRate > RegParams.minDataRate )
    c188:	4299      	cmp	r1, r3
    c18a:	d215      	bcs.n	c1b8 <LORAREG_GetAttr_MaxPayloadT3+0x3c>
	if(RegParams.cmnParams.paramsType2.txParams.uplinkDwellTime == 1)
    c18c:	21e1      	movs	r1, #225	; 0xe1
    c18e:	0049      	lsls	r1, r1, #1
    c190:	4c12      	ldr	r4, [pc, #72]	; (c1dc <LORAREG_GetAttr_MaxPayloadT3+0x60>)
    c192:	5c61      	ldrb	r1, [r4, r1]
    c194:	07c9      	lsls	r1, r1, #31
    c196:	d411      	bmi.n	c1bc <LORAREG_GetAttr_MaxPayloadT3+0x40>
		*(uint8_t *)attrOutput = RegParams.pDrParams[dataRate].maxPayloadSizeDt0;
    c198:	4d10      	ldr	r5, [pc, #64]	; (c1dc <LORAREG_GetAttr_MaxPayloadT3+0x60>)
    c19a:	7829      	ldrb	r1, [r5, #0]
    c19c:	786c      	ldrb	r4, [r5, #1]
    c19e:	0224      	lsls	r4, r4, #8
    c1a0:	430c      	orrs	r4, r1
    c1a2:	78a9      	ldrb	r1, [r5, #2]
    c1a4:	0409      	lsls	r1, r1, #16
    c1a6:	430c      	orrs	r4, r1
    c1a8:	78e9      	ldrb	r1, [r5, #3]
    c1aa:	0609      	lsls	r1, r1, #24
    c1ac:	4321      	orrs	r1, r4
    c1ae:	00db      	lsls	r3, r3, #3
    c1b0:	185b      	adds	r3, r3, r1
    c1b2:	789b      	ldrb	r3, [r3, #2]
    c1b4:	7013      	strb	r3, [r2, #0]
}
    c1b6:	bd30      	pop	{r4, r5, pc}
	StackRetStatus_t result = LORAWAN_SUCCESS;
    c1b8:	3802      	subs	r0, #2
    c1ba:	e7e7      	b.n	c18c <LORAREG_GetAttr_MaxPayloadT3+0x10>
		*(uint8_t *)attrOutput = RegParams.pDrParams[dataRate].maxPayloadSizeDt1;
    c1bc:	0025      	movs	r5, r4
    c1be:	7821      	ldrb	r1, [r4, #0]
    c1c0:	7864      	ldrb	r4, [r4, #1]
    c1c2:	0224      	lsls	r4, r4, #8
    c1c4:	430c      	orrs	r4, r1
    c1c6:	78a9      	ldrb	r1, [r5, #2]
    c1c8:	0409      	lsls	r1, r1, #16
    c1ca:	430c      	orrs	r4, r1
    c1cc:	78e9      	ldrb	r1, [r5, #3]
    c1ce:	0609      	lsls	r1, r1, #24
    c1d0:	4321      	orrs	r1, r4
    c1d2:	00db      	lsls	r3, r3, #3
    c1d4:	1859      	adds	r1, r3, r1
    c1d6:	78cb      	ldrb	r3, [r1, #3]
    c1d8:	7013      	strb	r3, [r2, #0]
    c1da:	e7ec      	b.n	c1b6 <LORAREG_GetAttr_MaxPayloadT3+0x3a>
    c1dc:	200024d0 	.word	0x200024d0

0000c1e0 <LORAREG_GetAttr_RxWindowSizeT2>:
{
    c1e0:	b510      	push	{r4, lr}
	dataRate = *(uint8_t *)attrInput;
    c1e2:	780b      	ldrb	r3, [r1, #0]
    if ( dataRate > RegParams.minDataRate )
    c1e4:	2124      	movs	r1, #36	; 0x24
    c1e6:	480d      	ldr	r0, [pc, #52]	; (c21c <LORAREG_GetAttr_RxWindowSizeT2+0x3c>)
    c1e8:	5c41      	ldrb	r1, [r0, r1]
		return LORAWAN_INVALID_PARAMETER;
    c1ea:	200a      	movs	r0, #10
    if ( dataRate > RegParams.minDataRate )
    c1ec:	4299      	cmp	r1, r3
    c1ee:	d200      	bcs.n	c1f2 <LORAREG_GetAttr_RxWindowSizeT2+0x12>
}
    c1f0:	bd10      	pop	{r4, pc}
		*(uint16_t *)attrOutput = RegParams.pDrParams[dataRate].rxWindowSize;
    c1f2:	4c0a      	ldr	r4, [pc, #40]	; (c21c <LORAREG_GetAttr_RxWindowSizeT2+0x3c>)
    c1f4:	7821      	ldrb	r1, [r4, #0]
    c1f6:	7860      	ldrb	r0, [r4, #1]
    c1f8:	0200      	lsls	r0, r0, #8
    c1fa:	4308      	orrs	r0, r1
    c1fc:	78a1      	ldrb	r1, [r4, #2]
    c1fe:	0409      	lsls	r1, r1, #16
    c200:	4308      	orrs	r0, r1
    c202:	78e1      	ldrb	r1, [r4, #3]
    c204:	0609      	lsls	r1, r1, #24
    c206:	4301      	orrs	r1, r0
    c208:	00db      	lsls	r3, r3, #3
    c20a:	5c58      	ldrb	r0, [r3, r1]
    c20c:	185b      	adds	r3, r3, r1
    c20e:	785b      	ldrb	r3, [r3, #1]
    c210:	021b      	lsls	r3, r3, #8
    c212:	4303      	orrs	r3, r0
    c214:	8013      	strh	r3, [r2, #0]
	return result;
    c216:	2008      	movs	r0, #8
    c218:	e7ea      	b.n	c1f0 <LORAREG_GetAttr_RxWindowSizeT2+0x10>
    c21a:	46c0      	nop			; (mov r8, r8)
    c21c:	200024d0 	.word	0x200024d0

0000c220 <LORAREG_GetAttr_RxWindowOffsetT2>:
{
    c220:	b510      	push	{r4, lr}
	dataRate = *(uint8_t *)attrInput;
    c222:	780b      	ldrb	r3, [r1, #0]
    if ( dataRate > RegParams.minDataRate )
    c224:	2124      	movs	r1, #36	; 0x24
    c226:	480c      	ldr	r0, [pc, #48]	; (c258 <LORAREG_GetAttr_RxWindowOffsetT2+0x38>)
    c228:	5c41      	ldrb	r1, [r0, r1]
		return LORAWAN_INVALID_PARAMETER;
    c22a:	200a      	movs	r0, #10
    if ( dataRate > RegParams.minDataRate )
    c22c:	4299      	cmp	r1, r3
    c22e:	d200      	bcs.n	c232 <LORAREG_GetAttr_RxWindowOffsetT2+0x12>
}
    c230:	bd10      	pop	{r4, pc}
		*(int8_t *)attrOutput = RegParams.pDrParams[dataRate].rxWindowOffset;
    c232:	4c09      	ldr	r4, [pc, #36]	; (c258 <LORAREG_GetAttr_RxWindowOffsetT2+0x38>)
    c234:	7821      	ldrb	r1, [r4, #0]
    c236:	7860      	ldrb	r0, [r4, #1]
    c238:	0200      	lsls	r0, r0, #8
    c23a:	4308      	orrs	r0, r1
    c23c:	78a1      	ldrb	r1, [r4, #2]
    c23e:	0409      	lsls	r1, r1, #16
    c240:	4308      	orrs	r0, r1
    c242:	78e1      	ldrb	r1, [r4, #3]
    c244:	0609      	lsls	r1, r1, #24
    c246:	4301      	orrs	r1, r0
    c248:	00db      	lsls	r3, r3, #3
    c24a:	185b      	adds	r3, r3, r1
    c24c:	791b      	ldrb	r3, [r3, #4]
    c24e:	b25b      	sxtb	r3, r3
    c250:	7013      	strb	r3, [r2, #0]
	return result;
    c252:	2008      	movs	r0, #8
    c254:	e7ec      	b.n	c230 <LORAREG_GetAttr_RxWindowOffsetT2+0x10>
    c256:	46c0      	nop			; (mov r8, r8)
    c258:	200024d0 	.word	0x200024d0

0000c25c <LORAREG_GetAttr_MaxPayloadT2>:
{
    c25c:	b510      	push	{r4, lr}
	dataRate = *(uint8_t *)attrInput;
    c25e:	780b      	ldrb	r3, [r1, #0]
    if ( dataRate > RegParams.minDataRate )
    c260:	2124      	movs	r1, #36	; 0x24
    c262:	480b      	ldr	r0, [pc, #44]	; (c290 <LORAREG_GetAttr_MaxPayloadT2+0x34>)
    c264:	5c41      	ldrb	r1, [r0, r1]
		result =  LORAWAN_INVALID_PARAMETER;
    c266:	200a      	movs	r0, #10
    if ( dataRate > RegParams.minDataRate )
    c268:	4299      	cmp	r1, r3
    c26a:	d200      	bcs.n	c26e <LORAREG_GetAttr_MaxPayloadT2+0x12>
}
    c26c:	bd10      	pop	{r4, pc}
		*(uint8_t *)attrOutput = RegParams.pDrParams[dataRate].maxPayloadSizeDt0;
    c26e:	4c08      	ldr	r4, [pc, #32]	; (c290 <LORAREG_GetAttr_MaxPayloadT2+0x34>)
    c270:	7821      	ldrb	r1, [r4, #0]
    c272:	7860      	ldrb	r0, [r4, #1]
    c274:	0200      	lsls	r0, r0, #8
    c276:	4308      	orrs	r0, r1
    c278:	78a1      	ldrb	r1, [r4, #2]
    c27a:	0409      	lsls	r1, r1, #16
    c27c:	4308      	orrs	r0, r1
    c27e:	78e1      	ldrb	r1, [r4, #3]
    c280:	0609      	lsls	r1, r1, #24
    c282:	4301      	orrs	r1, r0
    c284:	00db      	lsls	r3, r3, #3
    c286:	185b      	adds	r3, r3, r1
    c288:	789b      	ldrb	r3, [r3, #2]
    c28a:	7013      	strb	r3, [r2, #0]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    c28c:	2008      	movs	r0, #8
	return result;
    c28e:	e7ed      	b.n	c26c <LORAREG_GetAttr_MaxPayloadT2+0x10>
    c290:	200024d0 	.word	0x200024d0

0000c294 <LORAREG_GetAttr_ModulationAttrT2>:
{
    c294:	b510      	push	{r4, lr}
	dataRate = *(uint8_t *)attrInput;
    c296:	780b      	ldrb	r3, [r1, #0]
    if ( dataRate > RegParams.minDataRate )
    c298:	2124      	movs	r1, #36	; 0x24
    c29a:	480b      	ldr	r0, [pc, #44]	; (c2c8 <LORAREG_GetAttr_ModulationAttrT2+0x34>)
    c29c:	5c41      	ldrb	r1, [r0, r1]
		result = LORAWAN_INVALID_PARAMETER;
    c29e:	200a      	movs	r0, #10
    if ( dataRate > RegParams.minDataRate )
    c2a0:	4299      	cmp	r1, r3
    c2a2:	d200      	bcs.n	c2a6 <LORAREG_GetAttr_ModulationAttrT2+0x12>
}
    c2a4:	bd10      	pop	{r4, pc}
		*(uint8_t *)attrOutput = RegParams.pDrParams[dataRate].modulation;
    c2a6:	4c08      	ldr	r4, [pc, #32]	; (c2c8 <LORAREG_GetAttr_ModulationAttrT2+0x34>)
    c2a8:	7821      	ldrb	r1, [r4, #0]
    c2aa:	7860      	ldrb	r0, [r4, #1]
    c2ac:	0200      	lsls	r0, r0, #8
    c2ae:	4308      	orrs	r0, r1
    c2b0:	78a1      	ldrb	r1, [r4, #2]
    c2b2:	0409      	lsls	r1, r1, #16
    c2b4:	4308      	orrs	r0, r1
    c2b6:	78e1      	ldrb	r1, [r4, #3]
    c2b8:	0609      	lsls	r1, r1, #24
    c2ba:	4301      	orrs	r1, r0
    c2bc:	00db      	lsls	r3, r3, #3
    c2be:	185b      	adds	r3, r3, r1
    c2c0:	79db      	ldrb	r3, [r3, #7]
    c2c2:	7013      	strb	r3, [r2, #0]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    c2c4:	2008      	movs	r0, #8
	return result;
    c2c6:	e7ed      	b.n	c2a4 <LORAREG_GetAttr_ModulationAttrT2+0x10>
    c2c8:	200024d0 	.word	0x200024d0

0000c2cc <LORAREG_GetAttr_BandwidthAttrT2>:
{
    c2cc:	b510      	push	{r4, lr}
	dataRate = *(uint8_t *)attrInput;
    c2ce:	780b      	ldrb	r3, [r1, #0]
    if ( dataRate > RegParams.minDataRate )
    c2d0:	2124      	movs	r1, #36	; 0x24
    c2d2:	480b      	ldr	r0, [pc, #44]	; (c300 <LORAREG_GetAttr_BandwidthAttrT2+0x34>)
    c2d4:	5c41      	ldrb	r1, [r0, r1]
		result = LORAWAN_INVALID_PARAMETER;
    c2d6:	200a      	movs	r0, #10
    if ( dataRate > RegParams.minDataRate )
    c2d8:	4299      	cmp	r1, r3
    c2da:	d200      	bcs.n	c2de <LORAREG_GetAttr_BandwidthAttrT2+0x12>
}
    c2dc:	bd10      	pop	{r4, pc}
		*(uint8_t *)attrOutput = RegParams.pDrParams[dataRate].bandwidth;
    c2de:	4c08      	ldr	r4, [pc, #32]	; (c300 <LORAREG_GetAttr_BandwidthAttrT2+0x34>)
    c2e0:	7821      	ldrb	r1, [r4, #0]
    c2e2:	7860      	ldrb	r0, [r4, #1]
    c2e4:	0200      	lsls	r0, r0, #8
    c2e6:	4308      	orrs	r0, r1
    c2e8:	78a1      	ldrb	r1, [r4, #2]
    c2ea:	0409      	lsls	r1, r1, #16
    c2ec:	4308      	orrs	r0, r1
    c2ee:	78e1      	ldrb	r1, [r4, #3]
    c2f0:	0609      	lsls	r1, r1, #24
    c2f2:	4301      	orrs	r1, r0
    c2f4:	00db      	lsls	r3, r3, #3
    c2f6:	185b      	adds	r3, r3, r1
    c2f8:	799b      	ldrb	r3, [r3, #6]
    c2fa:	7013      	strb	r3, [r2, #0]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    c2fc:	2008      	movs	r0, #8
	return result;
    c2fe:	e7ed      	b.n	c2dc <LORAREG_GetAttr_BandwidthAttrT2+0x10>
    c300:	200024d0 	.word	0x200024d0

0000c304 <LORAREG_GetAttr_SpreadFactorT2>:
{
    c304:	b510      	push	{r4, lr}
	dataRate = *(uint8_t *)attrInput;
    c306:	780b      	ldrb	r3, [r1, #0]
    if ( dataRate > RegParams.minDataRate )
    c308:	2124      	movs	r1, #36	; 0x24
    c30a:	480b      	ldr	r0, [pc, #44]	; (c338 <LORAREG_GetAttr_SpreadFactorT2+0x34>)
    c30c:	5c41      	ldrb	r1, [r0, r1]
		result =  LORAWAN_INVALID_PARAMETER;
    c30e:	200a      	movs	r0, #10
    if ( dataRate > RegParams.minDataRate )
    c310:	4299      	cmp	r1, r3
    c312:	d200      	bcs.n	c316 <LORAREG_GetAttr_SpreadFactorT2+0x12>
}
    c314:	bd10      	pop	{r4, pc}
		*(RadioDataRate_t *)attrOutput = RegParams.pDrParams[dataRate].spreadingFactor;
    c316:	4c08      	ldr	r4, [pc, #32]	; (c338 <LORAREG_GetAttr_SpreadFactorT2+0x34>)
    c318:	7821      	ldrb	r1, [r4, #0]
    c31a:	7860      	ldrb	r0, [r4, #1]
    c31c:	0200      	lsls	r0, r0, #8
    c31e:	4308      	orrs	r0, r1
    c320:	78a1      	ldrb	r1, [r4, #2]
    c322:	0409      	lsls	r1, r1, #16
    c324:	4308      	orrs	r0, r1
    c326:	78e1      	ldrb	r1, [r4, #3]
    c328:	0609      	lsls	r1, r1, #24
    c32a:	4301      	orrs	r1, r0
    c32c:	00db      	lsls	r3, r3, #3
    c32e:	185b      	adds	r3, r3, r1
    c330:	795b      	ldrb	r3, [r3, #5]
    c332:	7013      	strb	r3, [r2, #0]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    c334:	2008      	movs	r0, #8
	return result;
    c336:	e7ed      	b.n	c314 <LORAREG_GetAttr_SpreadFactorT2+0x10>
    c338:	200024d0 	.word	0x200024d0

0000c33c <ValidateChMaskChCntl>:
{
    c33c:	b510      	push	{r4, lr}
    c33e:	b082      	sub	sp, #8
	ValChMaskCntl_t chMaskchCntl = * (ValChMaskCntl_t *)attrInput;
    c340:	ac01      	add	r4, sp, #4
    c342:	2204      	movs	r2, #4
    c344:	0020      	movs	r0, r4
    c346:	4b09      	ldr	r3, [pc, #36]	; (c36c <ValidateChMaskChCntl+0x30>)
    c348:	4798      	blx	r3
    if(chMaskchCntl.chnlMask == 0 && chMaskchCntl.chnlMaskCntl == 7)
    c34a:	8863      	ldrh	r3, [r4, #2]
    c34c:	2b00      	cmp	r3, #0
    c34e:	d104      	bne.n	c35a <ValidateChMaskChCntl+0x1e>
    c350:	ab01      	add	r3, sp, #4
    c352:	781b      	ldrb	r3, [r3, #0]
        result = LORAWAN_INVALID_PARAMETER;
    c354:	200a      	movs	r0, #10
    if(chMaskchCntl.chnlMask == 0 && chMaskchCntl.chnlMaskCntl == 7)
    c356:	2b07      	cmp	r3, #7
    c358:	d006      	beq.n	c368 <ValidateChMaskChCntl+0x2c>
		result = ((ValidateChannelMask(CHANNEL_MASK, (void *)&chMaskchCntl.chnlMask)) | (ValidateChannelMaskCntl(CHANNEL_MASK_CNTL,  (void *)&chMaskchCntl.chnlMaskCntl)));
    c35a:	a901      	add	r1, sp, #4
    c35c:	201b      	movs	r0, #27
    c35e:	4b04      	ldr	r3, [pc, #16]	; (c370 <ValidateChMaskChCntl+0x34>)
    c360:	4798      	blx	r3
    c362:	2308      	movs	r3, #8
    c364:	4318      	orrs	r0, r3
    c366:	b2c0      	uxtb	r0, r0
}
    c368:	b002      	add	sp, #8
    c36a:	bd10      	pop	{r4, pc}
    c36c:	00019d11 	.word	0x00019d11
    c370:	00009a45 	.word	0x00009a45

0000c374 <LORAREG_GetAttr_NewTxChConfigT2>:
{
    c374:	b5f0      	push	{r4, r5, r6, r7, lr}
    c376:	b083      	sub	sp, #12
    c378:	0015      	movs	r5, r2
	memcpy(&newTxChannelReq,(NewTxChannelReq_t *)attrInput,sizeof(NewTxChannelReq_t));
    c37a:	788c      	ldrb	r4, [r1, #2]
    if ( dataRate > RegParams.minDataRate )
    c37c:	2324      	movs	r3, #36	; 0x24
    c37e:	4a2e      	ldr	r2, [pc, #184]	; (c438 <LORAREG_GetAttr_NewTxChConfigT2+0xc4>)
    c380:	5cd3      	ldrb	r3, [r2, r3]
		result = LORAWAN_INVALID_PARAMETER;
    c382:	200a      	movs	r0, #10
    if ( dataRate > RegParams.minDataRate )
    c384:	42a3      	cmp	r3, r4
    c386:	d205      	bcs.n	c394 <LORAREG_GetAttr_NewTxChConfigT2+0x20>
}
    c388:	b003      	add	sp, #12
    c38a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(((((1 << RegParams.band) & (ISM_ASBAND)) || ((1 << RegParams.band) & (1 << ISM_JPN923))) != 0) && (transmissionType == 0))
    c38c:	2900      	cmp	r1, #0
    c38e:	d10f      	bne.n	c3b0 <LORAREG_GetAttr_NewTxChConfigT2+0x3c>
		currDr = DR2;
    c390:	2402      	movs	r4, #2
    c392:	e00d      	b.n	c3b0 <LORAREG_GetAttr_NewTxChConfigT2+0x3c>
	memcpy(&newTxChannelReq,(NewTxChannelReq_t *)attrInput,sizeof(NewTxChannelReq_t));
    c394:	784e      	ldrb	r6, [r1, #1]
	if (txPowerNew > RegParams.maxTxPwrIndx)
    c396:	232d      	movs	r3, #45	; 0x2d
    c398:	4a27      	ldr	r2, [pc, #156]	; (c438 <LORAREG_GetAttr_NewTxChConfigT2+0xc4>)
    c39a:	56d3      	ldrsb	r3, [r2, r3]
		result = LORAWAN_INVALID_PARAMETER;
    c39c:	200a      	movs	r0, #10
	if (txPowerNew > RegParams.maxTxPwrIndx)
    c39e:	429e      	cmp	r6, r3
    c3a0:	dcf2      	bgt.n	c388 <LORAREG_GetAttr_NewTxChConfigT2+0x14>
		result = GetTxChannelConfig2(newTxChannelReq.transmissionType,newTxChannelReq.txPwr,newTxChannelReq.currDr,(radioConfig_t*)attrOutput);
    c3a2:	7809      	ldrb	r1, [r1, #0]
	if(((((1 << RegParams.band) & (ISM_ASBAND)) || ((1 << RegParams.band) & (1 << ISM_JPN923))) != 0) && (transmissionType == 0))
    c3a4:	232e      	movs	r3, #46	; 0x2e
    c3a6:	5cd2      	ldrb	r2, [r2, r3]
    c3a8:	4b24      	ldr	r3, [pc, #144]	; (c43c <LORAREG_GetAttr_NewTxChConfigT2+0xc8>)
    c3aa:	4113      	asrs	r3, r2
    c3ac:	07db      	lsls	r3, r3, #31
    c3ae:	d4ed      	bmi.n	c38c <LORAREG_GetAttr_NewTxChConfigT2+0x18>
	result = SearchAvailableChannel2 (RegParams.maxChannels, transmissionType,currDr, &channelIndex);
    c3b0:	232a      	movs	r3, #42	; 0x2a
    c3b2:	4a21      	ldr	r2, [pc, #132]	; (c438 <LORAREG_GetAttr_NewTxChConfigT2+0xc4>)
    c3b4:	5cd0      	ldrb	r0, [r2, r3]
    c3b6:	466b      	mov	r3, sp
    c3b8:	3307      	adds	r3, #7
    c3ba:	0022      	movs	r2, r4
    c3bc:	4f20      	ldr	r7, [pc, #128]	; (c440 <LORAREG_GetAttr_NewTxChConfigT2+0xcc>)
    c3be:	47b8      	blx	r7
	if (result == LORAWAN_SUCCESS)
    c3c0:	2808      	cmp	r0, #8
    c3c2:	d1e1      	bne.n	c388 <LORAREG_GetAttr_NewTxChConfigT2+0x14>
		RegParams.lastUsedChannelIndex = channelIndex;
    c3c4:	466b      	mov	r3, sp
    c3c6:	79df      	ldrb	r7, [r3, #7]
    c3c8:	4b1b      	ldr	r3, [pc, #108]	; (c438 <LORAREG_GetAttr_NewTxChConfigT2+0xc4>)
    c3ca:	222f      	movs	r2, #47	; 0x2f
    c3cc:	549f      	strb	r7, [r3, r2]
		radioConfig->frequency = RegParams.pOtherChParams[channelIndex].ulfrequency;
    c3ce:	7a19      	ldrb	r1, [r3, #8]
    c3d0:	7a5a      	ldrb	r2, [r3, #9]
    c3d2:	0212      	lsls	r2, r2, #8
    c3d4:	430a      	orrs	r2, r1
    c3d6:	7a99      	ldrb	r1, [r3, #10]
    c3d8:	0409      	lsls	r1, r1, #16
    c3da:	430a      	orrs	r2, r1
    c3dc:	7ad9      	ldrb	r1, [r3, #11]
    c3de:	0609      	lsls	r1, r1, #24
    c3e0:	4311      	orrs	r1, r2
    c3e2:	007a      	lsls	r2, r7, #1
    c3e4:	19d2      	adds	r2, r2, r7
    c3e6:	0092      	lsls	r2, r2, #2
    c3e8:	5c57      	ldrb	r7, [r2, r1]
    c3ea:	1852      	adds	r2, r2, r1
    c3ec:	7851      	ldrb	r1, [r2, #1]
    c3ee:	0209      	lsls	r1, r1, #8
    c3f0:	430f      	orrs	r7, r1
    c3f2:	7891      	ldrb	r1, [r2, #2]
    c3f4:	0409      	lsls	r1, r1, #16
    c3f6:	4339      	orrs	r1, r7
    c3f8:	78d2      	ldrb	r2, [r2, #3]
    c3fa:	0612      	lsls	r2, r2, #24
    c3fc:	430a      	orrs	r2, r1
    c3fe:	602a      	str	r2, [r5, #0]
		radioConfig->txPower = RegParams.maxTxPwr - 2 *txPwrIndx;
    c400:	0076      	lsls	r6, r6, #1
    c402:	2228      	movs	r2, #40	; 0x28
    c404:	5c9a      	ldrb	r2, [r3, r2]
    c406:	1b96      	subs	r6, r2, r6
    c408:	722e      	strb	r6, [r5, #8]
		radioConfig->freq_hop_period = DISABLED ;
    c40a:	2200      	movs	r2, #0
    c40c:	80aa      	strh	r2, [r5, #4]
		radioConfig->modulation = RegParams.pDrParams[currDr].modulation;
    c40e:	7819      	ldrb	r1, [r3, #0]
    c410:	785a      	ldrb	r2, [r3, #1]
    c412:	0212      	lsls	r2, r2, #8
    c414:	4311      	orrs	r1, r2
    c416:	789a      	ldrb	r2, [r3, #2]
    c418:	0412      	lsls	r2, r2, #16
    c41a:	430a      	orrs	r2, r1
    c41c:	78db      	ldrb	r3, [r3, #3]
    c41e:	061b      	lsls	r3, r3, #24
    c420:	4313      	orrs	r3, r2
    c422:	00e4      	lsls	r4, r4, #3
    c424:	191c      	adds	r4, r3, r4
    c426:	79e3      	ldrb	r3, [r4, #7]
    c428:	726b      	strb	r3, [r5, #9]
		radioConfig->bandwidth = RegParams.pDrParams[currDr].bandwidth;
    c42a:	79a3      	ldrb	r3, [r4, #6]
    c42c:	72ab      	strb	r3, [r5, #10]
		radioConfig->sf = RegParams.pDrParams[currDr].spreadingFactor;
    c42e:	7963      	ldrb	r3, [r4, #5]
    c430:	72eb      	strb	r3, [r5, #11]
		radioConfig->ecrConfig.override = false;
    c432:	2300      	movs	r3, #0
    c434:	71eb      	strb	r3, [r5, #7]
    c436:	e7a7      	b.n	c388 <LORAREG_GetAttr_NewTxChConfigT2+0x14>
    c438:	200024d0 	.word	0x200024d0
    c43c:	00007fe0 	.word	0x00007fe0
    c440:	0000b129 	.word	0x0000b129

0000c444 <setChannelIdStatus>:
{
    c444:	b510      	push	{r4, lr}
    uint8_t channelId = *(uint8_t *)attrInput;
    c446:	7808      	ldrb	r0, [r1, #0]
    if (channelId >= RegParams.maxChannels)
    c448:	232a      	movs	r3, #42	; 0x2a
    c44a:	4a05      	ldr	r2, [pc, #20]	; (c460 <setChannelIdStatus+0x1c>)
    c44c:	56d3      	ldrsb	r3, [r2, r3]
    c44e:	4298      	cmp	r0, r3
    c450:	db01      	blt.n	c456 <setChannelIdStatus+0x12>
		retVal = LORAWAN_INVALID_PARAMETER;
    c452:	200a      	movs	r0, #10
}
    c454:	bd10      	pop	{r4, pc}
		UpdateChannelIdStatus(updateChid.channelIndex,updateChid.statusNew);
    c456:	7849      	ldrb	r1, [r1, #1]
    c458:	4b02      	ldr	r3, [pc, #8]	; (c464 <setChannelIdStatus+0x20>)
    c45a:	4798      	blx	r3
	StackRetStatus_t retVal = LORAWAN_SUCCESS;
    c45c:	2008      	movs	r0, #8
	return retVal;
    c45e:	e7f9      	b.n	c454 <setChannelIdStatus+0x10>
    c460:	200024d0 	.word	0x200024d0
    c464:	0000a0f1 	.word	0x0000a0f1

0000c468 <ValidateDataRange>:
{
    c468:	b530      	push	{r4, r5, lr}
	uint8_t maxTxDR = RegParams.cmnParams.paramsType1.maxTxDR;
    c46a:	23a8      	movs	r3, #168	; 0xa8
    c46c:	005b      	lsls	r3, r3, #1
    c46e:	4a17      	ldr	r2, [pc, #92]	; (c4cc <ValidateDataRange+0x64>)
    c470:	5cd3      	ldrb	r3, [r2, r3]
	memcpy(&val_drange,attrInput,sizeof(ValUpdateDrange_t));
    c472:	784a      	ldrb	r2, [r1, #1]
	dataRateMax = (val_drange.dataRangeNew & FIRST_NIBBLE) >> SHIFT4;
    c474:	0914      	lsrs	r4, r2, #4
	    retVal = LORAWAN_INVALID_PARAMETER;	   
    c476:	200a      	movs	r0, #10
	if (dataRate > RegParams.cmnParams.paramsType1.maxTxDR)
    c478:	42a3      	cmp	r3, r4
    c47a:	d213      	bcs.n	c4a4 <ValidateDataRange+0x3c>
}
    c47c:	bd30      	pop	{r4, r5, pc}
	   ((chId >= RegParams.cmnParams.paramsType1.Max_125khzChan) && (chId < RegParams.maxChannels) && (dataRateMin != maxTxDR)) ||
    c47e:	202a      	movs	r0, #42	; 0x2a
    c480:	4d12      	ldr	r5, [pc, #72]	; (c4cc <ValidateDataRange+0x64>)
    c482:	562d      	ldrsb	r5, [r5, r0]
	StackRetStatus_t retVal = LORAWAN_SUCCESS;
    c484:	3822      	subs	r0, #34	; 0x22
	   ((chId >= RegParams.cmnParams.paramsType1.Max_125khzChan) && (chId < RegParams.maxChannels) && (dataRateMin != maxTxDR)) ||
    c486:	42a9      	cmp	r1, r5
    c488:	daf8      	bge.n	c47c <ValidateDataRange+0x14>
	    retVal = LORAWAN_INVALID_PARAMETER;	   
    c48a:	3002      	adds	r0, #2
	   ((chId >= RegParams.cmnParams.paramsType1.Max_125khzChan) && (chId < RegParams.maxChannels) && (dataRateMin != maxTxDR)) ||
    c48c:	4293      	cmp	r3, r2
    c48e:	d1f5      	bne.n	c47c <ValidateDataRange+0x14>
	   ((chId >= RegParams.cmnParams.paramsType1.Max_125khzChan) && (chId < RegParams.maxChannels) && (dataRateMax != maxTxDR)))
    c490:	42a3      	cmp	r3, r4
    c492:	d005      	beq.n	c4a0 <ValidateDataRange+0x38>
	    retVal = LORAWAN_INVALID_PARAMETER;	   
    c494:	200a      	movs	r0, #10
	return retVal;
    c496:	e7f1      	b.n	c47c <ValidateDataRange+0x14>
	    retVal = LORAWAN_INVALID_PARAMETER;	   
    c498:	200a      	movs	r0, #10
    c49a:	e7ef      	b.n	c47c <ValidateDataRange+0x14>
    c49c:	200a      	movs	r0, #10
    c49e:	e7ed      	b.n	c47c <ValidateDataRange+0x14>
	StackRetStatus_t retVal = LORAWAN_SUCCESS;
    c4a0:	2008      	movs	r0, #8
    c4a2:	e7eb      	b.n	c47c <ValidateDataRange+0x14>
	dataRateMin = val_drange.dataRangeNew & LAST_NIBBLE;
    c4a4:	200f      	movs	r0, #15
    c4a6:	4002      	ands	r2, r0
	    retVal = LORAWAN_INVALID_PARAMETER;	   
    c4a8:	3805      	subs	r0, #5
	if (dataRate > RegParams.cmnParams.paramsType1.maxTxDR)
    c4aa:	4293      	cmp	r3, r2
    c4ac:	d3e6      	bcc.n	c47c <ValidateDataRange+0x14>
	if((ValidateDataRateTxT1(TX_DATARATE, (void *)&dataRateMax) != LORAWAN_SUCCESS ) || (ValidateDataRateTxT1(TX_DATARATE, (void *)&dataRateMin) != LORAWAN_SUCCESS ) || dataRateMax < dataRateMin || 
    c4ae:	42a2      	cmp	r2, r4
    c4b0:	d8e4      	bhi.n	c47c <ValidateDataRange+0x14>
	memcpy(&val_drange,attrInput,sizeof(ValUpdateDrange_t));
    c4b2:	7809      	ldrb	r1, [r1, #0]
	   ((chId < RegParams.cmnParams.paramsType1.Max_125khzChan) && ((dataRateMin == maxTxDR) || (dataRateMax == maxTxDR))) || 
    c4b4:	2054      	movs	r0, #84	; 0x54
    c4b6:	30ff      	adds	r0, #255	; 0xff
	if((ValidateDataRateTxT1(TX_DATARATE, (void *)&dataRateMax) != LORAWAN_SUCCESS ) || (ValidateDataRateTxT1(TX_DATARATE, (void *)&dataRateMin) != LORAWAN_SUCCESS ) || dataRateMax < dataRateMin || 
    c4b8:	4d04      	ldr	r5, [pc, #16]	; (c4cc <ValidateDataRange+0x64>)
    c4ba:	5c28      	ldrb	r0, [r5, r0]
    c4bc:	4288      	cmp	r0, r1
    c4be:	d9de      	bls.n	c47e <ValidateDataRange+0x16>
	   ((chId < RegParams.cmnParams.paramsType1.Max_125khzChan) && ((dataRateMin == maxTxDR) || (dataRateMax == maxTxDR))) || 
    c4c0:	4293      	cmp	r3, r2
    c4c2:	d0e9      	beq.n	c498 <ValidateDataRange+0x30>
    c4c4:	42a3      	cmp	r3, r4
    c4c6:	d0e9      	beq.n	c49c <ValidateDataRange+0x34>
	StackRetStatus_t retVal = LORAWAN_SUCCESS;
    c4c8:	2008      	movs	r0, #8
    c4ca:	e7d7      	b.n	c47c <ValidateDataRange+0x14>
    c4cc:	200024d0 	.word	0x200024d0

0000c4d0 <setDataRange>:
{
    c4d0:	b570      	push	{r4, r5, r6, lr}
    c4d2:	000d      	movs	r5, r1
	if((ValidateDataRange(DATA_RANGE, attrInput) != LORAWAN_SUCCESS) || (ValidateChannelId(CHANNEL_ID, &update_dr.channelIndex) != LORAWAN_SUCCESS))
    c4d4:	2012      	movs	r0, #18
    c4d6:	4b15      	ldr	r3, [pc, #84]	; (c52c <setDataRange+0x5c>)
    c4d8:	4798      	blx	r3
    c4da:	0004      	movs	r4, r0
    c4dc:	2808      	cmp	r0, #8
    c4de:	d002      	beq.n	c4e6 <setDataRange+0x16>
		retVal = LORAWAN_INVALID_PARAMETER;
    c4e0:	240a      	movs	r4, #10
}
    c4e2:	0020      	movs	r0, r4
    c4e4:	bd70      	pop	{r4, r5, r6, pc}
	memcpy((void *)&update_dr,attrInput,sizeof(ValUpdateDrange_t));
    c4e6:	782b      	ldrb	r3, [r5, #0]
    if (channelId >= RegParams.maxChannels)
    c4e8:	222a      	movs	r2, #42	; 0x2a
    c4ea:	4911      	ldr	r1, [pc, #68]	; (c530 <setDataRange+0x60>)
    c4ec:	568a      	ldrsb	r2, [r1, r2]
    c4ee:	4293      	cmp	r3, r2
    c4f0:	db01      	blt.n	c4f6 <setDataRange+0x26>
		retVal = LORAWAN_INVALID_PARAMETER;
    c4f2:	3402      	adds	r4, #2
    c4f4:	e7f5      	b.n	c4e2 <setDataRange+0x12>
	memcpy((void *)&update_dr,attrInput,sizeof(ValUpdateDrange_t));
    c4f6:	786d      	ldrb	r5, [r5, #1]
		RegParams.pChParams[update_dr.channelIndex].dataRange.value = update_dr.dataRangeNew;
    c4f8:	4a0d      	ldr	r2, [pc, #52]	; (c530 <setDataRange+0x60>)
    c4fa:	7911      	ldrb	r1, [r2, #4]
    c4fc:	7950      	ldrb	r0, [r2, #5]
    c4fe:	0200      	lsls	r0, r0, #8
    c500:	4308      	orrs	r0, r1
    c502:	7991      	ldrb	r1, [r2, #6]
    c504:	0409      	lsls	r1, r1, #16
    c506:	4308      	orrs	r0, r1
    c508:	79d1      	ldrb	r1, [r2, #7]
    c50a:	0609      	lsls	r1, r1, #24
    c50c:	4301      	orrs	r1, r0
    c50e:	005b      	lsls	r3, r3, #1
    c510:	185b      	adds	r3, r3, r1
    c512:	705d      	strb	r5, [r3, #1]
		PDS_STORE(RegParams.regParamItems.ch_param_1_item_id);
    c514:	4b07      	ldr	r3, [pc, #28]	; (c534 <setDataRange+0x64>)
    c516:	5cd3      	ldrb	r3, [r2, r3]
    c518:	4907      	ldr	r1, [pc, #28]	; (c538 <setDataRange+0x68>)
    c51a:	5c50      	ldrb	r0, [r2, r1]
    c51c:	0200      	lsls	r0, r0, #8
    c51e:	4318      	orrs	r0, r3
    c520:	b2c1      	uxtb	r1, r0
    c522:	0a00      	lsrs	r0, r0, #8
    c524:	4b05      	ldr	r3, [pc, #20]	; (c53c <setDataRange+0x6c>)
    c526:	4798      	blx	r3
	return retVal;
    c528:	e7db      	b.n	c4e2 <setDataRange+0x12>
    c52a:	46c0      	nop			; (mov r8, r8)
    c52c:	0000c469 	.word	0x0000c469
    c530:	200024d0 	.word	0x200024d0
    c534:	0000020e 	.word	0x0000020e
    c538:	0000020f 	.word	0x0000020f
    c53c:	0000dfe1 	.word	0x0000dfe1

0000c540 <LORAREG_GetAttr_RxWindowSizeT1>:
{
    c540:	b570      	push	{r4, r5, r6, lr}
    c542:	0015      	movs	r5, r2
	dataRate = *(uint8_t *)attrInput;
    c544:	780c      	ldrb	r4, [r1, #0]
	if (dataRate > RegParams.cmnParams.paramsType1.maxTxDR)
    c546:	23a8      	movs	r3, #168	; 0xa8
    c548:	005b      	lsls	r3, r3, #1
    c54a:	4a0f      	ldr	r2, [pc, #60]	; (c588 <LORAREG_GetAttr_RxWindowSizeT1+0x48>)
    c54c:	5cd3      	ldrb	r3, [r2, r3]
    c54e:	42a3      	cmp	r3, r4
    c550:	d205      	bcs.n	c55e <LORAREG_GetAttr_RxWindowSizeT1+0x1e>
	if((ValidateDataRateTxT1(TX_DATARATE, attrInput) != LORAWAN_SUCCESS) && (ValidateDataRateRxT1(RX_DATARATE, attrInput) != LORAWAN_SUCCESS))
    c552:	200f      	movs	r0, #15
    c554:	4b0d      	ldr	r3, [pc, #52]	; (c58c <LORAREG_GetAttr_RxWindowSizeT1+0x4c>)
    c556:	4798      	blx	r3
		return LORAWAN_INVALID_PARAMETER;
    c558:	230a      	movs	r3, #10
	if((ValidateDataRateTxT1(TX_DATARATE, attrInput) != LORAWAN_SUCCESS) && (ValidateDataRateRxT1(RX_DATARATE, attrInput) != LORAWAN_SUCCESS))
    c55a:	2808      	cmp	r0, #8
    c55c:	d112      	bne.n	c584 <LORAREG_GetAttr_RxWindowSizeT1+0x44>
	    *(uint16_t *)attrOutput = RegParams.pDrParams[dataRate].rxWindowSize;	
    c55e:	490a      	ldr	r1, [pc, #40]	; (c588 <LORAREG_GetAttr_RxWindowSizeT1+0x48>)
    c560:	780b      	ldrb	r3, [r1, #0]
    c562:	784a      	ldrb	r2, [r1, #1]
    c564:	0212      	lsls	r2, r2, #8
    c566:	431a      	orrs	r2, r3
    c568:	788b      	ldrb	r3, [r1, #2]
    c56a:	041b      	lsls	r3, r3, #16
    c56c:	431a      	orrs	r2, r3
    c56e:	78cb      	ldrb	r3, [r1, #3]
    c570:	061b      	lsls	r3, r3, #24
    c572:	4313      	orrs	r3, r2
    c574:	00e4      	lsls	r4, r4, #3
    c576:	5ce2      	ldrb	r2, [r4, r3]
    c578:	18e4      	adds	r4, r4, r3
    c57a:	7863      	ldrb	r3, [r4, #1]
    c57c:	021b      	lsls	r3, r3, #8
    c57e:	4313      	orrs	r3, r2
    c580:	802b      	strh	r3, [r5, #0]
	return result;
    c582:	2308      	movs	r3, #8
}
    c584:	0018      	movs	r0, r3
    c586:	bd70      	pop	{r4, r5, r6, pc}
    c588:	200024d0 	.word	0x200024d0
    c58c:	000098d5 	.word	0x000098d5

0000c590 <LORAREG_GetAttr_RxWindowOffsetT1>:
{
    c590:	b570      	push	{r4, r5, r6, lr}
    c592:	0015      	movs	r5, r2
	dataRate = *(uint8_t *)attrInput;
    c594:	780c      	ldrb	r4, [r1, #0]
	if (dataRate > RegParams.cmnParams.paramsType1.maxTxDR)
    c596:	23a8      	movs	r3, #168	; 0xa8
    c598:	005b      	lsls	r3, r3, #1
    c59a:	4a0e      	ldr	r2, [pc, #56]	; (c5d4 <LORAREG_GetAttr_RxWindowOffsetT1+0x44>)
    c59c:	5cd3      	ldrb	r3, [r2, r3]
    c59e:	42a3      	cmp	r3, r4
    c5a0:	d205      	bcs.n	c5ae <LORAREG_GetAttr_RxWindowOffsetT1+0x1e>
	if((ValidateDataRateTxT1(TX_DATARATE, attrInput) != LORAWAN_SUCCESS) && (ValidateDataRateRxT1(RX_DATARATE, attrInput) != LORAWAN_SUCCESS))
    c5a2:	200f      	movs	r0, #15
    c5a4:	4b0c      	ldr	r3, [pc, #48]	; (c5d8 <LORAREG_GetAttr_RxWindowOffsetT1+0x48>)
    c5a6:	4798      	blx	r3
		return LORAWAN_INVALID_PARAMETER;
    c5a8:	230a      	movs	r3, #10
	if((ValidateDataRateTxT1(TX_DATARATE, attrInput) != LORAWAN_SUCCESS) && (ValidateDataRateRxT1(RX_DATARATE, attrInput) != LORAWAN_SUCCESS))
    c5aa:	2808      	cmp	r0, #8
    c5ac:	d110      	bne.n	c5d0 <LORAREG_GetAttr_RxWindowOffsetT1+0x40>
		*(int8_t *)attrOutput = RegParams.pDrParams[dataRate].rxWindowOffset;
    c5ae:	4909      	ldr	r1, [pc, #36]	; (c5d4 <LORAREG_GetAttr_RxWindowOffsetT1+0x44>)
    c5b0:	780b      	ldrb	r3, [r1, #0]
    c5b2:	784a      	ldrb	r2, [r1, #1]
    c5b4:	0212      	lsls	r2, r2, #8
    c5b6:	431a      	orrs	r2, r3
    c5b8:	788b      	ldrb	r3, [r1, #2]
    c5ba:	041b      	lsls	r3, r3, #16
    c5bc:	431a      	orrs	r2, r3
    c5be:	78cb      	ldrb	r3, [r1, #3]
    c5c0:	061b      	lsls	r3, r3, #24
    c5c2:	4313      	orrs	r3, r2
    c5c4:	00e4      	lsls	r4, r4, #3
    c5c6:	18e3      	adds	r3, r4, r3
    c5c8:	791b      	ldrb	r3, [r3, #4]
    c5ca:	b25b      	sxtb	r3, r3
    c5cc:	702b      	strb	r3, [r5, #0]
	return result;
    c5ce:	2308      	movs	r3, #8
}
    c5d0:	0018      	movs	r0, r3
    c5d2:	bd70      	pop	{r4, r5, r6, pc}
    c5d4:	200024d0 	.word	0x200024d0
    c5d8:	000098d5 	.word	0x000098d5

0000c5dc <LORAREG_GetAttr_MaxPayloadT1>:
{
    c5dc:	b570      	push	{r4, r5, r6, lr}
    c5de:	0015      	movs	r5, r2
	dataRate = *(uint8_t *)attrInput;
    c5e0:	780c      	ldrb	r4, [r1, #0]
	if (dataRate > RegParams.cmnParams.paramsType1.maxTxDR)
    c5e2:	23a8      	movs	r3, #168	; 0xa8
    c5e4:	005b      	lsls	r3, r3, #1
    c5e6:	4a0e      	ldr	r2, [pc, #56]	; (c620 <LORAREG_GetAttr_MaxPayloadT1+0x44>)
    c5e8:	5cd3      	ldrb	r3, [r2, r3]
    c5ea:	42a3      	cmp	r3, r4
    c5ec:	d205      	bcs.n	c5fa <LORAREG_GetAttr_MaxPayloadT1+0x1e>
	if((ValidateDataRateTxT1(TX_DATARATE, attrInput) != LORAWAN_SUCCESS) && (ValidateDataRateRxT1(RX_DATARATE, attrInput) != LORAWAN_SUCCESS))
    c5ee:	200f      	movs	r0, #15
    c5f0:	4b0c      	ldr	r3, [pc, #48]	; (c624 <LORAREG_GetAttr_MaxPayloadT1+0x48>)
    c5f2:	4798      	blx	r3
		result =  LORAWAN_INVALID_PARAMETER;
    c5f4:	230a      	movs	r3, #10
	if((ValidateDataRateTxT1(TX_DATARATE, attrInput) != LORAWAN_SUCCESS) && (ValidateDataRateRxT1(RX_DATARATE, attrInput) != LORAWAN_SUCCESS))
    c5f6:	2808      	cmp	r0, #8
    c5f8:	d10f      	bne.n	c61a <LORAREG_GetAttr_MaxPayloadT1+0x3e>
		*(uint8_t *)attrOutput = RegParams.pDrParams[dataRate].maxPayloadSizeDt0;
    c5fa:	4909      	ldr	r1, [pc, #36]	; (c620 <LORAREG_GetAttr_MaxPayloadT1+0x44>)
    c5fc:	780b      	ldrb	r3, [r1, #0]
    c5fe:	784a      	ldrb	r2, [r1, #1]
    c600:	0212      	lsls	r2, r2, #8
    c602:	431a      	orrs	r2, r3
    c604:	788b      	ldrb	r3, [r1, #2]
    c606:	041b      	lsls	r3, r3, #16
    c608:	431a      	orrs	r2, r3
    c60a:	78cb      	ldrb	r3, [r1, #3]
    c60c:	061b      	lsls	r3, r3, #24
    c60e:	4313      	orrs	r3, r2
    c610:	00e4      	lsls	r4, r4, #3
    c612:	18e3      	adds	r3, r4, r3
    c614:	789b      	ldrb	r3, [r3, #2]
    c616:	702b      	strb	r3, [r5, #0]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    c618:	2308      	movs	r3, #8
}
    c61a:	0018      	movs	r0, r3
    c61c:	bd70      	pop	{r4, r5, r6, pc}
    c61e:	46c0      	nop			; (mov r8, r8)
    c620:	200024d0 	.word	0x200024d0
    c624:	000098d5 	.word	0x000098d5

0000c628 <LORAREG_GetAttr_ModulationAttrT1>:
{
    c628:	b570      	push	{r4, r5, r6, lr}
    c62a:	0015      	movs	r5, r2
	dataRate = *(uint8_t *)attrInput;
    c62c:	780c      	ldrb	r4, [r1, #0]
	if (dataRate > RegParams.cmnParams.paramsType1.maxTxDR)
    c62e:	23a8      	movs	r3, #168	; 0xa8
    c630:	005b      	lsls	r3, r3, #1
    c632:	4a0e      	ldr	r2, [pc, #56]	; (c66c <LORAREG_GetAttr_ModulationAttrT1+0x44>)
    c634:	5cd3      	ldrb	r3, [r2, r3]
    c636:	42a3      	cmp	r3, r4
    c638:	d205      	bcs.n	c646 <LORAREG_GetAttr_ModulationAttrT1+0x1e>
	if((ValidateDataRateTxT1(TX_DATARATE, attrInput) != LORAWAN_SUCCESS) && (ValidateDataRateRxT1(RX_DATARATE, attrInput) != LORAWAN_SUCCESS))
    c63a:	200f      	movs	r0, #15
    c63c:	4b0c      	ldr	r3, [pc, #48]	; (c670 <LORAREG_GetAttr_ModulationAttrT1+0x48>)
    c63e:	4798      	blx	r3
		result = LORAWAN_INVALID_PARAMETER;
    c640:	230a      	movs	r3, #10
	if((ValidateDataRateTxT1(TX_DATARATE, attrInput) != LORAWAN_SUCCESS) && (ValidateDataRateRxT1(RX_DATARATE, attrInput) != LORAWAN_SUCCESS))
    c642:	2808      	cmp	r0, #8
    c644:	d10f      	bne.n	c666 <LORAREG_GetAttr_ModulationAttrT1+0x3e>
	    *(uint8_t *)attrOutput = RegParams.pDrParams[dataRate].modulation;
    c646:	4909      	ldr	r1, [pc, #36]	; (c66c <LORAREG_GetAttr_ModulationAttrT1+0x44>)
    c648:	780b      	ldrb	r3, [r1, #0]
    c64a:	784a      	ldrb	r2, [r1, #1]
    c64c:	0212      	lsls	r2, r2, #8
    c64e:	431a      	orrs	r2, r3
    c650:	788b      	ldrb	r3, [r1, #2]
    c652:	041b      	lsls	r3, r3, #16
    c654:	431a      	orrs	r2, r3
    c656:	78cb      	ldrb	r3, [r1, #3]
    c658:	061b      	lsls	r3, r3, #24
    c65a:	4313      	orrs	r3, r2
    c65c:	00e4      	lsls	r4, r4, #3
    c65e:	18e3      	adds	r3, r4, r3
    c660:	79db      	ldrb	r3, [r3, #7]
    c662:	702b      	strb	r3, [r5, #0]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    c664:	2308      	movs	r3, #8
}
    c666:	0018      	movs	r0, r3
    c668:	bd70      	pop	{r4, r5, r6, pc}
    c66a:	46c0      	nop			; (mov r8, r8)
    c66c:	200024d0 	.word	0x200024d0
    c670:	000098d5 	.word	0x000098d5

0000c674 <LORAREG_GetAttr_BandwidthAttrT1>:
{
    c674:	b570      	push	{r4, r5, r6, lr}
    c676:	0015      	movs	r5, r2
	dataRate = *(uint8_t *)attrInput;
    c678:	780c      	ldrb	r4, [r1, #0]
	if (dataRate > RegParams.cmnParams.paramsType1.maxTxDR)
    c67a:	23a8      	movs	r3, #168	; 0xa8
    c67c:	005b      	lsls	r3, r3, #1
    c67e:	4a0e      	ldr	r2, [pc, #56]	; (c6b8 <LORAREG_GetAttr_BandwidthAttrT1+0x44>)
    c680:	5cd3      	ldrb	r3, [r2, r3]
    c682:	42a3      	cmp	r3, r4
    c684:	d205      	bcs.n	c692 <LORAREG_GetAttr_BandwidthAttrT1+0x1e>
	if((ValidateDataRateTxT1(TX_DATARATE, attrInput) != LORAWAN_SUCCESS) && (ValidateDataRateRxT1(RX_DATARATE, attrInput) != LORAWAN_SUCCESS))
    c686:	200f      	movs	r0, #15
    c688:	4b0c      	ldr	r3, [pc, #48]	; (c6bc <LORAREG_GetAttr_BandwidthAttrT1+0x48>)
    c68a:	4798      	blx	r3
		result = LORAWAN_INVALID_PARAMETER;
    c68c:	230a      	movs	r3, #10
	if((ValidateDataRateTxT1(TX_DATARATE, attrInput) != LORAWAN_SUCCESS) && (ValidateDataRateRxT1(RX_DATARATE, attrInput) != LORAWAN_SUCCESS))
    c68e:	2808      	cmp	r0, #8
    c690:	d10f      	bne.n	c6b2 <LORAREG_GetAttr_BandwidthAttrT1+0x3e>
		*(uint8_t *)attrOutput = RegParams.pDrParams[dataRate].bandwidth;
    c692:	4909      	ldr	r1, [pc, #36]	; (c6b8 <LORAREG_GetAttr_BandwidthAttrT1+0x44>)
    c694:	780b      	ldrb	r3, [r1, #0]
    c696:	784a      	ldrb	r2, [r1, #1]
    c698:	0212      	lsls	r2, r2, #8
    c69a:	431a      	orrs	r2, r3
    c69c:	788b      	ldrb	r3, [r1, #2]
    c69e:	041b      	lsls	r3, r3, #16
    c6a0:	431a      	orrs	r2, r3
    c6a2:	78cb      	ldrb	r3, [r1, #3]
    c6a4:	061b      	lsls	r3, r3, #24
    c6a6:	4313      	orrs	r3, r2
    c6a8:	00e4      	lsls	r4, r4, #3
    c6aa:	18e3      	adds	r3, r4, r3
    c6ac:	799b      	ldrb	r3, [r3, #6]
    c6ae:	702b      	strb	r3, [r5, #0]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    c6b0:	2308      	movs	r3, #8
}
    c6b2:	0018      	movs	r0, r3
    c6b4:	bd70      	pop	{r4, r5, r6, pc}
    c6b6:	46c0      	nop			; (mov r8, r8)
    c6b8:	200024d0 	.word	0x200024d0
    c6bc:	000098d5 	.word	0x000098d5

0000c6c0 <LORAREG_GetAttr_SpreadFactorT1>:
{
    c6c0:	b570      	push	{r4, r5, r6, lr}
    c6c2:	0015      	movs	r5, r2
	dataRate = *(uint8_t *)attrInput;
    c6c4:	780c      	ldrb	r4, [r1, #0]
	if (dataRate > RegParams.cmnParams.paramsType1.maxTxDR)
    c6c6:	23a8      	movs	r3, #168	; 0xa8
    c6c8:	005b      	lsls	r3, r3, #1
    c6ca:	4a0e      	ldr	r2, [pc, #56]	; (c704 <LORAREG_GetAttr_SpreadFactorT1+0x44>)
    c6cc:	5cd3      	ldrb	r3, [r2, r3]
    c6ce:	42a3      	cmp	r3, r4
    c6d0:	d205      	bcs.n	c6de <LORAREG_GetAttr_SpreadFactorT1+0x1e>
	if((ValidateDataRateTxT1(TX_DATARATE, attrInput) != LORAWAN_SUCCESS) && (ValidateDataRateRxT1(RX_DATARATE, attrInput) != LORAWAN_SUCCESS))
    c6d2:	200f      	movs	r0, #15
    c6d4:	4b0c      	ldr	r3, [pc, #48]	; (c708 <LORAREG_GetAttr_SpreadFactorT1+0x48>)
    c6d6:	4798      	blx	r3
		result =  LORAWAN_INVALID_PARAMETER;
    c6d8:	230a      	movs	r3, #10
	if((ValidateDataRateTxT1(TX_DATARATE, attrInput) != LORAWAN_SUCCESS) && (ValidateDataRateRxT1(RX_DATARATE, attrInput) != LORAWAN_SUCCESS))
    c6da:	2808      	cmp	r0, #8
    c6dc:	d10f      	bne.n	c6fe <LORAREG_GetAttr_SpreadFactorT1+0x3e>
		*(RadioDataRate_t *)attrOutput = RegParams.pDrParams[dataRate].spreadingFactor;
    c6de:	4909      	ldr	r1, [pc, #36]	; (c704 <LORAREG_GetAttr_SpreadFactorT1+0x44>)
    c6e0:	780b      	ldrb	r3, [r1, #0]
    c6e2:	784a      	ldrb	r2, [r1, #1]
    c6e4:	0212      	lsls	r2, r2, #8
    c6e6:	431a      	orrs	r2, r3
    c6e8:	788b      	ldrb	r3, [r1, #2]
    c6ea:	041b      	lsls	r3, r3, #16
    c6ec:	431a      	orrs	r2, r3
    c6ee:	78cb      	ldrb	r3, [r1, #3]
    c6f0:	061b      	lsls	r3, r3, #24
    c6f2:	4313      	orrs	r3, r2
    c6f4:	00e4      	lsls	r4, r4, #3
    c6f6:	18e3      	adds	r3, r4, r3
    c6f8:	795b      	ldrb	r3, [r3, #5]
    c6fa:	702b      	strb	r3, [r5, #0]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    c6fc:	2308      	movs	r3, #8
}
    c6fe:	0018      	movs	r0, r3
    c700:	bd70      	pop	{r4, r5, r6, pc}
    c702:	46c0      	nop			; (mov r8, r8)
    c704:	200024d0 	.word	0x200024d0
    c708:	000098d5 	.word	0x000098d5

0000c70c <ValidateTxFreqT1>:
{
    c70c:	b530      	push	{r4, r5, lr}
    c70e:	b083      	sub	sp, #12
	memcpy(&val_freqTx,attrInput,sizeof(ValUpdateFreqTx_t));
    c710:	2208      	movs	r2, #8
    c712:	4668      	mov	r0, sp
    c714:	4b20      	ldr	r3, [pc, #128]	; (c798 <ValidateTxFreqT1+0x8c>)
    c716:	4798      	blx	r3
	if(ChIndex > RegParams.maxChannels)
    c718:	466b      	mov	r3, sp
    c71a:	7919      	ldrb	r1, [r3, #4]
    c71c:	232a      	movs	r3, #42	; 0x2a
    c71e:	4a1f      	ldr	r2, [pc, #124]	; (c79c <ValidateTxFreqT1+0x90>)
    c720:	56d3      	ldrsb	r3, [r2, r3]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    c722:	2008      	movs	r0, #8
	if(ChIndex > RegParams.maxChannels)
    c724:	4299      	cmp	r1, r3
    c726:	dd00      	ble.n	c72a <ValidateTxFreqT1+0x1e>
		result = LORAWAN_INVALID_PARAMETER;
    c728:	3002      	adds	r0, #2
	if(val_freqTx.frequencyNew != GenerateFrequency1(ChIndex) && 
    c72a:	9c00      	ldr	r4, [sp, #0]
    channelFrequency = RegParams.cmnParams.paramsType1.UpStreamCh0Freq + FREQ_200KHZ * channelIndex;
    c72c:	4d1b      	ldr	r5, [pc, #108]	; (c79c <ValidateTxFreqT1+0x90>)
    c72e:	2344      	movs	r3, #68	; 0x44
    c730:	33ff      	adds	r3, #255	; 0xff
    c732:	5ceb      	ldrb	r3, [r5, r3]
    c734:	22a2      	movs	r2, #162	; 0xa2
    c736:	0052      	lsls	r2, r2, #1
    c738:	5caa      	ldrb	r2, [r5, r2]
    c73a:	0212      	lsls	r2, r2, #8
    c73c:	431a      	orrs	r2, r3
    c73e:	2346      	movs	r3, #70	; 0x46
    c740:	33ff      	adds	r3, #255	; 0xff
    c742:	5ceb      	ldrb	r3, [r5, r3]
    c744:	041b      	lsls	r3, r3, #16
    c746:	431a      	orrs	r2, r3
    c748:	23a3      	movs	r3, #163	; 0xa3
    c74a:	005b      	lsls	r3, r3, #1
    c74c:	5ceb      	ldrb	r3, [r5, r3]
    c74e:	061b      	lsls	r3, r3, #24
    c750:	4313      	orrs	r3, r2
    c752:	4a13      	ldr	r2, [pc, #76]	; (c7a0 <ValidateTxFreqT1+0x94>)
    c754:	434a      	muls	r2, r1
    c756:	189b      	adds	r3, r3, r2
	if(val_freqTx.frequencyNew != GenerateFrequency1(ChIndex) && 
    c758:	429c      	cmp	r4, r3
    c75a:	d01b      	beq.n	c794 <ValidateTxFreqT1+0x88>
	                   FREQ_1600KHZ * (channelIndex - RegParams.cmnParams.paramsType1.Max_125khzChan);
    c75c:	2354      	movs	r3, #84	; 0x54
    c75e:	33ff      	adds	r3, #255	; 0xff
    c760:	5ceb      	ldrb	r3, [r5, r3]
    c762:	1ac9      	subs	r1, r1, r3
    c764:	4b0f      	ldr	r3, [pc, #60]	; (c7a4 <ValidateTxFreqT1+0x98>)
    c766:	4359      	muls	r1, r3
    channelFrequency = RegParams.cmnParams.paramsType1.UpStreamCh64Freq + 
    c768:	2348      	movs	r3, #72	; 0x48
    c76a:	33ff      	adds	r3, #255	; 0xff
    c76c:	5ceb      	ldrb	r3, [r5, r3]
    c76e:	22a4      	movs	r2, #164	; 0xa4
    c770:	0052      	lsls	r2, r2, #1
    c772:	5caa      	ldrb	r2, [r5, r2]
    c774:	0212      	lsls	r2, r2, #8
    c776:	4313      	orrs	r3, r2
    c778:	224a      	movs	r2, #74	; 0x4a
    c77a:	32ff      	adds	r2, #255	; 0xff
    c77c:	5caa      	ldrb	r2, [r5, r2]
    c77e:	0412      	lsls	r2, r2, #16
    c780:	431a      	orrs	r2, r3
    c782:	23a5      	movs	r3, #165	; 0xa5
    c784:	005b      	lsls	r3, r3, #1
    c786:	5ceb      	ldrb	r3, [r5, r3]
    c788:	061b      	lsls	r3, r3, #24
    c78a:	4313      	orrs	r3, r2
    c78c:	18cb      	adds	r3, r1, r3
	if(val_freqTx.frequencyNew != GenerateFrequency1(ChIndex) && 
    c78e:	429c      	cmp	r4, r3
    c790:	d000      	beq.n	c794 <ValidateTxFreqT1+0x88>
		result = LORAWAN_INVALID_PARAMETER;
    c792:	200a      	movs	r0, #10
}
    c794:	b003      	add	sp, #12
    c796:	bd30      	pop	{r4, r5, pc}
    c798:	00019d11 	.word	0x00019d11
    c79c:	200024d0 	.word	0x200024d0
    c7a0:	00030d40 	.word	0x00030d40
    c7a4:	00186a00 	.word	0x00186a00

0000c7a8 <LORAREG_GetAttr_NewTxChConfigT1>:
{
    c7a8:	b5f0      	push	{r4, r5, r6, r7, lr}
    c7aa:	46ce      	mov	lr, r9
    c7ac:	4647      	mov	r7, r8
    c7ae:	b580      	push	{r7, lr}
    c7b0:	b083      	sub	sp, #12
    c7b2:	0016      	movs	r6, r2
	memcpy(&newTxChannelReq,(NewTxChannelReq_t *)attrInput,sizeof(NewTxChannelReq_t));
    c7b4:	788d      	ldrb	r5, [r1, #2]
	if (dataRate > RegParams.cmnParams.paramsType1.maxTxDR)
    c7b6:	23a8      	movs	r3, #168	; 0xa8
    c7b8:	005b      	lsls	r3, r3, #1
    c7ba:	4a63      	ldr	r2, [pc, #396]	; (c948 <LORAREG_GetAttr_NewTxChConfigT1+0x1a0>)
    c7bc:	5cd3      	ldrb	r3, [r2, r3]
		result = LORAWAN_INVALID_PARAMETER;
    c7be:	240a      	movs	r4, #10
	if (dataRate > RegParams.cmnParams.paramsType1.maxTxDR)
    c7c0:	42ab      	cmp	r3, r5
    c7c2:	d300      	bcc.n	c7c6 <LORAREG_GetAttr_NewTxChConfigT1+0x1e>
    c7c4:	e09a      	b.n	c8fc <LORAREG_GetAttr_NewTxChConfigT1+0x154>
}
    c7c6:	0020      	movs	r0, r4
    c7c8:	b003      	add	sp, #12
    c7ca:	bc0c      	pop	{r2, r3}
    c7cc:	4690      	mov	r8, r2
    c7ce:	4699      	mov	r9, r3
    c7d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		result = SearchAvailableChannel1 (RegParams.maxChannels, transmissionType,currDr, &channelIndex);
    c7d2:	4b5d      	ldr	r3, [pc, #372]	; (c948 <LORAREG_GetAttr_NewTxChConfigT1+0x1a0>)
    c7d4:	4699      	mov	r9, r3
    c7d6:	232a      	movs	r3, #42	; 0x2a
    c7d8:	464a      	mov	r2, r9
    c7da:	5cd0      	ldrb	r0, [r2, r3]
    c7dc:	466b      	mov	r3, sp
    c7de:	3307      	adds	r3, #7
    c7e0:	002a      	movs	r2, r5
    c7e2:	2101      	movs	r1, #1
    c7e4:	4c59      	ldr	r4, [pc, #356]	; (c94c <LORAREG_GetAttr_NewTxChConfigT1+0x1a4>)
    c7e6:	47a0      	blx	r4
    c7e8:	0004      	movs	r4, r0
		radioConfig->sf = RegParams.pDrParams[currDr].spreadingFactor;
    c7ea:	464b      	mov	r3, r9
    c7ec:	781b      	ldrb	r3, [r3, #0]
    c7ee:	464a      	mov	r2, r9
    c7f0:	7852      	ldrb	r2, [r2, #1]
    c7f2:	0212      	lsls	r2, r2, #8
    c7f4:	431a      	orrs	r2, r3
    c7f6:	464b      	mov	r3, r9
    c7f8:	789b      	ldrb	r3, [r3, #2]
    c7fa:	041b      	lsls	r3, r3, #16
    c7fc:	431a      	orrs	r2, r3
    c7fe:	464b      	mov	r3, r9
    c800:	78db      	ldrb	r3, [r3, #3]
    c802:	061b      	lsls	r3, r3, #24
    c804:	4313      	orrs	r3, r2
    c806:	00ed      	lsls	r5, r5, #3
    c808:	18eb      	adds	r3, r5, r3
    c80a:	795b      	ldrb	r3, [r3, #5]
    c80c:	72f3      	strb	r3, [r6, #11]
	if (result == LORAWAN_SUCCESS)
    c80e:	2c08      	cmp	r4, #8
    c810:	d1d9      	bne.n	c7c6 <LORAREG_GetAttr_NewTxChConfigT1+0x1e>
	uint8_t txPower = RegParams.maxTxPwr - 2 * txPwrIndx;
    c812:	007f      	lsls	r7, r7, #1
    c814:	4643      	mov	r3, r8
    c816:	1bdb      	subs	r3, r3, r7
    c818:	b2db      	uxtb	r3, r3
		if (channelIndex < RegParams.cmnParams.paramsType1.Max_125khzChan)
    c81a:	466a      	mov	r2, sp
    c81c:	3207      	adds	r2, #7
    c81e:	7812      	ldrb	r2, [r2, #0]
    c820:	2154      	movs	r1, #84	; 0x54
    c822:	31ff      	adds	r1, #255	; 0xff
    c824:	4848      	ldr	r0, [pc, #288]	; (c948 <LORAREG_GetAttr_NewTxChConfigT1+0x1a0>)
    c826:	5c41      	ldrb	r1, [r0, r1]
    c828:	4291      	cmp	r1, r2
    c82a:	d93c      	bls.n	c8a6 <LORAREG_GetAttr_NewTxChConfigT1+0xfe>
			radioConfig->bandwidth = BW_125KHZ;
    c82c:	2107      	movs	r1, #7
    c82e:	72b1      	strb	r1, [r6, #10]
    channelFrequency = RegParams.cmnParams.paramsType1.UpStreamCh0Freq + FREQ_200KHZ * channelIndex;
    c830:	2144      	movs	r1, #68	; 0x44
    c832:	31ff      	adds	r1, #255	; 0xff
    c834:	5c41      	ldrb	r1, [r0, r1]
    c836:	25a2      	movs	r5, #162	; 0xa2
    c838:	006d      	lsls	r5, r5, #1
    c83a:	5d45      	ldrb	r5, [r0, r5]
    c83c:	022d      	lsls	r5, r5, #8
    c83e:	430d      	orrs	r5, r1
    c840:	2146      	movs	r1, #70	; 0x46
    c842:	31ff      	adds	r1, #255	; 0xff
    c844:	5c41      	ldrb	r1, [r0, r1]
    c846:	0409      	lsls	r1, r1, #16
    c848:	430d      	orrs	r5, r1
    c84a:	21a3      	movs	r1, #163	; 0xa3
    c84c:	0049      	lsls	r1, r1, #1
    c84e:	5c41      	ldrb	r1, [r0, r1]
    c850:	0609      	lsls	r1, r1, #24
    c852:	4329      	orrs	r1, r5
    c854:	4d3e      	ldr	r5, [pc, #248]	; (c950 <LORAREG_GetAttr_NewTxChConfigT1+0x1a8>)
    c856:	436a      	muls	r2, r5
    c858:	188a      	adds	r2, r1, r2
			radioConfig->frequency = GenerateFrequency1 (channelIndex);
    c85a:	6032      	str	r2, [r6, #0]
			radioConfig->txPower = txPower;
    c85c:	7233      	strb	r3, [r6, #8]
			if(RegParams.band == ISM_NA915)
    c85e:	232e      	movs	r3, #46	; 0x2e
    c860:	5cc3      	ldrb	r3, [r0, r3]
    c862:	2b02      	cmp	r3, #2
    c864:	d01b      	beq.n	c89e <LORAREG_GetAttr_NewTxChConfigT1+0xf6>
		radioConfig->freq_hop_period = DISABLED;
    c866:	2300      	movs	r3, #0
    c868:	80b3      	strh	r3, [r6, #4]
		radioConfig->modulation = MODULATION_LORA;
    c86a:	3301      	adds	r3, #1
    c86c:	7273      	strb	r3, [r6, #9]
		RegParams.lastUsedChannelIndex = channelIndex;
    c86e:	466b      	mov	r3, sp
    c870:	79d9      	ldrb	r1, [r3, #7]
    c872:	232f      	movs	r3, #47	; 0x2f
    c874:	4a34      	ldr	r2, [pc, #208]	; (c948 <LORAREG_GetAttr_NewTxChConfigT1+0x1a0>)
    c876:	54d1      	strb	r1, [r2, r3]
    c878:	e7a5      	b.n	c7c6 <LORAREG_GetAttr_NewTxChConfigT1+0x1e>
				radioConfig->sf = SF_10;
    c87a:	3308      	adds	r3, #8
    c87c:	72f3      	strb	r3, [r6, #11]
    c87e:	e001      	b.n	c884 <LORAREG_GetAttr_NewTxChConfigT1+0xdc>
			radioConfig->sf = SF_8;
    c880:	2308      	movs	r3, #8
    c882:	72f3      	strb	r3, [r6, #11]
		PDS_STORE(RegParams.regParamItems.lastUsedSB);
    c884:	4b30      	ldr	r3, [pc, #192]	; (c948 <LORAREG_GetAttr_NewTxChConfigT1+0x1a0>)
    c886:	2283      	movs	r2, #131	; 0x83
    c888:	0092      	lsls	r2, r2, #2
    c88a:	5c9a      	ldrb	r2, [r3, r2]
    c88c:	4931      	ldr	r1, [pc, #196]	; (c954 <LORAREG_GetAttr_NewTxChConfigT1+0x1ac>)
    c88e:	5c58      	ldrb	r0, [r3, r1]
    c890:	0200      	lsls	r0, r0, #8
    c892:	4310      	orrs	r0, r2
    c894:	b2c1      	uxtb	r1, r0
    c896:	0a00      	lsrs	r0, r0, #8
    c898:	4b2f      	ldr	r3, [pc, #188]	; (c958 <LORAREG_GetAttr_NewTxChConfigT1+0x1b0>)
    c89a:	4798      	blx	r3
    c89c:	e7b7      	b.n	c80e <LORAREG_GetAttr_NewTxChConfigT1+0x66>
    			radioConfig->ecrConfig.override = true;
    c89e:	3b01      	subs	r3, #1
    c8a0:	71f3      	strb	r3, [r6, #7]
			    radioConfig->ecrConfig.ecr = CR_4_5;	 
    c8a2:	71b3      	strb	r3, [r6, #6]
    c8a4:	e7df      	b.n	c866 <LORAREG_GetAttr_NewTxChConfigT1+0xbe>
			radioConfig->bandwidth = BW_500KHZ;
    c8a6:	2109      	movs	r1, #9
    c8a8:	72b1      	strb	r1, [r6, #10]
	                   FREQ_1600KHZ * (channelIndex - RegParams.cmnParams.paramsType1.Max_125khzChan);
    c8aa:	4927      	ldr	r1, [pc, #156]	; (c948 <LORAREG_GetAttr_NewTxChConfigT1+0x1a0>)
    c8ac:	2054      	movs	r0, #84	; 0x54
    c8ae:	30ff      	adds	r0, #255	; 0xff
    c8b0:	5c08      	ldrb	r0, [r1, r0]
    c8b2:	1a12      	subs	r2, r2, r0
    c8b4:	4829      	ldr	r0, [pc, #164]	; (c95c <LORAREG_GetAttr_NewTxChConfigT1+0x1b4>)
    c8b6:	4342      	muls	r2, r0
    channelFrequency = RegParams.cmnParams.paramsType1.UpStreamCh64Freq + 
    c8b8:	2048      	movs	r0, #72	; 0x48
    c8ba:	30ff      	adds	r0, #255	; 0xff
    c8bc:	5c08      	ldrb	r0, [r1, r0]
    c8be:	25a4      	movs	r5, #164	; 0xa4
    c8c0:	006d      	lsls	r5, r5, #1
    c8c2:	5d4d      	ldrb	r5, [r1, r5]
    c8c4:	022d      	lsls	r5, r5, #8
    c8c6:	4305      	orrs	r5, r0
    c8c8:	204a      	movs	r0, #74	; 0x4a
    c8ca:	30ff      	adds	r0, #255	; 0xff
    c8cc:	5c08      	ldrb	r0, [r1, r0]
    c8ce:	0400      	lsls	r0, r0, #16
    c8d0:	4305      	orrs	r5, r0
    c8d2:	20a5      	movs	r0, #165	; 0xa5
    c8d4:	0040      	lsls	r0, r0, #1
    c8d6:	5c08      	ldrb	r0, [r1, r0]
    c8d8:	0600      	lsls	r0, r0, #24
    c8da:	4328      	orrs	r0, r5
    c8dc:	1812      	adds	r2, r2, r0
			radioConfig->frequency = GenerateFrequency2 (channelIndex);
    c8de:	6032      	str	r2, [r6, #0]
			if( RegParams.band == ISM_NA915)
    c8e0:	222e      	movs	r2, #46	; 0x2e
    c8e2:	5c8a      	ldrb	r2, [r1, r2]
    c8e4:	2a02      	cmp	r2, #2
    c8e6:	d003      	beq.n	c8f0 <LORAREG_GetAttr_NewTxChConfigT1+0x148>
			if (txPower <= 26)
    c8e8:	2b1a      	cmp	r3, #26
    c8ea:	d804      	bhi.n	c8f6 <LORAREG_GetAttr_NewTxChConfigT1+0x14e>
				radioConfig->txPower = txPower;
    c8ec:	7233      	strb	r3, [r6, #8]
    c8ee:	e7ba      	b.n	c866 <LORAREG_GetAttr_NewTxChConfigT1+0xbe>
			    radioConfig->ecrConfig.override = false;
    c8f0:	2200      	movs	r2, #0
    c8f2:	71f2      	strb	r2, [r6, #7]
    c8f4:	e7f8      	b.n	c8e8 <LORAREG_GetAttr_NewTxChConfigT1+0x140>
				radioConfig->txPower = 26;
    c8f6:	231a      	movs	r3, #26
    c8f8:	7233      	strb	r3, [r6, #8]
    c8fa:	e7b4      	b.n	c866 <LORAREG_GetAttr_NewTxChConfigT1+0xbe>
	memcpy(&newTxChannelReq,(NewTxChannelReq_t *)attrInput,sizeof(NewTxChannelReq_t));
    c8fc:	784f      	ldrb	r7, [r1, #1]
	if (txPowerNew > RegParams.maxTxPwrIndx)
    c8fe:	232d      	movs	r3, #45	; 0x2d
    c900:	4a11      	ldr	r2, [pc, #68]	; (c948 <LORAREG_GetAttr_NewTxChConfigT1+0x1a0>)
    c902:	56d3      	ldrsb	r3, [r2, r3]
		result = LORAWAN_INVALID_PARAMETER;
    c904:	240a      	movs	r4, #10
	if (txPowerNew > RegParams.maxTxPwrIndx)
    c906:	429f      	cmp	r7, r3
    c908:	dd00      	ble.n	c90c <LORAREG_GetAttr_NewTxChConfigT1+0x164>
    c90a:	e75c      	b.n	c7c6 <LORAREG_GetAttr_NewTxChConfigT1+0x1e>
	uint8_t txPower = RegParams.maxTxPwr - 2 * txPwrIndx;
    c90c:	2328      	movs	r3, #40	; 0x28
    c90e:	5cd3      	ldrb	r3, [r2, r3]
    c910:	4698      	mov	r8, r3
	if (transmissionType == 1) // data message (not join request), it should search in all
    c912:	780b      	ldrb	r3, [r1, #0]
    c914:	2b00      	cmp	r3, #0
    c916:	d000      	beq.n	c91a <LORAREG_GetAttr_NewTxChConfigT1+0x172>
    c918:	e75b      	b.n	c7d2 <LORAREG_GetAttr_NewTxChConfigT1+0x2a>
		result = SearchAvailableChannel1 (RegParams.cmnParams.paramsType1.Max_125khzChan, transmissionType,DR0, &channelIndex);
    c91a:	466b      	mov	r3, sp
    c91c:	1ddd      	adds	r5, r3, #7
    c91e:	2354      	movs	r3, #84	; 0x54
    c920:	33ff      	adds	r3, #255	; 0xff
    c922:	4a09      	ldr	r2, [pc, #36]	; (c948 <LORAREG_GetAttr_NewTxChConfigT1+0x1a0>)
    c924:	5cd0      	ldrb	r0, [r2, r3]
    c926:	002b      	movs	r3, r5
    c928:	2200      	movs	r2, #0
    c92a:	2100      	movs	r1, #0
    c92c:	4c07      	ldr	r4, [pc, #28]	; (c94c <LORAREG_GetAttr_NewTxChConfigT1+0x1a4>)
    c92e:	47a0      	blx	r4
    c930:	0004      	movs	r4, r0
		if(channelIndex < MAX_CHANNELS_BANDWIDTH_125_AU_NA)
    c932:	782b      	ldrb	r3, [r5, #0]
    c934:	2b3f      	cmp	r3, #63	; 0x3f
    c936:	d8a3      	bhi.n	c880 <LORAREG_GetAttr_NewTxChConfigT1+0xd8>
			if( RegParams.band == ISM_NA915)
    c938:	232e      	movs	r3, #46	; 0x2e
    c93a:	4a03      	ldr	r2, [pc, #12]	; (c948 <LORAREG_GetAttr_NewTxChConfigT1+0x1a0>)
    c93c:	5cd3      	ldrb	r3, [r2, r3]
    c93e:	2b02      	cmp	r3, #2
    c940:	d09b      	beq.n	c87a <LORAREG_GetAttr_NewTxChConfigT1+0xd2>
				radioConfig->sf = SF_12;
    c942:	230c      	movs	r3, #12
    c944:	72f3      	strb	r3, [r6, #11]
    c946:	e79d      	b.n	c884 <LORAREG_GetAttr_NewTxChConfigT1+0xdc>
    c948:	200024d0 	.word	0x200024d0
    c94c:	00009dc9 	.word	0x00009dc9
    c950:	00030d40 	.word	0x00030d40
    c954:	0000020d 	.word	0x0000020d
    c958:	0000dfe1 	.word	0x0000dfe1
    c95c:	00186a00 	.word	0x00186a00

0000c960 <LORAREG_InitGetAttrFnPtrsNA>:
    pGetAttr[FREQUENCY] = LORAREG_GetAttr_FreqT1;
    c960:	4b2b      	ldr	r3, [pc, #172]	; (ca10 <LORAREG_InitGetAttrFnPtrsNA+0xb0>)
    c962:	4a2c      	ldr	r2, [pc, #176]	; (ca14 <LORAREG_InitGetAttrFnPtrsNA+0xb4>)
    c964:	601a      	str	r2, [r3, #0]
    pGetAttr[RX_WINDOW_SIZE] = LORAREG_GetAttr_RxWindowSizeT1;
    c966:	4a2c      	ldr	r2, [pc, #176]	; (ca18 <LORAREG_InitGetAttrFnPtrsNA+0xb8>)
    c968:	60da      	str	r2, [r3, #12]
    pGetAttr[RX_WINDOW_OFFSET] = LORAREG_GetAttr_RxWindowOffsetT1;
    c96a:	4a2c      	ldr	r2, [pc, #176]	; (ca1c <LORAREG_InitGetAttrFnPtrsNA+0xbc>)
    c96c:	611a      	str	r2, [r3, #16]
    pGetAttr[MAX_PAYLOAD_SIZE] = LORAREG_GetAttr_MaxPayloadT1;
    c96e:	4a2c      	ldr	r2, [pc, #176]	; (ca20 <LORAREG_InitGetAttrFnPtrsNA+0xc0>)
    c970:	615a      	str	r2, [r3, #20]
    pGetAttr[MAX_CHANNELS] = LORAREG_GetAttr_MaxChannel;
    c972:	4a2c      	ldr	r2, [pc, #176]	; (ca24 <LORAREG_InitGetAttrFnPtrsNA+0xc4>)
    c974:	619a      	str	r2, [r3, #24]
    pGetAttr[MIN_NEW_CH_INDEX] = LORAREG_GetAttr_MinNewChIndex;
    c976:	4a2c      	ldr	r2, [pc, #176]	; (ca28 <LORAREG_InitGetAttrFnPtrsNA+0xc8>)
    c978:	61da      	str	r2, [r3, #28]
    pGetAttr[DEFAULT_RX1_DATA_RATE] = LORAREG_GetAttr_DefRx1DataRate;
    c97a:	4a2c      	ldr	r2, [pc, #176]	; (ca2c <LORAREG_InitGetAttrFnPtrsNA+0xcc>)
    c97c:	621a      	str	r2, [r3, #32]
    pGetAttr[DEFAULT_RX2_DATA_RATE] = LORAREG_GetAttr_DefRx2DataRate;
    c97e:	4a2c      	ldr	r2, [pc, #176]	; (ca30 <LORAREG_InitGetAttrFnPtrsNA+0xd0>)
    c980:	625a      	str	r2, [r3, #36]	; 0x24
    pGetAttr[DEFAULT_RX2_FREQUENCY] = LORAREG_GetAttr_DefRx2Freq;
    c982:	4a2c      	ldr	r2, [pc, #176]	; (ca34 <LORAREG_InitGetAttrFnPtrsNA+0xd4>)
    c984:	629a      	str	r2, [r3, #40]	; 0x28
    pGetAttr[SUPPORTED_REGIONAL_FEATURES] = LORAREG_GetAttr_RegFeatures;
    c986:	4a2c      	ldr	r2, [pc, #176]	; (ca38 <LORAREG_InitGetAttrFnPtrsNA+0xd8>)
    c988:	639a      	str	r2, [r3, #56]	; 0x38
    pGetAttr[DATA_RANGE] = LORAREG_GetAttr_DataRange;
    c98a:	4a2c      	ldr	r2, [pc, #176]	; (ca3c <LORAREG_InitGetAttrFnPtrsNA+0xdc>)
    c98c:	649a      	str	r2, [r3, #72]	; 0x48
    pGetAttr[DATA_RANGE_CH_BAND] = LORAREG_GetAttr_DRangeChBandT1;
    c98e:	4a2c      	ldr	r2, [pc, #176]	; (ca40 <LORAREG_InitGetAttrFnPtrsNA+0xe0>)
    c990:	64da      	str	r2, [r3, #76]	; 0x4c
    pGetAttr[MIN_MAX_DR] = LORAREG_GetAttr_MinMaxDr;
    c992:	4a2c      	ldr	r2, [pc, #176]	; (ca44 <LORAREG_InitGetAttrFnPtrsNA+0xe4>)
    c994:	651a      	str	r2, [r3, #80]	; 0x50
    pGetAttr[CHANNEL_ID_STATUS] = LORAREG_GetAttr_ChIdStatus;
    c996:	4a2c      	ldr	r2, [pc, #176]	; (ca48 <LORAREG_InitGetAttrFnPtrsNA+0xe8>)
    c998:	659a      	str	r2, [r3, #88]	; 0x58
    pGetAttr[RX1_WINDOW_PARAMS] = LORAREG_GetAttr_Rx1WindowparamsType1;
    c99a:	4a2c      	ldr	r2, [pc, #176]	; (ca4c <LORAREG_InitGetAttrFnPtrsNA+0xec>)
    c99c:	665a      	str	r2, [r3, #100]	; 0x64
	pGetAttr[JOIN_DUTY_CYCLE_TIMER] = LORAREG_GetAttr_JoinDutyCycleRemainingTime;
    c99e:	492c      	ldr	r1, [pc, #176]	; (ca50 <LORAREG_InitGetAttrFnPtrsNA+0xf0>)
    c9a0:	2280      	movs	r2, #128	; 0x80
    c9a2:	5099      	str	r1, [r3, r2]
    pGetAttr[DUTY_CYCLE] = LORAREG_GetAttr_DutyCycleT1;
    c9a4:	4a2b      	ldr	r2, [pc, #172]	; (ca54 <LORAREG_InitGetAttrFnPtrsNA+0xf4>)
    c9a6:	679a      	str	r2, [r3, #120]	; 0x78
    pGetAttr[MODULATION_ATTR] = LORAREG_GetAttr_ModulationAttrT1;
    c9a8:	492b      	ldr	r1, [pc, #172]	; (ca58 <LORAREG_InitGetAttrFnPtrsNA+0xf8>)
    c9aa:	228c      	movs	r2, #140	; 0x8c
    c9ac:	5099      	str	r1, [r3, r2]
    pGetAttr[BANDWIDTH_ATTR] = LORAREG_GetAttr_BandwidthAttrT1;
    c9ae:	492b      	ldr	r1, [pc, #172]	; (ca5c <LORAREG_InitGetAttrFnPtrsNA+0xfc>)
    c9b0:	3204      	adds	r2, #4
    c9b2:	5099      	str	r1, [r3, r2]
    pGetAttr[SPREADING_FACTOR_ATTR] = LORAREG_GetAttr_SpreadFactorT1;
    c9b4:	492a      	ldr	r1, [pc, #168]	; (ca60 <LORAREG_InitGetAttrFnPtrsNA+0x100>)
    c9b6:	3204      	adds	r2, #4
    c9b8:	5099      	str	r1, [r3, r2]
    pGetAttr[MIN_DUTY_CYCLE_TIMER] = LORAREG_GetAttr_MinDutyCycleTimer;
    c9ba:	492a      	ldr	r1, [pc, #168]	; (ca64 <LORAREG_InitGetAttrFnPtrsNA+0x104>)
    c9bc:	3204      	adds	r2, #4
    c9be:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_RECEIVE_DELAY1] = LORAREG_GetAttr_MacRecvDelay1;
    c9c0:	4929      	ldr	r1, [pc, #164]	; (ca68 <LORAREG_InitGetAttrFnPtrsNA+0x108>)
    c9c2:	3204      	adds	r2, #4
    c9c4:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_RECEIVE_DELAY2] = LORAREG_GetAttr_MacRecvDelay2;
    c9c6:	4929      	ldr	r1, [pc, #164]	; (ca6c <LORAREG_InitGetAttrFnPtrsNA+0x10c>)
    c9c8:	3204      	adds	r2, #4
    c9ca:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_JOIN_ACCEPT_DELAY1] = LORAREG_GetAttr_MacJoinAcptDelay1;
    c9cc:	4928      	ldr	r1, [pc, #160]	; (ca70 <LORAREG_InitGetAttrFnPtrsNA+0x110>)
    c9ce:	3204      	adds	r2, #4
    c9d0:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_JOIN_ACCEPT_DELAY2] = LORAREG_GetAttr_MacJoinAcptDelay2;
    c9d2:	4928      	ldr	r1, [pc, #160]	; (ca74 <LORAREG_InitGetAttrFnPtrsNA+0x114>)
    c9d4:	3204      	adds	r2, #4
    c9d6:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_ACK_TIMEOUT] = LORAREG_GetAttr_MacAckTimeout;
    c9d8:	4927      	ldr	r1, [pc, #156]	; (ca78 <LORAREG_InitGetAttrFnPtrsNA+0x118>)
    c9da:	3204      	adds	r2, #4
    c9dc:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_ADR_ACK_DELAY] = LORAREG_GetAttr_MacAdrAckDelay;
    c9de:	4927      	ldr	r1, [pc, #156]	; (ca7c <LORAREG_InitGetAttrFnPtrsNA+0x11c>)
    c9e0:	3204      	adds	r2, #4
    c9e2:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_ADR_ACK_LIMIT] = LORAREG_GetAttr_MacAdrAckLimit;
    c9e4:	4926      	ldr	r1, [pc, #152]	; (ca80 <LORAREG_InitGetAttrFnPtrsNA+0x120>)
    c9e6:	3204      	adds	r2, #4
    c9e8:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_MAX_FCNT_GAP] = LORAREG_GetAttr_MacMaxFcntGap;
    c9ea:	4926      	ldr	r1, [pc, #152]	; (ca84 <LORAREG_InitGetAttrFnPtrsNA+0x124>)
    c9ec:	3204      	adds	r2, #4
    c9ee:	5099      	str	r1, [r3, r2]
    pGetAttr[NEW_TX_CHANNEL_CONFIG] = LORAREG_GetAttr_NewTxChConfigT1;
    c9f0:	4925      	ldr	r1, [pc, #148]	; (ca88 <LORAREG_InitGetAttrFnPtrsNA+0x128>)
    c9f2:	3204      	adds	r2, #4
    c9f4:	5099      	str	r1, [r3, r2]
    pGetAttr[FREE_CHANNEL] = LORAREG_GetAttr_FreeChannel1;
    c9f6:	4925      	ldr	r1, [pc, #148]	; (ca8c <LORAREG_InitGetAttrFnPtrsNA+0x12c>)
    c9f8:	3204      	adds	r2, #4
    c9fa:	5099      	str	r1, [r3, r2]
    pGetAttr[CURRENT_CHANNEL_INDEX] = LORAREG_GetAttr_CurChIndx;
    c9fc:	4924      	ldr	r1, [pc, #144]	; (ca90 <LORAREG_InitGetAttrFnPtrsNA+0x130>)
    c9fe:	3204      	adds	r2, #4
    ca00:	5099      	str	r1, [r3, r2]
    pGetAttr[REG_DEF_TX_POWER] = LORAREG_GetAttr_RegDefTxPwr;
    ca02:	4924      	ldr	r1, [pc, #144]	; (ca94 <LORAREG_InitGetAttrFnPtrsNA+0x134>)
    ca04:	3214      	adds	r2, #20
    ca06:	5099      	str	r1, [r3, r2]
    pGetAttr[REG_DEF_TX_DATARATE] = LORAREG_GetAttr_RegDefTxDR;
    ca08:	4923      	ldr	r1, [pc, #140]	; (ca98 <LORAREG_InitGetAttrFnPtrsNA+0x138>)
    ca0a:	3204      	adds	r2, #4
    ca0c:	5099      	str	r1, [r3, r2]
}
    ca0e:	4770      	bx	lr
    ca10:	20000c7c 	.word	0x20000c7c
    ca14:	000097fd 	.word	0x000097fd
    ca18:	0000c541 	.word	0x0000c541
    ca1c:	0000c591 	.word	0x0000c591
    ca20:	0000c5dd 	.word	0x0000c5dd
    ca24:	00009645 	.word	0x00009645
    ca28:	00009655 	.word	0x00009655
    ca2c:	00009671 	.word	0x00009671
    ca30:	00009681 	.word	0x00009681
    ca34:	0000a6f1 	.word	0x0000a6f1
    ca38:	00009691 	.word	0x00009691
    ca3c:	000096a1 	.word	0x000096a1
    ca40:	0000a5c5 	.word	0x0000a5c5
    ca44:	000099b1 	.word	0x000099b1
    ca48:	000096f1 	.word	0x000096f1
    ca4c:	0000a519 	.word	0x0000a519
    ca50:	0000a479 	.word	0x0000a479
    ca54:	0000973d 	.word	0x0000973d
    ca58:	0000c629 	.word	0x0000c629
    ca5c:	0000c675 	.word	0x0000c675
    ca60:	0000c6c1 	.word	0x0000c6c1
    ca64:	00009747 	.word	0x00009747
    ca68:	00009751 	.word	0x00009751
    ca6c:	0000975b 	.word	0x0000975b
    ca70:	00009765 	.word	0x00009765
    ca74:	00009771 	.word	0x00009771
    ca78:	0000977d 	.word	0x0000977d
    ca7c:	00009787 	.word	0x00009787
    ca80:	0000978f 	.word	0x0000978f
    ca84:	00009797 	.word	0x00009797
    ca88:	0000c7a9 	.word	0x0000c7a9
    ca8c:	00009fd5 	.word	0x00009fd5
    ca90:	000097c1 	.word	0x000097c1
    ca94:	000097a1 	.word	0x000097a1
    ca98:	000097b1 	.word	0x000097b1

0000ca9c <LORAREG_InitGetAttrFnPtrsEU>:
    pGetAttr[FREQUENCY] = LORAREG_GetAttr_FreqT2;
    ca9c:	4b2d      	ldr	r3, [pc, #180]	; (cb54 <LORAREG_InitGetAttrFnPtrsEU+0xb8>)
    ca9e:	4a2e      	ldr	r2, [pc, #184]	; (cb58 <LORAREG_InitGetAttrFnPtrsEU+0xbc>)
    caa0:	601a      	str	r2, [r3, #0]
    pGetAttr[RX_WINDOW_SIZE] = LORAREG_GetAttr_RxWindowSizeT2;
    caa2:	4a2e      	ldr	r2, [pc, #184]	; (cb5c <LORAREG_InitGetAttrFnPtrsEU+0xc0>)
    caa4:	60da      	str	r2, [r3, #12]
    pGetAttr[RX_WINDOW_OFFSET] = LORAREG_GetAttr_RxWindowOffsetT2;
    caa6:	4a2e      	ldr	r2, [pc, #184]	; (cb60 <LORAREG_InitGetAttrFnPtrsEU+0xc4>)
    caa8:	611a      	str	r2, [r3, #16]
    pGetAttr[MAX_PAYLOAD_SIZE] = LORAREG_GetAttr_MaxPayloadT2;
    caaa:	4a2e      	ldr	r2, [pc, #184]	; (cb64 <LORAREG_InitGetAttrFnPtrsEU+0xc8>)
    caac:	615a      	str	r2, [r3, #20]
    pGetAttr[MAX_CHANNELS] = LORAREG_GetAttr_MaxChannel;
    caae:	4a2e      	ldr	r2, [pc, #184]	; (cb68 <LORAREG_InitGetAttrFnPtrsEU+0xcc>)
    cab0:	619a      	str	r2, [r3, #24]
    pGetAttr[MIN_NEW_CH_INDEX] = LORAREG_GetAttr_MinNewChIndex;
    cab2:	4a2e      	ldr	r2, [pc, #184]	; (cb6c <LORAREG_InitGetAttrFnPtrsEU+0xd0>)
    cab4:	61da      	str	r2, [r3, #28]
    pGetAttr[DEFAULT_RX1_DATA_RATE] = LORAREG_GetAttr_DefRx1DataRate;
    cab6:	4a2e      	ldr	r2, [pc, #184]	; (cb70 <LORAREG_InitGetAttrFnPtrsEU+0xd4>)
    cab8:	621a      	str	r2, [r3, #32]
    pGetAttr[DEFAULT_RX2_DATA_RATE] = LORAREG_GetAttr_DefRx2DataRate;
    caba:	4a2e      	ldr	r2, [pc, #184]	; (cb74 <LORAREG_InitGetAttrFnPtrsEU+0xd8>)
    cabc:	625a      	str	r2, [r3, #36]	; 0x24
    pGetAttr[DEFAULT_RX2_FREQUENCY] = LORAREG_GetAttr_DefRx2Freq;
    cabe:	4a2e      	ldr	r2, [pc, #184]	; (cb78 <LORAREG_InitGetAttrFnPtrsEU+0xdc>)
    cac0:	629a      	str	r2, [r3, #40]	; 0x28
    pGetAttr[SUPPORTED_REGIONAL_FEATURES] = LORAREG_GetAttr_RegFeatures;
    cac2:	4a2e      	ldr	r2, [pc, #184]	; (cb7c <LORAREG_InitGetAttrFnPtrsEU+0xe0>)
    cac4:	639a      	str	r2, [r3, #56]	; 0x38
    pGetAttr[DATA_RANGE] = LORAREG_GetAttr_DataRange;
    cac6:	4a2e      	ldr	r2, [pc, #184]	; (cb80 <LORAREG_InitGetAttrFnPtrsEU+0xe4>)
    cac8:	649a      	str	r2, [r3, #72]	; 0x48
    pGetAttr[DATA_RANGE_CH_BAND] = LORAREG_GetAttr_DRangeChBandT2;
    caca:	4a2e      	ldr	r2, [pc, #184]	; (cb84 <LORAREG_InitGetAttrFnPtrsEU+0xe8>)
    cacc:	64da      	str	r2, [r3, #76]	; 0x4c
    pGetAttr[MIN_MAX_DR] = LORAREG_GetAttr_MinMaxDr;
    cace:	4a2e      	ldr	r2, [pc, #184]	; (cb88 <LORAREG_InitGetAttrFnPtrsEU+0xec>)
    cad0:	651a      	str	r2, [r3, #80]	; 0x50
    pGetAttr[CHANNEL_ID_STATUS] = LORAREG_GetAttr_ChIdStatus;
    cad2:	4a2e      	ldr	r2, [pc, #184]	; (cb8c <LORAREG_InitGetAttrFnPtrsEU+0xf0>)
    cad4:	659a      	str	r2, [r3, #88]	; 0x58
    pGetAttr[RX1_WINDOW_PARAMS] = LORAREG_GetAttr_Rx1WindowparamsType2;
    cad6:	4a2e      	ldr	r2, [pc, #184]	; (cb90 <LORAREG_InitGetAttrFnPtrsEU+0xf4>)
    cad8:	665a      	str	r2, [r3, #100]	; 0x64
	pGetAttr[JOIN_DUTY_CYCLE_TIMER]= LORAREG_GetAttr_JoinDutyCycleRemainingTime;
    cada:	492e      	ldr	r1, [pc, #184]	; (cb94 <LORAREG_InitGetAttrFnPtrsEU+0xf8>)
    cadc:	2280      	movs	r2, #128	; 0x80
    cade:	5099      	str	r1, [r3, r2]
    pGetAttr[DUTY_CYCLE] = LORAREG_GetAttr_DutyCycleT2;
    cae0:	4a2d      	ldr	r2, [pc, #180]	; (cb98 <LORAREG_InitGetAttrFnPtrsEU+0xfc>)
    cae2:	679a      	str	r2, [r3, #120]	; 0x78
    pGetAttr[MODULATION_ATTR] = LORAREG_GetAttr_ModulationAttrT2;
    cae4:	492d      	ldr	r1, [pc, #180]	; (cb9c <LORAREG_InitGetAttrFnPtrsEU+0x100>)
    cae6:	228c      	movs	r2, #140	; 0x8c
    cae8:	5099      	str	r1, [r3, r2]
    pGetAttr[BANDWIDTH_ATTR] = LORAREG_GetAttr_BandwidthAttrT2;
    caea:	492d      	ldr	r1, [pc, #180]	; (cba0 <LORAREG_InitGetAttrFnPtrsEU+0x104>)
    caec:	3204      	adds	r2, #4
    caee:	5099      	str	r1, [r3, r2]
    pGetAttr[SPREADING_FACTOR_ATTR] = LORAREG_GetAttr_SpreadFactorT2;
    caf0:	492c      	ldr	r1, [pc, #176]	; (cba4 <LORAREG_InitGetAttrFnPtrsEU+0x108>)
    caf2:	3204      	adds	r2, #4
    caf4:	5099      	str	r1, [r3, r2]
    pGetAttr[MIN_DUTY_CYCLE_TIMER] = LORAREG_GetAttr_DutyCycleTimer;
    caf6:	492c      	ldr	r1, [pc, #176]	; (cba8 <LORAREG_InitGetAttrFnPtrsEU+0x10c>)
    caf8:	3204      	adds	r2, #4
    cafa:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_RECEIVE_DELAY1] = LORAREG_GetAttr_MacRecvDelay1;
    cafc:	492b      	ldr	r1, [pc, #172]	; (cbac <LORAREG_InitGetAttrFnPtrsEU+0x110>)
    cafe:	3204      	adds	r2, #4
    cb00:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_RECEIVE_DELAY2] = LORAREG_GetAttr_MacRecvDelay2;
    cb02:	492b      	ldr	r1, [pc, #172]	; (cbb0 <LORAREG_InitGetAttrFnPtrsEU+0x114>)
    cb04:	3204      	adds	r2, #4
    cb06:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_JOIN_ACCEPT_DELAY1] = LORAREG_GetAttr_MacJoinAcptDelay1;
    cb08:	492a      	ldr	r1, [pc, #168]	; (cbb4 <LORAREG_InitGetAttrFnPtrsEU+0x118>)
    cb0a:	3204      	adds	r2, #4
    cb0c:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_JOIN_ACCEPT_DELAY2] = LORAREG_GetAttr_MacJoinAcptDelay2;
    cb0e:	492a      	ldr	r1, [pc, #168]	; (cbb8 <LORAREG_InitGetAttrFnPtrsEU+0x11c>)
    cb10:	3204      	adds	r2, #4
    cb12:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_ACK_TIMEOUT] = LORAREG_GetAttr_MacAckTimeout;
    cb14:	4929      	ldr	r1, [pc, #164]	; (cbbc <LORAREG_InitGetAttrFnPtrsEU+0x120>)
    cb16:	3204      	adds	r2, #4
    cb18:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_ADR_ACK_DELAY] = LORAREG_GetAttr_MacAdrAckDelay;
    cb1a:	4929      	ldr	r1, [pc, #164]	; (cbc0 <LORAREG_InitGetAttrFnPtrsEU+0x124>)
    cb1c:	3204      	adds	r2, #4
    cb1e:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_ADR_ACK_LIMIT] = LORAREG_GetAttr_MacAdrAckLimit;
    cb20:	4928      	ldr	r1, [pc, #160]	; (cbc4 <LORAREG_InitGetAttrFnPtrsEU+0x128>)
    cb22:	3204      	adds	r2, #4
    cb24:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_MAX_FCNT_GAP] = LORAREG_GetAttr_MacMaxFcntGap;
    cb26:	4928      	ldr	r1, [pc, #160]	; (cbc8 <LORAREG_InitGetAttrFnPtrsEU+0x12c>)
    cb28:	3204      	adds	r2, #4
    cb2a:	5099      	str	r1, [r3, r2]
    pGetAttr[NEW_TX_CHANNEL_CONFIG] = LORAREG_GetAttr_NewTxChConfigT2;
    cb2c:	4927      	ldr	r1, [pc, #156]	; (cbcc <LORAREG_InitGetAttrFnPtrsEU+0x130>)
    cb2e:	3204      	adds	r2, #4
    cb30:	5099      	str	r1, [r3, r2]
    pGetAttr[FREE_CHANNEL] = LORAREG_GetAttr_FreeChannel2;
    cb32:	4927      	ldr	r1, [pc, #156]	; (cbd0 <LORAREG_InitGetAttrFnPtrsEU+0x134>)
    cb34:	3204      	adds	r2, #4
    cb36:	5099      	str	r1, [r3, r2]
    pGetAttr[CURRENT_CHANNEL_INDEX] = LORAREG_GetAttr_CurChIndx;
    cb38:	4926      	ldr	r1, [pc, #152]	; (cbd4 <LORAREG_InitGetAttrFnPtrsEU+0x138>)
    cb3a:	3204      	adds	r2, #4
    cb3c:	5099      	str	r1, [r3, r2]
    pGetAttr[DL_FREQUENCY] = LORAREG_GetAttr_DlFrequency;
    cb3e:	4926      	ldr	r1, [pc, #152]	; (cbd8 <LORAREG_InitGetAttrFnPtrsEU+0x13c>)
    cb40:	320c      	adds	r2, #12
    cb42:	5099      	str	r1, [r3, r2]
    pGetAttr[REG_DEF_TX_POWER] = LORAREG_GetAttr_RegDefTxPwr;
    cb44:	4925      	ldr	r1, [pc, #148]	; (cbdc <LORAREG_InitGetAttrFnPtrsEU+0x140>)
    cb46:	3208      	adds	r2, #8
    cb48:	5099      	str	r1, [r3, r2]
    pGetAttr[REG_DEF_TX_DATARATE] = LORAREG_GetAttr_RegDefTxDR;
    cb4a:	4925      	ldr	r1, [pc, #148]	; (cbe0 <LORAREG_InitGetAttrFnPtrsEU+0x144>)
    cb4c:	3204      	adds	r2, #4
    cb4e:	5099      	str	r1, [r3, r2]
}
    cb50:	4770      	bx	lr
    cb52:	46c0      	nop			; (mov r8, r8)
    cb54:	20000c7c 	.word	0x20000c7c
    cb58:	0000aa4d 	.word	0x0000aa4d
    cb5c:	0000c1e1 	.word	0x0000c1e1
    cb60:	0000c221 	.word	0x0000c221
    cb64:	0000c25d 	.word	0x0000c25d
    cb68:	00009645 	.word	0x00009645
    cb6c:	00009655 	.word	0x00009655
    cb70:	00009671 	.word	0x00009671
    cb74:	00009681 	.word	0x00009681
    cb78:	0000a6f1 	.word	0x0000a6f1
    cb7c:	00009691 	.word	0x00009691
    cb80:	000096a1 	.word	0x000096a1
    cb84:	0000a951 	.word	0x0000a951
    cb88:	000099b1 	.word	0x000099b1
    cb8c:	000096f1 	.word	0x000096f1
    cb90:	0000a8e5 	.word	0x0000a8e5
    cb94:	0000a479 	.word	0x0000a479
    cb98:	00009969 	.word	0x00009969
    cb9c:	0000c295 	.word	0x0000c295
    cba0:	0000c2cd 	.word	0x0000c2cd
    cba4:	0000c305 	.word	0x0000c305
    cba8:	0000a751 	.word	0x0000a751
    cbac:	00009751 	.word	0x00009751
    cbb0:	0000975b 	.word	0x0000975b
    cbb4:	00009765 	.word	0x00009765
    cbb8:	00009771 	.word	0x00009771
    cbbc:	0000977d 	.word	0x0000977d
    cbc0:	00009787 	.word	0x00009787
    cbc4:	0000978f 	.word	0x0000978f
    cbc8:	00009797 	.word	0x00009797
    cbcc:	0000c375 	.word	0x0000c375
    cbd0:	0000b2e1 	.word	0x0000b2e1
    cbd4:	000097c1 	.word	0x000097c1
    cbd8:	0000a709 	.word	0x0000a709
    cbdc:	000097a1 	.word	0x000097a1
    cbe0:	000097b1 	.word	0x000097b1

0000cbe4 <LORAREG_InitGetAttrFnPtrsAS>:
    pGetAttr[FREQUENCY] = LORAREG_GetAttr_FreqT3;
    cbe4:	4b2d      	ldr	r3, [pc, #180]	; (cc9c <LORAREG_InitGetAttrFnPtrsAS+0xb8>)
    cbe6:	4a2e      	ldr	r2, [pc, #184]	; (cca0 <LORAREG_InitGetAttrFnPtrsAS+0xbc>)
    cbe8:	601a      	str	r2, [r3, #0]
    pGetAttr[RX_WINDOW_SIZE] = LORAREG_GetAttr_RxWindowSizeT2;
    cbea:	4a2e      	ldr	r2, [pc, #184]	; (cca4 <LORAREG_InitGetAttrFnPtrsAS+0xc0>)
    cbec:	60da      	str	r2, [r3, #12]
    pGetAttr[RX_WINDOW_OFFSET] = LORAREG_GetAttr_RxWindowOffsetT2;
    cbee:	4a2e      	ldr	r2, [pc, #184]	; (cca8 <LORAREG_InitGetAttrFnPtrsAS+0xc4>)
    cbf0:	611a      	str	r2, [r3, #16]
    pGetAttr[MAX_PAYLOAD_SIZE] = LORAREG_GetAttr_MaxPayloadT3;
    cbf2:	4a2e      	ldr	r2, [pc, #184]	; (ccac <LORAREG_InitGetAttrFnPtrsAS+0xc8>)
    cbf4:	615a      	str	r2, [r3, #20]
    pGetAttr[MAX_CHANNELS] = LORAREG_GetAttr_MaxChannel;
    cbf6:	4a2e      	ldr	r2, [pc, #184]	; (ccb0 <LORAREG_InitGetAttrFnPtrsAS+0xcc>)
    cbf8:	619a      	str	r2, [r3, #24]
    pGetAttr[MIN_NEW_CH_INDEX] = LORAREG_GetAttr_MinNewChIndex;
    cbfa:	4a2e      	ldr	r2, [pc, #184]	; (ccb4 <LORAREG_InitGetAttrFnPtrsAS+0xd0>)
    cbfc:	61da      	str	r2, [r3, #28]
    pGetAttr[DEFAULT_RX1_DATA_RATE] = LORAREG_GetAttr_DefRx1DataRate;
    cbfe:	4a2e      	ldr	r2, [pc, #184]	; (ccb8 <LORAREG_InitGetAttrFnPtrsAS+0xd4>)
    cc00:	621a      	str	r2, [r3, #32]
    pGetAttr[DEFAULT_RX2_DATA_RATE] = LORAREG_GetAttr_DefRx2DataRate;
    cc02:	4a2e      	ldr	r2, [pc, #184]	; (ccbc <LORAREG_InitGetAttrFnPtrsAS+0xd8>)
    cc04:	625a      	str	r2, [r3, #36]	; 0x24
    pGetAttr[DEFAULT_RX2_FREQUENCY] = LORAREG_GetAttr_DefRx2Freq;
    cc06:	4a2e      	ldr	r2, [pc, #184]	; (ccc0 <LORAREG_InitGetAttrFnPtrsAS+0xdc>)
    cc08:	629a      	str	r2, [r3, #40]	; 0x28
    pGetAttr[SUPPORTED_REGIONAL_FEATURES] = LORAREG_GetAttr_RegFeatures;
    cc0a:	4a2e      	ldr	r2, [pc, #184]	; (ccc4 <LORAREG_InitGetAttrFnPtrsAS+0xe0>)
    cc0c:	639a      	str	r2, [r3, #56]	; 0x38
    pGetAttr[DATA_RANGE] = LORAREG_GetAttr_DataRange;
    cc0e:	4a2e      	ldr	r2, [pc, #184]	; (ccc8 <LORAREG_InitGetAttrFnPtrsAS+0xe4>)
    cc10:	649a      	str	r2, [r3, #72]	; 0x48
    pGetAttr[DATA_RANGE_CH_BAND] = LORAREG_GetAttr_DRangeChBandT2;
    cc12:	4a2e      	ldr	r2, [pc, #184]	; (cccc <LORAREG_InitGetAttrFnPtrsAS+0xe8>)
    cc14:	64da      	str	r2, [r3, #76]	; 0x4c
    pGetAttr[MIN_MAX_DR] = LORAREG_GetAttr_MinMaxDr;
    cc16:	4a2e      	ldr	r2, [pc, #184]	; (ccd0 <LORAREG_InitGetAttrFnPtrsAS+0xec>)
    cc18:	651a      	str	r2, [r3, #80]	; 0x50
    pGetAttr[CHANNEL_ID_STATUS] = LORAREG_GetAttr_ChIdStatus;
    cc1a:	4a2e      	ldr	r2, [pc, #184]	; (ccd4 <LORAREG_InitGetAttrFnPtrsAS+0xf0>)
    cc1c:	659a      	str	r2, [r3, #88]	; 0x58
    pGetAttr[RX1_WINDOW_PARAMS] = LORAREG_GetAttr_Rx1WindowparamsType4;
    cc1e:	4a2e      	ldr	r2, [pc, #184]	; (ccd8 <LORAREG_InitGetAttrFnPtrsAS+0xf4>)
    cc20:	665a      	str	r2, [r3, #100]	; 0x64
	pGetAttr[JOIN_DUTY_CYCLE_TIMER]= LORAREG_GetAttr_JoinDutyCycleRemainingTime;
    cc22:	492e      	ldr	r1, [pc, #184]	; (ccdc <LORAREG_InitGetAttrFnPtrsAS+0xf8>)
    cc24:	2280      	movs	r2, #128	; 0x80
    cc26:	5099      	str	r1, [r3, r2]
    pGetAttr[MODULATION_ATTR] = LORAREG_GetAttr_ModulationAttrT2;
    cc28:	492d      	ldr	r1, [pc, #180]	; (cce0 <LORAREG_InitGetAttrFnPtrsAS+0xfc>)
    cc2a:	320c      	adds	r2, #12
    cc2c:	5099      	str	r1, [r3, r2]
    pGetAttr[BANDWIDTH_ATTR] = LORAREG_GetAttr_BandwidthAttrT2;
    cc2e:	492d      	ldr	r1, [pc, #180]	; (cce4 <LORAREG_InitGetAttrFnPtrsAS+0x100>)
    cc30:	3204      	adds	r2, #4
    cc32:	5099      	str	r1, [r3, r2]
    pGetAttr[SPREADING_FACTOR_ATTR] = LORAREG_GetAttr_SpreadFactorT2;
    cc34:	492c      	ldr	r1, [pc, #176]	; (cce8 <LORAREG_InitGetAttrFnPtrsAS+0x104>)
    cc36:	3204      	adds	r2, #4
    cc38:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_RECEIVE_DELAY1] = LORAREG_GetAttr_MacRecvDelay1;
    cc3a:	492c      	ldr	r1, [pc, #176]	; (ccec <LORAREG_InitGetAttrFnPtrsAS+0x108>)
    cc3c:	3208      	adds	r2, #8
    cc3e:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_RECEIVE_DELAY2] = LORAREG_GetAttr_MacRecvDelay2;
    cc40:	492b      	ldr	r1, [pc, #172]	; (ccf0 <LORAREG_InitGetAttrFnPtrsAS+0x10c>)
    cc42:	3204      	adds	r2, #4
    cc44:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_JOIN_ACCEPT_DELAY1] = LORAREG_GetAttr_MacJoinAcptDelay1;
    cc46:	492b      	ldr	r1, [pc, #172]	; (ccf4 <LORAREG_InitGetAttrFnPtrsAS+0x110>)
    cc48:	3204      	adds	r2, #4
    cc4a:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_JOIN_ACCEPT_DELAY2] = LORAREG_GetAttr_MacJoinAcptDelay2;
    cc4c:	492a      	ldr	r1, [pc, #168]	; (ccf8 <LORAREG_InitGetAttrFnPtrsAS+0x114>)
    cc4e:	3204      	adds	r2, #4
    cc50:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_ACK_TIMEOUT] = LORAREG_GetAttr_MacAckTimeout;
    cc52:	492a      	ldr	r1, [pc, #168]	; (ccfc <LORAREG_InitGetAttrFnPtrsAS+0x118>)
    cc54:	3204      	adds	r2, #4
    cc56:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_ADR_ACK_DELAY] = LORAREG_GetAttr_MacAdrAckDelay;
    cc58:	4929      	ldr	r1, [pc, #164]	; (cd00 <LORAREG_InitGetAttrFnPtrsAS+0x11c>)
    cc5a:	3204      	adds	r2, #4
    cc5c:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_ADR_ACK_LIMIT] = LORAREG_GetAttr_MacAdrAckLimit;
    cc5e:	4929      	ldr	r1, [pc, #164]	; (cd04 <LORAREG_InitGetAttrFnPtrsAS+0x120>)
    cc60:	3204      	adds	r2, #4
    cc62:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_MAX_FCNT_GAP] = LORAREG_GetAttr_MacMaxFcntGap;
    cc64:	4928      	ldr	r1, [pc, #160]	; (cd08 <LORAREG_InitGetAttrFnPtrsAS+0x124>)
    cc66:	3204      	adds	r2, #4
    cc68:	5099      	str	r1, [r3, r2]
    pGetAttr[NEW_TX_CHANNEL_CONFIG] = LORAREG_GetAttr_NewTxChConfigT2;
    cc6a:	4928      	ldr	r1, [pc, #160]	; (cd0c <LORAREG_InitGetAttrFnPtrsAS+0x128>)
    cc6c:	3204      	adds	r2, #4
    cc6e:	5099      	str	r1, [r3, r2]
    pGetAttr[FREE_CHANNEL] = LORAREG_GetAttr_FreeChannel2;
    cc70:	4927      	ldr	r1, [pc, #156]	; (cd10 <LORAREG_InitGetAttrFnPtrsAS+0x12c>)
    cc72:	3204      	adds	r2, #4
    cc74:	5099      	str	r1, [r3, r2]
    pGetAttr[CURRENT_CHANNEL_INDEX] = LORAREG_GetAttr_CurChIndx;
    cc76:	4927      	ldr	r1, [pc, #156]	; (cd14 <LORAREG_InitGetAttrFnPtrsAS+0x130>)
    cc78:	3204      	adds	r2, #4
    cc7a:	5099      	str	r1, [r3, r2]
    pGetAttr[DL_FREQUENCY] = LORAREG_GetAttr_DlFrequency;
    cc7c:	4926      	ldr	r1, [pc, #152]	; (cd18 <LORAREG_InitGetAttrFnPtrsAS+0x134>)
    cc7e:	320c      	adds	r2, #12
    cc80:	5099      	str	r1, [r3, r2]
    pGetAttr[REG_DEF_TX_POWER] = LORAREG_GetAttr_RegDefTxPwr;
    cc82:	4926      	ldr	r1, [pc, #152]	; (cd1c <LORAREG_InitGetAttrFnPtrsAS+0x138>)
    cc84:	3208      	adds	r2, #8
    cc86:	5099      	str	r1, [r3, r2]
    pGetAttr[REG_DEF_TX_DATARATE] = LORAREG_GetAttr_RegDefTxDR;
    cc88:	4925      	ldr	r1, [pc, #148]	; (cd20 <LORAREG_InitGetAttrFnPtrsAS+0x13c>)
    cc8a:	3204      	adds	r2, #4
    cc8c:	5099      	str	r1, [r3, r2]
    pGetAttr[DUTY_CYCLE] = LORAREG_GetAttr_DutyCycleT2;
    cc8e:	4a25      	ldr	r2, [pc, #148]	; (cd24 <LORAREG_InitGetAttrFnPtrsAS+0x140>)
    cc90:	679a      	str	r2, [r3, #120]	; 0x78
    pGetAttr[MIN_DUTY_CYCLE_TIMER] = LORAREG_GetAttr_DutyCycleTimer;
    cc92:	4925      	ldr	r1, [pc, #148]	; (cd28 <LORAREG_InitGetAttrFnPtrsAS+0x144>)
    cc94:	2298      	movs	r2, #152	; 0x98
    cc96:	5099      	str	r1, [r3, r2]
}
    cc98:	4770      	bx	lr
    cc9a:	46c0      	nop			; (mov r8, r8)
    cc9c:	20000c7c 	.word	0x20000c7c
    cca0:	0000ab89 	.word	0x0000ab89
    cca4:	0000c1e1 	.word	0x0000c1e1
    cca8:	0000c221 	.word	0x0000c221
    ccac:	0000c17d 	.word	0x0000c17d
    ccb0:	00009645 	.word	0x00009645
    ccb4:	00009655 	.word	0x00009655
    ccb8:	00009671 	.word	0x00009671
    ccbc:	00009681 	.word	0x00009681
    ccc0:	0000a6f1 	.word	0x0000a6f1
    ccc4:	00009691 	.word	0x00009691
    ccc8:	000096a1 	.word	0x000096a1
    cccc:	0000a951 	.word	0x0000a951
    ccd0:	000099b1 	.word	0x000099b1
    ccd4:	000096f1 	.word	0x000096f1
    ccd8:	0000aa95 	.word	0x0000aa95
    ccdc:	0000a479 	.word	0x0000a479
    cce0:	0000c295 	.word	0x0000c295
    cce4:	0000c2cd 	.word	0x0000c2cd
    cce8:	0000c305 	.word	0x0000c305
    ccec:	00009751 	.word	0x00009751
    ccf0:	0000975b 	.word	0x0000975b
    ccf4:	00009765 	.word	0x00009765
    ccf8:	00009771 	.word	0x00009771
    ccfc:	0000977d 	.word	0x0000977d
    cd00:	00009787 	.word	0x00009787
    cd04:	0000978f 	.word	0x0000978f
    cd08:	00009797 	.word	0x00009797
    cd0c:	0000c375 	.word	0x0000c375
    cd10:	0000b2e1 	.word	0x0000b2e1
    cd14:	000097c1 	.word	0x000097c1
    cd18:	0000a709 	.word	0x0000a709
    cd1c:	000097a1 	.word	0x000097a1
    cd20:	000097b1 	.word	0x000097b1
    cd24:	00009969 	.word	0x00009969
    cd28:	0000a751 	.word	0x0000a751

0000cd2c <LORAREG_InitGetAttrFnPtrsAU>:
    pGetAttr[FREQUENCY] = LORAREG_GetAttr_FreqT1;
    cd2c:	4b2b      	ldr	r3, [pc, #172]	; (cddc <LORAREG_InitGetAttrFnPtrsAU+0xb0>)
    cd2e:	4a2c      	ldr	r2, [pc, #176]	; (cde0 <LORAREG_InitGetAttrFnPtrsAU+0xb4>)
    cd30:	601a      	str	r2, [r3, #0]
    pGetAttr[RX_WINDOW_SIZE] = LORAREG_GetAttr_RxWindowSizeT1;
    cd32:	4a2c      	ldr	r2, [pc, #176]	; (cde4 <LORAREG_InitGetAttrFnPtrsAU+0xb8>)
    cd34:	60da      	str	r2, [r3, #12]
    pGetAttr[RX_WINDOW_OFFSET] = LORAREG_GetAttr_RxWindowOffsetT1;
    cd36:	4a2c      	ldr	r2, [pc, #176]	; (cde8 <LORAREG_InitGetAttrFnPtrsAU+0xbc>)
    cd38:	611a      	str	r2, [r3, #16]
    pGetAttr[MAX_PAYLOAD_SIZE] = LORAREG_GetAttr_MaxPayloadT1;
    cd3a:	4a2c      	ldr	r2, [pc, #176]	; (cdec <LORAREG_InitGetAttrFnPtrsAU+0xc0>)
    cd3c:	615a      	str	r2, [r3, #20]
    pGetAttr[MAX_CHANNELS] = LORAREG_GetAttr_MaxChannel;
    cd3e:	4a2c      	ldr	r2, [pc, #176]	; (cdf0 <LORAREG_InitGetAttrFnPtrsAU+0xc4>)
    cd40:	619a      	str	r2, [r3, #24]
    pGetAttr[MIN_NEW_CH_INDEX] = LORAREG_GetAttr_MinNewChIndex;
    cd42:	4a2c      	ldr	r2, [pc, #176]	; (cdf4 <LORAREG_InitGetAttrFnPtrsAU+0xc8>)
    cd44:	61da      	str	r2, [r3, #28]
    pGetAttr[DEFAULT_RX1_DATA_RATE] = LORAREG_GetAttr_DefRx1DataRate;
    cd46:	4a2c      	ldr	r2, [pc, #176]	; (cdf8 <LORAREG_InitGetAttrFnPtrsAU+0xcc>)
    cd48:	621a      	str	r2, [r3, #32]
    pGetAttr[DEFAULT_RX2_DATA_RATE] = LORAREG_GetAttr_DefRx2DataRate;
    cd4a:	4a2c      	ldr	r2, [pc, #176]	; (cdfc <LORAREG_InitGetAttrFnPtrsAU+0xd0>)
    cd4c:	625a      	str	r2, [r3, #36]	; 0x24
    pGetAttr[DEFAULT_RX2_FREQUENCY] = LORAREG_GetAttr_DefRx2Freq;
    cd4e:	4a2c      	ldr	r2, [pc, #176]	; (ce00 <LORAREG_InitGetAttrFnPtrsAU+0xd4>)
    cd50:	629a      	str	r2, [r3, #40]	; 0x28
    pGetAttr[SUPPORTED_REGIONAL_FEATURES] = LORAREG_GetAttr_RegFeatures;
    cd52:	4a2c      	ldr	r2, [pc, #176]	; (ce04 <LORAREG_InitGetAttrFnPtrsAU+0xd8>)
    cd54:	639a      	str	r2, [r3, #56]	; 0x38
    pGetAttr[DATA_RANGE] = LORAREG_GetAttr_DataRange;
    cd56:	4a2c      	ldr	r2, [pc, #176]	; (ce08 <LORAREG_InitGetAttrFnPtrsAU+0xdc>)
    cd58:	649a      	str	r2, [r3, #72]	; 0x48
    pGetAttr[DATA_RANGE_CH_BAND] = LORAREG_GetAttr_DRangeChBandT1;
    cd5a:	4a2c      	ldr	r2, [pc, #176]	; (ce0c <LORAREG_InitGetAttrFnPtrsAU+0xe0>)
    cd5c:	64da      	str	r2, [r3, #76]	; 0x4c
    pGetAttr[MIN_MAX_DR] = LORAREG_GetAttr_MinMaxDr;
    cd5e:	4a2c      	ldr	r2, [pc, #176]	; (ce10 <LORAREG_InitGetAttrFnPtrsAU+0xe4>)
    cd60:	651a      	str	r2, [r3, #80]	; 0x50
    pGetAttr[CHANNEL_ID_STATUS] = LORAREG_GetAttr_ChIdStatus;
    cd62:	4a2c      	ldr	r2, [pc, #176]	; (ce14 <LORAREG_InitGetAttrFnPtrsAU+0xe8>)
    cd64:	659a      	str	r2, [r3, #88]	; 0x58
    pGetAttr[RX1_WINDOW_PARAMS] = LORAREG_GetAttr_Rx1WindowparamsType1;
    cd66:	4a2c      	ldr	r2, [pc, #176]	; (ce18 <LORAREG_InitGetAttrFnPtrsAU+0xec>)
    cd68:	665a      	str	r2, [r3, #100]	; 0x64
	pGetAttr[JOIN_DUTY_CYCLE_TIMER]= LORAREG_GetAttr_JoinDutyCycleRemainingTime;
    cd6a:	492c      	ldr	r1, [pc, #176]	; (ce1c <LORAREG_InitGetAttrFnPtrsAU+0xf0>)
    cd6c:	2280      	movs	r2, #128	; 0x80
    cd6e:	5099      	str	r1, [r3, r2]
    pGetAttr[DUTY_CYCLE] = LORAREG_GetAttr_DutyCycleT1;
    cd70:	4a2b      	ldr	r2, [pc, #172]	; (ce20 <LORAREG_InitGetAttrFnPtrsAU+0xf4>)
    cd72:	679a      	str	r2, [r3, #120]	; 0x78
    pGetAttr[DUTY_CYCLE_TIMER] = LORAREG_GetAttr_MinDutyCycleTimer;	
    cd74:	4a2b      	ldr	r2, [pc, #172]	; (ce24 <LORAREG_InitGetAttrFnPtrsAU+0xf8>)
    cd76:	67da      	str	r2, [r3, #124]	; 0x7c
    pGetAttr[MODULATION_ATTR] = LORAREG_GetAttr_ModulationAttrT1;
    cd78:	492b      	ldr	r1, [pc, #172]	; (ce28 <LORAREG_InitGetAttrFnPtrsAU+0xfc>)
    cd7a:	228c      	movs	r2, #140	; 0x8c
    cd7c:	5099      	str	r1, [r3, r2]
    pGetAttr[BANDWIDTH_ATTR] = LORAREG_GetAttr_BandwidthAttrT1;
    cd7e:	492b      	ldr	r1, [pc, #172]	; (ce2c <LORAREG_InitGetAttrFnPtrsAU+0x100>)
    cd80:	3204      	adds	r2, #4
    cd82:	5099      	str	r1, [r3, r2]
    pGetAttr[SPREADING_FACTOR_ATTR] = LORAREG_GetAttr_SpreadFactorT1;
    cd84:	492a      	ldr	r1, [pc, #168]	; (ce30 <LORAREG_InitGetAttrFnPtrsAU+0x104>)
    cd86:	3204      	adds	r2, #4
    cd88:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_RECEIVE_DELAY1] = LORAREG_GetAttr_MacRecvDelay1;
    cd8a:	492a      	ldr	r1, [pc, #168]	; (ce34 <LORAREG_InitGetAttrFnPtrsAU+0x108>)
    cd8c:	3208      	adds	r2, #8
    cd8e:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_RECEIVE_DELAY2] = LORAREG_GetAttr_MacRecvDelay2;
    cd90:	4929      	ldr	r1, [pc, #164]	; (ce38 <LORAREG_InitGetAttrFnPtrsAU+0x10c>)
    cd92:	3204      	adds	r2, #4
    cd94:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_JOIN_ACCEPT_DELAY1] = LORAREG_GetAttr_MacJoinAcptDelay1;
    cd96:	4929      	ldr	r1, [pc, #164]	; (ce3c <LORAREG_InitGetAttrFnPtrsAU+0x110>)
    cd98:	3204      	adds	r2, #4
    cd9a:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_JOIN_ACCEPT_DELAY2] = LORAREG_GetAttr_MacJoinAcptDelay2;
    cd9c:	4928      	ldr	r1, [pc, #160]	; (ce40 <LORAREG_InitGetAttrFnPtrsAU+0x114>)
    cd9e:	3204      	adds	r2, #4
    cda0:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_ACK_TIMEOUT] = LORAREG_GetAttr_MacAckTimeout;
    cda2:	4928      	ldr	r1, [pc, #160]	; (ce44 <LORAREG_InitGetAttrFnPtrsAU+0x118>)
    cda4:	3204      	adds	r2, #4
    cda6:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_ADR_ACK_DELAY] = LORAREG_GetAttr_MacAdrAckDelay;
    cda8:	4927      	ldr	r1, [pc, #156]	; (ce48 <LORAREG_InitGetAttrFnPtrsAU+0x11c>)
    cdaa:	3204      	adds	r2, #4
    cdac:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_ADR_ACK_LIMIT] = LORAREG_GetAttr_MacAdrAckLimit;
    cdae:	4927      	ldr	r1, [pc, #156]	; (ce4c <LORAREG_InitGetAttrFnPtrsAU+0x120>)
    cdb0:	3204      	adds	r2, #4
    cdb2:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_MAX_FCNT_GAP] = LORAREG_GetAttr_MacMaxFcntGap;
    cdb4:	4926      	ldr	r1, [pc, #152]	; (ce50 <LORAREG_InitGetAttrFnPtrsAU+0x124>)
    cdb6:	3204      	adds	r2, #4
    cdb8:	5099      	str	r1, [r3, r2]
    pGetAttr[NEW_TX_CHANNEL_CONFIG] = LORAREG_GetAttr_NewTxChConfigT1;
    cdba:	4926      	ldr	r1, [pc, #152]	; (ce54 <LORAREG_InitGetAttrFnPtrsAU+0x128>)
    cdbc:	3204      	adds	r2, #4
    cdbe:	5099      	str	r1, [r3, r2]
    pGetAttr[FREE_CHANNEL] = LORAREG_GetAttr_FreeChannel1;
    cdc0:	4925      	ldr	r1, [pc, #148]	; (ce58 <LORAREG_InitGetAttrFnPtrsAU+0x12c>)
    cdc2:	3204      	adds	r2, #4
    cdc4:	5099      	str	r1, [r3, r2]
    pGetAttr[CURRENT_CHANNEL_INDEX] = LORAREG_GetAttr_CurChIndx;
    cdc6:	4925      	ldr	r1, [pc, #148]	; (ce5c <LORAREG_InitGetAttrFnPtrsAU+0x130>)
    cdc8:	3204      	adds	r2, #4
    cdca:	5099      	str	r1, [r3, r2]
    pGetAttr[REG_DEF_TX_POWER] = LORAREG_GetAttr_RegDefTxPwr;
    cdcc:	4924      	ldr	r1, [pc, #144]	; (ce60 <LORAREG_InitGetAttrFnPtrsAU+0x134>)
    cdce:	3214      	adds	r2, #20
    cdd0:	5099      	str	r1, [r3, r2]
    pGetAttr[REG_DEF_TX_DATARATE] = LORAREG_GetAttr_RegDefTxDR;
    cdd2:	4924      	ldr	r1, [pc, #144]	; (ce64 <LORAREG_InitGetAttrFnPtrsAU+0x138>)
    cdd4:	3204      	adds	r2, #4
    cdd6:	5099      	str	r1, [r3, r2]
}
    cdd8:	4770      	bx	lr
    cdda:	46c0      	nop			; (mov r8, r8)
    cddc:	20000c7c 	.word	0x20000c7c
    cde0:	000097fd 	.word	0x000097fd
    cde4:	0000c541 	.word	0x0000c541
    cde8:	0000c591 	.word	0x0000c591
    cdec:	0000c5dd 	.word	0x0000c5dd
    cdf0:	00009645 	.word	0x00009645
    cdf4:	00009655 	.word	0x00009655
    cdf8:	00009671 	.word	0x00009671
    cdfc:	00009681 	.word	0x00009681
    ce00:	0000a6f1 	.word	0x0000a6f1
    ce04:	00009691 	.word	0x00009691
    ce08:	000096a1 	.word	0x000096a1
    ce0c:	0000a5c5 	.word	0x0000a5c5
    ce10:	000099b1 	.word	0x000099b1
    ce14:	000096f1 	.word	0x000096f1
    ce18:	0000a519 	.word	0x0000a519
    ce1c:	0000a479 	.word	0x0000a479
    ce20:	0000973d 	.word	0x0000973d
    ce24:	00009747 	.word	0x00009747
    ce28:	0000c629 	.word	0x0000c629
    ce2c:	0000c675 	.word	0x0000c675
    ce30:	0000c6c1 	.word	0x0000c6c1
    ce34:	00009751 	.word	0x00009751
    ce38:	0000975b 	.word	0x0000975b
    ce3c:	00009765 	.word	0x00009765
    ce40:	00009771 	.word	0x00009771
    ce44:	0000977d 	.word	0x0000977d
    ce48:	00009787 	.word	0x00009787
    ce4c:	0000978f 	.word	0x0000978f
    ce50:	00009797 	.word	0x00009797
    ce54:	0000c7a9 	.word	0x0000c7a9
    ce58:	00009fd5 	.word	0x00009fd5
    ce5c:	000097c1 	.word	0x000097c1
    ce60:	000097a1 	.word	0x000097a1
    ce64:	000097b1 	.word	0x000097b1

0000ce68 <LORAREG_InitGetAttrFnPtrsIN>:
    pGetAttr[FREQUENCY] = LORAREG_GetAttr_FreqT2;
    ce68:	4b2a      	ldr	r3, [pc, #168]	; (cf14 <LORAREG_InitGetAttrFnPtrsIN+0xac>)
    ce6a:	4a2b      	ldr	r2, [pc, #172]	; (cf18 <LORAREG_InitGetAttrFnPtrsIN+0xb0>)
    ce6c:	601a      	str	r2, [r3, #0]
    pGetAttr[RX_WINDOW_SIZE] = LORAREG_GetAttr_RxWindowSizeT2;
    ce6e:	4a2b      	ldr	r2, [pc, #172]	; (cf1c <LORAREG_InitGetAttrFnPtrsIN+0xb4>)
    ce70:	60da      	str	r2, [r3, #12]
    pGetAttr[RX_WINDOW_OFFSET] = LORAREG_GetAttr_RxWindowOffsetT2;
    ce72:	4a2b      	ldr	r2, [pc, #172]	; (cf20 <LORAREG_InitGetAttrFnPtrsIN+0xb8>)
    ce74:	611a      	str	r2, [r3, #16]
    pGetAttr[MAX_PAYLOAD_SIZE] = LORAREG_GetAttr_MaxPayloadT2;
    ce76:	4a2b      	ldr	r2, [pc, #172]	; (cf24 <LORAREG_InitGetAttrFnPtrsIN+0xbc>)
    ce78:	615a      	str	r2, [r3, #20]
    pGetAttr[MAX_CHANNELS] = LORAREG_GetAttr_MaxChannel;
    ce7a:	4a2b      	ldr	r2, [pc, #172]	; (cf28 <LORAREG_InitGetAttrFnPtrsIN+0xc0>)
    ce7c:	619a      	str	r2, [r3, #24]
    pGetAttr[MIN_NEW_CH_INDEX] = LORAREG_GetAttr_MinNewChIndex;
    ce7e:	4a2b      	ldr	r2, [pc, #172]	; (cf2c <LORAREG_InitGetAttrFnPtrsIN+0xc4>)
    ce80:	61da      	str	r2, [r3, #28]
    pGetAttr[DEFAULT_RX1_DATA_RATE] = LORAREG_GetAttr_DefRx1DataRate;
    ce82:	4a2b      	ldr	r2, [pc, #172]	; (cf30 <LORAREG_InitGetAttrFnPtrsIN+0xc8>)
    ce84:	621a      	str	r2, [r3, #32]
    pGetAttr[DEFAULT_RX2_DATA_RATE] = LORAREG_GetAttr_DefRx2DataRate;
    ce86:	4a2b      	ldr	r2, [pc, #172]	; (cf34 <LORAREG_InitGetAttrFnPtrsIN+0xcc>)
    ce88:	625a      	str	r2, [r3, #36]	; 0x24
    pGetAttr[DEFAULT_RX2_FREQUENCY] = LORAREG_GetAttr_DefRx2Freq;
    ce8a:	4a2b      	ldr	r2, [pc, #172]	; (cf38 <LORAREG_InitGetAttrFnPtrsIN+0xd0>)
    ce8c:	629a      	str	r2, [r3, #40]	; 0x28
    pGetAttr[SUPPORTED_REGIONAL_FEATURES] = LORAREG_GetAttr_RegFeatures;
    ce8e:	4a2b      	ldr	r2, [pc, #172]	; (cf3c <LORAREG_InitGetAttrFnPtrsIN+0xd4>)
    ce90:	639a      	str	r2, [r3, #56]	; 0x38
    pGetAttr[DATA_RANGE] = LORAREG_GetAttr_DataRange;
    ce92:	4a2b      	ldr	r2, [pc, #172]	; (cf40 <LORAREG_InitGetAttrFnPtrsIN+0xd8>)
    ce94:	649a      	str	r2, [r3, #72]	; 0x48
    pGetAttr[DATA_RANGE_CH_BAND] = LORAREG_GetAttr_DRangeChBandT2;
    ce96:	4a2b      	ldr	r2, [pc, #172]	; (cf44 <LORAREG_InitGetAttrFnPtrsIN+0xdc>)
    ce98:	64da      	str	r2, [r3, #76]	; 0x4c
    pGetAttr[MIN_MAX_DR] = LORAREG_GetAttr_MinMaxDr;
    ce9a:	4a2b      	ldr	r2, [pc, #172]	; (cf48 <LORAREG_InitGetAttrFnPtrsIN+0xe0>)
    ce9c:	651a      	str	r2, [r3, #80]	; 0x50
    pGetAttr[CHANNEL_ID_STATUS] = LORAREG_GetAttr_ChIdStatus;
    ce9e:	4a2b      	ldr	r2, [pc, #172]	; (cf4c <LORAREG_InitGetAttrFnPtrsIN+0xe4>)
    cea0:	659a      	str	r2, [r3, #88]	; 0x58
    pGetAttr[RX1_WINDOW_PARAMS] = LORAREG_GetAttr_Rx1WindowparamsType3;
    cea2:	4a2b      	ldr	r2, [pc, #172]	; (cf50 <LORAREG_InitGetAttrFnPtrsIN+0xe8>)
    cea4:	665a      	str	r2, [r3, #100]	; 0x64
	pGetAttr[JOIN_DUTY_CYCLE_TIMER]= LORAREG_GetAttr_JoinDutyCycleRemainingTime;
    cea6:	492b      	ldr	r1, [pc, #172]	; (cf54 <LORAREG_InitGetAttrFnPtrsIN+0xec>)
    cea8:	2280      	movs	r2, #128	; 0x80
    ceaa:	5099      	str	r1, [r3, r2]
    pGetAttr[MODULATION_ATTR] = LORAREG_GetAttr_ModulationAttrT2;
    ceac:	492a      	ldr	r1, [pc, #168]	; (cf58 <LORAREG_InitGetAttrFnPtrsIN+0xf0>)
    ceae:	320c      	adds	r2, #12
    ceb0:	5099      	str	r1, [r3, r2]
    pGetAttr[BANDWIDTH_ATTR] = LORAREG_GetAttr_BandwidthAttrT2;
    ceb2:	492a      	ldr	r1, [pc, #168]	; (cf5c <LORAREG_InitGetAttrFnPtrsIN+0xf4>)
    ceb4:	3204      	adds	r2, #4
    ceb6:	5099      	str	r1, [r3, r2]
    pGetAttr[SPREADING_FACTOR_ATTR] = LORAREG_GetAttr_SpreadFactorT2;
    ceb8:	4929      	ldr	r1, [pc, #164]	; (cf60 <LORAREG_InitGetAttrFnPtrsIN+0xf8>)
    ceba:	3204      	adds	r2, #4
    cebc:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_RECEIVE_DELAY1] = LORAREG_GetAttr_MacRecvDelay1;
    cebe:	4929      	ldr	r1, [pc, #164]	; (cf64 <LORAREG_InitGetAttrFnPtrsIN+0xfc>)
    cec0:	3208      	adds	r2, #8
    cec2:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_RECEIVE_DELAY2] = LORAREG_GetAttr_MacRecvDelay2;
    cec4:	4928      	ldr	r1, [pc, #160]	; (cf68 <LORAREG_InitGetAttrFnPtrsIN+0x100>)
    cec6:	3204      	adds	r2, #4
    cec8:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_JOIN_ACCEPT_DELAY1] = LORAREG_GetAttr_MacJoinAcptDelay1;
    ceca:	4928      	ldr	r1, [pc, #160]	; (cf6c <LORAREG_InitGetAttrFnPtrsIN+0x104>)
    cecc:	3204      	adds	r2, #4
    cece:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_JOIN_ACCEPT_DELAY2] = LORAREG_GetAttr_MacJoinAcptDelay2;
    ced0:	4927      	ldr	r1, [pc, #156]	; (cf70 <LORAREG_InitGetAttrFnPtrsIN+0x108>)
    ced2:	3204      	adds	r2, #4
    ced4:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_ACK_TIMEOUT] = LORAREG_GetAttr_MacAckTimeout;
    ced6:	4927      	ldr	r1, [pc, #156]	; (cf74 <LORAREG_InitGetAttrFnPtrsIN+0x10c>)
    ced8:	3204      	adds	r2, #4
    ceda:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_ADR_ACK_DELAY] = LORAREG_GetAttr_MacAdrAckDelay;
    cedc:	4926      	ldr	r1, [pc, #152]	; (cf78 <LORAREG_InitGetAttrFnPtrsIN+0x110>)
    cede:	3204      	adds	r2, #4
    cee0:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_ADR_ACK_LIMIT] = LORAREG_GetAttr_MacAdrAckLimit;
    cee2:	4926      	ldr	r1, [pc, #152]	; (cf7c <LORAREG_InitGetAttrFnPtrsIN+0x114>)
    cee4:	3204      	adds	r2, #4
    cee6:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_MAX_FCNT_GAP] = LORAREG_GetAttr_MacMaxFcntGap;
    cee8:	4925      	ldr	r1, [pc, #148]	; (cf80 <LORAREG_InitGetAttrFnPtrsIN+0x118>)
    ceea:	3204      	adds	r2, #4
    ceec:	5099      	str	r1, [r3, r2]
    pGetAttr[NEW_TX_CHANNEL_CONFIG] = LORAREG_GetAttr_NewTxChConfigT2;
    ceee:	4925      	ldr	r1, [pc, #148]	; (cf84 <LORAREG_InitGetAttrFnPtrsIN+0x11c>)
    cef0:	3204      	adds	r2, #4
    cef2:	5099      	str	r1, [r3, r2]
    pGetAttr[FREE_CHANNEL] = LORAREG_GetAttr_FreeChannel2;
    cef4:	4924      	ldr	r1, [pc, #144]	; (cf88 <LORAREG_InitGetAttrFnPtrsIN+0x120>)
    cef6:	3204      	adds	r2, #4
    cef8:	5099      	str	r1, [r3, r2]
    pGetAttr[CURRENT_CHANNEL_INDEX] = LORAREG_GetAttr_CurChIndx;
    cefa:	4924      	ldr	r1, [pc, #144]	; (cf8c <LORAREG_InitGetAttrFnPtrsIN+0x124>)
    cefc:	3204      	adds	r2, #4
    cefe:	5099      	str	r1, [r3, r2]
    pGetAttr[DL_FREQUENCY] = LORAREG_GetAttr_DlFrequency;
    cf00:	4923      	ldr	r1, [pc, #140]	; (cf90 <LORAREG_InitGetAttrFnPtrsIN+0x128>)
    cf02:	320c      	adds	r2, #12
    cf04:	5099      	str	r1, [r3, r2]
    pGetAttr[REG_DEF_TX_POWER] = LORAREG_GetAttr_RegDefTxPwr;
    cf06:	4923      	ldr	r1, [pc, #140]	; (cf94 <LORAREG_InitGetAttrFnPtrsIN+0x12c>)
    cf08:	3208      	adds	r2, #8
    cf0a:	5099      	str	r1, [r3, r2]
    pGetAttr[REG_DEF_TX_DATARATE] = LORAREG_GetAttr_RegDefTxDR;
    cf0c:	4922      	ldr	r1, [pc, #136]	; (cf98 <LORAREG_InitGetAttrFnPtrsIN+0x130>)
    cf0e:	3204      	adds	r2, #4
    cf10:	5099      	str	r1, [r3, r2]
}
    cf12:	4770      	bx	lr
    cf14:	20000c7c 	.word	0x20000c7c
    cf18:	0000aa4d 	.word	0x0000aa4d
    cf1c:	0000c1e1 	.word	0x0000c1e1
    cf20:	0000c221 	.word	0x0000c221
    cf24:	0000c25d 	.word	0x0000c25d
    cf28:	00009645 	.word	0x00009645
    cf2c:	00009655 	.word	0x00009655
    cf30:	00009671 	.word	0x00009671
    cf34:	00009681 	.word	0x00009681
    cf38:	0000a6f1 	.word	0x0000a6f1
    cf3c:	00009691 	.word	0x00009691
    cf40:	000096a1 	.word	0x000096a1
    cf44:	0000a951 	.word	0x0000a951
    cf48:	000099b1 	.word	0x000099b1
    cf4c:	000096f1 	.word	0x000096f1
    cf50:	0000abd1 	.word	0x0000abd1
    cf54:	0000a479 	.word	0x0000a479
    cf58:	0000c295 	.word	0x0000c295
    cf5c:	0000c2cd 	.word	0x0000c2cd
    cf60:	0000c305 	.word	0x0000c305
    cf64:	00009751 	.word	0x00009751
    cf68:	0000975b 	.word	0x0000975b
    cf6c:	00009765 	.word	0x00009765
    cf70:	00009771 	.word	0x00009771
    cf74:	0000977d 	.word	0x0000977d
    cf78:	00009787 	.word	0x00009787
    cf7c:	0000978f 	.word	0x0000978f
    cf80:	00009797 	.word	0x00009797
    cf84:	0000c375 	.word	0x0000c375
    cf88:	0000b2e1 	.word	0x0000b2e1
    cf8c:	000097c1 	.word	0x000097c1
    cf90:	0000a709 	.word	0x0000a709
    cf94:	000097a1 	.word	0x000097a1
    cf98:	000097b1 	.word	0x000097b1

0000cf9c <LORAREG_InitGetAttrFnPtrsJP>:
    pGetAttr[FREQUENCY] = LORAREG_GetAttr_FreqT3;
    cf9c:	4b30      	ldr	r3, [pc, #192]	; (d060 <LORAREG_InitGetAttrFnPtrsJP+0xc4>)
    cf9e:	4a31      	ldr	r2, [pc, #196]	; (d064 <LORAREG_InitGetAttrFnPtrsJP+0xc8>)
    cfa0:	601a      	str	r2, [r3, #0]
    pGetAttr[RX_WINDOW_SIZE] = LORAREG_GetAttr_RxWindowSizeT2;
    cfa2:	4a31      	ldr	r2, [pc, #196]	; (d068 <LORAREG_InitGetAttrFnPtrsJP+0xcc>)
    cfa4:	60da      	str	r2, [r3, #12]
    pGetAttr[RX_WINDOW_OFFSET] = LORAREG_GetAttr_RxWindowOffsetT2;
    cfa6:	4a31      	ldr	r2, [pc, #196]	; (d06c <LORAREG_InitGetAttrFnPtrsJP+0xd0>)
    cfa8:	611a      	str	r2, [r3, #16]
    pGetAttr[MAX_PAYLOAD_SIZE] = LORAREG_GetAttr_MaxPayloadT3;
    cfaa:	4a31      	ldr	r2, [pc, #196]	; (d070 <LORAREG_InitGetAttrFnPtrsJP+0xd4>)
    cfac:	615a      	str	r2, [r3, #20]
    pGetAttr[MAX_CHANNELS] = LORAREG_GetAttr_MaxChannel;
    cfae:	4a31      	ldr	r2, [pc, #196]	; (d074 <LORAREG_InitGetAttrFnPtrsJP+0xd8>)
    cfb0:	619a      	str	r2, [r3, #24]
    pGetAttr[MIN_NEW_CH_INDEX] = LORAREG_GetAttr_MinNewChIndex;
    cfb2:	4a31      	ldr	r2, [pc, #196]	; (d078 <LORAREG_InitGetAttrFnPtrsJP+0xdc>)
    cfb4:	61da      	str	r2, [r3, #28]
    pGetAttr[DEFAULT_RX1_DATA_RATE] = LORAREG_GetAttr_DefRx1DataRate;
    cfb6:	4a31      	ldr	r2, [pc, #196]	; (d07c <LORAREG_InitGetAttrFnPtrsJP+0xe0>)
    cfb8:	621a      	str	r2, [r3, #32]
    pGetAttr[DEFAULT_RX2_DATA_RATE] = LORAREG_GetAttr_DefRx2DataRate;
    cfba:	4a31      	ldr	r2, [pc, #196]	; (d080 <LORAREG_InitGetAttrFnPtrsJP+0xe4>)
    cfbc:	625a      	str	r2, [r3, #36]	; 0x24
    pGetAttr[DEFAULT_RX2_FREQUENCY] = LORAREG_GetAttr_DefRx2Freq;
    cfbe:	4a31      	ldr	r2, [pc, #196]	; (d084 <LORAREG_InitGetAttrFnPtrsJP+0xe8>)
    cfc0:	629a      	str	r2, [r3, #40]	; 0x28
    pGetAttr[SUPPORTED_REGIONAL_FEATURES] = LORAREG_GetAttr_RegFeatures;
    cfc2:	4a31      	ldr	r2, [pc, #196]	; (d088 <LORAREG_InitGetAttrFnPtrsJP+0xec>)
    cfc4:	639a      	str	r2, [r3, #56]	; 0x38
    pGetAttr[DATA_RANGE] = LORAREG_GetAttr_DataRange;
    cfc6:	4a31      	ldr	r2, [pc, #196]	; (d08c <LORAREG_InitGetAttrFnPtrsJP+0xf0>)
    cfc8:	649a      	str	r2, [r3, #72]	; 0x48
    pGetAttr[DATA_RANGE_CH_BAND] = LORAREG_GetAttr_DRangeChBandT2;
    cfca:	4a31      	ldr	r2, [pc, #196]	; (d090 <LORAREG_InitGetAttrFnPtrsJP+0xf4>)
    cfcc:	64da      	str	r2, [r3, #76]	; 0x4c
    pGetAttr[MIN_MAX_DR] = LORAREG_GetAttr_MinMaxDr;
    cfce:	4a31      	ldr	r2, [pc, #196]	; (d094 <LORAREG_InitGetAttrFnPtrsJP+0xf8>)
    cfd0:	651a      	str	r2, [r3, #80]	; 0x50
    pGetAttr[CHANNEL_ID_STATUS] = LORAREG_GetAttr_ChIdStatus;
    cfd2:	4a31      	ldr	r2, [pc, #196]	; (d098 <LORAREG_InitGetAttrFnPtrsJP+0xfc>)
    cfd4:	659a      	str	r2, [r3, #88]	; 0x58
    pGetAttr[RX1_WINDOW_PARAMS] = LORAREG_GetAttr_Rx1WindowparamsType4;
    cfd6:	4a31      	ldr	r2, [pc, #196]	; (d09c <LORAREG_InitGetAttrFnPtrsJP+0x100>)
    cfd8:	665a      	str	r2, [r3, #100]	; 0x64
	pGetAttr[JOIN_DUTY_CYCLE_TIMER]= LORAREG_GetAttr_JoinDutyCycleRemainingTime;
    cfda:	4931      	ldr	r1, [pc, #196]	; (d0a0 <LORAREG_InitGetAttrFnPtrsJP+0x104>)
    cfdc:	2280      	movs	r2, #128	; 0x80
    cfde:	5099      	str	r1, [r3, r2]
    pGetAttr[MODULATION_ATTR] = LORAREG_GetAttr_ModulationAttrT2;
    cfe0:	4930      	ldr	r1, [pc, #192]	; (d0a4 <LORAREG_InitGetAttrFnPtrsJP+0x108>)
    cfe2:	320c      	adds	r2, #12
    cfe4:	5099      	str	r1, [r3, r2]
    pGetAttr[BANDWIDTH_ATTR] = LORAREG_GetAttr_BandwidthAttrT2;
    cfe6:	4930      	ldr	r1, [pc, #192]	; (d0a8 <LORAREG_InitGetAttrFnPtrsJP+0x10c>)
    cfe8:	3204      	adds	r2, #4
    cfea:	5099      	str	r1, [r3, r2]
    pGetAttr[SPREADING_FACTOR_ATTR] = LORAREG_GetAttr_SpreadFactorT2;
    cfec:	492f      	ldr	r1, [pc, #188]	; (d0ac <LORAREG_InitGetAttrFnPtrsJP+0x110>)
    cfee:	3204      	adds	r2, #4
    cff0:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_RECEIVE_DELAY1] = LORAREG_GetAttr_MacRecvDelay1;
    cff2:	492f      	ldr	r1, [pc, #188]	; (d0b0 <LORAREG_InitGetAttrFnPtrsJP+0x114>)
    cff4:	3208      	adds	r2, #8
    cff6:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_RECEIVE_DELAY2] = LORAREG_GetAttr_MacRecvDelay2;
    cff8:	492e      	ldr	r1, [pc, #184]	; (d0b4 <LORAREG_InitGetAttrFnPtrsJP+0x118>)
    cffa:	3204      	adds	r2, #4
    cffc:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_JOIN_ACCEPT_DELAY1] = LORAREG_GetAttr_MacJoinAcptDelay1;
    cffe:	492e      	ldr	r1, [pc, #184]	; (d0b8 <LORAREG_InitGetAttrFnPtrsJP+0x11c>)
    d000:	3204      	adds	r2, #4
    d002:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_JOIN_ACCEPT_DELAY2] = LORAREG_GetAttr_MacJoinAcptDelay2;
    d004:	492d      	ldr	r1, [pc, #180]	; (d0bc <LORAREG_InitGetAttrFnPtrsJP+0x120>)
    d006:	3204      	adds	r2, #4
    d008:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_ACK_TIMEOUT] = LORAREG_GetAttr_MacAckTimeout;
    d00a:	492d      	ldr	r1, [pc, #180]	; (d0c0 <LORAREG_InitGetAttrFnPtrsJP+0x124>)
    d00c:	3204      	adds	r2, #4
    d00e:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_ADR_ACK_DELAY] = LORAREG_GetAttr_MacAdrAckDelay;
    d010:	492c      	ldr	r1, [pc, #176]	; (d0c4 <LORAREG_InitGetAttrFnPtrsJP+0x128>)
    d012:	3204      	adds	r2, #4
    d014:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_ADR_ACK_LIMIT] = LORAREG_GetAttr_MacAdrAckLimit;
    d016:	492c      	ldr	r1, [pc, #176]	; (d0c8 <LORAREG_InitGetAttrFnPtrsJP+0x12c>)
    d018:	3204      	adds	r2, #4
    d01a:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_MAX_FCNT_GAP] = LORAREG_GetAttr_MacMaxFcntGap;
    d01c:	492b      	ldr	r1, [pc, #172]	; (d0cc <LORAREG_InitGetAttrFnPtrsJP+0x130>)
    d01e:	3204      	adds	r2, #4
    d020:	5099      	str	r1, [r3, r2]
    pGetAttr[NEW_TX_CHANNEL_CONFIG] = LORAREG_GetAttr_NewTxChConfigT2;
    d022:	492b      	ldr	r1, [pc, #172]	; (d0d0 <LORAREG_InitGetAttrFnPtrsJP+0x134>)
    d024:	3204      	adds	r2, #4
    d026:	5099      	str	r1, [r3, r2]
    pGetAttr[FREE_CHANNEL] = LORAREG_GetAttr_FreeChannel2;
    d028:	492a      	ldr	r1, [pc, #168]	; (d0d4 <LORAREG_InitGetAttrFnPtrsJP+0x138>)
    d02a:	3204      	adds	r2, #4
    d02c:	5099      	str	r1, [r3, r2]
    pGetAttr[CURRENT_CHANNEL_INDEX] = LORAREG_GetAttr_CurChIndx;
    d02e:	492a      	ldr	r1, [pc, #168]	; (d0d8 <LORAREG_InitGetAttrFnPtrsJP+0x13c>)
    d030:	3204      	adds	r2, #4
    d032:	5099      	str	r1, [r3, r2]
    pGetAttr[DEFAULT_LBT_PARAMS] = LORAREG_GetAttr_DefLBTParams;
    d034:	4929      	ldr	r1, [pc, #164]	; (d0dc <LORAREG_InitGetAttrFnPtrsJP+0x140>)
    d036:	3204      	adds	r2, #4
    d038:	5099      	str	r1, [r3, r2]
    pGetAttr[MIN_LBT_CHANNEL_PAUSE_TIMER] = LORAREG_GetAttr_minLBTChPauseTimer;
    d03a:	4929      	ldr	r1, [pc, #164]	; (d0e0 <LORAREG_InitGetAttrFnPtrsJP+0x144>)
    d03c:	3204      	adds	r2, #4
    d03e:	5099      	str	r1, [r3, r2]
    pGetAttr[DL_FREQUENCY] = LORAREG_GetAttr_DlFrequency;
    d040:	4928      	ldr	r1, [pc, #160]	; (d0e4 <LORAREG_InitGetAttrFnPtrsJP+0x148>)
    d042:	3204      	adds	r2, #4
    d044:	5099      	str	r1, [r3, r2]
    pGetAttr[REG_DEF_TX_POWER] = LORAREG_GetAttr_RegDefTxPwr;
    d046:	4928      	ldr	r1, [pc, #160]	; (d0e8 <LORAREG_InitGetAttrFnPtrsJP+0x14c>)
    d048:	3208      	adds	r2, #8
    d04a:	5099      	str	r1, [r3, r2]
    pGetAttr[REG_DEF_TX_DATARATE] = LORAREG_GetAttr_RegDefTxDR;
    d04c:	4927      	ldr	r1, [pc, #156]	; (d0ec <LORAREG_InitGetAttrFnPtrsJP+0x150>)
    d04e:	3204      	adds	r2, #4
    d050:	5099      	str	r1, [r3, r2]
	pGetAttr[DUTY_CYCLE] = LORAREG_GetAttr_DutyCycleT2;
    d052:	4a27      	ldr	r2, [pc, #156]	; (d0f0 <LORAREG_InitGetAttrFnPtrsJP+0x154>)
    d054:	679a      	str	r2, [r3, #120]	; 0x78
	pGetAttr[MIN_DUTY_CYCLE_TIMER] = LORAREG_GetAttr_DutyCycleTimer;
    d056:	4927      	ldr	r1, [pc, #156]	; (d0f4 <LORAREG_InitGetAttrFnPtrsJP+0x158>)
    d058:	2298      	movs	r2, #152	; 0x98
    d05a:	5099      	str	r1, [r3, r2]
}
    d05c:	4770      	bx	lr
    d05e:	46c0      	nop			; (mov r8, r8)
    d060:	20000c7c 	.word	0x20000c7c
    d064:	0000ab89 	.word	0x0000ab89
    d068:	0000c1e1 	.word	0x0000c1e1
    d06c:	0000c221 	.word	0x0000c221
    d070:	0000c17d 	.word	0x0000c17d
    d074:	00009645 	.word	0x00009645
    d078:	00009655 	.word	0x00009655
    d07c:	00009671 	.word	0x00009671
    d080:	00009681 	.word	0x00009681
    d084:	0000a6f1 	.word	0x0000a6f1
    d088:	00009691 	.word	0x00009691
    d08c:	000096a1 	.word	0x000096a1
    d090:	0000a951 	.word	0x0000a951
    d094:	000099b1 	.word	0x000099b1
    d098:	000096f1 	.word	0x000096f1
    d09c:	0000aa95 	.word	0x0000aa95
    d0a0:	0000a479 	.word	0x0000a479
    d0a4:	0000c295 	.word	0x0000c295
    d0a8:	0000c2cd 	.word	0x0000c2cd
    d0ac:	0000c305 	.word	0x0000c305
    d0b0:	00009751 	.word	0x00009751
    d0b4:	0000975b 	.word	0x0000975b
    d0b8:	00009765 	.word	0x00009765
    d0bc:	00009771 	.word	0x00009771
    d0c0:	0000977d 	.word	0x0000977d
    d0c4:	00009787 	.word	0x00009787
    d0c8:	0000978f 	.word	0x0000978f
    d0cc:	00009797 	.word	0x00009797
    d0d0:	0000c375 	.word	0x0000c375
    d0d4:	0000b2e1 	.word	0x0000b2e1
    d0d8:	000097c1 	.word	0x000097c1
    d0dc:	000097d1 	.word	0x000097d1
    d0e0:	0000ac59 	.word	0x0000ac59
    d0e4:	0000a709 	.word	0x0000a709
    d0e8:	000097a1 	.word	0x000097a1
    d0ec:	000097b1 	.word	0x000097b1
    d0f0:	00009969 	.word	0x00009969
    d0f4:	0000a751 	.word	0x0000a751

0000d0f8 <LORAREG_InitGetAttrFnPtrsKR>:
    pGetAttr[FREQUENCY] = LORAREG_GetAttr_FreqT2;
    d0f8:	4b2d      	ldr	r3, [pc, #180]	; (d1b0 <LORAREG_InitGetAttrFnPtrsKR+0xb8>)
    d0fa:	4a2e      	ldr	r2, [pc, #184]	; (d1b4 <LORAREG_InitGetAttrFnPtrsKR+0xbc>)
    d0fc:	601a      	str	r2, [r3, #0]
    pGetAttr[RX_WINDOW_SIZE] = LORAREG_GetAttr_RxWindowSizeT2;
    d0fe:	4a2e      	ldr	r2, [pc, #184]	; (d1b8 <LORAREG_InitGetAttrFnPtrsKR+0xc0>)
    d100:	60da      	str	r2, [r3, #12]
    pGetAttr[RX_WINDOW_OFFSET] = LORAREG_GetAttr_RxWindowOffsetT2;
    d102:	4a2e      	ldr	r2, [pc, #184]	; (d1bc <LORAREG_InitGetAttrFnPtrsKR+0xc4>)
    d104:	611a      	str	r2, [r3, #16]
    pGetAttr[MAX_PAYLOAD_SIZE] = LORAREG_GetAttr_MaxPayloadT2;
    d106:	4a2e      	ldr	r2, [pc, #184]	; (d1c0 <LORAREG_InitGetAttrFnPtrsKR+0xc8>)
    d108:	615a      	str	r2, [r3, #20]
    pGetAttr[MAX_CHANNELS] = LORAREG_GetAttr_MaxChannel;
    d10a:	4a2e      	ldr	r2, [pc, #184]	; (d1c4 <LORAREG_InitGetAttrFnPtrsKR+0xcc>)
    d10c:	619a      	str	r2, [r3, #24]
    pGetAttr[MIN_NEW_CH_INDEX] = LORAREG_GetAttr_MinNewChIndex;
    d10e:	4a2e      	ldr	r2, [pc, #184]	; (d1c8 <LORAREG_InitGetAttrFnPtrsKR+0xd0>)
    d110:	61da      	str	r2, [r3, #28]
    pGetAttr[DEFAULT_RX1_DATA_RATE] = LORAREG_GetAttr_DefRx1DataRate;
    d112:	4a2e      	ldr	r2, [pc, #184]	; (d1cc <LORAREG_InitGetAttrFnPtrsKR+0xd4>)
    d114:	621a      	str	r2, [r3, #32]
    pGetAttr[DEFAULT_RX2_DATA_RATE] = LORAREG_GetAttr_DefRx2DataRate;
    d116:	4a2e      	ldr	r2, [pc, #184]	; (d1d0 <LORAREG_InitGetAttrFnPtrsKR+0xd8>)
    d118:	625a      	str	r2, [r3, #36]	; 0x24
    pGetAttr[DEFAULT_RX2_FREQUENCY] = LORAREG_GetAttr_DefRx2Freq;
    d11a:	4a2e      	ldr	r2, [pc, #184]	; (d1d4 <LORAREG_InitGetAttrFnPtrsKR+0xdc>)
    d11c:	629a      	str	r2, [r3, #40]	; 0x28
    pGetAttr[SUPPORTED_REGIONAL_FEATURES] = LORAREG_GetAttr_RegFeatures;
    d11e:	4a2e      	ldr	r2, [pc, #184]	; (d1d8 <LORAREG_InitGetAttrFnPtrsKR+0xe0>)
    d120:	639a      	str	r2, [r3, #56]	; 0x38
    pGetAttr[DATA_RANGE] = LORAREG_GetAttr_DataRange;
    d122:	4a2e      	ldr	r2, [pc, #184]	; (d1dc <LORAREG_InitGetAttrFnPtrsKR+0xe4>)
    d124:	649a      	str	r2, [r3, #72]	; 0x48
    pGetAttr[DATA_RANGE_CH_BAND] = LORAREG_GetAttr_DRangeChBandT2;
    d126:	4a2e      	ldr	r2, [pc, #184]	; (d1e0 <LORAREG_InitGetAttrFnPtrsKR+0xe8>)
    d128:	64da      	str	r2, [r3, #76]	; 0x4c
    pGetAttr[MIN_MAX_DR] = LORAREG_GetAttr_MinMaxDr;
    d12a:	4a2e      	ldr	r2, [pc, #184]	; (d1e4 <LORAREG_InitGetAttrFnPtrsKR+0xec>)
    d12c:	651a      	str	r2, [r3, #80]	; 0x50
    pGetAttr[CHANNEL_ID_STATUS] = LORAREG_GetAttr_ChIdStatus;
    d12e:	4a2e      	ldr	r2, [pc, #184]	; (d1e8 <LORAREG_InitGetAttrFnPtrsKR+0xf0>)
    d130:	659a      	str	r2, [r3, #88]	; 0x58
    pGetAttr[RX1_WINDOW_PARAMS] = LORAREG_GetAttr_Rx1WindowparamsType2;
    d132:	4a2e      	ldr	r2, [pc, #184]	; (d1ec <LORAREG_InitGetAttrFnPtrsKR+0xf4>)
    d134:	665a      	str	r2, [r3, #100]	; 0x64
	pGetAttr[JOIN_DUTY_CYCLE_TIMER]=LORAREG_GetAttr_JoinDutyCycleRemainingTime;
    d136:	492e      	ldr	r1, [pc, #184]	; (d1f0 <LORAREG_InitGetAttrFnPtrsKR+0xf8>)
    d138:	2280      	movs	r2, #128	; 0x80
    d13a:	5099      	str	r1, [r3, r2]
    pGetAttr[MODULATION_ATTR] = LORAREG_GetAttr_ModulationAttrT2;
    d13c:	492d      	ldr	r1, [pc, #180]	; (d1f4 <LORAREG_InitGetAttrFnPtrsKR+0xfc>)
    d13e:	320c      	adds	r2, #12
    d140:	5099      	str	r1, [r3, r2]
    pGetAttr[BANDWIDTH_ATTR] = LORAREG_GetAttr_BandwidthAttrT2;
    d142:	492d      	ldr	r1, [pc, #180]	; (d1f8 <LORAREG_InitGetAttrFnPtrsKR+0x100>)
    d144:	3204      	adds	r2, #4
    d146:	5099      	str	r1, [r3, r2]
    pGetAttr[SPREADING_FACTOR_ATTR] = LORAREG_GetAttr_SpreadFactorT2;
    d148:	492c      	ldr	r1, [pc, #176]	; (d1fc <LORAREG_InitGetAttrFnPtrsKR+0x104>)
    d14a:	3204      	adds	r2, #4
    d14c:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_RECEIVE_DELAY1] = LORAREG_GetAttr_MacRecvDelay1;
    d14e:	492c      	ldr	r1, [pc, #176]	; (d200 <LORAREG_InitGetAttrFnPtrsKR+0x108>)
    d150:	3208      	adds	r2, #8
    d152:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_RECEIVE_DELAY2] = LORAREG_GetAttr_MacRecvDelay2;
    d154:	492b      	ldr	r1, [pc, #172]	; (d204 <LORAREG_InitGetAttrFnPtrsKR+0x10c>)
    d156:	3204      	adds	r2, #4
    d158:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_JOIN_ACCEPT_DELAY1] = LORAREG_GetAttr_MacJoinAcptDelay1;
    d15a:	492b      	ldr	r1, [pc, #172]	; (d208 <LORAREG_InitGetAttrFnPtrsKR+0x110>)
    d15c:	3204      	adds	r2, #4
    d15e:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_JOIN_ACCEPT_DELAY2] = LORAREG_GetAttr_MacJoinAcptDelay2;
    d160:	492a      	ldr	r1, [pc, #168]	; (d20c <LORAREG_InitGetAttrFnPtrsKR+0x114>)
    d162:	3204      	adds	r2, #4
    d164:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_ACK_TIMEOUT] = LORAREG_GetAttr_MacAckTimeout;
    d166:	492a      	ldr	r1, [pc, #168]	; (d210 <LORAREG_InitGetAttrFnPtrsKR+0x118>)
    d168:	3204      	adds	r2, #4
    d16a:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_ADR_ACK_DELAY] = LORAREG_GetAttr_MacAdrAckDelay;
    d16c:	4929      	ldr	r1, [pc, #164]	; (d214 <LORAREG_InitGetAttrFnPtrsKR+0x11c>)
    d16e:	3204      	adds	r2, #4
    d170:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_ADR_ACK_LIMIT] = LORAREG_GetAttr_MacAdrAckLimit;
    d172:	4929      	ldr	r1, [pc, #164]	; (d218 <LORAREG_InitGetAttrFnPtrsKR+0x120>)
    d174:	3204      	adds	r2, #4
    d176:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_MAX_FCNT_GAP] = LORAREG_GetAttr_MacMaxFcntGap;
    d178:	4928      	ldr	r1, [pc, #160]	; (d21c <LORAREG_InitGetAttrFnPtrsKR+0x124>)
    d17a:	3204      	adds	r2, #4
    d17c:	5099      	str	r1, [r3, r2]
    pGetAttr[NEW_TX_CHANNEL_CONFIG] = LORAREG_GetAttr_NewTxChConfigT2;
    d17e:	4928      	ldr	r1, [pc, #160]	; (d220 <LORAREG_InitGetAttrFnPtrsKR+0x128>)
    d180:	3204      	adds	r2, #4
    d182:	5099      	str	r1, [r3, r2]
    pGetAttr[FREE_CHANNEL] = LORAREG_GetAttr_FreeChannel2;
    d184:	4927      	ldr	r1, [pc, #156]	; (d224 <LORAREG_InitGetAttrFnPtrsKR+0x12c>)
    d186:	3204      	adds	r2, #4
    d188:	5099      	str	r1, [r3, r2]
    pGetAttr[CURRENT_CHANNEL_INDEX] = LORAREG_GetAttr_CurChIndx;
    d18a:	4927      	ldr	r1, [pc, #156]	; (d228 <LORAREG_InitGetAttrFnPtrsKR+0x130>)
    d18c:	3204      	adds	r2, #4
    d18e:	5099      	str	r1, [r3, r2]
    pGetAttr[DEFAULT_LBT_PARAMS] = LORAREG_GetAttr_DefLBTParams;
    d190:	4926      	ldr	r1, [pc, #152]	; (d22c <LORAREG_InitGetAttrFnPtrsKR+0x134>)
    d192:	3204      	adds	r2, #4
    d194:	5099      	str	r1, [r3, r2]
    pGetAttr[MIN_LBT_CHANNEL_PAUSE_TIMER] = LORAREG_GetAttr_minLBTChPauseTimer;
    d196:	4926      	ldr	r1, [pc, #152]	; (d230 <LORAREG_InitGetAttrFnPtrsKR+0x138>)
    d198:	3204      	adds	r2, #4
    d19a:	5099      	str	r1, [r3, r2]
    pGetAttr[DL_FREQUENCY] = LORAREG_GetAttr_DlFrequency;
    d19c:	4925      	ldr	r1, [pc, #148]	; (d234 <LORAREG_InitGetAttrFnPtrsKR+0x13c>)
    d19e:	3204      	adds	r2, #4
    d1a0:	5099      	str	r1, [r3, r2]
    pGetAttr[REG_DEF_TX_POWER] = LORAREG_GetAttr_RegDefTxPwr;
    d1a2:	4925      	ldr	r1, [pc, #148]	; (d238 <LORAREG_InitGetAttrFnPtrsKR+0x140>)
    d1a4:	3208      	adds	r2, #8
    d1a6:	5099      	str	r1, [r3, r2]
    pGetAttr[REG_DEF_TX_DATARATE] = LORAREG_GetAttr_RegDefTxDR;
    d1a8:	4924      	ldr	r1, [pc, #144]	; (d23c <LORAREG_InitGetAttrFnPtrsKR+0x144>)
    d1aa:	3204      	adds	r2, #4
    d1ac:	5099      	str	r1, [r3, r2]
}
    d1ae:	4770      	bx	lr
    d1b0:	20000c7c 	.word	0x20000c7c
    d1b4:	0000aa4d 	.word	0x0000aa4d
    d1b8:	0000c1e1 	.word	0x0000c1e1
    d1bc:	0000c221 	.word	0x0000c221
    d1c0:	0000c25d 	.word	0x0000c25d
    d1c4:	00009645 	.word	0x00009645
    d1c8:	00009655 	.word	0x00009655
    d1cc:	00009671 	.word	0x00009671
    d1d0:	00009681 	.word	0x00009681
    d1d4:	0000a6f1 	.word	0x0000a6f1
    d1d8:	00009691 	.word	0x00009691
    d1dc:	000096a1 	.word	0x000096a1
    d1e0:	0000a951 	.word	0x0000a951
    d1e4:	000099b1 	.word	0x000099b1
    d1e8:	000096f1 	.word	0x000096f1
    d1ec:	0000a8e5 	.word	0x0000a8e5
    d1f0:	0000a479 	.word	0x0000a479
    d1f4:	0000c295 	.word	0x0000c295
    d1f8:	0000c2cd 	.word	0x0000c2cd
    d1fc:	0000c305 	.word	0x0000c305
    d200:	00009751 	.word	0x00009751
    d204:	0000975b 	.word	0x0000975b
    d208:	00009765 	.word	0x00009765
    d20c:	00009771 	.word	0x00009771
    d210:	0000977d 	.word	0x0000977d
    d214:	00009787 	.word	0x00009787
    d218:	0000978f 	.word	0x0000978f
    d21c:	00009797 	.word	0x00009797
    d220:	0000c375 	.word	0x0000c375
    d224:	0000b2e1 	.word	0x0000b2e1
    d228:	000097c1 	.word	0x000097c1
    d22c:	000097d1 	.word	0x000097d1
    d230:	0000ac59 	.word	0x0000ac59
    d234:	0000a709 	.word	0x0000a709
    d238:	000097a1 	.word	0x000097a1
    d23c:	000097b1 	.word	0x000097b1

0000d240 <LORAREG_InitValidateAttrFnPtrsNA>:
    pValidateAttr[RX_FREQUENCY] = ValidateRxFreqT1;
    d240:	4b0d      	ldr	r3, [pc, #52]	; (d278 <LORAREG_InitValidateAttrFnPtrsNA+0x38>)
    d242:	4a0e      	ldr	r2, [pc, #56]	; (d27c <LORAREG_InitValidateAttrFnPtrsNA+0x3c>)
    d244:	605a      	str	r2, [r3, #4]
    pValidateAttr[TX_FREQUENCY] = ValidateTxFreqT1;
    d246:	4a0e      	ldr	r2, [pc, #56]	; (d280 <LORAREG_InitValidateAttrFnPtrsNA+0x40>)
    d248:	609a      	str	r2, [r3, #8]
    pValidateAttr[RX_DATARATE] = ValidateDataRateRxT1;
    d24a:	4a0e      	ldr	r2, [pc, #56]	; (d284 <LORAREG_InitValidateAttrFnPtrsNA+0x44>)
    d24c:	63da      	str	r2, [r3, #60]	; 0x3c
    pValidateAttr[TX_DATARATE] = ValidateDataRateTxT1;
    d24e:	490e      	ldr	r1, [pc, #56]	; (d288 <LORAREG_InitValidateAttrFnPtrsNA+0x48>)
    d250:	6419      	str	r1, [r3, #64]	; 0x40
    pValidateAttr[SUPPORTED_DR] = ValidateSupportedDr;
    d252:	490e      	ldr	r1, [pc, #56]	; (d28c <LORAREG_InitValidateAttrFnPtrsNA+0x4c>)
    d254:	6459      	str	r1, [r3, #68]	; 0x44
    pValidateAttr[DATA_RANGE] = ValidateDataRange;
    d256:	490e      	ldr	r1, [pc, #56]	; (d290 <LORAREG_InitValidateAttrFnPtrsNA+0x50>)
    d258:	6499      	str	r1, [r3, #72]	; 0x48
    pValidateAttr[CHANNEL_ID] = ValidateChannelId;
    d25a:	490e      	ldr	r1, [pc, #56]	; (d294 <LORAREG_InitValidateAttrFnPtrsNA+0x54>)
    d25c:	6559      	str	r1, [r3, #84]	; 0x54
    pValidateAttr[RX2_DATARATE] = ValidateDataRateRxT1;
    d25e:	65da      	str	r2, [r3, #92]	; 0x5c
    pValidateAttr[RX1_DATARATE_OFFSET] = ValidateRx1DataRateOffset;
    d260:	4a0d      	ldr	r2, [pc, #52]	; (d298 <LORAREG_InitValidateAttrFnPtrsNA+0x58>)
    d262:	661a      	str	r2, [r3, #96]	; 0x60
    pValidateAttr[CHANNEL_MASK] = ValidateChannelMask;
    d264:	4a0d      	ldr	r2, [pc, #52]	; (d29c <LORAREG_InitValidateAttrFnPtrsNA+0x5c>)
    d266:	669a      	str	r2, [r3, #104]	; 0x68
    pValidateAttr[CHANNEL_MASK_CNTL] = ValidateChannelMaskCntl;
    d268:	4a0d      	ldr	r2, [pc, #52]	; (d2a0 <LORAREG_InitValidateAttrFnPtrsNA+0x60>)
    d26a:	66da      	str	r2, [r3, #108]	; 0x6c
    pValidateAttr[TX_PWR] = ValidateTxPower;
    d26c:	4a0d      	ldr	r2, [pc, #52]	; (d2a4 <LORAREG_InitValidateAttrFnPtrsNA+0x64>)
    d26e:	675a      	str	r2, [r3, #116]	; 0x74
    pValidateAttr[CHMASK_CHCNTL] = ValidateChMaskChCntl;
    d270:	490d      	ldr	r1, [pc, #52]	; (d2a8 <LORAREG_InitValidateAttrFnPtrsNA+0x68>)
    d272:	22e0      	movs	r2, #224	; 0xe0
    d274:	5099      	str	r1, [r3, r2]
}
    d276:	4770      	bx	lr
    d278:	20000e64 	.word	0x20000e64
    d27c:	00009ba5 	.word	0x00009ba5
    d280:	0000c70d 	.word	0x0000c70d
    d284:	000098d5 	.word	0x000098d5
    d288:	00009891 	.word	0x00009891
    d28c:	00009b49 	.word	0x00009b49
    d290:	0000c469 	.word	0x0000c469
    d294:	00009925 	.word	0x00009925
    d298:	00009bd9 	.word	0x00009bd9
    d29c:	00009a71 	.word	0x00009a71
    d2a0:	00009a45 	.word	0x00009a45
    d2a4:	00009a59 	.word	0x00009a59
    d2a8:	0000c33d 	.word	0x0000c33d

0000d2ac <LORAREG_InitValidateAttrFnPtrsEU>:
	pValidateAttr[RX_FREQUENCY] = ValidateFreq;
    d2ac:	4b0d      	ldr	r3, [pc, #52]	; (d2e4 <LORAREG_InitValidateAttrFnPtrsEU+0x38>)
    d2ae:	4a0e      	ldr	r2, [pc, #56]	; (d2e8 <LORAREG_InitValidateAttrFnPtrsEU+0x3c>)
    d2b0:	605a      	str	r2, [r3, #4]
	pValidateAttr[TX_FREQUENCY] = ValidateTxFreqT2;
    d2b2:	4a0e      	ldr	r2, [pc, #56]	; (d2ec <LORAREG_InitValidateAttrFnPtrsEU+0x40>)
    d2b4:	609a      	str	r2, [r3, #8]
	pValidateAttr[RX_DATARATE] = ValidateDataRate;
    d2b6:	4a0e      	ldr	r2, [pc, #56]	; (d2f0 <LORAREG_InitValidateAttrFnPtrsEU+0x44>)
    d2b8:	63da      	str	r2, [r3, #60]	; 0x3c
	pValidateAttr[TX_DATARATE] = ValidateDataRate;
    d2ba:	641a      	str	r2, [r3, #64]	; 0x40
	pValidateAttr[SUPPORTED_DR] = ValidateSupportedDr;
    d2bc:	490d      	ldr	r1, [pc, #52]	; (d2f4 <LORAREG_InitValidateAttrFnPtrsEU+0x48>)
    d2be:	6459      	str	r1, [r3, #68]	; 0x44
	pValidateAttr[DATA_RANGE] = ValidateDataRangeT2;
    d2c0:	490d      	ldr	r1, [pc, #52]	; (d2f8 <LORAREG_InitValidateAttrFnPtrsEU+0x4c>)
    d2c2:	6499      	str	r1, [r3, #72]	; 0x48
	pValidateAttr[CHANNEL_ID] = ValidateChannelIdT2;
    d2c4:	490d      	ldr	r1, [pc, #52]	; (d2fc <LORAREG_InitValidateAttrFnPtrsEU+0x50>)
    d2c6:	6559      	str	r1, [r3, #84]	; 0x54
	pValidateAttr[RX2_DATARATE] = ValidateDataRate;
    d2c8:	65da      	str	r2, [r3, #92]	; 0x5c
	pValidateAttr[RX1_DATARATE_OFFSET] = ValidateRx1DataRateOffset;
    d2ca:	4a0d      	ldr	r2, [pc, #52]	; (d300 <LORAREG_InitValidateAttrFnPtrsEU+0x54>)
    d2cc:	661a      	str	r2, [r3, #96]	; 0x60
	pValidateAttr[CHANNEL_MASK] = ValidateChannelMaskT2;
    d2ce:	4a0d      	ldr	r2, [pc, #52]	; (d304 <LORAREG_InitValidateAttrFnPtrsEU+0x58>)
    d2d0:	669a      	str	r2, [r3, #104]	; 0x68
	pValidateAttr[CHANNEL_MASK_CNTL] = ValidateChannelMaskCntlT2;
    d2d2:	4a0d      	ldr	r2, [pc, #52]	; (d308 <LORAREG_InitValidateAttrFnPtrsEU+0x5c>)
    d2d4:	66da      	str	r2, [r3, #108]	; 0x6c
	pValidateAttr[TX_PWR] = ValidateTxPower;
    d2d6:	4a0d      	ldr	r2, [pc, #52]	; (d30c <LORAREG_InitValidateAttrFnPtrsEU+0x60>)
    d2d8:	675a      	str	r2, [r3, #116]	; 0x74
	pValidateAttr[CHMASK_CHCNTL] = ValidateChMaskChCntlT2;
    d2da:	490d      	ldr	r1, [pc, #52]	; (d310 <LORAREG_InitValidateAttrFnPtrsEU+0x64>)
    d2dc:	22e0      	movs	r2, #224	; 0xe0
    d2de:	5099      	str	r1, [r3, r2]
}
    d2e0:	4770      	bx	lr
    d2e2:	46c0      	nop			; (mov r8, r8)
    d2e4:	20000e64 	.word	0x20000e64
    d2e8:	00009c61 	.word	0x00009c61
    d2ec:	0000ad29 	.word	0x0000ad29
    d2f0:	00009b31 	.word	0x00009b31
    d2f4:	00009b49 	.word	0x00009b49
    d2f8:	0000c08d 	.word	0x0000c08d
    d2fc:	0000993d 	.word	0x0000993d
    d300:	00009bd9 	.word	0x00009bd9
    d304:	00009a75 	.word	0x00009a75
    d308:	00009ac9 	.word	0x00009ac9
    d30c:	00009a59 	.word	0x00009a59
    d310:	00009add 	.word	0x00009add

0000d314 <LORAREG_InitValidateAttrFnPtrsAS>:
	pValidateAttr[RX_FREQUENCY] = ValidateFrequencyAS;
    d314:	4b0d      	ldr	r3, [pc, #52]	; (d34c <LORAREG_InitValidateAttrFnPtrsAS+0x38>)
    d316:	4a0e      	ldr	r2, [pc, #56]	; (d350 <LORAREG_InitValidateAttrFnPtrsAS+0x3c>)
    d318:	605a      	str	r2, [r3, #4]
	pValidateAttr[TX_FREQUENCY] = ValidateTxFreqT2;
    d31a:	4a0e      	ldr	r2, [pc, #56]	; (d354 <LORAREG_InitValidateAttrFnPtrsAS+0x40>)
    d31c:	609a      	str	r2, [r3, #8]
	pValidateAttr[RX_DATARATE] = ValidateDataRateRxT2;
    d31e:	4a0e      	ldr	r2, [pc, #56]	; (d358 <LORAREG_InitValidateAttrFnPtrsAS+0x44>)
    d320:	63da      	str	r2, [r3, #60]	; 0x3c
	pValidateAttr[TX_DATARATE] = ValidateDataRateTxT2;
    d322:	490e      	ldr	r1, [pc, #56]	; (d35c <LORAREG_InitValidateAttrFnPtrsAS+0x48>)
    d324:	6419      	str	r1, [r3, #64]	; 0x40
	pValidateAttr[SUPPORTED_DR] = ValidateSupportedDr;
    d326:	490e      	ldr	r1, [pc, #56]	; (d360 <LORAREG_InitValidateAttrFnPtrsAS+0x4c>)
    d328:	6459      	str	r1, [r3, #68]	; 0x44
	pValidateAttr[DATA_RANGE] = ValidateDataRangeT2;
    d32a:	490e      	ldr	r1, [pc, #56]	; (d364 <LORAREG_InitValidateAttrFnPtrsAS+0x50>)
    d32c:	6499      	str	r1, [r3, #72]	; 0x48
	pValidateAttr[CHANNEL_ID] = ValidateChannelIdT2;
    d32e:	490e      	ldr	r1, [pc, #56]	; (d368 <LORAREG_InitValidateAttrFnPtrsAS+0x54>)
    d330:	6559      	str	r1, [r3, #84]	; 0x54
	pValidateAttr[RX2_DATARATE] = ValidateDataRateRxT2;
    d332:	65da      	str	r2, [r3, #92]	; 0x5c
	pValidateAttr[RX1_DATARATE_OFFSET] = ValidateRx1DataRateOffset;
    d334:	4a0d      	ldr	r2, [pc, #52]	; (d36c <LORAREG_InitValidateAttrFnPtrsAS+0x58>)
    d336:	661a      	str	r2, [r3, #96]	; 0x60
	pValidateAttr[CHANNEL_MASK] = ValidateChannelMaskT2;
    d338:	4a0d      	ldr	r2, [pc, #52]	; (d370 <LORAREG_InitValidateAttrFnPtrsAS+0x5c>)
    d33a:	669a      	str	r2, [r3, #104]	; 0x68
	pValidateAttr[CHANNEL_MASK_CNTL] = ValidateChannelMaskCntlT2;
    d33c:	4a0d      	ldr	r2, [pc, #52]	; (d374 <LORAREG_InitValidateAttrFnPtrsAS+0x60>)
    d33e:	66da      	str	r2, [r3, #108]	; 0x6c
	pValidateAttr[TX_PWR] = ValidateTxPower;
    d340:	4a0d      	ldr	r2, [pc, #52]	; (d378 <LORAREG_InitValidateAttrFnPtrsAS+0x64>)
    d342:	675a      	str	r2, [r3, #116]	; 0x74
	pValidateAttr[CHMASK_CHCNTL] = ValidateChMaskChCntlT2;
    d344:	490d      	ldr	r1, [pc, #52]	; (d37c <LORAREG_InitValidateAttrFnPtrsAS+0x68>)
    d346:	22e0      	movs	r2, #224	; 0xe0
    d348:	5099      	str	r1, [r3, r2]
}
    d34a:	4770      	bx	lr
    d34c:	20000e64 	.word	0x20000e64
    d350:	00009c7d 	.word	0x00009c7d
    d354:	0000ad29 	.word	0x0000ad29
    d358:	000098f9 	.word	0x000098f9
    d35c:	000098a9 	.word	0x000098a9
    d360:	00009b49 	.word	0x00009b49
    d364:	0000c08d 	.word	0x0000c08d
    d368:	0000993d 	.word	0x0000993d
    d36c:	00009bd9 	.word	0x00009bd9
    d370:	00009a75 	.word	0x00009a75
    d374:	00009ac9 	.word	0x00009ac9
    d378:	00009a59 	.word	0x00009a59
    d37c:	00009add 	.word	0x00009add

0000d380 <LORAREG_InitValidateAttrFnPtrsAU>:
	pValidateAttr[RX_FREQUENCY] = ValidateRxFreqT1;
    d380:	4b0d      	ldr	r3, [pc, #52]	; (d3b8 <LORAREG_InitValidateAttrFnPtrsAU+0x38>)
    d382:	4a0e      	ldr	r2, [pc, #56]	; (d3bc <LORAREG_InitValidateAttrFnPtrsAU+0x3c>)
    d384:	605a      	str	r2, [r3, #4]
	pValidateAttr[TX_FREQUENCY] = ValidateTxFreqT1;
    d386:	4a0e      	ldr	r2, [pc, #56]	; (d3c0 <LORAREG_InitValidateAttrFnPtrsAU+0x40>)
    d388:	609a      	str	r2, [r3, #8]
	pValidateAttr[RX_DATARATE] = ValidateDataRateRxT1;
    d38a:	4a0e      	ldr	r2, [pc, #56]	; (d3c4 <LORAREG_InitValidateAttrFnPtrsAU+0x44>)
    d38c:	63da      	str	r2, [r3, #60]	; 0x3c
	pValidateAttr[TX_DATARATE] = ValidateDataRateTxT1;
    d38e:	490e      	ldr	r1, [pc, #56]	; (d3c8 <LORAREG_InitValidateAttrFnPtrsAU+0x48>)
    d390:	6419      	str	r1, [r3, #64]	; 0x40
	pValidateAttr[SUPPORTED_DR] = ValidateSupportedDr;
    d392:	490e      	ldr	r1, [pc, #56]	; (d3cc <LORAREG_InitValidateAttrFnPtrsAU+0x4c>)
    d394:	6459      	str	r1, [r3, #68]	; 0x44
	pValidateAttr[DATA_RANGE] = ValidateDataRange;
    d396:	490e      	ldr	r1, [pc, #56]	; (d3d0 <LORAREG_InitValidateAttrFnPtrsAU+0x50>)
    d398:	6499      	str	r1, [r3, #72]	; 0x48
	pValidateAttr[CHANNEL_ID] = ValidateChannelId;
    d39a:	490e      	ldr	r1, [pc, #56]	; (d3d4 <LORAREG_InitValidateAttrFnPtrsAU+0x54>)
    d39c:	6559      	str	r1, [r3, #84]	; 0x54
	pValidateAttr[RX2_DATARATE] = ValidateDataRateRxT1;
    d39e:	65da      	str	r2, [r3, #92]	; 0x5c
	pValidateAttr[RX1_DATARATE_OFFSET] = ValidateRx1DataRateOffset;
    d3a0:	4a0d      	ldr	r2, [pc, #52]	; (d3d8 <LORAREG_InitValidateAttrFnPtrsAU+0x58>)
    d3a2:	661a      	str	r2, [r3, #96]	; 0x60
	pValidateAttr[CHANNEL_MASK] = ValidateChannelMask;
    d3a4:	4a0d      	ldr	r2, [pc, #52]	; (d3dc <LORAREG_InitValidateAttrFnPtrsAU+0x5c>)
    d3a6:	669a      	str	r2, [r3, #104]	; 0x68
	pValidateAttr[CHANNEL_MASK_CNTL] = ValidateChannelMaskCntl;
    d3a8:	4a0d      	ldr	r2, [pc, #52]	; (d3e0 <LORAREG_InitValidateAttrFnPtrsAU+0x60>)
    d3aa:	66da      	str	r2, [r3, #108]	; 0x6c
	pValidateAttr[TX_PWR] = ValidateTxPower;
    d3ac:	4a0d      	ldr	r2, [pc, #52]	; (d3e4 <LORAREG_InitValidateAttrFnPtrsAU+0x64>)
    d3ae:	675a      	str	r2, [r3, #116]	; 0x74
	pValidateAttr[CHMASK_CHCNTL] = ValidateChMaskChCntl;
    d3b0:	490d      	ldr	r1, [pc, #52]	; (d3e8 <LORAREG_InitValidateAttrFnPtrsAU+0x68>)
    d3b2:	22e0      	movs	r2, #224	; 0xe0
    d3b4:	5099      	str	r1, [r3, r2]
}
    d3b6:	4770      	bx	lr
    d3b8:	20000e64 	.word	0x20000e64
    d3bc:	00009ba5 	.word	0x00009ba5
    d3c0:	0000c70d 	.word	0x0000c70d
    d3c4:	000098d5 	.word	0x000098d5
    d3c8:	00009891 	.word	0x00009891
    d3cc:	00009b49 	.word	0x00009b49
    d3d0:	0000c469 	.word	0x0000c469
    d3d4:	00009925 	.word	0x00009925
    d3d8:	00009bd9 	.word	0x00009bd9
    d3dc:	00009a71 	.word	0x00009a71
    d3e0:	00009a45 	.word	0x00009a45
    d3e4:	00009a59 	.word	0x00009a59
    d3e8:	0000c33d 	.word	0x0000c33d

0000d3ec <LORAREG_InitValidateAttrFnPtrsIN>:
	pValidateAttr[RX_FREQUENCY] = ValidateFreqIN;
    d3ec:	4b0d      	ldr	r3, [pc, #52]	; (d424 <LORAREG_InitValidateAttrFnPtrsIN+0x38>)
    d3ee:	4a0e      	ldr	r2, [pc, #56]	; (d428 <LORAREG_InitValidateAttrFnPtrsIN+0x3c>)
    d3f0:	605a      	str	r2, [r3, #4]
	pValidateAttr[TX_FREQUENCY] = ValidateTxFreqT2;
    d3f2:	4a0e      	ldr	r2, [pc, #56]	; (d42c <LORAREG_InitValidateAttrFnPtrsIN+0x40>)
    d3f4:	609a      	str	r2, [r3, #8]
	pValidateAttr[RX_DATARATE] = ValidateDataRate;
    d3f6:	4a0e      	ldr	r2, [pc, #56]	; (d430 <LORAREG_InitValidateAttrFnPtrsIN+0x44>)
    d3f8:	63da      	str	r2, [r3, #60]	; 0x3c
	pValidateAttr[TX_DATARATE] = ValidateDataRate;
    d3fa:	641a      	str	r2, [r3, #64]	; 0x40
	pValidateAttr[SUPPORTED_DR] = ValidateSupportedDr;
    d3fc:	490d      	ldr	r1, [pc, #52]	; (d434 <LORAREG_InitValidateAttrFnPtrsIN+0x48>)
    d3fe:	6459      	str	r1, [r3, #68]	; 0x44
	pValidateAttr[DATA_RANGE] = ValidateDataRangeT2;
    d400:	490d      	ldr	r1, [pc, #52]	; (d438 <LORAREG_InitValidateAttrFnPtrsIN+0x4c>)
    d402:	6499      	str	r1, [r3, #72]	; 0x48
	pValidateAttr[CHANNEL_ID] = ValidateChannelIdT2;
    d404:	490d      	ldr	r1, [pc, #52]	; (d43c <LORAREG_InitValidateAttrFnPtrsIN+0x50>)
    d406:	6559      	str	r1, [r3, #84]	; 0x54
	pValidateAttr[RX2_DATARATE] = ValidateDataRate;
    d408:	65da      	str	r2, [r3, #92]	; 0x5c
	pValidateAttr[RX1_DATARATE_OFFSET] = ValidateRx1DataRateOffset;
    d40a:	4a0d      	ldr	r2, [pc, #52]	; (d440 <LORAREG_InitValidateAttrFnPtrsIN+0x54>)
    d40c:	661a      	str	r2, [r3, #96]	; 0x60
	pValidateAttr[CHANNEL_MASK] = ValidateChannelMaskT2;
    d40e:	4a0d      	ldr	r2, [pc, #52]	; (d444 <LORAREG_InitValidateAttrFnPtrsIN+0x58>)
    d410:	669a      	str	r2, [r3, #104]	; 0x68
	pValidateAttr[CHANNEL_MASK_CNTL] = ValidateChannelMaskCntlT2;
    d412:	4a0d      	ldr	r2, [pc, #52]	; (d448 <LORAREG_InitValidateAttrFnPtrsIN+0x5c>)
    d414:	66da      	str	r2, [r3, #108]	; 0x6c
	pValidateAttr[TX_PWR] = ValidateTxPower;
    d416:	4a0d      	ldr	r2, [pc, #52]	; (d44c <LORAREG_InitValidateAttrFnPtrsIN+0x60>)
    d418:	675a      	str	r2, [r3, #116]	; 0x74
	pValidateAttr[CHMASK_CHCNTL] = ValidateChMaskChCntlT2;
    d41a:	490d      	ldr	r1, [pc, #52]	; (d450 <LORAREG_InitValidateAttrFnPtrsIN+0x64>)
    d41c:	22e0      	movs	r2, #224	; 0xe0
    d41e:	5099      	str	r1, [r3, r2]
}
    d420:	4770      	bx	lr
    d422:	46c0      	nop			; (mov r8, r8)
    d424:	20000e64 	.word	0x20000e64
    d428:	0000ad4d 	.word	0x0000ad4d
    d42c:	0000ad29 	.word	0x0000ad29
    d430:	00009b31 	.word	0x00009b31
    d434:	00009b49 	.word	0x00009b49
    d438:	0000c08d 	.word	0x0000c08d
    d43c:	0000993d 	.word	0x0000993d
    d440:	00009bd9 	.word	0x00009bd9
    d444:	00009a75 	.word	0x00009a75
    d448:	00009ac9 	.word	0x00009ac9
    d44c:	00009a59 	.word	0x00009a59
    d450:	00009add 	.word	0x00009add

0000d454 <LORAREG_InitValidateAttrFnPtrsJP>:
	pValidateAttr[RX_FREQUENCY] = ValidateFreqJP;
    d454:	4b0d      	ldr	r3, [pc, #52]	; (d48c <LORAREG_InitValidateAttrFnPtrsJP+0x38>)
    d456:	4a0e      	ldr	r2, [pc, #56]	; (d490 <LORAREG_InitValidateAttrFnPtrsJP+0x3c>)
    d458:	605a      	str	r2, [r3, #4]
	pValidateAttr[TX_FREQUENCY] = ValidateTxFreqT2;
    d45a:	4a0e      	ldr	r2, [pc, #56]	; (d494 <LORAREG_InitValidateAttrFnPtrsJP+0x40>)
    d45c:	609a      	str	r2, [r3, #8]
	pValidateAttr[RX_DATARATE] = ValidateDataRateRxT2;
    d45e:	4a0e      	ldr	r2, [pc, #56]	; (d498 <LORAREG_InitValidateAttrFnPtrsJP+0x44>)
    d460:	63da      	str	r2, [r3, #60]	; 0x3c
	pValidateAttr[TX_DATARATE] = ValidateDataRateTxT2;
    d462:	490e      	ldr	r1, [pc, #56]	; (d49c <LORAREG_InitValidateAttrFnPtrsJP+0x48>)
    d464:	6419      	str	r1, [r3, #64]	; 0x40
	pValidateAttr[SUPPORTED_DR] = ValidateSupportedDr;
    d466:	490e      	ldr	r1, [pc, #56]	; (d4a0 <LORAREG_InitValidateAttrFnPtrsJP+0x4c>)
    d468:	6459      	str	r1, [r3, #68]	; 0x44
	pValidateAttr[DATA_RANGE] = ValidateDataRangeT2;
    d46a:	490e      	ldr	r1, [pc, #56]	; (d4a4 <LORAREG_InitValidateAttrFnPtrsJP+0x50>)
    d46c:	6499      	str	r1, [r3, #72]	; 0x48
	pValidateAttr[CHANNEL_ID] = ValidateChannelIdT2;
    d46e:	490e      	ldr	r1, [pc, #56]	; (d4a8 <LORAREG_InitValidateAttrFnPtrsJP+0x54>)
    d470:	6559      	str	r1, [r3, #84]	; 0x54
	pValidateAttr[RX2_DATARATE] = ValidateDataRateRxT2;
    d472:	65da      	str	r2, [r3, #92]	; 0x5c
	pValidateAttr[RX1_DATARATE_OFFSET] = ValidateRx1DataRateOffset;
    d474:	4a0d      	ldr	r2, [pc, #52]	; (d4ac <LORAREG_InitValidateAttrFnPtrsJP+0x58>)
    d476:	661a      	str	r2, [r3, #96]	; 0x60
	pValidateAttr[CHANNEL_MASK] = ValidateChannelMaskT2;
    d478:	4a0d      	ldr	r2, [pc, #52]	; (d4b0 <LORAREG_InitValidateAttrFnPtrsJP+0x5c>)
    d47a:	669a      	str	r2, [r3, #104]	; 0x68
	pValidateAttr[CHANNEL_MASK_CNTL] = ValidateChannelMaskCntlT2;
    d47c:	4a0d      	ldr	r2, [pc, #52]	; (d4b4 <LORAREG_InitValidateAttrFnPtrsJP+0x60>)
    d47e:	66da      	str	r2, [r3, #108]	; 0x6c
	pValidateAttr[TX_PWR] = ValidateTxPower;
    d480:	4a0d      	ldr	r2, [pc, #52]	; (d4b8 <LORAREG_InitValidateAttrFnPtrsJP+0x64>)
    d482:	675a      	str	r2, [r3, #116]	; 0x74
	pValidateAttr[CHMASK_CHCNTL] = ValidateChMaskChCntlT2;
    d484:	490d      	ldr	r1, [pc, #52]	; (d4bc <LORAREG_InitValidateAttrFnPtrsJP+0x68>)
    d486:	22e0      	movs	r2, #224	; 0xe0
    d488:	5099      	str	r1, [r3, r2]
}
    d48a:	4770      	bx	lr
    d48c:	20000e64 	.word	0x20000e64
    d490:	0000ad7d 	.word	0x0000ad7d
    d494:	0000ad29 	.word	0x0000ad29
    d498:	000098f9 	.word	0x000098f9
    d49c:	000098a9 	.word	0x000098a9
    d4a0:	00009b49 	.word	0x00009b49
    d4a4:	0000c08d 	.word	0x0000c08d
    d4a8:	0000993d 	.word	0x0000993d
    d4ac:	00009bd9 	.word	0x00009bd9
    d4b0:	00009a75 	.word	0x00009a75
    d4b4:	00009ac9 	.word	0x00009ac9
    d4b8:	00009a59 	.word	0x00009a59
    d4bc:	00009add 	.word	0x00009add

0000d4c0 <LORAREG_InitValidateAttrFnPtrsKR>:
	pValidateAttr[RX_FREQUENCY] = ValidateFreqKR;
    d4c0:	4b0d      	ldr	r3, [pc, #52]	; (d4f8 <LORAREG_InitValidateAttrFnPtrsKR+0x38>)
    d4c2:	4a0e      	ldr	r2, [pc, #56]	; (d4fc <LORAREG_InitValidateAttrFnPtrsKR+0x3c>)
    d4c4:	605a      	str	r2, [r3, #4]
	pValidateAttr[TX_FREQUENCY] = ValidateTxFreqT2;
    d4c6:	4a0e      	ldr	r2, [pc, #56]	; (d500 <LORAREG_InitValidateAttrFnPtrsKR+0x40>)
    d4c8:	609a      	str	r2, [r3, #8]
	pValidateAttr[RX_DATARATE] = ValidateDataRate;
    d4ca:	4a0e      	ldr	r2, [pc, #56]	; (d504 <LORAREG_InitValidateAttrFnPtrsKR+0x44>)
    d4cc:	63da      	str	r2, [r3, #60]	; 0x3c
	pValidateAttr[TX_DATARATE] = ValidateDataRate;
    d4ce:	641a      	str	r2, [r3, #64]	; 0x40
	pValidateAttr[SUPPORTED_DR] = ValidateSupportedDr;
    d4d0:	490d      	ldr	r1, [pc, #52]	; (d508 <LORAREG_InitValidateAttrFnPtrsKR+0x48>)
    d4d2:	6459      	str	r1, [r3, #68]	; 0x44
	pValidateAttr[DATA_RANGE] = ValidateDataRangeT2;
    d4d4:	490d      	ldr	r1, [pc, #52]	; (d50c <LORAREG_InitValidateAttrFnPtrsKR+0x4c>)
    d4d6:	6499      	str	r1, [r3, #72]	; 0x48
	pValidateAttr[CHANNEL_ID] = ValidateChannelIdT2;
    d4d8:	490d      	ldr	r1, [pc, #52]	; (d510 <LORAREG_InitValidateAttrFnPtrsKR+0x50>)
    d4da:	6559      	str	r1, [r3, #84]	; 0x54
	pValidateAttr[RX2_DATARATE] = ValidateDataRate;
    d4dc:	65da      	str	r2, [r3, #92]	; 0x5c
	pValidateAttr[RX1_DATARATE_OFFSET] = ValidateRx1DataRateOffset;
    d4de:	4a0d      	ldr	r2, [pc, #52]	; (d514 <LORAREG_InitValidateAttrFnPtrsKR+0x54>)
    d4e0:	661a      	str	r2, [r3, #96]	; 0x60
	pValidateAttr[CHANNEL_MASK] = ValidateChannelMaskT2;
    d4e2:	4a0d      	ldr	r2, [pc, #52]	; (d518 <LORAREG_InitValidateAttrFnPtrsKR+0x58>)
    d4e4:	669a      	str	r2, [r3, #104]	; 0x68
	pValidateAttr[CHANNEL_MASK_CNTL] = ValidateChannelMaskCntlT2;
    d4e6:	4a0d      	ldr	r2, [pc, #52]	; (d51c <LORAREG_InitValidateAttrFnPtrsKR+0x5c>)
    d4e8:	66da      	str	r2, [r3, #108]	; 0x6c
	pValidateAttr[TX_PWR] = ValidateTxPower;
    d4ea:	4a0d      	ldr	r2, [pc, #52]	; (d520 <LORAREG_InitValidateAttrFnPtrsKR+0x60>)
    d4ec:	675a      	str	r2, [r3, #116]	; 0x74
	pValidateAttr[CHMASK_CHCNTL] = ValidateChMaskChCntlT2;
    d4ee:	490d      	ldr	r1, [pc, #52]	; (d524 <LORAREG_InitValidateAttrFnPtrsKR+0x64>)
    d4f0:	22e0      	movs	r2, #224	; 0xe0
    d4f2:	5099      	str	r1, [r3, r2]
}
    d4f4:	4770      	bx	lr
    d4f6:	46c0      	nop			; (mov r8, r8)
    d4f8:	20000e64 	.word	0x20000e64
    d4fc:	0000adad 	.word	0x0000adad
    d500:	0000ad29 	.word	0x0000ad29
    d504:	00009b31 	.word	0x00009b31
    d508:	00009b49 	.word	0x00009b49
    d50c:	0000c08d 	.word	0x0000c08d
    d510:	0000993d 	.word	0x0000993d
    d514:	00009bd9 	.word	0x00009bd9
    d518:	00009a75 	.word	0x00009a75
    d51c:	00009ac9 	.word	0x00009ac9
    d520:	00009a59 	.word	0x00009a59
    d524:	00009add 	.word	0x00009add

0000d528 <LORAREG_InitSetAttrFnPtrsNA>:
	pSetAttr[DATA_RANGE] = setDataRange;
    d528:	4b0b      	ldr	r3, [pc, #44]	; (d558 <LORAREG_InitSetAttrFnPtrsNA+0x30>)
    d52a:	4a0c      	ldr	r2, [pc, #48]	; (d55c <LORAREG_InitSetAttrFnPtrsNA+0x34>)
    d52c:	649a      	str	r2, [r3, #72]	; 0x48
	pSetAttr[CHANNEL_ID_STATUS] = setChannelIdStatus;
    d52e:	4a0c      	ldr	r2, [pc, #48]	; (d560 <LORAREG_InitSetAttrFnPtrsNA+0x38>)
    d530:	659a      	str	r2, [r3, #88]	; 0x58
	pSetAttr[NEW_CHANNELS] = setNewChannelsT1;
    d532:	4a0c      	ldr	r2, [pc, #48]	; (d564 <LORAREG_InitSetAttrFnPtrsNA+0x3c>)
    d534:	671a      	str	r2, [r3, #112]	; 0x70
	pSetAttr[REG_JOIN_SUCCESS] = setJoinSuccess;
    d536:	490c      	ldr	r1, [pc, #48]	; (d568 <LORAREG_InitSetAttrFnPtrsNA+0x40>)
    d538:	22e8      	movs	r2, #232	; 0xe8
    d53a:	5099      	str	r1, [r3, r2]
	pSetAttr[REG_JOIN_ENABLE_ALL] = setEnableAllChs;
    d53c:	490b      	ldr	r1, [pc, #44]	; (d56c <LORAREG_InitSetAttrFnPtrsNA+0x44>)
    d53e:	3204      	adds	r2, #4
    d540:	5099      	str	r1, [r3, r2]
	pSetAttr[JOIN_DUTY_CYCLE_TIMER] = setJoinDutyCycleTimer;
    d542:	490b      	ldr	r1, [pc, #44]	; (d570 <LORAREG_InitSetAttrFnPtrsNA+0x48>)
    d544:	3a6c      	subs	r2, #108	; 0x6c
    d546:	5099      	str	r1, [r3, r2]
	pSetAttr[JOIN_BACK_OFF_TIMER] = setJoinBackOffTimer;
    d548:	490a      	ldr	r1, [pc, #40]	; (d574 <LORAREG_InitSetAttrFnPtrsNA+0x4c>)
    d54a:	3204      	adds	r2, #4
    d54c:	5099      	str	r1, [r3, r2]
	pSetAttr[JOINBACKOFF_CNTL] = setJoinBackoffCntl;
    d54e:	490a      	ldr	r1, [pc, #40]	; (d578 <LORAREG_InitSetAttrFnPtrsNA+0x50>)
    d550:	3260      	adds	r2, #96	; 0x60
    d552:	5099      	str	r1, [r3, r2]
}
    d554:	4770      	bx	lr
    d556:	46c0      	nop			; (mov r8, r8)
    d558:	20000d70 	.word	0x20000d70
    d55c:	0000c4d1 	.word	0x0000c4d1
    d560:	0000c445 	.word	0x0000c445
    d564:	0000adf5 	.word	0x0000adf5
    d568:	0000a071 	.word	0x0000a071
    d56c:	0000a001 	.word	0x0000a001
    d570:	0000b439 	.word	0x0000b439
    d574:	0000b3c5 	.word	0x0000b3c5
    d578:	0000b30d 	.word	0x0000b30d

0000d57c <LORAREG_InitSetAttrFnPtrsEU>:
	pSetAttr[DATA_RANGE] = setDataRangeT2;
    d57c:	4b0e      	ldr	r3, [pc, #56]	; (d5b8 <LORAREG_InitSetAttrFnPtrsEU+0x3c>)
    d57e:	4a0f      	ldr	r2, [pc, #60]	; (d5bc <LORAREG_InitSetAttrFnPtrsEU+0x40>)
    d580:	649a      	str	r2, [r3, #72]	; 0x48
	pSetAttr[CHANNEL_ID_STATUS] = setChannelIdStatusT2;
    d582:	4a0f      	ldr	r2, [pc, #60]	; (d5c0 <LORAREG_InitSetAttrFnPtrsEU+0x44>)
    d584:	659a      	str	r2, [r3, #88]	; 0x58
	pSetAttr[DUTY_CYCLE] = setDutyCycle;
    d586:	4a0f      	ldr	r2, [pc, #60]	; (d5c4 <LORAREG_InitSetAttrFnPtrsEU+0x48>)
    d588:	679a      	str	r2, [r3, #120]	; 0x78
	pSetAttr[DUTY_CYCLE_TIMER] = setDutyCycleTimer;
    d58a:	4a0f      	ldr	r2, [pc, #60]	; (d5c8 <LORAREG_InitSetAttrFnPtrsEU+0x4c>)
    d58c:	67da      	str	r2, [r3, #124]	; 0x7c
	pSetAttr[FREQUENCY] = setFrequency;
    d58e:	4a0f      	ldr	r2, [pc, #60]	; (d5cc <LORAREG_InitSetAttrFnPtrsEU+0x50>)
    d590:	601a      	str	r2, [r3, #0]
	pSetAttr[NEW_CHANNELS] = setNewChannel;
    d592:	4a0f      	ldr	r2, [pc, #60]	; (d5d0 <LORAREG_InitSetAttrFnPtrsEU+0x54>)
    d594:	671a      	str	r2, [r3, #112]	; 0x70
	pSetAttr[JOIN_DUTY_CYCLE_TIMER]= setJoinDutyCycleTimer;
    d596:	490f      	ldr	r1, [pc, #60]	; (d5d4 <LORAREG_InitSetAttrFnPtrsEU+0x58>)
    d598:	2280      	movs	r2, #128	; 0x80
    d59a:	5099      	str	r1, [r3, r2]
	pSetAttr[JOIN_BACK_OFF_TIMER] = setJoinBackOffTimer;
    d59c:	490e      	ldr	r1, [pc, #56]	; (d5d8 <LORAREG_InitSetAttrFnPtrsEU+0x5c>)
    d59e:	3204      	adds	r2, #4
    d5a0:	5099      	str	r1, [r3, r2]
	pSetAttr[DL_FREQUENCY] = setDlFrequency;
    d5a2:	490e      	ldr	r1, [pc, #56]	; (d5dc <LORAREG_InitSetAttrFnPtrsEU+0x60>)
    d5a4:	324c      	adds	r2, #76	; 0x4c
    d5a6:	5099      	str	r1, [r3, r2]
	pSetAttr[JOINBACKOFF_CNTL] = setJoinBackoffCntl;
    d5a8:	490d      	ldr	r1, [pc, #52]	; (d5e0 <LORAREG_InitSetAttrFnPtrsEU+0x64>)
    d5aa:	3214      	adds	r2, #20
    d5ac:	5099      	str	r1, [r3, r2]
	pSetAttr[CHLIST_DEFAULTS] = setChlistDefaultState;
    d5ae:	490d      	ldr	r1, [pc, #52]	; (d5e4 <LORAREG_InitSetAttrFnPtrsEU+0x68>)
    d5b0:	320c      	adds	r2, #12
    d5b2:	5099      	str	r1, [r3, r2]
}
    d5b4:	4770      	bx	lr
    d5b6:	46c0      	nop			; (mov r8, r8)
    d5b8:	20000d70 	.word	0x20000d70
    d5bc:	0000c0b9 	.word	0x0000c0b9
    d5c0:	0000a2ad 	.word	0x0000a2ad
    d5c4:	0000b055 	.word	0x0000b055
    d5c8:	0000b6c5 	.word	0x0000b6c5
    d5cc:	0000af31 	.word	0x0000af31
    d5d0:	0000d83d 	.word	0x0000d83d
    d5d4:	0000b439 	.word	0x0000b439
    d5d8:	0000b3c5 	.word	0x0000b3c5
    d5dc:	0000ae8d 	.word	0x0000ae8d
    d5e0:	0000b30d 	.word	0x0000b30d
    d5e4:	00009d61 	.word	0x00009d61

0000d5e8 <LORAREG_InitSetAttrFnPtrsAS>:
	pSetAttr[DATA_RANGE] = setDataRangeT2;
    d5e8:	4b0f      	ldr	r3, [pc, #60]	; (d628 <LORAREG_InitSetAttrFnPtrsAS+0x40>)
    d5ea:	4a10      	ldr	r2, [pc, #64]	; (d62c <LORAREG_InitSetAttrFnPtrsAS+0x44>)
    d5ec:	649a      	str	r2, [r3, #72]	; 0x48
	pSetAttr[CHANNEL_ID_STATUS] = setChannelIdStatusT3;
    d5ee:	4a10      	ldr	r2, [pc, #64]	; (d630 <LORAREG_InitSetAttrFnPtrsAS+0x48>)
    d5f0:	659a      	str	r2, [r3, #88]	; 0x58
	pSetAttr[FREQUENCY] = setFrequency;
    d5f2:	4a10      	ldr	r2, [pc, #64]	; (d634 <LORAREG_InitSetAttrFnPtrsAS+0x4c>)
    d5f4:	601a      	str	r2, [r3, #0]
	pSetAttr[DL_FREQUENCY] = setDlFrequency;
    d5f6:	4910      	ldr	r1, [pc, #64]	; (d638 <LORAREG_InitSetAttrFnPtrsAS+0x50>)
    d5f8:	22d0      	movs	r2, #208	; 0xd0
    d5fa:	5099      	str	r1, [r3, r2]
    pSetAttr[NEW_CHANNELS] = setNewChannel;
    d5fc:	4a0f      	ldr	r2, [pc, #60]	; (d63c <LORAREG_InitSetAttrFnPtrsAS+0x54>)
    d5fe:	671a      	str	r2, [r3, #112]	; 0x70
	pSetAttr[JOIN_DUTY_CYCLE_TIMER] = setJoinDutyCycleTimer;
    d600:	490f      	ldr	r1, [pc, #60]	; (d640 <LORAREG_InitSetAttrFnPtrsAS+0x58>)
    d602:	2280      	movs	r2, #128	; 0x80
    d604:	5099      	str	r1, [r3, r2]
	pSetAttr[JOIN_BACK_OFF_TIMER] = setJoinBackOffTimer;
    d606:	490f      	ldr	r1, [pc, #60]	; (d644 <LORAREG_InitSetAttrFnPtrsAS+0x5c>)
    d608:	3204      	adds	r2, #4
    d60a:	5099      	str	r1, [r3, r2]
	pSetAttr[TX_PARAMS] = setTxParams;
    d60c:	490e      	ldr	r1, [pc, #56]	; (d648 <LORAREG_InitSetAttrFnPtrsAS+0x60>)
    d60e:	3250      	adds	r2, #80	; 0x50
    d610:	5099      	str	r1, [r3, r2]
	pSetAttr[DUTY_CYCLE] = setDutyCycle;
    d612:	4a0e      	ldr	r2, [pc, #56]	; (d64c <LORAREG_InitSetAttrFnPtrsAS+0x64>)
    d614:	679a      	str	r2, [r3, #120]	; 0x78
	pSetAttr[DUTY_CYCLE_TIMER] = setDutyCycleTimer;
    d616:	4a0e      	ldr	r2, [pc, #56]	; (d650 <LORAREG_InitSetAttrFnPtrsAS+0x68>)
    d618:	67da      	str	r2, [r3, #124]	; 0x7c
	pSetAttr[JOINBACKOFF_CNTL] = setJoinBackoffCntl;
    d61a:	490e      	ldr	r1, [pc, #56]	; (d654 <LORAREG_InitSetAttrFnPtrsAS+0x6c>)
    d61c:	22e4      	movs	r2, #228	; 0xe4
    d61e:	5099      	str	r1, [r3, r2]
	pSetAttr[CHLIST_DEFAULTS] = setChlistDefaultState;
    d620:	490d      	ldr	r1, [pc, #52]	; (d658 <LORAREG_InitSetAttrFnPtrsAS+0x70>)
    d622:	320c      	adds	r2, #12
    d624:	5099      	str	r1, [r3, r2]
}
    d626:	4770      	bx	lr
    d628:	20000d70 	.word	0x20000d70
    d62c:	0000c0b9 	.word	0x0000c0b9
    d630:	0000a425 	.word	0x0000a425
    d634:	0000af31 	.word	0x0000af31
    d638:	0000ae8d 	.word	0x0000ae8d
    d63c:	0000d83d 	.word	0x0000d83d
    d640:	0000b439 	.word	0x0000b439
    d644:	0000b3c5 	.word	0x0000b3c5
    d648:	00009d0d 	.word	0x00009d0d
    d64c:	0000b055 	.word	0x0000b055
    d650:	0000b6c5 	.word	0x0000b6c5
    d654:	0000b30d 	.word	0x0000b30d
    d658:	00009d61 	.word	0x00009d61

0000d65c <LORAREG_InitSetAttrFnPtrsAU>:
	pSetAttr[DATA_RANGE] = setDataRange;
    d65c:	4b0b      	ldr	r3, [pc, #44]	; (d68c <LORAREG_InitSetAttrFnPtrsAU+0x30>)
    d65e:	4a0c      	ldr	r2, [pc, #48]	; (d690 <LORAREG_InitSetAttrFnPtrsAU+0x34>)
    d660:	649a      	str	r2, [r3, #72]	; 0x48
	pSetAttr[CHANNEL_ID_STATUS] = setChannelIdStatus;
    d662:	4a0c      	ldr	r2, [pc, #48]	; (d694 <LORAREG_InitSetAttrFnPtrsAU+0x38>)
    d664:	659a      	str	r2, [r3, #88]	; 0x58
	pSetAttr[NEW_CHANNELS] = setNewChannelsT1;
    d666:	4a0c      	ldr	r2, [pc, #48]	; (d698 <LORAREG_InitSetAttrFnPtrsAU+0x3c>)
    d668:	671a      	str	r2, [r3, #112]	; 0x70
	pSetAttr[REG_JOIN_SUCCESS] = setJoinSuccess;
    d66a:	490c      	ldr	r1, [pc, #48]	; (d69c <LORAREG_InitSetAttrFnPtrsAU+0x40>)
    d66c:	22e8      	movs	r2, #232	; 0xe8
    d66e:	5099      	str	r1, [r3, r2]
	pSetAttr[REG_JOIN_ENABLE_ALL] = setEnableAllChs;
    d670:	490b      	ldr	r1, [pc, #44]	; (d6a0 <LORAREG_InitSetAttrFnPtrsAU+0x44>)
    d672:	3204      	adds	r2, #4
    d674:	5099      	str	r1, [r3, r2]
	pSetAttr[JOIN_DUTY_CYCLE_TIMER]= setJoinDutyCycleTimer;
    d676:	490b      	ldr	r1, [pc, #44]	; (d6a4 <LORAREG_InitSetAttrFnPtrsAU+0x48>)
    d678:	3a6c      	subs	r2, #108	; 0x6c
    d67a:	5099      	str	r1, [r3, r2]
	pSetAttr[JOIN_BACK_OFF_TIMER] = setJoinBackOffTimer;
    d67c:	490a      	ldr	r1, [pc, #40]	; (d6a8 <LORAREG_InitSetAttrFnPtrsAU+0x4c>)
    d67e:	3204      	adds	r2, #4
    d680:	5099      	str	r1, [r3, r2]
	pSetAttr[JOINBACKOFF_CNTL] = setJoinBackoffCntl;
    d682:	490a      	ldr	r1, [pc, #40]	; (d6ac <LORAREG_InitSetAttrFnPtrsAU+0x50>)
    d684:	3260      	adds	r2, #96	; 0x60
    d686:	5099      	str	r1, [r3, r2]
}
    d688:	4770      	bx	lr
    d68a:	46c0      	nop			; (mov r8, r8)
    d68c:	20000d70 	.word	0x20000d70
    d690:	0000c4d1 	.word	0x0000c4d1
    d694:	0000c445 	.word	0x0000c445
    d698:	0000adf5 	.word	0x0000adf5
    d69c:	0000a071 	.word	0x0000a071
    d6a0:	0000a001 	.word	0x0000a001
    d6a4:	0000b439 	.word	0x0000b439
    d6a8:	0000b3c5 	.word	0x0000b3c5
    d6ac:	0000b30d 	.word	0x0000b30d

0000d6b0 <LORAREG_InitSetAttrFnPtrsIN>:
	pSetAttr[DATA_RANGE] = setDataRangeT2;
    d6b0:	4b0d      	ldr	r3, [pc, #52]	; (d6e8 <LORAREG_InitSetAttrFnPtrsIN+0x38>)
    d6b2:	4a0e      	ldr	r2, [pc, #56]	; (d6ec <LORAREG_InitSetAttrFnPtrsIN+0x3c>)
    d6b4:	649a      	str	r2, [r3, #72]	; 0x48
	pSetAttr[CHANNEL_ID_STATUS] = setChannelIdStatusT2;
    d6b6:	4a0e      	ldr	r2, [pc, #56]	; (d6f0 <LORAREG_InitSetAttrFnPtrsIN+0x40>)
    d6b8:	659a      	str	r2, [r3, #88]	; 0x58
	pSetAttr[FREQUENCY] = setFrequency;
    d6ba:	4a0e      	ldr	r2, [pc, #56]	; (d6f4 <LORAREG_InitSetAttrFnPtrsIN+0x44>)
    d6bc:	601a      	str	r2, [r3, #0]
	pSetAttr[NEW_CHANNELS] = setNewChannel;
    d6be:	4a0e      	ldr	r2, [pc, #56]	; (d6f8 <LORAREG_InitSetAttrFnPtrsIN+0x48>)
    d6c0:	671a      	str	r2, [r3, #112]	; 0x70
	pSetAttr[JOIN_DUTY_CYCLE_TIMER]= setJoinDutyCycleTimer;
    d6c2:	490e      	ldr	r1, [pc, #56]	; (d6fc <LORAREG_InitSetAttrFnPtrsIN+0x4c>)
    d6c4:	2280      	movs	r2, #128	; 0x80
    d6c6:	5099      	str	r1, [r3, r2]
	pSetAttr[JOIN_BACK_OFF_TIMER] = setJoinBackOffTimer;
    d6c8:	490d      	ldr	r1, [pc, #52]	; (d700 <LORAREG_InitSetAttrFnPtrsIN+0x50>)
    d6ca:	3204      	adds	r2, #4
    d6cc:	5099      	str	r1, [r3, r2]
	pSetAttr[DL_FREQUENCY] = setDlFrequency;
    d6ce:	490d      	ldr	r1, [pc, #52]	; (d704 <LORAREG_InitSetAttrFnPtrsIN+0x54>)
    d6d0:	324c      	adds	r2, #76	; 0x4c
    d6d2:	5099      	str	r1, [r3, r2]
	pSetAttr[TX_PARAMS] = setTxParams;
    d6d4:	490c      	ldr	r1, [pc, #48]	; (d708 <LORAREG_InitSetAttrFnPtrsIN+0x58>)
    d6d6:	3204      	adds	r2, #4
    d6d8:	5099      	str	r1, [r3, r2]
	pSetAttr[JOINBACKOFF_CNTL] = setJoinBackoffCntl;
    d6da:	490c      	ldr	r1, [pc, #48]	; (d70c <LORAREG_InitSetAttrFnPtrsIN+0x5c>)
    d6dc:	3210      	adds	r2, #16
    d6de:	5099      	str	r1, [r3, r2]
	pSetAttr[CHLIST_DEFAULTS] = setChlistDefaultState;
    d6e0:	490b      	ldr	r1, [pc, #44]	; (d710 <LORAREG_InitSetAttrFnPtrsIN+0x60>)
    d6e2:	320c      	adds	r2, #12
    d6e4:	5099      	str	r1, [r3, r2]
}
    d6e6:	4770      	bx	lr
    d6e8:	20000d70 	.word	0x20000d70
    d6ec:	0000c0b9 	.word	0x0000c0b9
    d6f0:	0000a2ad 	.word	0x0000a2ad
    d6f4:	0000af31 	.word	0x0000af31
    d6f8:	0000d83d 	.word	0x0000d83d
    d6fc:	0000b439 	.word	0x0000b439
    d700:	0000b3c5 	.word	0x0000b3c5
    d704:	0000ae8d 	.word	0x0000ae8d
    d708:	00009d0d 	.word	0x00009d0d
    d70c:	0000b30d 	.word	0x0000b30d
    d710:	00009d61 	.word	0x00009d61

0000d714 <LORAREG_InitSetAttrFnPtrsJP>:
	pSetAttr[DATA_RANGE] = setDataRangeT2;
    d714:	4b11      	ldr	r3, [pc, #68]	; (d75c <LORAREG_InitSetAttrFnPtrsJP+0x48>)
    d716:	4a12      	ldr	r2, [pc, #72]	; (d760 <LORAREG_InitSetAttrFnPtrsJP+0x4c>)
    d718:	649a      	str	r2, [r3, #72]	; 0x48
	pSetAttr[CHANNEL_ID_STATUS] = setChannelIdStatusT3;
    d71a:	4a12      	ldr	r2, [pc, #72]	; (d764 <LORAREG_InitSetAttrFnPtrsJP+0x50>)
    d71c:	659a      	str	r2, [r3, #88]	; 0x58
	pSetAttr[LBT_TIMER] = setLBTTimer;
    d71e:	4912      	ldr	r1, [pc, #72]	; (d768 <LORAREG_InitSetAttrFnPtrsJP+0x54>)
    d720:	2288      	movs	r2, #136	; 0x88
    d722:	5099      	str	r1, [r3, r2]
	pSetAttr[FREQUENCY] = setFrequency;
    d724:	4a11      	ldr	r2, [pc, #68]	; (d76c <LORAREG_InitSetAttrFnPtrsJP+0x58>)
    d726:	601a      	str	r2, [r3, #0]
	pSetAttr[DL_FREQUENCY] = setDlFrequency;
    d728:	4911      	ldr	r1, [pc, #68]	; (d770 <LORAREG_InitSetAttrFnPtrsJP+0x5c>)
    d72a:	22d0      	movs	r2, #208	; 0xd0
    d72c:	5099      	str	r1, [r3, r2]
	pSetAttr[NEW_CHANNELS] = setNewChannel;
    d72e:	4a11      	ldr	r2, [pc, #68]	; (d774 <LORAREG_InitSetAttrFnPtrsJP+0x60>)
    d730:	671a      	str	r2, [r3, #112]	; 0x70
	pSetAttr[JOIN_DUTY_CYCLE_TIMER]= setJoinDutyCycleTimer;
    d732:	4911      	ldr	r1, [pc, #68]	; (d778 <LORAREG_InitSetAttrFnPtrsJP+0x64>)
    d734:	2280      	movs	r2, #128	; 0x80
    d736:	5099      	str	r1, [r3, r2]
	pSetAttr[JOIN_BACK_OFF_TIMER] = setJoinBackOffTimer;
    d738:	4910      	ldr	r1, [pc, #64]	; (d77c <LORAREG_InitSetAttrFnPtrsJP+0x68>)
    d73a:	3204      	adds	r2, #4
    d73c:	5099      	str	r1, [r3, r2]
	pSetAttr[TX_PARAMS] = setTxParams;
    d73e:	4910      	ldr	r1, [pc, #64]	; (d780 <LORAREG_InitSetAttrFnPtrsJP+0x6c>)
    d740:	3250      	adds	r2, #80	; 0x50
    d742:	5099      	str	r1, [r3, r2]
	pSetAttr[DUTY_CYCLE] = setDutyCycle;
    d744:	4a0f      	ldr	r2, [pc, #60]	; (d784 <LORAREG_InitSetAttrFnPtrsJP+0x70>)
    d746:	679a      	str	r2, [r3, #120]	; 0x78
	pSetAttr[DUTY_CYCLE_TIMER] = setDutyCycleTimer;
    d748:	4a0f      	ldr	r2, [pc, #60]	; (d788 <LORAREG_InitSetAttrFnPtrsJP+0x74>)
    d74a:	67da      	str	r2, [r3, #124]	; 0x7c
	pSetAttr[JOINBACKOFF_CNTL] = setJoinBackoffCntl;
    d74c:	490f      	ldr	r1, [pc, #60]	; (d78c <LORAREG_InitSetAttrFnPtrsJP+0x78>)
    d74e:	22e4      	movs	r2, #228	; 0xe4
    d750:	5099      	str	r1, [r3, r2]
	pSetAttr[CHLIST_DEFAULTS] = setChlistDefaultState;
    d752:	490f      	ldr	r1, [pc, #60]	; (d790 <LORAREG_InitSetAttrFnPtrsJP+0x7c>)
    d754:	320c      	adds	r2, #12
    d756:	5099      	str	r1, [r3, r2]
}
    d758:	4770      	bx	lr
    d75a:	46c0      	nop			; (mov r8, r8)
    d75c:	20000d70 	.word	0x20000d70
    d760:	0000c0b9 	.word	0x0000c0b9
    d764:	0000a425 	.word	0x0000a425
    d768:	0000bc39 	.word	0x0000bc39
    d76c:	0000af31 	.word	0x0000af31
    d770:	0000ae8d 	.word	0x0000ae8d
    d774:	0000d83d 	.word	0x0000d83d
    d778:	0000b439 	.word	0x0000b439
    d77c:	0000b3c5 	.word	0x0000b3c5
    d780:	00009d0d 	.word	0x00009d0d
    d784:	0000b055 	.word	0x0000b055
    d788:	0000b6c5 	.word	0x0000b6c5
    d78c:	0000b30d 	.word	0x0000b30d
    d790:	00009d61 	.word	0x00009d61

0000d794 <LORAREG_InitSetAttrFnPtrsKR>:
	pSetAttr[DATA_RANGE] = setDataRangeT2;
    d794:	4b0f      	ldr	r3, [pc, #60]	; (d7d4 <LORAREG_InitSetAttrFnPtrsKR+0x40>)
    d796:	4a10      	ldr	r2, [pc, #64]	; (d7d8 <LORAREG_InitSetAttrFnPtrsKR+0x44>)
    d798:	649a      	str	r2, [r3, #72]	; 0x48
	pSetAttr[CHANNEL_ID_STATUS] = setChannelIdStatusT3;
    d79a:	4a10      	ldr	r2, [pc, #64]	; (d7dc <LORAREG_InitSetAttrFnPtrsKR+0x48>)
    d79c:	659a      	str	r2, [r3, #88]	; 0x58
	pSetAttr[LBT_TIMER] = setLBTTimer;
    d79e:	4910      	ldr	r1, [pc, #64]	; (d7e0 <LORAREG_InitSetAttrFnPtrsKR+0x4c>)
    d7a0:	2288      	movs	r2, #136	; 0x88
    d7a2:	5099      	str	r1, [r3, r2]
	pSetAttr[FREQUENCY] = setFrequency;
    d7a4:	4a0f      	ldr	r2, [pc, #60]	; (d7e4 <LORAREG_InitSetAttrFnPtrsKR+0x50>)
    d7a6:	601a      	str	r2, [r3, #0]
	pSetAttr[DL_FREQUENCY] = setDlFrequency;
    d7a8:	490f      	ldr	r1, [pc, #60]	; (d7e8 <LORAREG_InitSetAttrFnPtrsKR+0x54>)
    d7aa:	22d0      	movs	r2, #208	; 0xd0
    d7ac:	5099      	str	r1, [r3, r2]
	pSetAttr[NEW_CHANNELS] = setNewChannel;
    d7ae:	4a0f      	ldr	r2, [pc, #60]	; (d7ec <LORAREG_InitSetAttrFnPtrsKR+0x58>)
    d7b0:	671a      	str	r2, [r3, #112]	; 0x70
	pSetAttr[JOIN_DUTY_CYCLE_TIMER]= setJoinDutyCycleTimer;
    d7b2:	490f      	ldr	r1, [pc, #60]	; (d7f0 <LORAREG_InitSetAttrFnPtrsKR+0x5c>)
    d7b4:	2280      	movs	r2, #128	; 0x80
    d7b6:	5099      	str	r1, [r3, r2]
	pSetAttr[JOIN_BACK_OFF_TIMER] = setJoinBackOffTimer;
    d7b8:	490e      	ldr	r1, [pc, #56]	; (d7f4 <LORAREG_InitSetAttrFnPtrsKR+0x60>)
    d7ba:	3204      	adds	r2, #4
    d7bc:	5099      	str	r1, [r3, r2]
	pSetAttr[TX_PARAMS] = setTxParams;
    d7be:	490e      	ldr	r1, [pc, #56]	; (d7f8 <LORAREG_InitSetAttrFnPtrsKR+0x64>)
    d7c0:	3250      	adds	r2, #80	; 0x50
    d7c2:	5099      	str	r1, [r3, r2]
	pSetAttr[JOINBACKOFF_CNTL] = setJoinBackoffCntl;
    d7c4:	490d      	ldr	r1, [pc, #52]	; (d7fc <LORAREG_InitSetAttrFnPtrsKR+0x68>)
    d7c6:	3210      	adds	r2, #16
    d7c8:	5099      	str	r1, [r3, r2]
	pSetAttr[CHLIST_DEFAULTS] = setChlistDefaultState;
    d7ca:	490d      	ldr	r1, [pc, #52]	; (d800 <LORAREG_InitSetAttrFnPtrsKR+0x6c>)
    d7cc:	320c      	adds	r2, #12
    d7ce:	5099      	str	r1, [r3, r2]
}
    d7d0:	4770      	bx	lr
    d7d2:	46c0      	nop			; (mov r8, r8)
    d7d4:	20000d70 	.word	0x20000d70
    d7d8:	0000c0b9 	.word	0x0000c0b9
    d7dc:	0000a425 	.word	0x0000a425
    d7e0:	0000bc39 	.word	0x0000bc39
    d7e4:	0000af31 	.word	0x0000af31
    d7e8:	0000ae8d 	.word	0x0000ae8d
    d7ec:	0000d83d 	.word	0x0000d83d
    d7f0:	0000b439 	.word	0x0000b439
    d7f4:	0000b3c5 	.word	0x0000b3c5
    d7f8:	00009d0d 	.word	0x00009d0d
    d7fc:	0000b30d 	.word	0x0000b30d
    d800:	00009d61 	.word	0x00009d61

0000d804 <LORAREG_GetAttr>:
{
    d804:	b510      	push	{r4, lr}
	StackRetStatus_t result = LORAWAN_INVALID_PARAMETER;
    d806:	230a      	movs	r3, #10
	if(attrType < REG_NUM_ATTRIBUTES)
    d808:	283c      	cmp	r0, #60	; 0x3c
    d80a:	d901      	bls.n	d810 <LORAREG_GetAttr+0xc>
}
    d80c:	0018      	movs	r0, r3
    d80e:	bd10      	pop	{r4, pc}
	    result = pGetAttr[attrType](attrType, attrInput,attrOutput);	
    d810:	0084      	lsls	r4, r0, #2
    d812:	4b02      	ldr	r3, [pc, #8]	; (d81c <LORAREG_GetAttr+0x18>)
    d814:	58e3      	ldr	r3, [r4, r3]
    d816:	4798      	blx	r3
    d818:	0003      	movs	r3, r0
    d81a:	e7f7      	b.n	d80c <LORAREG_GetAttr+0x8>
    d81c:	20000c7c 	.word	0x20000c7c

0000d820 <LORAREG_ValidateAttr>:
{
    d820:	b510      	push	{r4, lr}
	StackRetStatus_t result = LORAWAN_INVALID_PARAMETER;
    d822:	230a      	movs	r3, #10
	if(attrType < REG_NUM_ATTRIBUTES)
    d824:	283c      	cmp	r0, #60	; 0x3c
    d826:	d901      	bls.n	d82c <LORAREG_ValidateAttr+0xc>
}
    d828:	0018      	movs	r0, r3
    d82a:	bd10      	pop	{r4, pc}
	    result = pValidateAttr[attrType](attrType, attrInput);		
    d82c:	0082      	lsls	r2, r0, #2
    d82e:	4b02      	ldr	r3, [pc, #8]	; (d838 <LORAREG_ValidateAttr+0x18>)
    d830:	58d3      	ldr	r3, [r2, r3]
    d832:	4798      	blx	r3
    d834:	0003      	movs	r3, r0
    d836:	e7f7      	b.n	d828 <LORAREG_ValidateAttr+0x8>
    d838:	20000e64 	.word	0x20000e64

0000d83c <setNewChannel>:
{
    d83c:	b5f0      	push	{r4, r5, r6, r7, lr}
    d83e:	46d6      	mov	lr, sl
    d840:	464f      	mov	r7, r9
    d842:	b580      	push	{r7, lr}
    d844:	b085      	sub	sp, #20
	if(((ISM_ASBAND) & (1 << RegParams.band)) != 0 || ((ISM_JPN923) == RegParams.band))
    d846:	232e      	movs	r3, #46	; 0x2e
    d848:	4a30      	ldr	r2, [pc, #192]	; (d90c <setNewChannel+0xd0>)
    d84a:	5cd2      	ldrb	r2, [r2, r3]
    d84c:	4b30      	ldr	r3, [pc, #192]	; (d910 <setNewChannel+0xd4>)
    d84e:	4113      	asrs	r3, r2
    d850:	07db      	lsls	r3, r3, #31
    d852:	d407      	bmi.n	d864 <setNewChannel+0x28>
    d854:	2a05      	cmp	r2, #5
    d856:	d020      	beq.n	d89a <setNewChannel+0x5e>
	else if( ISM_KR920 == RegParams.band)
    d858:	2a04      	cmp	r2, #4
    d85a:	d020      	beq.n	d89e <setNewChannel+0x62>
	else if( ISM_IND865 == RegParams.band)
    d85c:	2a0f      	cmp	r2, #15
    d85e:	d020      	beq.n	d8a2 <setNewChannel+0x66>
		pUpdateChidStatus = UpdateChannelIdStatusT2;
    d860:	4e2c      	ldr	r6, [pc, #176]	; (d914 <setNewChannel+0xd8>)
    d862:	e000      	b.n	d866 <setNewChannel+0x2a>
		pUpdateChidStatus = UpdateChannelIdStatusT3;
    d864:	4e2c      	ldr	r6, [pc, #176]	; (d918 <setNewChannel+0xdc>)
	memcpy(&newCh, attrInput,sizeof(UpdateNewCh_t));
    d866:	ac03      	add	r4, sp, #12
    d868:	2204      	movs	r2, #4
    d86a:	0020      	movs	r0, r4
    d86c:	4b2b      	ldr	r3, [pc, #172]	; (d91c <setNewChannel+0xe0>)
    d86e:	4798      	blx	r3
	valchMaskCntl.chnlMask = newCh.channelMask;
    d870:	8823      	ldrh	r3, [r4, #0]
    d872:	aa02      	add	r2, sp, #8
    d874:	8053      	strh	r3, [r2, #2]
	valchMaskCntl.chnlMaskCntl = newCh.channelMaskCntl;
    d876:	78a4      	ldrb	r4, [r4, #2]
    d878:	7014      	strb	r4, [r2, #0]
	if(LORAREG_ValidateAttr(CHMASK_CHCNTL,&valchMaskCntl) != LORAWAN_SUCCESS)
    d87a:	0011      	movs	r1, r2
    d87c:	2038      	movs	r0, #56	; 0x38
    d87e:	4b28      	ldr	r3, [pc, #160]	; (d920 <setNewChannel+0xe4>)
    d880:	4798      	blx	r3
    d882:	0003      	movs	r3, r0
    d884:	9001      	str	r0, [sp, #4]
    d886:	2808      	cmp	r0, #8
    d888:	d00d      	beq.n	d8a6 <setNewChannel+0x6a>
		result = LORAWAN_INVALID_PARAMETER;
    d88a:	230a      	movs	r3, #10
    d88c:	9301      	str	r3, [sp, #4]
}
    d88e:	9801      	ldr	r0, [sp, #4]
    d890:	b005      	add	sp, #20
    d892:	bc0c      	pop	{r2, r3}
    d894:	4691      	mov	r9, r2
    d896:	469a      	mov	sl, r3
    d898:	bdf0      	pop	{r4, r5, r6, r7, pc}
		pUpdateChidStatus = UpdateChannelIdStatusT3;
    d89a:	4e1f      	ldr	r6, [pc, #124]	; (d918 <setNewChannel+0xdc>)
    d89c:	e7e3      	b.n	d866 <setNewChannel+0x2a>
		pUpdateChidStatus = UpdateChannelIdStatusT4;
    d89e:	4e21      	ldr	r6, [pc, #132]	; (d924 <setNewChannel+0xe8>)
    d8a0:	e7e1      	b.n	d866 <setNewChannel+0x2a>
		pUpdateChidStatus = UpdateChannelIdStatus;
    d8a2:	4e21      	ldr	r6, [pc, #132]	; (d928 <setNewChannel+0xec>)
    d8a4:	e7df      	b.n	d866 <setNewChannel+0x2a>
		if(newCh.channelMaskCntl == 6)
    d8a6:	2c06      	cmp	r4, #6
    d8a8:	d00b      	beq.n	d8c2 <setNewChannel+0x86>
		else if(newCh.channelMaskCntl == 0)
    d8aa:	2c00      	cmp	r4, #0
    d8ac:	d1ef      	bne.n	d88e <setNewChannel+0x52>
			for(i = 0; i < RegParams.maxChannels; i++)
    d8ae:	232a      	movs	r3, #42	; 0x2a
    d8b0:	4a16      	ldr	r2, [pc, #88]	; (d90c <setNewChannel+0xd0>)
    d8b2:	56d3      	ldrsb	r3, [r2, r3]
    d8b4:	2b00      	cmp	r3, #0
    d8b6:	ddea      	ble.n	d88e <setNewChannel+0x52>
				if((newCh.channelMask & BIT0) == BIT0)
    d8b8:	af03      	add	r7, sp, #12
    d8ba:	2301      	movs	r3, #1
    d8bc:	4699      	mov	r9, r3
			for(i = 0; i < RegParams.maxChannels; i++)
    d8be:	4692      	mov	sl, r2
    d8c0:	e01c      	b.n	d8fc <setNewChannel+0xc0>
			for(i = 0; i < RegParams.maxChannels; i++)
    d8c2:	3322      	adds	r3, #34	; 0x22
    d8c4:	4a11      	ldr	r2, [pc, #68]	; (d90c <setNewChannel+0xd0>)
    d8c6:	56d3      	ldrsb	r3, [r2, r3]
    d8c8:	2b00      	cmp	r3, #0
    d8ca:	dde0      	ble.n	d88e <setNewChannel+0x52>
    d8cc:	2400      	movs	r4, #0
    d8ce:	0017      	movs	r7, r2
    d8d0:	252a      	movs	r5, #42	; 0x2a
				pUpdateChidStatus(i,ENABLED);
    d8d2:	2101      	movs	r1, #1
    d8d4:	0020      	movs	r0, r4
    d8d6:	47b0      	blx	r6
			for(i = 0; i < RegParams.maxChannels; i++)
    d8d8:	3401      	adds	r4, #1
    d8da:	b2e4      	uxtb	r4, r4
    d8dc:	577b      	ldrsb	r3, [r7, r5]
    d8de:	429c      	cmp	r4, r3
    d8e0:	dbf7      	blt.n	d8d2 <setNewChannel+0x96>
    d8e2:	e7d4      	b.n	d88e <setNewChannel+0x52>
					pUpdateChidStatus(i,DISABLED);
    d8e4:	2100      	movs	r1, #0
    d8e6:	0020      	movs	r0, r4
    d8e8:	47b0      	blx	r6
				newCh.channelMask = newCh.channelMask >> SHIFT1;
    d8ea:	086d      	lsrs	r5, r5, #1
    d8ec:	803d      	strh	r5, [r7, #0]
			for(i = 0; i < RegParams.maxChannels; i++)
    d8ee:	3401      	adds	r4, #1
    d8f0:	b2e4      	uxtb	r4, r4
    d8f2:	232a      	movs	r3, #42	; 0x2a
    d8f4:	4652      	mov	r2, sl
    d8f6:	56d3      	ldrsb	r3, [r2, r3]
    d8f8:	429c      	cmp	r4, r3
    d8fa:	dac8      	bge.n	d88e <setNewChannel+0x52>
				if((newCh.channelMask & BIT0) == BIT0)
    d8fc:	883d      	ldrh	r5, [r7, #0]
    d8fe:	464b      	mov	r3, r9
    d900:	422b      	tst	r3, r5
    d902:	d0ef      	beq.n	d8e4 <setNewChannel+0xa8>
					pUpdateChidStatus(i, ENABLED);
    d904:	4649      	mov	r1, r9
    d906:	0020      	movs	r0, r4
    d908:	47b0      	blx	r6
    d90a:	e7ee      	b.n	d8ea <setNewChannel+0xae>
    d90c:	200024d0 	.word	0x200024d0
    d910:	00007fc0 	.word	0x00007fc0
    d914:	0000a199 	.word	0x0000a199
    d918:	0000a3ad 	.word	0x0000a3ad
    d91c:	00019d11 	.word	0x00019d11
    d920:	0000d821 	.word	0x0000d821
    d924:	0000a301 	.word	0x0000a301
    d928:	0000a0f1 	.word	0x0000a0f1

0000d92c <LORAREG_SetAttr>:
{
    d92c:	b510      	push	{r4, lr}
	StackRetStatus_t result = LORAWAN_INVALID_PARAMETER;
    d92e:	230a      	movs	r3, #10
	if(attrType < REG_NUM_ATTRIBUTES)
    d930:	283c      	cmp	r0, #60	; 0x3c
    d932:	d901      	bls.n	d938 <LORAREG_SetAttr+0xc>
}
    d934:	0018      	movs	r0, r3
    d936:	bd10      	pop	{r4, pc}
	    result = pSetAttr[attrType](attrType, attrInput);		
    d938:	0082      	lsls	r2, r0, #2
    d93a:	4b02      	ldr	r3, [pc, #8]	; (d944 <LORAREG_SetAttr+0x18>)
    d93c:	58d3      	ldr	r3, [r2, r3]
    d93e:	4798      	blx	r3
    d940:	0003      	movs	r3, r0
    d942:	e7f7      	b.n	d934 <LORAREG_SetAttr+0x8>
    d944:	20000d70 	.word	0x20000d70

0000d948 <CreateAllRegSoftwareTimers>:
{
    d948:	b510      	push	{r4, lr}
			status = SwTimerCreate(&regTimerId[i]);
    d94a:	4809      	ldr	r0, [pc, #36]	; (d970 <CreateAllRegSoftwareTimers+0x28>)
    d94c:	4b09      	ldr	r3, [pc, #36]	; (d974 <CreateAllRegSoftwareTimers+0x2c>)
    d94e:	4798      	blx	r3
		if(LORAWAN_SUCCESS == status)
    d950:	2808      	cmp	r0, #8
    d952:	d10c      	bne.n	d96e <CreateAllRegSoftwareTimers+0x26>
			status = SwTimerCreate(&regTimerId[i]);
    d954:	4808      	ldr	r0, [pc, #32]	; (d978 <CreateAllRegSoftwareTimers+0x30>)
    d956:	4b07      	ldr	r3, [pc, #28]	; (d974 <CreateAllRegSoftwareTimers+0x2c>)
    d958:	4798      	blx	r3
		if(LORAWAN_SUCCESS == status)
    d95a:	2808      	cmp	r0, #8
    d95c:	d107      	bne.n	d96e <CreateAllRegSoftwareTimers+0x26>
			status = SwTimerCreate(&regTimerId[i]);
    d95e:	4807      	ldr	r0, [pc, #28]	; (d97c <CreateAllRegSoftwareTimers+0x34>)
    d960:	4b04      	ldr	r3, [pc, #16]	; (d974 <CreateAllRegSoftwareTimers+0x2c>)
    d962:	4798      	blx	r3
		if(LORAWAN_SUCCESS == status)
    d964:	2808      	cmp	r0, #8
    d966:	d102      	bne.n	d96e <CreateAllRegSoftwareTimers+0x26>
			status = SwTimerCreate(&regTimerId[i]);
    d968:	4805      	ldr	r0, [pc, #20]	; (d980 <CreateAllRegSoftwareTimers+0x38>)
    d96a:	4b02      	ldr	r3, [pc, #8]	; (d974 <CreateAllRegSoftwareTimers+0x2c>)
    d96c:	4798      	blx	r3
}
    d96e:	bd10      	pop	{r4, pc}
    d970:	200024cc 	.word	0x200024cc
    d974:	0000ecdd 	.word	0x0000ecdd
    d978:	200024cd 	.word	0x200024cd
    d97c:	200024ce 	.word	0x200024ce
    d980:	200024cf 	.word	0x200024cf

0000d984 <StopAllRegSoftwareTimers>:
{
    d984:	b570      	push	{r4, r5, r6, lr}
    d986:	2400      	movs	r4, #0
		SwTimerStop(regTimerId[i]);
    d988:	4e03      	ldr	r6, [pc, #12]	; (d998 <StopAllRegSoftwareTimers+0x14>)
    d98a:	4d04      	ldr	r5, [pc, #16]	; (d99c <StopAllRegSoftwareTimers+0x18>)
    d98c:	5d30      	ldrb	r0, [r6, r4]
    d98e:	47a8      	blx	r5
    d990:	3401      	adds	r4, #1
	for (uint8_t i=0; i< REG_PARAMS_TIMERS_COUNT; i++)
    d992:	2c04      	cmp	r4, #4
    d994:	d1fa      	bne.n	d98c <StopAllRegSoftwareTimers+0x8>
}
    d996:	bd70      	pop	{r4, r5, r6, pc}
    d998:	200024cc 	.word	0x200024cc
    d99c:	0000f029 	.word	0x0000f029

0000d9a0 <LORAREG_Init>:
{	
    d9a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d9a2:	0007      	movs	r7, r0
	if(!initialized)
    d9a4:	4b24      	ldr	r3, [pc, #144]	; (da38 <LORAREG_Init+0x98>)
    d9a6:	781b      	ldrb	r3, [r3, #0]
    d9a8:	2b00      	cmp	r3, #0
    d9aa:	d109      	bne.n	d9c0 <LORAREG_Init+0x20>
		if (LORAWAN_SUCCESS == CreateAllRegSoftwareTimers())
    d9ac:	4b23      	ldr	r3, [pc, #140]	; (da3c <LORAREG_Init+0x9c>)
    d9ae:	4798      	blx	r3
    d9b0:	2808      	cmp	r0, #8
    d9b2:	d001      	beq.n	d9b8 <LORAREG_Init+0x18>
			result = LORAWAN_RESOURCE_UNAVAILABLE;
    d9b4:	2014      	movs	r0, #20
    d9b6:	e006      	b.n	d9c6 <LORAREG_Init+0x26>
			initialized = true;
    d9b8:	2201      	movs	r2, #1
    d9ba:	4b1f      	ldr	r3, [pc, #124]	; (da38 <LORAREG_Init+0x98>)
    d9bc:	701a      	strb	r2, [r3, #0]
    d9be:	e002      	b.n	d9c6 <LORAREG_Init+0x26>
		StopAllRegSoftwareTimers();	
    d9c0:	4b1f      	ldr	r3, [pc, #124]	; (da40 <LORAREG_Init+0xa0>)
    d9c2:	4798      	blx	r3
	StackRetStatus_t result = LORAWAN_SUCCESS;
    d9c4:	2008      	movs	r0, #8
    d9c6:	2300      	movs	r3, #0
		pGetAttr[i] = InValidGetAttr;
    d9c8:	4e1e      	ldr	r6, [pc, #120]	; (da44 <LORAREG_Init+0xa4>)
    d9ca:	4d1f      	ldr	r5, [pc, #124]	; (da48 <LORAREG_Init+0xa8>)
		pValidateAttr[i] = InValidAttr;
    d9cc:	4c1f      	ldr	r4, [pc, #124]	; (da4c <LORAREG_Init+0xac>)
    d9ce:	4a20      	ldr	r2, [pc, #128]	; (da50 <LORAREG_Init+0xb0>)
		pSetAttr[i] = InValidAttr;
    d9d0:	4920      	ldr	r1, [pc, #128]	; (da54 <LORAREG_Init+0xb4>)
		pGetAttr[i] = InValidGetAttr;
    d9d2:	519d      	str	r5, [r3, r6]
		pValidateAttr[i] = InValidAttr;
    d9d4:	511a      	str	r2, [r3, r4]
		pSetAttr[i] = InValidAttr;
    d9d6:	505a      	str	r2, [r3, r1]
    d9d8:	3304      	adds	r3, #4
	for(int i = 0; i < REG_NUM_ATTRIBUTES; i++)
    d9da:	2bf4      	cmp	r3, #244	; 0xf4
    d9dc:	d1f9      	bne.n	d9d2 <LORAREG_Init+0x32>
	if(ismBand == ISM_NA915)
    d9de:	2f02      	cmp	r7, #2
    d9e0:	d00d      	beq.n	d9fe <LORAREG_Init+0x5e>
	else if(ismBand == ISM_EU868 || ismBand == ISM_EU433)
    d9e2:	2f01      	cmp	r7, #1
    d9e4:	d90f      	bls.n	da06 <LORAREG_Init+0x66>
	else if(ismBand >= ISM_BRN923 && ismBand <= ISM_VTM923)
    d9e6:	1fbb      	subs	r3, r7, #6
    d9e8:	2b08      	cmp	r3, #8
    d9ea:	d910      	bls.n	da0e <LORAREG_Init+0x6e>
	else if(ismBand == ISM_AU915)
    d9ec:	2f03      	cmp	r7, #3
    d9ee:	d012      	beq.n	da16 <LORAREG_Init+0x76>
	else if(ismBand == ISM_IND865)
    d9f0:	2f0f      	cmp	r7, #15
    d9f2:	d014      	beq.n	da1e <LORAREG_Init+0x7e>
	else if(ismBand == ISM_JPN923)
    d9f4:	2f05      	cmp	r7, #5
    d9f6:	d016      	beq.n	da26 <LORAREG_Init+0x86>
	else if(ismBand == ISM_KR920)
    d9f8:	2f04      	cmp	r7, #4
    d9fa:	d018      	beq.n	da2e <LORAREG_Init+0x8e>
}
    d9fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	    result = LORAReg_InitNA(ismBand);
    d9fe:	2002      	movs	r0, #2
    da00:	4b15      	ldr	r3, [pc, #84]	; (da58 <LORAREG_Init+0xb8>)
    da02:	4798      	blx	r3
    da04:	e7fa      	b.n	d9fc <LORAREG_Init+0x5c>
	    result = LORAReg_InitEU(ismBand);		
    da06:	0038      	movs	r0, r7
    da08:	4b14      	ldr	r3, [pc, #80]	; (da5c <LORAREG_Init+0xbc>)
    da0a:	4798      	blx	r3
    da0c:	e7f6      	b.n	d9fc <LORAREG_Init+0x5c>
		result = LORAReg_InitAS(ismBand);
    da0e:	0038      	movs	r0, r7
    da10:	4b13      	ldr	r3, [pc, #76]	; (da60 <LORAREG_Init+0xc0>)
    da12:	4798      	blx	r3
    da14:	e7f2      	b.n	d9fc <LORAREG_Init+0x5c>
		result = LORAReg_InitAU(ismBand);
    da16:	2003      	movs	r0, #3
    da18:	4b12      	ldr	r3, [pc, #72]	; (da64 <LORAREG_Init+0xc4>)
    da1a:	4798      	blx	r3
    da1c:	e7ee      	b.n	d9fc <LORAREG_Init+0x5c>
		result = LORAReg_InitIN(ismBand);
    da1e:	200f      	movs	r0, #15
    da20:	4b11      	ldr	r3, [pc, #68]	; (da68 <LORAREG_Init+0xc8>)
    da22:	4798      	blx	r3
    da24:	e7ea      	b.n	d9fc <LORAREG_Init+0x5c>
		result = LORAReg_InitJP(ismBand);
    da26:	2005      	movs	r0, #5
    da28:	4b10      	ldr	r3, [pc, #64]	; (da6c <LORAREG_Init+0xcc>)
    da2a:	4798      	blx	r3
    da2c:	e7e6      	b.n	d9fc <LORAREG_Init+0x5c>
		result = LORAReg_InitKR(ismBand);
    da2e:	2004      	movs	r0, #4
    da30:	4b0f      	ldr	r3, [pc, #60]	; (da70 <LORAREG_Init+0xd0>)
    da32:	4798      	blx	r3
    da34:	e7e2      	b.n	d9fc <LORAREG_Init+0x5c>
    da36:	46c0      	nop			; (mov r8, r8)
    da38:	20000c79 	.word	0x20000c79
    da3c:	0000d949 	.word	0x0000d949
    da40:	0000d985 	.word	0x0000d985
    da44:	20000c7c 	.word	0x20000c7c
    da48:	0000963d 	.word	0x0000963d
    da4c:	20000e64 	.word	0x20000e64
    da50:	00009641 	.word	0x00009641
    da54:	20000d70 	.word	0x20000d70
    da58:	000093f9 	.word	0x000093f9
    da5c:	00008949 	.word	0x00008949
    da60:	00008451 	.word	0x00008451
    da64:	000086e9 	.word	0x000086e9
    da68:	00008c39 	.word	0x00008c39
    da6c:	00008e4d 	.word	0x00008e4d
    da70:	00009101 	.word	0x00009101

0000da74 <LORAREG_SupportedBands>:
	*bands = value;
    da74:	2301      	movs	r3, #1
    da76:	425b      	negs	r3, r3
    da78:	8003      	strh	r3, [r0, #0]
}
    da7a:	2008      	movs	r0, #8
    da7c:	4770      	bx	lr
	...

0000da80 <LORAREG_UnInit>:
{
    da80:	b510      	push	{r4, lr}
	StopAllRegSoftwareTimers();
    da82:	4b0d      	ldr	r3, [pc, #52]	; (dab8 <LORAREG_UnInit+0x38>)
    da84:	4798      	blx	r3
	if(RegParams.regParamItems.fileid)
    da86:	4b0d      	ldr	r3, [pc, #52]	; (dabc <LORAREG_UnInit+0x3c>)
    da88:	4a0d      	ldr	r2, [pc, #52]	; (dac0 <LORAREG_UnInit+0x40>)
    da8a:	5cd0      	ldrb	r0, [r2, r3]
    da8c:	2800      	cmp	r0, #0
    da8e:	d107      	bne.n	daa0 <LORAREG_UnInit+0x20>
	memset(&RegParams,0,sizeof(RegParams_t));
    da90:	2285      	movs	r2, #133	; 0x85
    da92:	0092      	lsls	r2, r2, #2
    da94:	2100      	movs	r1, #0
    da96:	480a      	ldr	r0, [pc, #40]	; (dac0 <LORAREG_UnInit+0x40>)
    da98:	4b0a      	ldr	r3, [pc, #40]	; (dac4 <LORAREG_UnInit+0x44>)
    da9a:	4798      	blx	r3
}
    da9c:	200a      	movs	r0, #10
    da9e:	bd10      	pop	{r4, pc}
	    PDS_UnRegFile(RegParams.regParamItems.fileid);
    daa0:	4b09      	ldr	r3, [pc, #36]	; (dac8 <LORAREG_UnInit+0x48>)
    daa2:	4798      	blx	r3
		if(RegParams.band == ISM_EU868)
    daa4:	232e      	movs	r3, #46	; 0x2e
    daa6:	4a06      	ldr	r2, [pc, #24]	; (dac0 <LORAREG_UnInit+0x40>)
    daa8:	5cd3      	ldrb	r3, [r2, r3]
    daaa:	2b00      	cmp	r3, #0
    daac:	d1f0      	bne.n	da90 <LORAREG_UnInit+0x10>
			PDS_UnRegFile(PDS_FILE_REG_EU868_12_IDX);
    daae:	200b      	movs	r0, #11
    dab0:	4b05      	ldr	r3, [pc, #20]	; (dac8 <LORAREG_UnInit+0x48>)
    dab2:	4798      	blx	r3
    dab4:	e7ec      	b.n	da90 <LORAREG_UnInit+0x10>
    dab6:	46c0      	nop			; (mov r8, r8)
    dab8:	0000d985 	.word	0x0000d985
    dabc:	0000020b 	.word	0x0000020b
    dac0:	200024d0 	.word	0x200024d0
    dac4:	00019e35 	.word	0x00019e35
    dac8:	0000e305 	.word	0x0000e305

0000dacc <sal_FillSubKey>:
    dacc:	b530      	push	{r4, r5, lr}
    dace:	1e53      	subs	r3, r2, #1
    dad0:	b2db      	uxtb	r3, r3
    dad2:	2a00      	cmp	r2, #0
    dad4:	d00b      	beq.n	daee <sal_FillSubKey+0x22>
    dad6:	2400      	movs	r4, #0
    dad8:	18c5      	adds	r5, r0, r3
    dada:	782a      	ldrb	r2, [r5, #0]
    dadc:	0052      	lsls	r2, r2, #1
    dade:	4322      	orrs	r2, r4
    dae0:	54ca      	strb	r2, [r1, r3]
    dae2:	782c      	ldrb	r4, [r5, #0]
    dae4:	09e4      	lsrs	r4, r4, #7
    dae6:	3b01      	subs	r3, #1
    dae8:	b2db      	uxtb	r3, r3
    daea:	2bff      	cmp	r3, #255	; 0xff
    daec:	d1f4      	bne.n	dad8 <sal_FillSubKey+0xc>
    daee:	bd30      	pop	{r4, r5, pc}

0000daf0 <SAL_Init>:
    daf0:	b510      	push	{r4, lr}
    daf2:	b082      	sub	sp, #8
    daf4:	0004      	movs	r4, r0
    daf6:	4b19      	ldr	r3, [pc, #100]	; (db5c <SAL_Init+0x6c>)
    daf8:	7018      	strb	r0, [r3, #0]
    dafa:	4b19      	ldr	r3, [pc, #100]	; (db60 <SAL_Init+0x70>)
    dafc:	4798      	blx	r3
    dafe:	2000      	movs	r0, #0
    db00:	2c00      	cmp	r4, #0
    db02:	d101      	bne.n	db08 <SAL_Init+0x18>
    db04:	b002      	add	sp, #8
    db06:	bd10      	pop	{r4, pc}
    db08:	4816      	ldr	r0, [pc, #88]	; (db64 <SAL_Init+0x74>)
    db0a:	2300      	movs	r3, #0
    db0c:	7003      	strb	r3, [r0, #0]
    db0e:	3303      	adds	r3, #3
    db10:	7043      	strb	r3, [r0, #1]
    db12:	33af      	adds	r3, #175	; 0xaf
    db14:	7103      	strb	r3, [r0, #4]
    db16:	3bb1      	subs	r3, #177	; 0xb1
    db18:	7143      	strb	r3, [r0, #5]
    db1a:	4b13      	ldr	r3, [pc, #76]	; (db68 <SAL_Init+0x78>)
    db1c:	6083      	str	r3, [r0, #8]
    db1e:	4b13      	ldr	r3, [pc, #76]	; (db6c <SAL_Init+0x7c>)
    db20:	8483      	strh	r3, [r0, #36]	; 0x24
    db22:	2314      	movs	r3, #20
    db24:	6283      	str	r3, [r0, #40]	; 0x28
    db26:	4b12      	ldr	r3, [pc, #72]	; (db70 <SAL_Init+0x80>)
    db28:	4798      	blx	r3
    db2a:	0003      	movs	r3, r0
    db2c:	2000      	movs	r0, #0
    db2e:	2b00      	cmp	r3, #0
    db30:	d1e8      	bne.n	db04 <SAL_Init+0x14>
    db32:	4810      	ldr	r0, [pc, #64]	; (db74 <SAL_Init+0x84>)
    db34:	4b10      	ldr	r3, [pc, #64]	; (db78 <SAL_Init+0x88>)
    db36:	4798      	blx	r3
    db38:	2800      	cmp	r0, #0
    db3a:	d003      	beq.n	db44 <SAL_Init+0x54>
    db3c:	1e43      	subs	r3, r0, #1
    db3e:	4198      	sbcs	r0, r3
    db40:	b2c0      	uxtb	r0, r0
    db42:	e7df      	b.n	db04 <SAL_Init+0x14>
    db44:	2320      	movs	r3, #32
    db46:	9301      	str	r3, [sp, #4]
    db48:	4b0a      	ldr	r3, [pc, #40]	; (db74 <SAL_Init+0x84>)
    db4a:	9300      	str	r3, [sp, #0]
    db4c:	2300      	movs	r3, #0
    db4e:	2200      	movs	r2, #0
    db50:	210e      	movs	r1, #14
    db52:	3002      	adds	r0, #2
    db54:	4c09      	ldr	r4, [pc, #36]	; (db7c <SAL_Init+0x8c>)
    db56:	47a0      	blx	r4
    db58:	e7f0      	b.n	db3c <SAL_Init+0x4c>
    db5a:	46c0      	nop			; (mov r8, r8)
    db5c:	20000fa8 	.word	0x20000fa8
    db60:	0000df91 	.word	0x0000df91
    db64:	20000f58 	.word	0x20000f58
    db68:	00061a80 	.word	0x00061a80
    db6c:	000005dc 	.word	0x000005dc
    db70:	00000129 	.word	0x00000129
    db74:	20000f88 	.word	0x20000f88
    db78:	00000501 	.word	0x00000501
    db7c:	0000090d 	.word	0x0000090d

0000db80 <SAL_AESEncode>:
    db80:	b530      	push	{r4, r5, lr}
    db82:	b089      	sub	sp, #36	; 0x24
    db84:	0004      	movs	r4, r0
    db86:	0015      	movs	r5, r2
    db88:	4b18      	ldr	r3, [pc, #96]	; (dbec <SAL_AESEncode+0x6c>)
    db8a:	781b      	ldrb	r3, [r3, #0]
    db8c:	2b00      	cmp	r3, #0
    db8e:	d010      	beq.n	dbb2 <SAL_AESEncode+0x32>
    db90:	2900      	cmp	r1, #0
    db92:	d019      	beq.n	dbc8 <SAL_AESEncode+0x48>
    db94:	2002      	movs	r0, #2
    db96:	2904      	cmp	r1, #4
    db98:	d809      	bhi.n	dbae <SAL_AESEncode+0x2e>
    db9a:	2210      	movs	r2, #16
    db9c:	0029      	movs	r1, r5
    db9e:	a804      	add	r0, sp, #16
    dba0:	4b13      	ldr	r3, [pc, #76]	; (dbf0 <SAL_AESEncode+0x70>)
    dba2:	4798      	blx	r3
    dba4:	a904      	add	r1, sp, #16
    dba6:	0020      	movs	r0, r4
    dba8:	4b12      	ldr	r3, [pc, #72]	; (dbf4 <SAL_AESEncode+0x74>)
    dbaa:	4798      	blx	r3
    dbac:	2000      	movs	r0, #0
    dbae:	b009      	add	sp, #36	; 0x24
    dbb0:	bd30      	pop	{r4, r5, pc}
    dbb2:	2210      	movs	r2, #16
    dbb4:	0029      	movs	r1, r5
    dbb6:	a804      	add	r0, sp, #16
    dbb8:	4b0d      	ldr	r3, [pc, #52]	; (dbf0 <SAL_AESEncode+0x70>)
    dbba:	4798      	blx	r3
    dbbc:	a904      	add	r1, sp, #16
    dbbe:	0020      	movs	r0, r4
    dbc0:	4b0c      	ldr	r3, [pc, #48]	; (dbf4 <SAL_AESEncode+0x74>)
    dbc2:	4798      	blx	r3
    dbc4:	2000      	movs	r0, #0
    dbc6:	e7f2      	b.n	dbae <SAL_AESEncode+0x2e>
    dbc8:	466b      	mov	r3, sp
    dbca:	0002      	movs	r2, r0
    dbcc:	2101      	movs	r1, #1
    dbce:	2000      	movs	r0, #0
    dbd0:	4d09      	ldr	r5, [pc, #36]	; (dbf8 <SAL_AESEncode+0x78>)
    dbd2:	47a8      	blx	r5
    dbd4:	0003      	movs	r3, r0
    dbd6:	2001      	movs	r0, #1
    dbd8:	2b00      	cmp	r3, #0
    dbda:	d1e8      	bne.n	dbae <SAL_AESEncode+0x2e>
    dbdc:	2210      	movs	r2, #16
    dbde:	4669      	mov	r1, sp
    dbe0:	0020      	movs	r0, r4
    dbe2:	4b03      	ldr	r3, [pc, #12]	; (dbf0 <SAL_AESEncode+0x70>)
    dbe4:	4798      	blx	r3
    dbe6:	2000      	movs	r0, #0
    dbe8:	e7e1      	b.n	dbae <SAL_AESEncode+0x2e>
    dbea:	46c0      	nop			; (mov r8, r8)
    dbec:	20000fa8 	.word	0x20000fa8
    dbf0:	00019d11 	.word	0x00019d11
    dbf4:	0000deb5 	.word	0x0000deb5
    dbf8:	000002e9 	.word	0x000002e9

0000dbfc <SAL_DeriveSessionKey>:
    dbfc:	b510      	push	{r4, lr}
    dbfe:	b082      	sub	sp, #8
    dc00:	4c0c      	ldr	r4, [pc, #48]	; (dc34 <SAL_DeriveSessionKey+0x38>)
    dc02:	7824      	ldrb	r4, [r4, #0]
    dc04:	2c00      	cmp	r4, #0
    dc06:	d012      	beq.n	dc2e <SAL_DeriveSessionKey+0x32>
    dc08:	424a      	negs	r2, r1
    dc0a:	414a      	adcs	r2, r1
    dc0c:	4c0a      	ldr	r4, [pc, #40]	; (dc38 <SAL_DeriveSessionKey+0x3c>)
    dc0e:	5ce3      	ldrb	r3, [r4, r3]
    dc10:	021b      	lsls	r3, r3, #8
    dc12:	5c61      	ldrb	r1, [r4, r1]
    dc14:	4319      	orrs	r1, r3
    dc16:	2300      	movs	r3, #0
    dc18:	9301      	str	r3, [sp, #4]
    dc1a:	9300      	str	r3, [sp, #0]
    dc1c:	0003      	movs	r3, r0
    dc1e:	202a      	movs	r0, #42	; 0x2a
    dc20:	4c06      	ldr	r4, [pc, #24]	; (dc3c <SAL_DeriveSessionKey+0x40>)
    dc22:	47a0      	blx	r4
    dc24:	1e43      	subs	r3, r0, #1
    dc26:	4198      	sbcs	r0, r3
    dc28:	b2c0      	uxtb	r0, r0
    dc2a:	b002      	add	sp, #8
    dc2c:	bd10      	pop	{r4, pc}
    dc2e:	4b04      	ldr	r3, [pc, #16]	; (dc40 <SAL_DeriveSessionKey+0x44>)
    dc30:	4798      	blx	r3
    dc32:	e7fa      	b.n	dc2a <SAL_DeriveSessionKey+0x2e>
    dc34:	20000fa8 	.word	0x20000fa8
    dc38:	00020120 	.word	0x00020120
    dc3c:	0000038d 	.word	0x0000038d
    dc40:	0000db81 	.word	0x0000db81

0000dc44 <SAL_Read>:
    dc44:	b530      	push	{r4, r5, lr}
    dc46:	b089      	sub	sp, #36	; 0x24
    dc48:	000c      	movs	r4, r1
    dc4a:	4b21      	ldr	r3, [pc, #132]	; (dcd0 <SAL_Read+0x8c>)
    dc4c:	781a      	ldrb	r2, [r3, #0]
    dc4e:	2300      	movs	r3, #0
    dc50:	2a00      	cmp	r2, #0
    dc52:	d014      	beq.n	dc7e <SAL_Read+0x3a>
    dc54:	4b1f      	ldr	r3, [pc, #124]	; (dcd4 <SAL_Read+0x90>)
    dc56:	5c19      	ldrb	r1, [r3, r0]
    dc58:	2806      	cmp	r0, #6
    dc5a:	d02b      	beq.n	dcb4 <SAL_Read+0x70>
    dc5c:	d812      	bhi.n	dc84 <SAL_Read+0x40>
    dc5e:	3801      	subs	r0, #1
    dc60:	2803      	cmp	r0, #3
    dc62:	d832      	bhi.n	dcca <SAL_Read+0x86>
    dc64:	b288      	uxth	r0, r1
    dc66:	230e      	movs	r3, #14
    dc68:	9300      	str	r3, [sp, #0]
    dc6a:	4b1b      	ldr	r3, [pc, #108]	; (dcd8 <SAL_Read+0x94>)
    dc6c:	0022      	movs	r2, r4
    dc6e:	2100      	movs	r1, #0
    dc70:	4c1a      	ldr	r4, [pc, #104]	; (dcdc <SAL_Read+0x98>)
    dc72:	47a0      	blx	r4
    dc74:	0005      	movs	r5, r0
    dc76:	2300      	movs	r3, #0
    dc78:	2d00      	cmp	r5, #0
    dc7a:	d000      	beq.n	dc7e <SAL_Read+0x3a>
    dc7c:	2301      	movs	r3, #1
    dc7e:	0018      	movs	r0, r3
    dc80:	b009      	add	sp, #36	; 0x24
    dc82:	bd30      	pop	{r4, r5, pc}
    dc84:	2807      	cmp	r0, #7
    dc86:	d120      	bne.n	dcca <SAL_Read+0x86>
    dc88:	2308      	movs	r3, #8
    dc8a:	9303      	str	r3, [sp, #12]
    dc8c:	3308      	adds	r3, #8
    dc8e:	9300      	str	r3, [sp, #0]
    dc90:	ab04      	add	r3, sp, #16
    dc92:	2200      	movs	r2, #0
    dc94:	210a      	movs	r1, #10
    dc96:	2002      	movs	r0, #2
    dc98:	4d11      	ldr	r5, [pc, #68]	; (dce0 <SAL_Read+0x9c>)
    dc9a:	47a8      	blx	r5
    dc9c:	0005      	movs	r5, r0
    dc9e:	a804      	add	r0, sp, #16
    dca0:	4b10      	ldr	r3, [pc, #64]	; (dce4 <SAL_Read+0xa0>)
    dca2:	4798      	blx	r3
    dca4:	0001      	movs	r1, r0
    dca6:	ab03      	add	r3, sp, #12
    dca8:	0022      	movs	r2, r4
    dcaa:	a804      	add	r0, sp, #16
    dcac:	4c0e      	ldr	r4, [pc, #56]	; (dce8 <SAL_Read+0xa4>)
    dcae:	47a0      	blx	r4
    dcb0:	2300      	movs	r3, #0
    dcb2:	e7e1      	b.n	dc78 <SAL_Read+0x34>
    dcb4:	b289      	uxth	r1, r1
    dcb6:	2308      	movs	r3, #8
    dcb8:	9300      	str	r3, [sp, #0]
    dcba:	0023      	movs	r3, r4
    dcbc:	2200      	movs	r2, #0
    dcbe:	2002      	movs	r0, #2
    dcc0:	4c07      	ldr	r4, [pc, #28]	; (dce0 <SAL_Read+0x9c>)
    dcc2:	47a0      	blx	r4
    dcc4:	0005      	movs	r5, r0
    dcc6:	2300      	movs	r3, #0
    dcc8:	e7d6      	b.n	dc78 <SAL_Read+0x34>
    dcca:	2500      	movs	r5, #0
    dccc:	2302      	movs	r3, #2
    dcce:	e7d3      	b.n	dc78 <SAL_Read+0x34>
    dcd0:	20000fa8 	.word	0x20000fa8
    dcd4:	00020120 	.word	0x00020120
    dcd8:	20000f88 	.word	0x20000f88
    dcdc:	00000659 	.word	0x00000659
    dce0:	0000077d 	.word	0x0000077d
    dce4:	0001a269 	.word	0x0001a269
    dce8:	00000df9 	.word	0x00000df9

0000dcec <SAL_AESCmac>:
    dcec:	b5f0      	push	{r4, r5, r6, r7, lr}
    dcee:	46d6      	mov	lr, sl
    dcf0:	464f      	mov	r7, r9
    dcf2:	4646      	mov	r6, r8
    dcf4:	b5c0      	push	{r6, r7, lr}
    dcf6:	b0a4      	sub	sp, #144	; 0x90
    dcf8:	9001      	str	r0, [sp, #4]
    dcfa:	000f      	movs	r7, r1
    dcfc:	9102      	str	r1, [sp, #8]
    dcfe:	9203      	str	r2, [sp, #12]
    dd00:	469a      	mov	sl, r3
    dd02:	ab2c      	add	r3, sp, #176	; 0xb0
    dd04:	881c      	ldrh	r4, [r3, #0]
    dd06:	ae08      	add	r6, sp, #32
    dd08:	2210      	movs	r2, #16
    dd0a:	2100      	movs	r1, #0
    dd0c:	0030      	movs	r0, r6
    dd0e:	4d64      	ldr	r5, [pc, #400]	; (dea0 <SAL_AESCmac+0x1b4>)
    dd10:	47a8      	blx	r5
    dd12:	2387      	movs	r3, #135	; 0x87
    dd14:	73f3      	strb	r3, [r6, #15]
    dd16:	2210      	movs	r2, #16
    dd18:	2100      	movs	r1, #0
    dd1a:	a804      	add	r0, sp, #16
    dd1c:	47a8      	blx	r5
    dd1e:	9a01      	ldr	r2, [sp, #4]
    dd20:	0039      	movs	r1, r7
    dd22:	a804      	add	r0, sp, #16
    dd24:	4b5f      	ldr	r3, [pc, #380]	; (dea4 <SAL_AESCmac+0x1b8>)
    dd26:	4798      	blx	r3
    dd28:	ab04      	add	r3, sp, #16
    dd2a:	781b      	ldrb	r3, [r3, #0]
    dd2c:	2b7f      	cmp	r3, #127	; 0x7f
    dd2e:	d82d      	bhi.n	dd8c <SAL_AESCmac+0xa0>
    dd30:	2210      	movs	r2, #16
    dd32:	a920      	add	r1, sp, #128	; 0x80
    dd34:	a804      	add	r0, sp, #16
    dd36:	4b5c      	ldr	r3, [pc, #368]	; (dea8 <SAL_AESCmac+0x1bc>)
    dd38:	4798      	blx	r3
    dd3a:	ab20      	add	r3, sp, #128	; 0x80
    dd3c:	781b      	ldrb	r3, [r3, #0]
    dd3e:	2b7f      	cmp	r3, #127	; 0x7f
    dd40:	d834      	bhi.n	ddac <SAL_AESCmac+0xc0>
    dd42:	2210      	movs	r2, #16
    dd44:	a91c      	add	r1, sp, #112	; 0x70
    dd46:	a820      	add	r0, sp, #128	; 0x80
    dd48:	4b57      	ldr	r3, [pc, #348]	; (dea8 <SAL_AESCmac+0x1bc>)
    dd4a:	4798      	blx	r3
    dd4c:	0023      	movs	r3, r4
    dd4e:	330f      	adds	r3, #15
    dd50:	111d      	asrs	r5, r3, #4
    dd52:	b2aa      	uxth	r2, r5
    dd54:	4690      	mov	r8, r2
    dd56:	2a00      	cmp	r2, #0
    dd58:	d038      	beq.n	ddcc <SAL_AESCmac+0xe0>
    dd5a:	0722      	lsls	r2, r4, #28
    dd5c:	d138      	bne.n	ddd0 <SAL_AESCmac+0xe4>
    dd5e:	4642      	mov	r2, r8
    dd60:	3a01      	subs	r2, #1
    dd62:	0112      	lsls	r2, r2, #4
    dd64:	b296      	uxth	r6, r2
    dd66:	4f51      	ldr	r7, [pc, #324]	; (deac <SAL_AESCmac+0x1c0>)
    dd68:	401f      	ands	r7, r3
    dd6a:	42be      	cmp	r6, r7
    dd6c:	da54      	bge.n	de18 <SAL_AESCmac+0x12c>
    dd6e:	0033      	movs	r3, r6
    dd70:	a910      	add	r1, sp, #64	; 0x40
    dd72:	aa20      	add	r2, sp, #128	; 0x80
    dd74:	1b98      	subs	r0, r3, r6
    dd76:	b280      	uxth	r0, r0
    dd78:	4654      	mov	r4, sl
    dd7a:	5ce4      	ldrb	r4, [r4, r3]
    dd7c:	5c15      	ldrb	r5, [r2, r0]
    dd7e:	406c      	eors	r4, r5
    dd80:	540c      	strb	r4, [r1, r0]
    dd82:	3301      	adds	r3, #1
    dd84:	b29b      	uxth	r3, r3
    dd86:	42bb      	cmp	r3, r7
    dd88:	dbf4      	blt.n	dd74 <SAL_AESCmac+0x88>
    dd8a:	e045      	b.n	de18 <SAL_AESCmac+0x12c>
    dd8c:	2210      	movs	r2, #16
    dd8e:	a920      	add	r1, sp, #128	; 0x80
    dd90:	a804      	add	r0, sp, #16
    dd92:	4b45      	ldr	r3, [pc, #276]	; (dea8 <SAL_AESCmac+0x1bc>)
    dd94:	4798      	blx	r3
    dd96:	2300      	movs	r3, #0
    dd98:	aa20      	add	r2, sp, #128	; 0x80
    dd9a:	a908      	add	r1, sp, #32
    dd9c:	5c98      	ldrb	r0, [r3, r2]
    dd9e:	5c5d      	ldrb	r5, [r3, r1]
    dda0:	4068      	eors	r0, r5
    dda2:	5498      	strb	r0, [r3, r2]
    dda4:	3301      	adds	r3, #1
    dda6:	2b10      	cmp	r3, #16
    dda8:	d1f8      	bne.n	dd9c <SAL_AESCmac+0xb0>
    ddaa:	e7c6      	b.n	dd3a <SAL_AESCmac+0x4e>
    ddac:	2210      	movs	r2, #16
    ddae:	a91c      	add	r1, sp, #112	; 0x70
    ddb0:	a820      	add	r0, sp, #128	; 0x80
    ddb2:	4b3d      	ldr	r3, [pc, #244]	; (dea8 <SAL_AESCmac+0x1bc>)
    ddb4:	4798      	blx	r3
    ddb6:	2300      	movs	r3, #0
    ddb8:	aa1c      	add	r2, sp, #112	; 0x70
    ddba:	a908      	add	r1, sp, #32
    ddbc:	5c98      	ldrb	r0, [r3, r2]
    ddbe:	5c5d      	ldrb	r5, [r3, r1]
    ddc0:	4068      	eors	r0, r5
    ddc2:	5498      	strb	r0, [r3, r2]
    ddc4:	3301      	adds	r3, #1
    ddc6:	2b10      	cmp	r3, #16
    ddc8:	d1f8      	bne.n	ddbc <SAL_AESCmac+0xd0>
    ddca:	e7bf      	b.n	dd4c <SAL_AESCmac+0x60>
    ddcc:	2301      	movs	r3, #1
    ddce:	4698      	mov	r8, r3
    ddd0:	230f      	movs	r3, #15
    ddd2:	0020      	movs	r0, r4
    ddd4:	4398      	bics	r0, r3
    ddd6:	2300      	movs	r3, #0
    ddd8:	220f      	movs	r2, #15
    ddda:	4014      	ands	r4, r2
    dddc:	a90c      	add	r1, sp, #48	; 0x30
    ddde:	2700      	movs	r7, #0
    dde0:	2680      	movs	r6, #128	; 0x80
    dde2:	4450      	add	r0, sl
    dde4:	e005      	b.n	ddf2 <SAL_AESCmac+0x106>
    dde6:	4294      	cmp	r4, r2
    dde8:	d009      	beq.n	ddfe <SAL_AESCmac+0x112>
    ddea:	545f      	strb	r7, [r3, r1]
    ddec:	3301      	adds	r3, #1
    ddee:	2b10      	cmp	r3, #16
    ddf0:	d007      	beq.n	de02 <SAL_AESCmac+0x116>
    ddf2:	b29a      	uxth	r2, r3
    ddf4:	4294      	cmp	r4, r2
    ddf6:	d9f6      	bls.n	dde6 <SAL_AESCmac+0xfa>
    ddf8:	5cc2      	ldrb	r2, [r0, r3]
    ddfa:	545a      	strb	r2, [r3, r1]
    ddfc:	e7f6      	b.n	ddec <SAL_AESCmac+0x100>
    ddfe:	545e      	strb	r6, [r3, r1]
    de00:	e7f4      	b.n	ddec <SAL_AESCmac+0x100>
    de02:	2300      	movs	r3, #0
    de04:	a810      	add	r0, sp, #64	; 0x40
    de06:	a90c      	add	r1, sp, #48	; 0x30
    de08:	aa1c      	add	r2, sp, #112	; 0x70
    de0a:	5c5c      	ldrb	r4, [r3, r1]
    de0c:	5c9d      	ldrb	r5, [r3, r2]
    de0e:	406c      	eors	r4, r5
    de10:	541c      	strb	r4, [r3, r0]
    de12:	3301      	adds	r3, #1
    de14:	2b10      	cmp	r3, #16
    de16:	d1f8      	bne.n	de0a <SAL_AESCmac+0x11e>
    de18:	2210      	movs	r2, #16
    de1a:	2100      	movs	r1, #0
    de1c:	a818      	add	r0, sp, #96	; 0x60
    de1e:	4b20      	ldr	r3, [pc, #128]	; (dea0 <SAL_AESCmac+0x1b4>)
    de20:	4798      	blx	r3
    de22:	2301      	movs	r3, #1
    de24:	425b      	negs	r3, r3
    de26:	4443      	add	r3, r8
    de28:	4699      	mov	r9, r3
    de2a:	2000      	movs	r0, #0
    de2c:	2700      	movs	r7, #0
    de2e:	2b00      	cmp	r3, #0
    de30:	dd1a      	ble.n	de68 <SAL_AESCmac+0x17c>
    de32:	ad14      	add	r5, sp, #80	; 0x50
    de34:	ac18      	add	r4, sp, #96	; 0x60
    de36:	4e1e      	ldr	r6, [pc, #120]	; (deb0 <SAL_AESCmac+0x1c4>)
    de38:	0100      	lsls	r0, r0, #4
    de3a:	2300      	movs	r3, #0
    de3c:	4450      	add	r0, sl
    de3e:	5cc2      	ldrb	r2, [r0, r3]
    de40:	5d19      	ldrb	r1, [r3, r4]
    de42:	404a      	eors	r2, r1
    de44:	555a      	strb	r2, [r3, r5]
    de46:	3301      	adds	r3, #1
    de48:	2b10      	cmp	r3, #16
    de4a:	d1f8      	bne.n	de3e <SAL_AESCmac+0x152>
    de4c:	2210      	movs	r2, #16
    de4e:	0029      	movs	r1, r5
    de50:	0020      	movs	r0, r4
    de52:	47b0      	blx	r6
    de54:	9a01      	ldr	r2, [sp, #4]
    de56:	9902      	ldr	r1, [sp, #8]
    de58:	0020      	movs	r0, r4
    de5a:	4b12      	ldr	r3, [pc, #72]	; (dea4 <SAL_AESCmac+0x1b8>)
    de5c:	4798      	blx	r3
    de5e:	3701      	adds	r7, #1
    de60:	b2bf      	uxth	r7, r7
    de62:	0038      	movs	r0, r7
    de64:	454f      	cmp	r7, r9
    de66:	dbe7      	blt.n	de38 <SAL_AESCmac+0x14c>
    de68:	2300      	movs	r3, #0
    de6a:	ac14      	add	r4, sp, #80	; 0x50
    de6c:	a818      	add	r0, sp, #96	; 0x60
    de6e:	a910      	add	r1, sp, #64	; 0x40
    de70:	5c1a      	ldrb	r2, [r3, r0]
    de72:	5c5d      	ldrb	r5, [r3, r1]
    de74:	406a      	eors	r2, r5
    de76:	551a      	strb	r2, [r3, r4]
    de78:	3301      	adds	r3, #1
    de7a:	2b10      	cmp	r3, #16
    de7c:	d1f8      	bne.n	de70 <SAL_AESCmac+0x184>
    de7e:	9a01      	ldr	r2, [sp, #4]
    de80:	9902      	ldr	r1, [sp, #8]
    de82:	a814      	add	r0, sp, #80	; 0x50
    de84:	4b07      	ldr	r3, [pc, #28]	; (dea4 <SAL_AESCmac+0x1b8>)
    de86:	4798      	blx	r3
    de88:	2210      	movs	r2, #16
    de8a:	a914      	add	r1, sp, #80	; 0x50
    de8c:	9803      	ldr	r0, [sp, #12]
    de8e:	4b08      	ldr	r3, [pc, #32]	; (deb0 <SAL_AESCmac+0x1c4>)
    de90:	4798      	blx	r3
    de92:	2000      	movs	r0, #0
    de94:	b024      	add	sp, #144	; 0x90
    de96:	bc1c      	pop	{r2, r3, r4}
    de98:	4690      	mov	r8, r2
    de9a:	4699      	mov	r9, r3
    de9c:	46a2      	mov	sl, r4
    de9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    dea0:	00019e35 	.word	0x00019e35
    dea4:	0000db81 	.word	0x0000db81
    dea8:	0000dacd 	.word	0x0000dacd
    deac:	000ffff0 	.word	0x000ffff0
    deb0:	00019d11 	.word	0x00019d11

0000deb4 <AESEncode>:
    deb4:	b5f0      	push	{r4, r5, r6, r7, lr}
    deb6:	b083      	sub	sp, #12
    deb8:	0004      	movs	r4, r0
    deba:	000e      	movs	r6, r1
    debc:	4a2b      	ldr	r2, [pc, #172]	; (df6c <AESEncode+0xb8>)
    debe:	2101      	movs	r1, #1
    dec0:	7011      	strb	r1, [r2, #0]
    dec2:	2300      	movs	r3, #0
    dec4:	7053      	strb	r3, [r2, #1]
    dec6:	7091      	strb	r1, [r2, #2]
    dec8:	70d3      	strb	r3, [r2, #3]
    deca:	7113      	strb	r3, [r2, #4]
    decc:	7213      	strb	r3, [r2, #8]
    dece:	4928      	ldr	r1, [pc, #160]	; (df70 <AESEncode+0xbc>)
    ded0:	4828      	ldr	r0, [pc, #160]	; (df74 <AESEncode+0xc0>)
    ded2:	4b29      	ldr	r3, [pc, #164]	; (df78 <AESEncode+0xc4>)
    ded4:	4798      	blx	r3
    ded6:	2100      	movs	r1, #0
    ded8:	ad01      	add	r5, sp, #4
    deda:	4f28      	ldr	r7, [pc, #160]	; (df7c <AESEncode+0xc8>)
    dedc:	1870      	adds	r0, r6, r1
    dede:	2300      	movs	r3, #0
    dee0:	5cc2      	ldrb	r2, [r0, r3]
    dee2:	555a      	strb	r2, [r3, r5]
    dee4:	3301      	adds	r3, #1
    dee6:	2b04      	cmp	r3, #4
    dee8:	d1fa      	bne.n	dee0 <AESEncode+0x2c>
    deea:	9b01      	ldr	r3, [sp, #4]
    deec:	51cb      	str	r3, [r1, r7]
    deee:	3104      	adds	r1, #4
    def0:	2910      	cmp	r1, #16
    def2:	d1f3      	bne.n	dedc <AESEncode+0x28>
    def4:	4d1f      	ldr	r5, [pc, #124]	; (df74 <AESEncode+0xc0>)
    def6:	4921      	ldr	r1, [pc, #132]	; (df7c <AESEncode+0xc8>)
    def8:	0028      	movs	r0, r5
    defa:	4b21      	ldr	r3, [pc, #132]	; (df80 <AESEncode+0xcc>)
    defc:	4798      	blx	r3
    defe:	682a      	ldr	r2, [r5, #0]
    df00:	7913      	ldrb	r3, [r2, #4]
    df02:	2102      	movs	r1, #2
    df04:	430b      	orrs	r3, r1
    df06:	7113      	strb	r3, [r2, #4]
    df08:	2100      	movs	r1, #0
    df0a:	ad01      	add	r5, sp, #4
    df0c:	4e1b      	ldr	r6, [pc, #108]	; (df7c <AESEncode+0xc8>)
    df0e:	1860      	adds	r0, r4, r1
    df10:	2300      	movs	r3, #0
    df12:	5cc2      	ldrb	r2, [r0, r3]
    df14:	555a      	strb	r2, [r3, r5]
    df16:	3301      	adds	r3, #1
    df18:	2b04      	cmp	r3, #4
    df1a:	d1fa      	bne.n	df12 <AESEncode+0x5e>
    df1c:	9b01      	ldr	r3, [sp, #4]
    df1e:	518b      	str	r3, [r1, r6]
    df20:	3104      	adds	r1, #4
    df22:	2910      	cmp	r1, #16
    df24:	d1f3      	bne.n	df0e <AESEncode+0x5a>
    df26:	4d13      	ldr	r5, [pc, #76]	; (df74 <AESEncode+0xc0>)
    df28:	4914      	ldr	r1, [pc, #80]	; (df7c <AESEncode+0xc8>)
    df2a:	0028      	movs	r0, r5
    df2c:	4b15      	ldr	r3, [pc, #84]	; (df84 <AESEncode+0xd0>)
    df2e:	4798      	blx	r3
    df30:	682d      	ldr	r5, [r5, #0]
    df32:	792b      	ldrb	r3, [r5, #4]
    df34:	2202      	movs	r2, #2
    df36:	4393      	bics	r3, r2
    df38:	712b      	strb	r3, [r5, #4]
    df3a:	2101      	movs	r1, #1
    df3c:	2002      	movs	r0, #2
    df3e:	e001      	b.n	df44 <AESEncode+0x90>
    df40:	4211      	tst	r1, r2
    df42:	d107      	bne.n	df54 <AESEncode+0xa0>
    df44:	79eb      	ldrb	r3, [r5, #7]
    df46:	b2db      	uxtb	r3, r3
    df48:	000a      	movs	r2, r1
    df4a:	401a      	ands	r2, r3
    df4c:	4218      	tst	r0, r3
    df4e:	d0f7      	beq.n	df40 <AESEncode+0x8c>
    df50:	4302      	orrs	r2, r0
    df52:	e7f5      	b.n	df40 <AESEncode+0x8c>
    df54:	4d09      	ldr	r5, [pc, #36]	; (df7c <AESEncode+0xc8>)
    df56:	0029      	movs	r1, r5
    df58:	4806      	ldr	r0, [pc, #24]	; (df74 <AESEncode+0xc0>)
    df5a:	4b0b      	ldr	r3, [pc, #44]	; (df88 <AESEncode+0xd4>)
    df5c:	4798      	blx	r3
    df5e:	2210      	movs	r2, #16
    df60:	0029      	movs	r1, r5
    df62:	0020      	movs	r0, r4
    df64:	4b09      	ldr	r3, [pc, #36]	; (df8c <AESEncode+0xd8>)
    df66:	4798      	blx	r3
    df68:	b003      	add	sp, #12
    df6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    df6c:	200026e4 	.word	0x200026e4
    df70:	42003400 	.word	0x42003400
    df74:	200026f0 	.word	0x200026f0
    df78:	0000470d 	.word	0x0000470d
    df7c:	20000fac 	.word	0x20000fac
    df80:	000047a1 	.word	0x000047a1
    df84:	000047d5 	.word	0x000047d5
    df88:	00004825 	.word	0x00004825
    df8c:	00019d11 	.word	0x00019d11

0000df90 <AESInit>:
    df90:	b570      	push	{r4, r5, r6, lr}
    df92:	4d07      	ldr	r5, [pc, #28]	; (dfb0 <AESInit+0x20>)
    df94:	0028      	movs	r0, r5
    df96:	4b07      	ldr	r3, [pc, #28]	; (dfb4 <AESInit+0x24>)
    df98:	4798      	blx	r3
    df9a:	4c07      	ldr	r4, [pc, #28]	; (dfb8 <AESInit+0x28>)
    df9c:	002a      	movs	r2, r5
    df9e:	4907      	ldr	r1, [pc, #28]	; (dfbc <AESInit+0x2c>)
    dfa0:	0020      	movs	r0, r4
    dfa2:	4b07      	ldr	r3, [pc, #28]	; (dfc0 <AESInit+0x30>)
    dfa4:	4798      	blx	r3
    dfa6:	0020      	movs	r0, r4
    dfa8:	4b06      	ldr	r3, [pc, #24]	; (dfc4 <AESInit+0x34>)
    dfaa:	4798      	blx	r3
    dfac:	bd70      	pop	{r4, r5, r6, pc}
    dfae:	46c0      	nop			; (mov r8, r8)
    dfb0:	200026e4 	.word	0x200026e4
    dfb4:	000046d1 	.word	0x000046d1
    dfb8:	200026f0 	.word	0x200026f0
    dfbc:	42003400 	.word	0x42003400
    dfc0:	00004781 	.word	0x00004781
    dfc4:	000046eb 	.word	0x000046eb

0000dfc8 <PDS_Init>:
    dfc8:	b510      	push	{r4, lr}
    dfca:	4b03      	ldr	r3, [pc, #12]	; (dfd8 <PDS_Init+0x10>)
    dfcc:	4798      	blx	r3
    dfce:	2200      	movs	r2, #0
    dfd0:	4b02      	ldr	r3, [pc, #8]	; (dfdc <PDS_Init+0x14>)
    dfd2:	701a      	strb	r2, [r3, #0]
    dfd4:	bd10      	pop	{r4, pc}
    dfd6:	46c0      	nop			; (mov r8, r8)
    dfd8:	0000e805 	.word	0x0000e805
    dfdc:	20000fbc 	.word	0x20000fbc

0000dfe0 <PDS_Store>:
    dfe0:	b510      	push	{r4, lr}
    dfe2:	4b14      	ldr	r3, [pc, #80]	; (e034 <PDS_Store+0x54>)
    dfe4:	781a      	ldrb	r2, [r3, #0]
    dfe6:	2300      	movs	r3, #0
    dfe8:	2a00      	cmp	r2, #0
    dfea:	d106      	bne.n	dffa <PDS_Store+0x1a>
    dfec:	0102      	lsls	r2, r0, #4
    dfee:	4b12      	ldr	r3, [pc, #72]	; (e038 <PDS_Store+0x58>)
    dff0:	189b      	adds	r3, r3, r2
    dff2:	791a      	ldrb	r2, [r3, #4]
    dff4:	2305      	movs	r3, #5
    dff6:	2a00      	cmp	r2, #0
    dff8:	d101      	bne.n	dffe <PDS_Store+0x1e>
    dffa:	0018      	movs	r0, r3
    dffc:	bd10      	pop	{r4, pc}
    dffe:	0103      	lsls	r3, r0, #4
    e000:	4a0d      	ldr	r2, [pc, #52]	; (e038 <PDS_Store+0x58>)
    e002:	589c      	ldr	r4, [r3, r2]
    e004:	2c00      	cmp	r4, #0
    e006:	d011      	beq.n	e02c <PDS_Store+0x4c>
    e008:	001a      	movs	r2, r3
    e00a:	4b0b      	ldr	r3, [pc, #44]	; (e038 <PDS_Store+0x58>)
    e00c:	189b      	adds	r3, r3, r2
    e00e:	689b      	ldr	r3, [r3, #8]
    e010:	2b00      	cmp	r3, #0
    e012:	d00d      	beq.n	e030 <PDS_Store+0x50>
    e014:	2305      	movs	r3, #5
    e016:	280c      	cmp	r0, #12
    e018:	d8ef      	bhi.n	dffa <PDS_Store+0x1a>
    e01a:	3b04      	subs	r3, #4
    e01c:	5463      	strb	r3, [r4, r1]
    e01e:	4a07      	ldr	r2, [pc, #28]	; (e03c <PDS_Store+0x5c>)
    e020:	5413      	strb	r3, [r2, r0]
    e022:	2001      	movs	r0, #1
    e024:	4b06      	ldr	r3, [pc, #24]	; (e040 <PDS_Store+0x60>)
    e026:	4798      	blx	r3
    e028:	2300      	movs	r3, #0
    e02a:	e7e6      	b.n	dffa <PDS_Store+0x1a>
    e02c:	2305      	movs	r3, #5
    e02e:	e7e4      	b.n	dffa <PDS_Store+0x1a>
    e030:	2305      	movs	r3, #5
    e032:	e7e2      	b.n	dffa <PDS_Store+0x1a>
    e034:	20000fbc 	.word	0x20000fbc
    e038:	20002708 	.word	0x20002708
    e03c:	200026f8 	.word	0x200026f8
    e040:	0000e4dd 	.word	0x0000e4dd

0000e044 <PDS_Restore>:
    e044:	b5f0      	push	{r4, r5, r6, r7, lr}
    e046:	b0c3      	sub	sp, #268	; 0x10c
    e048:	0006      	movs	r6, r0
    e04a:	000d      	movs	r5, r1
    e04c:	4b2a      	ldr	r3, [pc, #168]	; (e0f8 <PDS_Restore+0xb4>)
    e04e:	781b      	ldrb	r3, [r3, #0]
    e050:	2400      	movs	r4, #0
    e052:	2b00      	cmp	r3, #0
    e054:	d106      	bne.n	e064 <PDS_Restore+0x20>
    e056:	0102      	lsls	r2, r0, #4
    e058:	4b28      	ldr	r3, [pc, #160]	; (e0fc <PDS_Restore+0xb8>)
    e05a:	189b      	adds	r3, r3, r2
    e05c:	791c      	ldrb	r4, [r3, #4]
    e05e:	2c00      	cmp	r4, #0
    e060:	d103      	bne.n	e06a <PDS_Restore+0x26>
    e062:	2405      	movs	r4, #5
    e064:	0020      	movs	r0, r4
    e066:	b043      	add	sp, #268	; 0x10c
    e068:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e06a:	0013      	movs	r3, r2
    e06c:	4a23      	ldr	r2, [pc, #140]	; (e0fc <PDS_Restore+0xb8>)
    e06e:	589b      	ldr	r3, [r3, r2]
    e070:	2b00      	cmp	r3, #0
    e072:	d0f6      	beq.n	e062 <PDS_Restore+0x1e>
    e074:	0102      	lsls	r2, r0, #4
    e076:	4b21      	ldr	r3, [pc, #132]	; (e0fc <PDS_Restore+0xb8>)
    e078:	189b      	adds	r3, r3, r2
    e07a:	689f      	ldr	r7, [r3, #8]
    e07c:	2f00      	cmp	r7, #0
    e07e:	d0f0      	beq.n	e062 <PDS_Restore+0x1e>
    e080:	2280      	movs	r2, #128	; 0x80
    e082:	0052      	lsls	r2, r2, #1
    e084:	2100      	movs	r1, #0
    e086:	a802      	add	r0, sp, #8
    e088:	4b1d      	ldr	r3, [pc, #116]	; (e100 <PDS_Restore+0xbc>)
    e08a:	4798      	blx	r3
    e08c:	4b1d      	ldr	r3, [pc, #116]	; (e104 <PDS_Restore+0xc0>)
    e08e:	469c      	mov	ip, r3
    e090:	4464      	add	r4, ip
    e092:	00e4      	lsls	r4, r4, #3
    e094:	1939      	adds	r1, r7, r4
    e096:	2208      	movs	r2, #8
    e098:	4668      	mov	r0, sp
    e09a:	4b1b      	ldr	r3, [pc, #108]	; (e108 <PDS_Restore+0xc4>)
    e09c:	4798      	blx	r3
    e09e:	466b      	mov	r3, sp
    e0a0:	79da      	ldrb	r2, [r3, #7]
    e0a2:	799b      	ldrb	r3, [r3, #6]
    e0a4:	18d2      	adds	r2, r2, r3
    e0a6:	3205      	adds	r2, #5
    e0a8:	a902      	add	r1, sp, #8
    e0aa:	0030      	movs	r0, r6
    e0ac:	4b17      	ldr	r3, [pc, #92]	; (e10c <PDS_Restore+0xc8>)
    e0ae:	4798      	blx	r3
    e0b0:	1e04      	subs	r4, r0, #0
    e0b2:	d1d7      	bne.n	e064 <PDS_Restore+0x20>
    e0b4:	0136      	lsls	r6, r6, #4
    e0b6:	4b11      	ldr	r3, [pc, #68]	; (e0fc <PDS_Restore+0xb8>)
    e0b8:	199e      	adds	r6, r3, r6
    e0ba:	00eb      	lsls	r3, r5, #3
    e0bc:	68b1      	ldr	r1, [r6, #8]
    e0be:	18c9      	adds	r1, r1, r3
    e0c0:	2208      	movs	r2, #8
    e0c2:	4668      	mov	r0, sp
    e0c4:	4b10      	ldr	r3, [pc, #64]	; (e108 <PDS_Restore+0xc4>)
    e0c6:	4798      	blx	r3
    e0c8:	466b      	mov	r3, sp
    e0ca:	795b      	ldrb	r3, [r3, #5]
    e0cc:	42ab      	cmp	r3, r5
    e0ce:	d001      	beq.n	e0d4 <PDS_Restore+0x90>
    e0d0:	2403      	movs	r4, #3
    e0d2:	e7c7      	b.n	e064 <PDS_Restore+0x20>
    e0d4:	466b      	mov	r3, sp
    e0d6:	79d9      	ldrb	r1, [r3, #7]
    e0d8:	2315      	movs	r3, #21
    e0da:	446b      	add	r3, sp
    e0dc:	469c      	mov	ip, r3
    e0de:	4461      	add	r1, ip
    e0e0:	790b      	ldrb	r3, [r1, #4]
    e0e2:	2b00      	cmp	r3, #0
    e0e4:	d001      	beq.n	e0ea <PDS_Restore+0xa6>
    e0e6:	2406      	movs	r4, #6
    e0e8:	e7bc      	b.n	e064 <PDS_Restore+0x20>
    e0ea:	466b      	mov	r3, sp
    e0ec:	799a      	ldrb	r2, [r3, #6]
    e0ee:	3105      	adds	r1, #5
    e0f0:	9800      	ldr	r0, [sp, #0]
    e0f2:	4b05      	ldr	r3, [pc, #20]	; (e108 <PDS_Restore+0xc4>)
    e0f4:	4798      	blx	r3
    e0f6:	e7b5      	b.n	e064 <PDS_Restore+0x20>
    e0f8:	20000fbc 	.word	0x20000fbc
    e0fc:	20002708 	.word	0x20002708
    e100:	00019e35 	.word	0x00019e35
    e104:	1fffffff 	.word	0x1fffffff
    e108:	00019d11 	.word	0x00019d11
    e10c:	0000e9a1 	.word	0x0000e9a1

0000e110 <PDS_IsRestorable>:
    e110:	b570      	push	{r4, r5, r6, lr}
    e112:	4b0e      	ldr	r3, [pc, #56]	; (e14c <PDS_IsRestorable+0x3c>)
    e114:	7818      	ldrb	r0, [r3, #0]
    e116:	2800      	cmp	r0, #0
    e118:	d117      	bne.n	e14a <PDS_IsRestorable+0x3a>
    e11a:	4d0d      	ldr	r5, [pc, #52]	; (e150 <PDS_IsRestorable+0x40>)
    e11c:	2400      	movs	r4, #0
    e11e:	4e0d      	ldr	r6, [pc, #52]	; (e154 <PDS_IsRestorable+0x44>)
    e120:	e004      	b.n	e12c <PDS_IsRestorable+0x1c>
    e122:	3401      	adds	r4, #1
    e124:	b2e4      	uxtb	r4, r4
    e126:	3510      	adds	r5, #16
    e128:	2c0d      	cmp	r4, #13
    e12a:	d00d      	beq.n	e148 <PDS_IsRestorable+0x38>
    e12c:	792b      	ldrb	r3, [r5, #4]
    e12e:	2b00      	cmp	r3, #0
    e130:	d0f7      	beq.n	e122 <PDS_IsRestorable+0x12>
    e132:	682b      	ldr	r3, [r5, #0]
    e134:	2b00      	cmp	r3, #0
    e136:	d0f4      	beq.n	e122 <PDS_IsRestorable+0x12>
    e138:	68ab      	ldr	r3, [r5, #8]
    e13a:	2b00      	cmp	r3, #0
    e13c:	d0f1      	beq.n	e122 <PDS_IsRestorable+0x12>
    e13e:	0020      	movs	r0, r4
    e140:	47b0      	blx	r6
    e142:	2800      	cmp	r0, #0
    e144:	d1ed      	bne.n	e122 <PDS_IsRestorable+0x12>
    e146:	e000      	b.n	e14a <PDS_IsRestorable+0x3a>
    e148:	2001      	movs	r0, #1
    e14a:	bd70      	pop	{r4, r5, r6, pc}
    e14c:	20000fbc 	.word	0x20000fbc
    e150:	20002708 	.word	0x20002708
    e154:	0000e9cd 	.word	0x0000e9cd

0000e158 <PDS_DeleteAll>:
    e158:	b510      	push	{r4, lr}
    e15a:	4b04      	ldr	r3, [pc, #16]	; (e16c <PDS_DeleteAll+0x14>)
    e15c:	781b      	ldrb	r3, [r3, #0]
    e15e:	2b00      	cmp	r3, #0
    e160:	d001      	beq.n	e166 <PDS_DeleteAll+0xe>
    e162:	2000      	movs	r0, #0
    e164:	bd10      	pop	{r4, pc}
    e166:	4b02      	ldr	r3, [pc, #8]	; (e170 <PDS_DeleteAll+0x18>)
    e168:	4798      	blx	r3
    e16a:	e7fa      	b.n	e162 <PDS_DeleteAll+0xa>
    e16c:	20000fbc 	.word	0x20000fbc
    e170:	0000e9e9 	.word	0x0000e9e9

0000e174 <PDS_RestoreAll>:
    e174:	b5f0      	push	{r4, r5, r6, r7, lr}
    e176:	46ce      	mov	lr, r9
    e178:	4647      	mov	r7, r8
    e17a:	b580      	push	{r7, lr}
    e17c:	b0c5      	sub	sp, #276	; 0x114
    e17e:	4b32      	ldr	r3, [pc, #200]	; (e248 <PDS_RestoreAll+0xd4>)
    e180:	781b      	ldrb	r3, [r3, #0]
    e182:	2000      	movs	r0, #0
    e184:	2b00      	cmp	r3, #0
    e186:	d159      	bne.n	e23c <PDS_RestoreAll+0xc8>
    e188:	4e30      	ldr	r6, [pc, #192]	; (e24c <PDS_RestoreAll+0xd8>)
    e18a:	2700      	movs	r7, #0
    e18c:	4b30      	ldr	r3, [pc, #192]	; (e250 <PDS_RestoreAll+0xdc>)
    e18e:	4698      	mov	r8, r3
    e190:	e026      	b.n	e1e0 <PDS_RestoreAll+0x6c>
    e192:	3401      	adds	r4, #1
    e194:	b2e4      	uxtb	r4, r4
    e196:	792b      	ldrb	r3, [r5, #4]
    e198:	42a3      	cmp	r3, r4
    e19a:	d918      	bls.n	e1ce <PDS_RestoreAll+0x5a>
    e19c:	00e1      	lsls	r1, r4, #3
    e19e:	68ab      	ldr	r3, [r5, #8]
    e1a0:	469c      	mov	ip, r3
    e1a2:	4461      	add	r1, ip
    e1a4:	2208      	movs	r2, #8
    e1a6:	a802      	add	r0, sp, #8
    e1a8:	47c8      	blx	r9
    e1aa:	ab02      	add	r3, sp, #8
    e1ac:	79d9      	ldrb	r1, [r3, #7]
    e1ae:	2315      	movs	r3, #21
    e1b0:	aa02      	add	r2, sp, #8
    e1b2:	4694      	mov	ip, r2
    e1b4:	4463      	add	r3, ip
    e1b6:	469c      	mov	ip, r3
    e1b8:	4461      	add	r1, ip
    e1ba:	790b      	ldrb	r3, [r1, #4]
    e1bc:	2b00      	cmp	r3, #0
    e1be:	d1e8      	bne.n	e192 <PDS_RestoreAll+0x1e>
    e1c0:	9b02      	ldr	r3, [sp, #8]
    e1c2:	9301      	str	r3, [sp, #4]
    e1c4:	788a      	ldrb	r2, [r1, #2]
    e1c6:	3105      	adds	r1, #5
    e1c8:	0018      	movs	r0, r3
    e1ca:	47c0      	blx	r8
    e1cc:	e7e1      	b.n	e192 <PDS_RestoreAll+0x1e>
    e1ce:	68eb      	ldr	r3, [r5, #12]
    e1d0:	2b00      	cmp	r3, #0
    e1d2:	d000      	beq.n	e1d6 <PDS_RestoreAll+0x62>
    e1d4:	4798      	blx	r3
    e1d6:	3701      	adds	r7, #1
    e1d8:	b2ff      	uxtb	r7, r7
    e1da:	3610      	adds	r6, #16
    e1dc:	2f0d      	cmp	r7, #13
    e1de:	d02c      	beq.n	e23a <PDS_RestoreAll+0xc6>
    e1e0:	0035      	movs	r5, r6
    e1e2:	7934      	ldrb	r4, [r6, #4]
    e1e4:	2c00      	cmp	r4, #0
    e1e6:	d0f6      	beq.n	e1d6 <PDS_RestoreAll+0x62>
    e1e8:	6833      	ldr	r3, [r6, #0]
    e1ea:	2b00      	cmp	r3, #0
    e1ec:	d0f3      	beq.n	e1d6 <PDS_RestoreAll+0x62>
    e1ee:	68b3      	ldr	r3, [r6, #8]
    e1f0:	4699      	mov	r9, r3
    e1f2:	2b00      	cmp	r3, #0
    e1f4:	d0ef      	beq.n	e1d6 <PDS_RestoreAll+0x62>
    e1f6:	2280      	movs	r2, #128	; 0x80
    e1f8:	0052      	lsls	r2, r2, #1
    e1fa:	2100      	movs	r1, #0
    e1fc:	a804      	add	r0, sp, #16
    e1fe:	4b15      	ldr	r3, [pc, #84]	; (e254 <PDS_RestoreAll+0xe0>)
    e200:	4798      	blx	r3
    e202:	4b15      	ldr	r3, [pc, #84]	; (e258 <PDS_RestoreAll+0xe4>)
    e204:	469c      	mov	ip, r3
    e206:	4464      	add	r4, ip
    e208:	00e4      	lsls	r4, r4, #3
    e20a:	0021      	movs	r1, r4
    e20c:	4449      	add	r1, r9
    e20e:	2208      	movs	r2, #8
    e210:	a802      	add	r0, sp, #8
    e212:	4b0f      	ldr	r3, [pc, #60]	; (e250 <PDS_RestoreAll+0xdc>)
    e214:	4798      	blx	r3
    e216:	ab02      	add	r3, sp, #8
    e218:	79da      	ldrb	r2, [r3, #7]
    e21a:	799b      	ldrb	r3, [r3, #6]
    e21c:	18d2      	adds	r2, r2, r3
    e21e:	3205      	adds	r2, #5
    e220:	a904      	add	r1, sp, #16
    e222:	0038      	movs	r0, r7
    e224:	4b0d      	ldr	r3, [pc, #52]	; (e25c <PDS_RestoreAll+0xe8>)
    e226:	4798      	blx	r3
    e228:	2800      	cmp	r0, #0
    e22a:	d107      	bne.n	e23c <PDS_RestoreAll+0xc8>
    e22c:	7933      	ldrb	r3, [r6, #4]
    e22e:	2400      	movs	r4, #0
    e230:	2b00      	cmp	r3, #0
    e232:	d0cc      	beq.n	e1ce <PDS_RestoreAll+0x5a>
    e234:	4b06      	ldr	r3, [pc, #24]	; (e250 <PDS_RestoreAll+0xdc>)
    e236:	4699      	mov	r9, r3
    e238:	e7b0      	b.n	e19c <PDS_RestoreAll+0x28>
    e23a:	2000      	movs	r0, #0
    e23c:	b045      	add	sp, #276	; 0x114
    e23e:	bc0c      	pop	{r2, r3}
    e240:	4690      	mov	r8, r2
    e242:	4699      	mov	r9, r3
    e244:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e246:	46c0      	nop			; (mov r8, r8)
    e248:	20000fbc 	.word	0x20000fbc
    e24c:	20002708 	.word	0x20002708
    e250:	00019d11 	.word	0x00019d11
    e254:	00019e35 	.word	0x00019e35
    e258:	1fffffff 	.word	0x1fffffff
    e25c:	0000e9a1 	.word	0x0000e9a1

0000e260 <PDS_StoreAll>:
    e260:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e262:	4b14      	ldr	r3, [pc, #80]	; (e2b4 <PDS_StoreAll+0x54>)
    e264:	781b      	ldrb	r3, [r3, #0]
    e266:	2b00      	cmp	r3, #0
    e268:	d121      	bne.n	e2ae <PDS_StoreAll+0x4e>
    e26a:	4813      	ldr	r0, [pc, #76]	; (e2b8 <PDS_StoreAll+0x58>)
    e26c:	4d13      	ldr	r5, [pc, #76]	; (e2bc <PDS_StoreAll+0x5c>)
    e26e:	0007      	movs	r7, r0
    e270:	37d0      	adds	r7, #208	; 0xd0
    e272:	2600      	movs	r6, #0
    e274:	2401      	movs	r4, #1
    e276:	e004      	b.n	e282 <PDS_StoreAll+0x22>
    e278:	702c      	strb	r4, [r5, #0]
    e27a:	3010      	adds	r0, #16
    e27c:	3501      	adds	r5, #1
    e27e:	4287      	cmp	r7, r0
    e280:	d012      	beq.n	e2a8 <PDS_StoreAll+0x48>
    e282:	0002      	movs	r2, r0
    e284:	7903      	ldrb	r3, [r0, #4]
    e286:	2b00      	cmp	r3, #0
    e288:	d0f7      	beq.n	e27a <PDS_StoreAll+0x1a>
    e28a:	6803      	ldr	r3, [r0, #0]
    e28c:	2b00      	cmp	r3, #0
    e28e:	d0f4      	beq.n	e27a <PDS_StoreAll+0x1a>
    e290:	6883      	ldr	r3, [r0, #8]
    e292:	2b00      	cmp	r3, #0
    e294:	d0f1      	beq.n	e27a <PDS_StoreAll+0x1a>
    e296:	0033      	movs	r3, r6
    e298:	6811      	ldr	r1, [r2, #0]
    e29a:	54cc      	strb	r4, [r1, r3]
    e29c:	3301      	adds	r3, #1
    e29e:	b2db      	uxtb	r3, r3
    e2a0:	7911      	ldrb	r1, [r2, #4]
    e2a2:	4299      	cmp	r1, r3
    e2a4:	d8f8      	bhi.n	e298 <PDS_StoreAll+0x38>
    e2a6:	e7e7      	b.n	e278 <PDS_StoreAll+0x18>
    e2a8:	2001      	movs	r0, #1
    e2aa:	4b05      	ldr	r3, [pc, #20]	; (e2c0 <PDS_StoreAll+0x60>)
    e2ac:	4798      	blx	r3
    e2ae:	2000      	movs	r0, #0
    e2b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    e2b2:	46c0      	nop			; (mov r8, r8)
    e2b4:	20000fbc 	.word	0x20000fbc
    e2b8:	20002708 	.word	0x20002708
    e2bc:	200026f8 	.word	0x200026f8
    e2c0:	0000e4dd 	.word	0x0000e4dd

0000e2c4 <PDS_RegFile>:
    e2c4:	b084      	sub	sp, #16
    e2c6:	b510      	push	{r4, lr}
    e2c8:	9103      	str	r1, [sp, #12]
    e2ca:	9204      	str	r2, [sp, #16]
    e2cc:	9305      	str	r3, [sp, #20]
    e2ce:	4b0b      	ldr	r3, [pc, #44]	; (e2fc <PDS_RegFile+0x38>)
    e2d0:	781a      	ldrb	r2, [r3, #0]
    e2d2:	2300      	movs	r3, #0
    e2d4:	2a00      	cmp	r2, #0
    e2d6:	d102      	bne.n	e2de <PDS_RegFile+0x1a>
    e2d8:	3305      	adds	r3, #5
    e2da:	280c      	cmp	r0, #12
    e2dc:	d904      	bls.n	e2e8 <PDS_RegFile+0x24>
    e2de:	0018      	movs	r0, r3
    e2e0:	bc10      	pop	{r4}
    e2e2:	bc08      	pop	{r3}
    e2e4:	b004      	add	sp, #16
    e2e6:	4718      	bx	r3
    e2e8:	0100      	lsls	r0, r0, #4
    e2ea:	aa03      	add	r2, sp, #12
    e2ec:	4b04      	ldr	r3, [pc, #16]	; (e300 <PDS_RegFile+0x3c>)
    e2ee:	1818      	adds	r0, r3, r0
    e2f0:	ca1a      	ldmia	r2!, {r1, r3, r4}
    e2f2:	c01a      	stmia	r0!, {r1, r3, r4}
    e2f4:	6813      	ldr	r3, [r2, #0]
    e2f6:	6003      	str	r3, [r0, #0]
    e2f8:	2300      	movs	r3, #0
    e2fa:	e7f0      	b.n	e2de <PDS_RegFile+0x1a>
    e2fc:	20000fbc 	.word	0x20000fbc
    e300:	20002708 	.word	0x20002708

0000e304 <PDS_UnRegFile>:
    e304:	b510      	push	{r4, lr}
    e306:	4b09      	ldr	r3, [pc, #36]	; (e32c <PDS_UnRegFile+0x28>)
    e308:	781a      	ldrb	r2, [r3, #0]
    e30a:	2300      	movs	r3, #0
    e30c:	2a00      	cmp	r2, #0
    e30e:	d102      	bne.n	e316 <PDS_UnRegFile+0x12>
    e310:	3305      	adds	r3, #5
    e312:	280c      	cmp	r0, #12
    e314:	d901      	bls.n	e31a <PDS_UnRegFile+0x16>
    e316:	0018      	movs	r0, r3
    e318:	bd10      	pop	{r4, pc}
    e31a:	0100      	lsls	r0, r0, #4
    e31c:	4b04      	ldr	r3, [pc, #16]	; (e330 <PDS_UnRegFile+0x2c>)
    e31e:	18c0      	adds	r0, r0, r3
    e320:	3210      	adds	r2, #16
    e322:	2100      	movs	r1, #0
    e324:	4b03      	ldr	r3, [pc, #12]	; (e334 <PDS_UnRegFile+0x30>)
    e326:	4798      	blx	r3
    e328:	2300      	movs	r3, #0
    e32a:	e7f4      	b.n	e316 <PDS_UnRegFile+0x12>
    e32c:	20000fbc 	.word	0x20000fbc
    e330:	20002708 	.word	0x20002708
    e334:	00019e35 	.word	0x00019e35

0000e338 <pdsNvmInit>:
    e338:	b500      	push	{lr}
    e33a:	b085      	sub	sp, #20
    e33c:	4668      	mov	r0, sp
    e33e:	4b0b      	ldr	r3, [pc, #44]	; (e36c <pdsNvmInit+0x34>)
    e340:	4798      	blx	r3
    e342:	2000      	movs	r0, #0
    e344:	4b0a      	ldr	r3, [pc, #40]	; (e370 <pdsNvmInit+0x38>)
    e346:	4798      	blx	r3
    e348:	2302      	movs	r3, #2
    e34a:	2800      	cmp	r0, #0
    e34c:	d002      	beq.n	e354 <pdsNvmInit+0x1c>
    e34e:	0018      	movs	r0, r3
    e350:	b005      	add	sp, #20
    e352:	bd00      	pop	{pc}
    e354:	466b      	mov	r3, sp
    e356:	899a      	ldrh	r2, [r3, #12]
    e358:	0892      	lsrs	r2, r2, #2
    e35a:	0212      	lsls	r2, r2, #8
    e35c:	4905      	ldr	r1, [pc, #20]	; (e374 <pdsNvmInit+0x3c>)
    e35e:	0fd3      	lsrs	r3, r2, #31
    e360:	17c8      	asrs	r0, r1, #31
    e362:	4291      	cmp	r1, r2
    e364:	4143      	adcs	r3, r0
    e366:	009b      	lsls	r3, r3, #2
    e368:	e7f1      	b.n	e34e <pdsNvmInit+0x16>
    e36a:	46c0      	nop			; (mov r8, r8)
    e36c:	00004dbd 	.word	0x00004dbd
    e370:	0000f94d 	.word	0x0000f94d
    e374:	00001fff 	.word	0x00001fff

0000e378 <pdsNvmRead>:
    e378:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e37a:	000c      	movs	r4, r1
    e37c:	2380      	movs	r3, #128	; 0x80
    e37e:	01db      	lsls	r3, r3, #7
    e380:	469c      	mov	ip, r3
    e382:	4460      	add	r0, ip
    e384:	0205      	lsls	r5, r0, #8
    e386:	2380      	movs	r3, #128	; 0x80
    e388:	005b      	lsls	r3, r3, #1
    e38a:	429a      	cmp	r2, r3
    e38c:	d00e      	beq.n	e3ac <pdsNvmRead+0x34>
    e38e:	3204      	adds	r2, #4
    e390:	b296      	uxth	r6, r2
    e392:	4f1e      	ldr	r7, [pc, #120]	; (e40c <pdsNvmRead+0x94>)
    e394:	0033      	movs	r3, r6
    e396:	0022      	movs	r2, r4
    e398:	0029      	movs	r1, r5
    e39a:	2000      	movs	r0, #0
    e39c:	47b8      	blx	r7
    e39e:	b2c3      	uxtb	r3, r0
    e3a0:	2b05      	cmp	r3, #5
    e3a2:	d0f7      	beq.n	e394 <pdsNvmRead+0x1c>
    e3a4:	2002      	movs	r0, #2
    e3a6:	2b00      	cmp	r3, #0
    e3a8:	d00b      	beq.n	e3c2 <pdsNvmRead+0x4a>
    e3aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    e3ac:	001e      	movs	r6, r3
    e3ae:	4f17      	ldr	r7, [pc, #92]	; (e40c <pdsNvmRead+0x94>)
    e3b0:	0033      	movs	r3, r6
    e3b2:	0022      	movs	r2, r4
    e3b4:	0029      	movs	r1, r5
    e3b6:	2000      	movs	r0, #0
    e3b8:	47b8      	blx	r7
    e3ba:	b2c3      	uxtb	r3, r0
    e3bc:	2b05      	cmp	r3, #5
    e3be:	d0f7      	beq.n	e3b0 <pdsNvmRead+0x38>
    e3c0:	e7f0      	b.n	e3a4 <pdsNvmRead+0x2c>
    e3c2:	7823      	ldrb	r3, [r4, #0]
    e3c4:	7860      	ldrb	r0, [r4, #1]
    e3c6:	0200      	lsls	r0, r0, #8
    e3c8:	4318      	orrs	r0, r3
    e3ca:	78a6      	ldrb	r6, [r4, #2]
    e3cc:	3404      	adds	r4, #4
    e3ce:	2e00      	cmp	r6, #0
    e3d0:	d017      	beq.n	e402 <pdsNvmRead+0x8a>
    e3d2:	0025      	movs	r5, r4
    e3d4:	3e01      	subs	r6, #1
    e3d6:	b2b6      	uxth	r6, r6
    e3d8:	3601      	adds	r6, #1
    e3da:	19a4      	adds	r4, r4, r6
    e3dc:	2600      	movs	r6, #0
    e3de:	782b      	ldrb	r3, [r5, #0]
    e3e0:	4073      	eors	r3, r6
    e3e2:	b2d9      	uxtb	r1, r3
    e3e4:	010b      	lsls	r3, r1, #4
    e3e6:	404b      	eors	r3, r1
    e3e8:	b2db      	uxtb	r3, r3
    e3ea:	b29a      	uxth	r2, r3
    e3ec:	091b      	lsrs	r3, r3, #4
    e3ee:	00d1      	lsls	r1, r2, #3
    e3f0:	404b      	eors	r3, r1
    e3f2:	0212      	lsls	r2, r2, #8
    e3f4:	0a36      	lsrs	r6, r6, #8
    e3f6:	4332      	orrs	r2, r6
    e3f8:	4053      	eors	r3, r2
    e3fa:	b29e      	uxth	r6, r3
    e3fc:	3501      	adds	r5, #1
    e3fe:	42a5      	cmp	r5, r4
    e400:	d1ed      	bne.n	e3de <pdsNvmRead+0x66>
    e402:	1b80      	subs	r0, r0, r6
    e404:	1e46      	subs	r6, r0, #1
    e406:	41b0      	sbcs	r0, r6
    e408:	b2c0      	uxtb	r0, r0
    e40a:	e7ce      	b.n	e3aa <pdsNvmRead+0x32>
    e40c:	0000f7dd 	.word	0x0000f7dd

0000e410 <pdsNvmWrite>:
    e410:	b5f0      	push	{r4, r5, r6, r7, lr}
    e412:	46c6      	mov	lr, r8
    e414:	b500      	push	{lr}
    e416:	4680      	mov	r8, r0
    e418:	000c      	movs	r4, r1
    e41a:	2301      	movs	r3, #1
    e41c:	70cb      	strb	r3, [r1, #3]
    e41e:	708a      	strb	r2, [r1, #2]
    e420:	27ff      	movs	r7, #255	; 0xff
    e422:	4017      	ands	r7, r2
    e424:	1d0e      	adds	r6, r1, #4
    e426:	2f00      	cmp	r7, #0
    e428:	d017      	beq.n	e45a <pdsNvmWrite+0x4a>
    e42a:	0030      	movs	r0, r6
    e42c:	3f01      	subs	r7, #1
    e42e:	b2bf      	uxth	r7, r7
    e430:	3701      	adds	r7, #1
    e432:	19f6      	adds	r6, r6, r7
    e434:	2700      	movs	r7, #0
    e436:	7803      	ldrb	r3, [r0, #0]
    e438:	407b      	eors	r3, r7
    e43a:	b2d9      	uxtb	r1, r3
    e43c:	010b      	lsls	r3, r1, #4
    e43e:	404b      	eors	r3, r1
    e440:	b2db      	uxtb	r3, r3
    e442:	b299      	uxth	r1, r3
    e444:	091b      	lsrs	r3, r3, #4
    e446:	00cd      	lsls	r5, r1, #3
    e448:	406b      	eors	r3, r5
    e44a:	0209      	lsls	r1, r1, #8
    e44c:	0a3f      	lsrs	r7, r7, #8
    e44e:	4339      	orrs	r1, r7
    e450:	404b      	eors	r3, r1
    e452:	b29f      	uxth	r7, r3
    e454:	3001      	adds	r0, #1
    e456:	42b0      	cmp	r0, r6
    e458:	d1ed      	bne.n	e436 <pdsNvmWrite+0x26>
    e45a:	7027      	strb	r7, [r4, #0]
    e45c:	0a3f      	lsrs	r7, r7, #8
    e45e:	7067      	strb	r7, [r4, #1]
    e460:	3204      	adds	r2, #4
    e462:	b296      	uxth	r6, r2
    e464:	2180      	movs	r1, #128	; 0x80
    e466:	01c9      	lsls	r1, r1, #7
    e468:	4441      	add	r1, r8
    e46a:	0209      	lsls	r1, r1, #8
    e46c:	0033      	movs	r3, r6
    e46e:	0022      	movs	r2, r4
    e470:	2000      	movs	r0, #0
    e472:	4f08      	ldr	r7, [pc, #32]	; (e494 <pdsNvmWrite+0x84>)
    e474:	47b8      	blx	r7
    e476:	2302      	movs	r3, #2
    e478:	2800      	cmp	r0, #0
    e47a:	d003      	beq.n	e484 <pdsNvmWrite+0x74>
    e47c:	0018      	movs	r0, r3
    e47e:	bc04      	pop	{r2}
    e480:	4690      	mov	r8, r2
    e482:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e484:	0032      	movs	r2, r6
    e486:	0021      	movs	r1, r4
    e488:	4640      	mov	r0, r8
    e48a:	4b03      	ldr	r3, [pc, #12]	; (e498 <pdsNvmWrite+0x88>)
    e48c:	4798      	blx	r3
    e48e:	0003      	movs	r3, r0
    e490:	e7f4      	b.n	e47c <pdsNvmWrite+0x6c>
    e492:	46c0      	nop			; (mov r8, r8)
    e494:	0000f839 	.word	0x0000f839
    e498:	0000e379 	.word	0x0000e379

0000e49c <pdsNvmErase>:
    e49c:	b570      	push	{r4, r5, r6, lr}
    e49e:	2380      	movs	r3, #128	; 0x80
    e4a0:	01db      	lsls	r3, r3, #7
    e4a2:	18c4      	adds	r4, r0, r3
    e4a4:	0224      	lsls	r4, r4, #8
    e4a6:	4d05      	ldr	r5, [pc, #20]	; (e4bc <pdsNvmErase+0x20>)
    e4a8:	0020      	movs	r0, r4
    e4aa:	47a8      	blx	r5
    e4ac:	b240      	sxtb	r0, r0
    e4ae:	0003      	movs	r3, r0
    e4b0:	330a      	adds	r3, #10
    e4b2:	d0f9      	beq.n	e4a8 <pdsNvmErase+0xc>
    e4b4:	1e43      	subs	r3, r0, #1
    e4b6:	4198      	sbcs	r0, r3
    e4b8:	0040      	lsls	r0, r0, #1
    e4ba:	bd70      	pop	{r4, r5, r6, pc}
    e4bc:	00004d15 	.word	0x00004d15

0000e4c0 <pdsNvmEraseAll>:
    e4c0:	b570      	push	{r4, r5, r6, lr}
    e4c2:	2400      	movs	r4, #0
    e4c4:	4d04      	ldr	r5, [pc, #16]	; (e4d8 <pdsNvmEraseAll+0x18>)
    e4c6:	b2a0      	uxth	r0, r4
    e4c8:	47a8      	blx	r5
    e4ca:	2800      	cmp	r0, #0
    e4cc:	d102      	bne.n	e4d4 <pdsNvmEraseAll+0x14>
    e4ce:	3401      	adds	r4, #1
    e4d0:	2c20      	cmp	r4, #32
    e4d2:	d1f8      	bne.n	e4c6 <pdsNvmEraseAll+0x6>
    e4d4:	bd70      	pop	{r4, r5, r6, pc}
    e4d6:	46c0      	nop			; (mov r8, r8)
    e4d8:	0000e49d 	.word	0x0000e49d

0000e4dc <pdsPostTask>:
    e4dc:	b510      	push	{r4, lr}
    e4de:	0004      	movs	r4, r0
    e4e0:	4b05      	ldr	r3, [pc, #20]	; (e4f8 <pdsPostTask+0x1c>)
    e4e2:	4798      	blx	r3
    e4e4:	4b05      	ldr	r3, [pc, #20]	; (e4fc <pdsPostTask+0x20>)
    e4e6:	7818      	ldrb	r0, [r3, #0]
    e4e8:	4320      	orrs	r0, r4
    e4ea:	7018      	strb	r0, [r3, #0]
    e4ec:	4b04      	ldr	r3, [pc, #16]	; (e500 <pdsPostTask+0x24>)
    e4ee:	4798      	blx	r3
    e4f0:	2008      	movs	r0, #8
    e4f2:	4b04      	ldr	r3, [pc, #16]	; (e504 <pdsPostTask+0x28>)
    e4f4:	4798      	blx	r3
    e4f6:	bd10      	pop	{r4, pc}
    e4f8:	000082b9 	.word	0x000082b9
    e4fc:	20000fbd 	.word	0x20000fbd
    e500:	000082c5 	.word	0x000082c5
    e504:	0000f3a5 	.word	0x0000f3a5

0000e508 <pdsStoreDeleteHandler>:
    e508:	b5f0      	push	{r4, r5, r6, r7, lr}
    e50a:	46de      	mov	lr, fp
    e50c:	4657      	mov	r7, sl
    e50e:	464e      	mov	r6, r9
    e510:	4645      	mov	r5, r8
    e512:	b5e0      	push	{r5, r6, r7, lr}
    e514:	b0c5      	sub	sp, #276	; 0x114
    e516:	2280      	movs	r2, #128	; 0x80
    e518:	0052      	lsls	r2, r2, #1
    e51a:	2100      	movs	r1, #0
    e51c:	a804      	add	r0, sp, #16
    e51e:	4b54      	ldr	r3, [pc, #336]	; (e670 <pdsStoreDeleteHandler+0x168>)
    e520:	4798      	blx	r3
    e522:	4b54      	ldr	r3, [pc, #336]	; (e674 <pdsStoreDeleteHandler+0x16c>)
    e524:	781b      	ldrb	r3, [r3, #0]
    e526:	2b00      	cmp	r3, #0
    e528:	d112      	bne.n	e550 <pdsStoreDeleteHandler+0x48>
    e52a:	2401      	movs	r4, #1
    e52c:	4a51      	ldr	r2, [pc, #324]	; (e674 <pdsStoreDeleteHandler+0x16c>)
    e52e:	9400      	str	r4, [sp, #0]
    e530:	5d13      	ldrb	r3, [r2, r4]
    e532:	2b00      	cmp	r3, #0
    e534:	d10f      	bne.n	e556 <pdsStoreDeleteHandler+0x4e>
    e536:	3401      	adds	r4, #1
    e538:	b2e4      	uxtb	r4, r4
    e53a:	2c0c      	cmp	r4, #12
    e53c:	d9f7      	bls.n	e52e <pdsStoreDeleteHandler+0x26>
    e53e:	2500      	movs	r5, #0
    e540:	0028      	movs	r0, r5
    e542:	b045      	add	sp, #276	; 0x114
    e544:	bc3c      	pop	{r2, r3, r4, r5}
    e546:	4690      	mov	r8, r2
    e548:	4699      	mov	r9, r3
    e54a:	46a2      	mov	sl, r4
    e54c:	46ab      	mov	fp, r5
    e54e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e550:	2300      	movs	r3, #0
    e552:	9300      	str	r3, [sp, #0]
    e554:	2400      	movs	r4, #0
    e556:	9b00      	ldr	r3, [sp, #0]
    e558:	011a      	lsls	r2, r3, #4
    e55a:	4b47      	ldr	r3, [pc, #284]	; (e678 <pdsStoreDeleteHandler+0x170>)
    e55c:	189b      	adds	r3, r3, r2
    e55e:	7919      	ldrb	r1, [r3, #4]
    e560:	4a46      	ldr	r2, [pc, #280]	; (e67c <pdsStoreDeleteHandler+0x174>)
    e562:	4694      	mov	ip, r2
    e564:	4461      	add	r1, ip
    e566:	00c9      	lsls	r1, r1, #3
    e568:	689b      	ldr	r3, [r3, #8]
    e56a:	1859      	adds	r1, r3, r1
    e56c:	2208      	movs	r2, #8
    e56e:	a802      	add	r0, sp, #8
    e570:	4b43      	ldr	r3, [pc, #268]	; (e680 <pdsStoreDeleteHandler+0x178>)
    e572:	4798      	blx	r3
    e574:	ab02      	add	r3, sp, #8
    e576:	79da      	ldrb	r2, [r3, #7]
    e578:	799b      	ldrb	r3, [r3, #6]
    e57a:	18d2      	adds	r2, r2, r3
    e57c:	3205      	adds	r2, #5
    e57e:	a904      	add	r1, sp, #16
    e580:	0020      	movs	r0, r4
    e582:	4b40      	ldr	r3, [pc, #256]	; (e684 <pdsStoreDeleteHandler+0x17c>)
    e584:	4798      	blx	r3
    e586:	1e05      	subs	r5, r0, #0
    e588:	d111      	bne.n	e5ae <pdsStoreDeleteHandler+0xa6>
    e58a:	9b00      	ldr	r3, [sp, #0]
    e58c:	011a      	lsls	r2, r3, #4
    e58e:	4b3a      	ldr	r3, [pc, #232]	; (e678 <pdsStoreDeleteHandler+0x170>)
    e590:	189b      	adds	r3, r3, r2
    e592:	791b      	ldrb	r3, [r3, #4]
    e594:	2500      	movs	r5, #0
    e596:	2b00      	cmp	r3, #0
    e598:	d04a      	beq.n	e630 <pdsStoreDeleteHandler+0x128>
    e59a:	4b37      	ldr	r3, [pc, #220]	; (e678 <pdsStoreDeleteHandler+0x170>)
    e59c:	4699      	mov	r9, r3
    e59e:	9b00      	ldr	r3, [sp, #0]
    e5a0:	011e      	lsls	r6, r3, #4
    e5a2:	46b3      	mov	fp, r6
    e5a4:	44cb      	add	fp, r9
    e5a6:	4b36      	ldr	r3, [pc, #216]	; (e680 <pdsStoreDeleteHandler+0x178>)
    e5a8:	469a      	mov	sl, r3
    e5aa:	465f      	mov	r7, fp
    e5ac:	e01b      	b.n	e5e6 <pdsStoreDeleteHandler+0xde>
    e5ae:	2803      	cmp	r0, #3
    e5b0:	d144      	bne.n	e63c <pdsStoreDeleteHandler+0x134>
    e5b2:	e7ea      	b.n	e58a <pdsStoreDeleteHandler+0x82>
    e5b4:	2100      	movs	r1, #0
    e5b6:	7019      	strb	r1, [r3, #0]
    e5b8:	ab02      	add	r3, sp, #8
    e5ba:	799a      	ldrb	r2, [r3, #6]
    e5bc:	795b      	ldrb	r3, [r3, #5]
    e5be:	4698      	mov	r8, r3
    e5c0:	23a5      	movs	r3, #165	; 0xa5
    e5c2:	7003      	strb	r3, [r0, #0]
    e5c4:	2301      	movs	r3, #1
    e5c6:	7043      	strb	r3, [r0, #1]
    e5c8:	7082      	strb	r2, [r0, #2]
    e5ca:	4643      	mov	r3, r8
    e5cc:	70c3      	strb	r3, [r0, #3]
    e5ce:	7101      	strb	r1, [r0, #4]
    e5d0:	3005      	adds	r0, #5
    e5d2:	9b02      	ldr	r3, [sp, #8]
    e5d4:	9301      	str	r3, [sp, #4]
    e5d6:	0019      	movs	r1, r3
    e5d8:	4b29      	ldr	r3, [pc, #164]	; (e680 <pdsStoreDeleteHandler+0x178>)
    e5da:	4798      	blx	r3
    e5dc:	3501      	adds	r5, #1
    e5de:	b2ed      	uxtb	r5, r5
    e5e0:	793b      	ldrb	r3, [r7, #4]
    e5e2:	42ab      	cmp	r3, r5
    e5e4:	d924      	bls.n	e630 <pdsStoreDeleteHandler+0x128>
    e5e6:	00e9      	lsls	r1, r5, #3
    e5e8:	465b      	mov	r3, fp
    e5ea:	689b      	ldr	r3, [r3, #8]
    e5ec:	469c      	mov	ip, r3
    e5ee:	4461      	add	r1, ip
    e5f0:	2208      	movs	r2, #8
    e5f2:	a802      	add	r0, sp, #8
    e5f4:	47d0      	blx	sl
    e5f6:	ab02      	add	r3, sp, #8
    e5f8:	79d8      	ldrb	r0, [r3, #7]
    e5fa:	2315      	movs	r3, #21
    e5fc:	aa02      	add	r2, sp, #8
    e5fe:	4694      	mov	ip, r2
    e600:	4463      	add	r3, ip
    e602:	469c      	mov	ip, r3
    e604:	4460      	add	r0, ip
    e606:	464b      	mov	r3, r9
    e608:	58f3      	ldr	r3, [r6, r3]
    e60a:	195b      	adds	r3, r3, r5
    e60c:	781a      	ldrb	r2, [r3, #0]
    e60e:	2a01      	cmp	r2, #1
    e610:	d0d0      	beq.n	e5b4 <pdsStoreDeleteHandler+0xac>
    e612:	2a02      	cmp	r2, #2
    e614:	d1e2      	bne.n	e5dc <pdsStoreDeleteHandler+0xd4>
    e616:	2200      	movs	r2, #0
    e618:	701a      	strb	r2, [r3, #0]
    e61a:	ab02      	add	r3, sp, #8
    e61c:	7999      	ldrb	r1, [r3, #6]
    e61e:	795a      	ldrb	r2, [r3, #5]
    e620:	23a5      	movs	r3, #165	; 0xa5
    e622:	7003      	strb	r3, [r0, #0]
    e624:	3ba4      	subs	r3, #164	; 0xa4
    e626:	7043      	strb	r3, [r0, #1]
    e628:	7081      	strb	r1, [r0, #2]
    e62a:	70c2      	strb	r2, [r0, #3]
    e62c:	7103      	strb	r3, [r0, #4]
    e62e:	e7d5      	b.n	e5dc <pdsStoreDeleteHandler+0xd4>
    e630:	22f3      	movs	r2, #243	; 0xf3
    e632:	a904      	add	r1, sp, #16
    e634:	0020      	movs	r0, r4
    e636:	4b14      	ldr	r3, [pc, #80]	; (e688 <pdsStoreDeleteHandler+0x180>)
    e638:	4798      	blx	r3
    e63a:	0005      	movs	r5, r0
    e63c:	2200      	movs	r2, #0
    e63e:	4b0d      	ldr	r3, [pc, #52]	; (e674 <pdsStoreDeleteHandler+0x16c>)
    e640:	9900      	ldr	r1, [sp, #0]
    e642:	545a      	strb	r2, [r3, r1]
    e644:	3401      	adds	r4, #1
    e646:	b2e3      	uxtb	r3, r4
    e648:	2b0c      	cmp	r3, #12
    e64a:	d900      	bls.n	e64e <pdsStoreDeleteHandler+0x146>
    e64c:	e778      	b.n	e540 <pdsStoreDeleteHandler+0x38>
    e64e:	4a09      	ldr	r2, [pc, #36]	; (e674 <pdsStoreDeleteHandler+0x16c>)
    e650:	5cd2      	ldrb	r2, [r2, r3]
    e652:	2a00      	cmp	r2, #0
    e654:	d108      	bne.n	e668 <pdsStoreDeleteHandler+0x160>
    e656:	4907      	ldr	r1, [pc, #28]	; (e674 <pdsStoreDeleteHandler+0x16c>)
    e658:	3301      	adds	r3, #1
    e65a:	b2db      	uxtb	r3, r3
    e65c:	2b0c      	cmp	r3, #12
    e65e:	d900      	bls.n	e662 <pdsStoreDeleteHandler+0x15a>
    e660:	e76e      	b.n	e540 <pdsStoreDeleteHandler+0x38>
    e662:	5cca      	ldrb	r2, [r1, r3]
    e664:	2a00      	cmp	r2, #0
    e666:	d0f7      	beq.n	e658 <pdsStoreDeleteHandler+0x150>
    e668:	2001      	movs	r0, #1
    e66a:	4b08      	ldr	r3, [pc, #32]	; (e68c <pdsStoreDeleteHandler+0x184>)
    e66c:	4798      	blx	r3
    e66e:	e767      	b.n	e540 <pdsStoreDeleteHandler+0x38>
    e670:	00019e35 	.word	0x00019e35
    e674:	200026f8 	.word	0x200026f8
    e678:	20002708 	.word	0x20002708
    e67c:	1fffffff 	.word	0x1fffffff
    e680:	00019d11 	.word	0x00019d11
    e684:	0000e9a1 	.word	0x0000e9a1
    e688:	0000e8b1 	.word	0x0000e8b1
    e68c:	0000e4dd 	.word	0x0000e4dd

0000e690 <PDS_TaskHandler>:
    e690:	b510      	push	{r4, lr}
    e692:	4b0e      	ldr	r3, [pc, #56]	; (e6cc <PDS_TaskHandler+0x3c>)
    e694:	781b      	ldrb	r3, [r3, #0]
    e696:	2b00      	cmp	r3, #0
    e698:	d003      	beq.n	e6a2 <PDS_TaskHandler+0x12>
    e69a:	4b0c      	ldr	r3, [pc, #48]	; (e6cc <PDS_TaskHandler+0x3c>)
    e69c:	781b      	ldrb	r3, [r3, #0]
    e69e:	07db      	lsls	r3, r3, #31
    e6a0:	d401      	bmi.n	e6a6 <PDS_TaskHandler+0x16>
    e6a2:	2000      	movs	r0, #0
    e6a4:	bd10      	pop	{r4, pc}
    e6a6:	4b0a      	ldr	r3, [pc, #40]	; (e6d0 <PDS_TaskHandler+0x40>)
    e6a8:	4798      	blx	r3
    e6aa:	4c08      	ldr	r4, [pc, #32]	; (e6cc <PDS_TaskHandler+0x3c>)
    e6ac:	7823      	ldrb	r3, [r4, #0]
    e6ae:	2201      	movs	r2, #1
    e6b0:	4393      	bics	r3, r2
    e6b2:	7023      	strb	r3, [r4, #0]
    e6b4:	4b07      	ldr	r3, [pc, #28]	; (e6d4 <PDS_TaskHandler+0x44>)
    e6b6:	4798      	blx	r3
    e6b8:	4b07      	ldr	r3, [pc, #28]	; (e6d8 <PDS_TaskHandler+0x48>)
    e6ba:	4798      	blx	r3
    e6bc:	7823      	ldrb	r3, [r4, #0]
    e6be:	2b00      	cmp	r3, #0
    e6c0:	d0ef      	beq.n	e6a2 <PDS_TaskHandler+0x12>
    e6c2:	2008      	movs	r0, #8
    e6c4:	4b05      	ldr	r3, [pc, #20]	; (e6dc <PDS_TaskHandler+0x4c>)
    e6c6:	4798      	blx	r3
    e6c8:	e7eb      	b.n	e6a2 <PDS_TaskHandler+0x12>
    e6ca:	46c0      	nop			; (mov r8, r8)
    e6cc:	20000fbd 	.word	0x20000fbd
    e6d0:	000082b9 	.word	0x000082b9
    e6d4:	000082c5 	.word	0x000082c5
    e6d8:	0000e509 	.word	0x0000e509
    e6dc:	0000f3a5 	.word	0x0000f3a5

0000e6e0 <pdsUpdateRowMap>:
    e6e0:	b5f0      	push	{r4, r5, r6, r7, lr}
    e6e2:	4e12      	ldr	r6, [pc, #72]	; (e72c <pdsUpdateRowMap+0x4c>)
    e6e4:	0037      	movs	r7, r6
    e6e6:	371a      	adds	r7, #26
    e6e8:	4d11      	ldr	r5, [pc, #68]	; (e730 <pdsUpdateRowMap+0x50>)
    e6ea:	4b12      	ldr	r3, [pc, #72]	; (e734 <pdsUpdateRowMap+0x54>)
    e6ec:	469c      	mov	ip, r3
    e6ee:	2101      	movs	r1, #1
    e6f0:	4249      	negs	r1, r1
    e6f2:	0018      	movs	r0, r3
    e6f4:	e002      	b.n	e6fc <pdsUpdateRowMap+0x1c>
    e6f6:	3602      	adds	r6, #2
    e6f8:	42be      	cmp	r6, r7
    e6fa:	d015      	beq.n	e728 <pdsUpdateRowMap+0x48>
    e6fc:	8833      	ldrh	r3, [r6, #0]
    e6fe:	42ab      	cmp	r3, r5
    e700:	d0f9      	beq.n	e6f6 <pdsUpdateRowMap+0x16>
    e702:	00db      	lsls	r3, r3, #3
    e704:	4463      	add	r3, ip
    e706:	001a      	movs	r2, r3
    e708:	88db      	ldrh	r3, [r3, #6]
    e70a:	80d1      	strh	r1, [r2, #6]
    e70c:	42ab      	cmp	r3, r5
    e70e:	d0f2      	beq.n	e6f6 <pdsUpdateRowMap+0x16>
    e710:	001a      	movs	r2, r3
    e712:	00db      	lsls	r3, r3, #3
    e714:	18c3      	adds	r3, r0, r3
    e716:	88db      	ldrh	r3, [r3, #6]
    e718:	00d2      	lsls	r2, r2, #3
    e71a:	1884      	adds	r4, r0, r2
    e71c:	80e1      	strh	r1, [r4, #6]
    e71e:	5011      	str	r1, [r2, r0]
    e720:	80a1      	strh	r1, [r4, #4]
    e722:	42ab      	cmp	r3, r5
    e724:	d1f4      	bne.n	e710 <pdsUpdateRowMap+0x30>
    e726:	e7e6      	b.n	e6f6 <pdsUpdateRowMap+0x16>
    e728:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e72a:	46c0      	nop			; (mov r8, r8)
    e72c:	20000fc0 	.word	0x20000fc0
    e730:	0000ffff 	.word	0x0000ffff
    e734:	20000fdc 	.word	0x20000fdc

0000e738 <pdsUpdateFileMap>:
    e738:	b5f0      	push	{r4, r5, r6, r7, lr}
    e73a:	46c6      	mov	lr, r8
    e73c:	b500      	push	{lr}
    e73e:	b082      	sub	sp, #8
    e740:	4684      	mov	ip, r0
    e742:	8881      	ldrh	r1, [r0, #4]
    e744:	004a      	lsls	r2, r1, #1
    e746:	4b2c      	ldr	r3, [pc, #176]	; (e7f8 <pdsUpdateFileMap+0xc0>)
    e748:	5ad3      	ldrh	r3, [r2, r3]
    e74a:	4a2c      	ldr	r2, [pc, #176]	; (e7fc <pdsUpdateFileMap+0xc4>)
    e74c:	4293      	cmp	r3, r2
    e74e:	d02c      	beq.n	e7aa <pdsUpdateFileMap+0x72>
    e750:	4a2b      	ldr	r2, [pc, #172]	; (e800 <pdsUpdateFileMap+0xc8>)
    e752:	00d8      	lsls	r0, r3, #3
    e754:	5880      	ldr	r0, [r0, r2]
    e756:	4664      	mov	r4, ip
    e758:	88e4      	ldrh	r4, [r4, #6]
    e75a:	46a0      	mov	r8, r4
    e75c:	00e4      	lsls	r4, r4, #3
    e75e:	58a6      	ldr	r6, [r4, r2]
    e760:	42b0      	cmp	r0, r6
    e762:	d327      	bcc.n	e7b4 <pdsUpdateFileMap+0x7c>
    e764:	d02f      	beq.n	e7c6 <pdsUpdateFileMap+0x8e>
    e766:	4a26      	ldr	r2, [pc, #152]	; (e800 <pdsUpdateFileMap+0xc8>)
    e768:	00dd      	lsls	r5, r3, #3
    e76a:	3506      	adds	r5, #6
    e76c:	1950      	adds	r0, r2, r5
    e76e:	9001      	str	r0, [sp, #4]
    e770:	00db      	lsls	r3, r3, #3
    e772:	18d3      	adds	r3, r2, r3
    e774:	88da      	ldrh	r2, [r3, #6]
    e776:	4b21      	ldr	r3, [pc, #132]	; (e7fc <pdsUpdateFileMap+0xc4>)
    e778:	429a      	cmp	r2, r3
    e77a:	d028      	beq.n	e7ce <pdsUpdateFileMap+0x96>
    e77c:	0013      	movs	r3, r2
    e77e:	00d0      	lsls	r0, r2, #3
    e780:	4c1f      	ldr	r4, [pc, #124]	; (e800 <pdsUpdateFileMap+0xc8>)
    e782:	5900      	ldr	r0, [r0, r4]
    e784:	4286      	cmp	r6, r0
    e786:	d226      	bcs.n	e7d6 <pdsUpdateFileMap+0x9e>
    e788:	4c1d      	ldr	r4, [pc, #116]	; (e800 <pdsUpdateFileMap+0xc8>)
    e78a:	4f1c      	ldr	r7, [pc, #112]	; (e7fc <pdsUpdateFileMap+0xc4>)
    e78c:	0020      	movs	r0, r4
    e78e:	00db      	lsls	r3, r3, #3
    e790:	1d99      	adds	r1, r3, #6
    e792:	1861      	adds	r1, r4, r1
    e794:	18e3      	adds	r3, r4, r3
    e796:	88da      	ldrh	r2, [r3, #6]
    e798:	42ba      	cmp	r2, r7
    e79a:	d019      	beq.n	e7d0 <pdsUpdateFileMap+0x98>
    e79c:	0013      	movs	r3, r2
    e79e:	00d5      	lsls	r5, r2, #3
    e7a0:	582d      	ldr	r5, [r5, r0]
    e7a2:	42ae      	cmp	r6, r5
    e7a4:	d21b      	bcs.n	e7de <pdsUpdateFileMap+0xa6>
    e7a6:	9101      	str	r1, [sp, #4]
    e7a8:	e7f1      	b.n	e78e <pdsUpdateFileMap+0x56>
    e7aa:	88c2      	ldrh	r2, [r0, #6]
    e7ac:	0049      	lsls	r1, r1, #1
    e7ae:	4b12      	ldr	r3, [pc, #72]	; (e7f8 <pdsUpdateFileMap+0xc0>)
    e7b0:	52ca      	strh	r2, [r1, r3]
    e7b2:	e008      	b.n	e7c6 <pdsUpdateFileMap+0x8e>
    e7b4:	4a12      	ldr	r2, [pc, #72]	; (e800 <pdsUpdateFileMap+0xc8>)
    e7b6:	1912      	adds	r2, r2, r4
    e7b8:	80d3      	strh	r3, [r2, #6]
    e7ba:	4663      	mov	r3, ip
    e7bc:	88d9      	ldrh	r1, [r3, #6]
    e7be:	889b      	ldrh	r3, [r3, #4]
    e7c0:	005b      	lsls	r3, r3, #1
    e7c2:	4a0d      	ldr	r2, [pc, #52]	; (e7f8 <pdsUpdateFileMap+0xc0>)
    e7c4:	5299      	strh	r1, [r3, r2]
    e7c6:	b002      	add	sp, #8
    e7c8:	bc04      	pop	{r2}
    e7ca:	4690      	mov	r8, r2
    e7cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e7ce:	9901      	ldr	r1, [sp, #4]
    e7d0:	4643      	mov	r3, r8
    e7d2:	800b      	strh	r3, [r1, #0]
    e7d4:	e7f7      	b.n	e7c6 <pdsUpdateFileMap+0x8e>
    e7d6:	0049      	lsls	r1, r1, #1
    e7d8:	4d07      	ldr	r5, [pc, #28]	; (e7f8 <pdsUpdateFileMap+0xc0>)
    e7da:	186b      	adds	r3, r5, r1
    e7dc:	9301      	str	r3, [sp, #4]
    e7de:	4908      	ldr	r1, [pc, #32]	; (e800 <pdsUpdateFileMap+0xc8>)
    e7e0:	9b01      	ldr	r3, [sp, #4]
    e7e2:	881b      	ldrh	r3, [r3, #0]
    e7e4:	00db      	lsls	r3, r3, #3
    e7e6:	18cb      	adds	r3, r1, r3
    e7e8:	4640      	mov	r0, r8
    e7ea:	80d8      	strh	r0, [r3, #6]
    e7ec:	4663      	mov	r3, ip
    e7ee:	88db      	ldrh	r3, [r3, #6]
    e7f0:	00db      	lsls	r3, r3, #3
    e7f2:	18c9      	adds	r1, r1, r3
    e7f4:	80ca      	strh	r2, [r1, #6]
    e7f6:	e7e6      	b.n	e7c6 <pdsUpdateFileMap+0x8e>
    e7f8:	20000fc0 	.word	0x20000fc0
    e7fc:	0000ffff 	.word	0x0000ffff
    e800:	20000fdc 	.word	0x20000fdc

0000e804 <pdsWlInit>:
    e804:	b5f0      	push	{r4, r5, r6, r7, lr}
    e806:	46c6      	mov	lr, r8
    e808:	b500      	push	{lr}
    e80a:	b0c4      	sub	sp, #272	; 0x110
    e80c:	4b21      	ldr	r3, [pc, #132]	; (e894 <pdsWlInit+0x90>)
    e80e:	4798      	blx	r3
    e810:	9001      	str	r0, [sp, #4]
    e812:	2800      	cmp	r0, #0
    e814:	d004      	beq.n	e820 <pdsWlInit+0x1c>
    e816:	9801      	ldr	r0, [sp, #4]
    e818:	b044      	add	sp, #272	; 0x110
    e81a:	bc04      	pop	{r2}
    e81c:	4690      	mov	r8, r2
    e81e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e820:	2680      	movs	r6, #128	; 0x80
    e822:	0076      	lsls	r6, r6, #1
    e824:	4d1c      	ldr	r5, [pc, #112]	; (e898 <pdsWlInit+0x94>)
    e826:	0032      	movs	r2, r6
    e828:	21ff      	movs	r1, #255	; 0xff
    e82a:	0028      	movs	r0, r5
    e82c:	4c1b      	ldr	r4, [pc, #108]	; (e89c <pdsWlInit+0x98>)
    e82e:	47a0      	blx	r4
    e830:	221a      	movs	r2, #26
    e832:	21ff      	movs	r1, #255	; 0xff
    e834:	481a      	ldr	r0, [pc, #104]	; (e8a0 <pdsWlInit+0x9c>)
    e836:	47a0      	blx	r4
    e838:	0032      	movs	r2, r6
    e83a:	2100      	movs	r1, #0
    e83c:	a804      	add	r0, sp, #16
    e83e:	47a0      	blx	r4
    e840:	2400      	movs	r4, #0
    e842:	4e18      	ldr	r6, [pc, #96]	; (e8a4 <pdsWlInit+0xa0>)
    e844:	4b18      	ldr	r3, [pc, #96]	; (e8a8 <pdsWlInit+0xa4>)
    e846:	4698      	mov	r8, r3
    e848:	e003      	b.n	e852 <pdsWlInit+0x4e>
    e84a:	3401      	adds	r4, #1
    e84c:	3508      	adds	r5, #8
    e84e:	2c20      	cmp	r4, #32
    e850:	d01d      	beq.n	e88e <pdsWlInit+0x8a>
    e852:	b2a7      	uxth	r7, r4
    e854:	2280      	movs	r2, #128	; 0x80
    e856:	0052      	lsls	r2, r2, #1
    e858:	a904      	add	r1, sp, #16
    e85a:	0038      	movs	r0, r7
    e85c:	47b0      	blx	r6
    e85e:	2800      	cmp	r0, #0
    e860:	d1f3      	bne.n	e84a <pdsWlInit+0x46>
    e862:	a904      	add	r1, sp, #16
    e864:	9b06      	ldr	r3, [sp, #24]
    e866:	0a1b      	lsrs	r3, r3, #8
    e868:	7b0a      	ldrb	r2, [r1, #12]
    e86a:	0612      	lsls	r2, r2, #24
    e86c:	431a      	orrs	r2, r3
    e86e:	602a      	str	r2, [r5, #0]
    e870:	79c8      	ldrb	r0, [r1, #7]
    e872:	7a0b      	ldrb	r3, [r1, #8]
    e874:	021b      	lsls	r3, r3, #8
    e876:	4303      	orrs	r3, r0
    e878:	80ab      	strh	r3, [r5, #4]
    e87a:	2101      	movs	r1, #1
    e87c:	4249      	negs	r1, r1
    e87e:	80e9      	strh	r1, [r5, #6]
    e880:	9202      	str	r2, [sp, #8]
    e882:	aa02      	add	r2, sp, #8
    e884:	8093      	strh	r3, [r2, #4]
    e886:	80d7      	strh	r7, [r2, #6]
    e888:	0010      	movs	r0, r2
    e88a:	47c0      	blx	r8
    e88c:	e7dd      	b.n	e84a <pdsWlInit+0x46>
    e88e:	4b07      	ldr	r3, [pc, #28]	; (e8ac <pdsWlInit+0xa8>)
    e890:	4798      	blx	r3
    e892:	e7c0      	b.n	e816 <pdsWlInit+0x12>
    e894:	0000e339 	.word	0x0000e339
    e898:	20000fdc 	.word	0x20000fdc
    e89c:	00019e35 	.word	0x00019e35
    e8a0:	20000fc0 	.word	0x20000fc0
    e8a4:	0000e379 	.word	0x0000e379
    e8a8:	0000e739 	.word	0x0000e739
    e8ac:	0000e6e1 	.word	0x0000e6e1

0000e8b0 <pdsWlWrite>:
    e8b0:	b5f0      	push	{r4, r5, r6, r7, lr}
    e8b2:	46ce      	mov	lr, r9
    e8b4:	4647      	mov	r7, r8
    e8b6:	b580      	push	{r7, lr}
    e8b8:	b083      	sub	sp, #12
    e8ba:	0005      	movs	r5, r0
    e8bc:	000f      	movs	r7, r1
    e8be:	4690      	mov	r8, r2
    e8c0:	4e32      	ldr	r6, [pc, #200]	; (e98c <pdsWlWrite+0xdc>)
    e8c2:	0033      	movs	r3, r6
    e8c4:	2400      	movs	r4, #0
    e8c6:	4832      	ldr	r0, [pc, #200]	; (e990 <pdsWlWrite+0xe0>)
    e8c8:	e004      	b.n	e8d4 <pdsWlWrite+0x24>
    e8ca:	3401      	adds	r4, #1
    e8cc:	b2e4      	uxtb	r4, r4
    e8ce:	3308      	adds	r3, #8
    e8d0:	2c20      	cmp	r4, #32
    e8d2:	d055      	beq.n	e980 <pdsWlWrite+0xd0>
    e8d4:	6819      	ldr	r1, [r3, #0]
    e8d6:	3101      	adds	r1, #1
    e8d8:	d1f7      	bne.n	e8ca <pdsWlWrite+0x1a>
    e8da:	88d9      	ldrh	r1, [r3, #6]
    e8dc:	4281      	cmp	r1, r0
    e8de:	d1f4      	bne.n	e8ca <pdsWlWrite+0x1a>
    e8e0:	889a      	ldrh	r2, [r3, #4]
    e8e2:	4282      	cmp	r2, r0
    e8e4:	d1f1      	bne.n	e8ca <pdsWlWrite+0x1a>
    e8e6:	b2a3      	uxth	r3, r4
    e8e8:	4699      	mov	r9, r3
    e8ea:	7a7e      	ldrb	r6, [r7, #9]
    e8ec:	7abb      	ldrb	r3, [r7, #10]
    e8ee:	021b      	lsls	r3, r3, #8
    e8f0:	4333      	orrs	r3, r6
    e8f2:	7afe      	ldrb	r6, [r7, #11]
    e8f4:	0436      	lsls	r6, r6, #16
    e8f6:	4333      	orrs	r3, r6
    e8f8:	7b3e      	ldrb	r6, [r7, #12]
    e8fa:	0636      	lsls	r6, r6, #24
    e8fc:	431e      	orrs	r6, r3
    e8fe:	3601      	adds	r6, #1
    e900:	727e      	strb	r6, [r7, #9]
    e902:	0a32      	lsrs	r2, r6, #8
    e904:	72ba      	strb	r2, [r7, #10]
    e906:	0c32      	lsrs	r2, r6, #16
    e908:	72fa      	strb	r2, [r7, #11]
    e90a:	0e32      	lsrs	r2, r6, #24
    e90c:	733a      	strb	r2, [r7, #12]
    e90e:	b2ad      	uxth	r5, r5
    e910:	71fd      	strb	r5, [r7, #7]
    e912:	2200      	movs	r2, #0
    e914:	723a      	strb	r2, [r7, #8]
    e916:	23a5      	movs	r3, #165	; 0xa5
    e918:	713b      	strb	r3, [r7, #4]
    e91a:	3ba4      	subs	r3, #164	; 0xa4
    e91c:	717b      	strb	r3, [r7, #5]
    e91e:	4643      	mov	r3, r8
    e920:	71bb      	strb	r3, [r7, #6]
    e922:	4642      	mov	r2, r8
    e924:	3209      	adds	r2, #9
    e926:	b292      	uxth	r2, r2
    e928:	0039      	movs	r1, r7
    e92a:	4648      	mov	r0, r9
    e92c:	4b19      	ldr	r3, [pc, #100]	; (e994 <pdsWlWrite+0xe4>)
    e92e:	4798      	blx	r3
    e930:	1e07      	subs	r7, r0, #0
    e932:	d014      	beq.n	e95e <pdsWlWrite+0xae>
    e934:	0038      	movs	r0, r7
    e936:	b003      	add	sp, #12
    e938:	bc0c      	pop	{r2, r3}
    e93a:	4690      	mov	r8, r2
    e93c:	4699      	mov	r9, r3
    e93e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e940:	3401      	adds	r4, #1
    e942:	b2e4      	uxtb	r4, r4
    e944:	3608      	adds	r6, #8
    e946:	2c20      	cmp	r4, #32
    e948:	d0cd      	beq.n	e8e6 <pdsWlWrite+0x36>
    e94a:	6832      	ldr	r2, [r6, #0]
    e94c:	3201      	adds	r2, #1
    e94e:	d1f7      	bne.n	e940 <pdsWlWrite+0x90>
    e950:	88f2      	ldrh	r2, [r6, #6]
    e952:	428a      	cmp	r2, r1
    e954:	d1f4      	bne.n	e940 <pdsWlWrite+0x90>
    e956:	88b3      	ldrh	r3, [r6, #4]
    e958:	428b      	cmp	r3, r1
    e95a:	d1f1      	bne.n	e940 <pdsWlWrite+0x90>
    e95c:	e7c3      	b.n	e8e6 <pdsWlWrite+0x36>
    e95e:	4b0b      	ldr	r3, [pc, #44]	; (e98c <pdsWlWrite+0xdc>)
    e960:	00e4      	lsls	r4, r4, #3
    e962:	50e6      	str	r6, [r4, r3]
    e964:	191c      	adds	r4, r3, r4
    e966:	80a5      	strh	r5, [r4, #4]
    e968:	2301      	movs	r3, #1
    e96a:	425b      	negs	r3, r3
    e96c:	80e3      	strh	r3, [r4, #6]
    e96e:	9600      	str	r6, [sp, #0]
    e970:	466b      	mov	r3, sp
    e972:	809d      	strh	r5, [r3, #4]
    e974:	464a      	mov	r2, r9
    e976:	80da      	strh	r2, [r3, #6]
    e978:	4668      	mov	r0, sp
    e97a:	4b07      	ldr	r3, [pc, #28]	; (e998 <pdsWlWrite+0xe8>)
    e97c:	4798      	blx	r3
    e97e:	e7d9      	b.n	e934 <pdsWlWrite+0x84>
    e980:	4b06      	ldr	r3, [pc, #24]	; (e99c <pdsWlWrite+0xec>)
    e982:	4798      	blx	r3
    e984:	2400      	movs	r4, #0
    e986:	4902      	ldr	r1, [pc, #8]	; (e990 <pdsWlWrite+0xe0>)
    e988:	e7df      	b.n	e94a <pdsWlWrite+0x9a>
    e98a:	46c0      	nop			; (mov r8, r8)
    e98c:	20000fdc 	.word	0x20000fdc
    e990:	0000ffff 	.word	0x0000ffff
    e994:	0000e411 	.word	0x0000e411
    e998:	0000e739 	.word	0x0000e739
    e99c:	0000e6e1 	.word	0x0000e6e1

0000e9a0 <pdsWlRead>:
    e9a0:	b510      	push	{r4, lr}
    e9a2:	0040      	lsls	r0, r0, #1
    e9a4:	4b06      	ldr	r3, [pc, #24]	; (e9c0 <pdsWlRead+0x20>)
    e9a6:	5ac3      	ldrh	r3, [r0, r3]
    e9a8:	4c06      	ldr	r4, [pc, #24]	; (e9c4 <pdsWlRead+0x24>)
    e9aa:	2003      	movs	r0, #3
    e9ac:	42a3      	cmp	r3, r4
    e9ae:	d100      	bne.n	e9b2 <pdsWlRead+0x12>
    e9b0:	bd10      	pop	{r4, pc}
    e9b2:	3209      	adds	r2, #9
    e9b4:	b292      	uxth	r2, r2
    e9b6:	0018      	movs	r0, r3
    e9b8:	4b03      	ldr	r3, [pc, #12]	; (e9c8 <pdsWlRead+0x28>)
    e9ba:	4798      	blx	r3
    e9bc:	e7f8      	b.n	e9b0 <pdsWlRead+0x10>
    e9be:	46c0      	nop			; (mov r8, r8)
    e9c0:	20000fc0 	.word	0x20000fc0
    e9c4:	0000ffff 	.word	0x0000ffff
    e9c8:	0000e379 	.word	0x0000e379

0000e9cc <isFileFound>:
    e9cc:	0040      	lsls	r0, r0, #1
    e9ce:	4b04      	ldr	r3, [pc, #16]	; (e9e0 <isFileFound+0x14>)
    e9d0:	5ac0      	ldrh	r0, [r0, r3]
    e9d2:	4b04      	ldr	r3, [pc, #16]	; (e9e4 <isFileFound+0x18>)
    e9d4:	469c      	mov	ip, r3
    e9d6:	4460      	add	r0, ip
    e9d8:	1e43      	subs	r3, r0, #1
    e9da:	4198      	sbcs	r0, r3
    e9dc:	b2c0      	uxtb	r0, r0
    e9de:	4770      	bx	lr
    e9e0:	20000fc0 	.word	0x20000fc0
    e9e4:	ffff0001 	.word	0xffff0001

0000e9e8 <pdsWlDeleteAll>:
    e9e8:	b510      	push	{r4, lr}
    e9ea:	2280      	movs	r2, #128	; 0x80
    e9ec:	0052      	lsls	r2, r2, #1
    e9ee:	21ff      	movs	r1, #255	; 0xff
    e9f0:	4804      	ldr	r0, [pc, #16]	; (ea04 <pdsWlDeleteAll+0x1c>)
    e9f2:	4c05      	ldr	r4, [pc, #20]	; (ea08 <pdsWlDeleteAll+0x20>)
    e9f4:	47a0      	blx	r4
    e9f6:	221a      	movs	r2, #26
    e9f8:	21ff      	movs	r1, #255	; 0xff
    e9fa:	4804      	ldr	r0, [pc, #16]	; (ea0c <pdsWlDeleteAll+0x24>)
    e9fc:	47a0      	blx	r4
    e9fe:	4b04      	ldr	r3, [pc, #16]	; (ea10 <pdsWlDeleteAll+0x28>)
    ea00:	4798      	blx	r3
    ea02:	bd10      	pop	{r4, pc}
    ea04:	20000fdc 	.word	0x20000fdc
    ea08:	00019e35 	.word	0x00019e35
    ea0c:	20000fc0 	.word	0x20000fc0
    ea10:	0000e4c1 	.word	0x0000e4c1

0000ea14 <hwTimerExpiryCallback>:
    ea14:	b510      	push	{r4, lr}
    ea16:	4b06      	ldr	r3, [pc, #24]	; (ea30 <hwTimerExpiryCallback+0x1c>)
    ea18:	781b      	ldrb	r3, [r3, #0]
    ea1a:	2b00      	cmp	r3, #0
    ea1c:	d100      	bne.n	ea20 <hwTimerExpiryCallback+0xc>
    ea1e:	bd10      	pop	{r4, pc}
    ea20:	2201      	movs	r2, #1
    ea22:	4b04      	ldr	r3, [pc, #16]	; (ea34 <hwTimerExpiryCallback+0x20>)
    ea24:	701a      	strb	r2, [r3, #0]
    ea26:	2001      	movs	r0, #1
    ea28:	4b03      	ldr	r3, [pc, #12]	; (ea38 <hwTimerExpiryCallback+0x24>)
    ea2a:	4798      	blx	r3
    ea2c:	e7f7      	b.n	ea1e <hwTimerExpiryCallback+0xa>
    ea2e:	46c0      	nop			; (mov r8, r8)
    ea30:	200010ec 	.word	0x200010ec
    ea34:	2000297a 	.word	0x2000297a
    ea38:	0000f3a5 	.word	0x0000f3a5

0000ea3c <hwTimerOverflowCallback>:
    ea3c:	b510      	push	{r4, lr}
    ea3e:	b082      	sub	sp, #8
    ea40:	4924      	ldr	r1, [pc, #144]	; (ead4 <hwTimerOverflowCallback+0x98>)
    ea42:	880a      	ldrh	r2, [r1, #0]
    ea44:	b292      	uxth	r2, r2
    ea46:	880b      	ldrh	r3, [r1, #0]
    ea48:	3301      	adds	r3, #1
    ea4a:	b29b      	uxth	r3, r3
    ea4c:	800b      	strh	r3, [r1, #0]
    ea4e:	429a      	cmp	r2, r3
    ea50:	d903      	bls.n	ea5a <hwTimerOverflowCallback+0x1e>
    ea52:	4a21      	ldr	r2, [pc, #132]	; (ead8 <hwTimerOverflowCallback+0x9c>)
    ea54:	6813      	ldr	r3, [r2, #0]
    ea56:	3301      	adds	r3, #1
    ea58:	6013      	str	r3, [r2, #0]
    ea5a:	f3ef 8310 	mrs	r3, PRIMASK
    ea5e:	425a      	negs	r2, r3
    ea60:	4153      	adcs	r3, r2
    ea62:	9301      	str	r3, [sp, #4]
    ea64:	b672      	cpsid	i
    ea66:	f3bf 8f5f 	dmb	sy
    ea6a:	2200      	movs	r2, #0
    ea6c:	4b1b      	ldr	r3, [pc, #108]	; (eadc <hwTimerOverflowCallback+0xa0>)
    ea6e:	701a      	strb	r2, [r3, #0]
    ea70:	9c01      	ldr	r4, [sp, #4]
    ea72:	4b1b      	ldr	r3, [pc, #108]	; (eae0 <hwTimerOverflowCallback+0xa4>)
    ea74:	681b      	ldr	r3, [r3, #0]
    ea76:	2bff      	cmp	r3, #255	; 0xff
    ea78:	d00d      	beq.n	ea96 <hwTimerOverflowCallback+0x5a>
    ea7a:	0119      	lsls	r1, r3, #4
    ea7c:	4a19      	ldr	r2, [pc, #100]	; (eae4 <hwTimerOverflowCallback+0xa8>)
    ea7e:	1852      	adds	r2, r2, r1
    ea80:	7b52      	ldrb	r2, [r2, #13]
    ea82:	2a00      	cmp	r2, #0
    ea84:	d107      	bne.n	ea96 <hwTimerOverflowCallback+0x5a>
    ea86:	4a17      	ldr	r2, [pc, #92]	; (eae4 <hwTimerOverflowCallback+0xa8>)
    ea88:	5888      	ldr	r0, [r1, r2]
    ea8a:	4b12      	ldr	r3, [pc, #72]	; (ead4 <hwTimerOverflowCallback+0x98>)
    ea8c:	881b      	ldrh	r3, [r3, #0]
    ea8e:	b29b      	uxth	r3, r3
    ea90:	0c02      	lsrs	r2, r0, #16
    ea92:	429a      	cmp	r2, r3
    ea94:	d00a      	beq.n	eaac <hwTimerOverflowCallback+0x70>
    ea96:	23ff      	movs	r3, #255	; 0xff
    ea98:	4223      	tst	r3, r4
    ea9a:	d005      	beq.n	eaa8 <hwTimerOverflowCallback+0x6c>
    ea9c:	2201      	movs	r2, #1
    ea9e:	4b0f      	ldr	r3, [pc, #60]	; (eadc <hwTimerOverflowCallback+0xa0>)
    eaa0:	701a      	strb	r2, [r3, #0]
    eaa2:	f3bf 8f5f 	dmb	sy
    eaa6:	b662      	cpsie	i
    eaa8:	b002      	add	sp, #8
    eaaa:	bd10      	pop	{r4, pc}
    eaac:	b280      	uxth	r0, r0
    eaae:	28ff      	cmp	r0, #255	; 0xff
    eab0:	d909      	bls.n	eac6 <hwTimerOverflowCallback+0x8a>
    eab2:	4b0d      	ldr	r3, [pc, #52]	; (eae8 <hwTimerOverflowCallback+0xac>)
    eab4:	4798      	blx	r3
    eab6:	4b0a      	ldr	r3, [pc, #40]	; (eae0 <hwTimerOverflowCallback+0xa4>)
    eab8:	681a      	ldr	r2, [r3, #0]
    eaba:	0112      	lsls	r2, r2, #4
    eabc:	4b09      	ldr	r3, [pc, #36]	; (eae4 <hwTimerOverflowCallback+0xa8>)
    eabe:	189b      	adds	r3, r3, r2
    eac0:	2201      	movs	r2, #1
    eac2:	735a      	strb	r2, [r3, #13]
    eac4:	e7e7      	b.n	ea96 <hwTimerOverflowCallback+0x5a>
    eac6:	2201      	movs	r2, #1
    eac8:	4b08      	ldr	r3, [pc, #32]	; (eaec <hwTimerOverflowCallback+0xb0>)
    eaca:	701a      	strb	r2, [r3, #0]
    eacc:	2001      	movs	r0, #1
    eace:	4b08      	ldr	r3, [pc, #32]	; (eaf0 <hwTimerOverflowCallback+0xb4>)
    ead0:	4798      	blx	r3
    ead2:	e7e0      	b.n	ea96 <hwTimerOverflowCallback+0x5a>
    ead4:	20002978 	.word	0x20002978
    ead8:	2000297c 	.word	0x2000297c
    eadc:	20000014 	.word	0x20000014
    eae0:	200010e8 	.word	0x200010e8
    eae4:	200027e8 	.word	0x200027e8
    eae8:	0000fc05 	.word	0x0000fc05
    eaec:	2000297a 	.word	0x2000297a
    eaf0:	0000f3a5 	.word	0x0000f3a5

0000eaf4 <loadHwTimer>:
    eaf4:	b570      	push	{r4, r5, r6, lr}
    eaf6:	0004      	movs	r4, r0
    eaf8:	28ff      	cmp	r0, #255	; 0xff
    eafa:	d030      	beq.n	eb5e <loadHwTimer+0x6a>
    eafc:	4b19      	ldr	r3, [pc, #100]	; (eb64 <loadHwTimer+0x70>)
    eafe:	681b      	ldr	r3, [r3, #0]
    eb00:	4b19      	ldr	r3, [pc, #100]	; (eb68 <loadHwTimer+0x74>)
    eb02:	881d      	ldrh	r5, [r3, #0]
    eb04:	042d      	lsls	r5, r5, #16
    eb06:	4b19      	ldr	r3, [pc, #100]	; (eb6c <loadHwTimer+0x78>)
    eb08:	4798      	blx	r3
    eb0a:	0123      	lsls	r3, r4, #4
    eb0c:	4328      	orrs	r0, r5
    eb0e:	4a18      	ldr	r2, [pc, #96]	; (eb70 <loadHwTimer+0x7c>)
    eb10:	589b      	ldr	r3, [r3, r2]
    eb12:	1a18      	subs	r0, r3, r0
    eb14:	4b17      	ldr	r3, [pc, #92]	; (eb74 <loadHwTimer+0x80>)
    eb16:	4298      	cmp	r0, r3
    eb18:	d81a      	bhi.n	eb50 <loadHwTimer+0x5c>
    eb1a:	0122      	lsls	r2, r4, #4
    eb1c:	4b14      	ldr	r3, [pc, #80]	; (eb70 <loadHwTimer+0x7c>)
    eb1e:	189b      	adds	r3, r3, r2
    eb20:	7b5b      	ldrb	r3, [r3, #13]
    eb22:	2b00      	cmp	r3, #0
    eb24:	d11d      	bne.n	eb62 <loadHwTimer+0x6e>
    eb26:	28ff      	cmp	r0, #255	; 0xff
    eb28:	d90b      	bls.n	eb42 <loadHwTimer+0x4e>
    eb2a:	4b13      	ldr	r3, [pc, #76]	; (eb78 <loadHwTimer+0x84>)
    eb2c:	4298      	cmp	r0, r3
    eb2e:	d818      	bhi.n	eb62 <loadHwTimer+0x6e>
    eb30:	b280      	uxth	r0, r0
    eb32:	4b12      	ldr	r3, [pc, #72]	; (eb7c <loadHwTimer+0x88>)
    eb34:	4798      	blx	r3
    eb36:	0124      	lsls	r4, r4, #4
    eb38:	4b0d      	ldr	r3, [pc, #52]	; (eb70 <loadHwTimer+0x7c>)
    eb3a:	191c      	adds	r4, r3, r4
    eb3c:	2301      	movs	r3, #1
    eb3e:	7363      	strb	r3, [r4, #13]
    eb40:	e00f      	b.n	eb62 <loadHwTimer+0x6e>
    eb42:	2201      	movs	r2, #1
    eb44:	4b0e      	ldr	r3, [pc, #56]	; (eb80 <loadHwTimer+0x8c>)
    eb46:	701a      	strb	r2, [r3, #0]
    eb48:	2001      	movs	r0, #1
    eb4a:	4b0e      	ldr	r3, [pc, #56]	; (eb84 <loadHwTimer+0x90>)
    eb4c:	4798      	blx	r3
    eb4e:	e008      	b.n	eb62 <loadHwTimer+0x6e>
    eb50:	2201      	movs	r2, #1
    eb52:	4b0b      	ldr	r3, [pc, #44]	; (eb80 <loadHwTimer+0x8c>)
    eb54:	701a      	strb	r2, [r3, #0]
    eb56:	2001      	movs	r0, #1
    eb58:	4b0a      	ldr	r3, [pc, #40]	; (eb84 <loadHwTimer+0x90>)
    eb5a:	4798      	blx	r3
    eb5c:	e001      	b.n	eb62 <loadHwTimer+0x6e>
    eb5e:	4b0a      	ldr	r3, [pc, #40]	; (eb88 <loadHwTimer+0x94>)
    eb60:	4798      	blx	r3
    eb62:	bd70      	pop	{r4, r5, r6, pc}
    eb64:	2000297c 	.word	0x2000297c
    eb68:	20002978 	.word	0x20002978
    eb6c:	0000fb5d 	.word	0x0000fb5d
    eb70:	200027e8 	.word	0x200027e8
    eb74:	7ffffffe 	.word	0x7ffffffe
    eb78:	0000ffff 	.word	0x0000ffff
    eb7c:	0000fc05 	.word	0x0000fc05
    eb80:	2000297a 	.word	0x2000297a
    eb84:	0000f3a5 	.word	0x0000f3a5
    eb88:	0000fba9 	.word	0x0000fba9

0000eb8c <swtimerInternalHandler>:
    eb8c:	b510      	push	{r4, lr}
    eb8e:	4b1d      	ldr	r3, [pc, #116]	; (ec04 <swtimerInternalHandler+0x78>)
    eb90:	781b      	ldrb	r3, [r3, #0]
    eb92:	2b00      	cmp	r3, #0
    eb94:	d027      	beq.n	ebe6 <swtimerInternalHandler+0x5a>
    eb96:	2200      	movs	r2, #0
    eb98:	4b1a      	ldr	r3, [pc, #104]	; (ec04 <swtimerInternalHandler+0x78>)
    eb9a:	701a      	strb	r2, [r3, #0]
    eb9c:	4b1a      	ldr	r3, [pc, #104]	; (ec08 <swtimerInternalHandler+0x7c>)
    eb9e:	781b      	ldrb	r3, [r3, #0]
    eba0:	2b00      	cmp	r3, #0
    eba2:	d020      	beq.n	ebe6 <swtimerInternalHandler+0x5a>
    eba4:	4b19      	ldr	r3, [pc, #100]	; (ec0c <swtimerInternalHandler+0x80>)
    eba6:	681b      	ldr	r3, [r3, #0]
    eba8:	2bff      	cmp	r3, #255	; 0xff
    ebaa:	d01d      	beq.n	ebe8 <swtimerInternalHandler+0x5c>
    ebac:	4b18      	ldr	r3, [pc, #96]	; (ec10 <swtimerInternalHandler+0x84>)
    ebae:	6818      	ldr	r0, [r3, #0]
    ebb0:	4918      	ldr	r1, [pc, #96]	; (ec14 <swtimerInternalHandler+0x88>)
    ebb2:	680b      	ldr	r3, [r1, #0]
    ebb4:	011a      	lsls	r2, r3, #4
    ebb6:	4b18      	ldr	r3, [pc, #96]	; (ec18 <swtimerInternalHandler+0x8c>)
    ebb8:	189b      	adds	r3, r3, r2
    ebba:	7318      	strb	r0, [r3, #12]
    ebbc:	6008      	str	r0, [r1, #0]
    ebbe:	4a16      	ldr	r2, [pc, #88]	; (ec18 <swtimerInternalHandler+0x8c>)
    ebc0:	4913      	ldr	r1, [pc, #76]	; (ec10 <swtimerInternalHandler+0x84>)
    ebc2:	680b      	ldr	r3, [r1, #0]
    ebc4:	011b      	lsls	r3, r3, #4
    ebc6:	18d3      	adds	r3, r2, r3
    ebc8:	7b18      	ldrb	r0, [r3, #12]
    ebca:	6008      	str	r0, [r1, #0]
    ebcc:	4b11      	ldr	r3, [pc, #68]	; (ec14 <swtimerInternalHandler+0x88>)
    ebce:	681b      	ldr	r3, [r3, #0]
    ebd0:	011b      	lsls	r3, r3, #4
    ebd2:	18d2      	adds	r2, r2, r3
    ebd4:	23ff      	movs	r3, #255	; 0xff
    ebd6:	7313      	strb	r3, [r2, #12]
    ebd8:	4a0b      	ldr	r2, [pc, #44]	; (ec08 <swtimerInternalHandler+0x7c>)
    ebda:	7813      	ldrb	r3, [r2, #0]
    ebdc:	3b01      	subs	r3, #1
    ebde:	b2db      	uxtb	r3, r3
    ebe0:	7013      	strb	r3, [r2, #0]
    ebe2:	2b00      	cmp	r3, #0
    ebe4:	d10b      	bne.n	ebfe <swtimerInternalHandler+0x72>
    ebe6:	bd10      	pop	{r4, pc}
    ebe8:	4b0a      	ldr	r3, [pc, #40]	; (ec14 <swtimerInternalHandler+0x88>)
    ebea:	681b      	ldr	r3, [r3, #0]
    ebec:	2bff      	cmp	r3, #255	; 0xff
    ebee:	d1dd      	bne.n	ebac <swtimerInternalHandler+0x20>
    ebf0:	4b07      	ldr	r3, [pc, #28]	; (ec10 <swtimerInternalHandler+0x84>)
    ebf2:	681b      	ldr	r3, [r3, #0]
    ebf4:	4a05      	ldr	r2, [pc, #20]	; (ec0c <swtimerInternalHandler+0x80>)
    ebf6:	6013      	str	r3, [r2, #0]
    ebf8:	4a06      	ldr	r2, [pc, #24]	; (ec14 <swtimerInternalHandler+0x88>)
    ebfa:	6013      	str	r3, [r2, #0]
    ebfc:	e7df      	b.n	ebbe <swtimerInternalHandler+0x32>
    ebfe:	4b07      	ldr	r3, [pc, #28]	; (ec1c <swtimerInternalHandler+0x90>)
    ec00:	4798      	blx	r3
    ec02:	e7f0      	b.n	ebe6 <swtimerInternalHandler+0x5a>
    ec04:	2000297a 	.word	0x2000297a
    ec08:	200010ec 	.word	0x200010ec
    ec0c:	200010e0 	.word	0x200010e0
    ec10:	200010e8 	.word	0x200010e8
    ec14:	200010e4 	.word	0x200010e4
    ec18:	200027e8 	.word	0x200027e8
    ec1c:	0000eaf5 	.word	0x0000eaf5

0000ec20 <SwTimerReset>:
    ec20:	2300      	movs	r3, #0
    ec22:	4a0d      	ldr	r2, [pc, #52]	; (ec58 <SwTimerReset+0x38>)
    ec24:	7013      	strb	r3, [r2, #0]
    ec26:	4a0d      	ldr	r2, [pc, #52]	; (ec5c <SwTimerReset+0x3c>)
    ec28:	7013      	strb	r3, [r2, #0]
    ec2a:	33ff      	adds	r3, #255	; 0xff
    ec2c:	4a0c      	ldr	r2, [pc, #48]	; (ec60 <SwTimerReset+0x40>)
    ec2e:	6013      	str	r3, [r2, #0]
    ec30:	4a0c      	ldr	r2, [pc, #48]	; (ec64 <SwTimerReset+0x44>)
    ec32:	6013      	str	r3, [r2, #0]
    ec34:	4a0c      	ldr	r2, [pc, #48]	; (ec68 <SwTimerReset+0x48>)
    ec36:	6013      	str	r3, [r2, #0]
    ec38:	4b0c      	ldr	r3, [pc, #48]	; (ec6c <SwTimerReset+0x4c>)
    ec3a:	0018      	movs	r0, r3
    ec3c:	3091      	adds	r0, #145	; 0x91
    ec3e:	30ff      	adds	r0, #255	; 0xff
    ec40:	21ff      	movs	r1, #255	; 0xff
    ec42:	2200      	movs	r2, #0
    ec44:	7219      	strb	r1, [r3, #8]
    ec46:	601a      	str	r2, [r3, #0]
    ec48:	3310      	adds	r3, #16
    ec4a:	4283      	cmp	r3, r0
    ec4c:	d1fa      	bne.n	ec44 <SwTimerReset+0x24>
    ec4e:	2200      	movs	r2, #0
    ec50:	4b07      	ldr	r3, [pc, #28]	; (ec70 <SwTimerReset+0x50>)
    ec52:	701a      	strb	r2, [r3, #0]
    ec54:	4770      	bx	lr
    ec56:	46c0      	nop			; (mov r8, r8)
    ec58:	200010ec 	.word	0x200010ec
    ec5c:	2000297a 	.word	0x2000297a
    ec60:	200010e8 	.word	0x200010e8
    ec64:	200010e0 	.word	0x200010e0
    ec68:	200010e4 	.word	0x200010e4
    ec6c:	200027ec 	.word	0x200027ec
    ec70:	200010dc 	.word	0x200010dc

0000ec74 <SystemTimerInit>:
    ec74:	b510      	push	{r4, lr}
    ec76:	4b08      	ldr	r3, [pc, #32]	; (ec98 <SystemTimerInit+0x24>)
    ec78:	4798      	blx	r3
    ec7a:	2300      	movs	r3, #0
    ec7c:	4a07      	ldr	r2, [pc, #28]	; (ec9c <SystemTimerInit+0x28>)
    ec7e:	6013      	str	r3, [r2, #0]
    ec80:	4a07      	ldr	r2, [pc, #28]	; (eca0 <SystemTimerInit+0x2c>)
    ec82:	8013      	strh	r3, [r2, #0]
    ec84:	4b07      	ldr	r3, [pc, #28]	; (eca4 <SystemTimerInit+0x30>)
    ec86:	4798      	blx	r3
    ec88:	4807      	ldr	r0, [pc, #28]	; (eca8 <SystemTimerInit+0x34>)
    ec8a:	4b08      	ldr	r3, [pc, #32]	; (ecac <SystemTimerInit+0x38>)
    ec8c:	4798      	blx	r3
    ec8e:	4808      	ldr	r0, [pc, #32]	; (ecb0 <SystemTimerInit+0x3c>)
    ec90:	4b08      	ldr	r3, [pc, #32]	; (ecb4 <SystemTimerInit+0x40>)
    ec92:	4798      	blx	r3
    ec94:	bd10      	pop	{r4, pc}
    ec96:	46c0      	nop			; (mov r8, r8)
    ec98:	0000ec21 	.word	0x0000ec21
    ec9c:	2000297c 	.word	0x2000297c
    eca0:	20002978 	.word	0x20002978
    eca4:	0000fc71 	.word	0x0000fc71
    eca8:	0000ea3d 	.word	0x0000ea3d
    ecac:	0000fcf5 	.word	0x0000fcf5
    ecb0:	0000ea15 	.word	0x0000ea15
    ecb4:	0000fd01 	.word	0x0000fd01

0000ecb8 <SwTimerGetTime>:
    ecb8:	b570      	push	{r4, r5, r6, lr}
    ecba:	4b05      	ldr	r3, [pc, #20]	; (ecd0 <SwTimerGetTime+0x18>)
    ecbc:	681c      	ldr	r4, [r3, #0]
    ecbe:	4b05      	ldr	r3, [pc, #20]	; (ecd4 <SwTimerGetTime+0x1c>)
    ecc0:	881d      	ldrh	r5, [r3, #0]
    ecc2:	042d      	lsls	r5, r5, #16
    ecc4:	4b04      	ldr	r3, [pc, #16]	; (ecd8 <SwTimerGetTime+0x20>)
    ecc6:	4798      	blx	r3
    ecc8:	4328      	orrs	r0, r5
    ecca:	0021      	movs	r1, r4
    eccc:	bd70      	pop	{r4, r5, r6, pc}
    ecce:	46c0      	nop			; (mov r8, r8)
    ecd0:	2000297c 	.word	0x2000297c
    ecd4:	20002978 	.word	0x20002978
    ecd8:	0000fb5d 	.word	0x0000fb5d

0000ecdc <SwTimerCreate>:
    ecdc:	b510      	push	{r4, lr}
    ecde:	0004      	movs	r4, r0
    ece0:	4b08      	ldr	r3, [pc, #32]	; (ed04 <SwTimerCreate+0x28>)
    ece2:	781b      	ldrb	r3, [r3, #0]
    ece4:	2014      	movs	r0, #20
    ece6:	2b18      	cmp	r3, #24
    ece8:	d900      	bls.n	ecec <SwTimerCreate+0x10>
    ecea:	bd10      	pop	{r4, pc}
    ecec:	4b06      	ldr	r3, [pc, #24]	; (ed08 <SwTimerCreate+0x2c>)
    ecee:	4798      	blx	r3
    ecf0:	4a04      	ldr	r2, [pc, #16]	; (ed04 <SwTimerCreate+0x28>)
    ecf2:	7813      	ldrb	r3, [r2, #0]
    ecf4:	7023      	strb	r3, [r4, #0]
    ecf6:	3301      	adds	r3, #1
    ecf8:	7013      	strb	r3, [r2, #0]
    ecfa:	4b04      	ldr	r3, [pc, #16]	; (ed0c <SwTimerCreate+0x30>)
    ecfc:	4798      	blx	r3
    ecfe:	2008      	movs	r0, #8
    ed00:	e7f3      	b.n	ecea <SwTimerCreate+0xe>
    ed02:	46c0      	nop			; (mov r8, r8)
    ed04:	200010dc 	.word	0x200010dc
    ed08:	000082b9 	.word	0x000082b9
    ed0c:	000082c5 	.word	0x000082c5

0000ed10 <SwTimerStart>:
    ed10:	b5f0      	push	{r4, r5, r6, r7, lr}
    ed12:	46d6      	mov	lr, sl
    ed14:	464f      	mov	r7, r9
    ed16:	4646      	mov	r6, r8
    ed18:	b5c0      	push	{r6, r7, lr}
    ed1a:	b084      	sub	sp, #16
    ed1c:	0007      	movs	r7, r0
    ed1e:	000d      	movs	r5, r1
    ed20:	0016      	movs	r6, r2
    ed22:	001c      	movs	r4, r3
    ed24:	200a      	movs	r0, #10
    ed26:	2f18      	cmp	r7, #24
    ed28:	d809      	bhi.n	ed3e <SwTimerStart+0x2e>
    ed2a:	2b00      	cmp	r3, #0
    ed2c:	d100      	bne.n	ed30 <SwTimerStart+0x20>
    ed2e:	e08c      	b.n	ee4a <SwTimerStart+0x13a>
    ed30:	013a      	lsls	r2, r7, #4
    ed32:	4b52      	ldr	r3, [pc, #328]	; (ee7c <SwTimerStart+0x16c>)
    ed34:	189b      	adds	r3, r3, r2
    ed36:	685b      	ldr	r3, [r3, #4]
    ed38:	300b      	adds	r0, #11
    ed3a:	2b00      	cmp	r3, #0
    ed3c:	d005      	beq.n	ed4a <SwTimerStart+0x3a>
    ed3e:	b004      	add	sp, #16
    ed40:	bc1c      	pop	{r2, r3, r4}
    ed42:	4690      	mov	r8, r2
    ed44:	4699      	mov	r9, r3
    ed46:	46a2      	mov	sl, r4
    ed48:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ed4a:	4b4d      	ldr	r3, [pc, #308]	; (ee80 <SwTimerStart+0x170>)
    ed4c:	681b      	ldr	r3, [r3, #0]
    ed4e:	4b4d      	ldr	r3, [pc, #308]	; (ee84 <SwTimerStart+0x174>)
    ed50:	8818      	ldrh	r0, [r3, #0]
    ed52:	0403      	lsls	r3, r0, #16
    ed54:	4698      	mov	r8, r3
    ed56:	4b4c      	ldr	r3, [pc, #304]	; (ee88 <SwTimerStart+0x178>)
    ed58:	4798      	blx	r3
    ed5a:	4643      	mov	r3, r8
    ed5c:	4303      	orrs	r3, r0
    ed5e:	2e00      	cmp	r6, #0
    ed60:	d003      	beq.n	ed6a <SwTimerStart+0x5a>
    ed62:	2e01      	cmp	r6, #1
    ed64:	d038      	beq.n	edd8 <SwTimerStart+0xc8>
    ed66:	200a      	movs	r0, #10
    ed68:	e7e9      	b.n	ed3e <SwTimerStart+0x2e>
    ed6a:	4948      	ldr	r1, [pc, #288]	; (ee8c <SwTimerStart+0x17c>)
    ed6c:	200a      	movs	r0, #10
    ed6e:	002a      	movs	r2, r5
    ed70:	3aff      	subs	r2, #255	; 0xff
    ed72:	18ed      	adds	r5, r5, r3
    ed74:	428a      	cmp	r2, r1
    ed76:	d8e2      	bhi.n	ed3e <SwTimerStart+0x2e>
    ed78:	f3ef 8310 	mrs	r3, PRIMASK
    ed7c:	425a      	negs	r2, r3
    ed7e:	4153      	adcs	r3, r2
    ed80:	9303      	str	r3, [sp, #12]
    ed82:	b672      	cpsid	i
    ed84:	f3bf 8f5f 	dmb	sy
    ed88:	2600      	movs	r6, #0
    ed8a:	4b41      	ldr	r3, [pc, #260]	; (ee90 <SwTimerStart+0x180>)
    ed8c:	701e      	strb	r6, [r3, #0]
    ed8e:	9b03      	ldr	r3, [sp, #12]
    ed90:	4699      	mov	r9, r3
    ed92:	4b40      	ldr	r3, [pc, #256]	; (ee94 <SwTimerStart+0x184>)
    ed94:	4798      	blx	r3
    ed96:	4b39      	ldr	r3, [pc, #228]	; (ee7c <SwTimerStart+0x16c>)
    ed98:	013a      	lsls	r2, r7, #4
    ed9a:	50d5      	str	r5, [r2, r3]
    ed9c:	189b      	adds	r3, r3, r2
    ed9e:	605c      	str	r4, [r3, #4]
    eda0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    eda2:	609a      	str	r2, [r3, #8]
    eda4:	735e      	strb	r6, [r3, #13]
    eda6:	4a3c      	ldr	r2, [pc, #240]	; (ee98 <SwTimerStart+0x188>)
    eda8:	7813      	ldrb	r3, [r2, #0]
    edaa:	3301      	adds	r3, #1
    edac:	b2db      	uxtb	r3, r3
    edae:	7013      	strb	r3, [r2, #0]
    edb0:	4b3a      	ldr	r3, [pc, #232]	; (ee9c <SwTimerStart+0x18c>)
    edb2:	681b      	ldr	r3, [r3, #0]
    edb4:	469a      	mov	sl, r3
    edb6:	2bff      	cmp	r3, #255	; 0xff
    edb8:	d016      	beq.n	ede8 <SwTimerStart+0xd8>
    edba:	466a      	mov	r2, sp
    edbc:	7013      	strb	r3, [r2, #0]
    edbe:	7812      	ldrb	r2, [r2, #0]
    edc0:	4b35      	ldr	r3, [pc, #212]	; (ee98 <SwTimerStart+0x188>)
    edc2:	781b      	ldrb	r3, [r3, #0]
    edc4:	2b00      	cmp	r3, #0
    edc6:	d042      	beq.n	ee4e <SwTimerStart+0x13e>
    edc8:	9200      	str	r2, [sp, #0]
    edca:	2300      	movs	r3, #0
    edcc:	492b      	ldr	r1, [pc, #172]	; (ee7c <SwTimerStart+0x16c>)
    edce:	4688      	mov	r8, r1
    edd0:	4833      	ldr	r0, [pc, #204]	; (eea0 <SwTimerStart+0x190>)
    edd2:	468c      	mov	ip, r1
    edd4:	4c30      	ldr	r4, [pc, #192]	; (ee98 <SwTimerStart+0x188>)
    edd6:	e02a      	b.n	ee2e <SwTimerStart+0x11e>
    edd8:	0028      	movs	r0, r5
    edda:	38ff      	subs	r0, #255	; 0xff
    eddc:	1ac3      	subs	r3, r0, r3
    edde:	4a2b      	ldr	r2, [pc, #172]	; (ee8c <SwTimerStart+0x17c>)
    ede0:	200a      	movs	r0, #10
    ede2:	4293      	cmp	r3, r2
    ede4:	d9c8      	bls.n	ed78 <SwTimerStart+0x68>
    ede6:	e7aa      	b.n	ed3e <SwTimerStart+0x2e>
    ede8:	4b2c      	ldr	r3, [pc, #176]	; (ee9c <SwTimerStart+0x18c>)
    edea:	601f      	str	r7, [r3, #0]
    edec:	0038      	movs	r0, r7
    edee:	4b2d      	ldr	r3, [pc, #180]	; (eea4 <SwTimerStart+0x194>)
    edf0:	4798      	blx	r3
    edf2:	e036      	b.n	ee62 <SwTimerStart+0x152>
    edf4:	4b21      	ldr	r3, [pc, #132]	; (ee7c <SwTimerStart+0x16c>)
    edf6:	013c      	lsls	r4, r7, #4
    edf8:	191c      	adds	r4, r3, r4
    edfa:	7322      	strb	r2, [r4, #12]
    edfc:	9901      	ldr	r1, [sp, #4]
    edfe:	0109      	lsls	r1, r1, #4
    ee00:	1859      	adds	r1, r3, r1
    ee02:	2300      	movs	r3, #0
    ee04:	734b      	strb	r3, [r1, #13]
    ee06:	4592      	cmp	sl, r2
    ee08:	d005      	beq.n	ee16 <SwTimerStart+0x106>
    ee0a:	9b00      	ldr	r3, [sp, #0]
    ee0c:	0118      	lsls	r0, r3, #4
    ee0e:	4b1b      	ldr	r3, [pc, #108]	; (ee7c <SwTimerStart+0x16c>)
    ee10:	1818      	adds	r0, r3, r0
    ee12:	7307      	strb	r7, [r0, #12]
    ee14:	e025      	b.n	ee62 <SwTimerStart+0x152>
    ee16:	4b21      	ldr	r3, [pc, #132]	; (ee9c <SwTimerStart+0x18c>)
    ee18:	601f      	str	r7, [r3, #0]
    ee1a:	0038      	movs	r0, r7
    ee1c:	4b21      	ldr	r3, [pc, #132]	; (eea4 <SwTimerStart+0x194>)
    ee1e:	4798      	blx	r3
    ee20:	e01f      	b.n	ee62 <SwTimerStart+0x152>
    ee22:	3301      	adds	r3, #1
    ee24:	b2db      	uxtb	r3, r3
    ee26:	7821      	ldrb	r1, [r4, #0]
    ee28:	b2c9      	uxtb	r1, r1
    ee2a:	428b      	cmp	r3, r1
    ee2c:	d210      	bcs.n	ee50 <SwTimerStart+0x140>
    ee2e:	2aff      	cmp	r2, #255	; 0xff
    ee30:	d0f7      	beq.n	ee22 <SwTimerStart+0x112>
    ee32:	9201      	str	r2, [sp, #4]
    ee34:	0111      	lsls	r1, r2, #4
    ee36:	4646      	mov	r6, r8
    ee38:	5989      	ldr	r1, [r1, r6]
    ee3a:	1a69      	subs	r1, r5, r1
    ee3c:	4281      	cmp	r1, r0
    ee3e:	d8d9      	bhi.n	edf4 <SwTimerStart+0xe4>
    ee40:	0111      	lsls	r1, r2, #4
    ee42:	4461      	add	r1, ip
    ee44:	9200      	str	r2, [sp, #0]
    ee46:	7b0a      	ldrb	r2, [r1, #12]
    ee48:	e7eb      	b.n	ee22 <SwTimerStart+0x112>
    ee4a:	200a      	movs	r0, #10
    ee4c:	e777      	b.n	ed3e <SwTimerStart+0x2e>
    ee4e:	9200      	str	r2, [sp, #0]
    ee50:	4b0a      	ldr	r3, [pc, #40]	; (ee7c <SwTimerStart+0x16c>)
    ee52:	9a00      	ldr	r2, [sp, #0]
    ee54:	0110      	lsls	r0, r2, #4
    ee56:	1818      	adds	r0, r3, r0
    ee58:	7307      	strb	r7, [r0, #12]
    ee5a:	013f      	lsls	r7, r7, #4
    ee5c:	19df      	adds	r7, r3, r7
    ee5e:	23ff      	movs	r3, #255	; 0xff
    ee60:	733b      	strb	r3, [r7, #12]
    ee62:	23ff      	movs	r3, #255	; 0xff
    ee64:	2008      	movs	r0, #8
    ee66:	464a      	mov	r2, r9
    ee68:	4213      	tst	r3, r2
    ee6a:	d100      	bne.n	ee6e <SwTimerStart+0x15e>
    ee6c:	e767      	b.n	ed3e <SwTimerStart+0x2e>
    ee6e:	2201      	movs	r2, #1
    ee70:	4b07      	ldr	r3, [pc, #28]	; (ee90 <SwTimerStart+0x180>)
    ee72:	701a      	strb	r2, [r3, #0]
    ee74:	f3bf 8f5f 	dmb	sy
    ee78:	b662      	cpsie	i
    ee7a:	e760      	b.n	ed3e <SwTimerStart+0x2e>
    ee7c:	200027e8 	.word	0x200027e8
    ee80:	2000297c 	.word	0x2000297c
    ee84:	20002978 	.word	0x20002978
    ee88:	0000fb5d 	.word	0x0000fb5d
    ee8c:	7fffff00 	.word	0x7fffff00
    ee90:	20000014 	.word	0x20000014
    ee94:	0000eb8d 	.word	0x0000eb8d
    ee98:	200010ec 	.word	0x200010ec
    ee9c:	200010e8 	.word	0x200010e8
    eea0:	7ffffffe 	.word	0x7ffffffe
    eea4:	0000eaf5 	.word	0x0000eaf5

0000eea8 <SwTimerIsRunning>:
    eea8:	0103      	lsls	r3, r0, #4
    eeaa:	4803      	ldr	r0, [pc, #12]	; (eeb8 <SwTimerIsRunning+0x10>)
    eeac:	18c0      	adds	r0, r0, r3
    eeae:	6840      	ldr	r0, [r0, #4]
    eeb0:	1e43      	subs	r3, r0, #1
    eeb2:	4198      	sbcs	r0, r3
    eeb4:	b2c0      	uxtb	r0, r0
    eeb6:	4770      	bx	lr
    eeb8:	200027e8 	.word	0x200027e8

0000eebc <SwTimerReadValue>:
    eebc:	b570      	push	{r4, r5, r6, lr}
    eebe:	0102      	lsls	r2, r0, #4
    eec0:	4b0d      	ldr	r3, [pc, #52]	; (eef8 <SwTimerReadValue+0x3c>)
    eec2:	189b      	adds	r3, r3, r2
    eec4:	685b      	ldr	r3, [r3, #4]
    eec6:	2b00      	cmp	r3, #0
    eec8:	d014      	beq.n	eef4 <SwTimerReadValue+0x38>
    eeca:	4b0b      	ldr	r3, [pc, #44]	; (eef8 <SwTimerReadValue+0x3c>)
    eecc:	58d5      	ldr	r5, [r2, r3]
    eece:	4b0b      	ldr	r3, [pc, #44]	; (eefc <SwTimerReadValue+0x40>)
    eed0:	681b      	ldr	r3, [r3, #0]
    eed2:	4b0b      	ldr	r3, [pc, #44]	; (ef00 <SwTimerReadValue+0x44>)
    eed4:	881c      	ldrh	r4, [r3, #0]
    eed6:	0424      	lsls	r4, r4, #16
    eed8:	4b0a      	ldr	r3, [pc, #40]	; (ef04 <SwTimerReadValue+0x48>)
    eeda:	4798      	blx	r3
    eedc:	4320      	orrs	r0, r4
    eede:	4285      	cmp	r5, r0
    eee0:	d305      	bcc.n	eeee <SwTimerReadValue+0x32>
    eee2:	1a28      	subs	r0, r5, r0
    eee4:	4b08      	ldr	r3, [pc, #32]	; (ef08 <SwTimerReadValue+0x4c>)
    eee6:	4298      	cmp	r0, r3
    eee8:	d900      	bls.n	eeec <SwTimerReadValue+0x30>
    eeea:	2000      	movs	r0, #0
    eeec:	bd70      	pop	{r4, r5, r6, pc}
    eeee:	3d01      	subs	r5, #1
    eef0:	1a28      	subs	r0, r5, r0
    eef2:	e7f7      	b.n	eee4 <SwTimerReadValue+0x28>
    eef4:	2000      	movs	r0, #0
    eef6:	e7f9      	b.n	eeec <SwTimerReadValue+0x30>
    eef8:	200027e8 	.word	0x200027e8
    eefc:	2000297c 	.word	0x2000297c
    ef00:	20002978 	.word	0x20002978
    ef04:	0000fb5d 	.word	0x0000fb5d
    ef08:	7ffffffe 	.word	0x7ffffffe

0000ef0c <SwTimerNextExpiryDuration>:
    ef0c:	b510      	push	{r4, lr}
    ef0e:	4b05      	ldr	r3, [pc, #20]	; (ef24 <SwTimerNextExpiryDuration+0x18>)
    ef10:	6818      	ldr	r0, [r3, #0]
    ef12:	28ff      	cmp	r0, #255	; 0xff
    ef14:	d102      	bne.n	ef1c <SwTimerNextExpiryDuration+0x10>
    ef16:	2001      	movs	r0, #1
    ef18:	4240      	negs	r0, r0
    ef1a:	bd10      	pop	{r4, pc}
    ef1c:	b2c0      	uxtb	r0, r0
    ef1e:	4b02      	ldr	r3, [pc, #8]	; (ef28 <SwTimerNextExpiryDuration+0x1c>)
    ef20:	4798      	blx	r3
    ef22:	e7fa      	b.n	ef1a <SwTimerNextExpiryDuration+0xe>
    ef24:	200010e8 	.word	0x200010e8
    ef28:	0000eebd 	.word	0x0000eebd

0000ef2c <SwTimersExecute>:
    ef2c:	b5f0      	push	{r4, r5, r6, r7, lr}
    ef2e:	46de      	mov	lr, fp
    ef30:	4657      	mov	r7, sl
    ef32:	464e      	mov	r6, r9
    ef34:	4645      	mov	r5, r8
    ef36:	b5e0      	push	{r5, r6, r7, lr}
    ef38:	b083      	sub	sp, #12
    ef3a:	4b2f      	ldr	r3, [pc, #188]	; (eff8 <SwTimersExecute+0xcc>)
    ef3c:	681b      	ldr	r3, [r3, #0]
    ef3e:	4b2f      	ldr	r3, [pc, #188]	; (effc <SwTimersExecute+0xd0>)
    ef40:	881b      	ldrh	r3, [r3, #0]
    ef42:	4b2f      	ldr	r3, [pc, #188]	; (f000 <SwTimersExecute+0xd4>)
    ef44:	4798      	blx	r3
    ef46:	f3ef 8210 	mrs	r2, PRIMASK
    ef4a:	4253      	negs	r3, r2
    ef4c:	4153      	adcs	r3, r2
    ef4e:	9300      	str	r3, [sp, #0]
    ef50:	b672      	cpsid	i
    ef52:	f3bf 8f5f 	dmb	sy
    ef56:	2200      	movs	r2, #0
    ef58:	4b2a      	ldr	r3, [pc, #168]	; (f004 <SwTimersExecute+0xd8>)
    ef5a:	701a      	strb	r2, [r3, #0]
    ef5c:	9c00      	ldr	r4, [sp, #0]
    ef5e:	4b2a      	ldr	r3, [pc, #168]	; (f008 <SwTimersExecute+0xdc>)
    ef60:	4798      	blx	r3
    ef62:	23ff      	movs	r3, #255	; 0xff
    ef64:	4223      	tst	r3, r4
    ef66:	d005      	beq.n	ef74 <SwTimersExecute+0x48>
    ef68:	2201      	movs	r2, #1
    ef6a:	4b26      	ldr	r3, [pc, #152]	; (f004 <SwTimersExecute+0xd8>)
    ef6c:	701a      	strb	r2, [r3, #0]
    ef6e:	f3bf 8f5f 	dmb	sy
    ef72:	b662      	cpsie	i
    ef74:	4b23      	ldr	r3, [pc, #140]	; (f004 <SwTimersExecute+0xd8>)
    ef76:	469a      	mov	sl, r3
    ef78:	4c24      	ldr	r4, [pc, #144]	; (f00c <SwTimersExecute+0xe0>)
    ef7a:	4b25      	ldr	r3, [pc, #148]	; (f010 <SwTimersExecute+0xe4>)
    ef7c:	4699      	mov	r9, r3
    ef7e:	2200      	movs	r2, #0
    ef80:	20ff      	movs	r0, #255	; 0xff
    ef82:	4b24      	ldr	r3, [pc, #144]	; (f014 <SwTimersExecute+0xe8>)
    ef84:	4698      	mov	r8, r3
    ef86:	4b1f      	ldr	r3, [pc, #124]	; (f004 <SwTimersExecute+0xd8>)
    ef88:	469c      	mov	ip, r3
    ef8a:	e004      	b.n	ef96 <SwTimersExecute+0x6a>
    ef8c:	4643      	mov	r3, r8
    ef8e:	6018      	str	r0, [r3, #0]
    ef90:	e01e      	b.n	efd0 <SwTimersExecute+0xa4>
    ef92:	2e00      	cmp	r6, #0
    ef94:	d125      	bne.n	efe2 <SwTimersExecute+0xb6>
    ef96:	4b1d      	ldr	r3, [pc, #116]	; (f00c <SwTimersExecute+0xe0>)
    ef98:	681b      	ldr	r3, [r3, #0]
    ef9a:	2bff      	cmp	r3, #255	; 0xff
    ef9c:	d024      	beq.n	efe8 <SwTimersExecute+0xbc>
    ef9e:	f3ef 8110 	mrs	r1, PRIMASK
    efa2:	424b      	negs	r3, r1
    efa4:	414b      	adcs	r3, r1
    efa6:	9301      	str	r3, [sp, #4]
    efa8:	b672      	cpsid	i
    efaa:	f3bf 8f5f 	dmb	sy
    efae:	4653      	mov	r3, sl
    efb0:	701a      	strb	r2, [r3, #0]
    efb2:	9f01      	ldr	r7, [sp, #4]
    efb4:	6823      	ldr	r3, [r4, #0]
    efb6:	011b      	lsls	r3, r3, #4
    efb8:	444b      	add	r3, r9
    efba:	7b19      	ldrb	r1, [r3, #12]
    efbc:	685e      	ldr	r6, [r3, #4]
    efbe:	689d      	ldr	r5, [r3, #8]
    efc0:	46ab      	mov	fp, r5
    efc2:	7318      	strb	r0, [r3, #12]
    efc4:	605a      	str	r2, [r3, #4]
    efc6:	609a      	str	r2, [r3, #8]
    efc8:	735a      	strb	r2, [r3, #13]
    efca:	6021      	str	r1, [r4, #0]
    efcc:	29ff      	cmp	r1, #255	; 0xff
    efce:	d0dd      	beq.n	ef8c <SwTimersExecute+0x60>
    efd0:	4238      	tst	r0, r7
    efd2:	d0de      	beq.n	ef92 <SwTimersExecute+0x66>
    efd4:	2301      	movs	r3, #1
    efd6:	4661      	mov	r1, ip
    efd8:	700b      	strb	r3, [r1, #0]
    efda:	f3bf 8f5f 	dmb	sy
    efde:	b662      	cpsie	i
    efe0:	e7d7      	b.n	ef92 <SwTimersExecute+0x66>
    efe2:	4658      	mov	r0, fp
    efe4:	47b0      	blx	r6
    efe6:	e7ca      	b.n	ef7e <SwTimersExecute+0x52>
    efe8:	b003      	add	sp, #12
    efea:	bc3c      	pop	{r2, r3, r4, r5}
    efec:	4690      	mov	r8, r2
    efee:	4699      	mov	r9, r3
    eff0:	46a2      	mov	sl, r4
    eff2:	46ab      	mov	fp, r5
    eff4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    eff6:	46c0      	nop			; (mov r8, r8)
    eff8:	2000297c 	.word	0x2000297c
    effc:	20002978 	.word	0x20002978
    f000:	0000fb5d 	.word	0x0000fb5d
    f004:	20000014 	.word	0x20000014
    f008:	0000eb8d 	.word	0x0000eb8d
    f00c:	200010e0 	.word	0x200010e0
    f010:	200027e8 	.word	0x200027e8
    f014:	200010e4 	.word	0x200010e4

0000f018 <TIMER_TaskHandler>:
    f018:	b510      	push	{r4, lr}
    f01a:	4b02      	ldr	r3, [pc, #8]	; (f024 <TIMER_TaskHandler+0xc>)
    f01c:	4798      	blx	r3
    f01e:	2000      	movs	r0, #0
    f020:	bd10      	pop	{r4, pc}
    f022:	46c0      	nop			; (mov r8, r8)
    f024:	0000ef2d 	.word	0x0000ef2d

0000f028 <SwTimerStop>:
    f028:	b570      	push	{r4, r5, r6, lr}
    f02a:	b082      	sub	sp, #8
    f02c:	0004      	movs	r4, r0
    f02e:	200a      	movs	r0, #10
    f030:	2c18      	cmp	r4, #24
    f032:	d901      	bls.n	f038 <SwTimerStop+0x10>
    f034:	b002      	add	sp, #8
    f036:	bd70      	pop	{r4, r5, r6, pc}
    f038:	f3ef 8310 	mrs	r3, PRIMASK
    f03c:	425a      	negs	r2, r3
    f03e:	4153      	adcs	r3, r2
    f040:	9301      	str	r3, [sp, #4]
    f042:	b672      	cpsid	i
    f044:	f3bf 8f5f 	dmb	sy
    f048:	2200      	movs	r2, #0
    f04a:	4b47      	ldr	r3, [pc, #284]	; (f168 <SwTimerStop+0x140>)
    f04c:	701a      	strb	r2, [r3, #0]
    f04e:	9d01      	ldr	r5, [sp, #4]
    f050:	4b46      	ldr	r3, [pc, #280]	; (f16c <SwTimerStop+0x144>)
    f052:	4798      	blx	r3
    f054:	4b46      	ldr	r3, [pc, #280]	; (f170 <SwTimerStop+0x148>)
    f056:	781b      	ldrb	r3, [r3, #0]
    f058:	2b00      	cmp	r3, #0
    f05a:	d040      	beq.n	f0de <SwTimerStop+0xb6>
    f05c:	4b44      	ldr	r3, [pc, #272]	; (f170 <SwTimerStop+0x148>)
    f05e:	781b      	ldrb	r3, [r3, #0]
    f060:	b2db      	uxtb	r3, r3
    f062:	4a44      	ldr	r2, [pc, #272]	; (f174 <SwTimerStop+0x14c>)
    f064:	6816      	ldr	r6, [r2, #0]
    f066:	b2f1      	uxtb	r1, r6
    f068:	2b00      	cmp	r3, #0
    f06a:	d038      	beq.n	f0de <SwTimerStop+0xb6>
    f06c:	428c      	cmp	r4, r1
    f06e:	d00b      	beq.n	f088 <SwTimerStop+0x60>
    f070:	4841      	ldr	r0, [pc, #260]	; (f178 <SwTimerStop+0x150>)
    f072:	010a      	lsls	r2, r1, #4
    f074:	1882      	adds	r2, r0, r2
    f076:	7b12      	ldrb	r2, [r2, #12]
    f078:	3b01      	subs	r3, #1
    f07a:	b2db      	uxtb	r3, r3
    f07c:	2b00      	cmp	r3, #0
    f07e:	d02e      	beq.n	f0de <SwTimerStop+0xb6>
    f080:	4294      	cmp	r4, r2
    f082:	d001      	beq.n	f088 <SwTimerStop+0x60>
    f084:	0011      	movs	r1, r2
    f086:	e7f4      	b.n	f072 <SwTimerStop+0x4a>
    f088:	42a6      	cmp	r6, r4
    f08a:	d01d      	beq.n	f0c8 <SwTimerStop+0xa0>
    f08c:	4b3a      	ldr	r3, [pc, #232]	; (f178 <SwTimerStop+0x150>)
    f08e:	0122      	lsls	r2, r4, #4
    f090:	189a      	adds	r2, r3, r2
    f092:	7b12      	ldrb	r2, [r2, #12]
    f094:	0109      	lsls	r1, r1, #4
    f096:	1859      	adds	r1, r3, r1
    f098:	730a      	strb	r2, [r1, #12]
    f09a:	0122      	lsls	r2, r4, #4
    f09c:	4b36      	ldr	r3, [pc, #216]	; (f178 <SwTimerStop+0x150>)
    f09e:	189b      	adds	r3, r3, r2
    f0a0:	22ff      	movs	r2, #255	; 0xff
    f0a2:	731a      	strb	r2, [r3, #12]
    f0a4:	4a32      	ldr	r2, [pc, #200]	; (f170 <SwTimerStop+0x148>)
    f0a6:	7813      	ldrb	r3, [r2, #0]
    f0a8:	3b01      	subs	r3, #1
    f0aa:	b2db      	uxtb	r3, r3
    f0ac:	7013      	strb	r3, [r2, #0]
    f0ae:	0124      	lsls	r4, r4, #4
    f0b0:	4b31      	ldr	r3, [pc, #196]	; (f178 <SwTimerStop+0x150>)
    f0b2:	191c      	adds	r4, r3, r4
    f0b4:	2300      	movs	r3, #0
    f0b6:	6063      	str	r3, [r4, #4]
    f0b8:	60a3      	str	r3, [r4, #8]
    f0ba:	7363      	strb	r3, [r4, #13]
    f0bc:	33ff      	adds	r3, #255	; 0xff
    f0be:	2008      	movs	r0, #8
    f0c0:	422b      	tst	r3, r5
    f0c2:	d0b7      	beq.n	f034 <SwTimerStop+0xc>
    f0c4:	2301      	movs	r3, #1
    f0c6:	e040      	b.n	f14a <SwTimerStop+0x122>
    f0c8:	4b2c      	ldr	r3, [pc, #176]	; (f17c <SwTimerStop+0x154>)
    f0ca:	4798      	blx	r3
    f0cc:	0122      	lsls	r2, r4, #4
    f0ce:	4b2a      	ldr	r3, [pc, #168]	; (f178 <SwTimerStop+0x150>)
    f0d0:	189b      	adds	r3, r3, r2
    f0d2:	7b18      	ldrb	r0, [r3, #12]
    f0d4:	4b27      	ldr	r3, [pc, #156]	; (f174 <SwTimerStop+0x14c>)
    f0d6:	6018      	str	r0, [r3, #0]
    f0d8:	4b29      	ldr	r3, [pc, #164]	; (f180 <SwTimerStop+0x158>)
    f0da:	4798      	blx	r3
    f0dc:	e7dd      	b.n	f09a <SwTimerStop+0x72>
    f0de:	4b29      	ldr	r3, [pc, #164]	; (f184 <SwTimerStop+0x15c>)
    f0e0:	6818      	ldr	r0, [r3, #0]
    f0e2:	b2c2      	uxtb	r2, r0
    f0e4:	2aff      	cmp	r2, #255	; 0xff
    f0e6:	d02c      	beq.n	f142 <SwTimerStop+0x11a>
    f0e8:	4294      	cmp	r4, r2
    f0ea:	d009      	beq.n	f100 <SwTimerStop+0xd8>
    f0ec:	4922      	ldr	r1, [pc, #136]	; (f178 <SwTimerStop+0x150>)
    f0ee:	0113      	lsls	r3, r2, #4
    f0f0:	18cb      	adds	r3, r1, r3
    f0f2:	7b1b      	ldrb	r3, [r3, #12]
    f0f4:	2bff      	cmp	r3, #255	; 0xff
    f0f6:	d024      	beq.n	f142 <SwTimerStop+0x11a>
    f0f8:	429c      	cmp	r4, r3
    f0fa:	d001      	beq.n	f100 <SwTimerStop+0xd8>
    f0fc:	001a      	movs	r2, r3
    f0fe:	e7f6      	b.n	f0ee <SwTimerStop+0xc6>
    f100:	42a0      	cmp	r0, r4
    f102:	d00d      	beq.n	f120 <SwTimerStop+0xf8>
    f104:	4b1c      	ldr	r3, [pc, #112]	; (f178 <SwTimerStop+0x150>)
    f106:	0121      	lsls	r1, r4, #4
    f108:	1859      	adds	r1, r3, r1
    f10a:	7b09      	ldrb	r1, [r1, #12]
    f10c:	0110      	lsls	r0, r2, #4
    f10e:	181b      	adds	r3, r3, r0
    f110:	7319      	strb	r1, [r3, #12]
    f112:	4b1d      	ldr	r3, [pc, #116]	; (f188 <SwTimerStop+0x160>)
    f114:	681b      	ldr	r3, [r3, #0]
    f116:	429c      	cmp	r4, r3
    f118:	d1c9      	bne.n	f0ae <SwTimerStop+0x86>
    f11a:	4b1b      	ldr	r3, [pc, #108]	; (f188 <SwTimerStop+0x160>)
    f11c:	601a      	str	r2, [r3, #0]
    f11e:	e7c6      	b.n	f0ae <SwTimerStop+0x86>
    f120:	4b19      	ldr	r3, [pc, #100]	; (f188 <SwTimerStop+0x160>)
    f122:	681b      	ldr	r3, [r3, #0]
    f124:	4298      	cmp	r0, r3
    f126:	d006      	beq.n	f136 <SwTimerStop+0x10e>
    f128:	0100      	lsls	r0, r0, #4
    f12a:	4b13      	ldr	r3, [pc, #76]	; (f178 <SwTimerStop+0x150>)
    f12c:	1818      	adds	r0, r3, r0
    f12e:	7b02      	ldrb	r2, [r0, #12]
    f130:	4b14      	ldr	r3, [pc, #80]	; (f184 <SwTimerStop+0x15c>)
    f132:	601a      	str	r2, [r3, #0]
    f134:	e7bb      	b.n	f0ae <SwTimerStop+0x86>
    f136:	23ff      	movs	r3, #255	; 0xff
    f138:	4a13      	ldr	r2, [pc, #76]	; (f188 <SwTimerStop+0x160>)
    f13a:	6013      	str	r3, [r2, #0]
    f13c:	4a11      	ldr	r2, [pc, #68]	; (f184 <SwTimerStop+0x15c>)
    f13e:	6013      	str	r3, [r2, #0]
    f140:	e7b5      	b.n	f0ae <SwTimerStop+0x86>
    f142:	23ff      	movs	r3, #255	; 0xff
    f144:	422b      	tst	r3, r5
    f146:	d00a      	beq.n	f15e <SwTimerStop+0x136>
    f148:	2300      	movs	r3, #0
    f14a:	2101      	movs	r1, #1
    f14c:	4a06      	ldr	r2, [pc, #24]	; (f168 <SwTimerStop+0x140>)
    f14e:	7011      	strb	r1, [r2, #0]
    f150:	f3bf 8f5f 	dmb	sy
    f154:	b662      	cpsie	i
    f156:	2b00      	cmp	r3, #0
    f158:	d103      	bne.n	f162 <SwTimerStop+0x13a>
    f15a:	2015      	movs	r0, #21
    f15c:	e76a      	b.n	f034 <SwTimerStop+0xc>
    f15e:	2015      	movs	r0, #21
    f160:	e768      	b.n	f034 <SwTimerStop+0xc>
    f162:	2008      	movs	r0, #8
    f164:	e766      	b.n	f034 <SwTimerStop+0xc>
    f166:	46c0      	nop			; (mov r8, r8)
    f168:	20000014 	.word	0x20000014
    f16c:	0000eb8d 	.word	0x0000eb8d
    f170:	200010ec 	.word	0x200010ec
    f174:	200010e8 	.word	0x200010e8
    f178:	200027e8 	.word	0x200027e8
    f17c:	0000fba9 	.word	0x0000fba9
    f180:	0000eaf5 	.word	0x0000eaf5
    f184:	200010e0 	.word	0x200010e0
    f188:	200010e4 	.word	0x200010e4

0000f18c <SwTimerRunRemainingTime>:
    f18c:	b5f0      	push	{r4, r5, r6, r7, lr}
    f18e:	b083      	sub	sp, #12
    f190:	0005      	movs	r5, r0
    f192:	4b0b      	ldr	r3, [pc, #44]	; (f1c0 <SwTimerRunRemainingTime+0x34>)
    f194:	681c      	ldr	r4, [r3, #0]
    f196:	0122      	lsls	r2, r4, #4
    f198:	4b0a      	ldr	r3, [pc, #40]	; (f1c4 <SwTimerRunRemainingTime+0x38>)
    f19a:	189b      	adds	r3, r3, r2
    f19c:	685e      	ldr	r6, [r3, #4]
    f19e:	689f      	ldr	r7, [r3, #8]
    f1a0:	b2e4      	uxtb	r4, r4
    f1a2:	0020      	movs	r0, r4
    f1a4:	4b08      	ldr	r3, [pc, #32]	; (f1c8 <SwTimerRunRemainingTime+0x3c>)
    f1a6:	4798      	blx	r3
    f1a8:	2808      	cmp	r0, #8
    f1aa:	d001      	beq.n	f1b0 <SwTimerRunRemainingTime+0x24>
    f1ac:	b003      	add	sp, #12
    f1ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f1b0:	9700      	str	r7, [sp, #0]
    f1b2:	0033      	movs	r3, r6
    f1b4:	2200      	movs	r2, #0
    f1b6:	0029      	movs	r1, r5
    f1b8:	0020      	movs	r0, r4
    f1ba:	4c04      	ldr	r4, [pc, #16]	; (f1cc <SwTimerRunRemainingTime+0x40>)
    f1bc:	47a0      	blx	r4
    f1be:	e7f5      	b.n	f1ac <SwTimerRunRemainingTime+0x20>
    f1c0:	200010e8 	.word	0x200010e8
    f1c4:	200027e8 	.word	0x200027e8
    f1c8:	0000f029 	.word	0x0000f029
    f1cc:	0000ed11 	.word	0x0000ed11

0000f1d0 <SystemTimerSuspend>:
    f1d0:	b570      	push	{r4, r5, r6, lr}
    f1d2:	4b07      	ldr	r3, [pc, #28]	; (f1f0 <SystemTimerSuspend+0x20>)
    f1d4:	681c      	ldr	r4, [r3, #0]
    f1d6:	4b07      	ldr	r3, [pc, #28]	; (f1f4 <SystemTimerSuspend+0x24>)
    f1d8:	881d      	ldrh	r5, [r3, #0]
    f1da:	042d      	lsls	r5, r5, #16
    f1dc:	4b06      	ldr	r3, [pc, #24]	; (f1f8 <SystemTimerSuspend+0x28>)
    f1de:	4798      	blx	r3
    f1e0:	4b06      	ldr	r3, [pc, #24]	; (f1fc <SystemTimerSuspend+0x2c>)
    f1e2:	4328      	orrs	r0, r5
    f1e4:	6018      	str	r0, [r3, #0]
    f1e6:	605c      	str	r4, [r3, #4]
    f1e8:	4b05      	ldr	r3, [pc, #20]	; (f200 <SystemTimerSuspend+0x30>)
    f1ea:	4798      	blx	r3
    f1ec:	bd70      	pop	{r4, r5, r6, pc}
    f1ee:	46c0      	nop			; (mov r8, r8)
    f1f0:	2000297c 	.word	0x2000297c
    f1f4:	20002978 	.word	0x20002978
    f1f8:	0000fb5d 	.word	0x0000fb5d
    f1fc:	200010f0 	.word	0x200010f0
    f200:	0000fbe9 	.word	0x0000fbe9

0000f204 <SystemTimerSync>:
    f204:	b570      	push	{r4, r5, r6, lr}
    f206:	4b22      	ldr	r3, [pc, #136]	; (f290 <SystemTimerSync+0x8c>)
    f208:	681c      	ldr	r4, [r3, #0]
    f20a:	685d      	ldr	r5, [r3, #4]
    f20c:	1900      	adds	r0, r0, r4
    f20e:	4169      	adcs	r1, r5
    f210:	6018      	str	r0, [r3, #0]
    f212:	6059      	str	r1, [r3, #4]
    f214:	4b1f      	ldr	r3, [pc, #124]	; (f294 <SystemTimerSync+0x90>)
    f216:	6019      	str	r1, [r3, #0]
    f218:	0c02      	lsrs	r2, r0, #16
    f21a:	4b1f      	ldr	r3, [pc, #124]	; (f298 <SystemTimerSync+0x94>)
    f21c:	801a      	strh	r2, [r3, #0]
    f21e:	b280      	uxth	r0, r0
    f220:	4b1e      	ldr	r3, [pc, #120]	; (f29c <SystemTimerSync+0x98>)
    f222:	781b      	ldrb	r3, [r3, #0]
    f224:	4a1e      	ldr	r2, [pc, #120]	; (f2a0 <SystemTimerSync+0x9c>)
    f226:	7812      	ldrb	r2, [r2, #0]
    f228:	2a00      	cmp	r2, #0
    f22a:	d012      	beq.n	f252 <SystemTimerSync+0x4e>
    f22c:	2200      	movs	r2, #0
    f22e:	4c1d      	ldr	r4, [pc, #116]	; (f2a4 <SystemTimerSync+0xa0>)
    f230:	4d1b      	ldr	r5, [pc, #108]	; (f2a0 <SystemTimerSync+0x9c>)
    f232:	e005      	b.n	f240 <SystemTimerSync+0x3c>
    f234:	3201      	adds	r2, #1
    f236:	b2d2      	uxtb	r2, r2
    f238:	7829      	ldrb	r1, [r5, #0]
    f23a:	b2c9      	uxtb	r1, r1
    f23c:	4291      	cmp	r1, r2
    f23e:	d908      	bls.n	f252 <SystemTimerSync+0x4e>
    f240:	2bff      	cmp	r3, #255	; 0xff
    f242:	d0f7      	beq.n	f234 <SystemTimerSync+0x30>
    f244:	011b      	lsls	r3, r3, #4
    f246:	5919      	ldr	r1, [r3, r4]
    f248:	1a09      	subs	r1, r1, r0
    f24a:	5119      	str	r1, [r3, r4]
    f24c:	18e3      	adds	r3, r4, r3
    f24e:	7b1b      	ldrb	r3, [r3, #12]
    f250:	e7f0      	b.n	f234 <SystemTimerSync+0x30>
    f252:	4b15      	ldr	r3, [pc, #84]	; (f2a8 <SystemTimerSync+0xa4>)
    f254:	4798      	blx	r3
    f256:	4815      	ldr	r0, [pc, #84]	; (f2ac <SystemTimerSync+0xa8>)
    f258:	4b15      	ldr	r3, [pc, #84]	; (f2b0 <SystemTimerSync+0xac>)
    f25a:	4798      	blx	r3
    f25c:	4815      	ldr	r0, [pc, #84]	; (f2b4 <SystemTimerSync+0xb0>)
    f25e:	4b16      	ldr	r3, [pc, #88]	; (f2b8 <SystemTimerSync+0xb4>)
    f260:	4798      	blx	r3
    f262:	4b0f      	ldr	r3, [pc, #60]	; (f2a0 <SystemTimerSync+0x9c>)
    f264:	781b      	ldrb	r3, [r3, #0]
    f266:	2b00      	cmp	r3, #0
    f268:	d009      	beq.n	f27e <SystemTimerSync+0x7a>
    f26a:	4b0c      	ldr	r3, [pc, #48]	; (f29c <SystemTimerSync+0x98>)
    f26c:	681b      	ldr	r3, [r3, #0]
    f26e:	2bff      	cmp	r3, #255	; 0xff
    f270:	d005      	beq.n	f27e <SystemTimerSync+0x7a>
    f272:	4b12      	ldr	r3, [pc, #72]	; (f2bc <SystemTimerSync+0xb8>)
    f274:	4798      	blx	r3
    f276:	28fe      	cmp	r0, #254	; 0xfe
    f278:	d902      	bls.n	f280 <SystemTimerSync+0x7c>
    f27a:	4b11      	ldr	r3, [pc, #68]	; (f2c0 <SystemTimerSync+0xbc>)
    f27c:	4798      	blx	r3
    f27e:	bd70      	pop	{r4, r5, r6, pc}
    f280:	2201      	movs	r2, #1
    f282:	4b10      	ldr	r3, [pc, #64]	; (f2c4 <SystemTimerSync+0xc0>)
    f284:	701a      	strb	r2, [r3, #0]
    f286:	2001      	movs	r0, #1
    f288:	4b0f      	ldr	r3, [pc, #60]	; (f2c8 <SystemTimerSync+0xc4>)
    f28a:	4798      	blx	r3
    f28c:	e7f7      	b.n	f27e <SystemTimerSync+0x7a>
    f28e:	46c0      	nop			; (mov r8, r8)
    f290:	200010f0 	.word	0x200010f0
    f294:	2000297c 	.word	0x2000297c
    f298:	20002978 	.word	0x20002978
    f29c:	200010e8 	.word	0x200010e8
    f2a0:	200010ec 	.word	0x200010ec
    f2a4:	200027e8 	.word	0x200027e8
    f2a8:	0000fc71 	.word	0x0000fc71
    f2ac:	0000ea3d 	.word	0x0000ea3d
    f2b0:	0000fcf5 	.word	0x0000fcf5
    f2b4:	0000ea15 	.word	0x0000ea15
    f2b8:	0000fd01 	.word	0x0000fd01
    f2bc:	0000ef0d 	.word	0x0000ef0d
    f2c0:	0000f18d 	.word	0x0000f18d
    f2c4:	2000297a 	.word	0x2000297a
    f2c8:	0000f3a5 	.word	0x0000f3a5

0000f2cc <SwTimerTimestampCreate>:
    f2cc:	b510      	push	{r4, lr}
    f2ce:	0004      	movs	r4, r0
    f2d0:	4b08      	ldr	r3, [pc, #32]	; (f2f4 <SwTimerTimestampCreate+0x28>)
    f2d2:	781b      	ldrb	r3, [r3, #0]
    f2d4:	2014      	movs	r0, #20
    f2d6:	2b01      	cmp	r3, #1
    f2d8:	d900      	bls.n	f2dc <SwTimerTimestampCreate+0x10>
    f2da:	bd10      	pop	{r4, pc}
    f2dc:	4b06      	ldr	r3, [pc, #24]	; (f2f8 <SwTimerTimestampCreate+0x2c>)
    f2de:	4798      	blx	r3
    f2e0:	4a04      	ldr	r2, [pc, #16]	; (f2f4 <SwTimerTimestampCreate+0x28>)
    f2e2:	7813      	ldrb	r3, [r2, #0]
    f2e4:	7023      	strb	r3, [r4, #0]
    f2e6:	3301      	adds	r3, #1
    f2e8:	7013      	strb	r3, [r2, #0]
    f2ea:	4b04      	ldr	r3, [pc, #16]	; (f2fc <SwTimerTimestampCreate+0x30>)
    f2ec:	4798      	blx	r3
    f2ee:	2008      	movs	r0, #8
    f2f0:	e7f3      	b.n	f2da <SwTimerTimestampCreate+0xe>
    f2f2:	46c0      	nop			; (mov r8, r8)
    f2f4:	200010dd 	.word	0x200010dd
    f2f8:	000082b9 	.word	0x000082b9
    f2fc:	000082c5 	.word	0x000082c5

0000f300 <SwTimerReadTimestamp>:
    f300:	00c3      	lsls	r3, r0, #3
    f302:	4803      	ldr	r0, [pc, #12]	; (f310 <SwTimerReadTimestamp+0x10>)
    f304:	18c0      	adds	r0, r0, r3
    f306:	6802      	ldr	r2, [r0, #0]
    f308:	6843      	ldr	r3, [r0, #4]
    f30a:	600a      	str	r2, [r1, #0]
    f30c:	604b      	str	r3, [r1, #4]
    f30e:	4770      	bx	lr
    f310:	200027d8 	.word	0x200027d8

0000f314 <SwTimerWriteTimestamp>:
    f314:	680a      	ldr	r2, [r1, #0]
    f316:	684b      	ldr	r3, [r1, #4]
    f318:	00c1      	lsls	r1, r0, #3
    f31a:	4802      	ldr	r0, [pc, #8]	; (f324 <SwTimerWriteTimestamp+0x10>)
    f31c:	1840      	adds	r0, r0, r1
    f31e:	6002      	str	r2, [r0, #0]
    f320:	6043      	str	r3, [r0, #4]
    f322:	4770      	bx	lr
    f324:	200027d8 	.word	0x200027d8

0000f328 <Stack_Init>:
    f328:	b510      	push	{r4, lr}
    f32a:	2010      	movs	r0, #16
    f32c:	4b01      	ldr	r3, [pc, #4]	; (f334 <Stack_Init+0xc>)
    f32e:	4798      	blx	r3
    f330:	bd10      	pop	{r4, pc}
    f332:	46c0      	nop			; (mov r8, r8)
    f334:	0000f3a5 	.word	0x0000f3a5

0000f338 <SYSTEM_RunTasks>:
    f338:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    f33a:	4b16      	ldr	r3, [pc, #88]	; (f394 <SYSTEM_RunTasks+0x5c>)
    f33c:	881b      	ldrh	r3, [r3, #0]
    f33e:	b29b      	uxth	r3, r3
    f340:	2b1f      	cmp	r3, #31
    f342:	d922      	bls.n	f38a <SYSTEM_RunTasks+0x52>
    f344:	e7fe      	b.n	f344 <SYSTEM_RunTasks+0xc>
    f346:	2500      	movs	r5, #0
    f348:	4b13      	ldr	r3, [pc, #76]	; (f398 <SYSTEM_RunTasks+0x60>)
    f34a:	4798      	blx	r3
    f34c:	4911      	ldr	r1, [pc, #68]	; (f394 <SYSTEM_RunTasks+0x5c>)
    f34e:	880b      	ldrh	r3, [r1, #0]
    f350:	2201      	movs	r2, #1
    f352:	40aa      	lsls	r2, r5
    f354:	4393      	bics	r3, r2
    f356:	800b      	strh	r3, [r1, #0]
    f358:	4b10      	ldr	r3, [pc, #64]	; (f39c <SYSTEM_RunTasks+0x64>)
    f35a:	4798      	blx	r3
    f35c:	00ad      	lsls	r5, r5, #2
    f35e:	4b10      	ldr	r3, [pc, #64]	; (f3a0 <SYSTEM_RunTasks+0x68>)
    f360:	58eb      	ldr	r3, [r5, r3]
    f362:	4798      	blx	r3
    f364:	2101      	movs	r1, #1
    f366:	883b      	ldrh	r3, [r7, #0]
    f368:	b29b      	uxth	r3, r3
    f36a:	2b00      	cmp	r3, #0
    f36c:	d011      	beq.n	f392 <SYSTEM_RunTasks+0x5a>
    f36e:	8823      	ldrh	r3, [r4, #0]
    f370:	420b      	tst	r3, r1
    f372:	d1e8      	bne.n	f346 <SYSTEM_RunTasks+0xe>
    f374:	2201      	movs	r2, #1
    f376:	8833      	ldrh	r3, [r6, #0]
    f378:	b29b      	uxth	r3, r3
    f37a:	0015      	movs	r5, r2
    f37c:	4113      	asrs	r3, r2
    f37e:	4219      	tst	r1, r3
    f380:	d1e2      	bne.n	f348 <SYSTEM_RunTasks+0x10>
    f382:	3201      	adds	r2, #1
    f384:	2a05      	cmp	r2, #5
    f386:	d1f6      	bne.n	f376 <SYSTEM_RunTasks+0x3e>
    f388:	e7ed      	b.n	f366 <SYSTEM_RunTasks+0x2e>
    f38a:	4f02      	ldr	r7, [pc, #8]	; (f394 <SYSTEM_RunTasks+0x5c>)
    f38c:	003c      	movs	r4, r7
    f38e:	003e      	movs	r6, r7
    f390:	e7e8      	b.n	f364 <SYSTEM_RunTasks+0x2c>
    f392:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    f394:	200010f8 	.word	0x200010f8
    f398:	000082b9 	.word	0x000082b9
    f39c:	000082c5 	.word	0x000082c5
    f3a0:	00020128 	.word	0x00020128

0000f3a4 <SYSTEM_PostTask>:
    f3a4:	b510      	push	{r4, lr}
    f3a6:	0004      	movs	r4, r0
    f3a8:	4b04      	ldr	r3, [pc, #16]	; (f3bc <SYSTEM_PostTask+0x18>)
    f3aa:	4798      	blx	r3
    f3ac:	4b04      	ldr	r3, [pc, #16]	; (f3c0 <SYSTEM_PostTask+0x1c>)
    f3ae:	8818      	ldrh	r0, [r3, #0]
    f3b0:	4320      	orrs	r0, r4
    f3b2:	8018      	strh	r0, [r3, #0]
    f3b4:	4b03      	ldr	r3, [pc, #12]	; (f3c4 <SYSTEM_PostTask+0x20>)
    f3b6:	4798      	blx	r3
    f3b8:	bd10      	pop	{r4, pc}
    f3ba:	46c0      	nop			; (mov r8, r8)
    f3bc:	000082b9 	.word	0x000082b9
    f3c0:	200010f8 	.word	0x200010f8
    f3c4:	000082c5 	.word	0x000082c5

0000f3c8 <SYSTEM_ReadyToSleep>:
    f3c8:	4b03      	ldr	r3, [pc, #12]	; (f3d8 <SYSTEM_ReadyToSleep+0x10>)
    f3ca:	8818      	ldrh	r0, [r3, #0]
    f3cc:	b280      	uxth	r0, r0
    f3ce:	4243      	negs	r3, r0
    f3d0:	4158      	adcs	r0, r3
    f3d2:	b2c0      	uxtb	r0, r0
    f3d4:	4770      	bx	lr
    f3d6:	46c0      	nop			; (mov r8, r8)
    f3d8:	200010f8 	.word	0x200010f8

0000f3dc <Radio_WriteMode>:
    f3dc:	b5f0      	push	{r4, r5, r6, r7, lr}
    f3de:	46d6      	mov	lr, sl
    f3e0:	464f      	mov	r7, r9
    f3e2:	b580      	push	{r7, lr}
    f3e4:	b083      	sub	sp, #12
    f3e6:	9201      	str	r2, [sp, #4]
    f3e8:	2900      	cmp	r1, #0
    f3ea:	d102      	bne.n	f3f2 <Radio_WriteMode+0x16>
    f3ec:	1f83      	subs	r3, r0, #6
    f3ee:	2b01      	cmp	r3, #1
    f3f0:	d92a      	bls.n	f448 <Radio_WriteMode+0x6c>
    f3f2:	2307      	movs	r3, #7
    f3f4:	4699      	mov	r9, r3
    f3f6:	001c      	movs	r4, r3
    f3f8:	4004      	ands	r4, r0
    f3fa:	2601      	movs	r6, #1
    f3fc:	400e      	ands	r6, r1
    f3fe:	2001      	movs	r0, #1
    f400:	4b2b      	ldr	r3, [pc, #172]	; (f4b0 <Radio_WriteMode+0xd4>)
    f402:	4798      	blx	r3
    f404:	0005      	movs	r5, r0
    f406:	0007      	movs	r7, r0
    f408:	b243      	sxtb	r3, r0
    f40a:	469a      	mov	sl, r3
    f40c:	464b      	mov	r3, r9
    f40e:	4003      	ands	r3, r0
    f410:	4652      	mov	r2, sl
    f412:	0fd2      	lsrs	r2, r2, #31
    f414:	4296      	cmp	r6, r2
    f416:	d00a      	beq.n	f42e <Radio_WriteMode+0x52>
    f418:	2b00      	cmp	r3, #0
    f41a:	d11a      	bne.n	f452 <Radio_WriteMode+0x76>
    f41c:	2e00      	cmp	r6, #0
    f41e:	d11e      	bne.n	f45e <Radio_WriteMode+0x82>
    f420:	2778      	movs	r7, #120	; 0x78
    f422:	402f      	ands	r7, r5
    f424:	0039      	movs	r1, r7
    f426:	2001      	movs	r0, #1
    f428:	4b22      	ldr	r3, [pc, #136]	; (f4b4 <Radio_WriteMode+0xd8>)
    f42a:	4798      	blx	r3
    f42c:	2300      	movs	r3, #0
    f42e:	42a3      	cmp	r3, r4
    f430:	d00a      	beq.n	f448 <Radio_WriteMode+0x6c>
    f432:	2c00      	cmp	r4, #0
    f434:	d030      	beq.n	f498 <Radio_WriteMode+0xbc>
    f436:	9b01      	ldr	r3, [sp, #4]
    f438:	2b01      	cmp	r3, #1
    f43a:	d016      	beq.n	f46a <Radio_WriteMode+0x8e>
    f43c:	21f8      	movs	r1, #248	; 0xf8
    f43e:	4039      	ands	r1, r7
    f440:	4321      	orrs	r1, r4
    f442:	2001      	movs	r0, #1
    f444:	4b1b      	ldr	r3, [pc, #108]	; (f4b4 <Radio_WriteMode+0xd8>)
    f446:	4798      	blx	r3
    f448:	b003      	add	sp, #12
    f44a:	bc0c      	pop	{r2, r3}
    f44c:	4691      	mov	r9, r2
    f44e:	469a      	mov	sl, r3
    f450:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f452:	21f8      	movs	r1, #248	; 0xf8
    f454:	4001      	ands	r1, r0
    f456:	2001      	movs	r0, #1
    f458:	4b16      	ldr	r3, [pc, #88]	; (f4b4 <Radio_WriteMode+0xd8>)
    f45a:	4798      	blx	r3
    f45c:	e7de      	b.n	f41c <Radio_WriteMode+0x40>
    f45e:	2778      	movs	r7, #120	; 0x78
    f460:	4653      	mov	r3, sl
    f462:	401f      	ands	r7, r3
    f464:	2180      	movs	r1, #128	; 0x80
    f466:	430f      	orrs	r7, r1
    f468:	e7dc      	b.n	f424 <Radio_WriteMode+0x48>
    f46a:	2041      	movs	r0, #65	; 0x41
    f46c:	4b10      	ldr	r3, [pc, #64]	; (f4b0 <Radio_WriteMode+0xd4>)
    f46e:	4798      	blx	r3
    f470:	2e00      	cmp	r6, #0
    f472:	d10e      	bne.n	f492 <Radio_WriteMode+0xb6>
    f474:	2130      	movs	r1, #48	; 0x30
    f476:	4301      	orrs	r1, r0
    f478:	b2c9      	uxtb	r1, r1
    f47a:	2041      	movs	r0, #65	; 0x41
    f47c:	4d0d      	ldr	r5, [pc, #52]	; (f4b4 <Radio_WriteMode+0xd8>)
    f47e:	47a8      	blx	r5
    f480:	21f8      	movs	r1, #248	; 0xf8
    f482:	4039      	ands	r1, r7
    f484:	4321      	orrs	r1, r4
    f486:	2001      	movs	r0, #1
    f488:	47a8      	blx	r5
    f48a:	2001      	movs	r0, #1
    f48c:	4b0a      	ldr	r3, [pc, #40]	; (f4b8 <Radio_WriteMode+0xdc>)
    f48e:	4798      	blx	r3
    f490:	e7da      	b.n	f448 <Radio_WriteMode+0x6c>
    f492:	21cf      	movs	r1, #207	; 0xcf
    f494:	4001      	ands	r1, r0
    f496:	e7f0      	b.n	f47a <Radio_WriteMode+0x9e>
    f498:	21f8      	movs	r1, #248	; 0xf8
    f49a:	4039      	ands	r1, r7
    f49c:	2001      	movs	r0, #1
    f49e:	4b05      	ldr	r3, [pc, #20]	; (f4b4 <Radio_WriteMode+0xd8>)
    f4a0:	4798      	blx	r3
    f4a2:	9b01      	ldr	r3, [sp, #4]
    f4a4:	2b01      	cmp	r3, #1
    f4a6:	d1cf      	bne.n	f448 <Radio_WriteMode+0x6c>
    f4a8:	2001      	movs	r0, #1
    f4aa:	4b04      	ldr	r3, [pc, #16]	; (f4bc <Radio_WriteMode+0xe0>)
    f4ac:	4798      	blx	r3
    f4ae:	e7cb      	b.n	f448 <Radio_WriteMode+0x6c>
    f4b0:	00008031 	.word	0x00008031
    f4b4:	00008009 	.word	0x00008009
    f4b8:	00004505 	.word	0x00004505
    f4bc:	00008265 	.word	0x00008265

0000f4c0 <RADIO_FHSSChangeChannel>:
    f4c0:	b500      	push	{lr}
    f4c2:	b083      	sub	sp, #12
    f4c4:	2012      	movs	r0, #18
    f4c6:	4b0d      	ldr	r3, [pc, #52]	; (f4fc <RADIO_FHSSChangeChannel+0x3c>)
    f4c8:	4798      	blx	r3
    f4ca:	4b0d      	ldr	r3, [pc, #52]	; (f500 <RADIO_FHSSChangeChannel+0x40>)
    f4cc:	8adb      	ldrh	r3, [r3, #22]
    f4ce:	2b00      	cmp	r3, #0
    f4d0:	d007      	beq.n	f4e2 <RADIO_FHSSChangeChannel+0x22>
    f4d2:	4b0b      	ldr	r3, [pc, #44]	; (f500 <RADIO_FHSSChangeChannel+0x40>)
    f4d4:	691b      	ldr	r3, [r3, #16]
    f4d6:	2b00      	cmp	r3, #0
    f4d8:	d003      	beq.n	f4e2 <RADIO_FHSSChangeChannel+0x22>
    f4da:	4a0a      	ldr	r2, [pc, #40]	; (f504 <RADIO_FHSSChangeChannel+0x44>)
    f4dc:	7812      	ldrb	r2, [r2, #0]
    f4de:	0692      	lsls	r2, r2, #26
    f4e0:	d405      	bmi.n	f4ee <RADIO_FHSSChangeChannel+0x2e>
    f4e2:	2102      	movs	r1, #2
    f4e4:	2012      	movs	r0, #18
    f4e6:	4b08      	ldr	r3, [pc, #32]	; (f508 <RADIO_FHSSChangeChannel+0x48>)
    f4e8:	4798      	blx	r3
    f4ea:	b003      	add	sp, #12
    f4ec:	bd00      	pop	{pc}
    f4ee:	a901      	add	r1, sp, #4
    f4f0:	2020      	movs	r0, #32
    f4f2:	4798      	blx	r3
    f4f4:	9801      	ldr	r0, [sp, #4]
    f4f6:	4b05      	ldr	r3, [pc, #20]	; (f50c <RADIO_FHSSChangeChannel+0x4c>)
    f4f8:	4798      	blx	r3
    f4fa:	e7f2      	b.n	f4e2 <RADIO_FHSSChangeChannel+0x22>
    f4fc:	00008031 	.word	0x00008031
    f500:	20002980 	.word	0x20002980
    f504:	20002fbe 	.word	0x20002fbe
    f508:	00008009 	.word	0x00008009
    f50c:	00014e29 	.word	0x00014e29

0000f510 <RADIO_ReadRandom>:
    f510:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    f512:	2000      	movs	r0, #0
    f514:	4b1a      	ldr	r3, [pc, #104]	; (f580 <RADIO_ReadRandom+0x70>)
    f516:	4798      	blx	r3
    f518:	4b1a      	ldr	r3, [pc, #104]	; (f584 <RADIO_ReadRandom+0x74>)
    f51a:	4798      	blx	r3
    f51c:	2201      	movs	r2, #1
    f51e:	2101      	movs	r1, #1
    f520:	2000      	movs	r0, #0
    f522:	4c19      	ldr	r4, [pc, #100]	; (f588 <RADIO_ReadRandom+0x78>)
    f524:	47a0      	blx	r4
    f526:	21ff      	movs	r1, #255	; 0xff
    f528:	2011      	movs	r0, #17
    f52a:	4b18      	ldr	r3, [pc, #96]	; (f58c <RADIO_ReadRandom+0x7c>)
    f52c:	4798      	blx	r3
    f52e:	2201      	movs	r2, #1
    f530:	2101      	movs	r1, #1
    f532:	2005      	movs	r0, #5
    f534:	47a0      	blx	r4
    f536:	2410      	movs	r4, #16
    f538:	2500      	movs	r5, #0
    f53a:	4f15      	ldr	r7, [pc, #84]	; (f590 <RADIO_ReadRandom+0x80>)
    f53c:	4e15      	ldr	r6, [pc, #84]	; (f594 <RADIO_ReadRandom+0x84>)
    f53e:	2001      	movs	r0, #1
    f540:	47b8      	blx	r7
    f542:	202c      	movs	r0, #44	; 0x2c
    f544:	47b0      	blx	r6
    f546:	2301      	movs	r3, #1
    f548:	4018      	ands	r0, r3
    f54a:	006d      	lsls	r5, r5, #1
    f54c:	4305      	orrs	r5, r0
    f54e:	b2ad      	uxth	r5, r5
    f550:	3c01      	subs	r4, #1
    f552:	b2e4      	uxtb	r4, r4
    f554:	2c00      	cmp	r4, #0
    f556:	d1f2      	bne.n	f53e <RADIO_ReadRandom+0x2e>
    f558:	2000      	movs	r0, #0
    f55a:	4b0f      	ldr	r3, [pc, #60]	; (f598 <RADIO_ReadRandom+0x88>)
    f55c:	4798      	blx	r3
    f55e:	2201      	movs	r2, #1
    f560:	2101      	movs	r1, #1
    f562:	2000      	movs	r0, #0
    f564:	4b08      	ldr	r3, [pc, #32]	; (f588 <RADIO_ReadRandom+0x78>)
    f566:	4798      	blx	r3
    f568:	21ff      	movs	r1, #255	; 0xff
    f56a:	2012      	movs	r0, #18
    f56c:	4c07      	ldr	r4, [pc, #28]	; (f58c <RADIO_ReadRandom+0x7c>)
    f56e:	47a0      	blx	r4
    f570:	2100      	movs	r1, #0
    f572:	2011      	movs	r0, #17
    f574:	47a0      	blx	r4
    f576:	4b09      	ldr	r3, [pc, #36]	; (f59c <RADIO_ReadRandom+0x8c>)
    f578:	4798      	blx	r3
    f57a:	0028      	movs	r0, r5
    f57c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    f57e:	46c0      	nop			; (mov r8, r8)
    f580:	000156e5 	.word	0x000156e5
    f584:	00015b95 	.word	0x00015b95
    f588:	0000f3dd 	.word	0x0000f3dd
    f58c:	00008009 	.word	0x00008009
    f590:	00008265 	.word	0x00008265
    f594:	00008031 	.word	0x00008031
    f598:	0001580d 	.word	0x0001580d
    f59c:	00015bc9 	.word	0x00015bc9

0000f5a0 <Radio_ReadFSKRssi>:
    f5a0:	b510      	push	{r4, lr}
    f5a2:	0004      	movs	r4, r0
    f5a4:	2011      	movs	r0, #17
    f5a6:	4b04      	ldr	r3, [pc, #16]	; (f5b8 <Radio_ReadFSKRssi+0x18>)
    f5a8:	4798      	blx	r3
    f5aa:	0840      	lsrs	r0, r0, #1
    f5ac:	b2c0      	uxtb	r0, r0
    f5ae:	4240      	negs	r0, r0
    f5b0:	8020      	strh	r0, [r4, #0]
    f5b2:	2000      	movs	r0, #0
    f5b4:	bd10      	pop	{r4, pc}
    f5b6:	46c0      	nop			; (mov r8, r8)
    f5b8:	00008031 	.word	0x00008031

0000f5bc <tc_cca_callback>:
    f5bc:	b510      	push	{r4, lr}
    f5be:	4b01      	ldr	r3, [pc, #4]	; (f5c4 <tc_cca_callback+0x8>)
    f5c0:	4798      	blx	r3
    f5c2:	bd10      	pop	{r4, pc}
    f5c4:	0000fcd9 	.word	0x0000fcd9

0000f5c8 <tc_ovf_callback>:
    f5c8:	b510      	push	{r4, lr}
    f5ca:	4b01      	ldr	r3, [pc, #4]	; (f5d0 <tc_ovf_callback+0x8>)
    f5cc:	4798      	blx	r3
    f5ce:	bd10      	pop	{r4, pc}
    f5d0:	0000fc91 	.word	0x0000fc91

0000f5d4 <tmr_read_count>:
    f5d4:	b510      	push	{r4, lr}
    f5d6:	4802      	ldr	r0, [pc, #8]	; (f5e0 <tmr_read_count+0xc>)
    f5d8:	4b02      	ldr	r3, [pc, #8]	; (f5e4 <tmr_read_count+0x10>)
    f5da:	4798      	blx	r3
    f5dc:	b280      	uxth	r0, r0
    f5de:	bd10      	pop	{r4, pc}
    f5e0:	20002a14 	.word	0x20002a14
    f5e4:	0000774d 	.word	0x0000774d

0000f5e8 <tmr_disable_cc_interrupt>:
    f5e8:	4b03      	ldr	r3, [pc, #12]	; (f5f8 <tmr_disable_cc_interrupt+0x10>)
    f5ea:	2110      	movs	r1, #16
    f5ec:	681a      	ldr	r2, [r3, #0]
    f5ee:	7211      	strb	r1, [r2, #8]
    f5f0:	7e5a      	ldrb	r2, [r3, #25]
    f5f2:	438a      	bics	r2, r1
    f5f4:	765a      	strb	r2, [r3, #25]
    f5f6:	4770      	bx	lr
    f5f8:	20002a14 	.word	0x20002a14

0000f5fc <tmr_enable_cc_interrupt>:
    f5fc:	b570      	push	{r4, r5, r6, lr}
    f5fe:	4c0b      	ldr	r4, [pc, #44]	; (f62c <tmr_enable_cc_interrupt+0x30>)
    f600:	2510      	movs	r5, #16
    f602:	6823      	ldr	r3, [r4, #0]
    f604:	729d      	strb	r5, [r3, #10]
    f606:	0018      	movs	r0, r3
    f608:	4b09      	ldr	r3, [pc, #36]	; (f630 <tmr_enable_cc_interrupt+0x34>)
    f60a:	4798      	blx	r3
    f60c:	4b09      	ldr	r3, [pc, #36]	; (f634 <tmr_enable_cc_interrupt+0x38>)
    f60e:	5c1b      	ldrb	r3, [r3, r0]
    f610:	221f      	movs	r2, #31
    f612:	401a      	ands	r2, r3
    f614:	2301      	movs	r3, #1
    f616:	4093      	lsls	r3, r2
    f618:	4a07      	ldr	r2, [pc, #28]	; (f638 <tmr_enable_cc_interrupt+0x3c>)
    f61a:	6013      	str	r3, [r2, #0]
    f61c:	7e63      	ldrb	r3, [r4, #25]
    f61e:	2210      	movs	r2, #16
    f620:	4313      	orrs	r3, r2
    f622:	7663      	strb	r3, [r4, #25]
    f624:	6823      	ldr	r3, [r4, #0]
    f626:	725d      	strb	r5, [r3, #9]
    f628:	bd70      	pop	{r4, r5, r6, pc}
    f62a:	46c0      	nop			; (mov r8, r8)
    f62c:	20002a14 	.word	0x20002a14
    f630:	00007421 	.word	0x00007421
    f634:	0002013c 	.word	0x0002013c
    f638:	e000e100 	.word	0xe000e100

0000f63c <tmr_disable_ovf_interrupt>:
    f63c:	4b03      	ldr	r3, [pc, #12]	; (f64c <tmr_disable_ovf_interrupt+0x10>)
    f63e:	2101      	movs	r1, #1
    f640:	681a      	ldr	r2, [r3, #0]
    f642:	7211      	strb	r1, [r2, #8]
    f644:	7e5a      	ldrb	r2, [r3, #25]
    f646:	438a      	bics	r2, r1
    f648:	765a      	strb	r2, [r3, #25]
    f64a:	4770      	bx	lr
    f64c:	20002a14 	.word	0x20002a14

0000f650 <tmr_stop>:
    f650:	4b06      	ldr	r3, [pc, #24]	; (f66c <tmr_stop+0x1c>)
    f652:	681a      	ldr	r2, [r3, #0]
    f654:	6913      	ldr	r3, [r2, #16]
    f656:	2b00      	cmp	r3, #0
    f658:	d1fc      	bne.n	f654 <tmr_stop+0x4>
    f65a:	3333      	adds	r3, #51	; 0x33
    f65c:	7213      	strb	r3, [r2, #8]
    f65e:	7293      	strb	r3, [r2, #10]
    f660:	6813      	ldr	r3, [r2, #0]
    f662:	2102      	movs	r1, #2
    f664:	438b      	bics	r3, r1
    f666:	6013      	str	r3, [r2, #0]
    f668:	4770      	bx	lr
    f66a:	46c0      	nop			; (mov r8, r8)
    f66c:	20002a14 	.word	0x20002a14

0000f670 <tmr_write_cmpreg>:
    f670:	b510      	push	{r4, lr}
    f672:	0002      	movs	r2, r0
    f674:	2100      	movs	r1, #0
    f676:	4802      	ldr	r0, [pc, #8]	; (f680 <tmr_write_cmpreg+0x10>)
    f678:	4b02      	ldr	r3, [pc, #8]	; (f684 <tmr_write_cmpreg+0x14>)
    f67a:	4798      	blx	r3
    f67c:	bd10      	pop	{r4, pc}
    f67e:	46c0      	nop			; (mov r8, r8)
    f680:	20002a14 	.word	0x20002a14
    f684:	0000778d 	.word	0x0000778d

0000f688 <save_cpu_interrupt>:
    f688:	b082      	sub	sp, #8
    f68a:	f3ef 8310 	mrs	r3, PRIMASK
    f68e:	425a      	negs	r2, r3
    f690:	4153      	adcs	r3, r2
    f692:	9301      	str	r3, [sp, #4]
    f694:	b672      	cpsid	i
    f696:	f3bf 8f5f 	dmb	sy
    f69a:	2200      	movs	r2, #0
    f69c:	4b02      	ldr	r3, [pc, #8]	; (f6a8 <save_cpu_interrupt+0x20>)
    f69e:	701a      	strb	r2, [r3, #0]
    f6a0:	9801      	ldr	r0, [sp, #4]
    f6a2:	b2c0      	uxtb	r0, r0
    f6a4:	b002      	add	sp, #8
    f6a6:	4770      	bx	lr
    f6a8:	20000014 	.word	0x20000014

0000f6ac <restore_cpu_interrupt>:
    f6ac:	2800      	cmp	r0, #0
    f6ae:	d005      	beq.n	f6bc <restore_cpu_interrupt+0x10>
    f6b0:	2201      	movs	r2, #1
    f6b2:	4b03      	ldr	r3, [pc, #12]	; (f6c0 <restore_cpu_interrupt+0x14>)
    f6b4:	701a      	strb	r2, [r3, #0]
    f6b6:	f3bf 8f5f 	dmb	sy
    f6ba:	b662      	cpsie	i
    f6bc:	4770      	bx	lr
    f6be:	46c0      	nop			; (mov r8, r8)
    f6c0:	20000014 	.word	0x20000014

0000f6c4 <tmr_init>:
    f6c4:	b570      	push	{r4, r5, r6, lr}
    f6c6:	4a33      	ldr	r2, [pc, #204]	; (f794 <tmr_init+0xd0>)
    f6c8:	2100      	movs	r1, #0
    f6ca:	2300      	movs	r3, #0
    f6cc:	7011      	strb	r1, [r2, #0]
    f6ce:	70d1      	strb	r1, [r2, #3]
    f6d0:	2000      	movs	r0, #0
    f6d2:	8091      	strh	r1, [r2, #4]
    f6d4:	7190      	strb	r0, [r2, #6]
    f6d6:	71d3      	strb	r3, [r2, #7]
    f6d8:	7053      	strb	r3, [r2, #1]
    f6da:	7093      	strb	r3, [r2, #2]
    f6dc:	7213      	strb	r3, [r2, #8]
    f6de:	7253      	strb	r3, [r2, #9]
    f6e0:	7293      	strb	r3, [r2, #10]
    f6e2:	72d3      	strb	r3, [r2, #11]
    f6e4:	7313      	strb	r3, [r2, #12]
    f6e6:	7393      	strb	r3, [r2, #14]
    f6e8:	7353      	strb	r3, [r2, #13]
    f6ea:	7413      	strb	r3, [r2, #16]
    f6ec:	6151      	str	r1, [r2, #20]
    f6ee:	6191      	str	r1, [r2, #24]
    f6f0:	7713      	strb	r3, [r2, #28]
    f6f2:	6211      	str	r1, [r2, #32]
    f6f4:	6251      	str	r1, [r2, #36]	; 0x24
    f6f6:	8511      	strh	r1, [r2, #40]	; 0x28
    f6f8:	8591      	strh	r1, [r2, #44]	; 0x2c
    f6fa:	2334      	movs	r3, #52	; 0x34
    f6fc:	54d0      	strb	r0, [r2, r3]
    f6fe:	3b35      	subs	r3, #53	; 0x35
    f700:	8553      	strh	r3, [r2, #42]	; 0x2a
    f702:	4c25      	ldr	r4, [pc, #148]	; (f798 <tmr_init+0xd4>)
    f704:	4925      	ldr	r1, [pc, #148]	; (f79c <tmr_init+0xd8>)
    f706:	0020      	movs	r0, r4
    f708:	4b25      	ldr	r3, [pc, #148]	; (f7a0 <tmr_init+0xdc>)
    f70a:	4798      	blx	r3
    f70c:	2200      	movs	r2, #0
    f70e:	4925      	ldr	r1, [pc, #148]	; (f7a4 <tmr_init+0xe0>)
    f710:	0020      	movs	r0, r4
    f712:	4d25      	ldr	r5, [pc, #148]	; (f7a8 <tmr_init+0xe4>)
    f714:	47a8      	blx	r5
    f716:	2202      	movs	r2, #2
    f718:	4924      	ldr	r1, [pc, #144]	; (f7ac <tmr_init+0xe8>)
    f71a:	0020      	movs	r0, r4
    f71c:	47a8      	blx	r5
    f71e:	6820      	ldr	r0, [r4, #0]
    f720:	4b23      	ldr	r3, [pc, #140]	; (f7b0 <tmr_init+0xec>)
    f722:	4798      	blx	r3
    f724:	4b23      	ldr	r3, [pc, #140]	; (f7b4 <tmr_init+0xf0>)
    f726:	5c1a      	ldrb	r2, [r3, r0]
    f728:	231f      	movs	r3, #31
    f72a:	4013      	ands	r3, r2
    f72c:	2101      	movs	r1, #1
    f72e:	000a      	movs	r2, r1
    f730:	409a      	lsls	r2, r3
    f732:	4b21      	ldr	r3, [pc, #132]	; (f7b8 <tmr_init+0xf4>)
    f734:	601a      	str	r2, [r3, #0]
    f736:	7e63      	ldrb	r3, [r4, #25]
    f738:	2201      	movs	r2, #1
    f73a:	4313      	orrs	r3, r2
    f73c:	7663      	strb	r3, [r4, #25]
    f73e:	6822      	ldr	r2, [r4, #0]
    f740:	7251      	strb	r1, [r2, #9]
    f742:	6913      	ldr	r3, [r2, #16]
    f744:	2b00      	cmp	r3, #0
    f746:	d1fc      	bne.n	f742 <tmr_init+0x7e>
    f748:	6813      	ldr	r3, [r2, #0]
    f74a:	2102      	movs	r1, #2
    f74c:	430b      	orrs	r3, r1
    f74e:	6013      	str	r3, [r2, #0]
    f750:	2000      	movs	r0, #0
    f752:	4b1a      	ldr	r3, [pc, #104]	; (f7bc <tmr_init+0xf8>)
    f754:	4798      	blx	r3
    f756:	4d1a      	ldr	r5, [pc, #104]	; (f7c0 <tmr_init+0xfc>)
    f758:	47a8      	blx	r5
    f75a:	491a      	ldr	r1, [pc, #104]	; (f7c4 <tmr_init+0x100>)
    f75c:	4b1a      	ldr	r3, [pc, #104]	; (f7c8 <tmr_init+0x104>)
    f75e:	4798      	blx	r3
    f760:	1c04      	adds	r4, r0, #0
    f762:	4b1a      	ldr	r3, [pc, #104]	; (f7cc <tmr_init+0x108>)
    f764:	4798      	blx	r3
    f766:	47a8      	blx	r5
    f768:	1c01      	adds	r1, r0, #0
    f76a:	1c20      	adds	r0, r4, #0
    f76c:	4b18      	ldr	r3, [pc, #96]	; (f7d0 <tmr_init+0x10c>)
    f76e:	4798      	blx	r3
    f770:	21fc      	movs	r1, #252	; 0xfc
    f772:	0589      	lsls	r1, r1, #22
    f774:	4b17      	ldr	r3, [pc, #92]	; (f7d4 <tmr_init+0x110>)
    f776:	4798      	blx	r3
    f778:	2800      	cmp	r0, #0
    f77a:	d005      	beq.n	f788 <tmr_init+0xc4>
    f77c:	21fe      	movs	r1, #254	; 0xfe
    f77e:	0589      	lsls	r1, r1, #22
    f780:	1c20      	adds	r0, r4, #0
    f782:	4b15      	ldr	r3, [pc, #84]	; (f7d8 <tmr_init+0x114>)
    f784:	4798      	blx	r3
    f786:	1c04      	adds	r4, r0, #0
    f788:	1c20      	adds	r0, r4, #0
    f78a:	4b10      	ldr	r3, [pc, #64]	; (f7cc <tmr_init+0x108>)
    f78c:	4798      	blx	r3
    f78e:	b2c0      	uxtb	r0, r0
    f790:	bd70      	pop	{r4, r5, r6, pc}
    f792:	46c0      	nop			; (mov r8, r8)
    f794:	200029dc 	.word	0x200029dc
    f798:	20002a14 	.word	0x20002a14
    f79c:	42002000 	.word	0x42002000
    f7a0:	0000745d 	.word	0x0000745d
    f7a4:	0000f5c9 	.word	0x0000f5c9
    f7a8:	00007339 	.word	0x00007339
    f7ac:	0000f5bd 	.word	0x0000f5bd
    f7b0:	00007421 	.word	0x00007421
    f7b4:	0002013c 	.word	0x0002013c
    f7b8:	e000e100 	.word	0xe000e100
    f7bc:	000070d1 	.word	0x000070d1
    f7c0:	000179a5 	.word	0x000179a5
    f7c4:	49742400 	.word	0x49742400
    f7c8:	00016f6d 	.word	0x00016f6d
    f7cc:	00016a1d 	.word	0x00016a1d
    f7d0:	0001758d 	.word	0x0001758d
    f7d4:	00016975 	.word	0x00016975
    f7d8:	00016c49 	.word	0x00016c49

0000f7dc <nvm_read>:
    f7dc:	b570      	push	{r4, r5, r6, lr}
    f7de:	2800      	cmp	r0, #0
    f7e0:	d122      	bne.n	f828 <nvm_read+0x4c>
    f7e2:	4814      	ldr	r0, [pc, #80]	; (f834 <nvm_read+0x58>)
    f7e4:	7d04      	ldrb	r4, [r0, #20]
    f7e6:	2005      	movs	r0, #5
    f7e8:	07e4      	lsls	r4, r4, #31
    f7ea:	d400      	bmi.n	f7ee <nvm_read+0x12>
    f7ec:	bd70      	pop	{r4, r5, r6, pc}
    f7ee:	2420      	movs	r4, #32
    f7f0:	34ff      	adds	r4, #255	; 0xff
    f7f2:	4810      	ldr	r0, [pc, #64]	; (f834 <nvm_read+0x58>)
    f7f4:	8304      	strh	r4, [r0, #24]
    f7f6:	2b00      	cmp	r3, #0
    f7f8:	d019      	beq.n	f82e <nvm_read+0x52>
    f7fa:	2001      	movs	r0, #1
    f7fc:	4381      	bics	r1, r0
    f7fe:	2000      	movs	r0, #0
    f800:	2500      	movs	r5, #0
    f802:	1e5e      	subs	r6, r3, #1
    f804:	e005      	b.n	f812 <nvm_read+0x36>
    f806:	3002      	adds	r0, #2
    f808:	b280      	uxth	r0, r0
    f80a:	0005      	movs	r5, r0
    f80c:	3102      	adds	r1, #2
    f80e:	4283      	cmp	r3, r0
    f810:	d908      	bls.n	f824 <nvm_read+0x48>
    f812:	880c      	ldrh	r4, [r1, #0]
    f814:	b2a4      	uxth	r4, r4
    f816:	5554      	strb	r4, [r2, r5]
    f818:	42ae      	cmp	r6, r5
    f81a:	d9f4      	bls.n	f806 <nvm_read+0x2a>
    f81c:	1955      	adds	r5, r2, r5
    f81e:	0a24      	lsrs	r4, r4, #8
    f820:	706c      	strb	r4, [r5, #1]
    f822:	e7f0      	b.n	f806 <nvm_read+0x2a>
    f824:	2000      	movs	r0, #0
    f826:	e7e1      	b.n	f7ec <nvm_read+0x10>
    f828:	2008      	movs	r0, #8
    f82a:	4240      	negs	r0, r0
    f82c:	e7de      	b.n	f7ec <nvm_read+0x10>
    f82e:	2000      	movs	r0, #0
    f830:	e7dc      	b.n	f7ec <nvm_read+0x10>
    f832:	46c0      	nop			; (mov r8, r8)
    f834:	41004000 	.word	0x41004000

0000f838 <nvm_write>:
    f838:	b5f0      	push	{r4, r5, r6, r7, lr}
    f83a:	46de      	mov	lr, fp
    f83c:	4657      	mov	r7, sl
    f83e:	464e      	mov	r6, r9
    f840:	4645      	mov	r5, r8
    f842:	b5e0      	push	{r5, r6, r7, lr}
    f844:	b0c5      	sub	sp, #276	; 0x114
    f846:	2800      	cmp	r0, #0
    f848:	d168      	bne.n	f91c <nvm_write+0xe4>
    f84a:	b29b      	uxth	r3, r3
    f84c:	469a      	mov	sl, r3
    f84e:	4688      	mov	r8, r1
    f850:	23ff      	movs	r3, #255	; 0xff
    f852:	4399      	bics	r1, r3
    f854:	9100      	str	r1, [sp, #0]
    f856:	4653      	mov	r3, sl
    f858:	2b00      	cmp	r3, #0
    f85a:	d06b      	beq.n	f934 <nvm_write+0xfc>
    f85c:	ab04      	add	r3, sp, #16
    f85e:	1a5b      	subs	r3, r3, r1
    f860:	9302      	str	r3, [sp, #8]
    f862:	4e35      	ldr	r6, [pc, #212]	; (f938 <nvm_write+0x100>)
    f864:	4b35      	ldr	r3, [pc, #212]	; (f93c <nvm_write+0x104>)
    f866:	469b      	mov	fp, r3
    f868:	9203      	str	r2, [sp, #12]
    f86a:	e03a      	b.n	f8e2 <nvm_write+0xaa>
    f86c:	3301      	adds	r3, #1
    f86e:	42bb      	cmp	r3, r7
    f870:	d20e      	bcs.n	f890 <nvm_write+0x58>
    f872:	2a00      	cmp	r2, #0
    f874:	d0fa      	beq.n	f86c <nvm_write+0x34>
    f876:	4299      	cmp	r1, r3
    f878:	d1f8      	bne.n	f86c <nvm_write+0x34>
    f87a:	9d03      	ldr	r5, [sp, #12]
    f87c:	7828      	ldrb	r0, [r5, #0]
    f87e:	9c02      	ldr	r4, [sp, #8]
    f880:	54e0      	strb	r0, [r4, r3]
    f882:	3101      	adds	r1, #1
    f884:	3a01      	subs	r2, #1
    f886:	b292      	uxth	r2, r2
    f888:	0028      	movs	r0, r5
    f88a:	3001      	adds	r0, #1
    f88c:	9003      	str	r0, [sp, #12]
    f88e:	e7ed      	b.n	f86c <nvm_write+0x34>
    f890:	4692      	mov	sl, r2
    f892:	4688      	mov	r8, r1
    f894:	9c01      	ldr	r4, [sp, #4]
    f896:	4b2a      	ldr	r3, [pc, #168]	; (f940 <nvm_write+0x108>)
    f898:	4798      	blx	r3
    f89a:	9800      	ldr	r0, [sp, #0]
    f89c:	47d8      	blx	fp
    f89e:	2805      	cmp	r0, #5
    f8a0:	d0fb      	beq.n	f89a <nvm_write+0x62>
    f8a2:	2800      	cmp	r0, #0
    f8a4:	d13d      	bne.n	f922 <nvm_write+0xea>
    f8a6:	9d00      	ldr	r5, [sp, #0]
    f8a8:	4f26      	ldr	r7, [pc, #152]	; (f944 <nvm_write+0x10c>)
    f8aa:	9401      	str	r4, [sp, #4]
    f8ac:	9b00      	ldr	r3, [sp, #0]
    f8ae:	1aec      	subs	r4, r5, r3
    f8b0:	ab04      	add	r3, sp, #16
    f8b2:	469c      	mov	ip, r3
    f8b4:	4464      	add	r4, ip
    f8b6:	2240      	movs	r2, #64	; 0x40
    f8b8:	0021      	movs	r1, r4
    f8ba:	0028      	movs	r0, r5
    f8bc:	47b8      	blx	r7
    f8be:	2805      	cmp	r0, #5
    f8c0:	d0f9      	beq.n	f8b6 <nvm_write+0x7e>
    f8c2:	2800      	cmp	r0, #0
    f8c4:	d12d      	bne.n	f922 <nvm_write+0xea>
    f8c6:	3540      	adds	r5, #64	; 0x40
    f8c8:	9b01      	ldr	r3, [sp, #4]
    f8ca:	42ab      	cmp	r3, r5
    f8cc:	d1ee      	bne.n	f8ac <nvm_write+0x74>
    f8ce:	4b1e      	ldr	r3, [pc, #120]	; (f948 <nvm_write+0x110>)
    f8d0:	4798      	blx	r3
    f8d2:	9b02      	ldr	r3, [sp, #8]
    f8d4:	3b01      	subs	r3, #1
    f8d6:	3bff      	subs	r3, #255	; 0xff
    f8d8:	9302      	str	r3, [sp, #8]
    f8da:	9500      	str	r5, [sp, #0]
    f8dc:	4653      	mov	r3, sl
    f8de:	2b00      	cmp	r3, #0
    f8e0:	d028      	beq.n	f934 <nvm_write+0xfc>
    f8e2:	9b00      	ldr	r3, [sp, #0]
    f8e4:	1c5f      	adds	r7, r3, #1
    f8e6:	37ff      	adds	r7, #255	; 0xff
    f8e8:	001c      	movs	r4, r3
    f8ea:	46b9      	mov	r9, r7
    f8ec:	001f      	movs	r7, r3
    f8ee:	1be5      	subs	r5, r4, r7
    f8f0:	ab04      	add	r3, sp, #16
    f8f2:	469c      	mov	ip, r3
    f8f4:	4465      	add	r5, ip
    f8f6:	2240      	movs	r2, #64	; 0x40
    f8f8:	0029      	movs	r1, r5
    f8fa:	0020      	movs	r0, r4
    f8fc:	47b0      	blx	r6
    f8fe:	2805      	cmp	r0, #5
    f900:	d0f9      	beq.n	f8f6 <nvm_write+0xbe>
    f902:	2800      	cmp	r0, #0
    f904:	d10d      	bne.n	f922 <nvm_write+0xea>
    f906:	3440      	adds	r4, #64	; 0x40
    f908:	454c      	cmp	r4, r9
    f90a:	d1f0      	bne.n	f8ee <nvm_write+0xb6>
    f90c:	464f      	mov	r7, r9
    f90e:	9b00      	ldr	r3, [sp, #0]
    f910:	429f      	cmp	r7, r3
    f912:	d9c0      	bls.n	f896 <nvm_write+0x5e>
    f914:	4652      	mov	r2, sl
    f916:	4641      	mov	r1, r8
    f918:	9401      	str	r4, [sp, #4]
    f91a:	e7aa      	b.n	f872 <nvm_write+0x3a>
    f91c:	2008      	movs	r0, #8
    f91e:	4240      	negs	r0, r0
    f920:	e001      	b.n	f926 <nvm_write+0xee>
    f922:	2008      	movs	r0, #8
    f924:	4240      	negs	r0, r0
    f926:	b045      	add	sp, #276	; 0x114
    f928:	bc3c      	pop	{r2, r3, r4, r5}
    f92a:	4690      	mov	r8, r2
    f92c:	4699      	mov	r9, r3
    f92e:	46a2      	mov	sl, r4
    f930:	46ab      	mov	fp, r5
    f932:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f934:	2000      	movs	r0, #0
    f936:	e7f6      	b.n	f926 <nvm_write+0xee>
    f938:	00004c95 	.word	0x00004c95
    f93c:	00004d15 	.word	0x00004d15
    f940:	00004531 	.word	0x00004531
    f944:	00004bbd 	.word	0x00004bbd
    f948:	00004571 	.word	0x00004571

0000f94c <nvm_init>:
    f94c:	b500      	push	{lr}
    f94e:	b083      	sub	sp, #12
    f950:	2800      	cmp	r0, #0
    f952:	d110      	bne.n	f976 <nvm_init+0x2a>
    f954:	2300      	movs	r3, #0
    f956:	466a      	mov	r2, sp
    f958:	7013      	strb	r3, [r2, #0]
    f95a:	4a08      	ldr	r2, [pc, #32]	; (f97c <nvm_init+0x30>)
    f95c:	6852      	ldr	r2, [r2, #4]
    f95e:	466a      	mov	r2, sp
    f960:	70d3      	strb	r3, [r2, #3]
    f962:	7113      	strb	r3, [r2, #4]
    f964:	7053      	strb	r3, [r2, #1]
    f966:	3302      	adds	r3, #2
    f968:	7093      	strb	r3, [r2, #2]
    f96a:	4668      	mov	r0, sp
    f96c:	4b04      	ldr	r3, [pc, #16]	; (f980 <nvm_init+0x34>)
    f96e:	4798      	blx	r3
    f970:	2000      	movs	r0, #0
    f972:	b003      	add	sp, #12
    f974:	bd00      	pop	{pc}
    f976:	2008      	movs	r0, #8
    f978:	4240      	negs	r0, r0
    f97a:	e7fa      	b.n	f972 <nvm_init+0x26>
    f97c:	41004000 	.word	0x41004000
    f980:	00004a55 	.word	0x00004a55

0000f984 <main>:
    f984:	b5f0      	push	{r4, r5, r6, r7, lr}
    f986:	b083      	sub	sp, #12
    f988:	4b4d      	ldr	r3, [pc, #308]	; (fac0 <main+0x13c>)
    f98a:	4798      	blx	r3
    f98c:	4b4d      	ldr	r3, [pc, #308]	; (fac4 <main+0x140>)
    f98e:	4798      	blx	r3
    f990:	4b4d      	ldr	r3, [pc, #308]	; (fac8 <main+0x144>)
    f992:	4798      	blx	r3
    f994:	2201      	movs	r2, #1
    f996:	4b4d      	ldr	r3, [pc, #308]	; (facc <main+0x148>)
    f998:	701a      	strb	r2, [r3, #0]
    f99a:	f3bf 8f5f 	dmb	sy
    f99e:	b662      	cpsie	i
    f9a0:	4b4b      	ldr	r3, [pc, #300]	; (fad0 <main+0x14c>)
    f9a2:	4798      	blx	r3
    f9a4:	4b4b      	ldr	r3, [pc, #300]	; (fad4 <main+0x150>)
    f9a6:	781c      	ldrb	r4, [r3, #0]
    f9a8:	b2e4      	uxtb	r4, r4
    f9aa:	484b      	ldr	r0, [pc, #300]	; (fad8 <main+0x154>)
    f9ac:	4b4b      	ldr	r3, [pc, #300]	; (fadc <main+0x158>)
    f9ae:	4798      	blx	r3
    f9b0:	0663      	lsls	r3, r4, #25
    f9b2:	d46c      	bmi.n	fa8e <main+0x10a>
    f9b4:	06a3      	lsls	r3, r4, #26
    f9b6:	d46e      	bmi.n	fa96 <main+0x112>
    f9b8:	06e3      	lsls	r3, r4, #27
    f9ba:	d470      	bmi.n	fa9e <main+0x11a>
    f9bc:	0763      	lsls	r3, r4, #29
    f9be:	d472      	bmi.n	faa6 <main+0x122>
    f9c0:	07a3      	lsls	r3, r4, #30
    f9c2:	d474      	bmi.n	faae <main+0x12a>
    f9c4:	07e3      	lsls	r3, r4, #31
    f9c6:	d476      	bmi.n	fab6 <main+0x132>
    f9c8:	4b45      	ldr	r3, [pc, #276]	; (fae0 <main+0x15c>)
    f9ca:	4798      	blx	r3
    f9cc:	4b45      	ldr	r3, [pc, #276]	; (fae4 <main+0x160>)
    f9ce:	4798      	blx	r3
    f9d0:	4845      	ldr	r0, [pc, #276]	; (fae8 <main+0x164>)
    f9d2:	4b46      	ldr	r3, [pc, #280]	; (faec <main+0x168>)
    f9d4:	4798      	blx	r3
    f9d6:	4b46      	ldr	r3, [pc, #280]	; (faf0 <main+0x16c>)
    f9d8:	4798      	blx	r3
    f9da:	2000      	movs	r0, #0
    f9dc:	4b45      	ldr	r3, [pc, #276]	; (faf4 <main+0x170>)
    f9de:	4798      	blx	r3
    f9e0:	4b45      	ldr	r3, [pc, #276]	; (faf8 <main+0x174>)
    f9e2:	4798      	blx	r3
    f9e4:	4b45      	ldr	r3, [pc, #276]	; (fafc <main+0x178>)
    f9e6:	4798      	blx	r3
    f9e8:	4b45      	ldr	r3, [pc, #276]	; (fb00 <main+0x17c>)
    f9ea:	4798      	blx	r3
    f9ec:	4b45      	ldr	r3, [pc, #276]	; (fb04 <main+0x180>)
    f9ee:	4798      	blx	r3
    f9f0:	4b45      	ldr	r3, [pc, #276]	; (fb08 <main+0x184>)
    f9f2:	4798      	blx	r3
    f9f4:	2001      	movs	r0, #1
    f9f6:	4b45      	ldr	r3, [pc, #276]	; (fb0c <main+0x188>)
    f9f8:	4798      	blx	r3
    f9fa:	4c45      	ldr	r4, [pc, #276]	; (fb10 <main+0x18c>)
    f9fc:	0020      	movs	r0, r4
    f9fe:	4b45      	ldr	r3, [pc, #276]	; (fb14 <main+0x190>)
    fa00:	4798      	blx	r3
    fa02:	0020      	movs	r0, r4
    fa04:	4b44      	ldr	r3, [pc, #272]	; (fb18 <main+0x194>)
    fa06:	4798      	blx	r3
    fa08:	b281      	uxth	r1, r0
    fa0a:	0020      	movs	r0, r4
    fa0c:	4b43      	ldr	r3, [pc, #268]	; (fb1c <main+0x198>)
    fa0e:	4798      	blx	r3
    fa10:	ac01      	add	r4, sp, #4
    fa12:	2600      	movs	r6, #0
    fa14:	7026      	strb	r6, [r4, #0]
    fa16:	2701      	movs	r7, #1
    fa18:	7067      	strb	r7, [r4, #1]
    fa1a:	70a6      	strb	r6, [r4, #2]
    fa1c:	0021      	movs	r1, r4
    fa1e:	2010      	movs	r0, #16
    fa20:	4d3f      	ldr	r5, [pc, #252]	; (fb20 <main+0x19c>)
    fa22:	47a8      	blx	r5
    fa24:	0021      	movs	r1, r4
    fa26:	2011      	movs	r0, #17
    fa28:	47a8      	blx	r5
    fa2a:	7066      	strb	r6, [r4, #1]
    fa2c:	0021      	movs	r1, r4
    fa2e:	2022      	movs	r0, #34	; 0x22
    fa30:	47a8      	blx	r5
    fa32:	7026      	strb	r6, [r4, #0]
    fa34:	7067      	strb	r7, [r4, #1]
    fa36:	70a6      	strb	r6, [r4, #2]
    fa38:	0021      	movs	r1, r4
    fa3a:	2006      	movs	r0, #6
    fa3c:	47a8      	blx	r5
    fa3e:	0021      	movs	r1, r4
    fa40:	200e      	movs	r0, #14
    fa42:	47a8      	blx	r5
    fa44:	0021      	movs	r1, r4
    fa46:	201c      	movs	r0, #28
    fa48:	47a8      	blx	r5
    fa4a:	0021      	movs	r1, r4
    fa4c:	200f      	movs	r0, #15
    fa4e:	47a8      	blx	r5
    fa50:	0021      	movs	r1, r4
    fa52:	2013      	movs	r0, #19
    fa54:	47a8      	blx	r5
    fa56:	0021      	movs	r1, r4
    fa58:	2012      	movs	r0, #18
    fa5a:	47a8      	blx	r5
    fa5c:	0021      	movs	r1, r4
    fa5e:	201b      	movs	r0, #27
    fa60:	47a8      	blx	r5
    fa62:	0021      	movs	r1, r4
    fa64:	2008      	movs	r0, #8
    fa66:	47a8      	blx	r5
    fa68:	0021      	movs	r1, r4
    fa6a:	2007      	movs	r0, #7
    fa6c:	47a8      	blx	r5
    fa6e:	7027      	strb	r7, [r4, #0]
    fa70:	0021      	movs	r1, r4
    fa72:	2023      	movs	r0, #35	; 0x23
    fa74:	47a8      	blx	r5
    fa76:	2208      	movs	r2, #8
    fa78:	4b2a      	ldr	r3, [pc, #168]	; (fb24 <main+0x1a0>)
    fa7a:	615a      	str	r2, [r3, #20]
    fa7c:	2280      	movs	r2, #128	; 0x80
    fa7e:	0312      	lsls	r2, r2, #12
    fa80:	4b29      	ldr	r3, [pc, #164]	; (fb28 <main+0x1a4>)
    fa82:	619a      	str	r2, [r3, #24]
    fa84:	4d29      	ldr	r5, [pc, #164]	; (fb2c <main+0x1a8>)
    fa86:	4c2a      	ldr	r4, [pc, #168]	; (fb30 <main+0x1ac>)
    fa88:	47a8      	blx	r5
    fa8a:	47a0      	blx	r4
    fa8c:	e7fc      	b.n	fa88 <main+0x104>
    fa8e:	4829      	ldr	r0, [pc, #164]	; (fb34 <main+0x1b0>)
    fa90:	4b16      	ldr	r3, [pc, #88]	; (faec <main+0x168>)
    fa92:	4798      	blx	r3
    fa94:	e78e      	b.n	f9b4 <main+0x30>
    fa96:	4828      	ldr	r0, [pc, #160]	; (fb38 <main+0x1b4>)
    fa98:	4b14      	ldr	r3, [pc, #80]	; (faec <main+0x168>)
    fa9a:	4798      	blx	r3
    fa9c:	e78c      	b.n	f9b8 <main+0x34>
    fa9e:	4827      	ldr	r0, [pc, #156]	; (fb3c <main+0x1b8>)
    faa0:	4b12      	ldr	r3, [pc, #72]	; (faec <main+0x168>)
    faa2:	4798      	blx	r3
    faa4:	e78a      	b.n	f9bc <main+0x38>
    faa6:	4826      	ldr	r0, [pc, #152]	; (fb40 <main+0x1bc>)
    faa8:	4b10      	ldr	r3, [pc, #64]	; (faec <main+0x168>)
    faaa:	4798      	blx	r3
    faac:	e788      	b.n	f9c0 <main+0x3c>
    faae:	4825      	ldr	r0, [pc, #148]	; (fb44 <main+0x1c0>)
    fab0:	4b0e      	ldr	r3, [pc, #56]	; (faec <main+0x168>)
    fab2:	4798      	blx	r3
    fab4:	e786      	b.n	f9c4 <main+0x40>
    fab6:	4824      	ldr	r0, [pc, #144]	; (fb48 <main+0x1c4>)
    fab8:	4b0c      	ldr	r3, [pc, #48]	; (faec <main+0x168>)
    faba:	4798      	blx	r3
    fabc:	e784      	b.n	f9c8 <main+0x44>
    fabe:	46c0      	nop			; (mov r8, r8)
    fac0:	0000730d 	.word	0x0000730d
    fac4:	00004499 	.word	0x00004499
    fac8:	000045a1 	.word	0x000045a1
    facc:	20000014 	.word	0x20000014
    fad0:	00007a25 	.word	0x00007a25
    fad4:	40000800 	.word	0x40000800
    fad8:	00020144 	.word	0x00020144
    fadc:	00019ee9 	.word	0x00019ee9
    fae0:	00003e91 	.word	0x00003e91
    fae4:	00003ec1 	.word	0x00003ec1
    fae8:	000201e4 	.word	0x000201e4
    faec:	00019fad 	.word	0x00019fad
    faf0:	00007dcd 	.word	0x00007dcd
    faf4:	0000daf1 	.word	0x0000daf1
    faf8:	0000ec75 	.word	0x0000ec75
    fafc:	000081b9 	.word	0x000081b9
    fb00:	0000dfc9 	.word	0x0000dfc9
    fb04:	0000f329 	.word	0x0000f329
    fb08:	00001bc9 	.word	0x00001bc9
    fb0c:	00002201 	.word	0x00002201
    fb10:	2000116c 	.word	0x2000116c
    fb14:	00001e51 	.word	0x00001e51
    fb18:	0001a269 	.word	0x0001a269
    fb1c:	00003f31 	.word	0x00003f31
    fb20:	00004e1d 	.word	0x00004e1d
    fb24:	40002880 	.word	0x40002880
    fb28:	40002800 	.word	0x40002800
    fb2c:	00001ba5 	.word	0x00001ba5
    fb30:	0000f339 	.word	0x0000f339
    fb34:	0002015c 	.word	0x0002015c
    fb38:	00020174 	.word	0x00020174
    fb3c:	00020184 	.word	0x00020184
    fb40:	00020194 	.word	0x00020194
    fb44:	000201b4 	.word	0x000201b4
    fb48:	000201d4 	.word	0x000201d4

0000fb4c <APP_TaskHandler>:
    fb4c:	b510      	push	{r4, lr}
    fb4e:	4b02      	ldr	r3, [pc, #8]	; (fb58 <APP_TaskHandler+0xc>)
    fb50:	4798      	blx	r3
    fb52:	2000      	movs	r0, #0
    fb54:	bd10      	pop	{r4, pc}
    fb56:	46c0      	nop			; (mov r8, r8)
    fb58:	00001c05 	.word	0x00001c05

0000fb5c <common_tc_read_count>:
    fb5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    fb5e:	4b0d      	ldr	r3, [pc, #52]	; (fb94 <common_tc_read_count+0x38>)
    fb60:	4798      	blx	r3
    fb62:	4b0d      	ldr	r3, [pc, #52]	; (fb98 <common_tc_read_count+0x3c>)
    fb64:	781b      	ldrb	r3, [r3, #0]
    fb66:	2b00      	cmp	r3, #0
    fb68:	d00e      	beq.n	fb88 <common_tc_read_count+0x2c>
    fb6a:	4b0c      	ldr	r3, [pc, #48]	; (fb9c <common_tc_read_count+0x40>)
    fb6c:	781d      	ldrb	r5, [r3, #0]
    fb6e:	4b0a      	ldr	r3, [pc, #40]	; (fb98 <common_tc_read_count+0x3c>)
    fb70:	781f      	ldrb	r7, [r3, #0]
    fb72:	4c0b      	ldr	r4, [pc, #44]	; (fba0 <common_tc_read_count+0x44>)
    fb74:	1c29      	adds	r1, r5, #0
    fb76:	47a0      	blx	r4
    fb78:	1c06      	adds	r6, r0, #0
    fb7a:	480a      	ldr	r0, [pc, #40]	; (fba4 <common_tc_read_count+0x48>)
    fb7c:	1c29      	adds	r1, r5, #0
    fb7e:	47a0      	blx	r4
    fb80:	4378      	muls	r0, r7
    fb82:	1830      	adds	r0, r6, r0
    fb84:	b280      	uxth	r0, r0
    fb86:	e004      	b.n	fb92 <common_tc_read_count+0x36>
    fb88:	4b04      	ldr	r3, [pc, #16]	; (fb9c <common_tc_read_count+0x40>)
    fb8a:	7819      	ldrb	r1, [r3, #0]
    fb8c:	4b04      	ldr	r3, [pc, #16]	; (fba0 <common_tc_read_count+0x44>)
    fb8e:	4798      	blx	r3
    fb90:	b280      	uxth	r0, r0
    fb92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    fb94:	0000f5d5 	.word	0x0000f5d5
    fb98:	200010fc 	.word	0x200010fc
    fb9c:	20002a30 	.word	0x20002a30
    fba0:	000166c1 	.word	0x000166c1
    fba4:	0000ffff 	.word	0x0000ffff

0000fba8 <common_tc_compare_stop>:
    fba8:	b508      	push	{r3, lr}
    fbaa:	4b05      	ldr	r3, [pc, #20]	; (fbc0 <common_tc_compare_stop+0x18>)
    fbac:	4798      	blx	r3
    fbae:	4b05      	ldr	r3, [pc, #20]	; (fbc4 <common_tc_compare_stop+0x1c>)
    fbb0:	4798      	blx	r3
    fbb2:	4b05      	ldr	r3, [pc, #20]	; (fbc8 <common_tc_compare_stop+0x20>)
    fbb4:	2200      	movs	r2, #0
    fbb6:	605a      	str	r2, [r3, #4]
    fbb8:	811a      	strh	r2, [r3, #8]
    fbba:	4b04      	ldr	r3, [pc, #16]	; (fbcc <common_tc_compare_stop+0x24>)
    fbbc:	4798      	blx	r3
    fbbe:	bd08      	pop	{r3, pc}
    fbc0:	0000f5e9 	.word	0x0000f5e9
    fbc4:	0000f689 	.word	0x0000f689
    fbc8:	200010fc 	.word	0x200010fc
    fbcc:	0000f6ad 	.word	0x0000f6ad

0000fbd0 <common_tc_overflow_stop>:
    fbd0:	b508      	push	{r3, lr}
    fbd2:	4b03      	ldr	r3, [pc, #12]	; (fbe0 <common_tc_overflow_stop+0x10>)
    fbd4:	4798      	blx	r3
    fbd6:	2200      	movs	r2, #0
    fbd8:	4b02      	ldr	r3, [pc, #8]	; (fbe4 <common_tc_overflow_stop+0x14>)
    fbda:	701a      	strb	r2, [r3, #0]
    fbdc:	bd08      	pop	{r3, pc}
    fbde:	46c0      	nop			; (mov r8, r8)
    fbe0:	0000f63d 	.word	0x0000f63d
    fbe4:	200010fc 	.word	0x200010fc

0000fbe8 <common_tc_stop>:
    fbe8:	b508      	push	{r3, lr}
    fbea:	4b03      	ldr	r3, [pc, #12]	; (fbf8 <common_tc_stop+0x10>)
    fbec:	4798      	blx	r3
    fbee:	4b03      	ldr	r3, [pc, #12]	; (fbfc <common_tc_stop+0x14>)
    fbf0:	4798      	blx	r3
    fbf2:	4b03      	ldr	r3, [pc, #12]	; (fc00 <common_tc_stop+0x18>)
    fbf4:	4798      	blx	r3
    fbf6:	bd08      	pop	{r3, pc}
    fbf8:	0000fba9 	.word	0x0000fba9
    fbfc:	0000fbd1 	.word	0x0000fbd1
    fc00:	0000f651 	.word	0x0000f651

0000fc04 <common_tc_delay>:
    fc04:	b510      	push	{r4, lr}
    fc06:	1c04      	adds	r4, r0, #0
    fc08:	4b13      	ldr	r3, [pc, #76]	; (fc58 <common_tc_delay+0x54>)
    fc0a:	4798      	blx	r3
    fc0c:	4b13      	ldr	r3, [pc, #76]	; (fc5c <common_tc_delay+0x58>)
    fc0e:	781a      	ldrb	r2, [r3, #0]
    fc10:	4362      	muls	r2, r4
    fc12:	1881      	adds	r1, r0, r2
    fc14:	4b12      	ldr	r3, [pc, #72]	; (fc60 <common_tc_delay+0x5c>)
    fc16:	6059      	str	r1, [r3, #4]
    fc18:	6859      	ldr	r1, [r3, #4]
    fc1a:	0c09      	lsrs	r1, r1, #16
    fc1c:	6059      	str	r1, [r3, #4]
    fc1e:	685b      	ldr	r3, [r3, #4]
    fc20:	2b00      	cmp	r3, #0
    fc22:	d007      	beq.n	fc34 <common_tc_delay+0x30>
    fc24:	4b0e      	ldr	r3, [pc, #56]	; (fc60 <common_tc_delay+0x5c>)
    fc26:	6859      	ldr	r1, [r3, #4]
    fc28:	3201      	adds	r2, #1
    fc2a:	1880      	adds	r0, r0, r2
    fc2c:	8118      	strh	r0, [r3, #8]
    fc2e:	4b0d      	ldr	r3, [pc, #52]	; (fc64 <common_tc_delay+0x60>)
    fc30:	4798      	blx	r3
    fc32:	e004      	b.n	fc3e <common_tc_delay+0x3a>
    fc34:	1882      	adds	r2, r0, r2
    fc36:	4b0a      	ldr	r3, [pc, #40]	; (fc60 <common_tc_delay+0x5c>)
    fc38:	811a      	strh	r2, [r3, #8]
    fc3a:	4b0b      	ldr	r3, [pc, #44]	; (fc68 <common_tc_delay+0x64>)
    fc3c:	4798      	blx	r3
    fc3e:	4b08      	ldr	r3, [pc, #32]	; (fc60 <common_tc_delay+0x5c>)
    fc40:	891b      	ldrh	r3, [r3, #8]
    fc42:	2b63      	cmp	r3, #99	; 0x63
    fc44:	d802      	bhi.n	fc4c <common_tc_delay+0x48>
    fc46:	3364      	adds	r3, #100	; 0x64
    fc48:	4a05      	ldr	r2, [pc, #20]	; (fc60 <common_tc_delay+0x5c>)
    fc4a:	8113      	strh	r3, [r2, #8]
    fc4c:	4b04      	ldr	r3, [pc, #16]	; (fc60 <common_tc_delay+0x5c>)
    fc4e:	8918      	ldrh	r0, [r3, #8]
    fc50:	4b06      	ldr	r3, [pc, #24]	; (fc6c <common_tc_delay+0x68>)
    fc52:	4798      	blx	r3
    fc54:	bd10      	pop	{r4, pc}
    fc56:	46c0      	nop			; (mov r8, r8)
    fc58:	0000f5d5 	.word	0x0000f5d5
    fc5c:	20002a30 	.word	0x20002a30
    fc60:	200010fc 	.word	0x200010fc
    fc64:	0000f5e9 	.word	0x0000f5e9
    fc68:	0000f5fd 	.word	0x0000f5fd
    fc6c:	0000f671 	.word	0x0000f671

0000fc70 <common_tc_init>:
    fc70:	b508      	push	{r3, lr}
    fc72:	2200      	movs	r2, #0
    fc74:	4b03      	ldr	r3, [pc, #12]	; (fc84 <common_tc_init+0x14>)
    fc76:	701a      	strb	r2, [r3, #0]
    fc78:	4b03      	ldr	r3, [pc, #12]	; (fc88 <common_tc_init+0x18>)
    fc7a:	4798      	blx	r3
    fc7c:	4b03      	ldr	r3, [pc, #12]	; (fc8c <common_tc_init+0x1c>)
    fc7e:	7018      	strb	r0, [r3, #0]
    fc80:	bd08      	pop	{r3, pc}
    fc82:	46c0      	nop			; (mov r8, r8)
    fc84:	200010fc 	.word	0x200010fc
    fc88:	0000f6c5 	.word	0x0000f6c5
    fc8c:	20002a30 	.word	0x20002a30

0000fc90 <tmr_ovf_callback>:
    fc90:	b508      	push	{r3, lr}
    fc92:	4b0e      	ldr	r3, [pc, #56]	; (fccc <tmr_ovf_callback+0x3c>)
    fc94:	685b      	ldr	r3, [r3, #4]
    fc96:	2b00      	cmp	r3, #0
    fc98:	d007      	beq.n	fcaa <tmr_ovf_callback+0x1a>
    fc9a:	4a0c      	ldr	r2, [pc, #48]	; (fccc <tmr_ovf_callback+0x3c>)
    fc9c:	6853      	ldr	r3, [r2, #4]
    fc9e:	3b01      	subs	r3, #1
    fca0:	6053      	str	r3, [r2, #4]
    fca2:	2b00      	cmp	r3, #0
    fca4:	d101      	bne.n	fcaa <tmr_ovf_callback+0x1a>
    fca6:	4b0a      	ldr	r3, [pc, #40]	; (fcd0 <tmr_ovf_callback+0x40>)
    fca8:	4798      	blx	r3
    fcaa:	4a08      	ldr	r2, [pc, #32]	; (fccc <tmr_ovf_callback+0x3c>)
    fcac:	7813      	ldrb	r3, [r2, #0]
    fcae:	3301      	adds	r3, #1
    fcb0:	b2db      	uxtb	r3, r3
    fcb2:	7013      	strb	r3, [r2, #0]
    fcb4:	4a07      	ldr	r2, [pc, #28]	; (fcd4 <tmr_ovf_callback+0x44>)
    fcb6:	7812      	ldrb	r2, [r2, #0]
    fcb8:	429a      	cmp	r2, r3
    fcba:	d806      	bhi.n	fcca <tmr_ovf_callback+0x3a>
    fcbc:	4b03      	ldr	r3, [pc, #12]	; (fccc <tmr_ovf_callback+0x3c>)
    fcbe:	2200      	movs	r2, #0
    fcc0:	701a      	strb	r2, [r3, #0]
    fcc2:	68db      	ldr	r3, [r3, #12]
    fcc4:	2b00      	cmp	r3, #0
    fcc6:	d000      	beq.n	fcca <tmr_ovf_callback+0x3a>
    fcc8:	4798      	blx	r3
    fcca:	bd08      	pop	{r3, pc}
    fccc:	200010fc 	.word	0x200010fc
    fcd0:	0000f5fd 	.word	0x0000f5fd
    fcd4:	20002a30 	.word	0x20002a30

0000fcd8 <tmr_cca_callback>:
    fcd8:	b508      	push	{r3, lr}
    fcda:	4b04      	ldr	r3, [pc, #16]	; (fcec <tmr_cca_callback+0x14>)
    fcdc:	4798      	blx	r3
    fcde:	4b04      	ldr	r3, [pc, #16]	; (fcf0 <tmr_cca_callback+0x18>)
    fce0:	691b      	ldr	r3, [r3, #16]
    fce2:	2b00      	cmp	r3, #0
    fce4:	d000      	beq.n	fce8 <tmr_cca_callback+0x10>
    fce6:	4798      	blx	r3
    fce8:	bd08      	pop	{r3, pc}
    fcea:	46c0      	nop			; (mov r8, r8)
    fcec:	0000f5e9 	.word	0x0000f5e9
    fcf0:	200010fc 	.word	0x200010fc

0000fcf4 <set_common_tc_overflow_callback>:
    fcf4:	4b01      	ldr	r3, [pc, #4]	; (fcfc <set_common_tc_overflow_callback+0x8>)
    fcf6:	60d8      	str	r0, [r3, #12]
    fcf8:	4770      	bx	lr
    fcfa:	46c0      	nop			; (mov r8, r8)
    fcfc:	200010fc 	.word	0x200010fc

0000fd00 <set_common_tc_expiry_callback>:
    fd00:	4b01      	ldr	r3, [pc, #4]	; (fd08 <set_common_tc_expiry_callback+0x8>)
    fd02:	6118      	str	r0, [r3, #16]
    fd04:	4770      	bx	lr
    fd06:	46c0      	nop			; (mov r8, r8)
    fd08:	200010fc 	.word	0x200010fc

0000fd0c <MacClearCommands>:
    fd0c:	490e      	ldr	r1, [pc, #56]	; (fd48 <MacClearCommands+0x3c>)
    fd0e:	b570      	push	{r4, r5, r6, lr}
    fd10:	000b      	movs	r3, r1
    fd12:	33d8      	adds	r3, #216	; 0xd8
    fd14:	7818      	ldrb	r0, [r3, #0]
    fd16:	2303      	movs	r3, #3
    fd18:	25a4      	movs	r5, #164	; 0xa4
    fd1a:	4343      	muls	r3, r0
    fd1c:	2401      	movs	r4, #1
    fd1e:	20ff      	movs	r0, #255	; 0xff
    fd20:	3391      	adds	r3, #145	; 0x91
    fd22:	4a0a      	ldr	r2, [pc, #40]	; (fd4c <MacClearCommands+0x40>)
    fd24:	185b      	adds	r3, r3, r1
    fd26:	00ed      	lsls	r5, r5, #3
    fd28:	429a      	cmp	r2, r3
    fd2a:	d100      	bne.n	fd2e <MacClearCommands+0x22>
    fd2c:	bd70      	pop	{r4, r5, r6, pc}
    fd2e:	7811      	ldrb	r1, [r2, #0]
    fd30:	29ff      	cmp	r1, #255	; 0xff
    fd32:	d006      	beq.n	fd42 <MacClearCommands+0x36>
    fd34:	290a      	cmp	r1, #10
    fd36:	d803      	bhi.n	fd40 <MacClearCommands+0x34>
    fd38:	0026      	movs	r6, r4
    fd3a:	408e      	lsls	r6, r1
    fd3c:	422e      	tst	r6, r5
    fd3e:	d100      	bne.n	fd42 <MacClearCommands+0x36>
    fd40:	7010      	strb	r0, [r2, #0]
    fd42:	3203      	adds	r2, #3
    fd44:	e7f0      	b.n	fd28 <MacClearCommands+0x1c>
    fd46:	46c0      	nop			; (mov r8, r8)
    fd48:	20002b5c 	.word	0x20002b5c
    fd4c:	20002bed 	.word	0x20002bed

0000fd50 <CountfOptsLength>:
    fd50:	2200      	movs	r2, #0
    fd52:	490d      	ldr	r1, [pc, #52]	; (fd88 <CountfOptsLength+0x38>)
    fd54:	b570      	push	{r4, r5, r6, lr}
    fd56:	000b      	movs	r3, r1
    fd58:	0010      	movs	r0, r2
    fd5a:	2503      	movs	r5, #3
    fd5c:	33d8      	adds	r3, #216	; 0xd8
    fd5e:	781c      	ldrb	r4, [r3, #0]
    fd60:	4e0a      	ldr	r6, [pc, #40]	; (fd8c <CountfOptsLength+0x3c>)
    fd62:	b2d3      	uxtb	r3, r2
    fd64:	429c      	cmp	r4, r3
    fd66:	d800      	bhi.n	fd6a <CountfOptsLength+0x1a>
    fd68:	bd70      	pop	{r4, r5, r6, pc}
    fd6a:	002b      	movs	r3, r5
    fd6c:	4353      	muls	r3, r2
    fd6e:	3391      	adds	r3, #145	; 0x91
    fd70:	5ccb      	ldrb	r3, [r1, r3]
    fd72:	2bff      	cmp	r3, #255	; 0xff
    fd74:	d006      	beq.n	fd84 <CountfOptsLength+0x34>
    fd76:	18f3      	adds	r3, r6, r3
    fd78:	3b02      	subs	r3, #2
    fd7a:	781b      	ldrb	r3, [r3, #0]
    fd7c:	18c3      	adds	r3, r0, r3
    fd7e:	2b0f      	cmp	r3, #15
    fd80:	dcf2      	bgt.n	fd68 <CountfOptsLength+0x18>
    fd82:	b2d8      	uxtb	r0, r3
    fd84:	3201      	adds	r2, #1
    fd86:	e7ec      	b.n	fd62 <CountfOptsLength+0x12>
    fd88:	20002b5c 	.word	0x20002b5c
    fd8c:	00020213 	.word	0x00020213

0000fd90 <StopAllSoftwareTimers>:
    fd90:	b570      	push	{r4, r5, r6, lr}
    fd92:	4c17      	ldr	r4, [pc, #92]	; (fdf0 <StopAllSoftwareTimers+0x60>)
    fd94:	4d17      	ldr	r5, [pc, #92]	; (fdf4 <StopAllSoftwareTimers+0x64>)
    fd96:	0023      	movs	r3, r4
    fd98:	33e2      	adds	r3, #226	; 0xe2
    fd9a:	7818      	ldrb	r0, [r3, #0]
    fd9c:	47a8      	blx	r5
    fd9e:	0023      	movs	r3, r4
    fda0:	33e3      	adds	r3, #227	; 0xe3
    fda2:	7818      	ldrb	r0, [r3, #0]
    fda4:	47a8      	blx	r5
    fda6:	0023      	movs	r3, r4
    fda8:	33e7      	adds	r3, #231	; 0xe7
    fdaa:	7818      	ldrb	r0, [r3, #0]
    fdac:	47a8      	blx	r5
    fdae:	0023      	movs	r3, r4
    fdb0:	33e4      	adds	r3, #228	; 0xe4
    fdb2:	7818      	ldrb	r0, [r3, #0]
    fdb4:	47a8      	blx	r5
    fdb6:	0023      	movs	r3, r4
    fdb8:	33e5      	adds	r3, #229	; 0xe5
    fdba:	7818      	ldrb	r0, [r3, #0]
    fdbc:	47a8      	blx	r5
    fdbe:	0023      	movs	r3, r4
    fdc0:	33e8      	adds	r3, #232	; 0xe8
    fdc2:	7818      	ldrb	r0, [r3, #0]
    fdc4:	47a8      	blx	r5
    fdc6:	0023      	movs	r3, r4
    fdc8:	33e6      	adds	r3, #230	; 0xe6
    fdca:	7818      	ldrb	r0, [r3, #0]
    fdcc:	47a8      	blx	r5
    fdce:	0023      	movs	r3, r4
    fdd0:	33e9      	adds	r3, #233	; 0xe9
    fdd2:	7818      	ldrb	r0, [r3, #0]
    fdd4:	47a8      	blx	r5
    fdd6:	0023      	movs	r3, r4
    fdd8:	33f2      	adds	r3, #242	; 0xf2
    fdda:	7818      	ldrb	r0, [r3, #0]
    fddc:	47a8      	blx	r5
    fdde:	0023      	movs	r3, r4
    fde0:	33f3      	adds	r3, #243	; 0xf3
    fde2:	7818      	ldrb	r0, [r3, #0]
    fde4:	34ff      	adds	r4, #255	; 0xff
    fde6:	47a8      	blx	r5
    fde8:	7f60      	ldrb	r0, [r4, #29]
    fdea:	47a8      	blx	r5
    fdec:	bd70      	pop	{r4, r5, r6, pc}
    fdee:	46c0      	nop			; (mov r8, r8)
    fdf0:	20002b5c 	.word	0x20002b5c
    fdf4:	0000f029 	.word	0x0000f029

0000fdf8 <LorawanGetMaxPayloadSize>:
    fdf8:	b513      	push	{r0, r1, r4, lr}
    fdfa:	466b      	mov	r3, sp
    fdfc:	1ddc      	adds	r4, r3, #7
    fdfe:	2300      	movs	r3, #0
    fe00:	0022      	movs	r2, r4
    fe02:	7023      	strb	r3, [r4, #0]
    fe04:	4902      	ldr	r1, [pc, #8]	; (fe10 <LorawanGetMaxPayloadSize+0x18>)
    fe06:	4b03      	ldr	r3, [pc, #12]	; (fe14 <LorawanGetMaxPayloadSize+0x1c>)
    fe08:	2005      	movs	r0, #5
    fe0a:	4798      	blx	r3
    fe0c:	7820      	ldrb	r0, [r4, #0]
    fe0e:	bd16      	pop	{r1, r2, r4, pc}
    fe10:	20002c3b 	.word	0x20002c3b
    fe14:	0000d805 	.word	0x0000d805

0000fe18 <UpdateReceiveDelays>:
    fe18:	23fa      	movs	r3, #250	; 0xfa
    fe1a:	b570      	push	{r4, r5, r6, lr}
    fe1c:	009b      	lsls	r3, r3, #2
    fe1e:	4c0b      	ldr	r4, [pc, #44]	; (fe4c <UpdateReceiveDelays+0x34>)
    fe20:	2800      	cmp	r0, #0
    fe22:	d000      	beq.n	fe26 <UpdateReceiveDelays+0xe>
    fe24:	4343      	muls	r3, r0
    fe26:	0022      	movs	r2, r4
    fe28:	4d09      	ldr	r5, [pc, #36]	; (fe50 <UpdateReceiveDelays+0x38>)
    fe2a:	32c8      	adds	r2, #200	; 0xc8
    fe2c:	210c      	movs	r1, #12
    fe2e:	2000      	movs	r0, #0
    fe30:	8013      	strh	r3, [r2, #0]
    fe32:	47a8      	blx	r5
    fe34:	0023      	movs	r3, r4
    fe36:	22fa      	movs	r2, #250	; 0xfa
    fe38:	33c8      	adds	r3, #200	; 0xc8
    fe3a:	881b      	ldrh	r3, [r3, #0]
    fe3c:	0092      	lsls	r2, r2, #2
    fe3e:	189b      	adds	r3, r3, r2
    fe40:	34ca      	adds	r4, #202	; 0xca
    fe42:	210d      	movs	r1, #13
    fe44:	2000      	movs	r0, #0
    fe46:	8023      	strh	r3, [r4, #0]
    fe48:	47a8      	blx	r5
    fe4a:	bd70      	pop	{r4, r5, r6, pc}
    fe4c:	20002b5c 	.word	0x20002b5c
    fe50:	0000dfe1 	.word	0x0000dfe1

0000fe54 <IncludeMacCommandsResponse>:
    fe54:	b5f0      	push	{r4, r5, r6, r7, lr}
    fe56:	0005      	movs	r5, r0
    fe58:	2600      	movs	r6, #0
    fe5a:	b087      	sub	sp, #28
    fe5c:	880c      	ldrh	r4, [r1, #0]
    fe5e:	9101      	str	r1, [sp, #4]
    fe60:	9203      	str	r2, [sp, #12]
    fe62:	4f77      	ldr	r7, [pc, #476]	; (10040 <IncludeMacCommandsResponse+0x1ec>)
    fe64:	003b      	movs	r3, r7
    fe66:	33d8      	adds	r3, #216	; 0xd8
    fe68:	781b      	ldrb	r3, [r3, #0]
    fe6a:	42b3      	cmp	r3, r6
    fe6c:	d913      	bls.n	fe96 <IncludeMacCommandsResponse+0x42>
    fe6e:	9b03      	ldr	r3, [sp, #12]
    fe70:	2b00      	cmp	r3, #0
    fe72:	d019      	beq.n	fea8 <IncludeMacCommandsResponse+0x54>
    fe74:	2303      	movs	r3, #3
    fe76:	4373      	muls	r3, r6
    fe78:	18fb      	adds	r3, r7, r3
    fe7a:	3391      	adds	r3, #145	; 0x91
    fe7c:	7819      	ldrb	r1, [r3, #0]
    fe7e:	29ff      	cmp	r1, #255	; 0xff
    fe80:	d012      	beq.n	fea8 <IncludeMacCommandsResponse+0x54>
    fe82:	9b01      	ldr	r3, [sp, #4]
    fe84:	881a      	ldrh	r2, [r3, #0]
    fe86:	4b6f      	ldr	r3, [pc, #444]	; (10044 <IncludeMacCommandsResponse+0x1f0>)
    fe88:	1aa2      	subs	r2, r4, r2
    fe8a:	185b      	adds	r3, r3, r1
    fe8c:	3b02      	subs	r3, #2
    fe8e:	781b      	ldrb	r3, [r3, #0]
    fe90:	18d3      	adds	r3, r2, r3
    fe92:	2b0f      	cmp	r3, #15
    fe94:	dd08      	ble.n	fea8 <IncludeMacCommandsResponse+0x54>
    fe96:	2207      	movs	r2, #7
    fe98:	2100      	movs	r1, #0
    fe9a:	4b6b      	ldr	r3, [pc, #428]	; (10048 <IncludeMacCommandsResponse+0x1f4>)
    fe9c:	486b      	ldr	r0, [pc, #428]	; (1004c <IncludeMacCommandsResponse+0x1f8>)
    fe9e:	4798      	blx	r3
    fea0:	9b01      	ldr	r3, [sp, #4]
    fea2:	801c      	strh	r4, [r3, #0]
    fea4:	b007      	add	sp, #28
    fea6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    fea8:	2303      	movs	r3, #3
    feaa:	4373      	muls	r3, r6
    feac:	18fb      	adds	r3, r7, r3
    feae:	3391      	adds	r3, #145	; 0x91
    feb0:	781b      	ldrb	r3, [r3, #0]
    feb2:	1e98      	subs	r0, r3, #2
    feb4:	280b      	cmp	r0, #11
    feb6:	d862      	bhi.n	ff7e <IncludeMacCommandsResponse+0x12a>
    feb8:	f006 fb64 	bl	16584 <__gnu_thumb1_case_uqi>
    febc:	27a20698 	.word	0x27a20698
    fec0:	7da26748 	.word	0x7da26748
    fec4:	a6616182 	.word	0xa6616182
    fec8:	2303      	movs	r3, #3
    feca:	2200      	movs	r2, #0
    fecc:	552b      	strb	r3, [r5, r4]
    fece:	1c63      	adds	r3, r4, #1
    fed0:	b29b      	uxth	r3, r3
    fed2:	18eb      	adds	r3, r5, r3
    fed4:	4f5a      	ldr	r7, [pc, #360]	; (10040 <IncludeMacCommandsResponse+0x1ec>)
    fed6:	485e      	ldr	r0, [pc, #376]	; (10050 <IncludeMacCommandsResponse+0x1fc>)
    fed8:	701a      	strb	r2, [r3, #0]
    feda:	5c39      	ldrb	r1, [r7, r0]
    fedc:	3201      	adds	r2, #1
    fede:	4011      	ands	r1, r2
    fee0:	466a      	mov	r2, sp
    fee2:	9102      	str	r1, [sp, #8]
    fee4:	7a12      	ldrb	r2, [r2, #8]
    fee6:	701a      	strb	r2, [r3, #0]
    fee8:	5c3a      	ldrb	r2, [r7, r0]
    feea:	4694      	mov	ip, r2
    feec:	2202      	movs	r2, #2
    feee:	4661      	mov	r1, ip
    fef0:	4211      	tst	r1, r2
    fef2:	d002      	beq.n	fefa <IncludeMacCommandsResponse+0xa6>
    fef4:	9902      	ldr	r1, [sp, #8]
    fef6:	430a      	orrs	r2, r1
    fef8:	701a      	strb	r2, [r3, #0]
    fefa:	2204      	movs	r2, #4
    fefc:	5c39      	ldrb	r1, [r7, r0]
    fefe:	4211      	tst	r1, r2
    ff00:	d071      	beq.n	ffe6 <IncludeMacCommandsResponse+0x192>
    ff02:	7819      	ldrb	r1, [r3, #0]
    ff04:	430a      	orrs	r2, r1
    ff06:	701a      	strb	r2, [r3, #0]
    ff08:	e06d      	b.n	ffe6 <IncludeMacCommandsResponse+0x192>
    ff0a:	2305      	movs	r3, #5
    ff0c:	2103      	movs	r1, #3
    ff0e:	2200      	movs	r2, #0
    ff10:	552b      	strb	r3, [r5, r4]
    ff12:	1c63      	adds	r3, r4, #1
    ff14:	b29b      	uxth	r3, r3
    ff16:	4371      	muls	r1, r6
    ff18:	18eb      	adds	r3, r5, r3
    ff1a:	701a      	strb	r2, [r3, #0]
    ff1c:	4a48      	ldr	r2, [pc, #288]	; (10040 <IncludeMacCommandsResponse+0x1ec>)
    ff1e:	1851      	adds	r1, r2, r1
    ff20:	3190      	adds	r1, #144	; 0x90
    ff22:	7888      	ldrb	r0, [r1, #2]
    ff24:	0700      	lsls	r0, r0, #28
    ff26:	0fc0      	lsrs	r0, r0, #31
    ff28:	7018      	strb	r0, [r3, #0]
    ff2a:	7889      	ldrb	r1, [r1, #2]
    ff2c:	b2c7      	uxtb	r7, r0
    ff2e:	06c9      	lsls	r1, r1, #27
    ff30:	d502      	bpl.n	ff38 <IncludeMacCommandsResponse+0xe4>
    ff32:	2102      	movs	r1, #2
    ff34:	4339      	orrs	r1, r7
    ff36:	7019      	strb	r1, [r3, #0]
    ff38:	2103      	movs	r1, #3
    ff3a:	4371      	muls	r1, r6
    ff3c:	1852      	adds	r2, r2, r1
    ff3e:	3290      	adds	r2, #144	; 0x90
    ff40:	7892      	ldrb	r2, [r2, #2]
    ff42:	0692      	lsls	r2, r2, #26
    ff44:	d54f      	bpl.n	ffe6 <IncludeMacCommandsResponse+0x192>
    ff46:	7819      	ldrb	r1, [r3, #0]
    ff48:	2204      	movs	r2, #4
    ff4a:	e7db      	b.n	ff04 <IncludeMacCommandsResponse+0xb0>
    ff4c:	a904      	add	r1, sp, #16
    ff4e:	4b41      	ldr	r3, [pc, #260]	; (10054 <IncludeMacCommandsResponse+0x200>)
    ff50:	200e      	movs	r0, #14
    ff52:	4798      	blx	r3
    ff54:	2306      	movs	r3, #6
    ff56:	4a3a      	ldr	r2, [pc, #232]	; (10040 <IncludeMacCommandsResponse+0x1ec>)
    ff58:	552b      	strb	r3, [r5, r4]
    ff5a:	32e0      	adds	r2, #224	; 0xe0
    ff5c:	7811      	ldrb	r1, [r2, #0]
    ff5e:	1c62      	adds	r2, r4, #1
    ff60:	b292      	uxth	r2, r2
    ff62:	54a9      	strb	r1, [r5, r2]
    ff64:	aa04      	add	r2, sp, #16
    ff66:	7812      	ldrb	r2, [r2, #0]
    ff68:	1ca3      	adds	r3, r4, #2
    ff6a:	0011      	movs	r1, r2
    ff6c:	3120      	adds	r1, #32
    ff6e:	3403      	adds	r4, #3
    ff70:	b2c9      	uxtb	r1, r1
    ff72:	b29b      	uxth	r3, r3
    ff74:	b2a4      	uxth	r4, r4
    ff76:	293f      	cmp	r1, #63	; 0x3f
    ff78:	d904      	bls.n	ff84 <IncludeMacCommandsResponse+0x130>
    ff7a:	2220      	movs	r2, #32
    ff7c:	54ea      	strb	r2, [r5, r3]
    ff7e:	3601      	adds	r6, #1
    ff80:	b2f6      	uxtb	r6, r6
    ff82:	e76e      	b.n	fe62 <IncludeMacCommandsResponse+0xe>
    ff84:	213f      	movs	r1, #63	; 0x3f
    ff86:	400a      	ands	r2, r1
    ff88:	e7f8      	b.n	ff7c <IncludeMacCommandsResponse+0x128>
    ff8a:	2307      	movs	r3, #7
    ff8c:	2103      	movs	r1, #3
    ff8e:	2200      	movs	r2, #0
    ff90:	552b      	strb	r3, [r5, r4]
    ff92:	1c63      	adds	r3, r4, #1
    ff94:	4371      	muls	r1, r6
    ff96:	b29b      	uxth	r3, r3
    ff98:	18eb      	adds	r3, r5, r3
    ff9a:	701a      	strb	r2, [r3, #0]
    ff9c:	4a28      	ldr	r2, [pc, #160]	; (10040 <IncludeMacCommandsResponse+0x1ec>)
    ff9e:	1852      	adds	r2, r2, r1
    ffa0:	3290      	adds	r2, #144	; 0x90
    ffa2:	7891      	ldrb	r1, [r2, #2]
    ffa4:	09c9      	lsrs	r1, r1, #7
    ffa6:	7019      	strb	r1, [r3, #0]
    ffa8:	7892      	ldrb	r2, [r2, #2]
    ffaa:	b2c8      	uxtb	r0, r1
    ffac:	0652      	lsls	r2, r2, #25
    ffae:	d51a      	bpl.n	ffe6 <IncludeMacCommandsResponse+0x192>
    ffb0:	2202      	movs	r2, #2
    ffb2:	4302      	orrs	r2, r0
    ffb4:	e7a7      	b.n	ff06 <IncludeMacCommandsResponse+0xb2>
    ffb6:	2209      	movs	r2, #9
    ffb8:	1c63      	adds	r3, r4, #1
    ffba:	552a      	strb	r2, [r5, r4]
    ffbc:	b29c      	uxth	r4, r3
    ffbe:	e7de      	b.n	ff7e <IncludeMacCommandsResponse+0x12a>
    ffc0:	230a      	movs	r3, #10
    ffc2:	2103      	movs	r1, #3
    ffc4:	2200      	movs	r2, #0
    ffc6:	552b      	strb	r3, [r5, r4]
    ffc8:	1c63      	adds	r3, r4, #1
    ffca:	4371      	muls	r1, r6
    ffcc:	b29b      	uxth	r3, r3
    ffce:	18eb      	adds	r3, r5, r3
    ffd0:	701a      	strb	r2, [r3, #0]
    ffd2:	4a1b      	ldr	r2, [pc, #108]	; (10040 <IncludeMacCommandsResponse+0x1ec>)
    ffd4:	1852      	adds	r2, r2, r1
    ffd6:	3290      	adds	r2, #144	; 0x90
    ffd8:	7891      	ldrb	r1, [r2, #2]
    ffda:	09c9      	lsrs	r1, r1, #7
    ffdc:	7019      	strb	r1, [r3, #0]
    ffde:	78d2      	ldrb	r2, [r2, #3]
    ffe0:	b2c8      	uxtb	r0, r1
    ffe2:	07d2      	lsls	r2, r2, #31
    ffe4:	d4e4      	bmi.n	ffb0 <IncludeMacCommandsResponse+0x15c>
    ffe6:	3402      	adds	r4, #2
    ffe8:	b2a4      	uxth	r4, r4
    ffea:	e7c8      	b.n	ff7e <IncludeMacCommandsResponse+0x12a>
    ffec:	003b      	movs	r3, r7
    ffee:	22ff      	movs	r2, #255	; 0xff
    fff0:	33dd      	adds	r3, #221	; 0xdd
    fff2:	701a      	strb	r2, [r3, #0]
    fff4:	2300      	movs	r3, #0
    fff6:	37de      	adds	r7, #222	; 0xde
    fff8:	703b      	strb	r3, [r7, #0]
    fffa:	3afd      	subs	r2, #253	; 0xfd
    fffc:	1c63      	adds	r3, r4, #1
    fffe:	e7dc      	b.n	ffba <IncludeMacCommandsResponse+0x166>
   10000:	1c62      	adds	r2, r4, #1
   10002:	552b      	strb	r3, [r5, r4]
   10004:	b294      	uxth	r4, r2
   10006:	e7ba      	b.n	ff7e <IncludeMacCommandsResponse+0x12a>
   10008:	2201      	movs	r2, #1
   1000a:	4252      	negs	r2, r2
   1000c:	17d3      	asrs	r3, r2, #31
   1000e:	9204      	str	r2, [sp, #16]
   10010:	9305      	str	r3, [sp, #20]
   10012:	4b11      	ldr	r3, [pc, #68]	; (10058 <IncludeMacCommandsResponse+0x204>)
   10014:	a904      	add	r1, sp, #16
   10016:	5cf8      	ldrb	r0, [r7, r3]
   10018:	4b10      	ldr	r3, [pc, #64]	; (1005c <IncludeMacCommandsResponse+0x208>)
   1001a:	4798      	blx	r3
   1001c:	2301      	movs	r3, #1
   1001e:	228a      	movs	r2, #138	; 0x8a
   10020:	425b      	negs	r3, r3
   10022:	0092      	lsls	r2, r2, #2
   10024:	50bb      	str	r3, [r7, r2]
   10026:	3204      	adds	r2, #4
   10028:	54bb      	strb	r3, [r7, r2]
   1002a:	2389      	movs	r3, #137	; 0x89
   1002c:	2201      	movs	r2, #1
   1002e:	009b      	lsls	r3, r3, #2
   10030:	54fa      	strb	r2, [r7, r3]
   10032:	2303      	movs	r3, #3
   10034:	4373      	muls	r3, r6
   10036:	18ff      	adds	r7, r7, r3
   10038:	3791      	adds	r7, #145	; 0x91
   1003a:	18a2      	adds	r2, r4, r2
   1003c:	783b      	ldrb	r3, [r7, #0]
   1003e:	e7e0      	b.n	10002 <IncludeMacCommandsResponse+0x1ae>
   10040:	20002b5c 	.word	0x20002b5c
   10044:	00020213 	.word	0x00020213
   10048:	00019e35 	.word	0x00019e35
   1004c:	20002d73 	.word	0x20002d73
   10050:	00000217 	.word	0x00000217
   10054:	00014ae5 	.word	0x00014ae5
   10058:	00000225 	.word	0x00000225
   1005c:	0000f315 	.word	0x0000f315

00010060 <UpdateJoinSuccessState>:
   10060:	b5f0      	push	{r4, r5, r6, r7, lr}
   10062:	4c35      	ldr	r4, [pc, #212]	; (10138 <UpdateJoinSuccessState+0xd8>)
   10064:	2104      	movs	r1, #4
   10066:	0022      	movs	r2, r4
   10068:	328c      	adds	r2, #140	; 0x8c
   1006a:	7813      	ldrb	r3, [r2, #0]
   1006c:	2001      	movs	r0, #1
   1006e:	438b      	bics	r3, r1
   10070:	7013      	strb	r3, [r2, #0]
   10072:	0022      	movs	r2, r4
   10074:	2500      	movs	r5, #0
   10076:	327c      	adds	r2, #124	; 0x7c
   10078:	7813      	ldrb	r3, [r2, #0]
   1007a:	b087      	sub	sp, #28
   1007c:	4303      	orrs	r3, r0
   1007e:	3107      	adds	r1, #7
   10080:	4f2e      	ldr	r7, [pc, #184]	; (1013c <UpdateJoinSuccessState+0xdc>)
   10082:	7013      	strb	r3, [r2, #0]
   10084:	47b8      	blx	r7
   10086:	1d23      	adds	r3, r4, #4
   10088:	2116      	movs	r1, #22
   1008a:	0028      	movs	r0, r5
   1008c:	67dd      	str	r5, [r3, #124]	; 0x7c
   1008e:	47b8      	blx	r7
   10090:	0023      	movs	r3, r4
   10092:	2020      	movs	r0, #32
   10094:	33ff      	adds	r3, #255	; 0xff
   10096:	7c5b      	ldrb	r3, [r3, #17]
   10098:	4e29      	ldr	r6, [pc, #164]	; (10140 <UpdateJoinSuccessState+0xe0>)
   1009a:	4203      	tst	r3, r0
   1009c:	d014      	beq.n	100c8 <UpdateJoinSuccessState+0x68>
   1009e:	0023      	movs	r3, r4
   100a0:	337b      	adds	r3, #123	; 0x7b
   100a2:	701d      	strb	r5, [r3, #0]
   100a4:	0023      	movs	r3, r4
   100a6:	a904      	add	r1, sp, #16
   100a8:	336f      	adds	r3, #111	; 0x6f
   100aa:	710d      	strb	r5, [r1, #4]
   100ac:	701d      	strb	r5, [r3, #0]
   100ae:	705d      	strb	r5, [r3, #1]
   100b0:	709d      	strb	r5, [r3, #2]
   100b2:	70dd      	strb	r5, [r3, #3]
   100b4:	711d      	strb	r5, [r3, #4]
   100b6:	715d      	strb	r5, [r3, #5]
   100b8:	719d      	strb	r5, [r3, #6]
   100ba:	71dd      	strb	r5, [r3, #7]
   100bc:	47b0      	blx	r6
   100be:	210f      	movs	r1, #15
   100c0:	2021      	movs	r0, #33	; 0x21
   100c2:	4469      	add	r1, sp
   100c4:	700d      	strb	r5, [r1, #0]
   100c6:	47b0      	blx	r6
   100c8:	0023      	movs	r3, r4
   100ca:	2500      	movs	r5, #0
   100cc:	3308      	adds	r3, #8
   100ce:	210a      	movs	r1, #10
   100d0:	2001      	movs	r0, #1
   100d2:	67dd      	str	r5, [r3, #124]	; 0x7c
   100d4:	47b8      	blx	r7
   100d6:	0023      	movs	r3, r4
   100d8:	33c2      	adds	r3, #194	; 0xc2
   100da:	801d      	strh	r5, [r3, #0]
   100dc:	0022      	movs	r2, r4
   100de:	0023      	movs	r3, r4
   100e0:	210e      	movs	r1, #14
   100e2:	327c      	adds	r2, #124	; 0x7c
   100e4:	33ed      	adds	r3, #237	; 0xed
   100e6:	701d      	strb	r5, [r3, #0]
   100e8:	7813      	ldrb	r3, [r2, #0]
   100ea:	203a      	movs	r0, #58	; 0x3a
   100ec:	438b      	bics	r3, r1
   100ee:	0029      	movs	r1, r5
   100f0:	7013      	strb	r3, [r2, #0]
   100f2:	47b0      	blx	r6
   100f4:	0023      	movs	r3, r4
   100f6:	337d      	adds	r3, #125	; 0x7d
   100f8:	781b      	ldrb	r3, [r3, #0]
   100fa:	079b      	lsls	r3, r3, #30
   100fc:	d50c      	bpl.n	10118 <UpdateJoinSuccessState+0xb8>
   100fe:	0023      	movs	r3, r4
   10100:	21fa      	movs	r1, #250	; 0xfa
   10102:	3388      	adds	r3, #136	; 0x88
   10104:	681b      	ldr	r3, [r3, #0]
   10106:	34e7      	adds	r4, #231	; 0xe7
   10108:	0089      	lsls	r1, r1, #2
   1010a:	7820      	ldrb	r0, [r4, #0]
   1010c:	4359      	muls	r1, r3
   1010e:	9500      	str	r5, [sp, #0]
   10110:	4b0c      	ldr	r3, [pc, #48]	; (10144 <UpdateJoinSuccessState+0xe4>)
   10112:	002a      	movs	r2, r5
   10114:	4c0c      	ldr	r4, [pc, #48]	; (10148 <UpdateJoinSuccessState+0xe8>)
   10116:	47a0      	blx	r4
   10118:	490c      	ldr	r1, [pc, #48]	; (1014c <UpdateJoinSuccessState+0xec>)
   1011a:	794a      	ldrb	r2, [r1, #5]
   1011c:	790b      	ldrb	r3, [r1, #4]
   1011e:	0212      	lsls	r2, r2, #8
   10120:	431a      	orrs	r2, r3
   10122:	798b      	ldrb	r3, [r1, #6]
   10124:	041b      	lsls	r3, r3, #16
   10126:	431a      	orrs	r2, r3
   10128:	79cb      	ldrb	r3, [r1, #7]
   1012a:	061b      	lsls	r3, r3, #24
   1012c:	4313      	orrs	r3, r2
   1012e:	d001      	beq.n	10134 <UpdateJoinSuccessState+0xd4>
   10130:	2008      	movs	r0, #8
   10132:	4798      	blx	r3
   10134:	b007      	add	sp, #28
   10136:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10138:	20002b5c 	.word	0x20002b5c
   1013c:	0000dfe1 	.word	0x0000dfe1
   10140:	0000d92d 	.word	0x0000d92d
   10144:	0001028d 	.word	0x0001028d
   10148:	0000ed11 	.word	0x0000ed11
   1014c:	20002ea4 	.word	0x20002ea4

00010150 <PrepareSessionKeys>:
   10150:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   10152:	0004      	movs	r4, r0
   10154:	2603      	movs	r6, #3
   10156:	000d      	movs	r5, r1
   10158:	0017      	movs	r7, r2
   1015a:	4b09      	ldr	r3, [pc, #36]	; (10180 <PrepareSessionKeys+0x30>)
   1015c:	2210      	movs	r2, #16
   1015e:	2100      	movs	r1, #0
   10160:	4798      	blx	r3
   10162:	0032      	movs	r2, r6
   10164:	0029      	movs	r1, r5
   10166:	1c60      	adds	r0, r4, #1
   10168:	4d06      	ldr	r5, [pc, #24]	; (10184 <PrepareSessionKeys+0x34>)
   1016a:	47a8      	blx	r5
   1016c:	0032      	movs	r2, r6
   1016e:	0039      	movs	r1, r7
   10170:	1d20      	adds	r0, r4, #4
   10172:	47a8      	blx	r5
   10174:	1de0      	adds	r0, r4, #7
   10176:	2202      	movs	r2, #2
   10178:	4903      	ldr	r1, [pc, #12]	; (10188 <PrepareSessionKeys+0x38>)
   1017a:	47a8      	blx	r5
   1017c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1017e:	46c0      	nop			; (mov r8, r8)
   10180:	00019e35 	.word	0x00019e35
   10184:	00019d11 	.word	0x00019d11
   10188:	20002c20 	.word	0x20002c20

0001018c <AssembleEncryptionBlock>:
   1018c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1018e:	001e      	movs	r6, r3
   10190:	4c0b      	ldr	r4, [pc, #44]	; (101c0 <AssembleEncryptionBlock+0x34>)
   10192:	0017      	movs	r7, r2
   10194:	4b0b      	ldr	r3, [pc, #44]	; (101c4 <AssembleEncryptionBlock+0x38>)
   10196:	0005      	movs	r5, r0
   10198:	9101      	str	r1, [sp, #4]
   1019a:	2210      	movs	r2, #16
   1019c:	2100      	movs	r1, #0
   1019e:	0020      	movs	r0, r4
   101a0:	4798      	blx	r3
   101a2:	7026      	strb	r6, [r4, #0]
   101a4:	2604      	movs	r6, #4
   101a6:	7165      	strb	r5, [r4, #5]
   101a8:	0032      	movs	r2, r6
   101aa:	4d07      	ldr	r5, [pc, #28]	; (101c8 <AssembleEncryptionBlock+0x3c>)
   101ac:	a908      	add	r1, sp, #32
   101ae:	1da0      	adds	r0, r4, #6
   101b0:	47a8      	blx	r5
   101b2:	0020      	movs	r0, r4
   101b4:	0032      	movs	r2, r6
   101b6:	a901      	add	r1, sp, #4
   101b8:	300a      	adds	r0, #10
   101ba:	47a8      	blx	r5
   101bc:	73e7      	strb	r7, [r4, #15]
   101be:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
   101c0:	20001110 	.word	0x20001110
   101c4:	00019e35 	.word	0x00019e35
   101c8:	00019d11 	.word	0x00019d11

000101cc <ConfigureRadio>:
   101cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
   101ce:	0001      	movs	r1, r0
   101d0:	0005      	movs	r5, r0
   101d2:	4c11      	ldr	r4, [pc, #68]	; (10218 <ConfigureRadio+0x4c>)
   101d4:	3109      	adds	r1, #9
   101d6:	2009      	movs	r0, #9
   101d8:	47a0      	blx	r4
   101da:	0029      	movs	r1, r5
   101dc:	2001      	movs	r0, #1
   101de:	47a0      	blx	r4
   101e0:	1d29      	adds	r1, r5, #4
   101e2:	200a      	movs	r0, #10
   101e4:	47a0      	blx	r4
   101e6:	7a6b      	ldrb	r3, [r5, #9]
   101e8:	2b01      	cmp	r3, #1
   101ea:	d10b      	bne.n	10204 <ConfigureRadio+0x38>
   101ec:	0029      	movs	r1, r5
   101ee:	2016      	movs	r0, #22
   101f0:	310b      	adds	r1, #11
   101f2:	47a0      	blx	r4
   101f4:	0029      	movs	r1, r5
   101f6:	2007      	movs	r0, #7
   101f8:	310a      	adds	r1, #10
   101fa:	47a0      	blx	r4
   101fc:	2000      	movs	r0, #0
   101fe:	4907      	ldr	r1, [pc, #28]	; (1021c <ConfigureRadio+0x50>)
   10200:	47a0      	blx	r4
   10202:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
   10204:	466b      	mov	r3, sp
   10206:	1dd9      	adds	r1, r3, #7
   10208:	2303      	movs	r3, #3
   1020a:	2013      	movs	r0, #19
   1020c:	700b      	strb	r3, [r1, #0]
   1020e:	47a0      	blx	r4
   10210:	4903      	ldr	r1, [pc, #12]	; (10220 <ConfigureRadio+0x54>)
   10212:	2012      	movs	r0, #18
   10214:	e7f4      	b.n	10200 <ConfigureRadio+0x34>
   10216:	46c0      	nop			; (mov r8, r8)
   10218:	00014bd5 	.word	0x00014bd5
   1021c:	20002c53 	.word	0x20002c53
   10220:	00020210 	.word	0x00020210

00010224 <StopReceiveWindow2Timer>:
   10224:	b510      	push	{r4, lr}
   10226:	4c0b      	ldr	r4, [pc, #44]	; (10254 <StopReceiveWindow2Timer+0x30>)
   10228:	0022      	movs	r2, r4
   1022a:	32f4      	adds	r2, #244	; 0xf4
   1022c:	7812      	ldrb	r2, [r2, #0]
   1022e:	2a01      	cmp	r2, #1
   10230:	d10e      	bne.n	10250 <StopReceiveWindow2Timer+0x2c>
   10232:	0021      	movs	r1, r4
   10234:	200e      	movs	r0, #14
   10236:	317c      	adds	r1, #124	; 0x7c
   10238:	780a      	ldrb	r2, [r1, #0]
   1023a:	34e5      	adds	r4, #229	; 0xe5
   1023c:	4382      	bics	r2, r0
   1023e:	700a      	strb	r2, [r1, #0]
   10240:	7820      	ldrb	r0, [r4, #0]
   10242:	4b05      	ldr	r3, [pc, #20]	; (10258 <StopReceiveWindow2Timer+0x34>)
   10244:	4798      	blx	r3
   10246:	2800      	cmp	r0, #0
   10248:	d002      	beq.n	10250 <StopReceiveWindow2Timer+0x2c>
   1024a:	7820      	ldrb	r0, [r4, #0]
   1024c:	4b03      	ldr	r3, [pc, #12]	; (1025c <StopReceiveWindow2Timer+0x38>)
   1024e:	4798      	blx	r3
   10250:	bd10      	pop	{r4, pc}
   10252:	46c0      	nop			; (mov r8, r8)
   10254:	20002b5c 	.word	0x20002b5c
   10258:	0000eea9 	.word	0x0000eea9
   1025c:	0000f029 	.word	0x0000f029

00010260 <LorawanLinkCheckCallback.part.1>:
   10260:	4b07      	ldr	r3, [pc, #28]	; (10280 <LorawanLinkCheckCallback.part.1+0x20>)
   10262:	b513      	push	{r0, r1, r4, lr}
   10264:	001a      	movs	r2, r3
   10266:	21fa      	movs	r1, #250	; 0xfa
   10268:	3288      	adds	r2, #136	; 0x88
   1026a:	6812      	ldr	r2, [r2, #0]
   1026c:	0089      	lsls	r1, r1, #2
   1026e:	4351      	muls	r1, r2
   10270:	2200      	movs	r2, #0
   10272:	33e7      	adds	r3, #231	; 0xe7
   10274:	7818      	ldrb	r0, [r3, #0]
   10276:	4c03      	ldr	r4, [pc, #12]	; (10284 <LorawanLinkCheckCallback.part.1+0x24>)
   10278:	9200      	str	r2, [sp, #0]
   1027a:	4b03      	ldr	r3, [pc, #12]	; (10288 <LorawanLinkCheckCallback.part.1+0x28>)
   1027c:	47a0      	blx	r4
   1027e:	bd13      	pop	{r0, r1, r4, pc}
   10280:	20002b5c 	.word	0x20002b5c
   10284:	0000ed11 	.word	0x0000ed11
   10288:	0001028d 	.word	0x0001028d

0001028c <LorawanLinkCheckCallback>:
   1028c:	4b17      	ldr	r3, [pc, #92]	; (102ec <LorawanLinkCheckCallback+0x60>)
   1028e:	20a0      	movs	r0, #160	; 0xa0
   10290:	001a      	movs	r2, r3
   10292:	2180      	movs	r1, #128	; 0x80
   10294:	b510      	push	{r4, lr}
   10296:	327c      	adds	r2, #124	; 0x7c
   10298:	8812      	ldrh	r2, [r2, #0]
   1029a:	0080      	lsls	r0, r0, #2
   1029c:	0089      	lsls	r1, r1, #2
   1029e:	4002      	ands	r2, r0
   102a0:	428a      	cmp	r2, r1
   102a2:	d11c      	bne.n	102de <LorawanLinkCheckCallback+0x52>
   102a4:	001a      	movs	r2, r3
   102a6:	32d8      	adds	r2, #216	; 0xd8
   102a8:	7810      	ldrb	r0, [r2, #0]
   102aa:	2403      	movs	r4, #3
   102ac:	2200      	movs	r2, #0
   102ae:	b2d1      	uxtb	r1, r2
   102b0:	4281      	cmp	r1, r0
   102b2:	d30d      	bcc.n	102d0 <LorawanLinkCheckCallback+0x44>
   102b4:	d113      	bne.n	102de <LorawanLinkCheckCallback+0x52>
   102b6:	2203      	movs	r2, #3
   102b8:	434a      	muls	r2, r1
   102ba:	2102      	movs	r1, #2
   102bc:	189a      	adds	r2, r3, r2
   102be:	3291      	adds	r2, #145	; 0x91
   102c0:	7011      	strb	r1, [r2, #0]
   102c2:	280f      	cmp	r0, #15
   102c4:	d80b      	bhi.n	102de <LorawanLinkCheckCallback+0x52>
   102c6:	001a      	movs	r2, r3
   102c8:	3001      	adds	r0, #1
   102ca:	32d8      	adds	r2, #216	; 0xd8
   102cc:	7010      	strb	r0, [r2, #0]
   102ce:	e006      	b.n	102de <LorawanLinkCheckCallback+0x52>
   102d0:	0021      	movs	r1, r4
   102d2:	3201      	adds	r2, #1
   102d4:	4351      	muls	r1, r2
   102d6:	318e      	adds	r1, #142	; 0x8e
   102d8:	5c59      	ldrb	r1, [r3, r1]
   102da:	2902      	cmp	r1, #2
   102dc:	d1e7      	bne.n	102ae <LorawanLinkCheckCallback+0x22>
   102de:	337d      	adds	r3, #125	; 0x7d
   102e0:	781b      	ldrb	r3, [r3, #0]
   102e2:	079b      	lsls	r3, r3, #30
   102e4:	d501      	bpl.n	102ea <LorawanLinkCheckCallback+0x5e>
   102e6:	4b02      	ldr	r3, [pc, #8]	; (102f0 <LorawanLinkCheckCallback+0x64>)
   102e8:	4798      	blx	r3
   102ea:	bd10      	pop	{r4, pc}
   102ec:	20002b5c 	.word	0x20002b5c
   102f0:	00010261 	.word	0x00010261

000102f4 <LORAWAN_Init>:
   102f4:	2270      	movs	r2, #112	; 0x70
   102f6:	b5f0      	push	{r4, r5, r6, r7, lr}
   102f8:	4b52      	ldr	r3, [pc, #328]	; (10444 <LORAWAN_Init+0x150>)
   102fa:	b087      	sub	sp, #28
   102fc:	781b      	ldrb	r3, [r3, #0]
   102fe:	0006      	movs	r6, r0
   10300:	011b      	lsls	r3, r3, #4
   10302:	4013      	ands	r3, r2
   10304:	4a50      	ldr	r2, [pc, #320]	; (10448 <LORAWAN_Init+0x154>)
   10306:	000f      	movs	r7, r1
   10308:	7812      	ldrb	r2, [r2, #0]
   1030a:	0912      	lsrs	r2, r2, #4
   1030c:	4313      	orrs	r3, r2
   1030e:	2b1f      	cmp	r3, #31
   10310:	d000      	beq.n	10314 <LORAWAN_Init+0x20>
   10312:	e7fe      	b.n	10312 <LORAWAN_Init+0x1e>
   10314:	4d4d      	ldr	r5, [pc, #308]	; (1044c <LORAWAN_Init+0x158>)
   10316:	002b      	movs	r3, r5
   10318:	33ef      	adds	r3, #239	; 0xef
   1031a:	781b      	ldrb	r3, [r3, #0]
   1031c:	2b00      	cmp	r3, #0
   1031e:	d000      	beq.n	10322 <LORAWAN_Init+0x2e>
   10320:	e08c      	b.n	1043c <LORAWAN_Init+0x148>
   10322:	484b      	ldr	r0, [pc, #300]	; (10450 <LORAWAN_Init+0x15c>)
   10324:	4c4b      	ldr	r4, [pc, #300]	; (10454 <LORAWAN_Init+0x160>)
   10326:	47a0      	blx	r4
   10328:	2808      	cmp	r0, #8
   1032a:	d050      	beq.n	103ce <LORAWAN_Init+0xda>
   1032c:	4b4a      	ldr	r3, [pc, #296]	; (10458 <LORAWAN_Init+0x164>)
   1032e:	4798      	blx	r3
   10330:	002b      	movs	r3, r5
   10332:	33ef      	adds	r3, #239	; 0xef
   10334:	781b      	ldrb	r3, [r3, #0]
   10336:	2b00      	cmp	r3, #0
   10338:	d018      	beq.n	1036c <LORAWAN_Init+0x78>
   1033a:	4b48      	ldr	r3, [pc, #288]	; (1045c <LORAWAN_Init+0x168>)
   1033c:	0a32      	lsrs	r2, r6, #8
   1033e:	705a      	strb	r2, [r3, #1]
   10340:	0c32      	lsrs	r2, r6, #16
   10342:	709a      	strb	r2, [r3, #2]
   10344:	0a3a      	lsrs	r2, r7, #8
   10346:	701e      	strb	r6, [r3, #0]
   10348:	711f      	strb	r7, [r3, #4]
   1034a:	715a      	strb	r2, [r3, #5]
   1034c:	0e36      	lsrs	r6, r6, #24
   1034e:	0c3a      	lsrs	r2, r7, #16
   10350:	0e3f      	lsrs	r7, r7, #24
   10352:	719a      	strb	r2, [r3, #6]
   10354:	70de      	strb	r6, [r3, #3]
   10356:	71df      	strb	r7, [r3, #7]
   10358:	4b41      	ldr	r3, [pc, #260]	; (10460 <LORAWAN_Init+0x16c>)
   1035a:	4798      	blx	r3
   1035c:	4941      	ldr	r1, [pc, #260]	; (10464 <LORAWAN_Init+0x170>)
   1035e:	4b42      	ldr	r3, [pc, #264]	; (10468 <LORAWAN_Init+0x174>)
   10360:	201a      	movs	r0, #26
   10362:	4798      	blx	r3
   10364:	4b41      	ldr	r3, [pc, #260]	; (1046c <LORAWAN_Init+0x178>)
   10366:	4798      	blx	r3
   10368:	4b41      	ldr	r3, [pc, #260]	; (10470 <LORAWAN_Init+0x17c>)
   1036a:	4798      	blx	r3
   1036c:	2317      	movs	r3, #23
   1036e:	ac02      	add	r4, sp, #8
   10370:	4a40      	ldr	r2, [pc, #256]	; (10474 <LORAWAN_Init+0x180>)
   10372:	7123      	strb	r3, [r4, #4]
   10374:	4940      	ldr	r1, [pc, #256]	; (10478 <LORAWAN_Init+0x184>)
   10376:	4b41      	ldr	r3, [pc, #260]	; (1047c <LORAWAN_Init+0x188>)
   10378:	9205      	str	r2, [sp, #20]
   1037a:	9200      	str	r2, [sp, #0]
   1037c:	4e40      	ldr	r6, [pc, #256]	; (10480 <LORAWAN_Init+0x18c>)
   1037e:	9a03      	ldr	r2, [sp, #12]
   10380:	2000      	movs	r0, #0
   10382:	9102      	str	r1, [sp, #8]
   10384:	9304      	str	r3, [sp, #16]
   10386:	47b0      	blx	r6
   10388:	230f      	movs	r3, #15
   1038a:	4a3e      	ldr	r2, [pc, #248]	; (10484 <LORAWAN_Init+0x190>)
   1038c:	7123      	strb	r3, [r4, #4]
   1038e:	4b3e      	ldr	r3, [pc, #248]	; (10488 <LORAWAN_Init+0x194>)
   10390:	60e2      	str	r2, [r4, #12]
   10392:	60a3      	str	r3, [r4, #8]
   10394:	493d      	ldr	r1, [pc, #244]	; (1048c <LORAWAN_Init+0x198>)
   10396:	9200      	str	r2, [sp, #0]
   10398:	6862      	ldr	r2, [r4, #4]
   1039a:	2001      	movs	r0, #1
   1039c:	9102      	str	r1, [sp, #8]
   1039e:	47b0      	blx	r6
   103a0:	2201      	movs	r2, #1
   103a2:	4252      	negs	r2, r2
   103a4:	17d3      	asrs	r3, r2, #31
   103a6:	9202      	str	r2, [sp, #8]
   103a8:	9303      	str	r3, [sp, #12]
   103aa:	4b39      	ldr	r3, [pc, #228]	; (10490 <LORAWAN_Init+0x19c>)
   103ac:	0021      	movs	r1, r4
   103ae:	5ce8      	ldrb	r0, [r5, r3]
   103b0:	4b38      	ldr	r3, [pc, #224]	; (10494 <LORAWAN_Init+0x1a0>)
   103b2:	4798      	blx	r3
   103b4:	238b      	movs	r3, #139	; 0x8b
   103b6:	22ff      	movs	r2, #255	; 0xff
   103b8:	009b      	lsls	r3, r3, #2
   103ba:	54ea      	strb	r2, [r5, r3]
   103bc:	3a01      	subs	r2, #1
   103be:	3aff      	subs	r2, #255	; 0xff
   103c0:	3b04      	subs	r3, #4
   103c2:	50ea      	str	r2, [r5, r3]
   103c4:	2200      	movs	r2, #0
   103c6:	3b04      	subs	r3, #4
   103c8:	54ea      	strb	r2, [r5, r3]
   103ca:	b007      	add	sp, #28
   103cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   103ce:	4832      	ldr	r0, [pc, #200]	; (10498 <LORAWAN_Init+0x1a4>)
   103d0:	47a0      	blx	r4
   103d2:	2808      	cmp	r0, #8
   103d4:	d1aa      	bne.n	1032c <LORAWAN_Init+0x38>
   103d6:	4831      	ldr	r0, [pc, #196]	; (1049c <LORAWAN_Init+0x1a8>)
   103d8:	47a0      	blx	r4
   103da:	2808      	cmp	r0, #8
   103dc:	d1a6      	bne.n	1032c <LORAWAN_Init+0x38>
   103de:	4830      	ldr	r0, [pc, #192]	; (104a0 <LORAWAN_Init+0x1ac>)
   103e0:	47a0      	blx	r4
   103e2:	2808      	cmp	r0, #8
   103e4:	d1a2      	bne.n	1032c <LORAWAN_Init+0x38>
   103e6:	482f      	ldr	r0, [pc, #188]	; (104a4 <LORAWAN_Init+0x1b0>)
   103e8:	47a0      	blx	r4
   103ea:	2808      	cmp	r0, #8
   103ec:	d19e      	bne.n	1032c <LORAWAN_Init+0x38>
   103ee:	482e      	ldr	r0, [pc, #184]	; (104a8 <LORAWAN_Init+0x1b4>)
   103f0:	47a0      	blx	r4
   103f2:	2808      	cmp	r0, #8
   103f4:	d19a      	bne.n	1032c <LORAWAN_Init+0x38>
   103f6:	482d      	ldr	r0, [pc, #180]	; (104ac <LORAWAN_Init+0x1b8>)
   103f8:	47a0      	blx	r4
   103fa:	2808      	cmp	r0, #8
   103fc:	d196      	bne.n	1032c <LORAWAN_Init+0x38>
   103fe:	482c      	ldr	r0, [pc, #176]	; (104b0 <LORAWAN_Init+0x1bc>)
   10400:	47a0      	blx	r4
   10402:	2808      	cmp	r0, #8
   10404:	d000      	beq.n	10408 <LORAWAN_Init+0x114>
   10406:	e791      	b.n	1032c <LORAWAN_Init+0x38>
   10408:	482a      	ldr	r0, [pc, #168]	; (104b4 <LORAWAN_Init+0x1c0>)
   1040a:	47a0      	blx	r4
   1040c:	2808      	cmp	r0, #8
   1040e:	d000      	beq.n	10412 <LORAWAN_Init+0x11e>
   10410:	e78c      	b.n	1032c <LORAWAN_Init+0x38>
   10412:	4829      	ldr	r0, [pc, #164]	; (104b8 <LORAWAN_Init+0x1c4>)
   10414:	47a0      	blx	r4
   10416:	2808      	cmp	r0, #8
   10418:	d000      	beq.n	1041c <LORAWAN_Init+0x128>
   1041a:	e787      	b.n	1032c <LORAWAN_Init+0x38>
   1041c:	4827      	ldr	r0, [pc, #156]	; (104bc <LORAWAN_Init+0x1c8>)
   1041e:	47a0      	blx	r4
   10420:	2808      	cmp	r0, #8
   10422:	d000      	beq.n	10426 <LORAWAN_Init+0x132>
   10424:	e782      	b.n	1032c <LORAWAN_Init+0x38>
   10426:	4826      	ldr	r0, [pc, #152]	; (104c0 <LORAWAN_Init+0x1cc>)
   10428:	4b26      	ldr	r3, [pc, #152]	; (104c4 <LORAWAN_Init+0x1d0>)
   1042a:	4798      	blx	r3
   1042c:	2808      	cmp	r0, #8
   1042e:	d000      	beq.n	10432 <LORAWAN_Init+0x13e>
   10430:	e77c      	b.n	1032c <LORAWAN_Init+0x38>
   10432:	002b      	movs	r3, r5
   10434:	2201      	movs	r2, #1
   10436:	33ef      	adds	r3, #239	; 0xef
   10438:	701a      	strb	r2, [r3, #0]
   1043a:	e779      	b.n	10330 <LORAWAN_Init+0x3c>
   1043c:	4b22      	ldr	r3, [pc, #136]	; (104c8 <LORAWAN_Init+0x1d4>)
   1043e:	4798      	blx	r3
   10440:	e776      	b.n	10330 <LORAWAN_Init+0x3c>
   10442:	46c0      	nop			; (mov r8, r8)
   10444:	41003fe8 	.word	0x41003fe8
   10448:	41003fe4 	.word	0x41003fe4
   1044c:	20002b5c 	.word	0x20002b5c
   10450:	20002c3e 	.word	0x20002c3e
   10454:	0000ecdd 	.word	0x0000ecdd
   10458:	0000ec21 	.word	0x0000ec21
   1045c:	20002ea4 	.word	0x20002ea4
   10460:	00014dd1 	.word	0x00014dd1
   10464:	00012435 	.word	0x00012435
   10468:	00014bd5 	.word	0x00014bd5
   1046c:	0000f511 	.word	0x0000f511
   10470:	00019fc1 	.word	0x00019fc1
   10474:	00014779 	.word	0x00014779
   10478:	20002b43 	.word	0x20002b43
   1047c:	00020230 	.word	0x00020230
   10480:	0000e2c5 	.word	0x0000e2c5
   10484:	0001477d 	.word	0x0001477d
   10488:	000202e8 	.word	0x000202e8
   1048c:	20002a34 	.word	0x20002a34
   10490:	00000225 	.word	0x00000225
   10494:	0000f315 	.word	0x0000f315
   10498:	20002c3f 	.word	0x20002c3f
   1049c:	20002c40 	.word	0x20002c40
   104a0:	20002c41 	.word	0x20002c41
   104a4:	20002c43 	.word	0x20002c43
   104a8:	20002c44 	.word	0x20002c44
   104ac:	20002c42 	.word	0x20002c42
   104b0:	20002c45 	.word	0x20002c45
   104b4:	20002c4e 	.word	0x20002c4e
   104b8:	20002c4f 	.word	0x20002c4f
   104bc:	20002c78 	.word	0x20002c78
   104c0:	20002d81 	.word	0x20002d81
   104c4:	0000f2cd 	.word	0x0000f2cd
   104c8:	0000fd91 	.word	0x0000fd91

000104cc <LORAWAN_Send>:
   104cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   104ce:	4c37      	ldr	r4, [pc, #220]	; (105ac <LORAWAN_Send+0xe0>)
   104d0:	0006      	movs	r6, r0
   104d2:	0023      	movs	r3, r4
   104d4:	337c      	adds	r3, #124	; 0x7c
   104d6:	781b      	ldrb	r3, [r3, #0]
   104d8:	250f      	movs	r5, #15
   104da:	b25a      	sxtb	r2, r3
   104dc:	2a00      	cmp	r2, #0
   104de:	db0b      	blt.n	104f8 <LORAWAN_Send+0x2c>
   104e0:	3d03      	subs	r5, #3
   104e2:	065a      	lsls	r2, r3, #25
   104e4:	d408      	bmi.n	104f8 <LORAWAN_Send+0x2c>
   104e6:	3d03      	subs	r5, #3
   104e8:	07db      	lsls	r3, r3, #31
   104ea:	d505      	bpl.n	104f8 <LORAWAN_Send+0x2c>
   104ec:	2385      	movs	r3, #133	; 0x85
   104ee:	009b      	lsls	r3, r3, #2
   104f0:	5ce7      	ldrb	r7, [r4, r3]
   104f2:	2f00      	cmp	r7, #0
   104f4:	d102      	bne.n	104fc <LORAWAN_Send+0x30>
   104f6:	2511      	movs	r5, #17
   104f8:	0028      	movs	r0, r5
   104fa:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   104fc:	2800      	cmp	r0, #0
   104fe:	d10e      	bne.n	1051e <LORAWAN_Send+0x52>
   10500:	2700      	movs	r7, #0
   10502:	1d23      	adds	r3, r4, #4
   10504:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   10506:	3301      	adds	r3, #1
   10508:	d123      	bne.n	10552 <LORAWAN_Send+0x86>
   1050a:	2001      	movs	r0, #1
   1050c:	347c      	adds	r4, #124	; 0x7c
   1050e:	78a3      	ldrb	r3, [r4, #2]
   10510:	210b      	movs	r1, #11
   10512:	4303      	orrs	r3, r0
   10514:	70a3      	strb	r3, [r4, #2]
   10516:	4b26      	ldr	r3, [pc, #152]	; (105b0 <LORAWAN_Send+0xe4>)
   10518:	4798      	blx	r3
   1051a:	250d      	movs	r5, #13
   1051c:	e7ec      	b.n	104f8 <LORAWAN_Send+0x2c>
   1051e:	7843      	ldrb	r3, [r0, #1]
   10520:	7a02      	ldrb	r2, [r0, #8]
   10522:	3b01      	subs	r3, #1
   10524:	b2db      	uxtb	r3, r3
   10526:	9201      	str	r2, [sp, #4]
   10528:	2bdf      	cmp	r3, #223	; 0xdf
   1052a:	d902      	bls.n	10532 <LORAWAN_Send+0x66>
   1052c:	250a      	movs	r5, #10
   1052e:	2a00      	cmp	r2, #0
   10530:	d1e2      	bne.n	104f8 <LORAWAN_Send+0x2c>
   10532:	4b20      	ldr	r3, [pc, #128]	; (105b4 <LORAWAN_Send+0xe8>)
   10534:	4798      	blx	r3
   10536:	4684      	mov	ip, r0
   10538:	9b01      	ldr	r3, [sp, #4]
   1053a:	9000      	str	r0, [sp, #0]
   1053c:	4463      	add	r3, ip
   1053e:	001d      	movs	r5, r3
   10540:	4b1d      	ldr	r3, [pc, #116]	; (105b8 <LORAWAN_Send+0xec>)
   10542:	4798      	blx	r3
   10544:	4285      	cmp	r5, r0
   10546:	dddb      	ble.n	10500 <LORAWAN_Send+0x34>
   10548:	9b00      	ldr	r3, [sp, #0]
   1054a:	250e      	movs	r5, #14
   1054c:	2b00      	cmp	r3, #0
   1054e:	d0d3      	beq.n	104f8 <LORAWAN_Send+0x2c>
   10550:	e7d7      	b.n	10502 <LORAWAN_Send+0x36>
   10552:	0023      	movs	r3, r4
   10554:	33f4      	adds	r3, #244	; 0xf4
   10556:	781b      	ldrb	r3, [r3, #0]
   10558:	2b04      	cmp	r3, #4
   1055a:	d01d      	beq.n	10598 <LORAWAN_Send+0xcc>
   1055c:	0023      	movs	r3, r4
   1055e:	33f4      	adds	r3, #244	; 0xf4
   10560:	781b      	ldrb	r3, [r3, #0]
   10562:	2b01      	cmp	r3, #1
   10564:	d105      	bne.n	10572 <LORAWAN_Send+0xa6>
   10566:	0023      	movs	r3, r4
   10568:	337c      	adds	r3, #124	; 0x7c
   1056a:	781a      	ldrb	r2, [r3, #0]
   1056c:	230e      	movs	r3, #14
   1056e:	421a      	tst	r2, r3
   10570:	d1c1      	bne.n	104f6 <LORAWAN_Send+0x2a>
   10572:	0023      	movs	r3, r4
   10574:	33fc      	adds	r3, #252	; 0xfc
   10576:	2f00      	cmp	r7, #0
   10578:	d113      	bne.n	105a2 <LORAWAN_Send+0xd6>
   1057a:	2508      	movs	r5, #8
   1057c:	601e      	str	r6, [r3, #0]
   1057e:	2385      	movs	r3, #133	; 0x85
   10580:	2200      	movs	r2, #0
   10582:	009b      	lsls	r3, r3, #2
   10584:	54e2      	strb	r2, [r4, r3]
   10586:	2001      	movs	r0, #1
   10588:	4b0c      	ldr	r3, [pc, #48]	; (105bc <LORAWAN_Send+0xf0>)
   1058a:	4798      	blx	r3
   1058c:	2320      	movs	r3, #32
   1058e:	348c      	adds	r4, #140	; 0x8c
   10590:	7822      	ldrb	r2, [r4, #0]
   10592:	4313      	orrs	r3, r2
   10594:	7023      	strb	r3, [r4, #0]
   10596:	e7af      	b.n	104f8 <LORAWAN_Send+0x2c>
   10598:	4b09      	ldr	r3, [pc, #36]	; (105c0 <LORAWAN_Send+0xf4>)
   1059a:	4798      	blx	r3
   1059c:	2808      	cmp	r0, #8
   1059e:	d1aa      	bne.n	104f6 <LORAWAN_Send+0x2a>
   105a0:	e7dc      	b.n	1055c <LORAWAN_Send+0x90>
   105a2:	2200      	movs	r2, #0
   105a4:	2511      	movs	r5, #17
   105a6:	601a      	str	r2, [r3, #0]
   105a8:	e7e9      	b.n	1057e <LORAWAN_Send+0xb2>
   105aa:	46c0      	nop			; (mov r8, r8)
   105ac:	20002b5c 	.word	0x20002b5c
   105b0:	0000dfe1 	.word	0x0000dfe1
   105b4:	0000fd51 	.word	0x0000fd51
   105b8:	0000fdf9 	.word	0x0000fdf9
   105bc:	00014a61 	.word	0x00014a61
   105c0:	00014165 	.word	0x00014165

000105c4 <AutomaticReplyCallback>:
   105c4:	b510      	push	{r4, lr}
   105c6:	4c0d      	ldr	r4, [pc, #52]	; (105fc <AutomaticReplyCallback+0x38>)
   105c8:	0023      	movs	r3, r4
   105ca:	33f4      	adds	r3, #244	; 0xf4
   105cc:	781b      	ldrb	r3, [r3, #0]
   105ce:	2b01      	cmp	r3, #1
   105d0:	d10e      	bne.n	105f0 <AutomaticReplyCallback+0x2c>
   105d2:	0022      	movs	r2, r4
   105d4:	210e      	movs	r1, #14
   105d6:	327c      	adds	r2, #124	; 0x7c
   105d8:	7813      	ldrb	r3, [r2, #0]
   105da:	438b      	bics	r3, r1
   105dc:	7013      	strb	r3, [r2, #0]
   105de:	4b08      	ldr	r3, [pc, #32]	; (10600 <AutomaticReplyCallback+0x3c>)
   105e0:	2000      	movs	r0, #0
   105e2:	4798      	blx	r3
   105e4:	2208      	movs	r2, #8
   105e6:	348c      	adds	r4, #140	; 0x8c
   105e8:	7823      	ldrb	r3, [r4, #0]
   105ea:	4393      	bics	r3, r2
   105ec:	7023      	strb	r3, [r4, #0]
   105ee:	bd10      	pop	{r4, pc}
   105f0:	2b04      	cmp	r3, #4
   105f2:	d1f4      	bne.n	105de <AutomaticReplyCallback+0x1a>
   105f4:	4b03      	ldr	r3, [pc, #12]	; (10604 <AutomaticReplyCallback+0x40>)
   105f6:	4798      	blx	r3
   105f8:	e7f1      	b.n	105de <AutomaticReplyCallback+0x1a>
   105fa:	46c0      	nop			; (mov r8, r8)
   105fc:	20002b5c 	.word	0x20002b5c
   10600:	000104cd 	.word	0x000104cd
   10604:	000154e9 	.word	0x000154e9

00010608 <LORAWAN_Pause>:
   10608:	b510      	push	{r4, lr}
   1060a:	4c2c      	ldr	r4, [pc, #176]	; (106bc <LORAWAN_Pause+0xb4>)
   1060c:	0023      	movs	r3, r4
   1060e:	33f4      	adds	r3, #244	; 0xf4
   10610:	781b      	ldrb	r3, [r3, #0]
   10612:	2b04      	cmp	r3, #4
   10614:	d110      	bne.n	10638 <LORAWAN_Pause+0x30>
   10616:	0023      	movs	r3, r4
   10618:	337c      	adds	r3, #124	; 0x7c
   1061a:	781b      	ldrb	r3, [r3, #0]
   1061c:	07db      	lsls	r3, r3, #31
   1061e:	d50b      	bpl.n	10638 <LORAWAN_Pause+0x30>
   10620:	4b27      	ldr	r3, [pc, #156]	; (106c0 <LORAWAN_Pause+0xb8>)
   10622:	4798      	blx	r3
   10624:	28c7      	cmp	r0, #199	; 0xc7
   10626:	d942      	bls.n	106ae <LORAWAN_Pause+0xa6>
   10628:	2380      	movs	r3, #128	; 0x80
   1062a:	347c      	adds	r4, #124	; 0x7c
   1062c:	7822      	ldrb	r2, [r4, #0]
   1062e:	425b      	negs	r3, r3
   10630:	4313      	orrs	r3, r2
   10632:	3832      	subs	r0, #50	; 0x32
   10634:	7023      	strb	r3, [r4, #0]
   10636:	bd10      	pop	{r4, pc}
   10638:	0023      	movs	r3, r4
   1063a:	337c      	adds	r3, #124	; 0x7c
   1063c:	7818      	ldrb	r0, [r3, #0]
   1063e:	0700      	lsls	r0, r0, #28
   10640:	0f40      	lsrs	r0, r0, #29
   10642:	2806      	cmp	r0, #6
   10644:	d833      	bhi.n	106ae <LORAWAN_Pause+0xa6>
   10646:	f005 ff9d 	bl	16584 <__gnu_thumb1_case_uqi>
   1064a:	322f      	.short	0x322f
   1064c:	321b3204 	.word	0x321b3204
   10650:	2c          	.byte	0x2c
   10651:	00          	.byte	0x00
   10652:	0023      	movs	r3, r4
   10654:	338c      	adds	r3, #140	; 0x8c
   10656:	781b      	ldrb	r3, [r3, #0]
   10658:	075b      	lsls	r3, r3, #29
   1065a:	d509      	bpl.n	10670 <LORAWAN_Pause+0x68>
   1065c:	0023      	movs	r3, r4
   1065e:	33e2      	adds	r3, #226	; 0xe2
   10660:	7818      	ldrb	r0, [r3, #0]
   10662:	4b18      	ldr	r3, [pc, #96]	; (106c4 <LORAWAN_Pause+0xbc>)
   10664:	4798      	blx	r3
   10666:	21fa      	movs	r1, #250	; 0xfa
   10668:	4b17      	ldr	r3, [pc, #92]	; (106c8 <LORAWAN_Pause+0xc0>)
   1066a:	0089      	lsls	r1, r1, #2
   1066c:	4798      	blx	r3
   1066e:	e7d9      	b.n	10624 <LORAWAN_Pause+0x1c>
   10670:	0023      	movs	r3, r4
   10672:	337c      	adds	r3, #124	; 0x7c
   10674:	781b      	ldrb	r3, [r3, #0]
   10676:	07db      	lsls	r3, r3, #31
   10678:	d519      	bpl.n	106ae <LORAWAN_Pause+0xa6>
   1067a:	0023      	movs	r3, r4
   1067c:	33e4      	adds	r3, #228	; 0xe4
   1067e:	e7ef      	b.n	10660 <LORAWAN_Pause+0x58>
   10680:	0023      	movs	r3, r4
   10682:	338c      	adds	r3, #140	; 0x8c
   10684:	7818      	ldrb	r0, [r3, #0]
   10686:	2304      	movs	r3, #4
   10688:	4018      	ands	r0, r3
   1068a:	0023      	movs	r3, r4
   1068c:	2800      	cmp	r0, #0
   1068e:	d001      	beq.n	10694 <LORAWAN_Pause+0x8c>
   10690:	33e3      	adds	r3, #227	; 0xe3
   10692:	e7e5      	b.n	10660 <LORAWAN_Pause+0x58>
   10694:	337c      	adds	r3, #124	; 0x7c
   10696:	781b      	ldrb	r3, [r3, #0]
   10698:	07db      	lsls	r3, r3, #31
   1069a:	d5e4      	bpl.n	10666 <LORAWAN_Pause+0x5e>
   1069c:	0023      	movs	r3, r4
   1069e:	33e5      	adds	r3, #229	; 0xe5
   106a0:	e7de      	b.n	10660 <LORAWAN_Pause+0x58>
   106a2:	0023      	movs	r3, r4
   106a4:	33e8      	adds	r3, #232	; 0xe8
   106a6:	e7db      	b.n	10660 <LORAWAN_Pause+0x58>
   106a8:	2001      	movs	r0, #1
   106aa:	4240      	negs	r0, r0
   106ac:	e7bc      	b.n	10628 <LORAWAN_Pause+0x20>
   106ae:	227f      	movs	r2, #127	; 0x7f
   106b0:	347c      	adds	r4, #124	; 0x7c
   106b2:	7823      	ldrb	r3, [r4, #0]
   106b4:	2000      	movs	r0, #0
   106b6:	4013      	ands	r3, r2
   106b8:	7023      	strb	r3, [r4, #0]
   106ba:	e7bc      	b.n	10636 <LORAWAN_Pause+0x2e>
   106bc:	20002b5c 	.word	0x20002b5c
   106c0:	0001419d 	.word	0x0001419d
   106c4:	0000eebd 	.word	0x0000eebd
   106c8:	000165ad 	.word	0x000165ad

000106cc <LORAWAN_Resume>:
   106cc:	217f      	movs	r1, #127	; 0x7f
   106ce:	4b03      	ldr	r3, [pc, #12]	; (106dc <LORAWAN_Resume+0x10>)
   106d0:	337c      	adds	r3, #124	; 0x7c
   106d2:	781a      	ldrb	r2, [r3, #0]
   106d4:	400a      	ands	r2, r1
   106d6:	701a      	strb	r2, [r3, #0]
   106d8:	4770      	bx	lr
   106da:	46c0      	nop			; (mov r8, r8)
   106dc:	20002b5c 	.word	0x20002b5c

000106e0 <LorawanLinkCheckConfigure>:
   106e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   106e2:	23fa      	movs	r3, #250	; 0xfa
   106e4:	4c21      	ldr	r4, [pc, #132]	; (1076c <LorawanLinkCheckConfigure+0x8c>)
   106e6:	009b      	lsls	r3, r3, #2
   106e8:	0022      	movs	r2, r4
   106ea:	0025      	movs	r5, r4
   106ec:	4343      	muls	r3, r0
   106ee:	3288      	adds	r2, #136	; 0x88
   106f0:	0006      	movs	r6, r0
   106f2:	2102      	movs	r1, #2
   106f4:	2000      	movs	r0, #0
   106f6:	4f1e      	ldr	r7, [pc, #120]	; (10770 <LorawanLinkCheckConfigure+0x90>)
   106f8:	6013      	str	r3, [r2, #0]
   106fa:	357c      	adds	r5, #124	; 0x7c
   106fc:	47b8      	blx	r7
   106fe:	2e00      	cmp	r6, #0
   10700:	d127      	bne.n	10752 <LorawanLinkCheckConfigure+0x72>
   10702:	0023      	movs	r3, r4
   10704:	33e7      	adds	r3, #231	; 0xe7
   10706:	7818      	ldrb	r0, [r3, #0]
   10708:	4b1a      	ldr	r3, [pc, #104]	; (10774 <LorawanLinkCheckConfigure+0x94>)
   1070a:	4798      	blx	r3
   1070c:	2202      	movs	r2, #2
   1070e:	786b      	ldrb	r3, [r5, #1]
   10710:	210b      	movs	r1, #11
   10712:	4393      	bics	r3, r2
   10714:	706b      	strb	r3, [r5, #1]
   10716:	2001      	movs	r0, #1
   10718:	47b8      	blx	r7
   1071a:	0023      	movs	r3, r4
   1071c:	2701      	movs	r7, #1
   1071e:	33d8      	adds	r3, #216	; 0xd8
   10720:	781b      	ldrb	r3, [r3, #0]
   10722:	0030      	movs	r0, r6
   10724:	0032      	movs	r2, r6
   10726:	36ff      	adds	r6, #255	; 0xff
   10728:	429a      	cmp	r2, r3
   1072a:	d304      	bcc.n	10736 <LorawanLinkCheckConfigure+0x56>
   1072c:	2800      	cmp	r0, #0
   1072e:	d001      	beq.n	10734 <LorawanLinkCheckConfigure+0x54>
   10730:	34d8      	adds	r4, #216	; 0xd8
   10732:	7023      	strb	r3, [r4, #0]
   10734:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   10736:	2103      	movs	r1, #3
   10738:	4351      	muls	r1, r2
   1073a:	1861      	adds	r1, r4, r1
   1073c:	3191      	adds	r1, #145	; 0x91
   1073e:	780d      	ldrb	r5, [r1, #0]
   10740:	2d02      	cmp	r5, #2
   10742:	d103      	bne.n	1074c <LorawanLinkCheckConfigure+0x6c>
   10744:	0038      	movs	r0, r7
   10746:	3b01      	subs	r3, #1
   10748:	700e      	strb	r6, [r1, #0]
   1074a:	b2db      	uxtb	r3, r3
   1074c:	3201      	adds	r2, #1
   1074e:	b2d2      	uxtb	r2, r2
   10750:	e7ea      	b.n	10728 <LorawanLinkCheckConfigure+0x48>
   10752:	2302      	movs	r3, #2
   10754:	786a      	ldrb	r2, [r5, #1]
   10756:	210b      	movs	r1, #11
   10758:	4313      	orrs	r3, r2
   1075a:	706b      	strb	r3, [r5, #1]
   1075c:	2001      	movs	r0, #1
   1075e:	47b8      	blx	r7
   10760:	782b      	ldrb	r3, [r5, #0]
   10762:	07db      	lsls	r3, r3, #31
   10764:	d5e6      	bpl.n	10734 <LorawanLinkCheckConfigure+0x54>
   10766:	4b04      	ldr	r3, [pc, #16]	; (10778 <LorawanLinkCheckConfigure+0x98>)
   10768:	4798      	blx	r3
   1076a:	e7e3      	b.n	10734 <LorawanLinkCheckConfigure+0x54>
   1076c:	20002b5c 	.word	0x20002b5c
   10770:	0000dfe1 	.word	0x0000dfe1
   10774:	0000f029 	.word	0x0000f029
   10778:	00010261 	.word	0x00010261

0001077c <EncodeDeviceTimeReq>:
   1077c:	4b08      	ldr	r3, [pc, #32]	; (107a0 <EncodeDeviceTimeReq+0x24>)
   1077e:	b510      	push	{r4, lr}
   10780:	001c      	movs	r4, r3
   10782:	34d8      	adds	r4, #216	; 0xd8
   10784:	7822      	ldrb	r2, [r4, #0]
   10786:	2015      	movs	r0, #21
   10788:	2a0f      	cmp	r2, #15
   1078a:	d808      	bhi.n	1079e <EncodeDeviceTimeReq+0x22>
   1078c:	2103      	movs	r1, #3
   1078e:	4351      	muls	r1, r2
   10790:	185b      	adds	r3, r3, r1
   10792:	210d      	movs	r1, #13
   10794:	3391      	adds	r3, #145	; 0x91
   10796:	3201      	adds	r2, #1
   10798:	7019      	strb	r1, [r3, #0]
   1079a:	7022      	strb	r2, [r4, #0]
   1079c:	380d      	subs	r0, #13
   1079e:	bd10      	pop	{r4, pc}
   107a0:	20002b5c 	.word	0x20002b5c

000107a4 <LORAWAN_ForceEnable>:
   107a4:	2140      	movs	r1, #64	; 0x40
   107a6:	4b03      	ldr	r3, [pc, #12]	; (107b4 <LORAWAN_ForceEnable+0x10>)
   107a8:	337c      	adds	r3, #124	; 0x7c
   107aa:	781a      	ldrb	r2, [r3, #0]
   107ac:	438a      	bics	r2, r1
   107ae:	701a      	strb	r2, [r3, #0]
   107b0:	4770      	bx	lr
   107b2:	46c0      	nop			; (mov r8, r8)
   107b4:	20002b5c 	.word	0x20002b5c

000107b8 <UpdateCurrentDataRate>:
   107b8:	b510      	push	{r4, lr}
   107ba:	4b04      	ldr	r3, [pc, #16]	; (107cc <UpdateCurrentDataRate+0x14>)
   107bc:	210c      	movs	r1, #12
   107be:	33df      	adds	r3, #223	; 0xdf
   107c0:	7018      	strb	r0, [r3, #0]
   107c2:	2001      	movs	r0, #1
   107c4:	4b02      	ldr	r3, [pc, #8]	; (107d0 <UpdateCurrentDataRate+0x18>)
   107c6:	4798      	blx	r3
   107c8:	bd10      	pop	{r4, pc}
   107ca:	46c0      	nop			; (mov r8, r8)
   107cc:	20002b5c 	.word	0x20002b5c
   107d0:	0000dfe1 	.word	0x0000dfe1

000107d4 <UpdateDLSettings>:
   107d4:	b573      	push	{r0, r1, r4, r5, r6, lr}
   107d6:	466b      	mov	r3, sp
   107d8:	1dde      	adds	r6, r3, #7
   107da:	1d9c      	adds	r4, r3, #6
   107dc:	71d8      	strb	r0, [r3, #7]
   107de:	7021      	strb	r1, [r4, #0]
   107e0:	2017      	movs	r0, #23
   107e2:	0031      	movs	r1, r6
   107e4:	4d0c      	ldr	r5, [pc, #48]	; (10818 <UpdateDLSettings+0x44>)
   107e6:	47a8      	blx	r5
   107e8:	2808      	cmp	r0, #8
   107ea:	d107      	bne.n	107fc <UpdateDLSettings+0x28>
   107ec:	4b0b      	ldr	r3, [pc, #44]	; (1081c <UpdateDLSettings+0x48>)
   107ee:	7832      	ldrb	r2, [r6, #0]
   107f0:	336e      	adds	r3, #110	; 0x6e
   107f2:	701a      	strb	r2, [r3, #0]
   107f4:	2100      	movs	r1, #0
   107f6:	3807      	subs	r0, #7
   107f8:	4b09      	ldr	r3, [pc, #36]	; (10820 <UpdateDLSettings+0x4c>)
   107fa:	4798      	blx	r3
   107fc:	0021      	movs	r1, r4
   107fe:	2018      	movs	r0, #24
   10800:	47a8      	blx	r5
   10802:	2808      	cmp	r0, #8
   10804:	d107      	bne.n	10816 <UpdateDLSettings+0x42>
   10806:	2101      	movs	r1, #1
   10808:	4b04      	ldr	r3, [pc, #16]	; (1081c <UpdateDLSettings+0x48>)
   1080a:	7822      	ldrb	r2, [r4, #0]
   1080c:	33ee      	adds	r3, #238	; 0xee
   1080e:	701a      	strb	r2, [r3, #0]
   10810:	0008      	movs	r0, r1
   10812:	4b03      	ldr	r3, [pc, #12]	; (10820 <UpdateDLSettings+0x4c>)
   10814:	4798      	blx	r3
   10816:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
   10818:	0000d821 	.word	0x0000d821
   1081c:	20002b5c 	.word	0x20002b5c
   10820:	0000dfe1 	.word	0x0000dfe1

00010824 <UpdateTxPower>:
   10824:	b510      	push	{r4, lr}
   10826:	4b04      	ldr	r3, [pc, #16]	; (10838 <UpdateTxPower+0x14>)
   10828:	210a      	movs	r1, #10
   1082a:	33e1      	adds	r3, #225	; 0xe1
   1082c:	7018      	strb	r0, [r3, #0]
   1082e:	2000      	movs	r0, #0
   10830:	4b02      	ldr	r3, [pc, #8]	; (1083c <UpdateTxPower+0x18>)
   10832:	4798      	blx	r3
   10834:	bd10      	pop	{r4, pc}
   10836:	46c0      	nop			; (mov r8, r8)
   10838:	20002b5c 	.word	0x20002b5c
   1083c:	0000dfe1 	.word	0x0000dfe1

00010840 <UpdateRetransmissionAckTimeoutState>:
   10840:	4b10      	ldr	r3, [pc, #64]	; (10884 <UpdateRetransmissionAckTimeoutState+0x44>)
   10842:	b513      	push	{r0, r1, r4, lr}
   10844:	001a      	movs	r2, r3
   10846:	32f4      	adds	r2, #244	; 0xf4
   10848:	7812      	ldrb	r2, [r2, #0]
   1084a:	2a01      	cmp	r2, #1
   1084c:	d108      	bne.n	10860 <UpdateRetransmissionAckTimeoutState+0x20>
   1084e:	0018      	movs	r0, r3
   10850:	210e      	movs	r1, #14
   10852:	307c      	adds	r0, #124	; 0x7c
   10854:	7802      	ldrb	r2, [r0, #0]
   10856:	438a      	bics	r2, r1
   10858:	0011      	movs	r1, r2
   1085a:	220c      	movs	r2, #12
   1085c:	430a      	orrs	r2, r1
   1085e:	7002      	strb	r2, [r0, #0]
   10860:	001a      	movs	r2, r3
   10862:	32d2      	adds	r2, #210	; 0xd2
   10864:	8811      	ldrh	r1, [r2, #0]
   10866:	4a08      	ldr	r2, [pc, #32]	; (10888 <UpdateRetransmissionAckTimeoutState+0x48>)
   10868:	4c08      	ldr	r4, [pc, #32]	; (1088c <UpdateRetransmissionAckTimeoutState+0x4c>)
   1086a:	5c9a      	ldrb	r2, [r3, r2]
   1086c:	33e8      	adds	r3, #232	; 0xe8
   1086e:	1a8a      	subs	r2, r1, r2
   10870:	21fa      	movs	r1, #250	; 0xfa
   10872:	0089      	lsls	r1, r1, #2
   10874:	4351      	muls	r1, r2
   10876:	2200      	movs	r2, #0
   10878:	7818      	ldrb	r0, [r3, #0]
   1087a:	9200      	str	r2, [sp, #0]
   1087c:	4b04      	ldr	r3, [pc, #16]	; (10890 <UpdateRetransmissionAckTimeoutState+0x50>)
   1087e:	47a0      	blx	r4
   10880:	bd13      	pop	{r0, r1, r4, pc}
   10882:	46c0      	nop			; (mov r8, r8)
   10884:	20002b5c 	.word	0x20002b5c
   10888:	0000021f 	.word	0x0000021f
   1088c:	0000ed11 	.word	0x0000ed11
   10890:	0001258d 	.word	0x0001258d

00010894 <UpdateReceiveWindow2Parameters>:
   10894:	4b06      	ldr	r3, [pc, #24]	; (108b0 <UpdateReceiveWindow2Parameters+0x1c>)
   10896:	b510      	push	{r4, lr}
   10898:	001a      	movs	r2, r3
   1089a:	336a      	adds	r3, #106	; 0x6a
   1089c:	8018      	strh	r0, [r3, #0]
   1089e:	326e      	adds	r2, #110	; 0x6e
   108a0:	0c00      	lsrs	r0, r0, #16
   108a2:	8058      	strh	r0, [r3, #2]
   108a4:	7011      	strb	r1, [r2, #0]
   108a6:	2001      	movs	r0, #1
   108a8:	2100      	movs	r1, #0
   108aa:	4b02      	ldr	r3, [pc, #8]	; (108b4 <UpdateReceiveWindow2Parameters+0x20>)
   108ac:	4798      	blx	r3
   108ae:	bd10      	pop	{r4, pc}
   108b0:	20002b5c 	.word	0x20002b5c
   108b4:	0000dfe1 	.word	0x0000dfe1

000108b8 <ResetParametersForConfirmedTransmission>:
   108b8:	4b0a      	ldr	r3, [pc, #40]	; (108e4 <ResetParametersForConfirmedTransmission+0x2c>)
   108ba:	001a      	movs	r2, r3
   108bc:	32f4      	adds	r2, #244	; 0xf4
   108be:	7812      	ldrb	r2, [r2, #0]
   108c0:	2a01      	cmp	r2, #1
   108c2:	d105      	bne.n	108d0 <ResetParametersForConfirmedTransmission+0x18>
   108c4:	0019      	movs	r1, r3
   108c6:	200e      	movs	r0, #14
   108c8:	317c      	adds	r1, #124	; 0x7c
   108ca:	780a      	ldrb	r2, [r1, #0]
   108cc:	4382      	bics	r2, r0
   108ce:	700a      	strb	r2, [r1, #0]
   108d0:	001a      	movs	r2, r3
   108d2:	2100      	movs	r1, #0
   108d4:	338c      	adds	r3, #140	; 0x8c
   108d6:	32dc      	adds	r2, #220	; 0xdc
   108d8:	7011      	strb	r1, [r2, #0]
   108da:	781a      	ldrb	r2, [r3, #0]
   108dc:	3101      	adds	r1, #1
   108de:	438a      	bics	r2, r1
   108e0:	701a      	strb	r2, [r3, #0]
   108e2:	4770      	bx	lr
   108e4:	20002b5c 	.word	0x20002b5c

000108e8 <ResetParametersForUnconfirmedTransmission>:
   108e8:	4b07      	ldr	r3, [pc, #28]	; (10908 <ResetParametersForUnconfirmedTransmission+0x20>)
   108ea:	001a      	movs	r2, r3
   108ec:	32f4      	adds	r2, #244	; 0xf4
   108ee:	7812      	ldrb	r2, [r2, #0]
   108f0:	2a01      	cmp	r2, #1
   108f2:	d105      	bne.n	10900 <ResetParametersForUnconfirmedTransmission+0x18>
   108f4:	0019      	movs	r1, r3
   108f6:	200e      	movs	r0, #14
   108f8:	317c      	adds	r1, #124	; 0x7c
   108fa:	780a      	ldrb	r2, [r1, #0]
   108fc:	4382      	bics	r2, r0
   108fe:	700a      	strb	r2, [r1, #0]
   10900:	2200      	movs	r2, #0
   10902:	33db      	adds	r3, #219	; 0xdb
   10904:	701a      	strb	r2, [r3, #0]
   10906:	4770      	bx	lr
   10908:	20002b5c 	.word	0x20002b5c

0001090c <SetJoinFailState>:
   1090c:	b570      	push	{r4, r5, r6, lr}
   1090e:	4c15      	ldr	r4, [pc, #84]	; (10964 <SetJoinFailState+0x58>)
   10910:	2604      	movs	r6, #4
   10912:	0025      	movs	r5, r4
   10914:	358c      	adds	r5, #140	; 0x8c
   10916:	782a      	ldrb	r2, [r5, #0]
   10918:	0021      	movs	r1, r4
   1091a:	43b2      	bics	r2, r6
   1091c:	702a      	strb	r2, [r5, #0]
   1091e:	22f0      	movs	r2, #240	; 0xf0
   10920:	317c      	adds	r1, #124	; 0x7c
   10922:	780b      	ldrb	r3, [r1, #0]
   10924:	4013      	ands	r3, r2
   10926:	700b      	strb	r3, [r1, #0]
   10928:	0023      	movs	r3, r4
   1092a:	33ff      	adds	r3, #255	; 0xff
   1092c:	7c5b      	ldrb	r3, [r3, #17]
   1092e:	069b      	lsls	r3, r3, #26
   10930:	d503      	bpl.n	1093a <SetJoinFailState+0x2e>
   10932:	0023      	movs	r3, r4
   10934:	2200      	movs	r2, #0
   10936:	337b      	adds	r3, #123	; 0x7b
   10938:	701a      	strb	r2, [r3, #0]
   1093a:	490b      	ldr	r1, [pc, #44]	; (10968 <SetJoinFailState+0x5c>)
   1093c:	794a      	ldrb	r2, [r1, #5]
   1093e:	790b      	ldrb	r3, [r1, #4]
   10940:	0212      	lsls	r2, r2, #8
   10942:	431a      	orrs	r2, r3
   10944:	798b      	ldrb	r3, [r1, #6]
   10946:	041b      	lsls	r3, r3, #16
   10948:	431a      	orrs	r2, r3
   1094a:	79cb      	ldrb	r3, [r1, #7]
   1094c:	061b      	lsls	r3, r3, #24
   1094e:	4313      	orrs	r3, r2
   10950:	d000      	beq.n	10954 <SetJoinFailState+0x48>
   10952:	4798      	blx	r3
   10954:	2300      	movs	r3, #0
   10956:	34f0      	adds	r4, #240	; 0xf0
   10958:	7023      	strb	r3, [r4, #0]
   1095a:	210b      	movs	r1, #11
   1095c:	4b03      	ldr	r3, [pc, #12]	; (1096c <SetJoinFailState+0x60>)
   1095e:	2001      	movs	r0, #1
   10960:	4798      	blx	r3
   10962:	bd70      	pop	{r4, r5, r6, pc}
   10964:	20002b5c 	.word	0x20002b5c
   10968:	20002ea4 	.word	0x20002ea4
   1096c:	0000dfe1 	.word	0x0000dfe1

00010970 <ExecuteRxParamSetupReq>:
   10970:	b5f0      	push	{r4, r5, r6, r7, lr}
   10972:	b085      	sub	sp, #20
   10974:	7805      	ldrb	r5, [r0, #0]
   10976:	0004      	movs	r4, r0
   10978:	1c41      	adds	r1, r0, #1
   1097a:	2204      	movs	r2, #4
   1097c:	4b36      	ldr	r3, [pc, #216]	; (10a58 <ExecuteRxParamSetupReq+0xe8>)
   1097e:	a803      	add	r0, sp, #12
   10980:	4798      	blx	r3
   10982:	2264      	movs	r2, #100	; 0x64
   10984:	9b03      	ldr	r3, [sp, #12]
   10986:	a903      	add	r1, sp, #12
   10988:	021b      	lsls	r3, r3, #8
   1098a:	0a1b      	lsrs	r3, r3, #8
   1098c:	4353      	muls	r3, r2
   1098e:	9303      	str	r3, [sp, #12]
   10990:	1d23      	adds	r3, r4, #4
   10992:	9301      	str	r3, [sp, #4]
   10994:	072b      	lsls	r3, r5, #28
   10996:	0f1b      	lsrs	r3, r3, #28
   10998:	b2da      	uxtb	r2, r3
   1099a:	9200      	str	r2, [sp, #0]
   1099c:	aa02      	add	r2, sp, #8
   1099e:	1c96      	adds	r6, r2, #2
   109a0:	066d      	lsls	r5, r5, #25
   109a2:	7033      	strb	r3, [r6, #0]
   109a4:	1cd7      	adds	r7, r2, #3
   109a6:	0f6d      	lsrs	r5, r5, #29
   109a8:	2001      	movs	r0, #1
   109aa:	4b2c      	ldr	r3, [pc, #176]	; (10a5c <ExecuteRxParamSetupReq+0xec>)
   109ac:	703d      	strb	r5, [r7, #0]
   109ae:	4798      	blx	r3
   109b0:	4c2b      	ldr	r4, [pc, #172]	; (10a60 <ExecuteRxParamSetupReq+0xf0>)
   109b2:	2808      	cmp	r0, #8
   109b4:	d109      	bne.n	109ca <ExecuteRxParamSetupReq+0x5a>
   109b6:	0023      	movs	r3, r4
   109b8:	33d8      	adds	r3, #216	; 0xd8
   109ba:	781a      	ldrb	r2, [r3, #0]
   109bc:	2303      	movs	r3, #3
   109be:	4353      	muls	r3, r2
   109c0:	18e3      	adds	r3, r4, r3
   109c2:	3390      	adds	r3, #144	; 0x90
   109c4:	789a      	ldrb	r2, [r3, #2]
   109c6:	4310      	orrs	r0, r2
   109c8:	7098      	strb	r0, [r3, #2]
   109ca:	0031      	movs	r1, r6
   109cc:	200f      	movs	r0, #15
   109ce:	4e23      	ldr	r6, [pc, #140]	; (10a5c <ExecuteRxParamSetupReq+0xec>)
   109d0:	47b0      	blx	r6
   109d2:	2808      	cmp	r0, #8
   109d4:	d10a      	bne.n	109ec <ExecuteRxParamSetupReq+0x7c>
   109d6:	0023      	movs	r3, r4
   109d8:	33d8      	adds	r3, #216	; 0xd8
   109da:	781a      	ldrb	r2, [r3, #0]
   109dc:	2303      	movs	r3, #3
   109de:	4353      	muls	r3, r2
   109e0:	2210      	movs	r2, #16
   109e2:	18e3      	adds	r3, r4, r3
   109e4:	3390      	adds	r3, #144	; 0x90
   109e6:	7899      	ldrb	r1, [r3, #2]
   109e8:	430a      	orrs	r2, r1
   109ea:	709a      	strb	r2, [r3, #2]
   109ec:	0039      	movs	r1, r7
   109ee:	2018      	movs	r0, #24
   109f0:	47b0      	blx	r6
   109f2:	2808      	cmp	r0, #8
   109f4:	d10a      	bne.n	10a0c <ExecuteRxParamSetupReq+0x9c>
   109f6:	0023      	movs	r3, r4
   109f8:	33d8      	adds	r3, #216	; 0xd8
   109fa:	781a      	ldrb	r2, [r3, #0]
   109fc:	2303      	movs	r3, #3
   109fe:	4353      	muls	r3, r2
   10a00:	2220      	movs	r2, #32
   10a02:	18e3      	adds	r3, r4, r3
   10a04:	3390      	adds	r3, #144	; 0x90
   10a06:	7899      	ldrb	r1, [r3, #2]
   10a08:	430a      	orrs	r2, r1
   10a0a:	709a      	strb	r2, [r3, #2]
   10a0c:	0023      	movs	r3, r4
   10a0e:	33d8      	adds	r3, #216	; 0xd8
   10a10:	781a      	ldrb	r2, [r3, #0]
   10a12:	2303      	movs	r3, #3
   10a14:	4353      	muls	r3, r2
   10a16:	18e3      	adds	r3, r4, r3
   10a18:	3390      	adds	r3, #144	; 0x90
   10a1a:	789e      	ldrb	r6, [r3, #2]
   10a1c:	06f3      	lsls	r3, r6, #27
   10a1e:	d518      	bpl.n	10a52 <ExecuteRxParamSetupReq+0xe2>
   10a20:	0733      	lsls	r3, r6, #28
   10a22:	d516      	bpl.n	10a52 <ExecuteRxParamSetupReq+0xe2>
   10a24:	06b6      	lsls	r6, r6, #26
   10a26:	0ff6      	lsrs	r6, r6, #31
   10a28:	2e01      	cmp	r6, #1
   10a2a:	d112      	bne.n	10a52 <ExecuteRxParamSetupReq+0xe2>
   10a2c:	0023      	movs	r3, r4
   10a2e:	33ee      	adds	r3, #238	; 0xee
   10a30:	701d      	strb	r5, [r3, #0]
   10a32:	0031      	movs	r1, r6
   10a34:	0030      	movs	r0, r6
   10a36:	4d0b      	ldr	r5, [pc, #44]	; (10a64 <ExecuteRxParamSetupReq+0xf4>)
   10a38:	47a8      	blx	r5
   10a3a:	9900      	ldr	r1, [sp, #0]
   10a3c:	9803      	ldr	r0, [sp, #12]
   10a3e:	4b0a      	ldr	r3, [pc, #40]	; (10a68 <ExecuteRxParamSetupReq+0xf8>)
   10a40:	4798      	blx	r3
   10a42:	2340      	movs	r3, #64	; 0x40
   10a44:	347c      	adds	r4, #124	; 0x7c
   10a46:	7862      	ldrb	r2, [r4, #1]
   10a48:	210b      	movs	r1, #11
   10a4a:	4313      	orrs	r3, r2
   10a4c:	7063      	strb	r3, [r4, #1]
   10a4e:	0030      	movs	r0, r6
   10a50:	47a8      	blx	r5
   10a52:	9801      	ldr	r0, [sp, #4]
   10a54:	b005      	add	sp, #20
   10a56:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10a58:	00019d11 	.word	0x00019d11
   10a5c:	0000d821 	.word	0x0000d821
   10a60:	20002b5c 	.word	0x20002b5c
   10a64:	0000dfe1 	.word	0x0000dfe1
   10a68:	00010895 	.word	0x00010895

00010a6c <ExecuteDutyCycle>:
   10a6c:	b570      	push	{r4, r5, r6, lr}
   10a6e:	7803      	ldrb	r3, [r0, #0]
   10a70:	1c46      	adds	r6, r0, #1
   10a72:	2b0f      	cmp	r3, #15
   10a74:	d80f      	bhi.n	10a96 <ExecuteDutyCycle+0x2a>
   10a76:	4c09      	ldr	r4, [pc, #36]	; (10a9c <ExecuteDutyCycle+0x30>)
   10a78:	210b      	movs	r1, #11
   10a7a:	0022      	movs	r2, r4
   10a7c:	2000      	movs	r0, #0
   10a7e:	3290      	adds	r2, #144	; 0x90
   10a80:	4d07      	ldr	r5, [pc, #28]	; (10aa0 <ExecuteDutyCycle+0x34>)
   10a82:	7013      	strb	r3, [r2, #0]
   10a84:	47a8      	blx	r5
   10a86:	2320      	movs	r3, #32
   10a88:	347c      	adds	r4, #124	; 0x7c
   10a8a:	7862      	ldrb	r2, [r4, #1]
   10a8c:	210b      	movs	r1, #11
   10a8e:	4313      	orrs	r3, r2
   10a90:	7063      	strb	r3, [r4, #1]
   10a92:	2001      	movs	r0, #1
   10a94:	47a8      	blx	r5
   10a96:	0030      	movs	r0, r6
   10a98:	bd70      	pop	{r4, r5, r6, pc}
   10a9a:	46c0      	nop			; (mov r8, r8)
   10a9c:	20002b5c 	.word	0x20002b5c
   10aa0:	0000dfe1 	.word	0x0000dfe1

00010aa4 <ExecuteDlChannel>:
   10aa4:	b5f0      	push	{r4, r5, r6, r7, lr}
   10aa6:	b089      	sub	sp, #36	; 0x24
   10aa8:	7805      	ldrb	r5, [r0, #0]
   10aaa:	ab02      	add	r3, sp, #8
   10aac:	1c41      	adds	r1, r0, #1
   10aae:	0007      	movs	r7, r0
   10ab0:	719d      	strb	r5, [r3, #6]
   10ab2:	1d9e      	adds	r6, r3, #6
   10ab4:	2204      	movs	r2, #4
   10ab6:	4b23      	ldr	r3, [pc, #140]	; (10b44 <ExecuteDlChannel+0xa0>)
   10ab8:	a805      	add	r0, sp, #20
   10aba:	4798      	blx	r3
   10abc:	9b05      	ldr	r3, [sp, #20]
   10abe:	a904      	add	r1, sp, #16
   10ac0:	021c      	lsls	r4, r3, #8
   10ac2:	2364      	movs	r3, #100	; 0x64
   10ac4:	0a24      	lsrs	r4, r4, #8
   10ac6:	435c      	muls	r4, r3
   10ac8:	1d3b      	adds	r3, r7, #4
   10aca:	9301      	str	r3, [sp, #4]
   10acc:	2301      	movs	r3, #1
   10ace:	2015      	movs	r0, #21
   10ad0:	704b      	strb	r3, [r1, #1]
   10ad2:	4b1d      	ldr	r3, [pc, #116]	; (10b48 <ExecuteDlChannel+0xa4>)
   10ad4:	9405      	str	r4, [sp, #20]
   10ad6:	700d      	strb	r5, [r1, #0]
   10ad8:	4798      	blx	r3
   10ada:	2808      	cmp	r0, #8
   10adc:	d12f      	bne.n	10b3e <ExecuteDlChannel+0x9a>
   10ade:	ab02      	add	r3, sp, #8
   10ae0:	1ddd      	adds	r5, r3, #7
   10ae2:	2300      	movs	r3, #0
   10ae4:	702b      	strb	r3, [r5, #0]
   10ae6:	7833      	ldrb	r3, [r6, #0]
   10ae8:	af06      	add	r7, sp, #24
   10aea:	713b      	strb	r3, [r7, #4]
   10aec:	002a      	movs	r2, r5
   10aee:	0031      	movs	r1, r6
   10af0:	300e      	adds	r0, #14
   10af2:	4b16      	ldr	r3, [pc, #88]	; (10b4c <ExecuteDlChannel+0xa8>)
   10af4:	9406      	str	r4, [sp, #24]
   10af6:	4798      	blx	r3
   10af8:	280a      	cmp	r0, #10
   10afa:	d00d      	beq.n	10b18 <ExecuteDlChannel+0x74>
   10afc:	782a      	ldrb	r2, [r5, #0]
   10afe:	2a01      	cmp	r2, #1
   10b00:	d10a      	bne.n	10b18 <ExecuteDlChannel+0x74>
   10b02:	4b13      	ldr	r3, [pc, #76]	; (10b50 <ExecuteDlChannel+0xac>)
   10b04:	0019      	movs	r1, r3
   10b06:	31d8      	adds	r1, #216	; 0xd8
   10b08:	7808      	ldrb	r0, [r1, #0]
   10b0a:	2103      	movs	r1, #3
   10b0c:	4341      	muls	r1, r0
   10b0e:	185b      	adds	r3, r3, r1
   10b10:	3390      	adds	r3, #144	; 0x90
   10b12:	78d9      	ldrb	r1, [r3, #3]
   10b14:	430a      	orrs	r2, r1
   10b16:	70da      	strb	r2, [r3, #3]
   10b18:	0039      	movs	r1, r7
   10b1a:	2034      	movs	r0, #52	; 0x34
   10b1c:	4b0d      	ldr	r3, [pc, #52]	; (10b54 <ExecuteDlChannel+0xb0>)
   10b1e:	4798      	blx	r3
   10b20:	2808      	cmp	r0, #8
   10b22:	d10c      	bne.n	10b3e <ExecuteDlChannel+0x9a>
   10b24:	4b0a      	ldr	r3, [pc, #40]	; (10b50 <ExecuteDlChannel+0xac>)
   10b26:	001a      	movs	r2, r3
   10b28:	32d8      	adds	r2, #216	; 0xd8
   10b2a:	7811      	ldrb	r1, [r2, #0]
   10b2c:	2203      	movs	r2, #3
   10b2e:	434a      	muls	r2, r1
   10b30:	189b      	adds	r3, r3, r2
   10b32:	2280      	movs	r2, #128	; 0x80
   10b34:	3390      	adds	r3, #144	; 0x90
   10b36:	7899      	ldrb	r1, [r3, #2]
   10b38:	4252      	negs	r2, r2
   10b3a:	430a      	orrs	r2, r1
   10b3c:	709a      	strb	r2, [r3, #2]
   10b3e:	9801      	ldr	r0, [sp, #4]
   10b40:	b009      	add	sp, #36	; 0x24
   10b42:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10b44:	00019d11 	.word	0x00019d11
   10b48:	0000d821 	.word	0x0000d821
   10b4c:	0000d805 	.word	0x0000d805
   10b50:	20002b5c 	.word	0x20002b5c
   10b54:	0000d92d 	.word	0x0000d92d

00010b58 <ExecuteTxParamSetup>:
   10b58:	220f      	movs	r2, #15
   10b5a:	b513      	push	{r0, r1, r4, lr}
   10b5c:	7803      	ldrb	r3, [r0, #0]
   10b5e:	4c0f      	ldr	r4, [pc, #60]	; (10b9c <ExecuteTxParamSetup+0x44>)
   10b60:	401a      	ands	r2, r3
   10b62:	5ca2      	ldrb	r2, [r4, r2]
   10b64:	2401      	movs	r4, #1
   10b66:	a901      	add	r1, sp, #4
   10b68:	700a      	strb	r2, [r1, #0]
   10b6a:	111a      	asrs	r2, r3, #4
   10b6c:	115b      	asrs	r3, r3, #5
   10b6e:	4023      	ands	r3, r4
   10b70:	40a3      	lsls	r3, r4
   10b72:	4022      	ands	r2, r4
   10b74:	4313      	orrs	r3, r2
   10b76:	704b      	strb	r3, [r1, #1]
   10b78:	1904      	adds	r4, r0, r4
   10b7a:	4b09      	ldr	r3, [pc, #36]	; (10ba0 <ExecuteTxParamSetup+0x48>)
   10b7c:	2035      	movs	r0, #53	; 0x35
   10b7e:	4798      	blx	r3
   10b80:	2808      	cmp	r0, #8
   10b82:	d009      	beq.n	10b98 <ExecuteTxParamSetup+0x40>
   10b84:	4b07      	ldr	r3, [pc, #28]	; (10ba4 <ExecuteTxParamSetup+0x4c>)
   10b86:	001a      	movs	r2, r3
   10b88:	32d8      	adds	r2, #216	; 0xd8
   10b8a:	7811      	ldrb	r1, [r2, #0]
   10b8c:	2203      	movs	r2, #3
   10b8e:	434a      	muls	r2, r1
   10b90:	189b      	adds	r3, r3, r2
   10b92:	22ff      	movs	r2, #255	; 0xff
   10b94:	3391      	adds	r3, #145	; 0x91
   10b96:	701a      	strb	r2, [r3, #0]
   10b98:	0020      	movs	r0, r4
   10b9a:	bd16      	pop	{r1, r2, r4, pc}
   10b9c:	0002021f 	.word	0x0002021f
   10ba0:	0000d92d 	.word	0x0000d92d
   10ba4:	20002b5c 	.word	0x20002b5c

00010ba8 <ExecuteLinkAdr>:
   10ba8:	220f      	movs	r2, #15
   10baa:	b5f0      	push	{r4, r5, r6, r7, lr}
   10bac:	0005      	movs	r5, r0
   10bae:	7803      	ldrb	r3, [r0, #0]
   10bb0:	b089      	sub	sp, #36	; 0x24
   10bb2:	401a      	ands	r2, r3
   10bb4:	a905      	add	r1, sp, #20
   10bb6:	700a      	strb	r2, [r1, #0]
   10bb8:	aa04      	add	r2, sp, #16
   10bba:	1d96      	adds	r6, r2, #6
   10bbc:	091b      	lsrs	r3, r3, #4
   10bbe:	7153      	strb	r3, [r2, #5]
   10bc0:	1c41      	adds	r1, r0, #1
   10bc2:	2202      	movs	r2, #2
   10bc4:	0030      	movs	r0, r6
   10bc6:	4b35      	ldr	r3, [pc, #212]	; (10c9c <ExecuteLinkAdr+0xf4>)
   10bc8:	4798      	blx	r3
   10bca:	2201      	movs	r2, #1
   10bcc:	1d2b      	adds	r3, r5, #4
   10bce:	9303      	str	r3, [sp, #12]
   10bd0:	78eb      	ldrb	r3, [r5, #3]
   10bd2:	4f33      	ldr	r7, [pc, #204]	; (10ca0 <ExecuteLinkAdr+0xf8>)
   10bd4:	4c33      	ldr	r4, [pc, #204]	; (10ca4 <ExecuteLinkAdr+0xfc>)
   10bd6:	065b      	lsls	r3, r3, #25
   10bd8:	0f5b      	lsrs	r3, r3, #29
   10bda:	9300      	str	r3, [sp, #0]
   10bdc:	5d3b      	ldrb	r3, [r7, r4]
   10bde:	a906      	add	r1, sp, #24
   10be0:	4393      	bics	r3, r2
   10be2:	1892      	adds	r2, r2, r2
   10be4:	4393      	bics	r3, r2
   10be6:	3202      	adds	r2, #2
   10be8:	4393      	bics	r3, r2
   10bea:	553b      	strb	r3, [r7, r4]
   10bec:	466b      	mov	r3, sp
   10bee:	781b      	ldrb	r3, [r3, #0]
   10bf0:	8836      	ldrh	r6, [r6, #0]
   10bf2:	700b      	strb	r3, [r1, #0]
   10bf4:	2038      	movs	r0, #56	; 0x38
   10bf6:	4b2c      	ldr	r3, [pc, #176]	; (10ca8 <ExecuteLinkAdr+0x100>)
   10bf8:	804e      	strh	r6, [r1, #2]
   10bfa:	4798      	blx	r3
   10bfc:	2808      	cmp	r0, #8
   10bfe:	d116      	bne.n	10c2e <ExecuteLinkAdr+0x86>
   10c00:	466b      	mov	r3, sp
   10c02:	781b      	ldrb	r3, [r3, #0]
   10c04:	a907      	add	r1, sp, #28
   10c06:	708b      	strb	r3, [r1, #2]
   10c08:	3014      	adds	r0, #20
   10c0a:	4b28      	ldr	r3, [pc, #160]	; (10cac <ExecuteLinkAdr+0x104>)
   10c0c:	800e      	strh	r6, [r1, #0]
   10c0e:	4798      	blx	r3
   10c10:	2201      	movs	r2, #1
   10c12:	5d3b      	ldrb	r3, [r7, r4]
   10c14:	2010      	movs	r0, #16
   10c16:	4313      	orrs	r3, r2
   10c18:	553b      	strb	r3, [r7, r4]
   10c1a:	ab04      	add	r3, sp, #16
   10c1c:	1d59      	adds	r1, r3, #5
   10c1e:	4b22      	ldr	r3, [pc, #136]	; (10ca8 <ExecuteLinkAdr+0x100>)
   10c20:	4798      	blx	r3
   10c22:	2808      	cmp	r0, #8
   10c24:	d103      	bne.n	10c2e <ExecuteLinkAdr+0x86>
   10c26:	2202      	movs	r2, #2
   10c28:	5d3b      	ldrb	r3, [r7, r4]
   10c2a:	4313      	orrs	r3, r2
   10c2c:	553b      	strb	r3, [r7, r4]
   10c2e:	af05      	add	r7, sp, #20
   10c30:	4b1d      	ldr	r3, [pc, #116]	; (10ca8 <ExecuteLinkAdr+0x100>)
   10c32:	0039      	movs	r1, r7
   10c34:	201d      	movs	r0, #29
   10c36:	4798      	blx	r3
   10c38:	4b19      	ldr	r3, [pc, #100]	; (10ca0 <ExecuteLinkAdr+0xf8>)
   10c3a:	2808      	cmp	r0, #8
   10c3c:	d103      	bne.n	10c46 <ExecuteLinkAdr+0x9e>
   10c3e:	2204      	movs	r2, #4
   10c40:	5d19      	ldrb	r1, [r3, r4]
   10c42:	430a      	orrs	r2, r1
   10c44:	551a      	strb	r2, [r3, r4]
   10c46:	2207      	movs	r2, #7
   10c48:	5d19      	ldrb	r1, [r3, r4]
   10c4a:	4011      	ands	r1, r2
   10c4c:	4291      	cmp	r1, r2
   10c4e:	d11d      	bne.n	10c8c <ExecuteLinkAdr+0xe4>
   10c50:	4a17      	ldr	r2, [pc, #92]	; (10cb0 <ExecuteLinkAdr+0x108>)
   10c52:	2470      	movs	r4, #112	; 0x70
   10c54:	549e      	strb	r6, [r3, r2]
   10c56:	189a      	adds	r2, r3, r2
   10c58:	0a36      	lsrs	r6, r6, #8
   10c5a:	7056      	strb	r6, [r2, #1]
   10c5c:	aa04      	add	r2, sp, #16
   10c5e:	7950      	ldrb	r0, [r2, #5]
   10c60:	2286      	movs	r2, #134	; 0x86
   10c62:	0092      	lsls	r2, r2, #2
   10c64:	5498      	strb	r0, [r3, r2]
   10c66:	78ea      	ldrb	r2, [r5, #3]
   10c68:	4812      	ldr	r0, [pc, #72]	; (10cb4 <ExecuteLinkAdr+0x10c>)
   10c6a:	0912      	lsrs	r2, r2, #4
   10c6c:	400a      	ands	r2, r1
   10c6e:	5c19      	ldrb	r1, [r3, r0]
   10c70:	0112      	lsls	r2, r2, #4
   10c72:	43a1      	bics	r1, r4
   10c74:	430a      	orrs	r2, r1
   10c76:	541a      	strb	r2, [r3, r0]
   10c78:	78e9      	ldrb	r1, [r5, #3]
   10c7a:	3c61      	subs	r4, #97	; 0x61
   10c7c:	b2d2      	uxtb	r2, r2
   10c7e:	4021      	ands	r1, r4
   10c80:	43a2      	bics	r2, r4
   10c82:	430a      	orrs	r2, r1
   10c84:	541a      	strb	r2, [r3, r0]
   10c86:	7839      	ldrb	r1, [r7, #0]
   10c88:	4a0b      	ldr	r2, [pc, #44]	; (10cb8 <ExecuteLinkAdr+0x110>)
   10c8a:	5499      	strb	r1, [r3, r2]
   10c8c:	4904      	ldr	r1, [pc, #16]	; (10ca0 <ExecuteLinkAdr+0xf8>)
   10c8e:	4a0b      	ldr	r2, [pc, #44]	; (10cbc <ExecuteLinkAdr+0x114>)
   10c90:	9803      	ldr	r0, [sp, #12]
   10c92:	5c8b      	ldrb	r3, [r1, r2]
   10c94:	3301      	adds	r3, #1
   10c96:	548b      	strb	r3, [r1, r2]
   10c98:	b009      	add	sp, #36	; 0x24
   10c9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10c9c:	00019d11 	.word	0x00019d11
   10ca0:	20002b5c 	.word	0x20002b5c
   10ca4:	00000217 	.word	0x00000217
   10ca8:	0000d821 	.word	0x0000d821
   10cac:	0000d92d 	.word	0x0000d92d
   10cb0:	0000021b 	.word	0x0000021b
   10cb4:	0000021d 	.word	0x0000021d
   10cb8:	00000219 	.word	0x00000219
   10cbc:	0000021a 	.word	0x0000021a

00010cc0 <ExecuteDevTimeAns>:
   10cc0:	b510      	push	{r4, lr}
   10cc2:	0001      	movs	r1, r0
   10cc4:	0004      	movs	r4, r0
   10cc6:	2204      	movs	r2, #4
   10cc8:	4b04      	ldr	r3, [pc, #16]	; (10cdc <ExecuteDevTimeAns+0x1c>)
   10cca:	4805      	ldr	r0, [pc, #20]	; (10ce0 <ExecuteDevTimeAns+0x20>)
   10ccc:	4798      	blx	r3
   10cce:	238b      	movs	r3, #139	; 0x8b
   10cd0:	7921      	ldrb	r1, [r4, #4]
   10cd2:	4a04      	ldr	r2, [pc, #16]	; (10ce4 <ExecuteDevTimeAns+0x24>)
   10cd4:	009b      	lsls	r3, r3, #2
   10cd6:	1d60      	adds	r0, r4, #5
   10cd8:	54d1      	strb	r1, [r2, r3]
   10cda:	bd10      	pop	{r4, pc}
   10cdc:	00019d11 	.word	0x00019d11
   10ce0:	20002d84 	.word	0x20002d84
   10ce4:	20002b5c 	.word	0x20002b5c

00010ce8 <PrepareJoinRequestFrame>:
   10ce8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   10cea:	2210      	movs	r2, #16
   10cec:	4d22      	ldr	r5, [pc, #136]	; (10d78 <PrepareJoinRequestFrame+0x90>)
   10cee:	4b23      	ldr	r3, [pc, #140]	; (10d7c <PrepareJoinRequestFrame+0x94>)
   10cf0:	32ff      	adds	r2, #255	; 0xff
   10cf2:	2100      	movs	r1, #0
   10cf4:	0028      	movs	r0, r5
   10cf6:	4798      	blx	r3
   10cf8:	2300      	movs	r3, #0
   10cfa:	4c21      	ldr	r4, [pc, #132]	; (10d80 <PrepareJoinRequestFrame+0x98>)
   10cfc:	702b      	strb	r3, [r5, #0]
   10cfe:	4b21      	ldr	r3, [pc, #132]	; (10d84 <PrepareJoinRequestFrame+0x9c>)
   10d00:	5ce3      	ldrb	r3, [r4, r3]
   10d02:	2b00      	cmp	r3, #0
   10d04:	d006      	beq.n	10d14 <PrepareJoinRequestFrame+0x2c>
   10d06:	4920      	ldr	r1, [pc, #128]	; (10d88 <PrepareJoinRequestFrame+0xa0>)
   10d08:	2006      	movs	r0, #6
   10d0a:	4e20      	ldr	r6, [pc, #128]	; (10d8c <PrepareJoinRequestFrame+0xa4>)
   10d0c:	47b0      	blx	r6
   10d0e:	4920      	ldr	r1, [pc, #128]	; (10d90 <PrepareJoinRequestFrame+0xa8>)
   10d10:	2007      	movs	r0, #7
   10d12:	47b0      	blx	r6
   10d14:	2300      	movs	r3, #0
   10d16:	205c      	movs	r0, #92	; 0x5c
   10d18:	1ac1      	subs	r1, r0, r3
   10d1a:	5c61      	ldrb	r1, [r4, r1]
   10d1c:	18ea      	adds	r2, r5, r3
   10d1e:	3301      	adds	r3, #1
   10d20:	7051      	strb	r1, [r2, #1]
   10d22:	2b08      	cmp	r3, #8
   10d24:	d1f8      	bne.n	10d18 <PrepareJoinRequestFrame+0x30>
   10d26:	2300      	movs	r3, #0
   10d28:	2064      	movs	r0, #100	; 0x64
   10d2a:	1ac1      	subs	r1, r0, r3
   10d2c:	5c61      	ldrb	r1, [r4, r1]
   10d2e:	18ea      	adds	r2, r5, r3
   10d30:	3301      	adds	r3, #1
   10d32:	7251      	strb	r1, [r2, #9]
   10d34:	2b08      	cmp	r3, #8
   10d36:	d1f8      	bne.n	10d2a <PrepareJoinRequestFrame+0x42>
   10d38:	4b16      	ldr	r3, [pc, #88]	; (10d94 <PrepareJoinRequestFrame+0xac>)
   10d3a:	4798      	blx	r3
   10d3c:	4b16      	ldr	r3, [pc, #88]	; (10d98 <PrepareJoinRequestFrame+0xb0>)
   10d3e:	4917      	ldr	r1, [pc, #92]	; (10d9c <PrepareJoinRequestFrame+0xb4>)
   10d40:	4798      	blx	r3
   10d42:	34c4      	adds	r4, #196	; 0xc4
   10d44:	8021      	strh	r1, [r4, #0]
   10d46:	2202      	movs	r2, #2
   10d48:	0021      	movs	r1, r4
   10d4a:	4815      	ldr	r0, [pc, #84]	; (10da0 <PrepareJoinRequestFrame+0xb8>)
   10d4c:	4c15      	ldr	r4, [pc, #84]	; (10da4 <PrepareJoinRequestFrame+0xbc>)
   10d4e:	47a0      	blx	r4
   10d50:	2313      	movs	r3, #19
   10d52:	4e15      	ldr	r6, [pc, #84]	; (10da8 <PrepareJoinRequestFrame+0xc0>)
   10d54:	9300      	str	r3, [sp, #0]
   10d56:	0032      	movs	r2, r6
   10d58:	002b      	movs	r3, r5
   10d5a:	2100      	movs	r1, #0
   10d5c:	4d13      	ldr	r5, [pc, #76]	; (10dac <PrepareJoinRequestFrame+0xc4>)
   10d5e:	4814      	ldr	r0, [pc, #80]	; (10db0 <PrepareJoinRequestFrame+0xc8>)
   10d60:	47a8      	blx	r5
   10d62:	0031      	movs	r1, r6
   10d64:	2204      	movs	r2, #4
   10d66:	a803      	add	r0, sp, #12
   10d68:	47a0      	blx	r4
   10d6a:	2204      	movs	r2, #4
   10d6c:	a903      	add	r1, sp, #12
   10d6e:	4811      	ldr	r0, [pc, #68]	; (10db4 <PrepareJoinRequestFrame+0xcc>)
   10d70:	47a0      	blx	r4
   10d72:	2017      	movs	r0, #23
   10d74:	b004      	add	sp, #16
   10d76:	bd70      	pop	{r4, r5, r6, pc}
   10d78:	20002d91 	.word	0x20002d91
   10d7c:	00019e35 	.word	0x00019e35
   10d80:	20002b5c 	.word	0x20002b5c
   10d84:	00000221 	.word	0x00000221
   10d88:	20002bb1 	.word	0x20002bb1
   10d8c:	0000dc45 	.word	0x0000dc45
   10d90:	20002bb9 	.word	0x20002bb9
   10d94:	00019fd5 	.word	0x00019fd5
   10d98:	0001688d 	.word	0x0001688d
   10d9c:	0000ffff 	.word	0x0000ffff
   10da0:	20002da2 	.word	0x20002da2
   10da4:	00019d11 	.word	0x00019d11
   10da8:	20001110 	.word	0x20001110
   10dac:	0000dced 	.word	0x0000dced
   10db0:	20002ba1 	.word	0x20002ba1
   10db4:	20002da4 	.word	0x20002da4

00010db8 <ConfigureRadioRx>:
   10db8:	b5f0      	push	{r4, r5, r6, r7, lr}
   10dba:	b087      	sub	sp, #28
   10dbc:	466b      	mov	r3, sp
   10dbe:	2600      	movs	r6, #0
   10dc0:	1ddc      	adds	r4, r3, #7
   10dc2:	71d8      	strb	r0, [r3, #7]
   10dc4:	729e      	strb	r6, [r3, #10]
   10dc6:	466a      	mov	r2, sp
   10dc8:	2301      	movs	r3, #1
   10dca:	72d3      	strb	r3, [r2, #11]
   10dcc:	2215      	movs	r2, #21
   10dce:	ad03      	add	r5, sp, #12
   10dd0:	4f11      	ldr	r7, [pc, #68]	; (10e18 <ConfigureRadioRx+0x60>)
   10dd2:	9100      	str	r1, [sp, #0]
   10dd4:	446a      	add	r2, sp
   10dd6:	0021      	movs	r1, r4
   10dd8:	2023      	movs	r0, #35	; 0x23
   10dda:	80ae      	strh	r6, [r5, #4]
   10ddc:	47b8      	blx	r7
   10dde:	2216      	movs	r2, #22
   10de0:	0021      	movs	r1, r4
   10de2:	446a      	add	r2, sp
   10de4:	2024      	movs	r0, #36	; 0x24
   10de6:	47b8      	blx	r7
   10de8:	2217      	movs	r2, #23
   10dea:	0021      	movs	r1, r4
   10dec:	446a      	add	r2, sp
   10dee:	2025      	movs	r0, #37	; 0x25
   10df0:	47b8      	blx	r7
   10df2:	9b00      	ldr	r3, [sp, #0]
   10df4:	0028      	movs	r0, r5
   10df6:	9303      	str	r3, [sp, #12]
   10df8:	4b08      	ldr	r3, [pc, #32]	; (10e1c <ConfigureRadioRx+0x64>)
   10dfa:	80ae      	strh	r6, [r5, #4]
   10dfc:	4798      	blx	r3
   10dfe:	230a      	movs	r3, #10
   10e00:	446b      	add	r3, sp
   10e02:	0019      	movs	r1, r3
   10e04:	4c06      	ldr	r4, [pc, #24]	; (10e20 <ConfigureRadioRx+0x68>)
   10e06:	2014      	movs	r0, #20
   10e08:	47a0      	blx	r4
   10e0a:	230b      	movs	r3, #11
   10e0c:	446b      	add	r3, sp
   10e0e:	0019      	movs	r1, r3
   10e10:	2006      	movs	r0, #6
   10e12:	47a0      	blx	r4
   10e14:	b007      	add	sp, #28
   10e16:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10e18:	0000d805 	.word	0x0000d805
   10e1c:	000101cd 	.word	0x000101cd
   10e20:	00014bd5 	.word	0x00014bd5

00010e24 <LorawanReceiveWindow1Callback>:
   10e24:	b537      	push	{r0, r1, r2, r4, r5, lr}
   10e26:	4c18      	ldr	r4, [pc, #96]	; (10e88 <LorawanReceiveWindow1Callback+0x64>)
   10e28:	0023      	movs	r3, r4
   10e2a:	337c      	adds	r3, #124	; 0x7c
   10e2c:	781b      	ldrb	r3, [r3, #0]
   10e2e:	b25a      	sxtb	r2, r3
   10e30:	2a00      	cmp	r2, #0
   10e32:	db28      	blt.n	10e86 <LorawanReceiveWindow1Callback+0x62>
   10e34:	0022      	movs	r2, r4
   10e36:	32f4      	adds	r2, #244	; 0xf4
   10e38:	7812      	ldrb	r2, [r2, #0]
   10e3a:	2a04      	cmp	r2, #4
   10e3c:	d103      	bne.n	10e46 <LorawanReceiveWindow1Callback+0x22>
   10e3e:	07db      	lsls	r3, r3, #31
   10e40:	d501      	bpl.n	10e46 <LorawanReceiveWindow1Callback+0x22>
   10e42:	4b12      	ldr	r3, [pc, #72]	; (10e8c <LorawanReceiveWindow1Callback+0x68>)
   10e44:	4798      	blx	r3
   10e46:	0021      	movs	r1, r4
   10e48:	220e      	movs	r2, #14
   10e4a:	317c      	adds	r1, #124	; 0x7c
   10e4c:	780b      	ldrb	r3, [r1, #0]
   10e4e:	ad01      	add	r5, sp, #4
   10e50:	4393      	bics	r3, r2
   10e52:	001a      	movs	r2, r3
   10e54:	2306      	movs	r3, #6
   10e56:	4313      	orrs	r3, r2
   10e58:	0022      	movs	r2, r4
   10e5a:	700b      	strb	r3, [r1, #0]
   10e5c:	3268      	adds	r2, #104	; 0x68
   10e5e:	6e63      	ldr	r3, [r4, #100]	; 0x64
   10e60:	7811      	ldrb	r1, [r2, #0]
   10e62:	0a1b      	lsrs	r3, r3, #8
   10e64:	3469      	adds	r4, #105	; 0x69
   10e66:	0609      	lsls	r1, r1, #24
   10e68:	4319      	orrs	r1, r3
   10e6a:	7820      	ldrb	r0, [r4, #0]
   10e6c:	4b08      	ldr	r3, [pc, #32]	; (10e90 <LorawanReceiveWindow1Callback+0x6c>)
   10e6e:	4798      	blx	r3
   10e70:	2300      	movs	r3, #0
   10e72:	702b      	strb	r3, [r5, #0]
   10e74:	466b      	mov	r3, sp
   10e76:	0021      	movs	r1, r4
   10e78:	1d9a      	adds	r2, r3, #6
   10e7a:	2003      	movs	r0, #3
   10e7c:	4b05      	ldr	r3, [pc, #20]	; (10e94 <LorawanReceiveWindow1Callback+0x70>)
   10e7e:	4798      	blx	r3
   10e80:	0028      	movs	r0, r5
   10e82:	4b05      	ldr	r3, [pc, #20]	; (10e98 <LorawanReceiveWindow1Callback+0x74>)
   10e84:	4798      	blx	r3
   10e86:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
   10e88:	20002b5c 	.word	0x20002b5c
   10e8c:	00014205 	.word	0x00014205
   10e90:	00010db9 	.word	0x00010db9
   10e94:	0000d805 	.word	0x0000d805
   10e98:	00015dd9 	.word	0x00015dd9

00010e9c <ConfigureRadioTx>:
   10e9c:	b5f0      	push	{r4, r5, r6, r7, lr}
   10e9e:	2517      	movs	r5, #23
   10ea0:	2300      	movs	r3, #0
   10ea2:	2616      	movs	r6, #22
   10ea4:	2701      	movs	r7, #1
   10ea6:	b087      	sub	sp, #28
   10ea8:	ac01      	add	r4, sp, #4
   10eaa:	446d      	add	r5, sp
   10eac:	9001      	str	r0, [sp, #4]
   10eae:	702b      	strb	r3, [r5, #0]
   10eb0:	0020      	movs	r0, r4
   10eb2:	4b10      	ldr	r3, [pc, #64]	; (10ef4 <ConfigureRadioTx+0x58>)
   10eb4:	446e      	add	r6, sp
   10eb6:	9102      	str	r1, [sp, #8]
   10eb8:	9203      	str	r2, [sp, #12]
   10eba:	7037      	strb	r7, [r6, #0]
   10ebc:	4798      	blx	r3
   10ebe:	79e3      	ldrb	r3, [r4, #7]
   10ec0:	4c0d      	ldr	r4, [pc, #52]	; (10ef8 <ConfigureRadioTx+0x5c>)
   10ec2:	2b00      	cmp	r3, #0
   10ec4:	d00a      	beq.n	10edc <ConfigureRadioTx+0x40>
   10ec6:	4b0d      	ldr	r3, [pc, #52]	; (10efc <ConfigureRadioTx+0x60>)
   10ec8:	4a0d      	ldr	r2, [pc, #52]	; (10f00 <ConfigureRadioTx+0x64>)
   10eca:	490e      	ldr	r1, [pc, #56]	; (10f04 <ConfigureRadioTx+0x68>)
   10ecc:	54d7      	strb	r7, [r2, r3]
   10ece:	200b      	movs	r0, #11
   10ed0:	4b0d      	ldr	r3, [pc, #52]	; (10f08 <ConfigureRadioTx+0x6c>)
   10ed2:	4798      	blx	r3
   10ed4:	210a      	movs	r1, #10
   10ed6:	200b      	movs	r0, #11
   10ed8:	4469      	add	r1, sp
   10eda:	47a0      	blx	r4
   10edc:	a903      	add	r1, sp, #12
   10ede:	2004      	movs	r0, #4
   10ee0:	47a0      	blx	r4
   10ee2:	0031      	movs	r1, r6
   10ee4:	2014      	movs	r0, #20
   10ee6:	47a0      	blx	r4
   10ee8:	0029      	movs	r1, r5
   10eea:	2006      	movs	r0, #6
   10eec:	47a0      	blx	r4
   10eee:	b007      	add	sp, #28
   10ef0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10ef2:	46c0      	nop			; (mov r8, r8)
   10ef4:	000101cd 	.word	0x000101cd
   10ef8:	00014bd5 	.word	0x00014bd5
   10efc:	00000216 	.word	0x00000216
   10f00:	20002b5c 	.word	0x20002b5c
   10f04:	20002d71 	.word	0x20002d71
   10f08:	00014ae5 	.word	0x00014ae5

00010f0c <LorawanGetChAndInitiateRadioTransmit>:
   10f0c:	2301      	movs	r3, #1
   10f0e:	b530      	push	{r4, r5, lr}
   10f10:	4c44      	ldr	r4, [pc, #272]	; (11024 <LorawanGetChAndInitiateRadioTransmit+0x118>)
   10f12:	b089      	sub	sp, #36	; 0x24
   10f14:	a902      	add	r1, sp, #8
   10f16:	700b      	strb	r3, [r1, #0]
   10f18:	0023      	movs	r3, r4
   10f1a:	33e1      	adds	r3, #225	; 0xe1
   10f1c:	781b      	ldrb	r3, [r3, #0]
   10f1e:	704b      	strb	r3, [r1, #1]
   10f20:	0023      	movs	r3, r4
   10f22:	33df      	adds	r3, #223	; 0xdf
   10f24:	781b      	ldrb	r3, [r3, #0]
   10f26:	708b      	strb	r3, [r1, #2]
   10f28:	0023      	movs	r3, r4
   10f2a:	33f4      	adds	r3, #244	; 0xf4
   10f2c:	781b      	ldrb	r3, [r3, #0]
   10f2e:	2b01      	cmp	r3, #1
   10f30:	d108      	bne.n	10f44 <LorawanGetChAndInitiateRadioTransmit+0x38>
   10f32:	0020      	movs	r0, r4
   10f34:	220e      	movs	r2, #14
   10f36:	307c      	adds	r0, #124	; 0x7c
   10f38:	7803      	ldrb	r3, [r0, #0]
   10f3a:	4393      	bics	r3, r2
   10f3c:	001a      	movs	r2, r3
   10f3e:	230c      	movs	r3, #12
   10f40:	4313      	orrs	r3, r2
   10f42:	7003      	strb	r3, [r0, #0]
   10f44:	aa05      	add	r2, sp, #20
   10f46:	202f      	movs	r0, #47	; 0x2f
   10f48:	4d37      	ldr	r5, [pc, #220]	; (11028 <LorawanGetChAndInitiateRadioTransmit+0x11c>)
   10f4a:	47a8      	blx	r5
   10f4c:	0023      	movs	r3, r4
   10f4e:	2808      	cmp	r0, #8
   10f50:	d131      	bne.n	10fb6 <LorawanGetChAndInitiateRadioTransmit+0xaa>
   10f52:	33f4      	adds	r3, #244	; 0xf4
   10f54:	781b      	ldrb	r3, [r3, #0]
   10f56:	ad03      	add	r5, sp, #12
   10f58:	2b04      	cmp	r3, #4
   10f5a:	d104      	bne.n	10f66 <LorawanGetChAndInitiateRadioTransmit+0x5a>
   10f5c:	3b03      	subs	r3, #3
   10f5e:	702b      	strb	r3, [r5, #0]
   10f60:	0028      	movs	r0, r5
   10f62:	4b32      	ldr	r3, [pc, #200]	; (1102c <LorawanGetChAndInitiateRadioTransmit+0x120>)
   10f64:	4798      	blx	r3
   10f66:	9805      	ldr	r0, [sp, #20]
   10f68:	4b31      	ldr	r3, [pc, #196]	; (11030 <LorawanGetChAndInitiateRadioTransmit+0x124>)
   10f6a:	9906      	ldr	r1, [sp, #24]
   10f6c:	9a07      	ldr	r2, [sp, #28]
   10f6e:	4798      	blx	r3
   10f70:	0023      	movs	r3, r4
   10f72:	33c6      	adds	r3, #198	; 0xc6
   10f74:	881b      	ldrh	r3, [r3, #0]
   10f76:	0028      	movs	r0, r5
   10f78:	702b      	strb	r3, [r5, #0]
   10f7a:	4b2e      	ldr	r3, [pc, #184]	; (11034 <LorawanGetChAndInitiateRadioTransmit+0x128>)
   10f7c:	606b      	str	r3, [r5, #4]
   10f7e:	4b2e      	ldr	r3, [pc, #184]	; (11038 <LorawanGetChAndInitiateRadioTransmit+0x12c>)
   10f80:	4798      	blx	r3
   10f82:	2800      	cmp	r0, #0
   10f84:	d109      	bne.n	10f9a <LorawanGetChAndInitiateRadioTransmit+0x8e>
   10f86:	220e      	movs	r2, #14
   10f88:	347c      	adds	r4, #124	; 0x7c
   10f8a:	7823      	ldrb	r3, [r4, #0]
   10f8c:	4393      	bics	r3, r2
   10f8e:	001a      	movs	r2, r3
   10f90:	2302      	movs	r3, #2
   10f92:	4313      	orrs	r3, r2
   10f94:	7023      	strb	r3, [r4, #0]
   10f96:	b009      	add	sp, #36	; 0x24
   10f98:	bd30      	pop	{r4, r5, pc}
   10f9a:	2200      	movs	r2, #0
   10f9c:	4b27      	ldr	r3, [pc, #156]	; (1103c <LorawanGetChAndInitiateRadioTransmit+0x130>)
   10f9e:	4928      	ldr	r1, [pc, #160]	; (11040 <LorawanGetChAndInitiateRadioTransmit+0x134>)
   10fa0:	5ce3      	ldrb	r3, [r4, r3]
   10fa2:	34f3      	adds	r4, #243	; 0xf3
   10fa4:	4359      	muls	r1, r3
   10fa6:	4b27      	ldr	r3, [pc, #156]	; (11044 <LorawanGetChAndInitiateRadioTransmit+0x138>)
   10fa8:	7820      	ldrb	r0, [r4, #0]
   10faa:	18c9      	adds	r1, r1, r3
   10fac:	4b26      	ldr	r3, [pc, #152]	; (11048 <LorawanGetChAndInitiateRadioTransmit+0x13c>)
   10fae:	9200      	str	r2, [sp, #0]
   10fb0:	4c26      	ldr	r4, [pc, #152]	; (1104c <LorawanGetChAndInitiateRadioTransmit+0x140>)
   10fb2:	47a0      	blx	r4
   10fb4:	e7ef      	b.n	10f96 <LorawanGetChAndInitiateRadioTransmit+0x8a>
   10fb6:	33ff      	adds	r3, #255	; 0xff
   10fb8:	7c5b      	ldrb	r3, [r3, #17]
   10fba:	079a      	lsls	r2, r3, #30
   10fbc:	d515      	bpl.n	10fea <LorawanGetChAndInitiateRadioTransmit+0xde>
   10fbe:	aa03      	add	r2, sp, #12
   10fc0:	4923      	ldr	r1, [pc, #140]	; (11050 <LorawanGetChAndInitiateRadioTransmit+0x144>)
   10fc2:	2026      	movs	r0, #38	; 0x26
   10fc4:	47a8      	blx	r5
   10fc6:	9b03      	ldr	r3, [sp, #12]
   10fc8:	1c5a      	adds	r2, r3, #1
   10fca:	d001      	beq.n	10fd0 <LorawanGetChAndInitiateRadioTransmit+0xc4>
   10fcc:	3314      	adds	r3, #20
   10fce:	9303      	str	r3, [sp, #12]
   10fd0:	21fa      	movs	r1, #250	; 0xfa
   10fd2:	4b1a      	ldr	r3, [pc, #104]	; (1103c <LorawanGetChAndInitiateRadioTransmit+0x130>)
   10fd4:	9a03      	ldr	r2, [sp, #12]
   10fd6:	5ce3      	ldrb	r3, [r4, r3]
   10fd8:	0089      	lsls	r1, r1, #2
   10fda:	1ad3      	subs	r3, r2, r3
   10fdc:	2200      	movs	r2, #0
   10fde:	4359      	muls	r1, r3
   10fe0:	34e9      	adds	r4, #233	; 0xe9
   10fe2:	7820      	ldrb	r0, [r4, #0]
   10fe4:	9200      	str	r2, [sp, #0]
   10fe6:	4b1b      	ldr	r3, [pc, #108]	; (11054 <LorawanGetChAndInitiateRadioTransmit+0x148>)
   10fe8:	e7e2      	b.n	10fb0 <LorawanGetChAndInitiateRadioTransmit+0xa4>
   10fea:	075b      	lsls	r3, r3, #29
   10fec:	d508      	bpl.n	11000 <LorawanGetChAndInitiateRadioTransmit+0xf4>
   10fee:	aa03      	add	r2, sp, #12
   10ff0:	4917      	ldr	r1, [pc, #92]	; (11050 <LorawanGetChAndInitiateRadioTransmit+0x144>)
   10ff2:	2033      	movs	r0, #51	; 0x33
   10ff4:	47a8      	blx	r5
   10ff6:	9b03      	ldr	r3, [sp, #12]
   10ff8:	1c5a      	adds	r2, r3, #1
   10ffa:	d0e9      	beq.n	10fd0 <LorawanGetChAndInitiateRadioTransmit+0xc4>
   10ffc:	3301      	adds	r3, #1
   10ffe:	e7e6      	b.n	10fce <LorawanGetChAndInitiateRadioTransmit+0xc2>
   11000:	0023      	movs	r3, r4
   11002:	2201      	movs	r2, #1
   11004:	338c      	adds	r3, #140	; 0x8c
   11006:	781b      	ldrb	r3, [r3, #0]
   11008:	401a      	ands	r2, r3
   1100a:	d108      	bne.n	1101e <LorawanGetChAndInitiateRadioTransmit+0x112>
   1100c:	4b0b      	ldr	r3, [pc, #44]	; (1103c <LorawanGetChAndInitiateRadioTransmit+0x130>)
   1100e:	490c      	ldr	r1, [pc, #48]	; (11040 <LorawanGetChAndInitiateRadioTransmit+0x134>)
   11010:	5ce3      	ldrb	r3, [r4, r3]
   11012:	34e9      	adds	r4, #233	; 0xe9
   11014:	4359      	muls	r1, r3
   11016:	4b0b      	ldr	r3, [pc, #44]	; (11044 <LorawanGetChAndInitiateRadioTransmit+0x138>)
   11018:	7820      	ldrb	r0, [r4, #0]
   1101a:	18c9      	adds	r1, r1, r3
   1101c:	e7e2      	b.n	10fe4 <LorawanGetChAndInitiateRadioTransmit+0xd8>
   1101e:	4b0e      	ldr	r3, [pc, #56]	; (11058 <LorawanGetChAndInitiateRadioTransmit+0x14c>)
   11020:	4798      	blx	r3
   11022:	e7b8      	b.n	10f96 <LorawanGetChAndInitiateRadioTransmit+0x8a>
   11024:	20002b5c 	.word	0x20002b5c
   11028:	0000d805 	.word	0x0000d805
   1102c:	00015dd9 	.word	0x00015dd9
   11030:	00010e9d 	.word	0x00010e9d
   11034:	20002da1 	.word	0x20002da1
   11038:	00015505 	.word	0x00015505
   1103c:	0000021f 	.word	0x0000021f
   11040:	fffffc18 	.word	0xfffffc18
   11044:	001e8480 	.word	0x001e8480
   11048:	0001105d 	.word	0x0001105d
   1104c:	0000ed11 	.word	0x0000ed11
   11050:	20002c3b 	.word	0x20002c3b
   11054:	00011115 	.word	0x00011115
   11058:	00010841 	.word	0x00010841

0001105c <TransmissionErrorCallback>:
   1105c:	b530      	push	{r4, r5, lr}
   1105e:	4c22      	ldr	r4, [pc, #136]	; (110e8 <TransmissionErrorCallback+0x8c>)
   11060:	2501      	movs	r5, #1
   11062:	0023      	movs	r3, r4
   11064:	b08b      	sub	sp, #44	; 0x2c
   11066:	a903      	add	r1, sp, #12
   11068:	700d      	strb	r5, [r1, #0]
   1106a:	33e1      	adds	r3, #225	; 0xe1
   1106c:	781b      	ldrb	r3, [r3, #0]
   1106e:	aa07      	add	r2, sp, #28
   11070:	704b      	strb	r3, [r1, #1]
   11072:	0023      	movs	r3, r4
   11074:	33df      	adds	r3, #223	; 0xdf
   11076:	781b      	ldrb	r3, [r3, #0]
   11078:	202f      	movs	r0, #47	; 0x2f
   1107a:	708b      	strb	r3, [r1, #2]
   1107c:	4b1b      	ldr	r3, [pc, #108]	; (110ec <TransmissionErrorCallback+0x90>)
   1107e:	4798      	blx	r3
   11080:	2808      	cmp	r0, #8
   11082:	d121      	bne.n	110c8 <TransmissionErrorCallback+0x6c>
   11084:	a804      	add	r0, sp, #16
   11086:	4b1a      	ldr	r3, [pc, #104]	; (110f0 <TransmissionErrorCallback+0x94>)
   11088:	7005      	strb	r5, [r0, #0]
   1108a:	4798      	blx	r3
   1108c:	9807      	ldr	r0, [sp, #28]
   1108e:	4b19      	ldr	r3, [pc, #100]	; (110f4 <TransmissionErrorCallback+0x98>)
   11090:	9908      	ldr	r1, [sp, #32]
   11092:	9a09      	ldr	r2, [sp, #36]	; 0x24
   11094:	4798      	blx	r3
   11096:	0023      	movs	r3, r4
   11098:	33c6      	adds	r3, #198	; 0xc6
   1109a:	881b      	ldrh	r3, [r3, #0]
   1109c:	a805      	add	r0, sp, #20
   1109e:	7003      	strb	r3, [r0, #0]
   110a0:	4b15      	ldr	r3, [pc, #84]	; (110f8 <TransmissionErrorCallback+0x9c>)
   110a2:	6043      	str	r3, [r0, #4]
   110a4:	4b15      	ldr	r3, [pc, #84]	; (110fc <TransmissionErrorCallback+0xa0>)
   110a6:	4798      	blx	r3
   110a8:	2800      	cmp	r0, #0
   110aa:	d01a      	beq.n	110e2 <TransmissionErrorCallback+0x86>
   110ac:	0023      	movs	r3, r4
   110ae:	33f4      	adds	r3, #244	; 0xf4
   110b0:	781b      	ldrb	r3, [r3, #0]
   110b2:	42ab      	cmp	r3, r5
   110b4:	d108      	bne.n	110c8 <TransmissionErrorCallback+0x6c>
   110b6:	0021      	movs	r1, r4
   110b8:	220e      	movs	r2, #14
   110ba:	317c      	adds	r1, #124	; 0x7c
   110bc:	780b      	ldrb	r3, [r1, #0]
   110be:	4393      	bics	r3, r2
   110c0:	001a      	movs	r2, r3
   110c2:	230c      	movs	r3, #12
   110c4:	4313      	orrs	r3, r2
   110c6:	700b      	strb	r3, [r1, #0]
   110c8:	2200      	movs	r2, #0
   110ca:	4b0d      	ldr	r3, [pc, #52]	; (11100 <TransmissionErrorCallback+0xa4>)
   110cc:	490d      	ldr	r1, [pc, #52]	; (11104 <TransmissionErrorCallback+0xa8>)
   110ce:	5ce3      	ldrb	r3, [r4, r3]
   110d0:	34f3      	adds	r4, #243	; 0xf3
   110d2:	4359      	muls	r1, r3
   110d4:	4b0c      	ldr	r3, [pc, #48]	; (11108 <TransmissionErrorCallback+0xac>)
   110d6:	7820      	ldrb	r0, [r4, #0]
   110d8:	18c9      	adds	r1, r1, r3
   110da:	9200      	str	r2, [sp, #0]
   110dc:	4b0b      	ldr	r3, [pc, #44]	; (1110c <TransmissionErrorCallback+0xb0>)
   110de:	4c0c      	ldr	r4, [pc, #48]	; (11110 <TransmissionErrorCallback+0xb4>)
   110e0:	47a0      	blx	r4
   110e2:	b00b      	add	sp, #44	; 0x2c
   110e4:	bd30      	pop	{r4, r5, pc}
   110e6:	46c0      	nop			; (mov r8, r8)
   110e8:	20002b5c 	.word	0x20002b5c
   110ec:	0000d805 	.word	0x0000d805
   110f0:	00015dd9 	.word	0x00015dd9
   110f4:	00010e9d 	.word	0x00010e9d
   110f8:	20002da1 	.word	0x20002da1
   110fc:	00015505 	.word	0x00015505
   11100:	0000021f 	.word	0x0000021f
   11104:	fffffc18 	.word	0xfffffc18
   11108:	001e8480 	.word	0x001e8480
   1110c:	0001105d 	.word	0x0001105d
   11110:	0000ed11 	.word	0x0000ed11

00011114 <UnconfirmedTransmissionCallback>:
   11114:	b5f0      	push	{r4, r5, r6, r7, lr}
   11116:	4c37      	ldr	r4, [pc, #220]	; (111f4 <UnconfirmedTransmissionCallback+0xe0>)
   11118:	b08b      	sub	sp, #44	; 0x2c
   1111a:	0023      	movs	r3, r4
   1111c:	33c6      	adds	r3, #198	; 0xc6
   1111e:	881b      	ldrh	r3, [r3, #0]
   11120:	af05      	add	r7, sp, #20
   11122:	703b      	strb	r3, [r7, #0]
   11124:	4b34      	ldr	r3, [pc, #208]	; (111f8 <UnconfirmedTransmissionCallback+0xe4>)
   11126:	a903      	add	r1, sp, #12
   11128:	9306      	str	r3, [sp, #24]
   1112a:	2301      	movs	r3, #1
   1112c:	700b      	strb	r3, [r1, #0]
   1112e:	0023      	movs	r3, r4
   11130:	0026      	movs	r6, r4
   11132:	33e1      	adds	r3, #225	; 0xe1
   11134:	781b      	ldrb	r3, [r3, #0]
   11136:	36df      	adds	r6, #223	; 0xdf
   11138:	704b      	strb	r3, [r1, #1]
   1113a:	7833      	ldrb	r3, [r6, #0]
   1113c:	aa07      	add	r2, sp, #28
   1113e:	202f      	movs	r0, #47	; 0x2f
   11140:	4d2e      	ldr	r5, [pc, #184]	; (111fc <UnconfirmedTransmissionCallback+0xe8>)
   11142:	708b      	strb	r3, [r1, #2]
   11144:	47a8      	blx	r5
   11146:	2808      	cmp	r0, #8
   11148:	d12b      	bne.n	111a2 <UnconfirmedTransmissionCallback+0x8e>
   1114a:	2301      	movs	r3, #1
   1114c:	a804      	add	r0, sp, #16
   1114e:	7003      	strb	r3, [r0, #0]
   11150:	4b2b      	ldr	r3, [pc, #172]	; (11200 <UnconfirmedTransmissionCallback+0xec>)
   11152:	4798      	blx	r3
   11154:	9807      	ldr	r0, [sp, #28]
   11156:	4b2b      	ldr	r3, [pc, #172]	; (11204 <UnconfirmedTransmissionCallback+0xf0>)
   11158:	9908      	ldr	r1, [sp, #32]
   1115a:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1115c:	4798      	blx	r3
   1115e:	0038      	movs	r0, r7
   11160:	4b29      	ldr	r3, [pc, #164]	; (11208 <UnconfirmedTransmissionCallback+0xf4>)
   11162:	4798      	blx	r3
   11164:	2800      	cmp	r0, #0
   11166:	d01a      	beq.n	1119e <UnconfirmedTransmissionCallback+0x8a>
   11168:	0023      	movs	r3, r4
   1116a:	33f4      	adds	r3, #244	; 0xf4
   1116c:	781b      	ldrb	r3, [r3, #0]
   1116e:	2b01      	cmp	r3, #1
   11170:	d108      	bne.n	11184 <UnconfirmedTransmissionCallback+0x70>
   11172:	0021      	movs	r1, r4
   11174:	220e      	movs	r2, #14
   11176:	317c      	adds	r1, #124	; 0x7c
   11178:	780b      	ldrb	r3, [r1, #0]
   1117a:	4393      	bics	r3, r2
   1117c:	001a      	movs	r2, r3
   1117e:	230c      	movs	r3, #12
   11180:	4313      	orrs	r3, r2
   11182:	700b      	strb	r3, [r1, #0]
   11184:	2200      	movs	r2, #0
   11186:	4b21      	ldr	r3, [pc, #132]	; (1120c <UnconfirmedTransmissionCallback+0xf8>)
   11188:	4921      	ldr	r1, [pc, #132]	; (11210 <UnconfirmedTransmissionCallback+0xfc>)
   1118a:	5ce3      	ldrb	r3, [r4, r3]
   1118c:	34f3      	adds	r4, #243	; 0xf3
   1118e:	4359      	muls	r1, r3
   11190:	4b20      	ldr	r3, [pc, #128]	; (11214 <UnconfirmedTransmissionCallback+0x100>)
   11192:	7820      	ldrb	r0, [r4, #0]
   11194:	18c9      	adds	r1, r1, r3
   11196:	4b20      	ldr	r3, [pc, #128]	; (11218 <UnconfirmedTransmissionCallback+0x104>)
   11198:	9200      	str	r2, [sp, #0]
   1119a:	4c20      	ldr	r4, [pc, #128]	; (1121c <UnconfirmedTransmissionCallback+0x108>)
   1119c:	47a0      	blx	r4
   1119e:	b00b      	add	sp, #44	; 0x2c
   111a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   111a2:	23fa      	movs	r3, #250	; 0xfa
   111a4:	00db      	lsls	r3, r3, #3
   111a6:	9304      	str	r3, [sp, #16]
   111a8:	0023      	movs	r3, r4
   111aa:	33ff      	adds	r3, #255	; 0xff
   111ac:	7c5b      	ldrb	r3, [r3, #17]
   111ae:	079a      	lsls	r2, r3, #30
   111b0:	d515      	bpl.n	111de <UnconfirmedTransmissionCallback+0xca>
   111b2:	aa04      	add	r2, sp, #16
   111b4:	0031      	movs	r1, r6
   111b6:	2026      	movs	r0, #38	; 0x26
   111b8:	47a8      	blx	r5
   111ba:	9b04      	ldr	r3, [sp, #16]
   111bc:	1c5a      	adds	r2, r3, #1
   111be:	d001      	beq.n	111c4 <UnconfirmedTransmissionCallback+0xb0>
   111c0:	3314      	adds	r3, #20
   111c2:	9304      	str	r3, [sp, #16]
   111c4:	4b11      	ldr	r3, [pc, #68]	; (1120c <UnconfirmedTransmissionCallback+0xf8>)
   111c6:	9a04      	ldr	r2, [sp, #16]
   111c8:	5ce3      	ldrb	r3, [r4, r3]
   111ca:	21fa      	movs	r1, #250	; 0xfa
   111cc:	1ad3      	subs	r3, r2, r3
   111ce:	2200      	movs	r2, #0
   111d0:	0089      	lsls	r1, r1, #2
   111d2:	34e9      	adds	r4, #233	; 0xe9
   111d4:	4359      	muls	r1, r3
   111d6:	7820      	ldrb	r0, [r4, #0]
   111d8:	4b11      	ldr	r3, [pc, #68]	; (11220 <UnconfirmedTransmissionCallback+0x10c>)
   111da:	9200      	str	r2, [sp, #0]
   111dc:	e7dd      	b.n	1119a <UnconfirmedTransmissionCallback+0x86>
   111de:	075b      	lsls	r3, r3, #29
   111e0:	d5f0      	bpl.n	111c4 <UnconfirmedTransmissionCallback+0xb0>
   111e2:	aa04      	add	r2, sp, #16
   111e4:	0031      	movs	r1, r6
   111e6:	2033      	movs	r0, #51	; 0x33
   111e8:	47a8      	blx	r5
   111ea:	9b04      	ldr	r3, [sp, #16]
   111ec:	1c5a      	adds	r2, r3, #1
   111ee:	d0e9      	beq.n	111c4 <UnconfirmedTransmissionCallback+0xb0>
   111f0:	3301      	adds	r3, #1
   111f2:	e7e6      	b.n	111c2 <UnconfirmedTransmissionCallback+0xae>
   111f4:	20002b5c 	.word	0x20002b5c
   111f8:	20002da1 	.word	0x20002da1
   111fc:	0000d805 	.word	0x0000d805
   11200:	00015dd9 	.word	0x00015dd9
   11204:	00010e9d 	.word	0x00010e9d
   11208:	00015505 	.word	0x00015505
   1120c:	0000021f 	.word	0x0000021f
   11210:	fffffc18 	.word	0xfffffc18
   11214:	001e8480 	.word	0x001e8480
   11218:	0001105d 	.word	0x0001105d
   1121c:	0000ed11 	.word	0x0000ed11
   11220:	00011115 	.word	0x00011115

00011224 <UpdateJoinInProgress>:
   11224:	b570      	push	{r4, r5, r6, lr}
   11226:	2504      	movs	r5, #4
   11228:	4c0a      	ldr	r4, [pc, #40]	; (11254 <UpdateJoinInProgress+0x30>)
   1122a:	0002      	movs	r2, r0
   1122c:	0021      	movs	r1, r4
   1122e:	348c      	adds	r4, #140	; 0x8c
   11230:	7826      	ldrb	r6, [r4, #0]
   11232:	2001      	movs	r0, #1
   11234:	4335      	orrs	r5, r6
   11236:	7025      	strb	r5, [r4, #0]
   11238:	2407      	movs	r4, #7
   1123a:	4022      	ands	r2, r4
   1123c:	4082      	lsls	r2, r0
   1123e:	317c      	adds	r1, #124	; 0x7c
   11240:	780b      	ldrb	r3, [r1, #0]
   11242:	1924      	adds	r4, r4, r4
   11244:	4383      	bics	r3, r0
   11246:	43a3      	bics	r3, r4
   11248:	4313      	orrs	r3, r2
   1124a:	700b      	strb	r3, [r1, #0]
   1124c:	210b      	movs	r1, #11
   1124e:	4b02      	ldr	r3, [pc, #8]	; (11258 <UpdateJoinInProgress+0x34>)
   11250:	4798      	blx	r3
   11252:	bd70      	pop	{r4, r5, r6, pc}
   11254:	20002b5c 	.word	0x20002b5c
   11258:	0000dfe1 	.word	0x0000dfe1

0001125c <LORAWAN_Join>:
   1125c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1125e:	4c33      	ldr	r4, [pc, #204]	; (1132c <LORAWAN_Join+0xd0>)
   11260:	0006      	movs	r6, r0
   11262:	0023      	movs	r3, r4
   11264:	337c      	adds	r3, #124	; 0x7c
   11266:	781b      	ldrb	r3, [r3, #0]
   11268:	200f      	movs	r0, #15
   1126a:	b25a      	sxtb	r2, r3
   1126c:	2a00      	cmp	r2, #0
   1126e:	db4a      	blt.n	11306 <LORAWAN_Join+0xaa>
   11270:	3803      	subs	r0, #3
   11272:	065b      	lsls	r3, r3, #25
   11274:	d447      	bmi.n	11306 <LORAWAN_Join+0xaa>
   11276:	0023      	movs	r3, r4
   11278:	338c      	adds	r3, #140	; 0x8c
   1127a:	781b      	ldrb	r3, [r3, #0]
   1127c:	3007      	adds	r0, #7
   1127e:	075b      	lsls	r3, r3, #29
   11280:	d441      	bmi.n	11306 <LORAWAN_Join+0xaa>
   11282:	0023      	movs	r3, r4
   11284:	33f4      	adds	r3, #244	; 0xf4
   11286:	781b      	ldrb	r3, [r3, #0]
   11288:	2b04      	cmp	r3, #4
   1128a:	d037      	beq.n	112fc <LORAWAN_Join+0xa0>
   1128c:	0023      	movs	r3, r4
   1128e:	33f4      	adds	r3, #244	; 0xf4
   11290:	781b      	ldrb	r3, [r3, #0]
   11292:	2b01      	cmp	r3, #1
   11294:	d105      	bne.n	112a2 <LORAWAN_Join+0x46>
   11296:	0023      	movs	r3, r4
   11298:	337c      	adds	r3, #124	; 0x7c
   1129a:	781a      	ldrb	r2, [r3, #0]
   1129c:	230e      	movs	r3, #14
   1129e:	421a      	tst	r2, r3
   112a0:	d130      	bne.n	11304 <LORAWAN_Join+0xa8>
   112a2:	2102      	movs	r1, #2
   112a4:	2001      	movs	r0, #1
   112a6:	4d22      	ldr	r5, [pc, #136]	; (11330 <LORAWAN_Join+0xd4>)
   112a8:	7026      	strb	r6, [r4, #0]
   112aa:	47a8      	blx	r5
   112ac:	0023      	movs	r3, r4
   112ae:	33d6      	adds	r3, #214	; 0xd6
   112b0:	781b      	ldrb	r3, [r3, #0]
   112b2:	2e00      	cmp	r6, #0
   112b4:	d128      	bne.n	11308 <LORAWAN_Join+0xac>
   112b6:	200b      	movs	r0, #11
   112b8:	4003      	ands	r3, r0
   112ba:	4283      	cmp	r3, r0
   112bc:	d003      	beq.n	112c6 <LORAWAN_Join+0x6a>
   112be:	4b1d      	ldr	r3, [pc, #116]	; (11334 <LORAWAN_Join+0xd8>)
   112c0:	5ce3      	ldrb	r3, [r4, r3]
   112c2:	2b00      	cmp	r3, #0
   112c4:	d01f      	beq.n	11306 <LORAWAN_Join+0xaa>
   112c6:	0023      	movs	r3, r4
   112c8:	337c      	adds	r3, #124	; 0x7c
   112ca:	781b      	ldrb	r3, [r3, #0]
   112cc:	07db      	lsls	r3, r3, #31
   112ce:	d503      	bpl.n	112d8 <LORAWAN_Join+0x7c>
   112d0:	2100      	movs	r1, #0
   112d2:	203b      	movs	r0, #59	; 0x3b
   112d4:	4b18      	ldr	r3, [pc, #96]	; (11338 <LORAWAN_Join+0xdc>)
   112d6:	4798      	blx	r3
   112d8:	0022      	movs	r2, r4
   112da:	2001      	movs	r0, #1
   112dc:	327c      	adds	r2, #124	; 0x7c
   112de:	7813      	ldrb	r3, [r2, #0]
   112e0:	348c      	adds	r4, #140	; 0x8c
   112e2:	4383      	bics	r3, r0
   112e4:	7013      	strb	r3, [r2, #0]
   112e6:	2304      	movs	r3, #4
   112e8:	7822      	ldrb	r2, [r4, #0]
   112ea:	210b      	movs	r1, #11
   112ec:	4313      	orrs	r3, r2
   112ee:	7023      	strb	r3, [r4, #0]
   112f0:	47a8      	blx	r5
   112f2:	2000      	movs	r0, #0
   112f4:	4b11      	ldr	r3, [pc, #68]	; (1133c <LORAWAN_Join+0xe0>)
   112f6:	4798      	blx	r3
   112f8:	2008      	movs	r0, #8
   112fa:	e004      	b.n	11306 <LORAWAN_Join+0xaa>
   112fc:	4b10      	ldr	r3, [pc, #64]	; (11340 <LORAWAN_Join+0xe4>)
   112fe:	4798      	blx	r3
   11300:	2808      	cmp	r0, #8
   11302:	d0c3      	beq.n	1128c <LORAWAN_Join+0x30>
   11304:	2011      	movs	r0, #17
   11306:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
   11308:	2234      	movs	r2, #52	; 0x34
   1130a:	200b      	movs	r0, #11
   1130c:	4013      	ands	r3, r2
   1130e:	4293      	cmp	r3, r2
   11310:	d1f9      	bne.n	11306 <LORAWAN_Join+0xaa>
   11312:	3804      	subs	r0, #4
   11314:	4b0b      	ldr	r3, [pc, #44]	; (11344 <LORAWAN_Join+0xe8>)
   11316:	4798      	blx	r3
   11318:	2200      	movs	r2, #0
   1131a:	34f2      	adds	r4, #242	; 0xf2
   1131c:	7820      	ldrb	r0, [r4, #0]
   1131e:	4b0a      	ldr	r3, [pc, #40]	; (11348 <LORAWAN_Join+0xec>)
   11320:	9200      	str	r2, [sp, #0]
   11322:	490a      	ldr	r1, [pc, #40]	; (1134c <LORAWAN_Join+0xf0>)
   11324:	4c0a      	ldr	r4, [pc, #40]	; (11350 <LORAWAN_Join+0xf4>)
   11326:	47a0      	blx	r4
   11328:	e7e6      	b.n	112f8 <LORAWAN_Join+0x9c>
   1132a:	46c0      	nop			; (mov r8, r8)
   1132c:	20002b5c 	.word	0x20002b5c
   11330:	0000dfe1 	.word	0x0000dfe1
   11334:	00000221 	.word	0x00000221
   11338:	0000d92d 	.word	0x0000d92d
   1133c:	00014a61 	.word	0x00014a61
   11340:	00014165 	.word	0x00014165
   11344:	00011225 	.word	0x00011225
   11348:	00010061 	.word	0x00010061
   1134c:	0000c350 	.word	0x0000c350
   11350:	0000ed11 	.word	0x0000ed11

00011354 <EncryptFRMPayload>:
   11354:	b5f0      	push	{r4, r5, r6, r7, lr}
   11356:	0007      	movs	r7, r0
   11358:	2401      	movs	r4, #1
   1135a:	b089      	sub	sp, #36	; 0x24
   1135c:	9306      	str	r3, [sp, #24]
   1135e:	ab10      	add	r3, sp, #64	; 0x40
   11360:	781d      	ldrb	r5, [r3, #0]
   11362:	090b      	lsrs	r3, r1, #4
   11364:	9104      	str	r1, [sp, #16]
   11366:	9205      	str	r2, [sp, #20]
   11368:	9303      	str	r3, [sp, #12]
   1136a:	9b03      	ldr	r3, [sp, #12]
   1136c:	429c      	cmp	r4, r3
   1136e:	d907      	bls.n	11380 <EncryptFRMPayload+0x2c>
   11370:	260f      	movs	r6, #15
   11372:	9b04      	ldr	r3, [sp, #16]
   11374:	4033      	ands	r3, r6
   11376:	1e1e      	subs	r6, r3, #0
   11378:	d126      	bne.n	113c8 <EncryptFRMPayload+0x74>
   1137a:	2000      	movs	r0, #0
   1137c:	b009      	add	sp, #36	; 0x24
   1137e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11380:	9b12      	ldr	r3, [sp, #72]	; 0x48
   11382:	0022      	movs	r2, r4
   11384:	9300      	str	r3, [sp, #0]
   11386:	9906      	ldr	r1, [sp, #24]
   11388:	2301      	movs	r3, #1
   1138a:	9805      	ldr	r0, [sp, #20]
   1138c:	4e1e      	ldr	r6, [pc, #120]	; (11408 <EncryptFRMPayload+0xb4>)
   1138e:	47b0      	blx	r6
   11390:	4e1e      	ldr	r6, [pc, #120]	; (1140c <EncryptFRMPayload+0xb8>)
   11392:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   11394:	2101      	movs	r1, #1
   11396:	0030      	movs	r0, r6
   11398:	4b1d      	ldr	r3, [pc, #116]	; (11410 <EncryptFRMPayload+0xbc>)
   1139a:	4798      	blx	r3
   1139c:	2800      	cmp	r0, #0
   1139e:	d1ed      	bne.n	1137c <EncryptFRMPayload+0x28>
   113a0:	1e63      	subs	r3, r4, #1
   113a2:	011b      	lsls	r3, r3, #4
   113a4:	18fb      	adds	r3, r7, r3
   113a6:	9307      	str	r3, [sp, #28]
   113a8:	9b07      	ldr	r3, [sp, #28]
   113aa:	182a      	adds	r2, r5, r0
   113ac:	5c19      	ldrb	r1, [r3, r0]
   113ae:	5d83      	ldrb	r3, [r0, r6]
   113b0:	b2d2      	uxtb	r2, r2
   113b2:	4059      	eors	r1, r3
   113b4:	9b11      	ldr	r3, [sp, #68]	; 0x44
   113b6:	3001      	adds	r0, #1
   113b8:	5499      	strb	r1, [r3, r2]
   113ba:	2810      	cmp	r0, #16
   113bc:	d1f4      	bne.n	113a8 <EncryptFRMPayload+0x54>
   113be:	3510      	adds	r5, #16
   113c0:	3401      	adds	r4, #1
   113c2:	b2ed      	uxtb	r5, r5
   113c4:	b2e4      	uxtb	r4, r4
   113c6:	e7d0      	b.n	1136a <EncryptFRMPayload+0x16>
   113c8:	9b12      	ldr	r3, [sp, #72]	; 0x48
   113ca:	0022      	movs	r2, r4
   113cc:	9300      	str	r3, [sp, #0]
   113ce:	9906      	ldr	r1, [sp, #24]
   113d0:	2301      	movs	r3, #1
   113d2:	9805      	ldr	r0, [sp, #20]
   113d4:	4c0c      	ldr	r4, [pc, #48]	; (11408 <EncryptFRMPayload+0xb4>)
   113d6:	47a0      	blx	r4
   113d8:	4c0c      	ldr	r4, [pc, #48]	; (1140c <EncryptFRMPayload+0xb8>)
   113da:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   113dc:	2101      	movs	r1, #1
   113de:	0020      	movs	r0, r4
   113e0:	4b0b      	ldr	r3, [pc, #44]	; (11410 <EncryptFRMPayload+0xbc>)
   113e2:	4798      	blx	r3
   113e4:	2800      	cmp	r0, #0
   113e6:	d1c9      	bne.n	1137c <EncryptFRMPayload+0x28>
   113e8:	9b03      	ldr	r3, [sp, #12]
   113ea:	011b      	lsls	r3, r3, #4
   113ec:	18fb      	adds	r3, r7, r3
   113ee:	5d07      	ldrb	r7, [r0, r4]
   113f0:	5c19      	ldrb	r1, [r3, r0]
   113f2:	182a      	adds	r2, r5, r0
   113f4:	4079      	eors	r1, r7
   113f6:	9f11      	ldr	r7, [sp, #68]	; 0x44
   113f8:	b2d2      	uxtb	r2, r2
   113fa:	3001      	adds	r0, #1
   113fc:	54b9      	strb	r1, [r7, r2]
   113fe:	b2c2      	uxtb	r2, r0
   11400:	4296      	cmp	r6, r2
   11402:	d8f4      	bhi.n	113ee <EncryptFRMPayload+0x9a>
   11404:	e7b9      	b.n	1137a <EncryptFRMPayload+0x26>
   11406:	46c0      	nop			; (mov r8, r8)
   11408:	0001018d 	.word	0x0001018d
   1140c:	20001110 	.word	0x20001110
   11410:	0000db81 	.word	0x0000db81

00011414 <UpdateTransactionCompleteCbParams>:
   11414:	2385      	movs	r3, #133	; 0x85
   11416:	2201      	movs	r2, #1
   11418:	b570      	push	{r4, r5, r6, lr}
   1141a:	0001      	movs	r1, r0
   1141c:	4c14      	ldr	r4, [pc, #80]	; (11470 <UpdateTransactionCompleteCbParams+0x5c>)
   1141e:	4815      	ldr	r0, [pc, #84]	; (11474 <UpdateTransactionCompleteCbParams+0x60>)
   11420:	009b      	lsls	r3, r3, #2
   11422:	54e2      	strb	r2, [r4, r3]
   11424:	7842      	ldrb	r2, [r0, #1]
   11426:	7803      	ldrb	r3, [r0, #0]
   11428:	0212      	lsls	r2, r2, #8
   1142a:	431a      	orrs	r2, r3
   1142c:	7883      	ldrb	r3, [r0, #2]
   1142e:	041b      	lsls	r3, r3, #16
   11430:	431a      	orrs	r2, r3
   11432:	78c3      	ldrb	r3, [r0, #3]
   11434:	061b      	lsls	r3, r3, #24
   11436:	4313      	orrs	r3, r2
   11438:	d010      	beq.n	1145c <UpdateTransactionCompleteCbParams+0x48>
   1143a:	0022      	movs	r2, r4
   1143c:	2504      	movs	r5, #4
   1143e:	32f8      	adds	r2, #248	; 0xf8
   11440:	6812      	ldr	r2, [r2, #0]
   11442:	422a      	tst	r2, r5
   11444:	d00a      	beq.n	1145c <UpdateTransactionCompleteCbParams+0x48>
   11446:	0022      	movs	r2, r4
   11448:	32fc      	adds	r2, #252	; 0xfc
   1144a:	6810      	ldr	r0, [r2, #0]
   1144c:	2800      	cmp	r0, #0
   1144e:	d005      	beq.n	1145c <UpdateTransactionCompleteCbParams+0x48>
   11450:	0022      	movs	r2, r4
   11452:	32ff      	adds	r2, #255	; 0xff
   11454:	7151      	strb	r1, [r2, #5]
   11456:	7055      	strb	r5, [r2, #1]
   11458:	4907      	ldr	r1, [pc, #28]	; (11478 <UpdateTransactionCompleteCbParams+0x64>)
   1145a:	4798      	blx	r3
   1145c:	2385      	movs	r3, #133	; 0x85
   1145e:	009b      	lsls	r3, r3, #2
   11460:	5ce3      	ldrb	r3, [r4, r3]
   11462:	2b00      	cmp	r3, #0
   11464:	d002      	beq.n	1146c <UpdateTransactionCompleteCbParams+0x58>
   11466:	2300      	movs	r3, #0
   11468:	34fc      	adds	r4, #252	; 0xfc
   1146a:	6023      	str	r3, [r4, #0]
   1146c:	bd70      	pop	{r4, r5, r6, pc}
   1146e:	46c0      	nop			; (mov r8, r8)
   11470:	20002b5c 	.word	0x20002b5c
   11474:	20002ea4 	.word	0x20002ea4
   11478:	20002c5c 	.word	0x20002c5c

0001147c <AssemblePacket>:
   1147c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1147e:	2710      	movs	r7, #16
   11480:	b08d      	sub	sp, #52	; 0x34
   11482:	9306      	str	r3, [sp, #24]
   11484:	ab04      	add	r3, sp, #16
   11486:	839f      	strh	r7, [r3, #28]
   11488:	231e      	movs	r3, #30
   1148a:	9208      	str	r2, [sp, #32]
   1148c:	aa04      	add	r2, sp, #16
   1148e:	189b      	adds	r3, r3, r2
   11490:	2500      	movs	r5, #0
   11492:	2210      	movs	r2, #16
   11494:	ac0a      	add	r4, sp, #40	; 0x28
   11496:	9007      	str	r0, [sp, #28]
   11498:	9109      	str	r1, [sp, #36]	; 0x24
   1149a:	32ff      	adds	r2, #255	; 0xff
   1149c:	0029      	movs	r1, r5
   1149e:	4eb5      	ldr	r6, [pc, #724]	; (11774 <AssemblePacket+0x2f8>)
   114a0:	7025      	strb	r5, [r4, #0]
   114a2:	48b5      	ldr	r0, [pc, #724]	; (11778 <AssemblePacket+0x2fc>)
   114a4:	801d      	strh	r5, [r3, #0]
   114a6:	47b0      	blx	r6
   114a8:	003a      	movs	r2, r7
   114aa:	0029      	movs	r1, r5
   114ac:	48b3      	ldr	r0, [pc, #716]	; (1177c <AssemblePacket+0x300>)
   114ae:	47b0      	blx	r6
   114b0:	221f      	movs	r2, #31
   114b2:	7823      	ldrb	r3, [r4, #0]
   114b4:	9907      	ldr	r1, [sp, #28]
   114b6:	4013      	ands	r3, r2
   114b8:	42a9      	cmp	r1, r5
   114ba:	d043      	beq.n	11544 <AssemblePacket+0xc8>
   114bc:	3a9f      	subs	r2, #159	; 0x9f
   114be:	4313      	orrs	r3, r2
   114c0:	7023      	strb	r3, [r4, #0]
   114c2:	4baf      	ldr	r3, [pc, #700]	; (11780 <AssemblePacket+0x304>)
   114c4:	3281      	adds	r2, #129	; 0x81
   114c6:	338c      	adds	r3, #140	; 0x8c
   114c8:	7819      	ldrb	r1, [r3, #0]
   114ca:	430a      	orrs	r2, r1
   114cc:	701a      	strb	r2, [r3, #0]
   114ce:	22e0      	movs	r2, #224	; 0xe0
   114d0:	7823      	ldrb	r3, [r4, #0]
   114d2:	48a9      	ldr	r0, [pc, #676]	; (11778 <AssemblePacket+0x2fc>)
   114d4:	4013      	ands	r3, r2
   114d6:	7023      	strb	r3, [r4, #0]
   114d8:	4ca9      	ldr	r4, [pc, #676]	; (11780 <AssemblePacket+0x304>)
   114da:	7403      	strb	r3, [r0, #16]
   114dc:	3adc      	subs	r2, #220	; 0xdc
   114de:	4ba9      	ldr	r3, [pc, #676]	; (11784 <AssemblePacket+0x308>)
   114e0:	3011      	adds	r0, #17
   114e2:	1c61      	adds	r1, r4, #1
   114e4:	4798      	blx	r3
   114e6:	2315      	movs	r3, #21
   114e8:	aa04      	add	r2, sp, #16
   114ea:	8393      	strh	r3, [r2, #28]
   114ec:	0023      	movs	r3, r4
   114ee:	337c      	adds	r3, #124	; 0x7c
   114f0:	781b      	ldrb	r3, [r3, #0]
   114f2:	2700      	movs	r7, #0
   114f4:	069b      	lsls	r3, r3, #26
   114f6:	d400      	bmi.n	114fa <AssemblePacket+0x7e>
   114f8:	e0fd      	b.n	116f6 <AssemblePacket+0x27a>
   114fa:	0023      	movs	r3, r4
   114fc:	33df      	adds	r3, #223	; 0xdf
   114fe:	781a      	ldrb	r2, [r3, #0]
   11500:	23ea      	movs	r3, #234	; 0xea
   11502:	469c      	mov	ip, r3
   11504:	44a4      	add	ip, r4
   11506:	4663      	mov	r3, ip
   11508:	781d      	ldrb	r5, [r3, #0]
   1150a:	42aa      	cmp	r2, r5
   1150c:	d200      	bcs.n	11510 <AssemblePacket+0x94>
   1150e:	e0f2      	b.n	116f6 <AssemblePacket+0x27a>
   11510:	0021      	movs	r1, r4
   11512:	0026      	movs	r6, r4
   11514:	4b9c      	ldr	r3, [pc, #624]	; (11788 <AssemblePacket+0x30c>)
   11516:	31c2      	adds	r1, #194	; 0xc2
   11518:	7818      	ldrb	r0, [r3, #0]
   1151a:	880b      	ldrh	r3, [r1, #0]
   1151c:	36d4      	adds	r6, #212	; 0xd4
   1151e:	3301      	adds	r3, #1
   11520:	b29b      	uxth	r3, r3
   11522:	800b      	strh	r3, [r1, #0]
   11524:	7836      	ldrb	r6, [r6, #0]
   11526:	42b3      	cmp	r3, r6
   11528:	d110      	bne.n	1154c <AssemblePacket+0xd0>
   1152a:	0023      	movs	r3, r4
   1152c:	33ed      	adds	r3, #237	; 0xed
   1152e:	701f      	strb	r7, [r3, #0]
   11530:	2380      	movs	r3, #128	; 0x80
   11532:	2040      	movs	r0, #64	; 0x40
   11534:	348c      	adds	r4, #140	; 0x8c
   11536:	425b      	negs	r3, r3
   11538:	7822      	ldrb	r2, [r4, #0]
   1153a:	4318      	orrs	r0, r3
   1153c:	3390      	adds	r3, #144	; 0x90
   1153e:	4313      	orrs	r3, r2
   11540:	7023      	strb	r3, [r4, #0]
   11542:	e02f      	b.n	115a4 <AssemblePacket+0x128>
   11544:	2240      	movs	r2, #64	; 0x40
   11546:	4313      	orrs	r3, r2
   11548:	7023      	strb	r3, [r4, #0]
   1154a:	e7c0      	b.n	114ce <AssemblePacket+0x52>
   1154c:	42b3      	cmp	r3, r6
   1154e:	d929      	bls.n	115a4 <AssemblePacket+0x128>
   11550:	42aa      	cmp	r2, r5
   11552:	d100      	bne.n	11556 <AssemblePacket+0xda>
   11554:	e0c9      	b.n	116ea <AssemblePacket+0x26e>
   11556:	0021      	movs	r1, r4
   11558:	0020      	movs	r0, r4
   1155a:	31ed      	adds	r1, #237	; 0xed
   1155c:	780b      	ldrb	r3, [r1, #0]
   1155e:	30d5      	adds	r0, #213	; 0xd5
   11560:	3301      	adds	r3, #1
   11562:	b2db      	uxtb	r3, r3
   11564:	700b      	strb	r3, [r1, #0]
   11566:	7800      	ldrb	r0, [r0, #0]
   11568:	3801      	subs	r0, #1
   1156a:	4283      	cmp	r3, r0
   1156c:	dbe0      	blt.n	11530 <AssemblePacket+0xb4>
   1156e:	700f      	strb	r7, [r1, #0]
   11570:	42aa      	cmp	r2, r5
   11572:	d90d      	bls.n	11590 <AssemblePacket+0x114>
   11574:	231b      	movs	r3, #27
   11576:	4666      	mov	r6, ip
   11578:	a904      	add	r1, sp, #16
   1157a:	3a01      	subs	r2, #1
   1157c:	185b      	adds	r3, r3, r1
   1157e:	701a      	strb	r2, [r3, #0]
   11580:	251b      	movs	r5, #27
   11582:	ab04      	add	r3, sp, #16
   11584:	18ed      	adds	r5, r5, r3
   11586:	7832      	ldrb	r2, [r6, #0]
   11588:	782b      	ldrb	r3, [r5, #0]
   1158a:	429a      	cmp	r2, r3
   1158c:	d800      	bhi.n	11590 <AssemblePacket+0x114>
   1158e:	e098      	b.n	116c2 <AssemblePacket+0x246>
   11590:	2380      	movs	r3, #128	; 0x80
   11592:	2040      	movs	r0, #64	; 0x40
   11594:	2210      	movs	r2, #16
   11596:	425b      	negs	r3, r3
   11598:	4318      	orrs	r0, r3
   1159a:	4b79      	ldr	r3, [pc, #484]	; (11780 <AssemblePacket+0x304>)
   1159c:	338c      	adds	r3, #140	; 0x8c
   1159e:	7819      	ldrb	r1, [r3, #0]
   115a0:	430a      	orrs	r2, r1
   115a2:	701a      	strb	r2, [r3, #0]
   115a4:	4d76      	ldr	r5, [pc, #472]	; (11780 <AssemblePacket+0x304>)
   115a6:	2102      	movs	r1, #2
   115a8:	002a      	movs	r2, r5
   115aa:	328c      	adds	r2, #140	; 0x8c
   115ac:	7813      	ldrb	r3, [r2, #0]
   115ae:	420b      	tst	r3, r1
   115b0:	d003      	beq.n	115ba <AssemblePacket+0x13e>
   115b2:	2420      	movs	r4, #32
   115b4:	438b      	bics	r3, r1
   115b6:	4320      	orrs	r0, r4
   115b8:	7013      	strb	r3, [r2, #0]
   115ba:	2310      	movs	r3, #16
   115bc:	0004      	movs	r4, r0
   115be:	439c      	bics	r4, r3
   115c0:	002b      	movs	r3, r5
   115c2:	33d8      	adds	r3, #216	; 0xd8
   115c4:	781b      	ldrb	r3, [r3, #0]
   115c6:	9307      	str	r3, [sp, #28]
   115c8:	2b00      	cmp	r3, #0
   115ca:	d003      	beq.n	115d4 <AssemblePacket+0x158>
   115cc:	9b06      	ldr	r3, [sp, #24]
   115ce:	2b00      	cmp	r3, #0
   115d0:	d000      	beq.n	115d4 <AssemblePacket+0x158>
   115d2:	e092      	b.n	116fa <AssemblePacket+0x27e>
   115d4:	230f      	movs	r3, #15
   115d6:	439c      	bics	r4, r3
   115d8:	0020      	movs	r0, r4
   115da:	ac0b      	add	r4, sp, #44	; 0x2c
   115dc:	8826      	ldrh	r6, [r4, #0]
   115de:	4f66      	ldr	r7, [pc, #408]	; (11778 <AssemblePacket+0x2fc>)
   115e0:	4b68      	ldr	r3, [pc, #416]	; (11784 <AssemblePacket+0x308>)
   115e2:	55b8      	strb	r0, [r7, r6]
   115e4:	1c70      	adds	r0, r6, #1
   115e6:	b280      	uxth	r0, r0
   115e8:	19c0      	adds	r0, r0, r7
   115ea:	2202      	movs	r2, #2
   115ec:	4967      	ldr	r1, [pc, #412]	; (1178c <AssemblePacket+0x310>)
   115ee:	4798      	blx	r3
   115f0:	9b07      	ldr	r3, [sp, #28]
   115f2:	3603      	adds	r6, #3
   115f4:	8026      	strh	r6, [r4, #0]
   115f6:	2b00      	cmp	r3, #0
   115f8:	d100      	bne.n	115fc <AssemblePacket+0x180>
   115fa:	e087      	b.n	1170c <AssemblePacket+0x290>
   115fc:	9b06      	ldr	r3, [sp, #24]
   115fe:	2b00      	cmp	r3, #0
   11600:	d004      	beq.n	1160c <AssemblePacket+0x190>
   11602:	2201      	movs	r2, #1
   11604:	0021      	movs	r1, r4
   11606:	0038      	movs	r0, r7
   11608:	4b61      	ldr	r3, [pc, #388]	; (11790 <AssemblePacket+0x314>)
   1160a:	4798      	blx	r3
   1160c:	466a      	mov	r2, sp
   1160e:	2124      	movs	r1, #36	; 0x24
   11610:	1852      	adds	r2, r2, r1
   11612:	8823      	ldrh	r3, [r4, #0]
   11614:	7812      	ldrb	r2, [r2, #0]
   11616:	1c5e      	adds	r6, r3, #1
   11618:	54fa      	strb	r2, [r7, r3]
   1161a:	9b06      	ldr	r3, [sp, #24]
   1161c:	b2b6      	uxth	r6, r6
   1161e:	8026      	strh	r6, [r4, #0]
   11620:	2b00      	cmp	r3, #0
   11622:	d100      	bne.n	11626 <AssemblePacket+0x1aa>
   11624:	e076      	b.n	11714 <AssemblePacket+0x298>
   11626:	001a      	movs	r2, r3
   11628:	19b8      	adds	r0, r7, r6
   1162a:	9908      	ldr	r1, [sp, #32]
   1162c:	4b55      	ldr	r3, [pc, #340]	; (11784 <AssemblePacket+0x308>)
   1162e:	4798      	blx	r3
   11630:	466b      	mov	r3, sp
   11632:	7e19      	ldrb	r1, [r3, #24]
   11634:	682b      	ldr	r3, [r5, #0]
   11636:	b2f6      	uxtb	r6, r6
   11638:	0a18      	lsrs	r0, r3, #8
   1163a:	792b      	ldrb	r3, [r5, #4]
   1163c:	1d2a      	adds	r2, r5, #4
   1163e:	061b      	lsls	r3, r3, #24
   11640:	4303      	orrs	r3, r0
   11642:	9304      	str	r3, [sp, #16]
   11644:	2301      	movs	r3, #1
   11646:	9301      	str	r3, [sp, #4]
   11648:	4b52      	ldr	r3, [pc, #328]	; (11794 <AssemblePacket+0x318>)
   1164a:	9703      	str	r7, [sp, #12]
   1164c:	9602      	str	r6, [sp, #8]
   1164e:	9300      	str	r3, [sp, #0]
   11650:	6fd3      	ldr	r3, [r2, #124]	; 0x7c
   11652:	9808      	ldr	r0, [sp, #32]
   11654:	2200      	movs	r2, #0
   11656:	4c50      	ldr	r4, [pc, #320]	; (11798 <AssemblePacket+0x31c>)
   11658:	47a0      	blx	r4
   1165a:	2800      	cmp	r0, #0
   1165c:	d002      	beq.n	11664 <AssemblePacket+0x1e8>
   1165e:	2020      	movs	r0, #32
   11660:	4b4e      	ldr	r3, [pc, #312]	; (1179c <AssemblePacket+0x320>)
   11662:	4798      	blx	r3
   11664:	aa0b      	add	r2, sp, #44	; 0x2c
   11666:	8813      	ldrh	r3, [r2, #0]
   11668:	9906      	ldr	r1, [sp, #24]
   1166a:	18cb      	adds	r3, r1, r3
   1166c:	8013      	strh	r3, [r2, #0]
   1166e:	4c44      	ldr	r4, [pc, #272]	; (11780 <AssemblePacket+0x304>)
   11670:	ae0b      	add	r6, sp, #44	; 0x2c
   11672:	6823      	ldr	r3, [r4, #0]
   11674:	8832      	ldrh	r2, [r6, #0]
   11676:	0a18      	lsrs	r0, r3, #8
   11678:	7923      	ldrb	r3, [r4, #4]
   1167a:	1d21      	adds	r1, r4, #4
   1167c:	061b      	lsls	r3, r3, #24
   1167e:	4303      	orrs	r3, r0
   11680:	9300      	str	r3, [sp, #0]
   11682:	3a10      	subs	r2, #16
   11684:	b2d2      	uxtb	r2, r2
   11686:	2349      	movs	r3, #73	; 0x49
   11688:	6fc9      	ldr	r1, [r1, #124]	; 0x7c
   1168a:	2000      	movs	r0, #0
   1168c:	4d44      	ldr	r5, [pc, #272]	; (117a0 <AssemblePacket+0x324>)
   1168e:	47a8      	blx	r5
   11690:	4f39      	ldr	r7, [pc, #228]	; (11778 <AssemblePacket+0x2fc>)
   11692:	2210      	movs	r2, #16
   11694:	4939      	ldr	r1, [pc, #228]	; (1177c <AssemblePacket+0x300>)
   11696:	0038      	movs	r0, r7
   11698:	4b3a      	ldr	r3, [pc, #232]	; (11784 <AssemblePacket+0x308>)
   1169a:	4798      	blx	r3
   1169c:	8833      	ldrh	r3, [r6, #0]
   1169e:	4a37      	ldr	r2, [pc, #220]	; (1177c <AssemblePacket+0x300>)
   116a0:	9300      	str	r3, [sp, #0]
   116a2:	2102      	movs	r1, #2
   116a4:	003b      	movs	r3, r7
   116a6:	4d3f      	ldr	r5, [pc, #252]	; (117a4 <AssemblePacket+0x328>)
   116a8:	483f      	ldr	r0, [pc, #252]	; (117a8 <AssemblePacket+0x32c>)
   116aa:	47a8      	blx	r5
   116ac:	8836      	ldrh	r6, [r6, #0]
   116ae:	2204      	movs	r2, #4
   116b0:	19f0      	adds	r0, r6, r7
   116b2:	4932      	ldr	r1, [pc, #200]	; (1177c <AssemblePacket+0x300>)
   116b4:	4b33      	ldr	r3, [pc, #204]	; (11784 <AssemblePacket+0x308>)
   116b6:	4798      	blx	r3
   116b8:	3e0c      	subs	r6, #12
   116ba:	34c6      	adds	r4, #198	; 0xc6
   116bc:	8026      	strh	r6, [r4, #0]
   116be:	b00d      	add	sp, #52	; 0x34
   116c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   116c2:	0029      	movs	r1, r5
   116c4:	2010      	movs	r0, #16
   116c6:	4f39      	ldr	r7, [pc, #228]	; (117ac <AssemblePacket+0x330>)
   116c8:	47b8      	blx	r7
   116ca:	2808      	cmp	r0, #8
   116cc:	d000      	beq.n	116d0 <AssemblePacket+0x254>
   116ce:	e75f      	b.n	11590 <AssemblePacket+0x114>
   116d0:	0029      	movs	r1, r5
   116d2:	3009      	adds	r0, #9
   116d4:	47b8      	blx	r7
   116d6:	782b      	ldrb	r3, [r5, #0]
   116d8:	2808      	cmp	r0, #8
   116da:	d047      	beq.n	1176c <AssemblePacket+0x2f0>
   116dc:	7832      	ldrb	r2, [r6, #0]
   116de:	429a      	cmp	r2, r3
   116e0:	d300      	bcc.n	116e4 <AssemblePacket+0x268>
   116e2:	e74d      	b.n	11580 <AssemblePacket+0x104>
   116e4:	3b01      	subs	r3, #1
   116e6:	702b      	strb	r3, [r5, #0]
   116e8:	e74a      	b.n	11580 <AssemblePacket+0x104>
   116ea:	800f      	strh	r7, [r1, #0]
   116ec:	2210      	movs	r2, #16
   116ee:	348c      	adds	r4, #140	; 0x8c
   116f0:	7823      	ldrb	r3, [r4, #0]
   116f2:	4393      	bics	r3, r2
   116f4:	e724      	b.n	11540 <AssemblePacket+0xc4>
   116f6:	2000      	movs	r0, #0
   116f8:	e7f8      	b.n	116ec <AssemblePacket+0x270>
   116fa:	4b2d      	ldr	r3, [pc, #180]	; (117b0 <AssemblePacket+0x334>)
   116fc:	4798      	blx	r3
   116fe:	220f      	movs	r2, #15
   11700:	0003      	movs	r3, r0
   11702:	0020      	movs	r0, r4
   11704:	4013      	ands	r3, r2
   11706:	4390      	bics	r0, r2
   11708:	4318      	orrs	r0, r3
   1170a:	e766      	b.n	115da <AssemblePacket+0x15e>
   1170c:	9b06      	ldr	r3, [sp, #24]
   1170e:	2b00      	cmp	r3, #0
   11710:	d000      	beq.n	11714 <AssemblePacket+0x298>
   11712:	e77b      	b.n	1160c <AssemblePacket+0x190>
   11714:	4d1a      	ldr	r5, [pc, #104]	; (11780 <AssemblePacket+0x304>)
   11716:	002b      	movs	r3, r5
   11718:	33d8      	adds	r3, #216	; 0xd8
   1171a:	781b      	ldrb	r3, [r3, #0]
   1171c:	2b00      	cmp	r3, #0
   1171e:	d0a6      	beq.n	1166e <AssemblePacket+0x1f2>
   11720:	261e      	movs	r6, #30
   11722:	ab04      	add	r3, sp, #16
   11724:	18f6      	adds	r6, r6, r3
   11726:	2200      	movs	r2, #0
   11728:	0031      	movs	r1, r6
   1172a:	4822      	ldr	r0, [pc, #136]	; (117b4 <AssemblePacket+0x338>)
   1172c:	4b18      	ldr	r3, [pc, #96]	; (11790 <AssemblePacket+0x314>)
   1172e:	4798      	blx	r3
   11730:	682b      	ldr	r3, [r5, #0]
   11732:	7831      	ldrb	r1, [r6, #0]
   11734:	0a18      	lsrs	r0, r3, #8
   11736:	792b      	ldrb	r3, [r5, #4]
   11738:	9703      	str	r7, [sp, #12]
   1173a:	061b      	lsls	r3, r3, #24
   1173c:	4303      	orrs	r3, r0
   1173e:	9304      	str	r3, [sp, #16]
   11740:	7823      	ldrb	r3, [r4, #0]
   11742:	1d2a      	adds	r2, r5, #4
   11744:	9302      	str	r3, [sp, #8]
   11746:	2302      	movs	r3, #2
   11748:	9301      	str	r3, [sp, #4]
   1174a:	4b17      	ldr	r3, [pc, #92]	; (117a8 <AssemblePacket+0x32c>)
   1174c:	4819      	ldr	r0, [pc, #100]	; (117b4 <AssemblePacket+0x338>)
   1174e:	9300      	str	r3, [sp, #0]
   11750:	6fd3      	ldr	r3, [r2, #124]	; 0x7c
   11752:	4d11      	ldr	r5, [pc, #68]	; (11798 <AssemblePacket+0x31c>)
   11754:	2200      	movs	r2, #0
   11756:	47a8      	blx	r5
   11758:	2800      	cmp	r0, #0
   1175a:	d002      	beq.n	11762 <AssemblePacket+0x2e6>
   1175c:	2020      	movs	r0, #32
   1175e:	4b0f      	ldr	r3, [pc, #60]	; (1179c <AssemblePacket+0x320>)
   11760:	4798      	blx	r3
   11762:	8823      	ldrh	r3, [r4, #0]
   11764:	8832      	ldrh	r2, [r6, #0]
   11766:	189b      	adds	r3, r3, r2
   11768:	8023      	strh	r3, [r4, #0]
   1176a:	e780      	b.n	1166e <AssemblePacket+0x1f2>
   1176c:	34df      	adds	r4, #223	; 0xdf
   1176e:	7023      	strb	r3, [r4, #0]
   11770:	e70e      	b.n	11590 <AssemblePacket+0x114>
   11772:	46c0      	nop			; (mov r8, r8)
   11774:	00019e35 	.word	0x00019e35
   11778:	20002d91 	.word	0x20002d91
   1177c:	20001110 	.word	0x20001110
   11780:	20002b5c 	.word	0x20002b5c
   11784:	00019d11 	.word	0x00019d11
   11788:	000201f6 	.word	0x000201f6
   1178c:	20002bdc 	.word	0x20002bdc
   11790:	0000fe55 	.word	0x0000fe55
   11794:	20002b91 	.word	0x20002b91
   11798:	00011355 	.word	0x00011355
   1179c:	00011415 	.word	0x00011415
   117a0:	0001018d 	.word	0x0001018d
   117a4:	0000dced 	.word	0x0000dced
   117a8:	20002b81 	.word	0x20002b81
   117ac:	0000d821 	.word	0x0000d821
   117b0:	0000fd51 	.word	0x0000fd51
   117b4:	20002eac 	.word	0x20002eac

000117b8 <UpdateRxDataAvailableCbParams>:
   117b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   117ba:	4e0f      	ldr	r6, [pc, #60]	; (117f8 <UpdateRxDataAvailableCbParams+0x40>)
   117bc:	7874      	ldrb	r4, [r6, #1]
   117be:	7835      	ldrb	r5, [r6, #0]
   117c0:	0224      	lsls	r4, r4, #8
   117c2:	432c      	orrs	r4, r5
   117c4:	78b5      	ldrb	r5, [r6, #2]
   117c6:	042d      	lsls	r5, r5, #16
   117c8:	432c      	orrs	r4, r5
   117ca:	78f5      	ldrb	r5, [r6, #3]
   117cc:	062d      	lsls	r5, r5, #24
   117ce:	4325      	orrs	r5, r4
   117d0:	d011      	beq.n	117f6 <UpdateRxDataAvailableCbParams+0x3e>
   117d2:	4c0a      	ldr	r4, [pc, #40]	; (117fc <UpdateRxDataAvailableCbParams+0x44>)
   117d4:	2702      	movs	r7, #2
   117d6:	0026      	movs	r6, r4
   117d8:	36f8      	adds	r6, #248	; 0xf8
   117da:	6836      	ldr	r6, [r6, #0]
   117dc:	423e      	tst	r6, r7
   117de:	d00a      	beq.n	117f6 <UpdateRxDataAvailableCbParams+0x3e>
   117e0:	0026      	movs	r6, r4
   117e2:	34fc      	adds	r4, #252	; 0xfc
   117e4:	36ff      	adds	r6, #255	; 0xff
   117e6:	60a0      	str	r0, [r4, #8]
   117e8:	60e1      	str	r1, [r4, #12]
   117ea:	7077      	strb	r7, [r6, #1]
   117ec:	7372      	strb	r2, [r6, #13]
   117ee:	73b3      	strb	r3, [r6, #14]
   117f0:	4903      	ldr	r1, [pc, #12]	; (11800 <UpdateRxDataAvailableCbParams+0x48>)
   117f2:	6820      	ldr	r0, [r4, #0]
   117f4:	47a8      	blx	r5
   117f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   117f8:	20002ea4 	.word	0x20002ea4
   117fc:	20002b5c 	.word	0x20002b5c
   11800:	20002c5c 	.word	0x20002c5c

00011804 <LorawanNotifyAppOnRxdone>:
   11804:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11806:	4c25      	ldr	r4, [pc, #148]	; (1189c <LorawanNotifyAppOnRxdone+0x98>)
   11808:	0007      	movs	r7, r0
   1180a:	0023      	movs	r3, r4
   1180c:	33f4      	adds	r3, #244	; 0xf4
   1180e:	781b      	ldrb	r3, [r3, #0]
   11810:	000d      	movs	r5, r1
   11812:	0016      	movs	r6, r2
   11814:	2b01      	cmp	r3, #1
   11816:	d136      	bne.n	11886 <LorawanNotifyAppOnRxdone+0x82>
   11818:	0022      	movs	r2, r4
   1181a:	210e      	movs	r1, #14
   1181c:	327c      	adds	r2, #124	; 0x7c
   1181e:	7813      	ldrb	r3, [r2, #0]
   11820:	438b      	bics	r3, r1
   11822:	7013      	strb	r3, [r2, #0]
   11824:	491e      	ldr	r1, [pc, #120]	; (118a0 <LorawanNotifyAppOnRxdone+0x9c>)
   11826:	784a      	ldrb	r2, [r1, #1]
   11828:	780b      	ldrb	r3, [r1, #0]
   1182a:	0212      	lsls	r2, r2, #8
   1182c:	431a      	orrs	r2, r3
   1182e:	788b      	ldrb	r3, [r1, #2]
   11830:	041b      	lsls	r3, r3, #16
   11832:	431a      	orrs	r2, r3
   11834:	78cb      	ldrb	r3, [r1, #3]
   11836:	061b      	lsls	r3, r3, #24
   11838:	4313      	orrs	r3, r2
   1183a:	d023      	beq.n	11884 <LorawanNotifyAppOnRxdone+0x80>
   1183c:	0022      	movs	r2, r4
   1183e:	2120      	movs	r1, #32
   11840:	328c      	adds	r2, #140	; 0x8c
   11842:	7813      	ldrb	r3, [r2, #0]
   11844:	438b      	bics	r3, r1
   11846:	7013      	strb	r3, [r2, #0]
   11848:	0023      	movs	r3, r4
   1184a:	33f4      	adds	r3, #244	; 0xf4
   1184c:	781b      	ldrb	r3, [r3, #0]
   1184e:	7878      	ldrb	r0, [r7, #1]
   11850:	469c      	mov	ip, r3
   11852:	78fa      	ldrb	r2, [r7, #3]
   11854:	78b9      	ldrb	r1, [r7, #2]
   11856:	793b      	ldrb	r3, [r7, #4]
   11858:	4667      	mov	r7, ip
   1185a:	0209      	lsls	r1, r1, #8
   1185c:	4301      	orrs	r1, r0
   1185e:	0410      	lsls	r0, r2, #16
   11860:	4308      	orrs	r0, r1
   11862:	061b      	lsls	r3, r3, #24
   11864:	4318      	orrs	r0, r3
   11866:	0032      	movs	r2, r6
   11868:	2308      	movs	r3, #8
   1186a:	0029      	movs	r1, r5
   1186c:	2f04      	cmp	r7, #4
   1186e:	d112      	bne.n	11896 <LorawanNotifyAppOnRxdone+0x92>
   11870:	4d0c      	ldr	r5, [pc, #48]	; (118a4 <LorawanNotifyAppOnRxdone+0xa0>)
   11872:	47a8      	blx	r5
   11874:	2385      	movs	r3, #133	; 0x85
   11876:	009b      	lsls	r3, r3, #2
   11878:	5ce3      	ldrb	r3, [r4, r3]
   1187a:	2b00      	cmp	r3, #0
   1187c:	d102      	bne.n	11884 <LorawanNotifyAppOnRxdone+0x80>
   1187e:	2008      	movs	r0, #8
   11880:	4b09      	ldr	r3, [pc, #36]	; (118a8 <LorawanNotifyAppOnRxdone+0xa4>)
   11882:	4798      	blx	r3
   11884:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   11886:	2b04      	cmp	r3, #4
   11888:	d1cc      	bne.n	11824 <LorawanNotifyAppOnRxdone+0x20>
   1188a:	0023      	movs	r3, r4
   1188c:	33e8      	adds	r3, #232	; 0xe8
   1188e:	7818      	ldrb	r0, [r3, #0]
   11890:	4b06      	ldr	r3, [pc, #24]	; (118ac <LorawanNotifyAppOnRxdone+0xa8>)
   11892:	4798      	blx	r3
   11894:	e7c6      	b.n	11824 <LorawanNotifyAppOnRxdone+0x20>
   11896:	4d06      	ldr	r5, [pc, #24]	; (118b0 <LorawanNotifyAppOnRxdone+0xac>)
   11898:	47a8      	blx	r5
   1189a:	e7eb      	b.n	11874 <LorawanNotifyAppOnRxdone+0x70>
   1189c:	20002b5c 	.word	0x20002b5c
   118a0:	20002ea4 	.word	0x20002ea4
   118a4:	00014335 	.word	0x00014335
   118a8:	00011415 	.word	0x00011415
   118ac:	0000f029 	.word	0x0000f029
   118b0:	000117b9 	.word	0x000117b9

000118b4 <LorawanSetReceiveWindow2Parameters>:
   118b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   118b6:	466b      	mov	r3, sp
   118b8:	1cdd      	adds	r5, r3, #3
   118ba:	9001      	str	r0, [sp, #4]
   118bc:	7029      	strb	r1, [r5, #0]
   118be:	2001      	movs	r0, #1
   118c0:	a901      	add	r1, sp, #4
   118c2:	4c09      	ldr	r4, [pc, #36]	; (118e8 <LorawanSetReceiveWindow2Parameters+0x34>)
   118c4:	47a0      	blx	r4
   118c6:	2808      	cmp	r0, #8
   118c8:	d002      	beq.n	118d0 <LorawanSetReceiveWindow2Parameters+0x1c>
   118ca:	240a      	movs	r4, #10
   118cc:	0020      	movs	r0, r4
   118ce:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
   118d0:	0029      	movs	r1, r5
   118d2:	200f      	movs	r0, #15
   118d4:	47a0      	blx	r4
   118d6:	0004      	movs	r4, r0
   118d8:	2808      	cmp	r0, #8
   118da:	d1f6      	bne.n	118ca <LorawanSetReceiveWindow2Parameters+0x16>
   118dc:	7829      	ldrb	r1, [r5, #0]
   118de:	9801      	ldr	r0, [sp, #4]
   118e0:	4b02      	ldr	r3, [pc, #8]	; (118ec <LorawanSetReceiveWindow2Parameters+0x38>)
   118e2:	4798      	blx	r3
   118e4:	e7f2      	b.n	118cc <LorawanSetReceiveWindow2Parameters+0x18>
   118e6:	46c0      	nop			; (mov r8, r8)
   118e8:	0000d821 	.word	0x0000d821
   118ec:	00010895 	.word	0x00010895

000118f0 <LorawanSetFrequency>:
   118f0:	b507      	push	{r0, r1, r2, lr}
   118f2:	466b      	mov	r3, sp
   118f4:	9100      	str	r1, [sp, #0]
   118f6:	7118      	strb	r0, [r3, #4]
   118f8:	4669      	mov	r1, sp
   118fa:	2000      	movs	r0, #0
   118fc:	4b01      	ldr	r3, [pc, #4]	; (11904 <LorawanSetFrequency+0x14>)
   118fe:	4798      	blx	r3
   11900:	bd0e      	pop	{r1, r2, r3, pc}
   11902:	46c0      	nop			; (mov r8, r8)
   11904:	0000d92d 	.word	0x0000d92d

00011908 <LorawanGetReceiveWindow2Parameters>:
   11908:	4a06      	ldr	r2, [pc, #24]	; (11924 <LorawanGetReceiveWindow2Parameters+0x1c>)
   1190a:	0013      	movs	r3, r2
   1190c:	336e      	adds	r3, #110	; 0x6e
   1190e:	781b      	ldrb	r3, [r3, #0]
   11910:	7103      	strb	r3, [r0, #4]
   11912:	0013      	movs	r3, r2
   11914:	326c      	adds	r2, #108	; 0x6c
   11916:	336a      	adds	r3, #106	; 0x6a
   11918:	8819      	ldrh	r1, [r3, #0]
   1191a:	8813      	ldrh	r3, [r2, #0]
   1191c:	041b      	lsls	r3, r3, #16
   1191e:	430b      	orrs	r3, r1
   11920:	6003      	str	r3, [r0, #0]
   11922:	4770      	bx	lr
   11924:	20002b5c 	.word	0x20002b5c

00011928 <LORAWAN_GetAttr>:
   11928:	b5f0      	push	{r4, r5, r6, r7, lr}
   1192a:	000b      	movs	r3, r1
   1192c:	b093      	sub	sp, #76	; 0x4c
   1192e:	0016      	movs	r6, r2
   11930:	2842      	cmp	r0, #66	; 0x42
   11932:	d844      	bhi.n	119be <LORAWAN_GetAttr+0x96>
   11934:	f004 fe30 	bl	16598 <__gnu_thumb1_case_uhi>
   11938:	00620046 	.word	0x00620046
   1193c:	00760066 	.word	0x00760066
   11940:	0072006e 	.word	0x0072006e
   11944:	007f007a 	.word	0x007f007a
   11948:	00870084 	.word	0x00870084
   1194c:	008e008a 	.word	0x008e008a
   11950:	00990091 	.word	0x00990091
   11954:	009f009c 	.word	0x009f009c
   11958:	00a600a3 	.word	0x00a600a3
   1195c:	00ac00a9 	.word	0x00ac00a9
   11960:	00d800af 	.word	0x00d800af
   11964:	00b200b5 	.word	0x00b200b5
   11968:	00df00e5 	.word	0x00df00e5
   1196c:	00ce00d3 	.word	0x00ce00d3
   11970:	004300c7 	.word	0x004300c7
   11974:	00c10096 	.word	0x00c10096
   11978:	00be00c5 	.word	0x00be00c5
   1197c:	00dc00bb 	.word	0x00dc00bb
   11980:	004c00e2 	.word	0x004c00e2
   11984:	004e004c 	.word	0x004e004c
   11988:	011500ee 	.word	0x011500ee
   1198c:	00ff010c 	.word	0x00ff010c
   11990:	01300122 	.word	0x01300122
   11994:	0148013c 	.word	0x0148013c
   11998:	01610154 	.word	0x01610154
   1199c:	01940043 	.word	0x01940043
   119a0:	0170016c 	.word	0x0170016c
   119a4:	017a0175 	.word	0x017a0175
   119a8:	0183017f 	.word	0x0183017f
   119ac:	01890186 	.word	0x01890186
   119b0:	00430191 	.word	0x00430191
   119b4:	00430043 	.word	0x00430043
   119b8:	019d0198 	.word	0x019d0198
   119bc:	01ee      	.short	0x01ee
   119be:	200a      	movs	r0, #10
   119c0:	b013      	add	sp, #76	; 0x4c
   119c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   119c4:	2208      	movs	r2, #8
   119c6:	49c4      	ldr	r1, [pc, #784]	; (11cd8 <LORAWAN_GetAttr+0x3b0>)
   119c8:	315d      	adds	r1, #93	; 0x5d
   119ca:	0030      	movs	r0, r6
   119cc:	4bc3      	ldr	r3, [pc, #780]	; (11cdc <LORAWAN_GetAttr+0x3b4>)
   119ce:	4798      	blx	r3
   119d0:	2008      	movs	r0, #8
   119d2:	e7f5      	b.n	119c0 <LORAWAN_GetAttr+0x98>
   119d4:	ac0e      	add	r4, sp, #56	; 0x38
   119d6:	0021      	movs	r1, r4
   119d8:	4bc1      	ldr	r3, [pc, #772]	; (11ce0 <LORAWAN_GetAttr+0x3b8>)
   119da:	201d      	movs	r0, #29
   119dc:	4798      	blx	r3
   119de:	4bbe      	ldr	r3, [pc, #760]	; (11cd8 <LORAWAN_GetAttr+0x3b0>)
   119e0:	a910      	add	r1, sp, #64	; 0x40
   119e2:	33fe      	adds	r3, #254	; 0xfe
   119e4:	8adb      	ldrh	r3, [r3, #22]
   119e6:	2208      	movs	r2, #8
   119e8:	808b      	strh	r3, [r1, #4]
   119ea:	7923      	ldrb	r3, [r4, #4]
   119ec:	718b      	strb	r3, [r1, #6]
   119ee:	8823      	ldrh	r3, [r4, #0]
   119f0:	800b      	strh	r3, [r1, #0]
   119f2:	8863      	ldrh	r3, [r4, #2]
   119f4:	804b      	strh	r3, [r1, #2]
   119f6:	7963      	ldrb	r3, [r4, #5]
   119f8:	71cb      	strb	r3, [r1, #7]
   119fa:	e7e6      	b.n	119ca <LORAWAN_GetAttr+0xa2>
   119fc:	49b6      	ldr	r1, [pc, #728]	; (11cd8 <LORAWAN_GetAttr+0x3b0>)
   119fe:	2208      	movs	r2, #8
   11a00:	3155      	adds	r1, #85	; 0x55
   11a02:	e7e2      	b.n	119ca <LORAWAN_GetAttr+0xa2>
   11a04:	4bb4      	ldr	r3, [pc, #720]	; (11cd8 <LORAWAN_GetAttr+0x3b0>)
   11a06:	681a      	ldr	r2, [r3, #0]
   11a08:	791b      	ldrb	r3, [r3, #4]
   11a0a:	0a12      	lsrs	r2, r2, #8
   11a0c:	061b      	lsls	r3, r3, #24
   11a0e:	4313      	orrs	r3, r2
   11a10:	6033      	str	r3, [r6, #0]
   11a12:	e7dd      	b.n	119d0 <LORAWAN_GetAttr+0xa8>
   11a14:	49b0      	ldr	r1, [pc, #704]	; (11cd8 <LORAWAN_GetAttr+0x3b0>)
   11a16:	2210      	movs	r2, #16
   11a18:	3105      	adds	r1, #5
   11a1a:	e7d6      	b.n	119ca <LORAWAN_GetAttr+0xa2>
   11a1c:	49ae      	ldr	r1, [pc, #696]	; (11cd8 <LORAWAN_GetAttr+0x3b0>)
   11a1e:	2210      	movs	r2, #16
   11a20:	3115      	adds	r1, #21
   11a22:	e7d2      	b.n	119ca <LORAWAN_GetAttr+0xa2>
   11a24:	49ac      	ldr	r1, [pc, #688]	; (11cd8 <LORAWAN_GetAttr+0x3b0>)
   11a26:	2210      	movs	r2, #16
   11a28:	3145      	adds	r1, #69	; 0x45
   11a2a:	e7ce      	b.n	119ca <LORAWAN_GetAttr+0xa2>
   11a2c:	4baa      	ldr	r3, [pc, #680]	; (11cd8 <LORAWAN_GetAttr+0x3b0>)
   11a2e:	337c      	adds	r3, #124	; 0x7c
   11a30:	781b      	ldrb	r3, [r3, #0]
   11a32:	069b      	lsls	r3, r3, #26
   11a34:	e039      	b.n	11aaa <LORAWAN_GetAttr+0x182>
   11a36:	4ba8      	ldr	r3, [pc, #672]	; (11cd8 <LORAWAN_GetAttr+0x3b0>)
   11a38:	33df      	adds	r3, #223	; 0xdf
   11a3a:	781b      	ldrb	r3, [r3, #0]
   11a3c:	7033      	strb	r3, [r6, #0]
   11a3e:	e7c7      	b.n	119d0 <LORAWAN_GetAttr+0xa8>
   11a40:	4ba5      	ldr	r3, [pc, #660]	; (11cd8 <LORAWAN_GetAttr+0x3b0>)
   11a42:	33e1      	adds	r3, #225	; 0xe1
   11a44:	e7f9      	b.n	11a3a <LORAWAN_GetAttr+0x112>
   11a46:	4ba4      	ldr	r3, [pc, #656]	; (11cd8 <LORAWAN_GetAttr+0x3b0>)
   11a48:	33f7      	adds	r3, #247	; 0xf7
   11a4a:	e7f6      	b.n	11a3a <LORAWAN_GetAttr+0x112>
   11a4c:	4ba2      	ldr	r3, [pc, #648]	; (11cd8 <LORAWAN_GetAttr+0x3b0>)
   11a4e:	3304      	adds	r3, #4
   11a50:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   11a52:	e7dd      	b.n	11a10 <LORAWAN_GetAttr+0xe8>
   11a54:	4ba0      	ldr	r3, [pc, #640]	; (11cd8 <LORAWAN_GetAttr+0x3b0>)
   11a56:	3308      	adds	r3, #8
   11a58:	e7fa      	b.n	11a50 <LORAWAN_GetAttr+0x128>
   11a5a:	4b9f      	ldr	r3, [pc, #636]	; (11cd8 <LORAWAN_GetAttr+0x3b0>)
   11a5c:	33c8      	adds	r3, #200	; 0xc8
   11a5e:	881b      	ldrh	r3, [r3, #0]
   11a60:	8033      	strh	r3, [r6, #0]
   11a62:	e7b5      	b.n	119d0 <LORAWAN_GetAttr+0xa8>
   11a64:	4b9c      	ldr	r3, [pc, #624]	; (11cd8 <LORAWAN_GetAttr+0x3b0>)
   11a66:	33ca      	adds	r3, #202	; 0xca
   11a68:	e7f9      	b.n	11a5e <LORAWAN_GetAttr+0x136>
   11a6a:	4b9b      	ldr	r3, [pc, #620]	; (11cd8 <LORAWAN_GetAttr+0x3b0>)
   11a6c:	33cc      	adds	r3, #204	; 0xcc
   11a6e:	e7f6      	b.n	11a5e <LORAWAN_GetAttr+0x136>
   11a70:	4b99      	ldr	r3, [pc, #612]	; (11cd8 <LORAWAN_GetAttr+0x3b0>)
   11a72:	33ce      	adds	r3, #206	; 0xce
   11a74:	e7f3      	b.n	11a5e <LORAWAN_GetAttr+0x136>
   11a76:	4b98      	ldr	r3, [pc, #608]	; (11cd8 <LORAWAN_GetAttr+0x3b0>)
   11a78:	33d0      	adds	r3, #208	; 0xd0
   11a7a:	881b      	ldrh	r3, [r3, #0]
   11a7c:	e7de      	b.n	11a3c <LORAWAN_GetAttr+0x114>
   11a7e:	4b96      	ldr	r3, [pc, #600]	; (11cd8 <LORAWAN_GetAttr+0x3b0>)
   11a80:	33d4      	adds	r3, #212	; 0xd4
   11a82:	e7da      	b.n	11a3a <LORAWAN_GetAttr+0x112>
   11a84:	4b94      	ldr	r3, [pc, #592]	; (11cd8 <LORAWAN_GetAttr+0x3b0>)
   11a86:	33d5      	adds	r3, #213	; 0xd5
   11a88:	e7d7      	b.n	11a3a <LORAWAN_GetAttr+0x112>
   11a8a:	4b93      	ldr	r3, [pc, #588]	; (11cd8 <LORAWAN_GetAttr+0x3b0>)
   11a8c:	33d2      	adds	r3, #210	; 0xd2
   11a8e:	e7e6      	b.n	11a5e <LORAWAN_GetAttr+0x136>
   11a90:	4b91      	ldr	r3, [pc, #580]	; (11cd8 <LORAWAN_GetAttr+0x3b0>)
   11a92:	33da      	adds	r3, #218	; 0xda
   11a94:	e7d1      	b.n	11a3a <LORAWAN_GetAttr+0x112>
   11a96:	4b90      	ldr	r3, [pc, #576]	; (11cd8 <LORAWAN_GetAttr+0x3b0>)
   11a98:	33d9      	adds	r3, #217	; 0xd9
   11a9a:	e7ce      	b.n	11a3a <LORAWAN_GetAttr+0x112>
   11a9c:	4b8e      	ldr	r3, [pc, #568]	; (11cd8 <LORAWAN_GetAttr+0x3b0>)
   11a9e:	33e0      	adds	r3, #224	; 0xe0
   11aa0:	e7cb      	b.n	11a3a <LORAWAN_GetAttr+0x112>
   11aa2:	4b8d      	ldr	r3, [pc, #564]	; (11cd8 <LORAWAN_GetAttr+0x3b0>)
   11aa4:	337c      	adds	r3, #124	; 0x7c
   11aa6:	781b      	ldrb	r3, [r3, #0]
   11aa8:	06db      	lsls	r3, r3, #27
   11aaa:	0fdb      	lsrs	r3, r3, #31
   11aac:	e7c6      	b.n	11a3c <LORAWAN_GetAttr+0x114>
   11aae:	4b8a      	ldr	r3, [pc, #552]	; (11cd8 <LORAWAN_GetAttr+0x3b0>)
   11ab0:	33de      	adds	r3, #222	; 0xde
   11ab2:	e7c2      	b.n	11a3a <LORAWAN_GetAttr+0x112>
   11ab4:	4b88      	ldr	r3, [pc, #544]	; (11cd8 <LORAWAN_GetAttr+0x3b0>)
   11ab6:	33dd      	adds	r3, #221	; 0xdd
   11ab8:	e7bf      	b.n	11a3a <LORAWAN_GetAttr+0x112>
   11aba:	4b87      	ldr	r3, [pc, #540]	; (11cd8 <LORAWAN_GetAttr+0x3b0>)
   11abc:	3390      	adds	r3, #144	; 0x90
   11abe:	781b      	ldrb	r3, [r3, #0]
   11ac0:	e7ce      	b.n	11a60 <LORAWAN_GetAttr+0x138>
   11ac2:	4b85      	ldr	r3, [pc, #532]	; (11cd8 <LORAWAN_GetAttr+0x3b0>)
   11ac4:	e7c4      	b.n	11a50 <LORAWAN_GetAttr+0x128>
   11ac6:	2016      	movs	r0, #22
   11ac8:	781b      	ldrb	r3, [r3, #0]
   11aca:	a910      	add	r1, sp, #64	; 0x40
   11acc:	700b      	strb	r3, [r1, #0]
   11ace:	4b85      	ldr	r3, [pc, #532]	; (11ce4 <LORAWAN_GetAttr+0x3bc>)
   11ad0:	4798      	blx	r3
   11ad2:	e77d      	b.n	119d0 <LORAWAN_GetAttr+0xa8>
   11ad4:	781b      	ldrb	r3, [r3, #0]
   11ad6:	a910      	add	r1, sp, #64	; 0x40
   11ad8:	700b      	strb	r3, [r1, #0]
   11ada:	2012      	movs	r0, #18
   11adc:	e7f7      	b.n	11ace <LORAWAN_GetAttr+0x1a6>
   11ade:	781b      	ldrb	r3, [r3, #0]
   11ae0:	a910      	add	r1, sp, #64	; 0x40
   11ae2:	700b      	strb	r3, [r1, #0]
   11ae4:	2000      	movs	r0, #0
   11ae6:	e7f2      	b.n	11ace <LORAWAN_GetAttr+0x1a6>
   11ae8:	0010      	movs	r0, r2
   11aea:	4b7f      	ldr	r3, [pc, #508]	; (11ce8 <LORAWAN_GetAttr+0x3c0>)
   11aec:	4798      	blx	r3
   11aee:	e76f      	b.n	119d0 <LORAWAN_GetAttr+0xa8>
   11af0:	4b79      	ldr	r3, [pc, #484]	; (11cd8 <LORAWAN_GetAttr+0x3b0>)
   11af2:	33f6      	adds	r3, #246	; 0xf6
   11af4:	e7a1      	b.n	11a3a <LORAWAN_GetAttr+0x112>
   11af6:	4b78      	ldr	r3, [pc, #480]	; (11cd8 <LORAWAN_GetAttr+0x3b0>)
   11af8:	33f4      	adds	r3, #244	; 0xf4
   11afa:	e79e      	b.n	11a3a <LORAWAN_GetAttr+0x112>
   11afc:	4b76      	ldr	r3, [pc, #472]	; (11cd8 <LORAWAN_GetAttr+0x3b0>)
   11afe:	33f5      	adds	r3, #245	; 0xf5
   11b00:	e79b      	b.n	11a3a <LORAWAN_GetAttr+0x112>
   11b02:	21fa      	movs	r1, #250	; 0xfa
   11b04:	4b74      	ldr	r3, [pc, #464]	; (11cd8 <LORAWAN_GetAttr+0x3b0>)
   11b06:	0089      	lsls	r1, r1, #2
   11b08:	3388      	adds	r3, #136	; 0x88
   11b0a:	6818      	ldr	r0, [r3, #0]
   11b0c:	4b77      	ldr	r3, [pc, #476]	; (11cec <LORAWAN_GetAttr+0x3c4>)
   11b0e:	4798      	blx	r3
   11b10:	8030      	strh	r0, [r6, #0]
   11b12:	e75d      	b.n	119d0 <LORAWAN_GetAttr+0xa8>
   11b14:	780a      	ldrb	r2, [r1, #0]
   11b16:	200a      	movs	r0, #10
   11b18:	2a03      	cmp	r2, #3
   11b1a:	d900      	bls.n	11b1e <LORAWAN_GetAttr+0x1f6>
   11b1c:	e750      	b.n	119c0 <LORAWAN_GetAttr+0x98>
   11b1e:	2322      	movs	r3, #34	; 0x22
   11b20:	496d      	ldr	r1, [pc, #436]	; (11cd8 <LORAWAN_GetAttr+0x3b0>)
   11b22:	33ff      	adds	r3, #255	; 0xff
   11b24:	5cc9      	ldrb	r1, [r1, r3]
   11b26:	3b21      	subs	r3, #33	; 0x21
   11b28:	3bff      	subs	r3, #255	; 0xff
   11b2a:	4093      	lsls	r3, r2
   11b2c:	400b      	ands	r3, r1
   11b2e:	1e5a      	subs	r2, r3, #1
   11b30:	4193      	sbcs	r3, r2
   11b32:	7033      	strb	r3, [r6, #0]
   11b34:	e02e      	b.n	11b94 <LORAWAN_GetAttr+0x26c>
   11b36:	780b      	ldrb	r3, [r1, #0]
   11b38:	200a      	movs	r0, #10
   11b3a:	2b03      	cmp	r3, #3
   11b3c:	d900      	bls.n	11b40 <LORAWAN_GetAttr+0x218>
   11b3e:	e73f      	b.n	119c0 <LORAWAN_GetAttr+0x98>
   11b40:	213c      	movs	r1, #60	; 0x3c
   11b42:	4359      	muls	r1, r3
   11b44:	3139      	adds	r1, #57	; 0x39
   11b46:	4b64      	ldr	r3, [pc, #400]	; (11cd8 <LORAWAN_GetAttr+0x3b0>)
   11b48:	31ff      	adds	r1, #255	; 0xff
   11b4a:	18c9      	adds	r1, r1, r3
   11b4c:	2210      	movs	r2, #16
   11b4e:	e73c      	b.n	119ca <LORAWAN_GetAttr+0xa2>
   11b50:	780b      	ldrb	r3, [r1, #0]
   11b52:	200a      	movs	r0, #10
   11b54:	2b03      	cmp	r3, #3
   11b56:	d900      	bls.n	11b5a <LORAWAN_GetAttr+0x232>
   11b58:	e732      	b.n	119c0 <LORAWAN_GetAttr+0x98>
   11b5a:	213c      	movs	r1, #60	; 0x3c
   11b5c:	4359      	muls	r1, r3
   11b5e:	3129      	adds	r1, #41	; 0x29
   11b60:	e7f1      	b.n	11b46 <LORAWAN_GetAttr+0x21e>
   11b62:	780b      	ldrb	r3, [r1, #0]
   11b64:	200a      	movs	r0, #10
   11b66:	2b03      	cmp	r3, #3
   11b68:	d900      	bls.n	11b6c <LORAWAN_GetAttr+0x244>
   11b6a:	e729      	b.n	119c0 <LORAWAN_GetAttr+0x98>
   11b6c:	213c      	movs	r1, #60	; 0x3c
   11b6e:	4359      	muls	r1, r3
   11b70:	4b59      	ldr	r3, [pc, #356]	; (11cd8 <LORAWAN_GetAttr+0x3b0>)
   11b72:	3125      	adds	r1, #37	; 0x25
   11b74:	31ff      	adds	r1, #255	; 0xff
   11b76:	18c9      	adds	r1, r1, r3
   11b78:	2204      	movs	r2, #4
   11b7a:	e726      	b.n	119ca <LORAWAN_GetAttr+0xa2>
   11b7c:	780a      	ldrb	r2, [r1, #0]
   11b7e:	200a      	movs	r0, #10
   11b80:	2a03      	cmp	r2, #3
   11b82:	d900      	bls.n	11b86 <LORAWAN_GetAttr+0x25e>
   11b84:	e71c      	b.n	119c0 <LORAWAN_GetAttr+0x98>
   11b86:	233c      	movs	r3, #60	; 0x3c
   11b88:	435a      	muls	r2, r3
   11b8a:	4b53      	ldr	r3, [pc, #332]	; (11cd8 <LORAWAN_GetAttr+0x3b0>)
   11b8c:	189b      	adds	r3, r3, r2
   11b8e:	33fc      	adds	r3, #252	; 0xfc
   11b90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   11b92:	6033      	str	r3, [r6, #0]
   11b94:	3802      	subs	r0, #2
   11b96:	e713      	b.n	119c0 <LORAWAN_GetAttr+0x98>
   11b98:	780a      	ldrb	r2, [r1, #0]
   11b9a:	200a      	movs	r0, #10
   11b9c:	2a03      	cmp	r2, #3
   11b9e:	d900      	bls.n	11ba2 <LORAWAN_GetAttr+0x27a>
   11ba0:	e70e      	b.n	119c0 <LORAWAN_GetAttr+0x98>
   11ba2:	233c      	movs	r3, #60	; 0x3c
   11ba4:	435a      	muls	r2, r3
   11ba6:	4b4c      	ldr	r3, [pc, #304]	; (11cd8 <LORAWAN_GetAttr+0x3b0>)
   11ba8:	189b      	adds	r3, r3, r2
   11baa:	33fc      	adds	r3, #252	; 0xfc
   11bac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   11bae:	e7f0      	b.n	11b92 <LORAWAN_GetAttr+0x26a>
   11bb0:	780a      	ldrb	r2, [r1, #0]
   11bb2:	200a      	movs	r0, #10
   11bb4:	2a03      	cmp	r2, #3
   11bb6:	d900      	bls.n	11bba <LORAWAN_GetAttr+0x292>
   11bb8:	e702      	b.n	119c0 <LORAWAN_GetAttr+0x98>
   11bba:	233c      	movs	r3, #60	; 0x3c
   11bbc:	435a      	muls	r2, r3
   11bbe:	4b46      	ldr	r3, [pc, #280]	; (11cd8 <LORAWAN_GetAttr+0x3b0>)
   11bc0:	189b      	adds	r3, r3, r2
   11bc2:	33fc      	adds	r3, #252	; 0xfc
   11bc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   11bc6:	e7e4      	b.n	11b92 <LORAWAN_GetAttr+0x26a>
   11bc8:	780a      	ldrb	r2, [r1, #0]
   11bca:	200a      	movs	r0, #10
   11bcc:	2a03      	cmp	r2, #3
   11bce:	d900      	bls.n	11bd2 <LORAWAN_GetAttr+0x2aa>
   11bd0:	e6f6      	b.n	119c0 <LORAWAN_GetAttr+0x98>
   11bd2:	233c      	movs	r3, #60	; 0x3c
   11bd4:	435a      	muls	r2, r3
   11bd6:	4b40      	ldr	r3, [pc, #256]	; (11cd8 <LORAWAN_GetAttr+0x3b0>)
   11bd8:	189b      	adds	r3, r3, r2
   11bda:	33fc      	adds	r3, #252	; 0xfc
   11bdc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   11bde:	e7d8      	b.n	11b92 <LORAWAN_GetAttr+0x26a>
   11be0:	780a      	ldrb	r2, [r1, #0]
   11be2:	200a      	movs	r0, #10
   11be4:	2a03      	cmp	r2, #3
   11be6:	d900      	bls.n	11bea <LORAWAN_GetAttr+0x2c2>
   11be8:	e6ea      	b.n	119c0 <LORAWAN_GetAttr+0x98>
   11bea:	233c      	movs	r3, #60	; 0x3c
   11bec:	435a      	muls	r2, r3
   11bee:	4b3a      	ldr	r3, [pc, #232]	; (11cd8 <LORAWAN_GetAttr+0x3b0>)
   11bf0:	189b      	adds	r3, r3, r2
   11bf2:	335d      	adds	r3, #93	; 0x5d
   11bf4:	33ff      	adds	r3, #255	; 0xff
   11bf6:	781b      	ldrb	r3, [r3, #0]
   11bf8:	e79b      	b.n	11b32 <LORAWAN_GetAttr+0x20a>
   11bfa:	780a      	ldrb	r2, [r1, #0]
   11bfc:	200a      	movs	r0, #10
   11bfe:	2a03      	cmp	r2, #3
   11c00:	d900      	bls.n	11c04 <LORAWAN_GetAttr+0x2dc>
   11c02:	e6dd      	b.n	119c0 <LORAWAN_GetAttr+0x98>
   11c04:	233c      	movs	r3, #60	; 0x3c
   11c06:	435a      	muls	r2, r3
   11c08:	4b33      	ldr	r3, [pc, #204]	; (11cd8 <LORAWAN_GetAttr+0x3b0>)
   11c0a:	189b      	adds	r3, r3, r2
   11c0c:	335e      	adds	r3, #94	; 0x5e
   11c0e:	e7f1      	b.n	11bf4 <LORAWAN_GetAttr+0x2cc>
   11c10:	0010      	movs	r0, r2
   11c12:	4b37      	ldr	r3, [pc, #220]	; (11cf0 <LORAWAN_GetAttr+0x3c8>)
   11c14:	4798      	blx	r3
   11c16:	e6d3      	b.n	119c0 <LORAWAN_GetAttr+0x98>
   11c18:	0011      	movs	r1, r2
   11c1a:	4b31      	ldr	r3, [pc, #196]	; (11ce0 <LORAWAN_GetAttr+0x3b8>)
   11c1c:	201f      	movs	r0, #31
   11c1e:	4798      	blx	r3
   11c20:	e6d6      	b.n	119d0 <LORAWAN_GetAttr+0xa8>
   11c22:	4b2d      	ldr	r3, [pc, #180]	; (11cd8 <LORAWAN_GetAttr+0x3b0>)
   11c24:	338c      	adds	r3, #140	; 0x8c
   11c26:	781b      	ldrb	r3, [r3, #0]
   11c28:	071b      	lsls	r3, r3, #28
   11c2a:	e73e      	b.n	11aaa <LORAWAN_GetAttr+0x182>
   11c2c:	4b2a      	ldr	r3, [pc, #168]	; (11cd8 <LORAWAN_GetAttr+0x3b0>)
   11c2e:	338c      	adds	r3, #140	; 0x8c
   11c30:	781b      	ldrb	r3, [r3, #0]
   11c32:	07db      	lsls	r3, r3, #31
   11c34:	e739      	b.n	11aaa <LORAWAN_GetAttr+0x182>
   11c36:	2031      	movs	r0, #49	; 0x31
   11c38:	4b2a      	ldr	r3, [pc, #168]	; (11ce4 <LORAWAN_GetAttr+0x3bc>)
   11c3a:	4798      	blx	r3
   11c3c:	e6c0      	b.n	119c0 <LORAWAN_GetAttr+0x98>
   11c3e:	492d      	ldr	r1, [pc, #180]	; (11cf4 <LORAWAN_GetAttr+0x3cc>)
   11c40:	2026      	movs	r0, #38	; 0x26
   11c42:	e7f9      	b.n	11c38 <LORAWAN_GetAttr+0x310>
   11c44:	4b24      	ldr	r3, [pc, #144]	; (11cd8 <LORAWAN_GetAttr+0x3b0>)
   11c46:	33dc      	adds	r3, #220	; 0xdc
   11c48:	e6f7      	b.n	11a3a <LORAWAN_GetAttr+0x112>
   11c4a:	4b2b      	ldr	r3, [pc, #172]	; (11cf8 <LORAWAN_GetAttr+0x3d0>)
   11c4c:	4798      	blx	r3
   11c4e:	4b2b      	ldr	r3, [pc, #172]	; (11cfc <LORAWAN_GetAttr+0x3d4>)
   11c50:	0004      	movs	r4, r0
   11c52:	4798      	blx	r3
   11c54:	1b00      	subs	r0, r0, r4
   11c56:	7030      	strb	r0, [r6, #0]
   11c58:	e6ba      	b.n	119d0 <LORAWAN_GetAttr+0xa8>
   11c5a:	2100      	movs	r1, #0
   11c5c:	2020      	movs	r0, #32
   11c5e:	e7eb      	b.n	11c38 <LORAWAN_GetAttr+0x310>
   11c60:	4b1d      	ldr	r3, [pc, #116]	; (11cd8 <LORAWAN_GetAttr+0x3b0>)
   11c62:	33ff      	adds	r3, #255	; 0xff
   11c64:	7c5b      	ldrb	r3, [r3, #17]
   11c66:	e6e4      	b.n	11a32 <LORAWAN_GetAttr+0x10a>
   11c68:	238c      	movs	r3, #140	; 0x8c
   11c6a:	4a1b      	ldr	r2, [pc, #108]	; (11cd8 <LORAWAN_GetAttr+0x3b0>)
   11c6c:	009b      	lsls	r3, r3, #2
   11c6e:	58d3      	ldr	r3, [r2, r3]
   11c70:	e6ce      	b.n	11a10 <LORAWAN_GetAttr+0xe8>
   11c72:	258a      	movs	r5, #138	; 0x8a
   11c74:	4c18      	ldr	r4, [pc, #96]	; (11cd8 <LORAWAN_GetAttr+0x3b0>)
   11c76:	00ad      	lsls	r5, r5, #2
   11c78:	5963      	ldr	r3, [r4, r5]
   11c7a:	2015      	movs	r0, #21
   11c7c:	3301      	adds	r3, #1
   11c7e:	d100      	bne.n	11c82 <LORAWAN_GetAttr+0x35a>
   11c80:	e69e      	b.n	119c0 <LORAWAN_GetAttr+0x98>
   11c82:	4b1f      	ldr	r3, [pc, #124]	; (11d00 <LORAWAN_GetAttr+0x3d8>)
   11c84:	a910      	add	r1, sp, #64	; 0x40
   11c86:	5ce0      	ldrb	r0, [r4, r3]
   11c88:	4b1e      	ldr	r3, [pc, #120]	; (11d04 <LORAWAN_GetAttr+0x3dc>)
   11c8a:	4798      	blx	r3
   11c8c:	4b1e      	ldr	r3, [pc, #120]	; (11d08 <LORAWAN_GetAttr+0x3e0>)
   11c8e:	4798      	blx	r3
   11c90:	22fa      	movs	r2, #250	; 0xfa
   11c92:	9000      	str	r0, [sp, #0]
   11c94:	9101      	str	r1, [sp, #4]
   11c96:	0092      	lsls	r2, r2, #2
   11c98:	5960      	ldr	r0, [r4, r5]
   11c9a:	2300      	movs	r3, #0
   11c9c:	4d1b      	ldr	r5, [pc, #108]	; (11d0c <LORAWAN_GetAttr+0x3e4>)
   11c9e:	2100      	movs	r1, #0
   11ca0:	47a8      	blx	r5
   11ca2:	9a10      	ldr	r2, [sp, #64]	; 0x40
   11ca4:	9b11      	ldr	r3, [sp, #68]	; 0x44
   11ca6:	9002      	str	r0, [sp, #8]
   11ca8:	9103      	str	r1, [sp, #12]
   11caa:	9800      	ldr	r0, [sp, #0]
   11cac:	9901      	ldr	r1, [sp, #4]
   11cae:	1a80      	subs	r0, r0, r2
   11cb0:	4199      	sbcs	r1, r3
   11cb2:	22fa      	movs	r2, #250	; 0xfa
   11cb4:	2300      	movs	r3, #0
   11cb6:	0092      	lsls	r2, r2, #2
   11cb8:	4d15      	ldr	r5, [pc, #84]	; (11d10 <LORAWAN_GetAttr+0x3e8>)
   11cba:	47a8      	blx	r5
   11cbc:	238b      	movs	r3, #139	; 0x8b
   11cbe:	009b      	lsls	r3, r3, #2
   11cc0:	5ce4      	ldrb	r4, [r4, r3]
   11cc2:	2300      	movs	r3, #0
   11cc4:	00a2      	lsls	r2, r4, #2
   11cc6:	9c02      	ldr	r4, [sp, #8]
   11cc8:	9d03      	ldr	r5, [sp, #12]
   11cca:	1912      	adds	r2, r2, r4
   11ccc:	416b      	adcs	r3, r5
   11cce:	1812      	adds	r2, r2, r0
   11cd0:	414b      	adcs	r3, r1
   11cd2:	6032      	str	r2, [r6, #0]
   11cd4:	6073      	str	r3, [r6, #4]
   11cd6:	e67b      	b.n	119d0 <LORAWAN_GetAttr+0xa8>
   11cd8:	20002b5c 	.word	0x20002b5c
   11cdc:	00019d11 	.word	0x00019d11
   11ce0:	00014ae5 	.word	0x00014ae5
   11ce4:	0000d805 	.word	0x0000d805
   11ce8:	00011909 	.word	0x00011909
   11cec:	000165ad 	.word	0x000165ad
   11cf0:	0000da75 	.word	0x0000da75
   11cf4:	20002c3b 	.word	0x20002c3b
   11cf8:	0000fd51 	.word	0x0000fd51
   11cfc:	0000fdf9 	.word	0x0000fdf9
   11d00:	00000225 	.word	0x00000225
   11d04:	0000f301 	.word	0x0000f301
   11d08:	0000ecb9 	.word	0x0000ecb9
   11d0c:	000169c9 	.word	0x000169c9
   11d10:	00016989 	.word	0x00016989
   11d14:	88ca      	ldrh	r2, [r1, #6]
   11d16:	780b      	ldrb	r3, [r1, #0]
   11d18:	9206      	str	r2, [sp, #24]
   11d1a:	784a      	ldrb	r2, [r1, #1]
   11d1c:	af0e      	add	r7, sp, #56	; 0x38
   11d1e:	9209      	str	r2, [sp, #36]	; 0x24
   11d20:	788a      	ldrb	r2, [r1, #2]
   11d22:	2025      	movs	r0, #37	; 0x25
   11d24:	920a      	str	r2, [sp, #40]	; 0x28
   11d26:	78ca      	ldrb	r2, [r1, #3]
   11d28:	920b      	str	r2, [sp, #44]	; 0x2c
   11d2a:	790a      	ldrb	r2, [r1, #4]
   11d2c:	9208      	str	r2, [sp, #32]
   11d2e:	aa0c      	add	r2, sp, #48	; 0x30
   11d30:	1d94      	adds	r4, r2, #6
   11d32:	7193      	strb	r3, [r2, #6]
   11d34:	0021      	movs	r1, r4
   11d36:	003a      	movs	r2, r7
   11d38:	4b5b      	ldr	r3, [pc, #364]	; (11ea8 <LORAWAN_GetAttr+0x580>)
   11d3a:	4798      	blx	r3
   11d3c:	ab0c      	add	r3, sp, #48	; 0x30
   11d3e:	1ddd      	adds	r5, r3, #7
   11d40:	002a      	movs	r2, r5
   11d42:	0021      	movs	r1, r4
   11d44:	2023      	movs	r0, #35	; 0x23
   11d46:	4b58      	ldr	r3, [pc, #352]	; (11ea8 <LORAWAN_GetAttr+0x580>)
   11d48:	4798      	blx	r3
   11d4a:	782d      	ldrb	r5, [r5, #0]
   11d4c:	2d01      	cmp	r5, #1
   11d4e:	d000      	beq.n	11d52 <LORAWAN_GetAttr+0x42a>
   11d50:	e0a1      	b.n	11e96 <LORAWAN_GetAttr+0x56e>
   11d52:	ac10      	add	r4, sp, #64	; 0x40
   11d54:	4b55      	ldr	r3, [pc, #340]	; (11eac <LORAWAN_GetAttr+0x584>)
   11d56:	0021      	movs	r1, r4
   11d58:	2007      	movs	r0, #7
   11d5a:	4798      	blx	r3
   11d5c:	783b      	ldrb	r3, [r7, #0]
   11d5e:	2b0c      	cmp	r3, #12
   11d60:	d000      	beq.n	11d64 <LORAWAN_GetAttr+0x43c>
   11d62:	e08a      	b.n	11e7a <LORAWAN_GetAttr+0x552>
   11d64:	2700      	movs	r7, #0
   11d66:	7823      	ldrb	r3, [r4, #0]
   11d68:	3b07      	subs	r3, #7
   11d6a:	b2db      	uxtb	r3, r3
   11d6c:	429d      	cmp	r5, r3
   11d6e:	417f      	adcs	r7, r7
   11d70:	b2fb      	uxtb	r3, r7
   11d72:	9302      	str	r3, [sp, #8]
   11d74:	ac10      	add	r4, sp, #64	; 0x40
   11d76:	ab0c      	add	r3, sp, #48	; 0x30
   11d78:	1d99      	adds	r1, r3, #6
   11d7a:	0022      	movs	r2, r4
   11d7c:	4b4a      	ldr	r3, [pc, #296]	; (11ea8 <LORAWAN_GetAttr+0x580>)
   11d7e:	2024      	movs	r0, #36	; 0x24
   11d80:	4798      	blx	r3
   11d82:	7823      	ldrb	r3, [r4, #0]
   11d84:	3b07      	subs	r3, #7
   11d86:	b2db      	uxtb	r3, r3
   11d88:	2b02      	cmp	r3, #2
   11d8a:	d900      	bls.n	11d8e <LORAWAN_GetAttr+0x466>
   11d8c:	e080      	b.n	11e90 <LORAWAN_GetAttr+0x568>
   11d8e:	4a48      	ldr	r2, [pc, #288]	; (11eb0 <LORAWAN_GetAttr+0x588>)
   11d90:	00db      	lsls	r3, r3, #3
   11d92:	18d3      	adds	r3, r2, r3
   11d94:	681c      	ldr	r4, [r3, #0]
   11d96:	685d      	ldr	r5, [r3, #4]
   11d98:	2001      	movs	r0, #1
   11d9a:	ab0e      	add	r3, sp, #56	; 0x38
   11d9c:	781b      	ldrb	r3, [r3, #0]
   11d9e:	4f45      	ldr	r7, [pc, #276]	; (11eb4 <LORAWAN_GetAttr+0x58c>)
   11da0:	9300      	str	r3, [sp, #0]
   11da2:	4098      	lsls	r0, r3
   11da4:	47b8      	blx	r7
   11da6:	0002      	movs	r2, r0
   11da8:	000b      	movs	r3, r1
   11daa:	0020      	movs	r0, r4
   11dac:	0029      	movs	r1, r5
   11dae:	4c42      	ldr	r4, [pc, #264]	; (11eb8 <LORAWAN_GetAttr+0x590>)
   11db0:	47a0      	blx	r4
   11db2:	0002      	movs	r2, r0
   11db4:	000b      	movs	r3, r1
   11db6:	2000      	movs	r0, #0
   11db8:	4940      	ldr	r1, [pc, #256]	; (11ebc <LORAWAN_GetAttr+0x594>)
   11dba:	47a0      	blx	r4
   11dbc:	466b      	mov	r3, sp
   11dbe:	9004      	str	r0, [sp, #16]
   11dc0:	9105      	str	r1, [sp, #20]
   11dc2:	7e18      	ldrb	r0, [r3, #24]
   11dc4:	47b8      	blx	r7
   11dc6:	4c3e      	ldr	r4, [pc, #248]	; (11ec0 <LORAWAN_GetAttr+0x598>)
   11dc8:	2200      	movs	r2, #0
   11dca:	4b3e      	ldr	r3, [pc, #248]	; (11ec4 <LORAWAN_GetAttr+0x59c>)
   11dcc:	47a0      	blx	r4
   11dce:	9a04      	ldr	r2, [sp, #16]
   11dd0:	9b05      	ldr	r3, [sp, #20]
   11dd2:	4c3d      	ldr	r4, [pc, #244]	; (11ec8 <LORAWAN_GetAttr+0x5a0>)
   11dd4:	47a0      	blx	r4
   11dd6:	9b08      	ldr	r3, [sp, #32]
   11dd8:	9006      	str	r0, [sp, #24]
   11dda:	9107      	str	r1, [sp, #28]
   11ddc:	0058      	lsls	r0, r3, #1
   11dde:	9b00      	ldr	r3, [sp, #0]
   11de0:	2214      	movs	r2, #20
   11de2:	1ac0      	subs	r0, r0, r3
   11de4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   11de6:	3007      	adds	r0, #7
   11de8:	009b      	lsls	r3, r3, #2
   11dea:	18c0      	adds	r0, r0, r3
   11dec:	9b09      	ldr	r3, [sp, #36]	; 0x24
   11dee:	0080      	lsls	r0, r0, #2
   11df0:	1e59      	subs	r1, r3, #1
   11df2:	418b      	sbcs	r3, r1
   11df4:	425b      	negs	r3, r3
   11df6:	401a      	ands	r2, r3
   11df8:	1a80      	subs	r0, r0, r2
   11dfa:	47b8      	blx	r7
   11dfc:	0004      	movs	r4, r0
   11dfe:	9802      	ldr	r0, [sp, #8]
   11e00:	000d      	movs	r5, r1
   11e02:	1e43      	subs	r3, r0, #1
   11e04:	4198      	sbcs	r0, r3
   11e06:	9b00      	ldr	r3, [sp, #0]
   11e08:	0040      	lsls	r0, r0, #1
   11e0a:	1a18      	subs	r0, r3, r0
   11e0c:	0080      	lsls	r0, r0, #2
   11e0e:	47b8      	blx	r7
   11e10:	0002      	movs	r2, r0
   11e12:	000b      	movs	r3, r1
   11e14:	0020      	movs	r0, r4
   11e16:	0029      	movs	r1, r5
   11e18:	4c27      	ldr	r4, [pc, #156]	; (11eb8 <LORAWAN_GetAttr+0x590>)
   11e1a:	47a0      	blx	r4
   11e1c:	4b2b      	ldr	r3, [pc, #172]	; (11ecc <LORAWAN_GetAttr+0x5a4>)
   11e1e:	0004      	movs	r4, r0
   11e20:	000d      	movs	r5, r1
   11e22:	4798      	blx	r3
   11e24:	4b2a      	ldr	r3, [pc, #168]	; (11ed0 <LORAWAN_GetAttr+0x5a8>)
   11e26:	0007      	movs	r7, r0
   11e28:	4798      	blx	r3
   11e2a:	0002      	movs	r2, r0
   11e2c:	000b      	movs	r3, r1
   11e2e:	0020      	movs	r0, r4
   11e30:	0029      	movs	r1, r5
   11e32:	4c28      	ldr	r4, [pc, #160]	; (11ed4 <LORAWAN_GetAttr+0x5ac>)
   11e34:	47a0      	blx	r4
   11e36:	2200      	movs	r2, #0
   11e38:	2300      	movs	r3, #0
   11e3a:	4c27      	ldr	r4, [pc, #156]	; (11ed8 <LORAWAN_GetAttr+0x5b0>)
   11e3c:	47a0      	blx	r4
   11e3e:	1e43      	subs	r3, r0, #1
   11e40:	4198      	sbcs	r0, r3
   11e42:	183f      	adds	r7, r7, r0
   11e44:	003b      	movs	r3, r7
   11e46:	980b      	ldr	r0, [sp, #44]	; 0x2c
   11e48:	3004      	adds	r0, #4
   11e4a:	4343      	muls	r3, r0
   11e4c:	3308      	adds	r3, #8
   11e4e:	0018      	movs	r0, r3
   11e50:	4b1f      	ldr	r3, [pc, #124]	; (11ed0 <LORAWAN_GetAttr+0x5a8>)
   11e52:	4798      	blx	r3
   11e54:	9a04      	ldr	r2, [sp, #16]
   11e56:	9b05      	ldr	r3, [sp, #20]
   11e58:	4c1b      	ldr	r4, [pc, #108]	; (11ec8 <LORAWAN_GetAttr+0x5a0>)
   11e5a:	47a0      	blx	r4
   11e5c:	9a06      	ldr	r2, [sp, #24]
   11e5e:	9b07      	ldr	r3, [sp, #28]
   11e60:	4c17      	ldr	r4, [pc, #92]	; (11ec0 <LORAWAN_GetAttr+0x598>)
   11e62:	47a0      	blx	r4
   11e64:	2200      	movs	r2, #0
   11e66:	4b1d      	ldr	r3, [pc, #116]	; (11edc <LORAWAN_GetAttr+0x5b4>)
   11e68:	4c17      	ldr	r4, [pc, #92]	; (11ec8 <LORAWAN_GetAttr+0x5a0>)
   11e6a:	47a0      	blx	r4
   11e6c:	2200      	movs	r2, #0
   11e6e:	4b1b      	ldr	r3, [pc, #108]	; (11edc <LORAWAN_GetAttr+0x5b4>)
   11e70:	47a0      	blx	r4
   11e72:	4b16      	ldr	r3, [pc, #88]	; (11ecc <LORAWAN_GetAttr+0x5a4>)
   11e74:	4798      	blx	r3
   11e76:	6030      	str	r0, [r6, #0]
   11e78:	e5aa      	b.n	119d0 <LORAWAN_GetAttr+0xa8>
   11e7a:	2200      	movs	r2, #0
   11e7c:	9202      	str	r2, [sp, #8]
   11e7e:	2b0b      	cmp	r3, #11
   11e80:	d000      	beq.n	11e84 <LORAWAN_GetAttr+0x55c>
   11e82:	e777      	b.n	11d74 <LORAWAN_GetAttr+0x44c>
   11e84:	7827      	ldrb	r7, [r4, #0]
   11e86:	3f07      	subs	r7, #7
   11e88:	427a      	negs	r2, r7
   11e8a:	417a      	adcs	r2, r7
   11e8c:	b2d3      	uxtb	r3, r2
   11e8e:	e770      	b.n	11d72 <LORAWAN_GetAttr+0x44a>
   11e90:	2400      	movs	r4, #0
   11e92:	2500      	movs	r5, #0
   11e94:	e780      	b.n	11d98 <LORAWAN_GetAttr+0x470>
   11e96:	20a0      	movs	r0, #160	; 0xa0
   11e98:	9b08      	ldr	r3, [sp, #32]
   11e9a:	4358      	muls	r0, r3
   11e9c:	23c8      	movs	r3, #200	; 0xc8
   11e9e:	009b      	lsls	r3, r3, #2
   11ea0:	18c0      	adds	r0, r0, r3
   11ea2:	4b0b      	ldr	r3, [pc, #44]	; (11ed0 <LORAWAN_GetAttr+0x5a8>)
   11ea4:	4798      	blx	r3
   11ea6:	e7e4      	b.n	11e72 <LORAWAN_GetAttr+0x54a>
   11ea8:	0000d805 	.word	0x0000d805
   11eac:	00014ae5 	.word	0x00014ae5
   11eb0:	000201f8 	.word	0x000201f8
   11eb4:	0001944d 	.word	0x0001944d
   11eb8:	00018051 	.word	0x00018051
   11ebc:	3ff00000 	.word	0x3ff00000
   11ec0:	00017a31 	.word	0x00017a31
   11ec4:	40110000 	.word	0x40110000
   11ec8:	000188b9 	.word	0x000188b9
   11ecc:	00016a4d 	.word	0x00016a4d
   11ed0:	000194d1 	.word	0x000194d1
   11ed4:	00018db9 	.word	0x00018db9
   11ed8:	000168ed 	.word	0x000168ed
   11edc:	408f4000 	.word	0x408f4000

00011ee0 <LORAWAN_TxDone>:
   11ee0:	b5f0      	push	{r4, r5, r6, r7, lr}
   11ee2:	6843      	ldr	r3, [r0, #4]
   11ee4:	b091      	sub	sp, #68	; 0x44
   11ee6:	ad08      	add	r5, sp, #32
   11ee8:	7804      	ldrb	r4, [r0, #0]
   11eea:	9302      	str	r3, [sp, #8]
   11eec:	2100      	movs	r1, #0
   11eee:	4b83      	ldr	r3, [pc, #524]	; (120fc <LORAWAN_TxDone+0x21c>)
   11ef0:	002a      	movs	r2, r5
   11ef2:	2027      	movs	r0, #39	; 0x27
   11ef4:	4798      	blx	r3
   11ef6:	4f82      	ldr	r7, [pc, #520]	; (12100 <LORAWAN_TxDone+0x220>)
   11ef8:	0039      	movs	r1, r7
   11efa:	317c      	adds	r1, #124	; 0x7c
   11efc:	780b      	ldrb	r3, [r1, #0]
   11efe:	2b7f      	cmp	r3, #127	; 0x7f
   11f00:	d900      	bls.n	11f04 <LORAWAN_TxDone+0x24>
   11f02:	e259      	b.n	123b8 <LORAWAN_TxDone+0x4d8>
   11f04:	4a7f      	ldr	r2, [pc, #508]	; (12104 <LORAWAN_TxDone+0x224>)
   11f06:	7810      	ldrb	r0, [r2, #0]
   11f08:	2804      	cmp	r0, #4
   11f0a:	d10b      	bne.n	11f24 <LORAWAN_TxDone+0x44>
   11f0c:	220e      	movs	r2, #14
   11f0e:	4393      	bics	r3, r2
   11f10:	700b      	strb	r3, [r1, #0]
   11f12:	3017      	adds	r0, #23
   11f14:	07db      	lsls	r3, r3, #31
   11f16:	d500      	bpl.n	11f1a <LORAWAN_TxDone+0x3a>
   11f18:	e0b0      	b.n	1207c <LORAWAN_TxDone+0x19c>
   11f1a:	201b      	movs	r0, #27
   11f1c:	4b7a      	ldr	r3, [pc, #488]	; (12108 <LORAWAN_TxDone+0x228>)
   11f1e:	4798      	blx	r3
   11f20:	b011      	add	sp, #68	; 0x44
   11f22:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11f24:	7813      	ldrb	r3, [r2, #0]
   11f26:	2b02      	cmp	r3, #2
   11f28:	d1fa      	bne.n	11f20 <LORAWAN_TxDone+0x40>
   11f2a:	4b78      	ldr	r3, [pc, #480]	; (1210c <LORAWAN_TxDone+0x22c>)
   11f2c:	5cfa      	ldrb	r2, [r7, r3]
   11f2e:	2a00      	cmp	r2, #0
   11f30:	d005      	beq.n	11f3e <LORAWAN_TxDone+0x5e>
   11f32:	2200      	movs	r2, #0
   11f34:	4976      	ldr	r1, [pc, #472]	; (12110 <LORAWAN_TxDone+0x230>)
   11f36:	54fa      	strb	r2, [r7, r3]
   11f38:	200b      	movs	r0, #11
   11f3a:	4b76      	ldr	r3, [pc, #472]	; (12114 <LORAWAN_TxDone+0x234>)
   11f3c:	4798      	blx	r3
   11f3e:	2c07      	cmp	r4, #7
   11f40:	d000      	beq.n	11f44 <LORAWAN_TxDone+0x64>
   11f42:	e09f      	b.n	12084 <LORAWAN_TxDone+0x1a4>
   11f44:	79eb      	ldrb	r3, [r5, #7]
   11f46:	2b00      	cmp	r3, #0
   11f48:	d0ea      	beq.n	11f20 <LORAWAN_TxDone+0x40>
   11f4a:	003b      	movs	r3, r7
   11f4c:	338c      	adds	r3, #140	; 0x8c
   11f4e:	7818      	ldrb	r0, [r3, #0]
   11f50:	003e      	movs	r6, r7
   11f52:	2304      	movs	r3, #4
   11f54:	36fe      	adds	r6, #254	; 0xfe
   11f56:	4018      	ands	r0, r3
   11f58:	4d6f      	ldr	r5, [pc, #444]	; (12118 <LORAWAN_TxDone+0x238>)
   11f5a:	d005      	beq.n	11f68 <LORAWAN_TxDone+0x88>
   11f5c:	2000      	movs	r0, #0
   11f5e:	2109      	movs	r1, #9
   11f60:	82b0      	strh	r0, [r6, #20]
   11f62:	47a8      	blx	r5
   11f64:	0020      	movs	r0, r4
   11f66:	e7d9      	b.n	11f1c <LORAWAN_TxDone+0x3c>
   11f68:	8ab3      	ldrh	r3, [r6, #20]
   11f6a:	2109      	movs	r1, #9
   11f6c:	3301      	adds	r3, #1
   11f6e:	82b3      	strh	r3, [r6, #20]
   11f70:	47a8      	blx	r5
   11f72:	8af3      	ldrh	r3, [r6, #22]
   11f74:	4a69      	ldr	r2, [pc, #420]	; (1211c <LORAWAN_TxDone+0x23c>)
   11f76:	4293      	cmp	r3, r2
   11f78:	d002      	beq.n	11f80 <LORAWAN_TxDone+0xa0>
   11f7a:	8ab2      	ldrh	r2, [r6, #20]
   11f7c:	429a      	cmp	r2, r3
   11f7e:	d265      	bcs.n	1204c <LORAWAN_TxDone+0x16c>
   11f80:	4b67      	ldr	r3, [pc, #412]	; (12120 <LORAWAN_TxDone+0x240>)
   11f82:	5cfb      	ldrb	r3, [r7, r3]
   11f84:	2b00      	cmp	r3, #0
   11f86:	d061      	beq.n	1204c <LORAWAN_TxDone+0x16c>
   11f88:	2601      	movs	r6, #1
   11f8a:	003b      	movs	r3, r7
   11f8c:	a906      	add	r1, sp, #24
   11f8e:	700e      	strb	r6, [r1, #0]
   11f90:	33e1      	adds	r3, #225	; 0xe1
   11f92:	781b      	ldrb	r3, [r3, #0]
   11f94:	aa0c      	add	r2, sp, #48	; 0x30
   11f96:	704b      	strb	r3, [r1, #1]
   11f98:	003b      	movs	r3, r7
   11f9a:	33df      	adds	r3, #223	; 0xdf
   11f9c:	781b      	ldrb	r3, [r3, #0]
   11f9e:	202f      	movs	r0, #47	; 0x2f
   11fa0:	708b      	strb	r3, [r1, #2]
   11fa2:	4b60      	ldr	r3, [pc, #384]	; (12124 <LORAWAN_TxDone+0x244>)
   11fa4:	4798      	blx	r3
   11fa6:	2808      	cmp	r0, #8
   11fa8:	d135      	bne.n	12016 <LORAWAN_TxDone+0x136>
   11faa:	a807      	add	r0, sp, #28
   11fac:	4b5e      	ldr	r3, [pc, #376]	; (12128 <LORAWAN_TxDone+0x248>)
   11fae:	7006      	strb	r6, [r0, #0]
   11fb0:	4798      	blx	r3
   11fb2:	980c      	ldr	r0, [sp, #48]	; 0x30
   11fb4:	990d      	ldr	r1, [sp, #52]	; 0x34
   11fb6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   11fb8:	4b5c      	ldr	r3, [pc, #368]	; (1212c <LORAWAN_TxDone+0x24c>)
   11fba:	4798      	blx	r3
   11fbc:	003b      	movs	r3, r7
   11fbe:	33c6      	adds	r3, #198	; 0xc6
   11fc0:	881b      	ldrh	r3, [r3, #0]
   11fc2:	a80a      	add	r0, sp, #40	; 0x28
   11fc4:	7003      	strb	r3, [r0, #0]
   11fc6:	4b5a      	ldr	r3, [pc, #360]	; (12130 <LORAWAN_TxDone+0x250>)
   11fc8:	6043      	str	r3, [r0, #4]
   11fca:	4b5a      	ldr	r3, [pc, #360]	; (12134 <LORAWAN_TxDone+0x254>)
   11fcc:	4798      	blx	r3
   11fce:	1e04      	subs	r4, r0, #0
   11fd0:	d108      	bne.n	11fe4 <LORAWAN_TxDone+0x104>
   11fd2:	220e      	movs	r2, #14
   11fd4:	377c      	adds	r7, #124	; 0x7c
   11fd6:	783b      	ldrb	r3, [r7, #0]
   11fd8:	4393      	bics	r3, r2
   11fda:	001a      	movs	r2, r3
   11fdc:	2302      	movs	r3, #2
   11fde:	4313      	orrs	r3, r2
   11fe0:	703b      	strb	r3, [r7, #0]
   11fe2:	e79d      	b.n	11f20 <LORAWAN_TxDone+0x40>
   11fe4:	003b      	movs	r3, r7
   11fe6:	338c      	adds	r3, #140	; 0x8c
   11fe8:	7818      	ldrb	r0, [r3, #0]
   11fea:	003b      	movs	r3, r7
   11fec:	4030      	ands	r0, r6
   11fee:	33fe      	adds	r3, #254	; 0xfe
   11ff0:	4e51      	ldr	r6, [pc, #324]	; (12138 <LORAWAN_TxDone+0x258>)
   11ff2:	4f52      	ldr	r7, [pc, #328]	; (1213c <LORAWAN_TxDone+0x25c>)
   11ff4:	2800      	cmp	r0, #0
   11ff6:	d009      	beq.n	1200c <LORAWAN_TxDone+0x12c>
   11ff8:	2000      	movs	r0, #0
   11ffa:	2109      	movs	r1, #9
   11ffc:	8298      	strh	r0, [r3, #20]
   11ffe:	47a8      	blx	r5
   12000:	4b4f      	ldr	r3, [pc, #316]	; (12140 <LORAWAN_TxDone+0x260>)
   12002:	4798      	blx	r3
   12004:	47b8      	blx	r7
   12006:	0020      	movs	r0, r4
   12008:	47b0      	blx	r6
   1200a:	e789      	b.n	11f20 <LORAWAN_TxDone+0x40>
   1200c:	2109      	movs	r1, #9
   1200e:	8298      	strh	r0, [r3, #20]
   12010:	47a8      	blx	r5
   12012:	4b4c      	ldr	r3, [pc, #304]	; (12144 <LORAWAN_TxDone+0x264>)
   12014:	e7f5      	b.n	12002 <LORAWAN_TxDone+0x122>
   12016:	003b      	movs	r3, r7
   12018:	338c      	adds	r3, #140	; 0x8c
   1201a:	7818      	ldrb	r0, [r3, #0]
   1201c:	003b      	movs	r3, r7
   1201e:	4006      	ands	r6, r0
   12020:	4c45      	ldr	r4, [pc, #276]	; (12138 <LORAWAN_TxDone+0x258>)
   12022:	33fe      	adds	r3, #254	; 0xfe
   12024:	4f45      	ldr	r7, [pc, #276]	; (1213c <LORAWAN_TxDone+0x25c>)
   12026:	2e00      	cmp	r6, #0
   12028:	d00a      	beq.n	12040 <LORAWAN_TxDone+0x160>
   1202a:	2600      	movs	r6, #0
   1202c:	2109      	movs	r1, #9
   1202e:	0030      	movs	r0, r6
   12030:	829e      	strh	r6, [r3, #20]
   12032:	47a8      	blx	r5
   12034:	4b42      	ldr	r3, [pc, #264]	; (12140 <LORAWAN_TxDone+0x260>)
   12036:	4798      	blx	r3
   12038:	47b8      	blx	r7
   1203a:	0030      	movs	r0, r6
   1203c:	47a0      	blx	r4
   1203e:	e76f      	b.n	11f20 <LORAWAN_TxDone+0x40>
   12040:	2109      	movs	r1, #9
   12042:	0030      	movs	r0, r6
   12044:	829e      	strh	r6, [r3, #20]
   12046:	47a8      	blx	r5
   12048:	4b3e      	ldr	r3, [pc, #248]	; (12144 <LORAWAN_TxDone+0x264>)
   1204a:	e7f4      	b.n	12036 <LORAWAN_TxDone+0x156>
   1204c:	003b      	movs	r3, r7
   1204e:	2000      	movs	r0, #0
   12050:	33fe      	adds	r3, #254	; 0xfe
   12052:	2109      	movs	r1, #9
   12054:	8298      	strh	r0, [r3, #20]
   12056:	47a8      	blx	r5
   12058:	003a      	movs	r2, r7
   1205a:	210e      	movs	r1, #14
   1205c:	327c      	adds	r2, #124	; 0x7c
   1205e:	7813      	ldrb	r3, [r2, #0]
   12060:	378c      	adds	r7, #140	; 0x8c
   12062:	438b      	bics	r3, r1
   12064:	7013      	strb	r3, [r2, #0]
   12066:	2220      	movs	r2, #32
   12068:	783b      	ldrb	r3, [r7, #0]
   1206a:	4c34      	ldr	r4, [pc, #208]	; (1213c <LORAWAN_TxDone+0x25c>)
   1206c:	4393      	bics	r3, r2
   1206e:	703b      	strb	r3, [r7, #0]
   12070:	07db      	lsls	r3, r3, #31
   12072:	d505      	bpl.n	12080 <LORAWAN_TxDone+0x1a0>
   12074:	4b32      	ldr	r3, [pc, #200]	; (12140 <LORAWAN_TxDone+0x260>)
   12076:	4798      	blx	r3
   12078:	47a0      	blx	r4
   1207a:	2007      	movs	r0, #7
   1207c:	4b2e      	ldr	r3, [pc, #184]	; (12138 <LORAWAN_TxDone+0x258>)
   1207e:	e74e      	b.n	11f1e <LORAWAN_TxDone+0x3e>
   12080:	4b30      	ldr	r3, [pc, #192]	; (12144 <LORAWAN_TxDone+0x264>)
   12082:	e7f8      	b.n	12076 <LORAWAN_TxDone+0x196>
   12084:	2c00      	cmp	r4, #0
   12086:	d000      	beq.n	1208a <LORAWAN_TxDone+0x1aa>
   12088:	e74a      	b.n	11f20 <LORAWAN_TxDone+0x40>
   1208a:	003b      	movs	r3, r7
   1208c:	33fc      	adds	r3, #252	; 0xfc
   1208e:	681d      	ldr	r5, [r3, #0]
   12090:	003b      	movs	r3, r7
   12092:	33fe      	adds	r3, #254	; 0xfe
   12094:	829c      	strh	r4, [r3, #20]
   12096:	0020      	movs	r0, r4
   12098:	2109      	movs	r1, #9
   1209a:	4c1f      	ldr	r4, [pc, #124]	; (12118 <LORAWAN_TxDone+0x238>)
   1209c:	47a0      	blx	r4
   1209e:	003b      	movs	r3, r7
   120a0:	003e      	movs	r6, r7
   120a2:	33db      	adds	r3, #219	; 0xdb
   120a4:	781b      	ldrb	r3, [r3, #0]
   120a6:	367c      	adds	r6, #124	; 0x7c
   120a8:	2b00      	cmp	r3, #0
   120aa:	d14d      	bne.n	12148 <LORAWAN_TxDone+0x268>
   120ac:	003a      	movs	r2, r7
   120ae:	32dc      	adds	r2, #220	; 0xdc
   120b0:	7812      	ldrb	r2, [r2, #0]
   120b2:	2a00      	cmp	r2, #0
   120b4:	d148      	bne.n	12148 <LORAWAN_TxDone+0x268>
   120b6:	7832      	ldrb	r2, [r6, #0]
   120b8:	3301      	adds	r3, #1
   120ba:	421a      	tst	r2, r3
   120bc:	d053      	beq.n	12166 <LORAWAN_TxDone+0x286>
   120be:	1d39      	adds	r1, r7, #4
   120c0:	6fca      	ldr	r2, [r1, #124]	; 0x7c
   120c2:	18d2      	adds	r2, r2, r3
   120c4:	67ca      	str	r2, [r1, #124]	; 0x7c
   120c6:	2188      	movs	r1, #136	; 0x88
   120c8:	0089      	lsls	r1, r1, #2
   120ca:	5c79      	ldrb	r1, [r7, r1]
   120cc:	2900      	cmp	r1, #0
   120ce:	d003      	beq.n	120d8 <LORAWAN_TxDone+0x1f8>
   120d0:	408b      	lsls	r3, r1
   120d2:	3b01      	subs	r3, #1
   120d4:	421a      	tst	r2, r3
   120d6:	d102      	bne.n	120de <LORAWAN_TxDone+0x1fe>
   120d8:	2116      	movs	r1, #22
   120da:	2000      	movs	r0, #0
   120dc:	47a0      	blx	r4
   120de:	782b      	ldrb	r3, [r5, #0]
   120e0:	003a      	movs	r2, r7
   120e2:	2b01      	cmp	r3, #1
   120e4:	d106      	bne.n	120f4 <LORAWAN_TxDone+0x214>
   120e6:	328c      	adds	r2, #140	; 0x8c
   120e8:	7811      	ldrb	r1, [r2, #0]
   120ea:	430b      	orrs	r3, r1
   120ec:	7013      	strb	r3, [r2, #0]
   120ee:	003a      	movs	r2, r7
   120f0:	32dc      	adds	r2, #220	; 0xdc
   120f2:	e000      	b.n	120f6 <LORAWAN_TxDone+0x216>
   120f4:	32db      	adds	r2, #219	; 0xdb
   120f6:	7813      	ldrb	r3, [r2, #0]
   120f8:	3301      	adds	r3, #1
   120fa:	e033      	b.n	12164 <LORAWAN_TxDone+0x284>
   120fc:	00011929 	.word	0x00011929
   12100:	20002b5c 	.word	0x20002b5c
   12104:	20002d90 	.word	0x20002d90
   12108:	0001090d 	.word	0x0001090d
   1210c:	00000216 	.word	0x00000216
   12110:	20002d71 	.word	0x20002d71
   12114:	00014bd5 	.word	0x00014bd5
   12118:	0000dfe1 	.word	0x0000dfe1
   1211c:	0000ffff 	.word	0x0000ffff
   12120:	0000021e 	.word	0x0000021e
   12124:	0000d805 	.word	0x0000d805
   12128:	00015dd9 	.word	0x00015dd9
   1212c:	00010e9d 	.word	0x00010e9d
   12130:	20002da1 	.word	0x20002da1
   12134:	00015505 	.word	0x00015505
   12138:	00011415 	.word	0x00011415
   1213c:	0000fd0d 	.word	0x0000fd0d
   12140:	000108b9 	.word	0x000108b9
   12144:	000108e9 	.word	0x000108e9
   12148:	003a      	movs	r2, r7
   1214a:	327c      	adds	r2, #124	; 0x7c
   1214c:	7811      	ldrb	r1, [r2, #0]
   1214e:	2201      	movs	r2, #1
   12150:	4211      	tst	r1, r2
   12152:	d008      	beq.n	12166 <LORAWAN_TxDone+0x286>
   12154:	0039      	movs	r1, r7
   12156:	318c      	adds	r1, #140	; 0x8c
   12158:	7809      	ldrb	r1, [r1, #0]
   1215a:	4211      	tst	r1, r2
   1215c:	d1c7      	bne.n	120ee <LORAWAN_TxDone+0x20e>
   1215e:	189b      	adds	r3, r3, r2
   12160:	003a      	movs	r2, r7
   12162:	32db      	adds	r2, #219	; 0xdb
   12164:	7013      	strb	r3, [r2, #0]
   12166:	003b      	movs	r3, r7
   12168:	2200      	movs	r2, #0
   1216a:	33f0      	adds	r3, #240	; 0xf0
   1216c:	701a      	strb	r2, [r3, #0]
   1216e:	003a      	movs	r2, r7
   12170:	210e      	movs	r1, #14
   12172:	2504      	movs	r5, #4
   12174:	327c      	adds	r2, #124	; 0x7c
   12176:	7813      	ldrb	r3, [r2, #0]
   12178:	003e      	movs	r6, r7
   1217a:	438b      	bics	r3, r1
   1217c:	432b      	orrs	r3, r5
   1217e:	7013      	strb	r3, [r2, #0]
   12180:	003b      	movs	r3, r7
   12182:	33df      	adds	r3, #223	; 0xdf
   12184:	781b      	ldrb	r3, [r3, #0]
   12186:	a907      	add	r1, sp, #28
   12188:	708b      	strb	r3, [r1, #2]
   1218a:	003b      	movs	r3, r7
   1218c:	33ee      	adds	r3, #238	; 0xee
   1218e:	781b      	ldrb	r3, [r3, #0]
   12190:	368c      	adds	r6, #140	; 0x8c
   12192:	704b      	strb	r3, [r1, #1]
   12194:	7833      	ldrb	r3, [r6, #0]
   12196:	ac0a      	add	r4, sp, #40	; 0x28
   12198:	075b      	lsls	r3, r3, #29
   1219a:	0fdb      	lsrs	r3, r3, #31
   1219c:	700b      	strb	r3, [r1, #0]
   1219e:	0022      	movs	r2, r4
   121a0:	4b95      	ldr	r3, [pc, #596]	; (123f8 <LORAWAN_TxDone+0x518>)
   121a2:	2019      	movs	r0, #25
   121a4:	4798      	blx	r3
   121a6:	7833      	ldrb	r3, [r6, #0]
   121a8:	422b      	tst	r3, r5
   121aa:	d100      	bne.n	121ae <LORAWAN_TxDone+0x2ce>
   121ac:	e0cd      	b.n	1234a <LORAWAN_TxDone+0x46a>
   121ae:	2300      	movs	r3, #0
   121b0:	ae0c      	add	r6, sp, #48	; 0x30
   121b2:	7033      	strb	r3, [r6, #0]
   121b4:	0032      	movs	r2, r6
   121b6:	2100      	movs	r1, #0
   121b8:	2009      	movs	r0, #9
   121ba:	4b8f      	ldr	r3, [pc, #572]	; (123f8 <LORAWAN_TxDone+0x518>)
   121bc:	4798      	blx	r3
   121be:	0031      	movs	r1, r6
   121c0:	aa06      	add	r2, sp, #24
   121c2:	0028      	movs	r0, r5
   121c4:	4b8c      	ldr	r3, [pc, #560]	; (123f8 <LORAWAN_TxDone+0x518>)
   121c6:	4798      	blx	r3
   121c8:	0039      	movs	r1, r7
   121ca:	7923      	ldrb	r3, [r4, #4]
   121cc:	3169      	adds	r1, #105	; 0x69
   121ce:	700b      	strb	r3, [r1, #0]
   121d0:	003b      	movs	r3, r7
   121d2:	260f      	movs	r6, #15
   121d4:	7822      	ldrb	r2, [r4, #0]
   121d6:	3365      	adds	r3, #101	; 0x65
   121d8:	701a      	strb	r2, [r3, #0]
   121da:	7862      	ldrb	r2, [r4, #1]
   121dc:	2004      	movs	r0, #4
   121de:	705a      	strb	r2, [r3, #1]
   121e0:	78a2      	ldrb	r2, [r4, #2]
   121e2:	2500      	movs	r5, #0
   121e4:	709a      	strb	r2, [r3, #2]
   121e6:	78e2      	ldrb	r2, [r4, #3]
   121e8:	70da      	strb	r2, [r3, #3]
   121ea:	ab02      	add	r3, sp, #8
   121ec:	18f6      	adds	r6, r6, r3
   121ee:	0032      	movs	r2, r6
   121f0:	4b81      	ldr	r3, [pc, #516]	; (123f8 <LORAWAN_TxDone+0x518>)
   121f2:	4798      	blx	r3
   121f4:	003b      	movs	r3, r7
   121f6:	338c      	adds	r3, #140	; 0x8c
   121f8:	781c      	ldrb	r4, [r3, #0]
   121fa:	2304      	movs	r3, #4
   121fc:	401c      	ands	r4, r3
   121fe:	2300      	movs	r3, #0
   12200:	003a      	movs	r2, r7
   12202:	56f3      	ldrsb	r3, [r6, r3]
   12204:	42ac      	cmp	r4, r5
   12206:	d100      	bne.n	1220a <LORAWAN_TxDone+0x32a>
   12208:	e0a2      	b.n	12350 <LORAWAN_TxDone+0x470>
   1220a:	2100      	movs	r1, #0
   1220c:	32ce      	adds	r2, #206	; 0xce
   1220e:	8816      	ldrh	r6, [r2, #0]
   12210:	aa06      	add	r2, sp, #24
   12212:	5651      	ldrsb	r1, [r2, r1]
   12214:	4c79      	ldr	r4, [pc, #484]	; (123fc <LORAWAN_TxDone+0x51c>)
   12216:	1872      	adds	r2, r6, r1
   12218:	9203      	str	r2, [sp, #12]
   1221a:	003a      	movs	r2, r7
   1221c:	32cc      	adds	r2, #204	; 0xcc
   1221e:	8811      	ldrh	r1, [r2, #0]
   12220:	26fa      	movs	r6, #250	; 0xfa
   12222:	18c9      	adds	r1, r1, r3
   12224:	4b76      	ldr	r3, [pc, #472]	; (12400 <LORAWAN_TxDone+0x520>)
   12226:	00b6      	lsls	r6, r6, #2
   12228:	5cfb      	ldrb	r3, [r7, r3]
   1222a:	002a      	movs	r2, r5
   1222c:	1ac9      	subs	r1, r1, r3
   1222e:	003b      	movs	r3, r7
   12230:	33e2      	adds	r3, #226	; 0xe2
   12232:	7818      	ldrb	r0, [r3, #0]
   12234:	4371      	muls	r1, r6
   12236:	4b73      	ldr	r3, [pc, #460]	; (12404 <LORAWAN_TxDone+0x524>)
   12238:	9500      	str	r5, [sp, #0]
   1223a:	47a0      	blx	r4
   1223c:	4b70      	ldr	r3, [pc, #448]	; (12400 <LORAWAN_TxDone+0x520>)
   1223e:	002a      	movs	r2, r5
   12240:	5cf9      	ldrb	r1, [r7, r3]
   12242:	9b03      	ldr	r3, [sp, #12]
   12244:	1a59      	subs	r1, r3, r1
   12246:	003b      	movs	r3, r7
   12248:	33e3      	adds	r3, #227	; 0xe3
   1224a:	7818      	ldrb	r0, [r3, #0]
   1224c:	4371      	muls	r1, r6
   1224e:	4b6e      	ldr	r3, [pc, #440]	; (12408 <LORAWAN_TxDone+0x528>)
   12250:	9500      	str	r5, [sp, #0]
   12252:	47a0      	blx	r4
   12254:	003b      	movs	r3, r7
   12256:	33ff      	adds	r3, #255	; 0xff
   12258:	7c5b      	ldrb	r3, [r3, #17]
   1225a:	069b      	lsls	r3, r3, #26
   1225c:	d549      	bpl.n	122f2 <LORAWAN_TxDone+0x412>
   1225e:	466a      	mov	r2, sp
   12260:	003b      	movs	r3, r7
   12262:	7a12      	ldrb	r2, [r2, #8]
   12264:	3377      	adds	r3, #119	; 0x77
   12266:	701a      	strb	r2, [r3, #0]
   12268:	9a02      	ldr	r2, [sp, #8]
   1226a:	ad0c      	add	r5, sp, #48	; 0x30
   1226c:	0a12      	lsrs	r2, r2, #8
   1226e:	705a      	strb	r2, [r3, #1]
   12270:	9a02      	ldr	r2, [sp, #8]
   12272:	0c12      	lsrs	r2, r2, #16
   12274:	709a      	strb	r2, [r3, #2]
   12276:	9a02      	ldr	r2, [sp, #8]
   12278:	0e12      	lsrs	r2, r2, #24
   1227a:	70da      	strb	r2, [r3, #3]
   1227c:	003b      	movs	r3, r7
   1227e:	337b      	adds	r3, #123	; 0x7b
   12280:	781b      	ldrb	r3, [r3, #0]
   12282:	2b00      	cmp	r3, #0
   12284:	d027      	beq.n	122d6 <LORAWAN_TxDone+0x3f6>
   12286:	003c      	movs	r4, r7
   12288:	6f3a      	ldr	r2, [r7, #112]	; 0x70
   1228a:	346f      	adds	r4, #111	; 0x6f
   1228c:	0216      	lsls	r6, r2, #8
   1228e:	003a      	movs	r2, r7
   12290:	7823      	ldrb	r3, [r4, #0]
   12292:	3273      	adds	r2, #115	; 0x73
   12294:	4333      	orrs	r3, r6
   12296:	6f7e      	ldr	r6, [r7, #116]	; 0x74
   12298:	7812      	ldrb	r2, [r2, #0]
   1229a:	0236      	lsls	r6, r6, #8
   1229c:	4316      	orrs	r6, r2
   1229e:	431e      	orrs	r6, r3
   122a0:	d119      	bne.n	122d6 <LORAWAN_TxDone+0x3f6>
   122a2:	2301      	movs	r3, #1
   122a4:	0029      	movs	r1, r5
   122a6:	702b      	strb	r3, [r5, #0]
   122a8:	2021      	movs	r0, #33	; 0x21
   122aa:	4b58      	ldr	r3, [pc, #352]	; (1240c <LORAWAN_TxDone+0x52c>)
   122ac:	4798      	blx	r3
   122ae:	4b58      	ldr	r3, [pc, #352]	; (12410 <LORAWAN_TxDone+0x530>)
   122b0:	4798      	blx	r3
   122b2:	0033      	movs	r3, r6
   122b4:	9a02      	ldr	r2, [sp, #8]
   122b6:	1a80      	subs	r0, r0, r2
   122b8:	4199      	sbcs	r1, r3
   122ba:	0a03      	lsrs	r3, r0, #8
   122bc:	7063      	strb	r3, [r4, #1]
   122be:	0c03      	lsrs	r3, r0, #16
   122c0:	70a3      	strb	r3, [r4, #2]
   122c2:	0e03      	lsrs	r3, r0, #24
   122c4:	70e3      	strb	r3, [r4, #3]
   122c6:	0a0b      	lsrs	r3, r1, #8
   122c8:	7163      	strb	r3, [r4, #5]
   122ca:	0c0b      	lsrs	r3, r1, #16
   122cc:	71a3      	strb	r3, [r4, #6]
   122ce:	0e0b      	lsrs	r3, r1, #24
   122d0:	7020      	strb	r0, [r4, #0]
   122d2:	7121      	strb	r1, [r4, #4]
   122d4:	71e3      	strb	r3, [r4, #7]
   122d6:	4a4f      	ldr	r2, [pc, #316]	; (12414 <LORAWAN_TxDone+0x534>)
   122d8:	2020      	movs	r0, #32
   122da:	0013      	movs	r3, r2
   122dc:	3377      	adds	r3, #119	; 0x77
   122de:	7819      	ldrb	r1, [r3, #0]
   122e0:	6f93      	ldr	r3, [r2, #120]	; 0x78
   122e2:	021b      	lsls	r3, r3, #8
   122e4:	430b      	orrs	r3, r1
   122e6:	930c      	str	r3, [sp, #48]	; 0x30
   122e8:	2301      	movs	r3, #1
   122ea:	0029      	movs	r1, r5
   122ec:	712b      	strb	r3, [r5, #4]
   122ee:	4b47      	ldr	r3, [pc, #284]	; (1240c <LORAWAN_TxDone+0x52c>)
   122f0:	4798      	blx	r3
   122f2:	4c48      	ldr	r4, [pc, #288]	; (12414 <LORAWAN_TxDone+0x534>)
   122f4:	2102      	movs	r1, #2
   122f6:	0023      	movs	r3, r4
   122f8:	33ff      	adds	r3, #255	; 0xff
   122fa:	7c5b      	ldrb	r3, [r3, #17]
   122fc:	4019      	ands	r1, r3
   122fe:	d057      	beq.n	123b0 <LORAWAN_TxDone+0x4d0>
   12300:	466b      	mov	r3, sp
   12302:	891b      	ldrh	r3, [r3, #8]
   12304:	a90c      	add	r1, sp, #48	; 0x30
   12306:	800b      	strh	r3, [r1, #0]
   12308:	0023      	movs	r3, r4
   1230a:	338c      	adds	r3, #140	; 0x8c
   1230c:	781b      	ldrb	r3, [r3, #0]
   1230e:	201f      	movs	r0, #31
   12310:	075b      	lsls	r3, r3, #29
   12312:	0fdb      	lsrs	r3, r3, #31
   12314:	710b      	strb	r3, [r1, #4]
   12316:	0023      	movs	r3, r4
   12318:	3390      	adds	r3, #144	; 0x90
   1231a:	781a      	ldrb	r2, [r3, #0]
   1231c:	2301      	movs	r3, #1
   1231e:	4093      	lsls	r3, r2
   12320:	804b      	strh	r3, [r1, #2]
   12322:	4b3a      	ldr	r3, [pc, #232]	; (1240c <LORAWAN_TxDone+0x52c>)
   12324:	4798      	blx	r3
   12326:	2589      	movs	r5, #137	; 0x89
   12328:	00ad      	lsls	r5, r5, #2
   1232a:	5d63      	ldrb	r3, [r4, r5]
   1232c:	2b00      	cmp	r3, #0
   1232e:	d100      	bne.n	12332 <LORAWAN_TxDone+0x452>
   12330:	e5f6      	b.n	11f20 <LORAWAN_TxDone+0x40>
   12332:	4b37      	ldr	r3, [pc, #220]	; (12410 <LORAWAN_TxDone+0x530>)
   12334:	4798      	blx	r3
   12336:	2300      	movs	r3, #0
   12338:	900c      	str	r0, [sp, #48]	; 0x30
   1233a:	910d      	str	r1, [sp, #52]	; 0x34
   1233c:	5563      	strb	r3, [r4, r5]
   1233e:	4b36      	ldr	r3, [pc, #216]	; (12418 <LORAWAN_TxDone+0x538>)
   12340:	a90c      	add	r1, sp, #48	; 0x30
   12342:	5ce0      	ldrb	r0, [r4, r3]
   12344:	4b35      	ldr	r3, [pc, #212]	; (1241c <LORAWAN_TxDone+0x53c>)
   12346:	4798      	blx	r3
   12348:	e5ea      	b.n	11f20 <LORAWAN_TxDone+0x40>
   1234a:	aa06      	add	r2, sp, #24
   1234c:	4934      	ldr	r1, [pc, #208]	; (12420 <LORAWAN_TxDone+0x540>)
   1234e:	e738      	b.n	121c2 <LORAWAN_TxDone+0x2e2>
   12350:	32c8      	adds	r2, #200	; 0xc8
   12352:	8811      	ldrh	r1, [r2, #0]
   12354:	25fa      	movs	r5, #250	; 0xfa
   12356:	18c9      	adds	r1, r1, r3
   12358:	4b29      	ldr	r3, [pc, #164]	; (12400 <LORAWAN_TxDone+0x520>)
   1235a:	00ad      	lsls	r5, r5, #2
   1235c:	5cfb      	ldrb	r3, [r7, r3]
   1235e:	0022      	movs	r2, r4
   12360:	1ac9      	subs	r1, r1, r3
   12362:	003b      	movs	r3, r7
   12364:	33e4      	adds	r3, #228	; 0xe4
   12366:	7818      	ldrb	r0, [r3, #0]
   12368:	4369      	muls	r1, r5
   1236a:	4b26      	ldr	r3, [pc, #152]	; (12404 <LORAWAN_TxDone+0x524>)
   1236c:	9400      	str	r4, [sp, #0]
   1236e:	4e23      	ldr	r6, [pc, #140]	; (123fc <LORAWAN_TxDone+0x51c>)
   12370:	47b0      	blx	r6
   12372:	003b      	movs	r3, r7
   12374:	33f4      	adds	r3, #244	; 0xf4
   12376:	781b      	ldrb	r3, [r3, #0]
   12378:	2b04      	cmp	r3, #4
   1237a:	d105      	bne.n	12388 <LORAWAN_TxDone+0x4a8>
   1237c:	2000      	movs	r0, #0
   1237e:	ab06      	add	r3, sp, #24
   12380:	5618      	ldrsb	r0, [r3, r0]
   12382:	4b28      	ldr	r3, [pc, #160]	; (12424 <LORAWAN_TxDone+0x544>)
   12384:	4798      	blx	r3
   12386:	e7b4      	b.n	122f2 <LORAWAN_TxDone+0x412>
   12388:	2b01      	cmp	r3, #1
   1238a:	d1b2      	bne.n	122f2 <LORAWAN_TxDone+0x412>
   1238c:	003b      	movs	r3, r7
   1238e:	33ca      	adds	r3, #202	; 0xca
   12390:	8819      	ldrh	r1, [r3, #0]
   12392:	ab06      	add	r3, sp, #24
   12394:	781b      	ldrb	r3, [r3, #0]
   12396:	0022      	movs	r2, r4
   12398:	b25b      	sxtb	r3, r3
   1239a:	18c9      	adds	r1, r1, r3
   1239c:	4b18      	ldr	r3, [pc, #96]	; (12400 <LORAWAN_TxDone+0x520>)
   1239e:	5cfb      	ldrb	r3, [r7, r3]
   123a0:	37e5      	adds	r7, #229	; 0xe5
   123a2:	1ac9      	subs	r1, r1, r3
   123a4:	7838      	ldrb	r0, [r7, #0]
   123a6:	4369      	muls	r1, r5
   123a8:	9400      	str	r4, [sp, #0]
   123aa:	4b17      	ldr	r3, [pc, #92]	; (12408 <LORAWAN_TxDone+0x528>)
   123ac:	47b0      	blx	r6
   123ae:	e7a0      	b.n	122f2 <LORAWAN_TxDone+0x412>
   123b0:	075b      	lsls	r3, r3, #29
   123b2:	d5b8      	bpl.n	12326 <LORAWAN_TxDone+0x446>
   123b4:	2022      	movs	r0, #34	; 0x22
   123b6:	e7b4      	b.n	12322 <LORAWAN_TxDone+0x442>
   123b8:	491b      	ldr	r1, [pc, #108]	; (12428 <LORAWAN_TxDone+0x548>)
   123ba:	784a      	ldrb	r2, [r1, #1]
   123bc:	780b      	ldrb	r3, [r1, #0]
   123be:	0212      	lsls	r2, r2, #8
   123c0:	431a      	orrs	r2, r3
   123c2:	788b      	ldrb	r3, [r1, #2]
   123c4:	041b      	lsls	r3, r3, #16
   123c6:	431a      	orrs	r2, r3
   123c8:	78cb      	ldrb	r3, [r1, #3]
   123ca:	061b      	lsls	r3, r3, #24
   123cc:	4313      	orrs	r3, r2
   123ce:	d100      	bne.n	123d2 <LORAWAN_TxDone+0x4f2>
   123d0:	e5a6      	b.n	11f20 <LORAWAN_TxDone+0x40>
   123d2:	4a16      	ldr	r2, [pc, #88]	; (1242c <LORAWAN_TxDone+0x54c>)
   123d4:	7811      	ldrb	r1, [r2, #0]
   123d6:	221c      	movs	r2, #28
   123d8:	2904      	cmp	r1, #4
   123da:	d003      	beq.n	123e4 <LORAWAN_TxDone+0x504>
   123dc:	2200      	movs	r2, #0
   123de:	2c07      	cmp	r4, #7
   123e0:	d100      	bne.n	123e4 <LORAWAN_TxDone+0x504>
   123e2:	0022      	movs	r2, r4
   123e4:	0039      	movs	r1, r7
   123e6:	2004      	movs	r0, #4
   123e8:	31ff      	adds	r1, #255	; 0xff
   123ea:	37fc      	adds	r7, #252	; 0xfc
   123ec:	7048      	strb	r0, [r1, #1]
   123ee:	714a      	strb	r2, [r1, #5]
   123f0:	6838      	ldr	r0, [r7, #0]
   123f2:	490f      	ldr	r1, [pc, #60]	; (12430 <LORAWAN_TxDone+0x550>)
   123f4:	4798      	blx	r3
   123f6:	e593      	b.n	11f20 <LORAWAN_TxDone+0x40>
   123f8:	0000d805 	.word	0x0000d805
   123fc:	0000ed11 	.word	0x0000ed11
   12400:	0000021f 	.word	0x0000021f
   12404:	00010e25 	.word	0x00010e25
   12408:	00012771 	.word	0x00012771
   1240c:	0000d92d 	.word	0x0000d92d
   12410:	0000ecb9 	.word	0x0000ecb9
   12414:	20002b5c 	.word	0x20002b5c
   12418:	00000225 	.word	0x00000225
   1241c:	0000f315 	.word	0x0000f315
   12420:	20002bca 	.word	0x20002bca
   12424:	00014285 	.word	0x00014285
   12428:	20002ea4 	.word	0x20002ea4
   1242c:	20002d90 	.word	0x20002d90
   12430:	20002c5c 	.word	0x20002c5c

00012434 <radioCallback>:
   12434:	4b10      	ldr	r3, [pc, #64]	; (12478 <radioCallback+0x44>)
   12436:	b510      	push	{r4, lr}
   12438:	7018      	strb	r0, [r3, #0]
   1243a:	3801      	subs	r0, #1
   1243c:	b2c0      	uxtb	r0, r0
   1243e:	000c      	movs	r4, r1
   12440:	281f      	cmp	r0, #31
   12442:	d809      	bhi.n	12458 <radioCallback+0x24>
   12444:	2301      	movs	r3, #1
   12446:	4083      	lsls	r3, r0
   12448:	4a0c      	ldr	r2, [pc, #48]	; (1247c <radioCallback+0x48>)
   1244a:	4213      	tst	r3, r2
   1244c:	d109      	bne.n	12462 <radioCallback+0x2e>
   1244e:	220a      	movs	r2, #10
   12450:	4213      	tst	r3, r2
   12452:	d102      	bne.n	1245a <radioCallback+0x26>
   12454:	2b00      	cmp	r3, #0
   12456:	db08      	blt.n	1246a <radioCallback+0x36>
   12458:	bd10      	pop	{r4, pc}
   1245a:	0008      	movs	r0, r1
   1245c:	4b08      	ldr	r3, [pc, #32]	; (12480 <radioCallback+0x4c>)
   1245e:	4798      	blx	r3
   12460:	e7fa      	b.n	12458 <radioCallback+0x24>
   12462:	2002      	movs	r0, #2
   12464:	4b07      	ldr	r3, [pc, #28]	; (12484 <radioCallback+0x50>)
   12466:	4798      	blx	r3
   12468:	e7f6      	b.n	12458 <radioCallback+0x24>
   1246a:	4b07      	ldr	r3, [pc, #28]	; (12488 <radioCallback+0x54>)
   1246c:	681b      	ldr	r3, [r3, #0]
   1246e:	2b00      	cmp	r3, #0
   12470:	d0f2      	beq.n	12458 <radioCallback+0x24>
   12472:	4798      	blx	r3
   12474:	6020      	str	r0, [r4, #0]
   12476:	e7ef      	b.n	12458 <radioCallback+0x24>
   12478:	20002d90 	.word	0x20002d90
   1247c:	00008081 	.word	0x00008081
   12480:	00011ee1 	.word	0x00011ee1
   12484:	00014a61 	.word	0x00014a61
   12488:	20002ea0 	.word	0x20002ea0

0001248c <LorawanCheckAndDoRetryOnTimeout>:
   1248c:	b513      	push	{r0, r1, r4, lr}
   1248e:	4c33      	ldr	r4, [pc, #204]	; (1255c <LorawanCheckAndDoRetryOnTimeout+0xd0>)
   12490:	0023      	movs	r3, r4
   12492:	338c      	adds	r3, #140	; 0x8c
   12494:	781b      	ldrb	r3, [r3, #0]
   12496:	0022      	movs	r2, r4
   12498:	07db      	lsls	r3, r3, #31
   1249a:	d54b      	bpl.n	12534 <LorawanCheckAndDoRetryOnTimeout+0xa8>
   1249c:	0023      	movs	r3, r4
   1249e:	32dc      	adds	r2, #220	; 0xdc
   124a0:	33da      	adds	r3, #218	; 0xda
   124a2:	7812      	ldrb	r2, [r2, #0]
   124a4:	781b      	ldrb	r3, [r3, #0]
   124a6:	429a      	cmp	r2, r3
   124a8:	d836      	bhi.n	12518 <LorawanCheckAndDoRetryOnTimeout+0x8c>
   124aa:	4b2d      	ldr	r3, [pc, #180]	; (12560 <LorawanCheckAndDoRetryOnTimeout+0xd4>)
   124ac:	5ce3      	ldrb	r3, [r4, r3]
   124ae:	2b00      	cmp	r3, #0
   124b0:	d032      	beq.n	12518 <LorawanCheckAndDoRetryOnTimeout+0x8c>
   124b2:	0023      	movs	r3, r4
   124b4:	33f4      	adds	r3, #244	; 0xf4
   124b6:	781b      	ldrb	r3, [r3, #0]
   124b8:	2b01      	cmp	r3, #1
   124ba:	d119      	bne.n	124f0 <LorawanCheckAndDoRetryOnTimeout+0x64>
   124bc:	0021      	movs	r1, r4
   124be:	220e      	movs	r2, #14
   124c0:	317c      	adds	r1, #124	; 0x7c
   124c2:	780b      	ldrb	r3, [r1, #0]
   124c4:	4393      	bics	r3, r2
   124c6:	001a      	movs	r2, r3
   124c8:	230c      	movs	r3, #12
   124ca:	4313      	orrs	r3, r2
   124cc:	700b      	strb	r3, [r1, #0]
   124ce:	0023      	movs	r3, r4
   124d0:	33d2      	adds	r3, #210	; 0xd2
   124d2:	8819      	ldrh	r1, [r3, #0]
   124d4:	4b23      	ldr	r3, [pc, #140]	; (12564 <LorawanCheckAndDoRetryOnTimeout+0xd8>)
   124d6:	2200      	movs	r2, #0
   124d8:	5ce3      	ldrb	r3, [r4, r3]
   124da:	34e8      	adds	r4, #232	; 0xe8
   124dc:	1acb      	subs	r3, r1, r3
   124de:	21fa      	movs	r1, #250	; 0xfa
   124e0:	0089      	lsls	r1, r1, #2
   124e2:	7820      	ldrb	r0, [r4, #0]
   124e4:	4359      	muls	r1, r3
   124e6:	9200      	str	r2, [sp, #0]
   124e8:	4b1f      	ldr	r3, [pc, #124]	; (12568 <LorawanCheckAndDoRetryOnTimeout+0xdc>)
   124ea:	4c20      	ldr	r4, [pc, #128]	; (1256c <LorawanCheckAndDoRetryOnTimeout+0xe0>)
   124ec:	47a0      	blx	r4
   124ee:	bd13      	pop	{r0, r1, r4, pc}
   124f0:	2b04      	cmp	r3, #4
   124f2:	d1fc      	bne.n	124ee <LorawanCheckAndDoRetryOnTimeout+0x62>
   124f4:	4b1e      	ldr	r3, [pc, #120]	; (12570 <LorawanCheckAndDoRetryOnTimeout+0xe4>)
   124f6:	4798      	blx	r3
   124f8:	34c6      	adds	r4, #198	; 0xc6
   124fa:	300d      	adds	r0, #13
   124fc:	8823      	ldrh	r3, [r4, #0]
   124fe:	b280      	uxth	r0, r0
   12500:	4283      	cmp	r3, r0
   12502:	d802      	bhi.n	1250a <LorawanCheckAndDoRetryOnTimeout+0x7e>
   12504:	4b1b      	ldr	r3, [pc, #108]	; (12574 <LorawanCheckAndDoRetryOnTimeout+0xe8>)
   12506:	4798      	blx	r3
   12508:	e7f1      	b.n	124ee <LorawanCheckAndDoRetryOnTimeout+0x62>
   1250a:	200e      	movs	r0, #14
   1250c:	4b1a      	ldr	r3, [pc, #104]	; (12578 <LorawanCheckAndDoRetryOnTimeout+0xec>)
   1250e:	4798      	blx	r3
   12510:	4b1a      	ldr	r3, [pc, #104]	; (1257c <LorawanCheckAndDoRetryOnTimeout+0xf0>)
   12512:	4798      	blx	r3
   12514:	4b1a      	ldr	r3, [pc, #104]	; (12580 <LorawanCheckAndDoRetryOnTimeout+0xf4>)
   12516:	e7f6      	b.n	12506 <LorawanCheckAndDoRetryOnTimeout+0x7a>
   12518:	2012      	movs	r0, #18
   1251a:	4b17      	ldr	r3, [pc, #92]	; (12578 <LorawanCheckAndDoRetryOnTimeout+0xec>)
   1251c:	4798      	blx	r3
   1251e:	4b17      	ldr	r3, [pc, #92]	; (1257c <LorawanCheckAndDoRetryOnTimeout+0xf0>)
   12520:	4798      	blx	r3
   12522:	34f4      	adds	r4, #244	; 0xf4
   12524:	4b16      	ldr	r3, [pc, #88]	; (12580 <LorawanCheckAndDoRetryOnTimeout+0xf4>)
   12526:	4798      	blx	r3
   12528:	7823      	ldrb	r3, [r4, #0]
   1252a:	2b04      	cmp	r3, #4
   1252c:	d1df      	bne.n	124ee <LorawanCheckAndDoRetryOnTimeout+0x62>
   1252e:	4b15      	ldr	r3, [pc, #84]	; (12584 <LorawanCheckAndDoRetryOnTimeout+0xf8>)
   12530:	4798      	blx	r3
   12532:	e7dc      	b.n	124ee <LorawanCheckAndDoRetryOnTimeout+0x62>
   12534:	0023      	movs	r3, r4
   12536:	32db      	adds	r2, #219	; 0xdb
   12538:	33d9      	adds	r3, #217	; 0xd9
   1253a:	7812      	ldrb	r2, [r2, #0]
   1253c:	781b      	ldrb	r3, [r3, #0]
   1253e:	429a      	cmp	r2, r3
   12540:	d803      	bhi.n	1254a <LorawanCheckAndDoRetryOnTimeout+0xbe>
   12542:	4b07      	ldr	r3, [pc, #28]	; (12560 <LorawanCheckAndDoRetryOnTimeout+0xd4>)
   12544:	5ce3      	ldrb	r3, [r4, r3]
   12546:	2b00      	cmp	r3, #0
   12548:	d1dc      	bne.n	12504 <LorawanCheckAndDoRetryOnTimeout+0x78>
   1254a:	4b0f      	ldr	r3, [pc, #60]	; (12588 <LorawanCheckAndDoRetryOnTimeout+0xfc>)
   1254c:	4798      	blx	r3
   1254e:	4b0c      	ldr	r3, [pc, #48]	; (12580 <LorawanCheckAndDoRetryOnTimeout+0xf4>)
   12550:	4798      	blx	r3
   12552:	2008      	movs	r0, #8
   12554:	4b08      	ldr	r3, [pc, #32]	; (12578 <LorawanCheckAndDoRetryOnTimeout+0xec>)
   12556:	4798      	blx	r3
   12558:	e7c9      	b.n	124ee <LorawanCheckAndDoRetryOnTimeout+0x62>
   1255a:	46c0      	nop			; (mov r8, r8)
   1255c:	20002b5c 	.word	0x20002b5c
   12560:	0000021e 	.word	0x0000021e
   12564:	0000021f 	.word	0x0000021f
   12568:	0001258d 	.word	0x0001258d
   1256c:	0000ed11 	.word	0x0000ed11
   12570:	0000fdf9 	.word	0x0000fdf9
   12574:	00010f0d 	.word	0x00010f0d
   12578:	00011415 	.word	0x00011415
   1257c:	000108b9 	.word	0x000108b9
   12580:	0000fd0d 	.word	0x0000fd0d
   12584:	000154e9 	.word	0x000154e9
   12588:	000108e9 	.word	0x000108e9

0001258c <AckRetransmissionCallback>:
   1258c:	b510      	push	{r4, lr}
   1258e:	4c1c      	ldr	r4, [pc, #112]	; (12600 <AckRetransmissionCallback+0x74>)
   12590:	0023      	movs	r3, r4
   12592:	337c      	adds	r3, #124	; 0x7c
   12594:	781b      	ldrb	r3, [r3, #0]
   12596:	2b7f      	cmp	r3, #127	; 0x7f
   12598:	d82d      	bhi.n	125f6 <AckRetransmissionCallback+0x6a>
   1259a:	0023      	movs	r3, r4
   1259c:	33f4      	adds	r3, #244	; 0xf4
   1259e:	781b      	ldrb	r3, [r3, #0]
   125a0:	2b04      	cmp	r3, #4
   125a2:	d102      	bne.n	125aa <AckRetransmissionCallback+0x1e>
   125a4:	4b17      	ldr	r3, [pc, #92]	; (12604 <AckRetransmissionCallback+0x78>)
   125a6:	4798      	blx	r3
   125a8:	e01e      	b.n	125e8 <AckRetransmissionCallback+0x5c>
   125aa:	2b01      	cmp	r3, #1
   125ac:	d11c      	bne.n	125e8 <AckRetransmissionCallback+0x5c>
   125ae:	0022      	movs	r2, r4
   125b0:	0023      	movs	r3, r4
   125b2:	32dc      	adds	r2, #220	; 0xdc
   125b4:	33da      	adds	r3, #218	; 0xda
   125b6:	7812      	ldrb	r2, [r2, #0]
   125b8:	781b      	ldrb	r3, [r3, #0]
   125ba:	429a      	cmp	r2, r3
   125bc:	d815      	bhi.n	125ea <AckRetransmissionCallback+0x5e>
   125be:	4b12      	ldr	r3, [pc, #72]	; (12608 <AckRetransmissionCallback+0x7c>)
   125c0:	5ce3      	ldrb	r3, [r4, r3]
   125c2:	2b00      	cmp	r3, #0
   125c4:	d011      	beq.n	125ea <AckRetransmissionCallback+0x5e>
   125c6:	4b11      	ldr	r3, [pc, #68]	; (1260c <AckRetransmissionCallback+0x80>)
   125c8:	4798      	blx	r3
   125ca:	34c6      	adds	r4, #198	; 0xc6
   125cc:	300d      	adds	r0, #13
   125ce:	8823      	ldrh	r3, [r4, #0]
   125d0:	b280      	uxth	r0, r0
   125d2:	4283      	cmp	r3, r0
   125d4:	d801      	bhi.n	125da <AckRetransmissionCallback+0x4e>
   125d6:	4b0e      	ldr	r3, [pc, #56]	; (12610 <AckRetransmissionCallback+0x84>)
   125d8:	e7e5      	b.n	125a6 <AckRetransmissionCallback+0x1a>
   125da:	4b0e      	ldr	r3, [pc, #56]	; (12614 <AckRetransmissionCallback+0x88>)
   125dc:	4798      	blx	r3
   125de:	4b0e      	ldr	r3, [pc, #56]	; (12618 <AckRetransmissionCallback+0x8c>)
   125e0:	4798      	blx	r3
   125e2:	200e      	movs	r0, #14
   125e4:	4b0d      	ldr	r3, [pc, #52]	; (1261c <AckRetransmissionCallback+0x90>)
   125e6:	4798      	blx	r3
   125e8:	bd10      	pop	{r4, pc}
   125ea:	4b0a      	ldr	r3, [pc, #40]	; (12614 <AckRetransmissionCallback+0x88>)
   125ec:	4798      	blx	r3
   125ee:	4b0a      	ldr	r3, [pc, #40]	; (12618 <AckRetransmissionCallback+0x8c>)
   125f0:	4798      	blx	r3
   125f2:	2012      	movs	r0, #18
   125f4:	e7f6      	b.n	125e4 <AckRetransmissionCallback+0x58>
   125f6:	4b07      	ldr	r3, [pc, #28]	; (12614 <AckRetransmissionCallback+0x88>)
   125f8:	4798      	blx	r3
   125fa:	4b07      	ldr	r3, [pc, #28]	; (12618 <AckRetransmissionCallback+0x8c>)
   125fc:	e7d3      	b.n	125a6 <AckRetransmissionCallback+0x1a>
   125fe:	46c0      	nop			; (mov r8, r8)
   12600:	20002b5c 	.word	0x20002b5c
   12604:	0001248d 	.word	0x0001248d
   12608:	0000021e 	.word	0x0000021e
   1260c:	0000fdf9 	.word	0x0000fdf9
   12610:	00010f0d 	.word	0x00010f0d
   12614:	000108b9 	.word	0x000108b9
   12618:	0000fd0d 	.word	0x0000fd0d
   1261c:	00011415 	.word	0x00011415

00012620 <LORAWAN_RxTimeout>:
   12620:	4b22      	ldr	r3, [pc, #136]	; (126ac <LORAWAN_RxTimeout+0x8c>)
   12622:	b510      	push	{r4, lr}
   12624:	001a      	movs	r2, r3
   12626:	327c      	adds	r2, #124	; 0x7c
   12628:	7812      	ldrb	r2, [r2, #0]
   1262a:	b251      	sxtb	r1, r2
   1262c:	2900      	cmp	r1, #0
   1262e:	db23      	blt.n	12678 <LORAWAN_RxTimeout+0x58>
   12630:	0019      	movs	r1, r3
   12632:	31f4      	adds	r1, #244	; 0xf4
   12634:	7809      	ldrb	r1, [r1, #0]
   12636:	2904      	cmp	r1, #4
   12638:	d104      	bne.n	12644 <LORAWAN_RxTimeout+0x24>
   1263a:	07d1      	lsls	r1, r2, #31
   1263c:	d502      	bpl.n	12644 <LORAWAN_RxTimeout+0x24>
   1263e:	4b1c      	ldr	r3, [pc, #112]	; (126b0 <LORAWAN_RxTimeout+0x90>)
   12640:	4798      	blx	r3
   12642:	bd10      	pop	{r4, pc}
   12644:	210e      	movs	r1, #14
   12646:	0010      	movs	r0, r2
   12648:	4008      	ands	r0, r1
   1264a:	2806      	cmp	r0, #6
   1264c:	d107      	bne.n	1265e <LORAWAN_RxTimeout+0x3e>
   1264e:	337c      	adds	r3, #124	; 0x7c
   12650:	781a      	ldrb	r2, [r3, #0]
   12652:	438a      	bics	r2, r1
   12654:	0011      	movs	r1, r2
   12656:	2208      	movs	r2, #8
   12658:	430a      	orrs	r2, r1
   1265a:	701a      	strb	r2, [r3, #0]
   1265c:	e7f1      	b.n	12642 <LORAWAN_RxTimeout+0x22>
   1265e:	2004      	movs	r0, #4
   12660:	338c      	adds	r3, #140	; 0x8c
   12662:	781b      	ldrb	r3, [r3, #0]
   12664:	4203      	tst	r3, r0
   12666:	d002      	beq.n	1266e <LORAWAN_RxTimeout+0x4e>
   12668:	4b12      	ldr	r3, [pc, #72]	; (126b4 <LORAWAN_RxTimeout+0x94>)
   1266a:	4798      	blx	r3
   1266c:	e7e9      	b.n	12642 <LORAWAN_RxTimeout+0x22>
   1266e:	07d3      	lsls	r3, r2, #31
   12670:	d5e7      	bpl.n	12642 <LORAWAN_RxTimeout+0x22>
   12672:	4b11      	ldr	r3, [pc, #68]	; (126b8 <LORAWAN_RxTimeout+0x98>)
   12674:	4798      	blx	r3
   12676:	e7e4      	b.n	12642 <LORAWAN_RxTimeout+0x22>
   12678:	4810      	ldr	r0, [pc, #64]	; (126bc <LORAWAN_RxTimeout+0x9c>)
   1267a:	7841      	ldrb	r1, [r0, #1]
   1267c:	7802      	ldrb	r2, [r0, #0]
   1267e:	0209      	lsls	r1, r1, #8
   12680:	4311      	orrs	r1, r2
   12682:	7882      	ldrb	r2, [r0, #2]
   12684:	0412      	lsls	r2, r2, #16
   12686:	4311      	orrs	r1, r2
   12688:	78c2      	ldrb	r2, [r0, #3]
   1268a:	0612      	lsls	r2, r2, #24
   1268c:	430a      	orrs	r2, r1
   1268e:	d0d8      	beq.n	12642 <LORAWAN_RxTimeout+0x22>
   12690:	2185      	movs	r1, #133	; 0x85
   12692:	2001      	movs	r0, #1
   12694:	0089      	lsls	r1, r1, #2
   12696:	5458      	strb	r0, [r3, r1]
   12698:	0019      	movs	r1, r3
   1269a:	2404      	movs	r4, #4
   1269c:	31ff      	adds	r1, #255	; 0xff
   1269e:	33fc      	adds	r3, #252	; 0xfc
   126a0:	704c      	strb	r4, [r1, #1]
   126a2:	7148      	strb	r0, [r1, #5]
   126a4:	4906      	ldr	r1, [pc, #24]	; (126c0 <LORAWAN_RxTimeout+0xa0>)
   126a6:	6818      	ldr	r0, [r3, #0]
   126a8:	4790      	blx	r2
   126aa:	e7ca      	b.n	12642 <LORAWAN_RxTimeout+0x22>
   126ac:	20002b5c 	.word	0x20002b5c
   126b0:	00014309 	.word	0x00014309
   126b4:	0001090d 	.word	0x0001090d
   126b8:	0001248d 	.word	0x0001248d
   126bc:	20002ea4 	.word	0x20002ea4
   126c0:	20002c5c 	.word	0x20002c5c

000126c4 <LorawanConfigureRadioForRX2>:
   126c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   126c6:	466b      	mov	r3, sp
   126c8:	4c21      	ldr	r4, [pc, #132]	; (12750 <LorawanConfigureRadioForRX2+0x8c>)
   126ca:	1cdd      	adds	r5, r3, #3
   126cc:	0023      	movs	r3, r4
   126ce:	2100      	movs	r1, #0
   126d0:	338c      	adds	r3, #140	; 0x8c
   126d2:	781b      	ldrb	r3, [r3, #0]
   126d4:	0007      	movs	r7, r0
   126d6:	7029      	strb	r1, [r5, #0]
   126d8:	075b      	lsls	r3, r3, #29
   126da:	d52c      	bpl.n	12736 <LorawanConfigureRadioForRX2+0x72>
   126dc:	002a      	movs	r2, r5
   126de:	2009      	movs	r0, #9
   126e0:	4b1c      	ldr	r3, [pc, #112]	; (12754 <LorawanConfigureRadioForRX2+0x90>)
   126e2:	4798      	blx	r3
   126e4:	0022      	movs	r2, r4
   126e6:	0023      	movs	r3, r4
   126e8:	326c      	adds	r2, #108	; 0x6c
   126ea:	8811      	ldrh	r1, [r2, #0]
   126ec:	336a      	adds	r3, #106	; 0x6a
   126ee:	881b      	ldrh	r3, [r3, #0]
   126f0:	0409      	lsls	r1, r1, #16
   126f2:	4319      	orrs	r1, r3
   126f4:	7828      	ldrb	r0, [r5, #0]
   126f6:	4b18      	ldr	r3, [pc, #96]	; (12758 <LorawanConfigureRadioForRX2+0x94>)
   126f8:	4798      	blx	r3
   126fa:	2300      	movs	r3, #0
   126fc:	0022      	movs	r2, r4
   126fe:	ae01      	add	r6, sp, #4
   12700:	7033      	strb	r3, [r6, #0]
   12702:	32f4      	adds	r2, #244	; 0xf4
   12704:	7812      	ldrb	r2, [r2, #0]
   12706:	2a04      	cmp	r2, #4
   12708:	d11a      	bne.n	12740 <LorawanConfigureRadioForRX2+0x7c>
   1270a:	347c      	adds	r4, #124	; 0x7c
   1270c:	7822      	ldrb	r2, [r4, #0]
   1270e:	07d2      	lsls	r2, r2, #31
   12710:	d516      	bpl.n	12740 <LorawanConfigureRadioForRX2+0x7c>
   12712:	8073      	strh	r3, [r6, #2]
   12714:	0030      	movs	r0, r6
   12716:	4b11      	ldr	r3, [pc, #68]	; (1275c <LorawanConfigureRadioForRX2+0x98>)
   12718:	4798      	blx	r3
   1271a:	1e04      	subs	r4, r0, #0
   1271c:	d00a      	beq.n	12734 <LorawanConfigureRadioForRX2+0x70>
   1271e:	4b10      	ldr	r3, [pc, #64]	; (12760 <LorawanConfigureRadioForRX2+0x9c>)
   12720:	4798      	blx	r3
   12722:	4b10      	ldr	r3, [pc, #64]	; (12764 <LorawanConfigureRadioForRX2+0xa0>)
   12724:	4798      	blx	r3
   12726:	4b10      	ldr	r3, [pc, #64]	; (12768 <LorawanConfigureRadioForRX2+0xa4>)
   12728:	4798      	blx	r3
   1272a:	2f00      	cmp	r7, #0
   1272c:	d002      	beq.n	12734 <LorawanConfigureRadioForRX2+0x70>
   1272e:	0020      	movs	r0, r4
   12730:	4b0e      	ldr	r3, [pc, #56]	; (1276c <LorawanConfigureRadioForRX2+0xa8>)
   12732:	4798      	blx	r3
   12734:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
   12736:	0023      	movs	r3, r4
   12738:	336e      	adds	r3, #110	; 0x6e
   1273a:	781b      	ldrb	r3, [r3, #0]
   1273c:	702b      	strb	r3, [r5, #0]
   1273e:	e7d1      	b.n	126e4 <LorawanConfigureRadioForRX2+0x20>
   12740:	466b      	mov	r3, sp
   12742:	0029      	movs	r1, r5
   12744:	1d9a      	adds	r2, r3, #6
   12746:	2003      	movs	r0, #3
   12748:	4b02      	ldr	r3, [pc, #8]	; (12754 <LorawanConfigureRadioForRX2+0x90>)
   1274a:	4798      	blx	r3
   1274c:	e7e2      	b.n	12714 <LorawanConfigureRadioForRX2+0x50>
   1274e:	46c0      	nop			; (mov r8, r8)
   12750:	20002b5c 	.word	0x20002b5c
   12754:	0000d805 	.word	0x0000d805
   12758:	00010db9 	.word	0x00010db9
   1275c:	00015dd9 	.word	0x00015dd9
   12760:	000108b9 	.word	0x000108b9
   12764:	000108e9 	.word	0x000108e9
   12768:	0000fd0d 	.word	0x0000fd0d
   1276c:	00011415 	.word	0x00011415

00012770 <LorawanReceiveWindow2Callback>:
   12770:	b570      	push	{r4, r5, r6, lr}
   12772:	4c16      	ldr	r4, [pc, #88]	; (127cc <LorawanReceiveWindow2Callback+0x5c>)
   12774:	0025      	movs	r5, r4
   12776:	357c      	adds	r5, #124	; 0x7c
   12778:	782b      	ldrb	r3, [r5, #0]
   1277a:	2b7f      	cmp	r3, #127	; 0x7f
   1277c:	d811      	bhi.n	127a2 <LorawanReceiveWindow2Callback+0x32>
   1277e:	4b14      	ldr	r3, [pc, #80]	; (127d0 <LorawanReceiveWindow2Callback+0x60>)
   12780:	4798      	blx	r3
   12782:	2801      	cmp	r0, #1
   12784:	d109      	bne.n	1279a <LorawanReceiveWindow2Callback+0x2a>
   12786:	220e      	movs	r2, #14
   12788:	782b      	ldrb	r3, [r5, #0]
   1278a:	4393      	bics	r3, r2
   1278c:	001a      	movs	r2, r3
   1278e:	230a      	movs	r3, #10
   12790:	4313      	orrs	r3, r2
   12792:	702b      	strb	r3, [r5, #0]
   12794:	4b0f      	ldr	r3, [pc, #60]	; (127d4 <LorawanReceiveWindow2Callback+0x64>)
   12796:	4798      	blx	r3
   12798:	bd70      	pop	{r4, r5, r6, pc}
   1279a:	2301      	movs	r3, #1
   1279c:	34f0      	adds	r4, #240	; 0xf0
   1279e:	7023      	strb	r3, [r4, #0]
   127a0:	e7fa      	b.n	12798 <LorawanReceiveWindow2Callback+0x28>
   127a2:	2104      	movs	r1, #4
   127a4:	348c      	adds	r4, #140	; 0x8c
   127a6:	7822      	ldrb	r2, [r4, #0]
   127a8:	420a      	tst	r2, r1
   127aa:	d007      	beq.n	127bc <LorawanReceiveWindow2Callback+0x4c>
   127ac:	2001      	movs	r0, #1
   127ae:	4383      	bics	r3, r0
   127b0:	438a      	bics	r2, r1
   127b2:	702b      	strb	r3, [r5, #0]
   127b4:	3107      	adds	r1, #7
   127b6:	4b08      	ldr	r3, [pc, #32]	; (127d8 <LorawanReceiveWindow2Callback+0x68>)
   127b8:	7022      	strb	r2, [r4, #0]
   127ba:	4798      	blx	r3
   127bc:	4b07      	ldr	r3, [pc, #28]	; (127dc <LorawanReceiveWindow2Callback+0x6c>)
   127be:	4798      	blx	r3
   127c0:	4b07      	ldr	r3, [pc, #28]	; (127e0 <LorawanReceiveWindow2Callback+0x70>)
   127c2:	4798      	blx	r3
   127c4:	4b07      	ldr	r3, [pc, #28]	; (127e4 <LorawanReceiveWindow2Callback+0x74>)
   127c6:	4798      	blx	r3
   127c8:	e7e6      	b.n	12798 <LorawanReceiveWindow2Callback+0x28>
   127ca:	46c0      	nop			; (mov r8, r8)
   127cc:	20002b5c 	.word	0x20002b5c
   127d0:	000154e9 	.word	0x000154e9
   127d4:	000126c5 	.word	0x000126c5
   127d8:	0000dfe1 	.word	0x0000dfe1
   127dc:	000108e9 	.word	0x000108e9
   127e0:	000108b9 	.word	0x000108b9
   127e4:	0000fd0d 	.word	0x0000fd0d

000127e8 <SetReceptionNotOkState>:
   127e8:	2285      	movs	r2, #133	; 0x85
   127ea:	2101      	movs	r1, #1
   127ec:	4b1c      	ldr	r3, [pc, #112]	; (12860 <SetReceptionNotOkState+0x78>)
   127ee:	0092      	lsls	r2, r2, #2
   127f0:	b510      	push	{r4, lr}
   127f2:	5499      	strb	r1, [r3, r2]
   127f4:	001a      	movs	r2, r3
   127f6:	0019      	movs	r1, r3
   127f8:	32f4      	adds	r2, #244	; 0xf4
   127fa:	7812      	ldrb	r2, [r2, #0]
   127fc:	317c      	adds	r1, #124	; 0x7c
   127fe:	200e      	movs	r0, #14
   12800:	2a01      	cmp	r2, #1
   12802:	d124      	bne.n	1284e <SetReceptionNotOkState+0x66>
   12804:	780a      	ldrb	r2, [r1, #0]
   12806:	4002      	ands	r2, r0
   12808:	2a0a      	cmp	r2, #10
   1280a:	d006      	beq.n	1281a <SetReceptionNotOkState+0x32>
   1280c:	2a06      	cmp	r2, #6
   1280e:	d11a      	bne.n	12846 <SetReceptionNotOkState+0x5e>
   12810:	001a      	movs	r2, r3
   12812:	32f0      	adds	r2, #240	; 0xf0
   12814:	7812      	ldrb	r2, [r2, #0]
   12816:	2a00      	cmp	r2, #0
   12818:	d015      	beq.n	12846 <SetReceptionNotOkState+0x5e>
   1281a:	0019      	movs	r1, r3
   1281c:	2001      	movs	r0, #1
   1281e:	318c      	adds	r1, #140	; 0x8c
   12820:	780a      	ldrb	r2, [r1, #0]
   12822:	240e      	movs	r4, #14
   12824:	4382      	bics	r2, r0
   12826:	700a      	strb	r2, [r1, #0]
   12828:	0019      	movs	r1, r3
   1282a:	2200      	movs	r2, #0
   1282c:	31db      	adds	r1, #219	; 0xdb
   1282e:	700a      	strb	r2, [r1, #0]
   12830:	0019      	movs	r1, r3
   12832:	31dc      	adds	r1, #220	; 0xdc
   12834:	700a      	strb	r2, [r1, #0]
   12836:	001a      	movs	r2, r3
   12838:	327c      	adds	r2, #124	; 0x7c
   1283a:	7811      	ldrb	r1, [r2, #0]
   1283c:	43a1      	bics	r1, r4
   1283e:	7011      	strb	r1, [r2, #0]
   12840:	7851      	ldrb	r1, [r2, #1]
   12842:	4381      	bics	r1, r0
   12844:	7051      	strb	r1, [r2, #1]
   12846:	2200      	movs	r2, #0
   12848:	33f0      	adds	r3, #240	; 0xf0
   1284a:	701a      	strb	r2, [r3, #0]
   1284c:	bd10      	pop	{r4, pc}
   1284e:	230a      	movs	r3, #10
   12850:	780a      	ldrb	r2, [r1, #0]
   12852:	4382      	bics	r2, r0
   12854:	4313      	orrs	r3, r2
   12856:	700b      	strb	r3, [r1, #0]
   12858:	2000      	movs	r0, #0
   1285a:	4b02      	ldr	r3, [pc, #8]	; (12864 <SetReceptionNotOkState+0x7c>)
   1285c:	4798      	blx	r3
   1285e:	e7f5      	b.n	1284c <SetReceptionNotOkState+0x64>
   12860:	20002b5c 	.word	0x20002b5c
   12864:	000126c5 	.word	0x000126c5

00012868 <LorawanProcessFcntDown>:
   12868:	b570      	push	{r4, r5, r6, lr}
   1286a:	4c54      	ldr	r4, [pc, #336]	; (129bc <LorawanProcessFcntDown+0x154>)
   1286c:	79c3      	ldrb	r3, [r0, #7]
   1286e:	0021      	movs	r1, r4
   12870:	7982      	ldrb	r2, [r0, #6]
   12872:	021b      	lsls	r3, r3, #8
   12874:	3184      	adds	r1, #132	; 0x84
   12876:	4313      	orrs	r3, r2
   12878:	880a      	ldrh	r2, [r1, #0]
   1287a:	4293      	cmp	r3, r2
   1287c:	d352      	bcc.n	12924 <LorawanProcessFcntDown+0xbc>
   1287e:	0020      	movs	r0, r4
   12880:	30d0      	adds	r0, #208	; 0xd0
   12882:	8800      	ldrh	r0, [r0, #0]
   12884:	1a9a      	subs	r2, r3, r2
   12886:	4282      	cmp	r2, r0
   12888:	dd38      	ble.n	128fc <LorawanProcessFcntDown+0x94>
   1288a:	0022      	movs	r2, r4
   1288c:	2101      	movs	r1, #1
   1288e:	328c      	adds	r2, #140	; 0x8c
   12890:	7813      	ldrb	r3, [r2, #0]
   12892:	438b      	bics	r3, r1
   12894:	7013      	strb	r3, [r2, #0]
   12896:	0023      	movs	r3, r4
   12898:	33f4      	adds	r3, #244	; 0xf4
   1289a:	781b      	ldrb	r3, [r3, #0]
   1289c:	428b      	cmp	r3, r1
   1289e:	d108      	bne.n	128b2 <LorawanProcessFcntDown+0x4a>
   128a0:	0023      	movs	r3, r4
   128a2:	220e      	movs	r2, #14
   128a4:	337c      	adds	r3, #124	; 0x7c
   128a6:	781b      	ldrb	r3, [r3, #0]
   128a8:	4013      	ands	r3, r2
   128aa:	2b06      	cmp	r3, #6
   128ac:	d101      	bne.n	128b2 <LorawanProcessFcntDown+0x4a>
   128ae:	4b44      	ldr	r3, [pc, #272]	; (129c0 <LorawanProcessFcntDown+0x158>)
   128b0:	4798      	blx	r3
   128b2:	4944      	ldr	r1, [pc, #272]	; (129c4 <LorawanProcessFcntDown+0x15c>)
   128b4:	784a      	ldrb	r2, [r1, #1]
   128b6:	780b      	ldrb	r3, [r1, #0]
   128b8:	0212      	lsls	r2, r2, #8
   128ba:	431a      	orrs	r2, r3
   128bc:	788b      	ldrb	r3, [r1, #2]
   128be:	041b      	lsls	r3, r3, #16
   128c0:	431a      	orrs	r2, r3
   128c2:	78cb      	ldrb	r3, [r1, #3]
   128c4:	061b      	lsls	r3, r3, #24
   128c6:	4313      	orrs	r3, r2
   128c8:	d008      	beq.n	128dc <LorawanProcessFcntDown+0x74>
   128ca:	0022      	movs	r2, r4
   128cc:	2120      	movs	r1, #32
   128ce:	328c      	adds	r2, #140	; 0x8c
   128d0:	7813      	ldrb	r3, [r2, #0]
   128d2:	2017      	movs	r0, #23
   128d4:	438b      	bics	r3, r1
   128d6:	7013      	strb	r3, [r2, #0]
   128d8:	4b3b      	ldr	r3, [pc, #236]	; (129c8 <LorawanProcessFcntDown+0x160>)
   128da:	4798      	blx	r3
   128dc:	2501      	movs	r5, #1
   128de:	347c      	adds	r4, #124	; 0x7c
   128e0:	7863      	ldrb	r3, [r4, #1]
   128e2:	43ab      	bics	r3, r5
   128e4:	7063      	strb	r3, [r4, #1]
   128e6:	78a3      	ldrb	r3, [r4, #2]
   128e8:	432b      	orrs	r3, r5
   128ea:	70a3      	strb	r3, [r4, #2]
   128ec:	4b37      	ldr	r3, [pc, #220]	; (129cc <LorawanProcessFcntDown+0x164>)
   128ee:	4798      	blx	r3
   128f0:	210b      	movs	r1, #11
   128f2:	0028      	movs	r0, r5
   128f4:	4b36      	ldr	r3, [pc, #216]	; (129d0 <LorawanProcessFcntDown+0x168>)
   128f6:	4798      	blx	r3
   128f8:	200d      	movs	r0, #13
   128fa:	e00d      	b.n	12918 <LorawanProcessFcntDown+0xb0>
   128fc:	800b      	strh	r3, [r1, #0]
   128fe:	2388      	movs	r3, #136	; 0x88
   12900:	009b      	lsls	r3, r3, #2
   12902:	5ce2      	ldrb	r2, [r4, r3]
   12904:	2a00      	cmp	r2, #0
   12906:	d008      	beq.n	1291a <LorawanProcessFcntDown+0xb2>
   12908:	2301      	movs	r3, #1
   1290a:	4093      	lsls	r3, r2
   1290c:	3408      	adds	r4, #8
   1290e:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
   12910:	3b01      	subs	r3, #1
   12912:	421a      	tst	r2, r3
   12914:	d001      	beq.n	1291a <LorawanProcessFcntDown+0xb2>
   12916:	2008      	movs	r0, #8
   12918:	bd70      	pop	{r4, r5, r6, pc}
   1291a:	210a      	movs	r1, #10
   1291c:	4b2c      	ldr	r3, [pc, #176]	; (129d0 <LorawanProcessFcntDown+0x168>)
   1291e:	2001      	movs	r0, #1
   12920:	4798      	blx	r3
   12922:	e7f8      	b.n	12916 <LorawanProcessFcntDown+0xae>
   12924:	482b      	ldr	r0, [pc, #172]	; (129d4 <LorawanProcessFcntDown+0x16c>)
   12926:	1a9a      	subs	r2, r3, r2
   12928:	1812      	adds	r2, r2, r0
   1292a:	482b      	ldr	r0, [pc, #172]	; (129d8 <LorawanProcessFcntDown+0x170>)
   1292c:	4282      	cmp	r2, r0
   1292e:	dc1f      	bgt.n	12970 <LorawanProcessFcntDown+0x108>
   12930:	0022      	movs	r2, r4
   12932:	800b      	strh	r3, [r1, #0]
   12934:	3286      	adds	r2, #134	; 0x86
   12936:	8813      	ldrh	r3, [r2, #0]
   12938:	3301      	adds	r3, #1
   1293a:	8013      	strh	r3, [r2, #0]
   1293c:	2388      	movs	r3, #136	; 0x88
   1293e:	009b      	lsls	r3, r3, #2
   12940:	5ce2      	ldrb	r2, [r4, r3]
   12942:	2a00      	cmp	r2, #0
   12944:	d007      	beq.n	12956 <LorawanProcessFcntDown+0xee>
   12946:	2301      	movs	r3, #1
   12948:	4093      	lsls	r3, r2
   1294a:	0022      	movs	r2, r4
   1294c:	3208      	adds	r2, #8
   1294e:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
   12950:	3b01      	subs	r3, #1
   12952:	421a      	tst	r2, r3
   12954:	d103      	bne.n	1295e <LorawanProcessFcntDown+0xf6>
   12956:	210a      	movs	r1, #10
   12958:	2001      	movs	r0, #1
   1295a:	4b1d      	ldr	r3, [pc, #116]	; (129d0 <LorawanProcessFcntDown+0x168>)
   1295c:	4798      	blx	r3
   1295e:	0023      	movs	r3, r4
   12960:	3308      	adds	r3, #8
   12962:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   12964:	3301      	adds	r3, #1
   12966:	d1d6      	bne.n	12916 <LorawanProcessFcntDown+0xae>
   12968:	347c      	adds	r4, #124	; 0x7c
   1296a:	78a3      	ldrb	r3, [r4, #2]
   1296c:	2501      	movs	r5, #1
   1296e:	e7bb      	b.n	128e8 <LorawanProcessFcntDown+0x80>
   12970:	0023      	movs	r3, r4
   12972:	33f4      	adds	r3, #244	; 0xf4
   12974:	781b      	ldrb	r3, [r3, #0]
   12976:	2b01      	cmp	r3, #1
   12978:	d108      	bne.n	1298c <LorawanProcessFcntDown+0x124>
   1297a:	0023      	movs	r3, r4
   1297c:	220e      	movs	r2, #14
   1297e:	337c      	adds	r3, #124	; 0x7c
   12980:	781b      	ldrb	r3, [r3, #0]
   12982:	4013      	ands	r3, r2
   12984:	2b06      	cmp	r3, #6
   12986:	d101      	bne.n	1298c <LorawanProcessFcntDown+0x124>
   12988:	4b0d      	ldr	r3, [pc, #52]	; (129c0 <LorawanProcessFcntDown+0x158>)
   1298a:	4798      	blx	r3
   1298c:	490d      	ldr	r1, [pc, #52]	; (129c4 <LorawanProcessFcntDown+0x15c>)
   1298e:	784a      	ldrb	r2, [r1, #1]
   12990:	780b      	ldrb	r3, [r1, #0]
   12992:	0212      	lsls	r2, r2, #8
   12994:	431a      	orrs	r2, r3
   12996:	788b      	ldrb	r3, [r1, #2]
   12998:	041b      	lsls	r3, r3, #16
   1299a:	431a      	orrs	r2, r3
   1299c:	78cb      	ldrb	r3, [r1, #3]
   1299e:	061b      	lsls	r3, r3, #24
   129a0:	4313      	orrs	r3, r2
   129a2:	d007      	beq.n	129b4 <LorawanProcessFcntDown+0x14c>
   129a4:	2220      	movs	r2, #32
   129a6:	348c      	adds	r4, #140	; 0x8c
   129a8:	7823      	ldrb	r3, [r4, #0]
   129aa:	2017      	movs	r0, #23
   129ac:	4393      	bics	r3, r2
   129ae:	7023      	strb	r3, [r4, #0]
   129b0:	4b05      	ldr	r3, [pc, #20]	; (129c8 <LorawanProcessFcntDown+0x160>)
   129b2:	4798      	blx	r3
   129b4:	4b05      	ldr	r3, [pc, #20]	; (129cc <LorawanProcessFcntDown+0x164>)
   129b6:	4798      	blx	r3
   129b8:	200a      	movs	r0, #10
   129ba:	e7ad      	b.n	12918 <LorawanProcessFcntDown+0xb0>
   129bc:	20002b5c 	.word	0x20002b5c
   129c0:	00010225 	.word	0x00010225
   129c4:	20002ea4 	.word	0x20002ea4
   129c8:	00011415 	.word	0x00011415
   129cc:	000127e9 	.word	0x000127e9
   129d0:	0000dfe1 	.word	0x0000dfe1
   129d4:	0000ffff 	.word	0x0000ffff
   129d8:	00003fff 	.word	0x00003fff

000129dc <UpdateCurrentDataRateAfterDataRangeChanges>:
   129dc:	4b09      	ldr	r3, [pc, #36]	; (12a04 <UpdateCurrentDataRateAfterDataRangeChanges+0x28>)
   129de:	001a      	movs	r2, r3
   129e0:	32eb      	adds	r2, #235	; 0xeb
   129e2:	7811      	ldrb	r1, [r2, #0]
   129e4:	001a      	movs	r2, r3
   129e6:	32df      	adds	r2, #223	; 0xdf
   129e8:	7810      	ldrb	r0, [r2, #0]
   129ea:	4288      	cmp	r0, r1
   129ec:	d900      	bls.n	129f0 <UpdateCurrentDataRateAfterDataRangeChanges+0x14>
   129ee:	7011      	strb	r1, [r2, #0]
   129f0:	001a      	movs	r2, r3
   129f2:	33df      	adds	r3, #223	; 0xdf
   129f4:	32ea      	adds	r2, #234	; 0xea
   129f6:	7812      	ldrb	r2, [r2, #0]
   129f8:	7819      	ldrb	r1, [r3, #0]
   129fa:	4291      	cmp	r1, r2
   129fc:	d200      	bcs.n	12a00 <UpdateCurrentDataRateAfterDataRangeChanges+0x24>
   129fe:	701a      	strb	r2, [r3, #0]
   12a00:	4770      	bx	lr
   12a02:	46c0      	nop			; (mov r8, r8)
   12a04:	20002b5c 	.word	0x20002b5c

00012a08 <ExecuteNewChannel>:
   12a08:	b5f0      	push	{r4, r5, r6, r7, lr}
   12a0a:	b08d      	sub	sp, #52	; 0x34
   12a0c:	7807      	ldrb	r7, [r0, #0]
   12a0e:	ab02      	add	r3, sp, #8
   12a10:	0006      	movs	r6, r0
   12a12:	71df      	strb	r7, [r3, #7]
   12a14:	1c41      	adds	r1, r0, #1
   12a16:	4b59      	ldr	r3, [pc, #356]	; (12b7c <ExecuteNewChannel+0x174>)
   12a18:	2204      	movs	r2, #4
   12a1a:	a808      	add	r0, sp, #32
   12a1c:	4798      	blx	r3
   12a1e:	9b08      	ldr	r3, [sp, #32]
   12a20:	4c57      	ldr	r4, [pc, #348]	; (12b80 <ExecuteNewChannel+0x178>)
   12a22:	021d      	lsls	r5, r3, #8
   12a24:	2364      	movs	r3, #100	; 0x64
   12a26:	0a2d      	lsrs	r5, r5, #8
   12a28:	435d      	muls	r5, r3
   12a2a:	1d73      	adds	r3, r6, #5
   12a2c:	9301      	str	r3, [sp, #4]
   12a2e:	0023      	movs	r3, r4
   12a30:	9508      	str	r5, [sp, #32]
   12a32:	33f6      	adds	r3, #246	; 0xf6
   12a34:	781b      	ldrb	r3, [r3, #0]
   12a36:	3b02      	subs	r3, #2
   12a38:	2b01      	cmp	r3, #1
   12a3a:	d800      	bhi.n	12a3e <ExecuteNewChannel+0x36>
   12a3c:	e092      	b.n	12b64 <ExecuteNewChannel+0x15c>
   12a3e:	7933      	ldrb	r3, [r6, #4]
   12a40:	a904      	add	r1, sp, #16
   12a42:	9300      	str	r3, [sp, #0]
   12a44:	2300      	movs	r3, #0
   12a46:	2015      	movs	r0, #21
   12a48:	4e4e      	ldr	r6, [pc, #312]	; (12b84 <ExecuteNewChannel+0x17c>)
   12a4a:	700f      	strb	r7, [r1, #0]
   12a4c:	704b      	strb	r3, [r1, #1]
   12a4e:	47b0      	blx	r6
   12a50:	2808      	cmp	r0, #8
   12a52:	d12b      	bne.n	12aac <ExecuteNewChannel+0xa4>
   12a54:	466a      	mov	r2, sp
   12a56:	ab02      	add	r3, sp, #8
   12a58:	79db      	ldrb	r3, [r3, #7]
   12a5a:	7812      	ldrb	r2, [r2, #0]
   12a5c:	af06      	add	r7, sp, #24
   12a5e:	a90a      	add	r1, sp, #40	; 0x28
   12a60:	3806      	subs	r0, #6
   12a62:	703b      	strb	r3, [r7, #0]
   12a64:	707a      	strb	r2, [r7, #1]
   12a66:	710b      	strb	r3, [r1, #4]
   12a68:	950a      	str	r5, [sp, #40]	; 0x28
   12a6a:	47b0      	blx	r6
   12a6c:	2808      	cmp	r0, #8
   12a6e:	d001      	beq.n	12a74 <ExecuteNewChannel+0x6c>
   12a70:	2d00      	cmp	r5, #0
   12a72:	d10b      	bne.n	12a8c <ExecuteNewChannel+0x84>
   12a74:	0023      	movs	r3, r4
   12a76:	33d8      	adds	r3, #216	; 0xd8
   12a78:	781a      	ldrb	r2, [r3, #0]
   12a7a:	2303      	movs	r3, #3
   12a7c:	4353      	muls	r3, r2
   12a7e:	2280      	movs	r2, #128	; 0x80
   12a80:	18e3      	adds	r3, r4, r3
   12a82:	3390      	adds	r3, #144	; 0x90
   12a84:	7899      	ldrb	r1, [r3, #2]
   12a86:	4252      	negs	r2, r2
   12a88:	430a      	orrs	r2, r1
   12a8a:	709a      	strb	r2, [r3, #2]
   12a8c:	0039      	movs	r1, r7
   12a8e:	2012      	movs	r0, #18
   12a90:	47b0      	blx	r6
   12a92:	2808      	cmp	r0, #8
   12a94:	d10a      	bne.n	12aac <ExecuteNewChannel+0xa4>
   12a96:	0023      	movs	r3, r4
   12a98:	33d8      	adds	r3, #216	; 0xd8
   12a9a:	781a      	ldrb	r2, [r3, #0]
   12a9c:	2303      	movs	r3, #3
   12a9e:	4353      	muls	r3, r2
   12aa0:	2240      	movs	r2, #64	; 0x40
   12aa2:	18e3      	adds	r3, r4, r3
   12aa4:	3390      	adds	r3, #144	; 0x90
   12aa6:	7899      	ldrb	r1, [r3, #2]
   12aa8:	430a      	orrs	r2, r1
   12aaa:	709a      	strb	r2, [r3, #2]
   12aac:	0023      	movs	r3, r4
   12aae:	33d8      	adds	r3, #216	; 0xd8
   12ab0:	781a      	ldrb	r2, [r3, #0]
   12ab2:	2303      	movs	r3, #3
   12ab4:	4353      	muls	r3, r2
   12ab6:	18e3      	adds	r3, r4, r3
   12ab8:	3390      	adds	r3, #144	; 0x90
   12aba:	789b      	ldrb	r3, [r3, #2]
   12abc:	09da      	lsrs	r2, r3, #7
   12abe:	2a01      	cmp	r2, #1
   12ac0:	d150      	bne.n	12b64 <ExecuteNewChannel+0x15c>
   12ac2:	065b      	lsls	r3, r3, #25
   12ac4:	d54e      	bpl.n	12b64 <ExecuteNewChannel+0x15c>
   12ac6:	4e30      	ldr	r6, [pc, #192]	; (12b88 <ExecuteNewChannel+0x180>)
   12ac8:	2d00      	cmp	r5, #0
   12aca:	d04e      	beq.n	12b6a <ExecuteNewChannel+0x162>
   12acc:	a906      	add	r1, sp, #24
   12ace:	2012      	movs	r0, #18
   12ad0:	47b0      	blx	r6
   12ad2:	ad07      	add	r5, sp, #28
   12ad4:	a90a      	add	r1, sp, #40	; 0x28
   12ad6:	2000      	movs	r0, #0
   12ad8:	47b0      	blx	r6
   12ada:	002a      	movs	r2, r5
   12adc:	2100      	movs	r1, #0
   12ade:	2014      	movs	r0, #20
   12ae0:	4f2a      	ldr	r7, [pc, #168]	; (12b8c <ExecuteNewChannel+0x184>)
   12ae2:	47b8      	blx	r7
   12ae4:	0023      	movs	r3, r4
   12ae6:	782a      	ldrb	r2, [r5, #0]
   12ae8:	33ea      	adds	r3, #234	; 0xea
   12aea:	701a      	strb	r2, [r3, #0]
   12aec:	0023      	movs	r3, r4
   12aee:	786a      	ldrb	r2, [r5, #1]
   12af0:	33eb      	adds	r3, #235	; 0xeb
   12af2:	701a      	strb	r2, [r3, #0]
   12af4:	34ff      	adds	r4, #255	; 0xff
   12af6:	4b26      	ldr	r3, [pc, #152]	; (12b90 <ExecuteNewChannel+0x188>)
   12af8:	4798      	blx	r3
   12afa:	7c63      	ldrb	r3, [r4, #17]
   12afc:	079b      	lsls	r3, r3, #30
   12afe:	d50e      	bpl.n	12b1e <ExecuteNewChannel+0x116>
   12b00:	2416      	movs	r4, #22
   12b02:	ab02      	add	r3, sp, #8
   12b04:	18e4      	adds	r4, r4, r3
   12b06:	1dd9      	adds	r1, r3, #7
   12b08:	0022      	movs	r2, r4
   12b0a:	201e      	movs	r0, #30
   12b0c:	47b8      	blx	r7
   12b0e:	ab02      	add	r3, sp, #8
   12b10:	79db      	ldrb	r3, [r3, #7]
   12b12:	a909      	add	r1, sp, #36	; 0x24
   12b14:	708b      	strb	r3, [r1, #2]
   12b16:	8823      	ldrh	r3, [r4, #0]
   12b18:	201e      	movs	r0, #30
   12b1a:	800b      	strh	r3, [r1, #0]
   12b1c:	47b0      	blx	r6
   12b1e:	ab02      	add	r3, sp, #8
   12b20:	79db      	ldrb	r3, [r3, #7]
   12b22:	a905      	add	r1, sp, #20
   12b24:	700b      	strb	r3, [r1, #0]
   12b26:	2301      	movs	r3, #1
   12b28:	2016      	movs	r0, #22
   12b2a:	704b      	strb	r3, [r1, #1]
   12b2c:	4b16      	ldr	r3, [pc, #88]	; (12b88 <ExecuteNewChannel+0x180>)
   12b2e:	4798      	blx	r3
   12b30:	ad09      	add	r5, sp, #36	; 0x24
   12b32:	2100      	movs	r1, #0
   12b34:	002a      	movs	r2, r5
   12b36:	4b15      	ldr	r3, [pc, #84]	; (12b8c <ExecuteNewChannel+0x184>)
   12b38:	2014      	movs	r0, #20
   12b3a:	4798      	blx	r3
   12b3c:	4c10      	ldr	r4, [pc, #64]	; (12b80 <ExecuteNewChannel+0x178>)
   12b3e:	782a      	ldrb	r2, [r5, #0]
   12b40:	0023      	movs	r3, r4
   12b42:	33ea      	adds	r3, #234	; 0xea
   12b44:	701a      	strb	r2, [r3, #0]
   12b46:	0023      	movs	r3, r4
   12b48:	786a      	ldrb	r2, [r5, #1]
   12b4a:	33eb      	adds	r3, #235	; 0xeb
   12b4c:	701a      	strb	r2, [r3, #0]
   12b4e:	4b10      	ldr	r3, [pc, #64]	; (12b90 <ExecuteNewChannel+0x188>)
   12b50:	4798      	blx	r3
   12b52:	2304      	movs	r3, #4
   12b54:	347c      	adds	r4, #124	; 0x7c
   12b56:	7862      	ldrb	r2, [r4, #1]
   12b58:	210b      	movs	r1, #11
   12b5a:	4313      	orrs	r3, r2
   12b5c:	7063      	strb	r3, [r4, #1]
   12b5e:	2001      	movs	r0, #1
   12b60:	4b0c      	ldr	r3, [pc, #48]	; (12b94 <ExecuteNewChannel+0x18c>)
   12b62:	4798      	blx	r3
   12b64:	9801      	ldr	r0, [sp, #4]
   12b66:	b00d      	add	sp, #52	; 0x34
   12b68:	bdf0      	pop	{r4, r5, r6, r7, pc}
   12b6a:	ab02      	add	r3, sp, #8
   12b6c:	79db      	ldrb	r3, [r3, #7]
   12b6e:	a905      	add	r1, sp, #20
   12b70:	2016      	movs	r0, #22
   12b72:	700b      	strb	r3, [r1, #0]
   12b74:	704d      	strb	r5, [r1, #1]
   12b76:	47b0      	blx	r6
   12b78:	e7da      	b.n	12b30 <ExecuteNewChannel+0x128>
   12b7a:	46c0      	nop			; (mov r8, r8)
   12b7c:	00019d11 	.word	0x00019d11
   12b80:	20002b5c 	.word	0x20002b5c
   12b84:	0000d821 	.word	0x0000d821
   12b88:	0000d92d 	.word	0x0000d92d
   12b8c:	0000d805 	.word	0x0000d805
   12b90:	000129dd 	.word	0x000129dd
   12b94:	0000dfe1 	.word	0x0000dfe1

00012b98 <MacExecuteCommands>:
   12b98:	2300      	movs	r3, #0
   12b9a:	b5f0      	push	{r4, r5, r6, r7, lr}
   12b9c:	0007      	movs	r7, r0
   12b9e:	2503      	movs	r5, #3
   12ba0:	b087      	sub	sp, #28
   12ba2:	9002      	str	r0, [sp, #8]
   12ba4:	9103      	str	r1, [sp, #12]
   12ba6:	9300      	str	r3, [sp, #0]
   12ba8:	9a03      	ldr	r2, [sp, #12]
   12baa:	9b02      	ldr	r3, [sp, #8]
   12bac:	4694      	mov	ip, r2
   12bae:	4463      	add	r3, ip
   12bb0:	9301      	str	r3, [sp, #4]
   12bb2:	4e65      	ldr	r6, [pc, #404]	; (12d48 <MacExecuteCommands+0x1b0>)
   12bb4:	429f      	cmp	r7, r3
   12bb6:	d35c      	bcc.n	12c72 <MacExecuteCommands+0xda>
   12bb8:	4b64      	ldr	r3, [pc, #400]	; (12d4c <MacExecuteCommands+0x1b4>)
   12bba:	5cf3      	ldrb	r3, [r6, r3]
   12bbc:	2b00      	cmp	r3, #0
   12bbe:	d000      	beq.n	12bc2 <MacExecuteCommands+0x2a>
   12bc0:	e07a      	b.n	12cb8 <MacExecuteCommands+0x120>
   12bc2:	0038      	movs	r0, r7
   12bc4:	b007      	add	sp, #28
   12bc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   12bc8:	0032      	movs	r2, r6
   12bca:	7879      	ldrb	r1, [r7, #1]
   12bcc:	32dd      	adds	r2, #221	; 0xdd
   12bce:	7011      	strb	r1, [r2, #0]
   12bd0:	0032      	movs	r2, r6
   12bd2:	78b9      	ldrb	r1, [r7, #2]
   12bd4:	32de      	adds	r2, #222	; 0xde
   12bd6:	1cfc      	adds	r4, r7, #3
   12bd8:	7011      	strb	r1, [r2, #0]
   12bda:	22ff      	movs	r2, #255	; 0xff
   12bdc:	436b      	muls	r3, r5
   12bde:	18f3      	adds	r3, r6, r3
   12be0:	3391      	adds	r3, #145	; 0x91
   12be2:	701a      	strb	r2, [r3, #0]
   12be4:	e003      	b.n	12bee <MacExecuteCommands+0x56>
   12be6:	0020      	movs	r0, r4
   12be8:	4b59      	ldr	r3, [pc, #356]	; (12d50 <MacExecuteCommands+0x1b8>)
   12bea:	4798      	blx	r3
   12bec:	0004      	movs	r4, r0
   12bee:	0032      	movs	r2, r6
   12bf0:	0029      	movs	r1, r5
   12bf2:	32d8      	adds	r2, #216	; 0xd8
   12bf4:	7813      	ldrb	r3, [r2, #0]
   12bf6:	4359      	muls	r1, r3
   12bf8:	1876      	adds	r6, r6, r1
   12bfa:	3691      	adds	r6, #145	; 0x91
   12bfc:	7831      	ldrb	r1, [r6, #0]
   12bfe:	29ff      	cmp	r1, #255	; 0xff
   12c00:	d003      	beq.n	12c0a <MacExecuteCommands+0x72>
   12c02:	2b0f      	cmp	r3, #15
   12c04:	d801      	bhi.n	12c0a <MacExecuteCommands+0x72>
   12c06:	3301      	adds	r3, #1
   12c08:	7013      	strb	r3, [r2, #0]
   12c0a:	0027      	movs	r7, r4
   12c0c:	e7cc      	b.n	12ba8 <MacExecuteCommands+0x10>
   12c0e:	0020      	movs	r0, r4
   12c10:	4b50      	ldr	r3, [pc, #320]	; (12d54 <MacExecuteCommands+0x1bc>)
   12c12:	e7ea      	b.n	12bea <MacExecuteCommands+0x52>
   12c14:	0020      	movs	r0, r4
   12c16:	4b50      	ldr	r3, [pc, #320]	; (12d58 <MacExecuteCommands+0x1c0>)
   12c18:	e7e7      	b.n	12bea <MacExecuteCommands+0x52>
   12c1a:	0020      	movs	r0, r4
   12c1c:	4b4f      	ldr	r3, [pc, #316]	; (12d5c <MacExecuteCommands+0x1c4>)
   12c1e:	e7e4      	b.n	12bea <MacExecuteCommands+0x52>
   12c20:	230f      	movs	r3, #15
   12c22:	7878      	ldrb	r0, [r7, #1]
   12c24:	1cbc      	adds	r4, r7, #2
   12c26:	4018      	ands	r0, r3
   12c28:	4b4d      	ldr	r3, [pc, #308]	; (12d60 <MacExecuteCommands+0x1c8>)
   12c2a:	4798      	blx	r3
   12c2c:	0032      	movs	r2, r6
   12c2e:	2380      	movs	r3, #128	; 0x80
   12c30:	327c      	adds	r2, #124	; 0x7c
   12c32:	7851      	ldrb	r1, [r2, #1]
   12c34:	425b      	negs	r3, r3
   12c36:	430b      	orrs	r3, r1
   12c38:	7053      	strb	r3, [r2, #1]
   12c3a:	210b      	movs	r1, #11
   12c3c:	4b49      	ldr	r3, [pc, #292]	; (12d64 <MacExecuteCommands+0x1cc>)
   12c3e:	2001      	movs	r0, #1
   12c40:	4798      	blx	r3
   12c42:	e7d4      	b.n	12bee <MacExecuteCommands+0x56>
   12c44:	0020      	movs	r0, r4
   12c46:	4b48      	ldr	r3, [pc, #288]	; (12d68 <MacExecuteCommands+0x1d0>)
   12c48:	e7cf      	b.n	12bea <MacExecuteCommands+0x52>
   12c4a:	0020      	movs	r0, r4
   12c4c:	4b47      	ldr	r3, [pc, #284]	; (12d6c <MacExecuteCommands+0x1d4>)
   12c4e:	e7cc      	b.n	12bea <MacExecuteCommands+0x52>
   12c50:	0020      	movs	r0, r4
   12c52:	4b47      	ldr	r3, [pc, #284]	; (12d70 <MacExecuteCommands+0x1d8>)
   12c54:	4798      	blx	r3
   12c56:	0033      	movs	r3, r6
   12c58:	33d8      	adds	r3, #216	; 0xd8
   12c5a:	0004      	movs	r4, r0
   12c5c:	781b      	ldrb	r3, [r3, #0]
   12c5e:	e7bc      	b.n	12bda <MacExecuteCommands+0x42>
   12c60:	22ff      	movs	r2, #255	; 0xff
   12c62:	436b      	muls	r3, r5
   12c64:	18f3      	adds	r3, r6, r3
   12c66:	3391      	adds	r3, #145	; 0x91
   12c68:	701a      	strb	r2, [r3, #0]
   12c6a:	2301      	movs	r3, #1
   12c6c:	9c01      	ldr	r4, [sp, #4]
   12c6e:	9300      	str	r3, [sp, #0]
   12c70:	e7bd      	b.n	12bee <MacExecuteCommands+0x56>
   12c72:	9b00      	ldr	r3, [sp, #0]
   12c74:	2b00      	cmp	r3, #0
   12c76:	d19f      	bne.n	12bb8 <MacExecuteCommands+0x20>
   12c78:	0033      	movs	r3, r6
   12c7a:	002a      	movs	r2, r5
   12c7c:	33d8      	adds	r3, #216	; 0xd8
   12c7e:	781b      	ldrb	r3, [r3, #0]
   12c80:	2401      	movs	r4, #1
   12c82:	435a      	muls	r2, r3
   12c84:	18b2      	adds	r2, r6, r2
   12c86:	0010      	movs	r0, r2
   12c88:	3090      	adds	r0, #144	; 0x90
   12c8a:	7881      	ldrb	r1, [r0, #2]
   12c8c:	3291      	adds	r2, #145	; 0x91
   12c8e:	43a1      	bics	r1, r4
   12c90:	4021      	ands	r1, r4
   12c92:	7081      	strb	r1, [r0, #2]
   12c94:	78c1      	ldrb	r1, [r0, #3]
   12c96:	43a1      	bics	r1, r4
   12c98:	70c1      	strb	r1, [r0, #3]
   12c9a:	7839      	ldrb	r1, [r7, #0]
   12c9c:	193c      	adds	r4, r7, r4
   12c9e:	7011      	strb	r1, [r2, #0]
   12ca0:	7838      	ldrb	r0, [r7, #0]
   12ca2:	3802      	subs	r0, #2
   12ca4:	280b      	cmp	r0, #11
   12ca6:	d8db      	bhi.n	12c60 <MacExecuteCommands+0xc8>
   12ca8:	f003 fc62 	bl	16570 <__gnu_thumb1_case_sqi>
   12cac:	b4b19d8e 	.word	0xb4b19d8e
   12cb0:	ccbab7a1 	.word	0xccbab7a1
   12cb4:	d2dadacf 	.word	0xd2dadacf
   12cb8:	4b2e      	ldr	r3, [pc, #184]	; (12d74 <MacExecuteCommands+0x1dc>)
   12cba:	5cf3      	ldrb	r3, [r6, r3]
   12cbc:	43db      	mvns	r3, r3
   12cbe:	075b      	lsls	r3, r3, #29
   12cc0:	d000      	beq.n	12cc4 <MacExecuteCommands+0x12c>
   12cc2:	e77e      	b.n	12bc2 <MacExecuteCommands+0x2a>
   12cc4:	4b2c      	ldr	r3, [pc, #176]	; (12d78 <MacExecuteCommands+0x1e0>)
   12cc6:	ad05      	add	r5, sp, #20
   12cc8:	5cf4      	ldrb	r4, [r6, r3]
   12cca:	2100      	movs	r1, #0
   12ccc:	0724      	lsls	r4, r4, #28
   12cce:	0f24      	lsrs	r4, r4, #28
   12cd0:	b2e3      	uxtb	r3, r4
   12cd2:	9300      	str	r3, [sp, #0]
   12cd4:	4b29      	ldr	r3, [pc, #164]	; (12d7c <MacExecuteCommands+0x1e4>)
   12cd6:	002a      	movs	r2, r5
   12cd8:	5cf3      	ldrb	r3, [r6, r3]
   12cda:	2014      	movs	r0, #20
   12cdc:	9301      	str	r3, [sp, #4]
   12cde:	2386      	movs	r3, #134	; 0x86
   12ce0:	009b      	lsls	r3, r3, #2
   12ce2:	5cf3      	ldrb	r3, [r6, r3]
   12ce4:	9302      	str	r3, [sp, #8]
   12ce6:	4b26      	ldr	r3, [pc, #152]	; (12d80 <MacExecuteCommands+0x1e8>)
   12ce8:	4798      	blx	r3
   12cea:	0033      	movs	r3, r6
   12cec:	782a      	ldrb	r2, [r5, #0]
   12cee:	33ea      	adds	r3, #234	; 0xea
   12cf0:	701a      	strb	r2, [r3, #0]
   12cf2:	0033      	movs	r3, r6
   12cf4:	786a      	ldrb	r2, [r5, #1]
   12cf6:	33eb      	adds	r3, #235	; 0xeb
   12cf8:	701a      	strb	r2, [r3, #0]
   12cfa:	4b22      	ldr	r3, [pc, #136]	; (12d84 <MacExecuteCommands+0x1ec>)
   12cfc:	4798      	blx	r3
   12cfe:	9801      	ldr	r0, [sp, #4]
   12d00:	4b21      	ldr	r3, [pc, #132]	; (12d88 <MacExecuteCommands+0x1f0>)
   12d02:	4798      	blx	r3
   12d04:	0032      	movs	r2, r6
   12d06:	2308      	movs	r3, #8
   12d08:	327c      	adds	r2, #124	; 0x7c
   12d0a:	7851      	ldrb	r1, [r2, #1]
   12d0c:	430b      	orrs	r3, r1
   12d0e:	7053      	strb	r3, [r2, #1]
   12d10:	9802      	ldr	r0, [sp, #8]
   12d12:	4b1e      	ldr	r3, [pc, #120]	; (12d8c <MacExecuteCommands+0x1f4>)
   12d14:	4798      	blx	r3
   12d16:	0033      	movs	r3, r6
   12d18:	b2e2      	uxtb	r2, r4
   12d1a:	33d9      	adds	r3, #217	; 0xd9
   12d1c:	2a00      	cmp	r2, #0
   12d1e:	d10e      	bne.n	12d3e <MacExecuteCommands+0x1a6>
   12d20:	701c      	strb	r4, [r3, #0]
   12d22:	2114      	movs	r1, #20
   12d24:	4c0f      	ldr	r4, [pc, #60]	; (12d64 <MacExecuteCommands+0x1cc>)
   12d26:	2000      	movs	r0, #0
   12d28:	47a0      	blx	r4
   12d2a:	2210      	movs	r2, #16
   12d2c:	4b06      	ldr	r3, [pc, #24]	; (12d48 <MacExecuteCommands+0x1b0>)
   12d2e:	2001      	movs	r0, #1
   12d30:	337c      	adds	r3, #124	; 0x7c
   12d32:	7859      	ldrb	r1, [r3, #1]
   12d34:	430a      	orrs	r2, r1
   12d36:	705a      	strb	r2, [r3, #1]
   12d38:	210b      	movs	r1, #11
   12d3a:	47a0      	blx	r4
   12d3c:	e741      	b.n	12bc2 <MacExecuteCommands+0x2a>
   12d3e:	9a00      	ldr	r2, [sp, #0]
   12d40:	3a01      	subs	r2, #1
   12d42:	701a      	strb	r2, [r3, #0]
   12d44:	e7ed      	b.n	12d22 <MacExecuteCommands+0x18a>
   12d46:	46c0      	nop			; (mov r8, r8)
   12d48:	20002b5c 	.word	0x20002b5c
   12d4c:	0000021a 	.word	0x0000021a
   12d50:	00010ba9 	.word	0x00010ba9
   12d54:	00010a6d 	.word	0x00010a6d
   12d58:	00010971 	.word	0x00010971
   12d5c:	00012a09 	.word	0x00012a09
   12d60:	0000fe19 	.word	0x0000fe19
   12d64:	0000dfe1 	.word	0x0000dfe1
   12d68:	00010b59 	.word	0x00010b59
   12d6c:	00010aa5 	.word	0x00010aa5
   12d70:	00010cc1 	.word	0x00010cc1
   12d74:	00000217 	.word	0x00000217
   12d78:	0000021d 	.word	0x0000021d
   12d7c:	00000219 	.word	0x00000219
   12d80:	0000d805 	.word	0x0000d805
   12d84:	000129dd 	.word	0x000129dd
   12d88:	00010825 	.word	0x00010825
   12d8c:	000107b9 	.word	0x000107b9

00012d90 <LorawanSetDataRange>:
   12d90:	2201      	movs	r2, #1
   12d92:	b530      	push	{r4, r5, lr}
   12d94:	b085      	sub	sp, #20
   12d96:	ab01      	add	r3, sp, #4
   12d98:	ac02      	add	r4, sp, #8
   12d9a:	7018      	strb	r0, [r3, #0]
   12d9c:	7020      	strb	r0, [r4, #0]
   12d9e:	7061      	strb	r1, [r4, #1]
   12da0:	2015      	movs	r0, #21
   12da2:	0019      	movs	r1, r3
   12da4:	4d11      	ldr	r5, [pc, #68]	; (12dec <LorawanSetDataRange+0x5c>)
   12da6:	705a      	strb	r2, [r3, #1]
   12da8:	47a8      	blx	r5
   12daa:	2808      	cmp	r0, #8
   12dac:	d003      	beq.n	12db6 <LorawanSetDataRange+0x26>
   12dae:	250a      	movs	r5, #10
   12db0:	0028      	movs	r0, r5
   12db2:	b005      	add	sp, #20
   12db4:	bd30      	pop	{r4, r5, pc}
   12db6:	0021      	movs	r1, r4
   12db8:	2012      	movs	r0, #18
   12dba:	47a8      	blx	r5
   12dbc:	0005      	movs	r5, r0
   12dbe:	2808      	cmp	r0, #8
   12dc0:	d1f5      	bne.n	12dae <LorawanSetDataRange+0x1e>
   12dc2:	0021      	movs	r1, r4
   12dc4:	4b0a      	ldr	r3, [pc, #40]	; (12df0 <LorawanSetDataRange+0x60>)
   12dc6:	ac03      	add	r4, sp, #12
   12dc8:	2012      	movs	r0, #18
   12dca:	4798      	blx	r3
   12dcc:	0022      	movs	r2, r4
   12dce:	2100      	movs	r1, #0
   12dd0:	4b08      	ldr	r3, [pc, #32]	; (12df4 <LorawanSetDataRange+0x64>)
   12dd2:	2014      	movs	r0, #20
   12dd4:	4798      	blx	r3
   12dd6:	4b08      	ldr	r3, [pc, #32]	; (12df8 <LorawanSetDataRange+0x68>)
   12dd8:	7821      	ldrb	r1, [r4, #0]
   12dda:	001a      	movs	r2, r3
   12ddc:	32ea      	adds	r2, #234	; 0xea
   12dde:	7011      	strb	r1, [r2, #0]
   12de0:	7862      	ldrb	r2, [r4, #1]
   12de2:	33eb      	adds	r3, #235	; 0xeb
   12de4:	701a      	strb	r2, [r3, #0]
   12de6:	4b05      	ldr	r3, [pc, #20]	; (12dfc <LorawanSetDataRange+0x6c>)
   12de8:	4798      	blx	r3
   12dea:	e7e1      	b.n	12db0 <LorawanSetDataRange+0x20>
   12dec:	0000d821 	.word	0x0000d821
   12df0:	0000d92d 	.word	0x0000d92d
   12df4:	0000d805 	.word	0x0000d805
   12df8:	20002b5c 	.word	0x20002b5c
   12dfc:	000129dd 	.word	0x000129dd

00012e00 <LorawanSetChannelIdStatus>:
   12e00:	b537      	push	{r0, r1, r2, r4, r5, lr}
   12e02:	466b      	mov	r3, sp
   12e04:	7018      	strb	r0, [r3, #0]
   12e06:	7059      	strb	r1, [r3, #1]
   12e08:	2016      	movs	r0, #22
   12e0a:	4669      	mov	r1, sp
   12e0c:	4b0c      	ldr	r3, [pc, #48]	; (12e40 <LorawanSetChannelIdStatus+0x40>)
   12e0e:	4798      	blx	r3
   12e10:	0004      	movs	r4, r0
   12e12:	2808      	cmp	r0, #8
   12e14:	d111      	bne.n	12e3a <LorawanSetChannelIdStatus+0x3a>
   12e16:	ad01      	add	r5, sp, #4
   12e18:	002a      	movs	r2, r5
   12e1a:	2100      	movs	r1, #0
   12e1c:	4b09      	ldr	r3, [pc, #36]	; (12e44 <LorawanSetChannelIdStatus+0x44>)
   12e1e:	2014      	movs	r0, #20
   12e20:	4798      	blx	r3
   12e22:	4b09      	ldr	r3, [pc, #36]	; (12e48 <LorawanSetChannelIdStatus+0x48>)
   12e24:	7829      	ldrb	r1, [r5, #0]
   12e26:	001a      	movs	r2, r3
   12e28:	32ea      	adds	r2, #234	; 0xea
   12e2a:	7011      	strb	r1, [r2, #0]
   12e2c:	786a      	ldrb	r2, [r5, #1]
   12e2e:	33eb      	adds	r3, #235	; 0xeb
   12e30:	701a      	strb	r2, [r3, #0]
   12e32:	4b06      	ldr	r3, [pc, #24]	; (12e4c <LorawanSetChannelIdStatus+0x4c>)
   12e34:	4798      	blx	r3
   12e36:	0020      	movs	r0, r4
   12e38:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
   12e3a:	240a      	movs	r4, #10
   12e3c:	e7fb      	b.n	12e36 <LorawanSetChannelIdStatus+0x36>
   12e3e:	46c0      	nop			; (mov r8, r8)
   12e40:	0000d92d 	.word	0x0000d92d
   12e44:	0000d805 	.word	0x0000d805
   12e48:	20002b5c 	.word	0x20002b5c
   12e4c:	000129dd 	.word	0x000129dd

00012e50 <LORAWAN_RxDone>:
   12e50:	b5f0      	push	{r4, r5, r6, r7, lr}
   12e52:	4bc4      	ldr	r3, [pc, #784]	; (13164 <LORAWAN_RxDone+0x314>)
   12e54:	b093      	sub	sp, #76	; 0x4c
   12e56:	781b      	ldrb	r3, [r3, #0]
   12e58:	0007      	movs	r7, r0
   12e5a:	b25a      	sxtb	r2, r3
   12e5c:	9106      	str	r1, [sp, #24]
   12e5e:	4cc2      	ldr	r4, [pc, #776]	; (13168 <LORAWAN_RxDone+0x318>)
   12e60:	2a00      	cmp	r2, #0
   12e62:	da01      	bge.n	12e68 <LORAWAN_RxDone+0x18>
   12e64:	f000 fc82 	bl	1376c <LORAWAN_RxDone+0x91c>
   12e68:	7801      	ldrb	r1, [r0, #0]
   12e6a:	221f      	movs	r2, #31
   12e6c:	000e      	movs	r6, r1
   12e6e:	4396      	bics	r6, r2
   12e70:	2e20      	cmp	r6, #32
   12e72:	d000      	beq.n	12e76 <LORAWAN_RxDone+0x26>
   12e74:	e1ae      	b.n	131d4 <LORAWAN_RxDone+0x384>
   12e76:	7822      	ldrb	r2, [r4, #0]
   12e78:	2a00      	cmp	r2, #0
   12e7a:	d001      	beq.n	12e80 <LORAWAN_RxDone+0x30>
   12e7c:	f000 fc62 	bl	13744 <LORAWAN_RxDone+0x8f4>
   12e80:	0022      	movs	r2, r4
   12e82:	328c      	adds	r2, #140	; 0x8c
   12e84:	7812      	ldrb	r2, [r2, #0]
   12e86:	0752      	lsls	r2, r2, #29
   12e88:	d401      	bmi.n	12e8e <LORAWAN_RxDone+0x3e>
   12e8a:	f000 fc5b 	bl	13744 <LORAWAN_RxDone+0x8f4>
   12e8e:	9b06      	ldr	r3, [sp, #24]
   12e90:	3b01      	subs	r3, #1
   12e92:	b2db      	uxtb	r3, r3
   12e94:	9307      	str	r3, [sp, #28]
   12e96:	4bb5      	ldr	r3, [pc, #724]	; (1316c <LORAWAN_RxDone+0x31c>)
   12e98:	469c      	mov	ip, r3
   12e9a:	9b07      	ldr	r3, [sp, #28]
   12e9c:	2b00      	cmp	r3, #0
   12e9e:	d12c      	bne.n	12efa <LORAWAN_RxDone+0xaa>
   12ea0:	9b06      	ldr	r3, [sp, #24]
   12ea2:	4660      	mov	r0, ip
   12ea4:	1f1d      	subs	r5, r3, #4
   12ea6:	b2eb      	uxtb	r3, r5
   12ea8:	9300      	str	r3, [sp, #0]
   12eaa:	4ab1      	ldr	r2, [pc, #708]	; (13170 <LORAWAN_RxDone+0x320>)
   12eac:	003b      	movs	r3, r7
   12eae:	9907      	ldr	r1, [sp, #28]
   12eb0:	4eb0      	ldr	r6, [pc, #704]	; (13174 <LORAWAN_RxDone+0x324>)
   12eb2:	47b0      	blx	r6
   12eb4:	2204      	movs	r2, #4
   12eb6:	49ae      	ldr	r1, [pc, #696]	; (13170 <LORAWAN_RxDone+0x320>)
   12eb8:	4baf      	ldr	r3, [pc, #700]	; (13178 <LORAWAN_RxDone+0x328>)
   12eba:	a810      	add	r0, sp, #64	; 0x40
   12ebc:	4798      	blx	r3
   12ebe:	9e10      	ldr	r6, [sp, #64]	; 0x40
   12ec0:	1979      	adds	r1, r7, r5
   12ec2:	2204      	movs	r2, #4
   12ec4:	4bac      	ldr	r3, [pc, #688]	; (13178 <LORAWAN_RxDone+0x328>)
   12ec6:	a810      	add	r0, sp, #64	; 0x40
   12ec8:	960d      	str	r6, [sp, #52]	; 0x34
   12eca:	4798      	blx	r3
   12ecc:	9a10      	ldr	r2, [sp, #64]	; 0x40
   12ece:	4ba6      	ldr	r3, [pc, #664]	; (13168 <LORAWAN_RxDone+0x318>)
   12ed0:	210e      	movs	r1, #14
   12ed2:	42b2      	cmp	r2, r6
   12ed4:	d029      	beq.n	12f2a <LORAWAN_RxDone+0xda>
   12ed6:	001a      	movs	r2, r3
   12ed8:	327c      	adds	r2, #124	; 0x7c
   12eda:	7812      	ldrb	r2, [r2, #0]
   12edc:	400a      	ands	r2, r1
   12ede:	2a0a      	cmp	r2, #10
   12ee0:	d005      	beq.n	12eee <LORAWAN_RxDone+0x9e>
   12ee2:	2a06      	cmp	r2, #6
   12ee4:	d106      	bne.n	12ef4 <LORAWAN_RxDone+0xa4>
   12ee6:	33f0      	adds	r3, #240	; 0xf0
   12ee8:	781b      	ldrb	r3, [r3, #0]
   12eea:	2b00      	cmp	r3, #0
   12eec:	d002      	beq.n	12ef4 <LORAWAN_RxDone+0xa4>
   12eee:	2018      	movs	r0, #24
   12ef0:	4ba2      	ldr	r3, [pc, #648]	; (1317c <LORAWAN_RxDone+0x32c>)
   12ef2:	4798      	blx	r3
   12ef4:	4ba2      	ldr	r3, [pc, #648]	; (13180 <LORAWAN_RxDone+0x330>)
   12ef6:	4798      	blx	r3
   12ef8:	e1d0      	b.n	1329c <LORAWAN_RxDone+0x44c>
   12efa:	9b06      	ldr	r3, [sp, #24]
   12efc:	9a07      	ldr	r2, [sp, #28]
   12efe:	2100      	movs	r1, #0
   12f00:	1a98      	subs	r0, r3, r2
   12f02:	1838      	adds	r0, r7, r0
   12f04:	4662      	mov	r2, ip
   12f06:	4b9f      	ldr	r3, [pc, #636]	; (13184 <LORAWAN_RxDone+0x334>)
   12f08:	4798      	blx	r3
   12f0a:	2800      	cmp	r0, #0
   12f0c:	d006      	beq.n	12f1c <LORAWAN_RxDone+0xcc>
   12f0e:	4b9b      	ldr	r3, [pc, #620]	; (1317c <LORAWAN_RxDone+0x32c>)
   12f10:	4798      	blx	r3
   12f12:	4b9b      	ldr	r3, [pc, #620]	; (13180 <LORAWAN_RxDone+0x330>)
   12f14:	4798      	blx	r3
   12f16:	201f      	movs	r0, #31
   12f18:	b013      	add	sp, #76	; 0x4c
   12f1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   12f1c:	9b07      	ldr	r3, [sp, #28]
   12f1e:	2b10      	cmp	r3, #16
   12f20:	d901      	bls.n	12f26 <LORAWAN_RxDone+0xd6>
   12f22:	3b10      	subs	r3, #16
   12f24:	e7b5      	b.n	12e92 <LORAWAN_RxDone+0x42>
   12f26:	9007      	str	r0, [sp, #28]
   12f28:	e7b5      	b.n	12e96 <LORAWAN_RxDone+0x46>
   12f2a:	001a      	movs	r2, r3
   12f2c:	327c      	adds	r2, #124	; 0x7c
   12f2e:	7812      	ldrb	r2, [r2, #0]
   12f30:	400a      	ands	r2, r1
   12f32:	2a06      	cmp	r2, #6
   12f34:	d103      	bne.n	12f3e <LORAWAN_RxDone+0xee>
   12f36:	33e3      	adds	r3, #227	; 0xe3
   12f38:	7818      	ldrb	r0, [r3, #0]
   12f3a:	4b93      	ldr	r3, [pc, #588]	; (13188 <LORAWAN_RxDone+0x338>)
   12f3c:	4798      	blx	r3
   12f3e:	7a3a      	ldrb	r2, [r7, #8]
   12f40:	79fb      	ldrb	r3, [r7, #7]
   12f42:	0212      	lsls	r2, r2, #8
   12f44:	431a      	orrs	r2, r3
   12f46:	7a7b      	ldrb	r3, [r7, #9]
   12f48:	2001      	movs	r0, #1
   12f4a:	041b      	lsls	r3, r3, #16
   12f4c:	431a      	orrs	r2, r3
   12f4e:	7abb      	ldrb	r3, [r7, #10]
   12f50:	061b      	lsls	r3, r3, #24
   12f52:	4313      	orrs	r3, r2
   12f54:	0a19      	lsrs	r1, r3, #8
   12f56:	7063      	strb	r3, [r4, #1]
   12f58:	70a1      	strb	r1, [r4, #2]
   12f5a:	0c19      	lsrs	r1, r3, #16
   12f5c:	0e1b      	lsrs	r3, r3, #24
   12f5e:	70e1      	strb	r1, [r4, #3]
   12f60:	7123      	strb	r3, [r4, #4]
   12f62:	240f      	movs	r4, #15
   12f64:	2103      	movs	r1, #3
   12f66:	4b89      	ldr	r3, [pc, #548]	; (1318c <LORAWAN_RxDone+0x33c>)
   12f68:	4798      	blx	r3
   12f6a:	7b38      	ldrb	r0, [r7, #12]
   12f6c:	4b88      	ldr	r3, [pc, #544]	; (13190 <LORAWAN_RxDone+0x340>)
   12f6e:	4020      	ands	r0, r4
   12f70:	4798      	blx	r3
   12f72:	7af8      	ldrb	r0, [r7, #11]
   12f74:	4b87      	ldr	r3, [pc, #540]	; (13194 <LORAWAN_RxDone+0x344>)
   12f76:	0641      	lsls	r1, r0, #25
   12f78:	0700      	lsls	r0, r0, #28
   12f7a:	0f49      	lsrs	r1, r1, #29
   12f7c:	0f00      	lsrs	r0, r0, #28
   12f7e:	4798      	blx	r3
   12f80:	4b85      	ldr	r3, [pc, #532]	; (13198 <LORAWAN_RxDone+0x348>)
   12f82:	2100      	movs	r1, #0
   12f84:	203c      	movs	r0, #60	; 0x3c
   12f86:	4798      	blx	r3
   12f88:	9b06      	ldr	r3, [sp, #24]
   12f8a:	2b21      	cmp	r3, #33	; 0x21
   12f8c:	d000      	beq.n	12f90 <LORAWAN_RxDone+0x140>
   12f8e:	e08c      	b.n	130aa <LORAWAN_RxDone+0x25a>
   12f90:	251a      	movs	r5, #26
   12f92:	ab04      	add	r3, sp, #16
   12f94:	18ed      	adds	r5, r5, r3
   12f96:	002a      	movs	r2, r5
   12f98:	4b80      	ldr	r3, [pc, #512]	; (1319c <LORAWAN_RxDone+0x34c>)
   12f9a:	4981      	ldr	r1, [pc, #516]	; (131a0 <LORAWAN_RxDone+0x350>)
   12f9c:	2007      	movs	r0, #7
   12f9e:	4798      	blx	r3
   12fa0:	782b      	ldrb	r3, [r5, #0]
   12fa2:	2bff      	cmp	r3, #255	; 0xff
   12fa4:	d100      	bne.n	12fa8 <LORAWAN_RxDone+0x158>
   12fa6:	e080      	b.n	130aa <LORAWAN_RxDone+0x25a>
   12fa8:	2350      	movs	r3, #80	; 0x50
   12faa:	43a3      	bics	r3, r4
   12fac:	9308      	str	r3, [sp, #32]
   12fae:	003b      	movs	r3, r7
   12fb0:	330d      	adds	r3, #13
   12fb2:	9306      	str	r3, [sp, #24]
   12fb4:	2600      	movs	r6, #0
   12fb6:	2203      	movs	r2, #3
   12fb8:	9906      	ldr	r1, [sp, #24]
   12fba:	4b6f      	ldr	r3, [pc, #444]	; (13178 <LORAWAN_RxDone+0x328>)
   12fbc:	a80e      	add	r0, sp, #56	; 0x38
   12fbe:	960e      	str	r6, [sp, #56]	; 0x38
   12fc0:	4798      	blx	r3
   12fc2:	2364      	movs	r3, #100	; 0x64
   12fc4:	990e      	ldr	r1, [sp, #56]	; 0x38
   12fc6:	aa04      	add	r2, sp, #16
   12fc8:	4359      	muls	r1, r3
   12fca:	3b4a      	subs	r3, #74	; 0x4a
   12fcc:	189b      	adds	r3, r3, r2
   12fce:	7818      	ldrb	r0, [r3, #0]
   12fd0:	9b07      	ldr	r3, [sp, #28]
   12fd2:	910e      	str	r1, [sp, #56]	; 0x38
   12fd4:	1818      	adds	r0, r3, r0
   12fd6:	b2c0      	uxtb	r0, r0
   12fd8:	76d0      	strb	r0, [r2, #27]
   12fda:	42b1      	cmp	r1, r6
   12fdc:	d100      	bne.n	12fe0 <LORAWAN_RxDone+0x190>
   12fde:	e0a7      	b.n	13130 <LORAWAN_RxDone+0x2e0>
   12fe0:	466b      	mov	r3, sp
   12fe2:	2220      	movs	r2, #32
   12fe4:	189b      	adds	r3, r3, r2
   12fe6:	781b      	ldrb	r3, [r3, #0]
   12fe8:	ad10      	add	r5, sp, #64	; 0x40
   12fea:	ac0b      	add	r4, sp, #44	; 0x2c
   12fec:	7128      	strb	r0, [r5, #4]
   12fee:	9110      	str	r1, [sp, #64]	; 0x40
   12ff0:	7020      	strb	r0, [r4, #0]
   12ff2:	7063      	strb	r3, [r4, #1]
   12ff4:	0029      	movs	r1, r5
   12ff6:	2002      	movs	r0, #2
   12ff8:	4b6a      	ldr	r3, [pc, #424]	; (131a4 <LORAWAN_RxDone+0x354>)
   12ffa:	4798      	blx	r3
   12ffc:	2808      	cmp	r0, #8
   12ffe:	d140      	bne.n	13082 <LORAWAN_RxDone+0x232>
   13000:	0029      	movs	r1, r5
   13002:	0030      	movs	r0, r6
   13004:	4b64      	ldr	r3, [pc, #400]	; (13198 <LORAWAN_RxDone+0x348>)
   13006:	4798      	blx	r3
   13008:	ad0c      	add	r5, sp, #48	; 0x30
   1300a:	0021      	movs	r1, r4
   1300c:	4b62      	ldr	r3, [pc, #392]	; (13198 <LORAWAN_RxDone+0x348>)
   1300e:	2012      	movs	r0, #18
   13010:	4798      	blx	r3
   13012:	0031      	movs	r1, r6
   13014:	002a      	movs	r2, r5
   13016:	4e61      	ldr	r6, [pc, #388]	; (1319c <LORAWAN_RxDone+0x34c>)
   13018:	2014      	movs	r0, #20
   1301a:	47b0      	blx	r6
   1301c:	4c52      	ldr	r4, [pc, #328]	; (13168 <LORAWAN_RxDone+0x318>)
   1301e:	782a      	ldrb	r2, [r5, #0]
   13020:	0023      	movs	r3, r4
   13022:	33ea      	adds	r3, #234	; 0xea
   13024:	701a      	strb	r2, [r3, #0]
   13026:	0023      	movs	r3, r4
   13028:	786a      	ldrb	r2, [r5, #1]
   1302a:	2522      	movs	r5, #34	; 0x22
   1302c:	33eb      	adds	r3, #235	; 0xeb
   1302e:	701a      	strb	r2, [r3, #0]
   13030:	4b5d      	ldr	r3, [pc, #372]	; (131a8 <LORAWAN_RxDone+0x358>)
   13032:	4798      	blx	r3
   13034:	ab04      	add	r3, sp, #16
   13036:	18ed      	adds	r5, r5, r3
   13038:	231b      	movs	r3, #27
   1303a:	a904      	add	r1, sp, #16
   1303c:	185b      	adds	r3, r3, r1
   1303e:	0019      	movs	r1, r3
   13040:	002a      	movs	r2, r5
   13042:	201e      	movs	r0, #30
   13044:	47b0      	blx	r6
   13046:	0023      	movs	r3, r4
   13048:	33ff      	adds	r3, #255	; 0xff
   1304a:	7c5b      	ldrb	r3, [r3, #17]
   1304c:	079b      	lsls	r3, r3, #30
   1304e:	d508      	bpl.n	13062 <LORAWAN_RxDone+0x212>
   13050:	ab04      	add	r3, sp, #16
   13052:	7edb      	ldrb	r3, [r3, #27]
   13054:	a90f      	add	r1, sp, #60	; 0x3c
   13056:	708b      	strb	r3, [r1, #2]
   13058:	882b      	ldrh	r3, [r5, #0]
   1305a:	201e      	movs	r0, #30
   1305c:	800b      	strh	r3, [r1, #0]
   1305e:	4b4e      	ldr	r3, [pc, #312]	; (13198 <LORAWAN_RxDone+0x348>)
   13060:	4798      	blx	r3
   13062:	231b      	movs	r3, #27
   13064:	aa04      	add	r2, sp, #16
   13066:	189b      	adds	r3, r3, r2
   13068:	7818      	ldrb	r0, [r3, #0]
   1306a:	2101      	movs	r1, #1
   1306c:	4b4f      	ldr	r3, [pc, #316]	; (131ac <LORAWAN_RxDone+0x35c>)
   1306e:	4798      	blx	r3
   13070:	2204      	movs	r2, #4
   13072:	347c      	adds	r4, #124	; 0x7c
   13074:	7863      	ldrb	r3, [r4, #1]
   13076:	210b      	movs	r1, #11
   13078:	4313      	orrs	r3, r2
   1307a:	7063      	strb	r3, [r4, #1]
   1307c:	2001      	movs	r0, #1
   1307e:	4b43      	ldr	r3, [pc, #268]	; (1318c <LORAWAN_RxDone+0x33c>)
   13080:	4798      	blx	r3
   13082:	9b07      	ldr	r3, [sp, #28]
   13084:	3301      	adds	r3, #1
   13086:	b2db      	uxtb	r3, r3
   13088:	9307      	str	r3, [sp, #28]
   1308a:	9b06      	ldr	r3, [sp, #24]
   1308c:	3303      	adds	r3, #3
   1308e:	9306      	str	r3, [sp, #24]
   13090:	9b07      	ldr	r3, [sp, #28]
   13092:	2b05      	cmp	r3, #5
   13094:	d18e      	bne.n	12fb4 <LORAWAN_RxDone+0x164>
   13096:	2204      	movs	r2, #4
   13098:	4b33      	ldr	r3, [pc, #204]	; (13168 <LORAWAN_RxDone+0x318>)
   1309a:	2001      	movs	r0, #1
   1309c:	337c      	adds	r3, #124	; 0x7c
   1309e:	7859      	ldrb	r1, [r3, #1]
   130a0:	430a      	orrs	r2, r1
   130a2:	705a      	strb	r2, [r3, #1]
   130a4:	210b      	movs	r1, #11
   130a6:	4b39      	ldr	r3, [pc, #228]	; (1318c <LORAWAN_RxDone+0x33c>)
   130a8:	4798      	blx	r3
   130aa:	4d41      	ldr	r5, [pc, #260]	; (131b0 <LORAWAN_RxDone+0x360>)
   130ac:	1c7e      	adds	r6, r7, #1
   130ae:	3704      	adds	r7, #4
   130b0:	0028      	movs	r0, r5
   130b2:	003a      	movs	r2, r7
   130b4:	0031      	movs	r1, r6
   130b6:	4b3f      	ldr	r3, [pc, #252]	; (131b4 <LORAWAN_RxDone+0x364>)
   130b8:	4798      	blx	r3
   130ba:	2302      	movs	r3, #2
   130bc:	4c2a      	ldr	r4, [pc, #168]	; (13168 <LORAWAN_RxDone+0x318>)
   130be:	0028      	movs	r0, r5
   130c0:	7563      	strb	r3, [r4, #21]
   130c2:	4a2a      	ldr	r2, [pc, #168]	; (1316c <LORAWAN_RxDone+0x31c>)
   130c4:	3b01      	subs	r3, #1
   130c6:	2100      	movs	r1, #0
   130c8:	4d3b      	ldr	r5, [pc, #236]	; (131b8 <LORAWAN_RxDone+0x368>)
   130ca:	47a8      	blx	r5
   130cc:	2800      	cmp	r0, #0
   130ce:	d003      	beq.n	130d8 <LORAWAN_RxDone+0x288>
   130d0:	4b2a      	ldr	r3, [pc, #168]	; (1317c <LORAWAN_RxDone+0x32c>)
   130d2:	4798      	blx	r3
   130d4:	4b2a      	ldr	r3, [pc, #168]	; (13180 <LORAWAN_RxDone+0x330>)
   130d6:	4798      	blx	r3
   130d8:	2105      	movs	r1, #5
   130da:	4b2c      	ldr	r3, [pc, #176]	; (1318c <LORAWAN_RxDone+0x33c>)
   130dc:	2001      	movs	r0, #1
   130de:	4798      	blx	r3
   130e0:	4d36      	ldr	r5, [pc, #216]	; (131bc <LORAWAN_RxDone+0x36c>)
   130e2:	003a      	movs	r2, r7
   130e4:	0028      	movs	r0, r5
   130e6:	0031      	movs	r1, r6
   130e8:	4b32      	ldr	r3, [pc, #200]	; (131b4 <LORAWAN_RxDone+0x364>)
   130ea:	4798      	blx	r3
   130ec:	2301      	movs	r3, #1
   130ee:	0028      	movs	r0, r5
   130f0:	7163      	strb	r3, [r4, #5]
   130f2:	4a1e      	ldr	r2, [pc, #120]	; (1316c <LORAWAN_RxDone+0x31c>)
   130f4:	18db      	adds	r3, r3, r3
   130f6:	2100      	movs	r1, #0
   130f8:	4d2f      	ldr	r5, [pc, #188]	; (131b8 <LORAWAN_RxDone+0x368>)
   130fa:	47a8      	blx	r5
   130fc:	2800      	cmp	r0, #0
   130fe:	d003      	beq.n	13108 <LORAWAN_RxDone+0x2b8>
   13100:	4b1e      	ldr	r3, [pc, #120]	; (1317c <LORAWAN_RxDone+0x32c>)
   13102:	4798      	blx	r3
   13104:	4b1e      	ldr	r3, [pc, #120]	; (13180 <LORAWAN_RxDone+0x330>)
   13106:	4798      	blx	r3
   13108:	4b20      	ldr	r3, [pc, #128]	; (1318c <LORAWAN_RxDone+0x33c>)
   1310a:	2104      	movs	r1, #4
   1310c:	2001      	movs	r0, #1
   1310e:	4798      	blx	r3
   13110:	4b2b      	ldr	r3, [pc, #172]	; (131c0 <LORAWAN_RxDone+0x370>)
   13112:	5ce3      	ldrb	r3, [r4, r3]
   13114:	2b00      	cmp	r3, #0
   13116:	d017      	beq.n	13148 <LORAWAN_RxDone+0x2f8>
   13118:	492a      	ldr	r1, [pc, #168]	; (131c4 <LORAWAN_RxDone+0x374>)
   1311a:	2002      	movs	r0, #2
   1311c:	4c2a      	ldr	r4, [pc, #168]	; (131c8 <LORAWAN_RxDone+0x378>)
   1311e:	47a0      	blx	r4
   13120:	2800      	cmp	r0, #0
   13122:	d008      	beq.n	13136 <LORAWAN_RxDone+0x2e6>
   13124:	4b15      	ldr	r3, [pc, #84]	; (1317c <LORAWAN_RxDone+0x32c>)
   13126:	4798      	blx	r3
   13128:	4b15      	ldr	r3, [pc, #84]	; (13180 <LORAWAN_RxDone+0x330>)
   1312a:	4798      	blx	r3
   1312c:	2023      	movs	r0, #35	; 0x23
   1312e:	e6f3      	b.n	12f18 <LORAWAN_RxDone+0xc8>
   13130:	4b1e      	ldr	r3, [pc, #120]	; (131ac <LORAWAN_RxDone+0x35c>)
   13132:	4798      	blx	r3
   13134:	e7a5      	b.n	13082 <LORAWAN_RxDone+0x232>
   13136:	4925      	ldr	r1, [pc, #148]	; (131cc <LORAWAN_RxDone+0x37c>)
   13138:	2001      	movs	r0, #1
   1313a:	47a0      	blx	r4
   1313c:	2800      	cmp	r0, #0
   1313e:	d1f1      	bne.n	13124 <LORAWAN_RxDone+0x2d4>
   13140:	4b23      	ldr	r3, [pc, #140]	; (131d0 <LORAWAN_RxDone+0x380>)
   13142:	4798      	blx	r3
   13144:	2008      	movs	r0, #8
   13146:	e6e7      	b.n	12f18 <LORAWAN_RxDone+0xc8>
   13148:	0020      	movs	r0, r4
   1314a:	0021      	movs	r1, r4
   1314c:	2210      	movs	r2, #16
   1314e:	3115      	adds	r1, #21
   13150:	4d09      	ldr	r5, [pc, #36]	; (13178 <LORAWAN_RxDone+0x328>)
   13152:	3035      	adds	r0, #53	; 0x35
   13154:	47a8      	blx	r5
   13156:	0020      	movs	r0, r4
   13158:	1d61      	adds	r1, r4, #5
   1315a:	2210      	movs	r2, #16
   1315c:	3025      	adds	r0, #37	; 0x25
   1315e:	47a8      	blx	r5
   13160:	e7ee      	b.n	13140 <LORAWAN_RxDone+0x2f0>
   13162:	46c0      	nop			; (mov r8, r8)
   13164:	20002bd8 	.word	0x20002bd8
   13168:	20002b5c 	.word	0x20002b5c
   1316c:	20002ba1 	.word	0x20002ba1
   13170:	20001110 	.word	0x20001110
   13174:	0000dced 	.word	0x0000dced
   13178:	00019d11 	.word	0x00019d11
   1317c:	0001090d 	.word	0x0001090d
   13180:	000127e9 	.word	0x000127e9
   13184:	0000db81 	.word	0x0000db81
   13188:	0000f029 	.word	0x0000f029
   1318c:	0000dfe1 	.word	0x0000dfe1
   13190:	0000fe19 	.word	0x0000fe19
   13194:	000107d5 	.word	0x000107d5
   13198:	0000d92d 	.word	0x0000d92d
   1319c:	0000d805 	.word	0x0000d805
   131a0:	20002c3b 	.word	0x20002c3b
   131a4:	0000d821 	.word	0x0000d821
   131a8:	000129dd 	.word	0x000129dd
   131ac:	00012e01 	.word	0x00012e01
   131b0:	20002b71 	.word	0x20002b71
   131b4:	00010151 	.word	0x00010151
   131b8:	0000dbfd 	.word	0x0000dbfd
   131bc:	20002b61 	.word	0x20002b61
   131c0:	00000221 	.word	0x00000221
   131c4:	20002b81 	.word	0x20002b81
   131c8:	0000dc45 	.word	0x0000dc45
   131cc:	20002b91 	.word	0x20002b91
   131d0:	00010061 	.word	0x00010061
   131d4:	22bf      	movs	r2, #191	; 0xbf
   131d6:	3e60      	subs	r6, #96	; 0x60
   131d8:	4016      	ands	r6, r2
   131da:	d000      	beq.n	131de <LORAWAN_RxDone+0x38e>
   131dc:	e2b2      	b.n	13744 <LORAWAN_RxDone+0x8f4>
   131de:	2501      	movs	r5, #1
   131e0:	422b      	tst	r3, r5
   131e2:	d100      	bne.n	131e6 <LORAWAN_RxDone+0x396>
   131e4:	e2ae      	b.n	13744 <LORAWAN_RxDone+0x8f4>
   131e6:	7922      	ldrb	r2, [r4, #4]
   131e8:	6823      	ldr	r3, [r4, #0]
   131ea:	0612      	lsls	r2, r2, #24
   131ec:	0a1b      	lsrs	r3, r3, #8
   131ee:	431a      	orrs	r2, r3
   131f0:	0023      	movs	r3, r4
   131f2:	33d8      	adds	r3, #216	; 0xd8
   131f4:	701e      	strb	r6, [r3, #0]
   131f6:	9207      	str	r2, [sp, #28]
   131f8:	7882      	ldrb	r2, [r0, #2]
   131fa:	7843      	ldrb	r3, [r0, #1]
   131fc:	0212      	lsls	r2, r2, #8
   131fe:	431a      	orrs	r2, r3
   13200:	78c3      	ldrb	r3, [r0, #3]
   13202:	041b      	lsls	r3, r3, #16
   13204:	431a      	orrs	r2, r3
   13206:	7903      	ldrb	r3, [r0, #4]
   13208:	061b      	lsls	r3, r3, #24
   1320a:	4313      	orrs	r3, r2
   1320c:	9a07      	ldr	r2, [sp, #28]
   1320e:	429a      	cmp	r2, r3
   13210:	d100      	bne.n	13214 <LORAWAN_RxDone+0x3c4>
   13212:	e2c8      	b.n	137a6 <LORAWAN_RxDone+0x956>
   13214:	ab04      	add	r3, sp, #16
   13216:	3521      	adds	r5, #33	; 0x21
   13218:	18ed      	adds	r5, r5, r3
   1321a:	7a02      	ldrb	r2, [r0, #8]
   1321c:	0949      	lsrs	r1, r1, #5
   1321e:	002b      	movs	r3, r5
   13220:	4ed7      	ldr	r6, [pc, #860]	; (13580 <LORAWAN_RxDone+0x730>)
   13222:	47b0      	blx	r6
   13224:	2808      	cmp	r0, #8
   13226:	d131      	bne.n	1328c <LORAWAN_RxDone+0x43c>
   13228:	233c      	movs	r3, #60	; 0x3c
   1322a:	7829      	ldrb	r1, [r5, #0]
   1322c:	434b      	muls	r3, r1
   1322e:	001d      	movs	r5, r3
   13230:	3529      	adds	r5, #41	; 0x29
   13232:	35ff      	adds	r5, #255	; 0xff
   13234:	192d      	adds	r5, r5, r4
   13236:	18e4      	adds	r4, r4, r3
   13238:	0023      	movs	r3, r4
   1323a:	33fc      	adds	r3, #252	; 0xfc
   1323c:	6a98      	ldr	r0, [r3, #40]	; 0x28
   1323e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   13240:	9308      	str	r3, [sp, #32]
   13242:	79fb      	ldrb	r3, [r7, #7]
   13244:	79ba      	ldrb	r2, [r7, #6]
   13246:	021b      	lsls	r3, r3, #8
   13248:	4313      	orrs	r3, r2
   1324a:	0022      	movs	r2, r4
   1324c:	3249      	adds	r2, #73	; 0x49
   1324e:	32ff      	adds	r2, #255	; 0xff
   13250:	8816      	ldrh	r6, [r2, #0]
   13252:	429e      	cmp	r6, r3
   13254:	d908      	bls.n	13268 <LORAWAN_RxDone+0x418>
   13256:	344b      	adds	r4, #75	; 0x4b
   13258:	34ff      	adds	r4, #255	; 0xff
   1325a:	8823      	ldrh	r3, [r4, #0]
   1325c:	3301      	adds	r3, #1
   1325e:	8023      	strh	r3, [r4, #0]
   13260:	79fb      	ldrb	r3, [r7, #7]
   13262:	79bc      	ldrb	r4, [r7, #6]
   13264:	021b      	lsls	r3, r3, #8
   13266:	4323      	orrs	r3, r4
   13268:	8013      	strh	r3, [r2, #0]
   1326a:	9b06      	ldr	r3, [sp, #24]
   1326c:	9000      	str	r0, [sp, #0]
   1326e:	1f1a      	subs	r2, r3, #4
   13270:	233c      	movs	r3, #60	; 0x3c
   13272:	434b      	muls	r3, r1
   13274:	49c3      	ldr	r1, [pc, #780]	; (13584 <LORAWAN_RxDone+0x734>)
   13276:	b2d2      	uxtb	r2, r2
   13278:	18c9      	adds	r1, r1, r3
   1327a:	31fc      	adds	r1, #252	; 0xfc
   1327c:	2349      	movs	r3, #73	; 0x49
   1327e:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
   13280:	2001      	movs	r0, #1
   13282:	4cc1      	ldr	r4, [pc, #772]	; (13588 <LORAWAN_RxDone+0x738>)
   13284:	47a0      	blx	r4
   13286:	2301      	movs	r3, #1
   13288:	9307      	str	r3, [sp, #28]
   1328a:	e2a2      	b.n	137d2 <LORAWAN_RxDone+0x982>
   1328c:	220e      	movs	r2, #14
   1328e:	4bbf      	ldr	r3, [pc, #764]	; (1358c <LORAWAN_RxDone+0x73c>)
   13290:	781b      	ldrb	r3, [r3, #0]
   13292:	4013      	ands	r3, r2
   13294:	2b0a      	cmp	r3, #10
   13296:	d008      	beq.n	132aa <LORAWAN_RxDone+0x45a>
   13298:	2b06      	cmp	r3, #6
   1329a:	d001      	beq.n	132a0 <LORAWAN_RxDone+0x450>
   1329c:	200a      	movs	r0, #10
   1329e:	e63b      	b.n	12f18 <LORAWAN_RxDone+0xc8>
   132a0:	0023      	movs	r3, r4
   132a2:	33f0      	adds	r3, #240	; 0xf0
   132a4:	781b      	ldrb	r3, [r3, #0]
   132a6:	2b00      	cmp	r3, #0
   132a8:	d0f8      	beq.n	1329c <LORAWAN_RxDone+0x44c>
   132aa:	2220      	movs	r2, #32
   132ac:	201e      	movs	r0, #30
   132ae:	348c      	adds	r4, #140	; 0x8c
   132b0:	7823      	ldrb	r3, [r4, #0]
   132b2:	4393      	bics	r3, r2
   132b4:	7023      	strb	r3, [r4, #0]
   132b6:	4bb6      	ldr	r3, [pc, #728]	; (13590 <LORAWAN_RxDone+0x740>)
   132b8:	e61b      	b.n	12ef2 <LORAWAN_RxDone+0xa2>
   132ba:	0022      	movs	r2, r4
   132bc:	2102      	movs	r1, #2
   132be:	e2a2      	b.n	13806 <LORAWAN_RxDone+0x9b6>
   132c0:	9b08      	ldr	r3, [sp, #32]
   132c2:	3408      	adds	r4, #8
   132c4:	67e3      	str	r3, [r4, #124]	; 0x7c
   132c6:	e2e1      	b.n	1388c <LORAWAN_RxDone+0xa3c>
   132c8:	9b07      	ldr	r3, [sp, #28]
   132ca:	2b00      	cmp	r3, #0
   132cc:	d00a      	beq.n	132e4 <LORAWAN_RxDone+0x494>
   132ce:	2322      	movs	r3, #34	; 0x22
   132d0:	aa04      	add	r2, sp, #16
   132d2:	189b      	adds	r3, r3, r2
   132d4:	781b      	ldrb	r3, [r3, #0]
   132d6:	003a      	movs	r2, r7
   132d8:	9906      	ldr	r1, [sp, #24]
   132da:	0038      	movs	r0, r7
   132dc:	4cad      	ldr	r4, [pc, #692]	; (13594 <LORAWAN_RxDone+0x744>)
   132de:	47a0      	blx	r4
   132e0:	2001      	movs	r0, #1
   132e2:	e619      	b.n	12f18 <LORAWAN_RxDone+0xc8>
   132e4:	4ca7      	ldr	r4, [pc, #668]	; (13584 <LORAWAN_RxDone+0x734>)
   132e6:	466a      	mov	r2, sp
   132e8:	0023      	movs	r3, r4
   132ea:	7f12      	ldrb	r2, [r2, #28]
   132ec:	33db      	adds	r3, #219	; 0xdb
   132ee:	701a      	strb	r2, [r3, #0]
   132f0:	797b      	ldrb	r3, [r7, #5]
   132f2:	2b7f      	cmp	r3, #127	; 0x7f
   132f4:	d909      	bls.n	1330a <LORAWAN_RxDone+0x4ba>
   132f6:	0022      	movs	r2, r4
   132f8:	2320      	movs	r3, #32
   132fa:	327c      	adds	r2, #124	; 0x7c
   132fc:	7811      	ldrb	r1, [r2, #0]
   132fe:	2001      	movs	r0, #1
   13300:	430b      	orrs	r3, r1
   13302:	7013      	strb	r3, [r2, #0]
   13304:	210b      	movs	r1, #11
   13306:	4ba4      	ldr	r3, [pc, #656]	; (13598 <LORAWAN_RxDone+0x748>)
   13308:	4798      	blx	r3
   1330a:	797b      	ldrb	r3, [r7, #5]
   1330c:	06db      	lsls	r3, r3, #27
   1330e:	d505      	bpl.n	1331c <LORAWAN_RxDone+0x4cc>
   13310:	0022      	movs	r2, r4
   13312:	2308      	movs	r3, #8
   13314:	328c      	adds	r2, #140	; 0x8c
   13316:	7811      	ldrb	r1, [r2, #0]
   13318:	430b      	orrs	r3, r1
   1331a:	7013      	strb	r3, [r2, #0]
   1331c:	797b      	ldrb	r3, [r7, #5]
   1331e:	065b      	lsls	r3, r3, #25
   13320:	d505      	bpl.n	1332e <LORAWAN_RxDone+0x4de>
   13322:	0022      	movs	r2, r4
   13324:	2310      	movs	r3, #16
   13326:	328c      	adds	r2, #140	; 0x8c
   13328:	7811      	ldrb	r1, [r2, #0]
   1332a:	430b      	orrs	r3, r1
   1332c:	7013      	strb	r3, [r2, #0]
   1332e:	221f      	movs	r2, #31
   13330:	783b      	ldrb	r3, [r7, #0]
   13332:	4393      	bics	r3, r2
   13334:	2ba0      	cmp	r3, #160	; 0xa0
   13336:	d105      	bne.n	13344 <LORAWAN_RxDone+0x4f4>
   13338:	0022      	movs	r2, r4
   1333a:	328c      	adds	r2, #140	; 0x8c
   1333c:	7811      	ldrb	r1, [r2, #0]
   1333e:	3b9e      	subs	r3, #158	; 0x9e
   13340:	430b      	orrs	r3, r1
   13342:	7013      	strb	r3, [r2, #0]
   13344:	7979      	ldrb	r1, [r7, #5]
   13346:	070b      	lsls	r3, r1, #28
   13348:	d100      	bne.n	1334c <LORAWAN_RxDone+0x4fc>
   1334a:	e0da      	b.n	13502 <LORAWAN_RxDone+0x6b2>
   1334c:	0709      	lsls	r1, r1, #28
   1334e:	0f09      	lsrs	r1, r1, #28
   13350:	187b      	adds	r3, r7, r1
   13352:	7a1b      	ldrb	r3, [r3, #8]
   13354:	2b00      	cmp	r3, #0
   13356:	d100      	bne.n	1335a <LORAWAN_RxDone+0x50a>
   13358:	e0aa      	b.n	134b0 <LORAWAN_RxDone+0x660>
   1335a:	0038      	movs	r0, r7
   1335c:	4b8f      	ldr	r3, [pc, #572]	; (1359c <LORAWAN_RxDone+0x74c>)
   1335e:	3008      	adds	r0, #8
   13360:	4798      	blx	r3
   13362:	2301      	movs	r3, #1
   13364:	0006      	movs	r6, r0
   13366:	9307      	str	r3, [sp, #28]
   13368:	7978      	ldrb	r0, [r7, #5]
   1336a:	9906      	ldr	r1, [sp, #24]
   1336c:	0702      	lsls	r2, r0, #28
   1336e:	0f12      	lsrs	r2, r2, #28
   13370:	0013      	movs	r3, r2
   13372:	330c      	adds	r3, #12
   13374:	4299      	cmp	r1, r3
   13376:	d100      	bne.n	1337a <LORAWAN_RxDone+0x52a>
   13378:	e0fa      	b.n	13570 <LORAWAN_RxDone+0x720>
   1337a:	7833      	ldrb	r3, [r6, #0]
   1337c:	1a89      	subs	r1, r1, r2
   1337e:	b2c9      	uxtb	r1, r1
   13380:	9308      	str	r3, [sp, #32]
   13382:	000b      	movs	r3, r1
   13384:	3219      	adds	r2, #25
   13386:	3b0c      	subs	r3, #12
   13388:	4694      	mov	ip, r2
   1338a:	9a08      	ldr	r2, [sp, #32]
   1338c:	b2db      	uxtb	r3, r3
   1338e:	9306      	str	r3, [sp, #24]
   13390:	1c75      	adds	r5, r6, #1
   13392:	4b7c      	ldr	r3, [pc, #496]	; (13584 <LORAWAN_RxDone+0x734>)
   13394:	2a00      	cmp	r2, #0
   13396:	d100      	bne.n	1339a <LORAWAN_RxDone+0x54a>
   13398:	e0b6      	b.n	13508 <LORAWAN_RxDone+0x6b8>
   1339a:	681a      	ldr	r2, [r3, #0]
   1339c:	0018      	movs	r0, r3
   1339e:	791b      	ldrb	r3, [r3, #4]
   133a0:	0a14      	lsrs	r4, r2, #8
   133a2:	061b      	lsls	r3, r3, #24
   133a4:	4323      	orrs	r3, r4
   133a6:	9304      	str	r3, [sp, #16]
   133a8:	4b7d      	ldr	r3, [pc, #500]	; (135a0 <LORAWAN_RxDone+0x750>)
   133aa:	2201      	movs	r2, #1
   133ac:	9303      	str	r3, [sp, #12]
   133ae:	4663      	mov	r3, ip
   133b0:	9302      	str	r3, [sp, #8]
   133b2:	4b7c      	ldr	r3, [pc, #496]	; (135a4 <LORAWAN_RxDone+0x754>)
   133b4:	3008      	adds	r0, #8
   133b6:	390d      	subs	r1, #13
   133b8:	9201      	str	r2, [sp, #4]
   133ba:	9300      	str	r3, [sp, #0]
   133bc:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
   133be:	b2c9      	uxtb	r1, r1
   133c0:	0028      	movs	r0, r5
   133c2:	4c79      	ldr	r4, [pc, #484]	; (135a8 <LORAWAN_RxDone+0x758>)
   133c4:	47a0      	blx	r4
   133c6:	2800      	cmp	r0, #0
   133c8:	d004      	beq.n	133d4 <LORAWAN_RxDone+0x584>
   133ca:	4b78      	ldr	r3, [pc, #480]	; (135ac <LORAWAN_RxDone+0x75c>)
   133cc:	4798      	blx	r3
   133ce:	201f      	movs	r0, #31
   133d0:	4b6f      	ldr	r3, [pc, #444]	; (13590 <LORAWAN_RxDone+0x740>)
   133d2:	4798      	blx	r3
   133d4:	4c6b      	ldr	r4, [pc, #428]	; (13584 <LORAWAN_RxDone+0x734>)
   133d6:	2300      	movs	r3, #0
   133d8:	0022      	movs	r2, r4
   133da:	32c2      	adds	r2, #194	; 0xc2
   133dc:	8013      	strh	r3, [r2, #0]
   133de:	0022      	movs	r2, r4
   133e0:	32ed      	adds	r2, #237	; 0xed
   133e2:	7013      	strb	r3, [r2, #0]
   133e4:	0022      	movs	r2, r4
   133e6:	2110      	movs	r1, #16
   133e8:	328c      	adds	r2, #140	; 0x8c
   133ea:	7813      	ldrb	r3, [r2, #0]
   133ec:	438b      	bics	r3, r1
   133ee:	7013      	strb	r3, [r2, #0]
   133f0:	0023      	movs	r3, r4
   133f2:	2201      	movs	r2, #1
   133f4:	337c      	adds	r3, #124	; 0x7c
   133f6:	7859      	ldrb	r1, [r3, #1]
   133f8:	430a      	orrs	r2, r1
   133fa:	705a      	strb	r2, [r3, #1]
   133fc:	220e      	movs	r2, #14
   133fe:	781b      	ldrb	r3, [r3, #0]
   13400:	4013      	ands	r3, r2
   13402:	2b06      	cmp	r3, #6
   13404:	d109      	bne.n	1341a <LORAWAN_RxDone+0x5ca>
   13406:	0023      	movs	r3, r4
   13408:	33f4      	adds	r3, #244	; 0xf4
   1340a:	781b      	ldrb	r3, [r3, #0]
   1340c:	2b01      	cmp	r3, #1
   1340e:	d104      	bne.n	1341a <LORAWAN_RxDone+0x5ca>
   13410:	0023      	movs	r3, r4
   13412:	33e5      	adds	r3, #229	; 0xe5
   13414:	7818      	ldrb	r0, [r3, #0]
   13416:	4b66      	ldr	r3, [pc, #408]	; (135b0 <LORAWAN_RxDone+0x760>)
   13418:	4798      	blx	r3
   1341a:	0025      	movs	r5, r4
   1341c:	2201      	movs	r2, #1
   1341e:	358c      	adds	r5, #140	; 0x8c
   13420:	782b      	ldrb	r3, [r5, #0]
   13422:	4213      	tst	r3, r2
   13424:	d100      	bne.n	13428 <LORAWAN_RxDone+0x5d8>
   13426:	e10f      	b.n	13648 <LORAWAN_RxDone+0x7f8>
   13428:	797b      	ldrb	r3, [r7, #5]
   1342a:	321f      	adds	r2, #31
   1342c:	4213      	tst	r3, r2
   1342e:	d100      	bne.n	13432 <LORAWAN_RxDone+0x5e2>
   13430:	e0f0      	b.n	13614 <LORAWAN_RxDone+0x7c4>
   13432:	4b60      	ldr	r3, [pc, #384]	; (135b4 <LORAWAN_RxDone+0x764>)
   13434:	4798      	blx	r3
   13436:	0023      	movs	r3, r4
   13438:	2101      	movs	r1, #1
   1343a:	337c      	adds	r3, #124	; 0x7c
   1343c:	785a      	ldrb	r2, [r3, #1]
   1343e:	438a      	bics	r2, r1
   13440:	705a      	strb	r2, [r3, #1]
   13442:	9a08      	ldr	r2, [sp, #32]
   13444:	2a00      	cmp	r2, #0
   13446:	d100      	bne.n	1344a <LORAWAN_RxDone+0x5fa>
   13448:	e0c4      	b.n	135d4 <LORAWAN_RxDone+0x784>
   1344a:	9a06      	ldr	r2, [sp, #24]
   1344c:	0031      	movs	r1, r6
   1344e:	0038      	movs	r0, r7
   13450:	4b59      	ldr	r3, [pc, #356]	; (135b8 <LORAWAN_RxDone+0x768>)
   13452:	4798      	blx	r3
   13454:	4b4d      	ldr	r3, [pc, #308]	; (1358c <LORAWAN_RxDone+0x73c>)
   13456:	4d4b      	ldr	r5, [pc, #300]	; (13584 <LORAWAN_RxDone+0x734>)
   13458:	781b      	ldrb	r3, [r3, #0]
   1345a:	06db      	lsls	r3, r3, #27
   1345c:	d400      	bmi.n	13460 <LORAWAN_RxDone+0x610>
   1345e:	e168      	b.n	13732 <LORAWAN_RxDone+0x8e2>
   13460:	2220      	movs	r2, #32
   13462:	4b56      	ldr	r3, [pc, #344]	; (135bc <LORAWAN_RxDone+0x76c>)
   13464:	781b      	ldrb	r3, [r3, #0]
   13466:	401a      	ands	r2, r3
   13468:	9206      	str	r2, [sp, #24]
   1346a:	d000      	beq.n	1346e <LORAWAN_RxDone+0x61e>
   1346c:	e161      	b.n	13732 <LORAWAN_RxDone+0x8e2>
   1346e:	320a      	adds	r2, #10
   13470:	4213      	tst	r3, r2
   13472:	d100      	bne.n	13476 <LORAWAN_RxDone+0x626>
   13474:	e15d      	b.n	13732 <LORAWAN_RxDone+0x8e2>
   13476:	002b      	movs	r3, r5
   13478:	33ec      	adds	r3, #236	; 0xec
   1347a:	781b      	ldrb	r3, [r3, #0]
   1347c:	a90f      	add	r1, sp, #60	; 0x3c
   1347e:	704b      	strb	r3, [r1, #1]
   13480:	002e      	movs	r6, r5
   13482:	2301      	movs	r3, #1
   13484:	36df      	adds	r6, #223	; 0xdf
   13486:	700b      	strb	r3, [r1, #0]
   13488:	7833      	ldrb	r3, [r6, #0]
   1348a:	aa0e      	add	r2, sp, #56	; 0x38
   1348c:	2030      	movs	r0, #48	; 0x30
   1348e:	4f4c      	ldr	r7, [pc, #304]	; (135c0 <LORAWAN_RxDone+0x770>)
   13490:	708b      	strb	r3, [r1, #2]
   13492:	47b8      	blx	r7
   13494:	9007      	str	r0, [sp, #28]
   13496:	2808      	cmp	r0, #8
   13498:	d000      	beq.n	1349c <LORAWAN_RxDone+0x64c>
   1349a:	e103      	b.n	136a4 <LORAWAN_RxDone+0x854>
   1349c:	4b49      	ldr	r3, [pc, #292]	; (135c4 <LORAWAN_RxDone+0x774>)
   1349e:	9806      	ldr	r0, [sp, #24]
   134a0:	4798      	blx	r3
   134a2:	4b46      	ldr	r3, [pc, #280]	; (135bc <LORAWAN_RxDone+0x76c>)
   134a4:	9a07      	ldr	r2, [sp, #28]
   134a6:	781b      	ldrb	r3, [r3, #0]
   134a8:	4393      	bics	r3, r2
   134aa:	4a44      	ldr	r2, [pc, #272]	; (135bc <LORAWAN_RxDone+0x76c>)
   134ac:	7013      	strb	r3, [r2, #0]
   134ae:	e717      	b.n	132e0 <LORAWAN_RxDone+0x490>
   134b0:	0023      	movs	r3, r4
   134b2:	33f4      	adds	r3, #244	; 0xf4
   134b4:	781b      	ldrb	r3, [r3, #0]
   134b6:	2b01      	cmp	r3, #1
   134b8:	d108      	bne.n	134cc <LORAWAN_RxDone+0x67c>
   134ba:	0023      	movs	r3, r4
   134bc:	220e      	movs	r2, #14
   134be:	337c      	adds	r3, #124	; 0x7c
   134c0:	781b      	ldrb	r3, [r3, #0]
   134c2:	4013      	ands	r3, r2
   134c4:	2b06      	cmp	r3, #6
   134c6:	d101      	bne.n	134cc <LORAWAN_RxDone+0x67c>
   134c8:	4b3f      	ldr	r3, [pc, #252]	; (135c8 <LORAWAN_RxDone+0x778>)
   134ca:	4798      	blx	r3
   134cc:	493f      	ldr	r1, [pc, #252]	; (135cc <LORAWAN_RxDone+0x77c>)
   134ce:	784a      	ldrb	r2, [r1, #1]
   134d0:	780b      	ldrb	r3, [r1, #0]
   134d2:	0212      	lsls	r2, r2, #8
   134d4:	431a      	orrs	r2, r3
   134d6:	788b      	ldrb	r3, [r1, #2]
   134d8:	041b      	lsls	r3, r3, #16
   134da:	431a      	orrs	r2, r3
   134dc:	78cb      	ldrb	r3, [r1, #3]
   134de:	061b      	lsls	r3, r3, #24
   134e0:	4313      	orrs	r3, r2
   134e2:	d008      	beq.n	134f6 <LORAWAN_RxDone+0x6a6>
   134e4:	0022      	movs	r2, r4
   134e6:	2120      	movs	r1, #32
   134e8:	328c      	adds	r2, #140	; 0x8c
   134ea:	7813      	ldrb	r3, [r2, #0]
   134ec:	201e      	movs	r0, #30
   134ee:	438b      	bics	r3, r1
   134f0:	7013      	strb	r3, [r2, #0]
   134f2:	4b27      	ldr	r3, [pc, #156]	; (13590 <LORAWAN_RxDone+0x740>)
   134f4:	4798      	blx	r3
   134f6:	2300      	movs	r3, #0
   134f8:	34d8      	adds	r4, #216	; 0xd8
   134fa:	7023      	strb	r3, [r4, #0]
   134fc:	4b2b      	ldr	r3, [pc, #172]	; (135ac <LORAWAN_RxDone+0x75c>)
   134fe:	4798      	blx	r3
   13500:	e6ee      	b.n	132e0 <LORAWAN_RxDone+0x490>
   13502:	003e      	movs	r6, r7
   13504:	3608      	adds	r6, #8
   13506:	e72f      	b.n	13368 <LORAWAN_RxDone+0x518>
   13508:	9a06      	ldr	r2, [sp, #24]
   1350a:	2a00      	cmp	r2, #0
   1350c:	d034      	beq.n	13578 <LORAWAN_RxDone+0x728>
   1350e:	0702      	lsls	r2, r0, #28
   13510:	d128      	bne.n	13564 <LORAWAN_RxDone+0x714>
   13512:	390d      	subs	r1, #13
   13514:	681a      	ldr	r2, [r3, #0]
   13516:	b2cc      	uxtb	r4, r1
   13518:	0019      	movs	r1, r3
   1351a:	791b      	ldrb	r3, [r3, #4]
   1351c:	0a10      	lsrs	r0, r2, #8
   1351e:	061b      	lsls	r3, r3, #24
   13520:	4303      	orrs	r3, r0
   13522:	9304      	str	r3, [sp, #16]
   13524:	4b1e      	ldr	r3, [pc, #120]	; (135a0 <LORAWAN_RxDone+0x750>)
   13526:	3108      	adds	r1, #8
   13528:	9303      	str	r3, [sp, #12]
   1352a:	4663      	mov	r3, ip
   1352c:	9302      	str	r3, [sp, #8]
   1352e:	2302      	movs	r3, #2
   13530:	9301      	str	r3, [sp, #4]
   13532:	4b27      	ldr	r3, [pc, #156]	; (135d0 <LORAWAN_RxDone+0x780>)
   13534:	2201      	movs	r2, #1
   13536:	9300      	str	r3, [sp, #0]
   13538:	6fcb      	ldr	r3, [r1, #124]	; 0x7c
   1353a:	0028      	movs	r0, r5
   1353c:	0021      	movs	r1, r4
   1353e:	4e1a      	ldr	r6, [pc, #104]	; (135a8 <LORAWAN_RxDone+0x758>)
   13540:	47b0      	blx	r6
   13542:	2800      	cmp	r0, #0
   13544:	d004      	beq.n	13550 <LORAWAN_RxDone+0x700>
   13546:	4b19      	ldr	r3, [pc, #100]	; (135ac <LORAWAN_RxDone+0x75c>)
   13548:	4798      	blx	r3
   1354a:	201f      	movs	r0, #31
   1354c:	4b10      	ldr	r3, [pc, #64]	; (13590 <LORAWAN_RxDone+0x740>)
   1354e:	4798      	blx	r3
   13550:	4b12      	ldr	r3, [pc, #72]	; (1359c <LORAWAN_RxDone+0x74c>)
   13552:	0021      	movs	r1, r4
   13554:	0028      	movs	r0, r5
   13556:	4798      	blx	r3
   13558:	2300      	movs	r3, #0
   1355a:	9306      	str	r3, [sp, #24]
   1355c:	3301      	adds	r3, #1
   1355e:	9307      	str	r3, [sp, #28]
   13560:	2600      	movs	r6, #0
   13562:	e737      	b.n	133d4 <LORAWAN_RxDone+0x584>
   13564:	001a      	movs	r2, r3
   13566:	32f4      	adds	r2, #244	; 0xf4
   13568:	7812      	ldrb	r2, [r2, #0]
   1356a:	2a01      	cmp	r2, #1
   1356c:	d1ae      	bne.n	134cc <LORAWAN_RxDone+0x67c>
   1356e:	e7a5      	b.n	134bc <LORAWAN_RxDone+0x66c>
   13570:	2600      	movs	r6, #0
   13572:	9608      	str	r6, [sp, #32]
   13574:	9606      	str	r6, [sp, #24]
   13576:	e72d      	b.n	133d4 <LORAWAN_RxDone+0x584>
   13578:	9b06      	ldr	r3, [sp, #24]
   1357a:	9308      	str	r3, [sp, #32]
   1357c:	001e      	movs	r6, r3
   1357e:	e729      	b.n	133d4 <LORAWAN_RxDone+0x584>
   13580:	00014435 	.word	0x00014435
   13584:	20002b5c 	.word	0x20002b5c
   13588:	0001018d 	.word	0x0001018d
   1358c:	20002bd8 	.word	0x20002bd8
   13590:	00011415 	.word	0x00011415
   13594:	000144a9 	.word	0x000144a9
   13598:	0000dfe1 	.word	0x0000dfe1
   1359c:	00012b99 	.word	0x00012b99
   135a0:	20002eac 	.word	0x20002eac
   135a4:	20002b91 	.word	0x20002b91
   135a8:	00011355 	.word	0x00011355
   135ac:	000127e9 	.word	0x000127e9
   135b0:	0000f029 	.word	0x0000f029
   135b4:	000108b9 	.word	0x000108b9
   135b8:	00011805 	.word	0x00011805
   135bc:	20002be8 	.word	0x20002be8
   135c0:	0000d805 	.word	0x0000d805
   135c4:	000104cd 	.word	0x000104cd
   135c8:	00010225 	.word	0x00010225
   135cc:	20002ea4 	.word	0x20002ea4
   135d0:	20002b81 	.word	0x20002b81
   135d4:	2120      	movs	r1, #32
   135d6:	782a      	ldrb	r2, [r5, #0]
   135d8:	438a      	bics	r2, r1
   135da:	702a      	strb	r2, [r5, #0]
   135dc:	0022      	movs	r2, r4
   135de:	32f4      	adds	r2, #244	; 0xf4
   135e0:	7812      	ldrb	r2, [r2, #0]
   135e2:	2a01      	cmp	r2, #1
   135e4:	d10e      	bne.n	13604 <LORAWAN_RxDone+0x7b4>
   135e6:	781a      	ldrb	r2, [r3, #0]
   135e8:	3912      	subs	r1, #18
   135ea:	438a      	bics	r2, r1
   135ec:	701a      	strb	r2, [r3, #0]
   135ee:	2385      	movs	r3, #133	; 0x85
   135f0:	4aa7      	ldr	r2, [pc, #668]	; (13890 <LORAWAN_RxDone+0xa40>)
   135f2:	009b      	lsls	r3, r3, #2
   135f4:	5cd3      	ldrb	r3, [r2, r3]
   135f6:	2b00      	cmp	r3, #0
   135f8:	d000      	beq.n	135fc <LORAWAN_RxDone+0x7ac>
   135fa:	e72b      	b.n	13454 <LORAWAN_RxDone+0x604>
   135fc:	2008      	movs	r0, #8
   135fe:	4ba5      	ldr	r3, [pc, #660]	; (13894 <LORAWAN_RxDone+0xa44>)
   13600:	4798      	blx	r3
   13602:	e727      	b.n	13454 <LORAWAN_RxDone+0x604>
   13604:	2a04      	cmp	r2, #4
   13606:	d1f2      	bne.n	135ee <LORAWAN_RxDone+0x79e>
   13608:	0023      	movs	r3, r4
   1360a:	33e8      	adds	r3, #232	; 0xe8
   1360c:	7818      	ldrb	r0, [r3, #0]
   1360e:	4ba2      	ldr	r3, [pc, #648]	; (13898 <LORAWAN_RxDone+0xa48>)
   13610:	4798      	blx	r3
   13612:	e7ec      	b.n	135ee <LORAWAN_RxDone+0x79e>
   13614:	9b07      	ldr	r3, [sp, #28]
   13616:	2b00      	cmp	r3, #0
   13618:	d013      	beq.n	13642 <LORAWAN_RxDone+0x7f2>
   1361a:	0023      	movs	r3, r4
   1361c:	33f4      	adds	r3, #244	; 0xf4
   1361e:	781e      	ldrb	r6, [r3, #0]
   13620:	2e01      	cmp	r6, #1
   13622:	d10e      	bne.n	13642 <LORAWAN_RxDone+0x7f2>
   13624:	4b9d      	ldr	r3, [pc, #628]	; (1389c <LORAWAN_RxDone+0xa4c>)
   13626:	4798      	blx	r3
   13628:	0022      	movs	r2, r4
   1362a:	327c      	adds	r2, #124	; 0x7c
   1362c:	7853      	ldrb	r3, [r2, #1]
   1362e:	43b3      	bics	r3, r6
   13630:	7053      	strb	r3, [r2, #1]
   13632:	2220      	movs	r2, #32
   13634:	782b      	ldrb	r3, [r5, #0]
   13636:	4393      	bics	r3, r2
   13638:	702b      	strb	r3, [r5, #0]
   1363a:	2385      	movs	r3, #133	; 0x85
   1363c:	009b      	lsls	r3, r3, #2
   1363e:	5ce3      	ldrb	r3, [r4, r3]
   13640:	e7d9      	b.n	135f6 <LORAWAN_RxDone+0x7a6>
   13642:	4b97      	ldr	r3, [pc, #604]	; (138a0 <LORAWAN_RxDone+0xa50>)
   13644:	4798      	blx	r3
   13646:	e705      	b.n	13454 <LORAWAN_RxDone+0x604>
   13648:	9a08      	ldr	r2, [sp, #32]
   1364a:	2a00      	cmp	r2, #0
   1364c:	d00b      	beq.n	13666 <LORAWAN_RxDone+0x816>
   1364e:	9a06      	ldr	r2, [sp, #24]
   13650:	0031      	movs	r1, r6
   13652:	0038      	movs	r0, r7
   13654:	4b93      	ldr	r3, [pc, #588]	; (138a4 <LORAWAN_RxDone+0xa54>)
   13656:	4798      	blx	r3
   13658:	0022      	movs	r2, r4
   1365a:	2101      	movs	r1, #1
   1365c:	327c      	adds	r2, #124	; 0x7c
   1365e:	7853      	ldrb	r3, [r2, #1]
   13660:	438b      	bics	r3, r1
   13662:	7053      	strb	r3, [r2, #1]
   13664:	e6f6      	b.n	13454 <LORAWAN_RxDone+0x604>
   13666:	2220      	movs	r2, #32
   13668:	4393      	bics	r3, r2
   1366a:	702b      	strb	r3, [r5, #0]
   1366c:	0023      	movs	r3, r4
   1366e:	33f4      	adds	r3, #244	; 0xf4
   13670:	781b      	ldrb	r3, [r3, #0]
   13672:	2b01      	cmp	r3, #1
   13674:	d10e      	bne.n	13694 <LORAWAN_RxDone+0x844>
   13676:	0022      	movs	r2, r4
   13678:	210e      	movs	r1, #14
   1367a:	327c      	adds	r2, #124	; 0x7c
   1367c:	7813      	ldrb	r3, [r2, #0]
   1367e:	438b      	bics	r3, r1
   13680:	7013      	strb	r3, [r2, #0]
   13682:	2385      	movs	r3, #133	; 0x85
   13684:	009b      	lsls	r3, r3, #2
   13686:	5ce3      	ldrb	r3, [r4, r3]
   13688:	2b00      	cmp	r3, #0
   1368a:	d1e5      	bne.n	13658 <LORAWAN_RxDone+0x808>
   1368c:	2008      	movs	r0, #8
   1368e:	4b81      	ldr	r3, [pc, #516]	; (13894 <LORAWAN_RxDone+0xa44>)
   13690:	4798      	blx	r3
   13692:	e7e1      	b.n	13658 <LORAWAN_RxDone+0x808>
   13694:	2b04      	cmp	r3, #4
   13696:	d1f4      	bne.n	13682 <LORAWAN_RxDone+0x832>
   13698:	0023      	movs	r3, r4
   1369a:	33e8      	adds	r3, #232	; 0xe8
   1369c:	7818      	ldrb	r0, [r3, #0]
   1369e:	4b7e      	ldr	r3, [pc, #504]	; (13898 <LORAWAN_RxDone+0xa48>)
   136a0:	4798      	blx	r3
   136a2:	e7ee      	b.n	13682 <LORAWAN_RxDone+0x832>
   136a4:	35ff      	adds	r5, #255	; 0xff
   136a6:	7c6b      	ldrb	r3, [r5, #17]
   136a8:	079a      	lsls	r2, r3, #30
   136aa:	d520      	bpl.n	136ee <LORAWAN_RxDone+0x89e>
   136ac:	aa10      	add	r2, sp, #64	; 0x40
   136ae:	0031      	movs	r1, r6
   136b0:	2026      	movs	r0, #38	; 0x26
   136b2:	47b8      	blx	r7
   136b4:	9b10      	ldr	r3, [sp, #64]	; 0x40
   136b6:	1c5a      	adds	r2, r3, #1
   136b8:	d001      	beq.n	136be <LORAWAN_RxDone+0x86e>
   136ba:	3314      	adds	r3, #20
   136bc:	9310      	str	r3, [sp, #64]	; 0x40
   136be:	0021      	movs	r1, r4
   136c0:	220e      	movs	r2, #14
   136c2:	317c      	adds	r1, #124	; 0x7c
   136c4:	780b      	ldrb	r3, [r1, #0]
   136c6:	4393      	bics	r3, r2
   136c8:	001a      	movs	r2, r3
   136ca:	230c      	movs	r3, #12
   136cc:	4313      	orrs	r3, r2
   136ce:	700b      	strb	r3, [r1, #0]
   136d0:	4b75      	ldr	r3, [pc, #468]	; (138a8 <LORAWAN_RxDone+0xa58>)
   136d2:	9a10      	ldr	r2, [sp, #64]	; 0x40
   136d4:	5ce3      	ldrb	r3, [r4, r3]
   136d6:	21fa      	movs	r1, #250	; 0xfa
   136d8:	1ad3      	subs	r3, r2, r3
   136da:	2200      	movs	r2, #0
   136dc:	0089      	lsls	r1, r1, #2
   136de:	4359      	muls	r1, r3
   136e0:	34e6      	adds	r4, #230	; 0xe6
   136e2:	4b72      	ldr	r3, [pc, #456]	; (138ac <LORAWAN_RxDone+0xa5c>)
   136e4:	7820      	ldrb	r0, [r4, #0]
   136e6:	9200      	str	r2, [sp, #0]
   136e8:	4c71      	ldr	r4, [pc, #452]	; (138b0 <LORAWAN_RxDone+0xa60>)
   136ea:	47a0      	blx	r4
   136ec:	e5f8      	b.n	132e0 <LORAWAN_RxDone+0x490>
   136ee:	075b      	lsls	r3, r3, #29
   136f0:	d400      	bmi.n	136f4 <LORAWAN_RxDone+0x8a4>
   136f2:	e5f5      	b.n	132e0 <LORAWAN_RxDone+0x490>
   136f4:	aa10      	add	r2, sp, #64	; 0x40
   136f6:	0031      	movs	r1, r6
   136f8:	2033      	movs	r0, #51	; 0x33
   136fa:	47b8      	blx	r7
   136fc:	220e      	movs	r2, #14
   136fe:	4b6d      	ldr	r3, [pc, #436]	; (138b4 <LORAWAN_RxDone+0xa64>)
   13700:	781b      	ldrb	r3, [r3, #0]
   13702:	4393      	bics	r3, r2
   13704:	001a      	movs	r2, r3
   13706:	230c      	movs	r3, #12
   13708:	4313      	orrs	r3, r2
   1370a:	4a6a      	ldr	r2, [pc, #424]	; (138b4 <LORAWAN_RxDone+0xa64>)
   1370c:	7013      	strb	r3, [r2, #0]
   1370e:	9b10      	ldr	r3, [sp, #64]	; 0x40
   13710:	1c5a      	adds	r2, r3, #1
   13712:	d001      	beq.n	13718 <LORAWAN_RxDone+0x8c8>
   13714:	3301      	adds	r3, #1
   13716:	9310      	str	r3, [sp, #64]	; 0x40
   13718:	4b63      	ldr	r3, [pc, #396]	; (138a8 <LORAWAN_RxDone+0xa58>)
   1371a:	9a10      	ldr	r2, [sp, #64]	; 0x40
   1371c:	5ce3      	ldrb	r3, [r4, r3]
   1371e:	21fa      	movs	r1, #250	; 0xfa
   13720:	1ad3      	subs	r3, r2, r3
   13722:	2200      	movs	r2, #0
   13724:	0089      	lsls	r1, r1, #2
   13726:	34e9      	adds	r4, #233	; 0xe9
   13728:	4359      	muls	r1, r3
   1372a:	7820      	ldrb	r0, [r4, #0]
   1372c:	4b62      	ldr	r3, [pc, #392]	; (138b8 <LORAWAN_RxDone+0xa68>)
   1372e:	9200      	str	r2, [sp, #0]
   13730:	e7da      	b.n	136e8 <LORAWAN_RxDone+0x898>
   13732:	35f4      	adds	r5, #244	; 0xf4
   13734:	782b      	ldrb	r3, [r5, #0]
   13736:	2b04      	cmp	r3, #4
   13738:	d000      	beq.n	1373c <LORAWAN_RxDone+0x8ec>
   1373a:	e5d1      	b.n	132e0 <LORAWAN_RxDone+0x490>
   1373c:	0038      	movs	r0, r7
   1373e:	4b5f      	ldr	r3, [pc, #380]	; (138bc <LORAWAN_RxDone+0xa6c>)
   13740:	4798      	blx	r3
   13742:	e5cd      	b.n	132e0 <LORAWAN_RxDone+0x490>
   13744:	220e      	movs	r2, #14
   13746:	4013      	ands	r3, r2
   13748:	2b0a      	cmp	r3, #10
   1374a:	d008      	beq.n	1375e <LORAWAN_RxDone+0x90e>
   1374c:	2b06      	cmp	r3, #6
   1374e:	d000      	beq.n	13752 <LORAWAN_RxDone+0x902>
   13750:	e5a4      	b.n	1329c <LORAWAN_RxDone+0x44c>
   13752:	0023      	movs	r3, r4
   13754:	33f0      	adds	r3, #240	; 0xf0
   13756:	781b      	ldrb	r3, [r3, #0]
   13758:	2b00      	cmp	r3, #0
   1375a:	d100      	bne.n	1375e <LORAWAN_RxDone+0x90e>
   1375c:	e59e      	b.n	1329c <LORAWAN_RxDone+0x44c>
   1375e:	2220      	movs	r2, #32
   13760:	348c      	adds	r4, #140	; 0x8c
   13762:	7823      	ldrb	r3, [r4, #0]
   13764:	2019      	movs	r0, #25
   13766:	4393      	bics	r3, r2
   13768:	7023      	strb	r3, [r4, #0]
   1376a:	e5a4      	b.n	132b6 <LORAWAN_RxDone+0x466>
   1376c:	4954      	ldr	r1, [pc, #336]	; (138c0 <LORAWAN_RxDone+0xa70>)
   1376e:	784a      	ldrb	r2, [r1, #1]
   13770:	780b      	ldrb	r3, [r1, #0]
   13772:	0212      	lsls	r2, r2, #8
   13774:	431a      	orrs	r2, r3
   13776:	788b      	ldrb	r3, [r1, #2]
   13778:	041b      	lsls	r3, r3, #16
   1377a:	431a      	orrs	r2, r3
   1377c:	78cb      	ldrb	r3, [r1, #3]
   1377e:	061b      	lsls	r3, r3, #24
   13780:	4313      	orrs	r3, r2
   13782:	d100      	bne.n	13786 <LORAWAN_RxDone+0x936>
   13784:	e5ac      	b.n	132e0 <LORAWAN_RxDone+0x490>
   13786:	4b4f      	ldr	r3, [pc, #316]	; (138c4 <LORAWAN_RxDone+0xa74>)
   13788:	4c4f      	ldr	r4, [pc, #316]	; (138c8 <LORAWAN_RxDone+0xa78>)
   1378a:	781b      	ldrb	r3, [r3, #0]
   1378c:	2b10      	cmp	r3, #16
   1378e:	d105      	bne.n	1379c <LORAWAN_RxDone+0x94c>
   13790:	0001      	movs	r1, r0
   13792:	2000      	movs	r0, #0
   13794:	9a06      	ldr	r2, [sp, #24]
   13796:	3b0c      	subs	r3, #12
   13798:	47a0      	blx	r4
   1379a:	e5a1      	b.n	132e0 <LORAWAN_RxDone+0x490>
   1379c:	2300      	movs	r3, #0
   1379e:	0001      	movs	r1, r0
   137a0:	9a06      	ldr	r2, [sp, #24]
   137a2:	0018      	movs	r0, r3
   137a4:	e7f8      	b.n	13798 <LORAWAN_RxDone+0x948>
   137a6:	3408      	adds	r4, #8
   137a8:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
   137aa:	0031      	movs	r1, r6
   137ac:	9308      	str	r3, [sp, #32]
   137ae:	4b47      	ldr	r3, [pc, #284]	; (138cc <LORAWAN_RxDone+0xa7c>)
   137b0:	4798      	blx	r3
   137b2:	2808      	cmp	r0, #8
   137b4:	d001      	beq.n	137ba <LORAWAN_RxDone+0x96a>
   137b6:	f7ff fbaf 	bl	12f18 <LORAWAN_RxDone+0xc8>
   137ba:	9b06      	ldr	r3, [sp, #24]
   137bc:	0028      	movs	r0, r5
   137be:	1f1a      	subs	r2, r3, #4
   137c0:	9b07      	ldr	r3, [sp, #28]
   137c2:	b2d2      	uxtb	r2, r2
   137c4:	9300      	str	r3, [sp, #0]
   137c6:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
   137c8:	2349      	movs	r3, #73	; 0x49
   137ca:	4c41      	ldr	r4, [pc, #260]	; (138d0 <LORAWAN_RxDone+0xa80>)
   137cc:	47a0      	blx	r4
   137ce:	4d41      	ldr	r5, [pc, #260]	; (138d4 <LORAWAN_RxDone+0xa84>)
   137d0:	9607      	str	r6, [sp, #28]
   137d2:	4e41      	ldr	r6, [pc, #260]	; (138d8 <LORAWAN_RxDone+0xa88>)
   137d4:	4c41      	ldr	r4, [pc, #260]	; (138dc <LORAWAN_RxDone+0xa8c>)
   137d6:	2210      	movs	r2, #16
   137d8:	0021      	movs	r1, r4
   137da:	4b41      	ldr	r3, [pc, #260]	; (138e0 <LORAWAN_RxDone+0xa90>)
   137dc:	0030      	movs	r0, r6
   137de:	4798      	blx	r3
   137e0:	9b06      	ldr	r3, [sp, #24]
   137e2:	0039      	movs	r1, r7
   137e4:	3b04      	subs	r3, #4
   137e6:	001a      	movs	r2, r3
   137e8:	9309      	str	r3, [sp, #36]	; 0x24
   137ea:	483e      	ldr	r0, [pc, #248]	; (138e4 <LORAWAN_RxDone+0xa94>)
   137ec:	4b3c      	ldr	r3, [pc, #240]	; (138e0 <LORAWAN_RxDone+0xa90>)
   137ee:	4798      	blx	r3
   137f0:	9b06      	ldr	r3, [sp, #24]
   137f2:	9a07      	ldr	r2, [sp, #28]
   137f4:	330c      	adds	r3, #12
   137f6:	b29b      	uxth	r3, r3
   137f8:	9300      	str	r3, [sp, #0]
   137fa:	0033      	movs	r3, r6
   137fc:	2a00      	cmp	r2, #0
   137fe:	d100      	bne.n	13802 <LORAWAN_RxDone+0x9b2>
   13800:	e55b      	b.n	132ba <LORAWAN_RxDone+0x46a>
   13802:	0022      	movs	r2, r4
   13804:	2104      	movs	r1, #4
   13806:	4c38      	ldr	r4, [pc, #224]	; (138e8 <LORAWAN_RxDone+0xa98>)
   13808:	0028      	movs	r0, r5
   1380a:	47a0      	blx	r4
   1380c:	2204      	movs	r2, #4
   1380e:	4933      	ldr	r1, [pc, #204]	; (138dc <LORAWAN_RxDone+0xa8c>)
   13810:	4c33      	ldr	r4, [pc, #204]	; (138e0 <LORAWAN_RxDone+0xa90>)
   13812:	a80d      	add	r0, sp, #52	; 0x34
   13814:	47a0      	blx	r4
   13816:	9b09      	ldr	r3, [sp, #36]	; 0x24
   13818:	2204      	movs	r2, #4
   1381a:	18f9      	adds	r1, r7, r3
   1381c:	a810      	add	r0, sp, #64	; 0x40
   1381e:	47a0      	blx	r4
   13820:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   13822:	9a10      	ldr	r2, [sp, #64]	; 0x40
   13824:	4293      	cmp	r3, r2
   13826:	d100      	bne.n	1382a <LORAWAN_RxDone+0x9da>
   13828:	e54e      	b.n	132c8 <LORAWAN_RxDone+0x478>
   1382a:	4c19      	ldr	r4, [pc, #100]	; (13890 <LORAWAN_RxDone+0xa40>)
   1382c:	0023      	movs	r3, r4
   1382e:	33f4      	adds	r3, #244	; 0xf4
   13830:	781b      	ldrb	r3, [r3, #0]
   13832:	2b01      	cmp	r3, #1
   13834:	d108      	bne.n	13848 <LORAWAN_RxDone+0x9f8>
   13836:	0023      	movs	r3, r4
   13838:	220e      	movs	r2, #14
   1383a:	337c      	adds	r3, #124	; 0x7c
   1383c:	781b      	ldrb	r3, [r3, #0]
   1383e:	4013      	ands	r3, r2
   13840:	2b06      	cmp	r3, #6
   13842:	d101      	bne.n	13848 <LORAWAN_RxDone+0x9f8>
   13844:	4b29      	ldr	r3, [pc, #164]	; (138ec <LORAWAN_RxDone+0xa9c>)
   13846:	4798      	blx	r3
   13848:	491d      	ldr	r1, [pc, #116]	; (138c0 <LORAWAN_RxDone+0xa70>)
   1384a:	784a      	ldrb	r2, [r1, #1]
   1384c:	780b      	ldrb	r3, [r1, #0]
   1384e:	0212      	lsls	r2, r2, #8
   13850:	431a      	orrs	r2, r3
   13852:	788b      	ldrb	r3, [r1, #2]
   13854:	041b      	lsls	r3, r3, #16
   13856:	431a      	orrs	r2, r3
   13858:	78cb      	ldrb	r3, [r1, #3]
   1385a:	061b      	lsls	r3, r3, #24
   1385c:	4313      	orrs	r3, r2
   1385e:	d101      	bne.n	13864 <LORAWAN_RxDone+0xa14>
   13860:	f7ff fb48 	bl	12ef4 <LORAWAN_RxDone+0xa4>
   13864:	0022      	movs	r2, r4
   13866:	2120      	movs	r1, #32
   13868:	328c      	adds	r2, #140	; 0x8c
   1386a:	7813      	ldrb	r3, [r2, #0]
   1386c:	438b      	bics	r3, r1
   1386e:	7013      	strb	r3, [r2, #0]
   13870:	9b07      	ldr	r3, [sp, #28]
   13872:	2b00      	cmp	r3, #0
   13874:	d100      	bne.n	13878 <LORAWAN_RxDone+0xa28>
   13876:	e523      	b.n	132c0 <LORAWAN_RxDone+0x470>
   13878:	2322      	movs	r3, #34	; 0x22
   1387a:	aa04      	add	r2, sp, #16
   1387c:	189b      	adds	r3, r3, r2
   1387e:	781a      	ldrb	r2, [r3, #0]
   13880:	233c      	movs	r3, #60	; 0x3c
   13882:	4353      	muls	r3, r2
   13884:	18e4      	adds	r4, r4, r3
   13886:	9b08      	ldr	r3, [sp, #32]
   13888:	34fc      	adds	r4, #252	; 0xfc
   1388a:	64e3      	str	r3, [r4, #76]	; 0x4c
   1388c:	2018      	movs	r0, #24
   1388e:	e512      	b.n	132b6 <LORAWAN_RxDone+0x466>
   13890:	20002b5c 	.word	0x20002b5c
   13894:	00011415 	.word	0x00011415
   13898:	0000f029 	.word	0x0000f029
   1389c:	000108b9 	.word	0x000108b9
   138a0:	00010841 	.word	0x00010841
   138a4:	00011805 	.word	0x00011805
   138a8:	0000021f 	.word	0x0000021f
   138ac:	000105c5 	.word	0x000105c5
   138b0:	0000ed11 	.word	0x0000ed11
   138b4:	20002bd8 	.word	0x20002bd8
   138b8:	00011115 	.word	0x00011115
   138bc:	00014219 	.word	0x00014219
   138c0:	20002ea4 	.word	0x20002ea4
   138c4:	20002d90 	.word	0x20002d90
   138c8:	000117b9 	.word	0x000117b9
   138cc:	00012869 	.word	0x00012869
   138d0:	0001018d 	.word	0x0001018d
   138d4:	20002b81 	.word	0x20002b81
   138d8:	20002eac 	.word	0x20002eac
   138dc:	20001110 	.word	0x20001110
   138e0:	00019d11 	.word	0x00019d11
   138e4:	20002ebc 	.word	0x20002ebc
   138e8:	0000dced 	.word	0x0000dced
   138ec:	00010225 	.word	0x00010225

000138f0 <LorawanSetEdClass>:
   138f0:	2385      	movs	r3, #133	; 0x85
   138f2:	b537      	push	{r0, r1, r2, r4, r5, lr}
   138f4:	4d19      	ldr	r5, [pc, #100]	; (1395c <LorawanSetEdClass+0x6c>)
   138f6:	009b      	lsls	r3, r3, #2
   138f8:	5ceb      	ldrb	r3, [r5, r3]
   138fa:	0004      	movs	r4, r0
   138fc:	2011      	movs	r0, #17
   138fe:	2b00      	cmp	r3, #0
   13900:	d013      	beq.n	1392a <LorawanSetEdClass+0x3a>
   13902:	002b      	movs	r3, r5
   13904:	33f5      	adds	r3, #245	; 0xf5
   13906:	781b      	ldrb	r3, [r3, #0]
   13908:	3807      	subs	r0, #7
   1390a:	4223      	tst	r3, r4
   1390c:	d00d      	beq.n	1392a <LorawanSetEdClass+0x3a>
   1390e:	002b      	movs	r3, r5
   13910:	33f4      	adds	r3, #244	; 0xf4
   13912:	7819      	ldrb	r1, [r3, #0]
   13914:	428c      	cmp	r4, r1
   13916:	d007      	beq.n	13928 <LorawanSetEdClass+0x38>
   13918:	2901      	cmp	r1, #1
   1391a:	d107      	bne.n	1392c <LorawanSetEdClass+0x3c>
   1391c:	2c04      	cmp	r4, #4
   1391e:	d104      	bne.n	1392a <LorawanSetEdClass+0x3a>
   13920:	701c      	strb	r4, [r3, #0]
   13922:	2000      	movs	r0, #0
   13924:	4b0e      	ldr	r3, [pc, #56]	; (13960 <LorawanSetEdClass+0x70>)
   13926:	4798      	blx	r3
   13928:	2008      	movs	r0, #8
   1392a:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
   1392c:	2904      	cmp	r1, #4
   1392e:	d1fc      	bne.n	1392a <LorawanSetEdClass+0x3a>
   13930:	2c01      	cmp	r4, #1
   13932:	d1fa      	bne.n	1392a <LorawanSetEdClass+0x3a>
   13934:	701c      	strb	r4, [r3, #0]
   13936:	0021      	movs	r1, r4
   13938:	4b09      	ldr	r3, [pc, #36]	; (13960 <LorawanSetEdClass+0x70>)
   1393a:	2000      	movs	r0, #0
   1393c:	4798      	blx	r3
   1393e:	002a      	movs	r2, r5
   13940:	210e      	movs	r1, #14
   13942:	327c      	adds	r2, #124	; 0x7c
   13944:	7813      	ldrb	r3, [r2, #0]
   13946:	a801      	add	r0, sp, #4
   13948:	438b      	bics	r3, r1
   1394a:	7013      	strb	r3, [r2, #0]
   1394c:	35ff      	adds	r5, #255	; 0xff
   1394e:	4b05      	ldr	r3, [pc, #20]	; (13964 <LorawanSetEdClass+0x74>)
   13950:	7004      	strb	r4, [r0, #0]
   13952:	4798      	blx	r3
   13954:	7f68      	ldrb	r0, [r5, #29]
   13956:	4b04      	ldr	r3, [pc, #16]	; (13968 <LorawanSetEdClass+0x78>)
   13958:	4798      	blx	r3
   1395a:	e7e5      	b.n	13928 <LorawanSetEdClass+0x38>
   1395c:	20002b5c 	.word	0x20002b5c
   13960:	0000dfe1 	.word	0x0000dfe1
   13964:	00015dd9 	.word	0x00015dd9
   13968:	0000f029 	.word	0x0000f029

0001396c <LORAWAN_SetAttr>:
   1396c:	2385      	movs	r3, #133	; 0x85
   1396e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   13970:	4cbd      	ldr	r4, [pc, #756]	; (13c68 <LORAWAN_SetAttr+0x2fc>)
   13972:	009b      	lsls	r3, r3, #2
   13974:	5ce3      	ldrb	r3, [r4, r3]
   13976:	000d      	movs	r5, r1
   13978:	2611      	movs	r6, #17
   1397a:	2b00      	cmp	r3, #0
   1397c:	d100      	bne.n	13980 <LORAWAN_SetAttr+0x14>
   1397e:	e118      	b.n	13bb2 <LORAWAN_SetAttr+0x246>
   13980:	283f      	cmp	r0, #63	; 0x3f
   13982:	d871      	bhi.n	13a68 <LORAWAN_SetAttr+0xfc>
   13984:	f002 fe08 	bl	16598 <__gnu_thumb1_case_uhi>
   13988:	008c0040 	.word	0x008c0040
   1398c:	00f500ab 	.word	0x00f500ab
   13990:	00df00be 	.word	0x00df00be
   13994:	012d0117 	.word	0x012d0117
   13998:	015f014d 	.word	0x015f014d
   1399c:	017c0165 	.word	0x017c0165
   139a0:	019f0186 	.word	0x019f0186
   139a4:	01a901a4 	.word	0x01a901a4
   139a8:	01b301ae 	.word	0x01b301ae
   139ac:	01bd01b8 	.word	0x01bd01b8
   139b0:	01e401c2 	.word	0x01e401c2
   139b4:	01c601c9 	.word	0x01c601c9
   139b8:	01e901ed 	.word	0x01e901ed
   139bc:	01db01df 	.word	0x01db01df
   139c0:	007001d5 	.word	0x007001d5
   139c4:	01970070 	.word	0x01970070
   139c8:	00700070 	.word	0x00700070
   139cc:	00700070 	.word	0x00700070
   139d0:	00700070 	.word	0x00700070
   139d4:	005f01f1 	.word	0x005f01f1
   139d8:	020201f4 	.word	0x020201f4
   139dc:	01f901fe 	.word	0x01f901fe
   139e0:	02060070 	.word	0x02060070
   139e4:	020e020a 	.word	0x020e020a
   139e8:	02160212 	.word	0x02160212
   139ec:	023a021a 	.word	0x023a021a
   139f0:	00700070 	.word	0x00700070
   139f4:	00700070 	.word	0x00700070
   139f8:	00700070 	.word	0x00700070
   139fc:	00700070 	.word	0x00700070
   13a00:	02510070 	.word	0x02510070
   13a04:	025f025b 	.word	0x025f025b
   13a08:	260a      	movs	r6, #10
   13a0a:	2900      	cmp	r1, #0
   13a0c:	d100      	bne.n	13a10 <LORAWAN_SetAttr+0xa4>
   13a0e:	e0d0      	b.n	13bb2 <LORAWAN_SetAttr+0x246>
   13a10:	0020      	movs	r0, r4
   13a12:	2208      	movs	r2, #8
   13a14:	4b95      	ldr	r3, [pc, #596]	; (13c6c <LORAWAN_SetAttr+0x300>)
   13a16:	305d      	adds	r0, #93	; 0x5d
   13a18:	4798      	blx	r3
   13a1a:	2108      	movs	r1, #8
   13a1c:	4e94      	ldr	r6, [pc, #592]	; (13c70 <LORAWAN_SetAttr+0x304>)
   13a1e:	2001      	movs	r0, #1
   13a20:	47b0      	blx	r6
   13a22:	0022      	movs	r2, r4
   13a24:	2501      	movs	r5, #1
   13a26:	32d6      	adds	r2, #214	; 0xd6
   13a28:	7813      	ldrb	r3, [r2, #0]
   13a2a:	2109      	movs	r1, #9
   13a2c:	432b      	orrs	r3, r5
   13a2e:	347c      	adds	r4, #124	; 0x7c
   13a30:	0028      	movs	r0, r5
   13a32:	7013      	strb	r3, [r2, #0]
   13a34:	47b0      	blx	r6
   13a36:	7823      	ldrb	r3, [r4, #0]
   13a38:	210b      	movs	r1, #11
   13a3a:	43ab      	bics	r3, r5
   13a3c:	0028      	movs	r0, r5
   13a3e:	7023      	strb	r3, [r4, #0]
   13a40:	47b0      	blx	r6
   13a42:	2608      	movs	r6, #8
   13a44:	e0b5      	b.n	13bb2 <LORAWAN_SetAttr+0x246>
   13a46:	0023      	movs	r3, r4
   13a48:	33ff      	adds	r3, #255	; 0xff
   13a4a:	7c5b      	ldrb	r3, [r3, #17]
   13a4c:	260a      	movs	r6, #10
   13a4e:	075b      	lsls	r3, r3, #29
   13a50:	d400      	bmi.n	13a54 <LORAWAN_SetAttr+0xe8>
   13a52:	e0ae      	b.n	13bb2 <LORAWAN_SetAttr+0x246>
   13a54:	79ca      	ldrb	r2, [r1, #7]
   13a56:	4b87      	ldr	r3, [pc, #540]	; (13c74 <LORAWAN_SetAttr+0x308>)
   13a58:	2a00      	cmp	r2, #0
   13a5a:	d10e      	bne.n	13a7a <LORAWAN_SetAttr+0x10e>
   13a5c:	4669      	mov	r1, sp
   13a5e:	201d      	movs	r0, #29
   13a60:	714a      	strb	r2, [r1, #5]
   13a62:	4798      	blx	r3
   13a64:	2800      	cmp	r0, #0
   13a66:	d001      	beq.n	13a6c <LORAWAN_SetAttr+0x100>
   13a68:	260a      	movs	r6, #10
   13a6a:	e0a2      	b.n	13bb2 <LORAWAN_SetAttr+0x246>
   13a6c:	2109      	movs	r1, #9
   13a6e:	34fe      	adds	r4, #254	; 0xfe
   13a70:	82e0      	strh	r0, [r4, #22]
   13a72:	82a0      	strh	r0, [r4, #20]
   13a74:	4b7e      	ldr	r3, [pc, #504]	; (13c70 <LORAWAN_SetAttr+0x304>)
   13a76:	4798      	blx	r3
   13a78:	e7e3      	b.n	13a42 <LORAWAN_SetAttr+0xd6>
   13a7a:	2002      	movs	r0, #2
   13a7c:	5e2a      	ldrsh	r2, [r5, r0]
   13a7e:	88ae      	ldrh	r6, [r5, #4]
   13a80:	79a8      	ldrb	r0, [r5, #6]
   13a82:	466d      	mov	r5, sp
   13a84:	806a      	strh	r2, [r5, #2]
   13a86:	2201      	movs	r2, #1
   13a88:	8809      	ldrh	r1, [r1, #0]
   13a8a:	7128      	strb	r0, [r5, #4]
   13a8c:	8029      	strh	r1, [r5, #0]
   13a8e:	201d      	movs	r0, #29
   13a90:	4669      	mov	r1, sp
   13a92:	716a      	strb	r2, [r5, #5]
   13a94:	4798      	blx	r3
   13a96:	2800      	cmp	r0, #0
   13a98:	d1e6      	bne.n	13a68 <LORAWAN_SetAttr+0xfc>
   13a9a:	34fe      	adds	r4, #254	; 0xfe
   13a9c:	82e6      	strh	r6, [r4, #22]
   13a9e:	e7d0      	b.n	13a42 <LORAWAN_SetAttr+0xd6>
   13aa0:	260a      	movs	r6, #10
   13aa2:	2900      	cmp	r1, #0
   13aa4:	d100      	bne.n	13aa8 <LORAWAN_SetAttr+0x13c>
   13aa6:	e084      	b.n	13bb2 <LORAWAN_SetAttr+0x246>
   13aa8:	0020      	movs	r0, r4
   13aaa:	2208      	movs	r2, #8
   13aac:	4b6f      	ldr	r3, [pc, #444]	; (13c6c <LORAWAN_SetAttr+0x300>)
   13aae:	3055      	adds	r0, #85	; 0x55
   13ab0:	4798      	blx	r3
   13ab2:	2107      	movs	r1, #7
   13ab4:	4d6e      	ldr	r5, [pc, #440]	; (13c70 <LORAWAN_SetAttr+0x304>)
   13ab6:	2001      	movs	r0, #1
   13ab8:	47a8      	blx	r5
   13aba:	0022      	movs	r2, r4
   13abc:	2302      	movs	r3, #2
   13abe:	32d6      	adds	r2, #214	; 0xd6
   13ac0:	7811      	ldrb	r1, [r2, #0]
   13ac2:	2001      	movs	r0, #1
   13ac4:	430b      	orrs	r3, r1
   13ac6:	2109      	movs	r1, #9
   13ac8:	7013      	strb	r3, [r2, #0]
   13aca:	47a8      	blx	r5
   13acc:	2001      	movs	r0, #1
   13ace:	347c      	adds	r4, #124	; 0x7c
   13ad0:	7823      	ldrb	r3, [r4, #0]
   13ad2:	210b      	movs	r1, #11
   13ad4:	4383      	bics	r3, r0
   13ad6:	7023      	strb	r3, [r4, #0]
   13ad8:	47a8      	blx	r5
   13ada:	3e02      	subs	r6, #2
   13adc:	e069      	b.n	13bb2 <LORAWAN_SetAttr+0x246>
   13ade:	680b      	ldr	r3, [r1, #0]
   13ae0:	2001      	movs	r0, #1
   13ae2:	0a19      	lsrs	r1, r3, #8
   13ae4:	70a1      	strb	r1, [r4, #2]
   13ae6:	0c19      	lsrs	r1, r3, #16
   13ae8:	7063      	strb	r3, [r4, #1]
   13aea:	70e1      	strb	r1, [r4, #3]
   13aec:	0e1b      	lsrs	r3, r3, #24
   13aee:	2103      	movs	r1, #3
   13af0:	4d5f      	ldr	r5, [pc, #380]	; (13c70 <LORAWAN_SetAttr+0x304>)
   13af2:	7123      	strb	r3, [r4, #4]
   13af4:	47a8      	blx	r5
   13af6:	0022      	movs	r2, r4
   13af8:	2304      	movs	r3, #4
   13afa:	32d6      	adds	r2, #214	; 0xd6
   13afc:	7811      	ldrb	r1, [r2, #0]
   13afe:	430b      	orrs	r3, r1
   13b00:	7013      	strb	r3, [r2, #0]
   13b02:	e015      	b.n	13b30 <LORAWAN_SetAttr+0x1c4>
   13b04:	260a      	movs	r6, #10
   13b06:	2900      	cmp	r1, #0
   13b08:	d053      	beq.n	13bb2 <LORAWAN_SetAttr+0x246>
   13b0a:	3606      	adds	r6, #6
   13b0c:	0032      	movs	r2, r6
   13b0e:	4f57      	ldr	r7, [pc, #348]	; (13c6c <LORAWAN_SetAttr+0x300>)
   13b10:	1d60      	adds	r0, r4, #5
   13b12:	47b8      	blx	r7
   13b14:	0020      	movs	r0, r4
   13b16:	0032      	movs	r2, r6
   13b18:	0029      	movs	r1, r5
   13b1a:	3025      	adds	r0, #37	; 0x25
   13b1c:	47b8      	blx	r7
   13b1e:	2104      	movs	r1, #4
   13b20:	2001      	movs	r0, #1
   13b22:	4d53      	ldr	r5, [pc, #332]	; (13c70 <LORAWAN_SetAttr+0x304>)
   13b24:	47a8      	blx	r5
   13b26:	0023      	movs	r3, r4
   13b28:	33d6      	adds	r3, #214	; 0xd6
   13b2a:	781a      	ldrb	r2, [r3, #0]
   13b2c:	4316      	orrs	r6, r2
   13b2e:	701e      	strb	r6, [r3, #0]
   13b30:	2109      	movs	r1, #9
   13b32:	2001      	movs	r0, #1
   13b34:	47a8      	blx	r5
   13b36:	2001      	movs	r0, #1
   13b38:	210b      	movs	r1, #11
   13b3a:	347c      	adds	r4, #124	; 0x7c
   13b3c:	7823      	ldrb	r3, [r4, #0]
   13b3e:	4383      	bics	r3, r0
   13b40:	7023      	strb	r3, [r4, #0]
   13b42:	47a8      	blx	r5
   13b44:	e77d      	b.n	13a42 <LORAWAN_SetAttr+0xd6>
   13b46:	260a      	movs	r6, #10
   13b48:	2900      	cmp	r1, #0
   13b4a:	d032      	beq.n	13bb2 <LORAWAN_SetAttr+0x246>
   13b4c:	0020      	movs	r0, r4
   13b4e:	2210      	movs	r2, #16
   13b50:	4e46      	ldr	r6, [pc, #280]	; (13c6c <LORAWAN_SetAttr+0x300>)
   13b52:	3015      	adds	r0, #21
   13b54:	47b0      	blx	r6
   13b56:	0020      	movs	r0, r4
   13b58:	2210      	movs	r2, #16
   13b5a:	0029      	movs	r1, r5
   13b5c:	3035      	adds	r0, #53	; 0x35
   13b5e:	47b0      	blx	r6
   13b60:	2105      	movs	r1, #5
   13b62:	2001      	movs	r0, #1
   13b64:	4d42      	ldr	r5, [pc, #264]	; (13c70 <LORAWAN_SetAttr+0x304>)
   13b66:	47a8      	blx	r5
   13b68:	0022      	movs	r2, r4
   13b6a:	32d6      	adds	r2, #214	; 0xd6
   13b6c:	7811      	ldrb	r1, [r2, #0]
   13b6e:	2320      	movs	r3, #32
   13b70:	e7c5      	b.n	13afe <LORAWAN_SetAttr+0x192>
   13b72:	260a      	movs	r6, #10
   13b74:	2900      	cmp	r1, #0
   13b76:	d01c      	beq.n	13bb2 <LORAWAN_SetAttr+0x246>
   13b78:	4b3f      	ldr	r3, [pc, #252]	; (13c78 <LORAWAN_SetAttr+0x30c>)
   13b7a:	3e02      	subs	r6, #2
   13b7c:	5ce3      	ldrb	r3, [r4, r3]
   13b7e:	2b00      	cmp	r3, #0
   13b80:	d117      	bne.n	13bb2 <LORAWAN_SetAttr+0x246>
   13b82:	0020      	movs	r0, r4
   13b84:	2210      	movs	r2, #16
   13b86:	4b39      	ldr	r3, [pc, #228]	; (13c6c <LORAWAN_SetAttr+0x300>)
   13b88:	3045      	adds	r0, #69	; 0x45
   13b8a:	4798      	blx	r3
   13b8c:	2106      	movs	r1, #6
   13b8e:	4d38      	ldr	r5, [pc, #224]	; (13c70 <LORAWAN_SetAttr+0x304>)
   13b90:	2001      	movs	r0, #1
   13b92:	47a8      	blx	r5
   13b94:	0022      	movs	r2, r4
   13b96:	32d6      	adds	r2, #214	; 0xd6
   13b98:	7813      	ldrb	r3, [r2, #0]
   13b9a:	2109      	movs	r1, #9
   13b9c:	4333      	orrs	r3, r6
   13b9e:	2001      	movs	r0, #1
   13ba0:	7013      	strb	r3, [r2, #0]
   13ba2:	47a8      	blx	r5
   13ba4:	2001      	movs	r0, #1
   13ba6:	347c      	adds	r4, #124	; 0x7c
   13ba8:	7823      	ldrb	r3, [r4, #0]
   13baa:	210b      	movs	r1, #11
   13bac:	4383      	bics	r3, r0
   13bae:	7023      	strb	r3, [r4, #0]
   13bb0:	47a8      	blx	r5
   13bb2:	0030      	movs	r0, r6
   13bb4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   13bb6:	780b      	ldrb	r3, [r1, #0]
   13bb8:	2001      	movs	r0, #1
   13bba:	0021      	movs	r1, r4
   13bbc:	2520      	movs	r5, #32
   13bbe:	317c      	adds	r1, #124	; 0x7c
   13bc0:	4003      	ands	r3, r0
   13bc2:	015a      	lsls	r2, r3, #5
   13bc4:	780b      	ldrb	r3, [r1, #0]
   13bc6:	43ab      	bics	r3, r5
   13bc8:	4313      	orrs	r3, r2
   13bca:	700b      	strb	r3, [r1, #0]
   13bcc:	0023      	movs	r3, r4
   13bce:	2200      	movs	r2, #0
   13bd0:	33c2      	adds	r3, #194	; 0xc2
   13bd2:	348c      	adds	r4, #140	; 0x8c
   13bd4:	801a      	strh	r2, [r3, #0]
   13bd6:	7823      	ldrb	r3, [r4, #0]
   13bd8:	3210      	adds	r2, #16
   13bda:	4393      	bics	r3, r2
   13bdc:	7023      	strb	r3, [r4, #0]
   13bde:	210b      	movs	r1, #11
   13be0:	e748      	b.n	13a74 <LORAWAN_SetAttr+0x108>
   13be2:	466a      	mov	r2, sp
   13be4:	780b      	ldrb	r3, [r1, #0]
   13be6:	7013      	strb	r3, [r2, #0]
   13be8:	0022      	movs	r2, r4
   13bea:	32ea      	adds	r2, #234	; 0xea
   13bec:	7812      	ldrb	r2, [r2, #0]
   13bee:	429a      	cmp	r2, r3
   13bf0:	d900      	bls.n	13bf4 <LORAWAN_SetAttr+0x288>
   13bf2:	e739      	b.n	13a68 <LORAWAN_SetAttr+0xfc>
   13bf4:	0022      	movs	r2, r4
   13bf6:	32eb      	adds	r2, #235	; 0xeb
   13bf8:	7812      	ldrb	r2, [r2, #0]
   13bfa:	429a      	cmp	r2, r3
   13bfc:	d200      	bcs.n	13c00 <LORAWAN_SetAttr+0x294>
   13bfe:	e733      	b.n	13a68 <LORAWAN_SetAttr+0xfc>
   13c00:	4669      	mov	r1, sp
   13c02:	2010      	movs	r0, #16
   13c04:	4b1d      	ldr	r3, [pc, #116]	; (13c7c <LORAWAN_SetAttr+0x310>)
   13c06:	4798      	blx	r3
   13c08:	0006      	movs	r6, r0
   13c0a:	2808      	cmp	r0, #8
   13c0c:	d000      	beq.n	13c10 <LORAWAN_SetAttr+0x2a4>
   13c0e:	e72b      	b.n	13a68 <LORAWAN_SetAttr+0xfc>
   13c10:	466b      	mov	r3, sp
   13c12:	210c      	movs	r1, #12
   13c14:	2001      	movs	r0, #1
   13c16:	781b      	ldrb	r3, [r3, #0]
   13c18:	34df      	adds	r4, #223	; 0xdf
   13c1a:	7023      	strb	r3, [r4, #0]
   13c1c:	4b14      	ldr	r3, [pc, #80]	; (13c70 <LORAWAN_SetAttr+0x304>)
   13c1e:	4798      	blx	r3
   13c20:	e7c7      	b.n	13bb2 <LORAWAN_SetAttr+0x246>
   13c22:	466a      	mov	r2, sp
   13c24:	780b      	ldrb	r3, [r1, #0]
   13c26:	201d      	movs	r0, #29
   13c28:	7013      	strb	r3, [r2, #0]
   13c2a:	4669      	mov	r1, sp
   13c2c:	4b13      	ldr	r3, [pc, #76]	; (13c7c <LORAWAN_SetAttr+0x310>)
   13c2e:	4798      	blx	r3
   13c30:	0006      	movs	r6, r0
   13c32:	2808      	cmp	r0, #8
   13c34:	d000      	beq.n	13c38 <LORAWAN_SetAttr+0x2cc>
   13c36:	e717      	b.n	13a68 <LORAWAN_SetAttr+0xfc>
   13c38:	466b      	mov	r3, sp
   13c3a:	781b      	ldrb	r3, [r3, #0]
   13c3c:	34e1      	adds	r4, #225	; 0xe1
   13c3e:	7023      	strb	r3, [r4, #0]
   13c40:	210a      	movs	r1, #10
   13c42:	2000      	movs	r0, #0
   13c44:	e7ea      	b.n	13c1c <LORAWAN_SetAttr+0x2b0>
   13c46:	780b      	ldrb	r3, [r1, #0]
   13c48:	2103      	movs	r1, #3
   13c4a:	34f7      	adds	r4, #247	; 0xf7
   13c4c:	7023      	strb	r3, [r4, #0]
   13c4e:	2000      	movs	r0, #0
   13c50:	e710      	b.n	13a74 <LORAWAN_SetAttr+0x108>
   13c52:	680b      	ldr	r3, [r1, #0]
   13c54:	260a      	movs	r6, #10
   13c56:	1c5a      	adds	r2, r3, #1
   13c58:	d0ab      	beq.n	13bb2 <LORAWAN_SetAttr+0x246>
   13c5a:	2116      	movs	r1, #22
   13c5c:	2000      	movs	r0, #0
   13c5e:	3404      	adds	r4, #4
   13c60:	67e3      	str	r3, [r4, #124]	; 0x7c
   13c62:	4b03      	ldr	r3, [pc, #12]	; (13c70 <LORAWAN_SetAttr+0x304>)
   13c64:	4798      	blx	r3
   13c66:	e738      	b.n	13ada <LORAWAN_SetAttr+0x16e>
   13c68:	20002b5c 	.word	0x20002b5c
   13c6c:	00019d11 	.word	0x00019d11
   13c70:	0000dfe1 	.word	0x0000dfe1
   13c74:	00014bd5 	.word	0x00014bd5
   13c78:	00000221 	.word	0x00000221
   13c7c:	0000d821 	.word	0x0000d821
   13c80:	680b      	ldr	r3, [r1, #0]
   13c82:	260a      	movs	r6, #10
   13c84:	1c5a      	adds	r2, r3, #1
   13c86:	d100      	bne.n	13c8a <LORAWAN_SetAttr+0x31e>
   13c88:	e793      	b.n	13bb2 <LORAWAN_SetAttr+0x246>
   13c8a:	0031      	movs	r1, r6
   13c8c:	3408      	adds	r4, #8
   13c8e:	67e3      	str	r3, [r4, #124]	; 0x7c
   13c90:	2001      	movs	r0, #1
   13c92:	e7e6      	b.n	13c62 <LORAWAN_SetAttr+0x2f6>
   13c94:	0026      	movs	r6, r4
   13c96:	880b      	ldrh	r3, [r1, #0]
   13c98:	36c8      	adds	r6, #200	; 0xc8
   13c9a:	210c      	movs	r1, #12
   13c9c:	2000      	movs	r0, #0
   13c9e:	4d6b      	ldr	r5, [pc, #428]	; (13e4c <LORAWAN_SetAttr+0x4e0>)
   13ca0:	8033      	strh	r3, [r6, #0]
   13ca2:	47a8      	blx	r5
   13ca4:	22fa      	movs	r2, #250	; 0xfa
   13ca6:	8833      	ldrh	r3, [r6, #0]
   13ca8:	0092      	lsls	r2, r2, #2
   13caa:	189b      	adds	r3, r3, r2
   13cac:	34ca      	adds	r4, #202	; 0xca
   13cae:	8023      	strh	r3, [r4, #0]
   13cb0:	210d      	movs	r1, #13
   13cb2:	2000      	movs	r0, #0
   13cb4:	e745      	b.n	13b42 <LORAWAN_SetAttr+0x1d6>
   13cb6:	780b      	ldrb	r3, [r1, #0]
   13cb8:	260a      	movs	r6, #10
   13cba:	2b0f      	cmp	r3, #15
   13cbc:	d900      	bls.n	13cc0 <LORAWAN_SetAttr+0x354>
   13cbe:	e778      	b.n	13bb2 <LORAWAN_SetAttr+0x246>
   13cc0:	3490      	adds	r4, #144	; 0x90
   13cc2:	7023      	strb	r3, [r4, #0]
   13cc4:	e709      	b.n	13ada <LORAWAN_SetAttr+0x16e>
   13cc6:	880b      	ldrh	r3, [r1, #0]
   13cc8:	34cc      	adds	r4, #204	; 0xcc
   13cca:	8023      	strh	r3, [r4, #0]
   13ccc:	210e      	movs	r1, #14
   13cce:	e7be      	b.n	13c4e <LORAWAN_SetAttr+0x2e2>
   13cd0:	880b      	ldrh	r3, [r1, #0]
   13cd2:	34ce      	adds	r4, #206	; 0xce
   13cd4:	8023      	strh	r3, [r4, #0]
   13cd6:	210f      	movs	r1, #15
   13cd8:	e7b9      	b.n	13c4e <LORAWAN_SetAttr+0x2e2>
   13cda:	880b      	ldrh	r3, [r1, #0]
   13cdc:	34d0      	adds	r4, #208	; 0xd0
   13cde:	8023      	strh	r3, [r4, #0]
   13ce0:	2110      	movs	r1, #16
   13ce2:	e7b4      	b.n	13c4e <LORAWAN_SetAttr+0x2e2>
   13ce4:	780b      	ldrb	r3, [r1, #0]
   13ce6:	34d4      	adds	r4, #212	; 0xd4
   13ce8:	7023      	strb	r3, [r4, #0]
   13cea:	2112      	movs	r1, #18
   13cec:	e7af      	b.n	13c4e <LORAWAN_SetAttr+0x2e2>
   13cee:	780b      	ldrb	r3, [r1, #0]
   13cf0:	34d5      	adds	r4, #213	; 0xd5
   13cf2:	7023      	strb	r3, [r4, #0]
   13cf4:	2113      	movs	r1, #19
   13cf6:	e7aa      	b.n	13c4e <LORAWAN_SetAttr+0x2e2>
   13cf8:	880b      	ldrh	r3, [r1, #0]
   13cfa:	34d2      	adds	r4, #210	; 0xd2
   13cfc:	8023      	strh	r3, [r4, #0]
   13cfe:	2111      	movs	r1, #17
   13d00:	e7a5      	b.n	13c4e <LORAWAN_SetAttr+0x2e2>
   13d02:	780b      	ldrb	r3, [r1, #0]
   13d04:	34da      	adds	r4, #218	; 0xda
   13d06:	7023      	strb	r3, [r4, #0]
   13d08:	2115      	movs	r1, #21
   13d0a:	e7a0      	b.n	13c4e <LORAWAN_SetAttr+0x2e2>
   13d0c:	780b      	ldrb	r3, [r1, #0]
   13d0e:	34d9      	adds	r4, #217	; 0xd9
   13d10:	7023      	strb	r3, [r4, #0]
   13d12:	e696      	b.n	13a42 <LORAWAN_SetAttr+0xd6>
   13d14:	780b      	ldrb	r3, [r1, #0]
   13d16:	34e0      	adds	r4, #224	; 0xe0
   13d18:	e7fa      	b.n	13d10 <LORAWAN_SetAttr+0x3a4>
   13d1a:	2001      	movs	r0, #1
   13d1c:	780b      	ldrb	r3, [r1, #0]
   13d1e:	2110      	movs	r1, #16
   13d20:	347c      	adds	r4, #124	; 0x7c
   13d22:	4003      	ands	r3, r0
   13d24:	011a      	lsls	r2, r3, #4
   13d26:	7823      	ldrb	r3, [r4, #0]
   13d28:	438b      	bics	r3, r1
   13d2a:	4313      	orrs	r3, r2
   13d2c:	7023      	strb	r3, [r4, #0]
   13d2e:	3905      	subs	r1, #5
   13d30:	e6a0      	b.n	13a74 <LORAWAN_SetAttr+0x108>
   13d32:	7909      	ldrb	r1, [r1, #4]
   13d34:	7828      	ldrb	r0, [r5, #0]
   13d36:	4b46      	ldr	r3, [pc, #280]	; (13e50 <LORAWAN_SetAttr+0x4e4>)
   13d38:	4798      	blx	r3
   13d3a:	0006      	movs	r6, r0
   13d3c:	e739      	b.n	13bb2 <LORAWAN_SetAttr+0x246>
   13d3e:	7909      	ldrb	r1, [r1, #4]
   13d40:	7828      	ldrb	r0, [r5, #0]
   13d42:	4b44      	ldr	r3, [pc, #272]	; (13e54 <LORAWAN_SetAttr+0x4e8>)
   13d44:	e7f8      	b.n	13d38 <LORAWAN_SetAttr+0x3cc>
   13d46:	7808      	ldrb	r0, [r1, #0]
   13d48:	4b43      	ldr	r3, [pc, #268]	; (13e58 <LORAWAN_SetAttr+0x4ec>)
   13d4a:	6849      	ldr	r1, [r1, #4]
   13d4c:	4798      	blx	r3
   13d4e:	e7f4      	b.n	13d3a <LORAWAN_SetAttr+0x3ce>
   13d50:	7909      	ldrb	r1, [r1, #4]
   13d52:	6828      	ldr	r0, [r5, #0]
   13d54:	4b41      	ldr	r3, [pc, #260]	; (13e5c <LORAWAN_SetAttr+0x4f0>)
   13d56:	4798      	blx	r3
   13d58:	e7ef      	b.n	13d3a <LORAWAN_SetAttr+0x3ce>
   13d5a:	7808      	ldrb	r0, [r1, #0]
   13d5c:	4b40      	ldr	r3, [pc, #256]	; (13e60 <LORAWAN_SetAttr+0x4f4>)
   13d5e:	4798      	blx	r3
   13d60:	e7eb      	b.n	13d3a <LORAWAN_SetAttr+0x3ce>
   13d62:	8808      	ldrh	r0, [r1, #0]
   13d64:	4b3f      	ldr	r3, [pc, #252]	; (13e64 <LORAWAN_SetAttr+0x4f8>)
   13d66:	4798      	blx	r3
   13d68:	e66b      	b.n	13a42 <LORAWAN_SetAttr+0xd6>
   13d6a:	4b3f      	ldr	r3, [pc, #252]	; (13e68 <LORAWAN_SetAttr+0x4fc>)
   13d6c:	6019      	str	r1, [r3, #0]
   13d6e:	e67b      	b.n	13a68 <LORAWAN_SetAttr+0xfc>
   13d70:	7809      	ldrb	r1, [r1, #0]
   13d72:	7868      	ldrb	r0, [r5, #1]
   13d74:	4b3d      	ldr	r3, [pc, #244]	; (13e6c <LORAWAN_SetAttr+0x500>)
   13d76:	4798      	blx	r3
   13d78:	e7df      	b.n	13d3a <LORAWAN_SetAttr+0x3ce>
   13d7a:	7809      	ldrb	r1, [r1, #0]
   13d7c:	4b3c      	ldr	r3, [pc, #240]	; (13e70 <LORAWAN_SetAttr+0x504>)
   13d7e:	1c68      	adds	r0, r5, #1
   13d80:	4798      	blx	r3
   13d82:	e7da      	b.n	13d3a <LORAWAN_SetAttr+0x3ce>
   13d84:	7809      	ldrb	r1, [r1, #0]
   13d86:	1c68      	adds	r0, r5, #1
   13d88:	4b3a      	ldr	r3, [pc, #232]	; (13e74 <LORAWAN_SetAttr+0x508>)
   13d8a:	e7f9      	b.n	13d80 <LORAWAN_SetAttr+0x414>
   13d8c:	7809      	ldrb	r1, [r1, #0]
   13d8e:	6868      	ldr	r0, [r5, #4]
   13d90:	4b39      	ldr	r3, [pc, #228]	; (13e78 <LORAWAN_SetAttr+0x50c>)
   13d92:	e7f5      	b.n	13d80 <LORAWAN_SetAttr+0x414>
   13d94:	7809      	ldrb	r1, [r1, #0]
   13d96:	6868      	ldr	r0, [r5, #4]
   13d98:	4b38      	ldr	r3, [pc, #224]	; (13e7c <LORAWAN_SetAttr+0x510>)
   13d9a:	e7f1      	b.n	13d80 <LORAWAN_SetAttr+0x414>
   13d9c:	7809      	ldrb	r1, [r1, #0]
   13d9e:	6868      	ldr	r0, [r5, #4]
   13da0:	4b37      	ldr	r3, [pc, #220]	; (13e80 <LORAWAN_SetAttr+0x514>)
   13da2:	e7ed      	b.n	13d80 <LORAWAN_SetAttr+0x414>
   13da4:	7809      	ldrb	r1, [r1, #0]
   13da6:	6868      	ldr	r0, [r5, #4]
   13da8:	4b36      	ldr	r3, [pc, #216]	; (13e84 <LORAWAN_SetAttr+0x518>)
   13daa:	e7e9      	b.n	13d80 <LORAWAN_SetAttr+0x414>
   13dac:	7809      	ldrb	r1, [r1, #0]
   13dae:	7868      	ldrb	r0, [r5, #1]
   13db0:	4b35      	ldr	r3, [pc, #212]	; (13e88 <LORAWAN_SetAttr+0x51c>)
   13db2:	e7e0      	b.n	13d76 <LORAWAN_SetAttr+0x40a>
   13db4:	7809      	ldrb	r1, [r1, #0]
   13db6:	7868      	ldrb	r0, [r5, #1]
   13db8:	4b34      	ldr	r3, [pc, #208]	; (13e8c <LORAWAN_SetAttr+0x520>)
   13dba:	e7dc      	b.n	13d76 <LORAWAN_SetAttr+0x40a>
   13dbc:	2300      	movs	r3, #0
   13dbe:	466a      	mov	r2, sp
   13dc0:	7809      	ldrb	r1, [r1, #0]
   13dc2:	7013      	strb	r3, [r2, #0]
   13dc4:	4299      	cmp	r1, r3
   13dc6:	d014      	beq.n	13df2 <LORAWAN_SetAttr+0x486>
   13dc8:	0022      	movs	r2, r4
   13dca:	2102      	movs	r1, #2
   13dcc:	32ff      	adds	r2, #255	; 0xff
   13dce:	7c53      	ldrb	r3, [r2, #17]
   13dd0:	420b      	tst	r3, r1
   13dd2:	d001      	beq.n	13dd8 <LORAWAN_SetAttr+0x46c>
   13dd4:	438b      	bics	r3, r1
   13dd6:	7453      	strb	r3, [r2, #17]
   13dd8:	2220      	movs	r2, #32
   13dda:	34ff      	adds	r4, #255	; 0xff
   13ddc:	7c63      	ldrb	r3, [r4, #17]
   13dde:	4213      	tst	r3, r2
   13de0:	d100      	bne.n	13de4 <LORAWAN_SetAttr+0x478>
   13de2:	e62e      	b.n	13a42 <LORAWAN_SetAttr+0xd6>
   13de4:	4393      	bics	r3, r2
   13de6:	7463      	strb	r3, [r4, #17]
   13de8:	4669      	mov	r1, sp
   13dea:	4b29      	ldr	r3, [pc, #164]	; (13e90 <LORAWAN_SetAttr+0x524>)
   13dec:	2039      	movs	r0, #57	; 0x39
   13dee:	4798      	blx	r3
   13df0:	e627      	b.n	13a42 <LORAWAN_SetAttr+0xd6>
   13df2:	4a28      	ldr	r2, [pc, #160]	; (13e94 <LORAWAN_SetAttr+0x528>)
   13df4:	4b28      	ldr	r3, [pc, #160]	; (13e98 <LORAWAN_SetAttr+0x52c>)
   13df6:	200e      	movs	r0, #14
   13df8:	4798      	blx	r3
   13dfa:	e622      	b.n	13a42 <LORAWAN_SetAttr+0xd6>
   13dfc:	466b      	mov	r3, sp
   13dfe:	780a      	ldrb	r2, [r1, #0]
   13e00:	34ff      	adds	r4, #255	; 0xff
   13e02:	701a      	strb	r2, [r3, #0]
   13e04:	2320      	movs	r3, #32
   13e06:	2a00      	cmp	r2, #0
   13e08:	d007      	beq.n	13e1a <LORAWAN_SetAttr+0x4ae>
   13e0a:	7c62      	ldrb	r2, [r4, #17]
   13e0c:	4313      	orrs	r3, r2
   13e0e:	7463      	strb	r3, [r4, #17]
   13e10:	4669      	mov	r1, sp
   13e12:	4b1f      	ldr	r3, [pc, #124]	; (13e90 <LORAWAN_SetAttr+0x524>)
   13e14:	2039      	movs	r0, #57	; 0x39
   13e16:	4798      	blx	r3
   13e18:	e78f      	b.n	13d3a <LORAWAN_SetAttr+0x3ce>
   13e1a:	7c62      	ldrb	r2, [r4, #17]
   13e1c:	260a      	movs	r6, #10
   13e1e:	421a      	tst	r2, r3
   13e20:	d100      	bne.n	13e24 <LORAWAN_SetAttr+0x4b8>
   13e22:	e6c6      	b.n	13bb2 <LORAWAN_SetAttr+0x246>
   13e24:	439a      	bics	r2, r3
   13e26:	7462      	strb	r2, [r4, #17]
   13e28:	e7f2      	b.n	13e10 <LORAWAN_SetAttr+0x4a4>
   13e2a:	780b      	ldrb	r3, [r1, #0]
   13e2c:	260a      	movs	r6, #10
   13e2e:	2b08      	cmp	r3, #8
   13e30:	d900      	bls.n	13e34 <LORAWAN_SetAttr+0x4c8>
   13e32:	e6be      	b.n	13bb2 <LORAWAN_SetAttr+0x246>
   13e34:	2288      	movs	r2, #136	; 0x88
   13e36:	0092      	lsls	r2, r2, #2
   13e38:	54a3      	strb	r3, [r4, r2]
   13e3a:	210d      	movs	r1, #13
   13e3c:	e728      	b.n	13c90 <LORAWAN_SetAttr+0x324>
   13e3e:	780a      	ldrb	r2, [r1, #0]
   13e40:	4b16      	ldr	r3, [pc, #88]	; (13e9c <LORAWAN_SetAttr+0x530>)
   13e42:	54e2      	strb	r2, [r4, r3]
   13e44:	e5fd      	b.n	13a42 <LORAWAN_SetAttr+0xd6>
   13e46:	4b16      	ldr	r3, [pc, #88]	; (13ea0 <LORAWAN_SetAttr+0x534>)
   13e48:	4798      	blx	r3
   13e4a:	e776      	b.n	13d3a <LORAWAN_SetAttr+0x3ce>
   13e4c:	0000dfe1 	.word	0x0000dfe1
   13e50:	00012e01 	.word	0x00012e01
   13e54:	00012d91 	.word	0x00012d91
   13e58:	000118f1 	.word	0x000118f1
   13e5c:	000118b5 	.word	0x000118b5
   13e60:	000138f1 	.word	0x000138f1
   13e64:	000106e1 	.word	0x000106e1
   13e68:	20002ea0 	.word	0x20002ea0
   13e6c:	000143bd 	.word	0x000143bd
   13e70:	00014615 	.word	0x00014615
   13e74:	00014661 	.word	0x00014661
   13e78:	000145cd 	.word	0x000145cd
   13e7c:	000146ad 	.word	0x000146ad
   13e80:	000146cd 	.word	0x000146cd
   13e84:	000146e9 	.word	0x000146e9
   13e88:	0001471d 	.word	0x0001471d
   13e8c:	00014755 	.word	0x00014755
   13e90:	0000d92d 	.word	0x0000d92d
   13e94:	20002c6c 	.word	0x20002c6c
   13e98:	0000d805 	.word	0x0000d805
   13e9c:	00000221 	.word	0x00000221
   13ea0:	0001077d 	.word	0x0001077d

00013ea4 <LORAWAN_Reset>:
   13ea4:	b5f0      	push	{r4, r5, r6, r7, lr}
   13ea6:	b087      	sub	sp, #28
   13ea8:	ab02      	add	r3, sp, #8
   13eaa:	1ddd      	adds	r5, r3, #7
   13eac:	23ff      	movs	r3, #255	; 0xff
   13eae:	4c83      	ldr	r4, [pc, #524]	; (140bc <LORAWAN_Reset+0x218>)
   13eb0:	702b      	strb	r3, [r5, #0]
   13eb2:	0023      	movs	r3, r4
   13eb4:	9001      	str	r0, [sp, #4]
   13eb6:	33ef      	adds	r3, #239	; 0xef
   13eb8:	781b      	ldrb	r3, [r3, #0]
   13eba:	2b00      	cmp	r3, #0
   13ebc:	d001      	beq.n	13ec2 <LORAWAN_Reset+0x1e>
   13ebe:	4b80      	ldr	r3, [pc, #512]	; (140c0 <LORAWAN_Reset+0x21c>)
   13ec0:	4798      	blx	r3
   13ec2:	002a      	movs	r2, r5
   13ec4:	4b7f      	ldr	r3, [pc, #508]	; (140c4 <LORAWAN_Reset+0x220>)
   13ec6:	2100      	movs	r1, #0
   13ec8:	2023      	movs	r0, #35	; 0x23
   13eca:	4798      	blx	r3
   13ecc:	782b      	ldrb	r3, [r5, #0]
   13ece:	9a01      	ldr	r2, [sp, #4]
   13ed0:	4293      	cmp	r3, r2
   13ed2:	d001      	beq.n	13ed8 <LORAWAN_Reset+0x34>
   13ed4:	4b7c      	ldr	r3, [pc, #496]	; (140c8 <LORAWAN_Reset+0x224>)
   13ed6:	4798      	blx	r3
   13ed8:	238c      	movs	r3, #140	; 0x8c
   13eda:	0021      	movs	r1, r4
   13edc:	4a7b      	ldr	r2, [pc, #492]	; (140cc <LORAWAN_Reset+0x228>)
   13ede:	009b      	lsls	r3, r3, #2
   13ee0:	50e2      	str	r2, [r4, r3]
   13ee2:	3bfd      	subs	r3, #253	; 0xfd
   13ee4:	31f7      	adds	r1, #247	; 0xf7
   13ee6:	3bff      	subs	r3, #255	; 0xff
   13ee8:	700b      	strb	r3, [r1, #0]
   13eea:	2000      	movs	r0, #0
   13eec:	4b78      	ldr	r3, [pc, #480]	; (140d0 <LORAWAN_Reset+0x22c>)
   13eee:	4798      	blx	r3
   13ef0:	0023      	movs	r3, r4
   13ef2:	2201      	movs	r2, #1
   13ef4:	33f4      	adds	r3, #244	; 0xf4
   13ef6:	701a      	strb	r2, [r3, #0]
   13ef8:	0023      	movs	r3, r4
   13efa:	2205      	movs	r2, #5
   13efc:	33f5      	adds	r3, #245	; 0xf5
   13efe:	701a      	strb	r2, [r3, #0]
   13f00:	0023      	movs	r3, r4
   13f02:	32fa      	adds	r2, #250	; 0xfa
   13f04:	33dd      	adds	r3, #221	; 0xdd
   13f06:	701a      	strb	r2, [r3, #0]
   13f08:	0023      	movs	r3, r4
   13f0a:	2500      	movs	r5, #0
   13f0c:	33de      	adds	r3, #222	; 0xde
   13f0e:	701d      	strb	r5, [r3, #0]
   13f10:	0023      	movs	r3, r4
   13f12:	33c6      	adds	r3, #198	; 0xc6
   13f14:	801d      	strh	r5, [r3, #0]
   13f16:	0023      	movs	r3, r4
   13f18:	3308      	adds	r3, #8
   13f1a:	67dd      	str	r5, [r3, #124]	; 0x7c
   13f1c:	1d23      	adds	r3, r4, #4
   13f1e:	67dd      	str	r5, [r3, #124]	; 0x7c
   13f20:	0023      	movs	r3, r4
   13f22:	33c4      	adds	r3, #196	; 0xc4
   13f24:	801d      	strh	r5, [r3, #0]
   13f26:	0023      	movs	r3, r4
   13f28:	3390      	adds	r3, #144	; 0x90
   13f2a:	701d      	strb	r5, [r3, #0]
   13f2c:	0023      	movs	r3, r4
   13f2e:	33c2      	adds	r3, #194	; 0xc2
   13f30:	801d      	strh	r5, [r3, #0]
   13f32:	0023      	movs	r3, r4
   13f34:	33ed      	adds	r3, #237	; 0xed
   13f36:	701d      	strb	r5, [r3, #0]
   13f38:	0023      	movs	r3, r4
   13f3a:	33ee      	adds	r3, #238	; 0xee
   13f3c:	701d      	strb	r5, [r3, #0]
   13f3e:	0023      	movs	r3, r4
   13f40:	3af9      	subs	r2, #249	; 0xf9
   13f42:	33f8      	adds	r3, #248	; 0xf8
   13f44:	601a      	str	r2, [r3, #0]
   13f46:	0023      	movs	r3, r4
   13f48:	33fc      	adds	r3, #252	; 0xfc
   13f4a:	601d      	str	r5, [r3, #0]
   13f4c:	0023      	movs	r3, r4
   13f4e:	33fe      	adds	r3, #254	; 0xfe
   13f50:	829d      	strh	r5, [r3, #20]
   13f52:	82dd      	strh	r5, [r3, #22]
   13f54:	320a      	adds	r2, #10
   13f56:	0029      	movs	r1, r5
   13f58:	4b5e      	ldr	r3, [pc, #376]	; (140d4 <LORAWAN_Reset+0x230>)
   13f5a:	485f      	ldr	r0, [pc, #380]	; (140d8 <LORAWAN_Reset+0x234>)
   13f5c:	4798      	blx	r3
   13f5e:	2385      	movs	r3, #133	; 0x85
   13f60:	2201      	movs	r2, #1
   13f62:	2607      	movs	r6, #7
   13f64:	009b      	lsls	r3, r3, #2
   13f66:	54e2      	strb	r2, [r4, r3]
   13f68:	0029      	movs	r1, r5
   13f6a:	0032      	movs	r2, r6
   13f6c:	4b59      	ldr	r3, [pc, #356]	; (140d4 <LORAWAN_Reset+0x230>)
   13f6e:	485b      	ldr	r0, [pc, #364]	; (140dc <LORAWAN_Reset+0x238>)
   13f70:	4798      	blx	r3
   13f72:	2388      	movs	r3, #136	; 0x88
   13f74:	2201      	movs	r2, #1
   13f76:	009b      	lsls	r3, r3, #2
   13f78:	54e2      	strb	r2, [r4, r3]
   13f7a:	0023      	movs	r3, r4
   13f7c:	338c      	adds	r3, #140	; 0x8c
   13f7e:	801d      	strh	r5, [r3, #0]
   13f80:	0023      	movs	r3, r4
   13f82:	33da      	adds	r3, #218	; 0xda
   13f84:	701e      	strb	r6, [r3, #0]
   13f86:	0023      	movs	r3, r4
   13f88:	33d9      	adds	r3, #217	; 0xd9
   13f8a:	701d      	strb	r5, [r3, #0]
   13f8c:	0023      	movs	r3, r4
   13f8e:	33dc      	adds	r3, #220	; 0xdc
   13f90:	701d      	strb	r5, [r3, #0]
   13f92:	0023      	movs	r3, r4
   13f94:	33db      	adds	r3, #219	; 0xdb
   13f96:	701d      	strb	r5, [r3, #0]
   13f98:	9801      	ldr	r0, [sp, #4]
   13f9a:	4b51      	ldr	r3, [pc, #324]	; (140e0 <LORAWAN_Reset+0x23c>)
   13f9c:	67e5      	str	r5, [r4, #124]	; 0x7c
   13f9e:	4798      	blx	r3
   13fa0:	0007      	movs	r7, r0
   13fa2:	2808      	cmp	r0, #8
   13fa4:	d000      	beq.n	13fa8 <LORAWAN_Reset+0x104>
   13fa6:	e086      	b.n	140b6 <LORAWAN_Reset+0x212>
   13fa8:	4e4e      	ldr	r6, [pc, #312]	; (140e4 <LORAWAN_Reset+0x240>)
   13faa:	4a4f      	ldr	r2, [pc, #316]	; (140e8 <LORAWAN_Reset+0x244>)
   13fac:	0029      	movs	r1, r5
   13fae:	47b0      	blx	r6
   13fb0:	4a4e      	ldr	r2, [pc, #312]	; (140ec <LORAWAN_Reset+0x248>)
   13fb2:	0029      	movs	r1, r5
   13fb4:	200e      	movs	r0, #14
   13fb6:	47b0      	blx	r6
   13fb8:	0023      	movs	r3, r4
   13fba:	4a4d      	ldr	r2, [pc, #308]	; (140f0 <LORAWAN_Reset+0x24c>)
   13fbc:	33e0      	adds	r3, #224	; 0xe0
   13fbe:	0029      	movs	r1, r5
   13fc0:	2006      	movs	r0, #6
   13fc2:	701d      	strb	r5, [r3, #0]
   13fc4:	47b0      	blx	r6
   13fc6:	4b4b      	ldr	r3, [pc, #300]	; (140f4 <LORAWAN_Reset+0x250>)
   13fc8:	4798      	blx	r3
   13fca:	466a      	mov	r2, sp
   13fcc:	0023      	movs	r3, r4
   13fce:	7912      	ldrb	r2, [r2, #4]
   13fd0:	33f6      	adds	r3, #246	; 0xf6
   13fd2:	701a      	strb	r2, [r3, #0]
   13fd4:	0029      	movs	r1, r5
   13fd6:	4b48      	ldr	r3, [pc, #288]	; (140f8 <LORAWAN_Reset+0x254>)
   13fd8:	0028      	movs	r0, r5
   13fda:	4798      	blx	r3
   13fdc:	2210      	movs	r2, #16
   13fde:	34ff      	adds	r4, #255	; 0xff
   13fe0:	7c63      	ldrb	r3, [r4, #17]
   13fe2:	4213      	tst	r3, r2
   13fe4:	d006      	beq.n	13ff4 <LORAWAN_Reset+0x150>
   13fe6:	ab02      	add	r3, sp, #8
   13fe8:	1d99      	adds	r1, r3, #6
   13fea:	2301      	movs	r3, #1
   13fec:	0038      	movs	r0, r7
   13fee:	700b      	strb	r3, [r1, #0]
   13ff0:	4b37      	ldr	r3, [pc, #220]	; (140d0 <LORAWAN_Reset+0x22c>)
   13ff2:	4798      	blx	r3
   13ff4:	4b41      	ldr	r3, [pc, #260]	; (140fc <LORAWAN_Reset+0x258>)
   13ff6:	4942      	ldr	r1, [pc, #264]	; (14100 <LORAWAN_Reset+0x25c>)
   13ff8:	201e      	movs	r0, #30
   13ffa:	4798      	blx	r3
   13ffc:	4c2f      	ldr	r4, [pc, #188]	; (140bc <LORAWAN_Reset+0x218>)
   13ffe:	0023      	movs	r3, r4
   14000:	33ff      	adds	r3, #255	; 0xff
   14002:	7c5b      	ldrb	r3, [r3, #17]
   14004:	075b      	lsls	r3, r3, #29
   14006:	d507      	bpl.n	14018 <LORAWAN_Reset+0x174>
   14008:	2100      	movs	r1, #0
   1400a:	aa04      	add	r2, sp, #16
   1400c:	2032      	movs	r0, #50	; 0x32
   1400e:	47b0      	blx	r6
   14010:	a904      	add	r1, sp, #16
   14012:	2027      	movs	r0, #39	; 0x27
   14014:	4b3b      	ldr	r3, [pc, #236]	; (14104 <LORAWAN_Reset+0x260>)
   14016:	4798      	blx	r3
   14018:	4a3b      	ldr	r2, [pc, #236]	; (14108 <LORAWAN_Reset+0x264>)
   1401a:	2100      	movs	r1, #0
   1401c:	2009      	movs	r0, #9
   1401e:	47b0      	blx	r6
   14020:	4a3a      	ldr	r2, [pc, #232]	; (1410c <LORAWAN_Reset+0x268>)
   14022:	2100      	movs	r1, #0
   14024:	200a      	movs	r0, #10
   14026:	47b0      	blx	r6
   14028:	4a39      	ldr	r2, [pc, #228]	; (14110 <LORAWAN_Reset+0x26c>)
   1402a:	2100      	movs	r1, #0
   1402c:	2036      	movs	r0, #54	; 0x36
   1402e:	47b0      	blx	r6
   14030:	ad04      	add	r5, sp, #16
   14032:	4a38      	ldr	r2, [pc, #224]	; (14114 <LORAWAN_Reset+0x270>)
   14034:	2100      	movs	r1, #0
   14036:	2037      	movs	r0, #55	; 0x37
   14038:	47b0      	blx	r6
   1403a:	002a      	movs	r2, r5
   1403c:	2100      	movs	r1, #0
   1403e:	2014      	movs	r0, #20
   14040:	47b0      	blx	r6
   14042:	0023      	movs	r3, r4
   14044:	782a      	ldrb	r2, [r5, #0]
   14046:	33ea      	adds	r3, #234	; 0xea
   14048:	701a      	strb	r2, [r3, #0]
   1404a:	0023      	movs	r3, r4
   1404c:	786a      	ldrb	r2, [r5, #1]
   1404e:	33eb      	adds	r3, #235	; 0xeb
   14050:	701a      	strb	r2, [r3, #0]
   14052:	0023      	movs	r3, r4
   14054:	2500      	movs	r5, #0
   14056:	33d6      	adds	r3, #214	; 0xd6
   14058:	801d      	strh	r5, [r3, #0]
   1405a:	2265      	movs	r2, #101	; 0x65
   1405c:	0029      	movs	r1, r5
   1405e:	0020      	movs	r0, r4
   14060:	4b1c      	ldr	r3, [pc, #112]	; (140d4 <LORAWAN_Reset+0x230>)
   14062:	4798      	blx	r3
   14064:	0023      	movs	r3, r4
   14066:	22fa      	movs	r2, #250	; 0xfa
   14068:	33c8      	adds	r3, #200	; 0xc8
   1406a:	0092      	lsls	r2, r2, #2
   1406c:	801a      	strh	r2, [r3, #0]
   1406e:	0022      	movs	r2, r4
   14070:	23fa      	movs	r3, #250	; 0xfa
   14072:	32ca      	adds	r2, #202	; 0xca
   14074:	00db      	lsls	r3, r3, #3
   14076:	8013      	strh	r3, [r2, #0]
   14078:	0022      	movs	r2, r4
   1407a:	4927      	ldr	r1, [pc, #156]	; (14118 <LORAWAN_Reset+0x274>)
   1407c:	32cc      	adds	r2, #204	; 0xcc
   1407e:	8011      	strh	r1, [r2, #0]
   14080:	0022      	movs	r2, r4
   14082:	4926      	ldr	r1, [pc, #152]	; (1411c <LORAWAN_Reset+0x278>)
   14084:	32ce      	adds	r2, #206	; 0xce
   14086:	8011      	strh	r1, [r2, #0]
   14088:	0022      	movs	r2, r4
   1408a:	32d2      	adds	r2, #210	; 0xd2
   1408c:	8013      	strh	r3, [r2, #0]
   1408e:	0023      	movs	r3, r4
   14090:	2220      	movs	r2, #32
   14092:	33d5      	adds	r3, #213	; 0xd5
   14094:	701a      	strb	r2, [r3, #0]
   14096:	0023      	movs	r3, r4
   14098:	1892      	adds	r2, r2, r2
   1409a:	33d4      	adds	r3, #212	; 0xd4
   1409c:	701a      	strb	r2, [r3, #0]
   1409e:	2380      	movs	r3, #128	; 0x80
   140a0:	34d0      	adds	r4, #208	; 0xd0
   140a2:	01db      	lsls	r3, r3, #7
   140a4:	8023      	strh	r3, [r4, #0]
   140a6:	0028      	movs	r0, r5
   140a8:	4b1d      	ldr	r3, [pc, #116]	; (14120 <LORAWAN_Reset+0x27c>)
   140aa:	4798      	blx	r3
   140ac:	4b1d      	ldr	r3, [pc, #116]	; (14124 <LORAWAN_Reset+0x280>)
   140ae:	4798      	blx	r3
   140b0:	0038      	movs	r0, r7
   140b2:	b007      	add	sp, #28
   140b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   140b6:	270a      	movs	r7, #10
   140b8:	e7fa      	b.n	140b0 <LORAWAN_Reset+0x20c>
   140ba:	46c0      	nop			; (mov r8, r8)
   140bc:	20002b5c 	.word	0x20002b5c
   140c0:	0000fd91 	.word	0x0000fd91
   140c4:	00011929 	.word	0x00011929
   140c8:	0000da81 	.word	0x0000da81
   140cc:	01050000 	.word	0x01050000
   140d0:	00014bd5 	.word	0x00014bd5
   140d4:	00019e35 	.word	0x00019e35
   140d8:	20002c5c 	.word	0x20002c5c
   140dc:	20002d73 	.word	0x20002d73
   140e0:	0000d9a1 	.word	0x0000d9a1
   140e4:	0000d805 	.word	0x0000d805
   140e8:	20002bc5 	.word	0x20002bc5
   140ec:	20002c6c 	.word	0x20002c6c
   140f0:	20002c48 	.word	0x20002c48
   140f4:	00014dd1 	.word	0x00014dd1
   140f8:	0000dfe1 	.word	0x0000dfe1
   140fc:	00014ae5 	.word	0x00014ae5
   14100:	20002d7b 	.word	0x20002d7b
   14104:	0001396d 	.word	0x0001396d
   14108:	20002bca 	.word	0x20002bca
   1410c:	20002bc6 	.word	0x20002bc6
   14110:	20002c3d 	.word	0x20002c3d
   14114:	20002c3b 	.word	0x20002c3b
   14118:	00001388 	.word	0x00001388
   1411c:	00001770 	.word	0x00001770
   14120:	000106e1 	.word	0x000106e1
   14124:	00014369 	.word	0x00014369

00014128 <LORAWAN_ReadyToSleep>:
   14128:	4b08      	ldr	r3, [pc, #32]	; (1414c <LORAWAN_ReadyToSleep+0x24>)
   1412a:	001a      	movs	r2, r3
   1412c:	32f4      	adds	r2, #244	; 0xf4
   1412e:	7812      	ldrb	r2, [r2, #0]
   14130:	2a01      	cmp	r2, #1
   14132:	d002      	beq.n	1413a <LORAWAN_ReadyToSleep+0x12>
   14134:	2000      	movs	r0, #0
   14136:	2a04      	cmp	r2, #4
   14138:	d106      	bne.n	14148 <LORAWAN_ReadyToSleep+0x20>
   1413a:	337c      	adds	r3, #124	; 0x7c
   1413c:	7818      	ldrb	r0, [r3, #0]
   1413e:	230e      	movs	r3, #14
   14140:	4018      	ands	r0, r3
   14142:	4243      	negs	r3, r0
   14144:	4158      	adcs	r0, r3
   14146:	b2c0      	uxtb	r0, r0
   14148:	4770      	bx	lr
   1414a:	46c0      	nop			; (mov r8, r8)
   1414c:	20002b5c 	.word	0x20002b5c

00014150 <LorawanClasscUlAckTimerCallback>:
   14150:	2102      	movs	r1, #2
   14152:	4b03      	ldr	r3, [pc, #12]	; (14160 <LorawanClasscUlAckTimerCallback+0x10>)
   14154:	338c      	adds	r3, #140	; 0x8c
   14156:	781a      	ldrb	r2, [r3, #0]
   14158:	438a      	bics	r2, r1
   1415a:	701a      	strb	r2, [r3, #0]
   1415c:	4770      	bx	lr
   1415e:	46c0      	nop			; (mov r8, r8)
   14160:	20002b5c 	.word	0x20002b5c

00014164 <LorawanClasscValidateSend>:
   14164:	2385      	movs	r3, #133	; 0x85
   14166:	b510      	push	{r4, lr}
   14168:	4c0a      	ldr	r4, [pc, #40]	; (14194 <LorawanClasscValidateSend+0x30>)
   1416a:	009b      	lsls	r3, r3, #2
   1416c:	5ce3      	ldrb	r3, [r4, r3]
   1416e:	2b00      	cmp	r3, #0
   14170:	d008      	beq.n	14184 <LorawanClasscValidateSend+0x20>
   14172:	220e      	movs	r2, #14
   14174:	347c      	adds	r4, #124	; 0x7c
   14176:	7823      	ldrb	r3, [r4, #0]
   14178:	2008      	movs	r0, #8
   1417a:	4013      	ands	r3, r2
   1417c:	2b02      	cmp	r3, #2
   1417e:	d100      	bne.n	14182 <LorawanClasscValidateSend+0x1e>
   14180:	2011      	movs	r0, #17
   14182:	bd10      	pop	{r4, pc}
   14184:	0023      	movs	r3, r4
   14186:	33ff      	adds	r3, #255	; 0xff
   14188:	7f58      	ldrb	r0, [r3, #29]
   1418a:	4b03      	ldr	r3, [pc, #12]	; (14198 <LorawanClasscValidateSend+0x34>)
   1418c:	4798      	blx	r3
   1418e:	2800      	cmp	r0, #0
   14190:	d1ef      	bne.n	14172 <LorawanClasscValidateSend+0xe>
   14192:	e7f5      	b.n	14180 <LorawanClasscValidateSend+0x1c>
   14194:	20002b5c 	.word	0x20002b5c
   14198:	0000eea9 	.word	0x0000eea9

0001419c <LorawanClasscPause>:
   1419c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1419e:	4c16      	ldr	r4, [pc, #88]	; (141f8 <LorawanClasscPause+0x5c>)
   141a0:	220e      	movs	r2, #14
   141a2:	0023      	movs	r3, r4
   141a4:	337c      	adds	r3, #124	; 0x7c
   141a6:	781b      	ldrb	r3, [r3, #0]
   141a8:	4013      	ands	r3, r2
   141aa:	2b0a      	cmp	r3, #10
   141ac:	d121      	bne.n	141f2 <LorawanClasscPause+0x56>
   141ae:	2385      	movs	r3, #133	; 0x85
   141b0:	009b      	lsls	r3, r3, #2
   141b2:	5ce3      	ldrb	r3, [r4, r3]
   141b4:	2b00      	cmp	r3, #0
   141b6:	d00c      	beq.n	141d2 <LorawanClasscPause+0x36>
   141b8:	2301      	movs	r3, #1
   141ba:	a801      	add	r0, sp, #4
   141bc:	7003      	strb	r3, [r0, #0]
   141be:	4b0f      	ldr	r3, [pc, #60]	; (141fc <LorawanClasscPause+0x60>)
   141c0:	4798      	blx	r3
   141c2:	220e      	movs	r2, #14
   141c4:	2001      	movs	r0, #1
   141c6:	347c      	adds	r4, #124	; 0x7c
   141c8:	7823      	ldrb	r3, [r4, #0]
   141ca:	4240      	negs	r0, r0
   141cc:	4393      	bics	r3, r2
   141ce:	7023      	strb	r3, [r4, #0]
   141d0:	e007      	b.n	141e2 <LorawanClasscPause+0x46>
   141d2:	0023      	movs	r3, r4
   141d4:	33e8      	adds	r3, #232	; 0xe8
   141d6:	7818      	ldrb	r0, [r3, #0]
   141d8:	4d09      	ldr	r5, [pc, #36]	; (14200 <LorawanClasscPause+0x64>)
   141da:	47a8      	blx	r5
   141dc:	2800      	cmp	r0, #0
   141de:	d001      	beq.n	141e4 <LorawanClasscPause+0x48>
   141e0:	2000      	movs	r0, #0
   141e2:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
   141e4:	0023      	movs	r3, r4
   141e6:	33ff      	adds	r3, #255	; 0xff
   141e8:	7f58      	ldrb	r0, [r3, #29]
   141ea:	47a8      	blx	r5
   141ec:	2800      	cmp	r0, #0
   141ee:	d0e8      	beq.n	141c2 <LorawanClasscPause+0x26>
   141f0:	e7f6      	b.n	141e0 <LorawanClasscPause+0x44>
   141f2:	2b00      	cmp	r3, #0
   141f4:	d0e5      	beq.n	141c2 <LorawanClasscPause+0x26>
   141f6:	e7f3      	b.n	141e0 <LorawanClasscPause+0x44>
   141f8:	20002b5c 	.word	0x20002b5c
   141fc:	00015dd9 	.word	0x00015dd9
   14200:	0000eea9 	.word	0x0000eea9

00014204 <LorawanClasscReceiveWindow1Callback>:
   14204:	2301      	movs	r3, #1
   14206:	b507      	push	{r0, r1, r2, lr}
   14208:	a801      	add	r0, sp, #4
   1420a:	7003      	strb	r3, [r0, #0]
   1420c:	4b01      	ldr	r3, [pc, #4]	; (14214 <LorawanClasscReceiveWindow1Callback+0x10>)
   1420e:	4798      	blx	r3
   14210:	bd07      	pop	{r0, r1, r2, pc}
   14212:	46c0      	nop			; (mov r8, r8)
   14214:	00015dd9 	.word	0x00015dd9

00014218 <LorawanClasscRxDone>:
   14218:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1421a:	221f      	movs	r2, #31
   1421c:	7803      	ldrb	r3, [r0, #0]
   1421e:	4c13      	ldr	r4, [pc, #76]	; (1426c <LorawanClasscRxDone+0x54>)
   14220:	4393      	bics	r3, r2
   14222:	2ba0      	cmp	r3, #160	; 0xa0
   14224:	d10c      	bne.n	14240 <LorawanClasscRxDone+0x28>
   14226:	0025      	movs	r5, r4
   14228:	35ff      	adds	r5, #255	; 0xff
   1422a:	7f68      	ldrb	r0, [r5, #29]
   1422c:	4b10      	ldr	r3, [pc, #64]	; (14270 <LorawanClasscRxDone+0x58>)
   1422e:	4798      	blx	r3
   14230:	1e02      	subs	r2, r0, #0
   14232:	d014      	beq.n	1425e <LorawanClasscRxDone+0x46>
   14234:	0022      	movs	r2, r4
   14236:	2102      	movs	r1, #2
   14238:	328c      	adds	r2, #140	; 0x8c
   1423a:	7813      	ldrb	r3, [r2, #0]
   1423c:	438b      	bics	r3, r1
   1423e:	7013      	strb	r3, [r2, #0]
   14240:	347c      	adds	r4, #124	; 0x7c
   14242:	7823      	ldrb	r3, [r4, #0]
   14244:	220e      	movs	r2, #14
   14246:	0019      	movs	r1, r3
   14248:	4011      	ands	r1, r2
   1424a:	2906      	cmp	r1, #6
   1424c:	d103      	bne.n	14256 <LorawanClasscRxDone+0x3e>
   1424e:	4393      	bics	r3, r2
   14250:	3a04      	subs	r2, #4
   14252:	4313      	orrs	r3, r2
   14254:	7023      	strb	r3, [r4, #0]
   14256:	2000      	movs	r0, #0
   14258:	4b06      	ldr	r3, [pc, #24]	; (14274 <LorawanClasscRxDone+0x5c>)
   1425a:	4798      	blx	r3
   1425c:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
   1425e:	7f68      	ldrb	r0, [r5, #29]
   14260:	4b05      	ldr	r3, [pc, #20]	; (14278 <LorawanClasscRxDone+0x60>)
   14262:	9200      	str	r2, [sp, #0]
   14264:	4905      	ldr	r1, [pc, #20]	; (1427c <LorawanClasscRxDone+0x64>)
   14266:	4d06      	ldr	r5, [pc, #24]	; (14280 <LorawanClasscRxDone+0x68>)
   14268:	47a8      	blx	r5
   1426a:	e7e9      	b.n	14240 <LorawanClasscRxDone+0x28>
   1426c:	20002b5c 	.word	0x20002b5c
   14270:	0000eea9 	.word	0x0000eea9
   14274:	000126c5 	.word	0x000126c5
   14278:	00014151 	.word	0x00014151
   1427c:	001e8480 	.word	0x001e8480
   14280:	0000ed11 	.word	0x0000ed11

00014284 <LorawanClasscTxDone>:
   14284:	b537      	push	{r0, r1, r2, r4, r5, lr}
   14286:	4c1a      	ldr	r4, [pc, #104]	; (142f0 <LorawanClasscTxDone+0x6c>)
   14288:	0023      	movs	r3, r4
   1428a:	33ca      	adds	r3, #202	; 0xca
   1428c:	881d      	ldrh	r5, [r3, #0]
   1428e:	0023      	movs	r3, r4
   14290:	338c      	adds	r3, #140	; 0x8c
   14292:	781b      	ldrb	r3, [r3, #0]
   14294:	07db      	lsls	r3, r3, #31
   14296:	d524      	bpl.n	142e2 <LorawanClasscTxDone+0x5e>
   14298:	0023      	movs	r3, r4
   1429a:	0022      	movs	r2, r4
   1429c:	33da      	adds	r3, #218	; 0xda
   1429e:	781b      	ldrb	r3, [r3, #0]
   142a0:	32dc      	adds	r2, #220	; 0xdc
   142a2:	3301      	adds	r3, #1
   142a4:	7812      	ldrb	r2, [r2, #0]
   142a6:	4293      	cmp	r3, r2
   142a8:	db06      	blt.n	142b8 <LorawanClasscTxDone+0x34>
   142aa:	4b12      	ldr	r3, [pc, #72]	; (142f4 <LorawanClasscTxDone+0x70>)
   142ac:	5ce3      	ldrb	r3, [r4, r3]
   142ae:	2b00      	cmp	r3, #0
   142b0:	d002      	beq.n	142b8 <LorawanClasscTxDone+0x34>
   142b2:	23fa      	movs	r3, #250	; 0xfa
   142b4:	00db      	lsls	r3, r3, #3
   142b6:	18ed      	adds	r5, r5, r3
   142b8:	0023      	movs	r3, r4
   142ba:	33ff      	adds	r3, #255	; 0xff
   142bc:	1945      	adds	r5, r0, r5
   142be:	7f58      	ldrb	r0, [r3, #29]
   142c0:	4b0d      	ldr	r3, [pc, #52]	; (142f8 <LorawanClasscTxDone+0x74>)
   142c2:	4798      	blx	r3
   142c4:	34e8      	adds	r4, #232	; 0xe8
   142c6:	21fa      	movs	r1, #250	; 0xfa
   142c8:	7820      	ldrb	r0, [r4, #0]
   142ca:	2400      	movs	r4, #0
   142cc:	0089      	lsls	r1, r1, #2
   142ce:	4369      	muls	r1, r5
   142d0:	0022      	movs	r2, r4
   142d2:	4d0a      	ldr	r5, [pc, #40]	; (142fc <LorawanClasscTxDone+0x78>)
   142d4:	9400      	str	r4, [sp, #0]
   142d6:	4b0a      	ldr	r3, [pc, #40]	; (14300 <LorawanClasscTxDone+0x7c>)
   142d8:	47a8      	blx	r5
   142da:	0020      	movs	r0, r4
   142dc:	4b09      	ldr	r3, [pc, #36]	; (14304 <LorawanClasscTxDone+0x80>)
   142de:	4798      	blx	r3
   142e0:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
   142e2:	0023      	movs	r3, r4
   142e4:	0022      	movs	r2, r4
   142e6:	33d9      	adds	r3, #217	; 0xd9
   142e8:	781b      	ldrb	r3, [r3, #0]
   142ea:	32db      	adds	r2, #219	; 0xdb
   142ec:	3301      	adds	r3, #1
   142ee:	e7d9      	b.n	142a4 <LorawanClasscTxDone+0x20>
   142f0:	20002b5c 	.word	0x20002b5c
   142f4:	0000021e 	.word	0x0000021e
   142f8:	0000f029 	.word	0x0000f029
   142fc:	0000ed11 	.word	0x0000ed11
   14300:	0001258d 	.word	0x0001258d
   14304:	000126c5 	.word	0x000126c5

00014308 <LorawanClasscRxTimeout>:
   14308:	b510      	push	{r4, lr}
   1430a:	4b08      	ldr	r3, [pc, #32]	; (1432c <LorawanClasscRxTimeout+0x24>)
   1430c:	210e      	movs	r1, #14
   1430e:	337c      	adds	r3, #124	; 0x7c
   14310:	781a      	ldrb	r2, [r3, #0]
   14312:	0010      	movs	r0, r2
   14314:	4008      	ands	r0, r1
   14316:	2806      	cmp	r0, #6
   14318:	d106      	bne.n	14328 <LorawanClasscRxTimeout+0x20>
   1431a:	438a      	bics	r2, r1
   1431c:	3904      	subs	r1, #4
   1431e:	430a      	orrs	r2, r1
   14320:	701a      	strb	r2, [r3, #0]
   14322:	2000      	movs	r0, #0
   14324:	4b02      	ldr	r3, [pc, #8]	; (14330 <LorawanClasscRxTimeout+0x28>)
   14326:	4798      	blx	r3
   14328:	bd10      	pop	{r4, pc}
   1432a:	46c0      	nop			; (mov r8, r8)
   1432c:	20002b5c 	.word	0x20002b5c
   14330:	000126c5 	.word	0x000126c5

00014334 <LorawanClasscNotifyAppOnReceive>:
   14334:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   14336:	001f      	movs	r7, r3
   14338:	4b08      	ldr	r3, [pc, #32]	; (1435c <LorawanClasscNotifyAppOnReceive+0x28>)
   1433a:	0004      	movs	r4, r0
   1433c:	33ff      	adds	r3, #255	; 0xff
   1433e:	7f58      	ldrb	r0, [r3, #29]
   14340:	4b07      	ldr	r3, [pc, #28]	; (14360 <LorawanClasscNotifyAppOnReceive+0x2c>)
   14342:	000d      	movs	r5, r1
   14344:	0016      	movs	r6, r2
   14346:	4798      	blx	r3
   14348:	2800      	cmp	r0, #0
   1434a:	d105      	bne.n	14358 <LorawanClasscNotifyAppOnReceive+0x24>
   1434c:	0020      	movs	r0, r4
   1434e:	003b      	movs	r3, r7
   14350:	0032      	movs	r2, r6
   14352:	0029      	movs	r1, r5
   14354:	4c03      	ldr	r4, [pc, #12]	; (14364 <LorawanClasscNotifyAppOnReceive+0x30>)
   14356:	47a0      	blx	r4
   14358:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1435a:	46c0      	nop			; (mov r8, r8)
   1435c:	20002b5c 	.word	0x20002b5c
   14360:	0000eea9 	.word	0x0000eea9
   14364:	000117b9 	.word	0x000117b9

00014368 <LorawanMcastInit>:
   14368:	2290      	movs	r2, #144	; 0x90
   1436a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1436c:	2500      	movs	r5, #0
   1436e:	4b0f      	ldr	r3, [pc, #60]	; (143ac <LorawanMcastInit+0x44>)
   14370:	0052      	lsls	r2, r2, #1
   14372:	549d      	strb	r5, [r3, r2]
   14374:	2222      	movs	r2, #34	; 0x22
   14376:	2701      	movs	r7, #1
   14378:	32ff      	adds	r2, #255	; 0xff
   1437a:	4c0d      	ldr	r4, [pc, #52]	; (143b0 <LorawanMcastInit+0x48>)
   1437c:	549d      	strb	r5, [r3, r2]
   1437e:	427f      	negs	r7, r7
   14380:	0023      	movs	r3, r4
   14382:	3b14      	subs	r3, #20
   14384:	601f      	str	r7, [r3, #0]
   14386:	2210      	movs	r2, #16
   14388:	2100      	movs	r1, #0
   1438a:	0020      	movs	r0, r4
   1438c:	4e09      	ldr	r6, [pc, #36]	; (143b4 <LorawanMcastInit+0x4c>)
   1438e:	47b0      	blx	r6
   14390:	0020      	movs	r0, r4
   14392:	2210      	movs	r2, #16
   14394:	3810      	subs	r0, #16
   14396:	2100      	movs	r1, #0
   14398:	47b0      	blx	r6
   1439a:	4b07      	ldr	r3, [pc, #28]	; (143b8 <LorawanMcastInit+0x50>)
   1439c:	6165      	str	r5, [r4, #20]
   1439e:	61a5      	str	r5, [r4, #24]
   143a0:	6125      	str	r5, [r4, #16]
   143a2:	343c      	adds	r4, #60	; 0x3c
   143a4:	429c      	cmp	r4, r3
   143a6:	d1eb      	bne.n	14380 <LorawanMcastInit+0x18>
   143a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   143aa:	46c0      	nop			; (mov r8, r8)
   143ac:	20002b5c 	.word	0x20002b5c
   143b0:	20002c94 	.word	0x20002c94
   143b4:	00019e35 	.word	0x00019e35
   143b8:	20002d84 	.word	0x20002d84

000143bc <LorawanMcastEnable>:
   143bc:	0002      	movs	r2, r0
   143be:	b510      	push	{r4, lr}
   143c0:	200a      	movs	r0, #10
   143c2:	2903      	cmp	r1, #3
   143c4:	d822      	bhi.n	1440c <LorawanMcastEnable+0x50>
   143c6:	4b1a      	ldr	r3, [pc, #104]	; (14430 <LorawanMcastEnable+0x74>)
   143c8:	2a00      	cmp	r2, #0
   143ca:	d020      	beq.n	1440e <LorawanMcastEnable+0x52>
   143cc:	223c      	movs	r2, #60	; 0x3c
   143ce:	434a      	muls	r2, r1
   143d0:	189a      	adds	r2, r3, r2
   143d2:	3251      	adds	r2, #81	; 0x51
   143d4:	32ff      	adds	r2, #255	; 0xff
   143d6:	7912      	ldrb	r2, [r2, #4]
   143d8:	0754      	lsls	r4, r2, #29
   143da:	d512      	bpl.n	14402 <LorawanMcastEnable+0x46>
   143dc:	0794      	lsls	r4, r2, #30
   143de:	d510      	bpl.n	14402 <LorawanMcastEnable+0x46>
   143e0:	07d2      	lsls	r2, r2, #31
   143e2:	0fd2      	lsrs	r2, r2, #31
   143e4:	2a01      	cmp	r2, #1
   143e6:	d10c      	bne.n	14402 <LorawanMcastEnable+0x46>
   143e8:	001c      	movs	r4, r3
   143ea:	34f4      	adds	r4, #244	; 0xf4
   143ec:	7824      	ldrb	r4, [r4, #0]
   143ee:	0764      	lsls	r4, r4, #29
   143f0:	d007      	beq.n	14402 <LorawanMcastEnable+0x46>
   143f2:	2022      	movs	r0, #34	; 0x22
   143f4:	408a      	lsls	r2, r1
   143f6:	30ff      	adds	r0, #255	; 0xff
   143f8:	5c19      	ldrb	r1, [r3, r0]
   143fa:	430a      	orrs	r2, r1
   143fc:	541a      	strb	r2, [r3, r0]
   143fe:	381a      	subs	r0, #26
   14400:	38ff      	subs	r0, #255	; 0xff
   14402:	2190      	movs	r1, #144	; 0x90
   14404:	0049      	lsls	r1, r1, #1
   14406:	5c5a      	ldrb	r2, [r3, r1]
   14408:	3201      	adds	r2, #1
   1440a:	545a      	strb	r2, [r3, r1]
   1440c:	bd10      	pop	{r4, pc}
   1440e:	2201      	movs	r2, #1
   14410:	408a      	lsls	r2, r1
   14412:	2022      	movs	r0, #34	; 0x22
   14414:	0011      	movs	r1, r2
   14416:	30ff      	adds	r0, #255	; 0xff
   14418:	5c1a      	ldrb	r2, [r3, r0]
   1441a:	438a      	bics	r2, r1
   1441c:	2190      	movs	r1, #144	; 0x90
   1441e:	541a      	strb	r2, [r3, r0]
   14420:	0049      	lsls	r1, r1, #1
   14422:	5c5a      	ldrb	r2, [r3, r1]
   14424:	381a      	subs	r0, #26
   14426:	3a01      	subs	r2, #1
   14428:	545a      	strb	r2, [r3, r1]
   1442a:	38ff      	subs	r0, #255	; 0xff
   1442c:	e7ee      	b.n	1440c <LorawanMcastEnable+0x50>
   1442e:	46c0      	nop			; (mov r8, r8)
   14430:	20002b5c 	.word	0x20002b5c

00014434 <LorawanMcastValidateHdr>:
   14434:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   14436:	469c      	mov	ip, r3
   14438:	2400      	movs	r4, #0
   1443a:	230a      	movs	r3, #10
   1443c:	4f18      	ldr	r7, [pc, #96]	; (144a0 <LorawanMcastValidateHdr+0x6c>)
   1443e:	b2e5      	uxtb	r5, r4
   14440:	9501      	str	r5, [sp, #4]
   14442:	2522      	movs	r5, #34	; 0x22
   14444:	35ff      	adds	r5, #255	; 0xff
   14446:	5d7d      	ldrb	r5, [r7, r5]
   14448:	2601      	movs	r6, #1
   1444a:	4125      	asrs	r5, r4
   1444c:	4235      	tst	r5, r6
   1444e:	d022      	beq.n	14496 <LorawanMcastValidateHdr+0x62>
   14450:	7886      	ldrb	r6, [r0, #2]
   14452:	7845      	ldrb	r5, [r0, #1]
   14454:	0236      	lsls	r6, r6, #8
   14456:	432e      	orrs	r6, r5
   14458:	78c5      	ldrb	r5, [r0, #3]
   1445a:	042d      	lsls	r5, r5, #16
   1445c:	432e      	orrs	r6, r5
   1445e:	7905      	ldrb	r5, [r0, #4]
   14460:	062d      	lsls	r5, r5, #24
   14462:	4335      	orrs	r5, r6
   14464:	263c      	movs	r6, #60	; 0x3c
   14466:	4366      	muls	r6, r4
   14468:	3625      	adds	r6, #37	; 0x25
   1446a:	36ff      	adds	r6, #255	; 0xff
   1446c:	59be      	ldr	r6, [r7, r6]
   1446e:	42b5      	cmp	r5, r6
   14470:	d111      	bne.n	14496 <LorawanMcastValidateHdr+0x62>
   14472:	4d0c      	ldr	r5, [pc, #48]	; (144a4 <LorawanMcastValidateHdr+0x70>)
   14474:	782e      	ldrb	r6, [r5, #0]
   14476:	2506      	movs	r5, #6
   14478:	422e      	tst	r6, r5
   1447a:	d00c      	beq.n	14496 <LorawanMcastValidateHdr+0x62>
   1447c:	2a00      	cmp	r2, #0
   1447e:	d00a      	beq.n	14496 <LorawanMcastValidateHdr+0x62>
   14480:	7946      	ldrb	r6, [r0, #5]
   14482:	3569      	adds	r5, #105	; 0x69
   14484:	422e      	tst	r6, r5
   14486:	d106      	bne.n	14496 <LorawanMcastValidateHdr+0x62>
   14488:	2903      	cmp	r1, #3
   1448a:	d104      	bne.n	14496 <LorawanMcastValidateHdr+0x62>
   1448c:	466d      	mov	r5, sp
   1448e:	4663      	mov	r3, ip
   14490:	792d      	ldrb	r5, [r5, #4]
   14492:	701d      	strb	r5, [r3, #0]
   14494:	2308      	movs	r3, #8
   14496:	3401      	adds	r4, #1
   14498:	2c04      	cmp	r4, #4
   1449a:	d1d0      	bne.n	1443e <LorawanMcastValidateHdr+0xa>
   1449c:	0018      	movs	r0, r3
   1449e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   144a0:	20002b5c 	.word	0x20002b5c
   144a4:	20002c50 	.word	0x20002c50

000144a8 <LorawanMcastProcessPkt>:
   144a8:	b5f0      	push	{r4, r5, r6, r7, lr}
   144aa:	0015      	movs	r5, r2
   144ac:	223c      	movs	r2, #60	; 0x3c
   144ae:	435a      	muls	r2, r3
   144b0:	b089      	sub	sp, #36	; 0x24
   144b2:	9107      	str	r1, [sp, #28]
   144b4:	493d      	ldr	r1, [pc, #244]	; (145ac <LorawanMcastProcessPkt+0x104>)
   144b6:	9006      	str	r0, [sp, #24]
   144b8:	1889      	adds	r1, r1, r2
   144ba:	31fc      	adds	r1, #252	; 0xfc
   144bc:	6d0c      	ldr	r4, [r1, #80]	; 0x50
   144be:	6d48      	ldr	r0, [r1, #84]	; 0x54
   144c0:	6cca      	ldr	r2, [r1, #76]	; 0x4c
   144c2:	4284      	cmp	r4, r0
   144c4:	d21f      	bcs.n	14506 <LorawanMcastProcessPkt+0x5e>
   144c6:	2100      	movs	r1, #0
   144c8:	4294      	cmp	r4, r2
   144ca:	d802      	bhi.n	144d2 <LorawanMcastProcessPkt+0x2a>
   144cc:	4282      	cmp	r2, r0
   144ce:	4192      	sbcs	r2, r2
   144d0:	4251      	negs	r1, r2
   144d2:	270a      	movs	r7, #10
   144d4:	2900      	cmp	r1, #0
   144d6:	d118      	bne.n	1450a <LorawanMcastProcessPkt+0x62>
   144d8:	4a34      	ldr	r2, [pc, #208]	; (145ac <LorawanMcastProcessPkt+0x104>)
   144da:	200e      	movs	r0, #14
   144dc:	0011      	movs	r1, r2
   144de:	317c      	adds	r1, #124	; 0x7c
   144e0:	780b      	ldrb	r3, [r1, #0]
   144e2:	001c      	movs	r4, r3
   144e4:	4004      	ands	r4, r0
   144e6:	2c06      	cmp	r4, #6
   144e8:	d107      	bne.n	144fa <LorawanMcastProcessPkt+0x52>
   144ea:	32f4      	adds	r2, #244	; 0xf4
   144ec:	7812      	ldrb	r2, [r2, #0]
   144ee:	2a04      	cmp	r2, #4
   144f0:	d103      	bne.n	144fa <LorawanMcastProcessPkt+0x52>
   144f2:	4383      	bics	r3, r0
   144f4:	3206      	adds	r2, #6
   144f6:	4313      	orrs	r3, r2
   144f8:	700b      	strb	r3, [r1, #0]
   144fa:	2000      	movs	r0, #0
   144fc:	4b2c      	ldr	r3, [pc, #176]	; (145b0 <LorawanMcastProcessPkt+0x108>)
   144fe:	4798      	blx	r3
   14500:	0038      	movs	r0, r7
   14502:	b009      	add	sp, #36	; 0x24
   14504:	bdf0      	pop	{r4, r5, r6, r7, pc}
   14506:	4294      	cmp	r4, r2
   14508:	d8e0      	bhi.n	144cc <LorawanMcastProcessPkt+0x24>
   1450a:	243c      	movs	r4, #60	; 0x3c
   1450c:	435c      	muls	r4, r3
   1450e:	4e27      	ldr	r6, [pc, #156]	; (145ac <LorawanMcastProcessPkt+0x104>)
   14510:	79ea      	ldrb	r2, [r5, #7]
   14512:	1937      	adds	r7, r6, r4
   14514:	003b      	movs	r3, r7
   14516:	79a9      	ldrb	r1, [r5, #6]
   14518:	0212      	lsls	r2, r2, #8
   1451a:	3349      	adds	r3, #73	; 0x49
   1451c:	430a      	orrs	r2, r1
   1451e:	33ff      	adds	r3, #255	; 0xff
   14520:	801a      	strh	r2, [r3, #0]
   14522:	2105      	movs	r1, #5
   14524:	4b23      	ldr	r3, [pc, #140]	; (145b4 <LorawanMcastProcessPkt+0x10c>)
   14526:	37fc      	adds	r7, #252	; 0xfc
   14528:	2000      	movs	r0, #0
   1452a:	4798      	blx	r3
   1452c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1452e:	3439      	adds	r4, #57	; 0x39
   14530:	9304      	str	r3, [sp, #16]
   14532:	4b21      	ldr	r3, [pc, #132]	; (145b8 <LorawanMcastProcessPkt+0x110>)
   14534:	9907      	ldr	r1, [sp, #28]
   14536:	9303      	str	r3, [sp, #12]
   14538:	2319      	movs	r3, #25
   1453a:	34ff      	adds	r4, #255	; 0xff
   1453c:	9302      	str	r3, [sp, #8]
   1453e:	19a4      	adds	r4, r4, r6
   14540:	3b16      	subs	r3, #22
   14542:	9806      	ldr	r0, [sp, #24]
   14544:	9400      	str	r4, [sp, #0]
   14546:	390d      	subs	r1, #13
   14548:	9301      	str	r3, [sp, #4]
   1454a:	b2c9      	uxtb	r1, r1
   1454c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   1454e:	2201      	movs	r2, #1
   14550:	3009      	adds	r0, #9
   14552:	4c1a      	ldr	r4, [pc, #104]	; (145bc <LorawanMcastProcessPkt+0x114>)
   14554:	47a0      	blx	r4
   14556:	2800      	cmp	r0, #0
   14558:	d002      	beq.n	14560 <LorawanMcastProcessPkt+0xb8>
   1455a:	201f      	movs	r0, #31
   1455c:	4b18      	ldr	r3, [pc, #96]	; (145c0 <LorawanMcastProcessPkt+0x118>)
   1455e:	4798      	blx	r3
   14560:	4918      	ldr	r1, [pc, #96]	; (145c4 <LorawanMcastProcessPkt+0x11c>)
   14562:	2708      	movs	r7, #8
   14564:	784a      	ldrb	r2, [r1, #1]
   14566:	780b      	ldrb	r3, [r1, #0]
   14568:	0212      	lsls	r2, r2, #8
   1456a:	431a      	orrs	r2, r3
   1456c:	788b      	ldrb	r3, [r1, #2]
   1456e:	041b      	lsls	r3, r3, #16
   14570:	431a      	orrs	r2, r3
   14572:	78cb      	ldrb	r3, [r1, #3]
   14574:	061b      	lsls	r3, r3, #24
   14576:	4313      	orrs	r3, r2
   14578:	d0ae      	beq.n	144d8 <LorawanMcastProcessPkt+0x30>
   1457a:	2220      	movs	r2, #32
   1457c:	368c      	adds	r6, #140	; 0x8c
   1457e:	7833      	ldrb	r3, [r6, #0]
   14580:	9906      	ldr	r1, [sp, #24]
   14582:	4393      	bics	r3, r2
   14584:	7033      	strb	r3, [r6, #0]
   14586:	78ab      	ldrb	r3, [r5, #2]
   14588:	7868      	ldrb	r0, [r5, #1]
   1458a:	40bb      	lsls	r3, r7
   1458c:	4303      	orrs	r3, r0
   1458e:	78e8      	ldrb	r0, [r5, #3]
   14590:	9a07      	ldr	r2, [sp, #28]
   14592:	0400      	lsls	r0, r0, #16
   14594:	4303      	orrs	r3, r0
   14596:	7928      	ldrb	r0, [r5, #4]
   14598:	3a0c      	subs	r2, #12
   1459a:	0600      	lsls	r0, r0, #24
   1459c:	4318      	orrs	r0, r3
   1459e:	b2d2      	uxtb	r2, r2
   145a0:	19c9      	adds	r1, r1, r7
   145a2:	003b      	movs	r3, r7
   145a4:	4c08      	ldr	r4, [pc, #32]	; (145c8 <LorawanMcastProcessPkt+0x120>)
   145a6:	47a0      	blx	r4
   145a8:	e796      	b.n	144d8 <LorawanMcastProcessPkt+0x30>
   145aa:	46c0      	nop			; (mov r8, r8)
   145ac:	20002b5c 	.word	0x20002b5c
   145b0:	000126c5 	.word	0x000126c5
   145b4:	0000dfe1 	.word	0x0000dfe1
   145b8:	20002eac 	.word	0x20002eac
   145bc:	00011355 	.word	0x00011355
   145c0:	00011415 	.word	0x00011415
   145c4:	20002ea4 	.word	0x20002ea4
   145c8:	000117b9 	.word	0x000117b9

000145cc <LorawanAddMcastAddr>:
   145cc:	b570      	push	{r4, r5, r6, lr}
   145ce:	260a      	movs	r6, #10
   145d0:	2903      	cmp	r1, #3
   145d2:	d818      	bhi.n	14606 <LorawanAddMcastAddr+0x3a>
   145d4:	4b0d      	ldr	r3, [pc, #52]	; (1460c <LorawanAddMcastAddr+0x40>)
   145d6:	681a      	ldr	r2, [r3, #0]
   145d8:	0a15      	lsrs	r5, r2, #8
   145da:	791a      	ldrb	r2, [r3, #4]
   145dc:	0612      	lsls	r2, r2, #24
   145de:	432a      	orrs	r2, r5
   145e0:	4282      	cmp	r2, r0
   145e2:	d010      	beq.n	14606 <LorawanAddMcastAddr+0x3a>
   145e4:	243c      	movs	r4, #60	; 0x3c
   145e6:	434c      	muls	r4, r1
   145e8:	191c      	adds	r4, r3, r4
   145ea:	0023      	movs	r3, r4
   145ec:	33fc      	adds	r3, #252	; 0xfc
   145ee:	6298      	str	r0, [r3, #40]	; 0x28
   145f0:	2106      	movs	r1, #6
   145f2:	2000      	movs	r0, #0
   145f4:	4b06      	ldr	r3, [pc, #24]	; (14610 <LorawanAddMcastAddr+0x44>)
   145f6:	4798      	blx	r3
   145f8:	2201      	movs	r2, #1
   145fa:	3451      	adds	r4, #81	; 0x51
   145fc:	34ff      	adds	r4, #255	; 0xff
   145fe:	7921      	ldrb	r1, [r4, #4]
   14600:	3e02      	subs	r6, #2
   14602:	430a      	orrs	r2, r1
   14604:	7122      	strb	r2, [r4, #4]
   14606:	0030      	movs	r0, r6
   14608:	bd70      	pop	{r4, r5, r6, pc}
   1460a:	46c0      	nop			; (mov r8, r8)
   1460c:	20002b5c 	.word	0x20002b5c
   14610:	0000dfe1 	.word	0x0000dfe1

00014614 <LorawanAddMcastAppskey>:
   14614:	b570      	push	{r4, r5, r6, lr}
   14616:	0006      	movs	r6, r0
   14618:	200a      	movs	r0, #10
   1461a:	2903      	cmp	r1, #3
   1461c:	d818      	bhi.n	14650 <LorawanAddMcastAppskey+0x3c>
   1461e:	2e00      	cmp	r6, #0
   14620:	d016      	beq.n	14650 <LorawanAddMcastAppskey+0x3c>
   14622:	253c      	movs	r5, #60	; 0x3c
   14624:	434d      	muls	r5, r1
   14626:	0028      	movs	r0, r5
   14628:	4c0a      	ldr	r4, [pc, #40]	; (14654 <LorawanAddMcastAppskey+0x40>)
   1462a:	3039      	adds	r0, #57	; 0x39
   1462c:	30ff      	adds	r0, #255	; 0xff
   1462e:	2210      	movs	r2, #16
   14630:	1900      	adds	r0, r0, r4
   14632:	0031      	movs	r1, r6
   14634:	4b08      	ldr	r3, [pc, #32]	; (14658 <LorawanAddMcastAppskey+0x44>)
   14636:	4798      	blx	r3
   14638:	4b08      	ldr	r3, [pc, #32]	; (1465c <LorawanAddMcastAppskey+0x48>)
   1463a:	2107      	movs	r1, #7
   1463c:	2000      	movs	r0, #0
   1463e:	4798      	blx	r3
   14640:	2304      	movs	r3, #4
   14642:	2008      	movs	r0, #8
   14644:	1964      	adds	r4, r4, r5
   14646:	3451      	adds	r4, #81	; 0x51
   14648:	34ff      	adds	r4, #255	; 0xff
   1464a:	7922      	ldrb	r2, [r4, #4]
   1464c:	4313      	orrs	r3, r2
   1464e:	7123      	strb	r3, [r4, #4]
   14650:	bd70      	pop	{r4, r5, r6, pc}
   14652:	46c0      	nop			; (mov r8, r8)
   14654:	20002b5c 	.word	0x20002b5c
   14658:	00019d11 	.word	0x00019d11
   1465c:	0000dfe1 	.word	0x0000dfe1

00014660 <LorawanAddMcastNwkskey>:
   14660:	b570      	push	{r4, r5, r6, lr}
   14662:	0006      	movs	r6, r0
   14664:	200a      	movs	r0, #10
   14666:	2903      	cmp	r1, #3
   14668:	d818      	bhi.n	1469c <LorawanAddMcastNwkskey+0x3c>
   1466a:	2e00      	cmp	r6, #0
   1466c:	d016      	beq.n	1469c <LorawanAddMcastNwkskey+0x3c>
   1466e:	253c      	movs	r5, #60	; 0x3c
   14670:	434d      	muls	r5, r1
   14672:	0028      	movs	r0, r5
   14674:	4c0a      	ldr	r4, [pc, #40]	; (146a0 <LorawanAddMcastNwkskey+0x40>)
   14676:	3029      	adds	r0, #41	; 0x29
   14678:	30ff      	adds	r0, #255	; 0xff
   1467a:	2210      	movs	r2, #16
   1467c:	1900      	adds	r0, r0, r4
   1467e:	0031      	movs	r1, r6
   14680:	4b08      	ldr	r3, [pc, #32]	; (146a4 <LorawanAddMcastNwkskey+0x44>)
   14682:	4798      	blx	r3
   14684:	4b08      	ldr	r3, [pc, #32]	; (146a8 <LorawanAddMcastNwkskey+0x48>)
   14686:	2108      	movs	r1, #8
   14688:	2000      	movs	r0, #0
   1468a:	4798      	blx	r3
   1468c:	2302      	movs	r3, #2
   1468e:	2008      	movs	r0, #8
   14690:	1964      	adds	r4, r4, r5
   14692:	3451      	adds	r4, #81	; 0x51
   14694:	34ff      	adds	r4, #255	; 0xff
   14696:	7922      	ldrb	r2, [r4, #4]
   14698:	4313      	orrs	r3, r2
   1469a:	7123      	strb	r3, [r4, #4]
   1469c:	bd70      	pop	{r4, r5, r6, pc}
   1469e:	46c0      	nop			; (mov r8, r8)
   146a0:	20002b5c 	.word	0x20002b5c
   146a4:	00019d11 	.word	0x00019d11
   146a8:	0000dfe1 	.word	0x0000dfe1

000146ac <LorawanAddMcastFcntMin>:
   146ac:	220a      	movs	r2, #10
   146ae:	2903      	cmp	r1, #3
   146b0:	d807      	bhi.n	146c2 <LorawanAddMcastFcntMin+0x16>
   146b2:	233c      	movs	r3, #60	; 0x3c
   146b4:	434b      	muls	r3, r1
   146b6:	4904      	ldr	r1, [pc, #16]	; (146c8 <LorawanAddMcastFcntMin+0x1c>)
   146b8:	3a02      	subs	r2, #2
   146ba:	18c9      	adds	r1, r1, r3
   146bc:	31fc      	adds	r1, #252	; 0xfc
   146be:	6508      	str	r0, [r1, #80]	; 0x50
   146c0:	64c8      	str	r0, [r1, #76]	; 0x4c
   146c2:	0010      	movs	r0, r2
   146c4:	4770      	bx	lr
   146c6:	46c0      	nop			; (mov r8, r8)
   146c8:	20002b5c 	.word	0x20002b5c

000146cc <LorawanAddMcastFcntMax>:
   146cc:	220a      	movs	r2, #10
   146ce:	2903      	cmp	r1, #3
   146d0:	d806      	bhi.n	146e0 <LorawanAddMcastFcntMax+0x14>
   146d2:	233c      	movs	r3, #60	; 0x3c
   146d4:	434b      	muls	r3, r1
   146d6:	4903      	ldr	r1, [pc, #12]	; (146e4 <LorawanAddMcastFcntMax+0x18>)
   146d8:	3a02      	subs	r2, #2
   146da:	18c9      	adds	r1, r1, r3
   146dc:	31fc      	adds	r1, #252	; 0xfc
   146de:	6548      	str	r0, [r1, #84]	; 0x54
   146e0:	0010      	movs	r0, r2
   146e2:	4770      	bx	lr
   146e4:	20002b5c 	.word	0x20002b5c

000146e8 <LorawanAddMcastDlFrequency>:
   146e8:	b513      	push	{r0, r1, r4, lr}
   146ea:	000c      	movs	r4, r1
   146ec:	9001      	str	r0, [sp, #4]
   146ee:	2903      	cmp	r1, #3
   146f0:	d901      	bls.n	146f6 <LorawanAddMcastDlFrequency+0xe>
   146f2:	200a      	movs	r0, #10
   146f4:	bd16      	pop	{r1, r2, r4, pc}
   146f6:	a901      	add	r1, sp, #4
   146f8:	2001      	movs	r0, #1
   146fa:	4b06      	ldr	r3, [pc, #24]	; (14714 <LorawanAddMcastDlFrequency+0x2c>)
   146fc:	4798      	blx	r3
   146fe:	2808      	cmp	r0, #8
   14700:	d1f7      	bne.n	146f2 <LorawanAddMcastDlFrequency+0xa>
   14702:	213c      	movs	r1, #60	; 0x3c
   14704:	434c      	muls	r4, r1
   14706:	4904      	ldr	r1, [pc, #16]	; (14718 <LorawanAddMcastDlFrequency+0x30>)
   14708:	9b01      	ldr	r3, [sp, #4]
   1470a:	1909      	adds	r1, r1, r4
   1470c:	31fc      	adds	r1, #252	; 0xfc
   1470e:	65cb      	str	r3, [r1, #92]	; 0x5c
   14710:	e7f0      	b.n	146f4 <LorawanAddMcastDlFrequency+0xc>
   14712:	46c0      	nop			; (mov r8, r8)
   14714:	0000d821 	.word	0x0000d821
   14718:	20002b5c 	.word	0x20002b5c

0001471c <LorawanAddMcastDatarate>:
   1471c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1471e:	466b      	mov	r3, sp
   14720:	1ddc      	adds	r4, r3, #7
   14722:	000d      	movs	r5, r1
   14724:	7020      	strb	r0, [r4, #0]
   14726:	2903      	cmp	r1, #3
   14728:	d901      	bls.n	1472e <LorawanAddMcastDatarate+0x12>
   1472a:	200a      	movs	r0, #10
   1472c:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
   1472e:	0021      	movs	r1, r4
   14730:	200f      	movs	r0, #15
   14732:	4b06      	ldr	r3, [pc, #24]	; (1474c <LorawanAddMcastDatarate+0x30>)
   14734:	4798      	blx	r3
   14736:	2808      	cmp	r0, #8
   14738:	d1f7      	bne.n	1472a <LorawanAddMcastDatarate+0xe>
   1473a:	213c      	movs	r1, #60	; 0x3c
   1473c:	434d      	muls	r5, r1
   1473e:	4904      	ldr	r1, [pc, #16]	; (14750 <LorawanAddMcastDatarate+0x34>)
   14740:	7823      	ldrb	r3, [r4, #0]
   14742:	1949      	adds	r1, r1, r5
   14744:	315d      	adds	r1, #93	; 0x5d
   14746:	31ff      	adds	r1, #255	; 0xff
   14748:	700b      	strb	r3, [r1, #0]
   1474a:	e7ef      	b.n	1472c <LorawanAddMcastDatarate+0x10>
   1474c:	0000d821 	.word	0x0000d821
   14750:	20002b5c 	.word	0x20002b5c

00014754 <LorawanAddMcastPeriodicity>:
   14754:	220a      	movs	r2, #10
   14756:	2903      	cmp	r1, #3
   14758:	d809      	bhi.n	1476e <LorawanAddMcastPeriodicity+0x1a>
   1475a:	2807      	cmp	r0, #7
   1475c:	d807      	bhi.n	1476e <LorawanAddMcastPeriodicity+0x1a>
   1475e:	233c      	movs	r3, #60	; 0x3c
   14760:	434b      	muls	r3, r1
   14762:	4904      	ldr	r1, [pc, #16]	; (14774 <LorawanAddMcastPeriodicity+0x20>)
   14764:	3a02      	subs	r2, #2
   14766:	18c9      	adds	r1, r1, r3
   14768:	315e      	adds	r1, #94	; 0x5e
   1476a:	31ff      	adds	r1, #255	; 0xff
   1476c:	7008      	strb	r0, [r1, #0]
   1476e:	0010      	movs	r0, r2
   14770:	4770      	bx	lr
   14772:	46c0      	nop			; (mov r8, r8)
   14774:	20002b5c 	.word	0x20002b5c

00014778 <Lorawan_Pds_fid1_CB>:
   14778:	4770      	bx	lr
	...

0001477c <Lorawan_Pds_fid2_CB>:
   1477c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1477e:	2788      	movs	r7, #136	; 0x88
   14780:	4c2d      	ldr	r4, [pc, #180]	; (14838 <Lorawan_Pds_fid2_CB+0xbc>)
   14782:	00bf      	lsls	r7, r7, #2
   14784:	5de3      	ldrb	r3, [r4, r7]
   14786:	2b00      	cmp	r3, #0
   14788:	d021      	beq.n	147ce <Lorawan_Pds_fid2_CB+0x52>
   1478a:	2501      	movs	r5, #1
   1478c:	0029      	movs	r1, r5
   1478e:	4099      	lsls	r1, r3
   14790:	000b      	movs	r3, r1
   14792:	1d22      	adds	r2, r4, #4
   14794:	6fd1      	ldr	r1, [r2, #124]	; 0x7c
   14796:	4e29      	ldr	r6, [pc, #164]	; (1483c <Lorawan_Pds_fid2_CB+0xc0>)
   14798:	18cb      	adds	r3, r1, r3
   1479a:	2000      	movs	r0, #0
   1479c:	2116      	movs	r1, #22
   1479e:	67d3      	str	r3, [r2, #124]	; 0x7c
   147a0:	47b0      	blx	r6
   147a2:	0029      	movs	r1, r5
   147a4:	5de3      	ldrb	r3, [r4, r7]
   147a6:	0022      	movs	r2, r4
   147a8:	4099      	lsls	r1, r3
   147aa:	000b      	movs	r3, r1
   147ac:	3208      	adds	r2, #8
   147ae:	6fd1      	ldr	r1, [r2, #124]	; 0x7c
   147b0:	0028      	movs	r0, r5
   147b2:	185b      	adds	r3, r3, r1
   147b4:	210a      	movs	r1, #10
   147b6:	67d3      	str	r3, [r2, #124]	; 0x7c
   147b8:	47b0      	blx	r6
   147ba:	0023      	movs	r3, r4
   147bc:	5de2      	ldrb	r2, [r4, r7]
   147be:	33fc      	adds	r3, #252	; 0xfc
   147c0:	4095      	lsls	r5, r2
   147c2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
   147c4:	2105      	movs	r1, #5
   147c6:	18ad      	adds	r5, r5, r2
   147c8:	64dd      	str	r5, [r3, #76]	; 0x4c
   147ca:	2000      	movs	r0, #0
   147cc:	47b0      	blx	r6
   147ce:	0025      	movs	r5, r4
   147d0:	2271      	movs	r2, #113	; 0x71
   147d2:	2701      	movs	r7, #1
   147d4:	357c      	adds	r5, #124	; 0x7c
   147d6:	782b      	ldrb	r3, [r5, #0]
   147d8:	4013      	ands	r3, r2
   147da:	702b      	strb	r3, [r5, #0]
   147dc:	786b      	ldrb	r3, [r5, #1]
   147de:	43bb      	bics	r3, r7
   147e0:	706b      	strb	r3, [r5, #1]
   147e2:	4b17      	ldr	r3, [pc, #92]	; (14840 <Lorawan_Pds_fid2_CB+0xc4>)
   147e4:	5ce3      	ldrb	r3, [r4, r3]
   147e6:	2b00      	cmp	r3, #0
   147e8:	d018      	beq.n	1481c <Lorawan_Pds_fid2_CB+0xa0>
   147ea:	4916      	ldr	r1, [pc, #88]	; (14844 <Lorawan_Pds_fid2_CB+0xc8>)
   147ec:	2006      	movs	r0, #6
   147ee:	4e16      	ldr	r6, [pc, #88]	; (14848 <Lorawan_Pds_fid2_CB+0xcc>)
   147f0:	47b0      	blx	r6
   147f2:	2800      	cmp	r0, #0
   147f4:	d002      	beq.n	147fc <Lorawan_Pds_fid2_CB+0x80>
   147f6:	782b      	ldrb	r3, [r5, #0]
   147f8:	43bb      	bics	r3, r7
   147fa:	702b      	strb	r3, [r5, #0]
   147fc:	0023      	movs	r3, r4
   147fe:	2501      	movs	r5, #1
   14800:	337c      	adds	r3, #124	; 0x7c
   14802:	781b      	ldrb	r3, [r3, #0]
   14804:	422b      	tst	r3, r5
   14806:	d008      	beq.n	1481a <Lorawan_Pds_fid2_CB+0x9e>
   14808:	7823      	ldrb	r3, [r4, #0]
   1480a:	2b00      	cmp	r3, #0
   1480c:	d106      	bne.n	1481c <Lorawan_Pds_fid2_CB+0xa0>
   1480e:	490f      	ldr	r1, [pc, #60]	; (1484c <Lorawan_Pds_fid2_CB+0xd0>)
   14810:	2002      	movs	r0, #2
   14812:	47b0      	blx	r6
   14814:	490e      	ldr	r1, [pc, #56]	; (14850 <Lorawan_Pds_fid2_CB+0xd4>)
   14816:	0028      	movs	r0, r5
   14818:	47b0      	blx	r6
   1481a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1481c:	0020      	movs	r0, r4
   1481e:	0021      	movs	r1, r4
   14820:	2210      	movs	r2, #16
   14822:	3115      	adds	r1, #21
   14824:	4d0b      	ldr	r5, [pc, #44]	; (14854 <Lorawan_Pds_fid2_CB+0xd8>)
   14826:	3035      	adds	r0, #53	; 0x35
   14828:	47a8      	blx	r5
   1482a:	0020      	movs	r0, r4
   1482c:	1d61      	adds	r1, r4, #5
   1482e:	2210      	movs	r2, #16
   14830:	3025      	adds	r0, #37	; 0x25
   14832:	47a8      	blx	r5
   14834:	e7f1      	b.n	1481a <Lorawan_Pds_fid2_CB+0x9e>
   14836:	46c0      	nop			; (mov r8, r8)
   14838:	20002b5c 	.word	0x20002b5c
   1483c:	0000dfe1 	.word	0x0000dfe1
   14840:	00000221 	.word	0x00000221
   14844:	20002bb1 	.word	0x20002bb1
   14848:	0000dc45 	.word	0x0000dc45
   1484c:	20002b81 	.word	0x20002b81
   14850:	20002b91 	.word	0x20002b91
   14854:	00019d11 	.word	0x00019d11

00014858 <LORAWAN_TxHandler>:
   14858:	b5f0      	push	{r4, r5, r6, r7, lr}
   1485a:	b087      	sub	sp, #28
   1485c:	466b      	mov	r3, sp
   1485e:	2501      	movs	r5, #1
   14860:	4c2f      	ldr	r4, [pc, #188]	; (14920 <LORAWAN_TxHandler+0xc8>)
   14862:	701d      	strb	r5, [r3, #0]
   14864:	0023      	movs	r3, r4
   14866:	466a      	mov	r2, sp
   14868:	33e1      	adds	r3, #225	; 0xe1
   1486a:	781b      	ldrb	r3, [r3, #0]
   1486c:	4669      	mov	r1, sp
   1486e:	7053      	strb	r3, [r2, #1]
   14870:	0023      	movs	r3, r4
   14872:	33df      	adds	r3, #223	; 0xdf
   14874:	781b      	ldrb	r3, [r3, #0]
   14876:	202f      	movs	r0, #47	; 0x2f
   14878:	7093      	strb	r3, [r2, #2]
   1487a:	aa03      	add	r2, sp, #12
   1487c:	4b29      	ldr	r3, [pc, #164]	; (14924 <LORAWAN_TxHandler+0xcc>)
   1487e:	4798      	blx	r3
   14880:	2808      	cmp	r0, #8
   14882:	d004      	beq.n	1488e <LORAWAN_TxHandler+0x36>
   14884:	4b28      	ldr	r3, [pc, #160]	; (14928 <LORAWAN_TxHandler+0xd0>)
   14886:	4798      	blx	r3
   14888:	2000      	movs	r0, #0
   1488a:	b007      	add	sp, #28
   1488c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1488e:	0023      	movs	r3, r4
   14890:	33f4      	adds	r3, #244	; 0xf4
   14892:	781b      	ldrb	r3, [r3, #0]
   14894:	ae01      	add	r6, sp, #4
   14896:	2b04      	cmp	r3, #4
   14898:	d103      	bne.n	148a2 <LORAWAN_TxHandler+0x4a>
   1489a:	0030      	movs	r0, r6
   1489c:	4b23      	ldr	r3, [pc, #140]	; (1492c <LORAWAN_TxHandler+0xd4>)
   1489e:	7035      	strb	r5, [r6, #0]
   148a0:	4798      	blx	r3
   148a2:	4b23      	ldr	r3, [pc, #140]	; (14930 <LORAWAN_TxHandler+0xd8>)
   148a4:	9803      	ldr	r0, [sp, #12]
   148a6:	9904      	ldr	r1, [sp, #16]
   148a8:	9a05      	ldr	r2, [sp, #20]
   148aa:	4798      	blx	r3
   148ac:	0023      	movs	r3, r4
   148ae:	33fc      	adds	r3, #252	; 0xfc
   148b0:	681d      	ldr	r5, [r3, #0]
   148b2:	4f20      	ldr	r7, [pc, #128]	; (14934 <LORAWAN_TxHandler+0xdc>)
   148b4:	4b20      	ldr	r3, [pc, #128]	; (14938 <LORAWAN_TxHandler+0xe0>)
   148b6:	2d00      	cmp	r5, #0
   148b8:	d023      	beq.n	14902 <LORAWAN_TxHandler+0xaa>
   148ba:	2201      	movs	r2, #1
   148bc:	54e2      	strb	r2, [r4, r3]
   148be:	7828      	ldrb	r0, [r5, #0]
   148c0:	7a2b      	ldrb	r3, [r5, #8]
   148c2:	1e42      	subs	r2, r0, #1
   148c4:	4190      	sbcs	r0, r2
   148c6:	7869      	ldrb	r1, [r5, #1]
   148c8:	686a      	ldr	r2, [r5, #4]
   148ca:	b2c0      	uxtb	r0, r0
   148cc:	47b8      	blx	r7
   148ce:	0023      	movs	r3, r4
   148d0:	33c6      	adds	r3, #198	; 0xc6
   148d2:	881b      	ldrh	r3, [r3, #0]
   148d4:	0030      	movs	r0, r6
   148d6:	7033      	strb	r3, [r6, #0]
   148d8:	4b18      	ldr	r3, [pc, #96]	; (1493c <LORAWAN_TxHandler+0xe4>)
   148da:	6073      	str	r3, [r6, #4]
   148dc:	4b18      	ldr	r3, [pc, #96]	; (14940 <LORAWAN_TxHandler+0xe8>)
   148de:	4798      	blx	r3
   148e0:	2800      	cmp	r0, #0
   148e2:	d114      	bne.n	1490e <LORAWAN_TxHandler+0xb6>
   148e4:	0021      	movs	r1, r4
   148e6:	220e      	movs	r2, #14
   148e8:	317c      	adds	r1, #124	; 0x7c
   148ea:	780b      	ldrb	r3, [r1, #0]
   148ec:	4393      	bics	r3, r2
   148ee:	001a      	movs	r2, r3
   148f0:	2302      	movs	r3, #2
   148f2:	4313      	orrs	r3, r2
   148f4:	700b      	strb	r3, [r1, #0]
   148f6:	2208      	movs	r2, #8
   148f8:	348c      	adds	r4, #140	; 0x8c
   148fa:	7823      	ldrb	r3, [r4, #0]
   148fc:	4393      	bics	r3, r2
   148fe:	7023      	strb	r3, [r4, #0]
   14900:	e7c2      	b.n	14888 <LORAWAN_TxHandler+0x30>
   14902:	54e5      	strb	r5, [r4, r3]
   14904:	002a      	movs	r2, r5
   14906:	002b      	movs	r3, r5
   14908:	0029      	movs	r1, r5
   1490a:	0028      	movs	r0, r5
   1490c:	e7de      	b.n	148cc <LORAWAN_TxHandler+0x74>
   1490e:	0022      	movs	r2, r4
   14910:	2120      	movs	r1, #32
   14912:	328c      	adds	r2, #140	; 0x8c
   14914:	7813      	ldrb	r3, [r2, #0]
   14916:	438b      	bics	r3, r1
   14918:	7013      	strb	r3, [r2, #0]
   1491a:	4b03      	ldr	r3, [pc, #12]	; (14928 <LORAWAN_TxHandler+0xd0>)
   1491c:	4798      	blx	r3
   1491e:	e7ea      	b.n	148f6 <LORAWAN_TxHandler+0x9e>
   14920:	20002b5c 	.word	0x20002b5c
   14924:	0000d805 	.word	0x0000d805
   14928:	00011415 	.word	0x00011415
   1492c:	00015dd9 	.word	0x00015dd9
   14930:	00010e9d 	.word	0x00010e9d
   14934:	0001147d 	.word	0x0001147d
   14938:	0000021e 	.word	0x0000021e
   1493c:	20002da1 	.word	0x20002da1
   14940:	00015505 	.word	0x00015505

00014944 <LORAWAN_JoinReqHandler>:
   14944:	b530      	push	{r4, r5, lr}
   14946:	b087      	sub	sp, #28
   14948:	466a      	mov	r2, sp
   1494a:	2300      	movs	r3, #0
   1494c:	4c2a      	ldr	r4, [pc, #168]	; (149f8 <LORAWAN_JoinReqHandler+0xb4>)
   1494e:	7013      	strb	r3, [r2, #0]
   14950:	0023      	movs	r3, r4
   14952:	33e1      	adds	r3, #225	; 0xe1
   14954:	781b      	ldrb	r3, [r3, #0]
   14956:	7053      	strb	r3, [r2, #1]
   14958:	0023      	movs	r3, r4
   1495a:	33df      	adds	r3, #223	; 0xdf
   1495c:	781b      	ldrb	r3, [r3, #0]
   1495e:	7093      	strb	r3, [r2, #2]
   14960:	0023      	movs	r3, r4
   14962:	33ff      	adds	r3, #255	; 0xff
   14964:	7c5b      	ldrb	r3, [r3, #17]
   14966:	069b      	lsls	r3, r3, #26
   14968:	d511      	bpl.n	1498e <LORAWAN_JoinReqHandler+0x4a>
   1496a:	0023      	movs	r3, r4
   1496c:	336f      	adds	r3, #111	; 0x6f
   1496e:	781a      	ldrb	r2, [r3, #0]
   14970:	6f23      	ldr	r3, [r4, #112]	; 0x70
   14972:	021b      	lsls	r3, r3, #8
   14974:	4313      	orrs	r3, r2
   14976:	0022      	movs	r2, r4
   14978:	3273      	adds	r2, #115	; 0x73
   1497a:	7811      	ldrb	r1, [r2, #0]
   1497c:	6f62      	ldr	r2, [r4, #116]	; 0x74
   1497e:	0212      	lsls	r2, r2, #8
   14980:	430a      	orrs	r2, r1
   14982:	4313      	orrs	r3, r2
   14984:	d103      	bne.n	1498e <LORAWAN_JoinReqHandler+0x4a>
   14986:	0023      	movs	r3, r4
   14988:	2201      	movs	r2, #1
   1498a:	337b      	adds	r3, #123	; 0x7b
   1498c:	701a      	strb	r2, [r3, #0]
   1498e:	aa03      	add	r2, sp, #12
   14990:	4669      	mov	r1, sp
   14992:	202f      	movs	r0, #47	; 0x2f
   14994:	4b19      	ldr	r3, [pc, #100]	; (149fc <LORAWAN_JoinReqHandler+0xb8>)
   14996:	4798      	blx	r3
   14998:	2808      	cmp	r0, #8
   1499a:	d004      	beq.n	149a6 <LORAWAN_JoinReqHandler+0x62>
   1499c:	4b18      	ldr	r3, [pc, #96]	; (14a00 <LORAWAN_JoinReqHandler+0xbc>)
   1499e:	4798      	blx	r3
   149a0:	2000      	movs	r0, #0
   149a2:	b007      	add	sp, #28
   149a4:	bd30      	pop	{r4, r5, pc}
   149a6:	4b17      	ldr	r3, [pc, #92]	; (14a04 <LORAWAN_JoinReqHandler+0xc0>)
   149a8:	9803      	ldr	r0, [sp, #12]
   149aa:	9904      	ldr	r1, [sp, #16]
   149ac:	9a05      	ldr	r2, [sp, #20]
   149ae:	4798      	blx	r3
   149b0:	0023      	movs	r3, r4
   149b2:	33f4      	adds	r3, #244	; 0xf4
   149b4:	781b      	ldrb	r3, [r3, #0]
   149b6:	ad01      	add	r5, sp, #4
   149b8:	2b04      	cmp	r3, #4
   149ba:	d104      	bne.n	149c6 <LORAWAN_JoinReqHandler+0x82>
   149bc:	3b03      	subs	r3, #3
   149be:	702b      	strb	r3, [r5, #0]
   149c0:	0028      	movs	r0, r5
   149c2:	4b11      	ldr	r3, [pc, #68]	; (14a08 <LORAWAN_JoinReqHandler+0xc4>)
   149c4:	4798      	blx	r3
   149c6:	2200      	movs	r2, #0
   149c8:	4b10      	ldr	r3, [pc, #64]	; (14a0c <LORAWAN_JoinReqHandler+0xc8>)
   149ca:	54e2      	strb	r2, [r4, r3]
   149cc:	4b10      	ldr	r3, [pc, #64]	; (14a10 <LORAWAN_JoinReqHandler+0xcc>)
   149ce:	4798      	blx	r3
   149d0:	4b10      	ldr	r3, [pc, #64]	; (14a14 <LORAWAN_JoinReqHandler+0xd0>)
   149d2:	7028      	strb	r0, [r5, #0]
   149d4:	606b      	str	r3, [r5, #4]
   149d6:	0028      	movs	r0, r5
   149d8:	4b0f      	ldr	r3, [pc, #60]	; (14a18 <LORAWAN_JoinReqHandler+0xd4>)
   149da:	4798      	blx	r3
   149dc:	2800      	cmp	r0, #0
   149de:	d001      	beq.n	149e4 <LORAWAN_JoinReqHandler+0xa0>
   149e0:	201b      	movs	r0, #27
   149e2:	e7db      	b.n	1499c <LORAWAN_JoinReqHandler+0x58>
   149e4:	220e      	movs	r2, #14
   149e6:	347c      	adds	r4, #124	; 0x7c
   149e8:	7823      	ldrb	r3, [r4, #0]
   149ea:	4393      	bics	r3, r2
   149ec:	001a      	movs	r2, r3
   149ee:	2302      	movs	r3, #2
   149f0:	4313      	orrs	r3, r2
   149f2:	7023      	strb	r3, [r4, #0]
   149f4:	e7d4      	b.n	149a0 <LORAWAN_JoinReqHandler+0x5c>
   149f6:	46c0      	nop			; (mov r8, r8)
   149f8:	20002b5c 	.word	0x20002b5c
   149fc:	0000d805 	.word	0x0000d805
   14a00:	0001090d 	.word	0x0001090d
   14a04:	00010e9d 	.word	0x00010e9d
   14a08:	00015dd9 	.word	0x00015dd9
   14a0c:	0000021e 	.word	0x0000021e
   14a10:	00010ce9 	.word	0x00010ce9
   14a14:	20002d91 	.word	0x20002d91
   14a18:	00015505 	.word	0x00015505

00014a1c <LORAWAN_RxHandler>:
   14a1c:	b513      	push	{r0, r1, r4, lr}
   14a1e:	4b0c      	ldr	r3, [pc, #48]	; (14a50 <LORAWAN_RxHandler+0x34>)
   14a20:	781b      	ldrb	r3, [r3, #0]
   14a22:	2b08      	cmp	r3, #8
   14a24:	d011      	beq.n	14a4a <LORAWAN_RxHandler+0x2e>
   14a26:	2b10      	cmp	r3, #16
   14a28:	d001      	beq.n	14a2e <LORAWAN_RxHandler+0x12>
   14a2a:	2b01      	cmp	r3, #1
   14a2c:	d10b      	bne.n	14a46 <LORAWAN_RxHandler+0x2a>
   14a2e:	466b      	mov	r3, sp
   14a30:	1c9c      	adds	r4, r3, #2
   14a32:	0021      	movs	r1, r4
   14a34:	a801      	add	r0, sp, #4
   14a36:	4b07      	ldr	r3, [pc, #28]	; (14a54 <LORAWAN_RxHandler+0x38>)
   14a38:	4798      	blx	r3
   14a3a:	9801      	ldr	r0, [sp, #4]
   14a3c:	2800      	cmp	r0, #0
   14a3e:	d002      	beq.n	14a46 <LORAWAN_RxHandler+0x2a>
   14a40:	7821      	ldrb	r1, [r4, #0]
   14a42:	4b05      	ldr	r3, [pc, #20]	; (14a58 <LORAWAN_RxHandler+0x3c>)
   14a44:	4798      	blx	r3
   14a46:	2000      	movs	r0, #0
   14a48:	bd16      	pop	{r1, r2, r4, pc}
   14a4a:	4b04      	ldr	r3, [pc, #16]	; (14a5c <LORAWAN_RxHandler+0x40>)
   14a4c:	4798      	blx	r3
   14a4e:	e7fa      	b.n	14a46 <LORAWAN_RxHandler+0x2a>
   14a50:	20002d90 	.word	0x20002d90
   14a54:	000156d1 	.word	0x000156d1
   14a58:	00012e51 	.word	0x00012e51
   14a5c:	00012621 	.word	0x00012621

00014a60 <LORAWAN_PostTask>:
   14a60:	b510      	push	{r4, lr}
   14a62:	4b08      	ldr	r3, [pc, #32]	; (14a84 <LORAWAN_PostTask+0x24>)
   14a64:	0004      	movs	r4, r0
   14a66:	4798      	blx	r3
   14a68:	2201      	movs	r2, #1
   14a6a:	40a2      	lsls	r2, r4
   14a6c:	4906      	ldr	r1, [pc, #24]	; (14a88 <LORAWAN_PostTask+0x28>)
   14a6e:	780b      	ldrb	r3, [r1, #0]
   14a70:	4313      	orrs	r3, r2
   14a72:	b2db      	uxtb	r3, r3
   14a74:	700b      	strb	r3, [r1, #0]
   14a76:	4b05      	ldr	r3, [pc, #20]	; (14a8c <LORAWAN_PostTask+0x2c>)
   14a78:	4798      	blx	r3
   14a7a:	2004      	movs	r0, #4
   14a7c:	4b04      	ldr	r3, [pc, #16]	; (14a90 <LORAWAN_PostTask+0x30>)
   14a7e:	4798      	blx	r3
   14a80:	bd10      	pop	{r4, pc}
   14a82:	46c0      	nop			; (mov r8, r8)
   14a84:	000082b9 	.word	0x000082b9
   14a88:	20001120 	.word	0x20001120
   14a8c:	000082c5 	.word	0x000082c5
   14a90:	0000f3a5 	.word	0x0000f3a5

00014a94 <LORAWAN_TaskHandler>:
   14a94:	b570      	push	{r4, r5, r6, lr}
   14a96:	2601      	movs	r6, #1
   14a98:	4d0e      	ldr	r5, [pc, #56]	; (14ad4 <LORAWAN_TaskHandler+0x40>)
   14a9a:	e015      	b.n	14ac8 <LORAWAN_TaskHandler+0x34>
   14a9c:	2400      	movs	r4, #0
   14a9e:	782b      	ldrb	r3, [r5, #0]
   14aa0:	4123      	asrs	r3, r4
   14aa2:	4233      	tst	r3, r6
   14aa4:	d00d      	beq.n	14ac2 <LORAWAN_TaskHandler+0x2e>
   14aa6:	4b0c      	ldr	r3, [pc, #48]	; (14ad8 <LORAWAN_TaskHandler+0x44>)
   14aa8:	4798      	blx	r3
   14aaa:	0032      	movs	r2, r6
   14aac:	40a2      	lsls	r2, r4
   14aae:	782b      	ldrb	r3, [r5, #0]
   14ab0:	00a4      	lsls	r4, r4, #2
   14ab2:	4393      	bics	r3, r2
   14ab4:	702b      	strb	r3, [r5, #0]
   14ab6:	4b09      	ldr	r3, [pc, #36]	; (14adc <LORAWAN_TaskHandler+0x48>)
   14ab8:	4798      	blx	r3
   14aba:	4b09      	ldr	r3, [pc, #36]	; (14ae0 <LORAWAN_TaskHandler+0x4c>)
   14abc:	58e3      	ldr	r3, [r4, r3]
   14abe:	4798      	blx	r3
   14ac0:	e7ea      	b.n	14a98 <LORAWAN_TaskHandler+0x4>
   14ac2:	3401      	adds	r4, #1
   14ac4:	2c03      	cmp	r4, #3
   14ac6:	d1ea      	bne.n	14a9e <LORAWAN_TaskHandler+0xa>
   14ac8:	7828      	ldrb	r0, [r5, #0]
   14aca:	b2c0      	uxtb	r0, r0
   14acc:	2800      	cmp	r0, #0
   14ace:	d1e5      	bne.n	14a9c <LORAWAN_TaskHandler+0x8>
   14ad0:	bd70      	pop	{r4, r5, r6, pc}
   14ad2:	46c0      	nop			; (mov r8, r8)
   14ad4:	20001120 	.word	0x20001120
   14ad8:	000082b9 	.word	0x000082b9
   14adc:	000082c5 	.word	0x000082c5
   14ae0:	00020360 	.word	0x00020360

00014ae4 <RADIO_GetAttr>:
   14ae4:	b510      	push	{r4, lr}
   14ae6:	000b      	movs	r3, r1
   14ae8:	281f      	cmp	r0, #31
   14aea:	d900      	bls.n	14aee <RADIO_GetAttr+0xa>
   14aec:	e069      	b.n	14bc2 <RADIO_GetAttr+0xde>
   14aee:	f001 fd49 	bl	16584 <__gnu_thumb1_case_uqi>
   14af2:	1410      	.short	0x1410
   14af4:	68201c19 	.word	0x68201c19
   14af8:	312e2a27 	.word	0x312e2a27
   14afc:	3d3a3734 	.word	0x3d3a3734
   14b00:	46434054 	.word	0x46434054
   14b04:	68245149 	.word	0x68245149
   14b08:	68686859 	.word	0x68686859
   14b0c:	5c686817 	.word	0x5c686817
   14b10:	6360      	.short	0x6360
   14b12:	4a2d      	ldr	r2, [pc, #180]	; (14bc8 <RADIO_GetAttr+0xe4>)
   14b14:	7e12      	ldrb	r2, [r2, #24]
   14b16:	701a      	strb	r2, [r3, #0]
   14b18:	e002      	b.n	14b20 <RADIO_GetAttr+0x3c>
   14b1a:	4a2b      	ldr	r2, [pc, #172]	; (14bc8 <RADIO_GetAttr+0xe4>)
   14b1c:	6812      	ldr	r2, [r2, #0]
   14b1e:	601a      	str	r2, [r3, #0]
   14b20:	2000      	movs	r0, #0
   14b22:	bd10      	pop	{r4, pc}
   14b24:	4a28      	ldr	r2, [pc, #160]	; (14bc8 <RADIO_GetAttr+0xe4>)
   14b26:	6852      	ldr	r2, [r2, #4]
   14b28:	e7f9      	b.n	14b1e <RADIO_GetAttr+0x3a>
   14b2a:	4a27      	ldr	r2, [pc, #156]	; (14bc8 <RADIO_GetAttr+0xe4>)
   14b2c:	8a92      	ldrh	r2, [r2, #20]
   14b2e:	801a      	strh	r2, [r3, #0]
   14b30:	e7f6      	b.n	14b20 <RADIO_GetAttr+0x3c>
   14b32:	4a25      	ldr	r2, [pc, #148]	; (14bc8 <RADIO_GetAttr+0xe4>)
   14b34:	3203      	adds	r2, #3
   14b36:	7fd2      	ldrb	r2, [r2, #31]
   14b38:	e7ed      	b.n	14b16 <RADIO_GetAttr+0x32>
   14b3a:	4a23      	ldr	r2, [pc, #140]	; (14bc8 <RADIO_GetAttr+0xe4>)
   14b3c:	3204      	adds	r2, #4
   14b3e:	e7fa      	b.n	14b36 <RADIO_GetAttr+0x52>
   14b40:	4a21      	ldr	r2, [pc, #132]	; (14bc8 <RADIO_GetAttr+0xe4>)
   14b42:	3206      	adds	r2, #6
   14b44:	e7f7      	b.n	14b36 <RADIO_GetAttr+0x52>
   14b46:	4a20      	ldr	r2, [pc, #128]	; (14bc8 <RADIO_GetAttr+0xe4>)
   14b48:	3236      	adds	r2, #54	; 0x36
   14b4a:	7812      	ldrb	r2, [r2, #0]
   14b4c:	e7e3      	b.n	14b16 <RADIO_GetAttr+0x32>
   14b4e:	4a1e      	ldr	r2, [pc, #120]	; (14bc8 <RADIO_GetAttr+0xe4>)
   14b50:	3205      	adds	r2, #5
   14b52:	e7f0      	b.n	14b36 <RADIO_GetAttr+0x52>
   14b54:	4a1c      	ldr	r2, [pc, #112]	; (14bc8 <RADIO_GetAttr+0xe4>)
   14b56:	3234      	adds	r2, #52	; 0x34
   14b58:	e7f7      	b.n	14b4a <RADIO_GetAttr+0x66>
   14b5a:	4a1b      	ldr	r2, [pc, #108]	; (14bc8 <RADIO_GetAttr+0xe4>)
   14b5c:	8ad2      	ldrh	r2, [r2, #22]
   14b5e:	e7e6      	b.n	14b2e <RADIO_GetAttr+0x4a>
   14b60:	4a19      	ldr	r2, [pc, #100]	; (14bc8 <RADIO_GetAttr+0xe4>)
   14b62:	3233      	adds	r2, #51	; 0x33
   14b64:	e7f1      	b.n	14b4a <RADIO_GetAttr+0x66>
   14b66:	4a18      	ldr	r2, [pc, #96]	; (14bc8 <RADIO_GetAttr+0xe4>)
   14b68:	68d2      	ldr	r2, [r2, #12]
   14b6a:	e7d8      	b.n	14b1e <RADIO_GetAttr+0x3a>
   14b6c:	4a16      	ldr	r2, [pc, #88]	; (14bc8 <RADIO_GetAttr+0xe4>)
   14b6e:	6892      	ldr	r2, [r2, #8]
   14b70:	e7d5      	b.n	14b1e <RADIO_GetAttr+0x3a>
   14b72:	4a15      	ldr	r2, [pc, #84]	; (14bc8 <RADIO_GetAttr+0xe4>)
   14b74:	3237      	adds	r2, #55	; 0x37
   14b76:	e7e8      	b.n	14b4a <RADIO_GetAttr+0x66>
   14b78:	4a13      	ldr	r2, [pc, #76]	; (14bc8 <RADIO_GetAttr+0xe4>)
   14b7a:	3238      	adds	r2, #56	; 0x38
   14b7c:	e7e5      	b.n	14b4a <RADIO_GetAttr+0x66>
   14b7e:	4a12      	ldr	r2, [pc, #72]	; (14bc8 <RADIO_GetAttr+0xe4>)
   14b80:	3239      	adds	r2, #57	; 0x39
   14b82:	e7e2      	b.n	14b4a <RADIO_GetAttr+0x66>
   14b84:	4a10      	ldr	r2, [pc, #64]	; (14bc8 <RADIO_GetAttr+0xe4>)
   14b86:	4911      	ldr	r1, [pc, #68]	; (14bcc <RADIO_GetAttr+0xe8>)
   14b88:	3202      	adds	r2, #2
   14b8a:	7fd2      	ldrb	r2, [r2, #31]
   14b8c:	0018      	movs	r0, r3
   14b8e:	4b10      	ldr	r3, [pc, #64]	; (14bd0 <RADIO_GetAttr+0xec>)
   14b90:	4798      	blx	r3
   14b92:	e7c5      	b.n	14b20 <RADIO_GetAttr+0x3c>
   14b94:	4a0c      	ldr	r2, [pc, #48]	; (14bc8 <RADIO_GetAttr+0xe4>)
   14b96:	3202      	adds	r2, #2
   14b98:	e7cd      	b.n	14b36 <RADIO_GetAttr+0x52>
   14b9a:	4a0b      	ldr	r2, [pc, #44]	; (14bc8 <RADIO_GetAttr+0xe4>)
   14b9c:	3232      	adds	r2, #50	; 0x32
   14b9e:	7812      	ldrb	r2, [r2, #0]
   14ba0:	b252      	sxtb	r2, r2
   14ba2:	e7b8      	b.n	14b16 <RADIO_GetAttr+0x32>
   14ba4:	4a08      	ldr	r2, [pc, #32]	; (14bc8 <RADIO_GetAttr+0xe4>)
   14ba6:	3235      	adds	r2, #53	; 0x35
   14ba8:	e7cf      	b.n	14b4a <RADIO_GetAttr+0x66>
   14baa:	4907      	ldr	r1, [pc, #28]	; (14bc8 <RADIO_GetAttr+0xe4>)
   14bac:	2206      	movs	r2, #6
   14bae:	313c      	adds	r1, #60	; 0x3c
   14bb0:	e7ec      	b.n	14b8c <RADIO_GetAttr+0xa8>
   14bb2:	4a05      	ldr	r2, [pc, #20]	; (14bc8 <RADIO_GetAttr+0xe4>)
   14bb4:	3254      	adds	r2, #84	; 0x54
   14bb6:	e7c8      	b.n	14b4a <RADIO_GetAttr+0x66>
   14bb8:	4a03      	ldr	r2, [pc, #12]	; (14bc8 <RADIO_GetAttr+0xe4>)
   14bba:	3256      	adds	r2, #86	; 0x56
   14bbc:	2100      	movs	r1, #0
   14bbe:	5e52      	ldrsh	r2, [r2, r1]
   14bc0:	e7b5      	b.n	14b2e <RADIO_GetAttr+0x4a>
   14bc2:	2005      	movs	r0, #5
   14bc4:	e7ad      	b.n	14b22 <RADIO_GetAttr+0x3e>
   14bc6:	46c0      	nop			; (mov r8, r8)
   14bc8:	20002980 	.word	0x20002980
   14bcc:	20002999 	.word	0x20002999
   14bd0:	00019d11 	.word	0x00019d11

00014bd4 <RADIO_SetAttr>:
   14bd4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   14bd6:	4b71      	ldr	r3, [pc, #452]	; (14d9c <RADIO_SetAttr+0x1c8>)
   14bd8:	0004      	movs	r4, r0
   14bda:	000d      	movs	r5, r1
   14bdc:	4798      	blx	r3
   14bde:	2304      	movs	r3, #4
   14be0:	2801      	cmp	r0, #1
   14be2:	d11a      	bne.n	14c1a <RADIO_SetAttr+0x46>
   14be4:	2c1d      	cmp	r4, #29
   14be6:	d900      	bls.n	14bea <RADIO_SetAttr+0x16>
   14be8:	e0d5      	b.n	14d96 <RADIO_SetAttr+0x1c2>
   14bea:	0020      	movs	r0, r4
   14bec:	f001 fcca 	bl	16584 <__gnu_thumb1_case_uqi>
   14bf0:	605c4844 	.word	0x605c4844
   14bf4:	7770d364 	.word	0x7770d364
   14bf8:	908c8480 	.word	0x908c8480
   14bfc:	a0d39c99 	.word	0xa0d39c99
   14c00:	c2bab1a8 	.word	0xc2bab1a8
   14c04:	d3cad369 	.word	0xd3cad369
   14c08:	d30fd3d3 	.word	0xd30fd3d3
   14c0c:	17d3      	.short	0x17d3
   14c0e:	2303      	movs	r3, #3
   14c10:	2d00      	cmp	r5, #0
   14c12:	d002      	beq.n	14c1a <RADIO_SetAttr+0x46>
   14c14:	4b62      	ldr	r3, [pc, #392]	; (14da0 <RADIO_SetAttr+0x1cc>)
   14c16:	611d      	str	r5, [r3, #16]
   14c18:	2300      	movs	r3, #0
   14c1a:	0018      	movs	r0, r3
   14c1c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   14c1e:	796c      	ldrb	r4, [r5, #5]
   14c20:	2c00      	cmp	r4, #0
   14c22:	d109      	bne.n	14c38 <RADIO_SetAttr+0x64>
   14c24:	4b5e      	ldr	r3, [pc, #376]	; (14da0 <RADIO_SetAttr+0x1cc>)
   14c26:	001a      	movs	r2, r3
   14c28:	649c      	str	r4, [r3, #72]	; 0x48
   14c2a:	879c      	strh	r4, [r3, #60]	; 0x3c
   14c2c:	87dc      	strh	r4, [r3, #62]	; 0x3e
   14c2e:	3240      	adds	r2, #64	; 0x40
   14c30:	3341      	adds	r3, #65	; 0x41
   14c32:	7014      	strb	r4, [r2, #0]
   14c34:	701c      	strb	r4, [r3, #0]
   14c36:	e7ef      	b.n	14c18 <RADIO_SetAttr+0x44>
   14c38:	882f      	ldrh	r7, [r5, #0]
   14c3a:	2303      	movs	r3, #3
   14c3c:	2f00      	cmp	r7, #0
   14c3e:	d0ec      	beq.n	14c1a <RADIO_SetAttr+0x46>
   14c40:	792e      	ldrb	r6, [r5, #4]
   14c42:	2e00      	cmp	r6, #0
   14c44:	d0e9      	beq.n	14c1a <RADIO_SetAttr+0x46>
   14c46:	20fa      	movs	r0, #250	; 0xfa
   14c48:	2202      	movs	r2, #2
   14c4a:	5eab      	ldrsh	r3, [r5, r2]
   14c4c:	0080      	lsls	r0, r0, #2
   14c4e:	0031      	movs	r1, r6
   14c50:	9301      	str	r3, [sp, #4]
   14c52:	4378      	muls	r0, r7
   14c54:	4b53      	ldr	r3, [pc, #332]	; (14da4 <RADIO_SetAttr+0x1d0>)
   14c56:	4798      	blx	r3
   14c58:	4b53      	ldr	r3, [pc, #332]	; (14da8 <RADIO_SetAttr+0x1d4>)
   14c5a:	4798      	blx	r3
   14c5c:	4b53      	ldr	r3, [pc, #332]	; (14dac <RADIO_SetAttr+0x1d8>)
   14c5e:	4798      	blx	r3
   14c60:	466b      	mov	r3, sp
   14c62:	4d4f      	ldr	r5, [pc, #316]	; (14da0 <RADIO_SetAttr+0x1cc>)
   14c64:	889b      	ldrh	r3, [r3, #4]
   14c66:	64a8      	str	r0, [r5, #72]	; 0x48
   14c68:	87eb      	strh	r3, [r5, #62]	; 0x3e
   14c6a:	002b      	movs	r3, r5
   14c6c:	87af      	strh	r7, [r5, #60]	; 0x3c
   14c6e:	3340      	adds	r3, #64	; 0x40
   14c70:	3541      	adds	r5, #65	; 0x41
   14c72:	701e      	strb	r6, [r3, #0]
   14c74:	702c      	strb	r4, [r5, #0]
   14c76:	e7cf      	b.n	14c18 <RADIO_SetAttr+0x44>
   14c78:	782a      	ldrb	r2, [r5, #0]
   14c7a:	4b49      	ldr	r3, [pc, #292]	; (14da0 <RADIO_SetAttr+0x1cc>)
   14c7c:	761a      	strb	r2, [r3, #24]
   14c7e:	e7cb      	b.n	14c18 <RADIO_SetAttr+0x44>
   14c80:	4b4b      	ldr	r3, [pc, #300]	; (14db0 <RADIO_SetAttr+0x1dc>)
   14c82:	682a      	ldr	r2, [r5, #0]
   14c84:	18d1      	adds	r1, r2, r3
   14c86:	4b4b      	ldr	r3, [pc, #300]	; (14db4 <RADIO_SetAttr+0x1e0>)
   14c88:	4299      	cmp	r1, r3
   14c8a:	d90a      	bls.n	14ca2 <RADIO_SetAttr+0xce>
   14c8c:	4b4a      	ldr	r3, [pc, #296]	; (14db8 <RADIO_SetAttr+0x1e4>)
   14c8e:	494b      	ldr	r1, [pc, #300]	; (14dbc <RADIO_SetAttr+0x1e8>)
   14c90:	18d3      	adds	r3, r2, r3
   14c92:	428b      	cmp	r3, r1
   14c94:	d905      	bls.n	14ca2 <RADIO_SetAttr+0xce>
   14c96:	494a      	ldr	r1, [pc, #296]	; (14dc0 <RADIO_SetAttr+0x1ec>)
   14c98:	484a      	ldr	r0, [pc, #296]	; (14dc4 <RADIO_SetAttr+0x1f0>)
   14c9a:	1851      	adds	r1, r2, r1
   14c9c:	2305      	movs	r3, #5
   14c9e:	4281      	cmp	r1, r0
   14ca0:	d8bb      	bhi.n	14c1a <RADIO_SetAttr+0x46>
   14ca2:	4b3f      	ldr	r3, [pc, #252]	; (14da0 <RADIO_SetAttr+0x1cc>)
   14ca4:	601a      	str	r2, [r3, #0]
   14ca6:	e7b7      	b.n	14c18 <RADIO_SetAttr+0x44>
   14ca8:	682a      	ldr	r2, [r5, #0]
   14caa:	4b3d      	ldr	r3, [pc, #244]	; (14da0 <RADIO_SetAttr+0x1cc>)
   14cac:	605a      	str	r2, [r3, #4]
   14cae:	e7b3      	b.n	14c18 <RADIO_SetAttr+0x44>
   14cb0:	882a      	ldrh	r2, [r5, #0]
   14cb2:	4b3b      	ldr	r3, [pc, #236]	; (14da0 <RADIO_SetAttr+0x1cc>)
   14cb4:	829a      	strh	r2, [r3, #20]
   14cb6:	e7af      	b.n	14c18 <RADIO_SetAttr+0x44>
   14cb8:	4b39      	ldr	r3, [pc, #228]	; (14da0 <RADIO_SetAttr+0x1cc>)
   14cba:	782a      	ldrb	r2, [r5, #0]
   14cbc:	3303      	adds	r3, #3
   14cbe:	77da      	strb	r2, [r3, #31]
   14cc0:	e7aa      	b.n	14c18 <RADIO_SetAttr+0x44>
   14cc2:	782a      	ldrb	r2, [r5, #0]
   14cc4:	2305      	movs	r3, #5
   14cc6:	2a01      	cmp	r2, #1
   14cc8:	d8a7      	bhi.n	14c1a <RADIO_SetAttr+0x46>
   14cca:	4b35      	ldr	r3, [pc, #212]	; (14da0 <RADIO_SetAttr+0x1cc>)
   14ccc:	3304      	adds	r3, #4
   14cce:	e7f6      	b.n	14cbe <RADIO_SetAttr+0xea>
   14cd0:	782a      	ldrb	r2, [r5, #0]
   14cd2:	2305      	movs	r3, #5
   14cd4:	2a01      	cmp	r2, #1
   14cd6:	d8a0      	bhi.n	14c1a <RADIO_SetAttr+0x46>
   14cd8:	4b31      	ldr	r3, [pc, #196]	; (14da0 <RADIO_SetAttr+0x1cc>)
   14cda:	3306      	adds	r3, #6
   14cdc:	e7ef      	b.n	14cbe <RADIO_SetAttr+0xea>
   14cde:	782a      	ldrb	r2, [r5, #0]
   14ce0:	2305      	movs	r3, #5
   14ce2:	1fd1      	subs	r1, r2, #7
   14ce4:	2902      	cmp	r1, #2
   14ce6:	d898      	bhi.n	14c1a <RADIO_SetAttr+0x46>
   14ce8:	4b2d      	ldr	r3, [pc, #180]	; (14da0 <RADIO_SetAttr+0x1cc>)
   14cea:	3336      	adds	r3, #54	; 0x36
   14cec:	701a      	strb	r2, [r3, #0]
   14cee:	e793      	b.n	14c18 <RADIO_SetAttr+0x44>
   14cf0:	4b2b      	ldr	r3, [pc, #172]	; (14da0 <RADIO_SetAttr+0x1cc>)
   14cf2:	782a      	ldrb	r2, [r5, #0]
   14cf4:	3305      	adds	r3, #5
   14cf6:	e7e2      	b.n	14cbe <RADIO_SetAttr+0xea>
   14cf8:	782a      	ldrb	r2, [r5, #0]
   14cfa:	2305      	movs	r3, #5
   14cfc:	2a01      	cmp	r2, #1
   14cfe:	d900      	bls.n	14d02 <RADIO_SetAttr+0x12e>
   14d00:	e78b      	b.n	14c1a <RADIO_SetAttr+0x46>
   14d02:	4b27      	ldr	r3, [pc, #156]	; (14da0 <RADIO_SetAttr+0x1cc>)
   14d04:	3334      	adds	r3, #52	; 0x34
   14d06:	e7f1      	b.n	14cec <RADIO_SetAttr+0x118>
   14d08:	882a      	ldrh	r2, [r5, #0]
   14d0a:	4b25      	ldr	r3, [pc, #148]	; (14da0 <RADIO_SetAttr+0x1cc>)
   14d0c:	82da      	strh	r2, [r3, #22]
   14d0e:	e783      	b.n	14c18 <RADIO_SetAttr+0x44>
   14d10:	782a      	ldrb	r2, [r5, #0]
   14d12:	2305      	movs	r3, #5
   14d14:	1e51      	subs	r1, r2, #1
   14d16:	2903      	cmp	r1, #3
   14d18:	d900      	bls.n	14d1c <RADIO_SetAttr+0x148>
   14d1a:	e77e      	b.n	14c1a <RADIO_SetAttr+0x46>
   14d1c:	4b20      	ldr	r3, [pc, #128]	; (14da0 <RADIO_SetAttr+0x1cc>)
   14d1e:	3333      	adds	r3, #51	; 0x33
   14d20:	e7e4      	b.n	14cec <RADIO_SetAttr+0x118>
   14d22:	4b1f      	ldr	r3, [pc, #124]	; (14da0 <RADIO_SetAttr+0x1cc>)
   14d24:	682a      	ldr	r2, [r5, #0]
   14d26:	60da      	str	r2, [r3, #12]
   14d28:	682a      	ldr	r2, [r5, #0]
   14d2a:	4b1d      	ldr	r3, [pc, #116]	; (14da0 <RADIO_SetAttr+0x1cc>)
   14d2c:	609a      	str	r2, [r3, #8]
   14d2e:	e773      	b.n	14c18 <RADIO_SetAttr+0x44>
   14d30:	782a      	ldrb	r2, [r5, #0]
   14d32:	2305      	movs	r3, #5
   14d34:	2a03      	cmp	r2, #3
   14d36:	d900      	bls.n	14d3a <RADIO_SetAttr+0x166>
   14d38:	e76f      	b.n	14c1a <RADIO_SetAttr+0x46>
   14d3a:	4b19      	ldr	r3, [pc, #100]	; (14da0 <RADIO_SetAttr+0x1cc>)
   14d3c:	3337      	adds	r3, #55	; 0x37
   14d3e:	e7d5      	b.n	14cec <RADIO_SetAttr+0x118>
   14d40:	782a      	ldrb	r2, [r5, #0]
   14d42:	2305      	movs	r3, #5
   14d44:	1e51      	subs	r1, r2, #1
   14d46:	2916      	cmp	r1, #22
   14d48:	d900      	bls.n	14d4c <RADIO_SetAttr+0x178>
   14d4a:	e766      	b.n	14c1a <RADIO_SetAttr+0x46>
   14d4c:	4b14      	ldr	r3, [pc, #80]	; (14da0 <RADIO_SetAttr+0x1cc>)
   14d4e:	3338      	adds	r3, #56	; 0x38
   14d50:	e7cc      	b.n	14cec <RADIO_SetAttr+0x118>
   14d52:	782a      	ldrb	r2, [r5, #0]
   14d54:	2305      	movs	r3, #5
   14d56:	1e51      	subs	r1, r2, #1
   14d58:	2916      	cmp	r1, #22
   14d5a:	d900      	bls.n	14d5e <RADIO_SetAttr+0x18a>
   14d5c:	e75d      	b.n	14c1a <RADIO_SetAttr+0x46>
   14d5e:	4b10      	ldr	r3, [pc, #64]	; (14da0 <RADIO_SetAttr+0x1cc>)
   14d60:	3339      	adds	r3, #57	; 0x39
   14d62:	e7c3      	b.n	14cec <RADIO_SetAttr+0x118>
   14d64:	4b0e      	ldr	r3, [pc, #56]	; (14da0 <RADIO_SetAttr+0x1cc>)
   14d66:	0029      	movs	r1, r5
   14d68:	3302      	adds	r3, #2
   14d6a:	7fda      	ldrb	r2, [r3, #31]
   14d6c:	4816      	ldr	r0, [pc, #88]	; (14dc8 <RADIO_SetAttr+0x1f4>)
   14d6e:	4b17      	ldr	r3, [pc, #92]	; (14dcc <RADIO_SetAttr+0x1f8>)
   14d70:	4798      	blx	r3
   14d72:	e751      	b.n	14c18 <RADIO_SetAttr+0x44>
   14d74:	782b      	ldrb	r3, [r5, #0]
   14d76:	1c1a      	adds	r2, r3, #0
   14d78:	2b08      	cmp	r3, #8
   14d7a:	d900      	bls.n	14d7e <RADIO_SetAttr+0x1aa>
   14d7c:	2208      	movs	r2, #8
   14d7e:	4b08      	ldr	r3, [pc, #32]	; (14da0 <RADIO_SetAttr+0x1cc>)
   14d80:	3302      	adds	r3, #2
   14d82:	e79c      	b.n	14cbe <RADIO_SetAttr+0xea>
   14d84:	2305      	movs	r3, #5
   14d86:	782a      	ldrb	r2, [r5, #0]
   14d88:	1fd1      	subs	r1, r2, #7
   14d8a:	4299      	cmp	r1, r3
   14d8c:	d900      	bls.n	14d90 <RADIO_SetAttr+0x1bc>
   14d8e:	e744      	b.n	14c1a <RADIO_SetAttr+0x46>
   14d90:	4b03      	ldr	r3, [pc, #12]	; (14da0 <RADIO_SetAttr+0x1cc>)
   14d92:	3335      	adds	r3, #53	; 0x35
   14d94:	e7aa      	b.n	14cec <RADIO_SetAttr+0x118>
   14d96:	2305      	movs	r3, #5
   14d98:	e73f      	b.n	14c1a <RADIO_SetAttr+0x46>
   14d9a:	46c0      	nop			; (mov r8, r8)
   14d9c:	000154e9 	.word	0x000154e9
   14da0:	20002980 	.word	0x20002980
   14da4:	000166c1 	.word	0x000166c1
   14da8:	00017905 	.word	0x00017905
   14dac:	00016a1d 	.word	0x00016a1d
   14db0:	f7d58bc0 	.word	0xf7d58bc0
   14db4:	0243d580 	.word	0x0243d580
   14db8:	e78fe580 	.word	0xe78fe580
   14dbc:	06dac2c0 	.word	0x06dac2c0
   14dc0:	cc9eec80 	.word	0xcc9eec80
   14dc4:	096ae380 	.word	0x096ae380
   14dc8:	20002999 	.word	0x20002999
   14dcc:	00019d11 	.word	0x00019d11

00014dd0 <RADIO_Init>:
   14dd0:	b510      	push	{r4, lr}
   14dd2:	4b0c      	ldr	r3, [pc, #48]	; (14e04 <RADIO_Init+0x34>)
   14dd4:	4798      	blx	r3
   14dd6:	4b0c      	ldr	r3, [pc, #48]	; (14e08 <RADIO_Init+0x38>)
   14dd8:	201f      	movs	r0, #31
   14dda:	4798      	blx	r3
   14ddc:	4c0b      	ldr	r4, [pc, #44]	; (14e0c <RADIO_Init+0x3c>)
   14dde:	490c      	ldr	r1, [pc, #48]	; (14e10 <RADIO_Init+0x40>)
   14de0:	2001      	movs	r0, #1
   14de2:	47a0      	blx	r4
   14de4:	490b      	ldr	r1, [pc, #44]	; (14e14 <RADIO_Init+0x44>)
   14de6:	2002      	movs	r0, #2
   14de8:	47a0      	blx	r4
   14dea:	490b      	ldr	r1, [pc, #44]	; (14e18 <RADIO_Init+0x48>)
   14dec:	2004      	movs	r0, #4
   14dee:	47a0      	blx	r4
   14df0:	490a      	ldr	r1, [pc, #40]	; (14e1c <RADIO_Init+0x4c>)
   14df2:	2008      	movs	r0, #8
   14df4:	47a0      	blx	r4
   14df6:	490a      	ldr	r1, [pc, #40]	; (14e20 <RADIO_Init+0x50>)
   14df8:	2010      	movs	r0, #16
   14dfa:	47a0      	blx	r4
   14dfc:	4909      	ldr	r1, [pc, #36]	; (14e24 <RADIO_Init+0x54>)
   14dfe:	2020      	movs	r0, #32
   14e00:	47a0      	blx	r4
   14e02:	bd10      	pop	{r4, pc}
   14e04:	00015be5 	.word	0x00015be5
   14e08:	000154f5 	.word	0x000154f5
   14e0c:	000080dd 	.word	0x000080dd
   14e10:	00015281 	.word	0x00015281
   14e14:	000152f9 	.word	0x000152f9
   14e18:	00015369 	.word	0x00015369
   14e1c:	000153b9 	.word	0x000153b9
   14e20:	000153e1 	.word	0x000153e1
   14e24:	00015409 	.word	0x00015409

00014e28 <Radio_WriteFrequency>:
   14e28:	b570      	push	{r4, r5, r6, lr}
   14e2a:	490d      	ldr	r1, [pc, #52]	; (14e60 <Radio_WriteFrequency+0x38>)
   14e2c:	4d0d      	ldr	r5, [pc, #52]	; (14e64 <Radio_WriteFrequency+0x3c>)
   14e2e:	0006      	movs	r6, r0
   14e30:	47a8      	blx	r5
   14e32:	4b0d      	ldr	r3, [pc, #52]	; (14e68 <Radio_WriteFrequency+0x40>)
   14e34:	0004      	movs	r4, r0
   14e36:	490a      	ldr	r1, [pc, #40]	; (14e60 <Radio_WriteFrequency+0x38>)
   14e38:	0030      	movs	r0, r6
   14e3a:	4798      	blx	r3
   14e3c:	0208      	lsls	r0, r1, #8
   14e3e:	4908      	ldr	r1, [pc, #32]	; (14e60 <Radio_WriteFrequency+0x38>)
   14e40:	47a8      	blx	r5
   14e42:	0224      	lsls	r4, r4, #8
   14e44:	1904      	adds	r4, r0, r4
   14e46:	0c21      	lsrs	r1, r4, #16
   14e48:	4d08      	ldr	r5, [pc, #32]	; (14e6c <Radio_WriteFrequency+0x44>)
   14e4a:	b2c9      	uxtb	r1, r1
   14e4c:	2006      	movs	r0, #6
   14e4e:	47a8      	blx	r5
   14e50:	0a21      	lsrs	r1, r4, #8
   14e52:	b2c9      	uxtb	r1, r1
   14e54:	2007      	movs	r0, #7
   14e56:	47a8      	blx	r5
   14e58:	b2e1      	uxtb	r1, r4
   14e5a:	2008      	movs	r0, #8
   14e5c:	47a8      	blx	r5
   14e5e:	bd70      	pop	{r4, r5, r6, pc}
   14e60:	00003d09 	.word	0x00003d09
   14e64:	000165ad 	.word	0x000165ad
   14e68:	000166b9 	.word	0x000166b9
   14e6c:	00008009 	.word	0x00008009

00014e70 <Radio_WriteConfiguration>:
   14e70:	b5f0      	push	{r4, r5, r6, r7, lr}
   14e72:	4cb0      	ldr	r4, [pc, #704]	; (15134 <Radio_WriteConfiguration+0x2c4>)
   14e74:	2200      	movs	r2, #0
   14e76:	0023      	movs	r3, r4
   14e78:	b085      	sub	sp, #20
   14e7a:	9002      	str	r0, [sp, #8]
   14e7c:	3334      	adds	r3, #52	; 0x34
   14e7e:	0010      	movs	r0, r2
   14e80:	7819      	ldrb	r1, [r3, #0]
   14e82:	4bad      	ldr	r3, [pc, #692]	; (15138 <Radio_WriteConfiguration+0x2c8>)
   14e84:	4798      	blx	r3
   14e86:	4bad      	ldr	r3, [pc, #692]	; (1513c <Radio_WriteConfiguration+0x2cc>)
   14e88:	6820      	ldr	r0, [r4, #0]
   14e8a:	4798      	blx	r3
   14e8c:	1ce3      	adds	r3, r4, #3
   14e8e:	1d62      	adds	r2, r4, #5
   14e90:	7fdb      	ldrb	r3, [r3, #31]
   14e92:	7fd2      	ldrb	r2, [r2, #31]
   14e94:	b25b      	sxtb	r3, r3
   14e96:	4eaa      	ldr	r6, [pc, #680]	; (15140 <Radio_WriteConfiguration+0x2d0>)
   14e98:	4daa      	ldr	r5, [pc, #680]	; (15144 <Radio_WriteConfiguration+0x2d4>)
   14e9a:	2a00      	cmp	r2, #0
   14e9c:	d000      	beq.n	14ea0 <Radio_WriteConfiguration+0x30>
   14e9e:	e0fc      	b.n	1509a <Radio_WriteConfiguration+0x22a>
   14ea0:	1c1f      	adds	r7, r3, #0
   14ea2:	2b0f      	cmp	r3, #15
   14ea4:	dc00      	bgt.n	14ea8 <Radio_WriteConfiguration+0x38>
   14ea6:	e0ec      	b.n	15082 <Radio_WriteConfiguration+0x212>
   14ea8:	270f      	movs	r7, #15
   14eaa:	b27b      	sxtb	r3, r7
   14eac:	204d      	movs	r0, #77	; 0x4d
   14eae:	9301      	str	r3, [sp, #4]
   14eb0:	47b0      	blx	r6
   14eb2:	21f8      	movs	r1, #248	; 0xf8
   14eb4:	4008      	ands	r0, r1
   14eb6:	39f4      	subs	r1, #244	; 0xf4
   14eb8:	4301      	orrs	r1, r0
   14eba:	204d      	movs	r0, #77	; 0x4d
   14ebc:	47a8      	blx	r5
   14ebe:	b27b      	sxtb	r3, r7
   14ec0:	2b00      	cmp	r3, #0
   14ec2:	db00      	blt.n	14ec6 <Radio_WriteConfiguration+0x56>
   14ec4:	e0e4      	b.n	15090 <Radio_WriteConfiguration+0x220>
   14ec6:	3703      	adds	r7, #3
   14ec8:	b2f9      	uxtb	r1, r7
   14eca:	2720      	movs	r7, #32
   14ecc:	4339      	orrs	r1, r7
   14ece:	2009      	movs	r0, #9
   14ed0:	47a8      	blx	r5
   14ed2:	0023      	movs	r3, r4
   14ed4:	3334      	adds	r3, #52	; 0x34
   14ed6:	781f      	ldrb	r7, [r3, #0]
   14ed8:	2f01      	cmp	r7, #1
   14eda:	d000      	beq.n	14ede <Radio_WriteConfiguration+0x6e>
   14edc:	e144      	b.n	15168 <Radio_WriteConfiguration+0x2f8>
   14ede:	7e21      	ldrb	r1, [r4, #24]
   14ee0:	2039      	movs	r0, #57	; 0x39
   14ee2:	47a8      	blx	r5
   14ee4:	4b98      	ldr	r3, [pc, #608]	; (15148 <Radio_WriteConfiguration+0x2d8>)
   14ee6:	201d      	movs	r0, #29
   14ee8:	7819      	ldrb	r1, [r3, #0]
   14eea:	0023      	movs	r3, r4
   14eec:	3333      	adds	r3, #51	; 0x33
   14eee:	781b      	ldrb	r3, [r3, #0]
   14ef0:	0109      	lsls	r1, r1, #4
   14ef2:	005b      	lsls	r3, r3, #1
   14ef4:	4319      	orrs	r1, r3
   14ef6:	1de3      	adds	r3, r4, #7
   14ef8:	7fdb      	ldrb	r3, [r3, #31]
   14efa:	401f      	ands	r7, r3
   14efc:	4339      	orrs	r1, r7
   14efe:	b2c9      	uxtb	r1, r1
   14f00:	47a8      	blx	r5
   14f02:	1d23      	adds	r3, r4, #4
   14f04:	7fd9      	ldrb	r1, [r3, #31]
   14f06:	2304      	movs	r3, #4
   14f08:	0089      	lsls	r1, r1, #2
   14f0a:	4019      	ands	r1, r3
   14f0c:	0023      	movs	r3, r4
   14f0e:	3335      	adds	r3, #53	; 0x35
   14f10:	781b      	ldrb	r3, [r3, #0]
   14f12:	201e      	movs	r0, #30
   14f14:	011b      	lsls	r3, r3, #4
   14f16:	4319      	orrs	r1, r3
   14f18:	9b02      	ldr	r3, [sp, #8]
   14f1a:	059b      	lsls	r3, r3, #22
   14f1c:	0f9b      	lsrs	r3, r3, #30
   14f1e:	4319      	orrs	r1, r3
   14f20:	b2c9      	uxtb	r1, r1
   14f22:	47a8      	blx	r5
   14f24:	2300      	movs	r3, #0
   14f26:	8ae1      	ldrh	r1, [r4, #22]
   14f28:	4299      	cmp	r1, r3
   14f2a:	d011      	beq.n	14f50 <Radio_WriteConfiguration+0xe0>
   14f2c:	4a86      	ldr	r2, [pc, #536]	; (15148 <Radio_WriteConfiguration+0x2d8>)
   14f2e:	7812      	ldrb	r2, [r2, #0]
   14f30:	2a08      	cmp	r2, #8
   14f32:	d100      	bne.n	14f36 <Radio_WriteConfiguration+0xc6>
   14f34:	e0e4      	b.n	15100 <Radio_WriteConfiguration+0x290>
   14f36:	2a09      	cmp	r2, #9
   14f38:	d100      	bne.n	14f3c <Radio_WriteConfiguration+0xcc>
   14f3a:	e0e3      	b.n	15104 <Radio_WriteConfiguration+0x294>
   14f3c:	2a07      	cmp	r2, #7
   14f3e:	d000      	beq.n	14f42 <Radio_WriteConfiguration+0xd2>
   14f40:	e0e3      	b.n	1510a <Radio_WriteConfiguration+0x29a>
   14f42:	337d      	adds	r3, #125	; 0x7d
   14f44:	4359      	muls	r1, r3
   14f46:	0023      	movs	r3, r4
   14f48:	3335      	adds	r3, #53	; 0x35
   14f4a:	781b      	ldrb	r3, [r3, #0]
   14f4c:	40d9      	lsrs	r1, r3
   14f4e:	000b      	movs	r3, r1
   14f50:	b2d9      	uxtb	r1, r3
   14f52:	2024      	movs	r0, #36	; 0x24
   14f54:	4d7b      	ldr	r5, [pc, #492]	; (15144 <Radio_WriteConfiguration+0x2d4>)
   14f56:	47a8      	blx	r5
   14f58:	466b      	mov	r3, sp
   14f5a:	201f      	movs	r0, #31
   14f5c:	7a19      	ldrb	r1, [r3, #8]
   14f5e:	47a8      	blx	r5
   14f60:	2026      	movs	r0, #38	; 0x26
   14f62:	47b0      	blx	r6
   14f64:	0023      	movs	r3, r4
   14f66:	3335      	adds	r3, #53	; 0x35
   14f68:	781b      	ldrb	r3, [r3, #0]
   14f6a:	2b0c      	cmp	r3, #12
   14f6c:	d105      	bne.n	14f7a <Radio_WriteConfiguration+0x10a>
   14f6e:	0023      	movs	r3, r4
   14f70:	3336      	adds	r3, #54	; 0x36
   14f72:	781b      	ldrb	r3, [r3, #0]
   14f74:	3b07      	subs	r3, #7
   14f76:	2b01      	cmp	r3, #1
   14f78:	d906      	bls.n	14f88 <Radio_WriteConfiguration+0x118>
   14f7a:	6b62      	ldr	r2, [r4, #52]	; 0x34
   14f7c:	4b73      	ldr	r3, [pc, #460]	; (1514c <Radio_WriteConfiguration+0x2dc>)
   14f7e:	4013      	ands	r3, r2
   14f80:	4a73      	ldr	r2, [pc, #460]	; (15150 <Radio_WriteConfiguration+0x2e0>)
   14f82:	4293      	cmp	r3, r2
   14f84:	d000      	beq.n	14f88 <Radio_WriteConfiguration+0x118>
   14f86:	e0c2      	b.n	1510e <Radio_WriteConfiguration+0x29e>
   14f88:	2108      	movs	r1, #8
   14f8a:	4308      	orrs	r0, r1
   14f8c:	b2c0      	uxtb	r0, r0
   14f8e:	2104      	movs	r1, #4
   14f90:	4301      	orrs	r1, r0
   14f92:	2026      	movs	r0, #38	; 0x26
   14f94:	47a8      	blx	r5
   14f96:	2031      	movs	r0, #49	; 0x31
   14f98:	47b0      	blx	r6
   14f9a:	21f8      	movs	r1, #248	; 0xf8
   14f9c:	4008      	ands	r0, r1
   14f9e:	39f5      	subs	r1, #245	; 0xf5
   14fa0:	4301      	orrs	r1, r0
   14fa2:	2031      	movs	r0, #49	; 0x31
   14fa4:	47a8      	blx	r5
   14fa6:	210a      	movs	r1, #10
   14fa8:	2037      	movs	r0, #55	; 0x37
   14faa:	47a8      	blx	r5
   14fac:	0023      	movs	r3, r4
   14fae:	3331      	adds	r3, #49	; 0x31
   14fb0:	781b      	ldrb	r3, [r3, #0]
   14fb2:	2b12      	cmp	r3, #18
   14fb4:	d11e      	bne.n	14ff4 <Radio_WriteConfiguration+0x184>
   14fb6:	0023      	movs	r3, r4
   14fb8:	3336      	adds	r3, #54	; 0x36
   14fba:	781b      	ldrb	r3, [r3, #0]
   14fbc:	3b07      	subs	r3, #7
   14fbe:	2b01      	cmp	r3, #1
   14fc0:	d80b      	bhi.n	14fda <Radio_WriteConfiguration+0x16a>
   14fc2:	2031      	movs	r0, #49	; 0x31
   14fc4:	47b0      	blx	r6
   14fc6:	217f      	movs	r1, #127	; 0x7f
   14fc8:	4001      	ands	r1, r0
   14fca:	2031      	movs	r0, #49	; 0x31
   14fcc:	47a8      	blx	r5
   14fce:	2140      	movs	r1, #64	; 0x40
   14fd0:	202f      	movs	r0, #47	; 0x2f
   14fd2:	47a8      	blx	r5
   14fd4:	2100      	movs	r1, #0
   14fd6:	2030      	movs	r0, #48	; 0x30
   14fd8:	47a8      	blx	r5
   14fda:	0023      	movs	r3, r4
   14fdc:	3336      	adds	r3, #54	; 0x36
   14fde:	781b      	ldrb	r3, [r3, #0]
   14fe0:	2b09      	cmp	r3, #9
   14fe2:	d107      	bne.n	14ff4 <Radio_WriteConfiguration+0x184>
   14fe4:	2031      	movs	r0, #49	; 0x31
   14fe6:	47b0      	blx	r6
   14fe8:	2180      	movs	r1, #128	; 0x80
   14fea:	4249      	negs	r1, r1
   14fec:	4301      	orrs	r1, r0
   14fee:	b2c9      	uxtb	r1, r1
   14ff0:	2031      	movs	r0, #49	; 0x31
   14ff2:	47a8      	blx	r5
   14ff4:	2033      	movs	r0, #51	; 0x33
   14ff6:	47b0      	blx	r6
   14ff8:	1da3      	adds	r3, r4, #6
   14ffa:	7fd9      	ldrb	r1, [r3, #31]
   14ffc:	2340      	movs	r3, #64	; 0x40
   14ffe:	0189      	lsls	r1, r1, #6
   15000:	4398      	bics	r0, r3
   15002:	4019      	ands	r1, r3
   15004:	4301      	orrs	r1, r0
   15006:	b2c9      	uxtb	r1, r1
   15008:	2033      	movs	r0, #51	; 0x33
   1500a:	47a8      	blx	r5
   1500c:	8aa1      	ldrh	r1, [r4, #20]
   1500e:	2020      	movs	r0, #32
   15010:	0a09      	lsrs	r1, r1, #8
   15012:	47a8      	blx	r5
   15014:	7d21      	ldrb	r1, [r4, #20]
   15016:	2021      	movs	r0, #33	; 0x21
   15018:	47a8      	blx	r5
   1501a:	2100      	movs	r1, #0
   1501c:	200d      	movs	r0, #13
   1501e:	47a8      	blx	r5
   15020:	2100      	movs	r1, #0
   15022:	200e      	movs	r0, #14
   15024:	47a8      	blx	r5
   15026:	2100      	movs	r1, #0
   15028:	200f      	movs	r0, #15
   1502a:	47a8      	blx	r5
   1502c:	0023      	movs	r3, r4
   1502e:	3331      	adds	r3, #49	; 0x31
   15030:	781b      	ldrb	r3, [r3, #0]
   15032:	2b12      	cmp	r3, #18
   15034:	d120      	bne.n	15078 <Radio_WriteConfiguration+0x208>
   15036:	0023      	movs	r3, r4
   15038:	3336      	adds	r3, #54	; 0x36
   1503a:	781b      	ldrb	r3, [r3, #0]
   1503c:	2b09      	cmp	r3, #9
   1503e:	d000      	beq.n	15042 <Radio_WriteConfiguration+0x1d2>
   15040:	e072      	b.n	15128 <Radio_WriteConfiguration+0x2b8>
   15042:	4a44      	ldr	r2, [pc, #272]	; (15154 <Radio_WriteConfiguration+0x2e4>)
   15044:	6823      	ldr	r3, [r4, #0]
   15046:	1899      	adds	r1, r3, r2
   15048:	4a43      	ldr	r2, [pc, #268]	; (15158 <Radio_WriteConfiguration+0x2e8>)
   1504a:	4291      	cmp	r1, r2
   1504c:	d862      	bhi.n	15114 <Radio_WriteConfiguration+0x2a4>
   1504e:	2102      	movs	r1, #2
   15050:	2036      	movs	r0, #54	; 0x36
   15052:	47a8      	blx	r5
   15054:	2164      	movs	r1, #100	; 0x64
   15056:	203a      	movs	r0, #58	; 0x3a
   15058:	47a8      	blx	r5
   1505a:	0023      	movs	r3, r4
   1505c:	3336      	adds	r3, #54	; 0x36
   1505e:	781b      	ldrb	r3, [r3, #0]
   15060:	2165      	movs	r1, #101	; 0x65
   15062:	203a      	movs	r0, #58	; 0x3a
   15064:	2b09      	cmp	r3, #9
   15066:	d162      	bne.n	1512e <Radio_WriteConfiguration+0x2be>
   15068:	3406      	adds	r4, #6
   1506a:	7fe3      	ldrb	r3, [r4, #31]
   1506c:	2b01      	cmp	r3, #1
   1506e:	d15e      	bne.n	1512e <Radio_WriteConfiguration+0x2be>
   15070:	47a8      	blx	r5
   15072:	2119      	movs	r1, #25
   15074:	203b      	movs	r0, #59	; 0x3b
   15076:	47a8      	blx	r5
   15078:	21ff      	movs	r1, #255	; 0xff
   1507a:	2012      	movs	r0, #18
   1507c:	47a8      	blx	r5
   1507e:	b005      	add	sp, #20
   15080:	bdf0      	pop	{r4, r5, r6, r7, pc}
   15082:	b25b      	sxtb	r3, r3
   15084:	3303      	adds	r3, #3
   15086:	db00      	blt.n	1508a <Radio_WriteConfiguration+0x21a>
   15088:	e70f      	b.n	14eaa <Radio_WriteConfiguration+0x3a>
   1508a:	4b34      	ldr	r3, [pc, #208]	; (1515c <Radio_WriteConfiguration+0x2ec>)
   1508c:	781f      	ldrb	r7, [r3, #0]
   1508e:	e70c      	b.n	14eaa <Radio_WriteConfiguration+0x3a>
   15090:	2170      	movs	r1, #112	; 0x70
   15092:	9b01      	ldr	r3, [sp, #4]
   15094:	4319      	orrs	r1, r3
   15096:	b2c9      	uxtb	r1, r1
   15098:	e719      	b.n	14ece <Radio_WriteConfiguration+0x5e>
   1509a:	2b01      	cmp	r3, #1
   1509c:	dd07      	ble.n	150ae <Radio_WriteConfiguration+0x23e>
   1509e:	2714      	movs	r7, #20
   150a0:	2b13      	cmp	r3, #19
   150a2:	dc06      	bgt.n	150b2 <Radio_WriteConfiguration+0x242>
   150a4:	1c1f      	adds	r7, r3, #0
   150a6:	2b11      	cmp	r3, #17
   150a8:	dd02      	ble.n	150b0 <Radio_WriteConfiguration+0x240>
   150aa:	2711      	movs	r7, #17
   150ac:	e000      	b.n	150b0 <Radio_WriteConfiguration+0x240>
   150ae:	2702      	movs	r7, #2
   150b0:	b27f      	sxtb	r7, r7
   150b2:	200b      	movs	r0, #11
   150b4:	47b0      	blx	r6
   150b6:	9003      	str	r0, [sp, #12]
   150b8:	204d      	movs	r0, #77	; 0x4d
   150ba:	47b0      	blx	r6
   150bc:	2307      	movs	r3, #7
   150be:	4398      	bics	r0, r3
   150c0:	b2c1      	uxtb	r1, r0
   150c2:	2f14      	cmp	r7, #20
   150c4:	d112      	bne.n	150ec <Radio_WriteConfiguration+0x27c>
   150c6:	4319      	orrs	r1, r3
   150c8:	9b03      	ldr	r3, [sp, #12]
   150ca:	37cb      	adds	r7, #203	; 0xcb
   150cc:	403b      	ands	r3, r7
   150ce:	001f      	movs	r7, r3
   150d0:	230f      	movs	r3, #15
   150d2:	9301      	str	r3, [sp, #4]
   150d4:	204d      	movs	r0, #77	; 0x4d
   150d6:	47a8      	blx	r5
   150d8:	2180      	movs	r1, #128	; 0x80
   150da:	9b01      	ldr	r3, [sp, #4]
   150dc:	4249      	negs	r1, r1
   150de:	4319      	orrs	r1, r3
   150e0:	b2c9      	uxtb	r1, r1
   150e2:	2009      	movs	r0, #9
   150e4:	47a8      	blx	r5
   150e6:	0039      	movs	r1, r7
   150e8:	200b      	movs	r0, #11
   150ea:	e6f1      	b.n	14ed0 <Radio_WriteConfiguration+0x60>
   150ec:	3f02      	subs	r7, #2
   150ee:	b27b      	sxtb	r3, r7
   150f0:	2720      	movs	r7, #32
   150f2:	2004      	movs	r0, #4
   150f4:	9301      	str	r3, [sp, #4]
   150f6:	9b03      	ldr	r3, [sp, #12]
   150f8:	4301      	orrs	r1, r0
   150fa:	431f      	orrs	r7, r3
   150fc:	b2ff      	uxtb	r7, r7
   150fe:	e7e9      	b.n	150d4 <Radio_WriteConfiguration+0x264>
   15100:	23fa      	movs	r3, #250	; 0xfa
   15102:	e71f      	b.n	14f44 <Radio_WriteConfiguration+0xd4>
   15104:	23fa      	movs	r3, #250	; 0xfa
   15106:	005b      	lsls	r3, r3, #1
   15108:	e71c      	b.n	14f44 <Radio_WriteConfiguration+0xd4>
   1510a:	0019      	movs	r1, r3
   1510c:	e71b      	b.n	14f46 <Radio_WriteConfiguration+0xd6>
   1510e:	21f7      	movs	r1, #247	; 0xf7
   15110:	4008      	ands	r0, r1
   15112:	e73c      	b.n	14f8e <Radio_WriteConfiguration+0x11e>
   15114:	4a12      	ldr	r2, [pc, #72]	; (15160 <Radio_WriteConfiguration+0x2f0>)
   15116:	189b      	adds	r3, r3, r2
   15118:	4a12      	ldr	r2, [pc, #72]	; (15164 <Radio_WriteConfiguration+0x2f4>)
   1511a:	4293      	cmp	r3, r2
   1511c:	d804      	bhi.n	15128 <Radio_WriteConfiguration+0x2b8>
   1511e:	2102      	movs	r1, #2
   15120:	2036      	movs	r0, #54	; 0x36
   15122:	47a8      	blx	r5
   15124:	217f      	movs	r1, #127	; 0x7f
   15126:	e796      	b.n	15056 <Radio_WriteConfiguration+0x1e6>
   15128:	2103      	movs	r1, #3
   1512a:	2036      	movs	r0, #54	; 0x36
   1512c:	e794      	b.n	15058 <Radio_WriteConfiguration+0x1e8>
   1512e:	47a8      	blx	r5
   15130:	211d      	movs	r1, #29
   15132:	e79f      	b.n	15074 <Radio_WriteConfiguration+0x204>
   15134:	20002980 	.word	0x20002980
   15138:	0000f3dd 	.word	0x0000f3dd
   1513c:	00014e29 	.word	0x00014e29
   15140:	00008031 	.word	0x00008031
   15144:	00008009 	.word	0x00008009
   15148:	200029b6 	.word	0x200029b6
   1514c:	00ffff00 	.word	0x00ffff00
   15150:	00070b00 	.word	0x00070b00
   15154:	cc9eec80 	.word	0xcc9eec80
   15158:	096ae380 	.word	0x096ae380
   1515c:	0002036c 	.word	0x0002036c
   15160:	e78fe580 	.word	0xe78fe580
   15164:	06dac2c0 	.word	0x06dac2c0
   15168:	6863      	ldr	r3, [r4, #4]
   1516a:	492c      	ldr	r1, [pc, #176]	; (1521c <Radio_WriteConfiguration+0x3ac>)
   1516c:	0218      	lsls	r0, r3, #8
   1516e:	4b2c      	ldr	r3, [pc, #176]	; (15220 <Radio_WriteConfiguration+0x3b0>)
   15170:	4798      	blx	r3
   15172:	0007      	movs	r7, r0
   15174:	0a01      	lsrs	r1, r0, #8
   15176:	b2c9      	uxtb	r1, r1
   15178:	2004      	movs	r0, #4
   1517a:	47a8      	blx	r5
   1517c:	b2f9      	uxtb	r1, r7
   1517e:	2005      	movs	r0, #5
   15180:	47a8      	blx	r5
   15182:	4b27      	ldr	r3, [pc, #156]	; (15220 <Radio_WriteConfiguration+0x3b0>)
   15184:	68a1      	ldr	r1, [r4, #8]
   15186:	4827      	ldr	r0, [pc, #156]	; (15224 <Radio_WriteConfiguration+0x3b4>)
   15188:	4798      	blx	r3
   1518a:	0007      	movs	r7, r0
   1518c:	0a01      	lsrs	r1, r0, #8
   1518e:	b2c9      	uxtb	r1, r1
   15190:	2002      	movs	r0, #2
   15192:	47a8      	blx	r5
   15194:	b2f9      	uxtb	r1, r7
   15196:	2003      	movs	r0, #3
   15198:	47a8      	blx	r5
   1519a:	2100      	movs	r1, #0
   1519c:	205d      	movs	r0, #93	; 0x5d
   1519e:	47a8      	blx	r5
   151a0:	8aa1      	ldrh	r1, [r4, #20]
   151a2:	2025      	movs	r0, #37	; 0x25
   151a4:	0a09      	lsrs	r1, r1, #8
   151a6:	47a8      	blx	r5
   151a8:	7d21      	ldrb	r1, [r4, #20]
   151aa:	2026      	movs	r0, #38	; 0x26
   151ac:	47a8      	blx	r5
   151ae:	219e      	movs	r1, #158	; 0x9e
   151b0:	200d      	movs	r0, #13
   151b2:	47a8      	blx	r5
   151b4:	21bf      	movs	r1, #191	; 0xbf
   151b6:	2035      	movs	r0, #53	; 0x35
   151b8:	47a8      	blx	r5
   151ba:	200a      	movs	r0, #10
   151bc:	47b0      	blx	r6
   151be:	0023      	movs	r3, r4
   151c0:	3337      	adds	r3, #55	; 0x37
   151c2:	7819      	ldrb	r1, [r3, #0]
   151c4:	2360      	movs	r3, #96	; 0x60
   151c6:	0149      	lsls	r1, r1, #5
   151c8:	4398      	bics	r0, r3
   151ca:	4301      	orrs	r1, r0
   151cc:	b2c9      	uxtb	r1, r1
   151ce:	200a      	movs	r0, #10
   151d0:	47a8      	blx	r5
   151d2:	1d23      	adds	r3, r4, #4
   151d4:	7fdb      	ldrb	r3, [r3, #31]
   151d6:	21c0      	movs	r1, #192	; 0xc0
   151d8:	2b00      	cmp	r3, #0
   151da:	d000      	beq.n	151de <Radio_WriteConfiguration+0x36e>
   151dc:	3110      	adds	r1, #16
   151de:	2030      	movs	r0, #48	; 0x30
   151e0:	47a8      	blx	r5
   151e2:	2600      	movs	r6, #0
   151e4:	1ca3      	adds	r3, r4, #2
   151e6:	7fd9      	ldrb	r1, [r3, #31]
   151e8:	428e      	cmp	r6, r1
   151ea:	d30d      	bcc.n	15208 <Radio_WriteConfiguration+0x398>
   151ec:	2900      	cmp	r1, #0
   151ee:	d003      	beq.n	151f8 <Radio_WriteConfiguration+0x388>
   151f0:	2310      	movs	r3, #16
   151f2:	3901      	subs	r1, #1
   151f4:	4319      	orrs	r1, r3
   151f6:	b2c9      	uxtb	r1, r1
   151f8:	2027      	movs	r0, #39	; 0x27
   151fa:	47a8      	blx	r5
   151fc:	21ff      	movs	r1, #255	; 0xff
   151fe:	203e      	movs	r0, #62	; 0x3e
   15200:	47a8      	blx	r5
   15202:	21ff      	movs	r1, #255	; 0xff
   15204:	203f      	movs	r0, #63	; 0x3f
   15206:	e739      	b.n	1507c <Radio_WriteConfiguration+0x20c>
   15208:	0030      	movs	r0, r6
   1520a:	19a3      	adds	r3, r4, r6
   1520c:	3028      	adds	r0, #40	; 0x28
   1520e:	7e59      	ldrb	r1, [r3, #25]
   15210:	b2c0      	uxtb	r0, r0
   15212:	3601      	adds	r6, #1
   15214:	47a8      	blx	r5
   15216:	b2f6      	uxtb	r6, r6
   15218:	e7e4      	b.n	151e4 <Radio_WriteConfiguration+0x374>
   1521a:	46c0      	nop			; (mov r8, r8)
   1521c:	00003d09 	.word	0x00003d09
   15220:	000165ad 	.word	0x000165ad
   15224:	01e84800 	.word	0x01e84800

00015228 <RADIO_getMappingAndOpmode>:
   15228:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1522a:	0006      	movs	r6, r0
   1522c:	4d06      	ldr	r5, [pc, #24]	; (15248 <RADIO_getMappingAndOpmode+0x20>)
   1522e:	2040      	movs	r0, #64	; 0x40
   15230:	001f      	movs	r7, r3
   15232:	0014      	movs	r4, r2
   15234:	9101      	str	r1, [sp, #4]
   15236:	47a8      	blx	r5
   15238:	4004      	ands	r4, r0
   1523a:	413c      	asrs	r4, r7
   1523c:	2001      	movs	r0, #1
   1523e:	7034      	strb	r4, [r6, #0]
   15240:	47a8      	blx	r5
   15242:	9b01      	ldr	r3, [sp, #4]
   15244:	7018      	strb	r0, [r3, #0]
   15246:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
   15248:	00008031 	.word	0x00008031

0001524c <RADIO_UnhandledInterrupt.part.0>:
   1524c:	b510      	push	{r4, lr}
   1524e:	21ff      	movs	r1, #255	; 0xff
   15250:	2012      	movs	r0, #18
   15252:	4b01      	ldr	r3, [pc, #4]	; (15258 <RADIO_UnhandledInterrupt.part.0+0xc>)
   15254:	4798      	blx	r3
   15256:	bd10      	pop	{r4, pc}
   15258:	00008009 	.word	0x00008009

0001525c <RADIO_UnhandledInterrupt>:
   1525c:	b510      	push	{r4, lr}
   1525e:	2801      	cmp	r0, #1
   15260:	d102      	bne.n	15268 <RADIO_UnhandledInterrupt+0xc>
   15262:	4b05      	ldr	r3, [pc, #20]	; (15278 <RADIO_UnhandledInterrupt+0x1c>)
   15264:	4798      	blx	r3
   15266:	bd10      	pop	{r4, pc}
   15268:	21ff      	movs	r1, #255	; 0xff
   1526a:	203e      	movs	r0, #62	; 0x3e
   1526c:	4c03      	ldr	r4, [pc, #12]	; (1527c <RADIO_UnhandledInterrupt+0x20>)
   1526e:	47a0      	blx	r4
   15270:	21ff      	movs	r1, #255	; 0xff
   15272:	203f      	movs	r0, #63	; 0x3f
   15274:	47a0      	blx	r4
   15276:	e7f6      	b.n	15266 <RADIO_UnhandledInterrupt+0xa>
   15278:	0001524d 	.word	0x0001524d
   1527c:	00008009 	.word	0x00008009

00015280 <RADIO_DIO0>:
   15280:	b573      	push	{r0, r1, r4, r5, r6, lr}
   15282:	466b      	mov	r3, sp
   15284:	1ddc      	adds	r4, r3, #7
   15286:	1d9d      	adds	r5, r3, #6
   15288:	22c0      	movs	r2, #192	; 0xc0
   1528a:	2306      	movs	r3, #6
   1528c:	0028      	movs	r0, r5
   1528e:	0021      	movs	r1, r4
   15290:	4e12      	ldr	r6, [pc, #72]	; (152dc <RADIO_DIO0+0x5c>)
   15292:	47b0      	blx	r6
   15294:	7823      	ldrb	r3, [r4, #0]
   15296:	7828      	ldrb	r0, [r5, #0]
   15298:	b25a      	sxtb	r2, r3
   1529a:	b2c0      	uxtb	r0, r0
   1529c:	2a00      	cmp	r2, #0
   1529e:	da0b      	bge.n	152b8 <RADIO_DIO0+0x38>
   152a0:	2800      	cmp	r0, #0
   152a2:	d004      	beq.n	152ae <RADIO_DIO0+0x2e>
   152a4:	2801      	cmp	r0, #1
   152a6:	d005      	beq.n	152b4 <RADIO_DIO0+0x34>
   152a8:	4b0d      	ldr	r3, [pc, #52]	; (152e0 <RADIO_DIO0+0x60>)
   152aa:	4798      	blx	r3
   152ac:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
   152ae:	4b0d      	ldr	r3, [pc, #52]	; (152e4 <RADIO_DIO0+0x64>)
   152b0:	4798      	blx	r3
   152b2:	e7fb      	b.n	152ac <RADIO_DIO0+0x2c>
   152b4:	4b0c      	ldr	r3, [pc, #48]	; (152e8 <RADIO_DIO0+0x68>)
   152b6:	e7fb      	b.n	152b0 <RADIO_DIO0+0x30>
   152b8:	2800      	cmp	r0, #0
   152ba:	d10a      	bne.n	152d2 <RADIO_DIO0+0x52>
   152bc:	2207      	movs	r2, #7
   152be:	4013      	ands	r3, r2
   152c0:	7023      	strb	r3, [r4, #0]
   152c2:	2b03      	cmp	r3, #3
   152c4:	d101      	bne.n	152ca <RADIO_DIO0+0x4a>
   152c6:	4b09      	ldr	r3, [pc, #36]	; (152ec <RADIO_DIO0+0x6c>)
   152c8:	e7f2      	b.n	152b0 <RADIO_DIO0+0x30>
   152ca:	2b05      	cmp	r3, #5
   152cc:	d102      	bne.n	152d4 <RADIO_DIO0+0x54>
   152ce:	4b08      	ldr	r3, [pc, #32]	; (152f0 <RADIO_DIO0+0x70>)
   152d0:	e7ee      	b.n	152b0 <RADIO_DIO0+0x30>
   152d2:	2000      	movs	r0, #0
   152d4:	4b07      	ldr	r3, [pc, #28]	; (152f4 <RADIO_DIO0+0x74>)
   152d6:	4798      	blx	r3
   152d8:	e7e8      	b.n	152ac <RADIO_DIO0+0x2c>
   152da:	46c0      	nop			; (mov r8, r8)
   152dc:	00015229 	.word	0x00015229
   152e0:	0001524d 	.word	0x0001524d
   152e4:	00015a05 	.word	0x00015a05
   152e8:	00015909 	.word	0x00015909
   152ec:	00015985 	.word	0x00015985
   152f0:	00015a81 	.word	0x00015a81
   152f4:	0001525d 	.word	0x0001525d

000152f8 <RADIO_DIO1>:
   152f8:	b573      	push	{r0, r1, r4, r5, r6, lr}
   152fa:	466b      	mov	r3, sp
   152fc:	1ddc      	adds	r4, r3, #7
   152fe:	1d9d      	adds	r5, r3, #6
   15300:	2230      	movs	r2, #48	; 0x30
   15302:	2304      	movs	r3, #4
   15304:	0021      	movs	r1, r4
   15306:	0028      	movs	r0, r5
   15308:	4e11      	ldr	r6, [pc, #68]	; (15350 <RADIO_DIO1+0x58>)
   1530a:	47b0      	blx	r6
   1530c:	7822      	ldrb	r2, [r4, #0]
   1530e:	782b      	ldrb	r3, [r5, #0]
   15310:	b251      	sxtb	r1, r2
   15312:	2900      	cmp	r1, #0
   15314:	da0c      	bge.n	15330 <RADIO_DIO1+0x38>
   15316:	b2db      	uxtb	r3, r3
   15318:	2b00      	cmp	r3, #0
   1531a:	d004      	beq.n	15326 <RADIO_DIO1+0x2e>
   1531c:	2b01      	cmp	r3, #1
   1531e:	d005      	beq.n	1532c <RADIO_DIO1+0x34>
   15320:	4b0c      	ldr	r3, [pc, #48]	; (15354 <RADIO_DIO1+0x5c>)
   15322:	4798      	blx	r3
   15324:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
   15326:	4b0c      	ldr	r3, [pc, #48]	; (15358 <RADIO_DIO1+0x60>)
   15328:	4798      	blx	r3
   1532a:	e7fb      	b.n	15324 <RADIO_DIO1+0x2c>
   1532c:	4b0b      	ldr	r3, [pc, #44]	; (1535c <RADIO_DIO1+0x64>)
   1532e:	e7fb      	b.n	15328 <RADIO_DIO1+0x30>
   15330:	2107      	movs	r1, #7
   15332:	b2db      	uxtb	r3, r3
   15334:	400a      	ands	r2, r1
   15336:	7022      	strb	r2, [r4, #0]
   15338:	2b00      	cmp	r3, #0
   1533a:	d005      	beq.n	15348 <RADIO_DIO1+0x50>
   1533c:	2b01      	cmp	r3, #1
   1533e:	d1f1      	bne.n	15324 <RADIO_DIO1+0x2c>
   15340:	2a03      	cmp	r2, #3
   15342:	d1ef      	bne.n	15324 <RADIO_DIO1+0x2c>
   15344:	4b06      	ldr	r3, [pc, #24]	; (15360 <RADIO_DIO1+0x68>)
   15346:	e7ef      	b.n	15328 <RADIO_DIO1+0x30>
   15348:	4b06      	ldr	r3, [pc, #24]	; (15364 <RADIO_DIO1+0x6c>)
   1534a:	2a05      	cmp	r2, #5
   1534c:	d1ea      	bne.n	15324 <RADIO_DIO1+0x2c>
   1534e:	e7eb      	b.n	15328 <RADIO_DIO1+0x30>
   15350:	00015229 	.word	0x00015229
   15354:	0001524d 	.word	0x0001524d
   15358:	0001588d 	.word	0x0001588d
   1535c:	0000f4c1 	.word	0x0000f4c1
   15360:	000156b5 	.word	0x000156b5
   15364:	00015619 	.word	0x00015619

00015368 <RADIO_DIO2>:
   15368:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1536a:	466b      	mov	r3, sp
   1536c:	1ddc      	adds	r4, r3, #7
   1536e:	1d9d      	adds	r5, r3, #6
   15370:	220c      	movs	r2, #12
   15372:	2302      	movs	r3, #2
   15374:	0021      	movs	r1, r4
   15376:	0028      	movs	r0, r5
   15378:	4e0b      	ldr	r6, [pc, #44]	; (153a8 <RADIO_DIO2+0x40>)
   1537a:	47b0      	blx	r6
   1537c:	7823      	ldrb	r3, [r4, #0]
   1537e:	782a      	ldrb	r2, [r5, #0]
   15380:	b259      	sxtb	r1, r3
   15382:	2900      	cmp	r1, #0
   15384:	da05      	bge.n	15392 <RADIO_DIO2+0x2a>
   15386:	4b09      	ldr	r3, [pc, #36]	; (153ac <RADIO_DIO2+0x44>)
   15388:	2a02      	cmp	r2, #2
   1538a:	d90a      	bls.n	153a2 <RADIO_DIO2+0x3a>
   1538c:	4b08      	ldr	r3, [pc, #32]	; (153b0 <RADIO_DIO2+0x48>)
   1538e:	4798      	blx	r3
   15390:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
   15392:	2107      	movs	r1, #7
   15394:	400b      	ands	r3, r1
   15396:	7023      	strb	r3, [r4, #0]
   15398:	2a03      	cmp	r2, #3
   1539a:	d1f9      	bne.n	15390 <RADIO_DIO2+0x28>
   1539c:	2b05      	cmp	r3, #5
   1539e:	d1f7      	bne.n	15390 <RADIO_DIO2+0x28>
   153a0:	4b04      	ldr	r3, [pc, #16]	; (153b4 <RADIO_DIO2+0x4c>)
   153a2:	4798      	blx	r3
   153a4:	e7f4      	b.n	15390 <RADIO_DIO2+0x28>
   153a6:	46c0      	nop			; (mov r8, r8)
   153a8:	00015229 	.word	0x00015229
   153ac:	0000f4c1 	.word	0x0000f4c1
   153b0:	0001524d 	.word	0x0001524d
   153b4:	000155e9 	.word	0x000155e9

000153b8 <RADIO_DIO3>:
   153b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   153ba:	466b      	mov	r3, sp
   153bc:	4668      	mov	r0, sp
   153be:	1ddc      	adds	r4, r3, #7
   153c0:	2203      	movs	r2, #3
   153c2:	2300      	movs	r3, #0
   153c4:	0021      	movs	r1, r4
   153c6:	3006      	adds	r0, #6
   153c8:	4d03      	ldr	r5, [pc, #12]	; (153d8 <RADIO_DIO3+0x20>)
   153ca:	47a8      	blx	r5
   153cc:	7823      	ldrb	r3, [r4, #0]
   153ce:	2b7f      	cmp	r3, #127	; 0x7f
   153d0:	d901      	bls.n	153d6 <RADIO_DIO3+0x1e>
   153d2:	4b02      	ldr	r3, [pc, #8]	; (153dc <RADIO_DIO3+0x24>)
   153d4:	4798      	blx	r3
   153d6:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
   153d8:	00015229 	.word	0x00015229
   153dc:	0001524d 	.word	0x0001524d

000153e0 <RADIO_DIO4>:
   153e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   153e2:	466b      	mov	r3, sp
   153e4:	4668      	mov	r0, sp
   153e6:	1ddc      	adds	r4, r3, #7
   153e8:	2306      	movs	r3, #6
   153ea:	22c0      	movs	r2, #192	; 0xc0
   153ec:	18c0      	adds	r0, r0, r3
   153ee:	0021      	movs	r1, r4
   153f0:	4d03      	ldr	r5, [pc, #12]	; (15400 <RADIO_DIO4+0x20>)
   153f2:	47a8      	blx	r5
   153f4:	7823      	ldrb	r3, [r4, #0]
   153f6:	2b7f      	cmp	r3, #127	; 0x7f
   153f8:	d901      	bls.n	153fe <RADIO_DIO4+0x1e>
   153fa:	4b02      	ldr	r3, [pc, #8]	; (15404 <RADIO_DIO4+0x24>)
   153fc:	4798      	blx	r3
   153fe:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
   15400:	00015229 	.word	0x00015229
   15404:	0001524d 	.word	0x0001524d

00015408 <RADIO_DIO5>:
   15408:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1540a:	466b      	mov	r3, sp
   1540c:	4668      	mov	r0, sp
   1540e:	1ddc      	adds	r4, r3, #7
   15410:	2230      	movs	r2, #48	; 0x30
   15412:	2304      	movs	r3, #4
   15414:	0021      	movs	r1, r4
   15416:	3006      	adds	r0, #6
   15418:	4d03      	ldr	r5, [pc, #12]	; (15428 <RADIO_DIO5+0x20>)
   1541a:	47a8      	blx	r5
   1541c:	7823      	ldrb	r3, [r4, #0]
   1541e:	2b7f      	cmp	r3, #127	; 0x7f
   15420:	d901      	bls.n	15426 <RADIO_DIO5+0x1e>
   15422:	4b02      	ldr	r3, [pc, #8]	; (1542c <RADIO_DIO5+0x24>)
   15424:	4798      	blx	r3
   15426:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
   15428:	00015229 	.word	0x00015229
   1542c:	0001524d 	.word	0x0001524d

00015430 <radioPostTask>:
   15430:	b510      	push	{r4, lr}
   15432:	0004      	movs	r4, r0
   15434:	4b05      	ldr	r3, [pc, #20]	; (1544c <radioPostTask+0x1c>)
   15436:	4798      	blx	r3
   15438:	4b05      	ldr	r3, [pc, #20]	; (15450 <radioPostTask+0x20>)
   1543a:	8818      	ldrh	r0, [r3, #0]
   1543c:	4320      	orrs	r0, r4
   1543e:	8018      	strh	r0, [r3, #0]
   15440:	4b04      	ldr	r3, [pc, #16]	; (15454 <radioPostTask+0x24>)
   15442:	4798      	blx	r3
   15444:	2002      	movs	r0, #2
   15446:	4b04      	ldr	r3, [pc, #16]	; (15458 <radioPostTask+0x28>)
   15448:	4798      	blx	r3
   1544a:	bd10      	pop	{r4, pc}
   1544c:	000082b9 	.word	0x000082b9
   15450:	20001122 	.word	0x20001122
   15454:	000082c5 	.word	0x000082c5
   15458:	0000f3a5 	.word	0x0000f3a5

0001545c <radioClearTask>:
   1545c:	b510      	push	{r4, lr}
   1545e:	0004      	movs	r4, r0
   15460:	4b04      	ldr	r3, [pc, #16]	; (15474 <radioClearTask+0x18>)
   15462:	4798      	blx	r3
   15464:	4a04      	ldr	r2, [pc, #16]	; (15478 <radioClearTask+0x1c>)
   15466:	8813      	ldrh	r3, [r2, #0]
   15468:	43a3      	bics	r3, r4
   1546a:	8013      	strh	r3, [r2, #0]
   1546c:	4b03      	ldr	r3, [pc, #12]	; (1547c <radioClearTask+0x20>)
   1546e:	4798      	blx	r3
   15470:	bd10      	pop	{r4, pc}
   15472:	46c0      	nop			; (mov r8, r8)
   15474:	000082b9 	.word	0x000082b9
   15478:	20001122 	.word	0x20001122
   1547c:	000082c5 	.word	0x000082c5

00015480 <RADIO_TaskHandler>:
   15480:	b570      	push	{r4, r5, r6, lr}
   15482:	2400      	movs	r4, #0
   15484:	4d10      	ldr	r5, [pc, #64]	; (154c8 <RADIO_TaskHandler+0x48>)
   15486:	2601      	movs	r6, #1
   15488:	882b      	ldrh	r3, [r5, #0]
   1548a:	42a3      	cmp	r3, r4
   1548c:	d015      	beq.n	154ba <RADIO_TaskHandler+0x3a>
   1548e:	882b      	ldrh	r3, [r5, #0]
   15490:	4123      	asrs	r3, r4
   15492:	4233      	tst	r3, r6
   15494:	d013      	beq.n	154be <RADIO_TaskHandler+0x3e>
   15496:	40a6      	lsls	r6, r4
   15498:	4b0c      	ldr	r3, [pc, #48]	; (154cc <RADIO_TaskHandler+0x4c>)
   1549a:	4798      	blx	r3
   1549c:	882b      	ldrh	r3, [r5, #0]
   1549e:	00a4      	lsls	r4, r4, #2
   154a0:	43b3      	bics	r3, r6
   154a2:	802b      	strh	r3, [r5, #0]
   154a4:	4b0a      	ldr	r3, [pc, #40]	; (154d0 <RADIO_TaskHandler+0x50>)
   154a6:	4798      	blx	r3
   154a8:	4b0a      	ldr	r3, [pc, #40]	; (154d4 <RADIO_TaskHandler+0x54>)
   154aa:	58e3      	ldr	r3, [r4, r3]
   154ac:	4798      	blx	r3
   154ae:	882b      	ldrh	r3, [r5, #0]
   154b0:	2b00      	cmp	r3, #0
   154b2:	d002      	beq.n	154ba <RADIO_TaskHandler+0x3a>
   154b4:	2002      	movs	r0, #2
   154b6:	4b08      	ldr	r3, [pc, #32]	; (154d8 <RADIO_TaskHandler+0x58>)
   154b8:	4798      	blx	r3
   154ba:	2000      	movs	r0, #0
   154bc:	bd70      	pop	{r4, r5, r6, pc}
   154be:	3401      	adds	r4, #1
   154c0:	2c05      	cmp	r4, #5
   154c2:	d1e4      	bne.n	1548e <RADIO_TaskHandler+0xe>
   154c4:	e7f9      	b.n	154ba <RADIO_TaskHandler+0x3a>
   154c6:	46c0      	nop			; (mov r8, r8)
   154c8:	20001122 	.word	0x20001122
   154cc:	000082b9 	.word	0x000082b9
   154d0:	000082c5 	.word	0x000082c5
   154d4:	00020370 	.word	0x00020370
   154d8:	0000f3a5 	.word	0x0000f3a5

000154dc <RadioSetState>:
   154dc:	4b01      	ldr	r3, [pc, #4]	; (154e4 <RadioSetState+0x8>)
   154de:	7018      	strb	r0, [r3, #0]
   154e0:	4770      	bx	lr
   154e2:	46c0      	nop			; (mov r8, r8)
   154e4:	20002fbf 	.word	0x20002fbf

000154e8 <RADIO_GetState>:
   154e8:	4b01      	ldr	r3, [pc, #4]	; (154f0 <RADIO_GetState+0x8>)
   154ea:	7818      	ldrb	r0, [r3, #0]
   154ec:	b2c0      	uxtb	r0, r0
   154ee:	4770      	bx	lr
   154f0:	20002fbf 	.word	0x20002fbf

000154f4 <RADIO_SetCallbackBitmask>:
   154f4:	4a02      	ldr	r2, [pc, #8]	; (15500 <RADIO_SetCallbackBitmask+0xc>)
   154f6:	7813      	ldrb	r3, [r2, #0]
   154f8:	4318      	orrs	r0, r3
   154fa:	7010      	strb	r0, [r2, #0]
   154fc:	4770      	bx	lr
   154fe:	46c0      	nop			; (mov r8, r8)
   15500:	20002fbe 	.word	0x20002fbe

00015504 <RADIO_Transmit>:
   15504:	b570      	push	{r4, r5, r6, lr}
   15506:	4d10      	ldr	r5, [pc, #64]	; (15548 <RADIO_Transmit+0x44>)
   15508:	0006      	movs	r6, r0
   1550a:	782b      	ldrb	r3, [r5, #0]
   1550c:	2004      	movs	r0, #4
   1550e:	2b01      	cmp	r3, #1
   15510:	d118      	bne.n	15544 <RADIO_Transmit+0x40>
   15512:	4c0e      	ldr	r4, [pc, #56]	; (1554c <RADIO_Transmit+0x48>)
   15514:	0023      	movs	r3, r4
   15516:	332f      	adds	r3, #47	; 0x2f
   15518:	7818      	ldrb	r0, [r3, #0]
   1551a:	4b0d      	ldr	r3, [pc, #52]	; (15550 <RADIO_Transmit+0x4c>)
   1551c:	4798      	blx	r3
   1551e:	4b0d      	ldr	r3, [pc, #52]	; (15554 <RADIO_Transmit+0x50>)
   15520:	7832      	ldrb	r2, [r6, #0]
   15522:	6871      	ldr	r1, [r6, #4]
   15524:	701a      	strb	r2, [r3, #0]
   15526:	4b0c      	ldr	r3, [pc, #48]	; (15558 <RADIO_Transmit+0x54>)
   15528:	3434      	adds	r4, #52	; 0x34
   1552a:	6019      	str	r1, [r3, #0]
   1552c:	7821      	ldrb	r1, [r4, #0]
   1552e:	2302      	movs	r3, #2
   15530:	2900      	cmp	r1, #0
   15532:	d102      	bne.n	1553a <RADIO_Transmit+0x36>
   15534:	0018      	movs	r0, r3
   15536:	2a3f      	cmp	r2, #63	; 0x3f
   15538:	d804      	bhi.n	15544 <RADIO_Transmit+0x40>
   1553a:	702b      	strb	r3, [r5, #0]
   1553c:	2004      	movs	r0, #4
   1553e:	4b07      	ldr	r3, [pc, #28]	; (1555c <RADIO_Transmit+0x58>)
   15540:	4798      	blx	r3
   15542:	2000      	movs	r0, #0
   15544:	bd70      	pop	{r4, r5, r6, pc}
   15546:	46c0      	nop			; (mov r8, r8)
   15548:	20002fbf 	.word	0x20002fbf
   1554c:	20002980 	.word	0x20002980
   15550:	0000f029 	.word	0x0000f029
   15554:	20001134 	.word	0x20001134
   15558:	20001130 	.word	0x20001130
   1555c:	00015431 	.word	0x00015431

00015560 <Radio_FSKTxPayloadHandler>:
   15560:	b570      	push	{r4, r5, r6, lr}
   15562:	4b1c      	ldr	r3, [pc, #112]	; (155d4 <Radio_FSKTxPayloadHandler+0x74>)
   15564:	000d      	movs	r5, r1
   15566:	4798      	blx	r3
   15568:	4c1b      	ldr	r4, [pc, #108]	; (155d8 <Radio_FSKTxPayloadHandler+0x78>)
   1556a:	3458      	adds	r4, #88	; 0x58
   1556c:	7820      	ldrb	r0, [r4, #0]
   1556e:	b2c0      	uxtb	r0, r0
   15570:	2800      	cmp	r0, #0
   15572:	d112      	bne.n	1559a <Radio_FSKTxPayloadHandler+0x3a>
   15574:	2d00      	cmp	r5, #0
   15576:	d007      	beq.n	15588 <Radio_FSKTxPayloadHandler+0x28>
   15578:	4918      	ldr	r1, [pc, #96]	; (155dc <Radio_FSKTxPayloadHandler+0x7c>)
   1557a:	4b19      	ldr	r3, [pc, #100]	; (155e0 <Radio_FSKTxPayloadHandler+0x80>)
   1557c:	2d3e      	cmp	r5, #62	; 0x3e
   1557e:	d806      	bhi.n	1558e <Radio_FSKTxPayloadHandler+0x2e>
   15580:	002a      	movs	r2, r5
   15582:	6809      	ldr	r1, [r1, #0]
   15584:	4798      	blx	r3
   15586:	7025      	strb	r5, [r4, #0]
   15588:	4b16      	ldr	r3, [pc, #88]	; (155e4 <Radio_FSKTxPayloadHandler+0x84>)
   1558a:	4798      	blx	r3
   1558c:	bd70      	pop	{r4, r5, r6, pc}
   1558e:	223f      	movs	r2, #63	; 0x3f
   15590:	6809      	ldr	r1, [r1, #0]
   15592:	4798      	blx	r3
   15594:	233f      	movs	r3, #63	; 0x3f
   15596:	7023      	strb	r3, [r4, #0]
   15598:	e7f6      	b.n	15588 <Radio_FSKTxPayloadHandler+0x28>
   1559a:	7823      	ldrb	r3, [r4, #0]
   1559c:	429d      	cmp	r5, r3
   1559e:	d0f3      	beq.n	15588 <Radio_FSKTxPayloadHandler+0x28>
   155a0:	7822      	ldrb	r2, [r4, #0]
   155a2:	480e      	ldr	r0, [pc, #56]	; (155dc <Radio_FSKTxPayloadHandler+0x7c>)
   155a4:	1aaa      	subs	r2, r5, r2
   155a6:	b2d2      	uxtb	r2, r2
   155a8:	4b0d      	ldr	r3, [pc, #52]	; (155e0 <Radio_FSKTxPayloadHandler+0x80>)
   155aa:	2a3f      	cmp	r2, #63	; 0x3f
   155ac:	d807      	bhi.n	155be <Radio_FSKTxPayloadHandler+0x5e>
   155ae:	7826      	ldrb	r6, [r4, #0]
   155b0:	7822      	ldrb	r2, [r4, #0]
   155b2:	6801      	ldr	r1, [r0, #0]
   155b4:	1aaa      	subs	r2, r5, r2
   155b6:	b2d2      	uxtb	r2, r2
   155b8:	1989      	adds	r1, r1, r6
   155ba:	2000      	movs	r0, #0
   155bc:	e7e2      	b.n	15584 <Radio_FSKTxPayloadHandler+0x24>
   155be:	7822      	ldrb	r2, [r4, #0]
   155c0:	6801      	ldr	r1, [r0, #0]
   155c2:	2000      	movs	r0, #0
   155c4:	1889      	adds	r1, r1, r2
   155c6:	223f      	movs	r2, #63	; 0x3f
   155c8:	4798      	blx	r3
   155ca:	7823      	ldrb	r3, [r4, #0]
   155cc:	333f      	adds	r3, #63	; 0x3f
   155ce:	b2db      	uxtb	r3, r3
   155d0:	e7e1      	b.n	15596 <Radio_FSKTxPayloadHandler+0x36>
   155d2:	46c0      	nop			; (mov r8, r8)
   155d4:	00004531 	.word	0x00004531
   155d8:	20002980 	.word	0x20002980
   155dc:	20001130 	.word	0x20001130
   155e0:	0000805d 	.word	0x0000805d
   155e4:	00004571 	.word	0x00004571

000155e8 <RADIO_FSKSyncAddr>:
   155e8:	4b08      	ldr	r3, [pc, #32]	; (1560c <RADIO_FSKSyncAddr+0x24>)
   155ea:	b510      	push	{r4, lr}
   155ec:	4798      	blx	r3
   155ee:	4b08      	ldr	r3, [pc, #32]	; (15610 <RADIO_FSKSyncAddr+0x28>)
   155f0:	001a      	movs	r2, r3
   155f2:	3234      	adds	r2, #52	; 0x34
   155f4:	7812      	ldrb	r2, [r2, #0]
   155f6:	2a00      	cmp	r2, #0
   155f8:	d104      	bne.n	15604 <RADIO_FSKSyncAddr+0x1c>
   155fa:	0019      	movs	r1, r3
   155fc:	3358      	adds	r3, #88	; 0x58
   155fe:	312c      	adds	r1, #44	; 0x2c
   15600:	700a      	strb	r2, [r1, #0]
   15602:	701a      	strb	r2, [r3, #0]
   15604:	4b03      	ldr	r3, [pc, #12]	; (15614 <RADIO_FSKSyncAddr+0x2c>)
   15606:	4798      	blx	r3
   15608:	bd10      	pop	{r4, pc}
   1560a:	46c0      	nop			; (mov r8, r8)
   1560c:	00004531 	.word	0x00004531
   15610:	20002980 	.word	0x20002980
   15614:	00004571 	.word	0x00004571

00015618 <RADIO_FSKFifoLevel>:
   15618:	b570      	push	{r4, r5, r6, lr}
   1561a:	4b22      	ldr	r3, [pc, #136]	; (156a4 <RADIO_FSKFifoLevel+0x8c>)
   1561c:	4798      	blx	r3
   1561e:	4d22      	ldr	r5, [pc, #136]	; (156a8 <RADIO_FSKFifoLevel+0x90>)
   15620:	002a      	movs	r2, r5
   15622:	002b      	movs	r3, r5
   15624:	322c      	adds	r2, #44	; 0x2c
   15626:	3358      	adds	r3, #88	; 0x58
   15628:	7810      	ldrb	r0, [r2, #0]
   1562a:	7819      	ldrb	r1, [r3, #0]
   1562c:	4288      	cmp	r0, r1
   1562e:	d105      	bne.n	1563c <RADIO_FSKFifoLevel+0x24>
   15630:	7812      	ldrb	r2, [r2, #0]
   15632:	2a00      	cmp	r2, #0
   15634:	d002      	beq.n	1563c <RADIO_FSKFifoLevel+0x24>
   15636:	781b      	ldrb	r3, [r3, #0]
   15638:	2b00      	cmp	r3, #0
   1563a:	d11f      	bne.n	1567c <RADIO_FSKFifoLevel+0x64>
   1563c:	0029      	movs	r1, r5
   1563e:	312c      	adds	r1, #44	; 0x2c
   15640:	7808      	ldrb	r0, [r1, #0]
   15642:	b2c0      	uxtb	r0, r0
   15644:	2800      	cmp	r0, #0
   15646:	d102      	bne.n	1564e <RADIO_FSKFifoLevel+0x36>
   15648:	2201      	movs	r2, #1
   1564a:	4b18      	ldr	r3, [pc, #96]	; (156ac <RADIO_FSKFifoLevel+0x94>)
   1564c:	4798      	blx	r3
   1564e:	002e      	movs	r6, r5
   15650:	002c      	movs	r4, r5
   15652:	362c      	adds	r6, #44	; 0x2c
   15654:	3458      	adds	r4, #88	; 0x58
   15656:	7833      	ldrb	r3, [r6, #0]
   15658:	7822      	ldrb	r2, [r4, #0]
   1565a:	1a9b      	subs	r3, r3, r2
   1565c:	b2db      	uxtb	r3, r3
   1565e:	2b3e      	cmp	r3, #62	; 0x3e
   15660:	d80f      	bhi.n	15682 <RADIO_FSKFifoLevel+0x6a>
   15662:	7823      	ldrb	r3, [r4, #0]
   15664:	7832      	ldrb	r2, [r6, #0]
   15666:	7821      	ldrb	r1, [r4, #0]
   15668:	2000      	movs	r0, #0
   1566a:	1a52      	subs	r2, r2, r1
   1566c:	6aa9      	ldr	r1, [r5, #40]	; 0x28
   1566e:	b2d2      	uxtb	r2, r2
   15670:	18c9      	adds	r1, r1, r3
   15672:	4b0e      	ldr	r3, [pc, #56]	; (156ac <RADIO_FSKFifoLevel+0x94>)
   15674:	4798      	blx	r3
   15676:	7833      	ldrb	r3, [r6, #0]
   15678:	b2db      	uxtb	r3, r3
   1567a:	7023      	strb	r3, [r4, #0]
   1567c:	4b0c      	ldr	r3, [pc, #48]	; (156b0 <RADIO_FSKFifoLevel+0x98>)
   1567e:	4798      	blx	r3
   15680:	bd70      	pop	{r4, r5, r6, pc}
   15682:	7833      	ldrb	r3, [r6, #0]
   15684:	7822      	ldrb	r2, [r4, #0]
   15686:	1a9b      	subs	r3, r3, r2
   15688:	b2db      	uxtb	r3, r3
   1568a:	2b3f      	cmp	r3, #63	; 0x3f
   1568c:	d9f6      	bls.n	1567c <RADIO_FSKFifoLevel+0x64>
   1568e:	7823      	ldrb	r3, [r4, #0]
   15690:	6aa9      	ldr	r1, [r5, #40]	; 0x28
   15692:	223f      	movs	r2, #63	; 0x3f
   15694:	18c9      	adds	r1, r1, r3
   15696:	2000      	movs	r0, #0
   15698:	4b04      	ldr	r3, [pc, #16]	; (156ac <RADIO_FSKFifoLevel+0x94>)
   1569a:	4798      	blx	r3
   1569c:	7823      	ldrb	r3, [r4, #0]
   1569e:	333f      	adds	r3, #63	; 0x3f
   156a0:	e7ea      	b.n	15678 <RADIO_FSKFifoLevel+0x60>
   156a2:	46c0      	nop			; (mov r8, r8)
   156a4:	00004531 	.word	0x00004531
   156a8:	20002980 	.word	0x20002980
   156ac:	0000809d 	.word	0x0000809d
   156b0:	00004571 	.word	0x00004571

000156b4 <RADIO_FSKFifoEmpty>:
   156b4:	b510      	push	{r4, lr}
   156b6:	4b03      	ldr	r3, [pc, #12]	; (156c4 <RADIO_FSKFifoEmpty+0x10>)
   156b8:	7819      	ldrb	r1, [r3, #0]
   156ba:	4b03      	ldr	r3, [pc, #12]	; (156c8 <RADIO_FSKFifoEmpty+0x14>)
   156bc:	6818      	ldr	r0, [r3, #0]
   156be:	4b03      	ldr	r3, [pc, #12]	; (156cc <RADIO_FSKFifoEmpty+0x18>)
   156c0:	4798      	blx	r3
   156c2:	bd10      	pop	{r4, pc}
   156c4:	20001134 	.word	0x20001134
   156c8:	20001130 	.word	0x20001130
   156cc:	00015561 	.word	0x00015561

000156d0 <RADIO_GetData>:
   156d0:	4b03      	ldr	r3, [pc, #12]	; (156e0 <RADIO_GetData+0x10>)
   156d2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   156d4:	332c      	adds	r3, #44	; 0x2c
   156d6:	6002      	str	r2, [r0, #0]
   156d8:	781b      	ldrb	r3, [r3, #0]
   156da:	2000      	movs	r0, #0
   156dc:	800b      	strh	r3, [r1, #0]
   156de:	4770      	bx	lr
   156e0:	20002980 	.word	0x20002980

000156e4 <Radio_EnableRfControl>:
   156e4:	b510      	push	{r4, lr}
   156e6:	4b08      	ldr	r3, [pc, #32]	; (15708 <Radio_EnableRfControl+0x24>)
   156e8:	0001      	movs	r1, r0
   156ea:	681a      	ldr	r2, [r3, #0]
   156ec:	4807      	ldr	r0, [pc, #28]	; (1570c <Radio_EnableRfControl+0x28>)
   156ee:	4c08      	ldr	r4, [pc, #32]	; (15710 <Radio_EnableRfControl+0x2c>)
   156f0:	1812      	adds	r2, r2, r0
   156f2:	2000      	movs	r0, #0
   156f4:	42a2      	cmp	r2, r4
   156f6:	d804      	bhi.n	15702 <Radio_EnableRfControl+0x1e>
   156f8:	3305      	adds	r3, #5
   156fa:	7fdb      	ldrb	r3, [r3, #31]
   156fc:	1e58      	subs	r0, r3, #1
   156fe:	4183      	sbcs	r3, r0
   15700:	1c58      	adds	r0, r3, #1
   15702:	4b04      	ldr	r3, [pc, #16]	; (15714 <Radio_EnableRfControl+0x30>)
   15704:	4798      	blx	r3
   15706:	bd10      	pop	{r4, pc}
   15708:	20002980 	.word	0x20002980
   1570c:	cc9eec80 	.word	0xcc9eec80
   15710:	096ae380 	.word	0x096ae380
   15714:	00008109 	.word	0x00008109

00015718 <RADIO_RxHandler>:
   15718:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1571a:	4b33      	ldr	r3, [pc, #204]	; (157e8 <RADIO_RxHandler+0xd0>)
   1571c:	2000      	movs	r0, #0
   1571e:	4798      	blx	r3
   15720:	4e32      	ldr	r6, [pc, #200]	; (157ec <RADIO_RxHandler+0xd4>)
   15722:	4b33      	ldr	r3, [pc, #204]	; (157f0 <RADIO_RxHandler+0xd8>)
   15724:	8830      	ldrh	r0, [r6, #0]
   15726:	2800      	cmp	r0, #0
   15728:	d100      	bne.n	1572c <RADIO_RxHandler+0x14>
   1572a:	3004      	adds	r0, #4
   1572c:	4798      	blx	r3
   1572e:	4c31      	ldr	r4, [pc, #196]	; (157f4 <RADIO_RxHandler+0xdc>)
   15730:	4d31      	ldr	r5, [pc, #196]	; (157f8 <RADIO_RxHandler+0xe0>)
   15732:	0023      	movs	r3, r4
   15734:	3334      	adds	r3, #52	; 0x34
   15736:	7819      	ldrb	r1, [r3, #0]
   15738:	2901      	cmp	r1, #1
   1573a:	d122      	bne.n	15782 <RADIO_RxHandler+0x6a>
   1573c:	2022      	movs	r0, #34	; 0x22
   1573e:	47a8      	blx	r5
   15740:	2100      	movs	r1, #0
   15742:	2040      	movs	r0, #64	; 0x40
   15744:	47a8      	blx	r5
   15746:	2100      	movs	r1, #0
   15748:	2041      	movs	r0, #65	; 0x41
   1574a:	47a8      	blx	r5
   1574c:	8832      	ldrh	r2, [r6, #0]
   1574e:	4b2b      	ldr	r3, [pc, #172]	; (157fc <RADIO_RxHandler+0xe4>)
   15750:	2a00      	cmp	r2, #0
   15752:	d131      	bne.n	157b8 <RADIO_RxHandler+0xa0>
   15754:	0021      	movs	r1, r4
   15756:	2005      	movs	r0, #5
   15758:	3134      	adds	r1, #52	; 0x34
   1575a:	7809      	ldrb	r1, [r1, #0]
   1575c:	4798      	blx	r3
   1575e:	68e3      	ldr	r3, [r4, #12]
   15760:	2b00      	cmp	r3, #0
   15762:	d00c      	beq.n	1577e <RADIO_RxHandler+0x66>
   15764:	8832      	ldrh	r2, [r6, #0]
   15766:	2a00      	cmp	r2, #0
   15768:	d009      	beq.n	1577e <RADIO_RxHandler+0x66>
   1576a:	21fa      	movs	r1, #250	; 0xfa
   1576c:	2200      	movs	r2, #0
   1576e:	342f      	adds	r4, #47	; 0x2f
   15770:	0089      	lsls	r1, r1, #2
   15772:	7820      	ldrb	r0, [r4, #0]
   15774:	4359      	muls	r1, r3
   15776:	9200      	str	r2, [sp, #0]
   15778:	4b21      	ldr	r3, [pc, #132]	; (15800 <RADIO_RxHandler+0xe8>)
   1577a:	4c22      	ldr	r4, [pc, #136]	; (15804 <RADIO_RxHandler+0xec>)
   1577c:	47a0      	blx	r4
   1577e:	2000      	movs	r0, #0
   15780:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
   15782:	0023      	movs	r3, r4
   15784:	3338      	adds	r3, #56	; 0x38
   15786:	7819      	ldrb	r1, [r3, #0]
   15788:	2012      	movs	r0, #18
   1578a:	47a8      	blx	r5
   1578c:	0023      	movs	r3, r4
   1578e:	3339      	adds	r3, #57	; 0x39
   15790:	7819      	ldrb	r1, [r3, #0]
   15792:	2013      	movs	r0, #19
   15794:	47a8      	blx	r5
   15796:	210c      	movs	r1, #12
   15798:	2040      	movs	r0, #64	; 0x40
   1579a:	47a8      	blx	r5
   1579c:	2100      	movs	r1, #0
   1579e:	2041      	movs	r0, #65	; 0x41
   157a0:	47a8      	blx	r5
   157a2:	0022      	movs	r2, r4
   157a4:	2300      	movs	r3, #0
   157a6:	3256      	adds	r2, #86	; 0x56
   157a8:	8013      	strh	r3, [r2, #0]
   157aa:	0022      	movs	r2, r4
   157ac:	322c      	adds	r2, #44	; 0x2c
   157ae:	7013      	strb	r3, [r2, #0]
   157b0:	0022      	movs	r2, r4
   157b2:	3258      	adds	r2, #88	; 0x58
   157b4:	7013      	strb	r3, [r2, #0]
   157b6:	e7c9      	b.n	1574c <RADIO_RxHandler+0x34>
   157b8:	0022      	movs	r2, r4
   157ba:	3234      	adds	r2, #52	; 0x34
   157bc:	7811      	ldrb	r1, [r2, #0]
   157be:	2200      	movs	r2, #0
   157c0:	2901      	cmp	r1, #1
   157c2:	d101      	bne.n	157c8 <RADIO_RxHandler+0xb0>
   157c4:	2006      	movs	r0, #6
   157c6:	e7c9      	b.n	1575c <RADIO_RxHandler+0x44>
   157c8:	0011      	movs	r1, r2
   157ca:	2005      	movs	r0, #5
   157cc:	4798      	blx	r3
   157ce:	21fa      	movs	r1, #250	; 0xfa
   157d0:	8833      	ldrh	r3, [r6, #0]
   157d2:	0089      	lsls	r1, r1, #2
   157d4:	4359      	muls	r1, r3
   157d6:	0023      	movs	r3, r4
   157d8:	2200      	movs	r2, #0
   157da:	332e      	adds	r3, #46	; 0x2e
   157dc:	7818      	ldrb	r0, [r3, #0]
   157de:	4d09      	ldr	r5, [pc, #36]	; (15804 <RADIO_RxHandler+0xec>)
   157e0:	9200      	str	r2, [sp, #0]
   157e2:	4b09      	ldr	r3, [pc, #36]	; (15808 <RADIO_RxHandler+0xf0>)
   157e4:	47a8      	blx	r5
   157e6:	e7ba      	b.n	1575e <RADIO_RxHandler+0x46>
   157e8:	000156e5 	.word	0x000156e5
   157ec:	20001126 	.word	0x20001126
   157f0:	00014e71 	.word	0x00014e71
   157f4:	20002980 	.word	0x20002980
   157f8:	00008009 	.word	0x00008009
   157fc:	0000f3dd 	.word	0x0000f3dd
   15800:	00015841 	.word	0x00015841
   15804:	0000ed11 	.word	0x0000ed11
   15808:	000158d1 	.word	0x000158d1

0001580c <Radio_DisableRfControl>:
   1580c:	b510      	push	{r4, lr}
   1580e:	4b08      	ldr	r3, [pc, #32]	; (15830 <Radio_DisableRfControl+0x24>)
   15810:	0001      	movs	r1, r0
   15812:	681a      	ldr	r2, [r3, #0]
   15814:	4807      	ldr	r0, [pc, #28]	; (15834 <Radio_DisableRfControl+0x28>)
   15816:	4c08      	ldr	r4, [pc, #32]	; (15838 <Radio_DisableRfControl+0x2c>)
   15818:	1812      	adds	r2, r2, r0
   1581a:	2000      	movs	r0, #0
   1581c:	42a2      	cmp	r2, r4
   1581e:	d804      	bhi.n	1582a <Radio_DisableRfControl+0x1e>
   15820:	3305      	adds	r3, #5
   15822:	7fdb      	ldrb	r3, [r3, #31]
   15824:	1e58      	subs	r0, r3, #1
   15826:	4183      	sbcs	r3, r0
   15828:	1c58      	adds	r0, r3, #1
   1582a:	4b04      	ldr	r3, [pc, #16]	; (1583c <Radio_DisableRfControl+0x30>)
   1582c:	4798      	blx	r3
   1582e:	bd10      	pop	{r4, pc}
   15830:	20002980 	.word	0x20002980
   15834:	cc9eec80 	.word	0xcc9eec80
   15838:	096ae380 	.word	0x096ae380
   1583c:	00008131 	.word	0x00008131

00015840 <Radio_WatchdogTimeout>:
   15840:	b510      	push	{r4, lr}
   15842:	4b0e      	ldr	r3, [pc, #56]	; (1587c <Radio_WatchdogTimeout+0x3c>)
   15844:	781a      	ldrb	r2, [r3, #0]
   15846:	2a04      	cmp	r2, #4
   15848:	d10b      	bne.n	15862 <Radio_WatchdogTimeout+0x22>
   1584a:	2320      	movs	r3, #32
   1584c:	4a0c      	ldr	r2, [pc, #48]	; (15880 <Radio_WatchdogTimeout+0x40>)
   1584e:	2000      	movs	r0, #0
   15850:	8811      	ldrh	r1, [r2, #0]
   15852:	430b      	orrs	r3, r1
   15854:	8013      	strh	r3, [r2, #0]
   15856:	4b0b      	ldr	r3, [pc, #44]	; (15884 <Radio_WatchdogTimeout+0x44>)
   15858:	4798      	blx	r3
   1585a:	2002      	movs	r0, #2
   1585c:	4b0a      	ldr	r3, [pc, #40]	; (15888 <Radio_WatchdogTimeout+0x48>)
   1585e:	4798      	blx	r3
   15860:	bd10      	pop	{r4, pc}
   15862:	781b      	ldrb	r3, [r3, #0]
   15864:	2b02      	cmp	r3, #2
   15866:	d1fb      	bne.n	15860 <Radio_WatchdogTimeout+0x20>
   15868:	4a05      	ldr	r2, [pc, #20]	; (15880 <Radio_WatchdogTimeout+0x40>)
   1586a:	330e      	adds	r3, #14
   1586c:	8811      	ldrh	r1, [r2, #0]
   1586e:	2001      	movs	r0, #1
   15870:	430b      	orrs	r3, r1
   15872:	8013      	strh	r3, [r2, #0]
   15874:	4b03      	ldr	r3, [pc, #12]	; (15884 <Radio_WatchdogTimeout+0x44>)
   15876:	4798      	blx	r3
   15878:	2001      	movs	r0, #1
   1587a:	e7ef      	b.n	1585c <Radio_WatchdogTimeout+0x1c>
   1587c:	20002fbf 	.word	0x20002fbf
   15880:	20002fbc 	.word	0x20002fbc
   15884:	0001580d 	.word	0x0001580d
   15888:	00015431 	.word	0x00015431

0001588c <RADIO_RxTimeout>:
   1588c:	b510      	push	{r4, lr}
   1588e:	4b0a      	ldr	r3, [pc, #40]	; (158b8 <RADIO_RxTimeout+0x2c>)
   15890:	332f      	adds	r3, #47	; 0x2f
   15892:	7818      	ldrb	r0, [r3, #0]
   15894:	4b09      	ldr	r3, [pc, #36]	; (158bc <RADIO_RxTimeout+0x30>)
   15896:	4798      	blx	r3
   15898:	2000      	movs	r0, #0
   1589a:	4b09      	ldr	r3, [pc, #36]	; (158c0 <RADIO_RxTimeout+0x34>)
   1589c:	4798      	blx	r3
   1589e:	2180      	movs	r1, #128	; 0x80
   158a0:	2012      	movs	r0, #18
   158a2:	4b08      	ldr	r3, [pc, #32]	; (158c4 <RADIO_RxTimeout+0x38>)
   158a4:	4798      	blx	r3
   158a6:	2340      	movs	r3, #64	; 0x40
   158a8:	4a07      	ldr	r2, [pc, #28]	; (158c8 <RADIO_RxTimeout+0x3c>)
   158aa:	2002      	movs	r0, #2
   158ac:	8811      	ldrh	r1, [r2, #0]
   158ae:	430b      	orrs	r3, r1
   158b0:	8013      	strh	r3, [r2, #0]
   158b2:	4b06      	ldr	r3, [pc, #24]	; (158cc <RADIO_RxTimeout+0x40>)
   158b4:	4798      	blx	r3
   158b6:	bd10      	pop	{r4, pc}
   158b8:	20002980 	.word	0x20002980
   158bc:	0000f029 	.word	0x0000f029
   158c0:	0001580d 	.word	0x0001580d
   158c4:	00008009 	.word	0x00008009
   158c8:	20002fbc 	.word	0x20002fbc
   158cc:	00015431 	.word	0x00015431

000158d0 <Radio_RxFSKTimeout>:
   158d0:	b510      	push	{r4, lr}
   158d2:	4b08      	ldr	r3, [pc, #32]	; (158f4 <Radio_RxFSKTimeout+0x24>)
   158d4:	332f      	adds	r3, #47	; 0x2f
   158d6:	7818      	ldrb	r0, [r3, #0]
   158d8:	4b07      	ldr	r3, [pc, #28]	; (158f8 <Radio_RxFSKTimeout+0x28>)
   158da:	4798      	blx	r3
   158dc:	2000      	movs	r0, #0
   158de:	4b07      	ldr	r3, [pc, #28]	; (158fc <Radio_RxFSKTimeout+0x2c>)
   158e0:	4798      	blx	r3
   158e2:	2380      	movs	r3, #128	; 0x80
   158e4:	4a06      	ldr	r2, [pc, #24]	; (15900 <Radio_RxFSKTimeout+0x30>)
   158e6:	2002      	movs	r0, #2
   158e8:	8811      	ldrh	r1, [r2, #0]
   158ea:	430b      	orrs	r3, r1
   158ec:	8013      	strh	r3, [r2, #0]
   158ee:	4b05      	ldr	r3, [pc, #20]	; (15904 <Radio_RxFSKTimeout+0x34>)
   158f0:	4798      	blx	r3
   158f2:	bd10      	pop	{r4, pc}
   158f4:	20002980 	.word	0x20002980
   158f8:	0000f029 	.word	0x0000f029
   158fc:	0001580d 	.word	0x0001580d
   15900:	20002fbc 	.word	0x20002fbc
   15904:	00015431 	.word	0x00015431

00015908 <RADIO_TxDone>:
   15908:	b570      	push	{r4, r5, r6, lr}
   1590a:	4b14      	ldr	r3, [pc, #80]	; (1595c <RADIO_TxDone+0x54>)
   1590c:	332f      	adds	r3, #47	; 0x2f
   1590e:	7818      	ldrb	r0, [r3, #0]
   15910:	4b13      	ldr	r3, [pc, #76]	; (15960 <RADIO_TxDone+0x58>)
   15912:	4798      	blx	r3
   15914:	2001      	movs	r0, #1
   15916:	4b13      	ldr	r3, [pc, #76]	; (15964 <RADIO_TxDone+0x5c>)
   15918:	4798      	blx	r3
   1591a:	4b13      	ldr	r3, [pc, #76]	; (15968 <RADIO_TxDone+0x60>)
   1591c:	2108      	movs	r1, #8
   1591e:	2012      	movs	r0, #18
   15920:	4798      	blx	r3
   15922:	4b12      	ldr	r3, [pc, #72]	; (1596c <RADIO_TxDone+0x64>)
   15924:	781a      	ldrb	r2, [r3, #0]
   15926:	4b12      	ldr	r3, [pc, #72]	; (15970 <RADIO_TxDone+0x68>)
   15928:	2a02      	cmp	r2, #2
   1592a:	d002      	beq.n	15932 <RADIO_TxDone+0x2a>
   1592c:	881a      	ldrh	r2, [r3, #0]
   1592e:	0692      	lsls	r2, r2, #26
   15930:	d413      	bmi.n	1595a <RADIO_TxDone+0x52>
   15932:	2001      	movs	r0, #1
   15934:	881a      	ldrh	r2, [r3, #0]
   15936:	4302      	orrs	r2, r0
   15938:	801a      	strh	r2, [r3, #0]
   1593a:	4b0e      	ldr	r3, [pc, #56]	; (15974 <RADIO_TxDone+0x6c>)
   1593c:	4798      	blx	r3
   1593e:	4b0e      	ldr	r3, [pc, #56]	; (15978 <RADIO_TxDone+0x70>)
   15940:	4798      	blx	r3
   15942:	4c0e      	ldr	r4, [pc, #56]	; (1597c <RADIO_TxDone+0x74>)
   15944:	4d0e      	ldr	r5, [pc, #56]	; (15980 <RADIO_TxDone+0x78>)
   15946:	6822      	ldr	r2, [r4, #0]
   15948:	6863      	ldr	r3, [r4, #4]
   1594a:	1a80      	subs	r0, r0, r2
   1594c:	4199      	sbcs	r1, r3
   1594e:	22fa      	movs	r2, #250	; 0xfa
   15950:	2300      	movs	r3, #0
   15952:	0092      	lsls	r2, r2, #2
   15954:	47a8      	blx	r5
   15956:	6020      	str	r0, [r4, #0]
   15958:	6061      	str	r1, [r4, #4]
   1595a:	bd70      	pop	{r4, r5, r6, pc}
   1595c:	20002980 	.word	0x20002980
   15960:	0000f029 	.word	0x0000f029
   15964:	0001580d 	.word	0x0001580d
   15968:	00008009 	.word	0x00008009
   1596c:	20002fbf 	.word	0x20002fbf
   15970:	20002fbc 	.word	0x20002fbc
   15974:	00015431 	.word	0x00015431
   15978:	0000ecb9 	.word	0x0000ecb9
   1597c:	20001128 	.word	0x20001128
   15980:	00016989 	.word	0x00016989

00015984 <RADIO_FSKPacketSent>:
   15984:	b570      	push	{r4, r5, r6, lr}
   15986:	4b15      	ldr	r3, [pc, #84]	; (159dc <RADIO_FSKPacketSent+0x58>)
   15988:	203f      	movs	r0, #63	; 0x3f
   1598a:	4798      	blx	r3
   1598c:	0703      	lsls	r3, r0, #28
   1598e:	d524      	bpl.n	159da <RADIO_FSKPacketSent+0x56>
   15990:	4b13      	ldr	r3, [pc, #76]	; (159e0 <RADIO_FSKPacketSent+0x5c>)
   15992:	332f      	adds	r3, #47	; 0x2f
   15994:	7818      	ldrb	r0, [r3, #0]
   15996:	4b13      	ldr	r3, [pc, #76]	; (159e4 <RADIO_FSKPacketSent+0x60>)
   15998:	4798      	blx	r3
   1599a:	4b13      	ldr	r3, [pc, #76]	; (159e8 <RADIO_FSKPacketSent+0x64>)
   1599c:	2001      	movs	r0, #1
   1599e:	4798      	blx	r3
   159a0:	4b12      	ldr	r3, [pc, #72]	; (159ec <RADIO_FSKPacketSent+0x68>)
   159a2:	4c13      	ldr	r4, [pc, #76]	; (159f0 <RADIO_FSKPacketSent+0x6c>)
   159a4:	781b      	ldrb	r3, [r3, #0]
   159a6:	2b02      	cmp	r3, #2
   159a8:	d002      	beq.n	159b0 <RADIO_FSKPacketSent+0x2c>
   159aa:	8823      	ldrh	r3, [r4, #0]
   159ac:	069b      	lsls	r3, r3, #26
   159ae:	d414      	bmi.n	159da <RADIO_FSKPacketSent+0x56>
   159b0:	4b10      	ldr	r3, [pc, #64]	; (159f4 <RADIO_FSKPacketSent+0x70>)
   159b2:	4798      	blx	r3
   159b4:	4d10      	ldr	r5, [pc, #64]	; (159f8 <RADIO_FSKPacketSent+0x74>)
   159b6:	4e11      	ldr	r6, [pc, #68]	; (159fc <RADIO_FSKPacketSent+0x78>)
   159b8:	682a      	ldr	r2, [r5, #0]
   159ba:	686b      	ldr	r3, [r5, #4]
   159bc:	1a80      	subs	r0, r0, r2
   159be:	4199      	sbcs	r1, r3
   159c0:	22fa      	movs	r2, #250	; 0xfa
   159c2:	2300      	movs	r3, #0
   159c4:	0092      	lsls	r2, r2, #2
   159c6:	47b0      	blx	r6
   159c8:	4b0d      	ldr	r3, [pc, #52]	; (15a00 <RADIO_FSKPacketSent+0x7c>)
   159ca:	6028      	str	r0, [r5, #0]
   159cc:	6069      	str	r1, [r5, #4]
   159ce:	2001      	movs	r0, #1
   159d0:	4798      	blx	r3
   159d2:	2304      	movs	r3, #4
   159d4:	8822      	ldrh	r2, [r4, #0]
   159d6:	4313      	orrs	r3, r2
   159d8:	8023      	strh	r3, [r4, #0]
   159da:	bd70      	pop	{r4, r5, r6, pc}
   159dc:	00008031 	.word	0x00008031
   159e0:	20002980 	.word	0x20002980
   159e4:	0000f029 	.word	0x0000f029
   159e8:	0001580d 	.word	0x0001580d
   159ec:	20002fbf 	.word	0x20002fbf
   159f0:	20002fbc 	.word	0x20002fbc
   159f4:	0000ecb9 	.word	0x0000ecb9
   159f8:	20001128 	.word	0x20001128
   159fc:	00016989 	.word	0x00016989
   15a00:	00015431 	.word	0x00015431

00015a04 <RADIO_RxDone>:
   15a04:	b570      	push	{r4, r5, r6, lr}
   15a06:	2012      	movs	r0, #18
   15a08:	4e16      	ldr	r6, [pc, #88]	; (15a64 <RADIO_RxDone+0x60>)
   15a0a:	47b0      	blx	r6
   15a0c:	4b16      	ldr	r3, [pc, #88]	; (15a68 <RADIO_RxDone+0x64>)
   15a0e:	0005      	movs	r5, r0
   15a10:	2170      	movs	r1, #112	; 0x70
   15a12:	2012      	movs	r0, #18
   15a14:	4798      	blx	r3
   15a16:	2350      	movs	r3, #80	; 0x50
   15a18:	402b      	ands	r3, r5
   15a1a:	2b50      	cmp	r3, #80	; 0x50
   15a1c:	d119      	bne.n	15a52 <RADIO_RxDone+0x4e>
   15a1e:	4c13      	ldr	r4, [pc, #76]	; (15a6c <RADIO_RxDone+0x68>)
   15a20:	0023      	movs	r3, r4
   15a22:	332f      	adds	r3, #47	; 0x2f
   15a24:	7818      	ldrb	r0, [r3, #0]
   15a26:	4b12      	ldr	r3, [pc, #72]	; (15a70 <RADIO_RxDone+0x6c>)
   15a28:	4798      	blx	r3
   15a2a:	4b12      	ldr	r3, [pc, #72]	; (15a74 <RADIO_RxDone+0x70>)
   15a2c:	2000      	movs	r0, #0
   15a2e:	4798      	blx	r3
   15a30:	3404      	adds	r4, #4
   15a32:	201c      	movs	r0, #28
   15a34:	47b0      	blx	r6
   15a36:	7fe2      	ldrb	r2, [r4, #31]
   15a38:	4b0f      	ldr	r3, [pc, #60]	; (15a78 <RADIO_RxDone+0x74>)
   15a3a:	4910      	ldr	r1, [pc, #64]	; (15a7c <RADIO_RxDone+0x78>)
   15a3c:	2a00      	cmp	r2, #0
   15a3e:	d003      	beq.n	15a48 <RADIO_RxDone+0x44>
   15a40:	06aa      	lsls	r2, r5, #26
   15a42:	d407      	bmi.n	15a54 <RADIO_RxDone+0x50>
   15a44:	0642      	lsls	r2, r0, #25
   15a46:	d505      	bpl.n	15a54 <RADIO_RxDone+0x50>
   15a48:	2002      	movs	r0, #2
   15a4a:	881a      	ldrh	r2, [r3, #0]
   15a4c:	4302      	orrs	r2, r0
   15a4e:	801a      	strh	r2, [r3, #0]
   15a50:	4788      	blx	r1
   15a52:	bd70      	pop	{r4, r5, r6, pc}
   15a54:	2280      	movs	r2, #128	; 0x80
   15a56:	8818      	ldrh	r0, [r3, #0]
   15a58:	0052      	lsls	r2, r2, #1
   15a5a:	4302      	orrs	r2, r0
   15a5c:	801a      	strh	r2, [r3, #0]
   15a5e:	2002      	movs	r0, #2
   15a60:	e7f6      	b.n	15a50 <RADIO_RxDone+0x4c>
   15a62:	46c0      	nop			; (mov r8, r8)
   15a64:	00008031 	.word	0x00008031
   15a68:	00008009 	.word	0x00008009
   15a6c:	20002980 	.word	0x20002980
   15a70:	0000f029 	.word	0x0000f029
   15a74:	0001580d 	.word	0x0001580d
   15a78:	20002fbc 	.word	0x20002fbc
   15a7c:	00015431 	.word	0x00015431

00015a80 <RADIO_FSKPayloadReady>:
   15a80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   15a82:	203f      	movs	r0, #63	; 0x3f
   15a84:	4b39      	ldr	r3, [pc, #228]	; (15b6c <RADIO_FSKPayloadReady+0xec>)
   15a86:	4798      	blx	r3
   15a88:	0743      	lsls	r3, r0, #29
   15a8a:	d559      	bpl.n	15b40 <RADIO_FSKPayloadReady+0xc0>
   15a8c:	4c38      	ldr	r4, [pc, #224]	; (15b70 <RADIO_FSKPayloadReady+0xf0>)
   15a8e:	4d39      	ldr	r5, [pc, #228]	; (15b74 <RADIO_FSKPayloadReady+0xf4>)
   15a90:	1d23      	adds	r3, r4, #4
   15a92:	7fdb      	ldrb	r3, [r3, #31]
   15a94:	2b01      	cmp	r3, #1
   15a96:	d154      	bne.n	15b42 <RADIO_FSKPayloadReady+0xc2>
   15a98:	2202      	movs	r2, #2
   15a9a:	4210      	tst	r0, r2
   15a9c:	d048      	beq.n	15b30 <RADIO_FSKPayloadReady+0xb0>
   15a9e:	0023      	movs	r3, r4
   15aa0:	332f      	adds	r3, #47	; 0x2f
   15aa2:	7818      	ldrb	r0, [r3, #0]
   15aa4:	4e34      	ldr	r6, [pc, #208]	; (15b78 <RADIO_FSKPayloadReady+0xf8>)
   15aa6:	47b0      	blx	r6
   15aa8:	0023      	movs	r3, r4
   15aaa:	332e      	adds	r3, #46	; 0x2e
   15aac:	7818      	ldrb	r0, [r3, #0]
   15aae:	47b0      	blx	r6
   15ab0:	4b32      	ldr	r3, [pc, #200]	; (15b7c <RADIO_FSKPayloadReady+0xfc>)
   15ab2:	4798      	blx	r3
   15ab4:	0022      	movs	r2, r4
   15ab6:	0023      	movs	r3, r4
   15ab8:	322c      	adds	r2, #44	; 0x2c
   15aba:	3358      	adds	r3, #88	; 0x58
   15abc:	7810      	ldrb	r0, [r2, #0]
   15abe:	7819      	ldrb	r1, [r3, #0]
   15ac0:	4288      	cmp	r0, r1
   15ac2:	d105      	bne.n	15ad0 <RADIO_FSKPayloadReady+0x50>
   15ac4:	7812      	ldrb	r2, [r2, #0]
   15ac6:	2a00      	cmp	r2, #0
   15ac8:	d002      	beq.n	15ad0 <RADIO_FSKPayloadReady+0x50>
   15aca:	781b      	ldrb	r3, [r3, #0]
   15acc:	2b00      	cmp	r3, #0
   15ace:	d118      	bne.n	15b02 <RADIO_FSKPayloadReady+0x82>
   15ad0:	0021      	movs	r1, r4
   15ad2:	312c      	adds	r1, #44	; 0x2c
   15ad4:	7808      	ldrb	r0, [r1, #0]
   15ad6:	b2c0      	uxtb	r0, r0
   15ad8:	2800      	cmp	r0, #0
   15ada:	d102      	bne.n	15ae2 <RADIO_FSKPayloadReady+0x62>
   15adc:	2201      	movs	r2, #1
   15ade:	4b28      	ldr	r3, [pc, #160]	; (15b80 <RADIO_FSKPayloadReady+0x100>)
   15ae0:	4798      	blx	r3
   15ae2:	0026      	movs	r6, r4
   15ae4:	0027      	movs	r7, r4
   15ae6:	3658      	adds	r6, #88	; 0x58
   15ae8:	7830      	ldrb	r0, [r6, #0]
   15aea:	372c      	adds	r7, #44	; 0x2c
   15aec:	b2c0      	uxtb	r0, r0
   15aee:	2800      	cmp	r0, #0
   15af0:	d110      	bne.n	15b14 <RADIO_FSKPayloadReady+0x94>
   15af2:	783a      	ldrb	r2, [r7, #0]
   15af4:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   15af6:	b2d2      	uxtb	r2, r2
   15af8:	4b21      	ldr	r3, [pc, #132]	; (15b80 <RADIO_FSKPayloadReady+0x100>)
   15afa:	4798      	blx	r3
   15afc:	783b      	ldrb	r3, [r7, #0]
   15afe:	b2db      	uxtb	r3, r3
   15b00:	7033      	strb	r3, [r6, #0]
   15b02:	4b20      	ldr	r3, [pc, #128]	; (15b84 <RADIO_FSKPayloadReady+0x104>)
   15b04:	4798      	blx	r3
   15b06:	4b20      	ldr	r3, [pc, #128]	; (15b88 <RADIO_FSKPayloadReady+0x108>)
   15b08:	2000      	movs	r0, #0
   15b0a:	4798      	blx	r3
   15b0c:	2308      	movs	r3, #8
   15b0e:	882a      	ldrh	r2, [r5, #0]
   15b10:	4313      	orrs	r3, r2
   15b12:	e011      	b.n	15b38 <RADIO_FSKPayloadReady+0xb8>
   15b14:	783b      	ldrb	r3, [r7, #0]
   15b16:	7832      	ldrb	r2, [r6, #0]
   15b18:	1a9b      	subs	r3, r3, r2
   15b1a:	2b00      	cmp	r3, #0
   15b1c:	ddf1      	ble.n	15b02 <RADIO_FSKPayloadReady+0x82>
   15b1e:	7833      	ldrb	r3, [r6, #0]
   15b20:	783a      	ldrb	r2, [r7, #0]
   15b22:	7831      	ldrb	r1, [r6, #0]
   15b24:	2000      	movs	r0, #0
   15b26:	1a52      	subs	r2, r2, r1
   15b28:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   15b2a:	b2d2      	uxtb	r2, r2
   15b2c:	18c9      	adds	r1, r1, r3
   15b2e:	e7e3      	b.n	15af8 <RADIO_FSKPayloadReady+0x78>
   15b30:	2380      	movs	r3, #128	; 0x80
   15b32:	8829      	ldrh	r1, [r5, #0]
   15b34:	005b      	lsls	r3, r3, #1
   15b36:	430b      	orrs	r3, r1
   15b38:	802b      	strh	r3, [r5, #0]
   15b3a:	2002      	movs	r0, #2
   15b3c:	4b13      	ldr	r3, [pc, #76]	; (15b8c <RADIO_FSKPayloadReady+0x10c>)
   15b3e:	4798      	blx	r3
   15b40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   15b42:	0023      	movs	r3, r4
   15b44:	332f      	adds	r3, #47	; 0x2f
   15b46:	4e0c      	ldr	r6, [pc, #48]	; (15b78 <RADIO_FSKPayloadReady+0xf8>)
   15b48:	7818      	ldrb	r0, [r3, #0]
   15b4a:	47b0      	blx	r6
   15b4c:	0023      	movs	r3, r4
   15b4e:	332e      	adds	r3, #46	; 0x2e
   15b50:	7818      	ldrb	r0, [r3, #0]
   15b52:	47b0      	blx	r6
   15b54:	4e0e      	ldr	r6, [pc, #56]	; (15b90 <RADIO_FSKPayloadReady+0x110>)
   15b56:	2201      	movs	r2, #1
   15b58:	0031      	movs	r1, r6
   15b5a:	2000      	movs	r0, #0
   15b5c:	4f08      	ldr	r7, [pc, #32]	; (15b80 <RADIO_FSKPayloadReady+0x100>)
   15b5e:	47b8      	blx	r7
   15b60:	7832      	ldrb	r2, [r6, #0]
   15b62:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   15b64:	b2d2      	uxtb	r2, r2
   15b66:	2000      	movs	r0, #0
   15b68:	47b8      	blx	r7
   15b6a:	e7cc      	b.n	15b06 <RADIO_FSKPayloadReady+0x86>
   15b6c:	00008031 	.word	0x00008031
   15b70:	20002980 	.word	0x20002980
   15b74:	20002fbc 	.word	0x20002fbc
   15b78:	0000f029 	.word	0x0000f029
   15b7c:	00004531 	.word	0x00004531
   15b80:	0000809d 	.word	0x0000809d
   15b84:	00004571 	.word	0x00004571
   15b88:	0001580d 	.word	0x0001580d
   15b8c:	00015431 	.word	0x00015431
   15b90:	200029ac 	.word	0x200029ac

00015b94 <Radio_SetClockInput>:
   15b94:	b510      	push	{r4, lr}
   15b96:	4b08      	ldr	r3, [pc, #32]	; (15bb8 <Radio_SetClockInput+0x24>)
   15b98:	3355      	adds	r3, #85	; 0x55
   15b9a:	781b      	ldrb	r3, [r3, #0]
   15b9c:	2b00      	cmp	r3, #0
   15b9e:	d10a      	bne.n	15bb6 <Radio_SetClockInput+0x22>
   15ba0:	4b06      	ldr	r3, [pc, #24]	; (15bbc <Radio_SetClockInput+0x28>)
   15ba2:	204b      	movs	r0, #75	; 0x4b
   15ba4:	4798      	blx	r3
   15ba6:	2110      	movs	r1, #16
   15ba8:	4301      	orrs	r1, r0
   15baa:	4b05      	ldr	r3, [pc, #20]	; (15bc0 <Radio_SetClockInput+0x2c>)
   15bac:	b2c9      	uxtb	r1, r1
   15bae:	204b      	movs	r0, #75	; 0x4b
   15bb0:	4798      	blx	r3
   15bb2:	4b04      	ldr	r3, [pc, #16]	; (15bc4 <Radio_SetClockInput+0x30>)
   15bb4:	4798      	blx	r3
   15bb6:	bd10      	pop	{r4, pc}
   15bb8:	20002980 	.word	0x20002980
   15bbc:	00008031 	.word	0x00008031
   15bc0:	00008009 	.word	0x00008009
   15bc4:	00008151 	.word	0x00008151

00015bc8 <Radio_ResetClockInput>:
   15bc8:	b510      	push	{r4, lr}
   15bca:	4b04      	ldr	r3, [pc, #16]	; (15bdc <Radio_ResetClockInput+0x14>)
   15bcc:	3355      	adds	r3, #85	; 0x55
   15bce:	781b      	ldrb	r3, [r3, #0]
   15bd0:	2b00      	cmp	r3, #0
   15bd2:	d101      	bne.n	15bd8 <Radio_ResetClockInput+0x10>
   15bd4:	4b02      	ldr	r3, [pc, #8]	; (15be0 <Radio_ResetClockInput+0x18>)
   15bd6:	4798      	blx	r3
   15bd8:	bd10      	pop	{r4, pc}
   15bda:	46c0      	nop			; (mov r8, r8)
   15bdc:	20002980 	.word	0x20002980
   15be0:	0000816d 	.word	0x0000816d

00015be4 <RADIO_InitDefaultAttributes>:
   15be4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   15be6:	2501      	movs	r5, #1
   15be8:	4b64      	ldr	r3, [pc, #400]	; (15d7c <RADIO_InitDefaultAttributes+0x198>)
   15bea:	4c65      	ldr	r4, [pc, #404]	; (15d80 <RADIO_InitDefaultAttributes+0x19c>)
   15bec:	701d      	strb	r5, [r3, #0]
   15bee:	4b65      	ldr	r3, [pc, #404]	; (15d84 <RADIO_InitDefaultAttributes+0x1a0>)
   15bf0:	2207      	movs	r2, #7
   15bf2:	6023      	str	r3, [r4, #0]
   15bf4:	4b64      	ldr	r3, [pc, #400]	; (15d88 <RADIO_InitDefaultAttributes+0x1a4>)
   15bf6:	18a1      	adds	r1, r4, r2
   15bf8:	6063      	str	r3, [r4, #4]
   15bfa:	4b64      	ldr	r3, [pc, #400]	; (15d8c <RADIO_InitDefaultAttributes+0x1a8>)
   15bfc:	0027      	movs	r7, r4
   15bfe:	60a3      	str	r3, [r4, #8]
   15c00:	0023      	movs	r3, r4
   15c02:	3334      	adds	r3, #52	; 0x34
   15c04:	701d      	strb	r5, [r3, #0]
   15c06:	0023      	movs	r3, r4
   15c08:	3336      	adds	r3, #54	; 0x36
   15c0a:	701a      	strb	r2, [r3, #0]
   15c0c:	1ce3      	adds	r3, r4, #3
   15c0e:	77dd      	strb	r5, [r3, #31]
   15c10:	0023      	movs	r3, r4
   15c12:	3333      	adds	r3, #51	; 0x33
   15c14:	701d      	strb	r5, [r3, #0]
   15c16:	2300      	movs	r3, #0
   15c18:	77cb      	strb	r3, [r1, #31]
   15c1a:	2108      	movs	r1, #8
   15c1c:	82a1      	strh	r1, [r4, #20]
   15c1e:	0021      	movs	r1, r4
   15c20:	3135      	adds	r1, #53	; 0x35
   15c22:	700a      	strb	r2, [r1, #0]
   15c24:	1d22      	adds	r2, r4, #4
   15c26:	77d5      	strb	r5, [r2, #31]
   15c28:	1d62      	adds	r2, r4, #5
   15c2a:	77d3      	strb	r3, [r2, #31]
   15c2c:	1da2      	adds	r2, r4, #6
   15c2e:	77d3      	strb	r3, [r2, #31]
   15c30:	2194      	movs	r1, #148	; 0x94
   15c32:	22c1      	movs	r2, #193	; 0xc1
   15c34:	76a1      	strb	r1, [r4, #26]
   15c36:	7662      	strb	r2, [r4, #25]
   15c38:	76e2      	strb	r2, [r4, #27]
   15c3a:	3991      	subs	r1, #145	; 0x91
   15c3c:	1ca2      	adds	r2, r4, #2
   15c3e:	77d1      	strb	r1, [r2, #31]
   15c40:	2234      	movs	r2, #52	; 0x34
   15c42:	7622      	strb	r2, [r4, #24]
   15c44:	0022      	movs	r2, r4
   15c46:	317d      	adds	r1, #125	; 0x7d
   15c48:	3232      	adds	r2, #50	; 0x32
   15c4a:	7011      	strb	r1, [r2, #0]
   15c4c:	4a50      	ldr	r2, [pc, #320]	; (15d90 <RADIO_InitDefaultAttributes+0x1ac>)
   15c4e:	397e      	subs	r1, #126	; 0x7e
   15c50:	60e2      	str	r2, [r4, #12]
   15c52:	0022      	movs	r2, r4
   15c54:	3237      	adds	r2, #55	; 0x37
   15c56:	7011      	strb	r1, [r2, #0]
   15c58:	0022      	movs	r2, r4
   15c5a:	3109      	adds	r1, #9
   15c5c:	3238      	adds	r2, #56	; 0x38
   15c5e:	7011      	strb	r1, [r2, #0]
   15c60:	0022      	movs	r2, r4
   15c62:	3107      	adds	r1, #7
   15c64:	3239      	adds	r2, #57	; 0x39
   15c66:	7011      	strb	r1, [r2, #0]
   15c68:	0022      	movs	r2, r4
   15c6a:	322c      	adds	r2, #44	; 0x2c
   15c6c:	7013      	strb	r3, [r2, #0]
   15c6e:	4a49      	ldr	r2, [pc, #292]	; (15d94 <RADIO_InitDefaultAttributes+0x1b0>)
   15c70:	82e3      	strh	r3, [r4, #22]
   15c72:	62a2      	str	r2, [r4, #40]	; 0x28
   15c74:	0022      	movs	r2, r4
   15c76:	324c      	adds	r2, #76	; 0x4c
   15c78:	8013      	strh	r3, [r2, #0]
   15c7a:	0022      	movs	r2, r4
   15c7c:	324e      	adds	r2, #78	; 0x4e
   15c7e:	7013      	strb	r3, [r2, #0]
   15c80:	0022      	movs	r2, r4
   15c82:	324f      	adds	r2, #79	; 0x4f
   15c84:	7013      	strb	r3, [r2, #0]
   15c86:	0022      	movs	r2, r4
   15c88:	3240      	adds	r2, #64	; 0x40
   15c8a:	7013      	strb	r3, [r2, #0]
   15c8c:	0022      	movs	r2, r4
   15c8e:	3241      	adds	r2, #65	; 0x41
   15c90:	7013      	strb	r3, [r2, #0]
   15c92:	0022      	movs	r2, r4
   15c94:	3254      	adds	r2, #84	; 0x54
   15c96:	7013      	strb	r3, [r2, #0]
   15c98:	0022      	movs	r2, r4
   15c9a:	3255      	adds	r2, #85	; 0x55
   15c9c:	7015      	strb	r5, [r2, #0]
   15c9e:	0022      	movs	r2, r4
   15ca0:	3258      	adds	r2, #88	; 0x58
   15ca2:	6463      	str	r3, [r4, #68]	; 0x44
   15ca4:	64a3      	str	r3, [r4, #72]	; 0x48
   15ca6:	87a3      	strh	r3, [r4, #60]	; 0x3c
   15ca8:	87e3      	strh	r3, [r4, #62]	; 0x3e
   15caa:	7013      	strb	r3, [r2, #0]
   15cac:	3730      	adds	r7, #48	; 0x30
   15cae:	783b      	ldrb	r3, [r7, #0]
   15cb0:	2b00      	cmp	r3, #0
   15cb2:	d151      	bne.n	15d58 <RADIO_InitDefaultAttributes+0x174>
   15cb4:	4838      	ldr	r0, [pc, #224]	; (15d98 <RADIO_InitDefaultAttributes+0x1b4>)
   15cb6:	4e39      	ldr	r6, [pc, #228]	; (15d9c <RADIO_InitDefaultAttributes+0x1b8>)
   15cb8:	47b0      	blx	r6
   15cba:	2808      	cmp	r0, #8
   15cbc:	d149      	bne.n	15d52 <RADIO_InitDefaultAttributes+0x16e>
   15cbe:	4838      	ldr	r0, [pc, #224]	; (15da0 <RADIO_InitDefaultAttributes+0x1bc>)
   15cc0:	47b0      	blx	r6
   15cc2:	2808      	cmp	r0, #8
   15cc4:	d145      	bne.n	15d52 <RADIO_InitDefaultAttributes+0x16e>
   15cc6:	4837      	ldr	r0, [pc, #220]	; (15da4 <RADIO_InitDefaultAttributes+0x1c0>)
   15cc8:	47b0      	blx	r6
   15cca:	2808      	cmp	r0, #8
   15ccc:	d141      	bne.n	15d52 <RADIO_InitDefaultAttributes+0x16e>
   15cce:	4836      	ldr	r0, [pc, #216]	; (15da8 <RADIO_InitDefaultAttributes+0x1c4>)
   15cd0:	47b0      	blx	r6
   15cd2:	2808      	cmp	r0, #8
   15cd4:	d13d      	bne.n	15d52 <RADIO_InitDefaultAttributes+0x16e>
   15cd6:	703d      	strb	r5, [r7, #0]
   15cd8:	4b34      	ldr	r3, [pc, #208]	; (15dac <RADIO_InitDefaultAttributes+0x1c8>)
   15cda:	4798      	blx	r3
   15cdc:	4b34      	ldr	r3, [pc, #208]	; (15db0 <RADIO_InitDefaultAttributes+0x1cc>)
   15cde:	4798      	blx	r3
   15ce0:	2800      	cmp	r0, #0
   15ce2:	d107      	bne.n	15cf4 <RADIO_InitDefaultAttributes+0x110>
   15ce4:	0023      	movs	r3, r4
   15ce6:	3355      	adds	r3, #85	; 0x55
   15ce8:	7018      	strb	r0, [r3, #0]
   15cea:	4b32      	ldr	r3, [pc, #200]	; (15db4 <RADIO_InitDefaultAttributes+0x1d0>)
   15cec:	4798      	blx	r3
   15cee:	0023      	movs	r3, r4
   15cf0:	3354      	adds	r3, #84	; 0x54
   15cf2:	7018      	strb	r0, [r3, #0]
   15cf4:	4b30      	ldr	r3, [pc, #192]	; (15db8 <RADIO_InitDefaultAttributes+0x1d4>)
   15cf6:	4798      	blx	r3
   15cf8:	2201      	movs	r2, #1
   15cfa:	2100      	movs	r1, #0
   15cfc:	0010      	movs	r0, r2
   15cfe:	4f2f      	ldr	r7, [pc, #188]	; (15dbc <RADIO_InitDefaultAttributes+0x1d8>)
   15d00:	47b8      	blx	r7
   15d02:	6820      	ldr	r0, [r4, #0]
   15d04:	4b2e      	ldr	r3, [pc, #184]	; (15dc0 <RADIO_InitDefaultAttributes+0x1dc>)
   15d06:	4798      	blx	r3
   15d08:	2142      	movs	r1, #66	; 0x42
   15d0a:	203b      	movs	r0, #59	; 0x3b
   15d0c:	4d2d      	ldr	r5, [pc, #180]	; (15dc4 <RADIO_InitDefaultAttributes+0x1e0>)
   15d0e:	47a8      	blx	r5
   15d10:	203b      	movs	r0, #59	; 0x3b
   15d12:	4b2d      	ldr	r3, [pc, #180]	; (15dc8 <RADIO_InitDefaultAttributes+0x1e4>)
   15d14:	4798      	blx	r3
   15d16:	2620      	movs	r6, #32
   15d18:	4006      	ands	r6, r0
   15d1a:	d1f9      	bne.n	15d10 <RADIO_InitDefaultAttributes+0x12c>
   15d1c:	2123      	movs	r1, #35	; 0x23
   15d1e:	200c      	movs	r0, #12
   15d20:	47a8      	blx	r5
   15d22:	21aa      	movs	r1, #170	; 0xaa
   15d24:	201f      	movs	r0, #31
   15d26:	47a8      	blx	r5
   15d28:	21ff      	movs	r1, #255	; 0xff
   15d2a:	2032      	movs	r0, #50	; 0x32
   15d2c:	47a8      	blx	r5
   15d2e:	2140      	movs	r1, #64	; 0x40
   15d30:	2031      	movs	r0, #49	; 0x31
   15d32:	47a8      	blx	r5
   15d34:	2201      	movs	r2, #1
   15d36:	0030      	movs	r0, r6
   15d38:	0011      	movs	r1, r2
   15d3a:	47b8      	blx	r7
   15d3c:	21ff      	movs	r1, #255	; 0xff
   15d3e:	2023      	movs	r0, #35	; 0x23
   15d40:	47a8      	blx	r5
   15d42:	4b21      	ldr	r3, [pc, #132]	; (15dc8 <RADIO_InitDefaultAttributes+0x1e4>)
   15d44:	2042      	movs	r0, #66	; 0x42
   15d46:	4798      	blx	r3
   15d48:	3431      	adds	r4, #49	; 0x31
   15d4a:	4b20      	ldr	r3, [pc, #128]	; (15dcc <RADIO_InitDefaultAttributes+0x1e8>)
   15d4c:	7020      	strb	r0, [r4, #0]
   15d4e:	4798      	blx	r3
   15d50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   15d52:	4b1f      	ldr	r3, [pc, #124]	; (15dd0 <RADIO_InitDefaultAttributes+0x1ec>)
   15d54:	4798      	blx	r3
   15d56:	e7bf      	b.n	15cd8 <RADIO_InitDefaultAttributes+0xf4>
   15d58:	0023      	movs	r3, r4
   15d5a:	332d      	adds	r3, #45	; 0x2d
   15d5c:	4d1d      	ldr	r5, [pc, #116]	; (15dd4 <RADIO_InitDefaultAttributes+0x1f0>)
   15d5e:	7818      	ldrb	r0, [r3, #0]
   15d60:	47a8      	blx	r5
   15d62:	0023      	movs	r3, r4
   15d64:	332e      	adds	r3, #46	; 0x2e
   15d66:	7818      	ldrb	r0, [r3, #0]
   15d68:	47a8      	blx	r5
   15d6a:	0023      	movs	r3, r4
   15d6c:	332f      	adds	r3, #47	; 0x2f
   15d6e:	7818      	ldrb	r0, [r3, #0]
   15d70:	47a8      	blx	r5
   15d72:	0023      	movs	r3, r4
   15d74:	3350      	adds	r3, #80	; 0x50
   15d76:	7818      	ldrb	r0, [r3, #0]
   15d78:	47a8      	blx	r5
   15d7a:	e7ad      	b.n	15cd8 <RADIO_InitDefaultAttributes+0xf4>
   15d7c:	20002fbf 	.word	0x20002fbf
   15d80:	20002980 	.word	0x20002980
   15d84:	33be27a0 	.word	0x33be27a0
   15d88:	000061a8 	.word	0x000061a8
   15d8c:	0000c350 	.word	0x0000c350
   15d90:	00003a98 	.word	0x00003a98
   15d94:	20002ebc 	.word	0x20002ebc
   15d98:	200029ad 	.word	0x200029ad
   15d9c:	0000ecdd 	.word	0x0000ecdd
   15da0:	200029ae 	.word	0x200029ae
   15da4:	200029af 	.word	0x200029af
   15da8:	200029d0 	.word	0x200029d0
   15dac:	00007fc9 	.word	0x00007fc9
   15db0:	0000814d 	.word	0x0000814d
   15db4:	00008149 	.word	0x00008149
   15db8:	00015b95 	.word	0x00015b95
   15dbc:	0000f3dd 	.word	0x0000f3dd
   15dc0:	00014e29 	.word	0x00014e29
   15dc4:	00008009 	.word	0x00008009
   15dc8:	00008031 	.word	0x00008031
   15dcc:	00015bc9 	.word	0x00015bc9
   15dd0:	0000ec21 	.word	0x0000ec21
   15dd4:	0000f029 	.word	0x0000f029

00015dd8 <RADIO_Receive>:
   15dd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   15dda:	7803      	ldrb	r3, [r0, #0]
   15ddc:	0006      	movs	r6, r0
   15dde:	4d24      	ldr	r5, [pc, #144]	; (15e70 <RADIO_Receive+0x98>)
   15de0:	2b00      	cmp	r3, #0
   15de2:	d11d      	bne.n	15e20 <RADIO_Receive+0x48>
   15de4:	782b      	ldrb	r3, [r5, #0]
   15de6:	2004      	movs	r0, #4
   15de8:	2b01      	cmp	r3, #1
   15dea:	d118      	bne.n	15e1e <RADIO_Receive+0x46>
   15dec:	4c21      	ldr	r4, [pc, #132]	; (15e74 <RADIO_Receive+0x9c>)
   15dee:	4f22      	ldr	r7, [pc, #136]	; (15e78 <RADIO_Receive+0xa0>)
   15df0:	0023      	movs	r3, r4
   15df2:	332f      	adds	r3, #47	; 0x2f
   15df4:	7818      	ldrb	r0, [r3, #0]
   15df6:	47b8      	blx	r7
   15df8:	0023      	movs	r3, r4
   15dfa:	3334      	adds	r3, #52	; 0x34
   15dfc:	781b      	ldrb	r3, [r3, #0]
   15dfe:	2b00      	cmp	r3, #0
   15e00:	d102      	bne.n	15e08 <RADIO_Receive+0x30>
   15e02:	342e      	adds	r4, #46	; 0x2e
   15e04:	7820      	ldrb	r0, [r4, #0]
   15e06:	47b8      	blx	r7
   15e08:	8872      	ldrh	r2, [r6, #2]
   15e0a:	4b1c      	ldr	r3, [pc, #112]	; (15e7c <RADIO_Receive+0xa4>)
   15e0c:	2008      	movs	r0, #8
   15e0e:	801a      	strh	r2, [r3, #0]
   15e10:	2304      	movs	r3, #4
   15e12:	702b      	strb	r3, [r5, #0]
   15e14:	4b1a      	ldr	r3, [pc, #104]	; (15e80 <RADIO_Receive+0xa8>)
   15e16:	4798      	blx	r3
   15e18:	4b1a      	ldr	r3, [pc, #104]	; (15e84 <RADIO_Receive+0xac>)
   15e1a:	4798      	blx	r3
   15e1c:	2000      	movs	r0, #0
   15e1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   15e20:	782b      	ldrb	r3, [r5, #0]
   15e22:	2000      	movs	r0, #0
   15e24:	2b01      	cmp	r3, #1
   15e26:	d0fa      	beq.n	15e1e <RADIO_Receive+0x46>
   15e28:	782b      	ldrb	r3, [r5, #0]
   15e2a:	3003      	adds	r0, #3
   15e2c:	2b04      	cmp	r3, #4
   15e2e:	d1f6      	bne.n	15e1e <RADIO_Receive+0x46>
   15e30:	4c10      	ldr	r4, [pc, #64]	; (15e74 <RADIO_Receive+0x9c>)
   15e32:	4e11      	ldr	r6, [pc, #68]	; (15e78 <RADIO_Receive+0xa0>)
   15e34:	0023      	movs	r3, r4
   15e36:	332f      	adds	r3, #47	; 0x2f
   15e38:	7818      	ldrb	r0, [r3, #0]
   15e3a:	47b0      	blx	r6
   15e3c:	0023      	movs	r3, r4
   15e3e:	3334      	adds	r3, #52	; 0x34
   15e40:	781b      	ldrb	r3, [r3, #0]
   15e42:	2b00      	cmp	r3, #0
   15e44:	d103      	bne.n	15e4e <RADIO_Receive+0x76>
   15e46:	0023      	movs	r3, r4
   15e48:	332e      	adds	r3, #46	; 0x2e
   15e4a:	7818      	ldrb	r0, [r3, #0]
   15e4c:	47b0      	blx	r6
   15e4e:	2200      	movs	r2, #0
   15e50:	3434      	adds	r4, #52	; 0x34
   15e52:	7821      	ldrb	r1, [r4, #0]
   15e54:	0010      	movs	r0, r2
   15e56:	4b0c      	ldr	r3, [pc, #48]	; (15e88 <RADIO_Receive+0xb0>)
   15e58:	4798      	blx	r3
   15e5a:	4b0c      	ldr	r3, [pc, #48]	; (15e8c <RADIO_Receive+0xb4>)
   15e5c:	4798      	blx	r3
   15e5e:	2301      	movs	r3, #1
   15e60:	2008      	movs	r0, #8
   15e62:	4c0b      	ldr	r4, [pc, #44]	; (15e90 <RADIO_Receive+0xb8>)
   15e64:	702b      	strb	r3, [r5, #0]
   15e66:	47a0      	blx	r4
   15e68:	2002      	movs	r0, #2
   15e6a:	47a0      	blx	r4
   15e6c:	e7d6      	b.n	15e1c <RADIO_Receive+0x44>
   15e6e:	46c0      	nop			; (mov r8, r8)
   15e70:	20002fbf 	.word	0x20002fbf
   15e74:	20002980 	.word	0x20002980
   15e78:	0000f029 	.word	0x0000f029
   15e7c:	20001126 	.word	0x20001126
   15e80:	00015431 	.word	0x00015431
   15e84:	00015b95 	.word	0x00015b95
   15e88:	0000f3dd 	.word	0x0000f3dd
   15e8c:	00015bc9 	.word	0x00015bc9
   15e90:	0001545d 	.word	0x0001545d

00015e94 <RADIO_TxHandler>:
   15e94:	b5f0      	push	{r4, r5, r6, r7, lr}
   15e96:	4e56      	ldr	r6, [pc, #344]	; (15ff0 <RADIO_TxHandler+0x15c>)
   15e98:	b087      	sub	sp, #28
   15e9a:	47b0      	blx	r6
   15e9c:	4c55      	ldr	r4, [pc, #340]	; (15ff4 <RADIO_TxHandler+0x160>)
   15e9e:	0023      	movs	r3, r4
   15ea0:	332d      	adds	r3, #45	; 0x2d
   15ea2:	7818      	ldrb	r0, [r3, #0]
   15ea4:	4b54      	ldr	r3, [pc, #336]	; (15ff8 <RADIO_TxHandler+0x164>)
   15ea6:	4798      	blx	r3
   15ea8:	0023      	movs	r3, r4
   15eaa:	3341      	adds	r3, #65	; 0x41
   15eac:	781b      	ldrb	r3, [r3, #0]
   15eae:	4d53      	ldr	r5, [pc, #332]	; (15ffc <RADIO_TxHandler+0x168>)
   15eb0:	2b00      	cmp	r3, #0
   15eb2:	d022      	beq.n	15efa <RADIO_TxHandler+0x66>
   15eb4:	2214      	movs	r2, #20
   15eb6:	8fa3      	ldrh	r3, [r4, #60]	; 0x3c
   15eb8:	4353      	muls	r3, r2
   15eba:	0022      	movs	r2, r4
   15ebc:	3240      	adds	r2, #64	; 0x40
   15ebe:	7013      	strb	r3, [r2, #0]
   15ec0:	47b0      	blx	r6
   15ec2:	2000      	movs	r0, #0
   15ec4:	4b4e      	ldr	r3, [pc, #312]	; (16000 <RADIO_TxHandler+0x16c>)
   15ec6:	4798      	blx	r3
   15ec8:	6820      	ldr	r0, [r4, #0]
   15eca:	4b4e      	ldr	r3, [pc, #312]	; (16004 <RADIO_TxHandler+0x170>)
   15ecc:	4798      	blx	r3
   15ece:	0023      	movs	r3, r4
   15ed0:	2600      	movs	r6, #0
   15ed2:	334c      	adds	r3, #76	; 0x4c
   15ed4:	2201      	movs	r2, #1
   15ed6:	801e      	strh	r6, [r3, #0]
   15ed8:	0031      	movs	r1, r6
   15eda:	4b4b      	ldr	r3, [pc, #300]	; (16008 <RADIO_TxHandler+0x174>)
   15edc:	0030      	movs	r0, r6
   15ede:	4798      	blx	r3
   15ee0:	2109      	movs	r1, #9
   15ee2:	2012      	movs	r0, #18
   15ee4:	47a8      	blx	r5
   15ee6:	2201      	movs	r2, #1
   15ee8:	0031      	movs	r1, r6
   15eea:	2005      	movs	r0, #5
   15eec:	4b46      	ldr	r3, [pc, #280]	; (16008 <RADIO_TxHandler+0x174>)
   15eee:	4798      	blx	r3
   15ef0:	0023      	movs	r3, r4
   15ef2:	3340      	adds	r3, #64	; 0x40
   15ef4:	781b      	ldrb	r3, [r3, #0]
   15ef6:	42b3      	cmp	r3, r6
   15ef8:	d844      	bhi.n	15f84 <RADIO_TxHandler+0xf0>
   15efa:	2001      	movs	r0, #1
   15efc:	4b40      	ldr	r3, [pc, #256]	; (16000 <RADIO_TxHandler+0x16c>)
   15efe:	4798      	blx	r3
   15f00:	4b42      	ldr	r3, [pc, #264]	; (1600c <RADIO_TxHandler+0x178>)
   15f02:	2004      	movs	r0, #4
   15f04:	4798      	blx	r3
   15f06:	4b42      	ldr	r3, [pc, #264]	; (16010 <RADIO_TxHandler+0x17c>)
   15f08:	4e42      	ldr	r6, [pc, #264]	; (16014 <RADIO_TxHandler+0x180>)
   15f0a:	781f      	ldrb	r7, [r3, #0]
   15f0c:	2f01      	cmp	r7, #1
   15f0e:	d146      	bne.n	15f9e <RADIO_TxHandler+0x10a>
   15f10:	7831      	ldrb	r1, [r6, #0]
   15f12:	2022      	movs	r0, #34	; 0x22
   15f14:	47a8      	blx	r5
   15f16:	4b40      	ldr	r3, [pc, #256]	; (16018 <RADIO_TxHandler+0x184>)
   15f18:	200a      	movs	r0, #10
   15f1a:	4798      	blx	r3
   15f1c:	21f0      	movs	r1, #240	; 0xf0
   15f1e:	4008      	ands	r0, r1
   15f20:	39e8      	subs	r1, #232	; 0xe8
   15f22:	4301      	orrs	r1, r0
   15f24:	200a      	movs	r0, #10
   15f26:	47a8      	blx	r5
   15f28:	2140      	movs	r1, #64	; 0x40
   15f2a:	0008      	movs	r0, r1
   15f2c:	47a8      	blx	r5
   15f2e:	2100      	movs	r1, #0
   15f30:	2041      	movs	r0, #65	; 0x41
   15f32:	47a8      	blx	r5
   15f34:	4b36      	ldr	r3, [pc, #216]	; (16010 <RADIO_TxHandler+0x17c>)
   15f36:	003a      	movs	r2, r7
   15f38:	7819      	ldrb	r1, [r3, #0]
   15f3a:	0038      	movs	r0, r7
   15f3c:	4b32      	ldr	r3, [pc, #200]	; (16008 <RADIO_TxHandler+0x174>)
   15f3e:	4798      	blx	r3
   15f40:	4b36      	ldr	r3, [pc, #216]	; (1601c <RADIO_TxHandler+0x188>)
   15f42:	7832      	ldrb	r2, [r6, #0]
   15f44:	6819      	ldr	r1, [r3, #0]
   15f46:	2000      	movs	r0, #0
   15f48:	4b35      	ldr	r3, [pc, #212]	; (16020 <RADIO_TxHandler+0x18c>)
   15f4a:	4798      	blx	r3
   15f4c:	0023      	movs	r3, r4
   15f4e:	3334      	adds	r3, #52	; 0x34
   15f50:	7819      	ldrb	r1, [r3, #0]
   15f52:	2200      	movs	r2, #0
   15f54:	2003      	movs	r0, #3
   15f56:	4b2c      	ldr	r3, [pc, #176]	; (16008 <RADIO_TxHandler+0x174>)
   15f58:	4798      	blx	r3
   15f5a:	4b32      	ldr	r3, [pc, #200]	; (16024 <RADIO_TxHandler+0x190>)
   15f5c:	4798      	blx	r3
   15f5e:	4b32      	ldr	r3, [pc, #200]	; (16028 <RADIO_TxHandler+0x194>)
   15f60:	6018      	str	r0, [r3, #0]
   15f62:	6059      	str	r1, [r3, #4]
   15f64:	68e3      	ldr	r3, [r4, #12]
   15f66:	2b00      	cmp	r3, #0
   15f68:	d009      	beq.n	15f7e <RADIO_TxHandler+0xea>
   15f6a:	21fa      	movs	r1, #250	; 0xfa
   15f6c:	2200      	movs	r2, #0
   15f6e:	342f      	adds	r4, #47	; 0x2f
   15f70:	0089      	lsls	r1, r1, #2
   15f72:	7820      	ldrb	r0, [r4, #0]
   15f74:	4359      	muls	r1, r3
   15f76:	9200      	str	r2, [sp, #0]
   15f78:	4b2c      	ldr	r3, [pc, #176]	; (1602c <RADIO_TxHandler+0x198>)
   15f7a:	4c2d      	ldr	r4, [pc, #180]	; (16030 <RADIO_TxHandler+0x19c>)
   15f7c:	47a0      	blx	r4
   15f7e:	2000      	movs	r0, #0
   15f80:	b007      	add	sp, #28
   15f82:	bdf0      	pop	{r4, r5, r6, r7, pc}
   15f84:	4f2b      	ldr	r7, [pc, #172]	; (16034 <RADIO_TxHandler+0x1a0>)
   15f86:	4b2c      	ldr	r3, [pc, #176]	; (16038 <RADIO_TxHandler+0x1a4>)
   15f88:	0038      	movs	r0, r7
   15f8a:	4798      	blx	r3
   15f8c:	233e      	movs	r3, #62	; 0x3e
   15f8e:	5ee2      	ldrsh	r2, [r4, r3]
   15f90:	2100      	movs	r1, #0
   15f92:	5e7b      	ldrsh	r3, [r7, r1]
   15f94:	429a      	cmp	r2, r3
   15f96:	db14      	blt.n	15fc2 <RADIO_TxHandler+0x12e>
   15f98:	3601      	adds	r6, #1
   15f9a:	b2f6      	uxtb	r6, r6
   15f9c:	e7a8      	b.n	15ef0 <RADIO_TxHandler+0x5c>
   15f9e:	2100      	movs	r1, #0
   15fa0:	2040      	movs	r0, #64	; 0x40
   15fa2:	47a8      	blx	r5
   15fa4:	2100      	movs	r1, #0
   15fa6:	2041      	movs	r0, #65	; 0x41
   15fa8:	47a8      	blx	r5
   15faa:	0023      	movs	r3, r4
   15fac:	2000      	movs	r0, #0
   15fae:	3358      	adds	r3, #88	; 0x58
   15fb0:	7831      	ldrb	r1, [r6, #0]
   15fb2:	7018      	strb	r0, [r3, #0]
   15fb4:	47a8      	blx	r5
   15fb6:	4b19      	ldr	r3, [pc, #100]	; (1601c <RADIO_TxHandler+0x188>)
   15fb8:	7831      	ldrb	r1, [r6, #0]
   15fba:	6818      	ldr	r0, [r3, #0]
   15fbc:	4b1f      	ldr	r3, [pc, #124]	; (1603c <RADIO_TxHandler+0x1a8>)
   15fbe:	4798      	blx	r3
   15fc0:	e7c4      	b.n	15f4c <RADIO_TxHandler+0xb8>
   15fc2:	2000      	movs	r0, #0
   15fc4:	4b1e      	ldr	r3, [pc, #120]	; (16040 <RADIO_TxHandler+0x1ac>)
   15fc6:	4798      	blx	r3
   15fc8:	4b1e      	ldr	r3, [pc, #120]	; (16044 <RADIO_TxHandler+0x1b0>)
   15fca:	4798      	blx	r3
   15fcc:	2307      	movs	r3, #7
   15fce:	2201      	movs	r2, #1
   15fd0:	a903      	add	r1, sp, #12
   15fd2:	700b      	strb	r3, [r1, #0]
   15fd4:	4b1c      	ldr	r3, [pc, #112]	; (16048 <RADIO_TxHandler+0x1b4>)
   15fd6:	701a      	strb	r2, [r3, #0]
   15fd8:	4b1c      	ldr	r3, [pc, #112]	; (1604c <RADIO_TxHandler+0x1b8>)
   15fda:	781b      	ldrb	r3, [r3, #0]
   15fdc:	079b      	lsls	r3, r3, #30
   15fde:	d400      	bmi.n	15fe2 <RADIO_TxHandler+0x14e>
   15fe0:	e78b      	b.n	15efa <RADIO_TxHandler+0x66>
   15fe2:	6923      	ldr	r3, [r4, #16]
   15fe4:	2b00      	cmp	r3, #0
   15fe6:	d100      	bne.n	15fea <RADIO_TxHandler+0x156>
   15fe8:	e787      	b.n	15efa <RADIO_TxHandler+0x66>
   15fea:	2002      	movs	r0, #2
   15fec:	4798      	blx	r3
   15fee:	e784      	b.n	15efa <RADIO_TxHandler+0x66>
   15ff0:	00015b95 	.word	0x00015b95
   15ff4:	20002980 	.word	0x20002980
   15ff8:	0000f029 	.word	0x0000f029
   15ffc:	00008009 	.word	0x00008009
   16000:	000156e5 	.word	0x000156e5
   16004:	00014e29 	.word	0x00014e29
   16008:	0000f3dd 	.word	0x0000f3dd
   1600c:	00014e71 	.word	0x00014e71
   16010:	200029b4 	.word	0x200029b4
   16014:	20001134 	.word	0x20001134
   16018:	00008031 	.word	0x00008031
   1601c:	20001130 	.word	0x20001130
   16020:	0000805d 	.word	0x0000805d
   16024:	0000ecb9 	.word	0x0000ecb9
   16028:	20001128 	.word	0x20001128
   1602c:	00015841 	.word	0x00015841
   16030:	0000ed11 	.word	0x0000ed11
   16034:	20001124 	.word	0x20001124
   16038:	0000f5a1 	.word	0x0000f5a1
   1603c:	00015561 	.word	0x00015561
   16040:	0001580d 	.word	0x0001580d
   16044:	00015bc9 	.word	0x00015bc9
   16048:	20002fbf 	.word	0x20002fbf
   1604c:	20002fbe 	.word	0x20002fbe

00016050 <RADIO_TxDoneHandler>:
   16050:	b5f0      	push	{r4, r5, r6, r7, lr}
   16052:	4b35      	ldr	r3, [pc, #212]	; (16128 <RADIO_TxDoneHandler+0xd8>)
   16054:	b087      	sub	sp, #28
   16056:	881a      	ldrh	r2, [r3, #0]
   16058:	06d2      	lsls	r2, r2, #27
   1605a:	0fd2      	lsrs	r2, r2, #31
   1605c:	9200      	str	r2, [sp, #0]
   1605e:	466a      	mov	r2, sp
   16060:	7810      	ldrb	r0, [r2, #0]
   16062:	881a      	ldrh	r2, [r3, #0]
   16064:	2801      	cmp	r0, #1
   16066:	d12b      	bne.n	160c0 <RADIO_TxDoneHandler+0x70>
   16068:	4c30      	ldr	r4, [pc, #192]	; (1612c <RADIO_TxDoneHandler+0xdc>)
   1606a:	2110      	movs	r1, #16
   1606c:	0027      	movs	r7, r4
   1606e:	2500      	movs	r5, #0
   16070:	438a      	bics	r2, r1
   16072:	801a      	strh	r2, [r3, #0]
   16074:	3734      	adds	r7, #52	; 0x34
   16076:	0002      	movs	r2, r0
   16078:	7839      	ldrb	r1, [r7, #0]
   1607a:	4b2d      	ldr	r3, [pc, #180]	; (16130 <RADIO_TxDoneHandler+0xe0>)
   1607c:	4798      	blx	r3
   1607e:	68e3      	ldr	r3, [r4, #12]
   16080:	ae03      	add	r6, sp, #12
   16082:	9304      	str	r3, [sp, #16]
   16084:	7035      	strb	r5, [r6, #0]
   16086:	002a      	movs	r2, r5
   16088:	4b29      	ldr	r3, [pc, #164]	; (16130 <RADIO_TxDoneHandler+0xe0>)
   1608a:	7839      	ldrb	r1, [r7, #0]
   1608c:	0028      	movs	r0, r5
   1608e:	4798      	blx	r3
   16090:	466a      	mov	r2, sp
   16092:	4b28      	ldr	r3, [pc, #160]	; (16134 <RADIO_TxDoneHandler+0xe4>)
   16094:	7812      	ldrb	r2, [r2, #0]
   16096:	701a      	strb	r2, [r3, #0]
   16098:	0023      	movs	r3, r4
   1609a:	3358      	adds	r3, #88	; 0x58
   1609c:	701d      	strb	r5, [r3, #0]
   1609e:	4b26      	ldr	r3, [pc, #152]	; (16138 <RADIO_TxDoneHandler+0xe8>)
   160a0:	781b      	ldrb	r3, [r3, #0]
   160a2:	075b      	lsls	r3, r3, #29
   160a4:	d505      	bpl.n	160b2 <RADIO_TxDoneHandler+0x62>
   160a6:	6923      	ldr	r3, [r4, #16]
   160a8:	42ab      	cmp	r3, r5
   160aa:	d002      	beq.n	160b2 <RADIO_TxDoneHandler+0x62>
   160ac:	0031      	movs	r1, r6
   160ae:	2004      	movs	r0, #4
   160b0:	4798      	blx	r3
   160b2:	4b22      	ldr	r3, [pc, #136]	; (1613c <RADIO_TxDoneHandler+0xec>)
   160b4:	4798      	blx	r3
   160b6:	4b22      	ldr	r3, [pc, #136]	; (16140 <RADIO_TxDoneHandler+0xf0>)
   160b8:	4798      	blx	r3
   160ba:	2000      	movs	r0, #0
   160bc:	b007      	add	sp, #28
   160be:	bdf0      	pop	{r4, r5, r6, r7, pc}
   160c0:	07d2      	lsls	r2, r2, #31
   160c2:	d402      	bmi.n	160ca <RADIO_TxDoneHandler+0x7a>
   160c4:	881a      	ldrh	r2, [r3, #0]
   160c6:	0752      	lsls	r2, r2, #29
   160c8:	d527      	bpl.n	1611a <RADIO_TxDoneHandler+0xca>
   160ca:	2601      	movs	r6, #1
   160cc:	2104      	movs	r1, #4
   160ce:	881a      	ldrh	r2, [r3, #0]
   160d0:	4f16      	ldr	r7, [pc, #88]	; (1612c <RADIO_TxDoneHandler+0xdc>)
   160d2:	43b2      	bics	r2, r6
   160d4:	801a      	strh	r2, [r3, #0]
   160d6:	881a      	ldrh	r2, [r3, #0]
   160d8:	2400      	movs	r4, #0
   160da:	438a      	bics	r2, r1
   160dc:	801a      	strh	r2, [r3, #0]
   160de:	4b19      	ldr	r3, [pc, #100]	; (16144 <RADIO_TxDoneHandler+0xf4>)
   160e0:	ad03      	add	r5, sp, #12
   160e2:	681b      	ldr	r3, [r3, #0]
   160e4:	702c      	strb	r4, [r5, #0]
   160e6:	9304      	str	r3, [sp, #16]
   160e8:	003b      	movs	r3, r7
   160ea:	3334      	adds	r3, #52	; 0x34
   160ec:	7819      	ldrb	r1, [r3, #0]
   160ee:	0022      	movs	r2, r4
   160f0:	0020      	movs	r0, r4
   160f2:	4b0f      	ldr	r3, [pc, #60]	; (16130 <RADIO_TxDoneHandler+0xe0>)
   160f4:	4798      	blx	r3
   160f6:	4b14      	ldr	r3, [pc, #80]	; (16148 <RADIO_TxDoneHandler+0xf8>)
   160f8:	4798      	blx	r3
   160fa:	4b0e      	ldr	r3, [pc, #56]	; (16134 <RADIO_TxDoneHandler+0xe4>)
   160fc:	701e      	strb	r6, [r3, #0]
   160fe:	003b      	movs	r3, r7
   16100:	3358      	adds	r3, #88	; 0x58
   16102:	701c      	strb	r4, [r3, #0]
   16104:	4b0c      	ldr	r3, [pc, #48]	; (16138 <RADIO_TxDoneHandler+0xe8>)
   16106:	781b      	ldrb	r3, [r3, #0]
   16108:	079b      	lsls	r3, r3, #30
   1610a:	d5d6      	bpl.n	160ba <RADIO_TxDoneHandler+0x6a>
   1610c:	693b      	ldr	r3, [r7, #16]
   1610e:	42a3      	cmp	r3, r4
   16110:	d0d3      	beq.n	160ba <RADIO_TxDoneHandler+0x6a>
   16112:	0029      	movs	r1, r5
   16114:	2002      	movs	r0, #2
   16116:	4798      	blx	r3
   16118:	e7cf      	b.n	160ba <RADIO_TxDoneHandler+0x6a>
   1611a:	881b      	ldrh	r3, [r3, #0]
   1611c:	059b      	lsls	r3, r3, #22
   1611e:	d5cc      	bpl.n	160ba <RADIO_TxDoneHandler+0x6a>
   16120:	4b0a      	ldr	r3, [pc, #40]	; (1614c <RADIO_TxDoneHandler+0xfc>)
   16122:	4798      	blx	r3
   16124:	e7c9      	b.n	160ba <RADIO_TxDoneHandler+0x6a>
   16126:	46c0      	nop			; (mov r8, r8)
   16128:	20002fbc 	.word	0x20002fbc
   1612c:	20002980 	.word	0x20002980
   16130:	0000f3dd 	.word	0x0000f3dd
   16134:	20002fbf 	.word	0x20002fbf
   16138:	20002fbe 	.word	0x20002fbe
   1613c:	00007fc9 	.word	0x00007fc9
   16140:	00015be5 	.word	0x00015be5
   16144:	20001128 	.word	0x20001128
   16148:	00015bc9 	.word	0x00015bc9
   1614c:	000164e9 	.word	0x000164e9

00016150 <RADIO_RxDoneHandler>:
   16150:	b5f0      	push	{r4, r5, r6, r7, lr}
   16152:	4b97      	ldr	r3, [pc, #604]	; (163b0 <RADIO_RxDoneHandler+0x260>)
   16154:	b085      	sub	sp, #20
   16156:	881c      	ldrh	r4, [r3, #0]
   16158:	881a      	ldrh	r2, [r3, #0]
   1615a:	06a4      	lsls	r4, r4, #26
   1615c:	0fe4      	lsrs	r4, r4, #31
   1615e:	b2e0      	uxtb	r0, r4
   16160:	2801      	cmp	r0, #1
   16162:	d126      	bne.n	161b2 <RADIO_RxDoneHandler+0x62>
   16164:	4d93      	ldr	r5, [pc, #588]	; (163b4 <RADIO_RxDoneHandler+0x264>)
   16166:	2120      	movs	r1, #32
   16168:	002e      	movs	r6, r5
   1616a:	438a      	bics	r2, r1
   1616c:	801a      	strh	r2, [r3, #0]
   1616e:	3634      	adds	r6, #52	; 0x34
   16170:	0002      	movs	r2, r0
   16172:	7831      	ldrb	r1, [r6, #0]
   16174:	4f90      	ldr	r7, [pc, #576]	; (163b8 <RADIO_RxDoneHandler+0x268>)
   16176:	47b8      	blx	r7
   16178:	2200      	movs	r2, #0
   1617a:	7831      	ldrb	r1, [r6, #0]
   1617c:	0010      	movs	r0, r2
   1617e:	47b8      	blx	r7
   16180:	4b8e      	ldr	r3, [pc, #568]	; (163bc <RADIO_RxDoneHandler+0x26c>)
   16182:	4798      	blx	r3
   16184:	4b8e      	ldr	r3, [pc, #568]	; (163c0 <RADIO_RxDoneHandler+0x270>)
   16186:	002a      	movs	r2, r5
   16188:	701c      	strb	r4, [r3, #0]
   1618a:	2300      	movs	r3, #0
   1618c:	322c      	adds	r2, #44	; 0x2c
   1618e:	7013      	strb	r3, [r2, #0]
   16190:	002a      	movs	r2, r5
   16192:	a901      	add	r1, sp, #4
   16194:	3258      	adds	r2, #88	; 0x58
   16196:	7013      	strb	r3, [r2, #0]
   16198:	700b      	strb	r3, [r1, #0]
   1619a:	4b8a      	ldr	r3, [pc, #552]	; (163c4 <RADIO_RxDoneHandler+0x274>)
   1619c:	781b      	ldrb	r3, [r3, #0]
   1619e:	071b      	lsls	r3, r3, #28
   161a0:	d504      	bpl.n	161ac <RADIO_RxDoneHandler+0x5c>
   161a2:	692b      	ldr	r3, [r5, #16]
   161a4:	2008      	movs	r0, #8
   161a6:	2b00      	cmp	r3, #0
   161a8:	d000      	beq.n	161ac <RADIO_RxDoneHandler+0x5c>
   161aa:	e084      	b.n	162b6 <RADIO_RxDoneHandler+0x166>
   161ac:	2000      	movs	r0, #0
   161ae:	b005      	add	sp, #20
   161b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   161b2:	0652      	lsls	r2, r2, #25
   161b4:	d402      	bmi.n	161bc <RADIO_RxDoneHandler+0x6c>
   161b6:	881a      	ldrh	r2, [r3, #0]
   161b8:	0612      	lsls	r2, r2, #24
   161ba:	d523      	bpl.n	16204 <RADIO_RxDoneHandler+0xb4>
   161bc:	2140      	movs	r1, #64	; 0x40
   161be:	881a      	ldrh	r2, [r3, #0]
   161c0:	4c7c      	ldr	r4, [pc, #496]	; (163b4 <RADIO_RxDoneHandler+0x264>)
   161c2:	438a      	bics	r2, r1
   161c4:	801a      	strh	r2, [r3, #0]
   161c6:	881a      	ldrh	r2, [r3, #0]
   161c8:	1849      	adds	r1, r1, r1
   161ca:	438a      	bics	r2, r1
   161cc:	801a      	strh	r2, [r3, #0]
   161ce:	0023      	movs	r3, r4
   161d0:	2200      	movs	r2, #0
   161d2:	3334      	adds	r3, #52	; 0x34
   161d4:	7819      	ldrb	r1, [r3, #0]
   161d6:	0010      	movs	r0, r2
   161d8:	4b77      	ldr	r3, [pc, #476]	; (163b8 <RADIO_RxDoneHandler+0x268>)
   161da:	4798      	blx	r3
   161dc:	4b77      	ldr	r3, [pc, #476]	; (163bc <RADIO_RxDoneHandler+0x26c>)
   161de:	4798      	blx	r3
   161e0:	2201      	movs	r2, #1
   161e2:	4b77      	ldr	r3, [pc, #476]	; (163c0 <RADIO_RxDoneHandler+0x270>)
   161e4:	a901      	add	r1, sp, #4
   161e6:	701a      	strb	r2, [r3, #0]
   161e8:	0022      	movs	r2, r4
   161ea:	2300      	movs	r3, #0
   161ec:	322c      	adds	r2, #44	; 0x2c
   161ee:	7013      	strb	r3, [r2, #0]
   161f0:	0022      	movs	r2, r4
   161f2:	3258      	adds	r2, #88	; 0x58
   161f4:	7013      	strb	r3, [r2, #0]
   161f6:	700b      	strb	r3, [r1, #0]
   161f8:	4b72      	ldr	r3, [pc, #456]	; (163c4 <RADIO_RxDoneHandler+0x274>)
   161fa:	781b      	ldrb	r3, [r3, #0]
   161fc:	071b      	lsls	r3, r3, #28
   161fe:	d5d5      	bpl.n	161ac <RADIO_RxDoneHandler+0x5c>
   16200:	6923      	ldr	r3, [r4, #16]
   16202:	e7cf      	b.n	161a4 <RADIO_RxDoneHandler+0x54>
   16204:	881a      	ldrh	r2, [r3, #0]
   16206:	0792      	lsls	r2, r2, #30
   16208:	d571      	bpl.n	162ee <RADIO_RxDoneHandler+0x19e>
   1620a:	2102      	movs	r1, #2
   1620c:	881a      	ldrh	r2, [r3, #0]
   1620e:	4d6e      	ldr	r5, [pc, #440]	; (163c8 <RADIO_RxDoneHandler+0x278>)
   16210:	438a      	bics	r2, r1
   16212:	801a      	strh	r2, [r3, #0]
   16214:	2013      	movs	r0, #19
   16216:	47a8      	blx	r5
   16218:	4c66      	ldr	r4, [pc, #408]	; (163b4 <RADIO_RxDoneHandler+0x264>)
   1621a:	2100      	movs	r1, #0
   1621c:	0026      	movs	r6, r4
   1621e:	362c      	adds	r6, #44	; 0x2c
   16220:	7030      	strb	r0, [r6, #0]
   16222:	4b6a      	ldr	r3, [pc, #424]	; (163cc <RADIO_RxDoneHandler+0x27c>)
   16224:	200d      	movs	r0, #13
   16226:	4798      	blx	r3
   16228:	7832      	ldrb	r2, [r6, #0]
   1622a:	4b69      	ldr	r3, [pc, #420]	; (163d0 <RADIO_RxDoneHandler+0x280>)
   1622c:	b2d2      	uxtb	r2, r2
   1622e:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   16230:	2000      	movs	r0, #0
   16232:	4798      	blx	r3
   16234:	2019      	movs	r0, #25
   16236:	47a8      	blx	r5
   16238:	0023      	movs	r3, r4
   1623a:	b240      	sxtb	r0, r0
   1623c:	3332      	adds	r3, #50	; 0x32
   1623e:	2800      	cmp	r0, #0
   16240:	da3b      	bge.n	162ba <RADIO_RxDoneHandler+0x16a>
   16242:	4240      	negs	r0, r0
   16244:	1080      	asrs	r0, r0, #2
   16246:	4240      	negs	r0, r0
   16248:	7018      	strb	r0, [r3, #0]
   1624a:	201a      	movs	r0, #26
   1624c:	47a8      	blx	r5
   1624e:	0023      	movs	r3, r4
   16250:	3332      	adds	r3, #50	; 0x32
   16252:	781b      	ldrb	r3, [r3, #0]
   16254:	b202      	sxth	r2, r0
   16256:	b25b      	sxtb	r3, r3
   16258:	4d5e      	ldr	r5, [pc, #376]	; (163d4 <RADIO_RxDoneHandler+0x284>)
   1625a:	2b00      	cmp	r3, #0
   1625c:	da36      	bge.n	162cc <RADIO_RxDoneHandler+0x17c>
   1625e:	6821      	ldr	r1, [r4, #0]
   16260:	4e5d      	ldr	r6, [pc, #372]	; (163d8 <RADIO_RxDoneHandler+0x288>)
   16262:	198e      	adds	r6, r1, r6
   16264:	42ae      	cmp	r6, r5
   16266:	d82a      	bhi.n	162be <RADIO_RxDoneHandler+0x16e>
   16268:	3b9d      	subs	r3, #157	; 0x9d
   1626a:	181b      	adds	r3, r3, r0
   1626c:	1112      	asrs	r2, r2, #4
   1626e:	189b      	adds	r3, r3, r2
   16270:	0022      	movs	r2, r4
   16272:	3256      	adds	r2, #86	; 0x56
   16274:	8013      	strh	r3, [r2, #0]
   16276:	0023      	movs	r3, r4
   16278:	2200      	movs	r2, #0
   1627a:	3334      	adds	r3, #52	; 0x34
   1627c:	7819      	ldrb	r1, [r3, #0]
   1627e:	0010      	movs	r0, r2
   16280:	4b4d      	ldr	r3, [pc, #308]	; (163b8 <RADIO_RxDoneHandler+0x268>)
   16282:	4798      	blx	r3
   16284:	4b4d      	ldr	r3, [pc, #308]	; (163bc <RADIO_RxDoneHandler+0x26c>)
   16286:	4798      	blx	r3
   16288:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1628a:	a901      	add	r1, sp, #4
   1628c:	604b      	str	r3, [r1, #4]
   1628e:	0023      	movs	r3, r4
   16290:	332c      	adds	r3, #44	; 0x2c
   16292:	781b      	ldrb	r3, [r3, #0]
   16294:	2201      	movs	r2, #1
   16296:	720b      	strb	r3, [r1, #8]
   16298:	2300      	movs	r3, #0
   1629a:	700b      	strb	r3, [r1, #0]
   1629c:	4b48      	ldr	r3, [pc, #288]	; (163c0 <RADIO_RxDoneHandler+0x270>)
   1629e:	701a      	strb	r2, [r3, #0]
   162a0:	4b48      	ldr	r3, [pc, #288]	; (163c4 <RADIO_RxDoneHandler+0x274>)
   162a2:	7818      	ldrb	r0, [r3, #0]
   162a4:	07c0      	lsls	r0, r0, #31
   162a6:	0fc0      	lsrs	r0, r0, #31
   162a8:	4290      	cmp	r0, r2
   162aa:	d000      	beq.n	162ae <RADIO_RxDoneHandler+0x15e>
   162ac:	e77e      	b.n	161ac <RADIO_RxDoneHandler+0x5c>
   162ae:	6923      	ldr	r3, [r4, #16]
   162b0:	2b00      	cmp	r3, #0
   162b2:	d100      	bne.n	162b6 <RADIO_RxDoneHandler+0x166>
   162b4:	e77a      	b.n	161ac <RADIO_RxDoneHandler+0x5c>
   162b6:	4798      	blx	r3
   162b8:	e778      	b.n	161ac <RADIO_RxDoneHandler+0x5c>
   162ba:	1080      	asrs	r0, r0, #2
   162bc:	e7c4      	b.n	16248 <RADIO_RxDoneHandler+0xf8>
   162be:	4d47      	ldr	r5, [pc, #284]	; (163dc <RADIO_RxDoneHandler+0x28c>)
   162c0:	1949      	adds	r1, r1, r5
   162c2:	4d47      	ldr	r5, [pc, #284]	; (163e0 <RADIO_RxDoneHandler+0x290>)
   162c4:	42a9      	cmp	r1, r5
   162c6:	d8d6      	bhi.n	16276 <RADIO_RxDoneHandler+0x126>
   162c8:	3ba4      	subs	r3, #164	; 0xa4
   162ca:	e7ce      	b.n	1626a <RADIO_RxDoneHandler+0x11a>
   162cc:	6823      	ldr	r3, [r4, #0]
   162ce:	4942      	ldr	r1, [pc, #264]	; (163d8 <RADIO_RxDoneHandler+0x288>)
   162d0:	1859      	adds	r1, r3, r1
   162d2:	42a9      	cmp	r1, r5
   162d4:	d802      	bhi.n	162dc <RADIO_RxDoneHandler+0x18c>
   162d6:	0003      	movs	r3, r0
   162d8:	3b9d      	subs	r3, #157	; 0x9d
   162da:	e7c7      	b.n	1626c <RADIO_RxDoneHandler+0x11c>
   162dc:	493f      	ldr	r1, [pc, #252]	; (163dc <RADIO_RxDoneHandler+0x28c>)
   162de:	185b      	adds	r3, r3, r1
   162e0:	493f      	ldr	r1, [pc, #252]	; (163e0 <RADIO_RxDoneHandler+0x290>)
   162e2:	428b      	cmp	r3, r1
   162e4:	d8c7      	bhi.n	16276 <RADIO_RxDoneHandler+0x126>
   162e6:	38a4      	subs	r0, #164	; 0xa4
   162e8:	1113      	asrs	r3, r2, #4
   162ea:	18c3      	adds	r3, r0, r3
   162ec:	e7c0      	b.n	16270 <RADIO_RxDoneHandler+0x120>
   162ee:	881a      	ldrh	r2, [r3, #0]
   162f0:	0712      	lsls	r2, r2, #28
   162f2:	0fd5      	lsrs	r5, r2, #31
   162f4:	2a00      	cmp	r2, #0
   162f6:	da27      	bge.n	16348 <RADIO_RxDoneHandler+0x1f8>
   162f8:	2108      	movs	r1, #8
   162fa:	881a      	ldrh	r2, [r3, #0]
   162fc:	4c2d      	ldr	r4, [pc, #180]	; (163b4 <RADIO_RxDoneHandler+0x264>)
   162fe:	438a      	bics	r2, r1
   16300:	801a      	strh	r2, [r3, #0]
   16302:	0023      	movs	r3, r4
   16304:	2280      	movs	r2, #128	; 0x80
   16306:	3332      	adds	r3, #50	; 0x32
   16308:	701a      	strb	r2, [r3, #0]
   1630a:	0023      	movs	r3, r4
   1630c:	2200      	movs	r2, #0
   1630e:	3334      	adds	r3, #52	; 0x34
   16310:	7819      	ldrb	r1, [r3, #0]
   16312:	0010      	movs	r0, r2
   16314:	4b28      	ldr	r3, [pc, #160]	; (163b8 <RADIO_RxDoneHandler+0x268>)
   16316:	4798      	blx	r3
   16318:	4b28      	ldr	r3, [pc, #160]	; (163bc <RADIO_RxDoneHandler+0x26c>)
   1631a:	4798      	blx	r3
   1631c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1631e:	a901      	add	r1, sp, #4
   16320:	604b      	str	r3, [r1, #4]
   16322:	0023      	movs	r3, r4
   16324:	332c      	adds	r3, #44	; 0x2c
   16326:	781b      	ldrb	r3, [r3, #0]
   16328:	0022      	movs	r2, r4
   1632a:	720b      	strb	r3, [r1, #8]
   1632c:	2300      	movs	r3, #0
   1632e:	3258      	adds	r2, #88	; 0x58
   16330:	7013      	strb	r3, [r2, #0]
   16332:	700b      	strb	r3, [r1, #0]
   16334:	4b22      	ldr	r3, [pc, #136]	; (163c0 <RADIO_RxDoneHandler+0x270>)
   16336:	701d      	strb	r5, [r3, #0]
   16338:	4b22      	ldr	r3, [pc, #136]	; (163c4 <RADIO_RxDoneHandler+0x274>)
   1633a:	7818      	ldrb	r0, [r3, #0]
   1633c:	07c0      	lsls	r0, r0, #31
   1633e:	0fc0      	lsrs	r0, r0, #31
   16340:	2801      	cmp	r0, #1
   16342:	d000      	beq.n	16346 <RADIO_RxDoneHandler+0x1f6>
   16344:	e732      	b.n	161ac <RADIO_RxDoneHandler+0x5c>
   16346:	e7b2      	b.n	162ae <RADIO_RxDoneHandler+0x15e>
   16348:	881a      	ldrh	r2, [r3, #0]
   1634a:	05d2      	lsls	r2, r2, #23
   1634c:	0fd5      	lsrs	r5, r2, #31
   1634e:	2a00      	cmp	r2, #0
   16350:	db00      	blt.n	16354 <RADIO_RxDoneHandler+0x204>
   16352:	e72b      	b.n	161ac <RADIO_RxDoneHandler+0x5c>
   16354:	4c17      	ldr	r4, [pc, #92]	; (163b4 <RADIO_RxDoneHandler+0x264>)
   16356:	881a      	ldrh	r2, [r3, #0]
   16358:	0026      	movs	r6, r4
   1635a:	4922      	ldr	r1, [pc, #136]	; (163e4 <RADIO_RxDoneHandler+0x294>)
   1635c:	362c      	adds	r6, #44	; 0x2c
   1635e:	400a      	ands	r2, r1
   16360:	801a      	strh	r2, [r3, #0]
   16362:	7832      	ldrb	r2, [r6, #0]
   16364:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   16366:	b2d2      	uxtb	r2, r2
   16368:	2000      	movs	r0, #0
   1636a:	4b19      	ldr	r3, [pc, #100]	; (163d0 <RADIO_RxDoneHandler+0x280>)
   1636c:	4798      	blx	r3
   1636e:	0023      	movs	r3, r4
   16370:	2200      	movs	r2, #0
   16372:	3334      	adds	r3, #52	; 0x34
   16374:	7819      	ldrb	r1, [r3, #0]
   16376:	0010      	movs	r0, r2
   16378:	4b0f      	ldr	r3, [pc, #60]	; (163b8 <RADIO_RxDoneHandler+0x268>)
   1637a:	4798      	blx	r3
   1637c:	4b0f      	ldr	r3, [pc, #60]	; (163bc <RADIO_RxDoneHandler+0x26c>)
   1637e:	4798      	blx	r3
   16380:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   16382:	a901      	add	r1, sp, #4
   16384:	604b      	str	r3, [r1, #4]
   16386:	7833      	ldrb	r3, [r6, #0]
   16388:	0022      	movs	r2, r4
   1638a:	720b      	strb	r3, [r1, #8]
   1638c:	2300      	movs	r3, #0
   1638e:	3258      	adds	r2, #88	; 0x58
   16390:	7013      	strb	r3, [r2, #0]
   16392:	700b      	strb	r3, [r1, #0]
   16394:	4b0a      	ldr	r3, [pc, #40]	; (163c0 <RADIO_RxDoneHandler+0x270>)
   16396:	701d      	strb	r5, [r3, #0]
   16398:	4b0a      	ldr	r3, [pc, #40]	; (163c4 <RADIO_RxDoneHandler+0x274>)
   1639a:	781b      	ldrb	r3, [r3, #0]
   1639c:	06db      	lsls	r3, r3, #27
   1639e:	d400      	bmi.n	163a2 <RADIO_RxDoneHandler+0x252>
   163a0:	e704      	b.n	161ac <RADIO_RxDoneHandler+0x5c>
   163a2:	6923      	ldr	r3, [r4, #16]
   163a4:	2b00      	cmp	r3, #0
   163a6:	d100      	bne.n	163aa <RADIO_RxDoneHandler+0x25a>
   163a8:	e700      	b.n	161ac <RADIO_RxDoneHandler+0x5c>
   163aa:	2010      	movs	r0, #16
   163ac:	e783      	b.n	162b6 <RADIO_RxDoneHandler+0x166>
   163ae:	46c0      	nop			; (mov r8, r8)
   163b0:	20002fbc 	.word	0x20002fbc
   163b4:	20002980 	.word	0x20002980
   163b8:	0000f3dd 	.word	0x0000f3dd
   163bc:	00015bc9 	.word	0x00015bc9
   163c0:	20002fbf 	.word	0x20002fbf
   163c4:	20002fbe 	.word	0x20002fbe
   163c8:	00008031 	.word	0x00008031
   163cc:	00008009 	.word	0x00008009
   163d0:	0000809d 	.word	0x0000809d
   163d4:	096ae380 	.word	0x096ae380
   163d8:	cc9eec80 	.word	0xcc9eec80
   163dc:	e78fe580 	.word	0xe78fe580
   163e0:	06dac2c0 	.word	0x06dac2c0
   163e4:	fffffeff 	.word	0xfffffeff

000163e8 <Radio_LBTScanTimeout>:
   163e8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   163ea:	4c1c      	ldr	r4, [pc, #112]	; (1645c <Radio_LBTScanTimeout+0x74>)
   163ec:	0025      	movs	r5, r4
   163ee:	0023      	movs	r3, r4
   163f0:	354f      	adds	r5, #79	; 0x4f
   163f2:	7829      	ldrb	r1, [r5, #0]
   163f4:	3340      	adds	r3, #64	; 0x40
   163f6:	3101      	adds	r1, #1
   163f8:	b2c9      	uxtb	r1, r1
   163fa:	7029      	strb	r1, [r5, #0]
   163fc:	781b      	ldrb	r3, [r3, #0]
   163fe:	428b      	cmp	r3, r1
   16400:	d315      	bcc.n	1642e <Radio_LBTScanTimeout+0x46>
   16402:	260e      	movs	r6, #14
   16404:	446e      	add	r6, sp
   16406:	4b16      	ldr	r3, [pc, #88]	; (16460 <Radio_LBTScanTimeout+0x78>)
   16408:	0030      	movs	r0, r6
   1640a:	4798      	blx	r3
   1640c:	2300      	movs	r3, #0
   1640e:	5ef2      	ldrsh	r2, [r6, r3]
   16410:	782b      	ldrb	r3, [r5, #0]
   16412:	4353      	muls	r3, r2
   16414:	6c62      	ldr	r2, [r4, #68]	; 0x44
   16416:	189b      	adds	r3, r3, r2
   16418:	6463      	str	r3, [r4, #68]	; 0x44
   1641a:	0023      	movs	r3, r4
   1641c:	2200      	movs	r2, #0
   1641e:	3350      	adds	r3, #80	; 0x50
   16420:	7818      	ldrb	r0, [r3, #0]
   16422:	9200      	str	r2, [sp, #0]
   16424:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   16426:	4b0f      	ldr	r3, [pc, #60]	; (16464 <Radio_LBTScanTimeout+0x7c>)
   16428:	4c0f      	ldr	r4, [pc, #60]	; (16468 <Radio_LBTScanTimeout+0x80>)
   1642a:	47a0      	blx	r4
   1642c:	bd7f      	pop	{r0, r1, r2, r3, r4, r5, r6, pc}
   1642e:	2380      	movs	r3, #128	; 0x80
   16430:	4a0e      	ldr	r2, [pc, #56]	; (1646c <Radio_LBTScanTimeout+0x84>)
   16432:	009b      	lsls	r3, r3, #2
   16434:	8810      	ldrh	r0, [r2, #0]
   16436:	4303      	orrs	r3, r0
   16438:	8013      	strh	r3, [r2, #0]
   1643a:	6c63      	ldr	r3, [r4, #68]	; 0x44
   1643c:	0058      	lsls	r0, r3, #1
   1643e:	1e4b      	subs	r3, r1, #1
   16440:	4359      	muls	r1, r3
   16442:	4b0b      	ldr	r3, [pc, #44]	; (16470 <Radio_LBTScanTimeout+0x88>)
   16444:	b289      	uxth	r1, r1
   16446:	4798      	blx	r3
   16448:	0023      	movs	r3, r4
   1644a:	334c      	adds	r3, #76	; 0x4c
   1644c:	8018      	strh	r0, [r3, #0]
   1644e:	2300      	movs	r3, #0
   16450:	2001      	movs	r0, #1
   16452:	702b      	strb	r3, [r5, #0]
   16454:	6463      	str	r3, [r4, #68]	; 0x44
   16456:	4b07      	ldr	r3, [pc, #28]	; (16474 <Radio_LBTScanTimeout+0x8c>)
   16458:	4798      	blx	r3
   1645a:	e7e7      	b.n	1642c <Radio_LBTScanTimeout+0x44>
   1645c:	20002980 	.word	0x20002980
   16460:	0000f5a1 	.word	0x0000f5a1
   16464:	000163e9 	.word	0x000163e9
   16468:	0000ed11 	.word	0x0000ed11
   1646c:	20002fbc 	.word	0x20002fbc
   16470:	000166c1 	.word	0x000166c1
   16474:	00015431 	.word	0x00015431

00016478 <RADIO_ScanHandler>:
   16478:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1647a:	4b12      	ldr	r3, [pc, #72]	; (164c4 <RADIO_ScanHandler+0x4c>)
   1647c:	4798      	blx	r3
   1647e:	2000      	movs	r0, #0
   16480:	4b11      	ldr	r3, [pc, #68]	; (164c8 <RADIO_ScanHandler+0x50>)
   16482:	4798      	blx	r3
   16484:	4d11      	ldr	r5, [pc, #68]	; (164cc <RADIO_ScanHandler+0x54>)
   16486:	4b12      	ldr	r3, [pc, #72]	; (164d0 <RADIO_ScanHandler+0x58>)
   16488:	6828      	ldr	r0, [r5, #0]
   1648a:	2400      	movs	r4, #0
   1648c:	4798      	blx	r3
   1648e:	002b      	movs	r3, r5
   16490:	4e10      	ldr	r6, [pc, #64]	; (164d4 <RADIO_ScanHandler+0x5c>)
   16492:	334c      	adds	r3, #76	; 0x4c
   16494:	2201      	movs	r2, #1
   16496:	0021      	movs	r1, r4
   16498:	0020      	movs	r0, r4
   1649a:	801c      	strh	r4, [r3, #0]
   1649c:	47b0      	blx	r6
   1649e:	4b0e      	ldr	r3, [pc, #56]	; (164d8 <RADIO_ScanHandler+0x60>)
   164a0:	2109      	movs	r1, #9
   164a2:	2012      	movs	r0, #18
   164a4:	4798      	blx	r3
   164a6:	3550      	adds	r5, #80	; 0x50
   164a8:	0022      	movs	r2, r4
   164aa:	0021      	movs	r1, r4
   164ac:	2005      	movs	r0, #5
   164ae:	47b0      	blx	r6
   164b0:	7828      	ldrb	r0, [r5, #0]
   164b2:	4b0a      	ldr	r3, [pc, #40]	; (164dc <RADIO_ScanHandler+0x64>)
   164b4:	4d0a      	ldr	r5, [pc, #40]	; (164e0 <RADIO_ScanHandler+0x68>)
   164b6:	9400      	str	r4, [sp, #0]
   164b8:	0022      	movs	r2, r4
   164ba:	490a      	ldr	r1, [pc, #40]	; (164e4 <RADIO_ScanHandler+0x6c>)
   164bc:	47a8      	blx	r5
   164be:	0020      	movs	r0, r4
   164c0:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
   164c2:	46c0      	nop			; (mov r8, r8)
   164c4:	00015b95 	.word	0x00015b95
   164c8:	000156e5 	.word	0x000156e5
   164cc:	20002980 	.word	0x20002980
   164d0:	00014e29 	.word	0x00014e29
   164d4:	0000f3dd 	.word	0x0000f3dd
   164d8:	00008009 	.word	0x00008009
   164dc:	000163e9 	.word	0x000163e9
   164e0:	0000ed11 	.word	0x0000ed11
   164e4:	00002328 	.word	0x00002328

000164e8 <radioScanDoneHandler>:
   164e8:	b530      	push	{r4, r5, lr}
   164ea:	4a18      	ldr	r2, [pc, #96]	; (1654c <radioScanDoneHandler+0x64>)
   164ec:	4918      	ldr	r1, [pc, #96]	; (16550 <radioScanDoneHandler+0x68>)
   164ee:	8813      	ldrh	r3, [r2, #0]
   164f0:	b085      	sub	sp, #20
   164f2:	400b      	ands	r3, r1
   164f4:	8013      	strh	r3, [r2, #0]
   164f6:	2200      	movs	r2, #0
   164f8:	4b16      	ldr	r3, [pc, #88]	; (16554 <radioScanDoneHandler+0x6c>)
   164fa:	0011      	movs	r1, r2
   164fc:	0010      	movs	r0, r2
   164fe:	4798      	blx	r3
   16500:	2000      	movs	r0, #0
   16502:	4b15      	ldr	r3, [pc, #84]	; (16558 <radioScanDoneHandler+0x70>)
   16504:	4798      	blx	r3
   16506:	4b15      	ldr	r3, [pc, #84]	; (1655c <radioScanDoneHandler+0x74>)
   16508:	4798      	blx	r3
   1650a:	4c15      	ldr	r4, [pc, #84]	; (16560 <radioScanDoneHandler+0x78>)
   1650c:	0023      	movs	r3, r4
   1650e:	334c      	adds	r3, #76	; 0x4c
   16510:	2100      	movs	r1, #0
   16512:	5e59      	ldrsh	r1, [r3, r1]
   16514:	233e      	movs	r3, #62	; 0x3e
   16516:	5ee2      	ldrsh	r2, [r4, r3]
   16518:	4b12      	ldr	r3, [pc, #72]	; (16564 <radioScanDoneHandler+0x7c>)
   1651a:	4291      	cmp	r1, r2
   1651c:	da06      	bge.n	1652c <radioScanDoneHandler+0x44>
   1651e:	2002      	movs	r0, #2
   16520:	4798      	blx	r3
   16522:	4b11      	ldr	r3, [pc, #68]	; (16568 <radioScanDoneHandler+0x80>)
   16524:	4798      	blx	r3
   16526:	2000      	movs	r0, #0
   16528:	b005      	add	sp, #20
   1652a:	bd30      	pop	{r4, r5, pc}
   1652c:	2207      	movs	r2, #7
   1652e:	ad01      	add	r5, sp, #4
   16530:	2001      	movs	r0, #1
   16532:	702a      	strb	r2, [r5, #0]
   16534:	4798      	blx	r3
   16536:	4b0d      	ldr	r3, [pc, #52]	; (1656c <radioScanDoneHandler+0x84>)
   16538:	781b      	ldrb	r3, [r3, #0]
   1653a:	079b      	lsls	r3, r3, #30
   1653c:	d5f3      	bpl.n	16526 <radioScanDoneHandler+0x3e>
   1653e:	6923      	ldr	r3, [r4, #16]
   16540:	2b00      	cmp	r3, #0
   16542:	d0f0      	beq.n	16526 <radioScanDoneHandler+0x3e>
   16544:	0029      	movs	r1, r5
   16546:	2002      	movs	r0, #2
   16548:	4798      	blx	r3
   1654a:	e7ec      	b.n	16526 <radioScanDoneHandler+0x3e>
   1654c:	20002fbc 	.word	0x20002fbc
   16550:	fffffdff 	.word	0xfffffdff
   16554:	0000f3dd 	.word	0x0000f3dd
   16558:	0001580d 	.word	0x0001580d
   1655c:	00015bc9 	.word	0x00015bc9
   16560:	20002980 	.word	0x20002980
   16564:	000154dd 	.word	0x000154dd
   16568:	00015e95 	.word	0x00015e95
   1656c:	20002fbe 	.word	0x20002fbe

00016570 <__gnu_thumb1_case_sqi>:
   16570:	b402      	push	{r1}
   16572:	4671      	mov	r1, lr
   16574:	0849      	lsrs	r1, r1, #1
   16576:	0049      	lsls	r1, r1, #1
   16578:	5609      	ldrsb	r1, [r1, r0]
   1657a:	0049      	lsls	r1, r1, #1
   1657c:	448e      	add	lr, r1
   1657e:	bc02      	pop	{r1}
   16580:	4770      	bx	lr
   16582:	46c0      	nop			; (mov r8, r8)

00016584 <__gnu_thumb1_case_uqi>:
   16584:	b402      	push	{r1}
   16586:	4671      	mov	r1, lr
   16588:	0849      	lsrs	r1, r1, #1
   1658a:	0049      	lsls	r1, r1, #1
   1658c:	5c09      	ldrb	r1, [r1, r0]
   1658e:	0049      	lsls	r1, r1, #1
   16590:	448e      	add	lr, r1
   16592:	bc02      	pop	{r1}
   16594:	4770      	bx	lr
   16596:	46c0      	nop			; (mov r8, r8)

00016598 <__gnu_thumb1_case_uhi>:
   16598:	b403      	push	{r0, r1}
   1659a:	4671      	mov	r1, lr
   1659c:	0849      	lsrs	r1, r1, #1
   1659e:	0040      	lsls	r0, r0, #1
   165a0:	0049      	lsls	r1, r1, #1
   165a2:	5a09      	ldrh	r1, [r1, r0]
   165a4:	0049      	lsls	r1, r1, #1
   165a6:	448e      	add	lr, r1
   165a8:	bc03      	pop	{r0, r1}
   165aa:	4770      	bx	lr

000165ac <__udivsi3>:
   165ac:	2200      	movs	r2, #0
   165ae:	0843      	lsrs	r3, r0, #1
   165b0:	428b      	cmp	r3, r1
   165b2:	d374      	bcc.n	1669e <__udivsi3+0xf2>
   165b4:	0903      	lsrs	r3, r0, #4
   165b6:	428b      	cmp	r3, r1
   165b8:	d35f      	bcc.n	1667a <__udivsi3+0xce>
   165ba:	0a03      	lsrs	r3, r0, #8
   165bc:	428b      	cmp	r3, r1
   165be:	d344      	bcc.n	1664a <__udivsi3+0x9e>
   165c0:	0b03      	lsrs	r3, r0, #12
   165c2:	428b      	cmp	r3, r1
   165c4:	d328      	bcc.n	16618 <__udivsi3+0x6c>
   165c6:	0c03      	lsrs	r3, r0, #16
   165c8:	428b      	cmp	r3, r1
   165ca:	d30d      	bcc.n	165e8 <__udivsi3+0x3c>
   165cc:	22ff      	movs	r2, #255	; 0xff
   165ce:	0209      	lsls	r1, r1, #8
   165d0:	ba12      	rev	r2, r2
   165d2:	0c03      	lsrs	r3, r0, #16
   165d4:	428b      	cmp	r3, r1
   165d6:	d302      	bcc.n	165de <__udivsi3+0x32>
   165d8:	1212      	asrs	r2, r2, #8
   165da:	0209      	lsls	r1, r1, #8
   165dc:	d065      	beq.n	166aa <__udivsi3+0xfe>
   165de:	0b03      	lsrs	r3, r0, #12
   165e0:	428b      	cmp	r3, r1
   165e2:	d319      	bcc.n	16618 <__udivsi3+0x6c>
   165e4:	e000      	b.n	165e8 <__udivsi3+0x3c>
   165e6:	0a09      	lsrs	r1, r1, #8
   165e8:	0bc3      	lsrs	r3, r0, #15
   165ea:	428b      	cmp	r3, r1
   165ec:	d301      	bcc.n	165f2 <__udivsi3+0x46>
   165ee:	03cb      	lsls	r3, r1, #15
   165f0:	1ac0      	subs	r0, r0, r3
   165f2:	4152      	adcs	r2, r2
   165f4:	0b83      	lsrs	r3, r0, #14
   165f6:	428b      	cmp	r3, r1
   165f8:	d301      	bcc.n	165fe <__udivsi3+0x52>
   165fa:	038b      	lsls	r3, r1, #14
   165fc:	1ac0      	subs	r0, r0, r3
   165fe:	4152      	adcs	r2, r2
   16600:	0b43      	lsrs	r3, r0, #13
   16602:	428b      	cmp	r3, r1
   16604:	d301      	bcc.n	1660a <__udivsi3+0x5e>
   16606:	034b      	lsls	r3, r1, #13
   16608:	1ac0      	subs	r0, r0, r3
   1660a:	4152      	adcs	r2, r2
   1660c:	0b03      	lsrs	r3, r0, #12
   1660e:	428b      	cmp	r3, r1
   16610:	d301      	bcc.n	16616 <__udivsi3+0x6a>
   16612:	030b      	lsls	r3, r1, #12
   16614:	1ac0      	subs	r0, r0, r3
   16616:	4152      	adcs	r2, r2
   16618:	0ac3      	lsrs	r3, r0, #11
   1661a:	428b      	cmp	r3, r1
   1661c:	d301      	bcc.n	16622 <__udivsi3+0x76>
   1661e:	02cb      	lsls	r3, r1, #11
   16620:	1ac0      	subs	r0, r0, r3
   16622:	4152      	adcs	r2, r2
   16624:	0a83      	lsrs	r3, r0, #10
   16626:	428b      	cmp	r3, r1
   16628:	d301      	bcc.n	1662e <__udivsi3+0x82>
   1662a:	028b      	lsls	r3, r1, #10
   1662c:	1ac0      	subs	r0, r0, r3
   1662e:	4152      	adcs	r2, r2
   16630:	0a43      	lsrs	r3, r0, #9
   16632:	428b      	cmp	r3, r1
   16634:	d301      	bcc.n	1663a <__udivsi3+0x8e>
   16636:	024b      	lsls	r3, r1, #9
   16638:	1ac0      	subs	r0, r0, r3
   1663a:	4152      	adcs	r2, r2
   1663c:	0a03      	lsrs	r3, r0, #8
   1663e:	428b      	cmp	r3, r1
   16640:	d301      	bcc.n	16646 <__udivsi3+0x9a>
   16642:	020b      	lsls	r3, r1, #8
   16644:	1ac0      	subs	r0, r0, r3
   16646:	4152      	adcs	r2, r2
   16648:	d2cd      	bcs.n	165e6 <__udivsi3+0x3a>
   1664a:	09c3      	lsrs	r3, r0, #7
   1664c:	428b      	cmp	r3, r1
   1664e:	d301      	bcc.n	16654 <__udivsi3+0xa8>
   16650:	01cb      	lsls	r3, r1, #7
   16652:	1ac0      	subs	r0, r0, r3
   16654:	4152      	adcs	r2, r2
   16656:	0983      	lsrs	r3, r0, #6
   16658:	428b      	cmp	r3, r1
   1665a:	d301      	bcc.n	16660 <__udivsi3+0xb4>
   1665c:	018b      	lsls	r3, r1, #6
   1665e:	1ac0      	subs	r0, r0, r3
   16660:	4152      	adcs	r2, r2
   16662:	0943      	lsrs	r3, r0, #5
   16664:	428b      	cmp	r3, r1
   16666:	d301      	bcc.n	1666c <__udivsi3+0xc0>
   16668:	014b      	lsls	r3, r1, #5
   1666a:	1ac0      	subs	r0, r0, r3
   1666c:	4152      	adcs	r2, r2
   1666e:	0903      	lsrs	r3, r0, #4
   16670:	428b      	cmp	r3, r1
   16672:	d301      	bcc.n	16678 <__udivsi3+0xcc>
   16674:	010b      	lsls	r3, r1, #4
   16676:	1ac0      	subs	r0, r0, r3
   16678:	4152      	adcs	r2, r2
   1667a:	08c3      	lsrs	r3, r0, #3
   1667c:	428b      	cmp	r3, r1
   1667e:	d301      	bcc.n	16684 <__udivsi3+0xd8>
   16680:	00cb      	lsls	r3, r1, #3
   16682:	1ac0      	subs	r0, r0, r3
   16684:	4152      	adcs	r2, r2
   16686:	0883      	lsrs	r3, r0, #2
   16688:	428b      	cmp	r3, r1
   1668a:	d301      	bcc.n	16690 <__udivsi3+0xe4>
   1668c:	008b      	lsls	r3, r1, #2
   1668e:	1ac0      	subs	r0, r0, r3
   16690:	4152      	adcs	r2, r2
   16692:	0843      	lsrs	r3, r0, #1
   16694:	428b      	cmp	r3, r1
   16696:	d301      	bcc.n	1669c <__udivsi3+0xf0>
   16698:	004b      	lsls	r3, r1, #1
   1669a:	1ac0      	subs	r0, r0, r3
   1669c:	4152      	adcs	r2, r2
   1669e:	1a41      	subs	r1, r0, r1
   166a0:	d200      	bcs.n	166a4 <__udivsi3+0xf8>
   166a2:	4601      	mov	r1, r0
   166a4:	4152      	adcs	r2, r2
   166a6:	4610      	mov	r0, r2
   166a8:	4770      	bx	lr
   166aa:	e7ff      	b.n	166ac <__udivsi3+0x100>
   166ac:	b501      	push	{r0, lr}
   166ae:	2000      	movs	r0, #0
   166b0:	f000 f8f0 	bl	16894 <__aeabi_idiv0>
   166b4:	bd02      	pop	{r1, pc}
   166b6:	46c0      	nop			; (mov r8, r8)

000166b8 <__aeabi_uidivmod>:
   166b8:	2900      	cmp	r1, #0
   166ba:	d0f7      	beq.n	166ac <__udivsi3+0x100>
   166bc:	e776      	b.n	165ac <__udivsi3>
   166be:	4770      	bx	lr

000166c0 <__divsi3>:
   166c0:	4603      	mov	r3, r0
   166c2:	430b      	orrs	r3, r1
   166c4:	d47f      	bmi.n	167c6 <__divsi3+0x106>
   166c6:	2200      	movs	r2, #0
   166c8:	0843      	lsrs	r3, r0, #1
   166ca:	428b      	cmp	r3, r1
   166cc:	d374      	bcc.n	167b8 <__divsi3+0xf8>
   166ce:	0903      	lsrs	r3, r0, #4
   166d0:	428b      	cmp	r3, r1
   166d2:	d35f      	bcc.n	16794 <__divsi3+0xd4>
   166d4:	0a03      	lsrs	r3, r0, #8
   166d6:	428b      	cmp	r3, r1
   166d8:	d344      	bcc.n	16764 <__divsi3+0xa4>
   166da:	0b03      	lsrs	r3, r0, #12
   166dc:	428b      	cmp	r3, r1
   166de:	d328      	bcc.n	16732 <__divsi3+0x72>
   166e0:	0c03      	lsrs	r3, r0, #16
   166e2:	428b      	cmp	r3, r1
   166e4:	d30d      	bcc.n	16702 <__divsi3+0x42>
   166e6:	22ff      	movs	r2, #255	; 0xff
   166e8:	0209      	lsls	r1, r1, #8
   166ea:	ba12      	rev	r2, r2
   166ec:	0c03      	lsrs	r3, r0, #16
   166ee:	428b      	cmp	r3, r1
   166f0:	d302      	bcc.n	166f8 <__divsi3+0x38>
   166f2:	1212      	asrs	r2, r2, #8
   166f4:	0209      	lsls	r1, r1, #8
   166f6:	d065      	beq.n	167c4 <__divsi3+0x104>
   166f8:	0b03      	lsrs	r3, r0, #12
   166fa:	428b      	cmp	r3, r1
   166fc:	d319      	bcc.n	16732 <__divsi3+0x72>
   166fe:	e000      	b.n	16702 <__divsi3+0x42>
   16700:	0a09      	lsrs	r1, r1, #8
   16702:	0bc3      	lsrs	r3, r0, #15
   16704:	428b      	cmp	r3, r1
   16706:	d301      	bcc.n	1670c <__divsi3+0x4c>
   16708:	03cb      	lsls	r3, r1, #15
   1670a:	1ac0      	subs	r0, r0, r3
   1670c:	4152      	adcs	r2, r2
   1670e:	0b83      	lsrs	r3, r0, #14
   16710:	428b      	cmp	r3, r1
   16712:	d301      	bcc.n	16718 <__divsi3+0x58>
   16714:	038b      	lsls	r3, r1, #14
   16716:	1ac0      	subs	r0, r0, r3
   16718:	4152      	adcs	r2, r2
   1671a:	0b43      	lsrs	r3, r0, #13
   1671c:	428b      	cmp	r3, r1
   1671e:	d301      	bcc.n	16724 <__divsi3+0x64>
   16720:	034b      	lsls	r3, r1, #13
   16722:	1ac0      	subs	r0, r0, r3
   16724:	4152      	adcs	r2, r2
   16726:	0b03      	lsrs	r3, r0, #12
   16728:	428b      	cmp	r3, r1
   1672a:	d301      	bcc.n	16730 <__divsi3+0x70>
   1672c:	030b      	lsls	r3, r1, #12
   1672e:	1ac0      	subs	r0, r0, r3
   16730:	4152      	adcs	r2, r2
   16732:	0ac3      	lsrs	r3, r0, #11
   16734:	428b      	cmp	r3, r1
   16736:	d301      	bcc.n	1673c <__divsi3+0x7c>
   16738:	02cb      	lsls	r3, r1, #11
   1673a:	1ac0      	subs	r0, r0, r3
   1673c:	4152      	adcs	r2, r2
   1673e:	0a83      	lsrs	r3, r0, #10
   16740:	428b      	cmp	r3, r1
   16742:	d301      	bcc.n	16748 <__divsi3+0x88>
   16744:	028b      	lsls	r3, r1, #10
   16746:	1ac0      	subs	r0, r0, r3
   16748:	4152      	adcs	r2, r2
   1674a:	0a43      	lsrs	r3, r0, #9
   1674c:	428b      	cmp	r3, r1
   1674e:	d301      	bcc.n	16754 <__divsi3+0x94>
   16750:	024b      	lsls	r3, r1, #9
   16752:	1ac0      	subs	r0, r0, r3
   16754:	4152      	adcs	r2, r2
   16756:	0a03      	lsrs	r3, r0, #8
   16758:	428b      	cmp	r3, r1
   1675a:	d301      	bcc.n	16760 <__divsi3+0xa0>
   1675c:	020b      	lsls	r3, r1, #8
   1675e:	1ac0      	subs	r0, r0, r3
   16760:	4152      	adcs	r2, r2
   16762:	d2cd      	bcs.n	16700 <__divsi3+0x40>
   16764:	09c3      	lsrs	r3, r0, #7
   16766:	428b      	cmp	r3, r1
   16768:	d301      	bcc.n	1676e <__divsi3+0xae>
   1676a:	01cb      	lsls	r3, r1, #7
   1676c:	1ac0      	subs	r0, r0, r3
   1676e:	4152      	adcs	r2, r2
   16770:	0983      	lsrs	r3, r0, #6
   16772:	428b      	cmp	r3, r1
   16774:	d301      	bcc.n	1677a <__divsi3+0xba>
   16776:	018b      	lsls	r3, r1, #6
   16778:	1ac0      	subs	r0, r0, r3
   1677a:	4152      	adcs	r2, r2
   1677c:	0943      	lsrs	r3, r0, #5
   1677e:	428b      	cmp	r3, r1
   16780:	d301      	bcc.n	16786 <__divsi3+0xc6>
   16782:	014b      	lsls	r3, r1, #5
   16784:	1ac0      	subs	r0, r0, r3
   16786:	4152      	adcs	r2, r2
   16788:	0903      	lsrs	r3, r0, #4
   1678a:	428b      	cmp	r3, r1
   1678c:	d301      	bcc.n	16792 <__divsi3+0xd2>
   1678e:	010b      	lsls	r3, r1, #4
   16790:	1ac0      	subs	r0, r0, r3
   16792:	4152      	adcs	r2, r2
   16794:	08c3      	lsrs	r3, r0, #3
   16796:	428b      	cmp	r3, r1
   16798:	d301      	bcc.n	1679e <__divsi3+0xde>
   1679a:	00cb      	lsls	r3, r1, #3
   1679c:	1ac0      	subs	r0, r0, r3
   1679e:	4152      	adcs	r2, r2
   167a0:	0883      	lsrs	r3, r0, #2
   167a2:	428b      	cmp	r3, r1
   167a4:	d301      	bcc.n	167aa <__divsi3+0xea>
   167a6:	008b      	lsls	r3, r1, #2
   167a8:	1ac0      	subs	r0, r0, r3
   167aa:	4152      	adcs	r2, r2
   167ac:	0843      	lsrs	r3, r0, #1
   167ae:	428b      	cmp	r3, r1
   167b0:	d301      	bcc.n	167b6 <__divsi3+0xf6>
   167b2:	004b      	lsls	r3, r1, #1
   167b4:	1ac0      	subs	r0, r0, r3
   167b6:	4152      	adcs	r2, r2
   167b8:	1a41      	subs	r1, r0, r1
   167ba:	d200      	bcs.n	167be <__divsi3+0xfe>
   167bc:	4601      	mov	r1, r0
   167be:	4152      	adcs	r2, r2
   167c0:	4610      	mov	r0, r2
   167c2:	4770      	bx	lr
   167c4:	e05d      	b.n	16882 <__divsi3+0x1c2>
   167c6:	0fca      	lsrs	r2, r1, #31
   167c8:	d000      	beq.n	167cc <__divsi3+0x10c>
   167ca:	4249      	negs	r1, r1
   167cc:	1003      	asrs	r3, r0, #32
   167ce:	d300      	bcc.n	167d2 <__divsi3+0x112>
   167d0:	4240      	negs	r0, r0
   167d2:	4053      	eors	r3, r2
   167d4:	2200      	movs	r2, #0
   167d6:	469c      	mov	ip, r3
   167d8:	0903      	lsrs	r3, r0, #4
   167da:	428b      	cmp	r3, r1
   167dc:	d32d      	bcc.n	1683a <__divsi3+0x17a>
   167de:	0a03      	lsrs	r3, r0, #8
   167e0:	428b      	cmp	r3, r1
   167e2:	d312      	bcc.n	1680a <__divsi3+0x14a>
   167e4:	22fc      	movs	r2, #252	; 0xfc
   167e6:	0189      	lsls	r1, r1, #6
   167e8:	ba12      	rev	r2, r2
   167ea:	0a03      	lsrs	r3, r0, #8
   167ec:	428b      	cmp	r3, r1
   167ee:	d30c      	bcc.n	1680a <__divsi3+0x14a>
   167f0:	0189      	lsls	r1, r1, #6
   167f2:	1192      	asrs	r2, r2, #6
   167f4:	428b      	cmp	r3, r1
   167f6:	d308      	bcc.n	1680a <__divsi3+0x14a>
   167f8:	0189      	lsls	r1, r1, #6
   167fa:	1192      	asrs	r2, r2, #6
   167fc:	428b      	cmp	r3, r1
   167fe:	d304      	bcc.n	1680a <__divsi3+0x14a>
   16800:	0189      	lsls	r1, r1, #6
   16802:	d03a      	beq.n	1687a <__divsi3+0x1ba>
   16804:	1192      	asrs	r2, r2, #6
   16806:	e000      	b.n	1680a <__divsi3+0x14a>
   16808:	0989      	lsrs	r1, r1, #6
   1680a:	09c3      	lsrs	r3, r0, #7
   1680c:	428b      	cmp	r3, r1
   1680e:	d301      	bcc.n	16814 <__divsi3+0x154>
   16810:	01cb      	lsls	r3, r1, #7
   16812:	1ac0      	subs	r0, r0, r3
   16814:	4152      	adcs	r2, r2
   16816:	0983      	lsrs	r3, r0, #6
   16818:	428b      	cmp	r3, r1
   1681a:	d301      	bcc.n	16820 <__divsi3+0x160>
   1681c:	018b      	lsls	r3, r1, #6
   1681e:	1ac0      	subs	r0, r0, r3
   16820:	4152      	adcs	r2, r2
   16822:	0943      	lsrs	r3, r0, #5
   16824:	428b      	cmp	r3, r1
   16826:	d301      	bcc.n	1682c <__divsi3+0x16c>
   16828:	014b      	lsls	r3, r1, #5
   1682a:	1ac0      	subs	r0, r0, r3
   1682c:	4152      	adcs	r2, r2
   1682e:	0903      	lsrs	r3, r0, #4
   16830:	428b      	cmp	r3, r1
   16832:	d301      	bcc.n	16838 <__divsi3+0x178>
   16834:	010b      	lsls	r3, r1, #4
   16836:	1ac0      	subs	r0, r0, r3
   16838:	4152      	adcs	r2, r2
   1683a:	08c3      	lsrs	r3, r0, #3
   1683c:	428b      	cmp	r3, r1
   1683e:	d301      	bcc.n	16844 <__divsi3+0x184>
   16840:	00cb      	lsls	r3, r1, #3
   16842:	1ac0      	subs	r0, r0, r3
   16844:	4152      	adcs	r2, r2
   16846:	0883      	lsrs	r3, r0, #2
   16848:	428b      	cmp	r3, r1
   1684a:	d301      	bcc.n	16850 <__divsi3+0x190>
   1684c:	008b      	lsls	r3, r1, #2
   1684e:	1ac0      	subs	r0, r0, r3
   16850:	4152      	adcs	r2, r2
   16852:	d2d9      	bcs.n	16808 <__divsi3+0x148>
   16854:	0843      	lsrs	r3, r0, #1
   16856:	428b      	cmp	r3, r1
   16858:	d301      	bcc.n	1685e <__divsi3+0x19e>
   1685a:	004b      	lsls	r3, r1, #1
   1685c:	1ac0      	subs	r0, r0, r3
   1685e:	4152      	adcs	r2, r2
   16860:	1a41      	subs	r1, r0, r1
   16862:	d200      	bcs.n	16866 <__divsi3+0x1a6>
   16864:	4601      	mov	r1, r0
   16866:	4663      	mov	r3, ip
   16868:	4152      	adcs	r2, r2
   1686a:	105b      	asrs	r3, r3, #1
   1686c:	4610      	mov	r0, r2
   1686e:	d301      	bcc.n	16874 <__divsi3+0x1b4>
   16870:	4240      	negs	r0, r0
   16872:	2b00      	cmp	r3, #0
   16874:	d500      	bpl.n	16878 <__divsi3+0x1b8>
   16876:	4249      	negs	r1, r1
   16878:	4770      	bx	lr
   1687a:	4663      	mov	r3, ip
   1687c:	105b      	asrs	r3, r3, #1
   1687e:	d300      	bcc.n	16882 <__divsi3+0x1c2>
   16880:	4240      	negs	r0, r0
   16882:	b501      	push	{r0, lr}
   16884:	2000      	movs	r0, #0
   16886:	f000 f805 	bl	16894 <__aeabi_idiv0>
   1688a:	bd02      	pop	{r1, pc}

0001688c <__aeabi_idivmod>:
   1688c:	2900      	cmp	r1, #0
   1688e:	d0f8      	beq.n	16882 <__divsi3+0x1c2>
   16890:	e716      	b.n	166c0 <__divsi3>
   16892:	4770      	bx	lr

00016894 <__aeabi_idiv0>:
   16894:	4770      	bx	lr
   16896:	46c0      	nop			; (mov r8, r8)

00016898 <__aeabi_cdrcmple>:
   16898:	4684      	mov	ip, r0
   1689a:	1c10      	adds	r0, r2, #0
   1689c:	4662      	mov	r2, ip
   1689e:	468c      	mov	ip, r1
   168a0:	1c19      	adds	r1, r3, #0
   168a2:	4663      	mov	r3, ip
   168a4:	e000      	b.n	168a8 <__aeabi_cdcmpeq>
   168a6:	46c0      	nop			; (mov r8, r8)

000168a8 <__aeabi_cdcmpeq>:
   168a8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   168aa:	f001 ffa3 	bl	187f4 <__ledf2>
   168ae:	2800      	cmp	r0, #0
   168b0:	d401      	bmi.n	168b6 <__aeabi_cdcmpeq+0xe>
   168b2:	2100      	movs	r1, #0
   168b4:	42c8      	cmn	r0, r1
   168b6:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

000168b8 <__aeabi_dcmpeq>:
   168b8:	b510      	push	{r4, lr}
   168ba:	f001 fefd 	bl	186b8 <__eqdf2>
   168be:	4240      	negs	r0, r0
   168c0:	3001      	adds	r0, #1
   168c2:	bd10      	pop	{r4, pc}

000168c4 <__aeabi_dcmplt>:
   168c4:	b510      	push	{r4, lr}
   168c6:	f001 ff95 	bl	187f4 <__ledf2>
   168ca:	2800      	cmp	r0, #0
   168cc:	db01      	blt.n	168d2 <__aeabi_dcmplt+0xe>
   168ce:	2000      	movs	r0, #0
   168d0:	bd10      	pop	{r4, pc}
   168d2:	2001      	movs	r0, #1
   168d4:	bd10      	pop	{r4, pc}
   168d6:	46c0      	nop			; (mov r8, r8)

000168d8 <__aeabi_dcmple>:
   168d8:	b510      	push	{r4, lr}
   168da:	f001 ff8b 	bl	187f4 <__ledf2>
   168de:	2800      	cmp	r0, #0
   168e0:	dd01      	ble.n	168e6 <__aeabi_dcmple+0xe>
   168e2:	2000      	movs	r0, #0
   168e4:	bd10      	pop	{r4, pc}
   168e6:	2001      	movs	r0, #1
   168e8:	bd10      	pop	{r4, pc}
   168ea:	46c0      	nop			; (mov r8, r8)

000168ec <__aeabi_dcmpgt>:
   168ec:	b510      	push	{r4, lr}
   168ee:	f001 ff1d 	bl	1872c <__gedf2>
   168f2:	2800      	cmp	r0, #0
   168f4:	dc01      	bgt.n	168fa <__aeabi_dcmpgt+0xe>
   168f6:	2000      	movs	r0, #0
   168f8:	bd10      	pop	{r4, pc}
   168fa:	2001      	movs	r0, #1
   168fc:	bd10      	pop	{r4, pc}
   168fe:	46c0      	nop			; (mov r8, r8)

00016900 <__aeabi_dcmpge>:
   16900:	b510      	push	{r4, lr}
   16902:	f001 ff13 	bl	1872c <__gedf2>
   16906:	2800      	cmp	r0, #0
   16908:	da01      	bge.n	1690e <__aeabi_dcmpge+0xe>
   1690a:	2000      	movs	r0, #0
   1690c:	bd10      	pop	{r4, pc}
   1690e:	2001      	movs	r0, #1
   16910:	bd10      	pop	{r4, pc}
   16912:	46c0      	nop			; (mov r8, r8)

00016914 <__aeabi_cfrcmple>:
   16914:	4684      	mov	ip, r0
   16916:	1c08      	adds	r0, r1, #0
   16918:	4661      	mov	r1, ip
   1691a:	e7ff      	b.n	1691c <__aeabi_cfcmpeq>

0001691c <__aeabi_cfcmpeq>:
   1691c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   1691e:	f000 fcd3 	bl	172c8 <__lesf2>
   16922:	2800      	cmp	r0, #0
   16924:	d401      	bmi.n	1692a <__aeabi_cfcmpeq+0xe>
   16926:	2100      	movs	r1, #0
   16928:	42c8      	cmn	r0, r1
   1692a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0001692c <__aeabi_fcmpeq>:
   1692c:	b510      	push	{r4, lr}
   1692e:	f000 fc65 	bl	171fc <__eqsf2>
   16932:	4240      	negs	r0, r0
   16934:	3001      	adds	r0, #1
   16936:	bd10      	pop	{r4, pc}

00016938 <__aeabi_fcmplt>:
   16938:	b510      	push	{r4, lr}
   1693a:	f000 fcc5 	bl	172c8 <__lesf2>
   1693e:	2800      	cmp	r0, #0
   16940:	db01      	blt.n	16946 <__aeabi_fcmplt+0xe>
   16942:	2000      	movs	r0, #0
   16944:	bd10      	pop	{r4, pc}
   16946:	2001      	movs	r0, #1
   16948:	bd10      	pop	{r4, pc}
   1694a:	46c0      	nop			; (mov r8, r8)

0001694c <__aeabi_fcmple>:
   1694c:	b510      	push	{r4, lr}
   1694e:	f000 fcbb 	bl	172c8 <__lesf2>
   16952:	2800      	cmp	r0, #0
   16954:	dd01      	ble.n	1695a <__aeabi_fcmple+0xe>
   16956:	2000      	movs	r0, #0
   16958:	bd10      	pop	{r4, pc}
   1695a:	2001      	movs	r0, #1
   1695c:	bd10      	pop	{r4, pc}
   1695e:	46c0      	nop			; (mov r8, r8)

00016960 <__aeabi_fcmpgt>:
   16960:	b510      	push	{r4, lr}
   16962:	f000 fc71 	bl	17248 <__gesf2>
   16966:	2800      	cmp	r0, #0
   16968:	dc01      	bgt.n	1696e <__aeabi_fcmpgt+0xe>
   1696a:	2000      	movs	r0, #0
   1696c:	bd10      	pop	{r4, pc}
   1696e:	2001      	movs	r0, #1
   16970:	bd10      	pop	{r4, pc}
   16972:	46c0      	nop			; (mov r8, r8)

00016974 <__aeabi_fcmpge>:
   16974:	b510      	push	{r4, lr}
   16976:	f000 fc67 	bl	17248 <__gesf2>
   1697a:	2800      	cmp	r0, #0
   1697c:	da01      	bge.n	16982 <__aeabi_fcmpge+0xe>
   1697e:	2000      	movs	r0, #0
   16980:	bd10      	pop	{r4, pc}
   16982:	2001      	movs	r0, #1
   16984:	bd10      	pop	{r4, pc}
   16986:	46c0      	nop			; (mov r8, r8)

00016988 <__aeabi_uldivmod>:
   16988:	2b00      	cmp	r3, #0
   1698a:	d111      	bne.n	169b0 <__aeabi_uldivmod+0x28>
   1698c:	2a00      	cmp	r2, #0
   1698e:	d10f      	bne.n	169b0 <__aeabi_uldivmod+0x28>
   16990:	2900      	cmp	r1, #0
   16992:	d100      	bne.n	16996 <__aeabi_uldivmod+0xe>
   16994:	2800      	cmp	r0, #0
   16996:	d002      	beq.n	1699e <__aeabi_uldivmod+0x16>
   16998:	2100      	movs	r1, #0
   1699a:	43c9      	mvns	r1, r1
   1699c:	1c08      	adds	r0, r1, #0
   1699e:	b407      	push	{r0, r1, r2}
   169a0:	4802      	ldr	r0, [pc, #8]	; (169ac <__aeabi_uldivmod+0x24>)
   169a2:	a102      	add	r1, pc, #8	; (adr r1, 169ac <__aeabi_uldivmod+0x24>)
   169a4:	1840      	adds	r0, r0, r1
   169a6:	9002      	str	r0, [sp, #8]
   169a8:	bd03      	pop	{r0, r1, pc}
   169aa:	46c0      	nop			; (mov r8, r8)
   169ac:	fffffee9 	.word	0xfffffee9
   169b0:	b403      	push	{r0, r1}
   169b2:	4668      	mov	r0, sp
   169b4:	b501      	push	{r0, lr}
   169b6:	9802      	ldr	r0, [sp, #8]
   169b8:	f000 f886 	bl	16ac8 <__udivmoddi4>
   169bc:	9b01      	ldr	r3, [sp, #4]
   169be:	469e      	mov	lr, r3
   169c0:	b002      	add	sp, #8
   169c2:	bc0c      	pop	{r2, r3}
   169c4:	4770      	bx	lr
   169c6:	46c0      	nop			; (mov r8, r8)

000169c8 <__aeabi_lmul>:
   169c8:	b5f0      	push	{r4, r5, r6, r7, lr}
   169ca:	46ce      	mov	lr, r9
   169cc:	4647      	mov	r7, r8
   169ce:	0415      	lsls	r5, r2, #16
   169d0:	0c2d      	lsrs	r5, r5, #16
   169d2:	002e      	movs	r6, r5
   169d4:	b580      	push	{r7, lr}
   169d6:	0407      	lsls	r7, r0, #16
   169d8:	0c14      	lsrs	r4, r2, #16
   169da:	0c3f      	lsrs	r7, r7, #16
   169dc:	4699      	mov	r9, r3
   169de:	0c03      	lsrs	r3, r0, #16
   169e0:	437e      	muls	r6, r7
   169e2:	435d      	muls	r5, r3
   169e4:	4367      	muls	r7, r4
   169e6:	4363      	muls	r3, r4
   169e8:	197f      	adds	r7, r7, r5
   169ea:	0c34      	lsrs	r4, r6, #16
   169ec:	19e4      	adds	r4, r4, r7
   169ee:	469c      	mov	ip, r3
   169f0:	42a5      	cmp	r5, r4
   169f2:	d903      	bls.n	169fc <__aeabi_lmul+0x34>
   169f4:	2380      	movs	r3, #128	; 0x80
   169f6:	025b      	lsls	r3, r3, #9
   169f8:	4698      	mov	r8, r3
   169fa:	44c4      	add	ip, r8
   169fc:	464b      	mov	r3, r9
   169fe:	4351      	muls	r1, r2
   16a00:	4343      	muls	r3, r0
   16a02:	0436      	lsls	r6, r6, #16
   16a04:	0c36      	lsrs	r6, r6, #16
   16a06:	0c25      	lsrs	r5, r4, #16
   16a08:	0424      	lsls	r4, r4, #16
   16a0a:	4465      	add	r5, ip
   16a0c:	19a4      	adds	r4, r4, r6
   16a0e:	1859      	adds	r1, r3, r1
   16a10:	1949      	adds	r1, r1, r5
   16a12:	0020      	movs	r0, r4
   16a14:	bc0c      	pop	{r2, r3}
   16a16:	4690      	mov	r8, r2
   16a18:	4699      	mov	r9, r3
   16a1a:	bdf0      	pop	{r4, r5, r6, r7, pc}

00016a1c <__aeabi_f2uiz>:
   16a1c:	219e      	movs	r1, #158	; 0x9e
   16a1e:	b510      	push	{r4, lr}
   16a20:	05c9      	lsls	r1, r1, #23
   16a22:	1c04      	adds	r4, r0, #0
   16a24:	f7ff ffa6 	bl	16974 <__aeabi_fcmpge>
   16a28:	2800      	cmp	r0, #0
   16a2a:	d103      	bne.n	16a34 <__aeabi_f2uiz+0x18>
   16a2c:	1c20      	adds	r0, r4, #0
   16a2e:	f000 ff49 	bl	178c4 <__aeabi_f2iz>
   16a32:	bd10      	pop	{r4, pc}
   16a34:	219e      	movs	r1, #158	; 0x9e
   16a36:	1c20      	adds	r0, r4, #0
   16a38:	05c9      	lsls	r1, r1, #23
   16a3a:	f000 fda7 	bl	1758c <__aeabi_fsub>
   16a3e:	f000 ff41 	bl	178c4 <__aeabi_f2iz>
   16a42:	2380      	movs	r3, #128	; 0x80
   16a44:	061b      	lsls	r3, r3, #24
   16a46:	469c      	mov	ip, r3
   16a48:	4460      	add	r0, ip
   16a4a:	e7f2      	b.n	16a32 <__aeabi_f2uiz+0x16>

00016a4c <__aeabi_d2uiz>:
   16a4c:	b570      	push	{r4, r5, r6, lr}
   16a4e:	2200      	movs	r2, #0
   16a50:	4b0c      	ldr	r3, [pc, #48]	; (16a84 <__aeabi_d2uiz+0x38>)
   16a52:	0004      	movs	r4, r0
   16a54:	000d      	movs	r5, r1
   16a56:	f7ff ff53 	bl	16900 <__aeabi_dcmpge>
   16a5a:	2800      	cmp	r0, #0
   16a5c:	d104      	bne.n	16a68 <__aeabi_d2uiz+0x1c>
   16a5e:	0020      	movs	r0, r4
   16a60:	0029      	movs	r1, r5
   16a62:	f002 fcbf 	bl	193e4 <__aeabi_d2iz>
   16a66:	bd70      	pop	{r4, r5, r6, pc}
   16a68:	4b06      	ldr	r3, [pc, #24]	; (16a84 <__aeabi_d2uiz+0x38>)
   16a6a:	2200      	movs	r2, #0
   16a6c:	0020      	movs	r0, r4
   16a6e:	0029      	movs	r1, r5
   16a70:	f002 f9a2 	bl	18db8 <__aeabi_dsub>
   16a74:	f002 fcb6 	bl	193e4 <__aeabi_d2iz>
   16a78:	2380      	movs	r3, #128	; 0x80
   16a7a:	061b      	lsls	r3, r3, #24
   16a7c:	469c      	mov	ip, r3
   16a7e:	4460      	add	r0, ip
   16a80:	e7f1      	b.n	16a66 <__aeabi_d2uiz+0x1a>
   16a82:	46c0      	nop			; (mov r8, r8)
   16a84:	41e00000 	.word	0x41e00000

00016a88 <__aeabi_f2ulz>:
   16a88:	b570      	push	{r4, r5, r6, lr}
   16a8a:	f002 fd59 	bl	19540 <__aeabi_f2d>
   16a8e:	2200      	movs	r2, #0
   16a90:	4b0b      	ldr	r3, [pc, #44]	; (16ac0 <__aeabi_f2ulz+0x38>)
   16a92:	000d      	movs	r5, r1
   16a94:	0004      	movs	r4, r0
   16a96:	f001 ff0f 	bl	188b8 <__aeabi_dmul>
   16a9a:	f7ff ffd7 	bl	16a4c <__aeabi_d2uiz>
   16a9e:	0006      	movs	r6, r0
   16aa0:	f002 fd16 	bl	194d0 <__aeabi_ui2d>
   16aa4:	2200      	movs	r2, #0
   16aa6:	4b07      	ldr	r3, [pc, #28]	; (16ac4 <__aeabi_f2ulz+0x3c>)
   16aa8:	f001 ff06 	bl	188b8 <__aeabi_dmul>
   16aac:	0002      	movs	r2, r0
   16aae:	000b      	movs	r3, r1
   16ab0:	0020      	movs	r0, r4
   16ab2:	0029      	movs	r1, r5
   16ab4:	f002 f980 	bl	18db8 <__aeabi_dsub>
   16ab8:	f7ff ffc8 	bl	16a4c <__aeabi_d2uiz>
   16abc:	0031      	movs	r1, r6
   16abe:	bd70      	pop	{r4, r5, r6, pc}
   16ac0:	3df00000 	.word	0x3df00000
   16ac4:	41f00000 	.word	0x41f00000

00016ac8 <__udivmoddi4>:
   16ac8:	b5f0      	push	{r4, r5, r6, r7, lr}
   16aca:	4657      	mov	r7, sl
   16acc:	464e      	mov	r6, r9
   16ace:	4645      	mov	r5, r8
   16ad0:	46de      	mov	lr, fp
   16ad2:	b5e0      	push	{r5, r6, r7, lr}
   16ad4:	0004      	movs	r4, r0
   16ad6:	b083      	sub	sp, #12
   16ad8:	000d      	movs	r5, r1
   16ada:	4692      	mov	sl, r2
   16adc:	4699      	mov	r9, r3
   16ade:	428b      	cmp	r3, r1
   16ae0:	d82f      	bhi.n	16b42 <__udivmoddi4+0x7a>
   16ae2:	d02c      	beq.n	16b3e <__udivmoddi4+0x76>
   16ae4:	4649      	mov	r1, r9
   16ae6:	4650      	mov	r0, sl
   16ae8:	f002 fd9a 	bl	19620 <__clzdi2>
   16aec:	0029      	movs	r1, r5
   16aee:	0006      	movs	r6, r0
   16af0:	0020      	movs	r0, r4
   16af2:	f002 fd95 	bl	19620 <__clzdi2>
   16af6:	1a33      	subs	r3, r6, r0
   16af8:	4698      	mov	r8, r3
   16afa:	3b20      	subs	r3, #32
   16afc:	469b      	mov	fp, r3
   16afe:	d500      	bpl.n	16b02 <__udivmoddi4+0x3a>
   16b00:	e074      	b.n	16bec <__udivmoddi4+0x124>
   16b02:	4653      	mov	r3, sl
   16b04:	465a      	mov	r2, fp
   16b06:	4093      	lsls	r3, r2
   16b08:	001f      	movs	r7, r3
   16b0a:	4653      	mov	r3, sl
   16b0c:	4642      	mov	r2, r8
   16b0e:	4093      	lsls	r3, r2
   16b10:	001e      	movs	r6, r3
   16b12:	42af      	cmp	r7, r5
   16b14:	d829      	bhi.n	16b6a <__udivmoddi4+0xa2>
   16b16:	d026      	beq.n	16b66 <__udivmoddi4+0x9e>
   16b18:	465b      	mov	r3, fp
   16b1a:	1ba4      	subs	r4, r4, r6
   16b1c:	41bd      	sbcs	r5, r7
   16b1e:	2b00      	cmp	r3, #0
   16b20:	da00      	bge.n	16b24 <__udivmoddi4+0x5c>
   16b22:	e079      	b.n	16c18 <__udivmoddi4+0x150>
   16b24:	2200      	movs	r2, #0
   16b26:	2300      	movs	r3, #0
   16b28:	9200      	str	r2, [sp, #0]
   16b2a:	9301      	str	r3, [sp, #4]
   16b2c:	2301      	movs	r3, #1
   16b2e:	465a      	mov	r2, fp
   16b30:	4093      	lsls	r3, r2
   16b32:	9301      	str	r3, [sp, #4]
   16b34:	2301      	movs	r3, #1
   16b36:	4642      	mov	r2, r8
   16b38:	4093      	lsls	r3, r2
   16b3a:	9300      	str	r3, [sp, #0]
   16b3c:	e019      	b.n	16b72 <__udivmoddi4+0xaa>
   16b3e:	4282      	cmp	r2, r0
   16b40:	d9d0      	bls.n	16ae4 <__udivmoddi4+0x1c>
   16b42:	2200      	movs	r2, #0
   16b44:	2300      	movs	r3, #0
   16b46:	9200      	str	r2, [sp, #0]
   16b48:	9301      	str	r3, [sp, #4]
   16b4a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   16b4c:	2b00      	cmp	r3, #0
   16b4e:	d001      	beq.n	16b54 <__udivmoddi4+0x8c>
   16b50:	601c      	str	r4, [r3, #0]
   16b52:	605d      	str	r5, [r3, #4]
   16b54:	9800      	ldr	r0, [sp, #0]
   16b56:	9901      	ldr	r1, [sp, #4]
   16b58:	b003      	add	sp, #12
   16b5a:	bc3c      	pop	{r2, r3, r4, r5}
   16b5c:	4690      	mov	r8, r2
   16b5e:	4699      	mov	r9, r3
   16b60:	46a2      	mov	sl, r4
   16b62:	46ab      	mov	fp, r5
   16b64:	bdf0      	pop	{r4, r5, r6, r7, pc}
   16b66:	42a3      	cmp	r3, r4
   16b68:	d9d6      	bls.n	16b18 <__udivmoddi4+0x50>
   16b6a:	2200      	movs	r2, #0
   16b6c:	2300      	movs	r3, #0
   16b6e:	9200      	str	r2, [sp, #0]
   16b70:	9301      	str	r3, [sp, #4]
   16b72:	4643      	mov	r3, r8
   16b74:	2b00      	cmp	r3, #0
   16b76:	d0e8      	beq.n	16b4a <__udivmoddi4+0x82>
   16b78:	07fb      	lsls	r3, r7, #31
   16b7a:	0872      	lsrs	r2, r6, #1
   16b7c:	431a      	orrs	r2, r3
   16b7e:	4646      	mov	r6, r8
   16b80:	087b      	lsrs	r3, r7, #1
   16b82:	e00e      	b.n	16ba2 <__udivmoddi4+0xda>
   16b84:	42ab      	cmp	r3, r5
   16b86:	d101      	bne.n	16b8c <__udivmoddi4+0xc4>
   16b88:	42a2      	cmp	r2, r4
   16b8a:	d80c      	bhi.n	16ba6 <__udivmoddi4+0xde>
   16b8c:	1aa4      	subs	r4, r4, r2
   16b8e:	419d      	sbcs	r5, r3
   16b90:	2001      	movs	r0, #1
   16b92:	1924      	adds	r4, r4, r4
   16b94:	416d      	adcs	r5, r5
   16b96:	2100      	movs	r1, #0
   16b98:	3e01      	subs	r6, #1
   16b9a:	1824      	adds	r4, r4, r0
   16b9c:	414d      	adcs	r5, r1
   16b9e:	2e00      	cmp	r6, #0
   16ba0:	d006      	beq.n	16bb0 <__udivmoddi4+0xe8>
   16ba2:	42ab      	cmp	r3, r5
   16ba4:	d9ee      	bls.n	16b84 <__udivmoddi4+0xbc>
   16ba6:	3e01      	subs	r6, #1
   16ba8:	1924      	adds	r4, r4, r4
   16baa:	416d      	adcs	r5, r5
   16bac:	2e00      	cmp	r6, #0
   16bae:	d1f8      	bne.n	16ba2 <__udivmoddi4+0xda>
   16bb0:	465b      	mov	r3, fp
   16bb2:	9800      	ldr	r0, [sp, #0]
   16bb4:	9901      	ldr	r1, [sp, #4]
   16bb6:	1900      	adds	r0, r0, r4
   16bb8:	4169      	adcs	r1, r5
   16bba:	2b00      	cmp	r3, #0
   16bbc:	db22      	blt.n	16c04 <__udivmoddi4+0x13c>
   16bbe:	002b      	movs	r3, r5
   16bc0:	465a      	mov	r2, fp
   16bc2:	40d3      	lsrs	r3, r2
   16bc4:	002a      	movs	r2, r5
   16bc6:	4644      	mov	r4, r8
   16bc8:	40e2      	lsrs	r2, r4
   16bca:	001c      	movs	r4, r3
   16bcc:	465b      	mov	r3, fp
   16bce:	0015      	movs	r5, r2
   16bd0:	2b00      	cmp	r3, #0
   16bd2:	db2c      	blt.n	16c2e <__udivmoddi4+0x166>
   16bd4:	0026      	movs	r6, r4
   16bd6:	409e      	lsls	r6, r3
   16bd8:	0033      	movs	r3, r6
   16bda:	0026      	movs	r6, r4
   16bdc:	4647      	mov	r7, r8
   16bde:	40be      	lsls	r6, r7
   16be0:	0032      	movs	r2, r6
   16be2:	1a80      	subs	r0, r0, r2
   16be4:	4199      	sbcs	r1, r3
   16be6:	9000      	str	r0, [sp, #0]
   16be8:	9101      	str	r1, [sp, #4]
   16bea:	e7ae      	b.n	16b4a <__udivmoddi4+0x82>
   16bec:	4642      	mov	r2, r8
   16bee:	2320      	movs	r3, #32
   16bf0:	1a9b      	subs	r3, r3, r2
   16bf2:	4652      	mov	r2, sl
   16bf4:	40da      	lsrs	r2, r3
   16bf6:	4641      	mov	r1, r8
   16bf8:	0013      	movs	r3, r2
   16bfa:	464a      	mov	r2, r9
   16bfc:	408a      	lsls	r2, r1
   16bfe:	0017      	movs	r7, r2
   16c00:	431f      	orrs	r7, r3
   16c02:	e782      	b.n	16b0a <__udivmoddi4+0x42>
   16c04:	4642      	mov	r2, r8
   16c06:	2320      	movs	r3, #32
   16c08:	1a9b      	subs	r3, r3, r2
   16c0a:	002a      	movs	r2, r5
   16c0c:	4646      	mov	r6, r8
   16c0e:	409a      	lsls	r2, r3
   16c10:	0023      	movs	r3, r4
   16c12:	40f3      	lsrs	r3, r6
   16c14:	4313      	orrs	r3, r2
   16c16:	e7d5      	b.n	16bc4 <__udivmoddi4+0xfc>
   16c18:	4642      	mov	r2, r8
   16c1a:	2320      	movs	r3, #32
   16c1c:	2100      	movs	r1, #0
   16c1e:	1a9b      	subs	r3, r3, r2
   16c20:	2200      	movs	r2, #0
   16c22:	9100      	str	r1, [sp, #0]
   16c24:	9201      	str	r2, [sp, #4]
   16c26:	2201      	movs	r2, #1
   16c28:	40da      	lsrs	r2, r3
   16c2a:	9201      	str	r2, [sp, #4]
   16c2c:	e782      	b.n	16b34 <__udivmoddi4+0x6c>
   16c2e:	4642      	mov	r2, r8
   16c30:	2320      	movs	r3, #32
   16c32:	0026      	movs	r6, r4
   16c34:	1a9b      	subs	r3, r3, r2
   16c36:	40de      	lsrs	r6, r3
   16c38:	002f      	movs	r7, r5
   16c3a:	46b4      	mov	ip, r6
   16c3c:	4097      	lsls	r7, r2
   16c3e:	4666      	mov	r6, ip
   16c40:	003b      	movs	r3, r7
   16c42:	4333      	orrs	r3, r6
   16c44:	e7c9      	b.n	16bda <__udivmoddi4+0x112>
   16c46:	46c0      	nop			; (mov r8, r8)

00016c48 <__aeabi_fadd>:
   16c48:	b5f0      	push	{r4, r5, r6, r7, lr}
   16c4a:	46c6      	mov	lr, r8
   16c4c:	024e      	lsls	r6, r1, #9
   16c4e:	0247      	lsls	r7, r0, #9
   16c50:	0a76      	lsrs	r6, r6, #9
   16c52:	0a7b      	lsrs	r3, r7, #9
   16c54:	0044      	lsls	r4, r0, #1
   16c56:	0fc5      	lsrs	r5, r0, #31
   16c58:	00f7      	lsls	r7, r6, #3
   16c5a:	0048      	lsls	r0, r1, #1
   16c5c:	4698      	mov	r8, r3
   16c5e:	b500      	push	{lr}
   16c60:	0e24      	lsrs	r4, r4, #24
   16c62:	002a      	movs	r2, r5
   16c64:	00db      	lsls	r3, r3, #3
   16c66:	0e00      	lsrs	r0, r0, #24
   16c68:	0fc9      	lsrs	r1, r1, #31
   16c6a:	46bc      	mov	ip, r7
   16c6c:	428d      	cmp	r5, r1
   16c6e:	d067      	beq.n	16d40 <__aeabi_fadd+0xf8>
   16c70:	1a22      	subs	r2, r4, r0
   16c72:	2a00      	cmp	r2, #0
   16c74:	dc00      	bgt.n	16c78 <__aeabi_fadd+0x30>
   16c76:	e0a5      	b.n	16dc4 <__aeabi_fadd+0x17c>
   16c78:	2800      	cmp	r0, #0
   16c7a:	d13a      	bne.n	16cf2 <__aeabi_fadd+0xaa>
   16c7c:	2f00      	cmp	r7, #0
   16c7e:	d100      	bne.n	16c82 <__aeabi_fadd+0x3a>
   16c80:	e093      	b.n	16daa <__aeabi_fadd+0x162>
   16c82:	1e51      	subs	r1, r2, #1
   16c84:	2900      	cmp	r1, #0
   16c86:	d000      	beq.n	16c8a <__aeabi_fadd+0x42>
   16c88:	e0bc      	b.n	16e04 <__aeabi_fadd+0x1bc>
   16c8a:	2401      	movs	r4, #1
   16c8c:	1bdb      	subs	r3, r3, r7
   16c8e:	015a      	lsls	r2, r3, #5
   16c90:	d546      	bpl.n	16d20 <__aeabi_fadd+0xd8>
   16c92:	019b      	lsls	r3, r3, #6
   16c94:	099e      	lsrs	r6, r3, #6
   16c96:	0030      	movs	r0, r6
   16c98:	f002 fca4 	bl	195e4 <__clzsi2>
   16c9c:	3805      	subs	r0, #5
   16c9e:	4086      	lsls	r6, r0
   16ca0:	4284      	cmp	r4, r0
   16ca2:	dd00      	ble.n	16ca6 <__aeabi_fadd+0x5e>
   16ca4:	e09d      	b.n	16de2 <__aeabi_fadd+0x19a>
   16ca6:	1b04      	subs	r4, r0, r4
   16ca8:	0032      	movs	r2, r6
   16caa:	2020      	movs	r0, #32
   16cac:	3401      	adds	r4, #1
   16cae:	40e2      	lsrs	r2, r4
   16cb0:	1b04      	subs	r4, r0, r4
   16cb2:	40a6      	lsls	r6, r4
   16cb4:	0033      	movs	r3, r6
   16cb6:	1e5e      	subs	r6, r3, #1
   16cb8:	41b3      	sbcs	r3, r6
   16cba:	2400      	movs	r4, #0
   16cbc:	4313      	orrs	r3, r2
   16cbe:	075a      	lsls	r2, r3, #29
   16cc0:	d004      	beq.n	16ccc <__aeabi_fadd+0x84>
   16cc2:	220f      	movs	r2, #15
   16cc4:	401a      	ands	r2, r3
   16cc6:	2a04      	cmp	r2, #4
   16cc8:	d000      	beq.n	16ccc <__aeabi_fadd+0x84>
   16cca:	3304      	adds	r3, #4
   16ccc:	015a      	lsls	r2, r3, #5
   16cce:	d529      	bpl.n	16d24 <__aeabi_fadd+0xdc>
   16cd0:	3401      	adds	r4, #1
   16cd2:	2cff      	cmp	r4, #255	; 0xff
   16cd4:	d100      	bne.n	16cd8 <__aeabi_fadd+0x90>
   16cd6:	e081      	b.n	16ddc <__aeabi_fadd+0x194>
   16cd8:	002a      	movs	r2, r5
   16cda:	019b      	lsls	r3, r3, #6
   16cdc:	0a5b      	lsrs	r3, r3, #9
   16cde:	b2e4      	uxtb	r4, r4
   16ce0:	025b      	lsls	r3, r3, #9
   16ce2:	05e4      	lsls	r4, r4, #23
   16ce4:	0a58      	lsrs	r0, r3, #9
   16ce6:	07d2      	lsls	r2, r2, #31
   16ce8:	4320      	orrs	r0, r4
   16cea:	4310      	orrs	r0, r2
   16cec:	bc04      	pop	{r2}
   16cee:	4690      	mov	r8, r2
   16cf0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   16cf2:	2cff      	cmp	r4, #255	; 0xff
   16cf4:	d0e3      	beq.n	16cbe <__aeabi_fadd+0x76>
   16cf6:	2180      	movs	r1, #128	; 0x80
   16cf8:	0038      	movs	r0, r7
   16cfa:	04c9      	lsls	r1, r1, #19
   16cfc:	4308      	orrs	r0, r1
   16cfe:	4684      	mov	ip, r0
   16d00:	2a1b      	cmp	r2, #27
   16d02:	dd00      	ble.n	16d06 <__aeabi_fadd+0xbe>
   16d04:	e082      	b.n	16e0c <__aeabi_fadd+0x1c4>
   16d06:	2020      	movs	r0, #32
   16d08:	4661      	mov	r1, ip
   16d0a:	40d1      	lsrs	r1, r2
   16d0c:	1a82      	subs	r2, r0, r2
   16d0e:	4660      	mov	r0, ip
   16d10:	4090      	lsls	r0, r2
   16d12:	0002      	movs	r2, r0
   16d14:	1e50      	subs	r0, r2, #1
   16d16:	4182      	sbcs	r2, r0
   16d18:	430a      	orrs	r2, r1
   16d1a:	1a9b      	subs	r3, r3, r2
   16d1c:	015a      	lsls	r2, r3, #5
   16d1e:	d4b8      	bmi.n	16c92 <__aeabi_fadd+0x4a>
   16d20:	075a      	lsls	r2, r3, #29
   16d22:	d1ce      	bne.n	16cc2 <__aeabi_fadd+0x7a>
   16d24:	08de      	lsrs	r6, r3, #3
   16d26:	002a      	movs	r2, r5
   16d28:	2cff      	cmp	r4, #255	; 0xff
   16d2a:	d13a      	bne.n	16da2 <__aeabi_fadd+0x15a>
   16d2c:	2e00      	cmp	r6, #0
   16d2e:	d100      	bne.n	16d32 <__aeabi_fadd+0xea>
   16d30:	e0ae      	b.n	16e90 <__aeabi_fadd+0x248>
   16d32:	2380      	movs	r3, #128	; 0x80
   16d34:	03db      	lsls	r3, r3, #15
   16d36:	4333      	orrs	r3, r6
   16d38:	025b      	lsls	r3, r3, #9
   16d3a:	0a5b      	lsrs	r3, r3, #9
   16d3c:	24ff      	movs	r4, #255	; 0xff
   16d3e:	e7cf      	b.n	16ce0 <__aeabi_fadd+0x98>
   16d40:	1a21      	subs	r1, r4, r0
   16d42:	2900      	cmp	r1, #0
   16d44:	dd52      	ble.n	16dec <__aeabi_fadd+0x1a4>
   16d46:	2800      	cmp	r0, #0
   16d48:	d031      	beq.n	16dae <__aeabi_fadd+0x166>
   16d4a:	2cff      	cmp	r4, #255	; 0xff
   16d4c:	d0b7      	beq.n	16cbe <__aeabi_fadd+0x76>
   16d4e:	2080      	movs	r0, #128	; 0x80
   16d50:	003e      	movs	r6, r7
   16d52:	04c0      	lsls	r0, r0, #19
   16d54:	4306      	orrs	r6, r0
   16d56:	46b4      	mov	ip, r6
   16d58:	291b      	cmp	r1, #27
   16d5a:	dd00      	ble.n	16d5e <__aeabi_fadd+0x116>
   16d5c:	e0aa      	b.n	16eb4 <__aeabi_fadd+0x26c>
   16d5e:	2620      	movs	r6, #32
   16d60:	4660      	mov	r0, ip
   16d62:	40c8      	lsrs	r0, r1
   16d64:	1a71      	subs	r1, r6, r1
   16d66:	4666      	mov	r6, ip
   16d68:	408e      	lsls	r6, r1
   16d6a:	0031      	movs	r1, r6
   16d6c:	1e4e      	subs	r6, r1, #1
   16d6e:	41b1      	sbcs	r1, r6
   16d70:	4301      	orrs	r1, r0
   16d72:	185b      	adds	r3, r3, r1
   16d74:	0159      	lsls	r1, r3, #5
   16d76:	d5d3      	bpl.n	16d20 <__aeabi_fadd+0xd8>
   16d78:	3401      	adds	r4, #1
   16d7a:	2cff      	cmp	r4, #255	; 0xff
   16d7c:	d100      	bne.n	16d80 <__aeabi_fadd+0x138>
   16d7e:	e087      	b.n	16e90 <__aeabi_fadd+0x248>
   16d80:	2201      	movs	r2, #1
   16d82:	4978      	ldr	r1, [pc, #480]	; (16f64 <__aeabi_fadd+0x31c>)
   16d84:	401a      	ands	r2, r3
   16d86:	085b      	lsrs	r3, r3, #1
   16d88:	400b      	ands	r3, r1
   16d8a:	4313      	orrs	r3, r2
   16d8c:	e797      	b.n	16cbe <__aeabi_fadd+0x76>
   16d8e:	2c00      	cmp	r4, #0
   16d90:	d000      	beq.n	16d94 <__aeabi_fadd+0x14c>
   16d92:	e0a7      	b.n	16ee4 <__aeabi_fadd+0x29c>
   16d94:	2b00      	cmp	r3, #0
   16d96:	d000      	beq.n	16d9a <__aeabi_fadd+0x152>
   16d98:	e0b6      	b.n	16f08 <__aeabi_fadd+0x2c0>
   16d9a:	1e3b      	subs	r3, r7, #0
   16d9c:	d162      	bne.n	16e64 <__aeabi_fadd+0x21c>
   16d9e:	2600      	movs	r6, #0
   16da0:	2200      	movs	r2, #0
   16da2:	0273      	lsls	r3, r6, #9
   16da4:	0a5b      	lsrs	r3, r3, #9
   16da6:	b2e4      	uxtb	r4, r4
   16da8:	e79a      	b.n	16ce0 <__aeabi_fadd+0x98>
   16daa:	0014      	movs	r4, r2
   16dac:	e787      	b.n	16cbe <__aeabi_fadd+0x76>
   16dae:	2f00      	cmp	r7, #0
   16db0:	d04d      	beq.n	16e4e <__aeabi_fadd+0x206>
   16db2:	1e48      	subs	r0, r1, #1
   16db4:	2800      	cmp	r0, #0
   16db6:	d157      	bne.n	16e68 <__aeabi_fadd+0x220>
   16db8:	4463      	add	r3, ip
   16dba:	2401      	movs	r4, #1
   16dbc:	015a      	lsls	r2, r3, #5
   16dbe:	d5af      	bpl.n	16d20 <__aeabi_fadd+0xd8>
   16dc0:	2402      	movs	r4, #2
   16dc2:	e7dd      	b.n	16d80 <__aeabi_fadd+0x138>
   16dc4:	2a00      	cmp	r2, #0
   16dc6:	d124      	bne.n	16e12 <__aeabi_fadd+0x1ca>
   16dc8:	1c62      	adds	r2, r4, #1
   16dca:	b2d2      	uxtb	r2, r2
   16dcc:	2a01      	cmp	r2, #1
   16dce:	ddde      	ble.n	16d8e <__aeabi_fadd+0x146>
   16dd0:	1bde      	subs	r6, r3, r7
   16dd2:	0172      	lsls	r2, r6, #5
   16dd4:	d535      	bpl.n	16e42 <__aeabi_fadd+0x1fa>
   16dd6:	1afe      	subs	r6, r7, r3
   16dd8:	000d      	movs	r5, r1
   16dda:	e75c      	b.n	16c96 <__aeabi_fadd+0x4e>
   16ddc:	002a      	movs	r2, r5
   16dde:	2300      	movs	r3, #0
   16de0:	e77e      	b.n	16ce0 <__aeabi_fadd+0x98>
   16de2:	0033      	movs	r3, r6
   16de4:	4a60      	ldr	r2, [pc, #384]	; (16f68 <__aeabi_fadd+0x320>)
   16de6:	1a24      	subs	r4, r4, r0
   16de8:	4013      	ands	r3, r2
   16dea:	e768      	b.n	16cbe <__aeabi_fadd+0x76>
   16dec:	2900      	cmp	r1, #0
   16dee:	d163      	bne.n	16eb8 <__aeabi_fadd+0x270>
   16df0:	1c61      	adds	r1, r4, #1
   16df2:	b2c8      	uxtb	r0, r1
   16df4:	2801      	cmp	r0, #1
   16df6:	dd4e      	ble.n	16e96 <__aeabi_fadd+0x24e>
   16df8:	29ff      	cmp	r1, #255	; 0xff
   16dfa:	d049      	beq.n	16e90 <__aeabi_fadd+0x248>
   16dfc:	4463      	add	r3, ip
   16dfe:	085b      	lsrs	r3, r3, #1
   16e00:	000c      	movs	r4, r1
   16e02:	e75c      	b.n	16cbe <__aeabi_fadd+0x76>
   16e04:	2aff      	cmp	r2, #255	; 0xff
   16e06:	d041      	beq.n	16e8c <__aeabi_fadd+0x244>
   16e08:	000a      	movs	r2, r1
   16e0a:	e779      	b.n	16d00 <__aeabi_fadd+0xb8>
   16e0c:	2201      	movs	r2, #1
   16e0e:	1a9b      	subs	r3, r3, r2
   16e10:	e784      	b.n	16d1c <__aeabi_fadd+0xd4>
   16e12:	2c00      	cmp	r4, #0
   16e14:	d01d      	beq.n	16e52 <__aeabi_fadd+0x20a>
   16e16:	28ff      	cmp	r0, #255	; 0xff
   16e18:	d022      	beq.n	16e60 <__aeabi_fadd+0x218>
   16e1a:	2480      	movs	r4, #128	; 0x80
   16e1c:	04e4      	lsls	r4, r4, #19
   16e1e:	4252      	negs	r2, r2
   16e20:	4323      	orrs	r3, r4
   16e22:	2a1b      	cmp	r2, #27
   16e24:	dd00      	ble.n	16e28 <__aeabi_fadd+0x1e0>
   16e26:	e08a      	b.n	16f3e <__aeabi_fadd+0x2f6>
   16e28:	001c      	movs	r4, r3
   16e2a:	2520      	movs	r5, #32
   16e2c:	40d4      	lsrs	r4, r2
   16e2e:	1aaa      	subs	r2, r5, r2
   16e30:	4093      	lsls	r3, r2
   16e32:	1e5a      	subs	r2, r3, #1
   16e34:	4193      	sbcs	r3, r2
   16e36:	4323      	orrs	r3, r4
   16e38:	4662      	mov	r2, ip
   16e3a:	0004      	movs	r4, r0
   16e3c:	1ad3      	subs	r3, r2, r3
   16e3e:	000d      	movs	r5, r1
   16e40:	e725      	b.n	16c8e <__aeabi_fadd+0x46>
   16e42:	2e00      	cmp	r6, #0
   16e44:	d000      	beq.n	16e48 <__aeabi_fadd+0x200>
   16e46:	e726      	b.n	16c96 <__aeabi_fadd+0x4e>
   16e48:	2200      	movs	r2, #0
   16e4a:	2400      	movs	r4, #0
   16e4c:	e7a9      	b.n	16da2 <__aeabi_fadd+0x15a>
   16e4e:	000c      	movs	r4, r1
   16e50:	e735      	b.n	16cbe <__aeabi_fadd+0x76>
   16e52:	2b00      	cmp	r3, #0
   16e54:	d04d      	beq.n	16ef2 <__aeabi_fadd+0x2aa>
   16e56:	43d2      	mvns	r2, r2
   16e58:	2a00      	cmp	r2, #0
   16e5a:	d0ed      	beq.n	16e38 <__aeabi_fadd+0x1f0>
   16e5c:	28ff      	cmp	r0, #255	; 0xff
   16e5e:	d1e0      	bne.n	16e22 <__aeabi_fadd+0x1da>
   16e60:	4663      	mov	r3, ip
   16e62:	24ff      	movs	r4, #255	; 0xff
   16e64:	000d      	movs	r5, r1
   16e66:	e72a      	b.n	16cbe <__aeabi_fadd+0x76>
   16e68:	29ff      	cmp	r1, #255	; 0xff
   16e6a:	d00f      	beq.n	16e8c <__aeabi_fadd+0x244>
   16e6c:	0001      	movs	r1, r0
   16e6e:	e773      	b.n	16d58 <__aeabi_fadd+0x110>
   16e70:	2b00      	cmp	r3, #0
   16e72:	d061      	beq.n	16f38 <__aeabi_fadd+0x2f0>
   16e74:	24ff      	movs	r4, #255	; 0xff
   16e76:	2f00      	cmp	r7, #0
   16e78:	d100      	bne.n	16e7c <__aeabi_fadd+0x234>
   16e7a:	e720      	b.n	16cbe <__aeabi_fadd+0x76>
   16e7c:	2280      	movs	r2, #128	; 0x80
   16e7e:	4641      	mov	r1, r8
   16e80:	03d2      	lsls	r2, r2, #15
   16e82:	4211      	tst	r1, r2
   16e84:	d002      	beq.n	16e8c <__aeabi_fadd+0x244>
   16e86:	4216      	tst	r6, r2
   16e88:	d100      	bne.n	16e8c <__aeabi_fadd+0x244>
   16e8a:	003b      	movs	r3, r7
   16e8c:	24ff      	movs	r4, #255	; 0xff
   16e8e:	e716      	b.n	16cbe <__aeabi_fadd+0x76>
   16e90:	24ff      	movs	r4, #255	; 0xff
   16e92:	2300      	movs	r3, #0
   16e94:	e724      	b.n	16ce0 <__aeabi_fadd+0x98>
   16e96:	2c00      	cmp	r4, #0
   16e98:	d1ea      	bne.n	16e70 <__aeabi_fadd+0x228>
   16e9a:	2b00      	cmp	r3, #0
   16e9c:	d058      	beq.n	16f50 <__aeabi_fadd+0x308>
   16e9e:	2f00      	cmp	r7, #0
   16ea0:	d100      	bne.n	16ea4 <__aeabi_fadd+0x25c>
   16ea2:	e70c      	b.n	16cbe <__aeabi_fadd+0x76>
   16ea4:	4463      	add	r3, ip
   16ea6:	015a      	lsls	r2, r3, #5
   16ea8:	d400      	bmi.n	16eac <__aeabi_fadd+0x264>
   16eaa:	e739      	b.n	16d20 <__aeabi_fadd+0xd8>
   16eac:	4a2e      	ldr	r2, [pc, #184]	; (16f68 <__aeabi_fadd+0x320>)
   16eae:	000c      	movs	r4, r1
   16eb0:	4013      	ands	r3, r2
   16eb2:	e704      	b.n	16cbe <__aeabi_fadd+0x76>
   16eb4:	2101      	movs	r1, #1
   16eb6:	e75c      	b.n	16d72 <__aeabi_fadd+0x12a>
   16eb8:	2c00      	cmp	r4, #0
   16eba:	d11e      	bne.n	16efa <__aeabi_fadd+0x2b2>
   16ebc:	2b00      	cmp	r3, #0
   16ebe:	d040      	beq.n	16f42 <__aeabi_fadd+0x2fa>
   16ec0:	43c9      	mvns	r1, r1
   16ec2:	2900      	cmp	r1, #0
   16ec4:	d00b      	beq.n	16ede <__aeabi_fadd+0x296>
   16ec6:	28ff      	cmp	r0, #255	; 0xff
   16ec8:	d036      	beq.n	16f38 <__aeabi_fadd+0x2f0>
   16eca:	291b      	cmp	r1, #27
   16ecc:	dc47      	bgt.n	16f5e <__aeabi_fadd+0x316>
   16ece:	001c      	movs	r4, r3
   16ed0:	2620      	movs	r6, #32
   16ed2:	40cc      	lsrs	r4, r1
   16ed4:	1a71      	subs	r1, r6, r1
   16ed6:	408b      	lsls	r3, r1
   16ed8:	1e59      	subs	r1, r3, #1
   16eda:	418b      	sbcs	r3, r1
   16edc:	4323      	orrs	r3, r4
   16ede:	4463      	add	r3, ip
   16ee0:	0004      	movs	r4, r0
   16ee2:	e747      	b.n	16d74 <__aeabi_fadd+0x12c>
   16ee4:	2b00      	cmp	r3, #0
   16ee6:	d118      	bne.n	16f1a <__aeabi_fadd+0x2d2>
   16ee8:	1e3b      	subs	r3, r7, #0
   16eea:	d02d      	beq.n	16f48 <__aeabi_fadd+0x300>
   16eec:	000d      	movs	r5, r1
   16eee:	24ff      	movs	r4, #255	; 0xff
   16ef0:	e6e5      	b.n	16cbe <__aeabi_fadd+0x76>
   16ef2:	003b      	movs	r3, r7
   16ef4:	0004      	movs	r4, r0
   16ef6:	000d      	movs	r5, r1
   16ef8:	e6e1      	b.n	16cbe <__aeabi_fadd+0x76>
   16efa:	28ff      	cmp	r0, #255	; 0xff
   16efc:	d01c      	beq.n	16f38 <__aeabi_fadd+0x2f0>
   16efe:	2480      	movs	r4, #128	; 0x80
   16f00:	04e4      	lsls	r4, r4, #19
   16f02:	4249      	negs	r1, r1
   16f04:	4323      	orrs	r3, r4
   16f06:	e7e0      	b.n	16eca <__aeabi_fadd+0x282>
   16f08:	2f00      	cmp	r7, #0
   16f0a:	d100      	bne.n	16f0e <__aeabi_fadd+0x2c6>
   16f0c:	e6d7      	b.n	16cbe <__aeabi_fadd+0x76>
   16f0e:	1bde      	subs	r6, r3, r7
   16f10:	0172      	lsls	r2, r6, #5
   16f12:	d51f      	bpl.n	16f54 <__aeabi_fadd+0x30c>
   16f14:	1afb      	subs	r3, r7, r3
   16f16:	000d      	movs	r5, r1
   16f18:	e6d1      	b.n	16cbe <__aeabi_fadd+0x76>
   16f1a:	24ff      	movs	r4, #255	; 0xff
   16f1c:	2f00      	cmp	r7, #0
   16f1e:	d100      	bne.n	16f22 <__aeabi_fadd+0x2da>
   16f20:	e6cd      	b.n	16cbe <__aeabi_fadd+0x76>
   16f22:	2280      	movs	r2, #128	; 0x80
   16f24:	4640      	mov	r0, r8
   16f26:	03d2      	lsls	r2, r2, #15
   16f28:	4210      	tst	r0, r2
   16f2a:	d0af      	beq.n	16e8c <__aeabi_fadd+0x244>
   16f2c:	4216      	tst	r6, r2
   16f2e:	d1ad      	bne.n	16e8c <__aeabi_fadd+0x244>
   16f30:	003b      	movs	r3, r7
   16f32:	000d      	movs	r5, r1
   16f34:	24ff      	movs	r4, #255	; 0xff
   16f36:	e6c2      	b.n	16cbe <__aeabi_fadd+0x76>
   16f38:	4663      	mov	r3, ip
   16f3a:	24ff      	movs	r4, #255	; 0xff
   16f3c:	e6bf      	b.n	16cbe <__aeabi_fadd+0x76>
   16f3e:	2301      	movs	r3, #1
   16f40:	e77a      	b.n	16e38 <__aeabi_fadd+0x1f0>
   16f42:	003b      	movs	r3, r7
   16f44:	0004      	movs	r4, r0
   16f46:	e6ba      	b.n	16cbe <__aeabi_fadd+0x76>
   16f48:	2680      	movs	r6, #128	; 0x80
   16f4a:	2200      	movs	r2, #0
   16f4c:	03f6      	lsls	r6, r6, #15
   16f4e:	e6f0      	b.n	16d32 <__aeabi_fadd+0xea>
   16f50:	003b      	movs	r3, r7
   16f52:	e6b4      	b.n	16cbe <__aeabi_fadd+0x76>
   16f54:	1e33      	subs	r3, r6, #0
   16f56:	d000      	beq.n	16f5a <__aeabi_fadd+0x312>
   16f58:	e6e2      	b.n	16d20 <__aeabi_fadd+0xd8>
   16f5a:	2200      	movs	r2, #0
   16f5c:	e721      	b.n	16da2 <__aeabi_fadd+0x15a>
   16f5e:	2301      	movs	r3, #1
   16f60:	e7bd      	b.n	16ede <__aeabi_fadd+0x296>
   16f62:	46c0      	nop			; (mov r8, r8)
   16f64:	7dffffff 	.word	0x7dffffff
   16f68:	fbffffff 	.word	0xfbffffff

00016f6c <__aeabi_fdiv>:
   16f6c:	b5f0      	push	{r4, r5, r6, r7, lr}
   16f6e:	4657      	mov	r7, sl
   16f70:	464e      	mov	r6, r9
   16f72:	46de      	mov	lr, fp
   16f74:	4645      	mov	r5, r8
   16f76:	b5e0      	push	{r5, r6, r7, lr}
   16f78:	0244      	lsls	r4, r0, #9
   16f7a:	0043      	lsls	r3, r0, #1
   16f7c:	0fc6      	lsrs	r6, r0, #31
   16f7e:	b083      	sub	sp, #12
   16f80:	1c0f      	adds	r7, r1, #0
   16f82:	0a64      	lsrs	r4, r4, #9
   16f84:	0e1b      	lsrs	r3, r3, #24
   16f86:	46b2      	mov	sl, r6
   16f88:	d053      	beq.n	17032 <__aeabi_fdiv+0xc6>
   16f8a:	2bff      	cmp	r3, #255	; 0xff
   16f8c:	d027      	beq.n	16fde <__aeabi_fdiv+0x72>
   16f8e:	2280      	movs	r2, #128	; 0x80
   16f90:	00e4      	lsls	r4, r4, #3
   16f92:	04d2      	lsls	r2, r2, #19
   16f94:	4314      	orrs	r4, r2
   16f96:	227f      	movs	r2, #127	; 0x7f
   16f98:	4252      	negs	r2, r2
   16f9a:	4690      	mov	r8, r2
   16f9c:	4498      	add	r8, r3
   16f9e:	2300      	movs	r3, #0
   16fa0:	4699      	mov	r9, r3
   16fa2:	469b      	mov	fp, r3
   16fa4:	027d      	lsls	r5, r7, #9
   16fa6:	0078      	lsls	r0, r7, #1
   16fa8:	0ffb      	lsrs	r3, r7, #31
   16faa:	0a6d      	lsrs	r5, r5, #9
   16fac:	0e00      	lsrs	r0, r0, #24
   16fae:	9300      	str	r3, [sp, #0]
   16fb0:	d024      	beq.n	16ffc <__aeabi_fdiv+0x90>
   16fb2:	28ff      	cmp	r0, #255	; 0xff
   16fb4:	d046      	beq.n	17044 <__aeabi_fdiv+0xd8>
   16fb6:	2380      	movs	r3, #128	; 0x80
   16fb8:	2100      	movs	r1, #0
   16fba:	00ed      	lsls	r5, r5, #3
   16fbc:	04db      	lsls	r3, r3, #19
   16fbe:	431d      	orrs	r5, r3
   16fc0:	387f      	subs	r0, #127	; 0x7f
   16fc2:	4647      	mov	r7, r8
   16fc4:	1a38      	subs	r0, r7, r0
   16fc6:	464f      	mov	r7, r9
   16fc8:	430f      	orrs	r7, r1
   16fca:	00bf      	lsls	r7, r7, #2
   16fcc:	46b9      	mov	r9, r7
   16fce:	0033      	movs	r3, r6
   16fd0:	9a00      	ldr	r2, [sp, #0]
   16fd2:	4f87      	ldr	r7, [pc, #540]	; (171f0 <__aeabi_fdiv+0x284>)
   16fd4:	4053      	eors	r3, r2
   16fd6:	464a      	mov	r2, r9
   16fd8:	58ba      	ldr	r2, [r7, r2]
   16fda:	9301      	str	r3, [sp, #4]
   16fdc:	4697      	mov	pc, r2
   16fde:	2c00      	cmp	r4, #0
   16fe0:	d14e      	bne.n	17080 <__aeabi_fdiv+0x114>
   16fe2:	2308      	movs	r3, #8
   16fe4:	4699      	mov	r9, r3
   16fe6:	33f7      	adds	r3, #247	; 0xf7
   16fe8:	4698      	mov	r8, r3
   16fea:	3bfd      	subs	r3, #253	; 0xfd
   16fec:	469b      	mov	fp, r3
   16fee:	027d      	lsls	r5, r7, #9
   16ff0:	0078      	lsls	r0, r7, #1
   16ff2:	0ffb      	lsrs	r3, r7, #31
   16ff4:	0a6d      	lsrs	r5, r5, #9
   16ff6:	0e00      	lsrs	r0, r0, #24
   16ff8:	9300      	str	r3, [sp, #0]
   16ffa:	d1da      	bne.n	16fb2 <__aeabi_fdiv+0x46>
   16ffc:	2d00      	cmp	r5, #0
   16ffe:	d126      	bne.n	1704e <__aeabi_fdiv+0xe2>
   17000:	2000      	movs	r0, #0
   17002:	2101      	movs	r1, #1
   17004:	0033      	movs	r3, r6
   17006:	9a00      	ldr	r2, [sp, #0]
   17008:	4f7a      	ldr	r7, [pc, #488]	; (171f4 <__aeabi_fdiv+0x288>)
   1700a:	4053      	eors	r3, r2
   1700c:	4642      	mov	r2, r8
   1700e:	1a10      	subs	r0, r2, r0
   17010:	464a      	mov	r2, r9
   17012:	430a      	orrs	r2, r1
   17014:	0092      	lsls	r2, r2, #2
   17016:	58ba      	ldr	r2, [r7, r2]
   17018:	001d      	movs	r5, r3
   1701a:	4697      	mov	pc, r2
   1701c:	9b00      	ldr	r3, [sp, #0]
   1701e:	002c      	movs	r4, r5
   17020:	469a      	mov	sl, r3
   17022:	468b      	mov	fp, r1
   17024:	465b      	mov	r3, fp
   17026:	2b02      	cmp	r3, #2
   17028:	d131      	bne.n	1708e <__aeabi_fdiv+0x122>
   1702a:	4653      	mov	r3, sl
   1702c:	21ff      	movs	r1, #255	; 0xff
   1702e:	2400      	movs	r4, #0
   17030:	e038      	b.n	170a4 <__aeabi_fdiv+0x138>
   17032:	2c00      	cmp	r4, #0
   17034:	d117      	bne.n	17066 <__aeabi_fdiv+0xfa>
   17036:	2304      	movs	r3, #4
   17038:	4699      	mov	r9, r3
   1703a:	2300      	movs	r3, #0
   1703c:	4698      	mov	r8, r3
   1703e:	3301      	adds	r3, #1
   17040:	469b      	mov	fp, r3
   17042:	e7af      	b.n	16fa4 <__aeabi_fdiv+0x38>
   17044:	20ff      	movs	r0, #255	; 0xff
   17046:	2d00      	cmp	r5, #0
   17048:	d10b      	bne.n	17062 <__aeabi_fdiv+0xf6>
   1704a:	2102      	movs	r1, #2
   1704c:	e7da      	b.n	17004 <__aeabi_fdiv+0x98>
   1704e:	0028      	movs	r0, r5
   17050:	f002 fac8 	bl	195e4 <__clzsi2>
   17054:	1f43      	subs	r3, r0, #5
   17056:	409d      	lsls	r5, r3
   17058:	2376      	movs	r3, #118	; 0x76
   1705a:	425b      	negs	r3, r3
   1705c:	1a18      	subs	r0, r3, r0
   1705e:	2100      	movs	r1, #0
   17060:	e7af      	b.n	16fc2 <__aeabi_fdiv+0x56>
   17062:	2103      	movs	r1, #3
   17064:	e7ad      	b.n	16fc2 <__aeabi_fdiv+0x56>
   17066:	0020      	movs	r0, r4
   17068:	f002 fabc 	bl	195e4 <__clzsi2>
   1706c:	1f43      	subs	r3, r0, #5
   1706e:	409c      	lsls	r4, r3
   17070:	2376      	movs	r3, #118	; 0x76
   17072:	425b      	negs	r3, r3
   17074:	1a1b      	subs	r3, r3, r0
   17076:	4698      	mov	r8, r3
   17078:	2300      	movs	r3, #0
   1707a:	4699      	mov	r9, r3
   1707c:	469b      	mov	fp, r3
   1707e:	e791      	b.n	16fa4 <__aeabi_fdiv+0x38>
   17080:	230c      	movs	r3, #12
   17082:	4699      	mov	r9, r3
   17084:	33f3      	adds	r3, #243	; 0xf3
   17086:	4698      	mov	r8, r3
   17088:	3bfc      	subs	r3, #252	; 0xfc
   1708a:	469b      	mov	fp, r3
   1708c:	e78a      	b.n	16fa4 <__aeabi_fdiv+0x38>
   1708e:	2b03      	cmp	r3, #3
   17090:	d100      	bne.n	17094 <__aeabi_fdiv+0x128>
   17092:	e0a5      	b.n	171e0 <__aeabi_fdiv+0x274>
   17094:	4655      	mov	r5, sl
   17096:	2b01      	cmp	r3, #1
   17098:	d000      	beq.n	1709c <__aeabi_fdiv+0x130>
   1709a:	e081      	b.n	171a0 <__aeabi_fdiv+0x234>
   1709c:	2301      	movs	r3, #1
   1709e:	2100      	movs	r1, #0
   170a0:	2400      	movs	r4, #0
   170a2:	402b      	ands	r3, r5
   170a4:	0264      	lsls	r4, r4, #9
   170a6:	05c9      	lsls	r1, r1, #23
   170a8:	0a60      	lsrs	r0, r4, #9
   170aa:	07db      	lsls	r3, r3, #31
   170ac:	4308      	orrs	r0, r1
   170ae:	4318      	orrs	r0, r3
   170b0:	b003      	add	sp, #12
   170b2:	bc3c      	pop	{r2, r3, r4, r5}
   170b4:	4690      	mov	r8, r2
   170b6:	4699      	mov	r9, r3
   170b8:	46a2      	mov	sl, r4
   170ba:	46ab      	mov	fp, r5
   170bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   170be:	2480      	movs	r4, #128	; 0x80
   170c0:	2300      	movs	r3, #0
   170c2:	03e4      	lsls	r4, r4, #15
   170c4:	21ff      	movs	r1, #255	; 0xff
   170c6:	e7ed      	b.n	170a4 <__aeabi_fdiv+0x138>
   170c8:	21ff      	movs	r1, #255	; 0xff
   170ca:	2400      	movs	r4, #0
   170cc:	e7ea      	b.n	170a4 <__aeabi_fdiv+0x138>
   170ce:	2301      	movs	r3, #1
   170d0:	1a59      	subs	r1, r3, r1
   170d2:	291b      	cmp	r1, #27
   170d4:	dd66      	ble.n	171a4 <__aeabi_fdiv+0x238>
   170d6:	9a01      	ldr	r2, [sp, #4]
   170d8:	4013      	ands	r3, r2
   170da:	2100      	movs	r1, #0
   170dc:	2400      	movs	r4, #0
   170de:	e7e1      	b.n	170a4 <__aeabi_fdiv+0x138>
   170e0:	2380      	movs	r3, #128	; 0x80
   170e2:	03db      	lsls	r3, r3, #15
   170e4:	421c      	tst	r4, r3
   170e6:	d038      	beq.n	1715a <__aeabi_fdiv+0x1ee>
   170e8:	421d      	tst	r5, r3
   170ea:	d051      	beq.n	17190 <__aeabi_fdiv+0x224>
   170ec:	431c      	orrs	r4, r3
   170ee:	0264      	lsls	r4, r4, #9
   170f0:	0a64      	lsrs	r4, r4, #9
   170f2:	0033      	movs	r3, r6
   170f4:	21ff      	movs	r1, #255	; 0xff
   170f6:	e7d5      	b.n	170a4 <__aeabi_fdiv+0x138>
   170f8:	0163      	lsls	r3, r4, #5
   170fa:	016c      	lsls	r4, r5, #5
   170fc:	42a3      	cmp	r3, r4
   170fe:	d23b      	bcs.n	17178 <__aeabi_fdiv+0x20c>
   17100:	261b      	movs	r6, #27
   17102:	2100      	movs	r1, #0
   17104:	3801      	subs	r0, #1
   17106:	2501      	movs	r5, #1
   17108:	001f      	movs	r7, r3
   1710a:	0049      	lsls	r1, r1, #1
   1710c:	005b      	lsls	r3, r3, #1
   1710e:	2f00      	cmp	r7, #0
   17110:	db01      	blt.n	17116 <__aeabi_fdiv+0x1aa>
   17112:	429c      	cmp	r4, r3
   17114:	d801      	bhi.n	1711a <__aeabi_fdiv+0x1ae>
   17116:	1b1b      	subs	r3, r3, r4
   17118:	4329      	orrs	r1, r5
   1711a:	3e01      	subs	r6, #1
   1711c:	2e00      	cmp	r6, #0
   1711e:	d1f3      	bne.n	17108 <__aeabi_fdiv+0x19c>
   17120:	001c      	movs	r4, r3
   17122:	1e63      	subs	r3, r4, #1
   17124:	419c      	sbcs	r4, r3
   17126:	430c      	orrs	r4, r1
   17128:	0001      	movs	r1, r0
   1712a:	317f      	adds	r1, #127	; 0x7f
   1712c:	2900      	cmp	r1, #0
   1712e:	ddce      	ble.n	170ce <__aeabi_fdiv+0x162>
   17130:	0763      	lsls	r3, r4, #29
   17132:	d004      	beq.n	1713e <__aeabi_fdiv+0x1d2>
   17134:	230f      	movs	r3, #15
   17136:	4023      	ands	r3, r4
   17138:	2b04      	cmp	r3, #4
   1713a:	d000      	beq.n	1713e <__aeabi_fdiv+0x1d2>
   1713c:	3404      	adds	r4, #4
   1713e:	0123      	lsls	r3, r4, #4
   17140:	d503      	bpl.n	1714a <__aeabi_fdiv+0x1de>
   17142:	0001      	movs	r1, r0
   17144:	4b2c      	ldr	r3, [pc, #176]	; (171f8 <__aeabi_fdiv+0x28c>)
   17146:	3180      	adds	r1, #128	; 0x80
   17148:	401c      	ands	r4, r3
   1714a:	29fe      	cmp	r1, #254	; 0xfe
   1714c:	dd0d      	ble.n	1716a <__aeabi_fdiv+0x1fe>
   1714e:	2301      	movs	r3, #1
   17150:	9a01      	ldr	r2, [sp, #4]
   17152:	21ff      	movs	r1, #255	; 0xff
   17154:	4013      	ands	r3, r2
   17156:	2400      	movs	r4, #0
   17158:	e7a4      	b.n	170a4 <__aeabi_fdiv+0x138>
   1715a:	2380      	movs	r3, #128	; 0x80
   1715c:	03db      	lsls	r3, r3, #15
   1715e:	431c      	orrs	r4, r3
   17160:	0264      	lsls	r4, r4, #9
   17162:	0a64      	lsrs	r4, r4, #9
   17164:	0033      	movs	r3, r6
   17166:	21ff      	movs	r1, #255	; 0xff
   17168:	e79c      	b.n	170a4 <__aeabi_fdiv+0x138>
   1716a:	2301      	movs	r3, #1
   1716c:	9a01      	ldr	r2, [sp, #4]
   1716e:	01a4      	lsls	r4, r4, #6
   17170:	0a64      	lsrs	r4, r4, #9
   17172:	b2c9      	uxtb	r1, r1
   17174:	4013      	ands	r3, r2
   17176:	e795      	b.n	170a4 <__aeabi_fdiv+0x138>
   17178:	1b1b      	subs	r3, r3, r4
   1717a:	261a      	movs	r6, #26
   1717c:	2101      	movs	r1, #1
   1717e:	e7c2      	b.n	17106 <__aeabi_fdiv+0x19a>
   17180:	9b00      	ldr	r3, [sp, #0]
   17182:	468b      	mov	fp, r1
   17184:	469a      	mov	sl, r3
   17186:	2400      	movs	r4, #0
   17188:	e74c      	b.n	17024 <__aeabi_fdiv+0xb8>
   1718a:	0263      	lsls	r3, r4, #9
   1718c:	d5e5      	bpl.n	1715a <__aeabi_fdiv+0x1ee>
   1718e:	2500      	movs	r5, #0
   17190:	2480      	movs	r4, #128	; 0x80
   17192:	03e4      	lsls	r4, r4, #15
   17194:	432c      	orrs	r4, r5
   17196:	0264      	lsls	r4, r4, #9
   17198:	0a64      	lsrs	r4, r4, #9
   1719a:	9b00      	ldr	r3, [sp, #0]
   1719c:	21ff      	movs	r1, #255	; 0xff
   1719e:	e781      	b.n	170a4 <__aeabi_fdiv+0x138>
   171a0:	9501      	str	r5, [sp, #4]
   171a2:	e7c1      	b.n	17128 <__aeabi_fdiv+0x1bc>
   171a4:	0023      	movs	r3, r4
   171a6:	2020      	movs	r0, #32
   171a8:	40cb      	lsrs	r3, r1
   171aa:	1a41      	subs	r1, r0, r1
   171ac:	408c      	lsls	r4, r1
   171ae:	1e61      	subs	r1, r4, #1
   171b0:	418c      	sbcs	r4, r1
   171b2:	431c      	orrs	r4, r3
   171b4:	0763      	lsls	r3, r4, #29
   171b6:	d004      	beq.n	171c2 <__aeabi_fdiv+0x256>
   171b8:	230f      	movs	r3, #15
   171ba:	4023      	ands	r3, r4
   171bc:	2b04      	cmp	r3, #4
   171be:	d000      	beq.n	171c2 <__aeabi_fdiv+0x256>
   171c0:	3404      	adds	r4, #4
   171c2:	0163      	lsls	r3, r4, #5
   171c4:	d505      	bpl.n	171d2 <__aeabi_fdiv+0x266>
   171c6:	2301      	movs	r3, #1
   171c8:	9a01      	ldr	r2, [sp, #4]
   171ca:	2101      	movs	r1, #1
   171cc:	4013      	ands	r3, r2
   171ce:	2400      	movs	r4, #0
   171d0:	e768      	b.n	170a4 <__aeabi_fdiv+0x138>
   171d2:	2301      	movs	r3, #1
   171d4:	9a01      	ldr	r2, [sp, #4]
   171d6:	01a4      	lsls	r4, r4, #6
   171d8:	0a64      	lsrs	r4, r4, #9
   171da:	4013      	ands	r3, r2
   171dc:	2100      	movs	r1, #0
   171de:	e761      	b.n	170a4 <__aeabi_fdiv+0x138>
   171e0:	2380      	movs	r3, #128	; 0x80
   171e2:	03db      	lsls	r3, r3, #15
   171e4:	431c      	orrs	r4, r3
   171e6:	0264      	lsls	r4, r4, #9
   171e8:	0a64      	lsrs	r4, r4, #9
   171ea:	4653      	mov	r3, sl
   171ec:	21ff      	movs	r1, #255	; 0xff
   171ee:	e759      	b.n	170a4 <__aeabi_fdiv+0x138>
   171f0:	00020384 	.word	0x00020384
   171f4:	000203c4 	.word	0x000203c4
   171f8:	f7ffffff 	.word	0xf7ffffff

000171fc <__eqsf2>:
   171fc:	b570      	push	{r4, r5, r6, lr}
   171fe:	0042      	lsls	r2, r0, #1
   17200:	0245      	lsls	r5, r0, #9
   17202:	024e      	lsls	r6, r1, #9
   17204:	004c      	lsls	r4, r1, #1
   17206:	0fc3      	lsrs	r3, r0, #31
   17208:	0a6d      	lsrs	r5, r5, #9
   1720a:	0e12      	lsrs	r2, r2, #24
   1720c:	0a76      	lsrs	r6, r6, #9
   1720e:	0e24      	lsrs	r4, r4, #24
   17210:	0fc9      	lsrs	r1, r1, #31
   17212:	2001      	movs	r0, #1
   17214:	2aff      	cmp	r2, #255	; 0xff
   17216:	d006      	beq.n	17226 <__eqsf2+0x2a>
   17218:	2cff      	cmp	r4, #255	; 0xff
   1721a:	d003      	beq.n	17224 <__eqsf2+0x28>
   1721c:	42a2      	cmp	r2, r4
   1721e:	d101      	bne.n	17224 <__eqsf2+0x28>
   17220:	42b5      	cmp	r5, r6
   17222:	d006      	beq.n	17232 <__eqsf2+0x36>
   17224:	bd70      	pop	{r4, r5, r6, pc}
   17226:	2d00      	cmp	r5, #0
   17228:	d1fc      	bne.n	17224 <__eqsf2+0x28>
   1722a:	2cff      	cmp	r4, #255	; 0xff
   1722c:	d1fa      	bne.n	17224 <__eqsf2+0x28>
   1722e:	2e00      	cmp	r6, #0
   17230:	d1f8      	bne.n	17224 <__eqsf2+0x28>
   17232:	428b      	cmp	r3, r1
   17234:	d006      	beq.n	17244 <__eqsf2+0x48>
   17236:	2001      	movs	r0, #1
   17238:	2a00      	cmp	r2, #0
   1723a:	d1f3      	bne.n	17224 <__eqsf2+0x28>
   1723c:	0028      	movs	r0, r5
   1723e:	1e45      	subs	r5, r0, #1
   17240:	41a8      	sbcs	r0, r5
   17242:	e7ef      	b.n	17224 <__eqsf2+0x28>
   17244:	2000      	movs	r0, #0
   17246:	e7ed      	b.n	17224 <__eqsf2+0x28>

00017248 <__gesf2>:
   17248:	b5f0      	push	{r4, r5, r6, r7, lr}
   1724a:	0042      	lsls	r2, r0, #1
   1724c:	0245      	lsls	r5, r0, #9
   1724e:	024c      	lsls	r4, r1, #9
   17250:	0fc3      	lsrs	r3, r0, #31
   17252:	0048      	lsls	r0, r1, #1
   17254:	0a6d      	lsrs	r5, r5, #9
   17256:	0e12      	lsrs	r2, r2, #24
   17258:	0a64      	lsrs	r4, r4, #9
   1725a:	0e00      	lsrs	r0, r0, #24
   1725c:	0fc9      	lsrs	r1, r1, #31
   1725e:	2aff      	cmp	r2, #255	; 0xff
   17260:	d01e      	beq.n	172a0 <__gesf2+0x58>
   17262:	28ff      	cmp	r0, #255	; 0xff
   17264:	d021      	beq.n	172aa <__gesf2+0x62>
   17266:	2a00      	cmp	r2, #0
   17268:	d10a      	bne.n	17280 <__gesf2+0x38>
   1726a:	426e      	negs	r6, r5
   1726c:	416e      	adcs	r6, r5
   1726e:	b2f6      	uxtb	r6, r6
   17270:	2800      	cmp	r0, #0
   17272:	d10f      	bne.n	17294 <__gesf2+0x4c>
   17274:	2c00      	cmp	r4, #0
   17276:	d10d      	bne.n	17294 <__gesf2+0x4c>
   17278:	2000      	movs	r0, #0
   1727a:	2d00      	cmp	r5, #0
   1727c:	d009      	beq.n	17292 <__gesf2+0x4a>
   1727e:	e005      	b.n	1728c <__gesf2+0x44>
   17280:	2800      	cmp	r0, #0
   17282:	d101      	bne.n	17288 <__gesf2+0x40>
   17284:	2c00      	cmp	r4, #0
   17286:	d001      	beq.n	1728c <__gesf2+0x44>
   17288:	428b      	cmp	r3, r1
   1728a:	d011      	beq.n	172b0 <__gesf2+0x68>
   1728c:	2101      	movs	r1, #1
   1728e:	4258      	negs	r0, r3
   17290:	4308      	orrs	r0, r1
   17292:	bdf0      	pop	{r4, r5, r6, r7, pc}
   17294:	2e00      	cmp	r6, #0
   17296:	d0f7      	beq.n	17288 <__gesf2+0x40>
   17298:	2001      	movs	r0, #1
   1729a:	3901      	subs	r1, #1
   1729c:	4308      	orrs	r0, r1
   1729e:	e7f8      	b.n	17292 <__gesf2+0x4a>
   172a0:	2d00      	cmp	r5, #0
   172a2:	d0de      	beq.n	17262 <__gesf2+0x1a>
   172a4:	2002      	movs	r0, #2
   172a6:	4240      	negs	r0, r0
   172a8:	e7f3      	b.n	17292 <__gesf2+0x4a>
   172aa:	2c00      	cmp	r4, #0
   172ac:	d0db      	beq.n	17266 <__gesf2+0x1e>
   172ae:	e7f9      	b.n	172a4 <__gesf2+0x5c>
   172b0:	4282      	cmp	r2, r0
   172b2:	dceb      	bgt.n	1728c <__gesf2+0x44>
   172b4:	db04      	blt.n	172c0 <__gesf2+0x78>
   172b6:	42a5      	cmp	r5, r4
   172b8:	d8e8      	bhi.n	1728c <__gesf2+0x44>
   172ba:	2000      	movs	r0, #0
   172bc:	42a5      	cmp	r5, r4
   172be:	d2e8      	bcs.n	17292 <__gesf2+0x4a>
   172c0:	2101      	movs	r1, #1
   172c2:	1e58      	subs	r0, r3, #1
   172c4:	4308      	orrs	r0, r1
   172c6:	e7e4      	b.n	17292 <__gesf2+0x4a>

000172c8 <__lesf2>:
   172c8:	b5f0      	push	{r4, r5, r6, r7, lr}
   172ca:	0042      	lsls	r2, r0, #1
   172cc:	024d      	lsls	r5, r1, #9
   172ce:	004c      	lsls	r4, r1, #1
   172d0:	0246      	lsls	r6, r0, #9
   172d2:	0a76      	lsrs	r6, r6, #9
   172d4:	0e12      	lsrs	r2, r2, #24
   172d6:	0fc3      	lsrs	r3, r0, #31
   172d8:	0a6d      	lsrs	r5, r5, #9
   172da:	0e24      	lsrs	r4, r4, #24
   172dc:	0fc9      	lsrs	r1, r1, #31
   172de:	2aff      	cmp	r2, #255	; 0xff
   172e0:	d016      	beq.n	17310 <__lesf2+0x48>
   172e2:	2cff      	cmp	r4, #255	; 0xff
   172e4:	d018      	beq.n	17318 <__lesf2+0x50>
   172e6:	2a00      	cmp	r2, #0
   172e8:	d10a      	bne.n	17300 <__lesf2+0x38>
   172ea:	4270      	negs	r0, r6
   172ec:	4170      	adcs	r0, r6
   172ee:	b2c0      	uxtb	r0, r0
   172f0:	2c00      	cmp	r4, #0
   172f2:	d015      	beq.n	17320 <__lesf2+0x58>
   172f4:	2800      	cmp	r0, #0
   172f6:	d005      	beq.n	17304 <__lesf2+0x3c>
   172f8:	2001      	movs	r0, #1
   172fa:	3901      	subs	r1, #1
   172fc:	4308      	orrs	r0, r1
   172fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
   17300:	2c00      	cmp	r4, #0
   17302:	d013      	beq.n	1732c <__lesf2+0x64>
   17304:	4299      	cmp	r1, r3
   17306:	d014      	beq.n	17332 <__lesf2+0x6a>
   17308:	2001      	movs	r0, #1
   1730a:	425b      	negs	r3, r3
   1730c:	4318      	orrs	r0, r3
   1730e:	e7f6      	b.n	172fe <__lesf2+0x36>
   17310:	2002      	movs	r0, #2
   17312:	2e00      	cmp	r6, #0
   17314:	d1f3      	bne.n	172fe <__lesf2+0x36>
   17316:	e7e4      	b.n	172e2 <__lesf2+0x1a>
   17318:	2002      	movs	r0, #2
   1731a:	2d00      	cmp	r5, #0
   1731c:	d1ef      	bne.n	172fe <__lesf2+0x36>
   1731e:	e7e2      	b.n	172e6 <__lesf2+0x1e>
   17320:	2d00      	cmp	r5, #0
   17322:	d1e7      	bne.n	172f4 <__lesf2+0x2c>
   17324:	2000      	movs	r0, #0
   17326:	2e00      	cmp	r6, #0
   17328:	d0e9      	beq.n	172fe <__lesf2+0x36>
   1732a:	e7ed      	b.n	17308 <__lesf2+0x40>
   1732c:	2d00      	cmp	r5, #0
   1732e:	d1e9      	bne.n	17304 <__lesf2+0x3c>
   17330:	e7ea      	b.n	17308 <__lesf2+0x40>
   17332:	42a2      	cmp	r2, r4
   17334:	dc06      	bgt.n	17344 <__lesf2+0x7c>
   17336:	dbdf      	blt.n	172f8 <__lesf2+0x30>
   17338:	42ae      	cmp	r6, r5
   1733a:	d803      	bhi.n	17344 <__lesf2+0x7c>
   1733c:	2000      	movs	r0, #0
   1733e:	42ae      	cmp	r6, r5
   17340:	d3da      	bcc.n	172f8 <__lesf2+0x30>
   17342:	e7dc      	b.n	172fe <__lesf2+0x36>
   17344:	2001      	movs	r0, #1
   17346:	4249      	negs	r1, r1
   17348:	4308      	orrs	r0, r1
   1734a:	e7d8      	b.n	172fe <__lesf2+0x36>

0001734c <__aeabi_fmul>:
   1734c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1734e:	4657      	mov	r7, sl
   17350:	464e      	mov	r6, r9
   17352:	4645      	mov	r5, r8
   17354:	46de      	mov	lr, fp
   17356:	b5e0      	push	{r5, r6, r7, lr}
   17358:	0247      	lsls	r7, r0, #9
   1735a:	0046      	lsls	r6, r0, #1
   1735c:	4688      	mov	r8, r1
   1735e:	0a7f      	lsrs	r7, r7, #9
   17360:	0e36      	lsrs	r6, r6, #24
   17362:	0fc4      	lsrs	r4, r0, #31
   17364:	2e00      	cmp	r6, #0
   17366:	d047      	beq.n	173f8 <__aeabi_fmul+0xac>
   17368:	2eff      	cmp	r6, #255	; 0xff
   1736a:	d024      	beq.n	173b6 <__aeabi_fmul+0x6a>
   1736c:	00fb      	lsls	r3, r7, #3
   1736e:	2780      	movs	r7, #128	; 0x80
   17370:	04ff      	lsls	r7, r7, #19
   17372:	431f      	orrs	r7, r3
   17374:	2300      	movs	r3, #0
   17376:	4699      	mov	r9, r3
   17378:	469a      	mov	sl, r3
   1737a:	3e7f      	subs	r6, #127	; 0x7f
   1737c:	4643      	mov	r3, r8
   1737e:	025d      	lsls	r5, r3, #9
   17380:	0058      	lsls	r0, r3, #1
   17382:	0fdb      	lsrs	r3, r3, #31
   17384:	0a6d      	lsrs	r5, r5, #9
   17386:	0e00      	lsrs	r0, r0, #24
   17388:	4698      	mov	r8, r3
   1738a:	d043      	beq.n	17414 <__aeabi_fmul+0xc8>
   1738c:	28ff      	cmp	r0, #255	; 0xff
   1738e:	d03b      	beq.n	17408 <__aeabi_fmul+0xbc>
   17390:	00eb      	lsls	r3, r5, #3
   17392:	2580      	movs	r5, #128	; 0x80
   17394:	2200      	movs	r2, #0
   17396:	04ed      	lsls	r5, r5, #19
   17398:	431d      	orrs	r5, r3
   1739a:	387f      	subs	r0, #127	; 0x7f
   1739c:	1836      	adds	r6, r6, r0
   1739e:	1c73      	adds	r3, r6, #1
   173a0:	4641      	mov	r1, r8
   173a2:	469b      	mov	fp, r3
   173a4:	464b      	mov	r3, r9
   173a6:	4061      	eors	r1, r4
   173a8:	4313      	orrs	r3, r2
   173aa:	2b0f      	cmp	r3, #15
   173ac:	d864      	bhi.n	17478 <__aeabi_fmul+0x12c>
   173ae:	4875      	ldr	r0, [pc, #468]	; (17584 <__aeabi_fmul+0x238>)
   173b0:	009b      	lsls	r3, r3, #2
   173b2:	58c3      	ldr	r3, [r0, r3]
   173b4:	469f      	mov	pc, r3
   173b6:	2f00      	cmp	r7, #0
   173b8:	d142      	bne.n	17440 <__aeabi_fmul+0xf4>
   173ba:	2308      	movs	r3, #8
   173bc:	4699      	mov	r9, r3
   173be:	3b06      	subs	r3, #6
   173c0:	26ff      	movs	r6, #255	; 0xff
   173c2:	469a      	mov	sl, r3
   173c4:	e7da      	b.n	1737c <__aeabi_fmul+0x30>
   173c6:	4641      	mov	r1, r8
   173c8:	2a02      	cmp	r2, #2
   173ca:	d028      	beq.n	1741e <__aeabi_fmul+0xd2>
   173cc:	2a03      	cmp	r2, #3
   173ce:	d100      	bne.n	173d2 <__aeabi_fmul+0x86>
   173d0:	e0ce      	b.n	17570 <__aeabi_fmul+0x224>
   173d2:	2a01      	cmp	r2, #1
   173d4:	d000      	beq.n	173d8 <__aeabi_fmul+0x8c>
   173d6:	e0ac      	b.n	17532 <__aeabi_fmul+0x1e6>
   173d8:	4011      	ands	r1, r2
   173da:	2000      	movs	r0, #0
   173dc:	2200      	movs	r2, #0
   173de:	b2cc      	uxtb	r4, r1
   173e0:	0240      	lsls	r0, r0, #9
   173e2:	05d2      	lsls	r2, r2, #23
   173e4:	0a40      	lsrs	r0, r0, #9
   173e6:	07e4      	lsls	r4, r4, #31
   173e8:	4310      	orrs	r0, r2
   173ea:	4320      	orrs	r0, r4
   173ec:	bc3c      	pop	{r2, r3, r4, r5}
   173ee:	4690      	mov	r8, r2
   173f0:	4699      	mov	r9, r3
   173f2:	46a2      	mov	sl, r4
   173f4:	46ab      	mov	fp, r5
   173f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   173f8:	2f00      	cmp	r7, #0
   173fa:	d115      	bne.n	17428 <__aeabi_fmul+0xdc>
   173fc:	2304      	movs	r3, #4
   173fe:	4699      	mov	r9, r3
   17400:	3b03      	subs	r3, #3
   17402:	2600      	movs	r6, #0
   17404:	469a      	mov	sl, r3
   17406:	e7b9      	b.n	1737c <__aeabi_fmul+0x30>
   17408:	20ff      	movs	r0, #255	; 0xff
   1740a:	2202      	movs	r2, #2
   1740c:	2d00      	cmp	r5, #0
   1740e:	d0c5      	beq.n	1739c <__aeabi_fmul+0x50>
   17410:	2203      	movs	r2, #3
   17412:	e7c3      	b.n	1739c <__aeabi_fmul+0x50>
   17414:	2d00      	cmp	r5, #0
   17416:	d119      	bne.n	1744c <__aeabi_fmul+0x100>
   17418:	2000      	movs	r0, #0
   1741a:	2201      	movs	r2, #1
   1741c:	e7be      	b.n	1739c <__aeabi_fmul+0x50>
   1741e:	2401      	movs	r4, #1
   17420:	22ff      	movs	r2, #255	; 0xff
   17422:	400c      	ands	r4, r1
   17424:	2000      	movs	r0, #0
   17426:	e7db      	b.n	173e0 <__aeabi_fmul+0x94>
   17428:	0038      	movs	r0, r7
   1742a:	f002 f8db 	bl	195e4 <__clzsi2>
   1742e:	2676      	movs	r6, #118	; 0x76
   17430:	1f43      	subs	r3, r0, #5
   17432:	409f      	lsls	r7, r3
   17434:	2300      	movs	r3, #0
   17436:	4276      	negs	r6, r6
   17438:	1a36      	subs	r6, r6, r0
   1743a:	4699      	mov	r9, r3
   1743c:	469a      	mov	sl, r3
   1743e:	e79d      	b.n	1737c <__aeabi_fmul+0x30>
   17440:	230c      	movs	r3, #12
   17442:	4699      	mov	r9, r3
   17444:	3b09      	subs	r3, #9
   17446:	26ff      	movs	r6, #255	; 0xff
   17448:	469a      	mov	sl, r3
   1744a:	e797      	b.n	1737c <__aeabi_fmul+0x30>
   1744c:	0028      	movs	r0, r5
   1744e:	f002 f8c9 	bl	195e4 <__clzsi2>
   17452:	1f43      	subs	r3, r0, #5
   17454:	409d      	lsls	r5, r3
   17456:	2376      	movs	r3, #118	; 0x76
   17458:	425b      	negs	r3, r3
   1745a:	1a18      	subs	r0, r3, r0
   1745c:	2200      	movs	r2, #0
   1745e:	e79d      	b.n	1739c <__aeabi_fmul+0x50>
   17460:	2080      	movs	r0, #128	; 0x80
   17462:	2400      	movs	r4, #0
   17464:	03c0      	lsls	r0, r0, #15
   17466:	22ff      	movs	r2, #255	; 0xff
   17468:	e7ba      	b.n	173e0 <__aeabi_fmul+0x94>
   1746a:	003d      	movs	r5, r7
   1746c:	4652      	mov	r2, sl
   1746e:	e7ab      	b.n	173c8 <__aeabi_fmul+0x7c>
   17470:	003d      	movs	r5, r7
   17472:	0021      	movs	r1, r4
   17474:	4652      	mov	r2, sl
   17476:	e7a7      	b.n	173c8 <__aeabi_fmul+0x7c>
   17478:	0c3b      	lsrs	r3, r7, #16
   1747a:	469c      	mov	ip, r3
   1747c:	042a      	lsls	r2, r5, #16
   1747e:	0c12      	lsrs	r2, r2, #16
   17480:	0c2b      	lsrs	r3, r5, #16
   17482:	0014      	movs	r4, r2
   17484:	4660      	mov	r0, ip
   17486:	4665      	mov	r5, ip
   17488:	043f      	lsls	r7, r7, #16
   1748a:	0c3f      	lsrs	r7, r7, #16
   1748c:	437c      	muls	r4, r7
   1748e:	4342      	muls	r2, r0
   17490:	435d      	muls	r5, r3
   17492:	437b      	muls	r3, r7
   17494:	0c27      	lsrs	r7, r4, #16
   17496:	189b      	adds	r3, r3, r2
   17498:	18ff      	adds	r7, r7, r3
   1749a:	42ba      	cmp	r2, r7
   1749c:	d903      	bls.n	174a6 <__aeabi_fmul+0x15a>
   1749e:	2380      	movs	r3, #128	; 0x80
   174a0:	025b      	lsls	r3, r3, #9
   174a2:	469c      	mov	ip, r3
   174a4:	4465      	add	r5, ip
   174a6:	0424      	lsls	r4, r4, #16
   174a8:	043a      	lsls	r2, r7, #16
   174aa:	0c24      	lsrs	r4, r4, #16
   174ac:	1912      	adds	r2, r2, r4
   174ae:	0193      	lsls	r3, r2, #6
   174b0:	1e5c      	subs	r4, r3, #1
   174b2:	41a3      	sbcs	r3, r4
   174b4:	0c3f      	lsrs	r7, r7, #16
   174b6:	0e92      	lsrs	r2, r2, #26
   174b8:	197d      	adds	r5, r7, r5
   174ba:	431a      	orrs	r2, r3
   174bc:	01ad      	lsls	r5, r5, #6
   174be:	4315      	orrs	r5, r2
   174c0:	012b      	lsls	r3, r5, #4
   174c2:	d504      	bpl.n	174ce <__aeabi_fmul+0x182>
   174c4:	2301      	movs	r3, #1
   174c6:	465e      	mov	r6, fp
   174c8:	086a      	lsrs	r2, r5, #1
   174ca:	401d      	ands	r5, r3
   174cc:	4315      	orrs	r5, r2
   174ce:	0032      	movs	r2, r6
   174d0:	327f      	adds	r2, #127	; 0x7f
   174d2:	2a00      	cmp	r2, #0
   174d4:	dd25      	ble.n	17522 <__aeabi_fmul+0x1d6>
   174d6:	076b      	lsls	r3, r5, #29
   174d8:	d004      	beq.n	174e4 <__aeabi_fmul+0x198>
   174da:	230f      	movs	r3, #15
   174dc:	402b      	ands	r3, r5
   174de:	2b04      	cmp	r3, #4
   174e0:	d000      	beq.n	174e4 <__aeabi_fmul+0x198>
   174e2:	3504      	adds	r5, #4
   174e4:	012b      	lsls	r3, r5, #4
   174e6:	d503      	bpl.n	174f0 <__aeabi_fmul+0x1a4>
   174e8:	0032      	movs	r2, r6
   174ea:	4b27      	ldr	r3, [pc, #156]	; (17588 <__aeabi_fmul+0x23c>)
   174ec:	3280      	adds	r2, #128	; 0x80
   174ee:	401d      	ands	r5, r3
   174f0:	2afe      	cmp	r2, #254	; 0xfe
   174f2:	dc94      	bgt.n	1741e <__aeabi_fmul+0xd2>
   174f4:	2401      	movs	r4, #1
   174f6:	01a8      	lsls	r0, r5, #6
   174f8:	0a40      	lsrs	r0, r0, #9
   174fa:	b2d2      	uxtb	r2, r2
   174fc:	400c      	ands	r4, r1
   174fe:	e76f      	b.n	173e0 <__aeabi_fmul+0x94>
   17500:	2080      	movs	r0, #128	; 0x80
   17502:	03c0      	lsls	r0, r0, #15
   17504:	4207      	tst	r7, r0
   17506:	d007      	beq.n	17518 <__aeabi_fmul+0x1cc>
   17508:	4205      	tst	r5, r0
   1750a:	d105      	bne.n	17518 <__aeabi_fmul+0x1cc>
   1750c:	4328      	orrs	r0, r5
   1750e:	0240      	lsls	r0, r0, #9
   17510:	0a40      	lsrs	r0, r0, #9
   17512:	4644      	mov	r4, r8
   17514:	22ff      	movs	r2, #255	; 0xff
   17516:	e763      	b.n	173e0 <__aeabi_fmul+0x94>
   17518:	4338      	orrs	r0, r7
   1751a:	0240      	lsls	r0, r0, #9
   1751c:	0a40      	lsrs	r0, r0, #9
   1751e:	22ff      	movs	r2, #255	; 0xff
   17520:	e75e      	b.n	173e0 <__aeabi_fmul+0x94>
   17522:	2401      	movs	r4, #1
   17524:	1aa3      	subs	r3, r4, r2
   17526:	2b1b      	cmp	r3, #27
   17528:	dd05      	ble.n	17536 <__aeabi_fmul+0x1ea>
   1752a:	400c      	ands	r4, r1
   1752c:	2200      	movs	r2, #0
   1752e:	2000      	movs	r0, #0
   17530:	e756      	b.n	173e0 <__aeabi_fmul+0x94>
   17532:	465e      	mov	r6, fp
   17534:	e7cb      	b.n	174ce <__aeabi_fmul+0x182>
   17536:	002a      	movs	r2, r5
   17538:	2020      	movs	r0, #32
   1753a:	40da      	lsrs	r2, r3
   1753c:	1ac3      	subs	r3, r0, r3
   1753e:	409d      	lsls	r5, r3
   17540:	002b      	movs	r3, r5
   17542:	1e5d      	subs	r5, r3, #1
   17544:	41ab      	sbcs	r3, r5
   17546:	4313      	orrs	r3, r2
   17548:	075a      	lsls	r2, r3, #29
   1754a:	d004      	beq.n	17556 <__aeabi_fmul+0x20a>
   1754c:	220f      	movs	r2, #15
   1754e:	401a      	ands	r2, r3
   17550:	2a04      	cmp	r2, #4
   17552:	d000      	beq.n	17556 <__aeabi_fmul+0x20a>
   17554:	3304      	adds	r3, #4
   17556:	015a      	lsls	r2, r3, #5
   17558:	d504      	bpl.n	17564 <__aeabi_fmul+0x218>
   1755a:	2401      	movs	r4, #1
   1755c:	2201      	movs	r2, #1
   1755e:	400c      	ands	r4, r1
   17560:	2000      	movs	r0, #0
   17562:	e73d      	b.n	173e0 <__aeabi_fmul+0x94>
   17564:	2401      	movs	r4, #1
   17566:	019b      	lsls	r3, r3, #6
   17568:	0a58      	lsrs	r0, r3, #9
   1756a:	400c      	ands	r4, r1
   1756c:	2200      	movs	r2, #0
   1756e:	e737      	b.n	173e0 <__aeabi_fmul+0x94>
   17570:	2080      	movs	r0, #128	; 0x80
   17572:	2401      	movs	r4, #1
   17574:	03c0      	lsls	r0, r0, #15
   17576:	4328      	orrs	r0, r5
   17578:	0240      	lsls	r0, r0, #9
   1757a:	0a40      	lsrs	r0, r0, #9
   1757c:	400c      	ands	r4, r1
   1757e:	22ff      	movs	r2, #255	; 0xff
   17580:	e72e      	b.n	173e0 <__aeabi_fmul+0x94>
   17582:	46c0      	nop			; (mov r8, r8)
   17584:	00020404 	.word	0x00020404
   17588:	f7ffffff 	.word	0xf7ffffff

0001758c <__aeabi_fsub>:
   1758c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1758e:	464f      	mov	r7, r9
   17590:	46d6      	mov	lr, sl
   17592:	4646      	mov	r6, r8
   17594:	0044      	lsls	r4, r0, #1
   17596:	b5c0      	push	{r6, r7, lr}
   17598:	0fc2      	lsrs	r2, r0, #31
   1759a:	0247      	lsls	r7, r0, #9
   1759c:	0248      	lsls	r0, r1, #9
   1759e:	0a40      	lsrs	r0, r0, #9
   175a0:	4684      	mov	ip, r0
   175a2:	4666      	mov	r6, ip
   175a4:	0a7b      	lsrs	r3, r7, #9
   175a6:	0048      	lsls	r0, r1, #1
   175a8:	0fc9      	lsrs	r1, r1, #31
   175aa:	469a      	mov	sl, r3
   175ac:	0e24      	lsrs	r4, r4, #24
   175ae:	0015      	movs	r5, r2
   175b0:	00db      	lsls	r3, r3, #3
   175b2:	0e00      	lsrs	r0, r0, #24
   175b4:	4689      	mov	r9, r1
   175b6:	00f6      	lsls	r6, r6, #3
   175b8:	28ff      	cmp	r0, #255	; 0xff
   175ba:	d100      	bne.n	175be <__aeabi_fsub+0x32>
   175bc:	e08f      	b.n	176de <__aeabi_fsub+0x152>
   175be:	2101      	movs	r1, #1
   175c0:	464f      	mov	r7, r9
   175c2:	404f      	eors	r7, r1
   175c4:	0039      	movs	r1, r7
   175c6:	4291      	cmp	r1, r2
   175c8:	d066      	beq.n	17698 <__aeabi_fsub+0x10c>
   175ca:	1a22      	subs	r2, r4, r0
   175cc:	2a00      	cmp	r2, #0
   175ce:	dc00      	bgt.n	175d2 <__aeabi_fsub+0x46>
   175d0:	e09d      	b.n	1770e <__aeabi_fsub+0x182>
   175d2:	2800      	cmp	r0, #0
   175d4:	d13d      	bne.n	17652 <__aeabi_fsub+0xc6>
   175d6:	2e00      	cmp	r6, #0
   175d8:	d100      	bne.n	175dc <__aeabi_fsub+0x50>
   175da:	e08b      	b.n	176f4 <__aeabi_fsub+0x168>
   175dc:	1e51      	subs	r1, r2, #1
   175de:	2900      	cmp	r1, #0
   175e0:	d000      	beq.n	175e4 <__aeabi_fsub+0x58>
   175e2:	e0b5      	b.n	17750 <__aeabi_fsub+0x1c4>
   175e4:	2401      	movs	r4, #1
   175e6:	1b9b      	subs	r3, r3, r6
   175e8:	015a      	lsls	r2, r3, #5
   175ea:	d544      	bpl.n	17676 <__aeabi_fsub+0xea>
   175ec:	019b      	lsls	r3, r3, #6
   175ee:	099f      	lsrs	r7, r3, #6
   175f0:	0038      	movs	r0, r7
   175f2:	f001 fff7 	bl	195e4 <__clzsi2>
   175f6:	3805      	subs	r0, #5
   175f8:	4087      	lsls	r7, r0
   175fa:	4284      	cmp	r4, r0
   175fc:	dd00      	ble.n	17600 <__aeabi_fsub+0x74>
   175fe:	e096      	b.n	1772e <__aeabi_fsub+0x1a2>
   17600:	1b04      	subs	r4, r0, r4
   17602:	003a      	movs	r2, r7
   17604:	2020      	movs	r0, #32
   17606:	3401      	adds	r4, #1
   17608:	40e2      	lsrs	r2, r4
   1760a:	1b04      	subs	r4, r0, r4
   1760c:	40a7      	lsls	r7, r4
   1760e:	003b      	movs	r3, r7
   17610:	1e5f      	subs	r7, r3, #1
   17612:	41bb      	sbcs	r3, r7
   17614:	2400      	movs	r4, #0
   17616:	4313      	orrs	r3, r2
   17618:	075a      	lsls	r2, r3, #29
   1761a:	d004      	beq.n	17626 <__aeabi_fsub+0x9a>
   1761c:	220f      	movs	r2, #15
   1761e:	401a      	ands	r2, r3
   17620:	2a04      	cmp	r2, #4
   17622:	d000      	beq.n	17626 <__aeabi_fsub+0x9a>
   17624:	3304      	adds	r3, #4
   17626:	015a      	lsls	r2, r3, #5
   17628:	d527      	bpl.n	1767a <__aeabi_fsub+0xee>
   1762a:	3401      	adds	r4, #1
   1762c:	2cff      	cmp	r4, #255	; 0xff
   1762e:	d100      	bne.n	17632 <__aeabi_fsub+0xa6>
   17630:	e079      	b.n	17726 <__aeabi_fsub+0x19a>
   17632:	2201      	movs	r2, #1
   17634:	019b      	lsls	r3, r3, #6
   17636:	0a5b      	lsrs	r3, r3, #9
   17638:	b2e4      	uxtb	r4, r4
   1763a:	402a      	ands	r2, r5
   1763c:	025b      	lsls	r3, r3, #9
   1763e:	05e4      	lsls	r4, r4, #23
   17640:	0a58      	lsrs	r0, r3, #9
   17642:	07d2      	lsls	r2, r2, #31
   17644:	4320      	orrs	r0, r4
   17646:	4310      	orrs	r0, r2
   17648:	bc1c      	pop	{r2, r3, r4}
   1764a:	4690      	mov	r8, r2
   1764c:	4699      	mov	r9, r3
   1764e:	46a2      	mov	sl, r4
   17650:	bdf0      	pop	{r4, r5, r6, r7, pc}
   17652:	2cff      	cmp	r4, #255	; 0xff
   17654:	d0e0      	beq.n	17618 <__aeabi_fsub+0x8c>
   17656:	2180      	movs	r1, #128	; 0x80
   17658:	04c9      	lsls	r1, r1, #19
   1765a:	430e      	orrs	r6, r1
   1765c:	2a1b      	cmp	r2, #27
   1765e:	dc7b      	bgt.n	17758 <__aeabi_fsub+0x1cc>
   17660:	0031      	movs	r1, r6
   17662:	2020      	movs	r0, #32
   17664:	40d1      	lsrs	r1, r2
   17666:	1a82      	subs	r2, r0, r2
   17668:	4096      	lsls	r6, r2
   1766a:	1e72      	subs	r2, r6, #1
   1766c:	4196      	sbcs	r6, r2
   1766e:	430e      	orrs	r6, r1
   17670:	1b9b      	subs	r3, r3, r6
   17672:	015a      	lsls	r2, r3, #5
   17674:	d4ba      	bmi.n	175ec <__aeabi_fsub+0x60>
   17676:	075a      	lsls	r2, r3, #29
   17678:	d1d0      	bne.n	1761c <__aeabi_fsub+0x90>
   1767a:	2201      	movs	r2, #1
   1767c:	08df      	lsrs	r7, r3, #3
   1767e:	402a      	ands	r2, r5
   17680:	2cff      	cmp	r4, #255	; 0xff
   17682:	d133      	bne.n	176ec <__aeabi_fsub+0x160>
   17684:	2f00      	cmp	r7, #0
   17686:	d100      	bne.n	1768a <__aeabi_fsub+0xfe>
   17688:	e0a8      	b.n	177dc <__aeabi_fsub+0x250>
   1768a:	2380      	movs	r3, #128	; 0x80
   1768c:	03db      	lsls	r3, r3, #15
   1768e:	433b      	orrs	r3, r7
   17690:	025b      	lsls	r3, r3, #9
   17692:	0a5b      	lsrs	r3, r3, #9
   17694:	24ff      	movs	r4, #255	; 0xff
   17696:	e7d1      	b.n	1763c <__aeabi_fsub+0xb0>
   17698:	1a21      	subs	r1, r4, r0
   1769a:	2900      	cmp	r1, #0
   1769c:	dd4c      	ble.n	17738 <__aeabi_fsub+0x1ac>
   1769e:	2800      	cmp	r0, #0
   176a0:	d02a      	beq.n	176f8 <__aeabi_fsub+0x16c>
   176a2:	2cff      	cmp	r4, #255	; 0xff
   176a4:	d0b8      	beq.n	17618 <__aeabi_fsub+0x8c>
   176a6:	2080      	movs	r0, #128	; 0x80
   176a8:	04c0      	lsls	r0, r0, #19
   176aa:	4306      	orrs	r6, r0
   176ac:	291b      	cmp	r1, #27
   176ae:	dd00      	ble.n	176b2 <__aeabi_fsub+0x126>
   176b0:	e0af      	b.n	17812 <__aeabi_fsub+0x286>
   176b2:	0030      	movs	r0, r6
   176b4:	2720      	movs	r7, #32
   176b6:	40c8      	lsrs	r0, r1
   176b8:	1a79      	subs	r1, r7, r1
   176ba:	408e      	lsls	r6, r1
   176bc:	1e71      	subs	r1, r6, #1
   176be:	418e      	sbcs	r6, r1
   176c0:	4306      	orrs	r6, r0
   176c2:	199b      	adds	r3, r3, r6
   176c4:	0159      	lsls	r1, r3, #5
   176c6:	d5d6      	bpl.n	17676 <__aeabi_fsub+0xea>
   176c8:	3401      	adds	r4, #1
   176ca:	2cff      	cmp	r4, #255	; 0xff
   176cc:	d100      	bne.n	176d0 <__aeabi_fsub+0x144>
   176ce:	e085      	b.n	177dc <__aeabi_fsub+0x250>
   176d0:	2201      	movs	r2, #1
   176d2:	497a      	ldr	r1, [pc, #488]	; (178bc <__aeabi_fsub+0x330>)
   176d4:	401a      	ands	r2, r3
   176d6:	085b      	lsrs	r3, r3, #1
   176d8:	400b      	ands	r3, r1
   176da:	4313      	orrs	r3, r2
   176dc:	e79c      	b.n	17618 <__aeabi_fsub+0x8c>
   176de:	2e00      	cmp	r6, #0
   176e0:	d000      	beq.n	176e4 <__aeabi_fsub+0x158>
   176e2:	e770      	b.n	175c6 <__aeabi_fsub+0x3a>
   176e4:	e76b      	b.n	175be <__aeabi_fsub+0x32>
   176e6:	1e3b      	subs	r3, r7, #0
   176e8:	d1c5      	bne.n	17676 <__aeabi_fsub+0xea>
   176ea:	2200      	movs	r2, #0
   176ec:	027b      	lsls	r3, r7, #9
   176ee:	0a5b      	lsrs	r3, r3, #9
   176f0:	b2e4      	uxtb	r4, r4
   176f2:	e7a3      	b.n	1763c <__aeabi_fsub+0xb0>
   176f4:	0014      	movs	r4, r2
   176f6:	e78f      	b.n	17618 <__aeabi_fsub+0x8c>
   176f8:	2e00      	cmp	r6, #0
   176fa:	d04d      	beq.n	17798 <__aeabi_fsub+0x20c>
   176fc:	1e48      	subs	r0, r1, #1
   176fe:	2800      	cmp	r0, #0
   17700:	d157      	bne.n	177b2 <__aeabi_fsub+0x226>
   17702:	199b      	adds	r3, r3, r6
   17704:	2401      	movs	r4, #1
   17706:	015a      	lsls	r2, r3, #5
   17708:	d5b5      	bpl.n	17676 <__aeabi_fsub+0xea>
   1770a:	2402      	movs	r4, #2
   1770c:	e7e0      	b.n	176d0 <__aeabi_fsub+0x144>
   1770e:	2a00      	cmp	r2, #0
   17710:	d125      	bne.n	1775e <__aeabi_fsub+0x1d2>
   17712:	1c62      	adds	r2, r4, #1
   17714:	b2d2      	uxtb	r2, r2
   17716:	2a01      	cmp	r2, #1
   17718:	dd72      	ble.n	17800 <__aeabi_fsub+0x274>
   1771a:	1b9f      	subs	r7, r3, r6
   1771c:	017a      	lsls	r2, r7, #5
   1771e:	d535      	bpl.n	1778c <__aeabi_fsub+0x200>
   17720:	1af7      	subs	r7, r6, r3
   17722:	000d      	movs	r5, r1
   17724:	e764      	b.n	175f0 <__aeabi_fsub+0x64>
   17726:	2201      	movs	r2, #1
   17728:	2300      	movs	r3, #0
   1772a:	402a      	ands	r2, r5
   1772c:	e786      	b.n	1763c <__aeabi_fsub+0xb0>
   1772e:	003b      	movs	r3, r7
   17730:	4a63      	ldr	r2, [pc, #396]	; (178c0 <__aeabi_fsub+0x334>)
   17732:	1a24      	subs	r4, r4, r0
   17734:	4013      	ands	r3, r2
   17736:	e76f      	b.n	17618 <__aeabi_fsub+0x8c>
   17738:	2900      	cmp	r1, #0
   1773a:	d16c      	bne.n	17816 <__aeabi_fsub+0x28a>
   1773c:	1c61      	adds	r1, r4, #1
   1773e:	b2c8      	uxtb	r0, r1
   17740:	2801      	cmp	r0, #1
   17742:	dd4e      	ble.n	177e2 <__aeabi_fsub+0x256>
   17744:	29ff      	cmp	r1, #255	; 0xff
   17746:	d049      	beq.n	177dc <__aeabi_fsub+0x250>
   17748:	199b      	adds	r3, r3, r6
   1774a:	085b      	lsrs	r3, r3, #1
   1774c:	000c      	movs	r4, r1
   1774e:	e763      	b.n	17618 <__aeabi_fsub+0x8c>
   17750:	2aff      	cmp	r2, #255	; 0xff
   17752:	d041      	beq.n	177d8 <__aeabi_fsub+0x24c>
   17754:	000a      	movs	r2, r1
   17756:	e781      	b.n	1765c <__aeabi_fsub+0xd0>
   17758:	2601      	movs	r6, #1
   1775a:	1b9b      	subs	r3, r3, r6
   1775c:	e789      	b.n	17672 <__aeabi_fsub+0xe6>
   1775e:	2c00      	cmp	r4, #0
   17760:	d01c      	beq.n	1779c <__aeabi_fsub+0x210>
   17762:	28ff      	cmp	r0, #255	; 0xff
   17764:	d021      	beq.n	177aa <__aeabi_fsub+0x21e>
   17766:	2480      	movs	r4, #128	; 0x80
   17768:	04e4      	lsls	r4, r4, #19
   1776a:	4252      	negs	r2, r2
   1776c:	4323      	orrs	r3, r4
   1776e:	2a1b      	cmp	r2, #27
   17770:	dd00      	ble.n	17774 <__aeabi_fsub+0x1e8>
   17772:	e096      	b.n	178a2 <__aeabi_fsub+0x316>
   17774:	001c      	movs	r4, r3
   17776:	2520      	movs	r5, #32
   17778:	40d4      	lsrs	r4, r2
   1777a:	1aaa      	subs	r2, r5, r2
   1777c:	4093      	lsls	r3, r2
   1777e:	1e5a      	subs	r2, r3, #1
   17780:	4193      	sbcs	r3, r2
   17782:	4323      	orrs	r3, r4
   17784:	1af3      	subs	r3, r6, r3
   17786:	0004      	movs	r4, r0
   17788:	000d      	movs	r5, r1
   1778a:	e72d      	b.n	175e8 <__aeabi_fsub+0x5c>
   1778c:	2f00      	cmp	r7, #0
   1778e:	d000      	beq.n	17792 <__aeabi_fsub+0x206>
   17790:	e72e      	b.n	175f0 <__aeabi_fsub+0x64>
   17792:	2200      	movs	r2, #0
   17794:	2400      	movs	r4, #0
   17796:	e7a9      	b.n	176ec <__aeabi_fsub+0x160>
   17798:	000c      	movs	r4, r1
   1779a:	e73d      	b.n	17618 <__aeabi_fsub+0x8c>
   1779c:	2b00      	cmp	r3, #0
   1779e:	d058      	beq.n	17852 <__aeabi_fsub+0x2c6>
   177a0:	43d2      	mvns	r2, r2
   177a2:	2a00      	cmp	r2, #0
   177a4:	d0ee      	beq.n	17784 <__aeabi_fsub+0x1f8>
   177a6:	28ff      	cmp	r0, #255	; 0xff
   177a8:	d1e1      	bne.n	1776e <__aeabi_fsub+0x1e2>
   177aa:	0033      	movs	r3, r6
   177ac:	24ff      	movs	r4, #255	; 0xff
   177ae:	000d      	movs	r5, r1
   177b0:	e732      	b.n	17618 <__aeabi_fsub+0x8c>
   177b2:	29ff      	cmp	r1, #255	; 0xff
   177b4:	d010      	beq.n	177d8 <__aeabi_fsub+0x24c>
   177b6:	0001      	movs	r1, r0
   177b8:	e778      	b.n	176ac <__aeabi_fsub+0x120>
   177ba:	2b00      	cmp	r3, #0
   177bc:	d06e      	beq.n	1789c <__aeabi_fsub+0x310>
   177be:	24ff      	movs	r4, #255	; 0xff
   177c0:	2e00      	cmp	r6, #0
   177c2:	d100      	bne.n	177c6 <__aeabi_fsub+0x23a>
   177c4:	e728      	b.n	17618 <__aeabi_fsub+0x8c>
   177c6:	2280      	movs	r2, #128	; 0x80
   177c8:	4651      	mov	r1, sl
   177ca:	03d2      	lsls	r2, r2, #15
   177cc:	4211      	tst	r1, r2
   177ce:	d003      	beq.n	177d8 <__aeabi_fsub+0x24c>
   177d0:	4661      	mov	r1, ip
   177d2:	4211      	tst	r1, r2
   177d4:	d100      	bne.n	177d8 <__aeabi_fsub+0x24c>
   177d6:	0033      	movs	r3, r6
   177d8:	24ff      	movs	r4, #255	; 0xff
   177da:	e71d      	b.n	17618 <__aeabi_fsub+0x8c>
   177dc:	24ff      	movs	r4, #255	; 0xff
   177de:	2300      	movs	r3, #0
   177e0:	e72c      	b.n	1763c <__aeabi_fsub+0xb0>
   177e2:	2c00      	cmp	r4, #0
   177e4:	d1e9      	bne.n	177ba <__aeabi_fsub+0x22e>
   177e6:	2b00      	cmp	r3, #0
   177e8:	d063      	beq.n	178b2 <__aeabi_fsub+0x326>
   177ea:	2e00      	cmp	r6, #0
   177ec:	d100      	bne.n	177f0 <__aeabi_fsub+0x264>
   177ee:	e713      	b.n	17618 <__aeabi_fsub+0x8c>
   177f0:	199b      	adds	r3, r3, r6
   177f2:	015a      	lsls	r2, r3, #5
   177f4:	d400      	bmi.n	177f8 <__aeabi_fsub+0x26c>
   177f6:	e73e      	b.n	17676 <__aeabi_fsub+0xea>
   177f8:	4a31      	ldr	r2, [pc, #196]	; (178c0 <__aeabi_fsub+0x334>)
   177fa:	000c      	movs	r4, r1
   177fc:	4013      	ands	r3, r2
   177fe:	e70b      	b.n	17618 <__aeabi_fsub+0x8c>
   17800:	2c00      	cmp	r4, #0
   17802:	d11e      	bne.n	17842 <__aeabi_fsub+0x2b6>
   17804:	2b00      	cmp	r3, #0
   17806:	d12f      	bne.n	17868 <__aeabi_fsub+0x2dc>
   17808:	2e00      	cmp	r6, #0
   1780a:	d04f      	beq.n	178ac <__aeabi_fsub+0x320>
   1780c:	0033      	movs	r3, r6
   1780e:	000d      	movs	r5, r1
   17810:	e702      	b.n	17618 <__aeabi_fsub+0x8c>
   17812:	2601      	movs	r6, #1
   17814:	e755      	b.n	176c2 <__aeabi_fsub+0x136>
   17816:	2c00      	cmp	r4, #0
   17818:	d11f      	bne.n	1785a <__aeabi_fsub+0x2ce>
   1781a:	2b00      	cmp	r3, #0
   1781c:	d043      	beq.n	178a6 <__aeabi_fsub+0x31a>
   1781e:	43c9      	mvns	r1, r1
   17820:	2900      	cmp	r1, #0
   17822:	d00b      	beq.n	1783c <__aeabi_fsub+0x2b0>
   17824:	28ff      	cmp	r0, #255	; 0xff
   17826:	d039      	beq.n	1789c <__aeabi_fsub+0x310>
   17828:	291b      	cmp	r1, #27
   1782a:	dc44      	bgt.n	178b6 <__aeabi_fsub+0x32a>
   1782c:	001c      	movs	r4, r3
   1782e:	2720      	movs	r7, #32
   17830:	40cc      	lsrs	r4, r1
   17832:	1a79      	subs	r1, r7, r1
   17834:	408b      	lsls	r3, r1
   17836:	1e59      	subs	r1, r3, #1
   17838:	418b      	sbcs	r3, r1
   1783a:	4323      	orrs	r3, r4
   1783c:	199b      	adds	r3, r3, r6
   1783e:	0004      	movs	r4, r0
   17840:	e740      	b.n	176c4 <__aeabi_fsub+0x138>
   17842:	2b00      	cmp	r3, #0
   17844:	d11a      	bne.n	1787c <__aeabi_fsub+0x2f0>
   17846:	2e00      	cmp	r6, #0
   17848:	d124      	bne.n	17894 <__aeabi_fsub+0x308>
   1784a:	2780      	movs	r7, #128	; 0x80
   1784c:	2200      	movs	r2, #0
   1784e:	03ff      	lsls	r7, r7, #15
   17850:	e71b      	b.n	1768a <__aeabi_fsub+0xfe>
   17852:	0033      	movs	r3, r6
   17854:	0004      	movs	r4, r0
   17856:	000d      	movs	r5, r1
   17858:	e6de      	b.n	17618 <__aeabi_fsub+0x8c>
   1785a:	28ff      	cmp	r0, #255	; 0xff
   1785c:	d01e      	beq.n	1789c <__aeabi_fsub+0x310>
   1785e:	2480      	movs	r4, #128	; 0x80
   17860:	04e4      	lsls	r4, r4, #19
   17862:	4249      	negs	r1, r1
   17864:	4323      	orrs	r3, r4
   17866:	e7df      	b.n	17828 <__aeabi_fsub+0x29c>
   17868:	2e00      	cmp	r6, #0
   1786a:	d100      	bne.n	1786e <__aeabi_fsub+0x2e2>
   1786c:	e6d4      	b.n	17618 <__aeabi_fsub+0x8c>
   1786e:	1b9f      	subs	r7, r3, r6
   17870:	017a      	lsls	r2, r7, #5
   17872:	d400      	bmi.n	17876 <__aeabi_fsub+0x2ea>
   17874:	e737      	b.n	176e6 <__aeabi_fsub+0x15a>
   17876:	1af3      	subs	r3, r6, r3
   17878:	000d      	movs	r5, r1
   1787a:	e6cd      	b.n	17618 <__aeabi_fsub+0x8c>
   1787c:	24ff      	movs	r4, #255	; 0xff
   1787e:	2e00      	cmp	r6, #0
   17880:	d100      	bne.n	17884 <__aeabi_fsub+0x2f8>
   17882:	e6c9      	b.n	17618 <__aeabi_fsub+0x8c>
   17884:	2280      	movs	r2, #128	; 0x80
   17886:	4650      	mov	r0, sl
   17888:	03d2      	lsls	r2, r2, #15
   1788a:	4210      	tst	r0, r2
   1788c:	d0a4      	beq.n	177d8 <__aeabi_fsub+0x24c>
   1788e:	4660      	mov	r0, ip
   17890:	4210      	tst	r0, r2
   17892:	d1a1      	bne.n	177d8 <__aeabi_fsub+0x24c>
   17894:	0033      	movs	r3, r6
   17896:	000d      	movs	r5, r1
   17898:	24ff      	movs	r4, #255	; 0xff
   1789a:	e6bd      	b.n	17618 <__aeabi_fsub+0x8c>
   1789c:	0033      	movs	r3, r6
   1789e:	24ff      	movs	r4, #255	; 0xff
   178a0:	e6ba      	b.n	17618 <__aeabi_fsub+0x8c>
   178a2:	2301      	movs	r3, #1
   178a4:	e76e      	b.n	17784 <__aeabi_fsub+0x1f8>
   178a6:	0033      	movs	r3, r6
   178a8:	0004      	movs	r4, r0
   178aa:	e6b5      	b.n	17618 <__aeabi_fsub+0x8c>
   178ac:	2700      	movs	r7, #0
   178ae:	2200      	movs	r2, #0
   178b0:	e71c      	b.n	176ec <__aeabi_fsub+0x160>
   178b2:	0033      	movs	r3, r6
   178b4:	e6b0      	b.n	17618 <__aeabi_fsub+0x8c>
   178b6:	2301      	movs	r3, #1
   178b8:	e7c0      	b.n	1783c <__aeabi_fsub+0x2b0>
   178ba:	46c0      	nop			; (mov r8, r8)
   178bc:	7dffffff 	.word	0x7dffffff
   178c0:	fbffffff 	.word	0xfbffffff

000178c4 <__aeabi_f2iz>:
   178c4:	0241      	lsls	r1, r0, #9
   178c6:	0043      	lsls	r3, r0, #1
   178c8:	0fc2      	lsrs	r2, r0, #31
   178ca:	0a49      	lsrs	r1, r1, #9
   178cc:	0e1b      	lsrs	r3, r3, #24
   178ce:	2000      	movs	r0, #0
   178d0:	2b7e      	cmp	r3, #126	; 0x7e
   178d2:	dd0d      	ble.n	178f0 <__aeabi_f2iz+0x2c>
   178d4:	2b9d      	cmp	r3, #157	; 0x9d
   178d6:	dc0c      	bgt.n	178f2 <__aeabi_f2iz+0x2e>
   178d8:	2080      	movs	r0, #128	; 0x80
   178da:	0400      	lsls	r0, r0, #16
   178dc:	4301      	orrs	r1, r0
   178de:	2b95      	cmp	r3, #149	; 0x95
   178e0:	dc0a      	bgt.n	178f8 <__aeabi_f2iz+0x34>
   178e2:	2096      	movs	r0, #150	; 0x96
   178e4:	1ac3      	subs	r3, r0, r3
   178e6:	40d9      	lsrs	r1, r3
   178e8:	4248      	negs	r0, r1
   178ea:	2a00      	cmp	r2, #0
   178ec:	d100      	bne.n	178f0 <__aeabi_f2iz+0x2c>
   178ee:	0008      	movs	r0, r1
   178f0:	4770      	bx	lr
   178f2:	4b03      	ldr	r3, [pc, #12]	; (17900 <__aeabi_f2iz+0x3c>)
   178f4:	18d0      	adds	r0, r2, r3
   178f6:	e7fb      	b.n	178f0 <__aeabi_f2iz+0x2c>
   178f8:	3b96      	subs	r3, #150	; 0x96
   178fa:	4099      	lsls	r1, r3
   178fc:	e7f4      	b.n	178e8 <__aeabi_f2iz+0x24>
   178fe:	46c0      	nop			; (mov r8, r8)
   17900:	7fffffff 	.word	0x7fffffff

00017904 <__aeabi_i2f>:
   17904:	b570      	push	{r4, r5, r6, lr}
   17906:	2800      	cmp	r0, #0
   17908:	d030      	beq.n	1796c <__aeabi_i2f+0x68>
   1790a:	17c3      	asrs	r3, r0, #31
   1790c:	18c4      	adds	r4, r0, r3
   1790e:	405c      	eors	r4, r3
   17910:	0fc5      	lsrs	r5, r0, #31
   17912:	0020      	movs	r0, r4
   17914:	f001 fe66 	bl	195e4 <__clzsi2>
   17918:	239e      	movs	r3, #158	; 0x9e
   1791a:	1a1b      	subs	r3, r3, r0
   1791c:	2b96      	cmp	r3, #150	; 0x96
   1791e:	dc0d      	bgt.n	1793c <__aeabi_i2f+0x38>
   17920:	2296      	movs	r2, #150	; 0x96
   17922:	1ad2      	subs	r2, r2, r3
   17924:	4094      	lsls	r4, r2
   17926:	002a      	movs	r2, r5
   17928:	0264      	lsls	r4, r4, #9
   1792a:	0a64      	lsrs	r4, r4, #9
   1792c:	b2db      	uxtb	r3, r3
   1792e:	0264      	lsls	r4, r4, #9
   17930:	05db      	lsls	r3, r3, #23
   17932:	0a60      	lsrs	r0, r4, #9
   17934:	07d2      	lsls	r2, r2, #31
   17936:	4318      	orrs	r0, r3
   17938:	4310      	orrs	r0, r2
   1793a:	bd70      	pop	{r4, r5, r6, pc}
   1793c:	2b99      	cmp	r3, #153	; 0x99
   1793e:	dc19      	bgt.n	17974 <__aeabi_i2f+0x70>
   17940:	2299      	movs	r2, #153	; 0x99
   17942:	1ad2      	subs	r2, r2, r3
   17944:	2a00      	cmp	r2, #0
   17946:	dd29      	ble.n	1799c <__aeabi_i2f+0x98>
   17948:	4094      	lsls	r4, r2
   1794a:	0022      	movs	r2, r4
   1794c:	4c14      	ldr	r4, [pc, #80]	; (179a0 <__aeabi_i2f+0x9c>)
   1794e:	4014      	ands	r4, r2
   17950:	0751      	lsls	r1, r2, #29
   17952:	d004      	beq.n	1795e <__aeabi_i2f+0x5a>
   17954:	210f      	movs	r1, #15
   17956:	400a      	ands	r2, r1
   17958:	2a04      	cmp	r2, #4
   1795a:	d000      	beq.n	1795e <__aeabi_i2f+0x5a>
   1795c:	3404      	adds	r4, #4
   1795e:	0162      	lsls	r2, r4, #5
   17960:	d413      	bmi.n	1798a <__aeabi_i2f+0x86>
   17962:	01a4      	lsls	r4, r4, #6
   17964:	0a64      	lsrs	r4, r4, #9
   17966:	b2db      	uxtb	r3, r3
   17968:	002a      	movs	r2, r5
   1796a:	e7e0      	b.n	1792e <__aeabi_i2f+0x2a>
   1796c:	2200      	movs	r2, #0
   1796e:	2300      	movs	r3, #0
   17970:	2400      	movs	r4, #0
   17972:	e7dc      	b.n	1792e <__aeabi_i2f+0x2a>
   17974:	2205      	movs	r2, #5
   17976:	0021      	movs	r1, r4
   17978:	1a12      	subs	r2, r2, r0
   1797a:	40d1      	lsrs	r1, r2
   1797c:	22b9      	movs	r2, #185	; 0xb9
   1797e:	1ad2      	subs	r2, r2, r3
   17980:	4094      	lsls	r4, r2
   17982:	1e62      	subs	r2, r4, #1
   17984:	4194      	sbcs	r4, r2
   17986:	430c      	orrs	r4, r1
   17988:	e7da      	b.n	17940 <__aeabi_i2f+0x3c>
   1798a:	4b05      	ldr	r3, [pc, #20]	; (179a0 <__aeabi_i2f+0x9c>)
   1798c:	002a      	movs	r2, r5
   1798e:	401c      	ands	r4, r3
   17990:	239f      	movs	r3, #159	; 0x9f
   17992:	01a4      	lsls	r4, r4, #6
   17994:	1a1b      	subs	r3, r3, r0
   17996:	0a64      	lsrs	r4, r4, #9
   17998:	b2db      	uxtb	r3, r3
   1799a:	e7c8      	b.n	1792e <__aeabi_i2f+0x2a>
   1799c:	0022      	movs	r2, r4
   1799e:	e7d5      	b.n	1794c <__aeabi_i2f+0x48>
   179a0:	fbffffff 	.word	0xfbffffff

000179a4 <__aeabi_ui2f>:
   179a4:	b510      	push	{r4, lr}
   179a6:	1e04      	subs	r4, r0, #0
   179a8:	d027      	beq.n	179fa <__aeabi_ui2f+0x56>
   179aa:	f001 fe1b 	bl	195e4 <__clzsi2>
   179ae:	239e      	movs	r3, #158	; 0x9e
   179b0:	1a1b      	subs	r3, r3, r0
   179b2:	2b96      	cmp	r3, #150	; 0x96
   179b4:	dc0a      	bgt.n	179cc <__aeabi_ui2f+0x28>
   179b6:	2296      	movs	r2, #150	; 0x96
   179b8:	1ad2      	subs	r2, r2, r3
   179ba:	4094      	lsls	r4, r2
   179bc:	0264      	lsls	r4, r4, #9
   179be:	0a64      	lsrs	r4, r4, #9
   179c0:	b2db      	uxtb	r3, r3
   179c2:	0264      	lsls	r4, r4, #9
   179c4:	05db      	lsls	r3, r3, #23
   179c6:	0a60      	lsrs	r0, r4, #9
   179c8:	4318      	orrs	r0, r3
   179ca:	bd10      	pop	{r4, pc}
   179cc:	2b99      	cmp	r3, #153	; 0x99
   179ce:	dc17      	bgt.n	17a00 <__aeabi_ui2f+0x5c>
   179d0:	2299      	movs	r2, #153	; 0x99
   179d2:	1ad2      	subs	r2, r2, r3
   179d4:	2a00      	cmp	r2, #0
   179d6:	dd27      	ble.n	17a28 <__aeabi_ui2f+0x84>
   179d8:	4094      	lsls	r4, r2
   179da:	0022      	movs	r2, r4
   179dc:	4c13      	ldr	r4, [pc, #76]	; (17a2c <__aeabi_ui2f+0x88>)
   179de:	4014      	ands	r4, r2
   179e0:	0751      	lsls	r1, r2, #29
   179e2:	d004      	beq.n	179ee <__aeabi_ui2f+0x4a>
   179e4:	210f      	movs	r1, #15
   179e6:	400a      	ands	r2, r1
   179e8:	2a04      	cmp	r2, #4
   179ea:	d000      	beq.n	179ee <__aeabi_ui2f+0x4a>
   179ec:	3404      	adds	r4, #4
   179ee:	0162      	lsls	r2, r4, #5
   179f0:	d412      	bmi.n	17a18 <__aeabi_ui2f+0x74>
   179f2:	01a4      	lsls	r4, r4, #6
   179f4:	0a64      	lsrs	r4, r4, #9
   179f6:	b2db      	uxtb	r3, r3
   179f8:	e7e3      	b.n	179c2 <__aeabi_ui2f+0x1e>
   179fa:	2300      	movs	r3, #0
   179fc:	2400      	movs	r4, #0
   179fe:	e7e0      	b.n	179c2 <__aeabi_ui2f+0x1e>
   17a00:	22b9      	movs	r2, #185	; 0xb9
   17a02:	0021      	movs	r1, r4
   17a04:	1ad2      	subs	r2, r2, r3
   17a06:	4091      	lsls	r1, r2
   17a08:	000a      	movs	r2, r1
   17a0a:	1e51      	subs	r1, r2, #1
   17a0c:	418a      	sbcs	r2, r1
   17a0e:	2105      	movs	r1, #5
   17a10:	1a09      	subs	r1, r1, r0
   17a12:	40cc      	lsrs	r4, r1
   17a14:	4314      	orrs	r4, r2
   17a16:	e7db      	b.n	179d0 <__aeabi_ui2f+0x2c>
   17a18:	4b04      	ldr	r3, [pc, #16]	; (17a2c <__aeabi_ui2f+0x88>)
   17a1a:	401c      	ands	r4, r3
   17a1c:	239f      	movs	r3, #159	; 0x9f
   17a1e:	01a4      	lsls	r4, r4, #6
   17a20:	1a1b      	subs	r3, r3, r0
   17a22:	0a64      	lsrs	r4, r4, #9
   17a24:	b2db      	uxtb	r3, r3
   17a26:	e7cc      	b.n	179c2 <__aeabi_ui2f+0x1e>
   17a28:	0022      	movs	r2, r4
   17a2a:	e7d7      	b.n	179dc <__aeabi_ui2f+0x38>
   17a2c:	fbffffff 	.word	0xfbffffff

00017a30 <__aeabi_dadd>:
   17a30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   17a32:	4645      	mov	r5, r8
   17a34:	46de      	mov	lr, fp
   17a36:	4657      	mov	r7, sl
   17a38:	464e      	mov	r6, r9
   17a3a:	030c      	lsls	r4, r1, #12
   17a3c:	b5e0      	push	{r5, r6, r7, lr}
   17a3e:	004e      	lsls	r6, r1, #1
   17a40:	0fc9      	lsrs	r1, r1, #31
   17a42:	4688      	mov	r8, r1
   17a44:	000d      	movs	r5, r1
   17a46:	0a61      	lsrs	r1, r4, #9
   17a48:	0f44      	lsrs	r4, r0, #29
   17a4a:	430c      	orrs	r4, r1
   17a4c:	00c7      	lsls	r7, r0, #3
   17a4e:	0319      	lsls	r1, r3, #12
   17a50:	0058      	lsls	r0, r3, #1
   17a52:	0fdb      	lsrs	r3, r3, #31
   17a54:	469b      	mov	fp, r3
   17a56:	0a4b      	lsrs	r3, r1, #9
   17a58:	0f51      	lsrs	r1, r2, #29
   17a5a:	430b      	orrs	r3, r1
   17a5c:	0d76      	lsrs	r6, r6, #21
   17a5e:	0d40      	lsrs	r0, r0, #21
   17a60:	0019      	movs	r1, r3
   17a62:	00d2      	lsls	r2, r2, #3
   17a64:	45d8      	cmp	r8, fp
   17a66:	d100      	bne.n	17a6a <__aeabi_dadd+0x3a>
   17a68:	e0ae      	b.n	17bc8 <__aeabi_dadd+0x198>
   17a6a:	1a35      	subs	r5, r6, r0
   17a6c:	2d00      	cmp	r5, #0
   17a6e:	dc00      	bgt.n	17a72 <__aeabi_dadd+0x42>
   17a70:	e0f6      	b.n	17c60 <__aeabi_dadd+0x230>
   17a72:	2800      	cmp	r0, #0
   17a74:	d10f      	bne.n	17a96 <__aeabi_dadd+0x66>
   17a76:	4313      	orrs	r3, r2
   17a78:	d100      	bne.n	17a7c <__aeabi_dadd+0x4c>
   17a7a:	e0db      	b.n	17c34 <__aeabi_dadd+0x204>
   17a7c:	1e6b      	subs	r3, r5, #1
   17a7e:	2b00      	cmp	r3, #0
   17a80:	d000      	beq.n	17a84 <__aeabi_dadd+0x54>
   17a82:	e137      	b.n	17cf4 <__aeabi_dadd+0x2c4>
   17a84:	1aba      	subs	r2, r7, r2
   17a86:	4297      	cmp	r7, r2
   17a88:	41bf      	sbcs	r7, r7
   17a8a:	1a64      	subs	r4, r4, r1
   17a8c:	427f      	negs	r7, r7
   17a8e:	1be4      	subs	r4, r4, r7
   17a90:	2601      	movs	r6, #1
   17a92:	0017      	movs	r7, r2
   17a94:	e024      	b.n	17ae0 <__aeabi_dadd+0xb0>
   17a96:	4bc6      	ldr	r3, [pc, #792]	; (17db0 <__aeabi_dadd+0x380>)
   17a98:	429e      	cmp	r6, r3
   17a9a:	d04d      	beq.n	17b38 <__aeabi_dadd+0x108>
   17a9c:	2380      	movs	r3, #128	; 0x80
   17a9e:	041b      	lsls	r3, r3, #16
   17aa0:	4319      	orrs	r1, r3
   17aa2:	2d38      	cmp	r5, #56	; 0x38
   17aa4:	dd00      	ble.n	17aa8 <__aeabi_dadd+0x78>
   17aa6:	e107      	b.n	17cb8 <__aeabi_dadd+0x288>
   17aa8:	2d1f      	cmp	r5, #31
   17aaa:	dd00      	ble.n	17aae <__aeabi_dadd+0x7e>
   17aac:	e138      	b.n	17d20 <__aeabi_dadd+0x2f0>
   17aae:	2020      	movs	r0, #32
   17ab0:	1b43      	subs	r3, r0, r5
   17ab2:	469a      	mov	sl, r3
   17ab4:	000b      	movs	r3, r1
   17ab6:	4650      	mov	r0, sl
   17ab8:	4083      	lsls	r3, r0
   17aba:	4699      	mov	r9, r3
   17abc:	0013      	movs	r3, r2
   17abe:	4648      	mov	r0, r9
   17ac0:	40eb      	lsrs	r3, r5
   17ac2:	4318      	orrs	r0, r3
   17ac4:	0003      	movs	r3, r0
   17ac6:	4650      	mov	r0, sl
   17ac8:	4082      	lsls	r2, r0
   17aca:	1e50      	subs	r0, r2, #1
   17acc:	4182      	sbcs	r2, r0
   17ace:	40e9      	lsrs	r1, r5
   17ad0:	431a      	orrs	r2, r3
   17ad2:	1aba      	subs	r2, r7, r2
   17ad4:	1a61      	subs	r1, r4, r1
   17ad6:	4297      	cmp	r7, r2
   17ad8:	41a4      	sbcs	r4, r4
   17ada:	0017      	movs	r7, r2
   17adc:	4264      	negs	r4, r4
   17ade:	1b0c      	subs	r4, r1, r4
   17ae0:	0223      	lsls	r3, r4, #8
   17ae2:	d562      	bpl.n	17baa <__aeabi_dadd+0x17a>
   17ae4:	0264      	lsls	r4, r4, #9
   17ae6:	0a65      	lsrs	r5, r4, #9
   17ae8:	2d00      	cmp	r5, #0
   17aea:	d100      	bne.n	17aee <__aeabi_dadd+0xbe>
   17aec:	e0df      	b.n	17cae <__aeabi_dadd+0x27e>
   17aee:	0028      	movs	r0, r5
   17af0:	f001 fd78 	bl	195e4 <__clzsi2>
   17af4:	0003      	movs	r3, r0
   17af6:	3b08      	subs	r3, #8
   17af8:	2b1f      	cmp	r3, #31
   17afa:	dd00      	ble.n	17afe <__aeabi_dadd+0xce>
   17afc:	e0d2      	b.n	17ca4 <__aeabi_dadd+0x274>
   17afe:	2220      	movs	r2, #32
   17b00:	003c      	movs	r4, r7
   17b02:	1ad2      	subs	r2, r2, r3
   17b04:	409d      	lsls	r5, r3
   17b06:	40d4      	lsrs	r4, r2
   17b08:	409f      	lsls	r7, r3
   17b0a:	4325      	orrs	r5, r4
   17b0c:	429e      	cmp	r6, r3
   17b0e:	dd00      	ble.n	17b12 <__aeabi_dadd+0xe2>
   17b10:	e0c4      	b.n	17c9c <__aeabi_dadd+0x26c>
   17b12:	1b9e      	subs	r6, r3, r6
   17b14:	1c73      	adds	r3, r6, #1
   17b16:	2b1f      	cmp	r3, #31
   17b18:	dd00      	ble.n	17b1c <__aeabi_dadd+0xec>
   17b1a:	e0f1      	b.n	17d00 <__aeabi_dadd+0x2d0>
   17b1c:	2220      	movs	r2, #32
   17b1e:	0038      	movs	r0, r7
   17b20:	0029      	movs	r1, r5
   17b22:	1ad2      	subs	r2, r2, r3
   17b24:	40d8      	lsrs	r0, r3
   17b26:	4091      	lsls	r1, r2
   17b28:	4097      	lsls	r7, r2
   17b2a:	002c      	movs	r4, r5
   17b2c:	4301      	orrs	r1, r0
   17b2e:	1e78      	subs	r0, r7, #1
   17b30:	4187      	sbcs	r7, r0
   17b32:	40dc      	lsrs	r4, r3
   17b34:	2600      	movs	r6, #0
   17b36:	430f      	orrs	r7, r1
   17b38:	077b      	lsls	r3, r7, #29
   17b3a:	d009      	beq.n	17b50 <__aeabi_dadd+0x120>
   17b3c:	230f      	movs	r3, #15
   17b3e:	403b      	ands	r3, r7
   17b40:	2b04      	cmp	r3, #4
   17b42:	d005      	beq.n	17b50 <__aeabi_dadd+0x120>
   17b44:	1d3b      	adds	r3, r7, #4
   17b46:	42bb      	cmp	r3, r7
   17b48:	41bf      	sbcs	r7, r7
   17b4a:	427f      	negs	r7, r7
   17b4c:	19e4      	adds	r4, r4, r7
   17b4e:	001f      	movs	r7, r3
   17b50:	0223      	lsls	r3, r4, #8
   17b52:	d52c      	bpl.n	17bae <__aeabi_dadd+0x17e>
   17b54:	4b96      	ldr	r3, [pc, #600]	; (17db0 <__aeabi_dadd+0x380>)
   17b56:	3601      	adds	r6, #1
   17b58:	429e      	cmp	r6, r3
   17b5a:	d100      	bne.n	17b5e <__aeabi_dadd+0x12e>
   17b5c:	e09a      	b.n	17c94 <__aeabi_dadd+0x264>
   17b5e:	4645      	mov	r5, r8
   17b60:	4b94      	ldr	r3, [pc, #592]	; (17db4 <__aeabi_dadd+0x384>)
   17b62:	08ff      	lsrs	r7, r7, #3
   17b64:	401c      	ands	r4, r3
   17b66:	0760      	lsls	r0, r4, #29
   17b68:	0576      	lsls	r6, r6, #21
   17b6a:	0264      	lsls	r4, r4, #9
   17b6c:	4307      	orrs	r7, r0
   17b6e:	0b24      	lsrs	r4, r4, #12
   17b70:	0d76      	lsrs	r6, r6, #21
   17b72:	2100      	movs	r1, #0
   17b74:	0324      	lsls	r4, r4, #12
   17b76:	0b23      	lsrs	r3, r4, #12
   17b78:	0d0c      	lsrs	r4, r1, #20
   17b7a:	4a8f      	ldr	r2, [pc, #572]	; (17db8 <__aeabi_dadd+0x388>)
   17b7c:	0524      	lsls	r4, r4, #20
   17b7e:	431c      	orrs	r4, r3
   17b80:	4014      	ands	r4, r2
   17b82:	0533      	lsls	r3, r6, #20
   17b84:	4323      	orrs	r3, r4
   17b86:	005b      	lsls	r3, r3, #1
   17b88:	07ed      	lsls	r5, r5, #31
   17b8a:	085b      	lsrs	r3, r3, #1
   17b8c:	432b      	orrs	r3, r5
   17b8e:	0038      	movs	r0, r7
   17b90:	0019      	movs	r1, r3
   17b92:	bc3c      	pop	{r2, r3, r4, r5}
   17b94:	4690      	mov	r8, r2
   17b96:	4699      	mov	r9, r3
   17b98:	46a2      	mov	sl, r4
   17b9a:	46ab      	mov	fp, r5
   17b9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   17b9e:	4664      	mov	r4, ip
   17ba0:	4304      	orrs	r4, r0
   17ba2:	d100      	bne.n	17ba6 <__aeabi_dadd+0x176>
   17ba4:	e211      	b.n	17fca <__aeabi_dadd+0x59a>
   17ba6:	0004      	movs	r4, r0
   17ba8:	4667      	mov	r7, ip
   17baa:	077b      	lsls	r3, r7, #29
   17bac:	d1c6      	bne.n	17b3c <__aeabi_dadd+0x10c>
   17bae:	4645      	mov	r5, r8
   17bb0:	0760      	lsls	r0, r4, #29
   17bb2:	08ff      	lsrs	r7, r7, #3
   17bb4:	4307      	orrs	r7, r0
   17bb6:	08e4      	lsrs	r4, r4, #3
   17bb8:	4b7d      	ldr	r3, [pc, #500]	; (17db0 <__aeabi_dadd+0x380>)
   17bba:	429e      	cmp	r6, r3
   17bbc:	d030      	beq.n	17c20 <__aeabi_dadd+0x1f0>
   17bbe:	0324      	lsls	r4, r4, #12
   17bc0:	0576      	lsls	r6, r6, #21
   17bc2:	0b24      	lsrs	r4, r4, #12
   17bc4:	0d76      	lsrs	r6, r6, #21
   17bc6:	e7d4      	b.n	17b72 <__aeabi_dadd+0x142>
   17bc8:	1a33      	subs	r3, r6, r0
   17bca:	469a      	mov	sl, r3
   17bcc:	2b00      	cmp	r3, #0
   17bce:	dd78      	ble.n	17cc2 <__aeabi_dadd+0x292>
   17bd0:	2800      	cmp	r0, #0
   17bd2:	d031      	beq.n	17c38 <__aeabi_dadd+0x208>
   17bd4:	4876      	ldr	r0, [pc, #472]	; (17db0 <__aeabi_dadd+0x380>)
   17bd6:	4286      	cmp	r6, r0
   17bd8:	d0ae      	beq.n	17b38 <__aeabi_dadd+0x108>
   17bda:	2080      	movs	r0, #128	; 0x80
   17bdc:	0400      	lsls	r0, r0, #16
   17bde:	4301      	orrs	r1, r0
   17be0:	4653      	mov	r3, sl
   17be2:	2b38      	cmp	r3, #56	; 0x38
   17be4:	dc00      	bgt.n	17be8 <__aeabi_dadd+0x1b8>
   17be6:	e0e9      	b.n	17dbc <__aeabi_dadd+0x38c>
   17be8:	430a      	orrs	r2, r1
   17bea:	1e51      	subs	r1, r2, #1
   17bec:	418a      	sbcs	r2, r1
   17bee:	2100      	movs	r1, #0
   17bf0:	19d2      	adds	r2, r2, r7
   17bf2:	42ba      	cmp	r2, r7
   17bf4:	41bf      	sbcs	r7, r7
   17bf6:	1909      	adds	r1, r1, r4
   17bf8:	427c      	negs	r4, r7
   17bfa:	0017      	movs	r7, r2
   17bfc:	190c      	adds	r4, r1, r4
   17bfe:	0223      	lsls	r3, r4, #8
   17c00:	d5d3      	bpl.n	17baa <__aeabi_dadd+0x17a>
   17c02:	4b6b      	ldr	r3, [pc, #428]	; (17db0 <__aeabi_dadd+0x380>)
   17c04:	3601      	adds	r6, #1
   17c06:	429e      	cmp	r6, r3
   17c08:	d100      	bne.n	17c0c <__aeabi_dadd+0x1dc>
   17c0a:	e13a      	b.n	17e82 <__aeabi_dadd+0x452>
   17c0c:	2001      	movs	r0, #1
   17c0e:	4b69      	ldr	r3, [pc, #420]	; (17db4 <__aeabi_dadd+0x384>)
   17c10:	401c      	ands	r4, r3
   17c12:	087b      	lsrs	r3, r7, #1
   17c14:	4007      	ands	r7, r0
   17c16:	431f      	orrs	r7, r3
   17c18:	07e0      	lsls	r0, r4, #31
   17c1a:	4307      	orrs	r7, r0
   17c1c:	0864      	lsrs	r4, r4, #1
   17c1e:	e78b      	b.n	17b38 <__aeabi_dadd+0x108>
   17c20:	0023      	movs	r3, r4
   17c22:	433b      	orrs	r3, r7
   17c24:	d100      	bne.n	17c28 <__aeabi_dadd+0x1f8>
   17c26:	e1cb      	b.n	17fc0 <__aeabi_dadd+0x590>
   17c28:	2280      	movs	r2, #128	; 0x80
   17c2a:	0312      	lsls	r2, r2, #12
   17c2c:	4314      	orrs	r4, r2
   17c2e:	0324      	lsls	r4, r4, #12
   17c30:	0b24      	lsrs	r4, r4, #12
   17c32:	e79e      	b.n	17b72 <__aeabi_dadd+0x142>
   17c34:	002e      	movs	r6, r5
   17c36:	e77f      	b.n	17b38 <__aeabi_dadd+0x108>
   17c38:	0008      	movs	r0, r1
   17c3a:	4310      	orrs	r0, r2
   17c3c:	d100      	bne.n	17c40 <__aeabi_dadd+0x210>
   17c3e:	e0b4      	b.n	17daa <__aeabi_dadd+0x37a>
   17c40:	1e58      	subs	r0, r3, #1
   17c42:	2800      	cmp	r0, #0
   17c44:	d000      	beq.n	17c48 <__aeabi_dadd+0x218>
   17c46:	e0de      	b.n	17e06 <__aeabi_dadd+0x3d6>
   17c48:	18ba      	adds	r2, r7, r2
   17c4a:	42ba      	cmp	r2, r7
   17c4c:	419b      	sbcs	r3, r3
   17c4e:	1864      	adds	r4, r4, r1
   17c50:	425b      	negs	r3, r3
   17c52:	18e4      	adds	r4, r4, r3
   17c54:	0017      	movs	r7, r2
   17c56:	2601      	movs	r6, #1
   17c58:	0223      	lsls	r3, r4, #8
   17c5a:	d5a6      	bpl.n	17baa <__aeabi_dadd+0x17a>
   17c5c:	2602      	movs	r6, #2
   17c5e:	e7d5      	b.n	17c0c <__aeabi_dadd+0x1dc>
   17c60:	2d00      	cmp	r5, #0
   17c62:	d16e      	bne.n	17d42 <__aeabi_dadd+0x312>
   17c64:	1c70      	adds	r0, r6, #1
   17c66:	0540      	lsls	r0, r0, #21
   17c68:	0d40      	lsrs	r0, r0, #21
   17c6a:	2801      	cmp	r0, #1
   17c6c:	dc00      	bgt.n	17c70 <__aeabi_dadd+0x240>
   17c6e:	e0f9      	b.n	17e64 <__aeabi_dadd+0x434>
   17c70:	1ab8      	subs	r0, r7, r2
   17c72:	4684      	mov	ip, r0
   17c74:	4287      	cmp	r7, r0
   17c76:	4180      	sbcs	r0, r0
   17c78:	1ae5      	subs	r5, r4, r3
   17c7a:	4240      	negs	r0, r0
   17c7c:	1a2d      	subs	r5, r5, r0
   17c7e:	0228      	lsls	r0, r5, #8
   17c80:	d400      	bmi.n	17c84 <__aeabi_dadd+0x254>
   17c82:	e089      	b.n	17d98 <__aeabi_dadd+0x368>
   17c84:	1bd7      	subs	r7, r2, r7
   17c86:	42ba      	cmp	r2, r7
   17c88:	4192      	sbcs	r2, r2
   17c8a:	1b1c      	subs	r4, r3, r4
   17c8c:	4252      	negs	r2, r2
   17c8e:	1aa5      	subs	r5, r4, r2
   17c90:	46d8      	mov	r8, fp
   17c92:	e729      	b.n	17ae8 <__aeabi_dadd+0xb8>
   17c94:	4645      	mov	r5, r8
   17c96:	2400      	movs	r4, #0
   17c98:	2700      	movs	r7, #0
   17c9a:	e76a      	b.n	17b72 <__aeabi_dadd+0x142>
   17c9c:	4c45      	ldr	r4, [pc, #276]	; (17db4 <__aeabi_dadd+0x384>)
   17c9e:	1af6      	subs	r6, r6, r3
   17ca0:	402c      	ands	r4, r5
   17ca2:	e749      	b.n	17b38 <__aeabi_dadd+0x108>
   17ca4:	003d      	movs	r5, r7
   17ca6:	3828      	subs	r0, #40	; 0x28
   17ca8:	4085      	lsls	r5, r0
   17caa:	2700      	movs	r7, #0
   17cac:	e72e      	b.n	17b0c <__aeabi_dadd+0xdc>
   17cae:	0038      	movs	r0, r7
   17cb0:	f001 fc98 	bl	195e4 <__clzsi2>
   17cb4:	3020      	adds	r0, #32
   17cb6:	e71d      	b.n	17af4 <__aeabi_dadd+0xc4>
   17cb8:	430a      	orrs	r2, r1
   17cba:	1e51      	subs	r1, r2, #1
   17cbc:	418a      	sbcs	r2, r1
   17cbe:	2100      	movs	r1, #0
   17cc0:	e707      	b.n	17ad2 <__aeabi_dadd+0xa2>
   17cc2:	2b00      	cmp	r3, #0
   17cc4:	d000      	beq.n	17cc8 <__aeabi_dadd+0x298>
   17cc6:	e0f3      	b.n	17eb0 <__aeabi_dadd+0x480>
   17cc8:	1c70      	adds	r0, r6, #1
   17cca:	0543      	lsls	r3, r0, #21
   17ccc:	0d5b      	lsrs	r3, r3, #21
   17cce:	2b01      	cmp	r3, #1
   17cd0:	dc00      	bgt.n	17cd4 <__aeabi_dadd+0x2a4>
   17cd2:	e0ad      	b.n	17e30 <__aeabi_dadd+0x400>
   17cd4:	4b36      	ldr	r3, [pc, #216]	; (17db0 <__aeabi_dadd+0x380>)
   17cd6:	4298      	cmp	r0, r3
   17cd8:	d100      	bne.n	17cdc <__aeabi_dadd+0x2ac>
   17cda:	e0d1      	b.n	17e80 <__aeabi_dadd+0x450>
   17cdc:	18ba      	adds	r2, r7, r2
   17cde:	42ba      	cmp	r2, r7
   17ce0:	41bf      	sbcs	r7, r7
   17ce2:	1864      	adds	r4, r4, r1
   17ce4:	427f      	negs	r7, r7
   17ce6:	19e4      	adds	r4, r4, r7
   17ce8:	07e7      	lsls	r7, r4, #31
   17cea:	0852      	lsrs	r2, r2, #1
   17cec:	4317      	orrs	r7, r2
   17cee:	0864      	lsrs	r4, r4, #1
   17cf0:	0006      	movs	r6, r0
   17cf2:	e721      	b.n	17b38 <__aeabi_dadd+0x108>
   17cf4:	482e      	ldr	r0, [pc, #184]	; (17db0 <__aeabi_dadd+0x380>)
   17cf6:	4285      	cmp	r5, r0
   17cf8:	d100      	bne.n	17cfc <__aeabi_dadd+0x2cc>
   17cfa:	e093      	b.n	17e24 <__aeabi_dadd+0x3f4>
   17cfc:	001d      	movs	r5, r3
   17cfe:	e6d0      	b.n	17aa2 <__aeabi_dadd+0x72>
   17d00:	0029      	movs	r1, r5
   17d02:	3e1f      	subs	r6, #31
   17d04:	40f1      	lsrs	r1, r6
   17d06:	2b20      	cmp	r3, #32
   17d08:	d100      	bne.n	17d0c <__aeabi_dadd+0x2dc>
   17d0a:	e08d      	b.n	17e28 <__aeabi_dadd+0x3f8>
   17d0c:	2240      	movs	r2, #64	; 0x40
   17d0e:	1ad3      	subs	r3, r2, r3
   17d10:	409d      	lsls	r5, r3
   17d12:	432f      	orrs	r7, r5
   17d14:	1e7d      	subs	r5, r7, #1
   17d16:	41af      	sbcs	r7, r5
   17d18:	2400      	movs	r4, #0
   17d1a:	430f      	orrs	r7, r1
   17d1c:	2600      	movs	r6, #0
   17d1e:	e744      	b.n	17baa <__aeabi_dadd+0x17a>
   17d20:	002b      	movs	r3, r5
   17d22:	0008      	movs	r0, r1
   17d24:	3b20      	subs	r3, #32
   17d26:	40d8      	lsrs	r0, r3
   17d28:	0003      	movs	r3, r0
   17d2a:	2d20      	cmp	r5, #32
   17d2c:	d100      	bne.n	17d30 <__aeabi_dadd+0x300>
   17d2e:	e07d      	b.n	17e2c <__aeabi_dadd+0x3fc>
   17d30:	2040      	movs	r0, #64	; 0x40
   17d32:	1b45      	subs	r5, r0, r5
   17d34:	40a9      	lsls	r1, r5
   17d36:	430a      	orrs	r2, r1
   17d38:	1e51      	subs	r1, r2, #1
   17d3a:	418a      	sbcs	r2, r1
   17d3c:	2100      	movs	r1, #0
   17d3e:	431a      	orrs	r2, r3
   17d40:	e6c7      	b.n	17ad2 <__aeabi_dadd+0xa2>
   17d42:	2e00      	cmp	r6, #0
   17d44:	d050      	beq.n	17de8 <__aeabi_dadd+0x3b8>
   17d46:	4e1a      	ldr	r6, [pc, #104]	; (17db0 <__aeabi_dadd+0x380>)
   17d48:	42b0      	cmp	r0, r6
   17d4a:	d057      	beq.n	17dfc <__aeabi_dadd+0x3cc>
   17d4c:	2680      	movs	r6, #128	; 0x80
   17d4e:	426b      	negs	r3, r5
   17d50:	4699      	mov	r9, r3
   17d52:	0436      	lsls	r6, r6, #16
   17d54:	4334      	orrs	r4, r6
   17d56:	464b      	mov	r3, r9
   17d58:	2b38      	cmp	r3, #56	; 0x38
   17d5a:	dd00      	ble.n	17d5e <__aeabi_dadd+0x32e>
   17d5c:	e0d6      	b.n	17f0c <__aeabi_dadd+0x4dc>
   17d5e:	2b1f      	cmp	r3, #31
   17d60:	dd00      	ble.n	17d64 <__aeabi_dadd+0x334>
   17d62:	e135      	b.n	17fd0 <__aeabi_dadd+0x5a0>
   17d64:	2620      	movs	r6, #32
   17d66:	1af5      	subs	r5, r6, r3
   17d68:	0026      	movs	r6, r4
   17d6a:	40ae      	lsls	r6, r5
   17d6c:	46b2      	mov	sl, r6
   17d6e:	003e      	movs	r6, r7
   17d70:	40de      	lsrs	r6, r3
   17d72:	46ac      	mov	ip, r5
   17d74:	0035      	movs	r5, r6
   17d76:	4656      	mov	r6, sl
   17d78:	432e      	orrs	r6, r5
   17d7a:	4665      	mov	r5, ip
   17d7c:	40af      	lsls	r7, r5
   17d7e:	1e7d      	subs	r5, r7, #1
   17d80:	41af      	sbcs	r7, r5
   17d82:	40dc      	lsrs	r4, r3
   17d84:	4337      	orrs	r7, r6
   17d86:	1bd7      	subs	r7, r2, r7
   17d88:	42ba      	cmp	r2, r7
   17d8a:	4192      	sbcs	r2, r2
   17d8c:	1b0c      	subs	r4, r1, r4
   17d8e:	4252      	negs	r2, r2
   17d90:	1aa4      	subs	r4, r4, r2
   17d92:	0006      	movs	r6, r0
   17d94:	46d8      	mov	r8, fp
   17d96:	e6a3      	b.n	17ae0 <__aeabi_dadd+0xb0>
   17d98:	4664      	mov	r4, ip
   17d9a:	4667      	mov	r7, ip
   17d9c:	432c      	orrs	r4, r5
   17d9e:	d000      	beq.n	17da2 <__aeabi_dadd+0x372>
   17da0:	e6a2      	b.n	17ae8 <__aeabi_dadd+0xb8>
   17da2:	2500      	movs	r5, #0
   17da4:	2600      	movs	r6, #0
   17da6:	2700      	movs	r7, #0
   17da8:	e706      	b.n	17bb8 <__aeabi_dadd+0x188>
   17daa:	001e      	movs	r6, r3
   17dac:	e6c4      	b.n	17b38 <__aeabi_dadd+0x108>
   17dae:	46c0      	nop			; (mov r8, r8)
   17db0:	000007ff 	.word	0x000007ff
   17db4:	ff7fffff 	.word	0xff7fffff
   17db8:	800fffff 	.word	0x800fffff
   17dbc:	2b1f      	cmp	r3, #31
   17dbe:	dc63      	bgt.n	17e88 <__aeabi_dadd+0x458>
   17dc0:	2020      	movs	r0, #32
   17dc2:	1ac3      	subs	r3, r0, r3
   17dc4:	0008      	movs	r0, r1
   17dc6:	4098      	lsls	r0, r3
   17dc8:	469c      	mov	ip, r3
   17dca:	4683      	mov	fp, r0
   17dcc:	4653      	mov	r3, sl
   17dce:	0010      	movs	r0, r2
   17dd0:	40d8      	lsrs	r0, r3
   17dd2:	0003      	movs	r3, r0
   17dd4:	4658      	mov	r0, fp
   17dd6:	4318      	orrs	r0, r3
   17dd8:	4663      	mov	r3, ip
   17dda:	409a      	lsls	r2, r3
   17ddc:	1e53      	subs	r3, r2, #1
   17dde:	419a      	sbcs	r2, r3
   17de0:	4653      	mov	r3, sl
   17de2:	4302      	orrs	r2, r0
   17de4:	40d9      	lsrs	r1, r3
   17de6:	e703      	b.n	17bf0 <__aeabi_dadd+0x1c0>
   17de8:	0026      	movs	r6, r4
   17dea:	433e      	orrs	r6, r7
   17dec:	d006      	beq.n	17dfc <__aeabi_dadd+0x3cc>
   17dee:	43eb      	mvns	r3, r5
   17df0:	4699      	mov	r9, r3
   17df2:	2b00      	cmp	r3, #0
   17df4:	d0c7      	beq.n	17d86 <__aeabi_dadd+0x356>
   17df6:	4e94      	ldr	r6, [pc, #592]	; (18048 <__aeabi_dadd+0x618>)
   17df8:	42b0      	cmp	r0, r6
   17dfa:	d1ac      	bne.n	17d56 <__aeabi_dadd+0x326>
   17dfc:	000c      	movs	r4, r1
   17dfe:	0017      	movs	r7, r2
   17e00:	0006      	movs	r6, r0
   17e02:	46d8      	mov	r8, fp
   17e04:	e698      	b.n	17b38 <__aeabi_dadd+0x108>
   17e06:	4b90      	ldr	r3, [pc, #576]	; (18048 <__aeabi_dadd+0x618>)
   17e08:	459a      	cmp	sl, r3
   17e0a:	d00b      	beq.n	17e24 <__aeabi_dadd+0x3f4>
   17e0c:	4682      	mov	sl, r0
   17e0e:	e6e7      	b.n	17be0 <__aeabi_dadd+0x1b0>
   17e10:	2800      	cmp	r0, #0
   17e12:	d000      	beq.n	17e16 <__aeabi_dadd+0x3e6>
   17e14:	e09e      	b.n	17f54 <__aeabi_dadd+0x524>
   17e16:	0018      	movs	r0, r3
   17e18:	4310      	orrs	r0, r2
   17e1a:	d100      	bne.n	17e1e <__aeabi_dadd+0x3ee>
   17e1c:	e0e9      	b.n	17ff2 <__aeabi_dadd+0x5c2>
   17e1e:	001c      	movs	r4, r3
   17e20:	0017      	movs	r7, r2
   17e22:	46d8      	mov	r8, fp
   17e24:	4e88      	ldr	r6, [pc, #544]	; (18048 <__aeabi_dadd+0x618>)
   17e26:	e687      	b.n	17b38 <__aeabi_dadd+0x108>
   17e28:	2500      	movs	r5, #0
   17e2a:	e772      	b.n	17d12 <__aeabi_dadd+0x2e2>
   17e2c:	2100      	movs	r1, #0
   17e2e:	e782      	b.n	17d36 <__aeabi_dadd+0x306>
   17e30:	0023      	movs	r3, r4
   17e32:	433b      	orrs	r3, r7
   17e34:	2e00      	cmp	r6, #0
   17e36:	d000      	beq.n	17e3a <__aeabi_dadd+0x40a>
   17e38:	e0ab      	b.n	17f92 <__aeabi_dadd+0x562>
   17e3a:	2b00      	cmp	r3, #0
   17e3c:	d100      	bne.n	17e40 <__aeabi_dadd+0x410>
   17e3e:	e0e7      	b.n	18010 <__aeabi_dadd+0x5e0>
   17e40:	000b      	movs	r3, r1
   17e42:	4313      	orrs	r3, r2
   17e44:	d100      	bne.n	17e48 <__aeabi_dadd+0x418>
   17e46:	e677      	b.n	17b38 <__aeabi_dadd+0x108>
   17e48:	18ba      	adds	r2, r7, r2
   17e4a:	42ba      	cmp	r2, r7
   17e4c:	41bf      	sbcs	r7, r7
   17e4e:	1864      	adds	r4, r4, r1
   17e50:	427f      	negs	r7, r7
   17e52:	19e4      	adds	r4, r4, r7
   17e54:	0223      	lsls	r3, r4, #8
   17e56:	d400      	bmi.n	17e5a <__aeabi_dadd+0x42a>
   17e58:	e0f2      	b.n	18040 <__aeabi_dadd+0x610>
   17e5a:	4b7c      	ldr	r3, [pc, #496]	; (1804c <__aeabi_dadd+0x61c>)
   17e5c:	0017      	movs	r7, r2
   17e5e:	401c      	ands	r4, r3
   17e60:	0006      	movs	r6, r0
   17e62:	e669      	b.n	17b38 <__aeabi_dadd+0x108>
   17e64:	0020      	movs	r0, r4
   17e66:	4338      	orrs	r0, r7
   17e68:	2e00      	cmp	r6, #0
   17e6a:	d1d1      	bne.n	17e10 <__aeabi_dadd+0x3e0>
   17e6c:	2800      	cmp	r0, #0
   17e6e:	d15b      	bne.n	17f28 <__aeabi_dadd+0x4f8>
   17e70:	001c      	movs	r4, r3
   17e72:	4314      	orrs	r4, r2
   17e74:	d100      	bne.n	17e78 <__aeabi_dadd+0x448>
   17e76:	e0a8      	b.n	17fca <__aeabi_dadd+0x59a>
   17e78:	001c      	movs	r4, r3
   17e7a:	0017      	movs	r7, r2
   17e7c:	46d8      	mov	r8, fp
   17e7e:	e65b      	b.n	17b38 <__aeabi_dadd+0x108>
   17e80:	0006      	movs	r6, r0
   17e82:	2400      	movs	r4, #0
   17e84:	2700      	movs	r7, #0
   17e86:	e697      	b.n	17bb8 <__aeabi_dadd+0x188>
   17e88:	4650      	mov	r0, sl
   17e8a:	000b      	movs	r3, r1
   17e8c:	3820      	subs	r0, #32
   17e8e:	40c3      	lsrs	r3, r0
   17e90:	4699      	mov	r9, r3
   17e92:	4653      	mov	r3, sl
   17e94:	2b20      	cmp	r3, #32
   17e96:	d100      	bne.n	17e9a <__aeabi_dadd+0x46a>
   17e98:	e095      	b.n	17fc6 <__aeabi_dadd+0x596>
   17e9a:	2340      	movs	r3, #64	; 0x40
   17e9c:	4650      	mov	r0, sl
   17e9e:	1a1b      	subs	r3, r3, r0
   17ea0:	4099      	lsls	r1, r3
   17ea2:	430a      	orrs	r2, r1
   17ea4:	1e51      	subs	r1, r2, #1
   17ea6:	418a      	sbcs	r2, r1
   17ea8:	464b      	mov	r3, r9
   17eaa:	2100      	movs	r1, #0
   17eac:	431a      	orrs	r2, r3
   17eae:	e69f      	b.n	17bf0 <__aeabi_dadd+0x1c0>
   17eb0:	2e00      	cmp	r6, #0
   17eb2:	d130      	bne.n	17f16 <__aeabi_dadd+0x4e6>
   17eb4:	0026      	movs	r6, r4
   17eb6:	433e      	orrs	r6, r7
   17eb8:	d067      	beq.n	17f8a <__aeabi_dadd+0x55a>
   17eba:	43db      	mvns	r3, r3
   17ebc:	469a      	mov	sl, r3
   17ebe:	2b00      	cmp	r3, #0
   17ec0:	d01c      	beq.n	17efc <__aeabi_dadd+0x4cc>
   17ec2:	4e61      	ldr	r6, [pc, #388]	; (18048 <__aeabi_dadd+0x618>)
   17ec4:	42b0      	cmp	r0, r6
   17ec6:	d060      	beq.n	17f8a <__aeabi_dadd+0x55a>
   17ec8:	4653      	mov	r3, sl
   17eca:	2b38      	cmp	r3, #56	; 0x38
   17ecc:	dd00      	ble.n	17ed0 <__aeabi_dadd+0x4a0>
   17ece:	e096      	b.n	17ffe <__aeabi_dadd+0x5ce>
   17ed0:	2b1f      	cmp	r3, #31
   17ed2:	dd00      	ble.n	17ed6 <__aeabi_dadd+0x4a6>
   17ed4:	e09f      	b.n	18016 <__aeabi_dadd+0x5e6>
   17ed6:	2620      	movs	r6, #32
   17ed8:	1af3      	subs	r3, r6, r3
   17eda:	0026      	movs	r6, r4
   17edc:	409e      	lsls	r6, r3
   17ede:	469c      	mov	ip, r3
   17ee0:	46b3      	mov	fp, r6
   17ee2:	4653      	mov	r3, sl
   17ee4:	003e      	movs	r6, r7
   17ee6:	40de      	lsrs	r6, r3
   17ee8:	0033      	movs	r3, r6
   17eea:	465e      	mov	r6, fp
   17eec:	431e      	orrs	r6, r3
   17eee:	4663      	mov	r3, ip
   17ef0:	409f      	lsls	r7, r3
   17ef2:	1e7b      	subs	r3, r7, #1
   17ef4:	419f      	sbcs	r7, r3
   17ef6:	4653      	mov	r3, sl
   17ef8:	40dc      	lsrs	r4, r3
   17efa:	4337      	orrs	r7, r6
   17efc:	18bf      	adds	r7, r7, r2
   17efe:	4297      	cmp	r7, r2
   17f00:	4192      	sbcs	r2, r2
   17f02:	1864      	adds	r4, r4, r1
   17f04:	4252      	negs	r2, r2
   17f06:	18a4      	adds	r4, r4, r2
   17f08:	0006      	movs	r6, r0
   17f0a:	e678      	b.n	17bfe <__aeabi_dadd+0x1ce>
   17f0c:	4327      	orrs	r7, r4
   17f0e:	1e7c      	subs	r4, r7, #1
   17f10:	41a7      	sbcs	r7, r4
   17f12:	2400      	movs	r4, #0
   17f14:	e737      	b.n	17d86 <__aeabi_dadd+0x356>
   17f16:	4e4c      	ldr	r6, [pc, #304]	; (18048 <__aeabi_dadd+0x618>)
   17f18:	42b0      	cmp	r0, r6
   17f1a:	d036      	beq.n	17f8a <__aeabi_dadd+0x55a>
   17f1c:	2680      	movs	r6, #128	; 0x80
   17f1e:	425b      	negs	r3, r3
   17f20:	0436      	lsls	r6, r6, #16
   17f22:	469a      	mov	sl, r3
   17f24:	4334      	orrs	r4, r6
   17f26:	e7cf      	b.n	17ec8 <__aeabi_dadd+0x498>
   17f28:	0018      	movs	r0, r3
   17f2a:	4310      	orrs	r0, r2
   17f2c:	d100      	bne.n	17f30 <__aeabi_dadd+0x500>
   17f2e:	e603      	b.n	17b38 <__aeabi_dadd+0x108>
   17f30:	1ab8      	subs	r0, r7, r2
   17f32:	4684      	mov	ip, r0
   17f34:	4567      	cmp	r7, ip
   17f36:	41ad      	sbcs	r5, r5
   17f38:	1ae0      	subs	r0, r4, r3
   17f3a:	426d      	negs	r5, r5
   17f3c:	1b40      	subs	r0, r0, r5
   17f3e:	0205      	lsls	r5, r0, #8
   17f40:	d400      	bmi.n	17f44 <__aeabi_dadd+0x514>
   17f42:	e62c      	b.n	17b9e <__aeabi_dadd+0x16e>
   17f44:	1bd7      	subs	r7, r2, r7
   17f46:	42ba      	cmp	r2, r7
   17f48:	4192      	sbcs	r2, r2
   17f4a:	1b1c      	subs	r4, r3, r4
   17f4c:	4252      	negs	r2, r2
   17f4e:	1aa4      	subs	r4, r4, r2
   17f50:	46d8      	mov	r8, fp
   17f52:	e5f1      	b.n	17b38 <__aeabi_dadd+0x108>
   17f54:	0018      	movs	r0, r3
   17f56:	4310      	orrs	r0, r2
   17f58:	d100      	bne.n	17f5c <__aeabi_dadd+0x52c>
   17f5a:	e763      	b.n	17e24 <__aeabi_dadd+0x3f4>
   17f5c:	08f8      	lsrs	r0, r7, #3
   17f5e:	0767      	lsls	r7, r4, #29
   17f60:	4307      	orrs	r7, r0
   17f62:	2080      	movs	r0, #128	; 0x80
   17f64:	08e4      	lsrs	r4, r4, #3
   17f66:	0300      	lsls	r0, r0, #12
   17f68:	4204      	tst	r4, r0
   17f6a:	d008      	beq.n	17f7e <__aeabi_dadd+0x54e>
   17f6c:	08dd      	lsrs	r5, r3, #3
   17f6e:	4205      	tst	r5, r0
   17f70:	d105      	bne.n	17f7e <__aeabi_dadd+0x54e>
   17f72:	08d2      	lsrs	r2, r2, #3
   17f74:	0759      	lsls	r1, r3, #29
   17f76:	4311      	orrs	r1, r2
   17f78:	000f      	movs	r7, r1
   17f7a:	002c      	movs	r4, r5
   17f7c:	46d8      	mov	r8, fp
   17f7e:	0f7b      	lsrs	r3, r7, #29
   17f80:	00e4      	lsls	r4, r4, #3
   17f82:	431c      	orrs	r4, r3
   17f84:	00ff      	lsls	r7, r7, #3
   17f86:	4e30      	ldr	r6, [pc, #192]	; (18048 <__aeabi_dadd+0x618>)
   17f88:	e5d6      	b.n	17b38 <__aeabi_dadd+0x108>
   17f8a:	000c      	movs	r4, r1
   17f8c:	0017      	movs	r7, r2
   17f8e:	0006      	movs	r6, r0
   17f90:	e5d2      	b.n	17b38 <__aeabi_dadd+0x108>
   17f92:	2b00      	cmp	r3, #0
   17f94:	d038      	beq.n	18008 <__aeabi_dadd+0x5d8>
   17f96:	000b      	movs	r3, r1
   17f98:	4313      	orrs	r3, r2
   17f9a:	d100      	bne.n	17f9e <__aeabi_dadd+0x56e>
   17f9c:	e742      	b.n	17e24 <__aeabi_dadd+0x3f4>
   17f9e:	08f8      	lsrs	r0, r7, #3
   17fa0:	0767      	lsls	r7, r4, #29
   17fa2:	4307      	orrs	r7, r0
   17fa4:	2080      	movs	r0, #128	; 0x80
   17fa6:	08e4      	lsrs	r4, r4, #3
   17fa8:	0300      	lsls	r0, r0, #12
   17faa:	4204      	tst	r4, r0
   17fac:	d0e7      	beq.n	17f7e <__aeabi_dadd+0x54e>
   17fae:	08cb      	lsrs	r3, r1, #3
   17fb0:	4203      	tst	r3, r0
   17fb2:	d1e4      	bne.n	17f7e <__aeabi_dadd+0x54e>
   17fb4:	08d2      	lsrs	r2, r2, #3
   17fb6:	0749      	lsls	r1, r1, #29
   17fb8:	4311      	orrs	r1, r2
   17fba:	000f      	movs	r7, r1
   17fbc:	001c      	movs	r4, r3
   17fbe:	e7de      	b.n	17f7e <__aeabi_dadd+0x54e>
   17fc0:	2700      	movs	r7, #0
   17fc2:	2400      	movs	r4, #0
   17fc4:	e5d5      	b.n	17b72 <__aeabi_dadd+0x142>
   17fc6:	2100      	movs	r1, #0
   17fc8:	e76b      	b.n	17ea2 <__aeabi_dadd+0x472>
   17fca:	2500      	movs	r5, #0
   17fcc:	2700      	movs	r7, #0
   17fce:	e5f3      	b.n	17bb8 <__aeabi_dadd+0x188>
   17fd0:	464e      	mov	r6, r9
   17fd2:	0025      	movs	r5, r4
   17fd4:	3e20      	subs	r6, #32
   17fd6:	40f5      	lsrs	r5, r6
   17fd8:	464b      	mov	r3, r9
   17fda:	002e      	movs	r6, r5
   17fdc:	2b20      	cmp	r3, #32
   17fde:	d02d      	beq.n	1803c <__aeabi_dadd+0x60c>
   17fe0:	2540      	movs	r5, #64	; 0x40
   17fe2:	1aed      	subs	r5, r5, r3
   17fe4:	40ac      	lsls	r4, r5
   17fe6:	4327      	orrs	r7, r4
   17fe8:	1e7c      	subs	r4, r7, #1
   17fea:	41a7      	sbcs	r7, r4
   17fec:	2400      	movs	r4, #0
   17fee:	4337      	orrs	r7, r6
   17ff0:	e6c9      	b.n	17d86 <__aeabi_dadd+0x356>
   17ff2:	2480      	movs	r4, #128	; 0x80
   17ff4:	2500      	movs	r5, #0
   17ff6:	0324      	lsls	r4, r4, #12
   17ff8:	4e13      	ldr	r6, [pc, #76]	; (18048 <__aeabi_dadd+0x618>)
   17ffa:	2700      	movs	r7, #0
   17ffc:	e5dc      	b.n	17bb8 <__aeabi_dadd+0x188>
   17ffe:	4327      	orrs	r7, r4
   18000:	1e7c      	subs	r4, r7, #1
   18002:	41a7      	sbcs	r7, r4
   18004:	2400      	movs	r4, #0
   18006:	e779      	b.n	17efc <__aeabi_dadd+0x4cc>
   18008:	000c      	movs	r4, r1
   1800a:	0017      	movs	r7, r2
   1800c:	4e0e      	ldr	r6, [pc, #56]	; (18048 <__aeabi_dadd+0x618>)
   1800e:	e593      	b.n	17b38 <__aeabi_dadd+0x108>
   18010:	000c      	movs	r4, r1
   18012:	0017      	movs	r7, r2
   18014:	e590      	b.n	17b38 <__aeabi_dadd+0x108>
   18016:	4656      	mov	r6, sl
   18018:	0023      	movs	r3, r4
   1801a:	3e20      	subs	r6, #32
   1801c:	40f3      	lsrs	r3, r6
   1801e:	4699      	mov	r9, r3
   18020:	4653      	mov	r3, sl
   18022:	2b20      	cmp	r3, #32
   18024:	d00e      	beq.n	18044 <__aeabi_dadd+0x614>
   18026:	2340      	movs	r3, #64	; 0x40
   18028:	4656      	mov	r6, sl
   1802a:	1b9b      	subs	r3, r3, r6
   1802c:	409c      	lsls	r4, r3
   1802e:	4327      	orrs	r7, r4
   18030:	1e7c      	subs	r4, r7, #1
   18032:	41a7      	sbcs	r7, r4
   18034:	464b      	mov	r3, r9
   18036:	2400      	movs	r4, #0
   18038:	431f      	orrs	r7, r3
   1803a:	e75f      	b.n	17efc <__aeabi_dadd+0x4cc>
   1803c:	2400      	movs	r4, #0
   1803e:	e7d2      	b.n	17fe6 <__aeabi_dadd+0x5b6>
   18040:	0017      	movs	r7, r2
   18042:	e5b2      	b.n	17baa <__aeabi_dadd+0x17a>
   18044:	2400      	movs	r4, #0
   18046:	e7f2      	b.n	1802e <__aeabi_dadd+0x5fe>
   18048:	000007ff 	.word	0x000007ff
   1804c:	ff7fffff 	.word	0xff7fffff

00018050 <__aeabi_ddiv>:
   18050:	b5f0      	push	{r4, r5, r6, r7, lr}
   18052:	4657      	mov	r7, sl
   18054:	4645      	mov	r5, r8
   18056:	46de      	mov	lr, fp
   18058:	464e      	mov	r6, r9
   1805a:	b5e0      	push	{r5, r6, r7, lr}
   1805c:	004c      	lsls	r4, r1, #1
   1805e:	030e      	lsls	r6, r1, #12
   18060:	b087      	sub	sp, #28
   18062:	4683      	mov	fp, r0
   18064:	4692      	mov	sl, r2
   18066:	001d      	movs	r5, r3
   18068:	4680      	mov	r8, r0
   1806a:	0b36      	lsrs	r6, r6, #12
   1806c:	0d64      	lsrs	r4, r4, #21
   1806e:	0fcf      	lsrs	r7, r1, #31
   18070:	2c00      	cmp	r4, #0
   18072:	d04f      	beq.n	18114 <__aeabi_ddiv+0xc4>
   18074:	4b6f      	ldr	r3, [pc, #444]	; (18234 <__aeabi_ddiv+0x1e4>)
   18076:	429c      	cmp	r4, r3
   18078:	d035      	beq.n	180e6 <__aeabi_ddiv+0x96>
   1807a:	2380      	movs	r3, #128	; 0x80
   1807c:	0f42      	lsrs	r2, r0, #29
   1807e:	041b      	lsls	r3, r3, #16
   18080:	00f6      	lsls	r6, r6, #3
   18082:	4313      	orrs	r3, r2
   18084:	4333      	orrs	r3, r6
   18086:	4699      	mov	r9, r3
   18088:	00c3      	lsls	r3, r0, #3
   1808a:	4698      	mov	r8, r3
   1808c:	4b6a      	ldr	r3, [pc, #424]	; (18238 <__aeabi_ddiv+0x1e8>)
   1808e:	2600      	movs	r6, #0
   18090:	469c      	mov	ip, r3
   18092:	2300      	movs	r3, #0
   18094:	4464      	add	r4, ip
   18096:	9303      	str	r3, [sp, #12]
   18098:	032b      	lsls	r3, r5, #12
   1809a:	0b1b      	lsrs	r3, r3, #12
   1809c:	469b      	mov	fp, r3
   1809e:	006b      	lsls	r3, r5, #1
   180a0:	0fed      	lsrs	r5, r5, #31
   180a2:	4650      	mov	r0, sl
   180a4:	0d5b      	lsrs	r3, r3, #21
   180a6:	9501      	str	r5, [sp, #4]
   180a8:	d05e      	beq.n	18168 <__aeabi_ddiv+0x118>
   180aa:	4a62      	ldr	r2, [pc, #392]	; (18234 <__aeabi_ddiv+0x1e4>)
   180ac:	4293      	cmp	r3, r2
   180ae:	d053      	beq.n	18158 <__aeabi_ddiv+0x108>
   180b0:	465a      	mov	r2, fp
   180b2:	00d1      	lsls	r1, r2, #3
   180b4:	2280      	movs	r2, #128	; 0x80
   180b6:	0f40      	lsrs	r0, r0, #29
   180b8:	0412      	lsls	r2, r2, #16
   180ba:	4302      	orrs	r2, r0
   180bc:	430a      	orrs	r2, r1
   180be:	4693      	mov	fp, r2
   180c0:	4652      	mov	r2, sl
   180c2:	00d1      	lsls	r1, r2, #3
   180c4:	4a5c      	ldr	r2, [pc, #368]	; (18238 <__aeabi_ddiv+0x1e8>)
   180c6:	4694      	mov	ip, r2
   180c8:	2200      	movs	r2, #0
   180ca:	4463      	add	r3, ip
   180cc:	0038      	movs	r0, r7
   180ce:	4068      	eors	r0, r5
   180d0:	4684      	mov	ip, r0
   180d2:	9002      	str	r0, [sp, #8]
   180d4:	1ae4      	subs	r4, r4, r3
   180d6:	4316      	orrs	r6, r2
   180d8:	2e0f      	cmp	r6, #15
   180da:	d900      	bls.n	180de <__aeabi_ddiv+0x8e>
   180dc:	e0b4      	b.n	18248 <__aeabi_ddiv+0x1f8>
   180de:	4b57      	ldr	r3, [pc, #348]	; (1823c <__aeabi_ddiv+0x1ec>)
   180e0:	00b6      	lsls	r6, r6, #2
   180e2:	599b      	ldr	r3, [r3, r6]
   180e4:	469f      	mov	pc, r3
   180e6:	0003      	movs	r3, r0
   180e8:	4333      	orrs	r3, r6
   180ea:	4699      	mov	r9, r3
   180ec:	d16c      	bne.n	181c8 <__aeabi_ddiv+0x178>
   180ee:	2300      	movs	r3, #0
   180f0:	4698      	mov	r8, r3
   180f2:	3302      	adds	r3, #2
   180f4:	2608      	movs	r6, #8
   180f6:	9303      	str	r3, [sp, #12]
   180f8:	e7ce      	b.n	18098 <__aeabi_ddiv+0x48>
   180fa:	46cb      	mov	fp, r9
   180fc:	4641      	mov	r1, r8
   180fe:	9a03      	ldr	r2, [sp, #12]
   18100:	9701      	str	r7, [sp, #4]
   18102:	2a02      	cmp	r2, #2
   18104:	d165      	bne.n	181d2 <__aeabi_ddiv+0x182>
   18106:	9b01      	ldr	r3, [sp, #4]
   18108:	4c4a      	ldr	r4, [pc, #296]	; (18234 <__aeabi_ddiv+0x1e4>)
   1810a:	469c      	mov	ip, r3
   1810c:	2300      	movs	r3, #0
   1810e:	2200      	movs	r2, #0
   18110:	4698      	mov	r8, r3
   18112:	e06b      	b.n	181ec <__aeabi_ddiv+0x19c>
   18114:	0003      	movs	r3, r0
   18116:	4333      	orrs	r3, r6
   18118:	4699      	mov	r9, r3
   1811a:	d04e      	beq.n	181ba <__aeabi_ddiv+0x16a>
   1811c:	2e00      	cmp	r6, #0
   1811e:	d100      	bne.n	18122 <__aeabi_ddiv+0xd2>
   18120:	e1bc      	b.n	1849c <__aeabi_ddiv+0x44c>
   18122:	0030      	movs	r0, r6
   18124:	f001 fa5e 	bl	195e4 <__clzsi2>
   18128:	0003      	movs	r3, r0
   1812a:	3b0b      	subs	r3, #11
   1812c:	2b1c      	cmp	r3, #28
   1812e:	dd00      	ble.n	18132 <__aeabi_ddiv+0xe2>
   18130:	e1ac      	b.n	1848c <__aeabi_ddiv+0x43c>
   18132:	221d      	movs	r2, #29
   18134:	1ad3      	subs	r3, r2, r3
   18136:	465a      	mov	r2, fp
   18138:	0001      	movs	r1, r0
   1813a:	40da      	lsrs	r2, r3
   1813c:	3908      	subs	r1, #8
   1813e:	408e      	lsls	r6, r1
   18140:	0013      	movs	r3, r2
   18142:	4333      	orrs	r3, r6
   18144:	4699      	mov	r9, r3
   18146:	465b      	mov	r3, fp
   18148:	408b      	lsls	r3, r1
   1814a:	4698      	mov	r8, r3
   1814c:	2300      	movs	r3, #0
   1814e:	4c3c      	ldr	r4, [pc, #240]	; (18240 <__aeabi_ddiv+0x1f0>)
   18150:	2600      	movs	r6, #0
   18152:	1a24      	subs	r4, r4, r0
   18154:	9303      	str	r3, [sp, #12]
   18156:	e79f      	b.n	18098 <__aeabi_ddiv+0x48>
   18158:	4651      	mov	r1, sl
   1815a:	465a      	mov	r2, fp
   1815c:	4311      	orrs	r1, r2
   1815e:	d129      	bne.n	181b4 <__aeabi_ddiv+0x164>
   18160:	2200      	movs	r2, #0
   18162:	4693      	mov	fp, r2
   18164:	3202      	adds	r2, #2
   18166:	e7b1      	b.n	180cc <__aeabi_ddiv+0x7c>
   18168:	4659      	mov	r1, fp
   1816a:	4301      	orrs	r1, r0
   1816c:	d01e      	beq.n	181ac <__aeabi_ddiv+0x15c>
   1816e:	465b      	mov	r3, fp
   18170:	2b00      	cmp	r3, #0
   18172:	d100      	bne.n	18176 <__aeabi_ddiv+0x126>
   18174:	e19e      	b.n	184b4 <__aeabi_ddiv+0x464>
   18176:	4658      	mov	r0, fp
   18178:	f001 fa34 	bl	195e4 <__clzsi2>
   1817c:	0003      	movs	r3, r0
   1817e:	3b0b      	subs	r3, #11
   18180:	2b1c      	cmp	r3, #28
   18182:	dd00      	ble.n	18186 <__aeabi_ddiv+0x136>
   18184:	e18f      	b.n	184a6 <__aeabi_ddiv+0x456>
   18186:	0002      	movs	r2, r0
   18188:	4659      	mov	r1, fp
   1818a:	3a08      	subs	r2, #8
   1818c:	4091      	lsls	r1, r2
   1818e:	468b      	mov	fp, r1
   18190:	211d      	movs	r1, #29
   18192:	1acb      	subs	r3, r1, r3
   18194:	4651      	mov	r1, sl
   18196:	40d9      	lsrs	r1, r3
   18198:	000b      	movs	r3, r1
   1819a:	4659      	mov	r1, fp
   1819c:	430b      	orrs	r3, r1
   1819e:	4651      	mov	r1, sl
   181a0:	469b      	mov	fp, r3
   181a2:	4091      	lsls	r1, r2
   181a4:	4b26      	ldr	r3, [pc, #152]	; (18240 <__aeabi_ddiv+0x1f0>)
   181a6:	2200      	movs	r2, #0
   181a8:	1a1b      	subs	r3, r3, r0
   181aa:	e78f      	b.n	180cc <__aeabi_ddiv+0x7c>
   181ac:	2300      	movs	r3, #0
   181ae:	2201      	movs	r2, #1
   181b0:	469b      	mov	fp, r3
   181b2:	e78b      	b.n	180cc <__aeabi_ddiv+0x7c>
   181b4:	4651      	mov	r1, sl
   181b6:	2203      	movs	r2, #3
   181b8:	e788      	b.n	180cc <__aeabi_ddiv+0x7c>
   181ba:	2300      	movs	r3, #0
   181bc:	4698      	mov	r8, r3
   181be:	3301      	adds	r3, #1
   181c0:	2604      	movs	r6, #4
   181c2:	2400      	movs	r4, #0
   181c4:	9303      	str	r3, [sp, #12]
   181c6:	e767      	b.n	18098 <__aeabi_ddiv+0x48>
   181c8:	2303      	movs	r3, #3
   181ca:	46b1      	mov	r9, r6
   181cc:	9303      	str	r3, [sp, #12]
   181ce:	260c      	movs	r6, #12
   181d0:	e762      	b.n	18098 <__aeabi_ddiv+0x48>
   181d2:	2a03      	cmp	r2, #3
   181d4:	d100      	bne.n	181d8 <__aeabi_ddiv+0x188>
   181d6:	e25c      	b.n	18692 <__aeabi_ddiv+0x642>
   181d8:	9b01      	ldr	r3, [sp, #4]
   181da:	2a01      	cmp	r2, #1
   181dc:	d000      	beq.n	181e0 <__aeabi_ddiv+0x190>
   181de:	e1e4      	b.n	185aa <__aeabi_ddiv+0x55a>
   181e0:	4013      	ands	r3, r2
   181e2:	469c      	mov	ip, r3
   181e4:	2300      	movs	r3, #0
   181e6:	2400      	movs	r4, #0
   181e8:	2200      	movs	r2, #0
   181ea:	4698      	mov	r8, r3
   181ec:	2100      	movs	r1, #0
   181ee:	0312      	lsls	r2, r2, #12
   181f0:	0b13      	lsrs	r3, r2, #12
   181f2:	0d0a      	lsrs	r2, r1, #20
   181f4:	0512      	lsls	r2, r2, #20
   181f6:	431a      	orrs	r2, r3
   181f8:	0523      	lsls	r3, r4, #20
   181fa:	4c12      	ldr	r4, [pc, #72]	; (18244 <__aeabi_ddiv+0x1f4>)
   181fc:	4640      	mov	r0, r8
   181fe:	4022      	ands	r2, r4
   18200:	4313      	orrs	r3, r2
   18202:	4662      	mov	r2, ip
   18204:	005b      	lsls	r3, r3, #1
   18206:	07d2      	lsls	r2, r2, #31
   18208:	085b      	lsrs	r3, r3, #1
   1820a:	4313      	orrs	r3, r2
   1820c:	0019      	movs	r1, r3
   1820e:	b007      	add	sp, #28
   18210:	bc3c      	pop	{r2, r3, r4, r5}
   18212:	4690      	mov	r8, r2
   18214:	4699      	mov	r9, r3
   18216:	46a2      	mov	sl, r4
   18218:	46ab      	mov	fp, r5
   1821a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1821c:	2300      	movs	r3, #0
   1821e:	2280      	movs	r2, #128	; 0x80
   18220:	469c      	mov	ip, r3
   18222:	0312      	lsls	r2, r2, #12
   18224:	4698      	mov	r8, r3
   18226:	4c03      	ldr	r4, [pc, #12]	; (18234 <__aeabi_ddiv+0x1e4>)
   18228:	e7e0      	b.n	181ec <__aeabi_ddiv+0x19c>
   1822a:	2300      	movs	r3, #0
   1822c:	4c01      	ldr	r4, [pc, #4]	; (18234 <__aeabi_ddiv+0x1e4>)
   1822e:	2200      	movs	r2, #0
   18230:	4698      	mov	r8, r3
   18232:	e7db      	b.n	181ec <__aeabi_ddiv+0x19c>
   18234:	000007ff 	.word	0x000007ff
   18238:	fffffc01 	.word	0xfffffc01
   1823c:	00020444 	.word	0x00020444
   18240:	fffffc0d 	.word	0xfffffc0d
   18244:	800fffff 	.word	0x800fffff
   18248:	45d9      	cmp	r9, fp
   1824a:	d900      	bls.n	1824e <__aeabi_ddiv+0x1fe>
   1824c:	e139      	b.n	184c2 <__aeabi_ddiv+0x472>
   1824e:	d100      	bne.n	18252 <__aeabi_ddiv+0x202>
   18250:	e134      	b.n	184bc <__aeabi_ddiv+0x46c>
   18252:	2300      	movs	r3, #0
   18254:	4646      	mov	r6, r8
   18256:	464d      	mov	r5, r9
   18258:	469a      	mov	sl, r3
   1825a:	3c01      	subs	r4, #1
   1825c:	465b      	mov	r3, fp
   1825e:	0e0a      	lsrs	r2, r1, #24
   18260:	021b      	lsls	r3, r3, #8
   18262:	431a      	orrs	r2, r3
   18264:	020b      	lsls	r3, r1, #8
   18266:	0c17      	lsrs	r7, r2, #16
   18268:	9303      	str	r3, [sp, #12]
   1826a:	0413      	lsls	r3, r2, #16
   1826c:	0c1b      	lsrs	r3, r3, #16
   1826e:	0039      	movs	r1, r7
   18270:	0028      	movs	r0, r5
   18272:	4690      	mov	r8, r2
   18274:	9301      	str	r3, [sp, #4]
   18276:	f7fe f999 	bl	165ac <__udivsi3>
   1827a:	0002      	movs	r2, r0
   1827c:	9b01      	ldr	r3, [sp, #4]
   1827e:	4683      	mov	fp, r0
   18280:	435a      	muls	r2, r3
   18282:	0028      	movs	r0, r5
   18284:	0039      	movs	r1, r7
   18286:	4691      	mov	r9, r2
   18288:	f7fe fa16 	bl	166b8 <__aeabi_uidivmod>
   1828c:	0c35      	lsrs	r5, r6, #16
   1828e:	0409      	lsls	r1, r1, #16
   18290:	430d      	orrs	r5, r1
   18292:	45a9      	cmp	r9, r5
   18294:	d90d      	bls.n	182b2 <__aeabi_ddiv+0x262>
   18296:	465b      	mov	r3, fp
   18298:	4445      	add	r5, r8
   1829a:	3b01      	subs	r3, #1
   1829c:	45a8      	cmp	r8, r5
   1829e:	d900      	bls.n	182a2 <__aeabi_ddiv+0x252>
   182a0:	e13a      	b.n	18518 <__aeabi_ddiv+0x4c8>
   182a2:	45a9      	cmp	r9, r5
   182a4:	d800      	bhi.n	182a8 <__aeabi_ddiv+0x258>
   182a6:	e137      	b.n	18518 <__aeabi_ddiv+0x4c8>
   182a8:	2302      	movs	r3, #2
   182aa:	425b      	negs	r3, r3
   182ac:	469c      	mov	ip, r3
   182ae:	4445      	add	r5, r8
   182b0:	44e3      	add	fp, ip
   182b2:	464b      	mov	r3, r9
   182b4:	1aeb      	subs	r3, r5, r3
   182b6:	0039      	movs	r1, r7
   182b8:	0018      	movs	r0, r3
   182ba:	9304      	str	r3, [sp, #16]
   182bc:	f7fe f976 	bl	165ac <__udivsi3>
   182c0:	9b01      	ldr	r3, [sp, #4]
   182c2:	0005      	movs	r5, r0
   182c4:	4343      	muls	r3, r0
   182c6:	0039      	movs	r1, r7
   182c8:	9804      	ldr	r0, [sp, #16]
   182ca:	4699      	mov	r9, r3
   182cc:	f7fe f9f4 	bl	166b8 <__aeabi_uidivmod>
   182d0:	0433      	lsls	r3, r6, #16
   182d2:	0409      	lsls	r1, r1, #16
   182d4:	0c1b      	lsrs	r3, r3, #16
   182d6:	430b      	orrs	r3, r1
   182d8:	4599      	cmp	r9, r3
   182da:	d909      	bls.n	182f0 <__aeabi_ddiv+0x2a0>
   182dc:	4443      	add	r3, r8
   182de:	1e6a      	subs	r2, r5, #1
   182e0:	4598      	cmp	r8, r3
   182e2:	d900      	bls.n	182e6 <__aeabi_ddiv+0x296>
   182e4:	e11a      	b.n	1851c <__aeabi_ddiv+0x4cc>
   182e6:	4599      	cmp	r9, r3
   182e8:	d800      	bhi.n	182ec <__aeabi_ddiv+0x29c>
   182ea:	e117      	b.n	1851c <__aeabi_ddiv+0x4cc>
   182ec:	3d02      	subs	r5, #2
   182ee:	4443      	add	r3, r8
   182f0:	464a      	mov	r2, r9
   182f2:	1a9b      	subs	r3, r3, r2
   182f4:	465a      	mov	r2, fp
   182f6:	0412      	lsls	r2, r2, #16
   182f8:	432a      	orrs	r2, r5
   182fa:	9903      	ldr	r1, [sp, #12]
   182fc:	4693      	mov	fp, r2
   182fe:	0c10      	lsrs	r0, r2, #16
   18300:	0c0a      	lsrs	r2, r1, #16
   18302:	4691      	mov	r9, r2
   18304:	0409      	lsls	r1, r1, #16
   18306:	465a      	mov	r2, fp
   18308:	0c09      	lsrs	r1, r1, #16
   1830a:	464e      	mov	r6, r9
   1830c:	000d      	movs	r5, r1
   1830e:	0412      	lsls	r2, r2, #16
   18310:	0c12      	lsrs	r2, r2, #16
   18312:	4345      	muls	r5, r0
   18314:	9105      	str	r1, [sp, #20]
   18316:	4351      	muls	r1, r2
   18318:	4372      	muls	r2, r6
   1831a:	4370      	muls	r0, r6
   1831c:	1952      	adds	r2, r2, r5
   1831e:	0c0e      	lsrs	r6, r1, #16
   18320:	18b2      	adds	r2, r6, r2
   18322:	4295      	cmp	r5, r2
   18324:	d903      	bls.n	1832e <__aeabi_ddiv+0x2de>
   18326:	2580      	movs	r5, #128	; 0x80
   18328:	026d      	lsls	r5, r5, #9
   1832a:	46ac      	mov	ip, r5
   1832c:	4460      	add	r0, ip
   1832e:	0c15      	lsrs	r5, r2, #16
   18330:	0409      	lsls	r1, r1, #16
   18332:	0412      	lsls	r2, r2, #16
   18334:	0c09      	lsrs	r1, r1, #16
   18336:	1828      	adds	r0, r5, r0
   18338:	1852      	adds	r2, r2, r1
   1833a:	4283      	cmp	r3, r0
   1833c:	d200      	bcs.n	18340 <__aeabi_ddiv+0x2f0>
   1833e:	e0ce      	b.n	184de <__aeabi_ddiv+0x48e>
   18340:	d100      	bne.n	18344 <__aeabi_ddiv+0x2f4>
   18342:	e0c8      	b.n	184d6 <__aeabi_ddiv+0x486>
   18344:	1a1d      	subs	r5, r3, r0
   18346:	4653      	mov	r3, sl
   18348:	1a9e      	subs	r6, r3, r2
   1834a:	45b2      	cmp	sl, r6
   1834c:	4192      	sbcs	r2, r2
   1834e:	4252      	negs	r2, r2
   18350:	1aab      	subs	r3, r5, r2
   18352:	469a      	mov	sl, r3
   18354:	4598      	cmp	r8, r3
   18356:	d100      	bne.n	1835a <__aeabi_ddiv+0x30a>
   18358:	e117      	b.n	1858a <__aeabi_ddiv+0x53a>
   1835a:	0039      	movs	r1, r7
   1835c:	0018      	movs	r0, r3
   1835e:	f7fe f925 	bl	165ac <__udivsi3>
   18362:	9b01      	ldr	r3, [sp, #4]
   18364:	0005      	movs	r5, r0
   18366:	4343      	muls	r3, r0
   18368:	0039      	movs	r1, r7
   1836a:	4650      	mov	r0, sl
   1836c:	9304      	str	r3, [sp, #16]
   1836e:	f7fe f9a3 	bl	166b8 <__aeabi_uidivmod>
   18372:	9804      	ldr	r0, [sp, #16]
   18374:	040b      	lsls	r3, r1, #16
   18376:	0c31      	lsrs	r1, r6, #16
   18378:	4319      	orrs	r1, r3
   1837a:	4288      	cmp	r0, r1
   1837c:	d909      	bls.n	18392 <__aeabi_ddiv+0x342>
   1837e:	4441      	add	r1, r8
   18380:	1e6b      	subs	r3, r5, #1
   18382:	4588      	cmp	r8, r1
   18384:	d900      	bls.n	18388 <__aeabi_ddiv+0x338>
   18386:	e107      	b.n	18598 <__aeabi_ddiv+0x548>
   18388:	4288      	cmp	r0, r1
   1838a:	d800      	bhi.n	1838e <__aeabi_ddiv+0x33e>
   1838c:	e104      	b.n	18598 <__aeabi_ddiv+0x548>
   1838e:	3d02      	subs	r5, #2
   18390:	4441      	add	r1, r8
   18392:	9b04      	ldr	r3, [sp, #16]
   18394:	1acb      	subs	r3, r1, r3
   18396:	0018      	movs	r0, r3
   18398:	0039      	movs	r1, r7
   1839a:	9304      	str	r3, [sp, #16]
   1839c:	f7fe f906 	bl	165ac <__udivsi3>
   183a0:	9b01      	ldr	r3, [sp, #4]
   183a2:	4682      	mov	sl, r0
   183a4:	4343      	muls	r3, r0
   183a6:	0039      	movs	r1, r7
   183a8:	9804      	ldr	r0, [sp, #16]
   183aa:	9301      	str	r3, [sp, #4]
   183ac:	f7fe f984 	bl	166b8 <__aeabi_uidivmod>
   183b0:	9801      	ldr	r0, [sp, #4]
   183b2:	040b      	lsls	r3, r1, #16
   183b4:	0431      	lsls	r1, r6, #16
   183b6:	0c09      	lsrs	r1, r1, #16
   183b8:	4319      	orrs	r1, r3
   183ba:	4288      	cmp	r0, r1
   183bc:	d90d      	bls.n	183da <__aeabi_ddiv+0x38a>
   183be:	4653      	mov	r3, sl
   183c0:	4441      	add	r1, r8
   183c2:	3b01      	subs	r3, #1
   183c4:	4588      	cmp	r8, r1
   183c6:	d900      	bls.n	183ca <__aeabi_ddiv+0x37a>
   183c8:	e0e8      	b.n	1859c <__aeabi_ddiv+0x54c>
   183ca:	4288      	cmp	r0, r1
   183cc:	d800      	bhi.n	183d0 <__aeabi_ddiv+0x380>
   183ce:	e0e5      	b.n	1859c <__aeabi_ddiv+0x54c>
   183d0:	2302      	movs	r3, #2
   183d2:	425b      	negs	r3, r3
   183d4:	469c      	mov	ip, r3
   183d6:	4441      	add	r1, r8
   183d8:	44e2      	add	sl, ip
   183da:	9b01      	ldr	r3, [sp, #4]
   183dc:	042d      	lsls	r5, r5, #16
   183de:	1ace      	subs	r6, r1, r3
   183e0:	4651      	mov	r1, sl
   183e2:	4329      	orrs	r1, r5
   183e4:	9d05      	ldr	r5, [sp, #20]
   183e6:	464f      	mov	r7, r9
   183e8:	002a      	movs	r2, r5
   183ea:	040b      	lsls	r3, r1, #16
   183ec:	0c08      	lsrs	r0, r1, #16
   183ee:	0c1b      	lsrs	r3, r3, #16
   183f0:	435a      	muls	r2, r3
   183f2:	4345      	muls	r5, r0
   183f4:	437b      	muls	r3, r7
   183f6:	4378      	muls	r0, r7
   183f8:	195b      	adds	r3, r3, r5
   183fa:	0c17      	lsrs	r7, r2, #16
   183fc:	18fb      	adds	r3, r7, r3
   183fe:	429d      	cmp	r5, r3
   18400:	d903      	bls.n	1840a <__aeabi_ddiv+0x3ba>
   18402:	2580      	movs	r5, #128	; 0x80
   18404:	026d      	lsls	r5, r5, #9
   18406:	46ac      	mov	ip, r5
   18408:	4460      	add	r0, ip
   1840a:	0c1d      	lsrs	r5, r3, #16
   1840c:	0412      	lsls	r2, r2, #16
   1840e:	041b      	lsls	r3, r3, #16
   18410:	0c12      	lsrs	r2, r2, #16
   18412:	1828      	adds	r0, r5, r0
   18414:	189b      	adds	r3, r3, r2
   18416:	4286      	cmp	r6, r0
   18418:	d200      	bcs.n	1841c <__aeabi_ddiv+0x3cc>
   1841a:	e093      	b.n	18544 <__aeabi_ddiv+0x4f4>
   1841c:	d100      	bne.n	18420 <__aeabi_ddiv+0x3d0>
   1841e:	e08e      	b.n	1853e <__aeabi_ddiv+0x4ee>
   18420:	2301      	movs	r3, #1
   18422:	4319      	orrs	r1, r3
   18424:	4ba0      	ldr	r3, [pc, #640]	; (186a8 <__aeabi_ddiv+0x658>)
   18426:	18e3      	adds	r3, r4, r3
   18428:	2b00      	cmp	r3, #0
   1842a:	dc00      	bgt.n	1842e <__aeabi_ddiv+0x3de>
   1842c:	e099      	b.n	18562 <__aeabi_ddiv+0x512>
   1842e:	074a      	lsls	r2, r1, #29
   18430:	d000      	beq.n	18434 <__aeabi_ddiv+0x3e4>
   18432:	e09e      	b.n	18572 <__aeabi_ddiv+0x522>
   18434:	465a      	mov	r2, fp
   18436:	01d2      	lsls	r2, r2, #7
   18438:	d506      	bpl.n	18448 <__aeabi_ddiv+0x3f8>
   1843a:	465a      	mov	r2, fp
   1843c:	4b9b      	ldr	r3, [pc, #620]	; (186ac <__aeabi_ddiv+0x65c>)
   1843e:	401a      	ands	r2, r3
   18440:	2380      	movs	r3, #128	; 0x80
   18442:	4693      	mov	fp, r2
   18444:	00db      	lsls	r3, r3, #3
   18446:	18e3      	adds	r3, r4, r3
   18448:	4a99      	ldr	r2, [pc, #612]	; (186b0 <__aeabi_ddiv+0x660>)
   1844a:	4293      	cmp	r3, r2
   1844c:	dd68      	ble.n	18520 <__aeabi_ddiv+0x4d0>
   1844e:	2301      	movs	r3, #1
   18450:	9a02      	ldr	r2, [sp, #8]
   18452:	4c98      	ldr	r4, [pc, #608]	; (186b4 <__aeabi_ddiv+0x664>)
   18454:	401a      	ands	r2, r3
   18456:	2300      	movs	r3, #0
   18458:	4694      	mov	ip, r2
   1845a:	4698      	mov	r8, r3
   1845c:	2200      	movs	r2, #0
   1845e:	e6c5      	b.n	181ec <__aeabi_ddiv+0x19c>
   18460:	2280      	movs	r2, #128	; 0x80
   18462:	464b      	mov	r3, r9
   18464:	0312      	lsls	r2, r2, #12
   18466:	4213      	tst	r3, r2
   18468:	d00a      	beq.n	18480 <__aeabi_ddiv+0x430>
   1846a:	465b      	mov	r3, fp
   1846c:	4213      	tst	r3, r2
   1846e:	d106      	bne.n	1847e <__aeabi_ddiv+0x42e>
   18470:	431a      	orrs	r2, r3
   18472:	0312      	lsls	r2, r2, #12
   18474:	0b12      	lsrs	r2, r2, #12
   18476:	46ac      	mov	ip, r5
   18478:	4688      	mov	r8, r1
   1847a:	4c8e      	ldr	r4, [pc, #568]	; (186b4 <__aeabi_ddiv+0x664>)
   1847c:	e6b6      	b.n	181ec <__aeabi_ddiv+0x19c>
   1847e:	464b      	mov	r3, r9
   18480:	431a      	orrs	r2, r3
   18482:	0312      	lsls	r2, r2, #12
   18484:	0b12      	lsrs	r2, r2, #12
   18486:	46bc      	mov	ip, r7
   18488:	4c8a      	ldr	r4, [pc, #552]	; (186b4 <__aeabi_ddiv+0x664>)
   1848a:	e6af      	b.n	181ec <__aeabi_ddiv+0x19c>
   1848c:	0003      	movs	r3, r0
   1848e:	465a      	mov	r2, fp
   18490:	3b28      	subs	r3, #40	; 0x28
   18492:	409a      	lsls	r2, r3
   18494:	2300      	movs	r3, #0
   18496:	4691      	mov	r9, r2
   18498:	4698      	mov	r8, r3
   1849a:	e657      	b.n	1814c <__aeabi_ddiv+0xfc>
   1849c:	4658      	mov	r0, fp
   1849e:	f001 f8a1 	bl	195e4 <__clzsi2>
   184a2:	3020      	adds	r0, #32
   184a4:	e640      	b.n	18128 <__aeabi_ddiv+0xd8>
   184a6:	0003      	movs	r3, r0
   184a8:	4652      	mov	r2, sl
   184aa:	3b28      	subs	r3, #40	; 0x28
   184ac:	409a      	lsls	r2, r3
   184ae:	2100      	movs	r1, #0
   184b0:	4693      	mov	fp, r2
   184b2:	e677      	b.n	181a4 <__aeabi_ddiv+0x154>
   184b4:	f001 f896 	bl	195e4 <__clzsi2>
   184b8:	3020      	adds	r0, #32
   184ba:	e65f      	b.n	1817c <__aeabi_ddiv+0x12c>
   184bc:	4588      	cmp	r8, r1
   184be:	d200      	bcs.n	184c2 <__aeabi_ddiv+0x472>
   184c0:	e6c7      	b.n	18252 <__aeabi_ddiv+0x202>
   184c2:	464b      	mov	r3, r9
   184c4:	07de      	lsls	r6, r3, #31
   184c6:	085d      	lsrs	r5, r3, #1
   184c8:	4643      	mov	r3, r8
   184ca:	085b      	lsrs	r3, r3, #1
   184cc:	431e      	orrs	r6, r3
   184ce:	4643      	mov	r3, r8
   184d0:	07db      	lsls	r3, r3, #31
   184d2:	469a      	mov	sl, r3
   184d4:	e6c2      	b.n	1825c <__aeabi_ddiv+0x20c>
   184d6:	2500      	movs	r5, #0
   184d8:	4592      	cmp	sl, r2
   184da:	d300      	bcc.n	184de <__aeabi_ddiv+0x48e>
   184dc:	e733      	b.n	18346 <__aeabi_ddiv+0x2f6>
   184de:	9e03      	ldr	r6, [sp, #12]
   184e0:	4659      	mov	r1, fp
   184e2:	46b4      	mov	ip, r6
   184e4:	44e2      	add	sl, ip
   184e6:	45b2      	cmp	sl, r6
   184e8:	41ad      	sbcs	r5, r5
   184ea:	426d      	negs	r5, r5
   184ec:	4445      	add	r5, r8
   184ee:	18eb      	adds	r3, r5, r3
   184f0:	3901      	subs	r1, #1
   184f2:	4598      	cmp	r8, r3
   184f4:	d207      	bcs.n	18506 <__aeabi_ddiv+0x4b6>
   184f6:	4298      	cmp	r0, r3
   184f8:	d900      	bls.n	184fc <__aeabi_ddiv+0x4ac>
   184fa:	e07f      	b.n	185fc <__aeabi_ddiv+0x5ac>
   184fc:	d100      	bne.n	18500 <__aeabi_ddiv+0x4b0>
   184fe:	e0bc      	b.n	1867a <__aeabi_ddiv+0x62a>
   18500:	1a1d      	subs	r5, r3, r0
   18502:	468b      	mov	fp, r1
   18504:	e71f      	b.n	18346 <__aeabi_ddiv+0x2f6>
   18506:	4598      	cmp	r8, r3
   18508:	d1fa      	bne.n	18500 <__aeabi_ddiv+0x4b0>
   1850a:	9d03      	ldr	r5, [sp, #12]
   1850c:	4555      	cmp	r5, sl
   1850e:	d9f2      	bls.n	184f6 <__aeabi_ddiv+0x4a6>
   18510:	4643      	mov	r3, r8
   18512:	468b      	mov	fp, r1
   18514:	1a1d      	subs	r5, r3, r0
   18516:	e716      	b.n	18346 <__aeabi_ddiv+0x2f6>
   18518:	469b      	mov	fp, r3
   1851a:	e6ca      	b.n	182b2 <__aeabi_ddiv+0x262>
   1851c:	0015      	movs	r5, r2
   1851e:	e6e7      	b.n	182f0 <__aeabi_ddiv+0x2a0>
   18520:	465a      	mov	r2, fp
   18522:	08c9      	lsrs	r1, r1, #3
   18524:	0752      	lsls	r2, r2, #29
   18526:	430a      	orrs	r2, r1
   18528:	055b      	lsls	r3, r3, #21
   1852a:	4690      	mov	r8, r2
   1852c:	0d5c      	lsrs	r4, r3, #21
   1852e:	465a      	mov	r2, fp
   18530:	2301      	movs	r3, #1
   18532:	9902      	ldr	r1, [sp, #8]
   18534:	0252      	lsls	r2, r2, #9
   18536:	4019      	ands	r1, r3
   18538:	0b12      	lsrs	r2, r2, #12
   1853a:	468c      	mov	ip, r1
   1853c:	e656      	b.n	181ec <__aeabi_ddiv+0x19c>
   1853e:	2b00      	cmp	r3, #0
   18540:	d100      	bne.n	18544 <__aeabi_ddiv+0x4f4>
   18542:	e76f      	b.n	18424 <__aeabi_ddiv+0x3d4>
   18544:	4446      	add	r6, r8
   18546:	1e4a      	subs	r2, r1, #1
   18548:	45b0      	cmp	r8, r6
   1854a:	d929      	bls.n	185a0 <__aeabi_ddiv+0x550>
   1854c:	0011      	movs	r1, r2
   1854e:	4286      	cmp	r6, r0
   18550:	d000      	beq.n	18554 <__aeabi_ddiv+0x504>
   18552:	e765      	b.n	18420 <__aeabi_ddiv+0x3d0>
   18554:	9a03      	ldr	r2, [sp, #12]
   18556:	4293      	cmp	r3, r2
   18558:	d000      	beq.n	1855c <__aeabi_ddiv+0x50c>
   1855a:	e761      	b.n	18420 <__aeabi_ddiv+0x3d0>
   1855c:	e762      	b.n	18424 <__aeabi_ddiv+0x3d4>
   1855e:	2101      	movs	r1, #1
   18560:	4249      	negs	r1, r1
   18562:	2001      	movs	r0, #1
   18564:	1ac2      	subs	r2, r0, r3
   18566:	2a38      	cmp	r2, #56	; 0x38
   18568:	dd21      	ble.n	185ae <__aeabi_ddiv+0x55e>
   1856a:	9b02      	ldr	r3, [sp, #8]
   1856c:	4003      	ands	r3, r0
   1856e:	469c      	mov	ip, r3
   18570:	e638      	b.n	181e4 <__aeabi_ddiv+0x194>
   18572:	220f      	movs	r2, #15
   18574:	400a      	ands	r2, r1
   18576:	2a04      	cmp	r2, #4
   18578:	d100      	bne.n	1857c <__aeabi_ddiv+0x52c>
   1857a:	e75b      	b.n	18434 <__aeabi_ddiv+0x3e4>
   1857c:	000a      	movs	r2, r1
   1857e:	1d11      	adds	r1, r2, #4
   18580:	4291      	cmp	r1, r2
   18582:	4192      	sbcs	r2, r2
   18584:	4252      	negs	r2, r2
   18586:	4493      	add	fp, r2
   18588:	e754      	b.n	18434 <__aeabi_ddiv+0x3e4>
   1858a:	4b47      	ldr	r3, [pc, #284]	; (186a8 <__aeabi_ddiv+0x658>)
   1858c:	18e3      	adds	r3, r4, r3
   1858e:	2b00      	cmp	r3, #0
   18590:	dde5      	ble.n	1855e <__aeabi_ddiv+0x50e>
   18592:	2201      	movs	r2, #1
   18594:	4252      	negs	r2, r2
   18596:	e7f2      	b.n	1857e <__aeabi_ddiv+0x52e>
   18598:	001d      	movs	r5, r3
   1859a:	e6fa      	b.n	18392 <__aeabi_ddiv+0x342>
   1859c:	469a      	mov	sl, r3
   1859e:	e71c      	b.n	183da <__aeabi_ddiv+0x38a>
   185a0:	42b0      	cmp	r0, r6
   185a2:	d839      	bhi.n	18618 <__aeabi_ddiv+0x5c8>
   185a4:	d06e      	beq.n	18684 <__aeabi_ddiv+0x634>
   185a6:	0011      	movs	r1, r2
   185a8:	e73a      	b.n	18420 <__aeabi_ddiv+0x3d0>
   185aa:	9302      	str	r3, [sp, #8]
   185ac:	e73a      	b.n	18424 <__aeabi_ddiv+0x3d4>
   185ae:	2a1f      	cmp	r2, #31
   185b0:	dc3c      	bgt.n	1862c <__aeabi_ddiv+0x5dc>
   185b2:	2320      	movs	r3, #32
   185b4:	1a9b      	subs	r3, r3, r2
   185b6:	000c      	movs	r4, r1
   185b8:	4658      	mov	r0, fp
   185ba:	4099      	lsls	r1, r3
   185bc:	4098      	lsls	r0, r3
   185be:	1e4b      	subs	r3, r1, #1
   185c0:	4199      	sbcs	r1, r3
   185c2:	465b      	mov	r3, fp
   185c4:	40d4      	lsrs	r4, r2
   185c6:	40d3      	lsrs	r3, r2
   185c8:	4320      	orrs	r0, r4
   185ca:	4308      	orrs	r0, r1
   185cc:	001a      	movs	r2, r3
   185ce:	0743      	lsls	r3, r0, #29
   185d0:	d009      	beq.n	185e6 <__aeabi_ddiv+0x596>
   185d2:	230f      	movs	r3, #15
   185d4:	4003      	ands	r3, r0
   185d6:	2b04      	cmp	r3, #4
   185d8:	d005      	beq.n	185e6 <__aeabi_ddiv+0x596>
   185da:	0001      	movs	r1, r0
   185dc:	1d08      	adds	r0, r1, #4
   185de:	4288      	cmp	r0, r1
   185e0:	419b      	sbcs	r3, r3
   185e2:	425b      	negs	r3, r3
   185e4:	18d2      	adds	r2, r2, r3
   185e6:	0213      	lsls	r3, r2, #8
   185e8:	d53a      	bpl.n	18660 <__aeabi_ddiv+0x610>
   185ea:	2301      	movs	r3, #1
   185ec:	9a02      	ldr	r2, [sp, #8]
   185ee:	2401      	movs	r4, #1
   185f0:	401a      	ands	r2, r3
   185f2:	2300      	movs	r3, #0
   185f4:	4694      	mov	ip, r2
   185f6:	4698      	mov	r8, r3
   185f8:	2200      	movs	r2, #0
   185fa:	e5f7      	b.n	181ec <__aeabi_ddiv+0x19c>
   185fc:	2102      	movs	r1, #2
   185fe:	4249      	negs	r1, r1
   18600:	468c      	mov	ip, r1
   18602:	9d03      	ldr	r5, [sp, #12]
   18604:	44e3      	add	fp, ip
   18606:	46ac      	mov	ip, r5
   18608:	44e2      	add	sl, ip
   1860a:	45aa      	cmp	sl, r5
   1860c:	41ad      	sbcs	r5, r5
   1860e:	426d      	negs	r5, r5
   18610:	4445      	add	r5, r8
   18612:	18ed      	adds	r5, r5, r3
   18614:	1a2d      	subs	r5, r5, r0
   18616:	e696      	b.n	18346 <__aeabi_ddiv+0x2f6>
   18618:	1e8a      	subs	r2, r1, #2
   1861a:	9903      	ldr	r1, [sp, #12]
   1861c:	004d      	lsls	r5, r1, #1
   1861e:	428d      	cmp	r5, r1
   18620:	4189      	sbcs	r1, r1
   18622:	4249      	negs	r1, r1
   18624:	4441      	add	r1, r8
   18626:	1876      	adds	r6, r6, r1
   18628:	9503      	str	r5, [sp, #12]
   1862a:	e78f      	b.n	1854c <__aeabi_ddiv+0x4fc>
   1862c:	201f      	movs	r0, #31
   1862e:	4240      	negs	r0, r0
   18630:	1ac3      	subs	r3, r0, r3
   18632:	4658      	mov	r0, fp
   18634:	40d8      	lsrs	r0, r3
   18636:	0003      	movs	r3, r0
   18638:	2a20      	cmp	r2, #32
   1863a:	d028      	beq.n	1868e <__aeabi_ddiv+0x63e>
   1863c:	2040      	movs	r0, #64	; 0x40
   1863e:	465d      	mov	r5, fp
   18640:	1a82      	subs	r2, r0, r2
   18642:	4095      	lsls	r5, r2
   18644:	4329      	orrs	r1, r5
   18646:	1e4a      	subs	r2, r1, #1
   18648:	4191      	sbcs	r1, r2
   1864a:	4319      	orrs	r1, r3
   1864c:	2307      	movs	r3, #7
   1864e:	2200      	movs	r2, #0
   18650:	400b      	ands	r3, r1
   18652:	d009      	beq.n	18668 <__aeabi_ddiv+0x618>
   18654:	230f      	movs	r3, #15
   18656:	2200      	movs	r2, #0
   18658:	400b      	ands	r3, r1
   1865a:	0008      	movs	r0, r1
   1865c:	2b04      	cmp	r3, #4
   1865e:	d1bd      	bne.n	185dc <__aeabi_ddiv+0x58c>
   18660:	0001      	movs	r1, r0
   18662:	0753      	lsls	r3, r2, #29
   18664:	0252      	lsls	r2, r2, #9
   18666:	0b12      	lsrs	r2, r2, #12
   18668:	08c9      	lsrs	r1, r1, #3
   1866a:	4319      	orrs	r1, r3
   1866c:	2301      	movs	r3, #1
   1866e:	4688      	mov	r8, r1
   18670:	9902      	ldr	r1, [sp, #8]
   18672:	2400      	movs	r4, #0
   18674:	4019      	ands	r1, r3
   18676:	468c      	mov	ip, r1
   18678:	e5b8      	b.n	181ec <__aeabi_ddiv+0x19c>
   1867a:	4552      	cmp	r2, sl
   1867c:	d8be      	bhi.n	185fc <__aeabi_ddiv+0x5ac>
   1867e:	468b      	mov	fp, r1
   18680:	2500      	movs	r5, #0
   18682:	e660      	b.n	18346 <__aeabi_ddiv+0x2f6>
   18684:	9d03      	ldr	r5, [sp, #12]
   18686:	429d      	cmp	r5, r3
   18688:	d3c6      	bcc.n	18618 <__aeabi_ddiv+0x5c8>
   1868a:	0011      	movs	r1, r2
   1868c:	e762      	b.n	18554 <__aeabi_ddiv+0x504>
   1868e:	2500      	movs	r5, #0
   18690:	e7d8      	b.n	18644 <__aeabi_ddiv+0x5f4>
   18692:	2280      	movs	r2, #128	; 0x80
   18694:	465b      	mov	r3, fp
   18696:	0312      	lsls	r2, r2, #12
   18698:	431a      	orrs	r2, r3
   1869a:	9b01      	ldr	r3, [sp, #4]
   1869c:	0312      	lsls	r2, r2, #12
   1869e:	0b12      	lsrs	r2, r2, #12
   186a0:	469c      	mov	ip, r3
   186a2:	4688      	mov	r8, r1
   186a4:	4c03      	ldr	r4, [pc, #12]	; (186b4 <__aeabi_ddiv+0x664>)
   186a6:	e5a1      	b.n	181ec <__aeabi_ddiv+0x19c>
   186a8:	000003ff 	.word	0x000003ff
   186ac:	feffffff 	.word	0xfeffffff
   186b0:	000007fe 	.word	0x000007fe
   186b4:	000007ff 	.word	0x000007ff

000186b8 <__eqdf2>:
   186b8:	b5f0      	push	{r4, r5, r6, r7, lr}
   186ba:	464f      	mov	r7, r9
   186bc:	4646      	mov	r6, r8
   186be:	46d6      	mov	lr, sl
   186c0:	005c      	lsls	r4, r3, #1
   186c2:	b5c0      	push	{r6, r7, lr}
   186c4:	031f      	lsls	r7, r3, #12
   186c6:	0fdb      	lsrs	r3, r3, #31
   186c8:	469a      	mov	sl, r3
   186ca:	4b17      	ldr	r3, [pc, #92]	; (18728 <__eqdf2+0x70>)
   186cc:	030e      	lsls	r6, r1, #12
   186ce:	004d      	lsls	r5, r1, #1
   186d0:	4684      	mov	ip, r0
   186d2:	4680      	mov	r8, r0
   186d4:	0b36      	lsrs	r6, r6, #12
   186d6:	0d6d      	lsrs	r5, r5, #21
   186d8:	0fc9      	lsrs	r1, r1, #31
   186da:	4691      	mov	r9, r2
   186dc:	0b3f      	lsrs	r7, r7, #12
   186de:	0d64      	lsrs	r4, r4, #21
   186e0:	2001      	movs	r0, #1
   186e2:	429d      	cmp	r5, r3
   186e4:	d008      	beq.n	186f8 <__eqdf2+0x40>
   186e6:	429c      	cmp	r4, r3
   186e8:	d001      	beq.n	186ee <__eqdf2+0x36>
   186ea:	42a5      	cmp	r5, r4
   186ec:	d00b      	beq.n	18706 <__eqdf2+0x4e>
   186ee:	bc1c      	pop	{r2, r3, r4}
   186f0:	4690      	mov	r8, r2
   186f2:	4699      	mov	r9, r3
   186f4:	46a2      	mov	sl, r4
   186f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   186f8:	4663      	mov	r3, ip
   186fa:	4333      	orrs	r3, r6
   186fc:	d1f7      	bne.n	186ee <__eqdf2+0x36>
   186fe:	42ac      	cmp	r4, r5
   18700:	d1f5      	bne.n	186ee <__eqdf2+0x36>
   18702:	433a      	orrs	r2, r7
   18704:	d1f3      	bne.n	186ee <__eqdf2+0x36>
   18706:	2001      	movs	r0, #1
   18708:	42be      	cmp	r6, r7
   1870a:	d1f0      	bne.n	186ee <__eqdf2+0x36>
   1870c:	45c8      	cmp	r8, r9
   1870e:	d1ee      	bne.n	186ee <__eqdf2+0x36>
   18710:	4551      	cmp	r1, sl
   18712:	d007      	beq.n	18724 <__eqdf2+0x6c>
   18714:	2d00      	cmp	r5, #0
   18716:	d1ea      	bne.n	186ee <__eqdf2+0x36>
   18718:	4663      	mov	r3, ip
   1871a:	431e      	orrs	r6, r3
   1871c:	0030      	movs	r0, r6
   1871e:	1e46      	subs	r6, r0, #1
   18720:	41b0      	sbcs	r0, r6
   18722:	e7e4      	b.n	186ee <__eqdf2+0x36>
   18724:	2000      	movs	r0, #0
   18726:	e7e2      	b.n	186ee <__eqdf2+0x36>
   18728:	000007ff 	.word	0x000007ff

0001872c <__gedf2>:
   1872c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1872e:	4645      	mov	r5, r8
   18730:	46de      	mov	lr, fp
   18732:	4657      	mov	r7, sl
   18734:	464e      	mov	r6, r9
   18736:	b5e0      	push	{r5, r6, r7, lr}
   18738:	031f      	lsls	r7, r3, #12
   1873a:	0b3d      	lsrs	r5, r7, #12
   1873c:	4f2c      	ldr	r7, [pc, #176]	; (187f0 <__gedf2+0xc4>)
   1873e:	030e      	lsls	r6, r1, #12
   18740:	004c      	lsls	r4, r1, #1
   18742:	46ab      	mov	fp, r5
   18744:	005d      	lsls	r5, r3, #1
   18746:	4684      	mov	ip, r0
   18748:	0b36      	lsrs	r6, r6, #12
   1874a:	0d64      	lsrs	r4, r4, #21
   1874c:	0fc9      	lsrs	r1, r1, #31
   1874e:	4690      	mov	r8, r2
   18750:	0d6d      	lsrs	r5, r5, #21
   18752:	0fdb      	lsrs	r3, r3, #31
   18754:	42bc      	cmp	r4, r7
   18756:	d02a      	beq.n	187ae <__gedf2+0x82>
   18758:	4f25      	ldr	r7, [pc, #148]	; (187f0 <__gedf2+0xc4>)
   1875a:	42bd      	cmp	r5, r7
   1875c:	d02d      	beq.n	187ba <__gedf2+0x8e>
   1875e:	2c00      	cmp	r4, #0
   18760:	d10f      	bne.n	18782 <__gedf2+0x56>
   18762:	4330      	orrs	r0, r6
   18764:	0007      	movs	r7, r0
   18766:	4681      	mov	r9, r0
   18768:	4278      	negs	r0, r7
   1876a:	4178      	adcs	r0, r7
   1876c:	b2c0      	uxtb	r0, r0
   1876e:	2d00      	cmp	r5, #0
   18770:	d117      	bne.n	187a2 <__gedf2+0x76>
   18772:	465f      	mov	r7, fp
   18774:	433a      	orrs	r2, r7
   18776:	d114      	bne.n	187a2 <__gedf2+0x76>
   18778:	464b      	mov	r3, r9
   1877a:	2000      	movs	r0, #0
   1877c:	2b00      	cmp	r3, #0
   1877e:	d00a      	beq.n	18796 <__gedf2+0x6a>
   18780:	e006      	b.n	18790 <__gedf2+0x64>
   18782:	2d00      	cmp	r5, #0
   18784:	d102      	bne.n	1878c <__gedf2+0x60>
   18786:	4658      	mov	r0, fp
   18788:	4302      	orrs	r2, r0
   1878a:	d001      	beq.n	18790 <__gedf2+0x64>
   1878c:	4299      	cmp	r1, r3
   1878e:	d018      	beq.n	187c2 <__gedf2+0x96>
   18790:	4248      	negs	r0, r1
   18792:	2101      	movs	r1, #1
   18794:	4308      	orrs	r0, r1
   18796:	bc3c      	pop	{r2, r3, r4, r5}
   18798:	4690      	mov	r8, r2
   1879a:	4699      	mov	r9, r3
   1879c:	46a2      	mov	sl, r4
   1879e:	46ab      	mov	fp, r5
   187a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   187a2:	2800      	cmp	r0, #0
   187a4:	d0f2      	beq.n	1878c <__gedf2+0x60>
   187a6:	2001      	movs	r0, #1
   187a8:	3b01      	subs	r3, #1
   187aa:	4318      	orrs	r0, r3
   187ac:	e7f3      	b.n	18796 <__gedf2+0x6a>
   187ae:	0037      	movs	r7, r6
   187b0:	4307      	orrs	r7, r0
   187b2:	d0d1      	beq.n	18758 <__gedf2+0x2c>
   187b4:	2002      	movs	r0, #2
   187b6:	4240      	negs	r0, r0
   187b8:	e7ed      	b.n	18796 <__gedf2+0x6a>
   187ba:	465f      	mov	r7, fp
   187bc:	4317      	orrs	r7, r2
   187be:	d0ce      	beq.n	1875e <__gedf2+0x32>
   187c0:	e7f8      	b.n	187b4 <__gedf2+0x88>
   187c2:	42ac      	cmp	r4, r5
   187c4:	dce4      	bgt.n	18790 <__gedf2+0x64>
   187c6:	da03      	bge.n	187d0 <__gedf2+0xa4>
   187c8:	1e48      	subs	r0, r1, #1
   187ca:	2101      	movs	r1, #1
   187cc:	4308      	orrs	r0, r1
   187ce:	e7e2      	b.n	18796 <__gedf2+0x6a>
   187d0:	455e      	cmp	r6, fp
   187d2:	d8dd      	bhi.n	18790 <__gedf2+0x64>
   187d4:	d006      	beq.n	187e4 <__gedf2+0xb8>
   187d6:	2000      	movs	r0, #0
   187d8:	455e      	cmp	r6, fp
   187da:	d2dc      	bcs.n	18796 <__gedf2+0x6a>
   187dc:	2301      	movs	r3, #1
   187de:	1e48      	subs	r0, r1, #1
   187e0:	4318      	orrs	r0, r3
   187e2:	e7d8      	b.n	18796 <__gedf2+0x6a>
   187e4:	45c4      	cmp	ip, r8
   187e6:	d8d3      	bhi.n	18790 <__gedf2+0x64>
   187e8:	2000      	movs	r0, #0
   187ea:	45c4      	cmp	ip, r8
   187ec:	d3f6      	bcc.n	187dc <__gedf2+0xb0>
   187ee:	e7d2      	b.n	18796 <__gedf2+0x6a>
   187f0:	000007ff 	.word	0x000007ff

000187f4 <__ledf2>:
   187f4:	b5f0      	push	{r4, r5, r6, r7, lr}
   187f6:	464e      	mov	r6, r9
   187f8:	4645      	mov	r5, r8
   187fa:	46de      	mov	lr, fp
   187fc:	4657      	mov	r7, sl
   187fe:	005c      	lsls	r4, r3, #1
   18800:	b5e0      	push	{r5, r6, r7, lr}
   18802:	031f      	lsls	r7, r3, #12
   18804:	0fdb      	lsrs	r3, r3, #31
   18806:	4699      	mov	r9, r3
   18808:	4b2a      	ldr	r3, [pc, #168]	; (188b4 <__ledf2+0xc0>)
   1880a:	030e      	lsls	r6, r1, #12
   1880c:	004d      	lsls	r5, r1, #1
   1880e:	0fc9      	lsrs	r1, r1, #31
   18810:	4684      	mov	ip, r0
   18812:	0b36      	lsrs	r6, r6, #12
   18814:	0d6d      	lsrs	r5, r5, #21
   18816:	468b      	mov	fp, r1
   18818:	4690      	mov	r8, r2
   1881a:	0b3f      	lsrs	r7, r7, #12
   1881c:	0d64      	lsrs	r4, r4, #21
   1881e:	429d      	cmp	r5, r3
   18820:	d020      	beq.n	18864 <__ledf2+0x70>
   18822:	4b24      	ldr	r3, [pc, #144]	; (188b4 <__ledf2+0xc0>)
   18824:	429c      	cmp	r4, r3
   18826:	d022      	beq.n	1886e <__ledf2+0x7a>
   18828:	2d00      	cmp	r5, #0
   1882a:	d112      	bne.n	18852 <__ledf2+0x5e>
   1882c:	4330      	orrs	r0, r6
   1882e:	4243      	negs	r3, r0
   18830:	4143      	adcs	r3, r0
   18832:	b2db      	uxtb	r3, r3
   18834:	2c00      	cmp	r4, #0
   18836:	d01f      	beq.n	18878 <__ledf2+0x84>
   18838:	2b00      	cmp	r3, #0
   1883a:	d00c      	beq.n	18856 <__ledf2+0x62>
   1883c:	464b      	mov	r3, r9
   1883e:	2001      	movs	r0, #1
   18840:	3b01      	subs	r3, #1
   18842:	4303      	orrs	r3, r0
   18844:	0018      	movs	r0, r3
   18846:	bc3c      	pop	{r2, r3, r4, r5}
   18848:	4690      	mov	r8, r2
   1884a:	4699      	mov	r9, r3
   1884c:	46a2      	mov	sl, r4
   1884e:	46ab      	mov	fp, r5
   18850:	bdf0      	pop	{r4, r5, r6, r7, pc}
   18852:	2c00      	cmp	r4, #0
   18854:	d016      	beq.n	18884 <__ledf2+0x90>
   18856:	45cb      	cmp	fp, r9
   18858:	d017      	beq.n	1888a <__ledf2+0x96>
   1885a:	465b      	mov	r3, fp
   1885c:	4259      	negs	r1, r3
   1885e:	2301      	movs	r3, #1
   18860:	430b      	orrs	r3, r1
   18862:	e7ef      	b.n	18844 <__ledf2+0x50>
   18864:	0031      	movs	r1, r6
   18866:	2302      	movs	r3, #2
   18868:	4301      	orrs	r1, r0
   1886a:	d1eb      	bne.n	18844 <__ledf2+0x50>
   1886c:	e7d9      	b.n	18822 <__ledf2+0x2e>
   1886e:	0039      	movs	r1, r7
   18870:	2302      	movs	r3, #2
   18872:	4311      	orrs	r1, r2
   18874:	d1e6      	bne.n	18844 <__ledf2+0x50>
   18876:	e7d7      	b.n	18828 <__ledf2+0x34>
   18878:	433a      	orrs	r2, r7
   1887a:	d1dd      	bne.n	18838 <__ledf2+0x44>
   1887c:	2300      	movs	r3, #0
   1887e:	2800      	cmp	r0, #0
   18880:	d0e0      	beq.n	18844 <__ledf2+0x50>
   18882:	e7ea      	b.n	1885a <__ledf2+0x66>
   18884:	433a      	orrs	r2, r7
   18886:	d1e6      	bne.n	18856 <__ledf2+0x62>
   18888:	e7e7      	b.n	1885a <__ledf2+0x66>
   1888a:	42a5      	cmp	r5, r4
   1888c:	dce5      	bgt.n	1885a <__ledf2+0x66>
   1888e:	db05      	blt.n	1889c <__ledf2+0xa8>
   18890:	42be      	cmp	r6, r7
   18892:	d8e2      	bhi.n	1885a <__ledf2+0x66>
   18894:	d007      	beq.n	188a6 <__ledf2+0xb2>
   18896:	2300      	movs	r3, #0
   18898:	42be      	cmp	r6, r7
   1889a:	d2d3      	bcs.n	18844 <__ledf2+0x50>
   1889c:	4659      	mov	r1, fp
   1889e:	2301      	movs	r3, #1
   188a0:	3901      	subs	r1, #1
   188a2:	430b      	orrs	r3, r1
   188a4:	e7ce      	b.n	18844 <__ledf2+0x50>
   188a6:	45c4      	cmp	ip, r8
   188a8:	d8d7      	bhi.n	1885a <__ledf2+0x66>
   188aa:	2300      	movs	r3, #0
   188ac:	45c4      	cmp	ip, r8
   188ae:	d3f5      	bcc.n	1889c <__ledf2+0xa8>
   188b0:	e7c8      	b.n	18844 <__ledf2+0x50>
   188b2:	46c0      	nop			; (mov r8, r8)
   188b4:	000007ff 	.word	0x000007ff

000188b8 <__aeabi_dmul>:
   188b8:	b5f0      	push	{r4, r5, r6, r7, lr}
   188ba:	4657      	mov	r7, sl
   188bc:	4645      	mov	r5, r8
   188be:	46de      	mov	lr, fp
   188c0:	464e      	mov	r6, r9
   188c2:	b5e0      	push	{r5, r6, r7, lr}
   188c4:	030c      	lsls	r4, r1, #12
   188c6:	4698      	mov	r8, r3
   188c8:	004e      	lsls	r6, r1, #1
   188ca:	0b23      	lsrs	r3, r4, #12
   188cc:	b087      	sub	sp, #28
   188ce:	0007      	movs	r7, r0
   188d0:	4692      	mov	sl, r2
   188d2:	469b      	mov	fp, r3
   188d4:	0d76      	lsrs	r6, r6, #21
   188d6:	0fcd      	lsrs	r5, r1, #31
   188d8:	2e00      	cmp	r6, #0
   188da:	d06b      	beq.n	189b4 <__aeabi_dmul+0xfc>
   188dc:	4b6d      	ldr	r3, [pc, #436]	; (18a94 <__aeabi_dmul+0x1dc>)
   188de:	429e      	cmp	r6, r3
   188e0:	d035      	beq.n	1894e <__aeabi_dmul+0x96>
   188e2:	2480      	movs	r4, #128	; 0x80
   188e4:	465b      	mov	r3, fp
   188e6:	0f42      	lsrs	r2, r0, #29
   188e8:	0424      	lsls	r4, r4, #16
   188ea:	00db      	lsls	r3, r3, #3
   188ec:	4314      	orrs	r4, r2
   188ee:	431c      	orrs	r4, r3
   188f0:	00c3      	lsls	r3, r0, #3
   188f2:	4699      	mov	r9, r3
   188f4:	4b68      	ldr	r3, [pc, #416]	; (18a98 <__aeabi_dmul+0x1e0>)
   188f6:	46a3      	mov	fp, r4
   188f8:	469c      	mov	ip, r3
   188fa:	2300      	movs	r3, #0
   188fc:	2700      	movs	r7, #0
   188fe:	4466      	add	r6, ip
   18900:	9302      	str	r3, [sp, #8]
   18902:	4643      	mov	r3, r8
   18904:	031c      	lsls	r4, r3, #12
   18906:	005a      	lsls	r2, r3, #1
   18908:	0fdb      	lsrs	r3, r3, #31
   1890a:	4650      	mov	r0, sl
   1890c:	0b24      	lsrs	r4, r4, #12
   1890e:	0d52      	lsrs	r2, r2, #21
   18910:	4698      	mov	r8, r3
   18912:	d100      	bne.n	18916 <__aeabi_dmul+0x5e>
   18914:	e076      	b.n	18a04 <__aeabi_dmul+0x14c>
   18916:	4b5f      	ldr	r3, [pc, #380]	; (18a94 <__aeabi_dmul+0x1dc>)
   18918:	429a      	cmp	r2, r3
   1891a:	d06d      	beq.n	189f8 <__aeabi_dmul+0x140>
   1891c:	2380      	movs	r3, #128	; 0x80
   1891e:	0f41      	lsrs	r1, r0, #29
   18920:	041b      	lsls	r3, r3, #16
   18922:	430b      	orrs	r3, r1
   18924:	495c      	ldr	r1, [pc, #368]	; (18a98 <__aeabi_dmul+0x1e0>)
   18926:	00e4      	lsls	r4, r4, #3
   18928:	468c      	mov	ip, r1
   1892a:	431c      	orrs	r4, r3
   1892c:	00c3      	lsls	r3, r0, #3
   1892e:	2000      	movs	r0, #0
   18930:	4462      	add	r2, ip
   18932:	4641      	mov	r1, r8
   18934:	18b6      	adds	r6, r6, r2
   18936:	4069      	eors	r1, r5
   18938:	1c72      	adds	r2, r6, #1
   1893a:	9101      	str	r1, [sp, #4]
   1893c:	4694      	mov	ip, r2
   1893e:	4307      	orrs	r7, r0
   18940:	2f0f      	cmp	r7, #15
   18942:	d900      	bls.n	18946 <__aeabi_dmul+0x8e>
   18944:	e0b0      	b.n	18aa8 <__aeabi_dmul+0x1f0>
   18946:	4a55      	ldr	r2, [pc, #340]	; (18a9c <__aeabi_dmul+0x1e4>)
   18948:	00bf      	lsls	r7, r7, #2
   1894a:	59d2      	ldr	r2, [r2, r7]
   1894c:	4697      	mov	pc, r2
   1894e:	465b      	mov	r3, fp
   18950:	4303      	orrs	r3, r0
   18952:	4699      	mov	r9, r3
   18954:	d000      	beq.n	18958 <__aeabi_dmul+0xa0>
   18956:	e087      	b.n	18a68 <__aeabi_dmul+0x1b0>
   18958:	2300      	movs	r3, #0
   1895a:	469b      	mov	fp, r3
   1895c:	3302      	adds	r3, #2
   1895e:	2708      	movs	r7, #8
   18960:	9302      	str	r3, [sp, #8]
   18962:	e7ce      	b.n	18902 <__aeabi_dmul+0x4a>
   18964:	4642      	mov	r2, r8
   18966:	9201      	str	r2, [sp, #4]
   18968:	2802      	cmp	r0, #2
   1896a:	d067      	beq.n	18a3c <__aeabi_dmul+0x184>
   1896c:	2803      	cmp	r0, #3
   1896e:	d100      	bne.n	18972 <__aeabi_dmul+0xba>
   18970:	e20e      	b.n	18d90 <__aeabi_dmul+0x4d8>
   18972:	2801      	cmp	r0, #1
   18974:	d000      	beq.n	18978 <__aeabi_dmul+0xc0>
   18976:	e162      	b.n	18c3e <__aeabi_dmul+0x386>
   18978:	2300      	movs	r3, #0
   1897a:	2400      	movs	r4, #0
   1897c:	2200      	movs	r2, #0
   1897e:	4699      	mov	r9, r3
   18980:	9901      	ldr	r1, [sp, #4]
   18982:	4001      	ands	r1, r0
   18984:	b2cd      	uxtb	r5, r1
   18986:	2100      	movs	r1, #0
   18988:	0312      	lsls	r2, r2, #12
   1898a:	0d0b      	lsrs	r3, r1, #20
   1898c:	0b12      	lsrs	r2, r2, #12
   1898e:	051b      	lsls	r3, r3, #20
   18990:	4313      	orrs	r3, r2
   18992:	4a43      	ldr	r2, [pc, #268]	; (18aa0 <__aeabi_dmul+0x1e8>)
   18994:	0524      	lsls	r4, r4, #20
   18996:	4013      	ands	r3, r2
   18998:	431c      	orrs	r4, r3
   1899a:	0064      	lsls	r4, r4, #1
   1899c:	07ed      	lsls	r5, r5, #31
   1899e:	0864      	lsrs	r4, r4, #1
   189a0:	432c      	orrs	r4, r5
   189a2:	4648      	mov	r0, r9
   189a4:	0021      	movs	r1, r4
   189a6:	b007      	add	sp, #28
   189a8:	bc3c      	pop	{r2, r3, r4, r5}
   189aa:	4690      	mov	r8, r2
   189ac:	4699      	mov	r9, r3
   189ae:	46a2      	mov	sl, r4
   189b0:	46ab      	mov	fp, r5
   189b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   189b4:	4303      	orrs	r3, r0
   189b6:	4699      	mov	r9, r3
   189b8:	d04f      	beq.n	18a5a <__aeabi_dmul+0x1a2>
   189ba:	465b      	mov	r3, fp
   189bc:	2b00      	cmp	r3, #0
   189be:	d100      	bne.n	189c2 <__aeabi_dmul+0x10a>
   189c0:	e189      	b.n	18cd6 <__aeabi_dmul+0x41e>
   189c2:	4658      	mov	r0, fp
   189c4:	f000 fe0e 	bl	195e4 <__clzsi2>
   189c8:	0003      	movs	r3, r0
   189ca:	3b0b      	subs	r3, #11
   189cc:	2b1c      	cmp	r3, #28
   189ce:	dd00      	ble.n	189d2 <__aeabi_dmul+0x11a>
   189d0:	e17a      	b.n	18cc8 <__aeabi_dmul+0x410>
   189d2:	221d      	movs	r2, #29
   189d4:	1ad3      	subs	r3, r2, r3
   189d6:	003a      	movs	r2, r7
   189d8:	0001      	movs	r1, r0
   189da:	465c      	mov	r4, fp
   189dc:	40da      	lsrs	r2, r3
   189de:	3908      	subs	r1, #8
   189e0:	408c      	lsls	r4, r1
   189e2:	0013      	movs	r3, r2
   189e4:	408f      	lsls	r7, r1
   189e6:	4323      	orrs	r3, r4
   189e8:	469b      	mov	fp, r3
   189ea:	46b9      	mov	r9, r7
   189ec:	2300      	movs	r3, #0
   189ee:	4e2d      	ldr	r6, [pc, #180]	; (18aa4 <__aeabi_dmul+0x1ec>)
   189f0:	2700      	movs	r7, #0
   189f2:	1a36      	subs	r6, r6, r0
   189f4:	9302      	str	r3, [sp, #8]
   189f6:	e784      	b.n	18902 <__aeabi_dmul+0x4a>
   189f8:	4653      	mov	r3, sl
   189fa:	4323      	orrs	r3, r4
   189fc:	d12a      	bne.n	18a54 <__aeabi_dmul+0x19c>
   189fe:	2400      	movs	r4, #0
   18a00:	2002      	movs	r0, #2
   18a02:	e796      	b.n	18932 <__aeabi_dmul+0x7a>
   18a04:	4653      	mov	r3, sl
   18a06:	4323      	orrs	r3, r4
   18a08:	d020      	beq.n	18a4c <__aeabi_dmul+0x194>
   18a0a:	2c00      	cmp	r4, #0
   18a0c:	d100      	bne.n	18a10 <__aeabi_dmul+0x158>
   18a0e:	e157      	b.n	18cc0 <__aeabi_dmul+0x408>
   18a10:	0020      	movs	r0, r4
   18a12:	f000 fde7 	bl	195e4 <__clzsi2>
   18a16:	0003      	movs	r3, r0
   18a18:	3b0b      	subs	r3, #11
   18a1a:	2b1c      	cmp	r3, #28
   18a1c:	dd00      	ble.n	18a20 <__aeabi_dmul+0x168>
   18a1e:	e149      	b.n	18cb4 <__aeabi_dmul+0x3fc>
   18a20:	211d      	movs	r1, #29
   18a22:	1acb      	subs	r3, r1, r3
   18a24:	4651      	mov	r1, sl
   18a26:	0002      	movs	r2, r0
   18a28:	40d9      	lsrs	r1, r3
   18a2a:	4653      	mov	r3, sl
   18a2c:	3a08      	subs	r2, #8
   18a2e:	4094      	lsls	r4, r2
   18a30:	4093      	lsls	r3, r2
   18a32:	430c      	orrs	r4, r1
   18a34:	4a1b      	ldr	r2, [pc, #108]	; (18aa4 <__aeabi_dmul+0x1ec>)
   18a36:	1a12      	subs	r2, r2, r0
   18a38:	2000      	movs	r0, #0
   18a3a:	e77a      	b.n	18932 <__aeabi_dmul+0x7a>
   18a3c:	2501      	movs	r5, #1
   18a3e:	9b01      	ldr	r3, [sp, #4]
   18a40:	4c14      	ldr	r4, [pc, #80]	; (18a94 <__aeabi_dmul+0x1dc>)
   18a42:	401d      	ands	r5, r3
   18a44:	2300      	movs	r3, #0
   18a46:	2200      	movs	r2, #0
   18a48:	4699      	mov	r9, r3
   18a4a:	e79c      	b.n	18986 <__aeabi_dmul+0xce>
   18a4c:	2400      	movs	r4, #0
   18a4e:	2200      	movs	r2, #0
   18a50:	2001      	movs	r0, #1
   18a52:	e76e      	b.n	18932 <__aeabi_dmul+0x7a>
   18a54:	4653      	mov	r3, sl
   18a56:	2003      	movs	r0, #3
   18a58:	e76b      	b.n	18932 <__aeabi_dmul+0x7a>
   18a5a:	2300      	movs	r3, #0
   18a5c:	469b      	mov	fp, r3
   18a5e:	3301      	adds	r3, #1
   18a60:	2704      	movs	r7, #4
   18a62:	2600      	movs	r6, #0
   18a64:	9302      	str	r3, [sp, #8]
   18a66:	e74c      	b.n	18902 <__aeabi_dmul+0x4a>
   18a68:	2303      	movs	r3, #3
   18a6a:	4681      	mov	r9, r0
   18a6c:	270c      	movs	r7, #12
   18a6e:	9302      	str	r3, [sp, #8]
   18a70:	e747      	b.n	18902 <__aeabi_dmul+0x4a>
   18a72:	2280      	movs	r2, #128	; 0x80
   18a74:	2300      	movs	r3, #0
   18a76:	2500      	movs	r5, #0
   18a78:	0312      	lsls	r2, r2, #12
   18a7a:	4699      	mov	r9, r3
   18a7c:	4c05      	ldr	r4, [pc, #20]	; (18a94 <__aeabi_dmul+0x1dc>)
   18a7e:	e782      	b.n	18986 <__aeabi_dmul+0xce>
   18a80:	465c      	mov	r4, fp
   18a82:	464b      	mov	r3, r9
   18a84:	9802      	ldr	r0, [sp, #8]
   18a86:	e76f      	b.n	18968 <__aeabi_dmul+0xb0>
   18a88:	465c      	mov	r4, fp
   18a8a:	464b      	mov	r3, r9
   18a8c:	9501      	str	r5, [sp, #4]
   18a8e:	9802      	ldr	r0, [sp, #8]
   18a90:	e76a      	b.n	18968 <__aeabi_dmul+0xb0>
   18a92:	46c0      	nop			; (mov r8, r8)
   18a94:	000007ff 	.word	0x000007ff
   18a98:	fffffc01 	.word	0xfffffc01
   18a9c:	00020484 	.word	0x00020484
   18aa0:	800fffff 	.word	0x800fffff
   18aa4:	fffffc0d 	.word	0xfffffc0d
   18aa8:	464a      	mov	r2, r9
   18aaa:	4649      	mov	r1, r9
   18aac:	0c17      	lsrs	r7, r2, #16
   18aae:	0c1a      	lsrs	r2, r3, #16
   18ab0:	041b      	lsls	r3, r3, #16
   18ab2:	0c1b      	lsrs	r3, r3, #16
   18ab4:	0408      	lsls	r0, r1, #16
   18ab6:	0019      	movs	r1, r3
   18ab8:	0c00      	lsrs	r0, r0, #16
   18aba:	4341      	muls	r1, r0
   18abc:	0015      	movs	r5, r2
   18abe:	4688      	mov	r8, r1
   18ac0:	0019      	movs	r1, r3
   18ac2:	437d      	muls	r5, r7
   18ac4:	4379      	muls	r1, r7
   18ac6:	9503      	str	r5, [sp, #12]
   18ac8:	4689      	mov	r9, r1
   18aca:	0029      	movs	r1, r5
   18acc:	0015      	movs	r5, r2
   18ace:	4345      	muls	r5, r0
   18ad0:	444d      	add	r5, r9
   18ad2:	9502      	str	r5, [sp, #8]
   18ad4:	4645      	mov	r5, r8
   18ad6:	0c2d      	lsrs	r5, r5, #16
   18ad8:	46aa      	mov	sl, r5
   18ada:	9d02      	ldr	r5, [sp, #8]
   18adc:	4455      	add	r5, sl
   18ade:	45a9      	cmp	r9, r5
   18ae0:	d906      	bls.n	18af0 <__aeabi_dmul+0x238>
   18ae2:	468a      	mov	sl, r1
   18ae4:	2180      	movs	r1, #128	; 0x80
   18ae6:	0249      	lsls	r1, r1, #9
   18ae8:	4689      	mov	r9, r1
   18aea:	44ca      	add	sl, r9
   18aec:	4651      	mov	r1, sl
   18aee:	9103      	str	r1, [sp, #12]
   18af0:	0c29      	lsrs	r1, r5, #16
   18af2:	9104      	str	r1, [sp, #16]
   18af4:	4641      	mov	r1, r8
   18af6:	0409      	lsls	r1, r1, #16
   18af8:	042d      	lsls	r5, r5, #16
   18afa:	0c09      	lsrs	r1, r1, #16
   18afc:	4688      	mov	r8, r1
   18afe:	0029      	movs	r1, r5
   18b00:	0c25      	lsrs	r5, r4, #16
   18b02:	0424      	lsls	r4, r4, #16
   18b04:	4441      	add	r1, r8
   18b06:	0c24      	lsrs	r4, r4, #16
   18b08:	9105      	str	r1, [sp, #20]
   18b0a:	0021      	movs	r1, r4
   18b0c:	4341      	muls	r1, r0
   18b0e:	4688      	mov	r8, r1
   18b10:	0021      	movs	r1, r4
   18b12:	4379      	muls	r1, r7
   18b14:	468a      	mov	sl, r1
   18b16:	4368      	muls	r0, r5
   18b18:	4641      	mov	r1, r8
   18b1a:	4450      	add	r0, sl
   18b1c:	4681      	mov	r9, r0
   18b1e:	0c08      	lsrs	r0, r1, #16
   18b20:	4448      	add	r0, r9
   18b22:	436f      	muls	r7, r5
   18b24:	4582      	cmp	sl, r0
   18b26:	d903      	bls.n	18b30 <__aeabi_dmul+0x278>
   18b28:	2180      	movs	r1, #128	; 0x80
   18b2a:	0249      	lsls	r1, r1, #9
   18b2c:	4689      	mov	r9, r1
   18b2e:	444f      	add	r7, r9
   18b30:	0c01      	lsrs	r1, r0, #16
   18b32:	4689      	mov	r9, r1
   18b34:	0039      	movs	r1, r7
   18b36:	4449      	add	r1, r9
   18b38:	9102      	str	r1, [sp, #8]
   18b3a:	4641      	mov	r1, r8
   18b3c:	040f      	lsls	r7, r1, #16
   18b3e:	9904      	ldr	r1, [sp, #16]
   18b40:	0c3f      	lsrs	r7, r7, #16
   18b42:	4688      	mov	r8, r1
   18b44:	0400      	lsls	r0, r0, #16
   18b46:	19c0      	adds	r0, r0, r7
   18b48:	4480      	add	r8, r0
   18b4a:	4641      	mov	r1, r8
   18b4c:	9104      	str	r1, [sp, #16]
   18b4e:	4659      	mov	r1, fp
   18b50:	0c0f      	lsrs	r7, r1, #16
   18b52:	0409      	lsls	r1, r1, #16
   18b54:	0c09      	lsrs	r1, r1, #16
   18b56:	4688      	mov	r8, r1
   18b58:	4359      	muls	r1, r3
   18b5a:	468a      	mov	sl, r1
   18b5c:	0039      	movs	r1, r7
   18b5e:	4351      	muls	r1, r2
   18b60:	4689      	mov	r9, r1
   18b62:	4641      	mov	r1, r8
   18b64:	434a      	muls	r2, r1
   18b66:	4651      	mov	r1, sl
   18b68:	0c09      	lsrs	r1, r1, #16
   18b6a:	468b      	mov	fp, r1
   18b6c:	437b      	muls	r3, r7
   18b6e:	18d2      	adds	r2, r2, r3
   18b70:	445a      	add	r2, fp
   18b72:	4293      	cmp	r3, r2
   18b74:	d903      	bls.n	18b7e <__aeabi_dmul+0x2c6>
   18b76:	2380      	movs	r3, #128	; 0x80
   18b78:	025b      	lsls	r3, r3, #9
   18b7a:	469b      	mov	fp, r3
   18b7c:	44d9      	add	r9, fp
   18b7e:	4651      	mov	r1, sl
   18b80:	0409      	lsls	r1, r1, #16
   18b82:	0c09      	lsrs	r1, r1, #16
   18b84:	468a      	mov	sl, r1
   18b86:	4641      	mov	r1, r8
   18b88:	4361      	muls	r1, r4
   18b8a:	437c      	muls	r4, r7
   18b8c:	0c13      	lsrs	r3, r2, #16
   18b8e:	0412      	lsls	r2, r2, #16
   18b90:	444b      	add	r3, r9
   18b92:	4452      	add	r2, sl
   18b94:	46a1      	mov	r9, r4
   18b96:	468a      	mov	sl, r1
   18b98:	003c      	movs	r4, r7
   18b9a:	4641      	mov	r1, r8
   18b9c:	436c      	muls	r4, r5
   18b9e:	434d      	muls	r5, r1
   18ba0:	4651      	mov	r1, sl
   18ba2:	444d      	add	r5, r9
   18ba4:	0c0f      	lsrs	r7, r1, #16
   18ba6:	197d      	adds	r5, r7, r5
   18ba8:	45a9      	cmp	r9, r5
   18baa:	d903      	bls.n	18bb4 <__aeabi_dmul+0x2fc>
   18bac:	2180      	movs	r1, #128	; 0x80
   18bae:	0249      	lsls	r1, r1, #9
   18bb0:	4688      	mov	r8, r1
   18bb2:	4444      	add	r4, r8
   18bb4:	9f04      	ldr	r7, [sp, #16]
   18bb6:	9903      	ldr	r1, [sp, #12]
   18bb8:	46b8      	mov	r8, r7
   18bba:	4441      	add	r1, r8
   18bbc:	468b      	mov	fp, r1
   18bbe:	4583      	cmp	fp, r0
   18bc0:	4180      	sbcs	r0, r0
   18bc2:	4241      	negs	r1, r0
   18bc4:	4688      	mov	r8, r1
   18bc6:	4651      	mov	r1, sl
   18bc8:	0408      	lsls	r0, r1, #16
   18bca:	042f      	lsls	r7, r5, #16
   18bcc:	0c00      	lsrs	r0, r0, #16
   18bce:	183f      	adds	r7, r7, r0
   18bd0:	4658      	mov	r0, fp
   18bd2:	9902      	ldr	r1, [sp, #8]
   18bd4:	1810      	adds	r0, r2, r0
   18bd6:	4689      	mov	r9, r1
   18bd8:	4290      	cmp	r0, r2
   18bda:	4192      	sbcs	r2, r2
   18bdc:	444f      	add	r7, r9
   18bde:	46ba      	mov	sl, r7
   18be0:	4252      	negs	r2, r2
   18be2:	4699      	mov	r9, r3
   18be4:	4693      	mov	fp, r2
   18be6:	44c2      	add	sl, r8
   18be8:	44d1      	add	r9, sl
   18bea:	44cb      	add	fp, r9
   18bec:	428f      	cmp	r7, r1
   18bee:	41bf      	sbcs	r7, r7
   18bf0:	45c2      	cmp	sl, r8
   18bf2:	4189      	sbcs	r1, r1
   18bf4:	4599      	cmp	r9, r3
   18bf6:	419b      	sbcs	r3, r3
   18bf8:	4593      	cmp	fp, r2
   18bfa:	4192      	sbcs	r2, r2
   18bfc:	427f      	negs	r7, r7
   18bfe:	4249      	negs	r1, r1
   18c00:	0c2d      	lsrs	r5, r5, #16
   18c02:	4252      	negs	r2, r2
   18c04:	430f      	orrs	r7, r1
   18c06:	425b      	negs	r3, r3
   18c08:	4313      	orrs	r3, r2
   18c0a:	197f      	adds	r7, r7, r5
   18c0c:	18ff      	adds	r7, r7, r3
   18c0e:	465b      	mov	r3, fp
   18c10:	193c      	adds	r4, r7, r4
   18c12:	0ddb      	lsrs	r3, r3, #23
   18c14:	9a05      	ldr	r2, [sp, #20]
   18c16:	0264      	lsls	r4, r4, #9
   18c18:	431c      	orrs	r4, r3
   18c1a:	0243      	lsls	r3, r0, #9
   18c1c:	4313      	orrs	r3, r2
   18c1e:	1e5d      	subs	r5, r3, #1
   18c20:	41ab      	sbcs	r3, r5
   18c22:	465a      	mov	r2, fp
   18c24:	0dc0      	lsrs	r0, r0, #23
   18c26:	4303      	orrs	r3, r0
   18c28:	0252      	lsls	r2, r2, #9
   18c2a:	4313      	orrs	r3, r2
   18c2c:	01e2      	lsls	r2, r4, #7
   18c2e:	d556      	bpl.n	18cde <__aeabi_dmul+0x426>
   18c30:	2001      	movs	r0, #1
   18c32:	085a      	lsrs	r2, r3, #1
   18c34:	4003      	ands	r3, r0
   18c36:	4313      	orrs	r3, r2
   18c38:	07e2      	lsls	r2, r4, #31
   18c3a:	4313      	orrs	r3, r2
   18c3c:	0864      	lsrs	r4, r4, #1
   18c3e:	485a      	ldr	r0, [pc, #360]	; (18da8 <__aeabi_dmul+0x4f0>)
   18c40:	4460      	add	r0, ip
   18c42:	2800      	cmp	r0, #0
   18c44:	dd4d      	ble.n	18ce2 <__aeabi_dmul+0x42a>
   18c46:	075a      	lsls	r2, r3, #29
   18c48:	d009      	beq.n	18c5e <__aeabi_dmul+0x3a6>
   18c4a:	220f      	movs	r2, #15
   18c4c:	401a      	ands	r2, r3
   18c4e:	2a04      	cmp	r2, #4
   18c50:	d005      	beq.n	18c5e <__aeabi_dmul+0x3a6>
   18c52:	1d1a      	adds	r2, r3, #4
   18c54:	429a      	cmp	r2, r3
   18c56:	419b      	sbcs	r3, r3
   18c58:	425b      	negs	r3, r3
   18c5a:	18e4      	adds	r4, r4, r3
   18c5c:	0013      	movs	r3, r2
   18c5e:	01e2      	lsls	r2, r4, #7
   18c60:	d504      	bpl.n	18c6c <__aeabi_dmul+0x3b4>
   18c62:	2080      	movs	r0, #128	; 0x80
   18c64:	4a51      	ldr	r2, [pc, #324]	; (18dac <__aeabi_dmul+0x4f4>)
   18c66:	00c0      	lsls	r0, r0, #3
   18c68:	4014      	ands	r4, r2
   18c6a:	4460      	add	r0, ip
   18c6c:	4a50      	ldr	r2, [pc, #320]	; (18db0 <__aeabi_dmul+0x4f8>)
   18c6e:	4290      	cmp	r0, r2
   18c70:	dd00      	ble.n	18c74 <__aeabi_dmul+0x3bc>
   18c72:	e6e3      	b.n	18a3c <__aeabi_dmul+0x184>
   18c74:	2501      	movs	r5, #1
   18c76:	08db      	lsrs	r3, r3, #3
   18c78:	0762      	lsls	r2, r4, #29
   18c7a:	431a      	orrs	r2, r3
   18c7c:	0264      	lsls	r4, r4, #9
   18c7e:	9b01      	ldr	r3, [sp, #4]
   18c80:	4691      	mov	r9, r2
   18c82:	0b22      	lsrs	r2, r4, #12
   18c84:	0544      	lsls	r4, r0, #21
   18c86:	0d64      	lsrs	r4, r4, #21
   18c88:	401d      	ands	r5, r3
   18c8a:	e67c      	b.n	18986 <__aeabi_dmul+0xce>
   18c8c:	2280      	movs	r2, #128	; 0x80
   18c8e:	4659      	mov	r1, fp
   18c90:	0312      	lsls	r2, r2, #12
   18c92:	4211      	tst	r1, r2
   18c94:	d008      	beq.n	18ca8 <__aeabi_dmul+0x3f0>
   18c96:	4214      	tst	r4, r2
   18c98:	d106      	bne.n	18ca8 <__aeabi_dmul+0x3f0>
   18c9a:	4322      	orrs	r2, r4
   18c9c:	0312      	lsls	r2, r2, #12
   18c9e:	0b12      	lsrs	r2, r2, #12
   18ca0:	4645      	mov	r5, r8
   18ca2:	4699      	mov	r9, r3
   18ca4:	4c43      	ldr	r4, [pc, #268]	; (18db4 <__aeabi_dmul+0x4fc>)
   18ca6:	e66e      	b.n	18986 <__aeabi_dmul+0xce>
   18ca8:	465b      	mov	r3, fp
   18caa:	431a      	orrs	r2, r3
   18cac:	0312      	lsls	r2, r2, #12
   18cae:	0b12      	lsrs	r2, r2, #12
   18cb0:	4c40      	ldr	r4, [pc, #256]	; (18db4 <__aeabi_dmul+0x4fc>)
   18cb2:	e668      	b.n	18986 <__aeabi_dmul+0xce>
   18cb4:	0003      	movs	r3, r0
   18cb6:	4654      	mov	r4, sl
   18cb8:	3b28      	subs	r3, #40	; 0x28
   18cba:	409c      	lsls	r4, r3
   18cbc:	2300      	movs	r3, #0
   18cbe:	e6b9      	b.n	18a34 <__aeabi_dmul+0x17c>
   18cc0:	f000 fc90 	bl	195e4 <__clzsi2>
   18cc4:	3020      	adds	r0, #32
   18cc6:	e6a6      	b.n	18a16 <__aeabi_dmul+0x15e>
   18cc8:	0003      	movs	r3, r0
   18cca:	3b28      	subs	r3, #40	; 0x28
   18ccc:	409f      	lsls	r7, r3
   18cce:	2300      	movs	r3, #0
   18cd0:	46bb      	mov	fp, r7
   18cd2:	4699      	mov	r9, r3
   18cd4:	e68a      	b.n	189ec <__aeabi_dmul+0x134>
   18cd6:	f000 fc85 	bl	195e4 <__clzsi2>
   18cda:	3020      	adds	r0, #32
   18cdc:	e674      	b.n	189c8 <__aeabi_dmul+0x110>
   18cde:	46b4      	mov	ip, r6
   18ce0:	e7ad      	b.n	18c3e <__aeabi_dmul+0x386>
   18ce2:	2501      	movs	r5, #1
   18ce4:	1a2a      	subs	r2, r5, r0
   18ce6:	2a38      	cmp	r2, #56	; 0x38
   18ce8:	dd06      	ble.n	18cf8 <__aeabi_dmul+0x440>
   18cea:	9b01      	ldr	r3, [sp, #4]
   18cec:	2400      	movs	r4, #0
   18cee:	401d      	ands	r5, r3
   18cf0:	2300      	movs	r3, #0
   18cf2:	2200      	movs	r2, #0
   18cf4:	4699      	mov	r9, r3
   18cf6:	e646      	b.n	18986 <__aeabi_dmul+0xce>
   18cf8:	2a1f      	cmp	r2, #31
   18cfa:	dc21      	bgt.n	18d40 <__aeabi_dmul+0x488>
   18cfc:	2520      	movs	r5, #32
   18cfe:	0020      	movs	r0, r4
   18d00:	1aad      	subs	r5, r5, r2
   18d02:	001e      	movs	r6, r3
   18d04:	40ab      	lsls	r3, r5
   18d06:	40a8      	lsls	r0, r5
   18d08:	40d6      	lsrs	r6, r2
   18d0a:	1e5d      	subs	r5, r3, #1
   18d0c:	41ab      	sbcs	r3, r5
   18d0e:	4330      	orrs	r0, r6
   18d10:	4318      	orrs	r0, r3
   18d12:	40d4      	lsrs	r4, r2
   18d14:	0743      	lsls	r3, r0, #29
   18d16:	d009      	beq.n	18d2c <__aeabi_dmul+0x474>
   18d18:	230f      	movs	r3, #15
   18d1a:	4003      	ands	r3, r0
   18d1c:	2b04      	cmp	r3, #4
   18d1e:	d005      	beq.n	18d2c <__aeabi_dmul+0x474>
   18d20:	0003      	movs	r3, r0
   18d22:	1d18      	adds	r0, r3, #4
   18d24:	4298      	cmp	r0, r3
   18d26:	419b      	sbcs	r3, r3
   18d28:	425b      	negs	r3, r3
   18d2a:	18e4      	adds	r4, r4, r3
   18d2c:	0223      	lsls	r3, r4, #8
   18d2e:	d521      	bpl.n	18d74 <__aeabi_dmul+0x4bc>
   18d30:	2501      	movs	r5, #1
   18d32:	9b01      	ldr	r3, [sp, #4]
   18d34:	2401      	movs	r4, #1
   18d36:	401d      	ands	r5, r3
   18d38:	2300      	movs	r3, #0
   18d3a:	2200      	movs	r2, #0
   18d3c:	4699      	mov	r9, r3
   18d3e:	e622      	b.n	18986 <__aeabi_dmul+0xce>
   18d40:	251f      	movs	r5, #31
   18d42:	0021      	movs	r1, r4
   18d44:	426d      	negs	r5, r5
   18d46:	1a28      	subs	r0, r5, r0
   18d48:	40c1      	lsrs	r1, r0
   18d4a:	0008      	movs	r0, r1
   18d4c:	2a20      	cmp	r2, #32
   18d4e:	d01d      	beq.n	18d8c <__aeabi_dmul+0x4d4>
   18d50:	355f      	adds	r5, #95	; 0x5f
   18d52:	1aaa      	subs	r2, r5, r2
   18d54:	4094      	lsls	r4, r2
   18d56:	4323      	orrs	r3, r4
   18d58:	1e5c      	subs	r4, r3, #1
   18d5a:	41a3      	sbcs	r3, r4
   18d5c:	2507      	movs	r5, #7
   18d5e:	4303      	orrs	r3, r0
   18d60:	401d      	ands	r5, r3
   18d62:	2200      	movs	r2, #0
   18d64:	2d00      	cmp	r5, #0
   18d66:	d009      	beq.n	18d7c <__aeabi_dmul+0x4c4>
   18d68:	220f      	movs	r2, #15
   18d6a:	2400      	movs	r4, #0
   18d6c:	401a      	ands	r2, r3
   18d6e:	0018      	movs	r0, r3
   18d70:	2a04      	cmp	r2, #4
   18d72:	d1d6      	bne.n	18d22 <__aeabi_dmul+0x46a>
   18d74:	0003      	movs	r3, r0
   18d76:	0765      	lsls	r5, r4, #29
   18d78:	0264      	lsls	r4, r4, #9
   18d7a:	0b22      	lsrs	r2, r4, #12
   18d7c:	08db      	lsrs	r3, r3, #3
   18d7e:	432b      	orrs	r3, r5
   18d80:	2501      	movs	r5, #1
   18d82:	4699      	mov	r9, r3
   18d84:	9b01      	ldr	r3, [sp, #4]
   18d86:	2400      	movs	r4, #0
   18d88:	401d      	ands	r5, r3
   18d8a:	e5fc      	b.n	18986 <__aeabi_dmul+0xce>
   18d8c:	2400      	movs	r4, #0
   18d8e:	e7e2      	b.n	18d56 <__aeabi_dmul+0x49e>
   18d90:	2280      	movs	r2, #128	; 0x80
   18d92:	2501      	movs	r5, #1
   18d94:	0312      	lsls	r2, r2, #12
   18d96:	4322      	orrs	r2, r4
   18d98:	9901      	ldr	r1, [sp, #4]
   18d9a:	0312      	lsls	r2, r2, #12
   18d9c:	0b12      	lsrs	r2, r2, #12
   18d9e:	400d      	ands	r5, r1
   18da0:	4699      	mov	r9, r3
   18da2:	4c04      	ldr	r4, [pc, #16]	; (18db4 <__aeabi_dmul+0x4fc>)
   18da4:	e5ef      	b.n	18986 <__aeabi_dmul+0xce>
   18da6:	46c0      	nop			; (mov r8, r8)
   18da8:	000003ff 	.word	0x000003ff
   18dac:	feffffff 	.word	0xfeffffff
   18db0:	000007fe 	.word	0x000007fe
   18db4:	000007ff 	.word	0x000007ff

00018db8 <__aeabi_dsub>:
   18db8:	b5f0      	push	{r4, r5, r6, r7, lr}
   18dba:	4646      	mov	r6, r8
   18dbc:	46d6      	mov	lr, sl
   18dbe:	464f      	mov	r7, r9
   18dc0:	030c      	lsls	r4, r1, #12
   18dc2:	b5c0      	push	{r6, r7, lr}
   18dc4:	0fcd      	lsrs	r5, r1, #31
   18dc6:	004e      	lsls	r6, r1, #1
   18dc8:	0a61      	lsrs	r1, r4, #9
   18dca:	0f44      	lsrs	r4, r0, #29
   18dcc:	430c      	orrs	r4, r1
   18dce:	00c1      	lsls	r1, r0, #3
   18dd0:	0058      	lsls	r0, r3, #1
   18dd2:	0d40      	lsrs	r0, r0, #21
   18dd4:	4684      	mov	ip, r0
   18dd6:	468a      	mov	sl, r1
   18dd8:	000f      	movs	r7, r1
   18dda:	0319      	lsls	r1, r3, #12
   18ddc:	0f50      	lsrs	r0, r2, #29
   18dde:	0a49      	lsrs	r1, r1, #9
   18de0:	4301      	orrs	r1, r0
   18de2:	48c6      	ldr	r0, [pc, #792]	; (190fc <__aeabi_dsub+0x344>)
   18de4:	0d76      	lsrs	r6, r6, #21
   18de6:	46a8      	mov	r8, r5
   18de8:	0fdb      	lsrs	r3, r3, #31
   18dea:	00d2      	lsls	r2, r2, #3
   18dec:	4584      	cmp	ip, r0
   18dee:	d100      	bne.n	18df2 <__aeabi_dsub+0x3a>
   18df0:	e0d8      	b.n	18fa4 <__aeabi_dsub+0x1ec>
   18df2:	2001      	movs	r0, #1
   18df4:	4043      	eors	r3, r0
   18df6:	42ab      	cmp	r3, r5
   18df8:	d100      	bne.n	18dfc <__aeabi_dsub+0x44>
   18dfa:	e0a6      	b.n	18f4a <__aeabi_dsub+0x192>
   18dfc:	4660      	mov	r0, ip
   18dfe:	1a35      	subs	r5, r6, r0
   18e00:	2d00      	cmp	r5, #0
   18e02:	dc00      	bgt.n	18e06 <__aeabi_dsub+0x4e>
   18e04:	e105      	b.n	19012 <__aeabi_dsub+0x25a>
   18e06:	2800      	cmp	r0, #0
   18e08:	d110      	bne.n	18e2c <__aeabi_dsub+0x74>
   18e0a:	000b      	movs	r3, r1
   18e0c:	4313      	orrs	r3, r2
   18e0e:	d100      	bne.n	18e12 <__aeabi_dsub+0x5a>
   18e10:	e0d7      	b.n	18fc2 <__aeabi_dsub+0x20a>
   18e12:	1e6b      	subs	r3, r5, #1
   18e14:	2b00      	cmp	r3, #0
   18e16:	d000      	beq.n	18e1a <__aeabi_dsub+0x62>
   18e18:	e14b      	b.n	190b2 <__aeabi_dsub+0x2fa>
   18e1a:	4653      	mov	r3, sl
   18e1c:	1a9f      	subs	r7, r3, r2
   18e1e:	45ba      	cmp	sl, r7
   18e20:	4180      	sbcs	r0, r0
   18e22:	1a64      	subs	r4, r4, r1
   18e24:	4240      	negs	r0, r0
   18e26:	1a24      	subs	r4, r4, r0
   18e28:	2601      	movs	r6, #1
   18e2a:	e01e      	b.n	18e6a <__aeabi_dsub+0xb2>
   18e2c:	4bb3      	ldr	r3, [pc, #716]	; (190fc <__aeabi_dsub+0x344>)
   18e2e:	429e      	cmp	r6, r3
   18e30:	d048      	beq.n	18ec4 <__aeabi_dsub+0x10c>
   18e32:	2380      	movs	r3, #128	; 0x80
   18e34:	041b      	lsls	r3, r3, #16
   18e36:	4319      	orrs	r1, r3
   18e38:	2d38      	cmp	r5, #56	; 0x38
   18e3a:	dd00      	ble.n	18e3e <__aeabi_dsub+0x86>
   18e3c:	e119      	b.n	19072 <__aeabi_dsub+0x2ba>
   18e3e:	2d1f      	cmp	r5, #31
   18e40:	dd00      	ble.n	18e44 <__aeabi_dsub+0x8c>
   18e42:	e14c      	b.n	190de <__aeabi_dsub+0x326>
   18e44:	2320      	movs	r3, #32
   18e46:	000f      	movs	r7, r1
   18e48:	1b5b      	subs	r3, r3, r5
   18e4a:	0010      	movs	r0, r2
   18e4c:	409a      	lsls	r2, r3
   18e4e:	409f      	lsls	r7, r3
   18e50:	40e8      	lsrs	r0, r5
   18e52:	1e53      	subs	r3, r2, #1
   18e54:	419a      	sbcs	r2, r3
   18e56:	40e9      	lsrs	r1, r5
   18e58:	4307      	orrs	r7, r0
   18e5a:	4317      	orrs	r7, r2
   18e5c:	4653      	mov	r3, sl
   18e5e:	1bdf      	subs	r7, r3, r7
   18e60:	1a61      	subs	r1, r4, r1
   18e62:	45ba      	cmp	sl, r7
   18e64:	41a4      	sbcs	r4, r4
   18e66:	4264      	negs	r4, r4
   18e68:	1b0c      	subs	r4, r1, r4
   18e6a:	0223      	lsls	r3, r4, #8
   18e6c:	d400      	bmi.n	18e70 <__aeabi_dsub+0xb8>
   18e6e:	e0c5      	b.n	18ffc <__aeabi_dsub+0x244>
   18e70:	0264      	lsls	r4, r4, #9
   18e72:	0a65      	lsrs	r5, r4, #9
   18e74:	2d00      	cmp	r5, #0
   18e76:	d100      	bne.n	18e7a <__aeabi_dsub+0xc2>
   18e78:	e0f6      	b.n	19068 <__aeabi_dsub+0x2b0>
   18e7a:	0028      	movs	r0, r5
   18e7c:	f000 fbb2 	bl	195e4 <__clzsi2>
   18e80:	0003      	movs	r3, r0
   18e82:	3b08      	subs	r3, #8
   18e84:	2b1f      	cmp	r3, #31
   18e86:	dd00      	ble.n	18e8a <__aeabi_dsub+0xd2>
   18e88:	e0e9      	b.n	1905e <__aeabi_dsub+0x2a6>
   18e8a:	2220      	movs	r2, #32
   18e8c:	003c      	movs	r4, r7
   18e8e:	1ad2      	subs	r2, r2, r3
   18e90:	409d      	lsls	r5, r3
   18e92:	40d4      	lsrs	r4, r2
   18e94:	409f      	lsls	r7, r3
   18e96:	4325      	orrs	r5, r4
   18e98:	429e      	cmp	r6, r3
   18e9a:	dd00      	ble.n	18e9e <__aeabi_dsub+0xe6>
   18e9c:	e0db      	b.n	19056 <__aeabi_dsub+0x29e>
   18e9e:	1b9e      	subs	r6, r3, r6
   18ea0:	1c73      	adds	r3, r6, #1
   18ea2:	2b1f      	cmp	r3, #31
   18ea4:	dd00      	ble.n	18ea8 <__aeabi_dsub+0xf0>
   18ea6:	e10a      	b.n	190be <__aeabi_dsub+0x306>
   18ea8:	2220      	movs	r2, #32
   18eaa:	0038      	movs	r0, r7
   18eac:	1ad2      	subs	r2, r2, r3
   18eae:	0029      	movs	r1, r5
   18eb0:	4097      	lsls	r7, r2
   18eb2:	002c      	movs	r4, r5
   18eb4:	4091      	lsls	r1, r2
   18eb6:	40d8      	lsrs	r0, r3
   18eb8:	1e7a      	subs	r2, r7, #1
   18eba:	4197      	sbcs	r7, r2
   18ebc:	40dc      	lsrs	r4, r3
   18ebe:	2600      	movs	r6, #0
   18ec0:	4301      	orrs	r1, r0
   18ec2:	430f      	orrs	r7, r1
   18ec4:	077b      	lsls	r3, r7, #29
   18ec6:	d009      	beq.n	18edc <__aeabi_dsub+0x124>
   18ec8:	230f      	movs	r3, #15
   18eca:	403b      	ands	r3, r7
   18ecc:	2b04      	cmp	r3, #4
   18ece:	d005      	beq.n	18edc <__aeabi_dsub+0x124>
   18ed0:	1d3b      	adds	r3, r7, #4
   18ed2:	42bb      	cmp	r3, r7
   18ed4:	41bf      	sbcs	r7, r7
   18ed6:	427f      	negs	r7, r7
   18ed8:	19e4      	adds	r4, r4, r7
   18eda:	001f      	movs	r7, r3
   18edc:	0223      	lsls	r3, r4, #8
   18ede:	d525      	bpl.n	18f2c <__aeabi_dsub+0x174>
   18ee0:	4b86      	ldr	r3, [pc, #536]	; (190fc <__aeabi_dsub+0x344>)
   18ee2:	3601      	adds	r6, #1
   18ee4:	429e      	cmp	r6, r3
   18ee6:	d100      	bne.n	18eea <__aeabi_dsub+0x132>
   18ee8:	e0af      	b.n	1904a <__aeabi_dsub+0x292>
   18eea:	4b85      	ldr	r3, [pc, #532]	; (19100 <__aeabi_dsub+0x348>)
   18eec:	2501      	movs	r5, #1
   18eee:	401c      	ands	r4, r3
   18ef0:	4643      	mov	r3, r8
   18ef2:	0762      	lsls	r2, r4, #29
   18ef4:	08ff      	lsrs	r7, r7, #3
   18ef6:	0264      	lsls	r4, r4, #9
   18ef8:	0576      	lsls	r6, r6, #21
   18efa:	4317      	orrs	r7, r2
   18efc:	0b24      	lsrs	r4, r4, #12
   18efe:	0d76      	lsrs	r6, r6, #21
   18f00:	401d      	ands	r5, r3
   18f02:	2100      	movs	r1, #0
   18f04:	0324      	lsls	r4, r4, #12
   18f06:	0b23      	lsrs	r3, r4, #12
   18f08:	0d0c      	lsrs	r4, r1, #20
   18f0a:	4a7e      	ldr	r2, [pc, #504]	; (19104 <__aeabi_dsub+0x34c>)
   18f0c:	0524      	lsls	r4, r4, #20
   18f0e:	431c      	orrs	r4, r3
   18f10:	4014      	ands	r4, r2
   18f12:	0533      	lsls	r3, r6, #20
   18f14:	4323      	orrs	r3, r4
   18f16:	005b      	lsls	r3, r3, #1
   18f18:	07ed      	lsls	r5, r5, #31
   18f1a:	085b      	lsrs	r3, r3, #1
   18f1c:	432b      	orrs	r3, r5
   18f1e:	0038      	movs	r0, r7
   18f20:	0019      	movs	r1, r3
   18f22:	bc1c      	pop	{r2, r3, r4}
   18f24:	4690      	mov	r8, r2
   18f26:	4699      	mov	r9, r3
   18f28:	46a2      	mov	sl, r4
   18f2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   18f2c:	2501      	movs	r5, #1
   18f2e:	4643      	mov	r3, r8
   18f30:	0762      	lsls	r2, r4, #29
   18f32:	08ff      	lsrs	r7, r7, #3
   18f34:	4317      	orrs	r7, r2
   18f36:	08e4      	lsrs	r4, r4, #3
   18f38:	401d      	ands	r5, r3
   18f3a:	4b70      	ldr	r3, [pc, #448]	; (190fc <__aeabi_dsub+0x344>)
   18f3c:	429e      	cmp	r6, r3
   18f3e:	d036      	beq.n	18fae <__aeabi_dsub+0x1f6>
   18f40:	0324      	lsls	r4, r4, #12
   18f42:	0576      	lsls	r6, r6, #21
   18f44:	0b24      	lsrs	r4, r4, #12
   18f46:	0d76      	lsrs	r6, r6, #21
   18f48:	e7db      	b.n	18f02 <__aeabi_dsub+0x14a>
   18f4a:	4663      	mov	r3, ip
   18f4c:	1af3      	subs	r3, r6, r3
   18f4e:	2b00      	cmp	r3, #0
   18f50:	dc00      	bgt.n	18f54 <__aeabi_dsub+0x19c>
   18f52:	e094      	b.n	1907e <__aeabi_dsub+0x2c6>
   18f54:	4660      	mov	r0, ip
   18f56:	2800      	cmp	r0, #0
   18f58:	d035      	beq.n	18fc6 <__aeabi_dsub+0x20e>
   18f5a:	4868      	ldr	r0, [pc, #416]	; (190fc <__aeabi_dsub+0x344>)
   18f5c:	4286      	cmp	r6, r0
   18f5e:	d0b1      	beq.n	18ec4 <__aeabi_dsub+0x10c>
   18f60:	2780      	movs	r7, #128	; 0x80
   18f62:	043f      	lsls	r7, r7, #16
   18f64:	4339      	orrs	r1, r7
   18f66:	2b38      	cmp	r3, #56	; 0x38
   18f68:	dc00      	bgt.n	18f6c <__aeabi_dsub+0x1b4>
   18f6a:	e0fd      	b.n	19168 <__aeabi_dsub+0x3b0>
   18f6c:	430a      	orrs	r2, r1
   18f6e:	0017      	movs	r7, r2
   18f70:	2100      	movs	r1, #0
   18f72:	1e7a      	subs	r2, r7, #1
   18f74:	4197      	sbcs	r7, r2
   18f76:	4457      	add	r7, sl
   18f78:	4557      	cmp	r7, sl
   18f7a:	4180      	sbcs	r0, r0
   18f7c:	1909      	adds	r1, r1, r4
   18f7e:	4244      	negs	r4, r0
   18f80:	190c      	adds	r4, r1, r4
   18f82:	0223      	lsls	r3, r4, #8
   18f84:	d53a      	bpl.n	18ffc <__aeabi_dsub+0x244>
   18f86:	4b5d      	ldr	r3, [pc, #372]	; (190fc <__aeabi_dsub+0x344>)
   18f88:	3601      	adds	r6, #1
   18f8a:	429e      	cmp	r6, r3
   18f8c:	d100      	bne.n	18f90 <__aeabi_dsub+0x1d8>
   18f8e:	e14b      	b.n	19228 <__aeabi_dsub+0x470>
   18f90:	2201      	movs	r2, #1
   18f92:	4b5b      	ldr	r3, [pc, #364]	; (19100 <__aeabi_dsub+0x348>)
   18f94:	401c      	ands	r4, r3
   18f96:	087b      	lsrs	r3, r7, #1
   18f98:	4017      	ands	r7, r2
   18f9a:	431f      	orrs	r7, r3
   18f9c:	07e2      	lsls	r2, r4, #31
   18f9e:	4317      	orrs	r7, r2
   18fa0:	0864      	lsrs	r4, r4, #1
   18fa2:	e78f      	b.n	18ec4 <__aeabi_dsub+0x10c>
   18fa4:	0008      	movs	r0, r1
   18fa6:	4310      	orrs	r0, r2
   18fa8:	d000      	beq.n	18fac <__aeabi_dsub+0x1f4>
   18faa:	e724      	b.n	18df6 <__aeabi_dsub+0x3e>
   18fac:	e721      	b.n	18df2 <__aeabi_dsub+0x3a>
   18fae:	0023      	movs	r3, r4
   18fb0:	433b      	orrs	r3, r7
   18fb2:	d100      	bne.n	18fb6 <__aeabi_dsub+0x1fe>
   18fb4:	e1b9      	b.n	1932a <__aeabi_dsub+0x572>
   18fb6:	2280      	movs	r2, #128	; 0x80
   18fb8:	0312      	lsls	r2, r2, #12
   18fba:	4314      	orrs	r4, r2
   18fbc:	0324      	lsls	r4, r4, #12
   18fbe:	0b24      	lsrs	r4, r4, #12
   18fc0:	e79f      	b.n	18f02 <__aeabi_dsub+0x14a>
   18fc2:	002e      	movs	r6, r5
   18fc4:	e77e      	b.n	18ec4 <__aeabi_dsub+0x10c>
   18fc6:	0008      	movs	r0, r1
   18fc8:	4310      	orrs	r0, r2
   18fca:	d100      	bne.n	18fce <__aeabi_dsub+0x216>
   18fcc:	e0ca      	b.n	19164 <__aeabi_dsub+0x3ac>
   18fce:	1e58      	subs	r0, r3, #1
   18fd0:	4684      	mov	ip, r0
   18fd2:	2800      	cmp	r0, #0
   18fd4:	d000      	beq.n	18fd8 <__aeabi_dsub+0x220>
   18fd6:	e0e7      	b.n	191a8 <__aeabi_dsub+0x3f0>
   18fd8:	4452      	add	r2, sl
   18fda:	4552      	cmp	r2, sl
   18fdc:	4180      	sbcs	r0, r0
   18fde:	1864      	adds	r4, r4, r1
   18fe0:	4240      	negs	r0, r0
   18fe2:	1824      	adds	r4, r4, r0
   18fe4:	0017      	movs	r7, r2
   18fe6:	2601      	movs	r6, #1
   18fe8:	0223      	lsls	r3, r4, #8
   18fea:	d507      	bpl.n	18ffc <__aeabi_dsub+0x244>
   18fec:	2602      	movs	r6, #2
   18fee:	e7cf      	b.n	18f90 <__aeabi_dsub+0x1d8>
   18ff0:	4664      	mov	r4, ip
   18ff2:	432c      	orrs	r4, r5
   18ff4:	d100      	bne.n	18ff8 <__aeabi_dsub+0x240>
   18ff6:	e1b3      	b.n	19360 <__aeabi_dsub+0x5a8>
   18ff8:	002c      	movs	r4, r5
   18ffa:	4667      	mov	r7, ip
   18ffc:	077b      	lsls	r3, r7, #29
   18ffe:	d000      	beq.n	19002 <__aeabi_dsub+0x24a>
   19000:	e762      	b.n	18ec8 <__aeabi_dsub+0x110>
   19002:	0763      	lsls	r3, r4, #29
   19004:	08ff      	lsrs	r7, r7, #3
   19006:	431f      	orrs	r7, r3
   19008:	2501      	movs	r5, #1
   1900a:	4643      	mov	r3, r8
   1900c:	08e4      	lsrs	r4, r4, #3
   1900e:	401d      	ands	r5, r3
   19010:	e793      	b.n	18f3a <__aeabi_dsub+0x182>
   19012:	2d00      	cmp	r5, #0
   19014:	d178      	bne.n	19108 <__aeabi_dsub+0x350>
   19016:	1c75      	adds	r5, r6, #1
   19018:	056d      	lsls	r5, r5, #21
   1901a:	0d6d      	lsrs	r5, r5, #21
   1901c:	2d01      	cmp	r5, #1
   1901e:	dc00      	bgt.n	19022 <__aeabi_dsub+0x26a>
   19020:	e0f2      	b.n	19208 <__aeabi_dsub+0x450>
   19022:	4650      	mov	r0, sl
   19024:	1a80      	subs	r0, r0, r2
   19026:	4582      	cmp	sl, r0
   19028:	41bf      	sbcs	r7, r7
   1902a:	1a65      	subs	r5, r4, r1
   1902c:	427f      	negs	r7, r7
   1902e:	1bed      	subs	r5, r5, r7
   19030:	4684      	mov	ip, r0
   19032:	0228      	lsls	r0, r5, #8
   19034:	d400      	bmi.n	19038 <__aeabi_dsub+0x280>
   19036:	e08c      	b.n	19152 <__aeabi_dsub+0x39a>
   19038:	4650      	mov	r0, sl
   1903a:	1a17      	subs	r7, r2, r0
   1903c:	42ba      	cmp	r2, r7
   1903e:	4192      	sbcs	r2, r2
   19040:	1b0c      	subs	r4, r1, r4
   19042:	4255      	negs	r5, r2
   19044:	1b65      	subs	r5, r4, r5
   19046:	4698      	mov	r8, r3
   19048:	e714      	b.n	18e74 <__aeabi_dsub+0xbc>
   1904a:	2501      	movs	r5, #1
   1904c:	4643      	mov	r3, r8
   1904e:	2400      	movs	r4, #0
   19050:	401d      	ands	r5, r3
   19052:	2700      	movs	r7, #0
   19054:	e755      	b.n	18f02 <__aeabi_dsub+0x14a>
   19056:	4c2a      	ldr	r4, [pc, #168]	; (19100 <__aeabi_dsub+0x348>)
   19058:	1af6      	subs	r6, r6, r3
   1905a:	402c      	ands	r4, r5
   1905c:	e732      	b.n	18ec4 <__aeabi_dsub+0x10c>
   1905e:	003d      	movs	r5, r7
   19060:	3828      	subs	r0, #40	; 0x28
   19062:	4085      	lsls	r5, r0
   19064:	2700      	movs	r7, #0
   19066:	e717      	b.n	18e98 <__aeabi_dsub+0xe0>
   19068:	0038      	movs	r0, r7
   1906a:	f000 fabb 	bl	195e4 <__clzsi2>
   1906e:	3020      	adds	r0, #32
   19070:	e706      	b.n	18e80 <__aeabi_dsub+0xc8>
   19072:	430a      	orrs	r2, r1
   19074:	0017      	movs	r7, r2
   19076:	2100      	movs	r1, #0
   19078:	1e7a      	subs	r2, r7, #1
   1907a:	4197      	sbcs	r7, r2
   1907c:	e6ee      	b.n	18e5c <__aeabi_dsub+0xa4>
   1907e:	2b00      	cmp	r3, #0
   19080:	d000      	beq.n	19084 <__aeabi_dsub+0x2cc>
   19082:	e0e5      	b.n	19250 <__aeabi_dsub+0x498>
   19084:	1c73      	adds	r3, r6, #1
   19086:	469c      	mov	ip, r3
   19088:	055b      	lsls	r3, r3, #21
   1908a:	0d5b      	lsrs	r3, r3, #21
   1908c:	2b01      	cmp	r3, #1
   1908e:	dc00      	bgt.n	19092 <__aeabi_dsub+0x2da>
   19090:	e09f      	b.n	191d2 <__aeabi_dsub+0x41a>
   19092:	4b1a      	ldr	r3, [pc, #104]	; (190fc <__aeabi_dsub+0x344>)
   19094:	459c      	cmp	ip, r3
   19096:	d100      	bne.n	1909a <__aeabi_dsub+0x2e2>
   19098:	e0c5      	b.n	19226 <__aeabi_dsub+0x46e>
   1909a:	4452      	add	r2, sl
   1909c:	4552      	cmp	r2, sl
   1909e:	4180      	sbcs	r0, r0
   190a0:	1864      	adds	r4, r4, r1
   190a2:	4240      	negs	r0, r0
   190a4:	1824      	adds	r4, r4, r0
   190a6:	07e7      	lsls	r7, r4, #31
   190a8:	0852      	lsrs	r2, r2, #1
   190aa:	4317      	orrs	r7, r2
   190ac:	0864      	lsrs	r4, r4, #1
   190ae:	4666      	mov	r6, ip
   190b0:	e708      	b.n	18ec4 <__aeabi_dsub+0x10c>
   190b2:	4812      	ldr	r0, [pc, #72]	; (190fc <__aeabi_dsub+0x344>)
   190b4:	4285      	cmp	r5, r0
   190b6:	d100      	bne.n	190ba <__aeabi_dsub+0x302>
   190b8:	e085      	b.n	191c6 <__aeabi_dsub+0x40e>
   190ba:	001d      	movs	r5, r3
   190bc:	e6bc      	b.n	18e38 <__aeabi_dsub+0x80>
   190be:	0029      	movs	r1, r5
   190c0:	3e1f      	subs	r6, #31
   190c2:	40f1      	lsrs	r1, r6
   190c4:	2b20      	cmp	r3, #32
   190c6:	d100      	bne.n	190ca <__aeabi_dsub+0x312>
   190c8:	e07f      	b.n	191ca <__aeabi_dsub+0x412>
   190ca:	2240      	movs	r2, #64	; 0x40
   190cc:	1ad3      	subs	r3, r2, r3
   190ce:	409d      	lsls	r5, r3
   190d0:	432f      	orrs	r7, r5
   190d2:	1e7d      	subs	r5, r7, #1
   190d4:	41af      	sbcs	r7, r5
   190d6:	2400      	movs	r4, #0
   190d8:	430f      	orrs	r7, r1
   190da:	2600      	movs	r6, #0
   190dc:	e78e      	b.n	18ffc <__aeabi_dsub+0x244>
   190de:	002b      	movs	r3, r5
   190e0:	000f      	movs	r7, r1
   190e2:	3b20      	subs	r3, #32
   190e4:	40df      	lsrs	r7, r3
   190e6:	2d20      	cmp	r5, #32
   190e8:	d071      	beq.n	191ce <__aeabi_dsub+0x416>
   190ea:	2340      	movs	r3, #64	; 0x40
   190ec:	1b5d      	subs	r5, r3, r5
   190ee:	40a9      	lsls	r1, r5
   190f0:	430a      	orrs	r2, r1
   190f2:	1e51      	subs	r1, r2, #1
   190f4:	418a      	sbcs	r2, r1
   190f6:	2100      	movs	r1, #0
   190f8:	4317      	orrs	r7, r2
   190fa:	e6af      	b.n	18e5c <__aeabi_dsub+0xa4>
   190fc:	000007ff 	.word	0x000007ff
   19100:	ff7fffff 	.word	0xff7fffff
   19104:	800fffff 	.word	0x800fffff
   19108:	2e00      	cmp	r6, #0
   1910a:	d03e      	beq.n	1918a <__aeabi_dsub+0x3d2>
   1910c:	4eb3      	ldr	r6, [pc, #716]	; (193dc <__aeabi_dsub+0x624>)
   1910e:	45b4      	cmp	ip, r6
   19110:	d045      	beq.n	1919e <__aeabi_dsub+0x3e6>
   19112:	2680      	movs	r6, #128	; 0x80
   19114:	0436      	lsls	r6, r6, #16
   19116:	426d      	negs	r5, r5
   19118:	4334      	orrs	r4, r6
   1911a:	2d38      	cmp	r5, #56	; 0x38
   1911c:	dd00      	ble.n	19120 <__aeabi_dsub+0x368>
   1911e:	e0a8      	b.n	19272 <__aeabi_dsub+0x4ba>
   19120:	2d1f      	cmp	r5, #31
   19122:	dd00      	ble.n	19126 <__aeabi_dsub+0x36e>
   19124:	e11f      	b.n	19366 <__aeabi_dsub+0x5ae>
   19126:	2620      	movs	r6, #32
   19128:	0027      	movs	r7, r4
   1912a:	4650      	mov	r0, sl
   1912c:	1b76      	subs	r6, r6, r5
   1912e:	40b7      	lsls	r7, r6
   19130:	40e8      	lsrs	r0, r5
   19132:	4307      	orrs	r7, r0
   19134:	4650      	mov	r0, sl
   19136:	40b0      	lsls	r0, r6
   19138:	1e46      	subs	r6, r0, #1
   1913a:	41b0      	sbcs	r0, r6
   1913c:	40ec      	lsrs	r4, r5
   1913e:	4338      	orrs	r0, r7
   19140:	1a17      	subs	r7, r2, r0
   19142:	42ba      	cmp	r2, r7
   19144:	4192      	sbcs	r2, r2
   19146:	1b0c      	subs	r4, r1, r4
   19148:	4252      	negs	r2, r2
   1914a:	1aa4      	subs	r4, r4, r2
   1914c:	4666      	mov	r6, ip
   1914e:	4698      	mov	r8, r3
   19150:	e68b      	b.n	18e6a <__aeabi_dsub+0xb2>
   19152:	4664      	mov	r4, ip
   19154:	4667      	mov	r7, ip
   19156:	432c      	orrs	r4, r5
   19158:	d000      	beq.n	1915c <__aeabi_dsub+0x3a4>
   1915a:	e68b      	b.n	18e74 <__aeabi_dsub+0xbc>
   1915c:	2500      	movs	r5, #0
   1915e:	2600      	movs	r6, #0
   19160:	2700      	movs	r7, #0
   19162:	e6ea      	b.n	18f3a <__aeabi_dsub+0x182>
   19164:	001e      	movs	r6, r3
   19166:	e6ad      	b.n	18ec4 <__aeabi_dsub+0x10c>
   19168:	2b1f      	cmp	r3, #31
   1916a:	dc60      	bgt.n	1922e <__aeabi_dsub+0x476>
   1916c:	2720      	movs	r7, #32
   1916e:	1af8      	subs	r0, r7, r3
   19170:	000f      	movs	r7, r1
   19172:	4684      	mov	ip, r0
   19174:	4087      	lsls	r7, r0
   19176:	0010      	movs	r0, r2
   19178:	40d8      	lsrs	r0, r3
   1917a:	4307      	orrs	r7, r0
   1917c:	4660      	mov	r0, ip
   1917e:	4082      	lsls	r2, r0
   19180:	1e50      	subs	r0, r2, #1
   19182:	4182      	sbcs	r2, r0
   19184:	40d9      	lsrs	r1, r3
   19186:	4317      	orrs	r7, r2
   19188:	e6f5      	b.n	18f76 <__aeabi_dsub+0x1be>
   1918a:	0026      	movs	r6, r4
   1918c:	4650      	mov	r0, sl
   1918e:	4306      	orrs	r6, r0
   19190:	d005      	beq.n	1919e <__aeabi_dsub+0x3e6>
   19192:	43ed      	mvns	r5, r5
   19194:	2d00      	cmp	r5, #0
   19196:	d0d3      	beq.n	19140 <__aeabi_dsub+0x388>
   19198:	4e90      	ldr	r6, [pc, #576]	; (193dc <__aeabi_dsub+0x624>)
   1919a:	45b4      	cmp	ip, r6
   1919c:	d1bd      	bne.n	1911a <__aeabi_dsub+0x362>
   1919e:	000c      	movs	r4, r1
   191a0:	0017      	movs	r7, r2
   191a2:	4666      	mov	r6, ip
   191a4:	4698      	mov	r8, r3
   191a6:	e68d      	b.n	18ec4 <__aeabi_dsub+0x10c>
   191a8:	488c      	ldr	r0, [pc, #560]	; (193dc <__aeabi_dsub+0x624>)
   191aa:	4283      	cmp	r3, r0
   191ac:	d00b      	beq.n	191c6 <__aeabi_dsub+0x40e>
   191ae:	4663      	mov	r3, ip
   191b0:	e6d9      	b.n	18f66 <__aeabi_dsub+0x1ae>
   191b2:	2d00      	cmp	r5, #0
   191b4:	d000      	beq.n	191b8 <__aeabi_dsub+0x400>
   191b6:	e096      	b.n	192e6 <__aeabi_dsub+0x52e>
   191b8:	0008      	movs	r0, r1
   191ba:	4310      	orrs	r0, r2
   191bc:	d100      	bne.n	191c0 <__aeabi_dsub+0x408>
   191be:	e0e2      	b.n	19386 <__aeabi_dsub+0x5ce>
   191c0:	000c      	movs	r4, r1
   191c2:	0017      	movs	r7, r2
   191c4:	4698      	mov	r8, r3
   191c6:	4e85      	ldr	r6, [pc, #532]	; (193dc <__aeabi_dsub+0x624>)
   191c8:	e67c      	b.n	18ec4 <__aeabi_dsub+0x10c>
   191ca:	2500      	movs	r5, #0
   191cc:	e780      	b.n	190d0 <__aeabi_dsub+0x318>
   191ce:	2100      	movs	r1, #0
   191d0:	e78e      	b.n	190f0 <__aeabi_dsub+0x338>
   191d2:	0023      	movs	r3, r4
   191d4:	4650      	mov	r0, sl
   191d6:	4303      	orrs	r3, r0
   191d8:	2e00      	cmp	r6, #0
   191da:	d000      	beq.n	191de <__aeabi_dsub+0x426>
   191dc:	e0a8      	b.n	19330 <__aeabi_dsub+0x578>
   191de:	2b00      	cmp	r3, #0
   191e0:	d100      	bne.n	191e4 <__aeabi_dsub+0x42c>
   191e2:	e0de      	b.n	193a2 <__aeabi_dsub+0x5ea>
   191e4:	000b      	movs	r3, r1
   191e6:	4313      	orrs	r3, r2
   191e8:	d100      	bne.n	191ec <__aeabi_dsub+0x434>
   191ea:	e66b      	b.n	18ec4 <__aeabi_dsub+0x10c>
   191ec:	4452      	add	r2, sl
   191ee:	4552      	cmp	r2, sl
   191f0:	4180      	sbcs	r0, r0
   191f2:	1864      	adds	r4, r4, r1
   191f4:	4240      	negs	r0, r0
   191f6:	1824      	adds	r4, r4, r0
   191f8:	0017      	movs	r7, r2
   191fa:	0223      	lsls	r3, r4, #8
   191fc:	d400      	bmi.n	19200 <__aeabi_dsub+0x448>
   191fe:	e6fd      	b.n	18ffc <__aeabi_dsub+0x244>
   19200:	4b77      	ldr	r3, [pc, #476]	; (193e0 <__aeabi_dsub+0x628>)
   19202:	4666      	mov	r6, ip
   19204:	401c      	ands	r4, r3
   19206:	e65d      	b.n	18ec4 <__aeabi_dsub+0x10c>
   19208:	0025      	movs	r5, r4
   1920a:	4650      	mov	r0, sl
   1920c:	4305      	orrs	r5, r0
   1920e:	2e00      	cmp	r6, #0
   19210:	d1cf      	bne.n	191b2 <__aeabi_dsub+0x3fa>
   19212:	2d00      	cmp	r5, #0
   19214:	d14f      	bne.n	192b6 <__aeabi_dsub+0x4fe>
   19216:	000c      	movs	r4, r1
   19218:	4314      	orrs	r4, r2
   1921a:	d100      	bne.n	1921e <__aeabi_dsub+0x466>
   1921c:	e0a0      	b.n	19360 <__aeabi_dsub+0x5a8>
   1921e:	000c      	movs	r4, r1
   19220:	0017      	movs	r7, r2
   19222:	4698      	mov	r8, r3
   19224:	e64e      	b.n	18ec4 <__aeabi_dsub+0x10c>
   19226:	4666      	mov	r6, ip
   19228:	2400      	movs	r4, #0
   1922a:	2700      	movs	r7, #0
   1922c:	e685      	b.n	18f3a <__aeabi_dsub+0x182>
   1922e:	001f      	movs	r7, r3
   19230:	0008      	movs	r0, r1
   19232:	3f20      	subs	r7, #32
   19234:	40f8      	lsrs	r0, r7
   19236:	0007      	movs	r7, r0
   19238:	2b20      	cmp	r3, #32
   1923a:	d100      	bne.n	1923e <__aeabi_dsub+0x486>
   1923c:	e08e      	b.n	1935c <__aeabi_dsub+0x5a4>
   1923e:	2040      	movs	r0, #64	; 0x40
   19240:	1ac3      	subs	r3, r0, r3
   19242:	4099      	lsls	r1, r3
   19244:	430a      	orrs	r2, r1
   19246:	1e51      	subs	r1, r2, #1
   19248:	418a      	sbcs	r2, r1
   1924a:	2100      	movs	r1, #0
   1924c:	4317      	orrs	r7, r2
   1924e:	e692      	b.n	18f76 <__aeabi_dsub+0x1be>
   19250:	2e00      	cmp	r6, #0
   19252:	d114      	bne.n	1927e <__aeabi_dsub+0x4c6>
   19254:	0026      	movs	r6, r4
   19256:	4650      	mov	r0, sl
   19258:	4306      	orrs	r6, r0
   1925a:	d062      	beq.n	19322 <__aeabi_dsub+0x56a>
   1925c:	43db      	mvns	r3, r3
   1925e:	2b00      	cmp	r3, #0
   19260:	d15c      	bne.n	1931c <__aeabi_dsub+0x564>
   19262:	1887      	adds	r7, r0, r2
   19264:	4297      	cmp	r7, r2
   19266:	4192      	sbcs	r2, r2
   19268:	1864      	adds	r4, r4, r1
   1926a:	4252      	negs	r2, r2
   1926c:	18a4      	adds	r4, r4, r2
   1926e:	4666      	mov	r6, ip
   19270:	e687      	b.n	18f82 <__aeabi_dsub+0x1ca>
   19272:	4650      	mov	r0, sl
   19274:	4320      	orrs	r0, r4
   19276:	1e44      	subs	r4, r0, #1
   19278:	41a0      	sbcs	r0, r4
   1927a:	2400      	movs	r4, #0
   1927c:	e760      	b.n	19140 <__aeabi_dsub+0x388>
   1927e:	4e57      	ldr	r6, [pc, #348]	; (193dc <__aeabi_dsub+0x624>)
   19280:	45b4      	cmp	ip, r6
   19282:	d04e      	beq.n	19322 <__aeabi_dsub+0x56a>
   19284:	2680      	movs	r6, #128	; 0x80
   19286:	0436      	lsls	r6, r6, #16
   19288:	425b      	negs	r3, r3
   1928a:	4334      	orrs	r4, r6
   1928c:	2b38      	cmp	r3, #56	; 0x38
   1928e:	dd00      	ble.n	19292 <__aeabi_dsub+0x4da>
   19290:	e07f      	b.n	19392 <__aeabi_dsub+0x5da>
   19292:	2b1f      	cmp	r3, #31
   19294:	dd00      	ble.n	19298 <__aeabi_dsub+0x4e0>
   19296:	e08b      	b.n	193b0 <__aeabi_dsub+0x5f8>
   19298:	2620      	movs	r6, #32
   1929a:	0027      	movs	r7, r4
   1929c:	4650      	mov	r0, sl
   1929e:	1af6      	subs	r6, r6, r3
   192a0:	40b7      	lsls	r7, r6
   192a2:	40d8      	lsrs	r0, r3
   192a4:	4307      	orrs	r7, r0
   192a6:	4650      	mov	r0, sl
   192a8:	40b0      	lsls	r0, r6
   192aa:	1e46      	subs	r6, r0, #1
   192ac:	41b0      	sbcs	r0, r6
   192ae:	4307      	orrs	r7, r0
   192b0:	40dc      	lsrs	r4, r3
   192b2:	18bf      	adds	r7, r7, r2
   192b4:	e7d6      	b.n	19264 <__aeabi_dsub+0x4ac>
   192b6:	000d      	movs	r5, r1
   192b8:	4315      	orrs	r5, r2
   192ba:	d100      	bne.n	192be <__aeabi_dsub+0x506>
   192bc:	e602      	b.n	18ec4 <__aeabi_dsub+0x10c>
   192be:	4650      	mov	r0, sl
   192c0:	1a80      	subs	r0, r0, r2
   192c2:	4582      	cmp	sl, r0
   192c4:	41bf      	sbcs	r7, r7
   192c6:	1a65      	subs	r5, r4, r1
   192c8:	427f      	negs	r7, r7
   192ca:	1bed      	subs	r5, r5, r7
   192cc:	4684      	mov	ip, r0
   192ce:	0228      	lsls	r0, r5, #8
   192d0:	d400      	bmi.n	192d4 <__aeabi_dsub+0x51c>
   192d2:	e68d      	b.n	18ff0 <__aeabi_dsub+0x238>
   192d4:	4650      	mov	r0, sl
   192d6:	1a17      	subs	r7, r2, r0
   192d8:	42ba      	cmp	r2, r7
   192da:	4192      	sbcs	r2, r2
   192dc:	1b0c      	subs	r4, r1, r4
   192de:	4252      	negs	r2, r2
   192e0:	1aa4      	subs	r4, r4, r2
   192e2:	4698      	mov	r8, r3
   192e4:	e5ee      	b.n	18ec4 <__aeabi_dsub+0x10c>
   192e6:	000d      	movs	r5, r1
   192e8:	4315      	orrs	r5, r2
   192ea:	d100      	bne.n	192ee <__aeabi_dsub+0x536>
   192ec:	e76b      	b.n	191c6 <__aeabi_dsub+0x40e>
   192ee:	4650      	mov	r0, sl
   192f0:	0767      	lsls	r7, r4, #29
   192f2:	08c0      	lsrs	r0, r0, #3
   192f4:	4307      	orrs	r7, r0
   192f6:	2080      	movs	r0, #128	; 0x80
   192f8:	08e4      	lsrs	r4, r4, #3
   192fa:	0300      	lsls	r0, r0, #12
   192fc:	4204      	tst	r4, r0
   192fe:	d007      	beq.n	19310 <__aeabi_dsub+0x558>
   19300:	08cd      	lsrs	r5, r1, #3
   19302:	4205      	tst	r5, r0
   19304:	d104      	bne.n	19310 <__aeabi_dsub+0x558>
   19306:	002c      	movs	r4, r5
   19308:	4698      	mov	r8, r3
   1930a:	08d7      	lsrs	r7, r2, #3
   1930c:	0749      	lsls	r1, r1, #29
   1930e:	430f      	orrs	r7, r1
   19310:	0f7b      	lsrs	r3, r7, #29
   19312:	00e4      	lsls	r4, r4, #3
   19314:	431c      	orrs	r4, r3
   19316:	00ff      	lsls	r7, r7, #3
   19318:	4e30      	ldr	r6, [pc, #192]	; (193dc <__aeabi_dsub+0x624>)
   1931a:	e5d3      	b.n	18ec4 <__aeabi_dsub+0x10c>
   1931c:	4e2f      	ldr	r6, [pc, #188]	; (193dc <__aeabi_dsub+0x624>)
   1931e:	45b4      	cmp	ip, r6
   19320:	d1b4      	bne.n	1928c <__aeabi_dsub+0x4d4>
   19322:	000c      	movs	r4, r1
   19324:	0017      	movs	r7, r2
   19326:	4666      	mov	r6, ip
   19328:	e5cc      	b.n	18ec4 <__aeabi_dsub+0x10c>
   1932a:	2700      	movs	r7, #0
   1932c:	2400      	movs	r4, #0
   1932e:	e5e8      	b.n	18f02 <__aeabi_dsub+0x14a>
   19330:	2b00      	cmp	r3, #0
   19332:	d039      	beq.n	193a8 <__aeabi_dsub+0x5f0>
   19334:	000b      	movs	r3, r1
   19336:	4313      	orrs	r3, r2
   19338:	d100      	bne.n	1933c <__aeabi_dsub+0x584>
   1933a:	e744      	b.n	191c6 <__aeabi_dsub+0x40e>
   1933c:	08c0      	lsrs	r0, r0, #3
   1933e:	0767      	lsls	r7, r4, #29
   19340:	4307      	orrs	r7, r0
   19342:	2080      	movs	r0, #128	; 0x80
   19344:	08e4      	lsrs	r4, r4, #3
   19346:	0300      	lsls	r0, r0, #12
   19348:	4204      	tst	r4, r0
   1934a:	d0e1      	beq.n	19310 <__aeabi_dsub+0x558>
   1934c:	08cb      	lsrs	r3, r1, #3
   1934e:	4203      	tst	r3, r0
   19350:	d1de      	bne.n	19310 <__aeabi_dsub+0x558>
   19352:	08d7      	lsrs	r7, r2, #3
   19354:	0749      	lsls	r1, r1, #29
   19356:	430f      	orrs	r7, r1
   19358:	001c      	movs	r4, r3
   1935a:	e7d9      	b.n	19310 <__aeabi_dsub+0x558>
   1935c:	2100      	movs	r1, #0
   1935e:	e771      	b.n	19244 <__aeabi_dsub+0x48c>
   19360:	2500      	movs	r5, #0
   19362:	2700      	movs	r7, #0
   19364:	e5e9      	b.n	18f3a <__aeabi_dsub+0x182>
   19366:	002e      	movs	r6, r5
   19368:	0027      	movs	r7, r4
   1936a:	3e20      	subs	r6, #32
   1936c:	40f7      	lsrs	r7, r6
   1936e:	2d20      	cmp	r5, #32
   19370:	d02f      	beq.n	193d2 <__aeabi_dsub+0x61a>
   19372:	2640      	movs	r6, #64	; 0x40
   19374:	1b75      	subs	r5, r6, r5
   19376:	40ac      	lsls	r4, r5
   19378:	4650      	mov	r0, sl
   1937a:	4320      	orrs	r0, r4
   1937c:	1e44      	subs	r4, r0, #1
   1937e:	41a0      	sbcs	r0, r4
   19380:	2400      	movs	r4, #0
   19382:	4338      	orrs	r0, r7
   19384:	e6dc      	b.n	19140 <__aeabi_dsub+0x388>
   19386:	2480      	movs	r4, #128	; 0x80
   19388:	2500      	movs	r5, #0
   1938a:	0324      	lsls	r4, r4, #12
   1938c:	4e13      	ldr	r6, [pc, #76]	; (193dc <__aeabi_dsub+0x624>)
   1938e:	2700      	movs	r7, #0
   19390:	e5d3      	b.n	18f3a <__aeabi_dsub+0x182>
   19392:	4650      	mov	r0, sl
   19394:	4320      	orrs	r0, r4
   19396:	0007      	movs	r7, r0
   19398:	1e78      	subs	r0, r7, #1
   1939a:	4187      	sbcs	r7, r0
   1939c:	2400      	movs	r4, #0
   1939e:	18bf      	adds	r7, r7, r2
   193a0:	e760      	b.n	19264 <__aeabi_dsub+0x4ac>
   193a2:	000c      	movs	r4, r1
   193a4:	0017      	movs	r7, r2
   193a6:	e58d      	b.n	18ec4 <__aeabi_dsub+0x10c>
   193a8:	000c      	movs	r4, r1
   193aa:	0017      	movs	r7, r2
   193ac:	4e0b      	ldr	r6, [pc, #44]	; (193dc <__aeabi_dsub+0x624>)
   193ae:	e589      	b.n	18ec4 <__aeabi_dsub+0x10c>
   193b0:	001e      	movs	r6, r3
   193b2:	0027      	movs	r7, r4
   193b4:	3e20      	subs	r6, #32
   193b6:	40f7      	lsrs	r7, r6
   193b8:	2b20      	cmp	r3, #32
   193ba:	d00c      	beq.n	193d6 <__aeabi_dsub+0x61e>
   193bc:	2640      	movs	r6, #64	; 0x40
   193be:	1af3      	subs	r3, r6, r3
   193c0:	409c      	lsls	r4, r3
   193c2:	4650      	mov	r0, sl
   193c4:	4320      	orrs	r0, r4
   193c6:	1e44      	subs	r4, r0, #1
   193c8:	41a0      	sbcs	r0, r4
   193ca:	4307      	orrs	r7, r0
   193cc:	2400      	movs	r4, #0
   193ce:	18bf      	adds	r7, r7, r2
   193d0:	e748      	b.n	19264 <__aeabi_dsub+0x4ac>
   193d2:	2400      	movs	r4, #0
   193d4:	e7d0      	b.n	19378 <__aeabi_dsub+0x5c0>
   193d6:	2400      	movs	r4, #0
   193d8:	e7f3      	b.n	193c2 <__aeabi_dsub+0x60a>
   193da:	46c0      	nop			; (mov r8, r8)
   193dc:	000007ff 	.word	0x000007ff
   193e0:	ff7fffff 	.word	0xff7fffff

000193e4 <__aeabi_d2iz>:
   193e4:	b530      	push	{r4, r5, lr}
   193e6:	4d13      	ldr	r5, [pc, #76]	; (19434 <__aeabi_d2iz+0x50>)
   193e8:	030a      	lsls	r2, r1, #12
   193ea:	004b      	lsls	r3, r1, #1
   193ec:	0b12      	lsrs	r2, r2, #12
   193ee:	0d5b      	lsrs	r3, r3, #21
   193f0:	0fc9      	lsrs	r1, r1, #31
   193f2:	2400      	movs	r4, #0
   193f4:	42ab      	cmp	r3, r5
   193f6:	dd10      	ble.n	1941a <__aeabi_d2iz+0x36>
   193f8:	4c0f      	ldr	r4, [pc, #60]	; (19438 <__aeabi_d2iz+0x54>)
   193fa:	42a3      	cmp	r3, r4
   193fc:	dc0f      	bgt.n	1941e <__aeabi_d2iz+0x3a>
   193fe:	2480      	movs	r4, #128	; 0x80
   19400:	4d0e      	ldr	r5, [pc, #56]	; (1943c <__aeabi_d2iz+0x58>)
   19402:	0364      	lsls	r4, r4, #13
   19404:	4322      	orrs	r2, r4
   19406:	1aed      	subs	r5, r5, r3
   19408:	2d1f      	cmp	r5, #31
   1940a:	dd0b      	ble.n	19424 <__aeabi_d2iz+0x40>
   1940c:	480c      	ldr	r0, [pc, #48]	; (19440 <__aeabi_d2iz+0x5c>)
   1940e:	1ac3      	subs	r3, r0, r3
   19410:	40da      	lsrs	r2, r3
   19412:	4254      	negs	r4, r2
   19414:	2900      	cmp	r1, #0
   19416:	d100      	bne.n	1941a <__aeabi_d2iz+0x36>
   19418:	0014      	movs	r4, r2
   1941a:	0020      	movs	r0, r4
   1941c:	bd30      	pop	{r4, r5, pc}
   1941e:	4b09      	ldr	r3, [pc, #36]	; (19444 <__aeabi_d2iz+0x60>)
   19420:	18cc      	adds	r4, r1, r3
   19422:	e7fa      	b.n	1941a <__aeabi_d2iz+0x36>
   19424:	4c08      	ldr	r4, [pc, #32]	; (19448 <__aeabi_d2iz+0x64>)
   19426:	40e8      	lsrs	r0, r5
   19428:	46a4      	mov	ip, r4
   1942a:	4463      	add	r3, ip
   1942c:	409a      	lsls	r2, r3
   1942e:	4302      	orrs	r2, r0
   19430:	e7ef      	b.n	19412 <__aeabi_d2iz+0x2e>
   19432:	46c0      	nop			; (mov r8, r8)
   19434:	000003fe 	.word	0x000003fe
   19438:	0000041d 	.word	0x0000041d
   1943c:	00000433 	.word	0x00000433
   19440:	00000413 	.word	0x00000413
   19444:	7fffffff 	.word	0x7fffffff
   19448:	fffffbed 	.word	0xfffffbed

0001944c <__aeabi_i2d>:
   1944c:	b570      	push	{r4, r5, r6, lr}
   1944e:	2800      	cmp	r0, #0
   19450:	d030      	beq.n	194b4 <__aeabi_i2d+0x68>
   19452:	17c3      	asrs	r3, r0, #31
   19454:	18c4      	adds	r4, r0, r3
   19456:	405c      	eors	r4, r3
   19458:	0fc5      	lsrs	r5, r0, #31
   1945a:	0020      	movs	r0, r4
   1945c:	f000 f8c2 	bl	195e4 <__clzsi2>
   19460:	4b17      	ldr	r3, [pc, #92]	; (194c0 <__aeabi_i2d+0x74>)
   19462:	4a18      	ldr	r2, [pc, #96]	; (194c4 <__aeabi_i2d+0x78>)
   19464:	1a1b      	subs	r3, r3, r0
   19466:	1ad2      	subs	r2, r2, r3
   19468:	2a1f      	cmp	r2, #31
   1946a:	dd18      	ble.n	1949e <__aeabi_i2d+0x52>
   1946c:	4a16      	ldr	r2, [pc, #88]	; (194c8 <__aeabi_i2d+0x7c>)
   1946e:	1ad2      	subs	r2, r2, r3
   19470:	4094      	lsls	r4, r2
   19472:	2200      	movs	r2, #0
   19474:	0324      	lsls	r4, r4, #12
   19476:	055b      	lsls	r3, r3, #21
   19478:	0b24      	lsrs	r4, r4, #12
   1947a:	0d5b      	lsrs	r3, r3, #21
   1947c:	2100      	movs	r1, #0
   1947e:	0010      	movs	r0, r2
   19480:	0324      	lsls	r4, r4, #12
   19482:	0d0a      	lsrs	r2, r1, #20
   19484:	0b24      	lsrs	r4, r4, #12
   19486:	0512      	lsls	r2, r2, #20
   19488:	4322      	orrs	r2, r4
   1948a:	4c10      	ldr	r4, [pc, #64]	; (194cc <__aeabi_i2d+0x80>)
   1948c:	051b      	lsls	r3, r3, #20
   1948e:	4022      	ands	r2, r4
   19490:	4313      	orrs	r3, r2
   19492:	005b      	lsls	r3, r3, #1
   19494:	07ed      	lsls	r5, r5, #31
   19496:	085b      	lsrs	r3, r3, #1
   19498:	432b      	orrs	r3, r5
   1949a:	0019      	movs	r1, r3
   1949c:	bd70      	pop	{r4, r5, r6, pc}
   1949e:	0021      	movs	r1, r4
   194a0:	4091      	lsls	r1, r2
   194a2:	000a      	movs	r2, r1
   194a4:	210b      	movs	r1, #11
   194a6:	1a08      	subs	r0, r1, r0
   194a8:	40c4      	lsrs	r4, r0
   194aa:	055b      	lsls	r3, r3, #21
   194ac:	0324      	lsls	r4, r4, #12
   194ae:	0b24      	lsrs	r4, r4, #12
   194b0:	0d5b      	lsrs	r3, r3, #21
   194b2:	e7e3      	b.n	1947c <__aeabi_i2d+0x30>
   194b4:	2500      	movs	r5, #0
   194b6:	2300      	movs	r3, #0
   194b8:	2400      	movs	r4, #0
   194ba:	2200      	movs	r2, #0
   194bc:	e7de      	b.n	1947c <__aeabi_i2d+0x30>
   194be:	46c0      	nop			; (mov r8, r8)
   194c0:	0000041e 	.word	0x0000041e
   194c4:	00000433 	.word	0x00000433
   194c8:	00000413 	.word	0x00000413
   194cc:	800fffff 	.word	0x800fffff

000194d0 <__aeabi_ui2d>:
   194d0:	b510      	push	{r4, lr}
   194d2:	1e04      	subs	r4, r0, #0
   194d4:	d028      	beq.n	19528 <__aeabi_ui2d+0x58>
   194d6:	f000 f885 	bl	195e4 <__clzsi2>
   194da:	4b15      	ldr	r3, [pc, #84]	; (19530 <__aeabi_ui2d+0x60>)
   194dc:	4a15      	ldr	r2, [pc, #84]	; (19534 <__aeabi_ui2d+0x64>)
   194de:	1a1b      	subs	r3, r3, r0
   194e0:	1ad2      	subs	r2, r2, r3
   194e2:	2a1f      	cmp	r2, #31
   194e4:	dd15      	ble.n	19512 <__aeabi_ui2d+0x42>
   194e6:	4a14      	ldr	r2, [pc, #80]	; (19538 <__aeabi_ui2d+0x68>)
   194e8:	1ad2      	subs	r2, r2, r3
   194ea:	4094      	lsls	r4, r2
   194ec:	2200      	movs	r2, #0
   194ee:	0324      	lsls	r4, r4, #12
   194f0:	055b      	lsls	r3, r3, #21
   194f2:	0b24      	lsrs	r4, r4, #12
   194f4:	0d5b      	lsrs	r3, r3, #21
   194f6:	2100      	movs	r1, #0
   194f8:	0010      	movs	r0, r2
   194fa:	0324      	lsls	r4, r4, #12
   194fc:	0d0a      	lsrs	r2, r1, #20
   194fe:	0b24      	lsrs	r4, r4, #12
   19500:	0512      	lsls	r2, r2, #20
   19502:	4322      	orrs	r2, r4
   19504:	4c0d      	ldr	r4, [pc, #52]	; (1953c <__aeabi_ui2d+0x6c>)
   19506:	051b      	lsls	r3, r3, #20
   19508:	4022      	ands	r2, r4
   1950a:	4313      	orrs	r3, r2
   1950c:	005b      	lsls	r3, r3, #1
   1950e:	0859      	lsrs	r1, r3, #1
   19510:	bd10      	pop	{r4, pc}
   19512:	0021      	movs	r1, r4
   19514:	4091      	lsls	r1, r2
   19516:	000a      	movs	r2, r1
   19518:	210b      	movs	r1, #11
   1951a:	1a08      	subs	r0, r1, r0
   1951c:	40c4      	lsrs	r4, r0
   1951e:	055b      	lsls	r3, r3, #21
   19520:	0324      	lsls	r4, r4, #12
   19522:	0b24      	lsrs	r4, r4, #12
   19524:	0d5b      	lsrs	r3, r3, #21
   19526:	e7e6      	b.n	194f6 <__aeabi_ui2d+0x26>
   19528:	2300      	movs	r3, #0
   1952a:	2400      	movs	r4, #0
   1952c:	2200      	movs	r2, #0
   1952e:	e7e2      	b.n	194f6 <__aeabi_ui2d+0x26>
   19530:	0000041e 	.word	0x0000041e
   19534:	00000433 	.word	0x00000433
   19538:	00000413 	.word	0x00000413
   1953c:	800fffff 	.word	0x800fffff

00019540 <__aeabi_f2d>:
   19540:	0041      	lsls	r1, r0, #1
   19542:	0e09      	lsrs	r1, r1, #24
   19544:	1c4b      	adds	r3, r1, #1
   19546:	b570      	push	{r4, r5, r6, lr}
   19548:	b2db      	uxtb	r3, r3
   1954a:	0246      	lsls	r6, r0, #9
   1954c:	0a75      	lsrs	r5, r6, #9
   1954e:	0fc4      	lsrs	r4, r0, #31
   19550:	2b01      	cmp	r3, #1
   19552:	dd14      	ble.n	1957e <__aeabi_f2d+0x3e>
   19554:	23e0      	movs	r3, #224	; 0xe0
   19556:	009b      	lsls	r3, r3, #2
   19558:	076d      	lsls	r5, r5, #29
   1955a:	0b36      	lsrs	r6, r6, #12
   1955c:	18cb      	adds	r3, r1, r3
   1955e:	2100      	movs	r1, #0
   19560:	0d0a      	lsrs	r2, r1, #20
   19562:	0028      	movs	r0, r5
   19564:	0512      	lsls	r2, r2, #20
   19566:	4d1c      	ldr	r5, [pc, #112]	; (195d8 <__aeabi_f2d+0x98>)
   19568:	4332      	orrs	r2, r6
   1956a:	055b      	lsls	r3, r3, #21
   1956c:	402a      	ands	r2, r5
   1956e:	085b      	lsrs	r3, r3, #1
   19570:	4313      	orrs	r3, r2
   19572:	005b      	lsls	r3, r3, #1
   19574:	07e4      	lsls	r4, r4, #31
   19576:	085b      	lsrs	r3, r3, #1
   19578:	4323      	orrs	r3, r4
   1957a:	0019      	movs	r1, r3
   1957c:	bd70      	pop	{r4, r5, r6, pc}
   1957e:	2900      	cmp	r1, #0
   19580:	d114      	bne.n	195ac <__aeabi_f2d+0x6c>
   19582:	2d00      	cmp	r5, #0
   19584:	d01e      	beq.n	195c4 <__aeabi_f2d+0x84>
   19586:	0028      	movs	r0, r5
   19588:	f000 f82c 	bl	195e4 <__clzsi2>
   1958c:	280a      	cmp	r0, #10
   1958e:	dc1c      	bgt.n	195ca <__aeabi_f2d+0x8a>
   19590:	230b      	movs	r3, #11
   19592:	002a      	movs	r2, r5
   19594:	1a1b      	subs	r3, r3, r0
   19596:	40da      	lsrs	r2, r3
   19598:	0003      	movs	r3, r0
   1959a:	3315      	adds	r3, #21
   1959c:	409d      	lsls	r5, r3
   1959e:	4b0f      	ldr	r3, [pc, #60]	; (195dc <__aeabi_f2d+0x9c>)
   195a0:	0312      	lsls	r2, r2, #12
   195a2:	1a1b      	subs	r3, r3, r0
   195a4:	055b      	lsls	r3, r3, #21
   195a6:	0b16      	lsrs	r6, r2, #12
   195a8:	0d5b      	lsrs	r3, r3, #21
   195aa:	e7d8      	b.n	1955e <__aeabi_f2d+0x1e>
   195ac:	2d00      	cmp	r5, #0
   195ae:	d006      	beq.n	195be <__aeabi_f2d+0x7e>
   195b0:	0b32      	lsrs	r2, r6, #12
   195b2:	2680      	movs	r6, #128	; 0x80
   195b4:	0336      	lsls	r6, r6, #12
   195b6:	076d      	lsls	r5, r5, #29
   195b8:	4316      	orrs	r6, r2
   195ba:	4b09      	ldr	r3, [pc, #36]	; (195e0 <__aeabi_f2d+0xa0>)
   195bc:	e7cf      	b.n	1955e <__aeabi_f2d+0x1e>
   195be:	4b08      	ldr	r3, [pc, #32]	; (195e0 <__aeabi_f2d+0xa0>)
   195c0:	2600      	movs	r6, #0
   195c2:	e7cc      	b.n	1955e <__aeabi_f2d+0x1e>
   195c4:	2300      	movs	r3, #0
   195c6:	2600      	movs	r6, #0
   195c8:	e7c9      	b.n	1955e <__aeabi_f2d+0x1e>
   195ca:	0003      	movs	r3, r0
   195cc:	002a      	movs	r2, r5
   195ce:	3b0b      	subs	r3, #11
   195d0:	409a      	lsls	r2, r3
   195d2:	2500      	movs	r5, #0
   195d4:	e7e3      	b.n	1959e <__aeabi_f2d+0x5e>
   195d6:	46c0      	nop			; (mov r8, r8)
   195d8:	800fffff 	.word	0x800fffff
   195dc:	00000389 	.word	0x00000389
   195e0:	000007ff 	.word	0x000007ff

000195e4 <__clzsi2>:
   195e4:	211c      	movs	r1, #28
   195e6:	2301      	movs	r3, #1
   195e8:	041b      	lsls	r3, r3, #16
   195ea:	4298      	cmp	r0, r3
   195ec:	d301      	bcc.n	195f2 <__clzsi2+0xe>
   195ee:	0c00      	lsrs	r0, r0, #16
   195f0:	3910      	subs	r1, #16
   195f2:	0a1b      	lsrs	r3, r3, #8
   195f4:	4298      	cmp	r0, r3
   195f6:	d301      	bcc.n	195fc <__clzsi2+0x18>
   195f8:	0a00      	lsrs	r0, r0, #8
   195fa:	3908      	subs	r1, #8
   195fc:	091b      	lsrs	r3, r3, #4
   195fe:	4298      	cmp	r0, r3
   19600:	d301      	bcc.n	19606 <__clzsi2+0x22>
   19602:	0900      	lsrs	r0, r0, #4
   19604:	3904      	subs	r1, #4
   19606:	a202      	add	r2, pc, #8	; (adr r2, 19610 <__clzsi2+0x2c>)
   19608:	5c10      	ldrb	r0, [r2, r0]
   1960a:	1840      	adds	r0, r0, r1
   1960c:	4770      	bx	lr
   1960e:	46c0      	nop			; (mov r8, r8)
   19610:	02020304 	.word	0x02020304
   19614:	01010101 	.word	0x01010101
	...

00019620 <__clzdi2>:
   19620:	b510      	push	{r4, lr}
   19622:	2900      	cmp	r1, #0
   19624:	d103      	bne.n	1962e <__clzdi2+0xe>
   19626:	f7ff ffdd 	bl	195e4 <__clzsi2>
   1962a:	3020      	adds	r0, #32
   1962c:	e002      	b.n	19634 <__clzdi2+0x14>
   1962e:	1c08      	adds	r0, r1, #0
   19630:	f7ff ffd8 	bl	195e4 <__clzsi2>
   19634:	bd10      	pop	{r4, pc}
   19636:	46c0      	nop			; (mov r8, r8)

00019638 <atoi>:
   19638:	b510      	push	{r4, lr}
   1963a:	220a      	movs	r2, #10
   1963c:	2100      	movs	r1, #0
   1963e:	f000 fedd 	bl	1a3fc <strtol>
   19642:	bd10      	pop	{r4, pc}

00019644 <__libc_init_array>:
   19644:	b570      	push	{r4, r5, r6, lr}
   19646:	4e0d      	ldr	r6, [pc, #52]	; (1967c <__libc_init_array+0x38>)
   19648:	4d0d      	ldr	r5, [pc, #52]	; (19680 <__libc_init_array+0x3c>)
   1964a:	2400      	movs	r4, #0
   1964c:	1bad      	subs	r5, r5, r6
   1964e:	10ad      	asrs	r5, r5, #2
   19650:	d005      	beq.n	1965e <__libc_init_array+0x1a>
   19652:	00a3      	lsls	r3, r4, #2
   19654:	58f3      	ldr	r3, [r6, r3]
   19656:	3401      	adds	r4, #1
   19658:	4798      	blx	r3
   1965a:	42a5      	cmp	r5, r4
   1965c:	d1f9      	bne.n	19652 <__libc_init_array+0xe>
   1965e:	f007 f93d 	bl	208dc <_init>
   19662:	4e08      	ldr	r6, [pc, #32]	; (19684 <__libc_init_array+0x40>)
   19664:	4d08      	ldr	r5, [pc, #32]	; (19688 <__libc_init_array+0x44>)
   19666:	2400      	movs	r4, #0
   19668:	1bad      	subs	r5, r5, r6
   1966a:	10ad      	asrs	r5, r5, #2
   1966c:	d005      	beq.n	1967a <__libc_init_array+0x36>
   1966e:	00a3      	lsls	r3, r4, #2
   19670:	58f3      	ldr	r3, [r6, r3]
   19672:	3401      	adds	r4, #1
   19674:	4798      	blx	r3
   19676:	42a5      	cmp	r5, r4
   19678:	d1f9      	bne.n	1966e <__libc_init_array+0x2a>
   1967a:	bd70      	pop	{r4, r5, r6, pc}
   1967c:	000208e8 	.word	0x000208e8
   19680:	000208e8 	.word	0x000208e8
   19684:	000208e8 	.word	0x000208e8
   19688:	000208f0 	.word	0x000208f0

0001968c <__itoa>:
   1968c:	1e93      	subs	r3, r2, #2
   1968e:	b510      	push	{r4, lr}
   19690:	000c      	movs	r4, r1
   19692:	2b22      	cmp	r3, #34	; 0x22
   19694:	d80e      	bhi.n	196b4 <__itoa+0x28>
   19696:	2a0a      	cmp	r2, #10
   19698:	d005      	beq.n	196a6 <__itoa+0x1a>
   1969a:	2100      	movs	r1, #0
   1969c:	1861      	adds	r1, r4, r1
   1969e:	f000 ff7f 	bl	1a5a0 <__utoa>
   196a2:	0020      	movs	r0, r4
   196a4:	bd10      	pop	{r4, pc}
   196a6:	2800      	cmp	r0, #0
   196a8:	daf7      	bge.n	1969a <__itoa+0xe>
   196aa:	232d      	movs	r3, #45	; 0x2d
   196ac:	4240      	negs	r0, r0
   196ae:	700b      	strb	r3, [r1, #0]
   196b0:	2101      	movs	r1, #1
   196b2:	e7f3      	b.n	1969c <__itoa+0x10>
   196b4:	2300      	movs	r3, #0
   196b6:	2000      	movs	r0, #0
   196b8:	700b      	strb	r3, [r1, #0]
   196ba:	e7f3      	b.n	196a4 <__itoa+0x18>

000196bc <itoa>:
   196bc:	b510      	push	{r4, lr}
   196be:	f7ff ffe5 	bl	1968c <__itoa>
   196c2:	bd10      	pop	{r4, pc}

000196c4 <__locale_mb_cur_max>:
   196c4:	4b05      	ldr	r3, [pc, #20]	; (196dc <__locale_mb_cur_max+0x18>)
   196c6:	681b      	ldr	r3, [r3, #0]
   196c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   196ca:	2b00      	cmp	r3, #0
   196cc:	d003      	beq.n	196d6 <__locale_mb_cur_max+0x12>
   196ce:	2294      	movs	r2, #148	; 0x94
   196d0:	0052      	lsls	r2, r2, #1
   196d2:	5c98      	ldrb	r0, [r3, r2]
   196d4:	4770      	bx	lr
   196d6:	4b02      	ldr	r3, [pc, #8]	; (196e0 <__locale_mb_cur_max+0x1c>)
   196d8:	e7f9      	b.n	196ce <__locale_mb_cur_max+0xa>
   196da:	46c0      	nop			; (mov r8, r8)
   196dc:	20000018 	.word	0x20000018
   196e0:	20000448 	.word	0x20000448

000196e4 <__locale_ctype_ptr_l>:
   196e4:	23ec      	movs	r3, #236	; 0xec
   196e6:	58c0      	ldr	r0, [r0, r3]
   196e8:	4770      	bx	lr
   196ea:	46c0      	nop			; (mov r8, r8)

000196ec <__locale_ctype_ptr>:
   196ec:	4b04      	ldr	r3, [pc, #16]	; (19700 <__locale_ctype_ptr+0x14>)
   196ee:	681b      	ldr	r3, [r3, #0]
   196f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   196f2:	2b00      	cmp	r3, #0
   196f4:	d002      	beq.n	196fc <__locale_ctype_ptr+0x10>
   196f6:	22ec      	movs	r2, #236	; 0xec
   196f8:	5898      	ldr	r0, [r3, r2]
   196fa:	4770      	bx	lr
   196fc:	4b01      	ldr	r3, [pc, #4]	; (19704 <__locale_ctype_ptr+0x18>)
   196fe:	e7fa      	b.n	196f6 <__locale_ctype_ptr+0xa>
   19700:	20000018 	.word	0x20000018
   19704:	20000448 	.word	0x20000448

00019708 <malloc>:
   19708:	b510      	push	{r4, lr}
   1970a:	4b03      	ldr	r3, [pc, #12]	; (19718 <malloc+0x10>)
   1970c:	0001      	movs	r1, r0
   1970e:	6818      	ldr	r0, [r3, #0]
   19710:	f000 f80e 	bl	19730 <_malloc_r>
   19714:	bd10      	pop	{r4, pc}
   19716:	46c0      	nop			; (mov r8, r8)
   19718:	20000018 	.word	0x20000018

0001971c <free>:
   1971c:	b510      	push	{r4, lr}
   1971e:	4b03      	ldr	r3, [pc, #12]	; (1972c <free+0x10>)
   19720:	0001      	movs	r1, r0
   19722:	6818      	ldr	r0, [r3, #0]
   19724:	f003 fddc 	bl	1d2e0 <_free_r>
   19728:	bd10      	pop	{r4, pc}
   1972a:	46c0      	nop			; (mov r8, r8)
   1972c:	20000018 	.word	0x20000018

00019730 <_malloc_r>:
   19730:	b5f0      	push	{r4, r5, r6, r7, lr}
   19732:	4657      	mov	r7, sl
   19734:	4645      	mov	r5, r8
   19736:	46de      	mov	lr, fp
   19738:	464e      	mov	r6, r9
   1973a:	b5e0      	push	{r5, r6, r7, lr}
   1973c:	000d      	movs	r5, r1
   1973e:	350b      	adds	r5, #11
   19740:	b083      	sub	sp, #12
   19742:	0007      	movs	r7, r0
   19744:	2d16      	cmp	r5, #22
   19746:	d800      	bhi.n	1974a <_malloc_r+0x1a>
   19748:	e09f      	b.n	1988a <_malloc_r+0x15a>
   1974a:	2307      	movs	r3, #7
   1974c:	439d      	bics	r5, r3
   1974e:	d500      	bpl.n	19752 <_malloc_r+0x22>
   19750:	e0c4      	b.n	198dc <_malloc_r+0x1ac>
   19752:	42a9      	cmp	r1, r5
   19754:	d900      	bls.n	19758 <_malloc_r+0x28>
   19756:	e0c1      	b.n	198dc <_malloc_r+0x1ac>
   19758:	f000 fbb6 	bl	19ec8 <__malloc_lock>
   1975c:	23f8      	movs	r3, #248	; 0xf8
   1975e:	33ff      	adds	r3, #255	; 0xff
   19760:	429d      	cmp	r5, r3
   19762:	d800      	bhi.n	19766 <_malloc_r+0x36>
   19764:	e28f      	b.n	19c86 <_malloc_r+0x556>
   19766:	0a68      	lsrs	r0, r5, #9
   19768:	d100      	bne.n	1976c <_malloc_r+0x3c>
   1976a:	e0bb      	b.n	198e4 <_malloc_r+0x1b4>
   1976c:	2804      	cmp	r0, #4
   1976e:	d900      	bls.n	19772 <_malloc_r+0x42>
   19770:	e162      	b.n	19a38 <_malloc_r+0x308>
   19772:	2338      	movs	r3, #56	; 0x38
   19774:	4698      	mov	r8, r3
   19776:	09a8      	lsrs	r0, r5, #6
   19778:	4480      	add	r8, r0
   1977a:	3039      	adds	r0, #57	; 0x39
   1977c:	00c1      	lsls	r1, r0, #3
   1977e:	4ed2      	ldr	r6, [pc, #840]	; (19ac8 <_malloc_r+0x398>)
   19780:	1871      	adds	r1, r6, r1
   19782:	3908      	subs	r1, #8
   19784:	68cc      	ldr	r4, [r1, #12]
   19786:	42a1      	cmp	r1, r4
   19788:	d019      	beq.n	197be <_malloc_r+0x8e>
   1978a:	2303      	movs	r3, #3
   1978c:	6862      	ldr	r2, [r4, #4]
   1978e:	439a      	bics	r2, r3
   19790:	0013      	movs	r3, r2
   19792:	1b52      	subs	r2, r2, r5
   19794:	2a0f      	cmp	r2, #15
   19796:	dd00      	ble.n	1979a <_malloc_r+0x6a>
   19798:	e0aa      	b.n	198f0 <_malloc_r+0x1c0>
   1979a:	2a00      	cmp	r2, #0
   1979c:	db00      	blt.n	197a0 <_malloc_r+0x70>
   1979e:	e088      	b.n	198b2 <_malloc_r+0x182>
   197a0:	2303      	movs	r3, #3
   197a2:	469c      	mov	ip, r3
   197a4:	e008      	b.n	197b8 <_malloc_r+0x88>
   197a6:	4662      	mov	r2, ip
   197a8:	6863      	ldr	r3, [r4, #4]
   197aa:	4393      	bics	r3, r2
   197ac:	1b5a      	subs	r2, r3, r5
   197ae:	2a0f      	cmp	r2, #15
   197b0:	dd00      	ble.n	197b4 <_malloc_r+0x84>
   197b2:	e09d      	b.n	198f0 <_malloc_r+0x1c0>
   197b4:	2a00      	cmp	r2, #0
   197b6:	da7c      	bge.n	198b2 <_malloc_r+0x182>
   197b8:	68e4      	ldr	r4, [r4, #12]
   197ba:	42a1      	cmp	r1, r4
   197bc:	d1f3      	bne.n	197a6 <_malloc_r+0x76>
   197be:	0032      	movs	r2, r6
   197c0:	6934      	ldr	r4, [r6, #16]
   197c2:	3208      	adds	r2, #8
   197c4:	4294      	cmp	r4, r2
   197c6:	d100      	bne.n	197ca <_malloc_r+0x9a>
   197c8:	e190      	b.n	19aec <_malloc_r+0x3bc>
   197ca:	2303      	movs	r3, #3
   197cc:	6861      	ldr	r1, [r4, #4]
   197ce:	4399      	bics	r1, r3
   197d0:	4689      	mov	r9, r1
   197d2:	1b49      	subs	r1, r1, r5
   197d4:	290f      	cmp	r1, #15
   197d6:	dd00      	ble.n	197da <_malloc_r+0xaa>
   197d8:	e162      	b.n	19aa0 <_malloc_r+0x370>
   197da:	6172      	str	r2, [r6, #20]
   197dc:	6132      	str	r2, [r6, #16]
   197de:	2900      	cmp	r1, #0
   197e0:	db00      	blt.n	197e4 <_malloc_r+0xb4>
   197e2:	e087      	b.n	198f4 <_malloc_r+0x1c4>
   197e4:	4ab9      	ldr	r2, [pc, #740]	; (19acc <_malloc_r+0x39c>)
   197e6:	464b      	mov	r3, r9
   197e8:	4591      	cmp	r9, r2
   197ea:	d900      	bls.n	197ee <_malloc_r+0xbe>
   197ec:	e130      	b.n	19a50 <_malloc_r+0x320>
   197ee:	08db      	lsrs	r3, r3, #3
   197f0:	3aff      	subs	r2, #255	; 0xff
   197f2:	1099      	asrs	r1, r3, #2
   197f4:	3aff      	subs	r2, #255	; 0xff
   197f6:	408a      	lsls	r2, r1
   197f8:	00db      	lsls	r3, r3, #3
   197fa:	6871      	ldr	r1, [r6, #4]
   197fc:	199b      	adds	r3, r3, r6
   197fe:	430a      	orrs	r2, r1
   19800:	6899      	ldr	r1, [r3, #8]
   19802:	6072      	str	r2, [r6, #4]
   19804:	60e3      	str	r3, [r4, #12]
   19806:	60a1      	str	r1, [r4, #8]
   19808:	609c      	str	r4, [r3, #8]
   1980a:	0013      	movs	r3, r2
   1980c:	60cc      	str	r4, [r1, #12]
   1980e:	2101      	movs	r1, #1
   19810:	1082      	asrs	r2, r0, #2
   19812:	4091      	lsls	r1, r2
   19814:	4299      	cmp	r1, r3
   19816:	d86f      	bhi.n	198f8 <_malloc_r+0x1c8>
   19818:	420b      	tst	r3, r1
   1981a:	d105      	bne.n	19828 <_malloc_r+0xf8>
   1981c:	2203      	movs	r2, #3
   1981e:	4390      	bics	r0, r2
   19820:	0049      	lsls	r1, r1, #1
   19822:	3004      	adds	r0, #4
   19824:	420b      	tst	r3, r1
   19826:	d0fb      	beq.n	19820 <_malloc_r+0xf0>
   19828:	2303      	movs	r3, #3
   1982a:	4698      	mov	r8, r3
   1982c:	00c3      	lsls	r3, r0, #3
   1982e:	4699      	mov	r9, r3
   19830:	44b1      	add	r9, r6
   19832:	46cc      	mov	ip, r9
   19834:	4682      	mov	sl, r0
   19836:	4663      	mov	r3, ip
   19838:	68dc      	ldr	r4, [r3, #12]
   1983a:	45a4      	cmp	ip, r4
   1983c:	d107      	bne.n	1984e <_malloc_r+0x11e>
   1983e:	e157      	b.n	19af0 <_malloc_r+0x3c0>
   19840:	2a00      	cmp	r2, #0
   19842:	db00      	blt.n	19846 <_malloc_r+0x116>
   19844:	e166      	b.n	19b14 <_malloc_r+0x3e4>
   19846:	68e4      	ldr	r4, [r4, #12]
   19848:	45a4      	cmp	ip, r4
   1984a:	d100      	bne.n	1984e <_malloc_r+0x11e>
   1984c:	e150      	b.n	19af0 <_malloc_r+0x3c0>
   1984e:	4642      	mov	r2, r8
   19850:	6863      	ldr	r3, [r4, #4]
   19852:	4393      	bics	r3, r2
   19854:	1b5a      	subs	r2, r3, r5
   19856:	2a0f      	cmp	r2, #15
   19858:	ddf2      	ble.n	19840 <_malloc_r+0x110>
   1985a:	2001      	movs	r0, #1
   1985c:	4680      	mov	r8, r0
   1985e:	1961      	adds	r1, r4, r5
   19860:	4305      	orrs	r5, r0
   19862:	6065      	str	r5, [r4, #4]
   19864:	68a0      	ldr	r0, [r4, #8]
   19866:	68e5      	ldr	r5, [r4, #12]
   19868:	3608      	adds	r6, #8
   1986a:	60c5      	str	r5, [r0, #12]
   1986c:	60a8      	str	r0, [r5, #8]
   1986e:	4640      	mov	r0, r8
   19870:	60f1      	str	r1, [r6, #12]
   19872:	60b1      	str	r1, [r6, #8]
   19874:	4310      	orrs	r0, r2
   19876:	6048      	str	r0, [r1, #4]
   19878:	60ce      	str	r6, [r1, #12]
   1987a:	608e      	str	r6, [r1, #8]
   1987c:	0038      	movs	r0, r7
   1987e:	50e2      	str	r2, [r4, r3]
   19880:	f000 fb2a 	bl	19ed8 <__malloc_unlock>
   19884:	0020      	movs	r0, r4
   19886:	3008      	adds	r0, #8
   19888:	e021      	b.n	198ce <_malloc_r+0x19e>
   1988a:	2910      	cmp	r1, #16
   1988c:	d826      	bhi.n	198dc <_malloc_r+0x1ac>
   1988e:	0038      	movs	r0, r7
   19890:	f000 fb1a 	bl	19ec8 <__malloc_lock>
   19894:	2510      	movs	r5, #16
   19896:	2318      	movs	r3, #24
   19898:	2002      	movs	r0, #2
   1989a:	4e8b      	ldr	r6, [pc, #556]	; (19ac8 <_malloc_r+0x398>)
   1989c:	18f3      	adds	r3, r6, r3
   1989e:	001a      	movs	r2, r3
   198a0:	685c      	ldr	r4, [r3, #4]
   198a2:	3a08      	subs	r2, #8
   198a4:	4294      	cmp	r4, r2
   198a6:	d100      	bne.n	198aa <_malloc_r+0x17a>
   198a8:	e12e      	b.n	19b08 <_malloc_r+0x3d8>
   198aa:	2303      	movs	r3, #3
   198ac:	6862      	ldr	r2, [r4, #4]
   198ae:	439a      	bics	r2, r3
   198b0:	0013      	movs	r3, r2
   198b2:	68e2      	ldr	r2, [r4, #12]
   198b4:	68a1      	ldr	r1, [r4, #8]
   198b6:	60ca      	str	r2, [r1, #12]
   198b8:	6091      	str	r1, [r2, #8]
   198ba:	2201      	movs	r2, #1
   198bc:	18e3      	adds	r3, r4, r3
   198be:	6859      	ldr	r1, [r3, #4]
   198c0:	0038      	movs	r0, r7
   198c2:	430a      	orrs	r2, r1
   198c4:	605a      	str	r2, [r3, #4]
   198c6:	f000 fb07 	bl	19ed8 <__malloc_unlock>
   198ca:	0020      	movs	r0, r4
   198cc:	3008      	adds	r0, #8
   198ce:	b003      	add	sp, #12
   198d0:	bc3c      	pop	{r2, r3, r4, r5}
   198d2:	4690      	mov	r8, r2
   198d4:	4699      	mov	r9, r3
   198d6:	46a2      	mov	sl, r4
   198d8:	46ab      	mov	fp, r5
   198da:	bdf0      	pop	{r4, r5, r6, r7, pc}
   198dc:	230c      	movs	r3, #12
   198de:	2000      	movs	r0, #0
   198e0:	603b      	str	r3, [r7, #0]
   198e2:	e7f4      	b.n	198ce <_malloc_r+0x19e>
   198e4:	2180      	movs	r1, #128	; 0x80
   198e6:	233f      	movs	r3, #63	; 0x3f
   198e8:	2040      	movs	r0, #64	; 0x40
   198ea:	0089      	lsls	r1, r1, #2
   198ec:	4698      	mov	r8, r3
   198ee:	e746      	b.n	1977e <_malloc_r+0x4e>
   198f0:	4640      	mov	r0, r8
   198f2:	e764      	b.n	197be <_malloc_r+0x8e>
   198f4:	464b      	mov	r3, r9
   198f6:	e7e0      	b.n	198ba <_malloc_r+0x18a>
   198f8:	2303      	movs	r3, #3
   198fa:	68b4      	ldr	r4, [r6, #8]
   198fc:	6862      	ldr	r2, [r4, #4]
   198fe:	439a      	bics	r2, r3
   19900:	4690      	mov	r8, r2
   19902:	42aa      	cmp	r2, r5
   19904:	d303      	bcc.n	1990e <_malloc_r+0x1de>
   19906:	1b53      	subs	r3, r2, r5
   19908:	2b0f      	cmp	r3, #15
   1990a:	dd00      	ble.n	1990e <_malloc_r+0x1de>
   1990c:	e086      	b.n	19a1c <_malloc_r+0x2ec>
   1990e:	0023      	movs	r3, r4
   19910:	4443      	add	r3, r8
   19912:	4a6f      	ldr	r2, [pc, #444]	; (19ad0 <_malloc_r+0x3a0>)
   19914:	9301      	str	r3, [sp, #4]
   19916:	4b6f      	ldr	r3, [pc, #444]	; (19ad4 <_malloc_r+0x3a4>)
   19918:	4693      	mov	fp, r2
   1991a:	681b      	ldr	r3, [r3, #0]
   1991c:	6812      	ldr	r2, [r2, #0]
   1991e:	18eb      	adds	r3, r5, r3
   19920:	3201      	adds	r2, #1
   19922:	d100      	bne.n	19926 <_malloc_r+0x1f6>
   19924:	e168      	b.n	19bf8 <_malloc_r+0x4c8>
   19926:	4a6c      	ldr	r2, [pc, #432]	; (19ad8 <_malloc_r+0x3a8>)
   19928:	4694      	mov	ip, r2
   1992a:	4463      	add	r3, ip
   1992c:	0b1b      	lsrs	r3, r3, #12
   1992e:	031b      	lsls	r3, r3, #12
   19930:	9300      	str	r3, [sp, #0]
   19932:	9900      	ldr	r1, [sp, #0]
   19934:	0038      	movs	r0, r7
   19936:	f000 fb67 	bl	1a008 <_sbrk_r>
   1993a:	0003      	movs	r3, r0
   1993c:	4681      	mov	r9, r0
   1993e:	3301      	adds	r3, #1
   19940:	d061      	beq.n	19a06 <_malloc_r+0x2d6>
   19942:	9b01      	ldr	r3, [sp, #4]
   19944:	4283      	cmp	r3, r0
   19946:	d900      	bls.n	1994a <_malloc_r+0x21a>
   19948:	e0ff      	b.n	19b4a <_malloc_r+0x41a>
   1994a:	4b64      	ldr	r3, [pc, #400]	; (19adc <_malloc_r+0x3ac>)
   1994c:	9a00      	ldr	r2, [sp, #0]
   1994e:	469a      	mov	sl, r3
   19950:	681b      	ldr	r3, [r3, #0]
   19952:	469c      	mov	ip, r3
   19954:	4653      	mov	r3, sl
   19956:	4462      	add	r2, ip
   19958:	601a      	str	r2, [r3, #0]
   1995a:	9b01      	ldr	r3, [sp, #4]
   1995c:	0011      	movs	r1, r2
   1995e:	4283      	cmp	r3, r0
   19960:	d100      	bne.n	19964 <_malloc_r+0x234>
   19962:	e155      	b.n	19c10 <_malloc_r+0x4e0>
   19964:	465b      	mov	r3, fp
   19966:	681b      	ldr	r3, [r3, #0]
   19968:	3301      	adds	r3, #1
   1996a:	d100      	bne.n	1996e <_malloc_r+0x23e>
   1996c:	e16c      	b.n	19c48 <_malloc_r+0x518>
   1996e:	464b      	mov	r3, r9
   19970:	9a01      	ldr	r2, [sp, #4]
   19972:	1a9b      	subs	r3, r3, r2
   19974:	1859      	adds	r1, r3, r1
   19976:	4653      	mov	r3, sl
   19978:	6019      	str	r1, [r3, #0]
   1997a:	2307      	movs	r3, #7
   1997c:	464a      	mov	r2, r9
   1997e:	4013      	ands	r3, r2
   19980:	d100      	bne.n	19984 <_malloc_r+0x254>
   19982:	e124      	b.n	19bce <_malloc_r+0x49e>
   19984:	2108      	movs	r1, #8
   19986:	4689      	mov	r9, r1
   19988:	4955      	ldr	r1, [pc, #340]	; (19ae0 <_malloc_r+0x3b0>)
   1998a:	1ad2      	subs	r2, r2, r3
   1998c:	4491      	add	r9, r2
   1998e:	1acb      	subs	r3, r1, r3
   19990:	9a00      	ldr	r2, [sp, #0]
   19992:	0038      	movs	r0, r7
   19994:	444a      	add	r2, r9
   19996:	0511      	lsls	r1, r2, #20
   19998:	0d09      	lsrs	r1, r1, #20
   1999a:	1a5b      	subs	r3, r3, r1
   1999c:	0019      	movs	r1, r3
   1999e:	469b      	mov	fp, r3
   199a0:	f000 fb32 	bl	1a008 <_sbrk_r>
   199a4:	1c43      	adds	r3, r0, #1
   199a6:	d100      	bne.n	199aa <_malloc_r+0x27a>
   199a8:	e142      	b.n	19c30 <_malloc_r+0x500>
   199aa:	464b      	mov	r3, r9
   199ac:	1ac0      	subs	r0, r0, r3
   199ae:	2301      	movs	r3, #1
   199b0:	4458      	add	r0, fp
   199b2:	4318      	orrs	r0, r3
   199b4:	4653      	mov	r3, sl
   199b6:	681b      	ldr	r3, [r3, #0]
   199b8:	445b      	add	r3, fp
   199ba:	0019      	movs	r1, r3
   199bc:	4653      	mov	r3, sl
   199be:	6019      	str	r1, [r3, #0]
   199c0:	464b      	mov	r3, r9
   199c2:	60b3      	str	r3, [r6, #8]
   199c4:	6058      	str	r0, [r3, #4]
   199c6:	42b4      	cmp	r4, r6
   199c8:	d013      	beq.n	199f2 <_malloc_r+0x2c2>
   199ca:	4643      	mov	r3, r8
   199cc:	2b0f      	cmp	r3, #15
   199ce:	d800      	bhi.n	199d2 <_malloc_r+0x2a2>
   199d0:	e0e8      	b.n	19ba4 <_malloc_r+0x474>
   199d2:	4643      	mov	r3, r8
   199d4:	2207      	movs	r2, #7
   199d6:	6860      	ldr	r0, [r4, #4]
   199d8:	3b0c      	subs	r3, #12
   199da:	4393      	bics	r3, r2
   199dc:	3a06      	subs	r2, #6
   199de:	4002      	ands	r2, r0
   199e0:	2005      	movs	r0, #5
   199e2:	431a      	orrs	r2, r3
   199e4:	6062      	str	r2, [r4, #4]
   199e6:	18e2      	adds	r2, r4, r3
   199e8:	6050      	str	r0, [r2, #4]
   199ea:	6090      	str	r0, [r2, #8]
   199ec:	2b0f      	cmp	r3, #15
   199ee:	d900      	bls.n	199f2 <_malloc_r+0x2c2>
   199f0:	e122      	b.n	19c38 <_malloc_r+0x508>
   199f2:	4b3c      	ldr	r3, [pc, #240]	; (19ae4 <_malloc_r+0x3b4>)
   199f4:	681a      	ldr	r2, [r3, #0]
   199f6:	4291      	cmp	r1, r2
   199f8:	d900      	bls.n	199fc <_malloc_r+0x2cc>
   199fa:	6019      	str	r1, [r3, #0]
   199fc:	4b3a      	ldr	r3, [pc, #232]	; (19ae8 <_malloc_r+0x3b8>)
   199fe:	681a      	ldr	r2, [r3, #0]
   19a00:	4291      	cmp	r1, r2
   19a02:	d900      	bls.n	19a06 <_malloc_r+0x2d6>
   19a04:	6019      	str	r1, [r3, #0]
   19a06:	2303      	movs	r3, #3
   19a08:	68b4      	ldr	r4, [r6, #8]
   19a0a:	6862      	ldr	r2, [r4, #4]
   19a0c:	439a      	bics	r2, r3
   19a0e:	1b53      	subs	r3, r2, r5
   19a10:	4295      	cmp	r5, r2
   19a12:	d900      	bls.n	19a16 <_malloc_r+0x2e6>
   19a14:	e0c9      	b.n	19baa <_malloc_r+0x47a>
   19a16:	2b0f      	cmp	r3, #15
   19a18:	dc00      	bgt.n	19a1c <_malloc_r+0x2ec>
   19a1a:	e0c6      	b.n	19baa <_malloc_r+0x47a>
   19a1c:	2201      	movs	r2, #1
   19a1e:	0029      	movs	r1, r5
   19a20:	4313      	orrs	r3, r2
   19a22:	4311      	orrs	r1, r2
   19a24:	1965      	adds	r5, r4, r5
   19a26:	6061      	str	r1, [r4, #4]
   19a28:	0038      	movs	r0, r7
   19a2a:	60b5      	str	r5, [r6, #8]
   19a2c:	606b      	str	r3, [r5, #4]
   19a2e:	f000 fa53 	bl	19ed8 <__malloc_unlock>
   19a32:	0020      	movs	r0, r4
   19a34:	3008      	adds	r0, #8
   19a36:	e74a      	b.n	198ce <_malloc_r+0x19e>
   19a38:	2814      	cmp	r0, #20
   19a3a:	d97a      	bls.n	19b32 <_malloc_r+0x402>
   19a3c:	2854      	cmp	r0, #84	; 0x54
   19a3e:	d900      	bls.n	19a42 <_malloc_r+0x312>
   19a40:	e0ba      	b.n	19bb8 <_malloc_r+0x488>
   19a42:	236e      	movs	r3, #110	; 0x6e
   19a44:	4698      	mov	r8, r3
   19a46:	0b28      	lsrs	r0, r5, #12
   19a48:	4480      	add	r8, r0
   19a4a:	306f      	adds	r0, #111	; 0x6f
   19a4c:	00c1      	lsls	r1, r0, #3
   19a4e:	e696      	b.n	1977e <_malloc_r+0x4e>
   19a50:	0a5a      	lsrs	r2, r3, #9
   19a52:	2a04      	cmp	r2, #4
   19a54:	d973      	bls.n	19b3e <_malloc_r+0x40e>
   19a56:	2a14      	cmp	r2, #20
   19a58:	d900      	bls.n	19a5c <_malloc_r+0x32c>
   19a5a:	e0d0      	b.n	19bfe <_malloc_r+0x4ce>
   19a5c:	0011      	movs	r1, r2
   19a5e:	325c      	adds	r2, #92	; 0x5c
   19a60:	315b      	adds	r1, #91	; 0x5b
   19a62:	00d2      	lsls	r2, r2, #3
   19a64:	2308      	movs	r3, #8
   19a66:	425b      	negs	r3, r3
   19a68:	469c      	mov	ip, r3
   19a6a:	18b2      	adds	r2, r6, r2
   19a6c:	4494      	add	ip, r2
   19a6e:	4663      	mov	r3, ip
   19a70:	689a      	ldr	r2, [r3, #8]
   19a72:	2303      	movs	r3, #3
   19a74:	4698      	mov	r8, r3
   19a76:	4594      	cmp	ip, r2
   19a78:	d100      	bne.n	19a7c <_malloc_r+0x34c>
   19a7a:	e0ab      	b.n	19bd4 <_malloc_r+0x4a4>
   19a7c:	4643      	mov	r3, r8
   19a7e:	6851      	ldr	r1, [r2, #4]
   19a80:	4399      	bics	r1, r3
   19a82:	4589      	cmp	r9, r1
   19a84:	d300      	bcc.n	19a88 <_malloc_r+0x358>
   19a86:	e095      	b.n	19bb4 <_malloc_r+0x484>
   19a88:	6892      	ldr	r2, [r2, #8]
   19a8a:	4594      	cmp	ip, r2
   19a8c:	d1f6      	bne.n	19a7c <_malloc_r+0x34c>
   19a8e:	4663      	mov	r3, ip
   19a90:	68da      	ldr	r2, [r3, #12]
   19a92:	6873      	ldr	r3, [r6, #4]
   19a94:	4661      	mov	r1, ip
   19a96:	60e2      	str	r2, [r4, #12]
   19a98:	60a1      	str	r1, [r4, #8]
   19a9a:	6094      	str	r4, [r2, #8]
   19a9c:	60cc      	str	r4, [r1, #12]
   19a9e:	e6b6      	b.n	1980e <_malloc_r+0xde>
   19aa0:	2301      	movs	r3, #1
   19aa2:	1960      	adds	r0, r4, r5
   19aa4:	431d      	orrs	r5, r3
   19aa6:	6065      	str	r5, [r4, #4]
   19aa8:	6170      	str	r0, [r6, #20]
   19aaa:	6130      	str	r0, [r6, #16]
   19aac:	60c2      	str	r2, [r0, #12]
   19aae:	6082      	str	r2, [r0, #8]
   19ab0:	001a      	movs	r2, r3
   19ab2:	464b      	mov	r3, r9
   19ab4:	430a      	orrs	r2, r1
   19ab6:	6042      	str	r2, [r0, #4]
   19ab8:	0038      	movs	r0, r7
   19aba:	50e1      	str	r1, [r4, r3]
   19abc:	f000 fa0c 	bl	19ed8 <__malloc_unlock>
   19ac0:	0020      	movs	r0, r4
   19ac2:	3008      	adds	r0, #8
   19ac4:	e703      	b.n	198ce <_malloc_r+0x19e>
   19ac6:	46c0      	nop			; (mov r8, r8)
   19ac8:	200005b4 	.word	0x200005b4
   19acc:	000001ff 	.word	0x000001ff
   19ad0:	200009bc 	.word	0x200009bc
   19ad4:	20001168 	.word	0x20001168
   19ad8:	0000100f 	.word	0x0000100f
   19adc:	20001138 	.word	0x20001138
   19ae0:	00001008 	.word	0x00001008
   19ae4:	20001160 	.word	0x20001160
   19ae8:	20001164 	.word	0x20001164
   19aec:	6873      	ldr	r3, [r6, #4]
   19aee:	e68e      	b.n	1980e <_malloc_r+0xde>
   19af0:	2308      	movs	r3, #8
   19af2:	469b      	mov	fp, r3
   19af4:	3b07      	subs	r3, #7
   19af6:	44dc      	add	ip, fp
   19af8:	469b      	mov	fp, r3
   19afa:	44da      	add	sl, fp
   19afc:	4643      	mov	r3, r8
   19afe:	4652      	mov	r2, sl
   19b00:	4213      	tst	r3, r2
   19b02:	d000      	beq.n	19b06 <_malloc_r+0x3d6>
   19b04:	e697      	b.n	19836 <_malloc_r+0x106>
   19b06:	e037      	b.n	19b78 <_malloc_r+0x448>
   19b08:	68dc      	ldr	r4, [r3, #12]
   19b0a:	3002      	adds	r0, #2
   19b0c:	42a3      	cmp	r3, r4
   19b0e:	d100      	bne.n	19b12 <_malloc_r+0x3e2>
   19b10:	e655      	b.n	197be <_malloc_r+0x8e>
   19b12:	e6ca      	b.n	198aa <_malloc_r+0x17a>
   19b14:	2201      	movs	r2, #1
   19b16:	18e3      	adds	r3, r4, r3
   19b18:	6859      	ldr	r1, [r3, #4]
   19b1a:	0038      	movs	r0, r7
   19b1c:	430a      	orrs	r2, r1
   19b1e:	605a      	str	r2, [r3, #4]
   19b20:	68e3      	ldr	r3, [r4, #12]
   19b22:	68a2      	ldr	r2, [r4, #8]
   19b24:	60d3      	str	r3, [r2, #12]
   19b26:	609a      	str	r2, [r3, #8]
   19b28:	f000 f9d6 	bl	19ed8 <__malloc_unlock>
   19b2c:	0020      	movs	r0, r4
   19b2e:	3008      	adds	r0, #8
   19b30:	e6cd      	b.n	198ce <_malloc_r+0x19e>
   19b32:	235b      	movs	r3, #91	; 0x5b
   19b34:	4698      	mov	r8, r3
   19b36:	4480      	add	r8, r0
   19b38:	305c      	adds	r0, #92	; 0x5c
   19b3a:	00c1      	lsls	r1, r0, #3
   19b3c:	e61f      	b.n	1977e <_malloc_r+0x4e>
   19b3e:	099a      	lsrs	r2, r3, #6
   19b40:	0011      	movs	r1, r2
   19b42:	3239      	adds	r2, #57	; 0x39
   19b44:	3138      	adds	r1, #56	; 0x38
   19b46:	00d2      	lsls	r2, r2, #3
   19b48:	e78c      	b.n	19a64 <_malloc_r+0x334>
   19b4a:	42b4      	cmp	r4, r6
   19b4c:	d000      	beq.n	19b50 <_malloc_r+0x420>
   19b4e:	e75a      	b.n	19a06 <_malloc_r+0x2d6>
   19b50:	4b4f      	ldr	r3, [pc, #316]	; (19c90 <_malloc_r+0x560>)
   19b52:	9a00      	ldr	r2, [sp, #0]
   19b54:	469a      	mov	sl, r3
   19b56:	681b      	ldr	r3, [r3, #0]
   19b58:	469c      	mov	ip, r3
   19b5a:	4653      	mov	r3, sl
   19b5c:	4462      	add	r2, ip
   19b5e:	0011      	movs	r1, r2
   19b60:	601a      	str	r2, [r3, #0]
   19b62:	e6ff      	b.n	19964 <_malloc_r+0x234>
   19b64:	2308      	movs	r3, #8
   19b66:	425b      	negs	r3, r3
   19b68:	469c      	mov	ip, r3
   19b6a:	44e1      	add	r9, ip
   19b6c:	464b      	mov	r3, r9
   19b6e:	689b      	ldr	r3, [r3, #8]
   19b70:	3801      	subs	r0, #1
   19b72:	4599      	cmp	r9, r3
   19b74:	d000      	beq.n	19b78 <_malloc_r+0x448>
   19b76:	e084      	b.n	19c82 <_malloc_r+0x552>
   19b78:	4643      	mov	r3, r8
   19b7a:	4203      	tst	r3, r0
   19b7c:	d1f2      	bne.n	19b64 <_malloc_r+0x434>
   19b7e:	6873      	ldr	r3, [r6, #4]
   19b80:	438b      	bics	r3, r1
   19b82:	6073      	str	r3, [r6, #4]
   19b84:	0049      	lsls	r1, r1, #1
   19b86:	4299      	cmp	r1, r3
   19b88:	d900      	bls.n	19b8c <_malloc_r+0x45c>
   19b8a:	e6b5      	b.n	198f8 <_malloc_r+0x1c8>
   19b8c:	2900      	cmp	r1, #0
   19b8e:	d100      	bne.n	19b92 <_malloc_r+0x462>
   19b90:	e6b2      	b.n	198f8 <_malloc_r+0x1c8>
   19b92:	4650      	mov	r0, sl
   19b94:	420b      	tst	r3, r1
   19b96:	d000      	beq.n	19b9a <_malloc_r+0x46a>
   19b98:	e648      	b.n	1982c <_malloc_r+0xfc>
   19b9a:	0049      	lsls	r1, r1, #1
   19b9c:	3004      	adds	r0, #4
   19b9e:	420b      	tst	r3, r1
   19ba0:	d0fb      	beq.n	19b9a <_malloc_r+0x46a>
   19ba2:	e643      	b.n	1982c <_malloc_r+0xfc>
   19ba4:	2301      	movs	r3, #1
   19ba6:	464a      	mov	r2, r9
   19ba8:	6053      	str	r3, [r2, #4]
   19baa:	0038      	movs	r0, r7
   19bac:	f000 f994 	bl	19ed8 <__malloc_unlock>
   19bb0:	2000      	movs	r0, #0
   19bb2:	e68c      	b.n	198ce <_malloc_r+0x19e>
   19bb4:	4694      	mov	ip, r2
   19bb6:	e76a      	b.n	19a8e <_malloc_r+0x35e>
   19bb8:	23aa      	movs	r3, #170	; 0xaa
   19bba:	005b      	lsls	r3, r3, #1
   19bbc:	4298      	cmp	r0, r3
   19bbe:	d811      	bhi.n	19be4 <_malloc_r+0x4b4>
   19bc0:	3bdd      	subs	r3, #221	; 0xdd
   19bc2:	4698      	mov	r8, r3
   19bc4:	0be8      	lsrs	r0, r5, #15
   19bc6:	4480      	add	r8, r0
   19bc8:	3078      	adds	r0, #120	; 0x78
   19bca:	00c1      	lsls	r1, r0, #3
   19bcc:	e5d7      	b.n	1977e <_malloc_r+0x4e>
   19bce:	2380      	movs	r3, #128	; 0x80
   19bd0:	015b      	lsls	r3, r3, #5
   19bd2:	e6dd      	b.n	19990 <_malloc_r+0x260>
   19bd4:	1089      	asrs	r1, r1, #2
   19bd6:	3b02      	subs	r3, #2
   19bd8:	408b      	lsls	r3, r1
   19bda:	6872      	ldr	r2, [r6, #4]
   19bdc:	4313      	orrs	r3, r2
   19bde:	6073      	str	r3, [r6, #4]
   19be0:	4662      	mov	r2, ip
   19be2:	e757      	b.n	19a94 <_malloc_r+0x364>
   19be4:	4b2b      	ldr	r3, [pc, #172]	; (19c94 <_malloc_r+0x564>)
   19be6:	4298      	cmp	r0, r3
   19be8:	d81c      	bhi.n	19c24 <_malloc_r+0x4f4>
   19bea:	237c      	movs	r3, #124	; 0x7c
   19bec:	4698      	mov	r8, r3
   19bee:	0ca8      	lsrs	r0, r5, #18
   19bf0:	4480      	add	r8, r0
   19bf2:	307d      	adds	r0, #125	; 0x7d
   19bf4:	00c1      	lsls	r1, r0, #3
   19bf6:	e5c2      	b.n	1977e <_malloc_r+0x4e>
   19bf8:	3310      	adds	r3, #16
   19bfa:	9300      	str	r3, [sp, #0]
   19bfc:	e699      	b.n	19932 <_malloc_r+0x202>
   19bfe:	2a54      	cmp	r2, #84	; 0x54
   19c00:	d826      	bhi.n	19c50 <_malloc_r+0x520>
   19c02:	464b      	mov	r3, r9
   19c04:	0b1a      	lsrs	r2, r3, #12
   19c06:	0011      	movs	r1, r2
   19c08:	326f      	adds	r2, #111	; 0x6f
   19c0a:	316e      	adds	r1, #110	; 0x6e
   19c0c:	00d2      	lsls	r2, r2, #3
   19c0e:	e729      	b.n	19a64 <_malloc_r+0x334>
   19c10:	051b      	lsls	r3, r3, #20
   19c12:	d000      	beq.n	19c16 <_malloc_r+0x4e6>
   19c14:	e6a6      	b.n	19964 <_malloc_r+0x234>
   19c16:	2001      	movs	r0, #1
   19c18:	9b00      	ldr	r3, [sp, #0]
   19c1a:	68b2      	ldr	r2, [r6, #8]
   19c1c:	4443      	add	r3, r8
   19c1e:	4303      	orrs	r3, r0
   19c20:	6053      	str	r3, [r2, #4]
   19c22:	e6e6      	b.n	199f2 <_malloc_r+0x2c2>
   19c24:	21fe      	movs	r1, #254	; 0xfe
   19c26:	237e      	movs	r3, #126	; 0x7e
   19c28:	207f      	movs	r0, #127	; 0x7f
   19c2a:	0089      	lsls	r1, r1, #2
   19c2c:	4698      	mov	r8, r3
   19c2e:	e5a6      	b.n	1977e <_malloc_r+0x4e>
   19c30:	2300      	movs	r3, #0
   19c32:	2001      	movs	r0, #1
   19c34:	469b      	mov	fp, r3
   19c36:	e6bd      	b.n	199b4 <_malloc_r+0x284>
   19c38:	0021      	movs	r1, r4
   19c3a:	0038      	movs	r0, r7
   19c3c:	3108      	adds	r1, #8
   19c3e:	f003 fb4f 	bl	1d2e0 <_free_r>
   19c42:	4653      	mov	r3, sl
   19c44:	6819      	ldr	r1, [r3, #0]
   19c46:	e6d4      	b.n	199f2 <_malloc_r+0x2c2>
   19c48:	465b      	mov	r3, fp
   19c4a:	464a      	mov	r2, r9
   19c4c:	601a      	str	r2, [r3, #0]
   19c4e:	e694      	b.n	1997a <_malloc_r+0x24a>
   19c50:	21aa      	movs	r1, #170	; 0xaa
   19c52:	0049      	lsls	r1, r1, #1
   19c54:	428a      	cmp	r2, r1
   19c56:	d806      	bhi.n	19c66 <_malloc_r+0x536>
   19c58:	464b      	mov	r3, r9
   19c5a:	0bda      	lsrs	r2, r3, #15
   19c5c:	0011      	movs	r1, r2
   19c5e:	3278      	adds	r2, #120	; 0x78
   19c60:	3177      	adds	r1, #119	; 0x77
   19c62:	00d2      	lsls	r2, r2, #3
   19c64:	e6fe      	b.n	19a64 <_malloc_r+0x334>
   19c66:	490b      	ldr	r1, [pc, #44]	; (19c94 <_malloc_r+0x564>)
   19c68:	428a      	cmp	r2, r1
   19c6a:	d806      	bhi.n	19c7a <_malloc_r+0x54a>
   19c6c:	464b      	mov	r3, r9
   19c6e:	0c9a      	lsrs	r2, r3, #18
   19c70:	0011      	movs	r1, r2
   19c72:	327d      	adds	r2, #125	; 0x7d
   19c74:	317c      	adds	r1, #124	; 0x7c
   19c76:	00d2      	lsls	r2, r2, #3
   19c78:	e6f4      	b.n	19a64 <_malloc_r+0x334>
   19c7a:	22fe      	movs	r2, #254	; 0xfe
   19c7c:	217e      	movs	r1, #126	; 0x7e
   19c7e:	0092      	lsls	r2, r2, #2
   19c80:	e6f0      	b.n	19a64 <_malloc_r+0x334>
   19c82:	6873      	ldr	r3, [r6, #4]
   19c84:	e77e      	b.n	19b84 <_malloc_r+0x454>
   19c86:	002b      	movs	r3, r5
   19c88:	08e8      	lsrs	r0, r5, #3
   19c8a:	3308      	adds	r3, #8
   19c8c:	e605      	b.n	1989a <_malloc_r+0x16a>
   19c8e:	46c0      	nop			; (mov r8, r8)
   19c90:	20001138 	.word	0x20001138
   19c94:	00000554 	.word	0x00000554

00019c98 <__ascii_mbtowc>:
   19c98:	b082      	sub	sp, #8
   19c9a:	2900      	cmp	r1, #0
   19c9c:	d00a      	beq.n	19cb4 <__ascii_mbtowc+0x1c>
   19c9e:	2a00      	cmp	r2, #0
   19ca0:	d00b      	beq.n	19cba <__ascii_mbtowc+0x22>
   19ca2:	2b00      	cmp	r3, #0
   19ca4:	d00b      	beq.n	19cbe <__ascii_mbtowc+0x26>
   19ca6:	7813      	ldrb	r3, [r2, #0]
   19ca8:	600b      	str	r3, [r1, #0]
   19caa:	7810      	ldrb	r0, [r2, #0]
   19cac:	1e43      	subs	r3, r0, #1
   19cae:	4198      	sbcs	r0, r3
   19cb0:	b002      	add	sp, #8
   19cb2:	4770      	bx	lr
   19cb4:	a901      	add	r1, sp, #4
   19cb6:	2a00      	cmp	r2, #0
   19cb8:	d1f3      	bne.n	19ca2 <__ascii_mbtowc+0xa>
   19cba:	2000      	movs	r0, #0
   19cbc:	e7f8      	b.n	19cb0 <__ascii_mbtowc+0x18>
   19cbe:	2002      	movs	r0, #2
   19cc0:	4240      	negs	r0, r0
   19cc2:	e7f5      	b.n	19cb0 <__ascii_mbtowc+0x18>

00019cc4 <memcmp>:
   19cc4:	b510      	push	{r4, lr}
   19cc6:	2a03      	cmp	r2, #3
   19cc8:	d91c      	bls.n	19d04 <memcmp+0x40>
   19cca:	0003      	movs	r3, r0
   19ccc:	430b      	orrs	r3, r1
   19cce:	079b      	lsls	r3, r3, #30
   19cd0:	d00f      	beq.n	19cf2 <memcmp+0x2e>
   19cd2:	7803      	ldrb	r3, [r0, #0]
   19cd4:	780c      	ldrb	r4, [r1, #0]
   19cd6:	1882      	adds	r2, r0, r2
   19cd8:	42a3      	cmp	r3, r4
   19cda:	d004      	beq.n	19ce6 <memcmp+0x22>
   19cdc:	e015      	b.n	19d0a <memcmp+0x46>
   19cde:	7803      	ldrb	r3, [r0, #0]
   19ce0:	780c      	ldrb	r4, [r1, #0]
   19ce2:	42a3      	cmp	r3, r4
   19ce4:	d111      	bne.n	19d0a <memcmp+0x46>
   19ce6:	3001      	adds	r0, #1
   19ce8:	3101      	adds	r1, #1
   19cea:	4282      	cmp	r2, r0
   19cec:	d1f7      	bne.n	19cde <memcmp+0x1a>
   19cee:	2000      	movs	r0, #0
   19cf0:	bd10      	pop	{r4, pc}
   19cf2:	6803      	ldr	r3, [r0, #0]
   19cf4:	680c      	ldr	r4, [r1, #0]
   19cf6:	42a3      	cmp	r3, r4
   19cf8:	d1eb      	bne.n	19cd2 <memcmp+0xe>
   19cfa:	3a04      	subs	r2, #4
   19cfc:	3004      	adds	r0, #4
   19cfe:	3104      	adds	r1, #4
   19d00:	2a03      	cmp	r2, #3
   19d02:	d8f6      	bhi.n	19cf2 <memcmp+0x2e>
   19d04:	2a00      	cmp	r2, #0
   19d06:	d1e4      	bne.n	19cd2 <memcmp+0xe>
   19d08:	e7f1      	b.n	19cee <memcmp+0x2a>
   19d0a:	1b18      	subs	r0, r3, r4
   19d0c:	e7f0      	b.n	19cf0 <memcmp+0x2c>
   19d0e:	46c0      	nop			; (mov r8, r8)

00019d10 <memcpy>:
   19d10:	b5f0      	push	{r4, r5, r6, r7, lr}
   19d12:	0005      	movs	r5, r0
   19d14:	2a0f      	cmp	r2, #15
   19d16:	d92f      	bls.n	19d78 <memcpy+0x68>
   19d18:	000b      	movs	r3, r1
   19d1a:	4303      	orrs	r3, r0
   19d1c:	079b      	lsls	r3, r3, #30
   19d1e:	d134      	bne.n	19d8a <memcpy+0x7a>
   19d20:	0016      	movs	r6, r2
   19d22:	000c      	movs	r4, r1
   19d24:	0003      	movs	r3, r0
   19d26:	3e10      	subs	r6, #16
   19d28:	0935      	lsrs	r5, r6, #4
   19d2a:	3501      	adds	r5, #1
   19d2c:	012d      	lsls	r5, r5, #4
   19d2e:	1945      	adds	r5, r0, r5
   19d30:	6827      	ldr	r7, [r4, #0]
   19d32:	601f      	str	r7, [r3, #0]
   19d34:	6867      	ldr	r7, [r4, #4]
   19d36:	605f      	str	r7, [r3, #4]
   19d38:	68a7      	ldr	r7, [r4, #8]
   19d3a:	609f      	str	r7, [r3, #8]
   19d3c:	68e7      	ldr	r7, [r4, #12]
   19d3e:	3410      	adds	r4, #16
   19d40:	60df      	str	r7, [r3, #12]
   19d42:	3310      	adds	r3, #16
   19d44:	429d      	cmp	r5, r3
   19d46:	d1f3      	bne.n	19d30 <memcpy+0x20>
   19d48:	230f      	movs	r3, #15
   19d4a:	439e      	bics	r6, r3
   19d4c:	3610      	adds	r6, #16
   19d4e:	1985      	adds	r5, r0, r6
   19d50:	1989      	adds	r1, r1, r6
   19d52:	4013      	ands	r3, r2
   19d54:	2b03      	cmp	r3, #3
   19d56:	d91a      	bls.n	19d8e <memcpy+0x7e>
   19d58:	1f1e      	subs	r6, r3, #4
   19d5a:	2300      	movs	r3, #0
   19d5c:	08b4      	lsrs	r4, r6, #2
   19d5e:	3401      	adds	r4, #1
   19d60:	00a4      	lsls	r4, r4, #2
   19d62:	58cf      	ldr	r7, [r1, r3]
   19d64:	50ef      	str	r7, [r5, r3]
   19d66:	3304      	adds	r3, #4
   19d68:	42a3      	cmp	r3, r4
   19d6a:	d1fa      	bne.n	19d62 <memcpy+0x52>
   19d6c:	2403      	movs	r4, #3
   19d6e:	43a6      	bics	r6, r4
   19d70:	1d33      	adds	r3, r6, #4
   19d72:	4022      	ands	r2, r4
   19d74:	18c9      	adds	r1, r1, r3
   19d76:	18ed      	adds	r5, r5, r3
   19d78:	2a00      	cmp	r2, #0
   19d7a:	d005      	beq.n	19d88 <memcpy+0x78>
   19d7c:	2300      	movs	r3, #0
   19d7e:	5ccc      	ldrb	r4, [r1, r3]
   19d80:	54ec      	strb	r4, [r5, r3]
   19d82:	3301      	adds	r3, #1
   19d84:	4293      	cmp	r3, r2
   19d86:	d1fa      	bne.n	19d7e <memcpy+0x6e>
   19d88:	bdf0      	pop	{r4, r5, r6, r7, pc}
   19d8a:	0005      	movs	r5, r0
   19d8c:	e7f6      	b.n	19d7c <memcpy+0x6c>
   19d8e:	001a      	movs	r2, r3
   19d90:	e7f2      	b.n	19d78 <memcpy+0x68>
   19d92:	46c0      	nop			; (mov r8, r8)

00019d94 <memmove>:
   19d94:	b5f0      	push	{r4, r5, r6, r7, lr}
   19d96:	4288      	cmp	r0, r1
   19d98:	d90a      	bls.n	19db0 <memmove+0x1c>
   19d9a:	188b      	adds	r3, r1, r2
   19d9c:	4298      	cmp	r0, r3
   19d9e:	d207      	bcs.n	19db0 <memmove+0x1c>
   19da0:	1e53      	subs	r3, r2, #1
   19da2:	2a00      	cmp	r2, #0
   19da4:	d003      	beq.n	19dae <memmove+0x1a>
   19da6:	5cca      	ldrb	r2, [r1, r3]
   19da8:	54c2      	strb	r2, [r0, r3]
   19daa:	3b01      	subs	r3, #1
   19dac:	d2fb      	bcs.n	19da6 <memmove+0x12>
   19dae:	bdf0      	pop	{r4, r5, r6, r7, pc}
   19db0:	0005      	movs	r5, r0
   19db2:	2a0f      	cmp	r2, #15
   19db4:	d808      	bhi.n	19dc8 <memmove+0x34>
   19db6:	2a00      	cmp	r2, #0
   19db8:	d0f9      	beq.n	19dae <memmove+0x1a>
   19dba:	2300      	movs	r3, #0
   19dbc:	5ccc      	ldrb	r4, [r1, r3]
   19dbe:	54ec      	strb	r4, [r5, r3]
   19dc0:	3301      	adds	r3, #1
   19dc2:	4293      	cmp	r3, r2
   19dc4:	d1fa      	bne.n	19dbc <memmove+0x28>
   19dc6:	e7f2      	b.n	19dae <memmove+0x1a>
   19dc8:	000b      	movs	r3, r1
   19dca:	4303      	orrs	r3, r0
   19dcc:	079b      	lsls	r3, r3, #30
   19dce:	d12d      	bne.n	19e2c <memmove+0x98>
   19dd0:	0015      	movs	r5, r2
   19dd2:	000c      	movs	r4, r1
   19dd4:	0003      	movs	r3, r0
   19dd6:	3d10      	subs	r5, #16
   19dd8:	092f      	lsrs	r7, r5, #4
   19dda:	3701      	adds	r7, #1
   19ddc:	013f      	lsls	r7, r7, #4
   19dde:	19c7      	adds	r7, r0, r7
   19de0:	6826      	ldr	r6, [r4, #0]
   19de2:	601e      	str	r6, [r3, #0]
   19de4:	6866      	ldr	r6, [r4, #4]
   19de6:	605e      	str	r6, [r3, #4]
   19de8:	68a6      	ldr	r6, [r4, #8]
   19dea:	609e      	str	r6, [r3, #8]
   19dec:	68e6      	ldr	r6, [r4, #12]
   19dee:	3410      	adds	r4, #16
   19df0:	60de      	str	r6, [r3, #12]
   19df2:	3310      	adds	r3, #16
   19df4:	429f      	cmp	r7, r3
   19df6:	d1f3      	bne.n	19de0 <memmove+0x4c>
   19df8:	240f      	movs	r4, #15
   19dfa:	43a5      	bics	r5, r4
   19dfc:	3510      	adds	r5, #16
   19dfe:	1949      	adds	r1, r1, r5
   19e00:	4014      	ands	r4, r2
   19e02:	1945      	adds	r5, r0, r5
   19e04:	2c03      	cmp	r4, #3
   19e06:	d913      	bls.n	19e30 <memmove+0x9c>
   19e08:	2300      	movs	r3, #0
   19e0a:	1f27      	subs	r7, r4, #4
   19e0c:	08be      	lsrs	r6, r7, #2
   19e0e:	3601      	adds	r6, #1
   19e10:	00b6      	lsls	r6, r6, #2
   19e12:	58cc      	ldr	r4, [r1, r3]
   19e14:	50ec      	str	r4, [r5, r3]
   19e16:	3304      	adds	r3, #4
   19e18:	42b3      	cmp	r3, r6
   19e1a:	d1fa      	bne.n	19e12 <memmove+0x7e>
   19e1c:	2603      	movs	r6, #3
   19e1e:	43b7      	bics	r7, r6
   19e20:	1d3c      	adds	r4, r7, #4
   19e22:	1909      	adds	r1, r1, r4
   19e24:	192d      	adds	r5, r5, r4
   19e26:	4032      	ands	r2, r6
   19e28:	d1c7      	bne.n	19dba <memmove+0x26>
   19e2a:	e7c0      	b.n	19dae <memmove+0x1a>
   19e2c:	0005      	movs	r5, r0
   19e2e:	e7c4      	b.n	19dba <memmove+0x26>
   19e30:	0022      	movs	r2, r4
   19e32:	e7c0      	b.n	19db6 <memmove+0x22>

00019e34 <memset>:
   19e34:	b5f0      	push	{r4, r5, r6, r7, lr}
   19e36:	0783      	lsls	r3, r0, #30
   19e38:	d043      	beq.n	19ec2 <memset+0x8e>
   19e3a:	1e54      	subs	r4, r2, #1
   19e3c:	2a00      	cmp	r2, #0
   19e3e:	d03f      	beq.n	19ec0 <memset+0x8c>
   19e40:	b2ce      	uxtb	r6, r1
   19e42:	0002      	movs	r2, r0
   19e44:	2503      	movs	r5, #3
   19e46:	e002      	b.n	19e4e <memset+0x1a>
   19e48:	001a      	movs	r2, r3
   19e4a:	3c01      	subs	r4, #1
   19e4c:	d338      	bcc.n	19ec0 <memset+0x8c>
   19e4e:	1c53      	adds	r3, r2, #1
   19e50:	7016      	strb	r6, [r2, #0]
   19e52:	422b      	tst	r3, r5
   19e54:	d1f8      	bne.n	19e48 <memset+0x14>
   19e56:	2c03      	cmp	r4, #3
   19e58:	d92a      	bls.n	19eb0 <memset+0x7c>
   19e5a:	22ff      	movs	r2, #255	; 0xff
   19e5c:	400a      	ands	r2, r1
   19e5e:	0215      	lsls	r5, r2, #8
   19e60:	4315      	orrs	r5, r2
   19e62:	042a      	lsls	r2, r5, #16
   19e64:	4315      	orrs	r5, r2
   19e66:	2c0f      	cmp	r4, #15
   19e68:	d914      	bls.n	19e94 <memset+0x60>
   19e6a:	0027      	movs	r7, r4
   19e6c:	001a      	movs	r2, r3
   19e6e:	3f10      	subs	r7, #16
   19e70:	093e      	lsrs	r6, r7, #4
   19e72:	3601      	adds	r6, #1
   19e74:	0136      	lsls	r6, r6, #4
   19e76:	199e      	adds	r6, r3, r6
   19e78:	6015      	str	r5, [r2, #0]
   19e7a:	6055      	str	r5, [r2, #4]
   19e7c:	6095      	str	r5, [r2, #8]
   19e7e:	60d5      	str	r5, [r2, #12]
   19e80:	3210      	adds	r2, #16
   19e82:	4296      	cmp	r6, r2
   19e84:	d1f8      	bne.n	19e78 <memset+0x44>
   19e86:	220f      	movs	r2, #15
   19e88:	4397      	bics	r7, r2
   19e8a:	3710      	adds	r7, #16
   19e8c:	19db      	adds	r3, r3, r7
   19e8e:	4014      	ands	r4, r2
   19e90:	2c03      	cmp	r4, #3
   19e92:	d90d      	bls.n	19eb0 <memset+0x7c>
   19e94:	001a      	movs	r2, r3
   19e96:	1f27      	subs	r7, r4, #4
   19e98:	08be      	lsrs	r6, r7, #2
   19e9a:	3601      	adds	r6, #1
   19e9c:	00b6      	lsls	r6, r6, #2
   19e9e:	199e      	adds	r6, r3, r6
   19ea0:	c220      	stmia	r2!, {r5}
   19ea2:	42b2      	cmp	r2, r6
   19ea4:	d1fc      	bne.n	19ea0 <memset+0x6c>
   19ea6:	2203      	movs	r2, #3
   19ea8:	4397      	bics	r7, r2
   19eaa:	3704      	adds	r7, #4
   19eac:	19db      	adds	r3, r3, r7
   19eae:	4014      	ands	r4, r2
   19eb0:	2c00      	cmp	r4, #0
   19eb2:	d005      	beq.n	19ec0 <memset+0x8c>
   19eb4:	b2c9      	uxtb	r1, r1
   19eb6:	191c      	adds	r4, r3, r4
   19eb8:	7019      	strb	r1, [r3, #0]
   19eba:	3301      	adds	r3, #1
   19ebc:	429c      	cmp	r4, r3
   19ebe:	d1fb      	bne.n	19eb8 <memset+0x84>
   19ec0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   19ec2:	0014      	movs	r4, r2
   19ec4:	0003      	movs	r3, r0
   19ec6:	e7c6      	b.n	19e56 <memset+0x22>

00019ec8 <__malloc_lock>:
   19ec8:	b510      	push	{r4, lr}
   19eca:	4802      	ldr	r0, [pc, #8]	; (19ed4 <__malloc_lock+0xc>)
   19ecc:	f003 fca0 	bl	1d810 <__retarget_lock_acquire_recursive>
   19ed0:	bd10      	pop	{r4, pc}
   19ed2:	46c0      	nop			; (mov r8, r8)
   19ed4:	20002fd0 	.word	0x20002fd0

00019ed8 <__malloc_unlock>:
   19ed8:	b510      	push	{r4, lr}
   19eda:	4802      	ldr	r0, [pc, #8]	; (19ee4 <__malloc_unlock+0xc>)
   19edc:	f003 fc9a 	bl	1d814 <__retarget_lock_release_recursive>
   19ee0:	bd10      	pop	{r4, pc}
   19ee2:	46c0      	nop			; (mov r8, r8)
   19ee4:	20002fd0 	.word	0x20002fd0

00019ee8 <printf>:
   19ee8:	b40f      	push	{r0, r1, r2, r3}
   19eea:	b500      	push	{lr}
   19eec:	4906      	ldr	r1, [pc, #24]	; (19f08 <printf+0x20>)
   19eee:	b083      	sub	sp, #12
   19ef0:	ab04      	add	r3, sp, #16
   19ef2:	6808      	ldr	r0, [r1, #0]
   19ef4:	cb04      	ldmia	r3!, {r2}
   19ef6:	6881      	ldr	r1, [r0, #8]
   19ef8:	9301      	str	r3, [sp, #4]
   19efa:	f000 fb9b 	bl	1a634 <_vfprintf_r>
   19efe:	b003      	add	sp, #12
   19f00:	bc08      	pop	{r3}
   19f02:	b004      	add	sp, #16
   19f04:	4718      	bx	r3
   19f06:	46c0      	nop			; (mov r8, r8)
   19f08:	20000018 	.word	0x20000018

00019f0c <_puts_r>:
   19f0c:	b530      	push	{r4, r5, lr}
   19f0e:	0004      	movs	r4, r0
   19f10:	b089      	sub	sp, #36	; 0x24
   19f12:	0008      	movs	r0, r1
   19f14:	000d      	movs	r5, r1
   19f16:	f000 f9a7 	bl	1a268 <strlen>
   19f1a:	ab04      	add	r3, sp, #16
   19f1c:	4a21      	ldr	r2, [pc, #132]	; (19fa4 <_puts_r+0x98>)
   19f1e:	9301      	str	r3, [sp, #4]
   19f20:	2302      	movs	r3, #2
   19f22:	9206      	str	r2, [sp, #24]
   19f24:	2201      	movs	r2, #1
   19f26:	9302      	str	r3, [sp, #8]
   19f28:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   19f2a:	9005      	str	r0, [sp, #20]
   19f2c:	3001      	adds	r0, #1
   19f2e:	9504      	str	r5, [sp, #16]
   19f30:	9207      	str	r2, [sp, #28]
   19f32:	9003      	str	r0, [sp, #12]
   19f34:	68a5      	ldr	r5, [r4, #8]
   19f36:	2b00      	cmp	r3, #0
   19f38:	d02f      	beq.n	19f9a <_puts_r+0x8e>
   19f3a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   19f3c:	07db      	lsls	r3, r3, #31
   19f3e:	d424      	bmi.n	19f8a <_puts_r+0x7e>
   19f40:	230c      	movs	r3, #12
   19f42:	5eea      	ldrsh	r2, [r5, r3]
   19f44:	b291      	uxth	r1, r2
   19f46:	058b      	lsls	r3, r1, #22
   19f48:	d51c      	bpl.n	19f84 <_puts_r+0x78>
   19f4a:	2380      	movs	r3, #128	; 0x80
   19f4c:	019b      	lsls	r3, r3, #6
   19f4e:	4219      	tst	r1, r3
   19f50:	d105      	bne.n	19f5e <_puts_r+0x52>
   19f52:	4313      	orrs	r3, r2
   19f54:	81ab      	strh	r3, [r5, #12]
   19f56:	6e6a      	ldr	r2, [r5, #100]	; 0x64
   19f58:	4b13      	ldr	r3, [pc, #76]	; (19fa8 <_puts_r+0x9c>)
   19f5a:	4013      	ands	r3, r2
   19f5c:	666b      	str	r3, [r5, #100]	; 0x64
   19f5e:	0020      	movs	r0, r4
   19f60:	aa01      	add	r2, sp, #4
   19f62:	0029      	movs	r1, r5
   19f64:	f003 fa9a 	bl	1d49c <__sfvwrite_r>
   19f68:	1e44      	subs	r4, r0, #1
   19f6a:	41a0      	sbcs	r0, r4
   19f6c:	4244      	negs	r4, r0
   19f6e:	200a      	movs	r0, #10
   19f70:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   19f72:	4304      	orrs	r4, r0
   19f74:	07db      	lsls	r3, r3, #31
   19f76:	d402      	bmi.n	19f7e <_puts_r+0x72>
   19f78:	89ab      	ldrh	r3, [r5, #12]
   19f7a:	059b      	lsls	r3, r3, #22
   19f7c:	d509      	bpl.n	19f92 <_puts_r+0x86>
   19f7e:	0020      	movs	r0, r4
   19f80:	b009      	add	sp, #36	; 0x24
   19f82:	bd30      	pop	{r4, r5, pc}
   19f84:	6da8      	ldr	r0, [r5, #88]	; 0x58
   19f86:	f003 fc43 	bl	1d810 <__retarget_lock_acquire_recursive>
   19f8a:	230c      	movs	r3, #12
   19f8c:	5eea      	ldrsh	r2, [r5, r3]
   19f8e:	b291      	uxth	r1, r2
   19f90:	e7db      	b.n	19f4a <_puts_r+0x3e>
   19f92:	6da8      	ldr	r0, [r5, #88]	; 0x58
   19f94:	f003 fc3e 	bl	1d814 <__retarget_lock_release_recursive>
   19f98:	e7f1      	b.n	19f7e <_puts_r+0x72>
   19f9a:	0020      	movs	r0, r4
   19f9c:	f003 f8f6 	bl	1d18c <__sinit>
   19fa0:	e7cb      	b.n	19f3a <_puts_r+0x2e>
   19fa2:	46c0      	nop			; (mov r8, r8)
   19fa4:	000204d8 	.word	0x000204d8
   19fa8:	ffffdfff 	.word	0xffffdfff

00019fac <puts>:
   19fac:	b510      	push	{r4, lr}
   19fae:	4b03      	ldr	r3, [pc, #12]	; (19fbc <puts+0x10>)
   19fb0:	0001      	movs	r1, r0
   19fb2:	6818      	ldr	r0, [r3, #0]
   19fb4:	f7ff ffaa 	bl	19f0c <_puts_r>
   19fb8:	bd10      	pop	{r4, pc}
   19fba:	46c0      	nop			; (mov r8, r8)
   19fbc:	20000018 	.word	0x20000018

00019fc0 <srand>:
   19fc0:	2200      	movs	r2, #0
   19fc2:	4b03      	ldr	r3, [pc, #12]	; (19fd0 <srand+0x10>)
   19fc4:	681b      	ldr	r3, [r3, #0]
   19fc6:	33a8      	adds	r3, #168	; 0xa8
   19fc8:	6018      	str	r0, [r3, #0]
   19fca:	605a      	str	r2, [r3, #4]
   19fcc:	4770      	bx	lr
   19fce:	46c0      	nop			; (mov r8, r8)
   19fd0:	20000018 	.word	0x20000018

00019fd4 <rand>:
   19fd4:	b510      	push	{r4, lr}
   19fd6:	4b09      	ldr	r3, [pc, #36]	; (19ffc <rand+0x28>)
   19fd8:	4a09      	ldr	r2, [pc, #36]	; (1a000 <rand+0x2c>)
   19fda:	681c      	ldr	r4, [r3, #0]
   19fdc:	4b09      	ldr	r3, [pc, #36]	; (1a004 <rand+0x30>)
   19fde:	34a8      	adds	r4, #168	; 0xa8
   19fe0:	6820      	ldr	r0, [r4, #0]
   19fe2:	6861      	ldr	r1, [r4, #4]
   19fe4:	f7fc fcf0 	bl	169c8 <__aeabi_lmul>
   19fe8:	2201      	movs	r2, #1
   19fea:	2300      	movs	r3, #0
   19fec:	1880      	adds	r0, r0, r2
   19fee:	4159      	adcs	r1, r3
   19ff0:	6020      	str	r0, [r4, #0]
   19ff2:	6061      	str	r1, [r4, #4]
   19ff4:	0048      	lsls	r0, r1, #1
   19ff6:	0840      	lsrs	r0, r0, #1
   19ff8:	bd10      	pop	{r4, pc}
   19ffa:	46c0      	nop			; (mov r8, r8)
   19ffc:	20000018 	.word	0x20000018
   1a000:	4c957f2d 	.word	0x4c957f2d
   1a004:	5851f42d 	.word	0x5851f42d

0001a008 <_sbrk_r>:
   1a008:	2300      	movs	r3, #0
   1a00a:	b570      	push	{r4, r5, r6, lr}
   1a00c:	4c06      	ldr	r4, [pc, #24]	; (1a028 <_sbrk_r+0x20>)
   1a00e:	0005      	movs	r5, r0
   1a010:	0008      	movs	r0, r1
   1a012:	6023      	str	r3, [r4, #0]
   1a014:	f7ed fc96 	bl	7944 <_sbrk>
   1a018:	1c43      	adds	r3, r0, #1
   1a01a:	d000      	beq.n	1a01e <_sbrk_r+0x16>
   1a01c:	bd70      	pop	{r4, r5, r6, pc}
   1a01e:	6823      	ldr	r3, [r4, #0]
   1a020:	2b00      	cmp	r3, #0
   1a022:	d0fb      	beq.n	1a01c <_sbrk_r+0x14>
   1a024:	602b      	str	r3, [r5, #0]
   1a026:	e7f9      	b.n	1a01c <_sbrk_r+0x14>
   1a028:	20002fe4 	.word	0x20002fe4

0001a02c <setbuf>:
   1a02c:	424a      	negs	r2, r1
   1a02e:	414a      	adcs	r2, r1
   1a030:	2380      	movs	r3, #128	; 0x80
   1a032:	b510      	push	{r4, lr}
   1a034:	0052      	lsls	r2, r2, #1
   1a036:	00db      	lsls	r3, r3, #3
   1a038:	f000 f802 	bl	1a040 <setvbuf>
   1a03c:	bd10      	pop	{r4, pc}
   1a03e:	46c0      	nop			; (mov r8, r8)

0001a040 <setvbuf>:
   1a040:	b5f0      	push	{r4, r5, r6, r7, lr}
   1a042:	4647      	mov	r7, r8
   1a044:	46ce      	mov	lr, r9
   1a046:	b580      	push	{r7, lr}
   1a048:	001f      	movs	r7, r3
   1a04a:	4b63      	ldr	r3, [pc, #396]	; (1a1d8 <setvbuf+0x198>)
   1a04c:	b083      	sub	sp, #12
   1a04e:	681d      	ldr	r5, [r3, #0]
   1a050:	0004      	movs	r4, r0
   1a052:	4688      	mov	r8, r1
   1a054:	0016      	movs	r6, r2
   1a056:	2d00      	cmp	r5, #0
   1a058:	d002      	beq.n	1a060 <setvbuf+0x20>
   1a05a:	6bab      	ldr	r3, [r5, #56]	; 0x38
   1a05c:	2b00      	cmp	r3, #0
   1a05e:	d066      	beq.n	1a12e <setvbuf+0xee>
   1a060:	2e02      	cmp	r6, #2
   1a062:	d005      	beq.n	1a070 <setvbuf+0x30>
   1a064:	2e01      	cmp	r6, #1
   1a066:	d900      	bls.n	1a06a <setvbuf+0x2a>
   1a068:	e0a1      	b.n	1a1ae <setvbuf+0x16e>
   1a06a:	2f00      	cmp	r7, #0
   1a06c:	da00      	bge.n	1a070 <setvbuf+0x30>
   1a06e:	e09e      	b.n	1a1ae <setvbuf+0x16e>
   1a070:	6e63      	ldr	r3, [r4, #100]	; 0x64
   1a072:	07db      	lsls	r3, r3, #31
   1a074:	d533      	bpl.n	1a0de <setvbuf+0x9e>
   1a076:	0021      	movs	r1, r4
   1a078:	0028      	movs	r0, r5
   1a07a:	f003 f82d 	bl	1d0d8 <_fflush_r>
   1a07e:	6b21      	ldr	r1, [r4, #48]	; 0x30
   1a080:	2900      	cmp	r1, #0
   1a082:	d008      	beq.n	1a096 <setvbuf+0x56>
   1a084:	0023      	movs	r3, r4
   1a086:	3340      	adds	r3, #64	; 0x40
   1a088:	4299      	cmp	r1, r3
   1a08a:	d002      	beq.n	1a092 <setvbuf+0x52>
   1a08c:	0028      	movs	r0, r5
   1a08e:	f003 f927 	bl	1d2e0 <_free_r>
   1a092:	2300      	movs	r3, #0
   1a094:	6323      	str	r3, [r4, #48]	; 0x30
   1a096:	2300      	movs	r3, #0
   1a098:	61a3      	str	r3, [r4, #24]
   1a09a:	6063      	str	r3, [r4, #4]
   1a09c:	220c      	movs	r2, #12
   1a09e:	5ea3      	ldrsh	r3, [r4, r2]
   1a0a0:	061a      	lsls	r2, r3, #24
   1a0a2:	d43d      	bmi.n	1a120 <setvbuf+0xe0>
   1a0a4:	4a4d      	ldr	r2, [pc, #308]	; (1a1dc <setvbuf+0x19c>)
   1a0a6:	4013      	ands	r3, r2
   1a0a8:	81a3      	strh	r3, [r4, #12]
   1a0aa:	2e02      	cmp	r6, #2
   1a0ac:	d01e      	beq.n	1a0ec <setvbuf+0xac>
   1a0ae:	ab01      	add	r3, sp, #4
   1a0b0:	466a      	mov	r2, sp
   1a0b2:	0021      	movs	r1, r4
   1a0b4:	0028      	movs	r0, r5
   1a0b6:	f003 fbaf 	bl	1d818 <__swhatbuf_r>
   1a0ba:	89a3      	ldrh	r3, [r4, #12]
   1a0bc:	4318      	orrs	r0, r3
   1a0be:	81a0      	strh	r0, [r4, #12]
   1a0c0:	2f00      	cmp	r7, #0
   1a0c2:	d138      	bne.n	1a136 <setvbuf+0xf6>
   1a0c4:	9f00      	ldr	r7, [sp, #0]
   1a0c6:	0038      	movs	r0, r7
   1a0c8:	f7ff fb1e 	bl	19708 <malloc>
   1a0cc:	4680      	mov	r8, r0
   1a0ce:	2800      	cmp	r0, #0
   1a0d0:	d100      	bne.n	1a0d4 <setvbuf+0x94>
   1a0d2:	e06f      	b.n	1a1b4 <setvbuf+0x174>
   1a0d4:	2280      	movs	r2, #128	; 0x80
   1a0d6:	89a3      	ldrh	r3, [r4, #12]
   1a0d8:	4313      	orrs	r3, r2
   1a0da:	81a3      	strh	r3, [r4, #12]
   1a0dc:	e02e      	b.n	1a13c <setvbuf+0xfc>
   1a0de:	89a3      	ldrh	r3, [r4, #12]
   1a0e0:	059b      	lsls	r3, r3, #22
   1a0e2:	d4c8      	bmi.n	1a076 <setvbuf+0x36>
   1a0e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
   1a0e6:	f003 fb93 	bl	1d810 <__retarget_lock_acquire_recursive>
   1a0ea:	e7c4      	b.n	1a076 <setvbuf+0x36>
   1a0ec:	2500      	movs	r5, #0
   1a0ee:	2202      	movs	r2, #2
   1a0f0:	4313      	orrs	r3, r2
   1a0f2:	2200      	movs	r2, #0
   1a0f4:	60a2      	str	r2, [r4, #8]
   1a0f6:	0022      	movs	r2, r4
   1a0f8:	3243      	adds	r2, #67	; 0x43
   1a0fa:	6022      	str	r2, [r4, #0]
   1a0fc:	6122      	str	r2, [r4, #16]
   1a0fe:	2201      	movs	r2, #1
   1a100:	6e61      	ldr	r1, [r4, #100]	; 0x64
   1a102:	81a3      	strh	r3, [r4, #12]
   1a104:	6162      	str	r2, [r4, #20]
   1a106:	4211      	tst	r1, r2
   1a108:	d104      	bne.n	1a114 <setvbuf+0xd4>
   1a10a:	059b      	lsls	r3, r3, #22
   1a10c:	d402      	bmi.n	1a114 <setvbuf+0xd4>
   1a10e:	6da0      	ldr	r0, [r4, #88]	; 0x58
   1a110:	f003 fb80 	bl	1d814 <__retarget_lock_release_recursive>
   1a114:	0028      	movs	r0, r5
   1a116:	b003      	add	sp, #12
   1a118:	bc0c      	pop	{r2, r3}
   1a11a:	4690      	mov	r8, r2
   1a11c:	4699      	mov	r9, r3
   1a11e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1a120:	6921      	ldr	r1, [r4, #16]
   1a122:	0028      	movs	r0, r5
   1a124:	f003 f8dc 	bl	1d2e0 <_free_r>
   1a128:	220c      	movs	r2, #12
   1a12a:	5ea3      	ldrsh	r3, [r4, r2]
   1a12c:	e7ba      	b.n	1a0a4 <setvbuf+0x64>
   1a12e:	0028      	movs	r0, r5
   1a130:	f003 f82c 	bl	1d18c <__sinit>
   1a134:	e794      	b.n	1a060 <setvbuf+0x20>
   1a136:	4643      	mov	r3, r8
   1a138:	2b00      	cmp	r3, #0
   1a13a:	d0c4      	beq.n	1a0c6 <setvbuf+0x86>
   1a13c:	6bab      	ldr	r3, [r5, #56]	; 0x38
   1a13e:	2b00      	cmp	r3, #0
   1a140:	d027      	beq.n	1a192 <setvbuf+0x152>
   1a142:	9b00      	ldr	r3, [sp, #0]
   1a144:	429f      	cmp	r7, r3
   1a146:	d02a      	beq.n	1a19e <setvbuf+0x15e>
   1a148:	2380      	movs	r3, #128	; 0x80
   1a14a:	89a2      	ldrh	r2, [r4, #12]
   1a14c:	011b      	lsls	r3, r3, #4
   1a14e:	4313      	orrs	r3, r2
   1a150:	b21b      	sxth	r3, r3
   1a152:	81a3      	strh	r3, [r4, #12]
   1a154:	2e01      	cmp	r6, #1
   1a156:	d026      	beq.n	1a1a6 <setvbuf+0x166>
   1a158:	4642      	mov	r2, r8
   1a15a:	6022      	str	r2, [r4, #0]
   1a15c:	6122      	str	r2, [r4, #16]
   1a15e:	2208      	movs	r2, #8
   1a160:	b29b      	uxth	r3, r3
   1a162:	6167      	str	r7, [r4, #20]
   1a164:	401a      	ands	r2, r3
   1a166:	d00b      	beq.n	1a180 <setvbuf+0x140>
   1a168:	07da      	lsls	r2, r3, #31
   1a16a:	d510      	bpl.n	1a18e <setvbuf+0x14e>
   1a16c:	2200      	movs	r2, #0
   1a16e:	2501      	movs	r5, #1
   1a170:	60a2      	str	r2, [r4, #8]
   1a172:	6e62      	ldr	r2, [r4, #100]	; 0x64
   1a174:	427f      	negs	r7, r7
   1a176:	61a7      	str	r7, [r4, #24]
   1a178:	4015      	ands	r5, r2
   1a17a:	d0c6      	beq.n	1a10a <setvbuf+0xca>
   1a17c:	2500      	movs	r5, #0
   1a17e:	e7c9      	b.n	1a114 <setvbuf+0xd4>
   1a180:	60a2      	str	r2, [r4, #8]
   1a182:	2501      	movs	r5, #1
   1a184:	6e62      	ldr	r2, [r4, #100]	; 0x64
   1a186:	4015      	ands	r5, r2
   1a188:	d0bf      	beq.n	1a10a <setvbuf+0xca>
   1a18a:	2500      	movs	r5, #0
   1a18c:	e7c2      	b.n	1a114 <setvbuf+0xd4>
   1a18e:	60a7      	str	r7, [r4, #8]
   1a190:	e7f7      	b.n	1a182 <setvbuf+0x142>
   1a192:	0028      	movs	r0, r5
   1a194:	f002 fffa 	bl	1d18c <__sinit>
   1a198:	9b00      	ldr	r3, [sp, #0]
   1a19a:	429f      	cmp	r7, r3
   1a19c:	d1d4      	bne.n	1a148 <setvbuf+0x108>
   1a19e:	220c      	movs	r2, #12
   1a1a0:	5ea3      	ldrsh	r3, [r4, r2]
   1a1a2:	2e01      	cmp	r6, #1
   1a1a4:	d1d8      	bne.n	1a158 <setvbuf+0x118>
   1a1a6:	2201      	movs	r2, #1
   1a1a8:	4313      	orrs	r3, r2
   1a1aa:	81a3      	strh	r3, [r4, #12]
   1a1ac:	e7d4      	b.n	1a158 <setvbuf+0x118>
   1a1ae:	2501      	movs	r5, #1
   1a1b0:	426d      	negs	r5, r5
   1a1b2:	e7af      	b.n	1a114 <setvbuf+0xd4>
   1a1b4:	9b00      	ldr	r3, [sp, #0]
   1a1b6:	4699      	mov	r9, r3
   1a1b8:	42bb      	cmp	r3, r7
   1a1ba:	d005      	beq.n	1a1c8 <setvbuf+0x188>
   1a1bc:	0018      	movs	r0, r3
   1a1be:	f7ff faa3 	bl	19708 <malloc>
   1a1c2:	4680      	mov	r8, r0
   1a1c4:	2800      	cmp	r0, #0
   1a1c6:	d104      	bne.n	1a1d2 <setvbuf+0x192>
   1a1c8:	2501      	movs	r5, #1
   1a1ca:	220c      	movs	r2, #12
   1a1cc:	5ea3      	ldrsh	r3, [r4, r2]
   1a1ce:	426d      	negs	r5, r5
   1a1d0:	e78d      	b.n	1a0ee <setvbuf+0xae>
   1a1d2:	464f      	mov	r7, r9
   1a1d4:	e77e      	b.n	1a0d4 <setvbuf+0x94>
   1a1d6:	46c0      	nop			; (mov r8, r8)
   1a1d8:	20000018 	.word	0x20000018
   1a1dc:	fffff35c 	.word	0xfffff35c

0001a1e0 <strcmp>:
   1a1e0:	4602      	mov	r2, r0
   1a1e2:	b570      	push	{r4, r5, r6, lr}
   1a1e4:	430a      	orrs	r2, r1
   1a1e6:	0792      	lsls	r2, r2, #30
   1a1e8:	d12a      	bne.n	1a240 <strcmp+0x60>
   1a1ea:	4d1e      	ldr	r5, [pc, #120]	; (1a264 <strcmp+0x84>)
   1a1ec:	01ee      	lsls	r6, r5, #7
   1a1ee:	c804      	ldmia	r0!, {r2}
   1a1f0:	c908      	ldmia	r1!, {r3}
   1a1f2:	1b54      	subs	r4, r2, r5
   1a1f4:	4394      	bics	r4, r2
   1a1f6:	4034      	ands	r4, r6
   1a1f8:	d017      	beq.n	1a22a <strcmp+0x4a>
   1a1fa:	b2d0      	uxtb	r0, r2
   1a1fc:	b2d9      	uxtb	r1, r3
   1a1fe:	1a40      	subs	r0, r0, r1
   1a200:	0621      	lsls	r1, r4, #24
   1a202:	4301      	orrs	r1, r0
   1a204:	d110      	bne.n	1a228 <strcmp+0x48>
   1a206:	b290      	uxth	r0, r2
   1a208:	b299      	uxth	r1, r3
   1a20a:	1a40      	subs	r0, r0, r1
   1a20c:	0421      	lsls	r1, r4, #16
   1a20e:	4301      	orrs	r1, r0
   1a210:	d10a      	bne.n	1a228 <strcmp+0x48>
   1a212:	0210      	lsls	r0, r2, #8
   1a214:	0219      	lsls	r1, r3, #8
   1a216:	0a00      	lsrs	r0, r0, #8
   1a218:	0a09      	lsrs	r1, r1, #8
   1a21a:	1a40      	subs	r0, r0, r1
   1a21c:	0221      	lsls	r1, r4, #8
   1a21e:	4301      	orrs	r1, r0
   1a220:	d102      	bne.n	1a228 <strcmp+0x48>
   1a222:	0e10      	lsrs	r0, r2, #24
   1a224:	0e19      	lsrs	r1, r3, #24
   1a226:	1a40      	subs	r0, r0, r1
   1a228:	bd70      	pop	{r4, r5, r6, pc}
   1a22a:	429a      	cmp	r2, r3
   1a22c:	d0df      	beq.n	1a1ee <strcmp+0xe>
   1a22e:	ba10      	rev	r0, r2
   1a230:	ba19      	rev	r1, r3
   1a232:	4288      	cmp	r0, r1
   1a234:	d901      	bls.n	1a23a <strcmp+0x5a>
   1a236:	2001      	movs	r0, #1
   1a238:	bd70      	pop	{r4, r5, r6, pc}
   1a23a:	2000      	movs	r0, #0
   1a23c:	43c0      	mvns	r0, r0
   1a23e:	bd70      	pop	{r4, r5, r6, pc}
   1a240:	7802      	ldrb	r2, [r0, #0]
   1a242:	780b      	ldrb	r3, [r1, #0]
   1a244:	3001      	adds	r0, #1
   1a246:	3101      	adds	r1, #1
   1a248:	2a00      	cmp	r2, #0
   1a24a:	d009      	beq.n	1a260 <strcmp+0x80>
   1a24c:	429a      	cmp	r2, r3
   1a24e:	d107      	bne.n	1a260 <strcmp+0x80>
   1a250:	7802      	ldrb	r2, [r0, #0]
   1a252:	780b      	ldrb	r3, [r1, #0]
   1a254:	3001      	adds	r0, #1
   1a256:	3101      	adds	r1, #1
   1a258:	2a00      	cmp	r2, #0
   1a25a:	d001      	beq.n	1a260 <strcmp+0x80>
   1a25c:	429a      	cmp	r2, r3
   1a25e:	d0ef      	beq.n	1a240 <strcmp+0x60>
   1a260:	1ad0      	subs	r0, r2, r3
   1a262:	bd70      	pop	{r4, r5, r6, pc}
   1a264:	01010101 	.word	0x01010101

0001a268 <strlen>:
   1a268:	b510      	push	{r4, lr}
   1a26a:	0783      	lsls	r3, r0, #30
   1a26c:	d025      	beq.n	1a2ba <strlen+0x52>
   1a26e:	7803      	ldrb	r3, [r0, #0]
   1a270:	2b00      	cmp	r3, #0
   1a272:	d024      	beq.n	1a2be <strlen+0x56>
   1a274:	0003      	movs	r3, r0
   1a276:	2103      	movs	r1, #3
   1a278:	e002      	b.n	1a280 <strlen+0x18>
   1a27a:	781a      	ldrb	r2, [r3, #0]
   1a27c:	2a00      	cmp	r2, #0
   1a27e:	d01a      	beq.n	1a2b6 <strlen+0x4e>
   1a280:	3301      	adds	r3, #1
   1a282:	420b      	tst	r3, r1
   1a284:	d1f9      	bne.n	1a27a <strlen+0x12>
   1a286:	6819      	ldr	r1, [r3, #0]
   1a288:	4a0e      	ldr	r2, [pc, #56]	; (1a2c4 <strlen+0x5c>)
   1a28a:	4c0f      	ldr	r4, [pc, #60]	; (1a2c8 <strlen+0x60>)
   1a28c:	188a      	adds	r2, r1, r2
   1a28e:	438a      	bics	r2, r1
   1a290:	4222      	tst	r2, r4
   1a292:	d106      	bne.n	1a2a2 <strlen+0x3a>
   1a294:	3304      	adds	r3, #4
   1a296:	6819      	ldr	r1, [r3, #0]
   1a298:	4a0a      	ldr	r2, [pc, #40]	; (1a2c4 <strlen+0x5c>)
   1a29a:	188a      	adds	r2, r1, r2
   1a29c:	438a      	bics	r2, r1
   1a29e:	4222      	tst	r2, r4
   1a2a0:	d0f8      	beq.n	1a294 <strlen+0x2c>
   1a2a2:	001a      	movs	r2, r3
   1a2a4:	781b      	ldrb	r3, [r3, #0]
   1a2a6:	2b00      	cmp	r3, #0
   1a2a8:	d003      	beq.n	1a2b2 <strlen+0x4a>
   1a2aa:	3201      	adds	r2, #1
   1a2ac:	7811      	ldrb	r1, [r2, #0]
   1a2ae:	2900      	cmp	r1, #0
   1a2b0:	d1fb      	bne.n	1a2aa <strlen+0x42>
   1a2b2:	1a10      	subs	r0, r2, r0
   1a2b4:	bd10      	pop	{r4, pc}
   1a2b6:	1a18      	subs	r0, r3, r0
   1a2b8:	e7fc      	b.n	1a2b4 <strlen+0x4c>
   1a2ba:	0003      	movs	r3, r0
   1a2bc:	e7e3      	b.n	1a286 <strlen+0x1e>
   1a2be:	2000      	movs	r0, #0
   1a2c0:	e7f8      	b.n	1a2b4 <strlen+0x4c>
   1a2c2:	46c0      	nop			; (mov r8, r8)
   1a2c4:	fefefeff 	.word	0xfefefeff
   1a2c8:	80808080 	.word	0x80808080

0001a2cc <_strtol_l.isra.0>:
   1a2cc:	b5f0      	push	{r4, r5, r6, r7, lr}
   1a2ce:	4657      	mov	r7, sl
   1a2d0:	464e      	mov	r6, r9
   1a2d2:	46de      	mov	lr, fp
   1a2d4:	4645      	mov	r5, r8
   1a2d6:	b5e0      	push	{r5, r6, r7, lr}
   1a2d8:	001e      	movs	r6, r3
   1a2da:	2308      	movs	r3, #8
   1a2dc:	b083      	sub	sp, #12
   1a2de:	9001      	str	r0, [sp, #4]
   1a2e0:	9100      	str	r1, [sp, #0]
   1a2e2:	4692      	mov	sl, r2
   1a2e4:	000f      	movs	r7, r1
   1a2e6:	4699      	mov	r9, r3
   1a2e8:	e000      	b.n	1a2ec <_strtol_l.isra.0+0x20>
   1a2ea:	002f      	movs	r7, r5
   1a2ec:	980c      	ldr	r0, [sp, #48]	; 0x30
   1a2ee:	783c      	ldrb	r4, [r7, #0]
   1a2f0:	f7ff f9f8 	bl	196e4 <__locale_ctype_ptr_l>
   1a2f4:	464a      	mov	r2, r9
   1a2f6:	1900      	adds	r0, r0, r4
   1a2f8:	7843      	ldrb	r3, [r0, #1]
   1a2fa:	1c7d      	adds	r5, r7, #1
   1a2fc:	421a      	tst	r2, r3
   1a2fe:	d1f4      	bne.n	1a2ea <_strtol_l.isra.0+0x1e>
   1a300:	2c2d      	cmp	r4, #45	; 0x2d
   1a302:	d04f      	beq.n	1a3a4 <_strtol_l.isra.0+0xd8>
   1a304:	2300      	movs	r3, #0
   1a306:	4698      	mov	r8, r3
   1a308:	2c2b      	cmp	r4, #43	; 0x2b
   1a30a:	d05c      	beq.n	1a3c6 <_strtol_l.isra.0+0xfa>
   1a30c:	2e00      	cmp	r6, #0
   1a30e:	d003      	beq.n	1a318 <_strtol_l.isra.0+0x4c>
   1a310:	2e10      	cmp	r6, #16
   1a312:	d05b      	beq.n	1a3cc <_strtol_l.isra.0+0x100>
   1a314:	0037      	movs	r7, r6
   1a316:	e003      	b.n	1a320 <_strtol_l.isra.0+0x54>
   1a318:	2c30      	cmp	r4, #48	; 0x30
   1a31a:	d063      	beq.n	1a3e4 <_strtol_l.isra.0+0x118>
   1a31c:	270a      	movs	r7, #10
   1a31e:	260a      	movs	r6, #10
   1a320:	4b35      	ldr	r3, [pc, #212]	; (1a3f8 <_strtol_l.isra.0+0x12c>)
   1a322:	0039      	movs	r1, r7
   1a324:	4443      	add	r3, r8
   1a326:	0018      	movs	r0, r3
   1a328:	4699      	mov	r9, r3
   1a32a:	f7fc f9c5 	bl	166b8 <__aeabi_uidivmod>
   1a32e:	4648      	mov	r0, r9
   1a330:	468b      	mov	fp, r1
   1a332:	0039      	movs	r1, r7
   1a334:	f7fc f93a 	bl	165ac <__udivsi3>
   1a338:	2200      	movs	r2, #0
   1a33a:	0001      	movs	r1, r0
   1a33c:	2000      	movs	r0, #0
   1a33e:	0023      	movs	r3, r4
   1a340:	3b30      	subs	r3, #48	; 0x30
   1a342:	2b09      	cmp	r3, #9
   1a344:	d907      	bls.n	1a356 <_strtol_l.isra.0+0x8a>
   1a346:	3b11      	subs	r3, #17
   1a348:	2b19      	cmp	r3, #25
   1a34a:	d903      	bls.n	1a354 <_strtol_l.isra.0+0x88>
   1a34c:	0023      	movs	r3, r4
   1a34e:	3b61      	subs	r3, #97	; 0x61
   1a350:	2b19      	cmp	r3, #25
   1a352:	d80d      	bhi.n	1a370 <_strtol_l.isra.0+0xa4>
   1a354:	330a      	adds	r3, #10
   1a356:	429e      	cmp	r6, r3
   1a358:	dd0a      	ble.n	1a370 <_strtol_l.isra.0+0xa4>
   1a35a:	1c54      	adds	r4, r2, #1
   1a35c:	d005      	beq.n	1a36a <_strtol_l.isra.0+0x9e>
   1a35e:	4281      	cmp	r1, r0
   1a360:	d31d      	bcc.n	1a39e <_strtol_l.isra.0+0xd2>
   1a362:	d01a      	beq.n	1a39a <_strtol_l.isra.0+0xce>
   1a364:	2201      	movs	r2, #1
   1a366:	4378      	muls	r0, r7
   1a368:	1818      	adds	r0, r3, r0
   1a36a:	782c      	ldrb	r4, [r5, #0]
   1a36c:	3501      	adds	r5, #1
   1a36e:	e7e6      	b.n	1a33e <_strtol_l.isra.0+0x72>
   1a370:	1c53      	adds	r3, r2, #1
   1a372:	d01c      	beq.n	1a3ae <_strtol_l.isra.0+0xe2>
   1a374:	4643      	mov	r3, r8
   1a376:	2b00      	cmp	r3, #0
   1a378:	d000      	beq.n	1a37c <_strtol_l.isra.0+0xb0>
   1a37a:	4240      	negs	r0, r0
   1a37c:	4653      	mov	r3, sl
   1a37e:	2b00      	cmp	r3, #0
   1a380:	d004      	beq.n	1a38c <_strtol_l.isra.0+0xc0>
   1a382:	9b00      	ldr	r3, [sp, #0]
   1a384:	2a00      	cmp	r2, #0
   1a386:	d11c      	bne.n	1a3c2 <_strtol_l.isra.0+0xf6>
   1a388:	4652      	mov	r2, sl
   1a38a:	6013      	str	r3, [r2, #0]
   1a38c:	b003      	add	sp, #12
   1a38e:	bc3c      	pop	{r2, r3, r4, r5}
   1a390:	4690      	mov	r8, r2
   1a392:	4699      	mov	r9, r3
   1a394:	46a2      	mov	sl, r4
   1a396:	46ab      	mov	fp, r5
   1a398:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1a39a:	459b      	cmp	fp, r3
   1a39c:	dae2      	bge.n	1a364 <_strtol_l.isra.0+0x98>
   1a39e:	2201      	movs	r2, #1
   1a3a0:	4252      	negs	r2, r2
   1a3a2:	e7e2      	b.n	1a36a <_strtol_l.isra.0+0x9e>
   1a3a4:	2301      	movs	r3, #1
   1a3a6:	782c      	ldrb	r4, [r5, #0]
   1a3a8:	4698      	mov	r8, r3
   1a3aa:	1cbd      	adds	r5, r7, #2
   1a3ac:	e7ae      	b.n	1a30c <_strtol_l.isra.0+0x40>
   1a3ae:	2322      	movs	r3, #34	; 0x22
   1a3b0:	9a01      	ldr	r2, [sp, #4]
   1a3b2:	4648      	mov	r0, r9
   1a3b4:	6013      	str	r3, [r2, #0]
   1a3b6:	4653      	mov	r3, sl
   1a3b8:	2b00      	cmp	r3, #0
   1a3ba:	d0e7      	beq.n	1a38c <_strtol_l.isra.0+0xc0>
   1a3bc:	1e6b      	subs	r3, r5, #1
   1a3be:	4648      	mov	r0, r9
   1a3c0:	e7e2      	b.n	1a388 <_strtol_l.isra.0+0xbc>
   1a3c2:	4681      	mov	r9, r0
   1a3c4:	e7fa      	b.n	1a3bc <_strtol_l.isra.0+0xf0>
   1a3c6:	782c      	ldrb	r4, [r5, #0]
   1a3c8:	1cbd      	adds	r5, r7, #2
   1a3ca:	e79f      	b.n	1a30c <_strtol_l.isra.0+0x40>
   1a3cc:	2c30      	cmp	r4, #48	; 0x30
   1a3ce:	d111      	bne.n	1a3f4 <_strtol_l.isra.0+0x128>
   1a3d0:	2220      	movs	r2, #32
   1a3d2:	782b      	ldrb	r3, [r5, #0]
   1a3d4:	4393      	bics	r3, r2
   1a3d6:	2b58      	cmp	r3, #88	; 0x58
   1a3d8:	d10c      	bne.n	1a3f4 <_strtol_l.isra.0+0x128>
   1a3da:	786c      	ldrb	r4, [r5, #1]
   1a3dc:	2710      	movs	r7, #16
   1a3de:	3502      	adds	r5, #2
   1a3e0:	2610      	movs	r6, #16
   1a3e2:	e79d      	b.n	1a320 <_strtol_l.isra.0+0x54>
   1a3e4:	2220      	movs	r2, #32
   1a3e6:	782b      	ldrb	r3, [r5, #0]
   1a3e8:	4393      	bics	r3, r2
   1a3ea:	2b58      	cmp	r3, #88	; 0x58
   1a3ec:	d0f5      	beq.n	1a3da <_strtol_l.isra.0+0x10e>
   1a3ee:	2708      	movs	r7, #8
   1a3f0:	2608      	movs	r6, #8
   1a3f2:	e795      	b.n	1a320 <_strtol_l.isra.0+0x54>
   1a3f4:	2710      	movs	r7, #16
   1a3f6:	e793      	b.n	1a320 <_strtol_l.isra.0+0x54>
   1a3f8:	7fffffff 	.word	0x7fffffff

0001a3fc <strtol>:
   1a3fc:	0013      	movs	r3, r2
   1a3fe:	4a08      	ldr	r2, [pc, #32]	; (1a420 <strtol+0x24>)
   1a400:	b530      	push	{r4, r5, lr}
   1a402:	0005      	movs	r5, r0
   1a404:	6810      	ldr	r0, [r2, #0]
   1a406:	b083      	sub	sp, #12
   1a408:	6b44      	ldr	r4, [r0, #52]	; 0x34
   1a40a:	2c00      	cmp	r4, #0
   1a40c:	d006      	beq.n	1a41c <strtol+0x20>
   1a40e:	000a      	movs	r2, r1
   1a410:	9400      	str	r4, [sp, #0]
   1a412:	0029      	movs	r1, r5
   1a414:	f7ff ff5a 	bl	1a2cc <_strtol_l.isra.0>
   1a418:	b003      	add	sp, #12
   1a41a:	bd30      	pop	{r4, r5, pc}
   1a41c:	4c01      	ldr	r4, [pc, #4]	; (1a424 <strtol+0x28>)
   1a41e:	e7f6      	b.n	1a40e <strtol+0x12>
   1a420:	20000018 	.word	0x20000018
   1a424:	20000448 	.word	0x20000448

0001a428 <_strtoul_l.isra.0>:
   1a428:	b5f0      	push	{r4, r5, r6, r7, lr}
   1a42a:	4657      	mov	r7, sl
   1a42c:	464e      	mov	r6, r9
   1a42e:	46de      	mov	lr, fp
   1a430:	4645      	mov	r5, r8
   1a432:	b5e0      	push	{r5, r6, r7, lr}
   1a434:	001e      	movs	r6, r3
   1a436:	2308      	movs	r3, #8
   1a438:	b083      	sub	sp, #12
   1a43a:	4683      	mov	fp, r0
   1a43c:	4689      	mov	r9, r1
   1a43e:	4692      	mov	sl, r2
   1a440:	000f      	movs	r7, r1
   1a442:	4698      	mov	r8, r3
   1a444:	e000      	b.n	1a448 <_strtoul_l.isra.0+0x20>
   1a446:	002f      	movs	r7, r5
   1a448:	980c      	ldr	r0, [sp, #48]	; 0x30
   1a44a:	783c      	ldrb	r4, [r7, #0]
   1a44c:	f7ff f94a 	bl	196e4 <__locale_ctype_ptr_l>
   1a450:	4642      	mov	r2, r8
   1a452:	1900      	adds	r0, r0, r4
   1a454:	7843      	ldrb	r3, [r0, #1]
   1a456:	1c7d      	adds	r5, r7, #1
   1a458:	421a      	tst	r2, r3
   1a45a:	d1f4      	bne.n	1a446 <_strtoul_l.isra.0+0x1e>
   1a45c:	2c2d      	cmp	r4, #45	; 0x2d
   1a45e:	d05b      	beq.n	1a518 <_strtoul_l.isra.0+0xf0>
   1a460:	2300      	movs	r3, #0
   1a462:	9301      	str	r3, [sp, #4]
   1a464:	2c2b      	cmp	r4, #43	; 0x2b
   1a466:	d05c      	beq.n	1a522 <_strtoul_l.isra.0+0xfa>
   1a468:	2e00      	cmp	r6, #0
   1a46a:	d00e      	beq.n	1a48a <_strtoul_l.isra.0+0x62>
   1a46c:	2e10      	cmp	r6, #16
   1a46e:	d05b      	beq.n	1a528 <_strtoul_l.isra.0+0x100>
   1a470:	2001      	movs	r0, #1
   1a472:	0031      	movs	r1, r6
   1a474:	4240      	negs	r0, r0
   1a476:	f7fc f899 	bl	165ac <__udivsi3>
   1a47a:	0007      	movs	r7, r0
   1a47c:	2001      	movs	r0, #1
   1a47e:	0031      	movs	r1, r6
   1a480:	4240      	negs	r0, r0
   1a482:	46b0      	mov	r8, r6
   1a484:	f7fc f918 	bl	166b8 <__aeabi_uidivmod>
   1a488:	e006      	b.n	1a498 <_strtoul_l.isra.0+0x70>
   1a48a:	2c30      	cmp	r4, #48	; 0x30
   1a48c:	d05b      	beq.n	1a546 <_strtoul_l.isra.0+0x11e>
   1a48e:	230a      	movs	r3, #10
   1a490:	2105      	movs	r1, #5
   1a492:	4698      	mov	r8, r3
   1a494:	260a      	movs	r6, #10
   1a496:	4f34      	ldr	r7, [pc, #208]	; (1a568 <_strtoul_l.isra.0+0x140>)
   1a498:	2200      	movs	r2, #0
   1a49a:	2000      	movs	r0, #0
   1a49c:	0023      	movs	r3, r4
   1a49e:	3b30      	subs	r3, #48	; 0x30
   1a4a0:	2b09      	cmp	r3, #9
   1a4a2:	d907      	bls.n	1a4b4 <_strtoul_l.isra.0+0x8c>
   1a4a4:	3b11      	subs	r3, #17
   1a4a6:	2b19      	cmp	r3, #25
   1a4a8:	d903      	bls.n	1a4b2 <_strtoul_l.isra.0+0x8a>
   1a4aa:	0023      	movs	r3, r4
   1a4ac:	3b61      	subs	r3, #97	; 0x61
   1a4ae:	2b19      	cmp	r3, #25
   1a4b0:	d80e      	bhi.n	1a4d0 <_strtoul_l.isra.0+0xa8>
   1a4b2:	330a      	adds	r3, #10
   1a4b4:	429e      	cmp	r6, r3
   1a4b6:	dd0b      	ble.n	1a4d0 <_strtoul_l.isra.0+0xa8>
   1a4b8:	2a00      	cmp	r2, #0
   1a4ba:	db20      	blt.n	1a4fe <_strtoul_l.isra.0+0xd6>
   1a4bc:	42b8      	cmp	r0, r7
   1a4be:	d81e      	bhi.n	1a4fe <_strtoul_l.isra.0+0xd6>
   1a4c0:	d01b      	beq.n	1a4fa <_strtoul_l.isra.0+0xd2>
   1a4c2:	4642      	mov	r2, r8
   1a4c4:	4350      	muls	r0, r2
   1a4c6:	2201      	movs	r2, #1
   1a4c8:	1818      	adds	r0, r3, r0
   1a4ca:	782c      	ldrb	r4, [r5, #0]
   1a4cc:	3501      	adds	r5, #1
   1a4ce:	e7e5      	b.n	1a49c <_strtoul_l.isra.0+0x74>
   1a4d0:	2a00      	cmp	r2, #0
   1a4d2:	db17      	blt.n	1a504 <_strtoul_l.isra.0+0xdc>
   1a4d4:	9b01      	ldr	r3, [sp, #4]
   1a4d6:	2b00      	cmp	r3, #0
   1a4d8:	d000      	beq.n	1a4dc <_strtoul_l.isra.0+0xb4>
   1a4da:	4240      	negs	r0, r0
   1a4dc:	4653      	mov	r3, sl
   1a4de:	2b00      	cmp	r3, #0
   1a4e0:	d004      	beq.n	1a4ec <_strtoul_l.isra.0+0xc4>
   1a4e2:	464b      	mov	r3, r9
   1a4e4:	2a00      	cmp	r2, #0
   1a4e6:	d115      	bne.n	1a514 <_strtoul_l.isra.0+0xec>
   1a4e8:	4652      	mov	r2, sl
   1a4ea:	6013      	str	r3, [r2, #0]
   1a4ec:	b003      	add	sp, #12
   1a4ee:	bc3c      	pop	{r2, r3, r4, r5}
   1a4f0:	4690      	mov	r8, r2
   1a4f2:	4699      	mov	r9, r3
   1a4f4:	46a2      	mov	sl, r4
   1a4f6:	46ab      	mov	fp, r5
   1a4f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1a4fa:	428b      	cmp	r3, r1
   1a4fc:	dde1      	ble.n	1a4c2 <_strtoul_l.isra.0+0x9a>
   1a4fe:	2201      	movs	r2, #1
   1a500:	4252      	negs	r2, r2
   1a502:	e7e2      	b.n	1a4ca <_strtoul_l.isra.0+0xa2>
   1a504:	2322      	movs	r3, #34	; 0x22
   1a506:	465a      	mov	r2, fp
   1a508:	2001      	movs	r0, #1
   1a50a:	6013      	str	r3, [r2, #0]
   1a50c:	4653      	mov	r3, sl
   1a50e:	4240      	negs	r0, r0
   1a510:	2b00      	cmp	r3, #0
   1a512:	d0eb      	beq.n	1a4ec <_strtoul_l.isra.0+0xc4>
   1a514:	1e6b      	subs	r3, r5, #1
   1a516:	e7e7      	b.n	1a4e8 <_strtoul_l.isra.0+0xc0>
   1a518:	2301      	movs	r3, #1
   1a51a:	782c      	ldrb	r4, [r5, #0]
   1a51c:	9301      	str	r3, [sp, #4]
   1a51e:	1cbd      	adds	r5, r7, #2
   1a520:	e7a2      	b.n	1a468 <_strtoul_l.isra.0+0x40>
   1a522:	782c      	ldrb	r4, [r5, #0]
   1a524:	1cbd      	adds	r5, r7, #2
   1a526:	e79f      	b.n	1a468 <_strtoul_l.isra.0+0x40>
   1a528:	2c30      	cmp	r4, #48	; 0x30
   1a52a:	d117      	bne.n	1a55c <_strtoul_l.isra.0+0x134>
   1a52c:	2220      	movs	r2, #32
   1a52e:	782b      	ldrb	r3, [r5, #0]
   1a530:	4393      	bics	r3, r2
   1a532:	2b58      	cmp	r3, #88	; 0x58
   1a534:	d112      	bne.n	1a55c <_strtoul_l.isra.0+0x134>
   1a536:	2310      	movs	r3, #16
   1a538:	786c      	ldrb	r4, [r5, #1]
   1a53a:	210f      	movs	r1, #15
   1a53c:	3502      	adds	r5, #2
   1a53e:	4f0b      	ldr	r7, [pc, #44]	; (1a56c <_strtoul_l.isra.0+0x144>)
   1a540:	4698      	mov	r8, r3
   1a542:	2610      	movs	r6, #16
   1a544:	e7a8      	b.n	1a498 <_strtoul_l.isra.0+0x70>
   1a546:	2220      	movs	r2, #32
   1a548:	782b      	ldrb	r3, [r5, #0]
   1a54a:	4393      	bics	r3, r2
   1a54c:	2b58      	cmp	r3, #88	; 0x58
   1a54e:	d0f2      	beq.n	1a536 <_strtoul_l.isra.0+0x10e>
   1a550:	2308      	movs	r3, #8
   1a552:	2107      	movs	r1, #7
   1a554:	4f06      	ldr	r7, [pc, #24]	; (1a570 <_strtoul_l.isra.0+0x148>)
   1a556:	4698      	mov	r8, r3
   1a558:	2608      	movs	r6, #8
   1a55a:	e79d      	b.n	1a498 <_strtoul_l.isra.0+0x70>
   1a55c:	2310      	movs	r3, #16
   1a55e:	210f      	movs	r1, #15
   1a560:	4f02      	ldr	r7, [pc, #8]	; (1a56c <_strtoul_l.isra.0+0x144>)
   1a562:	4698      	mov	r8, r3
   1a564:	e798      	b.n	1a498 <_strtoul_l.isra.0+0x70>
   1a566:	46c0      	nop			; (mov r8, r8)
   1a568:	19999999 	.word	0x19999999
   1a56c:	0fffffff 	.word	0x0fffffff
   1a570:	1fffffff 	.word	0x1fffffff

0001a574 <strtoul>:
   1a574:	0013      	movs	r3, r2
   1a576:	4a08      	ldr	r2, [pc, #32]	; (1a598 <strtoul+0x24>)
   1a578:	b530      	push	{r4, r5, lr}
   1a57a:	0005      	movs	r5, r0
   1a57c:	6810      	ldr	r0, [r2, #0]
   1a57e:	b083      	sub	sp, #12
   1a580:	6b44      	ldr	r4, [r0, #52]	; 0x34
   1a582:	2c00      	cmp	r4, #0
   1a584:	d006      	beq.n	1a594 <strtoul+0x20>
   1a586:	000a      	movs	r2, r1
   1a588:	9400      	str	r4, [sp, #0]
   1a58a:	0029      	movs	r1, r5
   1a58c:	f7ff ff4c 	bl	1a428 <_strtoul_l.isra.0>
   1a590:	b003      	add	sp, #12
   1a592:	bd30      	pop	{r4, r5, pc}
   1a594:	4c01      	ldr	r4, [pc, #4]	; (1a59c <strtoul+0x28>)
   1a596:	e7f6      	b.n	1a586 <strtoul+0x12>
   1a598:	20000018 	.word	0x20000018
   1a59c:	20000448 	.word	0x20000448

0001a5a0 <__utoa>:
   1a5a0:	b5f0      	push	{r4, r5, r6, r7, lr}
   1a5a2:	4646      	mov	r6, r8
   1a5a4:	46d6      	mov	lr, sl
   1a5a6:	464f      	mov	r7, r9
   1a5a8:	b5c0      	push	{r6, r7, lr}
   1a5aa:	b08a      	sub	sp, #40	; 0x28
   1a5ac:	4690      	mov	r8, r2
   1a5ae:	466a      	mov	r2, sp
   1a5b0:	4b1d      	ldr	r3, [pc, #116]	; (1a628 <__utoa+0x88>)
   1a5b2:	000d      	movs	r5, r1
   1a5b4:	0006      	movs	r6, r0
   1a5b6:	cb13      	ldmia	r3!, {r0, r1, r4}
   1a5b8:	c213      	stmia	r2!, {r0, r1, r4}
   1a5ba:	cb13      	ldmia	r3!, {r0, r1, r4}
   1a5bc:	c213      	stmia	r2!, {r0, r1, r4}
   1a5be:	cb13      	ldmia	r3!, {r0, r1, r4}
   1a5c0:	c213      	stmia	r2!, {r0, r1, r4}
   1a5c2:	781b      	ldrb	r3, [r3, #0]
   1a5c4:	46ea      	mov	sl, sp
   1a5c6:	7013      	strb	r3, [r2, #0]
   1a5c8:	4643      	mov	r3, r8
   1a5ca:	3b02      	subs	r3, #2
   1a5cc:	002f      	movs	r7, r5
   1a5ce:	2400      	movs	r4, #0
   1a5d0:	2b22      	cmp	r3, #34	; 0x22
   1a5d2:	d901      	bls.n	1a5d8 <__utoa+0x38>
   1a5d4:	e024      	b.n	1a620 <__utoa+0x80>
   1a5d6:	464c      	mov	r4, r9
   1a5d8:	1c63      	adds	r3, r4, #1
   1a5da:	0030      	movs	r0, r6
   1a5dc:	4641      	mov	r1, r8
   1a5de:	4699      	mov	r9, r3
   1a5e0:	f7fc f86a 	bl	166b8 <__aeabi_uidivmod>
   1a5e4:	4653      	mov	r3, sl
   1a5e6:	5c5b      	ldrb	r3, [r3, r1]
   1a5e8:	0030      	movs	r0, r6
   1a5ea:	703b      	strb	r3, [r7, #0]
   1a5ec:	4641      	mov	r1, r8
   1a5ee:	f7fb ffdd 	bl	165ac <__udivsi3>
   1a5f2:	3701      	adds	r7, #1
   1a5f4:	1e06      	subs	r6, r0, #0
   1a5f6:	d1ee      	bne.n	1a5d6 <__utoa+0x36>
   1a5f8:	464b      	mov	r3, r9
   1a5fa:	54e8      	strb	r0, [r5, r3]
   1a5fc:	2300      	movs	r3, #0
   1a5fe:	2c00      	cmp	r4, #0
   1a600:	d007      	beq.n	1a612 <__utoa+0x72>
   1a602:	5cea      	ldrb	r2, [r5, r3]
   1a604:	5d29      	ldrb	r1, [r5, r4]
   1a606:	54e9      	strb	r1, [r5, r3]
   1a608:	552a      	strb	r2, [r5, r4]
   1a60a:	3301      	adds	r3, #1
   1a60c:	3c01      	subs	r4, #1
   1a60e:	42a3      	cmp	r3, r4
   1a610:	dbf7      	blt.n	1a602 <__utoa+0x62>
   1a612:	0028      	movs	r0, r5
   1a614:	b00a      	add	sp, #40	; 0x28
   1a616:	bc1c      	pop	{r2, r3, r4}
   1a618:	4690      	mov	r8, r2
   1a61a:	4699      	mov	r9, r3
   1a61c:	46a2      	mov	sl, r4
   1a61e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1a620:	702c      	strb	r4, [r5, #0]
   1a622:	2000      	movs	r0, #0
   1a624:	e7f6      	b.n	1a614 <__utoa+0x74>
   1a626:	46c0      	nop			; (mov r8, r8)
   1a628:	000204dc 	.word	0x000204dc

0001a62c <utoa>:
   1a62c:	b510      	push	{r4, lr}
   1a62e:	f7ff ffb7 	bl	1a5a0 <__utoa>
   1a632:	bd10      	pop	{r4, pc}

0001a634 <_vfprintf_r>:
   1a634:	b5f0      	push	{r4, r5, r6, r7, lr}
   1a636:	46de      	mov	lr, fp
   1a638:	464e      	mov	r6, r9
   1a63a:	4645      	mov	r5, r8
   1a63c:	4657      	mov	r7, sl
   1a63e:	b5e0      	push	{r5, r6, r7, lr}
   1a640:	b0c3      	sub	sp, #268	; 0x10c
   1a642:	4689      	mov	r9, r1
   1a644:	0014      	movs	r4, r2
   1a646:	001d      	movs	r5, r3
   1a648:	930f      	str	r3, [sp, #60]	; 0x3c
   1a64a:	0006      	movs	r6, r0
   1a64c:	9006      	str	r0, [sp, #24]
   1a64e:	f003 f8cd 	bl	1d7ec <_localeconv_r>
   1a652:	6803      	ldr	r3, [r0, #0]
   1a654:	0018      	movs	r0, r3
   1a656:	9318      	str	r3, [sp, #96]	; 0x60
   1a658:	f7ff fe06 	bl	1a268 <strlen>
   1a65c:	9017      	str	r0, [sp, #92]	; 0x5c
   1a65e:	2e00      	cmp	r6, #0
   1a660:	d004      	beq.n	1a66c <_vfprintf_r+0x38>
   1a662:	6bb3      	ldr	r3, [r6, #56]	; 0x38
   1a664:	9307      	str	r3, [sp, #28]
   1a666:	2b00      	cmp	r3, #0
   1a668:	d100      	bne.n	1a66c <_vfprintf_r+0x38>
   1a66a:	e0a7      	b.n	1a7bc <_vfprintf_r+0x188>
   1a66c:	464b      	mov	r3, r9
   1a66e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   1a670:	07db      	lsls	r3, r3, #31
   1a672:	d478      	bmi.n	1a766 <_vfprintf_r+0x132>
   1a674:	464b      	mov	r3, r9
   1a676:	210c      	movs	r1, #12
   1a678:	5e59      	ldrsh	r1, [r3, r1]
   1a67a:	b28b      	uxth	r3, r1
   1a67c:	059a      	lsls	r2, r3, #22
   1a67e:	d56e      	bpl.n	1a75e <_vfprintf_r+0x12a>
   1a680:	2280      	movs	r2, #128	; 0x80
   1a682:	0192      	lsls	r2, r2, #6
   1a684:	4213      	tst	r3, r2
   1a686:	d109      	bne.n	1a69c <_vfprintf_r+0x68>
   1a688:	430a      	orrs	r2, r1
   1a68a:	464b      	mov	r3, r9
   1a68c:	4649      	mov	r1, r9
   1a68e:	819a      	strh	r2, [r3, #12]
   1a690:	6e49      	ldr	r1, [r1, #100]	; 0x64
   1a692:	4bcc      	ldr	r3, [pc, #816]	; (1a9c4 <_vfprintf_r+0x390>)
   1a694:	400b      	ands	r3, r1
   1a696:	4649      	mov	r1, r9
   1a698:	664b      	str	r3, [r1, #100]	; 0x64
   1a69a:	b293      	uxth	r3, r2
   1a69c:	071a      	lsls	r2, r3, #28
   1a69e:	d567      	bpl.n	1a770 <_vfprintf_r+0x13c>
   1a6a0:	464a      	mov	r2, r9
   1a6a2:	6912      	ldr	r2, [r2, #16]
   1a6a4:	2a00      	cmp	r2, #0
   1a6a6:	d063      	beq.n	1a770 <_vfprintf_r+0x13c>
   1a6a8:	221a      	movs	r2, #26
   1a6aa:	401a      	ands	r2, r3
   1a6ac:	2a0a      	cmp	r2, #10
   1a6ae:	d100      	bne.n	1a6b2 <_vfprintf_r+0x7e>
   1a6b0:	e088      	b.n	1a7c4 <_vfprintf_r+0x190>
   1a6b2:	ab32      	add	r3, sp, #200	; 0xc8
   1a6b4:	9325      	str	r3, [sp, #148]	; 0x94
   1a6b6:	2300      	movs	r3, #0
   1a6b8:	46cb      	mov	fp, r9
   1a6ba:	af25      	add	r7, sp, #148	; 0x94
   1a6bc:	60bb      	str	r3, [r7, #8]
   1a6be:	607b      	str	r3, [r7, #4]
   1a6c0:	9407      	str	r4, [sp, #28]
   1a6c2:	9314      	str	r3, [sp, #80]	; 0x50
   1a6c4:	9316      	str	r3, [sp, #88]	; 0x58
   1a6c6:	9315      	str	r3, [sp, #84]	; 0x54
   1a6c8:	ae32      	add	r6, sp, #200	; 0xc8
   1a6ca:	9319      	str	r3, [sp, #100]	; 0x64
   1a6cc:	931a      	str	r3, [sp, #104]	; 0x68
   1a6ce:	930a      	str	r3, [sp, #40]	; 0x28
   1a6d0:	9c07      	ldr	r4, [sp, #28]
   1a6d2:	7823      	ldrb	r3, [r4, #0]
   1a6d4:	2b00      	cmp	r3, #0
   1a6d6:	d101      	bne.n	1a6dc <_vfprintf_r+0xa8>
   1a6d8:	f000 fd9e 	bl	1b218 <_vfprintf_r+0xbe4>
   1a6dc:	2b25      	cmp	r3, #37	; 0x25
   1a6de:	d103      	bne.n	1a6e8 <_vfprintf_r+0xb4>
   1a6e0:	f000 fd9a 	bl	1b218 <_vfprintf_r+0xbe4>
   1a6e4:	2b25      	cmp	r3, #37	; 0x25
   1a6e6:	d003      	beq.n	1a6f0 <_vfprintf_r+0xbc>
   1a6e8:	3401      	adds	r4, #1
   1a6ea:	7823      	ldrb	r3, [r4, #0]
   1a6ec:	2b00      	cmp	r3, #0
   1a6ee:	d1f9      	bne.n	1a6e4 <_vfprintf_r+0xb0>
   1a6f0:	9b07      	ldr	r3, [sp, #28]
   1a6f2:	1ae5      	subs	r5, r4, r3
   1a6f4:	d010      	beq.n	1a718 <_vfprintf_r+0xe4>
   1a6f6:	9b07      	ldr	r3, [sp, #28]
   1a6f8:	6075      	str	r5, [r6, #4]
   1a6fa:	6033      	str	r3, [r6, #0]
   1a6fc:	68bb      	ldr	r3, [r7, #8]
   1a6fe:	195b      	adds	r3, r3, r5
   1a700:	60bb      	str	r3, [r7, #8]
   1a702:	687b      	ldr	r3, [r7, #4]
   1a704:	3301      	adds	r3, #1
   1a706:	607b      	str	r3, [r7, #4]
   1a708:	2b07      	cmp	r3, #7
   1a70a:	dc4c      	bgt.n	1a7a6 <_vfprintf_r+0x172>
   1a70c:	3608      	adds	r6, #8
   1a70e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1a710:	469c      	mov	ip, r3
   1a712:	44ac      	add	ip, r5
   1a714:	4663      	mov	r3, ip
   1a716:	930a      	str	r3, [sp, #40]	; 0x28
   1a718:	7823      	ldrb	r3, [r4, #0]
   1a71a:	2b00      	cmp	r3, #0
   1a71c:	d101      	bne.n	1a722 <_vfprintf_r+0xee>
   1a71e:	f000 fc99 	bl	1b054 <_vfprintf_r+0xa20>
   1a722:	1c63      	adds	r3, r4, #1
   1a724:	9307      	str	r3, [sp, #28]
   1a726:	2300      	movs	r3, #0
   1a728:	aa16      	add	r2, sp, #88	; 0x58
   1a72a:	77d3      	strb	r3, [r2, #31]
   1a72c:	2201      	movs	r2, #1
   1a72e:	4252      	negs	r2, r2
   1a730:	4692      	mov	sl, r2
   1a732:	2200      	movs	r2, #0
   1a734:	920b      	str	r2, [sp, #44]	; 0x2c
   1a736:	3220      	adds	r2, #32
   1a738:	4691      	mov	r9, r2
   1a73a:	3220      	adds	r2, #32
   1a73c:	7863      	ldrb	r3, [r4, #1]
   1a73e:	2100      	movs	r1, #0
   1a740:	2000      	movs	r0, #0
   1a742:	2400      	movs	r4, #0
   1a744:	4694      	mov	ip, r2
   1a746:	9a07      	ldr	r2, [sp, #28]
   1a748:	3201      	adds	r2, #1
   1a74a:	9207      	str	r2, [sp, #28]
   1a74c:	001a      	movs	r2, r3
   1a74e:	3a20      	subs	r2, #32
   1a750:	2a58      	cmp	r2, #88	; 0x58
   1a752:	d900      	bls.n	1a756 <_vfprintf_r+0x122>
   1a754:	e2e7      	b.n	1ad26 <_vfprintf_r+0x6f2>
   1a756:	4d9c      	ldr	r5, [pc, #624]	; (1a9c8 <_vfprintf_r+0x394>)
   1a758:	0092      	lsls	r2, r2, #2
   1a75a:	58aa      	ldr	r2, [r5, r2]
   1a75c:	4697      	mov	pc, r2
   1a75e:	464b      	mov	r3, r9
   1a760:	6d98      	ldr	r0, [r3, #88]	; 0x58
   1a762:	f003 f855 	bl	1d810 <__retarget_lock_acquire_recursive>
   1a766:	464b      	mov	r3, r9
   1a768:	210c      	movs	r1, #12
   1a76a:	5e59      	ldrsh	r1, [r3, r1]
   1a76c:	b28b      	uxth	r3, r1
   1a76e:	e787      	b.n	1a680 <_vfprintf_r+0x4c>
   1a770:	4649      	mov	r1, r9
   1a772:	9806      	ldr	r0, [sp, #24]
   1a774:	f001 fb1c 	bl	1bdb0 <__swsetup_r>
   1a778:	464b      	mov	r3, r9
   1a77a:	2800      	cmp	r0, #0
   1a77c:	d03a      	beq.n	1a7f4 <_vfprintf_r+0x1c0>
   1a77e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   1a780:	07db      	lsls	r3, r3, #31
   1a782:	d405      	bmi.n	1a790 <_vfprintf_r+0x15c>
   1a784:	464b      	mov	r3, r9
   1a786:	899b      	ldrh	r3, [r3, #12]
   1a788:	059b      	lsls	r3, r3, #22
   1a78a:	d401      	bmi.n	1a790 <_vfprintf_r+0x15c>
   1a78c:	f000 ffcf 	bl	1b72e <_vfprintf_r+0x10fa>
   1a790:	2301      	movs	r3, #1
   1a792:	425b      	negs	r3, r3
   1a794:	930a      	str	r3, [sp, #40]	; 0x28
   1a796:	980a      	ldr	r0, [sp, #40]	; 0x28
   1a798:	b043      	add	sp, #268	; 0x10c
   1a79a:	bc3c      	pop	{r2, r3, r4, r5}
   1a79c:	4690      	mov	r8, r2
   1a79e:	4699      	mov	r9, r3
   1a7a0:	46a2      	mov	sl, r4
   1a7a2:	46ab      	mov	fp, r5
   1a7a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1a7a6:	003a      	movs	r2, r7
   1a7a8:	4659      	mov	r1, fp
   1a7aa:	9806      	ldr	r0, [sp, #24]
   1a7ac:	f003 fe82 	bl	1e4b4 <__sprint_r>
   1a7b0:	2800      	cmp	r0, #0
   1a7b2:	d001      	beq.n	1a7b8 <_vfprintf_r+0x184>
   1a7b4:	f000 fcce 	bl	1b154 <_vfprintf_r+0xb20>
   1a7b8:	ae32      	add	r6, sp, #200	; 0xc8
   1a7ba:	e7a8      	b.n	1a70e <_vfprintf_r+0xda>
   1a7bc:	9806      	ldr	r0, [sp, #24]
   1a7be:	f002 fce5 	bl	1d18c <__sinit>
   1a7c2:	e753      	b.n	1a66c <_vfprintf_r+0x38>
   1a7c4:	464a      	mov	r2, r9
   1a7c6:	210e      	movs	r1, #14
   1a7c8:	5e52      	ldrsh	r2, [r2, r1]
   1a7ca:	2a00      	cmp	r2, #0
   1a7cc:	da00      	bge.n	1a7d0 <_vfprintf_r+0x19c>
   1a7ce:	e770      	b.n	1a6b2 <_vfprintf_r+0x7e>
   1a7d0:	464a      	mov	r2, r9
   1a7d2:	6e52      	ldr	r2, [r2, #100]	; 0x64
   1a7d4:	07d2      	lsls	r2, r2, #31
   1a7d6:	d405      	bmi.n	1a7e4 <_vfprintf_r+0x1b0>
   1a7d8:	059b      	lsls	r3, r3, #22
   1a7da:	d403      	bmi.n	1a7e4 <_vfprintf_r+0x1b0>
   1a7dc:	464b      	mov	r3, r9
   1a7de:	6d98      	ldr	r0, [r3, #88]	; 0x58
   1a7e0:	f003 f818 	bl	1d814 <__retarget_lock_release_recursive>
   1a7e4:	002b      	movs	r3, r5
   1a7e6:	0022      	movs	r2, r4
   1a7e8:	4649      	mov	r1, r9
   1a7ea:	9806      	ldr	r0, [sp, #24]
   1a7ec:	f001 fa8e 	bl	1bd0c <__sbprintf>
   1a7f0:	900a      	str	r0, [sp, #40]	; 0x28
   1a7f2:	e7d0      	b.n	1a796 <_vfprintf_r+0x162>
   1a7f4:	899b      	ldrh	r3, [r3, #12]
   1a7f6:	e757      	b.n	1a6a8 <_vfprintf_r+0x74>
   1a7f8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1a7fa:	920f      	str	r2, [sp, #60]	; 0x3c
   1a7fc:	425b      	negs	r3, r3
   1a7fe:	930b      	str	r3, [sp, #44]	; 0x2c
   1a800:	2304      	movs	r3, #4
   1a802:	431c      	orrs	r4, r3
   1a804:	9b07      	ldr	r3, [sp, #28]
   1a806:	781b      	ldrb	r3, [r3, #0]
   1a808:	e79d      	b.n	1a746 <_vfprintf_r+0x112>
   1a80a:	9b07      	ldr	r3, [sp, #28]
   1a80c:	2101      	movs	r1, #1
   1a80e:	781b      	ldrb	r3, [r3, #0]
   1a810:	202b      	movs	r0, #43	; 0x2b
   1a812:	e798      	b.n	1a746 <_vfprintf_r+0x112>
   1a814:	9b07      	ldr	r3, [sp, #28]
   1a816:	1c5a      	adds	r2, r3, #1
   1a818:	781b      	ldrb	r3, [r3, #0]
   1a81a:	4690      	mov	r8, r2
   1a81c:	2b2a      	cmp	r3, #42	; 0x2a
   1a81e:	d101      	bne.n	1a824 <_vfprintf_r+0x1f0>
   1a820:	f001 fa38 	bl	1bc94 <_vfprintf_r+0x1660>
   1a824:	001a      	movs	r2, r3
   1a826:	2500      	movs	r5, #0
   1a828:	3a30      	subs	r2, #48	; 0x30
   1a82a:	46aa      	mov	sl, r5
   1a82c:	2a09      	cmp	r2, #9
   1a82e:	d901      	bls.n	1a834 <_vfprintf_r+0x200>
   1a830:	f001 f96d 	bl	1bb0e <_vfprintf_r+0x14da>
   1a834:	0025      	movs	r5, r4
   1a836:	4643      	mov	r3, r8
   1a838:	4654      	mov	r4, sl
   1a83a:	4688      	mov	r8, r1
   1a83c:	4682      	mov	sl, r0
   1a83e:	00a1      	lsls	r1, r4, #2
   1a840:	190c      	adds	r4, r1, r4
   1a842:	7818      	ldrb	r0, [r3, #0]
   1a844:	0064      	lsls	r4, r4, #1
   1a846:	18a4      	adds	r4, r4, r2
   1a848:	0002      	movs	r2, r0
   1a84a:	1c59      	adds	r1, r3, #1
   1a84c:	3a30      	subs	r2, #48	; 0x30
   1a84e:	000b      	movs	r3, r1
   1a850:	2a09      	cmp	r2, #9
   1a852:	d9f4      	bls.n	1a83e <_vfprintf_r+0x20a>
   1a854:	9107      	str	r1, [sp, #28]
   1a856:	0003      	movs	r3, r0
   1a858:	4641      	mov	r1, r8
   1a85a:	4650      	mov	r0, sl
   1a85c:	46a2      	mov	sl, r4
   1a85e:	002c      	movs	r4, r5
   1a860:	e774      	b.n	1a74c <_vfprintf_r+0x118>
   1a862:	9312      	str	r3, [sp, #72]	; 0x48
   1a864:	2900      	cmp	r1, #0
   1a866:	d001      	beq.n	1a86c <_vfprintf_r+0x238>
   1a868:	f001 fa2e 	bl	1bcc8 <_vfprintf_r+0x1694>
   1a86c:	4b57      	ldr	r3, [pc, #348]	; (1a9cc <_vfprintf_r+0x398>)
   1a86e:	9319      	str	r3, [sp, #100]	; 0x64
   1a870:	06a3      	lsls	r3, r4, #26
   1a872:	d501      	bpl.n	1a878 <_vfprintf_r+0x244>
   1a874:	f000 fe9a 	bl	1b5ac <_vfprintf_r+0xf78>
   1a878:	06e3      	lsls	r3, r4, #27
   1a87a:	d501      	bpl.n	1a880 <_vfprintf_r+0x24c>
   1a87c:	f000 fd9a 	bl	1b3b4 <_vfprintf_r+0xd80>
   1a880:	0663      	lsls	r3, r4, #25
   1a882:	d401      	bmi.n	1a888 <_vfprintf_r+0x254>
   1a884:	f000 fd96 	bl	1b3b4 <_vfprintf_r+0xd80>
   1a888:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1a88a:	881a      	ldrh	r2, [r3, #0]
   1a88c:	920c      	str	r2, [sp, #48]	; 0x30
   1a88e:	2200      	movs	r2, #0
   1a890:	3304      	adds	r3, #4
   1a892:	920d      	str	r2, [sp, #52]	; 0x34
   1a894:	930f      	str	r3, [sp, #60]	; 0x3c
   1a896:	07e3      	lsls	r3, r4, #31
   1a898:	d401      	bmi.n	1a89e <_vfprintf_r+0x26a>
   1a89a:	f000 fd76 	bl	1b38a <_vfprintf_r+0xd56>
   1a89e:	990c      	ldr	r1, [sp, #48]	; 0x30
   1a8a0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   1a8a2:	000b      	movs	r3, r1
   1a8a4:	4313      	orrs	r3, r2
   1a8a6:	001a      	movs	r2, r3
   1a8a8:	2302      	movs	r3, #2
   1a8aa:	2a00      	cmp	r2, #0
   1a8ac:	d008      	beq.n	1a8c0 <_vfprintf_r+0x28c>
   1a8ae:	2030      	movs	r0, #48	; 0x30
   1a8b0:	a91e      	add	r1, sp, #120	; 0x78
   1a8b2:	7008      	strb	r0, [r1, #0]
   1a8b4:	2548      	movs	r5, #72	; 0x48
   1a8b6:	4668      	mov	r0, sp
   1a8b8:	1940      	adds	r0, r0, r5
   1a8ba:	7800      	ldrb	r0, [r0, #0]
   1a8bc:	431c      	orrs	r4, r3
   1a8be:	7048      	strb	r0, [r1, #1]
   1a8c0:	2100      	movs	r1, #0
   1a8c2:	4688      	mov	r8, r1
   1a8c4:	a816      	add	r0, sp, #88	; 0x58
   1a8c6:	77c1      	strb	r1, [r0, #31]
   1a8c8:	4651      	mov	r1, sl
   1a8ca:	3101      	adds	r1, #1
   1a8cc:	d100      	bne.n	1a8d0 <_vfprintf_r+0x29c>
   1a8ce:	e0e6      	b.n	1aa9e <_vfprintf_r+0x46a>
   1a8d0:	2180      	movs	r1, #128	; 0x80
   1a8d2:	0020      	movs	r0, r4
   1a8d4:	4388      	bics	r0, r1
   1a8d6:	9009      	str	r0, [sp, #36]	; 0x24
   1a8d8:	2a00      	cmp	r2, #0
   1a8da:	d000      	beq.n	1a8de <_vfprintf_r+0x2aa>
   1a8dc:	e0e3      	b.n	1aaa6 <_vfprintf_r+0x472>
   1a8de:	4652      	mov	r2, sl
   1a8e0:	2a00      	cmp	r2, #0
   1a8e2:	d001      	beq.n	1a8e8 <_vfprintf_r+0x2b4>
   1a8e4:	f000 fc38 	bl	1b158 <_vfprintf_r+0xb24>
   1a8e8:	2b00      	cmp	r3, #0
   1a8ea:	d001      	beq.n	1a8f0 <_vfprintf_r+0x2bc>
   1a8ec:	f000 fd0c 	bl	1b308 <_vfprintf_r+0xcd4>
   1a8f0:	2001      	movs	r0, #1
   1a8f2:	ab32      	add	r3, sp, #200	; 0xc8
   1a8f4:	4020      	ands	r0, r4
   1a8f6:	900e      	str	r0, [sp, #56]	; 0x38
   1a8f8:	9311      	str	r3, [sp, #68]	; 0x44
   1a8fa:	d008      	beq.n	1a90e <_vfprintf_r+0x2da>
   1a8fc:	2327      	movs	r3, #39	; 0x27
   1a8fe:	2130      	movs	r1, #48	; 0x30
   1a900:	aa28      	add	r2, sp, #160	; 0xa0
   1a902:	54d1      	strb	r1, [r2, r3]
   1a904:	aa16      	add	r2, sp, #88	; 0x58
   1a906:	4694      	mov	ip, r2
   1a908:	3348      	adds	r3, #72	; 0x48
   1a90a:	4463      	add	r3, ip
   1a90c:	9311      	str	r3, [sp, #68]	; 0x44
   1a90e:	4653      	mov	r3, sl
   1a910:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   1a912:	9308      	str	r3, [sp, #32]
   1a914:	4592      	cmp	sl, r2
   1a916:	da00      	bge.n	1a91a <_vfprintf_r+0x2e6>
   1a918:	9208      	str	r2, [sp, #32]
   1a91a:	2300      	movs	r3, #0
   1a91c:	9313      	str	r3, [sp, #76]	; 0x4c
   1a91e:	4643      	mov	r3, r8
   1a920:	2b00      	cmp	r3, #0
   1a922:	d002      	beq.n	1a92a <_vfprintf_r+0x2f6>
   1a924:	9b08      	ldr	r3, [sp, #32]
   1a926:	3301      	adds	r3, #1
   1a928:	9308      	str	r3, [sp, #32]
   1a92a:	2302      	movs	r3, #2
   1a92c:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1a92e:	401a      	ands	r2, r3
   1a930:	4691      	mov	r9, r2
   1a932:	d002      	beq.n	1a93a <_vfprintf_r+0x306>
   1a934:	9b08      	ldr	r3, [sp, #32]
   1a936:	3302      	adds	r3, #2
   1a938:	9308      	str	r3, [sp, #32]
   1a93a:	2384      	movs	r3, #132	; 0x84
   1a93c:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1a93e:	401a      	ands	r2, r3
   1a940:	9210      	str	r2, [sp, #64]	; 0x40
   1a942:	d000      	beq.n	1a946 <_vfprintf_r+0x312>
   1a944:	e207      	b.n	1ad56 <_vfprintf_r+0x722>
   1a946:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1a948:	9a08      	ldr	r2, [sp, #32]
   1a94a:	1a9c      	subs	r4, r3, r2
   1a94c:	2c00      	cmp	r4, #0
   1a94e:	dc00      	bgt.n	1a952 <_vfprintf_r+0x31e>
   1a950:	e201      	b.n	1ad56 <_vfprintf_r+0x722>
   1a952:	491f      	ldr	r1, [pc, #124]	; (1a9d0 <_vfprintf_r+0x39c>)
   1a954:	68ba      	ldr	r2, [r7, #8]
   1a956:	687b      	ldr	r3, [r7, #4]
   1a958:	4688      	mov	r8, r1
   1a95a:	2c10      	cmp	r4, #16
   1a95c:	dd21      	ble.n	1a9a2 <_vfprintf_r+0x36e>
   1a95e:	0031      	movs	r1, r6
   1a960:	2510      	movs	r5, #16
   1a962:	465e      	mov	r6, fp
   1a964:	e003      	b.n	1a96e <_vfprintf_r+0x33a>
   1a966:	3c10      	subs	r4, #16
   1a968:	3108      	adds	r1, #8
   1a96a:	2c10      	cmp	r4, #16
   1a96c:	dd17      	ble.n	1a99e <_vfprintf_r+0x36a>
   1a96e:	4640      	mov	r0, r8
   1a970:	3210      	adds	r2, #16
   1a972:	3301      	adds	r3, #1
   1a974:	6008      	str	r0, [r1, #0]
   1a976:	604d      	str	r5, [r1, #4]
   1a978:	60ba      	str	r2, [r7, #8]
   1a97a:	607b      	str	r3, [r7, #4]
   1a97c:	2b07      	cmp	r3, #7
   1a97e:	ddf2      	ble.n	1a966 <_vfprintf_r+0x332>
   1a980:	003a      	movs	r2, r7
   1a982:	0031      	movs	r1, r6
   1a984:	9806      	ldr	r0, [sp, #24]
   1a986:	f003 fd95 	bl	1e4b4 <__sprint_r>
   1a98a:	2800      	cmp	r0, #0
   1a98c:	d001      	beq.n	1a992 <_vfprintf_r+0x35e>
   1a98e:	f000 fccf 	bl	1b330 <_vfprintf_r+0xcfc>
   1a992:	3c10      	subs	r4, #16
   1a994:	68ba      	ldr	r2, [r7, #8]
   1a996:	687b      	ldr	r3, [r7, #4]
   1a998:	a932      	add	r1, sp, #200	; 0xc8
   1a99a:	2c10      	cmp	r4, #16
   1a99c:	dce7      	bgt.n	1a96e <_vfprintf_r+0x33a>
   1a99e:	46b3      	mov	fp, r6
   1a9a0:	000e      	movs	r6, r1
   1a9a2:	4641      	mov	r1, r8
   1a9a4:	6074      	str	r4, [r6, #4]
   1a9a6:	3301      	adds	r3, #1
   1a9a8:	18a4      	adds	r4, r4, r2
   1a9aa:	6031      	str	r1, [r6, #0]
   1a9ac:	60bc      	str	r4, [r7, #8]
   1a9ae:	607b      	str	r3, [r7, #4]
   1a9b0:	2b07      	cmp	r3, #7
   1a9b2:	dd01      	ble.n	1a9b8 <_vfprintf_r+0x384>
   1a9b4:	f000 fcae 	bl	1b314 <_vfprintf_r+0xce0>
   1a9b8:	ab16      	add	r3, sp, #88	; 0x58
   1a9ba:	7fdb      	ldrb	r3, [r3, #31]
   1a9bc:	3608      	adds	r6, #8
   1a9be:	4698      	mov	r8, r3
   1a9c0:	e1ca      	b.n	1ad58 <_vfprintf_r+0x724>
   1a9c2:	46c0      	nop			; (mov r8, r8)
   1a9c4:	ffffdfff 	.word	0xffffdfff
   1a9c8:	00020504 	.word	0x00020504
   1a9cc:	0002068c 	.word	0x0002068c
   1a9d0:	000206a8 	.word	0x000206a8
   1a9d4:	2200      	movs	r2, #0
   1a9d6:	9d07      	ldr	r5, [sp, #28]
   1a9d8:	3b30      	subs	r3, #48	; 0x30
   1a9da:	46a8      	mov	r8, r5
   1a9dc:	920b      	str	r2, [sp, #44]	; 0x2c
   1a9de:	001a      	movs	r2, r3
   1a9e0:	9408      	str	r4, [sp, #32]
   1a9e2:	002c      	movs	r4, r5
   1a9e4:	4655      	mov	r5, sl
   1a9e6:	4682      	mov	sl, r0
   1a9e8:	4640      	mov	r0, r8
   1a9ea:	4688      	mov	r8, r1
   1a9ec:	0011      	movs	r1, r2
   1a9ee:	2200      	movs	r2, #0
   1a9f0:	0093      	lsls	r3, r2, #2
   1a9f2:	189a      	adds	r2, r3, r2
   1a9f4:	7803      	ldrb	r3, [r0, #0]
   1a9f6:	0052      	lsls	r2, r2, #1
   1a9f8:	188a      	adds	r2, r1, r2
   1a9fa:	0019      	movs	r1, r3
   1a9fc:	3401      	adds	r4, #1
   1a9fe:	3930      	subs	r1, #48	; 0x30
   1aa00:	0020      	movs	r0, r4
   1aa02:	2909      	cmp	r1, #9
   1aa04:	d9f4      	bls.n	1a9f0 <_vfprintf_r+0x3bc>
   1aa06:	9407      	str	r4, [sp, #28]
   1aa08:	4650      	mov	r0, sl
   1aa0a:	9c08      	ldr	r4, [sp, #32]
   1aa0c:	920b      	str	r2, [sp, #44]	; 0x2c
   1aa0e:	4641      	mov	r1, r8
   1aa10:	46aa      	mov	sl, r5
   1aa12:	e69b      	b.n	1a74c <_vfprintf_r+0x118>
   1aa14:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   1aa16:	9312      	str	r3, [sp, #72]	; 0x48
   1aa18:	6813      	ldr	r3, [r2, #0]
   1aa1a:	2120      	movs	r1, #32
   1aa1c:	9308      	str	r3, [sp, #32]
   1aa1e:	466b      	mov	r3, sp
   1aa20:	185b      	adds	r3, r3, r1
   1aa22:	781b      	ldrb	r3, [r3, #0]
   1aa24:	ad28      	add	r5, sp, #160	; 0xa0
   1aa26:	702b      	strb	r3, [r5, #0]
   1aa28:	2300      	movs	r3, #0
   1aa2a:	a916      	add	r1, sp, #88	; 0x58
   1aa2c:	77cb      	strb	r3, [r1, #31]
   1aa2e:	0013      	movs	r3, r2
   1aa30:	3304      	adds	r3, #4
   1aa32:	930f      	str	r3, [sp, #60]	; 0x3c
   1aa34:	2300      	movs	r3, #0
   1aa36:	9409      	str	r4, [sp, #36]	; 0x24
   1aa38:	4698      	mov	r8, r3
   1aa3a:	3301      	adds	r3, #1
   1aa3c:	9308      	str	r3, [sp, #32]
   1aa3e:	930e      	str	r3, [sp, #56]	; 0x38
   1aa40:	2300      	movs	r3, #0
   1aa42:	9511      	str	r5, [sp, #68]	; 0x44
   1aa44:	469a      	mov	sl, r3
   1aa46:	9313      	str	r3, [sp, #76]	; 0x4c
   1aa48:	e76f      	b.n	1a92a <_vfprintf_r+0x2f6>
   1aa4a:	9312      	str	r3, [sp, #72]	; 0x48
   1aa4c:	2900      	cmp	r1, #0
   1aa4e:	d001      	beq.n	1aa54 <_vfprintf_r+0x420>
   1aa50:	f001 f94d 	bl	1bcee <_vfprintf_r+0x16ba>
   1aa54:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   1aa56:	06a3      	lsls	r3, r4, #26
   1aa58:	d501      	bpl.n	1aa5e <_vfprintf_r+0x42a>
   1aa5a:	f000 fd5a 	bl	1b512 <_vfprintf_r+0xede>
   1aa5e:	06e3      	lsls	r3, r4, #27
   1aa60:	d501      	bpl.n	1aa66 <_vfprintf_r+0x432>
   1aa62:	f000 fcab 	bl	1b3bc <_vfprintf_r+0xd88>
   1aa66:	0663      	lsls	r3, r4, #25
   1aa68:	d401      	bmi.n	1aa6e <_vfprintf_r+0x43a>
   1aa6a:	f000 fca7 	bl	1b3bc <_vfprintf_r+0xd88>
   1aa6e:	2100      	movs	r1, #0
   1aa70:	5e53      	ldrsh	r3, [r2, r1]
   1aa72:	930c      	str	r3, [sp, #48]	; 0x30
   1aa74:	3204      	adds	r2, #4
   1aa76:	17db      	asrs	r3, r3, #31
   1aa78:	930d      	str	r3, [sp, #52]	; 0x34
   1aa7a:	920f      	str	r2, [sp, #60]	; 0x3c
   1aa7c:	2b00      	cmp	r3, #0
   1aa7e:	da01      	bge.n	1aa84 <_vfprintf_r+0x450>
   1aa80:	f000 fdb2 	bl	1b5e8 <_vfprintf_r+0xfb4>
   1aa84:	990c      	ldr	r1, [sp, #48]	; 0x30
   1aa86:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   1aa88:	0008      	movs	r0, r1
   1aa8a:	4651      	mov	r1, sl
   1aa8c:	ab16      	add	r3, sp, #88	; 0x58
   1aa8e:	7fdb      	ldrb	r3, [r3, #31]
   1aa90:	4310      	orrs	r0, r2
   1aa92:	4698      	mov	r8, r3
   1aa94:	0002      	movs	r2, r0
   1aa96:	2301      	movs	r3, #1
   1aa98:	3101      	adds	r1, #1
   1aa9a:	d000      	beq.n	1aa9e <_vfprintf_r+0x46a>
   1aa9c:	e718      	b.n	1a8d0 <_vfprintf_r+0x29c>
   1aa9e:	2a00      	cmp	r2, #0
   1aaa0:	d100      	bne.n	1aaa4 <_vfprintf_r+0x470>
   1aaa2:	e35a      	b.n	1b15a <_vfprintf_r+0xb26>
   1aaa4:	9409      	str	r4, [sp, #36]	; 0x24
   1aaa6:	2b01      	cmp	r3, #1
   1aaa8:	d101      	bne.n	1aaae <_vfprintf_r+0x47a>
   1aaaa:	f000 fc06 	bl	1b2ba <_vfprintf_r+0xc86>
   1aaae:	2b02      	cmp	r3, #2
   1aab0:	d000      	beq.n	1aab4 <_vfprintf_r+0x480>
   1aab2:	e380      	b.n	1b1b6 <_vfprintf_r+0xb82>
   1aab4:	9c19      	ldr	r4, [sp, #100]	; 0x64
   1aab6:	200f      	movs	r0, #15
   1aab8:	46a1      	mov	r9, r4
   1aaba:	46b4      	mov	ip, r6
   1aabc:	ab32      	add	r3, sp, #200	; 0xc8
   1aabe:	0019      	movs	r1, r3
   1aac0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   1aac2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1aac4:	0004      	movs	r4, r0
   1aac6:	464d      	mov	r5, r9
   1aac8:	4014      	ands	r4, r2
   1aaca:	5d2c      	ldrb	r4, [r5, r4]
   1aacc:	071e      	lsls	r6, r3, #28
   1aace:	0915      	lsrs	r5, r2, #4
   1aad0:	3901      	subs	r1, #1
   1aad2:	432e      	orrs	r6, r5
   1aad4:	700c      	strb	r4, [r1, #0]
   1aad6:	091c      	lsrs	r4, r3, #4
   1aad8:	0023      	movs	r3, r4
   1aada:	0034      	movs	r4, r6
   1aadc:	0032      	movs	r2, r6
   1aade:	431c      	orrs	r4, r3
   1aae0:	d1f0      	bne.n	1aac4 <_vfprintf_r+0x490>
   1aae2:	920c      	str	r2, [sp, #48]	; 0x30
   1aae4:	930d      	str	r3, [sp, #52]	; 0x34
   1aae6:	ab32      	add	r3, sp, #200	; 0xc8
   1aae8:	1a5b      	subs	r3, r3, r1
   1aaea:	9111      	str	r1, [sp, #68]	; 0x44
   1aaec:	4666      	mov	r6, ip
   1aaee:	930e      	str	r3, [sp, #56]	; 0x38
   1aaf0:	e70d      	b.n	1a90e <_vfprintf_r+0x2da>
   1aaf2:	4663      	mov	r3, ip
   1aaf4:	431c      	orrs	r4, r3
   1aaf6:	9b07      	ldr	r3, [sp, #28]
   1aaf8:	781b      	ldrb	r3, [r3, #0]
   1aafa:	e624      	b.n	1a746 <_vfprintf_r+0x112>
   1aafc:	9b07      	ldr	r3, [sp, #28]
   1aafe:	781b      	ldrb	r3, [r3, #0]
   1ab00:	2b6c      	cmp	r3, #108	; 0x6c
   1ab02:	d101      	bne.n	1ab08 <_vfprintf_r+0x4d4>
   1ab04:	f000 fe8c 	bl	1b820 <_vfprintf_r+0x11ec>
   1ab08:	2210      	movs	r2, #16
   1ab0a:	4314      	orrs	r4, r2
   1ab0c:	e61b      	b.n	1a746 <_vfprintf_r+0x112>
   1ab0e:	2900      	cmp	r1, #0
   1ab10:	d001      	beq.n	1ab16 <_vfprintf_r+0x4e2>
   1ab12:	f001 f8d5 	bl	1bcc0 <_vfprintf_r+0x168c>
   1ab16:	06a3      	lsls	r3, r4, #26
   1ab18:	d501      	bpl.n	1ab1e <_vfprintf_r+0x4ea>
   1ab1a:	f000 fe76 	bl	1b80a <_vfprintf_r+0x11d6>
   1ab1e:	06e3      	lsls	r3, r4, #27
   1ab20:	d500      	bpl.n	1ab24 <_vfprintf_r+0x4f0>
   1ab22:	e110      	b.n	1ad46 <_vfprintf_r+0x712>
   1ab24:	0663      	lsls	r3, r4, #25
   1ab26:	d400      	bmi.n	1ab2a <_vfprintf_r+0x4f6>
   1ab28:	e10d      	b.n	1ad46 <_vfprintf_r+0x712>
   1ab2a:	4669      	mov	r1, sp
   1ab2c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1ab2e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
   1ab30:	681a      	ldr	r2, [r3, #0]
   1ab32:	3304      	adds	r3, #4
   1ab34:	9208      	str	r2, [sp, #32]
   1ab36:	8011      	strh	r1, [r2, #0]
   1ab38:	930f      	str	r3, [sp, #60]	; 0x3c
   1ab3a:	e5c9      	b.n	1a6d0 <_vfprintf_r+0x9c>
   1ab3c:	990f      	ldr	r1, [sp, #60]	; 0x3c
   1ab3e:	2230      	movs	r2, #48	; 0x30
   1ab40:	680b      	ldr	r3, [r1, #0]
   1ab42:	930c      	str	r3, [sp, #48]	; 0x30
   1ab44:	2300      	movs	r3, #0
   1ab46:	930d      	str	r3, [sp, #52]	; 0x34
   1ab48:	3302      	adds	r3, #2
   1ab4a:	431c      	orrs	r4, r3
   1ab4c:	ab1e      	add	r3, sp, #120	; 0x78
   1ab4e:	701a      	strb	r2, [r3, #0]
   1ab50:	3248      	adds	r2, #72	; 0x48
   1ab52:	705a      	strb	r2, [r3, #1]
   1ab54:	000b      	movs	r3, r1
   1ab56:	3304      	adds	r3, #4
   1ab58:	930f      	str	r3, [sp, #60]	; 0x3c
   1ab5a:	4bc1      	ldr	r3, [pc, #772]	; (1ae60 <_vfprintf_r+0x82c>)
   1ab5c:	9212      	str	r2, [sp, #72]	; 0x48
   1ab5e:	9319      	str	r3, [sp, #100]	; 0x64
   1ab60:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   1ab62:	2302      	movs	r3, #2
   1ab64:	e6ac      	b.n	1a8c0 <_vfprintf_r+0x28c>
   1ab66:	464b      	mov	r3, r9
   1ab68:	431c      	orrs	r4, r3
   1ab6a:	9b07      	ldr	r3, [sp, #28]
   1ab6c:	781b      	ldrb	r3, [r3, #0]
   1ab6e:	e5ea      	b.n	1a746 <_vfprintf_r+0x112>
   1ab70:	9312      	str	r3, [sp, #72]	; 0x48
   1ab72:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1ab74:	a916      	add	r1, sp, #88	; 0x58
   1ab76:	1d1d      	adds	r5, r3, #4
   1ab78:	681b      	ldr	r3, [r3, #0]
   1ab7a:	001a      	movs	r2, r3
   1ab7c:	9311      	str	r3, [sp, #68]	; 0x44
   1ab7e:	2300      	movs	r3, #0
   1ab80:	77cb      	strb	r3, [r1, #31]
   1ab82:	2a00      	cmp	r2, #0
   1ab84:	d101      	bne.n	1ab8a <_vfprintf_r+0x556>
   1ab86:	f000 ff01 	bl	1b98c <_vfprintf_r+0x1358>
   1ab8a:	4653      	mov	r3, sl
   1ab8c:	3301      	adds	r3, #1
   1ab8e:	d101      	bne.n	1ab94 <_vfprintf_r+0x560>
   1ab90:	f000 fe64 	bl	1b85c <_vfprintf_r+0x1228>
   1ab94:	4652      	mov	r2, sl
   1ab96:	2100      	movs	r1, #0
   1ab98:	9811      	ldr	r0, [sp, #68]	; 0x44
   1ab9a:	f002 feb5 	bl	1d908 <memchr>
   1ab9e:	2800      	cmp	r0, #0
   1aba0:	d101      	bne.n	1aba6 <_vfprintf_r+0x572>
   1aba2:	f000 ff78 	bl	1ba96 <_vfprintf_r+0x1462>
   1aba6:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1aba8:	1ac3      	subs	r3, r0, r3
   1abaa:	001a      	movs	r2, r3
   1abac:	930e      	str	r3, [sp, #56]	; 0x38
   1abae:	43db      	mvns	r3, r3
   1abb0:	17db      	asrs	r3, r3, #31
   1abb2:	401a      	ands	r2, r3
   1abb4:	ab16      	add	r3, sp, #88	; 0x58
   1abb6:	7fdb      	ldrb	r3, [r3, #31]
   1abb8:	9208      	str	r2, [sp, #32]
   1abba:	4698      	mov	r8, r3
   1abbc:	2300      	movs	r3, #0
   1abbe:	950f      	str	r5, [sp, #60]	; 0x3c
   1abc0:	9409      	str	r4, [sp, #36]	; 0x24
   1abc2:	469a      	mov	sl, r3
   1abc4:	9313      	str	r3, [sp, #76]	; 0x4c
   1abc6:	e6aa      	b.n	1a91e <_vfprintf_r+0x2ea>
   1abc8:	2308      	movs	r3, #8
   1abca:	431c      	orrs	r4, r3
   1abcc:	9b07      	ldr	r3, [sp, #28]
   1abce:	781b      	ldrb	r3, [r3, #0]
   1abd0:	e5b9      	b.n	1a746 <_vfprintf_r+0x112>
   1abd2:	9312      	str	r3, [sp, #72]	; 0x48
   1abd4:	2310      	movs	r3, #16
   1abd6:	431c      	orrs	r4, r3
   1abd8:	06a3      	lsls	r3, r4, #26
   1abda:	d501      	bpl.n	1abe0 <_vfprintf_r+0x5ac>
   1abdc:	f000 fca7 	bl	1b52e <_vfprintf_r+0xefa>
   1abe0:	06e3      	lsls	r3, r4, #27
   1abe2:	d500      	bpl.n	1abe6 <_vfprintf_r+0x5b2>
   1abe4:	e3ee      	b.n	1b3c4 <_vfprintf_r+0xd90>
   1abe6:	0663      	lsls	r3, r4, #25
   1abe8:	d400      	bmi.n	1abec <_vfprintf_r+0x5b8>
   1abea:	e3eb      	b.n	1b3c4 <_vfprintf_r+0xd90>
   1abec:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1abee:	881a      	ldrh	r2, [r3, #0]
   1abf0:	920c      	str	r2, [sp, #48]	; 0x30
   1abf2:	2200      	movs	r2, #0
   1abf4:	3304      	adds	r3, #4
   1abf6:	920d      	str	r2, [sp, #52]	; 0x34
   1abf8:	930f      	str	r3, [sp, #60]	; 0x3c
   1abfa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   1abfc:	2300      	movs	r3, #0
   1abfe:	e65f      	b.n	1a8c0 <_vfprintf_r+0x28c>
   1ac00:	9312      	str	r3, [sp, #72]	; 0x48
   1ac02:	2310      	movs	r3, #16
   1ac04:	431c      	orrs	r4, r3
   1ac06:	06a3      	lsls	r3, r4, #26
   1ac08:	d501      	bpl.n	1ac0e <_vfprintf_r+0x5da>
   1ac0a:	f000 fcba 	bl	1b582 <_vfprintf_r+0xf4e>
   1ac0e:	06e3      	lsls	r3, r4, #27
   1ac10:	d500      	bpl.n	1ac14 <_vfprintf_r+0x5e0>
   1ac12:	e3da      	b.n	1b3ca <_vfprintf_r+0xd96>
   1ac14:	0663      	lsls	r3, r4, #25
   1ac16:	d400      	bmi.n	1ac1a <_vfprintf_r+0x5e6>
   1ac18:	e3d7      	b.n	1b3ca <_vfprintf_r+0xd96>
   1ac1a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1ac1c:	881a      	ldrh	r2, [r3, #0]
   1ac1e:	920c      	str	r2, [sp, #48]	; 0x30
   1ac20:	2200      	movs	r2, #0
   1ac22:	3304      	adds	r3, #4
   1ac24:	920d      	str	r2, [sp, #52]	; 0x34
   1ac26:	930f      	str	r3, [sp, #60]	; 0x3c
   1ac28:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   1ac2a:	2301      	movs	r3, #1
   1ac2c:	e648      	b.n	1a8c0 <_vfprintf_r+0x28c>
   1ac2e:	9312      	str	r3, [sp, #72]	; 0x48
   1ac30:	2900      	cmp	r1, #0
   1ac32:	d001      	beq.n	1ac38 <_vfprintf_r+0x604>
   1ac34:	f001 f857 	bl	1bce6 <_vfprintf_r+0x16b2>
   1ac38:	4b8a      	ldr	r3, [pc, #552]	; (1ae64 <_vfprintf_r+0x830>)
   1ac3a:	9319      	str	r3, [sp, #100]	; 0x64
   1ac3c:	e618      	b.n	1a870 <_vfprintf_r+0x23c>
   1ac3e:	2301      	movs	r3, #1
   1ac40:	431c      	orrs	r4, r3
   1ac42:	9b07      	ldr	r3, [sp, #28]
   1ac44:	781b      	ldrb	r3, [r3, #0]
   1ac46:	e57e      	b.n	1a746 <_vfprintf_r+0x112>
   1ac48:	2380      	movs	r3, #128	; 0x80
   1ac4a:	431c      	orrs	r4, r3
   1ac4c:	9b07      	ldr	r3, [sp, #28]
   1ac4e:	781b      	ldrb	r3, [r3, #0]
   1ac50:	e579      	b.n	1a746 <_vfprintf_r+0x112>
   1ac52:	9b07      	ldr	r3, [sp, #28]
   1ac54:	781b      	ldrb	r3, [r3, #0]
   1ac56:	2800      	cmp	r0, #0
   1ac58:	d000      	beq.n	1ac5c <_vfprintf_r+0x628>
   1ac5a:	e574      	b.n	1a746 <_vfprintf_r+0x112>
   1ac5c:	2101      	movs	r1, #1
   1ac5e:	3020      	adds	r0, #32
   1ac60:	e571      	b.n	1a746 <_vfprintf_r+0x112>
   1ac62:	9312      	str	r3, [sp, #72]	; 0x48
   1ac64:	2900      	cmp	r1, #0
   1ac66:	d001      	beq.n	1ac6c <_vfprintf_r+0x638>
   1ac68:	f001 f839 	bl	1bcde <_vfprintf_r+0x16aa>
   1ac6c:	2207      	movs	r2, #7
   1ac6e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1ac70:	3307      	adds	r3, #7
   1ac72:	4393      	bics	r3, r2
   1ac74:	3201      	adds	r2, #1
   1ac76:	4694      	mov	ip, r2
   1ac78:	449c      	add	ip, r3
   1ac7a:	4662      	mov	r2, ip
   1ac7c:	920f      	str	r2, [sp, #60]	; 0x3c
   1ac7e:	681a      	ldr	r2, [r3, #0]
   1ac80:	9216      	str	r2, [sp, #88]	; 0x58
   1ac82:	685b      	ldr	r3, [r3, #4]
   1ac84:	2201      	movs	r2, #1
   1ac86:	9315      	str	r3, [sp, #84]	; 0x54
   1ac88:	9b15      	ldr	r3, [sp, #84]	; 0x54
   1ac8a:	9d16      	ldr	r5, [sp, #88]	; 0x58
   1ac8c:	005b      	lsls	r3, r3, #1
   1ac8e:	085b      	lsrs	r3, r3, #1
   1ac90:	4698      	mov	r8, r3
   1ac92:	4252      	negs	r2, r2
   1ac94:	4b74      	ldr	r3, [pc, #464]	; (1ae68 <_vfprintf_r+0x834>)
   1ac96:	0028      	movs	r0, r5
   1ac98:	4641      	mov	r1, r8
   1ac9a:	f003 fe97 	bl	1e9cc <__aeabi_dcmpun>
   1ac9e:	2800      	cmp	r0, #0
   1aca0:	d001      	beq.n	1aca6 <_vfprintf_r+0x672>
   1aca2:	f000 fcb4 	bl	1b60e <_vfprintf_r+0xfda>
   1aca6:	2201      	movs	r2, #1
   1aca8:	4b6f      	ldr	r3, [pc, #444]	; (1ae68 <_vfprintf_r+0x834>)
   1acaa:	4252      	negs	r2, r2
   1acac:	0028      	movs	r0, r5
   1acae:	4641      	mov	r1, r8
   1acb0:	f7fb fe12 	bl	168d8 <__aeabi_dcmple>
   1acb4:	2800      	cmp	r0, #0
   1acb6:	d001      	beq.n	1acbc <_vfprintf_r+0x688>
   1acb8:	f000 fca9 	bl	1b60e <_vfprintf_r+0xfda>
   1acbc:	2200      	movs	r2, #0
   1acbe:	2300      	movs	r3, #0
   1acc0:	9816      	ldr	r0, [sp, #88]	; 0x58
   1acc2:	9915      	ldr	r1, [sp, #84]	; 0x54
   1acc4:	f7fb fdfe 	bl	168c4 <__aeabi_dcmplt>
   1acc8:	2800      	cmp	r0, #0
   1acca:	d001      	beq.n	1acd0 <_vfprintf_r+0x69c>
   1accc:	f000 fd55 	bl	1b77a <_vfprintf_r+0x1146>
   1acd0:	ab16      	add	r3, sp, #88	; 0x58
   1acd2:	7fdb      	ldrb	r3, [r3, #31]
   1acd4:	4698      	mov	r8, r3
   1acd6:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1acd8:	2b47      	cmp	r3, #71	; 0x47
   1acda:	dd01      	ble.n	1ace0 <_vfprintf_r+0x6ac>
   1acdc:	f000 fdb4 	bl	1b848 <_vfprintf_r+0x1214>
   1ace0:	4b62      	ldr	r3, [pc, #392]	; (1ae6c <_vfprintf_r+0x838>)
   1ace2:	9311      	str	r3, [sp, #68]	; 0x44
   1ace4:	2380      	movs	r3, #128	; 0x80
   1ace6:	439c      	bics	r4, r3
   1ace8:	3b7d      	subs	r3, #125	; 0x7d
   1acea:	9308      	str	r3, [sp, #32]
   1acec:	930e      	str	r3, [sp, #56]	; 0x38
   1acee:	2300      	movs	r3, #0
   1acf0:	9409      	str	r4, [sp, #36]	; 0x24
   1acf2:	469a      	mov	sl, r3
   1acf4:	9313      	str	r3, [sp, #76]	; 0x4c
   1acf6:	e612      	b.n	1a91e <_vfprintf_r+0x2ea>
   1acf8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1acfa:	1d1a      	adds	r2, r3, #4
   1acfc:	681b      	ldr	r3, [r3, #0]
   1acfe:	930b      	str	r3, [sp, #44]	; 0x2c
   1ad00:	2b00      	cmp	r3, #0
   1ad02:	da00      	bge.n	1ad06 <_vfprintf_r+0x6d2>
   1ad04:	e578      	b.n	1a7f8 <_vfprintf_r+0x1c4>
   1ad06:	9b07      	ldr	r3, [sp, #28]
   1ad08:	920f      	str	r2, [sp, #60]	; 0x3c
   1ad0a:	781b      	ldrb	r3, [r3, #0]
   1ad0c:	e51b      	b.n	1a746 <_vfprintf_r+0x112>
   1ad0e:	9312      	str	r3, [sp, #72]	; 0x48
   1ad10:	2900      	cmp	r1, #0
   1ad12:	d001      	beq.n	1ad18 <_vfprintf_r+0x6e4>
   1ad14:	f000 ffcc 	bl	1bcb0 <_vfprintf_r+0x167c>
   1ad18:	2310      	movs	r3, #16
   1ad1a:	431c      	orrs	r4, r3
   1ad1c:	e69a      	b.n	1aa54 <_vfprintf_r+0x420>
   1ad1e:	9312      	str	r3, [sp, #72]	; 0x48
   1ad20:	e771      	b.n	1ac06 <_vfprintf_r+0x5d2>
   1ad22:	9312      	str	r3, [sp, #72]	; 0x48
   1ad24:	e758      	b.n	1abd8 <_vfprintf_r+0x5a4>
   1ad26:	9312      	str	r3, [sp, #72]	; 0x48
   1ad28:	2900      	cmp	r1, #0
   1ad2a:	d001      	beq.n	1ad30 <_vfprintf_r+0x6fc>
   1ad2c:	f000 ffd3 	bl	1bcd6 <_vfprintf_r+0x16a2>
   1ad30:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1ad32:	2b00      	cmp	r3, #0
   1ad34:	d100      	bne.n	1ad38 <_vfprintf_r+0x704>
   1ad36:	e18d      	b.n	1b054 <_vfprintf_r+0xa20>
   1ad38:	ad28      	add	r5, sp, #160	; 0xa0
   1ad3a:	702b      	strb	r3, [r5, #0]
   1ad3c:	2300      	movs	r3, #0
   1ad3e:	aa16      	add	r2, sp, #88	; 0x58
   1ad40:	77d3      	strb	r3, [r2, #31]
   1ad42:	9409      	str	r4, [sp, #36]	; 0x24
   1ad44:	e678      	b.n	1aa38 <_vfprintf_r+0x404>
   1ad46:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   1ad48:	990a      	ldr	r1, [sp, #40]	; 0x28
   1ad4a:	6813      	ldr	r3, [r2, #0]
   1ad4c:	6019      	str	r1, [r3, #0]
   1ad4e:	0013      	movs	r3, r2
   1ad50:	3304      	adds	r3, #4
   1ad52:	930f      	str	r3, [sp, #60]	; 0x3c
   1ad54:	e4bc      	b.n	1a6d0 <_vfprintf_r+0x9c>
   1ad56:	68bc      	ldr	r4, [r7, #8]
   1ad58:	4643      	mov	r3, r8
   1ad5a:	2b00      	cmp	r3, #0
   1ad5c:	d00f      	beq.n	1ad7e <_vfprintf_r+0x74a>
   1ad5e:	aa16      	add	r2, sp, #88	; 0x58
   1ad60:	231f      	movs	r3, #31
   1ad62:	4694      	mov	ip, r2
   1ad64:	4463      	add	r3, ip
   1ad66:	6033      	str	r3, [r6, #0]
   1ad68:	2301      	movs	r3, #1
   1ad6a:	6073      	str	r3, [r6, #4]
   1ad6c:	687b      	ldr	r3, [r7, #4]
   1ad6e:	3401      	adds	r4, #1
   1ad70:	3301      	adds	r3, #1
   1ad72:	60bc      	str	r4, [r7, #8]
   1ad74:	607b      	str	r3, [r7, #4]
   1ad76:	2b07      	cmp	r3, #7
   1ad78:	dd00      	ble.n	1ad7c <_vfprintf_r+0x748>
   1ad7a:	e203      	b.n	1b184 <_vfprintf_r+0xb50>
   1ad7c:	3608      	adds	r6, #8
   1ad7e:	464b      	mov	r3, r9
   1ad80:	2b00      	cmp	r3, #0
   1ad82:	d00c      	beq.n	1ad9e <_vfprintf_r+0x76a>
   1ad84:	ab1e      	add	r3, sp, #120	; 0x78
   1ad86:	6033      	str	r3, [r6, #0]
   1ad88:	2302      	movs	r3, #2
   1ad8a:	6073      	str	r3, [r6, #4]
   1ad8c:	687b      	ldr	r3, [r7, #4]
   1ad8e:	3402      	adds	r4, #2
   1ad90:	3301      	adds	r3, #1
   1ad92:	60bc      	str	r4, [r7, #8]
   1ad94:	607b      	str	r3, [r7, #4]
   1ad96:	2b07      	cmp	r3, #7
   1ad98:	dd00      	ble.n	1ad9c <_vfprintf_r+0x768>
   1ad9a:	e1fd      	b.n	1b198 <_vfprintf_r+0xb64>
   1ad9c:	3608      	adds	r6, #8
   1ad9e:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1ada0:	2b80      	cmp	r3, #128	; 0x80
   1ada2:	d100      	bne.n	1ada6 <_vfprintf_r+0x772>
   1ada4:	e173      	b.n	1b08e <_vfprintf_r+0xa5a>
   1ada6:	4653      	mov	r3, sl
   1ada8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   1adaa:	1a9d      	subs	r5, r3, r2
   1adac:	2d00      	cmp	r5, #0
   1adae:	dd32      	ble.n	1ae16 <_vfprintf_r+0x7e2>
   1adb0:	4a2f      	ldr	r2, [pc, #188]	; (1ae70 <_vfprintf_r+0x83c>)
   1adb2:	687b      	ldr	r3, [r7, #4]
   1adb4:	4691      	mov	r9, r2
   1adb6:	2d10      	cmp	r5, #16
   1adb8:	dd22      	ble.n	1ae00 <_vfprintf_r+0x7cc>
   1adba:	2210      	movs	r2, #16
   1adbc:	4692      	mov	sl, r2
   1adbe:	0022      	movs	r2, r4
   1adc0:	465c      	mov	r4, fp
   1adc2:	e003      	b.n	1adcc <_vfprintf_r+0x798>
   1adc4:	3d10      	subs	r5, #16
   1adc6:	3608      	adds	r6, #8
   1adc8:	2d10      	cmp	r5, #16
   1adca:	dd17      	ble.n	1adfc <_vfprintf_r+0x7c8>
   1adcc:	4649      	mov	r1, r9
   1adce:	6031      	str	r1, [r6, #0]
   1add0:	4651      	mov	r1, sl
   1add2:	3210      	adds	r2, #16
   1add4:	3301      	adds	r3, #1
   1add6:	6071      	str	r1, [r6, #4]
   1add8:	60ba      	str	r2, [r7, #8]
   1adda:	607b      	str	r3, [r7, #4]
   1addc:	2b07      	cmp	r3, #7
   1adde:	ddf1      	ble.n	1adc4 <_vfprintf_r+0x790>
   1ade0:	003a      	movs	r2, r7
   1ade2:	0021      	movs	r1, r4
   1ade4:	9806      	ldr	r0, [sp, #24]
   1ade6:	f003 fb65 	bl	1e4b4 <__sprint_r>
   1adea:	2800      	cmp	r0, #0
   1adec:	d000      	beq.n	1adf0 <_vfprintf_r+0x7bc>
   1adee:	e18a      	b.n	1b106 <_vfprintf_r+0xad2>
   1adf0:	3d10      	subs	r5, #16
   1adf2:	68ba      	ldr	r2, [r7, #8]
   1adf4:	687b      	ldr	r3, [r7, #4]
   1adf6:	ae32      	add	r6, sp, #200	; 0xc8
   1adf8:	2d10      	cmp	r5, #16
   1adfa:	dce7      	bgt.n	1adcc <_vfprintf_r+0x798>
   1adfc:	46a3      	mov	fp, r4
   1adfe:	0014      	movs	r4, r2
   1ae00:	464a      	mov	r2, r9
   1ae02:	1964      	adds	r4, r4, r5
   1ae04:	3301      	adds	r3, #1
   1ae06:	6032      	str	r2, [r6, #0]
   1ae08:	6075      	str	r5, [r6, #4]
   1ae0a:	60bc      	str	r4, [r7, #8]
   1ae0c:	607b      	str	r3, [r7, #4]
   1ae0e:	2b07      	cmp	r3, #7
   1ae10:	dd00      	ble.n	1ae14 <_vfprintf_r+0x7e0>
   1ae12:	e1ad      	b.n	1b170 <_vfprintf_r+0xb3c>
   1ae14:	3608      	adds	r6, #8
   1ae16:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1ae18:	05db      	lsls	r3, r3, #23
   1ae1a:	d500      	bpl.n	1ae1e <_vfprintf_r+0x7ea>
   1ae1c:	e0be      	b.n	1af9c <_vfprintf_r+0x968>
   1ae1e:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1ae20:	6033      	str	r3, [r6, #0]
   1ae22:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1ae24:	469c      	mov	ip, r3
   1ae26:	6073      	str	r3, [r6, #4]
   1ae28:	687b      	ldr	r3, [r7, #4]
   1ae2a:	4464      	add	r4, ip
   1ae2c:	3301      	adds	r3, #1
   1ae2e:	60bc      	str	r4, [r7, #8]
   1ae30:	607b      	str	r3, [r7, #4]
   1ae32:	2b07      	cmp	r3, #7
   1ae34:	dd00      	ble.n	1ae38 <_vfprintf_r+0x804>
   1ae36:	e0a6      	b.n	1af86 <_vfprintf_r+0x952>
   1ae38:	3608      	adds	r6, #8
   1ae3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1ae3c:	075b      	lsls	r3, r3, #29
   1ae3e:	d54a      	bpl.n	1aed6 <_vfprintf_r+0x8a2>
   1ae40:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1ae42:	9a08      	ldr	r2, [sp, #32]
   1ae44:	1a9d      	subs	r5, r3, r2
   1ae46:	2d00      	cmp	r5, #0
   1ae48:	dd45      	ble.n	1aed6 <_vfprintf_r+0x8a2>
   1ae4a:	4a0a      	ldr	r2, [pc, #40]	; (1ae74 <_vfprintf_r+0x840>)
   1ae4c:	687b      	ldr	r3, [r7, #4]
   1ae4e:	4690      	mov	r8, r2
   1ae50:	2d10      	cmp	r5, #16
   1ae52:	dd2f      	ble.n	1aeb4 <_vfprintf_r+0x880>
   1ae54:	2210      	movs	r2, #16
   1ae56:	4691      	mov	r9, r2
   1ae58:	0022      	movs	r2, r4
   1ae5a:	465c      	mov	r4, fp
   1ae5c:	e010      	b.n	1ae80 <_vfprintf_r+0x84c>
   1ae5e:	46c0      	nop			; (mov r8, r8)
   1ae60:	0002068c 	.word	0x0002068c
   1ae64:	00020678 	.word	0x00020678
   1ae68:	7fefffff 	.word	0x7fefffff
   1ae6c:	00020668 	.word	0x00020668
   1ae70:	000206b8 	.word	0x000206b8
   1ae74:	000206a8 	.word	0x000206a8
   1ae78:	3d10      	subs	r5, #16
   1ae7a:	3608      	adds	r6, #8
   1ae7c:	2d10      	cmp	r5, #16
   1ae7e:	dd17      	ble.n	1aeb0 <_vfprintf_r+0x87c>
   1ae80:	49d1      	ldr	r1, [pc, #836]	; (1b1c8 <_vfprintf_r+0xb94>)
   1ae82:	3210      	adds	r2, #16
   1ae84:	6031      	str	r1, [r6, #0]
   1ae86:	4649      	mov	r1, r9
   1ae88:	3301      	adds	r3, #1
   1ae8a:	6071      	str	r1, [r6, #4]
   1ae8c:	60ba      	str	r2, [r7, #8]
   1ae8e:	607b      	str	r3, [r7, #4]
   1ae90:	2b07      	cmp	r3, #7
   1ae92:	ddf1      	ble.n	1ae78 <_vfprintf_r+0x844>
   1ae94:	003a      	movs	r2, r7
   1ae96:	0021      	movs	r1, r4
   1ae98:	9806      	ldr	r0, [sp, #24]
   1ae9a:	f003 fb0b 	bl	1e4b4 <__sprint_r>
   1ae9e:	2800      	cmp	r0, #0
   1aea0:	d000      	beq.n	1aea4 <_vfprintf_r+0x870>
   1aea2:	e130      	b.n	1b106 <_vfprintf_r+0xad2>
   1aea4:	3d10      	subs	r5, #16
   1aea6:	68ba      	ldr	r2, [r7, #8]
   1aea8:	687b      	ldr	r3, [r7, #4]
   1aeaa:	ae32      	add	r6, sp, #200	; 0xc8
   1aeac:	2d10      	cmp	r5, #16
   1aeae:	dce7      	bgt.n	1ae80 <_vfprintf_r+0x84c>
   1aeb0:	46a3      	mov	fp, r4
   1aeb2:	0014      	movs	r4, r2
   1aeb4:	4642      	mov	r2, r8
   1aeb6:	1964      	adds	r4, r4, r5
   1aeb8:	3301      	adds	r3, #1
   1aeba:	c624      	stmia	r6!, {r2, r5}
   1aebc:	60bc      	str	r4, [r7, #8]
   1aebe:	607b      	str	r3, [r7, #4]
   1aec0:	2b07      	cmp	r3, #7
   1aec2:	dd08      	ble.n	1aed6 <_vfprintf_r+0x8a2>
   1aec4:	003a      	movs	r2, r7
   1aec6:	4659      	mov	r1, fp
   1aec8:	9806      	ldr	r0, [sp, #24]
   1aeca:	f003 faf3 	bl	1e4b4 <__sprint_r>
   1aece:	2800      	cmp	r0, #0
   1aed0:	d000      	beq.n	1aed4 <_vfprintf_r+0x8a0>
   1aed2:	e13f      	b.n	1b154 <_vfprintf_r+0xb20>
   1aed4:	68bc      	ldr	r4, [r7, #8]
   1aed6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1aed8:	9908      	ldr	r1, [sp, #32]
   1aeda:	428b      	cmp	r3, r1
   1aedc:	da00      	bge.n	1aee0 <_vfprintf_r+0x8ac>
   1aede:	000b      	movs	r3, r1
   1aee0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1aee2:	4694      	mov	ip, r2
   1aee4:	449c      	add	ip, r3
   1aee6:	4663      	mov	r3, ip
   1aee8:	930a      	str	r3, [sp, #40]	; 0x28
   1aeea:	2c00      	cmp	r4, #0
   1aeec:	d000      	beq.n	1aef0 <_vfprintf_r+0x8bc>
   1aeee:	e129      	b.n	1b144 <_vfprintf_r+0xb10>
   1aef0:	2300      	movs	r3, #0
   1aef2:	ae32      	add	r6, sp, #200	; 0xc8
   1aef4:	607b      	str	r3, [r7, #4]
   1aef6:	f7ff fbeb 	bl	1a6d0 <_vfprintf_r+0x9c>
   1aefa:	9b14      	ldr	r3, [sp, #80]	; 0x50
   1aefc:	2b01      	cmp	r3, #1
   1aefe:	dc00      	bgt.n	1af02 <_vfprintf_r+0x8ce>
   1af00:	e103      	b.n	1b10a <_vfprintf_r+0xad6>
   1af02:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1af04:	3401      	adds	r4, #1
   1af06:	6033      	str	r3, [r6, #0]
   1af08:	2301      	movs	r3, #1
   1af0a:	6073      	str	r3, [r6, #4]
   1af0c:	687b      	ldr	r3, [r7, #4]
   1af0e:	60bc      	str	r4, [r7, #8]
   1af10:	3301      	adds	r3, #1
   1af12:	607b      	str	r3, [r7, #4]
   1af14:	2b07      	cmp	r3, #7
   1af16:	dd00      	ble.n	1af1a <_vfprintf_r+0x8e6>
   1af18:	e2ef      	b.n	1b4fa <_vfprintf_r+0xec6>
   1af1a:	3608      	adds	r6, #8
   1af1c:	9a18      	ldr	r2, [sp, #96]	; 0x60
   1af1e:	3301      	adds	r3, #1
   1af20:	6032      	str	r2, [r6, #0]
   1af22:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   1af24:	4698      	mov	r8, r3
   1af26:	4694      	mov	ip, r2
   1af28:	4464      	add	r4, ip
   1af2a:	6072      	str	r2, [r6, #4]
   1af2c:	60bc      	str	r4, [r7, #8]
   1af2e:	607b      	str	r3, [r7, #4]
   1af30:	2b07      	cmp	r3, #7
   1af32:	dd00      	ble.n	1af36 <_vfprintf_r+0x902>
   1af34:	e318      	b.n	1b568 <_vfprintf_r+0xf34>
   1af36:	3608      	adds	r6, #8
   1af38:	2200      	movs	r2, #0
   1af3a:	2300      	movs	r3, #0
   1af3c:	9816      	ldr	r0, [sp, #88]	; 0x58
   1af3e:	9915      	ldr	r1, [sp, #84]	; 0x54
   1af40:	f7fb fcba 	bl	168b8 <__aeabi_dcmpeq>
   1af44:	2800      	cmp	r0, #0
   1af46:	d000      	beq.n	1af4a <_vfprintf_r+0x916>
   1af48:	e1f4      	b.n	1b334 <_vfprintf_r+0xd00>
   1af4a:	9d11      	ldr	r5, [sp, #68]	; 0x44
   1af4c:	9b14      	ldr	r3, [sp, #80]	; 0x50
   1af4e:	3501      	adds	r5, #1
   1af50:	3b01      	subs	r3, #1
   1af52:	6035      	str	r5, [r6, #0]
   1af54:	6073      	str	r3, [r6, #4]
   1af56:	18e4      	adds	r4, r4, r3
   1af58:	2301      	movs	r3, #1
   1af5a:	469c      	mov	ip, r3
   1af5c:	44e0      	add	r8, ip
   1af5e:	4643      	mov	r3, r8
   1af60:	60bc      	str	r4, [r7, #8]
   1af62:	607b      	str	r3, [r7, #4]
   1af64:	2b07      	cmp	r3, #7
   1af66:	dd00      	ble.n	1af6a <_vfprintf_r+0x936>
   1af68:	e0e0      	b.n	1b12c <_vfprintf_r+0xaf8>
   1af6a:	3608      	adds	r6, #8
   1af6c:	ab21      	add	r3, sp, #132	; 0x84
   1af6e:	6033      	str	r3, [r6, #0]
   1af70:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   1af72:	469c      	mov	ip, r3
   1af74:	6073      	str	r3, [r6, #4]
   1af76:	4643      	mov	r3, r8
   1af78:	4464      	add	r4, ip
   1af7a:	3301      	adds	r3, #1
   1af7c:	60bc      	str	r4, [r7, #8]
   1af7e:	607b      	str	r3, [r7, #4]
   1af80:	2b07      	cmp	r3, #7
   1af82:	dc00      	bgt.n	1af86 <_vfprintf_r+0x952>
   1af84:	e758      	b.n	1ae38 <_vfprintf_r+0x804>
   1af86:	003a      	movs	r2, r7
   1af88:	4659      	mov	r1, fp
   1af8a:	9806      	ldr	r0, [sp, #24]
   1af8c:	f003 fa92 	bl	1e4b4 <__sprint_r>
   1af90:	2800      	cmp	r0, #0
   1af92:	d000      	beq.n	1af96 <_vfprintf_r+0x962>
   1af94:	e0de      	b.n	1b154 <_vfprintf_r+0xb20>
   1af96:	68bc      	ldr	r4, [r7, #8]
   1af98:	ae32      	add	r6, sp, #200	; 0xc8
   1af9a:	e74e      	b.n	1ae3a <_vfprintf_r+0x806>
   1af9c:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1af9e:	2b65      	cmp	r3, #101	; 0x65
   1afa0:	ddab      	ble.n	1aefa <_vfprintf_r+0x8c6>
   1afa2:	2200      	movs	r2, #0
   1afa4:	2300      	movs	r3, #0
   1afa6:	9816      	ldr	r0, [sp, #88]	; 0x58
   1afa8:	9915      	ldr	r1, [sp, #84]	; 0x54
   1afaa:	f7fb fc85 	bl	168b8 <__aeabi_dcmpeq>
   1afae:	2800      	cmp	r0, #0
   1afb0:	d100      	bne.n	1afb4 <_vfprintf_r+0x980>
   1afb2:	e134      	b.n	1b21e <_vfprintf_r+0xbea>
   1afb4:	4b85      	ldr	r3, [pc, #532]	; (1b1cc <_vfprintf_r+0xb98>)
   1afb6:	3401      	adds	r4, #1
   1afb8:	6033      	str	r3, [r6, #0]
   1afba:	2301      	movs	r3, #1
   1afbc:	6073      	str	r3, [r6, #4]
   1afbe:	687b      	ldr	r3, [r7, #4]
   1afc0:	60bc      	str	r4, [r7, #8]
   1afc2:	3301      	adds	r3, #1
   1afc4:	607b      	str	r3, [r7, #4]
   1afc6:	2b07      	cmp	r3, #7
   1afc8:	dd00      	ble.n	1afcc <_vfprintf_r+0x998>
   1afca:	e3dc      	b.n	1b786 <_vfprintf_r+0x1152>
   1afcc:	3608      	adds	r6, #8
   1afce:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   1afd0:	9a14      	ldr	r2, [sp, #80]	; 0x50
   1afd2:	4293      	cmp	r3, r2
   1afd4:	db03      	blt.n	1afde <_vfprintf_r+0x9aa>
   1afd6:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1afd8:	07db      	lsls	r3, r3, #31
   1afda:	d400      	bmi.n	1afde <_vfprintf_r+0x9aa>
   1afdc:	e3b7      	b.n	1b74e <_vfprintf_r+0x111a>
   1afde:	9b18      	ldr	r3, [sp, #96]	; 0x60
   1afe0:	68ba      	ldr	r2, [r7, #8]
   1afe2:	6033      	str	r3, [r6, #0]
   1afe4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   1afe6:	469c      	mov	ip, r3
   1afe8:	6073      	str	r3, [r6, #4]
   1afea:	687b      	ldr	r3, [r7, #4]
   1afec:	4462      	add	r2, ip
   1afee:	3301      	adds	r3, #1
   1aff0:	0014      	movs	r4, r2
   1aff2:	60ba      	str	r2, [r7, #8]
   1aff4:	607b      	str	r3, [r7, #4]
   1aff6:	2b07      	cmp	r3, #7
   1aff8:	dd01      	ble.n	1affe <_vfprintf_r+0x9ca>
   1affa:	f000 fc19 	bl	1b830 <_vfprintf_r+0x11fc>
   1affe:	3608      	adds	r6, #8
   1b000:	9b14      	ldr	r3, [sp, #80]	; 0x50
   1b002:	1e5d      	subs	r5, r3, #1
   1b004:	2d00      	cmp	r5, #0
   1b006:	dc00      	bgt.n	1b00a <_vfprintf_r+0x9d6>
   1b008:	e717      	b.n	1ae3a <_vfprintf_r+0x806>
   1b00a:	4a71      	ldr	r2, [pc, #452]	; (1b1d0 <_vfprintf_r+0xb9c>)
   1b00c:	687b      	ldr	r3, [r7, #4]
   1b00e:	4691      	mov	r9, r2
   1b010:	2d10      	cmp	r5, #16
   1b012:	dc00      	bgt.n	1b016 <_vfprintf_r+0x9e2>
   1b014:	e1c3      	b.n	1b39e <_vfprintf_r+0xd6a>
   1b016:	2210      	movs	r2, #16
   1b018:	4690      	mov	r8, r2
   1b01a:	0022      	movs	r2, r4
   1b01c:	464c      	mov	r4, r9
   1b01e:	46d9      	mov	r9, fp
   1b020:	e004      	b.n	1b02c <_vfprintf_r+0x9f8>
   1b022:	3608      	adds	r6, #8
   1b024:	3d10      	subs	r5, #16
   1b026:	2d10      	cmp	r5, #16
   1b028:	dc00      	bgt.n	1b02c <_vfprintf_r+0x9f8>
   1b02a:	e37c      	b.n	1b726 <_vfprintf_r+0x10f2>
   1b02c:	4641      	mov	r1, r8
   1b02e:	3210      	adds	r2, #16
   1b030:	3301      	adds	r3, #1
   1b032:	6034      	str	r4, [r6, #0]
   1b034:	6071      	str	r1, [r6, #4]
   1b036:	60ba      	str	r2, [r7, #8]
   1b038:	607b      	str	r3, [r7, #4]
   1b03a:	2b07      	cmp	r3, #7
   1b03c:	ddf1      	ble.n	1b022 <_vfprintf_r+0x9ee>
   1b03e:	003a      	movs	r2, r7
   1b040:	4649      	mov	r1, r9
   1b042:	9806      	ldr	r0, [sp, #24]
   1b044:	f003 fa36 	bl	1e4b4 <__sprint_r>
   1b048:	2800      	cmp	r0, #0
   1b04a:	d10b      	bne.n	1b064 <_vfprintf_r+0xa30>
   1b04c:	68ba      	ldr	r2, [r7, #8]
   1b04e:	687b      	ldr	r3, [r7, #4]
   1b050:	ae32      	add	r6, sp, #200	; 0xc8
   1b052:	e7e7      	b.n	1b024 <_vfprintf_r+0x9f0>
   1b054:	68bb      	ldr	r3, [r7, #8]
   1b056:	46d9      	mov	r9, fp
   1b058:	2b00      	cmp	r3, #0
   1b05a:	d001      	beq.n	1b060 <_vfprintf_r+0xa2c>
   1b05c:	f000 fd4c 	bl	1baf8 <_vfprintf_r+0x14c4>
   1b060:	2300      	movs	r3, #0
   1b062:	607b      	str	r3, [r7, #4]
   1b064:	464b      	mov	r3, r9
   1b066:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   1b068:	07db      	lsls	r3, r3, #31
   1b06a:	d40d      	bmi.n	1b088 <_vfprintf_r+0xa54>
   1b06c:	464b      	mov	r3, r9
   1b06e:	899b      	ldrh	r3, [r3, #12]
   1b070:	059a      	lsls	r2, r3, #22
   1b072:	d505      	bpl.n	1b080 <_vfprintf_r+0xa4c>
   1b074:	065b      	lsls	r3, r3, #25
   1b076:	d401      	bmi.n	1b07c <_vfprintf_r+0xa48>
   1b078:	f7ff fb8d 	bl	1a796 <_vfprintf_r+0x162>
   1b07c:	f7ff fb88 	bl	1a790 <_vfprintf_r+0x15c>
   1b080:	464b      	mov	r3, r9
   1b082:	6d98      	ldr	r0, [r3, #88]	; 0x58
   1b084:	f002 fbc6 	bl	1d814 <__retarget_lock_release_recursive>
   1b088:	464b      	mov	r3, r9
   1b08a:	899b      	ldrh	r3, [r3, #12]
   1b08c:	e7f2      	b.n	1b074 <_vfprintf_r+0xa40>
   1b08e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1b090:	9a08      	ldr	r2, [sp, #32]
   1b092:	1a9d      	subs	r5, r3, r2
   1b094:	2d00      	cmp	r5, #0
   1b096:	dc00      	bgt.n	1b09a <_vfprintf_r+0xa66>
   1b098:	e685      	b.n	1ada6 <_vfprintf_r+0x772>
   1b09a:	4a4d      	ldr	r2, [pc, #308]	; (1b1d0 <_vfprintf_r+0xb9c>)
   1b09c:	687b      	ldr	r3, [r7, #4]
   1b09e:	4691      	mov	r9, r2
   1b0a0:	2d10      	cmp	r5, #16
   1b0a2:	dd24      	ble.n	1b0ee <_vfprintf_r+0xaba>
   1b0a4:	2210      	movs	r2, #16
   1b0a6:	0021      	movs	r1, r4
   1b0a8:	4690      	mov	r8, r2
   1b0aa:	465c      	mov	r4, fp
   1b0ac:	0032      	movs	r2, r6
   1b0ae:	464e      	mov	r6, r9
   1b0b0:	e003      	b.n	1b0ba <_vfprintf_r+0xa86>
   1b0b2:	3d10      	subs	r5, #16
   1b0b4:	3208      	adds	r2, #8
   1b0b6:	2d10      	cmp	r5, #16
   1b0b8:	dd15      	ble.n	1b0e6 <_vfprintf_r+0xab2>
   1b0ba:	4640      	mov	r0, r8
   1b0bc:	3110      	adds	r1, #16
   1b0be:	3301      	adds	r3, #1
   1b0c0:	6016      	str	r6, [r2, #0]
   1b0c2:	6050      	str	r0, [r2, #4]
   1b0c4:	60b9      	str	r1, [r7, #8]
   1b0c6:	607b      	str	r3, [r7, #4]
   1b0c8:	2b07      	cmp	r3, #7
   1b0ca:	ddf2      	ble.n	1b0b2 <_vfprintf_r+0xa7e>
   1b0cc:	003a      	movs	r2, r7
   1b0ce:	0021      	movs	r1, r4
   1b0d0:	9806      	ldr	r0, [sp, #24]
   1b0d2:	f003 f9ef 	bl	1e4b4 <__sprint_r>
   1b0d6:	2800      	cmp	r0, #0
   1b0d8:	d115      	bne.n	1b106 <_vfprintf_r+0xad2>
   1b0da:	3d10      	subs	r5, #16
   1b0dc:	68b9      	ldr	r1, [r7, #8]
   1b0de:	687b      	ldr	r3, [r7, #4]
   1b0e0:	aa32      	add	r2, sp, #200	; 0xc8
   1b0e2:	2d10      	cmp	r5, #16
   1b0e4:	dce9      	bgt.n	1b0ba <_vfprintf_r+0xa86>
   1b0e6:	46a3      	mov	fp, r4
   1b0e8:	46b1      	mov	r9, r6
   1b0ea:	000c      	movs	r4, r1
   1b0ec:	0016      	movs	r6, r2
   1b0ee:	464a      	mov	r2, r9
   1b0f0:	1964      	adds	r4, r4, r5
   1b0f2:	3301      	adds	r3, #1
   1b0f4:	6032      	str	r2, [r6, #0]
   1b0f6:	6075      	str	r5, [r6, #4]
   1b0f8:	60bc      	str	r4, [r7, #8]
   1b0fa:	607b      	str	r3, [r7, #4]
   1b0fc:	2b07      	cmp	r3, #7
   1b0fe:	dd00      	ble.n	1b102 <_vfprintf_r+0xace>
   1b100:	e263      	b.n	1b5ca <_vfprintf_r+0xf96>
   1b102:	3608      	adds	r6, #8
   1b104:	e64f      	b.n	1ada6 <_vfprintf_r+0x772>
   1b106:	46a1      	mov	r9, r4
   1b108:	e7ac      	b.n	1b064 <_vfprintf_r+0xa30>
   1b10a:	2301      	movs	r3, #1
   1b10c:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1b10e:	4213      	tst	r3, r2
   1b110:	d000      	beq.n	1b114 <_vfprintf_r+0xae0>
   1b112:	e6f6      	b.n	1af02 <_vfprintf_r+0x8ce>
   1b114:	6073      	str	r3, [r6, #4]
   1b116:	687b      	ldr	r3, [r7, #4]
   1b118:	9a11      	ldr	r2, [sp, #68]	; 0x44
   1b11a:	3301      	adds	r3, #1
   1b11c:	3401      	adds	r4, #1
   1b11e:	6032      	str	r2, [r6, #0]
   1b120:	60bc      	str	r4, [r7, #8]
   1b122:	4698      	mov	r8, r3
   1b124:	607b      	str	r3, [r7, #4]
   1b126:	2b07      	cmp	r3, #7
   1b128:	dc00      	bgt.n	1b12c <_vfprintf_r+0xaf8>
   1b12a:	e71e      	b.n	1af6a <_vfprintf_r+0x936>
   1b12c:	003a      	movs	r2, r7
   1b12e:	4659      	mov	r1, fp
   1b130:	9806      	ldr	r0, [sp, #24]
   1b132:	f003 f9bf 	bl	1e4b4 <__sprint_r>
   1b136:	2800      	cmp	r0, #0
   1b138:	d10c      	bne.n	1b154 <_vfprintf_r+0xb20>
   1b13a:	687b      	ldr	r3, [r7, #4]
   1b13c:	68bc      	ldr	r4, [r7, #8]
   1b13e:	4698      	mov	r8, r3
   1b140:	ae32      	add	r6, sp, #200	; 0xc8
   1b142:	e713      	b.n	1af6c <_vfprintf_r+0x938>
   1b144:	003a      	movs	r2, r7
   1b146:	4659      	mov	r1, fp
   1b148:	9806      	ldr	r0, [sp, #24]
   1b14a:	f003 f9b3 	bl	1e4b4 <__sprint_r>
   1b14e:	2800      	cmp	r0, #0
   1b150:	d100      	bne.n	1b154 <_vfprintf_r+0xb20>
   1b152:	e6cd      	b.n	1aef0 <_vfprintf_r+0x8bc>
   1b154:	46d9      	mov	r9, fp
   1b156:	e785      	b.n	1b064 <_vfprintf_r+0xa30>
   1b158:	9c09      	ldr	r4, [sp, #36]	; 0x24
   1b15a:	2b01      	cmp	r3, #1
   1b15c:	d100      	bne.n	1b160 <_vfprintf_r+0xb2c>
   1b15e:	e148      	b.n	1b3f2 <_vfprintf_r+0xdbe>
   1b160:	2b02      	cmp	r3, #2
   1b162:	d123      	bne.n	1b1ac <_vfprintf_r+0xb78>
   1b164:	9409      	str	r4, [sp, #36]	; 0x24
   1b166:	2300      	movs	r3, #0
   1b168:	2400      	movs	r4, #0
   1b16a:	930c      	str	r3, [sp, #48]	; 0x30
   1b16c:	940d      	str	r4, [sp, #52]	; 0x34
   1b16e:	e4a1      	b.n	1aab4 <_vfprintf_r+0x480>
   1b170:	003a      	movs	r2, r7
   1b172:	4659      	mov	r1, fp
   1b174:	9806      	ldr	r0, [sp, #24]
   1b176:	f003 f99d 	bl	1e4b4 <__sprint_r>
   1b17a:	2800      	cmp	r0, #0
   1b17c:	d1ea      	bne.n	1b154 <_vfprintf_r+0xb20>
   1b17e:	68bc      	ldr	r4, [r7, #8]
   1b180:	ae32      	add	r6, sp, #200	; 0xc8
   1b182:	e648      	b.n	1ae16 <_vfprintf_r+0x7e2>
   1b184:	003a      	movs	r2, r7
   1b186:	4659      	mov	r1, fp
   1b188:	9806      	ldr	r0, [sp, #24]
   1b18a:	f003 f993 	bl	1e4b4 <__sprint_r>
   1b18e:	2800      	cmp	r0, #0
   1b190:	d1e0      	bne.n	1b154 <_vfprintf_r+0xb20>
   1b192:	68bc      	ldr	r4, [r7, #8]
   1b194:	ae32      	add	r6, sp, #200	; 0xc8
   1b196:	e5f2      	b.n	1ad7e <_vfprintf_r+0x74a>
   1b198:	003a      	movs	r2, r7
   1b19a:	4659      	mov	r1, fp
   1b19c:	9806      	ldr	r0, [sp, #24]
   1b19e:	f003 f989 	bl	1e4b4 <__sprint_r>
   1b1a2:	2800      	cmp	r0, #0
   1b1a4:	d1d6      	bne.n	1b154 <_vfprintf_r+0xb20>
   1b1a6:	68bc      	ldr	r4, [r7, #8]
   1b1a8:	ae32      	add	r6, sp, #200	; 0xc8
   1b1aa:	e5f8      	b.n	1ad9e <_vfprintf_r+0x76a>
   1b1ac:	9409      	str	r4, [sp, #36]	; 0x24
   1b1ae:	2300      	movs	r3, #0
   1b1b0:	2400      	movs	r4, #0
   1b1b2:	930c      	str	r3, [sp, #48]	; 0x30
   1b1b4:	940d      	str	r4, [sp, #52]	; 0x34
   1b1b6:	980c      	ldr	r0, [sp, #48]	; 0x30
   1b1b8:	990d      	ldr	r1, [sp, #52]	; 0x34
   1b1ba:	4653      	mov	r3, sl
   1b1bc:	aa32      	add	r2, sp, #200	; 0xc8
   1b1be:	4691      	mov	r9, r2
   1b1c0:	9308      	str	r3, [sp, #32]
   1b1c2:	46b2      	mov	sl, r6
   1b1c4:	e007      	b.n	1b1d6 <_vfprintf_r+0xba2>
   1b1c6:	46c0      	nop			; (mov r8, r8)
   1b1c8:	000206a8 	.word	0x000206a8
   1b1cc:	0001f918 	.word	0x0001f918
   1b1d0:	000206b8 	.word	0x000206b8
   1b1d4:	46a1      	mov	r9, r4
   1b1d6:	074a      	lsls	r2, r1, #29
   1b1d8:	4694      	mov	ip, r2
   1b1da:	464b      	mov	r3, r9
   1b1dc:	4665      	mov	r5, ip
   1b1de:	1e5c      	subs	r4, r3, #1
   1b1e0:	08c6      	lsrs	r6, r0, #3
   1b1e2:	2307      	movs	r3, #7
   1b1e4:	08ca      	lsrs	r2, r1, #3
   1b1e6:	4335      	orrs	r5, r6
   1b1e8:	0011      	movs	r1, r2
   1b1ea:	002a      	movs	r2, r5
   1b1ec:	4003      	ands	r3, r0
   1b1ee:	3330      	adds	r3, #48	; 0x30
   1b1f0:	7023      	strb	r3, [r4, #0]
   1b1f2:	0028      	movs	r0, r5
   1b1f4:	430a      	orrs	r2, r1
   1b1f6:	d1ed      	bne.n	1b1d4 <_vfprintf_r+0xba0>
   1b1f8:	900c      	str	r0, [sp, #48]	; 0x30
   1b1fa:	910d      	str	r1, [sp, #52]	; 0x34
   1b1fc:	9908      	ldr	r1, [sp, #32]
   1b1fe:	4656      	mov	r6, sl
   1b200:	468a      	mov	sl, r1
   1b202:	9909      	ldr	r1, [sp, #36]	; 0x24
   1b204:	464a      	mov	r2, r9
   1b206:	9411      	str	r4, [sp, #68]	; 0x44
   1b208:	07c9      	lsls	r1, r1, #31
   1b20a:	d500      	bpl.n	1b20e <_vfprintf_r+0xbda>
   1b20c:	e0e0      	b.n	1b3d0 <_vfprintf_r+0xd9c>
   1b20e:	ab32      	add	r3, sp, #200	; 0xc8
   1b210:	1b1b      	subs	r3, r3, r4
   1b212:	930e      	str	r3, [sp, #56]	; 0x38
   1b214:	f7ff fb7b 	bl	1a90e <_vfprintf_r+0x2da>
   1b218:	9c07      	ldr	r4, [sp, #28]
   1b21a:	f7ff fa7d 	bl	1a718 <_vfprintf_r+0xe4>
   1b21e:	981f      	ldr	r0, [sp, #124]	; 0x7c
   1b220:	2800      	cmp	r0, #0
   1b222:	dc00      	bgt.n	1b226 <_vfprintf_r+0xbf2>
   1b224:	e2b9      	b.n	1b79a <_vfprintf_r+0x1166>
   1b226:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   1b228:	9914      	ldr	r1, [sp, #80]	; 0x50
   1b22a:	0013      	movs	r3, r2
   1b22c:	4690      	mov	r8, r2
   1b22e:	428b      	cmp	r3, r1
   1b230:	dd00      	ble.n	1b234 <_vfprintf_r+0xc00>
   1b232:	4688      	mov	r8, r1
   1b234:	4643      	mov	r3, r8
   1b236:	2b00      	cmp	r3, #0
   1b238:	dd0c      	ble.n	1b254 <_vfprintf_r+0xc20>
   1b23a:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1b23c:	4444      	add	r4, r8
   1b23e:	6033      	str	r3, [r6, #0]
   1b240:	4643      	mov	r3, r8
   1b242:	6073      	str	r3, [r6, #4]
   1b244:	687b      	ldr	r3, [r7, #4]
   1b246:	60bc      	str	r4, [r7, #8]
   1b248:	3301      	adds	r3, #1
   1b24a:	607b      	str	r3, [r7, #4]
   1b24c:	2b07      	cmp	r3, #7
   1b24e:	dd00      	ble.n	1b252 <_vfprintf_r+0xc1e>
   1b250:	e389      	b.n	1b966 <_vfprintf_r+0x1332>
   1b252:	3608      	adds	r6, #8
   1b254:	4643      	mov	r3, r8
   1b256:	43db      	mvns	r3, r3
   1b258:	4642      	mov	r2, r8
   1b25a:	17db      	asrs	r3, r3, #31
   1b25c:	4013      	ands	r3, r2
   1b25e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   1b260:	1ad3      	subs	r3, r2, r3
   1b262:	4698      	mov	r8, r3
   1b264:	2b00      	cmp	r3, #0
   1b266:	dc00      	bgt.n	1b26a <_vfprintf_r+0xc36>
   1b268:	e0eb      	b.n	1b442 <_vfprintf_r+0xe0e>
   1b26a:	2b10      	cmp	r3, #16
   1b26c:	dc01      	bgt.n	1b272 <_vfprintf_r+0xc3e>
   1b26e:	f000 fcd9 	bl	1bc24 <_vfprintf_r+0x15f0>
   1b272:	4adc      	ldr	r2, [pc, #880]	; (1b5e4 <_vfprintf_r+0xfb0>)
   1b274:	687b      	ldr	r3, [r7, #4]
   1b276:	4691      	mov	r9, r2
   1b278:	2210      	movs	r2, #16
   1b27a:	464d      	mov	r5, r9
   1b27c:	4692      	mov	sl, r2
   1b27e:	0022      	movs	r2, r4
   1b280:	4644      	mov	r4, r8
   1b282:	46d8      	mov	r8, fp
   1b284:	e004      	b.n	1b290 <_vfprintf_r+0xc5c>
   1b286:	3608      	adds	r6, #8
   1b288:	3c10      	subs	r4, #16
   1b28a:	2c10      	cmp	r4, #16
   1b28c:	dc00      	bgt.n	1b290 <_vfprintf_r+0xc5c>
   1b28e:	e0bf      	b.n	1b410 <_vfprintf_r+0xddc>
   1b290:	4651      	mov	r1, sl
   1b292:	3210      	adds	r2, #16
   1b294:	3301      	adds	r3, #1
   1b296:	6035      	str	r5, [r6, #0]
   1b298:	6071      	str	r1, [r6, #4]
   1b29a:	60ba      	str	r2, [r7, #8]
   1b29c:	607b      	str	r3, [r7, #4]
   1b29e:	2b07      	cmp	r3, #7
   1b2a0:	ddf1      	ble.n	1b286 <_vfprintf_r+0xc52>
   1b2a2:	003a      	movs	r2, r7
   1b2a4:	4641      	mov	r1, r8
   1b2a6:	9806      	ldr	r0, [sp, #24]
   1b2a8:	f003 f904 	bl	1e4b4 <__sprint_r>
   1b2ac:	2800      	cmp	r0, #0
   1b2ae:	d000      	beq.n	1b2b2 <_vfprintf_r+0xc7e>
   1b2b0:	e3b6      	b.n	1ba20 <_vfprintf_r+0x13ec>
   1b2b2:	68ba      	ldr	r2, [r7, #8]
   1b2b4:	687b      	ldr	r3, [r7, #4]
   1b2b6:	ae32      	add	r6, sp, #200	; 0xc8
   1b2b8:	e7e6      	b.n	1b288 <_vfprintf_r+0xc54>
   1b2ba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1b2bc:	2b00      	cmp	r3, #0
   1b2be:	d100      	bne.n	1b2c2 <_vfprintf_r+0xc8e>
   1b2c0:	e092      	b.n	1b3e8 <_vfprintf_r+0xdb4>
   1b2c2:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   1b2c4:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   1b2c6:	ab32      	add	r3, sp, #200	; 0xc8
   1b2c8:	46b1      	mov	r9, r6
   1b2ca:	001e      	movs	r6, r3
   1b2cc:	0020      	movs	r0, r4
   1b2ce:	0029      	movs	r1, r5
   1b2d0:	220a      	movs	r2, #10
   1b2d2:	2300      	movs	r3, #0
   1b2d4:	f7fb fb58 	bl	16988 <__aeabi_uldivmod>
   1b2d8:	3e01      	subs	r6, #1
   1b2da:	3230      	adds	r2, #48	; 0x30
   1b2dc:	7032      	strb	r2, [r6, #0]
   1b2de:	2300      	movs	r3, #0
   1b2e0:	0020      	movs	r0, r4
   1b2e2:	0029      	movs	r1, r5
   1b2e4:	220a      	movs	r2, #10
   1b2e6:	f7fb fb4f 	bl	16988 <__aeabi_uldivmod>
   1b2ea:	0003      	movs	r3, r0
   1b2ec:	0004      	movs	r4, r0
   1b2ee:	000d      	movs	r5, r1
   1b2f0:	430b      	orrs	r3, r1
   1b2f2:	d1eb      	bne.n	1b2cc <_vfprintf_r+0xc98>
   1b2f4:	0032      	movs	r2, r6
   1b2f6:	ab32      	add	r3, sp, #200	; 0xc8
   1b2f8:	1a9b      	subs	r3, r3, r2
   1b2fa:	9611      	str	r6, [sp, #68]	; 0x44
   1b2fc:	940c      	str	r4, [sp, #48]	; 0x30
   1b2fe:	950d      	str	r5, [sp, #52]	; 0x34
   1b300:	464e      	mov	r6, r9
   1b302:	930e      	str	r3, [sp, #56]	; 0x38
   1b304:	f7ff fb03 	bl	1a90e <_vfprintf_r+0x2da>
   1b308:	2300      	movs	r3, #0
   1b30a:	930e      	str	r3, [sp, #56]	; 0x38
   1b30c:	ab32      	add	r3, sp, #200	; 0xc8
   1b30e:	9311      	str	r3, [sp, #68]	; 0x44
   1b310:	f7ff fafd 	bl	1a90e <_vfprintf_r+0x2da>
   1b314:	003a      	movs	r2, r7
   1b316:	4659      	mov	r1, fp
   1b318:	9806      	ldr	r0, [sp, #24]
   1b31a:	f003 f8cb 	bl	1e4b4 <__sprint_r>
   1b31e:	2800      	cmp	r0, #0
   1b320:	d000      	beq.n	1b324 <_vfprintf_r+0xcf0>
   1b322:	e717      	b.n	1b154 <_vfprintf_r+0xb20>
   1b324:	ab16      	add	r3, sp, #88	; 0x58
   1b326:	7fdb      	ldrb	r3, [r3, #31]
   1b328:	68bc      	ldr	r4, [r7, #8]
   1b32a:	4698      	mov	r8, r3
   1b32c:	ae32      	add	r6, sp, #200	; 0xc8
   1b32e:	e513      	b.n	1ad58 <_vfprintf_r+0x724>
   1b330:	46b1      	mov	r9, r6
   1b332:	e697      	b.n	1b064 <_vfprintf_r+0xa30>
   1b334:	9b14      	ldr	r3, [sp, #80]	; 0x50
   1b336:	1e5d      	subs	r5, r3, #1
   1b338:	2d00      	cmp	r5, #0
   1b33a:	dc00      	bgt.n	1b33e <_vfprintf_r+0xd0a>
   1b33c:	e616      	b.n	1af6c <_vfprintf_r+0x938>
   1b33e:	4ba9      	ldr	r3, [pc, #676]	; (1b5e4 <_vfprintf_r+0xfb0>)
   1b340:	4699      	mov	r9, r3
   1b342:	2d10      	cmp	r5, #16
   1b344:	dc00      	bgt.n	1b348 <_vfprintf_r+0xd14>
   1b346:	e10a      	b.n	1b55e <_vfprintf_r+0xf2a>
   1b348:	2310      	movs	r3, #16
   1b34a:	0022      	movs	r2, r4
   1b34c:	469a      	mov	sl, r3
   1b34e:	465c      	mov	r4, fp
   1b350:	4643      	mov	r3, r8
   1b352:	e004      	b.n	1b35e <_vfprintf_r+0xd2a>
   1b354:	3608      	adds	r6, #8
   1b356:	3d10      	subs	r5, #16
   1b358:	2d10      	cmp	r5, #16
   1b35a:	dc00      	bgt.n	1b35e <_vfprintf_r+0xd2a>
   1b35c:	e0fc      	b.n	1b558 <_vfprintf_r+0xf24>
   1b35e:	4649      	mov	r1, r9
   1b360:	6031      	str	r1, [r6, #0]
   1b362:	4651      	mov	r1, sl
   1b364:	3210      	adds	r2, #16
   1b366:	3301      	adds	r3, #1
   1b368:	6071      	str	r1, [r6, #4]
   1b36a:	60ba      	str	r2, [r7, #8]
   1b36c:	607b      	str	r3, [r7, #4]
   1b36e:	2b07      	cmp	r3, #7
   1b370:	ddf0      	ble.n	1b354 <_vfprintf_r+0xd20>
   1b372:	003a      	movs	r2, r7
   1b374:	0021      	movs	r1, r4
   1b376:	9806      	ldr	r0, [sp, #24]
   1b378:	f003 f89c 	bl	1e4b4 <__sprint_r>
   1b37c:	2800      	cmp	r0, #0
   1b37e:	d000      	beq.n	1b382 <_vfprintf_r+0xd4e>
   1b380:	e6c1      	b.n	1b106 <_vfprintf_r+0xad2>
   1b382:	68ba      	ldr	r2, [r7, #8]
   1b384:	687b      	ldr	r3, [r7, #4]
   1b386:	ae32      	add	r6, sp, #200	; 0xc8
   1b388:	e7e5      	b.n	1b356 <_vfprintf_r+0xd22>
   1b38a:	990c      	ldr	r1, [sp, #48]	; 0x30
   1b38c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   1b38e:	0008      	movs	r0, r1
   1b390:	4310      	orrs	r0, r2
   1b392:	2302      	movs	r3, #2
   1b394:	0002      	movs	r2, r0
   1b396:	f7ff fa93 	bl	1a8c0 <_vfprintf_r+0x28c>
   1b39a:	46a3      	mov	fp, r4
   1b39c:	0014      	movs	r4, r2
   1b39e:	464a      	mov	r2, r9
   1b3a0:	1964      	adds	r4, r4, r5
   1b3a2:	3301      	adds	r3, #1
   1b3a4:	6032      	str	r2, [r6, #0]
   1b3a6:	6075      	str	r5, [r6, #4]
   1b3a8:	60bc      	str	r4, [r7, #8]
   1b3aa:	607b      	str	r3, [r7, #4]
   1b3ac:	2b07      	cmp	r3, #7
   1b3ae:	dc00      	bgt.n	1b3b2 <_vfprintf_r+0xd7e>
   1b3b0:	e542      	b.n	1ae38 <_vfprintf_r+0x804>
   1b3b2:	e5e8      	b.n	1af86 <_vfprintf_r+0x952>
   1b3b4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1b3b6:	681a      	ldr	r2, [r3, #0]
   1b3b8:	f7ff fa68 	bl	1a88c <_vfprintf_r+0x258>
   1b3bc:	6813      	ldr	r3, [r2, #0]
   1b3be:	9308      	str	r3, [sp, #32]
   1b3c0:	f7ff fb57 	bl	1aa72 <_vfprintf_r+0x43e>
   1b3c4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1b3c6:	681a      	ldr	r2, [r3, #0]
   1b3c8:	e412      	b.n	1abf0 <_vfprintf_r+0x5bc>
   1b3ca:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1b3cc:	681a      	ldr	r2, [r3, #0]
   1b3ce:	e426      	b.n	1ac1e <_vfprintf_r+0x5ea>
   1b3d0:	2b30      	cmp	r3, #48	; 0x30
   1b3d2:	d100      	bne.n	1b3d6 <_vfprintf_r+0xda2>
   1b3d4:	e23c      	b.n	1b850 <_vfprintf_r+0x121c>
   1b3d6:	2330      	movs	r3, #48	; 0x30
   1b3d8:	3a02      	subs	r2, #2
   1b3da:	7013      	strb	r3, [r2, #0]
   1b3dc:	ab32      	add	r3, sp, #200	; 0xc8
   1b3de:	1a9b      	subs	r3, r3, r2
   1b3e0:	930e      	str	r3, [sp, #56]	; 0x38
   1b3e2:	9211      	str	r2, [sp, #68]	; 0x44
   1b3e4:	f7ff fa93 	bl	1a90e <_vfprintf_r+0x2da>
   1b3e8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1b3ea:	2b09      	cmp	r3, #9
   1b3ec:	d900      	bls.n	1b3f0 <_vfprintf_r+0xdbc>
   1b3ee:	e768      	b.n	1b2c2 <_vfprintf_r+0xc8e>
   1b3f0:	9c09      	ldr	r4, [sp, #36]	; 0x24
   1b3f2:	2227      	movs	r2, #39	; 0x27
   1b3f4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1b3f6:	a928      	add	r1, sp, #160	; 0xa0
   1b3f8:	3330      	adds	r3, #48	; 0x30
   1b3fa:	548b      	strb	r3, [r1, r2]
   1b3fc:	2301      	movs	r3, #1
   1b3fe:	aa16      	add	r2, sp, #88	; 0x58
   1b400:	4694      	mov	ip, r2
   1b402:	930e      	str	r3, [sp, #56]	; 0x38
   1b404:	336e      	adds	r3, #110	; 0x6e
   1b406:	4463      	add	r3, ip
   1b408:	9409      	str	r4, [sp, #36]	; 0x24
   1b40a:	9311      	str	r3, [sp, #68]	; 0x44
   1b40c:	f7ff fa7f 	bl	1a90e <_vfprintf_r+0x2da>
   1b410:	46c3      	mov	fp, r8
   1b412:	46a9      	mov	r9, r5
   1b414:	46a0      	mov	r8, r4
   1b416:	0014      	movs	r4, r2
   1b418:	464a      	mov	r2, r9
   1b41a:	6032      	str	r2, [r6, #0]
   1b41c:	4642      	mov	r2, r8
   1b41e:	4444      	add	r4, r8
   1b420:	3301      	adds	r3, #1
   1b422:	6072      	str	r2, [r6, #4]
   1b424:	60bc      	str	r4, [r7, #8]
   1b426:	607b      	str	r3, [r7, #4]
   1b428:	2b07      	cmp	r3, #7
   1b42a:	dc00      	bgt.n	1b42e <_vfprintf_r+0xdfa>
   1b42c:	e18d      	b.n	1b74a <_vfprintf_r+0x1116>
   1b42e:	003a      	movs	r2, r7
   1b430:	4659      	mov	r1, fp
   1b432:	9806      	ldr	r0, [sp, #24]
   1b434:	f003 f83e 	bl	1e4b4 <__sprint_r>
   1b438:	2800      	cmp	r0, #0
   1b43a:	d000      	beq.n	1b43e <_vfprintf_r+0xe0a>
   1b43c:	e68a      	b.n	1b154 <_vfprintf_r+0xb20>
   1b43e:	68bc      	ldr	r4, [r7, #8]
   1b440:	ae32      	add	r6, sp, #200	; 0xc8
   1b442:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   1b444:	9a14      	ldr	r2, [sp, #80]	; 0x50
   1b446:	4293      	cmp	r3, r2
   1b448:	db00      	blt.n	1b44c <_vfprintf_r+0xe18>
   1b44a:	e179      	b.n	1b740 <_vfprintf_r+0x110c>
   1b44c:	9a18      	ldr	r2, [sp, #96]	; 0x60
   1b44e:	6032      	str	r2, [r6, #0]
   1b450:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   1b452:	4694      	mov	ip, r2
   1b454:	6072      	str	r2, [r6, #4]
   1b456:	687a      	ldr	r2, [r7, #4]
   1b458:	4464      	add	r4, ip
   1b45a:	3201      	adds	r2, #1
   1b45c:	60bc      	str	r4, [r7, #8]
   1b45e:	607a      	str	r2, [r7, #4]
   1b460:	2a07      	cmp	r2, #7
   1b462:	dd00      	ble.n	1b466 <_vfprintf_r+0xe32>
   1b464:	e176      	b.n	1b754 <_vfprintf_r+0x1120>
   1b466:	3608      	adds	r6, #8
   1b468:	9a14      	ldr	r2, [sp, #80]	; 0x50
   1b46a:	9913      	ldr	r1, [sp, #76]	; 0x4c
   1b46c:	1ad3      	subs	r3, r2, r3
   1b46e:	1a52      	subs	r2, r2, r1
   1b470:	4690      	mov	r8, r2
   1b472:	429a      	cmp	r2, r3
   1b474:	dd00      	ble.n	1b478 <_vfprintf_r+0xe44>
   1b476:	4698      	mov	r8, r3
   1b478:	4642      	mov	r2, r8
   1b47a:	2a00      	cmp	r2, #0
   1b47c:	dd0f      	ble.n	1b49e <_vfprintf_r+0xe6a>
   1b47e:	9913      	ldr	r1, [sp, #76]	; 0x4c
   1b480:	9a11      	ldr	r2, [sp, #68]	; 0x44
   1b482:	468c      	mov	ip, r1
   1b484:	4462      	add	r2, ip
   1b486:	6032      	str	r2, [r6, #0]
   1b488:	4642      	mov	r2, r8
   1b48a:	6072      	str	r2, [r6, #4]
   1b48c:	687a      	ldr	r2, [r7, #4]
   1b48e:	4444      	add	r4, r8
   1b490:	3201      	adds	r2, #1
   1b492:	60bc      	str	r4, [r7, #8]
   1b494:	607a      	str	r2, [r7, #4]
   1b496:	2a07      	cmp	r2, #7
   1b498:	dd00      	ble.n	1b49c <_vfprintf_r+0xe68>
   1b49a:	e289      	b.n	1b9b0 <_vfprintf_r+0x137c>
   1b49c:	3608      	adds	r6, #8
   1b49e:	4642      	mov	r2, r8
   1b4a0:	43d5      	mvns	r5, r2
   1b4a2:	17ed      	asrs	r5, r5, #31
   1b4a4:	4015      	ands	r5, r2
   1b4a6:	1b5d      	subs	r5, r3, r5
   1b4a8:	2d00      	cmp	r5, #0
   1b4aa:	dc00      	bgt.n	1b4ae <_vfprintf_r+0xe7a>
   1b4ac:	e4c5      	b.n	1ae3a <_vfprintf_r+0x806>
   1b4ae:	4a4d      	ldr	r2, [pc, #308]	; (1b5e4 <_vfprintf_r+0xfb0>)
   1b4b0:	687b      	ldr	r3, [r7, #4]
   1b4b2:	4691      	mov	r9, r2
   1b4b4:	2d10      	cmp	r5, #16
   1b4b6:	dc00      	bgt.n	1b4ba <_vfprintf_r+0xe86>
   1b4b8:	e771      	b.n	1b39e <_vfprintf_r+0xd6a>
   1b4ba:	2210      	movs	r2, #16
   1b4bc:	4690      	mov	r8, r2
   1b4be:	0022      	movs	r2, r4
   1b4c0:	465c      	mov	r4, fp
   1b4c2:	e004      	b.n	1b4ce <_vfprintf_r+0xe9a>
   1b4c4:	3608      	adds	r6, #8
   1b4c6:	3d10      	subs	r5, #16
   1b4c8:	2d10      	cmp	r5, #16
   1b4ca:	dc00      	bgt.n	1b4ce <_vfprintf_r+0xe9a>
   1b4cc:	e765      	b.n	1b39a <_vfprintf_r+0xd66>
   1b4ce:	4649      	mov	r1, r9
   1b4d0:	6031      	str	r1, [r6, #0]
   1b4d2:	4641      	mov	r1, r8
   1b4d4:	3210      	adds	r2, #16
   1b4d6:	3301      	adds	r3, #1
   1b4d8:	6071      	str	r1, [r6, #4]
   1b4da:	60ba      	str	r2, [r7, #8]
   1b4dc:	607b      	str	r3, [r7, #4]
   1b4de:	2b07      	cmp	r3, #7
   1b4e0:	ddf0      	ble.n	1b4c4 <_vfprintf_r+0xe90>
   1b4e2:	003a      	movs	r2, r7
   1b4e4:	0021      	movs	r1, r4
   1b4e6:	9806      	ldr	r0, [sp, #24]
   1b4e8:	f002 ffe4 	bl	1e4b4 <__sprint_r>
   1b4ec:	2800      	cmp	r0, #0
   1b4ee:	d000      	beq.n	1b4f2 <_vfprintf_r+0xebe>
   1b4f0:	e609      	b.n	1b106 <_vfprintf_r+0xad2>
   1b4f2:	68ba      	ldr	r2, [r7, #8]
   1b4f4:	687b      	ldr	r3, [r7, #4]
   1b4f6:	ae32      	add	r6, sp, #200	; 0xc8
   1b4f8:	e7e5      	b.n	1b4c6 <_vfprintf_r+0xe92>
   1b4fa:	003a      	movs	r2, r7
   1b4fc:	4659      	mov	r1, fp
   1b4fe:	9806      	ldr	r0, [sp, #24]
   1b500:	f002 ffd8 	bl	1e4b4 <__sprint_r>
   1b504:	2800      	cmp	r0, #0
   1b506:	d000      	beq.n	1b50a <_vfprintf_r+0xed6>
   1b508:	e624      	b.n	1b154 <_vfprintf_r+0xb20>
   1b50a:	68bc      	ldr	r4, [r7, #8]
   1b50c:	687b      	ldr	r3, [r7, #4]
   1b50e:	ae32      	add	r6, sp, #200	; 0xc8
   1b510:	e504      	b.n	1af1c <_vfprintf_r+0x8e8>
   1b512:	2307      	movs	r3, #7
   1b514:	3207      	adds	r2, #7
   1b516:	439a      	bics	r2, r3
   1b518:	3301      	adds	r3, #1
   1b51a:	469c      	mov	ip, r3
   1b51c:	4494      	add	ip, r2
   1b51e:	4663      	mov	r3, ip
   1b520:	930f      	str	r3, [sp, #60]	; 0x3c
   1b522:	6853      	ldr	r3, [r2, #4]
   1b524:	6812      	ldr	r2, [r2, #0]
   1b526:	930d      	str	r3, [sp, #52]	; 0x34
   1b528:	920c      	str	r2, [sp, #48]	; 0x30
   1b52a:	f7ff faa7 	bl	1aa7c <_vfprintf_r+0x448>
   1b52e:	2207      	movs	r2, #7
   1b530:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1b532:	3307      	adds	r3, #7
   1b534:	4393      	bics	r3, r2
   1b536:	3201      	adds	r2, #1
   1b538:	4694      	mov	ip, r2
   1b53a:	449c      	add	ip, r3
   1b53c:	4662      	mov	r2, ip
   1b53e:	920f      	str	r2, [sp, #60]	; 0x3c
   1b540:	681a      	ldr	r2, [r3, #0]
   1b542:	685b      	ldr	r3, [r3, #4]
   1b544:	0011      	movs	r1, r2
   1b546:	001a      	movs	r2, r3
   1b548:	0008      	movs	r0, r1
   1b54a:	4310      	orrs	r0, r2
   1b54c:	910c      	str	r1, [sp, #48]	; 0x30
   1b54e:	920d      	str	r2, [sp, #52]	; 0x34
   1b550:	2300      	movs	r3, #0
   1b552:	0002      	movs	r2, r0
   1b554:	f7ff f9b4 	bl	1a8c0 <_vfprintf_r+0x28c>
   1b558:	46a3      	mov	fp, r4
   1b55a:	4698      	mov	r8, r3
   1b55c:	0014      	movs	r4, r2
   1b55e:	464b      	mov	r3, r9
   1b560:	6075      	str	r5, [r6, #4]
   1b562:	6033      	str	r3, [r6, #0]
   1b564:	1964      	adds	r4, r4, r5
   1b566:	e4f7      	b.n	1af58 <_vfprintf_r+0x924>
   1b568:	003a      	movs	r2, r7
   1b56a:	4659      	mov	r1, fp
   1b56c:	9806      	ldr	r0, [sp, #24]
   1b56e:	f002 ffa1 	bl	1e4b4 <__sprint_r>
   1b572:	2800      	cmp	r0, #0
   1b574:	d000      	beq.n	1b578 <_vfprintf_r+0xf44>
   1b576:	e5ed      	b.n	1b154 <_vfprintf_r+0xb20>
   1b578:	687b      	ldr	r3, [r7, #4]
   1b57a:	68bc      	ldr	r4, [r7, #8]
   1b57c:	4698      	mov	r8, r3
   1b57e:	ae32      	add	r6, sp, #200	; 0xc8
   1b580:	e4da      	b.n	1af38 <_vfprintf_r+0x904>
   1b582:	2207      	movs	r2, #7
   1b584:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1b586:	3307      	adds	r3, #7
   1b588:	4393      	bics	r3, r2
   1b58a:	3201      	adds	r2, #1
   1b58c:	4694      	mov	ip, r2
   1b58e:	449c      	add	ip, r3
   1b590:	4662      	mov	r2, ip
   1b592:	920f      	str	r2, [sp, #60]	; 0x3c
   1b594:	681a      	ldr	r2, [r3, #0]
   1b596:	685b      	ldr	r3, [r3, #4]
   1b598:	0011      	movs	r1, r2
   1b59a:	001a      	movs	r2, r3
   1b59c:	0008      	movs	r0, r1
   1b59e:	4310      	orrs	r0, r2
   1b5a0:	910c      	str	r1, [sp, #48]	; 0x30
   1b5a2:	920d      	str	r2, [sp, #52]	; 0x34
   1b5a4:	2301      	movs	r3, #1
   1b5a6:	0002      	movs	r2, r0
   1b5a8:	f7ff f98a 	bl	1a8c0 <_vfprintf_r+0x28c>
   1b5ac:	2207      	movs	r2, #7
   1b5ae:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1b5b0:	3307      	adds	r3, #7
   1b5b2:	4393      	bics	r3, r2
   1b5b4:	3201      	adds	r2, #1
   1b5b6:	4694      	mov	ip, r2
   1b5b8:	449c      	add	ip, r3
   1b5ba:	4662      	mov	r2, ip
   1b5bc:	920f      	str	r2, [sp, #60]	; 0x3c
   1b5be:	681a      	ldr	r2, [r3, #0]
   1b5c0:	685b      	ldr	r3, [r3, #4]
   1b5c2:	920c      	str	r2, [sp, #48]	; 0x30
   1b5c4:	930d      	str	r3, [sp, #52]	; 0x34
   1b5c6:	f7ff f966 	bl	1a896 <_vfprintf_r+0x262>
   1b5ca:	003a      	movs	r2, r7
   1b5cc:	4659      	mov	r1, fp
   1b5ce:	9806      	ldr	r0, [sp, #24]
   1b5d0:	f002 ff70 	bl	1e4b4 <__sprint_r>
   1b5d4:	2800      	cmp	r0, #0
   1b5d6:	d000      	beq.n	1b5da <_vfprintf_r+0xfa6>
   1b5d8:	e5bc      	b.n	1b154 <_vfprintf_r+0xb20>
   1b5da:	68bc      	ldr	r4, [r7, #8]
   1b5dc:	ae32      	add	r6, sp, #200	; 0xc8
   1b5de:	f7ff fbe2 	bl	1ada6 <_vfprintf_r+0x772>
   1b5e2:	46c0      	nop			; (mov r8, r8)
   1b5e4:	000206b8 	.word	0x000206b8
   1b5e8:	980c      	ldr	r0, [sp, #48]	; 0x30
   1b5ea:	990d      	ldr	r1, [sp, #52]	; 0x34
   1b5ec:	2300      	movs	r3, #0
   1b5ee:	4242      	negs	r2, r0
   1b5f0:	418b      	sbcs	r3, r1
   1b5f2:	0011      	movs	r1, r2
   1b5f4:	001a      	movs	r2, r3
   1b5f6:	232d      	movs	r3, #45	; 0x2d
   1b5f8:	a816      	add	r0, sp, #88	; 0x58
   1b5fa:	77c3      	strb	r3, [r0, #31]
   1b5fc:	0008      	movs	r0, r1
   1b5fe:	4310      	orrs	r0, r2
   1b600:	910c      	str	r1, [sp, #48]	; 0x30
   1b602:	920d      	str	r2, [sp, #52]	; 0x34
   1b604:	4698      	mov	r8, r3
   1b606:	0002      	movs	r2, r0
   1b608:	3b2c      	subs	r3, #44	; 0x2c
   1b60a:	f7ff f95d 	bl	1a8c8 <_vfprintf_r+0x294>
   1b60e:	9916      	ldr	r1, [sp, #88]	; 0x58
   1b610:	9d15      	ldr	r5, [sp, #84]	; 0x54
   1b612:	000a      	movs	r2, r1
   1b614:	0008      	movs	r0, r1
   1b616:	002b      	movs	r3, r5
   1b618:	0029      	movs	r1, r5
   1b61a:	f003 f9d7 	bl	1e9cc <__aeabi_dcmpun>
   1b61e:	2800      	cmp	r0, #0
   1b620:	d000      	beq.n	1b624 <_vfprintf_r+0xff0>
   1b622:	e2c6      	b.n	1bbb2 <_vfprintf_r+0x157e>
   1b624:	4653      	mov	r3, sl
   1b626:	3301      	adds	r3, #1
   1b628:	d100      	bne.n	1b62c <_vfprintf_r+0xff8>
   1b62a:	e09f      	b.n	1b76c <_vfprintf_r+0x1138>
   1b62c:	2320      	movs	r3, #32
   1b62e:	9a12      	ldr	r2, [sp, #72]	; 0x48
   1b630:	439a      	bics	r2, r3
   1b632:	920e      	str	r2, [sp, #56]	; 0x38
   1b634:	2a47      	cmp	r2, #71	; 0x47
   1b636:	d100      	bne.n	1b63a <_vfprintf_r+0x1006>
   1b638:	e1a1      	b.n	1b97e <_vfprintf_r+0x134a>
   1b63a:	2380      	movs	r3, #128	; 0x80
   1b63c:	005b      	lsls	r3, r3, #1
   1b63e:	4323      	orrs	r3, r4
   1b640:	9309      	str	r3, [sp, #36]	; 0x24
   1b642:	9b15      	ldr	r3, [sp, #84]	; 0x54
   1b644:	2b00      	cmp	r3, #0
   1b646:	da00      	bge.n	1b64a <_vfprintf_r+0x1016>
   1b648:	e1ed      	b.n	1ba26 <_vfprintf_r+0x13f2>
   1b64a:	9a16      	ldr	r2, [sp, #88]	; 0x58
   1b64c:	9308      	str	r3, [sp, #32]
   1b64e:	2300      	movs	r3, #0
   1b650:	4691      	mov	r9, r2
   1b652:	9310      	str	r3, [sp, #64]	; 0x40
   1b654:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1b656:	2b66      	cmp	r3, #102	; 0x66
   1b658:	d100      	bne.n	1b65c <_vfprintf_r+0x1028>
   1b65a:	e1b8      	b.n	1b9ce <_vfprintf_r+0x139a>
   1b65c:	2b46      	cmp	r3, #70	; 0x46
   1b65e:	d100      	bne.n	1b662 <_vfprintf_r+0x102e>
   1b660:	e237      	b.n	1bad2 <_vfprintf_r+0x149e>
   1b662:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   1b664:	9806      	ldr	r0, [sp, #24]
   1b666:	3a45      	subs	r2, #69	; 0x45
   1b668:	0013      	movs	r3, r2
   1b66a:	4259      	negs	r1, r3
   1b66c:	4159      	adcs	r1, r3
   1b66e:	ab20      	add	r3, sp, #128	; 0x80
   1b670:	000d      	movs	r5, r1
   1b672:	9303      	str	r3, [sp, #12]
   1b674:	ab1f      	add	r3, sp, #124	; 0x7c
   1b676:	9302      	str	r3, [sp, #8]
   1b678:	2302      	movs	r3, #2
   1b67a:	aa23      	add	r2, sp, #140	; 0x8c
   1b67c:	4455      	add	r5, sl
   1b67e:	921b      	str	r2, [sp, #108]	; 0x6c
   1b680:	9204      	str	r2, [sp, #16]
   1b682:	9300      	str	r3, [sp, #0]
   1b684:	9501      	str	r5, [sp, #4]
   1b686:	9b08      	ldr	r3, [sp, #32]
   1b688:	464a      	mov	r2, r9
   1b68a:	f000 fcb9 	bl	1c000 <_dtoa_r>
   1b68e:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1b690:	9011      	str	r0, [sp, #68]	; 0x44
   1b692:	2b67      	cmp	r3, #103	; 0x67
   1b694:	d000      	beq.n	1b698 <_vfprintf_r+0x1064>
   1b696:	e20b      	b.n	1bab0 <_vfprintf_r+0x147c>
   1b698:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1b69a:	4698      	mov	r8, r3
   1b69c:	44a8      	add	r8, r5
   1b69e:	07e3      	lsls	r3, r4, #31
   1b6a0:	d400      	bmi.n	1b6a4 <_vfprintf_r+0x1070>
   1b6a2:	e277      	b.n	1bb94 <_vfprintf_r+0x1560>
   1b6a4:	2300      	movs	r3, #0
   1b6a6:	2200      	movs	r2, #0
   1b6a8:	4648      	mov	r0, r9
   1b6aa:	9908      	ldr	r1, [sp, #32]
   1b6ac:	f7fb f904 	bl	168b8 <__aeabi_dcmpeq>
   1b6b0:	4643      	mov	r3, r8
   1b6b2:	2800      	cmp	r0, #0
   1b6b4:	d10a      	bne.n	1b6cc <_vfprintf_r+0x1098>
   1b6b6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   1b6b8:	4543      	cmp	r3, r8
   1b6ba:	d207      	bcs.n	1b6cc <_vfprintf_r+0x1098>
   1b6bc:	2130      	movs	r1, #48	; 0x30
   1b6be:	4640      	mov	r0, r8
   1b6c0:	1c5a      	adds	r2, r3, #1
   1b6c2:	9223      	str	r2, [sp, #140]	; 0x8c
   1b6c4:	7019      	strb	r1, [r3, #0]
   1b6c6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   1b6c8:	4298      	cmp	r0, r3
   1b6ca:	d8f9      	bhi.n	1b6c0 <_vfprintf_r+0x108c>
   1b6cc:	9a11      	ldr	r2, [sp, #68]	; 0x44
   1b6ce:	1a9b      	subs	r3, r3, r2
   1b6d0:	9314      	str	r3, [sp, #80]	; 0x50
   1b6d2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1b6d4:	2b47      	cmp	r3, #71	; 0x47
   1b6d6:	d100      	bne.n	1b6da <_vfprintf_r+0x10a6>
   1b6d8:	e0d0      	b.n	1b87c <_vfprintf_r+0x1248>
   1b6da:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1b6dc:	2b65      	cmp	r3, #101	; 0x65
   1b6de:	dc00      	bgt.n	1b6e2 <_vfprintf_r+0x10ae>
   1b6e0:	e2d5      	b.n	1bc8e <_vfprintf_r+0x165a>
   1b6e2:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1b6e4:	2b66      	cmp	r3, #102	; 0x66
   1b6e6:	d100      	bne.n	1b6ea <_vfprintf_r+0x10b6>
   1b6e8:	e1c6      	b.n	1ba78 <_vfprintf_r+0x1444>
   1b6ea:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   1b6ec:	9313      	str	r3, [sp, #76]	; 0x4c
   1b6ee:	9b14      	ldr	r3, [sp, #80]	; 0x50
   1b6f0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   1b6f2:	0019      	movs	r1, r3
   1b6f4:	4291      	cmp	r1, r2
   1b6f6:	dd00      	ble.n	1b6fa <_vfprintf_r+0x10c6>
   1b6f8:	e1a0      	b.n	1ba3c <_vfprintf_r+0x1408>
   1b6fa:	07e3      	lsls	r3, r4, #31
   1b6fc:	d500      	bpl.n	1b700 <_vfprintf_r+0x10cc>
   1b6fe:	e242      	b.n	1bb86 <_vfprintf_r+0x1552>
   1b700:	43d3      	mvns	r3, r2
   1b702:	17db      	asrs	r3, r3, #31
   1b704:	0011      	movs	r1, r2
   1b706:	401a      	ands	r2, r3
   1b708:	2367      	movs	r3, #103	; 0x67
   1b70a:	9208      	str	r2, [sp, #32]
   1b70c:	910e      	str	r1, [sp, #56]	; 0x38
   1b70e:	9312      	str	r3, [sp, #72]	; 0x48
   1b710:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1b712:	2b00      	cmp	r3, #0
   1b714:	d000      	beq.n	1b718 <_vfprintf_r+0x10e4>
   1b716:	e0a9      	b.n	1b86c <_vfprintf_r+0x1238>
   1b718:	ab16      	add	r3, sp, #88	; 0x58
   1b71a:	7fdb      	ldrb	r3, [r3, #31]
   1b71c:	4698      	mov	r8, r3
   1b71e:	2300      	movs	r3, #0
   1b720:	469a      	mov	sl, r3
   1b722:	f7ff f8fc 	bl	1a91e <_vfprintf_r+0x2ea>
   1b726:	46cb      	mov	fp, r9
   1b728:	46a1      	mov	r9, r4
   1b72a:	0014      	movs	r4, r2
   1b72c:	e637      	b.n	1b39e <_vfprintf_r+0xd6a>
   1b72e:	464b      	mov	r3, r9
   1b730:	6d98      	ldr	r0, [r3, #88]	; 0x58
   1b732:	f002 f86f 	bl	1d814 <__retarget_lock_release_recursive>
   1b736:	2301      	movs	r3, #1
   1b738:	425b      	negs	r3, r3
   1b73a:	930a      	str	r3, [sp, #40]	; 0x28
   1b73c:	f7ff f82b 	bl	1a796 <_vfprintf_r+0x162>
   1b740:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1b742:	07d2      	lsls	r2, r2, #31
   1b744:	d400      	bmi.n	1b748 <_vfprintf_r+0x1114>
   1b746:	e68f      	b.n	1b468 <_vfprintf_r+0xe34>
   1b748:	e680      	b.n	1b44c <_vfprintf_r+0xe18>
   1b74a:	3608      	adds	r6, #8
   1b74c:	e679      	b.n	1b442 <_vfprintf_r+0xe0e>
   1b74e:	68bc      	ldr	r4, [r7, #8]
   1b750:	f7ff fb73 	bl	1ae3a <_vfprintf_r+0x806>
   1b754:	003a      	movs	r2, r7
   1b756:	4659      	mov	r1, fp
   1b758:	9806      	ldr	r0, [sp, #24]
   1b75a:	f002 feab 	bl	1e4b4 <__sprint_r>
   1b75e:	2800      	cmp	r0, #0
   1b760:	d000      	beq.n	1b764 <_vfprintf_r+0x1130>
   1b762:	e4f7      	b.n	1b154 <_vfprintf_r+0xb20>
   1b764:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   1b766:	68bc      	ldr	r4, [r7, #8]
   1b768:	ae32      	add	r6, sp, #200	; 0xc8
   1b76a:	e67d      	b.n	1b468 <_vfprintf_r+0xe34>
   1b76c:	2320      	movs	r3, #32
   1b76e:	9a12      	ldr	r2, [sp, #72]	; 0x48
   1b770:	439a      	bics	r2, r3
   1b772:	3b1a      	subs	r3, #26
   1b774:	920e      	str	r2, [sp, #56]	; 0x38
   1b776:	469a      	mov	sl, r3
   1b778:	e75f      	b.n	1b63a <_vfprintf_r+0x1006>
   1b77a:	232d      	movs	r3, #45	; 0x2d
   1b77c:	aa16      	add	r2, sp, #88	; 0x58
   1b77e:	77d3      	strb	r3, [r2, #31]
   1b780:	4698      	mov	r8, r3
   1b782:	f7ff faa8 	bl	1acd6 <_vfprintf_r+0x6a2>
   1b786:	003a      	movs	r2, r7
   1b788:	4659      	mov	r1, fp
   1b78a:	9806      	ldr	r0, [sp, #24]
   1b78c:	f002 fe92 	bl	1e4b4 <__sprint_r>
   1b790:	2800      	cmp	r0, #0
   1b792:	d000      	beq.n	1b796 <_vfprintf_r+0x1162>
   1b794:	e4de      	b.n	1b154 <_vfprintf_r+0xb20>
   1b796:	ae32      	add	r6, sp, #200	; 0xc8
   1b798:	e419      	b.n	1afce <_vfprintf_r+0x99a>
   1b79a:	4be3      	ldr	r3, [pc, #908]	; (1bb28 <_vfprintf_r+0x14f4>)
   1b79c:	3401      	adds	r4, #1
   1b79e:	6033      	str	r3, [r6, #0]
   1b7a0:	2301      	movs	r3, #1
   1b7a2:	6073      	str	r3, [r6, #4]
   1b7a4:	687b      	ldr	r3, [r7, #4]
   1b7a6:	60bc      	str	r4, [r7, #8]
   1b7a8:	3301      	adds	r3, #1
   1b7aa:	607b      	str	r3, [r7, #4]
   1b7ac:	2b07      	cmp	r3, #7
   1b7ae:	dd00      	ble.n	1b7b2 <_vfprintf_r+0x117e>
   1b7b0:	e155      	b.n	1ba5e <_vfprintf_r+0x142a>
   1b7b2:	3608      	adds	r6, #8
   1b7b4:	2800      	cmp	r0, #0
   1b7b6:	d107      	bne.n	1b7c8 <_vfprintf_r+0x1194>
   1b7b8:	9b14      	ldr	r3, [sp, #80]	; 0x50
   1b7ba:	2b00      	cmp	r3, #0
   1b7bc:	d104      	bne.n	1b7c8 <_vfprintf_r+0x1194>
   1b7be:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1b7c0:	07db      	lsls	r3, r3, #31
   1b7c2:	d401      	bmi.n	1b7c8 <_vfprintf_r+0x1194>
   1b7c4:	f7ff fb39 	bl	1ae3a <_vfprintf_r+0x806>
   1b7c8:	9b18      	ldr	r3, [sp, #96]	; 0x60
   1b7ca:	6033      	str	r3, [r6, #0]
   1b7cc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   1b7ce:	1919      	adds	r1, r3, r4
   1b7d0:	6073      	str	r3, [r6, #4]
   1b7d2:	687b      	ldr	r3, [r7, #4]
   1b7d4:	60b9      	str	r1, [r7, #8]
   1b7d6:	3301      	adds	r3, #1
   1b7d8:	607b      	str	r3, [r7, #4]
   1b7da:	2b07      	cmp	r3, #7
   1b7dc:	dd00      	ble.n	1b7e0 <_vfprintf_r+0x11ac>
   1b7de:	e1c4      	b.n	1bb6a <_vfprintf_r+0x1536>
   1b7e0:	0032      	movs	r2, r6
   1b7e2:	3208      	adds	r2, #8
   1b7e4:	2800      	cmp	r0, #0
   1b7e6:	da00      	bge.n	1b7ea <_vfprintf_r+0x11b6>
   1b7e8:	e195      	b.n	1bb16 <_vfprintf_r+0x14e2>
   1b7ea:	9811      	ldr	r0, [sp, #68]	; 0x44
   1b7ec:	3301      	adds	r3, #1
   1b7ee:	6010      	str	r0, [r2, #0]
   1b7f0:	9814      	ldr	r0, [sp, #80]	; 0x50
   1b7f2:	607b      	str	r3, [r7, #4]
   1b7f4:	1844      	adds	r4, r0, r1
   1b7f6:	6050      	str	r0, [r2, #4]
   1b7f8:	60bc      	str	r4, [r7, #8]
   1b7fa:	2b07      	cmp	r3, #7
   1b7fc:	dd01      	ble.n	1b802 <_vfprintf_r+0x11ce>
   1b7fe:	f7ff fbc2 	bl	1af86 <_vfprintf_r+0x952>
   1b802:	3208      	adds	r2, #8
   1b804:	0016      	movs	r6, r2
   1b806:	f7ff fb18 	bl	1ae3a <_vfprintf_r+0x806>
   1b80a:	990f      	ldr	r1, [sp, #60]	; 0x3c
   1b80c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1b80e:	680b      	ldr	r3, [r1, #0]
   1b810:	601a      	str	r2, [r3, #0]
   1b812:	17d2      	asrs	r2, r2, #31
   1b814:	605a      	str	r2, [r3, #4]
   1b816:	000b      	movs	r3, r1
   1b818:	3304      	adds	r3, #4
   1b81a:	930f      	str	r3, [sp, #60]	; 0x3c
   1b81c:	f7fe ff58 	bl	1a6d0 <_vfprintf_r+0x9c>
   1b820:	464b      	mov	r3, r9
   1b822:	9a07      	ldr	r2, [sp, #28]
   1b824:	431c      	orrs	r4, r3
   1b826:	3201      	adds	r2, #1
   1b828:	7813      	ldrb	r3, [r2, #0]
   1b82a:	9207      	str	r2, [sp, #28]
   1b82c:	f7fe ff8b 	bl	1a746 <_vfprintf_r+0x112>
   1b830:	003a      	movs	r2, r7
   1b832:	4659      	mov	r1, fp
   1b834:	9806      	ldr	r0, [sp, #24]
   1b836:	f002 fe3d 	bl	1e4b4 <__sprint_r>
   1b83a:	2800      	cmp	r0, #0
   1b83c:	d000      	beq.n	1b840 <_vfprintf_r+0x120c>
   1b83e:	e489      	b.n	1b154 <_vfprintf_r+0xb20>
   1b840:	68bc      	ldr	r4, [r7, #8]
   1b842:	ae32      	add	r6, sp, #200	; 0xc8
   1b844:	f7ff fbdc 	bl	1b000 <_vfprintf_r+0x9cc>
   1b848:	4bb8      	ldr	r3, [pc, #736]	; (1bb2c <_vfprintf_r+0x14f8>)
   1b84a:	9311      	str	r3, [sp, #68]	; 0x44
   1b84c:	f7ff fa4a 	bl	1ace4 <_vfprintf_r+0x6b0>
   1b850:	9a11      	ldr	r2, [sp, #68]	; 0x44
   1b852:	ab32      	add	r3, sp, #200	; 0xc8
   1b854:	1a9b      	subs	r3, r3, r2
   1b856:	930e      	str	r3, [sp, #56]	; 0x38
   1b858:	f7ff f859 	bl	1a90e <_vfprintf_r+0x2da>
   1b85c:	9811      	ldr	r0, [sp, #68]	; 0x44
   1b85e:	f7fe fd03 	bl	1a268 <strlen>
   1b862:	0002      	movs	r2, r0
   1b864:	900e      	str	r0, [sp, #56]	; 0x38
   1b866:	0003      	movs	r3, r0
   1b868:	f7ff f9a1 	bl	1abae <_vfprintf_r+0x57a>
   1b86c:	232d      	movs	r3, #45	; 0x2d
   1b86e:	aa16      	add	r2, sp, #88	; 0x58
   1b870:	77d3      	strb	r3, [r2, #31]
   1b872:	4698      	mov	r8, r3
   1b874:	2300      	movs	r3, #0
   1b876:	469a      	mov	sl, r3
   1b878:	f7ff f854 	bl	1a924 <_vfprintf_r+0x2f0>
   1b87c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   1b87e:	9313      	str	r3, [sp, #76]	; 0x4c
   1b880:	1cda      	adds	r2, r3, #3
   1b882:	db02      	blt.n	1b88a <_vfprintf_r+0x1256>
   1b884:	459a      	cmp	sl, r3
   1b886:	db00      	blt.n	1b88a <_vfprintf_r+0x1256>
   1b888:	e731      	b.n	1b6ee <_vfprintf_r+0x10ba>
   1b88a:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1b88c:	3b02      	subs	r3, #2
   1b88e:	9312      	str	r3, [sp, #72]	; 0x48
   1b890:	222c      	movs	r2, #44	; 0x2c
   1b892:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   1b894:	2148      	movs	r1, #72	; 0x48
   1b896:	1e5d      	subs	r5, r3, #1
   1b898:	ab16      	add	r3, sp, #88	; 0x58
   1b89a:	189b      	adds	r3, r3, r2
   1b89c:	466a      	mov	r2, sp
   1b89e:	1852      	adds	r2, r2, r1
   1b8a0:	7812      	ldrb	r2, [r2, #0]
   1b8a2:	951f      	str	r5, [sp, #124]	; 0x7c
   1b8a4:	701a      	strb	r2, [r3, #0]
   1b8a6:	2d00      	cmp	r5, #0
   1b8a8:	da00      	bge.n	1b8ac <_vfprintf_r+0x1278>
   1b8aa:	e1cb      	b.n	1bc44 <_vfprintf_r+0x1610>
   1b8ac:	212d      	movs	r1, #45	; 0x2d
   1b8ae:	232b      	movs	r3, #43	; 0x2b
   1b8b0:	aa16      	add	r2, sp, #88	; 0x58
   1b8b2:	1852      	adds	r2, r2, r1
   1b8b4:	7013      	strb	r3, [r2, #0]
   1b8b6:	2d09      	cmp	r5, #9
   1b8b8:	dc00      	bgt.n	1b8bc <_vfprintf_r+0x1288>
   1b8ba:	e16d      	b.n	1bb98 <_vfprintf_r+0x1564>
   1b8bc:	aa16      	add	r2, sp, #88	; 0x58
   1b8be:	233b      	movs	r3, #59	; 0x3b
   1b8c0:	4694      	mov	ip, r2
   1b8c2:	4463      	add	r3, ip
   1b8c4:	469a      	mov	sl, r3
   1b8c6:	46b1      	mov	r9, r6
   1b8c8:	46a0      	mov	r8, r4
   1b8ca:	4656      	mov	r6, sl
   1b8cc:	e000      	b.n	1b8d0 <_vfprintf_r+0x129c>
   1b8ce:	0026      	movs	r6, r4
   1b8d0:	0028      	movs	r0, r5
   1b8d2:	210a      	movs	r1, #10
   1b8d4:	f7fa ffda 	bl	1688c <__aeabi_idivmod>
   1b8d8:	1e74      	subs	r4, r6, #1
   1b8da:	3130      	adds	r1, #48	; 0x30
   1b8dc:	7021      	strb	r1, [r4, #0]
   1b8de:	0028      	movs	r0, r5
   1b8e0:	210a      	movs	r1, #10
   1b8e2:	f7fa feed 	bl	166c0 <__divsi3>
   1b8e6:	0005      	movs	r5, r0
   1b8e8:	2809      	cmp	r0, #9
   1b8ea:	dcf0      	bgt.n	1b8ce <_vfprintf_r+0x129a>
   1b8ec:	0023      	movs	r3, r4
   1b8ee:	4644      	mov	r4, r8
   1b8f0:	46b0      	mov	r8, r6
   1b8f2:	464e      	mov	r6, r9
   1b8f4:	4699      	mov	r9, r3
   1b8f6:	0003      	movs	r3, r0
   1b8f8:	3330      	adds	r3, #48	; 0x30
   1b8fa:	b2d8      	uxtb	r0, r3
   1b8fc:	4643      	mov	r3, r8
   1b8fe:	3b02      	subs	r3, #2
   1b900:	7018      	strb	r0, [r3, #0]
   1b902:	459a      	cmp	sl, r3
   1b904:	d800      	bhi.n	1b908 <_vfprintf_r+0x12d4>
   1b906:	e1f6      	b.n	1bcf6 <_vfprintf_r+0x16c2>
   1b908:	4642      	mov	r2, r8
   1b90a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   1b90c:	4645      	mov	r5, r8
   1b90e:	1a99      	subs	r1, r3, r2
   1b910:	2301      	movs	r3, #1
   1b912:	3107      	adds	r1, #7
   1b914:	425b      	negs	r3, r3
   1b916:	e001      	b.n	1b91c <_vfprintf_r+0x12e8>
   1b918:	5ce8      	ldrb	r0, [r5, r3]
   1b91a:	3301      	adds	r3, #1
   1b91c:	aa21      	add	r2, sp, #132	; 0x84
   1b91e:	18d2      	adds	r2, r2, r3
   1b920:	70d0      	strb	r0, [r2, #3]
   1b922:	428b      	cmp	r3, r1
   1b924:	d1f8      	bne.n	1b918 <_vfprintf_r+0x12e4>
   1b926:	a916      	add	r1, sp, #88	; 0x58
   1b928:	468c      	mov	ip, r1
   1b92a:	222e      	movs	r2, #46	; 0x2e
   1b92c:	464b      	mov	r3, r9
   1b92e:	4462      	add	r2, ip
   1b930:	4694      	mov	ip, r2
   1b932:	1afb      	subs	r3, r7, r3
   1b934:	4463      	add	r3, ip
   1b936:	aa21      	add	r2, sp, #132	; 0x84
   1b938:	9914      	ldr	r1, [sp, #80]	; 0x50
   1b93a:	1a9b      	subs	r3, r3, r2
   1b93c:	469c      	mov	ip, r3
   1b93e:	000a      	movs	r2, r1
   1b940:	4462      	add	r2, ip
   1b942:	931a      	str	r3, [sp, #104]	; 0x68
   1b944:	920e      	str	r2, [sp, #56]	; 0x38
   1b946:	2901      	cmp	r1, #1
   1b948:	dc00      	bgt.n	1b94c <_vfprintf_r+0x1318>
   1b94a:	e170      	b.n	1bc2e <_vfprintf_r+0x15fa>
   1b94c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   1b94e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1b950:	4694      	mov	ip, r2
   1b952:	4463      	add	r3, ip
   1b954:	001a      	movs	r2, r3
   1b956:	930e      	str	r3, [sp, #56]	; 0x38
   1b958:	43db      	mvns	r3, r3
   1b95a:	17db      	asrs	r3, r3, #31
   1b95c:	401a      	ands	r2, r3
   1b95e:	2300      	movs	r3, #0
   1b960:	9208      	str	r2, [sp, #32]
   1b962:	9313      	str	r3, [sp, #76]	; 0x4c
   1b964:	e6d4      	b.n	1b710 <_vfprintf_r+0x10dc>
   1b966:	003a      	movs	r2, r7
   1b968:	4659      	mov	r1, fp
   1b96a:	9806      	ldr	r0, [sp, #24]
   1b96c:	f002 fda2 	bl	1e4b4 <__sprint_r>
   1b970:	2800      	cmp	r0, #0
   1b972:	d001      	beq.n	1b978 <_vfprintf_r+0x1344>
   1b974:	f7ff fbee 	bl	1b154 <_vfprintf_r+0xb20>
   1b978:	68bc      	ldr	r4, [r7, #8]
   1b97a:	ae32      	add	r6, sp, #200	; 0xc8
   1b97c:	e46a      	b.n	1b254 <_vfprintf_r+0xc20>
   1b97e:	4653      	mov	r3, sl
   1b980:	2b00      	cmp	r3, #0
   1b982:	d000      	beq.n	1b986 <_vfprintf_r+0x1352>
   1b984:	e659      	b.n	1b63a <_vfprintf_r+0x1006>
   1b986:	3301      	adds	r3, #1
   1b988:	469a      	mov	sl, r3
   1b98a:	e656      	b.n	1b63a <_vfprintf_r+0x1006>
   1b98c:	4653      	mov	r3, sl
   1b98e:	9308      	str	r3, [sp, #32]
   1b990:	2b06      	cmp	r3, #6
   1b992:	d901      	bls.n	1b998 <_vfprintf_r+0x1364>
   1b994:	2306      	movs	r3, #6
   1b996:	9308      	str	r3, [sp, #32]
   1b998:	9b08      	ldr	r3, [sp, #32]
   1b99a:	950f      	str	r5, [sp, #60]	; 0x3c
   1b99c:	930e      	str	r3, [sp, #56]	; 0x38
   1b99e:	2300      	movs	r3, #0
   1b9a0:	4698      	mov	r8, r3
   1b9a2:	469a      	mov	sl, r3
   1b9a4:	9313      	str	r3, [sp, #76]	; 0x4c
   1b9a6:	4b62      	ldr	r3, [pc, #392]	; (1bb30 <_vfprintf_r+0x14fc>)
   1b9a8:	9409      	str	r4, [sp, #36]	; 0x24
   1b9aa:	9311      	str	r3, [sp, #68]	; 0x44
   1b9ac:	f7fe ffbd 	bl	1a92a <_vfprintf_r+0x2f6>
   1b9b0:	003a      	movs	r2, r7
   1b9b2:	4659      	mov	r1, fp
   1b9b4:	9806      	ldr	r0, [sp, #24]
   1b9b6:	f002 fd7d 	bl	1e4b4 <__sprint_r>
   1b9ba:	2800      	cmp	r0, #0
   1b9bc:	d001      	beq.n	1b9c2 <_vfprintf_r+0x138e>
   1b9be:	f7ff fbc9 	bl	1b154 <_vfprintf_r+0xb20>
   1b9c2:	9b14      	ldr	r3, [sp, #80]	; 0x50
   1b9c4:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   1b9c6:	68bc      	ldr	r4, [r7, #8]
   1b9c8:	1a9b      	subs	r3, r3, r2
   1b9ca:	ae32      	add	r6, sp, #200	; 0xc8
   1b9cc:	e567      	b.n	1b49e <_vfprintf_r+0xe6a>
   1b9ce:	ab23      	add	r3, sp, #140	; 0x8c
   1b9d0:	931b      	str	r3, [sp, #108]	; 0x6c
   1b9d2:	9304      	str	r3, [sp, #16]
   1b9d4:	ab20      	add	r3, sp, #128	; 0x80
   1b9d6:	9303      	str	r3, [sp, #12]
   1b9d8:	ab1f      	add	r3, sp, #124	; 0x7c
   1b9da:	9302      	str	r3, [sp, #8]
   1b9dc:	4653      	mov	r3, sl
   1b9de:	9301      	str	r3, [sp, #4]
   1b9e0:	2303      	movs	r3, #3
   1b9e2:	464a      	mov	r2, r9
   1b9e4:	9300      	str	r3, [sp, #0]
   1b9e6:	9806      	ldr	r0, [sp, #24]
   1b9e8:	9b08      	ldr	r3, [sp, #32]
   1b9ea:	f000 fb09 	bl	1c000 <_dtoa_r>
   1b9ee:	0003      	movs	r3, r0
   1b9f0:	4453      	add	r3, sl
   1b9f2:	4698      	mov	r8, r3
   1b9f4:	4655      	mov	r5, sl
   1b9f6:	9011      	str	r0, [sp, #68]	; 0x44
   1b9f8:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1b9fa:	781b      	ldrb	r3, [r3, #0]
   1b9fc:	2b30      	cmp	r3, #48	; 0x30
   1b9fe:	d002      	beq.n	1ba06 <_vfprintf_r+0x13d2>
   1ba00:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   1ba02:	4498      	add	r8, r3
   1ba04:	e64e      	b.n	1b6a4 <_vfprintf_r+0x1070>
   1ba06:	2200      	movs	r2, #0
   1ba08:	2300      	movs	r3, #0
   1ba0a:	4648      	mov	r0, r9
   1ba0c:	9908      	ldr	r1, [sp, #32]
   1ba0e:	f7fa ff53 	bl	168b8 <__aeabi_dcmpeq>
   1ba12:	2800      	cmp	r0, #0
   1ba14:	d1f4      	bne.n	1ba00 <_vfprintf_r+0x13cc>
   1ba16:	2301      	movs	r3, #1
   1ba18:	1b5b      	subs	r3, r3, r5
   1ba1a:	931f      	str	r3, [sp, #124]	; 0x7c
   1ba1c:	4498      	add	r8, r3
   1ba1e:	e641      	b.n	1b6a4 <_vfprintf_r+0x1070>
   1ba20:	46c1      	mov	r9, r8
   1ba22:	f7ff fb1f 	bl	1b064 <_vfprintf_r+0xa30>
   1ba26:	2280      	movs	r2, #128	; 0x80
   1ba28:	0612      	lsls	r2, r2, #24
   1ba2a:	4694      	mov	ip, r2
   1ba2c:	9b16      	ldr	r3, [sp, #88]	; 0x58
   1ba2e:	4699      	mov	r9, r3
   1ba30:	9b15      	ldr	r3, [sp, #84]	; 0x54
   1ba32:	4463      	add	r3, ip
   1ba34:	9308      	str	r3, [sp, #32]
   1ba36:	232d      	movs	r3, #45	; 0x2d
   1ba38:	9310      	str	r3, [sp, #64]	; 0x40
   1ba3a:	e60b      	b.n	1b654 <_vfprintf_r+0x1020>
   1ba3c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   1ba3e:	9b14      	ldr	r3, [sp, #80]	; 0x50
   1ba40:	4694      	mov	ip, r2
   1ba42:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   1ba44:	4463      	add	r3, ip
   1ba46:	930e      	str	r3, [sp, #56]	; 0x38
   1ba48:	2a00      	cmp	r2, #0
   1ba4a:	dc00      	bgt.n	1ba4e <_vfprintf_r+0x141a>
   1ba4c:	e0e3      	b.n	1bc16 <_vfprintf_r+0x15e2>
   1ba4e:	001a      	movs	r2, r3
   1ba50:	43db      	mvns	r3, r3
   1ba52:	17db      	asrs	r3, r3, #31
   1ba54:	401a      	ands	r2, r3
   1ba56:	2367      	movs	r3, #103	; 0x67
   1ba58:	9208      	str	r2, [sp, #32]
   1ba5a:	9312      	str	r3, [sp, #72]	; 0x48
   1ba5c:	e658      	b.n	1b710 <_vfprintf_r+0x10dc>
   1ba5e:	003a      	movs	r2, r7
   1ba60:	4659      	mov	r1, fp
   1ba62:	9806      	ldr	r0, [sp, #24]
   1ba64:	f002 fd26 	bl	1e4b4 <__sprint_r>
   1ba68:	2800      	cmp	r0, #0
   1ba6a:	d001      	beq.n	1ba70 <_vfprintf_r+0x143c>
   1ba6c:	f7ff fb72 	bl	1b154 <_vfprintf_r+0xb20>
   1ba70:	981f      	ldr	r0, [sp, #124]	; 0x7c
   1ba72:	68bc      	ldr	r4, [r7, #8]
   1ba74:	ae32      	add	r6, sp, #200	; 0xc8
   1ba76:	e69d      	b.n	1b7b4 <_vfprintf_r+0x1180>
   1ba78:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   1ba7a:	9313      	str	r3, [sp, #76]	; 0x4c
   1ba7c:	2b00      	cmp	r3, #0
   1ba7e:	dc00      	bgt.n	1ba82 <_vfprintf_r+0x144e>
   1ba80:	e0f2      	b.n	1bc68 <_vfprintf_r+0x1634>
   1ba82:	4652      	mov	r2, sl
   1ba84:	2a00      	cmp	r2, #0
   1ba86:	d000      	beq.n	1ba8a <_vfprintf_r+0x1456>
   1ba88:	e0a0      	b.n	1bbcc <_vfprintf_r+0x1598>
   1ba8a:	07e2      	lsls	r2, r4, #31
   1ba8c:	d500      	bpl.n	1ba90 <_vfprintf_r+0x145c>
   1ba8e:	e09d      	b.n	1bbcc <_vfprintf_r+0x1598>
   1ba90:	9308      	str	r3, [sp, #32]
   1ba92:	930e      	str	r3, [sp, #56]	; 0x38
   1ba94:	e63c      	b.n	1b710 <_vfprintf_r+0x10dc>
   1ba96:	ab16      	add	r3, sp, #88	; 0x58
   1ba98:	7fdb      	ldrb	r3, [r3, #31]
   1ba9a:	950f      	str	r5, [sp, #60]	; 0x3c
   1ba9c:	4698      	mov	r8, r3
   1ba9e:	4653      	mov	r3, sl
   1baa0:	9308      	str	r3, [sp, #32]
   1baa2:	930e      	str	r3, [sp, #56]	; 0x38
   1baa4:	2300      	movs	r3, #0
   1baa6:	9409      	str	r4, [sp, #36]	; 0x24
   1baa8:	469a      	mov	sl, r3
   1baaa:	9313      	str	r3, [sp, #76]	; 0x4c
   1baac:	f7fe ff37 	bl	1a91e <_vfprintf_r+0x2ea>
   1bab0:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1bab2:	4698      	mov	r8, r3
   1bab4:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1bab6:	44a8      	add	r8, r5
   1bab8:	2b47      	cmp	r3, #71	; 0x47
   1baba:	d000      	beq.n	1babe <_vfprintf_r+0x148a>
   1babc:	e5f2      	b.n	1b6a4 <_vfprintf_r+0x1070>
   1babe:	07e3      	lsls	r3, r4, #31
   1bac0:	d400      	bmi.n	1bac4 <_vfprintf_r+0x1490>
   1bac2:	e0dc      	b.n	1bc7e <_vfprintf_r+0x164a>
   1bac4:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1bac6:	4698      	mov	r8, r3
   1bac8:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1baca:	44a8      	add	r8, r5
   1bacc:	2b46      	cmp	r3, #70	; 0x46
   1bace:	d093      	beq.n	1b9f8 <_vfprintf_r+0x13c4>
   1bad0:	e5e8      	b.n	1b6a4 <_vfprintf_r+0x1070>
   1bad2:	ab23      	add	r3, sp, #140	; 0x8c
   1bad4:	931b      	str	r3, [sp, #108]	; 0x6c
   1bad6:	9304      	str	r3, [sp, #16]
   1bad8:	ab20      	add	r3, sp, #128	; 0x80
   1bada:	9303      	str	r3, [sp, #12]
   1badc:	ab1f      	add	r3, sp, #124	; 0x7c
   1bade:	9302      	str	r3, [sp, #8]
   1bae0:	4653      	mov	r3, sl
   1bae2:	9301      	str	r3, [sp, #4]
   1bae4:	2303      	movs	r3, #3
   1bae6:	464a      	mov	r2, r9
   1bae8:	9300      	str	r3, [sp, #0]
   1baea:	9806      	ldr	r0, [sp, #24]
   1baec:	9b08      	ldr	r3, [sp, #32]
   1baee:	f000 fa87 	bl	1c000 <_dtoa_r>
   1baf2:	4655      	mov	r5, sl
   1baf4:	9011      	str	r0, [sp, #68]	; 0x44
   1baf6:	e7e5      	b.n	1bac4 <_vfprintf_r+0x1490>
   1baf8:	003a      	movs	r2, r7
   1bafa:	4659      	mov	r1, fp
   1bafc:	9806      	ldr	r0, [sp, #24]
   1bafe:	f002 fcd9 	bl	1e4b4 <__sprint_r>
   1bb02:	2800      	cmp	r0, #0
   1bb04:	d101      	bne.n	1bb0a <_vfprintf_r+0x14d6>
   1bb06:	f7ff faab 	bl	1b060 <_vfprintf_r+0xa2c>
   1bb0a:	f7ff faab 	bl	1b064 <_vfprintf_r+0xa30>
   1bb0e:	4642      	mov	r2, r8
   1bb10:	9207      	str	r2, [sp, #28]
   1bb12:	f7fe fe1b 	bl	1a74c <_vfprintf_r+0x118>
   1bb16:	4244      	negs	r4, r0
   1bb18:	3010      	adds	r0, #16
   1bb1a:	db00      	blt.n	1bb1e <_vfprintf_r+0x14ea>
   1bb1c:	e0d8      	b.n	1bcd0 <_vfprintf_r+0x169c>
   1bb1e:	4805      	ldr	r0, [pc, #20]	; (1bb34 <_vfprintf_r+0x1500>)
   1bb20:	2610      	movs	r6, #16
   1bb22:	0005      	movs	r5, r0
   1bb24:	e00c      	b.n	1bb40 <_vfprintf_r+0x150c>
   1bb26:	46c0      	nop			; (mov r8, r8)
   1bb28:	0001f918 	.word	0x0001f918
   1bb2c:	0002066c 	.word	0x0002066c
   1bb30:	000206a0 	.word	0x000206a0
   1bb34:	000206b8 	.word	0x000206b8
   1bb38:	3208      	adds	r2, #8
   1bb3a:	3c10      	subs	r4, #16
   1bb3c:	2c10      	cmp	r4, #16
   1bb3e:	dd51      	ble.n	1bbe4 <_vfprintf_r+0x15b0>
   1bb40:	3110      	adds	r1, #16
   1bb42:	3301      	adds	r3, #1
   1bb44:	6015      	str	r5, [r2, #0]
   1bb46:	6056      	str	r6, [r2, #4]
   1bb48:	60b9      	str	r1, [r7, #8]
   1bb4a:	607b      	str	r3, [r7, #4]
   1bb4c:	2b07      	cmp	r3, #7
   1bb4e:	ddf3      	ble.n	1bb38 <_vfprintf_r+0x1504>
   1bb50:	003a      	movs	r2, r7
   1bb52:	4659      	mov	r1, fp
   1bb54:	9806      	ldr	r0, [sp, #24]
   1bb56:	f002 fcad 	bl	1e4b4 <__sprint_r>
   1bb5a:	2800      	cmp	r0, #0
   1bb5c:	d001      	beq.n	1bb62 <_vfprintf_r+0x152e>
   1bb5e:	f7ff faf9 	bl	1b154 <_vfprintf_r+0xb20>
   1bb62:	68b9      	ldr	r1, [r7, #8]
   1bb64:	687b      	ldr	r3, [r7, #4]
   1bb66:	aa32      	add	r2, sp, #200	; 0xc8
   1bb68:	e7e7      	b.n	1bb3a <_vfprintf_r+0x1506>
   1bb6a:	003a      	movs	r2, r7
   1bb6c:	4659      	mov	r1, fp
   1bb6e:	9806      	ldr	r0, [sp, #24]
   1bb70:	f002 fca0 	bl	1e4b4 <__sprint_r>
   1bb74:	2800      	cmp	r0, #0
   1bb76:	d001      	beq.n	1bb7c <_vfprintf_r+0x1548>
   1bb78:	f7ff faec 	bl	1b154 <_vfprintf_r+0xb20>
   1bb7c:	981f      	ldr	r0, [sp, #124]	; 0x7c
   1bb7e:	68b9      	ldr	r1, [r7, #8]
   1bb80:	687b      	ldr	r3, [r7, #4]
   1bb82:	aa32      	add	r2, sp, #200	; 0xc8
   1bb84:	e62e      	b.n	1b7e4 <_vfprintf_r+0x11b0>
   1bb86:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   1bb88:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   1bb8a:	4694      	mov	ip, r2
   1bb8c:	4463      	add	r3, ip
   1bb8e:	001a      	movs	r2, r3
   1bb90:	930e      	str	r3, [sp, #56]	; 0x38
   1bb92:	e75d      	b.n	1ba50 <_vfprintf_r+0x141c>
   1bb94:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   1bb96:	e599      	b.n	1b6cc <_vfprintf_r+0x1098>
   1bb98:	212e      	movs	r1, #46	; 0x2e
   1bb9a:	2330      	movs	r3, #48	; 0x30
   1bb9c:	aa16      	add	r2, sp, #88	; 0x58
   1bb9e:	1852      	adds	r2, r2, r1
   1bba0:	7013      	strb	r3, [r2, #0]
   1bba2:	002b      	movs	r3, r5
   1bba4:	aa16      	add	r2, sp, #88	; 0x58
   1bba6:	3101      	adds	r1, #1
   1bba8:	3330      	adds	r3, #48	; 0x30
   1bbaa:	1852      	adds	r2, r2, r1
   1bbac:	7013      	strb	r3, [r2, #0]
   1bbae:	ab22      	add	r3, sp, #136	; 0x88
   1bbb0:	e6c1      	b.n	1b936 <_vfprintf_r+0x1302>
   1bbb2:	9b15      	ldr	r3, [sp, #84]	; 0x54
   1bbb4:	2b00      	cmp	r3, #0
   1bbb6:	db52      	blt.n	1bc5e <_vfprintf_r+0x162a>
   1bbb8:	ab16      	add	r3, sp, #88	; 0x58
   1bbba:	7fdb      	ldrb	r3, [r3, #31]
   1bbbc:	4698      	mov	r8, r3
   1bbbe:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1bbc0:	2b47      	cmp	r3, #71	; 0x47
   1bbc2:	dc48      	bgt.n	1bc56 <_vfprintf_r+0x1622>
   1bbc4:	4b4e      	ldr	r3, [pc, #312]	; (1bd00 <_vfprintf_r+0x16cc>)
   1bbc6:	9311      	str	r3, [sp, #68]	; 0x44
   1bbc8:	f7ff f88c 	bl	1ace4 <_vfprintf_r+0x6b0>
   1bbcc:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   1bbce:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   1bbd0:	4694      	mov	ip, r2
   1bbd2:	4463      	add	r3, ip
   1bbd4:	4453      	add	r3, sl
   1bbd6:	001a      	movs	r2, r3
   1bbd8:	930e      	str	r3, [sp, #56]	; 0x38
   1bbda:	43db      	mvns	r3, r3
   1bbdc:	17db      	asrs	r3, r3, #31
   1bbde:	401a      	ands	r2, r3
   1bbe0:	9208      	str	r2, [sp, #32]
   1bbe2:	e595      	b.n	1b710 <_vfprintf_r+0x10dc>
   1bbe4:	46a9      	mov	r9, r5
   1bbe6:	4648      	mov	r0, r9
   1bbe8:	1909      	adds	r1, r1, r4
   1bbea:	3301      	adds	r3, #1
   1bbec:	6010      	str	r0, [r2, #0]
   1bbee:	6054      	str	r4, [r2, #4]
   1bbf0:	60b9      	str	r1, [r7, #8]
   1bbf2:	3208      	adds	r2, #8
   1bbf4:	607b      	str	r3, [r7, #4]
   1bbf6:	2b07      	cmp	r3, #7
   1bbf8:	dc00      	bgt.n	1bbfc <_vfprintf_r+0x15c8>
   1bbfa:	e5f6      	b.n	1b7ea <_vfprintf_r+0x11b6>
   1bbfc:	003a      	movs	r2, r7
   1bbfe:	4659      	mov	r1, fp
   1bc00:	9806      	ldr	r0, [sp, #24]
   1bc02:	f002 fc57 	bl	1e4b4 <__sprint_r>
   1bc06:	2800      	cmp	r0, #0
   1bc08:	d001      	beq.n	1bc0e <_vfprintf_r+0x15da>
   1bc0a:	f7ff faa3 	bl	1b154 <_vfprintf_r+0xb20>
   1bc0e:	68b9      	ldr	r1, [r7, #8]
   1bc10:	687b      	ldr	r3, [r7, #4]
   1bc12:	aa32      	add	r2, sp, #200	; 0xc8
   1bc14:	e5e9      	b.n	1b7ea <_vfprintf_r+0x11b6>
   1bc16:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1bc18:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   1bc1a:	1a98      	subs	r0, r3, r2
   1bc1c:	1c43      	adds	r3, r0, #1
   1bc1e:	001a      	movs	r2, r3
   1bc20:	930e      	str	r3, [sp, #56]	; 0x38
   1bc22:	e715      	b.n	1ba50 <_vfprintf_r+0x141c>
   1bc24:	4a37      	ldr	r2, [pc, #220]	; (1bd04 <_vfprintf_r+0x16d0>)
   1bc26:	687b      	ldr	r3, [r7, #4]
   1bc28:	4691      	mov	r9, r2
   1bc2a:	f7ff fbf5 	bl	1b418 <_vfprintf_r+0xde4>
   1bc2e:	2301      	movs	r3, #1
   1bc30:	4023      	ands	r3, r4
   1bc32:	9313      	str	r3, [sp, #76]	; 0x4c
   1bc34:	d000      	beq.n	1bc38 <_vfprintf_r+0x1604>
   1bc36:	e689      	b.n	1b94c <_vfprintf_r+0x1318>
   1bc38:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   1bc3a:	43d3      	mvns	r3, r2
   1bc3c:	17db      	asrs	r3, r3, #31
   1bc3e:	401a      	ands	r2, r3
   1bc40:	9208      	str	r2, [sp, #32]
   1bc42:	e565      	b.n	1b710 <_vfprintf_r+0x10dc>
   1bc44:	2301      	movs	r3, #1
   1bc46:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   1bc48:	391b      	subs	r1, #27
   1bc4a:	1a9d      	subs	r5, r3, r2
   1bc4c:	aa16      	add	r2, sp, #88	; 0x58
   1bc4e:	332c      	adds	r3, #44	; 0x2c
   1bc50:	1852      	adds	r2, r2, r1
   1bc52:	7013      	strb	r3, [r2, #0]
   1bc54:	e62f      	b.n	1b8b6 <_vfprintf_r+0x1282>
   1bc56:	4b2c      	ldr	r3, [pc, #176]	; (1bd08 <_vfprintf_r+0x16d4>)
   1bc58:	9311      	str	r3, [sp, #68]	; 0x44
   1bc5a:	f7ff f843 	bl	1ace4 <_vfprintf_r+0x6b0>
   1bc5e:	232d      	movs	r3, #45	; 0x2d
   1bc60:	aa16      	add	r2, sp, #88	; 0x58
   1bc62:	77d3      	strb	r3, [r2, #31]
   1bc64:	4698      	mov	r8, r3
   1bc66:	e7aa      	b.n	1bbbe <_vfprintf_r+0x158a>
   1bc68:	4653      	mov	r3, sl
   1bc6a:	2b00      	cmp	r3, #0
   1bc6c:	d101      	bne.n	1bc72 <_vfprintf_r+0x163e>
   1bc6e:	07e3      	lsls	r3, r4, #31
   1bc70:	d503      	bpl.n	1bc7a <_vfprintf_r+0x1646>
   1bc72:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   1bc74:	1c58      	adds	r0, r3, #1
   1bc76:	0003      	movs	r3, r0
   1bc78:	e7ac      	b.n	1bbd4 <_vfprintf_r+0x15a0>
   1bc7a:	2301      	movs	r3, #1
   1bc7c:	e708      	b.n	1ba90 <_vfprintf_r+0x145c>
   1bc7e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   1bc80:	9a11      	ldr	r2, [sp, #68]	; 0x44
   1bc82:	1a9b      	subs	r3, r3, r2
   1bc84:	9314      	str	r3, [sp, #80]	; 0x50
   1bc86:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1bc88:	2b47      	cmp	r3, #71	; 0x47
   1bc8a:	d100      	bne.n	1bc8e <_vfprintf_r+0x165a>
   1bc8c:	e5f6      	b.n	1b87c <_vfprintf_r+0x1248>
   1bc8e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   1bc90:	9313      	str	r3, [sp, #76]	; 0x4c
   1bc92:	e5fd      	b.n	1b890 <_vfprintf_r+0x125c>
   1bc94:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1bc96:	1d1d      	adds	r5, r3, #4
   1bc98:	681b      	ldr	r3, [r3, #0]
   1bc9a:	46a8      	mov	r8, r5
   1bc9c:	469a      	mov	sl, r3
   1bc9e:	2b00      	cmp	r3, #0
   1bca0:	db0a      	blt.n	1bcb8 <_vfprintf_r+0x1684>
   1bca2:	4645      	mov	r5, r8
   1bca4:	9b07      	ldr	r3, [sp, #28]
   1bca6:	950f      	str	r5, [sp, #60]	; 0x3c
   1bca8:	785b      	ldrb	r3, [r3, #1]
   1bcaa:	9207      	str	r2, [sp, #28]
   1bcac:	f7fe fd4b 	bl	1a746 <_vfprintf_r+0x112>
   1bcb0:	ab16      	add	r3, sp, #88	; 0x58
   1bcb2:	77d8      	strb	r0, [r3, #31]
   1bcb4:	f7ff f830 	bl	1ad18 <_vfprintf_r+0x6e4>
   1bcb8:	2301      	movs	r3, #1
   1bcba:	425b      	negs	r3, r3
   1bcbc:	469a      	mov	sl, r3
   1bcbe:	e7f0      	b.n	1bca2 <_vfprintf_r+0x166e>
   1bcc0:	ab16      	add	r3, sp, #88	; 0x58
   1bcc2:	77d8      	strb	r0, [r3, #31]
   1bcc4:	f7fe ff27 	bl	1ab16 <_vfprintf_r+0x4e2>
   1bcc8:	ab16      	add	r3, sp, #88	; 0x58
   1bcca:	77d8      	strb	r0, [r3, #31]
   1bccc:	f7fe fdce 	bl	1a86c <_vfprintf_r+0x238>
   1bcd0:	480c      	ldr	r0, [pc, #48]	; (1bd04 <_vfprintf_r+0x16d0>)
   1bcd2:	4681      	mov	r9, r0
   1bcd4:	e787      	b.n	1bbe6 <_vfprintf_r+0x15b2>
   1bcd6:	ab16      	add	r3, sp, #88	; 0x58
   1bcd8:	77d8      	strb	r0, [r3, #31]
   1bcda:	f7ff f829 	bl	1ad30 <_vfprintf_r+0x6fc>
   1bcde:	ab16      	add	r3, sp, #88	; 0x58
   1bce0:	77d8      	strb	r0, [r3, #31]
   1bce2:	f7fe ffc3 	bl	1ac6c <_vfprintf_r+0x638>
   1bce6:	ab16      	add	r3, sp, #88	; 0x58
   1bce8:	77d8      	strb	r0, [r3, #31]
   1bcea:	f7fe ffa5 	bl	1ac38 <_vfprintf_r+0x604>
   1bcee:	ab16      	add	r3, sp, #88	; 0x58
   1bcf0:	77d8      	strb	r0, [r3, #31]
   1bcf2:	f7fe feaf 	bl	1aa54 <_vfprintf_r+0x420>
   1bcf6:	aa16      	add	r2, sp, #88	; 0x58
   1bcf8:	232e      	movs	r3, #46	; 0x2e
   1bcfa:	4694      	mov	ip, r2
   1bcfc:	4463      	add	r3, ip
   1bcfe:	e61a      	b.n	1b936 <_vfprintf_r+0x1302>
   1bd00:	00020670 	.word	0x00020670
   1bd04:	000206b8 	.word	0x000206b8
   1bd08:	00020674 	.word	0x00020674

0001bd0c <__sbprintf>:
   1bd0c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1bd0e:	0015      	movs	r5, r2
   1bd10:	2202      	movs	r2, #2
   1bd12:	4c1e      	ldr	r4, [pc, #120]	; (1bd8c <__sbprintf+0x80>)
   1bd14:	001f      	movs	r7, r3
   1bd16:	898b      	ldrh	r3, [r1, #12]
   1bd18:	44a5      	add	sp, r4
   1bd1a:	4393      	bics	r3, r2
   1bd1c:	466a      	mov	r2, sp
   1bd1e:	8193      	strh	r3, [r2, #12]
   1bd20:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   1bd22:	0006      	movs	r6, r0
   1bd24:	9319      	str	r3, [sp, #100]	; 0x64
   1bd26:	89cb      	ldrh	r3, [r1, #14]
   1bd28:	a816      	add	r0, sp, #88	; 0x58
   1bd2a:	81d3      	strh	r3, [r2, #14]
   1bd2c:	69cb      	ldr	r3, [r1, #28]
   1bd2e:	000c      	movs	r4, r1
   1bd30:	9307      	str	r3, [sp, #28]
   1bd32:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   1bd34:	9309      	str	r3, [sp, #36]	; 0x24
   1bd36:	ab1a      	add	r3, sp, #104	; 0x68
   1bd38:	9300      	str	r3, [sp, #0]
   1bd3a:	9304      	str	r3, [sp, #16]
   1bd3c:	2380      	movs	r3, #128	; 0x80
   1bd3e:	00db      	lsls	r3, r3, #3
   1bd40:	9302      	str	r3, [sp, #8]
   1bd42:	9305      	str	r3, [sp, #20]
   1bd44:	2300      	movs	r3, #0
   1bd46:	9306      	str	r3, [sp, #24]
   1bd48:	f001 fd5e 	bl	1d808 <__retarget_lock_init_recursive>
   1bd4c:	002a      	movs	r2, r5
   1bd4e:	003b      	movs	r3, r7
   1bd50:	4669      	mov	r1, sp
   1bd52:	0030      	movs	r0, r6
   1bd54:	f7fe fc6e 	bl	1a634 <_vfprintf_r>
   1bd58:	1e05      	subs	r5, r0, #0
   1bd5a:	db05      	blt.n	1bd68 <__sbprintf+0x5c>
   1bd5c:	4669      	mov	r1, sp
   1bd5e:	0030      	movs	r0, r6
   1bd60:	f001 f9ba 	bl	1d0d8 <_fflush_r>
   1bd64:	2800      	cmp	r0, #0
   1bd66:	d10e      	bne.n	1bd86 <__sbprintf+0x7a>
   1bd68:	466b      	mov	r3, sp
   1bd6a:	899b      	ldrh	r3, [r3, #12]
   1bd6c:	065b      	lsls	r3, r3, #25
   1bd6e:	d503      	bpl.n	1bd78 <__sbprintf+0x6c>
   1bd70:	2240      	movs	r2, #64	; 0x40
   1bd72:	89a3      	ldrh	r3, [r4, #12]
   1bd74:	4313      	orrs	r3, r2
   1bd76:	81a3      	strh	r3, [r4, #12]
   1bd78:	9816      	ldr	r0, [sp, #88]	; 0x58
   1bd7a:	f001 fd47 	bl	1d80c <__retarget_lock_close_recursive>
   1bd7e:	0028      	movs	r0, r5
   1bd80:	4b03      	ldr	r3, [pc, #12]	; (1bd90 <__sbprintf+0x84>)
   1bd82:	449d      	add	sp, r3
   1bd84:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1bd86:	2501      	movs	r5, #1
   1bd88:	426d      	negs	r5, r5
   1bd8a:	e7ed      	b.n	1bd68 <__sbprintf+0x5c>
   1bd8c:	fffffb94 	.word	0xfffffb94
   1bd90:	0000046c 	.word	0x0000046c

0001bd94 <__ascii_wctomb>:
   1bd94:	2900      	cmp	r1, #0
   1bd96:	d004      	beq.n	1bda2 <__ascii_wctomb+0xe>
   1bd98:	2aff      	cmp	r2, #255	; 0xff
   1bd9a:	d804      	bhi.n	1bda6 <__ascii_wctomb+0x12>
   1bd9c:	2001      	movs	r0, #1
   1bd9e:	700a      	strb	r2, [r1, #0]
   1bda0:	4770      	bx	lr
   1bda2:	2000      	movs	r0, #0
   1bda4:	e7fc      	b.n	1bda0 <__ascii_wctomb+0xc>
   1bda6:	238a      	movs	r3, #138	; 0x8a
   1bda8:	6003      	str	r3, [r0, #0]
   1bdaa:	2001      	movs	r0, #1
   1bdac:	4240      	negs	r0, r0
   1bdae:	e7f7      	b.n	1bda0 <__ascii_wctomb+0xc>

0001bdb0 <__swsetup_r>:
   1bdb0:	4b33      	ldr	r3, [pc, #204]	; (1be80 <__swsetup_r+0xd0>)
   1bdb2:	b570      	push	{r4, r5, r6, lr}
   1bdb4:	0005      	movs	r5, r0
   1bdb6:	6818      	ldr	r0, [r3, #0]
   1bdb8:	000c      	movs	r4, r1
   1bdba:	2800      	cmp	r0, #0
   1bdbc:	d002      	beq.n	1bdc4 <__swsetup_r+0x14>
   1bdbe:	6b83      	ldr	r3, [r0, #56]	; 0x38
   1bdc0:	2b00      	cmp	r3, #0
   1bdc2:	d03c      	beq.n	1be3e <__swsetup_r+0x8e>
   1bdc4:	230c      	movs	r3, #12
   1bdc6:	5ee2      	ldrsh	r2, [r4, r3]
   1bdc8:	b293      	uxth	r3, r2
   1bdca:	0719      	lsls	r1, r3, #28
   1bdcc:	d50d      	bpl.n	1bdea <__swsetup_r+0x3a>
   1bdce:	6921      	ldr	r1, [r4, #16]
   1bdd0:	2900      	cmp	r1, #0
   1bdd2:	d015      	beq.n	1be00 <__swsetup_r+0x50>
   1bdd4:	07da      	lsls	r2, r3, #31
   1bdd6:	d521      	bpl.n	1be1c <__swsetup_r+0x6c>
   1bdd8:	2300      	movs	r3, #0
   1bdda:	60a3      	str	r3, [r4, #8]
   1bddc:	6963      	ldr	r3, [r4, #20]
   1bdde:	2000      	movs	r0, #0
   1bde0:	425b      	negs	r3, r3
   1bde2:	61a3      	str	r3, [r4, #24]
   1bde4:	2900      	cmp	r1, #0
   1bde6:	d021      	beq.n	1be2c <__swsetup_r+0x7c>
   1bde8:	bd70      	pop	{r4, r5, r6, pc}
   1bdea:	06d9      	lsls	r1, r3, #27
   1bdec:	d53f      	bpl.n	1be6e <__swsetup_r+0xbe>
   1bdee:	075b      	lsls	r3, r3, #29
   1bdf0:	d428      	bmi.n	1be44 <__swsetup_r+0x94>
   1bdf2:	6921      	ldr	r1, [r4, #16]
   1bdf4:	2308      	movs	r3, #8
   1bdf6:	4313      	orrs	r3, r2
   1bdf8:	81a3      	strh	r3, [r4, #12]
   1bdfa:	b29b      	uxth	r3, r3
   1bdfc:	2900      	cmp	r1, #0
   1bdfe:	d1e9      	bne.n	1bdd4 <__swsetup_r+0x24>
   1be00:	22a0      	movs	r2, #160	; 0xa0
   1be02:	2080      	movs	r0, #128	; 0x80
   1be04:	0092      	lsls	r2, r2, #2
   1be06:	0080      	lsls	r0, r0, #2
   1be08:	401a      	ands	r2, r3
   1be0a:	4282      	cmp	r2, r0
   1be0c:	d0e2      	beq.n	1bdd4 <__swsetup_r+0x24>
   1be0e:	0021      	movs	r1, r4
   1be10:	0028      	movs	r0, r5
   1be12:	f001 fd31 	bl	1d878 <__smakebuf_r>
   1be16:	89a3      	ldrh	r3, [r4, #12]
   1be18:	6921      	ldr	r1, [r4, #16]
   1be1a:	e7db      	b.n	1bdd4 <__swsetup_r+0x24>
   1be1c:	2200      	movs	r2, #0
   1be1e:	079b      	lsls	r3, r3, #30
   1be20:	d400      	bmi.n	1be24 <__swsetup_r+0x74>
   1be22:	6962      	ldr	r2, [r4, #20]
   1be24:	60a2      	str	r2, [r4, #8]
   1be26:	2000      	movs	r0, #0
   1be28:	2900      	cmp	r1, #0
   1be2a:	d1dd      	bne.n	1bde8 <__swsetup_r+0x38>
   1be2c:	220c      	movs	r2, #12
   1be2e:	5ea3      	ldrsh	r3, [r4, r2]
   1be30:	061a      	lsls	r2, r3, #24
   1be32:	d5d9      	bpl.n	1bde8 <__swsetup_r+0x38>
   1be34:	2240      	movs	r2, #64	; 0x40
   1be36:	4313      	orrs	r3, r2
   1be38:	81a3      	strh	r3, [r4, #12]
   1be3a:	3801      	subs	r0, #1
   1be3c:	e7d4      	b.n	1bde8 <__swsetup_r+0x38>
   1be3e:	f001 f9a5 	bl	1d18c <__sinit>
   1be42:	e7bf      	b.n	1bdc4 <__swsetup_r+0x14>
   1be44:	6b21      	ldr	r1, [r4, #48]	; 0x30
   1be46:	2900      	cmp	r1, #0
   1be48:	d00a      	beq.n	1be60 <__swsetup_r+0xb0>
   1be4a:	0023      	movs	r3, r4
   1be4c:	3340      	adds	r3, #64	; 0x40
   1be4e:	4299      	cmp	r1, r3
   1be50:	d004      	beq.n	1be5c <__swsetup_r+0xac>
   1be52:	0028      	movs	r0, r5
   1be54:	f001 fa44 	bl	1d2e0 <_free_r>
   1be58:	230c      	movs	r3, #12
   1be5a:	5ee2      	ldrsh	r2, [r4, r3]
   1be5c:	2300      	movs	r3, #0
   1be5e:	6323      	str	r3, [r4, #48]	; 0x30
   1be60:	2324      	movs	r3, #36	; 0x24
   1be62:	439a      	bics	r2, r3
   1be64:	2300      	movs	r3, #0
   1be66:	6921      	ldr	r1, [r4, #16]
   1be68:	6063      	str	r3, [r4, #4]
   1be6a:	6021      	str	r1, [r4, #0]
   1be6c:	e7c2      	b.n	1bdf4 <__swsetup_r+0x44>
   1be6e:	2309      	movs	r3, #9
   1be70:	602b      	str	r3, [r5, #0]
   1be72:	2340      	movs	r3, #64	; 0x40
   1be74:	2001      	movs	r0, #1
   1be76:	431a      	orrs	r2, r3
   1be78:	81a2      	strh	r2, [r4, #12]
   1be7a:	4240      	negs	r0, r0
   1be7c:	e7b4      	b.n	1bde8 <__swsetup_r+0x38>
   1be7e:	46c0      	nop			; (mov r8, r8)
   1be80:	20000018 	.word	0x20000018

0001be84 <register_fini>:
   1be84:	4b03      	ldr	r3, [pc, #12]	; (1be94 <register_fini+0x10>)
   1be86:	b510      	push	{r4, lr}
   1be88:	2b00      	cmp	r3, #0
   1be8a:	d002      	beq.n	1be92 <register_fini+0xe>
   1be8c:	4802      	ldr	r0, [pc, #8]	; (1be98 <register_fini+0x14>)
   1be8e:	f000 f805 	bl	1be9c <atexit>
   1be92:	bd10      	pop	{r4, pc}
   1be94:	00000000 	.word	0x00000000
   1be98:	0001d20d 	.word	0x0001d20d

0001be9c <atexit>:
   1be9c:	b510      	push	{r4, lr}
   1be9e:	0001      	movs	r1, r0
   1bea0:	2300      	movs	r3, #0
   1bea2:	2200      	movs	r2, #0
   1bea4:	2000      	movs	r0, #0
   1bea6:	f002 fb23 	bl	1e4f0 <__register_exitproc>
   1beaa:	bd10      	pop	{r4, pc}

0001beac <quorem>:
   1beac:	b5f0      	push	{r4, r5, r6, r7, lr}
   1beae:	4645      	mov	r5, r8
   1beb0:	4680      	mov	r8, r0
   1beb2:	46de      	mov	lr, fp
   1beb4:	4657      	mov	r7, sl
   1beb6:	464e      	mov	r6, r9
   1beb8:	4642      	mov	r2, r8
   1beba:	b5e0      	push	{r5, r6, r7, lr}
   1bebc:	690c      	ldr	r4, [r1, #16]
   1bebe:	6912      	ldr	r2, [r2, #16]
   1bec0:	b085      	sub	sp, #20
   1bec2:	000b      	movs	r3, r1
   1bec4:	9102      	str	r1, [sp, #8]
   1bec6:	2000      	movs	r0, #0
   1bec8:	4294      	cmp	r4, r2
   1beca:	dd00      	ble.n	1bece <quorem+0x22>
   1becc:	e090      	b.n	1bff0 <quorem+0x144>
   1bece:	2214      	movs	r2, #20
   1bed0:	4694      	mov	ip, r2
   1bed2:	4463      	add	r3, ip
   1bed4:	4699      	mov	r9, r3
   1bed6:	464a      	mov	r2, r9
   1bed8:	3c01      	subs	r4, #1
   1beda:	00a3      	lsls	r3, r4, #2
   1bedc:	18d6      	adds	r6, r2, r3
   1bede:	2214      	movs	r2, #20
   1bee0:	4442      	add	r2, r8
   1bee2:	4693      	mov	fp, r2
   1bee4:	449b      	add	fp, r3
   1bee6:	6833      	ldr	r3, [r6, #0]
   1bee8:	0015      	movs	r5, r2
   1beea:	1c59      	adds	r1, r3, #1
   1beec:	465b      	mov	r3, fp
   1beee:	6818      	ldr	r0, [r3, #0]
   1bef0:	9201      	str	r2, [sp, #4]
   1bef2:	f7fa fb5b 	bl	165ac <__udivsi3>
   1bef6:	1e03      	subs	r3, r0, #0
   1bef8:	9000      	str	r0, [sp, #0]
   1befa:	d042      	beq.n	1bf82 <quorem+0xd6>
   1befc:	0029      	movs	r1, r5
   1befe:	2700      	movs	r7, #0
   1bf00:	464d      	mov	r5, r9
   1bf02:	2000      	movs	r0, #0
   1bf04:	46b1      	mov	r9, r6
   1bf06:	46a2      	mov	sl, r4
   1bf08:	003e      	movs	r6, r7
   1bf0a:	0004      	movs	r4, r0
   1bf0c:	469c      	mov	ip, r3
   1bf0e:	002f      	movs	r7, r5
   1bf10:	0008      	movs	r0, r1
   1bf12:	9503      	str	r5, [sp, #12]
   1bf14:	4663      	mov	r3, ip
   1bf16:	cf04      	ldmia	r7!, {r2}
   1bf18:	0415      	lsls	r5, r2, #16
   1bf1a:	0c2d      	lsrs	r5, r5, #16
   1bf1c:	435d      	muls	r5, r3
   1bf1e:	0c12      	lsrs	r2, r2, #16
   1bf20:	435a      	muls	r2, r3
   1bf22:	19ad      	adds	r5, r5, r6
   1bf24:	0c2b      	lsrs	r3, r5, #16
   1bf26:	18d2      	adds	r2, r2, r3
   1bf28:	6803      	ldr	r3, [r0, #0]
   1bf2a:	042d      	lsls	r5, r5, #16
   1bf2c:	0419      	lsls	r1, r3, #16
   1bf2e:	0c09      	lsrs	r1, r1, #16
   1bf30:	1909      	adds	r1, r1, r4
   1bf32:	0c16      	lsrs	r6, r2, #16
   1bf34:	0c2d      	lsrs	r5, r5, #16
   1bf36:	0412      	lsls	r2, r2, #16
   1bf38:	1b49      	subs	r1, r1, r5
   1bf3a:	0c12      	lsrs	r2, r2, #16
   1bf3c:	0c1b      	lsrs	r3, r3, #16
   1bf3e:	1a9b      	subs	r3, r3, r2
   1bf40:	140a      	asrs	r2, r1, #16
   1bf42:	189b      	adds	r3, r3, r2
   1bf44:	0409      	lsls	r1, r1, #16
   1bf46:	141c      	asrs	r4, r3, #16
   1bf48:	0c09      	lsrs	r1, r1, #16
   1bf4a:	041b      	lsls	r3, r3, #16
   1bf4c:	4319      	orrs	r1, r3
   1bf4e:	c002      	stmia	r0!, {r1}
   1bf50:	45b9      	cmp	r9, r7
   1bf52:	d2df      	bcs.n	1bf14 <quorem+0x68>
   1bf54:	9b03      	ldr	r3, [sp, #12]
   1bf56:	464e      	mov	r6, r9
   1bf58:	4699      	mov	r9, r3
   1bf5a:	465b      	mov	r3, fp
   1bf5c:	681b      	ldr	r3, [r3, #0]
   1bf5e:	4654      	mov	r4, sl
   1bf60:	2b00      	cmp	r3, #0
   1bf62:	d10e      	bne.n	1bf82 <quorem+0xd6>
   1bf64:	465b      	mov	r3, fp
   1bf66:	9a01      	ldr	r2, [sp, #4]
   1bf68:	3b04      	subs	r3, #4
   1bf6a:	429a      	cmp	r2, r3
   1bf6c:	d304      	bcc.n	1bf78 <quorem+0xcc>
   1bf6e:	e006      	b.n	1bf7e <quorem+0xd2>
   1bf70:	3b04      	subs	r3, #4
   1bf72:	3c01      	subs	r4, #1
   1bf74:	429a      	cmp	r2, r3
   1bf76:	d202      	bcs.n	1bf7e <quorem+0xd2>
   1bf78:	6819      	ldr	r1, [r3, #0]
   1bf7a:	2900      	cmp	r1, #0
   1bf7c:	d0f8      	beq.n	1bf70 <quorem+0xc4>
   1bf7e:	4643      	mov	r3, r8
   1bf80:	611c      	str	r4, [r3, #16]
   1bf82:	9902      	ldr	r1, [sp, #8]
   1bf84:	4640      	mov	r0, r8
   1bf86:	f001 ff33 	bl	1ddf0 <__mcmp>
   1bf8a:	2800      	cmp	r0, #0
   1bf8c:	db2f      	blt.n	1bfee <quorem+0x142>
   1bf8e:	464f      	mov	r7, r9
   1bf90:	2000      	movs	r0, #0
   1bf92:	9b00      	ldr	r3, [sp, #0]
   1bf94:	9d01      	ldr	r5, [sp, #4]
   1bf96:	3301      	adds	r3, #1
   1bf98:	9300      	str	r3, [sp, #0]
   1bf9a:	682b      	ldr	r3, [r5, #0]
   1bf9c:	cf02      	ldmia	r7!, {r1}
   1bf9e:	041a      	lsls	r2, r3, #16
   1bfa0:	0c12      	lsrs	r2, r2, #16
   1bfa2:	1810      	adds	r0, r2, r0
   1bfa4:	040a      	lsls	r2, r1, #16
   1bfa6:	0c12      	lsrs	r2, r2, #16
   1bfa8:	1a82      	subs	r2, r0, r2
   1bfaa:	0c09      	lsrs	r1, r1, #16
   1bfac:	0c1b      	lsrs	r3, r3, #16
   1bfae:	1a5b      	subs	r3, r3, r1
   1bfb0:	1411      	asrs	r1, r2, #16
   1bfb2:	185b      	adds	r3, r3, r1
   1bfb4:	0412      	lsls	r2, r2, #16
   1bfb6:	1418      	asrs	r0, r3, #16
   1bfb8:	0c12      	lsrs	r2, r2, #16
   1bfba:	041b      	lsls	r3, r3, #16
   1bfbc:	4313      	orrs	r3, r2
   1bfbe:	c508      	stmia	r5!, {r3}
   1bfc0:	42be      	cmp	r6, r7
   1bfc2:	d2ea      	bcs.n	1bf9a <quorem+0xee>
   1bfc4:	9901      	ldr	r1, [sp, #4]
   1bfc6:	00a3      	lsls	r3, r4, #2
   1bfc8:	468c      	mov	ip, r1
   1bfca:	4463      	add	r3, ip
   1bfcc:	681a      	ldr	r2, [r3, #0]
   1bfce:	2a00      	cmp	r2, #0
   1bfd0:	d10d      	bne.n	1bfee <quorem+0x142>
   1bfd2:	3b04      	subs	r3, #4
   1bfd4:	000a      	movs	r2, r1
   1bfd6:	4299      	cmp	r1, r3
   1bfd8:	d304      	bcc.n	1bfe4 <quorem+0x138>
   1bfda:	e006      	b.n	1bfea <quorem+0x13e>
   1bfdc:	3b04      	subs	r3, #4
   1bfde:	3c01      	subs	r4, #1
   1bfe0:	429a      	cmp	r2, r3
   1bfe2:	d202      	bcs.n	1bfea <quorem+0x13e>
   1bfe4:	6819      	ldr	r1, [r3, #0]
   1bfe6:	2900      	cmp	r1, #0
   1bfe8:	d0f8      	beq.n	1bfdc <quorem+0x130>
   1bfea:	4643      	mov	r3, r8
   1bfec:	611c      	str	r4, [r3, #16]
   1bfee:	9800      	ldr	r0, [sp, #0]
   1bff0:	b005      	add	sp, #20
   1bff2:	bc3c      	pop	{r2, r3, r4, r5}
   1bff4:	4690      	mov	r8, r2
   1bff6:	4699      	mov	r9, r3
   1bff8:	46a2      	mov	sl, r4
   1bffa:	46ab      	mov	fp, r5
   1bffc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1bffe:	46c0      	nop			; (mov r8, r8)

0001c000 <_dtoa_r>:
   1c000:	b5f0      	push	{r4, r5, r6, r7, lr}
   1c002:	4657      	mov	r7, sl
   1c004:	464e      	mov	r6, r9
   1c006:	4645      	mov	r5, r8
   1c008:	46de      	mov	lr, fp
   1c00a:	b5e0      	push	{r5, r6, r7, lr}
   1c00c:	6c01      	ldr	r1, [r0, #64]	; 0x40
   1c00e:	b099      	sub	sp, #100	; 0x64
   1c010:	4682      	mov	sl, r0
   1c012:	001d      	movs	r5, r3
   1c014:	0016      	movs	r6, r2
   1c016:	001f      	movs	r7, r3
   1c018:	2900      	cmp	r1, #0
   1c01a:	d009      	beq.n	1c030 <_dtoa_r+0x30>
   1c01c:	2301      	movs	r3, #1
   1c01e:	6c42      	ldr	r2, [r0, #68]	; 0x44
   1c020:	4093      	lsls	r3, r2
   1c022:	604a      	str	r2, [r1, #4]
   1c024:	608b      	str	r3, [r1, #8]
   1c026:	f001 fcd7 	bl	1d9d8 <_Bfree>
   1c02a:	2300      	movs	r3, #0
   1c02c:	4652      	mov	r2, sl
   1c02e:	6413      	str	r3, [r2, #64]	; 0x40
   1c030:	46b8      	mov	r8, r7
   1c032:	2f00      	cmp	r7, #0
   1c034:	db37      	blt.n	1c0a6 <_dtoa_r+0xa6>
   1c036:	2300      	movs	r3, #0
   1c038:	9a25      	ldr	r2, [sp, #148]	; 0x94
   1c03a:	6013      	str	r3, [r2, #0]
   1c03c:	4642      	mov	r2, r8
   1c03e:	4bd6      	ldr	r3, [pc, #856]	; (1c398 <_dtoa_r+0x398>)
   1c040:	401a      	ands	r2, r3
   1c042:	429a      	cmp	r2, r3
   1c044:	d018      	beq.n	1c078 <_dtoa_r+0x78>
   1c046:	2200      	movs	r2, #0
   1c048:	2300      	movs	r3, #0
   1c04a:	0030      	movs	r0, r6
   1c04c:	0039      	movs	r1, r7
   1c04e:	f7fa fc33 	bl	168b8 <__aeabi_dcmpeq>
   1c052:	2800      	cmp	r0, #0
   1c054:	d02f      	beq.n	1c0b6 <_dtoa_r+0xb6>
   1c056:	2301      	movs	r3, #1
   1c058:	9a24      	ldr	r2, [sp, #144]	; 0x90
   1c05a:	6013      	str	r3, [r2, #0]
   1c05c:	9b26      	ldr	r3, [sp, #152]	; 0x98
   1c05e:	2b00      	cmp	r3, #0
   1c060:	d100      	bne.n	1c064 <_dtoa_r+0x64>
   1c062:	e22a      	b.n	1c4ba <_dtoa_r+0x4ba>
   1c064:	48cd      	ldr	r0, [pc, #820]	; (1c39c <_dtoa_r+0x39c>)
   1c066:	6018      	str	r0, [r3, #0]
   1c068:	3801      	subs	r0, #1
   1c06a:	b019      	add	sp, #100	; 0x64
   1c06c:	bc3c      	pop	{r2, r3, r4, r5}
   1c06e:	4690      	mov	r8, r2
   1c070:	4699      	mov	r9, r3
   1c072:	46a2      	mov	sl, r4
   1c074:	46ab      	mov	fp, r5
   1c076:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1c078:	4bc9      	ldr	r3, [pc, #804]	; (1c3a0 <_dtoa_r+0x3a0>)
   1c07a:	9a24      	ldr	r2, [sp, #144]	; 0x90
   1c07c:	6013      	str	r3, [r2, #0]
   1c07e:	2e00      	cmp	r6, #0
   1c080:	d10b      	bne.n	1c09a <_dtoa_r+0x9a>
   1c082:	4643      	mov	r3, r8
   1c084:	0318      	lsls	r0, r3, #12
   1c086:	d108      	bne.n	1c09a <_dtoa_r+0x9a>
   1c088:	9b26      	ldr	r3, [sp, #152]	; 0x98
   1c08a:	48c6      	ldr	r0, [pc, #792]	; (1c3a4 <_dtoa_r+0x3a4>)
   1c08c:	2b00      	cmp	r3, #0
   1c08e:	d0ec      	beq.n	1c06a <_dtoa_r+0x6a>
   1c090:	0003      	movs	r3, r0
   1c092:	3308      	adds	r3, #8
   1c094:	9a26      	ldr	r2, [sp, #152]	; 0x98
   1c096:	6013      	str	r3, [r2, #0]
   1c098:	e7e7      	b.n	1c06a <_dtoa_r+0x6a>
   1c09a:	9b26      	ldr	r3, [sp, #152]	; 0x98
   1c09c:	48c2      	ldr	r0, [pc, #776]	; (1c3a8 <_dtoa_r+0x3a8>)
   1c09e:	2b00      	cmp	r3, #0
   1c0a0:	d0e3      	beq.n	1c06a <_dtoa_r+0x6a>
   1c0a2:	1cc3      	adds	r3, r0, #3
   1c0a4:	e7f6      	b.n	1c094 <_dtoa_r+0x94>
   1c0a6:	2301      	movs	r3, #1
   1c0a8:	9a25      	ldr	r2, [sp, #148]	; 0x94
   1c0aa:	0068      	lsls	r0, r5, #1
   1c0ac:	6013      	str	r3, [r2, #0]
   1c0ae:	0843      	lsrs	r3, r0, #1
   1c0b0:	4698      	mov	r8, r3
   1c0b2:	001f      	movs	r7, r3
   1c0b4:	e7c2      	b.n	1c03c <_dtoa_r+0x3c>
   1c0b6:	ab16      	add	r3, sp, #88	; 0x58
   1c0b8:	9301      	str	r3, [sp, #4]
   1c0ba:	ab17      	add	r3, sp, #92	; 0x5c
   1c0bc:	9300      	str	r3, [sp, #0]
   1c0be:	0032      	movs	r2, r6
   1c0c0:	003b      	movs	r3, r7
   1c0c2:	4650      	mov	r0, sl
   1c0c4:	f001 ff4a 	bl	1df5c <__d2b>
   1c0c8:	4643      	mov	r3, r8
   1c0ca:	4683      	mov	fp, r0
   1c0cc:	0d1a      	lsrs	r2, r3, #20
   1c0ce:	d100      	bne.n	1c0d2 <_dtoa_r+0xd2>
   1c0d0:	e1d6      	b.n	1c480 <_dtoa_r+0x480>
   1c0d2:	033b      	lsls	r3, r7, #12
   1c0d4:	4cb5      	ldr	r4, [pc, #724]	; (1c3ac <_dtoa_r+0x3ac>)
   1c0d6:	0b1b      	lsrs	r3, r3, #12
   1c0d8:	431c      	orrs	r4, r3
   1c0da:	4bb5      	ldr	r3, [pc, #724]	; (1c3b0 <_dtoa_r+0x3b0>)
   1c0dc:	0030      	movs	r0, r6
   1c0de:	4698      	mov	r8, r3
   1c0e0:	9b16      	ldr	r3, [sp, #88]	; 0x58
   1c0e2:	0021      	movs	r1, r4
   1c0e4:	4699      	mov	r9, r3
   1c0e6:	2300      	movs	r3, #0
   1c0e8:	4490      	add	r8, r2
   1c0ea:	930f      	str	r3, [sp, #60]	; 0x3c
   1c0ec:	2200      	movs	r2, #0
   1c0ee:	4bb1      	ldr	r3, [pc, #708]	; (1c3b4 <_dtoa_r+0x3b4>)
   1c0f0:	f7fc fe62 	bl	18db8 <__aeabi_dsub>
   1c0f4:	4ab0      	ldr	r2, [pc, #704]	; (1c3b8 <_dtoa_r+0x3b8>)
   1c0f6:	4bb1      	ldr	r3, [pc, #708]	; (1c3bc <_dtoa_r+0x3bc>)
   1c0f8:	f7fc fbde 	bl	188b8 <__aeabi_dmul>
   1c0fc:	4ab0      	ldr	r2, [pc, #704]	; (1c3c0 <_dtoa_r+0x3c0>)
   1c0fe:	4bb1      	ldr	r3, [pc, #708]	; (1c3c4 <_dtoa_r+0x3c4>)
   1c100:	f7fb fc96 	bl	17a30 <__aeabi_dadd>
   1c104:	0004      	movs	r4, r0
   1c106:	4640      	mov	r0, r8
   1c108:	000d      	movs	r5, r1
   1c10a:	f7fd f99f 	bl	1944c <__aeabi_i2d>
   1c10e:	4aae      	ldr	r2, [pc, #696]	; (1c3c8 <_dtoa_r+0x3c8>)
   1c110:	4bae      	ldr	r3, [pc, #696]	; (1c3cc <_dtoa_r+0x3cc>)
   1c112:	f7fc fbd1 	bl	188b8 <__aeabi_dmul>
   1c116:	0002      	movs	r2, r0
   1c118:	000b      	movs	r3, r1
   1c11a:	0020      	movs	r0, r4
   1c11c:	0029      	movs	r1, r5
   1c11e:	f7fb fc87 	bl	17a30 <__aeabi_dadd>
   1c122:	0004      	movs	r4, r0
   1c124:	000d      	movs	r5, r1
   1c126:	f7fd f95d 	bl	193e4 <__aeabi_d2iz>
   1c12a:	2200      	movs	r2, #0
   1c12c:	9003      	str	r0, [sp, #12]
   1c12e:	2300      	movs	r3, #0
   1c130:	0020      	movs	r0, r4
   1c132:	0029      	movs	r1, r5
   1c134:	f7fa fbc6 	bl	168c4 <__aeabi_dcmplt>
   1c138:	2800      	cmp	r0, #0
   1c13a:	d000      	beq.n	1c13e <_dtoa_r+0x13e>
   1c13c:	e2b1      	b.n	1c6a2 <_dtoa_r+0x6a2>
   1c13e:	2301      	movs	r3, #1
   1c140:	9c03      	ldr	r4, [sp, #12]
   1c142:	930c      	str	r3, [sp, #48]	; 0x30
   1c144:	2c16      	cmp	r4, #22
   1c146:	d810      	bhi.n	1c16a <_dtoa_r+0x16a>
   1c148:	49a1      	ldr	r1, [pc, #644]	; (1c3d0 <_dtoa_r+0x3d0>)
   1c14a:	00e3      	lsls	r3, r4, #3
   1c14c:	18c9      	adds	r1, r1, r3
   1c14e:	0032      	movs	r2, r6
   1c150:	6808      	ldr	r0, [r1, #0]
   1c152:	6849      	ldr	r1, [r1, #4]
   1c154:	003b      	movs	r3, r7
   1c156:	f7fa fbc9 	bl	168ec <__aeabi_dcmpgt>
   1c15a:	2800      	cmp	r0, #0
   1c15c:	d100      	bne.n	1c160 <_dtoa_r+0x160>
   1c15e:	e31d      	b.n	1c79c <_dtoa_r+0x79c>
   1c160:	0023      	movs	r3, r4
   1c162:	3b01      	subs	r3, #1
   1c164:	9303      	str	r3, [sp, #12]
   1c166:	2300      	movs	r3, #0
   1c168:	930c      	str	r3, [sp, #48]	; 0x30
   1c16a:	464b      	mov	r3, r9
   1c16c:	4642      	mov	r2, r8
   1c16e:	1a9a      	subs	r2, r3, r2
   1c170:	2300      	movs	r3, #0
   1c172:	9306      	str	r3, [sp, #24]
   1c174:	0013      	movs	r3, r2
   1c176:	3b01      	subs	r3, #1
   1c178:	9304      	str	r3, [sp, #16]
   1c17a:	d500      	bpl.n	1c17e <_dtoa_r+0x17e>
   1c17c:	e2a1      	b.n	1c6c2 <_dtoa_r+0x6c2>
   1c17e:	9b03      	ldr	r3, [sp, #12]
   1c180:	2b00      	cmp	r3, #0
   1c182:	da00      	bge.n	1c186 <_dtoa_r+0x186>
   1c184:	e284      	b.n	1c690 <_dtoa_r+0x690>
   1c186:	469c      	mov	ip, r3
   1c188:	930d      	str	r3, [sp, #52]	; 0x34
   1c18a:	2300      	movs	r3, #0
   1c18c:	9a04      	ldr	r2, [sp, #16]
   1c18e:	4699      	mov	r9, r3
   1c190:	0011      	movs	r1, r2
   1c192:	4461      	add	r1, ip
   1c194:	9104      	str	r1, [sp, #16]
   1c196:	9b22      	ldr	r3, [sp, #136]	; 0x88
   1c198:	2b09      	cmp	r3, #9
   1c19a:	d900      	bls.n	1c19e <_dtoa_r+0x19e>
   1c19c:	e18f      	b.n	1c4be <_dtoa_r+0x4be>
   1c19e:	2401      	movs	r4, #1
   1c1a0:	2b05      	cmp	r3, #5
   1c1a2:	dd02      	ble.n	1c1aa <_dtoa_r+0x1aa>
   1c1a4:	2400      	movs	r4, #0
   1c1a6:	3b04      	subs	r3, #4
   1c1a8:	9322      	str	r3, [sp, #136]	; 0x88
   1c1aa:	9b22      	ldr	r3, [sp, #136]	; 0x88
   1c1ac:	2b03      	cmp	r3, #3
   1c1ae:	d101      	bne.n	1c1b4 <_dtoa_r+0x1b4>
   1c1b0:	f000 fcce 	bl	1cb50 <_dtoa_r+0xb50>
   1c1b4:	dc01      	bgt.n	1c1ba <_dtoa_r+0x1ba>
   1c1b6:	f000 fc92 	bl	1cade <_dtoa_r+0xade>
   1c1ba:	9b22      	ldr	r3, [sp, #136]	; 0x88
   1c1bc:	2b04      	cmp	r3, #4
   1c1be:	d101      	bne.n	1c1c4 <_dtoa_r+0x1c4>
   1c1c0:	f000 fc40 	bl	1ca44 <_dtoa_r+0xa44>
   1c1c4:	2301      	movs	r3, #1
   1c1c6:	930b      	str	r3, [sp, #44]	; 0x2c
   1c1c8:	9b22      	ldr	r3, [sp, #136]	; 0x88
   1c1ca:	2b05      	cmp	r3, #5
   1c1cc:	d001      	beq.n	1c1d2 <_dtoa_r+0x1d2>
   1c1ce:	f000 fc8b 	bl	1cae8 <_dtoa_r+0xae8>
   1c1d2:	9a23      	ldr	r2, [sp, #140]	; 0x8c
   1c1d4:	9b03      	ldr	r3, [sp, #12]
   1c1d6:	4694      	mov	ip, r2
   1c1d8:	4463      	add	r3, ip
   1c1da:	930e      	str	r3, [sp, #56]	; 0x38
   1c1dc:	3301      	adds	r3, #1
   1c1de:	9307      	str	r3, [sp, #28]
   1c1e0:	1e1d      	subs	r5, r3, #0
   1c1e2:	dc01      	bgt.n	1c1e8 <_dtoa_r+0x1e8>
   1c1e4:	f000 fd49 	bl	1cc7a <_dtoa_r+0xc7a>
   1c1e8:	9b07      	ldr	r3, [sp, #28]
   1c1ea:	4698      	mov	r8, r3
   1c1ec:	2300      	movs	r3, #0
   1c1ee:	4652      	mov	r2, sl
   1c1f0:	2100      	movs	r1, #0
   1c1f2:	6453      	str	r3, [r2, #68]	; 0x44
   1c1f4:	2d17      	cmp	r5, #23
   1c1f6:	d90a      	bls.n	1c20e <_dtoa_r+0x20e>
   1c1f8:	2201      	movs	r2, #1
   1c1fa:	3304      	adds	r3, #4
   1c1fc:	005b      	lsls	r3, r3, #1
   1c1fe:	0018      	movs	r0, r3
   1c200:	3014      	adds	r0, #20
   1c202:	0011      	movs	r1, r2
   1c204:	3201      	adds	r2, #1
   1c206:	4285      	cmp	r5, r0
   1c208:	d2f8      	bcs.n	1c1fc <_dtoa_r+0x1fc>
   1c20a:	4653      	mov	r3, sl
   1c20c:	6459      	str	r1, [r3, #68]	; 0x44
   1c20e:	4650      	mov	r0, sl
   1c210:	f001 fbba 	bl	1d988 <_Balloc>
   1c214:	4653      	mov	r3, sl
   1c216:	6418      	str	r0, [r3, #64]	; 0x40
   1c218:	4643      	mov	r3, r8
   1c21a:	900a      	str	r0, [sp, #40]	; 0x28
   1c21c:	2b0e      	cmp	r3, #14
   1c21e:	d900      	bls.n	1c222 <_dtoa_r+0x222>
   1c220:	e161      	b.n	1c4e6 <_dtoa_r+0x4e6>
   1c222:	2c00      	cmp	r4, #0
   1c224:	d100      	bne.n	1c228 <_dtoa_r+0x228>
   1c226:	e15e      	b.n	1c4e6 <_dtoa_r+0x4e6>
   1c228:	9610      	str	r6, [sp, #64]	; 0x40
   1c22a:	9711      	str	r7, [sp, #68]	; 0x44
   1c22c:	9e03      	ldr	r6, [sp, #12]
   1c22e:	2e00      	cmp	r6, #0
   1c230:	dc01      	bgt.n	1c236 <_dtoa_r+0x236>
   1c232:	f000 fd25 	bl	1cc80 <_dtoa_r+0xc80>
   1c236:	0032      	movs	r2, r6
   1c238:	210f      	movs	r1, #15
   1c23a:	4b65      	ldr	r3, [pc, #404]	; (1c3d0 <_dtoa_r+0x3d0>)
   1c23c:	400a      	ands	r2, r1
   1c23e:	00d2      	lsls	r2, r2, #3
   1c240:	189b      	adds	r3, r3, r2
   1c242:	1136      	asrs	r6, r6, #4
   1c244:	681c      	ldr	r4, [r3, #0]
   1c246:	685d      	ldr	r5, [r3, #4]
   1c248:	06f3      	lsls	r3, r6, #27
   1c24a:	d401      	bmi.n	1c250 <_dtoa_r+0x250>
   1c24c:	f000 fcca 	bl	1cbe4 <_dtoa_r+0xbe4>
   1c250:	4b60      	ldr	r3, [pc, #384]	; (1c3d4 <_dtoa_r+0x3d4>)
   1c252:	400e      	ands	r6, r1
   1c254:	6a1a      	ldr	r2, [r3, #32]
   1c256:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1c258:	9810      	ldr	r0, [sp, #64]	; 0x40
   1c25a:	9911      	ldr	r1, [sp, #68]	; 0x44
   1c25c:	f7fb fef8 	bl	18050 <__aeabi_ddiv>
   1c260:	2303      	movs	r3, #3
   1c262:	4698      	mov	r8, r3
   1c264:	9008      	str	r0, [sp, #32]
   1c266:	9109      	str	r1, [sp, #36]	; 0x24
   1c268:	2e00      	cmp	r6, #0
   1c26a:	d011      	beq.n	1c290 <_dtoa_r+0x290>
   1c26c:	4f59      	ldr	r7, [pc, #356]	; (1c3d4 <_dtoa_r+0x3d4>)
   1c26e:	2301      	movs	r3, #1
   1c270:	4233      	tst	r3, r6
   1c272:	d009      	beq.n	1c288 <_dtoa_r+0x288>
   1c274:	469c      	mov	ip, r3
   1c276:	683a      	ldr	r2, [r7, #0]
   1c278:	687b      	ldr	r3, [r7, #4]
   1c27a:	0020      	movs	r0, r4
   1c27c:	0029      	movs	r1, r5
   1c27e:	44e0      	add	r8, ip
   1c280:	f7fc fb1a 	bl	188b8 <__aeabi_dmul>
   1c284:	0004      	movs	r4, r0
   1c286:	000d      	movs	r5, r1
   1c288:	1076      	asrs	r6, r6, #1
   1c28a:	3708      	adds	r7, #8
   1c28c:	2e00      	cmp	r6, #0
   1c28e:	d1ee      	bne.n	1c26e <_dtoa_r+0x26e>
   1c290:	0022      	movs	r2, r4
   1c292:	9808      	ldr	r0, [sp, #32]
   1c294:	9909      	ldr	r1, [sp, #36]	; 0x24
   1c296:	002b      	movs	r3, r5
   1c298:	f7fb feda 	bl	18050 <__aeabi_ddiv>
   1c29c:	0006      	movs	r6, r0
   1c29e:	000f      	movs	r7, r1
   1c2a0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1c2a2:	2b00      	cmp	r3, #0
   1c2a4:	d009      	beq.n	1c2ba <_dtoa_r+0x2ba>
   1c2a6:	2200      	movs	r2, #0
   1c2a8:	4b40      	ldr	r3, [pc, #256]	; (1c3ac <_dtoa_r+0x3ac>)
   1c2aa:	0030      	movs	r0, r6
   1c2ac:	0039      	movs	r1, r7
   1c2ae:	f7fa fb09 	bl	168c4 <__aeabi_dcmplt>
   1c2b2:	2800      	cmp	r0, #0
   1c2b4:	d001      	beq.n	1c2ba <_dtoa_r+0x2ba>
   1c2b6:	f000 fdc2 	bl	1ce3e <_dtoa_r+0xe3e>
   1c2ba:	4640      	mov	r0, r8
   1c2bc:	f7fd f8c6 	bl	1944c <__aeabi_i2d>
   1c2c0:	0032      	movs	r2, r6
   1c2c2:	003b      	movs	r3, r7
   1c2c4:	f7fc faf8 	bl	188b8 <__aeabi_dmul>
   1c2c8:	2200      	movs	r2, #0
   1c2ca:	4b43      	ldr	r3, [pc, #268]	; (1c3d8 <_dtoa_r+0x3d8>)
   1c2cc:	f7fb fbb0 	bl	17a30 <__aeabi_dadd>
   1c2d0:	4a42      	ldr	r2, [pc, #264]	; (1c3dc <_dtoa_r+0x3dc>)
   1c2d2:	000b      	movs	r3, r1
   1c2d4:	4694      	mov	ip, r2
   1c2d6:	4463      	add	r3, ip
   1c2d8:	9008      	str	r0, [sp, #32]
   1c2da:	9109      	str	r1, [sp, #36]	; 0x24
   1c2dc:	9309      	str	r3, [sp, #36]	; 0x24
   1c2de:	9b07      	ldr	r3, [sp, #28]
   1c2e0:	2b00      	cmp	r3, #0
   1c2e2:	d101      	bne.n	1c2e8 <_dtoa_r+0x2e8>
   1c2e4:	f000 fc50 	bl	1cb88 <_dtoa_r+0xb88>
   1c2e8:	9b03      	ldr	r3, [sp, #12]
   1c2ea:	9313      	str	r3, [sp, #76]	; 0x4c
   1c2ec:	9b07      	ldr	r3, [sp, #28]
   1c2ee:	9312      	str	r3, [sp, #72]	; 0x48
   1c2f0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1c2f2:	2b00      	cmp	r3, #0
   1c2f4:	d101      	bne.n	1c2fa <_dtoa_r+0x2fa>
   1c2f6:	f000 fd1d 	bl	1cd34 <_dtoa_r+0xd34>
   1c2fa:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1c2fc:	2000      	movs	r0, #0
   1c2fe:	1e5a      	subs	r2, r3, #1
   1c300:	4b33      	ldr	r3, [pc, #204]	; (1c3d0 <_dtoa_r+0x3d0>)
   1c302:	00d2      	lsls	r2, r2, #3
   1c304:	189b      	adds	r3, r3, r2
   1c306:	681a      	ldr	r2, [r3, #0]
   1c308:	685b      	ldr	r3, [r3, #4]
   1c30a:	4935      	ldr	r1, [pc, #212]	; (1c3e0 <_dtoa_r+0x3e0>)
   1c30c:	f7fb fea0 	bl	18050 <__aeabi_ddiv>
   1c310:	9a08      	ldr	r2, [sp, #32]
   1c312:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1c314:	f7fc fd50 	bl	18db8 <__aeabi_dsub>
   1c318:	9008      	str	r0, [sp, #32]
   1c31a:	9109      	str	r1, [sp, #36]	; 0x24
   1c31c:	0039      	movs	r1, r7
   1c31e:	0030      	movs	r0, r6
   1c320:	f7fd f860 	bl	193e4 <__aeabi_d2iz>
   1c324:	0004      	movs	r4, r0
   1c326:	f7fd f891 	bl	1944c <__aeabi_i2d>
   1c32a:	0002      	movs	r2, r0
   1c32c:	000b      	movs	r3, r1
   1c32e:	0030      	movs	r0, r6
   1c330:	0039      	movs	r1, r7
   1c332:	f7fc fd41 	bl	18db8 <__aeabi_dsub>
   1c336:	0005      	movs	r5, r0
   1c338:	000e      	movs	r6, r1
   1c33a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1c33c:	3430      	adds	r4, #48	; 0x30
   1c33e:	1c51      	adds	r1, r2, #1
   1c340:	b2e7      	uxtb	r7, r4
   1c342:	9114      	str	r1, [sp, #80]	; 0x50
   1c344:	7017      	strb	r7, [r2, #0]
   1c346:	0033      	movs	r3, r6
   1c348:	9808      	ldr	r0, [sp, #32]
   1c34a:	9909      	ldr	r1, [sp, #36]	; 0x24
   1c34c:	002a      	movs	r2, r5
   1c34e:	f7fa facd 	bl	168ec <__aeabi_dcmpgt>
   1c352:	2800      	cmp	r0, #0
   1c354:	d001      	beq.n	1c35a <_dtoa_r+0x35a>
   1c356:	f000 fdfe 	bl	1cf56 <_dtoa_r+0xf56>
   1c35a:	002a      	movs	r2, r5
   1c35c:	0033      	movs	r3, r6
   1c35e:	2000      	movs	r0, #0
   1c360:	4912      	ldr	r1, [pc, #72]	; (1c3ac <_dtoa_r+0x3ac>)
   1c362:	f7fc fd29 	bl	18db8 <__aeabi_dsub>
   1c366:	0002      	movs	r2, r0
   1c368:	000b      	movs	r3, r1
   1c36a:	9808      	ldr	r0, [sp, #32]
   1c36c:	9909      	ldr	r1, [sp, #36]	; 0x24
   1c36e:	f7fa fabd 	bl	168ec <__aeabi_dcmpgt>
   1c372:	2800      	cmp	r0, #0
   1c374:	d001      	beq.n	1c37a <_dtoa_r+0x37a>
   1c376:	f000 fde7 	bl	1cf48 <_dtoa_r+0xf48>
   1c37a:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1c37c:	2b01      	cmp	r3, #1
   1c37e:	d101      	bne.n	1c384 <_dtoa_r+0x384>
   1c380:	f000 fc78 	bl	1cc74 <_dtoa_r+0xc74>
   1c384:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1c386:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1c388:	4694      	mov	ip, r2
   1c38a:	4463      	add	r3, ip
   1c38c:	4698      	mov	r8, r3
   1c38e:	464b      	mov	r3, r9
   1c390:	9312      	str	r3, [sp, #72]	; 0x48
   1c392:	9b14      	ldr	r3, [sp, #80]	; 0x50
   1c394:	4699      	mov	r9, r3
   1c396:	e038      	b.n	1c40a <_dtoa_r+0x40a>
   1c398:	7ff00000 	.word	0x7ff00000
   1c39c:	0001f919 	.word	0x0001f919
   1c3a0:	0000270f 	.word	0x0000270f
   1c3a4:	000207cc 	.word	0x000207cc
   1c3a8:	000207d8 	.word	0x000207d8
   1c3ac:	3ff00000 	.word	0x3ff00000
   1c3b0:	fffffc01 	.word	0xfffffc01
   1c3b4:	3ff80000 	.word	0x3ff80000
   1c3b8:	636f4361 	.word	0x636f4361
   1c3bc:	3fd287a7 	.word	0x3fd287a7
   1c3c0:	8b60c8b3 	.word	0x8b60c8b3
   1c3c4:	3fc68a28 	.word	0x3fc68a28
   1c3c8:	509f79fb 	.word	0x509f79fb
   1c3cc:	3fd34413 	.word	0x3fd34413
   1c3d0:	00020808 	.word	0x00020808
   1c3d4:	000207e0 	.word	0x000207e0
   1c3d8:	401c0000 	.word	0x401c0000
   1c3dc:	fcc00000 	.word	0xfcc00000
   1c3e0:	3fe00000 	.word	0x3fe00000
   1c3e4:	002a      	movs	r2, r5
   1c3e6:	0033      	movs	r3, r6
   1c3e8:	2000      	movs	r0, #0
   1c3ea:	49b9      	ldr	r1, [pc, #740]	; (1c6d0 <_dtoa_r+0x6d0>)
   1c3ec:	f7fc fce4 	bl	18db8 <__aeabi_dsub>
   1c3f0:	9a08      	ldr	r2, [sp, #32]
   1c3f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1c3f4:	f7fa fa66 	bl	168c4 <__aeabi_dcmplt>
   1c3f8:	2800      	cmp	r0, #0
   1c3fa:	d001      	beq.n	1c400 <_dtoa_r+0x400>
   1c3fc:	f000 fd74 	bl	1cee8 <_dtoa_r+0xee8>
   1c400:	46a1      	mov	r9, r4
   1c402:	4544      	cmp	r4, r8
   1c404:	d101      	bne.n	1c40a <_dtoa_r+0x40a>
   1c406:	f000 fc33 	bl	1cc70 <_dtoa_r+0xc70>
   1c40a:	9808      	ldr	r0, [sp, #32]
   1c40c:	9909      	ldr	r1, [sp, #36]	; 0x24
   1c40e:	2200      	movs	r2, #0
   1c410:	4bb0      	ldr	r3, [pc, #704]	; (1c6d4 <_dtoa_r+0x6d4>)
   1c412:	f7fc fa51 	bl	188b8 <__aeabi_dmul>
   1c416:	2200      	movs	r2, #0
   1c418:	4bae      	ldr	r3, [pc, #696]	; (1c6d4 <_dtoa_r+0x6d4>)
   1c41a:	9008      	str	r0, [sp, #32]
   1c41c:	9109      	str	r1, [sp, #36]	; 0x24
   1c41e:	0028      	movs	r0, r5
   1c420:	0031      	movs	r1, r6
   1c422:	f7fc fa49 	bl	188b8 <__aeabi_dmul>
   1c426:	000d      	movs	r5, r1
   1c428:	0004      	movs	r4, r0
   1c42a:	f7fc ffdb 	bl	193e4 <__aeabi_d2iz>
   1c42e:	0007      	movs	r7, r0
   1c430:	f7fd f80c 	bl	1944c <__aeabi_i2d>
   1c434:	0002      	movs	r2, r0
   1c436:	000b      	movs	r3, r1
   1c438:	0020      	movs	r0, r4
   1c43a:	0029      	movs	r1, r5
   1c43c:	f7fc fcbc 	bl	18db8 <__aeabi_dsub>
   1c440:	464b      	mov	r3, r9
   1c442:	3730      	adds	r7, #48	; 0x30
   1c444:	b2ff      	uxtb	r7, r7
   1c446:	1c5c      	adds	r4, r3, #1
   1c448:	701f      	strb	r7, [r3, #0]
   1c44a:	9a08      	ldr	r2, [sp, #32]
   1c44c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1c44e:	0005      	movs	r5, r0
   1c450:	000e      	movs	r6, r1
   1c452:	f7fa fa37 	bl	168c4 <__aeabi_dcmplt>
   1c456:	2800      	cmp	r0, #0
   1c458:	d0c4      	beq.n	1c3e4 <_dtoa_r+0x3e4>
   1c45a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   1c45c:	9303      	str	r3, [sp, #12]
   1c45e:	4659      	mov	r1, fp
   1c460:	4650      	mov	r0, sl
   1c462:	f001 fab9 	bl	1d9d8 <_Bfree>
   1c466:	2300      	movs	r3, #0
   1c468:	7023      	strb	r3, [r4, #0]
   1c46a:	9b03      	ldr	r3, [sp, #12]
   1c46c:	9a24      	ldr	r2, [sp, #144]	; 0x90
   1c46e:	3301      	adds	r3, #1
   1c470:	6013      	str	r3, [r2, #0]
   1c472:	9b26      	ldr	r3, [sp, #152]	; 0x98
   1c474:	2b00      	cmp	r3, #0
   1c476:	d100      	bne.n	1c47a <_dtoa_r+0x47a>
   1c478:	e3a8      	b.n	1cbcc <_dtoa_r+0xbcc>
   1c47a:	601c      	str	r4, [r3, #0]
   1c47c:	980a      	ldr	r0, [sp, #40]	; 0x28
   1c47e:	e5f4      	b.n	1c06a <_dtoa_r+0x6a>
   1c480:	9b16      	ldr	r3, [sp, #88]	; 0x58
   1c482:	4699      	mov	r9, r3
   1c484:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   1c486:	444b      	add	r3, r9
   1c488:	001c      	movs	r4, r3
   1c48a:	4b93      	ldr	r3, [pc, #588]	; (1c6d8 <_dtoa_r+0x6d8>)
   1c48c:	18e3      	adds	r3, r4, r3
   1c48e:	2b20      	cmp	r3, #32
   1c490:	dc00      	bgt.n	1c494 <_dtoa_r+0x494>
   1c492:	e17e      	b.n	1c792 <_dtoa_r+0x792>
   1c494:	0031      	movs	r1, r6
   1c496:	4a91      	ldr	r2, [pc, #580]	; (1c6dc <_dtoa_r+0x6dc>)
   1c498:	4640      	mov	r0, r8
   1c49a:	18a2      	adds	r2, r4, r2
   1c49c:	40d1      	lsrs	r1, r2
   1c49e:	000a      	movs	r2, r1
   1c4a0:	2140      	movs	r1, #64	; 0x40
   1c4a2:	1acb      	subs	r3, r1, r3
   1c4a4:	4098      	lsls	r0, r3
   1c4a6:	4310      	orrs	r0, r2
   1c4a8:	f7fd f812 	bl	194d0 <__aeabi_ui2d>
   1c4ac:	1e63      	subs	r3, r4, #1
   1c4ae:	4698      	mov	r8, r3
   1c4b0:	2301      	movs	r3, #1
   1c4b2:	4d8b      	ldr	r5, [pc, #556]	; (1c6e0 <_dtoa_r+0x6e0>)
   1c4b4:	930f      	str	r3, [sp, #60]	; 0x3c
   1c4b6:	1949      	adds	r1, r1, r5
   1c4b8:	e618      	b.n	1c0ec <_dtoa_r+0xec>
   1c4ba:	488a      	ldr	r0, [pc, #552]	; (1c6e4 <_dtoa_r+0x6e4>)
   1c4bc:	e5d5      	b.n	1c06a <_dtoa_r+0x6a>
   1c4be:	2300      	movs	r3, #0
   1c4c0:	4652      	mov	r2, sl
   1c4c2:	2100      	movs	r1, #0
   1c4c4:	6453      	str	r3, [r2, #68]	; 0x44
   1c4c6:	4650      	mov	r0, sl
   1c4c8:	f001 fa5e 	bl	1d988 <_Balloc>
   1c4cc:	4653      	mov	r3, sl
   1c4ce:	6418      	str	r0, [r3, #64]	; 0x40
   1c4d0:	2301      	movs	r3, #1
   1c4d2:	425b      	negs	r3, r3
   1c4d4:	9307      	str	r3, [sp, #28]
   1c4d6:	930e      	str	r3, [sp, #56]	; 0x38
   1c4d8:	3302      	adds	r3, #2
   1c4da:	2200      	movs	r2, #0
   1c4dc:	930b      	str	r3, [sp, #44]	; 0x2c
   1c4de:	2300      	movs	r3, #0
   1c4e0:	900a      	str	r0, [sp, #40]	; 0x28
   1c4e2:	9223      	str	r2, [sp, #140]	; 0x8c
   1c4e4:	9322      	str	r3, [sp, #136]	; 0x88
   1c4e6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   1c4e8:	2b00      	cmp	r3, #0
   1c4ea:	da00      	bge.n	1c4ee <_dtoa_r+0x4ee>
   1c4ec:	e0ab      	b.n	1c646 <_dtoa_r+0x646>
   1c4ee:	9a03      	ldr	r2, [sp, #12]
   1c4f0:	2a0e      	cmp	r2, #14
   1c4f2:	dd00      	ble.n	1c4f6 <_dtoa_r+0x4f6>
   1c4f4:	e0a7      	b.n	1c646 <_dtoa_r+0x646>
   1c4f6:	4b7c      	ldr	r3, [pc, #496]	; (1c6e8 <_dtoa_r+0x6e8>)
   1c4f8:	00d2      	lsls	r2, r2, #3
   1c4fa:	189b      	adds	r3, r3, r2
   1c4fc:	685c      	ldr	r4, [r3, #4]
   1c4fe:	681b      	ldr	r3, [r3, #0]
   1c500:	9304      	str	r3, [sp, #16]
   1c502:	9405      	str	r4, [sp, #20]
   1c504:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   1c506:	2b00      	cmp	r3, #0
   1c508:	da00      	bge.n	1c50c <_dtoa_r+0x50c>
   1c50a:	e2a7      	b.n	1ca5c <_dtoa_r+0xa5c>
   1c50c:	9c04      	ldr	r4, [sp, #16]
   1c50e:	9d05      	ldr	r5, [sp, #20]
   1c510:	0030      	movs	r0, r6
   1c512:	0022      	movs	r2, r4
   1c514:	002b      	movs	r3, r5
   1c516:	0039      	movs	r1, r7
   1c518:	f7fb fd9a 	bl	18050 <__aeabi_ddiv>
   1c51c:	f7fc ff62 	bl	193e4 <__aeabi_d2iz>
   1c520:	4680      	mov	r8, r0
   1c522:	f7fc ff93 	bl	1944c <__aeabi_i2d>
   1c526:	0022      	movs	r2, r4
   1c528:	002b      	movs	r3, r5
   1c52a:	f7fc f9c5 	bl	188b8 <__aeabi_dmul>
   1c52e:	0002      	movs	r2, r0
   1c530:	000b      	movs	r3, r1
   1c532:	0030      	movs	r0, r6
   1c534:	0039      	movs	r1, r7
   1c536:	f7fc fc3f 	bl	18db8 <__aeabi_dsub>
   1c53a:	4643      	mov	r3, r8
   1c53c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1c53e:	3330      	adds	r3, #48	; 0x30
   1c540:	7013      	strb	r3, [r2, #0]
   1c542:	9b07      	ldr	r3, [sp, #28]
   1c544:	0006      	movs	r6, r0
   1c546:	000f      	movs	r7, r1
   1c548:	1c54      	adds	r4, r2, #1
   1c54a:	2b01      	cmp	r3, #1
   1c54c:	d04e      	beq.n	1c5ec <_dtoa_r+0x5ec>
   1c54e:	2200      	movs	r2, #0
   1c550:	4b60      	ldr	r3, [pc, #384]	; (1c6d4 <_dtoa_r+0x6d4>)
   1c552:	f7fc f9b1 	bl	188b8 <__aeabi_dmul>
   1c556:	2200      	movs	r2, #0
   1c558:	2300      	movs	r3, #0
   1c55a:	0006      	movs	r6, r0
   1c55c:	000f      	movs	r7, r1
   1c55e:	f7fa f9ab 	bl	168b8 <__aeabi_dcmpeq>
   1c562:	2800      	cmp	r0, #0
   1c564:	d000      	beq.n	1c568 <_dtoa_r+0x568>
   1c566:	e77a      	b.n	1c45e <_dtoa_r+0x45e>
   1c568:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1c56a:	9a07      	ldr	r2, [sp, #28]
   1c56c:	1c9d      	adds	r5, r3, #2
   1c56e:	469c      	mov	ip, r3
   1c570:	465b      	mov	r3, fp
   1c572:	9306      	str	r3, [sp, #24]
   1c574:	4653      	mov	r3, sl
   1c576:	4462      	add	r2, ip
   1c578:	46aa      	mov	sl, r5
   1c57a:	9c04      	ldr	r4, [sp, #16]
   1c57c:	9d05      	ldr	r5, [sp, #20]
   1c57e:	4691      	mov	r9, r2
   1c580:	9307      	str	r3, [sp, #28]
   1c582:	e00f      	b.n	1c5a4 <_dtoa_r+0x5a4>
   1c584:	2200      	movs	r2, #0
   1c586:	4b53      	ldr	r3, [pc, #332]	; (1c6d4 <_dtoa_r+0x6d4>)
   1c588:	f7fc f996 	bl	188b8 <__aeabi_dmul>
   1c58c:	2301      	movs	r3, #1
   1c58e:	469c      	mov	ip, r3
   1c590:	2200      	movs	r2, #0
   1c592:	2300      	movs	r3, #0
   1c594:	0006      	movs	r6, r0
   1c596:	000f      	movs	r7, r1
   1c598:	44e2      	add	sl, ip
   1c59a:	f7fa f98d 	bl	168b8 <__aeabi_dcmpeq>
   1c59e:	2800      	cmp	r0, #0
   1c5a0:	d000      	beq.n	1c5a4 <_dtoa_r+0x5a4>
   1c5a2:	e2d9      	b.n	1cb58 <_dtoa_r+0xb58>
   1c5a4:	0022      	movs	r2, r4
   1c5a6:	002b      	movs	r3, r5
   1c5a8:	0030      	movs	r0, r6
   1c5aa:	0039      	movs	r1, r7
   1c5ac:	f7fb fd50 	bl	18050 <__aeabi_ddiv>
   1c5b0:	f7fc ff18 	bl	193e4 <__aeabi_d2iz>
   1c5b4:	4680      	mov	r8, r0
   1c5b6:	f7fc ff49 	bl	1944c <__aeabi_i2d>
   1c5ba:	0022      	movs	r2, r4
   1c5bc:	002b      	movs	r3, r5
   1c5be:	f7fc f97b 	bl	188b8 <__aeabi_dmul>
   1c5c2:	0002      	movs	r2, r0
   1c5c4:	000b      	movs	r3, r1
   1c5c6:	0030      	movs	r0, r6
   1c5c8:	0039      	movs	r1, r7
   1c5ca:	f7fc fbf5 	bl	18db8 <__aeabi_dsub>
   1c5ce:	4653      	mov	r3, sl
   1c5d0:	4642      	mov	r2, r8
   1c5d2:	3b01      	subs	r3, #1
   1c5d4:	3230      	adds	r2, #48	; 0x30
   1c5d6:	0006      	movs	r6, r0
   1c5d8:	000f      	movs	r7, r1
   1c5da:	46d3      	mov	fp, sl
   1c5dc:	701a      	strb	r2, [r3, #0]
   1c5de:	45d1      	cmp	r9, sl
   1c5e0:	d1d0      	bne.n	1c584 <_dtoa_r+0x584>
   1c5e2:	9b06      	ldr	r3, [sp, #24]
   1c5e4:	4654      	mov	r4, sl
   1c5e6:	469b      	mov	fp, r3
   1c5e8:	9b07      	ldr	r3, [sp, #28]
   1c5ea:	469a      	mov	sl, r3
   1c5ec:	0032      	movs	r2, r6
   1c5ee:	003b      	movs	r3, r7
   1c5f0:	0030      	movs	r0, r6
   1c5f2:	0039      	movs	r1, r7
   1c5f4:	f7fb fa1c 	bl	17a30 <__aeabi_dadd>
   1c5f8:	0006      	movs	r6, r0
   1c5fa:	000f      	movs	r7, r1
   1c5fc:	0002      	movs	r2, r0
   1c5fe:	000b      	movs	r3, r1
   1c600:	9804      	ldr	r0, [sp, #16]
   1c602:	9905      	ldr	r1, [sp, #20]
   1c604:	f7fa f95e 	bl	168c4 <__aeabi_dcmplt>
   1c608:	2800      	cmp	r0, #0
   1c60a:	d10c      	bne.n	1c626 <_dtoa_r+0x626>
   1c60c:	9804      	ldr	r0, [sp, #16]
   1c60e:	9905      	ldr	r1, [sp, #20]
   1c610:	0032      	movs	r2, r6
   1c612:	003b      	movs	r3, r7
   1c614:	f7fa f950 	bl	168b8 <__aeabi_dcmpeq>
   1c618:	2800      	cmp	r0, #0
   1c61a:	d100      	bne.n	1c61e <_dtoa_r+0x61e>
   1c61c:	e71f      	b.n	1c45e <_dtoa_r+0x45e>
   1c61e:	4643      	mov	r3, r8
   1c620:	07db      	lsls	r3, r3, #31
   1c622:	d400      	bmi.n	1c626 <_dtoa_r+0x626>
   1c624:	e71b      	b.n	1c45e <_dtoa_r+0x45e>
   1c626:	1e65      	subs	r5, r4, #1
   1c628:	782f      	ldrb	r7, [r5, #0]
   1c62a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1c62c:	e006      	b.n	1c63c <_dtoa_r+0x63c>
   1c62e:	429d      	cmp	r5, r3
   1c630:	d100      	bne.n	1c634 <_dtoa_r+0x634>
   1c632:	e351      	b.n	1ccd8 <_dtoa_r+0xcd8>
   1c634:	3c02      	subs	r4, #2
   1c636:	7827      	ldrb	r7, [r4, #0]
   1c638:	002c      	movs	r4, r5
   1c63a:	3d01      	subs	r5, #1
   1c63c:	2f39      	cmp	r7, #57	; 0x39
   1c63e:	d0f6      	beq.n	1c62e <_dtoa_r+0x62e>
   1c640:	3701      	adds	r7, #1
   1c642:	702f      	strb	r7, [r5, #0]
   1c644:	e70b      	b.n	1c45e <_dtoa_r+0x45e>
   1c646:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   1c648:	2a00      	cmp	r2, #0
   1c64a:	d04f      	beq.n	1c6ec <_dtoa_r+0x6ec>
   1c64c:	9a22      	ldr	r2, [sp, #136]	; 0x88
   1c64e:	2a01      	cmp	r2, #1
   1c650:	dc00      	bgt.n	1c654 <_dtoa_r+0x654>
   1c652:	e22c      	b.n	1caae <_dtoa_r+0xaae>
   1c654:	9b07      	ldr	r3, [sp, #28]
   1c656:	1e5c      	subs	r4, r3, #1
   1c658:	464b      	mov	r3, r9
   1c65a:	45a1      	cmp	r9, r4
   1c65c:	da00      	bge.n	1c660 <_dtoa_r+0x660>
   1c65e:	e2b8      	b.n	1cbd2 <_dtoa_r+0xbd2>
   1c660:	1b1c      	subs	r4, r3, r4
   1c662:	9b07      	ldr	r3, [sp, #28]
   1c664:	2b00      	cmp	r3, #0
   1c666:	da00      	bge.n	1c66a <_dtoa_r+0x66a>
   1c668:	e3d4      	b.n	1ce14 <_dtoa_r+0xe14>
   1c66a:	9b06      	ldr	r3, [sp, #24]
   1c66c:	9308      	str	r3, [sp, #32]
   1c66e:	9b07      	ldr	r3, [sp, #28]
   1c670:	9a06      	ldr	r2, [sp, #24]
   1c672:	2101      	movs	r1, #1
   1c674:	4694      	mov	ip, r2
   1c676:	449c      	add	ip, r3
   1c678:	4662      	mov	r2, ip
   1c67a:	9206      	str	r2, [sp, #24]
   1c67c:	9a04      	ldr	r2, [sp, #16]
   1c67e:	4650      	mov	r0, sl
   1c680:	4694      	mov	ip, r2
   1c682:	449c      	add	ip, r3
   1c684:	4663      	mov	r3, ip
   1c686:	9304      	str	r3, [sp, #16]
   1c688:	f001 fa3e 	bl	1db08 <__i2b>
   1c68c:	4680      	mov	r8, r0
   1c68e:	e032      	b.n	1c6f6 <_dtoa_r+0x6f6>
   1c690:	9a06      	ldr	r2, [sp, #24]
   1c692:	9b03      	ldr	r3, [sp, #12]
   1c694:	1ad2      	subs	r2, r2, r3
   1c696:	425b      	negs	r3, r3
   1c698:	4699      	mov	r9, r3
   1c69a:	2300      	movs	r3, #0
   1c69c:	9206      	str	r2, [sp, #24]
   1c69e:	930d      	str	r3, [sp, #52]	; 0x34
   1c6a0:	e579      	b.n	1c196 <_dtoa_r+0x196>
   1c6a2:	9803      	ldr	r0, [sp, #12]
   1c6a4:	f7fc fed2 	bl	1944c <__aeabi_i2d>
   1c6a8:	000b      	movs	r3, r1
   1c6aa:	0002      	movs	r2, r0
   1c6ac:	0029      	movs	r1, r5
   1c6ae:	0020      	movs	r0, r4
   1c6b0:	f7fa f902 	bl	168b8 <__aeabi_dcmpeq>
   1c6b4:	0002      	movs	r2, r0
   1c6b6:	4250      	negs	r0, r2
   1c6b8:	4150      	adcs	r0, r2
   1c6ba:	9b03      	ldr	r3, [sp, #12]
   1c6bc:	1a1b      	subs	r3, r3, r0
   1c6be:	9303      	str	r3, [sp, #12]
   1c6c0:	e53d      	b.n	1c13e <_dtoa_r+0x13e>
   1c6c2:	2301      	movs	r3, #1
   1c6c4:	1a9b      	subs	r3, r3, r2
   1c6c6:	9306      	str	r3, [sp, #24]
   1c6c8:	2300      	movs	r3, #0
   1c6ca:	9304      	str	r3, [sp, #16]
   1c6cc:	e557      	b.n	1c17e <_dtoa_r+0x17e>
   1c6ce:	46c0      	nop			; (mov r8, r8)
   1c6d0:	3ff00000 	.word	0x3ff00000
   1c6d4:	40240000 	.word	0x40240000
   1c6d8:	00000432 	.word	0x00000432
   1c6dc:	00000412 	.word	0x00000412
   1c6e0:	fe100000 	.word	0xfe100000
   1c6e4:	0001f918 	.word	0x0001f918
   1c6e8:	00020808 	.word	0x00020808
   1c6ec:	9b06      	ldr	r3, [sp, #24]
   1c6ee:	464c      	mov	r4, r9
   1c6f0:	9308      	str	r3, [sp, #32]
   1c6f2:	2300      	movs	r3, #0
   1c6f4:	4698      	mov	r8, r3
   1c6f6:	9908      	ldr	r1, [sp, #32]
   1c6f8:	1e0b      	subs	r3, r1, #0
   1c6fa:	dd0e      	ble.n	1c71a <_dtoa_r+0x71a>
   1c6fc:	9a04      	ldr	r2, [sp, #16]
   1c6fe:	2a00      	cmp	r2, #0
   1c700:	dd0b      	ble.n	1c71a <_dtoa_r+0x71a>
   1c702:	4293      	cmp	r3, r2
   1c704:	dd00      	ble.n	1c708 <_dtoa_r+0x708>
   1c706:	e187      	b.n	1ca18 <_dtoa_r+0xa18>
   1c708:	9a06      	ldr	r2, [sp, #24]
   1c70a:	1ad2      	subs	r2, r2, r3
   1c70c:	9206      	str	r2, [sp, #24]
   1c70e:	9a08      	ldr	r2, [sp, #32]
   1c710:	1ad2      	subs	r2, r2, r3
   1c712:	9208      	str	r2, [sp, #32]
   1c714:	9a04      	ldr	r2, [sp, #16]
   1c716:	1ad3      	subs	r3, r2, r3
   1c718:	9304      	str	r3, [sp, #16]
   1c71a:	464b      	mov	r3, r9
   1c71c:	2b00      	cmp	r3, #0
   1c71e:	d01a      	beq.n	1c756 <_dtoa_r+0x756>
   1c720:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1c722:	2b00      	cmp	r3, #0
   1c724:	d100      	bne.n	1c728 <_dtoa_r+0x728>
   1c726:	e1bb      	b.n	1caa0 <_dtoa_r+0xaa0>
   1c728:	2c00      	cmp	r4, #0
   1c72a:	dd10      	ble.n	1c74e <_dtoa_r+0x74e>
   1c72c:	4641      	mov	r1, r8
   1c72e:	0022      	movs	r2, r4
   1c730:	4650      	mov	r0, sl
   1c732:	f001 fa9d 	bl	1dc70 <__pow5mult>
   1c736:	465a      	mov	r2, fp
   1c738:	0001      	movs	r1, r0
   1c73a:	4680      	mov	r8, r0
   1c73c:	4650      	mov	r0, sl
   1c73e:	f001 f9ed 	bl	1db1c <__multiply>
   1c742:	0005      	movs	r5, r0
   1c744:	4659      	mov	r1, fp
   1c746:	4650      	mov	r0, sl
   1c748:	f001 f946 	bl	1d9d8 <_Bfree>
   1c74c:	46ab      	mov	fp, r5
   1c74e:	464b      	mov	r3, r9
   1c750:	1b1a      	subs	r2, r3, r4
   1c752:	d000      	beq.n	1c756 <_dtoa_r+0x756>
   1c754:	e1a5      	b.n	1caa2 <_dtoa_r+0xaa2>
   1c756:	2101      	movs	r1, #1
   1c758:	4650      	mov	r0, sl
   1c75a:	f001 f9d5 	bl	1db08 <__i2b>
   1c75e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1c760:	4681      	mov	r9, r0
   1c762:	2b00      	cmp	r3, #0
   1c764:	dd1d      	ble.n	1c7a2 <_dtoa_r+0x7a2>
   1c766:	001a      	movs	r2, r3
   1c768:	0001      	movs	r1, r0
   1c76a:	4650      	mov	r0, sl
   1c76c:	f001 fa80 	bl	1dc70 <__pow5mult>
   1c770:	9b22      	ldr	r3, [sp, #136]	; 0x88
   1c772:	4681      	mov	r9, r0
   1c774:	2b01      	cmp	r3, #1
   1c776:	dc00      	bgt.n	1c77a <_dtoa_r+0x77a>
   1c778:	e150      	b.n	1ca1c <_dtoa_r+0xa1c>
   1c77a:	2400      	movs	r4, #0
   1c77c:	464b      	mov	r3, r9
   1c77e:	691b      	ldr	r3, [r3, #16]
   1c780:	3303      	adds	r3, #3
   1c782:	009b      	lsls	r3, r3, #2
   1c784:	444b      	add	r3, r9
   1c786:	6858      	ldr	r0, [r3, #4]
   1c788:	f001 f976 	bl	1da78 <__hi0bits>
   1c78c:	2320      	movs	r3, #32
   1c78e:	1a1b      	subs	r3, r3, r0
   1c790:	e010      	b.n	1c7b4 <_dtoa_r+0x7b4>
   1c792:	2220      	movs	r2, #32
   1c794:	0030      	movs	r0, r6
   1c796:	1ad3      	subs	r3, r2, r3
   1c798:	4098      	lsls	r0, r3
   1c79a:	e685      	b.n	1c4a8 <_dtoa_r+0x4a8>
   1c79c:	2300      	movs	r3, #0
   1c79e:	930c      	str	r3, [sp, #48]	; 0x30
   1c7a0:	e4e3      	b.n	1c16a <_dtoa_r+0x16a>
   1c7a2:	9b22      	ldr	r3, [sp, #136]	; 0x88
   1c7a4:	2400      	movs	r4, #0
   1c7a6:	2b01      	cmp	r3, #1
   1c7a8:	dc00      	bgt.n	1c7ac <_dtoa_r+0x7ac>
   1c7aa:	e18b      	b.n	1cac4 <_dtoa_r+0xac4>
   1c7ac:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   1c7ae:	2301      	movs	r3, #1
   1c7b0:	2a00      	cmp	r2, #0
   1c7b2:	d1e3      	bne.n	1c77c <_dtoa_r+0x77c>
   1c7b4:	9904      	ldr	r1, [sp, #16]
   1c7b6:	201f      	movs	r0, #31
   1c7b8:	468c      	mov	ip, r1
   1c7ba:	4463      	add	r3, ip
   1c7bc:	4018      	ands	r0, r3
   1c7be:	d100      	bne.n	1c7c2 <_dtoa_r+0x7c2>
   1c7c0:	e0ae      	b.n	1c920 <_dtoa_r+0x920>
   1c7c2:	2320      	movs	r3, #32
   1c7c4:	1a1b      	subs	r3, r3, r0
   1c7c6:	2b04      	cmp	r3, #4
   1c7c8:	dc00      	bgt.n	1c7cc <_dtoa_r+0x7cc>
   1c7ca:	e3cc      	b.n	1cf66 <_dtoa_r+0xf66>
   1c7cc:	231c      	movs	r3, #28
   1c7ce:	1a18      	subs	r0, r3, r0
   1c7d0:	9b06      	ldr	r3, [sp, #24]
   1c7d2:	469c      	mov	ip, r3
   1c7d4:	4484      	add	ip, r0
   1c7d6:	4663      	mov	r3, ip
   1c7d8:	9306      	str	r3, [sp, #24]
   1c7da:	9b08      	ldr	r3, [sp, #32]
   1c7dc:	469c      	mov	ip, r3
   1c7de:	4484      	add	ip, r0
   1c7e0:	4663      	mov	r3, ip
   1c7e2:	468c      	mov	ip, r1
   1c7e4:	4484      	add	ip, r0
   1c7e6:	9308      	str	r3, [sp, #32]
   1c7e8:	4663      	mov	r3, ip
   1c7ea:	9304      	str	r3, [sp, #16]
   1c7ec:	9b06      	ldr	r3, [sp, #24]
   1c7ee:	2b00      	cmp	r3, #0
   1c7f0:	dd05      	ble.n	1c7fe <_dtoa_r+0x7fe>
   1c7f2:	4659      	mov	r1, fp
   1c7f4:	001a      	movs	r2, r3
   1c7f6:	4650      	mov	r0, sl
   1c7f8:	f001 fa9a 	bl	1dd30 <__lshift>
   1c7fc:	4683      	mov	fp, r0
   1c7fe:	9b04      	ldr	r3, [sp, #16]
   1c800:	2b00      	cmp	r3, #0
   1c802:	dd05      	ble.n	1c810 <_dtoa_r+0x810>
   1c804:	4649      	mov	r1, r9
   1c806:	001a      	movs	r2, r3
   1c808:	4650      	mov	r0, sl
   1c80a:	f001 fa91 	bl	1dd30 <__lshift>
   1c80e:	4681      	mov	r9, r0
   1c810:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1c812:	2b00      	cmp	r3, #0
   1c814:	d000      	beq.n	1c818 <_dtoa_r+0x818>
   1c816:	e094      	b.n	1c942 <_dtoa_r+0x942>
   1c818:	9b07      	ldr	r3, [sp, #28]
   1c81a:	2b00      	cmp	r3, #0
   1c81c:	dc00      	bgt.n	1c820 <_dtoa_r+0x820>
   1c81e:	e175      	b.n	1cb0c <_dtoa_r+0xb0c>
   1c820:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1c822:	2b00      	cmp	r3, #0
   1c824:	d100      	bne.n	1c828 <_dtoa_r+0x828>
   1c826:	e0a6      	b.n	1c976 <_dtoa_r+0x976>
   1c828:	9b08      	ldr	r3, [sp, #32]
   1c82a:	2b00      	cmp	r3, #0
   1c82c:	dd05      	ble.n	1c83a <_dtoa_r+0x83a>
   1c82e:	4641      	mov	r1, r8
   1c830:	001a      	movs	r2, r3
   1c832:	4650      	mov	r0, sl
   1c834:	f001 fa7c 	bl	1dd30 <__lshift>
   1c838:	4680      	mov	r8, r0
   1c83a:	4643      	mov	r3, r8
   1c83c:	930c      	str	r3, [sp, #48]	; 0x30
   1c83e:	2c00      	cmp	r4, #0
   1c840:	d000      	beq.n	1c844 <_dtoa_r+0x844>
   1c842:	e250      	b.n	1cce6 <_dtoa_r+0xce6>
   1c844:	9c07      	ldr	r4, [sp, #28]
   1c846:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1c848:	3c01      	subs	r4, #1
   1c84a:	0023      	movs	r3, r4
   1c84c:	4694      	mov	ip, r2
   1c84e:	4463      	add	r3, ip
   1c850:	9308      	str	r3, [sp, #32]
   1c852:	2301      	movs	r3, #1
   1c854:	4033      	ands	r3, r6
   1c856:	9307      	str	r3, [sp, #28]
   1c858:	464b      	mov	r3, r9
   1c85a:	9306      	str	r3, [sp, #24]
   1c85c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1c85e:	4657      	mov	r7, sl
   1c860:	4645      	mov	r5, r8
   1c862:	465e      	mov	r6, fp
   1c864:	4692      	mov	sl, r2
   1c866:	4698      	mov	r8, r3
   1c868:	9b06      	ldr	r3, [sp, #24]
   1c86a:	0030      	movs	r0, r6
   1c86c:	0019      	movs	r1, r3
   1c86e:	4699      	mov	r9, r3
   1c870:	f7ff fb1c 	bl	1beac <quorem>
   1c874:	0003      	movs	r3, r0
   1c876:	900b      	str	r0, [sp, #44]	; 0x2c
   1c878:	3330      	adds	r3, #48	; 0x30
   1c87a:	0029      	movs	r1, r5
   1c87c:	0030      	movs	r0, r6
   1c87e:	9304      	str	r3, [sp, #16]
   1c880:	f001 fab6 	bl	1ddf0 <__mcmp>
   1c884:	4649      	mov	r1, r9
   1c886:	0004      	movs	r4, r0
   1c888:	4642      	mov	r2, r8
   1c88a:	0038      	movs	r0, r7
   1c88c:	f001 faca 	bl	1de24 <__mdiff>
   1c890:	68c3      	ldr	r3, [r0, #12]
   1c892:	4681      	mov	r9, r0
   1c894:	2b00      	cmp	r3, #0
   1c896:	d000      	beq.n	1c89a <_dtoa_r+0x89a>
   1c898:	e11e      	b.n	1cad8 <_dtoa_r+0xad8>
   1c89a:	0001      	movs	r1, r0
   1c89c:	0030      	movs	r0, r6
   1c89e:	f001 faa7 	bl	1ddf0 <__mcmp>
   1c8a2:	4683      	mov	fp, r0
   1c8a4:	4649      	mov	r1, r9
   1c8a6:	0038      	movs	r0, r7
   1c8a8:	f001 f896 	bl	1d9d8 <_Bfree>
   1c8ac:	465b      	mov	r3, fp
   1c8ae:	9a22      	ldr	r2, [sp, #136]	; 0x88
   1c8b0:	4313      	orrs	r3, r2
   1c8b2:	d103      	bne.n	1c8bc <_dtoa_r+0x8bc>
   1c8b4:	9b07      	ldr	r3, [sp, #28]
   1c8b6:	2b00      	cmp	r3, #0
   1c8b8:	d100      	bne.n	1c8bc <_dtoa_r+0x8bc>
   1c8ba:	e306      	b.n	1ceca <_dtoa_r+0xeca>
   1c8bc:	2c00      	cmp	r4, #0
   1c8be:	da00      	bge.n	1c8c2 <_dtoa_r+0x8c2>
   1c8c0:	e1a8      	b.n	1cc14 <_dtoa_r+0xc14>
   1c8c2:	9b22      	ldr	r3, [sp, #136]	; 0x88
   1c8c4:	431c      	orrs	r4, r3
   1c8c6:	d103      	bne.n	1c8d0 <_dtoa_r+0x8d0>
   1c8c8:	9b07      	ldr	r3, [sp, #28]
   1c8ca:	2b00      	cmp	r3, #0
   1c8cc:	d100      	bne.n	1c8d0 <_dtoa_r+0x8d0>
   1c8ce:	e1a1      	b.n	1cc14 <_dtoa_r+0xc14>
   1c8d0:	465b      	mov	r3, fp
   1c8d2:	2b00      	cmp	r3, #0
   1c8d4:	dd00      	ble.n	1c8d8 <_dtoa_r+0x8d8>
   1c8d6:	e282      	b.n	1cdde <_dtoa_r+0xdde>
   1c8d8:	4669      	mov	r1, sp
   1c8da:	4652      	mov	r2, sl
   1c8dc:	4653      	mov	r3, sl
   1c8de:	7c09      	ldrb	r1, [r1, #16]
   1c8e0:	1c5c      	adds	r4, r3, #1
   1c8e2:	7011      	strb	r1, [r2, #0]
   1c8e4:	9a08      	ldr	r2, [sp, #32]
   1c8e6:	4552      	cmp	r2, sl
   1c8e8:	d100      	bne.n	1c8ec <_dtoa_r+0x8ec>
   1c8ea:	e28a      	b.n	1ce02 <_dtoa_r+0xe02>
   1c8ec:	0031      	movs	r1, r6
   1c8ee:	2300      	movs	r3, #0
   1c8f0:	220a      	movs	r2, #10
   1c8f2:	0038      	movs	r0, r7
   1c8f4:	f001 f87a 	bl	1d9ec <__multadd>
   1c8f8:	2300      	movs	r3, #0
   1c8fa:	0006      	movs	r6, r0
   1c8fc:	220a      	movs	r2, #10
   1c8fe:	0029      	movs	r1, r5
   1c900:	0038      	movs	r0, r7
   1c902:	4545      	cmp	r5, r8
   1c904:	d100      	bne.n	1c908 <_dtoa_r+0x908>
   1c906:	e0e1      	b.n	1cacc <_dtoa_r+0xacc>
   1c908:	f001 f870 	bl	1d9ec <__multadd>
   1c90c:	4641      	mov	r1, r8
   1c90e:	0005      	movs	r5, r0
   1c910:	2300      	movs	r3, #0
   1c912:	220a      	movs	r2, #10
   1c914:	0038      	movs	r0, r7
   1c916:	f001 f869 	bl	1d9ec <__multadd>
   1c91a:	46a2      	mov	sl, r4
   1c91c:	4680      	mov	r8, r0
   1c91e:	e7a3      	b.n	1c868 <_dtoa_r+0x868>
   1c920:	201c      	movs	r0, #28
   1c922:	9b06      	ldr	r3, [sp, #24]
   1c924:	469c      	mov	ip, r3
   1c926:	4484      	add	ip, r0
   1c928:	4663      	mov	r3, ip
   1c92a:	9306      	str	r3, [sp, #24]
   1c92c:	9b08      	ldr	r3, [sp, #32]
   1c92e:	469c      	mov	ip, r3
   1c930:	4484      	add	ip, r0
   1c932:	4663      	mov	r3, ip
   1c934:	9308      	str	r3, [sp, #32]
   1c936:	9b04      	ldr	r3, [sp, #16]
   1c938:	469c      	mov	ip, r3
   1c93a:	4484      	add	ip, r0
   1c93c:	4663      	mov	r3, ip
   1c93e:	9304      	str	r3, [sp, #16]
   1c940:	e754      	b.n	1c7ec <_dtoa_r+0x7ec>
   1c942:	4649      	mov	r1, r9
   1c944:	4658      	mov	r0, fp
   1c946:	f001 fa53 	bl	1ddf0 <__mcmp>
   1c94a:	2800      	cmp	r0, #0
   1c94c:	db00      	blt.n	1c950 <_dtoa_r+0x950>
   1c94e:	e763      	b.n	1c818 <_dtoa_r+0x818>
   1c950:	9b03      	ldr	r3, [sp, #12]
   1c952:	4659      	mov	r1, fp
   1c954:	3b01      	subs	r3, #1
   1c956:	9303      	str	r3, [sp, #12]
   1c958:	220a      	movs	r2, #10
   1c95a:	2300      	movs	r3, #0
   1c95c:	4650      	mov	r0, sl
   1c95e:	f001 f845 	bl	1d9ec <__multadd>
   1c962:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1c964:	4683      	mov	fp, r0
   1c966:	2b00      	cmp	r3, #0
   1c968:	d000      	beq.n	1c96c <_dtoa_r+0x96c>
   1c96a:	e2ca      	b.n	1cf02 <_dtoa_r+0xf02>
   1c96c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1c96e:	2b00      	cmp	r3, #0
   1c970:	dc00      	bgt.n	1c974 <_dtoa_r+0x974>
   1c972:	e2d8      	b.n	1cf26 <_dtoa_r+0xf26>
   1c974:	9307      	str	r3, [sp, #28]
   1c976:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1c978:	465d      	mov	r5, fp
   1c97a:	2400      	movs	r4, #0
   1c97c:	9f07      	ldr	r7, [sp, #28]
   1c97e:	469b      	mov	fp, r3
   1c980:	e006      	b.n	1c990 <_dtoa_r+0x990>
   1c982:	0029      	movs	r1, r5
   1c984:	2300      	movs	r3, #0
   1c986:	220a      	movs	r2, #10
   1c988:	4650      	mov	r0, sl
   1c98a:	f001 f82f 	bl	1d9ec <__multadd>
   1c98e:	0005      	movs	r5, r0
   1c990:	4649      	mov	r1, r9
   1c992:	0028      	movs	r0, r5
   1c994:	f7ff fa8a 	bl	1beac <quorem>
   1c998:	465b      	mov	r3, fp
   1c99a:	3030      	adds	r0, #48	; 0x30
   1c99c:	5518      	strb	r0, [r3, r4]
   1c99e:	3401      	adds	r4, #1
   1c9a0:	42bc      	cmp	r4, r7
   1c9a2:	dbee      	blt.n	1c982 <_dtoa_r+0x982>
   1c9a4:	46ab      	mov	fp, r5
   1c9a6:	0006      	movs	r6, r0
   1c9a8:	9c07      	ldr	r4, [sp, #28]
   1c9aa:	2c00      	cmp	r4, #0
   1c9ac:	dc00      	bgt.n	1c9b0 <_dtoa_r+0x9b0>
   1c9ae:	e237      	b.n	1ce20 <_dtoa_r+0xe20>
   1c9b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1c9b2:	2700      	movs	r7, #0
   1c9b4:	469c      	mov	ip, r3
   1c9b6:	4464      	add	r4, ip
   1c9b8:	4659      	mov	r1, fp
   1c9ba:	2201      	movs	r2, #1
   1c9bc:	4650      	mov	r0, sl
   1c9be:	f001 f9b7 	bl	1dd30 <__lshift>
   1c9c2:	4649      	mov	r1, r9
   1c9c4:	4683      	mov	fp, r0
   1c9c6:	f001 fa13 	bl	1ddf0 <__mcmp>
   1c9ca:	2800      	cmp	r0, #0
   1c9cc:	dc00      	bgt.n	1c9d0 <_dtoa_r+0x9d0>
   1c9ce:	e144      	b.n	1cc5a <_dtoa_r+0xc5a>
   1c9d0:	1e65      	subs	r5, r4, #1
   1c9d2:	782b      	ldrb	r3, [r5, #0]
   1c9d4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1c9d6:	e006      	b.n	1c9e6 <_dtoa_r+0x9e6>
   1c9d8:	4295      	cmp	r5, r2
   1c9da:	d100      	bne.n	1c9de <_dtoa_r+0x9de>
   1c9dc:	e0b1      	b.n	1cb42 <_dtoa_r+0xb42>
   1c9de:	3c02      	subs	r4, #2
   1c9e0:	7823      	ldrb	r3, [r4, #0]
   1c9e2:	002c      	movs	r4, r5
   1c9e4:	3d01      	subs	r5, #1
   1c9e6:	2b39      	cmp	r3, #57	; 0x39
   1c9e8:	d0f6      	beq.n	1c9d8 <_dtoa_r+0x9d8>
   1c9ea:	3301      	adds	r3, #1
   1c9ec:	702b      	strb	r3, [r5, #0]
   1c9ee:	4649      	mov	r1, r9
   1c9f0:	4650      	mov	r0, sl
   1c9f2:	f000 fff1 	bl	1d9d8 <_Bfree>
   1c9f6:	4643      	mov	r3, r8
   1c9f8:	2b00      	cmp	r3, #0
   1c9fa:	d100      	bne.n	1c9fe <_dtoa_r+0x9fe>
   1c9fc:	e52f      	b.n	1c45e <_dtoa_r+0x45e>
   1c9fe:	2f00      	cmp	r7, #0
   1ca00:	d005      	beq.n	1ca0e <_dtoa_r+0xa0e>
   1ca02:	4547      	cmp	r7, r8
   1ca04:	d003      	beq.n	1ca0e <_dtoa_r+0xa0e>
   1ca06:	0039      	movs	r1, r7
   1ca08:	4650      	mov	r0, sl
   1ca0a:	f000 ffe5 	bl	1d9d8 <_Bfree>
   1ca0e:	4641      	mov	r1, r8
   1ca10:	4650      	mov	r0, sl
   1ca12:	f000 ffe1 	bl	1d9d8 <_Bfree>
   1ca16:	e522      	b.n	1c45e <_dtoa_r+0x45e>
   1ca18:	0013      	movs	r3, r2
   1ca1a:	e675      	b.n	1c708 <_dtoa_r+0x708>
   1ca1c:	2e00      	cmp	r6, #0
   1ca1e:	d000      	beq.n	1ca22 <_dtoa_r+0xa22>
   1ca20:	e6ab      	b.n	1c77a <_dtoa_r+0x77a>
   1ca22:	033b      	lsls	r3, r7, #12
   1ca24:	2400      	movs	r4, #0
   1ca26:	2b00      	cmp	r3, #0
   1ca28:	d000      	beq.n	1ca2c <_dtoa_r+0xa2c>
   1ca2a:	e6bf      	b.n	1c7ac <_dtoa_r+0x7ac>
   1ca2c:	4bba      	ldr	r3, [pc, #744]	; (1cd18 <_dtoa_r+0xd18>)
   1ca2e:	423b      	tst	r3, r7
   1ca30:	d100      	bne.n	1ca34 <_dtoa_r+0xa34>
   1ca32:	e6bb      	b.n	1c7ac <_dtoa_r+0x7ac>
   1ca34:	9b06      	ldr	r3, [sp, #24]
   1ca36:	3401      	adds	r4, #1
   1ca38:	3301      	adds	r3, #1
   1ca3a:	9306      	str	r3, [sp, #24]
   1ca3c:	9b04      	ldr	r3, [sp, #16]
   1ca3e:	3301      	adds	r3, #1
   1ca40:	9304      	str	r3, [sp, #16]
   1ca42:	e6b3      	b.n	1c7ac <_dtoa_r+0x7ac>
   1ca44:	2301      	movs	r3, #1
   1ca46:	930b      	str	r3, [sp, #44]	; 0x2c
   1ca48:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   1ca4a:	2b00      	cmp	r3, #0
   1ca4c:	dc00      	bgt.n	1ca50 <_dtoa_r+0xa50>
   1ca4e:	e0d1      	b.n	1cbf4 <_dtoa_r+0xbf4>
   1ca50:	001d      	movs	r5, r3
   1ca52:	4698      	mov	r8, r3
   1ca54:	930e      	str	r3, [sp, #56]	; 0x38
   1ca56:	9307      	str	r3, [sp, #28]
   1ca58:	f7ff fbc8 	bl	1c1ec <_dtoa_r+0x1ec>
   1ca5c:	9b07      	ldr	r3, [sp, #28]
   1ca5e:	2b00      	cmp	r3, #0
   1ca60:	dd00      	ble.n	1ca64 <_dtoa_r+0xa64>
   1ca62:	e553      	b.n	1c50c <_dtoa_r+0x50c>
   1ca64:	d000      	beq.n	1ca68 <_dtoa_r+0xa68>
   1ca66:	e0ad      	b.n	1cbc4 <_dtoa_r+0xbc4>
   1ca68:	9804      	ldr	r0, [sp, #16]
   1ca6a:	9905      	ldr	r1, [sp, #20]
   1ca6c:	2200      	movs	r2, #0
   1ca6e:	4bab      	ldr	r3, [pc, #684]	; (1cd1c <_dtoa_r+0xd1c>)
   1ca70:	f7fb ff22 	bl	188b8 <__aeabi_dmul>
   1ca74:	003b      	movs	r3, r7
   1ca76:	0032      	movs	r2, r6
   1ca78:	f7f9 ff42 	bl	16900 <__aeabi_dcmpge>
   1ca7c:	2300      	movs	r3, #0
   1ca7e:	4699      	mov	r9, r3
   1ca80:	4698      	mov	r8, r3
   1ca82:	2800      	cmp	r0, #0
   1ca84:	d055      	beq.n	1cb32 <_dtoa_r+0xb32>
   1ca86:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   1ca88:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   1ca8a:	43db      	mvns	r3, r3
   1ca8c:	9303      	str	r3, [sp, #12]
   1ca8e:	4649      	mov	r1, r9
   1ca90:	4650      	mov	r0, sl
   1ca92:	f000 ffa1 	bl	1d9d8 <_Bfree>
   1ca96:	4643      	mov	r3, r8
   1ca98:	2b00      	cmp	r3, #0
   1ca9a:	d100      	bne.n	1ca9e <_dtoa_r+0xa9e>
   1ca9c:	e4df      	b.n	1c45e <_dtoa_r+0x45e>
   1ca9e:	e7b6      	b.n	1ca0e <_dtoa_r+0xa0e>
   1caa0:	464a      	mov	r2, r9
   1caa2:	4659      	mov	r1, fp
   1caa4:	4650      	mov	r0, sl
   1caa6:	f001 f8e3 	bl	1dc70 <__pow5mult>
   1caaa:	4683      	mov	fp, r0
   1caac:	e653      	b.n	1c756 <_dtoa_r+0x756>
   1caae:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   1cab0:	2a00      	cmp	r2, #0
   1cab2:	d100      	bne.n	1cab6 <_dtoa_r+0xab6>
   1cab4:	e1b6      	b.n	1ce24 <_dtoa_r+0xe24>
   1cab6:	4a9a      	ldr	r2, [pc, #616]	; (1cd20 <_dtoa_r+0xd20>)
   1cab8:	464c      	mov	r4, r9
   1caba:	4694      	mov	ip, r2
   1cabc:	9a06      	ldr	r2, [sp, #24]
   1cabe:	4463      	add	r3, ip
   1cac0:	9208      	str	r2, [sp, #32]
   1cac2:	e5d5      	b.n	1c670 <_dtoa_r+0x670>
   1cac4:	2e00      	cmp	r6, #0
   1cac6:	d000      	beq.n	1caca <_dtoa_r+0xaca>
   1cac8:	e670      	b.n	1c7ac <_dtoa_r+0x7ac>
   1caca:	e7aa      	b.n	1ca22 <_dtoa_r+0xa22>
   1cacc:	f000 ff8e 	bl	1d9ec <__multadd>
   1cad0:	46a2      	mov	sl, r4
   1cad2:	0005      	movs	r5, r0
   1cad4:	4680      	mov	r8, r0
   1cad6:	e6c7      	b.n	1c868 <_dtoa_r+0x868>
   1cad8:	2301      	movs	r3, #1
   1cada:	469b      	mov	fp, r3
   1cadc:	e6e2      	b.n	1c8a4 <_dtoa_r+0x8a4>
   1cade:	2300      	movs	r3, #0
   1cae0:	930b      	str	r3, [sp, #44]	; 0x2c
   1cae2:	9b22      	ldr	r3, [sp, #136]	; 0x88
   1cae4:	2b02      	cmp	r3, #2
   1cae6:	d0af      	beq.n	1ca48 <_dtoa_r+0xa48>
   1cae8:	2400      	movs	r4, #0
   1caea:	4653      	mov	r3, sl
   1caec:	0021      	movs	r1, r4
   1caee:	645c      	str	r4, [r3, #68]	; 0x44
   1caf0:	4650      	mov	r0, sl
   1caf2:	f000 ff49 	bl	1d988 <_Balloc>
   1caf6:	4653      	mov	r3, sl
   1caf8:	6418      	str	r0, [r3, #64]	; 0x40
   1cafa:	2301      	movs	r3, #1
   1cafc:	425b      	negs	r3, r3
   1cafe:	9307      	str	r3, [sp, #28]
   1cb00:	930e      	str	r3, [sp, #56]	; 0x38
   1cb02:	3302      	adds	r3, #2
   1cb04:	900a      	str	r0, [sp, #40]	; 0x28
   1cb06:	9423      	str	r4, [sp, #140]	; 0x8c
   1cb08:	930b      	str	r3, [sp, #44]	; 0x2c
   1cb0a:	e4ec      	b.n	1c4e6 <_dtoa_r+0x4e6>
   1cb0c:	9b22      	ldr	r3, [sp, #136]	; 0x88
   1cb0e:	2b02      	cmp	r3, #2
   1cb10:	dc00      	bgt.n	1cb14 <_dtoa_r+0xb14>
   1cb12:	e685      	b.n	1c820 <_dtoa_r+0x820>
   1cb14:	9b07      	ldr	r3, [sp, #28]
   1cb16:	2b00      	cmp	r3, #0
   1cb18:	d1b5      	bne.n	1ca86 <_dtoa_r+0xa86>
   1cb1a:	4649      	mov	r1, r9
   1cb1c:	2205      	movs	r2, #5
   1cb1e:	4650      	mov	r0, sl
   1cb20:	f000 ff64 	bl	1d9ec <__multadd>
   1cb24:	4681      	mov	r9, r0
   1cb26:	0001      	movs	r1, r0
   1cb28:	4658      	mov	r0, fp
   1cb2a:	f001 f961 	bl	1ddf0 <__mcmp>
   1cb2e:	2800      	cmp	r0, #0
   1cb30:	dda9      	ble.n	1ca86 <_dtoa_r+0xa86>
   1cb32:	2331      	movs	r3, #49	; 0x31
   1cb34:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1cb36:	7013      	strb	r3, [r2, #0]
   1cb38:	9b03      	ldr	r3, [sp, #12]
   1cb3a:	1c54      	adds	r4, r2, #1
   1cb3c:	3301      	adds	r3, #1
   1cb3e:	9303      	str	r3, [sp, #12]
   1cb40:	e7a5      	b.n	1ca8e <_dtoa_r+0xa8e>
   1cb42:	9b03      	ldr	r3, [sp, #12]
   1cb44:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1cb46:	3301      	adds	r3, #1
   1cb48:	9303      	str	r3, [sp, #12]
   1cb4a:	2331      	movs	r3, #49	; 0x31
   1cb4c:	7013      	strb	r3, [r2, #0]
   1cb4e:	e74e      	b.n	1c9ee <_dtoa_r+0x9ee>
   1cb50:	2300      	movs	r3, #0
   1cb52:	930b      	str	r3, [sp, #44]	; 0x2c
   1cb54:	f7ff fb3d 	bl	1c1d2 <_dtoa_r+0x1d2>
   1cb58:	9b06      	ldr	r3, [sp, #24]
   1cb5a:	465c      	mov	r4, fp
   1cb5c:	469b      	mov	fp, r3
   1cb5e:	9b07      	ldr	r3, [sp, #28]
   1cb60:	469a      	mov	sl, r3
   1cb62:	e47c      	b.n	1c45e <_dtoa_r+0x45e>
   1cb64:	4640      	mov	r0, r8
   1cb66:	f7fc fc71 	bl	1944c <__aeabi_i2d>
   1cb6a:	0032      	movs	r2, r6
   1cb6c:	003b      	movs	r3, r7
   1cb6e:	f7fb fea3 	bl	188b8 <__aeabi_dmul>
   1cb72:	2200      	movs	r2, #0
   1cb74:	4b6b      	ldr	r3, [pc, #428]	; (1cd24 <_dtoa_r+0xd24>)
   1cb76:	f7fa ff5b 	bl	17a30 <__aeabi_dadd>
   1cb7a:	4a6b      	ldr	r2, [pc, #428]	; (1cd28 <_dtoa_r+0xd28>)
   1cb7c:	000b      	movs	r3, r1
   1cb7e:	4694      	mov	ip, r2
   1cb80:	4463      	add	r3, ip
   1cb82:	9008      	str	r0, [sp, #32]
   1cb84:	9109      	str	r1, [sp, #36]	; 0x24
   1cb86:	9309      	str	r3, [sp, #36]	; 0x24
   1cb88:	2200      	movs	r2, #0
   1cb8a:	4b64      	ldr	r3, [pc, #400]	; (1cd1c <_dtoa_r+0xd1c>)
   1cb8c:	0030      	movs	r0, r6
   1cb8e:	0039      	movs	r1, r7
   1cb90:	f7fc f912 	bl	18db8 <__aeabi_dsub>
   1cb94:	9e08      	ldr	r6, [sp, #32]
   1cb96:	9f09      	ldr	r7, [sp, #36]	; 0x24
   1cb98:	0032      	movs	r2, r6
   1cb9a:	003b      	movs	r3, r7
   1cb9c:	0004      	movs	r4, r0
   1cb9e:	000d      	movs	r5, r1
   1cba0:	f7f9 fea4 	bl	168ec <__aeabi_dcmpgt>
   1cba4:	2800      	cmp	r0, #0
   1cba6:	d000      	beq.n	1cbaa <_dtoa_r+0xbaa>
   1cba8:	e0b2      	b.n	1cd10 <_dtoa_r+0xd10>
   1cbaa:	2080      	movs	r0, #128	; 0x80
   1cbac:	0600      	lsls	r0, r0, #24
   1cbae:	4684      	mov	ip, r0
   1cbb0:	0039      	movs	r1, r7
   1cbb2:	4461      	add	r1, ip
   1cbb4:	000b      	movs	r3, r1
   1cbb6:	0032      	movs	r2, r6
   1cbb8:	0020      	movs	r0, r4
   1cbba:	0029      	movs	r1, r5
   1cbbc:	f7f9 fe82 	bl	168c4 <__aeabi_dcmplt>
   1cbc0:	2800      	cmp	r0, #0
   1cbc2:	d057      	beq.n	1cc74 <_dtoa_r+0xc74>
   1cbc4:	2300      	movs	r3, #0
   1cbc6:	4699      	mov	r9, r3
   1cbc8:	4698      	mov	r8, r3
   1cbca:	e75c      	b.n	1ca86 <_dtoa_r+0xa86>
   1cbcc:	980a      	ldr	r0, [sp, #40]	; 0x28
   1cbce:	f7ff fa4c 	bl	1c06a <_dtoa_r+0x6a>
   1cbd2:	1ae2      	subs	r2, r4, r3
   1cbd4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1cbd6:	46a1      	mov	r9, r4
   1cbd8:	469c      	mov	ip, r3
   1cbda:	4494      	add	ip, r2
   1cbdc:	4663      	mov	r3, ip
   1cbde:	2400      	movs	r4, #0
   1cbe0:	930d      	str	r3, [sp, #52]	; 0x34
   1cbe2:	e53e      	b.n	1c662 <_dtoa_r+0x662>
   1cbe4:	9a10      	ldr	r2, [sp, #64]	; 0x40
   1cbe6:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1cbe8:	9208      	str	r2, [sp, #32]
   1cbea:	9309      	str	r3, [sp, #36]	; 0x24
   1cbec:	2302      	movs	r3, #2
   1cbee:	4698      	mov	r8, r3
   1cbf0:	f7ff fb3a 	bl	1c268 <_dtoa_r+0x268>
   1cbf4:	2300      	movs	r3, #0
   1cbf6:	4652      	mov	r2, sl
   1cbf8:	2100      	movs	r1, #0
   1cbfa:	6453      	str	r3, [r2, #68]	; 0x44
   1cbfc:	4650      	mov	r0, sl
   1cbfe:	f000 fec3 	bl	1d988 <_Balloc>
   1cc02:	4653      	mov	r3, sl
   1cc04:	6418      	str	r0, [r3, #64]	; 0x40
   1cc06:	2301      	movs	r3, #1
   1cc08:	900a      	str	r0, [sp, #40]	; 0x28
   1cc0a:	9307      	str	r3, [sp, #28]
   1cc0c:	9323      	str	r3, [sp, #140]	; 0x8c
   1cc0e:	930e      	str	r3, [sp, #56]	; 0x38
   1cc10:	f7ff fb07 	bl	1c222 <_dtoa_r+0x222>
   1cc14:	4643      	mov	r3, r8
   1cc16:	930c      	str	r3, [sp, #48]	; 0x30
   1cc18:	465b      	mov	r3, fp
   1cc1a:	9a06      	ldr	r2, [sp, #24]
   1cc1c:	46a8      	mov	r8, r5
   1cc1e:	46b3      	mov	fp, r6
   1cc20:	4655      	mov	r5, sl
   1cc22:	9e04      	ldr	r6, [sp, #16]
   1cc24:	4691      	mov	r9, r2
   1cc26:	46ba      	mov	sl, r7
   1cc28:	2b00      	cmp	r3, #0
   1cc2a:	dd10      	ble.n	1cc4e <_dtoa_r+0xc4e>
   1cc2c:	4659      	mov	r1, fp
   1cc2e:	2201      	movs	r2, #1
   1cc30:	0038      	movs	r0, r7
   1cc32:	f001 f87d 	bl	1dd30 <__lshift>
   1cc36:	4649      	mov	r1, r9
   1cc38:	4683      	mov	fp, r0
   1cc3a:	f001 f8d9 	bl	1ddf0 <__mcmp>
   1cc3e:	2800      	cmp	r0, #0
   1cc40:	dc00      	bgt.n	1cc44 <_dtoa_r+0xc44>
   1cc42:	e157      	b.n	1cef4 <_dtoa_r+0xef4>
   1cc44:	2e39      	cmp	r6, #57	; 0x39
   1cc46:	d100      	bne.n	1cc4a <_dtoa_r+0xc4a>
   1cc48:	e122      	b.n	1ce90 <_dtoa_r+0xe90>
   1cc4a:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
   1cc4c:	3631      	adds	r6, #49	; 0x31
   1cc4e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1cc50:	4647      	mov	r7, r8
   1cc52:	1c6c      	adds	r4, r5, #1
   1cc54:	702e      	strb	r6, [r5, #0]
   1cc56:	4698      	mov	r8, r3
   1cc58:	e6c9      	b.n	1c9ee <_dtoa_r+0x9ee>
   1cc5a:	2800      	cmp	r0, #0
   1cc5c:	d103      	bne.n	1cc66 <_dtoa_r+0xc66>
   1cc5e:	07f3      	lsls	r3, r6, #31
   1cc60:	d501      	bpl.n	1cc66 <_dtoa_r+0xc66>
   1cc62:	e6b5      	b.n	1c9d0 <_dtoa_r+0x9d0>
   1cc64:	001c      	movs	r4, r3
   1cc66:	1e63      	subs	r3, r4, #1
   1cc68:	781a      	ldrb	r2, [r3, #0]
   1cc6a:	2a30      	cmp	r2, #48	; 0x30
   1cc6c:	d0fa      	beq.n	1cc64 <_dtoa_r+0xc64>
   1cc6e:	e6be      	b.n	1c9ee <_dtoa_r+0x9ee>
   1cc70:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1cc72:	4699      	mov	r9, r3
   1cc74:	9e10      	ldr	r6, [sp, #64]	; 0x40
   1cc76:	9f11      	ldr	r7, [sp, #68]	; 0x44
   1cc78:	e435      	b.n	1c4e6 <_dtoa_r+0x4e6>
   1cc7a:	2501      	movs	r5, #1
   1cc7c:	f7ff fab4 	bl	1c1e8 <_dtoa_r+0x1e8>
   1cc80:	9b03      	ldr	r3, [sp, #12]
   1cc82:	2b00      	cmp	r3, #0
   1cc84:	d100      	bne.n	1cc88 <_dtoa_r+0xc88>
   1cc86:	e0d4      	b.n	1ce32 <_dtoa_r+0xe32>
   1cc88:	9810      	ldr	r0, [sp, #64]	; 0x40
   1cc8a:	9911      	ldr	r1, [sp, #68]	; 0x44
   1cc8c:	425c      	negs	r4, r3
   1cc8e:	230f      	movs	r3, #15
   1cc90:	4a26      	ldr	r2, [pc, #152]	; (1cd2c <_dtoa_r+0xd2c>)
   1cc92:	4023      	ands	r3, r4
   1cc94:	00db      	lsls	r3, r3, #3
   1cc96:	18d3      	adds	r3, r2, r3
   1cc98:	681a      	ldr	r2, [r3, #0]
   1cc9a:	685b      	ldr	r3, [r3, #4]
   1cc9c:	f7fb fe0c 	bl	188b8 <__aeabi_dmul>
   1cca0:	1124      	asrs	r4, r4, #4
   1cca2:	0006      	movs	r6, r0
   1cca4:	000f      	movs	r7, r1
   1cca6:	2c00      	cmp	r4, #0
   1cca8:	d100      	bne.n	1ccac <_dtoa_r+0xcac>
   1ccaa:	e149      	b.n	1cf40 <_dtoa_r+0xf40>
   1ccac:	2302      	movs	r3, #2
   1ccae:	4698      	mov	r8, r3
   1ccb0:	4d1f      	ldr	r5, [pc, #124]	; (1cd30 <_dtoa_r+0xd30>)
   1ccb2:	2301      	movs	r3, #1
   1ccb4:	4223      	tst	r3, r4
   1ccb6:	d009      	beq.n	1cccc <_dtoa_r+0xccc>
   1ccb8:	469c      	mov	ip, r3
   1ccba:	682a      	ldr	r2, [r5, #0]
   1ccbc:	686b      	ldr	r3, [r5, #4]
   1ccbe:	0030      	movs	r0, r6
   1ccc0:	0039      	movs	r1, r7
   1ccc2:	44e0      	add	r8, ip
   1ccc4:	f7fb fdf8 	bl	188b8 <__aeabi_dmul>
   1ccc8:	0006      	movs	r6, r0
   1ccca:	000f      	movs	r7, r1
   1cccc:	1064      	asrs	r4, r4, #1
   1ccce:	3508      	adds	r5, #8
   1ccd0:	2c00      	cmp	r4, #0
   1ccd2:	d1ee      	bne.n	1ccb2 <_dtoa_r+0xcb2>
   1ccd4:	f7ff fae4 	bl	1c2a0 <_dtoa_r+0x2a0>
   1ccd8:	9b03      	ldr	r3, [sp, #12]
   1ccda:	2730      	movs	r7, #48	; 0x30
   1ccdc:	3301      	adds	r3, #1
   1ccde:	9303      	str	r3, [sp, #12]
   1cce0:	2330      	movs	r3, #48	; 0x30
   1cce2:	702b      	strb	r3, [r5, #0]
   1cce4:	e4ac      	b.n	1c640 <_dtoa_r+0x640>
   1cce6:	6859      	ldr	r1, [r3, #4]
   1cce8:	4650      	mov	r0, sl
   1ccea:	f000 fe4d 	bl	1d988 <_Balloc>
   1ccee:	4643      	mov	r3, r8
   1ccf0:	4641      	mov	r1, r8
   1ccf2:	0004      	movs	r4, r0
   1ccf4:	691b      	ldr	r3, [r3, #16]
   1ccf6:	310c      	adds	r1, #12
   1ccf8:	1c9a      	adds	r2, r3, #2
   1ccfa:	0092      	lsls	r2, r2, #2
   1ccfc:	300c      	adds	r0, #12
   1ccfe:	f7fd f807 	bl	19d10 <memcpy>
   1cd02:	2201      	movs	r2, #1
   1cd04:	0021      	movs	r1, r4
   1cd06:	4650      	mov	r0, sl
   1cd08:	f001 f812 	bl	1dd30 <__lshift>
   1cd0c:	900c      	str	r0, [sp, #48]	; 0x30
   1cd0e:	e599      	b.n	1c844 <_dtoa_r+0x844>
   1cd10:	2300      	movs	r3, #0
   1cd12:	4699      	mov	r9, r3
   1cd14:	4698      	mov	r8, r3
   1cd16:	e70c      	b.n	1cb32 <_dtoa_r+0xb32>
   1cd18:	7ff00000 	.word	0x7ff00000
   1cd1c:	40140000 	.word	0x40140000
   1cd20:	00000433 	.word	0x00000433
   1cd24:	401c0000 	.word	0x401c0000
   1cd28:	fcc00000 	.word	0xfcc00000
   1cd2c:	00020808 	.word	0x00020808
   1cd30:	000207e0 	.word	0x000207e0
   1cd34:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1cd36:	498f      	ldr	r1, [pc, #572]	; (1cf74 <_dtoa_r+0xf74>)
   1cd38:	3b01      	subs	r3, #1
   1cd3a:	00db      	lsls	r3, r3, #3
   1cd3c:	18c9      	adds	r1, r1, r3
   1cd3e:	6808      	ldr	r0, [r1, #0]
   1cd40:	6849      	ldr	r1, [r1, #4]
   1cd42:	9a08      	ldr	r2, [sp, #32]
   1cd44:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1cd46:	f7fb fdb7 	bl	188b8 <__aeabi_dmul>
   1cd4a:	9014      	str	r0, [sp, #80]	; 0x50
   1cd4c:	9115      	str	r1, [sp, #84]	; 0x54
   1cd4e:	0039      	movs	r1, r7
   1cd50:	0030      	movs	r0, r6
   1cd52:	f7fc fb47 	bl	193e4 <__aeabi_d2iz>
   1cd56:	0005      	movs	r5, r0
   1cd58:	f7fc fb78 	bl	1944c <__aeabi_i2d>
   1cd5c:	0002      	movs	r2, r0
   1cd5e:	000b      	movs	r3, r1
   1cd60:	0030      	movs	r0, r6
   1cd62:	0039      	movs	r1, r7
   1cd64:	f7fc f828 	bl	18db8 <__aeabi_dsub>
   1cd68:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1cd6a:	9008      	str	r0, [sp, #32]
   1cd6c:	9109      	str	r1, [sp, #36]	; 0x24
   1cd6e:	990a      	ldr	r1, [sp, #40]	; 0x28
   1cd70:	001a      	movs	r2, r3
   1cd72:	468c      	mov	ip, r1
   1cd74:	3530      	adds	r5, #48	; 0x30
   1cd76:	4462      	add	r2, ip
   1cd78:	1c4c      	adds	r4, r1, #1
   1cd7a:	700d      	strb	r5, [r1, #0]
   1cd7c:	4690      	mov	r8, r2
   1cd7e:	2b01      	cmp	r3, #1
   1cd80:	d01b      	beq.n	1cdba <_dtoa_r+0xdba>
   1cd82:	9808      	ldr	r0, [sp, #32]
   1cd84:	9909      	ldr	r1, [sp, #36]	; 0x24
   1cd86:	0025      	movs	r5, r4
   1cd88:	2200      	movs	r2, #0
   1cd8a:	4b7b      	ldr	r3, [pc, #492]	; (1cf78 <_dtoa_r+0xf78>)
   1cd8c:	f7fb fd94 	bl	188b8 <__aeabi_dmul>
   1cd90:	000f      	movs	r7, r1
   1cd92:	0006      	movs	r6, r0
   1cd94:	f7fc fb26 	bl	193e4 <__aeabi_d2iz>
   1cd98:	0004      	movs	r4, r0
   1cd9a:	f7fc fb57 	bl	1944c <__aeabi_i2d>
   1cd9e:	3430      	adds	r4, #48	; 0x30
   1cda0:	0002      	movs	r2, r0
   1cda2:	000b      	movs	r3, r1
   1cda4:	0030      	movs	r0, r6
   1cda6:	0039      	movs	r1, r7
   1cda8:	f7fc f806 	bl	18db8 <__aeabi_dsub>
   1cdac:	702c      	strb	r4, [r5, #0]
   1cdae:	3501      	adds	r5, #1
   1cdb0:	45a8      	cmp	r8, r5
   1cdb2:	d1e9      	bne.n	1cd88 <_dtoa_r+0xd88>
   1cdb4:	4644      	mov	r4, r8
   1cdb6:	9008      	str	r0, [sp, #32]
   1cdb8:	9109      	str	r1, [sp, #36]	; 0x24
   1cdba:	9814      	ldr	r0, [sp, #80]	; 0x50
   1cdbc:	9915      	ldr	r1, [sp, #84]	; 0x54
   1cdbe:	2200      	movs	r2, #0
   1cdc0:	4b6e      	ldr	r3, [pc, #440]	; (1cf7c <_dtoa_r+0xf7c>)
   1cdc2:	f7fa fe35 	bl	17a30 <__aeabi_dadd>
   1cdc6:	9a08      	ldr	r2, [sp, #32]
   1cdc8:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1cdca:	f7f9 fd7b 	bl	168c4 <__aeabi_dcmplt>
   1cdce:	2800      	cmp	r0, #0
   1cdd0:	d067      	beq.n	1cea2 <_dtoa_r+0xea2>
   1cdd2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   1cdd4:	1e65      	subs	r5, r4, #1
   1cdd6:	9303      	str	r3, [sp, #12]
   1cdd8:	782f      	ldrb	r7, [r5, #0]
   1cdda:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1cddc:	e42e      	b.n	1c63c <_dtoa_r+0x63c>
   1cdde:	4643      	mov	r3, r8
   1cde0:	46b3      	mov	fp, r6
   1cde2:	930c      	str	r3, [sp, #48]	; 0x30
   1cde4:	9e04      	ldr	r6, [sp, #16]
   1cde6:	9b06      	ldr	r3, [sp, #24]
   1cde8:	46a8      	mov	r8, r5
   1cdea:	4699      	mov	r9, r3
   1cdec:	4655      	mov	r5, sl
   1cdee:	46ba      	mov	sl, r7
   1cdf0:	2e39      	cmp	r6, #57	; 0x39
   1cdf2:	d04d      	beq.n	1ce90 <_dtoa_r+0xe90>
   1cdf4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1cdf6:	3601      	adds	r6, #1
   1cdf8:	4647      	mov	r7, r8
   1cdfa:	1c6c      	adds	r4, r5, #1
   1cdfc:	702e      	strb	r6, [r5, #0]
   1cdfe:	4698      	mov	r8, r3
   1ce00:	e5f5      	b.n	1c9ee <_dtoa_r+0x9ee>
   1ce02:	4642      	mov	r2, r8
   1ce04:	9b06      	ldr	r3, [sp, #24]
   1ce06:	46b3      	mov	fp, r6
   1ce08:	46ba      	mov	sl, r7
   1ce0a:	9e04      	ldr	r6, [sp, #16]
   1ce0c:	4699      	mov	r9, r3
   1ce0e:	002f      	movs	r7, r5
   1ce10:	4690      	mov	r8, r2
   1ce12:	e5d1      	b.n	1c9b8 <_dtoa_r+0x9b8>
   1ce14:	9b06      	ldr	r3, [sp, #24]
   1ce16:	9a07      	ldr	r2, [sp, #28]
   1ce18:	1a9b      	subs	r3, r3, r2
   1ce1a:	9308      	str	r3, [sp, #32]
   1ce1c:	2300      	movs	r3, #0
   1ce1e:	e427      	b.n	1c670 <_dtoa_r+0x670>
   1ce20:	2401      	movs	r4, #1
   1ce22:	e5c5      	b.n	1c9b0 <_dtoa_r+0x9b0>
   1ce24:	2336      	movs	r3, #54	; 0x36
   1ce26:	9a16      	ldr	r2, [sp, #88]	; 0x58
   1ce28:	464c      	mov	r4, r9
   1ce2a:	1a9b      	subs	r3, r3, r2
   1ce2c:	9a06      	ldr	r2, [sp, #24]
   1ce2e:	9208      	str	r2, [sp, #32]
   1ce30:	e41e      	b.n	1c670 <_dtoa_r+0x670>
   1ce32:	2302      	movs	r3, #2
   1ce34:	9e10      	ldr	r6, [sp, #64]	; 0x40
   1ce36:	9f11      	ldr	r7, [sp, #68]	; 0x44
   1ce38:	4698      	mov	r8, r3
   1ce3a:	f7ff fa31 	bl	1c2a0 <_dtoa_r+0x2a0>
   1ce3e:	9b07      	ldr	r3, [sp, #28]
   1ce40:	2b00      	cmp	r3, #0
   1ce42:	d100      	bne.n	1ce46 <_dtoa_r+0xe46>
   1ce44:	e68e      	b.n	1cb64 <_dtoa_r+0xb64>
   1ce46:	9c0e      	ldr	r4, [sp, #56]	; 0x38
   1ce48:	2c00      	cmp	r4, #0
   1ce4a:	dc00      	bgt.n	1ce4e <_dtoa_r+0xe4e>
   1ce4c:	e712      	b.n	1cc74 <_dtoa_r+0xc74>
   1ce4e:	9b03      	ldr	r3, [sp, #12]
   1ce50:	2200      	movs	r2, #0
   1ce52:	3b01      	subs	r3, #1
   1ce54:	9313      	str	r3, [sp, #76]	; 0x4c
   1ce56:	0030      	movs	r0, r6
   1ce58:	4b47      	ldr	r3, [pc, #284]	; (1cf78 <_dtoa_r+0xf78>)
   1ce5a:	0039      	movs	r1, r7
   1ce5c:	f7fb fd2c 	bl	188b8 <__aeabi_dmul>
   1ce60:	0006      	movs	r6, r0
   1ce62:	4640      	mov	r0, r8
   1ce64:	000f      	movs	r7, r1
   1ce66:	3001      	adds	r0, #1
   1ce68:	f7fc faf0 	bl	1944c <__aeabi_i2d>
   1ce6c:	0032      	movs	r2, r6
   1ce6e:	003b      	movs	r3, r7
   1ce70:	f7fb fd22 	bl	188b8 <__aeabi_dmul>
   1ce74:	2200      	movs	r2, #0
   1ce76:	4b42      	ldr	r3, [pc, #264]	; (1cf80 <_dtoa_r+0xf80>)
   1ce78:	f7fa fdda 	bl	17a30 <__aeabi_dadd>
   1ce7c:	4a41      	ldr	r2, [pc, #260]	; (1cf84 <_dtoa_r+0xf84>)
   1ce7e:	000b      	movs	r3, r1
   1ce80:	4694      	mov	ip, r2
   1ce82:	4463      	add	r3, ip
   1ce84:	9008      	str	r0, [sp, #32]
   1ce86:	9109      	str	r1, [sp, #36]	; 0x24
   1ce88:	9412      	str	r4, [sp, #72]	; 0x48
   1ce8a:	9309      	str	r3, [sp, #36]	; 0x24
   1ce8c:	f7ff fa30 	bl	1c2f0 <_dtoa_r+0x2f0>
   1ce90:	2339      	movs	r3, #57	; 0x39
   1ce92:	702b      	strb	r3, [r5, #0]
   1ce94:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1ce96:	4647      	mov	r7, r8
   1ce98:	1c6c      	adds	r4, r5, #1
   1ce9a:	4698      	mov	r8, r3
   1ce9c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1ce9e:	2339      	movs	r3, #57	; 0x39
   1cea0:	e5a1      	b.n	1c9e6 <_dtoa_r+0x9e6>
   1cea2:	9a14      	ldr	r2, [sp, #80]	; 0x50
   1cea4:	9b15      	ldr	r3, [sp, #84]	; 0x54
   1cea6:	2000      	movs	r0, #0
   1cea8:	4934      	ldr	r1, [pc, #208]	; (1cf7c <_dtoa_r+0xf7c>)
   1ceaa:	f7fb ff85 	bl	18db8 <__aeabi_dsub>
   1ceae:	9a08      	ldr	r2, [sp, #32]
   1ceb0:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1ceb2:	f7f9 fd1b 	bl	168ec <__aeabi_dcmpgt>
   1ceb6:	2800      	cmp	r0, #0
   1ceb8:	d101      	bne.n	1cebe <_dtoa_r+0xebe>
   1ceba:	e6db      	b.n	1cc74 <_dtoa_r+0xc74>
   1cebc:	001c      	movs	r4, r3
   1cebe:	1e63      	subs	r3, r4, #1
   1cec0:	781a      	ldrb	r2, [r3, #0]
   1cec2:	2a30      	cmp	r2, #48	; 0x30
   1cec4:	d0fa      	beq.n	1cebc <_dtoa_r+0xebc>
   1cec6:	f7ff fac8 	bl	1c45a <_dtoa_r+0x45a>
   1ceca:	4643      	mov	r3, r8
   1cecc:	46b3      	mov	fp, r6
   1cece:	930c      	str	r3, [sp, #48]	; 0x30
   1ced0:	9e04      	ldr	r6, [sp, #16]
   1ced2:	9b06      	ldr	r3, [sp, #24]
   1ced4:	46a8      	mov	r8, r5
   1ced6:	4699      	mov	r9, r3
   1ced8:	4655      	mov	r5, sl
   1ceda:	46ba      	mov	sl, r7
   1cedc:	2e39      	cmp	r6, #57	; 0x39
   1cede:	d0d7      	beq.n	1ce90 <_dtoa_r+0xe90>
   1cee0:	2c00      	cmp	r4, #0
   1cee2:	dd00      	ble.n	1cee6 <_dtoa_r+0xee6>
   1cee4:	e6b1      	b.n	1cc4a <_dtoa_r+0xc4a>
   1cee6:	e6b2      	b.n	1cc4e <_dtoa_r+0xc4e>
   1cee8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   1ceea:	464d      	mov	r5, r9
   1ceec:	9203      	str	r2, [sp, #12]
   1ceee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1cef0:	f7ff fba4 	bl	1c63c <_dtoa_r+0x63c>
   1cef4:	2800      	cmp	r0, #0
   1cef6:	d000      	beq.n	1cefa <_dtoa_r+0xefa>
   1cef8:	e6a9      	b.n	1cc4e <_dtoa_r+0xc4e>
   1cefa:	07f3      	lsls	r3, r6, #31
   1cefc:	d400      	bmi.n	1cf00 <_dtoa_r+0xf00>
   1cefe:	e6a6      	b.n	1cc4e <_dtoa_r+0xc4e>
   1cf00:	e6a0      	b.n	1cc44 <_dtoa_r+0xc44>
   1cf02:	2300      	movs	r3, #0
   1cf04:	4641      	mov	r1, r8
   1cf06:	220a      	movs	r2, #10
   1cf08:	4650      	mov	r0, sl
   1cf0a:	f000 fd6f 	bl	1d9ec <__multadd>
   1cf0e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1cf10:	4680      	mov	r8, r0
   1cf12:	2b00      	cmp	r3, #0
   1cf14:	dd01      	ble.n	1cf1a <_dtoa_r+0xf1a>
   1cf16:	9307      	str	r3, [sp, #28]
   1cf18:	e486      	b.n	1c828 <_dtoa_r+0x828>
   1cf1a:	9b22      	ldr	r3, [sp, #136]	; 0x88
   1cf1c:	2b02      	cmp	r3, #2
   1cf1e:	dc1f      	bgt.n	1cf60 <_dtoa_r+0xf60>
   1cf20:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1cf22:	9307      	str	r3, [sp, #28]
   1cf24:	e480      	b.n	1c828 <_dtoa_r+0x828>
   1cf26:	9b22      	ldr	r3, [sp, #136]	; 0x88
   1cf28:	2b02      	cmp	r3, #2
   1cf2a:	dc19      	bgt.n	1cf60 <_dtoa_r+0xf60>
   1cf2c:	4649      	mov	r1, r9
   1cf2e:	f7fe ffbd 	bl	1beac <quorem>
   1cf32:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1cf34:	3030      	adds	r0, #48	; 0x30
   1cf36:	7018      	strb	r0, [r3, #0]
   1cf38:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1cf3a:	0006      	movs	r6, r0
   1cf3c:	9307      	str	r3, [sp, #28]
   1cf3e:	e533      	b.n	1c9a8 <_dtoa_r+0x9a8>
   1cf40:	2302      	movs	r3, #2
   1cf42:	4698      	mov	r8, r3
   1cf44:	f7ff f9ac 	bl	1c2a0 <_dtoa_r+0x2a0>
   1cf48:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   1cf4a:	9c14      	ldr	r4, [sp, #80]	; 0x50
   1cf4c:	9303      	str	r3, [sp, #12]
   1cf4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1cf50:	001d      	movs	r5, r3
   1cf52:	f7ff fb73 	bl	1c63c <_dtoa_r+0x63c>
   1cf56:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   1cf58:	9c14      	ldr	r4, [sp, #80]	; 0x50
   1cf5a:	9303      	str	r3, [sp, #12]
   1cf5c:	f7ff fa7f 	bl	1c45e <_dtoa_r+0x45e>
   1cf60:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1cf62:	9307      	str	r3, [sp, #28]
   1cf64:	e5d6      	b.n	1cb14 <_dtoa_r+0xb14>
   1cf66:	2b04      	cmp	r3, #4
   1cf68:	d100      	bne.n	1cf6c <_dtoa_r+0xf6c>
   1cf6a:	e43f      	b.n	1c7ec <_dtoa_r+0x7ec>
   1cf6c:	233c      	movs	r3, #60	; 0x3c
   1cf6e:	1a18      	subs	r0, r3, r0
   1cf70:	e4d7      	b.n	1c922 <_dtoa_r+0x922>
   1cf72:	46c0      	nop			; (mov r8, r8)
   1cf74:	00020808 	.word	0x00020808
   1cf78:	40240000 	.word	0x40240000
   1cf7c:	3fe00000 	.word	0x3fe00000
   1cf80:	401c0000 	.word	0x401c0000
   1cf84:	fcc00000 	.word	0xfcc00000

0001cf88 <__sflush_r>:
   1cf88:	b5f0      	push	{r4, r5, r6, r7, lr}
   1cf8a:	46c6      	mov	lr, r8
   1cf8c:	b500      	push	{lr}
   1cf8e:	230c      	movs	r3, #12
   1cf90:	5eca      	ldrsh	r2, [r1, r3]
   1cf92:	4680      	mov	r8, r0
   1cf94:	b293      	uxth	r3, r2
   1cf96:	000c      	movs	r4, r1
   1cf98:	0719      	lsls	r1, r3, #28
   1cf9a:	d440      	bmi.n	1d01e <__sflush_r+0x96>
   1cf9c:	2380      	movs	r3, #128	; 0x80
   1cf9e:	011b      	lsls	r3, r3, #4
   1cfa0:	4313      	orrs	r3, r2
   1cfa2:	6862      	ldr	r2, [r4, #4]
   1cfa4:	81a3      	strh	r3, [r4, #12]
   1cfa6:	2a00      	cmp	r2, #0
   1cfa8:	dc00      	bgt.n	1cfac <__sflush_r+0x24>
   1cfaa:	e070      	b.n	1d08e <__sflush_r+0x106>
   1cfac:	6aa6      	ldr	r6, [r4, #40]	; 0x28
   1cfae:	2e00      	cmp	r6, #0
   1cfb0:	d031      	beq.n	1d016 <__sflush_r+0x8e>
   1cfb2:	4642      	mov	r2, r8
   1cfb4:	4641      	mov	r1, r8
   1cfb6:	6815      	ldr	r5, [r2, #0]
   1cfb8:	2200      	movs	r2, #0
   1cfba:	b29b      	uxth	r3, r3
   1cfbc:	600a      	str	r2, [r1, #0]
   1cfbe:	04da      	lsls	r2, r3, #19
   1cfc0:	d400      	bmi.n	1cfc4 <__sflush_r+0x3c>
   1cfc2:	e069      	b.n	1d098 <__sflush_r+0x110>
   1cfc4:	6d22      	ldr	r2, [r4, #80]	; 0x50
   1cfc6:	075b      	lsls	r3, r3, #29
   1cfc8:	d506      	bpl.n	1cfd8 <__sflush_r+0x50>
   1cfca:	6863      	ldr	r3, [r4, #4]
   1cfcc:	1ad2      	subs	r2, r2, r3
   1cfce:	6b23      	ldr	r3, [r4, #48]	; 0x30
   1cfd0:	2b00      	cmp	r3, #0
   1cfd2:	d001      	beq.n	1cfd8 <__sflush_r+0x50>
   1cfd4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   1cfd6:	1ad2      	subs	r2, r2, r3
   1cfd8:	2300      	movs	r3, #0
   1cfda:	69e1      	ldr	r1, [r4, #28]
   1cfdc:	4640      	mov	r0, r8
   1cfde:	47b0      	blx	r6
   1cfe0:	1c43      	adds	r3, r0, #1
   1cfe2:	d03d      	beq.n	1d060 <__sflush_r+0xd8>
   1cfe4:	89a3      	ldrh	r3, [r4, #12]
   1cfe6:	4a3a      	ldr	r2, [pc, #232]	; (1d0d0 <__sflush_r+0x148>)
   1cfe8:	4013      	ands	r3, r2
   1cfea:	2200      	movs	r2, #0
   1cfec:	6062      	str	r2, [r4, #4]
   1cfee:	6922      	ldr	r2, [r4, #16]
   1cff0:	b21b      	sxth	r3, r3
   1cff2:	81a3      	strh	r3, [r4, #12]
   1cff4:	6022      	str	r2, [r4, #0]
   1cff6:	04db      	lsls	r3, r3, #19
   1cff8:	d447      	bmi.n	1d08a <__sflush_r+0x102>
   1cffa:	4643      	mov	r3, r8
   1cffc:	6b21      	ldr	r1, [r4, #48]	; 0x30
   1cffe:	601d      	str	r5, [r3, #0]
   1d000:	2900      	cmp	r1, #0
   1d002:	d008      	beq.n	1d016 <__sflush_r+0x8e>
   1d004:	0023      	movs	r3, r4
   1d006:	3340      	adds	r3, #64	; 0x40
   1d008:	4299      	cmp	r1, r3
   1d00a:	d002      	beq.n	1d012 <__sflush_r+0x8a>
   1d00c:	4640      	mov	r0, r8
   1d00e:	f000 f967 	bl	1d2e0 <_free_r>
   1d012:	2300      	movs	r3, #0
   1d014:	6323      	str	r3, [r4, #48]	; 0x30
   1d016:	2000      	movs	r0, #0
   1d018:	bc04      	pop	{r2}
   1d01a:	4690      	mov	r8, r2
   1d01c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1d01e:	6926      	ldr	r6, [r4, #16]
   1d020:	2e00      	cmp	r6, #0
   1d022:	d0f8      	beq.n	1d016 <__sflush_r+0x8e>
   1d024:	6822      	ldr	r2, [r4, #0]
   1d026:	6026      	str	r6, [r4, #0]
   1d028:	1b95      	subs	r5, r2, r6
   1d02a:	2200      	movs	r2, #0
   1d02c:	079b      	lsls	r3, r3, #30
   1d02e:	d100      	bne.n	1d032 <__sflush_r+0xaa>
   1d030:	6962      	ldr	r2, [r4, #20]
   1d032:	60a2      	str	r2, [r4, #8]
   1d034:	2d00      	cmp	r5, #0
   1d036:	dc04      	bgt.n	1d042 <__sflush_r+0xba>
   1d038:	e7ed      	b.n	1d016 <__sflush_r+0x8e>
   1d03a:	1836      	adds	r6, r6, r0
   1d03c:	1a2d      	subs	r5, r5, r0
   1d03e:	2d00      	cmp	r5, #0
   1d040:	dde9      	ble.n	1d016 <__sflush_r+0x8e>
   1d042:	002b      	movs	r3, r5
   1d044:	0032      	movs	r2, r6
   1d046:	69e1      	ldr	r1, [r4, #28]
   1d048:	4640      	mov	r0, r8
   1d04a:	6a67      	ldr	r7, [r4, #36]	; 0x24
   1d04c:	47b8      	blx	r7
   1d04e:	2800      	cmp	r0, #0
   1d050:	dcf3      	bgt.n	1d03a <__sflush_r+0xb2>
   1d052:	2240      	movs	r2, #64	; 0x40
   1d054:	2001      	movs	r0, #1
   1d056:	89a3      	ldrh	r3, [r4, #12]
   1d058:	4240      	negs	r0, r0
   1d05a:	4313      	orrs	r3, r2
   1d05c:	81a3      	strh	r3, [r4, #12]
   1d05e:	e7db      	b.n	1d018 <__sflush_r+0x90>
   1d060:	4643      	mov	r3, r8
   1d062:	6819      	ldr	r1, [r3, #0]
   1d064:	291d      	cmp	r1, #29
   1d066:	d8f4      	bhi.n	1d052 <__sflush_r+0xca>
   1d068:	4b1a      	ldr	r3, [pc, #104]	; (1d0d4 <__sflush_r+0x14c>)
   1d06a:	2201      	movs	r2, #1
   1d06c:	40cb      	lsrs	r3, r1
   1d06e:	439a      	bics	r2, r3
   1d070:	d1ef      	bne.n	1d052 <__sflush_r+0xca>
   1d072:	89a3      	ldrh	r3, [r4, #12]
   1d074:	4e16      	ldr	r6, [pc, #88]	; (1d0d0 <__sflush_r+0x148>)
   1d076:	6062      	str	r2, [r4, #4]
   1d078:	4033      	ands	r3, r6
   1d07a:	6922      	ldr	r2, [r4, #16]
   1d07c:	b21b      	sxth	r3, r3
   1d07e:	81a3      	strh	r3, [r4, #12]
   1d080:	6022      	str	r2, [r4, #0]
   1d082:	04db      	lsls	r3, r3, #19
   1d084:	d5b9      	bpl.n	1cffa <__sflush_r+0x72>
   1d086:	2900      	cmp	r1, #0
   1d088:	d1b7      	bne.n	1cffa <__sflush_r+0x72>
   1d08a:	6520      	str	r0, [r4, #80]	; 0x50
   1d08c:	e7b5      	b.n	1cffa <__sflush_r+0x72>
   1d08e:	6be2      	ldr	r2, [r4, #60]	; 0x3c
   1d090:	2a00      	cmp	r2, #0
   1d092:	dd00      	ble.n	1d096 <__sflush_r+0x10e>
   1d094:	e78a      	b.n	1cfac <__sflush_r+0x24>
   1d096:	e7be      	b.n	1d016 <__sflush_r+0x8e>
   1d098:	2200      	movs	r2, #0
   1d09a:	2301      	movs	r3, #1
   1d09c:	69e1      	ldr	r1, [r4, #28]
   1d09e:	4640      	mov	r0, r8
   1d0a0:	47b0      	blx	r6
   1d0a2:	0002      	movs	r2, r0
   1d0a4:	1c43      	adds	r3, r0, #1
   1d0a6:	d002      	beq.n	1d0ae <__sflush_r+0x126>
   1d0a8:	89a3      	ldrh	r3, [r4, #12]
   1d0aa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
   1d0ac:	e78b      	b.n	1cfc6 <__sflush_r+0x3e>
   1d0ae:	4643      	mov	r3, r8
   1d0b0:	681b      	ldr	r3, [r3, #0]
   1d0b2:	2b00      	cmp	r3, #0
   1d0b4:	d0f8      	beq.n	1d0a8 <__sflush_r+0x120>
   1d0b6:	2b1d      	cmp	r3, #29
   1d0b8:	d001      	beq.n	1d0be <__sflush_r+0x136>
   1d0ba:	2b16      	cmp	r3, #22
   1d0bc:	d103      	bne.n	1d0c6 <__sflush_r+0x13e>
   1d0be:	4643      	mov	r3, r8
   1d0c0:	2000      	movs	r0, #0
   1d0c2:	601d      	str	r5, [r3, #0]
   1d0c4:	e7a8      	b.n	1d018 <__sflush_r+0x90>
   1d0c6:	2140      	movs	r1, #64	; 0x40
   1d0c8:	89a3      	ldrh	r3, [r4, #12]
   1d0ca:	430b      	orrs	r3, r1
   1d0cc:	81a3      	strh	r3, [r4, #12]
   1d0ce:	e7a3      	b.n	1d018 <__sflush_r+0x90>
   1d0d0:	fffff7ff 	.word	0xfffff7ff
   1d0d4:	20400001 	.word	0x20400001

0001d0d8 <_fflush_r>:
   1d0d8:	b570      	push	{r4, r5, r6, lr}
   1d0da:	0005      	movs	r5, r0
   1d0dc:	000c      	movs	r4, r1
   1d0de:	2800      	cmp	r0, #0
   1d0e0:	d002      	beq.n	1d0e8 <_fflush_r+0x10>
   1d0e2:	6b83      	ldr	r3, [r0, #56]	; 0x38
   1d0e4:	2b00      	cmp	r3, #0
   1d0e6:	d016      	beq.n	1d116 <_fflush_r+0x3e>
   1d0e8:	220c      	movs	r2, #12
   1d0ea:	5ea3      	ldrsh	r3, [r4, r2]
   1d0ec:	2600      	movs	r6, #0
   1d0ee:	2b00      	cmp	r3, #0
   1d0f0:	d00f      	beq.n	1d112 <_fflush_r+0x3a>
   1d0f2:	6e62      	ldr	r2, [r4, #100]	; 0x64
   1d0f4:	07d2      	lsls	r2, r2, #31
   1d0f6:	d401      	bmi.n	1d0fc <_fflush_r+0x24>
   1d0f8:	059b      	lsls	r3, r3, #22
   1d0fa:	d513      	bpl.n	1d124 <_fflush_r+0x4c>
   1d0fc:	0021      	movs	r1, r4
   1d0fe:	0028      	movs	r0, r5
   1d100:	f7ff ff42 	bl	1cf88 <__sflush_r>
   1d104:	6e63      	ldr	r3, [r4, #100]	; 0x64
   1d106:	0006      	movs	r6, r0
   1d108:	07db      	lsls	r3, r3, #31
   1d10a:	d402      	bmi.n	1d112 <_fflush_r+0x3a>
   1d10c:	89a3      	ldrh	r3, [r4, #12]
   1d10e:	059b      	lsls	r3, r3, #22
   1d110:	d504      	bpl.n	1d11c <_fflush_r+0x44>
   1d112:	0030      	movs	r0, r6
   1d114:	bd70      	pop	{r4, r5, r6, pc}
   1d116:	f000 f839 	bl	1d18c <__sinit>
   1d11a:	e7e5      	b.n	1d0e8 <_fflush_r+0x10>
   1d11c:	6da0      	ldr	r0, [r4, #88]	; 0x58
   1d11e:	f000 fb79 	bl	1d814 <__retarget_lock_release_recursive>
   1d122:	e7f6      	b.n	1d112 <_fflush_r+0x3a>
   1d124:	6da0      	ldr	r0, [r4, #88]	; 0x58
   1d126:	f000 fb73 	bl	1d810 <__retarget_lock_acquire_recursive>
   1d12a:	e7e7      	b.n	1d0fc <_fflush_r+0x24>

0001d12c <_cleanup_r>:
   1d12c:	b510      	push	{r4, lr}
   1d12e:	4902      	ldr	r1, [pc, #8]	; (1d138 <_cleanup_r+0xc>)
   1d130:	f000 fb36 	bl	1d7a0 <_fwalk_reent>
   1d134:	bd10      	pop	{r4, pc}
   1d136:	46c0      	nop			; (mov r8, r8)
   1d138:	0001e661 	.word	0x0001e661

0001d13c <std.isra.0>:
   1d13c:	2300      	movs	r3, #0
   1d13e:	b510      	push	{r4, lr}
   1d140:	0004      	movs	r4, r0
   1d142:	6003      	str	r3, [r0, #0]
   1d144:	6043      	str	r3, [r0, #4]
   1d146:	6083      	str	r3, [r0, #8]
   1d148:	8181      	strh	r1, [r0, #12]
   1d14a:	6643      	str	r3, [r0, #100]	; 0x64
   1d14c:	81c2      	strh	r2, [r0, #14]
   1d14e:	6103      	str	r3, [r0, #16]
   1d150:	6143      	str	r3, [r0, #20]
   1d152:	6183      	str	r3, [r0, #24]
   1d154:	2208      	movs	r2, #8
   1d156:	2100      	movs	r1, #0
   1d158:	305c      	adds	r0, #92	; 0x5c
   1d15a:	f7fc fe6b 	bl	19e34 <memset>
   1d15e:	0020      	movs	r0, r4
   1d160:	4b06      	ldr	r3, [pc, #24]	; (1d17c <std.isra.0+0x40>)
   1d162:	61e4      	str	r4, [r4, #28]
   1d164:	6223      	str	r3, [r4, #32]
   1d166:	4b06      	ldr	r3, [pc, #24]	; (1d180 <std.isra.0+0x44>)
   1d168:	3058      	adds	r0, #88	; 0x58
   1d16a:	6263      	str	r3, [r4, #36]	; 0x24
   1d16c:	4b05      	ldr	r3, [pc, #20]	; (1d184 <std.isra.0+0x48>)
   1d16e:	62a3      	str	r3, [r4, #40]	; 0x28
   1d170:	4b05      	ldr	r3, [pc, #20]	; (1d188 <std.isra.0+0x4c>)
   1d172:	62e3      	str	r3, [r4, #44]	; 0x2c
   1d174:	f000 fb48 	bl	1d808 <__retarget_lock_init_recursive>
   1d178:	bd10      	pop	{r4, pc}
   1d17a:	46c0      	nop			; (mov r8, r8)
   1d17c:	0001e395 	.word	0x0001e395
   1d180:	0001e3bd 	.word	0x0001e3bd
   1d184:	0001e3f9 	.word	0x0001e3f9
   1d188:	0001e425 	.word	0x0001e425

0001d18c <__sinit>:
   1d18c:	b570      	push	{r4, r5, r6, lr}
   1d18e:	0004      	movs	r4, r0
   1d190:	4d14      	ldr	r5, [pc, #80]	; (1d1e4 <__sinit+0x58>)
   1d192:	0028      	movs	r0, r5
   1d194:	f000 fb3c 	bl	1d810 <__retarget_lock_acquire_recursive>
   1d198:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   1d19a:	2b00      	cmp	r3, #0
   1d19c:	d11d      	bne.n	1d1da <__sinit+0x4e>
   1d19e:	4a12      	ldr	r2, [pc, #72]	; (1d1e8 <__sinit+0x5c>)
   1d1a0:	2104      	movs	r1, #4
   1d1a2:	63e2      	str	r2, [r4, #60]	; 0x3c
   1d1a4:	22b8      	movs	r2, #184	; 0xb8
   1d1a6:	0092      	lsls	r2, r2, #2
   1d1a8:	50a3      	str	r3, [r4, r2]
   1d1aa:	23b9      	movs	r3, #185	; 0xb9
   1d1ac:	2203      	movs	r2, #3
   1d1ae:	009b      	lsls	r3, r3, #2
   1d1b0:	50e2      	str	r2, [r4, r3]
   1d1b2:	3308      	adds	r3, #8
   1d1b4:	18e2      	adds	r2, r4, r3
   1d1b6:	3b04      	subs	r3, #4
   1d1b8:	50e2      	str	r2, [r4, r3]
   1d1ba:	6860      	ldr	r0, [r4, #4]
   1d1bc:	2200      	movs	r2, #0
   1d1be:	f7ff ffbd 	bl	1d13c <std.isra.0>
   1d1c2:	2201      	movs	r2, #1
   1d1c4:	2109      	movs	r1, #9
   1d1c6:	68a0      	ldr	r0, [r4, #8]
   1d1c8:	f7ff ffb8 	bl	1d13c <std.isra.0>
   1d1cc:	2202      	movs	r2, #2
   1d1ce:	2112      	movs	r1, #18
   1d1d0:	68e0      	ldr	r0, [r4, #12]
   1d1d2:	f7ff ffb3 	bl	1d13c <std.isra.0>
   1d1d6:	2301      	movs	r3, #1
   1d1d8:	63a3      	str	r3, [r4, #56]	; 0x38
   1d1da:	0028      	movs	r0, r5
   1d1dc:	f000 fb1a 	bl	1d814 <__retarget_lock_release_recursive>
   1d1e0:	bd70      	pop	{r4, r5, r6, pc}
   1d1e2:	46c0      	nop			; (mov r8, r8)
   1d1e4:	20002fcc 	.word	0x20002fcc
   1d1e8:	0001d12d 	.word	0x0001d12d

0001d1ec <__sfp_lock_acquire>:
   1d1ec:	b510      	push	{r4, lr}
   1d1ee:	4802      	ldr	r0, [pc, #8]	; (1d1f8 <__sfp_lock_acquire+0xc>)
   1d1f0:	f000 fb0e 	bl	1d810 <__retarget_lock_acquire_recursive>
   1d1f4:	bd10      	pop	{r4, pc}
   1d1f6:	46c0      	nop			; (mov r8, r8)
   1d1f8:	20002fe0 	.word	0x20002fe0

0001d1fc <__sfp_lock_release>:
   1d1fc:	b510      	push	{r4, lr}
   1d1fe:	4802      	ldr	r0, [pc, #8]	; (1d208 <__sfp_lock_release+0xc>)
   1d200:	f000 fb08 	bl	1d814 <__retarget_lock_release_recursive>
   1d204:	bd10      	pop	{r4, pc}
   1d206:	46c0      	nop			; (mov r8, r8)
   1d208:	20002fe0 	.word	0x20002fe0

0001d20c <__libc_fini_array>:
   1d20c:	b570      	push	{r4, r5, r6, lr}
   1d20e:	4b09      	ldr	r3, [pc, #36]	; (1d234 <__libc_fini_array+0x28>)
   1d210:	4c09      	ldr	r4, [pc, #36]	; (1d238 <__libc_fini_array+0x2c>)
   1d212:	1ae4      	subs	r4, r4, r3
   1d214:	10a4      	asrs	r4, r4, #2
   1d216:	d009      	beq.n	1d22c <__libc_fini_array+0x20>
   1d218:	4a08      	ldr	r2, [pc, #32]	; (1d23c <__libc_fini_array+0x30>)
   1d21a:	18a5      	adds	r5, r4, r2
   1d21c:	00ad      	lsls	r5, r5, #2
   1d21e:	18ed      	adds	r5, r5, r3
   1d220:	682b      	ldr	r3, [r5, #0]
   1d222:	3c01      	subs	r4, #1
   1d224:	4798      	blx	r3
   1d226:	3d04      	subs	r5, #4
   1d228:	2c00      	cmp	r4, #0
   1d22a:	d1f9      	bne.n	1d220 <__libc_fini_array+0x14>
   1d22c:	f003 fb60 	bl	208f0 <_fini>
   1d230:	bd70      	pop	{r4, r5, r6, pc}
   1d232:	46c0      	nop			; (mov r8, r8)
   1d234:	000208fc 	.word	0x000208fc
   1d238:	00020900 	.word	0x00020900
   1d23c:	3fffffff 	.word	0x3fffffff

0001d240 <_malloc_trim_r>:
   1d240:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1d242:	000c      	movs	r4, r1
   1d244:	0006      	movs	r6, r0
   1d246:	f7fc fe3f 	bl	19ec8 <__malloc_lock>
   1d24a:	4f20      	ldr	r7, [pc, #128]	; (1d2cc <_malloc_trim_r+0x8c>)
   1d24c:	68bb      	ldr	r3, [r7, #8]
   1d24e:	685d      	ldr	r5, [r3, #4]
   1d250:	2303      	movs	r3, #3
   1d252:	439d      	bics	r5, r3
   1d254:	4b1e      	ldr	r3, [pc, #120]	; (1d2d0 <_malloc_trim_r+0x90>)
   1d256:	1b2c      	subs	r4, r5, r4
   1d258:	469c      	mov	ip, r3
   1d25a:	4464      	add	r4, ip
   1d25c:	0b24      	lsrs	r4, r4, #12
   1d25e:	4b1d      	ldr	r3, [pc, #116]	; (1d2d4 <_malloc_trim_r+0x94>)
   1d260:	3c01      	subs	r4, #1
   1d262:	0324      	lsls	r4, r4, #12
   1d264:	429c      	cmp	r4, r3
   1d266:	dd07      	ble.n	1d278 <_malloc_trim_r+0x38>
   1d268:	2100      	movs	r1, #0
   1d26a:	0030      	movs	r0, r6
   1d26c:	f7fc fecc 	bl	1a008 <_sbrk_r>
   1d270:	68bb      	ldr	r3, [r7, #8]
   1d272:	195b      	adds	r3, r3, r5
   1d274:	4298      	cmp	r0, r3
   1d276:	d004      	beq.n	1d282 <_malloc_trim_r+0x42>
   1d278:	0030      	movs	r0, r6
   1d27a:	f7fc fe2d 	bl	19ed8 <__malloc_unlock>
   1d27e:	2000      	movs	r0, #0
   1d280:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1d282:	4261      	negs	r1, r4
   1d284:	0030      	movs	r0, r6
   1d286:	f7fc febf 	bl	1a008 <_sbrk_r>
   1d28a:	1c43      	adds	r3, r0, #1
   1d28c:	d00d      	beq.n	1d2aa <_malloc_trim_r+0x6a>
   1d28e:	2201      	movs	r2, #1
   1d290:	68bb      	ldr	r3, [r7, #8]
   1d292:	1b2d      	subs	r5, r5, r4
   1d294:	4315      	orrs	r5, r2
   1d296:	605d      	str	r5, [r3, #4]
   1d298:	4b0f      	ldr	r3, [pc, #60]	; (1d2d8 <_malloc_trim_r+0x98>)
   1d29a:	0030      	movs	r0, r6
   1d29c:	681a      	ldr	r2, [r3, #0]
   1d29e:	1b14      	subs	r4, r2, r4
   1d2a0:	601c      	str	r4, [r3, #0]
   1d2a2:	f7fc fe19 	bl	19ed8 <__malloc_unlock>
   1d2a6:	2001      	movs	r0, #1
   1d2a8:	e7ea      	b.n	1d280 <_malloc_trim_r+0x40>
   1d2aa:	2100      	movs	r1, #0
   1d2ac:	0030      	movs	r0, r6
   1d2ae:	f7fc feab 	bl	1a008 <_sbrk_r>
   1d2b2:	68ba      	ldr	r2, [r7, #8]
   1d2b4:	1a83      	subs	r3, r0, r2
   1d2b6:	2b0f      	cmp	r3, #15
   1d2b8:	ddde      	ble.n	1d278 <_malloc_trim_r+0x38>
   1d2ba:	4908      	ldr	r1, [pc, #32]	; (1d2dc <_malloc_trim_r+0x9c>)
   1d2bc:	6809      	ldr	r1, [r1, #0]
   1d2be:	1a40      	subs	r0, r0, r1
   1d2c0:	4905      	ldr	r1, [pc, #20]	; (1d2d8 <_malloc_trim_r+0x98>)
   1d2c2:	6008      	str	r0, [r1, #0]
   1d2c4:	2101      	movs	r1, #1
   1d2c6:	430b      	orrs	r3, r1
   1d2c8:	6053      	str	r3, [r2, #4]
   1d2ca:	e7d5      	b.n	1d278 <_malloc_trim_r+0x38>
   1d2cc:	200005b4 	.word	0x200005b4
   1d2d0:	00000fef 	.word	0x00000fef
   1d2d4:	00000fff 	.word	0x00000fff
   1d2d8:	20001138 	.word	0x20001138
   1d2dc:	200009bc 	.word	0x200009bc

0001d2e0 <_free_r>:
   1d2e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1d2e2:	0004      	movs	r4, r0
   1d2e4:	1e0d      	subs	r5, r1, #0
   1d2e6:	d03c      	beq.n	1d362 <_free_r+0x82>
   1d2e8:	f7fc fdee 	bl	19ec8 <__malloc_lock>
   1d2ec:	0029      	movs	r1, r5
   1d2ee:	3908      	subs	r1, #8
   1d2f0:	6848      	ldr	r0, [r1, #4]
   1d2f2:	2301      	movs	r3, #1
   1d2f4:	0005      	movs	r5, r0
   1d2f6:	2603      	movs	r6, #3
   1d2f8:	439d      	bics	r5, r3
   1d2fa:	194a      	adds	r2, r1, r5
   1d2fc:	469c      	mov	ip, r3
   1d2fe:	4f61      	ldr	r7, [pc, #388]	; (1d484 <_free_r+0x1a4>)
   1d300:	6853      	ldr	r3, [r2, #4]
   1d302:	43b3      	bics	r3, r6
   1d304:	68be      	ldr	r6, [r7, #8]
   1d306:	42b2      	cmp	r2, r6
   1d308:	d056      	beq.n	1d3b8 <_free_r+0xd8>
   1d30a:	4666      	mov	r6, ip
   1d30c:	6053      	str	r3, [r2, #4]
   1d30e:	4206      	tst	r6, r0
   1d310:	d10a      	bne.n	1d328 <_free_r+0x48>
   1d312:	003e      	movs	r6, r7
   1d314:	6808      	ldr	r0, [r1, #0]
   1d316:	3608      	adds	r6, #8
   1d318:	1a09      	subs	r1, r1, r0
   1d31a:	182d      	adds	r5, r5, r0
   1d31c:	6888      	ldr	r0, [r1, #8]
   1d31e:	42b0      	cmp	r0, r6
   1d320:	d065      	beq.n	1d3ee <_free_r+0x10e>
   1d322:	68ce      	ldr	r6, [r1, #12]
   1d324:	60c6      	str	r6, [r0, #12]
   1d326:	60b0      	str	r0, [r6, #8]
   1d328:	2001      	movs	r0, #1
   1d32a:	18d6      	adds	r6, r2, r3
   1d32c:	6876      	ldr	r6, [r6, #4]
   1d32e:	4206      	tst	r6, r0
   1d330:	d033      	beq.n	1d39a <_free_r+0xba>
   1d332:	4b55      	ldr	r3, [pc, #340]	; (1d488 <_free_r+0x1a8>)
   1d334:	4328      	orrs	r0, r5
   1d336:	6048      	str	r0, [r1, #4]
   1d338:	514d      	str	r5, [r1, r5]
   1d33a:	429d      	cmp	r5, r3
   1d33c:	d812      	bhi.n	1d364 <_free_r+0x84>
   1d33e:	08ed      	lsrs	r5, r5, #3
   1d340:	3bff      	subs	r3, #255	; 0xff
   1d342:	10aa      	asrs	r2, r5, #2
   1d344:	3bff      	subs	r3, #255	; 0xff
   1d346:	4093      	lsls	r3, r2
   1d348:	687a      	ldr	r2, [r7, #4]
   1d34a:	00ed      	lsls	r5, r5, #3
   1d34c:	4313      	orrs	r3, r2
   1d34e:	607b      	str	r3, [r7, #4]
   1d350:	19ef      	adds	r7, r5, r7
   1d352:	68bb      	ldr	r3, [r7, #8]
   1d354:	60cf      	str	r7, [r1, #12]
   1d356:	608b      	str	r3, [r1, #8]
   1d358:	60b9      	str	r1, [r7, #8]
   1d35a:	60d9      	str	r1, [r3, #12]
   1d35c:	0020      	movs	r0, r4
   1d35e:	f7fc fdbb 	bl	19ed8 <__malloc_unlock>
   1d362:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1d364:	0a68      	lsrs	r0, r5, #9
   1d366:	2804      	cmp	r0, #4
   1d368:	d850      	bhi.n	1d40c <_free_r+0x12c>
   1d36a:	09a8      	lsrs	r0, r5, #6
   1d36c:	0002      	movs	r2, r0
   1d36e:	3039      	adds	r0, #57	; 0x39
   1d370:	3238      	adds	r2, #56	; 0x38
   1d372:	00c0      	lsls	r0, r0, #3
   1d374:	1838      	adds	r0, r7, r0
   1d376:	3808      	subs	r0, #8
   1d378:	6883      	ldr	r3, [r0, #8]
   1d37a:	2603      	movs	r6, #3
   1d37c:	4298      	cmp	r0, r3
   1d37e:	d04c      	beq.n	1d41a <_free_r+0x13a>
   1d380:	685a      	ldr	r2, [r3, #4]
   1d382:	43b2      	bics	r2, r6
   1d384:	4295      	cmp	r5, r2
   1d386:	d230      	bcs.n	1d3ea <_free_r+0x10a>
   1d388:	689b      	ldr	r3, [r3, #8]
   1d38a:	4298      	cmp	r0, r3
   1d38c:	d1f8      	bne.n	1d380 <_free_r+0xa0>
   1d38e:	68c3      	ldr	r3, [r0, #12]
   1d390:	60cb      	str	r3, [r1, #12]
   1d392:	6088      	str	r0, [r1, #8]
   1d394:	6099      	str	r1, [r3, #8]
   1d396:	60c1      	str	r1, [r0, #12]
   1d398:	e7e0      	b.n	1d35c <_free_r+0x7c>
   1d39a:	18ed      	adds	r5, r5, r3
   1d39c:	4e3b      	ldr	r6, [pc, #236]	; (1d48c <_free_r+0x1ac>)
   1d39e:	6893      	ldr	r3, [r2, #8]
   1d3a0:	42b3      	cmp	r3, r6
   1d3a2:	d042      	beq.n	1d42a <_free_r+0x14a>
   1d3a4:	68d2      	ldr	r2, [r2, #12]
   1d3a6:	4328      	orrs	r0, r5
   1d3a8:	60da      	str	r2, [r3, #12]
   1d3aa:	6093      	str	r3, [r2, #8]
   1d3ac:	4b36      	ldr	r3, [pc, #216]	; (1d488 <_free_r+0x1a8>)
   1d3ae:	6048      	str	r0, [r1, #4]
   1d3b0:	514d      	str	r5, [r1, r5]
   1d3b2:	429d      	cmp	r5, r3
   1d3b4:	d8d6      	bhi.n	1d364 <_free_r+0x84>
   1d3b6:	e7c2      	b.n	1d33e <_free_r+0x5e>
   1d3b8:	4662      	mov	r2, ip
   1d3ba:	18eb      	adds	r3, r5, r3
   1d3bc:	4202      	tst	r2, r0
   1d3be:	d106      	bne.n	1d3ce <_free_r+0xee>
   1d3c0:	680a      	ldr	r2, [r1, #0]
   1d3c2:	1a89      	subs	r1, r1, r2
   1d3c4:	6888      	ldr	r0, [r1, #8]
   1d3c6:	189b      	adds	r3, r3, r2
   1d3c8:	68ca      	ldr	r2, [r1, #12]
   1d3ca:	60c2      	str	r2, [r0, #12]
   1d3cc:	6090      	str	r0, [r2, #8]
   1d3ce:	2201      	movs	r2, #1
   1d3d0:	431a      	orrs	r2, r3
   1d3d2:	604a      	str	r2, [r1, #4]
   1d3d4:	4a2e      	ldr	r2, [pc, #184]	; (1d490 <_free_r+0x1b0>)
   1d3d6:	60b9      	str	r1, [r7, #8]
   1d3d8:	6812      	ldr	r2, [r2, #0]
   1d3da:	4293      	cmp	r3, r2
   1d3dc:	d3be      	bcc.n	1d35c <_free_r+0x7c>
   1d3de:	4b2d      	ldr	r3, [pc, #180]	; (1d494 <_free_r+0x1b4>)
   1d3e0:	0020      	movs	r0, r4
   1d3e2:	6819      	ldr	r1, [r3, #0]
   1d3e4:	f7ff ff2c 	bl	1d240 <_malloc_trim_r>
   1d3e8:	e7b8      	b.n	1d35c <_free_r+0x7c>
   1d3ea:	0018      	movs	r0, r3
   1d3ec:	e7cf      	b.n	1d38e <_free_r+0xae>
   1d3ee:	4666      	mov	r6, ip
   1d3f0:	18d0      	adds	r0, r2, r3
   1d3f2:	6840      	ldr	r0, [r0, #4]
   1d3f4:	4230      	tst	r0, r6
   1d3f6:	d13f      	bne.n	1d478 <_free_r+0x198>
   1d3f8:	6890      	ldr	r0, [r2, #8]
   1d3fa:	195d      	adds	r5, r3, r5
   1d3fc:	68d3      	ldr	r3, [r2, #12]
   1d3fe:	60c3      	str	r3, [r0, #12]
   1d400:	6098      	str	r0, [r3, #8]
   1d402:	4663      	mov	r3, ip
   1d404:	432b      	orrs	r3, r5
   1d406:	604b      	str	r3, [r1, #4]
   1d408:	514d      	str	r5, [r1, r5]
   1d40a:	e7a7      	b.n	1d35c <_free_r+0x7c>
   1d40c:	2814      	cmp	r0, #20
   1d40e:	d814      	bhi.n	1d43a <_free_r+0x15a>
   1d410:	0002      	movs	r2, r0
   1d412:	305c      	adds	r0, #92	; 0x5c
   1d414:	325b      	adds	r2, #91	; 0x5b
   1d416:	00c0      	lsls	r0, r0, #3
   1d418:	e7ac      	b.n	1d374 <_free_r+0x94>
   1d41a:	2301      	movs	r3, #1
   1d41c:	1092      	asrs	r2, r2, #2
   1d41e:	4093      	lsls	r3, r2
   1d420:	687a      	ldr	r2, [r7, #4]
   1d422:	4313      	orrs	r3, r2
   1d424:	607b      	str	r3, [r7, #4]
   1d426:	0003      	movs	r3, r0
   1d428:	e7b2      	b.n	1d390 <_free_r+0xb0>
   1d42a:	4328      	orrs	r0, r5
   1d42c:	60d9      	str	r1, [r3, #12]
   1d42e:	6099      	str	r1, [r3, #8]
   1d430:	60cb      	str	r3, [r1, #12]
   1d432:	608b      	str	r3, [r1, #8]
   1d434:	6048      	str	r0, [r1, #4]
   1d436:	514d      	str	r5, [r1, r5]
   1d438:	e790      	b.n	1d35c <_free_r+0x7c>
   1d43a:	2854      	cmp	r0, #84	; 0x54
   1d43c:	d805      	bhi.n	1d44a <_free_r+0x16a>
   1d43e:	0b28      	lsrs	r0, r5, #12
   1d440:	0002      	movs	r2, r0
   1d442:	306f      	adds	r0, #111	; 0x6f
   1d444:	326e      	adds	r2, #110	; 0x6e
   1d446:	00c0      	lsls	r0, r0, #3
   1d448:	e794      	b.n	1d374 <_free_r+0x94>
   1d44a:	22aa      	movs	r2, #170	; 0xaa
   1d44c:	0052      	lsls	r2, r2, #1
   1d44e:	4290      	cmp	r0, r2
   1d450:	d805      	bhi.n	1d45e <_free_r+0x17e>
   1d452:	0be8      	lsrs	r0, r5, #15
   1d454:	0002      	movs	r2, r0
   1d456:	3078      	adds	r0, #120	; 0x78
   1d458:	3277      	adds	r2, #119	; 0x77
   1d45a:	00c0      	lsls	r0, r0, #3
   1d45c:	e78a      	b.n	1d374 <_free_r+0x94>
   1d45e:	4a0e      	ldr	r2, [pc, #56]	; (1d498 <_free_r+0x1b8>)
   1d460:	4290      	cmp	r0, r2
   1d462:	d805      	bhi.n	1d470 <_free_r+0x190>
   1d464:	0ca8      	lsrs	r0, r5, #18
   1d466:	0002      	movs	r2, r0
   1d468:	307d      	adds	r0, #125	; 0x7d
   1d46a:	327c      	adds	r2, #124	; 0x7c
   1d46c:	00c0      	lsls	r0, r0, #3
   1d46e:	e781      	b.n	1d374 <_free_r+0x94>
   1d470:	20fe      	movs	r0, #254	; 0xfe
   1d472:	227e      	movs	r2, #126	; 0x7e
   1d474:	0080      	lsls	r0, r0, #2
   1d476:	e77d      	b.n	1d374 <_free_r+0x94>
   1d478:	4663      	mov	r3, ip
   1d47a:	432b      	orrs	r3, r5
   1d47c:	604b      	str	r3, [r1, #4]
   1d47e:	6015      	str	r5, [r2, #0]
   1d480:	e76c      	b.n	1d35c <_free_r+0x7c>
   1d482:	46c0      	nop			; (mov r8, r8)
   1d484:	200005b4 	.word	0x200005b4
   1d488:	000001ff 	.word	0x000001ff
   1d48c:	200005bc 	.word	0x200005bc
   1d490:	200009c0 	.word	0x200009c0
   1d494:	20001168 	.word	0x20001168
   1d498:	00000554 	.word	0x00000554

0001d49c <__sfvwrite_r>:
   1d49c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1d49e:	464e      	mov	r6, r9
   1d4a0:	46de      	mov	lr, fp
   1d4a2:	4657      	mov	r7, sl
   1d4a4:	4645      	mov	r5, r8
   1d4a6:	b5e0      	push	{r5, r6, r7, lr}
   1d4a8:	6893      	ldr	r3, [r2, #8]
   1d4aa:	b083      	sub	sp, #12
   1d4ac:	9000      	str	r0, [sp, #0]
   1d4ae:	000c      	movs	r4, r1
   1d4b0:	0016      	movs	r6, r2
   1d4b2:	2b00      	cmp	r3, #0
   1d4b4:	d025      	beq.n	1d502 <__sfvwrite_r+0x66>
   1d4b6:	898b      	ldrh	r3, [r1, #12]
   1d4b8:	071a      	lsls	r2, r3, #28
   1d4ba:	d52a      	bpl.n	1d512 <__sfvwrite_r+0x76>
   1d4bc:	690a      	ldr	r2, [r1, #16]
   1d4be:	2a00      	cmp	r2, #0
   1d4c0:	d027      	beq.n	1d512 <__sfvwrite_r+0x76>
   1d4c2:	6832      	ldr	r2, [r6, #0]
   1d4c4:	4693      	mov	fp, r2
   1d4c6:	079a      	lsls	r2, r3, #30
   1d4c8:	d52f      	bpl.n	1d52a <__sfvwrite_r+0x8e>
   1d4ca:	4bb2      	ldr	r3, [pc, #712]	; (1d794 <__sfvwrite_r+0x2f8>)
   1d4cc:	2700      	movs	r7, #0
   1d4ce:	2500      	movs	r5, #0
   1d4d0:	4698      	mov	r8, r3
   1d4d2:	46b1      	mov	r9, r6
   1d4d4:	2d00      	cmp	r5, #0
   1d4d6:	d100      	bne.n	1d4da <__sfvwrite_r+0x3e>
   1d4d8:	e072      	b.n	1d5c0 <__sfvwrite_r+0x124>
   1d4da:	002b      	movs	r3, r5
   1d4dc:	4545      	cmp	r5, r8
   1d4de:	d900      	bls.n	1d4e2 <__sfvwrite_r+0x46>
   1d4e0:	4bac      	ldr	r3, [pc, #688]	; (1d794 <__sfvwrite_r+0x2f8>)
   1d4e2:	003a      	movs	r2, r7
   1d4e4:	69e1      	ldr	r1, [r4, #28]
   1d4e6:	9800      	ldr	r0, [sp, #0]
   1d4e8:	6a66      	ldr	r6, [r4, #36]	; 0x24
   1d4ea:	47b0      	blx	r6
   1d4ec:	2800      	cmp	r0, #0
   1d4ee:	dc00      	bgt.n	1d4f2 <__sfvwrite_r+0x56>
   1d4f0:	e073      	b.n	1d5da <__sfvwrite_r+0x13e>
   1d4f2:	464b      	mov	r3, r9
   1d4f4:	689b      	ldr	r3, [r3, #8]
   1d4f6:	183f      	adds	r7, r7, r0
   1d4f8:	1a2d      	subs	r5, r5, r0
   1d4fa:	1a18      	subs	r0, r3, r0
   1d4fc:	464b      	mov	r3, r9
   1d4fe:	6098      	str	r0, [r3, #8]
   1d500:	d1e8      	bne.n	1d4d4 <__sfvwrite_r+0x38>
   1d502:	2000      	movs	r0, #0
   1d504:	b003      	add	sp, #12
   1d506:	bc3c      	pop	{r2, r3, r4, r5}
   1d508:	4690      	mov	r8, r2
   1d50a:	4699      	mov	r9, r3
   1d50c:	46a2      	mov	sl, r4
   1d50e:	46ab      	mov	fp, r5
   1d510:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1d512:	0021      	movs	r1, r4
   1d514:	9800      	ldr	r0, [sp, #0]
   1d516:	f7fe fc4b 	bl	1bdb0 <__swsetup_r>
   1d51a:	2800      	cmp	r0, #0
   1d51c:	d000      	beq.n	1d520 <__sfvwrite_r+0x84>
   1d51e:	e130      	b.n	1d782 <__sfvwrite_r+0x2e6>
   1d520:	6832      	ldr	r2, [r6, #0]
   1d522:	89a3      	ldrh	r3, [r4, #12]
   1d524:	4693      	mov	fp, r2
   1d526:	079a      	lsls	r2, r3, #30
   1d528:	d4cf      	bmi.n	1d4ca <__sfvwrite_r+0x2e>
   1d52a:	07da      	lsls	r2, r3, #31
   1d52c:	d55d      	bpl.n	1d5ea <__sfvwrite_r+0x14e>
   1d52e:	2300      	movs	r3, #0
   1d530:	2000      	movs	r0, #0
   1d532:	469a      	mov	sl, r3
   1d534:	2700      	movs	r7, #0
   1d536:	001d      	movs	r5, r3
   1d538:	46b1      	mov	r9, r6
   1d53a:	e029      	b.n	1d590 <__sfvwrite_r+0xf4>
   1d53c:	2800      	cmp	r0, #0
   1d53e:	d033      	beq.n	1d5a8 <__sfvwrite_r+0x10c>
   1d540:	46a8      	mov	r8, r5
   1d542:	42bd      	cmp	r5, r7
   1d544:	d900      	bls.n	1d548 <__sfvwrite_r+0xac>
   1d546:	46b8      	mov	r8, r7
   1d548:	6820      	ldr	r0, [r4, #0]
   1d54a:	6922      	ldr	r2, [r4, #16]
   1d54c:	4646      	mov	r6, r8
   1d54e:	6963      	ldr	r3, [r4, #20]
   1d550:	4290      	cmp	r0, r2
   1d552:	d907      	bls.n	1d564 <__sfvwrite_r+0xc8>
   1d554:	68a2      	ldr	r2, [r4, #8]
   1d556:	4694      	mov	ip, r2
   1d558:	449c      	add	ip, r3
   1d55a:	4662      	mov	r2, ip
   1d55c:	9201      	str	r2, [sp, #4]
   1d55e:	45e0      	cmp	r8, ip
   1d560:	dd00      	ble.n	1d564 <__sfvwrite_r+0xc8>
   1d562:	e0e9      	b.n	1d738 <__sfvwrite_r+0x29c>
   1d564:	4598      	cmp	r8, r3
   1d566:	da00      	bge.n	1d56a <__sfvwrite_r+0xce>
   1d568:	e08f      	b.n	1d68a <__sfvwrite_r+0x1ee>
   1d56a:	6a66      	ldr	r6, [r4, #36]	; 0x24
   1d56c:	4652      	mov	r2, sl
   1d56e:	69e1      	ldr	r1, [r4, #28]
   1d570:	9800      	ldr	r0, [sp, #0]
   1d572:	47b0      	blx	r6
   1d574:	1e06      	subs	r6, r0, #0
   1d576:	dd30      	ble.n	1d5da <__sfvwrite_r+0x13e>
   1d578:	1bad      	subs	r5, r5, r6
   1d57a:	2001      	movs	r0, #1
   1d57c:	2d00      	cmp	r5, #0
   1d57e:	d026      	beq.n	1d5ce <__sfvwrite_r+0x132>
   1d580:	464b      	mov	r3, r9
   1d582:	689b      	ldr	r3, [r3, #8]
   1d584:	44b2      	add	sl, r6
   1d586:	1bbf      	subs	r7, r7, r6
   1d588:	1b9e      	subs	r6, r3, r6
   1d58a:	464b      	mov	r3, r9
   1d58c:	609e      	str	r6, [r3, #8]
   1d58e:	d0b8      	beq.n	1d502 <__sfvwrite_r+0x66>
   1d590:	2f00      	cmp	r7, #0
   1d592:	d1d3      	bne.n	1d53c <__sfvwrite_r+0xa0>
   1d594:	465b      	mov	r3, fp
   1d596:	681b      	ldr	r3, [r3, #0]
   1d598:	469a      	mov	sl, r3
   1d59a:	465b      	mov	r3, fp
   1d59c:	685f      	ldr	r7, [r3, #4]
   1d59e:	2308      	movs	r3, #8
   1d5a0:	469c      	mov	ip, r3
   1d5a2:	44e3      	add	fp, ip
   1d5a4:	2f00      	cmp	r7, #0
   1d5a6:	d0f5      	beq.n	1d594 <__sfvwrite_r+0xf8>
   1d5a8:	003a      	movs	r2, r7
   1d5aa:	210a      	movs	r1, #10
   1d5ac:	4650      	mov	r0, sl
   1d5ae:	f000 f9ab 	bl	1d908 <memchr>
   1d5b2:	2800      	cmp	r0, #0
   1d5b4:	d100      	bne.n	1d5b8 <__sfvwrite_r+0x11c>
   1d5b6:	e0e2      	b.n	1d77e <__sfvwrite_r+0x2e2>
   1d5b8:	4653      	mov	r3, sl
   1d5ba:	3001      	adds	r0, #1
   1d5bc:	1ac5      	subs	r5, r0, r3
   1d5be:	e7bf      	b.n	1d540 <__sfvwrite_r+0xa4>
   1d5c0:	465b      	mov	r3, fp
   1d5c2:	681f      	ldr	r7, [r3, #0]
   1d5c4:	685d      	ldr	r5, [r3, #4]
   1d5c6:	2308      	movs	r3, #8
   1d5c8:	469c      	mov	ip, r3
   1d5ca:	44e3      	add	fp, ip
   1d5cc:	e782      	b.n	1d4d4 <__sfvwrite_r+0x38>
   1d5ce:	0021      	movs	r1, r4
   1d5d0:	9800      	ldr	r0, [sp, #0]
   1d5d2:	f7ff fd81 	bl	1d0d8 <_fflush_r>
   1d5d6:	2800      	cmp	r0, #0
   1d5d8:	d0d2      	beq.n	1d580 <__sfvwrite_r+0xe4>
   1d5da:	220c      	movs	r2, #12
   1d5dc:	5ea3      	ldrsh	r3, [r4, r2]
   1d5de:	2240      	movs	r2, #64	; 0x40
   1d5e0:	2001      	movs	r0, #1
   1d5e2:	4313      	orrs	r3, r2
   1d5e4:	81a3      	strh	r3, [r4, #12]
   1d5e6:	4240      	negs	r0, r0
   1d5e8:	e78c      	b.n	1d504 <__sfvwrite_r+0x68>
   1d5ea:	2200      	movs	r2, #0
   1d5ec:	4691      	mov	r9, r2
   1d5ee:	464d      	mov	r5, r9
   1d5f0:	2d00      	cmp	r5, #0
   1d5f2:	d023      	beq.n	1d63c <__sfvwrite_r+0x1a0>
   1d5f4:	68a2      	ldr	r2, [r4, #8]
   1d5f6:	4690      	mov	r8, r2
   1d5f8:	2280      	movs	r2, #128	; 0x80
   1d5fa:	0092      	lsls	r2, r2, #2
   1d5fc:	4213      	tst	r3, r2
   1d5fe:	d026      	beq.n	1d64e <__sfvwrite_r+0x1b2>
   1d600:	46c2      	mov	sl, r8
   1d602:	4545      	cmp	r5, r8
   1d604:	d34d      	bcc.n	1d6a2 <__sfvwrite_r+0x206>
   1d606:	2290      	movs	r2, #144	; 0x90
   1d608:	00d2      	lsls	r2, r2, #3
   1d60a:	4213      	tst	r3, r2
   1d60c:	d14e      	bne.n	1d6ac <__sfvwrite_r+0x210>
   1d60e:	002f      	movs	r7, r5
   1d610:	6820      	ldr	r0, [r4, #0]
   1d612:	4652      	mov	r2, sl
   1d614:	4649      	mov	r1, r9
   1d616:	f7fc fbbd 	bl	19d94 <memmove>
   1d61a:	4642      	mov	r2, r8
   1d61c:	68a3      	ldr	r3, [r4, #8]
   1d61e:	1a98      	subs	r0, r3, r2
   1d620:	6823      	ldr	r3, [r4, #0]
   1d622:	60a0      	str	r0, [r4, #8]
   1d624:	4453      	add	r3, sl
   1d626:	6023      	str	r3, [r4, #0]
   1d628:	68b3      	ldr	r3, [r6, #8]
   1d62a:	44b9      	add	r9, r7
   1d62c:	1bed      	subs	r5, r5, r7
   1d62e:	1bdf      	subs	r7, r3, r7
   1d630:	60b7      	str	r7, [r6, #8]
   1d632:	d100      	bne.n	1d636 <__sfvwrite_r+0x19a>
   1d634:	e765      	b.n	1d502 <__sfvwrite_r+0x66>
   1d636:	89a3      	ldrh	r3, [r4, #12]
   1d638:	2d00      	cmp	r5, #0
   1d63a:	d1db      	bne.n	1d5f4 <__sfvwrite_r+0x158>
   1d63c:	465a      	mov	r2, fp
   1d63e:	6812      	ldr	r2, [r2, #0]
   1d640:	4691      	mov	r9, r2
   1d642:	465a      	mov	r2, fp
   1d644:	6855      	ldr	r5, [r2, #4]
   1d646:	2208      	movs	r2, #8
   1d648:	4694      	mov	ip, r2
   1d64a:	44e3      	add	fp, ip
   1d64c:	e7d0      	b.n	1d5f0 <__sfvwrite_r+0x154>
   1d64e:	6820      	ldr	r0, [r4, #0]
   1d650:	6923      	ldr	r3, [r4, #16]
   1d652:	4298      	cmp	r0, r3
   1d654:	d802      	bhi.n	1d65c <__sfvwrite_r+0x1c0>
   1d656:	6967      	ldr	r7, [r4, #20]
   1d658:	42bd      	cmp	r5, r7
   1d65a:	d259      	bcs.n	1d710 <__sfvwrite_r+0x274>
   1d65c:	4647      	mov	r7, r8
   1d65e:	42af      	cmp	r7, r5
   1d660:	d900      	bls.n	1d664 <__sfvwrite_r+0x1c8>
   1d662:	002f      	movs	r7, r5
   1d664:	003a      	movs	r2, r7
   1d666:	4649      	mov	r1, r9
   1d668:	f7fc fb94 	bl	19d94 <memmove>
   1d66c:	68a3      	ldr	r3, [r4, #8]
   1d66e:	6822      	ldr	r2, [r4, #0]
   1d670:	1bdb      	subs	r3, r3, r7
   1d672:	19d2      	adds	r2, r2, r7
   1d674:	60a3      	str	r3, [r4, #8]
   1d676:	6022      	str	r2, [r4, #0]
   1d678:	2b00      	cmp	r3, #0
   1d67a:	d1d5      	bne.n	1d628 <__sfvwrite_r+0x18c>
   1d67c:	0021      	movs	r1, r4
   1d67e:	9800      	ldr	r0, [sp, #0]
   1d680:	f7ff fd2a 	bl	1d0d8 <_fflush_r>
   1d684:	2800      	cmp	r0, #0
   1d686:	d0cf      	beq.n	1d628 <__sfvwrite_r+0x18c>
   1d688:	e7a7      	b.n	1d5da <__sfvwrite_r+0x13e>
   1d68a:	4642      	mov	r2, r8
   1d68c:	4651      	mov	r1, sl
   1d68e:	f7fc fb81 	bl	19d94 <memmove>
   1d692:	4642      	mov	r2, r8
   1d694:	68a3      	ldr	r3, [r4, #8]
   1d696:	1a9b      	subs	r3, r3, r2
   1d698:	60a3      	str	r3, [r4, #8]
   1d69a:	6823      	ldr	r3, [r4, #0]
   1d69c:	4443      	add	r3, r8
   1d69e:	6023      	str	r3, [r4, #0]
   1d6a0:	e76a      	b.n	1d578 <__sfvwrite_r+0xdc>
   1d6a2:	46a8      	mov	r8, r5
   1d6a4:	6820      	ldr	r0, [r4, #0]
   1d6a6:	002f      	movs	r7, r5
   1d6a8:	46aa      	mov	sl, r5
   1d6aa:	e7b2      	b.n	1d612 <__sfvwrite_r+0x176>
   1d6ac:	6921      	ldr	r1, [r4, #16]
   1d6ae:	6822      	ldr	r2, [r4, #0]
   1d6b0:	1a52      	subs	r2, r2, r1
   1d6b2:	4692      	mov	sl, r2
   1d6b4:	6962      	ldr	r2, [r4, #20]
   1d6b6:	0057      	lsls	r7, r2, #1
   1d6b8:	18bf      	adds	r7, r7, r2
   1d6ba:	0ffa      	lsrs	r2, r7, #31
   1d6bc:	19d7      	adds	r7, r2, r7
   1d6be:	4652      	mov	r2, sl
   1d6c0:	1c50      	adds	r0, r2, #1
   1d6c2:	107f      	asrs	r7, r7, #1
   1d6c4:	1940      	adds	r0, r0, r5
   1d6c6:	003a      	movs	r2, r7
   1d6c8:	42b8      	cmp	r0, r7
   1d6ca:	d901      	bls.n	1d6d0 <__sfvwrite_r+0x234>
   1d6cc:	0007      	movs	r7, r0
   1d6ce:	0002      	movs	r2, r0
   1d6d0:	055b      	lsls	r3, r3, #21
   1d6d2:	d542      	bpl.n	1d75a <__sfvwrite_r+0x2be>
   1d6d4:	0011      	movs	r1, r2
   1d6d6:	9800      	ldr	r0, [sp, #0]
   1d6d8:	f7fc f82a 	bl	19730 <_malloc_r>
   1d6dc:	4680      	mov	r8, r0
   1d6de:	1e03      	subs	r3, r0, #0
   1d6e0:	d052      	beq.n	1d788 <__sfvwrite_r+0x2ec>
   1d6e2:	4652      	mov	r2, sl
   1d6e4:	6921      	ldr	r1, [r4, #16]
   1d6e6:	f7fc fb13 	bl	19d10 <memcpy>
   1d6ea:	89a3      	ldrh	r3, [r4, #12]
   1d6ec:	4a2a      	ldr	r2, [pc, #168]	; (1d798 <__sfvwrite_r+0x2fc>)
   1d6ee:	4013      	ands	r3, r2
   1d6f0:	2280      	movs	r2, #128	; 0x80
   1d6f2:	4313      	orrs	r3, r2
   1d6f4:	81a3      	strh	r3, [r4, #12]
   1d6f6:	4643      	mov	r3, r8
   1d6f8:	4640      	mov	r0, r8
   1d6fa:	6123      	str	r3, [r4, #16]
   1d6fc:	4653      	mov	r3, sl
   1d6fe:	4450      	add	r0, sl
   1d700:	6167      	str	r7, [r4, #20]
   1d702:	1aff      	subs	r7, r7, r3
   1d704:	60a7      	str	r7, [r4, #8]
   1d706:	6020      	str	r0, [r4, #0]
   1d708:	46a8      	mov	r8, r5
   1d70a:	002f      	movs	r7, r5
   1d70c:	46aa      	mov	sl, r5
   1d70e:	e780      	b.n	1d612 <__sfvwrite_r+0x176>
   1d710:	4b22      	ldr	r3, [pc, #136]	; (1d79c <__sfvwrite_r+0x300>)
   1d712:	0028      	movs	r0, r5
   1d714:	429d      	cmp	r5, r3
   1d716:	d900      	bls.n	1d71a <__sfvwrite_r+0x27e>
   1d718:	0018      	movs	r0, r3
   1d71a:	0039      	movs	r1, r7
   1d71c:	f7f8 ffd0 	bl	166c0 <__divsi3>
   1d720:	003b      	movs	r3, r7
   1d722:	464a      	mov	r2, r9
   1d724:	4343      	muls	r3, r0
   1d726:	69e1      	ldr	r1, [r4, #28]
   1d728:	9800      	ldr	r0, [sp, #0]
   1d72a:	6a67      	ldr	r7, [r4, #36]	; 0x24
   1d72c:	47b8      	blx	r7
   1d72e:	2800      	cmp	r0, #0
   1d730:	dc00      	bgt.n	1d734 <__sfvwrite_r+0x298>
   1d732:	e752      	b.n	1d5da <__sfvwrite_r+0x13e>
   1d734:	0007      	movs	r7, r0
   1d736:	e777      	b.n	1d628 <__sfvwrite_r+0x18c>
   1d738:	4666      	mov	r6, ip
   1d73a:	4651      	mov	r1, sl
   1d73c:	f7fc fb2a 	bl	19d94 <memmove>
   1d740:	46b4      	mov	ip, r6
   1d742:	6823      	ldr	r3, [r4, #0]
   1d744:	0021      	movs	r1, r4
   1d746:	4463      	add	r3, ip
   1d748:	6023      	str	r3, [r4, #0]
   1d74a:	9800      	ldr	r0, [sp, #0]
   1d74c:	f7ff fcc4 	bl	1d0d8 <_fflush_r>
   1d750:	2800      	cmp	r0, #0
   1d752:	d000      	beq.n	1d756 <__sfvwrite_r+0x2ba>
   1d754:	e741      	b.n	1d5da <__sfvwrite_r+0x13e>
   1d756:	9e01      	ldr	r6, [sp, #4]
   1d758:	e70e      	b.n	1d578 <__sfvwrite_r+0xdc>
   1d75a:	9800      	ldr	r0, [sp, #0]
   1d75c:	f000 fc5c 	bl	1e018 <_realloc_r>
   1d760:	4680      	mov	r8, r0
   1d762:	2800      	cmp	r0, #0
   1d764:	d1c7      	bne.n	1d6f6 <__sfvwrite_r+0x25a>
   1d766:	9d00      	ldr	r5, [sp, #0]
   1d768:	6921      	ldr	r1, [r4, #16]
   1d76a:	0028      	movs	r0, r5
   1d76c:	f7ff fdb8 	bl	1d2e0 <_free_r>
   1d770:	2280      	movs	r2, #128	; 0x80
   1d772:	89a3      	ldrh	r3, [r4, #12]
   1d774:	4393      	bics	r3, r2
   1d776:	3a74      	subs	r2, #116	; 0x74
   1d778:	b21b      	sxth	r3, r3
   1d77a:	602a      	str	r2, [r5, #0]
   1d77c:	e72f      	b.n	1d5de <__sfvwrite_r+0x142>
   1d77e:	1c7d      	adds	r5, r7, #1
   1d780:	e6de      	b.n	1d540 <__sfvwrite_r+0xa4>
   1d782:	2001      	movs	r0, #1
   1d784:	4240      	negs	r0, r0
   1d786:	e6bd      	b.n	1d504 <__sfvwrite_r+0x68>
   1d788:	9a00      	ldr	r2, [sp, #0]
   1d78a:	330c      	adds	r3, #12
   1d78c:	6013      	str	r3, [r2, #0]
   1d78e:	220c      	movs	r2, #12
   1d790:	5ea3      	ldrsh	r3, [r4, r2]
   1d792:	e724      	b.n	1d5de <__sfvwrite_r+0x142>
   1d794:	7ffffc00 	.word	0x7ffffc00
   1d798:	fffffb7f 	.word	0xfffffb7f
   1d79c:	7fffffff 	.word	0x7fffffff

0001d7a0 <_fwalk_reent>:
   1d7a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1d7a2:	4647      	mov	r7, r8
   1d7a4:	46ce      	mov	lr, r9
   1d7a6:	b580      	push	{r7, lr}
   1d7a8:	27b8      	movs	r7, #184	; 0xb8
   1d7aa:	4680      	mov	r8, r0
   1d7ac:	00bf      	lsls	r7, r7, #2
   1d7ae:	4447      	add	r7, r8
   1d7b0:	4689      	mov	r9, r1
   1d7b2:	2600      	movs	r6, #0
   1d7b4:	2f00      	cmp	r7, #0
   1d7b6:	d014      	beq.n	1d7e2 <_fwalk_reent+0x42>
   1d7b8:	687b      	ldr	r3, [r7, #4]
   1d7ba:	68bc      	ldr	r4, [r7, #8]
   1d7bc:	1e5d      	subs	r5, r3, #1
   1d7be:	d40d      	bmi.n	1d7dc <_fwalk_reent+0x3c>
   1d7c0:	89a3      	ldrh	r3, [r4, #12]
   1d7c2:	2b01      	cmp	r3, #1
   1d7c4:	d907      	bls.n	1d7d6 <_fwalk_reent+0x36>
   1d7c6:	220e      	movs	r2, #14
   1d7c8:	5ea3      	ldrsh	r3, [r4, r2]
   1d7ca:	3301      	adds	r3, #1
   1d7cc:	d003      	beq.n	1d7d6 <_fwalk_reent+0x36>
   1d7ce:	0021      	movs	r1, r4
   1d7d0:	4640      	mov	r0, r8
   1d7d2:	47c8      	blx	r9
   1d7d4:	4306      	orrs	r6, r0
   1d7d6:	3468      	adds	r4, #104	; 0x68
   1d7d8:	3d01      	subs	r5, #1
   1d7da:	d2f1      	bcs.n	1d7c0 <_fwalk_reent+0x20>
   1d7dc:	683f      	ldr	r7, [r7, #0]
   1d7de:	2f00      	cmp	r7, #0
   1d7e0:	d1ea      	bne.n	1d7b8 <_fwalk_reent+0x18>
   1d7e2:	0030      	movs	r0, r6
   1d7e4:	bc0c      	pop	{r2, r3}
   1d7e6:	4690      	mov	r8, r2
   1d7e8:	4699      	mov	r9, r3
   1d7ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001d7ec <_localeconv_r>:
   1d7ec:	4b04      	ldr	r3, [pc, #16]	; (1d800 <_localeconv_r+0x14>)
   1d7ee:	681b      	ldr	r3, [r3, #0]
   1d7f0:	6b58      	ldr	r0, [r3, #52]	; 0x34
   1d7f2:	2800      	cmp	r0, #0
   1d7f4:	d001      	beq.n	1d7fa <_localeconv_r+0xe>
   1d7f6:	30f0      	adds	r0, #240	; 0xf0
   1d7f8:	4770      	bx	lr
   1d7fa:	4802      	ldr	r0, [pc, #8]	; (1d804 <_localeconv_r+0x18>)
   1d7fc:	e7fb      	b.n	1d7f6 <_localeconv_r+0xa>
   1d7fe:	46c0      	nop			; (mov r8, r8)
   1d800:	20000018 	.word	0x20000018
   1d804:	20000448 	.word	0x20000448

0001d808 <__retarget_lock_init_recursive>:
   1d808:	4770      	bx	lr
   1d80a:	46c0      	nop			; (mov r8, r8)

0001d80c <__retarget_lock_close_recursive>:
   1d80c:	4770      	bx	lr
   1d80e:	46c0      	nop			; (mov r8, r8)

0001d810 <__retarget_lock_acquire_recursive>:
   1d810:	4770      	bx	lr
   1d812:	46c0      	nop			; (mov r8, r8)

0001d814 <__retarget_lock_release_recursive>:
   1d814:	4770      	bx	lr
   1d816:	46c0      	nop			; (mov r8, r8)

0001d818 <__swhatbuf_r>:
   1d818:	b570      	push	{r4, r5, r6, lr}
   1d81a:	000c      	movs	r4, r1
   1d81c:	001e      	movs	r6, r3
   1d81e:	230e      	movs	r3, #14
   1d820:	5ec9      	ldrsh	r1, [r1, r3]
   1d822:	b090      	sub	sp, #64	; 0x40
   1d824:	0015      	movs	r5, r2
   1d826:	2900      	cmp	r1, #0
   1d828:	db15      	blt.n	1d856 <__swhatbuf_r+0x3e>
   1d82a:	aa01      	add	r2, sp, #4
   1d82c:	f000 fff8 	bl	1e820 <_fstat_r>
   1d830:	2800      	cmp	r0, #0
   1d832:	db10      	blt.n	1d856 <__swhatbuf_r+0x3e>
   1d834:	22f0      	movs	r2, #240	; 0xf0
   1d836:	9b02      	ldr	r3, [sp, #8]
   1d838:	0212      	lsls	r2, r2, #8
   1d83a:	4013      	ands	r3, r2
   1d83c:	4a0d      	ldr	r2, [pc, #52]	; (1d874 <__swhatbuf_r+0x5c>)
   1d83e:	2080      	movs	r0, #128	; 0x80
   1d840:	4694      	mov	ip, r2
   1d842:	4463      	add	r3, ip
   1d844:	425a      	negs	r2, r3
   1d846:	4153      	adcs	r3, r2
   1d848:	6033      	str	r3, [r6, #0]
   1d84a:	2380      	movs	r3, #128	; 0x80
   1d84c:	00db      	lsls	r3, r3, #3
   1d84e:	602b      	str	r3, [r5, #0]
   1d850:	0100      	lsls	r0, r0, #4
   1d852:	b010      	add	sp, #64	; 0x40
   1d854:	bd70      	pop	{r4, r5, r6, pc}
   1d856:	2300      	movs	r3, #0
   1d858:	6033      	str	r3, [r6, #0]
   1d85a:	89a3      	ldrh	r3, [r4, #12]
   1d85c:	061b      	lsls	r3, r3, #24
   1d85e:	d503      	bpl.n	1d868 <__swhatbuf_r+0x50>
   1d860:	2340      	movs	r3, #64	; 0x40
   1d862:	2000      	movs	r0, #0
   1d864:	602b      	str	r3, [r5, #0]
   1d866:	e7f4      	b.n	1d852 <__swhatbuf_r+0x3a>
   1d868:	2380      	movs	r3, #128	; 0x80
   1d86a:	00db      	lsls	r3, r3, #3
   1d86c:	602b      	str	r3, [r5, #0]
   1d86e:	2000      	movs	r0, #0
   1d870:	e7ef      	b.n	1d852 <__swhatbuf_r+0x3a>
   1d872:	46c0      	nop			; (mov r8, r8)
   1d874:	ffffe000 	.word	0xffffe000

0001d878 <__smakebuf_r>:
   1d878:	b570      	push	{r4, r5, r6, lr}
   1d87a:	898b      	ldrh	r3, [r1, #12]
   1d87c:	b082      	sub	sp, #8
   1d87e:	0006      	movs	r6, r0
   1d880:	000c      	movs	r4, r1
   1d882:	079b      	lsls	r3, r3, #30
   1d884:	d507      	bpl.n	1d896 <__smakebuf_r+0x1e>
   1d886:	0023      	movs	r3, r4
   1d888:	3343      	adds	r3, #67	; 0x43
   1d88a:	6023      	str	r3, [r4, #0]
   1d88c:	6123      	str	r3, [r4, #16]
   1d88e:	2301      	movs	r3, #1
   1d890:	6163      	str	r3, [r4, #20]
   1d892:	b002      	add	sp, #8
   1d894:	bd70      	pop	{r4, r5, r6, pc}
   1d896:	ab01      	add	r3, sp, #4
   1d898:	466a      	mov	r2, sp
   1d89a:	f7ff ffbd 	bl	1d818 <__swhatbuf_r>
   1d89e:	9900      	ldr	r1, [sp, #0]
   1d8a0:	0005      	movs	r5, r0
   1d8a2:	0030      	movs	r0, r6
   1d8a4:	f7fb ff44 	bl	19730 <_malloc_r>
   1d8a8:	2800      	cmp	r0, #0
   1d8aa:	d01e      	beq.n	1d8ea <__smakebuf_r+0x72>
   1d8ac:	2280      	movs	r2, #128	; 0x80
   1d8ae:	4b15      	ldr	r3, [pc, #84]	; (1d904 <__smakebuf_r+0x8c>)
   1d8b0:	63f3      	str	r3, [r6, #60]	; 0x3c
   1d8b2:	89a3      	ldrh	r3, [r4, #12]
   1d8b4:	6020      	str	r0, [r4, #0]
   1d8b6:	4313      	orrs	r3, r2
   1d8b8:	9a00      	ldr	r2, [sp, #0]
   1d8ba:	b21b      	sxth	r3, r3
   1d8bc:	6162      	str	r2, [r4, #20]
   1d8be:	9a01      	ldr	r2, [sp, #4]
   1d8c0:	81a3      	strh	r3, [r4, #12]
   1d8c2:	6120      	str	r0, [r4, #16]
   1d8c4:	2a00      	cmp	r2, #0
   1d8c6:	d102      	bne.n	1d8ce <__smakebuf_r+0x56>
   1d8c8:	432b      	orrs	r3, r5
   1d8ca:	81a3      	strh	r3, [r4, #12]
   1d8cc:	e7e1      	b.n	1d892 <__smakebuf_r+0x1a>
   1d8ce:	230e      	movs	r3, #14
   1d8d0:	5ee1      	ldrsh	r1, [r4, r3]
   1d8d2:	0030      	movs	r0, r6
   1d8d4:	f000 ffb8 	bl	1e848 <_isatty_r>
   1d8d8:	2800      	cmp	r0, #0
   1d8da:	d010      	beq.n	1d8fe <__smakebuf_r+0x86>
   1d8dc:	2203      	movs	r2, #3
   1d8de:	89a3      	ldrh	r3, [r4, #12]
   1d8e0:	4393      	bics	r3, r2
   1d8e2:	2201      	movs	r2, #1
   1d8e4:	4313      	orrs	r3, r2
   1d8e6:	b21b      	sxth	r3, r3
   1d8e8:	e7ee      	b.n	1d8c8 <__smakebuf_r+0x50>
   1d8ea:	220c      	movs	r2, #12
   1d8ec:	5ea3      	ldrsh	r3, [r4, r2]
   1d8ee:	059a      	lsls	r2, r3, #22
   1d8f0:	d4cf      	bmi.n	1d892 <__smakebuf_r+0x1a>
   1d8f2:	2203      	movs	r2, #3
   1d8f4:	4393      	bics	r3, r2
   1d8f6:	2202      	movs	r2, #2
   1d8f8:	4313      	orrs	r3, r2
   1d8fa:	81a3      	strh	r3, [r4, #12]
   1d8fc:	e7c3      	b.n	1d886 <__smakebuf_r+0xe>
   1d8fe:	220c      	movs	r2, #12
   1d900:	5ea3      	ldrsh	r3, [r4, r2]
   1d902:	e7e1      	b.n	1d8c8 <__smakebuf_r+0x50>
   1d904:	0001d12d 	.word	0x0001d12d

0001d908 <memchr>:
   1d908:	b570      	push	{r4, r5, r6, lr}
   1d90a:	b2cd      	uxtb	r5, r1
   1d90c:	0783      	lsls	r3, r0, #30
   1d90e:	d034      	beq.n	1d97a <memchr+0x72>
   1d910:	1e54      	subs	r4, r2, #1
   1d912:	2a00      	cmp	r2, #0
   1d914:	d01b      	beq.n	1d94e <memchr+0x46>
   1d916:	7803      	ldrb	r3, [r0, #0]
   1d918:	42ab      	cmp	r3, r5
   1d91a:	d019      	beq.n	1d950 <memchr+0x48>
   1d91c:	2203      	movs	r2, #3
   1d91e:	e004      	b.n	1d92a <memchr+0x22>
   1d920:	3c01      	subs	r4, #1
   1d922:	d314      	bcc.n	1d94e <memchr+0x46>
   1d924:	7803      	ldrb	r3, [r0, #0]
   1d926:	42ab      	cmp	r3, r5
   1d928:	d012      	beq.n	1d950 <memchr+0x48>
   1d92a:	3001      	adds	r0, #1
   1d92c:	4210      	tst	r0, r2
   1d92e:	d1f7      	bne.n	1d920 <memchr+0x18>
   1d930:	2c03      	cmp	r4, #3
   1d932:	d80e      	bhi.n	1d952 <memchr+0x4a>
   1d934:	2c00      	cmp	r4, #0
   1d936:	d00a      	beq.n	1d94e <memchr+0x46>
   1d938:	7803      	ldrb	r3, [r0, #0]
   1d93a:	42ab      	cmp	r3, r5
   1d93c:	d008      	beq.n	1d950 <memchr+0x48>
   1d93e:	1904      	adds	r4, r0, r4
   1d940:	e002      	b.n	1d948 <memchr+0x40>
   1d942:	7803      	ldrb	r3, [r0, #0]
   1d944:	42ab      	cmp	r3, r5
   1d946:	d003      	beq.n	1d950 <memchr+0x48>
   1d948:	3001      	adds	r0, #1
   1d94a:	4284      	cmp	r4, r0
   1d94c:	d1f9      	bne.n	1d942 <memchr+0x3a>
   1d94e:	2000      	movs	r0, #0
   1d950:	bd70      	pop	{r4, r5, r6, pc}
   1d952:	22ff      	movs	r2, #255	; 0xff
   1d954:	060b      	lsls	r3, r1, #24
   1d956:	0c1b      	lsrs	r3, r3, #16
   1d958:	4011      	ands	r1, r2
   1d95a:	4319      	orrs	r1, r3
   1d95c:	040b      	lsls	r3, r1, #16
   1d95e:	4e08      	ldr	r6, [pc, #32]	; (1d980 <memchr+0x78>)
   1d960:	4319      	orrs	r1, r3
   1d962:	6803      	ldr	r3, [r0, #0]
   1d964:	4a07      	ldr	r2, [pc, #28]	; (1d984 <memchr+0x7c>)
   1d966:	404b      	eors	r3, r1
   1d968:	189a      	adds	r2, r3, r2
   1d96a:	439a      	bics	r2, r3
   1d96c:	4232      	tst	r2, r6
   1d96e:	d1e3      	bne.n	1d938 <memchr+0x30>
   1d970:	3c04      	subs	r4, #4
   1d972:	3004      	adds	r0, #4
   1d974:	2c03      	cmp	r4, #3
   1d976:	d8f4      	bhi.n	1d962 <memchr+0x5a>
   1d978:	e7dc      	b.n	1d934 <memchr+0x2c>
   1d97a:	0014      	movs	r4, r2
   1d97c:	e7d8      	b.n	1d930 <memchr+0x28>
   1d97e:	46c0      	nop			; (mov r8, r8)
   1d980:	80808080 	.word	0x80808080
   1d984:	fefefeff 	.word	0xfefefeff

0001d988 <_Balloc>:
   1d988:	b570      	push	{r4, r5, r6, lr}
   1d98a:	0004      	movs	r4, r0
   1d98c:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
   1d98e:	000d      	movs	r5, r1
   1d990:	2800      	cmp	r0, #0
   1d992:	d00a      	beq.n	1d9aa <_Balloc+0x22>
   1d994:	00ab      	lsls	r3, r5, #2
   1d996:	18c3      	adds	r3, r0, r3
   1d998:	6818      	ldr	r0, [r3, #0]
   1d99a:	2800      	cmp	r0, #0
   1d99c:	d00f      	beq.n	1d9be <_Balloc+0x36>
   1d99e:	6802      	ldr	r2, [r0, #0]
   1d9a0:	601a      	str	r2, [r3, #0]
   1d9a2:	2300      	movs	r3, #0
   1d9a4:	6103      	str	r3, [r0, #16]
   1d9a6:	60c3      	str	r3, [r0, #12]
   1d9a8:	bd70      	pop	{r4, r5, r6, pc}
   1d9aa:	2221      	movs	r2, #33	; 0x21
   1d9ac:	2104      	movs	r1, #4
   1d9ae:	0020      	movs	r0, r4
   1d9b0:	f000 fe18 	bl	1e5e4 <_calloc_r>
   1d9b4:	64e0      	str	r0, [r4, #76]	; 0x4c
   1d9b6:	2800      	cmp	r0, #0
   1d9b8:	d1ec      	bne.n	1d994 <_Balloc+0xc>
   1d9ba:	2000      	movs	r0, #0
   1d9bc:	e7f4      	b.n	1d9a8 <_Balloc+0x20>
   1d9be:	2601      	movs	r6, #1
   1d9c0:	40ae      	lsls	r6, r5
   1d9c2:	1d72      	adds	r2, r6, #5
   1d9c4:	0092      	lsls	r2, r2, #2
   1d9c6:	2101      	movs	r1, #1
   1d9c8:	0020      	movs	r0, r4
   1d9ca:	f000 fe0b 	bl	1e5e4 <_calloc_r>
   1d9ce:	2800      	cmp	r0, #0
   1d9d0:	d0f3      	beq.n	1d9ba <_Balloc+0x32>
   1d9d2:	6045      	str	r5, [r0, #4]
   1d9d4:	6086      	str	r6, [r0, #8]
   1d9d6:	e7e4      	b.n	1d9a2 <_Balloc+0x1a>

0001d9d8 <_Bfree>:
   1d9d8:	2900      	cmp	r1, #0
   1d9da:	d006      	beq.n	1d9ea <_Bfree+0x12>
   1d9dc:	684b      	ldr	r3, [r1, #4]
   1d9de:	009a      	lsls	r2, r3, #2
   1d9e0:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   1d9e2:	189b      	adds	r3, r3, r2
   1d9e4:	681a      	ldr	r2, [r3, #0]
   1d9e6:	600a      	str	r2, [r1, #0]
   1d9e8:	6019      	str	r1, [r3, #0]
   1d9ea:	4770      	bx	lr

0001d9ec <__multadd>:
   1d9ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1d9ee:	46ce      	mov	lr, r9
   1d9f0:	4647      	mov	r7, r8
   1d9f2:	4681      	mov	r9, r0
   1d9f4:	0008      	movs	r0, r1
   1d9f6:	b580      	push	{r7, lr}
   1d9f8:	000d      	movs	r5, r1
   1d9fa:	690c      	ldr	r4, [r1, #16]
   1d9fc:	001f      	movs	r7, r3
   1d9fe:	2100      	movs	r1, #0
   1da00:	3014      	adds	r0, #20
   1da02:	6803      	ldr	r3, [r0, #0]
   1da04:	3101      	adds	r1, #1
   1da06:	041e      	lsls	r6, r3, #16
   1da08:	0c36      	lsrs	r6, r6, #16
   1da0a:	4356      	muls	r6, r2
   1da0c:	0c1b      	lsrs	r3, r3, #16
   1da0e:	4353      	muls	r3, r2
   1da10:	19f6      	adds	r6, r6, r7
   1da12:	0c37      	lsrs	r7, r6, #16
   1da14:	19db      	adds	r3, r3, r7
   1da16:	0436      	lsls	r6, r6, #16
   1da18:	0c1f      	lsrs	r7, r3, #16
   1da1a:	0c36      	lsrs	r6, r6, #16
   1da1c:	041b      	lsls	r3, r3, #16
   1da1e:	199b      	adds	r3, r3, r6
   1da20:	c008      	stmia	r0!, {r3}
   1da22:	428c      	cmp	r4, r1
   1da24:	dced      	bgt.n	1da02 <__multadd+0x16>
   1da26:	2f00      	cmp	r7, #0
   1da28:	d008      	beq.n	1da3c <__multadd+0x50>
   1da2a:	68ab      	ldr	r3, [r5, #8]
   1da2c:	429c      	cmp	r4, r3
   1da2e:	da0a      	bge.n	1da46 <__multadd+0x5a>
   1da30:	1d23      	adds	r3, r4, #4
   1da32:	009b      	lsls	r3, r3, #2
   1da34:	18eb      	adds	r3, r5, r3
   1da36:	3401      	adds	r4, #1
   1da38:	605f      	str	r7, [r3, #4]
   1da3a:	612c      	str	r4, [r5, #16]
   1da3c:	0028      	movs	r0, r5
   1da3e:	bc0c      	pop	{r2, r3}
   1da40:	4690      	mov	r8, r2
   1da42:	4699      	mov	r9, r3
   1da44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1da46:	686b      	ldr	r3, [r5, #4]
   1da48:	4648      	mov	r0, r9
   1da4a:	1c59      	adds	r1, r3, #1
   1da4c:	f7ff ff9c 	bl	1d988 <_Balloc>
   1da50:	0029      	movs	r1, r5
   1da52:	692b      	ldr	r3, [r5, #16]
   1da54:	4680      	mov	r8, r0
   1da56:	1c9a      	adds	r2, r3, #2
   1da58:	0092      	lsls	r2, r2, #2
   1da5a:	310c      	adds	r1, #12
   1da5c:	300c      	adds	r0, #12
   1da5e:	f7fc f957 	bl	19d10 <memcpy>
   1da62:	686b      	ldr	r3, [r5, #4]
   1da64:	009a      	lsls	r2, r3, #2
   1da66:	464b      	mov	r3, r9
   1da68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   1da6a:	189b      	adds	r3, r3, r2
   1da6c:	681a      	ldr	r2, [r3, #0]
   1da6e:	602a      	str	r2, [r5, #0]
   1da70:	601d      	str	r5, [r3, #0]
   1da72:	4645      	mov	r5, r8
   1da74:	e7dc      	b.n	1da30 <__multadd+0x44>
   1da76:	46c0      	nop			; (mov r8, r8)

0001da78 <__hi0bits>:
   1da78:	0003      	movs	r3, r0
   1da7a:	0c02      	lsrs	r2, r0, #16
   1da7c:	2000      	movs	r0, #0
   1da7e:	2a00      	cmp	r2, #0
   1da80:	d101      	bne.n	1da86 <__hi0bits+0xe>
   1da82:	041b      	lsls	r3, r3, #16
   1da84:	3010      	adds	r0, #16
   1da86:	0e1a      	lsrs	r2, r3, #24
   1da88:	d101      	bne.n	1da8e <__hi0bits+0x16>
   1da8a:	3008      	adds	r0, #8
   1da8c:	021b      	lsls	r3, r3, #8
   1da8e:	0f1a      	lsrs	r2, r3, #28
   1da90:	d101      	bne.n	1da96 <__hi0bits+0x1e>
   1da92:	3004      	adds	r0, #4
   1da94:	011b      	lsls	r3, r3, #4
   1da96:	0f9a      	lsrs	r2, r3, #30
   1da98:	d101      	bne.n	1da9e <__hi0bits+0x26>
   1da9a:	3002      	adds	r0, #2
   1da9c:	009b      	lsls	r3, r3, #2
   1da9e:	2b00      	cmp	r3, #0
   1daa0:	db03      	blt.n	1daaa <__hi0bits+0x32>
   1daa2:	3001      	adds	r0, #1
   1daa4:	005b      	lsls	r3, r3, #1
   1daa6:	d400      	bmi.n	1daaa <__hi0bits+0x32>
   1daa8:	2020      	movs	r0, #32
   1daaa:	4770      	bx	lr

0001daac <__lo0bits>:
   1daac:	6803      	ldr	r3, [r0, #0]
   1daae:	075a      	lsls	r2, r3, #29
   1dab0:	d009      	beq.n	1dac6 <__lo0bits+0x1a>
   1dab2:	2200      	movs	r2, #0
   1dab4:	07d9      	lsls	r1, r3, #31
   1dab6:	d404      	bmi.n	1dac2 <__lo0bits+0x16>
   1dab8:	079a      	lsls	r2, r3, #30
   1daba:	d420      	bmi.n	1dafe <__lo0bits+0x52>
   1dabc:	2202      	movs	r2, #2
   1dabe:	089b      	lsrs	r3, r3, #2
   1dac0:	6003      	str	r3, [r0, #0]
   1dac2:	0010      	movs	r0, r2
   1dac4:	4770      	bx	lr
   1dac6:	0419      	lsls	r1, r3, #16
   1dac8:	2200      	movs	r2, #0
   1daca:	2900      	cmp	r1, #0
   1dacc:	d101      	bne.n	1dad2 <__lo0bits+0x26>
   1dace:	0c1b      	lsrs	r3, r3, #16
   1dad0:	3210      	adds	r2, #16
   1dad2:	21ff      	movs	r1, #255	; 0xff
   1dad4:	4219      	tst	r1, r3
   1dad6:	d101      	bne.n	1dadc <__lo0bits+0x30>
   1dad8:	3208      	adds	r2, #8
   1dada:	0a1b      	lsrs	r3, r3, #8
   1dadc:	0719      	lsls	r1, r3, #28
   1dade:	d101      	bne.n	1dae4 <__lo0bits+0x38>
   1dae0:	3204      	adds	r2, #4
   1dae2:	091b      	lsrs	r3, r3, #4
   1dae4:	0799      	lsls	r1, r3, #30
   1dae6:	d101      	bne.n	1daec <__lo0bits+0x40>
   1dae8:	3202      	adds	r2, #2
   1daea:	089b      	lsrs	r3, r3, #2
   1daec:	07d9      	lsls	r1, r3, #31
   1daee:	d404      	bmi.n	1dafa <__lo0bits+0x4e>
   1daf0:	085b      	lsrs	r3, r3, #1
   1daf2:	d101      	bne.n	1daf8 <__lo0bits+0x4c>
   1daf4:	2220      	movs	r2, #32
   1daf6:	e7e4      	b.n	1dac2 <__lo0bits+0x16>
   1daf8:	3201      	adds	r2, #1
   1dafa:	6003      	str	r3, [r0, #0]
   1dafc:	e7e1      	b.n	1dac2 <__lo0bits+0x16>
   1dafe:	085b      	lsrs	r3, r3, #1
   1db00:	6003      	str	r3, [r0, #0]
   1db02:	2201      	movs	r2, #1
   1db04:	e7dd      	b.n	1dac2 <__lo0bits+0x16>
   1db06:	46c0      	nop			; (mov r8, r8)

0001db08 <__i2b>:
   1db08:	b510      	push	{r4, lr}
   1db0a:	000c      	movs	r4, r1
   1db0c:	2101      	movs	r1, #1
   1db0e:	f7ff ff3b 	bl	1d988 <_Balloc>
   1db12:	2301      	movs	r3, #1
   1db14:	6144      	str	r4, [r0, #20]
   1db16:	6103      	str	r3, [r0, #16]
   1db18:	bd10      	pop	{r4, pc}
   1db1a:	46c0      	nop			; (mov r8, r8)

0001db1c <__multiply>:
   1db1c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1db1e:	4657      	mov	r7, sl
   1db20:	464e      	mov	r6, r9
   1db22:	4645      	mov	r5, r8
   1db24:	46de      	mov	lr, fp
   1db26:	b5e0      	push	{r5, r6, r7, lr}
   1db28:	6914      	ldr	r4, [r2, #16]
   1db2a:	690e      	ldr	r6, [r1, #16]
   1db2c:	b085      	sub	sp, #20
   1db2e:	000f      	movs	r7, r1
   1db30:	0015      	movs	r5, r2
   1db32:	42a6      	cmp	r6, r4
   1db34:	da04      	bge.n	1db40 <__multiply+0x24>
   1db36:	0033      	movs	r3, r6
   1db38:	0017      	movs	r7, r2
   1db3a:	0026      	movs	r6, r4
   1db3c:	000d      	movs	r5, r1
   1db3e:	001c      	movs	r4, r3
   1db40:	1933      	adds	r3, r6, r4
   1db42:	4698      	mov	r8, r3
   1db44:	68bb      	ldr	r3, [r7, #8]
   1db46:	6879      	ldr	r1, [r7, #4]
   1db48:	4598      	cmp	r8, r3
   1db4a:	dd00      	ble.n	1db4e <__multiply+0x32>
   1db4c:	3101      	adds	r1, #1
   1db4e:	f7ff ff1b 	bl	1d988 <_Balloc>
   1db52:	2214      	movs	r2, #20
   1db54:	0003      	movs	r3, r0
   1db56:	4694      	mov	ip, r2
   1db58:	4463      	add	r3, ip
   1db5a:	469b      	mov	fp, r3
   1db5c:	4643      	mov	r3, r8
   1db5e:	009b      	lsls	r3, r3, #2
   1db60:	445b      	add	r3, fp
   1db62:	0019      	movs	r1, r3
   1db64:	9302      	str	r3, [sp, #8]
   1db66:	9003      	str	r0, [sp, #12]
   1db68:	465b      	mov	r3, fp
   1db6a:	2200      	movs	r2, #0
   1db6c:	458b      	cmp	fp, r1
   1db6e:	d203      	bcs.n	1db78 <__multiply+0x5c>
   1db70:	9902      	ldr	r1, [sp, #8]
   1db72:	c304      	stmia	r3!, {r2}
   1db74:	4299      	cmp	r1, r3
   1db76:	d8fc      	bhi.n	1db72 <__multiply+0x56>
   1db78:	2314      	movs	r3, #20
   1db7a:	00a4      	lsls	r4, r4, #2
   1db7c:	469a      	mov	sl, r3
   1db7e:	3714      	adds	r7, #20
   1db80:	0023      	movs	r3, r4
   1db82:	46bc      	mov	ip, r7
   1db84:	44aa      	add	sl, r5
   1db86:	00b6      	lsls	r6, r6, #2
   1db88:	4453      	add	r3, sl
   1db8a:	9700      	str	r7, [sp, #0]
   1db8c:	44b4      	add	ip, r6
   1db8e:	9301      	str	r3, [sp, #4]
   1db90:	459a      	cmp	sl, r3
   1db92:	d24f      	bcs.n	1dc34 <__multiply+0x118>
   1db94:	4653      	mov	r3, sl
   1db96:	681b      	ldr	r3, [r3, #0]
   1db98:	041e      	lsls	r6, r3, #16
   1db9a:	0c36      	lsrs	r6, r6, #16
   1db9c:	d020      	beq.n	1dbe0 <__multiply+0xc4>
   1db9e:	465c      	mov	r4, fp
   1dba0:	2700      	movs	r7, #0
   1dba2:	9d00      	ldr	r5, [sp, #0]
   1dba4:	0021      	movs	r1, r4
   1dba6:	cc08      	ldmia	r4!, {r3}
   1dba8:	cd04      	ldmia	r5!, {r2}
   1dbaa:	4699      	mov	r9, r3
   1dbac:	4648      	mov	r0, r9
   1dbae:	0413      	lsls	r3, r2, #16
   1dbb0:	0c1b      	lsrs	r3, r3, #16
   1dbb2:	4373      	muls	r3, r6
   1dbb4:	0400      	lsls	r0, r0, #16
   1dbb6:	0c00      	lsrs	r0, r0, #16
   1dbb8:	181b      	adds	r3, r3, r0
   1dbba:	19d8      	adds	r0, r3, r7
   1dbbc:	0c13      	lsrs	r3, r2, #16
   1dbbe:	464a      	mov	r2, r9
   1dbc0:	4373      	muls	r3, r6
   1dbc2:	0c12      	lsrs	r2, r2, #16
   1dbc4:	189b      	adds	r3, r3, r2
   1dbc6:	0c02      	lsrs	r2, r0, #16
   1dbc8:	189b      	adds	r3, r3, r2
   1dbca:	0402      	lsls	r2, r0, #16
   1dbcc:	0c1f      	lsrs	r7, r3, #16
   1dbce:	0c12      	lsrs	r2, r2, #16
   1dbd0:	041b      	lsls	r3, r3, #16
   1dbd2:	4313      	orrs	r3, r2
   1dbd4:	600b      	str	r3, [r1, #0]
   1dbd6:	45ac      	cmp	ip, r5
   1dbd8:	d8e4      	bhi.n	1dba4 <__multiply+0x88>
   1dbda:	4653      	mov	r3, sl
   1dbdc:	6027      	str	r7, [r4, #0]
   1dbde:	681b      	ldr	r3, [r3, #0]
   1dbe0:	0c1e      	lsrs	r6, r3, #16
   1dbe2:	d020      	beq.n	1dc26 <__multiply+0x10a>
   1dbe4:	465b      	mov	r3, fp
   1dbe6:	2100      	movs	r1, #0
   1dbe8:	681b      	ldr	r3, [r3, #0]
   1dbea:	465c      	mov	r4, fp
   1dbec:	0018      	movs	r0, r3
   1dbee:	000f      	movs	r7, r1
   1dbf0:	4662      	mov	r2, ip
   1dbf2:	9d00      	ldr	r5, [sp, #0]
   1dbf4:	8829      	ldrh	r1, [r5, #0]
   1dbf6:	0c00      	lsrs	r0, r0, #16
   1dbf8:	4371      	muls	r1, r6
   1dbfa:	1809      	adds	r1, r1, r0
   1dbfc:	19c9      	adds	r1, r1, r7
   1dbfe:	041b      	lsls	r3, r3, #16
   1dc00:	0408      	lsls	r0, r1, #16
   1dc02:	0c1b      	lsrs	r3, r3, #16
   1dc04:	4303      	orrs	r3, r0
   1dc06:	6023      	str	r3, [r4, #0]
   1dc08:	cd08      	ldmia	r5!, {r3}
   1dc0a:	6860      	ldr	r0, [r4, #4]
   1dc0c:	0c1b      	lsrs	r3, r3, #16
   1dc0e:	4373      	muls	r3, r6
   1dc10:	0407      	lsls	r7, r0, #16
   1dc12:	0c3f      	lsrs	r7, r7, #16
   1dc14:	19db      	adds	r3, r3, r7
   1dc16:	0c09      	lsrs	r1, r1, #16
   1dc18:	185b      	adds	r3, r3, r1
   1dc1a:	0c1f      	lsrs	r7, r3, #16
   1dc1c:	3404      	adds	r4, #4
   1dc1e:	42aa      	cmp	r2, r5
   1dc20:	d8e8      	bhi.n	1dbf4 <__multiply+0xd8>
   1dc22:	4694      	mov	ip, r2
   1dc24:	6023      	str	r3, [r4, #0]
   1dc26:	2304      	movs	r3, #4
   1dc28:	4699      	mov	r9, r3
   1dc2a:	9b01      	ldr	r3, [sp, #4]
   1dc2c:	44ca      	add	sl, r9
   1dc2e:	44cb      	add	fp, r9
   1dc30:	4553      	cmp	r3, sl
   1dc32:	d8af      	bhi.n	1db94 <__multiply+0x78>
   1dc34:	4643      	mov	r3, r8
   1dc36:	2b00      	cmp	r3, #0
   1dc38:	dd0e      	ble.n	1dc58 <__multiply+0x13c>
   1dc3a:	9b02      	ldr	r3, [sp, #8]
   1dc3c:	3b04      	subs	r3, #4
   1dc3e:	681a      	ldr	r2, [r3, #0]
   1dc40:	2a00      	cmp	r2, #0
   1dc42:	d109      	bne.n	1dc58 <__multiply+0x13c>
   1dc44:	4642      	mov	r2, r8
   1dc46:	e003      	b.n	1dc50 <__multiply+0x134>
   1dc48:	3b04      	subs	r3, #4
   1dc4a:	6819      	ldr	r1, [r3, #0]
   1dc4c:	2900      	cmp	r1, #0
   1dc4e:	d102      	bne.n	1dc56 <__multiply+0x13a>
   1dc50:	3a01      	subs	r2, #1
   1dc52:	2a00      	cmp	r2, #0
   1dc54:	d1f8      	bne.n	1dc48 <__multiply+0x12c>
   1dc56:	4690      	mov	r8, r2
   1dc58:	9b03      	ldr	r3, [sp, #12]
   1dc5a:	4642      	mov	r2, r8
   1dc5c:	0018      	movs	r0, r3
   1dc5e:	611a      	str	r2, [r3, #16]
   1dc60:	b005      	add	sp, #20
   1dc62:	bc3c      	pop	{r2, r3, r4, r5}
   1dc64:	4690      	mov	r8, r2
   1dc66:	4699      	mov	r9, r3
   1dc68:	46a2      	mov	sl, r4
   1dc6a:	46ab      	mov	fp, r5
   1dc6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1dc6e:	46c0      	nop			; (mov r8, r8)

0001dc70 <__pow5mult>:
   1dc70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1dc72:	4647      	mov	r7, r8
   1dc74:	46ce      	mov	lr, r9
   1dc76:	2303      	movs	r3, #3
   1dc78:	b580      	push	{r7, lr}
   1dc7a:	4680      	mov	r8, r0
   1dc7c:	000f      	movs	r7, r1
   1dc7e:	0014      	movs	r4, r2
   1dc80:	4013      	ands	r3, r2
   1dc82:	d13a      	bne.n	1dcfa <__pow5mult+0x8a>
   1dc84:	10a4      	asrs	r4, r4, #2
   1dc86:	003e      	movs	r6, r7
   1dc88:	2c00      	cmp	r4, #0
   1dc8a:	d025      	beq.n	1dcd8 <__pow5mult+0x68>
   1dc8c:	4643      	mov	r3, r8
   1dc8e:	6c9d      	ldr	r5, [r3, #72]	; 0x48
   1dc90:	2d00      	cmp	r5, #0
   1dc92:	d03b      	beq.n	1dd0c <__pow5mult+0x9c>
   1dc94:	003e      	movs	r6, r7
   1dc96:	2300      	movs	r3, #0
   1dc98:	2701      	movs	r7, #1
   1dc9a:	4699      	mov	r9, r3
   1dc9c:	4227      	tst	r7, r4
   1dc9e:	d107      	bne.n	1dcb0 <__pow5mult+0x40>
   1dca0:	1064      	asrs	r4, r4, #1
   1dca2:	d019      	beq.n	1dcd8 <__pow5mult+0x68>
   1dca4:	6828      	ldr	r0, [r5, #0]
   1dca6:	2800      	cmp	r0, #0
   1dca8:	d01b      	beq.n	1dce2 <__pow5mult+0x72>
   1dcaa:	0005      	movs	r5, r0
   1dcac:	4227      	tst	r7, r4
   1dcae:	d0f7      	beq.n	1dca0 <__pow5mult+0x30>
   1dcb0:	002a      	movs	r2, r5
   1dcb2:	0031      	movs	r1, r6
   1dcb4:	4640      	mov	r0, r8
   1dcb6:	f7ff ff31 	bl	1db1c <__multiply>
   1dcba:	2e00      	cmp	r6, #0
   1dcbc:	d01b      	beq.n	1dcf6 <__pow5mult+0x86>
   1dcbe:	4642      	mov	r2, r8
   1dcc0:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
   1dcc2:	6873      	ldr	r3, [r6, #4]
   1dcc4:	4694      	mov	ip, r2
   1dcc6:	009b      	lsls	r3, r3, #2
   1dcc8:	4463      	add	r3, ip
   1dcca:	681a      	ldr	r2, [r3, #0]
   1dccc:	1064      	asrs	r4, r4, #1
   1dcce:	6032      	str	r2, [r6, #0]
   1dcd0:	601e      	str	r6, [r3, #0]
   1dcd2:	0006      	movs	r6, r0
   1dcd4:	2c00      	cmp	r4, #0
   1dcd6:	d1e5      	bne.n	1dca4 <__pow5mult+0x34>
   1dcd8:	0030      	movs	r0, r6
   1dcda:	bc0c      	pop	{r2, r3}
   1dcdc:	4690      	mov	r8, r2
   1dcde:	4699      	mov	r9, r3
   1dce0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1dce2:	002a      	movs	r2, r5
   1dce4:	0029      	movs	r1, r5
   1dce6:	4640      	mov	r0, r8
   1dce8:	f7ff ff18 	bl	1db1c <__multiply>
   1dcec:	464b      	mov	r3, r9
   1dcee:	6028      	str	r0, [r5, #0]
   1dcf0:	6003      	str	r3, [r0, #0]
   1dcf2:	0005      	movs	r5, r0
   1dcf4:	e7da      	b.n	1dcac <__pow5mult+0x3c>
   1dcf6:	0006      	movs	r6, r0
   1dcf8:	e7d2      	b.n	1dca0 <__pow5mult+0x30>
   1dcfa:	4a0b      	ldr	r2, [pc, #44]	; (1dd28 <__pow5mult+0xb8>)
   1dcfc:	3b01      	subs	r3, #1
   1dcfe:	009b      	lsls	r3, r3, #2
   1dd00:	589a      	ldr	r2, [r3, r2]
   1dd02:	2300      	movs	r3, #0
   1dd04:	f7ff fe72 	bl	1d9ec <__multadd>
   1dd08:	0007      	movs	r7, r0
   1dd0a:	e7bb      	b.n	1dc84 <__pow5mult+0x14>
   1dd0c:	2101      	movs	r1, #1
   1dd0e:	4640      	mov	r0, r8
   1dd10:	f7ff fe3a 	bl	1d988 <_Balloc>
   1dd14:	4b05      	ldr	r3, [pc, #20]	; (1dd2c <__pow5mult+0xbc>)
   1dd16:	0005      	movs	r5, r0
   1dd18:	6143      	str	r3, [r0, #20]
   1dd1a:	2301      	movs	r3, #1
   1dd1c:	6103      	str	r3, [r0, #16]
   1dd1e:	4643      	mov	r3, r8
   1dd20:	6498      	str	r0, [r3, #72]	; 0x48
   1dd22:	2300      	movs	r3, #0
   1dd24:	6003      	str	r3, [r0, #0]
   1dd26:	e7b5      	b.n	1dc94 <__pow5mult+0x24>
   1dd28:	000208d0 	.word	0x000208d0
   1dd2c:	00000271 	.word	0x00000271

0001dd30 <__lshift>:
   1dd30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1dd32:	464e      	mov	r6, r9
   1dd34:	4645      	mov	r5, r8
   1dd36:	46de      	mov	lr, fp
   1dd38:	4657      	mov	r7, sl
   1dd3a:	b5e0      	push	{r5, r6, r7, lr}
   1dd3c:	000e      	movs	r6, r1
   1dd3e:	6933      	ldr	r3, [r6, #16]
   1dd40:	1154      	asrs	r4, r2, #5
   1dd42:	4698      	mov	r8, r3
   1dd44:	44a0      	add	r8, r4
   1dd46:	4643      	mov	r3, r8
   1dd48:	1c5d      	adds	r5, r3, #1
   1dd4a:	68b3      	ldr	r3, [r6, #8]
   1dd4c:	4683      	mov	fp, r0
   1dd4e:	4691      	mov	r9, r2
   1dd50:	6849      	ldr	r1, [r1, #4]
   1dd52:	429d      	cmp	r5, r3
   1dd54:	dd03      	ble.n	1dd5e <__lshift+0x2e>
   1dd56:	3101      	adds	r1, #1
   1dd58:	005b      	lsls	r3, r3, #1
   1dd5a:	429d      	cmp	r5, r3
   1dd5c:	dcfb      	bgt.n	1dd56 <__lshift+0x26>
   1dd5e:	4658      	mov	r0, fp
   1dd60:	f7ff fe12 	bl	1d988 <_Balloc>
   1dd64:	0003      	movs	r3, r0
   1dd66:	4684      	mov	ip, r0
   1dd68:	3314      	adds	r3, #20
   1dd6a:	2c00      	cmp	r4, #0
   1dd6c:	dd06      	ble.n	1dd7c <__lshift+0x4c>
   1dd6e:	2100      	movs	r1, #0
   1dd70:	00a4      	lsls	r4, r4, #2
   1dd72:	001a      	movs	r2, r3
   1dd74:	191b      	adds	r3, r3, r4
   1dd76:	c202      	stmia	r2!, {r1}
   1dd78:	4293      	cmp	r3, r2
   1dd7a:	d1fc      	bne.n	1dd76 <__lshift+0x46>
   1dd7c:	6932      	ldr	r2, [r6, #16]
   1dd7e:	4648      	mov	r0, r9
   1dd80:	0097      	lsls	r7, r2, #2
   1dd82:	0031      	movs	r1, r6
   1dd84:	221f      	movs	r2, #31
   1dd86:	3114      	adds	r1, #20
   1dd88:	4010      	ands	r0, r2
   1dd8a:	19cf      	adds	r7, r1, r7
   1dd8c:	4681      	mov	r9, r0
   1dd8e:	2800      	cmp	r0, #0
   1dd90:	d025      	beq.n	1ddde <__lshift+0xae>
   1dd92:	2220      	movs	r2, #32
   1dd94:	1a12      	subs	r2, r2, r0
   1dd96:	4692      	mov	sl, r2
   1dd98:	2200      	movs	r2, #0
   1dd9a:	4648      	mov	r0, r9
   1dd9c:	680c      	ldr	r4, [r1, #0]
   1dd9e:	4084      	lsls	r4, r0
   1dda0:	4650      	mov	r0, sl
   1dda2:	4314      	orrs	r4, r2
   1dda4:	601c      	str	r4, [r3, #0]
   1dda6:	c904      	ldmia	r1!, {r2}
   1dda8:	3304      	adds	r3, #4
   1ddaa:	40c2      	lsrs	r2, r0
   1ddac:	428f      	cmp	r7, r1
   1ddae:	d8f4      	bhi.n	1dd9a <__lshift+0x6a>
   1ddb0:	601a      	str	r2, [r3, #0]
   1ddb2:	2a00      	cmp	r2, #0
   1ddb4:	d001      	beq.n	1ddba <__lshift+0x8a>
   1ddb6:	4645      	mov	r5, r8
   1ddb8:	3502      	adds	r5, #2
   1ddba:	4663      	mov	r3, ip
   1ddbc:	3d01      	subs	r5, #1
   1ddbe:	611d      	str	r5, [r3, #16]
   1ddc0:	6873      	ldr	r3, [r6, #4]
   1ddc2:	4660      	mov	r0, ip
   1ddc4:	009a      	lsls	r2, r3, #2
   1ddc6:	465b      	mov	r3, fp
   1ddc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   1ddca:	189b      	adds	r3, r3, r2
   1ddcc:	681a      	ldr	r2, [r3, #0]
   1ddce:	6032      	str	r2, [r6, #0]
   1ddd0:	601e      	str	r6, [r3, #0]
   1ddd2:	bc3c      	pop	{r2, r3, r4, r5}
   1ddd4:	4690      	mov	r8, r2
   1ddd6:	4699      	mov	r9, r3
   1ddd8:	46a2      	mov	sl, r4
   1ddda:	46ab      	mov	fp, r5
   1dddc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1ddde:	c904      	ldmia	r1!, {r2}
   1dde0:	c304      	stmia	r3!, {r2}
   1dde2:	428f      	cmp	r7, r1
   1dde4:	d9e9      	bls.n	1ddba <__lshift+0x8a>
   1dde6:	c904      	ldmia	r1!, {r2}
   1dde8:	c304      	stmia	r3!, {r2}
   1ddea:	428f      	cmp	r7, r1
   1ddec:	d8f7      	bhi.n	1ddde <__lshift+0xae>
   1ddee:	e7e4      	b.n	1ddba <__lshift+0x8a>

0001ddf0 <__mcmp>:
   1ddf0:	690a      	ldr	r2, [r1, #16]
   1ddf2:	6903      	ldr	r3, [r0, #16]
   1ddf4:	b530      	push	{r4, r5, lr}
   1ddf6:	0005      	movs	r5, r0
   1ddf8:	1a98      	subs	r0, r3, r2
   1ddfa:	d111      	bne.n	1de20 <__mcmp+0x30>
   1ddfc:	0092      	lsls	r2, r2, #2
   1ddfe:	3514      	adds	r5, #20
   1de00:	3114      	adds	r1, #20
   1de02:	18ab      	adds	r3, r5, r2
   1de04:	1889      	adds	r1, r1, r2
   1de06:	e001      	b.n	1de0c <__mcmp+0x1c>
   1de08:	429d      	cmp	r5, r3
   1de0a:	d209      	bcs.n	1de20 <__mcmp+0x30>
   1de0c:	3b04      	subs	r3, #4
   1de0e:	3904      	subs	r1, #4
   1de10:	681c      	ldr	r4, [r3, #0]
   1de12:	680a      	ldr	r2, [r1, #0]
   1de14:	4294      	cmp	r4, r2
   1de16:	d0f7      	beq.n	1de08 <__mcmp+0x18>
   1de18:	4294      	cmp	r4, r2
   1de1a:	4180      	sbcs	r0, r0
   1de1c:	2201      	movs	r2, #1
   1de1e:	4310      	orrs	r0, r2
   1de20:	bd30      	pop	{r4, r5, pc}
   1de22:	46c0      	nop			; (mov r8, r8)

0001de24 <__mdiff>:
   1de24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1de26:	4645      	mov	r5, r8
   1de28:	46de      	mov	lr, fp
   1de2a:	4657      	mov	r7, sl
   1de2c:	464e      	mov	r6, r9
   1de2e:	0014      	movs	r4, r2
   1de30:	690b      	ldr	r3, [r1, #16]
   1de32:	6912      	ldr	r2, [r2, #16]
   1de34:	b5e0      	push	{r5, r6, r7, lr}
   1de36:	4688      	mov	r8, r1
   1de38:	1a9d      	subs	r5, r3, r2
   1de3a:	d11a      	bne.n	1de72 <__mdiff+0x4e>
   1de3c:	000f      	movs	r7, r1
   1de3e:	2114      	movs	r1, #20
   1de40:	468c      	mov	ip, r1
   1de42:	0092      	lsls	r2, r2, #2
   1de44:	3714      	adds	r7, #20
   1de46:	44a4      	add	ip, r4
   1de48:	18bb      	adds	r3, r7, r2
   1de4a:	4462      	add	r2, ip
   1de4c:	e002      	b.n	1de54 <__mdiff+0x30>
   1de4e:	429f      	cmp	r7, r3
   1de50:	d300      	bcc.n	1de54 <__mdiff+0x30>
   1de52:	e070      	b.n	1df36 <__mdiff+0x112>
   1de54:	3b04      	subs	r3, #4
   1de56:	3a04      	subs	r2, #4
   1de58:	681e      	ldr	r6, [r3, #0]
   1de5a:	6811      	ldr	r1, [r2, #0]
   1de5c:	428e      	cmp	r6, r1
   1de5e:	d0f6      	beq.n	1de4e <__mdiff+0x2a>
   1de60:	d300      	bcc.n	1de64 <__mdiff+0x40>
   1de62:	e071      	b.n	1df48 <__mdiff+0x124>
   1de64:	4643      	mov	r3, r8
   1de66:	003e      	movs	r6, r7
   1de68:	46a0      	mov	r8, r4
   1de6a:	4667      	mov	r7, ip
   1de6c:	001c      	movs	r4, r3
   1de6e:	2501      	movs	r5, #1
   1de70:	e006      	b.n	1de80 <__mdiff+0x5c>
   1de72:	2d00      	cmp	r5, #0
   1de74:	db6a      	blt.n	1df4c <__mdiff+0x128>
   1de76:	4647      	mov	r7, r8
   1de78:	0026      	movs	r6, r4
   1de7a:	2500      	movs	r5, #0
   1de7c:	3714      	adds	r7, #20
   1de7e:	3614      	adds	r6, #20
   1de80:	4643      	mov	r3, r8
   1de82:	6859      	ldr	r1, [r3, #4]
   1de84:	f7ff fd80 	bl	1d988 <_Balloc>
   1de88:	4643      	mov	r3, r8
   1de8a:	4681      	mov	r9, r0
   1de8c:	60c5      	str	r5, [r0, #12]
   1de8e:	6918      	ldr	r0, [r3, #16]
   1de90:	464d      	mov	r5, r9
   1de92:	0083      	lsls	r3, r0, #2
   1de94:	469c      	mov	ip, r3
   1de96:	6923      	ldr	r3, [r4, #16]
   1de98:	44bc      	add	ip, r7
   1de9a:	009b      	lsls	r3, r3, #2
   1de9c:	4698      	mov	r8, r3
   1de9e:	2300      	movs	r3, #0
   1dea0:	44b0      	add	r8, r6
   1dea2:	3514      	adds	r5, #20
   1dea4:	469a      	mov	sl, r3
   1dea6:	e000      	b.n	1deaa <__mdiff+0x86>
   1dea8:	0027      	movs	r7, r4
   1deaa:	ce04      	ldmia	r6!, {r2}
   1deac:	003c      	movs	r4, r7
   1deae:	4693      	mov	fp, r2
   1deb0:	4659      	mov	r1, fp
   1deb2:	cc08      	ldmia	r4!, {r3}
   1deb4:	0409      	lsls	r1, r1, #16
   1deb6:	041a      	lsls	r2, r3, #16
   1deb8:	0c12      	lsrs	r2, r2, #16
   1deba:	4452      	add	r2, sl
   1debc:	0c09      	lsrs	r1, r1, #16
   1debe:	1a52      	subs	r2, r2, r1
   1dec0:	0c19      	lsrs	r1, r3, #16
   1dec2:	465b      	mov	r3, fp
   1dec4:	0c1b      	lsrs	r3, r3, #16
   1dec6:	1acb      	subs	r3, r1, r3
   1dec8:	1411      	asrs	r1, r2, #16
   1deca:	185b      	adds	r3, r3, r1
   1decc:	0412      	lsls	r2, r2, #16
   1dece:	1419      	asrs	r1, r3, #16
   1ded0:	0c12      	lsrs	r2, r2, #16
   1ded2:	041b      	lsls	r3, r3, #16
   1ded4:	468a      	mov	sl, r1
   1ded6:	4313      	orrs	r3, r2
   1ded8:	1d29      	adds	r1, r5, #4
   1deda:	602b      	str	r3, [r5, #0]
   1dedc:	000d      	movs	r5, r1
   1dede:	45b0      	cmp	r8, r6
   1dee0:	d8e2      	bhi.n	1dea8 <__mdiff+0x84>
   1dee2:	45a4      	cmp	ip, r4
   1dee4:	d916      	bls.n	1df14 <__mdiff+0xf0>
   1dee6:	cc08      	ldmia	r4!, {r3}
   1dee8:	041a      	lsls	r2, r3, #16
   1deea:	0c12      	lsrs	r2, r2, #16
   1deec:	4452      	add	r2, sl
   1deee:	1416      	asrs	r6, r2, #16
   1def0:	0c1b      	lsrs	r3, r3, #16
   1def2:	199b      	adds	r3, r3, r6
   1def4:	0412      	lsls	r2, r2, #16
   1def6:	141e      	asrs	r6, r3, #16
   1def8:	0c12      	lsrs	r2, r2, #16
   1defa:	041b      	lsls	r3, r3, #16
   1defc:	4313      	orrs	r3, r2
   1defe:	46b2      	mov	sl, r6
   1df00:	c508      	stmia	r5!, {r3}
   1df02:	45a4      	cmp	ip, r4
   1df04:	d8ef      	bhi.n	1dee6 <__mdiff+0xc2>
   1df06:	4662      	mov	r2, ip
   1df08:	2403      	movs	r4, #3
   1df0a:	1bd2      	subs	r2, r2, r7
   1df0c:	3a05      	subs	r2, #5
   1df0e:	43a2      	bics	r2, r4
   1df10:	3204      	adds	r2, #4
   1df12:	1889      	adds	r1, r1, r2
   1df14:	3904      	subs	r1, #4
   1df16:	2b00      	cmp	r3, #0
   1df18:	d104      	bne.n	1df24 <__mdiff+0x100>
   1df1a:	3904      	subs	r1, #4
   1df1c:	680b      	ldr	r3, [r1, #0]
   1df1e:	3801      	subs	r0, #1
   1df20:	2b00      	cmp	r3, #0
   1df22:	d0fa      	beq.n	1df1a <__mdiff+0xf6>
   1df24:	464b      	mov	r3, r9
   1df26:	6118      	str	r0, [r3, #16]
   1df28:	4648      	mov	r0, r9
   1df2a:	bc3c      	pop	{r2, r3, r4, r5}
   1df2c:	4690      	mov	r8, r2
   1df2e:	4699      	mov	r9, r3
   1df30:	46a2      	mov	sl, r4
   1df32:	46ab      	mov	fp, r5
   1df34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1df36:	2100      	movs	r1, #0
   1df38:	f7ff fd26 	bl	1d988 <_Balloc>
   1df3c:	2301      	movs	r3, #1
   1df3e:	6103      	str	r3, [r0, #16]
   1df40:	2300      	movs	r3, #0
   1df42:	4681      	mov	r9, r0
   1df44:	6143      	str	r3, [r0, #20]
   1df46:	e7ef      	b.n	1df28 <__mdiff+0x104>
   1df48:	4666      	mov	r6, ip
   1df4a:	e799      	b.n	1de80 <__mdiff+0x5c>
   1df4c:	0027      	movs	r7, r4
   1df4e:	000e      	movs	r6, r1
   1df50:	46a0      	mov	r8, r4
   1df52:	3714      	adds	r7, #20
   1df54:	3614      	adds	r6, #20
   1df56:	000c      	movs	r4, r1
   1df58:	2501      	movs	r5, #1
   1df5a:	e791      	b.n	1de80 <__mdiff+0x5c>

0001df5c <__d2b>:
   1df5c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1df5e:	2101      	movs	r1, #1
   1df60:	001c      	movs	r4, r3
   1df62:	b083      	sub	sp, #12
   1df64:	9e08      	ldr	r6, [sp, #32]
   1df66:	0015      	movs	r5, r2
   1df68:	f7ff fd0e 	bl	1d988 <_Balloc>
   1df6c:	0323      	lsls	r3, r4, #12
   1df6e:	0064      	lsls	r4, r4, #1
   1df70:	0007      	movs	r7, r0
   1df72:	0b1b      	lsrs	r3, r3, #12
   1df74:	0d64      	lsrs	r4, r4, #21
   1df76:	d002      	beq.n	1df7e <__d2b+0x22>
   1df78:	2280      	movs	r2, #128	; 0x80
   1df7a:	0352      	lsls	r2, r2, #13
   1df7c:	4313      	orrs	r3, r2
   1df7e:	9301      	str	r3, [sp, #4]
   1df80:	2d00      	cmp	r5, #0
   1df82:	d019      	beq.n	1dfb8 <__d2b+0x5c>
   1df84:	4668      	mov	r0, sp
   1df86:	9500      	str	r5, [sp, #0]
   1df88:	f7ff fd90 	bl	1daac <__lo0bits>
   1df8c:	2800      	cmp	r0, #0
   1df8e:	d130      	bne.n	1dff2 <__d2b+0x96>
   1df90:	9b00      	ldr	r3, [sp, #0]
   1df92:	617b      	str	r3, [r7, #20]
   1df94:	9b01      	ldr	r3, [sp, #4]
   1df96:	61bb      	str	r3, [r7, #24]
   1df98:	1e5a      	subs	r2, r3, #1
   1df9a:	4193      	sbcs	r3, r2
   1df9c:	1c5d      	adds	r5, r3, #1
   1df9e:	613d      	str	r5, [r7, #16]
   1dfa0:	2c00      	cmp	r4, #0
   1dfa2:	d014      	beq.n	1dfce <__d2b+0x72>
   1dfa4:	4b19      	ldr	r3, [pc, #100]	; (1e00c <__d2b+0xb0>)
   1dfa6:	469c      	mov	ip, r3
   1dfa8:	2335      	movs	r3, #53	; 0x35
   1dfaa:	4464      	add	r4, ip
   1dfac:	1824      	adds	r4, r4, r0
   1dfae:	1a18      	subs	r0, r3, r0
   1dfb0:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1dfb2:	6034      	str	r4, [r6, #0]
   1dfb4:	6018      	str	r0, [r3, #0]
   1dfb6:	e019      	b.n	1dfec <__d2b+0x90>
   1dfb8:	a801      	add	r0, sp, #4
   1dfba:	f7ff fd77 	bl	1daac <__lo0bits>
   1dfbe:	9b01      	ldr	r3, [sp, #4]
   1dfc0:	3020      	adds	r0, #32
   1dfc2:	617b      	str	r3, [r7, #20]
   1dfc4:	2301      	movs	r3, #1
   1dfc6:	2501      	movs	r5, #1
   1dfc8:	613b      	str	r3, [r7, #16]
   1dfca:	2c00      	cmp	r4, #0
   1dfcc:	d1ea      	bne.n	1dfa4 <__d2b+0x48>
   1dfce:	4b10      	ldr	r3, [pc, #64]	; (1e010 <__d2b+0xb4>)
   1dfd0:	469c      	mov	ip, r3
   1dfd2:	4b10      	ldr	r3, [pc, #64]	; (1e014 <__d2b+0xb8>)
   1dfd4:	4460      	add	r0, ip
   1dfd6:	18eb      	adds	r3, r5, r3
   1dfd8:	009b      	lsls	r3, r3, #2
   1dfda:	18fb      	adds	r3, r7, r3
   1dfdc:	6030      	str	r0, [r6, #0]
   1dfde:	6958      	ldr	r0, [r3, #20]
   1dfe0:	f7ff fd4a 	bl	1da78 <__hi0bits>
   1dfe4:	016b      	lsls	r3, r5, #5
   1dfe6:	1a18      	subs	r0, r3, r0
   1dfe8:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1dfea:	6018      	str	r0, [r3, #0]
   1dfec:	0038      	movs	r0, r7
   1dfee:	b003      	add	sp, #12
   1dff0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1dff2:	9b01      	ldr	r3, [sp, #4]
   1dff4:	2220      	movs	r2, #32
   1dff6:	0019      	movs	r1, r3
   1dff8:	1a12      	subs	r2, r2, r0
   1dffa:	4091      	lsls	r1, r2
   1dffc:	000a      	movs	r2, r1
   1dffe:	40c3      	lsrs	r3, r0
   1e000:	9900      	ldr	r1, [sp, #0]
   1e002:	9301      	str	r3, [sp, #4]
   1e004:	430a      	orrs	r2, r1
   1e006:	617a      	str	r2, [r7, #20]
   1e008:	e7c5      	b.n	1df96 <__d2b+0x3a>
   1e00a:	46c0      	nop			; (mov r8, r8)
   1e00c:	fffffbcd 	.word	0xfffffbcd
   1e010:	fffffbce 	.word	0xfffffbce
   1e014:	3fffffff 	.word	0x3fffffff

0001e018 <_realloc_r>:
   1e018:	b5f0      	push	{r4, r5, r6, r7, lr}
   1e01a:	464e      	mov	r6, r9
   1e01c:	4645      	mov	r5, r8
   1e01e:	46de      	mov	lr, fp
   1e020:	4657      	mov	r7, sl
   1e022:	b5e0      	push	{r5, r6, r7, lr}
   1e024:	b085      	sub	sp, #20
   1e026:	9001      	str	r0, [sp, #4]
   1e028:	000e      	movs	r6, r1
   1e02a:	0015      	movs	r5, r2
   1e02c:	2900      	cmp	r1, #0
   1e02e:	d100      	bne.n	1e032 <_realloc_r+0x1a>
   1e030:	e09e      	b.n	1e170 <_realloc_r+0x158>
   1e032:	0037      	movs	r7, r6
   1e034:	9801      	ldr	r0, [sp, #4]
   1e036:	3f08      	subs	r7, #8
   1e038:	f7fb ff46 	bl	19ec8 <__malloc_lock>
   1e03c:	687a      	ldr	r2, [r7, #4]
   1e03e:	2303      	movs	r3, #3
   1e040:	0014      	movs	r4, r2
   1e042:	439c      	bics	r4, r3
   1e044:	002b      	movs	r3, r5
   1e046:	330b      	adds	r3, #11
   1e048:	46b9      	mov	r9, r7
   1e04a:	2b16      	cmp	r3, #22
   1e04c:	d847      	bhi.n	1e0de <_realloc_r+0xc6>
   1e04e:	2110      	movs	r1, #16
   1e050:	2310      	movs	r3, #16
   1e052:	4688      	mov	r8, r1
   1e054:	4545      	cmp	r5, r8
   1e056:	d846      	bhi.n	1e0e6 <_realloc_r+0xce>
   1e058:	429c      	cmp	r4, r3
   1e05a:	da49      	bge.n	1e0f0 <_realloc_r+0xd8>
   1e05c:	49cc      	ldr	r1, [pc, #816]	; (1e390 <_realloc_r+0x378>)
   1e05e:	1938      	adds	r0, r7, r4
   1e060:	468b      	mov	fp, r1
   1e062:	6889      	ldr	r1, [r1, #8]
   1e064:	9002      	str	r0, [sp, #8]
   1e066:	4288      	cmp	r0, r1
   1e068:	d100      	bne.n	1e06c <_realloc_r+0x54>
   1e06a:	e0c2      	b.n	1e1f2 <_realloc_r+0x1da>
   1e06c:	2101      	movs	r1, #1
   1e06e:	468a      	mov	sl, r1
   1e070:	6840      	ldr	r0, [r0, #4]
   1e072:	0001      	movs	r1, r0
   1e074:	9003      	str	r0, [sp, #12]
   1e076:	4650      	mov	r0, sl
   1e078:	4381      	bics	r1, r0
   1e07a:	468c      	mov	ip, r1
   1e07c:	9902      	ldr	r1, [sp, #8]
   1e07e:	468b      	mov	fp, r1
   1e080:	44dc      	add	ip, fp
   1e082:	4661      	mov	r1, ip
   1e084:	6849      	ldr	r1, [r1, #4]
   1e086:	4201      	tst	r1, r0
   1e088:	d04d      	beq.n	1e126 <_realloc_r+0x10e>
   1e08a:	4210      	tst	r0, r2
   1e08c:	d100      	bne.n	1e090 <_realloc_r+0x78>
   1e08e:	e0a2      	b.n	1e1d6 <_realloc_r+0x1be>
   1e090:	0029      	movs	r1, r5
   1e092:	9801      	ldr	r0, [sp, #4]
   1e094:	f7fb fb4c 	bl	19730 <_malloc_r>
   1e098:	1e05      	subs	r5, r0, #0
   1e09a:	d039      	beq.n	1e110 <_realloc_r+0xf8>
   1e09c:	2301      	movs	r3, #1
   1e09e:	0002      	movs	r2, r0
   1e0a0:	6879      	ldr	r1, [r7, #4]
   1e0a2:	3a08      	subs	r2, #8
   1e0a4:	4399      	bics	r1, r3
   1e0a6:	187f      	adds	r7, r7, r1
   1e0a8:	42ba      	cmp	r2, r7
   1e0aa:	d100      	bne.n	1e0ae <_realloc_r+0x96>
   1e0ac:	e12e      	b.n	1e30c <_realloc_r+0x2f4>
   1e0ae:	1f22      	subs	r2, r4, #4
   1e0b0:	2a24      	cmp	r2, #36	; 0x24
   1e0b2:	d900      	bls.n	1e0b6 <_realloc_r+0x9e>
   1e0b4:	e114      	b.n	1e2e0 <_realloc_r+0x2c8>
   1e0b6:	2a13      	cmp	r2, #19
   1e0b8:	d900      	bls.n	1e0bc <_realloc_r+0xa4>
   1e0ba:	e0e8      	b.n	1e28e <_realloc_r+0x276>
   1e0bc:	0003      	movs	r3, r0
   1e0be:	0032      	movs	r2, r6
   1e0c0:	6811      	ldr	r1, [r2, #0]
   1e0c2:	6019      	str	r1, [r3, #0]
   1e0c4:	6851      	ldr	r1, [r2, #4]
   1e0c6:	6059      	str	r1, [r3, #4]
   1e0c8:	6892      	ldr	r2, [r2, #8]
   1e0ca:	609a      	str	r2, [r3, #8]
   1e0cc:	9c01      	ldr	r4, [sp, #4]
   1e0ce:	0031      	movs	r1, r6
   1e0d0:	0020      	movs	r0, r4
   1e0d2:	f7ff f905 	bl	1d2e0 <_free_r>
   1e0d6:	0020      	movs	r0, r4
   1e0d8:	f7fb fefe 	bl	19ed8 <__malloc_unlock>
   1e0dc:	e01b      	b.n	1e116 <_realloc_r+0xfe>
   1e0de:	2107      	movs	r1, #7
   1e0e0:	438b      	bics	r3, r1
   1e0e2:	4698      	mov	r8, r3
   1e0e4:	d5b6      	bpl.n	1e054 <_realloc_r+0x3c>
   1e0e6:	230c      	movs	r3, #12
   1e0e8:	9a01      	ldr	r2, [sp, #4]
   1e0ea:	2500      	movs	r5, #0
   1e0ec:	6013      	str	r3, [r2, #0]
   1e0ee:	e012      	b.n	1e116 <_realloc_r+0xfe>
   1e0f0:	0035      	movs	r5, r6
   1e0f2:	4643      	mov	r3, r8
   1e0f4:	1ae3      	subs	r3, r4, r3
   1e0f6:	2b0f      	cmp	r3, #15
   1e0f8:	d825      	bhi.n	1e146 <_realloc_r+0x12e>
   1e0fa:	464b      	mov	r3, r9
   1e0fc:	2201      	movs	r2, #1
   1e0fe:	4649      	mov	r1, r9
   1e100:	685b      	ldr	r3, [r3, #4]
   1e102:	4013      	ands	r3, r2
   1e104:	4323      	orrs	r3, r4
   1e106:	604b      	str	r3, [r1, #4]
   1e108:	444c      	add	r4, r9
   1e10a:	6863      	ldr	r3, [r4, #4]
   1e10c:	431a      	orrs	r2, r3
   1e10e:	6062      	str	r2, [r4, #4]
   1e110:	9801      	ldr	r0, [sp, #4]
   1e112:	f7fb fee1 	bl	19ed8 <__malloc_unlock>
   1e116:	0028      	movs	r0, r5
   1e118:	b005      	add	sp, #20
   1e11a:	bc3c      	pop	{r2, r3, r4, r5}
   1e11c:	4690      	mov	r8, r2
   1e11e:	4699      	mov	r9, r3
   1e120:	46a2      	mov	sl, r4
   1e122:	46ab      	mov	fp, r5
   1e124:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1e126:	2103      	movs	r1, #3
   1e128:	9803      	ldr	r0, [sp, #12]
   1e12a:	468c      	mov	ip, r1
   1e12c:	4388      	bics	r0, r1
   1e12e:	1821      	adds	r1, r4, r0
   1e130:	468b      	mov	fp, r1
   1e132:	4299      	cmp	r1, r3
   1e134:	db21      	blt.n	1e17a <_realloc_r+0x162>
   1e136:	9a02      	ldr	r2, [sp, #8]
   1e138:	0035      	movs	r5, r6
   1e13a:	68d3      	ldr	r3, [r2, #12]
   1e13c:	6892      	ldr	r2, [r2, #8]
   1e13e:	465c      	mov	r4, fp
   1e140:	60d3      	str	r3, [r2, #12]
   1e142:	609a      	str	r2, [r3, #8]
   1e144:	e7d5      	b.n	1e0f2 <_realloc_r+0xda>
   1e146:	464a      	mov	r2, r9
   1e148:	2001      	movs	r0, #1
   1e14a:	4646      	mov	r6, r8
   1e14c:	6852      	ldr	r2, [r2, #4]
   1e14e:	4649      	mov	r1, r9
   1e150:	4002      	ands	r2, r0
   1e152:	4332      	orrs	r2, r6
   1e154:	464e      	mov	r6, r9
   1e156:	4441      	add	r1, r8
   1e158:	4303      	orrs	r3, r0
   1e15a:	6072      	str	r2, [r6, #4]
   1e15c:	444c      	add	r4, r9
   1e15e:	604b      	str	r3, [r1, #4]
   1e160:	6863      	ldr	r3, [r4, #4]
   1e162:	3108      	adds	r1, #8
   1e164:	4318      	orrs	r0, r3
   1e166:	6060      	str	r0, [r4, #4]
   1e168:	9801      	ldr	r0, [sp, #4]
   1e16a:	f7ff f8b9 	bl	1d2e0 <_free_r>
   1e16e:	e7cf      	b.n	1e110 <_realloc_r+0xf8>
   1e170:	0011      	movs	r1, r2
   1e172:	f7fb fadd 	bl	19730 <_malloc_r>
   1e176:	0005      	movs	r5, r0
   1e178:	e7cd      	b.n	1e116 <_realloc_r+0xfe>
   1e17a:	4651      	mov	r1, sl
   1e17c:	4211      	tst	r1, r2
   1e17e:	d000      	beq.n	1e182 <_realloc_r+0x16a>
   1e180:	e786      	b.n	1e090 <_realloc_r+0x78>
   1e182:	4661      	mov	r1, ip
   1e184:	683a      	ldr	r2, [r7, #0]
   1e186:	1aba      	subs	r2, r7, r2
   1e188:	4692      	mov	sl, r2
   1e18a:	6852      	ldr	r2, [r2, #4]
   1e18c:	438a      	bics	r2, r1
   1e18e:	1880      	adds	r0, r0, r2
   1e190:	4683      	mov	fp, r0
   1e192:	44a3      	add	fp, r4
   1e194:	459b      	cmp	fp, r3
   1e196:	db26      	blt.n	1e1e6 <_realloc_r+0x1ce>
   1e198:	9a02      	ldr	r2, [sp, #8]
   1e19a:	68d3      	ldr	r3, [r2, #12]
   1e19c:	6892      	ldr	r2, [r2, #8]
   1e19e:	60d3      	str	r3, [r2, #12]
   1e1a0:	609a      	str	r2, [r3, #8]
   1e1a2:	4653      	mov	r3, sl
   1e1a4:	4652      	mov	r2, sl
   1e1a6:	4655      	mov	r5, sl
   1e1a8:	6892      	ldr	r2, [r2, #8]
   1e1aa:	68db      	ldr	r3, [r3, #12]
   1e1ac:	3508      	adds	r5, #8
   1e1ae:	60d3      	str	r3, [r2, #12]
   1e1b0:	609a      	str	r2, [r3, #8]
   1e1b2:	1f22      	subs	r2, r4, #4
   1e1b4:	2a24      	cmp	r2, #36	; 0x24
   1e1b6:	d900      	bls.n	1e1ba <_realloc_r+0x1a2>
   1e1b8:	e096      	b.n	1e2e8 <_realloc_r+0x2d0>
   1e1ba:	2a13      	cmp	r2, #19
   1e1bc:	d972      	bls.n	1e2a4 <_realloc_r+0x28c>
   1e1be:	4653      	mov	r3, sl
   1e1c0:	6831      	ldr	r1, [r6, #0]
   1e1c2:	6099      	str	r1, [r3, #8]
   1e1c4:	6871      	ldr	r1, [r6, #4]
   1e1c6:	60d9      	str	r1, [r3, #12]
   1e1c8:	2a1b      	cmp	r2, #27
   1e1ca:	d900      	bls.n	1e1ce <_realloc_r+0x1b6>
   1e1cc:	e0a4      	b.n	1e318 <_realloc_r+0x300>
   1e1ce:	0032      	movs	r2, r6
   1e1d0:	3310      	adds	r3, #16
   1e1d2:	3208      	adds	r2, #8
   1e1d4:	e068      	b.n	1e2a8 <_realloc_r+0x290>
   1e1d6:	683a      	ldr	r2, [r7, #0]
   1e1d8:	1aba      	subs	r2, r7, r2
   1e1da:	4692      	mov	sl, r2
   1e1dc:	4651      	mov	r1, sl
   1e1de:	2203      	movs	r2, #3
   1e1e0:	6849      	ldr	r1, [r1, #4]
   1e1e2:	4391      	bics	r1, r2
   1e1e4:	000a      	movs	r2, r1
   1e1e6:	4693      	mov	fp, r2
   1e1e8:	44a3      	add	fp, r4
   1e1ea:	459b      	cmp	fp, r3
   1e1ec:	da00      	bge.n	1e1f0 <_realloc_r+0x1d8>
   1e1ee:	e74f      	b.n	1e090 <_realloc_r+0x78>
   1e1f0:	e7d7      	b.n	1e1a2 <_realloc_r+0x18a>
   1e1f2:	2003      	movs	r0, #3
   1e1f4:	9902      	ldr	r1, [sp, #8]
   1e1f6:	4684      	mov	ip, r0
   1e1f8:	6849      	ldr	r1, [r1, #4]
   1e1fa:	4381      	bics	r1, r0
   1e1fc:	4640      	mov	r0, r8
   1e1fe:	1909      	adds	r1, r1, r4
   1e200:	3010      	adds	r0, #16
   1e202:	9002      	str	r0, [sp, #8]
   1e204:	4281      	cmp	r1, r0
   1e206:	da58      	bge.n	1e2ba <_realloc_r+0x2a2>
   1e208:	07d2      	lsls	r2, r2, #31
   1e20a:	d500      	bpl.n	1e20e <_realloc_r+0x1f6>
   1e20c:	e740      	b.n	1e090 <_realloc_r+0x78>
   1e20e:	4660      	mov	r0, ip
   1e210:	683a      	ldr	r2, [r7, #0]
   1e212:	1aba      	subs	r2, r7, r2
   1e214:	4692      	mov	sl, r2
   1e216:	6852      	ldr	r2, [r2, #4]
   1e218:	4382      	bics	r2, r0
   1e21a:	9802      	ldr	r0, [sp, #8]
   1e21c:	1851      	adds	r1, r2, r1
   1e21e:	9103      	str	r1, [sp, #12]
   1e220:	4288      	cmp	r0, r1
   1e222:	dce0      	bgt.n	1e1e6 <_realloc_r+0x1ce>
   1e224:	4653      	mov	r3, sl
   1e226:	4652      	mov	r2, sl
   1e228:	4655      	mov	r5, sl
   1e22a:	6892      	ldr	r2, [r2, #8]
   1e22c:	68db      	ldr	r3, [r3, #12]
   1e22e:	3508      	adds	r5, #8
   1e230:	60d3      	str	r3, [r2, #12]
   1e232:	609a      	str	r2, [r3, #8]
   1e234:	1f22      	subs	r2, r4, #4
   1e236:	2a24      	cmp	r2, #36	; 0x24
   1e238:	d900      	bls.n	1e23c <_realloc_r+0x224>
   1e23a:	e08e      	b.n	1e35a <_realloc_r+0x342>
   1e23c:	2a13      	cmp	r2, #19
   1e23e:	d800      	bhi.n	1e242 <_realloc_r+0x22a>
   1e240:	e088      	b.n	1e354 <_realloc_r+0x33c>
   1e242:	4653      	mov	r3, sl
   1e244:	6831      	ldr	r1, [r6, #0]
   1e246:	6099      	str	r1, [r3, #8]
   1e248:	6871      	ldr	r1, [r6, #4]
   1e24a:	60d9      	str	r1, [r3, #12]
   1e24c:	2a1b      	cmp	r2, #27
   1e24e:	d900      	bls.n	1e252 <_realloc_r+0x23a>
   1e250:	e088      	b.n	1e364 <_realloc_r+0x34c>
   1e252:	0032      	movs	r2, r6
   1e254:	3310      	adds	r3, #16
   1e256:	3208      	adds	r2, #8
   1e258:	6811      	ldr	r1, [r2, #0]
   1e25a:	6019      	str	r1, [r3, #0]
   1e25c:	6851      	ldr	r1, [r2, #4]
   1e25e:	6059      	str	r1, [r3, #4]
   1e260:	6892      	ldr	r2, [r2, #8]
   1e262:	609a      	str	r2, [r3, #8]
   1e264:	4651      	mov	r1, sl
   1e266:	465b      	mov	r3, fp
   1e268:	4642      	mov	r2, r8
   1e26a:	4441      	add	r1, r8
   1e26c:	6099      	str	r1, [r3, #8]
   1e26e:	9b03      	ldr	r3, [sp, #12]
   1e270:	9801      	ldr	r0, [sp, #4]
   1e272:	1a9a      	subs	r2, r3, r2
   1e274:	2301      	movs	r3, #1
   1e276:	431a      	orrs	r2, r3
   1e278:	604a      	str	r2, [r1, #4]
   1e27a:	4652      	mov	r2, sl
   1e27c:	6852      	ldr	r2, [r2, #4]
   1e27e:	4013      	ands	r3, r2
   1e280:	4642      	mov	r2, r8
   1e282:	4313      	orrs	r3, r2
   1e284:	4652      	mov	r2, sl
   1e286:	6053      	str	r3, [r2, #4]
   1e288:	f7fb fe26 	bl	19ed8 <__malloc_unlock>
   1e28c:	e743      	b.n	1e116 <_realloc_r+0xfe>
   1e28e:	6833      	ldr	r3, [r6, #0]
   1e290:	6003      	str	r3, [r0, #0]
   1e292:	6873      	ldr	r3, [r6, #4]
   1e294:	6043      	str	r3, [r0, #4]
   1e296:	2a1b      	cmp	r2, #27
   1e298:	d82d      	bhi.n	1e2f6 <_realloc_r+0x2de>
   1e29a:	0003      	movs	r3, r0
   1e29c:	0032      	movs	r2, r6
   1e29e:	3308      	adds	r3, #8
   1e2a0:	3208      	adds	r2, #8
   1e2a2:	e70d      	b.n	1e0c0 <_realloc_r+0xa8>
   1e2a4:	002b      	movs	r3, r5
   1e2a6:	0032      	movs	r2, r6
   1e2a8:	6811      	ldr	r1, [r2, #0]
   1e2aa:	465c      	mov	r4, fp
   1e2ac:	6019      	str	r1, [r3, #0]
   1e2ae:	6851      	ldr	r1, [r2, #4]
   1e2b0:	46d1      	mov	r9, sl
   1e2b2:	6059      	str	r1, [r3, #4]
   1e2b4:	6892      	ldr	r2, [r2, #8]
   1e2b6:	609a      	str	r2, [r3, #8]
   1e2b8:	e71b      	b.n	1e0f2 <_realloc_r+0xda>
   1e2ba:	4643      	mov	r3, r8
   1e2bc:	18fa      	adds	r2, r7, r3
   1e2be:	465b      	mov	r3, fp
   1e2c0:	609a      	str	r2, [r3, #8]
   1e2c2:	4643      	mov	r3, r8
   1e2c4:	1ac9      	subs	r1, r1, r3
   1e2c6:	2301      	movs	r3, #1
   1e2c8:	4319      	orrs	r1, r3
   1e2ca:	6051      	str	r1, [r2, #4]
   1e2cc:	687a      	ldr	r2, [r7, #4]
   1e2ce:	9801      	ldr	r0, [sp, #4]
   1e2d0:	4013      	ands	r3, r2
   1e2d2:	4642      	mov	r2, r8
   1e2d4:	4313      	orrs	r3, r2
   1e2d6:	607b      	str	r3, [r7, #4]
   1e2d8:	f7fb fdfe 	bl	19ed8 <__malloc_unlock>
   1e2dc:	0035      	movs	r5, r6
   1e2de:	e71a      	b.n	1e116 <_realloc_r+0xfe>
   1e2e0:	0031      	movs	r1, r6
   1e2e2:	f7fb fd57 	bl	19d94 <memmove>
   1e2e6:	e6f1      	b.n	1e0cc <_realloc_r+0xb4>
   1e2e8:	0031      	movs	r1, r6
   1e2ea:	0028      	movs	r0, r5
   1e2ec:	f7fb fd52 	bl	19d94 <memmove>
   1e2f0:	465c      	mov	r4, fp
   1e2f2:	46d1      	mov	r9, sl
   1e2f4:	e6fd      	b.n	1e0f2 <_realloc_r+0xda>
   1e2f6:	68b3      	ldr	r3, [r6, #8]
   1e2f8:	6083      	str	r3, [r0, #8]
   1e2fa:	68f3      	ldr	r3, [r6, #12]
   1e2fc:	60c3      	str	r3, [r0, #12]
   1e2fe:	2a24      	cmp	r2, #36	; 0x24
   1e300:	d015      	beq.n	1e32e <_realloc_r+0x316>
   1e302:	0003      	movs	r3, r0
   1e304:	0032      	movs	r2, r6
   1e306:	3310      	adds	r3, #16
   1e308:	3210      	adds	r2, #16
   1e30a:	e6d9      	b.n	1e0c0 <_realloc_r+0xa8>
   1e30c:	6853      	ldr	r3, [r2, #4]
   1e30e:	2203      	movs	r2, #3
   1e310:	4393      	bics	r3, r2
   1e312:	18e4      	adds	r4, r4, r3
   1e314:	0035      	movs	r5, r6
   1e316:	e6ec      	b.n	1e0f2 <_realloc_r+0xda>
   1e318:	4653      	mov	r3, sl
   1e31a:	68b1      	ldr	r1, [r6, #8]
   1e31c:	6119      	str	r1, [r3, #16]
   1e31e:	68f1      	ldr	r1, [r6, #12]
   1e320:	6159      	str	r1, [r3, #20]
   1e322:	2a24      	cmp	r2, #36	; 0x24
   1e324:	d00c      	beq.n	1e340 <_realloc_r+0x328>
   1e326:	0032      	movs	r2, r6
   1e328:	3318      	adds	r3, #24
   1e32a:	3210      	adds	r2, #16
   1e32c:	e7bc      	b.n	1e2a8 <_realloc_r+0x290>
   1e32e:	6933      	ldr	r3, [r6, #16]
   1e330:	0032      	movs	r2, r6
   1e332:	6103      	str	r3, [r0, #16]
   1e334:	0003      	movs	r3, r0
   1e336:	6971      	ldr	r1, [r6, #20]
   1e338:	3318      	adds	r3, #24
   1e33a:	3218      	adds	r2, #24
   1e33c:	6141      	str	r1, [r0, #20]
   1e33e:	e6bf      	b.n	1e0c0 <_realloc_r+0xa8>
   1e340:	4653      	mov	r3, sl
   1e342:	6932      	ldr	r2, [r6, #16]
   1e344:	4651      	mov	r1, sl
   1e346:	619a      	str	r2, [r3, #24]
   1e348:	0032      	movs	r2, r6
   1e34a:	6970      	ldr	r0, [r6, #20]
   1e34c:	3320      	adds	r3, #32
   1e34e:	3218      	adds	r2, #24
   1e350:	61c8      	str	r0, [r1, #28]
   1e352:	e7a9      	b.n	1e2a8 <_realloc_r+0x290>
   1e354:	002b      	movs	r3, r5
   1e356:	0032      	movs	r2, r6
   1e358:	e77e      	b.n	1e258 <_realloc_r+0x240>
   1e35a:	0031      	movs	r1, r6
   1e35c:	0028      	movs	r0, r5
   1e35e:	f7fb fd19 	bl	19d94 <memmove>
   1e362:	e77f      	b.n	1e264 <_realloc_r+0x24c>
   1e364:	4653      	mov	r3, sl
   1e366:	68b1      	ldr	r1, [r6, #8]
   1e368:	6119      	str	r1, [r3, #16]
   1e36a:	68f1      	ldr	r1, [r6, #12]
   1e36c:	6159      	str	r1, [r3, #20]
   1e36e:	2a24      	cmp	r2, #36	; 0x24
   1e370:	d003      	beq.n	1e37a <_realloc_r+0x362>
   1e372:	0032      	movs	r2, r6
   1e374:	3318      	adds	r3, #24
   1e376:	3210      	adds	r2, #16
   1e378:	e76e      	b.n	1e258 <_realloc_r+0x240>
   1e37a:	4653      	mov	r3, sl
   1e37c:	6932      	ldr	r2, [r6, #16]
   1e37e:	4651      	mov	r1, sl
   1e380:	619a      	str	r2, [r3, #24]
   1e382:	0032      	movs	r2, r6
   1e384:	6970      	ldr	r0, [r6, #20]
   1e386:	3320      	adds	r3, #32
   1e388:	3218      	adds	r2, #24
   1e38a:	61c8      	str	r0, [r1, #28]
   1e38c:	e764      	b.n	1e258 <_realloc_r+0x240>
   1e38e:	46c0      	nop			; (mov r8, r8)
   1e390:	200005b4 	.word	0x200005b4

0001e394 <__sread>:
   1e394:	b570      	push	{r4, r5, r6, lr}
   1e396:	000c      	movs	r4, r1
   1e398:	250e      	movs	r5, #14
   1e39a:	5f49      	ldrsh	r1, [r1, r5]
   1e39c:	f000 fa7a 	bl	1e894 <_read_r>
   1e3a0:	2800      	cmp	r0, #0
   1e3a2:	db03      	blt.n	1e3ac <__sread+0x18>
   1e3a4:	6d23      	ldr	r3, [r4, #80]	; 0x50
   1e3a6:	181b      	adds	r3, r3, r0
   1e3a8:	6523      	str	r3, [r4, #80]	; 0x50
   1e3aa:	bd70      	pop	{r4, r5, r6, pc}
   1e3ac:	89a3      	ldrh	r3, [r4, #12]
   1e3ae:	4a02      	ldr	r2, [pc, #8]	; (1e3b8 <__sread+0x24>)
   1e3b0:	4013      	ands	r3, r2
   1e3b2:	81a3      	strh	r3, [r4, #12]
   1e3b4:	e7f9      	b.n	1e3aa <__sread+0x16>
   1e3b6:	46c0      	nop			; (mov r8, r8)
   1e3b8:	ffffefff 	.word	0xffffefff

0001e3bc <__swrite>:
   1e3bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1e3be:	0016      	movs	r6, r2
   1e3c0:	001f      	movs	r7, r3
   1e3c2:	220c      	movs	r2, #12
   1e3c4:	5e8b      	ldrsh	r3, [r1, r2]
   1e3c6:	0005      	movs	r5, r0
   1e3c8:	000c      	movs	r4, r1
   1e3ca:	05da      	lsls	r2, r3, #23
   1e3cc:	d507      	bpl.n	1e3de <__swrite+0x22>
   1e3ce:	230e      	movs	r3, #14
   1e3d0:	5ec9      	ldrsh	r1, [r1, r3]
   1e3d2:	2200      	movs	r2, #0
   1e3d4:	2302      	movs	r3, #2
   1e3d6:	f000 fa49 	bl	1e86c <_lseek_r>
   1e3da:	220c      	movs	r2, #12
   1e3dc:	5ea3      	ldrsh	r3, [r4, r2]
   1e3de:	4a05      	ldr	r2, [pc, #20]	; (1e3f4 <__swrite+0x38>)
   1e3e0:	0028      	movs	r0, r5
   1e3e2:	4013      	ands	r3, r2
   1e3e4:	81a3      	strh	r3, [r4, #12]
   1e3e6:	0032      	movs	r2, r6
   1e3e8:	230e      	movs	r3, #14
   1e3ea:	5ee1      	ldrsh	r1, [r4, r3]
   1e3ec:	003b      	movs	r3, r7
   1e3ee:	f000 f86b 	bl	1e4c8 <_write_r>
   1e3f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1e3f4:	ffffefff 	.word	0xffffefff

0001e3f8 <__sseek>:
   1e3f8:	b570      	push	{r4, r5, r6, lr}
   1e3fa:	000c      	movs	r4, r1
   1e3fc:	250e      	movs	r5, #14
   1e3fe:	5f49      	ldrsh	r1, [r1, r5]
   1e400:	f000 fa34 	bl	1e86c <_lseek_r>
   1e404:	1c43      	adds	r3, r0, #1
   1e406:	d006      	beq.n	1e416 <__sseek+0x1e>
   1e408:	2380      	movs	r3, #128	; 0x80
   1e40a:	89a2      	ldrh	r2, [r4, #12]
   1e40c:	015b      	lsls	r3, r3, #5
   1e40e:	4313      	orrs	r3, r2
   1e410:	81a3      	strh	r3, [r4, #12]
   1e412:	6520      	str	r0, [r4, #80]	; 0x50
   1e414:	bd70      	pop	{r4, r5, r6, pc}
   1e416:	89a3      	ldrh	r3, [r4, #12]
   1e418:	4a01      	ldr	r2, [pc, #4]	; (1e420 <__sseek+0x28>)
   1e41a:	4013      	ands	r3, r2
   1e41c:	81a3      	strh	r3, [r4, #12]
   1e41e:	e7f9      	b.n	1e414 <__sseek+0x1c>
   1e420:	ffffefff 	.word	0xffffefff

0001e424 <__sclose>:
   1e424:	b510      	push	{r4, lr}
   1e426:	230e      	movs	r3, #14
   1e428:	5ec9      	ldrsh	r1, [r1, r3]
   1e42a:	f000 f907 	bl	1e63c <_close_r>
   1e42e:	bd10      	pop	{r4, pc}

0001e430 <__sprint_r.part.0>:
   1e430:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1e432:	464e      	mov	r6, r9
   1e434:	4645      	mov	r5, r8
   1e436:	46de      	mov	lr, fp
   1e438:	4657      	mov	r7, sl
   1e43a:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   1e43c:	b5e0      	push	{r5, r6, r7, lr}
   1e43e:	4680      	mov	r8, r0
   1e440:	000e      	movs	r6, r1
   1e442:	4691      	mov	r9, r2
   1e444:	049b      	lsls	r3, r3, #18
   1e446:	d531      	bpl.n	1e4ac <__sprint_r.part.0+0x7c>
   1e448:	6813      	ldr	r3, [r2, #0]
   1e44a:	469a      	mov	sl, r3
   1e44c:	6893      	ldr	r3, [r2, #8]
   1e44e:	2b00      	cmp	r3, #0
   1e450:	d02a      	beq.n	1e4a8 <__sprint_r.part.0+0x78>
   1e452:	4652      	mov	r2, sl
   1e454:	6852      	ldr	r2, [r2, #4]
   1e456:	2500      	movs	r5, #0
   1e458:	4693      	mov	fp, r2
   1e45a:	0897      	lsrs	r7, r2, #2
   1e45c:	4652      	mov	r2, sl
   1e45e:	6814      	ldr	r4, [r2, #0]
   1e460:	d104      	bne.n	1e46c <__sprint_r.part.0+0x3c>
   1e462:	e016      	b.n	1e492 <__sprint_r.part.0+0x62>
   1e464:	3501      	adds	r5, #1
   1e466:	3404      	adds	r4, #4
   1e468:	42af      	cmp	r7, r5
   1e46a:	d010      	beq.n	1e48e <__sprint_r.part.0+0x5e>
   1e46c:	0032      	movs	r2, r6
   1e46e:	6821      	ldr	r1, [r4, #0]
   1e470:	4640      	mov	r0, r8
   1e472:	f000 f9a7 	bl	1e7c4 <_fputwc_r>
   1e476:	1c43      	adds	r3, r0, #1
   1e478:	d1f4      	bne.n	1e464 <__sprint_r.part.0+0x34>
   1e47a:	464a      	mov	r2, r9
   1e47c:	2300      	movs	r3, #0
   1e47e:	6093      	str	r3, [r2, #8]
   1e480:	6053      	str	r3, [r2, #4]
   1e482:	bc3c      	pop	{r2, r3, r4, r5}
   1e484:	4690      	mov	r8, r2
   1e486:	4699      	mov	r9, r3
   1e488:	46a2      	mov	sl, r4
   1e48a:	46ab      	mov	fp, r5
   1e48c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1e48e:	464b      	mov	r3, r9
   1e490:	689b      	ldr	r3, [r3, #8]
   1e492:	465a      	mov	r2, fp
   1e494:	2103      	movs	r1, #3
   1e496:	438a      	bics	r2, r1
   1e498:	1a9b      	subs	r3, r3, r2
   1e49a:	464a      	mov	r2, r9
   1e49c:	6093      	str	r3, [r2, #8]
   1e49e:	2208      	movs	r2, #8
   1e4a0:	4694      	mov	ip, r2
   1e4a2:	44e2      	add	sl, ip
   1e4a4:	2b00      	cmp	r3, #0
   1e4a6:	d1d4      	bne.n	1e452 <__sprint_r.part.0+0x22>
   1e4a8:	2000      	movs	r0, #0
   1e4aa:	e7e6      	b.n	1e47a <__sprint_r.part.0+0x4a>
   1e4ac:	f7fe fff6 	bl	1d49c <__sfvwrite_r>
   1e4b0:	e7e3      	b.n	1e47a <__sprint_r.part.0+0x4a>
   1e4b2:	46c0      	nop			; (mov r8, r8)

0001e4b4 <__sprint_r>:
   1e4b4:	6893      	ldr	r3, [r2, #8]
   1e4b6:	b510      	push	{r4, lr}
   1e4b8:	2b00      	cmp	r3, #0
   1e4ba:	d002      	beq.n	1e4c2 <__sprint_r+0xe>
   1e4bc:	f7ff ffb8 	bl	1e430 <__sprint_r.part.0>
   1e4c0:	bd10      	pop	{r4, pc}
   1e4c2:	6053      	str	r3, [r2, #4]
   1e4c4:	2000      	movs	r0, #0
   1e4c6:	e7fb      	b.n	1e4c0 <__sprint_r+0xc>

0001e4c8 <_write_r>:
   1e4c8:	b570      	push	{r4, r5, r6, lr}
   1e4ca:	0005      	movs	r5, r0
   1e4cc:	0008      	movs	r0, r1
   1e4ce:	0011      	movs	r1, r2
   1e4d0:	2200      	movs	r2, #0
   1e4d2:	4c06      	ldr	r4, [pc, #24]	; (1e4ec <_write_r+0x24>)
   1e4d4:	6022      	str	r2, [r4, #0]
   1e4d6:	001a      	movs	r2, r3
   1e4d8:	f7e9 fa0c 	bl	78f4 <_write>
   1e4dc:	1c43      	adds	r3, r0, #1
   1e4de:	d000      	beq.n	1e4e2 <_write_r+0x1a>
   1e4e0:	bd70      	pop	{r4, r5, r6, pc}
   1e4e2:	6823      	ldr	r3, [r4, #0]
   1e4e4:	2b00      	cmp	r3, #0
   1e4e6:	d0fb      	beq.n	1e4e0 <_write_r+0x18>
   1e4e8:	602b      	str	r3, [r5, #0]
   1e4ea:	e7f9      	b.n	1e4e0 <_write_r+0x18>
   1e4ec:	20002fe4 	.word	0x20002fe4

0001e4f0 <__register_exitproc>:
   1e4f0:	b5f0      	push	{r4, r5, r6, r7, lr}
   1e4f2:	464e      	mov	r6, r9
   1e4f4:	4645      	mov	r5, r8
   1e4f6:	46de      	mov	lr, fp
   1e4f8:	4657      	mov	r7, sl
   1e4fa:	b5e0      	push	{r5, r6, r7, lr}
   1e4fc:	4d36      	ldr	r5, [pc, #216]	; (1e5d8 <__register_exitproc+0xe8>)
   1e4fe:	b083      	sub	sp, #12
   1e500:	0006      	movs	r6, r0
   1e502:	6828      	ldr	r0, [r5, #0]
   1e504:	4698      	mov	r8, r3
   1e506:	000f      	movs	r7, r1
   1e508:	4691      	mov	r9, r2
   1e50a:	f7ff f981 	bl	1d810 <__retarget_lock_acquire_recursive>
   1e50e:	4b33      	ldr	r3, [pc, #204]	; (1e5dc <__register_exitproc+0xec>)
   1e510:	681c      	ldr	r4, [r3, #0]
   1e512:	23a4      	movs	r3, #164	; 0xa4
   1e514:	005b      	lsls	r3, r3, #1
   1e516:	58e0      	ldr	r0, [r4, r3]
   1e518:	2800      	cmp	r0, #0
   1e51a:	d052      	beq.n	1e5c2 <__register_exitproc+0xd2>
   1e51c:	6843      	ldr	r3, [r0, #4]
   1e51e:	2b1f      	cmp	r3, #31
   1e520:	dc13      	bgt.n	1e54a <__register_exitproc+0x5a>
   1e522:	1c5a      	adds	r2, r3, #1
   1e524:	9201      	str	r2, [sp, #4]
   1e526:	2e00      	cmp	r6, #0
   1e528:	d128      	bne.n	1e57c <__register_exitproc+0x8c>
   1e52a:	9a01      	ldr	r2, [sp, #4]
   1e52c:	3302      	adds	r3, #2
   1e52e:	009b      	lsls	r3, r3, #2
   1e530:	6042      	str	r2, [r0, #4]
   1e532:	501f      	str	r7, [r3, r0]
   1e534:	6828      	ldr	r0, [r5, #0]
   1e536:	f7ff f96d 	bl	1d814 <__retarget_lock_release_recursive>
   1e53a:	2000      	movs	r0, #0
   1e53c:	b003      	add	sp, #12
   1e53e:	bc3c      	pop	{r2, r3, r4, r5}
   1e540:	4690      	mov	r8, r2
   1e542:	4699      	mov	r9, r3
   1e544:	46a2      	mov	sl, r4
   1e546:	46ab      	mov	fp, r5
   1e548:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1e54a:	4b25      	ldr	r3, [pc, #148]	; (1e5e0 <__register_exitproc+0xf0>)
   1e54c:	2b00      	cmp	r3, #0
   1e54e:	d03d      	beq.n	1e5cc <__register_exitproc+0xdc>
   1e550:	20c8      	movs	r0, #200	; 0xc8
   1e552:	0040      	lsls	r0, r0, #1
   1e554:	f7fb f8d8 	bl	19708 <malloc>
   1e558:	2800      	cmp	r0, #0
   1e55a:	d037      	beq.n	1e5cc <__register_exitproc+0xdc>
   1e55c:	22a4      	movs	r2, #164	; 0xa4
   1e55e:	2300      	movs	r3, #0
   1e560:	0052      	lsls	r2, r2, #1
   1e562:	58a1      	ldr	r1, [r4, r2]
   1e564:	6043      	str	r3, [r0, #4]
   1e566:	6001      	str	r1, [r0, #0]
   1e568:	50a0      	str	r0, [r4, r2]
   1e56a:	3240      	adds	r2, #64	; 0x40
   1e56c:	5083      	str	r3, [r0, r2]
   1e56e:	3204      	adds	r2, #4
   1e570:	5083      	str	r3, [r0, r2]
   1e572:	3301      	adds	r3, #1
   1e574:	9301      	str	r3, [sp, #4]
   1e576:	2300      	movs	r3, #0
   1e578:	2e00      	cmp	r6, #0
   1e57a:	d0d6      	beq.n	1e52a <__register_exitproc+0x3a>
   1e57c:	009a      	lsls	r2, r3, #2
   1e57e:	4692      	mov	sl, r2
   1e580:	4482      	add	sl, r0
   1e582:	464a      	mov	r2, r9
   1e584:	2188      	movs	r1, #136	; 0x88
   1e586:	4654      	mov	r4, sl
   1e588:	5062      	str	r2, [r4, r1]
   1e58a:	22c4      	movs	r2, #196	; 0xc4
   1e58c:	0052      	lsls	r2, r2, #1
   1e58e:	4691      	mov	r9, r2
   1e590:	4481      	add	r9, r0
   1e592:	464a      	mov	r2, r9
   1e594:	3987      	subs	r1, #135	; 0x87
   1e596:	4099      	lsls	r1, r3
   1e598:	6812      	ldr	r2, [r2, #0]
   1e59a:	468b      	mov	fp, r1
   1e59c:	430a      	orrs	r2, r1
   1e59e:	4694      	mov	ip, r2
   1e5a0:	464a      	mov	r2, r9
   1e5a2:	4661      	mov	r1, ip
   1e5a4:	6011      	str	r1, [r2, #0]
   1e5a6:	2284      	movs	r2, #132	; 0x84
   1e5a8:	4641      	mov	r1, r8
   1e5aa:	0052      	lsls	r2, r2, #1
   1e5ac:	50a1      	str	r1, [r4, r2]
   1e5ae:	2e02      	cmp	r6, #2
   1e5b0:	d1bb      	bne.n	1e52a <__register_exitproc+0x3a>
   1e5b2:	0002      	movs	r2, r0
   1e5b4:	465c      	mov	r4, fp
   1e5b6:	328d      	adds	r2, #141	; 0x8d
   1e5b8:	32ff      	adds	r2, #255	; 0xff
   1e5ba:	6811      	ldr	r1, [r2, #0]
   1e5bc:	430c      	orrs	r4, r1
   1e5be:	6014      	str	r4, [r2, #0]
   1e5c0:	e7b3      	b.n	1e52a <__register_exitproc+0x3a>
   1e5c2:	0020      	movs	r0, r4
   1e5c4:	304d      	adds	r0, #77	; 0x4d
   1e5c6:	30ff      	adds	r0, #255	; 0xff
   1e5c8:	50e0      	str	r0, [r4, r3]
   1e5ca:	e7a7      	b.n	1e51c <__register_exitproc+0x2c>
   1e5cc:	6828      	ldr	r0, [r5, #0]
   1e5ce:	f7ff f921 	bl	1d814 <__retarget_lock_release_recursive>
   1e5d2:	2001      	movs	r0, #1
   1e5d4:	4240      	negs	r0, r0
   1e5d6:	e7b1      	b.n	1e53c <__register_exitproc+0x4c>
   1e5d8:	200009c4 	.word	0x200009c4
   1e5dc:	000204c4 	.word	0x000204c4
   1e5e0:	00019709 	.word	0x00019709

0001e5e4 <_calloc_r>:
   1e5e4:	b510      	push	{r4, lr}
   1e5e6:	4351      	muls	r1, r2
   1e5e8:	f7fb f8a2 	bl	19730 <_malloc_r>
   1e5ec:	1e04      	subs	r4, r0, #0
   1e5ee:	d01c      	beq.n	1e62a <_calloc_r+0x46>
   1e5f0:	0003      	movs	r3, r0
   1e5f2:	3b08      	subs	r3, #8
   1e5f4:	685a      	ldr	r2, [r3, #4]
   1e5f6:	2303      	movs	r3, #3
   1e5f8:	439a      	bics	r2, r3
   1e5fa:	3a04      	subs	r2, #4
   1e5fc:	2a24      	cmp	r2, #36	; 0x24
   1e5fe:	d816      	bhi.n	1e62e <_calloc_r+0x4a>
   1e600:	0003      	movs	r3, r0
   1e602:	2a13      	cmp	r2, #19
   1e604:	d90d      	bls.n	1e622 <_calloc_r+0x3e>
   1e606:	2100      	movs	r1, #0
   1e608:	3308      	adds	r3, #8
   1e60a:	6001      	str	r1, [r0, #0]
   1e60c:	6041      	str	r1, [r0, #4]
   1e60e:	2a1b      	cmp	r2, #27
   1e610:	d907      	bls.n	1e622 <_calloc_r+0x3e>
   1e612:	6081      	str	r1, [r0, #8]
   1e614:	60c1      	str	r1, [r0, #12]
   1e616:	2a24      	cmp	r2, #36	; 0x24
   1e618:	d10d      	bne.n	1e636 <_calloc_r+0x52>
   1e61a:	0003      	movs	r3, r0
   1e61c:	6101      	str	r1, [r0, #16]
   1e61e:	3318      	adds	r3, #24
   1e620:	6141      	str	r1, [r0, #20]
   1e622:	2200      	movs	r2, #0
   1e624:	601a      	str	r2, [r3, #0]
   1e626:	605a      	str	r2, [r3, #4]
   1e628:	609a      	str	r2, [r3, #8]
   1e62a:	0020      	movs	r0, r4
   1e62c:	bd10      	pop	{r4, pc}
   1e62e:	2100      	movs	r1, #0
   1e630:	f7fb fc00 	bl	19e34 <memset>
   1e634:	e7f9      	b.n	1e62a <_calloc_r+0x46>
   1e636:	0003      	movs	r3, r0
   1e638:	3310      	adds	r3, #16
   1e63a:	e7f2      	b.n	1e622 <_calloc_r+0x3e>

0001e63c <_close_r>:
   1e63c:	2300      	movs	r3, #0
   1e63e:	b570      	push	{r4, r5, r6, lr}
   1e640:	4c06      	ldr	r4, [pc, #24]	; (1e65c <_close_r+0x20>)
   1e642:	0005      	movs	r5, r0
   1e644:	0008      	movs	r0, r1
   1e646:	6023      	str	r3, [r4, #0]
   1e648:	f7e9 f98e 	bl	7968 <_close>
   1e64c:	1c43      	adds	r3, r0, #1
   1e64e:	d000      	beq.n	1e652 <_close_r+0x16>
   1e650:	bd70      	pop	{r4, r5, r6, pc}
   1e652:	6823      	ldr	r3, [r4, #0]
   1e654:	2b00      	cmp	r3, #0
   1e656:	d0fb      	beq.n	1e650 <_close_r+0x14>
   1e658:	602b      	str	r3, [r5, #0]
   1e65a:	e7f9      	b.n	1e650 <_close_r+0x14>
   1e65c:	20002fe4 	.word	0x20002fe4

0001e660 <_fclose_r>:
   1e660:	b570      	push	{r4, r5, r6, lr}
   1e662:	0005      	movs	r5, r0
   1e664:	1e0c      	subs	r4, r1, #0
   1e666:	d040      	beq.n	1e6ea <_fclose_r+0x8a>
   1e668:	2800      	cmp	r0, #0
   1e66a:	d002      	beq.n	1e672 <_fclose_r+0x12>
   1e66c:	6b83      	ldr	r3, [r0, #56]	; 0x38
   1e66e:	2b00      	cmp	r3, #0
   1e670:	d03e      	beq.n	1e6f0 <_fclose_r+0x90>
   1e672:	2601      	movs	r6, #1
   1e674:	6e63      	ldr	r3, [r4, #100]	; 0x64
   1e676:	4233      	tst	r3, r6
   1e678:	d133      	bne.n	1e6e2 <_fclose_r+0x82>
   1e67a:	89a3      	ldrh	r3, [r4, #12]
   1e67c:	059b      	lsls	r3, r3, #22
   1e67e:	d543      	bpl.n	1e708 <_fclose_r+0xa8>
   1e680:	0021      	movs	r1, r4
   1e682:	0028      	movs	r0, r5
   1e684:	f7fe fc80 	bl	1cf88 <__sflush_r>
   1e688:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   1e68a:	0006      	movs	r6, r0
   1e68c:	2b00      	cmp	r3, #0
   1e68e:	d004      	beq.n	1e69a <_fclose_r+0x3a>
   1e690:	69e1      	ldr	r1, [r4, #28]
   1e692:	0028      	movs	r0, r5
   1e694:	4798      	blx	r3
   1e696:	2800      	cmp	r0, #0
   1e698:	db44      	blt.n	1e724 <_fclose_r+0xc4>
   1e69a:	89a3      	ldrh	r3, [r4, #12]
   1e69c:	061b      	lsls	r3, r3, #24
   1e69e:	d42a      	bmi.n	1e6f6 <_fclose_r+0x96>
   1e6a0:	6b21      	ldr	r1, [r4, #48]	; 0x30
   1e6a2:	2900      	cmp	r1, #0
   1e6a4:	d008      	beq.n	1e6b8 <_fclose_r+0x58>
   1e6a6:	0023      	movs	r3, r4
   1e6a8:	3340      	adds	r3, #64	; 0x40
   1e6aa:	4299      	cmp	r1, r3
   1e6ac:	d002      	beq.n	1e6b4 <_fclose_r+0x54>
   1e6ae:	0028      	movs	r0, r5
   1e6b0:	f7fe fe16 	bl	1d2e0 <_free_r>
   1e6b4:	2300      	movs	r3, #0
   1e6b6:	6323      	str	r3, [r4, #48]	; 0x30
   1e6b8:	6c61      	ldr	r1, [r4, #68]	; 0x44
   1e6ba:	2900      	cmp	r1, #0
   1e6bc:	d004      	beq.n	1e6c8 <_fclose_r+0x68>
   1e6be:	0028      	movs	r0, r5
   1e6c0:	f7fe fe0e 	bl	1d2e0 <_free_r>
   1e6c4:	2300      	movs	r3, #0
   1e6c6:	6463      	str	r3, [r4, #68]	; 0x44
   1e6c8:	f7fe fd90 	bl	1d1ec <__sfp_lock_acquire>
   1e6cc:	2300      	movs	r3, #0
   1e6ce:	81a3      	strh	r3, [r4, #12]
   1e6d0:	6e63      	ldr	r3, [r4, #100]	; 0x64
   1e6d2:	07db      	lsls	r3, r3, #31
   1e6d4:	d514      	bpl.n	1e700 <_fclose_r+0xa0>
   1e6d6:	6da0      	ldr	r0, [r4, #88]	; 0x58
   1e6d8:	f7ff f898 	bl	1d80c <__retarget_lock_close_recursive>
   1e6dc:	f7fe fd8e 	bl	1d1fc <__sfp_lock_release>
   1e6e0:	e004      	b.n	1e6ec <_fclose_r+0x8c>
   1e6e2:	220c      	movs	r2, #12
   1e6e4:	5ea3      	ldrsh	r3, [r4, r2]
   1e6e6:	2b00      	cmp	r3, #0
   1e6e8:	d1ca      	bne.n	1e680 <_fclose_r+0x20>
   1e6ea:	2600      	movs	r6, #0
   1e6ec:	0030      	movs	r0, r6
   1e6ee:	bd70      	pop	{r4, r5, r6, pc}
   1e6f0:	f7fe fd4c 	bl	1d18c <__sinit>
   1e6f4:	e7bd      	b.n	1e672 <_fclose_r+0x12>
   1e6f6:	6921      	ldr	r1, [r4, #16]
   1e6f8:	0028      	movs	r0, r5
   1e6fa:	f7fe fdf1 	bl	1d2e0 <_free_r>
   1e6fe:	e7cf      	b.n	1e6a0 <_fclose_r+0x40>
   1e700:	6da0      	ldr	r0, [r4, #88]	; 0x58
   1e702:	f7ff f887 	bl	1d814 <__retarget_lock_release_recursive>
   1e706:	e7e6      	b.n	1e6d6 <_fclose_r+0x76>
   1e708:	6da0      	ldr	r0, [r4, #88]	; 0x58
   1e70a:	f7ff f881 	bl	1d810 <__retarget_lock_acquire_recursive>
   1e70e:	220c      	movs	r2, #12
   1e710:	5ea3      	ldrsh	r3, [r4, r2]
   1e712:	2b00      	cmp	r3, #0
   1e714:	d1b4      	bne.n	1e680 <_fclose_r+0x20>
   1e716:	6e63      	ldr	r3, [r4, #100]	; 0x64
   1e718:	401e      	ands	r6, r3
   1e71a:	d1e6      	bne.n	1e6ea <_fclose_r+0x8a>
   1e71c:	6da0      	ldr	r0, [r4, #88]	; 0x58
   1e71e:	f7ff f879 	bl	1d814 <__retarget_lock_release_recursive>
   1e722:	e7e3      	b.n	1e6ec <_fclose_r+0x8c>
   1e724:	2601      	movs	r6, #1
   1e726:	4276      	negs	r6, r6
   1e728:	e7b7      	b.n	1e69a <_fclose_r+0x3a>
   1e72a:	46c0      	nop			; (mov r8, r8)

0001e72c <__fputwc>:
   1e72c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1e72e:	46ce      	mov	lr, r9
   1e730:	4647      	mov	r7, r8
   1e732:	b580      	push	{r7, lr}
   1e734:	b085      	sub	sp, #20
   1e736:	4680      	mov	r8, r0
   1e738:	4689      	mov	r9, r1
   1e73a:	0014      	movs	r4, r2
   1e73c:	f7fa ffc2 	bl	196c4 <__locale_mb_cur_max>
   1e740:	2801      	cmp	r0, #1
   1e742:	d031      	beq.n	1e7a8 <__fputwc+0x7c>
   1e744:	0023      	movs	r3, r4
   1e746:	af03      	add	r7, sp, #12
   1e748:	335c      	adds	r3, #92	; 0x5c
   1e74a:	464a      	mov	r2, r9
   1e74c:	0039      	movs	r1, r7
   1e74e:	4640      	mov	r0, r8
   1e750:	f000 f912 	bl	1e978 <_wcrtomb_r>
   1e754:	0006      	movs	r6, r0
   1e756:	1c43      	adds	r3, r0, #1
   1e758:	d021      	beq.n	1e79e <__fputwc+0x72>
   1e75a:	2800      	cmp	r0, #0
   1e75c:	d030      	beq.n	1e7c0 <__fputwc+0x94>
   1e75e:	7839      	ldrb	r1, [r7, #0]
   1e760:	2500      	movs	r5, #0
   1e762:	e007      	b.n	1e774 <__fputwc+0x48>
   1e764:	6823      	ldr	r3, [r4, #0]
   1e766:	1c5a      	adds	r2, r3, #1
   1e768:	6022      	str	r2, [r4, #0]
   1e76a:	7019      	strb	r1, [r3, #0]
   1e76c:	3501      	adds	r5, #1
   1e76e:	42b5      	cmp	r5, r6
   1e770:	d226      	bcs.n	1e7c0 <__fputwc+0x94>
   1e772:	5d79      	ldrb	r1, [r7, r5]
   1e774:	68a3      	ldr	r3, [r4, #8]
   1e776:	3b01      	subs	r3, #1
   1e778:	60a3      	str	r3, [r4, #8]
   1e77a:	2b00      	cmp	r3, #0
   1e77c:	daf2      	bge.n	1e764 <__fputwc+0x38>
   1e77e:	69a2      	ldr	r2, [r4, #24]
   1e780:	4293      	cmp	r3, r2
   1e782:	db01      	blt.n	1e788 <__fputwc+0x5c>
   1e784:	290a      	cmp	r1, #10
   1e786:	d1ed      	bne.n	1e764 <__fputwc+0x38>
   1e788:	0022      	movs	r2, r4
   1e78a:	4640      	mov	r0, r8
   1e78c:	f000 f896 	bl	1e8bc <__swbuf_r>
   1e790:	1c43      	adds	r3, r0, #1
   1e792:	d1eb      	bne.n	1e76c <__fputwc+0x40>
   1e794:	b005      	add	sp, #20
   1e796:	bc0c      	pop	{r2, r3}
   1e798:	4690      	mov	r8, r2
   1e79a:	4699      	mov	r9, r3
   1e79c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1e79e:	2240      	movs	r2, #64	; 0x40
   1e7a0:	89a3      	ldrh	r3, [r4, #12]
   1e7a2:	4313      	orrs	r3, r2
   1e7a4:	81a3      	strh	r3, [r4, #12]
   1e7a6:	e7f5      	b.n	1e794 <__fputwc+0x68>
   1e7a8:	464b      	mov	r3, r9
   1e7aa:	3b01      	subs	r3, #1
   1e7ac:	2bfe      	cmp	r3, #254	; 0xfe
   1e7ae:	d8c9      	bhi.n	1e744 <__fputwc+0x18>
   1e7b0:	466a      	mov	r2, sp
   1e7b2:	464b      	mov	r3, r9
   1e7b4:	71d3      	strb	r3, [r2, #7]
   1e7b6:	79d1      	ldrb	r1, [r2, #7]
   1e7b8:	af03      	add	r7, sp, #12
   1e7ba:	7039      	strb	r1, [r7, #0]
   1e7bc:	2601      	movs	r6, #1
   1e7be:	e7cf      	b.n	1e760 <__fputwc+0x34>
   1e7c0:	4648      	mov	r0, r9
   1e7c2:	e7e7      	b.n	1e794 <__fputwc+0x68>

0001e7c4 <_fputwc_r>:
   1e7c4:	6e53      	ldr	r3, [r2, #100]	; 0x64
   1e7c6:	b570      	push	{r4, r5, r6, lr}
   1e7c8:	0005      	movs	r5, r0
   1e7ca:	000e      	movs	r6, r1
   1e7cc:	0014      	movs	r4, r2
   1e7ce:	07db      	lsls	r3, r3, #31
   1e7d0:	d41e      	bmi.n	1e810 <_fputwc_r+0x4c>
   1e7d2:	230c      	movs	r3, #12
   1e7d4:	5ed2      	ldrsh	r2, [r2, r3]
   1e7d6:	b291      	uxth	r1, r2
   1e7d8:	058b      	lsls	r3, r1, #22
   1e7da:	d516      	bpl.n	1e80a <_fputwc_r+0x46>
   1e7dc:	2380      	movs	r3, #128	; 0x80
   1e7de:	019b      	lsls	r3, r3, #6
   1e7e0:	4219      	tst	r1, r3
   1e7e2:	d104      	bne.n	1e7ee <_fputwc_r+0x2a>
   1e7e4:	431a      	orrs	r2, r3
   1e7e6:	81a2      	strh	r2, [r4, #12]
   1e7e8:	6e62      	ldr	r2, [r4, #100]	; 0x64
   1e7ea:	4313      	orrs	r3, r2
   1e7ec:	6663      	str	r3, [r4, #100]	; 0x64
   1e7ee:	0028      	movs	r0, r5
   1e7f0:	0022      	movs	r2, r4
   1e7f2:	0031      	movs	r1, r6
   1e7f4:	f7ff ff9a 	bl	1e72c <__fputwc>
   1e7f8:	6e63      	ldr	r3, [r4, #100]	; 0x64
   1e7fa:	0005      	movs	r5, r0
   1e7fc:	07db      	lsls	r3, r3, #31
   1e7fe:	d402      	bmi.n	1e806 <_fputwc_r+0x42>
   1e800:	89a3      	ldrh	r3, [r4, #12]
   1e802:	059b      	lsls	r3, r3, #22
   1e804:	d508      	bpl.n	1e818 <_fputwc_r+0x54>
   1e806:	0028      	movs	r0, r5
   1e808:	bd70      	pop	{r4, r5, r6, pc}
   1e80a:	6da0      	ldr	r0, [r4, #88]	; 0x58
   1e80c:	f7ff f800 	bl	1d810 <__retarget_lock_acquire_recursive>
   1e810:	230c      	movs	r3, #12
   1e812:	5ee2      	ldrsh	r2, [r4, r3]
   1e814:	b291      	uxth	r1, r2
   1e816:	e7e1      	b.n	1e7dc <_fputwc_r+0x18>
   1e818:	6da0      	ldr	r0, [r4, #88]	; 0x58
   1e81a:	f7fe fffb 	bl	1d814 <__retarget_lock_release_recursive>
   1e81e:	e7f2      	b.n	1e806 <_fputwc_r+0x42>

0001e820 <_fstat_r>:
   1e820:	2300      	movs	r3, #0
   1e822:	b570      	push	{r4, r5, r6, lr}
   1e824:	4c07      	ldr	r4, [pc, #28]	; (1e844 <_fstat_r+0x24>)
   1e826:	0005      	movs	r5, r0
   1e828:	0008      	movs	r0, r1
   1e82a:	0011      	movs	r1, r2
   1e82c:	6023      	str	r3, [r4, #0]
   1e82e:	f7e9 f89e 	bl	796e <_fstat>
   1e832:	1c43      	adds	r3, r0, #1
   1e834:	d000      	beq.n	1e838 <_fstat_r+0x18>
   1e836:	bd70      	pop	{r4, r5, r6, pc}
   1e838:	6823      	ldr	r3, [r4, #0]
   1e83a:	2b00      	cmp	r3, #0
   1e83c:	d0fb      	beq.n	1e836 <_fstat_r+0x16>
   1e83e:	602b      	str	r3, [r5, #0]
   1e840:	e7f9      	b.n	1e836 <_fstat_r+0x16>
   1e842:	46c0      	nop			; (mov r8, r8)
   1e844:	20002fe4 	.word	0x20002fe4

0001e848 <_isatty_r>:
   1e848:	2300      	movs	r3, #0
   1e84a:	b570      	push	{r4, r5, r6, lr}
   1e84c:	4c06      	ldr	r4, [pc, #24]	; (1e868 <_isatty_r+0x20>)
   1e84e:	0005      	movs	r5, r0
   1e850:	0008      	movs	r0, r1
   1e852:	6023      	str	r3, [r4, #0]
   1e854:	f7e9 f890 	bl	7978 <_isatty>
   1e858:	1c43      	adds	r3, r0, #1
   1e85a:	d000      	beq.n	1e85e <_isatty_r+0x16>
   1e85c:	bd70      	pop	{r4, r5, r6, pc}
   1e85e:	6823      	ldr	r3, [r4, #0]
   1e860:	2b00      	cmp	r3, #0
   1e862:	d0fb      	beq.n	1e85c <_isatty_r+0x14>
   1e864:	602b      	str	r3, [r5, #0]
   1e866:	e7f9      	b.n	1e85c <_isatty_r+0x14>
   1e868:	20002fe4 	.word	0x20002fe4

0001e86c <_lseek_r>:
   1e86c:	b570      	push	{r4, r5, r6, lr}
   1e86e:	0005      	movs	r5, r0
   1e870:	0008      	movs	r0, r1
   1e872:	0011      	movs	r1, r2
   1e874:	2200      	movs	r2, #0
   1e876:	4c06      	ldr	r4, [pc, #24]	; (1e890 <_lseek_r+0x24>)
   1e878:	6022      	str	r2, [r4, #0]
   1e87a:	001a      	movs	r2, r3
   1e87c:	f7e9 f87e 	bl	797c <_lseek>
   1e880:	1c43      	adds	r3, r0, #1
   1e882:	d000      	beq.n	1e886 <_lseek_r+0x1a>
   1e884:	bd70      	pop	{r4, r5, r6, pc}
   1e886:	6823      	ldr	r3, [r4, #0]
   1e888:	2b00      	cmp	r3, #0
   1e88a:	d0fb      	beq.n	1e884 <_lseek_r+0x18>
   1e88c:	602b      	str	r3, [r5, #0]
   1e88e:	e7f9      	b.n	1e884 <_lseek_r+0x18>
   1e890:	20002fe4 	.word	0x20002fe4

0001e894 <_read_r>:
   1e894:	b570      	push	{r4, r5, r6, lr}
   1e896:	0005      	movs	r5, r0
   1e898:	0008      	movs	r0, r1
   1e89a:	0011      	movs	r1, r2
   1e89c:	2200      	movs	r2, #0
   1e89e:	4c06      	ldr	r4, [pc, #24]	; (1e8b8 <_read_r+0x24>)
   1e8a0:	6022      	str	r2, [r4, #0]
   1e8a2:	001a      	movs	r2, r3
   1e8a4:	f7e9 f804 	bl	78b0 <_read>
   1e8a8:	1c43      	adds	r3, r0, #1
   1e8aa:	d000      	beq.n	1e8ae <_read_r+0x1a>
   1e8ac:	bd70      	pop	{r4, r5, r6, pc}
   1e8ae:	6823      	ldr	r3, [r4, #0]
   1e8b0:	2b00      	cmp	r3, #0
   1e8b2:	d0fb      	beq.n	1e8ac <_read_r+0x18>
   1e8b4:	602b      	str	r3, [r5, #0]
   1e8b6:	e7f9      	b.n	1e8ac <_read_r+0x18>
   1e8b8:	20002fe4 	.word	0x20002fe4

0001e8bc <__swbuf_r>:
   1e8bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1e8be:	0006      	movs	r6, r0
   1e8c0:	000d      	movs	r5, r1
   1e8c2:	0014      	movs	r4, r2
   1e8c4:	2800      	cmp	r0, #0
   1e8c6:	d002      	beq.n	1e8ce <__swbuf_r+0x12>
   1e8c8:	6b83      	ldr	r3, [r0, #56]	; 0x38
   1e8ca:	2b00      	cmp	r3, #0
   1e8cc:	d04e      	beq.n	1e96c <__swbuf_r+0xb0>
   1e8ce:	69a3      	ldr	r3, [r4, #24]
   1e8d0:	60a3      	str	r3, [r4, #8]
   1e8d2:	230c      	movs	r3, #12
   1e8d4:	5ee0      	ldrsh	r0, [r4, r3]
   1e8d6:	b281      	uxth	r1, r0
   1e8d8:	070b      	lsls	r3, r1, #28
   1e8da:	d53c      	bpl.n	1e956 <__swbuf_r+0x9a>
   1e8dc:	6923      	ldr	r3, [r4, #16]
   1e8de:	2b00      	cmp	r3, #0
   1e8e0:	d039      	beq.n	1e956 <__swbuf_r+0x9a>
   1e8e2:	22ff      	movs	r2, #255	; 0xff
   1e8e4:	b2ef      	uxtb	r7, r5
   1e8e6:	4015      	ands	r5, r2
   1e8e8:	2280      	movs	r2, #128	; 0x80
   1e8ea:	0192      	lsls	r2, r2, #6
   1e8ec:	4211      	tst	r1, r2
   1e8ee:	d015      	beq.n	1e91c <__swbuf_r+0x60>
   1e8f0:	6822      	ldr	r2, [r4, #0]
   1e8f2:	6961      	ldr	r1, [r4, #20]
   1e8f4:	1ad3      	subs	r3, r2, r3
   1e8f6:	428b      	cmp	r3, r1
   1e8f8:	da1b      	bge.n	1e932 <__swbuf_r+0x76>
   1e8fa:	3301      	adds	r3, #1
   1e8fc:	68a1      	ldr	r1, [r4, #8]
   1e8fe:	3901      	subs	r1, #1
   1e900:	60a1      	str	r1, [r4, #8]
   1e902:	1c51      	adds	r1, r2, #1
   1e904:	6021      	str	r1, [r4, #0]
   1e906:	7017      	strb	r7, [r2, #0]
   1e908:	6962      	ldr	r2, [r4, #20]
   1e90a:	429a      	cmp	r2, r3
   1e90c:	d01a      	beq.n	1e944 <__swbuf_r+0x88>
   1e90e:	89a3      	ldrh	r3, [r4, #12]
   1e910:	07db      	lsls	r3, r3, #31
   1e912:	d501      	bpl.n	1e918 <__swbuf_r+0x5c>
   1e914:	2d0a      	cmp	r5, #10
   1e916:	d015      	beq.n	1e944 <__swbuf_r+0x88>
   1e918:	0028      	movs	r0, r5
   1e91a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1e91c:	4302      	orrs	r2, r0
   1e91e:	6e61      	ldr	r1, [r4, #100]	; 0x64
   1e920:	81a2      	strh	r2, [r4, #12]
   1e922:	4a14      	ldr	r2, [pc, #80]	; (1e974 <__swbuf_r+0xb8>)
   1e924:	400a      	ands	r2, r1
   1e926:	6662      	str	r2, [r4, #100]	; 0x64
   1e928:	6961      	ldr	r1, [r4, #20]
   1e92a:	6822      	ldr	r2, [r4, #0]
   1e92c:	1ad3      	subs	r3, r2, r3
   1e92e:	428b      	cmp	r3, r1
   1e930:	dbe3      	blt.n	1e8fa <__swbuf_r+0x3e>
   1e932:	0021      	movs	r1, r4
   1e934:	0030      	movs	r0, r6
   1e936:	f7fe fbcf 	bl	1d0d8 <_fflush_r>
   1e93a:	2800      	cmp	r0, #0
   1e93c:	d108      	bne.n	1e950 <__swbuf_r+0x94>
   1e93e:	6822      	ldr	r2, [r4, #0]
   1e940:	2301      	movs	r3, #1
   1e942:	e7db      	b.n	1e8fc <__swbuf_r+0x40>
   1e944:	0021      	movs	r1, r4
   1e946:	0030      	movs	r0, r6
   1e948:	f7fe fbc6 	bl	1d0d8 <_fflush_r>
   1e94c:	2800      	cmp	r0, #0
   1e94e:	d0e3      	beq.n	1e918 <__swbuf_r+0x5c>
   1e950:	2501      	movs	r5, #1
   1e952:	426d      	negs	r5, r5
   1e954:	e7e0      	b.n	1e918 <__swbuf_r+0x5c>
   1e956:	0021      	movs	r1, r4
   1e958:	0030      	movs	r0, r6
   1e95a:	f7fd fa29 	bl	1bdb0 <__swsetup_r>
   1e95e:	2800      	cmp	r0, #0
   1e960:	d1f6      	bne.n	1e950 <__swbuf_r+0x94>
   1e962:	230c      	movs	r3, #12
   1e964:	5ee0      	ldrsh	r0, [r4, r3]
   1e966:	6923      	ldr	r3, [r4, #16]
   1e968:	b281      	uxth	r1, r0
   1e96a:	e7ba      	b.n	1e8e2 <__swbuf_r+0x26>
   1e96c:	f7fe fc0e 	bl	1d18c <__sinit>
   1e970:	e7ad      	b.n	1e8ce <__swbuf_r+0x12>
   1e972:	46c0      	nop			; (mov r8, r8)
   1e974:	ffffdfff 	.word	0xffffdfff

0001e978 <_wcrtomb_r>:
   1e978:	b570      	push	{r4, r5, r6, lr}
   1e97a:	001d      	movs	r5, r3
   1e97c:	4b11      	ldr	r3, [pc, #68]	; (1e9c4 <_wcrtomb_r+0x4c>)
   1e97e:	b084      	sub	sp, #16
   1e980:	681b      	ldr	r3, [r3, #0]
   1e982:	0004      	movs	r4, r0
   1e984:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   1e986:	2900      	cmp	r1, #0
   1e988:	d00e      	beq.n	1e9a8 <_wcrtomb_r+0x30>
   1e98a:	2b00      	cmp	r3, #0
   1e98c:	d016      	beq.n	1e9bc <_wcrtomb_r+0x44>
   1e98e:	20e0      	movs	r0, #224	; 0xe0
   1e990:	581e      	ldr	r6, [r3, r0]
   1e992:	002b      	movs	r3, r5
   1e994:	0020      	movs	r0, r4
   1e996:	47b0      	blx	r6
   1e998:	1c43      	adds	r3, r0, #1
   1e99a:	d103      	bne.n	1e9a4 <_wcrtomb_r+0x2c>
   1e99c:	2300      	movs	r3, #0
   1e99e:	602b      	str	r3, [r5, #0]
   1e9a0:	338a      	adds	r3, #138	; 0x8a
   1e9a2:	6023      	str	r3, [r4, #0]
   1e9a4:	b004      	add	sp, #16
   1e9a6:	bd70      	pop	{r4, r5, r6, pc}
   1e9a8:	2b00      	cmp	r3, #0
   1e9aa:	d009      	beq.n	1e9c0 <_wcrtomb_r+0x48>
   1e9ac:	22e0      	movs	r2, #224	; 0xe0
   1e9ae:	a901      	add	r1, sp, #4
   1e9b0:	589e      	ldr	r6, [r3, r2]
   1e9b2:	0020      	movs	r0, r4
   1e9b4:	002b      	movs	r3, r5
   1e9b6:	2200      	movs	r2, #0
   1e9b8:	47b0      	blx	r6
   1e9ba:	e7ed      	b.n	1e998 <_wcrtomb_r+0x20>
   1e9bc:	4b02      	ldr	r3, [pc, #8]	; (1e9c8 <_wcrtomb_r+0x50>)
   1e9be:	e7e6      	b.n	1e98e <_wcrtomb_r+0x16>
   1e9c0:	4b01      	ldr	r3, [pc, #4]	; (1e9c8 <_wcrtomb_r+0x50>)
   1e9c2:	e7f3      	b.n	1e9ac <_wcrtomb_r+0x34>
   1e9c4:	20000018 	.word	0x20000018
   1e9c8:	20000448 	.word	0x20000448

0001e9cc <__aeabi_dcmpun>:
   1e9cc:	b570      	push	{r4, r5, r6, lr}
   1e9ce:	4e0e      	ldr	r6, [pc, #56]	; (1ea08 <__aeabi_dcmpun+0x3c>)
   1e9d0:	030d      	lsls	r5, r1, #12
   1e9d2:	031c      	lsls	r4, r3, #12
   1e9d4:	0049      	lsls	r1, r1, #1
   1e9d6:	005b      	lsls	r3, r3, #1
   1e9d8:	0b2d      	lsrs	r5, r5, #12
   1e9da:	0d49      	lsrs	r1, r1, #21
   1e9dc:	0b24      	lsrs	r4, r4, #12
   1e9de:	0d5b      	lsrs	r3, r3, #21
   1e9e0:	42b1      	cmp	r1, r6
   1e9e2:	d004      	beq.n	1e9ee <__aeabi_dcmpun+0x22>
   1e9e4:	4908      	ldr	r1, [pc, #32]	; (1ea08 <__aeabi_dcmpun+0x3c>)
   1e9e6:	2000      	movs	r0, #0
   1e9e8:	428b      	cmp	r3, r1
   1e9ea:	d008      	beq.n	1e9fe <__aeabi_dcmpun+0x32>
   1e9ec:	bd70      	pop	{r4, r5, r6, pc}
   1e9ee:	4305      	orrs	r5, r0
   1e9f0:	2001      	movs	r0, #1
   1e9f2:	2d00      	cmp	r5, #0
   1e9f4:	d1fa      	bne.n	1e9ec <__aeabi_dcmpun+0x20>
   1e9f6:	4904      	ldr	r1, [pc, #16]	; (1ea08 <__aeabi_dcmpun+0x3c>)
   1e9f8:	2000      	movs	r0, #0
   1e9fa:	428b      	cmp	r3, r1
   1e9fc:	d1f6      	bne.n	1e9ec <__aeabi_dcmpun+0x20>
   1e9fe:	4314      	orrs	r4, r2
   1ea00:	0020      	movs	r0, r4
   1ea02:	1e44      	subs	r4, r0, #1
   1ea04:	41a0      	sbcs	r0, r4
   1ea06:	e7f1      	b.n	1e9ec <__aeabi_dcmpun+0x20>
   1ea08:	000007ff 	.word	0x000007ff

0001ea0c <k.4571>:
   1ea0c:	428a2f98 71374491 b5c0fbcf e9b5dba5     ./.B.D7q........
   1ea1c:	3956c25b 59f111f1 923f82a4 ab1c5ed5     [.V9...Y..?..^..
   1ea2c:	d807aa98 12835b01 243185be 550c7dc3     .....[....1$.}.U
   1ea3c:	72be5d74 80deb1fe 9bdc06a7 c19bf174     t].r........t...
   1ea4c:	e49b69c1 efbe4786 0fc19dc6 240ca1cc     .i...G.........$
   1ea5c:	2de92c6f 4a7484aa 5cb0a9dc 76f988da     o,.-..tJ...\...v
   1ea6c:	983e5152 a831c66d b00327c8 bf597fc7     RQ>.m.1..'....Y.
   1ea7c:	c6e00bf3 d5a79147 06ca6351 14292967     ....G...Qc..g)).
   1ea8c:	27b70a85 2e1b2138 4d2c6dfc 53380d13     ...'8!...m,M..8S
   1ea9c:	650a7354 766a0abb 81c2c92e 92722c85     Ts.e..jv.....,r.
   1eaac:	a2bfe8a1 a81a664b c24b8b70 c76c51a3     ....Kf..p.K..Ql.
   1eabc:	d192e819 d6990624 f40e3585 106aa070     ....$....5..p.j.
   1eacc:	19a4c116 1e376c08 2748774c 34b0bcb5     .....l7.LwH'...4
   1eadc:	391c0cb3 4ed8aa4a 5b9cca4f 682e6ff3     ...9J..NO..[.o.h
   1eaec:	748f82ee 78a5636f 84c87814 8cc70208     ...toc.x.x......
   1eafc:	90befffa a4506ceb bef9a3f7 c67178f2     .....lP......xq.
   1eb0c:	43331104 40c40704 0000147a 00001504     ..3C...@z.......
   1eb1c:	00001510 0000151c 00001528 00001534     ........(...4...
   1eb2c:	52455355 414f4220 00004452 5f534c4d     USER BOARD..MLS_
   1eb3c:	5f4b4453 5f305f31 00345f50 20677541     SDK_1_0_P_4.Aug 
   1eb4c:	32203620 00313230 323a3131 38353a39      6 2021.11:29:58
	...

0001eb5d <gParserStartCmdSize>:
   1eb5d:	00000002                                         ...

0001eb60 <maParserBaseCmd>:
   1eb60:	0001f200 0001eb80 00000000 00000009     ................
   1eb70:	0001f204 0001f130 00000000 00000005     ....0...........

0001eb80 <maParserLoraCmd>:
   1eb80:	0001f21c 00000000 00002231 00000100     ........1"......
   1eb90:	0001f284 00000000 0000232d 00000100     ........-#......
   1eba0:	0001f28c 00000000 00002369 00000300     ........i#......
   1ebb0:	0001f208 0001ef00 00000000 00000022     ............"...
   1ebc0:	0001f224 0001ec40 00000000 00000028     $...@.......(...
   1ebd0:	0001f290 00000000 00002bf9 00000000     .........+......
   1ebe0:	0001f298 00000000 00002c1d 00000000     .........,......
   1ebf0:	0001f2a0 00000000 00002c35 00000000     ........5,......
   1ec00:	0001f2a8 00000000 00002e2d 00000000     ........-.......

0001ec10 <maParserLoraGetChCmd>:
   1ec10:	0001f4a4 00000000 0000282d 00000100     ........-(......
   1ec20:	0001f2ec 00000000 00002a39 00000100     ........9*......
   1ec30:	0001f4ac 00000000 00002b15 00000100     .........+......

0001ec40 <maParserLoraGetCmd>:
   1ec40:	0001f2b4 00000000 00002451 00000000     ........Q$......
   1ec50:	0001f2b8 00000000 000024c1 00000000     .........$......
   1ec60:	0001f2bc 00000000 0000255d 00000000     ........]%......
   1ec70:	0001f2c4 00000000 000025f5 00000000     .........%......
   1ec80:	0001f2cc 00000000 0000267d 00000000     ........}&......
   1ec90:	0001f664 0001ec10 00000000 00000003     d...............
   1eca0:	0001f2d4 00000000 00002bc5 00000000     .........+......
   1ecb0:	0001f2dc 00000000 00002cad 00000000     .........,......
   1ecc0:	0001f2e0 00000000 00003029 00000000     ........)0......
   1ecd0:	0001f2ec 00000000 00003135 00000000     ........51......
   1ece0:	0001f2f4 00000000 00003259 00000000     ........Y2......
   1ecf0:	0001f2fc 00000000 0000328d 00000000     .........2......
   1ed00:	0001f304 00000000 000032c1 00000000     .........2......
   1ed10:	0001f30c 00000000 000032f5 00000000     .........2......
   1ed20:	0001f314 00000000 00003365 00000000     ........e3......
   1ed30:	0001f318 00000000 000033e1 00000000     .........3......
   1ed40:	0001f324 00000000 00003415 00000000     $........4......
   1ed50:	0001f8f4 00000000 00003449 00000000     ........I4......
   1ed60:	0001f330 00000000 00002f41 00000000     0.......A/......
   1ed70:	0001f338 00000000 00002f75 00000000     8.......u/......
   1ed80:	0001f340 00000000 00002fa5 00000000     @......../......
   1ed90:	0001f348 00000000 00002d65 00000000     H.......e-......
   1eda0:	0001f34c 00000000 000034c1 00000000     L........4......
   1edb0:	0001f354 00000000 00003505 00000000     T........5......
   1edc0:	0001f368 00000000 0000358d 00000100     h........5......
   1edd0:	0001f374 00000000 000035d9 00000100     t........5......
   1ede0:	0001f380 00000000 00003675 00000100     ........u6......
   1edf0:	0001f390 00000000 000037c1 00000100     .........7......
   1ee00:	0001f39c 00000000 00003841 00000100     ........A8......
   1ee10:	0001f3a4 0001eec0 00000000 00000001     ................
   1ee20:	0001f3ac 00000000 00003891 00000000     .........8......
   1ee30:	0001f3b4 00000000 000038c5 00000000     .........8......
   1ee40:	0001f3c0 00000000 000038f1 00000000     .........8......
   1ee50:	0001f3c8 00000000 0000391d 00000000     .........9......
   1ee60:	0001f404 00000000 00003951 00000000     ........Q9......
   1ee70:	0001f3d4 00000000 00003981 00000000     .........9......
   1ee80:	0001f3e0 00000000 0000398d 00000000     .........9......
   1ee90:	0001f3f0 00000000 00003999 00000000     .........9......
   1eea0:	0001f400 00000000 000039cd 00000000     .........9......
   1eeb0:	0001f414 00000000 00003a79 00000000     ........y:......

0001eec0 <maParserLoraGetSubBandCmd>:
   1eec0:	0001f2ec 00000000 00002929 00000100     ........))......

0001eed0 <maParserLoraSetChCmd>:
   1eed0:	0001f4a4 00000000 000027b5 00000200     .........'......
   1eee0:	0001f2ec 00000000 000029d1 00000200     .........)......
   1eef0:	0001f4ac 00000000 00002a85 00000300     .........*......

0001ef00 <maParserLoraSetCmd>:
   1ef00:	0001f2b4 00000000 00002415 00000100     .........$......
   1ef10:	0001f2b8 00000000 00002485 00000100     .........$......
   1ef20:	0001f2bc 00000000 000024ed 00000100     .........$......
   1ef30:	0001f2c4 00000000 0000259d 00000100     .........%......
   1ef40:	0001f2cc 00000000 00002625 00000100     ........%&......
   1ef50:	0001f428 00000000 000026ad 00000100     (........&......
   1ef60:	0001f430 00000000 00002705 00000100     0........'......
   1ef70:	0001f438 00000000 0000275d 00000100     8.......]'......
   1ef80:	0001f2d4 00000000 00002b89 00000100     .........+......
   1ef90:	0001f664 0001eed0 00000000 00000003     d...............
   1efa0:	0001f2dc 00000000 00002c41 00000200     ........A,......
   1efb0:	0001f440 00000000 00003175 00000100     @.......u1......
   1efc0:	0001f2f4 00000000 000031c1 00000100     .........1......
   1efd0:	0001f2fc 00000000 0000320d 00000100     .........2......
   1efe0:	0001f314 00000000 00003329 00000100     ........)3......
   1eff0:	0001f318 00000000 00003391 00000100     .........3......
   1f000:	0001f444 00000000 00002fd5 00000100     D......../......
   1f010:	0001f330 00000000 00002edd 00000100     0...............
   1f020:	0001f338 00000000 00002e45 00000100     8.......E.......
   1f030:	0001f340 00000000 00002e91 00000100     @...............
   1f040:	0001f348 00000000 00002d0d 00000500     H........-......
   1f050:	0001f34c 00000000 00003475 00000100     L.......u4......
   1f060:	0001f368 00000000 00003565 00000200     h.......e5......
   1f070:	0001f380 00000000 00003629 00000200     ........)6......
   1f080:	0001f44c 00000000 000036d5 00000200     L........6......
   1f090:	0001f45c 00000000 00003725 00000200     \.......%7......
   1f0a0:	0001f390 00000000 00003775 00000200     ........u7......
   1f0b0:	0001f39c 00000000 00003811 00000200     .........8......
   1f0c0:	0001f2e0 00000000 0000305d 00000100     ........]0......
   1f0d0:	0001f46c 00000000 000030a9 00000100     l........0......
   1f0e0:	0001f480 00000000 000030f9 00000100     .........0......
   1f0f0:	0001f3a4 0001f120 00000000 00000001     .... ...........
   1f100:	0001f414 00000000 000039fd 00000100     .........9......
   1f110:	0001f490 00000000 00003a3d 00000100     ........=:......

0001f120 <maParserLoraSetSubBandCmd>:
   1f120:	0001f2ec 00000000 0000287d 00000200     ........}(......

0001f130 <maParserSysCmd>:
   1f130:	0001f208 0001f1f0 00000000 00000001     ................
   1f140:	0001f20c 00000000 00003d79 00000000     ........y=......
   1f150:	0001f21c 00000000 00003d5d 00000000     ........]=......
   1f160:	0001f224 0001f180 00000000 00000007     $...............
   1f170:	0001f228 00000000 00003d9d 00000200     (........=......

0001f180 <maParserSysGetCmd>:
   1f180:	0001f230 00000000 00003b4d 00000000     0.......M;......
   1f190:	0001f234 00000000 00003b21 00000000     4.......!;......
   1f1a0:	0001f23c 00000000 00003b65 00000000     <.......e;......
   1f1b0:	0001f248 00000000 00003bf5 00000000     H........;......
   1f1c0:	0001f254 00000000 00003c3d 00000000     T.......=<......
   1f1d0:	0001f264 00000000 00003c99 00000000     d........<......
   1f1e0:	0001f274 00000000 00003ce9 00000000     t........<......

0001f1f0 <maParserSysSetCmd>:
   1f1f0:	0001f23c 00000000 00003b95 00000100     <........;......
   1f200:	0063616d 00737973 00746573 74636166     mac.sys.set.fact
   1f210:	5279726f 54455345 00000000 65736572     oryRESET....rese
   1f220:	00000074 00746567 65656c73 00000070     t...get.sleep...
   1f230:	00726576 75657768 00000069 74737563     ver.hweui...cust
   1f240:	61706d6f 006d6172 70797263 6e736f74     omparam.cryptosn
   1f250:	00000000 70797263 65646f74 69756576     ....cryptodeveui
   1f260:	00000000 70797263 6f6a6f74 75656e69     ....cryptojoineu
   1f270:	00000069 70797263 6b746f74 666e696d     i...cryptotkminf
   1f280:	0000006f 6e696f6a 00000000 00007874     o...join....tx..
   1f290:	73756170 00000065 75736572 0000656d     pause...resume..
   1f2a0:	65766173 00000000 63726f66 414e4565     save....forceENA
   1f2b0:	00454c42 00007264 00726461 61766564     BLE.dr..adr.deva
   1f2c0:	00726464 65766564 00006975 6e696f6a     ddr.deveui..join
   1f2d0:	00697565 69727770 00007864 00327872     eui.pwridx..rx2.
   1f2e0:	64676761 6c637963 00000065 74617473     aggdcycle...stat
   1f2f0:	00007375 78746572 00000000 73706572     us..retx....reps
   1f300:	00000000 6e67726d 00000000 626e7767     ....mrgn....gwnb
   1f310:	00000000 00007261 65647872 3179616c     ....ar..rxdelay1
   1f320:	00000000 65647872 3279616c 00000000     ....rxdelay2....
   1f330:	636e7973 00000000 74637075 00000072     sync....upctr...
   1f340:	74636e64 00000072 0074626c 6c636465     dnctr...lbt.edcl
   1f350:	00737361 6c636465 73737361 6f707075     ass.edclasssuppo
   1f360:	64657472 00000000 7361636d 616e6574     rted....mcastena
   1f370:	00656c62 7361636d 636e6474 00007274     ble.mcastdnctr..
   1f380:	7361636d 76656474 72646461 00000000     mcastdevaddr....
   1f390:	7361636d 65726674 00000071 7361636d     mcastfreq...mcas
   1f3a0:	00726474 62627573 00646e61 72746b70     tdr.subband.pktr
   1f3b0:	00697373 70667369 69646e65 0000676e     ssi.isfpending..
   1f3c0:	6c647369 006b6361 7473616c 64696863     isdlack.lastchid
   1f3d0:	00000000 72666e63 79727465 00746e63     ....cnfretrycnt.
   1f3e0:	6e636e75 74657266 6e637972 00000074     uncnfretrycnt...
   1f3f0:	5074786e 6f6c7961 69536461 0000657a     nxtPayloadSize..
   1f400:	6e696f6a 79747564 6c637963 6d697465     joindutycycletim
   1f410:	00000065 6e696f6a 6b636162 6566666f     e...joinbackoffe
   1f420:	6c62616e 00000065 736b776e 0079656b     nable...nwkskey.
   1f430:	73707061 0079656b 6b707061 00007965     appskey.appkey..
   1f440:	00746162 6b6e696c 006b6863 7361636d     bat.linkchk.mcas
   1f450:	6b776e74 79656b73 00000000 7361636d     tnwkskey....mcas
   1f460:	70706174 79656b73 00000000 70797263     tappskey....cryp
   1f470:	65646f74 616e6576 64656c62 00000000     todevenabled....
   1f480:	74736574 65646f6d 62616e65 0064656c     testmodeenabled.
   1f490:	4678616d 50746e63 70557364 61567464     maxFcntPdsUpdtVa
   1f4a0:	0000006c 71657266 00000000 61727264     l...freq....drra
   1f4b0:	0065676e 00001f06 00001f78 00001f82     nge.....x.......
   1f4c0:	00001f8c 00001f96 00001fa0 00001fc8     ................
   1f4d0:	00001fd2 00001fe6 00001ff0 00001ffa     ................
   1f4e0:	00002004 0000200e 00002018 00001ef2     . ... ... ......
   1f4f0:	00001faa 00001fb4 00001fbe 00001fdc     ................
   1f500:	00001ef2 00001ef2 00001ef2 00002022     ............" ..
   1f510:	00002046 00002050 0000206e 00002078     F ..P ..n ..x ..
   1f520:	00002082 0000208c 00002096 000020a0     . ... ... ... ..
   1f530:	0000203c 000020aa 000020b4 000020be     < ... ... ... ..
   1f540:	000020c8 000020d2 000020fa 00002104     . ... ... ...!..
   1f550:	00002118 00002122 0000212c 00002136     .!.."!..,!..6!..
   1f560:	00002140 0000214a 00001ef2 000020dc     @!..J!....... ..
   1f570:	000020e6 000020f0 0000210e 00002064     . ... ...!..d ..
   1f580:	0000205a 00001ef2 00002154 5f63616d     Z ......T!..mac_
   1f590:	00207872 5f6b6361 65636572 64657669     rx .ack_received
   1f5a0:	00000000 5f746f6e 6e696f6a 00006465     ....not_joined..
   1f5b0:	61766e69 5f64696c 61726170 0000006d     invalid_param...
   1f5c0:	7379656b 746f6e5f 696e695f 00000074     keys_not_init...
   1f5d0:	656c6973 0000746e 6d617266 756f635f     silent..fram_cou
   1f5e0:	7265746e 7272655f 6a65725f 5f6e696f     nter_err_rejoin_
   1f5f0:	6465656e 00006465 61766e69 5f64696c     needed..invalid_
   1f600:	746e6366 00000072 5f63696d 6f727265     fcntr...mic_erro
   1f610:	00000072 61766e69 5f64696c 7079746d     r...invalid_mtyp
   1f620:	00000065 61766e69 5f64696c 66667562     e...invalid_buff
   1f630:	6c5f7265 74676e65 00000068 5f63616d     er_length...mac_
   1f640:	73756170 00006465 7361636d 64685f74     paused..mcast_hd
   1f650:	6e695f72 696c6176 00000064 665f6f6e     r_invalid...no_f
   1f660:	5f656572 00006863 79737562 00000000     ree_ch..busy....
   1f670:	615f6f6e 00206b63 6e696f6a 5f6e695f     no_ack .join_in_
   1f680:	676f7270 73736572 00000000 6f736572     progress....reso
   1f690:	65637275 616e755f 6c696176 656c6261     urce_unavailable
   1f6a0:	00000000 61766e69 5f64696c 75716572     ....invalid_requ
   1f6b0:	00747365 61766e69 5f64696c 6b636170     est.invalid_pack
   1f6c0:	00007465 5f63616d 6f5f7874 0000006b     et..mac_tx_ok...
   1f6d0:	69646172 78745f6f 006b6f5f 69646172     radio_tx_ok.radi
   1f6e0:	6f6e5f6f 7461645f 00000061 69646172     o_no_data...radi
   1f6f0:	78745f6f 6d69745f 74756f65 00000000     o_tx_timeout....
   1f700:	745f7874 6f656d69 00007475 69646172     tx_timeout..radi
   1f710:	61645f6f 735f6174 00657a69 69646172     o_data_size.radi
   1f720:	6e695f6f 696c6176 65725f64 00000071     o_invalid_req...
   1f730:	69646172 75625f6f 00007973 69646172     radio_busy..radi
   1f740:	756f5f6f 666f5f74 6e61725f 00006567     o_out_of_range..
   1f750:	69646172 6e755f6f 5f707573 72747461     radio_unsup_attr
   1f760:	00000000 69646172 68635f6f 656e6e61     ....radio_channe
   1f770:	75625f6c 00007973 00706261 6161746f     l_busy..abp.otaa
   1f780:	00000000 646e6142 20732520 20746f6e     ....Band %s not 
   1f790:	70707573 6574726f 000a0d64 00006b6f     supported...ok..
   1f7a0:	00666e63 6e636e75 00000066              cnf.uncnf...

0001f7ac <gapParseIsmBand>:
   1f7ac:	0001f8fc 0001f900 0001f904 0001f90c     ................
   1f7bc:	0001f914 0001f91c 0001f924 0001f92c     ........$...,...
   1f7cc:	0001f934 0001f93c 0001f944 0001f94c     4...<...D...L...
   1f7dc:	0001f954 0001f95c 0001f964 0001f96c     T...\...d...l...

0001f7ec <gapParseJoinStatus>:
   1f7ec:	0001f97c 0001f984 0001f65c 0001f700     |.......\.......
   1f7fc:	0001f608                                ....

0001f800 <gapParseOnOff>:
   1f800:	0001f974 0001f978                       t...x...

0001f808 <gapParserBool>:
   1f808:	0001f888 0001f890                       ........

0001f810 <gapParserEdClass>:
   1f810:	0001f898 0001f8a0 0001f8a8 0001f8b0     ................

0001f820 <gapParserLorawanStatus>:
   1f820:	0001f8c0 0001f6dc 0001f70c 0001f71c     ................
   1f830:	0001f730 0001f73c 0001f750 0001f764     0...<...P...d...
   1f840:	0001f79c 0001f5a4 0001f5b0 0001f5c0     ................
   1f850:	0001f5d0 0001f5d8 0001f8cc 0001f63c     ............<...
   1f860:	0001f65c 0001f668 0001f8e0 0001f678     \...h.......x...
   1f870:	0001f68c 0001f6a4 0001f8e8 0001f700     ................
   1f880:	0001f6ec 0001f6b4 736c6166 00000065     ........false...
   1f890:	65757274 00000000 53414c43 00412053     true....CLASS A.
   1f8a0:	53414c43 00422053 53414c43 00432053     CLASS B.CLASS C.
   1f8b0:	53414c43 4e492053 494c4156 00000044     CLASS INVALID...
   1f8c0:	69646172 6b6f5f6f 00000000 61766e69     radio_ok....inva
   1f8d0:	5f64696c 61746164 6e656c5f 00000000     lid_data_len....
   1f8e0:	615f6f6e 00006b63 75736e75 726f7070     no_ack..unsuppor
   1f8f0:	5f646574 646e6162 00000000 00383638     ted_band....868.
   1f900:	00333334 3139616e 00000035 31397561     433.na915...au91
   1f910:	00000035 3239726b 00000030 396e706a     5...kr920...jpn9
   1f920:	00003332 396e7262 00003332 39626d63     23..brn923..cmb9
   1f930:	00003332 39736e69 00003332 736f616c     23..ins923..laos
   1f940:	00333239 32397a6e 00000033 32397073     923.nz923...sp92
   1f950:	00000033 396e7774 00003332 69616874     3...twn923..thai
   1f960:	00333239 396d7476 00003332 38646e69     923.vtm923..ind8
   1f970:	00003536 0066666f 00006e6f 696e6564     65..off.on..deni
   1f980:	00006465 65636361 64657470 00000000     ed..accepted....
   1f990:	6c250a0d 000a0d64 6e617473 00796264     ..%ld...standby.
   1f9a0:	6b636162 00007075 00727265 6978450a     backup..err..Exi
   1f9b0:	676e6974 656c5320 0d0a7065 00000000     ting Sleep......

0001f9c0 <gapParserSysStatus>:
   1f9c0:	0001f79c 0001f5b0 0001f9a8 656c730a     .............sle
   1f9d0:	6f5f7065 6c25206b 736d2064 00000d0a     ep_ok %ld ms....
   1f9e0:	00000a0d 00004b7c 00004b7c 00004b4a     ....|K..|K..JK..
   1f9f0:	00004b7c 00004b4a 00004b30 00004b30     |K..JK..0K..0K..
   1fa00:	00004b7c 00004b7c 00004b7c 00004b7c     |K..|K..|K..|K..
   1fa10:	00004b7c 00004b7c 00004b7c 00004b7c     |K..|K..|K..|K..
   1fa20:	00004b7c 00004b7c 00004b7c 00004b7c     |K..|K..|K..|K..
   1fa30:	00004b7c 00004b7c 00004b7c 00004b7c     |K..|K..|K..|K..
   1fa40:	00004b7c 00004b7c 00004b7c 00004b4a     |K..|K..|K..JK..
   1fa50:	00004b7c 00004b4a 00004b7c 00004b7c     |K..JK..|K..|K..
   1fa60:	00004b7c 00004b7c 00004b7c 00004b7c     |K..|K..|K..|K..
   1fa70:	00004b7c 00004b7c 00004b7c 00004b7c     |K..|K..|K..|K..
   1fa80:	00004b7c 00004b7c 00004b7c 00004b7c     |K..|K..|K..|K..
   1fa90:	00004b7c 00004b7c 00004b7c 00004b7c     |K..|K..|K..|K..
   1faa0:	00004b7c 00004b7c 00004b7c 00004b7c     |K..|K..|K..|K..
   1fab0:	00004b7c 00004b7c 00004b7c 00004b7c     |K..|K..|K..|K..
   1fac0:	00004b7c 00004b7c 00004b7c 00004b7c     |K..|K..|K..|K..
   1fad0:	00004b7c 00004b7c 00004b7c 00004b7c     |K..|K..|K..|K..
   1fae0:	00004b7c 00004b4a 00004b4a 00004b52     |K..JK..JK..RK..
   1faf0:	00004b52 00004b52 00004b52 42000000     RK..RK..RK.....B
   1fb00:	42000400 42000800 42000c00 42001000     ...B...B...B...B
   1fb10:	43000400 00006a76 00006a72 00006a72     ...Cvj..rj..rj..
   1fb20:	00006ad8 00006ad8 00006a8c 00006a7c     .j...j...j..|j..
   1fb30:	00006a92 00006ac6 00006c7c 00006c5c     .j...j..|l..\l..
   1fb40:	00006c5c 00006cf6 00006c6e 00006c8a     \l...l..nl...l..
   1fb50:	00006c60 00006c98 00006cda 00006d34     `l...l...l..4m..
   1fb60:	00006d76 00006d76 00006d76 00006d26     vm..vm..vm..&m..
   1fb70:	00006d42 00006d18 00006d50 00006d66     Bm...m..Pm..fm..
   1fb80:	0000754e 00007644 0000764e 00007658     Nu..Dv..Nv..Xv..
   1fb90:	00007662 00007694 0000769e 000076a8     bv...v...v...v..
   1fba0:	000076b2 000076bc 42002000 42002400     .v...v... .B.$.B
   1fbb0:	42002800 42002c00 43000800 00000002     .(.B.,.B...C....
   1fbc0:	00000100 00000002 00000200 00000002     ................
   1fbd0:	00000400 00000002 00000800 00000003     ................
   1fbe0:	00000004                                ....

0001fbe4 <AdvChannels923>:
   1fbe4:	3706ea00 3706ea00 ff100100 3709f740     ...7...7....@..7
   1fbf4:	3709f740 ff100100                       @..7....

0001fbfc <DefaultChannels923>:
   1fbfc:	50015001                                .P.P

0001fc00 <DefaultDrParamsAS>:
   1fc00:	00330008 01070cdf 0033000a 01070bce     ..3.......3.....
   1fc10:	0b33000e 01070ac6 3573001a 010709c2     ..3.......s5....
   1fc20:	7df20031 010708be f2f20053 010707bc     1..}....S.......
   1fc30:	f2f2003c 010807f1 f2f20064 000a00ce     <.......d.......

0001fc40 <SubBandDutyCycle923>:
   1fc40:	00000064                                d...

0001fc44 <SubBandParams923>:
   1fc44:	35c36d80 37502800 00000000              .m.5.(P7....

0001fc50 <pds_reg_as_item_list>:
   1fc50:	20002553 00200004 20002573 25c00104     S%. .. .s%. ...%
   1fc60:	200024fe ea010204                       .$. ....

0001fc68 <DefaultChannels915AU>:
   1fc68:	50015001 50015001 50015001 50015001     .P.P.P.P.P.P.P.P
   1fc78:	50015001 50015001 50015001 50015001     .P.P.P.P.P.P.P.P
   1fc88:	50015001 50015001 50015001 50015001     .P.P.P.P.P.P.P.P
   1fc98:	50015001 50015001 50015001 50015001     .P.P.P.P.P.P.P.P
   1fca8:	50015001 50015001 50015001 50015001     .P.P.P.P.P.P.P.P
   1fcb8:	50015001 50015001 50015001 50015001     .P.P.P.P.P.P.P.P
   1fcc8:	50015001 50015001 50015001 50015001     .P.P.P.P.P.P.P.P
   1fcd8:	50015001 50015001 50015001 50015001     .P.P.P.P.P.P.P.P
   1fce8:	66016601 66016601 66016601 66016601     .f.f.f.f.f.f.f.f

0001fcf8 <DefaultDrParamsAU>:
   1fcf8:	00330008 01070cdf 0033000b 01070bce     ..3.......3.....
   1fd08:	00330012 01070ac6 0073001c 010709c2     ..3.......s.....
   1fd18:	00f2003d 010708be 00f20053 010707bc     =.......S.......
   1fd28:	00f2003d 010908be 00000000 010a0000     =...............
   1fd38:	00350007 01090c0c 00810005 01090b06     ..5.............
   1fd48:	00f20007 01090a01 00f2000c 010909fe     ................
   1fd58:	00f20016 010908fc 00f2002a 010907fc     ........*.......

0001fd68 <pds_reg_au_item_list>:
   1fd68:	20002583 00900008 20002627 95010108     .%. ....'&. ....

0001fd78 <AdvChannels433>:
   1fd78:	19d1b9d8 19d1b9d8 ff0c0101 19d4c718     ................
   1fd88:	19d4c718 ff0c0101 19d7d458 19d7d458     ........X...X...
   1fd98:	ff0c0101                                ....

0001fd9c <AdvChannels868>:
   1fd9c:	33be27a0 33be27a0 ff100101 33c134e0     .'.3.'.3.....4.3
   1fdac:	33c134e0 ff100101 33c44220 33c44220     .4.3.... B.3 B.3
   1fdbc:	ff100101                                ....

0001fdc0 <DefaultChannels433>:
   1fdc0:	50015001 00005001                       .P.P.P..

0001fdc8 <DefaultChannels868>:
   1fdc8:	50015001 00005001                       .P.P.P..

0001fdd0 <DefaultDrparamsEU>:
   1fdd0:	00330008 01070cdf 0033000b 01070bd3     ..3.......3.....
   1fde0:	00330017 01070acc 0073001c 010709c2     ..3.......s.....
   1fdf0:	00f2003d 010708be 00f20053 010707bc     =.......S.......
   1fe00:	00f2003c 010807f1 00f20064 000a00ce     <.......d.......

0001fe10 <SubBandDutyCycle868>:
   1fe10:	006403e8 03e80064 0064000a              ..d.d.....d.

0001fe1c <SubBandParams433>:
   1fe1c:	19cf0e40 19ea8580 00000000              @...........

0001fe28 <SubBandParams868>:
   1fe28:	337055c0 338eda40 00000000 338eda41     .Up3@..3....A..3
   1fe38:	33bca100 00000000 33bca101 33c5c8c0     ...3.......3...3
   1fe48:	00000000 33c74f60 33cef080 00000000     ....`O.3...3....
   1fe58:	33d1fdc0 33d5ce50 00000000 33d691a0     ...3P..3.......3
   1fe68:	33db2580 00000000                       .%.3....

0001fe70 <pds_reg_eu868_fid1_item_list>:
   1fe70:	20002553 00200003                       S%. .. .

0001fe78 <pds_reg_eu868_fid2_item_list>:
   1fe78:	20002573 00c0000b                       s%. ....

0001fe80 <AdvChannels865>:
   1fe80:	338fce64 338fce64 ff1e0100 3394fe84     d..3d..3.......3
   1fe90:	3394fe84 ff1e0100 339de1e8 339de1e8     ...3.......3...3
   1fea0:	ff1e0100                                ....

0001fea4 <DefaultChannels865>:
   1fea4:	50015001 00005001                       .P.P.P..

0001feac <DefaultDrParamsIN>:
   1feac:	00330008 01070cdf 0033000a 01070bce     ..3.......3.....
   1febc:	0033000e 01070ac6 0073001a 010709c2     ..3.......s.....
   1fecc:	00f20031 010708be 00f20053 010707bc     1.......S.......
   1fedc:	00000000 010a0000 00f20008 000a00fe     ................

0001feec <pds_reg_ind_item_list>:
   1feec:	20002553 00200006 20002573 25c00106     S%. .. .s%. ...%

0001fefc <AdvChannels923JP>:
   1fefc:	3706ea00 3706ea00 ff100101 3709f740     ...7...7....@..7
   1ff0c:	3709f740 ff100101                       @..7....

0001ff14 <DefaultChannels923JP>:
   1ff14:	50015001                                .P.P

0001ff18 <DefaultDrParamsJP>:
   1ff18:	00330008 01070cdf 0033000a 01070bce     ..3.......3.....
   1ff28:	0b33000e 01070ac6 3573001a 010709c2     ..3.......s5....
   1ff38:	7df20031 010708be f2f20053 010707bc     1..}....S.......
   1ff48:	f2f2003c 010807f1 f2f20064 000a00ce     <.......d.......

0001ff58 <SubBandDutyCycleJP923>:
   1ff58:	000a0064                                d...

0001ff5c <SubBandParamsJP923>:
   1ff5c:	36d61600 36f7a7c0 00000000 36fab500     ...6...6.......6
   1ff6c:	37502800 00000000                       .(P7....

0001ff74 <pds_reg_jpn_fid1_item_list>:
   1ff74:	20002553 00200007 20002573 25c00107     S%. .. .s%. ...%

0001ff84 <AdvChannels920KR>:
   1ff84:	36f62120 36f62120 ff0e0100 36f92e60      !.6 !.6....`..6
   1ff94:	36f92e60 ff0e0100 36fc3ba0 36fc3ba0     `..6.....;.6.;.6
   1ffa4:	ff0e0100                                ....

0001ffa8 <DefaultChannels920KR>:
   1ffa8:	50015001 00005001                       .P.P.P..

0001ffb0 <DefaultDrParamsKR>:
   1ffb0:	00330008 01070cdf 0033000a 01070bce     ..3.......3.....
   1ffc0:	0033000e 01070ac6 0073001a 010709c2     ..3.......s.....
   1ffd0:	00f20031 010708be 00f20053 010707bc     1.......S.......

0001ffe0 <pds_reg_kr_fid1_item_list>:
   1ffe0:	20002553 00200005 20002573 25c00105     S%. .. .s%. ...%

0001fff0 <DefaultChannels915>:
   1fff0:	30013001 30013001 30013001 30013001     .0.0.0.0.0.0.0.0
   20000:	30013001 30013001 30013001 30013001     .0.0.0.0.0.0.0.0
   20010:	30013001 30013001 30013001 30013001     .0.0.0.0.0.0.0.0
   20020:	30013001 30013001 30013001 30013001     .0.0.0.0.0.0.0.0
   20030:	30013001 30013001 30013001 30013001     .0.0.0.0.0.0.0.0
   20040:	30013001 30013001 30013001 30013001     .0.0.0.0.0.0.0.0
   20050:	30013001 30013001 30013001 30013001     .0.0.0.0.0.0.0.0
   20060:	30013001 30013001 30013001 30013001     .0.0.0.0.0.0.0.0
   20070:	44014401 44014401 44014401 44014401     .D.D.D.D.D.D.D.D

00020080 <DefaultDrParamsNA>:
   20080:	000b0012 01070ac6 00350005 01070906     ..........5.....
   20090:	007d0007 01070801 00f2000c 010707fe     ..}.............
   200a0:	00f20016 010908fc 00000000 010a0000     ................
   200b0:	00000000 010a0000 00000000 010a0000     ................
   200c0:	00350023 01090cd5 00810007 01090b06     #.5.............
   200d0:	00f20007 01090a01 00f2000c 010909fe     ................
   200e0:	00f20016 010908fc 00f2002a 010907fc     ........*.......

000200f0 <pds_reg_na_item_list>:
   200f0:	20002583 00900002 20002627 95010102     .%. ....'&. ....
   20100:	0000a60c 0000a60c 0000a60c 0000a60c     ................
   20110:	0000a672 0000a6d8 0000a68a 0000a672     r...........r...

00020120 <keySlots>:
   20120:	0b030200 0a090e0c                       ........

00020128 <taskHandlers>:
   20128:	0000f019 00015481 00014a95 0000e691     .....T...J......
   20138:	0000fb4d                                M...

0002013c <tc_interrupt_vectors.13496>:
   2013c:	14131211 00000015 614c0a0d 72207473     ..........Last r
   2014c:	74657365 75616320 203a6573 00000000     eset cause: ....
   2015c:	74737953 52206d65 74657365 71655220     System Reset Req
   2016c:	74736575 0000000d 63746157 676f6468     uest....Watchdog
   2017c:	73655220 000d7465 65747845 6c616e72      Reset..External
   2018c:	73655220 000d7465 776f7242 754f206e      Reset..Brown Ou
   2019c:	33332074 74654420 6f746365 65522072     t 33 Detector Re
   201ac:	0d746573 00000000 776f7242 754f206e     set.....Brown Ou
   201bc:	32312074 74654420 6f746365 65522072     t 12 Detector Re
   201cc:	0d746573 00000000 65776f50 6e4f2d72     set.....Power-On
   201dc:	73655220 000d7465 61526f4c 204e4157      Reset..LoRaWAN 
   201ec:	63617453 5055206b 0080000d              Stack UP....

000201f8 <CSWTCH.144>:
   201f8:	00000000 40fe8480 00000000 410e8480     .......@.......A
   20208:	00000000 411e8480                       .......A

00020210 <FskSyncWordBuff>:
   20210:	01c194c1                                         ...

00020213 <macEndDevCmdReplyLen>:
   20213:	02010201 01010203 01000002              ............

0002021f <maxEIRPTable>:
   2021f:	0d0c0a08 1412100e 1b1a1815 24211e1d     ..............!$
	...

00020230 <pds_mac_fid1_item_list>:
   20230:	20002c52 00010000 20002c50 06010100     R,. ....P,. ....
   20240:	20002be4 0c040200 20002c53 15010300     .+. ....S,. ....
   20250:	20002c54 1b040400 20002ca4 24040500     T,. .....,. ...$
   20260:	20002c80 2d040600 20002c94 36100700     .,. ...-.,. ...6
   20270:	20002c84 4b100800 20002c6e 60040900     .,. ...Kn,. ...`
   20280:	20002c3d 69010b00 20002bec 6f010a00     =,. ...i.+. ...o
   20290:	20002c24 75020c00 20002c26 7c020d00     $,. ...u&,. ...|
   202a0:	20002c28 83020e00 20002c2a 8a020f00     (,. ....*,. ....
   202b0:	20002c2c 91021000 20002c2e 98021100     ,,. .....,. ....
   202c0:	20002c30 9f011200 20002c31 a5011300     0,. ....1,. ....
   202d0:	20002c36 b1011500 20002c35 ab011400     6,. ....5,. ....
   202e0:	20002bdc b7041600                       .+. ....

000202e8 <pds_mac_fid2_item_list>:
   202e8:	20002bc6 00050001 20002c4a 0a010101     .+. ....J,. ....
   202f8:	20002b5c 10010201 20002b5d 16040301     \+. ....]+. ....
   20308:	20002b61 1f100401 20002b71 34100501     a+. ....q+. ...4
   20318:	20002ba1 49100601 20002bb1 5e080701     .+. ...I.+. ...^
   20328:	20002bb9 6b080801 20002c32 78020901     .+. ...k2,. ...x
   20338:	20002be0 7f040a01 20002bd8 88040b01     .+. .....+. ....
   20348:	20002c3b 91010c01 20002d7c 97010d01     ;,. ....|-. ....
   20358:	20002d7d 9d010e01                       }-. ....

00020360 <lorawanHandlers>:
   20360:	00014945 00014859 00014a1d 000000fd     EI..YH...J......

00020370 <radioTaskHandlers>:
   20370:	00016051 00016151 00015e95 00015719     Q`..Qa...^...W..
   20380:	00016479 000170f8 000170c8 000170da     yd...p...p...p..
   20390:	0001701c 000170da 000170be 000170da     .p...p...p...p..
   203a0:	0001701c 000170c8 000170c8 000170be     .p...p...p...p..
   203b0:	0001701c 00017024 00017024 00017024     .p..$p..$p..$p..
   203c0:	000170e0 000170c8 000170c8 0001709c     .p...p...p...p..
   203d0:	00017180 0001709c 000170be 0001709c     .q...p...p...p..
   203e0:	00017180 000170c8 000170c8 000170be     .q...p...p...p..
   203f0:	00017180 00017024 00017024 00017024     .q..$p..$p..$p..
   20400:	0001718a 00017478 000173c8 000173c8     .q..xt...s...s..
   20410:	000173c6 0001746a 0001746a 00017460     .s..jt..jt..`t..
   20420:	000173c6 0001746a 00017460 0001746a     .s..jt..`t..jt..
   20430:	000173c6 00017470 00017470 00017470     .s..pt..pt..pt..
   20440:	00017500 00018248 0001822a 000181e4     .u..H...*.......
   20450:	00018102 000181e4 0001821c 000181e4     ................
   20460:	00018102 0001822a 0001822a 0001821c     ....*...*.......
   20470:	00018102 000180fa 000180fa 000180fa     ................
   20480:	00018460 00018aa8 00018968 00018968     `.......h...h...
   20490:	00018964 00018a80 00018a80 00018a72     d...........r...
   204a0:	00018964 00018a80 00018a72 00018a80     d.......r.......
   204b0:	00018964 00018a88 00018a88 00018a88     d...............
   204c0:	00018c8c                                ....

000204c4 <_global_impure_ptr>:
   204c4:	20000020 00000043 49534f50 00000058      .. C...POSIX...
   204d4:	0000002e 0000000a 33323130 37363534     ........01234567
   204e4:	62613938 66656463 6a696867 6e6d6c6b     89abcdefghijklmn
   204f4:	7271706f 76757473 7a797877 00000000     opqrstuvwxyz....
   20504:	0001ac52 0001ad26 0001ad26 0001ac3e     R...&...&...>...
   20514:	0001ad26 0001ad26 0001ad26 0001ad26     &...&...&...&...
   20524:	0001ad26 0001ad26 0001acf8 0001a80a     &...&...........
   20534:	0001ad26 0001a800 0001a814 0001ad26     &...........&...
   20544:	0001ac48 0001a9d4 0001a9d4 0001a9d4     H...............
   20554:	0001a9d4 0001a9d4 0001a9d4 0001a9d4     ................
   20564:	0001a9d4 0001a9d4 0001ad26 0001ad26     ........&...&...
   20574:	0001ad26 0001ad26 0001ad26 0001ad26     &...&...&...&...
   20584:	0001ad26 0001ad26 0001ad26 0001ad26     &...&...&...&...
   20594:	0001ad0e 0001ac62 0001ad26 0001ac62     ....b...&...b...
   205a4:	0001ad26 0001ad26 0001ad26 0001ad26     &...&...&...&...
   205b4:	0001abc8 0001ad26 0001ad26 0001abd2     ....&...&.......
   205c4:	0001ad26 0001ad26 0001ad26 0001ad26     &...&...&...&...
   205d4:	0001ad26 0001ac00 0001ad26 0001ad26     &.......&...&...
   205e4:	0001ac2e 0001ad26 0001ad26 0001ad26     ....&...&...&...
   205f4:	0001ad26 0001ad26 0001ad26 0001ad26     &...&...&...&...
   20604:	0001ad26 0001ad26 0001ad26 0001aa14     &...&...&.......
   20614:	0001aa4a 0001ac62 0001ac62 0001ac62     J...b...b...b...
   20624:	0001aaf2 0001aa4a 0001ad26 0001ad26     ....J...&...&...
   20634:	0001aafc 0001ad26 0001ab0e 0001ad22     ....&......."...
   20644:	0001ab3c 0001ab66 0001ad26 0001ab70     <...f...&...p...
   20654:	0001ad26 0001ad1e 0001ad26 0001ad26     &.......&...&...
   20664:	0001a862 00464e49 00666e69 004e414e     b...INF.inf.NAN.
   20674:	006e616e 33323130 37363534 42413938     nan.0123456789AB
   20684:	46454443 00000000 33323130 37363534     CDEF....01234567
   20694:	62613938 66656463 00000000 6c756e28     89abcdef....(nul
   206a4:	0000296c                                l)..

000206a8 <blanks.7238>:
   206a8:	20202020 20202020 20202020 20202020                     

000206b8 <zeroes.7239>:
   206b8:	30303030 30303030 30303030 30303030     0000000000000000

000206c8 <_ctype_>:
   206c8:	20202000 20202020 28282020 20282828     .         ((((( 
   206d8:	20202020 20202020 20202020 20202020                     
   206e8:	10108820 10101010 10101010 10101010      ...............
   206f8:	04040410 04040404 10040404 10101010     ................
   20708:	41411010 41414141 01010101 01010101     ..AAAAAA........
   20718:	01010101 01010101 01010101 10101010     ................
   20728:	42421010 42424242 02020202 02020202     ..BBBBBB........
   20738:	02020202 02020202 02020202 10101010     ................
   20748:	00000020 00000000 00000000 00000000      ...............
	...
   207cc:	69666e49 7974696e 00000000 004e614e     Infinity....NaN.
   207dc:	00000000                                ....

000207e0 <__mprec_bigtens>:
   207e0:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
   207f0:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
   20800:	7f73bf3c 75154fdd                       <.s..O.u

00020808 <__mprec_tens>:
   20808:	00000000 3ff00000 00000000 40240000     .......?......$@
   20818:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
   20828:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
   20838:	00000000 412e8480 00000000 416312d0     .......A......cA
   20848:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
   20858:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
   20868:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
   20878:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
   20888:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
   20898:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
   208a8:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
   208b8:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
   208c8:	79d99db4 44ea7843                       ...yCx.D

000208d0 <p05.6055>:
   208d0:	00000005 00000019 0000007d              ........}...

000208dc <_init>:
   208dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   208de:	46c0      	nop			; (mov r8, r8)
   208e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
   208e2:	bc08      	pop	{r3}
   208e4:	469e      	mov	lr, r3
   208e6:	4770      	bx	lr

000208e8 <__init_array_start>:
   208e8:	0001be85 	.word	0x0001be85

000208ec <__frame_dummy_init_array_entry>:
   208ec:	000000dd                                ....

000208f0 <_fini>:
   208f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   208f2:	46c0      	nop			; (mov r8, r8)
   208f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
   208f6:	bc08      	pop	{r3}
   208f8:	469e      	mov	lr, r3
   208fa:	4770      	bx	lr

000208fc <__fini_array_start>:
   208fc:	000000b5 	.word	0x000000b5
